**************************************************************
*                                                            *
* NAME: ETHLOGON                                             *
*                                                            *
* TYPE: Assembler Source                                     *
*                                                            *
* DESC: VTAM Logon Interpret Table and Routines              *
*                                                            *
* FUNCTION: - Interpret a "BAL-like" format LOGON command    *
*           - Interpret several other logon sequences        *
*                                                            *
*           LOGON Command:                                   *
*           ==============                                   *
*           The logon interpret routine LOGON processes a    *
*           logon message similar to the following USSTAB    *
*           definition:                                      *
*                                                            *
*           LOGON    USSCMD   CMD=LOGON,REP=LOGON,FORMAT=BAL *
*                    USSPARM  PARM=P1,REP=DATA               *
*                    USSPARM  PARM=APPLID,DEFAULT='TSO'      *
*                                                            *
*           To keep things simple not all possible variants  *
*           complying with the BAL format used in USS are    *
*           implemented. The exact syntax supported is:      *
*                                                            *
*            LOGON   user data to be passed to               *
*           <Logon> <the application to which >(,)<APPLID=x> *
*            logon   the user wants to log on                *
*                                                            *
*           where x is a 1-8 character application ID. If    *
*           user data is to be passed to the application it  *
*           must be entered as first parameter, i.e. if the  *
*           APPLID parameter is present, everything from the *
*           equal sign to the end of the message is con-     *
*           sidered to be part of the application ID. The    *
*           comma preceeding the APPLID parameter may be     *
*           omitted, if there is exactly one blank between   *
*           the logon verb and the APPLID parameter. If more *
*           than one blank is given, these are considered    *
*           user data and thus the APPLID parameter has to   *
*           be preceeded by a comma.                         *
*                                                            *
*           Other logon sequences:                           *
*           ======================                           *
*                                                            *
*           TSOx, Tsox,tsox                                  *
*           ---------------                                  *
*           The terminal is logged on to TSO. If x is not    *
*           present TSO will prompt for a userid. If x is    *
*           present it has to be 1-4 characters to form a    *
*           TSO userid TSOx. If x is longer than 4 charac-   *
*           ters INPUT NOT RECOGNIZED is returned. No para-  *
*           meters are accepted.                             *
*                                                            *
*           TSO <userdata>, Tso <userdata>, tso <userdata>   *
*           L <userdata>, l <userdata>                       *
*           --------------------------                       *
*           The terminal is logged on to TSO. If present     *
*           any input after the first blank is passed to     *
*           TSO as userdata, the first word of which is      *
*           interpreted by the TSO LOGON command as userid   *
*           and the rest as parameters.                      *
*                                                            *
*           The "l <userdata>" format is a courtesy to VM    *
*           users to feel at home at least at the logon      *
*           screen. Putting the string RUNNING at Pos. 24/61 *
*           of the logon screen can significantly enhance    *
*           that experience ;-)                              *
*                                                            *
*           arbitrary character string                       *
*           --------------------------                       *
*           anything not matching one of the sequences       *
*           mentioned above is passed directly to TSO as     *
*           userdata, i.e. any TSO user can logon directly   *
*           by just entering the userid (followed by para-   *
*           meters to the TSO LOGON command if desired).     *
*                                                            *
*           Note: The sequence Logon with uppercase L and    *
*                 WITHOUT any parameters is processed like   *
*                 the TSOx sequences because TSO recognizes  *
*                 only the all upper and all lower strings   *
*                 LOGON/logon in userdata explicitly as TSO  *
*                 LOGON commands. All other strings in       *
*                 userdata are taken as a TSO userid. Thus,  *
*                 while LOGON/logon WITHOUT parameters are   *
*                 handled correctly under the "arbitrary"    *
*                 sequence, this is not true for Logon with  *
*                 uppercase L. All three variants WITH para- *
*                 meters are processed by the BAL-like       *
*                 LOGON command mentioned above.             *
*                                                            *
**************************************************************
         ENTRY TSOXXXX,TSORMV,LOGON interpret routine entries
*
* Interpret table
*
ETHLOGON INTAB
         LOGCHAR APPLID=(ROUTINE,TSORMV),SEQNCE='Tso '
         LOGCHAR APPLID=(ROUTINE,TSORMV),SEQNCE='tso '
         LOGCHAR APPLID=(ROUTINE,TSORMV),SEQNCE='TSO '
         LOGCHAR APPLID=(ROUTINE,TSOXXXX),SEQNCE='Tso'
         LOGCHAR APPLID=(ROUTINE,TSOXXXX),SEQNCE='tso'
         LOGCHAR APPLID=(ROUTINE,TSOXXXX),SEQNCE='TSO'
         LOGCHAR APPLID=(ROUTINE,LOGON),SEQNCE='Logon '
         LOGCHAR APPLID=(ROUTINE,LOGON),SEQNCE='logon '
         LOGCHAR APPLID=(ROUTINE,LOGON),SEQNCE='LOGON '
         LOGCHAR APPLID=(ROUTINE,TSOXXXX),SEQNCE='Logon'
         LOGCHAR APPLID=(ROUTINE,TSORMV),SEQNCE='L '
         LOGCHAR APPLID=(ROUTINE,TSORMV),SEQNCE='l '
         LOGCHAR APPLID=(APPLICID,TSO)
         ENDINTAB
*
* Logon interpret routines
*
BASE     DS    0F              base of all interpret routines
         USING SAVEAREA,R13    addressability of VTAM's save area
         USING BASE,R15        addressability of interpret routines
*
* Logon interpret routine TSOXXXX
*
TSOXXXX  DS    0F              TSOxxxx, Logon with uppercase L
         C     R0,C3           3 character message, i.e. just TSO?
         BNE   CHKLOGUP        -> no: test for Logon with uppercase L
         MVC   0(3,R1),B80     -> yes: assume empty TSO user
         B     SETTSO          logon terminal to TSO
CHKLOGUP CLC   0(3,R1),LOGUP   is it Logon with uppercase L?
         BNE   CHKTSOL         -> no: check length
         C     R0,C5           5 character message, i.e. just Logon?
         BNE   CHKLOGL         -> no: check length
         MVC   0(5,R1),B80     -> yes: assume empty TSO user
         B     SETTSO          logon terminal to TSO
CHKLOGL  OC    0(5,R1),B80     Logonxx -> LOGONxx to enforce IKJ56410I
CHKTSOL  C     R0,C8           check length of message
         BL    SETTSO          -> length <= 7: logon terminal to TSO
         BR    R14             -> length  > 7: invalid message, return
SETTSO   MVC   APPLID(8),TSO   APPLID is TSO
*
* Return to VTAM after successful processing
*
SETAPPL  LM    R0,R1,APPLID    return APPLID in R0 and R1, ..
         SLR   R15,R15          .. set rc = 0 ..
         BR    R14              .. and return
*
* Logon interpret routine LOGON
*
LOGON    DS    0F              simple "BAL-like" format LOGON command
LOGONO   EQU   *-BASE          offset from BASE to LOGON
         USING LOGON,R15       establish addressability
         B     *+8             skip offset constant
         DC    AL4(LOGONO)     offset from BASE to LOGON constant
         S     R15,*-4         set R15 to BASE address and revert ..
         USING BASE,R15         .. to full addressability
         ST    R14,APPLID      remember VTAM's return address
         BAL   R14,REMOVE      have REMOVE remove the "logon " verb
         L     R14,APPLID      restore VTAM's return address
         MVC   APPLID(8),TSO   APPLID is TSO unless APPLID= parm found
         S     R0,C6           message is 6 bytes shorter now
         C     R0,C8           is message long enough for "APPLID=x"?
         BL    SETAPPLR         -> no:  return to VTAM for logon
         MVC   APPLPARM(16),B80 -> yes: clear workarea and length ind.
         LR    R3,R1           get message address
         LR    R4,R0           get message length
         C     R4,C15          is it at least 15 characters in length?
         BL    SHORT           -> no:  search APPLID= in whole message
         S     R4,C15          -> yes: compute highest possible ..
         AR    R3,R4                   .. start address for APPLID= ..
         L     R4,C15                  .. and set length to 15
         B     LONG            don't indicate short message
SHORT    MVI   LENGTH,C'S'     indicate short message
LONG     S     R4,C1           subtract one for EXecute
         EX    R4,MOVEAPPL     move candidate string to workarea
         OC    APPLPARM(15),B80 translate to uppercase
         TRT   APPLPARM+6(8),TRTEQUAL does it contain an equal sign?
         BZ    SETAPPLR        -> no:  return to VTAM for logon
         ST    R1,TEMPID       -> yes: remember address of equal sign
         LR    R2,R1           compute offset of equal sign ..
         LA    R1,APPLPARM      .. to beginn of candidate string, ..
         SR    R2,R1            .. result is in R2
         LR    R1,R4           get length of candidate string, ..
         SR    R1,R2            .. compute length of ..
         LR    R2,R1            .. APPLID value candidate ..
         S     R2,C1            .. and subtract one for execute
         L     R1,TEMPID       reset R1 to address of equal sign
         MVC   TEMPID(8),B80   blankout APPLID value candidate
         EX    R2,SETTMPID     move APPLID value candidate to TEMPID
         S     R1,C6           is the equal sign preceeded ..
         CLC   0(6,R1),BALAPID  .. by string APPLID?
         BNE   SETAPPLR        -> no:  return to VTAM for logon
         LA    R2,APPLPARM     -> yes: compute displacement from ..
         SR    R1,R2                   .. APPLPARM to string APPLID=
         AR    R3,R1           address of APPLID= in original message
         SR    R4,R1           total length of APPLID=x parameter
         CLI   LENGTH,C'S'     is it a short message?
         BNE   CHKCMA          -> no:  check comma before APPLID=
         C     R1,C0           -> yes: APPLPARM begins with APPLID=?
         BE    SKIPCMA         -> yes: don't test on preceeding comma
CHKCMA   S     R3,C1           -> no:  include potential comma ..
         A     R4,C1                   .. in APPLID=x parameter
         CLI   0(R3),C','      is APPLID= preceeded by a comma?
         BNE   SETAPPLR        -> no:  return to VTAM for logon
SKIPCMA  EX    R4,ADDBLNKS     -> yes: blankout (,)APPLID=xxxxxxxx ..
         MVC   APPLID(8),TEMPID        .. and use xxxxxxxx for APPLID
SETAPPLR LM    R2,R4,SAVE3REG  restore registers
         B     SETAPPL         return to VTAM for logon
*
* Logon interpret routine TSORMV
*
TSORMV   DS    0F              remove first word from "TSO xxx" message
TSORMVO  EQU   *-BASE          offset from BASE to TSORMV
         USING TSORMV,R15      establish addressability
         B     *+8             skip offset constant
         DC    AL4(TSORMVO)    offset from BASE to TSORMV constant
         S     R15,*-4         set R15 to BASE address and revert ..
         USING BASE,R15         .. to full addressability
         ST    R14,APPLID      remember VTAM's return address
         BAL   R14,REMOVE      have REMOVE remove the "tso " verb
         L     R14,APPLID      restore VTAM's return address
         MVC   APPLID(8),TSO   APPLID is TSO
         B     SETAPPLR        restore regs and return to VTAM
*
* Remove first word from a message
*
REMOVE   STM   R2,R4,SAVE3REG  need some registers now ;-)
         LR    R3,R1           remember message address
         LR    R4,R0           get message length and compute ..
         AR    R4,R1            .. address of first byte after message
         LR    R2,R0           get message length ..
         S     R2,C1            .. and subtract one for EXecute
         EX    R2,FINDBLNK     find first blank in message ..
         SR    R4,R1            .. compute length of rest of message ..
         S     R4,C2            .. minus one for EXecute
         EX    R4,SHIFT        shift message to the left
         LA    R2,1(,R4)       get length of rest of message and ..
         LR    R1,R3            .. compute address of first byte ..
         AR    R3,R2            .. after rest of message
         LR    R4,R0           get length of message
         SR    R4,R2           compute length of first word up to ..
         S     R4,C1            .. blank minus one for EXecute
         EX    R4,ADDBLNKS     pad message with blanks to the right
         BR    R14             return to caller
*
* Constants
*
TSO      DC    C'TSO     '     APPLID for TSO
LOGUP    DC    C'Log'          special case Logon with uppercase L
BALAPID  DC    C'APPLID='      APPLID parameter in BAL format
MOVEAPPL MVC   APPLPARM(1),0(R3) move potential APPLID parm to workarea
SETTMPID MVC   TEMPID(1),1(R1) move potential APPLID value to TEMPID
SHIFT    MVC   0(1,R3),1(R1)   shift message to the left
ADDBLNKS MVC   0(1,R3),B80     fill with blanks
FINDBLNK TRT   0(1,R1),TRTBLANK find first blank in message
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
TRTBLANK DC    X'00000000000000000000000000000000' 0
         DC    X'00000000000000000000000000000000' 1
         DC    X'00000000000000000000000000000000' 2
         DC    X'00000000000000000000000000000000' 3
         DC    X'FF000000000000000000000000000000' 4   x'40' blank
TRTEQUAL DC    X'00000000000000000000000000000000' 5 0
         DC    X'00000000000000000000000000000000' 6 1
         DC    X'00000000000000000000000000000000' 7 2
         DC    X'00000000000000000000000000000000' 8 3
         DC    X'00000000000000000000000000000000' 9 4
         DC    X'00000000000000000000000000000000' A 5
         DC    X'00000000000000000000000000000000' B 6
         DC    X'0000000000000000000000000000FF00' C 7 x'7E' equal sign
         DC    X'00000000000000000000000000000000' D 8
         DC    X'00000000000000000000000000000000' E 9
         DC    X'00000000000000000000000000000000' F A
         DC    X'00000000000000000000000000000000'   B
         DC    X'00000000000000000000000000000000'   C
         DC    X'00000000000000000000000000000000'   D
         DC    X'00000000000000000000000000000000'   E
         DC    X'00000000000000000000000000000000'   F
B80      DC    80C' '          blanks for initialization or padding
C0       DC    F'0'            constant
C1       DC    F'1'            constant
C2       DC    F'2'            constant
C3       DC    F'3'            constant
C5       DC    F'5'            constant
C6       DC    F'6'            constant
C8       DC    F'8'            constant
C15      DC    F'15'           constant
*
* registers are saved only when necessary, remaining save area is
* used as working storage
*
SAVEAREA DSECT                 define non standard use of save area
SACHAIN  DS    3F              leave save area chain untouched
SAVE3REG DS    3F              save regs 2-4 when necessary
APPLID   DS    2F              this field is returned to VTAM as APPLID
TEMPID   DS    2F              workarea to remember APPLID candidates
APPLPARM DS    CL15            examination area for APPLID= parameter
LENGTH   DS    CL1             'S' for message length < 15, else blank
*
* Equates
*
R0       EQU   0               register equate
R1       EQU   1               register equate
R2       EQU   2               register equate
R3       EQU   3               register equate
R4       EQU   4               register equate
R13      EQU   13              register equate
R14      EQU   14              register equate
R15      EQU   15              register equate
         END   ,               end of interpret table
