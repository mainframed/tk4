IEECVXIT TITLE 'WTO Exit to allow automatic operations'
         COPY  BSPGLBLS
         GBLC  &PGMSP                 , subpool for program storage
         GBLC  &SRBSP                 , subpool for SRB storage
         GBLC  &ORESCAN               , number or ORE chain scans
         GBLC  &MAXORE                , max number of OREs / Scan
         GBLC  &WAITIME               , wait time in seconds
         COPY  BSPSGLBL               , set globals
         GBLC  &C3PO
         AIF   ('&SYSPARM' EQ '').NOSYSP
&C3PO    SETC  '&SYSPARM'
         AGO   .CONT01
.NOSYSP  ANOP
&C3PO    SETC  'BSPPILOT'
.CONT01  ANOP
&WAITIME SETC  '2'                    , Waittime before reacting
&ORESCAN SETC  '5'                    , max num of ORE chain scans
&MAXORE  SETC  '20'                   , max num of ORE per scan
&PGMSP   SETC  '250'                  , SQA, fixed
&SRBSP   SETC  '245'                  , SQA, fixed
         TITLE 'User-defined DSECTS'
**********************************************************************
* Table of messages with reply texts
**********************************************************************
         SPACE
REPLNTRY DSECT
REPLMSG  DS    CL8                    , ID of msg to suppress
REPLNUM  DS    AL4                    , ID of reply text
REPLNTRL EQU   *-REPLNTRY             , length of entry
         SPACE 2
**********************************************************************
* Table of messages with changes to routing codes
**********************************************************************
ROUTNTRY DSECT
ROUTMSG  DS    CL8                    , ID of msg to suppress
ROUTCA   DS    A                      , Address of descriptor code
ROUTNTRL EQU   *-ROUTNTRY             , length of entry
**********************************************************************
* Table of messages with changes to descriptor codes
**********************************************************************
         SPACE
DESCNTRY DSECT
DESCMSG  DS    CL8                    , ID of msg to suppress
DESCDA   DS    A                      , Address of descriptor code
DESCNTRL EQU   *-DESCNTRY             , length of entry
**********************************************************************
* Table of messages that should be suppressed
**********************************************************************
         SPACE
SUPPNTRY DSECT
SUPPMSG  DS    CL8                    , ID of msg to suppress
SUPPNTRL EQU   *-SUPPNTRY             , length of entry
**********************************************************************
* Table of messages that have specific actions associated
**********************************************************************
         SPACE
ACTNNTRY DSECT
ACTNMSG  DS    CL8                    , message ID to act on
ACTNRTNA DS    A                      , address of action routine
ACTNNTRL EQU   *-ACTNNTRY             , length of entry
IEECVXIT BSPENTER BASE=(R12),RENT=YES,SP=&PGMSP
         PRINT ON,NOGEN
         TITLE 'Assemblers Symbols and Equates'
PARMREG  EQU   R1                     , parameter pointer
CUCMCBAR EQU   R2                     , pointer to IEECUCM
         TITLE 'Initialization and setup'
         PRINT ON,NOGEN
         L     CUCMCBAR,0(PARMREG)    , tell assembler
         USING UCMEXIT,CUCMCBAR       , tell assembler
         L     R8,X'74'(R5)           , get VPARMAD
         MVC   $ECB,4(R8)             , save the ECB address
         LR    R10,R13                , common area
         DROP  R13                    , not needed any more
         USING WORKAREA,R10           , tell assembler
         TITLE 'Search Autopilot'
***********************************************************************
* This routine is supposed to work if and only if the autopilot task  *
* is active.  We scan the ASCB chain, and if the autopilot task is not*
* found then we just finish                                           *
***********************************************************************
         USING PSA,0                  , tell assembler
         L     R3,CVTPTR              , get address of CVT pointer
         USING CVT,R3                 , tell assembler
         L     R1,CVTTCBP             , get address of TCB list
         L     R1,12(R1)              , get our ASCB
         USING ASCB,R1                , tell assembler
         DROP  R1                     , no longer needed
         L     R3,CVTASVT             , get address of ASVT
         DROP  R3                     , not needed any more
         USING ASVT,R3                , tell assembler
         LA    R14,ASVTENTY-4         , point to first entry - 1 entry
         L     R15,ASVTMAXU           , number of ASIDs
SCANASVT DS    0H                     , search for AUTOPILOT
         BCTR  R15,R0                 , decrement number of ASISs
         LTR   R15,R15                , Last one?
         BZ    RETURN                 , yes, get out, no AUTOPILOT
         LA    R14,4(R14)             , next ASVT entry
         USING ASVTENTY,R14           , tell assembler
         ICM   R3,B'1111',ASVTENTY    , Get address of ASCB
         BM    SCANASVT               , try next if not active
         USING ASCB,R3                , R3 now points to ASCB
         ICM   R4,B'1111',ASCBJBNS    , address of STC name
         BZ    CHKJOB1                , if none, must be jobname
         CLC   =CL8'INIT',0(R4)       , is it 'INIT'
         BNE   CHKIT1                 , bif not
CHKJOB1  DS    0H                     , check for jobname
         ICM   R4,B'1111',ASCBJBNI    , address of JOB name
         BZ    SCANASVT               , if not, go araound again
CHKIT1   DS    0H                     , is task/job our AUTOPILOT?
         CLC   =CL8'&C3PO',0(R4)      , test for jobname
         BNE   SCANASVT               , if not ours, try next
         DROP  R3,R14                 , not needed any more
*        B     PROCATBL               , and continue
         TITLE 'Do defined action on certain messages'
***********************************************************************
* Autopilot is active.  We now test for any action rules defined      *
***********************************************************************
PROCATBL DS    0H                     , process the action table
         LA    R1,ACTNTABL            , point to action table
         USING ACTNNTRY,R1            , tell assembler
         LA    R3,(ACTNTABE-ACTNTABL)/ACTNNTRL  , R3 = Num of entries
SCANATBL DS    0H                     , scan the action table
         CLC   ACTNMSG,UCMMSTXT       , is message in table?
         BE    FNDATBL                , yes, leave loop
         LA    R1,ACTNNTRL(R1)        , next entry address
         BCT   R3,SCANATBL            , and go around again
         B     PROCSTBL               , not found, process suppress tbl
FNDATBL  DS    0H                     , found entry in table
         L     R15,ACTNRTNA           , get address of routine
         BR    R15                    , and branch to that routine
         DROP  R1                     , not needed any more
         TITLE 'Action Routines'
SHUTDOWN DS    0H                     , S SHUTDOWN
         SVC34 'P MF1'                , just issue stop command
         SVC34 'P CMD1'               , just issue stop command
         SVC34 'P BSPPILOT'           , just issue stop command
         SVC34 '$P'                   , just issue stop command
         SVC34 '$PJES2'               , just issue stop command
         B     RETURN                 , and finish
STSO     DS    0H                     , S TSO action routine
         SVC34 'S TSO'                , just issue start command
         B     RETURN                 , and finish
EREPFULL DS    0H                     , S DUMPEREP routine
         SVC34 'S DUMPEREP'           , just issue start command
         B     RETURN                 , and finish
DUMPFULL DS    0H                     , S DUMPFULL routine
         SVC34 'S DUMPFULL'           , just issue start command
         B     RETURN                 , and finish
SMFFULL  DS    0H
         CLC   =C'SYS1.MANX',UCMMSTXT+27
         BE    SMFFULLX
SMFFULLY DS    0H
         SVC34 'S SMFDAILY,,,MAN=Y'
         B     RETURN
SMFFULLX DS    0H
         SVC34 'S SMFDAILY,,,MAN=X'
         B     RETURN
SETUPPRT DS    0H                     , JES asks for SETUP of printer
*              C'$HASP190 BSPWAIT  SETUP -- PRINTER2 -- F = 00
*              C'-----+----1----+----2----+-xxxxxxxx
         CLC   =C'PRINTER1',UCMMSTXT+27 Is this PRINTER1?
         BE    SETPRT1
         CLC   =C'PRINTER2',UCMMSTXT+27 or Printer 2
         BE    SETPRT2
         B     RETURN                      ???
SETPRT1  DS    0H                     , setup printer 1
         SVC34 '$SPRT1'
         B     RETURN
SETPRT2  DS    0H                     , setup printer 2
         SVC34 '$SPRT2'
         B     RETURN                 , ignore for now
         TITLE 'Process table of messages to be suppressed'
PROCSTBL DS    0H                     , process msgs to be suppressed
         LA    R1,SUPPTABL            , point to action table
         USING SUPPNTRY,R1            , tell assembler
         LA    R3,(SUPPTABE-SUPPTABL)/SUPPNTRL  , R3 = Num of entries
SCANSTBL DS    0H                     , scan the action table
         CLC   SUPPMSG,UCMMSTXT       , is message in table?
         BE    FNDSTBL                , yes, leave loop
         LA    R1,SUPPNTRL(R1)        , next entry address
         BCT   R3,SCANSTBL            , and go around again
         B     PROCDTBL               , go process descriptor codes
FNDSTBL  DS    0H                     , we found a message to suppress
         MVC   UCMROUTC(2),SUPROUTC   , ROUTCD=14
         MVC   UCMDESCD(2),SUPDESCD   , DESC=4
         B     RETURN                 , and exit
         DROP  R1                     , not needed any more
         TITLE 'Process table of Descriptor code changes'
PROCDTBL DS    0H                     , process msgs list
         LA    R1,DESCTABL            , point to action table
         USING DESCNTRY,R1            , tell assembler
         LA    R3,(DESCTABE-DESCTABL)/DESCNTRL  , R3 = Num of entries
SCANDTBL DS    0H                     , scan the action table
         CLC   DESCMSG,UCMMSTXT       , is message in table?
         BE    FNDDTBL                , yes, leave loop
         LA    R1,DESCNTRL(R1)        , next entry address
         BCT   R3,SCANDTBL            , and go around again
         B     PROCRTBL               , go process routing codes
FNDDTBL  DS    0H                     , we found a message to suppress
         L     R1,DESCDA              , get address of DESCD
         DROP  R1                     , not needed any more
         MVC   UCMDESCD(2),0(R1)      , insert descriptor code
*        B     PROCRTBL               , go process routing codes
         TITLE 'Process table of Routing code changes'
PROCRTBL DS    0H                     , process msgs list
         LA    R1,ROUTTABL            , point to routcode table
         USING ROUTNTRY,R1            , tell assembler
         LA    R3,(ROUTTABE-ROUTTABL)/ROUTNTRL  , R3 = Num of entries
SCANRTBL DS    0H                     , scan the action table
         CLC   ROUTMSG,UCMMSTXT       , is message in table?
         BE    FNDRTBL                , yes, leave loop
         LA    R1,ROUTNTRL(R1)        , next entry address
         BCT   R3,SCANRTBL            , and go around again
         B     PROCPTBL               , go process rePly tables
FNDRTBL  DS    0H                     , we found a message to suppress
         L     R1,ROUTCA              , get address of Routcode bytes
         DROP  R1                     , not needed any more
         MVC   UCMROUTC(2),0(R1)      , insert descriptor code
*        B     PROCPTBL               , go process rePly table
         TITLE 'Process msgs that need replies'
PROCPTBL DS    0H                     , process automatic replies
         LA    R1,REPLTABL            , point to routcode table
         USING REPLNTRY,R1            , tell assembler
         LA    R3,(REPLTABE-REPLTABL)/REPLNTRL  , R3 = Num of entries
SCANPTBL DS    0H                     , scan the action table
         CLC   REPLMSG,UCMMSTXT       , is message in table?
         BE    FNDPTBL                , yes, leave loop
         LA    R1,REPLNTRL(R1)        , next entry address
         BCT   R3,SCANPTBL            , and go around again
         B     RETURN                 , go process rePly tables
FNDPTBL  DS    0H                     , we found an entry
         L     R1,REPLNUM             , get reply identifier
         CLC   =C'IEF238D',UCMMSTXT   , special treatment for this
         BNE   DOSRB                  , bif not
         LA    R3,UCMMSTXT+19         , search for WAIT
         LA    R4,1                   , search increment
         LA    R5,UCMMSTXT+39         , upper limit of scan
SCAN238  DS    0H
         CLI   0(R3),C'W'             , search for "WAIT" in msg
         BE    DOSRB                  , we found it, give a reply
         BXLE  R3,R4,SCAN238          , go around again
*        B     RETURN                 , no "WAIT", then exit
***********************************************************************
* return to caller after freemaining the acquired storage             *
***********************************************************************
RETURN   EQU   *
         BSPRET RC=0
         TITLE 'Schedule R2D2'
***********************************************************************
*  We will schedule a subroutine to process the WTOR requests.  The   *
*  SRB will run in the address space of the BSPPILOT address space    *
*  If this address space is not active, no WTOR processing will take  *
*  place                                                              *
***********************************************************************
         SPACE
DOSRB    DS    0H                     , setup for scheduling SRB
         STH   R1,$REASON             , save reply text ID code
         L     R1,CVTPTR              , point to CVT
         L     R1,0(R1)               , get ASCB list address
         L     R1,12(R1)              , get our ASCB address
         MVC   $ASID,36(R1)           , save ASID
         GETMAIN R,LV=WORKAL,SP=&SRBSP  fixed storage for SRB etc
         LR    R3,R1                  , R3 ---> acquired storage
         MVC   0(WORKAL-L'WTOAREA,R3),WORKAREA  Copy out data to SQA
         PUSH  USING                  , save assembler info
         DROP  R10                    , not used for the moment
         USING WORKAREA,R3            , use R3 for addressing instead
         XC    SRB(SRBSIZE),SRB       , set SRB low low-values
         MVC   SRBID,=CL4'SRB '       , put in eyecatcher
         SPACE 2
***********************************************************************
* Check again if BSPPILOT is running.  If not, we cannot reply to the *
* WTOR.  We do this by scanning the ASCB chain (again) for BSPPILOT   *
***********************************************************************
         SPACE 1
         L     R2,CVTPTR              , R2 ---> CVT
         USING CVT,R2                 , tell aseembler
         L     R2,CVTASVT             , get ASVT
         USING ASVT,R2                , and tell Assembler
         LA    R14,ASVTENTY-4         , backup one entry
         L     R15,ASVTMAXU           , get number of ASCBs
NEXTASCB DS    0H                     , entry to loop
         BCTR  R15,R0                 , Minus 1
         LTR   R15,R15                , Last ASCB tested
         BZ    RETURN                 , then exit
         LA    R14,4(R14)             , bump to next ASVTENTY
         USING ASVTENTY,R14           , tell assembler
         ICM   R2,15,ASVTENTY         , get ASCB address
         BM    NEXTASCB               , if not active, go around again
         USING ASCB,R2                , R2 points to an ASCB
         ICM   R7,15,ASCBJBNS         , is this started task?
         BZ    CHKJOB                 , no.  Check for Jobname
         CLC   =CL8'INIT',0(R7)       , is this an initiator?
         BNE   CHKIT                  , bif not to test STC name
CHKJOB   ICM   R7,15,ASCBJBNI         , get address of jobname
         BZ    NEXTASCB               , if no Jobname, go araound
CHKIT    CLC   0(8,R7),=CL8'BSPPILOT' , Autopilot task?
         BNE   NEXTASCB               , if not, try next ASCB
         ST    R2,SRBASCB             , Place ASCB address into SRB
         L     R1,ASCBASXB            , get ASXB address
         L     R1,ASXBFTCB-ASXB(R1)   , get TCB address of BSPPILOT
         ST    R1,SRBPTCB             , and place it into SRB
         MVC   SRBPASID,ASCBASID      , put BSPPILOT ASID into SRB
         DROP  R2                     , we are done with R2
         LA    R1,IEECR2D2            , point to SRB routine address
         ST    R1,SRBEP               , and place address into SRB
         LA    R1,SRBCLEAN            , get address of cleanup routine
         ST    R1,SRBRMTR             , put address into SRB
         ST    R3,SRBPARM             , Work area address into SRB too
         SCHEDULE SRB=SRB,SCOPE=LOCAL , schedule the SRB
         POP   USING                  , restore assembler info
         B     RETURN                 , everything is done, exit
         SPACE 2
**********************************************************************
* The SRB Cleanup routine is rather simple.  Just take a look        *
**********************************************************************
         SPACE 1
SRBCLEAN BR    R14                    , just exit
         TITLE 'Constants - Literal Pool'
         LTORG
         TITLE 'Action Table'
***********************************************************************
* List of specific messages and the address of routines to invoke     *
* if this message is issued                                           *
***********************************************************************
ACTNTABL DS    0D
         DC    CL8'IST020I ',A(STSO)         start TSO
         DC    CL8'IEE362A ',A(SMFFULL)      start SMFDAILY
         DC    CL8'IFB040I ',A(EREPFULL)     start EREP processor
         DC    CL8'IEA994A ',A(DUMPFULL)     save all dump datasets
         DC    CL8'$HASP190',A(SETUPPRT)     setup printers
         DC    CL8'BSPSD999',A(SHUTDOWN)     initiate shutdown
ACTNTABE EQU   *
         TITLE 'Suppress Table'
***********************************************************************
* List of messages that get suppressed (I.E, routing code 00000000)   *
***********************************************************************
SUPPTABL DS    0D
         DC    CL8'$HASP000'          , HASP Ok message
SUPPTABE EQU   *
         TITLE 'Messages where descriptor code should be changed'
***********************************************************************
* List of messages that have their descriptor codes changes.          *
* The descriptor codes are generated via the IEECODES macro           *
* and can be found at label XXXDESCD, where XXX is the value on the   *
* ID keyword of the IEECODES macro                                    *
***********************************************************************
DESCTABL DS    0D
         DC    CL8'IEA911E ',A(ROLDESCD)  , dump on XXXX for asid NNNN
         DC    CL8'IEA994E ',A(ROLDESCD)  , dump on XXXX for asid NNNN
         DC    CL8'IEA994A ',A(ROLDESCD)  , all dump datsets are full
         DC    CL8'IGF995I ',A(ROLDESCD)  , I/O Restart scheduled
         DC    CL8'IGF991E ',A(ROLDESCD)  , IGF msg for mount, swap
DESCTABE EQU   *
         TITLE 'Messages where routecode code should be changed'
***********************************************************************
* List of messages that have their routing codes changed.             *
* The routing codes are generated via the IEECODES macro and can be   *
* found at label XXXROUTC, where XXX is the value on the ID keyword   *
* of the IEECODES macro                                               *
***********************************************************************
ROUTTABL DS    0D
         DC    CL8'IEA911E ',A(ROLROUTC)  , dump on XXXX for asid NNNN
         DC    CL8'IEA994E ',A(ROLROUTC)  , dump on XXXX for asid NNNN
         DC    CL8'IEA994A ',A(ROLROUTC)  , all dump datsets are full
         DC    CL8'IGF995I ',A(ROLROUTC)  , I/O Restart scheduled
         DC    CL8'IGF991E ',A(ROLROUTC)  , IGF msg for mount, swap
ROUTTABE EQU   *
         TITLE 'Message Reply Table'
***********************************************************************
* List of messages and their canned reply codes                       *
***********************************************************************
REPLWAIT EQU   0                      , R XX,WAIT
REPLNHLD EQU   4                      , R XX,NOHOLD
REPLU    EQU   8                      , R XX,U
REPLGO   EQU   12                     , R XX,GO
REPLPOST EQU   16                     , R XX,POST
REPLSIC  EQU   20                     , R XX,SIC
REPLCANC EQU   24                     , R XX,CANCEL
REPLTABL DS    0D
         DC    CL8'IEF238D ',A(REPLWAIT)
         DC    CL8'IEF433D ',A(REPLNHLD)
         DC    CL8'IEF434D ',A(REPLNHLD)
         DC    CL8'IKT010D ',A(REPLSIC)
         DC    CL8'IKT012D ',A(REPLU)
         DC    CL8'IEC301A ',A(REPLU)
         DC    CL8'IEC804A ',A(REPLPOST)
         DC    CL8'IFA006A ',A(REPLCANC)
         DC    CL8'BSPTEST0',A(REPLU)
REPLTABE EQU   *
         TITLE 'Routing- and Descriptor codes definitions'
         IEECODES ID=ROL,ROUTCDE=2,DESC=4
         IEECODES ID=SUP,ROUTCDE=14,DESC=4
         DROP
         TITLE 'IEECR2D2 - SRB Routine for processing WTORs'
***********************************************************************
* Actually, the SRB routine does not process the WTOR requests at     *
* all.  What it does is to schedule an Interrupt Request Routine      *
* which in turn will do what we need to do, namely isue the WTOR      *
* reply via SVC34                                                     *
***********************************************************************
IEECR2D2 DS    0H                     , entry point for our Robot
         BALR  R10,R0                 , set up base address
         USING *,R10                  , and tell assembler
         LR    R7,R14                 , save retrun address
         LR    R2,R1                  , get workarea address
         USING WORKAREA,R2            , and tell assembler
***********************************************************************
* We want to issue SVC 34, which means that we need an IRB.  To get   *
* the IRB via the CIRB macro, we need the local lock                  *
***********************************************************************
GETLOCK SETLOCK OBTAIN,               , ask for a lock                 +
               TYPE=LOCAL,            , we want the local lock         +
               REGS=USE,                                               +
               MODE=UNCOND,           , wait until we get the lock     +
               RELATED=FREELOCK       , here we will free the lock
***********************************************************************
* Create an IRB and an IQE.  For branch entry calls to CIRB we need   *
* R4 to point to the TCB                                              *
***********************************************************************
         L     R4,SRBPTCB             , get address of TCB from SRB
         CIRB  EP=IRBROUT,            , address of IRB routine         +
               KEY=SUPR,              , run in key 0                   +
               MODE=PP,               , run in problem mode            +
               BRANCH=YES,            , use branch entry, R4->TCB      +
               SVAREA=YES,            , get a save area                +
               STAB=(DYN),            , IRB is freed at termination    +
               RETIQE=NO,             , do not return IQE to queue     +
               WKAREA=30              , 30 doubleword workarea
         LR    R3,R1                  , R3 ---> IRB3
         USING RBBASIC,R3             , tell assembler
         L     R1,RBNEXAV             , R1 ---> IQE
         USING IQESECT,R1             , tell assembler
         ST    R3,IQEIRB              , put IRB address into IQE
         ST    R2,IQEPARM             , put worlarea address into IQE
         ST    R4,IQETCB              , put TCB address in IQE
         LCR   R1,R1                  , complement IQE address
         L     R12,CVTPTR             , get address of CVT
         USING CVT,R12                , tell assembler
         L     R14,CVT0EF00           , branch entry for SCHEDXIT
         BALR  R14,R14                , schedule the IQE
         DROP  R12                    , CVT bas enolonger needed
FREELOCK SETLOCK RELEASE,             , release                        +
               TYPE=LOCAL,            , the local lock                 +
               REGS=USE,                                               +
               RELATED=GETLOCK        , that we obtained above
         LR    R14,R7                 , restore return address
         BR    R14                    , back to dispatcher
         DROP                         , all USINGs
         TITLE 'IRBROUT - IRB Routine that REALLY processes the WTOR'
IRBROUT  SAVE  (14,12)                , save callers register
         LR    R12,R15                , R12 is out new base register
         USING IRBROUT,R12            , tell assembler
         LR    R10,R1                 , R10 points to WORKAREA
         USING WORKAREA,R10           , tell assembler
         ST    R13,WORKAREA+4         , higher SA into our SA
         ST    R10,8(R13)             , or SA into higher SA
         LR    R13,R10                , R13 ---> our save area
         STIMER WAIT,BINTVL=WAITTIME  , wait two seconds
         TITLE 'Scan the ORE chain'
*--------------------------------------------------------------------*
* Some WTOR is active that needs a reply.  We scan the ORE chain for *
* the request, determine the reply number, and issue the reply       *
* via SVC 34.  We might have to scan the chain more than once, though*
*--------------------------------------------------------------------*
         LA    R7,&ORESCAN            , load maximum number of scans
FNDORE   DS    0H                     , locate operator request element
         LA    R2,&MAXORE             , load max length of search
         L     R1,CVTPTR              , R1 ---> CVT
         USING CVT,R1                 , tell assembler
         L     R1,CVTCUCB             , R1 ---> Table with console UCBs
         DROP  R1                     , CVT not needed any longer
         USING UCM,R1                 , tell assembler
         L     R1,UCMRPYQ             , UCMRPYQ = address of first ORE
         DROP  R1                     , no longer needed
GETORE   DS    0H
         LA    R1,0(R1)               , clear high order byte
         USING OREF,R1                , tell assembler
         CLC   $ASID,OREASID          , is this our ASID?      ID ?
         BNE   NEXTORE                , no, get next ORE
         ICM   R6,B'0111',OREECBA     , get user's ECB address
         LA    R6,0(R6)               , clear higher byte
         C     R6,$ECB                , is this the one we want?
         BE    FOUND                  , yes, go process it
NEXTORE  DS    0H                     , otherwise
         L     R1,ORELKP              , address of next ORE
         DROP  R1                     , no longer needed
         LTR   R1,R1                  , last ORE?
         BZ    ENDLOOK                , test if we want another round
         BCT   R2,GETORE              , else try next ORE
ENDLOOK  DS    0H                     , ORE wasn't found, therefore
         STIMER WAIT,BINTVL=WAITTIME  , wait for 2 seconds
         BCT   R7,FNDORE              , and try again
         B     $EXIT                  , so many tries - but no success
         SPACE                        , just leave
FOUND    DS    0H                     , We found the RQE we needed
         LR    R7,R1                  , R7 ---> RQE
         SR    R11,R11                , clear branch register
         LH    R11,$REASON            , get message ID code
         CH    R11,=Y((REPLYE-REPLY)) , within bounds?
         BNL   $EXIT                  , get out if code too high
         B     REPLY(R11)             , and branch to routine needed
REPLY    B     RWAIT                  , 00: R XX,WAIT
         B     RNOHOLD                , 04: R XX,NOHOLD
         B     RU                     , 08: R XX,U
         B     RGO                    , 0C: R XX,GO
         B     RPOST                  , 10: R XX,POST
         B     RSIC                   , 14: R XX,SIC
         B     RCANCEL                , 18: R XX,CANCEL
REPLYE   EQU   *                      , end of branch table
RNOHOLD  EQU   *
         MVC   WTOAREA(REPLY1L),REPLY1
         B     ISSUE
RU       EQU   *
         MVC   WTOAREA(REPLY2L),REPLY2
         B     ISSUE
RGO      EQU   *
         MVC   WTOAREA(REPLY3L),REPLY3
         B     ISSUE
RPOST    EQU   *
         MVC   WTOAREA(REPLY4L),REPLY4
         B     ISSUE
RWAIT    EQU   *
         MVC   WTOAREA(REPLY5L),REPLY5
         B     ISSUE
RSIC     EQU   *
         MVC   WTOAREA(REPLY6L),REPLY6
         B     ISSUE
         SPACE
RCANCEL  EQU   *
         MVC   WTOAREA(REPLY7L),REPLY7
         B     ISSUE
         SPACE
ISSUE    EQU   *
         MVC   WTOAREA+6(2),4(R7)     , insert reply number from ORE
         LA    R1,WTOAREA             , point to command buffer
         SR    R0,R0                  , clear R0 for SVC 34
         SVC   34                     , send command
*        B     $EXIT                  , and exit
$EXIT    DS    0H                     , we are done
         LR    R1,R13                 , unchain workarea
         L     R13,WORKAREA+4         , address of higher SA
         FREEMAIN R,A=(1),LV=WORKAL,SP=245   free SQA storage
         LM    R14,R12,12(R13)        , restore resgisters
         LA    R15,0(0,0)             , RC = 0
         BR    R14                    , and exit
         TITLE 'Constants'
*------------------------------------------------------------------*
REPLY1   WTO   'R XX,''NOHOLD'' <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY1L  EQU   *-REPLY1
*------------------------------------------------------------------*
REPLY2   WTO   'R XX,''U''      <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY2L  EQU   *-REPLY2
*------------------------------------------------------------------*
REPLY3   WTO   'R XX,''GO''     <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY3L  EQU   *-REPLY3
*------------------------------------------------------------------*
REPLY4   WTO   'R XX,''POST''   <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY4L  EQU   *-REPLY4
*------------------------------------------------------------------*
REPLY5   WTO   'R XX,''WAIT''   <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY5L  EQU   *-REPLY5
*------------------------------------------------------------------*
REPLY6   WTO   'R XX,''SIC''    <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY6L  EQU   *-REPLY6
*------------------------------------------------------------------*
REPLY7   WTO   'R XX,''CANCEL'' <<<<<< BY BSPPILOT',DESC=(5),          +
               ROUTCDE=(1,2,11),MF=L
REPLY7L  EQU   *-REPLY7
*------------------------------------------------------------------*
WAITTIME DC    A(&WAITIME*100)        , Wait some time
         LTORG
         TITLE 'DSECTS USED BY IEECVXIT'
WORKAREA DSECT
$ECB     DS   A                       , requestor's ECB address
$ASID    DS   H                       , requestor's ASID
$REASON  DS   H                       , reply code
*                  0 = WAIT
*                  4 = NOHOLD
*                  8 = U
*                 12 = GO
*                 16 = POST
*                 20 = SIC
*                 24 = CANCEL
SCRATCH  DS    0F'0',CL130
         ORG   SCRATCH
SRB      DS    0A
SRBSECT  EQU   *
SRBID    DS    CL4                      EBCDIC ACRONYM   FOR SRB
SRBFLNK  DS    A                        FORWARD CHAIN FIELD
SRBASCB  DS    A                        PTR TO ASCB OF ADDRESS SPACE
*                                       SRB IS TO BE DISPATCHED TO
SRBFLC   DS    0CL8                     SRB AREA MOVED TO LOW CORE
SRBCPAFF DS    BL2                      CPU AFFINITY MASK
SRBPASID DS    H                        PURGEDQ ASID IDENTIFIER
SRBPTCB  DS    A                        PURGEDQ TCB IDENTIFIER
SRBEP    DS    A                        ENTRY POINT OF ROUTINE
SRBRMTR  DS    A                        ADDRESS OF RESOURCE MGR RTN
SRBPARM  DS    A                        USER PARAMETER
SRBSAVE  DS    A                        SAVE AREA POINTER
SRBPKF   DS    B                        PROTECT KEY INDICATION
SRBPRIOR DS    0B                       PRIORITY LEVEL INDIC
SRBFLGS  DS    B                        SRB OPTION FLAGS
SRBLLREQ EQU   X'80'                    LOCAL LOCK REQUIRED
SRBLLHLD EQU   X'40'                    LOCAL LOCK HELD
SRBFRREQ EQU   X'20'                    FRR REQUESTED
SRBFRRCL EQU   X'10'                    CLEAR FRR PARM AREA
SRBSUSP  EQU   X'08'                    SUSPENDED SRB ONLY ON FOR
*                                       SSRB
SRBPNONQ EQU   X'04'                    NON QUIESCABLE SRB
SRBRESV3 EQU   X'02'                    RESERVED FLAG
SRBRESV4 EQU   X'01'                    RESERVED FLAG
SRBPSYS  EQU   X'00'                    SYSTEM PRIORITY LEVEL
SRBHLHI  DS    BL1                      INDICATION OF SUSPEND LOCKS
*                                       HELD AT SRB SUSPENSION
         DS    BL1                      RESERVED
SRBFRRA  DS    A                        FRR ROUTINE ADDRESS
SRBEND   EQU   *                        END OF SRB
SRBSIZE  EQU   SRBEND-SRB               SIZE OF SRB
WTOAREA  EQU   SRB                      WORK AREA FOR WTO -MUST BE LAST
         ORG
WORKEND  EQU  *
WORKAL   EQU  WORKEND-WORKAREA
         PRINT OFF,NOGEN
         SPACE 4
         IEECUCM DSECT=YES,FORMAT=NEW
CVT      DSECT
         CVT   LIST=YES
         PRINT OFF
ASCB     DSECT
         IHAASCB
ASXB     DSECT
         IHAASXB
ASVT     DSECT
         IHAASVT
IHAPSA   DSECT
         IHAPSA
IHARB    DSECT
         IHARB  SYS=AOS2
         IHAORE                       , operator request element
         IHAIQE                       , interrupt queue element
         BSPEND                       , of module
