          MACRO
&SADMP   AMDSADM2  &IPL2=,&TYPE2=,&CONADDR=,&CONTYPE=,&OUTPUT2=,       X
               &ADDR2=,&MCHK=                                  @ZA27964
         LCLC  &OUTPUT,&CONSOLE
         AIF   ('&TYPE2' EQ 'HI').OUTCK2   HI IS A VALID PARM
         AIF   ('&TYPE2' EQ 'LO').OUTCK1   LO IS A VALID PARM
         MNOTE 12,'TYPE2=&TYPE2 INVALID; MACRO PROCESSING TERMINATED'
         MEXIT
.OUTCK1  ANOP                          CROSS CHECK FOR VALID OPTIONS
         AIF   ('&OUTPUT2'(1,1) EQ 'P').OUTCK5 LO AND PTR VALID
         AGO   .OUTCK3                 CHECK FOR LO AND TAPE
.OUTCK2  ANOP                          VALIDITY CHECK HI AND PTR
         AIF   ('&OUTPUT2'(1,1) NE 'P').OUTCK3 OKAY IF PTR NOT SPEC
         MNOTE 12,'OUTPUT2=&OUTPUT2 FOR TYPE=&TYPE2 INVALID; MACRO PROCX
               ESSING TERMINATED'
         MEXIT
.OUTCK3  ANOP                          CHECK IF TAPE OUTPUT
         AIF   ('&OUTPUT2'(1,1) EQ 'T').OUTCK5 TAPE OKAY, CONTINUE
.OUTCK4  ANOP                          INVALID OUTPUT PARM
         MNOTE 12,'OUTPUT2=&OUTPUT2 INVALID; MACRO PROCESSING TERMINATEX
               D'
         MEXIT
.OUTCK5  ANOP                          FINAL OUTPUT VALIDITY CK
         AIF   (K'&OUTPUT2 NE 4).OUTCK4 ADDR MUST BE AT LEAST 3 CHAR
&OUTPUT  SETC  '&OUTPUT2'(2,4)          SET OUTPUT ADDR FOR CODE
         AIF   ('&TYPE2' EQ 'HI').CONTYP2   SKIP ADDR= FOR HI
         AIF   ('&ADDR2' EQ 'REAL').CONTYP2 . REAL IS VALID
         AIF   ('&ADDR2' EQ 'VIRTUAL').CONTYP2 VIRTUAL IS VALID
         MNOTE 12,'ADDR2=&ADDR2 INVALID.  MACRO PROCESSING TERMINATED'
         MEXIT
.CONTYP2 ANOP                     CHECK CONSOLE PARAMETERS
         AIF   (K'&CONADDR EQ 3).CONTYP1 CONSOLE ADDR MUST BE 3 CHAR
         MNOTE 12,'CONADDR=&CONADDR INVALID; MACRO PROCESSING TERMINATEX
               D'
         MEXIT
.CONTYP1 ANOP                          VALIDITY CHECK CONSOLE TYPES
         AIF   ('&CONTYPE' EQ '1052').T1052 SET UP 1052 TYPE SWITCH
         AIF   ('&CONTYPE' EQ '2150').T1052 SET UP 1052 TYPE SWITCH
         AIF   ('&CONTYPE' EQ '3210').T1052 SET UP 1052 TYPE SWITCH
         AIF   ('&CONTYPE' EQ '3215').T1052 SET UP 1052 TYPE SWITCH
         AIF   ('&CONTYPE' EQ '3066').T3066 SET UP 3066 TYPE SWITCH
          AIF ('&CONTYPE' EQ '3277').T3277  3277 TYPE SWITCH   @ZA00418
          AIF ('&CONTYPE' EQ '3158').T3277  3158 TYPE SWITCH   @ZA00418
         AIF   ('&CONTYPE' EQ '3036').T3277 3036 TYPE?         @G51AGSG
         MNOTE 12,'CONTYPE=&CONTYPE INVALID; MACRO PROCESSING TERMINATEX
               D'
         MEXIT
.T1052   ANOP                          1052 TYPE CONSOLE;SET SWITCH
&CONSOLE SETC  'A'                     1052 TYPE
         AGO   .IPL1                   CHECK IPL PARM
.T3066   ANOP                          3066 TYPE CODE INIT
&CONSOLE SETC  'B'                     3066 TYPE
        AGO  .IPL1                                             @ZA00418
.T3277 ANOP                                                    @ZA00418
&CONSOLE SETC 'C'   3277/3158 TYPE                             @ZA00418
.IPL1    ANOP                          CHECK IPL PARMS
         AIF   ('&IPL2'(1,1) EQ 'D').PROLOG1 IF DA OKAY-GEN DA IPL TXT
         AIF   ('&IPL2'(1,1) EQ 'T').TAPECK IF TAPE OK;GEN TAPE IPL
         MNOTE 12,'IPL2=&IPL2 INVALID; MACRO PROCESSING TERMINATED'
         MEXIT
.TAPECK  ANOP                          VALIDITY CHECK TAPE & LO
         AIF   ('&TYPE2' NE 'LO').PROLOG1 TAPE-LO INCOMPATIBLE
         MNOTE 12,'IPL2=&IPL2 AND TYPE2=&TYPE2 INCOMPATIBLE; MACRO PROCX
               ESSING TERMINATED'
         MEXIT
.PROLOG1  ANOP                     PROLOGUE DEFINATION
         TITLE 'AMDSADMP REAL DUMP MODULE'
**********************************************************************
*                                                                    *
*  MODULE NAME : AMDSADM2                                            *
*                                                                    *
*  DESCRIPTIVE NAME : STAND ALONE DUMP, MACRO 2                      *
*                                                                    *
*  LOAD MADULE : N/A                                                 *
*                                                                    *
*  COPYRIGHT : NONE                                                  *
*                                                                    *
*  STATUS:   OS/VS2 RELEASE 3.8 (EBB1102)                            *
*                                                                    *
*  FUNCTION :                                                        *
*       CSECT  AMDSADM2:  THIS MACRO GENERATES THE APPROPRIATE CODE  *
*            FOR THE TYPE OF DUMP REQUESTED BY THE MACRO PARAMETERS  *
*       CSECT  AMDSAIP1:  THIS MODULE CONTAINS THE IPL 1 RECORDS     *
*            WHICH READ IN THE IPL 2 RECORDS                         *
*       CSECT  AMDSAIP2:  THIS ROUTINE CONTAINS THE IPL 2 RECORDS    *
         AIF   ('&IPL2'(1,1) EQ 'D').PRO2
*            WHICH READ IN THE AMDSAHSR ROUTINE                      *
         AGO   .PRO3
.PRO2    ANOP
*            WHICH READ IN THE AMDSAPRO ROUTINE                      *
         AIF   ('&TYPE2' EQ 'LO').PRO4
.PRO3    ANOP
*       CSECT  AMDSAHSR:  THIS IS THE HIGH SPEED REAL DUMP ROUTINE   *
*            WHICH FORMATS AND DUMPS REAL STORAGE TO AN OUTPUT TAPE  *
*            DEVICE AT TAPE SPEED                                    *
         AGO   .PRO11
.PRO4    ANOP
*       CSECT  AMDSALSR:  THIS IS THE LO SPEED DUMP ROUTINE WHICH    *
*            FORMATS AND DUMPS STORAGE TO EITHER A TAPE OR PRINTER   *
*            OUTPUT DEVICE                                           *
.PRO11   ANOP
*                                                                    *
*  OPERATION : THE AMDSADM2 MODULE IS THE REAL STORAGE DUMPING ROUTINE
*       FOR VS/2 DUMPS.  THIS MODULE IS DIVIDED INTO THREE CSECTS    *
*                                                                    *
*       (1)  CSECT AMDSAIP1:  THIS IS THE IPL1 RECORD FOR THE DUMP   *
*            PROGRAM.  THIS RECORD CONSISTS OF A PSW FOLLOWED BY TWO *
*            CCW'S.  THE CCW'S READ INTO LOCATION X'110'  AMDSAIP2   *
*                                                                    *
*       (2)  CSECT AMDSAIP2:  THIS IS THE IPL 2 RECORD FOR THE       *
         AIF   ('&IPL2'(1,1) EQ 'D').PRO23
*            PROGRAM.  THIS RECORD WILL READ THE REAL DUMP PROGRAM   *
*            INTO LOCATION X'7000', AFTER WRITING OUT A FIXED LENGTH *
*            OF STORAGE STARTING AT LOCATION X'7000' TO THE IPL DEVICE.
         AGO   .PRO21
.PRO23   ANOP
*            PROGRAM.  THIS RECORD WILL READ THE PRECURSOR PROGRAM   *
*            INTO LOCATION X'7800', AFTER WRITING OUT A FIXED LENGTH *
*            OF STORAGE STARTING AT LOCATION X'7800' TO THE IPL DEVICE.
*            THE LENGTH OF THIS RECORD IS X'800' BYTES               *
*            THE PRECURSOR ROUTINE WILL LOAD THE HI OR LO SPEED DUMP *
*            ROUTINE AND TRANSFER CONTROL TO IT AT LOCATION X'7020'  *
*            AFTER WRITING OUT A X'800' BYTE RECORD TO THE IPL       *
*            DEVICE FROM LOCATION X'7000'. THE CODE WHICH WRITES     *
*            OUT THIS RECORD IS CHAINED FROM AND TICED TO BY THE CCW *
*            CHAIN IN AMDSAIP2.  IT IS LOCATED AT THE BEGINNING OF   *
*            AMDSAPRO AT LOCATION X'7800' FOR A LENGTH OF 48 BYTES   *
         AIF   ('&TYPE2' EQ 'LO').PRO12
         AGO   .PRO24
.PRO21   ANOP
*            THE LENGTH OF THIS RECORD IS X'6006' BYTES              *
.PRO24   ANOP
*       (3)  CSECT AMDSAHSR:  THIS IS THE HIGH SPEED VERSION OF THE  *
*            AMDSADMP ROUTINE.  ITS FUNCTION IS TO DUMP REAL STORAGE TO
*            A TAPE OUTPUT DEVICE AT TAPE SPEED.  THE ROUTINE RE-    *
*            QUESTS FROM THE OPERATOR, AN OUTPUT DEVICE ADDRESS      *
*            AND A DUMP TITLE.  IT THEN DUMPS A CPU STATUS RECORD    *
*            FOR EACH ACTIVE CPU, STORAGE IN 4096 BYTE BLOCKS (5012  *
*            BYTE RECORDS) TO TAPE FOR LATER PROCESSING BY           *
*            AMDPRDMP, AND DUMPS LOCATION 0-X'1FFFF' TO THE IPL      *
*            (WORKFILE) DEVICE FOR LATER USE BY THE VIRTUAL DUMP     *
*            FUNCTION.  AT THE CONCLUSION OF DUMPING REAL STORAGE, CON-
*            TROL IS PASSED TO THE PRECURSOR PROGRAM (AMDSAPRO)      *
*            WHICH LOADS THE VIRTUAL DUMP ROUTINE STARTING AT LOC-   *
*            ATION X'8000'.  HSR SAVES ITS OWN REGISTERS BEFORE      *
*            PASSING CONTROL TO AMDSAPRO.                            *
         AGO   .PRO15
.PRO12   ANOP
*       (3)  CSECT AMDSALSR:  THIS IS THE LOW SPEED VERSION OF THE   *
*            AMDSADMP PROGRAM.  ITS FUCCTION IS TO DUMP REAL STORAGE *
*            ( IN EITHER TRANSLATED OR UNTRANSLATED MODE ) TO A      *
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PRO99
*            TAPE OUTPUT DEVICE.  THE ROUTINE REQUESTS FROM THE      *
         AGO   .PRO98
.PRO99   ANOP
*            PRINTER OUTPUT DEVICE.  THE ROUTINE REQUESTS FROM THE   *
.PRO98   ANOP
*            OPERATOR, AN OUTPUTDEVCCE ADDRESS, A DUMP TITLE, AND    *
*            EITHER A VIRTUAL OR REAL ADDRESS RANGE OF STORAGE TO BE *
*            DUMPED.  THE ROUTINE THEN DUMPS A CPU STATUS RECORD FOR *
*            EACH ACTIVE CPU.  IT THEN DUMPS AND FORMATS THE GPR'S   *
*            CR'S, F.P.REGS, CURRENT PSW AND REQUESTED STORAGE RANGE. *
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PRO13
*            STORAGE IS FORMATTED IN 32 BYTE BLOCKS AND DUMPED IN 120 *
         AGO   .PRO14
.PRO13   ANOP
*            STORAGE IS FORMATTED IN 32 BYTE BLOCKS AND DUMPED IN 121 *
.PRO14   ANOP
*            BYTE RECORES.  WHEN COMPLETED, THE PROGRAM WRITES A     *
*            REAL DUMP DONE MESSAGE AND LOADS A WAIT STATE PSW.      *
.PRO15   ANOP
*                                                                    *
*  NOTES:  THE PROGRAM ISSUED THE FOLLOWING PRIVILEGED INSTRUCTIONS  *
*          SIO, TIO, STAP, SIGP (STOP AND STORE STATUS), AND LPSW    *
*  DEPENDENCIES:  THIS PROGRAM IS DEPENDENT ON THE STANDARD CHARACTER*
*                 SET, CORRECTABLE BY RE-ASSEMBLY.                   *
*                                                                    *
*  RESTRICTIONS:  NONE                                               *
*                                                                    *
*  REGISTER CONVENTIONS:                                             *
*       R2   POINTS TO CURRENT STORAGE BLOCK                         *
*       R3   POINTS TO ADDRESS OF MOST RECENT OUTPUT BLOCK           *
         AIF   ('&TYPE2' EQ 'HI').PRO16
*       R4   IS STORAGE KEY REGISTER OR OUTPUT LINE REGISTER         *
.PRO16   ANOP
*       R5   POINTS TO MESSAGE INPUT AREA: HIGH ORDER BYTE IS LENGTH *
*            OF INPUT MESSAGE                                        *
*       R6   POINTS TO MESSAGE OUTPUT AREA: HIGH OREDR BYTE IS LENGTH*
*            OF MESSAGE TO BE WRITTEN.                               *
*       R9   POINTS TO MESSAGE IF ERROR OCCURS                       *
*       R10  POINTS TO I/O DEVICE                                    *
*       R11  POINTS TO CCW TO BE EXECUTED                            *
*       R12  BASE REGISTER CONTAINING REAL STORAGE ADDRESS X'7000'   *
*       R13  RETURN REGISTER FOR ENTRY TO DUMPSIO ROUTINE            *
*       R14  RETURN REGISTER FOR ENTRY TO CONSOLE ROUTINE            *
*       R15  RETURN CODE REGISTER                                    *
*                                                                    *
         AIF   ('&TYPE2' EQ 'HI').PRO17
*  PATCH LABEL:  LSRPATCH                                            *
         AGO   .PRO18
.PRO17   ANOP
*  PATCH LABEL:  HSRPATCH                                            *
.PRO18   ANOP
*                                                                    *
*  MODULE TYPE:  MACRO                                               *
*                                                                    *
*  MODULE SIZE:  4K MINUS THE LENGTH OF THE PORTION OF AMDSAPRO      *
*                WHICH CANNOT BE OVERLAYED WHEN THIS IS READ IN      *
*                ( X'F6' )                                   @ZA56338*
*                                                                    *
*  ATTRIBUTES:  PRIVILEGED, DISABLED, STAND ALONE PROGRAM            *
*                                                                    *
*  ENTRY POINTS: ENTRY TO IPL1 VIA LOAD FROM IPL                     *
*                ENTRY TO IPL2 FROM IPL1                             *
         AIF   ('&IPL2'(1,1) EQ 'T').PRO97
         AIF   ('&TYPE2' EQ 'LO').PRO95
*                ENTRY TO HSR FROM PRECURSOR
         AGO   .PRO96
.PRO97   ANOP
*                ENTRY TO HSR FROM IPL2                              *
         AGO   .PRO96
.PRO95   ANOP
*                    ENTRY TO LSR FROM PRECURSOR                     *
.PRO96   ANOP
*                                                                    *
*  INPUT: STORE STATUS - THE OPERATOR SHOULD PERFORM THE             *
*                        STORE STATUS FUNCTION PRIOR TO IPL.         *
*                        THIS SAVES THE GPR'S, CR'S, AND F.P.REGS    *
*                        PRIOR TO DUMPING.  IF A STORE STATUS IS NOT *
*                        DONE, THE GPR CONTENTS WILL BE SAVED, HOW-  *
*                        EVER, OTHER REGISTER CONTENTS MAY NOT BE    *
*                        VALID.  IN THE CASE, THE DUMP ROUTINE WILL  *
*                        INDICATE THAT A STORE STATUS WAS NOT DONE.  *
*                                                                    *
*  OUTPUT: A STAND ALONE DUMP                                        *
*                                                                    *
*  EXITS NORMAL: AMDSAIP1 TO AMDSAIP2                                *
         AIF   ('&IPL2'(1,1) EQ 'D').PRO94
*                AMDSAIP2 TO AMDSAPRO                                *
         AGO   .PRO93
.PRO94   ANOP
*                AMDSAIP2 TO AMDSAHSR                                *
.PRO93   ANOP
         AIF   ('&TYPE2' EQ 'LO').PRO92
*                AMDSAHSR TO AMDSAPGE                                *
         AIF   ('&IPL2'(1,1) EQ 'T').PRO91
*                AMDSAHSR TO AMDSAPRO                                *
         AGO   .PRO91
.PRO92   ANOP
*                AMDSALSR TO A WAIT STATE PSW                        *
.PRO91   ANOP
*  EXITS ERROR:  WAIT STATE CODE X'04'                               *
*                CATASTROPHIC I/O ERROR                              *
*                CONSOLE NOT AVAILABLE FOR COMMUNICATIONS            *
         AIF   ('&TYPE2' EQ 'LO').PRO90
*                ERROR LOADING AMDSAPGE                              *
.PRO90   ANOP
*                MNOTE - FOR INCORRECT PARAMETER AND TERMINATION     *
*                                                                    *
*  EXTERNAL REFERENCES: NONE                                         *
*                                                                    *
*  ROUTINES: CONSOLE-CONSOLE COMMUNICATIONS ROUTINE                  *
*            CONVERT-EBCDIC TO BINARY ADDRESS CONVERSION             *
*            LABEL CHECK-DETERMINE WHETHER A TAPE IS LABELED         *
*            DUMPSIO- PERFORM ALL I/O OPERATIONS                     *
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PRO89
*            EOR-END OF REEL PROCESSING                              *
.PRO89   ANOP
*            CATSEXIT-ERROR RECOVERY AND EXIT ROUTINE                *
*                                                                    *
*  DATA SETS: NONE                                                   *
*                                                                    *
*  DATA AREAS: CCT(COMMON COMMUNICATION TABLE) CONTAINS ALL COMMONLY *
*              USED ADDRESSES, FLAGS AND DATA AREAS.                 *
*                                                                    *
*  MACROS: NONE                                                      *
*                                                                    *
*  FUNCTION: CSECT AMDSADM2: THIS ROUTINE GENERATES THE APPROPRIATE  *
*            CODE FOR THE TYPE OF DUMP REQUESTED BY THE MACRO        *
*            PARAMETERS.                                             *
*                                                                    *
*            CSECT AMDSAIP1: THIS ROUTINE IS THE IPL1 RECORD WHICH   *
*            READS IN THE IPL2 RECORD.                               *
*                                                                    *
*            CSECT AMDSAIP2: THIS ROUTINE IS THE IPL2 RECORD WHICH   *
         AIF   ('&IPL2'(1,1) EQ 'D').PRO88
*            READS IN THE AMDSAHSR ROUTINE.                          *
         AGO   .PRO87
.PRO88   ANOP
*            READS IN THE AMDSAPRO ROUTINE.                          *
.PRO87   ANOP
*                                                                    *
         AIF   ('&TYPE2' EQ 'LO').PRO86
*            CSECT AMDSAHSR: THIS IS THE HIGH SPEED REAL DUMP        *
*            ROUTINE WHICH DUMPS REAL STORAGE TO AN OUTPUT TAPE DEVICE
*            AT TAPE SPEED.                                          *
         AGO   .PRO85
.PRO86   ANOP
*            CSECT AMDSALSR: THIS IS THE LO SPEED REAL DUMP ROUTINE  *
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PRO84
*            WHICH FORMATS AND DUMPS STORAGE TO A TAPE OUTPUT DEVICE *
         AGO   .PRO85
.PRO84   ANOP
*            WHICH FORMATS AND DUMPS STORAGE TO A PRINTER OUTPUT DEVICE
.PRO85   ANOP
*                                                                    *
*   CHANGE ACTIVITY :                                                *
* A390100,C028400                                            @ZA13019*
* C028400,A078300,C0774800,C077600,A077700                   @ZA14121*
* C0-999999  (RESEQUENCED)                                   @ZA17663*
* C265830,A265860-265920                                     @ZA19025*
* C022800,C265800,A265950-266370,A377410-377550,             @ZA17663*
* A800401-800418,A800700-800800                              @ZA17663*
* D377700-384600 MOVED TO 800420-800560                      @ZA17663*
* A800420-800560 MOVED FROM 377700-384600                    @ZA17663*
* C022800, A286530-286770, A484570-484710, C486300, A486100, @ZA24157*
* C486300                                                    @ZA24157*
* A012700,C022800                                            @G51AGSG*
* D360900-377400 MOVE TO   802205-802480                     @ZA24157*
* A802205-802480 MOVE FROM 360900-377400                     @ZA24157*
* MACHINE CHECK HANDLER ADDED (EXTENSIVE RENUMBERING)        @ZA27964*
* PSW AT LABEL IOENBL/IODSBL IN ERROR                        @ZA41033*
* SUPPORT NEW OPTIONAL 14 BIT 327X SCREEN ADDRESSING         @ZA52618*
* DISABLED TIO LOOP CORRECTED FOR TAPE RESIDENT VERSIONS     @ZA57190*
* DISABLED TIO LOOP CORRECTED FOR ALL TYPE=HI VERSIONS       @ZA56338*
*                                                                    *
*REASON  MM/DD/YY ORIGIN DESCRIPTION                                 *
*OZ62573 09/28/82 GT4517 LEVEL SET SADMP MODULES FOR SMP PROBLEMS    *
*OZ67833 10/14/83 GT4517 TIOLOOP AFTER MSGAMD001A            @ZA67833*
*OZ69934 10/03/83 GT4517 LOWSPEED FAILS AFTER SYS RESET CLEAR@ZA69934*
*                                                                    *
*                                                                    *
*.FX4     ANOP                                                 @ZA57190
**********************************************************************
         EJECT
.*   MACRO SECTION 2                                           @ZA27964
         AIF   ('&IPL2'(1,1) EQ 'D').DAIPL SET UP DA IPL RCD
.TAPEIPL ANOP                          TAPE IPL TEXT
AMDSAIP1 CSECT
PGMPSW1  DC    XL5'0008000000'                   IPL PSW
         DC    AL3(ENTRY)                      ENTRY POINT ADDR
TAPCCW1  CCW   TPEREAD,WORKCCW1,X'60',TIPL2LNG IPL CCW1
TAPCCW2  CCW   TICMD,WORKCCW1,X'60',X'01'      IPL CCW2
         SPACE 10
         ORG   AMDSAIP1+X'110'   ORG CSECT TO LOC 272 ABSOLUTE
AMDSAIP2 CSECT
TAPCCW3  CCW   TPEWRTE,CCT,X'60',RPPLNGTH WRT WK RCD FROM 7000
         CCW   TPEWRTE,CCT+TPRECLEN,X'60',RPPLNGTH WRT FROM D000
         CCW   REWIND,CCT,X'60',RPPLNGTH REWIND TAPE TO BEGINNING
         CCW   TPEREAD,CCT,NODATA,IPLNGTH READ BY THE IPL 1 TXT
         CCW   TPEREAD,CCT,X'60',RPPLNGTH-IPLNGTH READ IN PROG
         CCW   TPEREAD,CCT,NODATA,TIPL2LG2 PASS IPL2 TEXT      @ZA14121
         CCW   TPEREAD,CCT+TPRECLEN-IPLNGTH,X'60',RPPLNGTH-TIPL2LG2
*                                                              @ZA14121
         CCW   TPEREAD,CCT,HEX70,RPPLNGTH SPACE PAST WORK RCD
         CCW   TPEREAD,CCT,HEX30,RPPLNGTH SPACE PAST RCD 2
TIPL2LNG EQU   *-AMDSAIP2                                      @ZA08997
TIPL2LG2 EQU   144                                             @ZA14121
         ORG   AMDSAIP2+X'6EF0'
         AGO   .REALCDE                START DUMP PROGRAM
.DAIPL   ANOP                          D.A. IPL TEXT
AMDSAIP1 CSECT
PGMPSW1  DC    XL8'0008000000007830' EC MODE PSW 1
DACCW1   CCW   DAREAD,DACCW3,X'60',DIPL2LNG READ INTO LOC 272
DACCW2   CCW   TICMD,DACCW3,X'60',X'01' GIVE CONTROL TO IPL2
         SPACE 10
         ORG   AMDSAIP1+X'110'               SET UP TO LOC 272
AMDSAIP2 CSECT
DACCW3   CCW   SRCHCCW,DASRADDR+6,X'60',SRCHLNGH GET WORK RCD
         CCW   TICMD,DACCW3,X'60',SRCHLNGH TIC UNTIL FOUND
         CCW   DAWRITE,X'7800',X'60',DUMPDUMP WRITE WORK RECORD
         CCW   TICMD,DACCW4,X'60',1   TIC TO WRITE
DASRADDR DC    4F'0'                   DASDR AREA
DACCW4   CCW   DAREAD,CCT+HEX800,X'60',DUMPDUMP RD INTO X'7800'
         CCW   TICMD,X'7800',X'60',1   TIC TO PRO CHANNEL PGM
DUMPDUMP EQU   2048                    LENGTH OF REAL DUMP PGM
DIPL2LNG EQU   64                               IPL2 LENGTH
         ORG   AMDSAIP2+X'6EF0'
         AIF   ('&TYPE2' EQ 'LO').LOPRO   GET PROPER CSECT     @ZA00418
.REALCDE ANOP                                                  @ZA00418
         SPACE 10
*********************************************************      @ZA00418
**     CSECT'S REQUIRED FOR LOADER MAKER REFERENCES    **      @ZA00418
*********************************************************      @ZA00418
AMDSAHSR CSECT      HI SPEED CSECT                             @ZA00418
         AGO   .ENTRY                                          @ZA00418
.LOPRO   ANOP                                                  @ZA00418
AMDSALSR CSECT      LO SPEED CSECT                             @ZA00418
AMDSAHSR EQU    *                                              @ZA56338
.ENTRY   ANOP                          REAL DUMP ENTRY POINT
         EJECT
**********************************************************************
*                                                                    *
*  COMMON CONTROL TABLE DEFINITION  (REFERRED TO AS CCT)             *
*                                                                    *
**********************************************************************
         SPACE
         USING *,BASEREG
CCT      EQU   *             COMMON CONTROL TABLE;REAL DUMP SECT
CTWAIT   DC    XL1'00'                WAIT STATE CODE
CTFLG1   DC    XL1'00'                FLAGS
CTERROR  EQU   X'80'                  CALLER ERROR RECOVERY
CTDEVICE EQU   X'40'                  DA IO IN PROGRESS
CTMORTPE EQU   X'20'                  END OF REEL
CTWORK   EQU   X'10'                  WK RCD IN PROGRESS
CTDEFO   EQU   X'08'                  DEFAULT OUTPUT ADDR
CTDEFW   EQU   X'04'                  DEFAULT WKFILE ADDR
CTMP     EQU   X'02'                  MP SYSTEM
CTERREC  EQU   X'01'                  IGNORE CATASTROPHIC ERRORS
CTFLG2   DC    XL1'00'                FLAGS
CTDUPSW  EQU   X'80'                  DUPLICATE LINE
CTSTOR   EQU   X'40'                  PROTECT KEY IN PROGRESS
CTPGEFLT EQU   X'20'                  PGE FAULT IN PROGRESS
CTNOSTAT EQU   X'10'                  STORE STATUS NOT DONE
CTVIRTR  EQU   X'08'                  VIRTUAL DUMP REQUESTED
CTWKDONE EQU   X'04'                  END OF WKFILE PROCESSING
CTALTCON EQU   X'02'                  ALT CONSOLE IN USE
CTNOWORK EQU   X'01'                  NO WKFILE DONE
         AIF   ('&IPL2'(1,1) EQ 'T').TDEV
CTDEVTYP DC    XL1'00'                IPL DEVICE TYPE IS DASD  @ZA27964
         AGO   .CCTSENS
.TDEV    ANOP
CTDEVTYP DC    XL1'01'                IPL DEVICE TYPE IS TAPE  @ZA27964
.CCTSENS ANOP
CTSENSE  DC    XL2'0000'              SENSE INFORMATION
CTINADDR DC    XL2'0000'              IPL DEVICE ADDR
CTCCHHR  DC    XL8'0000000000000000' .CCHHR DURING IPL
CTCCHHS  DC    XL4'00000000'          SYS1.PAGEDUMP START
CTCCHHE  DC    XL4'00000000'          SYS1.PAGEDUMP END
CTCCHHW  DC    XL4'00000000'          WKFILE START
CTERBDA  DC    XL4'00000000'          DA ERROR RECOVERY
CTBRANCH B     SAVECSW
CTERBTPE EQU   CTBRANCH               TAPE ERROR RECOVERY
CTERBPTR EQU   CTBRANCH               SET PTR = TAPE
CTERBCON DC    XL4'00000000'          CONSOLE ERROR RECOVERY
CTCPUI   DC    XL2'0000'              IPL CPU ADDR
CTOUTAD  DC    XL2'0000'              OUTPUT DEVICE ADDRESS
         AIF   ('&CONSOLE' EQ 'B').GCON
        AIF   ('&CONSOLE' EQ 'C').GCON 3158/3277 TYPE GRAPHICS @ZA00418
CTCONTYP DC    XL1'01'                NON GRAPHIC CONSOLE
         AGO   .CTCON
.GCON    ANOP
CTCONTYP DC    XL1'02'                GRAPHIC CONSOLE
.CTCON   ANOP
CTEBCOPD DC    CL3'&OUTPUT'           DEFAULT OUTPUT DEV ADDR
         AIF   ('&TYPE2' EQ 'HI').REALFLG
         AIF   ('&ADDR2' EQ 'REAL').REALFLG
CTLOWFLG DC    XL1'80'                DEFAULT TO VIRTUAL DUMP
         AGO   .VIRTBIT
.REALFLG ANOP
CTLOWFLG DC    XL1'00'                DEFAULT TO REAL DUMP
.VIRTBIT ANOP
CTVIRTD  EQU   X'80'                  DEFAULT TO VIRTUAL DUMP
CTFP     EQU   X'40'                  FP TAPE BIT
CTINIT   EQU   X'20'                  INITIALIZATION IN PROGRESS
CTWKSTUS EQU   X'10'                  STATUS OF WKFILE RCDS
CTEBCOPR DC    XL3'000000'            REPLIED OUTPUT DEVICE
.*                                                             @ZA27964
         AIF   ('&TYPE2' EQ 'LO').CCTLO
.*                                                             @ZA27964
CTIOTYPE DC    XL1'00'                I/O REQUEST FLAGS
         DC    XL1'00'                RSVD
CTCONFLG DC    XL1'00'                CONSOLE FLAGS
CTMSGOUT EQU   X'80'                  MSG MUST COME OUT
CTBUFTYP DC    XL1'00'                BUFFER TYPE FLAGS
CTCONSOL DC    AL4(CONSOLE)           CONSOLE ROUTINE
CTLWKAD  DC    XL4'00000000'          LAST ADDR ON WKFILE
CTCOMMIO DC    AL4(DUMPSIO)           ADDR OF DUMPSIO ROUTINE
CTEOR    DC    AL4(MORTAPE)           ADDRESS OF EOR ROUTINE
CTVCCT   DC    XL4'00000000'          ADRESS OF VCCT
         AIF   ('&CONSOLE' EQ 'C').CTPRMT1  GIVE SPECIAL       @ZA00418
*  INITIAL SETTING TO NEXT DC FOR 3277/3158 INTERFACE WITH     @ZA00418
*  THE SACON MODULE                                            @ZA00418
CTPRMT1  DC    XL2'2100'            PRIMARY PROMPT POSITION   @YM04419
         AGO   .CTPRMT2                                        @ZA00418
.CTPRMT1 ANOP                                                  @ZA00418
CTPRMT1  DC    XL2'0000'  SPECIAL SETTING TO TRIGGER SACON    @ZA00418
.CTPRMT2 ANOP                                                  @ZA00418
CTPRMT2  DC    XL2'0000'               SECONDARY PROMPT POSITION
CTHWM    DC    XL1'20'                 LOGICAL 3066 SCREEN LIMIT
CTHWMAX  DC    XL1'21'                 PHYSICAL SCREEN LIMIT
         DC    XL2'00'                 RESERVED
         AGO   .CCTEND
.CCTLO   ANOP
CTADDRS  DC    XL4'00000000'          STARTING ADDR DUMP RANGE
CTADDRE  DC    XL4'00000000'          ENDING ADDR DUMP RANGD
         AIF   ('&CONSOLE' EQ 'C').CTPRMT3  GIVE SPECIAL       @ZA00418
*  INITIAL SETTING TO NEXT DC FOR 3277/3158 INTERFACE WITH     @ZA00418
*  THE SACON MODULE                                            @ZA00418
CTPRMT1  DC    XL2'2100'            PRIMARY PROMPT POSITION   @YM04419
         AGO   .CTPRMT4                                        @ZA00418
.CTPRMT3 ANOP                                                  @ZA00418
CTPRMT1  DC    XL2'0000'  SPECIAL SETTING TO TRIGGER SACON    @ZA00418
.CTPRMT4 ANOP                                                  @ZA00418
CTPRMT2  DC    XL2'0000'               SECONDARY PROMPT POSITION
CTHWM    DC    XL1'20'                 LOGICAL 3066 SCREEN LIMIT
CTHWMAX  DC    XL1'21'                 PHYSICAL SCREEN LIMIT
         DC    XL2'00'                 RESERVED
.*   MACRO SECTION 3                                           @ZA27964
         AIF   ('&OUTPUT2'(1,1) NE 'P').LOHEAD                 @Z40MI3F
.*                                                             @ZA27964
CT3800   DC    XL1'1'             3800 PRINTER SWITCH          @Z40MI3F
         AGO   .LOHEAD
.CCTEND  ANOP
         SPACE 5
**********************************************************************
*                                                                    *
*  THIS CODE DEFINES THE DUMP HEADER RECORD AND MAPS DUMP RECORD FMT *
*                                                                    *
**********************************************************************
         SPACE
DUMPRCD  DS    0F                                              @ZA00418
HDRID    DC    XL1'FF'            HEADER ID
RECID    DC    XL1'FF'            RECORD ID
ASID     DC    XL2'0000'          ASID BEING DUMPED
DUMPNAME DC    CL8'AMDSADMP'      NAME OF DUMP PROGRAM
DUMPTIME DC    F'0'               TIME OF DUMP
DUMPDATE DC    F'0'               DATE OF DUMP
DUMPTITL DC    25CL4' '           TITLE OF DUMP
DUMPCSW  DC    2F'0'              CSW AT TIME OF DUMP
DUMPCAW  DC    F'0'               CAW AT TIME OF DUMP
KEY1     EQU   HDRID              STORAGE KEY
KEY2     EQU   RECID              STORAGE KEY
ADDR     EQU   DUMPNAME           ADDRESS BEING DUMPED
STAFLAGS EQU   ASID               RECORD FLAGS
RESERVD  EQU   ASID+1             RSVD FIELD
CPUADDR  EQU   DUMPNAME+2         CPU RCD BEING DUMPED
HEADLNGH EQU   DUMPTITL+68        SET UP FOR DUMP TITLE LENGTH
         AGO   .CONS              SET UP FOR CONSOLE INFO
.LOHEAD  ANOP                     LO SPEED DUMP HEADER RCD
         SPACE
DUMPCSW  EQU   12                 LOC OF CSW AT TIME OF DUMP
DUMPCAW  EQU   20                 LOC OF CAW AT TIME OF DUMP
.*   MACRO SECTION 4                                           @ZA27964
.CONS    ANOP                     CONSOLE ROUTINE CODE
         EJECT
**********************************************************************
*                                                                    *
*  CONSOLE ROUTINE.  THIS ROUTINE IS GENERALIZED TO PERFORM TWO      *
*  BASIC FUNCTIONS, READING AND WRITING FROM A CONSOLE DEVICE.  THE  *
*  CALLING SEQUENCE MUST BE AS FOLLOWS:                              *
*                                     BAL 14,CONSOLE                 *
*                                     NORMAL RETURN                  *
*                                                                    *
*              INPUT REQUIREMENTS: R6 ADDR OF MSG TO OUTPUT          *
*                                  HIGH ORDER BYTE LENGTH OF MSG     *
*                                  R5 READ INPUT AREA                *
*                                  HIGH ORDER BYTE INPUT MSG LENGTH  *
*                                  R15: RETURN CODE: 0=NORMAL RETURN *
*                                                    4=CONSOLE NOT   *
*                                                      AVAILABLE     *
*                                                     8=CONSOLE I/O  *
*                                                       ERROR        *
*                                                                    *
**********************************************************************
         SPACE
.*                                                             @ZA27964
         AIF   ('&CONSOLE' EQ 'B').GRAPHIC FOR GRAPHIC CONSOLE SEP PROC
          AIF ('&CONSOLE' EQ 'C').CON3158 TEST FOR 3158/3277   @ZA00418
.*                                                             @ZA27964
CONADDRX DS    0H                                              @ZA57190
         DC    XL2'&CONADDR'     CONSOLE ADDRESS               @ZA57190
CONSOLE  DS    0H                 THE CONSOLE READ/WRITE ENTRY POINT
         LA    RETCODE,4          SET UP ERROR RETURN CODE.THIS IS DONE
*                                 TO MINIMIZE THE CODE REQUIRED TO SET
*                                 RETURN CODES
CONSOLBA DS    0H
         LH    IODEVREG,CONADDRX  OBTAIN CONSOLE ADDR TO CHECK @ZA57190
CONTIOLP DS    0H                 CLEAR CONSOLE STATUS
         AIF   ('&TYPE2' NE 'HI').FX7                          @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         AGO   .PFX7                                           @ZA56338
.FX7     ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        IS THE CONSOLE AVAILABLE FOR I/O?
         BC    2,CONTIOLP         IF BUSY, WAIT UNTIL FREE
.PFX7    ANOP                                                  @ZA56338
CONNOTAV EQU   *+1                USED TO CHANGE THE BRANCH CONDITION  X
                                  TO 0 AFTER FINDING A CONSOLE @ZA56338
         BC    1,ALTCONCK         NOT AVAIL, CHECK FOR ALT CON @ZA56338
         NI    CONNOTAV,X'00'     CHANGE BRANCH TO NOP TO PREVENT LATERX
                                  ENTRY INTO ALTERNATE CODE.   @ZA56338
         STCM  OUTREG,HEX7,CONWRITE+1 PLACE THE OUTPUT ADDR
*                                     IN THE CONSOLE OUTPUT CCW
         STCM  OUTREG,HEX8,CONWRITE+7 PLACE THE DATA COUNT
*                                     IN THE CONSOLE OUTPUT CCW
         LTR   INREG,INREG        DETERMINE IF A READ IS TO OCCUR
*                                 AFTER THE WRITE
         BNZ   CONSWTE            YES, A READ FOLLOWS, SET
*                                 UP THE READ CCW'S
         MVI   CONHEAD,AUTO       NO, SET UP WRITE WITH AUTO
*                                 CARRIAGE RETURN
         NI    CONWRITE+4,HEX20   DO NOT CMD CHAIN TO READ
         B     CONSWRTE           WRITE OUT THE MSG
CONSWTE  DS    0H                 HANDLE I/O FOR READ AND WRITE
         MVI   CONHEAD,NOAUTO     MAKE CCW A WRITE WITH
*                                 NO AUTOMATIC CARRIAGE RETURN
         OI    CONWRITE+4,HEX40 .SET UP CMD CHAIN TO READ
         STCM  INREG,HEX7,CONREAD+1 PLACE THE INPUT ADDR IN
*                                   THE CONSOLE INPUT CCW
         STCM  INREG,HEX8,CONREAD+7 SET UP LENGTH OF READ
CONSWRTE DS    0H                 FOR THE MSG I/O PROCESSING
         LA    CCWREG,CONCCW      OBTAIN THE CCW ADDRESS FOR I/O
         OI    CTFLG1,CTERROR     INDICATE THIS RTN HANDLES ERRS
         BAL   RETREG,DUMPSIO     GO WRITE OUT THE MSG
         TM    CSW+4,X'01'        CHECK FOR UNIT EXCEPTION-OPERATOR
*                                 HAS CANCELLED THE REPLY
         BNO   ACANCELR           IF OPERATOR CANCELLED REPLY, REISSUE
*                                 THE ERROR MESSAGE
         IC    RETCODE,CONREAD+7 .UNDER CANCEL SET TO BLANK
         BCTR  RETCODE,0          BLANK OUT INPUT AREA
         EX    RETCODE,REREPLY    BLANK IT OUT
         B     CONSOLE            GO REPEAT THE MESSAGE
ACANCELR DS    0H                 SET UP CANCEL BYPASS
         AR    RETCODE,RETCODE    SET UP POSSIBLE I/O ERROR CODE OF 8
         TM    CTFLG1,CTERROR     DID AN I/O ERROR OCCUR?
         BCR   14,CREG            YES, GO TO USER ERROR EXIT (BNO COND)
         NI    CTFLG1,HEXFF-CTERROR .RESET THE ERROR FLAG
         SR    RETCODE,RETCODE    SET THE NORMAL RETURN CODE OF ZERO
         BR    CREG               RETURN TO CALLER--NORMAL
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION DESCRIBES THE CHANNEL PROGRAMS FOR THE CONSOLE       *
*  DEVICES SUPPORTTED.                                               *
*                                                                    *
*                                                                    *
*  THIS CODE IS FOR THE 1052 TYPE CONSOLE.  THIS INCLUDES THE        *
*  1052,2150,3210, AND THE 3215                                      *
*                                                                    *
**********************************************************************
         SPACE
CONCCW   DS    0D                 CONSOLE CCW'S
CONHEAD  CCW   X'01',MSGHEAD,HEXA0,X'04' MSG ID CCW
CONWRITE CCW   X'01',CONCCW,X'60',X'01' SET UP TO WRITE
CONREAD  CCW   X'0A',CONCCW,HEX20,TITLEN          SET UP TO READ
AUTO     EQU   X'09'              AUTOMATIC CARR RETURN CODE
NOAUTO   EQU   X'01'              NO AUTO CARR RETURN CODE
MSGHEAD  DC    C'AMD0'            MESSAGE HEADER FOR ALL MESSAGES
REREPLY  XC    0(0,INREG),0(INREG) BLANK OUT REPLY AREA ON CANCEL
         AGO   .ALTCON            GO TO ALT-CONSOLE
.GRAPHIC ANOP                     HANDLE GRAPHIC CONSOLE
CONADDRX DS    0H                                              @ZA57190
         DC    XL2'&CONADDR'     CONSOLE ADDRESS               @ZA57190
CONSOLE1 DS    0H                 RETRY ENTRY POINT TO CONSOLE RTN
         IC    RETCODE,CONREAD+7 .UNDER CANCEL SET TO BLANK
         BCTR  RETCODE,0          BLANK OUT INPUT AREA
         EX    RETCODE,REREPLY    BLANK IT OUT
CONSOLE  DS    0H                 THE CONSOLE READ/WRITE ENTRY POINT
         LA    RETCODE,4          SET UP ERROR RETURN CODE.THIS IS DONE
*                                 TO MINIMIZE THE CODE REQUIRED TO SET
CONSOLBA DS    0H
         LH    IODEVREG,CONADDRX  OBTAIN CONSOLE ADDR TO CHECK @ZA57190
CONTIOLP DS    0H                 CLEAR CONSOLE STATUS
         AIF   ('&TYPE2' NE 'HI').FX9                          @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         AGO   .PFX9                                           @ZA56338
.FX9     ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        IS THE CONSOLE AVAILABLE FOR I/O?
.PFX9    ANOP                                                  @ZA56338
CONNOTAV EQU   *+1                USED TO CHANGE THE BRANCH CONDITION  X
                                  TO 0 AFTER FINDING A CONSOLE @ZA56338
         BC    1,ALTCONCK         NOT AVAIL, CHECK FOR ALT CON @ZA56338
         NI    CONNOTAV,X'00'     CHANGE BRANCH TO NOP TO PREVENT LATERX
                                  ENTRY INTO ALTERNATE CODE.   @ZA56338
         IC    RETREG,CTPRMT1     SET UP TO OBTAIN CURRENT Y POINTER
*                                                                   *
*        NOTE:  GRAPHICS PROCESSING ON A 3066 IS AS FOLLOWS:        *
*               A BUFFER ADDRESS MUST BE SET ON THE SCREEN VIA A SET*
*               BUFFER ADDRESS CCW.  THE SET BUFFER ADDRESS REFERS  *
*               TO THE SCREEN AS AN X-Y COORDINATE SYSTEM, WHERE    *
*               THE X AXIS IS UP TO 80(BASE 10) BYTES LONG (SCREEN  *
*               WIDTH) AND Y IS UP TO 34(BASE 10) BYTES LONG        *
*               (SCREEN LENGTH).  THIS IS POINTED TO BY A SET BUFFER*
*               ADDRESS WITH Y AS THE FIRST BYTE IN THE BUFFER      *
*               AND X AS THE SECOND BYTE IN THE BUFFER.             *
*               CTPRMT (1 AND 2) ARE AS FOLLOWS:                    *
*                  BYTE 0          BYTE 1                           *
*                  Y AXIS DISPL    X AXIS DISPLACEMENT              *
*                                                                   *
         LA    RETREG,1(RETREG)   INCREMENT Y AXIS BY 1 TO NEXT LINE
         SLL   RETREG,8           SHIFT BY 1 BYTE (NOTE THIS ZEROS X
*                                 AXIS FOR THE NEXT LINE
         STCM  RETREG,HEX3,CTPRMT1 SAVE Y-X COORDINATES FOR SET BUFFER
*                                   ADDRESS CCW FOR CHANNEL PROGRAM
         STCM  OUTREG,HEX7,CONWRITE+1 SET UP THE OUTPUT ADDR IN CCW
         STCM  OUTREG,HEX8,CONWRITE+7 SET UP THE OUTPUT MSG LNGTH
         MVI   CONWRITE+4,HEX20   SET UP FOR WRITE MSG ONLY-NO COMMD
*                                 CHAINING TO READ CCW'S
         LTR   INREG,INREG        IS A READ TO FOLLOW?
         BZ    CONTEST            NO, GO OUTPUT MESSAGE
         STCM  INREG,HEX7,CONREAD+1 SAVE READ INPUT ADDR AREA
         STCM  INREG,HEX8,CONREAD+7 SAVE READ INPUT LENGTH IN CCW
         MVI   CONWRITE+4,X'60'   CHAIN UP READ TO WRITE CCW'S
         IC    RETREG,CONWRITE+7 .OBTAIN READ LENGTH FOR Y-X AXIS
         LA    RETREG,4(RETREG)   BUMP BY 4 (MSG HEADER LENGTH)
         STCM  RETREG,HEX3,CTPRMT2 .SET UP Y-X FOR READ AREA
*                                   NOTE RETREG HAS Y AXIS STILL IN
*                                   BYTE 2 OF REGISTER
CONTEST  DS    0H                 TEST STATUS OF SCREEN
         LA    CCWREG,CONSLCCW    OBTAIN CONSOLE CCW ADDR
         CLC   CTPRMT1(1),CTHWM   ARE WE OVER SCREEN DANGER POINT ON
*                                 FILLING THE GRAPHICS SCREEN
         BL    CWRITE             NO, GO WRITE OUTPUT MESSAGE
         AIF   ('&TYPE2' EQ 'LO').CERASE IF TYPE=LO, TEST NOT REQUIRED
         TM    CTCONFLG,CTMSGOUT .TEST IF MSG MUST GO OUT--RELATED
*                                 TO PRIOR MSG SO SCREEN MUST NOT BE
*                                 ERASED AT THIS TIME
         BNO   CERASE             NOT CONDITIONAL MSG-ERASE SCREEN
         CLC   CTPRMT1(1),CTHWMAX   OVER MAXIMUM SCREEN LIMIT?
         BL    CWRITE             NO, OUTPUT MESSAGE
.CERASE  ANOP                     ERASE SCREEN CONDITION
CERASE   DS    0H                 SET UP TO ERASE SCREEN
         LA    CCWREG,CONERASE    SET UP ERASE CCW
         XC    CTPRMT1(3),CTPRMT1 SET UP Y-X AS 00&00
CWRITE   DS    0H                 OUTPUT MESSAGE
         OI    CTFLG1,CTERROR     SET UP TO DETERMINE IF I/O ERR
         BAL   RETREG,DUMPSIO     GO ISSUE CONSOLE I/O
         AR    RETCODE,RETCODE    SET UP FOR CC=8 IF I/O ERR
         TM    CTFLG1,CTERROR     DID AN I/O ERROR OCCUR?
         BCR   14,CREG            YES, RETURN TO CALLER RC=8
         LTR   INREG,INREG        IS A READ TO FOLLOW?
         BZ    COK                NO, CONSOLE PROCESSING IS COMPLETED
CLOOP    DS    0H                 SET UP TO WAIT FOR ATTENTION FROM
         AIF   ('&TYPE2' EQ 'HI').FX1                          @ZA56338
         TIO   0(IODEVREG)        THE GRAPHICS DEVICE-THIS
         AGO   .PFX1                                           @ZA57190
.FX1     ANOP                                                  @ZA57190
         BAL   TIOREG,TIOLOOP                                  @ZA58851
.PFX1    ANOP                                                  @ZA57190
         BC    11,CLOOP           INDICATES THE OPERATOR HAS ENTERED
*                                 INPUT-DATA OR A CANCEL
         TM    CSW+4,HEX82        WAIT FOR ATTNQ OR UNIT CHECK OR BOTH
         BZ    CLOOP              IF NEITHER WAIT
         BCR   1,CREG             WAS ATTNQ AND UNIT CHECK THIS IS
*                                 AN I/O ERROR CONDITION-RETURN
*                                 TO CALLER WITH RC=8
         LA    CCWREG,CONMAN      ATTNQ ONLY-INPUT IS READY
*                                 TO BE READ.  ON GRAPHICS CONSOLE
*                                 MUST LOOK AT BUFFER TO DETERMINE
*                                 WHAT HAPPENED (ENTER OR CANCEL).
         BAL   RETREG,DUMPSIO     DO I/O FROM BUFFER
         TM    CTFLG1,CTERROR     DID AN ERROR OCCUR?
         BCR   14,CREG            YES, EXIT TO CALLER RC=8
         TM    MINPUT+2,CANCELM   WAS CANCEL ENTERED?
         BO    CONSOLE1           YES, ZERO BUFFER & REPEAT MSG
COK      DS    0H                 NORMAL CONSOLE RETURN AREA
         NI    CTFLG1,HEXFF-CTERROR .RESET THE ERROR FLAG
         SR    RETCODE,RETCODE    SET THE NORMAL RETURN CODE OF ZERO
         BR    CREG               RETURN TO CALLER--NORMAL
.GC3066  ANOP                     GRAPHIC CCW FOR 3066
         SPACE
**********************************************************************
*                                                                    *
*  THIS CODE IS FOR THE 3066 TYPE CONSOLE.  THIS INCLUDES THE        *
*  3066 CONSOLE DEVICE TYPE                                          *
*                                                                    *
**********************************************************************
         SPACE
CONCCW   DS    0D                 SET UP GRAPHICS CCW AREA
CONERASE CCW   ERASECMD,CTPRMT1,X'60',X'01' ERASE COMMAND FOR 3066
CONSLCCW CCW   SETBUFAD,CTPRMT1,X'60',X'02' SET BUFFER ADD FOR 3066
CONHEAD  CCW   WRITECMD,MSGHEAD,HEXA0,X'04' WRITE HEADER RECORD
CONWRITE CCW   WRITECMD,CONCCW,X'60',X'01' WRITE CMD FOR MSG
CONSETC  CCW   SETCURS,CTPRMT2,HEX20,X'02' SET CURSOR FOR READ
         SPACE
* THE FOLLOWING CCW'S ARE FOR 3066 READ COMMAND FUNCTIONS
         SPACE
CONMAN   CCW   LOCKCCW,MINPUT,X'60',X'01' LOCK UP 3066 KEYBOARD
CONRMI   CCW   READMAN,MINPUT,X'60',X'03' READ MANUAL INPUT FOR Y-X-CC
CONSETA  CCW   SETBUFAD,CTPRMT2,X'60',X'02' RESET BUFFER ADDR FOR READ
CONREAD  CCW   READCMD,CONCCW,HEX20,X'01' READ COMMAND TO READ INPUT
         SPACE
* THE FOLLOWING ARE 3066 EQUATES
         SPACE
LOCKCCW  EQU   X'67'              LOCK KEYBOARD COMMAND ON 3066
ERASECMD EQU   X'07'              ERASE COMMAND ON 3066
SETBUFAD EQU   X'27'              SET BUFFER ADDRESS COMMAND CODE
WRITECMD EQU   X'01'              CONSOLE WRITE COMMAND
SETCURS  EQU   X'0F'              SET CURSOR COMMAND
READMAN  EQU   X'0E'              READ MANUAL INPUT COMMAND CODE
READCMD  EQU   X'06'              READ COMMAND ON 3066
MINPUT   EQU   CONWRITE+1         SET UP RMI IN CCW-THIS IS UNUSED
*                                 DURING THE READ OPERATION
         DS    0F
MSGHEAD  DC    C'AMD0'            MESSAGE HEADER FOR ALL MESSAGES
REREPLY  XC    0(0,INREG),0(INREG) BLANK OUT REPLY AREA ON CANCEL
YCURSOR  EQU   MINPUT             Y CURSOR SETTING FROM RMI(READ MANUAL
*                                 COMMAND) WHICH GIVES Y-X-CC
XCURSOR  EQU   MINPUT+1           X CURSOR SETTING FROM RMI
ENTERM   EQU   X'80'              ENTER SETTING IN RMI-EQU TO MINPUT+2
CANCELM  EQU   X'40'              CANCEL SETTING IN PMI-EQU TO MINPUT+2
          AGO  .ALTCON                                         @ZA00418
.CON3158  ANOP                                                 @ZA00418
          SPACE 1                                              @ZA00418
***********************************************************    @ZA00418
**                                                       **    @ZA00418
**       THIS SECTION OF CODE SUPPORTS THE 3158/3277     **    @ZA00418
**                   TYPE OF OPERATOR CONSOLES           **    @ZA00418
**                                                       **    @ZA00418
***********************************************************    @ZA00418
CONADDRX DS    0H                                              @ZA57190
         DC    XL2'&CONADDR'     CONSOLE ADDRESS               @ZA57190
CONSOLE1 DS    0H                  ENTRY FOR RETRY             @ZA00418
         IC    RETCODE,C3277CR3+7  GET REPLY LENGTH            @ZA00418
         BCTR  RETCODE,0           ADJUST XC INSTRUCTION       @ZA00418
         EX    RETCODE,REREPLY     CLEAR REPLY AREA            @ZA00418
CONSOLE  DS    0H                  MAIN ENTRY POINT            @ZA00418
         LA    RETCODE,4           PRESET RETURN CODE          @ZA00418
         LH    IODEVREG,CONADDRX  OBTAIN CONSOLE ADDR TO CHECK @ZA57190
CONTIOLP DS    0H                                              @ZA00418
         AIF   ('&TYPE2' NE 'HI').FX11                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         AGO   .PFX11                                          @ZA56338
.FX11    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)         IS CONSOLE AVAILABLE        @ZA00418
         BC    2,CONTIOLP          WAIT IF BUSY                @ZA00418
.PFX11   ANOP                                                  @ZA56338
CONNOTAV EQU   *+1                USED TO CHANGE THE BRANCH CONDITION  X
                                  TO 0 AFTER FINDING A CONSOLE @ZA56338
         BC    1,ALTCONCK         NOT AVAIL, CHECK FOR ALT CON @ZA56338
         NI    CONNOTAV,X'00'     CHANGE BRANCH TO NOP TO PREVENT LATERX
                                  ENTRY INTO ALTERNATE CODE.   @ZA56338
         ICM   CCWREG,3,C3277FM1+2 GET PREVIOUS LINE ADDRESS   @ZA00418
         TM    C3277FM1+3,X'30'    WAS IT A 4TH LINE           @ZA00418
         BNO   NXTADR              NO ONLY ADD 1               @ZA00418
         MVI   ADDRCON+2,X'02'     YES,SET TO ADD 2            @ZA00418
NXTADR   DS    0H                                              @ZA00418
         AL    CCWREG,ADDRCON      BUMP TO NEXT LINE ADDRESS   @ZA00418
         MVI   ADDRCON+2,X'01'     RESET TO ADD 1 NEXT TIME    @ZA00418
         STCM  CCWREG,3,C3277FM1+2 STORE ADDRESS               @ZA00418
         NI    C3277FM1+3,X'30'    CLEAR UNWANTED BITS         @ZA00418
         STCM  OUTREG,HEX7,C3277CW2+1 SET CCW=MSG ADDR         @ZA00418
         STCM  OUTREG,HEX8,C3277CW2+7 SET CCW=MSG LENGTH       @ZA00418
CONTEST  DS    0H                                              @ZA00418
         LA    CCWREG,CONCCW       PICK UP CCW CHAIN ADDR      @ZA00418
         CLI   C3277FM1+2,X'D5'       ONLY 3 LINES TO GO?      @ZA52618
         BL    NXTEST              NO,MORE THAN 3              @ZA00418
         MVI   CTPRMT1,X'20'       YES,SET SACON MODULE SWITCH @ZA00418
NXTEST   CLI   C3277FM1+2,X'D7'    IS IT LAST LINE ON SCREEN?  @ZA52618
         BL    CWRITE              NO,GO WRITE                 @ZA00418
         BH    CERASE              BEYOND LAST LINE,GO ERASE   @ZA00418
         AIF   ('&TYPE2' EQ 'LO').CERASE2  SKIP  IF TYPE=LO    @ZA00418
         TM    CTCONFLG,CTMSGOUT   LAST LINE,IS MSG RELATED TO @ZA00418
         BO    CWRITE              PREV MSG-YES,GO WRITE       @ZA00418
.CERASE2 ANOP                      NO,CLEAR SCREEN             @ZA00418
CERASE   DS    0H                                              @ZA00418
         MVI   CTPRMT1,X'00'       RESET SACON SWITCH          @ZA00418
         LA    CCWREG,ERASECCW     GET ADDR OF ERASE CCW CHAIN @ZA00418
         MVC   C3277FM1+2(2),ADDRMASK   RESET SCREEN ADDR=0000 @ZA52618
CWRITE   DS    0H                                              @ZA00418
         OI    CTFLG1,CTERROR      RESET ERROR FLAG            @ZA00418
         BAL   RETREG,DUMPSIO      GO DO I/O                   @ZA00418
         AR    RETCODE,RETCODE     PRESET I/O ERROR CODE       @ZA00418
         TM    CTFLG1,CTERROR      WAS I/O ERROR               @ZA00418
         BCR   14,CREG             YES,RETURN TO CALLER,RC=8   @ZA00418
         LTR   INREG,INREG         IS THERE A REPLY            @ZA00418
         BZ    COK                 NO,GO FINISH                @ZA00418
         XC    RBDS3277,RBDS3277   YES,RESET REPLY PREFIX AREA @ZA00418
CLOOP    DS    0H                                              @ZA00418
         AIF   ('&TYPE2' EQ 'HI').FX2                          @ZA56338
         TIO   0(IODEVREG)         TEST FOR OPERATOR ACTION    @ZA00418
         AGO   .PFX2                                           @ZA57190
.FX2     ANOP                                                  @ZA57190
         BAL   TIOREG,TIOLOOP                                  @ZA56338
.PFX2    ANOP                                                  @ZA57190
         BC    11,CLOOP            NO ACTION,LOOP WAIT         @ZA00418
         CLI   CSW+4,X'50'        STATUS MODIFIER AND BUSY?    @ZA67833
         BE    CUBUSY             ENABLE TO CLEAR INTERRUPT    @ZA67833
         TM    CSW+4,HEX82         YES,WAS IT ATTN OR UNIT CHK @ZA00418
         BZ    CLOOP               NEITHER,LOOP WAIT           @ZA00418
         BCR   1,CREG              BOTH,ERROR-RETURN RC=8      @ZA00418
         STCM  INREG,HEX7,C3277CR3+1 ATTN ONLY-SET CCW=ADDR    @ZA00418
         STCM  INREG,HEX8,C3277CR3+7 SET CCW=REPLY LENGTH      @ZA00418
         LA    CCWREG,CONREAD      GET ADDR OF READ CCW CHAIN  @ZA00418
         BAL   RETREG,DUMPSIO      GO DO I/O                   @ZA00418
         TM    CTFLG1,CTERROR      WAS I/O ERROR               @ZA00418
         BCR   14,CREG             YES,RETURN TO CALLER RC=8   @ZA00418
         CLI   RBDS3277,X'6E'      WAS REPLY CANCEL INDICATOR  @ZA00418
         BE    CONSOLE1            YES,GO RETRY                @ZA00418
COK      DS    0H                                              @ZA00418
         NI    CTFLG1,HEXFF-CTERROR RESET ERROR FLAG           @ZA00418
         SR    RETCODE,RETCODE     SET RC=0                    @ZA00418
         BR    CREG                RETURN TO  CALLER RC=0      @ZA00418
         DS    0D                                              @ZA00418
ERASECCW CCW   ERASWRIT,C3277FM2,X'60',X'01'                   @ZA00418
CONCCW   DS    0D                                              @ZA00418
C3277CW1 CCW   WRITECMD,C3277FM1,HEXA0,X'0A'                   @ZA00418
C3277CW2 CCW   WRITECMD,CONCCW,HEXA0,X'01'                     @ZA00418
C3277CW3 CCW   WRITECMD,C3277FM2,HEX20,X'04'                   @ZA00418
CONREAD  DS    0D                                              @ZA00418
C3277CR2 CCW   READMOD,RBDS3277,HEXA0,X'06'                    @ZA00418
C3277CR3 CCW   READMOD,CONREAD,HEX20,X'01'                     @ZA00418
ADDRCON  DC    F'272'                                          @ZA00418
ADDRMASK DC    X'C000'                                         @ZA52618
C3277FM1 DC    X'C311D7301D60'                                 @ZA52618
         DC    C'AMD0'                                         @ZA00418
C3277FM2 DC    X'401D4013'                                     @ZA00418
RBDS3277 DC    6X'00'                                          @ZA00418
ERASWRIT EQU   X'05'                                           @ZA00418
WRITECMD EQU   X'01'                                           @ZA00418
READMOD  EQU   X'06'                                           @ZA00418
REREPLY  XC    0(0,INREG),0(INREG)                             @ZA00418
         DS    0F                                              @ZA00418
.ALTCON  ANOP                     ALTERNATE CONSOLE ROUTINE
         EJECT
.*   MACRO SECTION 5                                           @ZA27964
**********************************************************************
*                                                                    *
*  THE DUMP SIO ROUTINE.  THIS ROUTINE HANDLES ALL SIO FOR THE DUMP  *
*  PROGRAM. THE ENTRY IS VIA THE DUMPSIO LABEL.                      *
*                                                                    *
*        THE PARAMETER REGISTERS ARE AS FOLLOWS:                     *
*              IODEVREG...R10...DEVICE ADDRESS                       *
*              CCWREG...R11...CHANNEL PROGRAM ADDRESS                *
*              BASEREG...R12...BASE REGISTER POINTING TO LOC X'7000' *
*              RETREG...R13...RETURN REGISTER                        *
*                                                                    *
*              CTFLG1..IF CTERROR IS ONE SPECIFIES USER ERROR        *
*                         EXISTS.  THE ROUTINE WILL EXIT TO          *
*                         THE ROUTINE IF AN ERROR OCCURS.            *
*                         IF 0 REQUESTS LIMITED ERROR RECOVERY       *
*                         IS TO BE PERFORMED BY THE SIO ROUTINE      *
*                                                                    *
**********************************************************************
         SPACE
TLOOPCSW DS    0H                 CSW STORED                   @ZA17663
         TM    CSW+4,X'92'        ATTN,BUSY OR UNIT CHECK?     @ZA17663
*                                 (FOR EFFICIENCY TEST ALL 3   @ZA17663
*                                  FIRST; RESULTS IN SHORTER   @ZA17663
*                                  PATH IN NORMAL CASE)        @ZA17663
         BZ    TLOOP              NO,LOOP TIL STATUS CLEAR     @ZA17663
         TM    CSW+4,X'02'        UNIT CHECK?                  @ZA17663
         BO    TLOOPUC            YES, BRANCH                  @ZA17663
*                                 ELSE ATTN AND/OR BUSY        @ZA17663
         CH    IODEVREG,CONADDRX  CONSOLE I/O?                 @ZA57190
         BNE   TLOOP              NO, REAL BUSY                @ZA17663
         TM    CTFLG2,CTALTCON    ALTERNATE CONSOLE?           @ZA17663
         BZ    TLOOP              NO, REAL BUSY                @ZA17663
         B     CATSEXIT           YES, BAD ALTERNATE CONSOLE   @ZA17663
TLOOPUC  DS    0H                 UNIT CHECK                   @ZA17663
         CLI   0(CCWREG),SENSECMD IS THIS A SENSE COMMAND ISSUED?
         BE    SIO                YES, ERROR COND.,IGNORE TIO SINCE
*                                 THE STATUS IS FROM THE CHANNEL
         LA    CCWREG,8(CCWREG)   SET UP CCW FOR INT REQ
         STCM  CCWREG,HEX7,CSW+1 .SET UP CSW FOR INTV REQ
         B     CATSEXIT           HANDLE CONDITION
         EJECT                                                 @ZA56338
DUMPSIO  DS    0H                 THE SIO SUBROUTINE FOR REAL DUMP
TLOOP    DS    0H                 TIO LOOP TO CLEAR DEVICE STATUS
         AIF   ('&TYPE2' NE 'HI').FX13                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         B     *+8                                             @ZA56338
         B     TLOOPCSW                                        @ZA56338
         BC    1,CATSEXIT                                      @ZA56338
         AGO   .PFX13                                          @ZA57190
.FX13    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        CLEAR THE DEVICE TO INSURE IT IS
*                                 AVAILABLE
         BC    2,TLOOP            WAIT UNTIL DEVICE IS FREE
         BC    8,SIO              IF AVAILABLE, ISSUE SIO
         BC    4,TLOOPCSW         BRANCH IF CSW STORED         @ZA17663
*                                 ELSE DEVICE NOT OPERATIONAL  @ZA19025
         XC    CSW(4),CSW         CLEAR SPURIOUS OLD CSW       @ZA19025
         B     CATSEXIT           ALLOW FOR RETURN TO CALLER   @ZA19025
*                                 OR ERROR MESSAGE             @ZA19025
.PFX13   ANOP                                                  @ZA56338
SIO      DS    0H                 START I/O ROUTINE
         ST    CCWREG,CAW         SET THE CAW TO THE CHANNEL PGM
         SIO   0(IODEVREG)        PERFORM THE I/O OPERATION
         BC    3,TLOOP            IF BUSY, START I/O AGAIN     @ZA56338
         BC    8,TIO              IF SIO WENT, BRANCH FOR TIO  @ZA56338
         TM    CSW+4,HEX10        CHECK FOR BUSY CONDITION
         BNZ   TLOOP              IF BUSY, START OVER
         B     CHECKERR           ATTEMPT ERROR RECOVERY
TIO      DS    0H                 LOOP TO WAIT UNTIL I/O IS COMPLETE
         AIF   ('&TYPE2' EQ 'HI').FX3                          @ZA56338
         TIO   0(IODEVREG)        WAIT UNTIL OPERATION IS COMPLETED
         BNL   TIO                IF NOT COMPLETE...CONTINUE WAIT LOOP
         AGO   .PFX3                                           @ZA57190
.FX3     ANOP                                                  @ZA57190
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         B     TLOOP                                           @ZA56338
.PFX3    ANOP                                                  @ZA57190
CHECKERR DS    0H                 ERROR/NORMAL I/O CHECK
         AIF   ('&TYPE2' NE 'HI').FX23                         @ZA56338
EASYERR  DS    0H                                              @ZA56338
         TM    CSW+5,CCC+CDC      CHAN DATA/CTL CHK?           @ZA27964
         BNZ   MCHKIOSK           YES                          @ZA27964
.FX23    ANOP                                                  @ZA56338
         TM    CSW+5,X'3F'        CATASTROPHIC CHAN ERROR?
         BNZ   CATSEXIT           YES, CHANNEL IN TROUBLE: HANDLE IT
         TM    CSW+4,X'02'        A UNIT CHECK CONDITION?
         BNZ   CATSEXIT           IF UNIT CHECK, HANDLE ERROR COND
         TM    CSW+4,X'05'        A DEVICE END CONDITION?
         BZ    TIO                IF NOT DO TIO UNTIL DEV AVAIL
         CLI   0(CCWREG),SENSECMD IS THIS A SENSE COMMAND ISSUED?
         BCR   8,RETREG           YES, DO NOT RESET ERB
         XC    CTERBDA(8),CTERBDA NORMAL RETURN, RESET ERR SW
         BR    RETREG             RETURN TO CALLER
         SPACE
**********************************************************************
*                                                                    *
*  THIS ROUTINE HANDLES THE ERROR PROCESSING FOR THE SIO ROUTINE     *
*                                                                    *
**********************************************************************
         SPACE
CATSEXIT DS    0H                 THIS HANDLES THE I/O ERROR PROCESSING
*                                 FIRST A CHECK IS MADE TO DETERMINE
*                                 IF THE USER DESIRES TO PROCESS HIS
*                                 OWN I/O ERRORS.
         TM    CTFLG1,CTERROR     THE USER SETS CTERROR  IF
*                                 HE DESIRES TO HANDLE HIS OWN ERROR
*                                 RECOVERY
         BNO   ERROUTE            NO--PROVIDE MINIMUM ERROR
*                                 PROCESSING AS A FUNCTION OF THE
*                                 DEVICE
         NI    CTFLG1,HEX7F       YES...THE USER DESIRES TO
*                                 HANDLE HIS OWN I/O ERRORS
*                                 INDICATE AN I/O ERROR OCCURRED AND GO
*                                 TO THE USER'S I/O ERROR ROUTINE
         BR    RETREG             EXIT TO USER
         EJECT
.*   MACRO SECTION 6                                           @ZA27964
**********************************************************************
*                                                                    *
*  THIS IS THE DUMP ERROR ROUTINE.  CONSOLE I/O ERRORS ARE           *
*  NOT HANDLED BY THIS ROUTINE.  IF CTDEVICE IS 0 TAPE I/O ERRORS    *
*  WILL BE HANDLED IF CTDEVICE IS 1 DIRECT ACCESS I/O ERRORS WILL BE *
*  HANDLED.  NOTE:  THE I/O ERROR RECOVERY IS A SUBSET OF THE        *
*  STANDARD I/O ERROR RECOVERY DUE TO SPACE RESTRICTIONS.            *
*                                                                    *
*        REGISTER CONVENTIONS:  R10-12 & 14 AS IN DUMPSIO            *
*                               MSGREG...9...ERROR MSG               *
*                               WORKREG3...7...RETURN SAVE REGISTER  *
*                               WORKREG4...8...CCW SAVE REG          *
*                               WORKREG1...5...RETRY WORK REGISTER   *
*                                                                    *
**********************************************************************
         SPACE
ERROUTE  DS    0H                 I/O ERROR ENTRY POINT
         LR    WORKREG1,IODEVREG                               @ZA57190
         SLL   WORKREG1,4                                      @ZA57190
         ST    WORKREG1,WORK1     STORE I/O DEVICE             @ZA57190
         UNPK  MSG03I+17(3),WORK1+2(2)   UNPACK DEVICE TYPE  @ZA24157
         OI    MSG03I+19,X'F0'    CONVERT SIGN TO ZONE       @ZA24157
         UNPK  MSG03I+26(9),CSW(5)   UNPACK 1ST HALF OF CSW  @ZA24157
         UNPK  MSG03I+34(9),CSW+4(5)   UNPACK 2ND HALF       @ZA24157
         TR    MSG03I+26(16),TABLE-240  TRAN TO PRINTABLE    @ZA24157
         MVI   MSG03I+42,X'40'    BLANK WORK BYTE OF MESSAGE @ZA24157
         LA    MSGREG,MSG03I      SET UP CHAN ERR MSG IF ERROR
*                                 IS PERMANENT
         ICM   MSGREG,HEX8,LMSG03I SET UP LENGTH OF ERR MSG
         SPACE
**********************************************************************
*                                                                    *
*  TAPE, PRINTER, AND D.A. COMMON I/O ERROR PROCESSING               *
*                                                                    *
**********************************************************************
         SPACE
         AIF   ('&TYPE2' EQ 'HI').LSE1 SKIP CHECK FOR CAT ERR IF HI
         TM    CSW+5,X'06'        INTERFACE CONTROL CHECK(CSW BIT 46)
*                                 OR CHANNEL CONTROL CHECK(CSW BIT 45)?
         BNZ   ERRMSG             YES, SEVERE ERROR OUTPUT ERR MSG
.LSE1    ANOP
         TM    CSW+4,X'02'        UNIT CHECK (CSW BIT 38)?
         BNO   ERRMSG             NO, EXIT FOR ERROR MSG REGARDLESS
*                                 OF THE ERROR CONDITION
         LM    WORKREG1,WORKREG2,CSW SAVE CSW FOR USE BY
*                                 INTERVENTION REQUIRED AND BUS CHECK
*                                 RECOVERY CONDITIONS (TAPE ONLY)
         ICM   CCWREG,HEX7,CSW+1 .RESTORE THE CCW
DATACHAN DS    0H                 SET UP IF DATA CHAINING
         SH    CCWREG,H8          BACK UP TO FAILING CCW
         AIF   ('&TYPE2' EQ 'LO').SKDATAZ IF LO NO DATA CHAIN
         LA    WORKREG4,WRITECCW .IS THIS A DATA CHAIN TAPE CCW
         CR    CCWREG,WORKREG4    CURRENT CCW DATA CHAIN?
         BE    DATACHAN           YES, BACK UP TO START
.SKDATAZ ANOP                     RESUME ERROR RECOVERY NORM
         OC    CSW+1(3),CSW+1     DETERMINE IF CSW CCW=0?
         BNZ   CCWNOT0            IF NOT,IGNORE
         L     CCWREG,CAW         ZERO, SET UP TO CAW          @ZA27964
CCWNOT0  DS    0H                 NOW PROPER CCW SET UP
         SPACE
**********************************************************************
*                                                                    *
*  NOTE:  THE REMAINDER OF ERROR HANDLING ASSUMES THE USER RETURN    *
*         REGISTER IS IN WORKREG3 AND THE CHANNEL PROGRAM ADDRESS    *
*         IS IN WORKREG4.  THESE REGISTERS MUST NOT BE DESTROYED     *
*                                                                    *
**********************************************************************
         SPACE
         LR    WORKREG4,CCWREG    SAVE THE CHANNEL PROGRAM     @ZA27964
         LR    WORKREG3,RETREG    SAVE THE USER RETURN REG     @ZA27964
         LA    CCWREG,TAPESENS    SET UP TO ISSUE A SENSE COMMAND
         BAL   RETREG,DUMPSIO     GO ISSUE THE SENSE
         LR    RETREG,WORKREG3    RESTORE RETURN REG OF USER
*                                 NOTE THAT WORKREG3 STILL HAS
*                                 THE RETURN REG VALUE.  THERE IS
*                                 NO ERROR CHECKING DONE FOR THE
*                                 SENSE OPERATION SINCE ONLY A
*                                 CHANNEL ERROR WILL PREVENT THE
*                                 OPERATION AND WILL NOT TERMINATE
*                                 PROCESSING PRIOR TO THIS POINT
         LR    CCWREG,WORKREG4    RESTORE USER CHANNEL PGM
*                                 THIS IS DONE FOR RETRY OPERATIONS
         STM   WORKREG1,WORKREG2,CSW   RESTORE THE CSW
         AIF   ('&IPL2'(1,1) EQ 'T').LSE2 IF TAPE IPL EQU CHK LATER
         TM    SENSE03,HEX10      EQUIPMENT CHECK COND?
         AIF   ('&OUTPUT2'(1,1) NE 'P').NOTPTR                 @Z40MI3F
         BNO   DAERROR            DISK ERROR?                  @Z40MI3F
         TM    CT3800,1           PRINTER TYPE?                @Z40MI3F
         BNO   ERRMSG             PRINT ERROR MESSAGE          @Z40MI3F
         TM    SENSAREA+1,HEX20   ERROR LOG FULL?              @Z40MI3F
         BNO   ERRMSG             NO, PRINT ERROR MESSAGE      @Z40MI3F
         LA    CCWREG,RELCCW      SENSE ERROR LOG CCW          @Z40MI3F
         OI    CTFLG1,CTERROR     PREVENT RECURSION            @Z40MI3F
         BAL   RETREG,DUMPSIO     SENSE ERROR LOG              @Z40MI3F
         NI    CTFLG1,HEX7F       RESET ERROR FLAG             @Z40MI3F
         LR    RETREG,WORKREG3    RESTORE RETRY REG            @Z40MI3F
         LR    CCWREG,WORKREG4    RESTORE CCW REG              @Z40MI3F
         B     PTRETRYA                                        @Z40MI3F
.NOTPTR  AIF   ('&OUTPUT2'(1,1) EQ 'P').LSE2                   @Z40MI3F
         BO    ERRMSG             YES, EXIT TO MSG
.LSE2    ANOP                     SET UP TAPE ERROR RECOVERY
         AIF   ('&IPL2'(1,1) EQ 'T').SKIPDA NO DA RETRY CODE FOR TAPE
DAERROR  TM    CTFLG1,CTDEVICE    DA I/O ERROR?                @Z40MI3F
         BO    DARETRY            YES, HANDLE THE D.A. ERROR
.SKIPDA  ANOP                     TAPE RETRY CODE IS HERE
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PTERR PTR & TAPE INCOMPATIBLE
         L     ERROREG,CTERBTPE   OBTAIN THE TAPE ERB
         TM    SENSE02,HEX20      BUS OUT CHECK COND?
         BO    BUSCHK             YES, GO RETRY BUS CHECK
         TM    SENSE01,HEX40      INTERVENTION REQUIRED?
         BO    INTVR              YES, GO OUTPUT INTV MSG
CMDREJ   DS    0H                 PROCESS COMMAND REJECT COND
         TM    SENSE00,HEX80      COMMAND REJECT?
         BO    FPTAPECK           YES, EXIT TO F P
         TM    SENSE05,X'04'      OVERRUN CONDITION?
         BO    REPOSTPE           YES, RETRY TO CORRECT
         AIF   ('&TYPE2' EQ 'HI').LSE4 SET UP FOR DATA CHK IF HI
         TM    SENSE14,X'08'      LOAD POINT?
         BO    ERRMSG             YES, PRINT MSG THEN EXIT
.LSE4    ANOP                     DATA CHECK TEST FOR HIGH
         TM    SENSE04,X'08'      DATA CHECK
         BNO   FPTAPECK           NO, CHECK FOR F P TAPE
         CLI   0(CCWREG),WRITETPE    A WRITE OPERATION?
         BNE   RETRY15            NO, RETRY A MAX OF 15 TIMES
         STCM  CCWREG,HEX7,MODETIC+1 SET UP RESUME CCW
         LA    CCWREG,TAPERROR    PICK UP THE CHANNEL PGM
RETRY15  DS    0H                 THIS SETS UP A 15 TIME RETRY
         LTR   ERROREG,ERROREG    ERROR HANDLING ALREADY
*                                 IN PROGRESS?
         BNZ   COMMONER           YES, GO RETRY THE OPERATION
         AIF   ('&TYPE2' EQ 'HI').LSE5 SET UP FOR DATA CHECK IF HI
         MVC   CTERBTPE(4),DATCKTPE OBTAIN THE TAPE DATA CHECK
*                                 RETRY COUNT
         AGO   .LSE6              SKIP AROUND HI SET UP OF ERB
.LSE5    ANOP                     HI SET UP OF ERB
         MVI   CTERBTPE+3,HEX10   SET UP CTERBTPE WITH ERROR RETRY CT
.LSE6    ANOP                     RESUME COMMON ERB RETRY CODE
COMMONER DS    0H                 COMMON RETRY CODE
         SR    WORKREG1,WORKREG1  COUNTER REGISTER
         IC    WORKREG1,ERBRETRY  OBTAIN CURRENT RETRY CT
         BCT   WORKREG1,ERBPRIME  DECREMENT BY ONE TIME
         B     ERRMSG             IF ALL DONE, EXIT TO MSG ROUTINE
         SPACE 1                                               @ZA27964
FPTAPECK DS    0H
         TM    SENSE16,X'02'      IS IT FP TAPE
         BNO   ERRMSG             NO EXIT ON ALL OTHER ERRORS
         ST    CCWREG,LOWCORE1    STORE CURR CCW
         LA    CCWREG,RWULDCMD    GET REWIND UNLOAD
         LH    IODEVREG,CTOUTAD   LOAD TAPE ADDR
         OI    CTFLG1,CTERROR     SET UP FOR OWN E R
         BAL   RETREG,DUMPSIO     ISSUE REWIND UNLOAD
         LR    RETREG,WORKREG3    RESTORE RETURN ADDRESS       @ZA56338
         SR    INREG,INREG        ZERO READ REG
         LA    OUTREG,MSG19A      F P MSG
         ICM   OUTREG,HEX8,LMSG19A   LOAD LENGTH
         BAL   CREG,CONSOLE       GO ISSUE MSG
         LTR   RETCODE,RETCODE    WAS THERE AN ERROR
         BNZ   ERRMSG             EXIT ON ERROR
         OI    CTLOWFLG,CTFP      SET UP FOR FP ENTRY TO LBL CHK
FPTIOLP  DS    0H
         B     LBLALT             GO CHECK FOR LBL TAPE
         SPACE 4                                               @ZA56338
         AIF   ('&TYPE2' NE 'HI').DAE021                       @ZA27964
MCHKIOSK LA    CCWREG,TAPEREP     SET UP TO REPOSITION TAPE    @ZA27964
         OI    CTFLG2,CTWKDONE    STOP WRITING THE WORK FILE   @ZA27964
*                                 REENTER MAIN LOOP SO THE REPOSITION
*                                 WILL LOOK LIKE SUCCESSFUL WRITING OF
*                                 THE FRAME AND THINGS WILL PROGRESS
*                                 NORMALLY TO THE NEXT FRAME.  @ZA27964
.DAE021  ANOP                                                  @ZA27964
ERBPRIME DS    0H                 HANDLE PRIMARY CTR
         STC   WORKREG1,ERBRETRY .SAVE RETRY CTR.  NOTE:
*                                 THIS LIMITS THE TOTAL NUMBER OF
*                                 RETRIES TO 256
         AIF   ('&TYPE2' EQ 'HI').LSE7 SET UP FOR NO PRIME CTR IF HI
         IC    WORKREG1,ERBCTRP   PRIMARY RETRY CTR
         BCT   WORKREG1,ERBSIO    DECREMENT BY ONE
         B     ERRMSG             ALL FINISHED. ERROR MSG
ERBSIO   DS    0H                 THIS IS THE SIO HANDLER
*                                 FOR ERROR RETRIES
         STC   WORKREG1,ERBCTRP   UPDATE PRIMARY RETRY CTR
.LSE7    ANOP                     RETURN TO DUMPSIO
         B     DUMPSIO            ISSUE RETRY OPERATION
         SPACE
**********************************************************************
*                                                                    *
*  THIS CODE RETRIES THE INTERVENTION REQUIRED CONDITION             *
*                                                                    *
**********************************************************************
         SPACE
INTVR    DS    0H                 INTERVENTION REQUIRED CODE
         TM    CSW+4,X'04'        DEVICE END CONDITION?
         BNO   INTVR1             DETERMINE DEVICE STATE
         CLI   0(CCWREG),REWINDUD WAS IT A REWIND-UNLOAD?
         BCR   8,RETREG           YES, IGNORE COMMAND
         B     CMDREJ             NO, IGNORE CONDITION
INTVR1   DS    0H                 CHECK DEVICE STATUS
         TM    SENSE12,HEX20      TU COND?
         BNO   ERRMSG             NO, SET UP ERROR MSG
         AIF   ('&IPL2'(1,1) EQ 'D').LC1 IF DA IPL SKIP TAPE IPL CHK
         CH    IODEVREG,CTINADDR  IS THIS THE IPL ADDR
         BE    IPLINTA            YES,HANDLE FOR IPL DEV MSG   @ZA24157
.LC1     ANOP                     RESUME INT REQ TEST FOR DEFAULT
         MVC   MSG14I+13(3),CTEBCOPR MOVE IN EBCDIC DEV ADDR
INTVR2   DS    0H                 GO TO CONSOLE RTN
         LA    OUTREG,MSG14I      SET UP FOR INTV REQ MSG
         ICM   OUTREG,HEX8,LMSG14I OBTAIN MSG LENGTH
INTVR2A  DS    0H                 SET UP FOR INTV MSG
         ST    IODEVREG,TEMPSAVE .SAVE DEVICE ADDRESS
         SR    INREG,INREG        PREPARE TO ISSUE INTV REQ MSG
         BAL   CREG,CONSOLE       OUTPUT MSG
         MVI   LMSG14I,HEX10      RESTORE ORGINAL MSG LENGTH
*                                 THIS IS DONE FOR IPL DEV MSG WHICH
*                                 IS HANDLED IN A SPECIAL WAY IN
*                                 ORDER TO CONSERVE STORAGE
         L     IODEVREG,TEMPSAVE .RESTORE DEVICE ADDR
         LTR   RETCODE,RETCODE    ERROR ON OUTPUT?
         BZ    INTVR3             YES, WAIT STATE
INTVWAIT DS    0H
         MVI   CTWAIT,X'0E'       SET UP WAIT STATE CODE
         B     TAPESW             EXIT WITH CODE
INTVR3   DS    0H                 RETRY ON INTV REQ
         LR    CCWREG,WORKREG4    RESTORE USER CHANNEL PGM
         LR    RETREG,WORKREG3    RESTORE RETURN REG
INTLOOP  DS    0H                 WAIT FOR INTVR DEVICE TO BECOME
         AIF   ('&TYPE2' NE 'HI').FX15                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         B     *+8                                             @ZA56338
         B     INTLOOP                                         @ZA56338
         BC    1,ERRMSG                                        @ZA56338
         AGO   .PFX15                                          @ZA56338
.FX15    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        READY FOR I/O
         BC    7,INTLOOP          LOOP UNTIL READY
.PFX15   ANOP                                                  @ZA56338
         B     DUMPSIO            YES, VERIFY THE LABEL AS NL
BUSCHK   DS    0H                 HERE FOR BUS OUT CHECK
         TM    CSW+4,X'04'        DEVICE END COND?
         BNO   OVERUNCK           NO, RETRY 5 TIMES MAX
REPOSTPE DS    0H                 SET UP TO REPOSITION THE TAPE
         STCM  CCWREG,HEX7,BUSTIC+1 YES SET UP TO REPOSITION
*                                    THE TAPE THEN RETRY THE OPERATION
         LA    CCWREG,TAPEBUS     RESTART THE CCW COMMAND
OVERUNCK DS    0H                 OVERRUN CONDITION
         LTR   ERROREG,ERROREG    ERROR RECOVERY IN OPER?
         BNZ   COMMONER           YES, RETRY OPERATION
         AIF   ('&TYPE2' EQ 'HI').LSE8 FOR HI SKIP OVER RETRY CTR
         MVC   CTERBTPE(4),OVERUNTP RETRY UP TO FIVE TIMES
         AGO   .LSE9              PREPARE FOR RETRY OPERATION
.LSE8    ANOP                     HI RETRY CTR FOR OVERRUN
         MVI   CTERBTPE+3,X'05'   SET UP HI OVERRUN CTR
.LSE9    ANOP                     DECREMENT RETRY COUNTER
         B     COMMONER           RETRY OPERATION
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IPLIA SKIP PTR CODE  @ZA24157
.PTERR   ANOP                     PRINTER ERROR RECOVERY CODE
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION WILL PROVIDE PRINTER I/O ERRROR RECOVERY ON ALL PTRS *
*                                                                    *
**********************************************************************
         SPACE
         TM    SENSE04,X'1E'      A PARITY ERROR CONDITION OR
*                                 A CONDITION WHICH SHOULD NOT OCCUR
         BNZ   ERRMSG             IF THIS EXITS PROVIDE ERR MSG
         TM    SENSE01,HEX40      INTERVENTION REQUIRED COND
         BO    INTVR              HANDLE WITH ACTION AND MSG
         TM    SENSE02,HEX20      BUS OUT CONDITION
         BO    PTRETRYA           YES MSG AND RETRY
         TM    SENSE01,X'01'      CHANNEL 9 CONDITION?
         BCR   1,RETREG           YES, RESTART I/O, IGNORE ERROR
         TM    CTLOWFLG,CTINIT    INITIALIZATION STAGE?        @Z40MI3F
         BNO   PTRETRYA           RETRY PRINTER CCW            @Z40MI3F
         NI    CT3800,0           TURN OFF 3800 SWITCH         @Z40MI3F
         BR    RETREG             RETURN FOR TITLE             @Z40MI3F
PTRETRYA DS    0H                 PRINTER RETRY OPERATION
         L     ERROREG,CTERBPTR   OBTAIN PTR RETRY BLOCK
         LTR   ERROREG,ERROREG    RETRY IN PROCESS?
         BNZ   ERRMSG             YES, EXIT WITH MSG AND RETRY ACTION
         MVC   CTERBPTR(4),PTRCHK SET UP PRT RETRY ACTION
         B     DUMPSIO            RETRY THE I/O OPERATION ONCE
INTVR    DS    0H                 PRINTER INTERVENTION CODE
         MVC   MSG14I+13(3),CTEBCOPR MOVE IN EBCDIC DEV ADDR
INTVR2   DS    0H                 GO TO CONSOLE RTN
         ST    IODEVREG,TEMPSAVE .SAVE DEVICE REGISTER
         SR    INREG,INREG        PREPARE TO ISSUE INTV REQ MSG
         LA    OUTREG,MSG14I      SET UP FOR INTV REQ MSG
         ICM   OUTREG,HEX8,LMSG14I OBTAIN MSG LENGTH
         BAL   CREG,CONSOLE       OUTPUT MSG
         MVI   LMSG14I,HEX10      RESET MSG LENGTH. THIS IS DONE
*                                 FOR COMMON MSG USUAGE
*                                 FOR IPL DEV MSG
         LTR   RETCODE,RETCODE    ERROR ON OUTPUT?
         BZ    INTVR3             NO, SET UP FOR RETRY
         MVI   CTWAIT,X'04'       MOVE IN I/O ERR WAIT CODE
         B     WAITSTAT           SET WAIT STATE PSW
INTVR3   DS    0H                 RSEUME INTERVENTION
         L     IODEVREG,TEMPSAVE .RESTORE DEVICE REGISTER
         LR    CCWREG,WORKREG4    RESTORE USER CHANNEL PGM
         LR    RETREG,WORKREG3    RESTORE RETURN REG
INTLOOP  DS    0H                 WAIT FOR INTVR DEVICE TO BECOME
         AIF   ('&TYPE2' NE 'HI').FX17                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         B     *+8                                             @ZA56338
         B     INTLOOP                                         @ZA56338
         BC    1,ERRMSG                                        @ZA56338
         AGO   .PFX17                                          @ZA56338
.FX17    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        READY FOR I/O
         BC    7,INTLOOP          LOOP UNTIL READY
.PFX17   ANOP                                                  @ZA56338
         B     DUMPSIO            NO, RETRY I/O WHEN DEVICE READY
.IPLIA   ANOP                     TAPE RETRY CODE            @ZA24157
IPLINTA  DS    0H                 TAPE IPL INTERVENTION CODE @ZA24157
         MVC   MSG14I+13(3),IPLMSG SET UP IPL DEVICE MESSAGE @ZA24157
         MVI   LMSG14I,HEX14      SET PROPER MESSAGE LENGTH  @ZA24157
         B     INTVR2             RETRY THE I/O OPERATION    @ZA24157
         AIF   ('&IPL2'(1,1) EQ 'T').GKM IF IPL FROM TAPE, FORGET DA
         AIF   ('&TYPE2' EQ 'LO').CLEAN NO PAGE DUMP FOR LO DUMP
         EJECT
*************************************************************@ZA17663*
*                                                            @ZA17663*
*  THIS IS THE PROCESSING WHICH FOLLOWS THE RETURN FROM      @ZA17663*
*  THE CALL TO DUMPSIO TO LOAD THE PRECURSOR. THIS           @ZA17663*
*  CODE IS SEPARATED FROM THE CALLING SEQUENCE FOR LOADING   @ZA17663*
*  THE PRECURSOR BECAUSE OF THE OF THE OVERLAY SCHEME WHICH  @ZA27964*
*  BRING THE PRECURSOR IN OVER THE LAST HALF OF THIS MODULE. @ZA27964*
*    THIS CODE CHECKS TO BE SURE THAT THE PRECURSOR          @ZA17663*
*  WAS OBTAINED SUCCESSFULLY THEN PASSES CONTROL             @ZA17663*
*  TO IT IN R15.                                             @ZA17663*
*                                                            @ZA17663*
*************************************************************@ZA17663*
         SPACE 1                                               @ZA17663
GETPROIO DS    0H                 POST DUMPSIO GETPRO PROCESSING
*                                                              @ZA17663
         TM    CTFLG1,CTERROR     DID AN I/O ERROR OCCUR?
TEST     DS    0H
         BO    GOTOPRO            NO, GO TO AMDSAPRO
         LA    MSGREG,MSG13I      SET UP FOR I/O ERR LOADING PRECURSOR
         ICM   MSGREG,HEX8,LMSG13I   SET LENGTH OF MSG
         MVI   CTWAIT,PROLDERR    SET WAIT CODE
         B     ERRMSG1            EXIT WITH MSG AND CODE
GOTOPRO  DS    0H                 PRECURSOR EXIT
         XC    IOINTDEV(2),IOINTDEV ZERO TO SHOW HSR ENTRY     @ZA56338
         STM   SAVREG,RETCODE,GPRLOC   SAVE REGS
         NI    CTFLG1,HEXFF-CTERROR    TURN OFF NO ERR REC SW
PROEP    EQU   CCT+X'830'         PRO IS READ IN OVER LAST 2K  @ZA27964
         BAL   CREG,PROEP         CALL PRECURSOR               @ZA27964
         LM    SAVREG,CREG,GPRLOC   RELOAD 1-14
         LTR   RETCODE,RETCODE    ERROR OCCUR
         BZ    PGEISIN            NO GO TO PGE
         LA    MSGREG,MSG26I      SET ERROR LOADING PGE MSG
         ICM   MSGREG,HEX8,LMSG26I   GET MSG LENGTH
         B     ERRMSG1            GO ISSUE MSG AND WAIT
.GKM     ANOP
PGEISIN  DS    0H
         LA    RETREG,DUMPTITL    SET UP REG 13 FOR PGE
         USING DUMPTITL,RETREG                                 @ZA08992
         LA    RETCODE,CCT+X'1000'                             @ZA08992
         DROP  RETREG                                          @ZA08992
         BR    RETCODE            EXIT TO PGE
.CLEAN   ANOP                     CLEAN-UP CODE
         AIF   ('&TYPE2' EQ 'HI').ERMSG FOR TYPE HI SKIP CLEANUP
CLEANUP  DS    0H                 PREPARE TO UNLOAD THE TAPE AND EXIT
         MVI   CTWAIT,X'00'       SET UP ZERO RETURN CODE
         B     TAPESW             REWIND THE TAPE
.*   MACRO SECTION 8                                           @ZA27964
.ERMSG   ANOP                     SET UP ERROR MSG PROCESSING
         EJECT
**********************************************************************
*                                                                    *
*  THIS ROUTINE OUTPUTS THE ERROR MESSAGES AND PLACES THE FUNCTION   *
*  INTO A WAIT STATE IF REQUIRED.  NORMAL PROCESSING ENDS HERE ALSO  *
*                                                                    *
**********************************************************************
         SPACE
ERRMSG   DS    0H                 WAIT CODE I/O ERROR MSG
         TM    CTFLG1,CTERREC     USER CTL ON CAT ERROR ?
         BNO   NOERREC            NO ERROR REC
         NI    CTFLG1,HEXFF-CTERREC   INDICATE ERROR
         BR    RETREG             RETURN TO CALLER
NOERREC  DS    0H
         MVI   CTWAIT,X'03'       SET UP A 4 WAIT STATE CODE
ERRMSG1  DS    0H                 ERROR MSG IS IN REGISTER 9
         SR    INREG,INREG        ZERO READ INPUT REG
         LR    OUTREG,MSGREG      SET UP OUTPUT MSG
         BAL   CREG,CONSOLE       GO OUTPUT THE MSG
         TM    CTLOWFLG,CTINIT    IS THIS INITIALIZATION
         BNZ   CANCEL               YES, REISSUE TAPE= MSG
         STC   RETCODE,LOCORE14   SAVE RET CODE TO PROCESS AFTER
*                                 THE TAPE HAS BEEN UNLOADED
TAPESW   DS    0H                 SET IF TAPE IS TO BE UNLOADED
         B     FLGCHECK           INITIALLY NO.  THIS IS CHANGED
*                                 TO A NOP
         AIF   ('&OUTPUT2'(1,1) EQ 'P').NOUNLD1 SKIP TPE CDE FOR PTR
         LH    IODEVREG,CTOUTAD   OBTAIN THE TAPE OUTPUT ADDR
         LA    CCWREG,WTMCMDF     SET UP THE REWIND-UNLOAD COMMD
         OI    CTFLG1,CTERROR   SET FLG TO PREVENT RECURSIVE
*                                 ERROR RECOVERY.  THIS ROUTINE WILL
*                                 IGNORE ERRORS WHEN REWINDING THE TAPE
         BAL   RETREG,DUMPSIO     GO ISSUE REWIND
         NI    CTFLG1,HEX3F     RESET ERROR FLAG
         MVI   TAPESW+1,HEXF0     RESTORE TAPESW INSTRUCTION
*                                 IF WE RECYCLE THROUGH THE CODE
*                                 ONCE AGAIN
.NOUNLD1 ANOP                     TERMINATION CK CODE
FLGCHECK DS    0H                 CHECK IF PGM ENDS OR CONTINUES
         CLI   LOCORE14,X'00'     FAILURE OUTPUTTING
*                                 THE CONSOLE ERROR MESSAGE?
ENDUP1   DS    0H                 ENDING PROCESSING
         BE    TESTWAIT           NO, GO OBTAIN TAPE ADDR AND START
*                                 OVER FROM THE TOP.  NOTE:  THIS
*                                 INSTRUCTION IS MODIFIED FOR FINAL
*                                 CLEAN-UP PROCESSING TO IGNORE A
*                                 CONSOLE ERROR
ENDUPA   DS    0H
         TM    CTFLG1,CTDEFO     HAVE WE USED THE DEFAULT DEVICE?
         BNO   CANCEL             NO, GO RETRY WITH ANOTHER DEVICE
         MVI   CTWAIT,X'03'       YES, SET UP I/O ERROR CODE
TESTWAIT DS    0H                 WAIT STATE INDICATED CHECK
         CLI   CTWAIT,X'00'       A ZERO WAIT STATE CODE?
ENDUP2   BE    CANCEL             YES, RESTART PROCESSING
*                                 NOTE:  CLEAN-UP PROCESSING WILL
*                                 MODIFY THIS INSTRUCTION TO A NOP
*                                 FOR NORMAL TERMINATION
         AIF   ('&IPL2'(1,1) EQ 'D').NOUNLD2 AGAIN, TPE NOT NEED
         CLC   CTOUTAD(2),CTINADDR UNLOADED IPL TAPE YET?
         BE    WAITSTAT           YES, GO LOAD WAIT PSW
         MVC   CTOUTAD(2),CTINADDR NO, RECYCLE THROUGH REWIND
*                                 UNLOAD  CODE TO DISMOUNT THE TAPE
         B     TAPESW+4           UNLOAD THE TAPE (SKIP PROCESSING
*                                 AT TAPESW SINCE THE NOP WAS
*                                 CHANGED THE FIRST TIME THROUGH
.NOUNLD2 ANOP                     WAIT STATE COND
         SPACE
**********************************************************************
*                                                                    *
*  THIS CODE LOADS A WAIT STATE PSW FOR PROGRAM TERMINATION          *
*                                                                    *
**********************************************************************
         SPACE
WAITSTAT DS    0H                 WAIT STATE CODE
         AIF   ('&OUTPUT2'(1,1) NE 'P').NOTPTR2                @Z40MI3F
         LH    IODEVREG,CTOUTAD   POINT TO PRINTER             @Z40MI3F
         LA    CCWREG,PTRCCW1     SKIP TO CHANNEL 1 CCW        @Z40MI3F
         MVI   PTRCCW1,HEX8B      ENSURE IMMEDIATE COMMAND     @Z40MI3F
         BAL   RETREG,DUMPSIO     ISSUE START I/O              @Z40MI3F
.NOTPTR2 ANOP                                                  @Z40MI3F
         MVC   HALTPSW+7(1),CTWAIT   SET UP CODE
         LPSW  HALTPSW            WAIT
.*   MACRO SECTION 9                                           @ZA27964
         AIF   ('&OUTPUT2'(1,1) EQ 'P').OUTCCWS FOR PTR SKIP LBL CHKS
         EJECT
**********************************************************************
*                                                                    *
*  THIS CODE PROVIDES LABEL VERIFICATION FOR TAPES.                  *
*  IF A TAPE IS STANDARD LABELLED, THE PROGRAM REJECTS IT AND        *
*  REQUESTS A MOUNT OF A NON-LABELLED TAPE.                          *
*                                                                    *
**********************************************************************
         SPACE
LBLCHECK DS    0H                 THE IPL ADDR IS COMPARED TO THE
*                                 OUTPUT ADDR, AND IF EQUAL THIS IS A
*                                 NL TAPE AND THE TAPE
*                                 LABEL VERIFICATION IS BYPASSED
LBLCK1A  DS    0H                 SET UP IF EOR CONDITION
         ST    RETREG,SAVERET1    SAVE RETREG ACROSS DUMPSIO
LBLALT   DS    0H
         MVI   TAPESW+1,NOP       SET TAPE SW TO UNLOAD TAPE
         LH    IODEVREG,CTOUTAD   OBTAIN THE OUTPUT TAPE ADDR
         LA    CCWREG,RWCMD       ISSUE REWIND FIRST TO POSITON TAPE
         BAL   RETREG,DUMPSIO     ISSUE COMMAND
         LA    CCWREG,TAPECCW     SET UP TO RESTORE MODETIC
         STCM  CCWREG,HEX7,MODETIC+1 RESTORE TO ORGINAL COND
         LA    CCWREG,MODE7TRK    SET UP MODESET FOR TAPE
READTAPE DS    0H                 READ THE VOL LABEL ON TAPE
         BAL   RETREG,DUMPSIO     GO ISSUE THE MODESET FOR THE TAPE
         MVI   LBLADDR,0          INVALIDATE LABEL AREA
         LA    CCWREG,VOLABEL     ISSUE READ FOR VOLUME LABEL
         OI    CTFLG1,CTERROR     SET UP TO IGNORE ERROR ON READ
         BAL   RETREG,DUMPSIO     THIS HANDLES A UNIT CHECK CAUSED
*                                 BY A TAPE MARK FOLLOWING A VOL LABEL
         TM    CTFLG1,CTERROR     DID AN ERROR OCCUR?
         BNO   ERRMSGL            YES, IGNORE AND GET ANOTHER TAPE
         NI    CTFLG1,HEXFF-CTERROR    RESET ERROR SWITCH
         CLC   LBLADDR(4),VOL1    DETERMINE IF A STANDARD LBL TAPE
         BE    ERRMSGL            YES, PRINT OUT AMD010I MSG AND UNLOAD
*                                 THE TAPE
         CLC   LBLADDR(4),ASCIILAB    IS THIS AN ASCII LBL TAPE?
         BNE   LBLCOND            NO, GET DUMP TITLE; TAPE IS NL
ERRMSGL  DS    0H                 ISSUE A REWIND UNLOAD FOR THE TAPE
*                                 THIS WILL ALLOW THE OPERATOR TO MOUNT
*                                 ANOTHER TAPE ON THE SAME UNIT
         LA    CCWREG,RWULDCMD    SET UP FOR REWIND-UNLOAD
         BAL   RETREG,DUMPSIO     GO ISSUE THE COMMAND
         LA    OUTREG,LBLERR1     SET UP LBL ERR MSG IF THE TAPE IS
*                                 TO BE REJECTED
         ICM   OUTREG,HEX8,LMSG21I SET UP FOR LBL ERR MSG
         XC    LBLADDR(4),LBLADDR CLEAR LABEL INPUT AREA      @ZA13019
         BAL   CREG,CONSOLE        ISSUE MSG
         L     CCWREG,LOWCORE1    OBTAIN CCW
         LTR   RETCODE,RETCODE    DID ERROR OCCUR
         BNZ   ENDUPA             GO LOAD WAIT STATE
CONEXIST DS    0H
         TM    CTFLG1,CTMORTPE    IS ENTRY FROM EOR
         BO    NRMLRTN            YES, NORMAL RETURN
         TM    CTLOWFLG,CTFP      IS THIS FP ENTRY .
         BO    FPTIOLP            ENTER INTV REQ LOOP
NRMLRTN  DS    0H
         LA    RETCODE,4          SET UP ERROR RETURN CODE
         L     RETREG,SAVERET1    RESTORE RETREG
         BR    RETREG             RETURN TO CALLER
LBLCOND  DS    0H
         LA    CCWREG,WRITRWD     ISSUE WRITE REWIND
         BAL   RETREG,DUMPSIO     GO ISSUE COMMAND
         NI    CTLOWFLG,HEXFF-CTFP   TURN OFF FP ENTRY BIT
         L     RETREG,SAVERET1    RESTORE RETREG
         L     CCWREG,LOWCORE1    RESTORE CCW
         SR    RETCODE,RETCODE    SET 0 RETURN CODE
         BR    RETREG             IF YES RETURN
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION OF CODE WILL OBTAIN AN ADDITIONAL TAPE VOLUME        *
*                                                                    *
**********************************************************************
         SPACE
MORTAPE  DS    0H                 FOR END OF REEL CONDITION
         ST    CREG,SAVERET2      SAVE RETREG ACROSS DUMPSIO
         OI    CTFLG1,CTERROR+CTMORTPE .SET UP MORE TAPE COND
         LA    CCWREG,WTMCMD      SET UP FOR REWIND-UNLOAD COMMAND
         BAL   RETREG,DUMPSIO     ISSUE COMMAND
         LA    CCWREG,RWULDCMD    WTM WILL BREAK CHAIN-ISSUE REWIND-ULD
         BAL   RETREG,DUMPSIO     ISSUE REWIND UNLOAD COMMAND
         SR    INREG,INREG        MSG ONLY FOR EOR
         LA    OUTREG,MSG04I      SET UP FOR END OF REEL MESSAGE
         ICM   OUTREG,HEX8,LMSG04I   SET UP MESSAGE LENGTH
         BAL   CREG,CONSOLE       ISSUE EOR MSG
         LTR   RETCODE,RETCODE    ERROR ON OUTPUT?
         BZ    MORTPLP            NO, WAIT FOR TAPE
         MVI   ENDUP1+1,HEXF0     SET UP UNCONDITIONAL BRANCH
         B     INTVWAIT           GO TO INTV REQ
MORTPLP  DS    0H
         LH    IODEVREG,CTOUTAD   RESTORE OUTPUT DEV ADDRESS
         AIF   ('&TYPE2' NE 'HI').FX19                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         B     *+8                                             @ZA56338
         B     MORTPLP                                         @ZA56338
         AGO   .PFX19                                          @ZA57190
.FX19    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        WAIT TIL TAPE MOUNTED
         BC    7,MORTPLP          LOOP UNTIL READY
.PFX19   ANOP                                                  @ZA56338
         NI    CTFLG1,HEXFF-CTERROR .TURN OFF E R SW
         BAL   RETREG,LBLCHECK    GO CHECK FOR LBL TPE
         LTR   RETCODE,RETCODE    ERROR ON TAPE
         BNZ   MORTPLP            YES, LOOP UNTIL READY
         L     CREG,SAVERET2      RESTORE CREG
         NI    CTFLG1,HEXFF-CTMORTPE .TURN OF EOR SW
         BR    CREG               RETURN TO CALLER
.OUTCCWS ANOP
.*   MACRO SECTION 10                                          @ZA27964
         EJECT
         AIF   ('&OUTPUT2'(1,1) EQ 'T').DAE037                 @ZA27964
         AIF   ('&IPL2'(1,1) NE 'T').PCCW SKIP TAPE CODE IF PTR
.DAE037  ANOP                                                  @ZA27964
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE TAPE CHANNEL PROGRAMS                   *
*                                                                    *
**********************************************************************
         SPACE
VOL1     DC    C'VOL1'            STANDARD VOLUME LABEL
ASCIILAB DC    XL4'564F4C31'      ASCII LABEL
MSG10I   DC    C'02I LBL ERR'     FOR STANDARD LABEL TAPES
LMSG1A   DC    XL1'9'             LENGTH OF THE MSG1A MSG
LBLERR1  EQU   MSG10I             STANDARD LABEL TAPE ERROR
MSG19A   DC    C'19A FILE PROTECTED'   FP MSG
LMSG19A  DC    XL1'12'            MSGLENGTH
MSG04I   DC    C'04A EOR'         END OF REEL ON TAPE
LMSG04I  DC    XL1'7'             SET UP LENGTH OF END OF REEL MSG
         SPACE
*  INITIALIZATION CCW'S
         SPACE
TAPERROR CCW   HEX27,SENSAREA,X'60',X'01' REPOSITION CCW
         CCW   HEX17,SENSAREA,X'60',X'01' ERG CCW
MODE7TRK CCW   HEX93,SENSAREA,X'60',X'01' MODESET CCW
MODE9TRK CCW   HEXC3,SENSAREA,X'60',X'01' MODESET CCW
MODE6250 CCW   HEXD3,SENSAREA,X'60',X'01' MODESET CCW          @ZA04267
MODETIC  CCW   X'08',TAPECCW,X'60',X'01' CONTROL CCW FOR DUMP
TAPECCW  CCW   HEX07,SENSAREA,HEX20,HEX09 REWIND CCW
VOLABEL  CCW   X'02',LBLADDR,HEX20,X'04' READ VOL LABEL
RWCMD    EQU   TAPECCW            SET UP REWIND CMD EQUATE
WRITRWD  CCW   WRITETPE,DUMPTITL,X'60',TITLEN         WRITE CMD
         CCW   HEX07,SENSAREA,HEX20,HEX09   REWIND
         SPACE
WTMCMDF  CCW   HEX1F,SENSAREA,X'60',X'01' WRITE TAPE MARK CMD
WTMCMD   CCW   HEX1F,SENSAREA,X'60',X'01' WRITE TAPE MARK CMD
RWULDCMD CCW   X'0F',SENSAREA,HEX20,X'01' REWIND UNLOAD COMMAND
TAPERET  EQU   MODETIC+1          SET FOR MODIFICATION OF TIC ADDR
REWIND   EQU   X'07'              REWIND TAPE CMD
REWINDUD EQU   X'0F'              REWIND UNLOAD COMMAND CODE
         SPACE
*  TAPE DUMP CHANNEL PROGRAMS
         SPACE
WRITHEAD CCW   X'01',DUMPRCD,HEXA0,8 HEADER RCD CCW
WRITECCW CCW   X'01',REALADDR,HEX20,DUMPLNGH DUMP RECORD CCW
WRITETPE EQU   X'01'                 WRITE COMMAND OP CODE
WRITDUMP EQU   WRITECCW           SET UP FOR LS DUMP
         AIF   ('&TYPE2' EQ 'LO').R1 IF LOW SKIP REAL STORAGE LOC
REALADDR EQU   DUMPRCD+8          WHERE REAL STORAGE ADDR IS LOCATED
.R1      ANOP                     TAPE COMMON CODE
         SPACE
*  TAPE ERROR CHANNEL PROGRAMS
         SPACE
TAPEBUS  CCW   HEX27,SENSAREA,X'60',X'01' REPOSITION CMD FOR BUS CK
BUSTIC   CCW   X'08',TAPECCW,X'60',X'01' .TIC CMD TO LINK TO USR PGM
TPEREAD  EQU   X'02'              TAPE READ CCW
TPEWRTE  EQU   X'01'              TAPE WRITE CMD
FSR      EQU   X'37'              FORWARD SPACE RECORD CMD
CDC      EQU   X'08'              CHAN DATA CHK FLAG CSW+5     @ZA27964
CCC      EQU   X'04'              CHAN CTL CHK FLAG CSW+5      @ZA27964
TAPEREP  CCW   X'27',SENSAREA,X'20',X'01' REPOSITION CMD       @ZA27964
.*   MACRO SECTION 11                                          @ZA27964
         AIF   ('&TYPE2' EQ 'LO').OPCCW IF TYPE IS LO SKIP TO CONSOLE
         AIF   ('&IPL2'(1,1) EQ 'D').OPCCW IF IPLED FROM DA SKIP TAPE
         EJECT
*  TAPE WORK CHANNEL PROGRAM
         SPACE
**********************************************************************
*                                                                    *
*  NOTE:  THE FOLLOWING CHANNEL PROGRAM HANDLES PROCESSING OF THE    *
*  WORK RECORD ON TAPE.  THE SAME CODE IS USED TO PROCESS            *
*  WORK RECORDS ON THE SAME OR SEPARATE TAPE DEVICES FROM THE ONE    *
*  WHICH WAS IPLED.  THE CHANNEL PROGRAM DOES THE FOLLOWING:         *
*  1.  WRITE A TAPE MARK ON THE TAPE FROM WHICH THE PGM WAS IPLED.   *
*      THIS ENABLES US TO REMEMBER WHERE WE LAST WROTE ON THE TAPE   *
*  2.  REWIND THE TAPE TO LOAD POINT.  THIS POSITIONS US AT THE START*
*      OF THE TAPE (I.E. AT THE IPL1 RECORD ON THE TAPE )            *
*  3.  FORWARD SPACE BLOCK (TWICE).  THIS WILL POSITION US PASS THE  *
*      IPL1 AND IPL2 PLUS PROGRAM TEXT CODE.  NOTE THAT THIS POINTS  *
*      THE PROGRAM AT THE WORK RECORD.                               *
*  4.  READ THE WORK RECORD INTO STORAGE AT LOCATION X'1000'.        *
*  5.  FORWARD SPACE FILE.  THIS WILL POSITION THE PROGRAM JUST      *
*      BEYOND THE TAPE MARK WHICH WAS WRITTEN IN (1) ABOVE.          *
*  6.  BACK SPACE RECORD.  THIS WILL POSITION THE PROGRAM JUST BEFORE*
*      THE TAPE MARK TO ALLOW THE DUMP TO BE CONTINUED               *
*                                                                    *
**********************************************************************
         SPACE
WORKCCW  CCW   HEX1F,SENSAREA,X'60',X'01' WRITE TAPE MARK CMD
         CCW   HEX07,SENSAREA,X'60',X'01' REWIND COMMAND
         CCW   HEX37,SENSAREA,X'60',X'01' FORWARD SPACE BLOCK
         CCW   HEX37,SENSAREA,X'60',X'01' FORWARD SPACE BLOCK
TAPEWK1  CCW   X'02',WORKAREA,X'60',TAPEWREC READ PAST WORK RECORD
TAPEWK2  CCW   X'02',WORKAREA,HEX70,TAPEWREC READ PAST WORK RECORD
         CCW   HEX3F,SENSAREA,X'60',X'01' FORWARD SPACE FILE
         CCW   HEX27,SENSAREA,HEX20,X'01' BACK SPACE RECORD
         AGO   .OPCCW             SET UP OPERATORS CONSOLE
.PCCW    ANOP                     PRINTER OUTPUT DEVICE CMDS
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE PRINTER CHANNEL PROGRAMS FOR DUMP       *
*                                                                    *
**********************************************************************
         SPACE
PTRCCW1  CCW   HEX8B,SENSAREA,HEX20,X'01' SKIP TO CHAN CMD
PTRCCW2  CCW   HEX11,OUTLINE,HEX20,120  PTR WRITE COMMAND
INITPCCW CCW   HEX37,OUTLINE,HEX20,X'01' INITIALIZE 3800       @Z40MI3F
RELCCW   CCW   HEX24,0,HEX30,136  SENSE ERROR LOG FULL         @Z40MI3F
PTRCHK   DC    XL4'020001FF'      PRINTER RETRY BLOCK
.OPCCW   ANOP                     OPERATORS CONSOLE CCW'S
H8       DC    H'8'               USED FOR ERROR RECOVERY ADJ OF CCW
TAPESENS CCW   X'04',SENSAREA,HEX20,X'02' SENSE CCW
TABLE    DC    C'0123456789ABCDEF'   TABLE TO TRANSLATE CSW  @ZA24157
MSG14I   DC    C'14A INTV REQ XXX DEV' INTERVENTION REQUIRED MSG
LMSG14I  DC    XL1'10'            SET UP LENGTH OF INTV MSG
*                                 FOR CATASTROPHIC ERROR     @ZA24157
MSG03I   DC  C'03I I/O ERROR ON DDD CSW= XXXXXXXXXXXXXXXX '  @ZA24157
LMSG03I  DC    XL1'2B'            LENGTH OF MESSAGE MSG03I   @ZA24157
         ORG   *-18               REPOSITION BACK INTO THE CSW= PART   X
                                  OF THE MESSAGE.              @ZA56338
WORK1    DS    F                  USE THAT AREA AS A WORK AAREA FOR    X
                                  UNPACKING THE DDD PART OF THE        X
                                  MESSAGE.                     @ZA56338
         ORG
         SPACE 1                                               @ZA56338
MSG26I   DC    C'26I ERR LOADING PAGEDUMP'
LMSG26I  DC    XL1'18'            MSG LENGTH
         AIF   ('&IPL2'(1,1) EQ 'T').PGELOC                   @YM04418
         AIF   ('&TYPE2' EQ 'LO').PGELOC                      @YM04418
LMSG13I  DC    XL1'19'          LENGTH OF MSG 13I             @YM04418
MSG13I   DC    C'13I ERR LOADING PRECURSOR' I/O ERROR         @YM04418
.PGELOC  ANOP                                                 @YM04418
         AIF ('&TYPE2' EQ 'HI').FX32                           @ZA67833
         AIF ('&CONSOLE' NE 'C').FX31                          @ZA67833
.FX32    ANOP                                                  @ZA67833
         EJECT                                                 @ZA56338
***********************************************************************
*                                                                     *
* THIS SUBROUTINE IS USED TO WAIT FOR A DEVICE TO BECOME NOT BUSY.    *
* THE RETURN ADDRESS IS ASSUMED TO BE IN TIOREG.                      *
* FOR DEVICE AVAILABLE AND DEVICE NOT OPERATIONAL THIS ROUTINE WILL   *
* RETURN TO THE ADDRESS IN TIOREG AND THE CONDITION CODE FROM THE TIO *
* WILL STILL REMAIN. FOR THE CSW STORED CONDITION THIS WILL RETURN TO *
* THE ADDRESS IN TIOREG PLUS 4 AND THE CONDITION CODE WILL NOT BE     *
* VALID.                                                              *
*                                                                     *
***********************************************************************
TIOLOOP  DS    0H                                              @ZA56338
         MVC   FLCINPSW,IONEWPSW  SET UP I/O INTERRUPT HANDLER @ZA56338
TIOLOOP1 DS    0H                                              @ZA56338
         XC    CSW,CSW            CLEAR OLD CSW STATUS         @ZA56338
         TIO   0(IODEVREG)        TRY TO GET TO THE DEVICE     @ZA56338
         BCR   9,TIOREG           RETURN DIRECTLY FOR DEVICE AVAILABLE X
                                  OR NOT OPERATIONAL           @ZA56338
         BC    4,4(TIOREG)        RETURN AT +4 FOR CSW STORED  @ZA56338
CUBUSY   STOSM PSWBITS,X'02'      SAVE THE SYSTEM MASK AND ENABLE FOR  X
                                  I/O IF TIO INDICATED BUSY    @ZA67833
         SSM   PSWBITS            RESTORE THE SYSTEM MASK IF NO        X
                                  INTERRUPT OCCURED.           @ZA56338
         B     TIOLOOP1           LOOP UNTIL NOT BUSY          @ZA56338
         SPACE 1                                               @ZA56338
IOINTRPT DS    0H                 I/O INTERRUPT HANDLER        @ZA56338
         CH    IODEVREG,IOINTDEV  WAS THE INTERRUPT FROM THE DEVICE    X
                                  WE ARE INTERRESTED IN?       @ZA56338
         BNE   TIOLOOP1           NO, FORGET IT.               @ZA56338
         B     4(TIOREG)          YES, RETURN AT +4 TO INDICATE CSW    X
                                  STORED.                      @ZA56338
IONEWPSW DS    0XL8                                            @ZA56338
PSWBITS  DC    XL1'00'            SYSTEM MASK                  @ZA56338
         DC    XL4'0C000000'      EC AND MACH CHK              @ZA56338
         DC    AL3(IOINTRPT)                                   @ZA56338
.FX31    ANOP                                                  @ZA56338
**-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
*
* CODE PRIOR TO THIS MUST BE CONTAINED BETWEEN ADDRESSES
* X'7000' AND X'77FF'. THEREFORE THE ADDRESS OF THE NEXT BYTE
* MUST BE LESS THAN OR EQUAL TO X'7800'.
*
**-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
         SPACE 3                                               @ZA56338
MSG21I   DC    C'02I CMD ERR'     FOR INVALID DEVICE ADDRESS   @ZA56338
LMSG21I  DC    XL1'B'             LENGTH OF MSG21I             @ZA56338
         AIF   ('&IPL2'(1,1) NE 'D').TCCW
         SPACE
**********************************************************************
*                                                                    *
*  THESE CCWS READ IN THE WORK RECORD FROM DA                        *
*                                                                    *
**********************************************************************
         SPACE
SEEKWK   CCW   SEEKCMD,CTCCHHR,X'60',6
SRCHWK   CCW   SRCHCMD,CTCCHHR+2,X'60',5
TICWK    CCW   TICMD,SRCHWK,X'60',1
READWK   CCW   DAREAD,WORKAREA+X'800',X'60',REALNGTH
         CCW   DAREAD,WORKAREA+X'800',HEX70,REALNGTH
         CCW   DAREAD,WORKAREA,HEX20,REALNGTH
SEEKCMD  EQU   X'07'               SEEK CMD CODE
SRCHCMD  EQU   X'31'               SEARCH CMD CODE
.TCCW    ANOP                     TAPE CODE DEF
         EJECT                                                 @ZA56338
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE CODE TO CHECK FOR AN ALTERNATE CONSOLE  *
*                                                                    *
**********************************************************************
         DS    0F                                              @ZA56338
ALCONCTL DC    XL4'07000040'                                   @ZA56338
ALTCONCK DS    0H                                              @ZA56338
         TM    CTFLG2,CTALTCON     CHECK IF USING ALT CON      @ZA59486
         BCR   1,CREG              RETURN IF IN USE            @ZA59486
         MVC   DUMPTITL(40),EXTOLD   SAVE EXT OLD PSW          @ZA56338
         MVC   DUMPTITL+40(40),EXTNEW .SAVE IO OLD PSW         @ZA56338
         MVC   EXTNEW(8),ALTEXPSW    LOAD ALT CONSOLE EXT NEW  @ZA56338
         MVC   FLCINPSW,ALTIOPSW LOAD ALT CONSOLE IO NEW       @ZA56338
ALTCONWT DS    0H                                              @ZA56338
         LCTL  0,0,ALCONCTL       LOAD CONTROL REG 0           @ZA56338
         LPSW  ALTPSW             WAIT                         @ZA56338
IOINT    DS    0H                                              @ZA56338
         TM    CSW+4,HEX80        CHECK FOR ATTN INT           @ZA56338
         BZ    ALTCONWT           NOT ATTN RELOAD PSW          @ZA56338
         MVC   CONADDRX,IOINTDEV  CHANGE CONSOLE ADDRESS       @ZA57190
EXTINT   DS    0H                                              @ZA56338
         MVC   EXTOLD(40),DUMPTITL    RESTORE EXT OLD          @ZA56338
         MVC   EXTNEW(40),DUMPTITL+40   I/O OLD                @ZA56338
         OI    CTFLG2,CTALTCON    TURN ON ALT CON SW           @ZA56338
         B     CONSOLE                                         @ZA56338
.*   MACRO SECTION 12                                          @ZA27964
         EJECT
**********************************************************************
*                                                                    *
*  REAL DUMP ENTRY POINT.  THIS CODE RECEIVES CONTROL AFTER THE      *
*  AMDSADMP PROGRAM HAS BEEN IPLED, THE WORK RECORD HAS BEEN WRITTEN *
*  OUT TO A TAPE OR DIRECT ACCESS DEVICE, AND THE REAL DUMP PROGRAM  *
*  PROGRAM HAS BEEN READ INTO LOCATION X'7000'                       *
*                                                                    *
**********************************************************************
         SPACE
ENTRY    DS    0H                 MAIN AMDSADMP ENTRY POINT.THIS
*                                 RECEIVES CONTROL FROM INIT IPL
         AIF   ('&IPL2'(1,1) EQ 'D').BEGIN SKIP FOR HI DA
.STATUS  ANOP
         STM   BASEREG,RETREG,LOWCORE1 .STORE REG 12&13 IN LOC 8
         LA    BASEREG,7           SET UP ADDRESSABILITY
         SLL   BASEREG,12          FOR DUMP ROUTINE
         STM   SAVREG,RETCODE,DUMPTITL .STORE 0-15 IN TITLE AREA
         MVC   CTINADDR(2),IOADDR SAVE THE DEVICE ADDRESS FROM
         MVC   DUMPTITL+48(8),LOWCORE1    MOVE 12&13 IN
         CLC   DUMPTITL(64),STSTGPRS .COMP WITH ST ST REGS
         BE    SAVECSW            STORE STATUS WAS DONE
         OI    CTFLG2,CTNOSTAT    TURN ON CTNOSTAT
         MVC   STSTGPRS(64),DUMPTITL .MOVE TITLE REGS IN
*                                  WHICH THE PGM WAS IPLED
.BEGIN   ANOP
         SPACE
**********************************************************************
*                                                                    *
*  INITIALIZATION TO SAVE THE CURRENT CSW AND CAW AT DUMP TIME       *
*                                                                    *
**********************************************************************
         SPACE
SAVECSW  DS    0H
*                                 AND THE CAW IN THE OUTPUT DUMP
*                                 HEADER RECORD
         MVC   DUMPCSW(12),CSW    SAVE THE CSW FROM LOC X'40'
*                                 AND THE CAW FROM LOC X'48'
         AIF   ('&TYPE2' EQ 'LO').NOTOD FOR TYPE = LO DO NOT GIVE TOD
         STCK  DUMPTIME           OBTAIN TOD AND STORE IN HEADER RCD
         BC    8,CANCEL           IF VALID TOD, SKIP ZEROING TOD AREA
         XC    DUMPTIME(8),DUMPTIME   INVALID, SET TOD = 0
.NOTOD   ANOP                     SET UP FOR DEVICE ADDRESS
         EJECT
**********************************************************************
*                                                                    *
*  SET UP TO WRITE MSG AMD001A TAPE= (OR PTR=) MSG TO CONSOLE AND TO*
*  PROCESS THE OPERATOR'S REPLY.                             @ZA27964*
*                                                                    *
**********************************************************************
         SPACE
CANCEL   DS    0H                 THIS IS THE RETRY AREA
*                                 IF AN ERROR OCCURS
*                                 THAT CAN BE RECOVERED.  A RETURN
*                                 IS MADE TO HERE.  THE CODE IS
*                                 REUSEABLE FROM HERE ON.
         MVI   TAPESW+1,HEXF0     RESET BRANCH INST
         LA    WORKREG1,CANCEL    SET UP FOR PSW RESTART
         ST    WORKREG1,4         WITH ADDR OF CANCEL
         NI    CTFLG1,X'00'       RESET FLAGS
         NI    CTFLG2,X'00'+CTNOSTAT RESET FLAGS WITH ONE EXCEPTION
         NI    CTLOWFLG,HEXFF-CTINIT TURN OF INIT SWITCH
         LA    MSGREG,CONSCODE    SET UP FOR MSG AMD002I CMD ERR
*                                 IF REQUIRED LATER
         ICM   MSGREG,HEX8,LMSG21I SET UP LENGTH OF CMD ERR MSG
         XC    CTEBCOPR(3),CTEBCOPR ZERO OUT THE COMM AREA
         MVI   CTWAIT,X'00'       SET UP FOR NORMAL COMPLETION
*                                 THIS IS DONE FOR REENTRY
         LA    OUTREG,MSG1A       OBTAIN MSG AMD001A ADDRESS
         ICM   OUTREG,HEX8,LMSG1A OBTAIN LENGTH OF MSG AMD001A
         LA    INREG,CTEBCOPR     OBTAIN THE OUTPUT DEVICE AREA
         ICM   INREG,HEX8,L3      SPECIFY DATA LENGTH OF 3 BYTE DEV
         BAL   CREG,CONSOLE       GO WRITE/READ FOR MSG AMD001A
         LTR   RETCODE,RETCODE    CHECK FOR AN I/O ERROR
         BNZ   DEFAULT            WRITE ERROR, SKIP CONSOLE PROCESSING
         OI    CTLOWFLG,CTINIT      TURN ON INITIALIZATION SW
         AIF   ('&CONSOLE' EQ 'B').CBLNK1 FOR 3066 BUFFER IS BLANK
         CLC   CTEBCOPR(3),CTERBDA EOB SPECIFIED?
*                                         NOTE: CTERBDA IS
*                                         ZERO UNTIL CLEANUP
*                                         PROCESSING
         AGO   .CBLNK2            SKIP CHECK FOR 3066
.CBLNK1  ANOP                     3066 BUFFER DEFAULT PROCESSING
         CLC   CTEBCOPR(3),HEADLNGH EOB SPECIFIED? NOTE HEADLNGH
*                                   IS BLANKS TIL AFTER TITLE PROCESS
.CBLNK2  ANOP                     NORMAL PROCESSING RESUMED
         BNE   CONVERT            YES, ASSUME DEFAULT
DEFAULT  DS    0H                 SET UP DEFAULT DEV ADDR
         OI    CTFLG1,CTDEFO      INDICATE BEING USED
         MVC   CTEBCOPR(3),CTEBCOPD      SET UP FOR CONVERT
         EJECT
**********************************************************************
*                                                                    *
*  CONVERT THE CHARACTER DEVICE ADDRESS TO BINARY                    *
         AIF   ('&TYPE2' EQ 'HI').DAE001                       @ZA27964
*  THIS IS ALSO USED AS SUBROUTINE TO CONVERT THE ADDR=        @ZA27964
.DAE001  ANOP                                                  @ZA27964
*                                                                    *
**********************************************************************
         SPACE
CONVERT  DS    0H                 THIS ROUTINE CONVERTS UPPER AND
*                                 LOWER CASE LETTERS TO BINARY.  IT
*                                 USES REGISTERS 5, 6, 7, AND 8
*                                 AS WORK REGISTERS
         LA    STORWORK,CTOUTAD   WHERE TO PLACE CONVERTED ADDR
         LA    WORKREG1,3         OBTAIN NUMBER OF DIGITS TO
*                                 CONVERT
NEXTDIG  DS    0H                 THIS IS A LOOP TO CONVERT EACH
*                                 DIGIT
         LA    WORKREG4,CTEBCOPR-1(WORKREG1) POINT TO THE DIGIT OR
*                                           CHARACTER TO BE CONVERTED
ADDRCVT  DS    0H
         IC    WORKREG2,0(WORKREG4) OBTAIN DIGIT/CHARACTER WHICH
*                                    IS TO BE CONVERTED
         TM    0(WORKREG4),DECIMAL TEST FOR A DECIMAL DIGIT (X'F0')
         BO    DIGITOK            IT IS A NUMBER; SAVE THE DIGIT
         OI    0(WORKREG4),CAPS   MAKE REPLY ALL CAPITAL LETTERS
         CLI   0(WORKREG4),A      IS THE CHARACTER GREATER THAN OR
*                                 EQUAL TO AN "A"?
         BL    CNVTERR            NO,EXIT TO WRITE CMD ERR MSG AND TO
*                                 REWRITE AMD001A
         CLI   0(WORKREG4),F      IS THE CHARACTER LESS THAN OR
*                                 EQUAL TO AN "F"?
         BH    CNVTERR            NO,EXIT TO WRITE CMD ERR MSG AND TO
*                                 REWRITE MSG AMD001A
         AH    WORKREG2,KNINE     ADD NINE TO LETER TO CONVERT THE
*                                 LAST FOUR BITS TO A HEXDECIAML ADDR
DIGITOK  DS    0H                 THE BINARY ADDRESS WILL BE
*                                 ACCUMULATED IN WORKREG3
         SRDL  WORKREG2,4         SHIFT THE LOW ORDER FOUR BITS
*                                 (WITH THE DEVICE ADDR) INTO WORKREG3
         BCTR  WORKREG4,0         DECREMENT POINTER
         BCT   WORKREG1,ADDRCVT   LOOP UNTIL ALL DIGITS ARE CONVERTED
         AIF   ('&TYPE2' EQ 'HI').NOADDR
         TM    SWITCH,ADDCNVRT    ENTRY FOR ADDR= CNVT?
         BNO   CONTCVT            NO NORMAL CVT ERROR PROCESS
SHIFTRL  SRL   WORKREG3,8         SHIFT W/ LNGTH MOD BY STC INST
         STCM  WORKREG3,HEX7,0(STORWORK)   STORE ADDR
         SR    RETCODE,RETCODE    ZERO OUT RETURN CODE
         BR    RETREG             RETURN TO CALLER
         SPACE 5                                               @ZA27964
CNVTERR  DS    0H
         TM    SWITCH,ADDCNVRT    ENTRY FROM ADDR=?
         BNO   ERRMSG1            NO,USE NORMAL EXIT
         LA    RETCODE,4          SET UP ERROR RETURN CODE
         BR    RETREG             RETURN TO CALLER
         EJECT                                                 @ZA27964
         AGO   .CONTCVT
.NOADDR  ANOP
         B     CONTCVT            CONTINUE CONVERT
CNVTERR  DS    0H
         B     ERRMSG1
.CONTCVT ANOP
***********************************************************************
*
*  TEST TO SEE IF OUTPUT DEV IS OK                             @ZA27964
*
***********************************************************************
CONTCVT  DS    0H
         SRL   WORKREG3,4         SHIFT THE DEVICE ADDR TO HAVE
*                                 IN THE FORM OF 0DDD0000
         STCM  WORKREG3,HEXC,0(STORWORK) STORE THE 0DDD
         AIF   ('&TYPE2' EQ 'LO').NOINOUT
         CLC   CTOUTAD(2),CTINADDR    IS OUTPUT = IPL
         BE    ERRMSG1            GO ISSUE ERROR MSG
.NOINOUT ANOP
         LH    IODEVREG,CTOUTAD   SET UP TO VERIFY DEVICE EXISTS
         AIF   ('&TYPE2' NE 'HI').FX27                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         AGO   .PFX27                                          @ZA56338
.FX27    ANOP                                                  @ZA56338
         TIO   0(IODEVREG)        DEVICE THERE?
.PFX27   ANOP                                                  @ZA56338
         BC    1,ERRMSG1          NO, EXIT AND RETRY
         AIF   ('&OUTPUT2'(1,1) EQ 'P').TITLE
         BAL   RETREG,LBLCHECK    CHECK FOR LBL TAPE
         LTR   RETCODE,RETCODE    ERROR OCCUR
         BNZ   CANCEL             YES,REISSUE TAPE = MSG
         NI    CTLOWFLG,HEXFF-CTINIT TURN OFF INIT SW
         AGO   .CTINIT
.TITLE   ANOP                     TITLE PROCESSING CODE
         NI    CTLOWFLG,HEXFF-CTINIT TURN OFF INIT SWITCH      @Z40MI3F
         OI    CTFLG1,CTERROR     ALL CMD REJ ERROR TO G       @Z40MI3F
*                                 FOR 3800 PRINTER, IGNORE     @Z40MI3F
*                                 COMMAND REJECT               @Z40MI3F
         LA    CCWREG,INITPCCW    INITIALIZE PRINTER CCW       @Z40MI3F
         BAL   RETREG,DUMPSIO     ISSUE START I/O              @Z40MI3F
         NI    CTFLG1,HEX7F       RESET I/O ERROR FLAG         @Z40MI3F
.CTINIT  ANOP
         EJECT
**********************************************************************
*                                                                    *
*  PROMPT FOR THE TITLE AND READ IT INTO THE BUFFER FOR THE FIRST    *
*  RECORD, AND INITIALIZES FOR THE REAL DUMP.                        *
*                                                                    *
**********************************************************************
         SPACE
GETITLE  DS    0H                 THIS CODE INITIALIZES A TITLE IF THE
*                                 CONSOLE IS AVAILABLE
         LA    OUTREG,MSG11D      SET UP TO MSG AMD011D
         ICM   OUTREG,HEX8,LMSG11D OBTAIN LNGTH OF MSG AMD011D
         LA    INREG,DUMPTITL     OVERLAY THE 1ST PART OF AMDSADMP
*                                 CODE WITH THE 100 BYTE TITLE
         ICM   INREG,HEX8,L100    SPECIFY TITLE LENGTH OF 100 BYTES
         MVI   DUMPTITL,BLANK     SET UP TO BLNK AREA
         MVC   DUMPTITL+1(99),DUMPTITL .AND BLANK IT OUT
         BAL   CREG,CONSOLE       GO WRITE/READ MSG AMD011D
         LA    WORKREG1,100       SET UP TO CONVERT TITLE TO UPPER CASE
TITLOOP  DS    0H                 LOOP TO CONVERT TITLE
         LA    WORKREG2,DUMPTITL-1 SET UP TO TITLE DATA AREA
         AR    WORKREG2,WORKREG1 .INCREMENT TO AREA TO CONVERT
         OI    0(WORKREG2),BLANK .CONVERT TO UPPER CASE
         BCT   WORKREG1,TITLOOP   CONVERT FULL TITLE BUFFER
DUMPHEAD DS    0H                 THIS CODE VIA THE INITIALIZED CCW
*                                 DUMPS THE HEADER RECORD
.*   MACRO SECTION 13                                          @ZA27964
         EJECT
         AIF   ('&TYPE2' EQ 'HI').HIDUMP
**********************************************************************
*                                                                    *
*  THIS CODE PRODUCES THE LOW SPEED TITLE RECORD.  LOW SPEED DUMP    *
*  PRODUCES A HEADER RECORD CONSISTING OF THE TITLE, CURRENT PSW     *
*  GENERAL PURPOSE REGISTERS, CONTROL REGISTER, AND FLOATING POINT   *
*  REGISTERS.  THE DUMP PORCESSING CODE IS THEN ENTERED.  A COMMON   *
*  FORMAT ROUTINE IS USED TO CONVERT ALL DATA TO PRINTABLE EBCDIC    *
*                                                                    *
**********************************************************************
         SPACE
         SR    STORADDR,STORADDR .SET UP STORAGE ADDR TO LOCATION ZERO
         AIF   ('&OUTPUT2'(1,1) EQ 'P').PTRCCW SET UP PTR CCW IF PTR
         LA    CCWREG,WRITDUMP    CHANNEL PROGRAM TO OUTPUT DUMP
         AGO   .IO1               SKIP TAPE CONTROL
.PTRCCW  ANOP                     PRINTER CONTROL CHAR
         LA    CCWREG,PTRCCW1     SET UP PTR CCW.EJECT TO NEW PAGE
*                                 TO PRINT OUT A TITLE HEADER LINE
         BAL   CREG,LSIO          SET UP TO WRITE SPACE
         LA    CCWREG,PTRCCW2     WRITE MSG
.IO1     ANOP                     RESUME TAPE COMMON CODE
         BAL   CREG,LSIO          GO TO COMMON LOW SPEED I/O ROUTINE
         LA    WORKREG1,TAPESW    SET UP FOR NO PSW RESTART
         ST    WORKREG1,4         FROM THIS POINT ON
         LCTL  0,1,CRLOC          LOAD CR O AND 1
         B    STAP                TO STORE CPU INFO FOR OTHER CPUS
*                                 THIS RETURNS TO PSWFRMAT     @ZA27964
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION OUTPUTS THE CURRENT PSW FOR THE DUMP HEADER INFO     *
*                                                                    *
**********************************************************************
         SPACE
PSWFRMAT DS    0H
         MVC   OUTLINE(11),PSWMSG      GET THE CURRENT PGW MSG
         L     STORWORK,CURRPSW   OBTAIN CURRENT PSW FOR STOR
         LA    LINEREG,OUTDATA+9  SET UP THE LINE FOR CONVERSION
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO2 IF TAPE SKIP PTR CHAN CMD
         MVI   PTRCCW1,SPACE1     SET UP 1 LINE SPACE FOR PROT KEY
         LA    CCWREG,PTRCCW2     SET UP TO PRINT A LINE
         AGO   .IO3               SKIP TAPE CONTROL CHAR
.IO2     ANOP                     TAPE CONTROL FOR PROT KEY
         MVI   OUTCTL,SKIPSP1     SPACE PRIOR TO PRINTING
.IO3     ANOP                     COMMON TAPE/PTR I/O
         BAL   CREG,ADDRFORM      CONVERT PSW TO PRINTABLE CHAR
         L     STORWORK,CURRPSW+4 BUMP UP TO 2ND HALF OF CURR PSW
         LA    LINEREG,OUTDATA+18 SET UP FOR 2ND HALF OF PWS
         BAL   CREG,ADDRFORM      CONVERT 2ND HALF OF PSW
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION OUTPUTS THE PREFIX REGISTER                          *
*                                                                    *
**********************************************************************
         SPACE
         L    STORWORK,PRADDR     MOVE IN PREFIX REG ADDRESS
         MVC   OUTDATA+37(2),PRMSG .SET UP PRE REG MSG
         LA    LINEREG,OUTDATA+46 .SET UP FOR LOC OF PRE REG
         BAL   CREG,ADDRFORM      CONVERT THE REGISTER
         BAL   CREG,LSIO          PERFORM I/O TO PRINT LINE
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION INITIALIZES THE OUTPUT LINE FOR STORAGE FORMATTING.  *
*  THE GENERAL PURPOSE REGISTERS ARE FORMATTED AND OUTPUTTED FIRST.  *
*                                                                    *
**********************************************************************
         SPACE
         MVI   OUTASK1,ASK        INITIALIZE * IN OUTPUT BUFFER
         MVI   OUTASK2,ASK        INITIALIZE * IN OUTPUT BUFFER
         LA    STORWORK,GPRLOC    SET UP WORK REG WITH GPR SAVE AREA
         MVC   OUTLINE(MSGHDLEN),FORMBUF BLANK OUT THE BUFFER
         BAL   RETREG,FORMAT      FORMAT THE GPR IN EBCDIC
         MVC   OUTLINE(6),GR07    HEADING IS GR 0-7
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO4 SKIP PTR CTL FOR TAPE
         MVI   PTRCCW2,HEX09      SET UP PTR CCW TO WRITE
*                                 THEN SPACE ONE AFTER PRINTING GPR
*                                 FROM 0-7
.IO4     ANOP                     OUTPUT FORMATTED LINE OF GR
         BAL   CREG,LSIO          OUTPUT FORMATTED LINE
         BAL   RETREG,FORMAT      NEXT GPR'S IN BUFFER ARE 8-F
         MVC   OUTLINE+3(3),GR8F     HEADING IS GR 8-F
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO5 IF TAPE SKIP PTR CTL
         MVI   PTRCCW2,HEX11      SET UP TO SPACE 2 AFTER
*                                 WRITING GPR 8-F
         AGO   .IO6               PTR SKIPS TAPE CTL
.IO5     ANOP                     TAPE CTL
         MVI   OUTCTL,HEX40       SET UP OUTCTL TO SPACE
*                                 PRIOR TO PRINTING GPR 8-F
.IO6     ANOP                     RESUME COMMON PROCESSING
         BAL   CREG,LSIO          OUTPUT FORMATTED REGS
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION INITIALIZES THE OUTPUT LINE FOR CONTROL REGS         *
*  THE CONTROL REGISTERS ARE FORMATTED AND OUTPUTTED NEXT            *
*                                                                    *
**********************************************************************
         SPACE
         BAL   RETREG,FORMAT      CONTROL REGISTERS ARE NEXT
         MVC   OUTLINE(6),CR07 IN BUFFER. MOVE IN HEADING
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO7 IF TAPE SKIP PTR CTL
         MVI   PTRCCW2,HEX09      SET UP TO SKIP A LINE
*                                 AFTER PRINTING CR 0-7
         AGO   .IO8               PTR SKIPS PTR CTL
.IO7     ANOP                     TAPE CTL
         MVI   OUTCTL,SKIPSP1     SET UP TO SKIP TWO LINES
*                                 PRIOR TO PRINTING CR 0-7
.IO8     ANOP                     COMMON PROCESSING
         BAL   CREG,LSIO          OUTPUT CONTROL REGS
         BAL   RETREG,FORMAT      CONT REGS 8-F REMAIN
         MVC   OUTLINE+3(3),CR8F USE SAME TITLE AS GR
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO9 TAPE SKIPS PTR CTL
         MVI   PTRCCW2,HEX11      SKIP TWO LINES AFTER PRINTING
*                                 THE CR 8-F
         AGO   .IO10              SKIP TAPE CTL
.IO9     ANOP                     TAPE CTL
         MVI   OUTCTL,HEX40       SKIP ONE LINE PRIOR TO PRINTING
*                                 THE CR 8-F
.IO10    ANOP                     COMMON CODE AGAIN
         BAL   CREG,LSIO          OUTPUT CR 8-F
         SPACE
**********************************************************************
*                                                                    *
*  THIS SECTION INITIALIZES THE OUTPUT LINE FOR F. P. REGISTERS      *
*  THE FLOATING POINT REGISTERS ARE FORMATTED AND OUTPUTTED NEXT     *
*                                                                    *
**********************************************************************
         SPACE
         LA    STORWORK,FPLOC1    PICKUP F.P. REGISTERS
         MVC   OUTLINE(6),FR02    F.P. HEADING FOR REGS 0 & 2
         BAL   CREG,FPFORMAT      GO TO F.P. FORMAT RTN
         AIF   ('&OUTPUT2'(1,1) EQ 'T').IO11 TAPE SKIPS PTR CTL
         MVI   PTRCCW2,HEX09      SET UP TO SKIP A LINE AFTER
*                                 PRINTING FPR 0 AND 2
         AGO   .IO12              PTR SKIPS TAPE CTL
.IO11    ANOP                     TAPE CTL
         MVI   OUTCTL,SKIPSP1     SET UP TO SKIP TWO LINES
*                                 PRIOR TO PRINTING FPR 0 AND 2
.IO12    ANOP                     COMMON PROCESSING
         BAL   CREG,LSIO          OUTPUT F.P. REGS 0 & 2
         LA    STORWORK,FPLOC2    PICK UP F.P. REGS 4 & 6
         MVC   OUTLINE+3(3),FR46 .PICKUP HEADING FOR F.P.4&6
         BAL   CREG,FPFORMAT      FORMAT F.P. REGS
         AIF   ('&OUTPUT2'(1,1) EQ 'P').IO13 PTR SKIPS TAPE CTL
         MVI   OUTCTL,HEX40       SET UP TO SKIP ONE LINE
*                                 PRIOR TO PRINTING FPR 4 AND 6
         AGO   .IOI99
.IO13    ANOP                     COMMON PROCESSING AGAIN
         MVI   PTRCCW2,HEX11      SET UP TO SKIP A LINE
.IOI99   ANOP
         SPACE
*  NOTE:  THE CCW'S AT THIS POINT ARE SET UP FOR A NORMAL PRINTING   *
*         OF THE OUTPUT LINES TO PRINTER OR TO TAPE.                 *
         SPACE
         BAL   CREG,LSIO          OUTPUT F.P. REGS 4 & 6
         B     COMSTAP   RETURN TO STAP TO CHECK FOR ADDITIONAL CPUS
DUMPLOCR DS    0H
         AIF ('&OUTPUT2'(1,1) EQ 'T').IOI111
         MVI   PTRCCW2,HEX09      SET UP FOR NO LINE SKIP
.IOI111  ANOP
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION CHECKS FOR THE ADDR= PARAMETER FOR LO SPEED AND SETS *
*  UP THE ADDRESS RANGES TO BE DUMPED                                *
*                                                                    *
**********************************************************************
         SPACE
ADDRCHCK DS    0H
         NI    CTFLG2,HEXFF-CTVIRTR .ZERO CTVIRTR
         XC    CTADDRS(8),CTADDRS    ZERO ADDRESS RANGE
         LA    MSGREG,MSG21I      SET UP CMD ERR MSG
         ICM   MSGREG,HEX8,LMSG21I   AND LENGTH
         LA    OUTREG,MSG08A      SET UP ADDR= MSG
         ICM   OUTREG,HEX8,LMSG08A   AND LENGTH
         MVI   VIRTAREA,BLANK     SET UP TO BLANK OUT
         MVC   VIRTAREA+1(13),VIRTAREA   INPUT AREA
         LA    INREG,VIRTAREA     SET UP INPUT ADDR
         ICM   INREG,HEX8,L14     AND LENGTH
         BAL   CREG,CONSOLE       GO ISSUE MSG
         LTR   RETCODE,RETCODE    ERROR
         BNZ   DEFLTAD            YES,USE DEFAULT
         OI    VIRTAREA,CAPS      MAKE RESPONSE CAPS
         CLI   VIRTAREA,BLANK     END OF BLOCK
         BE    DEFLTAD            USE DEFAULT
         CLI   VIRTAREA,R         IS CHAR 1 AN R
         BE    CHEKADDR           YES SKIP V CHECK
         CLI   VIRTAREA,V         IS CHAR 1 V
         BNE   BADADDR            NO OTHER IS VALID
         OI    CTFLG2,CTVIRTR     SET UP VIRT SW
CHEKADDR DS    0H
         LA    STORADDR,VIRTAREA .SET ADDR OF FIELD
         CLI   7(STORADDR),COMMA   IS DELIMETER A COMMA
         BNE   BADADDR            NO, BAD ADDRESS
         NI    SWITCH,HEXFF-TIME2 .SET 1ST TIME SW
         LA    STORWORK,ADDAREA1 .WHERE TO PUT CVTED ADDR
         LA    WORKREG4,VIRTAREA+6 .SET ADDR TO CONVERT
COMCNVRT DS    0H
         LA    WORKREG1,6         SET LENGTH FOR CONVERT
GOTOCVT  DS    0H
         OI    SWITCH,ADDCNVRT    SET UP INDICATE ADDR=
         BAL   RETREG,ADDRCVT     GO TO CONVERT
         NI    SWITCH,HEXFF-ADDCNVRT   TURN SW OFF
         LTR   RETCODE,RETCODE    BAD ADDR
         BNZ   BADADDR            YES ISSUE MSG
         TM    SWITCH,TIME2       IS THIS 2ND TIME
         BO    DONECVRT           YES CONVERT IS DONE
         LA    WORKREG4,13(STORADDR) .RESET POINTER
         LA    STORWORK,ADDAREA2 .GET SECOND INPUT AREA
         OI    SWITCH,TIME2       SET SECOND TIME SW
         B     COMCNVRT             GO TO CONVRT
DONECVRT DS    0H
         CLC   ADDAREA1(3),ADDAREA2    COMPARE ADDRS
         BH    BADADDR            ADDRESSES OK
ROUDNUP  DS    0H
         NC    CTADDRS+2(2),FOURKDWN    ROUND DOWN START RNGE
         L     WORKREG1,CTADDRE   GET END RANGE
         SRL   WORKREG1,12        GET RID OF LO 12 BITS
         LA    WORKREG1,1(WORKREG1) BUMP BY 4KBDY
         SLL   WORKREG1,12        GET INTO PROPER POS
         ST    WORKREG1,CTADDRE   STORE IT IN END RANGE
         TM    CTFLG2,CTVIRTR     VIRTUAL REQUEST
         BNO   SKIPVIRT           SKIP VIRT PROCESSING
         B     VIRTREQ            PROCESS VIRTUAL REQUEST
BADADDR  DS    0H
         LR    OUTREG,MSGREG      SET UP ERROR MSG
         SR    INREG,INREG        ZERO READ IN REG
         BAL   CREG,CONSOLE       ISSUE MSG
         LTR   RETCODE,RETCODE    ERROR OCCUR
         BZ    ADDRCHCK           NO, ISSUE ADDR= MSG AGAIN
DEFLTAD  DS    0H
         MVI   CTADDRE,MAXCORE    SET MAX RANGE TO X'01000000'
         TM    CTLOWFLG,CTVIRTD   IS DEFAULT VIRTUAL
         BNO   SKIPVIRT           SKIP VIRT PROCESS
         OI    CTFLG2,CTVIRTR      SET VIRT REQ FLG
         EJECT                                                 @ZA27964
**********************************************************************
*                                                                    *
*  THIS SECTION VALIDITY CHECKS CR1 FOR A VIRTUAL ADDRESS RANGE      *
*  FOR A VIRTUAL REQUEST IT ASSUMES THAT STORAGE FROM 0-8000 WAS
*  V=R. IF IT WAS NOT THEN THE DUMP REVERTS TO REAL ADDRESSES  @ZA27964
*                                                                    *
**********************************************************************
VIRTREQ  DS    0H
         LCTL  0,0,CR0INIT        LOAD CR 0
         PTLB
         MVC   PGMNEW(4),EOJSW    SET UP PGM CHK PSW
         TM    CTFLG2,CTNOSTAT    WAS STORE STAT DONE
         BO    ALTCR1             NO, BRANCH
         LA    LOOPCTR,ALTCR1     SET UP PGM CK ADDR
         ST    LOOPCTR,PGMNEW+4   STORE IN PGM NEW PSW
         LRA   LOOPCTR,0(CCTREG)  SET UP LOC 7000
         BC    7,ALTCR1           CR1 IS INVALID
         CR    LOOPCTR,CCTREG     CHECK FOR 1TO1 MAP
         BE    CR1VALID           CR1 IS VALID
ALTCR1   DS    0H
         LA    LOOPCTR,NOCR1      SET UP PGM CK ADDR
         ST    LOOPCTR,PGMNEW+4   STORE IN PGM NEW PSW
         LCTL  1,1,CR1ALOC        LOAD CR1 WITH ALT LOC
         PTLB                     PURGE BUFFER
         LRA   LOOPCTR,0(CCTREG)  GET 7000
         BC    7,NOCR1            BAD CTL REG
         CR    LOOPCTR,CCTREG     IS CR1 VALID
         BE    CR1VALID           YES BRANCH
NOCR1    DS    0H
         LA    OUTREG,MSG09I      SET CR1 INVALID MSG
         ICM   OUTREG,HEX8,LMSG09I .GET LENTGH OF MSG
         SR    INREG,INREG        ZERO READ MSG
         BAL   CREG,CONSOLE       ISSUE MSG
         LTR   RETCODE,RETCODE    DID ERROR OCCUR
         BZ    ADDRCHCK           NO REISSUE ADDR= MSG
*  IF CR1 IS BAD AND THE CONSOLE IS LOST DEFAULT TO ALL REAL   @ZA27964
         NI    CTFLG2,HEXFF-CTVIRTR   SET OFF VIRTUAL REQ
         XC    CTADDRS(8),CTADDRS .ZERO OUT RANGE
         MVI   CTADDRE,MAXCORE    SET END RANGE TO X'01000000'
         B     SKIPVIRT           BRANCH AROUND VIRT PROCESSING
CR1VALID DS    0H
         MVI    REQCHAR,V         SET UP FOR VIRT IDENTIFIER
         STOSM HALTPSW,X'04'      TURN ON DAT BIT  IN CURRENT PSW
         OI    EOJSW,X'04'        DAT ON IN WHAT WILL BECOME PGM NEW
         OI    MCHKNPSW,X'04'     SAME FOR  MCHK NEW PSW       @ZA27964
SKIPVIRT DS    0H
         MVC   PGMOLD(8),PGMSAVE .RESTORE PSW
         MVC   PGMNEW(8),PGMSAVE+8    RESTORE PSW
         L     STORADDR,CTADDRS   SET TO START RANGE
         LR    STORWORK,STORADDR .FOR BOTH REGS
         SPACE 2                                               @ZA27964
***********************************************************************
*
*  NOTE THE CODE BRANCHES AROUND THE FOLLOWING SUBROUTINES.    @ZA27964
*
***********************************************************************
         B     STORCOMP           SKIP PAST SOME SUBROUTINES   @ZA27964
         EJECT
**********************************************************************
*                                                                    *
*  THIS SUBROUTINE CONTAINS THE CODE TO FORMAT F.P. REGISTER
*                                                                    *
**********************************************************************
         SPACE
FPFORMAT DS    0H                 FLOATING POINT FORMAT RTN
         BAL   RETREG,FORMAT      GO FORMAT F.P. REGS
         MVI   OUTDATA+35,BLANK .BLANK OUT EXTRA CONVERTED CHAR
         MVC   OUTDATA+36(39),OUTDATA+35 AREA
         MVC   FORMBUF+17(15),OUTDATA+35 DONE SINCE F.P. USE 4 WDS
         BR    CREG               RETURN TO CALLER
         SPACE 6                                               @ZA27964
**********************************************************************
*                                                                    *
*  THIS SUBROUTINE CONTAINS THE CODE TO WRITE OUT A FORMATTED LINE   *
*                                                                    *
**********************************************************************
         SPACE
DUMPWRTE DS    0H                 CODE TO OUTPUT THE DUMP
LSIO     EQU   DUMPWRTE           LOW SPEED VERSION OF OUTPUT CODE
         ST    CREG,REGSAVE       SAVE RETURN REG OVER EOR
         ST    LINEREG,TEMPSAVE   SAVE LINEREG OVER I/O
         LH    IODEVREG,CTOUTAD   PICK UP OUTPUT DEVICE ADDR
OUTFORM1 DS    0H                 FOR CHAN 12 PROCESS(PTR ONLY)
         BAL   RETREG,DUMPSIO     OUTPUT FORMATTED LINE
         AIF   ('&OUTPUT2'(1,1) EQ 'P').LS1 IF PTR OUTPUT SKIP TAPE CHK
         TM    CSW+4,X'01'        UNIT EXCEPTION? END OF REEL
         BNO   TAPEGOT            YES, END OF TAPE REEL--GET ANOTHER
         BAL   CREG,MORTAPE       END OF REEL PROCESS
TAPEGOT  DS    0H                 EOR PROCESSING COMPLETED
         LA    CCWREG,WRITDUMP    IF EOR RESTORE CCW
         AGO   .TP100A            SET UP TAPE PROCESS
.LS1     ANOP                     COMMON PROCESSING AGAIN
         TM    CSW+4,X'04'        DEVICE END CONDITION?
         BO    LSIOK              YES, TEST FOR UNIT EXCEPTION
         MVC   LOWCORE2(2),CSW+2 .NO, SAVE THE CSW FOR USE IN RETRY
LIOLOOP  DS    0H                 WAIT FOR THE DEVICE END
         AIF   ('&TYPE2' NE 'HI').FX21                         @ZA56338
         BAL   TIOREG,TIOLOOP                                  @ZA56338
         AGO   .PFX21                                          @ZA56338
.FX21    ANOP                                                  @ZA57190
         TIO   0(IODEVREG)        ISSUE TIO FOR DEVICE END
         BC    3,LIOLOOP          BUSY--CONTINUE TIO
.PFX21   ANOP                                                  @ZA56338
         BC    8,LSIOK            DEVICE AVAILABLE-DO MORE I/O
         CLI   CSW+2,X'00'        CSW STORED-DEVICE END?
         BNE   CHECKERR           CSW IS OK
         MVC   CSW+2(2),LOWCORE2  RESTORE CCW FOR USE
SKIPCSW1 DS    0H                 CHECK ERROR CONDITIONS
         B     CHECKERR           CHECK ERRORS
LSIOK    DS    0H                 CHECK UNIT EXCEPTION
REST100A DS    0H                 RESTORE FOR CHAN 12
.TP100A  ANOP                     NO, RETURN TO CALLER
         L     LINEREG,TEMPSAVE   ALL NORMAL RESTORE REG
         L     CREG,REGSAVE       RESTORE RETURN REG
         BR    CREG               RETURN TO CALLER
         AIF   ('&OUTPUT2'(1,1) EQ 'T').PTR100A TAPE SKIP UE FOR PTR
PTRGOT10 DS    0H                 FOR CHAN 12, RESTART I/O
.PTR100A ANOP                     GO DUMP STORAGE
         EJECT
**********************************************************************
*                                                                    *
*  THIS IS THE DUMP CODE TO OUTPUT AND FORMAT ALL OF REAL STORAGE    *
*                                                                    *
**********************************************************************
         SPACE
PRNTLOOP DS    0H                 LOOP TO PRINT STORAGE ONCE PER 2K
STORCOMP DS    0H
         TM MCHKFLG,MCHKPE        TEST TO SEE IF THE MACHINE CHECK
*                                 HANDLER IS ALREADY SETUP     @ZA27964
         BO    PAST1000           IF IT IS SKIP DOING IT AGAIN @ZA27964
         CH    STORADDR,WORKADDR .PAST X'1000'                 @ZA27964
         BNL   PAST1000           NO GO TO DUMP                @ZA69934
         MVC   PGMNEW(8),EOJSW    SET UP PGMCHK HANDLER        @ZA27964
         MVI   MCHKFLG,MCHKPE     SHOW MACH CHK SETUP DONE     @ZA27964
         MVC   FLCMCNP(8),MCHKNPSW SETUP MCHK NEW PSW          @ZA27964
         LCTL  14,14,MCHKCR14     MASK OFF AS MANY TYPES AS POSSIBLE
*                                                              @ZA27964
         LPSW  MCHKENBL           ENABLE FOR MCHK & B PAST1000 @ZA27964
PAST1000 EQU   *                                               @ZA27964
         C     STORADDR,CTADDRE   CHECK FOR LAST ADDR
         BNL   DUMPDONE           EXIT IF AT END OF DUMP RANGE
         SR    KEYREG,KEYREG      INIT STORAGE KEY REG
         LA    LOOPCTR,LOOPCT     INIT FOR 2K OF STORAGE
*                                 THIS IS THE SPAN OF A STORAGE
*                                 PROTECTION KEY
         OI    MCHKFLG,MCHKSK        INDICATE IF A STOR CHK OCCURRS
*                                 SKIP THE STORAGE KEY         @ZA27964
         TM    CTFLG2,CTVIRTR     IS THIS A VIRT DUMP
         BNO   NOLRAVRT           NO, USE REG ISK
         LRA   RETCODE,0(STORADDR)   GET VIRT SK ADDR
         BC    7,PGMCHK           STORAGE PAGED OUT SKIP BY 4K
         ISK   KEYREG,RETCODE     GET VIRTUAL ST KEY
         B     STORCMPR           BR AROUND ISK FOR REAL
NOLRAVRT DS    0H
         ISK   KEYREG,STORADDR    GET STORAGE KEY
STORCMPR DS    0H
MCHKKEYS NI    MCHKFLG,X'FF'-MCHKSK        STOR CHK NOT EXPECT @ZA27964
         C     STORADDR,CTADDRE   AT END OF STORAGE
         BNL   DUMPDONE           YES DUMP IS DONE
         CH    KEYREG,KEYSAVE     SAME AS LAST KEY?
         BE    WORKRCD            YES, DO NOT PRINT
         STH   KEYREG,KEYSAVE     NO, PRINT OUT
         OI    CTFLG2,CTSTOR      INDICATE PROCESS STOR KEY
         MVI   OUTLINE,BLANK      BLANK OUT OUTPUT LINE
         MVC   OUTLINE+1(119),OUTLINE   FOR MSG
         MVC   OUTDATA(MSGHDLEN),KEYMSG MOVE IN STORAGE KEY MSG
         LR    SAVREG,STORWORK    SET UP TO FORMAT KEY
         LR    STORWORK,KEYREG    MOVE KEY INTO WORK REG
         LA    LINEREG,OUTDATA+11 .OUTPUT IN LINE PROPERLY
         BAL   CREG,ADDRFORM      CONVERT KEY TO EBCDIC
         LR    STORWORK,SAVREG    RESTORE WORK REG
         AIF   ('&OUTPUT2'(1,1) EQ 'P').LS2 BYPASS TAPE CTL FOR PTR
         MVI   OUTCTL,SKIPSP1     SET UP TO SKIP A LINE PRIOR
*                                 TO PRINTING STORAGE PROTECTION KEY
         MVC   OUTDATA+11(6),OUTDATA+25 CLEAR STORAGE KEY BITS
         LA    CCWREG,WRITDUMP    RESTORE CCW
         BAL   CREG,LSIO          OUTPUT STORAGE KEY MSG
*                                 FOR WRITING
         AGO   .LS3               SKIP PTR CODE FOR TAPE
.LS2     ANOP                     PTR CONTROL CODE
         MVC   OUTDATA+11(6),OUTDATA+25 CLEAR STORAGE KEY BITS
         LA    CCWREG,PTRCCW1     SET UP TO ORGINAL CCW TO
*                                 SKIP A LINE IMMEDIATELY
         BAL   CREG,LSIO          BLANK LINE
         LA    CCWREG,PTRCCW2     SET UP TO ORGINAL CCW TO
*                                 PRINT A LINE
         BAL   CREG,LSIO          OUTPUT STORAGE KEY MSG
.LS3     ANOP                     RESUME COMMON CODE
         MVI   OUTASK1,ASK        SET UP LINE WITH ASK
         MVI   OUTASK2,ASK        SET UP LINE WITH ASK
WORKRCD  DS    0H                 CHECK FOR WORK RECORD TME
         LTR   STORWORK,STORWORK   OUTPUTTING LOCATION ZERO?
         BZ    PRNTLINE           YES, SKIP DUP LINE CHECKS
DUPCHK   DS    0H                 DUPLICATE LINE CHECK
*                                 ALSO TOP OF INNER LOOP, FOR PRINTING
*                                 EACH LINE.                   @ZA27964
         CH    STORADDR,LOWCOREA .A CSW-CAW RESTORE?
         BE    INITCORE           YES, RESTORE CAW AND CSW
         L     DUPREG,SAVEDUP     CHECK FOR DUP LINE             YO2006
         CH    STORADDR,WORKSTRT .FIRST CHECK FOR WORK
*                                 RECORD.  THIS IS DONE PRIOR TO A DUP
*                                 LINE CHECK SINCE WORK RCD ITSELF
*                                 MAY BE A DUP OF PREVIOUS LINE
         BE    GETWORK            YES, HAVE WORK RECORD RESTORED
*                                 THIS WILL RETURN AT PROTKEY  @ZA27964
         C     STORADDR,WORKEND   END OF WORK RCD?
         BNE   DUPLINE            NO, CHECK FOR DUP LINE
         NI    CTFLG1,HEXFF-CTWORK .RESET WORK RECORD FLG
         LR    STORWORK,STORADDR .YES, RESTORE STORAGE CTR
PROTKEY  DS    0H                 USED FOR COMP WITH HSR
DUPLINE  EQU   PROTKEY            DUPLICATE LINE CONDITION CHECK
         AIF   ('&MCHK' EQ '').MTST000                         @ZA27964
MCHKHOOK B     MCHKSET            GO TO LOOP THAT WILL SET BAD ECC
*                                 THROUGHOUT STORAGE.          @ZA27964
.MTST000 ANOP                                                  @ZA27964
         OI    MCHKFLG,MCHKOK     INDICATE IF A STOR CHK OCCURRS SKIP
*                                 THE PAGE BEING DUMPED        @ZA27964
         CLC   0(32,STORWORK),0(DUPREG)     DUPLICATE LINE?
         BNE   PRNTLINE           NO, OUTPUT LINE
         TM    CTFLG2,CTSTOR      UNIQUE STOR KEY?
         BO    PRNTLINE           YES, FORGET DUP LINE
SKIPMCHK NI    MCHKFLG,X'FF'-MCHKOK IF THE CLC CAUSES A MACH CHK THE
*                                 MC HANDLER BRANCHES HERE TO SKIP THE
*                                 LINE AS IF IT WAS A DUP.     @ZA27964
MCHKUNEX EQU   *                  MACHINE CHECK HANDLER BRANCHES HERE
*                                 TO RECOVER FROM AN UNEXPECTED MACH
*                                 CHECK.                       @ZA27964
         OI    DUPSW,CTDUPSW      YES, SET DUP SWITCH
         AH    STORWORK,H32       FORGET THIS LINE, SKIP
*                                 TO THE NEXT LINE
         B     PRNTCTR            UPDATE STORAGE KEY CTR
INITCORE DS    0H                 RESTORE CSW AND CAW ON FIRST
         MVC   CSW(12),DUMPCSW    MOVE INIT CSW INTO DUMP RECORD
PRNTLINE DS    0H                 PRINT LINE CODE
         NI    MCHKFLG,X'FF'-MCHKSK  STOR CHK NOT EXPECTED     @ZA27964
         ST    STORWORK,SAVEDUP   SAVE STORWORK
         NI    CTFLG2,HEXFF-CTSTOR     RESET STOR KEY
         LA    LINEREG,OUTLINE    SET UP OUTPUT LINE ADDR
         BAL   CREG,ADDRFORM      CONVERT ADDR
         BAL   RETREG,FORMAT      FORMAT THE STORAGE
         TM    CTFLG2,CTDUPSW     WERE PREV LINES SUPPRESSED BECAUSE
*                                 THEY WERE DUPS?              @ZA27964
         BNO   DUMPCORE           NO OUTPUT STORAGE NORMALLY
         NI    CTFLG2,HEXFF-CTDUPSW     TURN OFF DUP LINE SWITCH
         AIF   ('&OUTPUT2'(1,1) EQ 'P').LP1 . LOW SPEED DUMP?
         MVI   OUTCTL,SKIPSP1     NO, SET UP PRINT CONTROL FOR TAPE
         B     PTOUT              PERFORM I/O ON BLANK LINE
         AGO   .LP2               FORMAT NEXT LINE
.LP1     ANOP                     SET UP PTR FOR SKIP OF LINE
         LA    CCWREG,PTRCCW1     SET UP CCW CHAIN TO SKIP LINE
         BAL   CREG,LSIO          OUTPUT LINE OF MAIN STORAGE
.LP2     ANOP                     COMMON OUTPUT HANDLER
DUMPCORE DS    0H                 NORMAL DUMP STORAGE HANDLER
         AIF   ('&OUTPUT2'(1,1) EQ 'P').LP3 IF PTR SKIP TAPE CONTROL
         MVI   OUTCTL,HEX40       TAPE PRINT CONTROL
         AGO   .LP4               SKIP PTR CONTROL
.LP3     ANOP                     PRINTER SINGLE SPACE CONTROL
         LA    CCWREG,PTRCCW2     SET UP FOR SINGLE SPACE
.LP4     ANOP                     COMMON I/O PROCESSING
PTOUT    DS    0H                 COMMON OUTPUT ROUTINE
         MVC   OUTLINE+9(1),REQCHAR .MOVE IN ID CHARACTER
         BAL   CREG,LSIO          OUTPUT LINE OF MAIN STORAGE
PRNTCTR  DS    0H                 CYCLE THROUGH FOR EACH 2K SEC
         AH    STORADDR,H32       INCREMENT FOR STOR KEY CTR
         BCT   LOOPCTR,DUPCHK     CONTINUE UNTIL DONE WITH 2K
         B     PRNTLOOP           GET ANOTHER PROTECTION KEY
         EJECT
**********************************************************************
*                                                                    *
*  THIS SUBROUTINE FORMATS THE LINE PROVIDING HEXADECIMAL CONVERSIONS*
*                                                                    *
**********************************************************************
             SPACE
FORMAT   DS    0H                 FORMAT ROUTINE
         LA    LINEREG,OUTDATA    OBTAIN OUTPUT LINE ADDR
         LA    BUFFREG,FORMBUF    PICK UP BUFFER FORMAT ADDR
         LA    INCREG,1           INCREMENT FOR BXLE INSTRUCTION
         LA    LIMITREG,31(BUFFREG) SET UP FOR END OF BXLE
         MVC   FORMBUF(32),0(STORWORK) MOVE IN THE LINE TO BE
*                                           CONVERTED TO HEX
TESTF    DS    0H                 LOOP FOR CONVERTING ALL CHARS
         TM    0(BUFFREG),HEXC0 .AN ALPHNUMERIC CHAR?
         BO    ALRIGHT            YES, CONVERT THE CHAR
         CLI   0(BUFFREG),BLANK .A BLANK CHARACTER?
         BE    BXLE               YES, CONVERT BLANK TO HEX CHAR
         MVI   0(BUFFREG),X'00' .FORCE ALL OTHER CHAR TO BLANK
ALRIGHT  DS    0H                 PREPARE TO CONVERT CHAR TO EBCDIC
         NI    0(BUFFREG),HEX3F .STRIP OFF HIGH ORDER BYTES FOR
*                                 SHORTER TRANSLATE TABLE
BXLE     BXLE  BUFFREG,INCREG,TESTF CONVERT FROM HEX TO EBCDIC
         TR    FORMBUF,TRANLATE   TRANSLATE CHARACTERS TO EBCDIC
         SPACE
**********************************************************************
*                                                                    *
*  CONVERSION FROM THE HEX DIGIT TO A PRINTABLE HEX                  *
*     (ALSO USED BY ADDRFORM SUBROUTINE).                      @ZA27964
*                                                                    *
**********************************************************************
         SPACE
FORMCORE DS    0H                 FORMAT OF STORAGE
         LA    LOOPREG1,2         FOR SIZE OF COLUMNS
LOOP1    DS    0H                 LOOP FOR THE TWO SIDES OF DUMP
*                                 RIGHT HAND SIDE (RHS) AND LEFT HAND
*                                 SIDE (LHS)
         LA    LOOPREG2,4          SET UP STORAGE SECTION FOR SIDES
*                                  OF EACH COLUMN
LOOP2    DS    0H                 SECOND INNER LOOP FOR CONVERT
         MVC   WORK(4),0(STORWORK) OBTAIN STORAGE
*                                    TO CONVERT.  THIS IS DONE IN ORDER
*                                    TO PREVENT AN ADDRESSING EXCP
         UNPK  0(9,LINEREG),WORK(5) CONVERT 4 BYTES OF DATA
         MVI   8(LINEREG),BLANK      CLEAR SIGN BIT
         TR    0(8,LINEREG),HEXTAB-240 CONVERT TO PRINTABLE HEX
         LA    LINEREG,9(LINEREG)   BUMP LINE COUNT
         LA    STORWORK,4(STORWORK)    BUMP STORAGE ADDR
         BCT   LOOPREG2,LOOP2     SET UP LHS OF LINE
         LA    LINEREG,1(LINEREG)   AFTER LHS COMPLETE MUST SKIP
*                                 THREE SPACES IN THE CENTER COLUMN
         BCT   LOOPREG1,LOOP1     LOOP TO COMPLETE RHS
         BR    RETREG             RETURN TO CALLER
         EJECT
**********************************************************************
*                                                                    *
*THIS SUBROUTINE CONVERTS AN ADDR OR STOR KEY IN REG STORWORK TO EBCDIC
*                                                                    *
**********************************************************************
         SPACE
ADDRFORM DS    0H                 CONVERT FOUR BYTES IN REG STORWORK
         LA    LOOPREG1,1         SET UP FOR FORMCORE A 4 BYTE CONV
         LA    LOOPREG2,1         SMALL LOOP
         STCM  STORWORK,HEXF,ADDRSAVE SAVE ADDR TO CONVERT
         TM    CTFLG1,CTWORK      A WORK RECORD?
         BNO   ADRFORM1           NO, SKIP WORK PROCESSING
         TM    CTFLG2,CTSTOR      STOR KEY IN PROCESS?
         BO    ADRFORM1           YES, HANDLE UNIQUELY
         STCM  STORADDR,HEXF,TEMPSAVE   YES, SET UP REAL ADDR
         LA    STORWORK,TEMPSAVE .POINT TO REAL ADDR
         B     ADRFORM2           HANDLE AS NORMAL
ADRFORM1 DS    0H                 SET UP FOR NORMAL ADDR
         LA    STORWORK,ADDRSAVE   SET UP CONVERSION
ADRFORM2 DS    0H                 NORMAL WORK PROCESSING
         BAL   RETREG,LOOP2       CONVERT THE ADDR
         ICM   STORWORK,HEXF,ADDRSAVE RESTORE ADDRESS IN REG
         BR    CREG               RETURN TO CALLER
         AGO   .WORK1             GET LS WORK RECORD
.*   MACRO SECTION 14                                          @ZA27964
.HIDUMP  ANOP                     HIGH SPEED DUMP PROCESSING
         L     STORADDR,STARTADR .INITIALIZE REAL STORAGE ADDR
         LR    STORWORK,STORADDR .INIT WORK REG ADDR--STORAGE DUMPED
         AIF   ('&IPL2'(1,1) EQ 'T').SKPWKFL
         MVC   CCHHW(4),CTCCHHW   INITIALIZE WKFILE CCHHW
         MVI   SEEKADDR+6,0       INITIALIZE WORKFILE TO RCD 0
         L     WORKREG2,IDAWORD      GET ADDRESS OF COUNT AREA
         XC    0(8,WORKREG2),0(WORKREG2) .ZERO COUNT FLD
         MVC   6(2,WORKREG2),FOURK .SET UP FOR  LNGTH OF 4K
.SKPWKFL ANOP
         SPACE
**********************************************************************
*                                                                    *
*  REAL STORAGE DUMPING LOOP                                         *
*                                                                    *
**********************************************************************
         SPACE
DUMPWRTE DS    0H                 CODE TO OUTPUT THE DUMP
         LH    IODEVREG,CTOUTAD   OBTAIN OUTPUT DEVICE ADDR
         LA    CCWREG,WRITHEAD    OBTAIN CHANNEL PGM TO
*                                 OUTPUT DUMP; ON THE FIRST PASS THIS
*                                 IS THE HEADER RECORD.
         BAL   RETREG,DUMPSIO     WRITE THE 4K DUMP RECORD
         TM    CSW+4,X'01'        END OF REEL ON THE TAPE?
         BNO   STAPROC            NO, PREPARE TO ISSUE STAP
         BAL   CREG,MORTAPE       END OF REEL CONDITION
STAPROC  DS    0H
         LA    WORKREG1,TAPESW    NO PSW RESTART
         ST    WORKREG1,4         FROM HERE ON
         LTR   STORADDR,STORADDR  CHECK PTR ADDR
         BM    STAP               WHICH WILL STOP ANY OTHER CPU & WRITE
*                                 THE CPU RECS, THEN RETURN AT LABEL
*                                 TAPEGOT                      @ZA27964
***********************************************************************
*                                                                     *
*  FOR THE FIRST 128K OF THE DUMP ALSO WRITE A DUPLICATE ON THE IPL   *
*  DEVICE AS A WORK FILE TO BE READ BY THE VIRTUAL DUMP WHEN IT NEEDS *
*  DATA THAT SHOULD BE IN THE FIRST 128K.                      @ZA27964
*                                                                     *
***********************************************************************
WKFLDUMP DS    0H
         TM    CTFLG2,CTWKDONE    DONE WITH WORKFILE
         BO    TAPEGOT            SKIP WKFILE PROCESS          @ZA27964
         C     STORADDR,ONE28K    PAST 128 K
         BNL   WKFLDONE           SKIP IF DONE
         OI    CTFLG1,CTERREC     TURN ON NO CAT ERR REC
         LH    IODEVREG,CTINADDR .PICK UP IPL DEV
         AIF   ('&IPL2'(1,1) NE 'D').LODA
         LA    WORKREG1,TABLNG    GET DEVICE TABLE ADDR
DEVLOOP  DS    0H
         TM    0(WORKREG1),ENDTAB .AT END OF TABLE ?
         BO    WKFLDONE           YES, NO DEV FOR WKFILE
         CLC   5(1,WORKREG1),CTDEVTYP   CHECK FOR DEV TYPE
         BE    DEVOK              DEVICE FOUND
         LA    WORKREG1,8(WORKREG1) .BUMP TO NEXT ENTRY
         B     DEVLOOP            CONTINUE SEARCH
DEVOK    DS    0H
         ST    WORKREG1,DEVSAVE   SAVE DEV ADDR FROM TABLE
         CLC   2(2,WORKREG1),CCHHW+2 .OVER CYL BOUNDRY ?
         BH    NOINCREM           NO DO NOT INCREMENT
         L     WORKREG2,CCHHW     PICK UP WKFILE CCHH
         SRL   WORKREG2,16        STRIP OFF HH
         LA    WORKREG2,1(WORKREG2) .BUMP CYL BY 1
         SLL   WORKREG2,16        SHIFT FOR HH OF 0
         ST    WORKREG2,CCHHW     STORE NEW CCHH IN CTCCHHW
NOINCREM DS    0H
         CLC   CCHHW(4),CTCCHHE   OVER END OF DATA SET
         BH    SETWKFSW           YES NO MORE WKFILE
         MVC   SEEKADDR+2(4),CCHHW .OBTAIN WORKFILE CCHHR
         ST    STORWORK,IDAWORD1 .SET UP 1ST 2K BLOCK FOR WRITE
         LA    WORKREG1,2048(STORWORK) .SET UP 2ND BLOCK
         ST    WORKREG1,IDAWORD2 .STORE ADDRESS FOR WRITE
         L      WORKREG2,IDAWORD      GET COUNT FIELD AREA
         MVC   0(4,WORKREG2),CCHHW .STORE CCHH OF  RCD
         IC    WORKREG1,SEEKADDR+6 .GET SRCH RCD NUMBER
         LA    WORKREG1,1(WORKREG1) .ADD 1 FOR WRITE RCD NUMBER
         STC   WORKREG1,4(WORKREG2) .STORE RCD NUMBER
         LA    CCWREG,WKRCDCCW    SET UP CHANNEL PGM
         OI    CTFLG1,CTDEVICE    SET DA I/O SW ON
         BAL   RETREG,DUMPSIO     GO WRITE RECORD
         NI    CTFLG1,HEXFF-CTDEVICE .TURN OFF DA I/O
         TM    CTFLG1,CTERREC     DID ERROR OCCUR ?
         BNO   WKFLDONE           YES, NO MORE WKFL
         NI    CTFLG1,HEXFF-CTERREC    TURN OFF ERROR FLG
         ST    STORADDR,CTLWKAD   SAVE LAST WORK RCD DUMPED
         L     WORKREG1,DEVSAVE   OBTAIN DEV ADDR IN TABLE
         CLC   7(1,WORKREG1),SEEKADDR+6     ONE RCD PER TRK
         BE    ONERECRD           YES, BRANCH
         IC    WORKREG1,SEEKADDR+6 .GET RECORD
         LA    WORKREG1,1(WORKREG1) .BUMP IT BY ONE
         STC   WORKREG1,SEEKADDR+6 .STORE IT IN SEEK
         B     ENDWKFLE           DONE WRITING RECORD
ONERECRD DS    0H
         MVI   SEEKADDR+6,0       SET RECORD TO 0
ONEPERTK DS    0H
         LH    WORKREG2,CCHHW+2     OBTAIN HH PORTION
         LA    WORKREG2,1(WORKREG2) .BUMP HH BY 1
         STH   WORKREG2,CCHHW+2 .STORE IT INTO CCHHW
         B     ENDWKFLE           DONE WITH WORK FILE
         AGO   .HIWKFLE
.LODA    ANOP
         LA    CCWREG,WRITHEAD    OBTAIN CHANNEL PGM TO
         BAL   RETREG,DUMPSIO     DUMP WORK FILE RECORD
         TM    CTFLG1,CTERREC     DID ERROR OCCUR
         BNO   WKFLDONE           YES SET END SW
         NI    CTFLG1,HEXFF-CTERREC   TURN OFF ERROR SW
         ST    STORADDR,CTLWKAD   SAVE LAST WKFILE ADDR
         TM    CSW+4,X'01'        EOR ?
         BNO   ENDWKFLE           NO SKIP END SW SET
.HIWKFLE ANOP
SETWKFSW DS    0H
         OI    CTLOWFLG,CTWKSTUS .INDICATE EOR OR END OF EXTENTS
WKFLDONE DS    0H
         OI    CTFLG2,CTWKDONE    TURN ON WKFILE DONE
ENDWKFLE DS    0H
         TM    MCHKFLG,MCHKPE     TEST TO SEE IF THE MACHINE CHECK
*                                 HANDLER IS ALREADY SETUP. THIS IS
*                                 NOT DONE UNTIL AFTER THE FIRST 4K
*                                 (PSW ETC.) HAS BEEN DUMPED, & WRITTEN
*                                 TO THE WORK FILE             @ZA27964
         BO    TAPEGOT            IF IT IS SKIP DOING IT AGAIN @ZA27964
         OI    MCHKFLG,MCHKPE     SHOW MACH CHK SETUP DONE     @ZA27964
         MVC   FLCMCNP(8),MCHKNPSW SETUP MCHK NEW PSW          @ZA27964
         MVC   PGMNEW(8),EOJSW    SET UP PGM CHK HANDLER. WHEN A
*                                 MISSING STORAGE BOX OR THE END OF
*                                 STORAGE IS REACHED A PGM CHK WILL
*                                 SHIFT CNTL TO LABEL PGMCHK.  @ZA27964
         LCTL  14,14,MCHKCR14     MASK OFF AS MANY TYPES AS POSSIBLE
*                                                              @ZA27964
         LPSW  MCHKENBL           ENABLE FOR MCHK & B TAPEGOT  @ZA27964
MCHKUNEX EQU   *                  MACHINE CHECK HANDLER BRANCHES HERE
*                                 TO RECOVER FROM AN UNEXPECTED MACH
*                                 CHECK.                       @ZA27964
TAPEGOT  DS    0H                 EOR PROCESSING COMPLETED
         A     STORADDR,INCRBLKS .INCREMENT STORADDR BY 4K
         A     STORWORK,INCRBLKS .INCREMENT STORWORK BY 4K
         CH    STORADDR,WORKSTRT .IS THIS THE START OF THE 1ST WORK
*                                 RECORD SAVED AT IPL?         @ZA27964
         BE    GETWORK            YES, GET IT                  @ZA27964
         C     STORADDR,WORKEND   END OF 1ST IPL WORK RECORD?  @ZA27964
         AIF   ('&IPL2'(1,1) NE 'T').RESET                     @ZA27964
         BE    GETWORK            GET THE 2ND IPL WORK RECORD  @ZA27964
         C     STORADDR,ENDWKRCD .END OF 2ND IPL WORK RECORD?  @ZA27964
.RESET   ANOP
         BNE   PROTKEY            NO, GET STORAGE PROTECT KEY  @ZA27964
         LR    STORWORK,STORADDR .RESET STORAGE ADDR TO NORMAL
PROTKEY  DS    0H                 PROCESSING TO OBTAIN PROTECTION KEY
         OI    MCHKFLG,MCHKSK INDICATE IF A STOR CHK OCCURRS
*                                 SKIP GETTING THE KEYS.       @ZA27964
         ISK   KEYREG,STORADDR    OBTAIN KEY OF CURRENT ADDR BLK.
*                                 NOTE THAT IF THE ADDR DOESN'T EXIST
*                                 A PGM CHK WILL OCCURR EFFECTIVELY
*                                 BRANCHING TO PGMCHK          @ZA27964
         C     STORADDR,HIGHEST   AT END OF STORAGE?
         BNL   DUMPDONE           YES DUMP IS DONE
         STC   KEYREG,KEY1        PLACE IN HEADER FOR REAL RCD
         LA    WORKREG1,HEX800    SET TO GET NEXT
         AR    WORKREG1,STORADDR .STORAGE KEY
         ISK   KEYREG,WORKREG1    PICK UP 2ND STORAGE KEY
         STC   KEYREG,KEY2        PLACE IN HEADER RCD
MCHKKEYS NI    MCHKFLG,X'FF'-MCHKSK NO MORE MACH ON ISK        @ZA27964
         AIF   ('&MCHK' EQ '').MTST001                         @ZA27964
MCHKHOOK B     MCHKSET            GO TO LOOP THAT WILL SET BAD ECC
*                                 THROUGHOUT STORAGE.          @ZA27964
.MTST001 ANOP                                                  @ZA27964
         ST    STORADDR,ADDR      PLACE ADDR IN OUTPUT RCD
         STCM  STORWORK,HEX7,WRITECCW+1 SET REAL STORAGE ADDR
         B     DUMPWRTE           GO OUTPUT THE RECORD
.*   MACRO SECTION 15                                          @ZA27964
.WORK1   ANOP                     WORK RECORD PROCESSING
         EJECT
**********************************************************************
*                                                                    *
*  THIS CODE OBTAINS THE WORK RECORD                                 *
*                                                                    *
**********************************************************************
         SPACE
GETWORK  DS    0H                 OBTAIN WORK RECORD FROM IPL DEV
         LH    IODEVREG,CTINADDR .OBTAIN IPL DEVICE ADDR
         AIF   ('&IPL2'(1,1) EQ 'D').WK1 SET UP FOR DA WORK RCD
         LA    CCWREG,WORKCCW     PICK UP WORK CCW CHAIN
         CH    STORADDR,WORKSTRT .CHECK FOR 1ST RCD
         BE    WORKSIO
SCNDREAD DS    0H
         MVI   TAPEWK1+4,HEX70    SET NO DATA READ1
         MVI   TAPEWK2+4,X'60'    SET CMD CHAIN
WORKSIO  DS    0H
         BAL   RETREG,DUMPSIO     DUMP WORK RECORD IN STORAGE
         AGO   .WKISOK            CHECK FOR TAPE PROCESSING
.WK1     ANOP                     DA WORK RECORD PROCESSING
         LA    CCWREG,SEEKWK      SET UP CHAN PGM
         OI    CTFLG1,CTDEVICE    DET DA I/O SW ON
         OI    CTFLG1,CTWORK      TURN ON WORK RCD FLG
         BAL   RETREG,DUMPSIO
         NI    CTFLG1,HEXFF-CTDEVICE
         AIF   ('&TYPE2' EQ 'HI').WKISOK HI SKIPS WORK BIT
.LOGETWK ANOP
         AIF   ('&OUTPUT2'(1,1) EQ 'P').WORK2A FOR PTR SKIP RESET CCW
         LA    CCWREG,WRITDUMP    RESET CCW FOR TAPE
.WORK2A  ANOP                     RESUME COMMON TAPE PROCESSING
         LR    DUPREG,STORWORK    RESTORE DUP SW
         SH    DUPREG,H32         BACK UP ONE LINE
.WKISOK  ANOP                     RESTORE STORAGE WORK
         LH    STORWORK,WORKADDR .SET UP WORK REG TO DUMP WORK RCD
         B     PROTKEY            GET PROTECTION KEY FOR WORK AREA
         EJECT
**********************************************************************
*                                                                    *
*  THIS SUBROUTINE CONTAINS THE CODE THAT ISSUES THE STAP INSTRUCTION
*  IN ORDER TO OBTAIN THE CPU RECORD INFORMATION FOR THE IPL CPU AND *
*  ANY OTHER ATTACHED CPU'S                                          *
*                                                                    *
**********************************************************************
         SPACE
STAP     DS    0H
         AIF   ('&TYPE2' EQ 'LO').SHRTSAV
         XC    WRITECCW+1(3),WRITECCW+1 .ZERO DUMP ADDRESS
         MVC   PGMSAVE(104),PGMOLD     SAVE PGM PSWS & INT CD  @ZA06479
         AGO   .CPUID
.SHRTSAV ANOP
         MVC   PGMSAVE(8),PGMOLD .SAVE PGM OLD
         MVC   PGMSAVE+8(8),PGMNEW    SET UP PGM NEW
.CPUID   ANOP
         MVC   PGMNEW(8),STAPSW   SET UP PGM NEW PSW           @ZA27964
         LA    LOOPCTR,X'3F'      SET LOOP INDEX TO END CONDITION TO
*                                 AVOID SIGP LOOP FOR NONMP    @ZA27964
         SR    WORKREG1,WORKREG1 .SET COUNTER TO ZERO
         STAP  CTCPUI             IF THIS IS NO AN MP THIS INST WILL
*                                 PGM CHK CAUSING CONTROL TO GO TO
*                                 LABEL=NOMP                   @ZA27964
         OI    CTFLG1,CTMP        SET CTMP BIT ON
         SR    LOOPCTR,LOOPCTR    ZERO LOOPCTR
         BCTR  LOOPCTR,0          AND SET IT TO -1
NOMP     DS    0H
         MVC   CPUADDR(2),CTCPUI .OBTAIN CPU ADDRESS
         AIF   ('&TYPE2' EQ 'HI').SKIPCPU
WRITSTAT DS    0H
         LH    STORWORK,CPUADDR   GET CPU ADDR
         MVI   OUTLINE,BLANK      BLANK OUT THE OUTPUT AREA
         MVC   OUTLINE+1(119),OUTLINE   BLANK OUT ENTIRE AREA
         MVC   OUTDATA+57(6),CPUIDMSG    MOVE IN CPU ID TEXT
         LA    LINEREG,OUTDATA+64 .SET UP FOR ID POSITION
         BAL   CREG,ADDRFORM
         MVC   OUTDATA+64(6),OUTLINE BLANK OUT LEADING DIGITS
         B     PSWFRMAT           RETURN TO CALLER TO PRINT DATA
         AGO   .COMSTAP
.SKIPCPU ANOP
         XC    RESERVD(3),RESERVD .ZERO RESVD FIELD
         MVI   RECID,X'0F'        SET RCDID
         TM    CTFLG2,CTNOSTAT    WAS STORE STATUS DONE
         BNO   SETRECID           YES, SKIP FLG SETTING
         OI    STAFLAGS,X'60'     SET STATUS FLAG ON
SETRECID DS    0H
         TM    CTFLG1,CTMP        IS THIS AN MP MACHINE
         BO    WRITSTAT
         OI    STAFLAGS,HEX80     SET HDR FLAGW
WRITSTAT DS    0H
         LA    CCWREG,WRITHEAD    SET UP TO GO TO DUMPSIO
         ST    LOOPCTR,LCSAVE     SAVE ACROSS CALLS TO DUMPSIO AND     X
                                  MORTAPE                      @ZA56338
         BAL   RETREG,DUMPSIO     GO DUMP RECORD
         TM   CSW+4,X'01'         END OF REEL
         BNO   NOEOR              NO
         BAL   CREG,MORTAPE       GO GET MORE TAPE
NOEOR    DS    0H
         L     LOOPCTR,LCSAVE     RESTORE AFTER CALLS TO DUMPSIO AND   X
                                  MORTAPE                      @ZA56338
         XC    STAFLAGS,STAFLAGS .ZERO FLAGS
.COMSTAP ANOP
COMSTAP  DS    0H
         LA    WORKREG1,HEX3F     SET UP MAX CPU COUNT
         SR    WORKREG1,LOOPCTR   TEST FOR END OF CPU COUNT
         BZ    STAPDONE           IF AT END, EXIT
         LA    LOOPCTR,1(LOOPCTR) .INCREMENT COUNTER
         CH    LOOPCTR,CTCPUI     IPL CPU
         BE    COMSTAP            SKIP IF IPL CPU
         STH   LOOPCTR,CPUADDR    STORE CPU ADDRESS
         SIGP  WORKREG2,LOOPCTR,SIGPSTAT   ISSUE SIGP
         AIF   ('&TYPE2' EQ 'LO').NOCHCK
         BC    1,COMSTAP          CPU NOT PRESENT
         BC    8,STOPCPU          SUCCESSFUL
         OI    STAFLAGS,HEX40     TURN ON INVALID STATUS
         B     WRITSTAT           GO WRITE STATUS RECORD
         AGO   .STPDONE
.NOCHCK  ANOP
         BC    8,STOPCPU          SIGP WAS SUCCESSFUL
         B     COMSTAP            SKIP CPU IF NOT
.STPDONE ANOP
STOPCPU  SIGP  WORKREG2,LOOPCTR,SIGPSTOP .ISSUE SIGP STOP
         BC    2,STOPCPU               LOOP UNTIL NOT BUSY
         B     WRITSTAT                WRITE STATUS RECORD
STAPDONE DS    0H
         AIF   ('&TYPE2' EQ 'LO').LOSHRT
         MVC   PGMOLD(104),PGMSAVE     RESTORE PGM PSWS,INT CD @ZA06479
         AGO   .RETURN
.LOSHRT  ANOP
         B     DUMPLOCR
         AGO   .LOBRNCH
.RETURN  ANOP
         B     TAPEGOT
.LOBRNCH ANOP
.*   MACRO SECTION 16                                          @ZA27964
         EJECT
**********************************************************************
*  THIS IS THE PROGRAM CHECK CLEAN-UP PROCESSOR. IT CLEANS UP THE    *
*  DUMP PROCESSING (UNLOAD TAPE) AND EITHER GETS THE PRECURSOR RTNE  *
*  IF A PAGE DUMP IS DESIRED, OR LOADS A WAIT STATE PSW. CONTROL IS  *
*  RECEIVED VIA A PROGRAM CHECK WHEN ALL THE REAL STORAGE DUMP HAS BEEN
*  COMPLETED. FOR LOW-SPEED DUMPS, THE ROUTINE CLEANS UP              *
*  AND TERMINATES NORMALLY.                                           *
**********************************************************************
         SPACE
PGMCHK   DS    0H             THE FINAL CLEAN-UP PROCESSOR
         NI    MCHKFLG,X'FF'-MCHKSK INDICATE STORAGE CHECKS ARE NO
*                                 LONGER EXPECTED.             @ZA27964
         AIF   ('&TYPE2' EQ 'LO').LOCHK  IF LOW-SPEED
         C     STORADDR,HIGHEST   AT END OF STORAGE?
         BNL   DUMPDONE           YES
         A     STORADDR,COREBOX   JUMP OVER CHECKED COREBOX
         LR    STORWORK,STORADDR  SAME FOR STORWORK
         B     PROTKEY            GET STORAGE KEY
         AGO   .NOHIC
.LOCHK  ANOP
         C     STORADDR,CTADDRE   AT END OF LOW DUMP?
         BNL   DUMPDONE           YES
         AH    STORADDR,FOURK     BUMP ADDR BY 4K
*                                 SINCE FOR VIRT DUMPS THIS PAGE IS NOT
*                                 IN REAL (INVALID) AND FOR REAL DUMPS
*                                 THIS STOR BOX MAY BE OFFLINE @ZA27964
         OI    CTFLG2,CTDUPSW     SET UP TO SKIP LINE
         LR    STORWORK,STORADDR  SAME FOR STORWORK
         B     STORCOMP
.NOHIC   ANOP
DUMPDONE DS    0H
         NI    PGMNEW+1,X'FB'     CHANGE PGM CHK NEW PSW TO BE DISABLED
*                                 FOR MACH CHKS                @ZA27964
         LPSW  MCHKDSBL           DISABLE FOR MACH CHKS NOW THAT ALL
*                                 REAL STOR HAS BEEN DUMPED.   @ZA27964
MCHKOUT  EQU   *                  MCHKDSBL PSW RESUMES HERE.   @ZA27964
         AIF   ('&MCHK' EQ '').MTST003                         @ZA27964
         DC    X'8300',S(MCHKDG3) TURN HARDWARE BUF BACK ON    @ZA27964
.MTST003 ANOP                                                  @ZA27964
         MVI   ENDUP1+1,HEXF0     SET BR FOR END PROCESSING
         MVI   ENDUP2+1,NOP       SET BR TO NOP
         LA    OUTREG,ENDMSG      ONLY EXIT NOW IS NORMAL DUMP
*                                 COMPLETED SUCCESSFULLY MSG
         ICM   OUTREG,HEX8,LMSG05I  LENGTH OF MSG
         SR    INREG,INREG        SET UP FOR DUMP ENDED MSG
         BAL   CREG,CONSOLE       GO PRINT END MSG
         AIF   ('&TYPE2' EQ 'HI').CALLPRO
         B     CLEANUP
         AGO   .EQUATES
.*   MACRO SECTION 17                                          @ZA27964
.CALLPRO AIF   ('&IPL2'(1,1) EQ 'T').CALLPGE
         EJECT
*************************************************************@ZA17663*
*                                                            @ZA17663*
*  LOAD THE PRECURSOR PROGRAM TO MAKE THE LINKAGE TO         @ZA27964*
*  THE VIRTUAL DUMP PHASE. BECAUSE THE PRECURSOR WILL        @ZA27964*
*  OVERLAY THE LAST HALF OF THIS MODULE, THE PORTION OF      @ZA27964*
*  THIS LOGIC THAT FOLLOWS THE RETURN FROM DUMPSIO IS        @ZA27964*
*  LOCATED IN THE FIRST HALF OF THE MODULE.                  @ZA27964*
*                                                            @ZA17663*
*************************************************************@ZA17663*
         SPACE 1                                               @ZA17663
GETPRO   DS    0H                 PRECURSOR INTERFACE RTN      @ZA17663
         OI    CTFLG1,CTDEVICE    SET UP DA I/O
         OI    CTFLG1,CTERROR     SET UP ERROR REC SW
         SPACE
*  THE D.A. RECORD FORMAT AT THIS TIME IS AS FOLLOWS: SEEK,SRCH,TIC, *
*  READ, READ, SEARCH ADDRESS.  THE SEARCH ADDRESS IS BUMPED IN ORDER*
*  TO ALLOW A READ OF THE PRECURSOR RECORD AS RECORD N+2 WHERE N IS  *
*  THE RECORD NUMBER OF THE WORK RECORD.                             *
         SPACE
         IC    WORKREG1,CTCCHHR+6 .GET IPL CCHHR
         LA    WORKREG1,1(WORKREG1)   BUMP BY 1 FOR PRO RCD
         STC   WORKREG1,CTCCHHR+6   STORE IT BACK IN CCT
         MVI   READWK+4,HEX20     SET UP NO CMD CHAIN
         MVI   READWK+2,HEX78     SET ADDR IN STORAGE TO X'7800'
         LH    IODEVREG,CTINADDR .SET UP FOR I/O TO IPL DEV
         LA    CCWREG,SEEKWK      SET UP THE CCWS
         LA    RETREG,GETPROIO    CONTINUE AT GETPROIO         @ZA17663
         B     DUMPSIO            DO I/O TO GET PRECURSOR      @ZA17663
         AGO   .EQUATES
.CALLPGE ANOP
         B     PGEISIN
.*   MACRO SECTION 17                                          @ZA27964
.EQUATES ANOP
         AIF   ('&IPL2'(1,1) EQ 'T').NODA IF IPL FROM TAPE, SKIP DA
**********************************************************************
*                                                                    *
*  THIS CODE CONTAINS THE COMMON D.A. ERROR RECOVERY SUBSET          *
*                                                                    *
**********************************************************************
         SPACE
DARETRY  DS    0H                 DA RETRY ROUTINE
         TM    SENSE14,X'08'      NO RECORD FOUND COND
         BO    ERRMSG             ERROR, MSG AND WAIT STATE
         TM    SENSE07,X'01'      SEEK CHECK COND
         BO    ERRMSG             ERROR, MSG AND EXIT
         TM    SENSE01,HEX40      INTERVENTION REQUIRED COND
         AIF   ('&TYPE2' EQ 'HI').HIDAWK
         BNO   DATRYA             ON ALL OTHER CASES RETRY 16 TIMES
.HIDAWK  ANOP
         BO    IPLINTV            GO TO INTV REQ
         TM    SENSE06,X'02'      TRK CONDITION CHECK ?
         BNO   DATRYA             RETRY 16 TIMES ON OTHER CASES
         AIF   ('&TYPE2' EQ 'LO').SKIPLO                     @ZA24157
         XC    ALTCCHHR(12),ALTCCHHR .ZERO ALT TRK INPUT AREA
         OI    CTFLG1,CTERROR     SET NO ERROR REC SW
         LA    CCWREG,ERRSEEK     SET UP FOR OBTAINING ALT TRK
         BAL   RETREG,DUMPSIO     GO ISSUE ERROR SEEK
         TM    CTFLG1,CTERROR     DID ERROR OCCUR ?
         BNO   WKFLDONE           YES, NO MORE WORK FILE
         TM    ALTCCHHR,X'02'     DEFECTIVE TRACK
         BNO   WKFLDONE           NO, NO MORE WORK FILE
         LA    CCWREG,SEEKSA      SET UP TO SEEK TO ALT TRK,
         BAL   RETREG,DUMPSIO     AND SEARCH TO ORIGINAL
         TM    CTFLG1,CTERROR     ERROR OCCUR ?
         BNO   WKFLDONE           YES, NO MORE WORK FILE
.SKIPLO  ANOP                                                @ZA24157
         NI    CTFLG1,HEXFF-CTERROR .TURN OFF ERROR SW
         SR    RETCODE,RETCODE    ZERO RETURN CODE
         LR    RETREG,WORKREG3    RESTORE CALLERS REGISTER
         BR    RETREG             RETURN TO CALLER
IPLINTV  DS    0H                 IPL INTV REQUIRED CODE
         MVC   MSG14I+13(3),IPLMSG SET UP IPL DEV MSG
         MVI   LMSG14I,HEX14      SET PROPER MSG LENGTH
         B     INTVR2             RETRY THE I/O OPERATION AFTER MSG
DATRYA   DS    0H                 DA RETRY CODE
         L     ERROREG,CTERBDA    OBTAIN THE DA RETRY CTR
         LTR   ERROREG,ERROREG    RETRY IN PROCESS?
         BNZ   DARETRY1           YES, SET RETRY
         LA    ERROREG,17         NO, INIT RETRY CTR
DARETRY1 DS    0H                 16 RETRY CODE
         LA    CCWREG,SEEKWK      RESTORE THE WORK CCW FROM START
         BCT   ERROREG,DARESIO    DEC CTR, AND RETRY OPER
         MVI   ENDUP1+1,HEXF0     TURN OFF EXIT SW FOR PERM ERR
         B     ERRMSG             EXIT AND WAIT STATE COND
DARESIO  DS    0H
         ST    ERROREG,CTERBDA    SAVE RETRY CTR
         B     DUMPSIO            RETRY THE OPERATION
.NODA    ANOP                     SKIP DA ERROR RECOVERY     @ZA24157
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE REGISTER EQUATES FOR THE PROGRAM        *
*                                                                    *
**********************************************************************
         SPACE
SAVREG   EQU   0                  TEMPORARY SAVE REGISTER
LOOPCTR  EQU   1                  PROTECTION KEY CTR REG
TIOREG   EQU   1                  RETURN REG FOR TIOLOOP RTN   @ZA56338
STORADDR EQU   2                  CURRENT ADDR OF BLOCK PROCESSED
STORWORK EQU   3                  ADDR OF BLOCK WRITTEN FROM
KEYREG   EQU   4                  WORKREG FOR STORAGE KEY
ERROREG  EQU   4                  ERROR RECOVERY REG FOR ERB
LINEREG  EQU   4                  OUTPUT LINE POSITION
INREG    EQU   5                  WORKREG INPUT PROCESSING FROM OPER
WORKREG1 EQU   5                  WORK REG FOR CONVERSION/FORMAT RTN
OUTREG   EQU   6                  WORKREG OUTPUT PROCESSING FROM OPER
WORKREG2 EQU   6                  WORKREG TO CONTAIN DEV ADDR
INCREG   EQU   6                  INCREMENT REG ON BXLE
LIMITREG EQU   7                  LIMIT ON BXLE
WORKREG3 EQU   7                  CONVERTED DEV ADDR REG
DUPREG   EQU   7                  DUPLICATE LINE REG
LOOPREG1 EQU   7                  OUTER CTR CONTROL
BUFFREG  EQU   8                  BUFFER REGISTER PTR
LOOPREG2 EQU   8                  INNER LOOP CTL ON CONVERT
WORKREG4 EQU   8                  REG INDICATING CHAR TO CONVERT
MSGREG   EQU   9                  MESSAGE REGISTER IF ERROR OCCURS
IODEVREG EQU   10                 DEVICE TO PERFORM SIO ON
CCWREG   EQU   11                 CCW'S TO EXECUTE SIO FOR
BASEREG  EQU   12                 THIS IS THE PROGRAM BASE REGISTER
CCTREG   EQU   12                 BASE REG FOR CCT
RETREG   EQU   13                 RETURN REGISTER
CREG     EQU   14                 THIS REG IS USED TO BALR TO SIO RTN
RETCODE  EQU   15                 RETURN CODE REGISTER
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION DEFINES THE CONSTANTS USED IN THE PROGRAM            *
*                                                                    *
**********************************************************************
         SPACE
MSGHDLEN EQU   11                 MSG HEADER LENGTH
TITLEN   EQU   100                TITLE LENGTH
         AIF   ('&TYPE2' EQ 'LO').LENGTH1 TYPE LOW WRITES 121 BYTE RCDS
DUMPLNGH EQU   4096               LENGTH OF DUMP RCD
TAPEWREC EQU   24576              24K WORK RECORD ON TAPE
         AGO   .VARCONS           PICK UP ALL VARIABLES
.LENGTH1 ANOP                     LOW SPEED DUMP LENGTH
DUMPLNGH EQU   121                SET UP FOR 121 BYTE OUTPUT RCD
.VARCONS ANOP                     VARIABLES
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE VARIABLE CONSTANTS FOR THE PROGRAM      *
*                                                                    *
**********************************************************************
         SPACE
FLCMCNP  EQU   X'70',8            MCHK NEW PSW LOCATION        @ZA27964
FLCMCOP  EQU   X'30',8            MCHK OLD PSW LOCATION        @ZA27964
FLCINPSW EQU   X'78',8            I/O NEW PSW                  @ZA56338
CSW      EQU   X'40',8            LOCATION OF CSW IN PERMANENT STORAGE
CAPS     EQU   X'40'              MAKE ALL INPUT CAPITAL LETTERS
CAW      EQU   X'48'              CHANNEL ADDRESS WORD IN PERM STORAGE
IOADDR   EQU   186                LOCATION OF I/O DEV ADDR IN STORAGE
LOWCORE1 EQU   8                  LOW STORAGE SAVE AREA
LOWCORE2 EQU   6                  LOW STORAGE SAVE AREA FOR CSW
LOCORE14 EQU   14                 RET CODE SAVE AREA
GPRLOC   EQU   384                LOCATION IN PS OF GPR
CRLOC    EQU   448                LOCATION IN PS OF CR
CR1LOC   EQU   CRLOC+4            CR1 LOCATION
PSASTOR  EQU   X'31C'             PSA LOCATION
CR1ALOC  EQU   PSASTOR            CR1 ALTERNATE LOC
STSTGPRS EQU   X'180'             LOC OF STORE STAT REGS
FPLOC1   EQU   352                LOCATION IN PS OF FP 0&2
FPLOC2   EQU   368                LOCATION IN PS OF FP 4&6
CURRPSW  EQU   256                LOCATION IN PS OF CURRENT PSW
PRADDR   EQU   264                LOCATION OF PREFIX REG IN PS
PGMNEW   EQU   X'68'           LOCATION OF PGM CHECK NEW PSW IN STORAGE
PGMOLD   EQU   40                 PGM OLD PSW
EXTOLD   EQU   X'18'              EXTERNAL OLD PSW
EXTNEW   EQU   X'58'              EXTERNAL NEW PSW
IOOLD    EQU   X'38'              I/O OLD PSW
IOINTDEV EQU   X'BA'              IPL LOCATION                 @ZA56338
TRTABLE  EQU   384                TRT TABLE IN LO STORAGE
IPLCCHHR EQU   X'134'             IPL CCHHR LOCATION
ADDRSAVE EQU   SAVECSW+8          SAVE AREA FOR ADDR IN CONVERT
DUPSW    EQU   CTFLG2             DUPSW IS DUPLICATION LINE BIT 2
BLANK    EQU   C' '               EBCDIC BLANK
WORK     EQU   SAVECSW+3          OVERLAY INIT AREA WITH WORK AREA
DECIMAL  EQU   X'F0'              DECIMAL DIGIT PREFIX
ASK      EQU   C'*'               CHAR * FOR FORMAT BUFFER
COMMA    EQU   X'6B'              COMMA
A        EQU   C'A'               LETTER A
F        EQU   C'F'               LETTER F
R        EQU   C'R'               LETTER R
V        EQU   C'V'               LETTER V
NOP      EQU   X'00'              USED TO CHANGE BRANCH INST
         AIF   ('&OUTPUT2'(1,1) EQ 'P').ERB1 FOR PTR SKIP TAPE ERB
ERBRETRY EQU   CTERBTPE+3         ERB RETRY BYTE
ERBID    EQU   CTERBTPE           ERB IDENTIFICATION BYTE
ERBCTRP  EQU   CTERBTPE+2         ERB PRIMARY RETRY BYTE
ERBCTRS  EQU   CTERBTPE+2         ERB SECONDARY RETRY BYTE
.ERB1    ANOP                     DEFINE WORKAREA
WORKAREA EQU   X'1000'            AREA INTO WHICH WORK RECORD WILL
*                                 BE READ
LOOPCT   EQU   64                 LOOP COUNTER
REALNGTH EQU   X'800'             LENGTH OF REAL DUMP
RPPLNGTH EQU   X'6000'            REAL,PAGE,PRECURSOR LENGTH
IPLNGTH  EQU   24                 LENGTH OF IPL 1
DAREAD   EQU   X'06'              DA READ COMMAND
SRCHCCW  EQU   X'31'              SEARCH CCW ON DA
SRCHLNGH EQU   5                  SEARCH LENGTH
DAWRITE  EQU   X'05'              DA WRITE COMMAND
WORKCCW1 EQU   272                START OF DA WORK CCW'S
WORKREAD EQU   X'148'             WORK READ COMMAND LOC
WORKWRTE EQU   X'140'             WORK WRITE COMMAND LOC
WORKID   EQU   X'15A'             WORK SEARCH ADDR LOC
IOWAIT   EQU   4                  IO WAIT STATE CMD
         AIF   ('&TYPE2' EQ 'LO').SKIP
PGMSAVE  EQU   DUMPTITL           FOR SAVING PSW'S
.SKIP    ANOP
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE MASKS USED TO TEST VARIABLES IN THE PGM *
*                                                                    *
**********************************************************************
         SPACE
SPACE1   EQU   X'0B'              SPACE 1 LINE IMMED COMMAND
PROLDERR EQU   X'0D'              WAIT CODE ERROR LOADING PRO
WRCKD    EQU   X'1D'              WRITE COUNT KEY DATA
HEX1F    EQU   X'1F'              WTM COMMAND CODE
HEXFF    EQU   X'FF'              FOR DEV ADDR TR
HEX07    EQU   X'07'              GRAPHICS CCW
HEX09    EQU   X'09'              REWIND COMMAND CODE
HEX10    EQU   X'10'              EQUIPMENT CHECK STATUS
HEX11    EQU   X'11'              PTR WRITE SPACE 2 AFTER PNT
HEX12    EQU   X'12'
HEX14    EQU   X'14'              USED FOR IPL DEV MSG LENGTH
HEX16    EQU   X'16'              READ RCD 0 CMD
HEX17    EQU   X'17'              ERG COMMAND CODE
HEX1A    EQU   X'1A'              READ HOME ADDR CMD
HEX20    EQU   X'20'              CONSTANT TO ALTER FLAG BITS IN CCW
HEX24    EQU    X'24'             FLAG BIT FOR SLI AND IDA IN CCW
         AIF   ('&OUTPUT2'(1,1) NE 'P').HEX27                  @Z40MI3F
*                                 OR SENSE ERROR LOG FULL CMD  @Z40MI3F
.HEX27   ANOP                                                  @Z40MI3F
HEX27    EQU   X'27'              FOR BUFFER READ CCW
HEX30    EQU   X'30'              NO DATA XFER
HEX31    EQU   X'31'              SEARCH CMD
HEX37    EQU   X'37'              TAPE FORWARD SPACE BLOCK COMMAND
         AIF   ('&OUTPUT2'(1,1) NE 'P').HEX40                  @Z40MI3F
*                                 OR INITIALIZE PRINTER CMD    @Z40MI3F
.HEX40   ANOP                                                  @Z40MI3F
HEX40    EQU   X'40'              INCORRECT LENGTH COMPARE
HEX58    EQU   X'58'              LENGTH COUNTER
HEX70    EQU   X'70'              COMMAND CHAIN NO DATA XFER
HEX78    EQU   X'78'              ENTRY POINT OF PRECURSOR ROUTINE
HEX7F    EQU   X'7F'              FOR RESTORE OF ERRFLG
HEX80    EQU   X'80'              SETTING FOR CTERRFLG
HEX82    EQU   X'82'              SETTING FOR ATTNQ AND UNIT CHK COND
HEX88    EQU   X'88'              CTERROR,CTMORTPE SWITCH
HEX8B    EQU   X'8B'              PTR SKIP TO CHAN 9 COMMAND
HEX93    EQU   X'93'              7 TRK MODE SET
HEX1     EQU   B'0001'            CPUID MASK
HEX3     EQU   B'0011'            ADDRESS MASK
HEX7     EQU   B'0111'            ADDRESS MASK
HEX8     EQU   B'1000'            DATA MASK
HEXC     EQU   B'1100'            MASK FOR FIRST TWO BYTES OF REG
HEXF     EQU   B'1111'            FOR FULL WORD STORE CHAR MASK
HEXA0    EQU   X'A0'              DATA CHAINING CMD-TAPE
HEXAF    EQU   X'AF'              MASK TO RESET DA I/O
HEXB3    EQU   X'B3'              7 TRACK TAPE MODESET
HEXBF    EQU   X'BF'              MASK TO RESET DA I/O
HEXC0    EQU   X'C0'              ALPHNUMBERIC CHAR COMPARE BYTE
HEXDF    EQU   X'DF'              DUPLICATE SWITCH ON-OFF
HEXC3    EQU   X'C3'              9 TRACK TAPE MODESET
HEXD3    EQU   X'D3'                   6250BPI MODESET         @ZA04267
HEXE0    EQU   X'E0'              PTR SEVERE ERROR COND
HEXF0    EQU   X'F0'              USED FOR CHANGING TAPESW NOP TO BC 15
HEXF7    EQU   X'F7'              END OF REEL SWITCH PROCESSING
HEXFD    EQU   X'FD'              WORK RECORD RESET FLAGS
HEXFE    EQU   X'FE'              FOR RESET OF STORAGE KEY BIT
HIMASK   EQU   X'80'              USED FOR HIGH ORDER BYTE OF REG
MASK12   EQU   X'C0'              USED FOR FIRST HALF OF REG
HEX3F    EQU   X'3F'              CHECK FOR CATASTROPHIC CHANNEL ERROR
SKIPSP1  EQU   X'F0'              TAPE SPACE CONTROL SWITCH
TPRECLEN EQU   X'6000'            RCD LENGTH 24K
HEX800   EQU   X'800'             ADDRESS INCREMENT
*  COMMON I/O EQUATES
TICMD    EQU   X'08'              TIC COMMAND
SENSECMD EQU   X'04'              SENSE COMMAND CODE
NODATA   EQU   X'B0'              NO DATA TRANSFERRED
.COMCONS ANOP                     COMMON CONSTANTS
         EJECT
**********************************************************************
*                                                                    *
*  THESE ARE THE DC CONSTANTS                                        *
*                                                                    *
**********************************************************************
         SPACE
         DS    0H                 SET UP XC ON HALFWORD BOUNDRY
         AIF   ('&TYPE2' EQ 'LO').LESSERC SKIP BUS CK ERB'S
STARTADR DC    A(0-4096)          INIT ADDR FOR REAL DUMP
INCRBLKS DC    F'4096'            INCREMENT IN 4K BLKS FOR DUMP
SAVERET1 EQU   DUMPTITL+8         TEMP SAVE FOR RETREG
SAVERET2 EQU   DUMPTITL+4         TEMP SAVE FOR RETREG
         AIF   ('&IPL2'(1,1) EQ 'T').NODAWK
DEVSAVE  DS    F'0'               FOR ADDR OF DEV TYPE
CCHHW    DS    F'0'               WORKFILE CCHH
TABLNG   DS    0H                      SET UP TABLE
D2305A   DC    H'48'                   TRK CAPACITY ON 2305-1
         DC    H'08'                   TRKS PER CYLINDER
         DC    H'06'                   DEVICE ID
         DC    H'02'                   RCD PER TRK COUNT -1
D2305B   DC    H'96'                   TRK CAPACITY ON 2305-2
         DC    H'08'                   TRKS PER CYLINDER
         DC    H'07'                   DEVICE ID
         DC    H'02'                   RCD PER TRK COUNT -1
D3330    DC    H'411'                  3330 TRK CAPACITY
         DC    H'19'                   TRKS PER CYLINDER
         DC    H'09'                   3330 ID
         DC    H'02'                   RCD PER TRK COUNT -1
D2314    DC    H'203'                  TRK CAPACITY ON 2314
         DC    H'20'                   TRKS PER CYLINDER
         DC    H'08'                   2314 ID
         DC    H'00'                   RCD PER TRK COUNT -1
D3330A   DC    H'815'                  3330-1 TRK CAPACITY
         DC    H'19'                   TRKS PER CYLINDER
         DC    H'13'                   3330-1 ID
         DC    H'02'                   RCD PER TRK COUNT -1
D3340A1  DC    H'349'                   3340A2 TRK CAPACITY
         DC    H'12'                   TRKS PER CYLINDER
         DC    H'10'                   3340 ID
         DC    H'01'                   RCD PER TRK COUNT -1
D3340A2  DC    H'698'                   3340A3 TRK CAPACITY
         DC    H'12'                   TRKS PER CYLINDER
         DC    H'10'                   3340 ID
         DC    H'01'                   RCD PER TRK COUNT -1
D3350    DC    H'560'                  3350 TRACK CAPACITY     @Z30RSTA
         DC    H'30'                   TRKS PER CYLINDER       @Z30RSTA
         DC    H'11'                   3350 ID                 @Z30RSTA
         DC    H'03'                   RCD PER TRK COUNT -1    @Z30RSTA
TABEND   DC    XL1'FF'                 END OF TABLE
ENDTAB   EQU   X'FF'                   END OF TABLE MASK
WKRCDCCW CCW   HEX07,SEEKADDR,X'60',6   SEEK COMMAND
READHA   CCW   HEX1A,DUMPTITL,HEX70,5 READ HOME ADDR
WKRCDSR  CCW   HEX31,SEEKADDR+2,X'60',5 SEARCH COMMAND
         CCW   X'08',WKRCDSR,X'60',1 .TIC TO SEARCH
WKRCDWRT CCW   WRCKD,IDAWORD,HEX24,DUMPLNGH+8 WRITE WK FILE RCD
ERRSEEK  CCW   HEX07,SEEKADDR,X'60',6 SEEK TO DEF TRK
         CCW   HEX1A,ALTCCHHR,X'60',5 READ HOME ADDR OF DEF TRK
         CCW   HEX16,ALTCCHHR+8,HEX20,4 READ RCD 0 FROM DEF TRK
SEEKSA   CCW   HEX07,ALTCCHHR+6,X'60',6 SEEK TO ALT TRK
         CCW   X'08',READHA,X'60',1    TIC TO READ HOME ADDR
ALTCCHHR DC    3F'0'              ALT TRK CCHHR LOC
SEEKADDR DC    2F'0'              SEEK ADDR FOR WKFILE
         DS    0F
IDAWORD  DC    XL4'7FF8'          ADDRESS OF COUNT PORTION
IDAWORD1 DC    F'0'               ADDRESS OF 1ST 2K BLOCK
IDAWORD2 DC    F'0'               ADDRESS OF 2ND 2K BLOCK
.NODAWK  ANOP
.LESSERC ANOP                     EOJ DEFINITION
         AIF   ('&TYPE2' EQ 'HI').LSE10 FOR HI USE DIFFERENT ERB CTR
OVERUNTP DC    XL4'050005FF'      FIVE RETRY ERB
DATCKTPE DC    XL4'150010FF'      FIFTEEN RETRY ERB
KEYSAVE  DC    XL2'FFFF'          STORAGE KEY SAVE AREA
H32      DC    H'32'              32 TO BUMP STORWORK
SWITCH   DC    XL1'00'            SWITCH
ADDCNVRT EQU   X'80'              ADDR= CONVERT
TIME2    EQU   X'40'              SECOND CONVERT TIME
FOURKDWN DC    XL2'F000'          TO ROUND DOWN TO 4K BDY
ADDAREA1 EQU   CTADDRS+1          ADDR= RESPONSE AREA
ADDAREA2 EQU   CTADDRE+1          ADDR= RESPONSE AREA
         DS    0F
CR0INIT  DC    XL4'00800000'      TO INIT CR 0
CPUADDR  DC    XL2'0000'          CPU ADDRESS
REQCHAR  DC    CL1'R'             DUMP ID CHARACTER
.LSE10   ANOP                     EOJ DEFINITION
TEMPSAVE DC    F'0'               TEMP REG SAVE AREA
EOJSW    DC    XL5'000C000000'    PGM NEW, EC MODE & MCHK  @ZA27964
EOJSW1   DC    AL3(PGMCHK)        ADDR OF PGM CHECK RTN
KNINE    DC    H'9'               FOR CONVERT FROM EBCDIC TO BINARY
WORKSTRT DC    XL2'7000'          WORK RECORD LOCATION
STAPSW   DC    XL5'0008000000'
         DC    AL3(NOMP)          PSW FOR STAP INST
HALTPSW  DS    0D                      FINAL WAIT PSW
         DC    X'000A000000000000'
ALTPSW   DS    0D                     ALTERNATE CONSOLE PSW
         DC    XL8'030A0000000000FF' .ALT CONSOLE PSW
ALTEXPSW DC    XL5'0008000000'
AEXTINT  DC    AL3(EXTINT)        ALT CONSOLE EXTERN INT ADDR
ALTIOPSW DC    XL5'0008000000'    I/O INT PSW
AIOINT   DC    AL3(IOINT)         ALT CONSOLE I/O INT ADDR
         DS    0F
HIGHEST  DC    XL4'01000000'      HIGHEST STORAGE ADDR
COREBOX  DC    XL4'00040000'      AMT OF STORAGE PER COREBOX
FOURK    DC    XL2'1000'          LENGTH OF A 4K RECORD
MAXCORE  EQU   X'01'              MAX STORAGE ADDRESS
         DS    0H
MAXCPU   EQU   X'3F'              MAX ALLOWABLE CPU'S
SIGPSTAT EQU   X'09'              SIGP CODE
SIGPSTOP EQU   X'05'              SIGP CODE
         AIF   ('&IPL2'(1,1) EQ 'T').TWK1  TAPE IPL DIFFERENT WORK RCD
         DS    0F                 SET UP FOR WORK COMPARE
WORKEND  DC    XL4'00008000'      MAX WORK RECORD SIZE
         AGO   .WK3               SKIP TAPE WORK RCD
.TWK1    ANOP                     TAPE WORK RCD SIZE
         DS    0F                 SET UP FOR WORK COMPARE
WORKEND  DC    XL4'0000D000'      END OF WORK RCD FOR TAPE IPL
WKSTRT2  EQU   WORKEND            SECOND WORK RCD
ENDWKRCD DC    XL4'00013000'      END OF TAPE WORK RCD
         DS    0H                 SET UP ON BOUNDRY FOR LH
.WK3     ANOP
         AIF   ('&TYPE2' EQ 'LO').WK2
ONE28K   DC    XL4'00020000'      128 K FOR WORK RCD
.WK2     ANOP                     COMMON PROCESSING
WORKADDR DC    XL2'1000'          WORK ADDR LOCATION
         AIF   ('&TYPE2' EQ 'HI').MSG SKIP LOW SPEED CONST FOR HI
         EJECT
**********************************************************************
*                                                                    *
*  CONSTANTS FOR LOW SPEED REAL DUMP ONLY.  THIS INCLUDES TRANSLATE  *
*  TABLES AND PRINTER CODE (NOT THE CHANNEL PROGRAMS) FOR LOW SPEED  *
*                                                                    *
**********************************************************************
         SPACE
REGSAVE  DC    F'0'               REG SAVE AREA FOR R14
SAVEDUP  DC    F'0'               DUP LINE ADDR SAVE AREA
LOWCOREA DC    H'64'              FOR CSW AND CAW RESTORE
         DS    0F
OUTCTL   DC    XL1'F1'            CARRIAGE CONTROL CHAR
OUTLINE  DC    CL11'DUMP TITLE ' .HEX LINE CONVERT
OUTDATA  DC    CL75' '            OUTPUT DATA FIELD
OUTASK1  DC    CL1' '             DELIMITER FOR FORMATTED EBCDIC SECT
FORMBUF  DC    CL32' '            FORMATTED HEX
OUTASK2  DC    CL1' '             END OF FORMATTED EBCDIC SECTION
TRANLATE DC    C'.ABCDEFGHI......' TRANSLATE TABLE FOR CONVERT OF
         DC    C'.JKLMNOPQR......' HEXADECIMAL CONSTANTS TO
         DC    C'..STUVWXYZ......' EBCDIC CHARACTERS ON RHS OF PAGE
         DC    C'0123456789......' NUMBER CONVERSIONS
         DC    C' '               BLANK CHAR CONVERSION
HEXTAB   DC    C'0123456789ABCDEF' HEX TRANSLATION TABLE
HEADLNGH EQU   OUTDATA+68         SET HEADING TITLE IN OUTPUT LINE
DUMPRCD  EQU   OUTCTL             SET UP OUTPUT LINE
DUMPTITL EQU   OUTDATA            TITLE AND SAVE AREA
VIRTAREA EQU   DUMPTITL           INPUT FOR ADDR= RESPONSE
SAVERET1 EQU   DUMPTITL+8         TEMP SAVE FOR RETREG
SAVERET2 EQU   DUMPTITL+4         TEMP SAVE FOR RETREG
PGMSAVE  DC    4F'0'              PSW SAVE AREA
REALADDR EQU   DUMPRCD            FOR TAPE CCW
.MSG     ANOP                     MESSAGES
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION CONTAINS THE MESSAGES USED BY AMDSADMP               *
*                                                                    *
**********************************************************************
         SPACE
MSG11D   DC    C'11A TITLE='      FOR THE DUMP TITLE REQUEST
LMSG11D  DC    XL1'0A'            LENGTH OF MSG11D MSG
         ORG   MSG11D             USE MSG11 TEXT FOR SAVE AREA @ZA56338
LCSAVE   DS    F                  SAVEAREA FOR LOOPCTR         @ZA56338
         ORG
         SPACE 1                                               @ZA56338
MSG05I   DC    C'05I REAL DUMP DONE' NORMAL ENDING MESSAGE
LMSG05I  DC    XL1'12'            LENGTH OF MSG05I
IPLMSG   DC    C'IPL'             INTERVENTION REQ ON IPL DEV
         SPACE
CONSCODE EQU   MSG21I             INVALID CONSOLE ADDR MSG
ENDMSG   EQU   MSG05I             NORMAL ENDING MESSAGE
L3       DC    X'03'              DEVICE LENGTH
L14      DC    XL1'0E'            ADDR REPLY LENGTH
L100     DC    XL1'64'            TITLE LENGTH
         AIF   ('&TYPE2' EQ 'HI').MSG1 SKIP FOR HI SPEED DUMP
MSG09I   DC    C'09I CR1 INVALID'
LMSG09I  DC    XL1'0F'            MSG LENGTH
MSG08A   DC    C'08A ADDR='       ADDR RANGE REQUEST
LMSG08A  DC    XL1'09'            LENGTH OF MSG 08A
PSWMSG   DC    C'CURRENT PSW'     CURRENT PSW MSG
KEYMSG   DC    C'STORAGE KEY'     STORAGE PROTECTION KEY MSG
PRMSG    DC    C'PR'              PREFIX REG MSG
CPUIDMSG DC    C'CPU ID'          CPU ID RECORD HEADER
GR07     DC    C'GR 0-7'          GR MSG
GR8F     DC    C'8-F'             GR MSG
CR07     DC    C'CR 0-7'          CR MSG
CR8F     EQU   GR8F               CR 8-F MSG
FR02     DC    C'FR 0-2'          FP REG MSG
FR46     DC    C'4-6'             FP REG MSG
.MSG1    ANOP                     COMMON MSG AREA
         AIF   ('&OUTPUT2'(1,1) EQ 'P').MSG2 IF PTR SPECIAL MSG
MSG1A    DC    C'01A TAPE='       INPUT REQUEST FROM TAPE
         AGO   .MSG3              SKIP PTR MSG
.MSG2    ANOP                     PTR MSG
LMSG1A   DC    XL1'8'             LENGTH OF THE MSG1A MSG
MSG1A    DC    C'01A PTR='        INPUT REQUEST LOW SPEED FROM PTR
.MSG3    ANOP                     COMPLETION OF MSG
         EJECT
***********************************************************************
*                                                                     *
*  MACHINE CHECK HANDLER, DATA, AND DATA AREAS FOR SKIPPING OVER PAGE *
*  FRAMES WITH POSSIBLE STORAGE CHECKS PRIOR TO INITIATING I/O        *
*                                                             @ZA27964*
***********************************************************************
MCHKFLG  DC    AL1(0)             FLAG  BYTE FOR MACH CHK      @ZA27964
MCHKPE   EQU   X'40'              ON INDICATES THAT THE MACH CHK
*                                 HANDLER IS SET UP            @ZA27964
MCHKOK   EQU   X'80'              ON INDICATES THAT THE FRAME ABOUT TO
*                                 BE DUMPED IS BEING TESTED TO SEE
*                                 IF IT WILL CAUSE A STOR CHK  @ZA27964
MCHKSK   EQU   X'20'              ON INDICATES THAT THE STOR KEY IS
*                                 BEING OBTAINED AND IF IT IS BAD A
*                                 PHONIE ONE SHOULD BE USED    @ZA27964
MCHKCNT  DC    H'-13'             COUNT OF UNEXPECTED MCHK. WHEN IT
*                                 REACHES 0 LOAD A WAIT PSW    @ZA27964
MCHKWAIT EQU   X'32'              WAIT STATE CODE USED WHEN AN EXCESS
*                                 OF UNEXPECTED MCHK OCCURR    @ZA27964
MCHKNPSW DS    0D                 MACH CHK NEW PSW             @ZA27964
         DC    XL5'000C000000'    EC MODE & MCHK               @ZA27964
         DC    AL3(MCHKHNDL)      MACH CHK HANDLER             @ZA27964
MCHKENBL DS    0D                 PSW TO ENABLE FOR MACH CHKS  @ZA27964
         DC    XL5'000C000000'    EC MODE & MCHK               @ZA27964
         AIF   ('&TYPE2' EQ 'HI').HIPSW BRANCH ADDR DIFFERENT  @ZA27964
         DC    AL3(PAST1000)      NEXT SEQ INST                @ZA27964
         AGO   .LOPSW                                          @ZA27964
.HIPSW   ANOP                                                  @ZA27964
         DC    AL3(TAPEGOT)       NEXT SEQ INST                @ZA27964
.LOPSW   ANOP                                                  @ZA27964
MCHKDSBL DS    0D                 PSW TO DISABLE FOR MCHK      @ZA27964
         DC    XL5'0008000000'    EC MODE                      @ZA27964
         DC    AL3(MCHKOUT)       NEXT SEQ INST                @ZA27964
MCHKCR14 DC    X'00000000'        MASK ALL LOGOUTS             @ZA27964
         AIF   ('&MCHK' EQ '').MTST002                         @ZA27964
* THE FOLLOWING CONSTANTS AND CODE ARE EXPANDED IF MCHK^= NULL
* ON THE MACRO. THE FUNCTION IS TO SET BAD ECC AT THE STORAGE LOCATIONS
* LISTED BELOW. THIS IS DONE USING THE DIAGNOSE INST TO STORE DATA
* WITHOUT UPDATING THE ECC (OR CHECK BYTE). IT IS INTENDED FOR USE
* ON A 370/158                                                 @ZA27964
MCHKSAVE DS    16F                SAVEAREA                     @ZA27964
         AIF   ('&MCHK' NE '158').MTST009                      @ZA27964
MCHKDG1  DC    X'0100D100'        SHUT OFF THE HARDWARE HIGH SPEED
*                                 BUFFER                       @ZA27964
MCHKDG2  DC    X'0500D100'        STOR OUTWITH ECC UPDATE      @ZA27964
MCHKDG3  DC    X'0200D100'        TURN ON HIGH SPEED BUFFER    @ZA27964
         AGO   .MTST010                                        @ZA27964
.MTST009 AIF   ('&MCHK' NE '168').MTST010                      @ZA27964
MCHKECC  DC    X'F9B7F9512365F9F9'                             @ZA27964
MCHKDG1  DC    X'0200001000000000' SHUT OFF THE HARDWARE HIGH SPEED
*                                 BUFFER                       @ZA27964
MCHKDG2  DC    X'0300000002000000' TURN OFF ECC UPDATE         @ZA27964
MCHKDG3  DC    D'0'                CLEAR THE MCW TO RESET CPU  @ZA27964
MCHKDG4  DC    X'0300000000000000' TURN ON ECC                 @ZA27964
.MTST010 ANOP                                                  @ZA27964
MCHKLOCS DC    XL4'2000'          THIS FIRST ADDRESS IS THE CRITERIA
*                                 FOR WHEN TO INSERT THE ERROR @ZA27964
* THE REST OF THESE ADDRESS ARE DOUBLEWORDS WHERE THE ERROR IS TO BE
* INSERTED BY THE FOLLOWING LOOP.                              @ZA27964
         DC    XL4'3148'                                       @ZA27964
         DC    XL4'4A48'                                       @ZA27964
         DC    XL4'5A48'                                       @ZA27964
         DC    XL4'5A68'                                       @ZA27964
         DC    XL4'5B48'                                       @ZA27964
MCHKSET  C     STORADDR,MCHKLOCS  TIME TO PUT IN THE ERRORS?   @ZA27964
         BL    MCHKHOOK+4         NO, KEEP ON RUNNING NORMAL   @ZA27964
         NI    MCHKHOOK+1,X'00'   NOP THE BRANCH TO HERE       @ZA27964
         DC    X'8300',S(MCHKDG1) SHUT OFF THE HARDWARE HIGH SPEED
*                                 BUFFER                       @ZA27964
         STM   0,15,MCHKSAVE                                   @ZA27964
         AIF   ('&MCHK' NE '168').MTST004                      @ZA27964
         LM    2,3,MCHKECC        SETUP VALUE TO STORE WHILE THE ECC
*                                 IS OFF                       @ZA27964
         AGO   .MTST005                                        @ZA27964
.MTST004 AIF   ('&MCHK' NE '158').MTST008                      @ZA27964
         LA    2,X'F9'            SET UP THE DATA TO BE STORED @ZA27964
         SLL   2,24               BY THE DIAGNOSE LATER        @ZA27964
         AGO   .MTST005                                        @ZA27964
.MTST008 ANOP                                                  @ZA27964
         MNOTE 12,'MCHK=&MCHK INVALID; TEST CODE IN ERROR'
.MTST005 ANOP                                                  @ZA27964
         LA    15,MCHKLOCS+4      ADDR OF FIRST ERROR LOCATION @ZA27964
         LA    5,MCHKSET          SETUP END OF LIST ADDR       @ZA27964
MCHKLOOP L     1,0(15)            ERROR LOC IN GPR 1 FOR DIAG  @ZA27964
         XC    0(8,1),0(1)        ZERO ERROR LOC               @ZA27964
         AIF   ('&MCHK' NE '158').MTST006                      @ZA27964
         LA    1,2(1)             USE THIRD BYTE OF ERROR LOC  @ZA27964
         DC    X'8300',S(MCHKDG2) STOR WITHOUT ECC UPDATE      @ZA27964
         AGO   .MTST007                                        @ZA27964
.MTST006 AIF   ('&MCHK' NE '168').MTST007                      @ZA27964
         DC    X'8300',S(MCHKDG2) TURN OFF THE ECC             @ZA27964
         STM   2,3,0(1)           STORE INTO THE LOC WHERE A STOR CHK
*                                 IS DESIRED SO THAT THE ECC AND THE
*                                 ACTUAL DATA ARE OUT OF SYNC  @ZA27964
         DC    X'8300',S(MCHKDG4) TURN THE ECC BACK ON AGAIN   @ZA27964
.MTST007 ANOP                                                  @ZA27964
         LA    15,4(15)           BUMP TO NEXT ERROR LOC       @ZA27964
         CR    15,5               CHECK FOR END OF LIST        @ZA27964
         BL    MCHKLOOP           NOT TO END YET               @ZA27964
         LM    0,15,MCHKSAVE                                   @ZA27964
         B     MCHKHOOK+4         RETURN TO NORMAL PROCESSING  @ZA27964
.MTST002 ANOP                                                  @ZA27964
         EJECT
***********************************************************************
*                                                                     *
*  MACHINE CHECK HANDLER                                       @ZA27964
*                                                                     *
***********************************************************************
         SPACE
MCHKHNDL EQU   *                                               @ZA27964
         AIF   ('&TYPE2' EQ 'HI').DAE003                       @ZA27964
         TM    MCHKFLG,MCHKOK     WAS THIS MCHK EXPECTED ?     @ZA27964
         BO    SKIPMCHK        NO,ASSUME THE ERROR IS DUE TO A STORAGE X
                                  CHECK IN THIS LINE AND SKIP          X
                                  TO THE NEXT ONE.             @ZA27964
.DAE003  ANOP                                            @ZA27964
         TM    MCHKFLG,MCHKSK     WAS ERROR ON AN ISK?         @ZA27964
         BO    MCHKKEYS           YES, CONTINUE DUMPING PAGE   @ZA27964
         LA    WORKREG1,1         NOT EXPECTED, SO             @ZA27964
         AH    WORKREG1,MCHKCNT   INCR THE UNEXPECTED COUNT    @ZA27964
         BC    10,MCHKHALT        IF THE LIMIT OF UNNEXPECTED MCHK HAS
*                                 BEEN REACHED BRANCH          @ZA27964
         STH   WORKREG1,MCHKCNT   OTHERWISE SAVE THE NEW VALUE @ZA27964
*                                 AND ATTEMPT TO IGNORE THE UNEXPECTED
*                                 MCHK BY RESTARTING           @ZA27964
         B     MCHKUNEX           ATTEMP TO CONTINUE INSPITE OF THIS
*                                 UNEXPECTED MACH CHK          @ZA27964
MCHKHALT MVI   CTWAIT,MCHKWAIT    IF UNEXPECTED MCHK KEEPS HAPPENING
*                                 THE HARDWARE MUST BE BAD.    @ZA27964
         B     WAITSTAT           SO SET UP A WAITSTATE CODE AND GO
*                                 INTO A WAIT                  @ZA27964
         EJECT
**********************************************************************
*                                                                    *
*  THIS SECTION DEFINES THE SENSE BYTE DEFINATIONS FOR TAPE DEVICES  *
*                                                                    *
**********************************************************************
         SPACE
SENSAREA EQU   CTSENSE            SENSE BYTE AREA
LBLADDR  EQU   DUMPTITL           LABEL INPUT AREA
         SPACE
*  SENSE BYTE 0
         SPACE
SENSE00  EQU   SENSAREA           CMD REJECT
SENSE01  EQU   SENSE00            INTERVENTION REQUIRED
SENSE02  EQU   SENSE00            BUS OUT CHECK
SENSE03  EQU   SENSE00            EQUIPMENT CHECK
SENSE04  EQU   SENSE00            DATA CHECK
SENSE05  EQU   SENSE00            OVERRUN CONDITION
SENSE06  EQU   SENSE00            TRACK CONDITION CHECK
SENSE07  EQU   SENSE00            NOT USED
         SPACE
*  SENSE BYTE 1
         SPACE
SENSE10  EQU   SENSAREA+1         NOT USED
SENSE11  EQU   SENSE10            NOT USED
SENSE12  EQU   SENSE10            T U CONDITION
SENSE13  EQU   SENSE10            SEVEN TRACK TAPE
SENSE14  EQU   SENSE10            LOAD POINT
SENSE15  EQU   SENSE10            NOT USED
SENSE16  EQU   SENSE10            NOT USED
         MEND
