* %GOTO IKJEXECPLS;                       /*
         MACRO
&NAME    IKJEXEC &LV=,&A=    MACRO FOR ISSUING OWN GETMAIN
         GBLA  &IKJEXA
         AIF   ('&SYSECT.' NE 'IKJCT433').IKJT436 TEST ID 433/436
         AIF   (&IKJEXA NE 0).T3FMAN    TEST IF FIRST CALL
&IKJEXA SETA 1
&NAME    LA    @00,4092      GET 4092 TO ADD TO COMPILERS SIZE
         AL    @00,@SIZDATD  ADD COMPILERS SIZE AND SUBPOOL
         GETMAIN R,LV=(0)    GETMAIN
         LR    @08,@01       GET ADDRESSABLILITY TO COMMON AREA
         LA    @01,4092(0,@01) ADD 4092 AND GIVE NORMAL AREA TO COMPLR
         MEXIT
.T3FMAN  ANOP
&NAME    LA    @00,4092      GET 4092 CONSTANT TO ADD TO SIZDATD
         AL    @00,@SIZDATD  GET SUBPOOL AND NORMAL SIZE
         FREEMAIN R,LV=(0),A=(8)
         MEXIT
.IKJT436 ANOP
         AIF   (&IKJEXA NE 0).T6FMAN   TEST IF FIRST CALL
&IKJEXA SETA 1
&NAME    LA    @01,300(0,@08) USE AREA GOTTEN IN 433 (SKIP COMMON)
         MEXIT
.T6FMAN  ANOP
&NAME    NOPR  @00
         MEND
*  */
 %IKJEXECPLS: ;

 @EJECT;
 /********************************************************************/
 /*                                                                  */
 /* *** IKJEXEC ***      LEVEL=11/05/75     OS/VS2 RELEASE 3.0       */
 /*                                                                  */
 /* DESCRIPTION - PLS MAPPING MACRO FOR CONTROL BLOCKS USED BY THE   */
 /*               TSO EXEC COMMAND PROCESSOR                         */
 /*                                                                  */
 /* FUNCTION    - CONTAINS CONTROL BLOCK MAPPINGS FOR THE FOLLOWING  */
 /*               DATA AREAS USED BY THE TSO EXEC COMMAND            */
 /*                 - PHASE 1 EXEC COMMAND COMMON DATA AREA          */
 /*                 - EXECDATA CONTROL BLOCK                         */
 /*                 - COMMAND PROCEDURE STORAGE BLOCK                */
 /*                 - SYMBOLIC NAME TABLE (SNTAB)                    */
 /*                 - SYMBOLIC VALUE TABLE (SVTAB)                   */
 /*                 - SNTAB CONTROL SYMBOLIC PARAMETER AREA          */
 /*                 - PHASE2 COMMON DECLARES                         */
 /*                                                                  */
 %GOTO PROEND;
 /* METHOD OF ACCESS                                                 */
 /*             - PHASE 1 EXEC COMMAND DATA AREA                     */
 /*                 %IKJECDA='' TO INCLUDE MAP                       */
 /*                 %ECDABASE='ANY BASE'  - - - DEFAULT IS           */
 /*                                            BASED(ECDAPTR)        */
 /*             - EXECDATA CONTROL BLOCK                             */
 /*                 %IKJEDAT='' TO INCLUDE MAP                       */
 /*                 %EDATBASE='ANY BASE' - - DEFAULT IS              */
 /*                                         BASED(LSDEXEC)           */
 /*             - COMMAND PROCEDURE STORAGE BLOCK                    */
 /*                 %IKJCOMP='' TO INCLUDE MAP                       */
 /*                 %COMPBASE='ANY BASE' - - DEFAULT IS              */
 /*                                         BASED(ECDACBLK)          */
 /*             - SYMBOLIC NAME TABLE AND ELEMENT                    */
 /*                 %IKJNTAB='' TO INCLUDE MAP                       */
 /*               SNTAB TABLE IS BASED ON SNTABPTR (INCLUDED)        */
 /*               SNTAB ELEMENT IS BASED ON SNTELPTR (INCLUDED UNLESS*/
 /*                 %IKJSNTELPTR='NO' NOT TO INCLUDE SNTELPTR        */
 /*                                                                  */
 /*             - SYMBOLIC VALUE TABLE AND ELEMENT                   */
 /*                 %IKJVTAB='' TO INCLUDE MAP                       */
 /*               SVTAB TABLE IS BASED ON SVTABPTR (INCLUDED)        */
 /*                 %SVELBASE='ANY BASE' - USE TO SET SVTAB ELEMENT  */
 /*                                       BASE. THE DEFAULT IS       */
 /*                                       BASED(SNTVLPTR)            */
 /*             - SNTAB CONTROL SYMBOLIC PARAMETER AREA              */
 /*                 %IKJCVMAP='' TO INCLUDE MAP                      */
 /*                 %CVARBASE='ANY BASE' - - DEFAULT IS              */
 /*                                         BASED(SNTELFST)          */
 /*             - PHASE2 COMMON DECLARES                             */
 /*                 NORMALLY NOT INCLUDED. TO INCLUDE                */
 /*                 SET %IKJEXECPHASE2='YES'                         */
 /*                                                                  */
 /*                                                                  */
 /*           %INCLUDE SYSLIB(IKJEXEC)                               */
 /*                                                                  */
 /* NOTES        - IF AN INDIVIDUAL DATA AREA MAP IS NOT REQUIRED    */
 /*                THEN SET THE APPROPRIATE MACRO VARIABLE TO A      */
 /*                NON NULL STATE                                    */
 /*                                                                  */
 /* CHANGE ACTIVITY =                                                */
 /* ADD NOLASTCC BIT IN EXECDATA CONTROL BLOCK               @ZA03879*/
 /* A 020450                                                @OZ32353 */
 /* OZ97838 - ADD SW2RTRN AND RTRNSTMT TO INDICATE RETURN            */
 /*           FUNCTION FROM A CLIST ATTENTION EXIT           @ZA97838*/
 /*                                                                  */
 /* OY09313 - DEFINE STAECNT TO CONTROL RECURSIVE ABENDS     @YA09313*/
 /*           AND ISSUE MESSAGE                              @YA09313*/
 /*                                                                  */
 %PROEND: ;
 /********************************************************************/
 @EJECT;
    %NPAGE='@EJECT';
    %IF IKJECDA^='' %THEN
      %GOTO EDATCHK;
    %IF ECDABASE^='' %THEN
      %GOTO ECDA1;
    %ECDABASE='BASED(ECDAPTR)';
    DCL
      ECDAPTR PTR(31);              /* PHASE 1 COMMON DATA ADDRESS   */
 %ECDA1:
    ;

    /*****************************************************************/
    /*                                                               */
    /* PHASE 1 EXEC COMMON DATA AREA                                 */
    /*                                                               */
    /*****************************************************************/

    DCL
      1 ECDA ECDABASE,
       2 ECDACPPL PTR(31),          /* CPPL ADDRESS                  */
       2 ECDAGADD PTR(31),          /* ADDRESS OF FIRST SP78 CORE    */
       2 ECDAEANS PTR(31),          /* PARSE PDL ADDRESS FOR EXPLICIT
                                       EXEC                          */
       2 ECDALSD PTR(31),           /* LSD FOR THE COMMAND PROCEDURE
                                       BEING BUILT                   */
       2 ECDAIREC PTR(31),          /* CURRENT INPUT RECORD ADDR     */
       2 ECDACBLK PTR(31),          /* CURRENT COMMAND PROCEDURE
                                       BLOCK ADDRESS                 */
       2 ECDACPRE PTR(31),          /* LAST COMMAND PROCEDURE RECORD
                                       ADDRESS                       */
       2 ECDACNXT PTR(31),          /* NEXT COMMAND PROCEDURE RECORD
                                       ADDRESS                       */
       2 ECDASPTR PTR(31),          /* ADDRESS OF IOPL PREPARED BY
                                       IKJCT430 FOR GETALINE RTN     */
       2 ECDALCTR FIXED(31),        /* NUMBER OF COMMAND RECORDS READ
                                       FROM INPUT DATA SET           */
       2 ECDALNEL PTR(31),          /* ADDRESS OF LAST SNTAB ELMT    */
       2 ECDAGCNT FIXED(31),        /* GLOBAL COUNT AREA             */
       2 ECDANDO FIXED(15),         /* OPEN DO COUNT                 */
       2 ECDAELNG FIXED(15),        /* ALTERNATE END LENGTH          */
       2 ECDAAEND CHAR(4),          /* ALTERNATE END                 */
       2 ECDAFLAG CHAR(2),          /* PHASE 1 FLAG AREA             */
        3 IMPLICIT BIT(1),          /* ON IF IMPLICIT EXEC           */
        3 NOTEXEC BIT(1),           /* ON IF PROCEDURE CAN NOT BE
                                       EXECUTED DUE TO ERRORS        */
        3 SP78CORE BIT(1),          /* ON WHEN SUBPOOL 78 CORE HAS
                                       BEEN GOTTEN                   */
        3 * BIT(1),
        3 * BIT(1),
        3 SP78BLK BIT(1),           /* ON IF CORE HAS BEEN GOTTEN FOR
                                       THE EXEC TABLES BUT NOT CARVED
                                       UP                            */
        3 NESTED BIT(1),            /* ON IF THIS IS A NESTED EXEC   */
       2 * CHAR(2),
       2 ECDAGETL PTR(31),          /* ADDRESS OF IKJGETL            */
       2 ECDAGDAT PTR(31),          /* ADDRESS OF GLOBAL EXECDATA    */
       2 ECDACPGM PTR(31),          /* SIZE OF CMD PROC GETMAIN      */
       2 ECDAINME PTR(31),         /* ADDR OF IMPLICIT NAME          */
        3 ECDAILNG PTR(8);         /* LENGTH OF IMPLICIT NAME        */
    DCL
      CPPLPTR PTR(31) DEF(ECDACPPL);/* ADDRESS OF CPPL               */
 NPAGE;
 %EDATCHK:
    IF IKJEDAT^=''
        %THEN
      %GOTO COMPCHK;

    DCL
    /*****************************************************************/
    /*                                                               */
    /* EXECDATA CONTROL BLOCK                                        */
    /*                                                               */
    /*****************************************************************/

    %IF EDATBASE='' %THEN
      %EDATBASE='BASED(LSDEXEC)';
      1 EXECDATA EDATBASE,
       2 SNTABFST PTR(31),          /* ADDRESS OF FIRST SNTAB        */
       2 SVTABFST PTR(31),          /* ADDRESS OF THE FIRST SVTAB    */
       2 GEXECDAT PTR(31),          /* ADDRESS OF THE GLOBAL EXECDATA*/
       2 LASTTSO PTR(31),           /* ADDRESS OF LAST TSO COMMAND
                                       EXECUTED                      */
       2 * PTR(31),                 /*                               */
        3 EXINSAVE BIT(8) BDY(BYTE),/* TERMIN INSTACK SAVE AREA      */
       2 ERACTSTR PTR(31),          /* ADDRESS OF THE START OF THE
                                       ERROR ACTION FOR THIS CLIST -
                                       THIS FIELD IS ZERO WHEN THERE
                                       IS NO ERROR ACTION            */
       2 ERACTEND PTR(31),          /* END OF THE ERROR ACTION RANGE */
       2 RETPTR PTR(31),            /* ADDRESS OF THE COMMAND
                                       FOLLOWING THE ONE IN ERROR    */
       2 EXDATFLG CHAR(4),          /* EXEC DATA FLAG AREA           */
        3 * BIT(32),
         4 CONLST BIT(1),           /* ON IF CONTROL STATEMENTS ARE
                                       TO BE LISTED AS THEY ARE
                                       EXECUTED                      */
         4 ERRCMD BIT(1),           /* ON IF AN ERROR COMMAND IS IN
                                       EFFECT                        */
         4 NOFLUSH BIT(1),          /* ON IF NOFLUSH OPTION IN EFFECT*/
         4 SYMLST BIT(1),           /* ON IF SYMLIST OPTION IN EFFECT*/
         4 ERINCNTL BIT(1),         /* ON WHEN THE PROCESSING IN AN
                                       ERROR RANGE IS A DIRECT RESULT
                                       OF A CLIST STMT ERROR         */
         4 CMAIN BIT(1),            /* ON FOR CONTROL CLIST (MAIN)   */
         4 NOMSG BIT(1),            /* ON FOR NOMSG OPTION           */
         4 ATTNCMD BIT(1),          /* ON IF ATTENTION CMD IN EFFECT */
         4 ATINCNTL BIT(1),         /* IN ATTN ON BEHALF OF ATTN     */
         4 NOLASTCC BIT(1),         /* SKIP LASTCC UPDATE    @YA09313*/
                                    /* AFTER STMT            @YA09313*/
         4 *     BIT(6),            /* RESERVED              @YA09313*/
         4 STAECNT  BIT(16),        /* CT433 STAE LOOP CTL   @YA09313*/
       2 GEXECCNT FIXED(31),        /* NUMBER OF GLOBAL VARIABLES
                                       SUPPORTED FOR NESTED
                                       PROCEDURES                    */
       2 EXDLMPTR PTR(31),          /* ADDRESS OF TERMIN DELIMS      */
       2 ATACTSTR PTR(31),          /* ATTENTION ACTION START        */
       2 ATACTEND PTR(31),          /* ATTENTION ACTION END          */
       2 RETPTR2  PTR(31),          /* ALTERNATE RETURN POINTER     */
       2 FILEDCBS PTR(31),          /* ADDRESS OF FILE I/O DCB CHAIN*/
       2 * PTR(31);
 NPAGE;
 %COMPCHK:
    IF IKJCOMP^=''
        %THEN
      %GOTO NTABCHK;

    DCL
    /*****************************************************************/
    /*                                                               */
    /* MAPPING OF THE COMMAND PROCEDURE STORAGE BLOCK BUILT BY EXEC  */
    /*                                                               */
    /*****************************************************************/

    %IF COMPBASE='' %THEN
      %COMPBASE='BASED(ECDACBLK)';
      1 COMPROC COMPBASE,
       2 COMPRPTR PTR(31),          /* ADDRESS OF NEXT COMMAND
                                       PROCEDURE BLOCK               */
        4 COMPRID PTR(8),           /* BLOCK NUMBER FOR THIS COMMAND
                                       PROCEDURE BLOCK               */
        4 COMPRNXT PTR(24),         /* ADDRESS OF THE NEXT COMMAND
                                       PROCEDURE STORAGE BLOCK - THIS
                                       FIELD IS ZERO IF THIS IS THE
                                       LAST BLOCK                    */
       2 COMPRLNG FIXED(31),        /* LENGTH OF THIS BLOCK          */
       2 COMPRUSE FIXED(31),        /* NUMBER OF UNUSED BYTES IN THIS
                                       BLOCK                         */
       2 COMRCDS CHAR(*);           /* COMMAND PROCEDURE RECORD AREA
                                                                     */
 NPAGE;
 %NTABCHK:
    IF IKJNTAB^=''
        %THEN
      %GOTO VTABCHK;
    DCL
      SNTABPTR PTR(31);             /* CURRENT SNTAB ADDRESS         */

      /***************************************************************/
      /*                                                             */
      /* SYMBOLIC NAME TABLE                                         */
      /*                                                             */
      /***************************************************************/
    DCL
      1 SNTAB BASED(SNTABPTR),      /* SNTAB TABLE HEADER            */
       2 SNTABNXT PTR(31),          /* ADDRESS OF NEXT SNTAB         */
       2 SNTABLNG FIXED(31),        /* LENGTH OF THIS SNTAB          */
       2 SNTABUSE FIXED(31),        /* NUMBER OF BYTES IN THIS SNTAB
                                       THAT ARE IN USE               */
       2 SNTELFST CHAR(*);          /* FIRST SNTAB ELEMENT           */



 %IF  IKJSNTELPTR='NO' %THEN
   %GOTO  NOSNTELPTR;
    DCL
      SNTELPTR PTR(31);             /* CURRENT SNTAB ELEMENT ADDRESS */
 %NOSNTELPTR: ;
    /*****************************************************************/
    /*                                                               */
    /* SYMBOLIC NAME TABLE ELEMENT                                   */
    /*                                                               */
    /*****************************************************************/
    DCL
      1 SNTELEM BASED(SNTELPTR),    /* SNTAB ELEMENT                 */
       2 SNTVLPTR PTR(31),          /* ADDRESS OF THE SVTAB ELEMENT
                                       FOR THIS SYMBOLIC PARAMETER OR*/
        3 SNTGVAL FIXED(31),        /* THE GLOBAL VARIABLE NAME IF
                                       PARAMETER IS GLOBAL           */
       2 SNTFLAGS CHAR(2),          /* SNTAB ELEMENT FLAGS - DEFINES
                                       THE TYPE OF PARM              */
        3 SNTPOSIT BIT(1),          /* POSITIONAL ELEMENT            */
        3 SNTKEY BIT(1),            /* KEYWORD ELEMENT               */
        3 SNTKEYW BIT(1),           /* KEYWORD WITH VALUE ELEMENT    */
        3 SNTLABEL BIT(1),          /* LABEL ELEMENT                 */
        3 SNTNOSCN BIT(1),          /* VARIABLE NOT RESCANNABLE      */
        3 SNTNAUTH BIT(1),          /* CONTROL VARIABLE CAN NOT BE
                                       SET BY THE USER               */
        3 SNTEVAL BIT(1),           /* CONTROL VARIABLE REQUIRES
                                       IMMEDIATE EVALUATION          */
        3 SNTLAST BIT(1),           /* DEFINES THE LAST ELEMENT IN
                                       THIS SNTAB                    */
        3 SNTGLOB BIT(1),           /* VARIABLE IS A GLOBAL VAR      */
        3 * BIT(7),                 /* RESERVED                      */
       2 SNTLNG FIXED(15),          /* LENGTH OF THE SYMBOLIC
                                       PARAMETER NAME                */
       2 SNTDATA CHAR(*);           /* NAME OF THE SYMBOLIC PARAMETER
                                                                     */
 NPAGE;
 %VTABCHK:
    IF IKJVTAB^=''
        %THEN
      %GOTO CVARCHK;
    DCL
      SVTABPTR PTR(31);             /* CURRENT SVTAB ADDRESS         */

    /*****************************************************************/
    /*                                                               */
    /* SYMBOLIC VALUE TABLE                                          */
    /*                                                               */
    /*****************************************************************/

    DCL
      1 SVTAB BASED(SVTABPTR),      /* SVTAB TABLE HEADER            */
       2 SVTABNXT PTR(31),          /* ADDRESS OF NEXT SVTAB         */
       2 SVTABLNG FIXED(31),        /* LENGTH OF THIS SVTAB          */
       2 SVTABUSE FIXED(31),        /* NUMBER OF BYTES IN THIS SVTAB
                                       THAT ARE IN USE               */
       2 SVTABFRE FIXED(31),        /* NUMBER OF BYTES IN THIS SVTAB
                                       THAT ARE ASSIGNED (IN USE) BUT
                                       UNUSED                        */
       2 SVTELFST CHAR(*);          /* FIRST SYMBOLIC VALUE ELEMENT  */

    /*****************************************************************/
    /*                                                               */
    /* SYMBOLIC VALUE TABLE ELEMENT                                  */
    /*                                                               */
    /*****************************************************************/

    %IF SVELBASE='' %THEN
      %SVELBASE='BASED(SNTVLPTR)';
    DCL
      1 SVTELEM SVELBASE,           /* SVTAB ELEMENT                 */
       2 SVTLNG FIXED(15),          /* LENGTH OF THE SYMBOLIC
                                       PARMETER VALUE                */
       2 SVTORIG FIXED(15),         /* ORIGIONAL LENGTH OF THIS
                                       ELEMENT                       */
       2 SVTDATA CHAR(*);           /* VALUE OF THE SYMBOLIC
                                       PARAMETER
                                                                     */
 NPAGE;
 %CVARCHK:
    IF IKJCVMAP^=''
        %THEN
      %GOTO EXECPHASE2CK;

    DCL
    /*****************************************************************/
    /*                                                               */
    /* MAP OF EXEC COMMAND CONTROL VARIABLES IN THE FIRST SNTAB FIXED*/
    /* AREA. CORRECT PROCESSING IS DEPENDENT UPON THE POSITIONS OF   */
    /* THE VARIABLES IN THIS STRUCTURE. THE ORDER OF VARIABLES IN    */
    /* THIS STRUCTURE MUST AGREE WITH THE NULLVARX TABLE. NOTE THAT  */
    /* THE FIRST 10 VARIABLES ARE INITIALIZED AS REQUIRING IMMEDIATE */
    /* EVALUATION (IN IKJCT433) AND THE FIRST 15 ARE INITIALIZED AS  */
    /* BEING NOT AUTHORIZED (THAT IS, A USER MAY NOT SET THEM).      */
    /*                                                               */
    /*****************************************************************/

    %IF CVARBASE='' %THEN
      %CVARBASE='DEF(SNTELFST)';
      1 CVARMAP CVARBASE BDY(BYTE),
       2 CTIMEVAL PTR(31) BDY(BYTE),/* SYSTIME VALUE IS NULL         */
       2 CTIMEFLG CHAR(2),          /* FLAG AREA                     */
       2 CTIMELNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSTIME CHAR(7),           /* NAME AREA                     */
       2 CPCMDVAL PTR(31) BDY(BYTE),/* SYSPCMD VALUE IS NULL */
       2 CPCMDFLG CHAR(2),          /* FLAG AREA                     */
       2 CPCMDLNG FIXED(15) BDY(BYTE),/* LENGTH                      */
       2 SYSPCMD CHAR(7),           /* NAME AREA                     */
       2 CSCMDVAL PTR(31) BDY(BYTE),/* SYSSCMD VALUE IS NULL         */
       2 CSCMDFLG CHAR(2),          /* FLAG AREA                     */
       2 CSCMDLNG FIXED(15) BDY(BYTE),/* LENGTH                      */
       2 SYSSCMD CHAR(7),           /* NAME AREA                     */
       2 CDATEVAL PTR(31) BDY(BYTE),/* SYSDATE VALUE IS NULL         */
       2 CDATEFLG CHAR(2),          /* FLAG AREA                     */
       2 CDATELNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSDATE CHAR(7),           /* SYSDATE NAME AREA             */
       2 CPREFVAL PTR(31) BDY(BYTE),/* SYSPREF VALUE IS NULL         */
       2 CPREFLG CHAR(2),           /* FLAG AREA                     */
       2 CPREFLNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSPREF CHAR(7),           /* SYSPREF NAME AREA             */
       2 CLENVAL PTR(31) BDY(BYTE), /* LENGTH VALUE IS NULL          */
       2 CLENFLG CHAR(2),           /* FLAG AREA                     */
       2 CLENLNG FIXED(15) BDY(BYTE),/* LENGTH IS 6                  */
       2 CLENGTH CHAR(6),           /* LENGTH NAME AREA              */
       2 CTYPEVAL PTR(31) BDY(BYTE),/* DATATYPE VALUE IS NULL        */
       2 CTYPEFLG CHAR(2),          /* FLAG AREA                     */
       2 CTYPELNG FIXED(15) BDY(BYTE),/* LENGTH IS 8                 */
       2 DATATYPE CHAR(8),          /* DATATYPE NAME AREA            */
       2 CSTRVAL PTR(31) BDY(BYTE), /* STR VALUE IS NULL             */
       2 CSTRFLG CHAR(2),           /* FLAG AREA                     */
       2 CSTRLNG FIXED(15) BDY(BYTE),/* LENGTH IS 3                  */
       2 STRING CHAR(3),            /* STRING NAME AREA              */
       2 CSSTRVAL PTR(31) BDY(BYTE),/* SUBSTRING VALUE IS NULL       */
       2 CSSTRFLG CHAR(2),          /* FLAG AREA                     */
       2 CSSTRLNG FIXED(15) BDY(BYTE),/* LENGTH IS 6                 */
       2 SUBSTR CHAR(6),            /* SUBSTRING NAME AREA           */
       2 CEVALVAL PTR(31) BDY(BYTE),/* EVAL BUILT IN IS NULL         */
       2 CEVALFLG CHAR(2),          /* IMMEDIATE EVALUATION          */
       2 CEVALLNG FIXED(15) BDY(BYTE),/* LENGTH IS 4                 */
       2 EVAL CHAR(4),              /* EVAL NAME AREA                */
       2 CICMDVAL PTR(31) BDY(BYTE),/* ADDRESS OF VALUE              */
       2 CICMDFLG CHAR(2),         /* FLAG AREA                      */
       2 CICMDLNG FIXED(15) BDY(BYTE),/* LENGTH OF NAME IS 7         */
       2 SYSICMD CHAR(7),          /* NAME AREA                      */
  NPAGE;
       2 CDLMVAL PTR(31) BDY(BYTE), /* SYSDLM VALUE IS ZERO          */
       2 CDLMFLG CHAR(2),           /* FLAG AREA                     */
       2 CDLMLNG FIXED(15) BDY(BYTE),/* LENGTH IS 6                  */
       2 SYSDLM CHAR(6),             /* SYSDLM VALUE AREA            */
       2 CUIDVAL PTR(31) BDY(BYTE), /* SYSUID VALUE TAKEN FROM PSCB  */
       2 CUIDFLG CHAR(2),           /* FLAG AREA                     */
       2 CUIDLNG FIXED(15) BDY(BYTE),/* LENGTH IS 6                  */
       2 SYSUID CHAR(6),            /* SYSUID NAME AREA              */
       2 CPROCVAL PTR(31) BDY(BYTE),/* SYSPROC VALUE TAKEN FROM TCB  */
       2 CPROCFLG CHAR(2),          /* FLAG AREA                     */
       2 CPROCLNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSPROC CHAR(7),           /* SYSPROC NAME AREA             */
       2 CNESTVAL PTR(31) BDY(BYTE),/* SYSNEST VALUE IS YES OR NO    */
       2 CNESTFLG CHAR(2),          /* FLAG AREA                     */
       2 CNESTLNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSNEST CHAR(7),           /* SYSNEST NAME AREA             */
       2 CDVALVAL PTR(31) BDY(BYTE),/* SYSDVAL VALUE IS NULL         */
       2 CDVALFLG CHAR(2),          /* FLAG AREA                     */
       2 CDVALLNG FIXED(15) BDY(BYTE),/* LENGTH IS 7                 */
       2 SYSDVAL CHAR(7),          /* SYSDVAL NAME AREA              */
       2 CLCCVAL PTR(31) BDY(BYTE), /* LASTCC VALUE IS ZERO          */
       2 CLCCFLG CHAR(2),           /* FLAG AREA                     */
       2 CLCCLNG FIXED(15) BDY(BYTE),/* LENGTH IS 6                  */
       2 LASTCC CHAR(6),            /* LASTCC NAME AREA              */
       2 CMCCVAL PTR(31) BDY(BYTE), /* MAXCC VALUE IS ZERO           */
       2 CMCCFLG CHAR(2),           /* FLAG AREA                     */
       2 CMCCLNG FIXED(15) BDY(BYTE),/* LENGTH IS 5                  */
       2 MAXCC CHAR(5),             /* MAXCC NAME AREA               */
       2 CSCANVAL PTR(31) BDY(BYTE),/* SYSSCAN VALUE IS 16           */
       2 CSCANFLG CHAR(2),          /* FLAG AREA                     */
       2 CSCANLNG FIXED(15) BDY(BYTE),/* LENGTH OF 7                 */
       2 SYSSCAN CHAR(7);           /* SYSSCAN NAME AREA
                                                                     */
 NPAGE;
 %EXECPHASE2CK:
  IF IKJEXECPHASE2^='YES' %THEN
   %GOTO MACEND;

    DCL

      /***************************************************************/
      /*                                                             */
      /* CONSTANTS USED BY THIS PROGRAM                              */
      /*                                                             */
      /***************************************************************/

      ZEROS CHAR(16) CONSTANT('0000000000000000'),/* ZERO STRING   */
       BLANKS BIT(32)CONSTANT('40000000'X),/* PADD CHAR FOR MVCL     */
       YES BIT(1)CONSTANT('1'B),    /* A BIT IS ON                   */
       COLON CHAR(1)CONSTANT(':'),  /* THE TIME XX:XX:XX             */
      OPENCMT CHAR(2) CONSTANT('/*'),/* OPEN COMMENT DELIMETER       */
      CLOSCMT CHAR(2) CONSTANT('*/'),/* END OF COMMENT               */
      XEQUAL CHAR(2) CONSTANT('X='),/* DUMMY ASSIGN STRING           */
      EQUAL CHAR(1) CONSTANT('='),  /* EQUAL SIGN                    */
      NULVAL FIXED(31) CONSTANT(0), /* NULL ELEMENT VALUE            */
      SLASH CHAR(1) CONSTANT('/'),  /* DATE DELIM XX/XX/XX           */
      NO BIT(1) CONSTANT('0'B),     /* A BIT IS OFF                  */
      MAXCC CHAR(LENGTH('MAXCC')) CONSTANT('MAXCC'),/* ARG FOR MAXCC */
      LASTCC CHAR(LENGTH('LASTCC')) CONSTANT('LASTCC'),/* ARG LASTCC */
      SYSSCAN CHAR(LENGTH('SYSSCAN')) CONSTANT('SYSSCAN'),/* SCAN ARG*/
      SYSDVAL CHAR(LENGTH('SYSDVAL')) CONSTANT('SYSDVAL'),/* DLM VAL */
      WRITE   FIXED(31)CONSTANT(4), /* WRITE OP CODE                 */
      IGOTO FIXED(31) CONSTANT(15), /* INTERNAL GOTO                 */
      RELAT FIXED(31) CONSTANT(2),  /* RELATIONAL ENTRY TO IKJCT434  */
      LPAREN CHAR(1) CONSTANT('('), /* OPEN PAREN                    */
      RPAREN CHAR(1) CONSTANT(')'), /* CLOSE PAREN                   */
      MINUS CHAR(1) CONSTANT('-'),  /* MINUS SIGN                    */
      PERIOD CHAR(1) CONSTANT('.'), /* PERIOD                        */
      AMPSAND CHAR(1) CONSTANT('&'),/* AMPERSAND                     */
      DAMPSAND CHAR(2) CONSTANT('&&'),/* DOUBLE AMPERSAND            */
      FDMPSAND BIT(16) CONSTANT('1010'X),/* FOLDED AMPERSANDS        */
      QUOTE CHAR(1) CONSTANT(''''), /* QUOTE                         */
      DQUOTE CHAR(2) CONSTANT(''''''),/* DOUBLE QUOTE                */
      COMMA CHAR(1) CONSTANT(','),  /* A COMMA                       */
      BLANK CHAR(1) CONSTANT(' '),  /* BLANK                         */
      TAB BIT(8) CONSTANT('05'X),   /* TAB                           */
      TERMDLM BIT(8) CONSTANT('88'X),/* TERMINAL DELIM OPTIONS       */
      ABNDFLG BIT(8) CONSTANT('80'X),/* ABEND FLAG IN ECT            */
      SENTNLL BIT(8) CONSTANT('01'X),/* LEFT SENTINAL                */
      SENTNLR BIT(8) CONSTANT('02'X),/* RIGHT SENTINAL               */
      NOSCNAMP BIT(8) CONSTANT('03'X),/* NO RESCAN FOLDED AMPERSAND  */
      FEBRUARY FIXED(31) CONSTANT(2),/* MONTH OF FEBRUARY            */
 NPAGE;

      /***************************************************************/
      /*                                                             */
      /* MORE CONSTANTS USED BY THIS PROGRAM                         */
      /*                                                             */
      /***************************************************************/

     CCA CHAR(1) CONSTANT('A'),     /* CHAR 'A'                      */
     CCF CHAR(1) CONSTANT('F'),     /* CHAR 'F'                      */
     CCI CHAR(1) CONSTANT('I'),     /* CHAR 'I'                      */
     CCJ CHAR(1) CONSTANT('J'),     /* CHAR 'J'                      */
     CCR CHAR(1) CONSTANT('R'),     /* CHAR 'R'                      */
     CCS CHAR(1) CONSTANT('S'),     /* CHAR 'S'                      */
     CCU CHAR(1) CONSTANT('U'),     /* CHAR 'U'                      */
     CCZ CHAR(1) CONSTANT('Z'),     /* CHAR 'Z'                      */
     CC0 CHAR(1) CONSTANT('0'),     /* CHAR '0'                      */
     CC9 CHAR(1) CONSTANT('9'),     /* CHAR '9'                      */
      F0 FIXED(31) CONSTANT(0),     /* FULLWORD ZERO                 */
      F1 FIXED(31) CONSTANT(1),     /* FULLWORD ONE                  */
      F2 FIXED(31) CONSTANT(2),     /* FULLWORD TWO                  */
      F3 FIXED(31) CONSTANT(3),     /* FULLWORD THREE                */
      F4 FIXED(31) CONSTANT(4),     /* FULLWORD FOUR                 */
      F5 FIXED(31) CONSTANT(5),     /* FULLWORD FIVE                 */
      F6 FIXED(31) CONSTANT(6),     /* FULLWORD SIX                  */
      F7 FIXED(31) CONSTANT(7),     /* FULLWORD SEVEN                */
      F8 FIXED(31) CONSTANT(8),     /* FULLWORD EIGHT                */
      F15 FIXED(31) CONSTANT(15),   /* FULLWORD FIFTEEN              */
      F16 FIXED(31) CONSTANT(16),   /* FULLWORD 16                   */
      F17 FIXED(31) CONSTANT(17),   /* FULLWORD 17                   */
      F31 FIXED(31) CONSTANT(31),   /* FULLWORD 31                   */
      F57 FIXED(31) CONSTANT(57),   /* FULLWORD 57                   */
      F239 FIXED(31) CONSTANT(239), /* FULLWORD 239                  */
      F249 FIXED(31) CONSTANT(249), /* FULLWORD 249                  */
      F252 FIXED(31) CONSTANT(252), /* FULLWORD 252                  */
      F256 FIXED(31) CONSTANT(256), /* FULLWORD 256                  */
      F4096 FIXED(31) CONSTANT(4096),/* FULLWORD 4096                */
      CTHEN CHAR(4) CONSTANT('THEN'),/* CHAR 'THEN'                 */
      GAS FIXED(31) CONSTANT(200),  /* GAS FOR GETMAIN OF NEW BUF    */
      IFCODE FIXED(31) CONSTANT(2), /* OP CODE OF 'IF'               */
      DOCODE FIXED(31) CONSTANT(7), /* OP CODE OF 'DO'               */
      READ   FIXED(31)CONSTANT(12), /* OP CODE OF 'READ'             */
      SETCODE FIXED(31) CONSTANT(13),/* OP CODE OF 'SET'             */
      NOOPTION BIT(16) CONSTANT('0000'X),/* NO CONTROL OPTIONS       */
      OPENCODE FIXED(31) CONSTANT(18),/* OPENFILE OP CODE (LOW FILE) */
      PUTCODE FIXED(31) CONSTANT(21),/* PUTFILE OP CODE (HIGH FILE)  */

 NPAGE;

      /***************************************************************/
      /*                                                             */
      /* ERROR CODES                                                 */
      /*                                                             */
      /***************************************************************/

      E4 FIXED(31) CONSTANT(4),     /* USED TO GET A NEW LINE        */
      E8 FIXED(31) CONSTANT(8),     /* ATTN HAS OCCURED              */
      E16 FIXED(31) CONSTANT(16),   /* GETMAIN FAIL                  */
      E300 FIXED(31) CONSTANT(300), /* UPDATE TO UNAUTH VAR          */
      E304 FIXED(31) CONSTANT(304), /* INVALID KEYWORD ON EXIT       */
      E308 FIXED(31) CONSTANT(308), /* NO VALUE ON CODE ON EXIT      */
      E312 FIXED(31) CONSTANT(312), /* GLOBAL VARIABLE NOT FOUND     */
      E316 FIXED(31) CONSTANT(316), /* DELIMETER GT THAN 256         */
      E320 FIXED(31) CONSTANT(320), /* (RESERVED)                    */
      E324 FIXED(31) CONSTANT(324), /* GETLINE ERROR                 */
      E328 FIXED(31) CONSTANT(328), /* TOO MANY DELIMETERS           */
      E332 FIXED(31) CONSTANT(332), /* INVALID FILENAME              */
      E336 FIXED(31) CONSTANT(336), /* OPEN AN ALREADY OPEN FILE     */
      E340 FIXED(31) CONSTANT(340), /* INVALID OPEN TYPE SYNTAX      */
      E344 FIXED(31) CONSTANT(344), /* INVALID OPEN TYPE VALUE       */
      E348 FIXED(31) CONSTANT(348), /* DCB DID NOT OPEN              */
      E352 FIXED(31) CONSTANT(352), /* GET FILENAME NOT FOUND        */
      E356 FIXED(31) CONSTANT(356), /* GET DCB NOT OPEN              */
      E360 FIXED(31) CONSTANT(360), /* PUT FILENAME NOT FOUND        */
      E364 FIXED(31) CONSTANT(364), /* PUT DCB NOT OPEN              */
      E368 FIXED(31) CONSTANT(368), /* FILE TO BE CLOSED NOT FOUND   */
      E372 FIXED(31) CONSTANT(372), /* PUTX BEFORE GETFILE           */
      E400 FIXED(31) CONSTANT(400), /* END OF FILE ON GET            */
      E900 FIXED(31) CONSTANT(900), /* SINGLE AMPERSAND ALONE        */
      E904 FIXED(31) CONSTANT(904), /* SYMBOLIC VARIABLE NOT FOUND   */
      E908 FIXED(31) CONSTANT(908), /* ERROR OCCURRED IN ERROR RANGE */
      E912 FIXED(31) CONSTANT(912), /* INVALID RANGE IN SUBSTRING    */
      E916 FIXED(31) CONSTANT(916), /* ALPHA DATA IN SUBSTRING EXPRES*/
      E920 FIXED(31) CONSTANT(920), /* NEGATIVE VALUE IN RANGE       */
      E924 FIXED(31) CONSTANT(924), /* VALUE TOO LONG FOR SUBSTR EXP */
      E928 FIXED(31) CONSTANT(928), /* NOT USED                      */
      E932 FIXED(31) CONSTANT(932), /* SUBSTRING OUTSIDE RANGE       */
      E936 FIXED(31) CONSTANT(936), /* NO P-STRING ON BUILT IN FUNC  */
      E940 FIXED(31) CONSTANT(940), /* INVALID SYMBOLIC VARIABLE     */
      E944 FIXED(31) CONSTANT(944), /* LABEL AS VALUE OR VAL AS LABEL*/
      E948 FIXED(31) CONSTANT(948), /* INVALID GOTO LABEL            */
      E952 FIXED(31) CONSTANT(952), /* LABEL NOT FOUND               */
      E956 FIXED(31) CONSTANT(956), /* NO LABEL ON GOTO              */
      E960 FIXED(31) CONSTANT(960), /* BAD SYSSCAN VALUE             */
      E964 FIXED(31) CONSTANT(964), /* BAD LASTCC VALUE              */
      E972 FIXED(31) CONSTANT(972), /* TERMIN INVALID IN BACKGROUND  */
      E999 FIXED(31) CONSTANT(999); /* INTERNAL CLIST ERROR          */
 NPAGE;
    DCL

      /***************************************************************/
      /*                                                             */
      /* MAIN BUFFER                                                 */
      /*                                                             */
      /***************************************************************/

      1 * BASED(BUFBASE),           /* BUFFER                        */
       2 LL FIXED(15),              /* LENGTH OF THIS BUFFER         */
       2 OO FIXED(15),              /* COMMAND SCAN OFFSET           */
       2 O2 FIXED(15),              /* OFFSET TO START OF SUB        */
        3 C CHAR(*),                /* BUFFER STRING                 */

      /***************************************************************/
      /*                                                             */
      /* ALTERNATE BUFFER                                            */
      /*                                                             */
      /***************************************************************/

      1 * BASED(NEWBASE),           /* ALTERNATE BUFFER              */
       2 NEWLL FIXED(15),           /* LENGTH OF ALTERNATE BUFFER    */
       2 NEWOO FIXED(15),           /* OFFSET IN ALTERNATE BUFFER    */
       2 NEWC CHAR(*),              /* STRING IN ALTERNATE BUFFER    */
      /***************************************************************/
      /*                                                             */
      /* GETLINE PARM BLOCK FROM T55                                 */
      /*                                                             */
      /***************************************************************/

      1 GTPB,                       /* GETLINE PARM BLOCK            */
       2 * CHAR(4),                 /* GETLINE PARMS                 */
       2 GTPBLINE PTR(31),          /* POINTER TO RETURNED BFR       */
 NPAGE;
      /***************************************************************/
      /*                                                             */
      /* TOP ELEMENT OF STACK                                        */
      /*                                                             */
      /***************************************************************/

      1 * BASED(IOSTELM),           /* INPUT STACK TOP ELEMENT       */
       2 INSCODE BIT(8),            /* INPUT STACK OPTIONS           */
        3 INSTERM BIT(1),           /* TURNED ON FOR TERMIN DELIM    */
        3 * BIT(3),                 /* NOT USED IN IKJCT433          */
        3 INSEXEC BIT(1),           /* EXEC STACK                    */
        3 INSPROM BIT(1),           /* PROMPT ALLOWED                */
        3 * BIT(1),                 /* NOT USED IN IKJCT433          */
        3 INSLIST BIT(1),           /* LIST LINES BEFORE EXEC        */
       2 INSADLSD PTR(24),          /* POINTER TO LSD                */

      /***************************************************************/
      /*                                                             */
      /* SERVICE ROUTINE WORKAREA                                    */
      /*                                                             */
      /***************************************************************/

      1 * BASED(ECTIOWA),           /* SERVICE RTN WORKAREA          */
       2 IOSTELM PTR(31),           /* POINTER TO TOP ELEMENT        */
       2 *(3) PTR(31),              /* NOT USED IN IKJCT433          */
 NPAGE;
      /***************************************************************/
      /*                                                             */
      /* ORIGINAL BUFFER FOR OPCODE                                  */
      /*                                                             */
      /***************************************************************/

      1 * BASED(OLDLINE),           /* ORIGINAL BUFFER FROM T55      */
       2 *(3) FIXED(15),            /* LENGTH - OFFSET - O2          */
       2 OPCODE FIXED(8),           /* EXEC FUNCTION CODE            */
       2 FLSEPATH PTR(31) BDY(BYTE),/* IF FALSE PATH                 */
      /***************************************************************/
      /*                                                             */
      /* MASTER SWITCHES                                             */
      /*                                                             */
      /***************************************************************/

      1 SWS CHAR(5) DEF(SWSAREA),   /* MASTER SWITCHES               */
       2 EXITA BIT(1),              /* USED TO EXIT DO WHILES        */
       2 EXITB BIT(1),              /* USED TO EXIT DO WHILES        */
       2 FREESW BIT(1),             /* A GETMAIN WAS ISSUED          */
       2 WAIT BIT(1),               /* SCAN VALUE FIRST              */
       2 RANGE BIT(1),              /* SUBSTRING RANGE SPECIFIED     */
       2 LEAP BIT(1),               /* LEAP YEAR                     */
       2 ALPHA BIT(1),              /* ANSWER IS ALPHA               */
       2 EXITC BIT(1),              /* USED TO EXIT DO WHILES        */
       2 SEPS BIT(1),               /* SEPARATORS ON LINE            */
       2 ENDDLM BIT(1),             /* WORD NOT ENDED BY GOOD DLM    */
       2 QUIT BIT(1),               /* EXIT QUIT SPECIFIED           */
       2 MATCH BIT(1),              /* MESSAGE FOUND                 */
       2 SKPCOMMA BIT(1),           /* SKIP OVER COMMA AS BLANK      */
       2 SYSUPDTE BIT(1),           /* ON TO UPDATE UNAUTH VARIABLES */
       2 NOAMPER BIT(1),            /* NO AMPERSAND ON VARIABLE      */
       2 INSTHEN BIT(1),            /* INSERT THEN ON IF STMT        */
       2 SENTINAL BIT(1),           /* WAIT ROUTINE SENTINAL PROCESS */
       2 SKIP1 BIT(1),              /* SKIP OVER ONE BYTE            */
       2 LISTONLY BIT(1),           /* TSO COMMAND LIST ONLY         */
       2 FOLD BIT(1),               /* STRING BIF UNFOLD             */
       2 LISTED BIT(1),             /* COMMAND IN ERROR LISTED       */
       2 ERRRANGE BIT(1),           /* EXECUTING IN ERRANGE          */
       2 ATRANGE BIT(1),            /* EXECUTING IN ATTN RANGE       */
       2 BACKUP BIT(1),             /* BACKUP AND LIST TSO CMD       */
       2 RCABEND BIT(1),            /* TELL RCUPDT CODE IS ABEND     */
       2 NODATA BIT(1),             /* NO DATA FOR UPDATE ROUTINE    */
       2 STAECNTL BIT(1),           /* ANY ABEND OCCURRED            */
       2 STABND BIT(1),             /* ALWAYS OFF (TO SKIP CODE)     */
       2 SVTMOV BIT(1),             /* UPDATE HAS MOVED SVT @OZ32353 */

 NPAGE;
          /* 433 SPECIAL PARMS */
      1 PARM433 CHAR(8),            /* SPECIAL PARM BLOCK   @ZA08099*/
      2 * PTR(31),                  /*                       @ZA08099*/
       3 PARMDEFR BIT(1),           /* CAN CHANGE STATUS    @ZA08099*/
       3 EOCLIST BIT(1),            /* END OF CLIST IND TO
                                       GETLINE              @ZA08099*/
       3 EXITSTMT BIT(1),           /* EXIT STMT INDICATOR  @ZA08099*/
       3 RTRNSTMT BIT(1),          /* RETURN STMT INDICATOR @ZA97838*/
       3 * BIT(4),                  /* RESERVED             @ZA97838*/
       3 * CHAR(3),                 /* RESERVED             @ZA08099*/
      2 SUSPENDI PTR(31),           /* SUSPENDED ELMT PTR   @ZA08099*/
      /***************************************************************/
      /*                                                             */
      /* ATTENTION ECB                                               */
      /*                                                             */
      /***************************************************************/

      1 ECB,                        /* THE ECB                       */
       2 * BIT(1),                  /* WAIT BIT                      */
       2 ECBCBIT BIT(1),            /* POSTED BIT - TERMINATE        */

      /***************************************************************/
      /*                                                             */
      /* MASTER LOOP CONTROL SWITCHES                                */
      /*                                                             */
      /***************************************************************/

      1 SW2 CHAR(1) DEF(SW2AREA),   /* LOOP SWITCHES                 */
       2 CORE BIT(1),               /* CORE ALREADY GOTTEN           */
       2 CONTINU BIT(1),            /* CONTINUE IN LOOP              */
       2 RECURSE BIT(1),            /* RECURSIVE CLIST ERROR         */
       2 * BIT(1),                  /*                       @ZA97838*/
       2 SW2QUIT BIT(1),            /* ON - IF EXIT(QUIT)    @ZA97838*/
       2 SW2EXIT BIT(1),            /* ON - IF EXIT CODE(N)  @ZA97838*/
       2 SW2RTRN BIT(1);            /* ON - IF RETURN STMT IN ATTN
                                       FUNCTION AND RANGE    @ZA97838*/
 NPAGE;
    DCL
       COMONPTR PTR(31) REG(8) RSTD,/* MUST BE SAME IN ALL CSECTS    */
       1 COMAREA BASED(COMONPTR) BDY(WORD),    /* THE COMMON WORKAREA*/
        2 * CHAR(300) BDY(WORD),    /* DEFINE 300 BYTES AS COMMON    */
         3 IOPL(4) PTR(31),         /* I/O PARM LIST                 */
         3 BUFPTR PTR(31),          /* POINTER TO 434 BFR            */
         3 SNTELPTR PTR(31),        /* POINTER TO LOCATED VARIABLE   */
         3 EXECDPTR PTR(31),        /* POINTER TO EXEC DATA          */
         3 OLDLINE PTR(31),         /* POINTER TO ORIG BUFFER        */
         3 BUFBASE PTR(31),         /* POINTER TO CURRENT RECORD     */
         3 NEWBASE PTR(31),         /* POINTER TO ALT RECORD         */
         3 LSDPTR PTR(31),          /* POINTER TO LSD                */
         3 TYPE PTR(31),            /* (ANSPTR FOR CONVERT RTN)      */
         3 CNVTANS FIXED(31),       /* CONVERTS ANSWER               */
         3 CLEN FIXED(15),          /* CONVERT INPUT LENGTH          */
         3 * FIXED(15),             /* FILLER                        */
         3 MYO2 FIXED(31),          /* OFFSET TO START PRINT         */
         3 BEGIN FIXED(31),         /* START OF WORD FROM FINDWORD   */
         3 I FIXED(31),             /* CURRENT CHARACTER IN BUFFER   */
         3 LEN FIXED(31),           /* LENGTH OF WORD FORM FINDWORD  */
         3 FREEAMT FIXED(31),       /* AMOUNT OF FREE CORE IN BFR    */
         3 ERCOM FIXED(31),         /* COMMON ERROR AREA             */
         3 REGAREA CHAR(16),        /* AREA FOR REGS 9-12            */
         3 REGAREA2 CHAR(16),       /* AREA FOR REGS 9-12            */
         3 SWSAREA CHAR(LENGTH(SWS)),/* AREA FOR SWS                 */
         3 SW2AREA CHAR(LENGTH(SW2)),/* AREA FOR SW2                 */
         3 STAEREGS CHAR(64),       /* AREA FOR STAE REGISTERS       */
         3 SYNREGS CHAR(64),        /* AREA FOR SYNAD REGS           */
        2 DYNAREA CHAR(*);          /* AREA FOR 436 GOTTOM CORE      */


 %MACEND:
    DEACT NPAGE;
