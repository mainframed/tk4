//ALGSAMP4 JOB (ALGOL),
//             'ALGOL Sample Program',
//             CLASS=A,
//             MSGCLASS=A,
//             REGION=1024K,COND=(0,NE),MSGLEVEL=(1,1)
//********************************************************************
//*
//* Name: SYS2.JCLLIB(ALGSAMP4)
//*
//* Desc: IBM Algol F Level 2.1 IVP
//*
//********************************************************************
//*
//*       360S-AL-531 Algol F Compiler
//*            and
//*       360S-LM-532 Algol F Library
//*
//IVP4    EXEC ALGOFCL
//ALGOL.SYSIN  DD  *
    'BEGIN'
    'COMMENT'  Basic Statement Times for Algol 60
               B A Wichmann
               National Physics laboratory
               Teddington, Middlesex
               November 1973;

    'COMMENT'  Modified for IBM Algol F Level 2.1 IVP
               This program will execute for aproximately 4 minutes
               on an MVS 3.8 system running on a Hercules 3.07
               system averaging 25 mips.

               Timings are guidelines only due to the PC, Windows
               and the Hercules timer implementations and will
               therefore vary for each execution;

    'REAL' x, y, z;
    'INTEGER' i, j, n, k, l, m, case;
    'INTEGER' 'ARRAY' e1[1:1], e2[1:1,1:1], e3[1:1,1:1,1:1];

    'PROCEDURE' p0;
       ;

    'PROCEDURE' p1(x);
       'VALUE' x;
       'REAL' x;
       ;

    'PROCEDURE' p2(x,y);
       'VALUE' x, y;
       'REAL' x, y;
       ;

    'PROCEDURE' p3(x,y,z);
       'VALUE' x, y, z;
       'REAL' x, y, z;
       ;

    'INTEGER' 'ARRAY' #TT[1:43];

    'PROCEDURE' printt;
         'BEGIN'
              'INTEGER' i;
              'REAL' x, mix, loop;
              'COMMENT' calculate time differences;
              'FOR' i := 43 'STEP' -1 'UNTIL' 2 'DO'
                   'BEGIN'
                        #TT[i] := #TT[i] - #TT[i-1];
                        'COMMENT' subtract previous accum cpu time
                                  to derive case timing;
                   'END';
              'FOR' i := 2 'STEP'  1 'UNTIL' 42 'DO'
                   'BEGIN'
                        #TT[i] := (#TT[i] - #TT[43])/ ((n * 10)/1000);
                        'COMMENT' subtract loop overhead and
                                  convert to picroseconds;
                   'END';
              'COMMENT' Print results;
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[2]);
              OUTSTRING(1,'('x := 1.0 ')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[3]);
              OUTSTRING(1,'('x := 1 ')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[4]);
              OUTSTRING(1,'('x := y ')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[5]);
              OUTSTRING(1,'('x := y + z')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[6]);
              OUTSTRING(1,'('x := y * z')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[7]);
              OUTSTRING(1,'('x := y / z')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[8]);
              OUTSTRING(1,'('k := 1')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[9]);
              OUTSTRING(1,'('k := 1.0')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[10]);
              OUTSTRING(1,'('k := l + m')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[11]);
              OUTSTRING(1,'('k := l * m')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[12]);
              OUTSTRING(1,'('k := l / m')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[13]);
              OUTSTRING(1,'('k := l')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[14]);
              OUTSTRING(1,'('x := l')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[15]);
              OUTSTRING(1,'('l := y')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[16]);
              OUTSTRING(1,'('x := y ** 2')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[17]);
              OUTSTRING(1,'('x := y ** 3')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[18]);
              OUTSTRING(1,'('x := y ** z')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[19]);
              OUTSTRING(1,'('e1[1] := 1')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[20]);
              OUTSTRING(1,'('e2[1,1] := 1')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[21]);
              OUTSTRING(1,'('e3[1,1,1] := 1')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[22]);
              OUTSTRING(1,'('l := e1[1]')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[23]);
              OUTSTRING(1,'('begin real a; end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[24]);
              OUTSTRING(1,'('begin real a[1:1]; end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[25]);
              OUTSTRING(1,'('begin real a[1:500]; end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[26]);
              OUTSTRING(1,'('begin real a[1:1,1:1]; end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[27]);
              OUTSTRING(1,'('begin real a[1:1,1:1,1:1]; end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[28]);
              OUTSTRING(1,'('begin goto lab; lab: end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[29]);
              OUTSTRING(1,'('begin switch s := q; goto s[1]; q: end')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[30]);
              OUTSTRING(1,'('x := sin(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[31]);
              OUTSTRING(1,'('x := cos(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[32]);
              OUTSTRING(1,'('x := abs(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[33]);
              OUTSTRING(1,'('x := exp(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[34]);
              OUTSTRING(1,'('x := ln(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[35]);
              OUTSTRING(1,'('x := sqrt(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[36]);
              OUTSTRING(1,'('x := arctan(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[37]);
              OUTSTRING(1,'('x := sign(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[38]);
              OUTSTRING(1,'('x := entier(y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[39]);
              OUTSTRING(1,'('p0')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[40]);
              OUTSTRING(1,'('p1(x)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[41]);
              OUTSTRING(1,'('p2(x,y)')');
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[42]);
              OUTSTRING(1,'('p3(x,y,z)')');
              'COMMENT' print DO loop overhead;
              SYSACT(1,14,1);
              OUTINTEGER(1,#TT[43]);
              OUTSTRING(1,'('DO Loop overhead')');
         'END';

    'INTEGER' 'PROCEDURE' CPUTIM; 'CODE';
           'COMMENT' Procedure that returns the current accumulated
                     job step processor time in microseconds in the
                     MVS 3.8J environment;

    'COMMENT' Set line-length = 120, Set lines-per-page = 62, OPEN;
    SYSACT(1,6,120);
    SYSACT(1,8,62);
    SYSACT(1,12,1);
    SYSACT(1,2,10);
    OUTSTRING (1,'('Algol F Statement Timings')');
    SYSACT(1,14,1);
    OUTSTRING(1,'('Picoseconds  Statement')');

    x := y := z := 1.0;
    l := k := m := 1;
    e1[1] := 1;
    case := 1;

         'COMMENT' Case 01;
    n := 100000;
         'COMMENT' n should be given a large enough value
                   for the resolution of the clock not to
                   be a limiting factor to the accuracy.
                   If n is made too large then processor time
                   is wasted;
    #TT[1] := CPUTIM;
         'COMMENT' #TT[1] equals program initialization overhead;

         'COMMENT' Case 02;
    case := case + 1;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := 1.0; x := 1.0; x := 1.0; x := 1.0; x := 1.0;
              x := 1.0; x := 1.0; x := 1.0; x := 1.0; x := 1.0;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 03;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := 1; x := 1; x := 1; x := 1; x := 1;
              x := 1; x := 1; x := 1; x := 1; x := 1;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 04;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y; x := y; x := y; x := y;
              x := y; x := y; x := y; x := y;
              x := y; x := y; x := y; x := y;
              x := y;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 05;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y + z; x := y + z; x := y + z; x := y + z;
              x := y + z; x := y + z; x := y + z; x := y + z;
              x := y + z; x := y + z;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 06;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y * z; x := y * z; x := y * z; x := y * z;
              x := y * z; x := y * z; x := y * z; x := y * z;
              x := y * z; x := y * z;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 07;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y/z; x := y/z; x := y/z; x := y/z;
              x := y/z; x := y/z; x := y/z; x := y/z;
              x := y/z; x := y/z;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 08;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := 1; k := 1; k := 1; k := 1;
              k := 1; k := 1; k := 1; k := 1;
              k := 1; k := 1;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 09;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := 1.0; k := 1.0; k := 1.0; k := 1.0;
              k := 1.0; k := 1.0; k := 1.0; k := 1.0;
              k := 1.0; k := 1.0;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 10;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := l + m; k := l + m;
              k := l + m; k := l + m;
              k := l + m; k := l + m;
              k := l + m; k := l + m;
              k := l + m; k := l + m;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 11;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := l * m; k := l * m; k := l * m;
              k := l * m; k := l * m; k := l * m;
              k := l * m; k := l * m; k := l * m;
              k := l * m;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 12;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := l / m; k := l / m; k := l / m;
              k := l / m; k := l / m; k := l / m;
              k := l / m; k := l / m; k := l / m;
              k := l / m;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 13;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              k := l; k := l; k := l;
              k := l; k := l; k := l;
              k := l; k := l; k := l;
              k := l; k := l; k := l;
              k := l;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 14;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := l; x := l; x := l; x := l;
              x := l; x := l; x := l; x := l;
              x := l; x := l;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 15;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              l := y; l := y; l := y;
              l := y; l := y; l := y;
              l := y; l := y; l := y;
              l := y;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 16;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y ** 2; x := y ** 2;
              x := y ** 2; x := y ** 2;
              x := y ** 2; x := y ** 2;
              x := y ** 2; x := y ** 2;
              x := y ** 2; x := y ** 2;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 17;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y ** 3; x := y ** 3;
              x := y ** 3; x := y ** 3;
              x := y ** 3; x := y ** 3;
              x := y ** 3; x := y ** 3;
              x := y ** 3; x := y ** 3;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 18;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := y ** z;       x := y ** z;
              x := y ** z;       x := y ** z;
              x := y ** z;       x := y ** z;
              x := y ** z;       x := y ** z;
              x := y ** z;       x := y ** z;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 19;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              e1[1] := 1; e1[1] := 1; e1[1] := 1;
              e1[1] := 1; e1[1] := 1; e1[1] := 1;
              e1[1] := 1; e1[1] := 1; e1[1] := 1;
              e1[1] := 1;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 20;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              e2[1,1]:= 1; e2[1,1]:= 1; e2[1,1]:= 1;
              e2[1,1]:= 1; e2[1,1]:= 1; e2[1,1]:= 1;
              e2[1,1]:= 1; e2[1,1]:= 1; e2[1,1]:= 1;
              e2[1,1]:= 1; e2[1,1]:= 1;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 21;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              e3[1,1,1]:= 1; e3[1,1,1] := 1;
              e3[1,1,1]:= 1; e3[1,1,1] := 1;
              e3[1,1,1]:= 1; e3[1,1,1] := 1;
              e3[1,1,1]:= 1; e3[1,1,1] := 1;
              e3[1,1,1]:= 1; e3[1,1,1] := 1;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 22;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              l := e1[1]; l := e1[1]; l := e1[1];
              l := e1[1]; l := e1[1]; l := e1[1];
              l := e1[1]; l := e1[1]; l := e1[1];
              l := e1[1];
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 23;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'REAL' a;
              'END';
              'BEGIN'
                   'REAL' a;
              'END';
              'BEGIN'
                   'REAL' a;
              'END';
              'BEGIN'
                   'REAL' a;
              'END';
              'BEGIN'
                   'REAL' a;
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 24;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'ARRAY' a[1:1];
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 25;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'ARRAY' a[1:500];
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 26;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'ARRAY' a[1:1,1:1];
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 27;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'ARRAY' a[1:1,1:1,1:1];
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 28;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'GOTO' l0;
              l0: ;
              'GOTO' l1;
              l1: ;
              'GOTO' l2;
              l2: ;
              'GOTO' l3;
              l3: ;
              'GOTO' l4;
              l4: ;
              'GOTO' l5;
              l5: ;
              'GOTO' l6;
              l6: ;
              'GOTO' l7;
              l7: ;
              'GOTO' l8;
              l8: ;
              'GOTO' l9;
              l9: ;
              p0;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 29;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              'BEGIN'
                   'SWITCH' s := q; 'GOTO' s[1];
                   q:  ;
              'END';
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 30;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
              x := sin(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 31;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
              x := cos(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 32;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := abs(y); x := abs(y); x := abs(y);
              x := abs(y); x := abs(y); x := abs(y);
              x := abs(y); x := abs(y); x := abs(y);
              x := abs(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 33;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
              x := exp(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 34;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
              x := ln(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 35;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
              x := sqrt(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 36;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
              x := arctan(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 37;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := sign(y); x := sign(y); x := sign(y);
              x := sign(y); x := sign(y); x := sign(y);
              x := sign(y); x := sign(y); x := sign(y);
              x := sign(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 38;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              x := entier(y); x := entier(y);
              x := entier(y); x := entier(y);
              x := entier(y); x := entier(y);
              x := entier(y); x := entier(y);
              x := entier(y); x := entier(y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 39;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              p0;
              p0;
              p0;
              p0;
              p0;
              p0;
              p0;
              p0;
              p0;
              p0;
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 40;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
              p1(x);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 41;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
              p2(x,y);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 42;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         'BEGIN'
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
             p3(x,y,z);
         'END';
    #TT[case] := CPUTIM;

    case := case + 1;
         'COMMENT' Case 43;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    'FOR' i := 1 'STEP' 1 'UNTIL' n 'DO'
         ;
    #TT[case] := CPUTIM;

    printt;

    'END';
/*
//ASMTIM   EXEC ASMFCL,PARM.ASM='OBJ,NODECK'
//ASM.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//           DD DSN=SYS1.AMODGEN,DISP=SHR
//           DD DSN=SYS2.MACLIB,DISP=SHR
//ASM.SYSIN  DD *
CPU         TITLE 'CPUTIM - ALGOL F FUNCTION TO RETURN ACCUMULATED STEPX
                CPU TIME'
*
*        FUNCTION -
*        RETURN THE ACCUMULATED STEP CPU TIME IN MICROSECONDS WHEN
*        CALLED AS AN ALGOL F FUNCTION DECLARED AS -
*        'INTEGER' 'PROCEDURE' CPUTIM; 'CODE';
*        THIS ALGOL F FUNCTION IS DESIGNED TO OPERATE IN THE
*        MVS 3.8 ENVIRONMENT
*
*        ENVIRONMENT -
*        SEE OS/360 ALGOL F PROGRAMMERS GUIDE GC33-4000 FOR A
*        DESCRIPTION OF THE INVOKING ENVIRONMENT
*
*        STATUS -
*        THIS FUNCTION IS SERIALLY REUSEABLE BUT NOT
*        RECURSIVE OR REENTRANT
*
CPUTIM   CSECT
*
*        FSA OFFSETS
*
CAP1     EQU   X'0D4'
CAP2     EQU   X'0D8'
PROLOGFP EQU   X'0DC'
RETPROG  EQU   X'0E4'
EPILOGP  EQU   X'0E8'
CSWE1    EQU   X'0F4'
VALUCALL EQU   X'118'
*
         USING PBTAB,R11
*
*        PROGRAM BLOCK TABLE
*
PBTAB    DC    A(0)
         DC    CL4'CPUT'           NAME
         DC    A(0)
         DC    H'32'               L'DSA FOR TYPED PROCEDURE (FUNCTION)
         DC    X'08'               TYPE PROCEDURE INTEGER
         DC    AL1(0)              NUMBER OF FORMAL PARAMETERS
*
*        ENTRY BLOCK
*
CPUENT   DC    A(PBTAB)
         DC    A(0)
         DC    A(CPUCODE)
*
*        ESTABLISH ADDRESSABILITY TO THE PSA, ASCB
*
         USING PSA,R0
         USING ASCB,R4
*
CPUCODE  B     CPUCODEA
*
         DC    AL1(L'ID)
ID       DC    C'CPUTIM &SYSDATE &SYSTIME'
*
CPUCODEA STM   R14,R10,SAVEAREA+12
         L     R4,PSAAOLD          R4 -> CURRENT ASCB
         LM    R2,R3,ASCBEJST      ACCUM STEP TCB CPU TIME
         AL    R3,ASCBSRBT+4       ADD ACCUM SRB CPU TIME
         BC    12,CPUCODEB         OVERFLOW ? NO, BRANCH
         LA    R2,1(,R2)           YES, ADD CARRY
CPUCODEB A     R2,ASCBSRBT         TOTAL CPU TIME (TCB + SRB)
         SRDL  R2,(63-51)          SHIFT TO CONVERT TO MICROSECONDS
         ST    R3,24(,R10)         STORE RESULT IN DSA+24
         LM    R14,R10,SAVEAREA+12
         B     EPILOGP(,R13)       RETURN VIA EPILOG CODE IN FSA
*
SAVEAREA DC    18F'0'
*
         PRINT NOGEN
*
*        PREFIXED SAVE AREA
*
         IHAPSA
*
*        ADDRESS SPACE CONTROL BLOCK
*
         IHAASCB
*
         PRINT GEN
*
*        REGISTER EQUATES
*
         IEZREGS
*
         END CPUENT
/*
//LKED.SYSLMOD DD DSN=&&GOSET(CPUTIM),DISP=(OLD,PASS)
//GOIVP4  EXEC PGM=GO
//STEPLIB  DD  DSN=&&GOSET,DISP=(OLD,PASS)
//ALGLDD01 DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(20,10))
//
