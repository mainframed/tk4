//SIMUPRIM JOB (SIMULA),
//             'SIMULA 67',
//             CLASS=A,
//             MSGCLASS=A,
//             REGION=1M,
//             MSGLEVEL=(1,1)
//********************************************************************
//*
//* Name: SYS2.JCLLIB(SIMUPRIM)
//*
//* Desc: Compile and link a SIMULA program for later interactive
//*       usage under TSO. Adapt the LIB and PROG parameters if
//*       necessary.
//*
//*
//* Execution of the SIMUPRIM program under TSO
//* ===========================================
//*
//* This program demonstrates the use of SIMULA from a TSO terminal.
//* It prompts for an integer number and computes all prime numbers
//* up to the number entered. Before using the program for the first
//* time submit job SIMUPRIM to create the load module. Then enter
//* the following commands at the TSO terminal:
//*
//* attrib term lrecl(n-2) blksize(n-2)
//* alloc fi(sysin) da(*)
//* alloc fi(sysout) da(*) using(term)
//* call 'herc01.test.loadlib(simuprim)'
//*
//* where n is the terminal width, i.e. use lrecl/blksize 78 on an
//* 80 column terminal or lrecl/blksize 130 on a 132 column terminal.
//*
//********************************************************************
//SIMULA  EXEC SIMCL,LIB='HERC01.TEST.LOADLIB',PROG=SIMUPRIM,LDISP=SHR
//SIM.SYSIN DD *
comment Erathostenes' Sieve, adapted from Ole-Johan Dahls 1966-paper;

Simulation begin

   integer acc;
   external assembly procedure BreakOutImage;

   process class sieve(prime); integer prime;
        begin
           acc := acc + 1;
           outint(prime, 5);
           L: if nextev.evtime - time > 2 then
                activate new sieve(time + 2) delay 2;
              hold(2 * prime);
              go to L;
        end sieve;

   Outtext( "Show all primes smaller than " ); BreakOutImage;

   outint(2, 5); comment N.B. fails for input < 3;
   activate new sieve(3) at 3;
   hold(inint);

   Outimage; Outimage;
   Outint( acc + 1, 7 ); Outtext( " primes found" );

  end Simulation
/*
//LKED.SYSIN DD DUMMY
//
