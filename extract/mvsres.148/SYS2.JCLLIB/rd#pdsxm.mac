//HERC01RX JOB (RD#PDSXM),'Recv PDS from PC',CLASS=A,MSGCLASS=C
//* USER=HERC01,PASSWORD=xxxxxxxx
//*
//********************************************************************
//*
//*  Name: SYS2.JCLLIB(RD#PDSXM)
//*
//*  Desc: Read an xmitted PDS data set from a PC file
//*        xmitted PDS is received into a new PDS
//*
//*  Note: Uses instream procedure
//*
//*  Note: verify various things:
//*        reader  assumed on unit 10C
//*        reader  assumed to be NOT in use
//*        Hercules device 10C will read PC data set
//*        by default at pch\'name of input XMI'
//*        Hercules device 10C will be set back to:
//*        010C 3505 jcl/dummy eof ascii trunc
//*  Note WARNING 1:
//*        The combined filepath filename can not be too long.
//*        Put the file to be read in the pch directory and
//*        keep the filename short.
//*  Note WARNING 2:
//*        If the PC file does not exist a loop occurs in RECV370
//*        You have to cancel the job to get out of that.
//*        Symptom on the hercules log console:
//*          HHC01200E 0:010C Card:
//*                    error in function access(): No such file or direc
//*
//********************************************************************
//*
//*
//XM#READ  PROC XMI='missing', XMI - INput xmit data set from PC
//             PDS='missing',  PDS - OUTput pds data set
//             SPA='600,150',  Primary and secondary SPACE (in trk)
//             VOL=WORK03,     Target dasd volume
//             BLK='3120',     Blocksize
//             DIR=40,         Number of directory blocks for PDS
//             RDRDIR='pch',   Source reader directory
//             RDRDEV='10C',   Source reader unit
//             RDRDFN0='jcl/dummy eof ascii trunc' orig devinit parms
//*
//* Display reader device
//*
//CMD0     EXEC PGM=BSPOSCMD,COND=(5,LT),PARM=' D U,,,&RDRDEV,1'
//CMD1     EXEC PGM=BSPHRCMD,COND=(5,LT),PARM=' devlist &RDRDEV '
//CMD2     EXEC PGM=BSPOSCMD,COND=(5,LT),PARM=' V &RDRDEV,ONLINE'
//WAIT02   EXEC PGM=DELAY,COND=(5,LT),PARM='1'
//*
//*        Prepare controlcard for BSPHRCMD (define INput file)
//*
//CMD3PREP EXEC PGM=BSPPA2SI,COND=(5,LT),
//    PARM=' devinit &RDRDEV &RDRDIR/&XMI ebcdic eof    '
//SYSUT1   DD  DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(1,1))
//CMD3     EXEC PGM=BSPHRCMD,COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=(OLD,DELETE),DSN=*.CMD3PREP.SYSUT1
//*
//*        Prepare controlcard for BSPHRCMD to list
//*
//CMDLPREP EXEC PGM=BSPPA2SI,COND=(5,LT),
//    PARM=' devlist &RDRDEV                 '
//SYSUT1   DD  DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(1,1))
//CMDLIST  EXEC PGM=BSPHRCMD,COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=(OLD,DELETE),DSN=*.CMDLPREP.SYSUT1
//*
//* Copy the data set FROM the punch device
//*
//COPY#PUN EXEC PGM=IEBGENER,COND=(5,LT)
//SYSPRINT DD  DUMMY
//SYSUT2   DD  DISP=(,PASS),               read INput data set
//             UNIT=SYSALLDA,              VOL=SER=&VOL,
//             DCB=(LRECL=80,BLKSIZE=3200,DSORG=PS,RECFM=FB),
//             SPACE=(TRK,(&SPA),RLSE)
//SYSUT1   DD  UNIT=&RDRDEV,
//             DCB=(LRECL=80,BLKSIZE=80,DSORG=PS,RECFM=F)
//SYSIN    DD  DUMMY
//*
//* close the punch file and reset the reader
//*
//CMD4PREP EXEC PGM=BSPPA2SI,COND=EVEN, even after abend!
//    PARM=' devinit &RDRDEV &RDRDFN0 '
//SYSUT1   DD  DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(1,1))
//CMD4     EXEC PGM=BSPHRCMD,COND=EVEN  even after abend!
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=(OLD,DELETE),DSN=*.CMD4PREP.SYSUT1
//*
//* receive the data set into a PDS
//*
//RECV370  EXEC PGM=RECV370,COND=(5,LT)
//RECVLOG  DD  SYSOUT=*
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=12100)
//SYSTERM  DD  SYSOUT=*
//SYSABEND DD  DUMMY
//*
//XMITIN   DD  DISP=OLD,DSN=*.COPY#PUN.SYSUT2
//SYSUT2   DD  DISP=(,CATLG),DSN=&PDS, PDS output data set
//             UNIT=SYSALLDA,VOL=SER=&VOL,
//             DCB=(LRECL=80,BLKSIZE=&BLK,DSORG=PO,RECFM=FB),
//             SPACE=(TRK,(&SPA,&DIR),RLSE)
//*
//*            PDS Sequential unloaded temporary
//SYSUT1   DD  DISP=(,DELETE,DELETE),DSN=&&SYSUT1,
//             UNIT=SYSALLDA,VOL=SER=&VOL,
//             SPACE=(TRK,(&SPA))
//SYSIN    DD  DUMMY
//XM#READ  PEND =============================================
//* ******************************************************************
//* call the procedure
//********************************************************************
//*
//RD#ASM   EXEC XM#READ,
//             XMI='HERC01.TEST.ASM.XM',       INput from PC
//             PDS='HERC01.TEST.ASM2',        OUTput
//             SPA='065,005', Primary and secondary SPACE (in trk)
//             VOL=WORK03     Target dasd volume
//*
