--- new/dyn75.c	2015-01-17 17:30:00.000000000 +0100
+++ new_64-bit/dyn75.c	2015-02-05 16:30:00.000000000 +0100
@@ -81,7 +81,8 @@
 /* 75xx TCP  - TCPIP Ra,yyy(Rb,Rc)  Ra=anything, Rc>4<14, Rb=0/ditto */
 /*-------------------------------------------------------------------*/
 
-extern long lar_tcpip (DW * regs); /* function in my tcpip.c file */
+extern int lar_tcpip (DW * regs); /* function in my tcpip.c file */
+extern long map32[100];
 
 /*
   R0  = 0 (Initially, but turns to > 0 after the native call.
@@ -102,7 +103,7 @@
     int     r1;              /* Value of R field       */
     int     b2;              /* Base of effective addr */
     VADR    effective_addr2; /* Effective address      */
-    long    i;
+    int     i;
     unsigned char * s;
 
     /*  vv---vv---------------- input variables to TCPIP */
@@ -121,13 +122,13 @@
         regs->GR_L(0) = 1;    /* Do not call native routine again */
     }
 
+    if (regs->GR_L(1) != 0) s = (unsigned char *)(map32[regs->GR_L(2)]);
+
     while (regs->GR_L(1) != 0) { /* Finished > */
 
         i = regs->GR_L(1) - 1;
         if (i > 255) i = 255;
 
-        s = (unsigned char *)(regs->GR_L(2));
-
         if (regs->GR_L(3) == 0) { /* Going to host */
             /* Load bytes from operand address */
             ARCH_DEP(vfetchc) ( s, (unsigned char)i, effective_addr2, b2, regs );
@@ -139,7 +140,7 @@
         i++;
         effective_addr2 += i;  /* No exception, quick copy without calc's */
         (regs->GR_L(b2)) += i; /* Exception, can recalculate if/when restart */
-        (regs->GR_L(2)) += i;  /* Next PC byte segment location */
+        s += i;                /* Next PC byte segment location */
         (regs->GR_L(1)) -= i;  /* One less segment to copy next time */
     }
 
--- new/tcpip.c	2015-01-17 17:30:00.000000000 +0100
+++ new_64-bit/tcpip.c	2015-02-05 16:30:00.000000000 +0100
@@ -36,26 +36,29 @@
 
 typedef struct talk_tag * talk_ptr;
 typedef struct talk_tag {
-    long   len_in;
+    u_int  len_in;
     char * buffer_in;
-    long   len_out;
+    u_int  len_out;
     char * buffer_out;
-    long   ret_cd;
+    int    ret_cd;
+    u_int  slot;
+    u_int  buffer_in_slot;
+    u_int  buffer_out_slot;
 } talk;
 
 typedef struct selects_tag * selects_ptr;
 typedef struct selects_tag {
-    long   len;
-    long   invalid;
-    long * ri;
-    long * wi;
-    long * ei;
-    long * ro;
-    long * wo;
-    long * eo;
+    u_int    len;
+    u_int    invalid;
+    u_int  * ri;
+    u_int  * wi;
+    u_int  * ei;
+    u_int  * ro;
+    u_int  * wo;
+    u_int  * eo;
 } selects;
 
-//void EZASOKET (long func, long aux1, long aux2, talk_ptr t);
+//void EZASOKET (u_int  func, int  aux1, int  aux2, talk_ptr t);
 
 /**********************************************************************************/
 /**********************************************************************************/
@@ -105,7 +108,7 @@
 
 #define hercNBBY 8
 #define hercFD_SETSIZE	256
-typedef long hercfd_mask;
+typedef u_int  hercfd_mask;
 #define hercNFDBITS (sizeof(hercfd_mask) * hercNBBY)
 #define	herchowmany(x, y) (((x) + ((y) - 1)) / (y))
 
@@ -127,8 +130,8 @@
 static char    Ccom_blk [Ccom]; /* Is a blocking socket? */
 static SOCKET  Ccom_han [Ccom];
 
-static long    CerrGen;         /* Last error, thread-dodgy but it's only used for "non socket" errors */
-static long    Cerr     [Ccom]; /* Last error for specific socket, this one is thread safe. */
+static u_int     CerrGen;         /* Last error, thread-dodgy but it's only used for "non socket" errors */
+static u_int     Cerr     [Ccom]; /* Last error for specific socket, this one is thread safe. */
 
 static selects_ptr Cselect [Ccom];      /* Array for the 3 arrays of select input/output data */
 
@@ -158,10 +161,29 @@
 
 static LOCK tcpip_lock;
 
-static long tcpip_init_req = 1;
+static u_int  tcpip_init_req = 1;
+
+long map32[100] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
+                   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
+
+static u_int find_slot ( long address ) {
+    u_int  i;
+    i = 0;
+    while ((map32[i] != -1) && (i<99)) i++;
+    map32[i] = address;
+    return (i);
+}
 
 static void tcpip_init () {
-    long i;
+    u_int  i;
 
 
     initialize_lock(&tcpip_lock);
@@ -191,7 +213,7 @@
 /* ipc/network software -- argument errors */
 #define	hENOTSOCK        38		/* Socket operation on non-socket */
 #define	hEDESTADDRREQ    39		/* Destination address required */
-#define	hEMSGSIZE        40		/* Message too long */
+#define	hEMSGSIZE        40		/* Message too int  */
 #define	hEPROTOTYPE      41		/* Protocol wrong type for socket */
 #define	hENOPROTOOPT     42		/* Protocol not available */
 #define	hEPROTONOSUPPORT 43		/* Protocol not supported */
@@ -219,7 +241,7 @@
 /* Other */
 #define hEINVAL          22		/* Invalid argument */
 #define hELOOP           62		/* Too many levels of symbolic links */
-#define hENAMETOOLONG    63		/* File name too long */
+#define hENAMETOOLONG    63		/* File name too int  */
 #define hEHOSTDOWN       64		/* Host is down */
 #define hEHOSTUNREACH    65		/* No route to host */
 #define hENOTEMPTY       66		/* Directory not empty */
@@ -291,7 +313,7 @@
 
 /* This is the error translation routine for whatever host to Hercules: */
 static int Get_errno () {
-    long i;
+    u_int  i;
     
 #ifndef _MSVC_
     i = errno;
@@ -398,11 +420,11 @@
   (Zeros are the 64bit register parts, never used in S370.)
 */
 
-static void set_reg (long * regs, long r, long v) {
+static void set_reg (u_int  * regs, u_int  r, u_int  v) {
     regs [(r * 2) + 1] = v;
 }
 
-static long get_reg (long * regs, long r) {
+static u_int  get_reg (u_int  * regs, u_int  r) {
     return (regs [(r * 2) + 1]);
 }
 
@@ -415,11 +437,11 @@
   (Zeros are the 64bit register parts, never used in S370.)
 */
 
-static void set_reg (long * regs, long r, long v) {
+static void set_reg (u_int  * regs, u_int  r, u_int  v) {
     regs [r * 2] = v;
 }
 
-static long get_reg (long * regs, long r) {
+static u_int  get_reg (u_int  * regs, u_int  r) {
     return (regs [r * 2]);
 }
 
@@ -427,7 +449,7 @@
 
 /**********************************************************************************/
 
-static long check_not_sock (long s, talk_ptr t) {
+static u_int  check_not_sock (u_int  s, talk_ptr t) {
 
     if ((s < 1) || (s >= Ccom)) {
         t->ret_cd = -1;
@@ -442,13 +464,13 @@
     return (0);
 }
 
-static void EZASOKET (long func, long aux1, long aux2, talk_ptr t) {
-	long   i;
+static void EZASOKET (u_int  func, int  aux1, int  aux2, talk_ptr t) {
+	int    i;
     socklen_t  isock;
-    long   k;
-    long   l;
-    long   m;
-	long   size;
+    int    k;
+    int    l;
+    int    m;
+	int    size;
     struct hostent * hp;
     struct timeval timeout;
     fd_set sockets;
@@ -489,7 +511,7 @@
                 t->ret_cd = 0;
                 return;
             } else {
-                t->ret_cd = (ntohl(((long *)(hp->h_addr_list [0])) [0]));
+                t->ret_cd = (ntohl(((u_int  *)(hp->h_addr_list [0])) [0]));
                 return;
             }
         }
@@ -689,6 +711,7 @@
 
         t->len_out = sizeof (Clocal_adx);
         t->buffer_out = (char *)malloc (t->len_out);
+        t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
         memcpy (t->buffer_out, &Slocal_adx, t->len_out);
         ((SOCKADDR_IN *)(t->buffer_out))->sin_family = htons (((SOCKADDR_IN *)(t->buffer_out))->sin_family);
 
@@ -732,12 +755,14 @@
         }
 
         t->buffer_out = (char *)malloc (aux2);
+        t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
 
         if ((size = recv (Ccom_han [aux1], t->buffer_out, aux2, 0)) == SOCKET_ERROR) {	/* receive command */
 
             Cerr [aux1] = Get_errno ();
 
             t->len_out = 0;
+            map32[t->buffer_out_slot] = -1;
             free (t->buffer_out);
             t->buffer_out = NULL;
 
@@ -768,6 +793,7 @@
 
         t->len_out = t->len_in;
         t->buffer_out = (char *)malloc (t->len_out);
+        t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
 
         m = t->len_out;
         i = 0;
@@ -784,6 +810,7 @@
 
         t->len_out = t->len_in;
         t->buffer_out = (char *)malloc (t->len_out);
+        t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
 
         m = t->len_out;
         i = 0;
@@ -829,6 +856,7 @@
 
         t->len_out = sizeof (Clocal_adx);
         t->buffer_out = (char *)malloc (t->len_out);
+        t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
 
         isock = t->len_out;
         t->ret_cd = getsockname (Ccom_han [aux1], (struct sockaddr *)(t->buffer_out), &isock);
@@ -884,7 +912,7 @@
             i = t->len_in / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_in) [i] = htonl (((long *)t->buffer_in) [i]);
+                ((u_int  *)t->buffer_in) [i] = htonl (((u_int  *)t->buffer_in) [i]);
             }
 
             i = 0;
@@ -910,7 +938,7 @@
             i = t->len_in / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_in) [i] = htonl (((long *)t->buffer_in) [i]);
+                ((u_int  *)t->buffer_in) [i] = htonl (((u_int  *)t->buffer_in) [i]);
             }
 
             i = 0;
@@ -936,7 +964,7 @@
             i = t->len_in / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_in) [i] = htonl (((long *)t->buffer_in) [i]);
+                ((u_int  *)t->buffer_in) [i] = htonl (((u_int  *)t->buffer_in) [i]);
             }
 
             i = 0;
@@ -986,6 +1014,7 @@
 
             t->len_out = Cselect [m]->len;
             t->buffer_out = (char *)malloc (t->len_out);
+            t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
             memset (t->buffer_out, 0, t->len_out);
 
             i = 0;
@@ -1000,7 +1029,7 @@
             i = t->len_out / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_out) [i] = htonl (((long *)t->buffer_out) [i]);
+                ((u_int  *)t->buffer_out) [i] = htonl (((u_int  *)t->buffer_out) [i]);
             }
 
             t->ret_cd = 0;
@@ -1010,6 +1039,7 @@
 
             t->len_out = Cselect [m]->len;
             t->buffer_out = (char *)malloc (t->len_out);
+            t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
             memset (t->buffer_out, 0, t->len_out);
 
             i = 0;
@@ -1024,7 +1054,7 @@
             i = t->len_out / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_out) [i] = htonl (((long *)t->buffer_out) [i]);
+                ((u_int  *)t->buffer_out) [i] = htonl (((u_int  *)t->buffer_out) [i]);
             }
 
             t->ret_cd = 0;
@@ -1034,6 +1064,7 @@
 
             t->len_out = Cselect [m]->len;
             t->buffer_out = (char *)malloc (t->len_out);
+            t->buffer_out_slot = find_slot ((long)&(t->buffer_out [0]));
             memset (t->buffer_out, 0, t->len_out);
 
             i = 0;
@@ -1048,7 +1079,7 @@
             i = t->len_out / 4;
             while (i) {
                 i--;
-                ((long *)t->buffer_out) [i] = htonl (((long *)t->buffer_out) [i]);
+                ((u_int  *)t->buffer_out) [i] = htonl (((u_int  *)t->buffer_out) [i]);
             }
 
             t->ret_cd = 0;
@@ -1097,7 +1128,7 @@
   R15 = Work Variable / Return Code
 */
 
-long lar_tcpip (long * regs) {
+u_int  lar_tcpip (u_int  * regs) {
     talk_ptr t;
 
     if (tcpip_init_req) {
@@ -1110,32 +1141,34 @@
         if (get_reg (regs, 3) == 0) { /* Alloc memory for this communication. */
 
             t = (talk_ptr)malloc (sizeof (talk));
+            t->slot = find_slot ((long)t);
             
             t->len_in = get_reg (regs, 1);
             t->buffer_in = (char *)malloc (t->len_in + 1);
+            t->buffer_in_slot = find_slot ((long)&(t->buffer_in [0]));
             t->buffer_in [t->len_in] = 0; /* NULL Terminator */
 
             t->len_out = 0;
             t->buffer_out = NULL; /* I've got nothing, at the moment */
             t->ret_cd = 0;
 
-            set_reg (regs, 14, (long)t);
+            set_reg (regs, 14, (u_int )t->slot);
             
-            set_reg (regs, 2, (long)(&(t->buffer_in [0])));
+            set_reg (regs, 2, (u_int )t->buffer_in_slot);
 
         } else {                      /* They want some return info... */
 
-            t = (talk_ptr)get_reg (regs, 14);
+            t = (talk_ptr)map32[get_reg (regs, 14)];
 
             set_reg (regs, 1, t->len_out);
-            set_reg (regs, 2, (long)(&(t->buffer_out [0])));
+            set_reg (regs, 2, (u_int )t->buffer_out_slot);
 
             set_reg (regs, 4, t->ret_cd);
         }
 
     } else {                      /* Must need additional processing. */
 
-        t = (talk_ptr)get_reg (regs, 14);
+        t = (talk_ptr)map32[get_reg (regs, 14)];
 
         if (get_reg (regs, 3) == 0) { /* Run. */
 
@@ -1143,8 +1176,13 @@
 
         } else {                      /* Dealloc memory for this communication. */
 
+            map32[t->buffer_in_slot] = -1;
             free (t->buffer_in);
-            if (t->buffer_out) free (t->buffer_out);
+            if (t->buffer_out) {
+                map32[t->buffer_out_slot] = -1;
+                free (t->buffer_out);
+            }
+            map32[t->slot] = -1;
             free (t);
 
             set_reg (regs, 14, 0);
