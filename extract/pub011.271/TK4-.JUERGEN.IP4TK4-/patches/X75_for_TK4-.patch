--- old/dyn75.c	2009-01-06 22:59:38.000000000 +0100
+++ new/dyn75.c	2015-01-17 17:30:00.000000000 +0100
@@ -98,7 +98,7 @@
   R15 = Work Variable / Return Code
 */
 
-DLL_EXPORT DEF_INST(dyninst_opcode_75) {
+DEF_INST(dyninst_opcode_75) {
     int     r1;              /* Value of R field       */
     int     b2;              /* Base of effective addr */
     VADR    effective_addr2; /* Effective address      */
@@ -174,19 +174,4 @@
 #define hdl_fini dyn75_LTX_hdl_fini
 #endif
 
-HDL_DEPENDENCY_SECTION;
-
-HDL_DEPENDENCY (HERCULES);
-HDL_DEPENDENCY (REGS);
-
-END_DEPENDENCY_SECTION;
-
-HDL_REGISTER_SECTION;
-
-HDL_REGISTER (s370_dyninst_opcode_75, s370_dyninst_opcode_75);
-HDL_REGISTER (s390_dyninst_opcode_75, s390_dyninst_opcode_75);
-HDL_REGISTER (z900_dyninst_opcode_75, z900_dyninst_opcode_75);
-
-END_REGISTER_SECTION;
-
 #endif /*!defined(_GEN_ARCH)*/
--- old/ftpd.c	2009-03-30 14:26:02.000000000 +0200
+++ new/ftpd.c	2015-02-09 20:48:01.000000000 +0100
@@ -41,8 +41,8 @@
 };
 */
 
-/* #define MAXBUFLEN 4096 */  /* Normal buffer size for FTP - all/most NW cards/drivers support this. */
-#define MAXBUFLEN 32768       /* Largest buffer size allowed in Windows */
+#define MAXBUFLEN 4096        /* Normal buffer size for FTP - all/most NW cards/drivers support this. */
+/* #define MAXBUFLEN 32768 */ /* Largest buffer size allowed in Windows */
 /* used for socket send/recv max size, buffers are twice as big (plus one for an optional terminator.) */
 
 #define PATHLENGTH 260
@@ -50,17 +50,14 @@
 #define FAKE_USER  "user"
 #define FAKE_GROUP "group"
 
-#define WELCOME_MESSAGE "*** MVS38j FTP Daemon ***"
+#define WELCOME_MESSAGE "*** MVS38j FTP Daemon on TK4- ***"
 #define LOGIN_MESSAGE   "You are now logged in."
 
-#define SERVER_PORT 21
-#define SERVER_IP   "any"
-/* Use- SERVER_IP   "127.0.0.1" to only accept connections from localhost. */
+    short SERVER_PORT;
+    char  SERVER_IP[16];
 
 /**** The following is a back-up mechanism for OSs like Windows that don't return information in getsockname. */
-#define PASVADDR    "127,0,0,1"  /* PASV style string for hosts that don't return their IP Address. */
-/* Use- PASVADDR    "xxx,xxx,xxx,xxx" for the network address for *this* host, used with PASV connections. */
-/**** Leaving it as "127,0,0,1" will allow only local-machine FTP clients to use PASV mode transfers. */
+    char  PASVADDR[16]; /* PASV style string for hosts that don't return their IP Address. */
 
 static long running = 1;  /* We are running */
 static long optimise = 0; /* The largest numbered socket descriptor, for 'select' processing */
@@ -589,6 +586,10 @@
                             s = ((long **)s) [0];//   0->NEXT-CIB
                         }
                     }
+                    if (running) { // no STOP command found, reinitialize arrays
+                        rout = rbits; /* Never modify the real ones... */
+                        wout = wbits; /* 'select' always returns a new array. */
+                    }
                 }
             }
             i = j;
@@ -1947,7 +1948,7 @@
     char   type;
     FILE * fh;
     SOCKET tsock;
-    char   fmode [3];
+    char   fmode [19];
     int    org;
 
     /* get whatever data is ready */
@@ -2067,7 +2068,7 @@
                     set_callbacks (data->DATA_LISTEN_SOCK, data, &data_listen_sock_rcb, NULL);
 
                     comma_list = sockaddr_to_comma_list (data->DATA_LISTEN_SOCK);
-                    sprintf (tstr, "227 Entering Passive Mode %s", comma_list);
+                    sprintf (tstr, "227 Entering Passive Mode (%s)", comma_list);
                     ctl_write_line (data, tstr);
                     free (comma_list);
                 };
@@ -2173,7 +2174,7 @@
                     if (data->TYPE == 'A') {
                         strcpy (fmode, "r");
                     } else {
-                        strcpy (fmode, "rb");
+                        strcpy (fmode, "rb,vmode=2,umode=0");
                     };
 
                     if (real_path [0] == 0) {
@@ -2247,7 +2248,7 @@
                     if (data->TYPE == 'A') {
                         strcpy (fmode, "w");
                     } else {
-                        strcpy (fmode, "wb");
+                        strcpy (fmode, "wb,vmode=2,umode=0");
                     };
 
                     if (real_path [0] == 0) {
@@ -2378,13 +2379,23 @@
     p_root r;
     int dircount = 0;
 
-    if ((argc >= 2) && (stricmp (argv [1], "fast") == 0)) {
+    if ((argc >= 5) && (stricmp (argv [1], "fast") == 0)) {
         printf ("Library Optimisation Extensions Enabled\n");
         __libc_arch = 1; /* Enable speed optimisations within the library */
         j = 2;
     } else
         j = 1;
 
+    strcpy (PASVADDR, argv [j]);
+    j++;
+
+    strcpy (SERVER_IP, argv [j]);
+    SERVER_PORT = (short)atoi (SERVER_IP);
+    j++;
+
+    strcpy (SERVER_IP, argv [j]);
+    j++;
+
     while ((j < argc) && (added_ddc < added_ddl)) {
         if (strnicmp (argv [j], "//DDN:", 6) == 0) {
             strncpy (added_dds [added_ddc], &(argv [j][6]), 8);
--- old/tcpip.c	2009-01-07 15:15:50.000000000 +0100
+++ new/tcpip.c	2015-01-17 17:30:00.000000000 +0100
@@ -444,6 +444,7 @@
 
 static void EZASOKET (long func, long aux1, long aux2, talk_ptr t) {
 	long   i;
+    socklen_t  isock;
     long   k;
     long   l;
     long   m;
@@ -649,7 +650,7 @@
             return; /* None available. */
         }
 
-        i = sizeof (Slocal_adx);
+        isock = sizeof (Slocal_adx);
         
         timeout.tv_sec = 0;
         timeout.tv_usec = 0;
@@ -670,7 +671,7 @@
             return;
         }
 
-        l = Ccom_han [m] = accept (Ccom_han [aux1], &Slocal_adx, (int *)&i);
+        l = Ccom_han [m] = accept (Ccom_han [aux1], &Slocal_adx, &isock);
 
         if (l == INVALID_SOCKET) {
 
@@ -829,8 +830,8 @@
         t->len_out = sizeof (Clocal_adx);
         t->buffer_out = (char *)malloc (t->len_out);
 
-        i = t->len_out;
-        t->ret_cd = getsockname (Ccom_han [aux1], (struct sockaddr *)(t->buffer_out), (int *)(&i));
+        isock = t->len_out;
+        t->ret_cd = getsockname (Ccom_han [aux1], (struct sockaddr *)(t->buffer_out), &isock);
 
         if (t->ret_cd == -1) {
             Cerr [aux1] = Get_errno ();
