         LOGO  CSECT=SSP025,                                           *
               TITLE='DATE SUBROUTINE'
SSP025   CSECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*          THIS SUBROUTINE WILL TAKE A DATE IN ONE OF THREE           *
*              INCOMING FORMATS AND RETURN THE OTHER TWO.  IN         *
*              ADDITION IT WILL RETURN THREE EDITED FORMS OF          *
*              THE DATE ALONG WITH THE DAY OF THE WEEK.  IT           *
*              WILL ALSO TAKE AN INCREMENT OR DECREMENT IN            *
*              MONTHS OR DAYS AND APPLY IT TO THE INCOMING            *
*              DATE AND RETURN ALL OF THE MENTIONED DATES.            *
*              AN ERROR CODE AND ERROR MESSAGE ARE GENERATED          *
*              IN CASE BAD DATA IS PASSED TO THIS SUBROUTINE.         *
*          THE ARGUMENTS ARE PASSED AS ONE ADDRESS.  IN COBOL         *
*              THIS IS A LEVEL 01 AREA DESCRIBED AS FOLLOWS:          *
*                                                                     *
*                                                       DISPLACEMENTS *
*                                                          DEC  HEX   *
*      01  DATE-AREA.                             0CL98      0    0   *
*          05  GREGORIAN-MMDDYY    PIC X(6).       CL6       0    0   *
*          05  GREGORIAN-MMDDYYYY  PIC X(8).       CL8       6    6   *
*          05  JULIAN-YYYYDDD      PIC X(7).       CL7      14    E   *
*          05  INCREMENT-MONTHS    PIC S9(3).      CL3      21   15   *
*          05  INCREMENT-DAYS      PIC S9(3).      CL3      24   18   *
*          05  GREGORIAN-EDITED    PIC X(8).       CL8      27   1B   *
*     *           XX/XX/XX                                            *
*          05  MMM-YYYY-EDITED     PIC X(9).       CL9      35   23   *
*     *           MMM  YYYY                                           *
*          05  MMM-DD-YYYY-EDITED  PIC X(12).      CL12     44   2C   *
*     *           MMM DD, YYYY                                        *
*          05  DAY-OF-WEEK         PIC X(9).       CL9      56   38   *
*          05  ERROR-CODE          PIC X(2).       CL2      65   41   *
*          05  ERROR-DESCRIPTION   PIC X(31).      CL31     67   43   *
*                                                (TOTAL)    98   62   *
*                                                                     *
*          THE PROGRAM CAN BE CALLED EITHER IN BATCH PROGRAMS OR      *
*              IN CICS PROGRAMS SINCE IT USES THE PASSED MESSAGE      *
*              AREA FOR WHATEVER WORK AREAS IT NEEDS.                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        REGISTER USAGE IS AS FOLLOWS:                                *
*                                                                     *
*        R1  - ADDRESS OF ARGUMENTS - WORK REG   - CORRUPTED BY TRT   *
*        R2  - WORK REGISTER                     - CORRUPTED BY TRT   *
*        R3  - ARGUMENT DSECT REGISTER           - LOADED FROM REG 1  *
*        R4  - BRANCH AND LINK REGISTER          - LOW LEVEL          *
*        R5  - BRANCH AND LINK REGISTER          - HIGH LEVEL         *
*        R6  -                                                        *
*        R7  -                                                        *
*        R8  - WORK REGISTER                                          *
*        R9  - WORK REGISTER                                          *
*        R10 -                                                        *
*        R11 -                                                        *
*        R12 -                                                        *
*        R13 - CALLING PROGRAM'S SAVE AREA       - NOT CORRUPTED      *
*        R14 - RETURN POINT IN CALLING PROGRAM   - NOT CORRUPTED      *
*        R15 - BASE REGISTER FOR THIS ROUTINE    - NOT CORRUPTED      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*          EQUATE REGISTERS TO NAMES                                  *
*                                                                     *
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         USING *,R15
         STM   R14,R12,12(R13)    SAVE CALLING REGISTERS
         L     R3,0(R1)           POINT TO PASSED ARGUMENTS
         USING ARGLIST,R3         ASSOCIATE DSECT TO ARG REGISTER
*                        FIND THE PASSED DATE
CKPARM1  EQU   *
         MVC   ERRORCDE(2),ZEROS   INITIALIZE THE ERROR CODE FIELD
         CLC   GREG6(6),SPACES     CHECK SIX POSITION DATE FOR SPACES
         BE    CKPARM2              YES, THEN CHECK SECOND ARGUMENT
         CLC   GREG8(8),SPACES     CHECK EIGHT BYTE GREG FOR SPACES
         BNE   ERROR1               NO, THEN WE CAN'T DETERMINE PROCESS
         CLC   JULIAN(7),SPACES    CHECK JULIAN DATE FOR SPACES
         BNE   ERROR1               NO, THEN WE CAN'T DETERMINE PROCESS
         MVC   GREG8(6),GREG6      MOVE PASSED DATA TO 8 BYTE DATE
         MVC   GREGYY(2),GREGCC    MOVE YEAR TO PROPER POSITION
         MVC   GREGCC(2),CENTURY   MOVE DEFAULT CENTURY (19) TO CC
         B     CKGREG              PROCEED TO CHECK GREGORIAN DATE
*
CKPARM2  EQU   *
         CLC   GREG8(8),SPACES     CHECK EIGHT BYTE DATE FOR SPACES
         BE    CKPARM3              YES, THEN CHECK THIRD ARGUMENT
         CLC   JULIAN(7),SPACES    CHECK JULIAN DATE FOR SPACES
         BNE   ERROR1               NO, THEN WE CAN'T DETERMINE PROCESS
         B     CKGREG              PROCEED TO CHECK GREGORIAN DATE
*
CKPARM3  EQU   *
         CLC   JULIAN(7),SPACES    CHECK JULIAN DATE FOR SPACES
         BE    ERROR1               YES, THEN INDICATE NO ARGUMENT
         B     CKJUL               PROCEED TO CHECK JULIAN DATA
CKGREG   EQU   *
         TRT   GREG8(8),NUMTABLE   CHECK PASSED DATA FOR ALL NUMERICS
         BZ    CKGREGA              IF GOOD, COMMENCE PROCESSING
         BC    4,ERROR2             IF TRT DID NOT COMPLETE, NOT NUMER
         STC   R2,WRKBYTE1         PLACE RESULT BYTE IN WORK FIELD
         CLI   WRKBYTE1,X'FF'      CHECK VALUE FOR HEX 'FF'
         BE    ERROR2               IF SO, DATA IS NOT NUMERIC
         CLI   WRKBYTE1,X'CF'      CHECK FOR NEGATIVE VALUE
         BH    ERROR2               IF SO, SIGNED NEGATIVE IS NO GOOD
         OI    GREGYY+1,X'F0'      ELSE, MAKE YEAR VALUE NEUTRAL
*
CKGREGA  EQU   *                   DATE NUMERIC - CONVERT TO DAYS
         CLC   GREGMM(2),ZEROS     CHECK MONTH FOR ZEROS
         BE    ERROR4               YES, THEN RETURN WITH ERROR #4
         CLC   GREGMM(2),CHAR12    CHECK MONTH FOR GREATER THAN 12
         BH    ERROR5               YES, THEN RETURN WITH ERROR #5
         CLC   GREGDD(2),ZEROS     CHECK DAY FOR ZEROS
         BE    ERROR6               YES, THEN RETURN WITH ERROR #6
*
*                  MONTH IS OK, WE MUST NOW CHECK FOR LEAP YEAR
*
         PACK  WRKPKDAY,GREGDD(2)  PACK DAYS VALUE FOR COMPARISONS
         PACK  WRKPKMON,GREGMM(2)  PACK MONTH FOR LATER USE, TOO
         PACK  WRKPKYR(3),GREGCCYY MOVE PASSED YEAR TO WORK AREA
         BAL   R4,YEARPROC         BRANCH TO PROCESS PASSED YEAR
         BAL   R4,TABLEPTR         BRANCH TO BUILD POINTER TO TABLE
         CLI   WRKBYTE1,C'Y'       CHECK FOR LEAP YEAR CONDITION
         BE    CKGREGB              IF SO, USE SECOND TABLE ENTRY
         CP    WRKPKDAY(2),3(2,R9) COMPARE TO VALUE IN THE TABLE
         BH    ERROR7               IF VALUE IS HIGH, INDICATE ERROR
         B     CKGREGC             PROCEED TO NEXT STEP
*
CKGREGB  EQU   *                   LEAP YEAR TABLE *****
         CP    WRKPKDAY(2),7(2,R9) COMPARE TO VALUE IN THE TABLE
         BH    ERROR7               IF VALUE IS HIGH, INDICATE ERROR
*
*              ALL PASSED PARAMETERS HAVE BEEN VALIDATED
*
CKGREGC  EQU   *
         BAL   R4,CKINCR           EDIT INCREMENTS
         CP    WRKINCMM,PACK0      CHECK MONTH INCREMENT FOR VALUE
         BE    CKGREGD              IF NONE, GO CHECK DAYS INCREMENT
         BAL   R5,INCRMM           BRANCH TO INCREMENT BY MONTHS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
*
*                  CONVERT GREGORIAN DATE TO JULIAN DATE
*
CKGREGD  EQU   *
         BAL   R5,CNVGTJ           BRANCH TO CONVERT GREG DATE TO JUL
*
*          THE JULIAN DATE HAS BEEN BUILT.  THE LAST PROCESS TO BE
*              PERFORMED IS TO ADD A DAYS INCREMENT IF IT WAS PASSED.
*              THEN THE RETURN PARAMETERS CAN BE ASSEMBLED
*
         CP    WRKINCDD,PACK0      CHECK DAYS INCREMENT FOR VALUE
         BE    BLDARGS              IF NONE, GO BUILD RETURN VALUES
         BAL   R5,INCRDD           BRANCH TO INCREMENT DAYS ROUTINE
         BAL   R5,CNVJTG           CONVERT CHANGED JULIAN BACK TO GREG
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         B     BLDARGS             PROCEED TO COMMON BUILD ROUTINE
CKJUL    EQU   *
         TRT   JULIAN(7),NUMTABLE  CHECK PASSED DATA FOR ALL NUMERICS
         BZ    CKJULA               IF GOOD, COMMENCE PROCESSING
         BC    4,ERROR3             IF TRT DID NOT COMPLETE, NOT NUMER
         STC   R2,WRKBYTE1         PLACE RESULT BYTE IN WORK FIELD
         CLI   WRKBYTE1,X'FF'      CHECK VALUE FOR HEX 'FF'
         BE    ERROR3               IF SO, DATA IS NOT NUMERIC
         CLI   WRKBYTE1,X'CF'      CHECK FOR NEGATIVE VALUE
         BH    ERROR3               IF SO, SIGNED NEGATIVE IS NO GOOD
         OI    JULIAN+6,X'F0'      ELSE, MAKE DAYS VALUE NEUTRAL
*
CKJULA   EQU   *                   DATE NUMERIC - CONVERT TO DATE
         CLC   JULDDD(3),ZEROS     CHECK PASSED JULIAN DAYS FOR ZEROS
         BE    ERROR8               IF SO, INDICATE WITH ERROR #8
         PACK  WRKPKYR,JULCCYY     PACK PASSED JULIAN YEAR
         PACK  WRKJULDD,JULDDD     PACK PASSED JULIAN DAYS
         BAL   R4,YEARPROC         BRANCH TO CHECK FOR LEAP YEAR COND
         CP    WRKJULDD,WRKYRDAY   COMPARE PASSED DAYS TO MAX FOR YEAR
         BH    ERROR9               IF HIGH, THEN GREATER THAN YEAR MAX
         BAL   R4,CKINCR           CHECK PASSED INCREMENT VALUES
*
*              ALL PASSED PARAMETE RS HAVE BEEN VALIDATED
*
         CP    WRKINCDD,PACK0      WAS THERE A DAYS INCREMENT PASSED
         BE    CKJULB               IF NOT, CHECK FOR MONTHS INCREMENT
         BAL   R5,INCRDD           BRANCH TO INCREMENT BY DAYS ROUTINE
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
*
*                  CONVERT JULIAN DATE TO GREGORIAN DATE
*
CKJULB   EQU   *
         BAL   R5,CNVJTG           BRANCH TO JULIAN TO GREG CONVERSION
         CP    WRKINCMM,PACK0      CHECK FOR AN INCREMENT OF MONTHS
         BE    BLDARGS              IF NOT, WE CAN EXIT NOW TO COMMON
         BAL   R5,INCRMM           INCREMENT GREGORIAN VALUES BY MONTHS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         BAL   R5,CNVGTJ           CONVERT CHANGED GREG DATE TO JULIAN
         B     BLDARGS             PROCEED TO COMMON BUILD ROUTINE
*
*              ALL VALUES ARE NOW AVAILABLE FOR BUILDING THE DATES
*               TO BE RETURNED.
*
BLDARGS  EQU   *
         UNPK  EDYYYY1,WRKPKYR     UNPACK YEAR VALUE
         OI    EDYYYY1+3,X'F0'     KILL SIGN (IF ANY)
         MVC   EDYYYY2,EDYYYY1     MOVE YEAR TO OTHER PLACES
         MVC   GREGCCYY,EDYYYY1           .
         MVC   JULCCYY,EDYYYY1            .
         MVC   GREG6+4(2),GREGYY          .
         MVC   EDYY,GREGYY                .
         UNPK  JULDDD,WRKJULDD     RESTORE NEW/UNCHANGED JULIAN DAYS
         OI    JULDDD+2,X'F0'      KILL SIGN (IF ANY)
         UNPK  GREGDD,WRKPKDAY     RESTORE NEW/UNCHANGED GREG DAYS
         OI    GREGDD+1,X'F0'      KILL SIGN (IF ANY)
         MVC   GREG6+2(2),GREGDD   MOVE DAY VALUE TO THE OTHER PLACES
         MVC   EDDD1,GREGDD                  .
         MVC   EDDD2,GREGDD                  .
         UNPK  GREGMM,WRKPKMON     RESTORE NEW/UNCHANGED GREG MONTH
         OI    GREGMM+1,X'F0'      KILL SIGN (IF ANY)
         MVC   GREG6(2),GREGMM     MOVE MONTH VALUE TO OTHER PLACES
         MVC   EDMM,GREGMM                      .
         MVC   EDMMM1(3),0(R9)     MOVE MONTH ABBREVIATION TO EDITS
         MVC   EDMMM2(3),0(R9)                  .
         MVI   EDSLASH1,C'/'       MOVE PUNCTUATION WHERE APPROPRIATE
         MVI   EDSLASH2,C'/'                    .
         MVC   EDSPACE1(2),SPACES               .
         MVI   EDSPACE2,X'40'                   .
         MVI   EDSPACE3,X'40'                   .
         MVI   EDCOMMA,C','                     .
*
*                  FOLLOWING IS A DAY OF THE WEEK ROUTINE
*                  THE FORMULA SIMPLY COMPUTES DAYS TO DATE,
*                   ADDS AN ADJUSTMENT FACTOR OF 5, DIVIDES
*                   RESULT BY SEVEN, AND USES THE REMAINDER
*                   AS THE INDEX INTO THE TABLE OF DAY NAMES.
*
         SP    WRKPKYR,PACK1       SUBTRACT ONE FROM CURRENT YEAR
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         ZAP   WRKPKNUM,WRKPKYR    MOVE CURRENT YEAR TO WORKAREA
         MP    WRKPKNUM,PACK365(2) COMPUTE NUMBER OF DAYS TO DATE
         AP    WRKPKNUM,WRKLEAPS   ADD NUMBER OF LEAP YEARS TO DATE
         SP    WRKPKNUM,WRK100S    SUBTRACT NUMBER OF CENTURIES
         AP    WRKPKNUM,WRK400S    ADD BACK EVERY FOURTH CENTURY
         AP    WRKPKNUM,PACK366(2) ADD 366 DAYS FOR YEAR ZERO
         AP    WRKPKNUM,WRKJULDD   ADD CURRENT DAYS YEAR TO DATE
         AP    WRKPKNUM,PACK5      ADD ADJUSTMENT FACTOR FOR COMPUTE
         DP    WRKPKNUM,PACK7      DIVIDE TOTAL DAYS BY SEVEN (1 WEEK)
         SR    R9,R9               PREPARE WORK REGISTER
         IC    R9,WRKPKNUM+7       USE THE REMAINDER ONLY
         SRL   R9,4                SHIFT OFF THE SIGN BITS
         MH    R9,HALF09           MULTIPLY BY LENGTH OF AN ENTRY
         LA    R9,DAYTABLE(R9)     BUILD OFFSET INTO DAY OF WEEK TABLE
         MVC   DAYWEEK(9),0(R9)    MOVE DAY OF THE WEEK TO PASS AREA
         MVI   ERRORMSG,X'40'      CLEAR THE ERROR MESSAGE FIELD
         MVC   ERRORMSG+1(30),ERRORMSG          .
*
RETURN   EQU   *
         LM    R14,R12,12(R13)     RESTORE THE ORIGINAL REGISTERS
         SR    R15,R15             GENERATE ZERO RETURN CODE
         BR    R14                 RETURN TO CALLING PROGRAM
* * * * * * * * * * CONVERT JULIAN TO GREGORIAN ROUTINE * * * * * * * *
*
*                   INPUT IS WRKJULDD - TWO BYTES, UNSIGNED PACKED DEC
*                            WRKBYTE1 - ONE BYTE,  LEAP YEAR INDICATOR
*                            MONTABLE - TABLE OF MONTH & DAY VALUES
*                   OUTPUT - WRKPKMON - TWO BYTES, UNSIGNED PACKED DEC
*                            WRKPKDAY - TWO BYTES, UNSIGNED PACKED DEC
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CNVJTG   EQU   *
         ZAP   WRKPKNUM,WRKJULDD   MOVE JULIAN DAYS TO WORK AREA
         AP    WRKPKNUM,PACK5      ADD 5 TO TOTAL
         DP    WRKPKNUM,PACK31(2)  DIVIDE TOTAL DAYS BY 31
         AP    WRKPKNUM(6),PACK1   ADD ONE TO RESULT - QUOTIENT
         ZAP   WRKPKMON,WRKPKNUM(6) MOVE TRIAL MONTH TO GREG MONTH
         BAL   R4,TABLEPTR         POINT TO TABLE ENTRY
         LA    R8,5(R9)            BUILD POINTER TO DAYS TO DATE VALUE
         CLI   WRKBYTE1,C'Y'       IS THE YEAR A LEAP YEAR
         BNE   CNVJTGA              IF NOT, THEN DO LEAP YEAR NUMBERS
         LA    R8,4(R8)            ADJUST POINTER TO LEAP YEAR VALUES
CNVJTGA  EQU   *
         CP    WRKJULDD,0(2,R8)    COMPARE JULIAN DAYS TO TABLE
         BH    CNVJTGB              IF JULIAN DAYS GREATER, IT IS A HIT
         SH    R8,HALF11           SET BACK TO PREVIOUS ENTRY
         SH    R9,HALF11                 ( DITTO )
         SP    WRKPKMON,PACK1      DECREMENT TRIAL MONTH
CNVJTGB  EQU   *
         ZAP   WRKPKNUM,WRKJULDD   MOVE JULIAN DAYS TO WORK AREA
         SP    WRKPKNUM,0(2,R8)    SUBTRACT TABLE VALUE FROM JULIAN
         ZAP   WRKPKDAY,WRKPKNUM   MOVE RESULT TO PACKED GREG DAYS
         BR    R5                  RETURN TO CALLING ROUTINE
* * * * * * * * * * CONVERT GREGORIAN TO JULIAN ROUTINE * * * * * * * *
*
*                   INPUT IS WRKPKDAY - TWO BYTES, UNSIGNED PACKED DEC
*                            WRKPKMON - TWO BYTES, UNSIGNED PACKED DEC
*                            WRKBYTE1 - ONE BYTE, LEAP YEAR INDICATOR
*                            MONTABEL - TABLE OF MONTH & DAY VALUES
*                   OUTPUT - WRKJULDD - TWO BYTES, UNSIGNED PACKED DEC
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CNVGTJ   EQU   *
         BAL   R4,TABLEPTR         BRANCH TO BUILD POINTER TO TABLE
         CLI   WRKBYTE1,C'Y'       CHECK FOR LEAP YEAR CONDITION
         BE    CNVGTJA              IF SO, USE SECOND TABLE ENTRY
         ZAP   WRKPKNUM,5(2,R9)    MOVE VALUE IN THE TABLE TO WORK AREA
         B     CNVGTJB             REJOIN LOGIC AFTER ADD
CNVGTJA  EQU   *
         ZAP   WRKPKNUM,9(2,R9)    MOVE VALUE IN THE TABLE TO WORK AREA
*
CNVGTJB  EQU   *
         AP    WRKPKNUM,WRKPKDAY   ADD DAYS IN MONTH TO TOTAL DAYS
         ZAP   WRKJULDD,WRKPKNUM   MOVE DAYS TO DATE TO JULIAN DAYS
         BR    R5                  RETURN TO CALLING ROUTINE
* * * * * * * * *  INCREMENT BY MONTHS ROUTINE  * * * * * * * * * * * *
*
*                  INPUT IS WRKINCMM - TWO BYTES, SIGNED PACKED DECIMAL
*                           WRKPKMON - TWO BYTES, UNSIGNED PACKED DEC
*                           WRKPKYR  - THREE BYTES, UNSIGNED PACKED DEC
*                  OUTPUT - WRKPKMON - INCREMENTED
*                           WRKPKYR  - INCREMENTED
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
INCRMM   EQU   *
         ZAP   WRKPKNUM,WRKINCMM   MOVE INCREMENT TO WORK AREA
         AP    WRKPKNUM,WRKPKMON   ADD CURRENT MONTHS TO INCREMENT
INCRMMA  EQU   *
         CP    WRKPKNUM,PACK0      CHECK RESULT TO ZERO
         BNH   INCRMMC              IF NOT GREATER, MUST TREAT NEGATIVE
INCRMMB  EQU   *
         CP    WRKPKNUM,PACK12     CHECK RESULT GREATER THAN 12
         BNH   INCRMMD              IF NOT GREATER, INCREMENT IS OK
         SP    WRKPKNUM,PACK12     REDUCE MONTHS BY ONE YEAR (12)
         AP    WRKPKYR,PACK1       ADD ONE TO NUMBER OF YEARS
         B     INCRMMB             RETURN TO CHECK RESULT
*
INCRMMC  EQU   *
         AP    WRKPKNUM,PACK12     ADD 12 MONTHS (ONE YEAR) TO VALUE
         SP    WRKPKYR,PACK1       SUBTRACT ONE FROM CURRENT YEAR
         B     INCRMMA             RETURN TO CHECK RESULT
*
INCRMMD  EQU   *
         ZAP   WRKPKMON,WRKPKNUM   MOVE CHANGED VALUE BACK TO MONTHS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         BR    R5                  RETURN TO CALLING ROUTINE
* * * * * * * * *  INCREMENT BY DAYS ROUTINE  * * * * * * * * * * * * *
*
*                  INPUT IS WRKINCDD - TWO BYTES, SIGNED PACKED DECIMAL
*                           WRKJULDD - TWO BYTES, UNSIGNED PACKED DEC
*                           WRKPKYR  - THREE BYTES, UNSIGNED PACKED DEC
*                           WRKYRDAY - TWO BYTES, UNSIGNED PACKED DEC
*                  OUTPUT - WRKJULDD - INCREMENTED
*                           WRKPKYR  - INCREMENTED
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
INCRDD   EQU   *
         ZAP   WRKPKNUM,WRKINCDD   MOVE INCREMENT TO WORK AREA
         AP    WRKPKNUM,WRKJULDD   ADD CURRENT JULIAN DAYS TO TOTAL
INCRDDA  EQU   *
         CP    WRKPKNUM,PACK0      CHECK RESULT TO ZERO
         BNH   INCRDDC              IF NOT GREATER, MUST TREAT NEGATIVE
INCRDDB  EQU   *
         CP    WRKPKNUM,WRKYRDAY   CHECK RESULT GREATER THAN YEAR DAYS
         BNH   INCRDDD              IF NOT GREATER, INCREMENT IS OK
         SP    WRKPKNUM,WRKYRDAY   REDUCE TOTAL DAYS BY ONE YEAR'S DAYS
         ZAP   WRKJULDD,WRKPKNUM   SAVE TRIAL JULIAN DAYS
         AP    WRKPKYR,PACK1       ADD ONE TO NUMBER OF YEARS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         ZAP   WRKPKNUM,WRKJULDD   RESTORE TRIAL JULIAN DAYS
         B     INCRDDB             RETURN TO CHECK RESULT
*
INCRDDC  EQU   *
         SP    WRKPKYR,PACK1       SUBTRACT ONE FROM CURRENT YEAR
         ZAP   WRKJULDD,WRKPKNUM   SAVE TRIAL JULIAN DAYS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         ZAP   WRKPKNUM,WRKJULDD   RESTORE TRIAL JULIAN DAYS
         AP    WRKPKNUM,WRKYRDAY   ADD ONE YEAR'S DAYS TO TOTAL DAYS
         B     INCRDDA             RETURN TO CHECK RESULT
*
INCRDDD  EQU   *
         ZAP   WRKJULDD,WRKPKNUM   MOVE TOTAL DAYS BACK TO JULIAN DAYS
         BAL   R4,YEARPROC         BRANCH TO PROCESS CHANGED YEAR
         BR    R5                  RETURN TO CALLING ROUTINE
* * * * * * * * *  CHECK PASSED INCREMENTS ROUTINE  * * * * * * * * * *
*
*                  INPUT IS INCREMON - THREE BYTES, SIGNED ZONED DEC
*                           INCREDAY - THREE BYTES, SIGNED ZONED DEC
*                  OUTPUT - WRKINCMM - TWO BYTES, SIGNED PACKED DECIMAL
*                           WRKINCDD - TWO BYTES, SIGNED PACKED DECIMAL
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CKINCR   EQU   *                   EDIT MONTH AND DAY INCREMENTS
         ZAP   WRKINCDD,PACK0      SET INITIAL VALUES FOR DAY INCREMENT
         ZAP   WRKINCMM,PACK0        AND MONTH INCREMENT
         TRT   INCREMON(3),NUMTABLE CHECK PASSED DATA FOR NUMERICS
         BZ    CKINCRB              IF GOOD, COMMENCE PROCESSING
         BC    4,CKINCRC            IF TRT DID NOT COMPLETE, NOT NUMER
         STC   R2,WRKBYTE1         PLACE RESULT BYTE IN WORK FIELD
         CLI   WRKBYTE1,X'FF'      CHECK VALUE FOR HEX 'FF'
         BE    CKINCRC              IF SO, DATA IS NOT NUMERIC
         B     CKINCRB             VALUE WAS SIGNED NUMERIC
*
CKINCRA  EQU   *
         OI    INCREMON+2,X'C0'    MAKE MONTHS INCREMENT SIGNED
CKINCRB  EQU   *
         PACK  WRKINCMM(2),INCREMON(3) PACK MONTHS INCREMENT
*
CKINCRC  EQU   *                   CHECK DAYS INCREMENT VALUE
         TRT   INCREDAY(3),NUMTABLE CHECK PASSED DATA FOR NUMERICS
         BZ    CKINCRE              IF GOOD, COMMENCE PROCESSING
         BC    4,CKINCRF            IF TRT DID NOT COMPLETE, NOT NUMER
         STC   R2,WRKBYTE1         PLACE RESULT BYTE IN WORK FIELD
         CLI   WRKBYTE1,X'FF'      CHECK VALUE FOR HEX 'FF'
         BE    CKINCRF              IF SO, DATA IS NOT NUMERIC
         B     CKINCRE             VALUE WAS SIGNED NUMERIC
*
CKINCRD  EQU   *
         OI    INCREDAY+2,X'C0'    MAKE MONTHS INCREMENT SIGNED
CKINCRE  EQU   *
         PACK  WRKINCDD(2),INCREDAY(3) PACK DAYS INCREMENT
*
CKINCRF  EQU   *                   ROUTINE EXIT
         BR    R4                  RETURN TO CALLING ROUTINE
* * * * * * * * *  LEAP YEAR PROCESSING SUBROUTINE  * * * * * * * * * *
*
*                      INPUT IS WRKPKYR  - THREE BYTES, PACKED DECIMAL
*                      OUTPUT   WRKBYTE1 - ONE BYTE, 'Y' = LEAP YEAR
*                               WRKLEAPS - TWO BYTES, PACKED, YEAR/4
*                               WRK100S  - TWO BYTES, PACKED, YEAR/100
*                               WRK400S  - TWO BYTES, PACKED, YEAR/400
*                                          (REMAINDERS DISCARDED)
*                               WRKYRDAY - TWO BYTES, PACKED, YEAR DAYS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
YEARPROC EQU   *                   PROCESS YEAR ROUTINE
         MVI   WRKBYTE1,C'N'       INITIALIZE AS NOT A LEAP YEAR
         ZAP   WRKPKNUM(8),WRKPKYR(3) MOVE THE PASSED YEAR TO WORK AREA
         DP    WRKPKNUM(8),PACK4(1) DIVIDE BY YEAR BY FOUR
         ZAP   WRKLEAPS,WRKPKNUM(7) SAVE QUOTIENT FOR CALCULATIONS
         CP    WRKPKNUM+7(1),PACK0(1) CHECK REMAINDER EQUAL TO ZEROS
         BNE   YEAR100T             IF NOT, THIS IS NOT A LEAP YEAR
         MVI   WRKBYTE1,C'Y'       INDICATE THIS IS A LEAP YEAR
*
YEAR100T EQU   *
         ZAP   WRKPKNUM(8),WRKPKYR(3) RESTORE THE PASSED YEAR
         DP    WRKPKNUM(8),PACK100(2) DIVIDE BY YEAR BY 100
         ZAP   WRK100S,WRKPKNUM(6) SAVE QUOTIENT FOR CALCULATIONS
         CP    WRKPKNUM+6(2),PACK0(1) CHECK REMAINDER EQUAL TO ZEROS
         BNE   YEAR400T             IF SO, THIS MAY NOT BE A LEAP YEAR
         MVI   WRKBYTE1,C'N'       INDICATE THIS IS NOT A LEAP YEAR
*
YEAR400T EQU   *
         ZAP   WRKPKNUM(8),WRKPKYR(3) RESTORE THE PASSED YEAR
         DP    WRKPKNUM(8),PACK400(2) DIVIDE BY YEAR BY 400
         ZAP   WRK400S,WRKPKNUM(6) SAVE QUOTIENT FOR CALCULATIONS
         CP    WRKPKNUM+6(2),PACK0(1) CHECK REMAINDER EQUAL TO ZEROS
         BNE   YEAREXIT             IF SO, THIS IS A LEAP YEAR
         MVI   WRKBYTE1,C'Y'       INDICATE THIS IS A LEAP YEAR
*
YEAREXIT EQU   *
         ZAP   WRKYRDAY,PACK366(2) SET DAYS THIS YEAR TO 366
         CLI   WRKBYTE1,C'Y'       CHECK THIS YEAR AS LEAP YEAR
         BER   R4                   IF SO, EXIT TO CALLING ROUTINE
         ZAP   WRKYRDAY,PACK365(2) ELSE SET DAYS THIS YEAR TO 365
         BR    R4                  RETURN TO CALLING ROUTINE
* * * * * * * * *  BUILD TABLE POINTER SUBROUTINE * * * * * * * * * * *
*
*                      INPUT IS WRKPKMON - TWO BYTES - PACKED DECIMAL
*                      OUTPUT   REG 8    - DISPLACEMENT INTO TABLE
*                               REG 9    - TABLE ENTRY ADDRESS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
TABLEPTR EQU   *                   BUILD ADDRESS OF MONTH ENTRY
         SR    R8,R8               CLEAR WORK REGISTER
         IC    R8,WRKPKMON+1       PICK UP UNITS POSITION OF MONTH
         SRL   R8,4                SHIFT OFF THE SIGN BITS
         CLI   WRKPKMON,X'01'      CHECK TENS POSITION FOR VALUE
         BNE   TABLEPTA             IF NONE, BYPASS ADDING TEN
         LA    R8,10(R8)           ADD TEN TO UNITS VALUE IN REG 8
TABLEPTA EQU   *
         BCTR  R8,0                REDUCE VALUE BY ONE FOR INDEXING
         MH    R8,HALF11           BUILD DISPLACEMENT INTO THE TABLE
         LA    R9,MONTABLE(R8)     POINT TO MONTH'S ENTRY IN TABLE
         BR    R4                  RETURN TO CALLING ROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                     E R R O R   M E S S A G E S                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
ERROR1   EQU   *                   PROCESS CANNOT BE DETERMINED
         MVI   ERRORCDE+1,C'1'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG1 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR2   EQU   *                   GREGORIAN DATE NOT NUMERIC
         MVI   ERRORCDE+1,C'2'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG2 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR3   EQU   *                   JULIAN DATE NOT NUMERIC
         MVI   ERRORCDE+1,C'3'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG3 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR4   EQU   *                   GREGORIAN MONTH LESS THAN 01
         MVI   ERRORCDE+1,C'4'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG4 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR5   EQU   *                   GREGORIAN MONTH GREATER THAN 12
         MVI   ERRORCDE+1,C'5'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG5 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR6   EQU   *                   GREGORIAN DAYS LESS THAN 01
         MVI   ERRORCDE+1,C'6'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG6 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR7   EQU   *                   GREGORIAN DAYS MORE MONTH'S MAX
         MVI   ERRORCDE+1,C'7'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG7 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR8   EQU   *                   JULIAN DAYS LESS THAN 01
         MVI   ERRORCDE+1,C'8'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG8 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
*
ERROR9   EQU   *                   JULIAN DAYS MORE THAN MAX FOR YEAR
         MVI   ERRORCDE+1,C'9'     MOVE ERROR CODE NUMBER
         MVC   ERRORMSG(31),ERRMSG9 MOVE ERROR TEXT TO PASS AREA
         B     RETURN              EXIT FROM SUBPROGRAM
NUMTABLE DS    0CL256        TRANSLATE AND TEST TABLE FOR NUMERICS
         DC    256X'FF'            SET DEFAULT VALUES IN TABLE
         ORG   NUMTABLE+X'C0'      POINT TO POSITIVE NUMBER POSITIONS
         DC    X'C0',C'ABCDEFGHI'  PLACE POSITIVE VALUES IN THE TABLE
         ORG   NUMTABLE+X'D0'      POINT TO NEGATIVE NUMBER POSITIONS
         DC    X'D0',C'JKLMNOPQR'  PLACE NEGATIVE VALUES IN THE TABLE
         ORG   NUMTABLE+X'F0'      POINT TO NUMBER POSITIONS
         DC    10X'00'             MAKE NUMBER VALUES VALID IN TABLE
         ORG
*
DAYTABLE DS    0CL63         DAY OF THE WEEK TABLE
         DC    C'SUNDAY   '
         DC    C'MONDAY   '
         DC    C'TUESDAY  '
         DC    C'WEDNESDAY'
         DC    C'THURSDAY '
         DC    C'FRIDAY   '
         DC    C'SATURDAY '
*
MONTABLE DS    0CL143        MONTH AND DAYS IN MONTH TABLE  13X11
         DC    C'JAN',P'031',P'000',P'031',P'000'
         DC    C'FEB',P'028',P'031',P'029',P'031'
         DC    C'MAR',P'031',P'059',P'031',P'060'
         DC    C'APR',P'030',P'090',P'030',P'091'
         DC    C'MAY',P'031',P'120',P'031',P'121'
         DC    C'JUN',P'030',P'151',P'030',P'152'
         DC    C'JUL',P'031',P'181',P'031',P'182'
         DC    C'AUG',P'031',P'212',P'031',P'213'
         DC    C'SEP',P'030',P'243',P'030',P'244'
         DC    C'OCT',P'031',P'273',P'031',P'274'
         DC    C'NOV',P'030',P'304',P'030',P'305'
         DC    C'DEC',P'031',P'334',P'031',P'335'
         DC    C'   ',P'000',P'365',P'000',P'366'
*
PACK31   EQU   MONTABLE+3
PACK365  EQU   MONTABLE+137
PACK366  EQU   MONTABLE+141
*
*
*                     * * * C O N S T A N T S * * *
*
HALF09   DC    H'09'                   CONSTANT - HALFWORD VALUE 09
HALF11   DC    H'11'                   CONSTANT - HALFWORD VALUE 11
ZEROS    DC    C'00000000'             8 BYTES OF ZEROS
SPACES   DC    C'                '     16 BYTES OF SPACES
CENTURY  DC    C'19'                   DEFAULT TO NINETEENTH CENTURY
CHAR12   DC    C'12'                   CHARACTER VALUE OF TWELVE
PACK0    DC    P'0'                    PACKED VALUE OF ZERO
PACK1    DC    P'1'                    PACKED VALUE OF ONE
PACK4    DC    P'4'                    PACKED VALUE OF FOUR
PACK5    DC    P'5'                    PACKED VALUE OF FIVE
PACK7    DC    P'7'                    PACKED VALUE OF SEVEN
PACK12   DC    P'12'                   PACKED VALUE OF TWELVE
PACK100  DC    P'100'                  PACKED VALUE OF 100
PACK400  DC    P'400'                  PACKED VALUE OF 400
*
ERRMSG1  DC    CL31'PROCESS CANNOT BE DETERMINED   '
ERRMSG2  DC    CL31'GREGORIAN DATE IS NOT NUMERIC  '
ERRMSG3  DC    CL31'JULIAN DATE IS NOT NUMERIC     '
ERRMSG4  DC    CL31'GREGORIAN MONTH IS LESS THAN 01'
ERRMSG5  DC    CL31'GREGORIAN MONTH IS MORE THAN 12'
ERRMSG6  DC    CL31'GREGORIAN DAYS IS LESS THAN 01 '
ERRMSG7  DC    CL31'DAYS EXCEED THE MAX FOR MONTH  '
ERRMSG8  DC    CL31'JULIAN DAYS IS LESS THAN 001   '
ERRMSG9  DC    CL31'JULIAN DAYS MORE THAN FOR YEAR '
ARGLIST  DSECT
GREG6    DS    CL6                MMDDYY
GREG8    DS    0CL8               MMDDCCYY
GREGMM   DS    CL2                  MM
GREGDD   DS    CL2                  DD
GREGCCYY DS    0CL4                 CCYY
GREGCC   DS    CL2                    CC - CENTURY
GREGYY   DS    CL2                    YY
JULIAN   DS    0CL7               CCYYDDD
JULCCYY  DS    CL4                  CCYY
JULDDD   DS    CL3                  DDD
INCREMON DS    CL3                SIGNED MONTHS INCREMENT
INCREDAY DS    CL3                SIGNED DAYS INCREMENT
EDITGREG DS    0CL8               GREGORIAN EDITED XX/XX/XX
EDMM     DS    CL2                  MM
EDSLASH1 DS    CL1                   /
EDDD1    DS    CL2                  DD
EDSLASH2 DS    CL1                   /
EDYY     DS    CL2                  YY
EDITMMYY DS    0CL9               MONTH YEAR EDITED XXX  YYYY
EDMMM1   DS    CL3                  MMM - MONTH ABBREVIATION
EDSPACE1 DS    CL2
EDYYYY1  DS    CL4                  YYYY
EDITMDY  DS    0CL12              MONTH DAY & YEAR EDITED
*                                       MMM DD, YYYY
EDMMM2   DS    CL3                  MMM - MONTH ABBREVIATION
EDSPACE2 DS    CL1
EDDD2    DS    CL2                  DD
EDCOMMA  DS    CL1                   ,
EDSPACE3 DS    CL1
EDYYYY2  DS    CL4                  YYYY
DAYWEEK  DS    CL9                DAY OF THE WEEK
ERRORCDE DS    CL2                ERROR CODE
ERRORMSG DS    0CL31              ERROR MESSAGE AND WORK AREA
WRKBYTE1 DS    CL1                USED TO INDICATE LEAP YEAR CONDITION
         DS    CL1                 - NOT USED -
WRKPKYR  DS    PL3                YEAR TO BE CHECKED BY LEAP YEAR RTN
WRKPKNUM DS    PL8                GENERAL USE PACKED DECIMAL FIELD
WRKPKMON DS    PL2                PACKED GREG MONTHS
WRKPKDAY DS    PL2                PACKED GREG DAYS
WRKLEAPS DS    PL2                PACKED - YEAR / 4   - TRUNCATED
WRK100S  DS    PL2                PACKED - YEAR / 100 - TRUNCATED
WRK400S  DS    PL2                PACKED - YEAR / 400 - TRUNCATED
WRKINCDD DS    PL2                PACKED INCREMENT BY DAYS
WRKINCMM DS    PL2                PACKED INCREMENT BY MONTHS
WRKJULDD DS    PL2                PACKED JULIAN DAYS (PASSED/COMPUTED)
WRKYRDAY DS    PL2                PACKED YEAR DAYS TO INCREMENT
         END
