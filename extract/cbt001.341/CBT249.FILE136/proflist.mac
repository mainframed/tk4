*          DATA SET CBT1421    AT LEVEL 002 AS OF 01/24/84
***********************************************************************
*
*                        PROFLIST
*
*
*  PROFLIST IS A COMMAND PROCESSOR TO LIST PSCB SETTINGS
*   IT ALLOWS AN AUTHORIZED USER (ACCT AUTH) TO DO A PROFILE LIST
*   OF ANOTHER TSO ID IN 'SYS1.UADS'
*       -COMMAND PROCESSOR
*       -RE-ENTRANT
*       -PARSE PROCESSING OF INPUT PARAMETERS
*       -PUTLINE PROCESSING OF TERMINAL OUTPUT
*
*
*  MAINTENANCE:
*  01/24/84: UPDATED FOR X-A. THE UPT CONTROL BLOCK ENDS AT 0000FFFF.
*            THE STORAGE FOLLOWING IT (00010000) IS FETCH PROTECTED,
*            SO THAT ADJACENT STORAGE CAN NOT BE TOUCHED. A LA WAS
*            CONVERTED TO IC TO RETRIEVE THE USERID LENGTH (UPT+X'17')
***********************************************************************
***********************************************************************
****  ALLOCATE:  ALLOC FI(SYSUADS) DA('SYS1.UADS')....OR ANY UADS DS
****  SYNTAX  :  PROFLIST  USER-ID
****                 WHERE USER-ID IS THE ID YOU WISH TO SEE THE
****                 PSCB SETTINGS OF (PROFILE LIST INFO) IN 'UADS'
****  NOTE 1  :  THE EXECUTING ID MUST HAVE ACCT AUTHORITY
****  NOTE 2  :  A SHR ENQ OF  SYSIKJUA/OPENUADS  IS ISSUED
****  NOTE 3  :  THIS INFO IS RETRIEVED FROM THE PSCB 'IN UADS' **NOT**
****                 IN THE USER'S ADDRESS SPACE.  IF THE USER-ID
****                 HAS ISSUED A PROFILE COMMAND TO CHANGE THEIR PSCB
****                 SETTINGS, UADS WILL BE UPDATED WHEN THEY LOGOFF.
****  NOTE 4  :   CODE IS INCLUDED (CURRENTLY COMMENTED OUT) TO BYPASS
****                 PASSWORD CHECKING.
***********************************************************************
***********************************************************************
PROFLIST CSECT
R0       EQU   0                  WORK REGS
R1       EQU   1                  WORK REGS
R2       EQU   2                  WORK REGS
R3       EQU   3                  PUTLINE PROCESSING
R4       EQU   4                  PROCESSING OF UPT DATA
R5       EQU   5                  PROCESSING OF UPT DATA
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11                 BASE REG
R12      EQU   12                 2ND BASE REG IF REQUIRED
R13      EQU   13                 GETMAIN
R14      EQU   14                 BRANCH REGS
R15      EQU   15
***********************************************************************
* INITIALIZATION SECTION
***********************************************************************
         USING *,R15
         BC    15,PROLOG
         DC    CL8'PROFLIST'      MODULE NAME
         DC    CL8'&SYSDATE'      DATE MODULE COMPILED
         DC    CL8'&SYSTIME'      TIME MODULE COMPILED
         DROP  15
PROLOG   EQU   *
         STM   R14,R12,12(R13)    SAVE REGS
         LR    R11,R15            LOAD REGS
         USING PROFLIST,R11
         GETMAIN R,LV=LDYNAMIC    LEN OF DYNAMIC AREA
         LR    R10,R1
         ST    R13,4(R10)         SAVE HSA IN LSA
         ST    R10,8(R13)         SAVE LSA IN HSA
         L     R1,24(R13)         RESTORE REG ONE
         LR    R13,R10            SET UP NEW SAVE AREA
         USING DYNMAREA,R13
         MVI   MSGWORK,X'40'      CLEAR MSG BUFFER
         MVC   MSGWORK+1(120),MSGWORK
         EJECT
***********************************************************************
*  GET CMD BUFFER AND SET UP PARSE PARMATER LIST
***********************************************************************
         ST    R1,CPPLADDR        SAVE ADDR OF CPPL
         USING CPPL,R1
         LA    R2,PARSLIST        ADDR OF PARSE PLIST
         USING PPL,R2
         MVC   PPLUPT,CPPLUPT     MOVE ADDR INTO PARSE PARM LIST
         MVC   PPLECT,CPPLECT     MOVE ADDR INTO PARSE PARM LIST
         MVC   PPLCBUF,CPPLCBUF   MOVE ADDR INTO PARSE PARM LIST
         MVC   PSCBADDR,CPPLPSCB  SAVE PSCB ADDR
         XC    PECB,PECB          CLEAR ECB TO ZEROS
         LA    R0,PECB            ADDR OF PARSE ECB
         ST    R0,PPLECB          STORE INTO PPL
         L     R0,=A(PCLIST)      ADDR OF PCL
         ST    R0,PPLPCL          ADDR OF PCL
         LA    R0,ANSWER          PPL REPLY
         ST    R0,PPLANS          STORE INTO PPL
         XC    PPLUWA,PPLUWA      CLEAR TO ZEROS
         LA    R1,PPL             CPPL DSECT NO LONGER NEEDED
         CALLTSSR EP=IKJPARS,MF=(E,(1))     CALL PARSE
         CLC   ANSWER,=X'FF000000' IF NOT EQUAL
         BC    7,CHECKPDE         NE - PARSE WAS SUCCESSFUL
         MVC   MSGOUT,MSG01       MOVE MSG TO BUFFER
         BAL   R14,PUTLINE        WRITE MSG.
         BC    15,RETURN          TERMINATE CP
         EJECT
***********************************************************************
*  CHECK THE PDE'S FOR RETURN SWITCHES
***********************************************************************
CHECKPDE L     R3,ANSWER          ADDR OF PDL BUILT BY PARSE
         DROP  R2                 PPL NO LONGER NEEDED
         USING PDLDSECT,R3
         TM    PCE+6,X'80'        WAS THE PARM ENTERED?
         BC    3,MOVEID           IT IS THERE MOVE IT IN
         MVC   MSGOUT,MSG09       NO ID ENTERED
         BAL   R14,PUTLINE        SEND OUT MESSAGE
         BC    15,RETURN          EOJ
MOVEID   LH    R2,PCE+4           LENGTH OF UID
         L     R4,PCE             ADDR OF UID
         EX    R2,MOVEUID         MOVE ID INTO USERID
         MVC   USERID+7(1),=X'F0' ADD A ZERO FOR UADS MEMBER
         BC    15,CKACCT          CONTINUE PROCESSING
MOVEUID  MVC   USERID(0),0(R4)    MOVE IN USERID
******############################################################
*    ADD CODE HERE TO CHECK THE PDE TO SEE WHAT PARMS WERE ENTERED
******############################################################
CKACCT   EQU   *
         L     R2,PSCBADDR         LOAD THE ADDR OF PSCB
         TM    16(R2),X'40'        IS CALL ACCOUNT AUTHORIZED?
         BC    1,ACCTUSER          YES, CONTINUE
         MVC   MSGOUT,MSG02        NO, TELL THE USER
         BAL   R14,PUTLINE         SEND OUT MESSAGE
         BC    15,RETURN           EOJ
***********************************************************************
*  ADD CODE TO PROCESS UADS
***********************************************************************
ACCTUSER L     R2,16              GET CVT POINTER
         L     R2,0(R2)           OLD-NEW POINTER
         L     R2,4(R2)           OUR TCB POINTER
         ST    R2,TCBHOLD         HOLD ADDR OF TCB
         USING TCB,R2
         L     R3,180(R2)         JSCB POINTER
         ST    R3,HOLDJSCB        HOLD JSCB ADDR
***********************************************************************
*  THE FOLLOWING CODE DISABLES THE PROMPTING OF UADS PASSWORD
***********************************************************************
*        SR    R1,R1              INITIALIZE IT
*        SVC   254
*        MODESET MODE=SUP
*        MODESET EXTKEY=ZERO
*        USING IEZJSCB,R3
*        OI    JSCBSWT1,JSCBPASS  NO PASSWORD CHECKING
*        MODESET EXTKEY=TCB,WORKREG=3
*        LA    R1,4
*        SVC   254
*        DROP  R2
         DROP  R3
         EJECT
***********************************************************************
* DEQ FIRST IN CASE AN ATTENTION WAS EXECUTED BUT DEQ NOT COMPLETED.
* ENQ SHR FOR READ
***********************************************************************
         MVC   DEQRENT,LISTDEQ    REINITIALIZE LIST FORM OF DEQ
         LA    R1,DEQRENT         LIST FORM OF DEQ
         DEQ   (QNAME,RNAME,8,SYSTEM),RET=HAVE,MF=(E,(1)) DEQ UADS
         MVC   ENQRENT,LISTENQ    REINITIALIZE LIST FORM OF ENQ
         LA    R1,ENQRENT         LIST FORM OF ENQ SHR
         ENQ   (QNAME,RNAME,S,8,SYSTEM),MF=(E,(1))   UADS SHR
***********************************************************************
*    OPEN UADS - RETRIEVE USERID - REISSUE JSCBSWT1 (NI)
***********************************************************************
MOVEDCB  MVC   UADSDCB,UADSDCBA   MOVE DCB TO GETMAIN AREA
         MVC   OPENCLOS,LISTOPEN  MOVE LIST FORM OPEN-CLOSE TO GETMAIN
         LA    R1,OPENCLOS        LOAD ADDR OF OPEN LIST FORM
         OPEN  (UADSDCB,(INPUT)),MF=(E,(1)) OPEN UADS FOR READ
         TM    UADSDCB+48,X'10'   TEST IF SUCCESSFUL
         BC    1,FINDID           YES GO FIND ID
         MVC   MSGOUT,MSG03       MSG UNSUCCESSFUL OPEN
         BAL   R14,PUTLINE        PRINT IT OUT
         BC    15,RETURN          EOJ
FINDID   EQU   *
         FIND  UADSDCB,USERID,D   FIND ID IN UADS
         B     *+4(R15)           BRANCH TABLE R15 RC
         B     GETID              R15=00
         B     ERR01              R15=04
         B     CHECK1             R15=08
ERR01    BAL   R14,DEQCLOSE       DEQUEUE AND CLOSE UADS
         MVC   MSGOUT,MSG04       ID NOT DEFINED IN SYSTEM
         BAL   R14,PUTLINE        PRINT OUT MSG
         BC    15,RETURN          EOJ
CHECK1   B     *+4(R0)            BRANCH TABLE R0 RC
         B     CHECK2             R0=00 I-O ERROR SEND OUT ERROR
         B     CHECK3             R0=04 INSUFFICIENT STORAGE
CHECK2   BAL   R14,DEQCLOSE       DEQUE AND CLOSE UADS
         MVC   MSGOUT,MSG07       UADS I-O ERROR
         BAL   R14,PUTLINE        PRINT MSG
         BC    15,RETURN          EOJ
CHECK3   BAL   R14,DEQCLOSE       DEQUEUE AND CLOSE UADS
         MVC   MSGOUT,MSG06       INSUFFICIENT STORAGE
         BAL   R14,PUTLINE        PRINT MSG
         BC    15,RETURN          EOJ
GETID    GETBUF UADSDCB,R1        GET BUFFER ADDR FOR UADS MEMBER
         LR    R4,R1              SAVE ADDR OF BUFFER
         LA    R1,UADSREAD        LOAD ADDR OF LIST FORM OF READ MACRO
         READ  UADDECBR,SF,UADSDCB,(R4),,,,MF=E
         CHECK UADDECBR           CHECK IF COMPLETE
CLOSE    BAL   R14,DEQCLOSE       DEQ AND CLOSE UADS
         EJECT
**********************************************************************
*  LOOK INTO UADS FOR UPT DATA AREA
**********************************************************************
         L     R5,20(R4)          GET ADDR OF UPT OFFSET BLK
UPTBLK   AR    R5,R4              ADD TO BEGINNING OF BUFFER
         ST    R5,UPTOFBK         STORE ADDR OF UPT OFFSET BLK
         CLC   4(7,R4),USERID     COMPARE ID IN BEG. OF BUFFER + PARM
         BC    8,UPTBLKOK         CORRECT UPT PROCEED
         MVC   MSGOUT,MSG08       INCORRECT UPT DATA
         BAL   R14,PUTLINE        PRINT MSG
         BC    15,RETURN          EOJ
UPTBLKOK LA    R5,12(R5)               GET ADDR OF ENVIRON BITS
CKCHAR   CLI   1(R5),X'FF'             ANY CHAR DEL CHARS?
         BC    7,GETCHAR               MOVE IN THE CHAR DEL
         MVC   MSGOUT(6),=C'NOCHAR'    MOVE TO OUTPUT AREA
         B     CKLINE                  CONTINUE CHECKING
GETCHAR  MVC   MSGOUT(5),=C'CHAR('     MOVE TO OUTPUT AREA
         CLI   1(R5),X'16'             IS IT BACKSPACE?
         BC    8,BSCHAR                YES
         CLI   1(R5),X'00'             IS IT NULL?
         BC    8,NULCHAR               YES
         MVC   MSGOUT+5(1),1(R5)       MOVE CHAR TO OUTPUT AREA
         MVI   MSGOUT+6,C')'           MOVE TO OUTPUT AREA
         BC    15,CKLINE               CONTINUE CHECKING
BSCHAR   MVC   MSGOUT+5(2),=C'BS'      MOVE IN BS
         MVI   MSGOUT+7,C')'           MOVE TO OUTPUT AREA
         BC    15,CKLINE               CONTINUE CHECKING
NULCHAR  MVC   MSGOUT+5(3),=C'NUL'     NOVE IN NUL
         MVI   MSGOUT+8,C')'
CKLINE   TM    0(R5),X'04'             ATTN?
         BC    8,CKLINE2               NO
         MVC   MSGOUT+10(5),=C'LINE('  MOVE TO OUTPUT AREA
         MVC   MSGOUT+15(4),=C'ATTN'   ATTN CHAR
         MVI   MSGOUT+19,C')'          MOVE TO OUTPUT AREA
         BC    15,CKPROMPT             CONTINUE CHECKING
CKLINE2  CLI   2(R5),X'FF'             ANY LINE DEL CHARS?
         BC    7,CKLINE3               MOVE IN THE LINE DEL
         MVC   MSGOUT+10(6),=C'NOLINE' MOVE TO OUTPUT AREA
         B     CKPROMPT                CONTINUE CHECKING
CKLINE3  MVC   MSGOUT+10(5),=C'LINE('  MOVE TO OUTPUT AREA
         CLI   2(R5),X'18'             CTLX CHAR?
         BC    8,CTLXLINE              YES, MOVE IT OUT
         CLI   2(R5),X'00'             NULL?
         BC    8,NULLLINE              YES, MOVE IT OUT
GETLINE  MVC   MSGOUT+15(1),2(R5)      MOVE CHAR TO OUTPUT AREA
         MVI   MSGOUT+16,C')'          MOVE TO OUTPUT AREA
         BC    15,CKPROMPT             CONTINUE CHECKING
CTLXLINE MVC   MSGOUT+15(4),=C'CTLX'   MOVE CTLX CHAR OUT
         MVI   MSGOUT+19,C')'          MOVE TO OUTPUT AREA
         BC    15,CKPROMPT             CONTINUE CHECKING
NULLLINE MVC   MSGOUT+15(3),=C'NUL'    MOVE NUL CHAR OUT
         MVI   MSGOUT+18,C')'          MOVE TO OUTPUT AREA
CKPROMPT TM    0(R5),X'40'             NO PROMPTING?
         BC    1,NOPROMPT              CORRECT
         MVC   MSGOUT+21(6),=C'PROMPT' MOVE TO OUTPUT AREA
         B     CKINTER                 CONTINUE CHECKING
NOPROMPT MVC   MSGOUT+21(8),=C'NOPROMPT'    MOVE TO OUTPUT AREA
CKINTER  TM    0(R5),X'10'             NO INTERCOM?
         BC    1,NOINTER               CORRECT
         MVC   MSGOUT+30(8),=C'INTERCOM'    MOVE TO OUTPUT AREA
         B     CKPAUSE                 CONTINUE CHECKING
NOINTER  MVC   MSGOUT+30(10),=C'NOINTERCOM' MOVE TO OUTPUT AREA
CKPAUSE  TM    0(R5),X'08'             PAUSE?
         BC    1,PAUSE                 CORRECT
         MVC   MSGOUT+41(7),=C'NOPAUSE'     MOVE TO OUTPUT AREA
         B     CKMSGID                 CONTINUE CHECKING
PAUSE    MVC   MSGOUT+41(5),=C'PAUSE'  MOVE TO OUTPUT AREA
CKMSGID  TM    0(R5),X'20'             MSG ID REQUESTED?
         BC    1,MSGID                 YES
         MVC   MSGOUT+49(7),=C'NOMSGID'     MOVE TO OUTPUT AREA
         B     CKMODE                  CONTINUE CHECKING
MSGID    MVC   MSGOUT+49(5),=C'MSGID'  MOVE TO OUTPUT AREA
CKMODE   TM    0(R5),X'02'             MODE REQUESTED?
         BC    1,MODE             YES
         MVC   MSGOUT+57(6),=C'NOMODE' MOVE TO OUTPUT AREA
         B     CKWTPMSG           CONTINUE PROCESSING
MODE     MVC   MSGOUT+57(4),=C'MODE'   MOVE TO OUTPUT AREA
CKWTPMSG TM    0(R5),X'01'        WTP REQUESTED?
         BC    1,WTPMSG           YES
         MVC   MSGOUT+64(8),=C'NOWTPMSG'    MOVE TO OUTPUT AREA
         B     PRINTLN1           GO PRINT OUT FIRST LINE
WTPMSG   MVC   MSGOUT+64(6),=C'WTPMSG' MOVE TO OUTPUT AREA
PRINTLN1 BAL   R14,PUTLINE        PRINT OUT LINE 1
CKRECOV  TM    0(R5),X'80'        EDIT RECOVER REQUESTED?
         BC    1,RECOVER          YES
         MVC   MSGOUT(9),=C'NORECOVER' MOVE TO OUTPUT AREA
         B     CKPREFIX           CONTINUE CHECKING
RECOVER  MVC   MSGOUT(7),=C'RECOVER'   MOVE TO OUTPUT AREA
CKPREFIX TM    11(R5),X'FF'       TEST IF 00 (NO PREFIX)
         BC    0,NOPREFIX         NO PREFIX
         MVC   MSGOUT+10(7),=C'PREFIX(' MOVE TO OUTPUT AREA
         SR    R1,R1              PREPARE REG         X-A CHG LMB-CBT
         IC    R1,11(R5)          LEN OF PREFIX-UID   X-A CHG LMB-CBT
         BCTR  R1,0               SUBTRACT 1 FROM LENGTH FOR MOVE
         EX    R1,MOVEIT          MOVE IN USERID
         B     CONTMOVE           FINISH MOVE
MOVEIT   MVC   MSGOUT+17(0),4(R5) MOVE IN PREFIX-ID
CONTMOVE EQU   *
         MVI   MSGOUT+25,C')'     MOVE TO OUTPUT AREA
         B     PRINTLN2           GO PRINT LINE 2
NOPREFIX MVC   MSGOUT+10(8),=C'NOPREFIX'     MOVE TO OUTPUT AREA
PRINTLN2 BAL   R14,PUTLINE        PRINT OUT LINE 2
*****************************************************************
* THE FOLLOWING CODE SHOULD BE ACTIVATED IF PASSWORD CODE IS
* BEING BYPASSED ABOVE.
*****************************************************************
*      RESET THE JSCB
*****************************************************************
*        L     R3,TCBHOLD         LOAD THE ADDR OF TCB
*        USING TCB,R3
*        L     R2,HOLDJSCB        RESTORE JSCB POINTER
*        SR    R1,R1              INITIALIZE IT
*        SVC   254
*        MODESET MODE=SUP
*        MODESET EXTKEY=ZERO
*        USING IEZJSCB,R2
*        NI    JSCBSWT1,X'FF'-JSCBPASS NO PASSWORD CHECKING
*        MODESET EXTKEY=TCB,WORKREG=3
*        LA    R1,4
*        SVC   254
*        DROP  R2
*        DROP  R3
         BC    15,RETURN          EOJ
***********************************************************************
*  ALL MSGS WRITTEN TO THE TERMINAL IS DONE HERE VIA PUTLINE
***********************************************************************
PUTLINE  MVC   MSGCNTL,PUTCNTL    MOVE IN PUTLINE CONTROL CHARS
         STM   R0,R15,SAVEREGS    SAVE CALLER'S REGS
         LA    R3,MSGWORK         ADDR OF MSG BUFFER
         L     R2,CPPLADDR        ADDR OF CPPL
         USING CPPL,R2
         LA    R1,PUTLPARM        ADDR OF PLIST
         USING IOPL,R1
         MVC   IOPLECT,CPPLECT    MOVE ADDR OF ECT TO PLIST
         MVC   IOPLUPT,CPPLUPT    MOVE ADDR OF UPT TO PLIST
         LA    R0,ECB             ADDR OF ECB
         ST    R0,IOPLECB         STORE INTO PLIST
         XC    ECB,ECB            CLEAR ECB TO ZEROS
         XC    PTPB(16),PTPB      CLEAR PLIST TO ZEROS
         PUTLINE PARM=PTPB,ECB=ECB,                                    X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               OUTPUT=((R3),TERM,SINGLE,DATA),                         X
               MF=(E,(1))
         MVI   MSGWORK,X'40'      CLEAR BUFFER TO SPACES
         MVC   MSGWORK+1(120),MSGWORK
         LM    R0,R15,SAVEREGS    RESTORE CALLER'S REGS
         BR    R14                RETURN TO CALLER
         EJECT
***********************************************************************
*  CLEAN UP AND RETURN TO THE TMP
***********************************************************************
DEQCLOSE ST    R14,RETREG         SAVE RETURN REGISTER
         LA    R1,OPENCLOS        LOAD ADDRESS OF LIST FORM
         CLOSE (UADSDCB),MF=(E,(1))    CLOSE UADS DCB
         MVC   DEQRENT,LISTDEQ    REINITIALIZE LIST FORM OF DEQ
         LA    R1,DEQRENT
         DEQ   (QNAME,RNAME,8,SYSTEM),RET=HAVE,MF=(E,(1)) DEQ UADS
         L     R14,RETREG         RESTORE REG 14
         BR    R14
SYNADA   MVC   MSGOUT,MSG10       SYNAD ERROR
         BAL   R14,PUTLINE        PRINT OUT MSG
         BC    15,RETURN          EOJ
RETURN   EQU   *
         CLC   ANSWER,=X'FF000000' IF EQUAL
         BE    RETURN02           BYPASS FREEMAIN-PARSE HADN'T WORKED
         IKJRLSA                  ANSWER    FREE PARSE AREA
RETURN02 LR    R1,R13             DYNAMIC AREA ADDR
         LA    R0,LDYNAMIC        SIZE OF AREA
         L     R13,4(,R13)        PREV SAVE AREA
         LA    R1,0(,R1)          CLEAR HI ORDER      FREEMAIN
         SVC   10                 FREEMAIN
         LM    R14,R12,12(R13)    RESTORE REGS
         LA    R15,0              RETURN CODE
         MVI   12(R13),X'FF'      INDICATE RETURN
         BR    R14                GO BACK TO TMP
         EJECT
***********************************************************************
* CONSTANTS NOT REQUIRING A GETMAINED AREA
***********************************************************************
MSG01    DC    CL120'UNABLE TO PARSE INPUT BUFFER. CP TERMINATED'
MSG02    DC    CL120'NOT AUTHORIZED TO USE THIS COMMAND'
MSG03    DC    CL120'UNSUCCESSFUL OPEN ON UADS - CONTACT TEC SUPPORT'
MSG04    DC    CL120'ID IS NOT DEFINED WITHIN SYSTEM'
MSG05    DC    CL120'UNSUCCESSFUL ID LOCATE - CONTACT TEC SUPPORT'
MSG06    DC    CL120'INSUFFICIENT VIRTUAL STORAGE- CONTACT TEC SUPPORT'
MSG07    DC    CL120'I-O ERROR IN UADS DIRECTORY - CONTACT TEC SUPPORT'
MSG08    DC    CL120'INCORRECT UPT DATA AREA - CONTACT TEC SUPPORT'
MSG09    DC    CL120'USER-ID NOT ENTERED'
MSG10    DC    CL120'I-O SYNAD ERROR ON UADS - CONTACT TEC SUPPORT'
UADSDCBA DCB   DDNAME=SYSUADS,DSORG=PO,MACRF=(R,W),OPTCD=W,            X
               SYNAD=SYNADA,KEYLEN=0,BUFNO=1
LISTOPEN OPEN  (0),MF=L           LIST FORM FOR OPEN + CLOSE
LISTENQ  ENQ   (QNAME,RNAME,S,8,SYSTEM),MF=L     LIST FORM OF ENQ
LLISTENQ EQU   *-LISTENQ
LISTDEQ  DEQ  (QNAME,RNAME,8,SYSTEM),RET=HAVE,MF=L    LIST FORM OF DEQ
LLISTDEQ EQU   *-LISTDEQ
QNAME    DC    CL8'SYSIKJUA'      ----SHOULD BE SYSIKJUA
RNAME    DC    CL8'OPENUADS'      ----SHOULD BE OPENUADS
PUTCNTL  DC    H'121'             PUTLINE CONTROL CHARACTERS
         EJECT
***********************************************************************
*  PARSE DEFINITIONS
***********************************************************************
*        PRINT NOGEN
PCLIST   IKJPARM DSECT=PDLDSECT
PCE      IKJIDENT  'TSO-ID',MAXLNTH=7,FIRST=ALPHA,OTHER=ALPHANUM,      X
               PROMPT='TSO USER-ID'
         IKJENDP
         EJECT
***********************************************************************
* WORKAREA FOR GETMAIN'D AREA FOR LITERALS BEING CHANGED
***********************************************************************
DYNMAREA DSECT
SAVEAREA DS    18F                SAVE AREA
SAVEREGS DS    16F
CPPLADDR DS    F                  CPPL ADDR FOR DSECT
*****THE FOLLOWING ARE FOR PARSE:
PARSLIST DS    7A                 FOR PPL DSECT
PECB     DS    F                  ECB FOR PPL
ANSWER   DS    F                  REPLY FROM PARSE IN PPL
*****THE FOLLOWING ARE FOR PUTLINE:
MSGWORK  DS    0CL121             FOR PUTLINE
MSGCNTL  DS    F                  PUTLINE CONTROL CHARS
MSGOUT   DS    CL120              OUTPUT DATA
PUTLPARM DS    10A
ECB      DS    F
PTPB     DS    4F
*****THE FOLLOWING ARE ADDITIONAL LITERALS REQUIRING GETMAIN AREA:
OPENCLOS DS    CL4                RE-ENT COPY OF DCB
         DS    0D
UADSDCB  DS    CL96               RE-ENT COPY OF DCB
UADSREAD READ  UADDECBR,SF,UADSDCB,,,S,,MF=L     LIST FORM OF READ
ENQRENT  DS    CL(LLISTENQ)       RE-ENT COPY OF ENQ
DEQRENT  DS    CL(LLISTDEQ)       RE-ENT COPY OF DEQ
USERID   DS    CL8                USERID PASSED VIA PARM
PSCBADDR DS    F                  HOLD PSCB ADDR
TCBHOLD  DS    F                  HOLD TCB ADDR
HOLDJSCB DS    F                  HOLD JSCB ADDR
RETREG   DS    F                  HOLD RETURN REGISTER
UPTOFBK  DS    F                  ADDR OF UPT OFFSET BLK
         DS    0D
LDYNAMIC EQU   *-DYNMAREA         SIZE OF DYNAM AREA
         EJECT
***********************************************************************
*  MACROS - DSECTS - ETC
***********************************************************************
         PRINT NOGEN
         IKJCPPL
         EJECT
         CVT
         EJECT
         IKJTCB
         EJECT
         IKJPPL
         EJECT
         IKJIOPL
         EJECT
         IEZJSCB
         END   PROFLIST
