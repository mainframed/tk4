 BLDX:  PROCEDURE OPTIONS(MAIN)REORDER;
 /*   BLDX BUILDS FILE(INDX) AND FILE(MAP) FROM FILE(MAJOR) AND
 /*      FILE(MINOR).
 /*      FILE(MAJOR) AND FILE(MINOR) CONSIST OF 'OCCURRENCE
 /*           RECORDS' BUILT BY BLDO FROM FILE(ERIC).  EACH
 /*           RECORD REPRESENTS ONE OCCURRENCE OF A DESCRIPTOR
 /*           IN FILE(ERIC) AND CONTAINS THE DISK ADDRESS OF THE
 /*           RECORD CONTAINING THE DESCRIPTOR IN TT0R FORMAT.
 /*           THE FILES ARE SORTED BY DESCRIPTOR AND BY DISK
 /*           ADDRESS WITHIN DESCRIPTOR.
 /*      DESCRIPTORS ARE KEYWORDS ASSIGNED TO REFERENCES BY ERIC
 /*           ABSTRACTORS.  MORE PROPERLY REFERRED TO AS 'QUANDRY
 /*           ACCESS KEYS', THEY ARE STRIPPED FROM BOTH THE ERIC
 /*           DESCRIPTOR FIELD AND THE ERIC IDENTIFIER FIELD.
 /*           DESCRIPTORS MAY FURTHER BE CLASSIFIED AS MAJOR
 /*           ('STARRED') DESCRIPTORS AND MINOR ('UNSTARRED')
 /*           DESCRIPTORS.  MAJOR DESCRIPTORS ARE PRIMARY KEYWORDS
 /*           FOR THE CITATION AND BEGIN WITH AN ASTERISK
 /*           (MOVED TO PRFX IN THE OCCURRENCE RECORDS).
 /*           MINOR DESCRIPTORS ARE KEYWORDS OF SECONDARY
 /*           APPLICABILITY TO A CITATION AND DO NOT BEGIN WITH
 /*           AN ASTERISK.
 /*      FILE(INDX) IS AN INDEXED FILE KEYED ON DESCRIPTORS.
 /*           EACH RECORD CONTAINS A MAJOR OR MINOR DESCRIPTOR,
 /*           A COUNT OF ITS OCCURRENCES, AND A POINTER INTO
 /*           FILE(MAP) TO A LIST OF THE OCCURRENCES OF THE
 /*           DESCRIPTOR.  THE POINTER CONSISTS OF THE KEY OF THE
 /*           RECORD BEGINNING THE LIST AND THE SUBSCRIPT OF THE
 /*           FIRST ENTRY OF THE LIST WITHIN THAT RECORD.  THE
 /*           OCCURRENCE COUNT FOR A MINOR DESCRIPTOR WILL INCLUDE
 /*           ITS OCCURRENCES AS A MAJOR DESCRIPTOR.  EACH OCCURRENCE
 /*           OF A DESCRIPTOR AS A MAJOR DESCRIPTOR WILL SIMILARLY
 /*           ALSO APPEAR IN THE CORRESPONDING MINOR DESCRIPTOR
 /*           OCCURRENCE LIST.  THIS MINIMIZES THE TIME NEEDED TO
 /*           EVALUATE EXPRESSIONS OVER DESCRIPTORS AND MINIMIZES
 /*           THE NUMBER OF SEPARATE READS OF OCCURRENCE LISTS
 /*           AT THE EXPENSE OF MORE DISK STORAGE FOR OCCURRENCE
 /*           LISTS.
 /*      FILE(MAP) IS A REGIONAL(1)FILE CONTAINING OCCURRENCE LISTS.
 /*           EACH LIST IS REPRESENTED AS AN INCREASING SEQUENCE
 /*           STORED IN SUCCESSIVE MAP RECORDS AND TERMINATED BY A
 /*           SPECIAL HIGH_KEY (X'7FFF0000'). IF ANY SPACE REMAINS
 /*           IN THE LAST RECORD OF A LIST, A NEW LIST IS BEGUN
 /*           FOLLOWING HIGH_KEY.
1/*      BLDX USES THE SUBROUTINE PROCESS_OCCURRENCE TO MERGE
 /*           MAJOR AND MINOR OCCURRENCE LISTS TO CONSTRUCT
 /*           FILE(MAP) AND FILE(INDX).  FIRST, PREFIX IS SET
 /*           TO '*' TO INDICATE MAJOR DESCRIPTORS ARE BEING
 /*           PROCESSED.  ENDFILE IS SIGNALLED FOR FILE(MINOR)
 /*           TO INHIBIT PROCESSING MINOR DESCRIPTOR OCCURRENCES,
 /*           AND PROCESS_OCCURRENCE IS CALLED REPEATEDLY TO
 /*           CONSTRUCT FILE ENTRIES FOR ALL MAJOR DESCRIPTORS.
 /*           THE INPUT FILES ARE THEN CLOSED AND PREFIX IS SET
 /*           TO ' ' TO INDICATE THAT MINOR DESCRIPTORS ARE BEING
 /*           PROCESSED.  PROCESS_OCCURRENCE IS CALLED REPEATEDLY
 /*           TO CONSTRUCT FILE ENTRIES FOR MINOR DESCRIPTORS,
 /*           MERGING MAJOR OCCURRENCE LISTS INTO THE (POSSIBLY
 /*           NULL) MINOR OCCURRENCE LISTS.  RUN STATISTICS AND
 /*           FILE STORAGE ESTIMATES ARE PRINTED AT TERMINATION. */
1%INCLUDE DCLDEVTB,DCLINDX;
1DECLARE
      (MAJOR,MINOR)RECORD ENV(FBS RECSIZE(37) BLKSIZE(3700) TOTAL),
      INDX KEYED SEQUENTIAL OUTPUT ENV(INDEXED GENKEY KEYLOC(1)),
      MAP KEYED SEQUENTIAL OUTPUT ENV(REGIONAL(1)),
      SYSPRINT PRINT,
      DEVTYPE ENTRY(CHAR(8),*,FIXED BINARY(31))EXTERNAL
         OPTIONS(ASSEMBLER INTER),
      EOF BIT(1)STATIC INITIAL(0B),
      (CEIL,HBOUND,HIGH,ONCODE,ONKEY,STORAGE,SUBSTR)BUILTIN,
   01 MAP_ENTRY STATIC,
      02 ERIC_KEY(42)FIXED BINARY(31),
   01 OMAJOR STATIC,
      02 RECNO FIXED BINARY(31),
      02 DESCRIPTOR CHAR(31),
      02 BLANK CHAR(1),
      02 PRFX CHAR(1),
   01 OMINOR LIKE OMAJOR,
      HIGH_KEY FIXED BINARY(31)INITIAL((32767*65536)),
      PREFIX CHAR(1)STATIC,
      RECORD_COUNT_CUTOFF FIXED BINARY STATIC INITIAL(1),
      (NUMBER_OF_DESCRIPTORS,NUMBER_OF_DESCRIPTORS_WRITTEN)
         FIXED BINARY(31)STATIC INITIAL(0);
1ON ENDFILE(MAJOR)BEGIN;
      OMAJOR.DESCRIPTOR=HIGH(31);
      OMAJOR.RECNO=HIGH_KEY;
 END;
0ON ENDFILE(MINOR)BEGIN;
      OMINOR.DESCRIPTOR=HIGH(31);
      OMINOR.RECNO=HIGH_KEY;
 END;
0ON KEY(MAP)SNAP CALL TERMINATE_ON_KEY_CONDITION;
0ON KEY(INDX)SNAP CALL TERMINATE_ON_KEY_CONDITION;
0TERMINATE_ON_KEY_CONDITION:  PROCEDURE;
      PUT FILE(SYSPRINT)LIST
         ('ONCODE='××ONCODE,'ONKEY='××ONKEY);
      CALL PRINT_STATISTICS;
      PUT DATA;
      CLOSE FILE(INDX),FILE(MAP);
      STOP;
 END TERMINATE_ON_KEY_CONDITION;
0ON ERROR SNAP BEGIN;
      ON ERROR SNAP SYSTEM;
      CALL PRINT_STATISTICS;
      PUT DATA;
 END;
0     INDX_ENTRY.RECORD_COUNT=0;
      DEVICE_TABLE=0; /* REDUCE UNDEFINED WARNINGS */
1     OPEN FILE(INDX)OUTPUT,FILE(MAP)OUTPUT,FILE(SYSPRINT)OUTPUT;
-     OPEN FILE(MAJOR)INPUT;
      PREFIX='*';
      CALL POSITION_FILE(MAJOR,OMAJOR);
      SIGNAL ENDFILE(MINOR);
      DO WHILE(OMAJOR.RECNO^=HIGH_KEY);
         CALL PROCESS_OCCURRENCE;
      END;
      CALL ADD(OMAJOR); /* HIGH_KEY WILL WRITE LAST INDX ENTRY */
      CLOSE FILE(MAJOR),FILE(MINOR);
-     OPEN FILE(MAJOR)INPUT,FILE(MINOR)INPUT;
      PREFIX=' ';
      CALL POSITION_FILE(MAJOR,OMAJOR);
      CALL POSITION_FILE(MINOR,OMINOR);
      DO WHILE(OMAJOR.RECNO^=HIGH_KEY×OMINOR.RECNO^=HIGH_KEY);
         CALL PROCESS_OCCURRENCE;
      END;
0     EOF=1B; /* SET TO WRITE LAST MAP ENTRY */
      CALL ADD(OMAJOR); /* HIGH_KEY WILL WRITE LAST INDX ENTRY */
      CALL PRINT_STATISTICS;
      CLOSE FILE(MAJOR),FILE(MINOR),FILE(INDX),FILE(MAP),FILE(SYSPRINT);
-POSITION_FILE:  PROCEDURE(M,O);
0DECLARE
      M FILE,
      O LIKE OMAJOR;
0DECLARE
      EOF BIT(1)AUTOMATIC INITIAL(0B);
0ON ENDFILE(M)EOF=1B;
0/*   POSITION_FILE SKIPS INVALID RECORDS (THOSE WITH DESCRIPTORS
 /*      HAVING LEADING BLANKS, PARENTHESES, ETC.) AT THE BEGINNING
 /*      OF THE FILE */
0     DO UNTIL(SUBSTR(O.DESCRIPTOR,1,1)>='A'×EOF);
         READ FILE(M)INTO(O);
      END;
0     IF EOF
         THEN DO;
              REVERT ENDFILE(M);
              SIGNAL ENDFILE(M);
         END;
 END POSITION_FILE;
1PROCESS_OCCURRENCE:  PROCEDURE;
0/*   PROCESS_OCCURRENCE IS USED TO MERGE THE MAJOR AND MINOR
 /*       FILES.  THE SMALLER OF THE TWO OCCURRENCES (COLLATED
 /*       ON DESCRIPTOR××RECNO) IS PASSED TO THE ADD SUBROUTINE
 /*       AND A NEW RECORD READ FROM THE APPROPRIATE FILE. */
0     SELECT;
      WHEN(OMAJOR.DESCRIPTOR<OMINOR.DESCRIPTOR)CALL ADD_MAJOR;
      WHEN(OMAJOR.DESCRIPTOR>OMINOR.DESCRIPTOR)CALL ADD_MINOR;
      WHEN(OMAJOR.DESCRIPTOR=OMINOR.DESCRIPTOR)
         SELECT;
         WHEN(OMAJOR.RECNO<OMINOR.RECNO)CALL ADD_MAJOR;
         WHEN(OMAJOR.RECNO>OMINOR.RECNO)CALL ADD_MINOR;
         WHEN(OMAJOR.RECNO=OMINOR.RECNO)CALL ADD_BOTH;
         END;
      END;
0ADD_MAJOR:  PROCEDURE;
      CALL ADD(OMAJOR);
      READ FILE(MAJOR)INTO(OMAJOR);
 END ADD_MAJOR;
0ADD_MINOR:  PROCEDURE;
      CALL ADD(OMINOR);
      READ FILE(MINOR)INTO(OMINOR);
 END ADD_MINOR;
0ADD_BOTH:  PROCEDURE;
      CALL ADD(OMAJOR);
      READ FILE(MAJOR)INTO(OMAJOR);
      READ FILE(MINOR)INTO(OMINOR);
 END ADD_BOTH;
0END PROCESS_OCCURRENCE;
1ADD:  PROCEDURE(O);
0/*   ADD BUILDS AN ENTRY FOR THE OCCURRENCE O.
 /*      IF THE DESCRIPTOR HAS CHANGED SINCE THE PREVIOUS
 /*           CALL (AND THE PREVIOUS DESCRIPTOR HAS AT LEAST
 /*           A MINIMUM NUMBER OF OCCURRENCES), THE INDX RECORD
 /*           FOR THE PREVIOUS DESCRIPTOR IS WRITTEN AND
 /*           ADD_MAP_ENTRY IS CALLED TO SCHEDULE THE WRITING OF
 /*           THE MAP ENTRIES FOR THE DESCRIPTOR.  A NEW INDX
 /*           RECORD IS THEN INITIALIZED.
 /*      THE OCCURRENCE COUNT (RECORD_COUNT) FOR THE INDX RECORD
 /*          IS INCREMENTED AND THE OCCURRENCE RECORD PASSED TO
 /*          ADD_ENTRY FOR FURTHER PROCESSING. */
0DECLARE
      O LIKE OMAJOR;
0DECLARE
      PREVIOUS_DESCRIPTOR CHAR(31)STATIC INITIAL(' ');
0     IF O.DESCRIPTOR^=PREVIOUS_DESCRIPTOR
              THEN CALL BEGIN_NEW_INDEX_ENTRY;
      INDX_ENTRY.RECORD_COUNT=INDX_ENTRY.RECORD_COUNT+1;
      CALL ADD_MAP_ENTRY(O.RECNO);
0BEGIN_NEW_INDEX_ENTRY:  PROCEDURE;
      NUMBER_OF_DESCRIPTORS=NUMBER_OF_DESCRIPTORS+1;
      IF INDX_ENTRY.RECORD_COUNT>RECORD_COUNT_CUTOFF&
         SUBSTR(PREVIOUS_DESCRIPTOR,1,1)^=' ' /* NOT FIRST TIME */
         THEN DO;
              WRITE FILE(INDX)FROM(INDX_ENTRY)
                   KEYFROM(INDX_ENTRY.DESCRIPTOR);
              NUMBER_OF_DESCRIPTORS_WRITTEN=
                   NUMBER_OF_DESCRIPTORS_WRITTEN+1;
              CALL ADD_MAP_ENTRY(HIGH_KEY); /* END PREVIOUS DESC */
         END;
      PREVIOUS_DESCRIPTOR=O.DESCRIPTOR;
      SELECT(PREFIX);
      WHEN(' ')INDX_ENTRY.DESCRIPTOR=O.DESCRIPTOR××' ';
      WHEN('*')INDX_ENTRY.DESCRIPTOR='*'××O.DESCRIPTOR;
      END;
      INDX_ENTRY.RECORD_COUNT=0;
      CALL OPEN_MAP_ENTRY;
0END BEGIN_NEW_INDEX_ENTRY;
0END ADD;
1MAP_ENTRY_ROUTINES:  PROCEDURE; /* CALLED VIA ENTRY POINTS */
0/*   THE MAP_ENTRY_ROUTINES MAINTAIN MAP_ENTRY.ERIC_KEY.
 /*      THE PRIMARY ENTRY POINT ADD_MAP_ENTRY SAVES THE
 /*           ENTRY IN MAP_SAVE, ALLOWING THE ENTRY TO BE
 /*           DISCARDED IF NECESSARY INSTEAD OF BEING WRITTEN
 /*           TO THE MAP FILE.  MAP_SAVE ENTRIES ARE MOVED TO
 /*           THE MAP RECORD WHENEVER MAP_SAVE IS FULL OR A
 /*           HIGH_KEY (INDICATING COMPLETION OF A DESCRIPTOR)
 /*           IS PASSED AS AN ARGUMENT.  THE MAP RECORD IS WRITTEN
 /*           WHENEVER IT BECOMES FULL.  A WRITE OF ANY REMAINING
 /*           MAP ENTRIES IF FORCED AT ENDFILE BY THE VARIABLE EOF.
 /*      THE ALTERNATE ENTRY POINT OPEN_MAP_ENTRY IS CALLED TO
 /*           CLEAR MAP_SAVE AND INITIALIZE THE NEW INDX RECORD
 /*           WITH THE CURRENT MAP FILE ADDRESSES. */
0DECLARE /* PARAMETER OF SOME ENTRY POINTS */
      ERIC_KEY FIXED BINARY(31);
0DECLARE
      MAP_KEY FIXED BINARY(23)STATIC INITIAL(0),
      MAP_SUBSCRIPT FIXED BINARY STATIC INITIAL(0),
      MAP_SAVE(100)FIXED BINARY(31)STATIC,
      MSI FIXED BINARY STATIC INITIAL(0),
      I FIXED BINARY;
1OPEN_MAP_ENTRY:  ENTRY;
      INDX_ENTRY.MAP_KEY=MAP_KEY;
      INDX_ENTRY.MAP_SUBSCRIPT=MAP_SUBSCRIPT+1;
      MSI=0;
      RETURN;
-ADD_MAP_ENTRY:  ENTRY(ERIC_KEY);
0     MSI=MSI+1;
      MAP_SAVE(MSI)=ERIC_KEY;
0     IF MSI=HBOUND(MAP_SAVE,1) /* MAP_SAVE FULL */
         ×ERIC_KEY=HIGH_KEY     /* END OF DESCRIPTOR */
         THEN DO;
              DO I=1 TO MSI;
                   MAP_SUBSCRIPT=MAP_SUBSCRIPT+1;
                   MAP_ENTRY.ERIC_KEY(MAP_SUBSCRIPT)=
                        MAP_SAVE(I);
                   IF MAP_SUBSCRIPT=HBOUND(MAP_ENTRY.ERIC_KEY,1)
                        THEN CALL WRITE_MAP_ENTRY;
              END;
              MSI=0;
         END;
      IF EOF&MAP_SUBSCRIPT>0
         THEN CALL WRITE_MAP_ENTRY;
      RETURN;
-WRITE_MAP_ENTRY:  PROCEDURE;
      WRITE FILE(MAP)FROM(MAP_ENTRY)KEYFROM(MAP_KEY);
      MAP_KEY=MAP_KEY+1;
      MAP_SUBSCRIPT=0;
0END WRITE_MAP_ENTRY;
0END MAP_ENTRY_ROUTINES;
1PRINT_STATISTICS:  PROCEDURE;
0/*   PRINT_STATISTICS IS CALLED TO PRINT STATISTICS ON ERRORS
 /*      AND AT THE END OF THE PROGRAM.  THE ROUTINE DEVTYPE
 /*      IS USED TO GET DEVICE DEPENDENT INFORMATION. */
0DECLARE
      (MAP_BLOCKS_PER_TRACK,MAP_BLOCKS_PER_CYLINDER,
         MAP_CYLINDERS_USED)FIXED BINARY(31),
      (KEYED_O,LAST_KEYED_O)FIXED BINARY,
      IER FIXED BINARY(31);
0     CALL DEVTYPE('MAP     ',DEVICE_TABLE,IER);
      IF IER^=0
         THEN SIGNAL ERROR;
      KEYED_O=KEYED_BLOCK_OVERHEAD;
      LAST_KEYED_O=LAST_KEYED_BLOCK_OVERHEAD;
      IF TWO_BYTE_OVERHEAD_VALUE
         THEN KEYED_O,LAST_KEYED_O=
              KEYED_O*256+LAST_KEYED_O;
0     MAP_BLOCKS_PER_TRACK=
         (MAXIMUM_TRACK_LENGTH+KEYED_O-LAST_KEYED_O)/
         (STORAGE(MAP_ENTRY)+KEYED_O-UNKEYED_BLOCK_DIFFERENCE);
      MAP_BLOCKS_PER_CYLINDER=
         MAP_BLOCKS_PER_TRACK*TRACKS_PER_CYLINDER;
      MAP_CYLINDERS_USED=
         CEIL((INDX_ENTRY.MAP_KEY+1)/MAP_BLOCKS_PER_CYLINDER);
0     PUT FILE(SYSPRINT)SKIP EDIT
         (MAP_CYLINDERS_USED,
              ' CYLINDERS WERE USED FOR MAP RECORDS.',
         MAP_BLOCKS_PER_CYLINDER,
              ' MAP RECORDS WERE WRITTEN PER CYLINDER.',
         HBOUND(MAP_ENTRY.ERIC_KEY,1),
              ' OCCURRENCES FIT IN ONE MAP RECORD.',
         INDX_ENTRY.MAP_KEY,
              ' WAS THE KEY OF THE LAST RECORD WRITTEN.')
         (SKIP,F(12),A);
0     PUT FILE(SYSPRINT)SKIP(2)EDIT
         (NUMBER_OF_DESCRIPTORS,
              ' POTENTIAL KEYS WERE FOUND.'
              ,
         NUMBER_OF_DESCRIPTORS_WRITTEN,
              ' OF THESE WERE ACCEPTED AS QUANDARY ACCESS KEYS.',
         RECORD_COUNT_CUTOFF+1,
              ' OCCURRENCES WERE REQUIRED FOR ACCEPTANCE.')
         (SKIP,F(12),A);
      PUT FILE(SYSPRINT)SKIP;
0END PRINT_STATISTICS;
0END BLDX;
