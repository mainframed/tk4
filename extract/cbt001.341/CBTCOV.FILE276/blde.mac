 BLDE:  PROCEDURE(PARM)OPTIONS(MAIN);
0DECLARE
      PARM CHAR(100)VARYING;
0%INCLUDE DCLERIC,DCLDEVTB;
1DECLARE
      (CEIL,FLOAT,MAX,MOD,SUBSTR)BUILTIN,
      COMPACT EXTERNAL ENTRY,
      DEVTYPE EXTERNAL ENTRY OPTIONS(ASSEMBLER INTER),
      SYSPRINT PRINT,
      ERIC KEYED SEQUENTIAL OUTPUT
         ENVIRONMENT(U BLKSIZE(4002)KEYLENGTH(3)REGIONAL(3)),
      SYSIN RECORD INPUT ENV(VB RECSIZE(4004)),
      OFL RECORD OUTPUT ENV(VB RECSIZE(3600) BLKSIZE(13030)),
      EOF BIT(1)STATIC INITIAL(0),
      DDNAME CHAR(8)STATIC INITIAL('ERIC'),
      IERR FIXED BINARY(31),
      (CIJEREC,RIEREC)FIXED BINARY(31)INITIAL(999999999),
      (CIJE_DISK_RECORDS,RIE_DISK_RECORDS)FIXED BINARY(31),
      (CIJE_TAPE_RECORDS,RIE_TAPE_RECORDS)FIXED BINARY(31),
      MAXIMUM_RECORD_LENGTH FIXED BINARY(15)STATIC INITIAL(0),
      AVERAGE_RECORD_LENGTH FIXED BINARY(31),
      TOTAL_BYTES FIXED BINARY(31)STATIC INITIAL(0),
      (CYLINDERS,CIJE_CYLINDERS,RIE_CYLINDERS)FIXED BINARY(31),
      RECNO PICTURE'(11)9',
      STDERIC CHAR(4000)VARYING;
0ON ERROR SNAP PUT DATA(RECNO,STDERIC,IERR);
0ON ENDFILE(SYSIN)EOF=1B;
0     DEVICE_TABLE=0; /* ELIMINATE WARNINGS FOR NO INIT */
1     OPEN FILE(ERIC)OUTPUT;
      CALL DEVTYPE(DDNAME,DEVICE_TABLE,IERR);
      IF IERR^=0
         THEN SIGNAL ERROR;
      ALLOCATE ERIC_RECORD SET(PERIC);
      GET STRING(PARM××';')DATA(CIJEREC,RIEREC);
0     OPEN FILE(SYSIN)INPUT TITLE('CIJE'),
         FILE(OFL)OUTPUT TITLE('CIJEOFL');
      EOF=0B;
      DO CIJE_DISK_RECORDS=0 TO CIJEREC-1 UNTIL(EOF);
         CALL PROCESS_RECORD;
      END;
0     READ FILE(SYSIN)INTO(STDERIC);
      DO CIJE_TAPE_RECORDS=0 BY 1 WHILE(^EOF);
         WRITE FILE(OFL)FROM(STDERIC);
         READ FILE(SYSIN)INTO(STDERIC);
      END;
      CLOSE FILE(SYSIN),FILE(OFL);
      CIJE_CYLINDERS=MOD(RECNO,100000000)/TRACKS_PER_CYLINDER+1;
-     OPEN FILE(SYSIN)INPUT TITLE('RIE'),
         FILE(OFL)OUTPUT TITLE('RIEOFL');
      EOF=0B;
      DO RIE_DISK_RECORDS=0 TO RIEREC-1 UNTIL(EOF);
         CALL PROCESS_RECORD;
      END;
0     READ FILE(SYSIN)INTO(STDERIC);
      DO RIE_TAPE_RECORDS=0 BY 1 WHILE(^EOF);
         WRITE FILE(OFL)FROM(STDERIC);
         READ FILE(SYSIN)INTO(STDERIC);
      END;
      CLOSE FILE(SYSIN),FILE(OFL);
1     MAXIMUM_RECORD_LENGTH=MAXIMUM_RECORD_LENGTH+2;
      AVERAGE_RECORD_LENGTH=TOTAL_BYTES/
         MAX(1E0,CIJE_DISK_RECORDS+RIE_DISK_RECORDS);
      CYLINDERS=CEIL(MOD(RECNO,100000000)/TRACKS_PER_CYLINDER)+1;
      RIE_CYLINDERS=CYLINDERS-CIJE_CYLINDERS; /* MAY BE ONE LOW */
      PUT SKIP(3)EDIT
         (CIJE_DISK_RECORDS,'DISK CIJE RECORDS WERE WRITTEN.',
         CIJE_TAPE_RECORDS,'TAPE CIJE RECORDS WERE WRITTEN.',
         CIJE_DISK_RECORDS+CIJE_TAPE_RECORDS,
              'TOTAL CIJE RECORDS WERE WRITTEN.',
         CIJE_CYLINDERS,'CYLINDERS WERE USED FOR CIJE RECORDS.',
         100E0*CIJE_DISK_RECORDS/
              MAX(1E0,CIJE_DISK_RECORDS+CIJE_TAPE_RECORDS),
              'PERCENT OF THE CIJE RECORDS WERE WRITTEN TO DISK.')
         (COL(1),F(12),X(1),A);
      PUT SKIP(3)EDIT
         (RIE_DISK_RECORDS,'DISK RIE RECORDS WERE WRITTEN.',
         RIE_TAPE_RECORDS,'TAPE RIE RECORDS WERE WRITTEN.',
         RIE_DISK_RECORDS+RIE_TAPE_RECORDS,
              'TOTAL RIE RECORDS WERE WRITTEN.',
         RIE_CYLINDERS,'CYLINDERS WERE USED FOR RIE RECORDS.',
         100E0*RIE_DISK_RECORDS/
              MAX(1E0,RIE_DISK_RECORDS+RIE_TAPE_RECORDS),
              'PERCENT OF THE RIE RECORDS WERE WRITTEN TO DISK.')
         (COL(1),F(12),X(1),A);
      PUT SKIP(3)EDIT
         (TOTAL_BYTES,'BYTES WERE WRITTEN TO DISK.',
         CYLINDERS,'CYLINDERS WERE USED.',
         RECNO,'WAS THE LAST ''RECNO''.')
         (COL(1),F(12),X(1),A);
      PUT SKIP(3)EDIT
         ('THE MAXIMUM RECORD LENGTH WAS',MAXIMUM_RECORD_LENGTH,'.',
         'THE AVERAGE RECORD LENGTH WAS',AVERAGE_RECORD_LENGTH,'.')
              (COL(1),A,F(6),A)
         ('THE AVERAGE NUMBER OF CIJE RECORDS PER CYLINDER WAS',
              FLOAT(CIJE_DISK_RECORDS)/MAX(1E0,CIJE_CYLINDERS),
         'THE AVERAGE NUMBER OF RIE  RECORDS PER CYLINDER WAS',
              FLOAT(RIE_DISK_RECORDS)/MAX(1E0,RIE_CYLINDERS))
              (COL(1),A,F(8,3));
1PROCESS_RECORD:  PROCEDURE;
0     READ FILE(SYSIN)INTO(STDERIC);
      IF EOF
         THEN RETURN;
      CALL COMPACT(STDERIC,RECORD_LENGTH/*FIRST BYTE OF ERIC_RECORD*/);
      IF RECORD_LENGTH>MAXIMUM_DATA_LENGTH /* SIC */
         THEN SIGNAL ERROR;
0     IF OFFSETS(6)^=OFFSETS(7) /* DESCRIPTOR PRESENT */
         THEN DO;
              MAXIMUM_RECORD_LENGTH=
                   MAX(MAXIMUM_RECORD_LENGTH,RECORD_LENGTH);
              RECNO=NEXT_KEY();
              ERIC_RECORD.RECNO=SUBSTR(RECNO,1,3);
              ERIC_RECORD.TRACK=SUBSTR(RECNO,7,5);
              WRITE FILE(ERIC)FROM(ERIC_RECORD)KEYFROM(RECNO);
              TOTAL_BYTES=TOTAL_BYTES+RECORD_LENGTH+2;
         END;
0END PROCESS_RECORD;
1NEXT_KEY:  PROCEDURE RETURNS(PICTURE'(11)9');
0DECLARE
      UNSUPPORTED_DEVICE CONDITION INTERNAL,
      (OVERHEAD,LAST_OVERHEAD,TOLERANCE)FIXED BINARY STATIC,
      O FIXED BINARY,
      FIRST_TIME BIT(1)STATIC INITIAL(1B),
      EFFECTIVE_RECORD_LENGTH FIXED BINARY(31),
      TRACK_BALANCE FIXED BINARY(31)STATIC,
   01 RTT STATIC,
      02 R PICTURE'999'INITIAL(0),
      02 TT PICTURE'(8)9'INITIAL(0),
      RTT_STRING PICTURE'999(8)9'DEFINED(RTT);
0ON CONDITION(UNSUPPORTED_DEVICE)BEGIN;
      PUT SKIP EDIT
         ('DEVICE FOR FILE(ERIC) IS UNSUPPORTED')(A);
      PUT SKIP(2)DATA
         (TRACK_BALANCE,EFFECTIVE_RECORD_LENGTH,OVERHEAD,RTT);
      STOP; /****** STOP ******/
 END;
0     IF FIRST_TIME
         THEN DO;
              FIRST_TIME=0B;
              TRACK_BALANCE=MAXIMUM_TRACK_LENGTH;
              IF APPLY_TOLERANCE_FACTOR
                   THEN TOLERANCE=TOLERANCE_FACTOR;
                   ELSE TOLERANCE=512;
              IF TWO_BYTE_OVERHEAD_VALUE
                   THEN OVERHEAD,LAST_OVERHEAD=
                        KEYED_BLOCK_OVERHEAD*256+
                        LAST_KEYED_BLOCK_OVERHEAD;
                   ELSE DO;
                        OVERHEAD=KEYED_BLOCK_OVERHEAD;
                        LAST_OVERHEAD=LAST_KEYED_BLOCK_OVERHEAD;
                        IF OVERHEAD<LAST_OVERHEAD
                             THEN SIGNAL CONDITION(UNSUPPORTED_DEVICE);
                   END;
         END;
1     EFFECTIVE_RECORD_LENGTH=
         (ERIC_RECORD.RECORD_LENGTH+
         2+ /* 2 BYTES FOR RECORD LENGTH FIELD */
         3)* /* 3 BYTES FOR KEY */
         TOLERANCE/512;
      IF EFFECTIVE_RECORD_LENGTH+LAST_OVERHEAD>
         MAXIMUM_TRACK_LENGTH
         THEN SIGNAL CONDITION(UNSUPPORTED_DEVICE);
0     IF TRACK_BALANCE<EFFECTIVE_RECORD_LENGTH+LAST_OVERHEAD
         THEN DO;
              TRACK_BALANCE=MAXIMUM_TRACK_LENGTH;
              TT=TT+1;
              R=0;
         END;
0     IF TRACK_BALANCE<EFFECTIVE_RECORD_LENGTH+OVERHEAD
         THEN O=LAST_OVERHEAD;
         ELSE O=OVERHEAD;
      TRACK_BALANCE=TRACK_BALANCE-EFFECTIVE_RECORD_LENGTH-O;
0     R=R+1;
      RETURN(RTT_STRING);
0END NEXT_KEY;
0END BLDE;
