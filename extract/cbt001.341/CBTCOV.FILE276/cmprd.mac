 (CHECK(ERRCODE)):  CMPRD:  PROCEDURE(STTYPE,STMT)REORDER;
 %INCLUDE EXTVAR,DCLOPER,FILES,DCLOPT,DCLHIGH,
1     DCLINDX,DCLTREE,DCLSTMT;
0DECLARE
      (ALLOCATION,EMPTY,HBOUND,INDEX,LENGTH)BUILTIN,
      (NULL,SUBSTR,VERIFY)BUILTIN;
0DECLARE
      TREE_HEAD POINTER,
      READ_STMT_AREA AREA(OPT.READSIZE)CONTROLLED,
      CURRENT_AREA_SIZE FIXED BINARY(31)STATIC INITIAL(0),
      DESCRIPTOR_AVAILABLE BIT(1)AUTOMATIC INITIAL(0B),
      OPERATOR FIXED BINARY(31),
      OPERATOR_STACK FIXED BINARY(31)CONTROLLED,
      OPERAND_STACK POINTER CONTROLLED;
1/*   CMPRD IS CALLED TO COMPILE READ STATEMENTS INTO A TREE
 /*      WHICH WILL BE POINTED TO BY PHEAD.
 /*      A READ STATEMENT SPECIFIES A SET OF KEYS IN
 /*           FILE(INDX) AND IS OF THE FORM
 /*                READ LOGICAL-EXPRESSION#
 /*           WHERE LOGICAL-EXPRESSION USES THE OPERATORS
 /*           '×' ($OR, THE HIGHEST PRIORITY OPERATOR),
 /*           '&' ($AND),
 /*           ';' ($SEMI, EQUIVALENT TO $OR BUT LOWER IN PRIORITY), AND
 /*           '#' ($#, THE STANDARD STATEMENT-TERMINATOR)
 /*           TO JOIN 'ACCESS KEYS'.
 /*      ERIC DESCRIPTORS ARE KEYWORDS FROM A RESTRICTED
 /*           VOCABULARY WHICH ARE ASSIGNED TO ARTICLES BY THE
 /*           ERIC ABSTRACTORS.  WHEN ABSTRACTING AN ARTICLE,
 /*           AN ASTERISK-PREFIXED ('STARRED') DESCRIPTOR
 /*           IS USED TO INDICATE A PRIMARY ('MAJOR') DESCRIPTOR
 /*           FOR THE CITATION, AND AN UNPREFIXED ('UNSTARRED')
 /*           DESCRIPTOR TO INDICATE A SECONDARY ('MINOR')
 /*           DESCRIPTOR.
 /*      ERIC IDENTIFIERS ARE SIMILAR IN FORMAT TO ERIC
 /*           BUT ARE NOT LIMITED TO A RESTRICTED VOCABULARY.
 /*      INDX IS THE ISAM FILE WHICH IS KEYED ON ERIC DESCRIPTORS
 /*           AND IDENTIFIERS.  EACH RECORD CONTAINS A COUNT OF
 /*           THE NUMBER OF CITATIONS TO WHICH THE KEY APPLIES
 /*           AND A POINTER TO THE ASSOCIATED MAP FILE ENTRIES.
 /*           INDEX KEYS ARE THE STARTING POINT FOR ACCESS TO ERIC
 /*           CITATIONS.
 /*      QUANDRY ACCESS KEYS ARE GENERIC KEYS (OF LENGTH FOUR OR
 /*           MORE) WHICH ARE SPECIFIED IN READ STATEMENTS
 /*           IN LIEU OF COMPLETE INDEX KEYS.
 /*      MAP IS THE REGIONAL(1) FILE WHICH CONTAINS THE KEYS OF
 /*           THE ACTUAL ERIC CITATIONS (WHICH ARE IN FILE(ERIC)).
 /*           ANY CITATION OF A MAJOR DESCRIPTOR WILL ALSO BE LISTED
 /*           AS A CITATION OF THE CORRESPONDING MINOR DESCRIPTOR.
 /*           SINCE IT IS DIVIDED INTO FIXED-LENGTH BLOCKS AND STORED
 /*           AS A CONTINUOUS STREAM OF KEYS, INDX ENTRIES MUST
 /*           SPECIFY BOTH THE BLOCK NUMBER (MAP_KEY) AND THE OFFSET
 /*           (MAP_SUBSCRIPT) WITHIN THE BLOCK OF THE FIRST KEY
 /*           FOR THE DESCRIPTOR.  KEYS FOR THE DESCRIPTOR OCCUR
 /*           IN FILE(MAP) IN ASCENDING ORDER, AND A HIGH_VALUE
 /*           KEY IS USED TO INDICATE LOGICAL ENDFILE FOR A
 /*           DESCRIPTOR.  MAP ENTRIES MUST BE INITIALIZED BY
 /*           THE SETTREE PROCEDURE BEFORE EVALUATING THE TREE.
1/*      PHEAD IS SET TO POINT TO A TREE CONSTRUCTED TO REPRESENT
 /*           THE LOGICAL EXPRESSION OF THE READ STATEMENT.
 /*           OPERATORS ARE REPRESENTED AS NODES OF THE TREE.
 /*           EACH NODE CONTAINS A FIRST-SON AND A NEXT-SIBLING POINTER,
 /*           AND A FIELD (MSELECT) WHICH WILL LATER BE USED
 /*           TO INDICATE THE NEXT ERIC RECORD SATISFYING THE SUBTREE.
 /*           DESCRIPTORS ARE REPRESENTED AS LEAVES OF THE TREE.
 /*      LEAF IS A TERMINAL NODE, INDICATED BY NODE_TYPE $LEAF.
 /*           THE INDX ENTRY AND THE CURRENT MAP ENTRY FOR THE
 /*           DESCRIPTOR OR IDENTIFIER RESIDE IN THE LEAF.
 /*           MUCH CPU TIME AND STORAGE WOULD BE WASTED BY STORING
 /*           THE MAP ENTRIES FOR THE MANY SINGLE-CITATION IDENTIFIERS
 /*           IN SEPARATE LEAVES.  SUCH INDEX KEYS ARE PACKED INTO
 /*           A 'FOLDED LEAF' AND A COMPOSITE MAP_KEY ENTRY IS
 /*           CONSTRUCTED.  FOLD_CODE IS SET NONZERO SO THAT SETTREE
 /*           WILL NOT DESTROY THE COMPOSITE MAP ENTRY DURING TREE
 /*           INITIALIZATION.  THE LAST CHARACTER OF LEAF.DESCRIPTOR
 /*           IS SET TO '+' TO IDENTIFY FOLDED LEAVES IN LISTTREE
 /*           OUTPUT.  FOLDING WILL NEVER OCCUR IF THE RECORD
 /*           CUTOFF LIMIT IN BLDX HAS BEEN SET TO ELIMINATE
 /*           SINGLE-OCCURRENCE ACCESS KEYS WHEN BUILDING
 /*           FILE(ERIC) AND FILE(MAP).
 /*      COMPILATION IS BASED ON OPERATOR PRECEDENCE.  CALLS TO
 /*           GET_DESCRIPTOR ALTERNATE WITH CALLS TO GET_OPERATOR.
 /*           GET_DESCRIPTOR ISOLATES THE NEXT DESCRIPTOR, BUILDS
 /*           A LEAF FOR IT, AND STORES ADDRESS IN OPERAND_STACK.
 /*           GET_OPERATOR RETURNS THE NEXT OPERATOR.  DEPENDING
 /*           ON THE PRIORITY OF THE CURRENT AND PREVIOUS OPERATORS,
 /*           THE CURRENT OPERATOR WILL STACKED OR THE PREVIOUS
 /*           OPERATOR WILL BE POPPED FROM THE STACK AND BUILD_NODE
 /*           WILL BE CALLED TO BUILD AN OPERATOR NODE OVER THE TOP TWO
 /*           OPERANDS OF THE STACK.  BUILD_NODE WILL EITHER BUILD
 /*           THE NODE OR, IF THE OPERATOR IS ONE OF A SEQUENCE OF
 /*           IDENTICAL OPERATORS, CHAIN THE SECOND OPERAND ON AS A
 /*           LAST SON TO MINIMIZE THE HEIGHT OF THE TREE (AND HENCE
 /*           THE DEGREE OF RECURSION REQUIRED TO EVALUATE IT).
 /*      REPLACEMENT OF QUANDRY ACCESS KEYS BY INDEX KEYS IS
 /*           HANDLED TRANSPARENTLY BY GET_DESCRIPTOR AND
 /*           GET_OPERATOR.  A BIT (DESCRIPTOR_AVAILABLE)
 /*           SIMULATES A GENERIC VSAM-TYPE SAMEKEY FUNCTION
 /*           FOR FILE(INDX).  SO LONG AS THIS IS ON, GET_OPERATOR
 /*           WILL RETURN $OR AND GET_DESCRIPTOR WILL SEQUENTIALLY READ
 /*           FILE(INDX) TO DETERMINE THE NEXT DESCRIPTOR. */
1ON AREA ERRCODE=04011;
0     PHEAD=NULL;
      DO WHILE(ALLOCATION(OPERAND_STACK)>0);FREE OPERAND_STACK;END;
      DO WHILE(ALLOCATION(OPERATOR_STACK)>0);FREE OPERATOR_STACK;END;
      IF ALLOCATION(READ_STMT_AREA)=0×CURRENT_AREA_SIZE^=OPT.READSIZE
         THEN DO;
              FREE READ_STMT_AREA;
              CURRENT_AREA_SIZE=0;
              ALLOCATE READ_STMT_AREA AREA(OPT.READSIZE);
              CURRENT_AREA_SIZE=OPT.READSIZE;
         END;
      READ_STMT_AREA=EMPTY;
0     ALLOCATE OPERATOR_STACK INITIAL(0);
      DO WHILE(SCANPTR<=LENGTH(STMT));
         CALL GET_DESCRIPTOR;
         CALL GET_OPERATOR;
         DO WHILE(OPERATOR_STACK>=OPERATOR);
              CALL BUILD_NODE;
              FREE OPERATOR_STACK;
         END;
         ALLOCATE OPERATOR_STACK INITIAL((OPERATOR));
      END;
0     PHEAD=TREE_HEAD; /* SET AT LAST MOMENT TO ENSURE TREE COMPLETE */
1BUILD_NODE:  PROCEDURE;
0DECLARE
      (P,P1,P2)POINTER;
0     P2=OPERAND_STACK;
      FREE OPERAND_STACK;
      IF 0B THEN OPERAND_STACK=OPERAND_STACK; /* CIRCUMVENTION */
      P1=OPERAND_STACK;
      SELECT;
0     WHEN(P1->NODE_TYPE^=OPERATOR_STACK) /* DISSIMILAR OPERATORS */
         DO;
              ALLOCATE NODE IN(READ_STMT_AREA)SET(P);
              P->PDOWN=P1;
              P1->PACROSS=P2;
              P->NODE_TYPE=OPERATOR_STACK;
              TREE_HEAD,OPERAND_STACK=P;
         END;
0     WHEN(OPERATOR_STACK^=$OR,P2->NODE_TYPE^=$LEAF,
         P2->LEAF.RECORD_COUNT^=1) /* SIMILAR OPERATORS, NO FOLDING */
         DO;
              TREE_HEAD=P1;
              DO P=P1->PDOWN REPEAT(P->PACROSS)WHILE(P->PACROSS^=NULL);
              END;
              P->PACROSS=P2;
         END;
0     OTHERWISE /* OR OPERATORS WITH POTENTIAL FOR FOLDING */
         DO;
              TREE_HEAD=P1;
              DO P=P1->PDOWN REPEAT(P->PACROSS)
                   WHILE(P->PACROSS^=NULL);
                   IF P->NODE_TYPE=$LEAF
                        THEN IF P->LEAF.RECORD_COUNT=1×P->FOLD_CODE=1
                             THEN LEAVE;
              END;
              IF P->LEAF.RECORD_COUNT=1×P->FOLD_CODE=1
                 THEN CALL FOLD_LEAF;
                 ELSE P->PACROSS=P2; /* NO LEAF TO FOLD INTO */
         END;
      END;
1FOLD_LEAF:  PROCEDURE;
0DECLARE
      I FIXED BINARY,
      KEY FIXED BINARY(31);
0     IF P->FOLD_CODE=0 /* UNFOLDED LEAF */
         THEN DO; /* PREPARE LEAF TO FOLD INTO */
              P->FOLD_CODE=1; /* FOLDED AND NOT FILLED */
              P->LEAF.MAP_KEY=P->LEAF.INITIAL_MAP_KEY; /* FOR SETTREE */
              READ FILE(MAP)INTO(P->MAP_ENTRY)KEY(P->LEAF.MAP_KEY);
              P->ERIC_KEY(1)=P->ERIC_KEY(P->INITIAL_MAP_SUBSCRIPT);
              P->ERIC_KEY(2)=HIGH_KEY;
              P->INITIAL_MAP_SUBSCRIPT=1; /* FOR SETTREE */
              SUBSTR(P->LEAF.DESCRIPTOR,32,1)='+'; /* FOR LSTTREE */
         END;
0     READ FILE(MAP)INTO(P2->MAP_ENTRY)KEY(P2->INITIAL_MAP_KEY);
      KEY=P2->ERIC_KEY(P2->INITIAL_MAP_SUBSCRIPT);
      FREE P2->LEAF IN(READ_STMT_AREA);
      DO I=1 BY 1 WHILE(KEY>P->ERIC_KEY(I));
      END;
0     IF KEY^=P->ERIC_KEY(I)
         THEN DO;
              DO I=P->LEAF.RECORD_COUNT+1 TO I BY -1;
                   P->ERIC_KEY(I+1)=P->ERIC_KEY(I);
              END;
              P->ERIC_KEY(I+1)=KEY;
              P->LEAF.RECORD_COUNT=P->LEAF.RECORD_COUNT+1;
              IF P->LEAF.RECORD_COUNT+1=HBOUND(P->ERIC_KEY,1)
                   THEN P->FOLD_CODE=2; /* FOLDED AND FILLED */
         END;
0END FOLD_LEAF;
0END BUILD_NODE;
1GET_OPERATOR:  PROCEDURE;
0     IF DESCRIPTOR_AVAILABLE
         THEN OPERATOR=$OR;
         ELSE DO;
              OPERATOR=INDEX(SCNDOPS,SUBSTR(STMT,SCANPTR,1));
              IF OPERATOR=0
                   THEN ERRCODE=04010;
              SCANPTR=SCANPTR+1;
         END;
0END GET_OPERATOR;
-GET_DESCRIPTOR:  PROCEDURE;
0DECLARE
      GEN_KEY CHAR(32)VARYING STATIC,
      P POINTER;
0ON KEY(INDX)ERRCODE=04013;
0     IF ^DESCRIPTOR_AVAILABLE
         THEN DO;
              GEN_KEY=SUBSTR(STMT,SCANPTR,
                   VERIFY(SUBSTR(STMT,SCANPTR),
                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ .,''*1234567890')-1);
              IF LENGTH(GEN_KEY)<4
                   THEN ERRCODE=04012;
              READ FILE(INDX)INTO(INDX_ENTRY)KEY(GEN_KEY);
              SCANPTR=SCANPTR+LENGTH(GEN_KEY);
         END;
0     ALLOCATE LEAF IN(READ_STMT_AREA)SET(P);
      P->LEAF.INDX_ENTRY=INDX_ENTRY;
      ALLOCATE OPERAND_STACK;
      TREE_HEAD,OPERAND_STACK=P;
0     READ FILE(INDX)INTO(INDX_ENTRY);
      DESCRIPTOR_AVAILABLE=
         SUBSTR(INDX_ENTRY.DESCRIPTOR,1,LENGTH(GEN_KEY))=GEN_KEY;
0END GET_DESCRIPTOR;
0END CMPRD;
