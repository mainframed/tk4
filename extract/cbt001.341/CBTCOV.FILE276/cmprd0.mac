 (CHECK(ERRCODE)):  CMPRD:  PROCEDURE(STTYPE,STMT)REORDER;
 %INCLUDE EXTVAR,DCLOPER,FILES,OPT,
1     DCLINDX,DCLTREE,DCLSTMT;
0DECLARE
      (ALLOCATION,EMPTY,INDEX,LENGTH)BUILTIN,
      (NULL,SUBSTR,VERIFY)BUILTIN;
0DECLARE
      TREE_HEAD POINTER,
      READ_STMT_AREA AREA(OPT.READSIZE)CONTROLLED,
      CURRENT_AREA_SIZE FIXED BINARY(31)STATIC INITIAL(0),
      DESCRIPTOR_AVAILABLE BIT(1)AUTOMATIC INITIAL(0B),
      OPERATOR FIXED BINARY(31),
      OPERATOR_STACK FIXED BINARY(31)CONTROLLED,
      OPERAND_STACK POINTER CONTROLLED;
1/*   CMPRD IS CALLED TO COMPILE READ STATEMENTS INTO A TREE
 /*      WHICH WILL BE POINTED TO BY PHEAD.
 /*      A READ STATEMENT SPECIFIES A SET OF KEYS IN
 /*           FILE(INDX) AND IS OF THE FORM
 /*                READ LOGICAL-EXPRESSION#
 /*           WHERE LOGICAL-EXPRESSION USES THE OPERATORS
 /*           '×' ($OR, THE HIGHEST PRIORITY OPERATOR),
 /*           '&' ($AND),
 /*           ';' ($SEMI, EQUIVALENT TO $OR BUT LOWER IN PRIORITY), AND
 /*           '#' ($#, THE STANDARD STATEMENT-TERMINATOR)
 /*           TO JOIN 'DESCRIPTORS'.
 /*      ERIC DESCRIPTORS ARE KEYWORDS FROM A RESTRICTED
 /*           VOCABULARY WHICH ARE ASSIGNED TO ARTICLES BY THE
 /*           ERIC ABSTRACTORS.  WHEN ABSTRACTING AN ARTICLE,
 /*           AN ASTERISK-PREFIXED ('STARRED') DESCRIPTOR
 /*           IS USED TO INDICATE A PRIMARY ('MAJOR') DESCRIPTOR
 /*           FOR THE CITATION, AND AN UNPREFIXED ('UNSTARRED')
 /*           DESCRIPTOR TO INDICATE A SECONDARY ('MINOR')
 /*           DESCRIPTOR.
 /*      QUANDRY DESCRIPTORS ARE ALPHANUMERIC STRINGS OF LENGTH AT
 /*           LEAST 4 WHICH REPRESENT ONE OR MORE ACTUAL ERIC
 /*           DESCRIPTORS:  A QUANDRY DESCRIPTOR REPRESENTS
 /*           EVERY ERIC DESCRIPTOR BEGINNING WITH THOSE CHARACTERS.
 /*           FURTHERMORE, AN UNSTARRED QUANDRY DESCRIPTOR REPRESENTS
 /*           NOT ONLY ITS CLASS OF ERIC DESCRIPTORS BUT ALSO
 /*           THE STARRED CLASS OF ERIC DESCRIPTORS ASSOCIATED
 /*           WITH THE CORRESPONDING STARRED QUANDRY DESCRIPTOR.
 /*           LOGICALLY, A QUANDRY DESCRIPTOR IN A READ STATEMENT
 /*           MAY BE REPLACED WITH ALL ERIC DESCRITORS WHICH ARE
 /*           ASSOCIATED WITH IT, SEPARATED BY $OR (×) OPERATORS.
 /*      INDX IS THE ISAM FILE KEYED ON ERIC DESCRIPTORS.  IT
 /*           SERVES TWO PURPOSES:  TO EXTEND A QUANDRY DESCRIPTOR
 /*           TO AN ENTIRE CLASS OF ERIC DESCRIPTORS, AND TO
 /*           POINT INTO THE CORRESPONDING MAP FILE ENTRIES.
 /*           IT ALSO CONTAINS A COUNT OF THE NUMBER OF CITATIONS
 /*           TO WHICH THE DESCRIPTOR HAS BEEN ASSIGNED.
 /*      MAP IS THE REGIONAL(1) FILE WHICH CONTAINS THE KEYS OF
 /*           THE ACTUAL ERIC CITATIONS (WHICH ARE IN FILE(ERIC)).
 /*           TO SAVE SPACE IN THE FILE, IT IS STORED AS A
 /*           CONTINUOUS STREAM OF KEYS, DIVIDED INTO FIXED-LENGTH
 /*           BLOCKS.  INDX ENTRIES THEREFORE MUST SPECIFY BOTH THE
 /*           THE BLOCK NUMBER (MAP_KEY) AND THE OFFSET WITHIN
 /*           THE BLOCK OF THE FIRST KEY FOR THE DESCRIPTOR
 /*           (MAP_SUBSCRIPT).  KEYS FOR THE DESCRIPTOR OCCUR
 /*           IN FILE(MAP) IN ASCENDING ORDER, AND A SPECIAL
 /*           KEY IS USED TO INDICATE LOGICAL ENDFILE FOR A
 /*           DESCRIPTOR.  MAP ENTRIES MUST BE INITIALIZED BY
 /*           THE SETTREE PROCEDURE BEFORE EVALUATING THE TREE.
1/*      PHEAD IS SET TO POINT TO A TREE CONSTRUCTED TO REPRESENT
 /*           THE LOGICAL EXPRESSION OF THE READ STATEMENT.
 /*           OPERATORS ARE REPRESENTED AS NODES OF THE TREE.
 /*           EACH NODE CONTAINS A FIRST-SON AND A NEXT-SIBLING POINTER,
 /*           AND A FIELD (MSELECT) WHICH WILL LATER BE USED
 /*           TO INDICATE THE NEXT ERIC RECORD SATISFYING THE SUBTREE.
 /*           DESCRIPTORS ARE REPRESENTED AS LEAVES OF THE TREE.
 /*           THE SPECIAL NODE_TYPE 1000 IS USED TO IDENTIFY A LEAF,
 /*           BUT NODE POINTERS ARE INCLUDED FOR CONSISTENCY.  THE
 /*           INDX ENTRY AND THE CURRENT MAP ENTRY FOR THE DESCRIPTOR
 /*           RESIDE IN THE LEAF.
 /*      COMPILATION IS BASED ON OPERATOR PRECEDENCE.  CALLS TO
 /*           GET_DESCRIPTOR ALTERNATE WITH CALLS TO GET_OPERATOR.
 /*           GET_DESCRIPTOR ISOLATES THE NEXT DESCRIPTOR AND
 /*           USES BUILD_LEAF TO INITIALIZE A LEAF FOR IT AND
 /*           STORE THE ADDRESS OF THE LEAF IN OPERAND_STACK.
 /*           GET_OPERATOR RETURNS THE NEXT OPERATOR.  DEPENDING
 /*           ON THE PRIORITY OF THE CURRENT AND PREVIOUS OPERATORS,
 /*           THE CURRENT OPERATOR WILL STACKED OR THE PREVIOUS
 /*           OPERATOR WILL BE POPPED FROM THE STACK AND BUILD_NODE
 /*           WILL BE CALLED TO BUILD AN OPERATOR NODE OVER THE TOP TWO
 /*           OPERANDS OF THE STACK.  BUILD_NODE WILL EITHER BUILD
 /*           THE NODE OR, IF THE OPERATOR IS ONE OF A SEQUENCE OF
 /*           IDENTICAL OPERATORS, CHAIN THE SECOND OPERAND ON AS A
 /*           LAST SON TO MINIMIZE THE HEIGHT OF THE TREE (AND HENCE
 /*           THE DEGREE OF RECURSION REQUIRED TO EVALUATE IT).
 /*      REPLACEMENT OF DESCRIPTORS BY CLASSES OF DESCRIPTORS IS
 /*           HANDLED TRANSPARENTLY BY GET_DESCRIPTOR AND GET_OPERATOR.
 /*           A BIT (DESCRIPTOR_AVAILABLE) IS MAINTAINED TO
 /*           INDICATE THAT AN ADDITIONAL DESCRIPTOR HAS BEEN FOUND
 /*           IN FILE(INDX).  SO LONG AS THIS IS ON, GET_OPERATOR
 /*           WILL RETURN $OR AND GET_DESCRIPTOR WILL SEQUENTIALLY READ
 /*           FILE(INDX) TO DETERMINE THE NEXT DESCRIPTOR.  WHEN
 /*           THE MATCHING DESCRIPTORS ON THE FILE ARE EXHAUSTED, THE
 /*           QUANDRY DESCRIPTOR IS EXAMINED.  IF IT IS AN UNSTARRED
 /*           DESCRIPTOR, IT IS CONVERTED TO A STARRED DESCRIPTOR AND
 /*           THE PROCESS CONTINUES UNTIL THE STARRED DESCRIPTORS ARE
 /*           EXHAUSTED.  IT SHOULD BE NOTED THAT STARRED ERIC
 /*           MAY EXIST WITHOUT THE CORRESPONDING UNSTARRED
 /*           DESCRIPTORS, AAND VICE_VERSA.  */
1ON AREA ERRCODE=04011;
0     PHEAD=NULL;
      DO WHILE(ALLOCATION(OPERAND_STACK)>0);FREE OPERAND_STACK;END;
      DO WHILE(ALLOCATION(OPERATOR_STACK)>0);FREE OPERATOR_STACK;END;
      IF ALLOCATION(READ_STMT_AREA)=0×CURRENT_AREA_SIZE^=OPT.READSIZE
         THEN DO;
              FREE READ_STMT_AREA;
              CURRENT_AREA_SIZE=0;
              ALLOCATE READ_STMT_AREA AREA(OPT.READSIZE);
              CURRENT_AREA_SIZE=OPT.READSIZE;
         END;
      READ_STMT_AREA=EMPTY;
0     ALLOCATE OPERATOR_STACK INITIAL(0);
      DO WHILE(SCANPTR<=LENGTH(STMT));
         CALL GET_DESCRIPTOR;
         CALL GET_OPERATOR;
         DO WHILE(OPERATOR_STACK>=OPERATOR);
              CALL BUILD_NODE;
              FREE OPERATOR_STACK;
         END;
         ALLOCATE OPERATOR_STACK INITIAL((OPERATOR));
      END;
0     PHEAD=TREE_HEAD; /* SET AT LAST MOMENT TO ENSURE TREE COMPLETE */
1BUILD_LEAF:  PROCEDURE;
0DECLARE
      P POINTER;
0     ALLOCATE LEAF IN(READ_STMT_AREA)SET(P);
      P->LEAF.INDX_ENTRY=INDX_ENTRY;
      ALLOCATE OPERAND_STACK;
      TREE_HEAD,OPERAND_STACK=P;
0END BUILD_LEAF;
-
-BUILD_NODE:  PROCEDURE;
0DECLARE
      (P,P1,P2)POINTER;
0     P2=OPERAND_STACK;
      FREE OPERAND_STACK;
      IF 0B THEN OPERAND_STACK=OPERAND_STACK; /* CIRCUMVENTION */
      P1=OPERAND_STACK;
      IF P1->NODE_TYPE=OPERATOR_STACK
         THEN DO;
              TREE_HEAD=P1;
              DO P=P1->PDOWN REPEAT(P->PACROSS)WHILE(P->PACROSS^=NULL);
              END;
              P->PACROSS=P2;
         END;
         ELSE DO;
              ALLOCATE NODE IN(READ_STMT_AREA)SET(P);
              P->PDOWN=P1;
              P1->PACROSS=P2;
              P->NODE_TYPE=OPERATOR_STACK;
              TREE_HEAD,OPERAND_STACK=P;
         END;
0END BUILD_NODE;
1GET_OPERATOR:  PROCEDURE;
0     IF DESCRIPTOR_AVAILABLE
         THEN OPERATOR=$OR;
         ELSE DO;
              OPERATOR=INDEX(SCNDOPS,SUBSTR(STMT,SCANPTR,1));
              IF OPERATOR=0
                   THEN ERRCODE=04010;
              SCANPTR=SCANPTR+1;
         END;
0END GET_OPERATOR;
1GET_DESCRIPTOR:  PROCEDURE;
0DECLARE
      SPECIFIED_DESCRIPTOR_AVAILABLE BIT(1),
      GEN_KEY CHAR(32)VARYING STATIC;
0     IF ^DESCRIPTOR_AVAILABLE
         THEN DO;
              GEN_KEY=SUBSTR(STMT,SCANPTR,
                   VERIFY(SUBSTR(STMT,SCANPTR),
                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ .,''*1234567890')-1);
              IF LENGTH(GEN_KEY)<4
                   THEN ERRCODE=04012;
              SPECIFIED_DESCRIPTOR_AVAILABLE=1B;
              ON KEY(INDX)SPECIFIED_DESCRIPTOR_AVAILABLE=0B;
              READ FILE(INDX)INTO(INDX_ENTRY)KEY(GEN_KEY);
              IF SPECIFIED_DESCRIPTOR_AVAILABLE
                   THEN SCANPTR=SCANPTR+LENGTH(GEN_KEY);
                   ELSE DO;
                        IF SUBSTR(GEN_KEY,1,1)='*'
                             THEN ERRCODE=04013;
                        ON KEY(INDX)ERRCODE=04113;
                        GEN_KEY='*'××GEN_KEY;
                        READ FILE(INDX)INTO(INDX_ENTRY)KEY(GEN_KEY);
                        SCANPTR=SCANPTR+LENGTH(GEN_KEY)-1;
                   END;
         END;
0     CALL BUILD_LEAF;
0     READ FILE(INDX)INTO(INDX_ENTRY);
      DESCRIPTOR_AVAILABLE=
         SUBSTR(INDX_ENTRY.DESCRIPTOR,1,LENGTH(GEN_KEY))=GEN_KEY;
0     IF ^DESCRIPTOR_AVAILABLE THEN IF SUBSTR(GEN_KEY,1,1)^='*'
         THEN DO;
              DESCRIPTOR_AVAILABLE=1B;
              GEN_KEY='*'××GEN_KEY;
              ON KEY(INDX)DESCRIPTOR_AVAILABLE=0B;
              READ FILE(INDX)INTO(INDX_ENTRY)KEY(GEN_KEY);
         END;
0END GET_DESCRIPTOR;
0END CMPRD;
