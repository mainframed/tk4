 (CHECK(ERRCODE)):  CMPOPT:  PROCEDURE(STTYPE,STMT)REORDER;
 %INCLUDE DCLSTMT;
 %INCLUDE EXTVAR,EXTRTN,SYSPRINT,
1     DCLOPT,DCLSBOPT,DCLPROPT;
0DECLARE
   01 P(25),
      02 NAME CHAR(8),
      02 STRING CHAR(8),
      02 STRING_LENGTH FIXED BINARY(15),
      02 NUMBER FIXED BINARY(31),
      02 SCANPTR FIXED BINARY(15),
      02 ATTRIBUTES ALIGNED,
         03 SUBPARMS BIT(1),
         03 NUMERIC BIT(1);
0DECLARE
      (HBOUND,LENGTH,MAX,MIN,ONSOURCE,SUBSTR,VERIFY)BUILTIN,
      NUMBER_OF_PARMS FIXED BINARY(31)INITIAL(0),
      I FIXED BINARY(31)STATIC,
      NAME CHAR(8)STATIC,
      STRING CHAR(8)STATIC,
      STRING_LENGTH FIXED BINARY(15)STATIC,
      NUMBER FIXED BINARY(31)STATIC;
-/*    CMPOPT IS CALLED TO COMPILE OPTION STATEMENTS.
 /*       CALLING ARGUMENTS ARE STTYPE (UNUSED) AND STMT.
 /*            THE FORM OF STMT IS
 /*                 OPTIONS OPTION_LIST#
 /*            WHERE THE OPTION_LIST BEGINS IN COLUMN 9 AND
 /*            CONSISTS OF OPTIONS OF THE FORM
 /*                 KEYWORD    OR     KEYWORD(VALUE)
 /*            SEPARATED BY BLANKS OR COMMAS.  BLANKS SHOULD ONLY
 /*            BE USED AS OPTION SEPARATORS OR AS SIGNIFICANT
 /*            BLANKS WITHIN CHARACTER VALUES.  THIS IS NOT
 /*            RIGIDLY ENFORCED.
 /*       THE STATEMENT IS SCANNED BY THE GENERAL PURPOSE
 /*            ROUTINE PARSE_PARMS AND THE TOKENS ARE STORED
 /*            IN THE ARRAY P OF STRUCTURES.  AT THIS TIME,
 /*            VALUES WHICH LOOK LIKE NUMBERS ARE CONVERTED
 /*            TO NUMERIC FORM AND CONVERSION ERRORS DIAGNOSED.
 /*            THIS COULD BE A PROBLEM WITH ARBITRARY NON-NUMERIC
 /*            PARAMETERS (E. G., '9  9').
 /*       THE VALUES IN P ARE THEN MOVED INTO THE APPROPRIATE
 /*            OPTIONS STRUCTURE:  SBOPT FOR SUBMIT OPTIONS,
 /*            PROPT FOR PRINT OPTIONS, OR OPT FOR ALL OTHER
 /*            OPTIONS.  DIAGNOSTICS FOR INVALID OR MISSING
 /*            PARAMETERS ARE ISSUED.
 /*       CMPOPT DOES NOT USE THE STANDARD ERROR INTERFACE.
 /*            ERRORS ARE TRAPPED AND A MESSAGE IS ISSUED
 /*            THROUGH THE PRTERR SUBROUTINE.  THE REMAINDER
 /*            OF THE STATEMENT IS PROCESSED RATHER THAN
 /*            BEING DISCARDED.  THIS MEANS THAT ONLY THE
 /*            INCORRECT OPTIONS NEED BE REENTERED. */
1ON CHECK(ERRCODE)(NOCHECK(ERRCODE)):  CALL PRTERR(STMT,ERRCODE);
0     CALL PARSE_PARMS;
-     DO I=1 TO NUMBER_OF_PARMS;
0        SCANPTR=P.SCANPTR(I);
         NAME=P.NAME(I); /* COPYING OVER REDUCES SIZE OF OBJ PGM */
         STRING=P.STRING(I);
         STRING_LENGTH=P.STRING_LENGTH(I);
         NUMBER=P.NUMBER(I);
0        IF ^P.SUBPARMS(I)
              THEN ERRCODE=06015;
              ELSE SELECT(P.NAME(I));
                   WHEN('USERID  ','JOBNAME ','ENV     ',
                        'BIN     ','REMOTE  ','DEST    ',
                        'LINES   ')
                        CALL SET_PARM;
                   OTHERWISE IF ^P.NUMERIC(I)
                        THEN ERRCODE=06115;
                        ELSE CALL SET_PARM;
              END;
      END;
1SET_PARM:  PROCEDURE;
0/* ERROR CODES 06215 AND 16016 ARE USED WITHOUT CHANGING
 /* THE MIDDLE DIGIT WHEN THE ERROR LOCATION CAN BE
 /* DETERMINED FROM THE SELECT VARIABLE. */
0        SELECT(P.NAME(I));
0             WHEN('LINESIZE')
                   PROPT.LINESIZE=MAX(NUMBER,20);
0             WHEN('SKIP    ')
                   PROPT.SKIP=MAX(NUMBER,1);
0             WHEN('SPACE   ')
                    PROPT.SPACE=MAX(NUMBER,1);
0             WHEN('PAGESIZE')
                   PROPT.PAGESIZE=MIN(NUMBER,59);
0             WHEN('COLUMN  ')
                   IF NUMBER>30
                        THEN ERRCODE=06215;
                        ELSE PROPT.COLUMN=NUMBER;
0             WHEN('PAGENO  ')
                   PROPT.PAGENUM=NUMBER;
0             WHEN('SEARCH  ')
                   PROPT.SEARCH=NUMBER;
0             WHEN('READSIZE')
                   IF NUMBER<5000×NUMBER>64000×
                        (NUMBER>20000&ENV.TSO)
                        THEN ERRCODE=06215;
                        ELSE OPT.READSIZE=NUMBER;
0             WHEN('CONTROL ')
                   IF NUMBER^=314159
                        THEN ERRCODE=06016;
                        ELSE OPT.CONTROL=NUMBER;
0             WHEN('READLIM ')
                   IF OPT.CONTROL=0
                        THEN ERRCODE=06016;
                        ELSE OPT.READLIM=NUMBER;
1             WHEN('PRINTLIM')
                   IF OPT.CONTROL=0&NUMBER>40&ENV.TSO
                        THEN ERRCODE=06016;
                        ELSE OPT.PRINTLIM=NUMBER;
0             WHEN('USERID  ')
                   IF STRING_LENGTH<5×STRING_LENGTH>7
                        THEN ERRCODE=06215;
                        ELSE SBOPT.USERID=STRING;
0             WHEN('ENV     ')
                   IF OPT.CONTROL=0
                        THEN ERRCODE=06016;
                   ELSE IF STRING='TSO     '
                        THEN DO;
                             ENV.TSO=1B;ENV.BATCH=0B;
                        END;
                   ELSE IF STRING='BATCH   '
                        THEN DO;
                             ENV.BATCH=1B;ENV.TSO=0B;
                        END;
                   ELSE ERRCODE=06215;
0             WHEN('BIN     ')
                   IF STRING_LENGTH<2×STRING_LENGTH>4×
                        P.NUMERIC(I)
                        THEN ERRCODE=06215;
                        ELSE SBOPT.BIN=STRING;
0             WHEN('REMOTE  ','DEST    ') /* REMOTE IS OLD KEYWORD */
                   IF STRING_LENGTH<4×STRING_LENGTH>5×
                        (STRING^='LOCAL   '&SUBSTR(STRING,1,3)^='RMT')
                        THEN ERRCODE=06215;
                        ELSE SBOPT.REMOTE=STRING;
0             WHEN('LINES   ')
                   SBOPT.LINES=STRING;
0             WHEN('TIME    ')
                   SBOPT.TIME=NUMBER;
0             WHEN('FORMS   ')
                   SBOPT.FORMS=NUMBER;
0             WHEN('JOBNAME ')
                   SBOPT.JOBNAME=STRING;
0             OTHERWISE ERRCODE=06116;
         END;
0END SET_PARM;
1PARSE_PARMS:  PROCEDURE;
0DECLARE
      INVALID_FIELD BIT(1)STATIC,
      I FIXED BINARY(31);
0     SCANPTR=9;
      SCANPTR=NONBLANK_COLUMN;
      DO I=1 TO HBOUND(P.NAME,1)WHILE(SCANPTR<LENGTH(STMT));
         P.SCANPTR(I)=SCANPTR;
         CALL FIELD(P.NAME(I),0);
         IF INVALID_FIELD
              THEN ERRCODE=06216;
         P.STRING(I)='';P.NUMBER(I)=0;P.ATTRIBUTES(I)=0B;
         IF SUBSTR(STMT,SCANPTR,1)='('
              THEN CALL PROCESS_FIELD;
         SCANPTR=NONBLANK_COLUMN;
      END;
0     NUMBER_OF_PARMS=I-1;
-FIELD:  PROCEDURE(FIELD,FIELD_LENGTH);
0DECLARE
      FIELD CHAR(*),
      (FIRST,FIELD_LENGTH)FIXED BINARY(15);
0     SCANPTR,FIRST=NONBLANK_COLUMN;
      INVALID_FIELD=0B;
      FIELD_LENGTH=VERIFY(SUBSTR(STMT,SCANPTR),
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ-0123456789')-1;
      SCANPTR=SCANPTR+MAX(FIELD_LENGTH,1);
      FIELD=SUBSTR(STMT,FIRST,FIELD_LENGTH);
      IF FIELD_LENGTH=0×FIELD_LENGTH>8
         THEN INVALID_FIELD=1B;
0END FIELD;
-NONBLANK_COLUMN:  PROCEDURE RETURNS(FIXED BINARY(31));
0     RETURN(SCANPTR+VERIFY(SUBSTR(STMT,SCANPTR),' ,')-1);
0END NONBLANK_COLUMN;
1PROCESS_FIELD:  PROCEDURE;
0ON CONVERSION BEGIN;
      P.NUMERIC(I)=0B;
      ONSOURCE='0';
      SCANPTR=SCANPTR-5; /* FOR BETTER DIAGNOSTICS */
      ERRCODE=06315;
      SCANPTR=SCANPTR+5;
 END;
0     SCANPTR=SCANPTR+1; /* SKIP OVER '(' */
      P.SUBPARMS(I)=1B;
      SCANPTR=NONBLANK_COLUMN;
0     CALL FIELD(P.STRING(I),P.STRING_LENGTH(I));
      P.NUMERIC(I)=0B;
0     IF INVALID_FIELD
         THEN ERRCODE=06415;
         ELSE IF VERIFY(P.STRING(I),'0123456789- ')=0
              THEN DO;
                   P.NUMERIC(I)=1B;
                   P.NUMBER(I)=P.STRING(I);
              END;
0     SCANPTR=NONBLANK_COLUMN;
      IF SUBSTR(STMT,SCANPTR,1)=')'
         THEN SCANPTR=SCANPTR+1;
         ELSE IF ^INVALID_FIELD
              THEN ERRCODE=06515;
0END PROCESS_FIELD;
0END PARSE_PARMS;
0END CMPOPT;
