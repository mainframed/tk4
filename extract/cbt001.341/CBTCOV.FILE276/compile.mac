 (CHECK(ERRCODE)):  COMPILE:  PROCEDURE(STTYPE,STMT)REORDER;
0%INCLUDE DCLSTMT;
0%INCLUDE DCLOPT,DCLPROPT,EXTVAR,EXTVAR2,
1     DCLPHEAD,EXTRTN3,DCLRTRAN,SYSPRINT;
0DECLARE
      (INDEX,LENGTH,MOD,NULL,SUBSTR,UNSPEC)BUILTIN;
0DECLARE
      P999 PICTURE'999',
      SAVE BIT(1)STATIC ALIGNED INITIAL(0B),
      FIELD FIXED BINARY(31),
      VALID_FIELD_TYPES CHAR(140)STATIC INITIAL(
 'ACCNUM    CHNUM     DATE      TITLE     AUTHOR    DESCRIPTORIDENTIFIER
 #NOTE     #ISSUE    #ABSTRACT #AVAIL    JOURNAL   #INST     #SPONSOR  '
 ); /* A # IS PREFIXED TO PREVENT A MATCH ON CERTAIN FIELDS */
1/*   COMPILE PASSES CONTROL TO A STATEMENT PROCESSOR BASED ON
 /*      STATEMENT TYPE.
 /*      SCANPTR IS SET TO POINT PAST THE STATEMENT TYPE
 /*           AND CONTROL IS PASSED TO THE APPROPRIATE ROUTINE.
 /*           COMPILE DOES ADDITIONAL PROCESSING FOR CERTAIN
 /*           STATEMENTS.
 /*      READ STATEMENTS, FIELD STATEMENTS, AND SAVED PRINT/NOPRINT
 /*           STATEMENTS ARE SAVED IN SBSTMTS BY COMPILE USING THE
 /*           EXTERNAL ROUTINE SBSAVE.  IF THE CHANGE OPTION IS
 /*           IN EFFECT, STATEMENTS ARE TO BE SAVED EVEN IF INCORRECT.
 /*           THIS IS ACCOMPLISHED BY SAVING STMT BEFORE CALLING
 /*           THE ASSOCIATED ROUTINE.  THE FLAG UNCHECKED_STMT_SAVED
 /*           IS SET SO THAT THE QERROR ON-UNIT WILL KNOW TO SET
 /*           THE ERROR_IN_PROGRAM_TEXT FLAG. UPON NORMAL RETURN
 /*           FROM THE STATEMENT PROCESSOR, UNCHECKED_STMT_SAVED
 /*           IS CLEARED.  IF CHANGE IS NOT IN EFFECT, STATEMENTS
 /*           ARE SAVED ONLY UPON NORMAL RETURN FROM THEIR
 /*           STATEMENT PROCESSOR.  (ABNORMAL RETURN VIA ON-UNIT
 /*           IS TO THE THE MAIN PROCEDURE.)
 /*      WHEN THE CHANGE OPTION IS IN EFFECT, IS IS POSSIBLE THAT
 /*           SBSTMTS CONTAINS INCORRECT STATEMENTS.  THE FLAG
 /*           RETRANS.ERROR_IN_PROGRAM_TEXT IS TESTED BY COMPILE
 /*           TO RECOGNIZE THIS CONDITION AND PROHIBIT THE EXECUTION
 /*           OF GO, SUBMIT, AND TALLY STATEMENTS UNTIL THE ERROR IS
 /*           CORRECTED.
 /*      AFTER SUBMIT AND GO STATEMENTS, COMPILE AUTOMATICALLY
 /*           INCREMENTS THE SEARCH NUMBER, PROPT.SEARCH.
 /*      FIELD STATEMENTS ARE PASSED TO CMPFLD.  A STATEMENT
 /*           TYPE CODE IS PASSED FOR USE AS A SUBSCRIPT.
 /*           THE ORDER OF THE STATEMENT TYPE IN THE STRING
 /*           VALID_FIELD_TYPES MUST THEREFORE AGREE WITH THE
 /*           ORDER ASSUMED BY THE TABLES IN CMPFLD.
 /*           CERTAIN FIELDS CANNOT BE SPECIFIED BECAUSE THEY ARE
 /*           STORED IN COMPRESSED FORMAT.  THE CORRESPONDING
 /*           FIELD NAMES ARE STORED IN VALID_STATEMENT_TYPES FOR
 /*           PLACE HOLDERS AND FOR DOCUMENTATION, BUT ARE PREFIXED
 /*           WITH A '#' TO PREVENT A MATCH. */
1     SCANPTR=INDEX(STMT,' ')+1;
      IF SCANPTR=1
         THEN SCANPTR=LENGTH(STMT);
0     SELECT(STTYPE);
0     WHEN('READ      ')DO;
         OBJCODE,LITPOOL='';
         SBSTMTS='';
         IF OPT.CHANGE
              THEN DO;
                   CALL SBSAVE(STTYPE,STMT);
                   UNCHECKED_STMT_SAVED=1B;
              END;
         IF RETRANSLATE_IN_PROGRESS&^RETRANSLATE_READ
              THEN;
              ELSE DO;
                   PHEAD=NULL;
                   RETRANSLATE_READ=1B;
                   CALL CMPRD(STTYPE,STMT);
                   RETRANSLATE_READ=0B;
              END;
         IF ^OPT.CHANGE
              THEN CALL SBSAVE(STTYPE,STMT);
         END;
0     WHEN('CHANGE    ','COMPLETE  ')DO;
         CALL CMPCHNG(STTYPE,STMT,P999);
         SCANPTR=5; /* FOR CMPLST TO "VERIFY" STATEMENT */
         CALL CMPLST('LIST      ','LIST '××P999××'#');
         END;
0     WHEN('COMMENT   ')CALL SBSAVE(STTYPE,STMT);
0     WHEN('DELETE    ','RETAIN    ')CALL CMPLST(STTYPE,STMT);
0     WHEN('GO        ')DO;
         IF ERROR_IN_PROGRAM_TEXT
              THEN ERRCODE=03024;
         CALL PRINT_SEARCH_ID;
         CALL EXECUTE_SEARCH;
         PROPT.SEARCH=PROPT.SEARCH+1;
         END;
0     WHEN('LIST      ')CALL CMPLST(STTYPE,STMT);
0     WHEN('LISTDICT  ')CALL LSTDICT(STTYPE,STMT);
1     WHEN('LISTOBJ   ')CALL LSTOBJ(OBJCODE,LITPOOL);
0     WHEN('LISTTIME  ')CALL PRTITLE;
0     WHEN('LISTTREE  ')CALL LSTTREE(PHEAD);
0     WHEN('NOPRINT   ','PRINT     ')DO;
         CALL CMPPRT(STTYPE,STMT,SAVE);
         IF SAVE
              THEN CALL SBSAVE(STTYPE,STMT);
         END;
0     WHEN('OPTIONS   ')CALL CMPOPT(STTYPE,STMT);
0     WHEN('SUBMIT    ')DO;
         IF ERROR_IN_PROGRAM_TEXT
              THEN ERRCODE=03124;
         CALL PRINT_SEARCH_ID;
         CALL SBMIT;
         PROPT.SEARCH=PROPT.SEARCH+1;
         END;
0     WHEN('TALLY     ')
         IF ERROR_IN_PROGRAM_TEXT
              THEN ERRCODE=03224;
              ELSE CALL EXECUTE_SEARCH;
0     OTHERWISE DO;
         IF OPT.CHANGE
              THEN DO;
                   CALL SBSAVE(STTYPE,STMT);
                   UNCHECKED_STMT_SAVED=1B;
              END;
         FIELD=INDEX(VALID_FIELD_TYPES,STTYPE);
         IF MOD(FIELD,LENGTH(STTYPE))^=1
              THEN DO;
                   SCANPTR=1;
                   ERRCODE=03004;
              END;
         FIELD=FIELD/LENGTH(STTYPE)+1;
         CALL CMPFLD(STTYPE,STMT,FIELD);
         IF ^OPT.CHANGE
              THEN CALL SBSAVE(STTYPE,STMT);
         END;
      END;
0     UNCHECKED_STMT_SAVED=0B;
1PRINT_SEARCH_ID:  PROCEDURE;
      PUT FILE(SYSPRINT)SKIP(2)EDIT
          ('THIS SEARCH HAS BEEN ASSIGNED THE IDENTIFIER',SEARCH)
          (A,X(1),P'9999');
 END PRINT_SEARCH_ID;
-EXECUTE_SEARCH:  PROCEDURE;
0DECLARE
      RETURN_CODE CHAR(2);
      UNSPEC(RETURN_CODE)='0000011111111110'B; /* BR 14 */
0     IF LENGTH(OBJCODE)<=LENGTH(RETURN_CODE) /* NO FIELD STMTS */
         THEN OBJCODE=RETURN_CODE;
         ELSE SUBSTR(OBJCODE,LENGTH(OBJCODE)-2,1)='0';
              /* FORCE BC 15,0(,14) IF SUCCESSFUL */
      CALL EXSRCH(STTYPE);
 END EXECUTE_SEARCH;
0END COMPILE;
