 (CHECK(ERRCODE)):  SCNPARM:
     PROCEDURE(STMT,PARM,NUMBER_OF_PARMS,IER)REORDER;
 %INCLUDE DCLSTMT,DCLPARM;
 %INCLUDE EXTVAR,EXTRTN,SYSPRINT;
1DECLARE
      IER FIXED BINARY(31);
0DECLARE
      (HBOUND,INDEX,LENGTH,MAX,ONSOURCE,SUBSTR,VERIFY)BUILTIN,
      INVALID_FIELD BIT(1)STATIC,
      I FIXED BINARY(31);
-/*   SCNPARM IS CALLED TO SCAN OPTION, LIST, RETAIN, DELETE,
 /*   PRINT, AND NOPRINT STATEMENTS.
 /*      CALLING ARGUMENTS ARE STMT, PARMS, NUMBER_OF_PARMS, AND IER.
 /*           STMT IS A VARYING CHARACTER STRING OF THE FORM
 /*                STTYPE OPTION_LIST#
 /*           WHERE THE OPTION_LIST CONSISTS OF STRINGS
 /*           OF THE FORM
 /*                KEYWORD    OR    KEYWORD(VALUE)
 /*           SEPARATED BY BLANKS OR COMMAS, AS IN TSO.
 /*           SCANPTR IS ASSUMED TO POINT PAST THE STTYPE AT ENTRY.
 /*      AS THE STRING IS SCANNED, TOKENS ARE MOVED TO THE ARRAY
 /*           PARM OF STRUCTURES.  PARM.NAME CONTAINS THE
 /*           KEYWORDS THEMSELVES.  BEFORE KEYWORDS ARE ADDED,
 /*           THEY ARE CHECKED FOR LENGTH AND VALID CHARACTERS.
 /*           IF A KEYWORD HAS A VALUE SPECIFIED, PARM.SUBPARM
 /*           IS TURNED ON, THE CHARACTER VALUE IS MOVED TO
 /*           PARM.STRING, AND ITS LENGTH IS SAVED IN
 /*           PARM.STRING_LENGTH.  NAME AND STRING ARE LIMITED
 /*           TO 12 CHARACTERS.  IF A STRING APPEARS TO BE A
 /*           NUMBER, PARM.NUMERIC IS TURNED ON AND THE NUMERIC
 /*           VALUE IS SAVED IN PARM.NUMBER.  THIS MAY CAUSE
 /*           PROBLEMS IF GENERALIZED ALPHAMERIC PARAMETERS
 /*           (SUCH AS '9  9') ARE EVER NEEDED.  SINCE A
 /*           NUMERIC PARAMETER CAN NOT HAVE A PARENTHISIZED VALUE,
 /*           E. G., 123(4), NUMBER CAN BE USED TO STORE THE FIXED
 /*           BINARY EQUIVALENT OF BOTH NUMERIC PARAMETERS AND
 /*           NUMERIC SUBPARAMETERS OF NON-NUMERIC PARAMETERS.
 /*      NUMBER_OF_PARMS IS SET TO THE NUMBER OF PARAMETERS
 /*           STORED IN THE ARRAY PARMS.
 /*      IER IS SET TO THE NUMBER OF ERRORS DIAGNOSED.
 /*           SCNPARM DOES NOT USE THE STANDARD ERROR INTERFACE.
 /*           ERRORS ARE TRAPPED AND A MESSAGE IS ISSUED
 /*           THROUGH THE PRTERR SUBROUTINE.  THE REMAINDER
 /*           OF THE STATEMENT IS PROCESSED RATHER THAN BEING
 /*           DISCARDED.  THE CALLING ROUTINE CAN EITHER PROCESS
 /*           THE CORRECT PARAMETERS OR REJECT THE STATEMENT. */
1ON CHECK(ERRCODE)BEGIN;
      INVALID_FIELD=1B;
      (NOCHECK(ERRCODE)):CALL PRTERR(STMT,ERRCODE);
      IER=IER+1;
 END;
-ON CONVERSION BEGIN;
      ONSOURCE='0';
      SCANPTR=SCANPTR-5; /* FOR BETTER DIAGNOSTICS */
      ERRCODE=09016;
      SCANPTR=SCANPTR+5;
 END;
-     IER=0;
      SCANPTR=NONBLANK_COLUMN;
      I=1;
0     DO WHILE(I<=HBOUND(PARM.NAME,1)&SCANPTR<LENGTH(STMT));
         PARM.SCANPTR(I)=SCANPTR;
         PARM.STRING(I)='';PARM.STRING_LENGTH(I),PARM.NUMBER(I)=0;
         PARM.ATTRIBUTES(I)=0B;
         CALL FIELD(PARM.NAME(I),0);
0        SELECT;
              WHEN(INVALID_FIELD)ERRCODE=09116;
0             WHEN(VERIFY(PARM.NAME(I),'0123456789- ')=0)DO;
                   IF SUBSTR(STMT,SCANPTR,1)='('
                        THEN DO;
                             SCANPTR=PARM.SCANPTR(I);
                             ERRCODE=09015;
                             SCANPTR=PAST_PAREN;
                        END;
                        ELSE DO;
                             PARM.NUMBER(I)=PARM.NAME(I);
                             IF INVALID_FIELD
                                  THEN ERRCODE=09216;
                                  ELSE PARM.NUMERIC(I)=1B;
                        END;
                   END;
0             OTHERWISE
                   IF SUBSTR(STMT,SCANPTR,1)='('
                        THEN CALL PROCESS_SUBPARM;
         END;
0        IF ^INVALID_FIELD
              THEN I=I+1;
         SCANPTR=NONBLANK_COLUMN;
0     END;
0     NUMBER_OF_PARMS=I-1;
0     DO I=I TO HBOUND(PARM.NAME,1);
         PARM.NAME(I),PARM.STRING(I)=(12)' ';
         PARM.STRING_LENGTH(I),PARM.NUMBER(I),PARM.SCANPTR(I)=0;
         PARM.ATTRIBUTES(I)=0B;
      END;
1FIELD:  PROCEDURE(FIELD,FIELD_LENGTH);
0DECLARE
      FIELD CHAR(*),
      (FIRST,FIELD_LENGTH)FIXED BINARY(15);
0     SCANPTR,FIRST=NONBLANK_COLUMN;
      INVALID_FIELD=0B;
      FIELD_LENGTH=VERIFY(SUBSTR(STMT,SCANPTR),
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ-0123456789')-1;
      SCANPTR=SCANPTR+MAX(FIELD_LENGTH,1);
      FIELD=SUBSTR(STMT,FIRST,FIELD_LENGTH);
      IF FIELD_LENGTH=0×FIELD_LENGTH>12
         THEN INVALID_FIELD=1B;
0END FIELD;
-NONBLANK_COLUMN:  PROCEDURE RETURNS(FIXED BINARY(31));
0     RETURN(SCANPTR+VERIFY(SUBSTR(STMT,SCANPTR),' ,')-1);
0END NONBLANK_COLUMN;
-PAST_PAREN:  PROCEDURE RETURNS(FIXED BINARY(31));
0DECLARE
      I FIXED BINARY(31);
0     I=INDEX(SUBSTR(STMT,SCANPTR),')');
      IF I=0
         THEN I=INDEX(SUBSTR(STMT,SCANPTR),' ');
      IF I=0
         THEN I=LENGTH(STMT)-SCANPTR;
      RETURN(SCANPTR+I);
0END PAST_PAREN;
1PROCESS_SUBPARM:  PROCEDURE;
0ON CONVERSION BEGIN;
      ONSOURCE='0';
      SCANPTR=SCANPTR-5; /* FOR BETTER DIAGNOSTICS */
      ERRCODE=09115;
      SCANPTR=SCANPTR+5;
 END;
0     SCANPTR=SCANPTR+1; /* SKIP OVER '(' */
      PARM.SUBPARMS(I)=1B;
      SCANPTR=NONBLANK_COLUMN;
0     CALL FIELD(PARM.STRING(I),PARM.STRING_LENGTH(I));
      PARM.NUMERIC(I)=0B;
0     IF INVALID_FIELD
         THEN ERRCODE=09215;
         ELSE IF VERIFY(PARM.STRING(I),'0123456789- ')=0
              THEN DO;
                   PARM.SUBNUMERIC(I)=1B;
                   PARM.NUMBER(I)=PARM.STRING(I);
              END;
0     SCANPTR=NONBLANK_COLUMN;
      IF SUBSTR(STMT,SCANPTR,1)=')'
         THEN SCANPTR=SCANPTR+1;
         ELSE IF ^INVALID_FIELD
              THEN ERRCODE=09315;
0END PROCESS_SUBPARM;
0END SCNPARM;
