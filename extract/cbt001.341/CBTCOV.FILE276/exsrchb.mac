*PROCESS INTERRUPT;
 EXSRCH:  PROCEDURE REORDER;
0%INCLUDE EXTVAR,EXTRTN2,FILES,
1 OPT;
0DECLARE
      (ADDR,DIM,HBOUND,LENGTH,MOD,SUBSTR)BUILTIN,
      (RECORDS_PRINTED,RECORDS_READ,
      RECORDS_SATISFIED_READ_STMT,
      RECORDS_SATISFIED_SEARCH_REQ)FIXED BINARY(31)STATIC,
      (STILL_READING,STILL_PRINTING,STILL_TESTING)BIT(1),
      PERIC EXTERNAL POINTER,
      TESTOBJ EXTERNAL ENTRY RETURNS(BIT(1)ALIGNED),
      UNPACK EXTERNAL ENTRY,
      UNPACKED_ERIC_STRING CHAR(5050) VARYING,
      PUNPK POINTER INITIAL(ADDR(UNPACKED_ERIC_STRING));
0DECLARE
   01 ERIC_BUFFER(0:2),
      02 BUFFER_READ_EVENT EVENT,
      02 BUFFER_KEY PICTURE'(3)9(8)9',
      02 BUFFER_PAD_BYTE CHAR(1),
      02 BUFFER CHAR(2700)VARYING,
      (BUF_ID,END_ID)FIXED BINARY(31)STATIC;
1/*   EXSRCH EXECUTES THE COMPILED SEARCH.
 /*       NEXTKEY IS CALLED TO DETERMINE, USING THE TREE COMPILED
 /*            BY CMPRD AND POINTED TO BY PHEAD, THE
 /*            NEXT RECORD TO BE READ.  A RECORD NUMBER OF ZERO
 /*            (FIRST THREE BYTES OF THE KEY) INDICATES LOGICAL
 /*            END OF FILE.
 /*       THE DESIRED RECORDS ARE READ FROM FILE(ERIC) INTO ONE
 /*            OF SEVERAL BUFFERS (ERIC_BUFFER).  SINCE THESE BUFFERS
 /*            ARE IN AUTOMATIC STORAGE, CARE MUST BE TAKEN THAT
 /*            CONTROL DOES NOT LEAVE EXSRCH UNTIL ALL I/O OPERATIONS
 /*            PENDING FOR THESE BUFFERS ARE EITHER COMPLETED OR
 /*            TERMINATED.
 /*       AS THE DESIRED RECORDS ARE READ IN, TESTOBJ IS CALLED TO
 /*            BRANCH INTO THE OBJECT CODE (OBJCODE) CONSTRUCTED
 /*            BY COMPILE.  DUMMY CODE IS CONSTRUCTED IF NO FIELD
 /*            STATEMENTS WERE SPECIFIED.
 /*       IF A RECORD IS ACCEPTED BY TESTOBJ, THE ASSEMBLER SUBROUTINE
 /*            UNPACK IS CALLED TO CONVERT THE RECORD TO PRINTABLE FORM.
 /*            UNPACK DOES NOT CHECK LENGTH AND MAY OVERRUN THE
 /*            WORK AREA PROVIDED.  A CHECK ON THE UNPACKED LENGTH
 /*            IS INCLUDED TO TRY TO IDENTIFY THIS PROBLEM SHOULD
 /*            THE UNPACKED RECORDS EVER BECOME EXCESSIVELY LONG.
 /*            PRINT IS THEN CALLED TO FORMAT AND OUTPUT THE RECORD.
 /*       AT THE END OF THE SEARCH, STATISTICS ON THE NUMBER OF
 /*            RECORD KEYS PASSED BACK BY NEXTKEY , THE NUMBER
 /*            OF RECORDS WHICH WERE ACTUALLY READ, THE NUMBER
 /*            OF RECORDS READ WHICH WERE ACCECPTED BY TESTOBJ,
 /*            AND THE NUMBER OF RECORDS PRINTED ARE GIVEN.
 /*       THE ABOVE PICTURE MAY BE COMPLICATED SLIGHTLY.
 /*            A LIMIT ON THE NUMBER OF RECORDS WHICH MAY BE READ
 /*            (OPT.READLIM) AND ON THE NUMBER OF RECORDS WHICH
 /*            MAY BE PRINTED (OPT.PRINTLIM) IS ALWAYS IN EFFECT
 /*            UNDER TSO, AND MAY BE ACTIVATED IN BATCH WITH AN
 /*            OPTIONS STATEMENT.  (UNDER TSO, AN ATTENTION
 /*            INTERRUPT MAY ALSO BE USED TO HALT PRINTING.)
 /*            WHEN THE READ LIMIT IS REACHED, PRINTING CONTINUES
 /*            UNTIL ANY RECORDS REMAINING IN THE BUFFERS ARE
 /*            ARE EXHAUSTED OR PRINTING IS OTHERWISE HALTED.
 /*            THREE BIT VARIABLES COORDINATE THESE FUNCTIONS:
 /*            STILL_PRINTING IS RESET ON ATTENTION OR WHEN THE
 /*            PRINT LIMIT IS EXCEEDED.  STILL_READING IS RESET
 /*            ON LOGICAL ENDFILE OR WHEN THE READ LIMIT IS
 /*            EXCEEDED.  STILL_TESTING IS RESET SHORTLY THEREAFTER
 /*            WHEN THE LAST RECORD IN THE BUFFERS HAS BEEN
 /*            PROCESSED.
 /*       FOLLOWING AN ATTENTION INTERRUPT, PRINT STATISTICS
 /*            TSO MAY BE SEVERAL RECORDS GREATER THAN THE NUMBER
 /*            OF RECORDS PRINTED AT THE TERMINAL SINCE TCAM
 /*            WILL FLUSH ANY RECORDS WHICH HAVE BEEN PASSED TO
 /*            BUT HAVE NOT YET BEEN PRINTED. */
1ON ATTENTION STILL_PRINTING=0B;
0     IF ENV.TSO
         THEN PUT FILE(SYSPRINT)SKIP(2)EDIT
              ('HIT ATTENTION TO STOP PRINTING REFERENCES.')(A);
0     OPEN FILE(ERIC)DIRECT INPUT;
0     RECORDS_PRINTED,RECORDS_READ=0;
      RECORDS_SATISFIED_READ_STMT,RECORDS_SATISFIED_SEARCH_REQ=0;
      STILL_READING,STILL_PRINTING,STILL_TESTING='1'B;
      END_ID=HBOUND(BUFFER,1)+1; /* SET SO NO MATCH */
0     DO BUF_ID=0 TO HBOUND(BUFFER,1);
         BUFFER_KEY(BUF_ID)=NEXTKEY;
         IF STILL_READING
              THEN CALL INITIATE_READ;
      END;
0     DO BUF_ID=0 REPEAT(MOD(BUF_ID+1,DIM(BUFFER,1)))
         WHILE(SUBSTR(BUFFER_KEY(BUF_ID),1,3)^='000');
         RECORDS_SATISFIED_READ_STMT=
              RECORDS_SATISFIED_READ_STMT+1;
         IF BUF_ID=END_ID
              THEN STILL_TESTING=0B;
         IF STILL_TESTING
              THEN DO;
                   WAIT(BUFFER_READ_EVENT(BUF_ID));
                   IF LENGTH(BUFFER(BUF_ID))>2700 /* MAX LENGTH */
                        THEN SIGNAL ERROR;
                   PERIC=ADDR(BUFFER(BUF_ID)); /* SET FOR TESTOBJ */
                   IF TESTOBJ /* CALL OBJCODE */
                        THEN DO;
                             RECORDS_SATISFIED_SEARCH_REQ=
                                  RECORDS_SATISFIED_SEARCH_REQ+1;
                             IF STILL_PRINTING
                                  THEN CALL PRINT_RECORD;
                        END;
              END;
0        BUFFER_KEY(BUF_ID)=NEXTKEY;
         IF STILL_READING
              THEN CALL INITIATE_READ;
      END;
0     CLOSE FILE(ERIC); /* TERMINATE ACTIVE I/O.            */
         /* THIS FILE MUST BE CLOSED BEFORE RETURNING       */
         /* SO THAT AUTOMATIC STORAGE FOR BUFFERS IS NOT    */
         /* FREED WHILE I/O IS PENDING. THE ROUTINE SHOULD  */
         /* NOT BE EXITED VIA ON UNIT, ETC.                 */
1     PUT FILE(SYSPRINT)SKIP(2)EDIT
         (RECORDS_SATISFIED_READ_STMT,
         ' RECORDS SATISFIED THE READ STATEMENT',
         RECORDS_READ,
         ' RECORDS WERE READ',
         RECORDS_SATISFIED_SEARCH_REQ,
         ' OF THESE SATISFIED THE SEARCH REQUEST',
         RECORDS_PRINTED,
         ' RECORDS WERE PRINTED')(SKIP,F(6),A);
      PUT FILE(SYSPRINT)SKIP(5);
1INITIATE_READ:  PROCEDURE;
0     IF SUBSTR(BUFFER_KEY(BUF_ID),1,3)^='000'&
         RECORDS_READ<OPT.READLIM
         THEN DO;
              RECORDS_READ=RECORDS_READ+1;
              READ FILE(ERIC)INTO(BUFFER(BUF_ID))
                   KEY(BUFFER_KEY(BUF_ID))
                   EVENT(BUFFER_READ_EVENT(BUF_ID));
         END;
         ELSE DO;
              STILL_READING=0B;
              END_ID=BUF_ID;
              IF RECORDS_READ=OPT.READLIM
                   THEN PUT FILE(SYSPRINT)SKIP(2)EDIT
                        ('THE READ LIMIT HAS BEEN EXCEEDED.  ',
                        'NO MORE RECORDS WILL BE READ.')(A);
         END;
0END INITIATE_READ;
-PRINT_RECORD:  PROCEDURE;
0     IF RECORDS_PRINTED=OPT.PRINTLIM
         THEN DO;
              PUT FILE(SYSPRINT)SKIP(2)EDIT
                   ('THE PRINT LIMIT HAS BEEN EXCEEDED.  ',
                   'NO MORE RECORDS WILL BE PRINTED.')(A);
              STILL_PRINTING=0B;
         END;
0     ELSE DO;
         RECORDS_PRINTED=RECORDS_PRINTED+1;
         CALL UNPACK(ADDR(BUFFER(BUF_ID)),PUNPK);
         IF LENGTH(UNPACKED_ERIC_STRING)>5050
              THEN SIGNAL ERROR;
         CALL PRINT(PUNPK,RECORDS_PRINTED);
      END;
0END PRINT_RECORD;
0END EXSRCH;
