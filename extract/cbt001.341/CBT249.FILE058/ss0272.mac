         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'
***********************************************************************
*                                                                     *
*     THIS PROGRAM, PROVIDED BY FPL, IS OF GENERAL INTEREST           *
*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *
*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *
*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *
*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *
*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *
*     ENVIRONMENT.                                                    *
*                                                                     *
*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *
*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *
*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *
*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *
*                                                                     *
*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *
*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *
*     MAY CAUSE AT THE USER'S INSTALLATION.                           *
*                                                                     *
*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *
*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *
*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *
*              COORDINATOR OF TECHNICAL SYSTEMS                       *
*              COMPUTER OPERATIONS DEPARTMENT                         *
*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *
*              P. O. BOX  529100                                      *
*              MIAMI, FLORIDA  33152                                  *
*                                                                     *
*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *
*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *
*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *
*                                                                     *
* INSTALLATION INSTRUCTIONS                                           *
*                                                                     *
*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *
*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE EXECUTION JCL.       *
*                                                                     *
*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *
*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *
*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *
*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *
*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *
*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *
*                                                                     *
***********************************************************************
SS0272   TITLE 'LINK MAP SCANNER WITH XREF CAPABILITY'
***********************************************************************
*                                                                     *
* NAME         SS0272                                                 *
*                                                                     *
* FUNCTION     TO IDENTIFY UNREFERENCED CONTROL SECTIONS (CSECTS)     *
*              WITHIN A LOAD MODULE AND TO PROVIDE CROSS REFERENCE    *
*              LISTINGS OF REFERENCES TO AND BY EACH MODULE.          *
*                                                                     *
* DESCRIPTION  THE SS0272 UTILITY PROGRAM IS USED TO DETERMINE IF ANY *
*              CSECTS ARE UNREFERENCED.  THE UNREFERENCED CSECTS MAY  *
*              BE REMOVED BY RELINKING, THUS DECREASING THE TOTAL     *
*              MEMORY REQUIREMENTS OF THE LOAD MODULE AND DISK SPACE  *
*              REQUIRED TO STORE THE LOAD MODULE.                     *
*                                                                     *
*              THE PROGRAM READS AN OUTPUT LISTING CREATED BY THE     *
*              LINKAGE EDITOR WITH THE XREF OPTION.  THE PROGRAM      *
*              CONSTRUCTS TABLES OF EACH CSECT NAME AND REFERENCES TO *
*              EACH CSECT.                                            *
*                                                                     *
*              THE UNREFERENCED CSECT LISTING IS DEVELOPED IN PASSES. *
*              ON THE FIRST PASS, ALL UNREFERENCED CSECTS ARE LISTED. *
*              ALL REFERENCES MADE BY THE UNREFERENCED CSECTS ARE     *
*              REMOVED AND ANOTHER PASS IS MADE TO DETERMINE OF ANY   *
*              MORE CSECTS ARE UNREFERENCED.  THE CYCLE IS REPEATED   *
*              UNTIL NO MORE UNREFERENCED CSECTS ARE FOUND.  A PASS   *
*              IS TERMINATED WITH EITHER ALL UNREFERENCED CSECTS ARE  *
*              FOUND, OR 20 UNREFERENCED CSECTS ARE FOUND.  IF THERE  *
*              ARE MORE THAN 20 UNREFERENCED CSECTS, THE REMAINDER    *
*              WILL BE LISTED ON A SUBSEQUENT PASS.                   *
*                                                                     *
*              WHEN ALL UNREFERENCED CSECTS HAVE BEEN PURGED, TWO     *
*              CROSS-REFERENCE LISTINGS OF THE REMAINING CSECTS ARE   *
*              PRODUCED.  THE FIRST LISTING LISTS THE CSECTS          *
*              ALPHABETICALLY AND EACH CSECT IT REFERENCES.  THE      *
*              SECOND LISTING LISTS THE CSECTS ALPHABETICALLY AND THE *
*              CSECTS WHICH REFERENCE IT.                             *
*                                                                     *
* RESTRICTIONS AND LIMITATIONS                                        *
*                                                                     *
*              IF THE LINK MAP USED AS INPUT CONTAINS SEVERAL LOAD    *
*              MODULES, THE ENTIRE LINK MAP IS PRINTED, BUT ONLY THE  *
*              FIRST MODULE IS PROCESSED FOR UNREFERENCED CSECTS.     *
*                                                                     *
*              INTERNAL TABLE SIZES LIMIT THE NUMBER OF CSECTS IN A   *
*              LOAD MODULE TO 250 AND THE NUMBER OF UNIQUE REFERENCES *
*              TO 1250.                                               *
*                                                                     *
* ATTRIBUTES   SS0272 IS WRITTEN IN ASSEMBLY LANGUAGE.                *
*                                                                     *
* ENVIRONMENT  IBM 360/370                                            *
*              MVT/SVS/MVS                                            *
*                                                                     *
* INPUT        INPUT TO THE PROGRAM CONSISTS OF A LINKAGE EDITOR XREF *
*              LISTING.                                               *
*                                                                     *
* OUTPUT       THE OUTPUT LISTING CONSISTS OF 3 PARTS:                *
*                                                                     *
*              1.  THE INPUT LINKAGE EDITOR LISTING.  THIS PART MAY   *
*                  BE SUPPRESSED BY THE NOPRINT PARAMETER.            *
*                                                                     *
*              2.  THE UNREFERENCED CSECT LISTING.  THIS LISTING MAY  *
*                  CONSIST OF SEVERAL PASSES.  THIS PART IS ALWAYS    *
*                  PRODUCED.                                          *
*                                                                     *
*              3.  THE MODULE CROSS-REFERENCE LISTINGS SHOWING        *
*                  REFERENCES BY AND TO EACH CSECT.  THIS PART MAY BE *
*                  SUPPRESSED BY THE NOXREF PARAMETER.                *
*                                                                     *
* JOB CONTROL LANGUAGE                                                *
*                                                                     *
*              EXEC     SPECIFIES THE PROGRAM NAME AND PARM           *
*                       INFORMATION.                                  *
*                                                                     *
*              SYSPRINT DEFINES THE OUTPUT MESSAGE DATA SET.          *
*                                                                     *
*              SYSIN    DEFINES THE INPUT DATA SET, A LINKAGE EDITOR  *
*                       XREF LISTING.                                 *
*                                                                     *
* PARM INFORMATION                                                    *
*                                                                     *
*              THE EXEC STATEMENT OF THE PARM FIELD MAY BE USED TO    *
*              CONTROL THE AMOUNT OF OUTPUT PRODUCED.  THE VALID      *
*              VALUES ARE:                                            *
*                                                                     *
*              PRINT/NOPRINT - SPECIFIES WHETHER OR NOT THE INPUT     *
*                   LINKAGE EDITOR LISTING IS TO BE PRINTED.  THE     *
*                   DEFAULT IS PRINT.                                 *
*                                                                     *
*              XREF/NOXREF - SPECIFIES WHETHER OR NOT THE             *
*                   CROSS-REFERENCE LISTINGS ARE TO BE PRODUCED.  THE *
*                   DEFAULT IS XREF.                                  *
*                                                                     *
* UTILITY CONTROL STATEMENTS                                          *
*                                                                     *
*              NONE.                                                  *
*                                                                     *
* ERRORS       ABEND 1000 - SYSPRINT DD STATEMENT MISSING             *
*                                                                     *
*              UNABLE TO OPEN SYSIN                                   *
*                   THE PROGRAM WAS UNABLE TO OPEN THE INPUT FILE.    *
*                   THE RUN IS TERMINATED WITH CONDITION CODE 16.     *
*                                                                     *
*              LINK MAP NOT PRODUCED USING XREF                       *
*                   THE INPUT LINK MAP WAS NOT PRODUCED WITH THE      *
*                   LINKAGE EDITOR XREF OPTION.  THE RUN IS           *
*                   TERMINATED WITH CONDITION CODE 12.                *
*                                                                     *
*              UNABLE TO LOCATE ENTRY POINT                           *
*                   THE PROGRAM IS UNABLE TO DETERMINE THE ENTRY      *
*                   POINT OF THE LOAD MODULE.  THE RUN IS TERMINATED  *
*                   WITH CONDITION CODE 12.                           *
*                                                                     *
*              CSECT NAME TABLE OVERFLOW                              *
*                   THE LOAD MODULE BEING PROCESSED CONTAINS MORE     *
*                   THAN 250 CSECTS.  THE RUN IS TERMINATED WITH      *
*                   CONDITION CODE 12.                                *
*                                                                     *
*              REFERENCE TABLE OVERFLOW                               *
*                   THE LOAD MODULE BEING PROCESSED HAS MORE THAN     *
*                   1250 UNIQUE REFERENCES.  THE RUN IS TERMINATED    *
*                   WITH CONDITION CODE 12.                           *
*                                                                     *
*              INVALID KEYWORD - XXXXXXXX                             *
*                   THE KEYWORD REPRESENTED BY XXXXXXXX IS INVALID.   *
*                   THE RUN IS TERMINATED WITH CONDITION CODE 12.     *
*                                                                     *
*              AMBIGUOUS KEYWORD - XXXXXXXX                           *
*                   THE KEYWORD REPRESENTED BY XXXXXXXX IS AMBIGUOUS. *
*                   THE RUN IS TERMINATED WITH CONDITION CODE 12.     *
*                                                                     *
*              PARAMETER TOO LONG - XXXXXXXXXXXX                      *
*                   THE PARAMETER REPRESENTED BY XXXXXXXXXXXX EXCEEDS *
*                   THE MAXIMUM PARAMETER LENGTH.  THE RUN IS         *
*                   TERMINATED WITH CONDITION CODE 12.                *
*                                                                     *
* EXAMPLE      FIND UNREFERENCED CSECTS IN SS0302.                    *
*                                                                     *
*              //LINK   EXEC  PGM=IEWL,PARM=(LIST,LET,XREF)           *
*              //SYSPRINT DD  DISP=(NEW,PASS),DSNAME=&&LINKMAP,       *
*              //             UNIT=SYSDA,SPACE=(TRK,(10,10))          *
*              //SYSLMOD  DD  DISP=(NEW,DELETE),DSNAME=&&SYSLMOD,     *
*              //             UNIT=SYSDA,SPACE=(TRK,(10,10,1))        *
*              //SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))            *
*              //LINKLIB  DD  DISP=SHR,DSNAME=FPL.LINKLIB             *
*              //SYSLIN   DD  *                                       *
*                INCLUDE LINKLIB(SS0302)                              *
*                ENTRY MAIN                                           *
*              //SCAN   EXEC  PGM=SS0272                              *
*              //SYSPRINT DD  SYSOUT=*                                *
*              //SYSIN    DD  DISP=(OLD,DELETE),DSNAME=&&LINKMAP      *
*                                                                     *
* FPL MACROS USED                                                     *
*                                                                     *
*              $ENTER         ENTRY LINKAGE                           *
*              $RTRN          RETURN LINKAGE                          *
*                                                                     *
* IBM MACROS USED                                                     *
*                                                                     *
*              ABEND          TERMINATE ABNORMALLY                    *
*              FREEMAIN       RELEASE STORAGE                         *
*              GETMAIN        OBTAIN STORAGE FOR TABLES               *
*              DCB            DEFINE A DATA CONTROL BLOCK             *
*              GET            OBTAIN AN INPUT RECORD                  *
*              OPEN           OPEN DATA CONTROL BLOCKS                *
*              PUT            WRITE AN OUTPUT RECORD                  *
*                                                                     *
*                                                GORDON P. WEST 02/78 *
***********************************************************************
         SPACE
***********************************************************************
*                                                                     *
* UPDATE SUMMARY                                                      *
*                                                                     *
* 02/13/78     ADDED PRINT LINK MAP AND PRINT, NOPRINT, AND XREF PARM *
*              20 UNREFERENCED CSECTS TERMINATE A PASS, NOT PROGRAM   *
*              CONDITION CODE 4 CHANGED TO 12                         *
*              CHANGED REGISTER USAGE AND INSTALLED FPL LINK MACROS   *
*                                                                     *
***********************************************************************
         TITLE 'ENTRY LINKAGE'
SS0272   $ENTER BASE=R12,SAVE=SAVEAREA
         USING SAVEAREA,R13            ADDRESSABILITY FOR DATA AREA
         L     R3,0(R1)                SAVE PARM FIELD ADDRESS
         TITLE 'OPEN INPUT AND OUTPUT FILES'
***********************************************************************
*                                                                     *
*        OPEN INPUT AND OUTPUT FILES                                  *
*                                                                     *
***********************************************************************
         SPACE
         OPEN  (SYSIN,,SYSPRINT,(OUTPUT))
         TM    SYSPRINT+48,X'10'       TEST TO SEE IF SYSPRINT OPENED
         BNZ   CKSYSIN
         ABEND 1000                    SYSPRINT FAILED - ABEND
CKSYSIN  TM    SYSIN+48,X'10'          TEST SYSIN
         BNZ   OPENOK
         PUT   SYSPRINT,BADSYSIN       SYSIN FAILED - PRINT ERROR
         LA    R15,16                  SET CONDITION CODE
         B     ALLDONE
         TITLE 'PARM FIELD PROCESSING'
***********************************************************************
*                                                                     *
*        PARM FIELD PROCESSING                                        *
*                                                                     *
*        R2 - PARM FIELD LENGTH                                       *
*        R3 - FIRST CHARACTER POINTER                                 *
*        R4 - PARM FIELD LENGTH WORK AREA                             *
*        R5 - PARM FIELD POINTER                                      *
*                                                                     *
***********************************************************************
         SPACE
OPENOK   MVI   FLAGS,X'00'             INITIALIZE INDICATORS
         NC    0(2,R3),0(R3)           SEE IF PARM FIELD PRESENT
         BZ    NOPARM
         LH    R2,0(R3)                LOAD PARM FIELD ADDRESS
         LA    R3,2(R3)                POINT TO FIRST CHARACTER
COPYVAL  LR    R4,R2                   COPY LENGTH
         LR    R5,R3                   COPY POINTER
         SPACE
FINDCOMA CLI   0(R5),C','              SEARCH FOR COMMA
         BE    ENDVALUE
         LA    R5,1(R5)                POINT TO NEXT CHARACTER
         BCT   R4,FINDCOMA             DECREMENT COUNTER AND LOOP
         SPACE
ENDVALUE SR    R5,R3                   GET LENGTH OF PARAMETER
         BZ    NEXTPARM                NULL FIELD
         C     R5,=F'8'                TEST FOR TOO LONG
         BH    TOOLONG
         BCTR  R5,0                    SUBTRACT 1 FOR EXECUTE
         MVC   PARMVAL,=CL8' '         BLANK OUT WORK AREA
         EX    R5,MOVEPARM             COPY PARM VALUE
         LA    R5,1(R5)                RESTORE ORIGINAL LENGTH
         EX    R5,COMPNO               TEST FOR 'NO '
         BE    AMBIG
         EX    R5,COMPNOX              TEST FOR NOXREF
         BE    PARMNOX
         EX    R5,COMPXREF             TEST FOR XREF
         BE    PARMXREF
         EX    R5,COMPNOP              TEST FOR NOPRINT
         BE    PARMNOP
         EX    R5,COMPPRT              TEST FOR PRINT
         BNE   BADKEYWD
*--------PRINT
         NI    FLAGS,X'FF'-$NOPRINT    TURN OFF NOPRINT INDICATOR
         B     NEXTPARM
*--------NOPRINT
PARMNOP  OI    FLAGS,$NOPRINT          TURN ON NOPRINT INDICATOR
         B     NEXTPARM
*--------XREF
PARMXREF NI    FLAGS,X'FF'-$NOXREF     TURN OFF NOXREF INDICATOR
         B     NEXTPARM
*--------NOXREF
PARMNOX  OI    FLAGS,$NOXREF           TURN ON NOXREF INDICATOR
         B     NEXTPARM
*--------BAD KEYWORD
BADKEYWD MVC   ERRMSG01+19(8),PARMVAL  MOVE BAD PARAMETER INTO MSG
         PUT   SYSPRINT,ERRMSG01       ISSUE MESSAGE
         B     BADPARM
*--------AMBIGUOUS KEYWORD
AMBIG    MVC   ERRMSG02+21(8),PARMVAL  MOVE BAD PARAMETER INTO MSG
         PUT   SYSPRINT,ERRMSG02       ISSUE MESSAGE
         B     BADPARM
*--------PARAMETER TOO LONG
TOOLONG  BCTR  R5,0                    SUBTRACT 1 FOR EXECUTE
         EX    R5,MOVELONG             MOVE BAD PARAMETER INTO MESSAGE
         LA    R5,1(R5)                RESTORE ORIGINAL LENGTH
         PUT   SYSPRINT,ERRMSG03       ISSUE MESSAGE
*--------PARAMETER IS IN ERROR
BADPARM  OI    FLAGS,$BADPARM          INDICATE ERROR FOUND
*--------GET NEXT PARAMETER
NEXTPARM LA    R5,1(R5)                ADD 1 FOR COMMA
         AR    R3,R5                   FIRST CHARACTER OF NEXT VALUE
         SR    R2,R5                   REMAINING LENGTH
         BP    COPYVAL
*--------PARM PROCESSING COMPLETED
         TM    FLAGS,$BADPARM          WAS THERE AN ERROR?
         BZ    NOPARM
         LA    R15,12                  SET CONDITION CODE
         B     ALLDONE
         TITLE 'OBTAIN STORAGE FOR TABLES'
***********************************************************************
*                                                                     *
*        OBTAIN STORAGE FOR TABLES AND INITIALIZE TABLE LIMITS        *
*                                                                     *
*        TO CHANGE THE TABLE SIZES, CHANGE THE VALUES FOR LENGTHS     *
*                                                                     *
***********************************************************************
         SPACE
NOPARM   GETMAIN LU,LA=LENGTHS,A=ADDRS OBTAIN STORAGE FOR 3 TABLES
         SPACE
         L     R4,SECTTABL             LOAD CSECT TABLE ADDRESS
         LA    R10,16                  LOAD CSECT TABLE ENTRY LENGTH
         SR    R4,R10                  BACK OFF ONE ENTRY
         L     R11,SECTLEN             LOAD LENGTH OF TABLE
         LA    R11,0(R11,R4)           LOAD END OF TABLE ADDRESS
         SPACE
         L     R5,REFTABLE             LOAD REFERENCE TABLE ADDRESS
         LA    R8,16                   LOAD ENTRY LENGTH
         SR    R5,R8                   BACK OFF ONE ENTRY
         L     R9,REFLEN               LOAD LENGTH OF TABLE
         LA    R9,0(R9,R5)             LOAD END OF TABLE ADDRESS
         SPACE
         L     R3,REFTABLE             LOAD REFERENCE TABLE ADDRESS
         LA    R6,16                   LOAD ENTRY LENGTH
         TITLE 'FIND START OF LINK MAP'
***********************************************************************
*                                                                     *
*        FIND START OF LINK MAP                                       *
*                                                                     *
***********************************************************************
         SPACE
FINDMAP  GET   SYSIN,LINE              READ A LINE
         TM    FLAGS,$NOPRINT          TEST FOR NO PRINT
         BO    NOPRINT1
         PUT   SYSPRINT,LINE           PRINT THE LINE
NOPRINT1 CLC   LINE+3(16),=C'CONTROL SECTION '  TEST FOR HEADER
         BNE   FINDMAP
         TITLE 'PHASE I - GET CSECT NAMES AND REFERENCES'
***********************************************************************
*                                                                     *
*       PHASE  I  - COMPILE LIST OF CONTROL SECTIONS AND LIST OF      *
*                   CONTROL SECTIONS REFERENCED                       *
*                                                                     *
*         R2  - CSECT NAME TABLE POINTER                              *
*         R3  -                                                       *
*         R4  - CSECT NAME TABLE POINTER                              *
*         R5  - REFERENCE TABLE POINTER                               *
*         R6  -                                                       *
*         R7  -                                                       *
*         R8  - REFERENCE TABLE ENTRY LENGTH                          *
*         R9  - REFERENCE TABLE LIMIT                                 *
*         R10 - CSECT TABLE ENTRY LENGTH                              *
*         R11 - CSECT TABLE LIMIT                                     *
*                                                                     *
***********************************************************************
         SPACE
*--------SAVE FIRST CONTROL SECTION OF THIS SEGMENT
MORESECT ST    R4,FIRSTSEC
*--------BUILD CONTROL SECTION TABLE
READSECT GET   SYSIN,LINE              READ A LINE
         TM    FLAGS,$NOPRINT          TEST FOR NO PRINT
         BO    NOPRINT2
         PUT   SYSPRINT,LINE           PRINT THE LINE
NOPRINT2 CLI   LINE+3,C' '             IGNORE NAMES STARTING WITH BLANK
         BE    READSECT
         CLI   LINE+2,C'$'             IGNORE NAMES THAT START WITH $
         BE    READSECT
         CLC   LINE+3(16),=C'LOCATION  REFERS'  TEST FOR XREF HEADER
         BE    XREFLIST
         CLC   LINE+2(13),=C'ENTRY ADDRESS'  TEST FOR END OF MAP
         BE    NOXREF
         BXH   R4,R10,TBL1OVER         INCREMENT AND TEST TABLE POINTER
         MVC   0(8,R4),LINE+3          COPY CSECT NAME INTO TABLE
         LA    R0,5                    LOAD ORIGIN FIELD LENGTH
         LA    R1,LINE+14              LOAD ORIGIN FIELD ADDRESS
         BAL   R14,HEXBIN              CONVERT ORIGIN TO BINARY
         ST    R15,8(R4)               STORE ORIGIN IN TABLE
         MVC   12(4,R4),LINE+29        SAVE OVERLAY SEGMENT NUMBER
         MVC   24(4,R4),=X'7FFFFFFF'   SET NEXT ENTRY ORIGIN HIGH
         B     READSECT
*--------XREF LISTING ENCOUNTERED
XREFLIST L     R2,FIRSTSEC
*--------BUILD REFERENCED SECTION TABLE
READREFC GET   SYSIN,LINE              READ A LINE
         TM    FLAGS,$NOPRINT          TEST FOR NO PRINT
         BO    NOPRINT3
         PUT   SYSPRINT,LINE           PRINT A LINE
NOPRINT3 CLC   LINE+3(16),=C'LOCATION  REFERS'   TEST FOR HEADER LINE
         BE    READREFC
         CLC   LINE+3(16),=C'CONTROL SECTION '  TEST FOR NEXT SEGMENT
         BE    MORESECT
         CLC   LINE+2(13),=C'ENTRY ADDRESS'  TEST FOR END OF MAP
         BE    MAPDONE
         LA    R1,LINE+5               LOAD ORIGIN FIELD ADDRESS
         BAL   R15,FINDREF             PROCESS ENTRY
         LA    R1,LINE+65              LOAD SECOND ORIGIN FIELD ADDRESS
         BAL   R15,FINDREF             PROCESS SECOND ENTRY
         B     READREFC
*--------FIND ENTRY POINT
MAPDONE  LA    R0,5                    LOAD FIELD LENGTH
         LA    R1,LINE+19              LOAD FIELD ADDRESS
         BAL   R14,HEXBIN              CONVERT ENTRY POINT TO BINARY
         LR    R11,R4                  RESET CSECT NAME TABLE LIMIT
         L     R4,SECTTABL             LOAD ADDRESS OF TABLE
FINDORG  C     R15,8(R4)               COMPARE ENTRY POINT TO ORIGIN
         BL    FOUNDORG
         BXLE  R4,R10,FINDORG          GO TO NEXT CONTROL SECTION NAME
         B     NOENTRY
FOUNDORG BXH   R5,R8,TBL2OVER          INCREMENT REFERENCE TABLE PTR
         SR    R4,R10                  BACK UP 1 ENTRY
         MVC   0(8,R5),0(R4)           MOVE NAME INTO TABLE
         MVC   8(8,R5),=C'ENTRY PT'    ZERO REFERENCING SECTION NAME
*--------READ AND PRINT REMAINDER OF LINK MAP
         TM    FLAGS,$NOPRINT          TEST FOR NO PRINT
         BO    PHASE2
ENDMAP   GET   SYSIN,LINE              READ A LINE
         PUT   SYSPRINT,LINE           PRINT A LINE
         B     ENDMAP
         TITLE 'PHASE II - FIND UNREFERENCED CSECTS'
***********************************************************************
*                                                                     *
*       PHASE  II - PROCESS LISTS TO FIND CONTROL SECTIONS TO WHICH   *
*                   NO REFERENCES ARE MADE                            *
*                                                                     *
*         R2  -                                                       *
*         R3  - UNREFERENCED CSECT TABLE POINTER                      *
*         R4  - CSECT NAME TABLE POINTER                              *
*         R5  - REFERENCE TABLE POINTER                               *
*         R6  - UNREFERENCED CSECT TABLE POINTER                      *
*         R7  - UNREFERENCED CSECT TABLE LIMIT                        *
*         R8  - REFERENCE TABLE ENTRY LENGTH                          *
*         R9  - REFERENCE TABLE LIMIT (LAST ENTRY USED)               *
*         R10 - CSECT TABLE ENTRY LENGTH                              *
*         R11 - CSECT TABLE LIMIT                                     *
*                                                                     *
***********************************************************************
         SPACE
*--------SET UP CSECT NAME TABLE LIMITS
PHASE2   L     R4,SECTTABL             LOAD TABLE ADDRESS
         SR    R4,R10                  BACK OFF ONE ENTRY
*--------SET UP UNREFERENCED CSECT NAME TABLE LIMITS
         L     R3,UNREFTBL             LOAD TABLE ADDRESS
         LA    R6,8                    LOAD ENTRY LENGTH
         L     R7,UNREFLEN             LOAD LENGTH OF TABLE
         LA    R7,0(R7,R3)             LOAD END OF TABLE ADDRESS
         SR    R7,R6                   BACK OFF ONE ENTRY
*--------SET UP REFERENCE TABLE LIMITS
         LR    R9,R5
*--------CHECK TABLES FOR UNREFERENCED CONTROL SECTION NAMES
NEXTSECT L     R5,REFTABLE
         BXH   R4,R10,ENDPH2
*--------COMPARE CONTROL SECTION NAMES IN TABLES 1 AND 2
COMPSECT CLC   0(8,R4),0(R5)
         BE    NEXTSECT
         BXLE  R5,R8,COMPSECT
*--------UNREFERENCED CONTROL SECTION FOUND
         MVC   0(8,R3),0(R4)           MOVE CSECT NAME INTO TABLE
         BXLE  R3,R6,NEXTSECT
*--------END OF PHASE 2
ENDPH2   SR    R3,R6                   BACK OFF 1 ENTRY
         TITLE 'PHASE III - PRINT UNREFERENCED CSECT NAMES'
***********************************************************************
*                                                                     *
*       PHASE III - PRINT NAMES OF UNREFERENCED CONTROL SECTIONS AND  *
*                   REMOVE UNREFERENCED CONTROL SECTION NAMES FROM    *
*                   TABLES 1 AND 2                                    *
*                                                                     *
*         R1  - CSECT TABLE POINTER                                   *
*         R2  -                                                       *
*         R3  - UNREFERENCED CSECT TABLE POINTER                      *
*         R4  -                                                       *
*         R5  - REFERENCE TABLE POINTER                               *
*         R6  - UNREFERENCED CSECT TABLE POINTER                      *
*         R7  - UNREFERENCED CSECT TABLE LIMIT                        *
*         R8  - REFERENCE TABLE ENTRY LENGTH                          *
*         R9  - REFERENCE TABLE LIMIT (LAST ENTRY USED)               *
*         R10 - CSECT TABLE ENTRY LENGTH                              *
*         R11 - CSECT TABLE LIMIT                                     *
*                                                                     *
***********************************************************************
         SPACE
*--------PRINT PASS NUMBER
         MVI   LINE,C' '               CLEAR PRINT LINE
         MVC   LINE+1(132),LINE
         L     R1,PASS                 LOAD PASS NUMBER
         LTR   R1,R1                   TEST FOR FIRST PASS
         BNZ   INCRPASS
         MVI   LINE,C'1'               FORCE TOP OF FORM FIRST TIME
INCRPASS LA    R1,1(R1)                INCREMENT PASS NUMBER
         ST    R1,PASS                 SAVE IT
         CVD   R1,DECIMAL              CONVERT TO DECIMAL
         OI    DECIMAL+7,X'0F'
         UNPK  DECIMAL(4),DECIMAL+7(2)
         MVC   LINE+11(4),=C'PASS'
         MVC   LINE+16(2),DECIMAL
         PUT   SYSPRINT,LINE           PRINT PASS NUMBER
         MVI   LINE,C' '               RESTORE CONTROL CHARACTER
*--------SEE IF THERE WERE ANY UNREFERENCED CONTROL SECTIONS LAST PASS
         L     R1,UNREFTBL             LOAD UNREFERENCED TABLE ADDRESS
         CR    R3,R1                   SEE IF POINTER HIGHER
         BL    ALLREF
         PUT   SYSPRINT,UNREFNCD       PRINT HEADER
         LR    R7,R3                   RESET LIMIT ADDRESS
         L     R3,UNREFTBL             RESET POINTER
*--------PRINT 5 UNREFERENCED NAMES PER LINE
PRINT5   MVC   LINE+1(132),LINE        CLEAR PRINT LINE
         LA    R0,5                    SET COUNT TO 5 CSECTS PER LINE
         LA    R1,LINE+1               INTITIALIZE LINE POINTER
COPYNAME MVC   0(8,R1),0(R3)           MOVE NAME TO OUTPUT LINE
         BXH   R3,R6,PRINT             INCREMENT COUNTER AND LOOP
         LA    R1,16(R1)               INCREMENT TO NEXT CSECT NAME
         BCT   R0,COPYNAME             DECREMENT COUNT AND LOOP
PRINT    PUT   SYSPRINT,LINE           PRINT LINE OF UNREF CSECTS
         CR    R3,R7                   SEE IF ANY MORE
         BNH   PRINT5                  LOOP IF MORE
*--------PURGE UNREFERENCED NAMES FROM CONTROL SECTION NAME TABLE
         L     R1,SECTTABL             LOAD CSECT TABLE ADDRESS
         SR    R1,R10                  BACK OFF ONE ENTRY
         LR    R4,R1                   COPY TO POINTER
         L     R3,UNREFTBL             LOAD UNREFERENCED TABLE ADDRESS
         SR    R3,R6                   BACK OFF ONE ENTRY
NEXTDELT BXH   R3,R6,FINISH1           INCREMENT UNREF TABLE POINTER
NEXTNAME BXH   R1,R10,TBL1DONE         INCREMENT CSECT TABLE POINTER
         CLC   0(8,R1),0(R3)           COMPARE UNREF TO CSECT
         BE    NEXTDELT
         LA    R4,16(R4)               INCREMENT TO NEXT CSECT
         MVC   0(16,R4),0(R1)          COPY NAME TO NEXT SLOT
         B     NEXTNAME
FINISH1  BXH   R1,R10,TBL1DONE         INCREMENT CSECT TABLE POINTER
         LA    R4,16(R4)               INCREMENT TO NEXT CSECT
         MVC   0(16,R4),0(R1)          COPY NAME TO NEXT SLOT
         B     FINISH1                 FINISH TABLE
*--------PURGE UNREFERENCED NAMES FROM REFERENCE TABLE
TBL1DONE LR    R11,R4
         L     R1,REFTABLE             LOAD REFERENCE TABLE ADDRESS
         SR    R1,R8                   BACK OFF ONE ENTRY
         LR    R5,R1
CHECKNAM L     R3,UNREFTBL             LOAD UNREFERENCED TABLE ADDRESS
         SR    R3,R6                   BACK OFF ONE ENTRY
         BXH   R1,R8,TBL2DONE
NEXTUREF BXH   R3,R6,COPY
         CLC   0(8,R3),8(R1)
         BE    CHECKNAM
         B     NEXTUREF
COPY     LA    R5,16(R5)
         MVC   0(16,R5),0(R1)
         B     CHECKNAM
*--------TABLE 2 PURGED
TBL2DONE B     PHASE2
         TITLE 'PHASE IV - ALL SECTIONS REFERENCED'
***********************************************************************
*                                                                     *
*        PHASE IV - ALL SECTIONS REFERENCED.                          *
*                   ALPHABETIZE CSECT TABLE                           *
*                   ALPHABETIZE REFERENCE TABLE BY REFERENCING CSECT  *
*                                                                     *
*          R0  - SAVE TABLE LIMIT WHILE SORTING                       *
*          R1  - ADDRESS OF LAST ENTRY SWITCHED                       *
*          R2  -                                                      *
*          R3  -                                                      *
*          R4  - CSECT TABLE POINTER                                  *
*          R5  - REFERENCE TABLE POINTER                              *
*          R6  -                                                      *
*          R7  -                                                      *
*          R8  - REFERENCE TABLE ENTRY LENGTH                         *
*          R9  - REFERENCE TABLE LIMIT                                *
*          R10 - CSECT TABLE ENTRY LENGTH                             *
*          R11 - CSECT TABLE LIMIT                                    *
*                                                                     *
***********************************************************************
         SPACE
*--------ALL CONTROL SECTIONS REFERENCED
ALLREF   PUT   SYSPRINT,ALLREFCD
         SR    R15,R15                 CLEAR RETURN CODE REGISTER
         TM    FLAGS,$NOXREF           TEST NOXREF INDICATOR
         BO    ALLDONE
*--------PHASE IV - ALPHABETIZE TABLES
         LR    R0,R11                  SAVE TABLE LIMIT
         LR    R1,R11                  INITIALIZE LAST SWITCHED
ALPHA1   LR    R11,R1                  LAST SWITCHED TO POINTER
         LA    R1,0                    ZERO LAST SWITCHED
         SR    R11,R10                 BACK OFF ONE ENTRY
         L     R4,SECTTABL             INITIALIZE POINTER
COMPARE1 CLC   0(8,R4),16(R4)          COMPARE NAMES
         BNH   NEXT1
         MVC   SAVE(16),0(R4)          SWITCH ENTRIES
         MVC   0(16,R4),16(R4)
         MVC   16(16,R4),SAVE
         LR    R1,R4                   SAVE LAST SWITCHED ADDRESS
NEXT1    BXLE  R4,R10,COMPARE1         INCREMENT TO NEXT NAME
         LTR   R1,R1                   SEE IF ANY SWITCHED
         BNZ   ALPHA1                  IF SO, GO THROUGH AGAIN
*--------CSECT NAME TABLE IS ALPHABETIZED - NOW DO REF TABLE
         LR    R11,R0                  RESTORE TABLE LIMIT
         LR    R0,R9                   SAVE TABLE LIMIT
         LR    R1,R9                   INITIALIZE LST SWITCHED
ALPHA2   LR    R9,R1                   STOP AT LAST SWITCHED
         LA    R1,0                    ZERO LAST SWITCHED
         SR    R9,R8                   BACK OFF ONE ENTRY
         L     R5,REFTABLE             INITIALIZE POINTER
COMPARE2 CLC   8(8,R5),24(R5)          COMPARE NAMES
         BNH   NEXT2
         MVC   SAVE(16),0(R5)          SWITCH ENTRIES
         MVC   0(16,R5),16(R5)
         MVC   16(16,R5),SAVE
         LR    R1,R5                   SAVE LAST SWITCHED ADDRESS
NEXT2    BXLE  R5,R8,COMPARE2          INCREMENT TO NEXT NAME
         LTR   R1,R1                   SEE IF ANY SWITCHED
         BNZ   ALPHA2                  IF SO, GO THROUGH AGAIN
*--------REF TABLE IS ALPHABETIZED
         LR    R9,R0                   RESTORE TABLE LIMIT
         TITLE 'PHASE V - PRODUCE XREF LISTING BY REFERENCING CSECT'
***********************************************************************
*                                                                     *
*        PHASE V - PRODUCE XREF LISTING BY REFERENCING CSECT          *
*                                                                     *
*          R0  - CSECT COUNTER                                        *
*          R1  - OUTPUT LINE POINTER                                  *
*          R2  -                                                      *
*          R3  - LINE COUNT                                           *
*          R4  - CSECT TABLE POINTER                                  *
*          R5  - REFERENCE TABLE POINTER                              *
*          R6  -                                                      *
*          R7  - PRINT ROUTINE BAL REGISTER                           *
*          R8  - REFERENCE TABLE ENTRY LENGTH                         *
*          R9  - REFERENCE TABLE LIMIT                                *
*          R10 - CSECT TABLE ENTRY LENGTH                             *
*          R11 - CSECT TABLE LIMIT                                    *
*                                                                     *
***********************************************************************
         SPACE
         LA    R3,1                    INITIALIZE LINE COUNTER
         L     R4,SECTTABL             LOAD CSECT TABLE ADDR
         L     R5,REFTABLE             LOAD REF TABLE ADDRESS
         MVC   LINE+1(132),LINE        CLEAR LINE
NEWSECT  MVC   LINE+1(8),0(R4)         MOVE IN CSECT NAME
         MVC   LINE+18(2),14(R4)
         UNPK  HEX(7),9(4,R4)          CONVERT ORIGIN TO HEX
         TR    HEX(6),TRANSTBL
         MVC   LINE+10(6),HEX          HEX TO OUTPUT LINE
         LA    R1,LINE+25              INITIALIZE LINE POINTER
         LA    R0,5                    INITIALIZE CSECT PER LINE
CHEKNAME CLC   0(8,R4),8(R5)           COMPARE CSECT NAMES
         BE    COPYNAM2
         CLC   8(8,R5),=C'ENTRY PT'    TEST FOR ENTRY POINT
         BNE   PRNT
         LA    R5,16(R5)               INCREMENT TO NEXT NAME
         B     CHEKNAME
COPYNAM2 MVC   0(8,R1),0(R5)           COPY NAME TO OUTPUT LINE
         LA    R1,10(R1)               INCREMENT LINE POINTER
         BCT   R0,CONTINUE             DECREMENT COUNTER
         BAL   R7,PRINT2               PRINT A LINE
CONTINUE BXLE  R5,R8,CHEKNAME          GO TO NEXT NAME
PRNT     BAL   R7,PRINT2               PRINT LAST LINE
         BXLE  R4,R10,NEWSECT          GO TO NEXT CSECT
         TITLE 'PHASE VI - SORT REFERENCE TABLE BY CSECT REFERENCED'
***********************************************************************
*                                                                     *
*        PHASE VI - SORT REFERENCE TABLE BY CSECT REFERENCED          *
*                                                                     *
*          R0  - SAVE TABLE LIMIT WHILE SORTING                       *
*          R1  - ADDRESS OF LAST ENTRY SWITCHED                       *
*          R2  -                                                      *
*          R3  -                                                      *
*          R4  -                                                      *
*          R5  - REFERENCE TABLE POINTER                              *
*          R6  -                                                      *
*          R7  -                                                      *
*          R8  - REFERENCE TABLE ENTRY LENGTH                         *
*          R9  - REFERENCE TABLE LIMIT                                *
*          R10 -                                                      *
*          R11 -                                                      *
*                                                                     *
***********************************************************************
         SPACE
         LR    R0,R9                   SAVE TABLE LIMIT
         LR    R1,R9
ALPHA3   LR    R9,R1
         LA    R1,0
         SR    R9,R8
         L     R5,REFTABLE
COMPARE3 CLC   0(8,R5),16(R5)
         BNH   NEXT3
         MVC   SAVE(16),0(R5)
         MVC   0(16,R5),16(R5)
         MVC   16(16,R5),SAVE
         LR    R1,R5
NEXT3    BXLE  R5,R8,COMPARE3
         LTR   R1,R1
         BNZ   ALPHA3
*--------REF TABLE IS ALPHABETIZED
         LR    R9,R0                   RESTORE LIMIT ADDRESS
         TITLE 'PHASE VII - PRODUCE XREF LISTING BY CSECT REFERENCED'
***********************************************************************
*                                                                     *
*        PHASE VII - PRODUCE XREF LISTING BY CSECT REFERENCED         *
*                                                                     *
*          R0  - CSECT COUNTER                                        *
*          R1  - OUTPUT LINE POINTER                                  *
*          R2  -                                                      *
*          R3  - LINE COUNT                                           *
*          R4  - CSECT TABLE POINTER                                  *
*          R5  - REFERENCE TABLE POINTER                              *
*          R6  -                                                      *
*          R7  - PRINT ROUTINE BAL REGISTER                           *
*          R8  - REFERENCE TABLE ENTRY LENGTH                         *
*          R9  - REFERENCE TABLE LIMIT                                *
*          R10 - CSECT TABLE ENTRY LENGTH                             *
*          R11 - CSECT TABLE LIMIT                                    *
*                                                                     *
***********************************************************************
         SPACE
         MVC   HEDR+39(16),=C'IS REFERENCED BY'
         LA    R3,1                    INITIALIZE LINE COUNTER
         L     R4,SECTTABL
         L     R5,REFTABLE
         MVC   LINE+1(132),LINE
NEWSECT3 MVC   LINE+1(8),0(4)
         MVC   LINE+18(2),14(4)
         UNPK  HEX(7),9(4,R4)          CONVERT BINARY TO HEX
         TR    HEX(6),TRANSTBL
         MVC   LINE+10(6),HEX
         LA    R1,LINE+25
         LA    R0,5
CHEKNAM3 CLC   0(8,R4),0(R5)
         BNE   PRNT3
         MVC   0(8,R1),8(R5)
         LA    R1,10(R1)
         BCT   R0,CONTINU3
         BAL   R7,PRINT2
CONTINU3 BXLE  R5,R8,CHEKNAM3
PRNT3    BAL   R7,PRINT2
         BXLE  R4,R10,NEWSECT3
         SPACE
         FREEMAIN L,LA=LENGTHS,A=ADDRS FREE STORAGE
         SPACE
         LA    R15,0                   SET CONDITION CODE
         TITLE 'COMPLETE - RETURN TO OS'
***********************************************************************
*                                                                     *
*        COMPLETE - RETURN TO OS                                      *
*                                                                     *
***********************************************************************
         SPACE
ALLDONE $RTRN  RC=(R15)                RETURN
         TITLE 'SUBROUTINE TO FIND REFERENCING CSECT'
***********************************************************************
*                                                                     *
*        FIND REFERENCING CONTROL SECTION                             *
*                                                                     *
*        SUBROUTINE TO DETERMINE THE NAME OF THE REFERENCING CSECT.   *
*        LINKAGE EDITOR GIVES THE RELATIVE LOCATION OF THE REFERENCE. *
*                                                                     *
*         R2  - CSECT NAME TABLE POINTER                              *
*         R3  - REFERENCE TABLE POINTER                               *
*         R4  -                                                       *
*         R5  - REFERENCE TABLE POINTER                               *
*         R6  - REFERENCE TABLE ENTRY LENGTH                          *
*         R7  - REFERENCE TABLE LIMIT (LAST ENTRY USED)               *
*         R8  - REFERENCE TABLE ENTRY LENGTH                          *
*         R9  - REFERENCE TABLE LIMIT (LAST ENTRY IN TABLE)           *
*         R10 - CSECT TABLE ENTRY LENGTH                              *
*         R11 - CSECT TABLE LIMIT                                     *
*                                                                     *
***********************************************************************
         SPACE
FINDREF  ST    R15,SAVERTRN            SAVE RETURN ADDRESS
         CLI   33(R1),C' '             CHECK FOR BLANK NAME
         BE    REFRTRN
         CLI   32(R1),C'$'             CHECK FOR $ CSECT NAME
         BE    REFRTRN
         MVC   NAME(8),33(R1)
*--------FIND REFERENCING CSECT
         LA    R0,5                    LOAD FIELD LENGTH
         BAL   R14,HEXBIN              CONVERT ORIGIN TO BINARY
COMPORG  C     R15,24(R2)              COMPARE ORIGINS
         BL    MAYBE
         LA    R2,16(R2)               INCREMENT TO NEXT CONTROL SECT
         B     COMPORG
MAYBE    C     R15,8(R2)
         BNL   FOUNDREF
         S     R2,=F'16'
         B     MAYBE
*--------FOUND REFERENCING CSECT - SEE IF ALREADY IN TABLE
FOUNDREF CLC   0(8,R2),8(R5)
         BE    SAMEREF
         LA    R3,16(R5)
         ST    R3,FIRSTREF
         B     ADDREF
SAMEREF  L     R3,FIRSTREF
         LR    R7,R5
COMPREF  CLC   NAME(8),0(R3)
         BE    REFRTRN
         BXLE  R3,R6,COMPREF
*--------NEW REFERENCE - ADD TO TABLE
ADDREF   BXH   R5,R8,TBL2OVER
         MVC   0(8,R5),NAME
         MVC   8(8,R5),0(R2)
REFRTRN  L     R15,SAVERTRN            RESTORE RETURN ADDRESS
         BR    R15                     RETURN
         TITLE 'EBCDIC HEX TO BINARY CONVERSION SUBROUTINE'
***********************************************************************
*                                                                     *
*        EBCDIC HEX TO BINARY CONVERSION SUBROUTINE                   *
*                                                                     *
*         R0  - NUMBER OF CHARACTERS IN INPUT FIELD                   *
*         R1  - ADDRESS OF FIRST CHARACTER OF INPUT FIELD             *
*         R7  - WORK REGISTER                                         *
*         R15 - VALUE RETURNED                                        *
*                                                                     *
***********************************************************************
         SPACE
HEXBIN   SR    R15,R15
         SR    R7,R7
HEXSHIFT SLA   R15,4                   SHIFT LEFT 4 BITS
         CLI   0(R1),C' '              TEST FOR BLANK
         BE    HEXINCR                 TREAT BLANKS AS ZEROS
         CLI   0(R1),C'0'              TEST FOR NUMBERS
         BNL   HEXAND
         LA    R15,9(R15)              ALPHABETIC - ADD 9
HEXAND   NI    0(R1),X'0F'             CLEAR ZONE
         IC    R7,0(R1)                INSERT DIGIT INTO REG 7
         AR    R15,R7                  ADD DIGIT TO RESULT REGISTER
HEXINCR  LA    R1,1(R1)                INCREMENT POINTER
         BCT   R0,HEXSHIFT             DECREMENT COUNT AND LOOP
         BR    R14                     RETURN
         TITLE 'PRINT A LINE OF XREF LISTING'
***********************************************************************
*                                                                     *
*        PRINT A LINE OF XREF LISTING                                 *
*                                                                     *
*          R3 - LINE COUNTER                                          *
*          R7 - RETURN ADDRESS                                        *
*                                                                     *
***********************************************************************
         SPACE
PRINT2   CLI   LINE+1,C' '
         BNE   INCRLINE
         CLI   LINE+25,C' '
         BE    PRNTRTRN
INCRLINE BCT   R3,PUT                  DECREMENT & TEST LINE COUNT
         PUT   SYSPRINT,HEDR           PRINT HEDR
         PUT   SYSPRINT,BLANK          PRINT BLANK LINE
         LA    R3,50                   RESET LINE COUNTER TO 50
PUT      PUT   SYSPRINT,LINE           PRINT LINE
         LA    R1,LINE+25              INITIALIZE POINTER
         LA    R0,5                    SET COUNTER
         MVC   LINE+1(132),LINE        CLEAR LINE
PRNTRTRN BR    R7                      RETURN
         TITLE 'ERRORS'
***********************************************************************
*                                                                     *
*        ERRORS                                                       *
*                                                                     *
***********************************************************************
         SPACE
*--------LINK MAP WAS NOT PRODUCED USING XREF
NOXREF   PUT   SYSPRINT,BADMAP
         B     FREEMAIN
*--------CSECT NAME TABLE OVERFLOW
TBL1OVER PUT   SYSPRINT,OVER1
         B     FREEMAIN
*--------REFERENCE TABLE OVERFLOW
TBL2OVER PUT   SYSPRINT,OVER2
         B     FREEMAIN
*--------UNABLE TO LOCATE ENTRY POINT
NOENTRY  PUT   SYSPRINT,NOENTPT
*--------FREE STORAGE USED FOR TABLES
FREEMAIN FREEMAIN L,LA=LENGTHS,A=ADDRS FREE STORAGE
         SPACE
         LA    R15,12                  SET CONDITION CODE
         B     ALLDONE
         TITLE 'DATA AREAS'
***********************************************************************
*                                                                     *
*        DATA AREAS                                                   *
*                                                                     *
***********************************************************************
         SPACE
MOVEPARM MVC   PARMVAL(0),0(R3)        << EXECUTED INSTRUCTION >>
COMPNO   CLC   PARMVAL(0),=C'NO '      << EXECUTED INSTRUCTION >>
COMPXREF CLC   PARMVAL(0),=C'XREF '    << EXECUTED INSTRUCTION >>
COMPNOX  CLC   PARMVAL(0),=C'NOXREF '  << EXECUTED INSTRUCTION >>
COMPPRT  CLC   PARMVAL(0),=C'PRINT '   << EXECUTED INSTRUCTION >>
COMPNOP  CLC   PARMVAL(0),=C'NOPRINT ' << EXECUTED INSTRUCTION >>
MOVELONG MVC   ERRMSG03+22(0),0(R3)    << EXECUTED INSTRUCTION >>
         SPACE
SAVEAREA DC    18F'0'                  SAVE AREA
         SPACE
         LTORG
         SPACE
LENGTHS  DS    0D                      SIZES OF GETMAINED TABLES
UNREFLEN DC    A(20*8)                 UNREFERENCED TABLE LENGTH
SECTLEN  DC    A(250*16)               CSECT TABLE LENGTH
REFLEN   DC    X'80',AL3(1250*16)      REFERENCE TABLE LENGTH
         SPACE
ADDRS    DS    0D
UNREFTBL DS    A                       UNREFERENCED TABLE ADDRESS
SECTTABL DS    A                       CSECT TABLE ADDRESS
REFTABLE DS    A                       REFERENCE TABLE ADDRESS
         SPACE
TRANSTBL EQU   *-X'F0'                 TRANSLATE TABLE FOR BIN/HEX
         DC    C'0123456789ABCDEF'          CONVERSION
HEX      DC    CL8' '                  HEX CONVERSION WORK AREA
DECIMAL  DC    D'0'
PASS     DC    F'0'                    PASS NUMBER
SAVE     DC    CL16' '                 SAVE AREA FOR SORT
NAME     DC    CL8' '                  CSECT NAME
FLAGS    DC    X'00'                   INDICATORS
$BADPARM EQU   X'80'                     BAD PARAMETER DETECTED
$NOXREF  EQU   X'40'                     NO XREF
$NOPRINT EQU   X'20'                     DO NOT PRINT LINK MAP
PARMVAL  DC    CL8' '                  PARM VALUE
         DC    C' '                    EXTRA BLANK
SAVERTRN DS    A                       SAVED RETURN ADDRESS FOR FINDREF
FIRSTREF DC    A(0)
FIRSTSEC DS    A
HEDR     DC    CL133'1 CSECT   ORIGIN  SEG                      REFEREN+
               CES'
BLANK    DC    CL133' '
LINE     DC    CL133' '
UNREFNCD DC    CL133' THE FOLLOWING CONTROL SECTIONS ARE UNREFERENCED'
BADSYSIN DC    CL133' *** UNABLE TO OPEN SYSIN'
BADMAP   DC    CL133' *** LINK MAP WAS NOT PRODUCED USING XREF'
NOENTPT  DC    CL133' *** UNABLE TO LOCATE ENTRY POINT'
OVER1    DC    CL133' *** CSECT NAME TABLE OVERFLOW'
OVER2    DC    CL133' *** REFERENCE TABLE OVERFLOW'
ALLREFCD DC    CL133' ALL CONTROL SECTIONS REFERENCED'
ERRMSG01 DC    CL133' INVALID KEYWORD -'
ERRMSG02 DC    CL133' AMBIGUOUS KEYWORD - '
ERRMSG03 DC    CL133' PARAMETER TOO LONG - '
         EJECT
SYSPRINT DCB   DDNAME=SYSPRINT,                                        +
               DSORG=PS,                                               +
               MACRF=PM,                                               +
               RECFM=FBA,                                              +
               LRECL=133,                                              +
               BLKSIZE=3458
         EJECT
SYSIN    DCB   DDNAME=SYSIN,                                           +
               DSORG=PS,                                               +
               MACRF=GM,                                               +
               RECFM=FBA,                                              +
               LRECL=121,                                              +
               EODAD=PHASE2
         END
