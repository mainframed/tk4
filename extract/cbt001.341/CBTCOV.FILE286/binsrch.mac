 BINSRCH: PROC(COMP,LEFT,RIGHT,ROOT) REORDER;
 /****************************  BINSRCH   ******************************
 *                                                                     *
 * NAME - BINSRCH.                                                     *
 *                                                                     *
 * DATE OF LAST MODIFICATION - 77080.                                  *
 *                                                                     *
 * AUTHORS - COLIN GORDON.                                             *
 *                                                                     *
 * FUNCTION.                                                           *
 *         ALLOWS PL/I PROGRAMS TO USE A BINARY SEARCH TECHNIQUE       *
 *         ON UNSORTED TABLES.                                         *
 *         ALSO IT SHOULD IMPROVE EXECUTION TIME ON SORTED TABLES      *
 *             BECAUSE THE SEARCH ROUTINE USES ASSIGNMENT STATEMENTS   *
 *             RATHER THAN DIVIDE STATEMENTS.                          *
 *                                                                     *
 * BASIC  FLOW.                                                        *
 *         SORT IS SET TO THE SORTED POSITIONS OF TABLE                *
 *            ROOT IS SET TO POINT TO THE LOGICAL MIDDLE OF THE TABLE. *
 *         LEFT IS SET UP TO CONTAIN THE POSITION OF THE NEXT COMPARE  *
 *             IF THE CURRENT COMPARE IS HIGH.                         *
 *         RIGHT IS SET UP TO CONTAIN THE POSITION OF THE NEXT COMPARE *
 *         IN THE TABLE IF THE CURRENT COMPARE IS LOW.                 *
 *                                                                     *
 * ENTERED  FROM - ANY PL/I OPTIMISING PROGRAM..                       *
 *                                                                     *
 * INPUT.                                                              *
 *         COMP - THE TABLE TO BE SEARCHED.                            *
 *                                                                     *
 * OUTPUT.                                                             *
 *         LEFT - AN ARRAY OF HALFWORD BINARY WHICH CONTAINS THE       *
 *         SUBSCRIPT OF THE NEXT FIELD IN TABLE TO BE COMPARED IF      *
 *         THE CURRENT COMPARE IS HIGH.                                *
 *         RIGHT - CONTAINS THE SUBSCRIPTS OF THE NEXT FIELD IN TABLE  *
 *         TO BE COMPARED IF THE CURRENT COMPARE IS LOW.               *
 *         ROOT - CONTAINS THE SUBSCRIPT OF THE LOGICAL MIDDLE OF      *
 *         TABLE. I.E. WHERE THE BINARY SEARCH IS TO START.            *
 *                                                                     *
 * EXTERNAL  REFERENCES.                                               *
 *         NONE                                                        *
 *                                                                     *
 * MACROS  REFERENCED.                                                 *
 *         NONE                                                        *
 *                                                                     *
 * TABLES  REFERENCED.                                                 *
 *         NONE                                                        *
 *                                                                     *
 * EXITS.                                                              *
 *         NONE                                                        *
 *                                                                     *
 * MESSAGES.                                                           *
 *         NONE                                                        *
 *                                                                     *
 * ERROR  HANDLING.                                                    *
 *         NONE                                                        *
 *                                                                     *
 * ENVIRONMENT - PL/I OPTIMISED PROGRAM..                              *
 *                                                                     *
 * RESTRICTIONS.                                                       *
 *         CALLED FROM PL/I OPT PROGRAMS ONLY.                         *
 *                                                                     *
 *****************************  BINSRCH   ****************************/
 DCL       COMP(*) CHAR(*);
 DCL     LEFT(*) FIXED BIN(15);
 DCL     RIGHT(*) FIXED BIN(15);
 DCL     ROOT   FIXED BIN(15);
 DCL     (HB,LB,I,J,K)   FIXED BIN(15);
 DCL     SORT(LBOUND(COMP,1):HBOUND(COMP,1)) FIXED BIN(15);
 DCL     GO BIT(1) INIT('1'B) STATIC;
 DCL      (HBOUND,LBOUND) BUILTIN;
           HB = HBOUND(COMP,1);
           LB = LBOUND(COMP,1);
           DO I = LB TO HB;
            SORT(I) = I;
           END;
           DO I = (HB-1) BY -1 TO LB WHILE(GO);
            GO = '0'B;
              DO J = LB TO I;
               IF COMP(SORT(J)) > COMP(SORT(J+1))
                  THEN DO;
                    ROOT = SORT(J);
                     SORT(J) = SORT(J+1);
                     SORT(J+1) = ROOT;
                     GO = '1'B;
                  END;
              END;
           END;
           LB = LB-1;                /* OPTIMISATION */
           I=0;
           DO J = 1 REPEAT J+J
                 WHILE(J <=(HB-LB));
              DO K = (J+LB) BY J+J TO HB;
                 IF I ^= 0 THEN  LEFT(SORT(K)) = SORT(K-I);
                           ELSE LEFT(SORT(K)) = LB;
                 DO WHILE(I > (HB-K));
                    I=I/2;
                 END;
                 IF I ^= 0 THEN RIGHT(SORT(K)) = SORT(K+I);
                           ELSE RIGHT(SORT(K)) = LB;
              END;
              I=J;
           END;
           ROOT = SORT(I+LB);
           END;
