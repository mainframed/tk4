A#SORT              WRITEUP

   A#SORT IS A SUBROUTINE TO BE CALLED FROM A PL/I OPTIMIZER PROGRAM
TO INVOKE THE OPERATING SYSTEM SORT/MERGE PROGRAM. IT PROVIDES A MUCH
SIMPLER INTERFACE FOR THE PROGRAMMER THAN DOES THE 'PLISRTD' INTERFACE
PROVIDED AS PART OF THE PROGRAM PRODUCT. DATA IS PASSED BY USE OF
STANDARD PL/I WRITE AND READ STATEMENTS ADDRESSED TO A DUMMY FILE.

1. INVOCATION:
   SORTING IS INITIATED BY CALLING A#SORT WITH FOUR ARGUMENTS.
     EXAMPLE  :  CALL A#SORT (FILE,SORT_STMT, REC_STMT, STORAGE);

THE FIRST ARGUMENT IS THE NAME OF A DUMMY FILE. THIS FILE WILL BE USED
TO PASS RECORDS BACK AND FORTH BETWEEN SORT AND THE USERS PROGRAM. IT
IS NOT NECESSARY TO DECLARE THE FILE SINCE IT WILL ACQUIRE ALL NEEDED
ATTRIBUTES CONTEXTUALLY FROM SUBSEQUENT WRITE AND READ STATEMENTS. IF
IT IS NECESSARY TO DECLARE DUE TO INSTALLATION STANDARDS, IT SHOULD
ONLY HAVE THE 'RECORD' AND 'FILE' ATTRIBUTES. NO 'OPEN' OR 'CLOSE'
STATEMENTS SHOULD BE CODED FOR THE FILE. IT IS UNNECESSARY TO HAVE A
'DD' CARD IN THE JCL FOR THE FILE.

THE SECOND ARGUMENT MUST BE A CHARACTER STRING CONTAINING THE 'SORT'
STATEMENT AS SPECIFIED IN THE PL/I PROGRAMMERS GUIDE OR THE SORT/MERGE
MANUAL.

THE THIRD ARGUMENT MUST BE A CHARACTER STRING CONTAINING THE 'RECORD'
STATEMENT AS SPECIFIED IN THE PL/I PROGRAMMERS GUIDE OR THE SORT/MERGE
MANUAL. THE 'TYPE' AND 'LENGTH' OPERANDS ARE REQUIRED.

THE FOURTH ARGUMENT IS A NUMBER WHICH, IF POSITIVE, INDICATES THE AMOUNT
OF STORAGE WHICH THE SORT IS TO USE. IF IT IS NEGATIVE OR ZERO, IT
INDICATES THE AMOUNT OF STORAGE WHICH SORT IS NOT TO USE. IF THIS OPTION
IS USED, THE SUBROUTINE WILL DETERMINE THE AMOUNT OF AVAILABLE STORAGE
AND HAVE THE SORT USE ALL OF IT EXCEPT FOR THE AMOUNT INDICATED BY THE
FOURTH ARGUMENT. IT IS ADVISABLE TO MAKE SURE THAT ALL FILES THAT
WILL BE OPENED ARE OPENED BEFORE CALLING A#SORT, SINCE OTHERWISE THERE
MIGHT NOT BE ENOUGH STORAGE AVAILABLE TO ACQUIRE BUFFERS. SEE ALSO
THE DISCUSSION OF 'PLIXOPT' AND 'ISA' IN THE PROGRAMMERS GUIDE.

2. PASSING DATA TO BE SORTED.
   ONCE THE SORT HAS BEEN INITIATED BY CALLING A#SORT, EACH RECORD TO
BE SORTED MAY BE PASSED TO SORT BY CODING A WRITE STATEMENT SUCH AS:
     WRITE FILE(SORTFILE) FROM (RECORD);
WHERE 'SORTFILE' IS THE FILE NAME PASSED AS THE FIRST ARGUMENT TO A#SORT

3. RETRIEVING SORTED RECORDS.
   WHEN ALL THE INPUT RECORDS HAVE BEEN PASSED TO SORT, THE PROGRAM
MAY RETRIEVE THE RESULTS OF THE SORT BY CODING A READ STATEMENT SUCH AS:
           READ FILE(SORTFILE) INTO(RECORD);
WHERE 'SORTFILE' IS THE FILE PASSED AS A FIRST ARGUMENT TO A#SORT. WHEN
THE LAST RECORD OUT OF THE SORT HAS BEEN PASSED AND THE PROGRAM ISSUES
ANOTHER 'READ', THE 'ENDFILE' CONDITION WILL BE RAISED FOR THE DUMMY
FILE. THIS NOTIFIES THE USER THAT THE SORTING IS COMPLETE.  AT THIS
POINT THE DUMMY FILE HAS BEEN 'CLOSED' ALREADY AND NO FURTHER USER
ACTION IS NECESSARY.

4. ERROR CONDITIONS.
   WHEN AN ERROR IS DETECTED BY A#SORT IT WILL RAISE AN APPROPRIATE
PL/I CONDTION. THE FOLLOWING LIST GIVES ALL OF THE ERRORS GENERATED BY
A#SORT.

CONDITION  ONCODE  EXPLANATION
---------  ------  -----------------------------------------------------
UNDEFINEDFILE
           81      ATTRIBUTES DECLARED FOR DUMMY FILE WERE INCORRECT.
           82      A#SORT WAS PASSED AN OPEN FILE.
           83      LENGTH OPERAND MISSING ON RECORD STATEMENT
           84      INSUFFICIENT STORAGE AVAILABLE
           85      SORT DID NOT START PROPERLY. SEE SYSOUT.
           86      INVALID VALUE FOR 'TYPE' ON 'RECORD' STATEMENT
           87      'TYPE' MISSING ON 'RECORD' STATEMENT

RECORD
           21      RECORD VARIABLE WAS TOO SHORT
           22      RECORD VARIABLE WAS TOO LONG
           23      ZERO LENGTH RECORD

ERROR
           9200    SORT TERMINATED BY AN ERROR CONDITION. SEE SYSOUT
           1009    INVALID I/O STATEMENT ATTEMPTED.

5.CAVEATS.
   A#SORT ATTACHES SORT/MERGE AND USES WAIT AND POST TO COMMUNICATE WITH
IT. THIS HAS SLIGHT BIT MORE OVERHEAD THAN THE METHOD USED BY PLISRTD.
THIS IS OFFSET SOMEWHAT BY THE FACT THAT A#SORT DEALS WITH ANY STRUCTURE
THAT IS AMMENABLE TO RECORD I/O AND THE DATA DOES NOT HAVE TO BE FORCED
INTO A CHARACTER STRING AS IT DOES FOR PLISRTD.
   IF THE PROGRAM SHOULD ATTEMPT TO TERMINATE FOR ANY REASON BEFORE
THE ENDFILE CONDITION HAS BEEN RAISED THE SORT SUB-TASK WILL STILL BE
ACTIVE AND A SYSTEM A03 ABEND WILL OCCUR. THIS CAN BE PREVENTED BY
READING ALL THE RECORDS FROM THE SORT FILE UNTIL 'ENDFILE' IS RAISED.

6. SAMPLE PROGRAM.
   THE FOLLOWING SAMPLE PROGRAM READS IN VARYING STRINGS FROM SYSUT1.
ANY WHICH CONTAIN THE CHARACTERS 'IEE' ARE SORTED ON THEIR FIRST TEN
COLUMNS (AFTER ACCOUNTING FOR THE FOUR BYTE OS RECORD DESCRIPTOR).
THE SORTED RECORDS ARE THEN LISTED ON SYSPRINT.


------------------------------------------------------------------------
 SAMPLE:PROCEDURE OPTIONS(MAIN) REORDER;
  %INCLUDE (A#SORT);
   DECLARE
     PLIXOPT
           CHAR(10) VAR
           EXTERNAL INITIAL('ISA(4K)'),
     RECORD
          CHARACTER(120) VARYING
   ;
   CALL A#SORT(SRTFILE,
                ' SORT FIELDS=(4,10,CH,A),SIZE=E3000',
                ' RECORD TYPE=V,LENGTH=(124,,,,86) ',
                0);
   ON ENDFILE(SYSUT1) GO TO END_SYSUT1;
   DO WHILE ('1'B);
     READ FILE(SYSUT1) INTO (RECORD);
     IF INDEX(RECORD,'IEE') THEN WRITE FILE(SRTFILE) FROM(RECORD);
   END;
 END_SYSUT1: CLOSE FILE(SYSUT1);
   ON ENDFILE(SRTFILE) STOP;
   DO WHILE('1'B);
     READ FILE(SRTFILE) INTO (RECORD)  ;
     PUT SKIP LIST(RECORD);
   END;
 END;
------------------------------------------------------------------------

7. JCL.
   AS FOR ANY INVOKED SORT, IT IS NECESSARY TO SUPPLY THE FOLLOWING DD
STATEMENTS:  SYSOUT, SORTLIB, SORTWK01-SORTWKNN. FOR FURTHER INFORMATION
SEE THE PL/I PROGRAMMERS GUIDE OR THE SORT/MERGE MANUAL.

8. LOGIC.
   WHEN A#SORT IS INITIALLY CALLED IT WILL VALIDATE ITS PARAMETERS AND
ATTACH THE SORT/MERGE PROGRAM UNDER THE NAME 'SORT'. IT WILL THEN SET
UP A DUMMY PL/I FILE CONTROL BLOCK TO ALLOW THE SUBSEQUENT READ AND
WRITE STATEMENTS TO GO TO A#SORT. IT WILL THEN WAIT EITHER FOR THE E15
EXIT TO BE ENTERED OR FOR THE SORT SUB-TASK TO TERMINATE. IF THE SORT
TERMINATES AT THIS POINT UNDEFINED FILE IS RAISED WITH AN ONCODE OF 85.
IF THE E15 EXIT IS ENTERED SORT IS WAITING FOR ITS FIRST RECORD. CONTROL
IS PASSED BACK TO THE CALLER IN EXPECTATION OF A WRITE BEING ISSUED TO
PASS THE FIRST INPUT RECORD.
  WHEN AN I/O STATEMENT IS ISSUED THE E15 EXIT WILL BE PASSED THE RECORD
VIA A BUFFER OBTAINED DURING INITIALISATION.  HOWEVER, IF THE I/O WAS A
READ, THE SORT WILL BE ALLOWED TO PROCEED UNTIL THE E35 EXIT HAS BEEN
CALLED AT WHICH TIME THE SORTED RECORD WILL BE RETURNED TO THE CALLER.
   WHEN NO MORE RECORDS ARE AVAILABLE THE SORT IS COMPLETED, THE SORT
SUB-TASK IS DETACHED, AND THE PSEUDO-FILE IS MARKED AS CLOSED. THEN THE
ENDFILE CONDITION IS RAISED TO RETURN CONTROL TO THE PL/I PROGRAM.

