A#SORT   CSECT
*
* DECLARE
*   A#SORT
*     ENTRY(
*        FILE,                    /* INTERFACE FILE */
*        CHAR(*) VARYING,         /* SORT CONTROL CARD */
*        CHAR(*) VARYING,         /* RECORD CONTROL CARD */
*        FIXED BINARY(31,0)       /* SORT CORE SIZE */
*     )
*     OPTIONS (ASSEMBLER INTER)
*  ;
*
* AFTER THE CALL, WRITE THE RECORDS TO BE SORTED TO THE INTERFACE
* FILE. WHEN ALL RECORDS HAVE BEEN WRITTEN, READ THEM BACK FROM
* THE SAME INTERFACE FILE. ENDFILE WILL BE RAISED AFTER THE LAST
* RECORD HAS BEEN PASSED.
*
* THE CORE SIZE MAY BE A VALUE, ZERO INDICATING MAX, OR A NEGATIVE
* NUMBER INDICATING HOW MUCH SHOULD BE LEFT UNUSED BY SORT.
*
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
         USING A#SORT,R15
         SAVE  (14,11),,*
         LR    R11,R15
         LR    R2,R13             SAVE SAVE AREA ADDRESS
         LM    R13,R14,72(R13)    GET LWS ADDRESS
         ST    R2,4(,R13)         SAVE BACK CHAIN
         ST    R14,76(R13)        PROPAGATE N.A.B.
         DROP  R15
         USING A#SORT,R11         ESTABLISH BASE REGISTER
         LM    R2,R5,0(R1)        GET THE PARAMETER LIST
         L     R2,0(R2)           GET THE DCLCB ADDRESS
         MVC   EDITAREA,4(R2)      GET DCLCB CONTENTS
         NC    EDITAREA,EDITDATA   VALIDATE IT
         MVI   ERRP+1,1            SET ONCODE=81
         BNZ   UNDF                IF FILE DECLARED WRONG, BOMB OUT
         ST    R2,ERRP+4           QUALIFY THE ERROR
         ST    R2,FCB+16          SAVE DCLCB ADDRESS IN FCB
         L     R6,4(R12)          GET THE PRV ADDRESS
         A     R6,0(R2)           POINT AT THE FILE PR
         CLC   0(4,R6),100(R12)   IS THE FILE OPEN
         MVI   ERRP+1,2            SET ONCODE=82
         BNE   UNDF               YES, GO BOMB OUT
         LA    R7,FCB
         ST    R7,0(R6)           OPEN THE FILE
         LA    R6,2(R3)           POINT AT THE START OF THE SORT STMT
         ST    R6,PARMS+2
         AH    R6,0(R3)           INCREMENT TO END OF SORT STATEMENT
         BCTR  R6,0               POINT TO LAST CHARACTER
         ST    R6,PARMS+6
         LA    R6,2(R4)           POINT AT FRONT OF RECORD STATEMENT
         ST    R6,PARMS+10
         LH    R9,0(,R4)          GET LENGTH OF RECORD STATEMENT
         AR    R9,R6              POINT PAST END OF IT
         BCTR  R9,0               POINT AT THE LAST CHARACTER
         ST    R9,PARMS+14        THAT'S WHAT SORT WANTS
         SH    R9,=H'7'           BACK UP TO LAST SCANABLE POINT
         AH    R6,=H'7'           SKIP OVER RECORD VERB
         LA    R8,1               SET SCAN INCREMENT
SCAN     CLC   0(5,R6),=C'TYPE='  IS THIS THE RECORD TYPE
         BE    TYPE
         CLC   0(7,R6),=C'LENGTH=' HOW ABOUT RECORD LENGTH
         BE    LENGTH
ENDSCAN  BXLE  R6,R8,SCAN         INSPECT THE NEXT COLUMNS
         SPACE
         TM    FCBRECFM,X'C0'     WAS EITHER RECFM BIT SET
         MVI   ERRP+1,7            SET ONCODE=87
         BZ    UNDF               NO, COMPLAIN
GOTBOTH  L     R0,FCBLRECL        GET DATA LENGTH
         LTR   R0,R0              WAS ONE SPECIFIED
         MVI   ERRP+1,3            SET ONCODE=83
         BZ    UNDF               NO, RAISE UNDEFINEDFILE
         L     R15,108(,R12)      GET NON-LIFO ROUTINE IN TCA
         BALR  R14,R15            ALLOCATE THE BUFFER
         ST    R1,RECORDA         SAVE ITS ADDRESS
         SPACE
         L     R6,0(R5)           GET CORE VALUE
         LTR   R6,R6              TEST FOR A VALUE
         BP    GOTCORE
         GETMAIN VC,LA=LIST,A=ADDR,SP=23
         LTR   R15,R15            WAS THERE ENOUGH
         MVI   ERRP+1,4            SET ONCODE=84
         BNZ   UNDF
         FREEMAIN V,A=ADDR,SP=23
         A     R6,AVAIL           COMPUTE SIZE TO USE
         SH    R6,=H'4096'        LEAVE SOME ADDITIONAL SLOP
GOTCORE  ST    R6,PARMS+26
         MVI   SORTECB,0          MAKE SURE ECB STARTS OUT 0
         ATTACH EP=SORT,MF=(E,PARMPTR),ECB=SORTECB,DPMOD=1
         ST    R1,TCBAD
         WAIT  ECBLIST=ECBLIST    WAIT FOR SORT TO WANT INPUT
         TM    SORTECB,X'40'      DID SORT START OK
         BZ    INITRET            YES, CONTINUE
         DETACH TCBAD             REMOVE DEAD SORT
         MVI   ERRP+1,5            SET ONCODE=85
         B     UNDF               GO COMPLAIN
INITRET  DS    0H
         L     R13,4(,R13)        CHAIN BACK
         RETURN (14,11)
EDITAREA DC    XL12'0'
EDITDATA DC    X'FDFEFFFFFEFFEFFFFFFFFFFF'  NOT ALLOWED BITS
         SPACE 3
TYPE     CLI   5(R6),C'F'         ARE THEY RECFM=F
         BE    TYPEF              YES, GO SAVE THE INFORMATION IN FCB
         CLI   5(R6),C'V'         IS IT TYPE=V
         MVI   ERRP+1,6            SET ONCODE=86
         BNE   UNDF               NO, HE WON'T GET FAR
         OI    FCBRECFM,X'40'     SET TYPE V FLAG
         B     ENDTYPE
TYPEF    OI    FCBRECFM,X'80'     SET TYPE=F FLAG
ENDTYPE  AH    R6,=H'7'           SKIP THE REST OF THE PARAMETER
         B     SCAN               KEEP ON LOOKING
         SPACE 2
LENGTH   CLI   7(R6),C'('         IS IT PARENTHESIZED
         BNE   NOLPAR             NO, MUST BE SINGLE FIELD ONLY
         AR    R6,R8              INCREMENT OVER PARENTESIS
NOLPAR   SR    R7,R7              CLEAR FOR IC
         SR    R10,R10            CLEAR LRECL ACCUMULATOR
LLOOP    CLI   7(R6),C'0'         END OF FIELD YET
         BL    ENDL
         IC    R7,7(R6)           PICK UP THE NEXT DIGIT
         SH    R7,=AL2(C'0')      STRIP OFF THE ZONE BITS
         MH    R10,=H'10'         SHIFT THE PREVIOUS DIGITS
         AR    R10,R7             ADD IN THE NEW DIGIT
         BXLE  R6,R8,LLOOP        GO GET NEXT DIGIT
ENDL     ST    R10,FCBLRECL
         TM    FCBRECFM,X'C0'     HAVE WE ALREADY SEEN TYPE
         BNZ   GOTBOTH            YES, NO MORE SCANNING
         AH    R6,=H'7'           INCREMENT OVER THE PARAMETER
         B     ENDSCAN            CONTINUE PARSING
         EJECT
UNDF     DS    0H
         L     R1,RECORDA         GET BUFFER ADDRESS
         LTR   R1,R1              IS THERE ONE
         BZ    NOBUFF
         L     R0,FCBLRECL        GET THE BUFFER LENGTH
         L     R15,112(,R12)      FREE NON-LIFO ROUTINE ADDRESS
         BALR  R14,R15
NOBUFF   MVI   ERRP,X'12'         CONDITION IS UNDEFINEDFILE
         L     R15,120(0,12)       GET IBMBERRB ADDRESS
         LA    R1,ERRP
         BALR  R14,R15
         L     R13,4(,R13)        CHAIN BACK
         RETURN (14,11)
         DROP  R11
         EJECT
*  ROUTINE CALLED FOR EACH PLI I/O REQUEST
TRANS    LR    R11,R15
         USING TRANS,R11          ESTABLISH ADDRESSABILITY
         TM    FCB+45,X'80'       PREVIOUS READ
         BO    READING
         WAIT  ECBLIST=ECBLIST
         TM    SORTECB,X'40'      DID SORT COMPLETE UNTIMELY
         BO    SORTDONE
         MVI   SORTRDY,0          RESET THE COMMUNICATION ECB
         CLI   0(R5),8            IS THIS A WRITE REQUEST
         BNE   FIRSTRD            NO, GO WAIT FOR OUTPUT
         L     R4,RECORDA          POINT AT THE BUFFER FOR SORT
         BAL   R14,MOVER           GO PASS HIM A RECORD
         POST  PLIREADY           TELL SORT TO PROCEED
TRANEXIT L     R13,4(,R13)        BACKCHAIN
         RETURN (14,11)           RESTORE THE REGISTERS
         SPACE 2
FIRSTRD  OI    FCB+45,X'80'
         L     R0,FCBLRECL        GET BUFFER LENGTH
         L     R1,RECORDA         POINT AT THE BUFFER
         L     R15,112(R12)       FREE NON-LIFO ROUTINE FROM TCA
         BALR  R14,R15            GIVE BACK THE BUFFER
         XC    RECORDA(4),RECORDA INDICATE THAT BUFFER IS NO LONGER IN
         POST  PLIREADY,(R6)       GIVE A NON-ZERO POST CODE
         SPACE
READING  CLI   0(R5),0            IS THIS REALLY A READ
         BNE   ED09               GO COMPLAIN
         WAIT  ECBLIST=ECBLIST     WAIT FOR HIM TO HAVE A RECORD
         TM    SORTECB,X'40'      DID SORT BOMB OUT
         BO    SORTDONE
         MVI   SORTRDY,0          RESET THE COMMUNICATIONS ECB
         L     R4,SORTRDY          GET THE DATA ADDRESS
         LTR   R4,R4               IS THAT END OF DATA
         BZ    TRANEOF             YES, GO SHUT DOWN
         BAL   R14,MOVER           GO GET THE DATA
         POST  PLIREADY            TELL SORT THAT WE GOT IT
         B     TRANEXIT
         SPACE 3
TRANEOF  POST  PLIREADY            TELL SORT TO GO AHEAD AND END
         MVC   ERRP(2),=X'1300'    SET ERROR CODE = ENDFILE
         WAIT  ECB=SORTECB        YES, WAIT FOR SORT TO COMPLETE
DETACH   DETACH TCBAD             DELETE THE TASK
         NI    FCB+45,X'7F'       RESET THE FIRST READ SWITCH
         NI    FCBRECFM,X'3F'     RESET THE RECFM
         NC    FCBLRECL(4),FCBLRECL CLEAR RECORD LENGTH
         L     R1,FCB+16          GET DCLCB ADDRESS
         L     R1,0(,R1)          GET PRV OFFSET
         A     R1,4(,R12)         POINT AT FILE PR
         MVC   0(4,R1),100(R12)   MARK FILE AS CLOSED
TRANSGNL EQU   *
         L     R15,120(,R12)      GET ERROR HANDLER ADDRESS
         LA    R1,ERRP
         BALR  R14,R15            GO DO THE ENDFILE THING
         B     TRANEXIT           RETURN TO USER PROGRAM
         SPACE 3
ED09     MVC   ERRP(2),=X'ED09'   ERROR CODE 1009
         B     TRANSGNL            GO COMPLAIN
         SPACE 3
SORTDONE MVC   ERRP(2),=X'D300'    SET BAD ERROR CODE
         B     DETACH
         EJECT
* SUBROUTINE TO MOVE DATA BETWEEN SORT AND PLI
MOVER    LM    R2,R3,0(R6)         GET RDV CONTENTS
         LA    R3,0(,R3)           CLEAR HIGH BYTE OF LENGTH
         LTR   R3,R3               IS IT NON-ZERO
         BNZ   MOVENZ              YES, GOOD DATA AREA
         MVI   ERRP+1,3            SET ONCODE INCREMENT
         B     RECERR
         SPACE
MOVENZ   L     R5,FCBLRECL         GET DEFAULT DATA LENGTH
         MVI   ERRP+1,0            RESET ERROR FLAG
         TM    FCBRECFM,X'80'      IS IT TYPE=F
         BO    MOVEF               YES, NO RDW
         TM    FCB+45,X'80'        IS THIS A READ
         BZ    MOVEW               NO, RDW DOES NOT EXIST
         LH    R5,0(,R4)           GET ACTUAL SORT RECORD LENGTH
         SH    R5,=H'4'            TAKE OFF THE RDW
MOVEW    LA    R4,4(,R4)           SKIP THE RDW IN THE BUFFER
MOVEF    CLI   4(R6),2             WHAT TYPE OF VARIABLE IS IT
         BL    MOVEA               NOT STRING VARYING
         TM    FCB+45,X'80'        IS THIS A READ
         BO    MOVERD              YES, LEN WILL BE SET
         LH    R3,0(,R2)           GET LENGTH FROM STRING
         CLI   4(R6),3             IS IT BIT VARYING
         BNE   MOVEVAR
         LA    R3,7(,R3)           TAKE CEIL OF LENGTH/8
         SRL   R3,3
         B     MOVEVAR
MOVERD   SH    R3,=H'2'            LESS DATA ROOM IN VARIABLE
MOVEVAR  LA    R2,2(,R2)           POINT TO DATA AREA
MOVEA    CR    R3,R5               CHECK FOR LENGTH CONFLICTS
         BE    MOVEOK              NO PROBLEM AT ALL
         BL    MOVESHRT            RECORD VARIABLE IS TOO SHORT
         MVI   ERRP+1,2            SET ERROR FLAG
         LR    R3,R5               USE THE SHORTER ONE
         B     MOVEOK
         SPACE
MOVESHRT MVI   ERRP+1,1            FLAG AS SHORT RECORD VARIABLE
         LR    R5,R3               USE THE SHORTER ONE HERE TOO
MOVEOK   LR    R7,R5              SAVE THE LENGTH ACTUALLY MOVED
         TM    FCB+45,X'80'        IS THIS A READ
         BO    MOVEIN
         MVCL  R4,R2               MOVE THE DATA
         TM    FCBRECFM,X'80'      IS IT TYPE=F
         BO    MOVED               YES, THAT'S ALL
         LA    R5,4(,R7)          ADD IN SPACE FOR THE RDW
         SLL   R5,16               SHIFT IT TO THE MIDDLE
         L     R4,RECORDA          POINT AT START OF BUFFER
         ST    R5,0(,R4)           COMPLETE THE V-FORMAT RECORD
         B     MOVED
         SPACE 2
MOVEIN   MVCL  R2,R4               GET THE DATA BACK
         CLI   4(R6),2             IS IT A VARYING STRING
         BL    MOVED               NO, GO CHECK FOR RECORD LENGTHS
         BE    MOVECH              YES, IT'S CHAR VAR
         SLL   R7,3               CONVERT BYTE COUNT TO BIT COUNT
MOVECH   L     R2,0(,R6)           GET RDV ADDRESS
         STH   R7,0(,R2)          SET THE STRING LENGTH
         SPACE 3
MOVED    CLI   ERRP+1,1            WAS THERE A LENGTH MISMATCH
         BLR   14                  NO, RETURN TO CALLER
         BH    MOVELONG            YES, VARIABLE WAS TOO LONG
         TM    FCB+45,X'80'        WAS THIS A READ
         BO    RECERR              YES, SHORT VARIABLE IS BAD
         TM    FCBRECFM,X'80'      IS IT TYPE=F
         BO    RECERR              YES, AGAIN THAT'S BAD
         BR    R14                 ALL OK. RETURN TO CALLER
         SPACE
MOVELONG TM    FCB+45,X'80'        WAS IT ON A READ
         BZ    RECERR              NO, A WRITE .. THAT'S BAD
         TM    FCBRECFM,X'80'      WAS TYPE=F
         BZR   R14                 NO, THEN IT'S OK
         CLI   4(R6),2             WAS VARIABLE VARYING LENGTH
         BNLR  R14                 YES, LET HIM GO
         SPACE 3
RECERR   MVI   ERRP,X'11'          SET MAIN CONDITION CODE
         L     R15,120(,R12)       GET ERROR ROUTINE ADDRESS
         LA    R1,ERRP             POINT AT PARAMETER
         BR    R15                 GO SIGNAL RECORD CONDITION
         SPACE 3
         USING BADOP,R15
BADOP    L     R11,=A(TRANS)       SET BASE REGISTER
         DROP  R15
         B     ED09               GO RAISE ERROR
         DROP  R11
         EJECT
         CNOP  2,4
PARMS    DC    AL2(PARMEND-PARMS-2)
         DC    4F'0'              POINTERS TO CONTROL CARDS
         DC    A(E15,E35)         EXIT ROUTINE ADDRESSES
         DC    F'0'               CORE SIZE
         DC    C'DIAG'            GET ALL THE MESSAGES
PARMEND  EQU   *
PARMPTR  DC    X'80',AL3(PARMS)
LIST     DC    F'16384,15728640'
ADDR     DC    F'0'
AVAIL    DC    F'0'
ERRP     DC    X'0000910000000000' PARMS TO INDICATE ON-CONDITION
         EJECT
*  SORT EXIT ROUTINES ENTERED FROM SORT SUB-TASK
E15      SAVE  (2,2)
         LR    R2,R15             SAVE BASE REGISTER
         USING E15,R2
         POST  SORTRDY            TELL PLI TO BUILD THE NEXT RECORD
         WAIT  ECB=PLIREADY       WAIT FOR HIM TO COMPLETE
         MVI   PLIREADY,0          RESET THE COMMUNICATION ECB
         OC    PLIREADY+1(3),PLIREADY+1 DID HE USE A POST CODE
         BNZ   ENDE15             YES, MUST BE TRYING TO RETRIEVE
         L     R1,RECORDA         GET ADDRESS OF WORK AREA
         LA    R15,12             INDICATE INSERTION
         RETURN (2,2)             RETURN TO SORT
         SPACE
ENDE15   LA    R15,8              INDICATE END OF INPUT
         RETURN (2,2)             RETURN FOR GOOD
         DROP  R2
         SPACE 4
E35      SAVE  (2,6)              SAVE THE REGISTERS WE USE
         LR    R6,R15             SET UP A BASE REGISTER
         USING E35,R6
         L     R2,0(,R1)          GET THE OUTPUT RECORD
         POST  SORTRDY,(R2)        PASS THE DATA ADDRESS
         WAIT  ECB=PLIREADY        WAIT FOR PLI TO HAVE TAKEN IT
         MVI   PLIREADY,0         RESET THE ECB
         LA    R15,8              INDICATE END OF OUTPUT
         LTR   R2,R2              IS THERE AN OUTPUT RECORD
         BZ    ENDE35               NO, ALLOW SORT TO GO AWAY
         LA    R15,4              TELL SORT TO DELETE THE RECORD
ENDE35   RETURN (2,6)             GO BACK FOR THE NEXT RECORD
         DROP  R6
         EJECT
*  DUMMY FCB TO INTERFACE WITH COMPILED CODE.
         DS    0F
FCB      DC    X'1004000000000000' ONLY READ AND WRITE ALLOWED
         DC    A(BADOP)            ON INVALID STATEMENT GO RAISE ERROR
         DC    A(TRANS)           TRANSMITTER ADDRESS
         DC    5F'0'              DCLCB, DCB,CHAIN,IN-LINE, ERROR CODE
         DC    X'02310200008020000E000100' ATTRIBUTES
         DC    7F'0'              BLKSIZE, LRECL ETC.
FCBRECFM EQU   FCB+40
FCBLRECL EQU   FCB+52
         SPACE 2
TCBAD    DC    F'0'
RECORDA  DC    A(0)
ECBLIST  DC    A(SORTRDY)
         DC    X'80',AL3(SORTECB)
SORTRDY  DC    F'0'               ECB FOR SORT TO POST
PLIREADY DC    F'0'               ECB FOR PLI TO POST
SORTECB  DC    F'0'
         END
