         TITLE 'CHIMP - MAIN STORAGE MONITOR FOR TSO - 3270S'
CHIMP    CSECT
***********************************************************************
* IN CASE YOU ARE INTERESTED, THE SOURCE OF THE NAME (OR RATHER THE
* JUSTIFICATION FOR THE NAME) OF THIS SILLY PROGRAM IS/WAS:
*
*  COMPUTERIZED HEURISTIC INFORMATION MONITORING PROGRAM  (WHEW!)
*
* THIS COMMAND HAS SEVERAL DIFFERENT MODES OF DISPLAY:
*
*     I   - THIS MODE WILL DISPLAY ONLY THOSE MEMORIES WHICH ARE EITHER
*           SWAPPED IN AND RUNNING OR SWAPPED OUT BUT READY TO RUN.
*     O   - THIS MODE WILL DISPLAY ALL ACTIVE MEMORIES IN THE SYSTEM,
*           REGARDLESS OF LOCATION.
*
*   TO SWITCH BETWEEN MODES, TYPE EITHER I OR O.
*
*
*      YOU MAY ALSO ENTER OPTIONS TO RESTRICT THE OUTPUT TO ONLY
*      TSO MEMORIES (IN EITHER IN/OUT OR WAITING STATUS ACCORDING
*      TO YOUR USE OF THE I AND O OPTIONS ABOVE) OR ONLY STARTED
*      TASK/BATCH JOB MEMORIES:
*
*     T  - RESTRICTS THE OUTPUT TO ONLY TSO MEMORIES
*
*     B  - RESTRICTS THE OUTPUT TO STARTED TASK/BATCH MEMORIES
*
*     A  - RESETS THE TSO/STARTED TASK/BATCH JOB SELECTION.
*
*   TO EXIT FROM THIS COMMAND, SIMPLY TYPE S
*
*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:
*
*    JOB       JOB NAME OF MEMORY
*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.
*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.
*    P         REASON CODE FOR SWAP OUT FROM OUCBPFL.
*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:
*                U  0A MEMORY WAS UNILATERALLY SWAPPED
*                X  09 MEMORY WAS EXCHANGE SWAPPED
*                E  08 AN ENQHOLD HAS BEEN RECEIVED FOR THIS MEMORY
*                S  07 MEMORY REQUESTED SWAP OUT
*                D  06 INVOLUNTARY SWAPOUT DUE TO DETECTED WAIT
*                R  05 SWAPOUT CAUSED BY REAL STORAGE SHORTAGE
*                A  04 SWAPOUT CAUSED BY AUX. STORAGE SHORTAGE
*                L  03 MEMORY SWAPPED OUT BY MS6 LONG WAIT DETECTION
*                I  02 MEMORY IS IN INPUT TERMINAL WAIT
*                T  01 MEMORY IS IN OUTPUT TERMINAL WAIT
*                ?     UNABLE TO DETERMINE SWAPOUT REASON.
*    MEMORY    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.
*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.
*    T         TYPE OF MEMORY (S=STC OR BATCH, T=TSO USER)
*    LOC       CURRENT LOCATION OF THIS MEMORY:
*                IN  SWAPPED IN AND ELIGIBLE TO RUN.
*                OUT SWAPPED OUT BUT READY TO RUN.
*                WT  SWAPPED OUT AND NOT READY TO RUN.
*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.
*                <-> TRANSITIONING BETWEEN STATES.
*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).
*    PG        PERFORMANCE GROUP.
*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE
*              CURRENT TRANSACTION.
*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.
*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS
*               OPERATING).
*    SRV       SERVICE ACCUMULATED IN THE LAST SWAPPED IN PERIOD.
*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         SAVE  (14,12)          SAVE THE CALLERS REGISTERS
         LR    R12,R15          ESTABLISH
         USING CHIMP,R12          ADDRESSABILITY.
         LA    R11,SAVE         SET-UP
         ST    R13,SAVE+4         SAVE
         ST    R11,8(,R13)           AREA
         LR    R13,R11                CHAINING.
FINDCVT  L     R2,16            LOAD PTR TO CVT.
         L     R2,556(,R2)      TO ASVT
         L     R3,516(,R2)      MAXIMUM NUMBER OF ENTRIES
         LA    R4,524(,R2)      FIRST ENTRY MINUS 4.
         LA    R1,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.
         SPACE
ASCBLOOP LA    R4,4(,R4)        BUMP BY FOUR.
         ICM   R5,B'1111',0(R4) LOAD THE PTR.
         BM    NOGOOD           BRANCH IF BAD PTR.
         TM    102(R5),X'04'    TEST FOR SWAPPED OUT.
INOROUT  BO    NOGOOD           BRANCH IF OUT AND NOT READY TO RUN.
         L     R6,144(,R5)       LOAD PTR TO OUCB FOR QUICK TSO CHK
         TM    18(R6),X'20'     CHECK FOR TSO.
TSOORNO  BC    0,NOGOOD         TO BE FILLED IN IF BATCH ONLY.
BATCHORN BC    0,NOGOOD         TO BE FILLED IN LATER.
         TM    17(R6),X'80'     TEST FOR NON-SWAP
*        BO    NOGOOD           BRANCH IF NON-SWAP.
SWAPABLE BC    0,NOGOOD         TO BE FILLED IN LATER.
         SPACE
         MVI   LINE+2,C' '      CLEAR OUTPUT LINE TO BLANKS.
         MVC   LINE+3(77),LINE+2 DITTO.
         MVC   JOB(8),=CL8'STARTING' TO BYPASS GARBAGE
         ICM   R6,B'1111',172(R5) LOAD PTR TO JOBNAME.
         BZ    NOTJOB           BRANCH IF ZERO POINTER.
         MVC   JOB,0(R6)        OTHERWISE, MOVE IN JOBNAME.
         B     JOBOK            BYPASS FURTHER JOBNAME PROCESSING.
NOTJOB   ICM   R6,B'1111',176(R5) PTR IF S/M/L.
         BZ    JOBOK            BYPASS THIS MOVE IF POINTER IS ZERO.
         MVC   JOB,0(R6)        MOVE IN JOBNAME FOR S/M/L MEMORIES.
JOBOK    DS    0H
         SPACE
         ICM   R7,B'1111',56(R5) LOAD POINTER TO THE TOP CSCB.
         BZ    STEPOK           BRANCH IF CSCB POINTER IS ZERO.
         CLI   4(R7),X'04'      CHECK TO SEE IF BATCH JOB OR S/M/L
         BE    STORMT           JOB IS START OR MOUNT
         CLI   4(R7),X'0C'      CHECK TO SEE IF BATCH JOB OR S/M/L
         BE    STORMT           JOB IS START OR MOUNT
         MVC   STEP(8),16(R7)   PICK UP CHCLS.
         B     STEPOK           BYPASS FURTHER CSCB PROCESSING.
STORMT   MVC   STEP(8),8(R7)    PICK UP CHKEY.
STEPOK   DS    0H
         SPACE
         LH    R6,152(,R5)       LOAD ALLOC FRAME COUNT.
         SLL   R6,2             MULTIPLY BY FOUR.
         CVD   R6,WORK          CONVERT TO DECIMAL FORMAT.
         MVC   SIZE(6),=X'2020202120D2' GET READY FOR EDIT.
         ED    SIZE-1(6),WORK+5 EDIT THE RESULT.
         SPACE
         L     R6,144(,R5)      PTR TO OUCB.
         LH    R7,78(,R6)        LOAD OUCBWSS
*        SLL   R7,2             TIMES FOUR FOR K.
         CVD   R7,WORK          CONVERT TO DECIMAL.
         MVC   OUCBWSS(6),=X'202020212040' MOVE IN THE EDIT MASK.
         ED    OUCBWSS-1(6),WORK+5 EDIT THE RESULT.
         SPACE
         TM    18(R6),X'20'     TEST FOR TSO MEMORY
         BZ    NOTTSO           BRANCH IF NOT TSO.
         MVI   TYPE,C'T'        MOVE IN TSO MEMORY INDICATION.
         B     TYPEOK           BYPASS REST OF TYPE PROCESSING.
NOTTSO   MVI   TYPE,C'S'        MOVE IN S/M/L INDICATION.
TYPEOK   DS    0H
         SPACE
         MVC   WHERE,=CL3'IN'   DEFAULT MEMORY POSITION IS IN.
         MVI   LINE+1,X'E8'     DEFAULT TO HI-INTENSITY PROTECTED.
         TM    17(R6),X'80'     TEST FOR NON-SWAP
         BZ    TRYWAIT          BRANCH IF NOT NON-SWAP.
         MVC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYWAIT  DS    0H
         TM    16(R6),X'08'     CHECK FOR WAIT
         BZ    TRYOUT           BRANCH IF NOT.
         MVC   WHERE,=CL3'WT'   MOVE IN WAIT POSITION INDICATION.
         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYOUT   TM    16(R6),X'04'     TRY OUT QUEUE
         BZ    TRYTRIV          IF NOT, GO TRY TRIVIAL QUEUE STATUS.
         MVC   WHERE,=CL3'OUT'  MOVE IN OUT QUEUE POSITION.
         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYTRIV  TM    16(R6),X'02'     CHECK FOR TRIVIAL QUEUE POSITION.
         BZ    WHEREOK          IF NOT, EXIT POSITION PROCESSING.
         MVC   WHERE,=CL3'TRV'  MOVE IN TRIVIAL QUEUE POSITION.
WHEREOK  DS    0H
         TM    16(R6),X'E0'     CHECK FOR TRANSITIONING STATUS
         BZ    NOTTRANS         BRANCH IF MEMORY NOT TRANSITIONING.
         MVC   WHERE(3),=CL3'<->' INDICATE TRANSITIONING.
NOTTRANS DS    0H
         SPACE
         SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.
         IC    R7,43(,R5)       LOAD ASCBDP
         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.
         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.
         STC   R8,DP            STORE INTO OUTPUT FIELD.
         IC    R7,43(,R5)       LOAD THE DISPATCHING PRIORITY AGN.
         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.
         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.
         STC   R8,DP+1          STORE INTO OUTPUT LINE.
         SPACE
         SR    R7,R7            PREPARE FOR THE IC.
         IC    R7,24(,R6)       NEW PGN
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   OUCBPGN(3),=X'202120' MOVE IN THE EDIT MASK.
         ED    OUCBPGN-1(4),WORK+6 EDIT THE OUTPUT FIELD.
         SPACE
         LH    R7,38(,R6)       LOAD OUCBSWC (SWAP COUNT)
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   OUCBSWC(3),=X'202120' MOVE IN THE EDIT MASK.
         ED    OUCBSWC-1(4),WORK+6 EDIT THE OUTPUT FIELD.
         SPACE
         L     R7,88(,R6)       LOAD OUCBWMR
         LTR   R7,R7            SEE IF HI-ORDER BIT IS ON
         BNM   WMROK             INDICATING WMR INVALID.
         MVC   OUCBWMR(5),=C'*N/A*' IF SO, MOVE IN NOT AVAIL INDIC.
         MVI   OUCBWMS+6,C'-'   AND BLANK OUT THE SERVICE COUNTER.
         B     NOWMS            BY-PASS THE SERVICE PROCESSING.
WMROK    DS    0H
         SRL   R7,8             DIVIDE BY 256
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   OUCBWMR(5),=X'2020202120' MOVE IN EDIT MASK.
         ED    OUCBWMR-1(6),WORK+5 EDIT THE RESULT.
WMROKA   DS    0H
         SPACE
         TM    16(R6),X'0E'     SEE IF OUT SOMEHOW
         BC    9,PFLDONE        MUST BE IN.
CHKSRC   DS    0H
         CLI   37(R6),X'0A'     OUCBPFL (SWAP REASON CODE)
         BH    UNKNOWN          TOO BIG REASON UNKNOWN
         BL    NOTUNI           LOW, CHECK NEXT REASON
         MVI   STATUS,C'U'      INDICATE UNILATERAL SWAP
         B     PFLDONE
NOTUNI   DS    0H
         CLI   37(R6),X'09'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTEX            NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'X'      INDICATE EXCHANGE SWAP
         B     PFLDONE
NOTEX    DS    0H
         CLI   37(R6),X'08'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTENQ           NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'E'      INDICATE ENQ HELD SWAP
         B     PFLDONE
NOTENQ   DS    0H
         CLI   37(R6),X'07'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTREQ           NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'S'      INDICATE REQUESTED SWAP
         B     PFLDONE
NOTREQ   DS    0H
         CLI   37(R6),X'06'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTDET           NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'D'      INDICATE DETECTED WAIT SWAP
         B     PFLDONE
NOTDET   DS    0H
         CLI   37(R6),X'05'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTRS            NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'R'      INDICATE REAL STORAGE SHORTAGE SWAP
         B     PFLDONE
NOTRS    DS    0H
         CLI   37(R6),X'04'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTAS            NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'A'      INDICATE AUX STORAGE SWAP
         B     PFLDONE
NOTAS    DS    0H
         CLI   37(R6),X'03'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTLW            NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'L'      INDICATE LONG WAIT SWAP
         B     PFLDONE
NOTLW    DS    0H
         CLI   37(R6),X'02'     OUCBPFL (SWAP REASON CODE)
         BNE   NOTINW           NOT EQUAL, CHECK NEXT REASON
         MVI   STATUS,C'I'      INDICATE INPUT WAIT SWAP
         B     PFLDONE
NOTINW   DS    0H
         CLI   37(R6),X'01'     OUCBPFL (SWAP REASON CODE)
         BNE   UNKNOWN          NOT THIS ONE, SO WE DONT KNOW
         MVI   STATUS,C'O'      INDICATE OUTPUT WAIT SWAP
         B     PFLDONE
UNKNOWN  MVI   STATUS,C'?'      MOVE IN DONT KNOW INDICATION.
PFLDONE  DS    0H
         SPACE
         L     R7,52(,R6)       OUCBWMS LOAD SERVICE UNITS THIS XACTION
         CVD   R7,WORK          CONVERT TO DECIMAL.
         MVC   OUCBWMS(7),=X'20202020202120' MOVE IN THE EDIT MASK.
         ED    OUCBWMS-1(8),WORK+4 EDIT THE RESULT.
         SPACE
NOWMS    LM    R8,R9,64(R5)     LOAD UP EJST (CPU TIME - TASK TYPE)
         SRDL  R8,12            TO GET MICROSEC
         D     R8,=F'10000'     TO GET HUNDREDTHS AND MICROS
         LM    10,R11,200(R5)   LOAD UP SRB TIME.
         SRDL  R10,12           TO GET MICROSEC
         D     R10,=F'10000'    TO GET HUNDREDTHS AND MICROS
         LTR   R9,R9            TEST JST CPU TIME
         BP    TESTSRB          IF ITS POISTIVE GO ON
         NOPR  R9               DUMMY INSTR FOR TSO TEST TO STOP ON
TESTSRB  LTR   R11,R11          TEST SRB CPU TIME
         BP    ADSRBJST         IF ITS OK GO ADD SRB AND JST CPU TIME
         NOPR  R9               ANOTHER DUMMY INSTR.
ADSRBJST AR    R9,R11           ADD TOGETHER.
         CVD   R9,WORK          CONVERT IT TO DECIMAL.
         MVC   CPUTIME(8),=X'20202021204B2020' MOVE IN THE EDIT MASK.
         ED    CPUTIME-1(9),WORK+4 EDIT THE RESULT.
         SPACE
         MVC   0(81,R1),LINE    MOVE THE LINE TO THE 3270 BUFFER.
         LH    R7,SCRSIZE       BUMP BUFFER COUNTER.
         LA    R7,81(,R7)
         STH   R7,SCRSIZE
         LA    R1,81(,R1)       SEE IF THE BUFFER IS FULL YET.
         C     R1,ADBUF
         BE    PUTIT            IF YES, THE GO PUT THIS SCREEN.
NOGOOD   BCT   R3,ASCBLOOP      BRANCH BACK TO LOOK AT NEXT MEMORY.
         LA    R4,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.
         CR    R4,R1            ARE WE STILL AT THE BEGINNING.
         BE    FINDCVT          IF SO, GO START AT THE TOP AGAIN.
         SPACE
*
**  LOOK THRU SRM CONTROL BLOCKS TO BUILD HEADER INFO
*
BUILDHDR DS    0H
         L     R4,16           ---> CVT...
         L     R7,356(R4)      ---> PVT...
         L     R4,604(R4)      ---> RMCT... 1ST MODULE OF IRARMCNS
         L     R5,4(R4)        ---> CCT
         LH    R6,110(R5)         CPU UTILIZATION
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRCPU,WORK+6(2)     ...AND EDIT
         SPACE
         LH    R6,2(R7)           AVERAGE AVAILABLE FRAME COUNT
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRAFC,WORK+6(2)     ...AND EDIT
         SPACE
         LH    R6,X'226'(R4)      PAGE FAULT RATE
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRAPR,WORK+6(2)     ...AND EDIT
         SPACE
         LH    R6,X'224'(R4)      AUX. STORAGE MANAGER QUE LENGTH
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRASQ,WORK+6(2)     ...AND EDIT
         SPACE
         LH    R6,X'21E'(R4)      UNREFERENCED INTERVAL COUNT
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRUIC,WORK+6(2)     ...AND EDIT
         SPACE
         LH    R6,X'240'(R4)      DEFERRED IO REQUESTS
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRDIO,WORK+6(2)     ...AND EDIT
         SPACE
         L     R7,180(R4)      ---> DMDT..     R4--> RMCT
         SR    R15,R15         CLEAR A REG
         LA    R5,3            NUMBER OF DOMAIN ENTRIES TO PROCESS
         LA    R14,HDRDMN      POINT TO FIRST DOMAIN ENTRY
         LA    R7,20(R7)       BUMP PAST FIRST DOMAIN
DODMNS   DS    0H
*        IC    R15,0(R7)       GET DOMAIN NUMBER
*        CVD   R15,WORK        CHANGE IT TO DECIMAL
*        OI    WORK+7,X'0F'    FIX THE SIGN
*        UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA
         LH    R15,4(R7)       GET MULTI-PROGRAMMING LEVEL TARGET
         CVD   R15,WORK        CHANGE IT TO DECIMAL
         OI    WORK+7,X'0F'    FIX THE SIGN
         UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA
         LH    R15,6(R7)       GET NUMBER OF READY USERS
         CVD   R15,WORK        CHANGE IT TO DECIMAL
         OI    WORK+7,X'0F'    FIX THE SIGN
         UNPK  4(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA
         LA    R14,6(R14)     POINT TO NEXT DOMAIN ENTRY
         LA    R7,20(R7)       BUMP PAST THIS DOMAIN
         BCT   R5,DODMNS       GO PROCESS ANOTHER
         SPACE
*        STCK  TIME            STORE TIME OF DAY CLOCK
PUTIT    LA    R1,CLEAR         PREPARE
         LA    0,LENGTH            FOR
         AH    0,SCRSIZE              THE
         ICM   R1,8,TPUTFLG              FULL SCREEN
         TPUT  (R1),(0),R                   TPUT
         TGET  BUFFER,1         READ THE INPUT DATA FROM USER.
         OI    BUFFER,X'40'     GET TO UPPER CASE BEFORE COMPARE.
         CLI   BUFFER,C'S'      CHECK IF TERMINATION REQUESTED.
         BE    EODAD            BYE BYE BABY...
         CLI   BUFFER,C'T'      CHECK FOR TSO ONLY.
         BNE   BATCHCHK         IF NOT, TRY FOR BATCH ONLY MODE.
         MVI   BATCHORN+1,X'80' RESET THE BRANCHES TO GET
         MVI   TSOORNO+1,X'00'     ONLY TSO MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
BATCHCHK CLI   BUFFER,C'B'      CHECK FOR BATCH ONLY
         BNE   SWAPCHK          BRANCH TO CHECK OTHER OPTIONS.
         MVI   TSOORNO+1,X'10'  RESET THE BRANCHES TO GET
         MVI   BATCHORN+1,X'00'    ONLY BATCH (STC) MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
SWAPCHK  CLI   BUFFER,C'N'      CHECK FOR SWAPPABLE ONLY
         BNE   OTHERCHK         BRANCH TO CHECK OTHER OPTIONS.
         MVI   SWAPABLE+1,X'10' ONLY SWAPABLE MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
OTHERCHK CLI   BUFFER,C'A'      CHECK FOR EVERYTHING
         BNE   XYZ              IF NOT, TRY FOR IN OR OUT MODES.
         MVI   TSOORNO+1,X'00'  IF EVERYTHING, NOP ALL THE
         MVI   BATCHORN+1,X'00'    SELECTION BRANCHES.
         MVI   SWAPABLE+1,X'00' ONLY SWAPABLE MEMORIES.
XYZ      DS    0H
         CLI   BUFFER,C'O'      CHECK FOR OUT MODE
         BNE   WHATHECK
         MVI   INOROUT+1,X'00'  NOP THE BRANCH
         MVI   MODESW,X'FF'     INDICATE CHANGE OF MODES.
         B     GOODGRIF
WHATHECK CLI   BUFFER,C'I'      CHECK FOR IN OR READY MODE
         BNE   GOODGRIF
         MVI   INOROUT+1,X'10'  TAKE THE BRANCH
         MVI   MODESW,X'FF'     INDICATE MODE SWITCH.
         SPACE
GOODGRIF DS    0H
         MVC   SCRSIZE,=H'0'    RESET SCREEN SIZE.
         LA    R1,BUFFER        PREPARE
         LA    R6,BUFFER           FOR
         ICM   R6,8,C' '              THE
         LA    R7,BUFLEN                 MOVE
         LA    R8,BUFFER                    CHARACTER
         SR    R9,R9                           LONG
         MVCL  R6,R8                              TO CLEAR BUFFER.
         CLI   MODESW,X'FF'     CHECK FOR CHANGE OF MODES.
         BNE   MODEOK           BRANCH IF SAME MODE.
         MVI   MODESW,X'00'     RESET MODE CHANGE.
         B     FINDCVT          START OVER FROM BEGINNING.
         SPACE
MODEOK   DS    0H
         LTR   R3,R3            CHECK TO SEE IF MORE MEMORIES TO PROCES
         BZ    FINDCVT          NO, TAKE IT FROM THE TOP
         BCT   R3,ASCBLOOP      WAS THERE ONLY ONE LEFT AT BUFFER FULL
         B     FINDCVT          YES, START OVER FROM THE TOP.
         SPACE
EODAD    DS    0H
BYEBY    LA    R1,CLR           PREPARE FOR THE
         LA    0,L'CLR             FULL SCREEN
         ICM   R1,8,TPUTFLG           TPUT TO
         TPUT  (R1),(0),R                CLEAR THE SCREEN.
         L     R13,SAVE+4       LOAD CALLERS SAVE AREA POINTER.
         RETURN (14,12),RC=0    AND AWAY WE GO...
         EJECT
MODESW   DC    X'00'  MODE CHANGE.
WORK     DS    D
HEX      DC    C'0123456789ABCDEF'
SAVE     DS    18F
X        DC    CL80' '
         ORG   X
LINE     DC    X'1D60'
JOB      DC    CL8' '
         DC    C' '
         DC    C' '
STEP     DC    CL8' '
         DC    C' '
STATUS   DC    C' '
         DC    C' '
SIZE     DC    CL5' '
         DC    CL2' '
OUCBWSS  DC    CL5' '
         DC    CL2' '
TYPE     DC    C' '
         DC    C' '
WHERE    DC    CL3' '
         DC    C' '
DP       DC    CL2' '
         DC    C' '
OUCBPGN  DC    CL3' '
         DC    C' '
OUCBSWC  DC    CL3' '
         DC    C' '
         DC    C' '
         DC    C' '
OUCBWMR  DC    CL5' '
         DC    C' '
OUCBWMS  DC    CL7' '
         DC    C' '
CPUTIME  DC    CL8' '
         DC    C' '
         ORG X+90
SCRSIZE  DC    H'0'
TPUTFLG  DC    X'03'
ADBUF    DC    A(Z)
*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000
*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS
*   4040 = POSITION 0000(R=1 C=1)  13 = INSERT CURSOR
CLR      DC    X'C71140403C40400011404013'
*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000
*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS
*   4040 = POSITION 0000(R=1 C=1)  1D = START FIELD 40= UNPROTECTED
*   13 = INSERT CURSOR 40 = BLANK 1D = START FIELD E8 = PROTECT HILITE
CLEAR    DC    X'C71140403C4040001140401D4013'
         DC    X'401DE8'
SYSHDR   DS    0CL77
         DC    CL4'CPU='         CPU UTILIZATION
HDRCPU   DC    CL3'XXX',C'%'
         DC    CL5' AFC='        AVERAGE AVAILABLE FRAME COUNT
HDRAFC   DC    CL4'XXXX'
         DC    CL5' PFR='        PAGE FAULT RATE
HDRAPR   DC    CL4'XXXX'
         DC    CL5' ASQ='        AUX STORAGE MANAGER QUE LENGTH
HDRASQ   DC    CL4'XXXX'
         DC    CL5' UIC='        UNIREFERENCED INTERVAL COUNT
HDRUIC   DC    CL4'XXXX'
         DC    CL5' DIO='        DEFERRED IO REQUESTS
HDRDIO   DC    CL4'XXXX'
         DC    CL6' DMNS='       # OF DOMAINS IN ENTRIES
HDRDMN   DC    3CL6' MT:RU'      MULTI-PROGRAMMING LEVEL TARGET
         DC    80C'-'            # OF READY USERS
         DC    X'404040'
HEADING DC CL77'  JOB     STEP   P MEMORY   WSS  T LOC DP  PG  SC     WX
               MR     SRV     CPU'
BUFFER   DC    21CL81' '
LENGTH   EQU   BUFFER-CLEAR
Z        DS    X
BUFLEN   EQU   Z-BUFFER
         END   CHIMP
