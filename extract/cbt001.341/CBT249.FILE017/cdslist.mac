TEC426   TITLE 'CDS LISTING UTILITY'
***********************************************************************
* MEMBER: TEC426                                                      *
* SOURCE LIB: SLICK.PROD.SOURCE                                       *
* LOAD LIB:   SPD.PROD.PL1CLIB                                        *
* MACRO LIBS NEEDED: SYS1.MACLIB                                      *
* LINKAGE EDITOR PARMS: LET,NCAL,LIST                                 *
*                                                                     *
* PURPOSE:                                                            *
*        THIS PROGRAM (ORIGINALLY OBTAINED FROM FILE 132 OF THE CBT   *
*        TAPE) IS USED TO OBTAIN A CONDENSED SMP4 CDS LISTING.        *
*                                                                     *
* JCL REQUIRED:                                                       *
*        DD STATEMENT FOR SMPCDS POINTS TO CDS                        *
*        DD STATEMENT FOR PDSCDS POINTS TO CDS                        *
*        DD STATEMENT FOR SYSPRINT                                    *
*        DD STATEMENT FOR SYSIN (MAY BE DUMMY)                        *
*        DD STATEMENT FOR SNAPPRT (OPTIONAL)                          *
*                                                                     *
*        EXEC PARM MAY CONTAIN A 1-9 DIGIT STORAGE AMOUNT FOR THE     *
*        MAX VALUE ON THE CONDITIONAL GETMAIN FOR THE TABLE.          *
*        DEFAULT IS 520000 BYTES.                                     *
*                                                                     *
* CONTROL CARD:                                                       *
*        FMID=XXXXXXX WILL RESTRICT LISTING TO THOSE ELEMENTS WITH    *
*                     THE SPECIFIED FMID                              *
*                                                                     *
*                                                                     *
* RETURN CODES:                                                       *
*        0 - ALWAYS                                                   *
*                                                                     *
*                                                                     *
* CHANGE LOG:                                                         *
*        07/23/80 - INITIAL VERSION FROM CBT TAPE                     *
*        07/23/80 - MODIFIED FOR GENERAL CLEANUP AND TO ADD PRINTING  *
*                   OF APPLY DATE/ACCEPT DATE INSTEAD OF RECEIVE DATE.*
*                   ALSO SELECTION OF ELEMENTS BY FMID. ALSO CHANGED  *
*                   SYSPRINT LRECL TO 150 AND ADDED DCB EXIT FOR      *
*                   BLOCKSIZE.                                        *
*                                                                     *
***********************************************************************
         EJECT
CDSLIST  CSECT
         USING *,15
         SAVE  (14,12),,TEC426_&SYSDATE_&SYSTIME
         LA    2,SAVE
         ST    2,8(,13)
         ST    13,4(,2)
         LA    13,SAVE
         B     BEGIN
         USING SAVE,13,12
         DROP  15
SAVE     DC    18F'0'
         DC    A(SAVE+4096)
BEGIN    L     12,*-4
         SPACE 2
*********************************************
* AETNA LIFE AND CASUALTY
* 151 FARMINGTON AVE.
* HARTFORD,CT
*********************************************
*
*********************************************
* THIS PROGRAM IS FOR MVS RELEASE 3.8  (SMP4)
*********************************************
* YOU SHOULD HAVE A REGION SIZE OF AT LEAST 1000K
         SPACE 2
CDSPTF   EQU   X'F3'
CDSMOD   EQU   X'D1'
CDSMAC   EQU   X'C7'
         SPACE 2
* THIS PROCESSES THE PARM WHICH IS THE OVERRIDE FOR THE
* MAX LENGTH OF THE TABLE
* IT IS IN THE FORM OF PARM='999999'   (1-9 DIGITS)
* THIS SHOULD BE USED IF THE PROGRAM QUITS WITH THE WTO
*    'GETAMINED STORAGE EXCEEDED'
* AND YOUR REGION SIZE WAS OVER THE AMOUNT OF STORAGE OBTAINED
* FOR THE TABLE  (THE SECOND WORD IN THE SNAP ID=2 IS THE AMOUNT
* OF STORAGE OBTAINED FOR THE TABLE)
         L     3,0(1)
         LH    4,0(3)
         LTR   4,4
         BZ    NOPARM
         CH    4,=H'9'
         BNH   PARMOK
         WTO   'INVALID PARM----DEFAULT USED'
         B     NOPARM
PARMOK   EQU   *
         LA    6,9
         SR    6,4
         LA    5,PARMFLD
         AR    5,6
         EX    4,MVCPARM
         PACK  DBLWORD(8),PARMFLD(9)
         CVB   6,DBLWORD
         ST    6,LENGTH+4
         SPACE 2
NOPARM   EQU   *
         OPEN  (PDSDCB,(INPUT),SYSPRINT,(OUTPUT),PDSFILE,(INPUT),      X
               SYSIN,(INPUT))
         SPACE 2
         GET   SYSIN
         CLC   =C'FMID=',0(R1)
         BE    CARDOK
         WTO   'BAD CONTROL CARD - IGNORED'
         B     CARDDONE
CARDOK   MVC   ONLYFMID,5(R1)
CARDDONE CLOSE (SYSIN)
         GETMAIN R,LV=750              SPACE FOR 5 PRINT LINES
         LTR   15,15                   WAS STORAGE AVAILABLE
         BNZ   NOSTOR
         LR    5,1
         MVI   0(5),X'40'
         MVC   1(150,5),0(5)
         MVC   151(150,5),150(5)
         MVC   301(150,5),300(5)
         MVC   451(150,5),450(5)
         MVC   601(149,5),600(5)
         LA    9,150(5)
         MVC   0(24,9),=C'1   3.8  CDS LISTER V1.1'
         L     1,PDSFILE+44            DEBADDR
         L     1,32(1)                 UCB ADDR
         MVC   32(6,9),28(1)           VOLUME SER
         MVC   46(9,9),=C'***RNB***'
         MVC   74(4,9),=C'DATE'
         MVC   79(5,9),=X'2020202120'
         MVC   86(4,9),=C'TIME'
         MVC   91(5,9),=X'20204B2020'
         MVC   120(4,9),=C'PAGE'
         CLI   ONLYFMID,C' '
         BE    DOTIME
         MVC   100(4,9),=C'FMID'
         MVC   105(7,9),ONLYFMID
DOTIME   TIME  DEC                     GET TIME AND DATE
         ST    1,WORD                  STORE DATE
         ED    78(6,9),WORD+1          EDIT DATE INTO PRINT LINE
         ST    0,WORD                  STORE TIME
         ED    90(6,9),WORD            EDIT TIME INTO PRINT LINE
         OI    91(9),X'F0'             MAKE TIME '04.20'
         LA    9,150(9)
         USING PRLINE,9
         MVI   LINECC,C'0'
         MVC   LINEMOD(6),=C'MODULE'
         MVC   LINEFMID(4),=C'FMID'
         MVC   LINERMID(4),=C'RMID'
         MVC   LINERDTE(4),=C'DATE'
         MVC   LINELIB(7),=C'LIBRARY'
         MVC   LINELMOD(7),=C'LOADMOD'
         MVC   LINEUMID(4),=C'UMID'
         MVC   LINEUDTE(4),=C'DATE'
         DROP  9
         LA    9,150(9)
         USING PTFLINE,9
         MVI   PLCC,C'0'
         MVC   PLSYSM(6),=C'SYSMOD'
         MVC   PLAPDATE(7),=C'APPDATE'
         MVC   PLACDATE(7),=C'ACCDATE'
         MVC   PLTYPE(4),=C'TYPE'
         MVC   PLAPP(6),=C'STATUS'
         MVC   PLFMID(4),=C'FMID'
         MVC   PLLSUP(7),=C'LASTSUP'
         MVC   PLENTRY1(32),=32CL1'-'
         MVC   PLENTRY1+32(19),=C'SYSMOD SUB ENTRIES-'
         MVC   PLENTRY1+51(32),=32CL1'-'
         DROP  9
         LA    9,150(9)
         USING MACLINE,9
         MVI   MLCC,C'0'
         MVC   MLMAC(5),=C'MACRO'
         MVC   MLFMID(4),=C'FMID'
         MVC   MLRMID(4),=C'RMID'
         MVC   MLRDTE(4),=C'DATE'
         MVC   MLLIB(7),=C'LIBRARY'
         MVC   MLUMID(4),=C'UMID'
         MVC   MLUDTE(4),=C'DATE'
         DROP  9
         SPACE 2
         SR    11,11                   CLEAR REG 11
         EJECT
         GETMAIN VC,LA=LENGTH,A=TABADDR
         SPACE
* THIS WILL ALLOCATE STORAGE FOR UP TO 10,000 MOD-MAC ENTRIES
* USE WITH THE  'TABLE   DSECT'
         LTR   15,15                   WAS STORAGE AVAILABLE
         BNZ   NOSTOR
         L     8,TABADDR+4
         SRDA  8,32
         LH    6,=AL2(TABLEN)
         DR    8,6                     COMPUTE MAX TABLE ENTRIES
         STH   9,MAX                   STORE MAX ENTRIES
         L     8,TABADDR
         EJECT
LOOP     EQU   *
         L     15,GETBLK               ADDR OF ROUTINE TO READ DIR
         BALR  14,15                   GO READ A DIR BLOCK
         LA    3,10(2)
         LH    4,8(2)                  BYTE COUNT OF BLOCK
         LA    7,8(4,2)                ADDR OF FIRST BYTE AFTER BLOCK
MINILOOP EQU   *
         CLC   0(8,3),=8X'FF'          LAST MEMBER IN CDS
         BE    CLOS
         BAL   14,UNPACK
         SR    4,4                     CLEAR REG 4
         IC    4,11(3)
         N     4,=F'31'
         SLL   4,1                     REG 4 IS BYTES OF USER DATA
         STH   4,USERBYTE
         XC    BYTES,BYTES
         CLI   0(3),CDSPTF             SYSMOD ENTRY
         BE    CHECK
         CLI   0(3),CDSMOD             MOD ENTRY
         BE    TABSTOR
         CLI   0(3),CDSMAC             MAC ENTRY
         BE    TABSTOR
         B     NEXTMEMB
         EJECT
         USING TABLE,8
TABSTOR  EQU   *
* THE ENTRY IS A MOD OR MAC
         CLI   ONLYFMID,C' '           LISTING OF ONE FMID ONLY?
         BE    TABSTORA                /NO  - CONTINUE
         CLC   ONLYFMID,21(3)          /YES - ONLY INCLUDE IF MATCH
         BNE   NEXTMEMB
TABSTORA MVI   CODE,X'00'
         MVI   1(8),X'40'
         MVC   2(TABLEN-2,8),1(8)      CLEAR TABLE ENTRY
         MVC   TABNAME,NAME            MOVE IN MODULE NAME
         MVC   RMID,13(3)              MOVE IN RMID NUMBER
         MVC   RMIDDATE,=PL3'0'
         MVC   FMID,21(3)              MOVE IN FMID NUMBER
         CLI   0(3),CDSMAC
         BE    TABMAC
TABMOD   EQU   *
         OI    CODE,X'10'              MOD TABLE ENTRY
         B     TESTBIT
TABMAC   EQU   *
         OI    CODE,X'04'
TESTBIT  EQU   *
         TM    11(3),X'80'
         BO    NEXTTABL
         BAL   14,READ
         CLC   BYTES,=H'0'
         BE    NEXTTABL
SETVAR   EQU   *
         MVC   DLIB,72(2)              MOVE DLIB TO TABLE
         CLI   80(2),X'FF'             END-OF-DATA
         BE    NEXTTABL
         LA    2,88(2)                 POINT 2 TO BEG OF VAR PORTION
         LA    10,88                   SET REG 10 TO 88
VAR      EQU   *
         CLI   0(2),X'32'              A UMID ENTRY
         BE    VUMID
         CLI   0(2),X'01'              A LMOD ENTRY
         BE    VLMOD0
NEXTVAR  EQU   *
         CLI   1(2),X'FF'              END OF VAR
         BE    NEXTTABL
         LA    2,9(2)                  NEXT CHAR
         LA    10,9(10)
         CH    10,BYTES
         BNL   NEXTTABL
         B     VAR
VUMID    EQU   *
         LR    14,2
         SH    14,=H'8'
         MVC   UMID,0(14)              MOVE UMID
         MVC   UMIDDATE,=PL3'0'
         OI    CODE,X'01'
         B     NEXTVAR
VLMOD0   EQU   *
         LR    14,2
         SH    14,=H'8'
         TM    CODE,X'80'              ALREADY A LMOD
         BZ    VLMOD1
         LA    8,TABLEN(8)             POINT TO NEXT TABLE ENTRY
         LA    11,1(11)                UP COUNTER 1 MORE ENTRY
         CH    11,MAX
         BNL   COREPROB
         OI    CODE,X'40'              SET CODE FOR LOADMOD ONLY ENTRY
VLMOD1   EQU   *
         MVC   LMOD,0(14)              MOVE LMOD
         OI    CODE,X'80'              INDICATE A LMOD PRESENT
         CLI   0(3),CDSMAC
         BNE   NEXTVAR
         OI    CODE,X'04'              MAC LOADMOD ENTRY
         B     NEXTVAR
NEXTTABL EQU   *
         LA    8,TABLEN(8)
         LA    11,1(11)
         CH    11,MAX
         BNL   COREPROB
         EJECT
NEXTMEMB EQU   *
         LH    4,USERBYTE
         LA    3,12(3,4)               REG 3 ADDR OF NEXT MEMBER
         CR    3,7
         BNL   LOOP                    GO READ ANOTHER BLOCK
         B     MINILOOP
         DROP  8
         EJECT
SNAP     EQU   *
* THIS ROUTINE IS USED TO SNAP ANY MEMBER
* IT SNAPS THE NAME AFTER UNPACKING
* ALONG WITH THE DIRECTORY ENTRY, AND THE MEMBER
* REG 3 MUST BE THE ADDR OF THE DIRECTORY ENTRY
* DCBBUFCB AND BYTES MUST BE VALID
* THE MEMBER PORTION IS NOT SNAPPED IF BYTES IS ZERO
         SPACE 2
         ST    14,SNAPSAV
         OPEN  (SNAPDCB,(OUTPUT))
         LA    10,12(3)
         AH    10,USERBYTE
         ST    3,SNAPDIRS
         ST    10,SNAPDIRE
         LH    1,BYTES
         LTR   1,1
         BNZ   SNAPMEMB
         OI    SNAPDIRE,X'80'
         B     SNAPIT
SNAPMEMB EQU   *
         L     2,PDSFILE+20            DCBBUFCB
         LA    2,8(2)                  POINT REG 2 TO BEG OF BUFFERS
         LR    10,2
         AH    10,BYTES
         ST    2,SNAPMEMS
         ST    10,SNAPMEME
         OI    SNAPMEME,X'80'
SNAPIT   EQU   *
         SNAP  DCB=SNAPDCB,ID=1,PDATA=REGS,LIST=SNAPLIST
         CLOSE SNAPDCB
         L     14,SNAPSAV
         BR    14
         SPACE 2
SNAPSAV  DS    F
SNAPLIST DC    A(NAME,NAME+8)
SNAPDIRS DC    A(0)
SNAPDIRE DC    A(0)
SNAPMEMS DC    A(0)
SNAPMEME DC    A(0)
EOD      EQU   *
         LM    3,5,GETSV
CLOS     EQU   *
         BAL   14,GETFREE
         EJECT
         USING PRLINE,5
         USING TABLE,8
WRITE    EQU   *
* LOOK THROUGH THE TABLE OF RMID/UMID/MODULE/MACRO ENTRIES
* THE CODE IS AS FOLLOWS
*        '10' MOD ENTRY
*        '04' MAC ENTRY
*        '40' LOAD MODULE ENTRY
*        '20' RMID OK
*        '01' UMID
*        '02' UMID OK
         SPACE 2
         LR    10,11
         L     8,TABADDR
         MVI   LINES+1,X'4B'
LOOK1    EQU   *
         TM    CODE,X'04'              MACRO ENTRY
         BO    NOPUT1
         TM    CODE,X'40'              LOAD MODULE ENTRY ONLY
         BO    PUTLMOD1
         MVC   LINEFMID,FMID           FMID FROM TABLE
         MVC   LINERMID,RMID           RMID FROM TABLE
         MVC   LINERDTE,=5CL1'*'       RMID NOT FOUND
         TM    CODE,X'20'
         BZ    LUMID1
         UNPK  LINERDTE,RMIDDATE       DATE FOR RMID
         OI    LINERDTE+4,X'F0'        MAKE DATE PRINTABLE
LUMID1   EQU   *
         TM    CODE,X'01'
         BZ    PUT1
         MVC   LINEUMID,UMID           UMID FROM TABLE
         MVC   LINEUDTE,=5CL1'*'       UMID NOT FOUND
         TM    CODE,X'02'
         BZ    PUT1
         UNPK  LINEUDTE,UMIDDATE       DATE FOR UMID
         OI    LINEUDTE+4,X'F0'        MAKE DATE PRINTABLE
PUT1     EQU   *
         MVC   LINEMOD,TABNAME         MODULE FROM TABLE
         MVC   LINELIB,DLIB            DLIB
PUTLMOD1 EQU   *
         MVC   LINELMOD,LMOD           LOAD MODULE
         LA    15,150
         BAL   14,PRINT
NOPUT1   EQU   *
         LA    8,TABLEN(8)
         BCT   10,LOOK1
         DROP  5
         EJECT
         USING MACLINE,5
         LR    10,11
         L     8,TABADDR
         MVI   LINES+1,X'4B'
LOOK2    EQU   *
         TM    CODE,X'04'              NOT A MAC ENTRY
         BZ    NOPUT2
         TM    CODE,X'40'
         BO    NOPUT2                  MAC LMOD ENTRY
         MVC   MLFMID,FMID             FMID FROM TABLE
         MVC   MLRMID,RMID             RMID FROM TABLE
         MVC   MLRDTE,=5CL1'*'         RMID NOT FOUND
         TM    CODE,X'20'
         BZ    LUMID2
         UNPK  MLRDTE,RMIDDATE         DATE FOR RMID
         OI    MLRDTE+4,X'F0'          MAKE DATE PRINTABLE
LUMID2   EQU   *
         TM    CODE,X'01'
         BZ    PUT2
         MVC   MLUMID,UMID             UMID FROM TABLE
         MVC   MLUDTE,=5CL1'*'         UMID NOT FOUND
         TM    CODE,X'02'
         BZ    PUT2
         UNPK  MLUDTE,UMIDDATE         DATE FOR UMID
         OI    MLUDTE+4,X'F0'          MAKE DATE PRINTABLE
PUT2     EQU   *
         MVC   MLMAC,TABNAME           MACRO FROM TABLE
         MVC   MLLIB,DLIB              DLIB
         LA    15,450
         BAL   14,PRINT
NOPUT2   EQU   *
         LA    8,TABLEN(8)
         BCT   10,LOOK2
         DROP  5
         DROP  8
         EJECT
         MVC   0(38,5),=CL38'-    END OF CDS LISTER    COND CODE=00'
         PUT   SYSPRINT,(5)
         FREEMAIN VC,A=TABADDR
         FREEMAIN R,LV=750,A=(5)
EOJ      CLOSE (SYSPRINT,,PDSDCB,,PDSFILE)
         L     13,4(13)
         LM    14,12,12(13)
         LA    15,00(0,0)
         BR    14
         EJECT
READ     EQU   *
* IF WE ARE HERE, THEN THE CDS DID NOT CONTAIN ALL
* THE INFORMATION IN THE DIRECTORY ENTRY, SO WE DO A POINT, AND
* READ THE ACTUAL MEMBER.  WE READ EITHER THE TOTAL BLOCK,
* OR UNTIL WE READ AN X'FF' SIGNALING THE END-OF-USABLE-DATA.
* WE WILL READ UP TO 10 BLOCKS OF 3120 BYTES EACH
* THE BUFERS ARE SET UP BACK TO BACK SO WE CAN SCAN
         SPACE 2
         ST    14,READSV14
         L     4,PDSFILE+20            DCBBUFCB
         LA    4,8(4)                  POINT REG 4 TO BEG OF BUFFERS
         XC    TTR,TTR
         MVC   TTR(3),8(3)             MOVE IN TTR
         POINT PDSFILE,TTR
READIT   EQU   *
         READ  FILEDECB,SF,PDSFILE,(4)
         CHECK FILEDECB
         LH    2,PDSFILE+62            BLOCKSIZE
         L     1,PDSFILE+68            POINT REG 1 TO IOB
         LH    1,22(1)                 LOAD CCW RESIDUAL BYTE COUNT
         SR    2,1                     REG 2 BYTES READ
         AR    4,2                     POINT REG 4 TO NEXT BUFFER
         AH    2,BYTES
         STH   2,BYTES
         C     2,=F'28080'             CAN WE DO ANOTHER READ
         BH    NOMORE
         B     READIT
         SPACE
READEOD  EQU   *
* WE SHOULD ALWAYS COME HERE AFTER READING A MEMBER
* SINCE WE READ UP TO 10 BLOCKS
         SPACE 2
         L     2,PDSFILE+20            DCBBUFCB
         LA    2,8(2)                  POINT REG 2 TO BEG OF BUFFERS
         L     14,READSV14
         BR    14
         SPACE
READSV14 DS    F
         EJECT
UNPACK   EQU   *
* THIS ROUTINE UNPACKS THE 6 BYTE CDS DIR ENTRY
* INTO A 8 BYTE NAME FIELD
* THIS WAS OBTAINED FROM HMASMSUB FICHE
         STM   5,10,USAV
         MVC   DBL+1(3),1(3)           MOVE IN 3 BYTES
         MVC   DBL+5(3),4(3)           SECOND 3 BYTES
         LA    10,2                    LOOP1 TWICE
         LA    5,NAME
         LA    9,DBL
LOOP1    EQU   *
         L     7,0(9)
         SLL   7,8                     SHIFT HIGH ORDER BYTE OUT
         LA    8,4                     LOOP2 4 TIMES
LOOP2    EQU   *
         SR    6,6                     CLEAR REG 6
         SLDA  6,6                     SHIFT 6 BITS INTO REG 6
         STC   6,0(5)                  STORE INTO NAME FIELD
         LA    5,1(5)                  POINT TO NEXT BYTE IN NAME FIELD
         BCT   8,LOOP2
         LA    9,4(9)                  POINT TO SECOND WORD
         BCT   10,LOOP1
         TR    NAME,TRTABLE            TRANSLATE NAME
         LM    5,10,USAV
         BR    14
DBL      DS    D
USAV     DS    6F
NAME     DS    CL8
TRTABLE  DC    CL1' '
         DC    CL1' '
         DC    6CL1' '
         DC    CL1' '
         DC    CL1'$'
         DC    6CL1' '
         DC    5CL1' '
         DC    CL1' '
         DC    CL1'#'
         DC    CL1'`'
         DC    CL1' '
         DC    CL1' '
         DC    CL1' '
         DC    CL1'?'
         DC    CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         DC    CL10'0123456789'
         EJECT
PRINT    EQU   *
         ST    14,PRSAVE
         STH   15,DISPL
         LH    1,LINES
         CH    1,=H'55'
         BL    PRI
         AP    PAGE,=P'1'
         LA    9,150(5)
         MVC   125(3,9),=X'202120'
         ED    124(4,9),PAGE
         PUT   SYSPRINT,(9)
         AH    9,DISPL
* THE DISPL IS WHICH SECONDARY TITLE LINE TO PRINT
* IT WILL EITHER BE +150 FOR THE MOD TITLE LINE
* OR +300 FOR THE SYSMOD TITLE LINE
* OR +450 FOR THE MAC TITLE LINE
         PUT   SYSPRINT,(9)
         MVI   LINES+1,X'04'
         MVI   0(5),C'0'               SKIP A LINE AFTER TITLE
PRI      EQU   *
         PUT   SYSPRINT,(5)
         MVI   0(5),X'40'
         MVC   1(149,5),0(5)           CLEAR ENTIRE PRINT LINE
         LH    1,LINES                 LOAD LINE COUNT
         LA    1,1(1)                  INCREMENT LINE COUNT
         STH   1,LINES                 STORE LINE COUNT
         L     14,PRSAVE
         BR    14
PRSAVE   DS    F
DISPL    DS    H
         EJECT
CHECK    EQU   *
* HERE WE HAVE FOUND A SYSMOD ENTRY (UZ12345)
* SEARCH THROUGH THE TABLE OF RMID/UMID/MODULE/MACRO ENTRIES
* LOOKING AT EACH RMID/UMID
* IF FOUND   OI AN '2'   INTO THE CORRECT NIBBLE
* THE ENTIRE TABLE MUST BE SEARCHED
* A RMID/UMID COULD HAVE MORE THAN ONE ENTRY
         SPACE
         TM    11(3),X'80'
         BO    PASTREAD
         BAL   14,READ
PASTREAD EQU   *
         LR    10,11
         L     8,TABADDR
         USING TABLE,8
CHECKIT  EQU   *
         CLC   RMID,NAME               CHECK FOR RMID
         BNE   CKUMID
         OI    CODE,X'20'
         TM    11(3),X'80'
         BO    CKUMID
         MVC   RMIDDATE,41(2)          MOVE IN RMID DATE
CKUMID   EQU   *
         CLC   UMID,NAME               CHECK FOR UMID
         BNE   GOCHECK
         OI    CODE,X'02'
         TM    11(3),X'80'
         BO    GOCHECK
         MVC   UMIDDATE,41(2)          MOVE IN UMID DATE
GOCHECK  EQU   *
         LA    8,TABLEN(8)
         BCT   10,CHECKIT
         SPACE 2
         USING PTFLINE,5
         CLI   ONLYFMID,C' '          RESTRICT LISTING IF NEC.
         BE    GOCHECK1
         CLC   ONLYFMID,73(2)
         BNE   NEXTMEMB
GOCHECK1 MVC   PLSYSM,NAME
         MVC   PLLSUP,25(3)
         TM    13(3),X'03'
         BO    CKPTF
         TM    13(3),X'01'
         BO    CKUSER
         TM    13(3),X'02'
         BO    CKAPAR
         TM    13(3),X'04'
         BO    CKFUNC
         B     CHECK0
CKUSER   EQU   *
         MVC   PLTYPE(4),=C'USER'
         B     CHECK0
CKPTF    EQU   *
         MVC   PLTYPE(3),=C'PTF'
         B     CHECK0
CKFUNC   EQU   *
         MVC   PLTYPE(4),=C'FUNC'
         B     CHECK0
CKAPAR   EQU   *
         MVC   PLTYPE(4),=C'APAR'
         B     CHECK0
CHECK0   EQU   *
         TM    11(3),X'80'
         BO    PRSYSM
         TM    43(2),X'0F'
         BZ    CHECK1
         MVC   PLAPP(3),=C'APP'
         MVC   PLFMID,73(2)            MOVE FMID TO PRINT LINE
         TM    49(2),X'0F'
         BZ    CHECK1
         UNPK  PLAPDATE,47(3,2)        UNPACK SYSMOD DATE
         OI    PLAPDATE+4,X'F0'        MAKE DATE PRINTABLE
CHECK1   EQU   *
         TM    61(2),X'0F'
         BZ    SETSYSM
         MVC   PLACC(3),=C'ACC'
         UNPK  PLACDATE,59(3,2)        UNPACK SYSMOD DATE
         OI    PLACDATE+4,X'F0'        MAKE DATE PRINTABLE
SETSYSM  EQU   *
         CLI   80(2),X'FF'             END-OF-DATA
         BE    PRSYSM
         LA    2,88(2)
         LA    10,88                   SET REG 10 TO 88
VARSYSM  EQU   *
* REG 2 NEEDED TO BE RETURNED TO PREVIOUS VALUE AFTER TRT
         LR    10,2
         SR    2,2
         TRT   0(1,10),TRTTABL
         LR    0,2
         LR    2,10
         LR    10,0
         BNZ   MODSYSM-1(10)           BRANCH TABLE
NEXTSYSM EQU   *
         CLI   1(2),X'FF'              END-OF-DATA
         BE    PRSYSM
         LA    2,9(2)
         LA    10,9(10)
         CH    10,BYTES
         BNL   PRSYSM
         B     VARSYSM
MODSYSM  EQU   *
*
* THE NEXT INSTRUCTIONS ARE THE BRANCH TABLE
* ALL ARE DEFINED BY ADCONS IN  'TRTTABL'
*
BR1      MVC   ENTTYPE,=C'   MOD'
         B     SYSM
BR2      MVC   ENTTYPE,=C'  SZAP'
         B     SYSM
BR3      MVC   ENTTYPE,=C'  XZAP'
         B     SYSM
BR4      MVC   ENTTYPE,=C'   MAC'
         B     SYSM
BR5      MVC   ENTTYPE,=C'MACUPD'
         B     SYSM
BR6      MVC   ENTTYPE,=C'   SRC'
         B     SYSM
BR7      MVC   ENTTYPE,=C'SRCUPD'
         B     SYSM
BR8      MVC   ENTTYPE,=C' ASSEM'
         B     SYSM
BR9      MVC   ENTTYPE,=C'******'
         BAL   14,SNAP
         B     SYSM
BR10     MVC   ENTTYPE,=C'   PRE'
         B     SYSM
BR11     MVC   ENTTYPE,=C'******'
         BAL   14,SNAP
         B     SYSM
BR12     MVC   ENTTYPE,=C'   SUP'
         B     SYSM
BR13     MVC   ENTTYPE,=C'   REQ'
         B     SYSM
BR14     MVC   ENTTYPE,=C' IFREQ'
         B     SYSM
BR15     MVC   ENTTYPE,=C'******'
         BAL   14,SNAP
         B     SYSM
BR16     MVC   ENTTYPE,=C'DELETE'
         B     SYSM
BR17     MVC   ENTTYPE,=C'  VERS'
         B     SYSM
BR18     MVC   ENTTYPE,=C' SUPBY'
         B     SYSM
SYSM     EQU   *
         LR    14,2
         SH    14,=H'8'
         MVC   ENTNAME,0(14)
         CLI   PLENTRY1+6,X'40'
         BNE   SYSM1
         MVC   PLENTRY1(15),ENTRY
         NI    SYSMFLAG,X'FE'          MARK THIS LINE TO BE PRINTED
         B     NEXTSYSM
SYSM1    EQU   *
         CLI   PLENTRY2+6,X'40'
         BNE   SYSM2
         MVC   PLENTRY2(15),ENTRY
         B     NEXTSYSM
SYSM2    EQU   *
         CLI   PLENTRY3+6,X'40'
         BNE   SYSM3
         MVC   PLENTRY3(15),ENTRY
         B     NEXTSYSM
SYSM3    EQU   *
         CLI   PLENTRY4+6,X'40'
         BNE   SYSM4
         MVC   PLENTRY4(15),ENTRY
         B     NEXTSYSM
SYSM4    EQU   *
         MVC   PLENTRY5(15),ENTRY
         LH    1,LINES
         CH    1,=H'55'
         BL    SYSM5
         MVC   PLSYSM,NAME
SYSM5    EQU   *
         OI    SYSMFLAG,X'01'          MARK THIS LINE AS PRINTED
         LA    15,300
         BAL   14,PRINT
         B     NEXTSYSM
PRSYSM   EQU   *
         TM    SYSMFLAG,X'01'          HAS THIS LINE BEEN PRINTED
         BO    NOPRSYSM
         LH    1,LINES
         CH    1,=H'55'
         BL    PRSYSM0
         MVC   PLSYSM,NAME
PRSYSM0  EQU   *
         LA    15,300
         BAL   14,PRINT
NOPRSYSM EQU   *
         B     NEXTMEMB
         DROP  5
         DROP  8
         SPACE
ENTRY    DS    0CL15
ENTTYPE  DS    CL6
ENTDASH  DC    C'-'
ENTNAME  DS    CL8
SYSMFLAG DS    X
         DS    0H
         EJECT
* THIS ROUTINE IS FOR OVERLAP BSAM PROCESSING USING 11 READS
* IF THESE ROUTINES ARE USED FOR OTHER READS.....BE SURE
* TO PUT A    ' LM    R3,R5,GETSV ' INSTRUCTION IN YOUR EOD ROUTINE
GETREC   EQU   *
         ST    R14,GETSV14             SAVE REG 14
         STM   R3,R5,GETSV             SAVE REG 3-5
         L     R3,GETBLK+4
         L     R2,0(R3)                ADDR OF BUFFER FOR READ
         L     R4,4(R3)                ADDR OF DECB FOR READ
         READ  (4),SF,,(2),MF=E
         L     R5,8(R3)
         ST    R5,GETBLK+4
         L     R2,0(R5)                ADDR OF BUFFER
         L     R4,4(R5)                ADDR OF DECB FOR CHECK
         CHECK (R4)
         L     R14,GETSV14             RESTORE REG 14
         LM    R3,R5,GETSV             RESTORE REG 3-5
         BR    R14                     RETURN
         EJECT
GETINIT  EQU   *
* THIS ROUTINE GETS THE 11 BUFFERS AND DOES READS FOR THE FIRST 10
         ST    R14,GETSV14             SAVE REG 14
         STM   R3,R5,GETSV             SAVE REGS 3-5
         LA    R3,GETBKB1
         LA    R2,10                   11 BUFFERS (LOOP IS FOR ONLY 10)
GETLOOP  EQU   *
         L     R5,4(R3)                ADDR OF DECB
         GETBUF PDSDCB,R4
         LTR   R4,R4
         BZ    NOBUF
         ST    R4,0(R3)                ADDR OF BUFFER
         READ  (5),SF,,(4),MF=E
         LA    R3,12(R3)
         BCT   R2,GETLOOP
         GETBUF PDSDCB,R4
         ST    R4,0(R3)                ADDR OF BUFFER
* NO READ 11 HERE..ITS DONE BEFORE CHECK FOR READ 1
         LA    R1,GETREC               ADDR OF GETREC ROUTINE
         ST    R1,GETBLK               STORE ADDR
         L     R14,GETSV14             RESTORE REG 14
         LM    R3,R5,GETSV             RESTORE REG 3-5
         B     GETREC                  BRANCH TO FIRST READ
         EJECT
GETFREE  EQU   *
* THIS ROUTINE FREE'S UP ALL 11 BUFFERS
         ST    R14,GETSV14             SAVE REG 14
         STM   R3,R4,GETSV             SAVE REG 3-4
         LA    R2,11                   11 BUFFERS TO FREE
         LA    R3,GETBKB1              POINT REG 3 TO FIRST BUF ADDR
FREEUP   EQU   *
         L     R4,0(R3)                LOAD ADDR OF BUFFER TO FREE
         FREEBUF PDSDCB,R4
         LA    R3,12(R3)               POINT REG 3 TO NEXT ADDR
         BCT   R2,FREEUP
         LA    R1,GETINIT              ADDR OF INIT ROUTINE
         ST    R1,GETBLK               STORE ADDR
         LA    R1,GETBKB11
         ST    R1,GETBLK+4
         L     R14,GETSV14             RESTORE REG 14
         LM    R3,R4,GETSV             RESTORE REG 3-4
         BR    R14                     RETURN
         EJECT
         DS    0F                      ALIGN TO FULLWORD
* THE FOLLOWING ARE CONTROL BLOCKS FOR THE OVERLAP
* READS....THEY ARE AS FOLLOWS ----
* FIRST WORD IS THE ADDR TO BALR TO (EITHER GETREC OR GETINIT)
* NEXT IS THE ADDR OF THE CURRENT CONTROL BLOCK
* THEN THERE ARE ARE 11 CONTROL BLOCKS OF 3 WORDS EACH
*       FIRST WORD IS THE ADDR OF THE BUFFER
*       SECOND WORD IS THE ADDR OF THE DECB
*       THIRD WORD IS THE ADDR OF THE NEXT CONTROL BLOCK
*           THEY ARE SET UP TO POINT TO EACH OTHER  (CHAINED)
* LAST ARE SAVE AREAS FOR REG 14 AND REG 3-5
GETBLK   DC    A(GETINIT)
         DC    A(GETBKB11)
GETBKB1  DC    A(0)
GETBKD1  DC    A(PDSDECB1)
GETBKA1  DC    A(GETBKB2)
GETBKB2  DC    A(0)
GETBKD2  DC    A(PDSDECB2)
GETBKA2  DC    A(GETBKB3)
GETBKB3  DC    A(0)
GETBKD3  DC    A(PDSDECB3)
GETBKA3  DC    A(GETBKB4)
GETBKB4  DC    A(0)
GETBKD4  DC    A(PDSDECB4)
GETBKA4  DC    A(GETBKB5)
GETBKB5  DC    A(0)
GETBKD5  DC    A(PDSDECB5)
GETBKA5  DC    A(GETBKB6)
GETBKB6  DC    A(0)
GETBKD6  DC    A(PDSDECB6)
GETBKA6  DC    A(GETBKB7)
GETBKB7  DC    A(0)
GETBKD7  DC    A(PDSDECB7)
GETBKA7  DC    A(GETBKB8)
GETBKB8  DC    A(0)
GETBKD8  DC    A(PDSDECB8)
GETBKA8  DC    A(GETBKB9)
GETBKB9  DC    A(0)
GETBKD9  DC    A(PDSDECB9)
GETBKA9  DC    A(GETBKB10)
GETBKB10 DC    A(0)
GETBKD10 DC    A(PDSDECBA)
GETBKA10 DC    A(GETBKB11)
GETBKB11 DC    A(0)
GETBKD11 DC    A(PDSDECBB)
GETBKA11 DC    A(GETBKB1)
GETSV14  DS    F
GETSV    DS    3F
         EJECT
NOBUF    EQU   *
         WTO   'BUFFER ALLOCATION PROBLEM'
         B     EOJ
COREPROB EQU   *
         WTO   'GETMAINED STORAGE EXCEEDED'
         BAL   14,SNAP
         OPEN  (SNAPDCB,(OUTPUT))
         LR    10,8
         SH    10,=H'1000'
         ST    10,SLTABS
         ST    8,SLTABE
         OI    SLTABE,X'80'
         SNAP  DCB=SNAPDCB,ID=2,LIST=SLIST
         CLOSE SNAPDCB
         B     EOJ
         DS    0F
SLIST    DC    A(TABADDR,TABADDR+8)
SLTABS   DC    A(0)
SLTABE   DC    A(0)
NOSTOR   EQU   *
         WTO   'NO STORAGE AVAILABLE FOR GETMAIN'
         B     EOJ
NOMORE   EQU   *
         WTO   '10 BUFFERS EXCEEDED FOR READING A MEMBER'
         BAL   14,SNAP
         B     EOJ
         EJECT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,            X
               LRECL=150,EXLST=EXLST
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=F,                 X
               LRECL=80,BLKSIZE=80,EODAD=CARDDONE
PDSDCB   DCB   DDNAME=SMPCDS,DSORG=PS,MACRF=R,NCP=11,                  X
               RECFM=F,KEYLEN=8,BLKSIZE=256,BUFNO=11,EODAD=EOD
PDSFILE  DCB   DDNAME=PDSCDS,DSORG=PO,MACRF=R,NCP=1,                   X
               BUFNO=10,EODAD=READEOD
SNAPDCB  DCB   DDNAME=SNAPPRT,DSORG=PS,MACRF=W,BLKSIZE=882,            X
               RECFM=VBA,LRECL=125
         READ  PDSDECB1,SF,PDSDCB,MF=L
         READ  PDSDECB2,SF,PDSDCB,MF=L
         READ  PDSDECB3,SF,PDSDCB,MF=L
         READ  PDSDECB4,SF,PDSDCB,MF=L
         READ  PDSDECB5,SF,PDSDCB,MF=L
         READ  PDSDECB6,SF,PDSDCB,MF=L
         READ  PDSDECB7,SF,PDSDCB,MF=L
         READ  PDSDECB8,SF,PDSDCB,MF=L
         READ  PDSDECB9,SF,PDSDCB,MF=L
         READ  PDSDECBA,SF,PDSDCB,MF=L
         READ  PDSDECBB,SF,PDSDCB,MF=L
ONLYFMID DC    CL7' '
WORD     DS    F
PAGE     DC    PL2'0'
TTR      DS    F
PARMFLD  DC    9X'F0'
MVCPARM  MVC   0(0,5),2(3)
DBLWORD  DS    D
LENGTH   DC    AL4(52000)
         DC    AL4(520000)
TABADDR  DS    2F
MAX      DS    H
BYTES    DS    H
USERBYTE DS    H
LINES    DC    H'75'
         LTORG
         EJECT
TRTTABL  DC    256X'00'
         ORG   TRTTABL+1
         DC    AL1(BR1-MODSYSM+1)
         DC    AL1(BR2-MODSYSM+1)
         DC    AL1(BR3-MODSYSM+1)
         DC    AL1(BR4-MODSYSM+1)
         DC    AL1(BR5-MODSYSM+1)
         DC    AL1(BR6-MODSYSM+1)
         DC    AL1(BR7-MODSYSM+1)
         DC    AL1(BR8-MODSYSM+1)
         ORG   TRTTABL+X'A1'
         DC    AL1(BR9-MODSYSM+1)
         ORG   TRTTABL+X'A2'
         DC    AL1(BR10-MODSYSM+1)
         ORG   TRTTABL+X'A3'
         DC    AL1(BR11-MODSYSM+1)
         ORG   TRTTABL+X'A4'
         DC    AL1(BR12-MODSYSM+1)
         ORG   TRTTABL+X'A5'
         DC    AL1(BR13-MODSYSM+1)
         ORG   TRTTABL+X'A6'
         DC    AL1(BR14-MODSYSM+1)
         ORG   TRTTABL+X'A7'
         DC    AL1(BR15-MODSYSM+1)
         ORG   TRTTABL+X'A8'
         DC    AL1(BR16-MODSYSM+1)
         ORG   TRTTABL+X'A9'
         DC    AL1(BR17-MODSYSM+1)
         ORG   TRTTABL+X'AA'
         DC    AL1(BR18-MODSYSM+1)
         ORG   ,
         EJECT
*                                                                *RNB*
* DCB EXIT                                                       *RNB*
*                                                                *RNB*
DCBEXIT  EQU   *                                                 *RNB*
         PUSH  USING,PRINT
         DROP
         USING *,R15             ON ENTRY, R15 POINTS TO US      *RNB*
         USING IHADCB,R1         AND R1 POINTS TO THE DCB        *RNB*
         LH    R4,DCBLRECL       GET THE LRECL AND               *RNB*
         LH    R3,DCBBLKSI       THE BLOCKSIZE                   *RNB*
         STH   R4,DCBBLKSI       SET BLKSIZE TO LRECL            *RNB*
         LTR   R3,R3             HAS BLKSIZE BEEN GIVEN?         *RNB*
         BZR   R14               /NO  - LEAVE AS LRECL           *RNB*
         SR    R2,R2             /YES - ENSURE MULTIPLE OF LRECL *RNB*
         DR    R2,R4                                             *RNB*
         MR    R2,R4                                             *RNB*
         STH   R3,DCBBLKSI                                       *RNB*
         BR    R14               RETURN TO OPEN                  *RNB*
EXLST    DC    0F'0',XL1'85',AL3(DCBEXIT)
         DROP  R1,R15                                            *RNB*
         PRINT NOGEN
         DCBD  DEVD=DA,DSORG=PS
         POP   USING,PRINT
         EJECT
TABLE    DSECT
CODE     DS    X
TABNAME  DS    CL8
FMID     DS    CL7
RMID     DS    CL7
DLIB     DS    CL8
LMOD     DS    CL8
UMID     DS    CL7
RMIDDATE DS    PL3
UMIDDATE DS    PL3
TABLEN   EQU   *-TABLE
         SPACE 2
PRLINE   DSECT
LINECC   DS    C
LINEMOD  DS    CL8
         DS    CL2
LINEFMID DS    CL7
         DS    CL2
LINERMID DS    CL7
         DS    CL2
LINERDTE DS    CL5
         DS    CL2
LINELIB  DS    CL8
         DS    CL2
LINELMOD DS    CL8
         DS    CL2
LINEUMID DS    CL7
         DS    CL2
LINEUDTE DS    CL5
         SPACE 2
PTFLINE  DSECT
PLCC     DS    C
PLSYSM   DS    CL7
         DS    CL2
PLTYPE   DS    CL4
         DS    C
PLAPP    DS    CL3
         DS    C
PLACC    DS    CL3
         DS    CL2
PLFMID   DS    CL7
         DS    CL2
PLAPDATE DS    CL5
         DS    CL4
PLACDATE DS    CL5
         DS    CL4
PLLSUP   DS    CL7
         DS    CL2
PLENTRY1 DS    CL15
         DS    CL2
PLENTRY2 DS    CL15
         DS    CL2
PLENTRY3 DS    CL15
         DS    CL2
PLENTRY4 DS    CL15
         DS    CL2
PLENTRY5 DS    CL15
         DS    CL2
         SPACE 2
MACLINE  DSECT
MLCC     DS    C
MLMAC    DS    CL8
         DS    CL2
MLFMID   DS    CL7
         DS    CL2
MLRMID   DS    CL7
         DS    CL2
MLRDTE   DS    PL5
         DS    CL2
MLLIB    DS    CL8
         DS    CL2
MLUMID   DS    CL7
         DS    CL2
MLUDTE   DS    PL5
         EJECT
         REGEQU
         END
//P8CDSLST  PROC   SO=1
//* $$$
//* $$$ THIS PROC WILL DO A COMPRESSED LIST OF AN SMP4 CDS
//* $$$
//P8CDSLST   EXEC   PGM=P8CDSLST,REGION=1024K
//SYSPRINT  DD     SYSOUT=&SO
//SYSIN     DD     DUMMY
//SNAPPRT   DD     SYSOUT=&SO
//PDSCDS    DD     DSN=SYS1.SMPCDS,DISP=SHR
//SMPCDS    DD     DSN=SYS1.SMPCDS,DISP=SHR
