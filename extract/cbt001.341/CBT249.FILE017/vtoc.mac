VTOC     TITLE 'TSO VTOC SCAN ROUTINE'
         MACRO
&NAME    SCREEN &TYPE
         AIF   ('&TYPE' EQ 'POSITION').POS
         AIF   ('&TYPE' EQ 'CLEAR').CLEAR
         MNOTE 8,'*** &TYPE IS NOT VALID CONTROL TYPE'
         MEXIT
.POS     ANOP
&NAME    LA    1,1
         AGO   .SVC
.CLEAR   ANOP
&NAME    SR    1,1
.SVC     LA    0,2
         SLL   0,24
         SVC   94
         MEND
         MACRO
&NAME    MSG   &A,&B,&TYPE
         LCLC  &L
&L       SETC  'L'''
         AIF   ('&A'(1,1) EQ '(').MSG001
&NAME    LA    R1,&A          GET ADDRESS OF MESSAGE
         AGO   .MSG002
.MSG001  ANOP
&NAME    LR    R1,&A(1)       GET ADDRESS OF MESSAGE
.MSG002  ANOP
         AIF   ('&B' EQ '').MSG003
         AIF   ('&B'(1,1) EQ '(').MSG004
         LA    R0,&B          GET LENGTH OF MESSAGE
         AGO   .MSG005
.MSG003  ANOP
         LA    R0,&L.&A       GET LENGTH OF MESSAGE
         AGO   .MSG005
.MSG004  ANOP
         LR    R0,&B(1)       GET LENGTH OF MESSAGE
.MSG005  ANOP
         AIF   ('&TYPE' EQ 'PUT').MSG006
         BAL   R7,GET         GO TO GET ROUTINE
         MEXIT
.MSG006  BAL   R7,PUT         GO TO PUT ROUTINE
         MEND
         MACRO
&L       OPT   &TEXT
         LCLA  &CNT
         AIF   (T'&TEXT EQ 'O').ENDOPT
&CNT     SETA  K'&TEXT-2
&L       DC    AL1(&CNT),C&TEXT
         MEXIT
.ENDOPT  ANOP
&L       DC    X'FF'
         MEND
         EJECT
VTOC     RSAVE
         LA    R3,4095(R12)   SETUP SECOND BASE
         LA    R3,1(R3)
         USING VTOC+4102,R3   TELL ASSEMBER
         LA    R9,4095(R3)    SETUP THIRD BASE
         LA    R9,1(R9)
         USING VTOC+8198,R9   TELL ASSEMBLER
         ST    R1,CPPL        SAVE CPPL ADDRESS
         MVI   FLGS,DUMMY     SET FLAGS TO ALLOCATE A DUMMY DD
         LINK  EP=IKJDAIR,PARAM=(FLGS,CPPL,DDNAME)
         LTR   R15,R15        DID WE ALLOCATE IT O.K.
         BZ    BEGIN          YES - GO BEGIN VTOC SCAN
         CH    R15,H4         IF RC=4 THEN DD ALREADY ALLOCATED
         BNE   RTURN          NO - THEN JUST RETURN
BEGIN    DS    0H
         EXTRACT PSCB,'S',FIELDS=PSB  GET PSCB CONTROL BLOCK
         MVI   FLGS,255       SET FLGS THAT HAVE A DD ALLOCATED
         LA    R1,VTCREAD     GET ADDRESS OF VTOC READ SUBROUTINE
         ST    R1,VTOCREAD    SAVE IT
         SCREEN CLEAR         CLEAR SCREEN
         MSG   LEVEL,,PUT     PUT OUT MESSAGE
         STAX  PRESTART,REPLACE=YES  SETUP STAX INTERUPT
         B     LOPT1          GO LIST OPTIONS AND BEGIN
PRESTART DS    0H
         USING *,R15                                          ***WBF***
         MVI   SW,255         SET INTERUPT FLAG WITH X'FF'
         BR    R14            RETURN ON REG 14
         DROP  R15                                            ***WBF***
SW       DC    X'00'          FLAG SETTING FOR INTERUPT
         EJECT
VTOC001  DS    0H
         XC    ENDSW(6),ENDSW    CLEAR SWITCHES
         MVI   SW,X'00'          MAKE SURE INTERUPT SWITCH IS CLEAN
         XC    TSOTOT,TSOTOT
         MVI   ANS,C'0'
         MVC   CNTR1,=PL3'0'
         MVC   DSNAME(44),BLANKS
         MVC   SERIAL(6),BLANKS
         LA    R10,0
         MVC   ASW,ASWCLR     CLEAR ANSWER AREA
         MSG   MESS,,PUT      ISSUE MAIN MESSAGE
         MSG   ASW,,GET       WHAT DOES USER WANT TO DO
         CLI   SW,X'00'       ATTENTION ON READ?      WBF 8/4/78
         BNE   RTURN          YES - RETURN TO O/S     WBF 8/4/78
         OI    ASW,C' '       FORCE UPPER CASE        WBF 04/09/79
         CLI   ASW,C'X'       X-TYPE TSO COMMAND?
         BNE   VTOC001A       NO
         MVI   XCMD,C' '      CLEAR XCMD
         MVC   XCMD+1(L'XCMD-1),XCMD
         MVC   XCMD(L'ASW),ASW  PUT COMMAND INTO BUFFER
         BAL   R7,XCMDGO        ISSUE COMMAND
         B     VTOC001
VTOC001A CLI   ASW,C'E'       'END' - THEN GO END
         BE    RTURN          RETURN TO O/S
         CLI   ASW,C'L'       'LIST' - GO LIST IT
         BE    SCANER
         CLI   ASW,C' '       BLANK  - GO LIST IT
         BE    SCANER
         CLI   ASW,C'S'       'SCRATCH' - IF SO THEN SET FLAG
         BNE   LOPT1          NO THEN GO ISSUE OPTION LIST
         MVI   DELSW,255      SET FLAG
SCANER   EQU   *
         MSG   MESS1,,PUT
         MSG   VOLSER,,GET
         CLI   SW,X'00'       DID USER INTERRUPT US?
         BNE   VTOC001        YES
         CLI   VOLSER,C' '    NO
         BE    RTURN
WTOR2    EQU   *
         MSG   MESS2,,PUT
         MSG   NAME,,GET
         CLI   SW,X'00'       DID USER INTERRUPT US?
         BNE   VTOC001        YES
         SCREEN CLEAR         NO
         EJECT
*------ATTEMPT TO ALLOCATE UNIT
PKCHK    MVC   PACK(6),VOLSER
*        ALLOCATE (ALLOC),DDNAME=DDNAME,VOLSER=VOLSER
         MVC   S99TUPL(4),ADDRALOC               ++++ DMA 07-28-76 ++++
         MVI   S99RB+1,ALLOC                     ++++ DMA 07-28-76 ++++
         MVC   ALOCNAME(6),VOLSER                ++++ DMA 07-28-76 ++++
         LA    R1,S99RBPTR                       ++++ DMA 07-28-76 ++++
         DYNALLOC                                ++++ DMA 07-28-76 ++++
         LOCUCB VOLUME=VOLSER,NOFIND=BADUCB  A.S.T. UCB LOOKUP
         LR    R1,R15  LOAD IT TO 1                   ADDED BY B.A. RNB
         B     GOTIT
BADUCB   LA    R15,4095 SHOW BAD UCB FOR VOL SER      ADDED BY B.A. RNB
         SPACE 2
*------THE FOLLOWING CODE PUTS OUT THE RETURN CODE FOR
*------THE VOLUME WE ARE UNABLE TO ALLOCATE THEN GOES BACK
*------TO START
         CVD   R15,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  WORK1(3),DBLWD+6(2)
         MVC   LINE+30(15),=C'UNABLE TO LIST '
         MVC   LINE+45(6),VOLSER
         MVC   LINE+56(12),=C'RETURN CODE '
         MVC   LINE+68(2),WORK1+1
         MSG   LINE,,PUT
         B     VTOC001
         SPACE 2
GOTIT    STH   R1,UCB         STORE OFF UCB ADDRESS
         LH    R8,UCB         GET UCB ADDRESS
         LA    R8,18(R8)      GET DEVICE TYPE ADDRESS
         BAL   R14,DEVTYPE    GO MAKE SURE IT VALID DASD TYPE
READERX  CLI   NAME,C' '      DID USER ENTER A LEVEL
         BE    FULL           NO - THEN DO A FULL SCAN
         LA    R8,NAME        YES - THEN DETERMINE LENGTH OF LEVEL
LENLOOP  CLI   0(R8),C' '     ARE WE AT END
         BE    LENSET         YES - GO FIGURE LENGTH
         LA    R8,1(R8)       UP POINTER
         B     LENLOOP        LOOP BACK
LENSET   LA    R1,NAME        GET START OF LEVEL
         SR    R8,R1          GET LENGTH IN REG 8
         MVC   DSNAME(44),NAME SAVE LEVEL IN DSNAME
         BCTR  R8,0           MINUS ONE FOR EX INST.
         B     OPENIT         GO OPEN VTOC
FULL     MVI   FULLSW,255     SET FULL SWITCH ON
         B     OPENIT         GO OPEN VTOC
         EJECT
*------OPEN VTOC
OPENIT   DS    0H
         LA    R1,1           TELL ROUTINE TO OPEN DATASET
         ST    R1,VTOCTYPE    SAVE IT IN LIST
         LA    R1,VOLSER      GET ADDRESS OF VOLSER
         ST    R1,VTOCVOL     SAVE IT IN LIST
         LA    R1,VTOCLIST    GET ADDRESS OF LIST
         L     R15,VTOCREAD   GET ADDRESS OF ROUTINE
         BALR  R14,R15        GO TO IT
         L     R1,VTOCRC      GET RETURN CODE
         LTR   R1,R1          TEST FOR ZERO
         BNZ   OPENFAIL       NO - GO TELL USER
*------READ A RECORD
GETDCB   DS    0H
         XC    VTOCTYPE,VTOCTYPE TELL ROUTINE TO READ A RECORD
         LA    R1,VTOCLIST    GET ADDRESS OF LIST
         L     R15,VTOCREAD   GET ADDRESS OF ROUTINE
         BALR  R14,R15        GO TO IT
         L     R1,VTOCRC      GET RETURN CODE
         LTR   R1,R1          TEST FOR ZERO
         BNZ   GETFAIL        NO - GO CHECK FAIL
         L     R1,VTOCDSB     GET ADDRESS OF DSCB
         MVC   DSCB(140),8(R1) MOVE IT INTO MY AREA
         B     CHECKIT        GO CHECK IT
CLSEIT   DS    0H
         ST    R14,SAV14      SAVE CALLERS RETURN ADDRESS
         LA    R1,2           TELL ROUTINE TO CLOSE DATASET
         ST    R1,VTOCTYPE    SAVE IT IN LIST
         LA    R1,VTOCLIST    GET ADDRESS OF LIST
         L     R15,VTOCREAD   GET ADDRESS OF ROUTINE
         BALR  R14,R15        GO TO IT
         L     R14,SAV14      GET RETURN ADDRESS
         BR    R14            GO BACK TO CALLER
         EJECT
*----- DETERMINE IF DSCB IS VALID AND IF IT MATCHES LEVEL
CHECKIT  DS    0H
         CLI   SW,0
         BE    VTOC1001
         BAL   R14,CLSEIT
         B     SHORTEND
VTOC1001 CLI   DSCB+44,X'00'
         BNE   F1TST
         AP    CNTR1,=PL3'1'
F1TST    CLI   DSCB+44,X'F1'
         BE    SAVVOL
         CLI   DSCB+44,X'F4'
         BNE   GETDCB
         MVC   DSCB(44),=CL44'*VTOC'
*
SAVVOL   MVC   SERIAL,PACK
         CLI   FULLSW,X'FF'
         BE    FMT3TST
         LA    R5,DSNAME
         CLC   0(3,R5),=C'TSO#'
         BE    FMT3TST
TSTCMP   EX    R8,COMPARE
         BNE   GETDCB
FMT3TST  CLC   FMTCHH(5),=XL5'00'                      WBF 7/27/78
         BE    VTALL
         CLI   DSCB+82,X'80'     ISAM DATASET?         WBF 7/27/78
         BNE   FMT3GET           NO - GO GET FMT3      WBF 7/27/78
         OBTAIN DSCB3            YES - GET FMT2        WBF 7/27/78
         LTR   R15,R15           FMT2 RETRIEVED OK?    WBF 7/27/78
         BNZ   DSNBAD            NO - ERROR            WBF 7/27/78
         CLC   FMTXWK+135(5),=XL5'00'  FMT3 NEEDED?    WBF 7/27/78
         BE    VTALL             NO - GO PROCESS FMT1  WBF 7/27/78
         MVC   FMTCHH(5),FMTXWK+135  YES - GET CCHHR   WBF 7/27/78
FMT3GET  OBTAIN DSCB3                                  WBF 7/27/78
         LTR   R15,R15
         BNZ   DSNBAD
         EJECT
*------GET TRACK ALLOCATION
VTALL    XR    R2,R2          CLEAR REG 2
         XR    R6,R6          CLEAR REG 6
         XR    R11,R11        CLEAR REG 11
         IC    R2,DSCB+59     LOAD # OF EXTENT
         LTR   R2,R2          TEST # OF EXTENT
         BZ    DSREC          NONE - GET DCB
DSTTRK   L     R5,DSADD(R6)
         CLI   0(R5),X'00'
         BE    DSATX
         LA    R5,2(R5)            ADD 1ST TRK
         SR    R0,R0                 CLEAR REG 0
         LR    R1,R0                 CLEAR REG 1
         LH    R0,4(R5)            LAST CYL NUM
         LH    R1,0(R5)            1ST  CYL NUM
         SR    R0,R1                 SUB 1ST FROM END
         MH    R0,TRPRCY           X BY TRKS PER CY
         LH    R1,6(R5)            LAST TRK
         AR    R0,R1                 ADD TRK CNT
         LH    R1,2(R5)            STARTING TRK
         SR    R0,R1                 SUB FROM TRK CNT
         AR    R11,R0                 ACCUMULATE TOTAL
         LA    R11,R1(R11)           ADD 1 TRK
         LA    R6,4(R6)
         BCT   R2,DSTTRK     DECEEMENT EXTENT CNT
DSATX    ST    R11,TRACKS     STORE TRK ALLOCATED
         L     R2,TSOTOT
         AR    R2,R11
         ST    R2,TSOTOT
         LA    R6,4
         LA    R2,TRACKS
         BAL   R14,DSCNVT    CONVERT ALLOC TO EBCDIC
         MVC   DSALL(5),DBLWD+27                    WBF 8/11/78
*------GET TRACKS USED
         CLC   DSCB+98(3),=X'000000'
         BE    DSATX1
         LH    R1,DSCB+98
         LA    R1,1(R1)
         ST    R1,TRACKS
         LA    R6,4
         LA    R2,TRACKS
         BAL   R14,DSCNVT
         MVC   DSUSE(5),DBLWD+27                    WBF 8/11/78
*------GET NUMBER OF EXTENTS
DSATX1   LA    R2,DSCB+59
         LA    R6,1
         BAL   R14,DSCNVT
         MVC   DSEXT(2),DBLWD+30
         EJECT
*------GET CREATION DATE
         L     R1,DSCB+52
         LA    R1,0(R1)
*------TEST FOR LEAP YEAR
         ST    R1,DATEWORK
         LH    R1,DATEWORK+2         LOAD DAY OF YEAR
         TM    DATEWORK+1,X'03'  TEST FOR X OF 4
         BZ    DATMOD
*------NOT A LEAP YEAR
         C     R1,=F'60'
         BL    DATMOD
         LA    R1,1(R1)
*------CONVERT DAY OF YEAR TO MONTH AND DAY
DATMOD   SR    R2,R2                 MONTH COUNTER
DATECT   SH    R1,DATMNT(2)
         LTR   R1,R1
         BNP   DATCT2
         LA    R2,2(R2)            NEXT MONTH
         B     DATECT
*------ADD BACK NUMBER OF DAYS AND   BY2
DATCT2   AH    R1,DATMNT(R2)
         SRA   R2,1
         LA    R2,1(R2)
         SR    R6,R6
         IC    R6,DATEWORK+1
*------REG1 = DAY
*------REG2 = MONTH
*------REG3 = YEAR
         CVD   R2,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  WORK1(3),DBLWD+6(2)
         MVC   DSDATE(2),WORK1+1
         MVI   DSDATE+2,C'/'
         CVD   R1,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  WORK1(3),DBLWD+6(2)
         MVC   DSDATE+3(2),WORK1+1
         MVI   DSDATE+5,C'/'
         CVD   R6,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  WORK1(3),DBLWD+6(2)
         MVC   DSDATE+6(2),WORK1+1
         EJECT
*------GET RECORD FORMAT
DSREC    LA    R1,RECFMTBL    GET ADDRESS OF RECFM TABLE
         XR    R2,R2          CLEAR REG 2
         LA    R14,DSRCFM     GET ADDRESS OF DATALINE
RECTM    TM    DSCB+84,X'00'  TEST WHICH BIT IS ON
         IC    R2,0(R1)       GET BIT(S) TO TEST
         EX    R2,RECTM       NOW TEST IF IT IS ONE OF THE BIT(S) ON
         BO    RECSET         IF ON GO MOVE IN VALUE
RECUP    LA    R1,2(R1)       UP TABLE POINTER
         CLI   0(R1),0        ARE WE AT END OF TABLE
         BE    RECEND         YES - GO END LOOKUP
         B     RECTM          LOOP BACK
RECSET   MVC   0(1,R14),1(R1) MOVE IN VALUE
         LA    R14,1(R14)     UP POINTER
         CLI   1(R1),C'U'     TEST TO SEE IF RECFM IS 'U'
         BNE   RECUP          NO  - UP POINTER
         LA    R1,6(R1)       YES - BYPASS NEXT 2 ENTRIES
         B     RECTM          LOOP BACK
RECEND   EQU   *
*------GET ALLOCATION TYPE
         LA    R1,CALOTBL     GET ADDRESS OF TABLE TYPE
         XR    R2,R2          CLEAR REG 2
CALOTM   TM    DSCB+94,X'00'  TEST IF BITS ON
         IC    R2,0(R1)       GET BIT(S) TO TEST
         EX    R2,CALOTM      NOW TEST TO SEE IF ITS ON
         BO    CALOSET        YES - GO PUT OUT VALUE
         LA    R1,2(R1)       NO  - UP TABLE
         CLI   0(R1),0        ARE WE AT END OF TABLE
         BNE   CALOTM         NO -  GO LOOP BACK
CALOSET  MVC   DSCALO(1),1(R1)
*------GET BLOCKSIZE
DSBLKX   LA    R6,R2
         LA    R2,DSCB+86
         BAL   R14,DSCNVT
         MVC   DSBLK(5),DBLWD+27
*------GET LRECL
         LA    R6,R2
         LA    R2,DSCB+88
         BAL   R14,DSCNVT
         MVC   DSLRL(5),DBLWD+27
*-----GET DSORG
         LA    R1,ORGTBL      GET ADDRESS OF ORG TABLE
         CLC   DSCB+82(2),=X'0008'  VSAM DSORG?        WBF 8/3/78
         BNE   ORGLOOP              BIF NOT            WBF 8/3/78
         MVI   DSCB+82,X'08'        ELSE RESET DSORG   WBF 8/3/78
*                                   TO CHECKABLE VALUE WBF 8/3/78
ORGLOOP  CLC   DSCB+82(1),0(R1) IS THIS A MATCH
         BE    ORGTYPE        YES - THEN MOVE IN TYPE
         LA    R1,4(R1)       UP TABLE POINTER
         CLI   0(R1),X'00'    IS THIS THE END OF THE TABLE
         BNE   ORGLOOP        NO  - THEN GO LOOP BACK
ORGTYPE  MVC   DSORG(3),1(R1) MOVE IN TYPE
*------DETERMINE IF PSWD IS ON
         L     R1,PSCB        GET PSCB ADDRESS
         CLC   0(3,R1),=C'TEC' IS USER FROM TECH STAFF?     ***WBF***
         BE    CHKPSWD        YES - CHECK FOR PSWD PROT     ***WBF***
         CLC   0(3,R1),=C'SEC' IS USER FROM DATA SECURITY?  ***WBF***
         BNE   SETSCR          NO - DON'T SHOW PSWD INFO    ***WBF***
CHKPSWD  TM    DSCB+93,PSWD   IS PASSWORD BIT ON
         BNO   CHKRACF        NO                            ***WBF***
         MVI   DSPSWD,C'*'    SET FLAG FOR PASSWORD
CHKRACF  TM    DSCB+93,RACF   IS RACF BIT ON?               ***WBF***
         BNO   SETSCR         NO                            ***WBF***
         MVI   DSPSWD,C'@'    SET FLAG FOR RACF             ***WBF***
         EJECT
*------SET UP SCREEN FOR DISPLAY
SETSCR   CLC   DSNAME(3),=C'TSO#'
         BE    GETDCB
         CLI   HDERSW,X'FF'         HEADER DONE ?
         BC    7,HDER             YES BUILD LNE
         C     R10,=F'22'
         BC    4,LNEUP
HDER     MVC   LINE(78),VTHDER     MOVE HEADER IN
         MSG   LINE,,PUT
         MVI   HDERSW,X'FF'         ONLY 1 HEADER
         LA    R10,0
LNEUP    LA    R10,1(R10)
         CLI   DSCB+25,C' '         NORMAL DSN
         BC    7,TWOLNE            YES
         MVC   LINE(78),LNE        MOVE IN LINE
         MVC   LNE(78),BLANKS CLEAR LNE
         MVC   LINE(25),DSCB        MOVE DSN IN
         MSG   LINE,,PUT
         CLI   DELSW,X'FF'
         BNE   GETDCB
         BAL   R14,DEL
         B     GETDCB                NO - GET NEXT LN
TWOLNE   MVC   LINE(78),BLANKS    CLEAR LINE
         MVC   LINE(44),DSCB
         LA    R10,1(10)
         MSG   LINE,,PUT
         MVC   LINE(78),LNE
         MVC   LNE(78),BLANKS CLEAR LNE
         MSG   LINE,,PUT
         CLI   DELSW,X'FF'
         BNE   GETDCB
         BAL   R14,DEL
         B     GETDCB                NO - GET LINE
         EJECT
CLOSER   DS    0H
         CLC   DSNAME(4),=C'TSO#'
         BNE   SPACE
         SCREEN CLEAR
SPACE    LH    R0,UCB
         LA    R1,SPCEWK
         SVC   78
         MVC   VOLMSG1+15(6),VOLSER        DISPLAY VOL SER
         MSG   VOLMSG1,,PUT
         MVC   LINE(78),BLANKS
         MVC   LINE+2(21),SPHD1
         MVC   LINE+31(24),SPHD2
         MVC   LINE+60(15),SPHD3
         MSG   LINE,,PUT
         MVC   LINE(78),BLANKS
         MVC   LINE+3(15),SPCEFILL
         MVC   LINE+32(15),SPCEFILL
         MVC   LNETCYL(4),TOTCYL
         MVC   LNETTRK(4),TOTTRK
         MVC   LNECCYL(4),CONCYL
         MVC   LNECTRK(4),CONTRK
         UNPK  LNEDSCB(4),CNTR1                    +++ DMA 02-03-77 +++
         OI    LNEDSCB+3,X'F0'                     +++ DMA 02-03-77 +++
         MSG   LINE,,PUT
         EJECT
         CLC   DSNAME(3),=C'TSO#'
         BNE   SHORTEND
         LA    R2,TSOTOT
         LA    R6,4
         BAL   R14,DSCNVT
         MVC   LINE(78),BLANKS
         MVC   LINE+10(25),TOTHEAD1
         MVC   LINE+35(5),DBLWD+27
         PACK  WORKA,TOTCYL
         MP    WORKA,TRPRCYP+5(3)                      WBF 7/21/78
         PACK  WORKB,TOTTRK
         AP    WORKA,WORKB
         XC    DBLWD,DBLWD
         MVC   DBLWD+3(5),WORKA
         CVB   R2,DBLWD
         ST    R2,REGST
         LA    R2,REGST
         LA    R6,4
         BAL   R14,DSCNVT
         MVC   LINE+45(20),=C'TOTAL FREE TRACKS = '
         MVC   LINE+65(5),DBLWD+27
         MSG   LINE,,PUT
         L     R1,REGST
         L     R2,TSOTOT
         AR    R1,R2
         ST    R1,REGST
         LA    R2,REGST
         LA    R6,4
         BAL   R14,DSCNVT
         MVC   LINE(78),BLANKS
         MVC   LINE+10(34),=C'TOTAL TRACKS ALLOCATED AND FREE = '
         MVC   LINE+44(5),DBLWD+27
         MSG   LINE,,PUT
         LH    R1,UCB               GET UCB        +++ DMA 02-03-77 +++
         MVC   MAXTRKS,=F'7675'     SET 3330 TRACKS+++ DMA 02-03-77 +++
         CLC   18(2,R1),=X'2009'    3330 DISK?     +++ DMA 02-03-77 +++
         BE    GOTRACKS                YES         +++ DMA 02-03-77 +++
         MVC   MAXTRKS,=F'15351'    SET MOD-11 TRKS+++ DMA 02-03-77 +++
         CLC   18(2,R1),=X'200D'    MOD-11 DISK?   +++ DMA 02-03-77 +++
         BE    GOTRACKS                YES         +++ DMA 02-03-77 +++
         MVC   MAXTRKS,=F'16649'    MUST BE 3350   +++ DMA 02-03-77 +++
GOTRACKS DS    0H
         L     R1,REGST
         C     R1,MAXTRKS
         BNE   OUT
         MSG   GOODMES,,PUT
         B     SHORTEND
OUT      MSG   BADMES,,PUT
         MVC   CNTR1,=PL3'0'
         XC    TSOTOT,TSOTOT
SPECLSE  BAL   R14,CLSEIT     GO CLOSE VTOC
SHORTEND MSG   MESSC,,PUT
         MVC   LINE(78),BLANKS
         MVC   S99TUPL(4),ADDRUNAL               ++++ DMA 07-28-76 ++++
         MVI   S99RB+1,UNALLOC                   ++++ DMA 07-28-76 ++++
         MVC   ALOCNAME(6),VOLSER                ++++ DMA 07-28-76 ++++
         LA    R1,S99RBPTR                       ++++ DMA 07-28-76 ++++
         DYNALLOC                                ++++ DMA 07-28-76 ++++
         B     VTOC001
         EJECT
DEL      ST    R14,REG14
         MSG   MESSD,,PUT
DELA     MVC   ANS,ANSCLR      CLEAR ANS AREA         WBF 04/08/79
         MSG   ANS,,GET        GET HIS REQUEST        WBF 04/08/79
         CLI   SW,X'00'        ATTENTION?             WBF 04/09/79
         BNE   DELSHRT         YES - GET OUT          WBF 04/09/79
         OI    ANS,X'40'
         CLI   ANS,C' '                               WBF 04/08/79
         BE    GOBACK                                 WBF 04/08/79%
         CLI   ANS,C'L'
         BE    LISTER
         CLI   ANS,C'R'                               WBF 04/08/79
         BE    RLSE                                   WBF 04/08/79
         CLI   ANS,C'Y'
         BE    YES
         CLI   ANS,C'X'       X-TYPE TSO COMMAND?     WBF 04/09/79
         BE    DELXTSO        YES
         CLI   ANS,C'C'       VERIFY CATALOG POINTER?
         BE    CATVER
         CLI   ANS,C'V'       DISPLAY VOLUME SERIAL?
         BE    VOLVER
         CLI   ANS,C'E'       NO
         BNE   LOPT2                                  WBF 04/08/79
DELSHRT  BAL   R14,CLSEIT     GO CLOSE VTOC
         B     SHORTEND
GOBACK   L     R14,REG14
         BR    R14
YES      DS    0H
         BAL   R14,UVERIFY    CHECK USER'S AUTHORITY
         B     NOTUSER          NOT AUTHORIZED RETURN POINT
***      B     *+4              AUTHORIZED RETURN POINT
         SR    R0,R0
         MVC   NAME(44),DSCB
         MVC   VNAME(6),VOLSER
         LH    R1,UCB         GET UCB ADDRESS
         MVC   VTYPE(4),16(R1)   MOVE IN DEVICE TYPE
         SCRATCH DSNVTOC
         CVD   R15,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  MESSE+11(2),DBLWD
         LTR   R15,R15               SCRATCH OK?
         BZ    UNCATIT               YES
*                                    NO
         LH    R15,VSTAT             GET SCRATCH STATUS CODE
         CVD   R15,DBLWD             PUT IT IN MESSAGE
         OI    DBLWD+7,X'0F'
         MVI   MESSE+13,C'/'
         UNPK  MESSE+14(2),DBLWD
         MVC   MESSE+16(18),=C', UNCATLG BYPASSED'
         B     ARRO
UNCATIT  MVC   MESSE+13(38),=CL38'   UNCATLG RC=XX'
         LOCATE INNAME
         LTR   R15,R15
         BNZ   NOTCAT
         CLC   VOLSER(6),BLK+6
         BNE   NOTVOL
         CATALOG UNCATLG
         CVD   R15,DBLWD
         OI    DBLWD+7,X'0F'
         UNPK  MESSE+27(2),DBLWD
         B     ARRO
NOTUSER  MSG   NOSCRMES,,PUT
         B     ARRO1
NOTCAT   MVC   MESSE+16(24),=C'DATASET IS NOT CATALOGED'
         B     ARRO
NOTVOL   MVC   MESSE+16(34),=C'DATASET CATALOGED ON VOLUME VVVVVV'
         MVC   MESSE+44(6),BLK+6
ARRO     MSG   MESSE,,PUT
ARRO1    L     R14,REG14
         BR    R14
         EJECT
LISTER   DS    0H
         TM    DSCB+82,X'40'  IS THE DATASET A PS TYPE
         BO    SETLIST
         TM    DSCB+82,X'02'  PARTITIONED?            WBF 04/08/79
         BO    LPDS           YES                     WBF 04/08/79
         MSG   MESSI,,PUT
         B     VTALL
         SPACE 2
SETLIST  XC    JFCBAREA,JFCBAREA    CLEAR AREA
         OI    JFCBAREA+52,X'08'    DONT REWRITE JFCB
         MVC   JFCBAREA(44),DSCB    MOVE IN DATA SET NAME
         MVC   JFCBAREA+118(6),PACK
         SR    R2,R2          CLEAR REG 2
         OPEN  (INDCB2,INPUT),TYPE=J
         LH    R2,INDCB2+82       GET REC LENGTH
GETER    GET   INDCB2
         MSG   (R1),(R2),PUT   WRITE OUT RECORD
         CLI   SW,255         DID USER INTERUPT US
         BNE   GETER          NO
         MVI   SW,0           CLEAR SWITCH
         EJECT
*-----
*----- CLOSE FILE AND FREE BUFFERS
*-----
CLOSE2   CLOSE INDCB2
         FREEPOOL INDCB2
         MVI   SW,0           RESET INTERUPT SWITCH
         B     VTALL          REFORMAT DSCB
         SPACE 3                                      WBF 04/08/79
LPDS     MSG   LPDSMSG,,PUT   ISSUE LPDS MESSAGE      WBF 04/08/79
         BAL   R14,XCMDSET    BUILD BASIC COMMAND     WBF 04/08/79
         MVC   XCMD+2(4),=C'LPDS'   FILL IN CMD NAME  WBF 04/08/79
         BAL   R7,XCMDGO      ISSUE COMMAND           WBF 04/09/79
         B     VOLVER                                 WBF 04/26/79
         SPACE 3                                      WBF 04/08/79
RLSE     BAL   R14,UVERIFY    CHECK USER'S AUTHORITY  WBF 04/26/79
         B     RLNOTUSR         NOT AUTHORIZED        WBF 04/26/79
***      B     *+4              AUTHORIZED            WBF 04/26/79
         BAL   R14,XCMDSET    BUILD BASIC COMMAND     WBF 04/08/79
         MVC   XCMD+2(4),=C'RLSE'   FILL IN CMD NAME  WBF 04/08/79
         LR    R2,R1          SAVE CMD POINTER        WBF 04/08/79
         MSG   MESSR,,PUT     ASK FOR AMT TO SAVE     WBF 04/08/79
         MSG   0(,R2),20,GET                          WBF 04/08/79
         CLI   SW,X'00'       ATTENTION?              WBF 04/09/79
         BNE   DELSHRT        YES - GET OUT           WBF 04/09/79
         BAL   R7,XCMDGO      ISSUE COMMAND           WBF 04/09/79
         OBTAIN DSCB1         RE-RETRIEVE DSCB        WBF 04/09/79
         MVC   DSCB+44(96),FMTXWK  PUT IN RIGHT PLACE WBF 04/09/79
         LTR   R15,R15        WAS OBTAIN GOOD?        WBF 04/09/79
         BZ    FMT3TST        YES - REDISPLAY DSCB    WBF 04/09/79
         MSG   MESSQ,,PUT     NO  - TELL USER         WBF 04/09/79
         B     GOBACK         GO TO NEXT DSCB         WBF 04/08/79
         SPACE 3
RLNOTUSR MSG   NORLSMES,,PUT  TELL USER HE CAN'T      WBF 04/26/79
         B     VTALL          RE-DISPLAY DSCB         WBF 04/26/79
DELXTSO  MVC   XCMD(L'ANS),ANS   PUT COMMAND IN BUFF  WBF 04/09/79
         BAL   R7,XCMDGO      ISSUE COMMAND           WBF 04/09/79
VOLVER   MVC   VOLMSG2+11(6),VOLSER  DISPLAY VOLSER   WBF 04/26/79
         MSG   VOLMSG2,,PUT                           WBF 04/26/79
         B     VTALL          REDISPLAY DSCB          WBF 04/09/79
         SPACE 3
CATVER   MVC   NAME(44),DSCB                          WBF 04/26/79
         LOCATE INNAME                                WBF 04/26/79
         LTR   R15,R15
         BNZ   CATVNOT
         CLC   VOLSER(6),BLK+6
         BNE   CATVNVOL
         MVC   VOLMSG3+37(6),VOLSER      ON THIS VOLUME
         MSG   VOLMSG3,,PUT
         B     VTALL
CATVNOT  MSG   VOLMSG4,,PUT              NOT CATALOGED
         B     VTALL
CATVNVOL MVC   VOLMSG5+24(6),BLK+6       ON A DIFFERENT VOLUME
         MSG   VOLMSG5,,PUT
         B     VTALL
         EJECT
*------CONVERT TO EBCDIC
DSCNVT   SR    R0,R0
DSCVT1   SLL   R0,8
         IC    R0,0(R2)
         LA    R2,1(R2)
         BCT   R6,DSCVT1
         LPR   R0,R0
         CVD   R0,DBLWD
         MVC   DBLWD+20(12),DBLWD+8
         ED    DBLWD+20(12),DBLWD+2
         BR    R14
*------GET TRACK COUNT FOR DEVICE TYPE
DEVTYPE  LA    R1,DEVTABLE-4
NEXTDEV  LA    R1,4(R1)
         CLC   0(2,R1),=X'0000'
         BE    NOTDASD
         CLC   0(2,R1),0(R8)
         BNE   NEXTDEV
         MVC   TRPRCY(2),2(R1)
         LH    R1,TRPRCY
         CVD   R1,TRPRCYP                              WBF 7/21/78
         BR    R14
*------ERROR IN OBTAIN MACRO
DSNBAD   MVC   LNE+30(6),SERIAL
         SLA   R15,3
         LA    R15,DSNERR-32(R15)
         MVI   LNE+28,C'-'
         MVC   LNE+38(32),0(R15)
         B     SETSCR
*------ VTOC ERROR MESSAGES
DSNERR   DS    0H
         DC    CL32'VOLUME NOT MOUNTED              '
         DC    CL32'NOT ON VOLUME                   '
         DC    CL32'PERMANENT I/O ERROR             '
         DC    CL32'INVALID WORK AREA POINTER       '
         DC    CL32'CCHH NOT IN VTOC                '
OPENFAIL DS    0H
         MVC   LINE,BLANKS
         CVD   R1,DBLWD
         OI    DBLWD+7,X'0F'
         MVC   LINE(L'MESSK),MESSK
         UNPK  LINE+L'MESSK(2),DBLWD
         MSG   LINE,,PUT
         B     RTURN          RETURN TO O/S
         SPACE 2
GETFAIL  DS    0H
         ST    R1,REGST       SAVE RETURN CODE FROM GET
         BAL   R14,CLSEIT     GO CLOSE FILE
         CLC   REGST,F4       IF RETURN CODE IS 4 THEN END OF FILE
         BE    CLOSER         GO TO CLOSING ROUTINES
         MSG   PERMMSG,,PUT   IF NOT 4 THEN PERMANENT I/O ERROR
         B     SHORTEND       GO TO SHORT END
         EJECT
*---- COMMON TPUT AND TGET ROUTINES
PUT      DS    0H
         TPUT  (1),(0),R      ISSUE MESSAGE TO TERMINAL
         BR    R7             RETURN TO CALLER
         SPACE 2
GET      DS    0H
         STM   R0,R1,TGETSAVE SAVE REGS 0,1
         TGET  TGETAREA,78    ISSUE TGET FOR MAX OF 78 BYTES
         OC    TGETAREA,BLANKS MAKE IT ALL UPPER CASE
         L     R14,TGETSAVE   GET LENGTH CALLER WANTED BACK
         L     R15,TGETSAVE+4 GET ADDRESS OF CALLER'S AREA
         BCTR  R14,0          SETUP FOR EX INST.
         EX    R14,GETMOVE    MOVE IT IN
         BR    R7             RETURN TO CALLER
GETMOVE  MVC   0(0,R15),TGETAREA
         SPACE 2
RTURN    DS    0H
*        ALLOCATE (ABEND)
         CLI   FLGS,255       IS A DD ALLOCATED
         BNE   RTURN01
         MVI   FLGS,FREEDD    SET FLAG TO DE-ALLOCATE DD
*        LINK  EP=IKJDAIR,PARAM=(FLGS,CPPL,DDNAME)
RTURN01  RTURN RC=0
         EJECT
XCMDSET  MVI   XCMD,C' '      CLEAR COMMAND AREA      WBF 04/08/79
         MVC   XCMD+1(L'XCMD-1),XCMD                  WBF 04/08/79
         MVC   XCMD(8),=C'X CCCC '''                  WBF 04/08/79
         MVC   XCMD+8(44),DSCB      PUT IN DSNAME     WBF 04/08/79
         LA    R1,XCMD+8            PUT IN LAST QUOTE WBF 04/08/79
         LA    R0,44                                  WBF 04/08/79
XCMDL    CLI   0(R1),C' '                             WBF 04/08/79
         BE    XCMDQ                                  WBF 04/08/79
         LA    R1,1(,R1)                              WBF 04/08/79
         BCT   R0,XCMDL                               WBF 04/08/79
XCMDQ    MVI   0(R1),C''''                            WBF 04/08/79
         MVC   1(5,R1),=C' VOL('    PUT IN VOLSER     WBF 04/08/79
         MVC   6(6,R1),VOLSER                         WBF 04/08/79
         MVI   12(R1),C')'                            WBF 04/08/79
         LA    R1,14(,R1)      POINT PAST OPERANDS    WBF 04/08/79
         BR    R14             RETURN TO CALLER       WBF 04/08/79
         SPACE 3                                      WBF 04/08/79
XCMDGO   L     R0,=X'0100000C'   GET 12 BYTES IN SP=1 WBF 04/08/79
         GETMAIN R,LV=(0)                             WBF 04/08/79
         ST    R1,XCMDMAIN                            WBF 04/08/79
         MVC   XCMDHD(4),=XL4'00780000'               WBF 04/08/79
         XC    XCMDECB,XCMDECB                        WBF 04/08/79
         L     R15,CPPL          GET THINGS FROM CPPL WBF 04/08/79
         ICM   R1,7,5(R15)                            WBF 04/08/79
         STCM  R1,7,CSPLUPT+1                         WBF 04/08/79
         ICM   R1,7,13(R15)                           WBF 04/08/79
         STCM  R1,7,CSPLECT+1                         WBF 04/08/79
         L     R1,XCMDMAIN       POINT TO GOTTEN AREA WBF 04/08/79
         STCM  R1,7,CSPLFLG+1                         WBF 04/08/79
         MVI   0(R1),X'00'       SET SCAN FLAG        WBF 04/08/79
         LA    R1,4(,R1)         POINT TO OUTPUT AREA WBF 04/08/79
         ST    R1,CSPLOA                              WBF 04/08/79
         LA    R1,CSPL                                WBF 04/08/79
         CALLTSSR EP=IKJSCAN     LET PCF DO COMMAND   WBF 04/08/79
         L     R1,XCMDMAIN       FREE GOTTEN AREA     WBF 04/08/79
         L     R0,=X'0100000C'                        WBF 04/08/79
         FREEMAIN R,LV=(0),A=(1)                      WBF 04/08/79
         BR    R7                                     WBF 04/08/79
UCBERR   DS    0H
         MSG   MESSG,,PUT
         B     SCANER
NOTDASD  DS    0H
         MSG   MESSH,,PUT
         B     SCANER
         SPACE 3
UVERIFY  L     R1,PSCB        GET PSCB ADDRESS
         TM    16(R1),OPERATOR DOES USER HAVE OPERATOR STATUS
         BO    4(,R14)        YES - GOOD RETURN
         IC    R2,7(R1)       GET LENGTH OF USERID
         BCTR  R2,0           SETUP FOR EX INST.
UVERCMP  CLC   DSCB(0),0(R1)  COMPARE USER ID TO DSCB
         EX    R2,UVERCMP     NOW DO IT WITH RIGHT LENGTH
         BE    4(,R14)        IF THE SAME THEN GOOD RETURN
         BR    R14            IF NOT - BAD RETURN
         SPACE 3
LOPT1    EQU   *              LIST BASIC OPTIONS
         LA    R2,OPT1TBL     POINT TO OPTION TABLE
         SR    R6,R6
LOPT1L   CLI   0(R2),X'FF'    END OF TABLE?
         BE    VTOC001        YES - RETURN TO MAINLINE
         IC    R6,0(,R2)      GET LENGTH OF MSG
         MSG   1(,R2),(R6),PUT  OUTPUT A MSG
         LA    R2,1(R6,R2)    POINT TO NEXT MSG
         B     LOPT1L
         SPACE 3
LOPT2    EQU   *              LIST SCROLL OPTIONS
         LA    R2,OPT2TBL     POINT TO OPTION TABLE
         SR    R6,R6
LOPT2L   CLI   0(R2),X'FF'    END OF TABLE?
         BE    VOLVER         YES - RETURN TO SCROLL
         IC    R6,0(,R2)      GET LENGTH OF MSG
         MSG   1(,R2),(R6),PUT  OUTPUT A MSG
         LA    R2,1(R6,R2)    POINT TO NEXT MSG
         B     LOPT2L
         EJECT
LEVEL    DC    C'* TSO VTOC SCAN  - REL 3.5 *'         WBF 4/26/79
MESS     DC    C'ENTER VTOC OPTION'
MESS1    DC    C'REPLY NAME OF PACK TO BE PROCESSED'
MESS2    DC    C'REPLY LEVEL OF SCAN  (LEAVE BLANK FOR FULL SCAN)'
MESSC    DC    C'*******  END OF VTOC SCAN  **********'
MESSD    DC    C'ENTER SCROLL OPTION, OR ''Y'' TO SCRATCH D.S.'
MESSE    DC    CL51'SCRATCH RC='
MESSG    DC    C'VOLUME NOT MOUNTED'
MESSH    DC    C'PACK NAME NOT DIRECT ACCESS VOLUME'
MESSI    DC    C'UNABLE TO LIST DATASET - FORMAT NOT PS OR PO'
MESSK    DC    C'OPEN FAILED FOR DD VTOCDD -- RC = '
MESSR    DC    C'PRESS ENTER TO FREE ALL UNUSED SPACE, OR REPLY ''KEEP($
               NN)'' TO KEEP NN FREE TRKS'            WBF 04/08/79
MESSQ    DC    C'OBTAIN ERROR AFTER RLSE'             WBF 04/09/79
TOTHEAD1 DC    C'TOTAL ALLOCATED TRACKS = '
GOODMES  DC    C'PACK IS IN BALANCE'
BADMES   DC    C'PACK IS OUT-OF-BALANCE'
PERMMSG  DC    C'PERMANENT ERROR WHILE READING VTOC'
NOSCRMES DC    C'SCRATCH VALID ONLY FOR ''USERID.'' DATASETS'
NORLSMES DC    C'RELEASE VALID ONLY FOR ''USERID.'' DATASETS'
VOLMSG1  DC    C'*** FOR VOLUME VVVVVV:'
VOLMSG2  DC    C'PROCESSING VVVVVV:'
VOLMSG3  DC    C'DATASET IS CATALOGED ON THIS VOLUME, VVVVVV'
VOLMSG4  DC    C'DATASET IS NOT CATALOGED'
VOLMSG5  DC    C'DATASET IS CATALOGED ON VVVVVV'
LPDSMSG  DC    C'LPDS:'
OPT1TBL  OPT   'VTOC OPTIONS ARE:'  BASIC OPTIONS
         OPT   '  L - LIST A VTOC'
         OPT   '  S - SCROLL A VTOC, ONE DATASET AT A TIME'
         OPT   '  X - EXECUTE A TSO COMMAND (E.G., X LISTBC)'
         OPT   '  E - END'
         OPT
OPT2TBL  OPT   'SCROLL OPTIONS ARE:' SCROLL OPTIONS
         OPT   '  C - DISPLAY CATALOGED VOLUME SERIAL FOR DATASET'
         OPT   '  L - LIST SEQUENTIAL DATA SET'
         OPT   '      OR INVOKE LPDS FOR A PDS'
         OPT   '  R - RELEASE UNUSED SPACE FROM DATASET'
         OPT   '  V - DISPLAY THE CURRENT VOLUME SERIAL'
         OPT   '  X - EXECUTE A TSO COMMAND (E.G., X LISTBC)'
         OPT   '  Y - SCRATCH THE DATASET'
         OPT   '  E - END SCROLL'
         OPT   '  BLANK - SCROLL TO NEXT DATASET'
         OPT
COMPARE  CLC   0(0,R5),DSCB
         DS    0F                                ++++ DMA 07-28-76 ++++
S99RBPTR DC    X'80'            PTR TO S99RB     ++++ DMA 07-28-76 ++++
         DC    AL3(S99RB)                        ++++ DMA 07-28-76 ++++
S99RB    DC    X'14'            LENGTH           ++++ DMA 07-28-76 ++++
         DC    X'00'            VERB CODE        ++++ DMA 07-28-76 ++++
ALLOC    EQU   1                  (ALLOCATE)     ++++ DMA 07-28-76 ++++
UNALLOC  EQU   2                  (UNALLOCATE)   ++++ DMA 07-28-76 ++++
         DC    H'0'             FLAGS1           ++++ DMA 07-28-76 ++++
         DC    H'0'             ERROR CODE       ++++ DMA 07-28-76 ++++
         DC    H'0'             INFO CODE        ++++ DMA 07-28-76 ++++
         DC    AL4(S99TUPL)     PTR TO S99TUPL   ++++ DMA 07-28-76 ++++
         DC    F'0'             RESERVED         ++++ DMA 07-28-76 ++++
         DC    F'0'             FLAGS2           ++++ DMA 07-28-76 ++++
S99TUPL  DC    X'00'            PTRS TO S99TUNITS++++ DMA 07-28-76 ++++
         DC    3XL1'00'         ADDRESS PLUGED   ++++ DMA 07-28-76 ++++
         DC    X'00'                             ++++ DMA 07-28-76 ++++
         DC    AL3(S9TUNIT2)                     ++++ DMA 07-28-76 ++++
         DC    X'00'                             ++++ WBF 04/26/79 ++++
         DC    AL3(S9TUNIT3)                     ++++ DMA 07-28-76 ++++
         DC    X'80'                             ++++ WBF 04/26/79 ++++
         DC    AL3(S9TUNIT4)                     ++++ WBF 04/26/79 ++++
S9TUNIT1 DC    X'0010'          KEY              ++++ DMA 07-28-76 ++++
         DC    X'0001'          #                ++++ DMA 07-28-76 ++++
         DC    X'0006'          LENGTH           ++++ DMA 07-28-76 ++++
ALOCNAME DC    CL6' '           PARM             ++++ DMA 07-28-76 ++++
S9TUNIT2 DC    X'0004'          KEY              ++++ DMA 07-28-76 ++++
         DC    X'0001'          #                ++++ DMA 07-28-76 ++++
         DC    X'0001'          LENGTH           ++++ DMA 07-28-76 ++++
         DC    X'08'            PARM             ++++ DMA 07-28-76 ++++
         DC    X'00' FOR ALIGNMENT ONLY          ++++ DMA 07-28-76 ++++
S9TUNIT3 DC    X'0001'          KEY              ++++ DMA 07-28-76 ++++
         DC    X'0001'          #                ++++ DMA 07-28-76 ++++
         DC    H'6'             LENGTH           ++++ DMA 07-28-76 ++++
         DC    CL6'VTOCDD'      PARM             ++++ DMA 07-28-76 ++++
S9TUNIT4 DC    X'0015'          KEY              ++++ WBF 04/26/79 ++++
         DC    X'0001'          #                ++++ WBF 04/26/79 ++++
         DC    H'8'             LENGTH           ++++ WBF 04/26/79 ++++
         DC    CL8'SYSALLDA'    PARM (UNITNAME)  ++++ WBF 04/26/79 ++++
         DS    0F                                ++++ DMA 07-28-76 ++++
ADDRALOC DC    X'00'                             ++++ DMA 07-28-76 ++++
         DC    AL3(S9TUNIT1)                     ++++ DMA 07-28-76 ++++
ADDRUNAL DC    X'80'                             ++++ DMA 07-28-76 ++++
         DC    AL3(S9TUNIT3)                     ++++ DMA 07-28-76 ++++
         LTORG
         DROP  R3,R9
         TITLE 'VTCREAD - VTOC READING SUBROUTINE'
***********************************************************************
*        SPACE
* AUTHOR;  R. F. MORSE, MIT INSTRUMENTATION LABORATORY  AUG 5,1968.
* MODIFIED;   E.BANK, FIREMAN'S FUND  MAY 15,1975.
* MODIFIED;   DEAN ALBERTSOR, RNB     JULY 28,1976.
* MODIFIED;   DEAN ALBERTSOR, RNB     FEB  3,1777.
* FUNCTION; THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)
*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER
*        ONE RECORD (DSCB) AT A TIME.
*
* OPERATION; THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD
*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS
*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE
*        TIME.  THE ROUTINE HAS THREE CALL MODES;
*
*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN THE 3RD
*              PARAMETER.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES,
*              CONTAINING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA
*              (96 BYTES) FOR ONE DSCB.  RETURN CODES (4TH PARAMETER)
*              ARE;
*                      0 - NORMAL;
*                      4 - END OF FILE, NO DATA PRESENTED;
*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS
*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL
*                          CONTAIN THE CORRECT CCHHR.  SINCE READING
*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S
*                          FOR THAT TRACK WILL BE MARKED IN ERROR.
*                          READING MAY CONTINUE ON TO THE NEXT TRACK.
*
*        1 - OPEN.  THE SECOND PARAMETER SHOULD POINT TO THE SDV OF
*              AN 6-BYTE FIELD CONTAINING THE VOLSER TO BE USED IN THE
*              JFCB. THE CORRESPONDING DD CARD SHOULD SPECIFY A DISP OF
*              (OLD,KEEP).
*              RETURN CODES (4TH PARAMETER) ARE;
*                      0 - NORMAL;
*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);
*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS
*                          DEVICE, OR DEVICE TYPE UNKNOWN.
*
*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN
*              CODE (4TH PARAMETER) IS 0.
         SPACE
* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTCREAD' .
*        ARGUMENTS ARE:
*                      1 - A(FULL-WORD BINARY ENTRY TYPE);
*                      2 - A(VOLSER);
*                      3 - A(PTR FOR DSCB);
*                      4 - A(FULL-WORD BINARY RETURN CODE).
*
* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS
*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO
*        READ AN ENTIRE TRACK AT A TIME.
*
* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT
*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.
         SPACE
* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN
*        CODE IN FOURTH PARAMETER.  (SEE ABOVE FOR RETURN CODE VALUES.)
*
* TABLES AND WORK AREAS;  DOES A GETMAIN TO OBTAIN A BUFFER LARGE
*        ENOUGH TO HOLD AN ENTIRE TRACK FROM THE DEVICE BEING READ.
*        THIS AREA MAY BE AS LARGE AS 13030 BYTES (FOR 3330 DISK).
*
* ATTRIBUTES;  SERIALLY REUSABLE, NON-RECURSIVE, NON-REENTRANT.
         EJECT
* SECTION DEFINITION AND REGISTER ASSIGNMENTS;
         SPACE
VTCREAD  DS    0H
         SPACE 2
RWA      EQU   2
RWB      EQU   3
RWC      EQU   4
RPARM    EQU   9
RRCODE   EQU   10              RETURN CODE REGISTER
RRET     EQU   11              LOCAL SUBROUTINE EXIT REGISTER
         SPACE 3
* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:
         SPACE
READR0   EQU   X'16'           READ RECORD 0
READCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA
         SPACE
CC       EQU   X'40'           COMMAND CHAIN FLAG
SLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG
SKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG
         EJECT
************
* PROLOGUE *
************
         SPACE
* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.
         SPACE
START    RSAVE  ,
         LR    RPARM,R1                 SAVE PARAMETER REGISTER
         SR    RRCODE,RRCODE           ZERO RETURN CODE REGISTER
         SPACE
* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.
         SPACE
         LA    RWA,3                   MASK FOR LOW 2 BITS
         N     RWA,0(R1)               GET CALL MODE
         SLL   RWA,2                   MODE TIMES 4
         B     *+4(RWA)                BRANCH ON MODE
         SPACE
         B     GETDSB                  MODE 0, GET A DSCB
         B     OPEN                    MODE 1, OPEN A NEW VTOC
         B     CLOSE                   MODE 2, CLOSE
         B     RETURN0                 MODE 3 NOT DEFINED, NO OP
         SPACE 3
***********
* RETURNS *
***********
         SPACE
RETURN8  LA    RRCODE,4(RRCODE)        ENTRY FOR RETURN CODE 8
RETURN4  LA    RRCODE,4(RRCODE)        ENTRY FOR RETURN CODE 4
RETURN0  LA    R15,12(RPARM)           ENTRY FOR RETURN CODE 0
         ST    RRCODE,0(R15)
         LA    R15,8(RPARM)            GET ADDR OF PTR FOR DSCB
         ST    R1,0(R15)
         RTURN RC=0
         EJECT
*********************
* MODE 0 - GET DSCB *
*********************
         SPACE
* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.
         SPACE
GETDSB   DS    0H
         TM    MODESW,EOFSW            TEST END-OF-FILE BIT
         BO    RETURN4                 RETURN CODE 4 IF ON
         SPACE
* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,
* ASSUME THERE IS AT LEAST ONE FULL BUFFER.
         SPACE
         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED
         BO    XCPTEST                 BRANCH IF SO
         SPACE
* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,
* EXIT WITH ITS ADDRESS IN R1.
         SPACE
         L     RWA,DSCBADR             LOAD BUFFER POINTER
         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB
NDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER
         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER
         BNL   LASTDSCB                BRANCH IF SO
         LR    R1,RWA                  PASS ADDRESS TO USER
GETOUT   TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK
         BZ    RETURN0                 RETURN CODE 0 IF NOT
         B     RETURN8                 RETURN CODE 8 IF ERROR
         SPACE
* IF THIS IS THE LAST DSCB, MOVE IT TO THE JFCB BUFFER AND START
* READING THE NEXT TRACK.
         SPACE
LASTDSCB MVC   JFCB(148),0(RWA)        MOVE LAST DSCB
         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER
         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK
         ST    RWB,TTRN
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         LA    R1,JFCB                 LOAD DSCB ADDRESS FOR CALLER
         B     GETOUT                  TO RETURN
         EJECT
* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.
         SPACE
XCPTEST  WAIT  ECB=VTOCECB
         SPACE
         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF
         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE
         BNE   PERMERR                 BRANCH IF ERROR
SETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB
         B     NDXSTORE
         SPACE
* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE
* CCHHR PORTIONS OF THE COUNT AREAS.
         SPACE
PERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR
         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG
         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1
         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB
         LA    RWB,1                   LOAD RECORD NUMBER
         SPACE
DSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER
         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD
         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD
         LA    RWA,148(RWA)            POINT TO NEXT BUFFER
         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER
         C     RWA,DSCBLIM             TEST FOR LAST BUFFER
         BNH   DSCBELUP
         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER
         EJECT
*****************
* MODE 1 - OPEN *
*****************
         SPACE
* ENTER WITH A DDNAME IN SECOND PARAMETER POSITION.  PERFORM CLOSE
* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.
         SPACE
OPEN     DS    0H
         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE
         SPACE
         L     1,4(RPARM)              GET ADDR OF DDNAME
         MVC   VOLID(6),0(1)           GET VOLSER
         SPACE
* CHECK DEVICE TYPE TO BE SURE IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE  DCBDDNAM,DWORK       GET DEVICE TYPE
         LTR   R15,R15                 TEST IF IT FOUND DD CARD
         BNZ   RETURN4                 ERROR, DD CARD MISSING
         CLI   DWORK+2,X'20'           TEST DEVICE TYPE
         BNE   RETURN8                 ERROR IF NOT DIRECT ACCESS
         SPACE
         CLI   DWORK+3,MAXDVT          TEST FOR MAX DEVICE TYPE
         BNL   RETURN8                 ERROR IF TOO LARGE
         SR    R1,R1
         IC    R1,DWORK+3              LOAD DEVICE NUMBER
         IC    R1,DVICETAB(R1)         LOAD CODE FROM TABLE      WBF
         LTR   R1,R1                   ZERO IS UNDEFINED DEVICE
         BZ    RETURN8                 EXIT IF UNKNOWN
         SPACE
* READ JFCB AND INSERT DATA SET NAME OF 44 X'04'.
         SPACE
         RDJFCB  VTOCDCB
         MVI   JFCBDSNM,X'04'          GENERATE DATA SET NAME
         MVC   JFCBDSNM+1(43),JFCBDSNM OF THE VTOC.
         MVC   JFCBVOLS(6),VOLID       MOVE IN VOLSER
         SPACE
* GET NUMBER OF DSCB'S PER TRACK FROM FORMAT 4 DSCB   WBF 7/28/78
         SPACE
         OBTAIN DSCB4                                 WBF 7/28/78
         SR    R1,R1                                  WBF 7/28/78
         IC    R1,FMTXWK+X'1E'  GET DSCB'S/TRACK      WBF 7/28/78
         ST    R1,NDSCBS        SAVE DSCB'S/TRACK     WBF 7/28/78
         SPACE
* OPEN THE DSCB.
         SPACE
         OPEN  (VTOCDCB,(INPUT)),TYPE=J
         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED
         BZ    RETURN4                 ERROR IF OPEN FAILED
         SPACE
* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.
         SPACE
         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW
         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK
         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING
         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE
         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE
         GETMAIN  R,LV=(0)             GET TRACK BUFFERS
         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE
         OI    MODESW,CBGOT            INDICATE CORE GOTTEN
         SPACE
* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH
* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR
* EACH DSCB.
         SPACE
         L     RWA,NDSCBS              NUMBER OF DSCB'S
         SLL   RWA,3                   TIMES   8
         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD
         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER
         SPACE
         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM
         MVC   0(8,R1),INITCCW         INSERT FIRST CCW
         LA    RWB,8(R1)               PLACE FOR NEXT CCW
         LA    RWC,1                   BUFFER COUNTER
         SPACE
CCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB
         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS
         MVI   0(RWB),READCKD          RESTORE COMMAND CODE
         C     RWC,NDSCBS              TEST BUFFER COUNTER
         BNL   LASTCCW                 BRANCH IF LAST BUFFER
         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS
         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS
         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER
         B     CCWLOOP                 DO NEXT BUFFER
         SPACE
LASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT
         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER
         SPACE
* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.
         SPACE
         SR    R0,R0
         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0
         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         B     RETURN0                 INDICATE SUCCESSFUL OPEN
         EJECT
******************
* MODE 2 - CLOSE *
******************
         SPACE
CLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE
         B     RETURN0
         SPACE 2
* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER
* ACTION.
         SPACE
CLOSESUB DS    0H
         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING
         BZ    NOEXCP                  BRANCH IF NOT
         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE
         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF
NOEXCP   DS    0H
         SPACE
* CLOSE THE DCB.
         SPACE
         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN
         BZ    NOCLOSE                 BRANCH IF NOT
         CLOSE VTOCDCB
NOCLOSE  DS    0H
         SPACE
* RELEASE CORE OBTAINED FOR DSCB BUFFERS.
         SPACE
         TM    MODESW,CBGOT            TEST IF CORE GOTTEN
         BZ    NOFREE                  BRANCH IF NOT
         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION
         FREEMAIN  R,LV=(0),A=(1)      FREE CORE
         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF
NOFREE   DS    0H
         SPACE
         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH
         BR    RRET
         EJECT
****************
* EXCP ROUTINE *
****************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN
* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.
         SPACE
EXCP     DS    0H
         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS
         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER
         L     R1,DCBDEBAD             LOAD DEB ADDRESS
         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR
         L     R15,CVTPTR              LOAD CVT ADDRESS
         USING CVT,R15                 #####
         L     R15,CVTPCNVT            LOAD ADDR OF CONVERT ROUTINE
         DROP  R15                     #####
         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR
         DROP  12                      THAT CLOBBERED BASE REG
         USING *,R14                   R14 SET BY BALR ABOVE
         LM    R2,R13,EXCPSAVE         RESTORE REGISTERS
         DROP  R14
         USING START+6,12              BASE REGISTER RECOVERED
         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)
         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE
         SPACE
* ZERO ECB AND START CHANNEL PROGRAM.
         SPACE
         SR    R0,R0
         ST    R0,VTOCECB              CLEAR ECB
         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH
         EXCP  VTOCIOB                 START CHANNEL PROGRAM
         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG
         BR    RRET
         SPACE
* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.
         SPACE
SETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT
         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE
         EJECT
********************************
* CONSTANTS, VARIABLES, ETC... *
********************************
         SPACE
INITCCW  CCW   READR0,0,CC+SLI+SKIP,8
READCCW  CCW   READCKD,0,CC,148
         SPACE
DVICETAB DC    X'00'           TABLE OF NUMBER OF DSCB'S/TRACK
         DC    AL1(16)            2311      (NOTE: USED ONLY TO
         DC    AL1(63)            2301       DETERMINE IF DEVICE IS
         DC    AL1(17)            2303       KNOWN TO US. FORMAT 4
         DC    AL1(22)            2302       DSCB GIVES ACTUAL # OF
         DC    AL1(8)             2321       DSCB'S ON A TRACK)
         DC    AL1(0)             2305-1
         DC    AL1(34)            2305-2
         DC    AL1(25)            2314
         DC    AL1(39)            3330
         DC    AL1(0)             3340
         DC    AL1(46)            3350             +++ DMA 02-03-77 +++
         DC    AL1(0)
         DC    AL1(39)            3330-1
MAXDVT   EQU   *-DVICETAB
         SPACE
DWORK    DS    D               WORK CELL
SAVEAREA DC    20F'0'
EXCPSAVE EQU   SAVEAREA+12
CBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE
CBADDR   EQU   CBSIZE+4
NDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK
DSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER
DSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER
DSCBADR  DS    F               ADDRESS OF CURRENT DSCB
TTRN     DS    F               RELATIVE TRACK NUMBER
VOLID    DS    CL6             VOLUME ID
         SPACE
* MODE SWITCH AND BIT DEFINITIONS:
         SPACE
MODESW   DC    X'00'
CBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER
XCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED
RDERR    EQU   X'20'           PERMANENT I/O ERROR
EOFSW    EQU   X'10'           END-OF-FILE SENSED
         SPACE
         LTORG
         EJECT                                        ADDED BY B.A. RNB
         DS    0D              FORCE ALIGNMENT        ADDED BY B.A. RNB
RBPOINT  DC    X'80'           HIGH ORDER BIT ON      ADDED BY B.A. RNB
         DC    AL3(RB)         ADDERSS OF RB          ADDED BY B.A. RNB
RB       DC    HL1'20'         LENGTH OF RB           ADDED BY B.A. RNB
         DC    HL1'01'         VERB CODE DSNAME ALLOC ADDED BY B.A. RNB
         DC    B'11100000'     FLAGS1                 ADDED BY B.A. RNB
DAIRRETN DC    H'00'           ERROR RETURN           ADDED BY B.A. RNB
INFOCODE DC    H'00'           INFORMATION CODE       ADDED BY B.A. RNB
         DC    A(TEXT)         POINTER TO TEXT FIELDS ADDED BY B.A. RNB
         DC    F'00'           RESERVED               ADDED BY B.A. RNB
         DC    F'00'           FLAGS2                 ADDED BY B.A. RNB
TEXT     DC    H'2'            DSNAME KEY             ADDED BY B.A. RNB
         DC    H'1'            #                      ADDED BY B.A. RNB
         DC    H'44'           LENGTH OF VTOC DSNAME  ADDED BY B.A. RNB
         DC    44X'04'         VTOC DSNAME            ADDED BY B.A. RNB
         EJECT
* DATA CONTROL BLOCK
         SPACE
VTOCDCB  DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=JFCBADDR
         SPACE
DCBDDNAM EQU   VTOCDCB+40
DCBIFLGS EQU   VTOCDCB+44
DCBDEBAD EQU   VTOCDCB+44
DCBOFLGS EQU   VTOCDCB+48
OPENBIT  EQU   X'10'
         EJECT
* IOB FOR CHANNEL PROGRAM:
         SPACE
VTOCIOB  DS    0D
IOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED
         DC    A(VTOCECB)
         DC    2F'0'
IOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING
         DC    A(VTOCDCB)
         DC    X'03000000'
         DC    F'0'
IOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS
         SPACE
* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:
         SPACE
VTOCECB  DC    F'0'            EVENT CONTROL BLOCK
         SPACE 3
* BUFFER FOR JFCB AND DCB EXIT LIST:
         SPACE
JFCBADDR DS    0F
         DC    X'87'
         DC    AL3(JFCB)
         SPACE
JFCB     DS    0D
         DS    CL176
         SPACE
JFCBDSNM EQU   JFCB            DATA SET NAME
JFCBVOLS EQU   JFCB+118        VOLUME SERIAL NUMBER
         EJECT
*------LIST FOR VTOCREAD
VTOCLIST DS    0F
VTOCTYPE DS    F
VTOCVOL  DS    F
VTOCDSB  DS    F
VTOCRC   DS    F
VTOCREAD DS    F              ADDRESS OF VTOC READ SUBROUTINE
         SPACE 2
*------ALLOCATION TYPE TABLE
CALOTBL  DC    X'C0',C'C'
         DC    X'80',C'T'
         DC    X'40',C'B'
         DC    X'00',C'X'
         SPACE 2
*------RECFM TYPE TABLE
RECFMTBL DC    X'C0',C'U'
         DC    X'80',C'F'
         DC    X'40',C'V'
         DC    X'20',C'T'
         DC    X'10',C'B'
         DC    X'08',C'S'
         DC    X'04',C'A'
         DC    X'02',C'M'
         DC    X'00',C' '
         SPACE 2
*------DSORG TYPE TABLE
ORGTBL   DC    X'80',C'IS '                        WBF 8/3/78
         DC    X'40',C'PS '                        WBF 8/3/78
         DC    X'20',C'DA '                        WBF 8/3/78
         DC    X'02',C'PO '                        WBF 8/3/78
         DC    X'08',C'VS '                        WBF 8/3/78
         DC    X'81',C'ISU'                        WBF 8/3/78
         DC    X'41',C'PSU'                        WBF 8/3/78
         DC    X'21',C'DAU'                        WBF 8/3/78
         DC    X'03',C'POU'                        WBF 8/3/78
         DC    X'00',C' ? '                        WBF 8/3/78
         SPACE 2
*------DATA CONSTANTS
DSADD    DC    A(DSCB+105)
         DC    A(DSCB+115)
         DC    A(DSCB+125)
         DC    A(FMTXWK+004)
         DC    A(FMTXWK+014)
         DC    A(FMTXWK+024)
         DC    A(FMTXWK+034)
         DC    A(FMTXWK+045)
         DC    A(FMTXWK+055)
         DC    A(FMTXWK+065)
         DC    A(FMTXWK+075)
         DC    A(FMTXWK+085)
         DC    A(FMTXWK+095)
         DC    A(FMTXWK+105)
         DC    A(FMTXWK+115)
         DC    A(FMTXWK+125)
DBLWD    DC    D'0'
         DC    X'402020202020202020202120'
         DC    CL12' '   WORK AREA
VLIST    DC    H'1'
VTYPE    DC    X'30502009'
VNAME    DC    CL6' '
VSTAT    DC    H'0'
BLK      DS    0D,265C
SERIAL   DS    CL6
DDNAME   DC    CL8'VTOCDD'
XCMDHD   DS    XL4'00'       HEADER FOR XCMD          WBF 04/08/79
XCMD     DC    CL120' '                               WBF 04/08/79
XCMDECB  DS    F                                      WBF 04/08/79
XCMDMAIN DS    F             ADDR OF GOTTEN STORAGE   WBF 04/08/79
CSPL     EQU   *             CMD SCAN PARM LIST       WBF 04/08/79
CSPLUPT  DC    A(0)                                   WBF 04/08/79
CSPLECT  DC    A(0)                                   WBF 04/08/79
CSPLECB  DC    A(XCMDECB)                             WBF 04/08/79
CSPLFLG  DC    A(0)                                   WBF 04/08/79
CSPLOA   DC    A(0)                                   WBF 04/08/79
CSPLCBUF DC    A(XCMDHD)                              WBF 04/08/79
CPPL     DS    F
FLGS     DS    X
DUMMY    EQU   X'40'
FREEDD   EQU   X'20'
OPERATOR EQU   X'80'
PSWD     EQU   X'10'
RACF     EQU   X'40'                                   WBF 1/12/79
WORKA    DS    CL5
WORKB    DS    CL3
TRPRCYP  DS    D                                       WBF 7/21/78
REGST    DS    F
TSOTOT   DS    F
F4       DC    F'4'
H4       DC    H'4'
ZEROS    DC    H'00'
PACK     DC    CL6'0'
UCB      DC    H'0'
TRACKS   DC    F'0'
DATEWORK DC    F'0'
TRPRCY   DC    F'0'
MAXTRKS  DC    F'0'
ENDSW    DS    C
HDERSW   DS    C
FULLSW   DS    C
FTTR     DC    X'00'
DELSW    DC    X'00'
ANSCLR   DC    C' '         TO CLEAR ANS
ANS      DC    CL78' '
ASWCLR   DC    C' '         TO CLEAR ASW
ASW      DC    CL78' '
REG14    DS    F
SAV14    DS    F
PSCB     DS    F
DSCB     DS    0F
         DS    CL148
FMTXWK   DS    0D   WORK AREA FOR FMT2/3/4 DSCB'S     WBF 7/28/78
         DS    148C
LNE      DC    CL78' '
LINE     DC    CL78' '
TGETAREA DS    CL78
TGETSAVE DS    2F
DSNAME   DC    CL44' '
DSALL    EQU   LNE+25         5                     WBF 8/11/78
DSUSE    EQU   LNE+32         5                     WBF 8/11/78
DSEXT    EQU   LNE+41         2
DSRCFM   EQU   LNE+45         5                     WBF 8/11/78
DSBLK    EQU   LNE+51         5                     WBF 8/11/78
DSLRL    EQU   LNE+57         5                     WBF 8/11/78
DSORG    EQU   LNE+63         3                     WBF 8/11/78
DSCALO   EQU   LNE+67         1                     WBF 8/11/78
DSPSWD   EQU   LNE+69         1                     WBF 8/11/78
DSDATE   EQU   LNE+70         8                     WBF 8/11/78
BLANKS   DC    CL78' '
WORK1    DS    CL3
CNTR1    DC    PL3'0'
DATWRK   DS    F
DATMNT   DC    H'31'           JAN
         DC    H'29'           FEB
         DC    H'31'           MAR
         DC    H'30'           APR
         DC    H'31'           MAY
         DC    H'30'           JUN
         DC    H'31'           JUL
         DC    H'31'           AUG
         DC    H'30'           SEP
         DC    H'31'           OCT
         DC    H'30'           NOV
         DC    H'31'           DEC
VOLSER   DC    CL6' '
NAME     DC    CL44' '
SPCEWK   DS    0F
         DS    CL6
TOTCYL   DS    CL4
         DS    C
TOTTRK   DS    CL4
         DS    C
TOTAREA  DS    CL4
         DS    C
CONCYL   DS    CL4
         DS    C
CONTRK   DS    CL4
         DS    CL40              DUMMY FOR SVC 78
LNETCYL  EQU   LINE+7
LNETTRK  EQU   LINE+18
LNECCYL  EQU   LINE+36
LNECTRK  EQU   LINE+47
LNEDSCB  EQU   LINE+66
SPCEFILL DC    CL15'CYL=     - TRK='
SPHD1    DC    CL21'TOTAL AVAILABLE SPACE'
SPHD2    DC    CL24'LARGEST CONTIGUOUS SPACE'
SPHD3    DC    CL15'AVAILABLE DSCBS'
         EJECT
         REGEQU
***********************************************************************
*                                                                     *
*                            DEVICE TABLE                             *
*                                                                     *
***********************************************************************
         SPACE 4
DEVTABLE DC    X'2008'
         DC    X'0014'
         DC    X'2002'
         DC    X'00C8'
         DC    X'2003'
         DC    X'000A'
         DC    X'2001'
         DC    X'000A'
         DC    X'2004'
         DC    X'002E'
         DC    X'2005'
         DC    X'0514'
         DC    X'2006'
         DC    X'0008'
         DC    X'2007'
         DC    X'0008'
         DC    X'2009'
         DC    X'0013'
         DC    X'200D'
         DC    X'0013'
         DC    X'200B'             FOR 3350        +++ DMA 02-03-77 +++
         DC    X'001E'             FOR 3350        +++ DMA 02-03-77 +++
         DC    X'0000'                 END OF DEVICE TABLE
         EJECT
VTHDER   DC    CL80'***   DSN   ***         -ALLOC- -USED- -EXT--RECFM-X
               BLKSZ-LRECL-ORG-   -CR.DATE'         WBF 8/11/78
         PRINT NOGEN
INDCB2   DCB   DDNAME=VTOCDD,DSORG=PS,MACRF=(GL),EODAD=CLOSE2,         X
               EXLST=EXLST
DSCB1    CAMLST SEARCH,DSCB,VOLSER,FMTXWK              WBF 04/09/79
DSCB3    CAMLST SEEK,FMTCHH,SERIAL,FMTXWK
DSCB4    CAMLST SEARCH,JFCBDSNM,JFCBVOLS,FMTXWK        WBF 7/28/78
DSNVTOC  CAMLST SCRATCH,NAME,,VLIST,,OVRD
UNCATLG  CAMLST UCATDX,NAME
INNAME   CAMLST NAME,NAME,,BLK
         PRINT GEN
EXLST    DS    0F
         DC    X'87',AL3(JFCBAREA)
JFCBAREA DS    CL176
FMTCHH   EQU   DSCB+135
         PRINT NOGEN                                  WBF 04/08/79
         CVT   DSECT=YES                              WBF 04/08/79
         END
