         TITLE 'JESCNCL - NOTIFY XWRTR TO CANCEL 3284 OUTPUT'
JESCNCL   CSECT
         PRIME ID=*,LV=DSASIZE
         REGS
*        REGISTER CONVENTIONS
*        R13   DSA
*        R12   BASE
*        R11   CPPL
*        R10   PPL
*        R9    PARSE ANSWER
         LR    R11,R1              SAVE CPPL
         USING DSA,R13
         USING CPPL,R11
         LA    R10,DSAPPL          DYN CORE FOR PPL
         USING PPL,R10             MAP IT
         XC    DSAECB(8),DSAECB    CLEAR PARSE ECB
         MVC   PPLUPT,CPPLUPT
         MVC   PPLECT,CPPLECT
         MVC   PPLCBUF,CPPLCBUF
         LA    R1,DSAECB
         ST    R1,PPLECB           POINT TO PARSE ECB
         MVC   PPLPCL,@PARMS       POINT TO PCL
         LA    R1,DSAPPLAN         CORE FOR PARSE ANSWER
         ST    R1,PPLANS           PUT IN PPL
         XR    R1,R1
         ST    R1,PPLUWA           INDICATE NO USER WORK AREA
         LR    R1,R10              PASS PPL TO PARSE
         CALLTSSR EP=IKJPARS       CALL PARSE
         USING IKJPARMD,R9         MAP PARSE ANSWER
         L     R9,DSAPPLAN
         LTR   R15,R15             ERROR
         BZ    PARSOK              NO-CONTINUE
         TPUT  PARSERR,L'PARSERR   YES ISSUR ERROR
         B     TERME               GIVE UP
PARSERR  DC    C'JESCNCL ENDED - DUE TO PARSE ERRORS'
PARSOK   DS    0H
         MVC   DSAMODFY+2(24),MODFY SET UP MODIFY COMMAND MASK
         L     R1,CPPLPSCB         GET ADDRESS OF PSCB
         USING PSCB,R1
         MVC   DSAUSER,PSCBUSER    PUT USER ID IN MODIFY CMD
         DROP  R1
         L     R1,PRTR#
         MVC   DSAPRTR,0(R1)       PUT PRTR ID IN MODIFY
         L     R1,JOBID
         MVC   DSAJOBID,0(R1)      PUT IN MODIFY
         LA    R1,24               MODIFY LENGTH
         STH   R1,DSALNTH          PUT LENGTH IN PARM LIST
         LA    R1,DSAMODFY         PUT LIST ADDRESS IN R1
         ST    R1,DSA@CARD
         LA    R1,DSA@CARD
         CALL  TSMSGR              CALL MSG ROUTER
         B     TERME
TERME    DS    0H
         TERME
         TITLE 'JESCNCL - JOBID VALIDITY CHECK EXIT'
JOBEXIT  DS    0H
         PRIME
         L     R1,0(R1)            PARM REG POINTS TO PDE
         LH    R2,4(R1)            GET LENGTH
         CH    R2,=H'6'            LENGTH MUST BE 6
         BNE   JOBERR
         L     R1,0(R1)            POINT TO INPUT STRING
         CLC   0(4,R1),=C'PGMR'    MUST START WITH PGMR
         BNE   JOBERR
         XR    R15,R15             SET UP GOOD RETURNC CODE
         B     JOBEND
JOBERR   DS    0H
         LA    R15,4               TELL PARSE TO PROMPT
JOBEND   DS    0H
         L     R13,4(R13)
         RETURN (14,12),RC=(15)
         TITLE 'JESCNCL - PRTR# VALIDITY CHECK EXIT'
PRTEXIT  DS    0H
         PRIME
         L     R1,0(R1)            INPUT REG POINTS TO PDE
         L     R1,0(R1)            POINT TO INPUT STRING
         CLI   0(R1),C'1'          IF < LESS 1 ERROR
         BL    PRTERR
         CLI   0(R1),C'6'          IF > 6 ERROR
         BH    PRTERR
         XR    R15,R15             SET UP GOOD RETURN
         B     PRTEND
PRTERR   DS    0H
         LA    R15,4               TELL PARSE TO PROMPT
PRTEND   DS    0H
         L     R13,4(R13)
         RETURN (14,12),RC=(15)
         TITLE 'JESCNCL - PARSE PCL'
@PARMS   DC    A(PARMLIST)
PARMLIST IKJPARM
JOBID    IKJIDENT  'JOB NAME',MAXLNTH=6,FIRST=ALPHA,OTHER=ALPHANUM,  XXX
               PROMPT='JOB ID NOW PRINTING',VALIDCK=JOBEXIT
PRTR#    IKJIDENT 'STRING',MAXLNTH=1,FIRST=NUMERIC,                XXXXX
               PROMPT='PRINTER NUMBER',VALIDCK=PRTEXIT
         IKJENDP
MODFY    DC    C'F PX,FLUSH,USERID,PGMRXX'
         TITLE 'JESCNCL - DSECTS'
DSA      DSECT
         DS    18F
DSAPPL   DS    7F
DSAECB   DS    F
DSAPPLAN DS    F
DSA@CARD DS    F
DSAMODFY DS    0CL26
DSALNTH  DS    H
         DS    CL3
DSAPRTR  DS    C
         DS    CL7
DSAUSER  DS    CL6
         DS    C
DSAJOBID DS    CL6
         DS    C
DSASIZE  EQU   (*-DSA)
         EJECT
         IKJCPPL
         EJECT
         IKJPSCB
         EJECT
         IKJPPL
         PRINT NOGEN
         CVT
         END
         MACRO
&NAME    PRIME &REG=12,&SAVE=,&ID=,&LV=0,&MASK=NO
.* PRIME WILL SAVE REGISTERS, CREATE A NEW SAVE AREA, CHAIN THE NEW
.* SAVE AREA TO THE CALLERS SAVE AREA, ESTABLISH ADDRESSABILITY,
.* OPTIONALLY OBTAIN ADDITIONAL STORAGE AND IN GENERAL PERFORM THE
.* NECESSARY ENTRY LINKAGE.
.* IF THE USER DOES NOT SPECIFY WHAT REGISTER HE REQUIRES FOR A BASE,
.* TWELVE IS USED.  NOTE..IF REG= IS SPECIFIED TO BE 0, 1, 13, 14, OR
.* 15  A WARNING MESSAGE IS ISSUED.
.* IF THE USER SPECIFIES A SAVE AREA VIA THE SAVE= OPERAND THEN PRIME
.* WILL CHAIN THE USERS SAVE AREA TO THE CALLERS SAVE AREA. IF THE
.* USER DOES NOT SPECIFY SAVE,THEN PRIME WILL OBTAIN A NEW SAVE AREA
.* VIA THE GETMAIN SVC.  AN ADDITIONAL AMOUNT OF STORAGE MAY BE
.* OBTAINED AT THIS TIME BY SPECIFIEING THE LV=, OPERAND.  IF LV IS NOT
.* SPECIFIED IN REGISTER NOTATION, 4023 IS THE MAXIMUM VALUE.
.* IF THE USER SPECIFIES SAVE=NONE, PRIME WILL NOT OBTAIN A NEW AREA.
.* REG 13 WILL POINT TO THE NEW 18 WORD SAVE AREA FOLLOWED BY THE EXTRA
.* STORAGE AREA.
         LCLA  &A,&B
         LCLC  &E,&F,&G,&H
         MNOTE *,'&REG WILL BE USED AS A BASE REGISTER'
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&ID' EQ '').CONT4
         AIF   ('&ID' EQ '*').SPEC
&A       SETA  ((K'&ID+2)/2)*2+4
         USING *,&REG
         B     &A.(0,15)                BRANCH AROUND
&A       SETA  K'&ID
         DC    AL1(&A)
.CONTB   AIF   (&A GT 32).SPLIT
.CONTAA  AIF   (&A GT 8).BRAK
&E       SETC  '&ID'(&B+1,&A)
         DC    CL&A'&E'
         AGO   .CONT1
.BRAK    ANOP
&E       SETC  '&ID'(&B+1,8)
         DC    CL8'&E'
&B       SETA  &B+8
&A       SETA  &A-8
         AGO   .CONTAA
.SPLIT   ANOP
&E       SETC  '&ID'(&B+1,8)
&F       SETC  '&ID'(&B+9,8)
&G       SETC  '&ID'(&B+17,8)
&H       SETC  '&ID'(&B+25,8)
         DC    CL32'&E.&F.&G.&H'
&B       SETA  &B+32
&A       SETA  &A-32
         AGO   .CONTB
.SPEC    AIF   ('&NAME' EQ '').CSECTN
&E       SETC  '&NAME'
&A       SETA  1
.CONTQ   AIF   ('&E'(1,&A) EQ '&E').LVE
&A       SETA  &A+1
         AGO   .CONTQ
.LVE     ANOP
&B       SETA  ((&A+2)/2)*2+4
         USING *,&REG
         B     &B.(0,15)                BRANCH AROUND
         DC    AL1(&A)
         DC    CL&A'&E'
         AGO   .CONT1
.CSECTN  AIF   ('&SYSECT' EQ '').E4
&E       SETC  '&SYSECT'
&A       SETA  1
         AGO   .CONTQ
.E4      IHBERMAC 78,360
.CONT4   ANOP
         USING *,&REG
.CONT1   ANOP
         AIF   ('&REG' EQ '0' OR '&REG' EQ '1' OR '&REG' EQ '13').ERR1
         AIF   ('&REG' EQ '14' OR '&REG' EQ '15').ERR1
.CONT3   ANOP
         DS    0H
         STM   14,12,12(13)             SAVE REGS IN CALLERS AREA
         AIF   ('&MASK' EQ 'NO').NOMASK  DONT PRESERVE SYSTEM MASK
         BALR  15,0                     GET MASK 1-26-79
         STCM  15,8,16(13)             SAVE MASK BYTE
         L     15,16(,13)              RESTORE 15 LIKE ENTRY
.NOMASK  ANOP
         LR    &REG,15                  SET TRUE BASE EQUAL EP
         AIF ('&SAVE' EQ 'NONE').A
         AIF   ('&SAVE' EQ '').C
         AIF   ('&SAVE'(1,1) EQ '(').F
         LA    1,&SAVE                  SET R1 EQ USERS SAVE ADDRESS
         AGO   .D
.F       ANOP
         AIF   ('&SAVE' EQ '(1)').D
         LR    1,&SAVE(1)               PICK UP USERS SAVE AREA
         AGO   .D
.C       ANOP
         AIF   ('&LV'(1,1) EQ '(').E
.*         AIF   ('&LV' GT '4023').ERR2
         LA    0,(&LV.+72+15)/16        PARAMETER FOR GETMAIN
         SLL   0,4                      PARAMETER FOR GETMAIN /*8039*/
         AGO   .CONT2
.E       ANOP
         AIF   ('&LV' EQ '(0)').CONT2
         LA    0,72(&LV(1).,0)          PARAMETER FOR GETMAIN
.CONT2   ANOP
         BAL   1,*+4                    INDICATE GETMAIN
         SVC   10                       ISSUE SVC 10
         ST    0,0(0,1)                 SAVE LENGTH IN 1ST WORD
.D       ANOP
         XC    4(68,1),4(1)             CLEAR AREA
         ST    1,8(0,13)                CHAIN FORWARD
         ST    13,4(0,1)                CHAIN BACKWARD
         LM    0,1,20(13)               RESET R0 AND R1
         L     13,8(0,13)               SET SAVE AREA REGISTER
.A       ANOP
         MEXIT
.ERR1    MNOTE 'ILLEGAL BASE REGISTER SPECIFIED'
         AGO   .CONT3
.ERR2    MNOTE 'LV GT 4023, LV REQUEST NOT HONORED'
         LA    0,72(0,0)                PARAMETER FOR GETMAIN
         AGO   .CONT2
         MEND
PRINTOFF TITLE 'IPO-SUPPLIED PRINT COMMAND                             C
                        '
***********************************************************************
*                                                                     *
*             MODULE NAME = PRINTOFF                                  *
*                                                                     *
*             DESCRIPTIVE NAME =  IPO SUPPLIED PRINT COMMAND FOR      *
*                TSO FOREGROUND EXECUTION                             *
*                                                                     *
*             COPYRIGHT = NONE                                        *
*                                                                     *
*             STATUS = RELEASE 01.0 OF IPO                            *
*                                                                     *
*             FUNCTION =                                              *
*                PRINTS A DATASET(S) WHICH IS SEQUENTIAL OR PARTIONED *
*                ALLOWING THE USER TO SPECIFY OUTPUT CLASS, COPIES,   *
*                DESTINATION AND HOLD/NOHOLD.  ALSO ALLOWS THE USER   *
*                TO SPECIFY LIST/NOLIST OR PRINT/NOPRINT.  LIST IF    *
*                PDS MEMBER NAMES ARE ONLY TO BE LISTED.  PRINT IF    *
*                PDS MEMBER NAMES ARE ONLY TO BE PRINTED.             *
*                                                                     *
*                OPERATION =                                          *
*                   BUILD PARS AND DAIR PARAMETER LISTS.              *
*                   CALL PARS TO PARSE COMMAND BUFFER.                *
*                   ALLOCATE DATASET AND DETERMINE IF PDS OR          *
*                      SEQUENTIAL.                                    *
*                   DETERMINE WHAT FUNCTIONS WERE TO BE PERFORMED     *
*                      FOR THIS DATASET IF PDS.                       *
*                   ALLOCATE SYSOUT DATASETS WHEN SOMETHING IS        *
*                      FOUND TO BE PRINTED.                           *
*                   PROCESS NEXT DATASET IN LIST.                     *
*                   AT END OF LIST CLOSE DATASETS AND FREE ANY        *
*                      SYSOUT DATASETS.                               *
*                   DATSETS WILL BE PRINTED AS EITHER VBA OR VBM.     *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *
*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *
*                                                                     *
*                 RESTRICTIONS = DATASETS MUST HAVE LRECL LESS THAN   *
*                    255 AND MUST BE EITHER FIXED OR VARIABLE FORMAT. *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 10 = WORK REGISTERS               *
*                    REGISTER  11      = UNUSED                       *
*                    REGISTER  12      = ADDRESSABILITY TO PRINTOFF   *
*                                        CSECT                        *
*                    REGISTER  13      = SAVE AREA REGISTER AND       *
*                                        ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *
*                   'ZAP*'S)                                          *
*                                                                     *
*                TSO COMMAND SYNTAX = PRINTOFF (DATASET LIST)         *
*                   CLASS(SYSOUT CLASS) DEST(USERID) COPIES(NUMBER)   *
*                   HOLD/NOHOLD LIST/NOLIST PRINT/NOPRINT             *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*                MODULE SIZE = 5K BYTES                               *
*                                                                     *
*                ATTRIBUTES = SCHEDULER KEY 8, REENTRANT,             *
*                   PROBLEM PROGRAM STATE                             *
*                                                                     *
*             ENTRY POINTS = PRINTOFF (ONLY ENTRY POINT)              *
*                                                                     *
*                LINKAGE =                                            *
*                   FROM TERMINAL MONITOR PROGRAM AS A COMMAND        *
*                                                                     *
*             INPUT = REGISTER 1 POINTS TO COMMAND PROCESSOR          *
*                PARAMETER LIST MAPPED BY IKJCPPL MACRO               *
*                                                                     *
*             OUTPUT = NONE                                           *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = NONE - PROGRAM WILL DISPLAY DECIMAL      *
*                RETURN CODE AND RETURN VIA BRANCH REGISTER 14        *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                                                                     *
*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *
*                                                                     *
*                DATA AREAS = NONE                                    *
*                                                                     *
*                CONTROL BLOCKS = CPPL, PPL, DAPL, DCB, DAPB, CVT,    *
*                   S99RBP, S99RB, S99TUPL, S99TUNIT, S99TUFLD,       *
*                   GFPARMS, DFPARMS                                  *
*                                                                     *
*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *
*                BEGINNING AT LABEL RDATD.                            *
*                                                                     *
*             MACROS = SAVE, GETMAIN, CALLTSSR, LINK, TPUT, FREEMAIN, *
*                   OPEN, PUT, GET, CLOSE, RDJFCB, IKJRLSA, DYNALLOC, *
*                   DCB, IKJPARM, IKJPOSIT, IKJKEYWD, IKJNAME,        *
*                   IKJSUBF, IKJIDENT, IKJENDP, IKJDAP08, IKJDAP18,   *
*                   IKJDAPL, IKJCPPL, IKJPPL, CVT, IEFZB4D0,          *
*                   IEFZB4D2, DCBD, IKJEFFGF, IKJEFFDF                *
*                                                                     *
*             CHANGE ACTIVITY = NONE                                  *
*                                                                     *
*             MESSAGES =                                              *
*                                                                     *
*                BOTH THE DARIFAIL AND GNRLFAIL SERVICE ROUTINES ARE  *
*                USED TO ISSUE MESSAGES.                              *
*                THOSE ISSUED BY THE COMMAND ARE FOUND FOLLOWING THE  *
*                LABEL GNRLERR.                                       *
*                                                                     *
*             ABEND CODES = NONE                                      *
*                                                                     *
***********************************************************************
*
*      SUMMARY OF CHRYSLER CHANGES:
*        ADDED P3800,ANY OPTION TO SPECIFY 'TSO2' FORMS QUEUE.
*        ADD ECOLOGY OPTION TO NOT EJECT BETWEEN MEMBERS OF PDS
*        ADD PAGESIZ OPTION TO FILL OUT MEMBER LIST PAGE
*        EXPAND SIZE OF HEADER LINE 1 TO 132
*        'TSO1' IS DEFAULT FORM NUMBER.
*        ADD LINES(X:Y) KEYWORD FOR PRINTING LINE RANGES.
*        ADD EJECT KEYWORD FOR TOP OF FORM AFTER HEADER LINE.
*        ADD SNUM KEYWORD FOR SUPPRESION OF LINE NUMBERS.
*        ADD CCHAR TO USE FIRST CHAR FOR CARRAIGE CONTROL.
*        MAKE ALIAS NAME OF DSPRINT - ELIMINATE TCAM, USE TSOWTR
*        TO PRINT OUTPUT ON 3284 TYPE PRINTER.
*        ADD P0 THRU P9 KEYWORDS FOR CLASS/PRINTER SELECTION (DSPRINT).
*
***********************************************************************
PRINTOFF CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SAVE  (14,12),,HARDCOPY.IPO.&SYSTIME_&SYSDATE SAVE REGISTERS
         LR    R12,R15                 LOAD REGISTER 12 WITH ENTRY
*                                      ADDRESS
         USING PRINTOFF,R12            ESTABLISH ADDRESSABILITY TO
*                                      PROGRAM CSECT
         LA    R11,4095(R12)           LOAD REGISTER 11 WITH ENTRY
*                                      ADDRESS 4095
         USING PRINTOFF+4095,R11       ESTABLISH ADDRESSABILITY TO THE
*                                      REST OF THE PROGRAM CSECT
         LR    R8,R1                   LOAD REGISTER 8 TO PRESERVE
*                                      POINTER TO COMMAND PROCESSOR
*                                      PARAMETER LIST
         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA
         LR    R10,R1                  LOAD REGISTER 10 TO PRESERVE
*                                      POINTER TO WORKAREA
         ST    R13,4(R10)              STORE ADDRESS OF PREVIOUS
*                                      SAVEAREA
         ST    R10,8(,R13)             STORE ADDRESS OF CURRENT
*                                      SAVEAREA IN PREVIOUS SAVEAREA
         LR    R13,R10                 LOAD REGISTER 13 WITH ADDRESS OF
*                                      CURRENT SAVEAREA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO
*                                      DYNAMIC WORKAREA
         MVI   ONETIME,0           CLEAR SWITCHES
*
***********************************************************************
*                                                                     *
*        BUILD PARSE AND DAIR PARAMETER LISTS USING COMMAND           *
*           PROCESSOR PARAMETER LIST                                  *
*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *
*                                                                     *
***********************************************************************
*
         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL
         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARAMETER
*                                      LIST
         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL
         LA    R6,DAPLSECT             LOAD ADDRESS OF DAIR PARAMETER
*                                      LIST
         USING DAPL,R6                 ESTABLISH ADDRESSABILITY TO DAPL
         L     R1,CPPLUPT              LOAD POINTER TO USER PROFILE
*                                      TABLE FROM CPPL
         L     R2,CPPLECT              LOAD POINTER TO ENVIRONMENT
*                                      CONTROL TABLE FROM CPPL
         MVI   DSPRTSW,C' '            INIT DSPRINT SW
         CLC   12(8,R2),=CL8'DSPRINT'  CHECK FOR DSPRINT COMMAND
         BNE   CHKSUB                  CHECK IF SUB-COMMAND
         MVI   DSPRTSW,C'X'            SET DSPRINT SW
         B     SKPDSPRT                CONTINUE PROCESS
CHKSUB   EQU   *
         CLC   20(8,R2),=CL8'DSPRINT'  CHECK FOR DSPRINT SUBCMD
         BNE   SKPDSPRT                DONT SET DSPRINT SW
         MVI   DSPRTSW,C'X'            SET DSPRINT SW
SKPDSPRT EQU   *
         SLR   R3,R3                   ZERO REGISTER 3
         ST    R3,ECB                  STORE REGISTER AS ECB FOR PPL
         LA    R3,ECB                  LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT, ECT, AND
*                                      ECB IN PPL
         STM   R1,R3,DAPLSECT          STORE ADDRESS OF UPT, ECT, AND
*                                      ECB IN DAPL
         MVC   PPLPCL,PCLADDR          MOVE POINTER TO PARAMETER
*                                      CONTROL LIST INTO PPL
         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO
*                                      CONTAIN ADDRESS OF PDE RETURNED
*                                      BY PARS
         ST    R2,PPLANS               STORE POINTER TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF        MOVE POINTER TO COMMAND BUFFER
*                                      INTO PPL
         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORK AREA
         ST    R2,PPLUWA               STORE ADDRESS IN PPL
         MVC   DAPLPSCB,CPPLPSCB       MOVE POINTER TO PSCB INTO DAPL
         DROP  R4,R6,R8                DROP ADDRESSABILITY TO CPPL,
*                                      DAPL AND PPL
         MVC   OUTPUTA(OUTPUTAL),OUTPUTAC  MOVE ASA DCB CONSTANT INTO
*                                      ASA DCB IN WORKAREA
         MVC   OUTPUTM(OUTPUTML),OUTPUTMC  MOVE MACHINE DCB CONSTANT
*                                      INTO MACHINE DCB IN WORKAREA
*
***********************************************************************
*                                                                     *
*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *
*        ON RETURN PARSBACK -> PDL                                    *
*        HANDLE ALL ERROR CODES RETURNED BY PARS                      *
*        IF NECESSARY CALL GENERAL FAIL SERVICE ROUTINE               *
*                                                                     *
***********************************************************************
*
         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)
*                                      CALL PARS TO PARSE COMMAND
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZ    GOODPARS                YES....GO TO GOOD PARS ROUTINE
         C     R15,FULL4               SEE IF RETURN CODE IS FOUR
         BE    RETURN                  YES....PARS ISSUED ERROR
*                                      MESSAGE.  GO CLEANUP AND RETURN
         C     R15,FULL20              SEE IF RETURN CODE IS TWENTY
         BE    RETURN                  YES....VALIDITY CHECKING
*                                      ROUTINE ISSUED ERROR MESSAGE.
*                                      GO CLEANUP AND RETURN
         XC    GFPARMS(GFLENGF),GFPARMS  INITIALIZE PARMLIST FOR
*                                      GENERAL FAIL TO ZEROS
         LA    R1,GFPARMS              LOAD ADDRESS OF PARMLIST
         ST    R1,GFPARMP              STORE ADDRESS AS POINTER TO
*                                      PARMLIST
         ST    R15,GFRCODE             STORE RETURN CODE IN PARMLIST
         LA    R1,GFPARSE              LOAD CALLER ID FOR PARS
         STH   R1,GFCALLID             STORE CALLER ID IN PARMLIST
         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS
*                                      SAVEAREA
         L     R1,24(R1)               LOAD POINTER TO CPPL
         ST    R1,GFCPPLP              STORE POINTER TO CPPL IN
*                                      PARMLIST
         LA    R1,ECB                  LOAD ADDRESS OF OPTIONAL ECB
         ST    R1,GFECBP               STORE POINTER TO ECB IN
*                                      PARMLIST
         SLR   R1,R1                   ZERO REGISTER 1
         ST    R1,ECB                  SET OPTIONAL ECB TO ZERO
         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  LINK TO GENERAL FAIL SERVICE
*                                      ROUTINE TO HANDLE RETURN CODE
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZ    RETURN                  YES....GO CLEANUP AND RETURN
         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN
*                                      CODE
         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL
         TPUT  GNRLERR,L'GNRLERR       PUT OUT GENERAL FAIL ERROR
*                                      MESSAGE
         TPUT  (R8),8                  PUT OUT DECIMAL RETURN CODE
         B     RETURN                  GO CLEANUP AND RETURN
*
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND LOAD REGISTER 6 WITH ADDRESS OF DSNAME PDE            *
*                                                                     *
***********************************************************************
*
GOODPARS DS    0H
         L     R9,PARSBACK             LOAD POINTER TO PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         MVI   LINESW,C' '             INIT LINES SW
         CLI   PLINES+1,1              CHECK IF LINES WAS ENTERED
         BNE   SKPLINES                SKIP CONVERT OF LINES
         MVI   LINESW,C'X'             SET LINES SW
         L     R7,LINES                ADDR OF RANGE1
         LH    R1,LINES+4              LENGTH OF RANGE
         BCTR  R1,R0                   ZERO RELATIVE
         EX    R1,PACKCOPY             PACK RANGE1
         MVC   LOWER(5),DEC+3          SAVE UPPER RANGE
         L     R7,LINES+8              ADDR OF RANGE2
         LTR   R7,R7                   CHECK IF RANGE2 ENTERED
         BZ    ERRORR2                 MISSING RANGE2
         LH    R1,LINES+12             LENGTH OF RANGE2
         BCTR  R1,R0                   ZERO RELATIVE
         EX    R1,PACKCOPY             PACK RANGE2
         MVC   UPPER(5),DEC+3          SAVE LOWER RANGE
         CP    UPPER(5),LOWER(5)       CHECK FOR VALID RANGE
         BL    ERRORR                  INVALID RANGE
SKPLINES EQU   *
         MVI   CCHARSW,C' '            INIT CCHAR SW
         CLI   PCCHAR+1,1              CHECK FOR CCHAR KEYWORD
         BNE   SKPCCHAR                NO KEYWORD - DONT SET SW
         MVI   CCHARSW,C'X'            SET CCHAR SW
SKPCCHAR EQU   *
         MVI   EJECTSW,C' '            INIT EJECT SW
         CLI   PEJECT+1,1              CHECK FOR EJECT SW
         BNE   SKPEJECT                NO KEYWORD - DONT SET SW
         MVI   EJECTSW,C'X'            SET EJECT SW
SKPEJECT EQU   *
         MVI   SNUMSW,C' '             INIT SNUM SW
         CLI   PSNUM+1,1               CHECK FOR SNUM KEYWORD
         BNE   SKPSNUM                 NO KEYWORD - DONT SET SW
         MVI   SNUMSW,C'X'             SET SNUM SW
SKPSNUM  EQU   *
         LA    R6,DSNAMES              LOAD POINTER TO DSNAME LIST
*        SET PAGE SIZE
         MVC   PAGESIZE,=H'72'     DEFAULT
         CLC   PPAGESIZ,HALF1      PAGESIZE SPEC
         BNE   NOPAGE
         L     R7,SPAGESIZ         GET DATA FILED
         LH    R1,SPAGESIZ+4       L'
         BCTR  R1,0
         EX    R1,PACKCOPY         PACK IT
         CVB   R1,DEC              BINARY
         CH    R1,=H'15'           MINIMUM
         BH    *+8                 OK
         LH    R1,PAGESIZE         GO BACK TO DEFAULT
         STH   R1,PAGESIZE         STORE NEW PAGESIZE
NOPAGE   DS    0H
         LH    R1,PAGESIZE         CALC PDS MEMBER TABLE SIZE
         MH    R1,=AL2(3*12)       3-UP LISTING 3*PAGESIZE*12BYTES
         LA    R1,8(R1)             PLUS 8-BYTE HEADER
         ST    R1,MEMDATL          SUBPOOL=0,L' OF PDS MEMBER TABLE
         CLI   PECOLOGY+1,2        IS CALLER A TREE HATER
         BE    *+8                 YES-ALLOW PAGE EJECTS
         OI    ONETIME,2           BYPASS PAGE EJECTS BETWEEN MEMBERS
         DROP  R9                      DROP ADDRESSABILITY TO PDL
*
***********************************************************************
*                                                                     *
*        LOOP THROUGH DSNAME LIST RETURNED BY PARS                    *
*                                                                     *
***********************************************************************
*
NEXT     DS    0H
         LA    R1,PRINTI               LOAD POINTER TO DDNAME TO BE
*                                      FREED
         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE
         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS
*                                      ZERO
         BNZ   CLOSDCBS                NO.....GO CLOSE DCBS AND RETURN
         L     R5,0(R6)                LOAD POINTER TO DSNAME
         LH    R4,4(R6)                LOAD LENGTH OF DSNAME
         STCM  R4,3,DSNLEN             STORE LENGTH OF DSNAME
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF
*                                      MOVE
         LA    R8,DAP08                LOAD ADDRESS OF DAPB FOR 08
         USING DAPB08,R8               ESTABLISH ADDRESSABILITY TO DAPB
         MVC   DAPB08(DAPB08L),DAPB08C MOVE CONSTANTS INTO DAPB
         LA    R1,DSNLEN               LOAD POINTER TO DSN BUFFER
         ST    R1,DA08PDSN             STORE POINTER TO DSN BUFFER IN
*                                      DAPB
         MVI   DSNBUF,BLANK            BLANK OUT THE DSNAME BUFFER
         MVC   DSNBUF+1(43),DSNBUF     FINISH BLANKING OUT THE BUFFER
         EX    R4,MOVEDSN              MOVE IN THE DSNAME
         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT
         BNO   CHKPASS                 NO.....GO CHECK IF THERE IS A
*                                      PASSWORD
         L     R5,8(R6)                LOAD POINTER TO THE MEMBER NAME
         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF
*                                      MOVE
         EX    R4,MOVEMEM              MOVE IN THE MEMBER NAME
CHKPASS  DS    0H
         MVC   MEMNAME,DA08MNM         MOVE MEMBER NAME INTO HEADER 2
         TM    22(R6),HIGH             SEE IF PASSWORD IS PRESENT
         BNO   ALLOCDD                 NO.....GO ALLOCATE THE DATASET
         L     R5,16(R6)               LOAD POINTER TO THE PASSWORD
         LH    R4,20(R6)               LOAD LENGTH OF PASSWORD
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF
*                                      MOVE
         EX    R4,MOVEPASS             MOVE IN THE PASSWORD
ALLOCDD  DS    0H
         MVI   TYPESW,C'S'             INIT TYPE TO STANDARD
         LA    R3,44                   LENGTH OF DSNAME
         LA    R4,DSNBUF+43            POINT TO END OF DSN
TYPELOOP EQU   *
         CLI   0(R4),C'.'              CHECK FOR PERIOD
         BNE   LOOKNEXT                NOT PERIOD - KEEP CHECKING
         CLC   1(5,R4),=C'COBOL'       CHECK FOR COBOL DATASET
         BNE   EXITTYPE                NOT COBOL - MUST BE STANDARD
         MVI   TYPESW,C'C'             INDICATE COBOL DATASET
         B     EXITTYPE                EXIT TYPE ROUTINE
LOOKNEXT EQU   *
         BCTR  R4,R0                   DECREMENT POSITION
         BCT   R3,TYPELOOP             LOOK AT NEXT CHARACTER
EXITTYPE EQU   *
         SLR   R4,R4                   ZERO REGISTER 4
         ST    R4,ECB                  STORE REGISTER 4 AS ECB
         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL
         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL
         ST    R8,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL
         DROP  R1                      DROP ADDRESSABILITY TO DAPL
         CALLTSSR EP=IKJDAIR           CALL DAIR TO ALLOCATE DATASET
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZ    OUTPUT                  YES....GO PRINT DATASET
         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR
         BAL   R2,DAIRFAIL             GO TO DAIRFAIL ROUTINE TO HAVE
*                                      ERROR MESSAGE PUT OUT
NOTPMESS DS    0H
         TPUT  DSNNOTP,L'DSNNOTP       PUT OUT DATASET NOT PRINTED
*                                      MESSAGE
         B     EXITMSG                 GO PUT OUT DATASET AND MEMBER
*                                      NAMES
*
***********************************************************************
*                                                                     *
*        DETERMINE DATASET TYPE AND CALL PRINT ROUTINE                *
*                                                                     *
***********************************************************************
*
OUTPUT   DS    0H
         TM    DA08DSO,DSOPS           X'40' PHYSICAL SEQUENTIAL
         BO    PRINTIT                 YES....GO PRINT DATASET
         CLC   DA08MNM,BLANKS          SEE IF MEMBER NAME IS BLANK
         BNE   PRINTIT                 NO.....GO TREAT AS SEQUENTIAL
         TM    DA08DSO,DSOPO           X'02' PARTITIONED
         BO    SCROLLIT                YES....GO SCROLL DIRECTORY
         DROP  R8                      DROP ADDRESSABILITY TO DAPB
         TPUT  NOTPSPO,L'NOTPSPO       PUT OUT NOT PARTITIONED OR
*                                      SEQUENTIAL MESSAGE
         B     NOTPMESS                GO PUT NOT PRINTED MESSAGE
*
***********************************************************************
*                                                                     *
*        READS RECORDS USING GET LOCATE                               *
*           AND ATTRIBUTES OF GIVEN DATASET                           *
*        WRITES THESE SAME RECORDS USING PUT MOVE                     *
*           AND THE INPUT DATASET ATTRIBUTES                          *
*                                                                     *
***********************************************************************
*
PRINTIT  DS    0H
         LA    R8,INPUT                LOAD POINTER TO INPUT DCB
         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB
         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO
*                                      INPUT DCB IN WORKAREA
         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO OPEN LIST IN WORKAREA
         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN INPUT DCB
PRINTS   DS    0H                      BRANCH ADDRESS FOR PRINTING
*                                      MEMBERS
         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY
         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED
*                                      MESSAGE
         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED
         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE
         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO
*                                      GO PUT OUT ERROR MESSAGE
         CLC   DCBLRECL,HALF256        SEE IF LRECL IS GREATER THAN 256
         BH    ERRORL                  YES....GO PUT OUT RECORD LENGTH
*                                      MESSAGE
         LA    R9,LINE                 LOAD ADDRESS FOR INPUT
         SLR   R4,R4                   ZERO OUT REGISTER 4
         ST    R4,LENGTH               STORE ZERO IN LENGTH (PLUS 2
*                                      RESERVED BYTES) FIELD
         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE
         BO    CHKCNTRL                YES....GO PUT OUT DSNAME
*                                      NO.....RECFM MUST BE FIXED
*                                      SO CONTINUE
         A     R9,FULL4                SET TO HAVE FIXED LENGTH
         LH    R4,DCBLRECL             LOAD LOGICAL RECORD LENGTH
         A     R4,FULL4                ADD 4 FOR LENGTH FIELD PREFIX
         STH   R4,LENGTH               STORE IN LENGTH FIELD
CHKCNTRL DS    0H
         MVC   HEADER,HEADERC          MOVE HEADER INTO DATA AREA
         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE
         BNO   USEA                    NO.....GO TO USE ASA CONTROL
         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR
*                                      MACHINE CODE
         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA
         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE
*                                      FOR SPACE
         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN
         BO    PUTDSN                  YES....GO PUT OUT HEADERS
         LA    R3,PRINTM               LOAD POINTER TO PRINTM
         LA    R14,PUTDSN              LOAD ADDRESS FROM RETURN FROM
*                                      SYSOUT ALLOCATION
         B     ALLOCOUT                GO TO ALLOCATE SYSOUT
USEA     DS    0H
         TM    DCBRECFM,DCBRECCA       SEE IF CONTROL IS ASA
         BO    GOODLENA                YES....GO SEE IF DCB IS OPEN
         CLI   CCHARSW,C'X'            SEE IF USER WANTS ASA
         BE    GOODLENA                YES....GO SEE IF DCB IS OPEN
         A     R9,FULL1                SET GET AREA TO ALLOW FOR NO
*                                      CONTROL
         A     R4,FULL1                ADD ONE FOR A CONTROL BYTE
         STH   R4,LENGTH               STORE LENGTH IN PUT AREA
GOODLENA DS    0H
         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR
*                                      ASA CODE
         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA
         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN
         BO    PUTDSN                  YES....GO PUT OUT HEADERS
         LA    R3,PRINTA               LOAD POINTER TO PRINTA
         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO
*                                      DO SYSOUT ALLOCATION
PUTDSN   DS    0H
         TM    ONETIME,1           ALWAYS EJECT FIRST TIME
         BNO   EJECT
         TM    ONETIME,2           IS CALLER A TREE LOVER
         BO    EJECTSKP            YES-BYPASS EJECTS
EJECT    DS    0H
         OI    ONETIME,1           TURN ON ONETIME SW
         PUT   (R5),(R4)               PUT OUT PAGE EJECT
EJECTSKP DS    0H
         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER
         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO
*                                      INTO SECOND HEADER
         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE
         CLI   MEMNAME,BLANK           SEE IF MEMBER NAME IS BLANK
         BE    NOMEM                   YES....NO NEED TO PUT IN PARENS
         MVI   OPENPRN,C'('            MOVE OPEN PAREN INTO DSNAME
         MVI   CLOSEPRN,C')'           MOVE CLOSE PAREN INTO DSNAME
         B     PUTHDR2                 GO PUT OUT HEADER 2
NOMEM    DS    0H
         MVI   OPENPRN,BLANK           MOVE BLANK INSTEAD OF OPEN AND
         MVI   CLOSEPRN,BLANK          CLOSE PARENS
PUTHDR2  DS    0H
         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2
         CLI   EJECTSW,C'X'            CHECK FOR EJECTS
         BNE   NOEJECT                 NO EJECTS REQUIRED
         MVC   HEADER2(5),SPACE        CHANGE HEADER2 TO EJECT
         B     PUTEJCT                 WRITE HEADER 2
NOEJECT  EQU   *
         MVC   HEADER2(4),SPACE        CHANGE HEADER 2 FOR PUT OF BLANK
PUTEJCT  EQU   *
*                                      LINE
         PUT   (R5),HEADER2            PUT OUT BLANK LINE
         MVC   CNTLBYTE,HDRCNTL        MOVE IN SPACE AS CONTROL
*                                      CHARACTER
         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE
         BNO   COPYF                   NO.....GO HANDLE FIXED INPUT
         TM    DCBRECFM,DCBRECCC       SEE IF THERE IS A CONTROL BYTE
         BZ    COPYVNO                 NO.....GO TO ADD CONTROL FOR
*                                      VARIABLE
COPYV    DS    0H
         GET   INPUT,(R9)              GET INPUT RECORD
         DO    PUTLINE                 PUT OUT OUTPUT LINE
         B     COPYV                   GO GET NEXT RECORD
*
COPYVNO  DS    0H
         GET   INPUT,(R9)              GET INPUT RECORD
         SLR   R15,R15                 ZERO REGISTER 15 FOR INSERT
         ICM   R15,7,LENGTH+1          INSERT LENGTH AND RESERVED BYTE
         A     R15,FULL256             ADD 1 TO LENGTH
         STCM  R15,7,LENGTH            STORE LENGTH AND RESERVED BYTE
         MVC   CNTLBYTE,HDRCNTL        MOVE IN CONTROL SAVED IN HEADER
         DO    PUTLINE                 PUT OUT LINE
         B     COPYVNO                 GO GET NEXT INPUT RECORD
*
COPYF    DS    0H
         GET   INPUT,(R9)              GET INPUT RECORD
         DO    PUTLINE                 PUT OUT OUTPUT LINE
         B     COPYF                   GO GET NEXT RECORD
*
EXIT     DS    0H
         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS OPEN
         BNO   EXITMSG                 NO....GO PUT OUT DATASET AND
*                                      MEMBER NAMES
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST IN WORKAREA
         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB
EXITMSG  DS    0H
         TPUT  DSNMSG,L'DSNMSG         PUT OUT DATASET NAME MESSAGE
         L     R5,0(R6)                LOAD POINTER TO DDNAME
         LH    R4,4(R6)                LOAD LENGTH OF DSNAME
         TPUT  (R5),(R4)               PUT OUT DSNAME
         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT
         BNO   CONTINUE                NO.....GO CHECK FOR ANOTHER
*                                      DATASET NAME
         L     R5,8(R6)                LOAD POINTER TO THE MEMBER NAME
         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME
         TPUT  MEMMSG,L'MEMMSG         PUT OUT MEMBER NAME MESSAGE
         TPUT  (R5),(R4)               PUT OUT MEMBER NAME
         B     CONTINUE                GO CONTINUE WITH NEXT DATASET
         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB
PUTLINE  PROC
         CLI   LINESW,C'X'             IS THERE A LINE RANGE
         BNE   SKPRANGE                NO - SKIP ANGE CHECK
         CLI   TYPESW,C'C'             CHECK FOR COBOL DATASET
         BNE   STANDARD                MUST BE STANDARD
         TRT   LINE+5(6),NUMERIC       VALID LINE NUMBER?
         BNZ   ERRORN                  ABORT PRINTOFF
         PACK  LINENO(5),LINE+5(6)     PACK LINE NUMBER
         CP    LINENO(5),LOWER(5)      CHECK WITHIN RANGE
         BL    SKIPREC                 NOT IN RANGE - SKIP
         CP    LINENO(5),UPPER(5)      CHECK WITHIN RANGE
         BH    SKIPREC                 NOT IN RANGE - SKIP
         B     SKPRANGE                GO PRINT RECORD
STANDARD EQU   *
         TRT   LINE+77(8),NUMERIC      VALID LINE NUMBER
         BNZ   ERRORN                  ABORT PRINTOFF
         PACK  LINENO(5),LINE+77(8)    PACK LINE NUMBER
         CP    LINENO(5),LOWER(5)      CHECK WITHIN RANGE
         BL    SKIPREC                 NOT IN RANGE - SKIP
         CP    LINENO(5),UPPER(5)      CHECK WITHIN RANGE
         BH    SKIPREC                 NOT IN RANGE - SKIP
SKPRANGE EQU   *
         CLI   SNUMSW,C'X'             CHECK FOR SNUM KEYWORD
         BNE   SKPSUPRS                NO - DONT SUPPRESS NUMBERS
         CLI   TYPESW,C'S'             CHECK IF STANDARD NUMBERS
         BNE   SUPCOBOL                MUST BE COBOL
         MVC   LINE+77(8),=CL8' '      BLANK OUT NUMBER
         B     SKPSUPRS                GO PRINT LINE
SUPCOBOL EQU   *
         MVC   LINE+5(6),=CL8' '       BLANK OUT NUMBER
SKPSUPRS EQU   *
         PUT   (R5),LINE               PRINT RECORD
SKIPREC  EQU   *
         ENDP  PUTLINE
ERRORL   DS    0H
         TPUT  DSNISL,L'DSNISL         PUT OUT DATASET NOT PRINTED DUE
*                                      TO RECORD LENGTH TOO LONG
*                                      MESSAGE
         B     EXIT                    GO SEE IF INPUT DCB IS OPEN
ERRORU   DS    0H
         TPUT  DSNISU,L'DSNISU         PUT OUT DATASET NOT PRINTED DUE
*                                      TO UNDEFINED RECORD FORMAT
*                                      MESSAGE
         B     EXIT                    GO SEE IF INPUT DCB IS OPEN
ERRI     DS    0H
         TPUT  SYNADI,L'SYNADI         PUT OUT DATASET NOT PRINTED DUE
*                                      TO SYNAD ERROR ON INPUT DATASET
*                                      MESSAGE
         B     EXIT                    GO SEE IF INPUT DCB IS OPEN
ERRO     DS    0H
         TPUT  SYNADO,L'SYNADO         PUT OUT DATASET NOT PRINTED DUE
*                                      UNDEFINED RECORD FORMAT
*                                      MESSAGE
         B     CLOSDCBS                GO CLOSE OPEN DCBS AND RETURN
*                                                                     *
ERRORR   DS    0H
         TPUT  INVRNG,L'INVRNG         INVALID RANGE OF LINES
         B     RETURN                  RETURN TO TMP
ERRORR2  DS    0H
         TPUT  INVRNG2,L'INVRNG2       MISSING UPPER RANGE
         B     RETURN                  RETURN TO TMP
ERRORN   DS    0H
         TPUT  INVNUM,L'INVNUM         INVALID LINE NUMBER FOUND
         B     CLOSDCBS                CLOSE OPEN DCBS AND RETURN
ERRORP   DS    0H
         TPUT  INVPRTR,L'INVPRTR       INVALID PRINTER SPECIFICATION
         B     RETURN                  RETURN TO TMP
***********************************************************************
*                                                                     *
*        READ THE DIRECTORY OF A PDS                                  *
*           THEN EITHER LIST MEMBER NAMES,                            *
*           PRINT MEMBERS,                                            *
*           OR LIST MEMBER NAMES AND PRINT MEMBERS                    *
*                                                                     *
***********************************************************************
*
SCROLLIT DS    0H
         ST    R6,SAVER6               SAVE REGISTER 6
         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED
         BL    CONTSCR                 LOW....CONTINUE WITH SCROLL
         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED
         BE    CONTINUE                YES....SKIP SCROLL
         DROP  R9                      DROP ADDRESSABILITY TO PDL
CONTSCR  DS    0H
         LA    R8,DIRECT               LOAD POINTER TO DIRECTORY DCB
         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB
         MVC   DIRECT(DIRECTL),DIRECTC MOVE DIRECTORY DCB CONSTANT INTO
*                                      DIRECTORY DCB IN WORKAREA
         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO OPEN LIST IN WORKAREA
         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN DIRECTORY DCB
         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY
         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED
*                                      MESSAGE
         DROP  R8                      DROP ADDRESSABILITY TO DCB
*                                                                     *
***********************************************************************
*                                                                     *
*        GETMAIN MEMBER TABLE FOR STORAGE OF DIRECTORY NAMES, ETC.    *
*           INITIALIZE TABLE                                          *
*                                                                     *
***********************************************************************
*
         L     R0,MEMDATL              LOAD LENGTH OF GETMAIN FOR
*                                      MEMBER TABLE
         LR    R2,R0                   SAVE IN REGISTER 2
         GETMAIN R,LV=(0)              GETMAIN MEMBER TABLE STORAGE
         ST    R1,MEMTABLE             SAVE ADDRESS OF MEMBER TABLE
         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE
*                                      IN USE
         LA    R3,0(R2,R1)             LOAD ADDRESS OF END OF TABLE
         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END
         SLR   R4,R4                   ZERO REGISTER 4
         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER
*                                      TABLE
         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO
*                                      THE FIRST ENTRY
         USING MEMDSECT,R4             ESTABLISH ADDRESSABILITY TO
*                                      MEMBER TABLE DSECT
         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO
*                                                                     *
***********************************************************************
*                                                                     *
*        READ DIRECTORY AND BUILD MEMBER TABLE                        *
*                                                                     *
***********************************************************************
*
GETDIR   EQU   *
         GET   (R8),DATA               GET A DIRECTORY BLOCK
         CLC   DATA,HALF12             SEE IF BLOCK IS UNUSED
         BL    FREEBLK                 YES....GO HANDLE DIRECTORY END
         LA    R9,DATA+2               LOAD POINTER TO FIRST DIRECTORY
*                                      ENTRY
         SLR   R7,R7                   ZERO REGISTER 7 FOR INSERT
         ICM   R7,3,DATA               INSERT LENGTH USED OF THIS BLOCK
         LA    R7,DATA-1(R7)           LOAD LAST USED BYTE OF BLOCK
UNBLOCK  DS    0H
         MVC   MEMNTTR,0(R9)           PUT NAME AND TTR IN TABLE
         MVC   CFIELD,11(R9)           PUT C FIELD IN TABLE
         CLI   MEMBER,HEXFF            SEE IF LAST MEMBER
         BE    FREEBLK                 YES....GO HANDLE DIRECTORY END
         IC    R6,CFIELD               INSERT CFIELD INTO REGISTER 6
         SLL   R6,27                   SHIFT OUT HIGH ORDER BITS
         SRL   R6,26                   SHIFT RIGHT TO GET LENGTH OF
*                                      USER DATA
         LA    R6,12(R6)               ADD STANDARD ENTRY LENGTH
         LA    R4,MEMSECTN             LOAD PINTER TO NEXT TABLE ENTRY
         LA    R5,1(R5)                INCREMENT NUMBER OF MEMBERS IN
*                                      TABLE
         C     R4,ENDTABLE             SEE IF END OF TABLE
         BL    NEXTNTRY                LOW.....GO PROCESS NEXT ENTRY
         LR    R0,R2                   LOAD LENGTH OF TABLE FOR GETMAIN
         GETMAIN R,LV=(0)              GET NEXT TABLE
         L     R14,PRESENT             LOAD REGISTER 14 WITH ADDRESS OF
*                                      LAST TABLE
         ST    R1,0(R14)               CHAIN MEMBER TABLES TOGETHER
         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE
*                                      IN USE
         LA    R3,0(R2,R1)             LOAD ADDRESS OF TABLE END
         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END
         SLR   R4,R4                   ZERO REGISTER 4
         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER
*                                      TABLE
         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO
*                                      THE FIRST ENTRY
         STH   R5,4(R14)               STORE MEMBER COUNT IN OLD TABLE
         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO
NEXTNTRY DS    0H
         BXLE  R9,R6,UNBLOCK           INCREMENT REGISTER 9 WITH
*                                      REGISTER 6 AND BRANCH
*                                      LESS THAN OR EQUAL TO
*                                      REGISTER 7 TO UNBLOCK
         B     GETDIR                  NO.....GO GET NEXT DIRECTORY
*                                      BLOCK
         DROP  R4                      DROP ADDRESSABILITY TO TABLE
*
***********************************************************************
*                                                                     *
*        LIST MEMBERS IF:                                             *
*           LIST SPECIFIED OR                                         *
*           BOTH PRINT AND NOLIST WERE NOT SPECIFIED                  *
*                                                                     *
***********************************************************************
*
FREEBLK  DS    0H
         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO CLOSE LIST
         CLOSE ((R8),),MF=(E,OPENLST)  CLOSE DIRECTORY DCB
         L     R2,PRESENT              LOAD POINTER TO LAST TABLE
         STH   R5,4(R2)                STORE COUNT OF MEMBERS
         LA    R1,PRINTI               LOAD POINTER TO PRINT DDNAME
         BAL   R2,FREEDD               GO FREE DDNAME
         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS
*                                      ZERO
         BNZ   CLOSDCBS                NO.....GO CLOSE DCBS AND RETURN
         LA    R8,DAP08                LOAD POINTER TO DAPB 08
         USING DAPB08,R8               ESTABLISH ADDRESSABILITY TO
*                                      DAPB
         L     R4,MEMTABLE             LOAD POINTER TO FIRST TABLE
         CLC   4(2,R4),HALF0           SEE IF THERE WERE ANY MEMBERS
         BE    ENDMEMB                 ZERO...GO FREE MEMBER TABLE
         MVC   DA08MNM,8(R4)           MOVE IN FIRST MEMBER NAME
         SLR   R5,R5                   ZERO REGISTER 5
         ST    R5,ECB                  STORE REGISTER 5 AS ECB
         L     R1,SAVER6               LOAD POINTER TO DSNAME PDE
         MVC   DSNLEN,4(R1)            MOVE IN LENGTH OF DATASET NAME
         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL
         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL
         ST    R8,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL
         DROP  R1,R8                   DROP ADDRESSABILITY TO DAPL AND
*                                      DAPB
         CALLTSSR EP=IKJDAIR           CALL DAIR TO ALLOCATE DATASET
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZ    READJFCB                YES....GO READ JFCB
         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR
         BAL   R2,DAIRFAIL             GO TO DAIRFAIL ROUTINE TO HAVE
*                                      ERROR MESSAGE PUT OUT
         TPUT  DSNNOTP,L'DSNNOTP       PUT OUT DATASET NOT PRINTED
*                                      MESSAGE
         L     R6,SAVER6               RESTORE REGISTER 6
         L     R5,0(R6)                LOAD POINTER TO DDNAME
         LH    R4,4(R6)                LOAD LENGTH OF DSNAME
         TPUT  (R5),(R4)               PUT OUT DSNAME
         B     CLOSDCBS                GO CLOSE DCBS AND RETURN
READJFCB DS    0H
         LA    R8,INPUT                LOAD POINTER TO INPUT DCB
         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB
         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO
*                                      INPUT DCB IN WORKAREA
         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO OPEN LIST IN WORKAREA
         LA    R1,XLIST                LOAD ADDRESS OF EXIT LIST
         ST    R1,DCBEXLST             STORE ADDRESS OF EXIT LIST IN
*                                      DCB
         LA    R1,SEXIT                LOAD ADDRESS OF EODAD EXIT
         ST    R1,DCBEODAD             STORE ADDRESS EODAD IN DCB
         LA    R2,JFCBAREA             LOAD ADDRESS OF JFCBAREA
         ST    R2,XLIST                STORE ADDRESS IN EXIT LIST
         MVI   XLIST,X'87'             SET END OF LIST AND JFCB BYTE
         MVC   RDJL,OPENCLOS           MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO READJFCB LIST IN
*                                      WORKAREA
         RDJFCB (INPUT,),MF=(E,RDJL)   READ JFCB INTO JFCBAREA
         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN INPUT DCB
         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED
         BE    NOLIST                  YES....SKIP LISTING
         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED
         BE    LISTIT                  YES....GO LISTIT
         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED
         BE    NOLIST                  YES....SKIP LISTING
         DROP  R9                      DROP ADDRESSABILITY TO PDL
LISTIT   DS    0H
         MVC   HEADER,HEADERM          MOVE HEADER INTO DATA AREA
         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE
         DROP  R8                      DROP ADDRESSABILITY TO DCB
         BNO   SUSEA                   NO.....GO TO USE ASA CONTROL
         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR
*                                      MACHINE CODE
         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA
         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE
*                                      FOR SPACE
         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN
         BO    SPUTDSN                 YES....GO PUT OUT HEADERS
         LA    R3,PRINTM               LOAD POINTER TO PRINTM
         LA    R14,SPUTDSN             LOAD ADDRESS FOR RETURN FROM
*                                      SYSOUT ALLOCATION
         B     ALLOCOUT                GO TO ALLOCATE SYSOUT
SUSEA    DS    0H
         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR
*                                      ASA CODE
         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA
         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN
         BO    SPUTDSN                 YES....GO PUT OUT HEADERS
         LA    R3,PRINTA               LOAD POINTER TO PRINTA
         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO
*                                      DO SYSOUT ALLOCATION
SPUTDSN  DS    0H
         PUT   (R5),(R4)               PUT OUT PAGE EJECT
         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER
         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO
*                                      INTO SECOND HEADER
         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE
         MVI   OPENPRN,BLANK           BLANK OUT MEMBER NAME
         MVC   MEMNAME(9),OPENPRN      FINISH BLANKING OUT MEMBER NAME
         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2
         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST TABLE
         MVC   LENGTH,HALF85           SET LENGTH TO 85 BYTES
         MVC   LENGTH+2,HALF0          ZERO RESERVED BYTES
         MVC   CNTLBYTE,HDRCNTL        MOVE IN HEADER CONTROL BYTE
*
***********************************************************************
*                                                                     *
*        LIST MEMBER NAMES                                            *
*                                                                     *
***********************************************************************
*
SCROLLER DS    0H
         LH    R10,PAGESIZE            LOAD LINE COUNT
         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE
         LH    R7,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE
         LTR   R7,R7                   SEE IF THERE ARE ENTRIES
         BZ    NOLIST                  NO.....GO PRINT MEMBERS
         LA    R2,8(R2)                LOAD ADDRESS OF FIRST MEMBER
         USING MEMDSECT,R2             ESTABLISH ADDRESSABILITY TO
*                                      MEMBER TABLE ENTRY
LOOP1    DS    0H
         LA    R6,DATA                 LOAD ADDRESS OF OUTPUT BUFFER
         MVI   DATA,BLANK              BLANK OUT OUTPUT BUFFER
         MVC   DATA+1(79),DATA         FINISH BLANKING BUFFER
         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS
         BZ    NOTALIAS                NO.....CONTINUE WITH MAIN NAME
         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME
NOTALIAS DS    0H
         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER
         ST    R2,SAVER2               SAVE REGISTER 2
         LA    R3,2                    LOAD NUMBER OF COLUMNS LEFT
         LA    R8,1                    LOAD ENTRY NUMBER
LOOP2    AH    R8,PAGESIZE             LOAD POINTER TO NEXT COLUMN
*                                      ENTRY
         CR    R8,R7                   SEE IF VALID ENTRY
         BH    END2                    NO.....GO PRINT LINE
         LH    R0,PAGESIZE
         MH    R0,=H'12'           TIMES MEMBER L'
         AR    R2,R0                   LOAD POINTER TO MEMBER NAME
         LA    R6,30(R6)               LOAD POINTER TO NEXT OUTPUT
*                                      BUFFER LOCATION
         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS
         BZ    NOTAL2                  NO.....CONTINUE WITH MAIN NAME
         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME
NOTAL2   DS    0H
         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER
         BCT   R3,LOOP2                DECREMENT COLUMN COUNT
END2     DS    0H
         PUT   (R5),LINE               PUT OUT OUTPUT LINE
         L     R2,SAVER2               RELOAD REGISTER 2
         LA    R2,MEMSECTN             LOAD POINTER TO NEXT MEMBER NAME
         BCT   R10,MOREROW             DECREMENT ROW COUNT
         PUT   (R5),(R4)               PUT OUT PAGE EJECT WHEN ZERO
         B     LOOP3                   RESET COUNTERS
MOREROW  DS    0H
         BCT   R7,LOOP1                DECREMENT MEMBER COUNT FOR
*                                      CURRENT TABLE
LOOP3    L     R2,PRESENT              LOAD POINTER TO CURRENT TABLE
         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE
         LTR   R2,R2                   SEE IF IT WAS THE LAST TABLE
         BNZ   SCROLLER                NO.....GO LIST OUT NEXT TABLE
*
***********************************************************************
*                                                                     *
*        PRINT MEMBERS IF:                                            *
*           PRINT SPECIFIED OR                                        *
*           BOTH LIST AND NOPRINT WERE NOT SPECIFIED                  *
*                                                                     *
***********************************************************************
*
NOLIST   DS    0H
         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED
         BE    ENDMEMB                 YES....GO SKIP PRINT
         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED
         BE    CONTPRT                 YES....GO PRINT MEMBERS
         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED
         BE    ENDMEMB                 YES....GO SKIP PRINT
         DROP  R9                      DROP ADDRESSABILITY TO PDL
CONTPRT  DS    0H
         L     R6,SAVER6               RESTORE REGISTER 6
         LA    R8,INPUT                LOAD ADDRESS OF INPUT DCB
         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB
         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED
         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE
         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO
*                                      GO PUT OUT ERROR MESSAGE
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST IN WORKAREA
         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB
         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB
         TPUT  PRTMSG,L'PRTMSG         PUT OUT DATASET PRINT MESSAGE
         L     R2,0(R6)                LOAD POINTER TO DDNAME
         LH    R3,4(R6)                LOAD LENGTH OF DSNAME
         TPUT  (R2),(R3)               PUT OUT DSNAME
         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST MEMBER
*                                      TABLE
         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE
         LTR   R3,R3                   SEE IF THERE ARE ANY MEMBERS
         BZ    ENDMEMB                 NO.....GO TO END OF SCROLLER
         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE
         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME
NEXTMEMB DS    0H
         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS ENTRY
         BO    AGAIN                   YES....DO NOT PRINT IT
PRINTMEM DS    0H
         MVC   MEMNAME,MEMBER          MOVE MEMBER NAME INTO HEADER
         MVC   JFCBELNM,MEMBER         MOVE MEMBER NAME INTO JFCBAREA
         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO OPEN LIST
         OPEN  ((R8),INPUT),TYPE=J,MF=(E,OPENLST)
*                                      OPEN INPUT DCB
         STM   R2,R3,SAVER2            SAVE REGISTERS 2 AND 3
         B     PRINTS                  GO PRINT MEMBER
SEXIT    DS    0H
         LM    R2,R3,SAVER2            RESTORE REGISTERS 2 AND 3
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST IN WORKAREA
         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB
AGAIN    DS    0H
         LA    R2,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER
         BCT   R3,NEXTMEMB             BRANCH TO HANDLE NEXT MEMBER
         L     R14,PRESENT             ZERO...LOAD CURRENT TABLE
*                                      ADDRESS
         L     R2,0(R14)               LOAD ADDRESS OF NEXT TABLE
         LTR   R2,R2                   SEE IF ZERO, LAST TABLE
         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS
         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE
         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN NEXT
*                                      TABLE
         LTR   R3,R3                   SEE IF ANY MEMBERS IN TABLE
         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS
         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME
         B     NEXTMEMB                GO GET NEXT MEMBER
ENDMEMB  DS    0H
         L     R2,MEMTABLE             LOAD POINTER TO FIRST TABLE
FREETABS DS    0H
         LR    R1,R2                   LOAD AREA TO BE FREED
         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE
         L     R0,MEMDATL              LOAD SIZE OF AREA TO BE FREED
         FREEMAIN R,LV=(0),A=(1)       FREE STORAGE GETMAINED FOR TABLE
         LTR   R2,R2                   SEE IF THERE WAS ANOTHER TABLE
         BNZ   FREETABS                YES....GO FREE NEXT TABLE
         L     R6,SAVER6               RESTORE REGISTER 6
         LA    R8,INPUT                LOAD POINTER TO INPUT DCB
         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB
         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN
         BNO   EXITMSG                 NO.....GO HANDLE NEXT DATASET
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST IN WORKAREA
         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB
         DROP  R8                      DROP ADDRESSABILITY TO DCB
         B     EXITMSG                 GO HANDLE NEXT DATASET
*                                                                     *
***********************************************************************
*                                                                     *
*        PUT OUT SYNAD ERROR MESSAGE,                                 *
*           GO FREE MEMBER TABLES, AND                                *
*           CONTINUE WITH NEXT DATASET                                *
*                                                                     *
***********************************************************************
*
SERRI    DS    0H
         TPUT  SYNADI,L'SYNADI         PUT OUT DATASET NOT PRINTED DUE
*                                      TO SYNAD ERROR ON INPUT
*                                      DATASET MESSAGE
         B     ENDMEMB                 GO FREE MEMBER TABLES
*                                                                     *
***********************************************************************
*                                                                     *
*        SEARCH FOR MAIN NAME,                                        *
*           SAME TTR AND NOT AN ALIAS                                 *
*                                                                     *
***********************************************************************
*
LOOKLOOP DS    0H
         STM   R3,R4,SAVER3            SAVE REGISTERS 3 AND 4
         L     R3,MEMTABLE             LOAD ADDRESS OF FIRST TABLE
         USING MEMDSECT,R3             ESTABLISH ADDRESSABILITY TO
*                                      MEMBER ENTRY
LOOP4    DS    0H
         ST    R3,CURRENT              SAVE ADDRESS OF PRESENT TABLE
         LH    R4,4(R3)                LOAD NUMBER OF ELEMENTS IN TABLE
         LTR   R4,R4                   SEE IF THERE ARE ZERO ELEMENTS
         BZ    NOMAIN                  YES....GO HANDLE MAIN NOT FOUND
         LA    R3,8(R3)                LOAD ADDRESS OF FIRST MEMBER
LOOP5    DS    0H
         CLC   MEMTTR,8(R2)            SEE IF TTRS ARE THE SAME
         BE    SAMETTR                 YES....GO SEE IF IT IS AN ALIAS
ENDLP5   DS    0H
         LA    R3,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER
         BCT   R4,LOOP5                DECREMENT MEMBER COUNT
         L     R3,CURRENT              LOAD ADDRESS OF THIS TABLE
         L     R3,0(R3)                LOAD ADDRESS OF NEXT TABLE
         LTR   R3,R3                   SEE IF IT WAS THE LAST TABLE
         BNZ   LOOP4                   NO.....GO CHECK NEXT TABLE
         B     NOMAIN                  GO HANDLE MAIN NOT FOUND
SAMETTR  DS    0H
         TM    CFIELD,HIGH             SEE IF THIS IS ALSO AN ALIAS
         BO    ENDLP5                  YES....GO LOOK FOR ANOTHER TTR
         MVC   11(8,R6),MEMBER         MOVE MEMBER NAME INTO OUTPUT
         B     ENDLOOK                 GO TO RETURN TO CALLER
NOMAIN   DS    0H
         MVC   11(8,R6),ALIAS          INDICATE THIS IS AN ALIAS
ENDLOOK  DS    0H
         LM    R3,R4,SAVER3            RESTORE REGISTERS 3 AND 4
         BR    R14                     RETURN TO CALLER
         DROP  R3                      DROP ADDRESSABILITY TO TABLE
*
CONTINUE DS    0H
         L     R6,24(R6)               LOAD POINTER TO NEXT DSNAME ON
*                                      CHAIN
         NI    ONETIME,255-1       RESET ONE TIME SW
         C     R6,ENDCHAIN             SEE IF END OF CHAIN IS REACHED
         BNE   NEXT                    NO.....GO DO NEXT DATASET NAME
CLOSDCBS DS    0H
         TM    INPUT+48,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN
         BNO   CHKOUTA                 NO.....GO CHECK DCB FOR ASA CODE
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST WORKAREA
         LA    R5,INPUT                LOAD POINTER TO INPUT DCB
         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE INPUT DCB
CHKOUTA  DS    0H
         TM    OUTPUTA+48,DCBOFOPN     SEE IF OUTPUT DCB FOR ASA WAS
*                                      OPENED
         BNO   CHKOUTM                 NO.....GO CHECK DCB FOR MACHINE
*                                      CODE
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST WORKAREA
         LA    R5,OUTPUTA              LOAD POINTER TO ASA CODE DCB
         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE ASA CODE OUTPUT DCB
         LA    R1,PRINTA               LOAD ADDRESS OF PRINT DDNAME
         BAL   R2,FREEDD               GO FREE ASA CODE OUTPUT DDNAME
CHKOUTM  DS    0H
         TM    OUTPUTM+48,DCBOFOPN     SEE IF OUTPUT DCB FOR MACHINE
*                                      CODE WAS OPENED
         BNO   RETURN                  NO.....GO FREE GETMAINED AREAS
*                                      AND RETURN
         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO CLOSE LIST WORKAREA
         LA    R5,OUTPUTM              LOAD POINTER TO MACHINE CODE DCB
         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE MACHINE CODE OUTPUT DCB
         LA    R1,PRINTM               LOAD ADDRESS OF PRINT DDNAME
         BAL   R2,FREEDD               GO FREE MACHINE CODE OUTPUT
*                                      DDNAME
*
***********************************************************************
*                                                                     *
*        CLEANUP AREAS GETMAINED BY PARS,                             *
*           SET RETURN CODE, RESTORE REGISTERS AND                    *
*           RETURN TO CALLER                                          *
*                                                                     *
***********************************************************************
*
RETURN   DS    0H
         IKJRLSA PARSBACK              RELEASE AREAS GETMAINED BY PARS
         LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)             RELOAD ADDRESS OF PREVIOUS SAVE
*                                      AREA
         LA    R0,LDYNAMIC             LOAD LENGTH OF GETMAINED AREA
         FREEMAIN R,LV=(0),A=(1)       FREE GETMINED AREA
         SLR   R15,R15                 ZERO REGISTER 15.  RETURN CODE
*                                      CODE WILL ALWAYS BE ZERO
         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN
*                                      ADDRESS
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         BR    R14                     RETURN
*
***********************************************************************
*                                                                     *
*        ROUTINE TO CONVERT NONZERO RETURN CODES TO DECIMAL           *
*           FOR DISPLAY                                               *
*                                                                     *
***********************************************************************
*
SETCODE  DS    0H
         CVD   R8,DEC                  CONVERT RETURN CODE TO DECIMAL
         LA    R7,DEC
         LA    R8,CONV
         UNPK  0(8,R8),0(8,R7)         UNPACK RETURN CODE
         MVZ   1(7,R8),0(R8)           MOVE ZONES IN CONVERTED RETURN
*                                      CODE
         BR    R14                     RETURN
*
***********************************************************************
*                                                                     *
*        FREE AND REALOCATE PRINTX FILE AS SYSOUT                     *
*                                                                     *
***********************************************************************
*
ALLOCOUT DS    0H
         STM   14,9,ALCSAVE            SAVE WORK REGISTERS
         LR    R1,R3                   LOAD POINTER TO DDNAME
         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE
         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS
*                                      ZERO
         BNZ   OPENFAIL                NO.....GO PUT OUT OPEN FAILED
         LA    R8,REQBLK               LOAD POINTER TO REQUEST BLOCK
         ST    R8,RBPTR                INITIALIZE REQUEST BLOCK POINTER
         MVI   RBPTR,S99RBPND          INDICATE END OF PARAMETER LIST
         USING S99RB,R8                ESTABLISH ADDRESSABILITY TO
*                                      REQUEST BLOCK
         MVC   S99RBLN(RBLEN),REQBLKC  INITALIZE RB
         LA    R1,TEXTPTRS             LOAD POINTER TO TEXT POINTERS
         ST    R1,S99TXTPP             STORE POINTER IN RB
         DROP  R8                      DROP ADDRESSABILITY TO RB
         USING S99TUPL,R1              ESTABLISH ADDRESSABILITY TO
*                                      TEXT UNIT POINTER LIST
         LA    R2,TEXTA                LOAD POINTER TO FIRST TEXT UNIT
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         USING S99TUNIT,R2             ESTABLISH ADDRESSABILITY TO
*                                      TEXT UNIT
         MVC   S99TUKEY(TEXTALEN),TEXTAC  INITIALIZE TEXT UNIT A
         MVC   S99TUPAR(8),0(R3)       MOVE IN PARAMETER (DDNAME)
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
*                                      POINTER
         LA    R2,TEXTB                LOAD POINTER TO TEXT UNIT B
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         MVC   S99TUKEY(TEXTBLEN),TEXTBC  INITIALIZE TEXT UNIT B
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND SEE IF SYSOUT CLASS/DEST ARE PRESENT                  *
*                                                                     *
***********************************************************************
*
         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         CLI   DSPRTSW,C'X'            CHECK FOR DSPRINT COMMAND
         BNE   SKPPRTR                 DONT CHECK FOR PRINTER
         CLI   PRINTER+1,0             CHECK IF PRINTER ENTERED
         BE    ERRORP                  NO PRINTER - TERMINATE
         LH    R7,PRINTER              GET PRINTER NUMBER
         BCTR  R7,R0                   DECREMENT PRINTER NUMBER
         A     R7,=A(PRTTAB)           FIND TABLE ENTRY
         MVC   S99TUPAR(1),0(R7)       INITIALIZE CLASS
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
         LA    R2,TEXTC                LOAD POINTER TO TEXT UNIT C
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         MVC   S99TUKEY(TEXTCLEN),TEXTCC  INITIALIZE TEXT UNIT C
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
         LA    R2,TEXTG                LOAD POINTER TO TEXT UNIT G
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         MVC   S99TUKEY(TEXTGLEN),TEXTGC  INITIALIZE TEXT UNIT G
         MVC   S99TUPAR(4),=C'PGMR'    FORM = PGMR
         B     NOFCB                   GO FREE SYSOUT (PARMS)
SKPPRTR  EQU   *
         CLC   PCLASS(2),HALF1         SEE IF CLASS SPECIFIED
         BNE   NOCLASS                 NO.....GO CHECK FOR DESTINATION
         L     R7,SCLASS               LOAD POINTER TO SYSOUT CLASS
         MVC   S99TUPAR,0(R7)          MOVE CLASS INTO TEXT UNIT B
NOCLASS  DS    0H
*
NODEST   DS    0H
         CLC   PHOLD(2),HALF1          SEE IF HOLD SPECIFIED
         BNE   NOHOLD                  NO.....GO CHECK FOR COPIES
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
*                                      POINTER
         LA    R2,TEXTDC               LOAD POINTER TO TEXT UNIT C
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
NOHOLD   DS    0H
         CLC   PCOPIES(2),HALF1        SEE IF COPY SPECIFIED
         BNE   NOCOPY                  NO.....GO ZERO ECB
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
*                                      POINTER
         LA    R2,TEXTE                LOAD POINTER TO TEXT UNIT E
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         MVC   S99TUKEY(TEXTELEN),TEXTEC  INITIALIZE TEXT UNIT E
         L     R7,SCOPIES              LOAD POINTER TO COPY FIELD
         LH    R6,SCOPIES+4            LOAD LENGTH OF COPY FIELD
         BCTR  R6,0                    DECREMENT REGISTER 6 FOR EXECUTE
*                                      OF PACK INSTRUCTION
         EX    R6,PACKCOPY             EXECUTE PACK TO CONVERT COPIES
*                                      TO ZONED DECIMAL
         CVB   R6,DEC                  CONVERT ZONED TO BINARY
         STCM  R6,1,S99TUPAR           STORE NUMBER OF COPIES IN TU
NOCOPY   DS    0H
         LA    R1,4(R1)
         LA    R2,TEXTG
         ST    R2,S99TUPTR
         MVC   S99TUKEY(TEXTGLEN),TEXTGC
         L     R14,SDEST
         LTR   R14,R14
         BZ    CKP3800
         LA    R0,S99TUPAR         TO FIELD
         LR    R2,R1               SAVE R1
         LH    R1,SDEST+4          L'DEST
         LR    R15,R1              COPY L'
         MVCL  R0,R14              MOVE DEST IN
         LR    R1,R2               RESTORE R1
CKP3800  CLI   P3800+1,1
         BE    TSO1
         MVC   S99TUPAR(4),=C'TSO2'
TSO1     DS    0H
         CLC   PFCB(2),HALF1       FCB SPEC.
         BNE   NOFCB
         LA    R1,4(R1)            NXT TU PTR
         LA    R2,TEXTH            FCB TEXT
         ST    R2,S99TUPTR
         MVC   S99TUKEY(TEXTHLEN),TEXTHC INIT TEXT UNIT
         L     R14,SFCB            FCB CHARS
         LH    R15,SFCB+4          L'
         LA    R0,S99TUPAR         TU AREA
         LR    R2,R1               SAVE R1
         LR    R1,R15              COPY L'
         MVCL  R0,R14              MOVE FCB NAME IN
         LR    R1,R2               RESTORE R1
NOFCB    DS    0H
         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT
*                                      POINTER
         LA    R2,TEXTFC               LOAD POINTER TO TEXT UNIT F
*                                      PERMANENTLY ALLOCATED
*                                      ATTRIBUTE
         ST    R2,S99TUPTR             STORE POINTER IN TUPL
         MVI   S99TUPTR,S99TUPLN       INDICATE END OF TEXT UNIT
*                                      POINTER LIST
         DROP  R1,R2,R9                DROP ADDRESSABILITY TO DSECTS
         LA    R1,RBPTR                LOAD ADDRESS OF REQUEST BLOCK
*                                      POINTER
         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BNZ   ALCFAIL                 NO.....GO AND CALL DAIR FAIL
         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT
*                                      INTO WORKAREA
         OPEN  ((R5),(OUTPUT)),MF=(E,OPENLST)
*                                      OPEN OUTPUT DCB
         TM    48(R5),DCBOFOPN         SEE IF DCB OPENED SUCCESSFULLY
         BNO   OPENFAIL                NO.....GO PUT OUT OUTPUT DCB
*                                      NOT OPENED MESSAGE
         LM    14,9,ALCSAVE            RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
ALCFAIL  DS    0H
         LA    R1,REQBLK               LOAD ADDRESS OF REQUEST
*                                      BLOCK
         MVI   DFID+1,DFSVC99          SET DAIR FAIL FOR SVC 99 ERROR
         BAL   R2,DAIRFAIL             LOAD ADDRESS OF OPEN FAIL AND
*                                      BRANCH TO DAIRFAIL ROUTINE
OPENFAIL DS    0H
         TPUT  OPENMSG,L'OPENMSG       PUT OUT OUTPUT DCB NOT OPEND
*                                      MESSAGE
         TPUT  (R3),8                  PUT OUT DDNAME
         B     CLOSDCBS                GO CLOSE DCBS AND RETURN
*
***********************************************************************
*                                                                     *
*        INVOKE DAIR TO FREE FILENAME VIA CALLTSSR                    *
*           AND CHECK FOR ZERO RETURN CODE                            *
*                                                                     *
***********************************************************************
*
FREEDD   DS    0H
         SLR   R8,R8                   INITIALIZE REGISTER 8 TO ZERO
*                                      RETURN CODE
         MVC   DAP18(DAPB18L),DAPB18C  INITIALIZE DAIR PARAMETER BLOCK
*                                      18 (FREE BY DATASET)
         LA    R4,DAP18                LOAD ADDRESS OF DAPB
         USING DAPB18,R4               ESTABLISH ADDRESSABILITY TO
*                                      DAPB
         MVC   DA18DDN,0(R1)           MOVE DDNAME INTO DAPB
         SLR   R7,R7                   ZERO REGISTER 7
         ST    R7,ECB                  STORE REGISTER 7 AS DUMMY ECB
         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL
         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL
         ST    R4,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL
         DROP  R1,R4                   DROP ADDRESSABILITY TO DAPL AND
*                                      DAPB
         CALLTSSR EP=IKJDAIR           CALL DAIR TO FREE DDNAME
         C     R15,FULL28              SEE IF RETURN CODE IS 28
*                                      (DDNAME NOT ALLOCATED)
         BER   R2                      YES....GO CONTINUE PROCESSING
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZR   R2                      YES....GO CONTINUE PROCESSING
         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR
*
***********************************************************************
*                                                                     *
*        INVOKE DAIRFAIL TO DISPLAY AN ERROR MESSAGE                  *
*                                                                     *
***********************************************************************
*
DAIRFAIL XC    DFPARMS(DFLEN),DFPARMS  INITIALIZE PARMLIST FOR DAIR
*                                      FAIL TO ZEROS
         ST    R1,DFDAPLP              STORE POINTER TO DAPL/RB IN
*                                      PARAMETER LIST
         ST    R15,RETCODE             STORE RETURN CODE
         LA    R1,RETCODE              LOAD ADDRESS OF RETURN CODE
         ST    R1,DFRCP                STORE POINTER TO RETURN CODE IN
*                                      PARAMETER LIST
         LA    R1,FULL0                LOAD ADDRESS OF FULLWORD OF
*                                      ZEROS
         ST    R1,DFJEFF02             STORE DUMMY POINTER TO IKJEFF02
*                                      IN PARMLIST
         LA    R1,DFID                 LOAD ADDRESS OF DAIR FAIL ID
*                                      FIELD
         ST    R1,DFIDP                STORE POINTER TO DFID IN
*                                      PARMLIST
         MVI   DFID,NOWTP              SET FOR NO WRITE TO PROGRAMMER
         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS
*                                      SAVEAREA
         L     R1,24(R1)               LOAD POINTER TO CPPL
         ST    R1,DFCPPLP              STORE POINTER TO CPPL IN
*                                      PARMLIST
         LINK  EP=IKJEFF18,MF=(E,DFPARMS)  LINK TO DAIR FAIL SERVICE
*                                      ROUTINE TO HANDLE RETURN
*                                      CODE
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BZR   R2                      YES....GO RETURN TO CALLER
         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN CODE
         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL
         TPUT  DRFLERR,L'DRFLERR       PUT OUT DAIR FAIL ERROR MESSAGE
         TPUT  (R8),8                  PUT OUT DECIMAL RETURN CODE
         BR    R2                      GO RETURN TO CALLER
*
******************** INSTRUCTIONS TO BE EXECUTED **********************
*
MOVEDSN  MVC   DSNBUF(0),0(R5)
PACKCOPY PACK  DEC(8),0(0,R7)
         USING DAPB08,R8
MOVEMEM  MVC   DA08MNM(0),0(R5)
MOVEPASS MVC   DA08PSWD(0),0(R5)
         DROP  R8
*
***************************** CONSTANTS *******************************
*
******************** DAIR CONTROL BLOCK CONSTANTS *********************
DAPB08C  DS    0F
         DC    X'0008'                 DA08CD
         DC    H'0'                    DA08FLG
         DC    H'0'                    DA08DARC
         DC    H'0'                    DA08CTRC
         DC    A(0)                    DA08PDSN
         DC    CL8'PRINTI  '           DA08DDN
         DC    CL8' '                  DA08UNIT
         DC    CL8' '                  DA08SER
         DC    F'0'                    DA08BLK
         DC    F'0'                    DA08PQTY
         DC    F'0'                    DA08SQTY
         DC    F'0'                    DA08DQTY
         DC    CL8' '                  DA08MNM
         DC    CL8' '                  DA08PSWD
         DC    X'08'                   DA08DSP1      SHR
         DC    X'08'                   DA08DSP2      KEEP
         DC    X'08'                   DA08DSP3      KEEP
         DC    X'08'                   DA08CTL       PERM
         DC    F'0'                    DA08DSO
         DC    CL8' '                  DA08ALN
DAPB08L  EQU   *-DAPB08C               LENGTH
         SPACE 2
DAPB18C  DS    0F
         DC    X'0018'                 DA18CD
         DC    X'0000'                 DA18FLG
         DC    H'0'                    DA18DARC
         DC    H'0'                    DA18CTRC
         DC    F'0'                    DA18PDSN
         DC    CL8'PRINTI'             DA18DDN
         DC    CL8' '                  DA18MNM
         DC    CL2' '                  DA18SCLS
         DC    X'08'                   DA18DPS2
         DC    X'10'                   DA18CTL
         DC    CL8' '                  DA18JBNM
DAPB18L  EQU   *-DAPB18C               LENGTH
         SPACE 2
INPUTC   DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI
INPUTL   EQU   *-INPUTC
*
OUTPUTAC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X
               LRECL=256,BLKSIZE=3120
OUTPUTAL EQU   *-OUTPUTAC
*
OUTPUTMC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X
               LRECL=256,BLKSIZE=3120
OUTPUTML EQU   *-OUTPUTMC
*
DIRECTC  DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X
               SYNAD=SERRI,EODAD=FREEBLK
DIRECTL  EQU   *-DIRECTC
*
OPENCLOS OPEN  (,),MF=L
         SPACE 2
HEADERC  DS    0F
         DC    H'137'
         DC    H'0'
HDRCNTLC DC    C' '
         DC    3CL44'**** TSO FOREGROUND HARDCOPY ****'
HEADERM  DS    0F
         DC    H'137'
         DC    H'0'
         DC    C' '
         DC    3CL44'*** TSO FOREGROUND MEMBER LIST **'
         DS    0H
LDSNAME  DS    0CL12
         ORG   LDSNAME
         DC    H'66'
         DC    H'0'
         DC    CL8' DSNAME='
EJECTM   DS    0F
         DC    H'5'
         DC    H'0'
         DC    X'8B'
EJECTA   DS    0F
         DC    H'5'
         DC    H'0'
         DC    C'1'
SPACE    EQU   EJECTA
         SPACE 2
FULL0    DC    F'0'
FULL1    DC    F'1'
FULL4    DC    F'4'
FULL20   DC    F'20'
FULL28   DC    F'28'
FULL256  DC    F'256'
PRINTI   DC    CL8'PRINTI'
PRINTA   DC    CL8'PRINTA'
PRINTM   DC    CL8'PRINTM'
BLANKS   DC    CL8'        '
ALIAS    DC    CL8' *ALIAS*'
ENDCHAIN DS    0F
         DC    X'FF000000'
HALF0    DC    H'0'
HALF1    DC    H'1'
HALF2    DC    H'2'
HALF12   DC    H'12'
HALF85   DC    H'85'
HALF256  DC    H'256'
PATCH    DC    8CL4'ZAP*'
HEXFF    EQU   X'FF'
HIGH     EQU   X'80'
BLANK    EQU   X'40'
SCLSA    EQU   C'A'
SKIPM    EQU   X'09'
DSOPS    EQU   X'40'
DSOPO    EQU   X'02'
NOWTP    EQU   X'00'
NUMERIC  DC    256X'FF'
         ORG   NUMERIC+C'0'
         DC    X'00000000000000000000'
         ORG   NUMERIC+256
PRTTAB   DC    C'0123456789'
         SPACE 2
****************** POINTER TO PARS PARAMETER CSECT ********************
PCLADDR  DC    A(PARMTAB)
         SPACE 2
************************ PARS PARAMETER LIST **************************
PARMTAB  IKJPARM  DSECT=IKJPARMD
         $HEAD  'DSN(S)'
DSNAMES  IKJPOSIT  DSNAME,LIST,USID,                                   X
               PROMPT='DSNAME',                                        X
               HELP='DSNAME TO BE PRINTED'
         $HEAD 'PRINTER'
PRINTER  IKJKEYWD
         IKJNAME  'P0'
         IKJNAME  'P1'
         IKJNAME  'P2'
         IKJNAME  'P3'
         IKJNAME  'P4'
         IKJNAME  'P5'
         IKJNAME  'P6'
         IKJNAME  'P7'
         IKJNAME  'P8'
         IKJNAME  'P9'
         $HEAD 'CLASS'
PCLASS   IKJKEYWD
         IKJNAME 'CLASS',SUBFLD=CLASSUB
         $HEAD 'FCB'
PFCB     IKJKEYWD
         IKJNAME 'FCB',SUBFLD=FCBSUB
         $HEAD 'FORM'
PDEST    IKJKEYWD
         IKJNAME 'FORM',SUBFLD=DESTSUB
         $HEAD 'HOLD    /NOHOLD'
PHOLD    IKJKEYWD
         IKJNAME 'HOLD'
         IKJNAME 'NOHOLD'
         $HEAD 'FORM'
PFORM    IKJKEYWD DEFAULT='TSO1'
         IKJNAME 'TSO1'
         IKJNAME 'TSOP'
         $HEAD 'P3800'
P3800    IKJKEYWD DEFAULT='ANY'
         IKJNAME 'ANY'
         IKJNAME 'P3800'
         $HEAD 'PAGESIZE'
PPAGESIZ IKJKEYWD
         IKJNAME 'PAGESIZE',SUBFLD=PAGESUB
PECOLOGY IKJKEYWD DEFAULT='ECOLOGY'
         IKJNAME 'ECOLOGY'
         IKJNAME 'NOECOLOGY'
         $HEAD 'COPIES'
PCOPIES  IKJKEYWD
         IKJNAME 'COPIES',SUBFLD=COPYSUB
         $HEAD 'PRINT'
PPRINT   IKJKEYWD
         IKJNAME 'PRINT'
         IKJNAME 'NOPRINT'
         $HEAD 'LIST'
PLIST    IKJKEYWD
         IKJNAME 'LIST'
         IKJNAME 'NOLIST'
PEJECT   IKJKEYWD
         IKJNAME 'EJECT'
         IKJNAME 'NOEJECT'
PSNUM    IKJKEYWD
         IKJNAME 'SNUM'
         IKJNAME 'NUM'
PCCHAR   IKJKEYWD
         IKJNAME 'CCHAR'
         IKJNAME 'NOCCHAR'
PLINES   IKJKEYWD
         IKJNAME 'LINES',SUBFLD=LINESUB
PNONUM   IKJKEYWD
         IKJNAME 'NONUM'
         $HEAD  'SUB      FIELDS'
*        B E G I N   S U B F I E L D S
         $HEAD     'CLASS   NAME'
CLASSUB  IKJSUBF
SCLASS   IKJIDENT 'CLASSNAME',LIST,FIRST=NONATNUM,MAXLNTH=1,           X
               PROMPT='CLASS NAME'
         $HEAD 'FCB'
FCBSUB   IKJSUBF
SFCB     IKJIDENT 'FCB',MAXLNTH=4,PROMPT='PRINTER FCB NAME',           X
               FIRST=ALPHANUM,OTHER=ALPHANUM
         $HEAD 'FORMNO'
DESTSUB  IKJSUBF
SDEST    IKJIDENT 'FORMNO',MAXLNTH=4,                                  X
               PROMPT='PRINTER FORM NO'
         $HEAD 'COPIES'
COPYSUB  IKJSUBF
SCOPIES  IKJIDENT 'COPIES',MAXLNTH=3,                                  X
               FIRST=NUMERIC,OTHER=NUMERIC,                            X
               PROMPT='1-3 DIGITS - NUMBER OF COPIES OF OUTPUT',       X
               HELP=('NUMBER OF COPIES OF PRINTOUT DESIRED')
         $HEAD 'PAGESIZE'
PAGESUB  IKJSUBF
SPAGESIZ IKJIDENT 'PAGESIZ',MAXLNTH=3,                                 X
               FIRST=NUMERIC,OTHER=NUMERIC,                            X
               PROMPT='1-3 DIGITS - PAGE SIZE OF OUTPUT',              X
               HELP=('LINES ON OUTPUT PAGE FOR PDS MEMBER LIST')
LINESUB  IKJSUBF
LINES    IKJIDENT 'LINES',RANGE,MAXLNTH=8,                             X
               FIRST=NUMERIC,OTHER=NUMERIC,                            X
               PROMPT='RANGE OF LINES TO BE PRINTED',                  X
               HELP=('RANGE OF INTERNAL LINE NUMBERS TO PRINT')
         IKJENDP
         SPACE 2
****************************** MESSAGES *******************************
GNRLERR  DC    C'AN ERROR WAS ENCOUNTERED IN THE GENERAL FAIL SERVICE RX
               OUTINE.  THE RETURN CODE FROM GNRLFAIL IS: '
*
DRFLERR  DC    C'AN ERROR WAS ENCOUNTERED IN THE DAIR FAIL SERVICE ROUTX
               INE.  THE RETURN CODE FROM DAIR FAIL IS: '
*
OPENMSG  DC    C'OUPUT PROCESSING IS BEING TERMINATED.  AN ERROR WAS ENX
               COUNTERED ATTEMPTING TO OPEN THE OUTPUT DATASET ASSOCIATX
               ED WITH DDNAME: '
*
DSNNOTP  DC    C'AN ERROR OCCURRED AND YOUR DATASET WAS NOT PRINTED'
*
DSNMSG   DC    C'PROCESSING HAS BEEN COMPLETED FOR DATASET: '
*
MEMMSG   DC    C' MEMBER: '
*
PRTMSG   DC    C'MEMBERS WILL NOW BE PRINTED FOR DATASET: '
*
NOTPSPO  DC    C'DATASET IS NOT SEQUENTIAL OR PARTITIONED AND WAS NOT PX
               RINTED.'
*
SYNADI   DC    C'A SYNAD ERROR OCURRED READING YOU INPUT DATASET AND ONX
               LY PART OF YOUR DATASET MAY HAVE BEEN PRINTED.'
*
SYNADO   DC    C'A SYNAD ERROR OCURRED WRITING THE OUTPUT DATASET AND NX
               O MORE DATASETS WILL BE PRINTED.'
*
DSNISU   DC    C'DATASET HAS UNDEFINED RECORD LENGTH AND WILL NOT BE PRX
               INTED.'
*
DSNISL   DC    C'DATASET HAS RECORD LENGTH GREATER THAN 256.'
*
INVNUM   DC    C'AN INVALID LINE NUMBER HAS CAUSED PROCESSING TO ABORT'
INVRNG   DC    C'INVALID LINE RANGE SPECIFIED - PROCESSING TERMINATING'
INVRNG2  DC    C'UPPER RANGE FOR LINES MISSING - PROCESSING TERMINATED'
INVPRTR  DC    C'INVALID OR MISSING PRINTER SPECIFICATION'
         SPACE 2
************************ DSECTS (MAPPING MACROS) **********************
MEMDSECT DSECT
MEMNTTR  DS    CL11
         ORG   MEMNTTR
MEMBER   DS    CL8
MEMTTR   DS    CL3
CFIELD   DS    CL1
MEMSECTN EQU   *
         IKJDAP08
DAP08LEN EQU   *-DAPB08
         IKJDAP18
DAP18LEN EQU   *-DAPB18
         IKJDAPL
DAPLLEN  EQU   *-DAPL
         IKJCPPL
CPPLLEN  EQU   *-CPPL
         IKJPPL
PPLLEN   EQU   *-PPL
         IHADSAB
TIOEDDNM EQU   4           X'1C'(OFFSET) - X'18'(JOB STEP)
         CVT
         IEFZB4D0
         IEFZB4D2
RBLEN    EQU   S99RBEND-S99RB
         PRINT NOGEN
         DCBD  DSORG=(PS,PO)
         PRINT GEN
         EJECT
******************** CONSTANTS FOR DYNAMIC ALLOCATION *****************
PRINTOFF CSECT
REQBLKC  DC    AL1(S99RBEND-S99RB),AL1(S99VRBAL),18AL1(0)
TEXTAC   DC    AL2(DALDDNAM),AL2(1),AL2(8),CL8'PRINT'  DDNAME
TEXTALEN EQU   *-TEXTAC
TEXTBC   DC    AL2(DALSYSOU),AL2(1),AL2(1),C'T'        SYSOUT CLASS
TEXTBLEN EQU   *-TEXTBC
TEXTCC   DC    AL2(DALSUSER),AL2(1),AL2(8),CL8'RMT1'   DESTINATION
TEXTCLEN EQU   *-TEXTCC
TEXTDC   DC    AL2(DALSHOLD),AL2(0)              SYSOUT HOLD
TEXTDLEN EQU   *-TEXTDC
TEXTEC   DC    AL2(DALCOPYS),AL2(1),AL2(1),AL2(1)      SYSOUT COPIES
TEXTELEN EQU   *-TEXTEC
TEXTFC   DC    AL2(DALPERMA),AL2(0)              PERM ALLOCATION
TEXTFLEN EQU   *-TEXTFC
TEXTGC   DC    AL2(DALSFMNO),AL2(1),AL2(4),C'TSO1'
TEXTGLEN EQU   *-TEXTGC
TEXTHC   DC    AL2(DALFCBIM),AL2(1),AL2(4),C'    '
TEXTHLEN EQU   *-TEXTGC
*********************** DSECT FOR DYNAMIC WORKAREA ********************
WORKAREA DSECT
SAVEAREA DS    18F
ALCSAVE  DS    12F
         DS    0D
DEC      DS    2F
CONV     DS    2F
DAP08    DS    0F
         ORG   DAP08+DAP08LEN
DAP18    DS    0F
         ORG   DAP18+DAP18LEN
DAPLSECT DS    0F
         ORG   DAPLSECT+DAPLLEN
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
ECB      DS    F
PARSBACK DS    F
LINE     DS    0H
LENGTH   DS    H
         DS    H
CNTLBYTE DS    CL1
DATA     DS    CL256
HEADER2  DS    CL12
DSNAME   DS    CL44
OPENPRN  DS    CL1
MEMNAME  DS    CL8
CLOSEPRN DS    CL1
         ORG   DSNAME-2
DSNLEN   DS    CL2
DSNBUF   DS    CL44
         ORG
HEADER   DS    CL137
         ORG   HEADER+4
HDRCNTL  DS    CL1
DFID     DS    CL2
         ORG
ONETIME  DS    X                   SWITCHES
PAGESIZE DS    H                   PAGE SIZE
MEMDATL  DC    X'00'                   SUBPOOL NUMBER
         DC    AL3(*-*)            3*PAGESIZE*12 +8 MEMBER TABLE
MEMTABLE DS    F
ENDTABLE DS    F
CURRENT  DS    F
PRESENT  DS    F
COLUMN   DS    F
XLIST    DS    F
UPPER    DS    PL5
LOWER    DS    PL5
LINENO   DS    PL5
TYPESW   DS    CL1
LINESW   DS    CL1
CCHARSW  DS    CL1
EJECTSW  DS    CL1
SNUMSW   DS    CL1
DSPRTSW  DS    CL1
RDJL     RDJFCB (,),MF=L
JFCBAREA DS    44F
         ORG   JFCBAREA+44
JFCBELNM DS    CL8
         ORG
SAVER6   DS    F
SAVER2   DS    2F
SAVER3   DS    2F
*
         PRINT NOGEN
*
INPUT    DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI
*
OUTPUTA  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X
               LRECL=256,BLKSIZE=3120
*
OUTPUTM  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X
               LRECL=256,BLKSIZE=3120
*
DIRECT   DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X
               SYNAD=SERRI,EODAD=FREEBLK
*
OPENLST  OPEN  (,),MF=L
*
CLOSLST  CLOSE (,),MF=L
*
         PRINT GEN
*
RETCODE  DS    F
GFPARMP  DS    F
         IKJEFFGF
         IKJEFFDF
RBPTR    DS    F
REQBLK   DS    5F
TEXTPTRS DS    7F
TEXTA    DS    0F                                   DDNAME
         ORG   TEXTA+TEXTALEN
TEXTB    DS    0F                                   SYSOUT CLASS
         ORG   TEXTB+TEXTBLEN
TEXTC    DS    0F                                   DESTINATION
         ORG   TEXTC+TEXTCLEN
TEXTE    DS    0F                                   SYSOUT COPIES
         ORG   TEXTE+TEXTELEN
TEXTG    DS    0F                                   FORMS
         ORG   TEXTG+TEXTGLEN
TEXTH    DS    0F                  FCB
         ORG   TEXTH+TEXTHLEN
LDYNAMIC EQU   *-WORKAREA
         END
         MACRO
         REGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
         MACRO
&NAME    TERME &OP=,&SAVE=,&LV=0,&MASK=NO
.* TERME WILL RESTORE REGISTERS, UNCHAIN SAVE AREAS, RELEASE DYNAMIC
.* STORAGE OBTAINED BY THE PRIME MACRO, RESET THE PGM MASK AND IN
.* GENERAL PERFORM THE NECESSARY EXIT LINKAGE.
.* TERME WILL FREE THE USERS SAVE AREA PLUS THE NUMBER OF BYTES
.* SPECIFIED BY THE LV OPERAND UNLESS THE USER IMPLIES THAT THE SAVE
.* AREA WAS NOT OBTAINED VIA A GETMAIN.  THE USER IMPLIES THIS BY
.* SPECIFYING SAVE= SOME VALUE OR SYMBOL.
.* IF THE USER SPECIFIED SAVE=NONE IN THE PRIME MACRO, HE SHOULD DO
.*  THE SAME FOR TERME.
.* THE USER MAY CHOOSE TO FOLLOW THE TERME MACRO WITH THE XCTL MACRO
.* RATHER THAN BRANCH ON 14.  THE USER ACCOMPLISHES THIS BY CODING
.* OP=XCTL.
         AIF   ('&NAME' EQ '').F
&NAME    DS    0H
.F       ANOP
         AIF ('&SAVE' EQ 'NONE').C
         L     13,4(0,13)              GET PTR TO USERS AREA
         STM   0,1,20(13)               TEMPORARY SAVE OF R0 AND R1
         AIF   ('&SAVE' NE '').C
         AIF   ('&LV'(1,1) EQ '(').E
         AIF   ('&LV' EQ '0').CONT
         AIF   ('&LV' GT '4023').ERR
         LA    0,&LV.+72(0,0)           PARAMETER FOR FREEMAIN
         AGO   .CONT
.E       ANOP
         AIF   ('&LV' EQ '(0)').CONT
         LA    0,72(&LV(1).,0)          PARAMETER FOR FREEMAIN
.CONT    ANOP
         L     1,8(0,13)                GET SAVE AREA ADDRESS
         LA    1,0(0,1)                 INDICATE FREEMAIN
         AIF   ('&LV' NE '0').CONTC
         L     0,0(0,1)                 LENGTH IS IN 1ST WORD OF AREA
.CONTC   ANOP
         STCM  15,7,17(13)              SAVE RETURN CODE 11-25-78
         SVC   10                       ISSUE SVC 10
         ICM   15,7,17(13)              RESTORE RETURN CODE 11-25-78
.C       ANOP
         AIF   ('&MASK' EQ 'NO').NOMASK
         L     14,16(0,13)              RESET
         SPM   14                       PGM MASK
.NOMASK  ANOP
         L     14,12(0,13)              RESTORE
         LM    0,12,20(13)              REGISTERS
         XC    8(4,13),8(13)            DEQUEUE SAVE AREA
         AIF   ('&OP' EQ 'XCTL').D
         BR    14                       RETURN TO CALLER
         MEXIT
.D       ANOP
         BALR  15,0                     ESTABLISH ADDRESSABILITY
         USING *,15
         MEXIT
.ERR     MNOTE 'LV GT 4023, LV REQUEST NOT HONORED'
         LA    0,72(0,0)                PARAMETER FOR FREEMAIN
         AGO   .CONT
         MEND
TSBLDHOK TITLE 'INITIALIZE THE SHARE DYNAMIC BLDL MOD'
TSBLDHOK CSECT
***********************************************************************
*         THIS PROGRAM HOOKS FLPA IGC018 AHEAD OF IBM'S IGC018
***********************************************************************
***********************************************************************
*            P R O G R A M  A T T R I B U T E S
*        RENT,REFR (DOESN'T REALLY MATTER)
*        REUS
*        AUTH(IF NOT AUTHORIZED, DOES EVERYTHING BUT STORE ADDR)
*        EXECUTED ONCE PER IPL AS PART OF COMMNDXX STREAM.
*        WATCH OUT FOR '#' LABELS FOR HARDCODED OFFSETS/CONSTANTS
***********************************************************************
         PRIME ID=TSBLDHOK-&SYSDATE-&SYSTIME,LV=DSASIZE
*
**       LOCAL WORKING STORE AFTER O/S SAVE AREA
*
         USING DSA,R13
*
**       LOCATE CVT
*
         L     R2,CVTPTR
         USING CVT,R2
*
**       TEST JOBSTEP AUTHORIZATION
*
         TESTAUTH FCTN=1           AM I AUTHORIZED???
         STC   R15,DSAUTH          SAVE RTN CODE.
*
**       ISSUE LOAD MACRO TO GET STARTING ADDR
*
         L     R1,CVTLINK          GET SYS1.LINKLIB DCB ADDR
         LOAD  EP=IGC018,DCB=(1)   GET START ADDR
*
**       SEE IF MODULE IN LPA/MLPA/FLPA
*
         C     R0,CVTNUCB          1ST BYTE NOT IN NUCLEUS FRAMES
         BL    LOADOK              START ADDR OK
         C     R0,CVTSHRVM         1ST BYTE IN SHARED STORE (TOP)
         BL    LOADABND            IN MY LOCAL STORAGE????
LOADOK   DS    0H
         LR    R6,R0               COPY TO NORMAL REG
         L     R7,CVTABEND         SCVT
         L     R7,X'84'(R7)        SVCTABLE
         LA    R7,X'90'(R7)        BLDL E.P.
         L     R8,0(R7)            BLDL CODE
###CK0   CLC   =C'IGC018  @ZA2543510/05/77',6(R8) MATCH IBM CODE
         BNE   ABEND2
###CK1   CLC   =X'BE77D1214110D1400A009140',X'4E8'(R8)
         BNE   ABEND2
###CK2   CLC   =X'D202700880084340800B144E',X'558'(R8)
         BNE   ABEND2
###CK3   CLC   =C'IGC018XX01-04-77',4(R6)   MATCH SHARE CODE
         BNE   ABEND2
###CK4   CLC   =X'0000000000050004',X'304'(R6)
         BNE   ABEND2
*
**       SEE IF PROGRAM IS AUTHORIZED TO ALTER LOW CORE
*
         CLI   DSAUTH,0            AM I AUTHORIZED?
         BNE   LOADEND             NO- EXIT *SET BREAKPOINT HERE*
*
**       SAVE IBM EP IN SHARE BLDL
**       SAVE SHARE EP IN SVCTABLE
*
         MODESET KEY=ZERO          GET KEY OF ZERO
###OVLY  ST    R8,X'304'(R6)       SAVE IBM E.P.
         ST    R6,0(R7)            DYN BLDL E.P. IN SVCTABLE
         MODESET KEY=NZERO         BACK TO NORMAL KEY
LOADEND  DS    0H                  ALL DONE
         WTO   'TSBLDHOK - DYNAMIC BLDL INSTALLED',ROUTCDE=(11)
         LA    R15,0               RETURN CODE
         TERME
LOADABND DS    0H
         WTO   'TSBLDHOK - DYNAMIC BLDL IN WRONG STORAGE',ROUTCDE=(11)
         ABEND 1,DUMP
ABEND2   DS    0H
         WTO   'TSBLDHOK - CODE MISMATCH - ABEND 2',ROUTCDE=(11)
         ABEND 2,DUMP
         LTORG
*
**       R E G  E Q U A T E S
*
         REGS
         TITLE 'D Y N A M I C  S T O R A G E'
DSA      DSECT DYNAMIC WORKING STORE
         DS    9D                  O/S SAVE
DSAUTH   DS    X                   0=AUTHORIZED,4=NOT
DSASIZE  EQU   *-DSA-72            SIZE
*
**       C  V  T
*
         CVT   DSECT=YES            C V T
         END
