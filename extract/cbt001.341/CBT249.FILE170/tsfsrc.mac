 TITLE 'T S F   ---   T S O   S Y M B O L    F A C I L I T Y'
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*   TSF (TSO SYMBOL FACILITY) CONSISTS OF THREE COMMANDS AND AN EX-  *
*      TENSION TO THE PCF (PROGRAM CONTROL FACILITY) CVT.  IT PRO-   *
*      VIDES A VARIABLE SYMBOL ASSIGNMENT AND SUBSTITUTION CAPABIL-  *
*      ITY FOR CLISTS SIMILAR TO THE ASSEMBLER CAPABILITY FOR MACROS *
*                                                                    *
*   TSF COMMANDS FUNCTION AS FOLLOWS :                               *
*                                                                    *
*    WMSET   -  ASSIGN A CHARACTER STRING, AN EXPRESSION VALUE, OR   *
*               SOME SYSTEM CONTROL INFORMATION TO A SYMBOLIC NAME.  *
*    WMUSE   -  SUBSTITUTE VALUES FOR VARIABLE SYMBOLS IN THE OPER-  *
*               AND AND THEN STACK THE OPERAND AS A COMMAND.         *
*    WMDROP  -  DELETE A SYMBOLIC NAME FROM THE SYMBOL TABLE.        *
*                                                                    *
*   TSF REQUIRES THE PRESENCE OF THE PCF FDP IN THE SYSTEM, OR, AL-  *
*      TERNATIVELY, THAT A USER CVT BE DEFINED WITH AN ENTRY PCFSYM  *
*      FOR A SYMBOL TABLE ANCHOR AND BE CHAINED TO FIELD ECTUSER.    *
*   MVS - WE NOW USE THE ECTUSER FIELD FOR THE HEAD OF CHAIN         *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         MACRO , JVDENTER - V1M00 - 01/28/74
&LABEL   JVDENTER                                                      +
               &BASE=(11),                                             +
               &REGS=(14,12),                                          +
               &ID=,                                                   +
               &VERSION=,                                              +
               &DSA=72,                                                +
               &ORIGIN=*,                                              +
               &CFL=YES
.*
         LCLC  &EPID,&BASR,&START
.*
.BEGIN   AIF   ('&LABEL' EQ '').IDT
.*
         SPACE
&LABEL   DS    0H
         ENTRY &LABEL
         SPACE
.*
.IDT     AIF   (T'&ID EQ 'O').IDD
&EPID    SETC  '&ID'
         AGO   .VER
.IDD     AIF   ('&LABEL' EQ '').IDC
&EPID    SETC  '&LABEL'
         AGO   .VER
.IDC     ANOP
&EPID    SETC  '&SYSECT'
.VER     AIF   (T'&VERSION EQ 'O').GEN
&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'
         MNOTE *,'       &EPID'
.*
.GEN     ANOP
&BASR    SETC  '&BASE(1)'
.*
&START   SETC  '&ORIGIN'
         AIF   ('&ORIGIN' NE '@').START
&START   SETC  '&SYSECT'
.START   AIF   ('&ORIGIN' EQ '*').HERE
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         BALR  &BASR,0
         LA    14,*-&ORIGIN
         SLR   &BASR,14
         LR    2,13
         SPACE
.*
         AGO   .GETDSA
.HERE    ANOP
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         LR    &BASR,15
         LR    2,13
         SPACE
.*
.GETDSA  AIF   ('&DSA' EQ '0').NOCFL
.*
         LA    3,&DSA
         GETMAIN R,LV=(3)
         ST    3,0(1)
         ST    13,4(1)
         LR    13,1
.*
         AIF   ('&CFL' EQ 'NO').NOCFL
.*
         ST    1,8(2)
.*
.NOCFL   ANOP
.*
         LM    14,04,12(2)
         SPACE
.*
         MEND
         MACRO , JVDLEAVE - V1M00 - 01/28/74
&LABEL   JVDLEAVE                                                      +
               &REGS=(14,12),                                          +
               &RC=,                                                   +
               &DSA=
.*
         LCLC  &L
.*
         AIF   ('&DSA' EQ '0').NODSA
.*
&LABEL   LH    0,2(13)
         LR    1,13
         L     13,4(13)
.*
         AIF   ('&RC' NE '(15)').FREE
.*
         LR    2,15
.*
.FREE    ANOP
.*
         FREEMAIN R,LV=(0),A=(1)
.*
.RCCHK   AIF   ('&RC' EQ '').NORC
         AIF   ('&RC' NE '(15)').RTRN
.*
         LR    15,2
.*
         AGO   .RTRNN
.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC
.*
         LR    15,&RC(1)
.*
.RTRNN   ANOP
.*
&L       RETURN &REGS,RC=(15)
         SPACE
.*
         MEXIT
.RTRNC   ANOP
.*
&L       RETURN &REGS,RC=&RC
         SPACE
.*
         MEXIT
.NORC    ANOP
.*
&L       RETURN &REGS
         SPACE
.*
         MEXIT
.NODSA   ANOP
&L       SETC  '&LABEL'
         AGO   .RCCHK
.*
         MEND
         MACRO
&L       JVDEQU &O
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
.*
         MEND
         MACRO
&L       MSG   &MSG,&O
.*
         LCLA  &N,&F
.*
&N       SETA  K'&MSG-2
         AIF   (T'&O EQ 'O').GEN
&F       SETA  &O
.GEN     ANOP
.*
&L       DS    0A
         DC    Y(&N+4,&F)
         DC    C&MSG
         SPACE
.*
         MEND
         SPACE 5
TSF      CSECT
         SPACE 1
         USING TSF,R12
         USING DSA,R11
         USING TSFSLE,R10
         USING LSD,R9
         USING ECT,R5
         USING PSCB,R4
         USING UPT,R3
         USING CPPL,R1
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                 D R O P   C O M M A N D   C O D E                  *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*            PERFORM STANDARD REENTRANT COMMAND PROLOGUE             *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
WMDROP   JVDENTER ORIGIN=TSF,DSA=DSALEN,BASE=(R12),VERSION=&SYSPARM
         SPACE 1
         LR    R11,R13
         LM    R2,R5,CPPL
         XC    ECB,ECB
         L     R6,DROPCLA
         STM   R0,R15,UWA
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*            PARSE PARAMETERS, TAKING DROP EXIT IF SELECT            *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
         LINK  EPLOC=IKJPARS,DCB=0,SF=(E,LINK),MF=(E,PPLST),VL=1,      +
               PARAM=(UPT,ECT,ECB,(6),ANS,(2),UWA)
         SPACE
         LTR   R15,R15
         BNZ   TSSRFAIL
         L     R2,ANS
         USING DROPDL,R2
         SPACE 1
         CLI   ALL+1,2
         BL    RETURN
         BE    DROPLOOP
         SPACE 2
*        L     R15,ECTUSER                    -- SVS PCF USED THIS--*
*        LA    R15,TSFSYMTB-PCFCVT(R15)                             *
         LA    R15,ECTUSER               ----- MVS TSF ADDRESS-------
*
         XC    0(4,R15),0(R15)      CLEAR HEAD POINTER
NOPCFX   B     RETURN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*        IF DROP ALL SPECIFIED, SET UP AND LOOP THRU TABLE           *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
DROPLOOP EQU   *
         SPACE 1
         LA    R1,LOW
         BAL   R14,SLELKUP
         B     *+L'*(R15)
         B     DROPCODE
         B     DROPCODE
         SPACE 1
         ABEND 100
         SPACE 2
DROPCODE EQU   *
         SPACE 1
         LTR   R10,R10
         BZ    RETURN
         MVC   SLELINK-TSFSLE(L'SLELINK,R9),SLELINK
         LH    R0,SLEELEN
         ICM   R0,B'1000',SP78
         SPACE
         FREEMAIN R,LV=(0),A=(10)
         SPACE
         B    DROPLOOP
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*    DROPSEL IS THE PARSE EXIT TAKEN FOR THE SELECT OPTION OF DROP   *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
DROPSEL  SAVE  (14,12),,*
         SPACE
         LM    R14,R0,0(R1)
         LM    R0,R12,0(R15)
         LR    R2,R14
         SPACE
         L     R15,0(R2)
         LH    R14,4(R2)
         BCTR  R14,0
         MVC   NAME,BLANKS
         MVC   NAME(*-*),0(R15)
         EX    R14,*-6
         LA    R1,NAME
         BAL   R14,SLELKUP
         B     *+L'*(R15)
         B     DROPSF
         B     DROPSN
         SPACE
         ABEND 100
         EJECT
DROPSF   EQU   *
         SPACE
         MVC   SLELINK-TSFSLE(L'SLELINK,R9),SLELINK
         LH    R0,SLEELEN
         ICM   R0,B'1000',SP78
         SPACE
         FREEMAIN R,LV=(0),A=(10)
         SPACE
         LA    R15,0
         B     DROPSRTN
         SPACE 2
DROPSN   EQU   *
         SPACE 1
         LA    R15,4
         SPACE 2
DROPSRTN RETURN (14,12),RC=(15)
         SPACE 1
         DROP  R2
         PRINT NOGEN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                 DROP  ALL  /  SELECT('NAME',...)                   *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
DROPCL   IKJPARM DSECT=DROPDL
         SPACE 2
ALL      IKJKEYWD DEFAULT='SELECT'
         SPACE
         IKJNAME  'SELECT',SUBFLD=$SELECT
         IKJNAME  'ALL'
         IKJNAME  'CLEAR'
         SPACE 2
$SELECT  IKJSUBF
         SPACE
SNAME    IKJIDENT                                                      +
               'SYMBOLIC NAME',LIST,                                   +
               FIRST=NONATNUM,OTHER=NONATNUM,MAXLNTH=8,                +
               PROMPT='SYMBOLIC NAME+',                                +
               HELP='NAME OF SYMBOL TO BE DROPPED',                    +
               VALIDCK=DROPSEL
         SPACE
         IKJENDP
         SPACE
         PRINT GEN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                  S E T   C O M M A N D   C O D E                   *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*            PERFORM STANDARD REENTRANT COMMAND PROLOGUE             *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
WMSET    JVDENTER ORIGIN=TSF,DSA=DSALEN,BASE=(R12),VERSION=&SYSPARM
         SPACE
         LR    R11,R13
         LM    R2,R5,CPPL
         XC    ECB,ECB
         L     R6,SETPCLA
         STM   R0,R15,UWA
         MVC   NAME,BLANKS
         EJECT
         SPACE 2
         LINK  EPLOC=IKJPARS,DCB=0,SF=(E,LINK),MF=(E,PPLST),VL=1,      +
               PARAM=(UPT,ECT,ECB,(6),ANS,(2),UWA)
         SPACE
         LTR   R15,R15
         BNZ   TSSRFAIL
         L     R2,ANS
         USING SETPDL,R2
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*   DETERMINE SET VALUE TO BE ASSIGNED TO VARIABLE SYMBOL AND GET    *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
SETTYPE  EQU   *
         SPACE 1
         LH    R15,SETVALUE
         SLA   R15,2
         SPACE
         B     SETTABLE(R15)
         SPACE 2
SETTABLE EQU   *
         SPACE 1
         B     RETURN
         B     SETTO
         B     SETEXPR
         B     SETUSER
         B     SETAC
         B     SETCOND
         B     SETJDATE
         B     SETJDATE
         B     SETTIME
         EJECT
SETTO    EQU   *                         CHARACTER STRING VALUE :
         SPACE
         L     R15,STRING+0              GET ADDRESS FROM PDE AND
         ST    R15,VALADDR                  SAVE FOR SETCODE.
         LH    R15,STRING+4              GET LENGTH FROM PDE AND
         STH   R15,VALLEN                   SAVE FOR SETCODE.
         B     SETCODE                   GO TO COMMON SETCODE.
         SPACE 2
SETEXPR  EQU   *                         EXPRESSION VALUE :
         SPACE 1
         LA    R15,OLD                   POINT TO VALUE FROM VEREXPR
         ST    R15,VALADDR                  SAVE FOR SETCODE.
         LA    R15,16                    ALWAYS SIGN, FOLLOWED BY 15
         STH   R15,VALLEN                   DIGITS.  SAVE FOR SETCODE.
         B     SETCODE                   GO TO COMMON SETCODE.
         SPACE 2
SETUSER  EQU   *                         USERID VALUE :
         SPACE 1
         LA    R15,PSCBUSER              POINT TO USERID IN PSCB AND
         ST    R15,VALADDR                  SAVE FOR SETCODE.
         XR    R15,R15                   GET USERID
         IC    R15,PSCBUSRL                 LENGTH FROM PSCB AND
         STH   R15,VALLEN                   SAVE FOR SETCODE.
         B     SETCODE                   GO TO COMMON SETCODE.
         SPACE 2
SETCOND  EQU   *                         CONDITION CODE VALUE :
         SPACE 1
         MVC   LSDWRK(L'CMASK),CMASK     GET EDIT MASK,
         ICM   R15,B'0111',ECTRTCD          GET LAST RTN CODE FROM EDT,
         LA    R15,0(R15)                   CLEAR GARBAGE,
         CVD   R15,DWD                      CONVERT TO DECIMAL, AND
         ED    LSDWRK(L'CMASK),DWD+5        EDIT INTO WORK AREA.
         LA    R15,LSDWRK+1              POINT TO RESULT AND
         ST    R15,VALADDR                  SAVE ADDRESS FOR SETCODE .
         LA    R15,L'CMASK-1             GET LENGTH AND
         STH   R15,VALLEN                   SAVE FOR SETCODE.
         B     SETCODE                   GO TO COMMON SETCODE.
         EJECT
SETAC    EQU   *                         ACMAIN VALUE :
         SPACE 1
*        L     R8,CVTPTR                 POINT TO CVT.
*        IC    R14,CVTDCB-CVTMAP(R8)     GET SYS CONFIG BITS AND
*        N     R14,VSMASK                   CLEAR ALL BUT DAT (OS/VS);
*        SRL   R14,1                     TO FORM CPU ID OFFSET,
*        LA    R14,1(R14)                   COMPUTE RESULT
*        SLA   R14,4                        (VS/2+1)*16 .
*        L     R15,CVTDCB-CVTMAP(R8)     POINT TO LOGREC DCB,
*        L     R15,0(R15)                   IORMSCOM, AND
*        L     R15,12(R15)                  CCH CHANNEL ANALYSIS TABLE.
*        LA    R15,0(R15)                CLEAR GARBAGE AND
*        SR    R15,R14                      APPLY OFFSET FOR VS OR NOT.
*        MVC   LSDWRK(11),ACMASK         GET EDIT MASK AND
*        ED    LSDWRK(11),1(R15)            EDIT IN CPU ID.
*        LA    R1,L'SYSNTBL              GET LENGTH OF RESULT AND
*        STH   R1,VALLEN                    SAVE FOR SETCODE.
*        LA    R1,LSDWRK+1               POINT TO VALUE AND
*        ST    R1,VALADDR                   SAVE FOR SETOCDE.
*        LA    R1,SYSNTBL                POINT TO ASP SYSTEM NAME TBL.
*        SPACE 2
SETACLK  EQU   *                         LOOK UP SYSTEM NAME :
*        SPACE 1
*        CLC   LSDWRK+1+5(5),5(R1)       CHECK FOR CPU ID MATCH AND
*        BL    SETCODE                      IF PASSED, USE INITIAL.
*        BE    SETACNM                      IF MATCH, USE TABLE ENTRY.
*        LA    R1,10(R1)                 ELSE, BUMP TO NEXT ENTRY AND
*        B     SETACLK                      TRY AGAIN.
*        SPACE 2
SETACNM  EQU   *                         WHEN MATCH FOUND :
*        SPACE 1
*        ST    R1,VALADDR                SAVE ADDRESS FOR SETCODE.
*        B     SETCODE                   GO TO COMMON SETCODE.
         B     RETURN        ACMAIN NOT SUPPORTED NOW AT W & M ***GDE**
         EJECT
SETTIME  EQU   *                         TIME VALUE :
         SPACE 1
         TIME  DEC                       GET CUURENT TIME.
         SPACE 1
         ST    R0,VALADDR                SAVE FOR EDIT.
         MVC   LSDWRK(L'TMASK),TMASK     GET EDIT MASK AND
         ED    LSDWRK(L'TMASK),VALADDR      EDIT TIME.
         LA    R15,LSDWRK+1              POINT TO RESULT AND
         ST    R15,VALADDR                  SAVE ADDRESS FOR SETCODE.
         LA    R15,L'TMASK-1             GET LENGTH OF RESULT AND
         STH   R15,VALLEN                   SAVE FOR SETCODE .
         B     SETCODE                   GO TO COMMON SETCODE.
         SPACE 2
SETJDATE EQU   *                         JULIAN DATE VALUE.
         SPACE 1
         TIME  BIN                       GET DATE FROM SYSTEM.
         SPACE 1
         ST    R1,VALADDR                R1=00YYDDDF
         MVC   LSDWRK(L'JMASK),JMASK     GET EDIT MASK AND
         ED    LSDWRK(L'JMASK),VALADDR      EDIT DATE TO YY.DDD
         LA    R15,LSDWRK+2              POINT TO RESULT AND
         ST    R15,VALADDR                  SAVE ADDRESS FOR SETCODE.
         LA    R15,L'JMASK-2             GET LENGTH AND
         STH   R15,VALLEN                   SAVE FOR SETCODE.
         B     SETCODE                   GO TO COMMON SETCODE.
         EJECT
SETCODE  EQU   *                         COMMON ASSIGNMENT CODE :
         SPACE 1
         LH    R15,VALLEN                GET LENGTH OF VALUE AND
         L     R14,VALADDR                  ADDRESS OF VALUE.
         CLI   SUBSTR+1,0                CHECK FOR SUBSTR SPECIFIED AND
         BE    MOVEIT                       IF NOT, ASSIGN VALUE.  ELSE
         CLI   KPAD+1,2                  CHECK FOR PAD AND,
         BL    NOPAD                        IF NOT, SKIP PADDING CODE.
         BH    PADIT                        IF SPECIFIC, PAD. ELSE
         MVI   PAD,0                        IF ZPAD, INSERT ZERO.
         SPACE
PADIT    MVC   ISLWRK(1),PAD             CLEAR RESULT AREA TO
         L     R1,VALLNTH                   NUMBER OF PAD CHARS
         MVC   ISLWRK+1(*-*),ISLWRK         SPECIFIED BY
         EX    R1,*-6                       SUBSTRING LENGTH.
         SPACE
NOPAD    L     R1,VALSTRT                GET SUBSTRING OFFSET AND
         BCTR  R1,0                         DECREMENT FOR FROM ZERO.
         AR    R14,R1                    FORM ADDR OF SUBSTRING START
         SR    R15,R1                       AND REMAINDER LENGTH
         LH    R0,VALLEN       STRING LENGTH                   *GDE*
         SR    R0,R1             DOWN FOR SUBSTR OFFSET        *GDE*
         C     R0,VALLNTH         IS REMAINING STRING < SUBSTR *GDE*
         BNL   CHLEN              IF NOT, USE SUBSTR LENGTH    *GDE*
         CLI   KPAD+1,1           WAS NOPAD CODED OR IMPLIED?  *GDE*
         BH    CHLEN            IF PAD OR ZPAD ALLOW EXTENSION *GDE*
*
*                           REDUCE SUBSTR LENGTH TO STRING END *GDE*
         ST    R0,VALLNTH         SET TO USE REMAINING LENGTH  *GDE*
         LR    R15,R0             COPY LENGTH TO R15 FOR BELOW *GDE*
*
CHLEN    MVC   VALLEN,VALLNTH+2          RESULT LENGTH IS IN SUBSTR.
         SPACE
MOVEIT   BCTR  R15,0                     ASSIGN VALUE TO
         MVC   ISLWRK(*-*),0(R14)           RESULT
         EX    R15,*-6                      STRING.
         LH    R15,VALLEN                GET LENGTH AND
         LA    R15,SLEVALUE-TSFSLE(R15)     COMPUTE REQUIRED SLE LENGTH
         STH   R15,LENSLE                SAVE FOR LATER.
         LA    R1,NAME                   POINT TO SYMBOL NAME AND
         BAL   R14,SLELKUP                  LOOK UP SLE.
         B     *+L'*(R15)                WAS SLE ON CHAIN ?
         B     SETX                         YES.  TRY TO SET EXISTING.
         B     SETN                         NO.  SET A NEW SLE.
         SPACE
         ABEND 100                       NO PCF / TSF ANCHOR.
         EJECT
SETX     EQU   *                         FOR EXISTING SLE :
         SPACE
         LH    R0,SLEELEN                GET ITS LENGTH AND
         CH    R0,LENSLE                    CHECK FOR SUFFICIENCY.
         BNL   FILLSLE                   IF ENOUGH, ASSIGN.  ELSE
         SPACE
         LR    R1,R10                    PREPARE TO DLINK
         L     R10,SLELINK               FROM CHAIN AND
         ICM   R0,B'1000',SP78           FREE THE
         SPACE
         FREEMAIN R,LV=(0),A=(1)         SLE.
         SPACE 2
SETN     EQU   *                         WHEN A NEW SLE IS REQUIRED :
         SPACE 1
         LH    R15,LENSLE                GET REQUIRED LENGTH AND
         LA    R0,7(R15)                    ROUND UP TO
         N     R0,DWDMASK                   DOUBLEWORD QUANTITY.
         STH   R0,LENSLE                 SAVE ROUNDED LENGTH.
         ICM   R0,B'1000',SP78           INSERT SUBPOOL AND
         SPACE
         GETMAIN R,LV=(0)                ALLOCATE NEW SLE.
         SPACE
         ST    R10,SLELINK-TSFSLE(R1)    LINK NEW SLE
         ST    R1,SLELINK-TSFSLE(R9)        INTO SYMBOL LIST.
         LR    R10,R1                    BASE NEW SLE.
         MVC   SLEELEN,LENSLE            INSERT LENGTH.
         MVC   SLENAME,NAME              INSERT NAME.
         SPACE 2
FILLSLE  EQU   *                         FOR ALL ASSIGNMENTS :
         SPACE 1
         LH    R15,VALLEN                GET VALUE LENGTH AND
         STH   R15,SLEVLEN                  PLACE IN SLE.
         BCTR  R15,0                     DECREMENT AND
         MVC   SLEVALUE(*-*),ISLWRK         COPY VALUE
         EX    R15,*-6                      INTO SLE.
         SPACE
         B     RETURN                    RETURN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*            SET COMMAND PARSE EXIT / VALIDATION ROUTINES            *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
VERSTRT  NOP   VALSTRT
         SPACE
VERLNTH  NOP   VALLNTH
         SPACE 2
VERNUM   STM   R14,R12,12(R13)
         SPACE
         LM    R0,R1,0(R1)
         LM    R3,R12,3*4(R1)
         LR    R2,R0
         SPACE
         L     R1,0(R2)
         LH    R14,4(R2)
         BCTR  R14,0
         PACK  DWD,0(*-*,R1)
         EX    R14,*-6
         MVC   STBD(2),2(R15)
         CVB   R0,DWD
         MVC   STIN,ST
         EX    R0,STIN
         SPACE
         RETURN (14,12),RC=0
         EJECT
VERNAME  NOP   NAME
         SPACE
VERPAD   NOP   PAD
         SPACE
VERCHAR  STM   R14,R12,12(R13)
         SPACE
         LM    R0,R1,0(R1)
         LM    R3,R12,3*4(R1)
         LR    R2,R0
         SPACE
         L     R1,0(R2)
         LH    R14,4(R2)
         BCTR  R14,0
         MVC   MVCIN,MVC
         MVC   MVCBD,2(R15)
         EX    R14,MVCIN
         SPACE
         RETURN (14,12),RC=0
         SPACE
         SPACE 2
VEREXPR  SAVE  (14,12),,*
         SPACE
         LM    R14,R0,0(R1)
         LM    R1,R12,4(R15)
         LR    R2,R14
         LR    R6,R0
         L     R8,0(R2)
         LH    R9,4(R2)
         LA    R9,0(R8,R9)
         LA    R7,ISLWRK
         MVI   OLD,6
         XR    R10,R10
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                 OPERATOR-PRECEDENCE POLISH PARSER                  *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*   FOR EACH ATOM ON INPUT STRING, ASSIGN A PRECEDENCE, AS FOLLOWS:  *
*                                                                    *
*      0 = START, END OF STRING   3 = +, - (ADD, SUBTRACT)           *
*      1 = (                      4 = *, /  (MULTIPLY, DIVIDE)       *
*      2 = )                      5 = OPERANDS                       *
*                                                                    *
*   PUSH ATOMS TO OPERATOR STACK UNTIL AN OPERAND OR A ')' IS FOUND  *
*   IF ATOM IS A ')', THEN POP THE MATCHING '(' OFF OPERATOR STACK   *
*   IF ATOM IS AN OPERAND, THEN APPEND IT TO THE POLISH RESULT LIST  *
*   POP FROM THE OPERATOR STACK TO THE POLISH LIST ALL OPERATORS OF  *
*      PRECEDENCE NOT LESS THAN THAT OF THE NEXT ATOM ON THE INPUT   *
*   FINALLY, ADVANCE TO THE NEXT ATOM AND REPEAT THE ABOVE PROCESS.  *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
POLISH   EQU   *                    FOR EACH INPUT ATOM :
         SPACE 1
         LR    R1,R9                INITIALIZE END.
         LA    R2,6                 DEFAULT TO END-OF-STRING.
         LR    R15,R9               FORM LENGTH
         SR    R15,R8                  OF REMAINDER.
         BP    POLTRT               IF SOME LEFT, SCAN.  ELSE
         MVI   PAD,0                SHOW END-OF-STRING,
         LA    R8,1(R8)                BUMP POINTER PAST, AND
         B     POPNOP                  POP LAST OPERATOR(S).
         SPACE 1
POLTRT   BCTR  R15,0                SCAN REMAINDER OF
         EX    R15,PARSETRT            INPUT FOR OPERATORS.
         LR    R15,R1               FORM LENGTH
         SR    R15,R8                  OF OPERAND, IF ANY.
         BNZ   OPERAND                 IF OPERAND, PROCESS.  ELSE
         CLM   R2,B'0001',X8        CHECK FOR CLOSE PAREN AND,
         BL    OPERATOR                IF NOT, PROCESS OPERATOR.
         BH    VERERR                  UNLESS INVALID OPERATOR.
         LA    R14,OLD(R10)         IF CLOSE, CHECK TOP
         CLI   0(R14),7                OPERATOR ON STACK FOR
         BNE   VERERR                  MATCHING OPEN.  IF THERE,
         BCTR  R10,0                POP OFF STACK AND
         LA    R8,1(R1)                BUMP POINTER.  THEN
         B     POPOP                POP OPERATORS FROM STACK.
         EJECT
OPERATOR EQU   *                    FOR EACH OPERATOR :
         SPACE 1
         LA    R10,1(R10)           PUSH
         LA    R14,OLD(R10)            ONTO
         STCM  R2,B'0001',0(R14)       OPERATOR STACK.
         LA    R8,1(R1)             BUMP POINTER.
         B     POLISH               PROCESS NEXT ATOM.
         SPACE 2
OPERAND  EQU   *                    FOR EACH OPERAND :
         SPACE
         BCTR  R15,0                CONVERT TO
         PACK  DWD,0(*-*,R8)           PACKED
         EX    R15,*-6                 DECIMAL AND
         CVB   R14,DWD                 BINARY.
         MVI   0(R7),5              PLACE OPERAND TOKEN
         STCM  R14,B'1111',1(R7)       ON POLISH OUTPUT,
         LA    R7,5(R7)                ADVANCE POLISH POINTER, AND
         LR    R8,R1                   BUMP STRING POINTER.
         SPACE 2
POPOP    EQU   *                    AFTER PRIMARIES :
         SPACE 1
         STC   R2,PAD               COMPUTE PRECEDENCE OF
         TR    PAD,PARSETAB            NEXT OPERATOR.
         SPACE 1
POPNOP   LA    R15,OLD(R10)         FOR EACH OPERATOR ON STACK,
         MVC   USEDLM,0(R15)           COMPUTE ITS
         TR    USEDLM,PARSETAB         PRECEDENCE AND
         CLC   PAD,USEDLM              IF GREATER THEN NEXT,
         BH    POLISH                  GET NEXT ATOM.  ELSE
         MVC   0(1,R7),0(R15)       POP OPERATOR
         LA    R7,1(R7)                OFF STACK
         SH    R10,H1                  TO POLISH OUTPUT AND
         BNM   POPNOP                  IF MORE, TRY AGAIN.
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*             ARITHMETIC INTERPRETER FOR POLISH STRING               *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*   THE STRING OF POLISH TOKENS IS INTERPRETED ACCORDING TO CODES:   *
*                                                                    *
*      1 = +           3 = *           5 = OPERAND     7 = (         *
*      2 = -           4 = /           6 = START/END   8 = )         *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
POLINT   EQU   *
         SPACE 1
         LA    R7,ISLWRK
         XR    R10,R10
         XR    R2,R2
         SPACE 2
POLLOOP  EQU   *
         SPACE 1
         LA    R1,OLD-8(R10)
         LM    R14,R15,0(R1)
         SPACE 1
         IC    R2,0(R7)
         SLA   R2,2
         B     *(R2)
         SPACE 1
         B     POLADD
         B     POLSUB
         B     POLMPY
         B     POLDIV
         B     POLSTK
         SPACE 2
         L     R15,OLD
         CVD   R15,DWD
         MVI   OLD,C'+'
         ZAP   DWD,DWD
         BNM   POLUNPK
         MVI   OLD,C'-'
         SPACE 1
POLUNPK  OI    DWD+7,X'0F'
         UNPK  OLD+1(15),DWD
         SPACE 1
         B     VERERTN
         EJECT
POLSTK   LA    R15,OLD(R10)
         MVC   0(4,R15),1(R7)
         LA    R10,4(R10)
         LA    R7,5(R7)
         B     POLLOOP
         SPACE 1
POLADD   AR    R15,R14
         B     POLPOP
         SPACE 1
POLSUB   SR    R14,R15
         LR    R15,R14
         B     POLPOP
         SPACE 1
POLMPY   MR    R14,R14
         B     POLPOP
         SPACE 1
POLDIV   LR    R0,R15
         SRDA  R14,32
         DR    R14,R0
         B     POLPOP
         SPACE 1
POLPOP   SH    R10,H4
         BNP   VERERR
         ST    R15,OLD-4(R10)
         LA    R7,1(R7)
         B     POLLOOP
         SPACE 2
VERERR   EQU   *
         SPACE 1
         LA    R15,4
         B     VERERTRN
         SPACE 2
VERERTN  EQU   *
         SPACE 1
         LA    R15,0
         SPACE 2
VERERTRN RETURN (14,12),RC=(15)
         SPACE 2
         DROP  R2
         PRINT NOGEN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                 CONDCODE                                           *
*     NOT AT W&M->ACMAIN            SUBSTR('START','LENGTH')         *
*                 USERID                                             *
*                 EXPRESSION('EXPRESSION')                           *
*    SET  'NAME'  TO('STRING')      PAD('CHAR' / ' ')                *
*                 JDATE             ZPAD                             *
*                 DATE              NOPAD                            *
*                 TIME                                               *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
SETPCL   IKJPARM DSECT=SETPDL
         SPACE 2
SETNAME  IKJIDENT                                                      +
               'SYMBOLIC NAME',                                        +
               FIRST=NONATNUM,OTHER=NONATNUM,MAXLNTH=8,                +
               PROMPT='SYMBOLIC NAME+',                                +
               HELP='NAME OF SYMBOL TO BE ASSIGNED VALUE',             +
               VALIDCK=VERNAME
         SPACE 2
SETVALUE IKJKEYWD
         SPACE
         IKJNAME  'TO',SUBFLD=$STRING
         IKJNAME  'EXPRESSION',SUBFLD=$EXPR
         IKJNAME  'USERID'
         IKJNAME  'ACMAIN'
         IKJNAME  'CONDCODE'
         IKJNAME  'JDATE'
         IKJNAME  'DATE'
         IKJNAME  'TIME'
         SPACE 2
SUBSTR   IKJKEYWD
         SPACE
         IKJNAME  'SUBSTRING',SUBFLD=$SUBSTR
         SPACE 2
KPAD     IKJKEYWD
         SPACE
         IKJNAME  'NOPAD'
         IKJNAME  'ZPAD'
         IKJNAME  'PAD',SUBFLD=$PAD
         EJECT
$PAD     IKJSUBF
         SPACE
PADCHAR  IKJIDENT                                                      +
               'PAD CHARACTER',                                        +
               FIRST=ANY,MAXLNTH=1,                                    +
               PROMPT='PADDING CHARACTER+',                            +
               HELP='CHARACTER TO BE USED TO FILL STRING',             +
               VALIDCK=VERPAD
         SPACE 2
$SUBSTR  IKJSUBF
         SPACE
START    IKJIDENT                                                      +
               'SUBSTRING START',                                      +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +
               PROMPT='STARTING POSITION+',                            +
               HELP='FIRST CHARACTER TO BE ASSIGNED FROM VALUE',       +
               VALIDCK=VERSTRT
         SPACE 2
LENGTH   IKJIDENT                                                      +
               'SUBSTRING LENGTH',                                     +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +
               PROMPT='SUBSTRING LENGTH+',                             +
               HELP='NUMBER OF CHARACTERS TO BE ASSIGNED TO SYMBOL',   +
               VALIDCK=VERLNTH
         SPACE 2
$STRING  IKJSUBF
         SPACE 1
STRING   IKJPOSIT                                                      +
               QSTRING,                                                +
               PROMPT='VALUE STRING+',                                 +
               HELP='VALUE TO BE ASSIGNED TO SYMBOL'
         SPACE 2
$EXPR    IKJSUBF
         SPACE 1
EXPR     IKJIDENT                                                      +
               'EXPRESSION',                                           +
               FIRST=ANY,OTHER=ANY,MAXLNTH=128,                        +
               PROMPT='EXPRESSION+',                                   +
               HELP='EXPRESSION WHOSE VALUE TO BE ASSIGNED TO SYMBOL', +
               VALIDCK=VEREXPR
         SPACE 2
         IKJENDP
         SPACE
         PRINT GEN
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                  U S E   C O M M A N D   C O D E                   *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*            PERFORM STANDARD REENTRANT COMMAND PROLOGUE             *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
WMUSE    JVDENTER ORIGIN=TSF,DSA=DSALEN,BASE=(R12),VERSION=&SYSPARM
         EJECT
         LR    R11,R13
         LM    R2,R5,CPPL
         ST    R2,CBUFA
         XC    ECB,ECB
         LH    R6,0(R2)
         LH    R7,2(R2)
         LA    R8,4(R2,R7)
         LA    R9,0(R2,R6)
         ST    R9,EOOP
         LA    R7,ISLWRK
         MVI   ISLWRK,C' '
         MVC   ISLWRK+1(256),ISLWRK
         MVC   USEUDNME,USEUDNAM
         XC    USENEWL,USENEWL
         XR    R15,R15
         IC    R15,0(R8)
         STC   R15,USEDLM
         LA    R15,USETRT1(R15)
         XC    USETRT1,USETRT1
         MVI   0(R15),8
         LA    R8,1(R8)
         XC    PLISTS,PLISTS
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*    SCAN OPERAND COMMAND, SUBSTITUTING VALUES FOR SYMBOLIC NAMES    *
*                                                                    *
*    USELOOP :  R8   -> CURRENT OPERAND POSITION                     *
*               R7   -> CURRENT NEW COMMAND POSITION                 *
*               EOOP -> END OF OPERAND FIELD                         *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
USELOOP  EQU   *                         BUILD NEW COMMAND
         SPACE 1
         L     R6,EOOP                   POINT PAST OPERAND.
         SR    R6,R8                     FORM LENGTH OF REMAINDER.
         BCTR  R6,0                      DECREMENT.
         L     R1,EOOP                   INITIALIZE R1 FOR TRT.
         LA    R2,4                      INITIALIZE CONDITION.
         EX    R6,TRT1                   SCAN FOR NEXT DELIMITER.
         LR    R15,R1                    FORM LENGTH OF
         SR    R15,R8                       SEGMENT.
         B     *(R2)                     IF END OF OPERAND,
         B     USEMOVE                      SKIP.  ELSE
         CLC   USEDLM,1(R1)              CHECK FOR TWO IN A ROW.
         BNE   USEMOVE                   IF NOT, PROCESS.  ELSE
         LA    R1,1(R1)                  SKIP PAST AND
         LA    R15,1(R15)                   MOVE AS TEXT.
         SPACE 2
USEMOVE  EQU   *                         MOVE A SEGMENT INTO NEW :
         SPACE 1
         LH    R6,USENEWL                ADD SEGMENT LENGTH
         AR    R6,R15                       TO LENGTH OF
         STH   R6,USENEWL                   NEW COMMAND.
         BCTR  R15,0                     DECREMENT SEGMENT LENGTH.
         MVC   0(*-*,R7),0(R8)           MOVE TO CURRENT POSITION
         EX    R15,*-6                      IN NEW COMMAND.
         LA    R7,1(R15,R7)              INCREMENT CURRENT POSITION.
         LA    R8,1(R1)                  PASS DELIMITER ON OPERAND.
         SPACE
         B     *(R2)                     IF END-OD-OPERAND,
         B     USEBUMP                      PASS OUT OF LOOP.  ELSE
         B     USESUB                       SUBSTITUTE VALUE FOR SYMBOL
         SPACE
USEBUMP  CL    R8,EOOP                   CHECK FOR END-OF-STRING AND
         BL    USELOOP                      IF NOT, LOOP AGAIN.  ELSE
         B     USESTICK                     STACK NEW COMMAND.
         EJECT
USESUB   EQU   *                         SUBSTITUTE VALUE FOR SYMBOL :
         SPACE 1
         MVC   NAME,0(R8)                PICK UP SYMBOL.
         L     R15,EOOP                  POINT PAST OPERAND
         XR    R1,R1                     CLEAR FOR END
         SR    R15,R8                    FORM LENGTH OF REMAINDER
         BCTR  R15,0                        MINUS ONE.
         EX    R15,TRT1                  SCAN FOR CLOSING DLM
         LR    R14,R1                    FORM LENGTH
         SR    R14,R8                       OF SYMBOL AND
         BM    USECIERR                  ISSUE MSG 4 NO DLM.
         CH    R14,H8                       OF IF SYMBOL LENGTH
         BH    USECIERR                     EXCEEDS 8.
         LA    R15,4(R14)                SAVE MESSAGE
         STH   R15,USEUDNME                 LENGTH FOR LATER.
         BCTR  R14,0                     DECREMENT LENGTH FOR
         MVC   NAME,BLANKS                  MOVING SYMBOL IN
         MVC   NAME(*-*),0(R8)              BEHIND PAD.
         EX    R14,*-6                      OF BLANKS.
         LA    R8,2(R8,R14)              INCREMENT CURRENT SPOT.
         TR    NAME,USETRUC              CONVERT NAME TO UPPER.
         EX    R14,TRTTRAN               SCAN NAME FOR ALPHAMER
         BZ    USELKUP                   IF ALL ALPHAMER, PROCESS
         SPACE 1
USEIVERR LA    R1,USEIVMSG               FOR INVALID SYMBOLS,
         BAL   R14,USEPUTL                  ISSUE MSG 3 AND
         B     LEAVE                        RETURN.
         SPACE 1
USECIERR LA    R1,USECIMSG               FOR INVALID SYNTAX,
         BAL   R14,USEPUTL                  ISSUE MSG 4 AND
         B     LEAVE                        RETURN.
         EJECT
USELKUP  EQU   *                         FIND NAME IN SYMBOL LIST :
         SPACE 1
         LA    R1,NAME                   POINT AND CALL
         BAL   R14,SLELKUP                  SLE LOOKUP ROUTINE.
         B     *+L'*(R15)                DETERMINE STATUS :
         B     USEVALUE                     IF FOUND, PICK UP VALUE.
         B     USEPTGT                      IF NOT, PROMPT USER.
         SPACE 1
         ABEND 1000                         ABEND IF NO PCF/TSF.
         SPACE 2
USEVALUE EQU   *                         PLACE VALUE IN NEW COMMAND.
         SPACE 1
         LH    R15,SLEVLEN               GET LENGTH OF VALUE.
         BCTR  R15,0                     DECREMENT AND
         MVC   0(*-*,R7),SLEVALUE           MOVE INTO
         EX    R15,*-6                      NEW COMMAND.
         LA    R7,1(R7,R15)              INCREMENT CURRENT POSITION.
         LH    R6,USENEWL                INCREMENT LENGTH
         LA    R6,1(R6,R15)                 OF NEW
         STH   R6,USENEWL                   COMMAND.
         B     USEBUMP                   LOOP UNTIL END OF OPERAND.
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*       ISSUE MESSAGE WHEN A SYMBOL IS NOT IN SYMBOL LIST AND        *
*        PROMPT USER FOR A COMMAND, IF PROMPT MODE IN EFFECT.        *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
USEPTGT  EQU   *
         SPACE 1
         LA    R1,USEUDMSG
         BAL   R14,USEPUTL
         SPACE 1
         PUTGET                                                        +
               PARM=PUTGET,ECB=ECB,ECT=ECT,UPT=UPT,MF=(E,IOPLST),      +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +
               TERMGET=(EDIT,WAIT),                                    +
               OUTPUT=(USEUDOLD,SINGLE,PROMPT)
         SPACE 1
         CH    R15,H12
         BH    TSSRFAIL
         LTR   R15,R15
         BNZ   LEAVE
         EJECT
         L     R8,PGPBIBUF+PUTGET-PGPB   POINT TO INPUT BUFFER.
         LH    R6,0(R8)                  GET ITS LENGTH.
         BCTR  R6,0                      DECREMENT AND
         MVC   ISLWRK(*-*),0(R8)            SAVE
         EX    R6,*-6                       FOR STACKING.
         LA    R7,ISLWRK+1(R6)           POINT TO NEXT SPOT ON ISL.
         MVC   0(8,R7),BLANKS            PAD WITH BLANKS.
         LA    R6,8(R6)                  CONVERT LENGTH
         N     R6,DWDMASK                   TO DOUBLEWORD AND
         STH   R6,ISLWRK                    SAVE FOR STACK.
         LA    R7,ISLWRK(R6)             POINT TO NEXT SPOT ON ISL.
         SPACE 1
         L     R2,CBUFA                  POINT TO USE CBUF AND
         LH    R9,0(R2)                  GET ITS LENGTH.
         BCTR  R9,0                      DECREMENT AND
         MVC   0(*-*,R7),0(R2)              SAVE
         EX    R9,*-6                       FOR RESTACKING.
         LA    R15,1(R7,R9)              POINT TO END OF COMMAND.
         MVC   0(8,R15),BLANKS           PAD WITH BLANKS.
         LA    R9,8(R9)                  CONVERT LENGTH
         N     R9,DWDMASK                   TO DOUBLEWORD.
         STCM  R9,B'0011',0(R7)          SAVE FOR STACK.
         STCM  R9,B'1100',2(R7)          CLEAR OFFSET FOR SCAN.
         AR    R6,R9                     FORM TOTAL LENGTH AND
         STH   R6,USENEWL                   SAVE FOR LATER.
         LA    R9,LSDWRK                 BASE LSD.
         STCM  R6,B'0011',LSDTOTLN          SAVE TOTAL LENGTH.
         STCM  R6,B'1100',LSDRCLEN          CLEAR RECORD LENGTH.
         LH    R0,0(R8)                  GET LENGTH OF INPUT AGAIN.
         ICM   R0,B'1000',H1+1           INSERT SP 1 FOR FREEMAIN
         SPACE 1
         FREEMAIN R,LV=(0),A=(8)         RETURN STORAGE.
         SPACE 1
         B     USESTACK                  GO TO STACK SETUP CODE.
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*      BUILD LSD AND PLACE RESULTING COMMAND ON THE INPUT STACK      *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
USESTICK EQU   *                         SET UP TO STACK NEW CMD.
         SPACE 1
         LA    R9,LSDWRK                 BASE LSD.
         LH    R6,USENEWL                GET NEW CMD LENGTH.
         LA    R6,7(R6)                  CONVERT TO
         N     R6,DWDMASK                   DOUBLEWORD.
         STH   R6,LSDRCLEN               PLACE IN LSD RECORD LENGTH
         STH   R6,LSDTOTLN                  AND TOTAL LENGTH.
         SPACE 2
USESTACK EQU   *                         PREPARE FOR STACK.
         SPACE 1
         GETMAIN R,LV=16,SP=78       GET ACTUAL LSD.
         SPACE 1
         LR    R9,R1                     SET BASE.
         MVC   LSD(16),LSDWRK            FILL IN FROM MODEL.
         LH    R6,LSDTOTLN               GET TOTAL LENGTH
         LR    R0,R6                        AND SET UP
         ICM   R0,B'1000',SP78              REG 0 FOR GETMAIN.
         SPACE 1
         GETMAIN R,LV=(0)                SET ACTUAL ISL.
         SPACE 1
         ST    R1,LSDADATA               ANCHOR TO LSD AND
         ST    R1,LSDANEXT                  INIT STACK FOR GETLINE .
         BCTR  R6,0                      DECREMENT LENGTH AND
         MVC   0(*-*,R1),ISLWRK             COPY MODEL ISL
         EX    R6,*-6                       TO ACTUAL ISL.
         EJECT
         STACK PARM=STACK,ECT=ECT,ECB=ECB,UPT=UPT,MF=(E,IOPLST),       +
               STORAGE=(LSD,SOURCE)
         SPACE 1
         LTR   R15,R15
         BNZ   TSSRFAIL
         B     LEAVE
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*       PUTLINE ERROR MESSAGES FOR USE COMMAND SYMBOLIC NAMES        *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
USEPUTL  EQU   *
         SPACE 1
         ST    R14,USEPUTRT
         LA    R15,2
         ST    R15,OLD
         ST    R1,OLD+4
         LA    R15,USEUDNME
         ST    R15,OLD+8
         MVC   USEUDNME+4(L'NAME),NAME
         SPACE 1
         PUTLINE                                                       +
               PARM=PUTLINE,ECB=ECB,ECT=ECT,UPT=UPT,MF=(E,IOPLST),     +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +
               OUTPUT=(OLD,TERM,SINGLE,INFOR)
         SPACE 1
         L     R14,USEPUTRT
         LTR   R15,R15
         BZR   R14
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*      IF A TSO SERVICE ROUTINE FAILS, ISSUE MESSAGE AND RETURN      *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
TSSRFAIL EQU   *
         SPACE
         ST    R15,SARC
         SPACE
         LINK  EPLOC=IKJEFF19,DCB=0,SF=(E,LINK),MF=(E,GFPL),VL=1,      +
               PARAM=(0,SARC,0,TSSRCODE,PPLST,ECB)
         SPACE
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*     WHEN REQUESTED FUNCTIONS ARE COMPLETE, FREE PDL AND RETURN     *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
RETURN   EQU   *
         SPACE
         IKJRLSA ANS
         SPACE
LEAVE    EQU   *
         SPACE
         ICM   R2,B'0111',ECTRTCD
         LA    R2,0(R2)
         SPACE
         JVDLEAVE RC=(2)           RETURN, FORWARDING RETURN CODE.
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*              SLELKUP -  COMMON SLE LOOKUP ROUTINE.                 *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
SLELKUP  EQU   *
         SPACE
         LA    R15,8               PCF NOT PRESENT
*        ICM   R9,B'1111',ECTUSER        --- SVS PCF ADDRESS -------*
*        BZR   R14                                                  *
*        LA    R9,TSFSYMTB-PCFCVT(R9)                               *
         LA    R9,ECTUSER              NOW USED AS HEAD FOR TABLE
         LA    R15,4               NAME NOT IN SL.  R9-R10 BRACKET.
         SPACE 2
SLELKLP  EQU   *
         SPACE
         ICM   R10,B'1111',0(R9)        GET THE HEAD ADDRESS
         BZR   R14                      IF ZERO, NO ENTRIES IN TABLE
         CLC   SLENAME,0(R1)
         BHR   R14
         BE    SLELKEQ
         LR    R9,R10                    LINK TO NEXT ENTRY
         B     SLELKLP
         SPACE
SLELKEQ  XR    R15,R15
         BR    R14
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*                 DEFINE CONSTANTS AND PATCH AREAS                   *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
DROPCLA  DC    A(DROPCL)
SETPCLA  DC    A(SETPCL)
BLANKS   DC    CL08' '
LOW      DC    XL8'00'
IKJPARS  DC    CL8'IKJPARS'
IKJEFF19 DC    CL8'IKJEFF19'
DWDMASK  DC    X'FFFFFFF8'
VSMASK   DC    X'00000002'
X8       DC    AL1(08)
SP78     DC    AL1(78)
H1       DC    H'1'
H4       DC    H'4'
H8       DC    H'8'
H12      DC    H'12'
CMASK    DC    X'F021206B202020'
JMASK    DC    X'212020204B202020'
TMASK    DC    X'F021204B20204B20204B2020'
ACMASK   DC    X'21',C'SYSX-',X'2120202020'
ST       ST    R0,*-*
MVC      MVC   *-*(*-*,R11),0(R1)
TRT1     TRT   0(*-*,R8),USETRT1
PARSETRT TRT   0(*-*,R8),PARSETAB
TRTTRAN  TRT   NAME(*-*),USETRAN
         EJECT
SYSNTBL  DC    C'SYSB-60116'
         DC    C'SYSA-60149'
         DC    C'SYSC-60270'
         DC    C'SYSC-99999'
         SPACE
PARSETAB DC    AL1(0,3,3,4,4,5,0,1,2,0,5),229AL1(10),16AL1(0)
         ORG   PARSETAB+C'+'
         DC    AL1(1)
         ORG   PARSETAB+C'-'
         DC    AL1(2)
         ORG   PARSETAB+C'*'
         DC    AL1(3)
         ORG   PARSETAB+C'/'
         DC    AL1(4)
         ORG   PARSETAB+C'('
         DC    AL1(7)
         ORG   PARSETAB+C')'
         DC    AL1(8)
         ORG   PARSETAB+256
         SPACE 1
USETRUC  DC    256AL1(*-USETRUC)
         ORG   USETRUC+X'81'
         DC    C'ABCDEFGHI'
         ORG   USETRUC+X'91'
         DC    C'JKLMNOPQR'
         ORG   USETRUC+X'A2'
         DC    C'STUVWXYZ'
         ORG   USETRUC+256
         SPACE 1
USETRAN  DC    256AL1(1)
         ORG   USETRAN+C'A'
         DC    9AL1(0)
         ORG   USETRAN+C'J'
         DC    9AL1(0)
         ORG   USETRAN+C'S'
         DC    8AL1(0)
         ORG   USETRAN+C'0'
         DC    16AL1(0)
         EJECT
USEUDMSG MSG   'MMUSE001 SYMBOLIC NAME  UNDEFINED  ',0
USEUDNAM MSG   '12345678',23
USEUDPRM MSG   'MMUSE002 ENTER DEFINITION',0
USEIVMSG MSG   'MMUSE003 SYMBOLIC NAME  INVALID',0
USECIMSG MSG   'MMUSE004 NO DLM AFTER "". COMMAND IGNORED.',0
USEUDOLD DC    A(1,USEUDPRM)
         SPACE
         PRINT DATA
         LTORG
PATCH    DC    64S(*)
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*   DECLARE DYNAMIC WORK AREA AND FORMAT OF SYMBOL LIST ENTRY (SLE)  *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
TSFSLE   DSECT   ,  TSF SYMBOL LIST ELEMENT
         SPACE
SLELINK  DS    A          LINK TO NEXT SLE OR NULL
SLEELEN  DS    H          LENGTH OF SLE (FOR FREEMAIN)
SLEVLEN  DS    H          LENGTH OF VALUE
SLENAME  DS    CL8        SYMBOL NAME
SLEVALUE DS    0CL256     SYMBOL VALUE
         SPACE 2
DSA      DSECT   ,  DYNAMIC WORK AREA
         SPACE
SSA      DS    18F
UWA      DS    16F
ANS      DS    A
ECB      DS    F
EOOP     DS    A
CBUFA    DS    A
USEPUTRT DS    A
OLD      DS    16F
SARC     DS    F
VALSTRT  DS    F
VALLNTH  DS    F
VALADDR  DS    F
VALLEN   DS    H
LENSLE   DS    H
TSSRCODE DS    H
STIN     DS    H
STBD     DS    H
MVCIN    DS    0XL6,H
MVCBD    DS    H
MVCFR    DS    H
         SPACE
NAME     DS    CL8
PAD      DS    C
USEDLM   DS    C
USENEWL  DS    H
DWD      DS    D
ISLWRK   DS    0D,2CL256
USETRT1  DS    XL256
USEUDNME DS    XL12
         SPACE
PLIST    DS    0A
LSDWRK   DS    16F
         EJECT
PUTLINE  PUTLINE MF=L
         SPACE
PUTGET   PUTGET  MF=L
         SPACE
STACK    STACK   MF=L
         SPACE
LINK     LINK    SF=L
         SPACE
EXTRACT  EXTRACT MF=L
         EJECT
IOPLST   CALL   ,(UPT,ECT,ECB,PGPB),MF=L
         SPACE 1
PPLST    CALL   ,(UPT,ECT,ECB,DROPCL,ANS,*-*,UWA),MF=L
         SPACE 1
GFPL     CALL   ,(0,SARC,0,TSSRCODE,PPLST,ECB),MF=L
         SPACE 2
DSAEND   DS    0D
         SPACE 2
         ORG   PLIST
PLISTS   DS    0XL(DSAEND-PLIST)
         SPACE 2
DSALEN   EQU   (DSAEND-DSA)
         EJECT
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
*                                                                    *
*         DECLARE SYSTEM CONTROL BLOCKS USED BY TSF COMMANDS         *
*                                                                    *
*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
         SPACE 2
         IKJCPPL
         EJECT
         IKJUPT
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IKJSTPB
         EJECT
         IKJPGPB
         EJECT
         IKJPTPB
         EJECT
         IKJIOPL
         EJECT
         IKJLSD
         EJECT
*CVT     DSECT
*        SPACE
*        CVT
         SPACE 3
*        PCFCVT
         EJECT
*TSFSYMTB EQU   PCFMFDCB
*TSFSYMTB EQU  PCFCMDAT
         JVDEQU
         SPACE
         END
