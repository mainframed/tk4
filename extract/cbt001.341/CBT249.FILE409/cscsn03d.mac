         TITLE 'IEESN03D -   #T  DISPLAY TIOT INFORMATION'
***********************************************************************
***********************************************************************
***                                                                 ***
***                                                                 ***
***                                                                 ***
***                     COMMAND  SUB-SYSTEM                         ***
***                  -------------------------                      ***
***                                                                 ***
***                                                                 ***
***       IEESN03D -       #T  DISPLAY TIOT INFORMATION             ***
***                                                                 ***
***       VERSION -        1.3                                      ***
***                                                                 ***
***       MVS LEVEL -      BASE LEVEL TO MVS/SP1.3                  ***
***                                                                 ***
***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***
***                        01/11/82  RLL-CHANGE ESTAE PARM LENGTH   ***
***                        10/05/82  AXC-CBT ADD 3380 AND 3375      ***
***                                  SUPPORT                        ***
***                        01/04/84  ECS-BFG CORRECTION TO GET THE  ***
***                                  RIGHT ASID/TCB FOR XM PROCESS  ***
***                                  DURING POST OF WAITING TASK.   ***
***                                                                 ***
***                                                                 ***
***                                                                 ***
***********************************************************************
***********************************************************************
         EJECT
IEESN03D CSECT
         LR    R12,R15
         USING IEESN03D,R12
         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL
         GETMAIN R,LV=(0)
         LR    R13,R1
         USING WORK,R13
         STM   R14,R12,SAVRET      SAVE RETURN ADDR
         XC    TYPE,TYPE
         ST    R2,XSASAVE          SAVE XSA ADDR
         LA    R0,WTOLIST          POINT TO START OF CLEAR
         LA    R1,OUTAREA-WTOLIST   AND SET THE LENGTH
         SR    R15,R15        CLEAR LENGTH 2
         MVCL  R0,R14         CLEAR THE AREA
         LA    R15,500
         LA    R1,OUTAREA-48
INITOUT  LA    R1,48(0,R1)
         XC    0(4,R1),0(R1)
         BCT   R15,INITOUT
         USING XSA,R2
         LR    R10,R13             LOAD SAVE AREA ADDR
         B     ESTAEBYP            BYPASS ESTAE LIST
ESTAEOVL ESTAE STAEXIT,CT,MF=L
ESTAEBYP MVC   ESTAELST(20),ESTAEOVL                  ****(RLL)****
         LA    R1,ESTAELST
         ESTAE PARAM=(10),MF=(E,(1))
         L     R3,XAL              LOAD LIST POINTER
         LA    R3,0(0,R3)          CLEAR HIGH ORDER
         LTR   R3,R3               PARM EXIST
         BZ    PARMERR             NO, ERROR
         CLC   4(2,R3),=C',L' IS THIS A LONG REQUEST
         BNE   *+12           NO
         MVI   TYPE,C'L'      SET LONG OUTPUT
         LA    R3,1(0,R3)     INCR TO ASID
         MVC   ASIDCH(4),0(R3)
         LA    R4,4           SET MAX LENGTH
         BAL   R11,PARMCVT    CONVERT HEX NUMBER
         STH   R1,ASID        SAVE THE TARGET ASID
         LH    R1,ASID        GET THE ASID
         LTR   R1,R1          IS IT ZERO
         BZ    PARMERR        YES, ERROR
         L     R3,CVTPTR      POINT TO CVT
         USING CVTMAP,R3
         L     R2,CVTTCBP     GO GET MY ASCB ADDR
*        MVC   MYASCB,8(R2)   ***REPLACED***
*        MVC   MYTCB,0(R2)    ***REPLACED***
         MVC   MYASCB,12(R2)  SAVE ADDR OF ASCB FOR POST         ECS
         MVC   MYTCB,4(R2)    SAVE THE TCB ADDRESS FOR STIMER    ECS
         L     R2,CVTASVT     POINT AT ASVT
         USING ASVT,R2
         C     R1,ASVTMAXU    IS ASID TOO BIG
         BH    ASNERR         YES
         SLL   R1,2           ASID*4
         LA    R1,ASVTENTY-4(R1)  POINT AT DESIRED ENTRY
         MVC   TOASCB,0(R1)   MOVE THE ASCB ADDR IF ANY
         TM    TOASCB,ASVTAVAL IS THIS ASCB ADDR OR AVAILABLE
         BO    ASNERR         ASID DOES NOT EXIST
         DROP  R2,R3
         L     R2,TOASCB      POINT AT ASCB
         USING ASCB,R2
         TM    ASCBRCTF,ASCBOUT   IS ASCB SWAPPED OUT
         BO    SWAPOUT
         CLC   MYASCB,TOASCB  IS THE ASCB THE MS
         BE    DOSUBR         IF SO THEN USE SUBROUTINE
*
*        NOW INITIALIZE THE SRB
*
         LA    R3,SRBAREA     POINT AT THE SRB
         USING SRBSECT,R3
         XC    SRBAREA,SRBAREA  CLEAR THE SRB
         MVC   SRBID,=C'SRB '  SET EBCDIC ID
         MVC   SRBASCB,TOASCB SET ASCB ADDR TO RUN IN
         LA    R1,D#SRBCD     POINT AT SRB CODE
         ST    R1,SRBEP       SAVE ENTRY POINT
         ST    R13,SRBPARM    SAVE PARM ADDR AS WORK AREA
         LA    R1,D#RMTR      SET ADDR OF RESOURCE MGR TERMINATION
         ST    R1,SRBRMTR     AND SAVE IT
         MVC   SRBPASID,ASID  SET ASID OF DESIRED ASCB
         DROP  R3
         EJECT
*
*        SCHEDULE SRB AND AWAIT COMPLETION
*
         XC    ECB,ECB        CLEAR DONE ECB
         XC    ECB2,ECB2      CLEAR STIMER ECB
         LA    R1,ECB         NOW SETUP THE ECBLIST
         ST    R1,ECBLIST
         LA    R1,ECB2
         ST    R1,ECBLIST+4
         MVI   ECBLIST+4,X'80'
         L     R2,MYTCB       POINT AT TCB
         L     R2,0(0,R2)     POINT AT RB
         USING RBBASIC,R2
         ST    R1,RBEXSAVE+16 SAVE ECB2 ADDR IN RBXSA
         DROP  R2
         STIMER  REAL,D#STX,BINTVL==A(60*100) WAIT 1 MINUTE
         SCHEDULE  SRB=(R3),SCOPE=GLOBAL
         WAIT  ECBLIST=ECBLIST
         TTIMER CANCEL        CANCEL THE TIMER IF STILL EXISTS
         B     GOTBACK        GO AND CHECK COMPLETION
         SPACE 5
*
*        USE THE SRB CODE AS A SUBROUTINE
*
DOSUBR   OI    FLAG1,FG1SUBR  SET FLAG FOR SUBROUTINE
         LA    R1,DMYPRMS     SETUP DUMMY FRR PARMS
         ST    R1,FRRPRMS
         XC    DMYPRMS,DMYPRMS
         LR    R1,R13         SET UP PARM REGISTER
         LA    R15,D#SRBCD    SET ENTRY POINT ADDR
         LA    R14,GOTBACK    SET RETURN ADDRESS
         BR    R15            GO DO IT
         SPACE 5
*
*        THIS IS THE STIMER EXIT.  ITS PURPOSE IS TO POST THE
*        ECB AT ECB2 AND WAKE UP COMM TASK IF THE SRB FAILS
*        TO DO THIS WE MUST FIND THE ADDRESS OF THE ECB WHICH IS
*        SAVED IN THE XSA AREA OF THE SVRB IN COMM TASK
*
         USING *,R12
D#STX    SAVE  (14,12)
         LR    R12,R15        SET BAE REGISTER
         L     R3,CVTPTR
         L     R3,0(R3)       POINT AT TCB WORDS
         L     R3,0(R3)       POINT AT MY TCB
         L     R3,0(R3)       POINT AT MY RB
         USING RBBASIC-4,R3
D#STX1   SL    R3,=F'4'       POINT BACK TO LOOK AT INTC
         CLI   3(R3),X'01'    LOOK FOR WAIT SVC
         BE    D#STX2         IF FOUND THEN EXIT
         TM    XSTAB2,RBTCBNXT     TEST TCB FLAG
         BO    D#STX3         IF NOT FOUND PROPER RB
         L     R3,RBLINK      POINT AT PREVIOUS RB
         B     D#STX1         TRY AGAIN
D#STX2   L     R2,RBEXSAVE+16 GET ADDR OF ECB
         POST  (R2)         POST THE TIMER ECB
         RETURN (14,12)
         DROP  R12,R3
*
*        IF WE CAN NOT FIND THE RB THEN DUMP
*
D#STX3   DC    H'0'
         USING IEESN03D,R12
         TITLE 'IEESN03D  #T COMMAND  --  PERFORM THE DUMP FUNCTION'
*
*        WE HAVE RETURNED FOR THE SRB FUNCTION NOW CHECK THE RESULTS
*        AND IF GOOD THEN DUMP THE PROPER PART OF MEMORY
*
GOTBACK  TM    FLAG1,FG1SUBR  ARE WE IN SUBROUTINE MOVE
         BO    GOTBK2         IF SO THEN SKIP SOME TESTS
         TM    FLAG1,FG1SRDN  HAS THE SRB COMPLETED
         BZ    SRBFAIL        IF NOT THEN TIMER CAUGHT IT
         TM    FLAG2,FG2PSTR  DID XMPOST HAVE ERROR
         BO    XMPTERR        IF SO THEN MESSGAE
         TM    FLAG2,FG2PURG  WAS SRB PURGED
         BO    SRBPGERR       IF SO THEN TELL ABOUT IT
GOTBK2   EQU   *
         SPACE 5
*
*        TIO SEARCH CODE FOLLOWS
*
FORMAT   L     R2,XSASAVE     POINT AT XSA
         LA    R3,OUTAREA
         USING XSA,R2
         MVC   WTOLIST(4),=X'00340100'  FILL IN WTO LIST
         SPACE 1
FORMAT1  MVC   WTOLIST+4(48),0(R3)      FILL IN WTO LIST
         LA    R1,WTOLIST          LOAD WTOLIST ADDR
         SR    R0,R0
         IC    R0,XAU                 MCS ID
         SVC   35                  ISSUE WTO
         LA    R3,48(0,R3)
         CLI   0(R3),X'00'         END OF OUTPUT
         BNE   FORMAT1             NO
         B     RETURN
         TITLE 'IEESN03D  #T COMMAND  --  CHARACTER TO HEX CONVERTOR'
PARMCVT  XR    R0,R0
         LR    R1,R0          CLEAR SOME REGISTERS
         LR    R5,R4          SAVE DESIRED LENGTH IN R5
         SPACE 2
PARMCVT0 CLI   0(R3),C','     CHECK FOR DELIMITERS
         BE    PARMCVTD       IF ANY DELIMITER IS FOUND
         CLI   0(R3),C' '     THEN WE AREA DONE
         BE    PARMCVTD
         CLI   0(R3),C'/'
         BE    PARMCVTD
         CLI   0(R3),C'A'     NOW CHECK FOR HEX CHARACTERS
         BL    ERROR          AND IF INVALID THEN FLAG AS ERROR
         CLI   0(R3),C'F'
         BH    PARMCVT1       NOW TRY NUMBERICS
         NI    0(R3),X'0F'    TURN OFF ZONE
         IC    R0,0(R3)       GET THE CHARACTER
         AH    R0,=H'9'       AND ADJUST TO PROPER VALUE
         B     PARMCVT2
PARMCVT1 CLI   0(R3),C'0'     NOW SEE IF NUMERIC
         BL    ERROR          IF NOT THEN ERROR
         CLI   0(R3),C'9'     AND TRY HIGH VALUE
         BH    ERROR
         NI    0(R3),X'0F'    TURN OFF ZONE
         IC    R0,0(R3)       GET DIGIT
PARMCVT2 SLL   R1,4           CLEAR AREA
         OR    R1,R0          PUT IN NEW DIGIT
         LA    R3,1(R3)       POINT PAST
         BCT   R4,PARMCVT0    TRY AGAIN TILL EMPTY
         BR    R11            ALL DONE AND HAD EXPECTED NUMBER OF CHARS
         SPACE 3
PARMCVTD DS    0H             THE HEX NUMBER TERMINATED BEFORE FULL
         CH    R5,=H'8'       WAS A FULL WORD DESIRED
         BNER  R11            OUT IF NOT
         B     ERROR          FORCE FULLWORD TO BE PRESENT
         TITLE 'IEESN03D  #T COMMAND  --  ERROR ROUTINES'
         EJECT
         USING *,R15
         USING XSA,R2
STAEXIT  CH    R0,=H'12'           SDWA GOTTEN
         BE    STAEXIT1            NO, FORCE RETURN
         L     R2,=A(STAERTRY)     LOAD RETRY ADDR
         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO
         SPACE 3
STAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR
         LA    R15,4
         BR    R14
         DROP  R15
         SPACE 3
         USING *,R15
STAERTRY L     R12,=A(IEESN03D)    LOAD ENTRY POINT ADDR
         LR    R13,R1              RELOAD WORK AREA ADDR
         DROP  R15
         LA    R1,STAEMSG          ADDRESSING ERROR
         L     R2,XSASAVE          RELOAD XSA ADDR
         SR    R0,R0
         IC    R0,XAU              INSERT MCS ID
         SVC   35                  ISSUE WTO
         B     RETURN
MSGRTN   L     R2,XSASAVE     RELOAD XSA ADDR
         USING XSA,R2
         SR    R0,R0
         IC    R0,XAU              INSERT MCS ID
         SVC   35                  ISSUE WTO
         DROP  R2
         B     RETURN
         SPACE 3
ERROR    LA    R1,ERRMSG           PARM ERROR
         B     MSGRTN              GO ISSUE WTO
         SPACE 3
ASNERR   LA    R1,ASNFND           ASID NOT FOUND
         B     MSGRTN              GO ISSUE WTO
         SPACE 3
PARMERR  LA    R1,ERRMSG           MVS
         B     MSGRTN              GO ISSUE WTO
         SPACE 3
SWAPOUT  LA    R1,SWAPMSG     ADDRESS SPACE SWAPPED OUT
         B     MSGRTN
         SPACE 3
DISTERR  LA    R1,DISTMSG     ERROR OCCURRED IN SRB MODE
         B     MSGRTN
         SPACE 3
SRBFAIL  DS    0H             SRB FAILED TO POST SO DUMP
         L     R2,XSASAVE     RELOAD XSA ADDR
         USING XSA,R2
         LA    R1,SRBFMSG     POINT AT MSG
         SR    R0,R0
         IC    R0,XAU              INSERT MCS ID
         SVC   35                  ISSUE WTO
         DC    H'0'
         SPACE 3
XMPTERR  LA    R1,XMPTMSG     POINT AT MSG
         B     MSGRTN
         SPACE 3
SRBPGERR LA    R1,PURGMSG     SRB WAS PURGED BEFORE PROCESS
         B     MSGRTN
RETURN   EQU   *
         ESTAE 0                                      ****(RLL)****
         L     R0,SIZE
         LR    R1,R13              LOAD GETMAIN AREA ADDR
         L     R14,SAVRET          RETURN ADDR
         FREEMAIN R,LV=(0),A=(1)
         SR    R15,R15
         BR    R14
         EJECT
         LTORG
         DS    0F
SIZE     DC    AL1(241),AL3(WORKEND-WORKSTRT)
         SPACE 3
         DS    0F
STAEMSG  DC    X'00360100'
         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS'
         SPACE 3
         DS    0F
SRBFMSG  DC    X'00280100'
         DC    CL36'SRB FAILED TO POST '
         SPACE 3
         DS    0F
ERRMSG   DC    X'00280100'
         DC    CL36'PARAMETER ERROR'
         SPACE 3
         DS    0F
ASNFND   DC    X'00280100'
         DC    CL36'ADDRESS SPACE SPECIFIED NOT FOUND'
         SPACE 3
         DS    0F
SWAPMSG  DC    X'00360100'
         DC    CL50'ADDRESS SPACE REQUESTED IS SWAPPED OUT'
         SPACE 3
         DS    0F
DISTMSG  DC    X'00360100'
         DC    CL50'DISASTEROUS ERROR OCCURED IN SRB MODE'
         SPACE 3
         DS    0F
XMPTMSG  DC    X'00360100'
         DC    CL50'CROSS-MEMORY POST FAILED'
         SPACE 3
         DS    0F
PURGMSG  DC    X'00360100'
         DC    CL50'ADDRESS SPACE PURGING SRBS'
         DROP  R12,R13
         TITLE 'IEESN03D  #T COMMAND  --  SRB MODE CODE'
D#SRBCD  DS    0D
*
*        THIS CODE PERFORMS THE FOLLOWING FUNCTIONS
*              1 ESTABLISHES AN FRR FOR ERROR RECOVERY
*              2 PASSES BACK THE FORMATTED DATA FOR WTO
*              3 CROSS-MEMORY POST THE MAIN COMMAND PROCESSOR
*
         USING WORK,R8
         USING D#SRBCD,R7
         LR    R8,R1          SET THE MAIN PARM DSECT
         LR    R7,R15         SET THE BASE REGISTER
         ST    R14,ASRBRTN    SAVE RETURN ADDR
         TM    FLAG1,FG1SUBR  IS THIS A SUBROUTINE CALL
         BO    D#SRB1         YES SO SKIP FRR
         LA    R5,D#FRRCD     POINT AT FRR CODE
         SETFRR  A,FRRAD=(R5),WRKREGS=(2,3),PARMAD=(R4)
         ST    R4,FRRPRMS     SAVE ADDR OF FRRPRMS
*
*        NOW INIT THE FRR PARM AREA AND VALIDATE THE INPUT ADDR
*
D#SRB1   L     R9,FRRPRMS     ACCESS THE 6 WORK PARM AREA
         STM   R7,R8,0(R9)    SAVE BASE AND WORK REGS
         LA    R10,OUTAREA    OUTPUT AREA
         L     R4,16          CVT
         L     R4,0(0,R4)     TCB WORDS
         L     R4,12(0,R4)    CURRENT ASCB
         L     R4,108(0,R4)   ASXB
         L     R4,8(0,R4)     LAST TCB ON CHAIN
         L     R1,180(0,R4)   JSCB ADDR
         LA    R1,0(0,R1)
         L     R6,12(0,R4)    TIOT
         L     R4,164(0,R4)   TCT
         LA    R4,0(0,R4)
         LTR   R4,R4          TCT PRESENT
         BZ    *+12           NO
         L     R4,12(0,R4)    TCTTIO
         LA    R4,0(0,R4)
         MVC   0(48,R10),=CL48' '
         MVC   0(4,R10),ASIDCH ASID
         MVC   6(8,R10),0(R6) JOBNAME
         MVC   16(8,R10),8(R6) STEPNAME
         MVC   26(8,R10),16(R6) PROCNAME
         LTR   R1,R1          JSCB PRESENT
         BZ    D#SRB1B        NO
         L     R1,260(0,R1)   JCT ADDR
         LA    R1,0(0,R1)
         LTR   R1,R1          JCT PRESENT
         BZ    D#SRB1B        NO
         L     R1,56(0,R1)    ACT ADDR
         SRL   R1,8
         LTR   R1,R1          ACT PRESENT
         BZ    D#SRB1B        NO
         LA    R10,48(0,R10)
         MVC   0(20,R10),24(R1)  PROGRAMMER NAME
         LA    R10,48(0,R10)
         MVC   0(48,R10),48(R1)  ACCT FIELDS
         LA    R14,0(0,R10)   1ST FIELD
         SR    R1,R1
         IC    R1,0(0,R14)    FIELD LENGTH
         MVI   0(R14),C'('
         EJECT
D#SRB1A  LA    R14,1(R1,R14)  NEXT FIELD
         IC    R1,0(0,R14)    FIELD LENGTH
         MVI   0(R14),C','
         LTR   R1,R1          SKIPPED FIELD
         BNZ   D#SRB1A        NO
         CLC   1(4,R14),=F'0' END OF FIELDS
         BNE   D#SRB1A        NO
         MVI   0(R14),C')'
         SPACE 1
D#SRB1B  LTR   R4,R4          TCT PRESENT
         BZ    NOTCTIO        NO
         LA    R5,8(0,R4)     TCTTIO LOOKUP
         SPACE 1
D#SRB2   LA    R10,48(0,R10)  NEXT OUTAREA ADDR
         MVC   0(48,R10),=CL48' '
         MVI   0(R10),C'-'
         LH    R14,0(0,R5)    DD ENTRY TIOT OFFSET
         LH    R15,2(0,R5)    DD ENTRY TCTTIO COUNT ENTRY OFFSET
         LA    R14,0(R14,R6)  DD ENTRY ADDRESS
         LA    R15,0(R15,R4)  TCTTIO COUNT ENTRY ADDRESS
         MVC   2(8,R10),4(R14) DD NAME
         L     R1,16(0,R14)   UCB ADDR
         LA    R1,0(0,R1)
         LTR   R1,R1          ZERO UCB ADDR
         BZ    D#SRB2B        YES
         MVC   12(3,R10),13(R1) UNIT ADDR
         TM    18(R1),X'A0'   DASD OR TAPE
         BZ    D#SRB2A        NO, NO VOLSER
         MVC   24(6,R10),28(R1) VOLSER
         SPACE 1
D#SRB2A  LA    R9,DEVTAB
         SPACE 1
D#SRB3   CLC   0(2,R9),18(R1) DEVTYPE MATCH
         BE    D#SRB4         YES
         LA    R9,8(0,R9)
         CLI   0(R9),X'00'    END OF TABLE
         BNE   D#SRB3         NO
         SPACE 1
D#SRB2B  MVC   16(6,R10),=CL6'*JES*'
         TM    3(R14),X'82'   JES2 DATASET
         BNZ   D#SRB5         YES
         MVC   16(6,R10),=CL6'*TERM*'
         TM    3(R14),X'20'   TERMINAL DATASET
         BNZ   D#SRB5         YES
         MVC   16(6,R10),=CL6'DYNAM'
         TM    3(R14),X'10'   DD DYNAM DATASET
         BNZ   D#SRB5         YES
         MVC   16(6,R10),=CL6'*UNK*'
         B     D#SRB5
         SPACE 1
D#SRB4   MVC   16(6,R10),2(R9) DEVTYPE
         TM    18(R1),X'20'   DASD
         BZ    D#SRB5         NO
         TM    17(R1),X'08'   VIRTUAL VOLUME
         BZ    D#SRB5         NO
         MVI   20(R10),C'V'
         EJECT
D#SRB5   L     R1,4(0,R15)    EXCP COUNT
         CVD   R1,DOUBLE
         MVC   32(12,R10),=X'402020206B2020206B202120'
         ED    32(12,R10),DOUBLE+3
         L     R1,12(0,R14)   JFCB ADDR
         SRL   R1,8           SHIFT OVER
         LTR   R1,R1          JFCB ADDR PRESENT
         BZ    D#SRBX         NO
         LA    R1,16(0,R1)         POINT TO REAL JFCB START
         CLI   TYPE,C'L'      LONG DISPLAY
         BNE   D#SRBX         NO, CONTINUE
         LA    R10,48(0,R10)
         BAL   R11,DDFORM     FORMAT DCB INFO
         SPACE 1
D#SRBX   LA    R5,4(0,R5)     NEXT TCTIO LOOKUP ENTRY
         CLC   0(4,R5),=F'0'  END OF ENTRIES
         BNE   D#SRB2         NO
         B     FRRRTY
         EJECT
NOTCTIO  LA    R10,48(0,R10)
         MVC   0(48,R10),=CL48'NO EXCP COUNTS AVAILABLE FOR THIS JOB'
         LA    R6,24(0,R6)    DD ENTRIES
         SPACE 1
NOTCT    LA    R10,48(0,R10)
         MVC   0(48,R10),=CL48' '
         MVI   0(R10),C'-'
         SR    R5,R5
         IC    R5,0(0,R6)     DD ENTRY LENGTH
         MVC   2(8,R10),4(R6) DD NAME
         SR    R1,R1
         L     R1,16(0,R6)    UCB ADDR
         LA    R1,0(0,R1)
         LTR   R1,R1          ZERO
         BZ    NOTCT2A        YES
         MVC   12(3,R10),13(R1) UNIT ADDR
         TM    18(R1),X'A0'   DASD OR TAPE
         BZ    NOTCT1         NO, NO VOLSER
         MVC   24(6,R10),28(R1) VOLSER
         B     NOTCT1
         SPACE 1
NOTCT1   LA    R9,DEVTAB
         SPACE 1
NOTCT2   CLC   0(2,R9),18(R1) DEVTYPE MATCH
         BE    NOTCT3         YES
         LA    R9,8(0,R9)
         CLI   0(R9),X'00'    END OF TABLE
         BNE   NOTCT2         NO
         SPACE 1
NOTCT2A  MVC   16(6,R10),=CL6'*JES*'
         TM    3(R6),X'82'   JES2 DATASET
         BNZ   NOTCT4         YES
         MVC   16(6,R10),=CL6'*TERM*'
         TM    3(R6),X'20'   TERMINAL DATASET
         BNZ   NOTCT4         YES
         MVC   16(6,R10),=CL6'DYNAM'
         TM    3(R6),X'10'   DD DYNAM DATASET
         BNZ   NOTCT4         YES
         MVC   16(6,R10),=CL6'*UNK*'
         B     NOTCT4
         SPACE 1
NOTCT3   MVC   16(6,R10),2(R9) DEVTYPE
         TM    18(R1),X'20'   DASD
         BZ    NOTCT4         NO
         TM    17(R1),X'08'   VIRTUAL VOLUME
         BZ    NOTCT4         NO
         MVI   20(R10),C'V'
         SPACE 1
NOTCT4   L     R1,12(0,R6)    JFCB ADDR
         SRL   R1,8           SHIFT OVER
         LTR   R1,R1          JFCB ADDR PRESENT
         BZ    NOTCTX         NO
         LA    R1,16(0,R1)         POINT TO REAL JFCB START
         CLI   TYPE,C'L'      LONG DISPLAY
         BNE   NOTCTX         NO, CONTINUE
         LA    R10,48(0,R10)
         BAL   R11,DDFORM     FORMAT DCB INFO
         SPACE 1
NOTCTX   LA    R6,0(R5,R6)    NEXT DD ENTRY
         CLC   0(4,R6),=F'0'  END OF ENTRIES
         BNE   NOTCT          NO
         B     FRRRTY
         EJECT
DDFORM   MVC   2(44,R10),0(R1)     MOVE DSNAME TO MSG
         MVC   0(2,R10),=CL2' '
         MVC   46(2,R10),=CL2' '
         LA    R10,48(0,R10)
         MVC   0(2,R10),=CL2' '
         MVC   2(46,R10),DCBMSG    DCB DUMMY MSG
         LH    R14,104(0,R1)       LRECL
         CVD   R14,DOUBLE
         UNPK  29(5,R10),DOUBLE+5(3)
         OI    33(R10),X'F0'
         LH    R14,102(0,R1)       BLKSIZE
         CVD   R14,DOUBLE
         UNPK  42(5,R10),DOUBLE+5(3)
         OI    46(R10),X'F0'
         SPACE 3
DDFORM2  MVC   7(2,R10),=C'PS'
         TM    98(R1),X'40'        PS
         BO    DDFORM3
         MVC   7(2,R10),=C'PO'
         TM    98(R1),X'02'        PO
         BO    DDFORM3
         MVC   7(2,R10),=C'IS'
         TM    98(R1),X'80'        IS
         BO    DDFORM3
         MVC   7(2,R10),=C'DA'
         TM    98(R1),X'20'        DA
         BO    DDFORM3
         MVC   7(2,R10),=C'CX'
         TM    98(R1),X'10'        CX
         BO    DDFORM3
         MVC   7(2,R10),=C'AM'
         TM    98(R1),X'08'        AMB
         BO    DDFORM3
         MVC   7(2,R10),=C'TX'
         TM    99(R1),X'40'        TX
         BO    DDFORM3
         MVC   7(2,R10),=C'TQ'
         TM    99(R1),X'20'        TQ
         BO    DDFORM3
         MVC   7(2,R10),=C'TR'
         TM    99(R1),X'04'        TR
         BO    DDFORM3
         MVC   7(2,R10),=C'AC'
         TM    99(R1),X'08'        ACB
         BO    DDFORM3
         XC    0(4,R10),0(R10)
         S     R10,=F'48'
         BR    R11
         EJECT
DDFORM3  MVC   17(2,R10),=C'**'    SET DEFAULT RECFM
         TM    100(R1),X'C0'
         BZ    DDFORM4             NO RECFM
         MVI   17(R10),C'U'        UNDEFINED
         BO    DDFORM4
         MVI   17(R10),C'F'        FIXED
         TM    100(R1),X'80'
         BO    DDFORM4
         MVI   17(R10),C'V'        VARIABLE
         SPACE 3
DDFORM4  LA    R14,18(0,R10)       POINT TO NEXT BYTE
         TM    100(R1),X'10'       BLOCKED
         BZ    DDFORM5             NO
         MVI   0(R14),C'B'
         LA    R14,1(0,R14)
         SPACE 3
DDFORM5  MVI   0(R14),C'S'
         TM    100(R1),X'08'       SPANNED
         BO    DDFORM9
         MVI   0(R14),C'A'
         TM    100(R1),X'04'       ASA
         BO    DDFORM9
         MVI   0(R14),C'M'
         TM    100(R1),X'02'       MACHINE
         BO    DDFORM9
         MVI   0(R14),C' '
         SPACE 1
DDFORM9  BR    R11
         EJECT
FRRRTY   XC    0(4,R10),0(R10) END OF OUTPUT
         TM    FLAG1,FG1SUBR  IS THIS SUBROUTINE MODE
         BO    D#EXIT         IF SO THEN EXIT
         SETFRR  D,WRKREGS=(2,3)
FRRPOST  L     R10,=A(X'40000000') SET CODE FOR POST
         LR    R9,R8          SAVE WORK POINTER IN SAFE REG
         LA    R11,ECB        ADDR OF ECB TO POST
         ICM   R11,8,=X'80'   FLAG AS XMPOST
         LA    R12,D#POSTR    SET POST ERROR RETURN
         L     R13,MYASCB     ASCB TO POST
         L     R15,CVTPTR     POINT AT CVT
         L     R15,CVT0PT01-CVTMAP(R15)    GET POST ENTRY POINTR
         BALR  R14,R15        GO DO POST
         DROP  R7             KILL MAIN ADDRESS
         USING *,R14          SET TEMP BASE
D#PRTN   LR    R8,R9          RESET BASE OF WORK
         SL    R14,=A(D#PRTN-D#SRBCD)  NOW HAVE CORRECTED BASE
         LR    R7,R14         SET TO PROPER REG
         DROP  R14
         USING D#SRBCD,R7     RESET MAIN BASE
         OI    FLAG1,FG1SRDN  FLAG SRB AS COMPLETED
D#EXIT   L     R14,ASRBRTN    RESTORE RETURN ADDR
         BR    R14            EXIT
         SPACE 5
*
*        POST ERROR ROUTINE  .. FLAG ERROR AND LET TIMER
*        WAKE UP COMM TASK
*
D#POSTR  LR    R8,R9          RESET WORK BASE
         OI    FLAG2,FG2PSTR  FLAG POST ERROR
         BR    R14            RETURN TO D#PRTN
         TITLE 'IEESN03D  #T COMMAND  --  FRR FOR THE SRB MODE'
D#FRRCD  DS    0D
         L     R2,0(R1)       POINT AT PARM AREA
         LM    R7,R8,0(R2)    SET BASE REGS
         TM    0(R2),X'80'    ARE WE IN VALIDATION
         BZ    D#FRR1         NOPE
*
*        VALIDATION ERROR
*
         OI    FLAG2,FG2IVLD  SET FLAG FOR MESSAGE
         SETRP RECORD=NO,RC=4,RETADDR=FRRRTY,REGS,DUMP=NO,             X
               RETREGS=YES,FRESDWA=YES
         BR    R14            EXIT
         SPACE 5
*
*        ALL OTHER ERRORS
*
D#FRR1   OI    FLAG2,FG2ERRR  SET FLAG FOR MESSAGES
         LA    R10,OUTAREA-48
         SPACE 1
D#FRR2   LA    R10,48(0,R10)
         CLC   0(4,R10),=F'0'        END OF OUTPUT
         BNE   D#FRR2
         MVC   0(48,R10),=CL48'ERROR ENCOUNTERED IN CONTROL BLOCKS'
         SETRP RECORD=YES,RC=4,RETADDR=FRRRTY,REGS,DUMP=YES,           X
               RETREGS=YES,FRESDWA=YES
         BR    R14            EXIT
         TITLE 'IEESN03D  #T COMMAND  --  RESOURCE MANAGER CLEANUP'
*
*        THIS ROUTINE RECEIVES CONTROL IF THE SRB MUST BE
*        PURGED.
*
D#RMTR   DS    0H
         USING *,R15
         LR    R7,R15         SET BASE REGISTER
         SL    R7,=A(D#RMTR-D#SRBCD)   BY COMPUTATION
         DROP  R15
         USING D#SRBCD,R7
         LR    R8,R2          SET UP POINTER TO WORK
         ST    R14,ASRBRTN    SAVE RETURN ADDR
         OI    FLAG2,FG2PURG  SET PURGED
         B     FRRPOST        GO AND POST TO CLEAN UP
         LTORG
DCBMSG   DC    CL46'DSO=(  )  RFM=(   )  LRECL=       BLKSZ=     '
         DS    0F
DEVTAB   DC    X'0806',CL6'3505  '
         DC    X'0808',CL6'1403  '
         DC    X'0809',CL6'3211  '
         DC    X'080E',CL6'3800  '
         DC    X'080A',CL6'1443  '
         DC    X'0804',CL6'2501  '
         DC    X'1008',CL6'3066  '
         DC    X'1009',CL6'3277  '
         DC    X'100A',CL6'3284  '
         DC    X'100B',CL6'3286  '
         DC    X'8001',CL6'2400  '
         DC    X'8003',CL6'3400  '
         DC    X'2009',CL6'3330  '
         DC    X'200B',CL6'3350  '
         DC    X'200D',CL6'3330-1'
         DC    X'200A',CL6'3340  '
         DC    X'2007',CL6'2305-2'
         DC    X'200C',CL6'3375  '   AXC-CBT 10/05/82
         DC    X'200E',CL6'3380  '   AXC-CBT 10/05/82
         DC    X'0000',CL6'      '
         DC    X'0000',CL6'      '
         DC    X'0000',CL6'      '
         TITLE 'IEESN03D  #T COMMAND  --  DSECTS'
XSA      DSECT
XAP      DS    F
XAD      DS    F
XAX      DS    D
XAE      DS    0C
XAR      DS    F
XAN      DS    0C
XAL      DS    F
XAV      DS    D
XAS      DS    D
XAU      DS    C
         DS    C
XAJ      DS    H
         DS    F
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         CVT
         EJECT
         IHAASVT
         EJECT
         IHAASCB
         EJECT
         IHAFRRS
         EJECT
         IHAPSA
         EJECT
         IHASDWA
         EJECT
         IHASRB
         EJECT
         IHARB
         EJECT
WORK     DSECT
WORKSTRT DS    0D
SAVRET   DS    18F
         DS    0D
DOUBLE   DS    2F
XSASAVE  DS    F
TYPE     DS    F
WTOLIST  DS    F
PRINT    DS    52C
PST      STAE  PST,CT,MF=L
DMYPRMS  DS    6F             DUMMY AREA FOR FRR PARMS FOR SUBR MODE
FRRPRMS  DS    F              ADDRESS OF 6 WORD FRR PARM
ASRBRTN  DS    F              RETURN ADDR FOR SRB CODE
MYASCB   DS    F              ASCB ADDR OF MAIN ROUTINE
MYTCB    DS    F              TCB ADDRESS FOR MAIN ROUTINE
TOASCB   DS    F              ASCB ADDR OF SRB ROUTINE
ECB      DS    F              ECB FOR MAIN ROUTINE TO WAIT ON
ECB2     DS    F              ECB FOR STIMER TO POST
ECBLIST  DS    2F
LENGTH   DS    F              LENGTH OF STORAGE TO DUMP
SRBAREA  DS    ((SRBSIZE+3)/4)F  THE SRB ITSELF
ASIDCH   DS    F              ASID OF TOASCB
ASID     DS    H              ASID OF TOASCB
FLAG1    DS    X
FG1DUMP  EQU   X'80'
FG1REP   EQU   X'40'
FG1SRDN  EQU   X'02'          IF ON SRB HAS TERMINATED
FG1SUBR  EQU   X'01'
FLAG2    DS    X
FG2NVER  EQU   X'01'          VERIFICATION FAILED
FG2IVLD  EQU   X'02'          VALIDATION FAILED
FG2ERRR  EQU   X'04'          DISASTER OCCURED IN SRB
FG2PURG  EQU   X'08'          SRB WAS PURGED
FG2PSTR  EQU   X'10'          IF ON THEN SRB POST HAD ERROR
ESTAELST DS    5F                                     ****(RLL)****
OUTAREA  DS    500CL48
WORKEND  DS    0F
         END
