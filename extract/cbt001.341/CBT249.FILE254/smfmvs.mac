*------------------------------SMFMVS----------------------------------*
× BY  TERRY FLYNN,  OCCIDENTAL PETROLEUM CORP.,  HOUSTON TX            ×
×                   713-629-3268                                       ×
×   SMF REDUCTION AND REPORTS FOR MVS SYSTEMS USING MF1 RECORDS        ×
×   ALSO WORKS FOR RMF RECORDS                                         ×
×   PORTIONS OF THE CODE WERE DESIGNED BY FRANK CHAMBERS.              ×
*----------------------------------------------------------------------*

TITLE1 SMF REDUCTION;

DATA S4
(KEEP = TERMTIME JOB STEPNO INITTIME DATE DPRTY PGM SWAPRATE CSA_REC
        SRB PAGE_IN PAGE_OUT SWAPS SWAP_PIN SWAP_POT RECLAIMS LSQA_SWA
        SU ACT_TIME PGN RES_TIME PG_FLOTS ALLOCATE ELPSED PAGERATE
        CSA_IN STOLEN PG_SECS WK_SET TCB CPU_BUSY IO_RATIO CPI_PG
        USR_CORE)
     S70
(KEEP = DATE TIME DURATION CPU_BUSY CPU_ID VALID SERIAL HOUR)
     S71
(KEEP = DATE T1 DURATION TIME PAGEINS PAGEOUTS RECLAIMS ADSPSWAP
        PGSWAPIN PQSWAPOT VIOPGIN VIOPGOUT VIOPGRCL SPAPGIN SPAPGOUT
        SPARCLM SPAVIOI SPAVIOO SPAVIOR AVFRAME DFFRAME TOTSLOTS
        DSSLOTS ASPSLOT FREESLT HOUR PAGERATE SYSIRATE
        SWAPRATE SWPGRATE AVGPGOUT AVGPGIN PG_FLTS)
     S72
(KEEP = DATE TIME DURATION PGN PERIOD TRANS ACTIVE TRANSERV ELAPSED
        IPS)
     S73
(KEEP = DATE TIME DURATION SAMPLES CPU_ID CHAN_ID TYPE SIO BUSY CB_CPUW
        BUSY_CNT CBC_CNT)
     S74
(KEEP = DATE TIME DURATION SAMPLES DEV_ADDR TYPE VOLSER IO BUSY
        QUED BUSY_CNT QUED_CNT)
         ;
INFILE INP;

INPUT @2 REC_ID PIB1. @;
IF REC_ID = 4  THEN GO TO _4;
IF REC_ID = 70 THEN GO TO _70;
IF REC_ID = 71 THEN GO TO _71;
IF REC_ID = 72 THEN GO TO _72;
IF REC_ID = 73 THEN GO TO _73;
IF REC_ID = 74 THEN GO TO _74;

DONE:
INPUT; DELETE;
PAGE;
_4:
INPUT
                   @3  TERMTIME PIB4.2
                   @15 JOB $8.
                   @39 STEPNO PIB1.
                       INITTIME PIB4.2
                       DATE PD4.
                   @54 DPRTY PIB1.
                       PGM $8.
                   @73 LSQA_SWA PIB2.
                       USR_CORE PIB2.
                   @87 ALOCTIME PIB4.2
                       STRTTIME PIB4.2
                   +1  SRB PIB3.2
                       IND PIB2.
                       REL_OFF PIB2.
                       DE_LEN PIB2.
                       @;
IF STRTTIME = 0 THEN GO TO DONE;
POINTER = 103 + DE_LEN;
INPUT @ POINTER
                    +1 TCB PIB3.2
                       @;
POINTER = REL_OFF + 1;
INPUT @ POINTER
                       PAGE_IN PIB4.
                       PAGE_OUT PIB4.
                       SWAPS PIB4.
                       SWAP_PIN PIB4.
                       SWAP_POT PIB4.
                       VIO_IN PIB4.
                       VIO_OUT PIB4.
                       SU PIB4.
                       ACT_TIME PIB4.
                       PGN PIB2.
                       RES_TIME PIB4.
                       RECLAIMS PIB4.
                       VIO_REC PIB4.
                       CSA_IN PIB4.
                       CSA_REC PIB4.
                       STOLEN PIB4.
                   +4  PG_SECS PIB4.3
                       @;
SKIP 5;
ACT_TIME = ACT_TIME * 1024/1000000;
RES_TIME = RES_TIME * 1024/1000000;
*                   THIS CONVERTS THESE TIMES FROM 1024 MICROSECOND UNIT
                    TO SECONDS;
PG_FLTS = PAGE_IN + RECLAIMS + CSA_IN + CSA_REC;
ALLCOATE = STRTTIME - ALOCTIME;
ELAPSED = TERMTIME - INITTIME;
PAGERATE = (PG_FLTS + PAGE_OUT + SWAP_PIN + SWAP_POT)
             /(TERMTIME - STRTTIME);
IO_RATIO = SRB/TCB;
IF PG_FLTS ^= 0 THEN CPU_PG = TCB/PG_FLTS;
IF SWAPS ^=0 THEN SWAPRATE = SU/SWAPS;
WK_SET = PG_SECS/TCB;
IF RES_TIME ^= 0 THEN CPU_BUSY = (TCB + SRB)/RES_TIME;
OUTPUT S4;
GO TO DONE;
PAGE;
_70:
INPUT @3 T1 PIB4. @;
HOUR = T1/360000;
POINTER = 15;
INPUT @ POINTER
               COM_SIZE PIB2.
               TIME PD4.
               DATE PD4.
               DURATION PD4.3
               @;
POINTER = POINTER + COM_SIZE;
INPUT @ POINTER
               CON_SIZE PIB2.
               CPU_NO PIB2.
               CPU_SIZE PIB2.
               @;
POINTER = POINTER + CON_SIZE;
_70_1:
INPUT @ POINTER
               CPU_WT1 PIB4.6
               CPU_WT2 PIB4.6
               CPU_ID PIB2.
         +1 VALID PIB1.
         +1 SERIAL PIB3.
               @;
SKIP 5;
CPU_WT = CPU_WT1 * 1048576 + CPU_WT2/4096;
*              THIS SHIFTS THE DOUBLE WORD RIGHT 10 BITS
               THUS GIVING A TIME IN SECONDS ( I USED A SCALING FACTOR
               OF 6 WHEN READING THE FIELDS);
X = 60 * FLOOR(DURATION/100) + MOD(DURATION,100);
CPU_BUSY = 100 * (1 - CPU_WT/X);
OUTPUT S70;
IF CPU_NO = 1 THEN GO TO DONE;
CPU_NO = CPU_NO - 1;
POINTER = POINTER + CPU_SIZE;
GO TO _70_1;
PAGE;
_71:
INPUT @3 T1 PIB4. @;
HOUR = T1/360000;
POINTER = 15;
INPUT @POINTER COM_SIZE PIB2.
               TIME PD4.
               DATE PD4.
               DURATION PD4.3
               @;
POINTER = POINTER + COM_SIZE;
INPUT @POINTER PCSIZ PIB2. @;
POINTER = POINTER + PCSIZ;
INPUT @POINTER
                 PAGEINS      PIB4.
                 PAGEOUTS     PIB4.
                 RECLAIMS     PIB4.
                 ADSPSWAP     PIB4.
                 PGSWAPIN     PIB4.
                 PGSWAPOT     PIB4.
                 VIOPGIN      PIB4.
                 VIOPGOUT     PIB4.
                 VIOPGRCL     PIB4.
                 SPAPGIN      PIB4.
                 SPAPGOUT     PIB4.
                 SPARCLM      PIB4.
                 SPAVIOI      PIB4.
                 SPAVIOO      PIB4.
                 SPAVIOR      PIB4.
                 AVFRAME      PIB4.
                 DFFRAME      PIB4.
                 TOTSLOT      PIB4.
                 DSSLOTS      PIB4.
                 ASPSLOT      PIB4.
                 FREESLT      PIB4.
                 @;
SKIP 5;
X = 60 * FLOOR(DURATION/100) + MOD(DURATION,100);
PG_FLTS = (PAGEINS + RECLAIMS + SPAPGIN)/X;
SYSIRATE = (SPAPGIN + SPAPGOUT + SPAVIOI + SPAVIOO) / X;
PAGERATE = (PAGEINS + PAGEOUTS + VIOPGIN + VIOPGOUT +
           PGSWAPIN + PGSWAPOT + SYSIRATE) / X;
SWAPRATE = ADSPSWAP / X;
SWPGRATE = (PGSWAPIN + PGSWAPOT) / X;
AVGPGOUT = 0;
AVGPGIN = 0;
IF ADSPSWAP NE 0 THEN AVGPGOUT = PGSWAPOT / ADSPSWAP;
IF ADSPSWAP NE 0 THEN AVGPGIN = PGSWAPIN /ADSPSWAP;
OUTPUT S71;
GO TO DONE;
PAGE;
_72:
INPUT @3 T1 PIB4. @;
HOUR = T1/360000;
POINTER = 15;
INPUT @ POINTER
                 COM_SIZE PIB2.
                 TIME PD4.
                 DATE PD4.
                 DURATION PD4.3
              +2 PGN PIB2.
                 @;
POINTER = POINTER + COM_SIZE;
INPUT @ POINTER
                 WC_SIZE PIB2.
                 NO_PG PIB2.
                 PG_SIZE PIB2.
              +2 IPS $8.
                 @;
POINTER = POINTER + WC_SIZE;
PERIOD = 1;
_72_1:
INPUT @ POINTER
                 TRANS PIB4.
                 ACTIVE PIB4.
                 TRANSERV PIB4.
                 ELAPSED PIB4.
                 @;
SKIP 5;
ACTIVE = ACTIVE * 1024/1000000;
ELAPSED = ELAPSED * 1024/1000000;
OUTPUT S72;
IF NO_PG = PERIOD THEN GO TO DONE;
PERIOD = PERIOD + 1;
POINTER = POINTER + PG_SIZE;
GO TO _72_1;
PAGE;
_73:
INPUT @3 T1 PIB4. @;
HOUR = T1/360000;
POINTER = 15;
INPUT @ POINTER
                 COM_SIZE PIB2.
                 TIME PD4.
                 DATE PD4.
                 DURATION PD4.3
              +4 SAMPLES PIB4.
                 @;
POINTER = POINTER + COM_SIZE;
INPUT @ POINTER
                 CHN_SIZE PIB2.
                 NO_CHAN PIB2.
                 DS_SIZE PIB2.
                 @;
POINTER = POINTER + CHN_SIZE;
_73_1:
INPUT @ POINTER
                 CPU_ID PIB2.
                 CHAN_ID PIB1.
                 TYPE PIB1.
                 SIO PIB4.
                 BUSY_CNT PIB4.
                 CBC_CNT PIB4.
                 @;
SKIP 5;
IF MOD(TYPE,8) ^= 1 THEN GO TO NEXTCHAN;
*                THIS KEEPS ONLY CHANNELS WHICH ARE ONLINE AND VALID;
BUSY = 100 * BUSY_CNT/SAMPLES;
CB_CPUW = 100 * CBC_CNT/SAMPLES;
OUTPUT S73;
NEXTCHAN:
IF NO_CHAN = 1 THEN GO TO DONE;
NO_CHAN = NO_CHAN - 1;
POINTER = POINTER + DS_SIZE;
GO TO _73_1;
PAGE;
_74:
INPUT @3 T1 PIB4. @;
HOUR = T1/360000;
POINTER = 15;
INPUT @ POINTER
                 COM_SIZE PIB2.
                 TIME PD4.
                 DATE PD4.
                 DURATION PD4.3
              +3 UCBTYP3 PIB1.
                 SAMPLES PIB4.
                 @;
IF ^MOD(FLOOR(UCBTYP3/32),2) THEN GO TO DONE;
*                THIS ELIMINATES ALL BUT DASD DEVICES;
POINTER = POINTER + COM_SIZE;
INPUT @ POINTER
                 DC_SIZE PIB2.
                 NO_DD PIB2.
                 DD_SIZE PIB2.
                 @;
POINTER = POINTER + DC_SIZE;
_74_1:
INPUT @ POINTER
                 DEV_ADDR PIB2.
              +1 ONLINE PIB1.
                 TYPE PIB4.
                 VOLSER $6.
              +2 IO PIB4.
                 BUSY_CNT PIB4.
                 QUED_CNT PIB4.
                 @;
SKIP 3;
IF ONLINE ^= 1 THEN GO TO NEXTDEV;
*                THIS KEEPS ONLY DEVICES WHICH WERE ONLINE THE WHOLE PER
DEV_ADDR = FLOOR(DEV_ADDR/16);
BUSY = 100 * BUSY_CNT/SAMPLES;
QUED = QUED_CNT/SAMPLES;
OUTPUT S74;
NEXTDEV:
IF NO_DD = 1 THEN GO TO DONE;
NO_DD = NO_DD - 1;
POINTER = POINTER + DD_SIZE;
GO TO _74_1;
RUN; PAGE;
PROC SORT DATA=S4; BY DATE INITTIME;
PROC SORT DATA=S70; BY DATE TIME CPU_ID;
PROC SORT DATA=S71; BY DATE TIME;
PROC SORT DATA=S72; BY DATE PGN PERIOD;
PROC SORT DATA=S73; BY DATE CHAN_ID TIME;
PROC SORT DATA=S74; BY DATE TIME DEV_ADDR TYPE VOLSER;
RUN; PAGE;
TITLE2 SMF TYPE 70;
DATA _NULL_; SET S70 END=EOF;
FILE PRINT LL = LEFT HEADER = INIT;
IF _N_ ^= 1 AND (SDATE ^= DATE OR LEFT < 2) THEN PUT _PAGE_;
IF _N_ = 1 THEN SDATE = DATE;
IF S_TIME ^= TIME THEN LINK PRINT;
IF CPU_ID = 1 THEN GO TO C_1;
CPU_0 = CPU_BUSY;
SER_0 = SERIAL;
GO TO C_2;
C_1:
CPU_1 = CPU_BUSY;
SER_1 = SERIAL;
C_2:
IF EOF THEN LINK PRINT;
RETURN;
PRINT:
IF _N_ = 1 THEN GO TO C_3;
CPU_ALL = CPU_1 + CPU_0;
IF CPU_0 ^= . AND CPU_1 ^= . THEN CPU_AVE = CPU_ALL/2;
RETAIN S_TIME S_DATE CPU_0 CPU_1 SER_0 SER_1;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
                @5   DATE 8.
                +7   TIME 8.
                +6   CPU_0 6.3
                +9   SER_0 HEX6.
                +7   CPU_1 6.3
                +9   SER_1 HEX6.
                +7   CPU_ALL 6.3
                +6   CPU_AVE 6.3
                ;
CPU_0 = .;
CPU_1 = .;
SER_0 = .;
SER_1 = .;
C_3:
S_DATE = DATE;
S_TIME = TIME;
RETURN;
INIT:
SDATE = DATE;
RETAIN LEFT SDATE;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
                @9   'DATE'
                +9   'TIME'
                +7   'CPUO BUSY'
                +6   'SERIAL NO'
                +4   'CPU1 BUSY'
                +6   'SERIAL NO'
                +3   'TOTAL BUSY'
                +4   'AVE BUSY'
                ;
PUT;
RETURN;
PROC SCATTER U DATA=S70; BY DATE;
PLOT HOUR*CPU_BUSY=CPU_ID / OVERLAY HREF=25 50 75;
RUN; PAGE;
PROC PRINT PAGE DATA=S71; BY DATE;
VAR TIME PAGERATE PG_FLTS SYSIRATE SWAPRATE SWPGRATE
AVGPGOUT AVGPGIN;
TITLE2 PAGING RATE ANALYSIS;
PROC PRINT PAGE DATA=S71; BY DATE;
VAR TIME PAGEINS PAGEOUTS ADSPSWAP SPAPGIN SPAPGOUT AVFRAME
DFFRAME FREESLT;
TITLE2 PAGING ANALYSIS;
PROC SCATTER U DATA=S71; BY DATE;
PLOT HOUR*PAGERATE='T' HOUR*PG_FLTS='F' HOUR*SWPGRATE='S'
     /OVERLAY HREF=9 30;
PLOT HOUR*SWAPRATE='S';
RUN; PAGE;
PROC PRINT DATA=S72; BY DATE;
TITLE2 WORKLOAD STATISTICS;
PROC MEANS DATA=S72 N MEAN SUM MIN MAX STD; BY DATE PGN PERIOD;
VAR TRANS ACTIVE ELAPSED TRANSERV;
PROC MEANS NOPRINT DATA=S73 SUM MIN MAX STD;
BY DATE CHAN_ID TYPE;
VAR SIO SAMPLES BUSY_CNT CBC_CNT BUSY CB_CPUW;
OUTPUT OUT=S73_1 (KEEP=SIO SAMPLES BUSY_CNT CBC_CNT
                       S_SIO S_BUSY S_CB_CPW
                       H_SIO H_BUSY H_CB_CPW
                       L_SIO L_BUSY L_CB_CPW
                       DATE CHAN_ID TYPE)
SUM = SIO SAMPLES BUSY_CNT CBC_CNT
STD = S_SIO SA SB SC S_BUSY S_CB_CPW
MAX = H_SIO HA HB HC H_BUSY H_CB_CPW
MIN = L_SIO LA LB LC L_BUSY L_CB_CPW
;
TITLE2 CHANNEL UTILIZATION BY DAY;
DATA _NULL_; SET S73_1;
FILE PRINT LL = LEFT HEADER = INIT;
IF (SDATE ^= DATE AND _N_ ^= 1) OR LEFT < 4 THEN PUT _PAGE_;
BUSY = 100 * BUSY_CNT/SAMPLES;
CB_CPUW = 100 * CBC_CNT/SAMPLES;
FILE PRINT HEADER = INIT;
PUT
                @25 CHAN_ID HEX2.
                +25 SIO 7.
                +10 BUSY 5.2
                +10 CB_CPUW 5.2
                ;
PUT
                @45'STD'
                +4  S_SIO 7.
                +10 S_BUSY 5.2
                +10 S_CB_CPW 5.2
                ;
PUT
                @45'MAX'
                +4  H_SIO 7.
                +10 H_BUSY 5.2
                +10 H_CB_CPW 5.2
                ;
PUT
                @45'MIN'
                +4  L_SIO 7.
                +10 L_BUSY 5.2
                +10 L_CB_CPW 5.2
                ;
PUT;
RETURN;
INIT:
SDATE = DATE;
RETAIN LEFT SDATE;
FILE PRINT LL = LEFT HEADER = INIT;
PUT DATE=;
PUT
               @23 'CHANNEL'
               +24 'SIO'
               +12 '% BUSY'
               +5  'BUSY & CPU WAIT'
               ;
PUT;
RETURN;
PROC SORT DATA=S73; BY DATE TIME;
DATA _NULL_; SET S73;
IF (BUSY > 40 AND TYPE = 33)
OR (BUSY > 60 AND TYPE = 1);
*        TYPE 33 IS BMUX, TYPE 1 IS SELECTOR;
TITLE2 CHANNEL EXCEPTIONS;
X + 1;
IF (SDATE ^= DATE AND X ^= 1) OR LEFT < 2 THEN PUT _PAGE_;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
               @16 DATE 6.
               +10 TIME 6.
               +10 CHAN_ID HEX2.
               +10 SIO 6.
               +10 BUSY 5.2
               +12 CB_CPUW 5.2
               ;
RETURN;
INIT:
SDATE = DATE;
RETAIN LEFT SDATE;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
               @18 'DATE'
               +11 'TIME'
               +9  'CHANNEL'
               +10 'SIO'
               +10 '% BUSY'
               +5  'BUSY & CPU BUSY'
               ;
PUT;
RETURN;
RUN; PAGE;
DATA _2305_1 _2305_2; SET S74;
DROP X;
X = MOD(TYPE,16);
IF X = 6 OR X = 7 THEN Y = 1;
IF Y THEN OUTPUT _2305_1;
IF ^Y THEN OUTPUT _2305_2;
*        _2305_1 HAS RECORDS FROM 2305'S, _2305_2 HAS THE REST;
PROC MEANS NOPRINT DATA = _2305_1 SUM;
BY DATE TIME DURATION SAMPLES DEV_ADDR TYPE VOLSER;
OUTPUT OUT = _2305_3
SUM = IO BUSY_CNT QUED_CNT;
VAR IO BUSY_CNT QUED_CNT;
DATA _2305_4; SET _2305_3;
BUSY = BUSY_CNT/SAMPLES;
QUED = QUED_CNT/SAMPLES;
DATA _2305_5; SET _2305_2 _2305_4;
PROC SORT DATA = _2305_5; BY DATE DEV_ADDR VOLSER TIME;
PROC MEANS NOPRINT DATA=_2305_5 SUM STD MIN MAX;
BY DATE DEV_ADDR VOLSER;
VAR IO BUSY_CNT QUED_CNT SAMPLES BUSY QUED;
OUTPUT OUT=S74_1 (KEEP=DATE DEV_ADDR VOLSER
                  IO BUSY_CNT QUED_CNT SAMPLES
                  S_IO S_BUSY S_QUED
                  H_IO H_BUSY H_QUED
                  L_IO L_BUSY L_QUED)
SUM = IO BUSY_CNT QUED_CNT SAMPLES
STD = S_IO SA SB SC S_BUSY S_QUED
MAX = H_IO HA HB HC H_BUSY H_QUED
MIN = L_IO LA LB LC L_BUSY L_QUED
;
TITLE2 DISK VOLUME UTILIZATION BY DAY;
DATA _NULL_; SET S74_1;
FILE PRINT LL = LEFT HEADER = INIT;
IF (SDATE ^= DATE AND _N_ ^= 1) OR LEFT < 4 THEN PUT _PAGE_;
BUSY = 100 * BUSY_CNT/SAMPLES;
QUED = QUED_CNT/SAMPLES;
FILE PRINT HEADER = INIT;
PUT
                  @10
                  +10 DEV_ADDR HEX3.
                  +4  VOLSER $6.
                  +25 IO 6.
                  +10 BUSY 5.2
                  +10 QUED 5.2
                  ;
PUT
                  @50'STD'
                  +5   S_IO 6.
                  +10 S_BUSY 5.2
                  +10 S_QUED 5.2
                  ;
PUT
                  @50'MAX'
                  +5  H_IO 6.
                  +10 H_BUSY 5.2
                  +10 H_QUED 5.2
                  ;
PUT
                  @50'MIN'
                  +5  L_IO 6.
                  +10 L_BUSY 5.2
                  +10 L_QUED 5.2
                  ;
PUT;
RETURN;
INIT:
SDATE = DATE;
RETAIN LEFT SDATE;
FILE PRINT LL = LEFT HEADER = INIT;
PUT DATE=;
PUT
                  @18 'ADDRESS'
                  +3  'VOLSER'
                  +26 'SIO'
                  +11 '% BUSY'
                  +7  'QUED REQ'
                  ;
PUT;
RETURN;
PROC SORT DATA=S74; BY DATE TIME DEV_ADDR;
DATA _NULL_; SET _2305_5;
IF QUED >= .2 OR BUSY >=40;
X + 1;
TITLE2 DISK VOLUME EXCEPTIONS;
FILE PRINT LL = LEFT HEADER = INIT;
IF (SDATE ^= DATE AND X ^= 1) OR LEFT < 2 THEN PUT _PAGE_;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
                  @15 DATE 8.
                  +10 TIME 8.
                  +10 DEV_ADDR HEX3.
                  +10 VOLSER $6.
                  +10 IO 6.
                  +8  BUSY 5.2
                  +10 QUED 5.2
                  ;
RETURN;
INIT:
SDATE = DATE;
RETAIN LEFT SDATE;
FILE PRINT LL = LEFT HEADER = INIT;
PUT
                  @18 'DATE'
                  +14 'TIME'
                  +9  'ADDRESS'
                  +8  'VOLSER'
                  +13 'IO'
                  +9  '% BUSY'
                  +8  'QUED REQ'
                  ;
PUT;
RETURN;
