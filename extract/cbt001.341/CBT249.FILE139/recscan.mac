 /*  RMF RECORD SEPARATOR - SCANNER FOR SMF DATASETS                 */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 RECSCAN: PROCEDURE (PARM_FIELD) OPTIONS(MAIN);
  DECLARE TYPE70   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE71   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE72   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE73   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE74   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE75   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE76   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE77   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE78   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE79   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE ALLRMF   FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE TYPE255  FILE SEQUENTIAL BUFFERED OUTPUT ;
  DECLARE INPUT    FILE SEQUENTIAL BUFFERED INPUT  ;
1/*                                                                  */

 DCL 1 RMFREC  BASED(SMF70PTR) UNAL,
 /* RECORD TYPE 70 - CPU ACTIVITY                                    */
    3 SMF70FLG BIT(8),            /* OPERATING ENVIRONMENT           */
    3 SMF70RTY BIT(8)  ,          /* RECORD TYPE 70                  */
    3 SMF70TME FIXED BINARY(31),         /* TOD RECORD WRITTEN       */
    3 SMF70DTE CHAR(4),           /* DATE RECORD WRITTEN             */
    3 SMF70SID CHAR(4),           /* SYSTEM ID FROM INSTALLATION     */
                                  /* COMMON CONTROL DATA             */
    3 SMF70SIZ FIXED BINARY(15),  /* SIZE OF COMMON CONTROL DATA AREA*/
    3 SMF70IST CHAR(4),           /* TOD INTERVAL START 0HHMMSSF     */
    3 SMF70DAT CHAR(4),           /* DATE INTERVAL START 00YYDDDF    */
    3 SMF70INT CHAR(4),           /* DURATION OF INTERVAL MMSSTTTF   */
    3 SMF70MOD CHAR(2),           /* CPU MODEL NUMBER        @G523NED*/
    3 SMF70SUB CHAR(2),           /* RESV                            */
    3 SMF70SAM FIXED BINARY(31),  /* NUMBER OF SAMPLES       @G523NED*/
    3 SMF70MFV CHAR(2),           /* RMF VERSION #           @G523NED*/
    3 SMF70RV1 CHAR(2),           /* RESV                            */
    3 SMF70RLS CHAR(4),           /* OS/VS2 RELEASE NUMBER IN EBCDIC
                                                        @G523NED*/
    3 SMF70CYC CHAR(4);           /* CYCLE IN PACKED DECIMAL @G523NED*/
1/*                                                                  */
  DECLARE RMFCOUNT FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR71    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR72    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR73    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR74    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR75    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR76    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR77    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR78    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR79    FIXED BINARY(31,0) INIT(0);
  DECLARE CNTR255   FIXED BINARY(31,0) INIT(0);
1/*                                                                  */
  DECLARE SMF70PTR POINTER;
  DECLARE RECORD CHAR(32760) VARYING ;
  DECLARE DEAD BIT(1) INIT('0'B);
  DECLARE RECNO FIXED BINARY(15,0);
  DECLARE RECBIT BIT(16) ;
  RECNO = 0;
  SMF70PTR = ADDR(RECORD) ;
1/*                                                                  */
     OPEN FILE(TYPE70) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE71) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE72) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE73) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE74) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE75) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE76) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE77) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE78) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE79) OUTPUT SEQUENTIAL;
     OPEN FILE(ALLRMF) OUTPUT SEQUENTIAL;
     OPEN FILE(TYPE255) OUTPUT SEQUENTIAL;
     OPEN FILE(INPUT)   INPUT SEQUENTIAL;
     ON ENDFILE(INPUT) BEGIN;
        DEAD = '1'B;
     END;
1/*                                                                  */
    DO UNTIL(DEAD);
       READ FILE(INPUT) INTO(RECORD);
       RECBIT = (8)'0'B ×× UNSPEC(SUBSTR(RECORD,2,1));
       UNSPEC(RECNO) = RECBIT ;
       IF RECNO = 255 THEN DO;
           CNTR255 = CNTR255+1;
           WRITE FILE(TYPE255) FROM(RECORD);
       END;
       IF (RECNO > 69 & RECNO < 80 )
         THEN DO;
         RMFCOUNT = RMFCOUNT + 1 ;
         WRITE FILE(ALLRMF) FROM(RECORD);
           IF RECNO = 70 THEN DO;
              CNTR70  = CNTR70 + 1;
              WRITE FILE(TYPE70)  FROM(RECORD);
           END;
           IF RECNO = 71 THEN DO;
              CNTR71  = CNTR71 + 1;
              WRITE FILE(TYPE71)  FROM(RECORD);
           END;
           IF RECNO = 72 THEN DO;
              CNTR72  = CNTR72 + 1;
              WRITE FILE(TYPE72)  FROM(RECORD);
           END;
           IF RECNO = 73 THEN DO;
              CNTR73  = CNTR73 + 1;
              WRITE FILE(TYPE73)  FROM(RECORD);
           END;
           IF RECNO = 74 THEN DO;
              CNTR74  = CNTR74 + 1;
              WRITE FILE(TYPE74)  FROM(RECORD);
           END;
           IF RECNO = 75 THEN DO;
              CNTR75  = CNTR75 + 1;
              WRITE FILE(TYPE75)  FROM(RECORD);
           END;
           IF RECNO = 76 THEN DO;
              CNTR76  = CNTR76 + 1;
              WRITE FILE(TYPE76)  FROM(RECORD);
           END;
           IF RECNO = 77 THEN DO;
              CNTR77  = CNTR77 + 1;
              WRITE FILE(TYPE77)  FROM(RECORD);
           END;
           IF RECNO = 78 THEN DO;
              CNTR78  = CNTR78 + 1;
              WRITE FILE(TYPE78)  FROM(RECORD);
           END;
           IF RECNO = 79 THEN DO;
              CNTR79  = CNTR79 + 1;
              WRITE FILE(TYPE79)  FROM(RECORD);
           END;
      END;     /* END OF IF-RECORD GROUP     */
   END;        /* END OF UNTIL DEAD GROUP    */
1/*                                                                  */
   PUT PAGE EDIT('RMF VERSION 4 RECORDS WRITTEN = ',RMFCOUNT)
           (COL(10),A,F(6));
  PUT SKIP(2);
  PUT EDIT('RMF TYPE   70 RECORDS WRITTEN = ',CNTR70)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   71 RECORDS WRITTEN = ',CNTR71)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   72 RECORDS WRITTEN = ',CNTR72)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   73 RECORDS WRITTEN = ',CNTR73)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   74 RECORDS WRITTEN = ',CNTR74)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   75 RECORDS WRITTEN = ',CNTR75)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   76 RECORDS WRITTEN = ',CNTR76)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   77 RECORDS WRITTEN = ',CNTR77)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   78 RECORDS WRITTEN = ',CNTR78)(COL(10),A,F(6));
  PUT EDIT('RMF TYPE   79 RECORDS WRITTEN = ',CNTR79)(COL(10),A,F(6));
  PUT EDIT('??? TYPE  255 RECORDS WRITTEN = ',CNTR255)(COL(10),A,F(6));
  PUT SKIP(2);
   CLOSE FILE(TYPE70);
   CLOSE FILE(TYPE71);
   CLOSE FILE(TYPE72);
   CLOSE FILE(TYPE73);
   CLOSE FILE(TYPE74);
   CLOSE FILE(TYPE75);
   CLOSE FILE(TYPE76);
   CLOSE FILE(TYPE77);
   CLOSE FILE(TYPE78);
   CLOSE FILE(TYPE79);
   CLOSE FILE(ALLRMF);
   CLOSE FILE(TYPE255);
   CLOSE FILE(INPUT);
   RETURN;
 END;
