//TEC3166C JOB (T369055100),'BEN/SASWSS',CLASS=Z,MSGCLASS=X,
//             NOTIFY=TEC3166,MSGLEVEL=(2,0)
/*JOBPARM R=3,S=G081
//SAS     EXEC SAS,REGION=3000K
//SMFIN    DD  DSN=TEC3166.TYPE79,DISP=SHR
//SYSIN    DD  *
MACRO _SELECT                     /* SPECIFY SELECTION CRITERIA      */
 /*DATEPART(DATETIME) = MDY(10,18,82); /* GET ONLY 10/18/82          */
IF SMF79SID = 'G081';             /* GET ONLY S=G081                 */
%

MACRO _SELJOB1                    /* SPECIFY JOB SELECTION FOR ASD   */
%

MACRO _SELJOB2                    /* SPECIFY JOB SELECTION FOR ARD   */

IF R792JBN =:'IMS'
OR R792JBN = 'JES2'
OR R792JBN = 'NET'
 THEN GOTO JOBOK_2;
 ELSE GOTO SKPJOB_2;
JOBOK_2:

%

MACRO _TITLE                      /* SPECIFY REPORT TITLE            */
SASWSS3 TEST %

MACRO _GROUP                      /* SPECIFY GROUPING CRITERIA       */
LENGTH GROUP $16.;                /* DECLARE LENGTH OF GROUP NAME    */
IF JOBNAME = 'COSP'
 THEN DO;
  GROUP = 'COSP CTL REGION ';
  GOTO GOTGROUP;
 END;
IF JOBNAME =:'COSPMSG'
 THEN DO;
  GROUP = 'COSP MSG REGIONS';
  GOTO GOTGROUP;
 END;
IF JOBNAME = 'IMSU'
 THEN DO;
  GROUP = 'IMSU CTL REGION ';
  GOTO GOTGROUP;
 END;
IF JOBNAME =:'IMSUMSG'
 THEN DO;
  GROUP = 'IMSU MSG REGIONS';
  GOTO GOTGROUP;
 END;
IF JOBNAME = 'IMST'
 THEN DO;
  GROUP = 'IMST CTL REGION ';
  GOTO GOTGROUP;
 END;
IF JOBNAME =:'IMSTMSG'
 THEN DO;
  GROUP = 'IMST MSG REGIONS';
  GOTO GOTGROUP;
 END;
IF JOBNAME = '*MASTER*'
OR JOBNAME = 'ALLOCAS '
OR JOBNAME = 'GRS     '
OR JOBNAME = 'PCAUTH  '
OR JOBNAME = 'CONSOLE '
 THEN DO;
  GROUP = 'MVS SYSTEM TASKS';
  GOTO GOTGROUP;
 END;
IF PERFORM = 1
 THEN DO;
  GROUP = 'PRODUCTION BATCH';
  GOTO GOTGROUP;
 END;
IF PERFORM = 2
 THEN DO;
  GROUP = 'TEST BATCH      ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 3
 THEN DO;
  GROUP = 'HOT BATCH       ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 5
 THEN DO;
  GROUP = 'LOW PRIO. BATCH ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 8
 THEN DO;
  GROUP = 'ICD             ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 20
 THEN DO;
  GROUP = 'ORS TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 21
 THEN DO;
  GROUP = 'SYS TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 23
 THEN DO;
  GROUP = 'OPR TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 24
 THEN DO;
  GROUP = 'TEC TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 25
 THEN DO;
  GROUP = 'CKI TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 26
 THEN DO;
  GROUP = 'COM TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 27
 THEN DO;
  GROUP = 'TMX TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 28
 THEN DO;
  GROUP = 'MIS TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 29
 THEN DO;
  GROUP = 'FEC TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 30
 THEN DO;
  GROUP = 'CPS TSO         ';
  GOTO GOTGROUP;
 END;
IF PERFORM = 44
 THEN DO;
  GROUP = 'CLASS I         ';
  GOTO GOTGROUP;
 END;
GROUP = JOBNAME;
GOTGROUP:
%

DATA                              /* PROCESS RMF DATA                */
 ASD                              /* CREATING OBSERVATIONS FROM ASD  */
  (KEEP = JOBNAME                 /* JOBNAME                         */
          ASID                    /* ASID                            */
          DOMAIN                  /* DOMAIN                          */
          PERFORM                 /* PERFORMANCE GROUP               */
          PERIOD                  /* PERFORMANCE GROUP PERIOD        */
          DATETIME                /* DATETIME OF INTERVAL            */
          DURATION                /* DURATION OF INTERVAL            */
          REALSTOR                /* # OF REAL STORAGE FRAMES        */
  )
 ARD                              /* CREATING OBSERVATIONS FROM ARD  */
  (KEEP = JOBNAME                 /* JOBNAME                         */
          ASID                    /* ASID                            */
          DOMAIN                  /* DOMAIN                          */
          PERFORM                 /* PERFORMANCE GROUP               */
          DATETIME                /* DATETIME OF INTERVAL            */
          DURATION                /* DURATION OF INTERVAL            */
          AVG_RS                  /* AVERAGE REAL STORAGE            */
          PAGE_SEC                /* PAGE SECONDS                    */
          PAGE_INS                /* PAGE INS                        */
          PINRT                   /* PAGE INS/CPU SECOND             */
          DPIN_SEC                /* PAGE INS/SECOND                 */
          EXCP_SEC                /* EXCPS/SECOND                    */
          EXCPS                   /* EXCPS                           */
          CPU_TIME                /* CPU TIME                        */
  )
 SPAG                             /* AND SPAG SUBTYPES OF SMF 79S    */
  (KEEP = DATETIME                /* DATETIME OF INTERVAL            */
          DURATION                /* DURATION OF INTERVAL            */
          DMD_PGRT                /* DEMAND PAGING RATE              */
          TOT_PGRT                /* TOTAL PAGING RATE               */
          AFC                     /* AVAILABLE FRAME COUNT           */
          UIC                     /* UNREFERENCED INTERVAL COUNT     */
  )
 ;
FORMAT                            /* ESTABLISH PRINT FORMATS         */
 DATETIME DATETIME.
 DURATION TIME8.
 AVG_RS PINRT COMMA6.0
 ;                                /* END OF PRINT FORMATS            */

ARRAY LASTEJST(IXJOB) LASTE1-LASTE512; /* EJST ARRAY BY JOBID        */
ARRAY LASTPIN (IXJOB) LASTP1-LASTP512; /* PIN ARRAY BY JOBID         */
ARRAY LASTPSS (IXJOB) LASTS1-LASTS512; /* PSS ARRAY BY JOBID         */
ARRAY LASTEXCP(IXJOB) LASTX1-LASTX512; /* EXCP ARRAY BY JOBID        */
ARRAY JOBIDS(IXJOB) $13 J1-J512;  /* JOBID ARRAY (JOBNAME + ASID(5)) */

RETAIN                            /* RETAIN & INITIALIZE VARIABLES   */
 J1-J512 '.'                      /* JOBIDS                          */
 LASTE1-LASTE512 0                /* CPU TIME                        */
 LASTP1-LASTP512 0                /* PINRT                           */
 LASTS1-LASTS512 0                /* PWSS                            */
 LASTX1-LASTX512 0                /* EXCPS                           */
 LASTDUR  0                       /* DURATION                        */
 LASTTIME 0                       /* TIME                            */
 LASTDPGE 0                       /* NUMBER OF DEMAND PAGES          */
 LASTTPGE 0                       /* NUMBER OF TOTAL PAGES           */
 DURATION 0                       /* DURATION                        */
 ;                                /* END OF RETAIN & INITIALIZE VARS.*/

INFILE SMFIN;                     /* READ FROM DDNAME=SMFIN          */
INPUT          @2   SMF79RTY  PIB1. /* RECORD TYPE                   */
               @;                 /* HOLD RECORD FOR LATER           */
IF SMF79RTY = 79;                 /* WE ONLY WANT TYPE 79S           */
INPUT          @11  SMF79SID  $4. /* SMF SYSTEM ID                   */
               @17  SMF79IST  PDTIME4. /* INTERVAL TIME              */
               @21  SMF79DAT  PD4. /* INTERVAL DATE                  */
               @71  R79RECST  PIB2. /* RECORD SUBTYPE                */
               @153 R79NELM   PIB2. /* NUMBER OF ELEMENTS            */
               @155 R79SELM   PIB2. /* SIZE OF ELEMENTS              */
               @;                 /* HOLD RECORD FOR LATER           */
DATETIME = (DATEJUL(SMF79DAT)*24*60*60) + SMF79IST; /* GET DATETIME  */
_SELECT;                          /* APPLY SELECTION CRITERIA        */
IF DATETIME ^= LASTTIME           /* IS THIS THE SAME INTERVAL       */
 THEN DO;                         /* NO - UPDATE DURATION            */
  LASTDUR = DURATION;             /* SAVE DURATION FOR NEXT TIME     */
  DURATION = DATETIME - LASTTIME; /* CALCULATE DURATION IN SECONDS   */
  LASTTIME = DATETIME;            /* SAVE TIME FOR NEXT TIME         */
 END;                             /* END DO                          */
IF R79RECST = 1                   /* IS THIS SUBTYPE 1               */
 THEN GOTO SUBTYPE1;              /* YES - GO TO SUBTYPE 1 ROUTINE   */
IF R79RECST = 2                   /* NO - IS THIS SUBTYPE 2          */
 THEN GOTO SUBTYPE2;              /* YES - GO TO SUBTYPE 2 ROUTINE   */
IF R79RECST = 4                   /* NO - IS THIS SUBTYPE 4          */
 THEN GOTO SUBTYPE4;              /* YES - GO TO SUBTYPE 4 ROUTINE   */
DELETE;                           /* NO - NEVER MIND                 */

SUBTYPE1:                         /* PROCESS SUBTYPE 1 (ASD) RECORDS */
PTR = 157;                        /* POINT TO FIRST ELEMENT          */
DO IXSUB = 1 TO R79NELM;          /* DO FOR THE NUMBER OF ELEMENTS   */
 INPUT         @PTR    R791ASID PIB2. /* ASID                        */
               @PTR+02 R791JBN  $8. /* JOBNAME                       */
               @PTR+10 R791DMN  PIB2. /* DOMAIN                      */
               @PTR+12 R791NPG  PIB2. /* PERFORMANCE GROUP           */
               @PTR+14 R791PGP  PIB2. /* PERFORMANCE GROUP PERIOD    */
               @PTR+16 R791TTOD PIB4. /* TRANSACTION TIME (1024 MICR)*/
               @PTR+30 R791FMCT PIB2. /* # OF REAL STORAGE FRAMES    */
               @;                 /* HOLD THIS RECORD FOR LATER      */
 _SELJOB1;                        /* SELECT JOBS FOR SUBTYPE 1       */
 DO OVER JOBIDS;                  /* DO FOR EACH POSSIBLE JOBID      */
  JOBID = R791JBN ×× PUT(R791ASID,5.); /* CONSTRUCT JOBID            */
  IF JOBID = JOBIDS               /* IS THIS THE JOBID               */
   THEN GOTO GOTJOB_1;            /* YES - GO PROCESS IT             */
  IF JOBIDS = '.'                 /* NO - IS THIS THE END OF THE LIST*/
   THEN DO;                       /* YES - BEGIN DO                  */
    JOBIDS = JOBID;               /* ADD NEW JOBID TO LIST           */
    GOTO GOTJOB_1;                /* AND GO PROCESS IT               */
   END;                           /* END DO                          */
 END;                             /* END OF DO OVER JOBNAMES         */
 PUT 'JOBID TABLE OVERFLOW - ' JOBID=; /* BITCH                      */
 GOTO SKPJOB_1;                   /* SKIP JOB                        */
 GOTJOB_1:                        /* JOBNAME IS IN JOBNAME TABLE     */
 JOBNAME = R791JBN;               /* SAVE JOBNAME                    */
 TRANSDUR = R791TTOD / 976;       /* CONVERT TRANS. ELAPSED TO SECS. */
 ASID = R791ASID;                 /* SAVE ASID                       */
 REALSTOR = R791FMCT;             /* SAVE # OF REAL STORAGE FRAMES   */
 DOMAIN = R791DMN;                /* SAVE DOMAIN                     */
 PERFORM = R791NPG;               /* SAVE PERFORMANCE GROUP          */
 PERIOD = R791PGP;                /* SAVE PERFORMANCE GROUP PERIOD   */
 IF LASTDUR ^= 0                  /* IS THIS FIRST INTERVAL          */
  THEN OUTPUT ASD;                /* NO - OUTPUT OBSERVATION FOR ASD */
 SKPJOB_1:                        /* COME HERE TO SKIP JOB           */
 PTR = PTR + R79SELM;             /* INCREMENT TO NEXT ELEMENT       */
END;                              /* END DO IXSUB = 1 TO R79NELM     */
RETURN;                           /* COMPLETED PROCESSING SUBTYPE 1  */

SUBTYPE2:                         /* PROCESS SUBTYPE 2 (ARD) RECORDS */
PTR = 157;                        /* POINT TO FIRST ELEMENT          */
DO IXSUB = 1 TO R79NELM;          /* DO FOR THE NUMBER OF ELEMENTS   */
 INPUT         @PTR    R792ASID PIB2. /* ASID                        */
               @PTR+02 R792JBN  $8. /* JOBNAME                       */
               @PTR+10 R792DMN  PIB2. /* DOMAIN                      */
               @PTR+12 R792NPG  PIB2. /* PERFORMANCE GROUP           */
               @PTR+14 R792TTOD PIB4. /* TRANSACTION TIME (1024 MICR)*/
               @PTR+28 R792ARS  PIB2. /* AVERAGE REAL STORAGE        */
               @PTR+38 R792PSS  PIB8.3 /* STEP PRODUCT OF FRAME (SEC)*/
               @PTR+46 R792EJST PIB4. /* CPU TIME (1024 MICROSECONDS)*/
               @PTR+54 R792RTM  PIB4.3 /* STEP RESIDENT TIME (SECS.) */
               @PTR+58 R792EXCP PIB2. /* EXCP COUNT FOR STEP         */
               @PTR+94 R792PIN  PIB4. /* DEMAND PAGE INS FOR TRANS   */
               @;                 /* HOLD THIS RECORD FOR LATER      */
 _SELJOB2;                        /* SELECT JOBS FOR SUBTYPE 2       */
 DO OVER JOBIDS;                  /* DO FOR EACH POSSIBLE JOBID      */
  JOBID = R792JBN ×× PUT(R792ASID,5.); /* CONSTRUCT JOBID            */
  IF JOBID = JOBIDS               /* IS THIS THE JOBID               */
   THEN GOTO GOTJOB_2;            /* YES - GO PROCESS IT             */
  IF JOBIDS = '.'                 /* NO - IS THIS THE END OF THE LIST*/
   THEN DO;                       /* YES - BEGIN DO                  */
    JOBIDS = JOBID;               /* ADD NEW JOBID TO LIST           */
    GOTO GOTJOB_2;                /* AND GO PROCESS IT               */
   END;                           /* END DO                          */
 END;                             /* END OF DO OVER JOBNAMES         */
 PUT 'JOBID TABLE OVERFLOW - ' JOBID=; /* BITCH                      */
 GOTO SKPJOB_2;                   /* SKIP JOB                        */
 GOTJOB_2:                        /* JOBNAME IS IN JOBNAME TABLE     */
 JOBNAME = R792JBN;               /* SAVE JOBNAME                    */
 TRANSDUR = R792TTOD / 976;       /* CONVERT TRANS. ELAPSED TO SECS. */
 DPIN = .;                        /* SET TO MISSING                  */
 PAGE_INS = .;                    /* SET TO MISSING                  */
 DPIN_SEC = .;                    /* SET TO MISSING                  */
 DEJST = .;                       /* SET TO MISSING                  */
 DPSS = .;                        /* SET TO MISSING                  */
 EXCPS = .;                       /* SET TO MISSING                  */
 AVG_RS = .;                      /* SET TO MISSING                  */
 CPU_TIME = .;                    /* SET TO MISSING                  */
 PAGE_SEC = .;                    /* SET TO MISSING                  */
 EXCP_SEC = .;                    /* SET TO MISSING                  */
 PINRT = .;                       /* SET TO MISSING                  */
 IF TRANSDUR >= DURATION          /* ARE TRANSACTION BASED #S OK     */
  THEN DO;                        /* YES - BEGIN DO                  */
   DPIN = R792PIN - LASTPIN;      /* CALCULATE DELTA IN PAGE INS     */
   PAGE_INS = DPIN;               /* SAVE PAGE INS                   */
   DPIN_SEC = DPIN / DURATION;    /* CALCULATE PAGE INS/SECOND       */
  END;                            /* END DO                          */
 IF R792RTM >= DURATION           /* ARE STEP BASED #S OK            */
  THEN DO;                        /* YES - BEGIN DO                  */
   DEJST = R792EJST - LASTEJST;   /* CALCULATE DELTA IN CPU TIME     */
   DPSS = R792PSS - LASTPSS;      /* CALCULATE DELTA PSS             */
   EXCPS = R792EXCP - LASTEXCP;   /* CALCULATE DELTA IN EXCPS        */
   CPU_TIME = DEJST / 976;        /* CONVERT CPU TIME TO SECONDS     */
   IF CPU_TIME > 0                /* WAS THERE ANY CPU TIME          */
    THEN AVG_RS = DPSS / CPU_TIME; /* YES - CALCULATE AVG. REAL STOR.*/
   PAGE_SEC = DPSS;               /* SAVE PAGE SECONDS               */
   EXCP_SEC = EXCPS / DURATION;   /* CALCULATE EXCPS/SECOND          */
  END;                            /* END DO                          */
 IF R792RTM >= DURATION           /* ARE BOTH STEP BASED #S          */
 AND TRANSDUR >= DURATION         /* AND TRANSACTION BASED #S OK     */
  THEN DO;                        /* YES - BEGIN DO                  */
   IF DEJST > 0                   /* WAS THERE ANY CPU TIME          */
   THEN PINRT = DPIN * 100 / (DEJST * 100 / 976); /* YES - GET PINRT */
  END;                            /* END DO                          */
 ASID = R792ASID;                 /* SAVE ASID                       */
 DOMAIN = R792DMN;                /* SAVE DOMAIN                     */
 PERFORM = R792NPG;               /* SAVE PERFORMANCE GROUP          */
 LASTPIN  = R792PIN;              /* SAVE PAGE INS FOR NEXT TIME     */
 LASTEJST = R792EJST;             /* SAVE CPU TIME FOR NEXT TIME     */
 LASTPSS  = R792PSS;              /* SAVE PSS FOR NEXT TIME          */
 LASTEXCP = R792EXCP;             /* SAVE EXCPS FOR NEXT TIME        */
 IF LASTDUR ^= 0                  /* IS THIS FIRST INTERVAL          */
  THEN OUTPUT ARD;                /* NO - OUTPUT OBSERVATION FOR ARD */
 SKPJOB_2:                        /* COME HERE TO SKIP JOB           */
 PTR = PTR + R79SELM;             /* INCREMENT TO NEXT ELEMENT       */
END;                              /* END DO IXSUB = 1 TO R79NELM     */
RETURN;                           /* COMPLETED PROCESSING SUBTYPE 2  */

SUBTYPE4:                         /* PROCESS SUBTYPE 4 (SPAG) RECORDS*/
PTR = 157;                        /* POINT TO FIRST & ONLY ELEMENT   */
INPUT          @PTR    R794CMNI PIB4. /* COMMON PAGE INS (LPA + CSA) */
               @PTR+04 R794CMNO PIB4. /* COMMON PAGE OUTS (CSA)      */
               @PTR+16 R794PSPI PIB4. /* PAGES SWAPPED IN            */
               @PTR+20 R794PSPO PIB4. /* PAGES SWAPPED OUT           */
               @PTR+24 R794PRVI PIB4. /* PRIVATE IN                  */
               @PTR+28 R794PRVO PIB4. /* PRIVATE OUT                 */
               @PTR+36 R794VIO  PIB4. /* VIO PAGES (IN + OUT)        */
               @PTR+40 R794AFC  PIB2. /* AVAILABLE FRAME COUNT       */
               @PTR+42 R794CRI  PIB2. /* UNREFERNCED INTERVAL COUNT  */
               ;                  /* THAT'S ALL WE NEED              */
DPAGE = R794CMNI + R794PRVI;      /* CALCULATE DEMAND PAGING         */
TPAGE = DPAGE + R794CMNO + R794PSPI + R794PSPO + R794PRVO + R794VIO;
DMD_PGRT = (DPAGE - LASTDPGE) / DURATION; /* DEMAND PAGE RATE/SECOND */
TOT_PGRT = (TPAGE - LASTTPGE) / DURATION; /* TOTAL PAGE RATE/SECOND  */
LASTDPGE = DPAGE;                 /* SAVE LAST # OF DEMAND PAGES     */
LASTTPGE = TPAGE;                 /* SAVE LAST # OF TOTAL PAGES      */
AFC = R794AFC;                    /* GET AVAILABLE FRAME COUNT       */
UIC = R794CRI;                    /* GET UNREFERENCED INTERVAL COUNT */
 IF LASTDUR ^= 0                  /* IS THIS FIRST INTERVAL          */
  THEN OUTPUT SPAG;               /* NO - OUTPUT OBSERVATION FOR SPAG*/
RETURN;                           /* COMPLETED PROCESSING SUBTYPE 4  */

DATA ASD_GRP;                     /* GROUP ASD DATA                  */
SET ASD;                          /* READ ASD DATA                   */
_GROUP;                           /* APPLY GROUPING CRITERIA         */
RETURN;                           /* JUST IN CASE                    */

PROC SORT DATA = ASD_GRP;         /* SORT ASD DATA FOR PROC MEANS    */
BY GROUP DATETIME;                /* BY GROUP NAME AND TIME STAMP    */

PROC MEANS DATA = ASD_GRP NOPRINT; /* SUMMARIZE                      */
BY GROUP DATETIME;                /* BY GROUP NAME AND TIME STAMP    */
VAR                               /* FOR THE FOLLOWING VARIABLES     */
 DURATION                         /* DURATION                        */
 REALSTOR                         /* # OF REAL STORAGE FRAMES        */
 ;                                /* END OF VAR STATEMENT            */
OUTPUT OUT = ASD_SUMM             /* CREATING ASD_SUMM DATASET       */
 N = COUNT                        /* GIVING COUNT BY GROUP AND TIME  */
 SUM =                            /* GIVING SUMS                     */
  DURATION                        /* TOTAL DURATION                  */
  T_REALST                        /* TOTAL # OF REAL STORAGE FRAMES  */
 MIN =                            /* GIVING MINIMUMS                 */
  L_DURATN                        /* LOW DURATION                    */
  L_REALST                        /* LOW # OF REAL STORAGE FRAMES    */
 MAX =                            /* GIVING MAXIMUMS                 */
  H_DURATN                        /* HIGH DURATION                   */
  H_REALST                        /* LOW # OF REAL STORAGE FRAMES    */
 STD =                            /* GIVING STANDARD DEVIATIONS      */
  S_DURATN                        /* STD. DEV. DURATION              */
  S_REALST                        /* STD. DEV. # OF REAL STOR. FRAMES*/
 ;                                /* END OF OUTPUT STATEMENT         */

DATA ARD_GRP;                     /* GROUP ARD DATA                  */
SET ARD;                          /* READ ARD DATA                   */
_GROUP;                           /* APPLY GROUPING CRITERIA         */
RETURN;                           /* JUST IN CASE                    */

PROC SORT DATA = ARD_GRP;         /* SORT ARD DATA FOR PROC MEANS    */
BY GROUP DATETIME;                /* BY GROUP NAME AND TIME STAMP    */

PROC MEANS DATA = ARD_GRP NOPRINT; /* SUMMARIZE                      */
BY GROUP DATETIME;                /* BY GROUP NAME AND TIME STAMP    */
VAR                               /* FOR THE FOLLOWING VARIABLES     */
 DURATION                         /* DURATION                        */
 PAGE_SEC                         /* PAGE SECONDS                    */
 PAGE_INS                         /* PAGE INS                        */
 CPU_TIME                         /* CPU TIME                        */
 EXCPS                            /* EXCPS                           */
 ;                                /* END OF VAR STATEMENT            */
OUTPUT OUT = ARD_SUMM             /* CREATING ARD_SUMM DATASET       */
 N = COUNT                        /* GIVING COUNT BY GROUP AND TIME  */
 SUM =                            /* GIVING SUMS                     */
  DURATION                        /* TOTAL DURATION                  */
  T_PAGSEC                        /* TOTAL PAGE SECONDS              */
  T_PAGINS                        /* TOTAL PAGE INS                  */
  T_CPUTIM                        /* TOTAL CPU TIME                  */
  T_EXCPS                         /* TOTAL EXCPS                     */
 MIN =                            /* GIVING MINIMUMS                 */
  L_DURATN                        /* LOW DURATION                    */
  L_PAGSEC                        /* LOW PAGE SECONDS                */
  L_PAGINS                        /* LOW PAGE INS                    */
  L_CPUTIM                        /* LOW CPU TIME                    */
  L_EXCPS                         /* LOW EXCPS                       */
 MAX =                            /* GIVING MAXIMUMS                 */
  H_DURATN                        /* HIGH DURATION                   */
  H_PAGSEC                        /* HIGH PAGE SECONDS               */
  H_PAGINS                        /* HIGH PAGE INS                   */
  H_CPUTIM                        /* HIGH CPU TIME                   */
  H_EXCPS                         /* HIGH EXCPS                      */
 STD =                            /* GIVING STANDARD DEVIATIONS      */
  S_DURATN                        /* STD. DEV. DURATION              */
  S_PAGSEC                        /* STD. DEV. PAGE SECONDS          */
  S_PAGINS                        /* STD. DEV. PAGE INS              */
  S_CPUTIM                        /* STD. DEV. CPU TIME              */
  S_EXCPS                         /* STD. DEV. EXCPS                 */
 ;                                /* END OF OUTPUT STATEMENT         */

DATA ARD_SUMM;                    /* REPLACE OUTPUT OF PROC MEANS    */
SET ARD_SUMM;                     /* READ OUTPUT OF PROC MEANS       */
IF (T_CPUTIM > 0 & T_PAGSEC >= 0) /* IS THIS FOR REAL                */
 THEN AVG_RS = COUNT * (T_PAGSEC / T_CPUTIM); /* YES - CALC. AVG_RS  */
IF T_CPUTIM > 0                   /* WAS THERE ANY CPU TIME          */
 THEN PINRT = T_PAGINS / T_CPUTIM; /* YES - CALCULATE PINRT          */
DPIN_SEC = COUNT * (T_PAGINS / DURATION); /* CALCULATE PAGE INS/SEC  */
EXCP_SEC = COUNT * (T_EXCPS / DURATION); /* CALCULATE EXCPS/SECOND   */

PROC SORT DATA=ARD_SUMM;          /* SORT ARD SUMMARY                */
BY GROUP DATETIME;                /* BY GROUP NAME AND TIME STAMP    */

PROC PRINT DATA=ARD_SUMM PAGE UNIFORM; /* PRINT REPORT               */
BY GROUP;                         /* BY GROUP                        */
ID DATETIME;                      /* USING DATETIME AS ID VARIABLE   */
VAR AVG_RS PINRT DPIN_SEC EXCP_SEC; /* LIST VARIABLES                */
FORMAT DATETIME DATETIME.         /* ESTABLISH PRINT FORMATS         */
       AVG_RS PINRT COMMA6.0
       DPIN_SEC EXCP_SEC 6.2
       ;                          /* END OF PRINT FORMATS            */
TITLE1 G R O U P   S T A T I S T I C S   B Y   T I M E;
TITLE2 _TITLE;

PROC PLOT DATA = ARD_SUMM NOLEGEND;
BY GROUP;
TITLE1 W O R K I N G   S E T   S T A T I S T I C S   P L O T;
TITLE2 A = FRAMES   P = PAGES/CPU SEC   D = PAGES/SEC;
TITLE3 _TITLE;
PLOT DATETIME * AVG_RS   = 'A'
     DATETIME * PINRT    = 'P'
     DATETIME * DPIN_SEC = 'D' / OVERLAY
VREVERSE;

PROC PLOT DATA = SPAG NOLEGEND;
TITLE1 S P A G   P L O T;
TITLE2 U = UIC   A = AFC   D = DEMAND PAGES/SEC   T = TOTAL PAGES/SEC;
TITLE3 _TITLE;
PLOT DATETIME * TOT_PGRT = 'T'
     DATETIME * DMD_PGRT = 'D'
     DATETIME * UIC      = 'U'
     DATETIME * AFC      = 'A' / OVERLAY
VREVERSE;

PROC PLOT DATA = ASD_SUMM NOLEGEND;
BY GROUP;
TITLE1 R E A L   S T O R A G E   P L O T;
TITLE2 R = REAL STORAGE FRAMES;
TITLE3 _TITLE;
PLOT DATETIME * T_REALST = 'R' /
VREVERSE;
