*          DATA SET CBT840     AT LEVEL 001 AS OF 09/29/77
         MACRO
&N       DTIME &FIELD
&N       TIME  DEC
         CNOP  0,4
         STM   0,1,*+8
         B     *+12
         DC    2F'0'
         EDIT  TO=&FIELD,FROM=*-14,MASK=' 99/99/99.99F ZZ99.999'
         MEND
         MACRO
&NAME    EDIT  &TO=,&FROM=,&MASK=
.*
.*             MACRO-ID. 'EDIT'.
.*             AUTHOR.   DON HIGGINS.
.*             DATE WRITTEN.  07/18/70.
.*             REMARKS.
.*                  FUNCTION - GENERATE MASK AND/OR INSTRUCTIONS TO
.*                             EDIT PACKED DECIMAL DATA FOR PRINTING.
.*                  OPERANDS
.*                   TO=   LABEL OF DISPLAY FIELD INTO WHICH THE EDITED
.*                         DATA WILL BE PLACED IF SPECIFIED.
.*                   FROM= LABEL OF PACKED DECIMAL DATA TO BE EDITED
.*                         IF SPECIFIED.
.*                   MASK= STRING OF UP TO 48 CHARACTERS IN SINGLE
.*                         QUOTES DEFINING EDIT MASK SIMILAR
.*                         TO A COBOL PICTURE.  THIS OPERAND IS
.*                         REQUIRED.  IF THE OTHER TWO OPERANDS ARE NOT
.*                         DEFINED, A DC WITH THE DESIRED MASK IS
.*                         GENERATED.  SPECIAL EDIT CHARACTERS ARE AS
.*                         FOLLOWS:
.*                            Z - DIGIT SELECT WITH ZERO SURPRESSION
.*                            9 - DIGIT SELECT WITHOUT ZERO SURPRESSION
.*                            F - FIELD SELECT RESETS SIGNIFICANCE TO
.*                                ALLOW MULTIPLE FIELD EDITING
.*                            $ - DIGIT SELECT WITH ZERO SURPRESSION
.*                                AND FLOATING DOLLAR SIGN.
.*                  NOTES:
.*                   1.  THE FIRST MASK CHARACTER IS USED AS THE FILL
.*                       CHARACTER IN ALL FIELDS.
.*                   2.  THE FOLLOWING EXAMPLE WOULD EDIT BOTH THE TIME
.*                       AND DATE OBTAINED USING THE TIME MACRO
.*                            .
.*                            TIME DEC
.*                            STM  0,1,PDATA
.*                            EDIT TO=LINE+10,FROM=PDATA,
.*                                 MASK=' 99/99/99.99F ZZ99.999'
.*                            .
.*                       PDATA DS  2F     (HHMMSSTH00YYDDDC)
.*                       LINE  DC  CL133' '
.*                            .
.*                   3.  THE FOLLOWING EXAMPLE WOULD GENERATE A DC
.*                       LABELED MASKPAY TO BE USED AS A MASK FOR
.*                       EDITING DIFFERENT FILEDS.
.*                            .
.*                       MASKPAY   EDIT MASK=' Z,ZZZ,ZZ9.99 CR'
.*                            .
.*                   4.  THE MASK CHARACTERS DETERMINE EXPLICIT LENGTH.
.*                   5.  MULTIPLE FIELDS CANNOT CONTAIN FLOATING
.*                       DOLLAR SIGNS.
.*
         LCLA  &LMASK,&SIGNF,&NEXT,&FIELDS,&FLOAT
         LCLC  &C,&C1,&C2,&C3,&C4,&C5,&C6
         AIF   (T'&MASK NE 'U').BADMASK
&LMASK   SETA  K'&MASK-2
         AIF   (&LMASK GT 48).BADMASK
         AIF   (&LMASK LT 1).BADMASK
         AIF   ('&MASK'(1,1) NE '''').BADMASK
         AIF   ('&MASK'(&LMASK+2,1) NE '''').BADMASK
.LOOP    ANOP
&NEXT    SETA  &NEXT+1
         AIF   (&NEXT GT &LMASK).GEN
&C       SETC  '&MASK'(&NEXT+1,1)
         AIF   ('&C' EQ '9').NINE
         AIF   ('&C' EQ 'Z').ZZZZ
         AIF   ('&C' EQ '$').DOLLAR
         AIF   ('&C' EQ 'F').FIELD
.AD1     AIF   ('&C1' GT '9999999').AD2
&C1      SETC  '&C1&C'
         AGO   .LOOP
.AD2     AIF   ('&C2' GT '9999999').AD3
&C2      SETC  '&C2&C'
         AGO   .LOOP
.AD3     AIF   ('&C3' GT '9999999').AD4
&C3      SETC  '&C3&C'
         AGO   .LOOP
.AD4     AIF   ('&C4' GT '9999999').AD5
&C4      SETC  '&C4&C'
         AGO   .LOOP
.AD5     AIF   ('&C5' GT '9999999').AD6
&C5      SETC  '&C5&C'
         AGO   .LOOP
.AD6     AIF   ('&C6' GT '9999999').BADMASK
&C6      SETC  '&C6&C'
         AGO   .LOOP
.NINE    AIF   (&SIGNF EQ 0).SETSIG
.ZZZZ    ANOP
&C       SETC  '½'       (11-0-1-8-9)=X'20'  DIGIT SELECT
         AGO   .AD1
.DOLLAR  ANOP
&FLOAT   SETA  1
         AGO   .ZZZZ
.FIELD   ANOP
&C       SETC  ''       (0-2-9)=X'22'       FIELD SELECT
&SIGNF   SETA  0
&FIELDS  SETA  1
         AGO   .AD1
.SETSIG  ANOP
&C       SETC  'À'       (0-1-9)=X'21'       SIGNIFICANCE STARTER
&SIGNF   SETA  &NEXT
         AGO   .AD1
.GEN     AIF   (T'&TO EQ 'O').GENDC
         AIF   (T'&FROM EQ 'O').BADFROM
         AIF   (&FLOAT EQ 1).GENFL
&NAME    MVC   &TO.(&LMASK.),=CL&LMASK.'&C1&C2&C3&C4&C5&C6'
         ED    &TO.(&LMASK.),&FROM
         MEXIT
.GENDC   AIF   (T'&FROM NE 'O').BADTO
&NAME    DC    CL&LMASK.'&C1&C2&C3&C4&C5&C6'
         MEXIT
.GENFL   AIF   (&FIELDS NE 0).BADMIX
         AIF   (&SIGNF  GT 0).GENLA
&NAME    LA    1,1
         MVC   &TO.(&LMASK.),=CL&LMASK.'&C1&C2&C3&C4&C5&C6'
         EDMK  &TO.(&LMASK.),&FROM
         BCT   1,*+8
         B     *+8
         MVI   0(1),C'$'
         MEXIT
.GENLA   ANOP
&NAME    LA    1,&TO.+&SIGNF
         MVC   &TO.(&LMASK.),=CL&LMASK.'&C1&C2&C3&C4&C5&C6'
         EDMK  &TO.(&LMASK.),&FROM
         BCTR  1,0
         MVI   0(1),C'$'
         MEXIT
.BADMIX  MNOTE 0,'MULTIPLE FIELDS CANNOT CONTAIN FLOATING DOLLAR SIGNS'
         MEXIT
.BADMASK MNOTE 0,'INVALID MASK (1-48 CHARACTERS IN SINGLE QUOTES)'
         MEXIT
.BADTO   MNOTE 0,'MISSING TO FIELD'
         MEXIT
.BADFROM MNOTE 0,'MISSING FROM FIELD'
         MEXIT
         MEND
         MACRO
         EQUREGS &LIMITS
.*
.*             MACRO-ID. 'EQUREGS'.
.*             AUTHOR. DON HIGGINS.
.*             DATE WRITTEN. 08/04/70.
.*             REMARKS.
.*                 THIS MACRO GENERATES EQU STATEMENTS FOR 1 TO 16
.*                 SYMBOLIC REGISTER NAMES OF THE FORM R0 UP TO R15
.*             THE REGISTER EQU DESIRED CAN BE SPECIFIED IN THE FORM
.*             OF  (0,15), (14,1), (2,6), ETC.
         LCLA  &LOW,&HIGH
         AIF   (N'&SYSLIST EQ 1).GETLIM
.DEFAULT ANOP
&LOW     SETA  0
&HIGH    SETA  15
.GEN     ANOP
R&LOW    EQU   &LOW
         AIF   (&LOW EQ &HIGH).DONE
&LOW     SETA  &LOW+1
         AIF   (&LOW LE 15).GEN
&LOW     SETA  0
         AGO   .GEN
.GETLIM  AIF   (N'&SYSLIST(1) NE 2).DEFAULT
         AIF   (T'&SYSLIST(1,1) NE 'N').DEFAULT
         AIF   (T'&SYSLIST(1,2) NE 'N').DEFAULT
&LOW     SETA  &SYSLIST(1,1)
         AIF   (&LOW LT 0).DEFAULT
         AIF   (&LOW GT 15).DEFAULT
&HIGH    SETA  &SYSLIST(1,2)
         AIF   (&HIGH LT 0).DEFAULT
         AIF   (&HIGH GT 15).DEFAULT
         AGO   .GEN
.DONE    MEXIT
         MEND
         MACRO
         FILL   &TAG,&FILL=C' '
         LCLA  &LTAG
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/16/71.
.*             REMARKS.  FILL REMAINDER OF AREA WITH FILL CHARACTER.
&LTAG    SETA  L'&TAG
         DC    (&LTAG)&FILL
         ORG   &TAG+&LTAG
         MEND
         MACRO
&NAME    IOB   &FLAGS=,&ECB=,&CCW=,&DCB=,&ID=
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/23
.*             REMARKS.  INPUT/OUTPUT CONTROL BLOCK MACRO.
.*                       REF. SYS. PROG. GUIDE C28-6550-6 PG 139
.*
&NAME    DS    0F
         DC    &FLAGS         FLAGS 1  0-CD 1-CC 6-NOT REL 23457-RESV
         DC    XL1'00'        FLAGS 2  RESERVED
SNS&ID   DC    XL2'00'        FIRST TWO SENSE BYTES AFTER UNIT CHECK
         DC    XL1'00'        ECB CODE
ECB&ID   DC    AL3(&ECB)      EVENT CONTROL BLOCK ADDRESS
         DC    XL1'00'        FLAGS 3 RESERVED
CSW&ID   DC    XL7'00'        CHANNEL STATUS WORD (LOW ORDER 7 BYTES)
         DC    XL1'00'        SIO CODE (INS LENGTH X CONDITION CODE)
CCW&ID   DC    AL3(&CCW)      CHANNEL COMMAND WORD ADDRESS
         DC    XL1'00'        RESERVED
DCB&ID   DC    AL3(&DCB)      DATA CONTROL BLOCK ADDRESS
         DC    XL1'00'        REPOSITION MODIFIER
         DC    AL3(0)         RESTART ADDRESS
         DC    H'0'           BLOCK COUNT INCREMENT
         DC    H'0'           ERROR COUNTS
         DC    XL1'00'        M - EXTENT ENTRY IN DEB
         DC    XL7'00'        SEEK ADDRESS BBCCHHR
         MEND
         MACRO
&N       PENTRY
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     01/06/75.
.*             REMARKS.  PERFORM ROUTINE ENTRY POINT WITH TRACE OPTION.
.*                       SEE PTRACE MACRO FOR TRACE INFO.
         GBLB  &PTRACE
         GBLC  &PTNAME
         GBLC  &PENAME
&PENAME  SETC  '&N'
         DC    0H'0',CL8'&N'
         B     *+4
&N       EQU   *
         AIF   (&PTRACE EQ 0).NOTRACE
         PM    &PTNAME
.NOTRACE ANOP
         MEND
         MACRO
&N       PERFORM &PENTRY
&N       MVC   &PENTRY-2(2),*+10
         B     &PENTRY
         DC    S(*+2)
         MEND
         MACRO
&N       PEXIT
         GBLC  &PENAME
&N       B     &PENAME-4
         MEND
         MACRO
&NAME    SCALL &SUBNAME,&ARGLIST
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/09/70.
.*             REMARKS.  SHORT FORM OF IBM CALL MACRO WITH NO VL.
         AIF   (T'&ARGLIST EQ 'O').NOARG
&NAME    LA    1,=A&ARGLIST        LOAD ARGUMENT LIST ADDRESS
         L     15,=V(&SUBNAME)     LOAD SUBPROGRAM ENTRY ADDRESS
         BALR  14,15               BRANCH AND LINK
         MEXIT
.NOARG   ANOP
&NAME    L     15,=V(&SUBNAME)     LOAD SUBPROGRAM ENTRY ADDRESS
         BALR  14,15               BRANCH AND LINK
         MEND
         MACRO
&NAME    SUBENTRY &CSECT=YES,&BASES=(13),                              X
               &RENT=NO,&RWA=,&RWALNG=0,&SP=0
         LCLA  &NBASE,&S,&OFFSET
.*             MACRO-ID. 'SUBENTRY'
.*             AUTHOR.   DON HIGGINS.
.*             DATE WRITTEN.  07/28/70.
.*             REMARKS.  THIS MACRO GENERATES THE CODE TO ESTABLISH A
.*                       CSECT WITH SAVE AREA AND BASE REGISTER USING
.*                       STANDARD OS LINKAGE CONVENTIONS.
.*             REV1 11/14/74 ADD REENTRANT OPTION WITH WORK AREA
.*                 1.  FOR REENTRANT LINKAGE YOU MUST SPECIFY
.*                     A.  RENT=YES
.*                     B.  AT LEAST ONE BASE REGISTER OTHER THAN 13
.*                         SUCH AS BASES=(R12)
.*                 2.  OPTIONALLY YOU CAN SPECIFY A DSECT NAME AND
.*                     LENGTH FOR A WORK AREA BUILT BEHIND SAVE AREA.
.*                     FOR EXAMPLE  RWADSECT=MYWORK,RWALNG=8
.*                     NOTE THAT THIS WORK AREA LENGTH MUST ALSO BE
.*                     SPECIFIED AT SUBEXIT TIME TO CORRECTLY CALCULATE
.*                     THE FREEMAIN LENGTH.
.*             REV2 02/10/76 DSH - ADD SUBPOOL OPTION
         AIF   ('&CSECT'(1,1) EQ 'N').NOCSECT
&NAME    CSECT
         AGO   .STM
.NOCSECT ANOP
&NAME    DS    0D
.STM     ANOP
         AIF   ('&RENT'(1,1) EQ 'N').NORENT
.RENT    ANOP
         STM   14,12,12(13)
         BAL   &BASES(1),16(15)
         USING &NAME+8,&BASES(1)
         DC    CL8'&NAME'
         LA    0,72+&RWALNG
         AIF   ('&SP' EQ '0').SKIPSP
         LA    1,&SP
         SLL   1,24
         OR    0,1
.SKIPSP  ANOP
         GETMAIN R,LV=(0)
         ST    1,8(13)
         ST    13,4(1)
         LM    14,1,12(13)
         L     13,8(13)
         AIF   ('&RWALNG' EQ '0').GEN
         USING &RWA-72,13
         AGO   .GEN
.NORENT  ANOP
         STM   14,12,12(13)
         BAL   15,88(15)
         DC    9D'0'
         DC    CL8'&NAME'
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         AIF   (T'&BASES(1) NE 'N').CHKR13
         AIF   (&BASES(1) EQ 13).GENB13
         AGO   .GENBX
.CHKR13  ANOP
         AIF   ('&BASES'(2,3) EQ 'R13').GENB13
.GENBX   ANOP
         LR    &BASES(1),13
         USING &NAME+8,&BASES(1)
         AGO   .GEN
.GENB13  ANOP
         USING &NAME+8,13
.GEN     ANOP
&NBASE   SETA  N'&BASES
&S       SETA  1
.L1      ANOP
&S       SETA  &S+1
         AIF   (&S GT &NBASE).EXIT
&OFFSET  SETA  &OFFSET+4095
         LA    &BASES(&S),4095(&BASES(&S-1))
         USING &NAME+8+&OFFSET,&BASES(&S)
         AGO   .L1
.EXIT    ANOP
         MEND
         MACRO
&NAME    SUBEXIT &RC=0,&RENT=NO,&RWALNG=0,&SP=0
.*             MACRO-ID. 'SUBEXIT'.
.*             AUTHOR.   DON HIGGINS.
.*             DATE WRITTEN.  07/28/70.
.*             REMARKS.  THIS MACRO GENERATES THE CODE TO RESTORE
.*                       REGISTERS AND RETURN FROM A CSECT.  A RETURN
.*                       CODE OF ZERO IS RETURNED UNLESS A DIFFERENT
.*                       CODE IS SPECIFIED USING THE KEY WORD RC=.
.*             REV1 11/14/74 ADD REENTRANT OPTION. SEE SUBENTRY.
.*             REV2 12/09/74 ADD REG OPTION FOR RC OPERAND.
.*             REV3 02/10/76 DSH - ADD SUBPOOL OPTION
         AIF   ('&RC'(1,1) EQ '(').RCREG
         LA    15,&RC
         AGO   .CHKRENT
.RCREG   ANOP
         LR    15,&RC
.CHKRENT ANOP
         AIF   ('&RENT'(1,1) EQ 'N').NORENT
.RENT    ANOP
&NAME    L     13,4(13)
         STM   15,1,16(13)
         LA    0,72+&RWALNG
         AIF   ('&SP' EQ '0').SKIPSP
         LA    1,&SP
         SLL   1,24
         OR    0,1
.SKIPSP  ANOP
         L     1,8(13)
         FREEMAIN R,LV=(0),A=(1)
         LM    14,12,12(13)
         BR    14
         AGO   .EXIT
.NORENT  ANOP
&NAME    L     13,4(13)
         L     14,12(13)
         LM    2,12,28(13)
         BR    14
.EXIT    ANOP
         MEND
         MACRO
&N       SYSIN
&N       DCB   DSORG=PS,MACRF=GM,DDNAME=&N,RECFM=FB,LRECL=80
         MEND
         MACRO
&N       SYSPRINT
&N       DCB   DSORG=PS,MACRF=PM,DDNAME=&N,RECFM=FA,BLKSIZE=133
         MEND
         MACRO
&NAME    TAG
&NAME    DS    0H
         MEND
         MACRO
&M       MOVE  &A,&B
         LCLA  &S,&L
&L       SETA  L'&A
.LOOP    ANOP
         AIF   (&L LE 256).LAST
&M       MVC   &A+&S.(256),&B+&S
&S       SETA  &S+256
&L       SETA  &L-256
         AGO   .LOOP
.LAST    ANOP
         MVC   &A+&S.(&L),&B+&S
         MEND
         MACRO
&N       LT    &R,&X
&N       L     &R,&X
         LTR   &R,&R
         MEND
         MACRO
         EQUAL
*              COMMON EQU'S AND LITERALS
*
*              EQU'S FOR REGISTERS
         EQUREGS
*              EQU'S FOR IMMEDIATE DATA INSTRUCTIONS
         EQUI
*              LITERAL POOL
*              EQU'S FOR BRANCH ON CONDITIONS
         EQUBC
         LTORG
         MEND
         MACRO
         EQUI
         GBLA  &N,&V(20)
.LOOP    ANOP
         AIF   (&N EQ 0).EXIT
#&V(&N)  EQU   &V(&N)
&N       SETA  &N-1
         AGO   .LOOP
.EXIT    MEND
         MACRO
         XREFI &I
         GBLA  &N,&V(20)
         LCLA  &S,&K,&NK
&NK      SETA  N'&I
.LOOP1   ANOP
&K       SETA  &K+1
         AIF   (&K GT &NK).EXIT
         AIF   (&N EQ 0).ADD
&S       SETA  0
.LOOP2   ANOP
&S       SETA  &S+1
         AIF   (&I(&K) EQ &V(&S)).REF
         AIF   (&S LT &N).LOOP2
.ADD     ANOP
         AIF   (&N EQ 20).ERR
&N       SETA  &N+1
&V(&N)   SETA  &I(&K)
.REF     ANOP
         AGO   .LOOP1
.ERR     MNOTE 4,'IMMEDIATE DATA XREF TABLE OVERFLOW'
.EXIT    MEND
         MACRO
&N       LI    &R,&I
         AIF   (&I LT 1).ERR
         AIF   (&I GT 32767).ERR
         XREFI &I
         AIF   (&I GT 4095).LHI
&N       LA    &R,#&I
         MEXIT
.LHI     ANOP
&N       LH    &R,*+6
         DC    X'4700',AL2(#&I)
         MEXIT
.ERR     MNOTE 4,'IMMEDIATE DATA NOT 1-32767'
         MEND
         MACRO
&N       AI    &R,&I
         AIF   (&I LT 1).ERR
         AIF   (&I GT 32767).ERR
         XREFI &I
&N       AH    &R,*+6
         DC    X'4700',AL2(#&I)
         MEXIT
.ERR     MNOTE 4,'IMMEDIATE DATA NOT 1-32767'
         MEND
         MACRO
&N       SI    &R,&I
         AIF   (&I LT 1).ERR
         AIF   (&I GT 32767).ERR
         XREFI &I
         AIF   (&I GT 2).SHI
&N       BCTR  &R,0
         DC    0AL2(#&I)
         AIF   (&I EQ 1).EXIT
         BCTR  &R,0
.EXIT    MEXIT
.SHI     ANOP
&N       SH    &R,*+6
         DC    X'4700',AL2(#&I)
         MEXIT
.ERR     ANOP
         MNOTE 4,'IMMEDIATE DATA NOT 1-32767'
         MEND
         MACRO
&N       TB    &FIELD,&BITS
         LCLA  &NBITS,&B(8),&S
&NBITS   SETA  N'&BITS
         AIF   (&NBITS LT 1).ERR
         AIF   (&NBITS GT 8).ERR
.LOOP    ANOP
&S       SETA  &BITS(&NBITS)
         AIF   (&S LT 0).ERR
         AIF   (&S GT 7).ERR
&B(&S+1) SETA  1
&NBITS   SETA  &NBITS-1
         AIF   (&NBITS GT 0).LOOP
&N       TM    &FIELD,B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
         MEXIT
.ERR     MNOTE 8,'INVALID BIT SPECIFICATION'
         MEND
         MACRO
&N       SB    &FIELD,&BITS
         LCLA  &NBITS,&B(8),&S
&NBITS   SETA  N'&BITS
         AIF   (&NBITS LT 1).ERR
         AIF   (&NBITS GT 8).ERR
.LOOP    ANOP
&S       SETA  &BITS(&NBITS)
         AIF   (&S LT 0).ERR
         AIF   (&S GT 7).ERR
&B(&S+1) SETA  1
&NBITS   SETA  &NBITS-1
         AIF   (&NBITS GT 0).LOOP
&N       OI    &FIELD,B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
         MEXIT
.ERR     MNOTE 8,'INVALID BIT SPECIFICATION'
         MEND
         MACRO
&N       ZB    &FIELD,&BITS
         LCLA  &NBITS,&B(8),&S
&NBITS   SETA  N'&BITS
         AIF   (&NBITS LT 1).ERR
         AIF   (&NBITS GT 8).ERR
.LOOP    ANOP
&S       SETA  &BITS(&NBITS)
         AIF   (&S LT 0).ERR
         AIF   (&S GT 7).ERR
&B(&S+1) SETA  1
&NBITS   SETA  &NBITS-1
         AIF   (&NBITS GT 0).LOOP
&N       NI    &FIELD,X'FF'-B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
         MEXIT
.ERR     MNOTE 8,'INVALID BIT SPECIFICATION'
         MEND
         MACRO
&N       XCH   &A,&B
&N       XC    &A,&B
         XC    &B,&A
         XC    &A,&B
         MEND
         MACRO
&N       XCHR  &A,&B
&N       XR    &A,&B
         XR    &B,&A
         XR    &A,&B
         MEND
         MACRO
&N       ZR    &R
&N       SR    &R,&R
         MEND
         MACRO
&N       AAI   &R,&I
         AIF   (&I LT 1).ERR
         AIF   (&I GT 32767).ERR
         XREFI &I
         AIF   (&I GT 4095).AHI
&N       LA    &R,#&I.(&R)
         MEXIT
.AHI     ANOP
&N       AH    &R,*+6
         DC    X'4700',AL2(#&I)
         MEXIT
.ERR     MNOTE 4,'IMMEDIATE DATA NOT 1-32767'
         MEND
         MACRO
&N       SRC   &R
         LTR   &R,&R
         MEND
         MACRO
&N       ZHB   &R
&N       LA    &R,0(&R)
         MEND
         MACRO
         SPOOLDAT
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/12/73.
.*             REMARKS.  DEFINE HASP 3.1 CHECKPOINT DATA AREAS ON 2314.
.*             REFERENCES.
.*                 1.    GY27-7255 HASP V4 PLM
.*                 2.    GC27-6992 HASP SYS. PGMR. GUIDE
.*                 3.    SEE GU019800 FOR SAMPLE PROGRAM USING THIS.
.*             REV1 01/28/74 - REVISE FOR 3330 DISKS.
.*             REV2 01/09/75 - REVISE FOR HASP V4.0 (VS2-R1.7)
*              REV3 /
*              REV3 03/15/76 DSH - MAKE CHECKPOINT MTTRS RELATIVE
*
*              THE FOLLOWING STATEMENTS MUST PRECEED THIS MACRO
*
*              COPY $GLOBAL
*              COPY $HASPGEN
*              $HASPCB JOT,PRC (OTHER CONTROL BLOCKS ARE OPTIONAL)
*
*              SEE GY27-7255 HASP PLM 7-49 FOR FURTHER INFO.
*
         GBLA  &MAXJOBS  MAXIMUM JOBS ALLOWED IN HASP SYSTEM AT ONCE
         GBLA  &NUMPRC   NUMBER OF PRINT/PUNCH CHECKPOINT RECORDS
         GBLA  &JITSIZE  JOB INFORMATION TABLE ELEMENT SIZE
*
*              CHECKPOINT MTTRS
*
*                   THESE MTTRS ARE CODED AS RELATIVE TRACK AND
*                   ARE CONVERTED TO ABSOLUTE TRACK BY HASPXDAP
*                   (GU019600) ON FIRST CALL.
*                   HIGH BIT ON INDICATES RELATIVE TRACK.
*
CKP1MTTR DC    X'80000001'    JOBQUE AND MISC. ON FIRST TRACK
CKP2MTTR DC    X'80000101'    JIT
CKP3MTTR DC    X'80000201'    JOT
*
*              CHECKPOINT RECORD AREAS
*
CKP1REC  DS    0D        JOB QUEUE AND MISC INFO
$JOBQUE  DC    (&MAXJOBS)XL16'00'
$SAVEBEG DS    0F
$JOBQPTR DC    A(*-*)    CORE ADDRESS OF HASP JOB QUEUE
$JQFREE  DC    A(*-*)    FREE QUEUE CHAIN
$JQENT   DC    A(*-*)    ACTIVE QUEUE CHAIN
$DATAKEY DC    F'0'      MASTER PERIPHERAL DATA SET KEY
$JOBNO   DC    H'0'      HASP JOB NUMBER
$MSGRPNO DC    H'0'      LAST CONSOLE MESSAGE TRACK GROUP
$DACKPT  DC    1XL6'0'   DA CHECKPOINT FOR WARM START
$SAVEEND EQU   *
$SAVELEN EQU   $SAVEEND-$SAVEBEG
$PRCRECS DC    (&NUMPRC)XL(PRCSIZE)'00'
CKP1LNG  EQU   *-CKP1REC
CKP2REC  DS    0D        JOB INFORMATION TABLE
$JIT     DC    (&MAXJOBS)XL(&JITSIZE)'00'
CKP2LNG  EQU   *-CKP2REC
CKP3REC  DS    0D        JOB OUTPUT TABLE
$JOTREC  DC    (JOTSIZE)X'00'
CKP3LNG  EQU   *-CKP3REC
         MEND
         MACRO
&N       XCP   &IOB,&CCW,&ERR
&N       LA    R0,&CCW
         ST    R0,&IOB+16
         EXCP  &IOB
         L     R1,&IOB+4
         WAIT  ECB=(1)
         TM    &IOB+12,X'03'
         BNZ   &ERR
         TM    &IOB+13,X'FF'
         BNZ   &ERR
         MEND
         MACRO
&N       MC    &S1,&I2
&N       CLI   &S1,&I2
         ORG   *-4
         DC    X'AF'
         ORG   *+3
         MEND
         MACRO
&N       CDS   &R1,&R3,&S
&N       LM    &R1,&R3,&S
         ORG   *-4
         DC    X'BB'
         ORG   *+3
         MEND
         MACRO
&N       CS    &R1,&R3,&S2
&N       LM    &R1,&R3,&S2
         ORG   *-4
         DC    X'BA'
         ORG   *+3
         MEND
         MACRO
         IF
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
         GBLA  &ELSEIF(10)
         LCLA  &N,&M,&S,&LAB1,&L,&I
         LCLC  &OP,&OPR
         LCLB  &TESTSW
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  CONTROL STRUCTURE FOR CONDITIONAL EXECUTION.
.*             REV1 05/23/76 DSH - SUPPORT ELSEIF.
         AIF   (&LEVEL EQ 10).ERR1
&LEVEL   SETA  &LEVEL+1
&ELSEIF(&LEVEL) SETA 0
&SEQ(&LEVEL) SETA 1
&LAB     SETA  &LAB+1
&ELSE(&LEVEL) SETA &LAB
&N       SETA N'&SYSLIST
.NEXTAND ANOP
&TESTSW  SETB  0
.TEST    ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).ERR2
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M EQ 1).TESTEND
         AIF   (&M LT 2).ERR3
         AIF   (&M GT 5).ERR4
&I       SETA  2
&OPR     SETC  ''
&OP      SETC  '&SYSLIST(&S,1)'
         AIF   (&M GT 2).TESTOPR
         &OP
         AGO   .TESTEND
.TESTOPR ANOP
         AIF   ('&SYSLIST(&S,&I)'(1,1) NE '''').NOLIT
&L       SETA  K'&SYSLIST(&S,&I)
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'(2,&L-2)
         AGO   .NEXTOPR
.NOLIT   ANOP
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'
.NEXTOPR ANOP
&I       SETA  &I+1
         AIF   (&I EQ &M).TESTGEN
&OPR     SETC  '&OPR'.','
         AGO   .TESTOPR
.TESTGEN ANOP
         &OP   &OPR
.TESTEND ANOP
         AIF   (&TESTSW EQ 1).ORBC
.AMBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
.CONNECT ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).EXIT
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M NE 1).ERR5  BAD CONNECTOR
         AIF   ('&SYSLIST(&S)' EQ 'AND').NEXTAND
         AIF   ('&SYSLIST(&S)' NE 'OR').ERR5  BAD CONNECTOR
.NEXTOR   ANOP
&LAB1    SETA  &LAB+1
         B     IF0&LAB1  SKIP TEST IF LAST ONE TRUE
IF0&LAB   EQU *          DO TEST IF LAST ONE FALSE
&LAB     SETA  &LAB+2
&ELSE(&LEVEL) SETA &LAB
&TESTSW  SETB  1
         AGO   .TEST
.ORBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
IF0&LAB1 EQU *
         AGO   .CONNECT
.ERR1    MNOTE 8,'IF - LEVEL OVERFLOW'
         AGO   .EXIT
.ERR2    MNOTE 8,'IF - MISSING TEST LIST'
         AGO   .EXIT
.ERR3    MNOTE 8,'IF - TEST LIST TOO SHORT'
         AGO   .EXIT
.ERR4    MNOTE 8,'IF - TEST LIST TOO LONG'
         AGO   .EXIT
.ERR5    MNOTE 8,'IF - INVALID CONNECTOR'
.EXIT    ANOP
         MEND
         MACRO
         THEN  &OPT
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  MACRO TO ALLOW STRUCTURED PROGRAMMING USING
.*                       IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP
.*                       AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.
         AIF   (&LEVEL EQ 0).ERR0
         AIF   ('&OPT' EQ 'BEGIN').BEGIN
         AIF   ('&OPT' EQ 'END').END
         MNOTE 4,'THEN - INVALID OPERAND - IGNORED'
         AGO   .EXIT
.BEGIN   ANOP
         AIF   (&SEQ(&LEVEL) NE 1).ERR1
&SEQ(&LEVEL) SETA 2
         AGO   .EXIT
.END     ANOP
         AIF   (&SEQ(&LEVEL) NE 2).ERR2
&SEQ(&LEVEL) SETA 3
         AGO   .EXIT
.ERR0    MNOTE 8,'THEN - MISSING IF'
         AGO   .EXIT
.ERR1    MNOTE 4,'THEN BEGIN - OUT OF SEQUENCE'
         AGO   .EXIT
.ERR2    MNOTE 4,'THEN END - OUT OF SEQUENCE'
.EXIT    ANOP
         MEND
         MACRO
         ELSE  &OPT
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
         GBLA  &ELSEIF(10)
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  MACRO TO ALLOW STRUCTURED PROGRAMMING USING
.*                       IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP
.*                       AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.
.*             REV1 05/23/76 DSH - SUPPORT ELSEIF
         AIF   (&LEVEL EQ 0).ERR0
         AIF   (T'&OPT EQ 'O').BEGIN
         AIF   ('&OPT' EQ 'BEGIN').BEGIN
         AIF   ('&OPT' EQ 'END').END
         AIF   ('&OPT' EQ 'CONTINUE').CONT
         MNOTE 8,'ELSE - INVALID OPERAND'
         AGO   .EXIT
.BEGIN   ANOP
         AIF   (&SEQ(&LEVEL) GT 3).ERR1
&LAB     SETA  &LAB+1
         B     IF0&LAB
IF0&ELSE(&LEVEL) EQU *
&ELSE(&LEVEL) SETA &LAB
&SEQ(&LEVEL) SETA 4
         AGO .EXIT
.END     ANOP
         AIF   (&SEQ(&LEVEL) NE 4).ERR2
.DEQUE   ANOP
IF0&ELSE(&LEVEL) EQU *
&LEVEL   SETA &LEVEL-1
         AIF   (&ELSEIF(&LEVEL+1) EQ 1).DEQUE
         AGO   .EXIT
.CONT    ANOP
         AIF   (&SEQ(&LEVEL) GT 3).ERR3
         AGO   .DEQUE
.ERR0    MNOTE 8,'ELSE - MISSING IF'
         AGO   .EXIT
.ERR1    MNOTE 8,'ELSE BEGIN - OUT OF SEQUENCE'
         AGO   .EXIT
.ERR2    MNOTE 8,'ELSE END - OUT OF SEQUENCE'
         AGO   .EXIT
.ERR3    MNOTE 8,'ELSE CONTINUE - OUT OF SEQUENCE'
.EXIT    ANOP
         MEND
         MACRO
         DO
         GBLA  &DO(10),&DOSEQ(10),&DOLVL,&DOLAB
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
         LCLA  &N,&M,&S,&LAB1,&L,&I
         LCLA  &UNTIL
         LCLC  &OP,&OPR
         LCLB  &TESTSW
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  MACRO TO ALLOW STRUCTURED PROGRAMMING USING
.*                       IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP
.*                       AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.
         AIF   (&DOLVL EQ 10).ERR1
&N       SETA  N'&SYSLIST
         AIF   (&N LT 1).ERR2
         AIF   ('&SYSLIST(1)' EQ 'END').END
         AIF   ('&SYSLIST(1)' EQ 'FOREVER').WHILE
         AIF   (&N LT 2).ERR2
         AIF   ('&SYSLIST(1)' EQ 'WHILE').WHILE
         AIF   ('&SYSLIST(1)' NE 'UNTIL').ERR3
.UNTIL   ANOP
&DOLVL   SETA  &DOLVL+1
&UNTIL   SETA  &DOLAB+1
&DOLAB   SETA  &DOLAB+2
         B     DO&UNTIL
         AGO   .COMM
.WHILE   ANOP
&DOLVL   SETA  &DOLVL+1
&DOLAB   SETA  &DOLAB+1
.COMM    ANOP
&DOSEQ(&DOLVL) SETA 1
&DO(&DOLVL) SETA &DOLAB
DO&DOLAB EQU   *
         AIF   (&LEVEL EQ 10).ERR1
&LEVEL   SETA  &LEVEL+1
&SEQ(&LEVEL) SETA 1
&LAB     SETA  &LAB+1
&ELSE(&LEVEL) SETA &LAB
         AIF   ('&SYSLIST(1)' EQ 'FOREVER').EXIT
&S       SETA  1
.NEXTAND ANOP
&TESTSW  SETB  0
.TEST    ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).ERR2
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M LT 2).ERR3
         AIF   (&M GT 5).ERR3
&I       SETA  2
&OPR     SETC  ''
&OP      SETC  '&SYSLIST(&S,1)'
         AIF   (&M GT 2).TESTOPR
         &OP
         AGO   .TESTEND
.TESTOPR ANOP
         AIF   ('&SYSLIST(&S,&I)'(1,1) NE '''').NOLIT
&L       SETA  K'&SYSLIST(&S,&I)
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'(2,&L-2)
         AGO   .NEXTOPR
.NOLIT   ANOP
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'
.NEXTOPR ANOP
&I       SETA  &I+1
         AIF   (&I EQ &M).TESTGEN
&OPR     SETC  '&OPR'.','
         AGO   .TESTOPR
.TESTGEN ANOP
         &OP   &OPR
.TESTEND ANOP
         AIF   (&TESTSW EQ 1).ORBC
.AMBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
.CONNECT ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).CHKUNTL
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M NE 1).ERR3  BAD CONNECTOR
         AIF   ('&SYSLIST(&S)' EQ 'AND').NEXTAND
         AIF   ('&SYSLIST(&S)' NE 'OR').ERR3  BAD CONNECTOR
.NEXTOR   ANOP
&LAB1    SETA  &LAB+1
         B     IF0&LAB1  SKIP TEST IF LAST ONE TRUE
IF0&LAB   EQU *          DO TEST IF LAST ONE FALSE
&LAB     SETA  &LAB+2
&ELSE(&LEVEL) SETA &LAB
&TESTSW  SETB  1
         AGO   .TEST
.ORBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
IF0&LAB1 EQU *
         AGO   .CONNECT
.CHKUNTL ANOP
         AIF   (&UNTIL EQ 0).EXIT
&LAB     SETA  &LAB+1
         B     IF0&LAB
IF0&ELSE(&LEVEL) EQU *
&ELSE(&LEVEL) SETA &LAB
DO&UNTIL EQU *
         AGO   .EXIT
.END     ANOP
         AIF   (&N GT 1).ERR3
         AIF   (&DOLVL EQ 0).ERR4
         AIF   (&DOSEQ(&DOLVL) NE 1).ERR4
&DOSEQ(&DOLVL) SETA 0
         B     DO&DO(&DOLVL)
&DOLVL   SETA  &DOLVL-1
IF0&ELSE(&LEVEL) EQU *
&LEVEL   SETA  &LEVEL-1
         AGO   .EXIT
.ERR1    MNOTE 8,'DO - LEVEL OVERFLOW'
         AGO   .EXIT
.ERR2    MNOTE 8,'DO - MISSING OPERAND'
         AGO   .EXIT
.ERR3    MNOTE 8,'DO - INVALID OPERAND'
         AGO   .EXIT
.ERR4    MNOTE 8,'DO - END OUT OF SEQUENCE'
.EXIT    ANOP
         MEND
         MACRO
         EQUBC
H        EQU   2
L        EQU   4
E        EQU   8
NH       EQU   13
NL       EQU   11
NE       EQU   7
O        EQU   1
P        EQU   2
M        EQU   4
Z        EQU   8
NP       EQU   13
NM       EQU   11
NZ       EQU   7
NO       EQU   14
EQ       EQU   8
GT       EQU   2
LT       EQU   4
GE       EQU   11
LE       EQU   13
         MEND
         MACRO
&N       FI
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
         AIF   (&SEQ(&LEVEL) NE 4).CONT
&N       ELSE  END
         MEXIT
.CONT    ANOP
&N       ELSE  CONTINUE
         MEND
         MACRO
&N       PM    &PENTRY
&N       MVC   &PENTRY-2(2),*+10
         B     &PENTRY
         DC    S(*+2)
         MEND
         MACRO
&N       OD
&N       DO    END
         MEND
         MACRO
&N       DOCASE &INDEX
         GBLA  &DOCLVL,&DOCNO(10),&CASENO(10),&DOCELSE(10),&DOCNT
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     07/02/74.
.*             REMARKS.  SELECTION CONTROL STRUCTURE.
.*                       SEE DOCASE, CASE, ESAC, AND ESACOD.
.*                       SEE 'STRUCTURED FORTRAN TRANSLATOR' IN
.*                       IN 1975 FEBRUARY ACM SIGPLAN NOTICES.
         AIF   (T'&INDEX EQ 'U').REG
&N       ZR    R15
         IC    R15,&INDEX
         AGO   .PROC
.REG     ANOP
&N       LR    R15,&INDEX
.PROC    ANOP
         AIF   (&DOCLVL EQ 10).ERR1
&DOCLVL  SETA  &DOCLVL+1
&DOCNT   SETA  &DOCNT+1
&DOCNO(&DOCLVL) SETA &DOCNT
&CASENO(&DOCLVL) SETA 0
&DOCELSE(&DOCLVL) SETA 0
         IC    R15,CASEI&DOCNO(&DOCLVL).(R15)
         L     R15,CASEA&DOCNO(&DOCLVL).(R15)
         BR    R15
CASEI&DOCNO(&DOCLVL) DC 256X'00'
         MEXIT
.ERR1    MNOTE 8,'DOCASE NESTED LEVELS EXCEEDED'
         MEND
         MACRO
         CASE
         GBLA  &DOCLVL,&DOCNO(10),&CASENO(10),&DOCELSE(10),&DOCNT
         LCLA  &N,&M,&L,&H
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     07/02/74.
.*             REMARKS.  SELECTION CONTROL STRUCTURE.
.*                       SEE DOCASE, CASE, ESAC, AND ESACOD.
.*                       SEE 'STRUCTURED FORTRAN TRANSLATOR' IN
.*                       IN 1975 FEBRUARY ACM SIGPLAN NOTICES.
.*             REV1 05/24/76 DSH - ALLOW SYMBOLIC FOR CASE VALUE.
         AIF   (&DOCLVL LT 1).ERR1
&N       SETA  N'&SYSLIST
         AIF   (&N GT 1).CHKN
&N       SETA  N'&SYSLIST(1)
         AIF   (&N GT 1).CHKN
         AIF   ('&SYSLIST(1)' EQ 'ELSE').ELSE
         AIF   ('&SYSLIST(1)' NE 'MISC').CHKN
.ELSE    AIF   (&DOCELSE(&DOCLVL) GT 0).ERR3
&DOCELSE(&DOCLVL) SETA 1
DC&DOCNO(&DOCLVL)ELSE DS 0H
         MEXIT
.CHKN    ANOP
         AIF   (&CASENO(&DOCLVL) EQ 63).ERR7
&CASENO(&DOCLVL) SETA &CASENO(&DOCLVL)+1
.MLOOP   ANOP
&M       SETA  &M+1
         AIF   (&M GT &N).GENL
&L       SETA  N'&SYSLIST(&M)
         AIF   (&L LT 1).MLOOP
         AIF   (&L GT 2).ERR4
         AIF   (&L EQ 1).GEN1
         AIF   (T'&SYSLIST(&M,1) NE 'N').ERR5
         AIF   (T'&SYSLIST(&M,2) NE 'N').ERR5
&L       SETA  &SYSLIST(&M,1)
&H       SETA  &SYSLIST(&M,2)
         AIF   (&L GT &H).ERR6
         AIF   (&H GT 255).ERR6
         AIF   (&L LT 1).ERR6
         ORG   CASEI&DOCNO(&DOCLVL)+&L
         DC    (&H-&L+1)AL1(&CASENO(&DOCLVL)*4)
         AGO   .MLOOP
.GEN1    ANOP
         ORG   CASEI&DOCNO(&DOCLVL)+&SYSLIST(&M)
         DC    AL1(&CASENO(&DOCLVL)*4)
         AGO   .MLOOP
.GENL    ANOP
         ORG
DC&DOCNO(&DOCLVL)C&CASENO(&DOCLVL) DS 0H
         MEXIT
.ERR1    MNOTE 8,'CASE - MISSING DOCASE'
         MEXIT
.ERR2    MNOTE 8,'CASE - INVALID OPERAND'
         MEXIT
.ERR3    MNOTE 8,'CASE - DUPLICATE ELSE CASE'
         MEXIT
.ERR4    MNOTE 8,'CASE - MORE THAN 2 SUBLIST OPERANDS'
         MEXIT
.ERR5    MNOTE 8,'CASE - OPERAND NOT SELF DEFINING TERM'
         MEXIT
.ERR6    MNOTE 8,'CASE - OPERAND NOT IN RANGE 1-255'
         MEXIT
.ERR7    MNOTE 8,'CASE - MAXIMUM OF 63 CASES EXCEEDED'
         MEXIT
         MEND
         MACRO
&N       ESAC
         GBLA  &DOCLVL,&DOCNO(10),&CASENO(10),&DOCELSE(10),&DOCNT
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     07/02/74.
.*             REMARKS.  SELECTION CONTROL STRUCTURE.
.*                       SEE DOCASE, CASE, ESAC, AND ESACOD.
.*                       SEE 'STRUCTURED FORTRAN TRANSLATOR' IN
.*                       IN 1975 FEBRUARY ACM SIGPLAN NOTICES.
&N       B     DC&DOCNO(&DOCLVL).END
         MEND
         MACRO
         ESACOD
         GBLA  &DOCLVL,&DOCNO(10),&CASENO(10),&DOCELSE(10),&DOCNT
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     07/02/74.
.*             REMARKS.  SELECTION CONTROL STRUCTURE.
.*                       SEE DOCASE, CASE, ESAC, AND ESACOD.
.*                       SEE 'STRUCTURED FORTRAN TRANSLATOR' IN
.*                       IN 1975 FEBRUARY ACM SIGPLAN NOTICES.
         LCLA  &C
         AIF   (&DOCLVL LT 1).ERR1
CASEA&DOCNO(&DOCLVL) DS 0F
         AIF   (&DOCELSE(&DOCLVL) GT 0).GENELSE
         DC    A(DC&DOCNO(&DOCLVL).END)
         AGO   .GENCASE
.GENELSE ANOP
         DC    A(DC&DOCNO(&DOCLVL).ELSE)
.GENCASE ANOP
&C       SETA  &C+1
         AIF   (&C GT &CASENO(&DOCLVL)).GEND
         DC    A(DC&DOCNO(&DOCLVL).C&C)
         AGO   .GENCASE
.GEND    ANOP
DC&DOCNO(&DOCLVL).END EQU *
&DOCLVL SETA &DOCLVL-1
         MEXIT
.ERR1    MNOTE 8,'ESACOD - MISSING DOCASE'
         MEND
         MACRO
&NAME    LOGICAL
.*             PGMID.    LOGICAL VARIABLE DEFINITION AND ENUMERATION
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/27/74.
.*             REMARKS.  DEFINES A LOGICAL VARIABLE AS A ONE BYTE
.*                       AL1 FIELD WITH AN INITIAL VALUE AND STORES
.*                       IN GLOBAL TABLE POSSIBLE VALUES BY NAME.
.*                       ALL NAMES ARE EQUATED TO UNIQUE VALUES FOR
.*                       USE IN TEST AND SET STATEMENTS.
         GBLC  &LOGICN(100)
         GBLA  &LOGICV
         LCLA  &N,&S,&SL
&N       SETA  N'&SYSLIST(2)
.L1      ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).GENDC
&SL      SETA  0
.L2      ANOP
&SL      SETA  &SL+1
         AIF   (&SL GT &LOGICV).GENEQU
         AIF   ('&SYSLIST(2,&S)' EQ '&LOGICN(&SL)').L1
         AGO   .L2
.GENEQU  ANOP
&LOGICV  SETA  &LOGICV+1
&LOGICN(&LOGICV) SETC '&SYSLIST(2,&S)'
&SYSLIST(2,&S) EQU &LOGICV
         AGO   .L1
.GENDC   ANOP
&NAME    DC    AL1(&SYSLIST(1))
         MEND
         MACRO
&VLABEL  DCWV  &VNAME
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/03/74.
.*             REMARKS.  DEFINE VERY WEAK V TYPE ADDRESS WHICH IS
.*                       SET BY DYNAMICALLY LOADING NAMED MODULE
.*                       THE FIRST TIME THE V ADDRESS IS USED.
DCWV&SYSNDX DS 0H
         USING DCWV&SYSNDX,R15     ENTER HERE ON FIRST USE OF VLABEL
         STM   R14,R2,&VLABEL+12   SAVE REGS USED BY LOAD
         LR    R2,R15              NEW BASE
         DROP  R15
         USING DCWV&SYSNDX,R2
         FINDCDE EPLOC=&VLABEL+4
         IF    (LTR,R1,R1,Z)
               LOAD EPLOC=&VLABEL+4
         ELSE
               L    R0,16(R1) GET CDE ENTRY
         FI
         ST    R0,&VLABEL          STORE ENTRY POINT IN VLABEL
         LR    R15,R0              SET R15 TO CORRECT ENTRY POINT
         L     R14,&VLABEL+12      RESTORE REGS
         LM    R0,R2,&VLABEL+20
         BR    R15                 ENTER VNAME FIRST TIME
&VLABEL  DC    A(DCWV&SYSNDX)      VERY WEAK V ADDRESS
         DC    CL8'&VNAME'         NAME OF MODULE
         DC    5F'0'               SAVE AREA
         MEND
         MACRO
&N       LOADTCB &R
&N       L     &R,16     CVT
         L     &R,0(&R)  TCB WORDS
         L     &R,4(&R)  TCB
         MEND
         MACRO
&N       LOADTIOT &R
&N       LOADTCB &R
         L     &R,12(&R) TIOT ADDRESS FROM TCB
         MEND
         MACRO
&N       FINDDD &DDNAME
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/06/74.
.*             REMARKS.  SET R1 TO ADDRESS OF TIOT DDNAME ENTRY OR 0.
.*             EXAMPLE.  FINDDD =CL8'CALLLIB'
&N       LOADTIOT R14
         AAI   R14,24
         LA    R15,&DDNAME
         ZR    R0
         ZR    R1
         IC    R0,0(R14)
         DO    WHILE,(LTR,R0,R0,P)
               IF   (CLC,4(8,R14),0(R15),EQ)
                    LR   R1,R14
                    ZR   R0
               ELSE
                    AR   R14,R0
                    IC   R0,0(R14)
               FI
         OD
         MEND
         MACRO
&NAME    ACCEPT &REC,&DDNAME=SYSIN
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/19/74.
.*             REMARKS.  ACCEPT RECORD IF DD AVAILABLE.
.*                       REC MAY GE REGISTER OR LABEL OF RECORD AREA.
.*                      R15=0 SUCCESSFUL READ.
.*                      R15=4 EOF OR NO DD FOUND.
&NAME    TAG
ACC1&SYSNDX B  *+4
         FINDDD =CL8'&DDNAME'
         IF    (LTR,R1,R1,Z)
               WTO  '&DDNAME NOT FOUND'
ACC2&SYSNDX    LA   R15,4
               MVC  ACC1&SYSNDX+2(2),=S(ACC2&SYSNDX)
               B    ACC4&SYSNDX
         FI
         MVC   ACC1&SYSNDX+2(2),=S(ACC3&SYSNDX)
         OPEN  (&DDNAME)
         B     ACC3&SYSNDX
&DDNAME  DCB   DSORG=PS,MACRF=GL,DDNAME=&DDNAME,EODAD=ACC2&SYSNDX
ACC3&SYSNDX GET &DDNAME
         AIF   ('&REC'(1,1) EQ '(').REG
         MVC   &REC,0(R1)
         ZR    R15
         AGO   .EXIT
.REG     ANOP
         LR    &REC,R1
         ZR    R15
.EXIT    ANOP
ACC4&SYSNDX TAG
         MEND
         MACRO
&NAME    DISPLAY &REC,&DDNAME=SYSOUT,&RECFM=FA,&BLKSIZE=133
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/18/74.
.*             REMARKS.  DISPLAY RECORD IF DD AVAILABLE.
.*                       REC MAY BE REGISTER OR LABEL OF REC.
.*                      R15=0 IS SUCCESSFUL
.*                      R15=4 NO DD FOUND
&NAME    TAG
DSP1&SYSNDX B  *+4
         FINDDD =CL8'&DDNAME'
         IF    (LTR,R1,R1,Z)
               WTO  '&DDNAME NOT FOUND'
               MVC  DSP1&SYSNDX+2(2),=S(DSP2&SYSNDX)
DSP2&SYSNDX    LA   R15,4
               B    DSP4&SYSNDX
         FI
         MVC   DSP1&SYSNDX+2(2),=S(DSP3&SYSNDX)
         OPEN  (&DDNAME,(OUTPUT))
         B     DSP3&SYSNDX
&DDNAME  DCB   DSORG=PS,MACRF=PM,DDNAME=&DDNAME,                       X
               RECFM=&RECFM,BLKSIZE=&BLKSIZE
DSP3&SYSNDX TAG
         AIF   ('&REC'(1,1) EQ '(').REG
         LA    R0,&REC
         AGO   .PUT
.REG     ANOP
         LR    R0,&REC
.PUT     ANOP
         PUT   &DDNAME
         ZR    R15
DSP4&SYSNDX TAG
         MEND
         MACRO
&N      TPPUTMSG &TERM,&MSG,&LMSG
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     11/27/74.
.*             REMARKS.  ROUTE TERMINAL MESSAGE TO TPPUT.
.*                            TERM - TERMINAL NAME FIELD OR LITERAL
.*                            MSG  - MESSAGE FIELD OR LITERAL
.*                            LMSG - FULL WORD BINARY LENGTH (OPTIONAL)
         LCLA  &L
         CNOP  0,4
&N       BAL   1,*+16
.CHKT1   AIF   ('&TERM'(1,1) EQ '''').TERMLIT
         DC    A(&TERM)
         AGO   .CHKM1
.TERMLIT ANOP
         DC    A(0)
.CHKM1   AIF   ('&MSG'(1,1) EQ '''').MSGLIT
         DC    A(&MSG)
         AGO   .CHKL
.MSGLIT  ANOP
         DC    A(0)
.CHKL    AIF   (T'&LMSG EQ 'O').LCALC
         DC    A(&LMSG)
         AGO   .CHKT2
.LCALC   ANOP
         DC    A(0)
         AIF   ('&MSG'(1,1) EQ '''').LCALCL
&L       SETA  L'&MSG
         LA    0,=A(&L)
         ST    0,8(1)
         AGO   .CHKT2
.LCALCL  ANOP
&L       SETA  K'&MSG-2
         LA    0,=A(&L)
         ST    0,8(1)
.CHKT2   AIF   ('&TERM'(1,1) NE '''').CHKM2
         LA    0,=C&TERM
         ST    0,0(1)
         AGO   .CALL
.CHKM2   AIF   ('&MSG'(1,1) NE '''').CALL
         LA    0,=C&MSG
         ST    0,4(1)
.CALL    ANOP
         L     15,=V(TPPUT)
         BALR  14,15
         MEND
         MACRO
&N       TRTTAB &TYPE,&BAD=X'FF',&GOOD=X'00',&SKIP=,&FIND=,&FILL=C' '
         AIF   ('&TYPE' EQ 'PRINT').PRINT
         AIF   ('&TYPE' EQ 'NUMERIC').NUMERIC
         AIF   ('&TYPE' EQ 'ALPHA').ALPHA
         AIF   ('&TYPE' EQ 'ALPHANUM').ALPHAN
         AIF   ('&TYPE' EQ 'ZFILL').ZFILL
         AIF   ('&TYPE' EQ 'BAD').BAD
         AIF   ('&TYPE' EQ 'GOOD').GOOD
         AIF   ('&TYPE' EQ 'SCAN').SCAN
         MNOTE 8,'TABLE TYPE INVALID'
         MEXIT
.PRINT   ANOP
&N       DC    (X'49'-X'00'+1)&FILL
         DC    (X'50'-X'4A'+1)AL1(*-&N)
         DC    (X'59'-X'51'+1)&FILL
         DC    (X'61'-X'5A'+1)AL1(*-&N)
         DC    (X'6A'-X'62'+1)&FILL
         DC    (X'6F'-X'6B'+1)AL1(*-&N)
         DC    (X'79'-X'70'+1)&FILL
         DC    (X'7F'-X'7A'+1)AL1(*-&N)
         DC    (X'C0'-X'80'+1)&FILL
         DC    (X'C9'-X'C1'+1)AL1(*-&N)
         DC    (X'D0'-X'CA'+1)&FILL
         DC    (X'D9'-X'D1'+1)AL1(*-&N)
         DC    (X'E1'-X'DA'+1)&FILL
         DC    (X'E9'-X'E2'+1)AL1(*-&N)
         DC    (X'EF'-X'EA'+1)&FILL
         DC    (X'F9'-X'F0'+1)AL1(*-&N)
         DC    (X'FF'-X'FA'+1)&FILL
         MEXIT
.NUMERIC ANOP
&N       DC    240&BAD,10&GOOD,6&BAD
         MEXIT
.ALPHA   ANOP
&N       DC    193&BAD,9&GOOD,7&BAD,9&GOOD,8&BAD,8&GOOD
         DC    22&BAD
         MEXIT
.ALPHAN  ANOP
&N       DC    193&BAD,9&GOOD,7&BAD,9&GOOD,8&BAD,8&GOOD
         DC    6&BAD,10&GOOD,6&BAD
         MEXIT
.ZFILL   ANOP
&N       DC    64AL1(*-&N),C'0',191AL1(*-&N)
         MEXIT
.BAD     ANOP
&N       DC    256&BAD
         MEXIT
.GOOD    ANOP
&N       DC    256&GOOD
         MEXIT
.SCAN    ANOP
         AIF   (T'&SKIP NE 'O').SKIP
         AIF   (T'&FIND NE 'O').FIND
         MNOTE 8,'TRT SCAN SKIP OR FIND CHARACTER NOT FOUND'
         MEXIT
.SKIP    ANOP
&N       DC    256&BAD
         ORG   &N+&SKIP
         DC    &GOOD
         ORG
         MEXIT
.FIND    ANOP
&N       DC    256&GOOD
         ORG   &N+&FIND
         DC    &BAD
         ORG
         MEXIT
         MEND
         MACRO
&N       PTRACE &DDNAME=PTRACE
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     01/06/75.
.*             REMARKS.  GENERATE TRACE OF EACH PENTRY NAME ENTERED.
.*                       THIS MACRO SHOULD BE PLACED AS FIRST
.*                       EXECUTABLE STATEMENT IN PROGRAM.
.*                       REMOVE AFTER TESTING TO ELIMINATE OVERHEAD.
         GBLB  &PTRACE
         GBLC  &PTNAME
&PTRACE  SETB  1
&PTNAME  SETC  'PENT&SYSNDX'
&N       B     PEND&SYSNDX
         B     *+4
PENT&SYSNDX  EQU *
         STM   R14,R1,PSAV&SYSNDX
         MVC   *+6+2(2),PENT&SYSNDX-2
         LA    R1,*-*
         SH    R1,=H'24'
         MVC   PMSG&SYSNDX+1(8),0(R1)
         DISPLAY PMSG&SYSNDX,DDNAME=&DDNAME
         LM    R14,R1,PSAV&SYSNDX
         B     PENT&SYSNDX-4
PMSG&SYSNDX DC CL133' '
PSAV&SYSNDX DC 4F'0'
PEND&SYSNDX EQU *
         MEND
         MACRO
&N       FINDCDE &EP=0,&EPLOC=0
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     01/10/75.
.*             REMARKS.  SET R1 TO CDE ADDRESS OR ZERO
         AIF   ('&EP'(1,1) EQ '0').EPLOC
.EP      ANOP
         BAL   R14,*+12
         DC    CL8'&EP'
         AGO   .FIND
.EPLOC   ANOP
         LA    R14,&EPLOC
.FIND    ANOP
         LOADTCB R15
         ZR    R1
         L     R15,36(R15) TCBLLS FE PG 289
         DO    WHILE,(LTR,R15,R15,NZ)
               L    R1,4(R15)      LLE CDE ADDRESS FE PG 280
               IF   (CLC,8(8,R1),0(R14),EQ)
                    ZR   R15
               ELSE
                    L    R15,0(R15)
                    ZR   R1
               FI
         OD
         MEND
         MACRO
&N       DOEXIT
         GBLA  &DO(10),&DOSEQ(10),&DOLVL,&DOLAB
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     01/29/75.
.*             REMARKS.  EXIT TO END OF CURRENT DO LOOP.
         AIF   (&DOLVL EQ 0).ERR1
         B     IF0&ELSE(&LEVEL)
         MEXIT
.ERR1    MNOTE 8,'DOEXIT NOT WITHIN DO LOOP'
         MEND
         MACRO
&N       HDC   &HLINE,&HCOL,&HDATA
         ORG   &HLINE+&HCOL
         AIF   (T'&HDATA EQ 'O').EXIT
&N       DC    &HDATA
.EXIT    ANOP
         MEND
         MACRO
&N       ABSP  &P
         LCLA  &LP
&LP      SETA  L'&P
&N       OI    &P+&LP-1,X'0F' MAKE PACKED FIELD POSITIVE
         MEND
         MACRO
         XVBT3C
CLGDSECT DSECT
*              AUTHOR.   DON HIGGINS.
*              DATE.     04/04/75.
*              REMARKS.  RECORD CREATED BY GETCATLG (GU027000).
CLGVOL   DS    CL6       VOLUME
CLGDSN   DS    CL44      DATA SET NAME, CONNECT, INDEX, ALIAS, ETC.
CLGTYP   DS    CL1       1-DSN,2-CONNX,3-GDS,4-ALIAS,5-INDEX
CLGDEV   DS    XL4       DEVICE CODE
CLGDSNSQ DS    XL2       DATA SET SEQUENCE
CLGVOLSQ DS    XL2       VOLUME SEQUENCE
CLGGDSOP DS    BL1       X'02'-DELETE,X'01'-EMPTY OPTION
CLGGDSMX DS    XL1       MAXIMUM GDS DATA SET COUNT
CLGGDSCR DS    XL2       CURRENT GDS DATA SET COUNT
         MEND
         MACRO
         QCBD
*
*              ENQ/DEQ CONTROL BLOCKS  (SEE IEAVENQ1 IGC056)
*
*
*              MAJOR QCB
*
QCBMAJ   DSECT
QMJNEXT  DS    A    NEXT MAJOR QCB
QMJPREV  DS    A    PREVIOUS MAJOR QCB
QMJMINOR DS    A    FIRST MINOR QCB
QMJNAME  DS    CL8  MAJOR QCB NAME
QMJLNE   EQU   *-QCBMAJ
*
*              MINOR QCB
*
QCBMIN   DSECT
QMNQEL   DS    A    FIRST QUEUE ELEMENT
QMNPREV  DS    A    PREVIOUS MINOR QCB
QMNNEXT  DS    A    NEXT MINOR QCB
QMNLNM   DS    B    LENGTH OF RANME
QMNLSQA  DS    X    TYPE OF ENG
QMNSYS   EQU   255
QMNSYSMS EQU   254
*                   ANY OTHER VALUE IS STEP (TCBLSQA VALUE)
QMNNAME  DS    C
*
*              QUEUE ELEMENT
*
QEL      DSECT
QELNQEL  DS    A    NEXT QEL
QELSMC   EQU   QELNQEL       MUST COMPLETE INDICATORS
QELSYSMC EQU   X'20'     SYSTEM MUST COMPLETE
QELSTPMC EQU   X'10'     STEP MUST COMPLETE
QELLQEL  DS    A    PREVIOUS QEL
QELCODE  EQU   QELLQEL   TYPE OF REQUEST
QELSHAR  EQU   X'80'     SHARED
QELRESV  EQU   X'40'     RESERVED
QELRBWT  EQU   X'20'     DEFER SVRB PROCESSING UNTIL SWAP
QELNQECB EQU   X'10'     ENQ WITH ECB FOR WAIT
QELRLSE  EQU   X'08'     DELAYED RELEASE
QELEXCP  EQU   X'04'     EXCP INITIATED TO RELEASE DEVICE
QELSTAT  EQU   X'02'     STATUS SET PENDING
QELABND  EQU   X'01'     QEL FOR TASK IN ABEND
QELTCB   DS    A    TCB FOR ENQ
QELTJID1 EQU   QELTCB    FIRST BYTE OF TSO USER ID
QELSVRB  DS    A    SVRB/UCB FOR ENQ
QELTJID2 EQU   QELSVRB   SECOND BYTE OF TSO USER ID
         MEND
         MACRO
&N       SDCB  &M=PM,&R=FBA,&L=133,&B=0,&E=1
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/29/75.
.*             REMARKS.  SHORT FORM OF COMMONLY USED DCB WITH EXIT TO
.*                       PLUG ZERO BLKSIZE WITH LRECL.
         DS    0A
         DC    X'85',AL3(*+3) DCB EXIT LIST
         OC    62(2,1),62(1)       IS BLKSIZE = 0
         BCR   7,14                NO, EXIT NOW
         MVC   62(2,1),82(1)       YES, BLKSIZE=LRECL
         BR    14                  EXIT
         DC    CL8'&N'        DCB NAME FOR DUMP VERIFICATION
&N       DCB   EXLST=&N-28,DSORG=PS,DDNAME=&N,                         X
               MACRF=&M,RECFM=&R,LRECL=&L,BLKSIZE=&B,EODAD=&E
         MEND
         MACRO
         ELSEIF
         GBLA  &ELSE(10),&SEQ(10),&LEVEL,&LAB
         GBLA  &ELSEIF(10)
         LCLA  &N,&M,&S,&LAB1,&L,&I
         LCLC  &OP,&OPR
         LCLB  &TESTSW
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     05/23/76.
.*             REMARKS.  CONTROL STRUCTURE FOR CONDITIONAL EXECUTION.
         AIF   (&LEVEL EQ 10).ERR1
         ELSE
&LEVEL   SETA  &LEVEL+1
&ELSEIF(&LEVEL) SETA 1
&SEQ(&LEVEL) SETA 1
&LAB     SETA  &LAB+1
&ELSE(&LEVEL) SETA &LAB
&N       SETA N'&SYSLIST
.NEXTAND ANOP
&TESTSW  SETB  0
.TEST    ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).ERR2
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M EQ 1).TESTEND
         AIF   (&M LT 2).ERR3
         AIF   (&M GT 5).ERR4
&I       SETA  2
&OPR     SETC  ''
&OP      SETC  '&SYSLIST(&S,1)'
         AIF   (&M GT 2).TESTOPR
         &OP
         AGO   .TESTEND
.TESTOPR ANOP
         AIF   ('&SYSLIST(&S,&I)'(1,1) NE '''').NOLIT
&L       SETA  K'&SYSLIST(&S,&I)
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'(2,&L-2)
         AGO   .NEXTOPR
.NOLIT   ANOP
&OPR     SETC  '&OPR'.'&SYSLIST(&S,&I)'
.NEXTOPR ANOP
&I       SETA  &I+1
         AIF   (&I EQ &M).TESTGEN
&OPR     SETC  '&OPR'.','
         AGO   .TESTOPR
.TESTGEN ANOP
         &OP   &OPR
.TESTEND ANOP
         AIF   (&TESTSW EQ 1).ORBC
.AMBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
.CONNECT ANOP
&S       SETA  &S+1
         AIF   (&S GT &N).EXIT
&M       SETA  N'&SYSLIST(&S)
         AIF   (&M NE 1).ERR5  BAD CONNECTOR
         AIF   ('&SYSLIST(&S)' EQ 'AND').NEXTAND
         AIF   ('&SYSLIST(&S)' NE 'OR').ERR5  BAD CONNECTOR
.NEXTOR   ANOP
&LAB1    SETA  &LAB+1
         B     IF0&LAB1  SKIP TEST IF LAST ONE TRUE
IF0&LAB   EQU *          DO TEST IF LAST ONE FALSE
&LAB     SETA  &LAB+2
&ELSE(&LEVEL) SETA &LAB
&TESTSW  SETB  1
         AGO   .TEST
.ORBC    ANOP
         BC    15-&SYSLIST(&S,&M),IF0&LAB
IF0&LAB1 EQU *
         AGO   .CONNECT
.ERR1    MNOTE 8,'IF - LEVEL OVERFLOW'
         AGO   .EXIT
.ERR2    MNOTE 8,'IF - MISSING TEST LIST'
         AGO   .EXIT
.ERR3    MNOTE 8,'IF - TEST LIST TOO SHORT'
         AGO   .EXIT
.ERR4    MNOTE 8,'IF - TEST LIST TOO LONG'
         AGO   .EXIT
.ERR5    MNOTE 8,'IF - INVALID CONNECTOR'
.EXIT    ANOP
         MEND
*          DATA SET CBT848     AT LEVEL 003 AS OF 10/02/77
*          DATA SET GU014300   AT LEVEL 007 AS OF 01/25/73
GETPDSDE SUBENTRY
*              AUTHOR.   DON HIGGINS.
*              DATE.     11/11/72.
*              REMARKS.  GET NEXT DIRECTORY ENTRY NAME FROM PDS
*                        DIRECTORY.
*
*                        ARGUMENTS
*
*                          1. ADDRESS OF DCB FOR PDS DIRECTORY. IT
*                             MUST HAVE FOLLOWING CHARACTERISTICS AND
*                             BE OPEN FOR INPUT WITH NO EDDAD
*
*                             PDSDCB DCB DSORG=PS,MACRF=GL,         X
*                                        RECFM=F,BLKSIZE=256,       X
*                                            LRECL=256
*                                        DDNAME=XXXXXXXX
*                          2. ADDRESS OF END OF DIRECTORY ROUTINE
*
*                          3.  ADDRESS OF FULL WORD WHERE ADDRESS OF
*                              NEXT DE ENTRY NAME WILL BE PLACED.
*
*                        THIS ROUTINE IS REUSEABLE AND MAY BE USED
*                        TO READ SEVERAL DIRECTORIES CONCURRENTLY.
*
*
         LM    R2,R4,0(R1)
         USING IHADCB,R2
         L     R5,DCBEODAD
         TM    DCBEODAD+3,X'03'         IS IT ODD
         BZ    RELOAD                   NO, RELOAD LOD REGS
         LA    R0,WKLENGTH
         GETMAIN R,LV=(0)          NO,  GET WORKAREA
         LR    R5,R1
         USING WORKAREA,R5         R5=A(ADDR OF AREA SAVED IN EODAD)
         ST    R5,WKADDR           PUT ADDRESS OF AREA IN AREA FOR MVC
         XC    WKREGS,WKREGS       CLEAR AREA FOR WORK REGS
RELOAD   TAG
         LM    R6,R9,WKREGS        RELOAD
         AR    R6,R9               R6=A(NEXT ENTRY)
TESTEOB  CR    R6,R7               IS IT END OF BLOCK
         BNL   NEXTBLK             YES, GET NEXT BLOCK
         CLI   0(R6),X'FF'              IS IT END OF DIRECTORY
         BE    EOF                      YES, GO TO EOF
         ST    R6,0(R4)            STORE ADDRESS OF DE
         NI    11(R6),X'1F'        TURN OFF ALIAS AND POINT CNT BITS
         IC    R8,11(R6)
         LA    R9,12(R8,R8)        R9=12 + 2 X (HALF WORDS)
         STM   R6,R9,WKREGS        SAVE WORK REGS
         SUBEXIT
NEXTBLK  TAG
         MVC   DCBEODAD+1(3),=AL3(EOF)  SET LOCAL EOF IN DCB
         GET   (R2)                     GET NEXT BLOCK
         LR    R6,R1                    R6=A(BLOCK)
         MVC   WKREGS(2),0(R6)          ALIGN HALF WORK BLOCK LENGTH
         LH    R9,WKREGS           R9=LENGTH OF BLOCK
         LA    R7,0(R6,R9)         R7=A(END OF BLOCK)
         LA    R6,2(R6)            R6=A(FIRST ENTRY)
         MVC   DCBEODAD+1(3),WKADDR+1   SAVE WORK AREA ADDR IN EODAD
         B     TESTEOB                  PROCESS BLOCK
EOF      TAG
         MVC   DCBEODAD+1(3),=AL3(1) RESET EODAD
         LA    R0,WKLENGTH
         LR    R1,R5
         FREEMAIN R,LV=(0),A=(1)        FREE WORKAREA
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         L     R14,4(R1)
         BR    R14                 EXIT TO EOF ADDRESS
         LTORG
         EQUREGS
         DCBD  DSORG=PS
WORKAREA DSECT
WKADDR   DS    F                   ADDRESS OF GETMAIN WORKAREA
WKREGS   DS    0XL16
         DS    F                   R6=A(CURRENT DE)
         DS    F                   R7=A(END OF BLOCK)
         DS    F                   R8=INSERT WORK REG
         DS    F                   R9=LENGTH OF DE
WKLENGTH EQU   *-WORKAREA
         END   GETPDSDE
