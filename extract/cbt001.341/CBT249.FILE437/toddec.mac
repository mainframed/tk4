TOD      TITLE 'TOD CONVERSION ROUTINE'
*        FUNCTION - THIS ROUTINE WILL CONVERT A 370 TOD TIME TO THE
*        VALUE RETURNED BY THE TIME SVC FOR DECIMAL OR BINARY TOD
*
*        ZERO TIME - JAN 1 1960 MVT OR JAN 1 1900 VS
*              JAN 1 1900 IS USED IF 1ST BIT OF TOD VALUE IS 1
*
*        ATTRIBUTES - REENTRANT
*              (DOUBLE WORD WORKAREA OBTAINED FROM SAVEAREA)
*
*        INPUT - R1 POINTS TO ADDRESS OF 8 BYTE TOD TIME
*
*        OUTPUT - R0 WILL CONTAIN TIME OF DAY
*                 R1 WILL CONTAIN STD SERIAL DAY & YEAR
*                 (SAME FORMAT AS TIME SVC)
*
*
*        DECIMAL TIME ENTRY POINT
*
TODDEC   CSECT
         USING TODDEC,R15
         SR    R0,R0               SET DECIMAL ENTRY FLAG REG
         LA    R15,BASE(R15)       SET BASE REG TO 2ND ENTRY POINT
         USING TODBIN,R15
         B     TODCOM              GO TO COMMON CODE
*
*        BINARY TIME ENTRY POINT
*
         ENTRY TODBIN
TODBIN   LA    R0,1                SET BINARY ENTRY POINT FLAG REG
BASE     EQU   TODBIN-TODDEC       BASE REG DISPLACEMENT ORIGIN
*
*        INITIALIZE ROUTINE
*
TODCOM   SAVE  (2,9)               SAVE WORK REGS
         USING SAVEAREA,R13
GETWORK  EQU   *
         LA    R9,FREESAVE+7       GET ADDR OF WORKAREA IN SAVEAREA
         N     R9,DBLMASK          SET BASE TO DOUBLE WORD
         USING WORKAREA,R9
*
*        CONVERT TOD ARG TO TIME & DATE
*
LOADARG  L     R4,0(R1)            LOAD INPUT ARG ADDRESS
         LM    R2,R3,0(R4)         LOAD TOD VALUE
         STCM  R2,8,12(R13)        SAVE 1ST BYTE OF TOD FOR EPOCH TEST
         SRDL  R2,12               SHIFT TO MICROSECONDS
*
*        SEPARATE TIME OF DAY FROM DATE
*
         D     R2,MICROMIN         FIND MINUTES SINCE ZERO TIME
         LR    R8,R2               SAVE MICROSECONDS SINCE LAST MINUTE
         SR    R2,R2               ZERO FOR DIVISION
         D     R2,MINPRDAY         FIND DAYS SINCE ZERO TIME
         LR    R7,R2               SAVE MINUTES OF DAY
         SR    R2,R2               ZERO REMAINDER
         LA    R3,1(R3)            BUMP DAY RELATIVE TO JAN 1 (MVT)
         TM    12(R13),X'80'       IS 1ST BIT OF TOD VALUE ON
         BZ    CONVDATE            IF NOT ASSUME MVT EPOCH
         SPACE
*        EXTRA DAY CORRECTION FOR GMT DIFF OF 0 HOURS
         SPACE
         ENTRY ONEDAYSW
ONEDAYSW B     NODAYINC            SKIP NEXT ISN UNLESS ZAPPED
         LA    R3,1(R3)            BUMP DAY 1 MORE FOR VS EPOCH
NODAYINC EQU   *
*
*        CONVERT DATE TO YEAR & SERIAL DAY
*
CONVDATE D     R2,DAYPRYR          FIND SERIAL DAY & YRS SINCE ZERO
         LR    R5,R3               COPY YEAR FOR LEAP YEAR CHECK
         SR    R4,R4               ZERO FDR DIVISION
         D     R4,YRPRLEAP         FIND NUMBER OF LEAP YEARS
         SR    R2,R5               DECR DAY BY LEAP YEAR COUNT
         BP    SETYEAR             IF POS, DAY & YEAR ARE OK
         A     R2,DAYPRYR          RAISE DAY TO POSITIVE VALUE
         BCTR  R3,0                DECREMENT YEAR
SETYEAR  TM    12(R13),X'80'       IS 1ST BIT OF TOD VALUE ON
         BO    VSYEAR              IF YES ASSUME VS EPOCH 1900
MVTYEAR  A     R3,ZEROYEAR         RAISE YEAR TO TRUE VALUE
VSYEAR   CVD   R3,WORK             CONVERT YEAR TO DECIMAL
         L     R1,WORK+4           LOAD YEAR INTO PARM REG
         SRL   R1,4                SHIFT OUT SIGN FIELD
         SLL   R1,16               REPOSITION FOR DAY INSERTION
         CVD   R2,WORK             CONVERT DAY OF YEAR TO DECIMAL
         OI    WORK+7,15           CHANGE SIGN FIELD FROM C TO F
         AL    R1,WORK+4           INSERT DAY INTO PARM REG
*
*        CONVERT TIME OF DAY
*
CONVTIME SR    R6,R6               ZERO FOR DIVISION
         LTR   R0,R0               WAS ENTRY FOR DECIMAL TIME
         BZ    CONVDEC             IF YES GO FIND DECIMAL TIME
*
*        CONVERT TIME TO BINARY HUNDREDTHS OF SECONDS
*
CONVBIN  MH    R7,H6000            CHANGE MINUTES TO HUNDREDTHS OF SEC
         LR    R0,R7               SHIFT TO PARM REG
         LR    R7,R8               LOAD MICROSEC SINCE LAST MINUTE
         D     R6,F10000           CONVERT TO HUNDREDTHS OF SEC
         AR    R0,R7               ADD TO PARM REG
         B     RETURN              GO RETURN TO CALLER
*
*        CONVERT TIME TO HHMMSSTH
*
CONVDEC  D     R6,MINPRHR          FIND HOUR OF DAY
         CVD   R7,WORK             CONVERT HOUR OF DAY TO DECIMAL
         L     R0,WORK+4           LOAD DECIMAL HOUR & SIGN
         SRL   R0,4                SHIFT OUT SIGN
         SLL   R0,24               SHIFT HOUR TO FINAL POSITION
         CVD   R6,WORK             CONVERT MINUTE OF HOUR TO DECIMAL
         L     R6,WORK+4           LOAD DECIMAL MINUTE & SIGN
         SRL   R6,4                SHIFT OUT SIGN
         SLL   R6,16               SHIFT MINUTE TO FINAL POSITION
         OR    R0,R6               ADD MINUTE TO HOUR
         CVD   R8,WORK             CONVERT SECOND OF MINUTE TO DECIMAL
         LM    R6,R7,WORK          LOAD SECONDS & FRACTION
         SLDL  R6,12               SHIFT SEC TENTHS & HUNDREDTHS
         OR    R0,R6               ADD SECOND TO HOUR & MINUTE
*
*        PARM REGS R0 & R1 ARE NOW THE SAME AS RETURNED BY TIME SVC
*
RETURN   RETURN  (2,9)             RETURN TO CALLER
         EJECT
*        CONSTANTS USED FOR CONVERSION
*
         REGEQU
         DS    0F
DBLMASK  DC    X'00FFFFF8'         DOUBLE WORD BOUNDARY MASK
MICROMIN DC    F'60000000'         MICROSECONDS PER MINUTE
MINPRDAY DC    F'1440'             MINUTES PER DAY
ZEROYEAR DC    F'60'               ZERO TIME YEAR (1960)
DAYPRYR  DC    F'365'              DAYS PER YEAR
YRPRLEAP DC    F'4'                YEARS PER LEAPYEAR
F10000   DC    F'10000'            MICROSECONDS PER HUNDREDTH SECOND
H6000    DC    H'6000'             HUNDREDTHS OF SEC PER MINUTE
MINPRHR  EQU   ZEROYEAR            MINUTES PER HOUR
         EJECT
WORKAREA DSECT
WORK     DS    D                   WORKAREA FOR CVD ISN
         SPACE 3
SAVEAREA DSECT
         DS    3F                  SYSTEM CHAIN WORDS
         DS    12F                 R14 THRU R9 WORDS
FREESAVE DS    F                   START OF UNUSED AREA
         END
