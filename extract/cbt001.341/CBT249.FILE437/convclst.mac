*          DATA SET CBT1018    AT LEVEL 001 AS OF 11/19/79
*FUNCTION      CONVERT  CLISTS FROM 255 LRECL VB TO 80 LRECL FB
*              OR VICE VERSA
*I/O           SYSUT1  INPUT CLIST
*              SYSUT2  OUTPUT CLIST
*              SYSPRINT LISTING
*NOTE          VB CLISTS HAVE SEQUENCE NUMBERS IN POS 1-8
*              FB IN 73-80
*              RETURN CODE
*              8 JOB TERMINATED BEFORE START OF COPY
*              12 JOB TERMINATED AFTER START OF COPY
*
         MACRO
         SYMBR
**                           EQUATES FOR SYMBOLIC REG USAGE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RA       EQU   10
RB       EQU   11
RD       EQU   13
RE       EQU   14
RF       EQU   15
         MEND
         MACRO
&NAME    SAVEX &AREA,&BASE,&VERSION,&INIT,&TESTRAN
.* DPHQ SYSTEM/360 - OPERATING SYSTEM SSS
.* V4M0 DECEMBER 2, 1966 F. W. VOSS
         LCLA  &A1
         LCLC  &TEST
&TEST    SETC  '&AREA'(1,5)
         AIF   ('&AREA' NE '').GD1
         MNOTE 12,'SAVE AREA NAME MISSING - NO GEN'
         MEXIT
.GD1     ANOP
&A1      SETA  &BASE
         USING *,15
&NAME    B     22(0,15)            BRANCH AROUND ID
         DC    FL1'18'
         AIF   ('&NAME' NE '').GD2
         DC    CL9'&SYSECT'        IDENTIFIER
         AGO   .CT1
.GD2     DC    CL9'&NAME'          IDENTIFIER
.CT1     DC    CL8'&VERSION'       VERSION
         STM   14,12,12(13)        SAVE REGISTERS
         ST    13,&AREA+4               CHAIN FORWARD
         CNOP  0,4
         AIF   (&A1 GT 2).MV2
         AIF   (&A1 EQ 2).GD3
         AGO   .CT5
.MV2     MNOTE 'INVALID BASE REQUEST - USING 2'
         AGO   .GD3
.CT5     ANOP
         BAL   13,&AREA+72    SETUP SAVE AREA POINTER AND BASE
         DROP  15
         USING *,13                     ESTABLISH ADDRESSABILITY
&AREA    DC    18F'0'              SAVE AREA
         L     15,&AREA+4
         ST    13,8(0,15)               CHAIN BACK
         AGO   .CT7
.GD3     ANOP
         BAL   13,&AREA+76    SETUP SAVE AREA POINTER AND BASE
         DROP  15
         USING *,13,12                  ESTABLISH ADDRESSABILITY
&AREA    DC    18F'0'              SAVE AREA
         DC    AL4(&AREA+4096)
         L     15,&AREA+4
         ST    13,8(0,15)               CHAIN BACK
         L     12,&AREA+72              ESTABLISH 2ND BASE
.CT7     ANOP
         AIF   ('&INIT' EQ '').CT9
.CT9     ANOP
         AIF   ('&TESTRAN' EQ '').CT6
         AIF   ('&TESTRAN' EQ 'TEST').CT8
         MNOTE 'INVALID TESTRAN EDIT REQUEST'
         AGO   .CT6
.CT8     ANOP
*                            TESTRAN SPIE MACRO
         SPIE  &TEST.EXT,((1,15))
         B     &TEST.ABE     BRANCH AROUND TESTRAN DUMP
         SPACE 2
&TEST.EXT BALR 15,0          ESTABLISH ADDRESSABILITY FOR TESTRAN ABEND
         DROP  13
         USING *,15
         MVC   &TEST.PSW,4(1) MOVE OLD PSW FROM PIE
*                            TESTRAN ABEND MACRO
&TEST.ERR ABEND 4444,DUMP
&TEST.PSW DC   XL8'0'        OLD PROGRAM PSW ON PROGRAM INTERRUPT
         DROP  15
         USING &AREA,13      REESTABLISH CSECT ADDRESSABILITY
&TEST.ABE EQU  *
.CT6     ANOP
         SPACE 2
         MEND
*FUNCTION      CONVERT  CLISTS FROM 255 LRECL VB TO 80 LRECL FB
*              OR VISE VERSA
*I/O           SYSUT1  INPUT CLIST
*              SYSUT2  OUTPUT CLIST
*              SYSPRINT LISTING
*NOTE          VB CLISTS HAVE SEQUENCE NUMBERS IN POS 1-8
*              FB IN 73-80
*              RETURN CODE
*              8 JOB TERMINATED BEFORE START OF COPY
*              12 JOB TERMINATED AFTER START OF COPY
*
*        R11   RETURN
*        R10   DCB TEMPLATE
*        R7    OUTPUT POINTER
*        R6    INPUT POINTER
*        R5    LENGTH CODE
*        R4    INPUT START OF BLOCK
*        R3    OUTPUT START OF BLOCK
         SYMBR
TEST20   EQU   X'20'
         EJECT
CNVCLIST CSECT
         SAVEX SAVEAREA,1,COPYCLST
         SPACE
         OPEN  (CLISTIN,(INPUT))
         SPACE
         OPEN  (CLISTOUT,(OUTPUT))
         SPACE
         USING IHADCB,R10
         LA    R10,CLISTIN              USE DCB NAMES FOR INPUT DCB
         BAL   R11,TESTVORF
         BAL   R11,GETMAIN              GET CORE FOR INPUT BLOCK
         LR    R4,R1                    SAVE INPUT BLOCK ADDRESS
         LA    R10,CLISTOUT             USE DCB NAMESFOR  OUTPUT DCB
         BAL   R11,TESTVORF
         BAL   R11,GETMAIN              GETMAIN FOR OUTPUT BLOCK
         LR    R3,R1                    SAVE OUTPUT BLOCK ADDRESS
         TM    SWITCH,X'80'             IF 1 FILE IS F AND 1 V
         BO    SAVEOUT                    CONTINUE
         MVC   ERRORMSG,MSG3
         MVC   RC,=H'8'
         B     WRITERR
         SPACE 2
TESTVORF EQU   *
         TM    DCBRECFM,X'C0'           CHECK FOR V OR F
         BM    CONTVF                   IF NOT V OR F ERROR
         MVC   ERRORMSG,MSG1
         MVC   RC,=H'08'
         B     WRITERR
CONTVF   TM    DCBRECFM,X'80'           IF V
         BZ    EXITVORF                   EXIT
         XI    SWITCH,X'80'             FIRST F TURNS ON-SECOND OFF
         CLC   DCBLRECL,=H'80'          IF F AND LRECL NOT = 80
         BE    EXITVORF                   THEN ERROR
         MVC   ERRORMSG,MSG2
         MVC   RC,=H'8'
         B     WRITERR
EXITVORF BR    R11                      RETURN
         SPACE 2
GETMAIN  EQU   *
         LH    R0,DCBBLKSI              GET C0RE F0R PR0CESSING AN
         GETMAIN R,LV=(0)                 INPUT BL0CK
         SPACE
         BR    R11
         SPACE 2
SAVEOUT  EQU   *                       SAVE DATA FOR MAINLINE
         MVC   OUTBLKSI,DCBBLKSI
         LR    R7,R3                   INITIALIZE OUTPUT POINTER
         TM    DCBRECFM,X'80'          IF OUTPUT IS V
         BZ    SAVEIN                    SAVE INPUT END OF BLOCK
         OI    SWITCH,TEST20           ELSE SET INPUT SWITCH TO V
         LH    R12,DCBBLKSI
         LA    R12,0(R12,R3)           SAVE OUTPUT END OF FIXED BLOCK
         ST    R12,ENDF
         LA    R10,CLISTIN
         B     INITREAD
         SPACE
SAVEIN   LA    R10,CLISTIN
         LH    R12,DCBBLKSI            SAVE INPUT END OF FIXED BLOCK
         LA    R12,0(R12,R4)
         ST    R12,ENDF
         LH    R12,OUTBLKSI            SAVE MAXIMUM END OF OUTPUT
         LA    R12,0(R12,R3)             VARIABLE BLOCK
           ST  R12,ENDV
         LA    R7,4(R7)                POINT PAST BLK COUNT FOR V
         SPACE 2
INITREAD EQU   *
         CLOSE (CLISTIN)
         MVI   DCBRECFM,X'C0'          SET INPUT RECFM TO U
         MVI   CLISTOUT+36,X'C0'       SET OUTPUT RECFM TO U
         OPEN  (CLISTIN,(INPUT))
READDIR  EQU   *
         OI    SWITCH,X'40'             SET DIRECTORY READ ON
         READ  DECB1,SF,CLISTIN,DIRIN,256
         CHECK DECB1
         NOTE CLISTIN
         XI    DIRSW,X'FF'             SINCE SAVETTR POINTS TO
         CLI   DIRSW,X'00'             BEGINNING OF DIRECTORY, READ
         BE    READDIR                 TWICE AFTER FIRST READ.
         SPACE
         ST    R1,SAVETTR              SAVE POINTER TO DIRECTORY
         LH    R9,DIRIN
         STH   R9,DIRLEFT               SAVE DIRECTORY LENGTH
         LA    R9,DIRIN+2
         ST    R9,NEXTMEM
         SPACE 2
GETMEM   EQU   *                        GET BLOCK OF DATA
         ZAP   SEQCOUNT,=P'0'           ZERO OUT SEQUENCE COUNT FOR MEM
         L     R8,NEXTMEM               LOAD ADDRESS OF MEMBER NAME
         CLC   HIVALUE,0(R8)            IF MEMBER NAM = HIVALUES
         BE    EOJ                        GO TO END OF JOB
         NI    11(R8),X'1F'
         MVC   DIRLIST+11(63),11(R8)    MOVE USER DATA TO DIRLIST
         MVC   NAME,0(R8)               PUT NAME IN OUTPUT DIRECT LIST
         SR    R12,R12                  CLEAR REGISTER
         IC    R12,11(R8)               LOAD # OF HALFWORDS OF USERDATA
         LA    R12,12(R12,R12)          DOUBLE AND ADD 12
         LA    R9,0(R12,R8)             COMPUTENEXT MEMBER DIR ADDA
         ST    R9,NEXTMEM               SAVE ADDRESS OF NEXT MEMBER
         LH    R9,DIRLEFT               COMPUTE BYTES LEFT IN
         SR    R9,R12                     DIRECTORY
         STH   R9,DIRLEFT
         NI    11(R8),X'00'             CLEAR C  OF TTRC
         LA    R8,8(R8)                 LOAD ADDRESS OF TTR
         NI    SWITCH,X'BF'             TURN DIRECTORY READ SW  OFF
         POINT CLISTIN,(8)
         SPACE
       LH    R8,DCBBLKSI                LOAD INPUT BLKSIZE
READBLK  READ  DECB2,SF,CLISTIN,(4),(8)
         SPACE
         CHECK DECB2
         SPACE
         TM    SWITCH,TEST20           IF INPUT IS F
         BZ    FTOV                      CONVERT FIXED TO VARIABLE
         SPACE 2
VTOF     EQU   *
         LH    R12,0(R4)               ADD BLKSIZE AND STARTING
         AR    R12,R4                    ADDRESS
         ST    R12,ENDV                  GIVING  ENDING ADDRESS
         LR    R6,R4                   LOAD POINTER TO V INPUT
         LA    R6,4(R6)                POINT TO FIRST LRECL
         SPACE
GETREC   MVC   HALFWORD,0(R6)
         LH    R5,HALFWORD
         CH    R5,=H'255'              IF LRECL IS GREATER THAN 256
         BL    *+20                      ERROR
         MVC   ERRORMSG,MSG4             MESSAGE
         MVC   RC,=H'12'                 RETURN CODE
         B     WRITERR
         SH    R5,=H'12'               POINT PAST 4 BYTE LRECL AND
         LA    R6,12(R6)                 8 BYTE LINE SEQUENCE FIELD
         SPACE
LOOPREC  STH   R5,LRECL                SAVE LRECL
         CH    R5,=H'71'                IF LRECL GREATER THAN 71
         BH    SPLITREC                  SPLIT RECORD
         BCTR  R5,0                    MAKE LENGTH CODE
         LA    R12,0(R5,R6)            POINT TO LAST BYTE OF REC
         MVC   REC80,REC80-1           CLEAR RECORD AREA
         CLI   0(R12),C'-'             IF LAST BYTE = '-'
         BNE   SKIPLOOP                  MOVE '-' TO COLUMN 72
         MVI   REC80+71,C'-'
         MVI   0(R12),C' '             BLANK OUT OLD '-'
         LA    R9,REC80+71             LOAD ADDRESS COLUMN 72
BACKLOOP BCTR  R9,0
         BCTR  R12,0
         CLI   0(R12),C' '             IF LAST BYTE IS SPACE
         BE    SKIPLOOP                  EXIT
         CR    R6,R12                  IF AT START OF RECORD
         BH    SKIPLOOP                  DONT MOVE ANYMORE
         MVC   0(1,R9),0(R12)          MOVE CONT WORD TO END OF OUTREC
         MVI   0(12),C' '              BLANKOUT CONT INPUT WORD
         B     BACKLOOP
SKIPLOOP EX    R5,MOVE80               MOVE RECORD
         BAL   R11,WRITEF
         LA    R5,1(R5)
         LA    R6,0(R5,R6)             INCREMENT CURRET POINTER BY LENG
         C     R6,ENDV                 IF ADDRESS POINTER IS LESS THAN
         BL    GETREC                    END ADDRESS GO TO GETREC
         B     READBLK                 ELSE READ A BLOCK
         SPACE 2
SPLITREC EQU   *
         LH    R5,=H'70'
SPLTLOOP LA    R12,0(R5,R6)            ADDRESS OF END OF REC TO BE MOVE
         CLI   0(R12),C' '             FIND A BLANK SO WORD IS NOT
         BE    CONTSPLT                  SPLIT
         BCTR  R5,0
         B     SPLTLOOP
CONTSPLT EQU   *
         MVC   REC80,REC80-1           CLEAR OUTPUT RECORD
         MVI   REC80+71,C'-'           MOVE IN CONTUATION CHARACTER
         EX    R5,MOVE80               MOVE TO WRITE AREA
         BAL   R11,WRITEF
         LA    R12,1(R5)               ADD 1 REC LENGTH OF RECORD
         LH    R5,LRECL                  WRITEN
         SR    R5,R12                  SUBTRACT FROM LRECL
         LA    R6,0(R12,R6)            INCREMENT IPOINTER BY LENGTH
         B     LOOPREC                 FINISH RECORD
         SPACE
WRITEF   EQU   *
         AP    SEQCOUNT,=P'100'         PLACE SEQUENCE NUMBER IN
         UNPK  REC80+72(8),SEQCOUNT      POSITIONS 73-80
         MVI   REC80+79,C'0'           MAKE LAST POS CHAR ZERO
         MVC   0(80,R7),REC80          MOVE RECORD TO OUTPUT
         LA    R7,80(R7)               INCREMENT POINTER
         C     R7,ENDF                 IF POINTER IS LESS THAN ENDOFBLK
         BCR   4,R11                     RETURN
         SR    R7,R3                   LOAD BLKSIZE
         B     WRITEOUT                ELSE WRITEOUT BLOCK
         SPACE 2
FTOV     EQU   *
         LA    R12,0(R8,R4)            FIND END OF BLOCK ADRESS
         L     R9,DECB2+16             LOAD IOB ADDRESS
         LH    R9,14(R9)               LOAD LENGTH BLOCK IS SHORT
         SR    R12,R9                  SUBTRACT FROM END OF FULL BLK
         ST    R12,ENDF                  GIVING REAL END OF BLOCK
         LR    R6,R4                   POINT TO START OF INPUT BLOCK
NEXTFREC EQU   *
         LA    R5,78(R6)               POINT TO LAST CHAR BEFORE CONT
LOOPFV   EQU   *
         CLI   0(R5),C' '              FIND LAST NON BLANK CHARACTER
         BNE   FOUNDATA
         BCTR  R5,0
         B     LOOPFV
         SPACE
FOUNDATA EQU   *
         SR    R5,R6                   SUBTRACT START FROM END GIV LENG
         CH    R5,=H'10'
         BH    *+8                     IF LENGTH CODE IS LESS THAN 10
         LA    R5,10                     USE 10
*        CLI   71(R6),C'-'             IF THERE IS  NO CONTINUATION
*        BNE   WRITEV                    GO TO WRITEV
*        CLI   70(R6),C' '             IF POS 71 IS BLANK
*        BNE   *+8                       PUT 1 BLANK BEFORE CONTINUATON
*        LA    R5,1(R5)                ELSE NONE
*        LA    R5,1(R5)
*        LA    R12,0(R5,R6)            PUT - IN LAST BYTE OF
*        MVI   0(R12),C'-'               INPUT RECORD TO BE MOVED
         SPACE
WRITEV   EQU   *
         LA    R12,13(R5,R7)           LOAD ADDRESS END OF OUTPUT REC
         C     R12,ENDV                IF ENDOFREC IS LESS THAN ENDOFBL
         BNH   EXMOVEV                   MOVE DATA
         SR    R7,R3                   ELSE FIND BLK LENGTH
         STH   R7,0(R3)                  STORE IN OUTPUT BLOCK
         BAL   R11,WRITEOUT              WRITE BLOCK
         LA    R7,4(R7)                  POINT PAST OUTPUT BLK COUNT
         SPACE
EXMOVEV  EQU   *
         EX    R5,MOVEV                MOVE DATA TO OUTPUT BLOCK
         AP    SEQCOUNT,=P'100'         PUT SEQUENCE NUMBER
         UNPK  4(8,R7),SEQCOUNT          IN OUTPUT DATA SET
         MVI   11(R7),C'0'             MAKE LAST DIGIT CHARACTER 0
         LA    R5,13(R5)               ADD 13 TO LEN CNT GIVING LRECL
         STH   R5,HALFWORD
         MVC   0(4,R7),HALFWORD        STORE LRECL IN OUTPUT BLOCK
         LA    R7,0(R5,R7)             INCREMENT OUTPUT POINTER
         LA    R6,80(R6)               INCREMENT  INPUT POINTER
         C     R6,ENDF                 IF LESS THAN END OF BLOCK
         BL    NEXTFREC                  GET NEXT RECORD
         B     READBLK                 ELSE GET NEXT BLOCK
         SPACE 2
WRITEOUT EQU   *
         WRITE DECBA,SF,CLISTOUT,(R3),(R7)    WRITE OUT BLOCK
         SPACE
         CHECK DECBA
         SPACE
         LR    R7,R3                   SET POINTER TO START OF BLOCK
         BR    R11
STOWOUT  EQU   *
         TM    SWITCH,TEST20           IF V TO F
         BO    STOWVTOF                  CHECK FOR SHORT BLOCK
         SR    R7,R3                   FIND BLOCK LENGTH
         STH   R7,0(R3)                STORE IN BDW
         MVC   2(2,R3),=H'0'           ZERO OUT REST OF BDW
         B     SHORTBLK                WRITE OUT BLOCK
STOWVTOF CR    R3,R7                   IF OUTPUT BLOCK IS EMPTY
         BE    *+10                      SKIP WRITING SHORT BLOCK
         SR    R7,R3                   LOAD BLOCK LENGTH
SHORTBLK BAL   R11,WRITEOUT            WRITE SHORT BLOCK
         TM    SWITCH,X'40'            IF DIRECTORY READ
         BO    EOJ                       GO TO  EOJ
         STOW  CLISTOUT,DIRLIST,A
         SPACE
         B     STOWEND(R15)
STOWEND  B     CHECKEND                 GOOD STOW
         B     ERRA
         NOP   ERRA
         B     ERRB
         B     ERRC
         NOP   ERRA
ERRD     MVC   ERRORMSG,MSGD
         B     ERR
ERRC     MVC   ERRORMSG,MSGC
         B     ERR
ERRB     MVC   ERRORMSG,MSGB
         B     ERR
ERRA     MVC   ERRORMSG,MSGA
ERR      MVC   RC,=H'12'
         B     WRITERR
         SPACE
CHECKEND EQU   *
         AP    OUTCOUNT,=P'1'          COUNT MEMBERS MOVED
         TM    SWITCH,TEST20           IF V TO F
         BO    *+8                        CHECK DIRECTORY
         LA    R7,4(R7)                ELSE ADD 4 BYTES FOR OUTPUT BDW
         LA    R12,2
         CH    R12,DIRLEFT             IF DIRECTORY BLOCK IS NOT EMPTY
         BL    GETMEM                     GET NEXT MEMBER
         POINT CLISTIN,SAVETTR          ELSE READ NEW DIRECTORY
         SPACE
         B     READDIR
         SPACE 2
WRITERR  EQU   *
         BAL   R11,WRITETIT
         MVC   PRTLINE,ERRLINE
         BAL   R11,PUTPRINT
         CLC   RC,=H'12'               IF COPY STARTED
         BNE   STOWOUT                   PRINT TOTALS
*        BNE   EXIT                      PRINT TOTALS
         BAL   R11,COUNTP
*        B     EXIT
         B     STOWOUT
         SPACE 2
EOJ      BAL   R11,WRITETIT
         MVC   ERRORMSG(14),=C' COPY COMPLETE'
         MVC   PRTLINE,ERRLINE
         BAL   R11,PUTPRINT
         BAL   R11,COUNTP
         SPACE 2
EXIT     EQU   *
         CLOSE (CLISTIN,,CLISTOUT,,PRINT)
         LH    R15,RC                  LOAD RETURN CODE
         L     R13,SAVEAREA+4
         LM    R0,R12,20(R13)          RESTORE REGS 0-12
         L     R14,12(R13)             RESTORE REG 14
         BR    R14
         SPACE 2
WRITETIT EQU   *
         OPEN  (PRINT,(OUTPUT))
         MVC   PRTLINE,TITLE
         LH    R12,RC
         CVD   R12,WORK
         UNPK  RCP,WORK
         OI    RCP+1,X'F0'
         B     PUTPRINT
COUNTP   UNPK  OUTP,OUTCOUNT           MOVE NO OF MEMBERS MOVED
         OI    OUTP+4,X'F0'              TO PRINTLINE
         MVC   PRTLINE,COUNTLN
         SPACE
PUTPRINT PUT   PRINT,PRTLINE
         SPACE
         BR    R11
         SPACE 2
*EXECUTED INSTRUCTIONS
MOVEV    MVC   12(1,R7),0(R6)
MOVE80   MVC   REC80(1),0(R6)
         EJECT
CLISTIN  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=STOWOUT
         SPACE 2
CLISTOUT DCB   DSORG=PO,MACRF=W,DDNAME=SYSUT2
         SPACE 2
PRINT    DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,            X
               LRECL=121,BLKSIZE=605
         EJECT
*WORK FIELDS
         SPACE
WORK     DC    D'0'
FULLWORD DS    0F
HALFWORD DC    H'0'
         DC    H'0'
SAVETTR  DC    F'0'
READADD  DC    F'0'
ENDV     DC    F'0'
ENDF     DC    F'0'
SAVERTN  DC    F'0'
NEXTMEM  DC    F'0'
OUTBLKSI DC    H'0'
DIRLEFT  DC    H'0'
BLKIN    DC    H'0'
RECIN    DC    H'0'
RC       DC    H'0'
LRECL    DC    H'0'
OUTCOUNT DC    PL4'0'
DIRSW    DC    X'00'
SWITCH   DC    XL1'00'
HIVALUE  DC    XL8'FFFFFFFFFFFFFFFF'
SEQCOUNT DC    PL4'0'
         SPACE
         DS    0F
DIRIN    DS    CL256                   DIRECTORY BLOCK
         SPACE
         DS    0F
DIRLIST  DS    0CL74                   DIRECTORY RECORD
NAME     DC    CL8' '
TTR      DS    CL3
C        DS    CL1
USEADATA DS    CL62
         DC    CL1' '
         SPACE
REC80    DS    CL80
         SPACE 2
*PRINT DATA
         SPACE
TITLE    DC    CL121'1        CLIST CONVERSION'
ERRLINE  DS    0CL121
         DC    CL7'0   RC='
RCP      DC    CL2'  '
         DC    CL5' '
ERRORMSG DC    CL37' '
         DC    CL70' '
COUNTLN  DS    0CL121
         DC    CL29'0'
OUTP     DC    CL5'0'
         DC    CL87' MEMBERS COPIED'
PRTLINE  DS    CL121
         SPACE
MSG1     DC    CL37'FILE NOT V OR F'
MSG2     DC    CL37'F FORMAT MUST BE LRECL 80'
MSG3     DC    CL37'INPUT AND OUTPUT CANNOT BE SAME RECFM'
MSG4     DC    CL37'V RECORD WITH LRECL OVER 256'
MSGA     DC    CL37'DUPLICATE NAME ON DIRECTORY-SYSUT2'
MSGB     DC    CL37'DIRECTORY OUT OF SPACE'
MSGC     DC    CL37'1/O ERROR ON SYSUT2 DIRECTORY'
MSGD     DC    CL37'PROGRAM REGION TOO SMALL'
         LTORG
DCBDUM   DCBD  DSORG=PO,DEVD=DA
         END
