         TITLE 'SUB SYSTEM-INVOKATION DRIVER  11-07-80 '
************************************************************
* ACMD - THIS CODE IS THE DRIVER FOR THE ACMD SUBSYSTEM    *
*          PROC.  THIS CODE WILL READ THE FILE SPECIFIED   *
*          BY DD CARD SYSPARMS AND INVOKE THE ROUTINES     *
*          AFTER PLACING THE SYSTEM IN THE PROPER MODE.    *
*                                                          *
* INPUT CARD FORMAT IS :                                   *
* COL 1      P = PROGRAM INDICATOR               (DEFAULT) *
*            C = OPERATOR COMMAND INDICATOR                *
*            A = ALLOC A DDNAME                            *
*            F = FREE A DDNAME                             *
*            D = ALLOC A SPECIFIC DEVICE                   *
*            W = WTOR FOR INPUT COMMANDS                   *
*     2-9    MODULE TO BE INVOKED                          *
*     2-9    DDNAME FOR DYN PROCESSING (A F D)             *
*     10-12  UNIT FOR DEVICE ALLOCATION  (D)               *
*     10-55  DSNAME FOR DYN PROCESSING  (A)                *
*     10-80  PARM FOR THE ABOVE MODULE                     *
*            (NOTE: 2 BLANKS IN PARM AND THE END IS        *
*                   ASSUMED FOR THE LENGTH CALC OF YOUR    *
*                   PARM)                                  *
*                                                          *
*          CODED BY LIONEL DYCK                            *
*                   ROCKWELL INTERNATIONAL                 *
*                   PO BOX 2515                            *
*                   SEAL BEACH, CALIF 90740                *
*                   (213) 594-2520                         *
*                                                          *
*  MACROS USED ARE: PRIME,LINK,MODESET,TERME               *
*                   OPEN,CLOSE,LOAD,DELETE,DCB             *
*                   WTO,ALLOC,FREE,WTOR,WAIT               *
*                                                          *
************************************************************
         EJECT
ACMD     PRIME 12,,,,Y
         LR    R11,R1                    SAVE PARM POINTER
         USING ACMDCARD,R9               ESTABLISH ADDR TO INPUT
         OPEN  (SYSPARM)                 OPEN INPUT FILE
         LA    R6,1                      LOAD INCREMENT
         EJECT
READ     EQU   *
         TM    SW,WTORSW                 WTOR INPUT ?
         BZ    GETIT                     NO - BYPASS WTOR
         XC    ECB,ECB
         WTOR  'ACMD - ENTER INPUT RECORD OR END',WTORCARD,80,ECB,     *
               ROUTCDE=1
         WAIT  ECB=ECB
         CLC   WTORCARD(3),=C'END'       END OF WTOR ?
         BE    GETCARD                   YES
         LA    R1,WTORCARD               -> WTOR RECORD
         B     PROCESS                   BYPASS GET AND PROCESS INPUT
         EJECT
GETCARD  NI    SW,WTORSWF                TURN OFF WTOR
GETIT    GET   SYSPARM
PROCESS  LR    R9,R1
         SR    R1,R1                     CLEAR REG 1
         CLI   RMODE,C'C'                OPERATOR COMMAND
         BE    COMMAND                   GO ISSUE IT
         CLI   RMODE,C'P'                PROGRAM
         BE    LOADIT                    YES
         CLI   RMODE,C'A'                ALLOC FILE
         BE    ALLOCIT                   YES
         CLI   RMODE,C'F'                FREE FILE
         BE    FREEIT                    YES
         CLI   RMODE,C'D'                ALLOC DEVICE
         BE    ALLOCDEV                  YES
         CLI   RMODE,C'W'                WTOR INPUT
         BE    WTORINP                   YES
         CLI   RMODE,C' '                PROGRAM (DEFAULT)
         BE    LOADIT                    YES
         B     ERRORCC                   ERROR MESSAGE
         EJECT
WTORINP  OI    SW,WTORSW                 TURN ON WTOR SWITCH
         B     READ                      CONTINUE PROCESSING
         EJECT
COMMAND  MVC   CMD(79),RCMD              MOVE COMMAND TO SVC 34
         MVC   CMDWTO+8(50),RCMD
CMDWTO   WTO   '                                                    ', *
               ROUTCDE=(1,11)
         MODESET MODE=SUP,KEY=ZERO       GET IN RIGHT KEY
         SR    R0,R0                     CLEAR R0
         LA    R1,CMDL                   -> COMMAND
         SVC   34                        ISSUE THE COMMAND
         MODESET MODE=PROB,KEY=NZERO     LEAVE PRIV STATE
         B     READ
         EJECT
LOADIT   EQU   *
         LOAD  EPLOC=RPROG,ERRET=S806
         LR    R8,R0                     -> RPROG EPA
         MVC   PARM(70),RPARM            MOVE PARM
         LA    R5,PARM                   -> START OF PARM
         LA    R7,PARM+68                -> END OF PARM
FINDL    CLC   0(2,R5),=C'  '            LOOK FOR END OF PARM
         BE    PARMSET                   FOUND
         BXLE  R5,R6,FINDL               CONTINUE
PARMSET  LA    R4,PARM
         SR    R5,R4                     GET LENGTH
         STH   R5,PARML
         LA    R5,PARML                  -> PARM
         STCM  R5,B'0111',PARMA+1        SAVE IT
         MVC   EXWTO+8(8),RPROG          MOVE MODULE NAME TO WTO
*        TELL THE WORLD WHERE WE ARE
EXWTO    WTO   '         - BEING INVOKED ***',ROUTCDE=(1,11)
         LA    R1,PARMA                  LOAD ADDR OF PARM ADDR
         LR    R15,R8                    -> MODULE EPA
         BALR  R14,R15                   GO TO MODULE
*        NOW DELETE THE INVOKED MODULE
         DELETE EPLOC=RPROG
         B     READ
         EJECT
S806     EQU   *
         MVC   S806WTO+8(8),RPROG        MOVE PROG NAME TO WTO
S806WTO  WTO   '         - MODULE NOT FOUND ***',ROUTCDE=(1,11)
         B     READ                      CONTINUE THE READ
ERRORCC  WTO   'ERROR IN ACMD COMMAND RECORD ***',ROUTCDE=(1,11)
         B     READ                      CONTINUE THE READ
         EJECT
ALLOCIT  EQU   *                         DYNAMICALLY ALLOC A FILE
         MVC   DDN(8),ADDNAME            MOVE DDNAME
         LA    R2,DDN+7                  -> END OF DDNAME
DDNLENL  CLI   0(R2),C' '                BLANK ?
         BNE   SDDNL                     NO - STORE LENGTH
         BCT   R2,DDNLENL                CONTINUE THE SCAN
SDDNL    LA    R1,DDN-1                  -> END OF DDNAME
         SR    R2,R1                     AND SUBTRACT FOR LENGTH
         STH   R2,DDNL                   AND SAVE IT
         CLC   ADSNAME(6),=CL6'DUMMY'
         BNE   ALLDSN                    GO ALLOC A DSNAME
         ALLOC DUMMY,DDN=DDNAME
         LTR   R15,R15                   ALLOCATED OK ?
         BNZ   S99FAIL                   NO
         B     READ                      CONTINUE PROCESSING
ALLDSN   EQU   *
         MVC   DSN(44),ADSNAME
         LA    R2,DSN+43                 -> END OF DSN
DSNLP    CLI   0(R2),C' '                BLANK ?
         BNE   SDSNL                     NO - STORE LENGTH
         BCT   R2,DSNLP                  CONTINUE THE SCAN
SDSNL    LA    R1,DSN-1                  -> END OF DDNAME
         SR    R2,R1                     AND SUBTRACT FOR LENGTH
         STH   R2,DSNL                   AND SAVE IT
         ALLOC DDN=DDNAME,DSN=DSNAME,DISP=SHR
         LTR   R15,R15                   ALLOCATED OK ?
         BNZ   S99FAIL                   NO
         B     READ                      CONTINUE PROCESSING
         EJECT
FREEIT   EQU   *                         DYNAMICALLY FREE A FILE
         MVC   DDN(8),FDDNAME            MOVE DDNAME
         LA    R2,DDN+7                  -> END OF DDNAME
XDNLENL  CLI   0(R2),C' '                BLANK ?
         BNE   XDDNL                     NO - STORE LENGTH
         BCT   R2,XDNLENL                CONTINUE THE SCAN
XDDNL    LA    R1,DDN-1                  -> END OF DDNAME
         SR    R2,R1                     AND SUBTRACT FOR LENGTH
         STH   R2,DDNL                   AND SAVE IT
         FREE  DDN=DDNAME
         LTR   R15,R15                   FREED OK ?
         BNZ   S99FAIL                   NO
         B     READ                      CONTINUE PROCESSING
         EJECT
ALLOCDEV EQU   *                         DYNAMICALLY FREE A FILE
         MVC   DDN(8),PDDNAME            MOVE DDNAME
         LA    R2,DDN+7                  -> END OF DDNAME
ADNLENL  CLI   0(R2),C' '                BLANK ?
         BNE   ADDNL                     NO - STORE LENGTH
         BCT   R2,ADNLENL                CONTINUE THE SCAN
ADDNL    LA    R1,DDN-1                  -> END OF DDNAME
         SR    R2,R1                     AND SUBTRACT FOR LENGTH
         STH   R2,DDNL                   AND SAVE IT
         MVC   UNIT(3),PUNIT             MOVE UNIT ADDRESS
         ALLOC DDN=DDNAME,UNIT=UNITADDR
         LTR   R15,R15                   ALLOCATED OK ?
         BNZ   S99FAIL                   NO
         B     READ                      CONTINUE PROCESSING
         EJECT
S99FAIL  EQU   *
         S99FAIL
         B     READ                      CONTINUE PROCESSING
         EJECT
ENDIP    EQU   *
         CLOSE (SYSPARM)
         TERME
         SPACE
         LTORG
         SPACE
ECB      DC    F'0'
         SPACE
SW       DC    X'00'                     SWITCH
WTORSW   EQU   1
WTORSWF  EQU   X'FE'
         SPACE
         DS    0F
PARMA    DS    X'80000000'
PARML    DS    H
PARM     DS    CL70
         SPACE
WTORCARD DC    CL80' '
         SPACE
         DS    0F
CMDL     DC    AL2(83),X'0000'
CMD      DC    CL79' '
         SPACE
UNITADDR DC    A(UNIT)
UNITL    DC    Y(3)
UNIT     DC    CL3' '                    UNIT FOR DYN PROCESSING
         SPACE
DDNAME   DC    A(DDN)
DDNL     DC    Y(8)
DDN      DC    CL8' '                    DDNAME FOR DYN PROCESSING
         SPACE
DSNAME   DC    A(DSN)
DSNL     DC    Y(44)
DSN      DC    CL44' '                   DSNAME FOR DYN PROCESSING
         EJECT
SYSPARM  DCB   DSORG=PS,MACRF=GL,DDNAME=SYSPARM,EODAD=ENDIP
         EJECT
         DYNSPACE
         EJECT
ACMDCARD DSECT
RMODE    DS    CL1                       REQUESTED MODE
*                                        P OR BLANK = PROGRAM
*                                        C =  OPER COMMAND
*                                        A = ALLOCATE
*                                        F = DEALLOCATE
*                                        P = PRINTER ALLOCATION
*                                        W = WTOR FOR INPUT
RCMD     DS    CL79                      OPERATOR COMMAND
         ORG   RCMD
RPROG    DS    CL8                       REQUESTED PROGRAM
RPARM    DS    CL70                      PARM FOR REQUESTED PROGRAM
         ORG   RCMD
FDDNAME  DS    CL8                       DDNAME FOR DE-ALLOCATION
         ORG   RCMD
ADDNAME  DS    CL8                       DDNAME FOR ALLOCATION
ADSNAME  DS    CL44                      DSNAME FOR ALLOCATION
         ORG   RCMD
PDDNAME  DS    CL8                       DDNAME FOR PRINTER
PUNIT    DS    CL3                       UNIT FOR PRINTER
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         END
