//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//* THE BASIC TOOL YOU CAN  USE TO DETERMINE  WHAT IS WRONG  WITH A
//* CATALOG IS IDACATCK. THIS PROGRAM IS A CATALOG ANALYSIS PROGRAM
//* WHICH VALIDITY CHECKS CATALOG RECORDS  FOR PROPER  CHAINING AND
//* CONTENT. IDACATCK   WILL  IDENTIFY  COMMON  TYPES   OF  CATALOG
//* CORRUPTION AND MANY OTHERS  NOT SO  COMMON. HOWEVER,  IT CANNOT
//* CHECK EVERYTHING SO THERE MAY BE SOME DAMMAGE WHICH IT WILL NOT
//* IDENTIFY. ALSO, YOU  MUST  BE AWARE  THAT  IDACATCK CANNOT  RUN
//* AGAINST A CATALOG THAT IS DAMAGED TO  THE POINT WHERE IT  IS NO
//* LONGER A VALID VSAM DATASET. GENERALLY  THIS TYPE OF  DAMAGE IS
//* CAUSED BY AN OVERLAY  OF CATALOG RECORDS  WITH SOME  OTHER DATA
//* CAUSING PHYSICAL I/O ERRORS ATTEMPTING TO ACCESS THE DATA. THIS
//* DOCUMENT DOES NOT ATTEMPT TO PROVIDE GUIDANCE TO  THE REPAIR OF
//* THIS TYPE OF DAMAGE.
//* *****************************************************************
//* *                         IDACATCK                              *
//* *****************************************************************
//*
//* INSTALLATION:
//*
//* THE OBJECT CODE MUST BE  LINKEDITED INTO AN  AUTHORIZED LIBRARY
//* WITH AN AUTHORIZATION CODE OF 1 (MVS).
//*
//*     SAMPLE JCL
//*
//*     //LINK     EXEC    PGM=IEWL,PARM='AC=1'
//*     //SYSPRINT DD      SYSOUT=A
//*     //SYSUT1   DD      UNIT=3330,SPACE=(CYL,(5,1))
//*     //SYSLMOD  DD      DSN=SYS1.LINKLIB,DISP=SHR
//*     //SYSLIN   DD      *
//*      ----OBJECT DECK----
//*      NAME IDACATCK(R)
//*     /*
//*
//* EXECUTION:
//*
//* PARM=    - THIS VERSION OF IDACATCK WILL ALLOW TWO PARAMETERS TO
//*            BE PASSED. THE PARAMETERS ARE POSITIONAL AND MUST BE
//*            SEPARATED BY A COMMA. SEE SAMPLE JCL FOR DETAILS.
//* STEPCAT  - THE CATALOG TO BE CHECKED
//* STEPLIB  - THE AUTHORIZED LIBRARY CONTAINING THE CHECKER PROGRAM,
//*            UNLESS IT IS IN THE SYSTEM LNKLST.
//* SYSPRINT - A SYSOUT DATA SET USED FOR PROGRAM MESSAGES
//* SNAP     - A SYSOUT DATA SET USED FOR SNAP MACROS
//* SYSUDUMP - A SYSOUT DATA SET USED IN CASE OF ABNORMAL TERMINATION
//* VSAMCAT  - THE CATALOG TO BE CHECKED
//*  * NOTE THAT THE CATALOG MUST BE REFERENCED IN BOTH THE STEPCAT   CA
//*     AND THE VSAMCAT STATEMENTS. *                                 CA
//*
//*     SAMPLE JCL
//*
//*     //CATCHK   EXEC PGM=IDACATCK,PARM='XXXXXXXX,YYYYYY'
//*     //STEPCAT  DD DSN=TEST.CAT,DISP=SHR
//*     //STEPLIB  DD DSN=SYS1.LINKLIB,DISP=SHR
//*     //SYSPRINT DD SYSOUT=A
//*     //SNAP     DD SYSOUT=A
//*
//*     FORMAT OF THE PARM FIELD
//*
//*     XXXXXXXX IS THE PASSWORD AND MAY BE UP TO 8 CHARACTERS. IF
//*              MORE THAN 8 CHARACTERS ARE PASSED ONLY THE FIRST 8
//*              ARE USED.
//*
//*     YYYYYY   IS A VOLUME SERIAL NUMBER OF A VOLUME OWNED BY THIS
//*              CATALOG. THIS FIELD MAY BE UP TO 6 CHARACTERS AND
//*              IF GREATER THAN SIX CHARACTERS IS PASSED AN ABENDU999
//*              WILL OCCUR. ALSO IF A COMMA IS PRESENT BUT NO VOLSER
//*              IS PASSED AN ABENDU999 WILL OCCUR. IF AN '*' IS
//*              PASSED IN THIS FIELD ALL VOLUMES OWNED BY THIS UCAT
//*              WILL HAVE THEIR VOLUME STRUCTURES PRINTED.
//*
//*
//*
//*                          PAGE 1
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*     //SYSUDUMP DD SYSOUT=A
//*     //VSAMCAT  DD DSN=TEST.CAT,DISP=SHR
//*
//*    COMMENTS - BE SURE THAT NO JOBS ARE UPDATING THE CATALOG WHILE  C
//*               THE CHECKER IS RUNNING. IF UPDATE/DEFINE/DELETE/ALTER
//*               ACTIVITY IS GOING ON WHILE CHECKER PGM IS RUNNING,
//*               ERROR MESSAGES MAY OCCUR WHEN NO ERRORS REALLY EXIST.
//*
//* OUTPUT:
//*
//* IF NO ERRORS  ARE FOUND,  THE ONLY  OUTPUT WILL  BE A  ONE-PAGE
//* STATISTICAL SUMMARY, SHOWING HOW MANY RECORDS OF EACH TYPE WERE
//* FOUND IN THE CATALOG.   IF ERRORS ARE  FOUND, THE  PROGRAM WILL
//* PRODUCE MESSAGES, DUMPS OF  CATALOG RECORDS,  SNAPS, AND/OR  AN
//* ABEND DUMP. MESSAGES FOLLOWED BY  CATALOG RECORD DUMPS  ARE THE
//* USUAL CASE. USE  THE  MESSAGE  SECTION FOLLOWING  TO  INTERPRET
//* THESE.  NOTE THAT  THE MESSAGE  IDS CORRESPOND  TO THE  NEAREST
//* LABEL IN THE PROGRAM BEFORE THE MESSAGE WAS PRODUCED,  SO IT IS
//* EASY TO FIND  THE  CODE WHICH  DETECTED  THAT PARTICULAR  ERROR
//* CONDITION.
//*
//* OR
//*
//* IF A VOLUME SERIAL NUMBER OR AN //*IS PASSED VIA THE 'PARM' FIELD
//* OF THE 'EXEC' STATEMENT, THERE WILL BE NO STATISTICAL SUMMARY
//* PRINTED, AS STATISTICS ARE NOT COLLECTED DURING THIS FUNCTION.
//* THE ONLY OUTPUT FROM THIS TYPE OF REQUEST WILL BE A PRINT OF THE
//* VOLUME STRUCTURE FOR THE REQUESTED VOLUME (S) IN THE FOLLOWING
//* FORMAT.
//*
//* V100    THIS RECORD IS THE VOLUME RECORD FOR THE VOLUME SERIAL
//*         NUMBER REQUESTED.
//*
//* W150    THIS RECORD IS A VOLUME EXTENSION RECORD (W) THAT IS IN
//*         THE VERTICAL CHAIN OF VOLUME EXTENSION RECORDS.
//*
//* W100    THIS RECORD IS A VOLUME EXTENTION RECORD (W) THAT IS IN
//*         THE HORIZONTAL CHAIN OF VOLUME EXTENSION RECORDS.
//*
//* PROGRAMMER ACTION:
//*
//* IF ERRORS ARE DETECTED, THE PROGRAM GENERALLY PRODUCES A SUFFI-
//* CIENT AMOUNT OF INFORMATION TO ALLOW THE PROBLEM TO BE ANALYSED.
//* IF NOT, ONE OR MORE OF THE FOLLOWING MIGHT HELP:
//* 1. IEHDASDR OR IMASPZAP DUMP TO SYSPRINT OF PARTS OF CATALOG.
//* 2. AMS PRINT OF PARTS OF CATALOG (USE COUNT, FROMKEY, AND
//*    TOKEY TO RESTRICT OUTPUT).
//* 3. IDACATFX DUMP OR DISPLAY OF PARTS OF THE CATALOG EITHER
//*    BY CI NUMBER OR RBA.
//* 4. IDACATFX DUMP OF THE INDEX PORTION OF THE CATALOG. (IDACATFX
//*    IS THE ONLY TOOL THAT WILL PROVIDE THIS)
//* 5. VSAM RECORD MANAGEMENT TRACE FACILITY. (IDATRACE)
//* 6. CATALOG MANAGEMENT CVT TRAP (SEE DIAGNOSTIC AIDS SECTION OF
//*    CATALOG MANAGEMENT PLM OR CATALOG SECTION OF MVS DEBUGGING
//*    TECHNIQUES).
//*
//* ONCE THE PROBLEM HAS BEEN ANALYSED, YOU MUST  DECIDE WHETHER OR
//* NOT TO ATTEMPT TO REPAIR THE CATALOG. GENERALLY  IT IS POSSIBLE
//* TO USE IDACATFX FOR THIS  REPAIR. IF  THIS IS TO  BE ATTEMPTED,
//* NOTE THE FOLLOWING POINTS:
//*
//* 1.  BACK UP THE CATALOG VOLUME WITH IEHDASDR BEFORE ATTEMPTING
//*     THE FIX, IF THE MASTER CATALOG IS INVOLVED. FOR COMPLEX ZAPS
//*     THIS MAY ALSO BE A GOOD IDEA, SINCE A RESTORE MAY BE SIMPLER
//*     THAN AN UN-ZAP.  IT ALSO PROVIDES YOU WITH A 'CHECKPOINT' IN
//*     CASE THE FIX APPEARS TO WORK BUT YOU FIND OUT LATER THAT THERE
//*     ARE STILL PROBLEMS.
//* 2.  AFTER RUNNING IDACATFX, RE-RUN THE CATALOG CHECKER TO SEE
//*     WHETHER THE PREVIOUSLY DETECTED ERRORS HAVE GONE.
//* 3.  TRY SOME CATALOG OPERATIONS - LOCATE, DEFINE, DELETE, LISTCAT.
//*     THESE WILL ACCESS THE CATALOG IN A DIFFERENT WAY TO THE CATA-
//*     LOG CHECKER AND WILL PROVIDE FURTHER TESTS.
//*
//*
//*                          PAGE 2
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*
//* IF IT IS NOT POSSIBLE TO REPAIR WITH IDACATFX, CATALOG RECOVERY
//* VIA REBUILD WILL BE NECESSARY UNLESS YOU HAVE A GOOD BACK UP OF
//* THE CATALOG AVAILABLE. (DASDR DUMP OR REPRO TAPE). ALSO, IF YOUR
//* CATALOG IS RECOVERABLE YOU MAY BE ABLE TO REBUILD USING RESETCAT
//* AND EXPORTRA/IMPORTRA. IF  YOU PLAN TO USE REPRO  ON A CATALOG,
//* BE SURE TO READ THE  AMS MANUAL VERY  CAREFULLY - NOT  JUST THE
//* 'COMMAND FORMAT' SECTION, BUT  ALSO THE  GENERAL DISCUSSION  ON
//* CATALOG REPRO EARLIER IN THE MANUAL.
//*
//* MESSAGES SECTION:
//*
//* THE MESSAGES PRODUCED BY THIS PROGRAM CONSIST  OF AN ALPHABETIC
//* PREFIX FOLLOWED BY A NUMERIC THREE DIGIT MESSAGE ID. THE PREFIX
//* IDENTIFIES THE FUNCTIONAL PART OF THE CATALOG  BEING CHECKED BY
//* THE PROGRAM. ALONG WITH  THE MESSAGE ID  IT CORRESPONDS  TO THE
//* LABEL IN THE PROGRAM PRECEEDING THE SECTION OF  LOGIC WHERE THE
//* CONDITION WAS DETECTED
//*
//* MESSAGE PREFIXES
//*
//* A =  CRITICAL CCR FIELDS
//* B =  CCR AND FREE RECORDS
//* D =  GDG BASE RECORDS AND ASSOCIATIONS
//* E =  CLUSTER RECORDS AND ASSOCIATIONS
//* F =  VOLUME RECORDS
//* G =  NON-VSAM RECORDS AND ASSOCIATIONS
//* H =  ALTERNATE INDEX RECORDS AND ASSOCIATIONS
//* I =  USER CATALOG RECORDS AND ASSOCIATIONS
//* U =  KEY VALIDATION
//* V =  VOLUME RECORD REQUESTED BY THE VOLUME PRINT OPTION.
//* W =  VOLUME EXTENSION RECORD REQUESTED BY VOLUME PRINT OPTION
//* X = 'DEAD' RECORDS
//*
//* SNAP IDS
//* 000
//* 030
//* 035
//* 040
//*
//* MESSAGE IDS
//*
//* A030
//*   SUMMARY - THE CCRNFCI FIELD IN THE CCR, WHICH SHOULD POINT AFTER
//*             THE LAST FORMATTED LOW KEY RANGE RECORD, POINTS AFTER
//*             A RECORD WHICH IS NOT A LOW KEY RANGE RECORD.
//*   MEANING - IN A CORRECT CATALOG, THE FORMATTED LOW KEY RANGE
//*             RECORDS ARE FOLLOWED BY UNFORMATTED ONES WHICH APPEAR
//*             AS EMPTY CIS (NOT ACCESSIBLE VIA KEYED PROCESSING).
//*             IMMEDIATELY AFTER THESE IN THE DATA COMPONENT SHOULD
//*             BE THE FIRST RECORD OF THE HIGH KEYRANGE. THE CCRNFCI
//*             FIELD SHOULD POINT TO THE FIRST UNFORMATTED RECORD.
//*             THE PROGRAM SUBTRACTS ONE FROM THE CCRNFCI VALUE AND
//*             USES THE RESULT AS A KEY FOR A DIRECT GET. THIS SHOULD
//*             RETRIEVE THE LAST FORMATTED RECORD IN THE LOW KEYRANGE,
//*             AND A FOLLOWING SEQENTIAL GET SHOULD GIVE THE FIRST
//*
//*
//*                          PAGE 3
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             RECORD IN THE HIGH KEYRANGE. IF THE DIRECT GET DOES NOT
//*             GIVE A LOW KEYRANGE RECORD, MESSAGE A030 IS PRODUCED.
//*             THE PROGRAM CHECKS FOR X'00' IN THE FIRST BYTE OF THE
//*             RECORD TO DETERMINE WHETHER IT IS A LOW KEYRANGE
//*             RECORD.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE CCR
//*         2.  THE NON-LOW KEYRANGE RECORD WHICH WAS RETRIEVED BY THE
//*             DIRECT GET. THE PROGRAM THEN GOES BACK TO THE BEGINNING
//*             OF THE LOW KEYRANGE AND ATTEMPTS TO FIND THE 'BREAK
//*             POINT' BETWEEN THE LOW AND HIGH KEYRANGES. IF IT IS
//*             SUCCESSFUL, MESSAGE A060 WILL APPEAR. IF NOT NO FURTHER
//*             MESSAGES WILL APPEAR AND THE PROGRAM WILL TERMINATE.
//* A035
//*   SUMMARY - THE CCRNFCI FIELD IN THE CCR, WHICH SHOULD POINT AFTER
//*             THE LAST FORMATTED LOW KEYRANGE RECORD, POINTS AFTER A
//*             RECORD WHICH IS A LOW KEYRANGE RECORD BUT IS NOT THE
//*             LAST FORMATTED LOW KEYRANGE RECORD.
//*   MEANING - IN A CORRECT CATALOG THE FORMATTED LOW KEYRANGE RECORDS
//*             ARE FOLLOWED BY UNFORMATTED ONES WHICH APPEAR AS EMPTY
//*             CIS (NOT ACCESSIBLE VIA KEYED PROCESSING). IMMEDIATELY
//*             AFTER THESE IN THE DATA COMPONENT SHOULD BE THE FIRST
//*             RECORD OF THE HIGH KEYRANGE. THE CCRNFCI FIELD SHOULD
//*             POINT TO THE FIRST UNFORMATTED RECORD.
//*             THE PROGRAM SUBTRACTS ONE FROM THE CCRNFCI VALUE AND
//*             USES THE RESULT AS A KEY FOR A DIRECT GET. THIS SHOULD
//*             RETRIEVE THE LAST FORMATTED RECORD IN THE LOW KEYRANGE,
//*             AND A FOLLOWING SEQUENTIAL GET SHOULD GIVE THE FIRST
//*             RECORD IN THE HIGH KEYRANGE.  IF THE DIRECT GET GIVES
//*             A LOW KEYRANGE RECORD, BUT THE SEQUENTIAL GET GIVES A
//*             RECORD WHICH IS NOT A HIGH KEYRANGE RECORD, MESSAGE
//*             A035 IS PRODUCED. THE CCRNFCI VALUE IS TOO LOW.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED.
//*         1.  THE CCR
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN A HIGH KEYRANGE REC-
//*             ORD, BUT WAS NOT.
//*             THE PROGRAM THEN READS FORWARD SEQUENTIALLY AND ATTEM-
//*             PTS TO FIND THE 'BREAK POINT' BETWEEN THE LOW AND HIGH
//*             KEYRANGES.  IF IT IS SUCCESSFUL, MESSAGE A060 WILL
//*             APPEAR. IF NOT, NO FURTHER MESSAGES WILL APPEAR AND THE
//*             PROGRAM WILL TERMINATE.
//* A060
//*   SUMMARY - THE CCRNFCI FIELD IN THE CCR IS INCORRECT, BUT THE
//*             BEGINNING OF THE HIGH KEYRANGE IS ACCESSIBLE.
//*   MEANING - THIS MESSAGE SHOULD BE PROCEEDED BY A030 OR A035.
//*             READ THE DESCRIPTIONS OF THESE MESSAGES BEFORE
//*             PROCEEDING FURTHER. THE PROGRAM HAS SUCCEEDED IN
//*             FINDING THE START OF THE HIGH KEYRANGE EVEN THOUGH
//*             THE CCRNFCI FIELD IS INCORRECT, BY READING THE CATA-
//*             LOG SEQUENTIALLY.  IT DETECTS THE START OF THE HIGH
//*             KEYRANGE BY A CHECK FOR A KEY BEGINNING WITH X'40'
//*             OR HIGHER.
//*
//*
//*                          PAGE 4
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*   PROGRAM ACTION -
//*             THESE RECORDS ARE PRINTED:
//*         1.  THE CCR
//*         2.  THE LAST LOW KEYRANGE RECORD (KEY LESS THAN X'40')
//*         3.  THE FIRST HIGH KEYRANGE RECORD.
//*             AFTER PRINTING THESE RECORDS, THE PROGRAM TERMINATES.
//*             THE CCR MUST BE CORRECTED BEFORE THE PROGRAM CAN BE
//*             RERUN. THIS IS BECAUSE THE PROGRAM RELIES ON A CORRECT
//*             CCRNFCI FIELD FOR VALIDATING CATALOG KEY VALUES.
//* B010
//*   SUMMARY - A LOW KEYRANGE RECORD IN THE 'FREE DUE TO DELETION'
//*             CHAIN IS NOT A FREE RECORD.
//*   MEANING - THE PROGRAM READS THE CCR AND USES ITS CCRFDCI FIELD
//*             TO GET TO THE START OF THE 'FREE DUE TO DELETION'
//*             CHAIN. WHILE FOLLOWING THIS CHAIN IT FOUND A RECORD
//*             WHICH DID NOT HAVE A ENTYPE FIELD OF 'F'.
//*   PROGRAM ACTION -
//*             THREE CATALOG RECORDS ARE PRINTED:
//*         1.  THE CCR
//*         2.  THE FREE RECORD WHOSE FORWARD POINTER POINTS TO THE
//*             RECORD IN ERROR, IF APPLICABLE. IF THE FIRST RECORD
//*             IN THE CHAIN IS IN ERROR, ZEROES WILL BE PRINTED
//*             SINCE THERE IS NO FREE RECORD POINTING TO THE ONE IN
//*             ERROR.
//*         3.  THE RECORD IN ERROR. THIS IS THE RECORD WHICH SHOULD
//*             HAVE A ENTYPE FIELD OF 'F' BUT DOES NOT.
//*             AFTER PRINTING THE THREE RECORDS, THE PROGRAM CONTIN-
//*             UES, BUT NO FURTHER INSPECTION OF FREE RECORDS IS
//*             ATTEMPTED.  THIS IS BECAUSE THIS CONDITION MEANS
//*             THAT THE DATA IN THE FIELD IN THE RECORD IN ERROR
//*             IS PROBABLY WRONG.
//*             NOTE: THIS MESSAGE WILL APPEAR FOR A CATALOG WITH NO
//*             FREE CHAIN (I.E. NO DEFINES HAVE BEEN DONE IN A NEW
//*             CATALOG, OR THERE ARE NO RECORDS LEFT ON FREE CHAIN).
//*             IN THIS CASE THE FREE CHAIN POINTER IN THE CCR IS
//*             EQUAL TO ZERO AND THE THIRD CI PRINTED IS CI 0.
//*             IF THE RECORD IN ERROR HAS, FOR EXAMPLE, A ENTYPE
//*             OF 'D' A LATER MESSAGE MAY SHOW IT AS A 'DEAD'
//*             RECORD IF NO OTHER CATALOG RECORD POINTS TO IT.
//*             IF THE ERROR HAS CAUSED A BREAK IN THE FREE CHAIN
//*             SOME FREE RECORDS MAY ALSO BE SHOWN AS 'DEAD'
//*             RECORDS.
//*   SOME POSSIBLE CAUSES -
//*         1.  A SYSTEM FAILURE WHICH INTERRUPTS A DEFINE OR
//*             DELETE (OR CATLG OR UNCTLG, UNDER MVS).
//*         2.  INCORRECT CATALOG INTEGRITY WHEN THE CATALOG IS
//*             SHARED BETWEEN CPUS.
//*         3.  A SYSTEM BUG.
//*   ACTION  - UNLESS THE RECORD IN ERROR IS AT THE TOP OF THE
//*             FREE CHAIN, IT SHOULD STILL BE POSSIBLE TO DEFINE
//*             AND DELETE CATALOG ENTRIES.  IF THE RECORD IN
//*             ERROR IS AT THE TOP OF THE CHAIN, THE NEXT DEFINE
//*             WILL CAUSE THE VALUE OF THE FORWARD POINTER TO BE
//*             PUT INTO THE CCR, SINCE THIS IS THE WAY CATALOG
//*
//*
//*                          PAGE 5
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             MANAGEMENTS REMOVES ENTRIES FROM THE FREE CHAIN.
//*             IF THIS OCCURS, FURTHER DEFINES WILL NOT BE POSS-
//*             IBLE, SINCE THE CCR POINTER TO THE START OF THE
//*             FREE CHAIN IS INCORRECT. DELETES ARE POSSIBLE, BUT
//*             USE OF DELETE MERELY PUSHES THE ERROR FURTHER DOWN
//*             THE CHAIN - IT WILL CAUSE PROBLEMS WHEN IT REACHES
//*             THE TOP OF THE CHAIN AGAIN.
//*             ONE POSSIBLE ACTION IS TO ZAP THE CATALOG SO THAT
//*             THE FREE CHAIN IS CORRECT. TO DO THIS THE USER
//*             MUST FIRST DECIDE WHERE THE INCORRECT POINTER SHOULD
//*             POINT BY FOLLOWING THE REST OF THE FREE CHAIN. FOR
//*             LARGE CATALOGS THIS IS VERY TEDIOUS AND RECOVERING
//*             THE WHOLE CATALOG MAY BE FASTER.
//*             IF ZAPPING IS NOT PRACTICAL, RECOVERY OF THE WHOLE
//*             CATALOG IS THE ONLY PERMANENT SOLUTION. ATER ZAPPING,
//*             THE USER SHOULD RERUN THE CATALOG VALIDITY CHECKER TO
//*             ENSURE THAT THE ZAP HAS NOT CREATED NEW PROBLEMS.
//*   OBTAINING FURTHER INFORMATION -
//*             THESE TOOLS MAY BE USEFUL:
//*         1.  AMS PRINT OF THE LOW KEYRANGE (TOKEY = X '3F').
//*         2.  IEHDASDR OR IMASPZAP PRINT OF THE LOW KEYRANGE, USING
//*             DUMP TO SYSPRINT. THESE ARE NOT AS SIMPLE TO USE AS
//*             AMS BUT HAVE THE ADVANTAGE OF PROVIDING DASD ADDRESSES
//*             ON THE OUTPUT WHICH ARE USEFUL FOR DEVISING ZAPS.
//*         3.  LISTCRA COMPARE (RECOVERABLE CATALOGS ONLY) WILL
//*             INDICATE WHETHER EXPORTRA/IMPORTRA IS A POTENTIAL
//*             RECOVERY TECHNIQUE.
//* B015
//*   SUMMARY - THERE IS A LOOP IN THE 'FREE DUE TO DELETION' CHAIN
//*             IN THE LOW KEYRANGE.
//*   MEANING - THE PROGRAM HAS READ THE SAME RECORD WITH AN ENTYPE
//*             OF 'F' TWICE WHILE FOLLOWING THE FREE CHAIN.
//*   PROGRAM ACTION -
//*             THREE CATALOG RECORDS ARE PRINTED:
//*         1.  THE CCR
//*         2.  A FREE CATALOG RECORD WHICH POINTS TO THE RECORD DESC-
//*             RIBED BELOW (3).
//*         3.  THE FREE CATALOG RECORD WHICH POINTS TO A CATALOG
//*             RECORD WHICH HAS ALREADY BEEN READ. NOTE THAT THE
//*             RECORD AT THE TOP OF THE LOOP IS NOT ACTUALLY READ
//*             TWICE - THE LOOP CONDITION IS DETECTED WITHOUT A
//*             NEED TO READ THE RECORD THE SECOND TIME.
//*             AFTER PRINTING THE THREE RECORDS, THE PROGRAM
//*             CONTINUES, BUT NO FURTHER INSPECTION OF FREE RECORDS
//*             IS ATTEMPTED.
//*             IF THE LOOP HAS CAUSED A BREAK IN THE FREE CHAIN, SOME
//*             FREE RECORDS MAY SHOW UP AS 'DEAD' RECORDS IN LATER
//*             MESSAGES.
//* C020
//*   SUMMARY - THE ENTYPE FIELD OF A LOW KEYRANGE RECORD POINTED TO
//*             DIRECTLY FROM THE HIGH KEYRANGE WAS INVALID (IE. NOT
//*             ONE OF THE FOLLOWING: B, C, V, A, G, OR U) OR A
//*             PRINT OF THE VOLUME RECORDS FOR VOLUME SERIAL NUMBER
//*             PASSED IN THE PARM FIELD DID NOT RESULT IN LOCATING
//*             A VOLUME RECORD IN THE LOW KEY RANGE.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*
//*
//*                          PAGE 6
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. THE LOW KEYRANGE RECORD RETRIEVED
//*             SHOULD BE EITHER A GDG BASE (B), CLUSTER (C), VOLUME
//*             (V), NON-VSAM (A), ALTERNATE INDEX (G), OR USER CATA-
//*             LOG RECORD (U). IF IT IS NOT, MESSAGE C020 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*             AFTER THIS, THE PROGRAM CONTINUES WITH THE NEXT HIGH
//*             KEYRANGE RECORD. THE LOW KEYRANGE RECORD WILL APPEAR
//*             IN A LATER MESSAGE AS A 'DEAD' RECORD UNLESS IT IS
//*             VALIDLY POINTED TO BY SOME OTHER CATALOG RECORD.
//* D010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE GDG BASE RECORD
//*             DOES NOT MATCH THE KEY OF THE HIGH KEYRANGE RECORD
//*             WHICH POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. FOR A GDG BASE RECORD, THE HIGH KEY-
//*             RANGE RECORD'S KEY VALUE SHOULD BE THE GDG NAME, AND
//*             THE ENTNAME FIELD IN THE LOW KEYRANGE RECORD SHOULD
//*             ALSO CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS GDG
//*             BASE RECORD.
//* D045
//*   SUMMARY - A GDG BASE RECORD CONTAINS A SET OF FIELDS POINTER
//*             INDICATING THAT A SET OF FIELDS IS IN A VERTICAL
//*             EXTENSION RECORD, BUT THE RECORD REFERRED TO DOES
//*             NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENTION RECORD POIN-
//*             TER IN THE SET OF FIELDS POINTER TO DO A DIRECT GET,
//*             EXPECTING TO OBTAIN AN EXTENSION RECORD (ENTYPE =
//*             = 'E'). BUT THE RECORD RETURNED WAS OF A DIFFERENT
//*             TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE GDG BASE RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION REC-
//*             ORD, BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME GDG BASE RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCES OF D045, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* D080
//*   SUMMARY - A GDG BASE RECORD CONTAINS AN ASSOCIATION POINTER
//*
//*
//*                          PAGE 7
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             WHICH POINTS TO A RECORD WHICH IS NOT A NON-VSAM
//*             RECORD (ENTYPE = 'A').
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN A NON-VSAM RECORD
//*             (ENTYPE = 'A'). BUT THE RECORD RETURNED WAS OF A
//*             DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE GDG BASE RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN A NON-VSAM RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME GDG BASE RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCES OF D080,
//*             MAY OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE
//*             RECORD WHICH SHOULD HAVE BEEN A NON-VSAM RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESS-
//*             AGES, UNLESS SOME OTHER RECORD POINTS TO IT
//*             CORRECTLY.
//*
//* D085
//*   SUMMARY - A GDG BASE RECORD CONTAINED AN ASSOCIATION POINTER
//*             WHICH POINTED TO A NON-VSAM RECORD (ENTYPE='A') AND
//*             THAT NON-VSAM RECORD HAS AN ASSOCIATION POINTER IN
//*             AN EXTENSION RECORD (ENTYPE='E') BUT THE RECORD READ
//*             WAS NOT AN EXTENSION RECORD.
//*
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER IN THE NON-
//*             VSAM RECORD TO DO A DIRECT GET EXPECTING TO OBTAIN
//*             AN 'E' RECORD BUT THE RECORD READ WAS OF A DIFFERENT
//*             RECORD TYPE.
//*   PROGRAM ACTION-
//*             THREE RECORDS ARE PRINTED:
//*        1.  THE GDG BASE RECORD
//*        2.  THE NON-VSAM RECORD
//*        3.  THE RECORD THAT SHOULD HAVE BEEN AN 'E' RECORD BUT
//*            WAS NOT.
//*            THE PROGRAM CONTINUES WITH THE NEXT SET OF FIELDS IN
//*            THE SAME GDG BASE RECORD. OTHER MESSAGES OR FURTHER
//*            OCCURRANCES OF D085 MAY OCCUR DUE TO THIS CONDITION.
//*
//* D100
//*   SUMMARY - THE DATA SET NAME IN A NON-VSAM RECORD ASSOCIATED
//*             WITH A GDG BASE RECORD IS EITHER A SINGLE-LEVEL
//*             NAME OR IS A MULTIPLE-LEVEL NAME WITH A FIRST
//*             LEVEL WHICH IS NOT THE SAME LENGTH AS THE GDG BASE
//*             NAME.
//*   MEANING - THE PROGRAM HAS FOUND AN ASSOCIATION POINTER IN A
//*             GDG BASE RECORD WHICH POINTS TO A NON-VSAM RECORD.
//*             IT DETERMINES THE LENGTH OF THE GDG BASE NAME AND
//*             THEN TESTS THE FIRST CHARACTER AFTER THE EQUIVAL-
//*             ENT LENGTH WITHIN THE NON-VSAM NAME. SINCE THE GDG
//*             BASE NAME SHOULD BE EQUAL TO THE FIRST LEVEL OF
//*             QUALIFICATION OF THE NON-VSAM NAME (WHICH SHOULD
//*             ALSO BE MULTI-LEVEL), THIS CHARACTER SHOULD BE A
//*             '.'. IF IT IS NOT, MESSAGE D100 IS PRODUCED.
//*   PROGRAM ACTION -
//*             THREE CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD WHICH POINTED TO THE GDG
//*             BASE RECORD.
//*         2.  THE GDG BASE RECORD WHICH POINTED TO THE NON-VSAM
//*             RECORD.
//*         3.  THE NON-VSAM RECORD.
//*             THE PROGRAM CONTINUES PROCESSING THE NON-VSAM
//*             RECORD.
//* D105
//*   SUMMARY - THE GDG NAME IN A GDG BASE RECORD WAS NOT EQUAL TO
//*             THE FIRST LEVEL OF QUALIFICATION IN THE ENTNAME
//*             FIELD OF THE ASSOCIATED NON-VSAM RECORD.
//*   MEANING - THE PROGRAM HAS FOUND AN ASSOCIATION POINTER IN A
//*             GDG BASE RECORD WHICH POINTS TO A NON-VSAM RECORD.
//*             IT HAS PERFORMED THE TESTS ASSOCIATED WITH MESSAGE
//*             ID D100. IT THEN COMPARES THE GDG BASE NAME WITH
//*             THE EQUIVALENT CHARACTERS IN THE NON-VSAM NAME.
//*             AN UNEQUAL COMPARE RESULTS IN MESSAGE D105.
//*   PROGRAM ACTION -
//*
//*
//*                          PAGE 8
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             THREE CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD WHICH POINTED TO THE GDG
//*             BASE RECORD.
//*         2.  THE GDG BASE RECORD WHICH POINTED TO THE NON-VSAM
//*             RECORD.
//*         3.  THE NON-VSAM RECORD.
//*             THE PROGRAM CONTINUES PROCESSING THE NON-VSAM RECORD.
//*             THIS MESSAGE MAY BE PRECEEDED BY D100.
//* D110
//*   SUMMARY - THE GDG ASSOCIATION POINTER IN A NON-VSAM RECORD
//*             WHICH IS POINTED TO BY A GDG BASE RECORD DOES NOT
//*             POINT BACK TO THAT GDG BASE RECORD.
//*   MEANING - THE PROGRAM CHECKS FOR A TWO-WAY CONNECTION BETWEEN
//*             THE GDG BASE RECORD AND THE ASSOCIATED NON-VSAM RE-
//*             CORD. IF THE GDG BASE'S NON-VSAM ASSOCIATION POINTER
//*             POINTS TO A NON-VSAM RECORD (ENTYPE = 'A') AND THE
//*             FIRST LEVEL OF QUALIFICATION OF THE NON-VSAM NAME
//*             IS EQUAL TO THE GDG BASE NAME BUT THE NON-VSAM
//*             RECORD'S GDG ASSOCIATION POINTER DOES NOT POINT TO
//*             THE ORIGINAL GDG BASE, MESSAGE D110 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE GDG BASE RECORD.
//*         2.  THE NON-VSAM RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE NON-VSAM
//*             RECORD.
//* D115
//*   SUMMARY - A NON-VSAM RECORD (ENTYPE = 'A') POINTED TO BY A NON-
//*             VSAM  ASSOCIATION POINTER IN A GDG BASE RECORD DOES
//*             NOT CONTAIN A GDG ASSOCIATION POINTER.
//*   MEANING - THE PROGRAM CHECKS ALL THE ASSOCIATION SETS OF FIELDS
//*             IN THE NON-VSAM RECORD. IF IT DOES NOT FIND A GDG
//*             ASSOCIATION POINTER EITHER IN THE NON-VSAM RECORD OR
//*             IN AN EXTENSION RECORD MESSAGE D115 IS ISSUED.
//*   PROGRAM ACTION -
//*             THREE CATALOG RECORDS ARE PRINTED:
//*         1.  THE GDG BASE RECORD.
//*         2.  THE NON-VSAM RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE GDG BASE
//*             RECORD. NO FURTHER WORK IS DONE WITH THE NON-VSAM
//*             RECORD.
//*         3.  THE EXTENSION RECORD THAT SHOULD HAVE CONTAINED THE
//*             ASSOCIATION. (THIS RECORD IS ONLY PRINTED WHEN THE
//*             POINTER INDICATES IT IS IN AN EXTENSION RECORD)
//* D135
//*   SUMMARY - A GDG BASE (ENTYPE = 'B'), EXTENSION (ENTYPE = 'E')
//*             OR NON-VSAM (ENTYPE = 'A') RECORD CONTAINED A HORI-
//*             ZONTAL EXTENSION POINTER, BUT THE RECORD POINTED TO
//*             IS NOT AN EXTENSION RECORD (ENTYPE = 'E').
//*   MEANING - THE PROGRAM USES THE HORIZONTAL EXTENSION RECORD
//*             POINTER IN THE SET OF FIELD'S POINTER TO DO A DIRECT
//*             GET, EXPECTING TO OBTAIN AN EXTENSION RECORD. BUT
//*             THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE HORIZONTAL POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*
//*
//*                          PAGE 9
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             THE PROGRAM THEN CONTINUES PROCESSING BY MOVING TO THE
//*             NEXT HIGH KEYRANGE RECORD. NO FURTHER PROCESSING OF
//*             THIS GROUP OF RECORDS IS ATTEMPTED.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* E010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE CLUSTER RECORD
//*             DOES NOT MATCH THE KEY OF THE HIGH KEYRANGE RECORD
//*             WHICH POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. FOR A CLUSTER RECORD, THE HIGH KEY-
//*             RANGE RECORD KEY VALUE SHOULD BE THE CLUSTER NAME, AND
//*             THE ENTNAME FIELD IN THE LOW KEYRANGE RECORD SHOULD
//*             ALSO CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS
//*             CLUSTER RECORD.
//* E045
//*   SUMMARY - A CLUSTER RECORD CONTAINS A SET OF FIELDS POINTER
//*             INDICATING THAT A SET OF FIELDS IS IN A VERTICAL
//*             EXTENSION RECORD, BUT THE RECORD REFERRED TO DOES
//*             NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENSION RECORD POINT-
//*             ER IN THE SET OF FIELD'S POINTER TO DO A DIRECT GET,
//*             EXPECTING TO OBTAIN AN EXTENSION RECORD (ENTYPE ='E').
//*             BUT THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE CLUSTER RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE SAME CLUSTER RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF E045, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* E080
//*   SUMARY  - A CLUSTER RECORD CONTAINS AN ASSOCIATION POINTER
//*             WHICH POINTS TO A RECORD WHICH IS NOT AN INDEX RECORD
//*             (ENTYPE = 'I'), DATA RECORD (ENTYPE = 'D'), ALTERNATE
//*             INDEX RECORD (ENTYPE = 'G'), OR A PATH RECORD (ENTYPE
//*             = 'R').
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN ONE OF THE RECORD
//*             TYPES LISTED ABOVE. BUT THE RECORD RETURNED WAS OF A
//*             DIFFERENT TYPE.
//*
//*
//*                         PAGE 10
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE CLUSTER RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN ONE OF THE LISTED
//*             RECORD TYPES, BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME CLUSTER RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF E080, MAY
//*             OCCUR DUE TO THE ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN ONE OF THE LISTED TYPES WILL
//*             SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS
//*             SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* E125
//*   SUMMARY - AN INDEX (ENTYPE = 'I'), DATA (ENTYPE = 'D'), ALTER-
//*             NATIVE INDEX (ENTYPE = 'G'), OR PATH (ENTYPE = 'R')
//*             RECORD ASSOCIATED WITH A CLUSTER RECORD CONTAINS A
//*             VERTICAL OR HORIZONTAL SET OF FIELDS POINTER INDI-
//*             CATING THAT A SET OF FIELDS IS IN AN EXTENSION RECORD,
//*             BUT THE RECORD REFERRED TO DOES NOT HAVE AN ENTYPE OF
//*             'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL OR HORIZONTAL EXTENSION
//*             RECORD POINTER IN THE SET OF FIELDS POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN AN EXTENSION RECORD
//*             (ENTYPE = 'E'). BUT THE RECORD RETURNED WAS OF A DIFF-
//*             ERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE VERTICAL OR HORIZONTAL
//*             EXTENSION POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* E175
//*   SUMMARY - AN INDEX (ENTYPE = 'I'), DATA (ENTYPE = 'D'), ALTER-
//*             NATE INDEX (ENTYPE = 'G'), ON PATH (ENTYPE ='R')
//*             RECORD ASSOCIATED WITH A CLUSTER RECORD DOES NOT
//*             POINT TO THAT CLUSTER RECORD.
//*   MEANING - THE PROGRAM CHECKS FOR A TWO-WAY CONNECTION BETWEEN
//*             THE CLUSTER RECORD AND ASSOCIATED INDEX, DATA, ALTER-
//*             NATE INDEX, OR PATH RECORDS. IF THE ASSOCIATED RECORD
//*             CONTAINS A BACKWARDS (ASSOCIATION) POINTER BUT THE
//*             POINTER DOES NOT POINT TO THE ORIGINAL CLUSTER REC-
//*             ORD, MESSAGE E175 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE CLUSTER RECORD.
//*         2.  THE ASSOCIATED RECORD (INDEX, DATA, ALTERNATE INDEX,
//*             OR PATH).
//*             THE PROGRAM THEN CONTINUES PROCESSING THE ASSOCIATED
//*             RECORD.
//* E185
//*   SUMMARY - AN INDEX (ENTYPE = 'I') , DATA (ENTYPE = 'D'), ALT-
//*
//*
//*                         PAGE 11
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             ERNATE INDEX (ENTYPE = 'E'), OR PATH (ENTYPE = 'R'),
//*             RECORD POINTED TO BY A CLUSTER RECORD DOES NOT CON-
//*             TAIN A CLUSTER ASSOCIATION POINTER.
//*   MEANING - THE PROGRAM CHECKS ALL THE ASSOCIATION SETS OF FIELDS
//*             IN THE INDEX, DATA, ALTERNATE INDEX, OR PATH RECORD.
//*             IF IT DOES NOT FIND A CLUSTER ASSOCIATION POINTER,
//*             MESSAGE E185 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE CLUSTER RECORD.
//*         2.  THE ASSOCIATED RECORD (INDEX, DATA, ALTERNATE INDEX,
//*             OR PATH).
//*             THE PROGRAM THEN CONTINUES PROCESSING THE CLUSTER REC-
//*             ORD. NO MORE WORK IS DONE WITH THE ASSOCIATED RECORD.
//* E205
//*   SUMMARY - A CLUSTER (ENTYPE = 'C') OR CLUSTER EXTENSION (ENTYPE=
//*             'E') RECORD CONTAINED HORIZONTAL EXTENSION POINTER, BUT
//*             THE RECORD POINTED IS NOT AN EXTENSION RECORD (ENTYPE
//*             = 'E').
//*  MEANING - THE PROGRAM USES THE HORIZONTAL EXTENSION RECORD POINTER
//*            IN THE SET OF FIELDS POINTER TO DO A DIRECT GET, EXPECT-
//*            ING TO OBTAIN AN EXTENSION RECORD. BUT THE RECORD RETUR-
//*            NED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE HORIZONTAL POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM THEN CONTINUES PROCESSING BY MOVING TO THE
//*             NEXT HIGH KEYRANGE RECORD. NO FURTHER PROCESSING OF
//*             THIS GROUP OF RECORDS IS ATTEMPTED.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* F010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE VOLUME RECORD DOES
//*             NOT MATCH THE KEY OF THE HIGH KEYRANGE RECORD WHICH
//*             POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. FOR A VOLUME RECORD, THE HIGH KEY-
//*             RANGE RECORD'S KEY VALUE SHOULD BE THE VOLUME SERIAL
//*             AND THE ENTNAME FIELD IN THE LOW KEYRANGE RECORD SHOULD
//*             ALSO CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS VOLUME
//*             RECORD.
//* F040
//*   SUMMARY - A VOLUME RECORD CONTAINS A SET OF FIELDS POINTER INDIC-
//*             ATING THAT A SET OF FIELDS IS IN A VERTICAL EXTENSION
//*
//*
//*                         PAGE 12
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             RECORD, BUT THE RECORD REFERRED TO DOES NOT HAVE AN
//*             ENTYPE OF 'W'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENSION RECORD POINTER
//*             IN THE SET OF FIELDS POINTER TO DO A DIRECT GET, EXPEC-
//*             TING TO OBTAIN AN EXTENSION RECORD (ENTYPE = 'W'). BUT
//*             THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE VOLUME RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE SAME VOLUME RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF F040, MAY
//*             OCCUR DUE TO THE ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* F100
//*   SUMMARY - A VOLUME RECORD CONTAINS A SET OF FIELDS POINTER
//*             INDICATING THAT A SET OF FIELDS IS IN A HORIZONTAL
//*             EXTENSION RECORD, BUT THE RECORD REFERRED TO DOES NOT
//*             HAVE AN ENTYPE OF 'W'.
//*   MEANING - THE PROGRAM USES THE HORIZONTAL EXTENSION RECORD POIN-
//*             TER IN THE SET OF FIELDS POINTER TO DO A DIRECT GET,
//*             EXPECTING TO OBTAIN AN EXTENSION RECORD (ENTYPE ='W').
//*             BUT THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE VOLUME RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE SAME VOLUME RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF F100, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* G010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE NON-VSAM RECORD
//*             DOES NOT  MATCH THE KEY OF THE HIGH KEYRANGE RECORD
//*             WHICH POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. FOR A NON-VSAM RECORD, THE HIGH KEY-
//*             RANGE RECORD'S KEY VALUE SHOULD BE THE DATA SET NAME,
//*             AND THE ENTNAME FIELD IN THE LOW KEYRANGE RECORD
//*             SHOULD ALSO CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*
//*
//*                         PAGE 13
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS NON-
//*             VSAM RECORD.
//* G045
//*   SUMMARY - A NON-VSAM RECORD CONTAINS A SET OF FIELDS POINTER
//*             INDICATING THAT A SET OF FIELDS IS IN A VERTICAL
//*             EXTENSION RECORD, BUT THE RECORD REFERRED TO DOES
//*             NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENSION RECORD POIN-
//*             TER IN THE SET OF FIELDS POINTER TO DO A DIRECT GET,
//*             EXPECTING TO OBTAIN AN EXTENSION RECORD (ENTYPE ='E').
//*             BUT THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE NON-VSAM RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE SAME RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF G045, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* G085
//*   SUMMARY - A NON-VSAM RECORD CONTAINS AN ASSOCIATION POINTER
//*             WHICH POINTS TO A RECORD WHICH IS NOT AN ALIAS RECORD
//*             (ENTYPE = 'X') OR A GDG BASE RECORD (ENTYPE = 'B').
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN AN ALIAS OR GDG BASE
//*             RECORD. BUT THE RECORD RETURNED WAS OF A DIFFERENT
//*             TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE NON-VSAM RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN ALIAS OR GDG
//*             BASE RECORD, BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME NON-VSAM RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF G085, MAY
//*             OCCUR DUE TO THE ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN ALIAS OR GDG BASE RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* G105
//*   SUMMARY - AN ASSOCIATION IN AN ALIAS RECORD HAS A TYPE FIELD
//*             WHICH IS NEITHER 'A' (NON-VSAM) NOR 'X' (ALIAS CHAIN).
//*   MEANING - THE PROGRAM READS ALIAS RECORDS WHICH ARE POINTED TO
//*             BY NON-VSAM RECORDS AS A PART OF NON-VSAM RECORD
//*             CHECKING. IF AN ALIAS RECORD IS FOUND WITH ASSOCIA-
//*             TION FIELDS WHICH DO NOT REPRESENT NON-VSAM (A POIN-
//*             TER BACK TO THE ORIGINAL NON-VSAM RECORD) OR ALIAS
//*             (A POINTER TO ANOTHER ALIAS RECORD ASSOCIATED WITH THE
//*             SAME NON-VSAM RECORD), MESSAGE G105 IS PRODUCED.
//*   PROGRAM ACTION -
//*
//*
//*                         PAGE 14
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE NON-VSAM RECORD WHICH POINTS TO THE ALIAS RECORD
//*             IN ERROR.
//*         2.  THE ALIAS RECORD IN ERROR.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE ALIAS RECORD.
//* G110
//*   SUMMARY - THE NON-VSAM ASSOCIATION POINTER IN AN ALIAS RECORD
//*             (ENTYPE = 'X') WHICH IS POINTED TO BY A NON-VSAM
//*             RECORD (ENTYPE = 'A') DOES NOT POINT BACK TO THAT
//*             NON-VSAM RECORD.
//*   MEANING - THE PROGRAM CHECKS FOR A TWO-WAY CONNECTION BETWEEN
//*             THE NON-VSAM RECORD AND THE ASSOCIATED ALIAS RECORD.
//*             IF THE NON-VSAM RECORD'S ALIAS ASSOCIATION POINTER
//*             POINTS TO AN ALIAS RECORD BUT THE ALIAS RECORD'S NON-
//*             VSAM RECORD ASSOCIATION POINTER DOES NOT POINT TO THE
//*             ORIGINAL NON-VSAM RECORD, MESSAGE G110 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE NON-VSAM RECORD.
//*         2.  THE ALIAS RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE ALIAS RECORD.
//* G115
//*   SUMMARY - AN ALIAS RECORD (ENTYPE = 'X') POINTED TO BY AN ALIAS
//*             ASSOCIATION POINTER IN A NON-VSAM RECORD DOES NOT
//*             CONTAIN A NON-VSAM ASSOCIATION POINTER.
//*   MEANING - THE PROGRAM CHECKS ALL THE ASSOCIATION SETS OF FIELDS
//*             IN THE ALIAS RECORD. IF IT DOES NOT FIND A NON-VSAM
//*             ASSOCIATION POINTER, MESSAGE G115 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE NON-VSAM RECORD.
//*         2.  THE ALIAS RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE NON-VSAM
//*             RECORD. NO FURTHER WORK IS DONE WITH THE ALIAS RECORD.
//* G135
//*   SUMMARY - A NON-VSAM (ENTYPE = 'A') OR NON-VSAM EXTENSION (ENTYPE
//*             ='E') RECORD CONTAINED A HORIZONTAL EXTENSION POINTER,
//*             BUT THE RECORD POINTED TO IS NOT AN EXTENSION RECORD
//*             (ENTYPE = 'E').
//*   MEANING - THE PROGRAM USES THE HORIZONTAL EXTENSION RECORD
//*             POINTER IN THE SET OF FIELDS POINTER TO DO A DIRECT
//*             GET, EXPECTING TO OBTAIN AN EXTENSION RECORD. BUT
//*             THE RECORD RETURNED WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE HORIZONTAL POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION REC-
//*             ORD, BUT WAS NOT.
//*             THE PROGRAM THEN CONTINUES PROCESSING BY MOVING TO
//*             THE NEXT HIGH KEYRANGE RECORD. NO FURTHER PROCESSING
//*             OF THIS GROUP OF RECORDS IS ATTEMPTED.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*
//*
//*                         PAGE 15
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* H010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE ALTERNATE INDEX
//*             RECORD DOES NOT MATCH THE KEY OF THE HIGH KEYRANGE
//*             RECORD WHICH POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH KEY-
//*             RANGE. EACH HIGH KEYRANGE RECORD CONTAINS A CI NUMBER,
//*             WHICH IS USED TO GENERATE A KEY FOR A DIRECT GET INTO
//*             THE LOW KEYRANGE. FOR AN ALTERNATE INDEX RECORD, THE
//*             HIGH KEYRANGE RECORD'S KEY VALUE SHOULD BE THE ALTERN-
//*             ATE INDEX NAME, AND THE ENTNAME FIELD IN THE LOW KEY-
//*             RANGE RECORD SHOULD ALSO CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS AL-
//*             TERNATE INDEX RECORD.
//* H045
//*   SUMMARY - AN ALTERNATE INDEX RECORD CONTAINS A SET OF FIELDS
//*             POINTER INDICATING THAT A SET OF FIELDS IS IN A
//*             VERTICAL EXTENSION RECORD, BUT THE RECORD REFERRED
//*             TO DOES NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENSION RECORD
//*             POINTER IN THE SET OF FIELDS POINTER TO DO A DIRECT
//*             GET, EXPECTING TO OBTAIN AN EXTENSION RECORD (ENTYPE
//*             = 'E'). BUT THE RECORD RETURNED WAS OF A DIFFERENT
//*             TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE ALTERNATE INDEX RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION REC-
//*             ORD, BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET OF
//*             FIELDS POINTER IN THE SAME ALTERNATE INDEX RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF H045, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS
//*             SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* H080
//*   SUMMARY - AN ALTERNATE INDEX RECORD CONTAINS AN ASSOCIATION
//*             POINTER WHICH POINTS TO A RECORD WHICH IS NOT AN
//*             INDEX RECORD (ENTYPE = 'I'), DATA RECORD (ENTYPE =
//*             'D'), CLUSTER RECORD (ENTYPE = 'C'), OR PATH RECORD
//*             (ENTYPE ='R').
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER TO DO A
//*             DIRECT GET EXPECTING TO OBTAIN ONE OF THE RECORD
//*             TYPES LISTED ABOVE. BUT THE RECORD RETURNED WAS
//*             OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE ALTERNATE INDEX RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN ONE OF THE LISTED
//*
//*
//*                         PAGE 16
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             TYPES BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             FIELDS POINTER IN THE SAME ALTERNATE INDEX RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCE OF H080, MAY
//*             OCCUR DUE TO THE ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN ONE OF THE LISTED TYPES
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER
//*             MESSAGES, UNLESS SOME OTHER RECORD POINTS TO IT
//*             CORRECTLY.
//* H125
//*   SUMMARY - AN INDEX (ENTYPE ='I'), DATA (ENTYPE ='D'), CLUSTER
//*             (ENTYPE ='C') OR PATH (ENTYPE ='R') RECORD ASSOCIATED
//*             WITH AN ALTERNATE INDEX RECORD CONTAINS A VERTICAL
//*             OR HORIZONTAL SET OF FIELDS POINTER INDICATING THAT
//*             A SET OF FIELDS IS IN AN EXTENSION RECORD, BUT THE
//*             RECORD REFERRED TO DOES NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL OR HORIZONTAL EXTEN-
//*             SION RECORD POINTER IN THE SET OF FIELDS POINTER
//*             TO DO A DIRECT GET, EXPECTING TO OBTAIN AN EXTEN-
//*             SION RECORD (ENTYPE ='E'). BUT THE RECORD RETURNED
//*             WAS OF A DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE VERTICAL OR HORIZONTAL
//*             EXTENSION POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE AN EXTENSION RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME RECORD.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESSAGES,
//*             UNLESS SOME OTHER RECORD POINTS TO IT CORRECTLY.
//* H170
//*   SUMMARY - AN INDEX (ENTYPE ='I'), DATA (ENTYPE ='D'),
//*             CLUSTER (ENTYPE ='C'), OR PATH (ENTYPE ='R')
//*             RECORD ASSOCIATED WITH AN ALTERNATE INDEX RECORD
//*             DOES NOT POINT TO THAT ALTERNATE INDEX RECORD.
//*   MEANING - THE PROGRAM CHECKS FOR A TWO-WAY CONNECTION BET-
//*             WEEN THE ALTERNATE INDEX RECORD AND ASSOCIATED
//*             INDEX, DATA, CLUSTER, OR PATH RECORDS. IF THE
//*             ASSOCIATED RECORD CONTAINS A BACKWARDS (ASSOCIA-
//*             TION) POINTER BUT THE POINTER DOES NOT POINT TO
//*             THE ORIGINAL ALTERNATE INDEX RECORD, MESSAGE
//*             H170 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE ALTERNATE INDEX RECORD.
//*         2.  THE ASSOCIATED RECORD (INDEX, DATA, CLUSTER, OR
//*             PATH).
//*             THE PROGRAM THEN CONTINUES PROCESSING THE ASSOC-
//*             IATED RECORD.
//* H185
//*   SUMMARY - AN INDEX (ENTYPE ='I'), DATA (ENTYPE ='D'),
//*             CLUSTER (ENTYPE ='C'), OR PATH (ENTYPE ='R')
//*
//*
//*                         PAGE 17
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             RECORD POINTED TO BY AN ALTERNATE INDEX RECORD
//*             DOES NOT CONTAIN AN ALTERNATE INDEX ASSOCIA-
//*             TION POINTER.
//*   MEANING - THE PROGRAM CHECKS ALL THE ASSOCIATION SETS OF
//*             FIELDS IN THE INDEX, DATA, CLUSTER, OR PATH
//*             RECORD. IF IT DOES NOT FIND AN ALTERNATE INDEX
//*             ASSOCIATION POINTER, MESSAGE H185 IS PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE ALTERNATE INDEX RECORD.
//*         2.  THE ASSOCIATED RECORD (INDEX, DATA, CLUSTER OR
//*             PATH).
//*             THE PROGRAM THEN CONTINUES PROCESSING THE ALTER-
//*             NATE INDEX RECORD. NO FURTHER WORK IS DONE WITH
//*             THE ASSOCIATED RECORD.
//* H205
//*   SUMMARY - AN ALTERNATE INDEX (ENTYPE ='G'), OR ALTERNATE
//*             INDEX EXTENSION (ENTYPE ='E') RECORD CONTAINED
//*             A HORIZONTAL EXTENSION POINTER, BUT THE RECORD
//*             POINTED TO IS NOT AN EXTENSION RECORD (ENTYPE
//*             ='E').
//*   MEANING - THE PROGRAM USES THE HORIZONTAL EXTENSION RECORD
//*             POINTER IN THE SET OF FIELDS POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN AN EXTENSION
//*             RECORD. BUT THE RECORD RETURNED WAS OF A DIFFERENT
//*             TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE RECORD CONTAINING THE HORIZONTAL POINTER.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION
//*             RECORD, BUT WAS NOT.
//*             THE PROGRAM THEN CONTINUES PROCESSING BY MOVING
//*             TO THE NEXT HIGH KEYRANGE RECORD. NO FURTHER PROC-
//*             ESSING OF THIS GROUP OF RECORDS IS ATTEMPTED.
//*             THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION
//*             RECORD WILL SHOW UP AS A 'DEAD' RECORD IN OTHER
//*             MESSAGES, UNLESS SOME OTHER RECORD POINTS TO IT
//*             CORRECTLY.
//* I010
//*   SUMMARY - THE ENTNAME FIELD OF A LOW KEYRANGE USER CATALOG
//*             RECORD DOES NOT MATCH THE KEY OF THE HIGH KEYRANGE
//*             RECORD WHICH POINTS TO IT.
//*   MEANING - THE PROGRAM READS SEQUENTIALLY THROUGH THE HIGH
//*             KEYRANGE. EACH HIGH KEYRANGE RECORD CONTAINS A
//*             CI NUMBER, WHICH IS USED TO GENERATE A KEY FOR A
//*             DIRECT GET INTO THE LOW KEYRANGE. FOR A USER
//*             CATALOG RECORD, THE HIGH KEYRANGE RECORD KEY VALUE
//*             SHOULD BE THE USER CATALOG NAME, AND THE ENTNAME
//*             FIELD IN THE LOW KEYRANGE RECORD SHOULD ALSO
//*             CONTAIN THIS SAME NAME.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE HIGH KEYRANGE RECORD.
//*         2.  THE LOW KEYRANGE RECORD IT POINTS TO.
//*
//*
//*                         PAGE 18
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             AFTER THIS THE PROGRAM CONTINUES PROCESSING THIS
//*             USER CATALOG RECORD.
//* I045
//*   SUMMARY - A USER CATALOG BASE RECORD CONTAINS A SOF POINTER
//*             INDICATING THAT A SET OF FIELDS IS IN A VERTICAL
//*             EXTENSION RECORD, BUT THE RECORD REFERRED TO DOES
//*             NOT HAVE AN ENTYPE OF 'E'.
//*   MEANING - THE PROGRAM USES THE VERTICAL EXTENSION RECORD POIN-
//*             TER IN THE SET OF FIELDS POINTER TO DO A DIRECT GET,
//*             EXPECTING TO OBTAIN AN EXTENSIONRECORD (ENTYPE =
//*             = 'E'). BUT THE RECORD RETURNED WAS OF A DIFFERENT
//*             TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE USER CATALOG RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN EXTENSION REC-
//*             ORD, BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME USER CATALOG RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCES OF I045, MAY
//*             OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE RECORD
//*             WHICH SHOULD HAVE BEEN AN EXTENSION RECORD WILL SHOW
//*             UP AS A 'DEAD' RECORD IN OTHER MESSAGES, UNLESS SOME
//*             OTHER RECORD POINTS TO IT CORRECTLY.
//* I080
//*   SUMMARY - A USER CATALOG RECORD CONTAINS AN ASSOCIATION POINTER
//*             WHICH POINTS TO A RECORD WHICH IS NOT AN ALIAS
//*             RECORD (ENTYPE = 'X').
//*   MEANING - THE PROGRAM USES THE ASSOCIATION POINTER TO DO A
//*             DIRECT GET, EXPECTING TO OBTAIN AN ALIAS RECORD
//*             (ENTYPE = 'X'). BUT THE RECORD RETURNED WAS OF A
//*             DIFFERENT TYPE.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE USER CATALOG RECORD.
//*         2.  THE RECORD WHICH SHOULD HAVE BEEN AN ALIAS RECORD,
//*             BUT WAS NOT.
//*             THE PROGRAM CONTINUES PROCESSING WITH THE NEXT SET
//*             OF FIELDS POINTER IN THE SAME USER CATALOG RECORD.
//*             OTHER MESSAGES, OR FURTHER OCCURRANCES OF I080,
//*             MAY OCCUR DUE TO THIS ERROR CONDITION. ALSO, THE
//*             RECORD WHICH SHOULD HAVE BEEN AN ALIAS RECORD
//*             WILL SHOW UP AS A 'DEAD' RECORD IN OTHER MESS-
//*             AGES, UNLESS SOME OTHER RECORD POINTS TO IT
//*             CORRECTLY.
//* I115
//*   SUMMARY - AN ALIAS RECORD ASSOCIATED WITH A USER CATALOG RECORD
//*             DOES NOT POINT TO THAT USER CATALOG RECORD.
//*   MEANING - THE PROGRAM CHECKS FOR A TWO-WAY CONNECTION BETWEEN
//*             THE USER CATALOG RECORD AND ASSOCIATED ALIAS RECORDS.
//*             IF THE ASSOCIATED RECORD CONTAINS A BACKWARDS (ASSOC-
//*             IATION) POINTER BUT THE POINTER DOES NOT POINT TO THE
//*             ORIGINAL USER CATALOG RECORD, MESSAGE I115 IS PRODUCED.
//*   PROGRAM ACTION -
//*
//*
//*                         PAGE 19
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE USER CATALOG RECORD.
//*         2.  THE ASSOCIATED ALIAS RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE ASSOCIATED
//*             RECORD.
//* I120
//*   SUMMARY - AN ALIAS RECORD (ENTYPE ='X') POINTED TO BY A USER
//*             CATALOG (ENTYPE ='U') DOES NOT CONTAIN A USER CATA-
//*             LOG ASSOCIATION POINTER.
//*   MEANING - THE PROGRAM CHECKS ALL THE ASSOCIATION SETS OF
//*             FIELDS IN THE ALIAS RECORD. IF IT DOES NOT FIND A
//*             USER CATALOG ASSOCIATION POINTER, MESSAGE I120 IS
//*             PRODUCED.
//*   PROGRAM ACTION -
//*             TWO CATALOG RECORDS ARE PRINTED:
//*         1.  THE USER CATALOG RECORD.
//*         2.  THE ASSOCIATED ALIAS RECORD.
//*             THE PROGRAM THEN CONTINUES PROCESSING THE USER
//*             CATALOG RECORD. NO FURTHER WORK IS DONE WITH THE
//*             ASSOCIATED RECORD.
//* U035
//*   SUMMARY - A KEY VALUE REQUIRED TO READ A LOW KEYRANGE RECORD
//*             WAS FOUND TO BE INVALID.
//*   MEANING - THE PROGRAM USES CI NUMBERS FROM CATALOG RECORD
//*             FIELDS IN HIGH KEYRANGE OR LOW KEYRANGE RECORDS TO
//*             CONSTRUCT KEYS FOR DIRECT GETS TO THE LOW KEYRANGE.
//*             THIS IS POSSIBLE BECAUSE THE CONTROL INTERVAL NUMBER
//*             OF A LOW KEYRANGE RECORD APPEARS IN THE FIRST FOUR
//*             BYTES OF THE KEY FIELD OF A LOW KEYRANGE RECORD,
//*             ALLOWING THE PROGRAM TO USE A GENERIC GET WITH A KEY
//*             LENGTH OF 4. BEFORE ATTEMPTING THE GET, THE PROGRAM
//*             CHECKS THAT THE LAST THREE BYTES OF THE KEY VALUE
//*             (A THREE-BYTE CI NUMBER RIGHT-ADJUSTED IN A FOUR-BYTE
//*             KEY FIELD) IS GREATER THAN OR EQUAL TO X'000000' AND
//*             LESS THAN THE CCRNFCI FIELD IN THE CCR (WHICH POINTS
//*             TO THE FIRST UNFORMATTED 'NEVER USED' RECORD IN THE
//*             LOW KEYRANGE). IF THE KEY IS OUTSIDE THIS RANGE,
//*             MESSAGE U035 IS PRODUCED.
//*   PROGRAM ACTION -
//*             ALL FIVE CATALOG RECORD BUFFERS ARE PRINTED.
//*             THEIR CONTENTS ARE:
//*         1.  THE CCR.
//*         2.  THE HIGH KEYRANGE RECORD CURRENTLY BEING PROCESSED.
//*         3.  ANY OF THE FOLLOWING DEPENDING ON THE CIRCUMSTANCES:
//*             GDG BASE, CLUSTER, VOLUME, NON-VSAM, ALTERNATE INDEX,
//*             USER CATALOG, OR A HORIZONTAL EXTENSION OF ONE OF
//*             THESE TYPES. THIS BUFFER CONTAINS THE NEXT LEVEL OF
//*             RECORD DOWN FROM THE HIGH KEYRANGE.
//*         4.  ANY TYPE OF LOW KEYRANGE RECORD EXCEPT THE CCR. THIS
//*             BUFFER CONTAINS THE NEXT LEVEL OF RECORD DOWN FROM
//*             (3) ABOVE.
//*         5.  A VERTICAL EXTENSION RECORD OF ANY TYPE OF LOW KEY-
//*             RANGE RECORD.
//*             THE PROGRAM ALSO PRINTS THE FOLLOWING FIELDS USING
//*
//*
//*                         PAGE 20
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*             THE SNAP MACRO WITH AN ID OF '035':
//*         1.  THE DIRECT RPL USED FOR READING THE LOW KEYRANGE.
//*         2.  THE SEQUENTIAL RPL USED FOR READING THE HIGH KEY-
//*             RANGE.
//*         3.  THE KEY VALUE.
//*             THE PROGRAM THEN CONTINUES BY MOVING TO THE NEXT
//*             RECORD IN THE HIGH KEYRANGE. NO FURTHER WORK IS
//*             DONE ON THE GROUP OF RECORDS IN ERROR. THIS ERROR
//*             CONDITION COULD CAUSE OTHER MESSAGES TO APPEAR OR
//*             'DEAD' RECORDS TO SHOW UP, SINCE A RECORD WHICH WAS
//*             POINTED TO FROM A HIGH OR LOW KEYRANGE RECORD
//*             COULD NOT BE OBTAINED.
//* V100
//*   SUMMARY - THIS IS NOT AN ERROR LOCATED BY THE CATALOG CHECKER.
//*             IT IS A VOLUME RECORD PRINTED BY REQUEST IN THE PARM
//*             FIELD OF THE EXEC STATEMENT.
//* W100
//*   SUMMARY - THIS IS NOT AN ERROR LOCATED BY THE CATALOG CHECKER.
//*             IT IS A VOLUME EXTENSION RECORD (W) PRINTED AS PART
//*             OF A REQUEST TO LIST THE VOLUME STRUCTURE IN THE
//*             PARM FIELD OF THE EXEC STATEMENT. THIS RECORD IS A
//*             RECORD IN THE HORIZONTAL CHAIN OF 'W' RECORDS.
//* W150
//*   SUMMARY - THIS IS NOT AN ERROR LOCATED BY THE CATALOG CHECKER.
//*             IT IS A VOLUME EXTENSION RECORD (W) PRINTED AS PART
//*             OF A REQUEST TO LIST THE VOLUME STRUCTURE IN THE
//*             PARM FIELD OF THE EXEC STATEMENT. THIS RECORD IS A
//*             RECORD IN THE VERTICAL CHAIN OF 'W' RECORDS.
//* X040
//*   SUMMARY - A LOW KEYRANGE RECORD IS NOT POINTED TO CORRECTLY
//*             BY ANY OTHER CATALOG RECORD.
//*   MEANING - THIS CONDITION CAN BE NORMAL AFTER THE CATALOG MGMT.
//*             LEVELSET PTF'S HAVE BEEN APPLIED. IF THE RECORD THAT
//*             IS 'DEAD' IS A FREE CI IT MAY HAVE BEEN CAUSED BY THE
//*             ADDITIONAL VALIDITY CHECKING ADDED WITH THE LEVELSET
//*             CODE. WHEN THE 'DEAD RECORD' IS A FREE CI IT CAN BE
//*             RE-CLAIMED BY REBUILDING THE FREECHAIN.
//*             THE PROGRAM CREATES A TABLE WITH AN ENTRY FOR EACH
//*             LOW KEYRANGE FORMATTED RECORD BY USING THE VALUE
//*             IN THE CCRNFCI FIELD IN THE CCR TO DETERMINE THE
//*             NUMBER OF ENTRIES. AS A LOW KEYRANGE RECORD IS READ
//*             SUCCESSFULLY VIA A KEY BASED ON A CI NUMBER OBTAIN-
//*             ED FROM A HIGH KEYRANGE RECORD OR ANOTHER LOW KEY-
//*             RANGE RECORD, THE APPROPRIATE ENTRY IN THE TABLE IS
//*             MARKED. WHEN ALL HIGH KEYRANGE RECORDS HAVE BEEN
//*             READ, THE PROGRAM GOES THROUGH THE TABLE AND ANY
//*             ENTRIES WHICH ARE STILL UNMARKED ARE INDICATED
//*             AS 'DEAD' RECORDS.
//*             NOTE THAT CERTAIN ERROR CONDITIONS MAY CAUSE AN
//*             ENTRY TO REMAIN UNMARKED IN THE TABLE EVEN THOUGH
//*             ITS RECORD HAS BEEN RETRIEVED. FOR EXAMPLE, IF A
//*             HIGH KEYRANGE RECORD POINTS TO A LOW KEYRANGE RE-
//*             CORD WHICH CAN BE READ SUCCESSFULLY, BUT THE LOW
//*             KEYRANGE RECORD IS NOT AN EXPECTED TYPE (DATA,
//*             INDEX, NON-VSAM, GDG BASE, CLUSTER, OR USER CATA-
//*             LOG). THE RULE IS THAT A RECORD IS NOT 'DEAD' AS
//*             LONG AS IT IS POINTED TO BY ANOTHER CATALOG REC-
//*             ORD AND IS A CORRECT RECORD TYPE FOR THAT POINTER
//*             CONNECTION. SO IF A RECORD IS THE EXPECTED TYPE,
//*             IF WILL NOT BE 'DEAD' EVEN IF IT CONTAINS INCOR-
//*             RECT FIELDS.
//*   PROGRAM ACTION -
//*             THE PROGRAM PRINTS MESSAGE X040 AND THE 'DEAD'
//*             RECORD ONCE FOR EACH 'DEAD' RECORD. WHEN ALL 'DEAD'
//*             RECORDS HAVE BEEN PROCESSED, THE PROGRAM PRINTS
//*             THE STATISTICS PAGE AND TERMINATES.
//*
//* SNAP IDS
//*
//* 000
//*   SUMMARY - CATALOG RECORD X'00000003' IS NOT A CCR (ENTYPE=
//*            'L').
//*   MEANING - THE PROGRAM BEGINS BY VALIDATING CCR FIELDS. THE
//*             CCR IS RETRIEVED USING A DIRECT GET WITH A KEY OF
//*             X'00000003'. WHEN THE GET IS SUCCESSFUL BUT THE
//*             RECORD RETURNED DOES NOT HAVE AN ENTYPE OF 'L',
//*
//*
//*                         PAGE 21
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*             SNAP 000 IS PRODUCED.
//*   PROGRAM ACTION -
//*             THE RECORD WHICH SHOULD HAVE BEEN A CCR, BUT WAS
//*             NOT, IS SNAPPED. THE PROGRAM THEN TERMINATES.
//* 030
//*   SUMMARY - A LOGICAL ERROR OCCURED DURING A GET INVOLVED
//*             WITH VALIDATING THE CCRNFCI FIELD.
//*   MEANING - FOUR TYPES OF GETS MAY BE ISSUED DURING VALIDATION
//*             OF THE CCRNFCI FIELD:
//*         1.  GET DIRECT FOR LAST FORMATTED LOW KEYRANGE RECORD
//*             (DONE ONCE).
//*         2.  GET SEQUENTIAL FOR NEXT RECORD (DONE ONCE).
//*         3.  GET DIRECT FOR FIRST RECORD IN LOW KEYRANGE (DONE
//*             ONCE IF CCRNFCI INCORRECT).
//*         4.  GET SEQUENTIAL FOR NEXT RECORD (REPEATED UNTIL
//*             BEGINNING OF HIGH KEYRANGE FOUND OR END-OF-DATA
//*             REACHED, IF CCRNFCI INCORRECT).
//*             A LOGICAL ERROR DURING ANY OF THESE GETS WILL RESULT
//*             IN A SNAP WITH AN ID OF 030.
//*   PROGRAM ACTION -
//*             THE FOLLOWING AREAS ARE SNAPPED:
//*         1.  THE CCR.
//*         2.  THE DIRECT RPL.
//*         3.  THE SEQUENTIAL RPL.
//*             THE PROGRAM THEN TERMINATES. NO STATS. ARE PRODUCED.
//* 035
//*   SUMMARY - SEE MESSAGE U035.
//*
//*
//* 040
//*   SUMMARY - A LOGICAL ERROR OCCURRED ON A GET REQUEST.
//*
//*   MEANING - AFTER VALIDATION OF THE CCR FIELDS IF A LOGICAL
//*             ERROR OCCURS ON A GET REQUEST THIS SNAPID IS
//*             ISSUED.
//*   PROGRAM ACTION -
//*             ALL AVAILABLE WORKAREAS AND DATA AREAS ARE SNAPPED.
//*
//* USER ABEND CODES
//*
//* 999
//*   ERROR OPENING VSAMCAT, SYSPRINT, OR SNAP. THIS MAY BE
//*   CAUSED BY AN INVALID VOLUME PARAMETER ON THE EXEC STATEMENT.
//* 998
//*   RPL ERROR ON KEY'D, DIRECT GET FOR CI #2,
//*   (CATALOG CLUSTER RECORD).
//* 997
//*   RPL ERROR ON KEY'D, DIRECT GET FOR CI #3,
//*   (CATALOG CONTROL RECORD - CCR).
//* 996
//*   UNABLE TO GET STORAGE FOR CAT-TABLE.
//*   THIS MAY OCCUR WITH VERY LARGE CATALOGS.
//*   INCREASE REGION SIZE TO PROVIDE MORE
//*   WORKING STORAGE FOR LOW KEYRANGE CI TABLE.
//* 995
//*   RPL ERROR ON KEY'D, DIRECT GET WHILE
//*   FOLLOWING THE DELETE CHAIN.
//* 994
//*   RPL ERROR ON KEY'D, DIRECT GET FOR LAST
//*   FORMATTED LOW KEYRANGE RECORD.
//* 993
//*   RPL ERROR ON KEY'D, SEQUENTIAL GET FOR
//*   A HIGH KEYRANGE RECORD. THIS CAN OCCUR IF
//*   AN INVALID VOLUME SERIAL NUMBER IS PASSED IN
//*   THE EXEC STATEMENT PARMS.
//* 992
//*   RPL ERROR ON KEY'D, DIRECT GET FOR LOW
//*
//*
//*                         PAGE 22
//*
//*
//*
//*
//*
//*
//*                          DIAGNOSIS
//*
//*
//*   KEYRANGE RECORD USING CI NUMBER OBTAINED
//*   FROM A HIGH KEYRANGE TRUENAME ENTRY.
//*
//*
//*
//*                         PAGE 23           IBM INTERNAL USE ONLY
//*
//*
//*
**********************************************************************
//*                        MARCH 18, 1980
//*******************************************************************
//*      CATALOG POINTER VALIDATION CSECT.                          *
//*      DOCUMENTATION FOR USE AVAILABLE IN DLL/1 LIBRARY UNDER THE *
//*******************************************************************
//*
//*THE FOLLOWING CHANGES HAVE BEEN ADDED IN THIS VERSION OF IDACATCK
//*
//*FIX0001 ADD A MODULE NAME/DATE TO AID IN LEVEL IDENTIFICATION.
//*
//*FIX0002 CORRECT ABEND001 WHICH CAN OCCUR IN SVS ENVIRONMENT DUE
//*        TO MISSING CONTROL CHARACTER FOR PRINT LINE.
//*
//*FIX0003 ADD LOGIC TO RUN A 'VERIFY' AGAINST THE CATALOG WHEN AN
//*        OPEN RC116 IS ENCOUNTERD WHEN OPENING THE CATALOG.
//*
//*FIX0004 ADD A PATCH AREA TO IDACATCK NAMED 'PATCH'
//*
//*FIX0005 FIX PROBLEM WHICH CAUSED A VALID VOLUME EXTENSION RECORD
//*        TO SHOW UP AS A X040 (DEAD) RECORD.
//*
//*FIX0006 ALTER CCR VALIDITY CHECKING SO THAT IT IS COMPATABLE WITH
//*        THE CATALOG MANAGEMENT LEVELSET PTF'S
//*
//*FIX0007 CORRECT SNAPID '999' TO A VALID SNAPID FOR A VS1 SYSTEM.
//*        SNAPID '999' HAS BEEN CHANGED TO SNAPID '040'
//*
//*FIX0008 REMOVE FIX0005 WHICH DID NOT FIX THE PROBLEM DESCRIBED
//*        BY IT. ADD CODE TO FIX THE PROBLEM DESCRIBED BY FIX0005
//*
//*FIX0009 ALLOW OPTIONAL PRINTING OF A VOLUME RECORD STRUCTURE BY
//*        PASSING THE VOLUME SERIAL NUMBER TO BE LISTED THROUGH
//*        THE PARM FIELD OF THE EXEC STATEMENT.
//*
//*FIX0010 CODE ADDED TO COMPLETE THE FIX ADDED THROUGH FIX0006
//*
//*FIX0011 ABEND0C4 CAN OCCUR DURING GDG PROCESSING IF A NON-VSAM
//*        RECORD HAS AN ASSOCIATION BACK TO THE GDG BASE IN AN
//*        EXTENSION RECORD.
//*
//*FIX0012 INCORRECT D110 INDICATION CAN OCCUR DURING GDG LOGIC
//*        IF A NON-VSAM GDG MEMBER ALSO HAS AN ALIAS.
//*
//LINK    EXEC  PGM=IEWL,PARM='AC=1'
//SYSPRINT  DD  SYSOUT=A
//SYSUT1    DD  UNIT=3330,SPACE=(CYL,(5,1))
//SYSLMOD   DD  DSN=SYS1.LINKLIB,DISP=SHR
//SYSLIN    DD  *
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END                            15734AS100 050180079
 NAME IDACATCK(R)
/*
