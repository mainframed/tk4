         PRINT NOGEN
COMMTASK CSECT
***********************************************************************
*                                                                     *
* THIS PROGRAM INTERCEPTS ANY 'STOP' OR 'MODIFY' COMMANDS ENTERED     *
* BY THE CONSOLE OPERATOR AND COMMUNICATES WITH THE CALLER VIA        *
* A REPLY BUFFER (DATA CONTENT).                                      *
*                                                                     *
* INVOCATION SHOULD BE VIA THE COBOL 'CALL' VERB (OR BALR - ASM)      *
*       PARAMETER LIST -                                              *
*           ADDR OF 80 BYTE REPLY AREA                                *
*                                                                     *
* THE USER MUST PERIODICALLY CALL THIS ROUTINE AND THEN CHECK THE     *
* REPLY AREA FOR ANY COMMUNICATIONS FROM THE OPERATOR.                *
* THE REPLY AREA MUST BE CLEARED PRIOR TO CALLING THIS ROUTINE.       *
*                                                                     *
* THE WORD 'STOP' MUST BE USED TO SHUTDOWN YOUR PROGRAM BECAUSE THE   *
* 'COMMTASK' SUBROUTINE WILL CONVERT THE 'P XXXX' TO A 'STOP' IN THE  *
* REPLY AREA.                                                         *
*                                                                     *
* 'F XXXX,STOP' IS THE SAME AS 'P XXXX'                               *
*                                                                     *
*                                                                     *
* EXAMPLE (COBOL) -                                                   *
*                                                                     *
*        WORKING-STORAGE SECTION.                                     *
*        01 REPLY-AREA             PIC X(80) VALUE SPACES.            *
*                                                                     *
*        CALL 'COMMTASK' USING REPLY-AREA.                            *
*        IF REPLY-AREA = SPACES GO TO NO-REPLY.                       *
*        IF REPLY-AREA = 'STOP' GO TO END-OF-JOB.                     *
*        ----- PROCESS REPLY -------                                  *
*        MOVE SPACES TO REPLY-AREA.                                   *
*                                                                     *
*                                                                     *
* EXAMPLE (ASSEMBLER) -                                               *
*        LOAD  EP=COMMTASK                                            *
*        ST    R0,COMMADDR                                            *
*        ....                                                         *
*        ....                                                         *
*        MVC   REPLY80,BLANKS                                         *
*        LA    R1,=A(REPLY80)                                         *
*        L     R15,COMMADDR                                           *
*        BAL   R14,R15                                                *
*        CLC   REPLY80,BLANKS                                         *
*        BE    NOREPLY                                                *
*        CLC   REPLY80(4),=C'STOP'                                    *
*        BE    EOJ                                                    *
*        ....                                                         *
*        PROCESS REPLY                                                *
*        ....                                                         *
* EOJ    DELETE EP=COMMTASK                                           *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION
*
*----------------------------------------------------------------------
         $REGS
         SAVE  (14,12)            SAVE REGS
         LR    R12,R15            SET BASE REG (NO SAVE AREA NEEDED)
         USING COMMTASK,R12       INFORM THE ASSEMBLER
         L     R8,0(R1)           SAVE PARM POINTER
         USING CIBSECT,R9         DECLARE CIB BASE
ENTRY010 DS    0H
         TM    SW,FIRST           FIRST TIME THRU ?
         BO    EXIT010            NO - EXIT
         OI    SW,FIRST           YES - TURN ON FLAG
         L     R1,16              CVT ADDR
         L     R1,0(R1)           OLD/NEW POINTERS
         L     R1,4(R1)           TCB POINTER
         L     R1,12(R1)          TIOT POINTER
         MVC   WTO010+8(8),0(R1)  JOBNAME TO MESSAGE1
         MVC   WTO020A+8(8),0(R1) JOBNAME TO MESSAGE2
         MVC   WTO020B+8(8),0(R1) JOBNAME TO MESSAGE3
WTO010   WTO   '//////// - MODIFY COMMANDS ALLOWED'
         EXTRACT COMMAREA,'S',FIELDS=COMM GET QEDIT ANCHOR
         L     R11,COMMAREA       SET BASE FOR COMMAREA
         LA    R10,4(R11)         CIB CHAIN ANCHOR ADDRESS
         ICM   R9,15,4(R11)       FIRST CIB IF ANY
         BZ    AAA010             NOT A STARTED TASK
         QEDIT ORIGIN=(10),BLOCK=(9)  FREE START COMMAND CIB
AAA010   EQU   *
         QEDIT ORIGIN=(10),CIBCTR=5   GET 5 CIB'S
EXIT010  EQU   *
         B     ENTRY020
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        CHECK FOR MESSAGE
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         L     R11,COMMAREA       SET BASE FOR COMMAREA
         L     R7,0(R11)          ADDRESS OF COMMUNICATION ECB
         LA    R10,4(R11)         CIB CHAIN ANCHOR ADDRESS
         ICM   R9,15,4(R11)       IS THERE A CIB ?
         BZ    EXIT020            NO - NO COMMUNICATION
         CLI   CIBVERB,X'40'      WAS THIS A 'STOP' COMMAND?
         BNE   AAA020             NO, CHECK IF MODIFY COMMAND
WTO020A  WTO   '//////// - STOP COMMAND ACCEPTED',ROUTCDE=(11)
         MVC   0(4,R8),=C'STOP'   MOVE STOP COMMAND TO REPLY
         B     EXIT020            EXIT
AAA020   EQU   *
         CLI   CIBVERB,X'44'      WAS THIS A 'MODIFY' COMMAND?
         BE    BBB020             YES - OK
         ABEND 1,DUMP
BBB020   EQU   *
         IC    R1,CIBDSIZE+1      GET SIZE OF DATA
         BCTR  R1,R0              DECREMENT FOR EXECUTE
         EX    R1,MOVEDATA        MOVE TO USER AREA
         EX    R1,MOVEWTO         MOVE TO WTO BUFFER
WTO020B  WTO   '//////// - MODIFY DATA IS:                             X
                                                                   ',  X
               ROUTCDE=11         INFORM PROGRAMMER
         MVI   WTO020B+34,C' '    CLEAR THE
         MVC   WTO020B+35(79),WTO020B+34 WTO BUFFER
         QEDIT ORIGIN=(10),BLOCK=(9)  FREE CIB
EXIT020  EQU   *
         B     RETURN
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        RETURN
*
*----------------------------------------------------------------------
RETURN   DS    0H
         LR    R15,R7             PASS ADDR OF COMMUNICATION ECB AS RC
         RETURN (14,12),RC=(15)   RETURN TO CALLER
         LTORG
         EJECT
*----------------------------------------------------------------------
MOVEDATA MVC   0(0,R8),CIBDATA    MOVE TO USER AREA
MOVEWTO  MVC   WTO020B+34(0),CIBDATA MOVE TO WTO BUFFER
*----------------------------------------------------------------------
COMMAREA DC    F'0'               ADDRESS OF CIB ECB & CIB ANCHOR
SW       DC    X'00'              SWITCH
FIRST    EQU   X'01'              FIRST TIME FLAG
CIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING
CIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN
CIBVERB  DS    C                  CIB VERB CODE
CIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER
CIBRSVD1 DS    H                  RESERVED
CIBRSVD2 DS    C                  RESERVED
CIBTSOID DS    CL3                TSO TERMINAL ID
CIBCONID DS    C                  CONSOLE ID OF STARTED TASK
CIBRSVD3 DS    C                  RESERVED
CIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB
CIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR
         END
