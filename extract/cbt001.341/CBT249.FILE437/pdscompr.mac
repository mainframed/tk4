CMPR     TITLE 'A GENERALIZED PDS COMPARE PROGRAM'
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        THE PURPOSE IF THIS PROGRAM IS TO COMPARE TWO                *
*        PARTITIONED DATA SETS BASED UPON THE PARM OPTIONS            *
*        SPECIFIED. THE PROGRAM WILL COMPARE DIRECTORY ENTRIES        *
*        ONLY, IT WILL COMPARE 80 BYTE MEMBERS BY COLUMNS 1-72        *
*        OR BY THE SEQUENCE FIELD (73-80) OR IT WILL COMPARE          *
*        SMP REL 4 CDS SYSMOD ENTRIES. ANY DESCRIPENTIES WILL BE      *
*        LISTED ON THE SYSPRINT DATA SET.                             *
*                                                                     *
*        JCL REQUIRED:                                                *
*                                                                     *
*        //PDSCOMPR EXEC PGM=PDSCOMPR,PARM='  SEE NOTE   '            *
*        //STEPLIB  DD  DSN=  (OPTIONAL)                              *
*        //SYSPRINT DD  SYSOUT=*                                      *
*        //PDS1     DD  DSN=  NAME OF OLD PDS                         *
*        //PDS2     DD  DSN=  NAME OF NEW PDS                         *
*        //SYSUDUMP DD  SYSOUT=*                                      *
*                                                                     *
*        PARM OPTIONS:                                                *
*        DIRECTORY - COMPARE PDS DIRECTORY ENTRIES ONLY               *
*        MEMBERS   - COMPARE EACH MEMBERS RECORDS BY ALL 80 BYTES     *
*        SEQFIELD  - COMPARE EACH MEMBERS RECORDS BY THE SEQUENCE     *
*                    FIELD (73-80)                                    *
*        SYSMOD    - COMPARE THE SYSMOD ENTRIES                       *
*        LINECOUNT - NUMBER OF LINES PER PAGE VALUE FROM 01 TO 99     *
*                    DEFAULT IS 56                                    *
*                                                                     *
*        LIMIT     - OPTION WHEN USED WITH THE 'MEMBERS' OR           *
*                    'SEQFIELD' OPTIONS,. THIS OPTION LIMITS          *
*                    THE NUMBER OF MISMATCHES PRINTED OUT             *
*                    TO TEN (10). IF THIS OPTION IS NOT               *
*                    THE DEFAULT IS ALL MISMATCHES WILL BE            *
*                    LISTED.                                          *
*        LIMIT     - OPTION WHEN USED WITH 'SYSMOD', THIS WILL        *
*                    PRINT ONLY THE SYSMOD DIFFERENCES AND            *
*                    NOT THE APPLY DATE & TIME DIFFERENCES.           *
*                                                                     *
         EJECT
*        WRITTEN BY                                                   *
*                                                                     *
*             KENNETH RASMUSSEN                                       *
*             ROCKWELL INTERNATIONAL                                  *
*             P O BOX 2515  041/SH28                                  *
*             SEAL BEACH, CA. 90740                                   *
*             (213) 594-2540                                          *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         EJECT
PDSCOMPR CSECT
         PRIME
         LA    R11,2048
         LA    R11,2048(R11,R12)  SETUP SESOND BASE REGISTER
         USING PDSCOMPR+4096,R11
         L     R2,0(,R1)           POINT AT PARM
         OPEN  (SYSPRINT,(OUTPUT))
         SPACE
         LH    R3,0(,R2)           LOAD LENGTH OF PARM
         LTR   R3,R3               LENGTH ZERO
         BZ    PARMERR             IF ZERO THEN GOTO PARMERR
PARMCHK  CLC   2(9,R2),=CL9'DIRECTORY' DIRECTORY SPECIFIED ?
         BNE   PARMMEM             NO,BRANCH
         OI    PARMSW,DIR          SET DIR BIT
         MVC   HEADTYPE,=CL9'DIRECTORY' EDIT TYPE OF PROCESSING
         B     PARMLOOP            BRANCH IF DIR SPECIFIED
PARMMEM  CLC   2(7,R2),=CL9'MEMBERS' MEMBER SPECIFIED
         BNE   PARMSEQ             NO,BRANCH
         OI    PARMSW,MBR          SET MBR BIT
         MVC   HEADTYPE,=CL9'MEMBERS' EDIT TYPE OF PROCESSING
         B     PARMLOOP            BRANCH IF MEMBER SPECIFIED
PARMSEQ  CLC   2(8,R2),=CL9'SEQFIELD' SEQFIELD SPECIFIED ?
         BNE   PARMSYS             NO,BRANCH
         OI    PARMSW,SEQ          SET SEQ BIT
         MVC   HEADTYPE,=CL9'SEQFIELD' EDIT TYPE OF PROCESSING
         B     PARMLOOP            BRANCH IF SEQFIELD SPECIFIED
PARMSYS  CLC   2(6,R2),=CL9'SYSMOD' SYSMOD SPECIFIED ?
         BNE   PARMLMT             NO,BRANCH
         OI    PARMSW,CDS          SET CDS BIT
         MVC   HEADTYPE,=CL9'SYSMOD' EDIT TYPE OF PROCESSING
         B     PARMLOOP
PARMLMT  CLC   2(5,R2),=CL5'LIMIT' IS LIMIT SPECIFIED ?
         BNE   PARMLINE            NO, BRANCH
         OI    PARMSW,LIMIT        SET LIMIT BIT ON
         B     PARMLOOP
PARMLINE CLC   2(9,R2),=CL9'LINECOUNT' LINECOUNT SPECIFIED ?
         BE    SAVELCNT            BRANCH IF SPECIFIED
PARMLOOP LA    R2,1(,R2)           INCR PARM POINTER
         BCT   R3,PARMCHK
PARMERR  DS    0H
         TM    PARMSW,DIR+MBR+SEQ+CDS
         BNZ   PARMEND
PARMEXIT LA    R2,MSG1
         BAL   R10,PUTLINE
         CLOSE SYSPRINT
         LA    R15,8
ENDPGM   TERME
SAVELCNT EQU   *
         TM    12(R2),X'F0'        NUMERIC ?
         BNO   PARMEXIT             NO, BRANCH
         TM    13(R2),X'F0'        NUMERIC ?
         BNO   PARMEXIT             NO, BRANCH
         PACK  MAXCNT,12(2,R2)     SAVE LINE COUNT
         B     PARMLOOP
PARMEND  DS    0H
         TIME  DEC                     GET TIME AND DATE
         ST    1,WORD                  STORE DATE
         ED    HEADDATE,WORD+1          EDIT DATE INTO PRINT LINE
         ST    0,WORD                  STORE TIME
         ED    HEADTIME,WORD            EDIT TIME INTO PRINT LINE
         OI    HEADTIME+1,X'F0'        MAKE TIME
         USING IHADCB,R9
         OPEN  (DIR1)
         LA    R9,DIR1
         OPEN  (DIR2)
         LA    R9,DIR2
         L     R3,16               LOAD CVT POINTER
         L     R3,0(,R3)           LOAD CVTTCBP
         L     R3,0(,R3)           LOAD CURRENT TCB
         L     R3,12(,R3)          LOAD TCBTIO
         LA    R4,24(,R3)          POINT AT FIRST TIOT ENTRY
CHKDDN   CLC   4(8,R4),=CL8'PDS1'  FIND 'PDS1' DDNAME
         BE    EDITPDS1            IF FOUND GO PRINT
         CLC   4(8,R4),=CL8'PDS2'  FIND 'PDS2' DDNAME
         BE    EDITPDS2            IF FOUND GO PRINT
INCRTIOT SR    R3,R3               CLEAR REG 3
         IC    R3,0(R4)            LOAD LENGTH OF THIS ENTRY
         LTR   R3,R3               LENGTH ZERO ?
         BZ    PRTHDRS             IF ZERO THEN BRANCH
         LA    R4,0(R4,R3)         POINT AT NEXT TIOT ENTRY
         B     CHKDDN              GO BACK
EDITPDS1 L     R3,12(R4)           LOAD JFCB PREFIX ADDR.
         SRL   R3,8                SHIFT OUT LOW BYTE
         LA    R3,16(R3)           POINT AT JFCB
         MVC   HEAD1DSN,0(R3)      EDIT DSN
         MVC   HEAD1VOL,118(R3)    EDIT VOLUME
         B     INCRTIOT
EDITPDS2 L     R3,12(R4)           LOAD JFCB PREFIX ADDR.
         SRL   R3,8                SHIFT OUT LOW BYTE
         LA    R3,16(R3)           POINT AT JFCB
         MVC   HEAD2DSN,0(R3)      EDIT DSN
         MVC   HEAD2VOL,118(R3)    EDIT VOLUME
         B     INCRTIOT
PRTHDRS  PUT   SYSPRINT,HEADING
         LA    R2,HEAD1
         BAL   R10,PUTLINE
         LA    R2,HEAD2
         BAL   R10,PUTLINE
         TM    PARMSW,MBR+SEQ+CDS MEMBERS TO BE PROCESSED ?
         BZ    TESTPARM           BRANCH IF MEMBERS NOT NEEDED
         OPEN  (PDS1)
         LA    R9,PDS1
         LH    R8,DCBBLKSI        GET BLKSIZE
         GETMAIN R,LV=(R8),SP=0
         ST    R1,PDS1WA          SAVE WORKAREA ADDRESS
         OPEN  (PDS2)
         LA    R9,PDS2
         LH    R8,DCBBLKSI        GET BLKSIZE
         GETMAIN R,LV=(R8),SP=0
         ST    R1,PDS2WA          SAVE WORKAREA ADDRESS
         EJECT
TESTPARM DS    0H
         TM    PARMSW,CDS         SYSMOD COMPARE REQUESTED ?
         BO    CDS010             IF YES THEN BRANCH
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        DIRECTORY, MEMBER, AND SEQUENCE FIELD COMPARE ROUTINES       *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
DIR010   DS    0H
         BAL   R10,READDIR1       POINT AT NEXT DIR1 ENTRY
DIR015   BAL   R10,READDIR2       POINT AT NEXT DIR2 ENTRY
DIR020   CLC   0(8,R4),FF         DIR1 REACHED EOF ?
         BNE   DIR030             IF NOT THEN BRANCH
         CLC   0(8,R5),FF         DIR2 REACHED EOF ?
         BE    CLOSE              IF YES THEN BRANCH
DIR030   CLC   0(8,R4),0(R5)      COMPARE DIR ENTRIES
         BE    MBR010             IF EQUAL THEN BRANCH
         BL    DIR040             IF DIR1 IS LOW THEN BRANCH
         MVC   MSG2MBR,0(R5)      MOVE DIR2 MEMBER TO MSG
         MVI   MSG2PDS,C'2'       MOVE 2 TO MSG
         MVI   MSG2,X'40'         BLANK OUT CC
         LA    R2,MSG2A
         BAL   R10,PUTLINE
         B     DIR015              BRANCH
DIR040   MVC   MSG2MBR,0(R4)      MOVE DIR1 MEMBER TO MSG
         MVI   MSG2PDS,C'1'       MOVE 1 TO MSG
         MVI   MSG2,X'09'         SET CC
         LA    R2,MSG2
         BAL   R10,PUTLINE
         BAL   R10,READDIR1       POINT AT NEXT DIR1 ENTRY
         B     DIR020             THEN BRANCH
MBR010   TM    PARMSW,MBR+SEQ     ARE THE RECORDS TO BE COMPARED ?
         BZ    DIR010             IF NOT THEN BRANCH
         BAL   R10,FINDMBR1       POINT AT NEXT MBR1 ENTRY
         BAL   R10,FINDMBR2       POINT AT NEXT MBR2 ENTRY
         ZAP   LIMITCNT,P0        RESET LIMIT COUNTER
MBR020   BAL   R10,READMBR1       POINT AT NEXT MBR1 RECORD
MBR025   BAL   R10,READMBR2       POINT AT NEXT MBR2 RECORD
MBR050   TM    PDS1SW,MBREOF      END OF RECORDS IN MEMBER ?
         BO    MBR080             IF YES THAN BRANCH
         TM    PDS2SW,MBREOF      END OF RECORDS IN MEMBER ?
         BO    MBR090             IF YES THAN BRANCH
         TM    PARMSW,SEQ         SEQUENCE FIELD COMPARE REQUESTED ?
         BO    SEQ010             IF YES THEN BRANCH
MBR055   CLC   0(72,R6),0(R7)     COMPARE 72 BYTE RECORDS
         BE    MBR020             IF EQUAL THEN BRANCH
         TM    PARMSW,LIMIT       IS LIMIT MISMATCHES REQUESTED ?
         BZ    MBR060             IF NOT THEN BRANCH
         AP    LIMITCNT,P1        ADD 1 TO COUNTER
         CP    LIMITCNT,LIMITMAX  LIMIT REACHED ?
         BH    MBR100             IF YES THEN BRANCH
MBR060   MVI   MSG3,X'09'         SET SKIP
         MVC   MSG3MBR,0(R4)      MOVE DIR2 MEMBER TO MSG
         MVC   MSG3REC,0(R6)      MOVE RECORD TO MSG
         MVI   MSG3PDS,C'1'       MOVE 1 TO MSG
         LA    R2,MSG3
         BAL   R10,PUTLINE
         MVI   MSG3,X'11'         SET SKIP
         MVC   MSG3MBR,0(R5)      MOVE DIR1 MEMBER TO MSG
         MVC   MSG3REC,0(R7)      MOVE RECORD TO MSG
         MVI   MSG3PDS,C'2'       MOVE 2 TO MSG
         LA    R2,MSG3
         BAL   R10,PUTLINE
         B     MBR020             BRANCH
MBR080   TM    PDS2SW,MBREOF      END OF RECORDS IN MEMBER ?
         BO    MBR085             IF YES THEN BRANCH
         MVC   MSG4MBR,0(R5)      MOVE DIR2 MEMBER TO MSG
         MVI   MSG4PDS,C'2'       MOVE 2 TO MSG
         LA    R2,MSG4
         BAL   R10,PUTLINE
MBR085   NI    PDS1SW,X'F0'       RESET SWITCHES
         NI    PDS2SW,X'F0'       RESET SWITCHES
         B     DIR010             BRANCH
MBR090   MVC   MSG4MBR,0(R4)      MOVE DIR1 MEMBER TO MSG
         MVI   MSG4PDS,C'1'       MOVE 1 TO MSG
         LA    R2,MSG4
         BAL   R10,PUTLINE
         B     MBR085             BRANCH
MBR100   MVC   MSG6MBR,0(R4)      EDIT MEMBER NAME
         LA    R2,MSG6
         BAL   R10,PUTLINE        PRINT MSG6
         B     MBR085             GO RESET SWITCHES
         SPACE 3
SEQ010   CLC   72(8,R6),72(R7)    COMPARE SEQUENCE NUMBERS
         BE    MBR055             IF EQUAL THEN BRANCH
         AP    LIMITCNT,P1        ADD 1 TO COUNTER
         BL    SEQ070             IF RECORD A LOW THEN BRANCH
         MVC   MSG3MBR,0(R5)      MOVE DIR2 MEMBER TO MSG
         MVC   MSG3REC,0(R7)      MOVE RECORD TO MSG
         MVI   MSG3PDS,C'2'       MOVE 2 TO MSG
         MVI   MSG3,X'11'         SET SKIP
         LA    R2,MSG3
         BAL   R10,PUTLINE
         B     MBR025             BRANCH
SEQ070   MVC   MSG3MBR,0(R4)      MOVE DIR1 MEMBER TO MSG
         MVC   MSG3REC,0(R6)      MOVE RECORD TO MSG
         MVI   MSG3PDS,C'1'       MOVE 1 TO MSG
         MVI   MSG3,X'11'         SET SKIP
         LA    R2,MSG3
         BAL   R10,PUTLINE
         BAL   R10,READMBR1       POINT AT NEXT MBR2 RECORD
         B     MBR050             BRANCH
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        SYSMOD COMPARE POUTINE                                       *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
CDS010   DS    0H
         BAL   R10,READDIR1       POINT AT NEXT DIR1 ENTRY
         CLI   0(R4),C'3'         ENTRY A SYSMOD ENTRY ?
         BL    CDS010             IF NOT THEN BRANCH
CDS020   BAL   R10,READDIR2       POINT AT NEXT DIR2 ENTRY
         CLI   0(R5),C'3'         ENTRY A SYSMOD ENTRY ?
         BL    CDS020             IF NOT THEN BRANCH
CDS030   TM    PDS1SW,DIREOF      DIR1 EOF ?
         BZ    CDS040             IF NOT THEN BRANCH
         TM    PDS2SW,DIREOF      DIR2 EOF ?
         BO    CLOSE              IF YES THEN BRANCH
CDS040   CLC   0(8,R4),0(R5)      COMPARE ENTRIES
         BE    CDS070             IF EQUAL THEN BRANCH
         BL    CDS050             IF DIR1 ENTRY LOW THEN BRANCH
         TM    17(R5),X'80'       IS THIS SYSMOD SUPERCEEDED ?
         BO    CDS020             IF YES, THEN BRANCH
         LR    R15,R5             POINT AT SYSMOD NAME
         BAL   R14,UNPACK         GO UNPACK SYSMOD NAME
         MVC   MSG5MBR,SYSMOD     MOVE CDS A SYSMOD NUMBER TO MSG
         MVI   MSG5CDS,C'2'       MOVE 2 TO MSG
         MVI   MSG5,X'40'         SET BLANK
         LA    R2,MSG5A
         BAL   R10,PUTLINE
         B     CDS020             BRANCH
CDS050   TM    17(R4),X'80'       IS THIS SYSMOD SUPERCEEDED ?
         BO    CDS055             IF YES, THEN BRANCH
         LR    R15,R4             POINT AT SYSMOD NAME
         BAL   R14,UNPACK         GO UNPACK SYSMOD NAME
         MVC   MSG5MBR,SYSMOD     MOVE CDS A SYSMOD NUMBER TO MAG
         MVI   MSG5CDS,C'1'       MOVE 1 TO MSG
         MVI   MSG5,X'09'         SET CC
         LA    R2,MSG5
         BAL   R10,PUTLINE
CDS055   BAL   R10,READDIR1       POINT AT NEXT DIR1 ENTRY
         CLI   0(R4),C'3'         CDS SYSMOD ENTRY
         BL    CDS055             IF NOT THEN BRANCH
         B     CDS030             BRANCH
CDS070   EQU   *
         TM    PARMSW,LIMIT       IS LIMIT SPECIFIED ?
         BO    CDS010             IF YES, THEN BRANCH
         TM    17(R5),X'80'       IS CDS2 SYSMOD SUPERCEEDED ?
         BO    CDS010             IF YES, THEN BRANCH
         BAL   R10,FINDMBR1
         BAL   R10,READMBR1
         BAL   R10,FINDMBR2
         BAL   R10,READMBR2
         CLC   47(6,R6),47(R7)    ARE APPLY DATES EQUAL ?
         BE    CDS010
CDS075   LR    R15,R5             POINT AT SYSMOD NAME
         BAL   R14,UNPACK         GO UNPACK SYSMOD NAME
         MVC   MSG7MBR2,SYSMOD    MOVE CDS A SYSMOD NUMBER TO MSG
         MVI   MSG7,X'40'         SET BLANK
         TM    49(R5),X'0F'       IS A VALID DATE PRESENT?
         BNO   CDS090             NO, BRANCH
         MVC   MSG7DAT2,DATEPTRN        EDIT DATEPTRN
         MVC   MSG7TIM2,TIMEPTRN        EDIT TIMEPTRN
         ED    MSG7DAT2,47(R7)          EDIT DATE INTO PRINT LINE
         ED    MSG7TIM2,50(R7)          EDIT TIME INTO PRINT LINE
         OI    MSG7TIM2+1,X'F0'        MAKE TIME
CDS090   LR    R15,R4             POINT AT SYSMOD NAME
         BAL   R14,UNPACK         GO UNPACK SYSMOD NAME
         MVC   MSG7MBR1,SYSMOD    MOVE CDS A SYSMOD NUMBER TO MAG
         MVI   MSG7,X'09'         SET CC
         TM    49(R4),X'0F'       IS A VALID DATE PRESENT?
         BNO   CDS100             NO, BRANCH
         MVC   MSG7DAT1,DATEPTRN        EDIT DATEPTRN
         MVC   MSG7TIM1,TIMEPTRN        EDIT TIMEPTRN
         ED    MSG7DAT1,47(R6)          EDIT DATE INTO PRINT LINE
         ED    MSG7TIM1,50(R6)          EDIT TIME INTO PRINT LINE
         OI    MSG7TIM1+1,X'F0'        MAKE TIME
CDS100   LA    R2,MSG7
         BAL   R10,PUTLINE
         B     CDS010             BRANCH
         EJECT
CLOSE    DS    0H
         CLOSE DIR1
         CLOSE DIR2
         SR    R15,R15           SET RETURN CODE TO ZERO
         TM    PARMSW,MBR+SEQ     PDS DATA SETS OPENED ?
         BZ    ENDPGM
         USING IHADCB,R9
         LA    R9,PDS1
         LH    R8,DCBBLKSI
         FREEMAIN R,A=PDS1WA,LV=(R8)
         CLOSE PDS1
         LA    R9,PDS1
         LH    R8,DCBBLKSI
         FREEMAIN R,A=PDS2WA,LV=(R8)
         CLOSE PDS2
ENDOFPGM SR    R15,R15            SET ZERO RETURN CODE
         BZ    ENDPGM
         EJECT
PUTLINE  PUT   SYSPRINT,(R2)
         AP    LINECNT,P1          ADD 1 TO LINE COUNTER
         CLI   0(R2),X'11'         EXTRA LINE SKIPPED
         BNE   NOSKIP              IF NOT THEN BRANCH
         AP    LINECNT,P1          ADD 1 TO LINE COUNTER
NOSKIP   CP    LINECNT,MAXCNT      PAGE LENGTH EXCEEDED ?
         BL    0(R10)              IF NOT THEN BRANCH
         PUT   SYSPRINT,NEWPAGE
         PUT   SYSPRINT,HEADING
         PUT SYSPRINT,HEAD1
         PUT SYSPRINT,HEAD2
         ZAP   LINECNT,P5          SET LINE COUNTER
         BR    R10                GO BACK
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        READ DIRECTORY 1 - FIND THE NEXT ENTRY                       *
*             REG 4 POINTS AT THE DIRECTORY ENTRY                     *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
READDIR1 DS    0H
         TM    PDS1SW,DIRREAD     HAS THE DIRECTORY BEEN READ ?
         BO    DIR1050            IF YES THEN BRANCH
DIR1010  READ  DIR1DECB,SF,DIR1,DIR1WA,'S'
         CHECK DIR1DECB,ALL
         LA    R4,DIR1WA          LOAD THE WORK AREA ADDRESS
         LH    R8,0(,R4)          LOAD THE DIRECTORY LENGTH
         AR    R8,R4              FIND ENDING ADDRESS FOR THIS DIR
         LA    R4,2(,R4)          POINT AT FIRST ENTRY
         ST    R8,DIR1END         SAVE END  POINTER
         OI    PDS1SW,DIRREAD     SET READ SWITCH FOR DIR1
         B     DIR1080            CHK FOR EOF
DIR1050  DS    0H
         TM    PDS1SW,DIREOF      END OF DIRECTORY REACHED ?
         BO    0(R10)             IF YES THE BRANCH
         SR    R8,R8              CLEAR REG 8
         NI    11(R4),X'1F'       TURN OFF ALIAS BIT
         IC    R8,11(R4)          LOAD ENTRY LENGTH (HALF WORDS)
         LA    R8,6(R8)           ADD FIXED LENGTH = NO. OF HALFWORDS
         SLA   R8,1               CALC TOTAL ENTRY LENGTH
         AR    R4,R8              POINT TO NEXT ENTRY
         C     R4,DIR1END         END OF THIS DIR BLOCK REACHED ?
         BNL   DIR1010            IF YES THE BRANCH
DIR1080  CLI   0(R4),X'FF'        END OF DIR ENTRIES REACHED ?
         BE    DIR1100            IF YES THEN BRANCH
         ST    R4,DIR1PTR         STORE NEW ENTRY POINTER
         BR    R10                GO BACK
DIR1100  DS    0H
         LA    R4,FF              LOAD EOF POINTER (HIGH VALUE)
         ST    R4,DIR1PTR         SAVE POINTER
         OI    PDS1SW,DIREOF      SET EOF SWITCH
         BR    R10                GO BACK
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        PDS 1 - FIND THE MEMBER IN THE PDS                           *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
FINDMBR1 DS    0H
         TM    PDS1SW,DIREOF     EOF REACHED ?
         BO    0(R10)             IF YES THEN BRANCH
         LA    R9,PDS1
         LH    R8,DCBBLKSI
         L     R9,PDS1WA         POINT R9 TO WORKAREA
FND1050  CH    R8,=H'256'        MORE THAN 256 BYTES TO CLEAR
         BNH   FND1060           IF NOT THEN BRANCH
         XC    0(255,R9),0(R9)   CLEAR 256 BYTES OF WORKAREA
         LA    R9,256(,R9)       INCR WORKAREA POINTER
         SH    R8,=H'256'         DECRIMENT WORKAREA SIZE
         B     FND1050           LOOP THRU WORKAREA
FND1060  BCTR  R8,0              DECRIMENT LENGTH BY ONE
         STC   R8,*+5            SAVE LENGTH IN XC INST.
         XC    0(*-*,R9),0(R9)   CLEAR REMAINING BYTES IN WORKAREA
         MVC   PDS1TTR(3),8(R4)   SET TTR FOR FIND
         FIND  PDS1,PDS1TTR,C
         LTR   R15,R15            RETURN FROM FIND OK ?
         BZ    0(R10)             IF ZERO THEN BRANCH
         DC    H'0'               IN NOT THEN ABEND HERE
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        PDS 1 - READ THE RECORDS FOR THIS MEMBER                     *
*             REG 6 POINTS AT THE RECORD                              *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
READMBR1 DS    0H
         TM    PDS1SW,MBRREAD     BLOCK ALREADY READ IN CORE ?
         BO    MBR1030            IF YES THEN BRANCH
MBR1010  L     R9,PDS1WA         LOAD WORK AREA ADDRESS
         READ  PDS1DECB,SF,PDS1,(R9),'S'
         CHECK PDS1DECB,ALL
         OI    PDS1SW,MBRREAD     SET BLOCK IN CORE BIT
         LA    R9,PDS1
         TM    DCBRECFM,DCBRECF   IS RECORDS FIXED LENGTH ?
         BNO   MBR1080            IF NOT THEN BRANCH
         LH    R8,DCBBLKSI        LOAD BLOCKSIZE
         L     R1,PDS1DECB+16     GET IOB ADDRESS
         SH    R8,14(R1)          SUBTRACT CSW RESIDUAL COUNT
         ST    R8,PDS1CNT         SAVE BLOCKSIZE
         L     R6,PDS1WA          LOAD FIRST RECORD
         ST    R6,PDS1REC         SAVE RECORD POINTER
         BR    R10                GO BACK
MBR1030  L     R8,PDS1CNT         LOAD BYTES LEFT IN BLOCK
         LA    R9,PDS1
         SH    R8,DCBLRECL        SUBTRACT THIS RECORD LENGTH
         LTR   R8,R8              END OF THIS BLOCK REACHED ?
         BZ    MBR1010            IF YES THEN BRANCH
         ST    R8,PDS1CNT         SAVE BYTE COUNT
         AH    R6,DCBLRECL        POINT AT NEXT ENTRY
         ST    R6,PDS1REC         SAVE POINTER
         BR    R10                GO BACK
MBR1080  MVC   MSG1+50(59),=CL59' PDS1 IS NOT FIXED REC LENGTH - WILL PC
               ROCESS DIRECTORY ONLY'
         PUT   SYSPRINT,MSG1
         MVI   PARMSW,DIR          SET FOR DIR PROCESSING ONLY
         CLOSE PDS1
         CLOSE PDS2
         B     DIR020
MBR1100  DS    0H
         OI    PDS1SW,MBREOF       SET EOF SWITCH
         BR    R10                GO BACK
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        READ DIRECTORY 2 - FIND THE NEXT ENTRY                       *
*             REG 5 POINTS AT THE DIRECTORY ENTRY                     *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
READDIR2 DS    0H
         TM    PDS2SW,DIRREAD     HAS THE DIRECTORY BEEN READ ?
         BO    DIR2050            IF YES THEN BRANCH
DIR2010  READ  DIR2DECB,SF,DIR2,DIR2WA,'S'
         CHECK DIR2DECB,ALL
         LA    R5,DIR2WA          LOAD THE WORK AREA ADDRESS
         LH    R8,0(,R5)          LOAD THE DIRECTORY LENGTH
         AR    R8,R5              FIND ENDING ADDRESS FOR THIS DIR
         LA    R5,2(,R5)          POINT AT FIRST ENTRY
         ST    R8,DIR2END         SAVE END  POINTER
         OI    PDS2SW,DIRREAD     SET READ SWITCH FOR DIR2
         B     DIR2080            CHK EOF
DIR2050  DS    0H
         TM    PDS2SW,DIREOF      END OF DIRECTORY REACHED ?
         BO    0(R10)             IF YES THE BRANCH
         SR    R8,R8              CLEAR REG 8
         NI    11(R5),X'1F'       TURN OFF ALIAS BIT
         IC    R8,11(R5)          LOAD ENTRY LENGTH (HALF WORDS)
         LA    R8,6(R8)           ADD FIXED LENGHT = NO. OF HALFWORDS
         SLA   R8,1               CALC TOTAL ENTRY LENGTH
         AR    R5,R8              POINT TO NEXT ENTRY
         C     R5,DIR2END         END OF THIS DIR BLOCK REACHED ?
         BNL   DIR2010            IF YES THE BRANCH
DIR2080  CLI   0(R5),X'FF'        END OF DIR ENTRIES REACHED ?
         BE    DIR2100            IF YES THEN BRANCH
         ST    R5,DIR2PTR         STORE NEW ENTRY POINTER
         BR    R10                GO BACK
DIR2100  DS    0H
         LA    R5,FF              LOAD EOF POINTER (HIGH VALUE)
         ST    R5,DIR2PTR         SAVE POINTER
         OI    PDS2SW,DIREOF      SET EOF SWITCH
         BR    R10                GO BACK
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        PDS 2 - FIND THE MEMBER IN THE PDS                           *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
FINDMBR2 DS    0H
         TM    PDS2SW,DIREOF     EOF REACHED ?
         BO    0(R10)             IF YES THEN BRANCH
         LA    R9,PDS2
         LH    R8,DCBBLKSI
         L     R9,PDS2WA         POINT R9 TO WORKAREA
FND2050  CH    R8,=H'256'        MORE THAN 256 BYTES TO CLEAR
         BNH   FND2060           IF NOT THEN BRANCH
         XC    0(255,R9),0(R9)   CLEAR 256 BYTES OF WORKAREA
         LA    R9,256(,R9)       INCR WORKAREA POINTER
         SH    R8,=H'256'         DECRIMENT WORKAREA SIZE
         B     FND2050           LOOP THRU WORKAREA
FND2060  BCTR  R8,0              DECRIMENT LENGTH BY ONE
         STC   R8,*+5            SAVE LENGTH IN XC INST.
         XC    0(*-*,R9),0(R9)   CLEAR REMAINING BYTES IN WORKAREA
         MVC   PDS2TTR(3),8(R5)   SET TTR FOR FIND
         FIND  PDS2,PDS2TTR,C
         LTR   R15,R15            RETURN FROM FIND OK ?
         BZ    0(R10)             IF ZERO THEN BRANCH
         DC    H'0'               IN NOT THEN ABEND HERE
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        PDS 2 - READ THE RECORDS FOR THIS MEMBER                     *
*             REG 7 POINTS AT THE RECORD                              *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
READMBR2 DS    0H
         TM    PDS2SW,MBRREAD     BLOCK ALREADY READ IN CORE ?
         BO    MBR2030            IF YES THEN BRANCH
MBR2010  L     R9,PDS2WA         LOAD WORK AREA ADDRESS
         READ  PDS2DECB,SF,PDS2,(R9),'S'
         CHECK PDS2DECB,ALL
         OI    PDS2SW,MBRREAD     SET BLOCK IN CORE BIT
         LA    R9,PDS2
         TM    DCBRECFM,DCBRECF   IS RECORDS FIXED LENGTH ?
         BNO   MBR2080            IF NOT THEN BRANCH
         LH    R8,DCBBLKSI        LOAD BLOCKSIZE
         L     R1,PDS2DECB+16     GET IOB ADDRESS
         SH    R8,14(R1)          SUBTRACT CSW RESIDUAL COUNT
         ST    R8,PDS2CNT         SAVE BLOCKSIZE
         L     R7,PDS2WA          LOAD FIRST RECORD
         ST    R7,PDS2REC         SAVE RECORD POINTER
         BR    R10                GO BACK
MBR2030  L     R8,PDS2CNT         LOAD BYTES LEFT IN BLOCK
         LA    R9,PDS2
         SH    R8,DCBLRECL        SUBTRACT THIS RECORD LENGTH
         LTR   R8,R8              END OF THIS BLOCK REACHED ?
         BZ    MBR2010            IF YES THEN BRANCH
         ST    R8,PDS2CNT         SAVE BYTE COUNT
         AH    R7,DCBLRECL        POINT AT NEXT ENTRY
         ST    R7,PDS2REC         SAVE POINTER
         BR    R10                GO BACK
MBR2080  MVC   MSG1+50(59),=CL59' PDS2 IS NOT FIXED REC LENGTH - WILL PC
               ROCESS DIRECTORY ONLY'
         PUT   SYSPRINT,MSG1
         MVI   PARMSW,DIR          SET FOR DIR PROCESSING ONLY
         CLOSE PDS2
         CLOSE PDS2
         B     DIR020
MBR2100  DS    0H
         OI    PDS2SW,MBREOF      SET EOF SWITCH
         BR    R10                GO BACK
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        THIS ROUTINE UNPACKS THE 6 BYTE CDS DIR ENTRY                *
*        INTO A 8 BYTE SYSMOD FIELD                                   *
*        THIS WAS OBTAINED FROM HMASMSUB FICHE                        *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
UNPACK   EQU   *
         STM   R5,R10,USAV
         MVC   DBL+1(3),1(R15)          MOVE IN 3 BYTES
         MVC   DBL+5(3),4(R15)          SECOND 3 BYTES
         LA    R10,2                    LOOP1 TWICE
         LA    R5,SYSMOD
         LA    R9,DBL
LOOP1    EQU   *
         L     R7,0(R9)
         SLL   R7,8                     SHIFT HIGH ORDER BYTE OUT
         LA    R8,4                     LOOP2 4 TIMES
LOOP2    EQU   *
         SR    R6,R6                     CLEAR REG 6
         SLDA  R6,6                     SHIFT 6 BITS INTO REG 6
         STC   R6,0(R5)                  STORE INTO SYSMOD FIELD
         LA    R5,1(R5)                  POINT TO NEXT BYTE IN FIELD
         BCT   R8,LOOP2
         LA    R9,4(R9)                  POINT TO SECOND WORD
         BCT   R10,LOOP1
         TR    SYSMOD,TRTABLE          TRANSLATE SYSMOD
         LM    R5,R10,USAV
         BR    R14
DBL      DS    D
USAV     DS    6F
SYSMOD   DS    CL8
TRTABLE  DC    CL1' '
         DC    CL1' '
         DC    6CL1' '
         DC    CL1' '
         DC    CL1'$'
         DC    6CL1' '
         DC    5CL1' '
         DC    CL1' '
         DC    CL1'#'
         DC    CL1' '
         DC    CL1' '
         DC    CL1' '
         DC    CL1' '
         DC    CL1'?'
         DC    CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         DC    CL10'0123456789'
         EJECT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*                                                                     *
*        CONSTANTS AREA                                               *
*                                                                     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         DS    0F
PARMSW   DC    X'00'               PARM SWITCH BIT
LIMIT    EQU   X'10'               LIMIT MISMATCH OUTPUT
DIR      EQU   X'08'               DIR COMPARE
MBR      EQU   X'04'               MEMBER COMPARE
SEQ      EQU   X'02'               SEQUENCE FIELD COMPARE
CDS      EQU   X'01'               CDS SYSMOD COMPARE
FF       DC    XL8'FFFFFFFFFFFFFFFF' END OF DIRECTORY ENTRY
PDS1SW   DC    X'00'               PDS1 SWITCH BIT
PDS2SW   DC    X'00'               PDS2 SWITCH BIT
DIRREAD  EQU   X'80'               DIRECTORY BLOCK HAS BEEN READ
DIREOF   EQU   X'40'               DIRECTORY AT EOF
MBRREAD  EQU   X'08'               MEMBER BLOCK HAS BEEN READ
MBREOF   EQU   X'04'               MEMBER AT EOF
DIR1PTR  DC    F'0'                POINTER TO CURRENT DIR ENTRY
DIR1WA   DC    XL256'00'           DIR IN CORE WORK AREA
DIR1END  DC    F'0'                END OF DIR WORK AREA
PDS1WA   DC    F'0'                POINTER TO PDS WORK AREA
PDS1REC  DC    F'0'                POINTER TO CURRENT RECORD
PDS1CNT  DC    F'0'                COUNT OF BYTES REMAINING IN BLOCK
PDS1TTR  DC    F'0'                FIND TTR SAVE AREA
DIR2PTR  DC    F'0'                POINTER TO CURRENT DIR ENTRY
DIR2WA   DC    XL256'00'           DIR IN CORE WORK AREA
DIR2END  DC    F'0'                END OF DIR WORK AREA
PDS2WA   DC    F'0'                POINTER TO PDS WORK AREA
PDS2REC  DC    F'0'                POINTER TO CURRENT RECORD
PDS2CNT  DC    F'0'                COUNT OF BYTES REMAINING IN BLOCK
PDS2TTR  DC    F'0'                FIND TTR SAVE AREA
WORD     DC    F'0'
LINECNT  DC    P'04'
MAXCNT   DC    P'56'
LIMITCNT DC    P'00'
LIMITMAX DC    P'10'                  MISMATCH THRESHOLD
P0       DC    P'0'
P1       DC    P'1'
P5       DC    P'5'
NEWPAGE  DC    X'8B'
HEADING  DC    X'19'
         DC    CL36'    PDS COMPARE UTILITY PROGRAM  BY '
HEADTYPE DC    CL9' '
         DC    CL8'   DATE '
HEADDATE DC    XL6'20204B202120'
         DC    CL7'  TIME '
HEADTIME DC    XL5'20207A2020'
         DC    CL49'                                        '
HEAD1    DC    X'09'
         DC    CL10'   PDS1 = '
HEAD1DSN DC    CL44' '
         DC    CL10' VOLUME = '
HEAD1VOL DC    CL06' '
         DC    CL50' '
HEAD2    DC    X'19'
         DC    CL10'   PDS2 = '
HEAD2DSN DC    CL44' '
         DC    CL10' VOLUME = '
HEAD2VOL DC    CL06' '
         DC    CL50' '
MSG1     DC    X'11'
         DC    CL40'     ERROR IN PARM FIELD OR NO PARM FIEL'
         DC    CL40'D GIVEN - PROGRAM TERMINATED            '
         DC    CL40'                                        '
MSG2A    DC    X'09'
         DC    CL40' '
MSG2     DC    X'11'
         DC    CL07'MEMBER '
MSG2MBR  DC    CL08'        '
         DC    CL13' FOUND ON PDS'
MSG2PDS  DC    CL01' '
         DC    CL11' ONLY      '
         DC    CL40' '
         DC    CL40' '
MSG3     DC    X'09'
         DC    CL07'MEMBER '
MSG3MBR  DC    CL08'        '
         DC    CL07' ON PDS'
MSG3PDS  DC    CL01' '
         DC    CL17' MISMATCH RECORD '
MSG3REC  DC    CL80' '
MSG4     DC    X'11'
         DC    CL07'MEMBER '
MSG4MBR  DC    CL08'        '
         DC    CL07' OF PDS'
MSG4PDS  DC    CL01' '
         DC    CL27' HAS ADDITIONAL RECORDS      '
         DC    CL30' '
         DC    CL40' '
MSG5A    DC    X'09'
         DC    CL40' '
MSG5     DC    X'09'
         DC    CL08' SYSMOD '
MSG5MBR  DC    CL07'        '
         DC    CL07' ON PDS'
MSG5CDS  DC    CL01' '
         DC    CL17' ONLY '
         DC    CL40' '
         DC    CL40' '
MSG6     DC    X'11'
         DC    CL07'MEMBER '
MSG6MBR  DC    CL08' '
         DC    CL105' HAS REACHED THE LIMIT OF 10 MISMATCHES '
MSG7     DC    X'09'
         DC    CL08' SYSMOD '
MSG7MBR1 DC    CL07'        '
         DC    CL07' ON PDS'
MSG7CDS1 DC    CL01'1'
         DC    CL5' APP '
MSG7DAT1 DC    CL6' '
         DC    CL1' '
MSG7TIM1 DC    CL6' '
         DC    CL08' SYSMOD '
MSG7MBR2 DC    CL07'        '
         DC    CL07' ON PDS'
MSG7CDS2 DC    CL01'2'
         DC    CL5' APP '
MSG7DAT2 DC    CL6' '
         DC    CL1' '
MSG7TIM2 DC    CL5' '
         DC    CL40' '
DATEPTRN DC    XL6'20204B202021'
TIMEPTRN DC    XL5'20207A2021'
         EJECT
         LTORG
         EJECT
SYSPRINT DCB   DSORG=PS,MACRF=PM,RECFM=FBM,LRECL=121,BLKSIZE=1210,     C
               DDNAME=SYSPRINT
         EJECT
DIR1     DCB   DSORG=PS,MACRF=R,RECFM=F,BLKSIZE=256,DDNAME=PDS1,       C
               EODAD=DIR1100
         EJECT
PDS1     DCB   DSORG=PO,MACRF=R,DDNAME=PDS1,EODAD=MBR1100
         EJECT
DIR2     DCB   DSORG=PS,MACRF=R,RECFM=F,BLKSIZE=256,DDNAME=PDS2,       C
               EODAD=DIR2100
         EJECT
PDS2     DCB   DSORG=PO,MACRF=R,DDNAME=PDS2,EODAD=MBR2100
         EJECT
         DCBD  DSORG=(PS,PO),DEVD=DA
         END
