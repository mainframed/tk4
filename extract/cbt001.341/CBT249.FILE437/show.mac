SHOW     TITLE 'SHOW - EXTRACT INFORMATION FROM SYSTEM CONTROL BLOCKS'
***********************************************************************
*
*        THE SHOW ROUTINE PROVIDES THE CALLER WITH CHARACTER STRING
*        INFORMATION EXTRACTED FROM SYSTEM CONTROL BLOCKS. NUMERIC
*        INFORMATION IS CONVERTED TO CHARACTER STRING FORMAT.
*
*        ENTRY LINKAGE:
*              CALL SHOW,(ID,ILENGTH,VALUE,OLENGTH)
*
*        PARAMETERS:
*              ID      - CHARACTER STRING. AN 8 CHARACTER IDENTIFIER
*                        FOR THE INFORMATION REQUESTED BY THE CALLER.
*              ILENGTH - FULL WORD BINARY. THE LENGTH OF THE VALUE
*                        CHARACTER STRING PROVIDED BY THE CALLER.
*                        THE VALUE WILL BE PADDED WITH TRAILING BLANKS
*                        OR TRUNCATED IF NECESSARY. A MAXIMUM OF 256
*                        IS SUPPORTED.
*              VALUE   - CHARACTER STRING. THE RETURNED INFORMATION
*                        SPECIFIED BY ID. THE CALLER MUST PROVIDE A
*                        RECEIVING CHARACTER STRING OF SUFFICIENT
*                        LENGTH.
*              OLENGTH - FULL WORD BINARY. THE RETURNED ACTUAL LENGTH
*                        OF THE VALUE REQUESTED. THIS MAY BE LESS THAN
*                        OR GREATER THAN ILENGTH.
*
*        RETURN CODES:
*              0  - NORMAL COMPLETION
*              4  - VALUE TRUNCATED, INSUFFICIENT LENGTH
*              8  - ID NOT FOUND
*              12 - TOO FEW ARGUMENTS
*              16 - SYSTEM CONTROL BLOCK FAILED VALIDITY CHECK
*
***********************************************************************
         EJECT                                             *LBD 02/84*
************************************************************LBD*02/84*
* SUPPORTED ARGUMENTS ARE:                                 *LBD 02/84*
*                                                          *LBD 02/84*
* ARGUMENT     SOURCE                                      *LBD 02/84*
*----------------------------------------------------------*LBD 02/84*
* NAME         ACF2 LIDREC                                 *LBD 02/84*
* PHONE        ACF2 LIDREC                                 *LBD 02/84*
* DEPT         ACF2 LIDREC                                 *LBD 02/84*
* GROUP        ACF2 LIDREC                                 *LBD 02/84*
* LOC          ACF2 LIDREC        (PHYSICAL LOCATION)      *LBD 02/84*
* MAIL         ACF2 LIDREC        (MAIL CODE)              *LBD 02/84*
* ACF2ACCT     ACF2 LIDREC        (40 POSITION)            *LBD 02/84*
* JOBFUNC      ACF2 LIDREC        2 CHARACTERS            *LBD 10/84*
* USERID       ACF2 ACUCB                                  *LBD 02/84*
* JOBNAME      ACF2 ACUCB                                  *LBD 02/84*
* TERMINAL     ACF2 ACUCB         (TCAM/VTAM NODE)         *LBD 02/84*
* ACCTNO       OSACT              (4 POSITION)             *LBD 02/84*
* CRTCD        OSACT                                       *LBD 02/84*
* FDS          OSACT                                       *LBD 02/84*
* FRAMES       OSACT                                       *LBD 02/84*
* LINES        OSACT                                       *LBD 02/84*
* DEST         ACF2 LIDREC        (8 POSITIONS)            *LBD 03/84*
* SYSID        SMCA SID           (FROM SMFPRMXX AT IPL)   *LBD 03/84*
* SYSNAME      CVTSNAME           (FROM IEASYSXX AT IPL)   *LBD 03/84*
* VERID        CVTVERID           16 CHARS                 *LBD 03/84*
* OSREL        CVTRELNO           4 POSITIONS              *LBD 03/84*
* CENTER       SYSNAME            4 POSITIONS              *LBD 05/84*
* BDTNODE      BDTUSVT            8 POSITIONS             *LBD 06/84*
************************************************************LBD*02/84*
         EJECT
***********************************************************************
         MACRO
&ID      SHOW  &BLOCK=,            SHOW IDENTIFIER/CONTROL BLOCK       *
               &FIELD=             FIELD WITHIN CONTROL BLOCK
.*********************************************************************
.*       &ID SPECIFIES THE EXTERNAL IDENTIFIER USED BY THE CALLER.
.*       &BLOCK SPECIFIES THE CONTROL BLOCK CONTAINING THE REQUIRED
.*             INFORMATION.
.*       &FIELD SPECIFIES THE CONTROL BLOCK FIELD WHICH CORRESPONDS
.*             THE EXTERNAL IDENTIFIER. NOTE THE LENGTH OF FIELD IS
.*             OBTAINED FROM THE CONTROL BLOCK DEFINITION.
.*********************************************************************
         GBLA  &SHOWN              NUMBER OF TABLE ENTRIES
         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)
         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)
         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)
         GBLA  &SHOWLEN(100)       LENGTHS OF IDS
&ID      DS    0H
&SHOWN           SETA &SHOWN+1     NUMBER OF IDS
&SHOWLEN(&SHOWN) SETA K'&ID        SAVE LENGTH OF ID
&SHOWID(&SHOWN)  SETC '&ID'        SAVE ID
&SHOWBLK(&SHOWN) SETC '&BLOCK'     SAVE BLOCK
&SHOWFLD(&SHOWN) SETC '&FIELD'     SAVE FIELD
         MEND
         EJECT
***********************************************************************
         MACRO
&NAME    SHOWTBL &END              GENERATE SHOW ID TABLE
         GBLA  &SHOWN              NUMBER OF TABLE ENTRIES
         GBLA  &SHOWLEN(100)       LENGTHS OF IDS
         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)
         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)
         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)
         LCLA  &I,&L
         LCLC  &N
         SPACE
SHOWENT  DSECT                     SHOW TABLE
SHOWLEN  DS    AL1                 LENGTH OF ID -1 (VARIABLE)
SHOWID   DS    CL8                 ID (FIXED)
SHOWFLDL DS    AL1                 LENGTH OF CONTROL BLOCK FIELD - 1
SHOWFLD  DS    Y                   OFFSET OF CONTROL BLOCK FIELD
SHOWRTN  DS    Y                   OFFSET TO EXECUTABLE ROUTINE
SHOWSIZE DS    0XL(*-SHOWENT)      SIZE OF TABLE ENTRY
         SPACE
&SYSECT  CSECT
         SPACE
         DS    0D
         SHOWSORT 1,&SHOWN         SORT ID'S
&N       SETC  '&NAME'             NAME START OF TABLE
.LOOP    ANOP
&I       SETA  &I+1                INCREMENT INDEX
         AIF   (&I GT &SHOWN).END  END OF TABLE?
         AIF   (&I LT &SHOWN).GEN  STILL WITHIN TABLE?
&N       SETC  '&END'              NAME END OF TABLE
.GEN     ANOP
&N       DC    AL1(&SHOWLEN(&I)-1)           LENGTH OF ID - 1
         DC    CL8'&SHOWID(&I)'              ID
         DC    AL1(L'&SHOWFLD(&I)-1)         LENGTH OF FIELD - 1
         DC    Y(&SHOWFLD(&I)-&SHOWBLK(&I))  OFFSET OF FIELD
         DC    Y(&SHOWID(&I)-&SYSECT)        OFFSET TO ROUTINE
&N       SETC  ''                  NULLIFY NAME FIELD
         AGO   .LOOP               LOOP FOR NEXT ID
.END     SPACE
         MEND
         EJECT
***********************************************************************
         MACRO
         SHOWSORT &M,&N            SORT ID'S
         GBLA  &SHOWLEN(100)       LENGTHS OF IDS
         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)
         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)
         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)
         LCLA  &I,&J,&F,&TEMPA
         LCLC  &X,&TEMPC,&XI,&XJ
         AIF   (&M GE &N).SORTED   IS THIS SEGMENT SORTED?
&I       SETA  &M                  INITIALIZE START OF SEGMENT
&J       SETA  &N                  INITIALIZE END OF SEGMENT
&F       SETA  (&M+&N)/2           GET MIDDLE OF SEGMENT
&X       SETC  '&SHOWID(&F)'.(8-K'&SHOWID(&F))' '  GET MIDDLE ELEMENT
.UP      ANOP                      SEARCH FOR OUT OF PLACE ELEMENT
&XI      SETC  '&SHOWID(&I)'.(8-K'&SHOWID(&I))' '  GET UPPER ELEMENT
         AIF   ('&X' LE '&XI').DOWN  HIGH ELEMENT FOUND?
&I       SETA  &I+1                INCREMENT INDEX
         AGO   .UP                 LOOP FOR NEXT ELEMENT
.DOWN    ANOP                      SEARCH FOR OUT OF PLACE ELEMENT
&XJ      SETC  '&SHOWID(&J)'.(8-K'&SHOWID(&J))' '  GET LOWER ELEMENT
         AIF   ('&X' GE '&XJ').CHANGE  LOW ELEMENT FOUND?
&J       SETA  &J-1                DECREMENT INDEX
         AGO   .DOWN               LOOP FOR NEXT ELEMENT
.CHANGE  AIF   (&I GT &J).SPLIT    IS SEGMENT NOW SPLIT?
&TEMPA       SETA &SHOWLEN(&I)     EXCHANGE LENGTH ELEMENTS
&SHOWLEN(&I) SETA &SHOWLEN(&J)
&SHOWLEN(&J) SETA &TEMPA
&TEMPC       SETC '&SHOWID(&I)'    EXCHANGE ID ELEMENTS
&SHOWID(&I)  SETC '&SHOWID(&J)'
&SHOWID(&J)  SETC '&TEMPC'
&TEMPC       SETC '&SHOWBLK(&I)'   EXCHANGE BLOCK ELEMENTS
&SHOWBLK(&I) SETC '&SHOWBLK(&J)'
&SHOWBLK(&J) SETC '&TEMPC'
&TEMPC       SETC '&SHOWFLD(&I)'   EXCHANGE FIELD ELEMENTS
&SHOWFLD(&I) SETC '&SHOWFLD(&J)'
&SHOWFLD(&J) SETC '&TEMPC'
&I       SETA  &I+1                INCREMENT LOW INDEX
&J       SETA  &J-1                DECREMENT HIGH INDEX
         AIF   (&I LT &J).UP       IS SEGMENT NOW SPLIT?
.SPLIT   ANOP                      SORT SEGMENTS RECURSIVELY
         SHOWSORT &M,&J            SORT UPPER SEGMENT
         SHOWSORT &I,&N            SORT LOWER SEGMENT
.SORTED  MEND
         EJECT
***********************************************************************
         IATY#JCD                  ROCKWELL JOB CARD
         EJECT
IEFAJCTB DSECT
         IEFAJCTB                  JOB CONTROL TABLE
         EJECT
         IEZJSCB                   JOB STEP CONTROL BLOCK
         EJECT
         IHAPSA                    PREFIXED SAVE AREA
         EJECT
         IKJTCB LIST=YES           TASK CONTROL BLOCK
         EJECT
         REGEQU                    REGISTERS
         EJECT
         CVT   DSECT=YES,PREFIX=YES                        *LBD 03/84*
         EJECT                                             *LBD 03/84*
         IEESMCA                                           *LBD 03/84*
         ACCVT                                             *LBD 02/84*
         EJECT                                             *LBD 02/84*
         ACFASVT                                           *LBD 02/84*
         EJECT                                             *LBD 02/84*
         LIDREC DSECT=YES                                  *LBD 02/84*
LIDACCT# EQU   LIDACCT+3,4                                 *LBD 02/84*
         EJECT                                             *LBD 02/84*
         ACUCB                                             *LBD 02/84*
         EJECT                                             *LBD 02/84*
         IEZBITS                                          *LBD 06/84*
         EJECT                                            *LBD 06/84*
         IEFJSCVT                                         *LBD 06/84*
         EJECT                                            *LBD 06/84*
         IEFJESCT                                         *LBD 06/84*
         EJECT                                            *LBD 06/84*
         IATYUSVT                                         *LBD 06/84*
         EJECT                                            *LBD 06/84*
***********************************************************************
PARMS    DSECT
AID      DS    A                   A(ID)
AILENGTH DS    A                   A(ILENGTH)
AVALUE   DS    A                   A(VALUE)
AOLENGTH DS    A                   A(OLENGTH)
PARM1    DSECT                     FIRST PARAMETER
ID       DS    CL8                 IDENTIFIER
PARM2    DSECT                     SECOND PARAMETER
ILENGTH  DS    F                   INPUT LENGTH OF VALUE
PARM3    DSECT                     THIRD PARAMETER
VALUE    DS    CL256               VALUE ASSOCIATED WITH IDENTIFIER
PARM4    DSECT                     THIRD PARAMETER
OLENGTH  DS    F                   OUTPUT LENGTH OF VALUE
         EJECT
***********************************************************************
*        INITIALIZATION
***********************************************************************
SHOW     CSECT
         USING *,R15
         USING PARMS,R1
         SAVE  (14,12)             SAVE REGISTERS
         MODID ,                   MODULE IDENTIFICATION
         DROP  R15
         LR    R12,R15             R12 = BASE REGISTER
         USING SHOW,R12
         TM    AID,X'80'           IS ID LAST PARAMETER?
         BO    ARGERROR            YES, ERROR
         TM    AILENGTH,X'80'      IS ILENGTHD LAST PARAMETER?
         BO    ARGERROR            YES, ERROR
         TM    AVALUE,X'80'        IS VALUE LAST PARAMETER?
         BO    ARGERROR            YES, ERROR
         L     R9,AOLENGTH         R9 -> OLENGTH
         USING OLENGTH,R9
         XC    OLENGTH,OLENGTH     OLENGTH = 0 IN CASE OF ERROR
         L     R10,AVALUE          R10 -> VALUE
         USING VALUE,R10
         L     R11,AILENGTH        R11 -> ILENGTH
         USING ILENGTH,R11
         ICM   R11,15,ILENGTH      R11 = ILENGTH
         DROP  R11
         BNP   TRUNCATE            ERROR IF ILENGTH = 0
         LA    R0,256              R0 = 256
         CR    R11,R0              IS ILENGTH > 256?
         BNH   OKILEN              NO, BRANCH
         LA    R11,256             YES, SET ILENGTH = 256
OKILEN   DS    0H
         BCTR  R11,0               R11 = ILENGTH-1 FOR MVC
         BCTR  R11,0               R11 = ILENGTH-2 FOR MVC
         MVI   VALUE,C' '          VALUE = ALL BLANKS
         EX    R11,BLANK           ...
         LA    R11,1(R11)          R11 = ILENGTH-1
         L     R14,AID             R14 -> ID
         USING ID,R14
         EJECT
***********************************************************************
*        DETERMINE WHETHER ID IS IN TABLE
*              A BINARY SEARCH IS MADE TO DETERMINE WHETHER THE ID
*              IN THE INTERNAL TABLE.  IF SO, A BRANCH IS
*              MADE TO THE APPROPRIATE ROUTINE.
***********************************************************************
         SR    R4,R4               CLEAR FOR DIVISION
         LA    R6,L'SHOWSIZE       GET +LENGTH OF TABLE ENTRY
         LNR   R2,R6               GET -LENGTH OF TABLE ENTRY
         LA    R3,SHOWTBL          POINT TO LOW END OF TABLE
         LA    R7,SHOWTBLE         POINT TO HIGH END OF TABLE
LOOP     DS    0H
         LR    R5,R7               HIGH END OF TABLE
         SR    R5,R3               HIGH-LOW
         SRL   R5,1                (HIGH-LOW)/2
         DR    R4,R6               ((HIGH-LOW)/2)/SHOWSIZE
         MR    R4,R6               (((HIGH-LOW)/2)/SHOWSIZE)*SHOWSIZE
         AR    R5,R3               POINT TO MIDDLE ENTRY IN TABLE
         USING SHOWENT,R5
         IC    R8,SHOWLEN          GET LENGTH OF ID
         EX    R8,CLC              COMPARE ID:TABLE
         BL    LOW                 LOW: BRANCH
         BH    HIGH                HIGH: BRANCH
         LH    R8,SHOWRTN          EQUAL: GET BRANCH DISPLACEMENT
         B     SHOW(R8)            BRANCH TO PROCESS ID
LOW      DS    0H
         LR    R7,R5               POINT HIGH AT MIDPOINT
         BXH   R7,R2,LOOP          MINUS TESTED ENTRY; HIGH > LOW?
         CR    R7,R3               ELSE HIGH = LOW?
         BE    LOOP
         B     NOID                NO, ERROR (NOT MATCHED)
HIGH     DS    0H
         LR    R3,R5               POINT LOW AT MIDPOINT
         BXLE  R3,R6,LOOP          PLUS TESTED ENTRY; LOW <= HIGH?
         B     NOID                NO, ERROR (NOT MATCHED)
         EJECT
***********************************************************************
*        FIND INFORMATION
***********************************************************************
*AME     SHOW  BLOCK=ABSTART,FIELD=ABNAME                  *LBD 02/84*
*AIL     SHOW  BLOCK=ABSTART,FIELD=ABMAIL                  *LBD 02/84*
*EPT     SHOW  BLOCK=ABSTART,FIELD=ABDEPT                  *LBD 02/84*
*ROUP    SHOW  BLOCK=ABSTART,FIELD=ABGROUP                 *LBD 02/84*
FDS      SHOW  BLOCK=ABSTART,FIELD=ABFDS                   *LBD 02/84*
ACCTNO   SHOW  BLOCK=ABSTART,FIELD=ABACCTNO                *LBD 02/84*
CRTCD    SHOW  BLOCK=ABSTART,FIELD=ABCRTCD
LINES    SHOW  BLOCK=ABSTART,FIELD=ABLINES
FRAMES   SHOW  BLOCK=ABSTART,FIELD=ABFRAMES
*                                  R0 -> PREFIXED SAVE AREA
         USING PSA,0
         CLC   PSAPSA,=C'PSA '     VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         L     R1,PSATOLD          R1 -> CURRENT TASK CONTROL BLOCK
         USING TCB,R1
         CLC   TCBTCBID,=C'TCB '   VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         L     R1,TCBJSCB          R1 -> JOB STEP CONTROL BLOCK
         USING IEZJSCB,R1
         C     R1,JSCBACT          VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         L     R1,JSCBJCT          R1 -> JOB CONTROL TABLE
         USING INJMJCT-16,R1
         CLC   INJMJCT-4(4),=C'JCT '  VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         ICM   R1,B'0111',JCTACTAD R1 -> ACCOUNT CONTROL TABLE
         USING IEFAACTB-16,R1
         CLC   IEFAACTB-4(4),=C'ACT '  VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         CLI   ACTACCNT,ABSIZE     VALIDITY CHECK
         BNE   INVALID             BRANCH IF FAILURE
         LA    R1,ACTACCNT+1       R1 -> FIRST JOB ACCOUNTING FIELD
         DROP  R1
         B     DOIT                                        *LBD 02/84*
         EJECT                                             *LBD 02/84*
USERID   SHOW  BLOCK=ACUCB,FIELD=ACULID                    *LBD 02/84*
JOBNAME  SHOW  BLOCK=ACUCB,FIELD=ACUSJOBN                  *LBD 02/84*
TERMINAL SHOW  BLOCK=ACUCB,FIELD=ACUTIDNT                  *LBD 02/84*
         ACFINCVT 6,NONE=INVALID                           *LBD 02/84*
         USING ACCVT,6            ADDRESSABILITY           *LBD 02/84*
         USING PSA,0              "      "                 *LBD 02/84*
         ACFGUCB 7,NONE=INVALID                            *LBD 02/84*
         LR    R1,R7                                       *LBD 02/84*
         DROP  6                                           *LBD 02/84*
         B     DOIT                                        *LBD 02/84*
         EJECT                                             *LBD 03/84*
SYSID    SHOW  BLOCK=SMCABASE,FIELD=SMCASID                *LBD 03/84*
         L     R1,CVTPTR                                   *LBD 03/84*
         USING CVTMAP,R1                                   *LBD 03/84*
         L     R1,CVTSMCA                                  *LBD 03/84*
         DROP  R1                                          *LBD 03/84*
         B     DOIT                                        *LBD 03/84*
         EJECT                                             *LBD 03/84*
SYSNAME  SHOW  BLOCK=CVTFIX,FIELD=CVTSNAME                 *LBD 03/84*
VERID    SHOW  BLOCK=CVTFIX,FIELD=CVTVERID                 *LBD 03/84*
OSREL    SHOW  BLOCK=CVTFIX,FIELD=CVTRELNO                 *LBD 03/84*
         L     R1,CVTPTR                                   *LBD 03/84*
         S     R1,=F'256'                                  *LBD 03/84*
         B     DOIT                                        *LBD 03/84*
         EJECT                                             *LBD 04/84*
CENTER   SHOW  BLOCK=CVTFIX,FIELD=CVTSNAME                 *LBD 04/84*
         L     R1,CVTPTR                                   *LBD 04/84*
         S     R1,=F'256'              ADJUST FOR PREFIX   *LBD 04/84*
         USING CVTFIX,R1                                   *LBD 04/84*
         LA    R1,CVTSNAME                                 *LBD 04/84*
         DROP  R1                                          *LBD 04/84*
         LA    R2,4                    MAX SEARCH          *LBD 05/84*
CNTRLP   DS    0H                                          *LBD 04/84*
         CLI   0(R1),C'#'              END OF CPUID        *LBD 04/84*
         BE    HAVECNTR                                    *LBD 04/84*
         LA    R1,1(R1)                                    *LBD 04/84*
         BCT   R2,CNTRLP                                   *LBD 05/84*
         B     INVALID                                     *LBD 05/84*
HAVECNTR DS    0H                                          *LBD 04/84*
         LA    R1,1(R1)                POINT TO CENTER     *LBD 04/84*
         LA    R2,3                    LOAD LEN OF CENTER  *LBD 04/84*
         EX    R2,MOVE                 MOVE IT             *LBD 04/84*
         LA    R2,1(R2)                BUMP BY 1           *LBD 05/84*
         ST    R2,OLENGTH                                  *LBD 05/84*
         B     NORMAL                                      *LBD 04/84*
         EJECT                                             *LBD 02/84*
NAME     SHOW  BLOCK=LIDREC,FIELD=LIDNAME                  *LBD 02/84*
PHONE    SHOW  BLOCK=LIDREC,FIELD=LIDPHONE                 *LBD 02/84*
ACF2ACCT SHOW  BLOCK=LIDREC,FIELD=LIDACCT                  *LBD 02/84*
*CCTNO   SHOW  BLOCK=LIDREC,FIELD=LIDACCT#                 *LBD 02/84*
*DS      SHOW  BLOCK=LIDREC,FIELD=LIDFDS#                  *LBD 02/84*
GROUP    SHOW  BLOCK=LIDREC,FIELD=LIDGROUP                 *LBD 02/84*
DEPT     SHOW  BLOCK=LIDREC,FIELD=LIDDEPT                  *LBD 02/84*
LOC      SHOW  BLOCK=LIDREC,FIELD=LIDLOCAT                 *LBD 02/84*
MAIL     SHOW  BLOCK=LIDREC,FIELD=LIDMAILC                 *LBD 02/84*
DEST     SHOW  BLOCK=LIDREC,FIELD=LIDTDRMT                 *LBD 03/84*
JOBFUNC  SHOW  BLOCK=LIDREC,FIELD=LIDJOBF                 *LBD 10/84*
         ACFINCVT 6,NONE=INVALID                           *LBD 02/84*
         USING ACCVT,6            ADDRESSABILITY           *LBD 02/84*
         USING PSA,0              "      "                 *LBD 02/84*
         ACFGUCB 7,NONE=INVALID                            *LBD 02/84*
         DROP  R6                                          *LBD 02/84*
         USING ACUCB,R7                                    *LBD 02/84*
         L     R1,ACULRECP             -> LOGON ID RECORD  *LBD 02/84*
         DROP  R7                                          *LBD 02/84*
         B     DOIT                                        *LBD 02/84*
         EJECT                                             *LBD 02/84*
BDTNODE  SHOW  BLOCK=USVTBGN,FIELD=USVTNDID               *LBD 06/84*
         L     R1,CVTPTR                                  *LBD 06/84*
         USING CVTMAP,R1                                  *LBD 07/84*
         L     R1,CVTJESCT             -> JESCT           *LBD 06/84*
         USING JESCT,R1                                   *LBD 07/84*
         L     R7,JESSSCT              -> SSCVT           *LBD 06/84*
         USING SSCTBEGN,R7                                *LBD 06/84*
DONODE   DS    0H                                         *LBD 06/84*
         L     R1,SSCTSUSE                                *LBD 06/84*
         CLC   =C'USVT',0(R1)          BDT USVT ?         *LBD 07/84*
         BNE   NSSCT                   NO - KEEP LOOKING  *LBD 07/84*
         USING USVTBGN,R1                                 *LBD 06/84*
         TM    USVTFLGS,USVTDEF        DEFAULT BDT        *LBD 06/84*
         BZ    NSSCT                   NO - KEEP GOING    *LBD 06/84*
         B     DOIT                                       *LBD 06/84*
NSSCT    DS    0H                                         *LBD 06/84*
         L     R7,SSCTSCTA                                *LBD 06/84*
         LTR   R7,R7                                      *LBD 06/84*
         BNZ   DONODE                                     *LBD 06/84*
         B     INVALID                                    *LBD 06/84*
         DROP  R1,R7                                      *LBD 06/84*
         EJECT                                            *LBD 06/84*
DOIT     DS    0H                                          *LBD 02/84*
         AH    R1,SHOWFLD          R1 -> REQUESTED SUBFIELD
         SR    R2,R2               R2 = 0
         IC    R2,SHOWFLDL         R2 = OLENGTH - 1
         LA    R3,1(R2)            R3 = OLENGTH
         ST    R3,OLENGTH          STORE OLENGTH
         CR    R2,R11              IS OLENGTH > ILENGTH?
         BNH   OKOLEN              NO, BRANCH
         LR    R2,R11              YES, SET OLENGTH = ILENGTH
OKOLEN   DS    0H
         EX    R2,MOVE             MOVE VALUE
         CLM   R2,1,SHOWFLDL       WAS ILENGTH < OLENGTH?
         BNE   TRUNCATE            YES, BRANCH
         B     NORMAL              NORMAL RETURN
         EJECT
***********************************************************************
*        RETURN
***********************************************************************
INVALID  DS    0H                  VALIDITY CHECK FAILED
         LA    R15,16              RETURN CODE = 16
         B     RETURN
ARGERROR DS    0H                  CALLER ARGUMENT LIST ERROR
         LA    R15,12              RETURN CODE = 12
         B     RETURN
NOID     DS    0H                  ID NOT FOUND
         LA    R15,8               RETURN CODE = 8
         B     RETURN
TRUNCATE DS    0H                  VALUE TRUNCATED
         LA    R15,4               RETURN CODE = 4
         B     RETURN
NORMAL   DS    0H                  NORMAL COMPLETION
         SR    R15,R15             RETURN CODE = 0
RETURN   DS    0H
         RETURN (14,12),RC=(15)    RETURN
*
BLANK    MVC   VALUE+1(0),VALUE    EXECUTED
CLC      CLC   ID(0),SHOWID        EXECUTED
MOVE     MVC   VALUE(0),0(R1)      EXECUTED
         DROP  R5
         DROP  R9
         DROP  R10
         DROP  R12
         DROP  R14
         EJECT
***********************************************************************
*        ID TABLE
*              ENTRIES ARE FORMED BY SHOW MACRO CALLS IN THE PRECEDING
*              ACTION ROUTINES.  THE TABLE IS USED BY THE BINARY SEARCH
*              CODE IN THE PROLOG TO THE ACTION ROUTINES.
***********************************************************************
SHOWTBL  SHOWTBL SHOWTBLE
         EJECT
         END
