*          DATA SET CBT930     AT LEVEL 001 AS OF 02/25/79
* MLPALIST               VERSION 1.1 WDPSC AUTHOR STEVE ERICKSON
*          LISTS THE MODULES IN MEMORY THAT WERE LOADED BY THE
*  MODIFY LINK PACK AREA PARAMETER MEMBER AND THE FIXED LINK PACK
*  PACK AREA MEMBER, ALSO ANY MODULES THAT HAVE THE MODIFY/FIX BIT
*  OF THE CDE TURNED ARE LISTED.
*
* THE LIST FORMAT IS SIMILAR TO THAT OF LISTLPA COMMAND OF AMBLIST.
         SPACE 6
*
*        DISTRIBUTION LIBRARY   SYS1.AMODGEN IS NEEDED TO ASSEMBLE THIS
*        ROUTINE.
*
*        OTHER MACROS USED ARE
*               REGISTER - EQUATE MACRO FOR GENERAL REGISTERS
*               QKSRT1   - INTERNAL SORT ROUTINE, CSECT CREATED
*
*        PRINT OFF
         MACRO
         REGISTER
         LCLA  &I
.LOOP    ANOP
R&I      EQU   &I
&I       SETA  &I+1
         AIF   (&I LT 16).LOOP
         MEND
         MACRO
         QKSRT1 &NAME,&TYPE,&LENGTH=0,&STRTKY=1,&KYLGTH=0,&ORDER=A,    X
               &EXTRA=0,&OVRTYP=NONE,&DISP=1,&INLINE=NO
***********************************************************************
*** QUICKERSORT MACRO-SUBROUTINE: BASED ON CACM ALGORITHM NUMBER 271  *
*** THE FOLLOWING CHANGES AND ADDITIONS WERE MADE:                    *
*** 1.  CALCULATION OF P AS P:=(I+J)/2 WAS CHANGED TO: P:=I+(J-I)/2   *
*** 2.  THE LINE 'FOR Q:=Q STEP -1 UNTIL K DO' WAS CHANGED TO:        *
***        'FOR Q:=Q STEP -1 UNTIL K+1 DO'                            *
*** 3.  OPTION: CORRESPONDING ELEMENTS IN UP TO FIVE EXTRA ARRAYS MAY *
***        BE EXCHANGED, WHEN ELEMENTS IN THE SORTED ARRAY ARE        *
***        EXCHANGED.  EACH EXTRA ARRAY MUST CONTAIN THE SAME NUMBER  *
***        OF ELEMENTS, AND HAVE ELEMENT SIZES EQUAL TO THOSE OF THE  *
***        SORTED ARRAY.                                              *
*** 4.  OPTION: WITH 'TYPE' SET TO 'C' (CHARACTER FORMAT) OTHER TYPES *
***        OF COMPARES MAY BE MADE BY SPECIFYING ONE OR TWO           *
***        OVERRIDING PARAMETERS.                                     *
*** 5.  OPTION: IN LINE CODE MAY BE GENERATED, IF DESIRED, BY         *
***        SPECIFYING INLINE=YES.  A DUMMY PROGRAM NAME IS STILL      *
***        REQUIRED.  REGISTERS WILL BE SAVED IN A SPECIAL SAVEAREA.  *
***********************************************************************
.**********************************************************************
.*           EXPLANATION OF KEYWORD AND POSITONAL OPERANDS:           *
.*                                                                    *
.* 1. NAME (POSITIONAL): THE SUBROUTINE MUST BE NAMED ARBITRARILY     *
.*    (ONE TO SIX CHARACTERS MAXIMUM) BY THE USER. FORTRAN OR COBOL   *
.*    RULES MUST BE FOLLOWED IN CHOOSING A NAME.                      *
.* 2. TYPE (POSITIONAL): THE TYPE OF VARIABLES TO BE SORTED MUST BE   *
.*    CONVEYED TO THE MACRO.  ADMISSIBLE VALUES ARE: P=PACKED;        *
.*    C=CHARACTER OR ALPHANUMERICS (= A-FORMAT VARIABLES); H=HALFWORD *
.*    INTEGERS (=INTEGER*2); F=FULLWORD (=INTEGER*4); E=SINGLE        *
.*    PRECISION FLOATING POINT (=REAL*4); D=DOUBLE PRECISION FLOATING *
.*    POINT (=REAL*8).                                                *
.* 3. LENGTH (KEYWORD): THE LENGTH IN BYTES OF THE FIELDS OF TYPES P  *
.*    AND C MUST BE SPECIFIED.  THE LENGTH MUST BE LESS THAN 256      *
.*    BYTES FOR C OR 16 BYTES FOR P.                                  *
.* 4. STRTKY (KEYWORD): THE COLUMN THE SORTING KEY BEGINS AT MAY BE   *
.*    CHANGED FROM ITS NULL VALUE OF COLUMN 1.                        *
.* 5. KYLGTH (KEYWORD): THE LENGTH OF THE DESIRED SORTING KEY.  IF    *
.*    KYLGTH IS OMITTED, LENGTH MINUS STRTKY IS THE DEFAULT OPTION.   *
.* 6. ORDER (KEYWORD): THE ORDER OF THE DESIRED SORT. OPTIONS ARE:    *
.*    A=ASCENDING ORDER; D=DESCENDING ORDER. IF ORDER IS NOT          *
.*    SPECIFIED, ASCENDING ORDER IS THE ASSUMED DEFAULT OPTION.       *
.* 7. EXTRA (KEYWORD): THE NUMBER OF ADDITIONAL ARRAYS (RANGE: 0 - 5) *
.*    EXTRA=0 IS THE DEFAULT OPTION.                                  *
.* 8. OVRTYP (KEYWORD): OVRTYP=(D,E,F, OR H) ALLOWS FIXED OR FLOATING *
.*    POINT COMPARES WITHIN LONGER FIELDS.  TYPE MUST EQUAL "C".      *
.* 9. DISP (KEYWORD): WHEN OVRTYP IS SPECIFIED, THIS SPECIFIES THE    *
.*    COLLUMN AT WHICH COMPARISON BEGINS.  DEFAULT IS COLLUMN 1.      *
.*10. INLINE (KEYWORD): INLINE=YES GENERATES IN LINE CODE WITHIN AN   *
.*    ASSEMBLER ROUTINE.  DEFAULT IS A CSECT CALLABLE BY FORTRAN.     *
.**********************************************************************
.*   THE FOLLOWING PARAMETER LIST IS REQUIRED IN THE FORTRAN CALL:    *
.*                                                                    *
.* 1. THE NAME OF THE ARRAY TO BE SORTED.                             *
.* 2. THE NUMBER OF ELEMENTS OF THE ARRAY TO BE SORTED.               *
.* 3. THE NAMES OF "EXTRA" ARRAYS, IF ANY.                            *
.**********************************************************************
.*  SEVERAL EXAMPLES WILL MAKE THE USE OF A MACRO SUBROUTINE CLEAR:   *
.*                                                                    *
.* PROBLEM 1: SORT THE CHARACTER ARRAY CALLED A OF 500 ELEMENTS OF 80 *
.* BYTES EACH ACCORDING TO AN 8 BYTE KEY STARTING IN COLUMN 20.       *
.* SOLUTION:  THE FOLLOWING CARDS ARE NEEDED:                         *
.* // JOB CARD                                                        *
.* // EXEC ASMGC                                                      *
.* //ASM.SYSIN DD *                                                   *
.* (QUICKERSORT MACRO DEFINITION SOURCE CODE IF NOT IN SYSTEM LIBRARY)*
.*          QKRSRT SORT1,C,LENGTH=80,STRTKY=20,KYLGTH=8               *
.*          END                                                       *
.* (COMMENT: THE NAME SORT1 WAS ARBITRARILY CHOSEN. ONLY THE QKRSRT   *
.* AND END CARD NEED APPEAR IF THE MACRO IS IN THE SYSTEM LIBRARY)    *
.* /*                                                                 *
.* // EXEC FORTGCLG                                                   *
.* //FORT.SYSIN DD *                                                  *
.* (FORTRAN DECK WHICH WILL CONTAIN THE FOLLOWING STATEMENT)          *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.*       CALL SORT1(A,500)                                            *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.* /*                                                                 *
.* //GO.SYSIN DD *                                                    *
.* (DATA, IF ANY)                                                     *
.* /*                                                                 *
.*                                                                    *
.* PROBLEM 2: SUPPOSE AN ARRAY OF DOUBLE PRECISION FLOATING POINT     *
.* NUMBERS IS TO BE SORTED.  SUPPOSE THE NAME DBLSRT IS CHOSEN FOR    *
.* THE SUBROUTINE.  THE MACRO PROTOTYPE CARD WOULD THEN READ:         *
.*          QKRSRT DBLSRT,D                                           *
.* HERE THE LENGTH IS IMPLIED TO BE 8 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL DBLSRT(.....)" WOULD APPEAR.                   *
.*                                                                    *
.* PROBLEM 3: SUPPOSE AN ARRAY OF FIXED POINT NUMBERS IS TO BE SORTED.*
.* ALSO TO BE SORTED ELEMENT FOR ELEMENT WITH THE FIRST ARRAY ARE     *
.* THREE ADDITIONAL ARRAYS.  THE MACRO PROTOTYPE WOULD THEN READ:     *
.*          QKRSRT EXSRT,F,EXTRA=3                                    *
.* HERE THE LENGTH IS IMPLIED TO BE 4 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL EXSRT(.., .., .., .., ..)" WOULD APPEAR.       *
.*                                                                    *
.* PROBLEM 4: SUPPOSE A REAL*4 ARRAY WITH DIMENSION ARR(3,100) IS TO  *
.* BE SORTED ON THE SECOND COLLUMN.  THE MACRO PROTOTYPE STATEMENT    *
.* WOULD THEN READ:                                                   *
.*          QKRSRT OVRSRT,C,LENGTH=12,OVRTYP=E,DISP=5                 *
.* HERE SORTING WOULD BE DONE ACCORDING TO THE SECOND COLLUMN.  IN THE*
.* FORTRAN PROGRAM THE STATEMENT "CALL OVRSRT(ARR,100)" WOULD APPEAR. *
.*                                                                    *
.* PROBLEM 5: SUPPOSE AN IN LINE SORT IS DESIRED IN AN ASSEMBLER      *
.* ROUTINE, WITH FIXED POINT COMPARES.  THE MACRO PROTOTYPE WOULD     *
.* THEN READ:                                                         *
.*          QKRSRT XYZ,F,INLINE=YES                                   *
.* HERE THE DUMMY NAME "XYZ" IS NOT GENERATED.  ENTERING THE SORT     *
.* ROUTINE, REGISTER 1 MUST CONTAIN THE ADDRESS OF A PARAMETER LIST   *
.* WITH THE ADDRESSES OF: THE ARRAY TO BE SORTED, THE ARRAY LENGTH    *
.* VARIABLE, AND EXTRA ARRAY ADDRESSES IF ANY.  THE CONTAINING CSECT  *
.* MUST USE R(15) FOR A BASE REGISTER.                                *
.*                                                                    *
.* EFFECTIVELY THE USER PROVIDES A ONE INSTRUCTION ASSEMBLY LANGUAGE  *
.* PROGRAM.  THE USER IS NOW ABLE TO SORT ANYTHING ANY WAY.           *
.**********************************************************************
         LCLA  &STRTKX,&LT2,&SLNGTX,&ZZ,&WW,&XX,&YY,&KYLGTX,&DISPL
         LCLC  &LENGTX,&TYPX,&BRNCH1,&BRNCH2,&QCHK,&REG,&Q
&KYLGTX  SETA  &KYLGTH *               VARIABLE PARAMETERS ARE
&TYPX    SETC  '&TYPE' *               CHANGED TO VARIABLE SYMBOLS
&LENGTX  SETC  '&LENGTH' *             SO THEIR VALUES MAY BE RESET
&STRTKX  SETA  &STRTKY-1
&DISPL   SETA  0
         AIF   ('&OVRTYP' EQ 'NONE').REJ
&DISPL   SETA  &DISP-1
.REJ     AIF   (&EXTRA LE 5).L500
         MNOTE 16,'MORE THAN 5 EXTRA ARRAYS'
         MEXIT
.L500    ANOP
&QCHK    SETC  'G' *                   INDICATES TYPE IS NOT C OR P
&REG     SETC  '7' *                   WORK REG IF TYPE IS NOT C OR P
         AIF   ('&ORDER' EQ 'A').L31 * WHICH ORDER IS DESIRED FOR SORT?
&BRNCH1  SETC  'H' *                   DESCENDING ORDER
&BRNCH2  SETC  'L'
         AGO   .L32
.L31     ANOP *                        ASCENDING ORDER
&BRNCH1  SETC  'L'
&BRNCH2  SETC  'H'
.L32     AIF   (1 LE K'&NAME AND K'&NAME LE 6).L2 * IS NAME OKAY?
         MNOTE 16,'IMPROPER LENGTH FOR SUBROUTINE NAME' * INVALID NAME
         MEXIT *                       STOP EXPANSION
.L2      AIF   ('&TYPE' NE 'F' AND '&TYPE' NE 'E').L3 * TYPE F OR E?
&LENGTX  SETC  '4' *                   IF SO, SET LENGTH TO 4 BYTES
         AIF   ('&TYPE' NE 'F').L4
&TYPX    SETC  ' ' *                   IF TYPE F, SET &TYPX TO BLANK
         AGO   .L4
.L3      AIF   ('&TYPE' NE 'H').L5 *   TYPE H (HALFWORD)?
&LENGTX  SETC  '2' *                   IF SO, SET LENGTH TO 2 BYTES
         AGO   .L4
.L5      AIF   ('&TYPE' NE 'D').L6 *   TYPE D (DOUBLEWORD)?
&LENGTX  SETC  '8' *                   IF SO, SET LENGTH TO 8 BYTES
         AGO   .L4
.L6      AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'P').L7 * TYPE C OR P?
         MNOTE 16,'INVALID TYPE' *     IF ABOVE TYPES NOT SPECIFIED
         MEXIT *                       STOP EXPANSION
.L7      ANOP
&QCHK    SETC  'B' *                   INDICATES TYPE IS C OR P
&REG     SETC  '6' *                   WORK REG IF TYPE IS C OR P
         AIF   ('&LENGTH' NE '0').L1 * LENGTH BLANK FOR TYPE C OR P?
         MNOTE 16,'LENGTH WAS NOT SPECIFIED FOR TYPE P OR C'
         MEXIT *                       IF SO, STOP EXPANSION
.L1      AIF   ('&OVRTYP' EQ 'NONE').M2
&Q       SETC  'B'
         AIF   ('&OVRTYP' NE 'F' AND '&OVRTYP' NE 'E').M5
&YY      SETA  4
         AGO   .M8
.M5      AIF   ('&OVRTYP' NE 'H').M6
&YY      SETA  2
         AGO   .M8
.M6      AIF   ('&OVRTYP' NE 'D').M1
&YY      SETA  8
.M8      ANOP
&Q       SETC  'G'
         AIF   (&DISP+&YY-1 LE &LENGTX).L4
         MNOTE 16,'DISP PLUS OVRTYP LENGTH GREATER THAN LENGTH'
         MEXIT
.M1      MNOTE 16,'INVALID OVRTYP'
         MEXIT
.M2      AIF   (&STRTKX LE &LENGTH).M3
         MNOTE 16,'STRTKY GREATER THAN LENGTH'
         MEXIT
.M3      AIF   (&KYLGTX GT 0).M4
&KYLGTX  SETA  &LENGTH-&STRTKX
.M4      AIF   (&KYLGTX+&STRTKX LE &LENGTX).L4
         MNOTE 16,'KYLGTH PLUS STRTKY GREATER THAN LENGTH'
         MEXIT
.L4      ANOP
&LT2     SETA  &LENGTX*2 *             LENGTH * 2
&SLNGTX  SETA  &LENGTX/2-&LENGTX/8 *   SHIFT POSITIONS = LOG2(LENGTH)
         AIF   ('&QCHK' EQ 'G').L555
         AIF   ('&TYPE' EQ 'C').L551
         AIF   (&LENGTX LE 16).L555
         MNOTE 16,'LENGTH GREATER THAN 16 BYTES FOR DECIMAL'
         MEXIT
.L551    AIF   (&LENGTX LE 256).L555
         MNOTE 16,'LENGTH GREATER THAN 256 BYTES FOR CHARACTER'
         MEXIT
.L555    ANOP
*                                      BEGIN QUICKERSORTING
         AIF   ('&INLINE' EQ 'NO').L543
         STM   14,12,S&SYSNDX
         AGO   .L531
.L543    ANOP
&NAME    CSECT
         STM   14,12,12(13) *          SAVE REGISTERS
         USING &NAME,15 *              SET UP BASE REGISTER
.L531    ST    13,R13&SYSNDX *            STORE POINTER TO SAVEAREA
*                                      (AD(W) MEANS THE ADDRESS OF W)
*                                      THE CONTENTS OF THE REGISTERS
*                                      FOR QUICKERSORT ARE AS FOLLOWS:
*                                       1 - LENGTH
*                                       2 - TMP (TEMP. COMPARE STORAGE)
*                                       4 - T (TEMPORARY COMPARE ITEM)
*                                       5 - M (INDEX FOR LT AND UT)
*                                       8 - Q LOOP DECREMENT = LENGTH
*                                       9 - Q LOOP COMPARAND = AD(A(K))
*                                      10 - K LOOP INCREMENT = LENGTH
*                                      11 - K LOOP COMPARAND = AD(A(Q))
*                                      12 - AD(A(I))
*                                      13 - AD(A(J))
*                                      14 - =F'4' (CONSTANT)
*                                      15 - BASE REGISTER
*                                      0,3,6,7 - WORK REGISTERS
&XX      SETA  3+&EXTRA
         LM    2,&XX,0(1)
         L     3,0(3)
         AIF   (&EXTRA EQ 0).L88
         LR    9,2
         AIF   (&EXTRA GT 1).L94
         LR    10,4
         AGO   .L95
.L94     ANOP
&YY      SETA  9+&EXTRA
         LM    10,&YY,8(1)
.L95     ANOP
&ZZ      SETA  9
&WW      SETA  4
&YY      SETA  &EXTRA
.L90     SR    &ZZ,&WW
&YY      SETA  &YY-1
&ZZ      SETA  &ZZ+1
&WW      SETA  &WW+1
         AIF   (&YY GT 0).L90
         SR    &ZZ,2
         STM   9,&ZZ,DA&SYSNDX
.L88     LA    1,&LENGTX
         SR    2,1
         SR    5,5 *                   M:=1;
         LA    14,4
         LR    10,1
         LCR   8,1
         LR    13,3
         MR    12,1
         LR    12,1 *                  I:=1;
         AR    12,2
         AR    13,2
         AIF   ('&QCHK' EQ 'G').L1000
         LA    2,TMP&SYSNDX
.L1000   ANOP
N&SYSNDX LR    &REG,13 *               N: IF J-I > 1 THEN
         SR    &REG,12
         SR    &REG,1
         BNP   L3E&SYSNDX
*                                      BEGIN COMMENT;
         AR    &REG,1 *                   P:=I+(J-I)/2;
         AIF   ('&QCHK' EQ 'G').L41
         SRDA  6,33
         DR    6,1
         MR    6,1
         AGO   .L42
.L41     SRA   7,&SLNGTX+1
         SLA   7,&SLNGTX
.L42     AR    7,12
         AIF   ('&QCHK' EQ 'G').L43
         MVC   0(&LENGTX,2),0(7) *          T := A(P);
         MVC   0(&LENGTX,7),0(12) *          A(P) := A(I);
         AIF   (&EXTRA EQ 0).L4444
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1002   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         MVC   &ZZ.(&LENGTX,2),0(7)
         MVC   0(&LENGTX,7),0(12)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1002
.L43     L&TYPX    4,0(7) *                T:=A(P);
         L&TYPX    6,0(12)
         ST&TYPX    6,0(7) *                A(P):=A(I);
         AIF   (&EXTRA EQ 0).L44
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1001   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         L&TYPX 0,0(7)
         L&TYPX 6,0(12)
         ST&TYPX 6,0(7)
         ST&TYPX 0,TMP&SYSNDX+&ZZ
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1001
.L4444   AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').L44
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NOREJ
&TYPX    SETC  ' '
.NOREJ   L&TYPX 4,&DISPL.(2)
.L44     LR    11,13 *                  Q := J;
         LR    9,12
         AR    9,1
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NN
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NN
&TYPX    SETC  ' '
.NN      AIF   ('&QCHK' EQ 'B').L11
LP1&SYSNDX C&TYPX    4,&DISPL.(9) *          FOR K:=I+1STEP1 UNTIL Q DO
*                                      BEGIN COMMENT;
         BN&BRNCH1   ND1&SYSNDX *               IF A(K) > T THEN
*                                      BEGIN COMMENT;
LP2&SYSNDX C&TYPX  4,&DISPL.(11) *         FOR Q:=Q STEP-1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
         AGO   .L12
.L11     AIF   ('&TYPX' NE 'P').L13
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,11)
         AGO   .L12
.L13     ANOP
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(11)
.L12     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K1
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K1      BN&BRNCH2   ND2&SYSNDX *               IF A(Q) < T THEN
*                                      BEGIN COMMENT;
&YY      SETA  0-4
&XX      SETA  0
.L99     AIF   ('&QCHK' EQ 'G').L46
         XC    0(&LENGTX,11),0(9) *          X := A(K);
         XC    0(&LENGTX,9),0(11) *          A(K) := A(Q);
         XC    0(&LENGTX,11),0(9) *          A(Q) := X;
         AGO   .L147
.L46     L&TYPX    6,0(11)
         L&TYPX    0,0(9) *                X:=A(K);
         ST&TYPX    6,0(9) *                A(K):=A(Q);
         ST&TYPX   0,0(11) *               A(Q):=X;
.L147    AIF   (&EXTRA EQ 0).L47
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     9,DA&SYSNDX+&YY
         S     11,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L99
.L47     SR    11,1 *                  Q := Q - 1;
*                                      COMMENT;
         B     ND1&SYSNDX *               GO TO L (ND1);
*                                      END
ND2&SYSNDX BXH   11,8,LP2&SYSNDX *          END FOR Q;
         LR    11,9 *                  Q := K - 1;
         SR    11,1
         B     M&SYSNDX *                 GO TO M;
*                                      END
ND1&SYSNDX BXLE  9,10,LP1&SYSNDX *       L: END FOR K;
*                                      COMMENT;
         AIF   ('&QCHK' EQ 'G').L48
M&SYSNDX MVC   0(&LENGTX,12),0(11) *      M: A(I) := A(Q);
         MVC   0(&LENGTX,11),TMP&SYSNDX *       A(Q) := T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L876    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
&YY      SETA  &YY+4
         MVC   0(&LENGTX,11),&ZZ.(2)
&XX      SETA  &XX+1
         MVC   0(&LENGTX,12),0(11)
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L876
.L48     ANOP
M&SYSNDX L&TYPX    6,0(11) *            M: A(I):=A(Q);
         ST&TYPX    6,0(12)
         ST&TYPX    4,0(11) *               A(Q):=T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L765    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
         L&TYPX 0,0(11)
         ST&TYPX 0,0(12)
         L&TYPX 4,TMP&SYSNDX+&ZZ
         ST&TYPX 4,0(11)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L765
.L49     ANOP
*                                      COMMENT;
         LR    6,11 *                  IF 2 *Q > I+J THEN
         SR    11,1
         SLA    6,1
         SR    6,12
         SR    6,13
         BNP   LWR&SYSNDX *               BEGIN
         ST    12,LT&SYSNDX.(5) *           LT(M) := I;
         ST    11,UT&SYSNDX.(5) *          UT(M) := Q - 1;
         LA    11,&LT2.(11)
         LR    12,11 *                 I:=Q+1;
         B     UM&SYSNDX *                END
*                                      ELSE
*                                      BEGIN
LWR&SYSNDX ST    13,UT&SYSNDX.(5) *           UT(M) := J;
         LR    13,11 *                 J:=Q-1;
         LA    11,&LT2.(11)
         ST    11,LT&SYSNDX.(5) *          LT(M) := Q + 1;
*                                      COMMENT;
UM&SYSNDX LA    5,4(5) *                M := M + 1;
         B     N&SYSNDX *                 GO TO N
*                                      END
L3E&SYSNDX CR    12,13 *                   ELSE IF I >= J THEN
*                                      BEGIN COMMENT;
         BNL   P&SYSNDX *                 GO TO P
*                                      END
*                                      ELSE
*                                      BEGIN COMMENT;
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NP
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NP
&TYPX    SETC  ' '
.NP      AIF   ('&QCHK' EQ 'B').L21
         L&TYPX    0,&DISPL.(12)
         C&TYPX    0,&DISPL.(13) *               IF A(I) > A(J) THEN
         AGO   .L22
.L21     AIF   ('&TYPX' NE 'P').L23
         CP    &STRTKX.(&KYLGTX,12),&STRTKX.(&KYLGTX,13)
*                                     IF A(I) > A(J) THEN
         AGO   .L22
.L23     CLC   &STRTKX.(&KYLGTX,12),&STRTKX.(13)
*                                     IF A(I) > A(J) THEN
.L22     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K2
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K2      BN&BRNCH2   P&SYSNDX
*                                      BEGIN
&YY      SETA  0-4
&XX      SETA  0
         AIF   ('&QCHK' EQ 'G').L410
.L999    AIF   ('&QCHK' EQ 'G').L987
         XC    0(&LENGTX,12),0(13) *           X := A(I);
         XC    0(&LENGTX,13),0(12) *           A(I) := A(J);
         XC    0(&LENGTX,12),0(13) *           A(J) := X;
         AGO   .L41129
.L987    L&TYPX 0,0(12)
.L410    L&TYPX    6,0(13) *               X:=A(I);
         ST&TYPX    0,0(13) *               A(I):=A(J);
         ST&TYPX    6,0(12) *               A(J):=X;
.L41129  AIF   (&EXTRA EQ 0).L411
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     12,DA&SYSNDX+&YY
         S     13,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L999
.L411    ANOP
*                                      END;
*                                      COMMENT;
P&SYSNDX SR    5,14 *               P: M := M - 1;
         BM    QT&SYSNDX *                IF M > 0 THEN
*                                      BEGIN
         L     12,LT&SYSNDX.(5) *           I := LT(M);
         L     13,UT&SYSNDX.(5) *           J := UT(M);
         B     N&SYSNDX *                 GO TO N
*                                      END;
*                                      END
QT&SYSNDX L     13,R13&SYSNDX *            END QUICKERSORT
         AIF   ('&INLINE' EQ 'NO').F100
         LM    14,12,S&SYSNDX
         B     YY&SYSNDX
S&SYSNDX DS    15F
         AGO   .F250
.F100    LM    14,12,12(13) *          RESTORE REGISTERS
         BR    14 *                    RETURN TO CALLING PROGRAM
.F250    ANOP
UT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR UT ARRAY
LT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR LT ARRAY
         AIF   (&EXTRA GT 0).LK
         AIF   ('&QCHK' EQ 'G').LL
TMP&SYSNDX DS    CL&LENGTH *                  TEMP STORAGE FOR COMPARES
         AGO   .LL
.LK      ANOP
&YY      SETA  &EXTRA+1
TMP&SYSNDX DS  &YY.CL&LENGTX *                 TEMP STORAGE FOR COMPARE
.LL      ANOP
R13&SYSNDX DS    F *                     SAVE AREA FOR REGISTER 13
         AIF   (&EXTRA EQ 0).LM
&YY      SETA  &EXTRA+1
DA&SYSNDX DS   &YY.F *                    SAVE AREA FOR ADDRESS CHANGES
.LM      AIF   ('&INLINE' EQ 'NO').LMN
YY&SYSNDX NOPR 12
.LMN     MEND
         EJECT
         PRINT ON
MLPALIST CSECT
         REGISTER
         B     12(,R15)
         DC    CL8'BLOCKS'
         STM   R14,R12,12(R13)
         LR    R12,R15            USE REG 12 AS BASE
         USING MLPALIST,R12
         GETMAIN RU,LV=LENGTH
         ST    R13,4(,R1)         CHAIN SAVEAREAS
         ST    R1,8(,R13)         TOGETHER
         LR    R13,R1
         USING SAVEAREA,R13
         SPACE 3
         MVC   RENTDCB(DCBLEN),SYSPRINT   MOVE DCB TO DSECT
         MVC   OPENL(OPENLEN),OPEN        MOVE OPEN STMTS TO DSECT
         LA    R1,OPENL           LETS OPEN THE PRINTER
         OPEN  RENTDCB,MF=(E,(1)) WELL OPEN SAYS ME
         MVI   PRINT,C' '         CLEAR OUT THE PRINT LINE
         MVC   PRINT+1(L'PRINT-1),PRINT
         SLR   R1,R1              CLEAR REG 1
         ST    R1,ENTRIES         INIT VALUE
         LA    R1,TABLE           GET THE ARRAY START ADDR
         ST    R1,PARM            SAVE IT IN PARM FIELD
         ST    R1,CURRENT         SAVE FOR USE AS COUNTER
         LA    R1,ENTRIES         GET THE # OF ENTRIES POINTER
         ST    R1,PARM+4          SAVE THE SECOND PARM FIELD
         SPACE 3
         L     R3,CVTPTR          GET THE CVT POINTER
         USING CVT,R3             GET ADDRESSABILITY TO CVT
         L     R2,CVTQLPAQ        GET CDE CHAIN POINTER FROM CVT
         USING CDENTRY,R2         SET UP ADDRESSABILITY TO CDE
         SPACE 3
CDELOOP  EQU   *
         TM    CDATTR,CDNIP       WAS THIS CDE LOADED BY MLPA
         BO    MLPALOAD           YES IT WAS
NEXTCDE  EQU   *
         L     R2,CDCHAIN         GET THE NEXT LPA CDE ENTRY
         LA    R2,0(,R2)          CLEAR BYTE JUST IN CASE
         LTR   R2,R2              CHECK FOR END OF CHAIN
         BNZ   CDELOOP            NOPE GO GET ANOTHER CDE
         SPACE 3
         L     R1,CURRENT         GET THE CURRENT POINTER
         MVC   0(L'PRINT,R1),PRINT  CLEAR OUT END OF TABLE
         LA    R1,PARM            SET UP FOR SORT
         L     R15,=V(ALPHA)      LETS SORT IT ALPHA
         BALR  R14,R15            GO DO IT
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED MOVE IN HEADING
         BAL   R10,PRINTIT        PRINT HEADING
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
         L     R2,ENTRIES         HOW MANY ENTRIES DO WE HAVE
         LA    R2,1(,R2)          BUMP FOR DIVIDE
         SRL   R2,1               DIVIDE BY 2
         LR    R4,R2              SAVE FOR LATER
         LA    R3,TABLE           GET START OF TABLE
         LA    R6,56              MAX LINES PER PAGE
PRTA     EQU   *
         MVC   PRINT+1(L'CURENTRY),0(R3) GET THE CURRENT ENTRY
         MVC   PRINT+60(L'CURENTRY),48(R3) GET NEXT ENTRY
         BAL   R10,PRINTIT        NOW PRINTIT
         BCTR  R6,R0              SUBTRACE 1 FROM LINE COUNT
         LTR   R6,R6              CHECK FOR FULL PAGE
         BNZ   NOHEADA
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED PRINT HEADING LINE
         BAL   R10,PRINTIT
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
NOHEADA  EQU   *
         LA    R3,96(,R3)         GET NEXT CDE POINTER
         BCT   R2,PRTA            GET NEXT ONE
         LA    R1,PARM            SET UP FOR SORT
         L     R15,=V(NUMER)    LETS SORT IT NUMERIC
         BALR  R14,R15            DO IT
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'NUMHED),NUMHED FIX UP HEADING
         BAL   R10,PRINTIT
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
         LA    R3,TABLE           START OF TABLE
         LA    R6,56              MAX LINES PER PAGE
PRTN     EQU   *
         MVC   PRINT+1(L'CURENTRY),0(R3)  GET START OF CDE TAB
         MVC   PRINT+60(L'CURENTRY),48(R3)  GET NEXT ENTRY
         BAL   R10,PRINTIT        GO PRINT TABLE
         BCTR  R6,R0
         LA    R3,96(,R3)         GET NEXT ENTRY
         LTR   R6,R6
         BNZ   NOHEADN
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'NUMHED),NUMHED
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
NOHEADN  EQU   *
         BCT   R4,PRTN            ARE WE DONE YET?
         LA    R1,CLOSEL
         CLOSE RENTDCB,MF=(E,(1))
         LR    R2,R13             SAVE ADDRESS FOR FREEMAIN
         L     R13,4(,R13)        GET CALLERS SAVE AREA POINTER
         FREEMAIN RU,A=(R2),LV=LENGTH     FREE UP SAVEAREA
         LM    R14,R12,12(R13)    RELOAD CALLERS REGISTERS
         SLR   R15,R15            SET RETURN CODE OF ZERO
         BR    R14                RETURN TO CALLER
         SPACE 3
MLPALOAD EQU   *
         TM    CDATTR,CDNIC       IS MODULE INPROCESS OF LOAD ?
         BO    NEXTCDE            YES GO GET ANOTHER ONE
         TM    CDATTR2,CDREL      IS MODULE INACTIVE ?
         BO    NEXTCDE            YES GO GET ANOTHER
         MVI   CURENTRY,C' '      CLEAR TO BLANKS
         MVC   CURENTRY+1(L'CURENTRY-1),CURENTRY
         MVC   BNAME(L'CDNAME),CDNAME THE CDE NAME
         LA    R1,CDENTPT         GET THE MODULE ENTRY POINT
         LA    R10,BEPA           THIS IS HIS ENTRY POINT
         BAL   R14,UNPACK         MAKE IT READABLE
         TM    CDATTR,CDMIN       IS IT A MINOR CDE ?
         BO    MINORCDE           YES GO FIX HIM UP
         ST    R2,R2SAVE          SAVE FOR LATER
XLIST    EQU   *
         L     R4,CDXLMJP         GET THE EXTENT LIST ADDR
         USING XTLST,R4           SET UP ADDR TO IT
         LA    R1,XTLMSBLA        GET LENGTH
         LA    R10,BLENGTH
         BAL   R14,UNPACK         MAKE IT READABLE
         LA    R1,XTLMSBAA        GET MAIN STORAGE ADDRESS
         LA    R10,BLOCAT         WHERE IS HE IN STORAGE
         BAL   R14,UNPACK         MAKE IT READABLE
         L     R1,ENTRIES         HOW MANY ENTRIES DO WE HAVE?
         LA    R1,1(,R1)          BUMP THE COUNTER
         ST    R1,ENTRIES         SAVE THE NEW NUMBER
         L     R1,CURRENT         SAVE CURRENT POINTER
         MVC   0(L'CURENTRY,R1),CURENTRY  SAVE THE CONTENTS
         LA    R1,48(,R1)         BUMP BY THE LENGTH
         ST    R1,CURRENT         SAVE THIS ENTRY
         L     R2,R2SAVE          RELOAD REG 2
         B     NEXTCDE            GO GET ANOTHER NAME
         SPACE 3
OPEN     OPEN  (SYSPRINT,(OUTPUT)),MF=L
CLOSE    CLOSE (SYSPRINT),MF=L
OPENLEN  EQU   *-OPEN
         SPACE 3
MINORCDE EQU   *
         ST    R2,R2SAVE          WE NEED HIM LATER FOR CHAIN
         L     R2,CDXLMJP         GO GET HIS MAJOR CDE
         MVC   BMAJOR(L'CDNAME),CDNAME GET THE MAJOR NAME
         B     XLIST
         SPACE 3
UNPACK   EQU   *
         UNPK  ANSWER,0(5,R1)     PUT DATA INTO AN AREA TO WORK ON
         TR    ANSWER(8),TRANTAB  TURN IT INTO READABLE DATA
         MVC   2(6,R10),ANSWER+2  MOVE TO PRINT AREA
         BR    R14                RETURN TO CALLER
         SPACE 3
PRINTIT  EQU   *
         PUT   RENTDCB,PRINT
         MVI   PRINT,C' '         CLEAR THE PRINT LINE
         MVC   PRINT+1(L'PRINT-1),PRINT
         BR    R10
         PRINT NOGEN
         SPACE 3
SYSPRINT DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,    ******
               DSORG=PS,MACRF=(PM)
DCBLEN   EQU   *-SYSPRINT
TRANTAB  EQU   *-240
         DC    C'0123456789ABCDEF'
         LTORG
ALPHAHED DC    C'FIXED AND MODIFIED LINK PACK MAP - ALPHABETICALLY BY N*
               AME'
HEADER2  DC   C' NAME       LOCAT    LNGTH    ENTRY  MAJOR LPDE        *
                    NAME       LOCAT    LNGTH    ENTRY   MAJOR LPDE'
NUMHED   DC   C'FIXED AND MODIFIED LINK PACK MAP - NUMERICALLY BY LOCAT*
               ION'
         SPACE 3
SAVEAREA DSECT
         DS    18F
R2SAVE   DS    F
ENTRIES  DS    F
PARM     DS    2F
CURRENT  DS    F
RENTDCB  DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,        **
               DSORG=PS,MACRF=(PM)
PRINT    DS    CL121
CURENTRY DS    0CL48
         DS    C
BNAME    DS    CL8
         DS    C
BLOCAT   DS    CL8
         DS    C
BLENGTH  DS    CL8
         DS    C
BEPA     DS    CL8
         DS    C
BMAJOR   DS    CL8
         DS    CL3             FILL OUT TO 48 BYTES
ANSWER   DS    CL9
OPENL    OPEN  SYSPRINT,MF=L
CLOSEL   CLOSE SYSPRINT,MF=L
TABLE    DS    12000F
         DS    0D
LENGTH   EQU   *-SAVEAREA
         DROP  R13
         SPACE 3
         IHAPSA
         CVT   DSECT=YES
         IHACDE
         IHAXTLST
*  CREATE CSECT TO SORT LIST INTO ALPHAMERIC ORDER  ON MODULE NAME
     QKSRT1 ALPHA,C,LENGTH=48,STRTKY=2,KYLGTH=8
*  CREATE CSECT TO SORT LIST INTO NUMERICAL ORDER ON ADDRESS
     QKSRT1 NUMER,C,LENGTH=48,STRTKY=12,KYLGTH=6
         END
