TRANSBDT $PROLOG R11,R12
         EJECT
*-------------------------------------------------------------------*
*                                                                   *
* NAME:  TRANSBDT                                                   *
*                                                                   *
* FUNCTION: TO PROCESS ALL CATALOGED DATASETS FOR A GIVEN           *
*        INDEX AND GENERATE MVS/BDT BDTBATCH TRANSACTIONS           *
*        TO TRANSFER THE DATASETS TO ANOTHER NODE.                  *
*                                                                   *
* RESTRICTIONS:                                                     *
*        ONLY  DSORG=PS AND PO DATASETS ARE PROCESSED.              *
*        IF A  DATASET IS OPEN OR OTHERWISE UNAVAILABLE THEN        *
*        IT WILL NOT HAVE A TRANSACTION GENERATED.                  *
*        ****  ONLY DASD DATASETS WILL  BE PROCESSED ****           *
*                                                                   *
*                                                                   *
* PARM:  A SINGLE PARM IS REQUIRED AND IT MUST BE A HIGH            *
*        LEVEL  INDEX.                                              *
*        OPTIONALLY IF *SELECT IS SPECIFIED THEN THE DATASETS       *
*        TO BE TRANSMITTED ARE CODED IN CONTROL CARDS IN FILE       *
*        BDTQIN.                                                    *
*                                                                   *
*                                                                   *
* CONTROL CARDS:  (FILE BDTQIN)                                     *
*              DATASET NAME STARTING IN COLUMN 1 (MUST BE CATALOGED)*
*                                                                   *
*                                                                   *
* CONTROL CARDS:  (FILE SYSIN)                                      *
*              NAME=JJJJJJJJ     (REQUIRED)                         *
*              NEWVOL=VVVVVV     (REQUIRED)                         *
*              TONODE=TTTTTTTT   (REQUIRED)                         *
*              FROMNODE=FFFFFFFF (REQUIRED)                         *
*              MIG=YES/NO/BOTH   (DEFAULT=NO)                       *
*              NEWUNIT=UUUUUUUU  (DEFAULT=SYSALLDA)                 *
*              SYSTEM=XXXXXXXX   (OPTIONAL - NO DEFAULT)            *
*                                                                   *
*                                                                   *
*              NAME DEFINES THE NAME TO BE ASSIGNED TO THE          *
*              TRANSACTION.                                         *
*                                                                   *
*              NEWVOL DEFINES THE OUTPUT DASD VOLSER                *
*              TO RECEIVE THE TRANSMITTED DATASET.                  *
*                                                                   *
*              NEWUNIT DEFINES THE OUTPUT UNIT DEVICE TYPE          *
*              DEFAULT IS SYSALLDA.                                 *
*                                                                   *
*              TONODE DEFINES THE RECEIVING MVS/BDT NODE.           *
*                                                                   *
*              FROMNODE DEFINE THE TRANSMISSION NODE (AND THE NODE  *
*              ON WHICH THIS PROGRAM IS EXECUTING).                 *
*                                                                   *
*              MIG DEFINES WHAT TO DO  WITH MIGRATED                *
*              DATASETS.                                            *
*              YES TELLS THE CODE TO PROCESS ONLY MIGRAT            *
*              DATASETS.                                            *
*              NO TELLS THE CODE NOT TO PROCESS MIGRAT              *
*              DATASETS.                                            *
*              BOTH TELLS THE CODE TO  PROCESS BOTH                 *
*              MIGRAT AND ONLINE DATASETS.                          *
*              (*** IGNORED IF PARM=*SELECT  ***)                   *
*                                                                   *
*              SYSTEM IS OPTIONAL AND DEFINES THE POLY-BDT TO       *
*              PROCESS THE TRANSACTION                              *
*                                                                   *
*                                                                   *
* JCL:   //STEP  EXEC PGM=TRANSBDT,PARM='INDEX'                     *
*        //BDTQ  DD   DSN= SEQUENTIAL DATASET FOR MVS/BDT           *
*        //SYSPRINT DD SYSOUT=*   REPORT                  *LBD 09/84*
*              TRANSACTIONS TO BE PASSED TO BDTBATCH                *
*        //SYSIN DD   *                                             *
*              ---  CONTROL CARDS  (ONE PER CARD IN COLUMN 1) ----  *
*                                                                   *
*                                                                   *
* ABENDS:      1                       NO PARM                      *
*              2                       INVALID CONTROL CARD         *
*              3                       NOT ALL REQUIRED CC'S FOUND  *
*              4                       MVS/BDT NOT ACTIVE           *
*             100                      ERROR IN TIOT SCAN           *
*                                                                   *
*-------------------------------------------------------------------*
* SOME OF THE DATASET DCB CALCULATION CODE HAS BEEN COPIED FROM     *
* THE STATS PROGRAM BY A. BRUCE LELAND FROM THE CBT MODS TAPE.      *
*-------------------------------------------------------------------*
* AUTHOR:      LIONEL DYCK                                          *
*              ROCKWELL INTERNATIONAL                               *
*              PO BOX 2515                                          *
*              2201 SEAL BEACH BLVD.                                *
*              SEAL BEACH, CALIF  90740                             *
*              MAIL CODE 110-SH28                                   *
*              PHONE (213) 594-1125                                 *
*              COMNET 374-1125                                      *
*-------------------------------------------------------------------*
         EJECT
         L     R1,0(R1)              * LOAD ADDR OF PARM
         LH    R2,0(R1)              * LOAD LENGTH OF PARM
         LTR   R2,R2                 * LENGTH OF ZERO
         BZ    NOPARM                * NO - BYPASS MOVE
         BCTR  R2,R0                 * SUBTRACT LENGTH BY 1
         EX    R2,MOVENDX            * EXECUTE THE MOVE
         B     START
MOVENDX  MVC   INDEX(0),2(R1)        * MOVE INDEX
NOPARM   EQU   *
         ABEND 1
START    DS    0H
         CLC   =C'*SELECT',INDEX
         BNE   EXT
         SETON SELECT
         OPEN  BDTQIN
EXT      DS    0H
         EXTRACT TIOTA,'S',FIELDS=TIOT,MF=(E,EXTRACT)
         OPEN  (SYSIN,,BDTQ,OUTPUT,SYSPRINT,OUTPUT)
         PUT   SYSPRINT,T1                                *LBD 09/84*
         PUT   SYSPRINT,T2                                *LBD 09/84*
READ     GET   SYSIN
         LR    R2,R1                   -> INPUT           *LBD 09/84*
         PUT   SYSPRINT,0(,R2)                            *LBD 09/84*
         LR    R1,R2                   REPOINT R1         *LBD 09/84*
         CLC   =C'NAME=',0(R1)
         BE    DNAME
         CLC   =C'NEWVOL=',0(R1)
         BE    DNVOL
         CLC   =C'NEWUNIT=',0(R1)
         BE    DNUNIT
         CLC   =C'TONODE=',0(R1)
         BE    DNNODE
         CLC   =C'FROMNODE=',0(R1)
         BE    DFNODE
         CLC   =C'MIG=',0(R1)
         BE    DOMIG
         CLC   =C'SYSTEM=',0(R1)
         BE    DOSY
         ABEND 2
DNAME    MVC   NAME,5(R1)              MOVE TRANSACTION NAME
         B     READ
DNVOL    MVC   NEWVOL,7(R1)            MOVE NEW VOLSER
         B     READ
DNUNIT   MVC   NEWUNIT,8(R1)           MOVE NEW UNIT TYPE
         B     READ
DNNODE   MVC   NEWNODE,7(R1)           MOVE TO NODE
         B     READ
DFNODE   MVC   BDT1LOC,9(R1)
         B     READ
DOSY     DS    0H
         MVC   SYOPT(12),=C'SY(        )'
         MVC   SYOPT+3(8),7(R1)        MOVE SYSTEM NAME
         B     READ
DOMIG    DS    0H
         CLC   =C'BOTH',4(R1)          DO MIGRATED D/S AND ONLINE
         BE    DOMALL                  NO
         CLC   =C'YES',4(R1)           DO MIGRATED D/S
         BNE   READ                    NO
         SETON MIG                     SET MIG FLAG
         B     READ
DOMALL   SETON MIGALL
         B     READ
ESYSIN   CLOSE SYSIN
         PUT   SYSPRINT,T4                                *LBD 09/84*
         CLI   NAME,C' '
         BE    ABEND3
         CLI   NEWVOL,C' '
         BE    ABEND3
         CLI   BDT1LOC,C' '
         BE    ABEND3
         CLI   NEWNODE,C' '
         BE    ABEND3
         B     DOIT
         SPACE 2
ABEND3   ABEND 3
         SPACE 2
DOIT     DS    0H
         IFON  SELECT,NOLOC
         LA    R1,PARMS
         L     R15,=V(LOCINDEX)
         BALR  R14,R15
         CH    R15,=H'08'              TAPE DEVICE ?
         BE    NODOIT                  YES - SKIP IT
         LTR   R15,R15                                    *LBD 09/84*
         BNZ   EXIT                                       *LBD 09/84*
         IFON  MIGALL,DOALLOC
         CLC   =C'MIGRAT',RVOL         MIGRATED ?
         BNE   DOALLOC                 NO - SKIP TEST
         IFOFF MIG,DOIT
         B     DOALLOC
NODOIT   DS    0H                                         *LBD 09/84*
         MVC   T5DSN,RDSN                                 *LBD 09/84*
         PUT   SYSPRINT,T5                                *LBD 09/84*
         B     DOIT                    SKIP THIS DSN      *LBD 09/84*
NOLOC    DS    0H
         GET   BDTQIN
         MVC   RDSN,0(R1)
         B     DOALLOC
EBDTQIN  DS    0H
         CLOSE BDTQIN
         B     EXIT
DOALLOC  DS    0H
         MVC   ODSN,RDSN
         MVC   BDT1DSN,RDSN            FROM DSN
         MVC   BDTTDSN,RDSN            TO   DSN
*--------------------------------------------------------------------*
*                                                                    *
*        ALLOC DATASET
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 2
         ALLOC DDNRET=DDNRET,DSN=OURDSN,ERROR=S99FAIL,DISP=SHR
         MVC   OURDDN,DDNRET+2
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   LOOK UP DDNAME IN TIOT, GET UCB INFORMATION, AND OBTAIN DSCB'S   *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
         L     R15,TIOTA
         LA    R15,TIOENTRY-TIOT(R15)
         USING TIOENTRY,R15
         XR    R14,R14
         SPACE
TIOLOOK  EQU   *
         CLC   TIOEDDNM,OURDDN
         BE    DDNHIT
         IC    R14,TIOELNGH
         LA    R15,0(R14,R15)
         LTR   R14,R14
         BP    TIOLOOK
         SPACE
         ABEND 100
         SPACE
DDNHIT   EQU   *
         ICM   R7,B'0111',TIOEFSRT
         USING UCBWRK,R7
         MVC   RVOL,UCBVOLI
         MVC   VOLSER,UCBVOLI
         MVC   CUU,UCBNAME
         MVC   DWD,OURDDN
         SPACE
         DEVTYPE DWD,DVTWKA,DEVTAB
         SPACE
         MVC   CAMLST,CAMSRCH
         EJECT
OBTAINF1 EQU   *
         LA    R15,ODSN
         ST    R15,CAMDSN
         LA    R15,VOLSER
         ST    R15,CAMSER
         LA    R15,OBTWKA
         ST    R15,CAMWKA
         XR    R0,R0
         SPACE
         OBTAIN CAMLST
         SPACE
         LTR   R15,R15
         BNZ   OBTNFAIL
         SPACE
         CLI   DS1NOEPV,3
         BNH   FORMAT
         SPACE
         LA    R15,DS1PTRDS
OBTAINF3 ST    R15,CAMDSN
         LA    R15,F3WKA
         ST    R15,CAMWKA
         MVC   CAMLST,CAMSEEK
         SPACE
         OBTAIN CAMLST
         SPACE
         LTR   R15,R15
         BNZ   OBTNFAIL
         SPACE
         CLI   DS3FMTID,C'3'
         LA    R15,DS2PTRDS
         BNE   OBTAINF3
         SPACE
         DROP  R15
         EJECT
FORMAT   EQU   *
         MVC   OUTPUT,MASK
         SPACE
*DS1SCAL EQU   DS1SCALO+1,3
         CVRT  SCAL
         CVRT  BLKL
         EJECT
         CVRT  LRECL
         CVRT  KEYL
         CVRT  RKP
         CVRT  NOEPV
         EJECT
RFAORM   LA    R15,FMTRECFM+L'FMTRECFM-1
         TM    DS1RECFM,B'00000110'
         BZ    RFT
         BCTR  R15,0
         TM    DS1RECFM,B'00000010'
         BZ    RFA
RFM      MVI   1(R15),C'M'
         B     RFT
RFA      MVI   1(R15),C'A'
RFT      TM    DS1RECFM,B'00100000'
         BZ    RFS
         MVI   0(R15),C'T'
         BCTR  R15,0
RFS      TM    DS1RECFM,B'00001000'
         BZ    RFB
         MVI   0(R15),C'S'
         BCTR  R15,0
RFB      TM    DS1RECFM,B'00010000'
         BZ    RFU
         MVI   0(R15),C'B'
         BCTR  R15,0
RFU      TM    DS1RECFM,B'11000000'
         BM    RFFORV
         BZ    UNITS
         MVI   0(R15),C'U'
         B     UNITS
RFFORV   TM    DS1RECFM,B'10000000'
         BO    RFF
         MVI   0(R15),C'V'
         B     UNITS
RFF      MVI   0(R15),C'F'
         EJECT
UNITS    XR    R15,R15
         IC    R15,DS1SCALO
         SRL   R15,6
         LA    R14,ALLCUNIT(R15)
         CLI   0(R14),C'A'
         BE    UNABS
         CLI   0(R14),C'B'
         BE    UNBLK
         CLI   0(R14),C'T'
         BE    UNTRK
*        ASSUME CYLINDER ALLOCATION
UNCYL    MVC   BDT3SP(3),=C'CYL'
         B     UNDONE
UNABS    MVC   BDT3SP(3),=C'ABS'
         B     FREE                    SKIP THIS AS CAN'T DO IT
UNBLK    MVC   BDT3SP(3),=C'TRK'       REDO AS BLOCK
         B     UNDONE
UNTRK    MVC   BDT3SP(3),=C'TRK'
UNDONE   DS    0H
         SPACE
         LA    R15,FMTDSORG+L'FMTDSORG-2
         TM    DS1DSORG+1,X'08'        VSAM DATASET ?
         BO    DSVSAM
         TM    DS1DSORG,1
         BZ    DODSORG
         MVI   1(R15),C'U'
         BCTR  R15,0
         B     DODSORG
         SPACE
DSVSAM   MVC   FMTDSORG+2(2),=C'VS'    SET AS VSAM
         B     FREE                    CAN'T DO VSAM
         SPACE 1
DODSORG  MVC   DWD(1),DS1DSORG
         NI    DWD,X'E2'
         TR    DWD(1),TRDSORG
         XR    R1,R1
         IC    R1,DWD
         LA    R14,DSORGMN(R1)
         MVC   0(2,R15),0(R14)
         MVC   BDT1DAP,=C'SEQ'
         MVC   BDT3DAP,=C'SEQ'
         CLC   FMTDSORG+2(2),=C'PO'
         BNE   NODIR                   NO - SKIP DIR COUNT
         MVC   BDT1DAP,=C'PDS'
         MVC   BDT3DAP,=C'PDS'
         EJECT
*----------------------------------------------------------
*
*        COUNT  USED DIRECTORY BLOCKS
*
*----------------------------------------------------------
         MVC   PDS+40(8),OURDDN        SET UP DDNAME
         OPEN  PDS
         USING DIR,R10
READDIR  GET   PDS
         LR    R10,R1
         LH    R9,0(R10)
         AR    R9,R10                  -> END OF DIR BLOCK
         LA    R10,2(R10)              -> PAST LENGTH
         AP    DIRACNT,=P'01'          ADD 1 TO ALLOC CNT
PLPS     CLI   DIRNAME,X'FF'           LAST USED BLOCK ?
         BE    ENDUSE                  YES -
         TM    DIRFLAG,DIRALIAS        ALIAS ??
         BZ    NOTALIAS                NO
         AP    ALIASCNT,=P'01'
NOTALIAS DS    0H
         AP    MEMCNT,=P'01'
         SR    R1,R1
         NI    DIRFLAG,X'1F'           TURN OFF MISC BITS
         IC    R1,DIRFLAG
         LA    R1,6(R1)                ADD 6 HALF WORDS
         SLA   R1,1                    MULT BY 2
         AR    R10,R1
         CR    R10,R9
         BL    PLPS
         AP    DIRCNT,=P'01'           INCR COUNT BY 1
         B     READDIR                 AND READ NEXT BLOCK
ENDUSE   AP    DIRACNT,=P'01'          ADD 1 TO ALLOC CNT
         GET   PDS
         B     ENDUSE
EOFPDS   CLOSE PDS                     DONE - CLOSE IT
         AP    DIRCNT,=P'01'           FOR LAST BLOCK
         SP    DIRACNT,=P'01'          -1 TO CORRECT BUG
         SPACE
NODIR    DS    0H
         XR    R15,R15
         ST    R15,BTRALC
         ICM   R15,B'0001',DS1NOEPV
         BZ    EXTCVRT
         MVC   DS3FMTID(9*10),DS3ADEXT
         MVC   DS3EXTNT-3*10(3*10),DS1EXT1
         LA    R14,DS3EXTNT-3*10
         EJECT
         XC    DS1ALCYL,DS1ALCYL
         XC    DS1USCYL,DS1USCYL
EXTENTS  EQU   *
         USING EXTENT,R14
         CLI   EXTTYPE,0
         BNH   EXTLOOP
* DEVTPC EQU   DVTWKA+10
         LH    R1,EXTHICC              LOAD HI CYL
         SH    R1,EXTLOCC              SUB LOC CYL
         LA    R1,1(R1)                ADD FOR CURRENT CYL
CYLOK    A     R1,DS1ALCYL             ADD ALLOC CYL
         ST    R1,DS1ALCYL             AND SAVE IT
         LH    R1,EXTLOCC
         MH    R1,DEVTPC
         AH    R1,EXTLOHH
         LH    R0,EXTHICC
         MH    R0,DEVTPC
         AH    R0,EXTHIHH
         BCTR  R1,0
         SR    R0,R1
         A     R0,BTRALC
         ST    R0,BTRALC
         SPACE
EXTLOOP  LA    R14,EXTNEXT
         BCT   R15,EXTENTS
         SPACE
EXTCVRT  EQU   *
*DS1TRALC EQU  BTRALC,4
         CVRT  TRALC
*DS1TRUSE EQU  DS1LSTAR,2
         ICM   R15,B'11',DS1LSTAR
         CLI   DS1LSTAR+2,0                                       82089
         BNH   *+L'*+4
         LA    R15,1(R15)
         STCM  R15,B'11',DS1LSTAR
         CVRT  TRUSE
         LR    R3,R15                  LOAD USED TRACKS
         SR    R2,R2                   ZERO R2
         LH    R1,DEVTPC               LOAD TRKS/CYL
         DR    R2,R1                   DIVIDE
         LTR   R2,R2                   ANY REMAINDER
         BZ    NOLEFT                  NO
         LA    R3,1(R3)                YES - ADD 1 CYL
NOLEFT   DS    0H
         ST    R3,DS1USCYL             SAVE IT
         L     R1,DS1ALCYL             LOAD ALLOC CYL
         LTR   R1,R1                   ANY CYL ALLOC ?
         BNZ   DOCYL                   YES
         LH    R1,=H'01'               SET AS MIN 1
DOCYL    ST    R1,DS1ALCYL             RESAVE IT
         CVRT  ALCYL
         CVRT  USCYL
         MVC   BDT3PRIM,FMTTRALC+2
         MVC   BDT3SEC,FMTSCAL+2
         CLC   BDT3SP,=C'TRK'
         BE    PUTIT
         MVC   BDT3PRIM,FMTALCYL+2
PUTIT    DS    0H
         TR    OUTPUT(FMTADIR-FMTTRALC),TREDIT
         UNPK  BDT4DIR,DIRACNT
         OI    BDT4DIR+2,X'F0'
         ZAP   DIRCNT,=P'0'
         ZAP   DIRACNT,=P'0'
         MVC   BDT3REC(4),FMTRECFM+2
         MVC   BDT3LR(5),FMTLRECL+1
         MVC   BDT3BLK(5),FMTBLKL+1
         PUT   BDTQ,BDT1
         PUT   BDTQ,BDTF
         PUT   BDTQ,BDT2
         PUT   BDTQ,BDTTO
         PUT   BDTQ,BDT3
         CLC   BDT1DAP,=C'PDS'
         BNE   PUTEOT
         PUT   BDTQ,BDT4
PUTEOT   PUT   BDTQ,BDTEOT
*-------------------------------------------------------------------*
*                                                                   *
*   WHEN OUTPUT HAS BEEN GENERATED, FREE DATASET                    *
*                                                                   *
*-------------------------------------------------------------------*
         SPACE 2
FREE     EQU   *
         FREE  DDN=OURDDNA,ERROR=S99FAIL
         B     DONE
         EJECT
*-------------------------------------------------------------------*
*                                                                   *
*   ABNORMAL SERVICE ROUTINE                                        *
*                                                                   *
*-------------------------------------------------------------------*
         SPACE
S99FAIL  S99FAIL
         MVC   T6DSN,RDSN                                 *LBD 09/84*
         PUT   SYSPRINT,T6                                *LBD 09/84*
         EJECT
OBTNFAIL EQU   *
         MVC   T7DSN,RDSN                                 *LBD 09/84*
         PUT   SYSPRINT,T7                                *LBD 09/84*
         B     DONE
DONE     DS    0H
         B     DOIT
EXIT     DS    0H
         CLOSE (BDTQ,,SYSPRINT)
         $EPILOG 0
         EJECT
         LTORG
         BITSW MIG,MIGALL,SELECT
T1       DC    CL80'1 MVS/BDT BULK TRANSMISSION PROGRAM VERSION 1'
T3       DC    CL80'-CONTROL CARDS:'                      *LBD 09/84*
T4       DC    CL80' '                                    *LBD 09/84*
T5       DC    CL80' '                                    *LBD 09/84*
         ORG   T5                                         *LBD 09/84*
         DC    C' TAPE DATASET: '                         *LBD 09/84*
T5DSN    DC    CL44' '                                    *LBD 09/84*
         DC    C' NOT ACCEPTABLE'                         *LBD 09/84*
         ORG   ,                                          *LBD 09/84*
T6       DC    CL80' '                                    *LBD 09/84*
         ORG   T6+1                                       *LBD 09/84*
         DC    C'ALLOCATION ERROR DSN:  '                 *LBD 09/84*
T6DSN    DC    CL44' '                                    *LBD 09/84*
         ORG   ,                                          *LBD 09/84*
T7       DC    CL80' '                                    *LBD 09/84*
         ORG   T7                                         *LBD 09/84*
         DC    C' OBTAIN FAILURE  DSN:  '                 *LBD 09/84*
T7DSN    DC    CL44' '                                    *LBD 09/84*
         ORG   ,                                          *LBD 09/84*
T2       DC    CL80' '                                    *LBD 09/84*
         ORG   T2                                         *LBD 09/84*
         DC    C'0'                    DOUBLE SPACE       *LBD 09/84*
         DC    C' PARM='                                  *LBD 09/84*
INDEX    DC    CL44' '
         ORG   ,                                          *LBD 09/84*
PARMS    DC    A(INDEX)
         DC    A(RDSN,RVOL,RDATA)
         ORG   *-4
         DC    X'80'
         ORG   ,
         EJECT
BDTQ     DCB   DSORG=PS,MACRF=PM,DDNAME=BDTQ,RECFM=FB,                 X
               LRECL=80,BLKSIZE=6160
         EJECT
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=ESYSIN
         EJECT
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=80,             X
               RECFM=FBA
         EJECT
BDTQIN   DCB   DSORG=PS,MACRF=GL,DDNAME=BDTQIN,EODAD=EBDTQIN
         EJECT
PDS      DCB   DSORG=PS,MACRF=GL,DDNAME=NULLDDN,LRECL=256,             X
               BLKSIZE=256,RECFM=F,EODAD=EOFPDS
         EJECT
BDT1     DC    CL80' '
         ORG   BDT1
         DC    C'Q JOBNAME('
NAME     DC    CL8' ',C')'
         DC    C' FROM SHR DAP('
BDT1DAP  DC    CL3' ',C') LOC('
BDT1LOC  DC    CL8' ',C') '
SYOPT    DC    CL12' '
         ORG   ,
         SPACE 1
BDTF     DC    CL80' '
         ORG   BDTF
         DC    C'DSN('
BDT1DSN  DC    CL44' ',C')'
         ORG   ,
         SPACE 1
BDT2     DC    CL80' '
         ORG   BDT2
         DC    C'TO LOC('
NEWNODE  DC    CL8' ',C') NEW DISP(CATLG) UNIT('
NEWUNIT  DC    CL8'SYSALLDA',C') VOLUME('
NEWVOL   DC    CL6' ',C') RLSE'
         ORG   ,
         SPACE 1
BDTTO    DC    CL80' '
         ORG   BDTTO
         DC    C'DSN('
BDTTDSN  DC    CL44' ',C')'
         ORG   ,
         SPACE 1
BDT3     DC    CL80' '
         ORG   BDT3
         DC    C'RECFM('
BDT3REC  DC    CL4' ',C') LRECL('
BDT3LR   DC    CL5' ',C') BLKSIZE('
BDT3BLK  DC    CL5' ',C') DAP('
BDT3DAP  DC    CL3' ',C')  '
BDT3SP   DC    CL3' '
         DC    C' SPACE('
BDT3PRIM DC    CL4' ',C','
BDT3SEC  DC    CL4' ',C') '
         ORG   ,
         SPACE 1
BDT4     DC    CL80' '
         ORG   BDT4
         DC    C'DIR('
BDT4DIR  DC    CL3' ',C')'
         ORG   ,
         SPACE 1
BDTEOT   DC    CL80'/EOT'
         SPACE 1
         EJECT
TRDSORG  DC    XL256'00'
         ORG   TRDSORG+X'80'
         DC    AL1(2)
         ORG   TRDSORG+X'40'
         DC    AL1(4)
         ORG   TRDSORG+X'20'
         DC    AL1(6)
         ORG   TRDSORG+X'02'
         DC    AL1(8)
         ORG   TRDSORG+256
DSORGMN  DC    C'  ISPSDAPO'       DATA SET ORGANIZATIONS
ALLCUNIT DC    C'ABTC'             ALLOCATION UNIT MNEMONICS
CAMSRCH  CAMLST      SEARCH,*-*,*-*,*-*
CAMSEEK  CAMLST      SEEK,*-*,*-*,*-*
DIRCNT   DC    PL2'0'                  COUNT OF USED DIR
DIRACNT  DC    PL2'0'                  ALLOC DIR BLOCKS
MEMCNT   DC    PL4'0'                  MEMBER COUNT
ALIASCNT DC    PL4'0'                  ALIAS COUNT
OURDDNA  DC    A(OURDDN),Y(8)
OURDDN   DC    CL8' '
OURDSN   DC    A(ODSN),Y(44)
ODSN     DC    CL44' '
         EJECT
TIOTA    DS    A
ANS      DS    A
ECB      DS    A
DWD      DS    D
OBTWKA   DS    0D,XL148
F3WKA    DS    0D,XL148
DVTWKA   DS    5F
FAIL     DS    4F
BTRALC   DS    F
CAMLST   DS    F
CAMDSN   DS    A
CAMSER   DS    A
CAMWKA   DS    A
VOLSER   DS    CL6
CUU      DS    CL3
         DYNSPACE ,
         EJECT
EXTRACT  EXTRACT  TIOTA,FIELDS=TIOT,MF=L
         EJECT
         SPACE
OUTLAST  DS    A
OUTLLEN  DS    2H
TREDIT   DC    256AL1(*-TREDIT)
         ORG   TREDIT+X'20'
         DC    X'4040'
         ORG   TREDIT+256
MASK     DC    X'F02020202120F02020202120202120404040'
*                FMTTRALC    FMTTRUSE    NOEPV  FMTUN
         DC    X'F02020202120404040404040402020202120'
*                SCAL         RECFM      BLKL
         DC    X'F02020202120F020202021204020212040202120'
*                LRECL       KEYL         DSORG  RKP
         DC    X'F02020202120F02020202120'
*                CREDT       REFD
         DC    X'F02020202021F02020202021'
*                ALCYL       USCYL
MASKEND  EQU   *
FMTDATA  DC    AL2(FMTDATAL),AL2(0)
RDSN     DC    CL44' '
RVOL     DC    CL6' '
OUTPUT   DS    0CL(MASKEND-MASK)
FMTTRALC DS    ZL6
FMTTRUSE DS    ZL6
FMTNOEPV DS    ZL3
FMTUN    DS    CL3
FMTSCAL  DS    ZL6
FMTRECFM DS    CL6
FMTBLKL  DS    ZL6
FMTLRECL DS    ZL6
FMTKEYL  DS    ZL6
FMTDSORG DS    CL4
FMTRKP   DS    ZL4
FMTCREDT DS    ZL6
FMTREFD  DS    ZL6
FMTALCYL DS    ZL6
FMTUSCYL DS    ZL6
FMTDIR   DS    F
FMTADIR  DS    F
FMTDATAL EQU   *-FMTDATA
FMTWORK  DS    ZL8
DS1ALCYL DS    F
DS1USCYL DS    F
         EJECT
         ORG   OBTWKA-44
         IECSDSL1 (1)
         SPACE
         ORG   F3WKA
         SPACE
         IECSDSL1 (3)
         SPACE
         ORG   F3WKA
         SPACE
         IECSDSL1 (2)
         SPACE
         ORG
         SPACE
DS1SCAL  EQU   DS1SCALO+1,3
DEVTPC   EQU   DVTWKA+10
DS1TRALC EQU   BTRALC,4
DS1TRUSE EQU   DS1LSTAR,2
         SPACE 2
RDATA    DC    4096X'0'                WORK AREA
         SPACE 2
EXTENT   DSECT
         SPACE
EXTTYPE  DS    BL1
EXTSEQ   DS    XL1
EXTLOCC  DS    HL2
EXTLOHH  DS    HL2
EXTHICC  DS    HL2
EXTHIHH  DS    HL2
         SPACE
EXTNEXT  EQU   *
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
UCBWRK   DSECT
         IEFUCBOB
         EJECT
DIR      DSECT
DIRNAME  DS    CL8
DIRTTR   DS    XL3
DIRFLAG  DS    X
DIRALIAS EQU   X'80'
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         END
***      CODE  FROM LAMVSUG
*
LOC      TITLE 'LOCINDEX - SUPERLOCATE ROUTINE FOR MVS '    *HMD 04/82*
*        LOCINDEX SUBROUTINE REPLACEMENT FOR MVS
*        THIS ROUTINE SUPPORTS 'LEVEL' OPTIONS OF THE 'LISTS' COMMAND
*             AND IS USED BY OTHER YCC VARIATIONS OF THAT PROGRAM
*        FOLLOWING IS ORIGINAL LOCINDEX DESCRIPTION:
*.....................................................................*
*.                                                                   .*
*.   LOCINDEX                                                        .*
*.                                                                   .*
*.....................................................................*
*.                                                                   .*
*.   1.0  GENERAL DESCRIPTION                                        .*
*.                                                                   .*
*.   THIS SUBROUTINE IS USED TO RETURN DSNAMES AND THE VOLSER        .*
*.   FOR A SPECIFIED INDEX STRUCTURE.  THE INDEX STRUCTURE CAN BE    .*
*.   SPECIFIED AS SEVERAL HIGH-LEVEL QUALIFIERS OR IT CAN BE A       .*
*.   DSNAME CONTAINING ONE EMBEDDED ASTERISK NOT AS THE HIGH-LEVEL   .*
*.   QUALIFIER.                                                      .*
*.                                                                   .*
*.....................................................................*
*.                                                                   .*
*.....................................................................*
*.                                                                   .*
*.   2.0  PARAMETER LIST AND RETURN CODE DESCRIPTION                 .*
*.                                                                   .*
*.   THE PARAMETER LIST IS A FOUR OR FIVE WORD LIST CONTAINING THE   .*
*.   FOLLOWING:                                                      .*
*.                                                                   .*
*.    WORD         DESCRIPTION                                       .*
*.                                                                   .*
*.      1          ADDRESS OF THE 44-BYTE FIELD CONTAINING THE       .*
*.                 INDEX STRUCTURE.                                  .*
*.      2          ADDRESS OF THE 44-BYTE FIELD INTO WHICH           .*
*.                 LOCINDEX WILL PLACE THE DSNAME.                   .*
*.      3          ADDRESS OF THE 6-BYTE FIELD INTO WHICH            .*
*.                 LOCINDEX WILL PLACE THE VOLSER OF THE DATASET.    .*
*.      4          ADDRESS OF A 4K WORK AREA TO BE USED BY           .*
*.                 LOCINDEX FOR STORING CATALOG BLOCKS.              .*
*.      5          OPTIONAL FIELD FOR THE ADDRESS OF A FULLWORD      .*
*.                 OF STORAGE ON AN INTEGRAL BOUNDARY INTO WHICH     .*
*.                 LOCINDEX WILL STORE THE RETURN CODE.              .*
*.                                                                   .*
*.   THE HIGH ORDER BIT OF THE LAST WORD OF THE PARAMETER LIST       .*
*.   MUST BE SET ON.                                                 .*
*.                                                                   .*
*.    RETURN CODE  MEANING                                           .*
*.                                                                   .*
*.         0       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .*
*.                 A DISK VOLUME.                                    .*
*.         4       THE INDEX STRUCTURE WAS NOT FOUND.                .*
*.         8       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .*
*.                 A TAPE VOLUME.                                    .*
*.        12       A DSNAME WAS FOUND BUT IT RESIDES ON MULTIPLE     .*
*.                 VOLUMES.                                          .*
*.        16       THERE ARE NO MORE DATASETS FOR THIS INDEX         .*
*.                 STRUCTURE.                                        .*
*.        20       AN I/O ERROR WAS DETECTED ON THE CATALOG.         .*
*.        24       ERROR WAS DETECTED IN SVC26 WHOSE CAUSE COULD     .*
*.                 NOT BE DETERMINED. NOTIFY SYSTEMS PROGRAMMER.     .*
*.....................................................................*
*
*        THE PRIMARY DIFFERENCES BETWEEN THE MVS VERSION
*        AND THE OS VERSION ARE:
*              1) THE PART ABOVE THE ASTERISK IS PASSED TO VSAM
*                 GENERIC LOCATE AND WORKS HOWEVER GENERIC LOCATE
*                 LOCATE WORKS. ONLY NON-VSAM DATASETS ARE PASSED
*                 BACK TO THE CALLER.
*              2) THE CHARACTERS BELOW THE ASTERISK MUST APPEAR
*                 IN THE DATASET NAME ANYWHERE AFTER THE SEARCH
*                 KEY CHARACTERS. THEY MAY CONTAIN LEADING
*                 AND TRAILING PARTIAL INDEX LEVELS.
*              3) THE AMOUNT OF STORAGE REQUIRED FOR A VSAM GENERIC
*                 LOCATE IS MUCH MORE THAN THE 4K AREA PROVIDED BY
*                 THE OS CALLER. A 64K AREA IS GETMAINED AND ITS
*                 ADDRESS IS STORED IN THE FIRST WORK OF THE 4K
*                 CALLER WORK AREA. IT IS FREEMAINED WHEN THE
*                 RETURN CODE OF 16 SIGNALS THE END OF DATASETS
*                 UNDER THIS INDEX.
*              5) THE 265 BYTE CAMLIST WORK AREA IS PUT IN THE
*                 CALLER PROVIDED WORK AREA AT OFFSET 4. THIS
*                 ALLOWS ACCESS TO THE COMPLETE VOLUME LIST.
         EJECT
LOCINDEX CSECT
         USING *,15
         SAVE  (14,12),,*
         GETMAIN R,LV=LSECT
         ST    R13,4(R1)
         ST    R1,8(13)
         LR    R12,R13
         LR    R13,R1
         L     R1,24(R12)
         BALR  R12,0
         USING *,12
         USING DSASECT,R13
         ST    R1,INPARM
         L     R10,12(R1)
         USING WORKSECT,R10
         L     R2,0(R1)
         CLC   OINDEX,0(R2)   SAME INDEX STRUCTURE AS LAST CALL?
         BE    CAMLOC         GO GET NEXT DATASET
         MVC   OINDEX,0(R2)
         EJECT
BLDKEY   DS    0H
*        THIS BLOCK ANALIZES THE NEW INDEX STRUCTURE INTO COMPONENTS
*        IT CONSTRUCTS A VSAM CATALOG GENERIC SEARCH KEY AND AN
*        OPTIONAL LOWER LEVEL QUALIFIER VERIFICATION STRING
*        ONE ASTERISK IS ALLOWED ANYWHERE BELOW THE USERID.
*        IT MAY REPRESENT ALL OR PART OF AN 'INDEX LEVEL'
*        EXITS: NORMAL TO 'GENLOC'
*               TO 'ERROR4' IF A SYSTAX ERROR OCCURS IN INDEX STRUCTURE
         SR    R1,R1
         SR    R2,R2          CLEAR FOR TRT INSTRUCTION
         MVI   TRTAB,0
         MVC   TRTAB+1(255),TRTAB
         MVI   TRTAB+C' ',4
         MVI   TRTAB+C'*',8
         MVI   TRTAB+C'.',12
         MVC   KEY,OINDEX     COPY INDEX INPUT
         TRT   KEY,TRTAB
         BZ    ERROR4         MUST BE A BLANK IN 44 CHARS
         B     *(R2)
         B     USERID         C' ' MUST BE A USERID
         B     ERROR4         C'*' ASTERISK MUST FOLLOW PERIOD
         B     COMPLEX        C'.' MUST DO FULL ANALYSIS OF STRUCTURE
         EJECT
USERID   DS    0H
*        THIS BLOCK BUILDS SEARCH KEY FOR USERID. MUST BE <9 CHARACTERS
*        AND WE ADD A PERIOD TO IT TO INDICATE TO GENERIC LOCATE
*        THAT WE ARE INTERESTED IN THE DATASETS UNDER THE NAME AND
*        NOT THE ALIAS RECORD (CVOL POINTER) OF THE NAME ITSELF.
         MVI   0(R1),C'.'
         LA    R3,KEY
         SR    R1,R3
         CH    R1,=H'8'
         BH    ERROR4
         LA    R1,1(R1)
         STC   R1,NAME        STORE KEY LENGTH
         MVI   LREST,USERIDF  USERID ONLY                   *HMD 12/79*
         B     GENLOC         GET ALL LEVELS                *HMD 12/79*
* END OF USERID
         EJECT
COMPLEX  DS    0H
*        NOW WE SEARCH FOR AN IMBEDDED ASTERISK IN INDEX STRUCTURE
*        CHARACTERS ABOVE IT ARE USED AS THE GENERIC KEY.
*        CHARACTERS AFTER IT ARE USED AS THE LOWER LEVEL QUALIFIERS.
         MVI   TRTAB+C'.',0   NO LONGER INTERESTED IN PERIODS
         TRT   KEY,TRTAB
         BZ    ERROR4
         B     *(R2)
         B     ONEPART        NO ASTERISK
         B     TWOPART
         SPACE 2
ONEPART  MVI   LREST,USERIDF       MOVE IN USERID FLAG      *HMD 12/79*
         LA    R3,KEY
         SR    R1,R3
         STH   R1,LKEY
         STC   R1,NAME
         B     GENLOC
         SPACE 2
TWOPART  DS    0H
*        THIS BLOCK HANDLES THE CASE WHERE THERE IS AN EMBEDDED
*        ASTERISK IN THE INDEX LEVEL. THE CHARACTERS BELOW THE
*        ASTERISK ARE MOVED TO 'REST'. THE CHARACTERS FROM THE
*        ASTERISK ON ARE BLANKED IN 'KEY'. THE LENGTH OF THE
*        NON BLANK PART OF 'REST' LESS ONE IS SAVED IN 'LREST'
*        FOR USE IN THE LATER CLC INSTRUCTION. THE LENGTH OF
*        THE KEY IS SAVED IN 'NAME' FOR THE GENERIC LOCATE AND
*        IN 'LKEY' FOR AN INDICATION OF HOW MANY CHARS TO
*        SKIP BEFORE LOOKING IN A DSN FOR A MATCH TO 'REST'.
         LA    R3,KEY+42
         SR    R3,R1         GET LENGTH OF KEY ABOVE ASTERISK
         MVC   REST,=CL44' ' INITIALIZE REST
         EX    R3,MOVREST    MOVE PART BELOW ASTERISK
         LA    R3,1(R3)
         EX    R3,BLNKEY     BLANK KEY FROM ASTERISK ON
         SH    R3,=H'43'
         LPR   R3,R3         GET CHARS ABOVE ASTERISK
         STH   R3,LKEY
         STC   R3,NAME
TESTXX   TRT   REST,TRTAB    FIND NON-BLANK LENGTH OF REST
         B     *(R2)
         B     LENRST
         B     ERROR4        SORRY, ONLY ONE * PER CUSTOMER
LENRST   LA    R3,REST+1     CALCULATE LENGTH FROM ADDRESS
         SR    R1,R3            OF FIRST BLANK
         BP    STREST                                       *HMD 12/79*
         MVI   LREST,ASTERF  ASTERISK IN LAST LEVEL         *HMD 12/79*
         B     GENLOC        DO GENERIC LOCATE              *HMD 12/79*
STREST   DS    0H                                           *HMD 12/79*
         STH   R1,LREST
         B     GENLOC
MOVREST  MVC   REST(0),1(R1)
BLNKEY   MVC   0(0,R1),=CL44' '
* END OF TWOPART
* END OF COMPLEX
* END OF BLDKEY
         EJECT
GENLOC   DS    0H
*        THIS BLOCK ISSUES A VSAM GENERIC LOCATE TO BUILD AN IN-CORE
*        LIST OF DATASETS THAT BEGIN WITH THE SEARCH KEY
*        THERE IS NO GOOD DOCUMENTATION ON THE GENERIC
*        LOCATE IN THE LITERATURE. SEE THE CATALOG PLM FOR
*        WHAT LITTLE THERE IS. THE FORM BELOW WAS INFERRED
*        FROM SOME FICHE AND BY INTERCEPTING SVC 26 WITH DSS.
         MVC   GENFLAG,=X'05201100'
         XC    GENX1,GENX1
         XC    GENX2,GENX2
         LA    R1,NAME
         ST    R1,GENNAME
         GETMAIN R,LV=X'FFFF'      GET 65535 BYTES OF MAIN  *HMD 11/79*
         ST    R1,GETADDR
         ST    R1,GENWORK
         MVC   0(4,R1),=X'FFFF0004'                         *HMD 02/80*
         LA    R1,GENPARM
         SVC   26
         LTR   R15,R15
         BZ    SUPEROK
         CH    R15,=H'44'     OUT OF SPACE?                 *HMD 11/79*
         BE    SUPEROK        JUST RETURN WHAT'S THERE      *HMD 11/79*
         B     ERROR24        INDICATE ERROR CONDITION      *HMD 11/79*
SUPEROK  L     R1,GETADDR     GET VSAM CATLG RETURN AREA
         LA    R1,0(R1)       CLEAR HIGH BYTE
         SR    R2,R2          CLEAR FOR ICM
         ICM   R2,3,2(R1)     GET NUMBER BYTES USED
         AR    R2,R1          ADD START ADDR
         ST    R2,LAST        SAVE LAST BYTE ADDR
         LA    R1,49(R1)      SKIP 4 BYTE PREFIX AND FIRST 45 BYTE ENTR
         ST    R1,NEXT        SAVE ADDR OF FIRST DSN ENTRY
* END OF GENLOC
         EJECT
CAMLOC   DS    0H
*        NOW DO A REGULAR CAMLIST NAME LOCATE FOR THE NEXT NON-VSAM
*        DATASET IN THE INCORE LIST
         XC    CAMLST(16),CAMLST
         LA    R1,KEY
         ST    R1,CAMLST+4
         LA    R1,VOLCNT
         ST    R1,CAMLST+12
         L     R1,NEXT
TEST     C     R1,LAST
         BNL   RET16          NO MORE DATASETS IN LIST
         CLI   0(R1),C'A'     IS IT NON-VSAM
         BE    S1
NOGO     LA    R1,45(R1)
         B     TEST
S1       TM    LREST,X'80'    IS THERE A LOWER QUALIFIER
         BO    S2             NO, SO GO LOCATE
         EJECT
TESTQUAL DS    0H
*        THIS CODE LOOKS FOR THE CHARACTER STRING BELOW THE
*        ASTERISK IN THE INDEX SEARCH KEY. THIS STRING MUST
*        BE SOMEWHERE IN THE DATASET NAME BELOW THE KEY OR
*        THE NAME IS REJECTED
         LA    R2,1(R1)
         AH    R2,LKEY        SKIP GENERIC KEY CHARS
         TM    LREST,ASTERF   ASTERISK IN LAST LEVEL?       *HMD 12/79*
         BO    LOOK48         GET LAST LEVEL ONLY           *HMD 12/79*
         LH    R3,LREST       GET # CHARS-1 IN REST
         LA    R4,44
         SR    R4,R3
         SH    R4,LKEY        R4=# CHARS BELOW KEY + 1
COMP     EX    R3,COMPAR
         BE    S2
         LA    R2,1(R2)
         BCT   R4,COMP
         B     NOGO
COMPAR   CLC   REST(0),0(R2)
TRTREST  TRT   0(0,R2),TRTAB         FOR DOT SEARCH         *HMD 12/79*
LOOK48   DS    0H                                           *HMD 12/79*
         MVI   TRTAB+C'.',X'01'      RESTORE DOT            *HMD 12/79*
         MVI   TRTAB+C' ',X'00'      REMOVE  SPACE          *HMD 12/79*
         MVI   TRTAB+C'*',X'00'      REMOVE  ASTERISK       *HMD 12/79*
         LA    R3,8                  LENGTH TO SCAN         *HMD 12/79*
         STM   R1,R2,SAVE12          SAVE REGISTERS OVER TRT*HMD 12/79*
         EX    R3,TRTREST            LOOK FOR DOT '.'       *HMD 12/79*
         LM    R1,R2,SAVE12          RESTORE REGISTERS      *HMD 12/79*
         BZ    S2                    THIS IS OK             *HMD 12/79*
         B     NOGO                  FORGET THIS ONE        *HMD 12/79*
* END OF TESTQUAL
         EJECT
S2       DS    0H
*        NOW TO ISSUE NORMAL LOCATE BY NAME AND RETURN INFORMATION
*        ACCORDING TO DESCRIPTION OF PARAMETERS IN LEADING DOCUMENT
         MVC   KEY,1(R1)      COPY DSN
         LA    R1,45(R1)      PT TO NXT DSN
         ST    R1,NEXT        SAVE FOR NXT TIME
         LA    R1,CAMLST
         SVC   26             LOCATE BY NAME
         L     R2,INPARM      NOW GET PASSED PARM LIST
         LM    R2,R3,4(R2)    PICK UP 2ND & 3RD USER PARMS
         MVC   0(44,R2),KEY   SAVE DSN
         MVC   0(6,R3),SER    SAVE VOL
         TM    DEVT+2,X'20'   IS THIS DISK
         BZ    ERROR8         NO, PASS 8 RETURN CODE
         CLI   VOLCNT+1,1     IS IT MULTI-VOL
         BNE   ERROR12        YES, PASS 12 RETURN CODE
* END OF CAMLOC
         EJECT
*VARIOUS RETURNS
RETN     SR    R15,R15
         B     RC
ERROR4   LA    R15,4
         B     RC
ERROR8   LA    R15,8
         B     RC
ERROR12  LA    R15,12
         B     RC
RET16    FREEMAIN R,LV=X'FFFF',A=GETADDR
         LA    R15,16
         B     RC
ERROR24  FREEMAIN R,LV=X'FFFF',A=GETADDR                    *HMD 04/82*
         LA    R15,24                                       *HMD 04/82*
         B     RC                                           *HMD 04/82*
ERROR20  LA    R15,20
RC       L     R1,INPARM
         TM    12(R1),X'80'
         BO    EXIT
         L     R1,16(R1)
         ST    R15,0(R1)
EXIT     L     R13,4(R13)
         ST    R15,16(R13)
         L     R1,8(R13)
         FREEMAIN R,LV=LSECT,A=(1)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
DSASECT  DSECT
         DS    18A
GENPARM  DS    0F            GENERIC LOCATE PARM AREA
GENFLAG  DS    F
GENNAME  DS    A
GENX1    DS    A
GENWORK  DS    A
GENX2    DS    3A
KEYLEN   DS    0H
         DS    X
NAME     DS    X
KEY      DS    CL44
INPARM   DS    A             SAVE R1 UPON ENTRY TO LOCINDEX
CAMLST   DS    4A
         DS    0D
LSECT    EQU   *-DSASECT
         EJECT
GETSECT  DSECT               GETMAINED VSAM WORK AREA
GETLEN   DS    H             LENGT OF AREA
GETUSED  DS    H             AMOUNT ALLOCATED CURRENTLY TO DATA
GETENTY  DS    0CL45         FIRST ELEMENT OF DSN ARRAY
GETTYPE  DS    C             TYPE FLAG ('A'=NONVSAM)
GETNAME  DS    CL44          DSN
         EJECT
WORKSECT DSECT               WORK AREA PASSED AS PARM
GETADDR  DS    A             ADDRESS OF GETMAINED VSAM WORK AREA
TRTAB    DS    CL256                                        *HMD 12/79*
         DS    0D            ALIGNMENT                      *HMD 12/79*
VOLCNT   DS    H
DEVT     DS    XL4
SER      DS    CL6
SEQ      DS    H
         DS    CL251
OINDEX   DS    CL44          PREVIOUS VALUE OF FIRST PARM
REST     DS    CL44          LOW QUALIFIER COMPARE STRING
NEXT     DS    A             ADDRESS OF NEXT DSN IN INCORE TABLE
LAST     DS    A             ADDRESS OF BYTE AFTER END OF DSNLIST
LKEY     DS    H             LENGTH OF GENERIC KEY
SAVE12   DS    2F            SAVE AREA OVER TRT INSTR       *HMD 12/79*
NOREST   DS    0B            FLAG IF 'REST' IS EMPTY
LREST    DS    H             LENGTH OF REST
USERIDF  EQU   X'80'         USERID FLAG                    *HMD 12/79*
ASTERF   EQU   X'40'         LAST LEVEL ONLY INDICATOR      *HMD 12/79*
* END OF WORKSECT DSECT                                     *HMD 11/79*
         EJECT                                              *HMD 11/79*
LOCINDEX CSECT               PLACE IN THIS CSECT            *HMD 11/79*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
