XCVOLIST TITLE 'OS CVOL LISTING PROGRAM'
***********************************************************************
*                                                                     *
*     PROGRAM TO LIST THE CONTENTS OF A CVOL (OS FORMAT) CATALOG      *
*                                                                     *
* IT IS DESIGNED FOR MVS, BUT MAY BE ASSEMBLED FOR MVT BY             *
* SPECIFYING SYSPARM(MVT) WHICH WILL SUPPRESS GENERATION OF 370       *
* INSTRUCTIONS & MVS-DEPENDENT CODE. THE XF OR H ASSEMBLER            *
* IS REQUIRED FOR ASSEMBLY.                                           *
*                                                                     *
* NORMAL OUTPUT IS TO SYSPRINT (FBA, 133 BY X)                        *
* SOME ERROR CONDITIONS ARE SHOWN ON SYSERROR (FBA, 133 BY X)         *
* A MACHINE-READABLE EXTRACT OF THE CATALOG MAY BE WRITTEN ON         *
*  SYSUT2 (VB) WHICH WILL INCLUDE RECORDS FOR GDG INDICES.            *
*  DATA SETS, UNUSED INDEX LEVELS AND UNUSED GDG INDICES              *
*  (OTHER INDICES, ALIASES AND CVOL PTRS WILL NOT BE ON SYSUT2)       *
*  IT IS RECOMMENDED THAT SYSUT2 LRECL BE AT LEAST 1500               *
* CONTROL CARDS ARE ON SYSIN (FBA, 80 BY X)                           *
*  CONTROL CARD DATA CAN START IN COL. 1 OR LATER AND MUST BE         *
*  COMPLETED BY COL. 71 (NO CONTINUATIONS)                            *
*  ONE OPERAND MUST BE CATALOG= (MVS ONLY), NODE= (MVS ONLY), OR      *
*   DD= (MVS OR MVT). CATALOG=INDEX WHERE INDEX IS AN ALIAS FOR       *
*   AN OS CVOL WILL LIST THE INDICATED CVOL. NODE=INDEX WILL LIST     *
*   ENTRIES STARTING 'INDEX.' IN THE INDICATED CVOL. INDEX MAY BE     *
*   MULTIPLE LEVELS AND CAN HAVE INTERMEDIATE LEVELS OMITTED, I.E.    *
*   NODE=ABC..XYZ WILL LIST DATASETS WHOSE FIRST LEVEL OF QUALIFI-    *
*   CATION IS ABC AND WHOSE THIRD LEVEL OF QUALIFICATION IS XYZ,      *
*   ANY OTHER LEVELS OF QUALIFICATION MAY OCCUR. NODE=..XYZ IS        *
*   ALSO VALID WITH EITHER THE CATALOG= OR DD= PARAMETER. DD=DDNAME   *
*   WILL LIST THE CVOL INDICATED BY THAT DD CARD (THIS IS THE         *
*   OPERAND FOR MVT), THE DSNAME MUST BE SPECIFIED IN THE DD CARD     *
*   (USUALLY SYSCTLG, BUT MAY BE ANY DATASET IN CVOL FORMAT).         *
*  THE OPTIONS MAY FOLLOW THE FIRST OPERAND AND ARE SEPARATED FROM    *
*   IT AND EACH OTHER BY COMMAS WITH A BLANK ENDING THE OPTIONS.      *
*  THE FIRST OPTION IS 'CHECK' TO READ ALL CATALOG BLOCKS AND DO      *
*   VALIDITY CHECKING ON THE CATALOG, THIS SHOULD NOT BE NEEDED VERY  *
*   OFTEN (EVERY FEW MONTHS) AND MORE THAN DOUBLES THE EXCP COUNT.    *
*  THE SECOND OPTION IS 'GDG=N' WHERE IS A 1-4 DIGIT NUMBER GIVING    *
*   THE MAXIMUM NUMBER OF GENERATIONS BEFORE GDG INDICES ARE LISTED   *
*   ON SYSERROR (DEFAULT IS GDG=8). IF GDG=255 IS SPECIFIED, NO       *
*   INDICES WILL BE LISTED FOR EITHER EXCESSIVE GENERATION COUNT      *
*   OR BECAUSE THE GENERATION INDEX SPECIFIES 'NODELETE'.             *
*  THE THIRD OPTION IS 'NODE=INDEX' WHERE ONLY 'INDEX.' DATA SETS     *
*   ARE TO BE LISTED AND THE CATALOG WAS ALLOCATED WITH DD=DDNAME     *
*   CATALOG=INDEX (WHERE THE TWO INDICES ARE DIFFERENT).              *
*  THE FOURTH OPTION IS 'SEEK' AND WILL DO A SEEK ANALYSIS ON THE     *
*   CATALOG STRUCTURE (OR THE PART YOU ARE LISTING).                  *
*  THE FIFTH OPTION IS 'FH' WHICH IS THE SAME AS 'SEEK' BUT IF        *
*   PART OF THE CATALOG RESIDES ON THE FIXED HEAD PORTION OF A        *
*   3340 OR 3350, ANY MOVEMENT INTO THAT AREA IS TREATED AS A FIXED   *
*   HEAD SEEK SEEK, ANY MOVEMENT OUT OF THE FIXED HEAD AREA IS        *
*   CALCULATED BASED ON THE LAST USED CYLINDER.                       *
*  THE SIXTH THROUGH NINTH OPTIONS ARE 'CHKALL', 'CHKREAL',           *
*   'FIXALL' AND 'FIXREAL', THEY EITHER CHECK OR CORRECT THE          *
*   DSCB TTR'S IN THE CATALOG. 'ALL' OR 'REAL' REFERS TO ALL          *
*   DASD OR REAL (NON-MSS) DASD BEING CHECKED. CHECKING MSS           *
*   CAN BE VERY SLOW DUE TO THE MOUNT TIME.                           *
*  THE TENTH OPTION IS 'EXIT=XXXXXXXX' WHERE XXXXXXXX IS A 1-8        *
*   CHARACTER EXIT PROGRAM NAME. THIS PROGRAM RECEIVES CONTROL        *
*   WHENEVER A DATA SET ENTRY IS TO BE PRINTED AND ITS RETURN         *
*   CODE TELLS WHETHER TO PRINT THE DATA SET ENTRY (ZERO) OR          *
*   NOT (NON-ZERO). THE CALL PARAMETERS ARE THE DATASET NAME,         *
*   THE DEVICE NAME OF THE FIRST VOLUME, THE VOLUME COUNT             *
*   (HALFWORD BINARY) AND THE VOLUME INFORMATION. EACH VOLUME         *
*   INFORMATION ENTRY IS TWELVE BYTES LONG AND CONSISTS OF THE        *
*   DEVICE TYPE (4 BYTES), THE VOLUME SERIAL (6 BYTES) AND THE        *
*   TAPE FILE NUMBER (HALFWORD BINARY). THE FILE NUMBER IS ZERO       *
*   FOR A DASD DATA SET. IF THE DSN IS BLANK, IT IS THE END OF        *
*   THE CATALOG, DO ANY FINAL PROCESSING IN YOUR EXIT PROGRAM.        *
*                                                                     *
*   EXAMPLES:                                                         *
*   NODE=ABC.XYZ  THIS WILL LIST ENTRIES STARTING ABC.XYZ.            *
*   CATALOG=A,GDG=11  THIS WILL LIST THE CATALOG CONTAINING INDEX A   *
*                     AND GDGS WITH MORE THAN 11 DATA SETS WILL       *
*                     BE LISTED ON SYSERROR                           *
*   DD=CVOL1,CHECK  THIS WILL LIST THE CVOL DESCRIBED BY DD CVOL1     *
*                   AND CHECK ALL CATALOG BLOCKS                      *
*   DD=CVOL1,NODE=A  AS ABOVE BUT NO CHECKING AND LIST A. ENTRIES     *
*                                                                     *
*   UNDER MVS THIS SHOULD BE AN AUTHORIZED PROGRAM                    *
*   IF IT ISN'T AUTHORIZED, IT WILL NOT ENQ ON THE CATALOG(S)         *
*     AND IT WILL BE SWAPPABLE                                        *
*                                                                     *
*        WRITTEN BY DOUG MERCER, LOCKHEED-CALIFORNIA COMPANY          *
*        NOVEMBER, 1976                                               *
*                                                                     *
*        MODIFIED BY DOUG MERCER, NOVEMBER 1978, TO ALLOW MULTIPLE    *
*        LEVELS OF QUALIFICATION IN THE NODE OPERAND, TO ALLOW        *
*        LARGER CATALOGS TO BE LISTED AND SUNDRY OTHER IMPROVEMENTS.  *
*                                                                     *
*        MODIFIED BY DOUG MERCER, DECEMBER 1978, TO CHECK MASTER      *
*        CATALOG POINTERS ON TOP-LEVEL INDICES (MVS ONLY).            *
*                                                                     *
*        MODIFIED BY DOUG MERCER, FEBRUARY 1980, TO PRINT DSCB TTRS   *
*        AND TO EVALUATE THE PHYSICAL STRUCTURE IN TERMS OF THE       *
*        SEEKS REQUIRED TO LOCATE EACH DATA SET ENTRY.                *
*                                                                     *
*        MODIFIED BY DOUG MERCER, APRIL 1980, TO CHECK DSCB TTRS      *
*        AND (OPTIONALLY) CORRECT THE BAD OR MISSING TTR'S.           *
*                                                                     *
*        MODIFIED BY DOUG MERCER, APRIL 1980, TO ALLOW A              *
*        USER EXIT PPROGRAM.                                          *
*                                                                     *
*        MODIFIED BY DOUG MERCER, JANUARY 1981, TO SUPPORT            *
*        3380 DISKS.                                                  *
*                                                                     *
*        MODIFIED BY DOUG MERCER, JUNE 1982, TO ISSUE OKSWAP          *
*        SYSEVENT AT TERMINATION IF DONTSWAP WAS ISSUED.              *
*                                                                     *
*        MODIFIED BY DOUG MERCER, JULY 1982, TO CORRECTLY             *
*        PROCESS PARTIAL NODE SEARCHING WHEN GDG INDICES              *
*        ARE CROSSED.                                                 *
*                                                                     *
*        MODIFIED BY DOUG MERCER, OCTOBER 1982, TO DO CVOL            *
*        ENQS AND DEQS IN THE SAME WAY AS CATALOG MANAGEMENT          *
*                                                                     *
*        MAILING ADDRESS -                                            *
*        DOUG MERCER                                                  *
*        LOCKHEED-CALIFORNIA COMPANY                                  *
*        DEPT. 83-21, BLDG. 67, PLANT A-1                             *
*        P.O. BOX 551                                                 *
*        BURBANK, CALIFORNIA  91520                                   *
*                                                                     *
*        PHONE - WORK (213) 847-7492    8-5 DAILY (PACIFIC TIME)      *
*                                                                     *
*        ATTRIBUTES - NONE                                            *
*        TAB SETTINGS - 10 16 30 35 40 72                             *
*                                                                     *
*                                                                     *
*      MODIFIED DECEMBER 1982 BY HOWARD DEAN TO CHANGE PRINT          *
*      SUBROUTINE TO NEVER SKIP LINES BY MAKING COUNT  OF LINES       *
*      BEFORE SKIP SYMBOLIC.                                          *
*                                                                     *
*      MODIFIED DECEMBER 1982 BY HOWARD DEAN TO MAKE NUMBER OF        *
*      LINES PER PAGE A SYMBOLIC PARAMETER.                           *
*                                                                     *
*      MODIFIED DECEMBER 1982 BY HOWARD DEAN TO FIX SNAPDUMP OPTION   *
*      AS FOLLOWS:  DDNAMES CAN BE SNAPDUMP,SYSUDUMP,SYSABEND. IF     *
*      SNAPDUMP DCB CANNOT BE OPENED, NO DUMP TAKES PLACE             *
*                                                                     *
*      MODIFIED DECEMBER 1982 BY HOWARD DEAN TO ADD ADDITIONAL AUTH   *
*      CHECKING FOR THE SEEK,FH,CHK,AND FIX PARAMETERS WHICH ARE      *
*      RESTRICTED OPERANDS.                                           *
*                                                                     *
*      MODIFIED DECEMBER 1982 BY HOWARD DEAN TO FIX ZERO DSCBTTRS     *
*      (NOT SUPPLIED) AS WELL AS INCORRECT DSCBTTRS.                  *
*                                                                     *
*        MAILING ADDRESS -                                            *
*            HOWARD M. DEAN                                           *
*            SYSTEMS SUPPORT UNIT (SSU)                               *
*            4750 LINCOLN BLVD.                                       *
*            MARINA DEL REY, CALIF. 90291                             *
*                                                                     *
*            PHONE - (213)-821-0511 EXT 330                           *
***********************************************************************
         EJECT
***********************************************************************
**      X C V O L I S T    I N S T R E A M    M A C R O S            **
***********************************************************************
         SPACE 3
         MACRO
&NM      BRTBL &ERR,&VICE=,&ICE=,&ILE=,&IE=,&DSP=,&VCB=,&GDG=,         *
               &AE=,&NCVOL=,&UNK=,&PAST=,&NODELO=,&NODEHI=
.* MACRO TO GENERATE BRANCH TABLE TO CHECK ENTRY TYPE
&NM      B     *+4(R15)      GO TO CORRECT ENTRY ROUTINE
         BRIN  &ERR,&VICE,00,'VOLUME INDEX CONTROL ENTRY'
         BRIN  &ERR,&ICE,04,'INDEX CONTROL ENTRY'
         BRIN  &ERR,&ILE,08,'INDEX LINK ENTRY'
         BRIN  &ERR,&IE,12,'INDEX ENTRY'
         BRIN  &ERR,&DSP,16,'DATASET POINTER ENTRY'
         BRIN  &ERR,&VCB,20,'VOLUME CONTROL BLOCK POINTER ENTRY'
         BRIN  &ERR,&GDG,24,'GDG INDEX ENTRY'
         BRIN  &ERR,&AE,28,'ALIAS ENTRY'
         BRIN  &ERR,&NCVOL,32,'NEW CVOL ENTRY'
         BRIN  &ERR,&UNK,36,'UNKNOWN ENTRY'
         BRIN  &ERR,&PAST,40,'PAST END OF BLOCK'
         BRIN  &ERR,&NODELO,44,'NOT DOWN TO REQUESTED NODE'
         BRIN  &ERR,&NODEHI,48,'PAST REQUESTED NODE'
         SPACE 2
         MEND
         EJECT
         MACRO
         BRIN  &ERR,&TYP,&RC,&NM
.* INNER MACRO FOR BRTBL
         LCLC  &O
         AIF   ('&TYP' EQ '').P7       SEE IF OMITTED
&O       SETC  '&TYP'.'              '(1,14-K'&TYP).'RC='.'&RC'.' '.'&N*
               M'(2,K'&NM-2)
         AGO   .P14
.P7      ANOP
&O       SETC  '&ERR'.'              '(1,14-K'&ERR).'RC='.'&RC'.' '.'&N*
               M'(2,K'&NM-2)
.P14     B     &O
         MEND
         EJECT
         MACRO
&NM      CNVT  &FROM,&TO
.* CONVERT BINARY TO ZONED DECIMAL
         AIF   ('&FROM'(1,1) NE '(').P7    NOT A REGISTER
&NM      CVD   &FROM(1),DBLWRD
         AGO   .P28
.P7      AIF   (T'&FROM NE 'H').P14   ASSUME FULL WORD
&NM      LH    R0,&FROM
         AGO   .P21
.P14     ANOP
&NM      L     R0,&FROM
.P21     CVD   R0,DBLWRD
.P28     OI    DBLWRD+7,15
         UNPK  &TO,DBLWRD
         SPACE
         MEND
         EJECT
         MACRO
&NM      EDIT  &FROM,&TO,&J=LFT,&MSK=1
.* MACRO TO EDIT FOR PRINT
.* &J SPECIFIES JUSTIFICATION - LFT = LEFT (DEFAULT)
.*                              RT = RIGHT
.* &MSK SPECIFIES THE LAST CHARACTER OF THE EDIT MASK NAME
         LCLA  &OFF
         LCLC  &REG
&REG     SETC  'R0'
         AIF   ('&NM' EQ '').P7
&NM      DC    0H'0'
.P7      AIF   ('&FROM'(1,1) NE '(').P14     NOT REGISTER
&REG     SETC  '&FROM(1)'
         AGO   .P28
.P14     AIF   (T'&FROM NE 'H').P21    ASSUME FULLWORD
         LH    &REG,&FROM         GET NUMBER
         AGO   .P28
.P21     L     &REG,&FROM         GET NUMBER
.P28     CVD   &REG,DBLWRD        MAKE IT PACKED
         MVC   EDITWRK,EDITMSK&MSK     SET UP EDIT MASK
         AIF   ('&J' NE 'LFT').P35     RIGHT JUSTIFIED
         LA    R1,EDITWRK+EDZERO&MSK   IN CASE SIGNIFICANCE FORCED
         EDMK  EDITWRK,DBLWRD
         MVC   &TO,0(R1)
         AGO   .P42
.P35     ED    EDITWRK,DBLWRD
&OFF     SETA  L'EDITWRK-L'&TO    OFFSET WITHIN EDITWRK
         MVC   &TO,EDITWRK+&OFF
.P42     SPACE
         MEND
         EJECT
         MACRO
&NM      IFPOOL &DCB
&NM      TM    &DCB+23,1          SEE IF BUFFER POOL
         BO    IFP&SYSNDX         NO BUFFER POOL
         FREEPOOL &DCB
IFP&SYSNDX EQU *
         SPACE
         MEND
         EJECT
         MACRO
&NM      IFDD  &DCB,&TYPE=OUTPUT
.* DETERMINE WHETHER A DD CARD EXISTS - IF IT DOES OPEN THE DCB
&NM      LA    R1,&DCB+40     DDNAME IN THE DCB
         DEVTYPE (1),DBLWRD
         LTR   R15,R15
         BNZ   IFD&SYSNDX    DEVTYPE FAILED - SKIP OPEN
         OPEN  (&DCB,(&TYPE))
IFD&SYSNDX EQU *
         SPACE
         MEND
         EJECT
         LCLA  &DS,&PGS                                     *HMD 12/82*
         GBLB  &MVT          ASSEMBLY IS FOR AN MVT SYSTEM
         AIF   ('&SYSPARM' NE 'MVT').P7      NOT MVT
&MVT     SETB  1             INDICATE MVT
.P7      ANOP
&DS      SETA  57            NUMBER OF LINES BEFORE SKIP    *HMD 12/82*
&PGS     SETA  57            NUMBER OF LINES/PAGE           *HMD 12/82*
         EJECT
XCVOLIST CSECT ,                                            *HMD 12/82*
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2             WORK
R3       EQU   3             WORK
R4       EQU   4             CATALOG ENTRY
R5       EQU   5             QUEUE BLOCK
R6       EQU   6             CASCADE
R7       EQU   7             OUTPUT RECORD (SYSUT2)
R8       EQU   8             WORK
R9       EQU   9             BASE
R10      EQU   10            BASE
R11      EQU   11            BASE
R12      EQU   12            BASE
R13      EQU   13            BASE & SAVE AREA POINTER
R14      EQU   14
R15      EQU   15
         USING *,R15
         STM   R14,R12,12(R13)    SAVE ENTRY REGISTERS
         LA    R12,SAVEAREA       LINK SAVE AREAS
         ST    R12,8(,R13)        LOWER SAVE AREA POINTER
         ST    R13,4(,R12)        HIGHER SAVE AREA POINTER
         CNOP  0,4
         BAL   R13,*+92           SET POINTER AND GO AROUND SAVE AREA
         DROP  R15
         USING SAVEAREA,R13,R12,R11,R10,R9
SAVEAREA DC    18F'0'             REGISTER SAVE AREA
         DC    A(SAVEAREA+16384,SAVEAREA+12288)
         DC    A(SAVEAREA+8192,SAVEAREA+4096)
         LM    R9,R12,SAVEAREA+72
         AIF   (&MVT).P14
         LA    R0,X'29'      DONTSWAP SYSEVENT CODE
         SR    R1,R1
         SVC   95            SYSEVENT SVC
         LTR   R1,R1         SEE IF AUTHORIZED
         BZ    *+8           YES
         OI    SWA,ANOTAUTH        NOT AUTHORIZED - INDICATE IT
.P14     MVC   RESTORE,RESTORED   SAVE DATA FOR RESTORE
         IFDD  SNAPDUMP
         TM    SNAPDUMP+48,16     SEE IF OPEN              *HMD 12/82*
         BO    CHKUT2        OPEN                          *HMD 12/82*
         MVC   SNAPDUMP+40(8),=CL8'SYSUDUMP'               *HMD 12/82*
         IFDD  SNAPDUMP           SEE IF SYSUDUMP          *HMD 12/82*
         TM    SNAPDUMP+48,16     SEE IF OPEN              *HMD 12/82*
         BO    CHKUT2             YES, THIS IS OPEN        *HMD 12/82*
         MVC   SNAPDUMP+40(8),=C'SYSABEND'                 *HMD 12/82*
         IFDD  SNAPDUMP           SEE IF SYSABEND          *HMD 12/82*
CHKUT2   IFDD  SYSUT2
         IFDD  SYSPRINT
         IFDD  SYSERROR
         IFDD  SYSIN,TYPE=INPUT
         LH    R0,SYSUT2+82  LRECL
         LTR   R0,R0
         BNZ   *+8           ALREADY SUPPLIED
         LA    R0,OLNG3+100*OLNG4      DEFAULT, ALLOW UP TO 100 VOLUMES
         ST    R0,RCDLNG     SAVE LENGTH
         GETMAIN R,LV=(0)    GET A WORK AREA
         ST    R1,RCDADDR
         XC    0(4,R1),0(R1) CLEAR RDW
         A     R1,RCDLNG     DEVELOP ADDRESS OF BEGINNING OF LAST
         SH    R1,=Y(OLNG4)  POSSIBLE VOLUME ENTRY
         ST    R1,RCDLIM
         LOAD  EP=DEVNAMET
         ST    R0,DEVNAMET   GET DEVICE NAME TABLE
         AH    R0,=H'4'      DEVELOP ADDRESS OF FIRST ENTRY
         ST    R0,LASTDVNM   AND PLUG IT TO LAST USED ADDRESS
         AIF   (&MVT).P21
         TM    SWA,ANOTAUTH  SEE IF AUTHORIZED
         BO    *+8           NO
         OI    DYNRB1+16,X'20'    YES - SUPPRESS SYSDSN ENQ
.P21     GETMAIN VU,LA=QLIM,A=QADDR
         LA    R0,CQLNG      CALCULATE UPPER LIMIT FOR LAST QUEUE BLOCK
         LNR   R0,R0
         A     R0,QADDR
         A     R0,QADDR+4
         ST    R0,QEND
         L     R1,QADDR
         ST    R1,FIRSTCQ    SET FIRST
         ST    R1,LATESTCQ   AND LATEST
         SPACE
         USING CATQ,R1
CLRQ     MVC   CATQ+8(256),UNUSED ZERO BLOCK
         MVC   CATQ+264(CQLNG-264),UNUSED
         LA    R2,CQLNG(,R1) ADDRESS OF NEXT BLOCK
         C     R2,QEND       SEE IF END OF BLOCK AREA
         BH    CLRQ1         YES
         ST    R2,CQLO       SET NEXT LOWER
         ST    R1,CQHI-CATQ(,R2)  SET NEXT HIGHER
         LR    R1,R2         TO NEXT
         B     CLRQ
         SPACE
CLRQ1    L     R2,FIRSTCQ    WRAP CHAIN BACK TO THE FIRST
         ST    R2,CQLO
         ST    R1,CQHI-CATQ(,R2)
         ST    R1,LASTCQ     SAVE LAST POINTER
         DROP  R1
         SPACE 2
         TM    SYSIN+48,16   SEE IF OPEN
         BZ    GETJFCB       NO - PROCESS SYSUT1
         EJECT                                              *HMD 12/82*
***********************************************************************
* BEGIN CONTROL CARD PROCESSING                                       *
***********************************************************************
         SPACE
GETIN    GET   SYSIN
         LR    R2,R1
         LA    R1,22         BLANK NAMES IN THE TABLE
         LA    R6,CSTBL
         USING CASCADE,R6
CLRTBL   MVC   CSNAME,BLANKS      CLEAR THE CASCADE TABLE
         SR    R0,R0
         ST    R0,CSADDR
         XC    CSTTR,CSTTR
         NI    CSIND,CSFIRST+CSLAST    ZERO MOST FLAGS
         STH   R0,CSOFFSET   ZERO COUNTERS
         ST    R0,CSTOTAL
         ST    R0,CSDS
         STH   R0,CSNMLNG
         STH   R0,CSCYL
         XC    CSCUM(CSCUMC),CSCUM     ZERO SEEKS
         AH    R6,=Y(CSLNG)
         BCT   R1,CLRTBL
         DROP  R6
         MVC   RESTORED(RSTRLNG),RESTORE      RESET COUNTERS
         L     R1,=A(CYLACCUM)    ZERO ACCUMULATED
         XC    0(L'CYLACCUM*CSCUMA,R1),0(R1)     SEEK COUNTS
         MVC   L5DATA,0(R2)       ECHO INPUT ON SYSPRINT
         MVI   L5CC,C'1'     EJECT
         TM    SYSPRINT+48,16     SEE IF OPEN
         BZ    GETIN0        NO
         PUT   SYSPRINT,LINE5
         SPACE
GETIN0   TM    SYSERROR+48,16     SEE IF OPEN
         BZ    GETIN1        NO
         PUT   SYSERROR,LINE5
         SPACE
GETIN1   LR    R1,R2         SCAN TO OPERANDS
         LA    R0,71(,R1)    LAST COLUMN IS 72
GETIN2   CLI   0(R1),C' '
         BNE   GETIN4        FOUND IT
         LA    R1,1(,R1)
         CR    R1,R0         VS. LIMIT
         BL    GETIN2
         SPACE
GETIN3   SR    R1,R2         DEVELOP COLUMN
         LA    R1,1(,R1)
         MVC   L5DATA,BLANKS
         LA    R0,C'*'
         STC   R0,L5DATA-1(R1)    INDICATE BAD COLUMN
         EDIT  (R1),M1COL
         MVC   L5MSG,MSG1
         SPACE
GETIN3A  LA    R15,12        SET RETURN CODE
         BAL   R14,SETRC
         MVI   L5CC,C' '
         TM    SYSPRINT+48,16
         BZ    GETIN3B       NOT OPEN
         PUT   SYSPRINT,LINE5
GETIN3B  TM    SYSERROR+48,16
         BZ    GETIN3C       NOT OPEN
         PUT   SYSERROR,LINE5
GETIN3C  MVC   L5MSG,BLANKS
         B     GETIN
         SPACE
GETIN4   LR    R15,R1        LOOK FOR END OF OPERAND
         SPACE
GETIN4A  CLI   0(R15),C' '
         BE    GETIN4B       END OF OPERANDS
         CLI   0(R15),C','
         BE    GETIN4B       END OF THIS OPERAND
         LA    R15,1(,R15)
         CR    R15,R0
         BL    GETIN4A
         LR    R1,R15        ERROR - COLUMN NUMBER
         B     GETIN3        DEVELOP ERROR MESSAGE
         SPACE 2
GETIN4B  CLC   =C'DD=',0(R1) IDENTIFY KEYWORD
         BE    GETIN8        TO DDNAME PROCESS
         CLC   =C'NODE=',0(R1)
         BE    GETIN5        NODE PROCESS
         CLC   =C'GDG=',0(R1)
         BE    GETIN9        GDG COUNT PROCESS
         CLC   =C'CHECK',0(R1)
         BE    GETIN12       CHECK PROCESS
         CLC   =C'SEEK',0(R1)
         BE    GETIN13       SEEK ANALYSIS PROCESS
         CLC   =C'FH',0(R1)
         BE    GETIN14       SEEK ANALYSIS WITH FIXED HEAD PROCESS
         CLC   =C'CHK',0(R1)
         BE    GETIN15       DSCB POINTER CHECK
         CLC   =C'FIX',0(R1)
         BE    GETIN16       DSCB POINTER FIXUP
         CLC   =C'EXIT=',0(R1)
         BE    GETIN20       USER EXIT PROGRAM
         AIF   (&MVT).P28
         CLC   =C'CATALOG=',0(R1)
         BE    GETIN7        CATALOG PROCESS
.P28     B     GETIN3        ERROR
         SPACE
GETIN5   NC    NODE1,NODE1
         BNZ   GETIN3        'NODE=' ALREADY SPECIFIED
         LA    R1,5(,R1)     PAST 'NODE='
         LR    R14,R15
         SR    R14,R1        LENGTH OF OPERAND
         BNP   GETIN3        TOO SHORT
         CH    R14,=H'44'
         BH    GETIN3        TOO LONG
         OI    SWB,NODE
         ST    R1,NODE1      SAVE POINTERS TO BEGINNING
         ST    R15,NODE2          AND END OF NODE OPERAND
GETIN6   LA    R1,1(,R15)    TO NEXT OPERAND
         CLI   0(R15),C' '   SEE IF END OF OPERANDS
         BE    GETIN50       YES - PROCESS THE OPERANDS
         B     GETIN4
         AIF   (&MVT).P35
         SPACE
GETIN7   NC    CATLG1,CATLG1
         BNZ   GETIN3        ERROR - 'CATALOG=' ALREADY SPECIFIED
         NC    DDN1,DDN1
         BNZ   GETIN3        ERROR - CATALOG & DD PARAMETERS TOGETHER
         LA    R1,8(,R1)     PAST 'CATALOG='
         LR    R14,R15
         SR    R14,R1        LENGTH OF OPERAND
         BNP   GETIN3        TOO SHORT
         CH    R14,=H'8'
         BH    GETIN3        TOO LONG
         ST    R1,CATLG1     SAVE POINTERS TO BEGINNING
         ST    R15,CATLG2         AND END OF CATLG OPERAND
         B     GETIN6
.P35     SPACE
GETIN8   NC    DDN1,DDN1
         BNZ   GETIN3        ERROR - 'DD=' ALREADY SPECIFIED
         NC    CATLG1,CATLG1
         BNZ   GETIN3        ERROR - CATALOG & DD PARAMETERS TOGETHER
         LA    R1,3(,R1)     PAST 'DD='
         LR    R14,R15
         SR    R14,R1        LENGTH OF OPERAND
         BNP   GETIN3        TOO SHORT
         CH    R14,=H'8'
         BH    GETIN3        TOO LONG
         ST    R1,DDN1       SAVE POINTERS TO BEGINNING
         ST    R15,DDN2           AND END OF DD OPERAND
         B     GETIN6
         SPACE
GETIN9   LA    R1,4(,R1)     POINT TO OPERAND OF GDG=
         LR    R14,R15
         SR    R14,R1        LENGTH OF OPERAND
         BNP   GETIN3        ERROR - NO OPERAND
         CH    R14,=H'4'
         BH    GETIN3        ERROR - TOO LONG
         BCTR  R14,0
         EX    R14,GETIN11   PACK OPERAND INTO DBLWRD
         LR    R14,R1
GETIN10  CLI   0(R14),C'0'   EDIT FOR VALID DIGITS
         BL    GETIN3        ERROR - NOT NUMERIC
         CLI   0(R14),C'9'
         BH    GETIN3        ERROR - NOT NUMERIC
         LA    R14,1(,R14)   TO NEXT DIGIT
         CR    R14,R15
         BL    GETIN10       CHECK NEXT
         CVB   R14,DBLWRD
         STC   R14,GDGLIM    SAVE LIMIT COUNT FOR SYSERROR
         B     GETIN6
         SPACE
GETIN11  PACK  DBLWRD,0(0,R1)
         SPACE 2
GETIN12  LR    R14,R15       'CHECK' OPTION
         SR    R14,R1        LENGTH
         CH    R14,=H'5'
         BNE   GETIN3        ERROR - WRONG LENGTH
         TM    SWA,ANOTAUTH  AUTHORIZED?                    *HMD 12/82*
         BO    GETIN3        NO, GIVE HIM INVALID MSG       *HMD 12/82*
         OI    SWB,BCHECK    INDICATE 'CHECK' PROCESSING
         B     GETIN6
         SPACE 2
GETIN13  LR    R14,R15       'SEEK' OPTION
         SR    R14,R1        LENGTH
         CH    R14,=H'4'
         BNE   GETIN3        ERROR - WRONG LENGTH
         TM    SWA,ANOTAUTH  AUTHORIZED?                    *HMD 12/82*
         BO    GETIN3        NO, GIVE HIM INVALID MSG       *HMD 12/82*
         OI    SWB,SEEKREQ   INDICATE 'SEEK' PROCESSING
         B     GETIN6
         SPACE 2
GETIN14  LR    R14,R15       'FH' OPTION
         SR    R14,R1        LENGTH
         CH    R14,=H'2'
         BNE   GETIN3        ERROR - WRONG LENGTH
         TM    SWA,ANOTAUTH  AUTHORIZED?                    *HMD 12/82*
         BO    GETIN3        NO, GIVE HIM INVALID MSG       *HMD 12/82*
         OI    SWB,SEEKREQ+FHVOL  INDICATE 'FH' PROCESSING
         B     GETIN6
         SPACE 2
GETIN15  DS    0H                                           *HMD 12/82*
         TM    SWA,ANOTAUTH  AUTHORIZED?                    *HMD 12/82*
         BO    GETIN3        NO, GIVE HIM INVALID MSG       *HMD 12/82*
         OI    SWC,CDSCB     F1 DSCB CHECKING OPTION        *HMD 12/82*
         B     GETIN17                                      *HMD 12/82*
GETIN16  DS    0H                                           *HMD 12/82*
         TM    SWA,ANOTAUTH  AUTHORIZED?                    *HMD 12/82*
         BO    GETIN3        NO, GIVE HIM INVALID MSG       *HMD 12/82*
         OI    SWC,CFIXDSCB  F1 DSCB FIXUP OPTION           *HMD 12/82*
         SPACE
GETIN17  LR    R14,R15
         SR    R14,R1        LENGTH
         CH    R14,=H'6'
         BE    GETIN18
         CH    R14,=H'7'
         BE    GETIN19
         B     GETIN3        WRONG LENGTH
         SPACE
GETIN18  CLC =C'ALL',3(R1)
         BNE  GETIN3         ERROR
         OI   SWC,CMASS
         B    GETIN6
GETIN19  CLC =C'REAL',3(R1)
         BNE  GETIN3         ERROR
         B    GETIN6
         SPACE
GETIN20  LR    R14,R15
         SR    R14,R1        LENGTH
         SH    R14,=H'6'
         BM    GETIN3        TOO SHORT
         CH    R14,=H'7'
         BH    GETIN3        TOO LONG
         MVC   EXITNAME,BLANKS
         EX    R14,GETIN21   PROGRAM NAME
         STM   14,R1,12(R13)
         LOAD  EPLOC=EXITNAME,ERRET=GETIN22
         OI    SWC,CEXIT
         ST    R0,EXITADDR
         LM    R14,R1,12(R13)
         B     GETIN6
         SPACE
GETIN22  LM    R14,R1,12(R13)     ERROR LOADING MODULE
         B     GETIN3
         SPACE
GETIN21  MVC   EXITNAME(0),5(R1)
         SPACE 3
* PROCESS NODE PARAMETER
GETIN50  L     R1,NODE1      START OF OPERAND
         LTR   R1,R1
         BZ    GETIN60       NOT SPECIFIED
         L     R0,NODE2      END OF OPERAND
         LA    R6,CSTBL
         USING CASCADE,R6
         SPACE
GETIN51  LR    R15,R1        LOOK FOR LEVELS
GETIN52  CLI   0(R15),C'.'
         BE    GETIN53       END OF A LEVEL
         LA    R15,1(,R15)   NEXT BYTE
         CR    R15,R0        VS. END OF OPERAND
         BL    GETIN52       SOME TO GO
         SPACE
GETIN53  SR    R15,R1        LENGTH OF THIS LEVEL
         ST    R6,NODELVL    SAVE AS LOWEST QUALIF. LEVEL (SO FAR)
         BCTR  R15,0
         BNP   GETIN54       NOT SPECIFIED - SKIP
         CH    R15,=H'7'
         BH    GETIN3        ERROR - TOO LONG
         EX    R15,GETIN55   MOVE INTO INDEX IN CASCADE TABLE
         OI    CSIND,CSNODE  INDICATE THAT THIS LEVEL IS NODE
GETIN54  LA    R1,2(R15,R1)  NEXT PART OF OPERAND
         CR    R1,R0
         BNL   GETIN60       END OF NODE OPERAND
         TM    CSIND,CSLAST
         BO    GETIN3        ERROR - TOO MANY LEVELS
         LA    R6,CSLNG(,R6)
         B     GETIN51
         SPACE
GETIN55  MVC   CSNAME(0),0(R1)
         DROP  R6
         SPACE 3
GETIN60  EQU   *
         AIF   (&MVT).P42
         SPACE
* PROCESS CATALOG PARAMETER
         L     R1,CATLG1     START OF OPERAND
         MVC   DSNAME,BLANKS
         LTR   R1,R1
         BZ    GETIN70       NOT SPECIFIED
         L     R14,CATLG2    END OF OPERAND
         SR    R14,R1        LENGTH
         BCTR  R14,0
         EX    R14,GETIN98   MOVE NAME INTO DSNAME AREA
         B     GETIN80
.P42     SPACE 3
* PROCESS DD PARAMETER
GETIN70  L     R1,DDN1       START OF OPERAND
         LTR   R1,R1
         AIF   (&MVT).P49
         BZ    GETIN80       NOT SPECIFIED
         AGO   .P56
.P49     BZ    GETIN3        ERROR - MUST BE SPECIFIED
.P56     L     R14,DDN2      END OF OPERAND
         SR    R14,R1        LENGTH
         BCTR  R14,0
         MVC   DSNAME,BLANKS
         EX    R14,GETIN98   MOVE DDNAME INTO DSNAME AREA
         MVC   SYSUT1+40(8),DSNAME     SET DDN IN DCB
         DEVTYPE SYSUT1+40,DBLWRD
         LTR   R15,R15
         BNZ   GETIN3        ERROR - BAD DDNAME
         B     GETIN99
         AIF   (&MVT).P63
         SPACE 3
GETIN80  CLC   DSNAME,BLANKS
         BNE   GETIN81
         MVC   DSNAME(8),CSNAME-CASCADE+CSTBL    USE FIRST NODE LEVEL
GETIN81  LOCATE CAMLOC       THIS SHOULD BE AN ALIAS OF SYSCTLG.XXXXXXX
         LTR   R15,R15
         BZ    GETIN94       OK
         CNVT  (R0),M2R0     BUILD ERROR MESSAGE
         CNVT  (R15),M2R15
         MVC   L5DATA,MSG2
         B     GETIN3A
         SPACE
GETIN94  CLC   DSNAME(7),SYSCTLG  VALIDATE ALIAS RETURNED
         BNE   GETIN95       BAD
         CLI   DSNAME+7,C'.'
         BE    GETIN96       OK
         SPACE
GETIN95  MVC   M3DSN,DSNAME  ERROR - WRONG DSN RETURNED
         MVC   L5DATA,MSG3
         B     GETIN3A
         SPACE
* BUILD THE REST OF THE DYNAMIC LIST
GETIN96  MVC   DYNVOL1,CAMWRK+6   VOLUME SERIAL
         LA    R1,CAMWRK+2   DEVELOP UNIT NAME FROM DEVICE TYPE
         BAL   R14,GENERIC
         MVC   DYNUNIT1,DEVNAME
         TM    SWA,ANOTAUTH  SEE IF PROGRAM IS AUTHORIZED
         BO    *+8           NO
         OI    DYNRB1+16,32       AUTHORIZED - SKIP SYSDSN ENQ
         LA    R1,DYNPTR1    ALLOCATE THE CATALOG
         SVC   99
         LTR   R15,R15
         BZ    GETIN97      ALLOCATION OK
         CNVT  (R15),M4RC
         UNPK  M4ERRCD(5),DYNRB1+4(3)
         MVI   M4ERRCD+4,C' '
         TR    M4ERRCD,HEXTBL
         UNPK  M4INFOCD(5),DYNRB1+6(3)
         MVI   M4INFOCD+4,C' '
         TR    M4INFOCD,HEXTBL
         MVC   M4UNIT,DYNUNIT1
         MVC   M4VOL,DYNVOL1
         MVC   L5DATA,MSG4
         B     GETIN3A
         SPACE
GETIN97  MVC   SYSUT1+40(8),DYNDDN1    DDNAME FROM DYNAMIC ALLOCATE
         B     GETIN99       TO COMMON OPTION ANALYSIS
.P63     SPACE 3
GETIN98  MVC   DSNAME(0),0(R1)
         SPACE
GETIN99  EQU   *
         MVC   SYSUT1A+40(8),SYSUT1+40
         EJECT
* BEGINNING OF COMMON CATALOG PROCESSING
GETJFCB  LA    R1,OPENLST1
         SVC   64            RDJFCB
         LA    R1,SYSUT1+40  DDNAME
         BAL   R14,CALCBLK
         ST    R0,BLKS1      NUMBER OF CATLG BLKS/TRK
         STC   R0,SYSUT1A+20      USE AS BUFNO
         MVC   H1SERIAL,JFCB1+118      VOLUME SERIAL
         LA    R1,DEVTYPE    GET GENERIC NAME FOR CATALOG DEVICE
         BAL   R14,GENERIC
         OPEN  TYPE=J,MF=(E,OPENLST1)
         MVC   H1DEVT,DEVNAME     BUILD UP THE HEADING LINE
         L     R1,SYSUT1+44       DEB - DEVELOP TOTAL TRACKS
         L     R2,32(,R1)    UCB POINTER IN DEB
         LA    R2,0(,R2)     DROP HIGH-ORDER BYTE
         ST    R2,UCB1       SAVE IT FOR RESERVE
         ST    R2,UCB2            & ENQ'S
         ST    R2,UCB3
         SR    R3,R3
         SR    R2,R2         ASSUME DA DEB
         IC    R3,16(,R1)    EXTENT COUNT
         LA    R4,32(,R1)    FIRST EXTENT
         SPACE
DEB1     AH    R2,14(,R4)         TRACKS IN THIS EXTENT
         UNPK  DEVNAME(9),6(5,R4)      EXTENT START
         TR    DEVNAME,HEXTBL
         MVC   L9CCLO,DEVNAME
         MVC   L9HHLO,DEVNAME+4
         UNPK  DEVNAME(9),10(5,R4)     EXTENT END
         TR    DEVNAME,HEXTBL
         MVC   L9CCHI,DEVNAME
         MVC   L9HHHI,DEVNAME+4
         TM    SYSPRINT+48,16
         BZ    DEB2          NOT OPEN
         PUT   SYSPRINT,LINE9
DEB2     TM    SYSERROR+48,16
         BZ    DEB3          NOT OPEN
         PUT   SYSERROR,LINE9
DEB3     LA    R4,16(,R4)         TO NEXT EXTENT
         BCT   R3,DEB1
         SPACE
         STH   R2,DEBTRK
         MH    R2,BLKS1+2         EXTEND TRACKS TO BLOCKS
         ST    R2,DEBLK
         TM    SWB,FHVOL     SEE IF THIS DISK HAS FIXED HEAD
         BZ    GETIME        NO
         LH    R0,=H'-1'     LIMITS FOR DEVICES THAT
         LR    R1,R0              CANNOT HAVE FIXED HEAD
         L     R15,UCB1      POINT TO UCB
         CLI   19(R15),X'0A' SEE IF 3340
         BNE   *+12          NO
         LA    R0,1          FIXED HEAD LIMITS
         LA    R1,5               FOR 3340
         CLI   19(R15),X'0B' SEE IF 3350
         BNE   *+12          NO
         LA    R0,1          FIXED HEAD LIMITS
         LA    R1,2               FOR 3350
         STH   R0,FHCYL      SAVE THE LIMITS
         STH   R1,FHCYL+2
         SPACE 2
GETIME   TIME  DEC
         SRL   R0,12
         ST    R0,DBLWRD
         OI    DBLWRD+3,15
         UNPK  DBLWRD,DBLWRD(4)
         MVC   H1TIME(2),DBLWRD+4
         MVC   H1TIME+3(2),DBLWRD+6
         ST    R1,DBLWRD+4   CONVERT DATE
         XC    DBLWRD(6),DBLWRD   ZERO YEAR
         CVB   R0,DBLWRD     JULIAN DAY
         SRL   R1,12         SHIFT DAY OFF JULIAN DATE
         ST    R1,DBLWRD+4
         OI    DBLWRD+7,15   ADD A VALID SIGN
         UNPK  H1YEAR,DBLWRD YEAR TO HEADING
         CVB   R1,DBLWRD
         LR    R14,R1        CALCULATE THE DAY OF THE WEEK
         SH    R14,=H'61'    START AT 1961
         BNM   *+8
         LA    R14,100(,R14) CENTURY WRAPAROUND
         LR    R15,R14
         SRA   R14,2         LEAP YEARS SINCE 1961
         LA    R15,5(R14,R15)     5 BECAUSE JAN. 1, 1961 WAS SUNDAY
         AR    R15,R0        DAYS INTO THIS YEAR
         SR    R14,R14
         D     R14,=F'7'     REMAINDER IS DAY OF WEEK                  *
                                  (0=MON.,...,6=SUN.)
         SLL   R14,2         * 4
         LA    R15,H1DAYS(R14)    ADDRESS TODAY'S NAME
         MVC   H1DAYNM,0(R15)     AND MOVE IT TO HEADING
         SPACE
* DEVELOP MONTH & DAY FROM JULIAN DAY
         LA    R15,28        DAYS IN FEBRUARY
         EX    R1,DATE1      SEE IF LEAP YEAR
         BNZ   *+8           NO
         LA    R15,29        DAYS IN FEBRUARY (LEAP YEAR)
         LA    R2,30
         LA    R3,31
         SR    R4,R4         INITIALIZE MONTH
         LR    R1,R3
         BAL   R14,DATE2     SEE IF JANUARY
         LR    R1,R15
         BAL   R14,DATE2          FEBRUARY
         LR    R1,R3
         BAL   R14,DATE2          MARCH
         LR    R1,R2
         BAL   R14,DATE2          APRIL
         LR    R1,R3
         BAL   R14,DATE2          MAY
         LR    R1,R2
         BAL   R14,DATE2          JUNE
         LR    R1,R3
         BAL   R14,DATE2          JULY
         LR    R1,R3
         BAL   R14,DATE2          AUGUST
         LR    R1,R2
         BAL   R14,DATE2          SEPTEMBER
         LR    R1,R3
         BAL   R14,DATE2          OCTOBER
         LR    R1,R2
         BAL   R14,DATE2          NOVEMBER
         B     DATE4         ASSUME DECEMBER
         SPACE
DATE1    TM    =X'03',0      FOR LEAP YEAR TEST
         SPACE
DATE2    SR    R0,R1         SUBTRACT A MONTH'S WORTH OF DAYS
         BNP   DATE3         WAS IN PRIOR MONTH
         LA    R4,1(,R4)     STEP MONTH
         BR    R14           RETURN
         SPACE
DATE3    AR    R0,R1         PUT DAYS BACK
         SPACE
DATE4    CVD   R0,DBLWRD     DAY OF THE MONTH
         OI    DBLWRD+7,15
         UNPK  H1DAY,DBLWRD
         SLL   R4,2          MONTH NUMBER (0-11) * 4
         LA    R1,H1MONTHS(R4)    ADDRESS THIS MONTH'S NAME
         MVC   H1MONTH,0(R1)
         CLI   H1DAY,C'0'    SEE IF LEADING ZERO
         BNE   *+8           NO
         MVI   H1DAY,C' '    YES - SUPPRESS IT
         L     R1,QADDR
         ST    R1,LATESTCQ   RESET LATEST
         SPACE
         USING CATQ,R1
INITLP1  XC    CQTTR,CQTTR   ZERO TTR PTR
         LA    R1,CQLNG(,R1) ADDRESS OF NEXT BLOCK
         C     R1,QEND       SEE IF END OF BLOCK AREA
         BNH   INITLP1
         SPACE
         DROP  R1
         SPACE 3
         TM    SWB,BCHECK
         BZ    STARTCAT      NO CHECKING REQUESTED
         OI    SWB,BCHKPROC       INDICATE WE ARE CHECKING
         MVC   UNUSEDCT,DEBLK
         OPEN  SYSUT1A,TYPE=J
         TM    SWA,ANOTAUTH  SEE IF AUTHORIZED
         BO    NOENQ1        NO
         TM    SWC,CDSCB+CFIXDSCB+CEXIT  SEE IF ALLOCATION WILL BE DONE
         BNZ   NOENQ1        YES - SKIP ENQ TO AVOID INTERLOCKS
*        RESERVE MF=(E,ENQ1) MINOR IS QUALIFIER & UCB ADDRESS  DM OCT82
         ENQ   MF=(E,ENQ2)   MINOR IS 'SYSCTLG' & UCB ADDRESS  DM OCT82
         ENQ   MF=(E,ENQ3)   MINOR IS ZEROS & UCB ADDRESS      DM OCT82
NOENQ1   EQU   *
         L     R0,DEBLK      BLOCKS IN THIS CATALOG
         MH    R0,=Y(CHKLNG)      LENGTH OF CHECKING ENTRY
         ST    R0,CKLNG      LENGTH OF CHECKING TABLE AREA
         GETMAIN R,LV=(0)    AREA FOR CHECKING
         ST    R1,CKADDR
         LR    R7,R1         ADDRESS OF AREA
         L     R15,CKLNG     LENGTH
         LA    R0,0(R15,R7)  ADDRESS OF END
         ST    R0,LASTCHK
         LR    R14,R7        ADDRESS FOR MVCL
         AIF   (&MVT).P70
         SR    R0,R0         SOURCE FOR MVCL
         SR    R1,R1         PAD & LENGTH (ZERO)
         MVCL  R14,R0        CLEAR TABLE AREA
         AGO   .P77
.P70     LA    R0,256        MVT VERSION OF TABLE CLEAR
         LA    R1,255
CLRCHK1  SR    R15,R0
         BNM   *+6           STILL MORE THAN 256 BYTES
         AR    R1,R15        DEVELOP ILC FOR LAST MOVE
         EX    R1,CLRCHK2    MOVE 0'S TO TABLE
         AR    R14,R0        ADD 256 TO ADDRESS
         LTR   R15,R15
         BP    CLRCHK1       STILL MORE
         B     CLRCHK3
         SPACE
CLRCHK2  MVC   0(0,R14),UNUSED
         SPACE
CLRCHK3  EQU   *
         SPACE 3
.P77     USING CHKNTRY,R7
         OI    CKIND,CKXPNTRY     SHOW FIRST AS USED
         MVC   CKTTR,=X'000001'
         SH    R7,=Y(CHKLNG) BACK UP BEFORE FIRST
         L     R5,LATESTCQ   USE CURRENT BLOCK
         USING CATQ,R5
         SPACE
CHKLOOP1 GET   SYSUT1A,CQBLOCK+8
         AH    R7,=Y(CHKLNG) TO NEXT
         LA    R15,1
         A     R15,BLKCNT    CURRENT RECORD NUMBER
         ST    R15,BLKCNT
         C     R15,DEBLK     SEE IF WITHIN FORECAST
         BH    CHKLOOP1      NO - DON'T TRY TO PUT IT ANYWHERE
         CLC   UNUSED,CQBLOCK+8
         BE    CHKLOOP1
         L     R0,UNUSEDCT
         BCTR  R0,0
         ST    R0,UNUSEDCT
         SR    R14,R14       DEVELOP TTR
         BCTR  R15,0
         D     R14,BLKS1
         LA    R14,1(,R14)
         STH   R15,CQTTR     TRACK
         STC   R14,CQTTR+2   RECORD
         LA    R4,CQBLOCK+8       RECORD ADDRESS
         BAL   R14,WHATBLK
         LTR   R15,R15
         BNZ   CHKLOOP2      ENTRY BLOCK - GO GET ENTRIES
         USING CATALOG7,R4
         OI    CKIND,CKVCB   SHOW THAT THIS IS A VOLUME CONTROL BLOCK
         CLC   C7CHAIN,UNUSED
         BE    CHKLOOP1      NO TTR
         SPACE 2
         LA    R1,C7CHAIN    TTR OF NEXT VCB
         LA    R15,CKXPVCB
         BAL   R14,CHKREF    MARK REFERENCED BLOCK
         B     CHKLOOP1
         SPACE 3
CHKLOOP2 BAL   R14,NXTNTRY
         OI    CKIND,CKNTRY
         BRTBL CHKLOOP2,IE=CHKIE,ILE=CHKILE,VCB=CHKVCB,                *
               GDG=CHKGDG,PAST=CHKLOOP1
         USING CATALOG0,R4
         SPACE 2
CHKIE    LA    R1,C3INDEX    INDEX ENTRY
         LA    R15,CKXPNTRY
         BAL   R14,CHKREF    MARK REFERENCED BLOCK
         B     CHKLOOP2
         SPACE
CHKILE   CLC   C2LINK,UNUSED INDEX LINK ENTRY
         BE    CHKLOOP1      LAST LINK OF AN INDEX - POINTS NOWHERE
         LA    R1,C2LINK
         LA    R15,CKXPNTRY
         BAL   R14,CHKREF    MARK REFERENCED BLOCK
         B     CHKLOOP1
         SPACE
CHKVCB   LA    R1,C5ADDR     VOLUME CONTROL BLOCK POINTER ENTRY
         LA    R15,CKXPVCB
         BAL   R14,CHKREF    MARK REFERENCED BLOCK
         B     CHKLOOP2
         SPACE
CHKGDG   LA    R1,C6ADDR     GENERATION DATA GROUP INDEX
         LA    R15,CKXPNTRY
         BAL   R14,CHKREF    MARK REFERENCED BLOCK
         B     CHKLOOP2
         SPACE 2
CHKREF   STM   R14,R3,CHKREF99    MARK BLOCK REFERENCED
         UNPK  DBLWRD(7),0(4,R1)  EXPAND TTR FOR PRINT
         TR    DBLWRD(6),HEXTBL
         MVC   L8TTR1,DBLWRD
         CLI   2(R1),0       SEE IF RCD 0
         BE    CHKREF2       YES - ERROR
         CLC   2(1,R1),BLKS1+3
         BH    CHKREF2       ERROR - RECORD NUMBER TOO BIG
         LH    R2,0(,R1)     TT OF TTR
         MH    R2,BLKS1+2    EXTEND TRACKS TO BLOCK
         SR    R0,R0
         IC    R0,2(,R1)
         AR    R2,R0         BLOCK NUMBER
         BNP   CHKREF2       ERROR
         C     R2,DEBLK      VS. MAX BLOCKS
         BH    CHKREF2       ERROR - TOO HIGH
         BCTR  R2,0
         MH    R2,=Y(CHKLNG)
         A     R2,CKADDR
         PUSH  USING
         DROP  R7
         USING CHKNTRY,R2
         EX    R15,CHKREF1   SHOW WHAT TYPE BLOCK EXPECTED
         CLC   CKTTR,UNUSED
         BNE   CHKREF3       BLOCK HAS ALREADY BEEN REFERENCED
         MVC   CKTTR,CQTTR   SHOW CURRENT BLOCK AS REFERENCE
         B     CHKREF90
         SPACE
CHKREF1  OI    CKIND,0
         SPACE
CHKREF2  STM   R0,R15,SNAPREGS
         LA    R15,CHKLNG(,R7)    SEE IF LAST BLOCK
         C     R15,LASTCHK
         BE    CHKREF2A      YES - DIFFERENT FORMAT
         LA    R2,CQBLOCK
         LA    R3,L'CQBLOCK-1(,R2)
         LA    R15,4
         BAL   R14,SNAP
         MVC   L7RSN,=CL50'INVALID TTR'
         BAL   R14,PRTLINE7
CHKREF2A LM    R0,R15,SNAPREGS
         B     CHKREF90
         SPACE
CHKREF3  TM    CKIND,CKMULT  SEE IF MULTIPLES ALREADY PRINTED
         BO    CHKREF4       YES - PRINT NEW ONE ONLY
         LA    R1,CKTTR      LIST ORIGINAL REFERENCE
         B     CHKREF5
         SPACE
CHKREF4  OI    CKIND,CKMULT
         LA    R1,CQTTR
         SPACE
CHKREF5  UNPK  DBLWRD(7),0(4,R1)
         TR    DBLWRD(6),HEXTBL
         MVC   L8TTR2,DBLWRD
         MVC   L8MSG1(L8LNG2),L8MSGD
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'       DON'T DOUBLE SPACE
         LA    R1,LINE8
         LA    R15,ERRCTL
         BAL   R14,PRINT     PRINT ON SYSERROR
         MVC   L8MSG1(L8LNG2),BLANKS
         TM    CKIND,CKMULT  SEE IF FIRST
         BZ    CHKREF4       YES - PRINT OTHER OF THIS PAIR
         SPACE
CHKREF90 LM    R14,R3,CHKREF99
         BR    R14
         POP   USING
CHKREF99 DC    6F'0'
         SPACE 2
ENDCHK   CLOSE SYSUT1A
         TM    SWA,ANOTAUTH  SEE IF AUTHORIZED
         BO    NODEQ1        NO
         TM    SWC,CDSCB+CFIXDSCB+CEXIT  SEE IF ALLOCATION WILL BE DONE
         BNZ   NODEQ1        YES - SKIP DEQ TO AVOID INTERLOCKS
         DEQ   MF=(E,ENQ3)   MINOR IS ZEROS & UCB ADDRESS      DM OCT82
         DEQ   MF=(E,ENQ2)   MINOR IS 'SYSCTLG' & UCB ADDRESS  DM OCT82
*        DEQ   MF=(E,DEQ1)   MINOR IS QUALIFIER & UCB ADDRESS  DM OCT82
NODEQ1   EQU   *
         IFPOOL SYSUT1A
         NI    SWB,255-BCHKPROC
         L     R7,CKADDR     GO THROUGH ALL CHECK BLOCKS
         L     R2,DEBLK      NOW THAT THEY ARE COMPLETE
         SPACE
CHKLOOP3 TM    CKIND,CKNTRY+CKVCB+CKXPNTRY+CKXPVCB
         BZ    CHKNXT        UNUSED BLOCK
         TM    CKIND,CKXPNTRY+CKXPVCB
         BNZ   CHKENTRY      BLOCK IS REFERENCED
         CH    R2,=H'1'      SEE IF LAST BLOCK
         BE    CHKNXT        OK - LAST BLOCK HAS ERROR INDICATORS
         MVC   L8MSG1(L8LNG2),L8MSGF   UNREFERENCED BLOCK
         B     CHKERR1
         SPACE
CHKENTRY TM    CKIND,CKNTRY  IS IT AN ENTRY BLOCK
         BZ    CHKIFVCB      NO - SEE IF VCB
         TM    CKIND,CKXPVCB WAS A VCB EXPECTED
         BZ    CHKNXT        NO - ENTRY BLOCK EXPECTED & FOUND
         MVC   L8MSG4,L8MSGC
         MVC   L8MSG5,L8MSGB
         MVC   L8MSG6,L8MSGA
         MVC   L8MSG7,L8MSGH
         B     CHKERR1       PRINT ERROR
         SPACE
CHKIFVCB TM    CKIND,CKVCB   IS IT A VCB
         BZ    CHKERR2       EMPTY BLOCK IS REFERENCED
         TM    CKIND,CKXPNTRY     WAS AN ENTRY BLOCK EXPECTED
         BZ    CHKNXT        NO - VOLUME CONTROL BLOCK EXPECTED & FOUND
         MVC   L8MSG1,L8MSGA
         MVC   L8MSG2,L8MSGB
         MVC   L8MSG3,L8MSGC
         MVC   L8MSG7,L8MSGH
         B     CHKERR1
         SPACE
CHKERR2  UNPK  DBLWRD(7),CKTTR(4) EMPTY BLOCK IS REFERENCED
         TR    DBLWRD(6),HEXTBL   EXPAND TTR OF REFERENCING BLOCK
         MVC   L8TTR3,DBLWRD
         MVC   L8MSG1(L8LNG2),L8MSGE
         SPACE
CHKERR1  LR    R15,R7        DEVELOP TTR OF THIS BLOCK
         S     R15,CKADDR
         SR    R14,R14
         SRA   R15,2
         D     R14,BLKS1
         LA    R14,1(,R14)
         STH   R15,DBLWRD
         STC   R14,DBLWRD+2
         UNPK  DBLWRD(7),DBLWRD(4)
         TR    DBLWRD(6),HEXTBL
         MVC   L8TTR1,DBLWRD
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'       DON'T DOUBLE SPACE
         LA    R1,LINE8
         LA    R15,ERRCTL
         BAL   R14,PRINT
         SPACE
CHKNXT   AH    R7,=Y(CHKLNG) TO NEXT CHECK BLOCK
         BCT   R2,CHKLOOP3
         SR    R0,R0
         ST    R0,EXHCNT     RESET SOME COUNTERS
         ST    R0,VCBCNT
         L     R2,DEBLK
         L     R3,BLKCNT
         CR    R2,R3
         BE    CHKFREE       BLOCK COUNT IS RIGHT
         EDIT  (R3),L10BLK
         EDIT  (R2),L10DEB
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'       DON'T DOUBLE SPACE
         LA    R1,LINE10
         LA    R15,ERRCTL
         BAL   R14,PRINT
         SPACE
CHKFREE  FREEMAIN V,A=CKADDR
         SPACE 3
STARTCAT LA    R6,CSTBL
         USING CASCADE,R6
         LA    R1,=X'000001'      FIRST BLOCK HAS VOLUME POINTERS
         BAL   R14,LOCATE
         LR    R5,R1
         LTR   R15,R15       CHECK I/O RETURN CODE
         BNZ   CHKICE2       I/O ERROR
         USING CATQ,R5
         LH    R1,CQCYL      SAVE START CYLINDER FOR SEEK ANALYSIS
         STH   R1,CSCYL
         LA    R15,CSCUM+L'CSCUM
         LA    R0,1          COUNT THE FIRST BLOCK
         CH    R1,FHCYL           AS EITHER FH OR 0 CYLINDER
         BL    STC1               SEEK BASED ON ITS LOCATION
         CH    R1,FHCYL+2
         BH    STC1
         LA    R15,CSCUM     CATALOG STARTS ON FIXED HEAD
STC1     STH   R0,0(,R15)
         LA    R4,CQBLOCK+8       BEGINNING OF A BLOCK
         USING CATALOG0,R4
         BAL   R14,WHATBLK   DETERMINE WHAT KIND OF BLOCK WE HAVE
         LTR   R15,R15
         BZ    BADFIRST      ERROR - FIRST BLOCK CANNOT BE VCB
         BAL   R14,NXTNTRY   FIND FIRST ENTRY TYPE
         BRTBL BADFIRST,VICE=FIRSTENT
BADFIRST MVC   L7RSN,=CL50'BAD FIRST BLOCK OR ENTRY'
         B     CHKICE2       BUILD ERROR MESSAGE AND END THIS CATALOG
         SPACE 3
FIRSTENT EQU   *
         OI    CSIND,CSICE   COUNT VICE AS AN INDEX CONTROL ENTRY
         MVC   CSTTR,CQTTR
         MVC   CSTTR1,CQTTR
         MVC   CSTTR2,C0LAST
         SPACE 2
LOOP     BAL   R14,NXTNTRY
         C     R6,NODELVL    SEE IF SUFFICIENTLY QUALIFIED
         BL    BRTBL1        NO - USE LIMITED SPLITOUT TABLE
         SPACE
         BRTBL DUMP,ICE=CHKICE,IE=SETNDX,AE=ALIAS,ILE=CHAINTO,         *
               DSP=DATASET,VCB=VCBPTR,GDG=GENER,NCVOL=NEWCVOL,         *
               VICE=BADNTRY,UNK=BADNTRY,PAST=PASTBLK,NODELO=LOOP,      *
               NODEHI=PASTNODE
PASTNODE LA    R0,1          PAST NODE - COUNT THIS BLOCK AS EXHAUSTED
         A     R0,EXHCNT
         ST    R0,EXHCNT
         NI    SWB,255-GDGPROC    PAST GDG                     DM JUL82
         B     CHAINTO7
         SPACE 2
BRTBL1   BRTBL LOOP,ICE=CHKICE,IE=SETNDX,ILE=CHAINTO,GDG=GENER,        *
               VICE=BADNTRY,PAST=PASTBLK
SETNDX   BAL   R14,COMPROC   DO COMMON PROCESSING
         TM    CSIND,CSICE   SEE IF THERE WAS AN ICE
         BZ    CHAINTO3      ERROR - NO INDEX CONTROL ENTRY
         TM    SWB,GDGPROC   SEE IF WE ARE WITHIN A GDG
         BO    SETNDX8       ERROR - INDEX ENTRY DOESN'T BELONG HERE
         MVC   TTR0,C3INDEX       NEXT LOWER BLOCK
         AIF   (&MVT).P84    MCAT LOCATE WON'T WORK UNLESS MVS
         TM    CSIND,CSFIRST IS THIS THE TOP LEVEL
         BZ    SETNDX2       NO - SKIP THE CHECK
         TM    SWC,CEXIT     IS THERE AN EXIT PROGRAM
         BO    SETNDX2       YES - SKIP THE CHECK
         MVC   DSNAME,BLANKS
         MVC   DSNAME(8),CSNAME   USE TOP INDEX LEVEL
         LOCATE CAMLOC       THIS SHOULD BE AN ALIAS OF SYSCTLG.XXXXXXX
         MVC   L4MSG,L4MSG1
         LTR   R15,R15
         BNZ   SETNDX0       ASSUME NOT IN MASTER CATALOG
         MVC   L4MSG,L4MSG2
         CLC   DSNAME(7),SYSCTLG  VALIDATE ALIAS RETURNED
         BNE   SETNDX0       BAD
         CLI   DSNAME+7,C'.'
         BNE   SETNDX0       BAD
         CLC   H1SERIAL,CAMWRK+6  SEE IF CORRECT VOLUME SERIAL
         BNE   SETNDX0       NO - WRONG POINTER
         LA    R1,CAMWRK+2   DEVELOP UNIT NAME FROM DEVICE TYPE
         BAL   R14,GENERIC
         CLC   H1DEVT,DEVNAME     SEE IF CORRECT DEVICE TYPE
         BE    SETNDX2       YES - EVERYTHING IS OK
SETNDX0  MVC   L4DSN,BLANKS  ERROR - WRONG DSN RETURNED
         MVC   L4DSN(8),CSNAME    SET INDEX LEVEL
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'     DON'T DOUBLE SPACE
.P84     ANOP
SETNDX2  TM    CSIND,CSLAST  SEE IF THERE'S A LOWER LEVEL
         BZ    SETNDX5       YES
         MVC   L7RSN,=CL50'22 LEVELS OF DSNAME EXCEEDED'
         B     CHKICE2
         SPACE
SETNDX5  MVC   FROMCYL,CSCYL SAVE LATEST CYLINDER
         LR    R1,R6
         AH    R6,=Y(CSLNG)  TO NEXT LOWER BLOCK
         MVC   CSCUM(CSCUMC),CSCUM-CASCADE(R1)   PERCOLATE SEEK CNTS
         SPACE
* THE FOLLOWING CODE IS USED FOR INDEX LINK
* ENTRIES AS WELL AS INDEX ENTRIES
         SPACE
SETNDX1  LA    R1,TTR0       POINT TO NEXT (OR NEXT LOWER) BLOCK
         CLC   C3INDEX,CQTTR SEE IF THIS BLOCK POINTS TO ITSELF
         BE    SETNDX7       YES - ERROR
         BAL   R14,LOCATE    GET THE BLOCK
         LTR   R15,R15       CHECK I/O RETURN CODE
         BNZ   CHKICE2       I/O ERROR
         LR    R15,R5        SWAP R5 AND R1
         LR    R5,R1
         LR    R1,R15
         MVC   CSCYL,CQCYL   SAVE CYLINDER FOR SEEK ANALYSIS
         BAL   R14,WHATBLK   VALIDATE THE TYPE
         LTR   R15,R15
         BNZ   SETNDX6       OK - ENTRY BLOCK
         MVC   L7RSN,=CL50'A VOLUME CONTROL BLOCK WAS READ - ENTRY BLK *
                EXPECT'
         LR    R5,R1
         B     BADNTRY1
         SPACE
SETNDX6  LA    R4,CQBLOCK+8
* ANALYZE SEEK FOR AMOUNT OF HEAD MOVEMENT
         TM    SWB,SEEKREQ   SEE IF SEEK ANALYSIS
         BZ    LOOP          NO - SKIP THIS CHECKING
         LH    R1,CSCYL
         LH    R0,FROMCYL    ANALYZE 'FROM' CYLINDER
         LR    R2,R1         CALCULATE MOVEMENT
         SR    R2,R0
         LPR   R2,R2
         LA    R2,1(,R2)     COUNT FROM 1
         CH    R0,FHCYL      ANALYZE 'FROM' CYLINDER
         BL    CUMCYL1       NOT ON FIXED HEAD
         CH    R0,FHCYL+2
         BH    CUMCYL1       NOT ON FIXED HEAD
         LA    R2,1          'FROM' CYLINDER ON FIXED HEAD (NO MOVE)
CUMCYL1  CH    R1,FHCYL      ANALYZE 'TO' CYLINDER
         BL    CUMCYL2       NOT ON FIXED HEAD
         CH    R1,FHCYL+2
         BH    CUMCYL2       NOT ON FIXED HEAD
         SR    R2,R2         MOVE IS INTO FIXED HEAD AREA
         STH   R0,CSCYL      RESET 'TO' CYLINDER (USUALLY TO NON-FH)
CUMCYL2  LA    R0,1
         CH    R2,=Y(CSCUMB) SEE IF SMALL ENOUGH FOR INDIVIDUAL SUM
         BH    CUMCYL3       NO - SUM SEEKS AND TOTAL CYLS
         SLL   R2,1          DOUBLE FOR INDEX TO HALFWORDS
         AH    R0,CSCUM(R2)  SUM TOTAL SEEKS OF THIS SIZE
         STH   R0,CSCUM(R2)
         B     LOOP
         SPACE
* SEEK WAS LONG - COUNT SEEKS & TOTAL CYLINDERS MOVED
CUMCYL3  AH    R0,CSCUM+L'CSCUM*(CSCUMA-2)   SEEKS
         STH   R0,CSCUM+L'CSCUM*(CSCUMA-2)
         AH    R2,CSCUM+L'CSCUM*(CSCUMA-1)   TOTAL CYLINDERS
         STH   R2,CSCUM+L'CSCUM*(CSCUMA-1)
         B     LOOP
         SPACE
SETNDX7  MVC   L7RSN,=CL50'BLOCK POINTS TO ITSELF'
         B     CHKICE2       BACK UP ONE LEVEL
         SPACE
SETNDX8  MVC   L7RSN,=CL50'GDG INDEX POINTS TO GDG OR ILE'
         B     CHKICE2       BACK UP ONE LEVEL
         SPACE 2
CHAINTO  MVC   TTR0,C2LINK   INDEX LINK ENTRY
         TM    CSIND,CSICE   SEE IF THERE WAS AN ICE
         BZ    CHAINTO3      ERROR - NO INDEX CONTROL ENTRY
         MVC   FROMCYL,CSCYL SAVE LATEST CYLINDER
         NC    TTR0,TTR0     SEE IF ZERO
         BNZ   SETNDX1       GET NEXT BLOCK
         MVC   L4GDG,BLANKS
         TM    SWB,GDGPROC   ARE WE PROCESSING A GDG
         BZ    CHAINTO6      NO
         MVC   L4GDG,=C'(GDG)'
         NI    SWB,255-GDGPROC
         C     R6,NODELVL    SEE IF SUFFICIENTLY QUALIFIED
         BNH   CHAINTO6      NO - SKIP GDG CHECKING
         LH    R0,GDGENER    REMAINING GENERATIONS
         LTR   R0,R0
         BZ    CHAINTO6      ALL GENERATIONS ARE ACCOUNTED FOR
         SPACE
         CVD   R0,DBLWRD
         MVC   EDITWRK,EDITMSK1
         LA    R1,EDITWRK+EDZERO1      IN CASE SIGNIFICANCE FORCED
         EDMK  EDITWRK,DBLWRD
         BNM   CHAINTO5      NO SIGN NEEDED
         BCTR  R1,0          BACK UP TO LAST SUPPRESSED DIGIT
         MVI   0(R1),C'-'         FOR THE SIGN
CHAINTO5 MVC   M8CNT,EDITWRK+L'EDITWRK-L'M8CNT
         MVC   L7RSN,MSG8
         STM   R0,R15,SNAPREGS
         LA    R2,CQBLOCK
         LA    R3,L'CQBLOCK-1(,R2)
         LA    R15,4
         BAL   R14,SNAP
         BAL   R14,PRTLINE7
         LM    R0,R15,SNAPREGS
         LA    R15,8         SET RETURN CODE
         BAL   R14,SETRC
CHAINTO6 EQU   *
         CLC   CQTTR,CSTTR2
         BE    CHAINTO7      OK
         MVC   L7RSN,=CL50'END OF INDEX IS WRONG TTR'
         STM   R0,R15,SNAPREGS
         LA    R2,CQBLOCK
         LA    R3,L'CQBLOCK-1(,R2)
         LA    R15,4
         BAL   R14,SNAP
         BAL   R14,PRTLINE7
         LM    R0,R15,SNAPREGS
         LA    R15,8         SET RETURN CODE
         BAL   R14,SETRC
CHAINTO7 EQU   *
         TM    CSIND,CSFIRST SEE IF FIRST LEVEL
         BO    ENDCAT        YES - THAT'S IT
         TM    CSIND,CSNODE
         BO    *+10          NODE CHECKING - LEAVE NAME IN
         MVC   CSNAME,BLANKS      CLEAR NAME
         NI    CSIND,CSFIRST+CSLAST+CSNODE    TURN OFF MOST INDICATORS
         SH    R6,=Y(CSLNG)  BACK UP 1 LEVEL
         TM    CSIND,CSUSED  SEE IF THIS INDEX LEVEL WAS USED
         BO    CHAINTO2      YES
         C     R6,NODELVL    SEE IF THIS INDEX UNUSED DUE TO NODE
         BL    CHAINTO2      YES - SKIP ERROR MESSAGE
         TM    SWC,CEXIT     IS THERE AN EXIT PROGRAM
         BO    CHAINTO2      YES - SKIP ERROR MESSAGE
         BAL   R14,BLDSN     COMPRESS DSNAME
         MVC   L4DSN,DSNAME  BUILD PRINT LINE FOR UNUSED INDEX
         MVC   L4MSG,L4MSG3
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'     DON'T DOUBLE SPACE
         TM    SYSUT2+48,16  SEE IF OPEN
         BZ    CHAINTO2      NO - NO MACHINE-READABLE OUTPUT
         L     R7,RCDADDR
         USING RCDOUT,R7
         LA    R0,OLNG0
         STH   R0,ORDW
         MVI   OTYP,C'3'     RCD ID - UNUSED INDEX
         TM    CSIND,CSGDG   SEE IF THIS WAS A GDG
         BZ    *+8           NO
         MVI   OTYP,C'4'     RCD ID - UNUSED GDG INDEX
         MVC   ODSN,DSNAME
         PUT   SYSUT2,RCDOUT
         DROP R7
         SPACE
CHAINTO2 L     R5,CSADDR     MAKE SURE THE BLOCK'S STILL THERE
         CLC   CSTTR,CQTTR
         BE    CHAINTO1      RESET ADDRESS
         LA    R1,CSTTR      GET THE BLOCK BACK
         BAL   R14,LOCATE
         LTR   R15,R15       CHECK I/O RETURN CODE
         BNZ   CHKICE2
         ST    R1,CSADDR
CHAINTO1 L     R5,CSADDR
         LR    R4,R5
         AH    R4,CSOFFSET
         B     LOOP
         SPACE 2
CHAINTO3 MVC   L7RSN,=CL50'MISSING INDEX CONTROL ENTRY'
         B     CHKICE2
         SPACE 2
DATASET  BAL   R14,COMPROC
         TM    CSIND,CSICE   SEE IF THERE WAS AN ICE
         BZ    CHAINTO3      ERROR - NO INDEX CONTROL ENTRY
         BAL   R14,ADDSEEK   ACCUMULATE SEEKS
         LA    R0,1          ADD TO DATA SET CNT
         A     R0,CSDS
         ST    R0,CSDS
         BAL   R14,COMDS
         USING RCDOUT,R7
         LH    R0,C4VOLS     VOLUME CNT
         STH   R0,OVOLCNT
         LR    R1,R0
         MH    R1,=Y(OLNG4)  LENGTH OF VOLUME SECTION
         LA    R14,OLNG3(,R1) RECORD LENGTH
         STH   R14,ORDW
         BCTR  R1,0          DROP FOR ILC
         EX    R1,DATASET3   MOVE DATA TO RCD
         UNPK  DBLWRD(7),C4DSCB(4)     EXPAND TTR FOR PRINT
         TR    DBLWRD(6),HEXTBL
         MVC   L1TTR,DBLWRD
         CLC   L1TTR,=C'000000'        SEE IF ZERO
         BNE   *+10                    NO
         MVC   L1TTR,BLANKS            BLANK WHEN ZERO
         B     DATASET4      TO COMMON PROCESS
         SPACE
DATASET3 MVC   ODEVTYPE(0),C4VOLUME
         SPACE 2
* THIS CODE IS SHARED WITH THE VCB ROUTINE
DATASET4 LA    R1,ODEVTYPE   GET DEVICE TYPE OF FIRST VOLUME
         BAL   R14,GENERIC
         MVC   ODEVNAME,DEVNAME
         TM    SWC,CEXIT     SEE IF USER EXIT
         BZ    DATASETE      NO
         LA    R0,ODSN       BUILD PARAMETER LIST FOR USER PROGRAM
         ST    R0,USERPARM   DSNAME
         LA    R0,ODEVNAME
         ST    R0,USERPARM+4 DEVICE NAME
         LA    R0,OVOLCNT
         ST    R0,USERPARM+8 VOLUME COUNT
         LA    R0,ODEVTYPE
         ST    R0,USERPARM+12     VOLUME DATA
         OI    USERPARM+12,X'80'  SET END FLAG
         LA    R1,USERPARM
         L     R15,EXITADDR
         BALR  R14,R15
         LTR   R15,R15
         BNZ   LOOP          USER WANTS TO SKIP THIS LINE
         SPACE 2
DATASETE BAL   R14,DSCBPTR   CHECK CATALOG POINTER TO VTOC
         TM    SYSUT2+48,16  SEE IF OPEN
         BZ    DATASET5      NO
         PUT   SYSUT2,RCDOUT
         SPACE 2
DATASET5 MVC   L1DSN,DSNAME  BUILD PRINT LINE
         MVC   L1DEVT,DEVNAME
         LA    R0,1
         A     R0,CATDS      STEP CATALOGUED DATASET COUNT
         ST    R0,CATDS
         LA    R2,L1VOLS
         LA    R3,ODEVTYPE
         LA    R0,L'L1VOLS
         LA    R15,LINE1     START PRINTING VOLUME SERIAL DATA
         ST    R15,CURRLINE
         LH    R15,OVOLCNT
         STH   R15,WRKCNT
         LTR   R15,R15
         BNP   DATASET9      NO VOLUMES
         SPACE
DATASET6 LR    R1,R3
         CLC   ODEVTYPE,0(R3)     SEE IF DEVICE TYPE HAS CHANGED
         BE    DATASETA      NO
         BAL   R14,GENERIC   YES - GET NEW NAME
         LA    R14,DEVNAME+7
         LA    R15,10        MAX LENGTH
         SPACE
DATASETB CLI   0(R14),C' '
         BNE   DATASETC
         BCTR  R15,0
         BCT   R14,DATASETB
         SPACE
DATASETC SR    R0,R15        SEE IF ROOM IN THIS LINE
         BM    DATASET8      NO
         MVI   0(R2),C'('    BUILD DEVICE NAME
         BCTR  R15,0         FOR ILC
         EX    R15,DATASETD  MOVE NAME
         AR    R2,R15
         MVI   0(R2),C')'
         LA    R2,1(,R2)
DATASETA BAL   R14,SETVOL    SET UP VOLUME AND FILE NUMBER
         CLC   WRKCNT,=H'1'  ARE WE ON LAST VOLUME
         BNE   *+6           NO
         BCTR  R15,0         YES - DROP FINAL COMMA
         SR    R0,R15        SEE IF THIS LINE HAS ROOM
         BNP   DATASET8      NO
         BCTR  R0,0
         LTR   R15,R15
         BM    *+8           LENGTH EXHAUSTED - SKIP
         EX    R15,DATASET7  MOVE DATA TO THE LINE
         LA    R2,1(R2,R15)  STEP ADDRESS
         LA    R3,OLNG4(,R3) TO NEXT VOLUME ENTRY
         LH    R15,WRKCNT    DECREMENT VOLUME COUNT
         SH    R15,=H'1'
         STH   R15,WRKCNT
         BP    DATASET6      SOME TO GO
         B     DATASET9      WRITE LAST
         SPACE
DATASET7 MVC   0(0,R2),VOLAREA
DATASETD MVC   1(0,R2),DEVNAME
         SPACE
DATASET8 LA    R15,PRTCTL    PRINT THE CURRENT LINE
         L     R1,CURRLINE
         C     R1,=A(LINE1)  SEE IF LINE1
         BNE   *+10          NO
         MVC   PRTCTL3,=H'-1'     YES - DOUBLE SPACE NOW
         BAL   R14,PRINT
         MVC   L2VOLS,BLANKS
         LA    R2,L2VOLS     PUT THE REST OF THE VOLUMES
         LA    R0,L'L2VOLS        ON A CONTINUATION LINE
         LA    R15,LINE2
         ST    R15,CURRLINE
         B     DATASET6
         SPACE
DATASET9 LA    R15,PRTCTL
         L     R1,CURRLINE   PRINT THE CURRENT LINE
         BAL   R14,PRINT
         MVC   L1VOLS,BLANKS
         MVC   L1TTR,BLANKS
         B     LOOP
         SPACE 2
GENER    BAL   R14,COMPROC
         TM    SWB,GDGPROC   SEE IF WE WERE ALREADY WITHIN A GDG
         BO    SETNDX8       ERROR - GDG ENTRY DOESN'T BELONG HERE
         OI    SWB,GDGPROC
         MVC   GDGENER,C6UNK GENERATIONS CATALOGUED
         OI    CSIND,CSGDG   SHOW THAT THIS WAS A GDG
         TM    CSIND,CSICE   SEE IF THERE WAS AN ICE
         BZ    CHAINTO3      ERROR - NO INDEX CONTROL ENTRY
         MVC   TTR0,C6ADDR
         C     R6,NODELVL    SEE IF SUFFICIENTLY QUALIFIED
         BL    SETNDX2       NO - SKIP PRINT
         BAL   R14,BLDSN     COMPRESS DSNAME
         TM    SYSUT2+48,16  SEE IF OPEN
         BZ    GENER2        NO - SKIP RCD BUILD
         L     R7,RCDADDR
         USING RCDOUT,R7
         LA    R0,OLNG2
         STH   R0,ORDW
         MVI   OTYP,C'1'     RCD ID - GDG
         MVC   ODSN,DSNAME
         MVC   OLVL,DSLEVEL
         LA    R0,22         MOVE DSNAME STRUCTURE
         LA    R1,ODSNAME
         LA    R2,CSTBL+CSNAME-CASCADE
GENER1   MVC   0(8,R1),0(R2)
         LA    R1,8(,R1)     TO NEXT LEVEL
         AH    R2,=Y(CSLNG)
         BCT   R0,GENER1
         SPACE
         SR    R0,R0
         IC    R0,C6CURR     CURRENT DATA SET COUNT
         STH   R0,OCURNTRY
         SR    R0,R0
         IC    R0,C6MAX      MAX ALLOWED
         STH   R0,OENTRY
         MVI   OEMPTY,C' '
         TM    C6FLAGS,C6EMPTY
         BZ    *+8
         MVI   OEMPTY,C'E'
         MVI   ODELETE,C' '
         TM    C6FLAGS,C6DELETE
         BZ    *+8
         MVI   ODELETE,C'D'
         PUT   SYSUT2,RCDOUT
         DROP  R7
         SPACE
GENER2   MVC   L3DSN,DSNAME  BUILD PRINT LINE
         SR    R0,R0
         IC    R0,C6MAX
         CNVT  (R0),L3NTRY
         SR    R0,R0
         IC    R0,C6CURR     CURRENT DATA SET COUNT
         CNVT  (R0),L3CURR
         A     R0,CATGDS     STEP CATALOGUED GDS CNT
         ST    R0,CATGDS
         LA    R0,1          STEP GDG INDEX COUNT
         A     R0,GDGCNT
         ST    R0,GDGCNT
         LA    R1,L3DEL
         MVC   L3DEL,BLANKS
         TM    C6FLAGS,C6DELETE
         BO    GENER3        DELETE ON
         MVC   0(2,R1),=C'NO'     SET NODELETE
         LA    R1,2(,R1)
GENER3   MVC   0(6,R1),=C'DELETE'
         LA    R1,7(,R1)
         TM    C6FLAGS,C6EMPTY
         BO    GENER4        EMPTY ON
         MVC   0(2,R1),=C'NO'     SET NOEMPTY
         LA    R1,2(,R1)
GENER4   MVC   0(5,R1),=C'EMPTY'
         TM    SWC,CEXIT     IS THERE AN EXIT PROGRAM
         BO    SETNDX2       YES - DON'T PRINT GDG DATA
         LA    R1,LINE3
         LA    R15,PRTCTL
         BAL   R14,PRINT
         CLI   GDGLIM,255
         BE    SETNDX2       NOT INTERESTED IN GDG ERRORS
         TM    C6FLAGS,C6DELETE
         BZ    GENER5        NO DELETE - PRINT ERROR
         CLC   C6CURR,GDGLIM
         BH    GENER5        OVER MAX DATASETS - PRINT AS ERROR
         B     SETNDX2
         SPACE
GENER5   LA    R1,LINE3
         LA    R15,ERRCTL
         BAL   R14,PRINT
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'     DON'T DOUBLE SPACE
         B     SETNDX2
         SPACE 3
VCBPTR   BAL   R14,COMPROC
         TM    CSIND,CSICE   SEE IF THERE WAS AN ICE
         BZ    CHAINTO3      ERROR - NO INDEX CONTROL ENTRY
         BAL   R14,ADDSEEK   ACCUMULATE SEEKS
         LA    R0,1          VOLUME CONTROL BLOCK POINTER
         A     R0,CSDS
         ST    R0,CSDS
         BAL   R14,COMDS
         USING RCDOUT,R7
         LA    R1,C5ADDR
         SR    R2,R2         SET VOLUME COUNT
         LA    R8,ODEVTYPE
VCBPTR3  BAL   R14,LOCATE    GET A VOLUME CONTROL BLOCK
         LTR   R15,R15       CHECK I/O RETURN CODE
         BNZ   BADNTRY1      I/O ERROR
         L     R15,CQLO-CATQ(,R1) MAKE THIS THE OLDEST BLOCK
         ST    R15,LATESTCQ  ON THE QUEUE
         LR    R3,R5
         LR    R5,R1
         BAL   R14,WHATBLK   DETERMINE BLOCK TYPE
         LR    R5,R3
         LA    R0,1
         A     R0,VCBCNT     STEP VCB CNT
         ST    R0,VCBCNT
         LA    R1,CQBLOCK-CATQ+8(,R1)
         USING CATALOG7,R1
         LTR   R15,R15
         BZ    VCBPTR7       VCB
         MVC   L7RSN,=CL50'AN ENTRY BLOCK WAS READ - VOLUME CONTROL BLK*
                EXPCTD'
         B     BADNTRY1
VCBPTR7  LTR   R2,R2         SEE IF VOLUME COUNT SET
         BNZ   VCBPTR4       YES
         LH    R2,C7CNT      NO - THIS IS FIRST VCB
         STH   R2,OVOLCNT
VCBPTR4  CLC   C7CNT,=H'20'
         BNH   VCBPTR5       THIS IS LAST VCB
         MVC   0(240,R8),C7VOLUME
         LA    R8,240(,R8)
         LA    R1,C7CHAIN
         B     VCBPTR3       GET NEXT VCB
         SPACE
VCBPTR5  LH    R15,C7CNT
         MH    R15,=H'12'
         BCTR  R15,0         DEVELOP ILC
         EX    R15,VCBPTR6
         LH    R14,OVOLCNT
         MH    R14,=Y(OLNG4) DEVELOP RDW
         LA    R14,OLNG3(,R14)
         STH   R14,ORDW
         B     DATASET4
         SPACE
VCBPTR6  MVC   0(0,R8),C7VOLUME
         DROP  R1
         SPACE 3
CHKICE   TM    CSIND,CSICE   INDEX CONTROL ENTRY ROUTINE
         BO    CHKICE1       ERROR - MORE THAN 1 ICE IN A CHAIN
         OI    CSIND,CSICE
         MVC   CSTTR,CQTTR
         MVC   CSTTR1,CQTTR
         MVC   CSTTR2,C1LAST
         LA    R15,CSTBL     CHECK FOR LOOPS IN THE INDEX STRUCTURE
         SPACE
CHKICE3  CR    R15,R6        SEE IF UP TO CURRENT LEVEL
         BNL   LOOP          YES
         CLC   CQTTR,CSTTR1-CASCADE(R15)
         BE    CHKICE4       IT LOOPS
         LA    R15,CSLNG(,R15)    TO NEXT LOWER ENTRY
         B     CHKICE3
         SPACE
CHKICE4  MVC   L7RSN,=CL50'TTR''S IN CATALOG FORM A LOOP'
         B     CHKICE2
         SPACE
CHKICE1  MVC   L7RSN,=CL50'UNEXPECTED INDEX CONTROL ENTRY'
         SPACE
* THE FOLLOWING CODE IS COMMON TO SEVERAL ERRORS
CHKICE2  STM   R0,R15,SNAPREGS    REGISTERS BEFORE ANY SNAP PREPARATION
         LA    R2,CQBLOCK
         LA    R3,L'CQBLOCK-1(,R2)
         LA    R15,4         INDICATE STORAGE SNAP
         BAL   R14,SNAP
         BAL   R14,PRTLINE7
         LM    R0,R15,SNAPREGS    RESTORE REGISTERS
         LA    R15,8         SET RETURN CODE
         BAL   R14,SETRC
         MVC   CSNAME,BLANKS CLEAR CASCADE ENTRY
         NI    CSIND,CSFIRST+CSLAST    TURN OFF MOST SWITCHES
         NI    SWB,255-GDGPROC
         TM    CSIND,CSFIRST SEE IF TOP LEVEL
         BO    ENDCAT        WRAP UP CATALOG
         SH    R6,=Y(CSLNG)  BACK UP ONE LEVEL AND START FROM THERE
         B     CHAINTO2
         SPACE 3
BADNTRY  MVC   L7RSN,=CL50'UNIDENTIFIED ENTRY OR EXTRA VOLUME INDEX CNT*
               L NTRY'
         CLC   C0NAME(12),UNUSED  SEE IF ALL ZERO
         BE    CHKICE2       YES - BACK UP A LEVEL
* THE FOLLOWING CODE IS COMMON TO SEVERAL ERRORS
BADNTRY1 STM   R0,R15,SNAPREGS
         LA    R2,CQBLOCK
         LA    R3,L'CQBLOCK-1(,R2)
         LA    R15,4
         BAL   R14,SNAP
         BAL   R14,PRTLINE7
         LM    R0,R15,SNAPREGS
         LA    R15,8         SET RETURN CODE
         BAL   R14,SETRC
         B     LOOP          TO NEXT ENTRY
         SPACE 3
PASTBLK  MVC   L7RSN,=CL50'PAST END OF CATALOG BLOCK'
         B     CHKICE2       BACK UP A LEVEL
         SPACE 3
ALIAS    TM    CSIND,CSFIRST SEE IF TOP (VOLUME INDEX) LEVEL
         BZ    ALIAS1        ERROR - ALIAS MUST BE AT TOP LEVEL
         MVC   M5ALIAS,C8NAME     LIST ALIAS ENTRY
         MVC   M5INDEX,C8TRUE
         MVC   L1DSN,MSG5
         MVC   L1DEVT,BLANKS
         LA    R1,LINE1
         LA    R15,PRTCTL
         BAL   R14,PRINT     PRINT THE LINE
         B     LOOP
         SPACE
ALIAS1   MVC   L7RSN,=CL50'ALIAS ENTRY NOT IN VOLUME INDEX'
         B     CHKICE2       PRINT ERROR & BACK UP A LEVEL
         SPACE 3
NEWCVOL  TM    CSIND,CSFIRST SEE IF TOP (VOLUME INDEX) LEVEL
         BZ    NEWCVOL1      ERROR - CVOL MUST BE AT TOP LEVEL
         MVC   M6INDEX,C9NAME     LIST NEW CVOL ENTRY
         MVC   L1DSN,MSG6
         LA    R1,C9DEVTYP
         BAL   R14,GENERIC   CONVERT DEVICE TYPE TO NAME
         MVC   L1DEVT,DEVNAME
         MVC   L1VOLS(6),C9SERIAL VOLUME SERIAL
         LA    R1,LINE1
         LA    R15,PRTCTL
         BAL   R14,PRINT     PRINT THE LINE
         MVC   L1VOLS,BLANKS
         B     LOOP
         SPACE
NEWCVOL1 MVC   L7RSN,=CL50'CVOL ENTRY NOT IN VOLUME INDEX'
         B     CHKICE2       PRINT ERROR & BACK UP A LEVEL
         SPACE 3
ENDCAT   EQU   *
         CLOSE MF=(E,OPENLST1)
         CLI   RNAME1,C' '   SEE IF ANY ENQ                    DM OCT82
         BE    CATEND4       NO
         DEQ   MF=(E,ENQ3)   MINOR IS ZEROS & UCB ADDRESS      DM OCT82
         DEQ   MF=(E,ENQ2)   MINOR IS 'SYSCTLG' & UCB ADDRESS  DM OCT82
         DEQ   MF=(E,DEQ1)   MINOR IS QUALIFIER & UCB ADDRESS  DM OCT82
         MVI   RNAME1,C' '   SHOW NO CURRENT ENQ               DM OCT82
CATEND4  TM    SWB,NODE+NODEFND
         BNM   CATEND3       NEITHER OR BOTH - OK
         MVC   L5DATA,=CL80'NODE NOT FOUND'
         MVI   L5CC,C' '
         TM    SYSPRINT+48,16
         BZ    CATEND2       NOT OPEN
         PUT   SYSPRINT,LINE5
CATEND2  TM    SYSERROR+48,16
         BZ    NODEQ         NOT OPEN
         PUT   SYSERROR,LINE5
         B     NODEQ
CATEND3  L     R0,EXHCNT     DEVELOP STATISTICS - BLOCKS IN USE
         A     R0,VCBCNT
         EDIT  (R0),T1BLKU
         TM    SWB,NODE      SEE IF PROCESSING A NODE
         BZ    *+10          NO
         MVC   T1BLKU,=CL6'N/A'   INDICATE BLOCKS IN USE               *
                                       'NOT APPLICABLE'
         TM    SWB,BCHECK    SEE IF CHECKING
         BZ    CATEND1       NO
         L     R0,DEBLK
         S     R0,UNUSEDCT   DEVELOP COUNT OF BLOCKS IN USE
         EDIT  (R0),T1BLKU
         SPACE 2
CATEND1  L     R1,QADDR+4    LENGTH OF QUEUE AREA
         SR    R0,R0
         LA    R15,CQLNG
         DR    R0,R15        NUMBER OF QUEUE BLOCKS
         EDIT  (R1),T1BLKW
         MVI   T1BLKR-1,C' '
         L     R0,READCNT    DEVELOP BLOCKS REREAD
         S     R0,EXHCNT
         S     R0,VCBCNT
         EDIT  (R0),T1BLKR
         BNM   *+8
         MVI   T1BLKR-1,C'-'
         EDIT  DEBLK,T1BLK
         MVC   T1DSCBX,BLANKS     CLEAR THIS AREA
         L     R0,FIXCNT     SEE IF ANY OF
         A     R0,SUPCNT          THESE TOTALS
         BZ    NODSCB1       NO
         MVC   T1DSCBX,T1DSCB
         EDIT  FIXCNT,T1DSCB1-T1DSCB+T1DSCBX
         EDIT  SUPCNT,T1DSCB2-T1DSCB+T1DSCBX
NODSCB1  LA    R1,TOTAL1
         LA    R15,PRTCTL
         MVC   PRTCTL3,=H'-1'     FORCE DOUBLE SPACE
         BAL   R14,PRINT     PRINT THE LINE
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'-1'    FORCE DOUBLE SPACE
         LA    R15,ERRCTL
         BAL   R14,PRINT     PRINT THE LINE
         MVC   T2SEEK,BLANKS
         TM    SWB,SEEKREQ   SEE IF SEEK ANALYSIS
         BZ    *+10          NO
         MVC   T2SEEK,T2MSG  HEADING FOR SEEK DATA
         LA    R15,PRTCTL
         LA    R1,TOTAL2
         MVC   PRTCTL3,=H'-1'     FORCE DOUBLE SPACE
         BAL   R14,PRINT     PRINT THE LINE
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'-1'    FORCE DOUBLE SPACE
         LA    R15,ERRCTL
         BAL   R14,PRINT     PRINT THE LINE
         LA    R2,22         MAX LEVELS
         LA    R6,CSTBL      FIRST LEVEL
         LA    R3,1          CALL TOP LEVEL 1
         L     R1,=A(CYLACCUM)    INITIALIZE SEEK PRINT CONTROL
         USING CYLACCUM,R1        (WHICH MAY OR MAY NOT BE USED)
         ST    R1,SEEKPTR
         LA    R0,CSCUMA-1   NUMBER OF COUNTERS
         STH   R0,SEEKCNT
         DROP  R1
         SPACE
TOTLOOP1 EDIT  (R3),T3LVL,J=RT         LEVEL NUMBER
         EDIT  CSDS,T3DS,J=RT          DATA SET COUNT
         L     R0,CSTOTAL    ENTRIES AT THIS LEVEL
         LTR   R0,R0
         BNP   TOTLPEND      NO ENTRIES - MUST BE LAST
         S     R0,CSDS       MINUS DATA SETS
         EDIT  (R0),T3IND,J=RT         INDICES AT THIS LEVEL
         MVC   T3SDATA,BLANKS     CLEAR OUT OLD DATA
         STM   R14,R6,12(R13)
         PUSH  USING
         TM    SWB,SEEKREQ   SEE IF THIS ANALYSIS WANTED
         BZ    SEEKEND       NO
         L     R0,CATDS
         LTR   R0,R0
         BNP   SEEKEND       NO DATASETS SELECTED - SKIP STATISTICS
         L     R2,=A(CYLACCUM)
         USING CYLACCUM,R2
         L     R3,SEEKPTR    NEXT COUNTER
         LH    R4,SEEKCNT    REMAINING COUNTERS
         LA    R5,T3SDATA
         USING T3SEEK,R5
         LA    R6,L'T3SDATA/T3SLNG
         SPACE
SEEKLOOP LTR   R4,R4
         BNP   SEEKEND       OUT OF COUNTERS
         L     R15,0(,R3)
         LTR   R15,R15
         BNZ   SEEKNEXT      USE THIS COUNTER
         LA    R3,L'CYLACCUM(,R3) SKIP THIS COUNTER
         BCTR  R4,0
         B     SEEKLOOP
SEEKNEXT CH    R4,=H'1'      SEE IF LAST COUNTERS
         BNE   *+8           NO
         L     R15,4(,R3)    TOTAL CYLINDERS ON LONG SEEKS
         M     R14,=F'20000' SCALE FOR FRACTION
         CH    R4,=H'1'      SEE IF LAST COUNTERS
         BNE   *+10          NO
         D     R14,0(,R3)    NUMBER OF LONG SEEKS
         SR    R14,R14       CLEAR REMAINDER
         D     R14,CATDS
         AH    R15,=H'1'     ROUND
         SRA   R15,1              OFF
         EDIT  (R15),T3AVG,MSK=2
         LR    R15,R3        DEVELOP ADDRESS OF DESCRIPTION
         SR    R15,R2
         SRA   R15,2
         MH    R15,=Y(L'CYLDESC)
         LA    R15,CYLDESC(R15)
         MVC   T3DESC,0(R15)
         LA    R3,L'CYLACCUM(,R3) NEXT COUNTERS
         LA    R5,T3SLNG(,R5)
         ST    R3,SEEKPTR
         BCTR  R4,0
         STH   R4,SEEKCNT
         BCT   R6,SEEKLOOP
SEEKEND  LM    R14,R6,12(R13)
         POP   USING
         SPACE 2
         LA    R1,TOTAL3
         LA    R15,PRTCTL
         MVC   PRTCTL3,=H'5' SUPPRESS DOUBLE SPACE
         BAL   R14,PRINT     PRINT THE LINE
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'     DON'T DOUBLE SPACE
         LA    R15,ERRCTL
         BAL   R14,PRINT     PRINT THE LINE
         LA    R3,1(,R3)     STEP THE LEVEL
         AH    R6,=Y(CSLNG)  TO NEXT LEVEL
         BCT   R2,TOTLOOP1
         SPACE
TOTLPEND EQU   *
         EDIT  CATDS,T4TOT
         EDIT  CATGDS,T4GDS
         EDIT  GDGCNT,T4GDG
         EDIT  VCBCNT,T4VCB
         LA    R1,TOTAL4
         LA    R15,PRTCTL
         MVC   PRTCTL3,=H'-1'     FORCE DOUBLE SPACE
         BAL   R14,PRINT     PRINT THE LINE
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'-1'    FORCE DOUBLE SPACE
         LA    R15,ERRCTL
         BAL   R14,PRINT     PRINT THE LINE
         SPACE
NODEQ    TM    SWC,CEXIT     SEE IF USER EXIT
         BZ    NOUSER        NO
         LA    R0,BLANKS     CALL THE USER PROGRAM WITH A BLANK
         ST    R0,USERPARM        DSN TO SIGNIFY THE END OF THE
         LA    R1,USERPARM             CATALOG
         L     R15,EXITADDR
         BALR  R14,R15
         DELETE EPLOC=EXITNAME    REMOVE IT
NOUSER   EQU   *
         AIF   (&MVT).P91
         CLI   DYNDDN1,C' '  SEE IF CATALOG WAS DYNAMICALLY ALLOCATED
         BE    CHKSYSIN      NO
         MVC   DYNDDN3,DYNDDN1    DDNAME FOR DEALLOCATE
         LA    R1,DYNPTR2    DEALLOCATE THE CATALOG
         SVC   99
         MVI   DYNDDN1,C' '  SET DDN TO SHOW NOT USED
.P91     ANOP
CHKSYSIN TM    SYSIN+48,16   SEE IF OPEN
         BO    GETIN         YES
         SPACE 3
CLOSEOUT CLOSE (SYSUT1,,SYSUT2,,SYSPRINT,,SYSERROR,,SNAPDUMP,,SYSIN)
         IFPOOL SYSUT2
         IFPOOL SYSPRINT
         IFPOOL SYSERROR
         IFPOOL SYSIN
         L     R1,VOLTBL     SEE IF ANY ALLOCATION FOR DSCB CHECK
         LTR   R1,R1
         BZ    NOVOLT        NO TABLE
         L     R2,VOLT1ST    FIRST ENTRY
         LH    R3,VOLTCNT
         USING VOLNTRY,R2
         SPACE
DEALLOOP MVC   DYNDDN3,VOLDDN
         LA    R1,DYNPTR2
         SVC   99
         LA    R2,VOLLNG(,R2)
         BCT   R3,DEALLOOP
         DROP  R2
         L     R1,VOLTBL
         LH    R0,VOLTLNG
         FREEMAIN R,LV=(0),A=(1)
         SR    R0,R0         ZERO THE CONTROL FOR THIS TABLE
         ST    R0,VOLTBL
         ST    R0,VOLT1ST
         STH   R0,VOLTLNG
         STH   R0,VOLTCNT
NOVOLT   EQU   *
         AIF   (&MVT).P98                                      DM JUN82
         TM    SWA,ANOTAUTH  SEE IF AUTHORIZED                 DM JUN82
         BO    NOTAUTH1      NO                                DM JUN82
         LA    R0,X'2A'      OKSWAP SYSEVENT CODE              DM JUN82
         SR    R1,R1                                           DM JUN82
         SVC   95            SYSEVENT SVC                      DM JUN82
NOTAUTH1 EQU   *                                               DM JUN82
.P98     ANOP  ,
         LH    R15,RC        GET RETURN CODE
         L     R13,4(,R13)        HIGHER SAVE AREA
         LM    R0,R12,20(R13)     RESTORE THE ENTRY REGISTERS
         L     R14,12(,R13)  GET RETURN ADDRESS
         BR    R14           RETURN
         TITLE 'OS CVOL LISTING PROGRAM - SUBROUTINES'
* GET DEVTYPE & CALCULATE BLKS/TRK FOR A DDNAME
* DDNAME PTR IN R1, RETURN IS R14
* ON RETURN R0 HAS BLKS/TRK
         SPACE
CALCBLK  STM   R14,R1,12(R13)     SAVE REGS
         DEVTYPE (1),DEVTYPE,DEVTAB
         TM    DEVTYPE+17,X'10'   SEE IF MODULO DEVICE         DM JAN81
         BO    CALCBLK5      YES - SEPARATE FORMULA            DM JAN81
         LH    R1,DEVTYPE+12      CALCULATE BLKS/TRK - TRACK LENGTH
         N     R1,=XL4'FFFF' IN CASE > 32767                   DM JAN81
         TM    DEVTYPE+17,X'08'
         BO    CALCBLK1      BLOCK OVERHEAD IS 2 BYTES
         SR    R0,R0         ADD DIFFERENCE BETWEEN BLOCK OVERHEAD AND
         IC    R0,DEVTYPE+14           LAST BLOCK OVERHEAD
         AR    R1,R0
         IC    R0,DEVTYPE+15           LAST BLOCK OVERHEAD
         SR    R1,R0
CALCBLK1 LA    R15,264       KL+DL FOR DIRECTORY BLOCK
         TM    DEVTYPE+17,X'01'
         BZ    CALCBLK2      NO TOLERANCE FACTOR
         SR    R1,R15        ADJUST TRACK LENGTH
         MH    R15,DEVTYPE+18     TOLERANCE
         SRA   R15,9         DIVIDE BY 512
         AR    R1,R15        ADJUST TRACK LENGTH
CALCBLK2 TM    DEVTYPE+17,X'08'
         BO    CALCBLK3      BLOCK OVERHEAD IS 2 BYTES
         IC    R0,DEVTYPE+14
         AR    R15,R0        ADD BLOCK OVERHEAD TO KL+DL
         B     CALCBLK4
CALCBLK3 AH    R15,DEVTYPE+14     ADD BLOCK OVERHEAD TO KL+DL
CALCBLK4 SR    R0,R0
         DR    R0,R15        QUOTIENT IS BLOCKS PER TRACK
         B     CALCBLK9                                        DM JAN81
         SPACE ,                                               DM JAN81
* MODULO DEVICE (3375 & 3380) CALCULATION                      DM JAN81
CALCBLK5 LA    R1,8          KEY LENGTH                        DM JAN81
         AH    R1,DEVTYPE+18 KEY OR DATA OVERHEAD              DM JAN81
         SR    R0,R0                                           DM JAN81
         SR    R14,R14                                         DM JAN81
         IC    R14,DEVTYPE+16     MODULUS                      DM JAN81
         DR    R0,R14        APPLY                             DM JAN81
         MR    R0,R14             MODULUS                      DM JAN81
         LR    R15,R1        SAVE BYTES REQ'D FOR KEY          DM JAN81
         LA    R1,256        DATA LENGTH                       DM JAN81
         AH    R1,DEVTYPE+18 KEY OR DATA OVERHEAD              DM JAN81
         SR    R0,R0                                           DM JAN81
         DR    R0,R14        APPLY                             DM JAN81
         MR    R0,R14             MODULUS                      DM JAN81
         AR    R15,R1        ADD BYTES REQ'D FOR DATA          DM JAN81
         AH    R15,DEVTYPE+14     BLOCK OVERHEAD               DM JAN81
         LH    R1,DEVTYPE+12      TRACK LENGTH                 DM JAN81
         N     R1,=XL4'FFFF' IN CASE > 32767                   DM JAN81
         SR    R0,R0                                           DM JAN81
         DR    R0,R15        QUOTIENT IS DIR'Y BLOCKS PER TRK  DM JAN81
         SPACE ,                                               DM JAN81
CALCBLK9 ST    R1,20(,R13)   R0 POSITION OF SAVE AREA          DM JAN81
         LM    R14,R1,12(R13)     RESTORE REGS
         BR    R14           RETURN
         SPACE 3
* DETERMINE IF AN 8-BYTE FIELD CONTAINS NATIONAL CHARACTERS,
* NUMBERS & BLANKS OR IF THE NAME IS A VALID GDG SIMPLE NAME
* R1 POINTS TO THE 8 BYTES, R14 IS RETURN - IF CC = 0,
* IT WAS VALID, OTHERWISE NOT
* IF THE NAME IS A VALID GDG SIMPLE NAME (GENERATION NUMBER)
* THEN THE UNINVERTED NAME WILL BE IN DBLWRD
         SPACE
CHKNAME  STM   R2,R3,28(R13) SAVE REGS
         LR    R3,R1
         CLI   0(R1),C'0'
         BNL   CHKNAME8      INVALID
         TRT   0(8,R3),NATIONAL
         BZ    CHKNAME9      OK
         CLI   0(R3),C'G'    SEE IF GDG SIMPLE NAME
         BNE   CHKNAME8      INVALID
         CLI   5(R3),C'V'
         BNE   CHKNAME8      INVALID
         MVC   DBLWRD,0(R3)
         XC    DBLWRD+1(4),=X'FFFFFFFF'     DE-INVERT GENERATION
         TRT   DBLWRD,NATIONAL
         BZ    CHKNAME9      OK
CHKNAME8 LPR   R3,R3         SET CC NOT = 0
         B     CHKNAMEZ
CHKNAME9 SR    R3,R3         SET CC = 0
CHKNAMEZ LM    R2,R3,28(R13) RESTORE REGS
         BR    R14           RETURN
         SPACE 3
* RECHAIN A CATALOG QUEUE BLOCK TO BE THE NEWEST
* R1 POINTS TO THE BLOCK - R14 IS RETURN
         SPACE
RECHAIN  STM   R1,R3,24(R13)           SAVE REGISTERS
         SPACE
         L     R2,LATESTCQ   SEE IF ALREADY POSITIONED IN CHAIN
         CR    R2,R1
         BE    RECH99        ALREADY AT HEAD OF THE CHAIN
         C     R2,CQLO-CATQ(,R1)       SEE IF OLDEST
         BE    RECH98             YES - CHANGE LATEST POINTER TO HERE
         SPACE
         L     R2,CQHI-CATQ(,R1)       PULL BLOCK OUT OF THE CHAIN
         L     R3,CQLO-CATQ(,R1)       BY CHAINING THE NEXT OLDER
         ST    R3,CQLO-CATQ(,R2)       AND NEXT NEWER BLOCKS TOGETHER
         ST    R2,CQHI-CATQ(,R3)
         SPACE
         L     R2,LATESTCQ             NEWEST BLOCK - INSERT THE
         L     R3,CQHI-CATQ(,R2)       OLDEST BLOCK - REQUESTED BLOCK
         ST    R1,CQHI-CATQ(,R2)                      BETWEEN THE TWO
         ST    R1,CQLO-CATQ(,R3)
         ST    R2,CQLO-CATQ(,R1)       POINT TO NEXT OLDER
         ST    R3,CQHI-CATQ(,R1)       POINT TO OLDEST
RECH98   ST    R1,LATESTCQ             ANCHOR NEWEST HERE
RECH99   LM    R1,R3,24(R13)           RESTORE REGISTERS
         BR    R14                     RETURN
         SPACE 3
* GET THE DESIRED CATALOG BLOCK - EITHER LOCATE IT IN THE QUEUE OR
* READ IT FROM THE CATALOG (INTO THE OLDEST CATALOG QUEUE BLOCK)
* R1 POINTS TO TTR - R14 IS RETURN (ON RETURN R1 POINTS TO THE BLOCK)
         SPACE
LOCATE   STM   R14,R5,LOCSAVE     SAVE THE REGISTERS
         MVC   TTR0,0(R1)    TTR TO POINT AREA
         CLI   2(R1),0       SEE IF RCD 0
         BE    LOC96         YES - ERROR
         CLC   2(1,R1),BLKS1+3
         BH    LOC96         ERROR - RECORD NUMBER TOO BIG
         CLC   DEBTRK,TTR0   TRACKS IN CATALOG VS. TT
         BNH   LOC96         TT OFF END OF CATALOG
LOC5     L     R15,LATESTCQ       MOST RECENTLY USED
         USING CATQ,R15
         SPACE
LOC1     CLC   CQTTR,TTR0    SEE IF THIS QUEUE BLOCK IS THE ONE WE WANT
         BE    LOC2          THIS IS IT
*        CLI   CQTTR+2,0     SEE IF RCD 0
*        BE    LOC3          THIS BLOCK EMPTY - ALL PAST IT EMPTY TOO
         L     R15,CQLO      TO NEXT OLDER
         C     R15,LATESTCQ       SEE IF WRAP-AROUND (CIRCULAR CHAIN)
         BNE   LOC1               NO - LOOK AT IT
         SPACE
* BLOCK IS NOT ON THE QUEUE AND MUST BE READ
LOC3     L     R15,CQHI      POINT TO THE OLDEST
         ST    R15,LATESTCQ  MAKE IT THE NEWEST
         MVC   CQTTR,TTR0    SET TTR
         LA    R2,CQBLOCK    READ AREA FOR THE BLOCK
         DROP  R15
         POINT SYSUT1,TTR0   POINT TO THE DESIRED BLOCK
         READ  DECB1,SF,,(R2),MF=E     AND READ IT
         CHECK DECB1
         L     R15,LATESTCQ  ADDRESS CATALOG BLOCK AREA
         USING CATQ,R15
         MVC   CQCYL,SYSUT1+8     SAVE CYLINDER FORM DA ADDRESS
         DROP  R15
         LA    R0,1          STEP READ COUNT
         A     R0,READCNT
         ST    R0,READCNT
         L     R1,LATESTCQ   POINT TO THE CONTROL BLOCK
         CLC   UNUSED(8),CQBLOCK-CATQ(R1)
         BNE   LOC98         VALID (IN USE) KEY
         SPACE
         MVC   L7RSN,=CL50'EMPTY BLOCK READ'
         SPACE
LOC97    LA    R15,4         SET RC
         B     LOC99
         SPACE
LOC96    MVC   L7RSN,=CL50'INVALID TTR'
         B     LOC97
         SPACE
LOC90    L     R1,DECB1+16   SYNAD ROUTINE - GET THE IOB
         UNPK  M7STAT(5),12(3,R1)      STATUS
         UNPK  M7SENSE(5),2(3,R1)      SENSE
         MVI   M7STAT+4,C' '
         MVI   M7SENSE+4,C' '
         TR    M7STAT,HEXTBL
         TR    M7SENSE,HEXTBL
         SR    R0,R0
         IC    R0,SYSUT1+16  KEY LENGTH
         AH    R0,SYSUT1+62  DEVELOP READ LENGTH - BLKSIZE
         SH    R0,14(,R1)    LESS RESIDUAL COUNT
         CNVT  (R0),M7LENGTH READ LENGTH TO MESSAGE
         MVC   L7RSN,MSG7
         B     LOC97
         SPACE
LOC2     LR    R1,R15
         BAL   R14,RECHAIN   MAKE IT THE NEWEST
         SPACE
LOC98    SR    R15,R15       SET 0 RC
         SPACE
LOC99    ST    R1,LOCSAVE+12 R1 POSITION IN SAVE AREA
         ST    R15,LOCSAVE+4 R15 POSITION IN SAVE AREA
         MVC   PTTR2,PTTR1
         MVC   PTTR1,TTR0
         LM    R14,R5,LOCSAVE     RESTORE THE REGISTERS
         BR    R14            RETURN
         SPACE 2
LOCSAVE  DC    8F'0'         REGISTER SAVE AREA
         SPACE 3
* DETERMINE WHAT TYPE OF BLOCK THIS IS - VOLUME CONTROL BLOCK OR
* SOME OTHER TYPE - UNUSED WILL COME OUT AS VCB
* R14 IS RETURN - ON RETURN R15 HAS TYPE INDICATOR (0=VCB, 4=OTHER)
         SPACE
WHATBLK  STM   R14,R1,WHATBLKR    SAVE REGISTERS
         TM    CQBLOCK+9,1   SEE IF VOLUME CONTROL BLOCK
         BO    WHATBLK1      YES - COUNT IS ODD SO IT MUST BE VOLUMES
         LA    R1,CQBLOCK+10 SEE IF VALID NAME
         BAL   R14,CHKNAME
         BZ    WHATBLK2      VALID NAME - NOT VCB
         CLC   HEX1,CQBLOCK+10
         BE    WHATBLK2      THIS IS A CONTROL ENTRY
         CLC   HEXFF,CQBLOCK+10
         BE    WHATBLK2      THIS IS AN INDEX LINK ENTRY
         LA    R1,CQBLOCK+10      SEE IF VALID DEVICE TYPE
         BAL   R14,GENERIC
         LTR   R15,R15
         BNZ   WHATBLK2      NO - ASSUME IT ISN'T A VCB
         SPACE
WHATBLK1 SR    R15,R15       VOLUME CONTROL BLOCK RETURN CODE
         B     WHATBLK3
         SPACE
WHATBLK2 LA    R15,4         NON-VCB RETURN CODE
         SPACE
WHATBLK3 ST    R15,WHATBLKR+4     SET RETURN CODE
         LM    R14,R1,WHATBLKR    RESTORE REGISTERS
         BR    R14           RETURN
         SPACE
WHATBLKR DC    4F'0'         REGISTER SAVE AREA
         SPACE 3
* GO TO THE NEXT ENTRY IN THE CURRENT BLOCK AND DETERMINE
* WHAT TYPE OF ENTRY IT IS - R14 IS RETURN
* ON RETURN R15 HAS ENTRY TYPE (0=VOLUME INDEX CONTROL,
* 4=INDEX CONTROL, 8=INDEX LINK, 12=INDEX ENTRY, 16=DATA
* SET POINTER, 20=VOLUME CONTROL BLOCK POINTER, 24=GENERATION
* INDEX POINTER, 28=ALIAS ENTRY, 32=NEW VOLUME CONTROL POINTER,
* 36=UNKNOWN ENTRY, 40=PAST END OF BLOCK, 44=NOT DOWN TO THE
* REQUESTED NODE, 48=PAST REQUESTED NODE)
         SPACE
NXTNTRY  STM   R14,R3,NXTNTRYR    SAVE REFISTERS
         LA    R0,CQBLOCK+8       SEE IF WE ARE STARTING A BLOCK
         CR    R0,R4
         BNE   *+12          NOT BEGINNING A BLOCK
         LA    R4,CQBLOCK+10 ADDRESS FIRST ENTRY
         B     NXTNTRY1      AND GO FIND OUT WHAT IT IS
         SR    R1,R1
         IC    R1,C0CNT
         SLL   R1,1               DOUBLE TO GET BYTE COUNT
         LA    R4,12(R1,R4)       TO NEXT ENTRY
         LA    R1,CQBLOCK+L'CQBLOCK-1   LAST BYTE OF BLOCK
         CR    R4,R1
         BNH   NXTNTRY1      STILL WITHIN THE BLOCK
         LA    R15,40
         B     NXTNTRY2
         SPACE
NXTNTRY1 CLC   HEXFF,C0NAME  START IDENTIFYING ENTRY TYPE
         BE    NXTNTRY3      INDEX LINK ENTRY - CHECK LENGTH
         CLC   HEX1,C0NAME
         BE    NXTNTRY4      INDEX CONTROL OR VOLUME INDEX CONTROL NTRY
         TM    SWB,BCHKPROC  ARE WE CHECKING THE CATALOG
         BO    NXTNTRY5      YES - PROCESS EVERYTHING
         LA    R1,C0NAME
         BAL   R14,CHKNAME   VALIDATE THE NAME
         BALR  R14,0         SAVE THE CONDITION CODE
         TM    CSIND,CSNODE  ARE WE LOOKING FOR A NODE AT THIS LEVEL?
         BZ    NXTNTRY7      NO
         TM    SWB,GDGPROC   ARE WE PROCESSING GDS'S?
         BZ    NXTNTRY6      NO
         CLC   DBLWRD,CSNAME REQUESTED NODE VS. UNINVERTED NM DM JUL82
         B     *+10
NXTNTRY6 CLC   C0NAME,CSNAME IS THIS THE NODE (DOWN TO THIS LEVEL)
         LA    R15,44
         BL    NXTNTRY2      NO - RETURN CODE FOR FURTHER SEARCH
         LA    R15,48
         BH    NXTNTRY2      NO - RETURN FOR PAST THE NODE
NXTNTRY7 TM    SWB,NODE      ARE WE LOOKING FOR ANY NODE?
         BZ    NXTNTRY8      NO
         C     R6,NODELVL    IS THE ENTIRE NODE FOUND
         BL    NXTNTRY8      NO
         OI    SWB,NODEFND   INDICATE THE NODE WAS FOUND
         SPACE
NXTNTRY8 SPM   R14           RESTORE THE CONDITION CODE
         BZ    NXTNTRY5      OK
         MVC   DBLWRD,CSNAME      SAVE CSNAME
         MVC   CSNAME,C0NAME      SET THE NAME
         MVC   CSNMLNG,=H'8'      SET NAME TO MAX LENGTH
         BAL   R14,BLDSN          COMPRESS IT FOR MESSAGE
         MVC   CSNAME,DBLWRD      RESTORE CSNAME FOR SEQUENCE CHECK
         UNPK  L6TTR(7),CQTTR(4)  TTR FOR MESSAGE
         MVI   L6TTR+6,C' '
         TR    L6TTR,HEXTBL
         LA    R0,CQBLOCK    DEVELOP THE OFFSET
         LR    R14,R4
         SR    R14,R0
         STH   R14,DBLWRD
         UNPK  L6OFF(3),DBLWRD+1(2)
         MVI   L6OFF+2,C' '
         TR    L6OFF,HEXTBL
         MVC   L6NAME,DSNAME
         LA    R1,LINE6      PRINT THE LINE
         LA    R15,PRTCTL
         BAL   R14,PRINT
         LA    R15,ERRCTL
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'     DON'T DOUBLE SPACE
         BAL   R14,PRINT
NXTNTRY5 CLI   C0CNT,0
         LA    R15,12
         BE    NXTNTRY2      INDEX ENTRY
         CLI   C0CNT,1
         LA    R15,20
         BE    NXTNTRY2      VOLUME CONTROL BLOCK POINTER
         CLI   C0CNT,2
         LA    R15,24
         BE    NXTNTRY2      GENERATION DATA GROUP INDEX
         CLI   C0CNT,4
         LA    R15,28
         BE    NXTNTRY2      ALIAS ENTRY
         CLI   C0CNT,5
         LA    R15,32
         BE    NXTNTRY2      NEW CVOL POINTER ENTRY
         SR    R1,R1         MUST BE DATA SET POINTER ENTRY
         IC    R1,C0CNT      CHECK THAT COUNT IS 6M+1 WHERE M IS 1-5
         SR    R0,R0
         D     R0,=F'6'
         LTR   R1,R1         CHECK QUOTIENT (M)
         BNP   NXTNTRY0      ERROR
         CH    R1,=H'5'
         BH    NXTNTRY0      ERROR
         CH    R0,=H'1'      CHECK REMAINDER
         BNE   NXTNTRY0      ERROR - MUST BE 1
         LA    R15,16        RETURN CODE FOR DATA SET POINTER
         SPACE
NXTNTRY2 ST    R15,NXTNTRYR+4          SET RETURN CODE
         LM    R14,R3,NXTNTRYR    RESTORE THE REGISTERS
         BR    R14           RETURN
         SPACE
NXTNTRY3 CLI   C0CNT,0       INDEX LINK ENTRY
         BNE   NXTNTRY0      ERROR - LENGTH WRONG
         LA    R0,1          STEP COUNT OF BLOCKS EXHAUSTED
         A     R0,EXHCNT
         ST    R0,EXHCNT
         L     R1,CQLO       THIS IS THE LAST ENTRY IN THIS BLOCK SO
         ST    R1,LATESTCQ   PUT THE BLOCK ON THE OLDEST END OF QUEUE
         LA    R15,8          RETURN CODE FOR INDEX LINK ENTRY
         B     NXTNTRY2
         SPACE
NXTNTRY4 CLI   C0CNT,5
         LA    R15,0
         BE    NXTNTRY2      VOLUME INDEX CONTROL ENTRY
         CLI   C0CNT,3
         LA    R15,4
         BE    NXTNTRY2      INDEX CONTROL ENTRY
NXTNTRY0 LA    R15,36
         B     NXTNTRY2      ERROR - UNKNOWN TYPE
         SPACE
NXTNTRYR DC    6F'0'         REGISTER SAVE AREA
         SPACE 3
* COMMON PROCESSING FOR INDEX, DATA SET AND VOLUME
* CONTROL BLOCK POINTER ENTRIES - R14 IS RETURN
         SPACE
COMPROC  STM   R14,R1,CPSAVE      SAVE REGISTERS               DM SEP82
         TM    SWB,GDGPROC
         BZ    *+10          NOT GDS NAME
         XC    CSNAME+1(4),=X'FFFFFFFF'   INVERT GENERATION
         CLC   CSNAME,C3NAME CHECK SEQUENCE
         BNL   COMPROC3      ERROR - OUT OF SEQUENCE
COMPROC0 MVC   CSNAME,C3NAME NAME TO TABLE
         NI    CSIND,CSFIRST+CSLAST+CSICE+CSNODE                       *
                             TURN OFF MOST INDICATORS
         MVC   CSTTR,CQTTR
         ST    R5,CSADDR     SET UP THE CONTROL LEVEL
         MVC   CSCYL,CQCYL
         LR    R0,R4         DEVELOP OFFSET
         SR    R0,R5
         STH   R0,CSOFFSET
         TM    CSIND,CSFIRST SEE IF TOP (VOLUME INDEX) LEVEL
         BZ    COMPROC4      NO
         TM    SWA,ANOTAUTH  SEE IF AUTHORIZED
         BO    COMPROC5      NO
         TM    SWC,CDSCB+CFIXDSCB+CEXIT  SEE IF ALLOCATION WILL BE DONE
         BNZ   COMPROC5      YES - SKIP ENQ TO AVOID INTERLOCKS
         CLI   RNAME1,C' '   SEE IF ANY ENQ                    DM OCT82
         BE    COMPROC7      NO
         DEQ   MF=(E,ENQ3)   MINOR IS ZEROS & UCB ADDRESS      DM OCT82
         DEQ   MF=(E,ENQ2)   MINOR IS 'SYSCTLG' & UCB ADDRESS  DM OCT82
*        DEQ   MF=(E,DEQ1)   MINOR IS QUALIFIER & UCB ADDRESS  DM OCT82
COMPROC7 MVC   RNAME1,CSNAME COMPLETE MINOR WITH INDEX NAME    DM OCT82
         RESERVE MF=(E,ENQ1) MINOR IS QUALIFIER & UCB ADDRESS  DM OCT82
         ENQ   MF=(E,ENQ2)   MINOR IS 'SYSCTLG' & UCB ADDRESS  DM OCT82
         ENQ   MF=(E,ENQ3)   MINOR IS ZEROS & UCB ADDRESS      DM OCT82
         SPACE
COMPROC5 LA    R0,L'CSNAME   SEE HOW MANY SIGNIFICANT CHARACTERS
         LA    R1,CSNAME+L'CSNAME-1    IN THE NAME
         SPACE
COMPROC1 CLI   0(R1),C' '
         BNE   COMPROC2      SIGNIFICANCE REACHED
         BCTR  R1,0
         BCT   R0,COMPROC1   LOOP BACK
         MVC   L7RSN,=CL50'NAME IS ALL BLANK - R6 POINTS TO NAME'
         B     BADNTRY1
         SPACE
COMPROC3 BNE   COMPROC6      DROP IN SEQUENCE
         TM    CSIND,CSNODE  SEE IF PROCESSING A NODE
         BO    COMPROC0      YES - NO SEQUENCE CHECK
         TM    CSIND,CSFIRST SEE IF TOP LEVEL
         BO    LOOP          YES - A NEW LEVEL HAS BEEN INSERTED
COMPROC6 MVC   L7RSN,=CL50'CATALOG OUT OF SEQUENCE'
         B     CHKICE2
         SPACE
COMPROC4 LR    R15,R6        NOT FIRST - BACK UP 1 LEVEL
         SH    R15,=Y(CSLNG)
         OI    CSIND-CASCADE(R15),CSUSED      SHOW LEVEL IS USED
         B     COMPROC5
         SPACE
COMPROC2 STH   R0,CSNMLNG    SAVE THE LENGTH
         LA    R0,1
         A     R0,CSTOTAL    ADD TO ENTRY COUNT
         ST    R0,CSTOTAL
         LM    R14,R1,CPSAVE                                   DM SEP82
         BR    R14           RETURN
         SPACE 3
* BUILD A DATA SET NAME FROM CSTBL INTO DSNAME - R14 IS RETURN
         SPACE
BLDSN    STM   R14,R3,12(R13)
         LA    R15,CSTBL     ADDRESS FIRST LEVEL OF NAME
         USING CASCADE,R15
         MVC   DSNAME,BLANKS      CLEAR AREA
         LA    R3,DSNAME     START OF COMPRESSED NAME
         LA    R0,DSNAME+44       LIMIT FOR END OF OUTPUT
         SR    R2,R2         LEVEL COUNT
         SPACE
BLDSN1   LH    R1,CSNMLNG    SIGNIFICANT CHARACTERS IN NAME
         BCTR  R1,0          FOR ILC
         EX    R1,BLDSN2          MOVE NAME TO OUTPUT
         LA    R2,1(,R2)     STEP LEVEL COUNT
         AH    R3,CSNMLNG    TO NEXT BYTE AFTER THIS PART OF NAME
         CR    R3,R0         SEE IF PAST END
         BNH   BLDSN4        NO
         MVC   L7RSN,=CL50'DSNAME EXCEEDS 44 CHARACTERS'
         B     BADNTRY1
BLDSN4   CR    R15,R6        SEE IF LOWEST LEVEL
         BE    BLDSN3        YES
         MVI   0(R3),C'.'    DELIMIT THIS LEVEL OF DSN
         LA    R3,1(,R3)     PAST PERIOD
         AH    R15,=Y(CSLNG) TO NEXT CASCADE ENTRY
         B     BLDSN1
         SPACE
BLDSN2   MVC   0(0,R3),CSNAME     FOR EXECUTE
         SPACE
BLDSN3   STH   R2,DSLEVEL    SAVE LEVEL COUNT
         LM    R14,R3,12(R13)
         BR    R14
         DROP  R15
         SPACE 3
* DETERMINE DEVICE GENERIC NAME FROM DEVICE TYPE
* R1 POINTS TO DEVICE TYPE, R14 IS RETURN, DEVNAME IS OUTPUT FIELD
* IF RETURN CODE (R15) IS 0, GENERIC NAME IS SUPPLIED, OTHERWISE
* DEVNAME HAS A HEX EXPANSION OF DEVICE TYPE AND R15 IS 4
         SPACE
GENERIC  STM   R14,R1,12(R13)
         MVC   DEVNAME(4),0(R1)
         CLI   DEVNAME+3,0   SEE IF ESOTERIC NAME
         BE    GENERIC3      YES
         NI    DEVNAME+1,X'DF'    TURN OFF SHARED BIT
         L     R1,LASTDVNM   ADDRESS OF LAST USED DEVICE NAME
         CLC   DEVNAME(4),8(R1)   SEE IF IT MATCHES HERE
         BE    GENERIC4      YES
         L     R1,DEVNAMET
         L     R0,0(,R1)     COUNT OF ENTRIES
         LA    R1,4(,R1)     PAST COUNT
         SPACE
GENERIC1 CLC   DEVNAME(4),8(R1)
         BE    GENERIC2      FOUND IT
         LA    R1,12(,R1)    TO NEXT
         BCT   R0,GENERIC1
         SPACE
         L     R1,24(,R13)   RESTORE DEVICE TYPE
         MVC   DEVNAME(4),0(R1)
GENERIC3 UNPK  DEVNAME(9),DEVNAME(5)   GENERIC TYPE NOT FOUND
         TR    DEVNAME,HEXTBL     SO CONVERT THE DEVICE TYPE TO HEX
         LA    R15,4
         B     GENERIC9
         SPACE
GENERIC2 ST    R1,LASTDVNM   SAVE ADDRESS FOR NEXT SEARCH
         SPACE
GENERIC4 MVC   DEVNAME,0(R1)
         SR    R15,R15
         SPACE
GENERIC9 ST    R15,16(,R13)
         LM    R14,R1,12(R13)
         BR    R14
         SPACE
HEXTBL   EQU   *-240
         DC    C'0123456789ABCDEF'
         SPACE 3
* HEADING CONTROL SUBROUTINE
* R1 POINTS TO LINE, R15 POINTS TO CONTROL AREA, R14 IS RETURN
         SPACE
PRINT    STM   R14,R7,PRINT99
         PUSH  USING
         DROP
         USING PRTCTL,R15
         L     R2,PRTCTL     DCB
         L     R3,PRTCTL+4
         LH    R4,PRTCTL1    PAGE NUMBER
         LH    R5,PRTCTL2    LINES LEFT ON THIS PAGE
         LH    R6,PRTCTL3
         POP   USING
         LR    R7,R1
         TM    48(R2),16     SEE IF OPEN
         BZ    PRINT4        NO - SKIP
         CLI   0(R7),C'0'    SEE IF DOUBLE SPACE
         BNE   PRINT1        NO
         BCTR  R5,0          YES
         LA    R6,&DS        RESET MAX LINES TO DOUBLE SPACE*HMD 12/82*
PRINT1   SH    R5,=H'1'
         BNP   PRINT2        NEW PAGE
         SH    R6,=H'1'      SHALL WE DOUBLE SPACE
         BP    PRINT3        NO
         MVI   0(R7),C'0'    YES
         LA    R6,&DS        LINES TO NEXT DOUBLE SPACE     *HMD 12/82*
         SH    R5,=H'1'
         BNM   PRINT3        SAME PAGE
         SPACE
PRINT2   MVC   H1TYPE,0(R3)  NEW PAGE - SET TITLE
         LA    R4,1(,R4)     STEP PAGE NUMBER
         EDIT  (R4),H1PAGE
         PUT   (R2),HDG1
         PUT   (R2),HDG2
         MVI   0(R7),C'0'    FORCE DOUBLE SPACE
         LA    R5,&PGS       RESET LINES LEFT ON THIS PAGE  *HMD 12/82*
         LA    R6,&DS        AND LINES TO NEXT DOUBLE SPACE *HMD 12/82*
         SPACE
PRINT3   PUT   (R2),(R7)     PRINT THE LINE
         MVI   0(R7),C' '    CHANGE BACK TO SINGLE SPACE
         SPACE
         L     R15,PRINT99+4 UPDATE COUNTERS
         PUSH  USING
         DROP
         USING PRTCTL,R15
         STH   R4,PRTCTL1    PAGE NUMBER
         STH   R5,PRTCTL2    LINES LEFT ON PAGE
         STH   R6,PRTCTL3
         POP   USING
         SPACE
PRINT4   LM    R14,R7,PRINT99
         BR    R14           RETURN
         SPACE
PRINT99  DC    10F'0'
         SPACE 3
* COMPACT THE VOLUME SERIAL & FILE NUMBER (FILE NUMBER WILL NOT BE
*  USED IF IT IS LESS THAN 2), R1 POINTS TO VOLUME ENTRY, R14 IS
*  RETURN, ON RETURN R15 WILL HAVE ILC TO MOVE THE DATA IN VOLAREA
         SPACE
SETVOL   STM   R14,R2,12(R13)
         MVC   VOLAREA(6),OSERIAL-ODEVTYPE(R1)
         LA    R2,VOLAREA+5  DROP TRAILING BLANK
         SPACE
SETVOL1  CLI   0(R2),C' '
         BNE   SETVOL2       SIGNIFICANCE FOUND
         BCT   R2,SETVOL1    TRY NEXT
         SPACE
SETVOL2  LH    R14,OFILE-ODEVTYPE(,R1)
         CH    R14,=H'1'     SEE IF WE WANT TO SHOW IT
         BNH   SETVOL4       NO - SHOW FILE 2 & UP
         MVI   1(R2),C'-'    SEPARATOR
         MVC   FILEDIT,FILEMASK   SET UP FOR EDIT
         CVD   R14,DBLWRD
         LA    R1,FILEDIT+L'FILEDIT-1  IN CASE SIGNIFICANCE FORCED
         EDMK  FILEDIT,DBLWRD+5
         LA    R15,FILEDIT+L'FILEDIT   BYTE PAST END
         SR    R15,R1        LENGTH OF FILE NUMBER & ,
         EX    R15,SETVOL3   MOVE FILE & COMMA TO VOLAREA
         LA    R2,2(R15,R2)
         B     SETVOL5
         SPACE
SETVOL3  MVC   2(0,R2),0(R1)
         SPACE
SETVOL4  MVI   1(R2),C','
         LA    R2,1(,R2)
         SPACE
SETVOL5  LA    R15,VOLAREA
         SR    R15,R2
         LCR   R15,R15
         ST    R15,16(,R13)
         LM    R14,R2,12(R13)
         BR    R14
         SPACE 3
* FLESH OUT & PRINT ERROR LINE (LINE7) - R14 IS RETURN
* ON ENTRY R15 HAS SNAP ID, R4 POINTS TO CATALOG ENTRY
         SPACE
PRTLINE7 STM   R14,R15,PRTL7REG   SAVE REGISTERS
         CNVT  (R15),L7ID    SNAP ID FOR MSG
         UNPK  L7TTR(7),CQTTR(4)
         MVI   L7TTR+6,C' '
         TR    L7TTR,HEXTBL
         LA    R14,CQBLOCK   DEVELOP OFFSET
         SR    R14,R4
         LPR   R14,R14
         STH   R14,DBLWRD
         UNPK  L7OFF(3),DBLWRD+1(2)
         MVI   L7OFF+2,C' '
         TR    L7OFF,HEXTBL
         LA    R1,LINE7
         LA    R15,PRTCTL
         BAL   R14,PRINT
         MVC   PRTCTL3-PRTCTL+ERRCTL,=H'5'       SUPPRESS DOUBLE SPACE
         LA    R15,ERRCTL
         BAL   R14,PRINT
         LM    R14,R15,PRTL7REG
         BR    R14
         SPACE
PRTL7REG DC    2F'0'
         SPACE 3
* TAKE A SNAPSHOT & RETURN TO CALLER - BEFORE CALLING THE CALLER SHOULD
* STORE REGISTERS 0-15 IN SNAPREGS , R14 IS RETURN, R15 HAS SNAP OPTION
* ON RETURN R15 HAS SNAP DUMP ID NUMBER
* SNAP OPTIONS ARE - 0=EVERYTHING, 4=STORAGE (R2-R3 RANGE)
         SPACE
SNAP     STM   R14,R5,SNAPSAVE
         TM    SNAPDUMP+48,16         IS SNAPDUMP OPEN?     *HMD 12/82*
         BNO   SNAP99                 NOPE-FORGET SNAP      *HMD 12/82*
         LH    R4,SNAPID     DEVELOP SNAP ID NUMBER
         LA    R4,1(,R4)
         STH   R4,SNAPID
         SH    R4,=H'256'    LIMIT TO 0-255
         BM    *+8           NOT LIMITED
         STH   R4,SNAPID
         LH    R4,SNAPID
         B     *+4(R15)
         B     SNAP1         FULL SNAP
         B     SNAP2         STORAGE - R2 & R3 ARE LIMITS
         SPACE
SNAPSAVE DC    8F'0'
SNAPREGB DC    0D'0',CL16'REGISTERS 0-15'
SNAPREGS DC    16F'0'
SNAPREGE EQU   *-1
SNAPID   DC    H'255'
         SPACE 2                                            *HMD 12/82*
SNAP1    SNAP  DCB=SNAPDUMP,ID=(R4),SDATA=(CB,Q),PDATA=ALL,            *
               STORAGE=(SNAPREGB,SNAPREGE)
         B     SNAP99
         SPACE 2                                            *HMD 12/82*
SNAP2    SNAP  DCB=SNAPDUMP,ID=(R4),                                   *
               STORAGE=(SNAPREGB,SNAPREGE,(R2),(R3),                   *
               CSTBL,CSTBLEND,TTRPRT,PTTR1+3)
         B     SNAP99
         EJECT
SNAP99   LM    R14,R5,SNAPSAVE
         LH    R15,SNAPID
         BR    R14
         SPACE 3
* DCB EXIT ROUTINE FOR SYSPRINT & SYSERROR - DETERMINE BLKSIZE
PRTDCB   LH    R0,62(,R1)    BLKSIZE
         SH    R0,82(,R1)    LESS LRECL
         BP    *-4           SOME LEFT, TRY AGAIN
         BZR   R14           EVEN MULTIPLE - RETURN
         LPR   R0,R0         MAKE SHORTAGE POSITIVE
         AH    R0,62(,R1)    ADD SHORTAGE TO BLKSIZE
         STH   R0,62(,R1)
         SH    R0,82(,R1)    DROP 1 LRECL IF POSSIBLE
         BNPR  R14           WON'T WORK - RETURN
         STH   R0,62(,R1)    USE NEXT LOWER MULTIPLE
         BR    R14           RETURN
         SPACE 3
* SET THE RETURN CODE IF THE NUMBER SUPPPLIED IS HIGHER
* R15 IS CURRENT CODE, R14 IS RETURN
         SPACE
SETRC    CH    R15,RC        SEE IF NEW ONE HIGHER
         BNHR  R14           NO
         STH   R15,RC        SET NEW RETURN CODE
         BR    R14           RETURN
         SPACE 3
* COMMON ROUTINE FOR VOLUME CONTROL BLOCK POINTER ENTRIES
* AND DATA SET POINTER ENTRIES - VALIDATE SIMPLE DSNAME FOR
* GDS TYPE OR NOT (IF GDS - DEINVERT IT), START DATASET RCD
         SPACE
COMDS    STM   R14,R2,COMDSV SAVE REGISTERS
         TM    SWB,GDGPROC   ARE WE PROCESSING A GDG
         BO    COMDS1        YES
         CLI   CSNAME+1,X'0F'     NOT GDS - CHECK NAME
         BH    COMDS3        OK
         MVC   L7RSN,=CL50'DS NAME EXPECTED - GDS NAME FOUND'
         B     CHKICE2
         SPACE
COMDS1   CLI   CSNAME+1,X'0F'     SEE IF GDS NAME
         BNH   COMDS2        NO
         MVC   L7RSN,=CL50'GDS NAME EXPECTED - DS NAME FOUND'
         B     CHKICE2
COMDS2   XC    CSNAME+1(4),=X'FFFFFFFF'    DEINVERT GENERATION
         LH    R0,GDGENER    DECREMENT GENERATION COUNT
         BCTR  R0,0
         STH   R0,GDGENER
COMDS3   BAL   R14,BLDSN     COMPRESS DSNAME
         L     R7,RCDADDR
         USING RCDOUT,R7
         MVI   OTYP,C'2'     RCD ID - DATASET
         MVC   ODSN,DSNAME
         MVC   OLVL,DSLEVEL
         LA    R0,22         MOVE DSNAME STRUCTURE
         LA    R1,ODSNAME
         LA    R2,CSTBL+CSNAME-CASCADE
COMDS4   MVC   0(8,R1),0(R2)
         LA    R1,8(,R1)     TO NEXT LEVEL
         AH    R2,=Y(CSLNG)
         BCT   R0,COMDS4
         DROP  R7
         LM    R14,R2,COMDSV RESTORE REGISTERS
         BR    R14           RETURN
         SPACE
COMDSV   DC    5F'0'
         SPACE 3
* ADD SEEK COUNTS FOR THIS DATASET TO TOTAL SEEK COUNTS - R14 IS RETURN
ADDSEEK  TM    SWB,SEEKREQ   SEE IF INTERESTED
         BZR   R14           NO
         STM   R14,R1,12(R13)
         LA    R0,CSCUMA     NUMBER OF COUNTERS
         L     R1,=A(CYLACCUM)
         SR    R15,R15       INDEX TO CSCUM
         SPACE
ADDSEEK1 LH    R14,CSCUM(R15)
         A     R14,0(R1)
         ST    R14,0(R1)
         LA    R1,L'CYLACCUM(,R1) NEXT COUNTERS
         LA    R15,L'CSCUM(,R15)
         BCT   R0,ADDSEEK1   ITERATE
         SPACE
         LM    R14,R1,12(R13)
         BR    R14           RETURN
         SPACE 3
* CHECK AND CORRECT CATALOG POINTER TO F1 DSCB - R14 IS RETURN
         SPACE
         USING RCDOUT,R7
DSCBPTR  ST    R14,DSCBRTN
         TM    SWC,CDSCB+CFIXDSCB SEE IF THIS FUNCTION WAS REQUESTED
         BZR   R14           NO
         CLC   OVOLCNT,=H'1' POINTER ONLY FOR SINGLE-VOLUME DS
         BNER  R14
         CLI   ODEVTYPE+2,X'20'
         BNER  R14           NOT DASD
         TM    ODEVTYPE+1,X'08'   SEE IF VIRTUAL DASD
         BZ    DP1           NO - MUST BE REAL
         TM    SWC,CMASS
         BZR   R14           NOT CHECKING VIRTUAL VOLUMES
DP1      NC    C4DSCB,C4DSCB      SEE IF POINTER PRESENT
         BNZ   DP2           YES
         TM    SWC,CFIXDSCB
         BZ    DP9           NOT FIXING, DON'T CHECK WITH KNOWN ERROR
* R14 WILL BE DESTROYED AFTER THIS
DP2      ICM   R1,15,VOLT1ST      TABLE POINTER
         BNZ   DP3           TABLE EXISTS
         GETMAIN R,LV=4096
         ST    R1,VOLTBL
         STH   R0,VOLTLNG
         AR    R1,R0         START TABLE AT TOP END
         ST    R1,VOLT1ST
         SR    R0,R0
         STH   R0,VOLTCNT
         SPACE
DP3      LH    R0,VOLTCNT    SEARCH FOR VOLUME
         L     R1,VOLT1ST
         SH    R1,=Y(VOLLNG)
         USING VOLNTRY,R1
DP4      LR    R15,R1
DP5      LR    R1,R15
         LR    R14,R0
         LA    R14,1(,R14)
         SRA   R14,1         HALVE (ROUNDED)
         BZ    DP6           NOT FOUND
         SR    R0,R14
         SLL   R14,4         * 16 (ENTRY LENGTH)
         DC    0Y(16-VOLLNG,VOLLNG-16) ASSEMBLY ERROR IF WRONG LENGTH
         AR    R1,R14
         CLC   VOLSERN,OSERIAL
         BL    DP4
         BH    DP5
         ST    R1,VOLTPTR    SAVE ADDRESS OF ENTRY
         B     DP8           FOUND
         SPACE
DP6      L     R14,VOLT1ST   BACK UP
         SH    R14,=Y(VOLLNG)     ONE ENTRY
         C     R14,VOLTBL
         BNL   DP7           SOME SPACE LEFT TO INSERT
         LH    R0,VOLTLNG
         AH    R0,=H'4096'   INCREASE THE NEXT BLOCK
         GETMAIN R,LV=(0)
         STM   R0,R1,DBLWRD
         LR    R14,R1
         AH    R14,=H'4096'
         LH    R15,VOLTLNG
         L     R0,VOLTBL
         LR    R1,R15
         MVCL  R14,R0
         L     R0,VOLT1ST    CALCULATE NEW START
         S     R0,VOLTBL
         A     R0,DBLWRD+4
         ST    R0,VOLT1ST
         LH    R0,VOLTLNG    FREE OLD AREA
         L     R1,VOLTBL
         FREEMAIN R,A=(1),LV=(0)
         LM    R0,R1,DBLWRD
         ST    R1,VOLTBL
         STH   R0,VOLTLNG
         B     DP3           TRY AGAIN
         SPACE
DP7      L     R0,VOLT1ST    MOVE ENTRIES DOWN 1 TO PROVIDE
         LA    R15,VOLLNG(,R15)        A SLOT IN THE PROPER PLACE
         SR    R15,R0        MOVE LENGTH
         LR    R1,R15
         ST    R14,VOLT1ST
         MVCL  R14,R0
         BZ    *+6
         DC    H'0'          PRIMITIVE ERROR ROUTINE
         ST    R14,VOLTPTR   SAVE SLOT POINTER
         LA    R0,1          INCREMENT COUNT
         AH    R0,VOLTCNT
         STH   R0,VOLTCNT
         MVC   DYNUNIT1,ODEVNAME  ALLOCATE
         MVC   DYNVOL1,OSERIAL         THE VOLUME
         L     R1,VOLTPTR
         MVC   VOLDDN,BLANKS      DDNAME
         MVC   VOLSERN,DYNVOL1
         MVC   VOLCYL,=H'-1'      IN CASE MOUNT FAILS
         OI    DYNRB3+2,32        TURN OFF MOUNT INDICATOR
         TM    ODEVTYPE+1,X'08'   SEE IF VIRTUAL DEVICE
         BZ    *+8                NO
         NI    DYNRB3+2,255-32    ALLOW MOUNT ON VIRTUAL DASD
         LA    R1,DYNPTR3
         SVC   99
         LTR   R15,R15
         BNZ   DP80          ERROR IN ALLOCATION
         L     R1,VOLTPTR
         MVC   VOLDDN,DYNDDN5     DDNAME
         DEVTYPE VOLDDN,DEVTYPE,DEVTAB
         L     R1,VOLTPTR
         MVC   VOLCYL,DEVTYPE+10  TRACKS PER CYLINDER
         SPACE
DP8      SR    R14,R14
         MVC   CATDATA,ODEVTYPE
         ICM   R14,7,C4DSCB  F1 DSCB TTR
         NOP   DP9  WAS BZ   NO TTR - SKIP CHECK            *HMD 12/82*
         SRDL  R14,8
         STCM  R15,8,CCHHR+4 R IN CCHHR
         SRDA  R14,32
         LH    R0,VOLCYL
         CH    R0,=H'-1'     SEE IF VOLUME IS MOUNTED
         BE    DP99          NO - SKIP FURTHER CHECK
         DR    R14,R0        VTOC TTR IS FROM FRONT OF VOLUME
         STCM  R15,3,CCHHR   CC IN CCHHR
         STCM  R14,3,CCHHR+2 HH IN CCHHR
         OBTAIN CAMOBT1
         L     R1,VOLTPTR
         LTR   R15,R15
         BZ    DP8A          OK
         CH    R15,=H'20'
         BE    DP11          OUTSIDE VTOC - MUST BE WRONG
         B     DP81          ERROR
         SPACE
DP8A     CLI   CAMWRK+44,C'1'     SEE IF F1 DSCB
         BNE   DP11          NOT F1 DSCB
         CLC   DSNAME,CAMWRK SEE IF CORRECT DSNAME
         BNE   DP11          WRONG DSCB
         B     DP99          EVERYTHING OK
         SPACE
DP9      LA    R0,1          COUNT MISSING DSCB POINTER SUPPLIED
         A     R0,SUPCNT          (EVEN IF JUST CHECKING)
         ST    R0,SUPCNT
         B     DP12
         SPACE
DP11     LA    R0,1          COUNT INCORRECT DSCB POINTER FIXED
         A     R0,FIXCNT          (EVEN IF JUST CHECKING)
         ST    R0,FIXCNT
         SPACE
DP12     TM    SWC,CFIXDSCB
         BZ    DP99          NOT FIXING - SKIP RECATALOG
         OBTAIN CAMOBT2      SEARCH FOR DSCB
         LTR   R15,R15
         BNZ   DP82          SOME KIND OF ERROR
         IC    R0,CAMCCHHR+4 BUILD TTR FOR RECAT
         STC   R0,DSCBTTR+2
         L     R14,CAMCCHHR
         SRDL  R14,16        SPLIT CC FROM HH
         SRL   R15,16
         L     R1,VOLTPTR
         MH    R14,VOLCYL    EXTEND CYLINDERS TO TRACKS
         DROP  R1
         AR    R15,R14
         STCM  R15,3,DSCBTTR
         CATALOG CAMRECAT
         LTR   R15,R15
         BNZ   DP83          ERROR
         MVC   L4DSN,DSNAME                                 *HMD 12/82*
         NC    C4DSCB,C4DSCB SEE IF FROM TTR
         NOP   DP99  WAS BZ  NO - SKIP MESSAGE              *HMD 12/82*
         UNPK  DBLWRD(7),C4DSCB(4)     FROM TTR
         MVC   L4TTR1,DBLWRD
         TR    L4TTR1,HEXTBL
         UNPK  DBLWRD(7),DSCBTTR(4)    TO TTR
         MVC   L4TTR2,DBLWRD
         TR    L4TTR2,HEXTBL
         MVC   L4MSG,L4MSG8
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         B     DP99
         SPACE
DP99     L     R14,DSCBRTN
         BR    R14           RETURN
         DROP  R7
         SPACE 2
DP80     MVC   L4DSN,DSNAME       ALLOCATION FAILURE
         MVC   L4DEVT,DYNUNIT1
         MVC   L4VOL,DYNVOL1
         UNPK  DBLWRD(5),DYNRB3+4(3)   ERROR CODE
         MVC   L4ERR,DBLWRD
         TR    L4ERR,HEXTBL
         UNPK  DBLWRD(5),DYNRB3+6(3)   INFO CODE
         MVC   L4INFO,DBLWRD
         TR    L4INFO,HEXTBL
         MVC   L4MSG,L4MSG4
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         B     DP99
         SPACE
DP81     MVC   L4DSN,DSNAME       OBTAIN (SEEK) ERROR
         EDIT  (R15),L4RC5
         MVC   L4MSG,L4MSG5
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         B     DP11          COUNT AS BAD TTR
         SPACE
DP82     MVC   L4DSN,DSNAME       OBTAIN (SEARCH) ERROR
         EDIT  (R15),L4RC6
         MVC   L4MSG,L4MSG6
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         B     DP99
         SPACE
DP83     MVC   L4DSN,DSNAME       RECATALOG FAILURE
         STM   R15,R1,16(R13)
         EDIT  16(,R13),L4RC7
         EDIT  20(,R13),L4R0
         EDIT  24(,R13),L4R1
         MVC   L4MSG,L4MSG7
         LA    R1,LINE4
         LA    R15,PRTCTL    PUT ON SYSPRINT
         BAL   R14,PRINT
         LA    R15,ERRCTL    PUT ON SYSERROR
         BAL   R14,PRINT
         B     DP99
         SPACE
         TITLE 'OS CVOL LISTING PROGRAM - DATA AREAS'
DBLWRD   DC    D'0'
UNUSED   DS    0CL256             UNUSED CATALOG BLOCK
         DC    256X'00'
EDITMSK1 DC    X'4040202020202020202020202020202120'
EDZERO1  EQU   *-EDITMSK1-1
EDITMSK2 DC    X'4020202020202020202021204B20202020'
EDZERO2  EQU   *-EDITMSK2-6
EDITWRK  DC    X'0000000000000000000000000000000000'
BLANKS   DC    CL120' '
         EJECT                                              *HMD 12/82*
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      *
               RECFM=FBA,LRECL=133,EXLST=PRTXIT
         EJECT                                              *HMD 12/82*
SYSERROR DCB   DDNAME=SYSERROR,DSORG=PS,MACRF=PM,                      *
               RECFM=FBA,LRECL=133,EXLST=PRTXIT
         SPACE 1                                            *HMD 12/82*
PRTXIT   DC    A(X'85000000'+PRTDCB)
         EJECT                                              *HMD 12/82*
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,RECFM=VB
         EJECT                                              *HMD 12/82*
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(RP,WP),EXLST=EXT1,        *
               RECFM=F,BLKSIZE=256,OPTCD=Z,SYNAD=LOC90,KEYLEN=8
         EJECT                                              *HMD 12/82*
SYSUT1A  DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EXLST=EXT1,             *
               RECFM=F,BLKSIZE=256,OPTCD=CZ,EODAD=ENDCHK
         SPACE 2
OPENLST1 OPEN  (SYSUT1,INPUT),MF=L
EXT1     DC    X'87',AL3(JFCB1)
JFCB1    DC    XL176'0'
         EJECT                                              *HMD 12/82*
SNAPDUMP DCB   DDNAME=SNAPDUMP,DSORG=PS,MACRF=W,                       *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         EJECT                                              *HMD 12/82*
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,                         *
               RECFM=FB,LRECL=80,EODAD=CLOSEOUT
         SPACE 2
         READ  DECB1,SF,SYSUT1,MF=L
         EJECT                                              *HMD 12/82*
***********************************************************************
* THE FOLLOWING AREA IS RESTORED FOR EACH NEW CATALOG                 *
***********************************************************************
         SPACE
RESTORED DC    0F'0'
         SPACE
UNUSEDCT DC    F'0'          UNUSED BLOCK COUNT
BLKCNT   DC    F'0'          TOTAL BLOCK COUNT
READCNT  DC    F'0'          COUNT OF RECORDS READ AFTER PRIME
EXHCNT   DC    F'0'          COUNT OF RECORDS EXHAUSTED
VCBCNT   DC    F'0'          COUNT OF VOLUME CONTROL BLOCKS
GDGCNT   DC    F'0'          COUNT OF GDG INDICES
DEBLK    DC    F'0'          BLOCK COUNT (IMPLIED FROM DEB)
CATDS    DC    F'0'          CATALOGUED DATA SET COUNT
CATGDS   DC    F'0'          GENERATION DATA SET COUNT
FIXCNT   DC    F'0'          COUNT OF DSCB POINTERS CORRECTED
SUPCNT   DC    F'0'          COUNT OF DSCB POINTERS SUPPLIED
CKADDR   DC    A(0)          ADDRESS OF CHECKING AREA
CKLNG    DC    A(0)          LENGTH OF CHECKING AREA
NODE1    DC    A(0)          POINTER TO BYTE 1 OF NODE OPERAND
NODE2    DC    A(0)          POINTER LAST BYTE
CATLG1   DC    A(0)          POINTER TO BYTE 1 OF CATALOG OPERAND
CATLG2   DC    A(0)          POINTER LAST BYTE
DDN1     DC    A(0)          POINTER TO BYTE 1 OF DD OPERAND
DDN2     DC    A(0)          POINTER LAST BYTE
NODELVL  DC    A(CSTBL)      LOWEST LEVEL USED IN NODE= PROCESSING
EXITADDR DC    A(0)          ENTRY POINT OF USER EXIT ROUTINE
         SPACE
PRTCTL   DC    A(SYSPRINT,H1TYPEA)
PRTCTL1  DC    H'0'          PAGE NUMBER
PRTCTL2  DC    H'-1'         LINES LEFT ON THIS PAGE
PRTCTL3  DC    H'-1'         LINES TO NEXT DOUBLE SPACE
         SPACE
SWB      DC    X'0'          CATALOG SWITCHES
NODE     EQU   128           PROCESSING NODE (SELECTING                *
                                       HIGH-LEVEL INDEX)
BCHECK   EQU   64            CHECK PROCESSING REQUESTED
BCHKPROC EQU   32            CHECKING IN PROCESS
NODEFND  EQU   16            NODE FOUND
GDGPROC  EQU   8             GDG BEING PROCESSED
SEEKREQ  EQU   4             SEEK ANALYSIS REQUESTED
FHVOL    EQU   2             ASSUME THIS DISK HAS A FIXED HEAD PORTION
SWC      DC    X'0'          CATALOG SWITCHES
CDSCB    EQU   128           F1 DSCB POINTERS SHOULD BE CHECKED
CMASS    EQU   64            CHECK F1 DSCB POINTERS ON MSS
CFIXDSCB EQU   32            FIX F1 DSCB POINTERS
CEXIT    EQU   16            USER EXIT PROGRAM
         SPACE
ERRCTL   DC    A(SYSERROR,H1TYPEB),H'0,-1,32767'
GDGENER  DC    H'0'          COUNT OF GENERATIONS IN CURRENT GDG
FROMCYL  DC    H'0'          'FROM' CYLINDER ON MOVES
FHCYL    DC    2H'-1'        LIMITS ON FIXED HEAD CYLINDERS
GDGLIM   DC    AL1(8)        LIMIT FOR LISTING GDG INDICES AS ERROR
         SPACE 2
***********************************************************************
* END OF THE RESTORED AREA                                            *
***********************************************************************
         EJECT                                              *HMD 12/82*
RSTRLNG  EQU   *-RESTORED
         SPACE
RESTORE  DS    XL(RSTRLNG)   HOLD FOR RESTORE DATA
         SPACE 3
DEVNAMET DC    A(0)          ENTRY POINT OF DEVICE NAME TABLE
LASTDVNM DC    A(0)          ADDRESS OF LAST USED ENTRY IN DEVNAMET
FIRSTCQ  DC    A(0)          FIRST CATALOG BLOCK
LASTCQ   DC    A(0)          LAST CATALOG BLOCK
LATESTCQ DC    A(0)          LATEST USED CATALOG BLOCK
CURRLINE DC    A(0)          ADDRESS OF CURRENT DATASET PRINT LINE
LASTCHK  DC    A(0)          ADDRESS OF LAST CHECK BLOCK
TTRPRT   DC    C'TTR '
TTR0     DC    XL3'0',X'0'   TTR FOR POINT
         DC    C' PRIOR TTRS '
PTTR2    DC    F'0'
PTTR1    DC    F'0'
RC       DC    H'0'          RETURN CODE
DEBTRK   DC    H'0'          TRACKS IN CATALOG
QLIM     DC    A(25*CQLNG,25*CQLNG)     LIMITS FOR V GETMAIN
QADDR    DC    A(0,0)        ADDRESS & LENGTH OF GETMAIN AREA
QEND     DC    A(0)          UPPER LIMIT OF LAST CATALOG QUEUE BLOCK
RCDADDR  DC    A(0)          RECORD AREA ADDRESS
RCDLNG   DC    A(0)          RECORD AREA LENGTH
RCDLIM   DC    A(0)          RECORD AREA LAST VOLUME ENTRY LIMIT
VOLTBL   DC    A(0)          VOLUME ALLOCATION TABLE AREA
VOLT1ST  DC    A(0)          FIRST ENTRY
VOLTLNG  DC    H'0'          LENGTH OF THIS AREA
VOLTCNT  DC    H'0'          COUNT OF ENTRIES
VOLTPTR  DC    A(0)          POINTER TO CURRENT VOLUME TABLE ENTRY
DSCBRTN  DC    A(0)          RETURN ADDRESS FROM DSCB CHECK
EXITNAME DC    CL8' '        NAME OF USER EXIT PROGRAM
USERPARM DC    4A(0)         USER PROGRAM PARAMETER LIST
         SPACE ,                                               DM OCT82
CPSAVE   DC    4F'0'         COMPROC SAVE AREA                 DM SEP82
         SPACE 3
CAMLOC   CAMLST NAME,DSNAME,,CAMWRK
         SPACE 2
CAMOBT1  CAMLST SEEK,CCHHR,VOLSER,CAMWRK
         SPACE 2
CAMOBT2  CAMLST SEARCH,DSNAME,VOLSER,CAMWRK
         SPACE 2
CAMRECAT CAMLST RECAT,DSNAME,,VOLIST,DSCBTTR=DSCBTTR
         SPACE
         DC    0D'0'
CAMWRK   DC    265X'0'       WORK AREA FOR CATALOG & VTOC MANAGEMENT
CAMCCHHR EQU   CAMWRK+96,5,C'X'   DSCB CCHHR IF OBTAIN SEARCH
DSCBTTR  DC    XL3'0'
CCHHR    DC    XL5'0'
         SPACE 2
VOLIST   DC    H'1'          VOLUME COUNT (1 FOR THIS FUNCTION)
CATDATA  DC    XL12'0'
         ORG   CATDATA+4
VOLSER   DS    CL6
         ORG   ,
         SPACE 3
DEVTYPE  DC    5F'0'
BLKS1    DC    F'0'          CATLG BLKS/TRK
ENQ1     RESERVE (SYSCTLG,RNAME1,S,12,SYSTEMS),UCB=UCB1,MF=L   DM OCT82
DEQ1     DEQ   (SYSCTLG,RNAME1,12,SYSTEMS),MF=L                DM OCT82
ENQ2     ENQ   (SYSCTLG,SYSCTLG,S,12,SYSTEM),MF=L              DM OCT82
ENQ3     ENQ   (SYSCTLG,RNAME3,S,12,SYSTEM),MF=L               DM OCT82
SYSCTLG  DC    CL8'SYSCTLG'  MAJOR NAME & SECOND MINOR NAME    DM OCT82
UCB2     DC    A(0)          ADDRESS OF CATALOG UCB            DM OCT82
RNAME3   DC    XL8'0'        MINOR NAME THIRD (VOLUME INDEX)   DM OCT82
UCB3     DC    A(0)               ENQ & UCB PTR                DM OCT82
RNAME1   DC    CL8' '        MINOR NAME FOR FIRST (INDEX NAME) DM OCT82
UCB1     DC    A(0)               ENQ & UCB PTR                DM OCT82
         SPACE 3
DYNPTR1  DC    A(DYNRB1+X'80000000')
         SPACE
DYNRB1   DC    AL1(20,X'01',B'11100000',0)
         DC    A(0,DYNTXT1,0,0)        FOR CATALOG ALLOCATION
         SPACE
DYNTXT1  DC    A(DYNSTAT,DYNUNIT,DYNVOL,DYNDDN,DYNDSN1+X'80000000')
         SPACE
DYNSTAT  DC    Y(X'0004',1,1),X'08'    DISP=SHR
         SPACE
DYNUNIT  DC    Y(X'0015',1,8)
DYNUNIT1 DC    CL8' '                  UNIT NAME
         SPACE
DYNVOL   DC    Y(X'0010',1,6)
DYNVOL1  DC    CL6' '                  VOLUME SERIAL
         SPACE
DYNDDN   DC    Y(X'0055',1,8)
DYNDDN1  DC    CL8' '                  DDNAME FROM ALLOCATION
         SPACE
DYNDSN1  DC    Y(X'0002',1,8),CL8'SYSCTLG'   DSNAME OF CATALOG
         SPACE 3
DYNPTR2  DC    A(DYNRB2+X'80000000')
         SPACE
DYNRB2   DC    AL1(20,X'02',0,0)
         DC    A(0,DYNTXT2,0,0)        FOR DDNAME DEALLOCATION
         SPACE
DYNTXT2  DC    A(DYNDDN2+X'80000000')
         SPACE
DYNDDN2  DC    Y(X'0001',1,8)
DYNDDN3  DC    CL8' '                  DDNAME TO DEALLOCATE
         SPACE 3
DYNPTR3  DC    A(DYNRB3+X'80000000')
         SPACE
DYNRB3   DC    AL1(20,X'01',B'11100000',0)
         DC    A(0,DYNTXT3,0,0)        FOR VTOC ALLOCATION
         SPACE
DYNTXT3  DC    A(DYNSTAT,DYNUNIT,DYNVOL,DYNDDN4+X'80000000')
         SPACE
DYNDDN4  DC    Y(X'0055',1,8)
DYNDDN5  DC    CL8' '                  DDNAME FROM ALLOCATION
.P105    SPACE 2
NATIONAL DC    256X'FF'      TRT TABLE FOR NATIONAL CHARACTERS
         ORG   NATIONAL+C' '
         DC    X'0'
         ORG   NATIONAL+C'-'
         DC    X'0'          CATALOG ONLY - ALLOW '-'
         ORG   NATIONAL+C'$'
         DC    X'0'
         ORG   NATIONAL+C'#'
         DC    2X'0'
         ORG   NATIONAL+X'C0'
         DC    10X'0'        CATALOG ONLY - ALLOW X'C0'
         ORG   NATIONAL+C'J'
         DC    9X'0'
         ORG   NATIONAL+C'S'
         DC    8X'0'
         ORG   NATIONAL+C'0'
         DC    10X'0'
         ORG
         SPACE 2
HEX1     DC    XL8'1'
HEXFF    DC    0XL8'0',8X'FF'
         SPACE 2
DSNAME   DC    CL44' '       ASSEMBLY AREA FOR DATA SET OR INDEX NAME
DEVNAME  DC    CL8' ',X'0'   DEVICE NAME RETURN AREA
NODENM   DC    CL8' '        NAME OF CURRENT NODE
WRKCNT   DC    H'0'          REMAINING VOLUME COUNT
DSLEVEL  DC    H'0'          LEVELS USED IN THE DSNAME
SWA      DC    X'0'          JOB STEP SWITCHES
ANOTAUTH EQU   128           JOB STEP IS NOT AUTHORIZED
         SPACE 3
* HEADING LINES FOR REPORTS
HDG1     DC    CL133'1'
         ORG   HDG1+1
         DC    C'CATALOG '
H1TYPE   DC    C'LISTING',C' OF CVOL ON '
H1DEVT   DC    CL8' '
H1SERIAL DC    CL6' ',C' AT '
H1TIME   DC    C'HH.MM',C' ON '
H1DAYNM  DC    CL4' ',C', '
H1MONTH  DC    CL4' ',C' '
H1DAY    DC    ZL2'0',C', 19'
H1YEAR   DC    ZL2'0',C' PAGE '
H1PAGE   DC    CL4' ',C'   (MULTI-FILE TAPE ENTRIES HAVE THE '
         DC    C'FILE NUMBER,'
         ORG
         SPACE
HDG2     DC    CL133' '
         ORG   HDG2+1
         DC    C'DATA SET OR INDEX NAME'
         ORG   HDG2+45
         DC    C'DEVICE   TTR   VOLUME SERIALS'
         ORG   HDG2+H1PAGE-HDG1+7
         DC    C'IF NOT 1, FOLLOWING THE SERIAL, I.E. 123456-3)'
         ORG
         SPACE
H1TYPEA  DC    CL(L'H1TYPE)'LISTING'
H1TYPEB  DC    CL(L'H1TYPE)'ERRORS'
H1DAYS   DC    C'MON.',C'TUE.WED.THU.FRI.SAT.SUN.'
H1MONTHS DC    C'JAN.',C'FEB.MAR.APR.MAY JUNE'
         DC    C'JULYAUG.SEP.OCT.NOV.DEC.'
         SPACE 3
* DETAIL LINES
LINE1    DC    CL133' '      DATA SET LINE (FIRST)
         ORG   LINE1+1
L1DSN    DC    CL44' '
L1DEVT   DC    CL8' '        DEVICE TYPE
L1TTR    DC    CL6' ',C' '   VTOC TTR OR SPACES
L1VOLS   DC    CL73' '       VOLUME SERIALS AND FILE NUMBERS
         ORG
         SPACE
LINE2    DC    CL133' '      DATA SET LINE (SECOND AND SUBSEQUENT)
         ORG   LINE2+20
L2VOLS   DC    CL113' '      VOLUME SERIALS AND FILE NUMBERS
         ORG
         SPACE
LINE3    DC    CL133' '      GDG INDEX LINE
         ORG   LINE3+1
L3DSN    DC    CL35' ',C' '       GDG INDEX NAME
         DC    C'GENERATION DATA GROUP INDEX, ENTRIES='
L3NTRY   DC    ZL3'0',C', CURRENT='
L3CURR   DC    ZL3'0',C' '
L3DEL    DS    CL20          AREA FOR DELETE AND EMPTY
         ORG
         SPACE
LINE4    DC    CL133' '      MISCELLANEOUS ERROR LINE
         ORG   LINE4+1
L4DSN    DC    CL44' ',C' '  INDEX NAME
L4MSG    DS    CL60
         ORG
         SPACE
L4MSG1   DC    CL(L'L4MSG)'MASTER CATALOG DOES NOT POINT TO THIS INDEX'
L4MSG2   DC    CL(L'L4MSG)'MASTER CATALOG POINTS TO THIS INDEX IN ANOTH*
               ER CVOL'
         SPACE
L4MSG3   DC    CL(L'L4MSG)' '
         ORG   L4MSG3
         DC    C'UNUSED INDEX LEVEL '
L4GDG    DC    CL5' '
         ORG
         SPACE
L4MSG4   DC    CL(L'L4MSG)' '
         ORG   L4MSG4
         DC    C'ALLOCATION ERROR FOR '
L4DEVT   DC    CL8' '
L4VOL    DC    CL6' ',C', ERROR='
L4ERR    DC    CL4' ',C', INFO='
L4INFO   DC    CL4' '
         ORG
         SPACE
L4MSG5   DC    CL(L'L4MSG)' '
         ORG   L4MSG5
         DC    C'OBTAIN SEEK ERROR '
L4RC5    DC    CL4' '
         ORG
         SPACE
L4MSG6   DC    CL(L'L4MSG)' '
         ORG   L4MSG6
         DC    C'OBTAIN SEARCH ERROR '
L4RC6    DC    CL4' '
         ORG
         SPACE
L4MSG7   DC    CL(L'L4MSG)' '
         ORG   L4MSG7
         DC    C'RECATALOG ERROR, RC='
L4RC7    DC    CL4' ',C'  R0='
L4R0     DC    CL4' ',C'  R1='
L4R1     DC    CL4' '
         ORG
         SPACE
L4MSG8   DC    CL(L'L4MSG)' '
         ORG   L4MSG8
         DC    C'DSCB TTR CHANGED FROM '
L4TTR1   DC    CL6' ',C' TO '
L4TTR2   DC    CL6' '
         ORG
         SPACE 2
LINE5    DC    CL133' '      TO PRINT CONTROL CARD IMAGE & MSGS
         ORG   LINE5
L5CC     DS    C             CARRIAGE CONTROL
L5DATA   DS    CL80          CARD IMAGE OR MESSAGE
L5MSG    DS    CL52          MESSAGE
         ORG
         SPACE 2
MSG1     DC    CL(L'L5MSG)' '
         ORG   MSG1
         DC    C'INCORRECT OPERAND AT COLUMN '
M1COL    DC    CL2' '
         ORG
         AIF   (&MVT).P112
         SPACE 2
MSG2     DC    CL80' '
         ORG   MSG2
         DC    C'CATALOG LOCATE FAILED - NODE OR CATALOG WRONG - R0='
M2R0     DC    CL2' ',C' R15='
M2R15    DC    CL2' '
         ORG
         SPACE 2
MSG3     DC    CL80' '
         ORG   MSG3
         DC    C'INCORRECT ALIAS RETURNED _ '
M3DSN    DS    CL44
         ORG
         SPACE 2
MSG4     DC    CL80' '
         ORG   MSG4
         DC    C'DYNALLOC FAILED - RC='
M4RC     DC    ZL2'0',C', ERROR CD '
M4ERRCD  DC    CL4' ',C' INFO CD '
M4INFOCD DC    CL4' ',C' UNIT '
M4UNIT   DC    CL8' ',C'VOLUME '
M4VOL    DC    CL6' '
         ORG
.P112    SPACE 2
MSG5     DC    CL44' '       FOR ALIAS ENTRIES
         ORG   MSG5
M5ALIAS  DC    CL8' ',C' IS AN ALIAS OF INDEX '
M5INDEX  DC    CL8' '
         ORG
         SPACE 2
MSG6     DC    CL44' '       FOR NEW CVOL POINTERS
         ORG   MSG6
M6INDEX  DC    CL8' ',C' IS A CONTROL VOLUME POINTER TO'
         ORG
         SPACE 2
MSG7     DC    CL50' '
         ORG   MSG7
         DC    C'I/O ERROR - STATUS '
M7STAT   DC    CL4' ',C' SENSE '
M7SENSE  DC    CL4' ',C' LENGTH '
M7LENGTH DC    ZL3'0'
         ORG
         SPACE 2
MSG8     DC    CL50' '
         ORG   MSG8
M8CNT    DC    CL6'0',C' GENERATIONS NOT ACCOUNTED FOR'
         ORG
         SPACE 2
LINE6    DC    CL133' '
         ORG   LINE6+1
         DC    C'INVALID NAME AT TTR '
L6TTR    DC    CL6' ',C' OFFSET '
L6OFF    DC    CL2' ',C' NAME '
L6NAME   DS    CL44          DATA SET OR INDEX NAME
         ORG
         SPACE 2
LINE7    DC    CL133' '
         ORG   LINE7+1
         DC    C'INVALID CATALOG STRUCTURE AT TTR '
L7TTR    DC    CL6' ',C' OFFSET '
L7OFF    DC    CL2' ',C' SNAP ID '
L7ID     DC    CL3' ',C' REASON '
L7RSN    DS    CL50
         ORG
         SPACE 2
LINE8    DC    CL133' '
L8MSGA   DC    C'VOLUME CONTROL BLOCK'
L8MSGB   DC    C' - '
L8MSGC   DC    C'ENTRY BLOCK'
L8MSGH   DC    C' EXPECTED '
         ORG   LINE8+1
         DC    C'BLOCK '
L8TTR1   DC    CL6' ',C' IS '
L8MSG1   DS    CL(L'L8MSGA)
L8MSG2   DS    CL(L'L8MSGB)
L8MSG3   DS    CL(L'L8MSGC)
         ORG   L8MSG1
L8MSG4   DS    CL(L'L8MSGC)
L8MSG5   DS    CL(L'L8MSGB)
L8MSG6   DS    CL(L'L8MSGA)
L8MSG7   DC    CL(L'L8MSGH)' '
L8LNG2   EQU   *-L8MSG1
         ORG
         SPACE
L8MSGD   DC    CL(L8LNG2)' '
         ORG   L8MSGD
         DC    C'REFERENCED FROM '
L8TTR2   DC    CL6' ',C' - MULTIPLE REFERENCES'
         ORG
         SPACE
L8MSGE   DC    CL(L8LNG2)' '
         ORG   L8MSGE
         DC    C'UNUSED BLOCK REFERENCED FROM '
L8TTR3   DC    CL6' '
         ORG
         SPACE
L8MSGF   DC    CL(L8LNG2)'NOT REFERENCED'
         SPACE 2
LINE9    DC    CL133' '
         ORG   LINE9+1
         DC    C'EXTENT ADDRESS '
L9CCLO   DC    CL4' ',C'-'
L9HHLO   DC    CL4' ',C' TO '
L9CCHI   DC    CL4' ',C'-'
L9HHHI   DC    CL4' '
         ORG
         SPACE 2
LINE10   DC    CL133' '
         ORG   LINE10+1
         DC    C'WRONG BLOCK COUNT - '
L10BLK   DC    CL5' ',C' SHOULD BE '
L10DEB   DC    CL5' ',C' ACCORDING TO THE DEB'
         ORG
         SPACE 2
T1DSCB   DC    C'DSCB POINTERS FIXED '
T1DSCB1  DC    CL4' ',C'PTRS SUPPLIED '
T1DSCB2  DC    CL5' '
T1DSCBL  EQU   *-T1DSCB
         SPACE
TOTAL1   DC    CL133' '      FIRST TOTAL LINE
         ORG   TOTAL1+1
         DC    C'CATALOG STATISTICS - BLOCKS '
T1BLK    DC    CL6' ',C'BLKS IN USE '
T1BLKU   DC    CL6' ',C'WORK AREA BLKS '
T1BLKW   DC    CL4' ',C'BLKS REREAD '
T1BLKR   DC    CL4' '
T1DSCBX  DS    CL(T1DSCBL)        SLOT FOR POINTER TOTALS
         ORG
         SPACE 2
T2MSG    DC    5CL14'CYL   AVG.'
         SPACE
TOTAL2   DC    CL133' '      SECOND TOTAL LINE
         ORG   TOTAL2+1
         DC    C'CATALOG ENTRIES BY LEVEL - LE'
T2OFFA   EQU   *-TOTAL2      OFFSET TO LEVEL NUMBER
         DC    C'VEL  '
T2OFFB   EQU   *-TOTAL2      OFFSET TO DATASET COUNT
         DC    C'DATA SETS  I'
T2OFFC   EQU   *-TOTAL2      OFFSET TO INDEX COUNT
         DC    C'NDICES    '
T2SEEK   DS    CL(5*L'T2MSG)
         ORG
         SPACE 2
T3SEEK   DSECT ,             SEEK PRINT AREA DESCRIPTION
T3DESC   DS    CL5,C         LENGTH OF SEEK FOR THIS AVERAGE
T3AVG    DS    CL7,C         AVERAGE NUMBER OF THIS LENGTH SEEK PER DS
T3SLNG   EQU   *-T3SEEK
         SPACE 2
XCVOLIST CSECT ,             RESUME THE CSECT
         SPACE
TOTAL3   DC    CL133' '      THIRD TOTAL LINE
         ORG   TOTAL3+T2OFFA
T3LVL    DS    CL2
         ORG   TOTAL3+T2OFFB
T3DS     DS    CL6
         ORG   TOTAL3+T2OFFC
T3IND    DS    CL5,CL3
T3SDATA  DS    CL(5*T3SLNG)
         ORG
         SPACE
TOTAL4   DC    CL133' '      FOURTH TOTAL LINE
         ORG   TOTAL4+1
         DC    C'TOTAL DATA SETS CATALOGUED '
T4TOT    DC    CL7' ',C'   VOLUME CONTROL BLOCKS '
T4VCB    DC    CL5' ',C'   GENERATION DATA GROUP INDICES '
T4GDG    DC    CL6' ',C'   GENERATION DATA SETS '
T4GDS    DC    CL7' '
         ORG
         SPACE 3
FILEMASK DC    X'402020202120'
FILEDIT  DC    XL(L'FILEMASK)'0',C','
VOLAREA  DC    CL12' '       FOR BUILDING VOLUME & FILE
         SPACE 3
         LTORG
         SPACE 6
* DEFINITIONS OF CATALOG ENTRIES
         SPACE
CATALOG0 DSECT ,             VOLUME INDEX CONTROL ENTRY
C0NAME   DS    XL8           NAME  - CONTAINS BINARY 1
C0LAST   DS    XL3           TTR OF LAST BLOCK OF THE VOLUME INDEX
C0CNT    DS    X             HALF WORD COUNT - ALWAYS 5
C0END    DS    XL3           TTR OF LAST BLOCK IN THE CATALOG
         DS    X
C0FIRST  DS    XL3           TTR OF FIRST UNUSED BLOCK IN THE CATALOG
         DS    X
C0UNUSED DS    XL2           UNUSED BYTES IN THE LAST BLK OF VOL INDEX
         SPACE 3
         ORG   CATALOG0
CATALOG1 EQU   *             INDEX CONTROL ENTRY
C1NAME   DS    XL8           NAME - CONTAINS BINARY 1
C1LAST   DS    XL3           TTR OF LAST BLOCK IN THE INDEX
C1CNT    DS    X             COUNT OF HALFWORDS - ALWAYS 3
C1XLO    DS    XL3           TTR OF BLOCK CONTAINING THIS ENTRY
C1ALIAS  DS    X             NUMBER OF ALIASES
C1UNUSED DS    XL2           UNUSED BYTES IN LAST BLOCK OF THIS INDEX
         SPACE 3
         ORG   CATALOG0
CATALOG2 EQU   *             INDEX LINK ENTRY
C2NAME   DS    XL8           NAME  - CONTAINS FF'S
C2LINK   DS    XL3           TTR OF NEXT BLOCK OF THIS INDEX OR 0
C2CNT    DS    X             HALF WORD COUNT - ALWAYS 0
         SPACE 3
         ORG   CATALOG0
CATALOG3 EQU   *             INDEX ENTRY
C3NAME   DS    CL8           NAME - NAME OF THIS INDEX LEVEL
C3INDEX  DS    XL3           TTR OF FIRST BLOCK IN THIS INDEX
C3CNT    DS    X             COUNT OF HALFWORDS - ALWAYS 0
         SPACE 3
         ORG   CATALOG0
CATALOG4 EQU   *             DATA SET POINTER ENTRY                    *
                             FOR DATA SETS RESIDING ON UP TO 5 VOLUMES
C4NAME   DS    CL8           NAME  - SIMPLE NAME OF THIS DATA SET
C4DSCB   DS    XL3           TTR OF DSCB FOR THIS DS OR 0
C4CNT    DS    X             HALF WORD COUNT - OF THE FORM 6M+1        *
                             WHERE M IS THE VOLUME COUNT (UP TO 5)
C4VOLS   DS    XL2           COUNT OF VOLUMES ON WHICH THE DATA SET    *
                             RESIDES
C4VOLUME DS    5XL12         VOLUME INFORMATION (OCCURS 1-5 TIMES)     *
                             CONTAINS 4-BYTE DEVICE TYPE, VOLUME SERIAL*
                             AND 2-BYTE DATA SET SEQUENCE NUMBER
         SPACE 3
         ORG   CATALOG0
CATALOG5 EQU   *             VOLUME CONTROL BLOCK POINTER ENTRY        *
                             FOR DATA SETS RESIDING ON MORE            *
                             THAN 5 VOLUMES
C5NAME   DS    CL8           NAME - SIMPLE NAME OF THIS DATA SET
C5ADDR   DS    XL3           TTR OF FIRST VOLUME CONTROL CONTROL BLOCK
C5CNT    DS    X             COUNT OF HALFWORDS - ALWAYS 1
         DS    XL2           ZEROS
         SPACE 3
         ORG   CATALOG0
CATALOG6 EQU   *             GENERATION INDEX POINTER ENTRY
C6NAME   DS    CL8           NAME - NAME OF THE GDG INDEX
C6ADDR   DS    XL3           TTR OF GENERATION INDEX
C6CNT    DS    X             HALF WORD COUNT - ALWAYS 2
C6FLAGS  DS    X             CONTAIN GDG OPTIONS
C6EMPTY  EQU   1             WHEN THE INDEX IS FULL -                  *
                             UNCATALOG ALL ENTRIES
C6DELETE EQU   2             SCRATCH DATA SETS WHEN                    *
                             THEY ARE UNCATALOGUED (APPLIES TO DATA    *
                             SETS ON MOUNTED DA VOLUMES ONLY)
C6MAX    DS    X             MAXIMUM GENERATIONS ALLOWED
C6UNK    DS    X             UNKNOWN FIELD
C6CURR   DS    X             CURRENT GENERATION COUNT - NUMBER OF      *
                             GENERATIONS CURRENTLY CATALOGUED
         SPACE 3
         ORG   CATALOG0
CATALOG8 EQU   *             ALIAS ENTRY
C8NAME   DS    CL8           NAME - ALIAS NAME
C8ADDR   DS    XL3           TTR OF FIRST BLOCK IN THIS INDEX
C8CNT    DS    X             HALF WORD COUNT - ALWAYS 4
C8TRUE   DS    CL8           TRUE NAME
         SPACE 3
         ORG   CATALOG0
CATALOG9 EQU   *             NEW CONTROL VOLUME POINTER ENTRY          *
                             MVT ONLY - CAN ONLY APPEAR IN A VOLUME    *
                             INDEX (FIRST QUALIFIER OF DSN)
C9NAME   DS    CL8           NAME - NAME OF THIS INDEX LEVEL
         DS    XL3           ZEROS
C9CNT    DS    X             COUNT OF HALFWORDS - ALWAYS 5
C9DEVTYP DS    XL4           DEVICE TYPE OF THE CVOL
C9SERIAL DS    CL6           VOLUME SERIAL OF THE CVOL
         SPACE 3
CATALOG7 DSECT ,             VOLUME CONTROL BLOCK                      *
                             THIS DEFINITION OCCUPIES AN ENTIRE BLOCK
C7CNT    DS    XL2           NUMBER OF VOLUMES DEFINED ON THIS         *
                             AND SUBSEQUENT VOLUME CONTROL BLOCKS, IF  *
                             MORE THAN 20 THEN THERE ARE MORE BLOCKS
C7VOLUME DS    20XL12        VOLUME INFORMATION (OCCURS 1-20 TIMES)    *
                             CONTAINS 4-BYTE DEVICE TYPE, VOLUME SERIAL*
                             AND 2-BYTE DATA SET SEQUENCE NUMBER
         DS    XL10          ZEROS
C7CHAIN  DS    XL3           TTR OF NEXT VOLUME CONTROL BLOCK OR       *
                             ZERO, WILL BE NONZERO ONLY                *
                             IF C7CNT IS MORE THAN 20
         DS    X
         SPACE 3
* CONTROL AREA TO STORE CATALOG BLOCKS - QUEUE IS KEPT IN ORDER BY
* MOST RECENT USE - WHEN A NEW BLOCK IS NEEDED THE OLDEST BLOCK
* IS OVERLAID - WHEN A BLOCK IS EXHAUSTED IT IS PUT ON THE END
         SPACE
CATQ     DSECT ,
CQHI     DS    A              NEXT NEWER BLOCK - CHAIN IS CIRCULAR     *
                              SO THIS PTR IN THE NEWEST BLOCK POINTS   *
                              TO THE OLDEST BLOCK
CQLO     DS    A             NEXT OLDER BLOCK - ALSO A CIRCULAR CHAIN
CQCYL    DS    H             CYLINDER OF THIS BLOCK
CQTTR    DS    XL3           TTR OF THIS BLOCK (ZERO IF UNUSED)
         DS    0D            ALIGN BECAUSE OF READ                     *
                                  (POSSIBLE DATA OVERRUN)
CQBLOCK  DS    XL264         CATALOG BLOCK (WITH KEY)
         DS    0D
CQLNG    EQU   *-CATQ        LENGTH OF THIS AREA
         SPACE 3
CASCADE  DSECT ,             TABLE ENTRY TO HANDLE INDEX LEVEL         *
                             EXPLOSION TO DATA SET NAME - TABLE IS 22  *
                             LEVELS DEEP TO MATCH MAX QUALIFICATION
CSNAME   DS    CL8           INDEX OR DATA SET NAME
CSADDR   DS    A             IN-CORE POINTER TO CATALOG BLOCK
CSTTR    DS    XL3           TTR OF CATALOG BLOCK
CSIND    DS    X             INDICATORS
CSFIRST  EQU   128           FIRST LEVEL INDICATOR
CSLAST   EQU   64            22ND LEVEL INDICATOR
CSUSED   EQU   32            INDEX LEVEL IS IN USE
CSICE    EQU   16            INDEX CONTROL ENTRY FOUND
CSGDG    EQU   8             GDG INDEX
CSNODE   EQU   4             CSNAME IS PART OF A NODE
CSOFFSET DS    H             BYTE OFFSET TO ENTRY IN THE QUEUE BLOCK
CSNMLNG  DS    H             SIGNIFICANT BYTES IN CSNAME
CSTOTAL  DS    F             TOTAL (INDEX & DATASET) ENTRIES THIS LEVEL
CSDS     DS    F             DATASET ENTRIES AT THIS LEVEL
CSCYL    DS    H             CYLINDER OF THIS BLOCK
CSTTR1   DS    XL3           TTR OF INDEX CONTROL ENTRY
CSTTR2   DS    XL3           TTR OF END OF INDEX
CSCUM    DS    16H           ACCUMULATORS FOR COUNT OF 0-12
*                            CYLINDER MOVES PLUS THE COUNT AND
*                            TOTAL CYLINDERS MOVED FOR MOVES
*                            MORE THAN 12 CYLINDERS LONG
CSCUMA   EQU   (*-CSCUM)/L'CSCUM       NUMBER OF ACCUMULATORS
CSCUMB   EQU   CSCUMA-4      UPPER LIMIT FOR INDIVIDUAL ACCUMULATIONS
CSCUMC   EQU   *-CSCUM       NUMBER OF BYTES IN ACCUMULATORS
         DS    0F            FOR ALIGNMENT
CSLNG    EQU   *-CASCADE     LENGTH OF THIS DSECT
         SPACE 3
XCVOLIST CSECT ,             RESUME CSECT
         DS    0D            ALIGN
CSTBL    DC    22XL(CSLNG)'0'     TABLE AREA
         ORG   CSTBL+CSIND-CASCADE
         DC    AL1(CSFIRST)  SET FIRST LEVEL INDICATOR
         ORG   *+21*CSLNG-1
         DC    AL1(CSLAST)   SET LAST LEVEL INDICATOR
         ORG
CSTBLEND EQU   *-1
         SPACE 3
CYLACCUM DC    (CSCUMA)F'0'  ACCUMULATORS FOR TOTAL CYLINDER MOVES
SEEKPTR  DC    A(0)          NEXT SEEK COUNTER
SEEKCNT  DC    H'0'          REMAINING COUNT
         SPACE 1
CYLDESC  DC    C'  FH '      DESCRIPTIONS FOR COUNTERS
         DC    C'   0 '
         DC    C'   1 '
         DC    C'   2 '
         DC    C'   3 '
         DC    C'   4 '
         DC    C'   5 '
         DC    C'   6 '
         DC    C'   7 '
         DC    C'   8 '
         DC    C'   9 '
         DC    C'  10 '
         DC    C'  11 '
         DC    C'  12 '
         DC    C'13-UP'
         EJECT                                              *HMD 12/82*
RCDOUT   DSECT ,             OUTPUT RCD FORMATS FOR SYSUT2
ORDW     DS    2H            RECORD DESCRIPTOR WORD
OTYP     DS    C             RECORD TYPE - 1 IS GDG INDEX
*                                          2 IS DATA SET RECORD
*                                          3 IS UNUSED INDEX LEVEL
*                                          4 IS UNUSED GDG INDEX
         DS    C
ODSN     DS    CL44          DATA SET OR INDEX NAME
         DS    0H            END OF UNUSED INDEX
OLNG0    EQU   *-RCDOUT      LENGTH OF UNUSED INDEX RECORD
OLVL     DS    H             COUNT OF LEVELS USED IN THE DSNAME
OVOLCNT  DS    0H            DS RECORD - VOLUME COUNT
OCURNTRY DS    H             GDG RECORD - CURRENT DATA SETS CATALOGUED
ODSNAME  DS    22CL8         DATA SET OR INDEX NAME STRUCTURE
OBASIC   DS    0H            END OF COMMON SECTION
OLNG1    EQU   *-RCDOUT      LENGTH OF COMMON SECTION
         SPACE
* DEFINITION OF GDG SECTION
OENTRY   DS    H             MAX DATA SET ENTRIES FOR THIS GDG
OEMPTY   DS    C             'E' IF EMPTY SPECIFIED, OTHERWISE BLANK
ODELETE  DS    C             'D' IF DELETE SPECIFIED, OTHERWISE BLANK
         DS    0H
OLNG2    EQU   *-RCDOUT      LENGTH OF GDG RECORD
         SPACE
* DEFINITION OF DATA SET PORTION
         ORG   OBASIC
ODEVNAME DS    CL8           GENERIC NAME OF DEVICE FOR FIRST VOLUME
OLNG3    EQU   *-RCDOUT      LENGTH OF FIXED PART OF DATA SET RECORD
* THE FOLLOWING AREA IS REPEATED ONCE FOR EACH VOLUME
* OVOLCNT TELLS HOW MANY
ODEVTYPE DS    XL4           DEVICE TYPE (HEX)
OSERIAL  DS    CL6           VOLUME SERIAL
OFILE    DS    H             FILE NUMBER - DISK IS ALWAYS 0
OLNG4    EQU   *-ODEVTYPE    LENGTH OF VOLUME ENTRY
         SPACE 3
CHKNTRY  DSECT ,             TABLE TO CHECK CATALOG                    *
                             ONE ENTRY PER CATALOG BLOCK
CKTTR    DS    XL3           TTR OF BLOCK WHICH REFERENCES THIS BLOCK
CKIND    DS    X             BIT SWITCHES
CKNTRY   EQU   128           THIS BLOCK IS AN ENTRY BLOCK
CKVCB    EQU   64            THIS BLOCK IS A VOLUME CONTROL BLOCK
CKXPNTRY EQU   32            THIS BLOCK IS EXPECTED TO BE              *
                                  AN ENTRY BLOCK
CKXPVCB  EQU   16            THIS BLOCK IS EXPECTED TO BE              *
                                  A VOLUME CONTROL BLOCK
CKMULT   EQU   8             THIS BLOCK IS REFERENCED BY MULTIPLE BLKS
CHKLNG   EQU   *-CHKNTRY     LENGTH OF THIS BLOCK
         EJECT
VOLNTRY  DSECT ,             VOLUME ALLOCATION TABLE ENTRY FOR         *
                             DSCB TTR CHECK - ONE ENTRY PER VOLUME
VOLDDN   DS    CL8           DDNAME
VOLSERN  DS    CL6           VOLUME SERIAL
VOLCYL   DS    H             TRACKS PER CYLINDER
VOLLNG   EQU   *-VOLNTRY
         SPACE 3
         END
