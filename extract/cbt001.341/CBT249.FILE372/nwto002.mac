//NWTO002 JOB ,'REPLACE WTO EXIT',CLASS=9,COND=(4,LT),TYPRUN=HOLD
/*PROCLIB NER.SP1IPO.CNTL
/*JOBPARM Q=F,I
//*
//IEECVXIT EXEC ASMHXC,OPTIONS='LIST,XREF(SHORT),DECK'
//SYSLIB   DD  DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=6400,
//             VOL=SER=IPORES,UNIT=3330-1
//         DD  DSN=SYS1.AMODGEN,DISP=SHR,
//             VOL=SER=IPODLB,UNIT=3330-1
//         DD  DSN=SYS1.MACLIB,DISP=SHR,
//             VOL=SER=IPORES,UNIT=3330-1
//         DD  DSN=SYS1.SYSMACS,DISP=SHR
//SYSPUNCH DD  DSN=&&PUNCH(IEECVXIT),DISP=(NEW,PASS),
//             UNIT=SYSDA,SPACE=(TRK,(20,20,1),RLSE),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//SYSIN    DD  *
IEECVXIT TITLE '                           NERDC WTO EXIT ROUTINE'
IEECVXIT CSECT ,
***********************************************************************
*                                                                     *
*     IEECVXIT  --  NERDC WTO EXIT ROUTINE                            *
*                                                                     *
*     THIS ROUTINE REPLACES THE DUMMY WTO/WTOR EXIT ROUTINE           *
*     IN SVC 35.  CSECT IEECVXIT IN LOAD MODULE IGC0003E IN           *
*     SYS1.LPALIB.                                                    *
*                                                                     *
*     ENTRY IS VIA BALR 14,15 FROM IEAVVWTO AT OFFSET 570 IN          *
*     IEAVVWTO (UZ36734 LEVEL).                                       *
*                                                                     *
*     FOR PROPER OPERATION OF THIS EXIT USERMOD NWTO001 SHOULD        *
*     BE APPLIED TO IEAVVWTO.  THIS WILL ALLOW ALL MESSAGES TO        *
*     INVOKE THIS EXIT, REGARDLESS OF THE ISSUER'S AUTHORIZATION      *
*     OR THE MESSAGE'S MCS FLAGS.                                     *
*                                                                     *
*     IGC0003E SHOULD BE LINKED AS RENT AND REUS ON A PAGE BOUNDRY.   *
*                                                                     *
***********************************************************************
         SPACE 3
R1       EQU   1                       INPUT PARM ADDRESS
R2       EQU   2                       WORK
R4       EQU   4                       WORK
R5       EQU   5                       WORK
R6       EQU   6                       WORK
R10      EQU   10                      REG10 POINTS TO WPL
R12      EQU   12                      BASE REGISTER
R15      EQU   15                      ENTRY POINT REGISTER
         EJECT
         SAVE  (14,12),,*
         LR    R12,R15                 COPY ENTRY POINT
         USING IEECVXIT,R12            ADDRESSABILITY
         USING WPLIST,R10              WTO PARAMETER LIST
         L     R10,0(R1)               ADDRESS PARM LIST
         LA    R6,MSGTABLE             CURRENT TABLE ENTRY POINTER
         SPACE 2
*  THIS LOOP SCANS THE TABLE FOR A MATCH
         SPACE
LOOP1    LA    R5,7(,R6)               POINT TO TEXT ENTRY 1
         SLR   R4,R4
         IC    R4,6(R6)                LOAD NUMBER OF TEXT FIELDS
         SPACE 2
*  THIS LOOP SCANS THE TEXT FIELDS OF EACH TABLE ENTRY
         SPACE
LOOP2    SLR   R1,R1
         IC    R1,0(R5)                LOAD DISPLACEMENT INTO WTO
         LA    R1,WPTEXT(R1)           POINT TO WTO TEXT
         SLR   R2,R2
         IC    R2,1(R5)                LOAD TEXT LENGTH
         EX    R2,WTOCLC               COMPARE TEXT FIELD 1
         BNE   NEXT                    NOT EQUAL, GO TO NEXT ENTRY
         LA    R5,3(R2,R5)             BUMP TO NEXT TEXT FIELD
         BCT   R4,LOOP2                TEST NEXT TEXT FIELD
         SPACE
*  IF IT GETS TO HERE THEN ALL THE TEXT FIELDS MATCHED
         SPACE
         TM    1(R6),X'80'             CHANGE ROUTE CODES ?
         BZ    NOROUT                  NO....
         ICM   R1,3,2(R6)              LOAD NEW ROUTE CODES
         STCM  R1,3,WPROUT             STORE NEW ROUTE CODES
         SPACE
NOROUT   TM    1(R6),X'40'             CHANGE DESC CODES ?
         BZ    NODESC                  NO....
         ICM   R1,3,4(R6)              LOAD NEW DESC CODES
         STCM  R1,3,WPDESC             STORE NEW DESC CODES
         SPACE
NODESC   B     RETURN
         SPACE
*  BUMP TO NEXT TABLE ENTRY AND LOOP BACK
         SPACE
NEXT     SLR   R1,R1
         ICM   R1,1,0(R6)              GET DISPLACEMENT TO NEXT
         BZ    RETURN                  ZERO THEN LAST ENTRY
         LA    R6,0(R1,R6)             BUMP TO NEXT
         B     LOOP1                   LOOP BACK
         SPACE 2
*  CLEAN UP AND EXIT
         SPACE
RETURN   RETURN (14,12)                RETURN TO CALLER (IEAVVWTO)
         SPACE 3
WTOCLC   CLC   0(0,R1),2(R5)           EX ABOVE TO COMPARE TEXT FIELDS
         EJECT
         MACRO
&NAME    MSGTAB &ROUTE=,&DESC=,&SELECT=,&LAST=NO,&FIRST=NO
         GBLA  &NMSGTAB
         LCLC  &M,&M1,&M2,&M2L,&C
         LCLA  &N,&N1,&N2,&N3,&NI,&I
         LCLB  &BF(8),&BR(16),&BD(16)
.*
.*  FUNCTION OF ABOVE SET SYMBOLS
.*
.*       &NMSGTAB   MESSAGE TABLE ENTRY COUNTER
.*       &M         CURRENT TABLE ENTRY LABEL
.*       &M1        NEXT TABLE ENTRY LABEL
.*       &M2        TEXT FIELD LABELS
.*       &M2L       LENGTH OF TEXT FIELDS
.*       &C         USED TO CONSTRUCT FLAGS AND ROUTE/DESC CODES
.*       &N         NUMBER OF TEXT FIELDS
.*       &N1        TEXT FIELD COUNTER
.*       &N2        &N1*2-1
.*       &N3        &N1*2
.*       &NI        COUNTER IN ROUTE/DESC LOGIC
.*       &I         USED TO INDEX &BR AND &BD
.*       &BF        FLAGS BIT ARRAY
.*       &BR        ROUTE CODE BIT ARRAY
.*       &BD        DESC CODE BIT ARRAY
.*
.*
.**********************************************************************
.*                                                                    *
.*     WTO SELECTION TABLE MACRO OPERANDS:                            *
.*                                                                    *
.*        SELECT=(O1,S1,O2,S2,...)    SPECIFIES THE STRING (S) AND    *
.*                                    AN OFFSET (O) TO MATCH IN THE   *
.*                                    WTO BUFFER                      *
.*                                                                    *
.*        ROUTE=(N1,N2,...)           SPECIFIES THE NEW ROUTE         *
.*              NONE                  CODES TO BE ASSIGNED IF THE     *
.*                                    WTO IS SELECTED.                *
.*                                                                    *
.*        DESC=(D1,D2,...)            SPECIFIES THE NEW DESCRIPTOR    *
.*             NONE                   CODES TO BE ASSIGNED IF THE     *
.*                                    WTO IS SELECTED.                *
.*                                                                    *
.*        FIRST=YES                   INDICATES THAT THIS IS THE      *
.*                                    FIRST ENTRY IN THE TABLE.       *
.*                                                                    *
.*        LAST=YES                    INDICATES THAT THIS IS THE      *
.*                                    LAST ENTRY IN THE TABLE.        *
.*                                                                    *
.*                                                                    *
.*     WTO SELECTION TABLE FORMAT:                                    *
.*                                                                    *
.*        AL1( )    LENGTH OF THIS ENTRY IN BYTES (ZERO IF LAST)      *
.*        BL1' '    FLAG BYTE                                         *
.*        BL2' '    ROUTE CODES TO BE USED IF MESSAGE MATCHES         *
.*        BL2' '    DESC CODES TO BE USED IF MESSAGE MATCHES          *
.*        AL1( )    NUMBER OF TEXT FIELDS TO MATCH IN THIS ENTRY      *
.*        AL1( )    OFFSET OF FIRST FIELD IN MESSAGE                  *
.*        AL1( )    LENGTH OF FIRST TEXT FIELD - 1                    *
.*        C'   '    VALUE OF FIRST TEXT FIELD                         *
.*        AL1( )    OFFSET OF SECOND FIELD IN MESSAGE                 *
.*        AL1( )    LENGTH OF SECOND TEXT FIELD - 1 . . . ETC.        *
.*        C'   '    VALUE OF SECOND TEXT FIELD . . . ETC.             *
.*                                                                    *
.*                                                                    *
.*     IF MULTIPLE TEXT FIELDS ARE TO BE MATCHED THEN THE EFFECT IS   *
.*     THAT OF AN 'AND' OPERATION.  TO PERFORM AN 'OR' OPERATION      *
.*     MULTIPLE TABLE ENTRIES ARE USED.                               *
.*                                                                    *
.*     TO AVOID WASTING CPU CYCLES PLACE THE MORE COMMON MESSAGES     *
.*     AT THE TOP OF THE TABLE AND THE LEAST COMMON FIELD AS          *
.*     THE FIRST FIELD IN THE ENTRY.                                  *
.*                                                                    *
.**********************************************************************
.*    WRITTEN BY: SCOTT C. CRUMPTON                                   *
.**********************************************************************
.*
.*
.*  BUILD AND INCREMENT TABLE ENTRY COUNTER
.*
         AIF   ('&FIRST' NE 'YES').NOTF
&NMSGTAB SETA  1                       INIT COUNTER
.NOTF    ANOP
&M       SETC  'MSG&NMSGTAB'
&NMSGTAB SETA  &NMSGTAB+1              INCREMENT COUNTER
&M1      SETC  'MSG&NMSGTAB'
.*
.*  DEFINE LABEL IF PRESENT
.*
         AIF   ('&NAME' EQ '').NONAME
&NAME    EQU   *
.NONAME  ANOP
.*
.*  BUILD DISPLACEMENT TO NEXT ENTRY IF PRESENT
.*
         AIF   ('&LAST' NE 'YES').NOTL
&M       DC    AL1(0)                  LAST TABLE ENTRY
         AGO   .MSG111
.NOTL    ANOP
&M       DC    AL1(&M1-*)              DISPLACEMENT TO NEXT ENTRY
.MSG111  ANOP
.*
.*  BUILD ROUTE CODE BIT MASK
.*
         AIF   (T'&ROUTE EQ 'O').REND
&BF(1)   SETB  1
         AIF   ('&ROUTE' EQ 'NONE').REND
&I       SETA  1
.*
.RL      ANOP
&NI      SETA  &ROUTE(&I)
&I       SETA  &I+1
         AIF   (&NI GE 1 AND &NI LE 16).RA
         MNOTE 8,'      &NI IS AN INVALID ROUTE CODE'
         AGO   .RNX
.RA      ANOP
&BR(&NI) SETB  1
.RNX     AIF   (&I LE N'&ROUTE).RL
.REND    ANOP
.*
.*  BUILD DESC CODE BIT MASK
.*
         AIF   (T'&DESC EQ 'O').DEND
&BF(2)   SETB  1
         AIF   ('&DESC' EQ 'NONE').DEND
&I       SETA  1
.*
.DL      ANOP
&NI      SETA  &DESC(&I)
&I       SETA  &I+1
         AIF   (&NI GE 1 AND &NI LE 16).DA
         MNOTE 8,'      &NI IS AN INVALID DESCRIPTOR CODE'
         AGO   .DNX
.DA      ANOP
&BD(&NI) SETB  1
.DNX     AIF   (&I LE N'&ROUTE).DL
.DEND    ANOP
.*
.*  SET FLAGS AND ROUTE/DESC CODES
.*
&C   SETC '&BF(1)&BF(2)&BF(3)&BF(4)&BF(5)&BF(6)&BF(7)&BF(8)'
         DC    BL1'&C'                 FLAGS
&C   SETC '&BR(1)&BR(2)&BR(3)&BR(4)&BR(5)&BR(6)&BR(7)&BR(8)'
&C   SETC '&C&BR(9)&BR(10)&BR(11)&BR(12)&BR(13)&BR(14)&BR(15)&BR(16)'
         DC    BL2'&C'                 ROUTE CODE
&C   SETC '&BD(1)&BD(2)&BD(3)&BD(4)&BD(5)&BD(6)&BD(7)&BD(8)'
&C   SETC '&C&BD(9)&BD(10)&BD(11)&BD(12)&BD(13)&BD(14)&BD(15)&BD(16)'
         DC    BL2'&C'                 DESC CODE
.*
.*
.*  DEFINE NUMBER OF TEXT ELEMENTS IN ENTRY
.*
&N       SETA  N'&SELECT/2
.*
         DC    AL1(&N)                 NUMBER OF TEXT FIELDS
.*
.*  BUILD TEXT FIELD SUB-ENTRIES
.*
&N1      SETA  1
.*
.TLOOP   ANOP
         AIF   (&N1 GT &N).ETLOOP
&M2      SETC  '&M.T&N1'
&M2L     SETC  'L''&M2-1'
&N2      SETA  &N1*2-1
&N3      SETA  &N1*2
         DC    AL1(&SELECT(&N2))       OFFSET OF TEXT IN WTO
         DC    AL1(&M2L)               LENGTH OF TEXT FIELD - 1
         AIF   ('&SELECT(&N3)'(1,1) NE '''').NOQUOTE
&M2      DC    C&SELECT(&N3)           TEXT
         AGO   .QDONE
.NOQUOTE ANOP
&M2      DC    C'&SELECT(&N3)'         TEXT
.QDONE   ANOP
.*
.*  LOOP BACK AND DO NEXT TEXT SUB-FIELD
.*
&N1      SETA  &N1+1                   INCREMENT SUB-FIELD COUNT
         AGO   .TLOOP
.*
.*
.ETLOOP  ANOP
         SPACE 4
         MEND
         EJECT
MSGTABLE EQU   *
         SPACE 2
*  SUPPRESS IEF677I WARNING MESSAGES ISSUED....
         MSGTAB SELECT=(0,IEF677I),ROUTE=11,FIRST=YES
*  SUPPRESS ACF2 SECURITY LOGGING MESSAGE
         MSGTAB SELECT=(0,ACF99900),ROUTE=11          R2.2.1
         MSGTAB SELECT=(0,' ACF99900'),ROUTE=11       R3.1.3
*  SUPPRESS ACF2 INCORRECT PASSWORD MESSAGE
         MSGTAB SELECT=(0,ACF01200),ROUTE=11
*  SUPPRESS MESSAGES FORM IUTSMFID UTILITY
         MSGTAB SELECT=(1,IUTSMFID),ROUTE=11
*  SUPPRESS MESSAGES FROM RELEASE UTILITY
         MSGTAB SELECT=(0,NERJ000),ROUTE=11
         MSGTAB SELECT=(0,NERJ999),ROUTE=11
*  SUPPRESS USELESS VTAM MESSAGES ISSUED AT IPL
         MSGTAB SELECT=(0,IST322I,48,'SEQUENCE ERROR'),ROUTE=11
         MSGTAB SELECT=(0,IST323I,16,LINE,39,'LINE    ',               +
               58,'        '),ROUTE=11
*  CHANGE DLS MESSAGES TO APPEAR ON MASTER CONSOLE
         MSGTAB SELECT=(0,INA999I),ROUTE=2
         MSGTAB SELECT=(0,INA992I),ROUTE=2
         MSGTAB SELECT=(0,INA),ROUTE=1,DESC=2,LAST=YES
         EJECT
*  WTO PARAMETER LIST DEFINATION
         SPACE 2
WPLIST   DSECT
WPTEXT   DS    CL128                   MSG TEXT PADDED WITH BLANKS
WPROUT   DS    BL4                     ROUTE CODE
WPDESC   DS    BL4                     DESC CODE
         SPACE 5
         END
//*
//WTOEXIT  EXEC SMP4APLY
//SMPCNTL  DD *
 REJECT  S(NWTO002) .
 RESETRC .
 RECEIVE S(NWTO002) .
 APPLY   S(NWTO002) DIS(NO) .
//SMPPTFIN DD *
++USERMOD(NWTO002)    /*
   THIS USERMOD ADDS THE LOCAL VERSION OF THE WTO EXIT
   TO THE SYSTEM.                   */ .
++VER(Z038) FMID(EBB1102) PRE(NWTO001) .
++MOD(IEECVXIT) TXLIB(TEMPLIB) .
//TEMPLIB  DD DSN=&&PUNCH,DISP=(OLD,DELETE)
