         PRINT GEN
  TITLE 'SHOW TSO ALLOCATIONS USING DYNAMIC ALLOCATION    '
*=====================================================================
*
* FUNCTION:
*            "SAL" IS A PROGRAM TO REPLACE THE "LISTALC" TSO
*            COMMAND FOR MOST USES.  ITS PURPOSE IS TO TELL THE
*            TSO USER WHAT DATASETS AND DDNAMES ARE CURRENTLY
*            ALLOCATED, HOW THEY ARE ALLOCATED, AND TO TELL HIM
*            THIS IN A READABLE FORMAT.
*
*            SAL WRITES A REPORT WITH THE FOLLOWING INFORMATION
*            FOR EACH ALLOCATION:
*
*               DDNAME
*               DATASET NAME
*               STATUS
*               NORMAL DISPOSITION
*               DATASET TYPE
*
*            THIS PROGRAM WORKS BY USING DYNAMIC ALLOCATION INFORMATION
*            RETRIEVAL. IT RETRIEVES INFORMATION ABOUT EACH RELATIVE
*            REQUEST (REQUEST 1, REQUEST 2, ...) UNTIL THE LAST
*            RELATIVE REQUEST HAS BEEN PROCESSED.
*            (SEE THE "OS/VS MVS SYSTEM PROGRAMMING LIBRARY:
*            JOB MANAGEMENT" MANUAL FOR DETAILS ON HOW DYNAMIC
*            ALLOCATION CAN BE USED TO RETRIEVE ALLOCATION INFORMATION)
*
*            THIS CODE HAS BEEN WRITTEN TO BE REENTRANT, SO THAT
*            THE PROGRAM MAY BE PLACED IN "LPALIB" FOR BETTER
*            PERFORMANCE.
*
         EJECT
*
* INPUT:
*            NONE
*
*
* OUTPUT:
*            TO FILE SYSPRINT: HEADING LINE, AND A LINE FOR EACH
*            RELATIVE REQUEST, SHOWING WHAT'S ALLOCATED.
*            2 BLANK LINES ARE PRINTED BEFORE THE HEADING, AND A BLANK
*            LINE IS PRINTED AT THE END OF THE REPORT.
*
*            THE SYSPRINT FILE IS DEFINED WITH THE FOLLOWING
*            ATTRIBUTES:
*              RECFM=FBA, DSORG=PS
*
*
* ERROR ROUTINES:
*
*            IF THE SYSPRINT FILE COULDN'T BE OPENED, THE PROGRAM
*            ABENDS WITH A USER 013 CODE.
*
*            IF SYSPRINT IS ALLOCATED TO A DATASET WITH THE WRONG
*            ATTRIBUTES, THE USER WILL GET A SYSTEM X13 ABEND CODE.
*
*            IF GETMAIN CAN'T GET ENOUGH STORAGE, IT ABENDS.
*
*            IF SVC 99 RETURNED A NON-ZERO RETURN CODE, THE PROGRAM
*            ENDS, PASSING ALONG THAT RETURN CODE.
*
         EJECT
*
* REGISTERS:
*            R4 - POINTS TO REQUEST BLOCK POINTER
*            R5 - POINTS TO REQUEST BLOCK START
*            R6 - POINTS TO A TEXT UNIT ADDRESS
*            R7 - POINTS TO A TEXT UNIT
*            R8 - POINTS TO DCB
*            R9 - USED TO BUILD OPEN AND CLOSE PARM LISTS
*           R10 - HOLDS RELATIVE REQUEST NUMBER
*
*           R13 - BASE REG. FOR THIS PROGRAM (FROM XSAVE1 MACRO)
*
*           R15 - HOLDS RETURN CODE FROM SVC 99.  I WON'T CHANGE IT,
*                 SO THIS RETURN CODE WILL BE PASSED WHEN I END.
*
*
* LINKAGE:
*
*         MVS STANDARD LINKAGE CONVENTIONS ARE USED.
*
*
* DEPENDENCIES/RESTRICTIONS:
*
*         USES MACROS XSAVE1 AND XRETURN FOR LINKAGE
*         USES MACRO REGISTER FOR DEFINING REGISTER SYMBOLIC NAMES
*         USES MACROS DYNATXTU AND DYNABLD FOR BUILDING DYNAMIC
*         ALLOCATION CONTROL BLOCKS
*
*         THERE IS AN MVS/TSO HELP ENTRY FOR THIS PROGRAM.
*
         EJECT
*
* STORAGE LAYOUT:
*
*         ------------------------------------------------------
*         I  STANDARD SAVE AREA                                I
*         I                                                    I
*         ------------------------------------------------------
*         I  REQUEST BLOCK POINTER                             I
*         ------------------------------------------------------
*         I  REQUEST BLOCK                                     I
*         I                                                    I
*         ------------------------------------------------------
*         I  TEXT UNIT ADDRESSES                               I
*         I                                                    I
*         ------------------------------------------------------
*         I  TEXT UNITS                                        I
*         I                                                    I
*         I                                                    I
*         ------------------------------------------------------
*         I  OUTPUT BUFFER                                     I
*         ------------------------------------------------------
*         I  OUTPUT DATASET CONTROL BLOCK                      I
*         I                                                    I
*         ------------------------------------------------------
*         I  OPEN MACRO                                        I
*         I                                                    I
*         ------------------------------------------------------
*         I  CLOSE MACRO                                       I
*         I                                                    I
*         ------------------------------------------------------
*
*
* NOTES:
*         ALTHOUGH TU7, THE DSORG TEXT UNIT, IS DEFINED IN THE
*         PROGRAM, IT IS NOT CURRENTLY USED.  THIS TEXT UNIT MAY
*         BE REPLACED BY ANOTHER ONE IF OTHER INFORMATION IS
*         DESIRED.
*
         EJECT
*
* CHANGE LOG:
*
*          3/22/83  COMPLETE,
*                   FULL FUNCTION: DSN, DDN, STATUS, NORMAL DISP,
*                   AND DATASET TYPE ARE PRINTED OUT WITH AN
*                   UNDERLINED TITLE LINE AND BLANK LINES AT THE
*                   BEGINNING AND END OF THE REPORT.
*
*          5/10/83  DOCUMENTATION IMPROVED, AND TEST FOR "UNCAT"
*                   NORMAL DISPOSITION ADDED.
*
*          5/11/83  CHANGED PRINT LINE LENGTH FROM 81 TO 121 BYTES.
*                   SINCE LRECL IS NOT CODED ON THE DCB, IT SHOULD
*                   WORK WITH SIZES BETWEEN 81 AND 121 SUCCESSFULLY.
* AUTHOR:
*         RIC FORD                 (617) 466-2133
*         COMPUTER CENTER
*         GTE LABORATORIES
*         40 SYLVAN ROAD
*         WALTHAM, MASSACHUSETTS  02254
*
*
*=====================================================================
         EJECT
*---------------------------------------------------------------------
* ENTER PROGRAM AND MAP GETMAINED STORAGE AREA
*---------------------------------------------------------------------
*
SAL      XSAVE1 OPT=CSECT,REEN=STGSIZE,REG=12
*
         USING STGAREA,R13
*
*---------------------------------------------------------------------
* BUILD REQUEST BLOCK POINTER AND REQUEST BLOCK
*---------------------------------------------------------------------
         LA    R4,RBPOINTR        GET R.B. POINTER ADDRESS
         USING S99RBPTR,R4        MAP POINTER
         LA    R5,REQBLOCK        GET REQUEST BLOCK ADDRESS
         USING S99RB,R5           MAP REQUEST BLOCK
         ST    R5,RBPOINTR        STORE POINTER TO REQUEST BLOCK
         OI    S99RBPTR,S99RBPND  MARK IT LAST POINTER
         XC    S99RB(RBLEN),S99RB ZERO OUT REQUEST BLOCK
         MVI   S99RBLN,RBLEN      FILL IN REQUEST BLOCK'S LENGTH FIELD
         MVI   S99VERB,S99VRBIN   SET VERB TO DO INFOMATION RETRIEVAL
*
         LA    R6,$ADDRLST        POINT TO FIRST T.U. ADDRESS
         USING S99TUPL,R6         MAP IT
         ST    R6,S99TXTPP        STORE ADDRESS LIST POINTER IN R.B.
*
         EJECT
*---------------------------------------------------------------------
*  BUILD TEXT UNIT ADDRESS LIST
*---------------------------------------------------------------------
         DYNABLD $ADDRLST,(TU1,TU2,TU3,TU4,TU5,TU6,TU7,TU8)  BUILD LIST
*
*---------------------------------------------------------------------
* BUILD DCB FOR WRITING ALLOCATION INFORMATION.
*---------------------------------------------------------------------
         LA    R8,SYSPRINT               POINT TO DCB
         USING IHADCB,R8                 MAP DCB
         MVC   SYSPRINT(DCBSIZE),OUTDCB  COPY DCB INTO GETMAINED AREA
*
         EJECT
*---------------------------------------------------------------------
*  OPEN THE OUTPUT FILE
*---------------------------------------------------------------------
         LINK  EP=CLEAR
         LA    R9,SYSPRINT             GET DCB ADDRESS
         ICM   R9,PARMMASK,OPENLIST    FILL IN OPEN PARMS BYTE
         ST    R9,OPENLSTD             STORE IT INTO DCB
         OPEN  (SYSPRINT,(OUTPUT)),MF=(E,OPENLSTD)  TRY TO OPEN OUTPUT X
                                                  FILE USING PARM-LIST.
         TM    DCBOFLGS,DCBOFOPN    DID OPEN COMPLETE SUCCESSFULLY?
         BO    WRTHEADR             YES, GO WRITE HEADER LINE
         TPUT  MESS,L'MESS
         ABEND ABCODE               DIDN'T OPEN, GIVE HIM AN OPEN ABEND
MESS     DC    CL30'ALLOCATE SYSPRINT AND RETRY'
*
         EJECT
*---------------------------------------------------------------------
*  WRITE THE HEADER LINES
*---------------------------------------------------------------------
WRTHEADR EQU   *
         PUT   SYSPRINT,BLANKS
         PUT   SYSPRINT,BLANKS
         PUT   SYSPRINT,HEADER1
         PUT   SYSPRINT,HEADER2
*
         EJECT
*---------------------------------------------------------------------
*  SET DYNAMIC ALLOCATION RELATIVE REQUEST NUMBER TO 1 TO
*  RETRIEVE INFORMATION ABOUT THE FIRST ALLOCATION.
*---------------------------------------------------------------------
         LA    R10,1                SET RELATIVE REQUEST NO. TO 1
*
         USING S99TUNIT,R7          R7 WILL MAP TEXT UNIT
*---------------------------------------------------------------------
* INVOKE SVC 99, DYNAMIC ALLOCATION, FOR INFORMATION RETRIEVAL. THE
* TEXT UNITS REQUEST INFORMATION ABOUT CURRENT ALLOCATIONS AND PROVIDE
* SPACE FOR THE INFORMATION RETURNED BY SVC 99.
*   R10 HOLDS RELATIVE REQUEST NUMBER FOR THIS INVOCATION.
*   R4 HOLDS ADDRESS OF REQUEST BLOCK POINTER.
*---------------------------------------------------------------------
SVC99    EQU   *
         LA    R7,TU1                    POINT TO FIRST TEXT UNIT
         MVC   S99TUNIT(TUSSIZE),RELNOTU COPY ALL TEXT UNITS INTO      X
                                         GETMAINED AREA
*
         STCM  R10,REQMASK,S99TUPAR STORE REL. REQ. # INTO T.U. PARM.
         LR    R1,R4                POINT TO REQUEST BLOCK POINTER
         SVC   99                   GET THE INFORMATION
*
         CH    R15,ZERO             TEST RETURN CODE
         BNE   BADRC                IF IT'S NOT ZERO GO PROCESS ERROR
*
         EJECT
*---------------------------------------------------------------------
*  SVC 99 COMPLETION WAS SUCCESSFUL.  PROCESS THE INFORMATION.
*---------------------------------------------------------------------
         MVC   PUTLINED(LINELEN),BLANKS  CLEAR OUTPUT BUFFER
*
         LA    R7,TU3                  MAP DDNAME TEXT UNIT
         MVC   DDN(L'DDN),S99TUPAR     GET DDNAME IN OUTPUT BUFFER
*
         LA    R7,TU4                  MAP DSNAME TEXT UNIT
         MVC   DSN(L'DSN),S99TUPAR     GET DSNAME IN OUTPUT BUFFER
*
         LA    R7,TU6                  MAP STATUS TEXT UNIT
         TM    S99TUPAR,SHRQ           IS IT SHR?
         BNO   TESTNEW                 NO, TRY AGAIN
         MVC   STATUS(STATLEN),SHR     PUT "SHR" IN BUFFER
         B     ENDSTAT                 GO LOOK AT TYPE TEXT UNIT
TESTNEW  EQU   *
         TM    S99TUPAR,NEWQ           IS IT NEW?
         BNO   TESTMOD                 NO, TRY AGAIN
         MVC   STATUS(STATLEN),NEW     PUT "NEW" IN BUFFER
         B     ENDSTAT                 GO LOOK AT TYPE
TESTMOD  EQU   *
         TM    S99TUPAR,MODQ           IS IT MOD?
         BNO   TESTOLD                 NO, TRY AGAIN
         MVC   STATUS(STATLEN),MOD     PUT "MOD" IN BUFFER
         B     ENDSTAT                 GO LOOK AT TYPE
TESTOLD  EQU   *
         TM    S99TUPAR,OLDQ           IS IT OLD?
         BNO   NOSTAT                  NO, GO PUT BLANKS IN
         MVC   STATUS(STATLEN),OLD     PUT "OLD" IN BUFFER
         B     ENDSTAT                 GO LOOK AT TYPE
NOSTAT   EQU   *                       STATUS RETURNED IS UNDEFINED
         MVC   STATUS(STATLEN),BLANKS MOVE BLANKS IN
*
         EJECT
*
ENDSTAT  EQU   *
         LA    R7,TU5                  MAP DATASET NORMAL DISP. T.U.
*
         TM    S99TUPAR,PASSQ          IS NORMAL DISP. "PASS"?
         BNO   TESTKEEP
         MVC   DISP(DISPLEN),PASS
         B     ENDDISP
TESTKEEP EQU   *
         TM    S99TUPAR,KEEPQ          IS NORMAL DISP. "KEEP"?
         BNO   TESTDEL
         MVC   DISP(DISPLEN),KEEP
         B     ENDDISP
TESTDEL  EQU   *
         TM    S99TUPAR,DELETEQ        IS NORMAL DISP. "DELETE"?
         BNO   TESTUNCT
         MVC   DISP(DISPLEN),DELETE
         B     ENDDISP
TESTUNCT EQU  *
         TM    S99TUPAR,UNCATQ         IS NORMAL DISP. "UNCAT"?
         BNO   TESTCATL
         MVC   DISP(DISPLEN),UNCAT
         B     ENDDISP
TESTCATL EQU  *
         TM    S99TUPAR,CATLGQ         IS NORMAL DISP. "CATLG"?
         BNO   NODISP                  NO, THERE'S NO VALID DISP.
         MVC   DISP(DISPLEN),CATLG
         B     ENDDISP
NODISP   EQU   *                       DATASET IS UNDEFINED DISP
         MVC   DISP(DISPLEN),BLANKS    MOVE BLANKS IN
*
         EJECT
ENDDISP  EQU   *
         LA    R7,TU8                  MAP DATASET TYPE TEXT UNIT
*
         TM    S99TUPAR,DUMMQ          IS DS DUMMY TYPE?
         BNO   TESTTERM
         MVC   TYPE(TYPELEN),DUMMY
         B     ENDTYPE
TESTTERM EQU   *
         TM    S99TUPAR,TERMQ          IS DS TERMINAL TYPE?
         BNO   TESTSYOU
         MVC   TYPE(TYPELEN),TERMINAL
         B     ENDTYPE
TESTSYOU EQU   *
         TM    S99TUPAR,SYSOUTQ        IS DATASET SYSOUT TYPE?
         BNO   TESTSYIN
         MVC   TYPE(TYPELEN),SYSOUT
         B     ENDTYPE
TESTSYIN EQU   *
         TM    S99TUPAR,SYSINQ         IS DATASET SYSIN TYPE?
         BNO   NOTYPE
         MVC   TYPE(TYPELEN),SYSIN
         B     ENDTYPE
NOTYPE   EQU   *                       DATASET IS UNDEFINED TYPE
         MVC   TYPE(TYPELEN),BLANKS    MOVE BLANKS IN
*
ENDTYPE  EQU   *
         EJECT
*---------------------------------------------------------------------
*  WRITE OUT REPORT LINE.
*---------------------------------------------------------------------
         PUT   SYSPRINT,PUTLINED       WRITE OUTPUT BUFFER OUT
*
*
*---------------------------------------------------------------------
*  END IF THIS IS THE LAST REQUEST. OTHERWISE, INCREMENT THE RELATIVE
*  REQUEST NUMBER AND GO INVOKE SVC 99 AGAIN.
*---------------------------------------------------------------------
         LA    R7,TU2                  POINT TO LAST-REL# INDICATOR T.U
         TM    S99TUPAR,LASTREL#       WAS THIS THE LAST RELATIVE REQ?
         BO    XRETURN                 YES, GO CLOSE AND END
         LA    R10,1(R10)              NO, INCREASE REL. REQUEST #
         B     SVC99                   PROCESS NEXT REL. REQUEST
*
         EJECT
*---------------------------------------------------------------------
*  SVC 99 JUST GOT A BAD RETURN CODE.  WE'LL PASS IT OUT VIA R15.
*---------------------------------------------------------------------
BADRC    EQU   *
*
*---------------------------------------------------------------------
*  CLOSE OUTPUT FILE AND END
*---------------------------------------------------------------------
XRETURN  EQU   *
         PUT   SYSPRINT,BLANKS
         LA    R9,SYSPRINT             GET DCB ADDRESS
         ICM   R9,PARMMASK,CLOSLIST    FILL IN CLOSE PARMS BYTE
         ST    R9,CLOSLSTD             STORE IT INTO DCB
         CLOSE (SYSPRINT),MF=(E,CLOSLSTD)  CLOSE THE OUTPUT FILE
*
         XRETURN RTN=RC      END
*
         EJECT
**********************************************************************
*  CREATE CONSTANTS
**********************************************************************
ZERO     DC    F'0'
DUMMY    DC    CL8'DUMMY   '
TERMINAL DC    CL8'TERMINAL'
SYSIN    DC    CL8'SYSIN   '
SYSOUT   DC    CL8'SYSOUT  '
*
BLANKS   DC    121CL1' '
*
OLD      DC    CL5'OLD  '
MOD      DC    CL5'MOD  '
NEW      DC    CL5'NEW  '
SHR      DC    CL5'SHR  '
*
PASS     DC    CL6'PASS  '
KEEP     DC    CL6'KEEP  '
DELETE   DC    CL6'DELETE'
CATLG    DC    CL6'CATLG '
UNCAT    DC    CL6'UNCAT '
*
         EJECT
*---------------------------------------------------------------------
*  CREATE HEADER LINE 1
*---------------------------------------------------------------------
HEADER1  DS    0F
         DC    CL1'1'
         DC    CL8'DDNAME  '
         DC    CL1' '
         DC    CL44'DATASET NAME                                '
         DC    CL1' '
         DC    CL5'STAT.'
         DC    CL1' '
         DC    CL6'N-DISP'
         DC    CL2' '
         DC    CL8'DS-TYPE '
         DC    CL44'                                            '
*
*---------------------------------------------------------------------
*  CREATE HEADER LINE 2
*---------------------------------------------------------------------
HEADER2  DS    0F
         DC    CL1' '
         DC    CL8'--------'
         DC    CL1' '
         DC    CL44'--------------------------------------------'
         DC    CL1' '
         DC    CL5'---- '
         DC    CL1' '
         DC    CL6'------'
         DC    CL2'  '
         DC    CL8'--------'
         DC    CL44'                                            '
*
         EJECT
*---------------------------------------------------------------------
*  CREATE TEXT UNITS
*---------------------------------------------------------------------
RELNOTU  DYNATXTU DINRELNO,2,F00  DEFINE RELATIVE REQUEST NO. T.U.
RTLSTTU  DYNATXTU DINRTLST,1,F00  DEFINE RETURN-LAST-RELATIVE-         X
                                  ENTRY-INDICATOR TEXT UNIT
RTDDNTU  DYNATXTU DINRTDDN,8,F40       DEFINE RETURN-DDN T.U.
RTDSNTU  DYNATXTU DINRTDSN,44,F40      DEFINE RETURN-DSN TEXT UNIT
RTNDPTU  DYNATXTU DINRTNDP,1,F00       DEFINE RETURN-NORMAL-DISP T.U.
RTSTATU  DYNATXTU DINRTSTA,1,F00       DEFINE RETURN-STATUS T.U.
RTORGTU  DYNATXTU DINRTORG,2,F00       RETURN-DS-ORGANIZATION T.U.
RTTYPTU  DYNATXTU DINRTTYP,1,F00       DEFINE RETURN-DS-TYPE T.U.
TUSSIZE  EQU   *-RELNOTU
         EJECT
*---------------------------------------------------------------------
*  CREATE LIST FORMS OF OPEN AND CLOSE
*---------------------------------------------------------------------
OPENLIST OPEN  (OUTDCB,(OUTPUT)),MF=L  CREATE OPEN PARMS LIST
CLOSLIST CLOSE (OUTDCB),MF=L           CREATE CLOSE PARMS LIST
*
         EJECT
*---------------------------------------------------------------------
*  CREATE DATASET CONTROL BLOCK FOR OUTPUT.
*---------------------------------------------------------------------
OUTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),RECFM=FBA,    XXXXXXX
               LRECL=80,BLKSIZE=80
DCBSIZE  EQU   *-OUTDCB
*
         EJECT
**********************************************************************
*  DEFINE DSECTS TO MAP STORAGE
**********************************************************************
*---------------------------------------------------------------------
*  DEFINE ENTIRE GETMAINED STORAGE AREA
*---------------------------------------------------------------------
STGAREA  DSECT
SAVEAREA DS    18F           SAVE AREA
RBPOINTR DS    F             REQUEST BLOCK POINTER
REQBLOCK DS    XL20          REQUEST BLOCK
$ADDRLST DS    8A            TEXT UNIT ADDRESSES
         EJECT
TU1      DYNATXTU DINRELNO,2,F00  DEFINE RELATIVE REQUEST NO. T.U.
TU2      DYNATXTU DINRTLST,1,F00  DEFINE RETURN-LAST-RELATIVE-ENTRY-   X
                                  -INDICATOR TEXT UNIT
TU3      DYNATXTU DINRTDDN,8,F40       DEFINE RETURN-DDN TEXT UNIT
TU4      DYNATXTU DINRTDSN,44,F40      DEFINE RETURN-DSN TEXT UNIT
TU5      DYNATXTU DINRTNDP,1,F00       DEFINE RETURN-NORMAL-DISP. T.U.
TU6      DYNATXTU DINRTSTA,1,F00       DEFINE RETURN-STATUS T.U.
TU7      DYNATXTU DINRTORG,2,F00       RETURN-DS-ORGANIZATION T.U.
TU8      DYNATXTU DINRTTYP,1,F00       DEFINE RETURN-DS-TYPE T.U.
         EJECT
PUTLINED DS    0CL121
ANSICNTL DS    CL1
DDN      DS    CL8
         DS    CL1
DSN      DS    CL44
         DS    CL1
STATUS   DS    CL5
         DS    CL1
DISP     DS    CL6
         DS    CL2
TYPE     DS    CL8
         DS    CL44
         PRINT NOGEN
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),RECFM=FBA,    XXXXXXX
               LRECL=80,BLKSIZE=80
         PRINT GEN
OPENLSTD OPEN  (OUTDCB,(OUTPUT)),MF=L
CLOSLSTD CLOSE (OUTDCB),MF=L
STGSIZE  EQU   *-STGAREA
         EJECT
*---------------------------------------------------------------------
* MAP THE SVC 99 PARAMETER LIST:
*
*   1. REQUEST BLOCK POINTER, POINTED TO BY R1
*   2. A DYNAMIC ALLOCATION REQUEST BLOCK
*   3. TEXT UNIT ADDRESSES LIST
*   4. TEXT UNITS
*
*---------------------------------------------------------------------
         IEFZB4D0            MAP SVC 99 PARAMETER LIST
RBLEN    EQU   (S99RBEND-S99RB)     LENGTH OF REQUEST BLOCK
*
         EJECT
*---------------------------------------------------------------------
*  MAP DCB
*---------------------------------------------------------------------
         IHADCB DSORG=QS     MAP THE DCB FIELDS
*
         EJECT
**********************************************************************
*  DEFINE MORE SYMBOLS
**********************************************************************
SYMBOLS  DSECT
         REGISTER            DEFINE REGISTERS
STATLEN  EQU   5             LENGTH OF STATUS FIELD
DISPLEN  EQU   6             LENGTH OF STATUS FIELD
TYPELEN  EQU   8             LENGTH OF TYPE FIELD
LINELEN  EQU   121           SIZE OF OUTPUT PRINT LINE
*
ABCODE   EQU   13            USER ABEND CODE IF SYSPRINT WON'T OPEN
*
LASTREL# EQU   X'80'         THIS BIT ON IF LAST RELATIVE REQUEST
*
DUMMQ    EQU   X'80'         THIS BIT ON IF TYPE IS DUMMY
TERMQ    EQU   X'40'         THIS BIT ON IF TYPE IS TERMINAL
SYSINQ   EQU   X'20'         THIS BIT ON IF TYPE IS SYSIN
SYSOUTQ  EQU   X'10'         THIS BIT ON IF TYPE IS SYSOUT
*
SHRQ     EQU   X'08'         THIS BIT ON IF STATUS IS SHR
NEWQ     EQU   X'04'         THIS BIT ON IF STATUS IS NEW
MODQ     EQU   X'02'         THIS BIT ON IF STATUS IS MOD
OLDQ     EQU   X'01'         THIS BIT ON IF STATUS IS OLD
*
PASSQ    EQU   X'10'         THIS BIT ON IF NORMAL DISP IS PASS
KEEPQ    EQU   X'08'         THIS BIT ON IF NORMAL DISP IS KEEP
DELETEQ  EQU   X'04'         THIS BIT ON IF NORMAL DISP IS DELETE
CATLGQ   EQU   X'02'         THIS BIT ON IF NORMAL DISP IS CATLG
UNCATQ   EQU   X'01'         THIS BIT ON IF NORMAL DISP IS UNCATLG
*
REQMASK  EQU   B'0011'       LOWER-ORDER HALF WORD OF REG. HOLDS       X
                             RELATIVE REQUEST NUMBER
PARMMASK EQU   B'1000'       HIGH-ORDER BYTE IS PARM FOR OPEN/CLOSE.
         EJECT
*---------------------------------------------------------------------
*  IDENTIFY THE DYNAMIC ALLOCATION FUNCTION CODES
*  (OR "TEXT UNIT KEYS")
*---------------------------------------------------------------------
         IEFZB4D2            MAP SVC 99 TEXT UNIT KEYS
*
*
         END
