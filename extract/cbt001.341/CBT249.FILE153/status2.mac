***********************************************************************
*                                                                     *
*                                                                     *
*                              STATJES2                               *
*                                                                     *
*                                                                     *
* ABSTRACT: RETURN JES2 JOB QUEUE AND JOB OUTPUT ELEMENTS FOR         *
*           INPUT JOB NAMES.                                          *
*                                                                     *
*                                                                     *
* FUNCTION: STATJES2 RECEIVES A JOB NAME LIST, A WORK AREA, AND A     *
*           RETURN AREA AS INPUT. STATJES2 ASSUMES IT'S RUNNING UNDER *
*           JES2'S ADDRESS SPACE. STATJES2 SEARCHES JES2'S JOB QUEUES *
*           AND OUTPUT TABLE FOR JOB QUEUE ELEMENTS (JQES) AND JOB    *
*           OUTPUT ELEMENTS (JOES) THAT MATCH THE INPUT JOB NAMES.    *
*           THOSE JQES AND JOES THAT MATCH THE INPUT JOB NAMES ARE    *
*           RETURNED TO THE CALLER IN THE RETURN AREA.                *
*                                                                     *
*           STATJES2 VERIFIES THAT IT IS RUNNING UNDER JES2 BY LOCA-  *
*           TING JES2'S HASP COMMUNICATION TABLE (HCT). IF STATJES2   *
*           IS UNABLE TO LOCATE THE HCT, STATJES2 RETURNS CONTROL TO  *
*           IT'S CALLER WITH A RETURN CODE OF 4. STATJES2 CHECKS ALL  *
*           OF JES2'S JOB QUEUES FOR JQES THAT HAVE JOB NAMES WHICH   *
*           MATCH 1 OF THE INPUT JOB NAMES. THOSE JQES THAT MATCH     *
*           ARE RETURNED. IF NO JQES MATCH, STATJES2 RETURNS CONTROL  *
*           TO IT'S CALLER. AFTER ALL JOB QUEUES HAVE BEEN SEARCHED,  *
*           STATJES2 SEARCHES THE JOB OUTPUT TABLE FOR JOES WHOSE     *
*           ASSOCIATED JQES HAVE JOB NAMES THAT MATCH 1 OF THE INPUT  *
*           JOB NAMES. MATCHING JOES ARE RETURNED. IF AT ANY TIME,    *
*           STATJES2 FILLS THE RETURN AREA, STATJES2 RETURNS CONTROL  *
*           TO IT'S CALLER WITH A RETURN CODE OF 8.                   *
*                                                                     *
*           STATJES2 SEARCHES FOR JES2'S HCT BY TRYING TO FIND A TCB  *
*           WHOSE 1ST RB IS EXECUTING A LOAD MODULE WHOSE 1ST 4 BYTES *
*           ARE C'&VERSION'. IF STATJES2 IS UNABLE TO LOCATE SUCH A   *
*           TCB, CONTROL IS RETURNED TO THE CALLER.                   *
*                                                                     *
*           MOST ALL OF THE FOLLOWING CODE COMES FROM JES2'S COMMAND  *
*           HANDLING ROUTINE - HASPCOMM.                              *
*                                                                     *
*           TO LET STATUS (OUR TRUE CALLER) DISPLAY A QUEUED JOB'S    *
*           POSITION ON ITS QUEUE, STATJES2 PROCESSES AS FOLLOWS:     *
*                                                                     *
*           THERE IS A SEPARATE JOB QUEUE FOR EACH ALLOWABLE JOB      *
*           CLASS. EACH TIME STATJES2 BEGINS SCANNING A NEW JOB       *
*           QUEUE, IT'S ZEROES OUT A QUEUE COUNT. THIS COUNT IS INCRE-*
*           MENTED EACH TIME A NON-ACTIVE JQE (CORRESPONDING TO A     *
*           NON-EXECUTING JOB) IS FOUND ON THE QUEUE. WHEN A MATCHING *
*           JQE IS RETURNED, THIS COUNT IS RETURNED WITH THE JQE. THE *
*           COUNT AT THAT TIME IS THE JQE'S POSITION ON THE QUEUE.    *
*           WHEN THE END OF A JOB QUEUE IS REACHED, THE QUEUE COUNT   *
*           AT THAT TIME IS RETURNED IN ALL RETURNING JQES FOR THAT   *
*           QUEUE. THE COUNT AT THAT TIME IS THE TOTAL NUMBER OF JQES *
*           IN THE QUEUE.                                             *
*                                                                     *
*           SIMILAR, THOUGH SLIGHTLY MORE COMPLICATED, PROCESSING IS  *
*           DONE FOR THE JOB OUTPUT TABLE. THERE IS A SEPARATE JOB   *
*           OUTPUT QUEUE FOR EACH ALLOWABLE OUTPUT CLASS. SINCE OUT-  *
*           PUT CAN BE ROUTED TO NUMEROUS LOCATIONS, A JOB'S OUTPUT   *
*           QUEUE POSITION REALLY DEPENDS ON ITS OUTPUT ROUTE AS WELL *
*           AS ITS CLASS.                                             *
*                                                                     *
*           FOR THIS REASON, STATJES2 RE-INITIALIZES A ROUTE COUNT    *
*           TABLE EACH TIME IT BEGINS PROCESSING A DIFFERENT OUTPUT   *
*           CLASS QUEUE. THIS TABLE CONTAINS THE DIFFERENT ROUTES     *
*           AND THE NUMBER OF HITS TO THESE ROUTES. THIS TABLE IS     *
*           USED SIMILARLY TO THE QUEUE COUNT ABOVE TO GIVE A JOB'S   *
*           OUTPUT QUEUE POSITION AND QUEUE TOTAL.                    *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
* INPUT: R1 -> A(JOB NAME LIST)                                       *
*              A(WORK AREA)                                           *
*              A(RETURN AREA)                                         *
*                                                                     *
*                                                                     *
* OUTPUT: RETURN AREA <- MATCHED JQES AND JOES                        *
*                                                                     *
*                                                                     *
* RETURN CODES: R15 = 0 => NO ERRORS, SEE RETURN AREA + 4 FOR         *
*                          H'# OF RETURNED JQES' FOLLOWED BY A        *
*                          H'# OF RETURNED JOES'                      *
*                     4 => UNABLE TO LOCATE JES2'S HCT                *
*                     8 => FILLED RETURN AREA                         *
*                                                                     *
*                                                                     *
* MACROS USED: SAVE                                                   *
*              RETURN                                                 *
*              REGS (USER)                                            *
*              $HCT                                                   *
*              $JQE                                                   *
*              $JOE                                                   *
*              $JOT                                                   *
*              IHAPSA                                                 *
*              IHAASCB                                                *
*              IHAASXB                                                *
*              IKJTCB                                                 *
*                                                                     *
*                                                                     *
* ATTRIBUTES: REENTRANT, RESIDENT                                     *
*                                                                     *
*                                                                     *
* DEPENDENCY: SINCE STATJES2 IS EXECUTED UNDER AN SRB, IT CANNOT      *
*             EXECUTE ANY SVC'S.                                      *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
STATJES2 CSECT                GET JOB INFO FROM JES2
         COPY  $HASPGEN                                             SP3
         EJECT
         SAVE  (14,12),,STATJES2_&SYSDATE_&SYSTIME SAVE CALLER'S REGS
         LR    RBASE,R15      A(STATJES2)
         USING STATJES2,RBASE ADDRESSABILITY
         USING PARMS,R1       INPUT PARAMETER ADDRESSABILITY
         LM    RWORK,RET,WORKAD A(WORK AREA),A(RETURN AREA)
         USING WORKAREA,RWORK ADDRESSABILITY
         DROP  R1             UNNECESSARY
         BAL   RLINK,FINDHCT  HASP COMMUNICATION TABLE AVAILABLE?
         B     GOTHCT         YES => SEARCH THE HASP QUEUES
         LA    R15,4          NO => LET OUR CALLER KNOW
         B     RETURN         RETURN TO OUR CALLER
GOTHCT   BAL   RLINK,SETUPJQE INITIALIZE OUR VARIABLES
ANOTHER  BAL   RLINK,GETAJQE  LOOKED AT ALL JOB Q ELEMENTS?
         B     CHECKJOB       NO => LOOK AT THE CURRENT 1
         B     GOTJQES        YES => CHECK OUT ACTIVE DEVICES
CHECKJOB BAL   RLINK,JQECHECK CURRENT JQE MATCH AN INPUT JOBNAME?
         B     MATCHED        YES => RETURN THE JQE TO OUR CALLER
         B     ANOTHER        NO => GET ANOTHER JQE
MATCHED  BAL   RLINK,JQEMATCH RETURN THE MATCHED JQE
         B     ANOTHER        GET ANOTHER JQE
         BAL   RLINK,SETUPJOE RETURN THE JQE MATCH COUNT
         B     FILLRET        TELL OUR CALLER WE FILLED THE RET AREA
GOTJQES  BAL   RLINK,SETUPJOE SET UP JOE VARIABLES
         LH    R1,4(RET)      # OF MATCHED JQES
         LTR   R1,R1          ANY MATCHES?
         BZ    DONE           NO => TELL OUR CALLER
GETJOES  BAL   RLINK,GETAJOE  CHECKED ALL ACTIVE DEVICES?
         B     CHECKIT        NO => CHECK THE CURRENT 1
         B     DONE           YES => RETURN TO OUR CALLER
CHECKIT  BAL   RLINK,JOECHECK CURRENT JOE MATCH AN INPUT JOBNAME?
         B     MATCHES        YES => RETURN THE JOE TO OUR CALLER
         B     GETJOES        NO => GET ANOTHER JOE
MATCHES  BAL   RLINK,JOEMATCH RETURN THE MATCHED JOE
         B     GETJOES        GET ANOTHER JOE
         BAL   RLINK,SETDOWN  RETURN THE JOE MATCH COUNT
FILLRET  LA    R15,8          INDICATE A FILLED RETURN AREA
         B     RETURN         RETURN TO OUR CALLER
DONE     BAL   RLINK,SETDOWN  RETURN ALL INFO TO OUR CALLER
RETURN   RETURN (14,12),RC=(15) RETURN TO OUR CALLER
         EJECT
         USING PSA,R0         PSA ADDRESSABILITY
FINDHCT  L     R1,PSAAOLD     A(JES2 ASCB)
         USING ASCB,R1        ADDRESSABILITY
         L     R1,ASCBASXB    A(ASXB)
         USING ASXB,R1        ADDRESSABILITY
         L     R15,ASXBFTCB   A(JES2'S 1ST TCB)
         USING TCB,R15        ADDRESSABILITY
         L     R15,TCBJSTCB   A(JES2'S JOB STEP TCB)
         LA    R15,0(R15)     CLEAR THE HIGH-ORDER BYTE
LOOKHCT  L     R1,TCBRBP      A(RB)
         USING RBBASIC,R1     ADDRESSABILITY
FINDRB   L     R14,RBLINK     A(NEXT RB OR TCB)
         LA    R14,0(R14)     CLEAR THE HIGH-ORDER BYTE
         CR    R14,R15        FOUND THE TCB'S 1ST PRB?
         BE    GOTRB          YES => GET THE HCT
         LR    R1,R14         A(NEXT RB)
         B     FINDRB         SEARCH ON FOR THE 1ST PRB
GOTRB    L     R1,RBCDE       A(CDE)
         USING CDENTRY,R1     ADDRESSABILITY
         L     RHCT,CDENTPT   A(HCT)
         USING HCTDSECT,RHCT  ADDRESSABILITY
         CLC   JES2,$VERSION  FOUND THE JES2 HCT?
         BER   RLINK          YES => TELL OUR CALLER
         L     R15,TCBLTC     A(THIS TCB'S DAUGHTER)
         LA    R15,0(R15)     CLEAR THE HIGH-ORDER BYTE
         LTR   R15,R15        TCB HAVE A DAUGHTER?
         BNZ   LOOKHCT        YES => SEE IF ITS THE 1 WE WANT
         B     4(RLINK)       LET OUR CALLER KNOW IT'S NOT AROUND
         DROP  R0,R1,R15      UNNECESSARY
         SPACE 5
JES2     DC    C'&VERSION'  JES2 HCT INDICATOR                      SP3
         EJECT
******************************************************************  SP3
**                                                              **  SP3
**  THIS SECTION OF CODE 'TRICKS' THE JQE/JOE QUEUE HANDLING    **  SP3
**  ROUTINES BY POINTING TO THE ADDRESS OF A FULLWORD OF ZEROS  **  SP3
**  MINUS THE DISPLACEMENT FOR THE CHAIN POINTER AND THEN       **  SP3
**  ENTERING THE ROUTINES.                                      **  SP3
**                                                              **  SP3
******************************************************************  SP3
SETUPJQE LR    R1,RET         A(RETURN AREA)
         A     R1,0(R1)       A(END OF RETURN AREA)
         ST    R1,RETEND      SAVE IT FOR LATER CHECKING
         LA    RRJQE,8(RET)   A(SPOT FOR THE 1ST RETURNED JQE)
         SR    R#JQES,R#JQES  NO JQES MATCHED AS YET
         LA    R#JQS,($JQTYPES+1)*$JQHEADL SO GETAJQE (+1 FOR BCT)  SP3
         LA    RJQE,ZERO-(JQENEXT-JQE) WILL START                   SP3
         LR    RJQE1,RRJQE    OFF RIGHT
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
SETUPJOE STH   R#JQES,4(RET)  PASS THE # OF JQE MATCHES BACK
         SR    R#JOES,R#JOES  NO JOES MATCHED AS YET
         LR    RJOE1,RRJOE    DITTO
         LA    RJOE,ZERO-(JOENEXT-JOEDSECT) SO GETAJOE WILL
         LA    RCOFF,JOTHEADL START OFF RIGHT                       SP3
         LNR   RCOFF,RCOFF          BY GOING BACK 4                 SP3
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
SETDOWN  STH   R#JOES,6(RET)  RETURN THE COUNT OF MATCHED JOES
         SR    R15,R15        RETURN CODE
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
         USING JQE,RJQE       JQE ADDRESSABILITY
GETAJQE  L     RJQE,JQENEXT   A(OFFSET TO JQE)                      SP3
         N     RJQE,XFFFFFF   MAKE SURE ITS POSITIVE                SP3
         BZ    ENDOFJQ        NO JQES ON CHAIN => NEXT JQ
         AL    RJQE,$JOBQPTR  A(JQE)
         TM    JQEFLAGS,QUEBUSY JQE OF AN EXECUTING JOB?
         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT
         LH    R1,JQECOUNT    INCREMENT
         LA    R1,1(R1)       THE JQE
         STH   R1,JQECOUNT    COUNT
         BR    RLINK          RETURN TO OUR CALLER
ENDOFJQ  CLR   RJQE1,RRJQE    ANY MATCHED JQES?
         BNL   GETNXTJQ       NO => GET THE NEXT JOB Q
         MVC   JQETOTAL-JQE(L'JQETOTAL,RJQE1),JQECOUNT PUT IN TOTAL
         LA    RJQE1,JQELNGTH(RJQE1) A(NEXT RETURNED JQE)
         B     ENDOFJQ        TOTAL ALL MATCHED JQES
GETNXTJQ S     R#JQS,=A($JQHEADL-1) CHECKED ALL                     SP3
         BCT   R#JQS,NEXTJQ           JOB QUEUES?
         B     4(RLINK)                 YES => TELL OUR CALLER
NEXTJQ   LA    RJQE,$JQHEADS-$JQHEADL-QUENEXT(R#JQS)  (-1 FOR +1)   SP3
         XC    JQECOUNT,JQECOUNT NO JQES AS YET
         LR    RJQE1,RRJQE    A(1ST RETURN JQE IN THIS Q)
         B     GETAJQE        GET A JQE FROM THE JOB Q
         DROP  RJQE           UNNECESSARY
         EJECT
         USING JOEDSECT,RJOE    JOE ADDRESSABILITY
GETAJOE  L     RJOE,JOENEXT     NEXT JOE OFFSET                     SP3
         N     RJOE,XFFFFFF     END OF JOE'S FOR THIS CLASS?        SP3
         BZ    NXTCLASS       YES => CHECK THE NEXT CLASS
         AL    RJOE,$JOTABLE    A(NEXT JOE)
         L     RJQE,JOEJQE     ASSOCIATED JQE OFFSET                SP3
         AL    RJQE,$JOBQPTR   A(ASSOCIATED JQE)
         TM    JOEFLAG,$JOEBUSY ACTIVE JOE?
         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT
         LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS
         LA    R1,DESTCNTS    A(DESTINATION COUNTERS)
CHKDEST  CLI   0(R1),X'FF'    END OF DESTINATION COUNTERS?
         BE    FIRSTDST       YES => THIS IS THE 1ST TO THIS DEST
         CLC   0(1,R1),JOEREMOT+1 DESTINATION MATCH?                SP3
         BE    GOTDEST        YES => INCREMENT ITS COUNT
         LA    R1,2(R1)       A(NEXT DESTINATION COUNT)
         BCT   R15,CHKDEST    CHECKED ALL COUNTED DESTINATIONS?
         BR    RLINK          YES => CAN'T HANDLE THIS 1
FIRSTDST MVC   0(1,R1),JOEREMOT+1 SET THE DESTINATION               SP3
         MVI   1(R1),1        1ST HIT ON THAT DESTINATION
         BR    RLINK          RETURN TO OUR CALLER
GOTDEST  SR    R15,R15        FOR THE INSERT CHARACTER
         IC    R15,1(R1)      DESTINATION HITS
         LA    R15,1(R15)     INCREMENT THEM
         STC   R15,1(R1)      RESET THE COUNT
         BR    RLINK          LET OUR CALLER SEE THIS JOE'S JQE
NXTCLASS CLR   RJOE1,RRJOE    ANY RETURNED JOES?
         BNL   GETNXTCL       NO => GET THE NEXT CLASS
         ST    RLINK,JOEHOLD  SAVE OUR RETURN ADDRESS
SETOTAL  LA    R1,JOEREMOT+1-JOEDSECT(RJOE1) A(DESTINATION)         SP3
         BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT
         STH   R1,JOETOTAL-JOEDSECT(RJOE1) RETURN THE DEST TOTAL
         LA    RJOE1,JOESIZE(RJOE1) A(NEXT RETURNED JOE)
         CLR   RJOE1,RRJOE    TOTALED ALL RETURNED JOES?
         BL    SETOTAL        NO => KEEP IT UP
         L     RLINK,JOEHOLD  RESTORE THE RETURN ADDRESS
GETNXTCL LA    RCOFF,JOTHEADL(RCOFF) NEXT CLASS OFFSET              SP3
         C     RCOFF,ENDCLASS CHECKED ALL CLASS OFFSETS?            SP3
         BH    4(RLINK)       YES => TELL OUR CALLER
         L     R1,$JOTABLE    A(JOT)
         USING JOTDSECT,R1    ADDRESSABILITY
         LA    RJOE,JOTCLSQ-(JOENEXT-JOEDSECT)(RCOFF) INITIALIZE    SP3
         DROP  R1             UNNECESSARY
         MVI   DESTCNTS,X'FF' INITIALIZE THE DESTINATION
         MVC   DESTCNTS+1(L'DESTCNTS-1),DESTCNTS COUNT TABLE
         LR    RJOE1,RRJOE    NO JOES RETURNED AS YET
         B     GETAJOE        GET THE 1ST JOE IN THE CLASS
         DROP  RJOE           UNNECESSARY
         SPACE 2
ENDCLASS DC    A(JOTCLSSZ-JOTHEADL) # OF CLASS OFFSETS * 4          SP3
ZERO     DC    F'0'           DUMMY PTR TO KICK OFF CHAIN CHASER    SP3
XFFFFFF  DC    X'00FFFFFF'    POSITIVE OFFSET INSURER               SP3
         EJECT
JQECHECK L     R1,24(R13)     A(INPUT PARAMETERS)
         USING PARMS,R1       ADDRESSABILITY
         L     R14,JOBNAMES   A(INPUT JOB NAMES)
         DROP  R1             UNNECESSARY
         L     R1,0(R14)    LENGTH OF THE JOB PARM DATA
         SH    R1,FOUR        (# OF JOBS) * 10
         SR    R0,R0          FOR THE DIVIDE
         D     R0,TEN         # OF JOBS
         LA    R15,4(R14)   A(1ST JOB NAME ENTRY)
CHKJOBNM LH    R14,0(R15)     H'JOB NAME LENGTH'
         BCTR  R14,R0         FOR THE COMPARE
         EX    R14,CMPJOBS    JOB NAME MATCH?
         BER   RLINK          YES => LET OUR CALLER SEE IT
         LA    R15,10(R15)    A(NEXT JOB NAME ENTRY)
         BCT   R1,CHKJOBNM    CHECKED ALL JOB NAMES?
         B     4(RLINK)       YES => TELL OUR CALLER NO MATCH
         SPACE 5
CMPJOBS  CLC   QUEJNAME(0,RJQE),2(R15) TO BE EXECUTED
FOUR     DC    H'4'           HELPS GET # OF INPUT JOB NAMES
TEN      DC    F'10'          LENGTH OF AN INPUT JOB NAME ENTRY
         EJECT
JOECHECK LH    R1,4(RET)      # OF MATCHED JQES
         LA    R15,8(RET)     A(1ST RETURNED JQE)
CHKJOEMT CLC   QUEJOBNO(L'JQEJOBNO,R15),QUEJOBNO(RJQE) MATCH?
         BE    JOEMAT         YES => RETURN IT
         LA    R15,JQELNGTH(R15) A(NEXT RETURNED JQE)
         BCT   R1,CHKJOEMT    CHECKED ALL RETURNED JQES?
         B     4(RLINK)       YES => TELL CALLER NO MATCH
JOEMAT   SLR   R15,RET        OFFSET TO RETURNED JQE
         STH   R15,JOEJQEOF   PASS IT TO JOEMATCH
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
         USING JQE,RJQE       JQE ADDRESSABILITY
JQEMATCH MVC   0(JQELNGTH,RRJQE),JQE RETURN THIS MATCHED JQE
         MVC   JQEPOSTN-JQE(L'JQEPOSTN,RRJQE),JQECOUNT RET THE POS
         LA    R#JQES,1(R#JQES) INCREMENT THE JQE MATCHED COUNT
         LA    RRJQE,JQELNGTH(RRJQE) A(SPOT FOR NEXT RETURN JQE)
         B     CHECKRET       SEE IF WE'VE FILLED THE RET AREA
         DROP  RJQE           UNNECESSARY
         SPACE 5
         USING JOEDSECT,RJOE  JOE ADDRESSABILITY
JOEMATCH ST    RLINK,JOEMHOLD SAVE THE RETURN ADDRESS
         MVC   0(JOESIZE,RRJOE),JOEDSECT RETURN THE JOE
         MVC   JOEJQE+2-JOEDSECT(L'JOEJQEOF,RRJOE),JOEJQEOF RET JQE SP3
         LA    R1,JOEREMOT+1  A(JOE DESTINATION)                    SP3
         BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT
         STH   R1,JOEPOSTN-JOEDSECT(RRJOE) RET THE JOE POSITION
         L     RLINK,JOEMHOLD RESTORE THE RETURN ADDRESS
         LA    R#JOES,1(R#JOES) INCREMENT THE JOE COUNT
         LA    RRJOE,JOESIZE(RRJOE) A(SPOT FOR NEXT RET JOE)
CHECKRET LA    R1,JOESIZE(RRJOE) A(END OF NEXT RET JOE)
         C     R1,RETEND      FILLED THE RETURN AREA?
         BLR   RLINK          NO => RETURN TO OUR CALLER
         B     4(RLINK)       YES => LET OUR CALLER KNOW
         DROP  RJOE           UNNECESSARY
         EJECT
FINDEST  LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS
         LA    R14,DESTCNTS   A(1ST COUNTED DESTINATION)
DESTCHK  CLI   0(R14),X'FF'   END OF COUNTED DESTINATIONS?
         BE    NODEST         YES => NO DESTINATION COUNT
         CLC   0(1,R14),0(R1) DESTINATION MATCH?
         BE    DESTFND        YES => FOUND THE CALLER'S DESTINATION
         LA    R14,2(R14)     A(NEXT DESTINATION)
         BCT   R15,DESTCHK    CHECKED ALL DESTINATIONS?
NODEST   SR    R1,R1          INDICATE DESTINATION
         BR    RLINK          NOT FOUND
DESTFND  SR    R1,R1          FOR THE INSGRT CHARACTER
         IC    R1,1(R14)      DESTINATION COUNT
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
*        REGEQU               REGISTER DEFINITIONS                  SP3
         SPACE 5
RLINK    EQU   R2             INTERNAL LINK REGISTER
RBASE    EQU   R3             A(STATJES2)
RHCT     EQU   R4             A(HASP COMMUNICATION TABLE)
RJQE     EQU   R5             A(JOB QUEUE ELEMENT)
RWORK    EQU   R6             A(WORK AREA)
RET      EQU   R7             A(RETURN AREA)
RJOE     EQU   R8             A(JOB OUTPUT ELEMENT)
R#JQES   EQU   R9             # OF JOB QUEUE ELEMENTS MATCHED
R#JOES   EQU   R9             # OF JOB OUTPUT ELEMENTS MATCHED
RRJQE    EQU   R10            A(RETURNED JOB QUEUE ELEMENT)
RRJOE    EQU   R10            A(RETURNED JOB OUTPUT ELEMENT)
R#JQS    EQU   R11            JOB QUEUE COUNT
RCOFF    EQU   R11            CLASS OFFSET COUNT
RJQE1    EQU   R12            A(1ST RETURNED JOB Q ELEMENT / Q)
RJOE1    EQU   R12            A(1ST RETURNED JOE / CLASS)
         EJECT
         PRINT ON
         $JQE                                                       SP3
JQEPOSTN EQU   JQETRAK,2      JQE POSITION                          SP3
JQETOTAL EQU   JQETRAK+2,2    QUEUE TOTAL                           SP3
         $PCE                 FOR $HCT EXPANSION                    SP3
*        $CAT                 FOR $QINDEX                           SP3
CATSTCCL EQU   X'D0'          STARTED TASK CLASS                    SP3
CATTSUCL EQU   X'E0'          TIME SHARING USER CLASS               SP3
         $HCT
         $JOE
JOEPOSTN EQU   JOECKPT,2      JOE POSITION
JOETOTAL EQU   JOECHAR,2      QUEUE TOTAL
         $JOT
         TITLE 'IHAPSA - LOW STORAGE DEFINITION'                    SP3
         IHAPSA
         TITLE 'IHAASCB - ADDRESS SPACE CONTROL BLOCK'              SP3
         IHAASCB
         TITLE 'IHAASXB - ADDRESS SPACE CONTROL BLOCK EXTENSION'    SP3
         IHAASXB
         TITLE 'IKJTCB - TASK CONTROL BLOCK'                        SP3
         IKJTCB
         TITLE 'INTERNAL DSECTS'                                    SP3
RBBASIC  DSECT                CHEAP MAP OF RB
         DS    12X
RBCDE    DS    A              A(CONTENTS DIRECTORY ENTRY)
         DS    12X
RBLINK   DS    A              A(NEXT RB OR TCB)
CDENTRY  DSECT                CHEAP MAP OF CDE
         DS    16X
CDENTPT  DS    A              A(LOAD MODULE ENTRY POINT)
         PRINT GEN
         EJECT
PARMS    DSECT                INPUT PARAMETERS
JOBNAMES DS    A              A(INPUT JOB NAMES)
WORKAD   DS    A              A(WORK AREA)
RETAREA  DS    A              A(RETURN AREA)
         SPACE 5
WORKAREA DSECT                WORK AREA
DESTCNTS DS    XL256          DESTINATION COUNT TABLE
MAX#DEST EQU   (*-DESTCNTS)/2 # OF COUNTABLE DESTINATIONS
RETEND   DS    A              A(END OF RETURN AREA)
JOEHOLD  DS    A              RETURN ADDRESS HOLD FOR GETAJOE
JOEJQEOF DS    H              JQE OFFSET FOR JOE
JQECOUNT DS    H              COUNT OF JQES
JOEMHOLD DS    A              RETURN ADDRESS HOLD FOR JOEMATCH
         END
