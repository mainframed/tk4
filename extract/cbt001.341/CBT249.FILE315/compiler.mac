         TITLE 'FEDERAL EXPRESS COMPILER CONTROLLER'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
* FUNCTION:                                                           *
*                                                                     *
*     THIS PROGRAM ATTACHES A COMPILER AND THE LINKAGE EDITOR BASED   *
*     ON CONTROL CARD INPUT.  THE COMPILERS SUPPORTED ARE IN A TABLE  *
*     AT LABEL, COMPTBL.  THIS TABLE NEEDS TO BE ADJUSTED FOR YOUR    *
*     SPECIFIC ENVIRONMENT.  THE LINKAGE EDITOR IS IN A TABLE AT      *
*     LABEL, LINKTBL; ONLY ONE LINKAGE EDITOR IS SUPPORTED.  SPF      *
*     STATISTICS ARE STORED IN THE PDS DIRECTORY AND MODS HAVE BEEN   *
*     MADE TO SPF TO ALLOW THE STATS TO BE SEEN WHEN BROWSING A       *
*     MEMBER LIST.  SPF STATS INCLUDE THE VERSION AND MODIFICATION    *
*     LEVEL FROM THE SOURCE, THE DATE AND TIME THE COMPILE WAS DONE,  *
*     THE MOD FIELD CONTAINS AN INDICATOR FOR THE TYPE OF COMPILE     *
*     DONE, AND THE USER ID IS TAKEN FROM THE JOB CARD.  THE MOD      *
*     FIELD INDICATOR IS TAKEN FROM THE COMPTBL ENTRIES THE FIRST     *
*     ENTRY BEING THE HIGHEST NUMBER AND THE LAST ENTRY BEING NUMBER  *
*     1.  ONE OF THE MAIN FUNCTIONS OF THIS PROGRAM IS TO NOTIFY THE  *
*     USER OF RETURN CODES FROM THE COMPILER AND THE LINKAGE EDITOR.  *
*     ALSO IF AN INVALID LIBRARY OR MEMBER NAME IS SPECIFIED THE USER *
*     IS NOTIFIED OF THIS.                                            *
*                                                                     *
*                                                                     *
* REGISTER CONVENTIONS:                                               *
*                                                                     *
*     BASE REGISTERS - 12, 11.                                        *
*     ADDRESS OF TIOT - 4.                                            *
*     BASE REGISTER FOR ESTAI ROUTINE - 5.                            *
*     WORK REGISTERS - 2, 3, 6, 7, 8, 9, 10.                          *
*          WARNING - CHECK BEFORE USING THESE REGISTERS.              *
*                                                                     *
*                                                                     *
* ATTRIBUTES:                                                         *
*                                                                     *
*     RENT.                                                           *
*     AC=1.                                                           *
*                                                                     *
*                                                                     *
* INPUT:                                                              *
*                                                                     *
*     INPUT CONSISTS OF THE SOURCE AND ONE OR MORE CONTROL CARDS.     *
*     THE FOLLOWING IS A COPY OF THE JCL TO COMPILE A COBOL PROGRAM   *
*     USING THE CAPEX OPTIMIZER.                                      *
*                                                                     *
* //TEC4666M JOB (T369055000),TIM.BAKER,CLASS=A,MSGCLASS=X            *
* /*JOBPARM ROOM=2                                                    *
* //COBOL   EXEC PGM=COMPILER,REGION=512K                             *
* //SYSLIB    DD DSN=SYS2.FED.COBCOPY,DISP=SHR                        *
* //          DD DSN=SYS2.COBCOPY,DISP=SHR                            *
* //SYSPUNCH  DD DUMMY                                                *
* //SYSPRINT  DD SYSOUT=X,HOLD=YES,DCB=BLKSIZE=2420                   *
* //SYSIN1    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //SYSIN2    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //STATSDD   DD DSN=SYS9.CAPEX.STATS,DISP=SHR                        *
* //SYSIN     DD DSN=TEC4666.MYDATA.CNTL(TEST),DISP=SHR               *
* //SYSUT1    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //SYSUT2    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //SYSUT3    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //SYSUT4    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //SYSUT6    DD UNIT=DISK,SPACE=(CYL,(1,1))                          *
* //CPXCSL    DD DSN=SYS9.CAPEX.SOURCE,DISP=SHR                       *
* //SYSLIN    DD DSN=&TEMP,DISP=(,DELETE),SPACE=(CYL,(1,1)),UNIT=DISK *
* //SYSLIN2   DD DSN=*.SYSLIN,DISP=(OLD,DELETE),VOL=REF=*.SYSLIN      *
* //SYSLIB2   DD DSN=SYS1.VSCOBLIB,DISP=SHR                           *
* //          DD DSN=SYS1.COBLIB,DISP=SHR                             *
* //          DD DSN=SYS8814.FCS.V4TLIB,DISP=SHR                      *
* //SYSLMOD   DD DSN=TEC.TEST.LOAD(TEST),DISP=SHR                     *
* //OBJECT    DD DUMMY,DCB=BLKSIZE=80                                 *
* //CONTROL   DD *                                                    *
* TYPE CL                                                             *
* COMP NOTERM,CSY,MDMAP,MLIST,SXR                                     *
* LINK XREF,LIST,MAP                                                  *
* LINK                                                                *
* USER TEC4666                                                        *
* /*                                                                  *
*                                                                     *
*     THING OF INTEREST IN THIS JCL ARE:                              *
*         1.  NO NOTIFY.  THE PROGRAM WILL DO THE NOTIFY.             *
*         2.  EXECUTE PROGRAM COMPILER.  THIS WILL BE THE SAME FOR    *
*             ALL TYPE OF COMPILERS                                   *
*         3.  DD SYSLIN2 AND SYSLIB2 ARE USED BY THE LINKAGE EDITOR.  *
*             THESE NAMES MUST BE UNIQUE FOR THE COMPILER AND THE     *
*             LINKAGE EDITOR THEY ARE SPECIFIED DURING THE ATTACH     *
*             MACRO.  THESE NAMES ARE SPECIFIED IN THE LINK PARMS     *
*             LOCATED AT LABEL, LNKDD.                                *
*         4.  DD CONTROL CONTAINS THE CONTROL CARDS FOR THE COMPILER. *
*             THERE ARE FOUR VALID TYPES OF CONTROL CARDS; TYPE,      *
*             COMP, LINK, AND USER.  THESE TYPES MUST BEGIN IN        *
*             COLUMN 1 AND END BEFORE 72.                             *
*                                                                     *
*             A.  TYPE - SPECIFIES THE TYPE OF COMPILE AND IF         *
*                        LINKAGE EDITOR IS TO BE CALLED.  TWO         *
*                        CHARACTERS THE FIRST INDICATES THE COMPILER  *
*                        TO USE AND THE SECOND INDICATES WHETHER      *
*                        LINK EDIT IS REQUIRED.  ONE 'TYPE' CARD AND  *
*                        ONLY ONE MUST BE SUPPLIED FOR EACH COMPILE.  *
*                        VALUE 1:         (SPECIFIED IN COMPTBL)      *
*                            A - ASSEMBLER H                          *
*                            C - COBOL COMPILER (WITH OPTIMIZER)      *
*                            G - FORTRAN G                            *
*                            H - FORTRAN H                            *
*                            P - PLI OPTIMZER COMPILER                *
*                                                                     *
*                        VALUE 2:         (SPECIFIED IN LINKTBL)      *
*                                                                     *
*                            L - LINKAGE EDITOR                       *
*                                                                     *
*             B.  COMP - SPECIFIES THE COMPILER OPTIONS TO BE         *
*                        PASSED TO THE COMPILER AS A PARM ON THE      *
*                        ATTACH MACRO.  MULTIPLE COMP CARDS ARE       *
*                        SUPPORTED.                                   *
*                                                                     *
*             C.  LINK - SPECIFIES THE LINKAGE EDITOR OPTIONS TO BE   *
*                        PASSED TO THE LINKAGE EDITOR AS A PARM ON    *
*                        THE ATTACH MACRO.  MULTIPLE LINK CARDS ARE   *
*                        SUPPORTED.                                   *
*                                                                     *
*             D.  USER - SPECIFIES THE USER ID FOR RETURN MESSAGES    *
*                        AND STORED IN THE ID FIELD OF THE SPF STATS. *
*                        IF NOT PROVIDED IT WILL DEFAULT TO THE       *
*                        FIRST SEVEN CHARACTERS OF THE JOB NAME.      *
*                                                                     *
*                                                                     *
* OUTPUT:                                                             *
*                                                                     *
*     FED0200 - ERROR X IN COMPILER PROGRAM RETURN CODE YYY           *
*         RETURN CODE YYY FROM A MACRO ISSUED BY THE COMPILER PROGRAM *
*         INDICATES A PROGRAM ERROR HAS OCCURRED AT LOCATION X.       *
*         THIS LOCATION CAN BE FOUND BY ISSUING A FIND TO THE HEX     *
*         VALUE OF THE ERROR CODE X.                                  *
*                                                                     *
*         1 - ERROR ON READ JFCB FOR CONTROL DD                       *
*         2 - ERROR ON READ JFCB FOR SYSIN DD                         *
*         3 - ERROR ON OPEN ON SYSIN DD                               *
*         4 - ERROR ON ATTACH OF COMPILER                             *
*         5 - ERROR ON WAIT FOR COMPLETION OF COMPILER                *
*         6 - ERROR ON SVC 95 SET NON SWAP FOR LINKAGE EDITOR         *
*         7 - ERROR ON ATTACH OF LINKAGE EDITOR                       *
*         8 - ERROR ON WAIT FOR COMPLETION OF LINKAGE EDITOR          *
*         9 - ERROR ON SVC 95 SET SWAPABLE AFTER COMPLETION OF LINK   *
*         A - ERROR ON READ JFCB FOR SYSLMOD DD                       *
*         B - ERROR ON STOW OF SPF STATS RETURN CODE PROVIDED         *
*         C - ERROR ON READ JFCB FOR SYSPRINT DD                      *
*                                                                     *
*     FED0201 - XXXXXXXX NOT IN YYYYYYYY                              *
*         MEMBER SPECIFIED (XXXXXXXX) TO COMPILER IS NOT FOUND IN
*         THE SPECIFIED LIBRARY (YYYYYYYY)                            *
*                                                                     *
*     FED0202 - NO CONTROL CARDS SUPPLIED                             *
*         THE CONTROL DD HAD NO INPUT CARDS.  THERE MUST BE AT LEAST  *
*         A 'TYPE' CARD.                                              *
*                                                                     *
*     FED0203 - NO XXXXXXXX DD SUPLIED                                *
*         THE (XXXXXXXX) DD CARD IS MISSING AND IS REQUIRED F BY THE  *
*         COMPILER PROGRAM.  REQUIRED DD'S ARE SYSIN, CONTROL,        *
*         SYSLMOD, AND SYSPRINT.                                      *
*                                                                     *
*     FED0204 - CONTROL CARDS INVALID                                 *
*         THE PARMETER SPECIFIED ON THE CONTROL CARD IS NOT TYPE,     *
*         COMP, LINK, OR USER; OR THE PARMETER IS NOT IN COLUMN 1.    *
*                                                                     *
*     FED0205 - INVALID COMPILER SPECIFIED                            *
*         THE 'TYPE' CONTROL CARD DID NOT SPECIFY A VALID COMPILER.   *
*                                                                     *
*     FED0206 - RETURN CODE: XXX YYYYYYYY HAS COMPILATION ERRORS      *
*         THE SPECIFIED MEMBER (YYYYYYYY) HAD A RETURN CODE (XXX)     *
*         GREATER THAN OR EQUAL TO 8 FROM THE COMPILER.               *
*                                                                     *
*     FED0207 - RETURN CODE: XXX YYYYYYYY COMPILATION COMPLETE        *
*         THE SPECIFIED MEMBER (YYYYYYYY) HAD A RETURN CODE (XXX)     *
*         LESS THAN 8 FROM THE COMPILER.  THE LINKAGE EDITOR WAS NOT  *
*         REQUESTED.                                                  *
*                                                                     *
*     FED0208 - RETURN CODE: XXX YYYYYYYY HAS LINKAGE EDITOR ERRORS   *
*         THE SPECIFIED MEMBER (YYYYYYYY) HAD A RETURN CODE (XXX)     *
*         GREATER THAN OR EQUAL TO 8 FROM THE LINKAGE EDITOR.         *
*                                                                     *
*     FED0209 - C: XXX L: YYY ZZZZZZZZ - AAAAAAAA                     *
*         THE SPECIFIED MEMBER (ZZZZZZZZ) HAD A COMPILER RETURN CODE  *
*         (XXX) OF LESS THAN 8 AND A LINK EDIT RETURN CODE (YYY) OF   *
*         LESS THAN 8.  THE MEMBER WAS LINK EDITED INTO THE SYSLMOD   *
*         LIBRARY (AAAAAAAA).                                         *
*                                                                     *
*     FED0210 - L: XXX YYYYYYYY - ZZZZZZZZ                            *
*         THE SPECIFIED MEMBER (YYYYYYYY) HAD A LINK EDIT RETURN CODE *
*         (XXX) OF LESS THAN 8.  THE MEMBER WAS LINK EDITED INTO THE  *
*         SYSLMOD LIBRARY (ZZZZZZZZ).  THE COMPILE OPTION WAS NOT     *
*         SPECIFIED.                                                  *
*                                                                     *
*     FED0211 - CONTROL CARDS INVALID NO TASKS REQUESTED              *
*         THE 'TYPE' CONTROL CARD SPECIFIED NO COMPILER OR LINKAGE    *
*         EDITOR.                                                     *
*                                                                     *
*                                                                     *
* MACROS:                                                             *
*                                                                     *
*     ATTACH    BLDL      CLOSE     DETACH    EXTRACT   FREEMAIN      *
*     GETMAIN   MODESET   OPEN      RDJFCB    RESERVE   RETURN        *
*     SAVE      STOW      WAIT      DEQ                               *
*                                                                     *
*                                                                     *
* NOTES:                                                              *
*                                                                     *
*     THIS PROGRAM CONTAINS AN USER SVC TO AUTHORIZE THE PROGRAM      *
*     TO ISSUE THE SEND COMMAND IN FOREGROUND.  THIS CODE CAN BE      *
*     FOUND BY DOING A FIND ON THE WORD USERA.  THIS CODE NEEDS TO    *
*     BE DELETED OR CHANGED ACCORDING TO INSTALLATION STANDARDS.      *
*                                                                     *
*     THE PROGRAM MUST BE AUTHORIZE TO ISSUE SVC 34 (SEND) AND        *
*     SVC 95 (SET NONSWAP).                                           *
*                                                                     *
*     THE MESSAGE SENT BACK TO THE TERMINAL ON A SUCCESSFUL COMPILE   *
*     AND LINK IS ADDED TO THE END OF THE SYSPRINT DATASET.  THIS     *
*     MESSAGE CONTAINS THE PROGRAM NAME AND THE LIBRARY LINKED INTO.  *
*                                                                     *
*     RETURN CODES SPECIFIED IN MESSAGES FROM THE PROGRAM WILL BE     *
*     IN THE FORM OF SXXX OR UXXX IF AN ABEND OR XXX IF NORMAL        *
*     COMPLETION.                                                     *
*                                                                     *
*     THE COMPLETION CODE OF THE JOB WILL BE THE HIGHEST RETURN CODE  *
*     FROM THE COMPILER OR THE LINKAGE EDITOR.  A COMPLETION CODE     *
*     OF 0 TO 12 IS FROM THE COMPILER OR THE LINKAGE EDITOR.          *
*     A COMPLETION CODE OF 16 IS AN INTERAL ERROR IN THE COMPILER     *
*     PROGRAM.                                                        *
*                                                                     *
*     IN THE FIRST SIX MONTHS OF USE THERE HAVE BEEN NO FED0200       *
*     MESSAGES PRODUCED!                                              *
*                                                                     *
*                                                                     *
* CHANGE ACTIVITY:                                                    *
*                                                                     *
*     NONE.                                                           *
*                                                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
COMPILER CSECT
         SAVE  (14,12),,COMPILER_R01.0_&SYSDATE_&SYSTIME
         LR    R12,R15                 STORE ENTRY POINT
         USING COMPILER,R12,R11        DEFINE BASES
         USING MAINAREA,R13            DEFINE STORAGE
         GETMAIN RU,LV=4096,BNDRY=PAGE GET STORAGE
         ST    R13,SAVEBK-SAVEAREA(,R1) SAVE CALLER'S SAVE AREA ADDR
         ST    R1,SAVEFW               SAVE MY SAVEAREA ADDRESS
         LR    R13,R1                  SAVE STORAGE ADDRESS
         L     R11,BASE2               SET UP SECOND BASE REG
         B     INIT                    GO SET UP STORAGE
EQUATES  DS    0F
BASE2    DC    A(COMPILER+4096)
R0       EQU   0
R1       EQU   1
R2       EQU   2                       WORK REG
R3       EQU   3                       WORK REG
R4       EQU   4                       ADDRESS OF TIOT
R5       EQU   5                       ESTAI ROUTINE BASE REGISTER
R6       EQU   6                       WORK REG
R7       EQU   7                       WORK REG
R8       EQU   8                       WORK REG
R9       EQU   9                       WORK REG
R10      EQU   10                      WORK REG
R11      EQU   11                      BASE REGISTER
R12      EQU   12                      BASE REGISTER
R13      EQU   13                      GETMAIN DSECT
R14      EQU   14
R15      EQU   15
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              S A V E  N A M E  F O R  M E S S A G E S               *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
INIT     EQU   *
         LA    R4,NAMEADDR             POINT TO STORAGE FOR JOB NAME
         MVC   EXTRACT(LEXTCT),EXTCT   MOVE MACRO TO STORAGE
         EXTRACT (R4),FIELDS=(TIOT),MF=(E,EXTRACT) GET ADDR OF TIOT
         L     R4,NAMEADDR             LOAD JOB NAME
         MVC   USERID(7),0(R4)         MOVE NAME INTO MESSAGE
         ST    R13,ESTAPARM            SAVE POINTER TO GETMAIN AREA
         LA    R6,JFCB                 POINT TO JFCB FIELD
         ST    R6,RJFCBLST             STORE IT IN LIST
         MVI   RJFCBLST,X'07'          FIX FIRST BYTE FOR RDJFCB
         MVC   CONTROL(LCONT),CONT     MOVE
         MVC   SYSIN(LIN),IN                DCB TO
         MVC   SYSLMOD(LLMOD),LMOD                 GETMAINED
         MVC   SYSPRINT(LPRT),PRT                            AREA
         MVC   PARMTBL(LPRMTBL),PRMTBL MOVE PARAMETER TABLE TO STORAGE
         LA    R6,RJFCBLST             POINT TO JFCB LIST
         STCM  R6,7,SYSIN+37           LOAD INTO SYSIN DCB
         STCM  R6,7,SYSLMOD+37         LOAD INTO SYSLMOD DCB
         STCM  R6,7,CONTROL+37         LOAD INTO CONTROL DCB
         STCM  R6,7,SYSPRINT+37        LOAD INTO SYSPRINT DCB
         MVC   ATTACH(LATTCH),ATTCH    MOVE MACRO TO STORAGE
         MVC   CALL(LCLL),CLL          MOVE MACRO TO STORAGE
         MVC   CLOSE,CLSE              MOVE MACRO TO STORAGE
         MVC   DEQ(LDQ),DQ             MOVE MACRO TO STORAGE
         MVC   READ1,READ              MOVE MACRO TO STORAGE
         MVC   READ2,READ              MOVE MACRO TO STORAGE
         MVC   READ3,READ              MOVE MACRO TO STORAGE
         MVC   READ4,READ              MOVE MACRO TO STORAGE
         MVC   RESERVE(LRESERV),RESERV MOVE MACRO TO STORAGE
         MVC   LINKDD(LLNKDD),LNKDD    MOVE DD NAMES TO STORAGE
         LA    R3,SYSIN                POINT TO DCB
         STCM  R3,7,READ1+1            STORE DCB IN RDJFCB
         LA    R3,SYSLMOD              POINT TO DCB
         STCM  R3,7,READ2+1            STORE DCB IN RDJFCB
         LA    R3,CONTROL              POINT TO DCB
         STCM  R3,7,READ3+1            STORE DCB IN RDJFCB
         LA    R3,SYSPRINT             POINT TO DCB
         STCM  R3,7,READ4+1            STORE DCB IN RDJFCB
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              S A V E  P A R A M E T E R S                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEPARM EQU   *
         LA    R6,COMP                 INITIALIZE
         ST    R6,PARMTBL+4              POINTERS
         LA    R6,LINK                     TO
         ST    R6,PARMTBL+12                 PARAMETERS
         LA    R6,TYPE                 INITIALIZE
         ST    R6,PARMTBL+20             POINTERS
         LA    R6,USER                     TO
         ST    R6,PARMTBL+28                 PARAMETERS
         RDJFCB MF=(E,READ3)           READ JFCB BEFORE OPEN
         LTR   R15,R15                 READ OK ?
         BZ    NOERR3A                 YES, NO ERROR
         CH    R15,FOUR                RETURN CODE 4
         BE    NOCNTL                  YES, PUT OUT ON DD MSG
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F1'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOCNTL   EQU   *
         LA    R15,3                   NO, MESSAGE 3 - NO SYSIN DD
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVC   MSGBOD+14(8),CONTROL+40 MOVE DD FROM DCB TO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR3A  EQU   *
         LA    R9,CONTROL              LOAD DCB INTO REG 9
         MVC   WORK,OPENCTL            MOVE OPEN MACRO TO STORAGE
         OPEN  ((R9),INPUT),MF=(E,WORK) OPEN CONTROL CARD FILE
         SLR   R10,R10                 CLEAR REG
GETPARM  EQU   *
         GET   CONTROL,PARM            GET RECORD
         LA    R5,1(,R5)               ADD ONE TO NUMBER READ
         LA    R6,LPRMTBL              LOAD LENGTH OF TABLE
         SRL   R6,3                    DIVIDE BY 8
         LA    R7,PARMTBL              POINT TO TABLE OF PARM TYPES
PARMWHO  EQU   *
         CLC   0(4,R7),PARM            RIGHT PARAMETER ?
         BE    PARMFND                 YES, GO MOVE PARM INFO
         LA    R7,8(,R7)               BUMP TO NEXT PARM TYPE
         BCT   R6,PARMWHO              GO CHECK
         CLOSE ((R9)),MF=(E,CLOSE)     CLOSE INPUT FILE
         LA    R15,4                   MESSAGE 4 - CNTL CARDS INVALID
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
PARMFND  EQU   *
         L     R6,4(,R7)               POINT TO PARM FIELD
         LH    R10,0(,R6)              LOAD LENGTH IN REG
         LA    R7,2(R6,R10)            POINT TO FIRST FREE BYTE
         LA    R3,PARM+5               BUMP CONTROL CARD PAST ID
         LA    R8,67                   CHECK UP TO COLUMN 72
         CH    R10,ZEROH               HAVE ANY PARMS BEEN MOVED ?
         BE    MOVEPRM                  NO, OK
         MVI   0(R7),C','               YES, ADD COMMA BETWEEN PARMS
         LA    R7,1(,R7)               BUMP TO NEXT POSITION OF PARM
         LA    R10,1(,R10)             ADD ONE TO BYTES MOVED
MOVEPRM  EQU   *
         EX    R8,TRANTAB2             BLANK ?
         BC    8,GETPARM               CARD ALL BLANKS GET NEXT ONE
         SLR   R1,R3                   NUMBER OF BLANKS IN FRONT
         SLR   R8,R1                   SUBTRACT FROM LENGTH TO CHECK
         LA    R3,0(R3,R1)             POINT TO FIRST NONBLANK
         EX    R8,TRANTAB3             FIND ENDING BLANK
         SLR   R1,R3                   LENGTH OF PARM ON THIS CARD
         ALR   R10,R1                  ADD LENGTH TO PARM FIELD
         BCTR  R1,0                    SUBTRACT BEFORE MOVE
         EX    R1,MOVEPARM             MOVE PARM
         STH   R10,0(R6)               STORE NUMBER OF BYTES MOVED
         B     GETPARM                 GO GET NEXT CARD
ERR02    EQU   *
         CH    R5,ZEROF                ANY CARDS READ ?
         BNE   MOVED2                  YES, GO ON
         LA    R15,2                   MESSAGE 2 - NO PARM SUPPLIED
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
MOVED2   EQU   *
         CLOSE ((R9)),MF=(E,CLOSE)     CLOSE INPUT FILE
         CLC   TYPE(2),ZEROH           FIRST PARM 0 BYTES ?
         BE    ERR04                   YES, PARM WRONG
         CLC   TYPE(2),TWO             FIRST PARM OVER 2 BYTES ?
         BNH   USERIDCK                NO, PARM OK
ERR04    EQU   *
         LA    R15,4                   YES, MESSAGE 4 - PARM INVALID
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
USERIDCK EQU   *
         CLC   USER(2),ZEROH           USERID SUPPLIED IN PARM ?
         BE    CHECKMEM                NO, USE JOBNAME
         CLC   USER(2),SEVEN           USERID PARM FIELD SEVEN BYTES ?
         BE    USERIDMV                YES, USER PARM USERID
         LA    R15,4                   NO, MESSAGE 4 - PARM INVALID
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
USERIDMV EQU   *
         MVC   USERID(7),USERPARM      USE ID PASSED IN PARM FOR MSG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              C H E C K  F O R  M E M B E R                          *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
CHECKMEM EQU   *
         RDJFCB MF=(E,READ1)           READ JFCB BEFORE OPEN
         LTR   R15,R15                 READ OK ?
         BZ    NOERR3B                 YES, NO ERROR
         CH    R15,FOUR                RETURN CODE 4
         BE    NOSYSIN                 YES, PUT OUT ON DD MSG
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F2'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOSYSIN  EQU   *
         LA    R15,3                   NO, MESSAGE 3 - NO SYSIN DD
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVC   MSGBOD+14(8),SYSIN+40   MOVE DD FROM DCB TO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR3B  EQU   *
         MVC   LISTLEN,BLDLLEN         MOVE IN LENGTH FOR BLDL LIST
         MVC   NAME(8),JFCB+44         MOVE PROGRAM NAME TO STORAGE
         MVC   TTR(6),BLANKS           CLEAR BLDL LIST
         MVC   BLDLVER(2),ZEROH        INIT BLDL LIST
         MVC   JFCB+44(8),BLANKS       CLEAR NAME FIELD
         OI    JFCB+52,X'08'           DON'T WRITE THE JFCB AFTER OPEN
         NI    JFCB+85,X'FE'           CHANGE TO PO DATASET
         LA    R9,SYSIN
         OPEN  (,(INPUT)),TYPE=J,MF=(E,READ1) OPEN DATA SET AS PO
         LTR   R15,R15                 OPEN OK ?
         BZ    NOERR0A                 YES, NO ERROR
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F3'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0A  EQU   *
         BLDL  SYSIN,LIST              MEMBER IN INPUT DATASET ?
         ST    R15,CODE                STORE RETURN CODE
         CLOSE ((R9)),MF=(E,CLOSE)     CLOSE FILE INCASE OF ABEND
         CLI   CODE+3,X'00'            MEMBER THERE ?
         BE    ATTCOMP                 YES, NO ERROR
         LA    R6,MSGBOD+26            POINT TO MESSAGE AREA FOR DS
         LA    R3,JFCB                 POINT TO DATA SET MESSAGE
         LA    R8,43                   LENGTH - 1
         EX    R8,TRANTAB3             FIRST BLANK AFTER NAME
         SLR   R1,R3                   SUBTRACT FOR LENGTH TO MOVE
         EX    R1,MOVENAME             MOVE NAME TO MESSAGE
         ST    R1,LMSG                 STORE NUMBER OF BYTES MOVED
         LA    R15,1                   NO, MESSAGE 1 - INVALID SOURCE
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVC   MSGBOD+10(8),NAME       LOAD PROGRAM NAME INTO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              A T T A C H  C O M P I L E R                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ATTCOMP  EQU   *
         MVC   STOWVER(2),BLDLVER      SPF VER AND MOD SAVED IN OUTPUT
         CLI   COMPTYPE,C'N'           COMPILE REQUESTED ?
         BE    ATTLINK                 NO,GO CHECK LINK
         LA    R6,LCOMPTBL             LOAD LENGTH OF TABLE
         SRL   R6,2                    DIVIDE BY 4
         LA    R7,COMPTBL              POINT TO TABLE OF COMPILERS
ATTWHO   EQU   *
         CLC   0(1,R7),COMPTYPE        RIGHT COMPILER ?
         BE    COMPFND                 YES, GO ATTACH COMPILER
         LA    R7,4(,R7)               BUMP TO NEXT COMP TYPE
         BCT   R6,ATTWHO               GO CHECK
         LA    R15,5                   MESSAGE 5 - COMP TYPE INVALID
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
COMPFND  EQU   *
         STH   R6,STOWCOMP             SPF USER MOD FIELD PTS TO COMP
         SLR   R6,R6                   CLEAR REG
         ICM   R6,7,1(R7)              INSERT POINTER TO COMPILER
         LA    R8,ECB1
         LA    R9,COMP
         ST    R9,CALL
         OI    CALL,X'80'
         SPACE 1
         ATTACH EPLOC=(R6),ESTAI=(ESTRTN1,ESTAPARM),TERM=YES,ECB=(R8), *
               SF=(E,ATTACH),MF=(E,CALL)
         SPACE 1
         LTR   R15,R15                 ATTACH SUCCESSFUL ?
         BE    NOERR0B                 YES, GO WAIT FOR COMPLETION
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F4'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0B  EQU   *
         ST    R1,TCB1                 STORE ADDR OF COMPILER
         WAIT  ECB=ECB1,LONG=YES       WAIT ON COMPILATION
         DETACH TCB1                   DETACH COMPILER
         LTR   R15,R15                 DETACH SUCCESSFUL ?
         BE    NOERR0C                 YES, GO CHECK RETURN CODE
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F5'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0C  EQU   *
         CLI   MSGBOD+23,C'E'          ESTAI ROUTINE ENTERED ?
         BE    ESTRTN                  YES, EXIT PROGRAM
         CLI   ECB1+3,X'08'            RETURN CODE LESS THAN 8 ?
         BL    NOERR6                  YES, COMPILATION SUCCESSFUL
         LA    R15,6                   NO, MESSAGE 6 - COMPILATION ERR
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         LH    R6,ECB1+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+24(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+26,X'F0'         MAKE LAST BYTE PRINTABLE
         MVC   MSGBOD+28(8),NAME        LOAD PROGRAM NAME INTO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR6   EQU   *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              A T T A C H  L I N K A G E  E D I T O R                *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ATTLINK  EQU   *
         CLC   LINKTYPE(1),LINKTBL     LINK EDITOR REQUESTED
         BE    NOERR7                  YES, GO LINK EDIT
         CLI   COMPTYPE,C'N'           COMPILE REQUESTED ?
         BNE   NOERR11
         LA    R15,11                  NO, MESSAGE 11 - NOTHING DONE
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR11  EQU   *
         LA    R15,7                   NO, MESSAGE 7 - NO LINK EDIT
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         LH    R6,ECB1+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+24(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+26,X'F0'         MAKE LAST BYTE PRINTABLE
         MVC   MSGBOD+28(8),NAME        LOAD PROGRAM NAME INTO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR7   EQU   *
         SLR   R6,R6                   CLEAR REG
         LA    R7,LINKTBL              POINT TO LINK EDITOR
         ICM   R6,7,1(R7)              INSERT POINTER TO LINK EDITOR
         LA    R8,ECB2                 POINT TO ECB
         LA    R9,LINK                 POINT TO LINK EDIT OPTIONS
         ST    R9,CALL                 STORE IN PARM LIST
         LA    R9,LINKDD               POINT TO OPTIONAL DD NAME
         ST    R9,CALL+4               STORE DD NAMES IN PARM LIST
         LA    R0,41                   SET NONSWAP
         SVC   95                      ISSUE SYSEVENT MACRO
         LTR   R15,R15                 SET NONSWAP SUCCESSFUL
         BE    NOERR0D                  YES, GO ATTACH LINK EDITOR
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                     NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F6'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0D  EQU   *
         SPACE 1
         ATTACH EPLOC=(R6),ESTAI=(ESTRTN2,ESTAPARM),TERM=YES,ECB=(R8), *
               SF=(E,ATTACH),MF=(E,CALL)
         SPACE 1
         LTR   R15,R15                 ATTACH SUCCESSFUL ?
         BE    NOERR0E                 YES, GO WAIT FOR COMPLETION
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F7'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0E  EQU   *
         ST    R1,TCB1                 STORE ADDR OF LINK EDITOR
         WAIT  ECB=ECB2,LONG=YES       WAIT ON LINK EDIT
         DETACH TCB1                   DETACH LINK EDITOR
         LTR   R15,R15                 DETACH SUCCESSFUL ?
         BE    NOERR0F                 YES, GO CHECK RETURN CODE
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F8'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0F  EQU   *
         LA    R0,42                   SET SWAPABLE
         SVC   95                      ISSUE SYSEVENT MACRO
         LTR   R15,R15                 SET SWAP SUCCESSFUL ?
         BE    NOERR0G                 YES, GO CHECK RETURN CODE
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'F9'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0G  EQU   *
         CLI   MSGBOD+23,C'E'           ESTAI ROUTINE ENTERED ?
         BE    ESTRTN                  YES, EXIT PROGRAM
         CLI   ECB2+3,X'08'            LINK EDIT SUCCESSFUL ?
         BL    NOERR8                  YES, GO MOVE PROGRAM
         LA    R15,8                   NO, MESSAGE 8 - LINK EDIT ERR
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         LH    R6,ECB2+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+24(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+26,X'F0'         MAKE LAST BYTE PRINTABLE
         MVC   MSGBOD+28(8),NAME       LOAD PROGRAM NAME INTO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR8   EQU   *
         RDJFCB MF=(E,READ2)           READ JFCB BEFORE OPEN
         LTR   R15,R15                 READ OK ?
         BZ    NOERR3C                 YES, NO ERROR
         CH    R15,FOUR                RETURN CODE 4
         BE    NOSYSLMD                YES, PUT OUT ON DD MSG
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'C1'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOSYSLMD EQU   *
         LA    R15,3                   NO, MESSAGE 3 - NO SYSLMOD DD
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVC   MSGBOD+14(8),SYSLMOD+40    MOVE DD FROM DCB TO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR3C  EQU   *
         OI    JFCB+52,X'08'           DON'T WRITE THE JFCB AFTER OPEN
         CLI   JFCB+44,C' '            NAME FIELD BLANK
         BE    FINDUCB                  YES, USE NAME OF SOURCE
         MVC   NAME(8),JFCB+44          NO, USE NAME ON SYSLMOD
FINDUCB  EQU   *
         LA    R4,24(,R4)              ADDRESS OF FIRST DD IN TIOT
NEXTDD   EQU   *
         CLC   4(8,R4),SYSLMOD+40      DD IN TIOT ?
         BE    LOCUCB                  YES, GO FINE UCB
         SLR   R6,R6                   CLEAR REG
         IC    R6,0(,R4)               NO, LOAD LENGTH OF THIS ENTRY
         LA    R4,0(R4,R6)             BUMP TO NEXT ENTRY
         B     NEXTDD                  NO, CHECK NEXT ENTRY
LOCUCB   EQU   *
         LA    R6,16(,R4)              R7 POINTS TO UCB FOR SYSLMOD
         MVC   STOWMEM(8),NAME         LOAD PROGRAM NAME IN SPF DATA
         TIME  DEC                     GET CURRENT DATE AND TIME
         SRL   R0,16                   CLEAR OFF SECONDS
         STH   R0,STOWTIME             SAVE TIME
         ST    R1,STOWDAT1             SAVE DATE
         ST    R1,STOWDAT2             SAVE DATE
         MVC   STOWID(7),USERID          SAVE USER ID
         MVC   STOWBLNK(3),BLANKS      MOVE BLANKS FOR SPF
         MVC   MINOR(44),JFCB          LOAD DATA SET NAME
         LA    R9,SYSLMOD
         MVC   WORK,OPENMOD
         OPEN  ((R9),UPDAT),MF=(E,WORK) OPEN LOAD LIBRARY
         MVC   TTR(6),BLANKS           CLEAR BLDL LIST
         MVC   BLDLVER(2),ZEROH        INIT BLDL LIST
         BLDL  SYSLMOD,LIST            GET CURRENT USER DATA
         IC    R3,BLDLTYPE             GET BYTE CONTAINING LENGTH
         N     R3,ONEFOX               TURN OFF FIRST 3 BITS
         SLL   R3,1                    MULTIPLE BY 2
         LR    R2,R3                   STORE LENGTH IN REG
         BCTR  R3,0                    SUBTRACT 1 FOR MOVE
         EX    R3,MOVEUSER             MOVE USER DATA INTO STOW LIST
         LA    R8,STOWUSER             POINT TO FIRST OF USER DATA
         LA    R8,0(R8,R2)             BRANCH AROUND DATA MOVED
         LA    R10,LSTOWSPF            LOAD LENGTH OF SPF USER DATA
         ALR   R2,R10                  ADD LENGTH TO USER DATA LENGTH
         SRL   R2,1                    DIVIDE BY 2 FOR NO. OF HALFWORDS
         BCTR  R10,0                   SUBTRACT 1 FOR MOVE
         EX    R10,MOVESPF             MOVE SPF USER DATA TO STOW LIST
         IC    R3,BLDLTYPE             GET BYTE CONTAINING LENGTH
         N     R3,EASYZERO             TURN OFF LENGTH
         OR    R2,R3                   TURN FIRST 3 BITS ON IF NEEDED
         STC   R2,STOWTYPE             STORE LENGTH IN STOW LIST
         LA    R7,MINOR                LOAD ADDR OF DATASET NAME
         ST    R7,RESERVE+8            STORE ADDR FOR RESERVE
         ST    R7,DEQ+8                STORE ADDR FOR DEQ
         RESERVE UCB=(R6),MF=(E,RESERVE) RESERVE DATASET
         STOW  SYSLMOD,STOWLIST,R      STORE USER DATA FOR SPF
         DEQ   UCB=(R6),MF=(E,DEQ)     FREE DATASET
         CLI   3(R15),X'00'            MEMBER REPLACED ?
         BE    NOERR0H                 YES, GO PUT OUT FINAL MESSAGE
         CLI   3(R15),X'08'            MEMBER ADDED ?
         BE    NOERR0H                 YES, GO PUT OUT FINAL MESSAGE
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'C2'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOERR0H  EQU   *
         CLOSE ((R9)),MF=(E,CLOSE)     CLOSE FILE
         CLI   COMPTYPE,C'N'           COMPILE REQUESTED
         BNE   NOERR10
         LA    R6,MSGBOD+28            POINT TO MESSAGE AREA FOR DS
         LA    R3,JFCB                 POINT TO DATA SET MESSAGE
         LA    R8,43                   LENGTH - 1
         EX    R8,TRANTAB3             FIRST BLANK AFTER NAME
         SLR   R1,R3                   SUBTRACT FOR LENGTH TO MOVE
         EX    R1,MOVENAME             MOVE NAME TO MESSAGE
         ST    R1,LMSG                 STORE NUMBER OF BYTES MOVED
         LA    R15,10                  MESSAGE 10 - SUCCESS LINK ONLY
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         LH    R6,ECB2+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+13(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+15,X'F0'         MAKE LAST BYTE PRINTABLE
         MVC   MSGBOD+17(8),NAME        LOAD PROGRAM NAME INTO MSG
         B     PRINT                   GO PRINT MESSAGE
NOERR10  EQU   *
         LA    R6,MSGBOD+35            POINT TO MESSAGE AREA FOR DS
         LA    R3,JFCB                 POINT TO DATA SET MESSAGE
         LA    R8,43                   LENGTH - 1
         EX    R8,TRANTAB3             FIRST BLANK AFTER NAME
         SLR   R1,R3                   SUBTRACT FOR LENGTH TO MOVE
         EX    R1,MOVENAME             MOVE NAME TO MESSAGE
         ST    R1,LMSG                 STORE NUMBER OF BYTES MOVED
         LA    R15,9                   MESSAGE 9 - SUCCESS
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         LH    R6,ECB1+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+13(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+15,X'F0'         MAKE LAST BYTE PRINTABLE
         LH    R6,ECB2+2               LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+20(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+22,X'F0'         MAKE LAST BYTE PRINTABLE
         MVC   MSGBOD+24(8),NAME        LOAD PROGRAM NAME INTO MSG
PRINT    EQU   *
         MVI   PRINTMSG,X'40'          CLEAR FIRST
         MVC   PRINTMSG+1(120),PRINTMSG            AND REST OF LINE
         MVI   PRINTMSG,C'-'           TRIPLE SPACE LINE
         LH    R8,MSGOUT               LOAD LENGTH OF MESSAGE
         LA    R7,33                   LENGTH OF HEADER AND TRAILER + 1
         SR    R8,R7                   SUBTRACT LENGTH OF HEADER+1
         EX    R8,PRTMSG               MOVE MESSAGE TO PRINT LINE
         RDJFCB MF=(E,READ4)           READ JFCB BEFORE OPEN
         LTR   R15,R15                 READ OK ?
         BZ    NOERR3D                 YES, NO ERROR
         CH    R15,FOUR                RETURN CODE 4
         BE    NOSYSPRT                YES, PUT OUT ON DD MSG
         LR    R6,R15                  SAVE RETURN CODE
         LA    R15,0                   NO, MESSAGE 0 - PROGRAM ERROR
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVI   MSGBOD+16,X'C3'         INDICATE PROGRAM PROBLEM
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+51(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+53,X'F0'         MAKE LAST BYTE PRINTABLE
         B     MESSERR                 GO TO MESSAGE ROUTINE
NOSYSPRT EQU   *
         LA    R15,3                   NO, MESSAGE 3 - NO SYSIN DD
         MVC   ECB1+2,SIXTEEN          RETURN CODE 16
         BAL   R10,BLDMSG                  GO BUILD MESSAGE
         MVC   MSGBOD+14(8),SYSPRINT+40 MOVE DD FROM DCB TO MSG
         B     MESSAGE                 GO TO MESSAGE ROUTINE
NOERR3D  EQU   *
         LA    R9,SYSPRINT             LOAD ADDRESS OF DCB
         MVC   WORK,OPENPRT
         OPEN  ((R9),OUTPUT),MF=(E,WORK) OPEN PRINT FILE
         PUT   SYSPRINT,PRINTMSG       WRITE MSG ON LISTING
         MVC   WORK,WORK
         CLOSE ((R9)),MF=(E,CLOSE)        CLOSE FILE
         B     MESSAGE                 GO TO MESSAGE ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              E S T R T N  E N T E R E D - E N D                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ESTRTN   EQU   *
         LR    R1,R13                  SAVE STORAGE ADDRESS
         L     R13,SAVEBK              *    OS RETURN
         FREEMAIN RU,LV=4096,A=(1)     FREE STORAGE
         RETURN (14,12),RC=20          *    LINKAGE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              N O  M E S S A G E  -  A B E N D                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
MESSERR  EQU   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         LA    R0,1                    TURN ON AUTHORIZATION BIT  USERA
         SVC   242                     AUTHORIZE                  USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LA    R1,MODE1                PREPARE FOR AUTHORIZATION
         MODESET MF=(E,(1))            AUTHORIZE TO SEND MESSAGE
         SLR   R0,R0                   CLEAR REG 0
         LA    R1,MSGOUT               LOAD ADDR OF MESSAGE
         SVC   34                      SEND MESSAGE
         LA    R1,MODE2                PREPARE FOR UNAUTHORIZATION
         MODESET MF=(E,(1))            TURN OFF AUTHORIZATION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         SLR   R0,R0                   TURN OFF AUTHORIZATION BIT USERA
         SVC   242                     UNAUTHORIZE                USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ABEND    EQU   *
         LR    R1,R13                  SAVE STORAGE ADDRESS
         L     R13,SAVEBK              *    OS RETURN
         FREEMAIN RU,LV=4096,A=(1)     FREE STORAGE
         RETURN (14,12),RC=24          *    LINKAGE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              M E S S A G E  R O U T I N E  A N D  R E T U R N       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
MESSAGE  EQU   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         LA    R0,1                    TURN ON AUTHORIZATION BIT  USERA
         SVC   242                     AUTHORIZE                  USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LA    R1,MODE1                PREPARE FOR AUTHORIZATION
         MODESET MF=(E,(1))            AUTHORIZE TO SEND MESSAGE
         SLR   R0,R0                   CLEAR REG 0
         LA    R1,MSGOUT               LOAD ADDR OF MESSAGE
         SVC   34                      SEND MESSAGE
         LA    R1,MODE2                PREPARE FOR UNAUTHORIZATION
         MODESET MF=(E,(1))            TURN OFF AUTHORIZATION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         SLR   R0,R0                   TURN OFF AUTHORIZATION BIT USERA
         SVC   242                     UNAUTHORIZE                USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
RETURN   EQU   *
         CLC   ECB1+2(2),ECB2+2        LINK EDIT RETURN CODE HIGHER ?
         BL    LINKH                   YES, USE LINK EDIT RETURN CODE
         LH    R10,ECB1+2              NO, MOVE IN COMPILER RETURN CODE
         B     DONE                    GO TO 'THE END'
LINKH    EQU   *
         LH    R10,ECB2+2              MOVE IN LINK EDIT RETURN CODE
DONE     EQU   *
         LR    R1,R13                  SAVE STORAGE ADDRESS
         L     R13,SAVEBK              *    OS RETURN
         FREEMAIN RU,LV=4096,A=(1)     FREE STORAGE
         LR    R15,R10                 MOVE RETURN CODE TO REG
         RETURN (14,12),RC=(15)        *    LINKAGE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              B U I L D  M E S S A G E  (R10 LINK REGISTER)          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
BLDMSG   EQU   *
         SLL   R15,2                   MULTIPLY BY 4
         C     R15,ENDTBL              MESSAGE NUMBER IN TABLE
         BNL   ABEND                   NO ERROR MESSAGE
         MVC   MSGHEAD(6),MSGHD        MOVE MESSAGE HEADER TO AREA
         L     R6,MSGTBL(R15)          LOAD ADDR OF ERROR MSG
         L     R7,MSGLTBL(R15)         LOAD LENGTH OF MESSAGE
         LA    R9,MSGBOD               POINT TO MESSAGE AREA
         LR    R8,R7                   LOAD LENGTH OF MESSAGE
         BCTR  R7,0                    SUBTRACT ONE FROM LENGTH
         EX    R7,MOVEMSG               AND MOVE MESSAGE
         AR    R9,R8                   MOVE PAST LENGTH OF DATASET NAME
         L     R3,LMSG                 LOAD LEN OF DATA SET
         AR    R9,R3                   POINT TO END OF MESSAGE
         MVC   0(8,R9),MSGTR1          MOVE IN MESSAGE TRAILER (PART 1)
         MVC   8(7,R9),USERID          MOVE IN NAME FOR NOTIFY
         MVC   15(7,R9),MSGTR2         MOVE IN MESSAGE TRAILER (PART 2)
         LA    R7,32                   LOAD LEN OF TRAILER AND HEADER
         AR    R8,R7                   ADD TO LEN OF MESSAGE
         AR    R8,R3                   ADD LEN OF DATASET TO MSG LEN
         STH   R8,MSGOUT               STORE MESSAGE LEN
         BR    R10                     RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              E S T A I  R O U T I N E  F O R  C O M P I L E R       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ESTRTN1  EQU   *
         PUSH  USING                   SAVE MAIN LINE ADDRESSABLITY
         DROP  R12,R11,R13             DROP MAIN LINE'S ADDRESSABILITY
         USING ESTRTN1,R5              SET UP ADDRESSABLITY
         USING MAINAREA,R13            SET UP ADDRESSABLITY TO GETMAIN
         LR    R5,R15                  SAVE ENTRY POINT
         LA    R6,12                   GET R6 PREPARED FOR CHECK
         CR    R0,R6                   RETURN CODE 12 ?
         BE    NOSDWA1                 YES, NO SDWA PROVIDED
         L     R3,0(,R1)               LOAD POINTER TO ESTAI PARM
         L     R13,0(,R3)              PARM POINTS TO GETMAINED AREA
         MVC   SYSCODE(2),5(R1)        MOVE TO GET SYSTEM ABEND CODE
         MVC   USERCODE(2),6(R1)       MOVE TO GET USER ABEND CODE
         B     CHKCODE1                GO PUT OUT ERROR MSG
NOSDWA1  EQU   *
         L     R3,0(,R2)               LOAD POINTER TO ESTAI PARM
         L     R13,0(,R3)              PARM POINTS TO GETMAINED AREA
         ST    R1,WORK                 SAVE RETURN CODE
         MVC   SYSCODE(2),WORK+2       MOVE TO GET SYSTEM ABEND CODE
         MVC   USERCODE(2),WORK+2      MOVE TO GET USER ABEND CODE
CHKCODE1 EQU   *
         LA    R15,24                  PUT OUT MSG 6
         MVC   MSGHEAD(6),MSGHD        MOVE MESSAGE HEADER TO AREA
         L     R6,MSGTBL(R15)          LOAD ADDR OF ERROR MSG
         L     R7,MSGLTBL(R15)         LOAD LENGTH OF MESSAGE
         LA    R9,MSGBOD               POINT TO MESSAGE AREA
         LR    R8,R7
         BCTR  R8,0                    SUBTRACT ONE FROM LENGTH
         EX    R7,MOVEMSG               AND MOVE MESSAGE
         AR    R9,R7                   POINT TO END OF MESSAGE
         MVC   0(8,R9),MSGTR1          MOVE IN MESSAGE TRAILER (PART 1)
         MVC   8(7,R9),USERID          MOVE IN NAME FOR NOTIFY
         MVC   15(7,R9),MSGTR2         MOVE IN MESSAGE TRAILER (PART 2)
         LA    R8,32
         AR    R7,R8
         STH   R7,MSGOUT
         NI    SYSCODE+1,X'F0'         CLEAR LOW FOUR BITS
         CLC   SYSCODE(2),ZEROH        SYSTEM ABEND ZERO ?
         BE    CHKUSER1                YES, GO CHECK USER ABEND FIELD
         OI    SYSCODE+1,X'0F'         MAKE PACKED FIELD
         UNPK  ABNDCODE(3),SYSCODE(2)  ADD ZONE FIELD TO COND CODE
         TR    ABNDCODE(3),TRTAB1-FOXZERO TRANSLATE TO CHARCTERS
         MVI   MSGBOD+23,C'S'           MARK AS SYSTEM ABEND
         MVC   MSGBOD+24(3),ABNDCODE   MOVE ABEND CODE TO MSG
         B     SENDMSG1                GO PUT OUT ERROR
CHKUSER1 EQU   *
         NI    USERCODE,X'0F'          CLEAR HIGH FOUR BITS
         MVI   MSGBOD+23,C'U'           MARK AS USER ABEND
         LH    R6,USERCODE             LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+24(3),DBLEWORD+6(2) PREPARE FOR PRINT
         OI    MSGBOD+26,X'F0'         MAKE LAST BYTE PRINTABLE
SENDMSG1 EQU   *
         MVC   MSGBOD+28(8),NAME       MOVE PROGRAM NAME TO MSG
         NI    4(R1),X'7F'             TURN OFF DUMP BIT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         LA    R0,1                    TURN ON AUTHORIZATION BIT  USERA
         SVC   242                     AUTHORIZE                  USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LA    R1,MODE1                PREPARE FOR AUTHORIZATION
         MODESET MF=(E,(1))            AUTHORIZE TO SEND MESSAGE
         SLR   R0,R0                   CLEAR REG 0
         LA    R1,MSGOUT               LOAD ADDR OF MESSAGE
         SVC   34                      SEND MESSAGE
         LA    R1,MODE2                PREPARE FOR UNAUTHORIZATION
         MODESET MF=(E,(1))            TURN OFF AUTHORIZATION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         SLR   R0,R0                   TURN OFF AUTHORIZATION BIT USERA
         SVC   242                     UNAUTHORIZE                USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVI   MSGBOD+23,C'E'           MARK AS ESTAI ROUTINE ENTERED
         ST    R14,12(,R13)            SAVE RETURN ADDRESS
         LA    R15,0                   SET RETURN CODE FOR NO RETRY
         BR    14                      RETURN TO DUMPING ROUTINE
         POP   USING                   RETURN MAIN LINE ADDRESSABLITY
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              E S T A I  R O U T I N E  F O R  L I N K               *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ESTRTN2  EQU   *
         PUSH  USING                   SAVE MAIN LINE ADDRESSABLITY
         DROP  R12,R11,R13             DROP MAIN LINE'S ADDRESSABILITY
         USING ESTRTN2,R5              SET UP ADDRESSABLITY
         USING MAINAREA,R13            SET UP ADDRESSABLITY TO GETMAIN
         LR    R5,R15                  SAVE ENTRY POINT
         LA    R6,12                   GET R6 PREPARED FOR CHECK
         CR    R0,R6                   RETURN CODE 12 ?
         BE    NOSDWA2                 YES, NO SDWA PROVIDED
         L     R3,0(,R1)               LOAD POINTER TO ESTAI PARM
         L     R13,0(,R3)              PARM POINTS TO GETMAINED AREA
         MVC   SYSCODE(2),5(R1)        MOVE TO GET SYSTEM ABEND CODE
         MVC   USERCODE(2),6(R1)       MOVE TO GET USER ABEND CODE
         B     CHKCODE2                GO PUT OUT ERROR MSG
NOSDWA2  EQU   *
         L     R3,0(,R2)               LOAD POINTER TO ESTAI PARM
         L     R13,0(,R3)              PARM POINTS TO GETMAINED AREA
         ST    R1,WORK                 SAVE RETURN CODE
         MVC   SYSCODE(2),WORK+2       MOVE TO GET SYSTEM ABEND CODE
         MVC   USERCODE(2),WORK+2      MOVE TO GET USER ABEND CODE
CHKCODE2 EQU   *
         LA    R15,32                  PUT OUT MSG 8
         MVC   MSGHEAD(6),MSGHD        MOVE MESSAGE HEADER TO AREA
         L     R6,MSGTBL(R15)          LOAD ADDR OF ERROR MSG
         L     R7,MSGLTBL(R15)         LOAD LENGTH OF MESSAGE
         LA    R9,MSGBOD               POINT TO MESSAGE AREA
         LR    R8,R7
         BCTR  R8,0                    SUBTRACT ONE FROM LENGTH
         EX    R7,MOVEMSG               AND MOVE MESSAGE
         AR    R9,R7                   POINT TO END OF MESSAGE
         MVC   0(8,R9),MSGTR1          MOVE IN MESSAGE TRAILER (PART 1)
         MVC   8(7,R9),USERID          MOVE IN NAME FOR NOTIFY
         MVC   15(7,R9),MSGTR2         MOVE IN MESSAGE TRAILER (PART 2)
         LA    R8,32
         AR    R7,R8
         STH   R7,MSGOUT
         NI    SYSCODE+1,X'F0'         CLEAR LOW FOUR BITS
         CLC   SYSCODE(2),ZEROH        SYSTEM ABEND ZERO ?
         BE    CHKUSER2                YES, GO CHECK USER ABEND FIELD
         OI    SYSCODE+1,X'0F'         MAKE PACKED FIELD
         UNPK  ABNDCODE(3),SYSCODE(2)  ADD ZONE FIELD TO COND CODE
         TR    ABNDCODE(3),TRTAB1-FOXZERO TRANSLATE TO CHARCTERS
         MVI   MSGBOD+23,C'S'           MARK AS SYSTEM ABEND
         MVC   MSGBOD+24(3),ABNDCODE   MOVE ABEND CODE TO MSG
         B     SENDMSG2                GO PUT OUT ERROR
CHKUSER2 EQU   *
         NI    USERCODE,X'0F'          CLEAR HIGH FOUR BITS
         MVI   MSGBOD+23,C'U'           MARK AS USER ABEND
         LH    R6,USERCODE             LOAD RETURN CODE
         CVD   R6,DBLEWORD             CHANGE FROM BINARY TO DECIMAL
         UNPK  MSGBOD+24(3),DBLEWORD+8(2) PREPARE FOR PRINT
         OI    MSGBOD+26,X'F0'        MAKE LAST BYTE PRINTABLE
SENDMSG2 EQU   *
         MVC   MSGBOD+28(8),NAME       MOVE PROGRAM NAME TO MSG
         NI    4(R1),X'7F'             TURN OFF DUMP BIT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         LA    R0,1                    TURN ON AUTHORIZATION BIT  USERA
         SVC   242                     AUTHORIZE                  USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LA    R1,MODE1                PREPARE FOR AUTHORIZATION
         MODESET MF=(E,(1))            AUTHORIZE TO SEND MESSAGE
         SLR   R0,R0                   CLEAR REG 0
         LA    R1,MSGOUT               LOAD ADDR OF MESSAGE
         SVC   34                      SEND MESSAGE
         LA    R1,MODE2                PREPARE FOR UNAUTHORIZATION
         MODESET MF=(E,(1))            TURN OFF AUTHORIZATION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        USERA - CODE TO AUTHORIZE FOR TSO ISSUE USER SVC
         SLR   R0,R0                   TURN OFF AUTHORIZATION BIT USERA
         SVC   242                     UNAUTHORIZE                USERA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVI   MSGBOD+23,C'E'           MARK AS ESTAI ROUTINE ENTERED
         ST    R14,12(,R13)            SAVE RETURN ADDRESS
         LA    R15,0                   SET RETURN CODE FOR NO RETRY
         BR    14                      RETURN TO ABENDING ROUTINE
         POP   USING                   RETURN MAIN LINE ADDRESSABLITY
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              W O R K I N G  S T O R A G E                           *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
MSGHD    DC    CL6'SEND '''
MSGTR1   DC    CL8''',USER=('
MSGTR2   DC    CL7'),LOGON'
         SPACE 1
MSG0     DS    0H
         DC    CL16'FED0200 - ERROR '
         DC    CL1' '
         DC    CL34' IN COMPILER PROGRAM RETURN CODE: '
         DC    CL3' '
LMSG0    EQU   *-MSG0
         SPACE 1
MSG1     DS    0H
         DC    CL10'FED0201 - '
         DC    CL8' '
         DC    CL8' NOT IN '
LMSG1    EQU   *-MSG1
         SPACE 1
MSG2     DS    0H
         DC    CL37'FED0202 - NO CONTROL CARDS SUPPLIED '
LMSG2    EQU   *-MSG2
         SPACE 1
MSG3     DS    0H
         DC    CL14'FED0203 - NO '
         DC    CL8' '
         DC    CL13' DD SUPPLIED '
LMSG3    EQU   *-MSG3
         SPACE 1
MSG4     DS    0H
         DC    CL32'FED0204 - CONTROL CARDS INVALID '
LMSG4    EQU   *-MSG4
         SPACE 1
MSG5     DS    0H
         DC    CL37'FED0205 - INVALID COMPILER SPECIFIED '
LMSG5    EQU   *-MSG5
         SPACE 1
MSG6     DS    0H
         DC    CL23'FED0206 - RETURN CODE: '
         DC    CL1' '
         DC    CL3' '
         DC    CL1' '
         DC    CL8' '
         DC    CL23' HAS COMPILATION ERRORS'
LMSG6    EQU   *-MSG6
         SPACE 1
MSG7     DS    0H
         DC    CL23'FED0207 - RETURN CODE: '
         DC    CL1' '
         DC    CL3' '
         DC    CL1' '
         DC    CL8' '
         DC    CL21' COMPILATION COMPLETE'
LMSG7    EQU   *-MSG7
         SPACE 1
MSG8     DS    0H
         DC    CL23'FED0208 - RETURN CODE: '
         DC    CL1' '
         DC    CL3' '
         DC    CL1' '
         DC    CL8' '
         DC    CL26' HAS LINKAGE EDITOR ERRORS'
LMSG8    EQU   *-MSG8
         SPACE 1
MSG9     DS    0H
         DC    CL10'FED0209 - '
         DC    CL3'C: '
         DC    CL3' '
         DC    CL4' L: '
         DC    CL3' '
         DC    CL1' '
         DC    CL8' '
         DC    CL3' - '
LMSG9    EQU   *-MSG9
         SPACE 1
MSG10    DS    0H
         DC    CL10'FED0210 - '
         DC    CL3'L: '
         DC    CL3' '
         DC    CL1' '
         DC    CL8' '
         DC    CL3' - '
LMSG10   EQU   *-MSG10
         SPACE 1
MSG11    DS    0H
         DC    CL50'FED0211 - CONTROL CARDS INVALID NO TASKS REQUESTED'
LMSG11   EQU   *-MSG11
         SPACE 1
MSG12    DS    0H
         DC    CL19'FED0212 - NOT USED '
LMSG12   EQU   *-MSG12
         SPACE 1
MSG13    DS    0H
         DC    CL19'FED0213 - NOT USED '
LMSG13   EQU   *-MSG13
         SPACE 1
MSG14    DS    0H
         DC    CL19'FED0214 - NOT USED '
LMSG14   EQU   *-MSG14
         SPACE 1
MSG15    DS    0H
         DC    CL19'FED0215 - NOT USED '
LMSG15   EQU   *-MSG15
         SPACE 3
MSGTBL   DS    0F                      TABLE OF MESSAGE ADDRESSES
         DC    A(MSG0)
         DC    A(MSG1)
         DC    A(MSG2)
         DC    A(MSG3)
         DC    A(MSG4)
         DC    A(MSG5)
         DC    A(MSG6)
         DC    A(MSG7)
         DC    A(MSG8)
         DC    A(MSG9)
         DC    A(MSG10)
         DC    A(MSG11)
         DC    A(MSG12)
         DC    A(MSG13)
         DC    A(MSG14)
         DC    A(MSG15)
ENDTBL   DC    A(*-MSGTBL)
         SPACE 1
MSGLTBL  DS    0F                      TABLE OF MESSAGE ADDRESSES
         DC    A(LMSG0)
         DC    A(LMSG1)
         DC    A(LMSG2)
         DC    A(LMSG3)
         DC    A(LMSG4)
         DC    A(LMSG5)
         DC    A(LMSG6)
         DC    A(LMSG7)
         DC    A(LMSG8)
         DC    A(LMSG9)
         DC    A(LMSG10)
         DC    A(LMSG11)
         DC    A(LMSG12)
         DC    A(LMSG13)
         DC    A(LMSG14)
         DC    A(LMSG15)
         SPACE 3
COMPTBL  DS    0H                      ADDRESS OF COMPILERS
         DC    X'C8',AL3(IFEAAB)       'H' FOR FORTRAN H
         DC    X'C7',AL3(IGIFORT)      'G' FOR FORTRAN G
         DC    X'D7',AL3(IEL0AA)       'P' FOR PLI
         DC    X'C3',AL3(CPXUPTSM)     'C' FOR COBOL
         DC    X'C1',AL3(IEV90)        'A' FOR ASSEMBLER
LCOMPTBL EQU   *-COMPTBL
         SPACE 1
LINKTBL  DC    X'D3',AL3(IEWL)         'L' FOR LINKAGE EDITOR
         SPACE 1
COMPS    DS    0H                      COMPILERS FOR ATTACH
IEV90    DC    CL8'IEV90'              ASSEMBLER 'H'
CPXUPTSM DC    CL8'CPXUPTSM'           CAPEX COBOL OPTIMIZER
IGIFORT  DC    CL8'IGIFORT'            FORTRAN 'G'
IFEAAB   DC    CL8'IFEAAB'             FORTRAN 'H'
IEWL     DC    CL8'IEWL'               LINKAGE EDITOR
IEL0AA   DC    CL8'IEL0AA'             PLI OPTMIZER
         SPACE 3
PRMTBL   DS    0H                      TYPE OF PARMS
         DC    CL4'COMP',F'00'         COMPILER PARMS
         DC    CL4'LINK',F'00'         LINKAGE EDITOR PARMS
         DC    CL4'TYPE',F'00'         TYPE OF COMPILE
         DC    CL4'USER',F'00'         MESSAGE SENT TO OTHER
LPRMTBL  EQU   *-PRMTBL
         SPACE 3
LNKDD    DC    H'32'                   LINKAGE EDITOR DD PARM FIELD
         DC    CL8'SYSLIN2 '
         DC    4H'00'
         DC    4H'00'
         DC    CL8'SYSLIB2 '
LLNKDD   EQU   *-LNKDD
         SPACE 3
MAJOR    DC    CL8'SYSIEWLP' RESERVE FIELD NAMES
         SPACE 3
TRANTAB2 TRT   0(0,R3),TRTAB2
TRANTAB3 TRT   0(0,R3),TRTAB3
         SPACE 3
MOVEMSG  MVC   MSGBOD(0),0(R6)
PRTMSG   MVC   PRINTMSG+5(0),MSGBOD
MOVENAME MVC   0(0,R6),0(R3)
MOVEPARM MVC   0(0,R7),0(R3)
MOVESPF  MVC   0(0,R8),STOWSPF
MOVEUSER MVC   STOWUSER(0),BLDLUSER
         SPACE 3
ATTCH    ATTACH EPLOC=0,ECB=0,SF=L
LATTCH   EQU   *-ATTCH
         SPACE 1
CLL      CALL  ,(0,0),VL,MF=L
LCLL     EQU   *-CLL
         SPACE 1
DQ       DEQ   (MAJOR,0,44,SYSTEMS),UCB=0,MF=L
LDQ      EQU   *-DQ
         SPACE 1
CLSE     CLOSE (0),MF=L
         SPACE 1
EXTCT    EXTRACT 0,FIELDS=(TIOT),MF=L
LEXTCT   EQU   *-EXTCT
         SPACE 1
OPENCTL  OPEN  (0,(INPUT)),MF=L
OPENMOD  OPEN  (0,(UPDAT)),MF=L
OPENPRT  OPEN  (0,(OUTPUT)),MF=L
         SPACE 1
READ     RDJFCB (0),MF=L
         SPACE 1
RESERV   RESERVE (MAJOR,0,E,44,SYSTEMS),UCB=0,MF=L
LRESERV  EQU   *-RESERV
         SPACE 1
MODE1    MODESET KEY=ZERO,MF=L
MODE2    MODESET KEY=NZERO,MF=L
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              C O N S T A N T S                                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
ZEROF    DC    F'0'
ZEROH    DC    H'0'
TWO      DC    H'2'
FOUR     DC    H'4'
SEVEN    DC    H'7'
SIXTEEN  DC    H'16'
BLANKS   DC    CL8' '
         DS    0F
BLDLLEN  DC    X'0001004C'
EASYZERO DC    X'000000E0'
ONEFOX   DC    X'0000001F'
FOXZERO  EQU   C'0'
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              T R A N S L A T E  T A B L E S                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TRTAB1   DC    C'0123456789ABCDEF'
         SPACE 3
TRTAB2   DS    0D
         DC    256X'FF'
         ORG   TRTAB2+C' '
         DC    X'00'
         ORG
         SPACE 1
TRTAB3   DS    0D
         DC    256X'00'
         ORG   TRTAB3+C' '
         DC    X'FF'
         ORG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              D A T A  F I L E S                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
CONT     DCB   DSORG=PS,DDNAME=CONTROL,MACRF=GM,EODAD=ERR02,LRECL=80
LCONT    EQU   *-CONT
         EJECT
IN       DCB   DSORG=PS,DDNAME=SYSIN,MACRF=R
LIN      EQU   *-IN
         EJECT
LMOD     DCB   DSORG=PO,DDNAME=SYSLMOD,MACRF=R
LLMOD    EQU   *-LMOD
         EJECT
PRT      DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM
LPRT     EQU   *-PRT
         LTORG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              G E T M A I N  A R E A  D S E C T                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAINAREA DSECT
SAVEAREA DS    18F
         ORG   SAVEAREA
         DS    F
SAVEBK   DS    F
SAVEFW   DS    F
         DS    F
         DS    F
         DS    F
SAVER1   DS    F
         ORG
ATTACH   DS    XL(LATTCH)
CALL     DS    XL(LCLL)
CLOSE    DS    F
CODE     DS    F                       SAVE RETURN CODE AREA
DBLEWORD DS    D
DEQ      DS    XL(LDQ)
ECB1     DS    F                       ECB FOR ATTACH OF COMPILER
ECB2     DS    F                       ECB FOR ATTACH OF LINK EDITOR
ESTAPARM DS    F
EXTRACT  DS    XL(LEXTCT)
LMSG     DS    F
NAMEADDR DS    F
READ1    DS    F
READ2    DS    F
READ3    DS    F
READ4    DS    F
RESERVE  DS    XL(LRESERV)
RJFCBLST DS    F                       READ JFCB PARAMETER
TCB1     DS    F                       TCB FOR SUBTASK
WORK     DS    F                       TCB FOR SUBTASK
         SPACE 3
         DS    0F
LINKDD   DS    XL(LLNKDD)
         SPACE 3
USERCODE DS    CL2
SYSCODE  DS    CL2
ABNDCODE DS    CL3
USERID   DS    CL7
         SPACE 3
LIST     DS    0F                      BLDL PROGRAM LIST
LISTLEN  DS    F
NAME     DS    CL8                     PROGRAM NAME FROM JFCB
TTR      DS    CL3
         DS    CL2
BLDLTYPE DS    X
BLDLUSER DS    0CL62
BLDLVER  DS    X
BLDLMOD  DS    X
         DS    CL60
         SPACE 3
STOWLIST DS    0F
STOWMEM  DS    CL8
STOWTTR  DS    CL3
STOWTYPE DS    X
STOWUSER DS    CL62
         SPACE 1
STOWSPF  DS    0F
STOWVER  DS    X
STOWMOD  DS    X
         DS    H
STOWDAT1 DS    PL4
STOWDAT2 DS    PL4
STOWTIME DS    H
         DS    H
         DS    H
STOWCOMP DS    H
STOWID   DS    CL7
STOWBLNK DS    CL3
LSTOWSPF EQU   *-STOWSPF
         SPACE 3
COMP     DS    H                       COMPILER PARM FIELD
COMPPARM DS    CL100
         SPACE 1
LINK     DS    H                       LINKAGE EDITOR PARM FIELD
LINKPARM DS    CL100
         SPACE 1
TYPE     DS    H
COMPTYPE DS    CL1                     COMPILER TYPE
LINKTYPE DS    CL1                     L - LINKAGE EDITOR
         SPACE 1
USER     DS    H                       USERID PARM FIELD
USERPARM DS    CL8
         SPACE 3
JFCB     DS    CL176                   AREA FOR DATA SET INFO
MINOR    DS    CL44                    MINOR NAME FOR USE ON RESERVE
PRINTMSG DS    CL121
PARM     DS    CL80                    PARM FIELD ON CALL
MSGOUT   DS    H
MSGFIL   DS    H
MSGHEAD  DS    CL6
MSGBOD   DS    CL102
PARMAREA DS    0F
PARMTBL  DS    XL(LPRMTBL)
DCBAREA  DS    0D
CONTROL  DS    XL(LCONT)
SYSIN    DS    XL(LIN)
SYSLMOD  DS    XL(LLMOD)
SYSPRINT DS    XL(LPRT)
         SPACE 1
         END   COMPILER
