         TITLE 'JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT'
***********************************************************************
*                                                                     *
* MODULE NAME: HASPXS08                                               *
*                                                                     *
* DESCRIPTION: MAIN TASK JCT READ/WRITE EXIT                          *
*              IF FOUND PROCESS THEM                                  *
*                                                                     *
*                                                                     *
*  ENTRY POINT:                                                       *
*      HASPXS08                                                       *
*         CALLED FROM HASPNUC                                         *
*                                                                     *
*  PURPOSE:                                                           *
*      TO READ/WRITE PCT (PASSWORD CONTROL TABLE) WHEN JCT IO OCCURS  *
*                                                                     *
*  INPUT:                                                             *
*      R0  = CODE INDICATING WHETHER A JCT IS BEING READ OR WRITTEN   *
*                0 INDICATES JCT HAS BEEN READ FROM SPOOL             *
*                4 INDICATES JCT WILL BE WRITTEN TO SPOOL             *
*                4 INDICATES JCT IS ALREADY IN MAIN STORAGE           *
*      R1  = ADDRESS OF THE JCT                                       *
*      R11 = ADDRESS OF THE HCT                                       *
*      R13 = ADDRESS OF TE PCE                                        *
*      R14 = RETURN ADDRESS                                           *
*      R15 = ENTRY ADDRESS                                            *
*                                                                     *
*  OUTPUT:                                                            *
*      R0-R14 SAME AS ENTRY                                           *
*      R15   RETURN CODE                                              *
*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *
*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*
*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*
*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*
*            ATED WITH THIS EXIT, CONTINUE NORMAL PROCESSING.         *
*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *
*            THIS EXIT AND TO CONTINUE NORMAL PROCESSING.             *
*                                                                     *
***********************************************************************
         EJECT ,
         COPY  $HASPGBL            COPY HASP GLOBALS
HASPXS08 $MODULE NOTICE=NONE,ENVIRON=USER,                             C
               TITLE='JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT',       C
               ASCB,               GENERATE MVS ASCB DSECT             C
               DEB,                GENERATE MVS DEB DSECT              C
               PSA,                GENERATE MVS PSA DSECT              C
               SDWA,               GENERATE MVS SDWA DSECT             C
               $BUFFER,            GENERATE HASP BUFFER DSECT          C
               $CAT,               GENERATE HASP CAT DSECT             C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $HCT,               GENERATE HASP HCT DSECT             C
               $IOT,               GENERATE HASP IOT DSECT             C
               $JCT,               GENERATE HASP JCT DSECT             C
               $JQE,               GENERATE HASP JQE DSECT             C
               $MIT,               GENERATE HASP MIT DSECT             C
               $MITETBL,           GENERATE HASP MITETBL DSECT         C
               $PCE,               GENERATE HASP PCE DSECT             C
               $PDDB,              GENERATE HASP PDDB DSECT            C
               $SCAT,              GENERATE HASP SCAT DSECT            C
               $SJB,               GENERATE HASP SJB DSECT             C
               $SVT,               GENERATE HASP SSVT DSECT            C
               $TAB,               GENERATE HASP TAB DSECT             C
               $USERCBS,           GENERATE USER CONTROL BLOCKS        C
               $XECB               GENERATE HASP XECB DSECT
         PRINT ON,GEN,NODATA
         SPACE 2
***********************************************************************
*                                                                     *
*        ENTRY FOR JCT READ/WRITE                                     *
*                                                                     *
***********************************************************************
UEXIT8  $ENTRY CSECT=YES,BASE=R12    EXIT ROUTINE ENTRY POINT
         USING SSVT,R11            ADDRESS SSVT
         USING USAVE,R13           ADDRESS CALLER SAVE AREA
         STM   R14,R12,USAVER      SAVE CALLING REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LR    R3,R0               SAVE ENTRY CODE
         LR    R10,R1              SAVE JCT POINTER
         LA    R0,ULEN             GET DATA AREA LENGTH
         GETMAIN  RC,LV=(0),SP=230 GET STORAGE FOR WORKAREA
         LTR   R15,R15             TEST RETURN FROM GETMAIN
         BNZ   RET0                QUIT HERE IF NO STORAGE
         LR    R8,R1               SAVE WORKAREA ADDRESS
         ST    R8,UOURSAV          POINT CALLER SAVE TO OURS
         DROP  R13                 DROP OLD SAVEAREA ADDRESS
         USING USAVE,R8            ADDRESS OUR WORKAREA
         ST    R13,UCALLER
         IPK   0(0)            SAVE CURRENT ...
         STC   R2,USAVEKEY     ... PROTECTION KEY
         XC    USAVSJBA,USAVSJBA   CLEAR
         MVC   UESTAE(PESTAEL),PESTAE
         SPACE 2
         ESTAE PARAM=(R8),MF=(E,UESTAE) PROVIDE REC. ENVIRON.
         SPACE 2
         LA    R3,BRTBL(R3)    GET OFFSET INTO BRANCH TABLE
         BR    R3              BRANCH INTO BRANCH TABLE
         EJECT ,
***********************************************************************
*                                                                     *
*        BRANCH TABLE                                                 *
*                                                                     *
***********************************************************************
BRTBL    DS    0H
         B     JCTREAD         BRANCH TO JCT READ
         B     JCTWRITE        BRANCH TO JCT WRITE
         EJECT ,
***********************************************************************
*                                                                     *
*        TEST FOR PASSWORD CONTROL TABLE                              *
*                                                                     *
***********************************************************************
JCTREAD  DS    0H
         TM    JCTUSER0,JCTPW      PASSWORDS SUPPLIED IN JCL ?
         BNO   RET0C               NO, RETURN
         CLC   JCTUSER1,=A(0)      IS THERE A PCT ?
         BE    RET0C               NO, RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        FIND SJB                                                     *
*                                                                     *
***********************************************************************
         USING PSA,R0
         L     R1,PSAAOLD          CURRENT ASCB
         LH    R1,ASCBASID-ASCB(,R1) GET ASID
         LR    R0,R1               COPY ASID
         BCTR  R0,0                REDUCE BY ONE
         LTR   R0,R0               INSURE ASID GREATER THAN ONE
         BNP   RET0C               EXIT TO IGNORE ROUTINE
         CLC   PSAAOLD,$SVPOSTE+4  CHECK FOR HASP ASCB
         BNE   SFNDSJBA            DO NORMAL PICK UP IF NOT
         ICM   R0,15,$SVHASP       HASP STILL UP
         BNE   RET0C               EXIT TO IGNORE IF NOT
SFNDSJBA SLL   R1,2                GET ASID * 4 ( WORD/ASID )
         AL    R1,$SVHAVT          POINT TO VECTOR TABLE ENTRY
         L     R0,0(0,R1)          POINT TO SJB
SFNDSJBB LTR   R1,R0               COPY POINTER
         BZ    RET0C               RETURN TO IGNORE IF NO SJB
         L     R0,SJBSJB-SJBDSECT(,R1) POINT TO NEXT LOWER
         LTR   R0,R0               TEST FOR END
         BNZ   SFNDSJBB            LOOP IF NOT
         LR    R13,R1               POINT TO SJB
         USING SJBDSECT,R13
         ST    R13,USAVSJBA        SAVE SJB ADDRESS
         EJECT ,
***********************************************************************
*                                                                     *
*        GET BUFFER TO READ PCT INTO                                  *
*                                                                     *
***********************************************************************
         MVC   USAVESJB(18*4),SJBSAVE  COPY SJB SAVE AREA
         MODESET EXTKEY=ZERO,SAVEKEY=USAVEKEY,WORKREG=2
         CALL  HCBGM
         BNZ   RET0B
         EJECT ,
***********************************************************************
*                                                                     *
*        READ IN PASSWORD CONTROL TABLE                               *
*                                                                     *
***********************************************************************
         ST    R1,JCTUSER2       SAVE POINTER TO PASSWORD CONTROL TABLE
         L     R0,JCTUSER1       LOAD DISK ADDRESS OF PCT
         CALL  HCBRD             BRANCH TO READ PCT
         BNZ   FREEBUF           BRANCH TO FREE BUFFERS IF NOGO
         B     RET0B             BRANCH TO RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        FREE JES BUFFER                                              *
*                                                                     *
***********************************************************************
FREEBUF  DS    0H
         L     R1,JCTUSER2 LOAD ADDRESS OF BUFFER
         XC    JCTUSER2,JCTUSER2 CLEAR BUFFER ADDRESS
         NI    JCTUSER0,255-JCTPW CLEAR PASSWORD FLAG
         CALL  HCBFM             FREE BUFFER
         B     RET0B             BRANCH TO RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        JCT WRITE ROUTINE (NULL ROUTINE)                             *
*                                                                     *
***********************************************************************
JCTWRITE DS    0H
         B     RET0C           NO PROCESSING FOR JCT WRITE
         EJECT ,
***********************************************************************
*                                                                     *
*        RETURN                                                       *
*                                                                     *
***********************************************************************
RET0B    DS    0H
         MVC   SJBSAVE(18*4),USAVESJB  RESTORE SJB SAVE AREA
         DROP  R13
         MODESET KEYADDR=USAVEKEY,WORKREG=2
         SPACE ,
RET0C    DS    0H
         ESTAE 0                   TERMINATE ESTAE
         SPACE ,
RET0D    DS    0H
         L     R13,UCALLER         RESTORE CALLER'S SAVEAREA
         DROP  R8                  DROP OUR SAVE AREA
         USING USAVE,R13           USE  CALLER'S SAVE AREA
         LR    R1,R8               POINT TO AREA
         LA    R0,ULEN             GET LENGTH OF DATA AREA
         ICM   R0,B'1000',=AL1(230) SET SUBPOOL
         FREEMAIN R,LV=(0),A=(1)
         SPACE ,
RET0     DS    0H
         LA    R15,0           LOAD RETURN CODE 0
         L     R14,USAVER      RETURN
         LM    R0,R12,USAVER+8
         BR    R14
         DROP  R13
         EJECT ,
***********************************************************************
*                                                                     *
*        RETRY ROUTINE                                                *
*                                                                     *
***********************************************************************
         USING SJBDSECT,R13
         USING USAVE,R8
RETRY    DS    0H
         MODESET KEYADDR=USAVEKEY,WORKREG=2
         L     R13,USAVSJBA
         LTR   R13,R13
         BZ    RETRY2
         MVC   SJBSAVE(18*4),USAVESJB
RETRY2   DS    0H
         B     RET0D
         DROP  ,
         EJECT ,
***********************************************************************
*                                                                     *
*         ESTAE EXIT                                                  *
*                                                                     *
***********************************************************************
         USING SDWA,R1             PROVIDE SDWA ADDRESS.
         USING USAVE,R2            PROVIDE USAVE ADDRESS.
         USING UESTAER,R12         PROVIDE UESTAER ADDRESS.
UESTAER  DS    0H
         LR    R12,R15             TEST TO SEE...
         C     R0,=F'12'              IF SDWA OBTAINED...
         BNE   UESTA2              BRANCH IF YES
         XR    R15,R15             CLEAR REGISTER 15
         BR    R14                 RETURN TO CALLER
         SPACE ,
UESTA2   DS    0H
         L     R2,SDWAPARM         LOAD R2 WITH @ OF WORKAREA
         STM   R0,R15,UERRSAV      SAVE REGISTERS
         L     R0,RETRYAD          GET RETRY ADDRESS
         SETRP RC=4,RETADDR=(0),FRESDWA=YES,RETREGS=YES
         LM    R1,R14,UERRSAV+R1*4 RELOAD REGS
         LA    R15,4               SET RET CODE
         BR    R14                 RETURN
         SPACE 2
RETRYAD  DC    A(RETRY)            ADDRESS OF RETRY ROUTINE
         DROP  R1                  DROP ADDRESSIBILITY
         DROP  R2                  DROP ADDRESSIBILITY
         DROP  R12                 DROP ADDRESSIBILITY
         EJECT ,
***********************************************************************
*                                                                     *
*        CONSTANTS, EQUATES AND LITERALS                              *
*                                                                     *
***********************************************************************
PESTAE   ESTAE UESTAER,TERM=YES,MF=(L)
PESTAEL  EQU   *-PESTAE
         LTORG ,
        $MODEND
         EJECT ,
***********************************************************************
*                                                                     *
*        USER SAVE AREA DSECT                                         *
*                                                                     *
***********************************************************************
USAVE    DSECT
         DS    F
UCALLER  DS    F                   CALLER'S CALLER SAVE
UOURSAV  DS    F                   OUR SAVE
USAVER   DS    15F                 REGISTERS 14,15,0-12
USAVESJB DS    18F                 SJB REGISTERS
USAVSJBA DS    A                   SJB ADDRESS
UERRSAV  DS    18F                 ESTAE REGISTERS
UBUFFAD  DS    A                   ADDRESS OF BUFFER
USAVEKEY DS    X                   SAVE STORAGE KEY IN PSW
UESTAE   ESTAE UESTAER,TERM=YES,RECORD=YES,MF=(L)
ULEN     EQU   *-USAVE             LENGTH OF EXTENDED AREA
         SPACE 3
         END
