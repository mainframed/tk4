         TITLE 'M C S   EXIT  -    IEECVXIT  '
         PRINT  GEN
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM IS              AN MCS EXIT.  IT CAN *
*              MINIPULATE CONSOLE MESSAGES OR TRIGER AN EVENT BECAUSE *
*              OF A CONSOLE MESSAGE BEING ISSUED.                     *
*                                                                     *
*        ENTRY:  IEECVXIT, CALLED BY IEAVVWTO (LMOD IGC0003E).        *
*                 ORDER IEAVVWTO(P),IEAVMWTO,IGC0203E,IEECVXIT(P)     *
*                 ENTRY IEAVVWTO                                      *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  PARAMETER LIST IN REGISTER 1                         *
*                                                                     *
*            REGISTER 1 ---->  ------------------------------------   *
*                              × UCMMSTXT  × UCMROUTC  × UCMDESCD ×   *
*                              × 128 BYTES ×   4 BYTES ×  4 BYETS ×   *
*                              ------------------------------------   *
*                                                                     *
*            REGISTER 5 + X'74' ----> VPARMAD IN THE SVRB EXTENTION   *
*                    4 BYTES INTO THIS FIELD IS THE ECB FOR THE WTOR  *
*                                                                     *
*        NO SUBPROGRAM CALLS.                                         *
*                                                                     *
*           THIS ROUTINE HAS TWO INTERNAL SUBROUTINES:                *
*           IEECR2D2 IS A SUBROUTINE THAT OPERATES UNDER SRB MODE.    *
*           IRBROUT IS A SUBROUTINE THAT REQUESTS SVC 34 FUNCTIONS    *
*           UNDER AN IRB THAT BELONGS TO CONSOLE (COM/TASK).          *
*                                                                     *
*  NOTES ON MACRO IEEMSG                                              *
*                                                                     *
* IEEMSG - BUILD AN ENTRY FOR WTO MSG TABLE                           *
*                                                                     *
*         THE IEEMSG MACRO INSTRUCTION IS USED TO BUILD AN ENTRY      *
*         FOR THE WTO MSG TABLE USED TO MODIFY ROUTING AND DESC       *
*         CODES FOR WTO MESSAGES, ISSUE COMMANDS AND RESOND TO        *
*         WTOR'S.                                                     *
*                                                                     *
*         THE IEEMSG IS WRITTEN AS FOLLOWS:                           *
*                                                                     *
*          ____________________________________________________       *
*         ×                                                    ×      *
*         × SYMBOL × IEEMSG   × ID="WTOMSGID"                  ×      *
*         ×        ×          × /ROUTCDE=("ROUTE CODES")/      ×      *
*         ×        ×          × /DESC=("DESCRIPTOR CODES")/    ×      *
*         ×        ×          × /REPLY="REPLY" × CMD="CMD"/    ×      *
*          ____________________________________________________       *
*                                                                     *
*         SYMBOLS:                                                    *
*           SLASHES (/) ARE USED TO ENCLOSE OPTIONAL ELEMENTS         *
*           DOUBLE QUOTES (") ARE USED TO ENCLOSE ELEMENTS FOR WHICH  *
*           YOU CODE VALUES THAT YOU CHOSE                            *
*           OR SIGN (×) IS USED TO SEPARATE ALTERNATIVE ELEMENTS.     *
*                                                                     *
*         THE FOLLOWING DESCRIBES THE IEEMSG OPERANDS                 *
*           ID="WTOMSGID"                                             *
*             THE ID OPERAND SPECFIES THE WTO OR WTOR MESSAGES TO BE  *
*             ACTED UPON. THE LENGTH MUST BE GREATER THAN 2 AND LESS  *
*             THAN 125. THIS IS COMPARED TO THE BEGINNING OF EACH     *
*             WTO OR WTOR MESSAGE.                                    *
*                                                                     *
*           ROUTCDE=("ROUTE CODES")                                   *
*             THE ROUTCDE OPERAND SPECIFIES THE ROUTING CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           DESC=("DESCRIPTOR CODES")                                 *
*             THE DESC OPERAND SPECIFIES THE DESCRIPTOR CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           CMD="CMD"                                                 *
*             THE CMD OPERAND SPECIFIES THE COMMAND TO BE ISSUED.     *
*             THE LENGTH MUST BE LESS THAN 115 .                      *
*                                                                     *
*           REPLY="REPLY"                                             *
*             THE REPLY OPERAND SPECIFIES THE REPLY TO BE ISSUED FOR  *
*             WTOR'S.                                                 *
*             THE LENGTH MUST BE LESS THAN 115 .                      *
*                                                                     *
*                                                                     *
*         EXAMPLE 1                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 0 SO MESSAGE WILL    *
*           NOT APPEAR ON THE CONSOLE ONLY IN THE LOG.                *
*                                                                     *
*           IEEMSG ID=NDP00005,ROUTCDE=0                              *
*                                                                     *
*         EXAMPLE 2                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 2 AND THE DESC CODE  *
*           TO 4 SO THAT A NON-DEL MESSAGE WILL ROLL .                *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(2),DESC=(4)                    *
*                                                                     *
*         EXAMPLE 3                                                   *
*           OPERATION: CHANGE THE ROUTE CODES SO MESSAGE WILL APPEAR  *
*           ON ALL CONSOLES.                                          *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13, *
*                 14,15,16)                                           *
*                                                                     *
*         EXAMPLE 4                                                   *
*           OPERATION: ISSUE COMMAND 'S TSO' FOR MESSAGE IST020I.     *
*                                                                     *
*           IEEMSG ID=IST020I,CMD='S TSO'                             *
*                                                                     *
*         EXAMPLE 5                                                   *
*           OPERATION: ISSUE REPLY 'U' FOR MESSAGE IKT012D.           *
*                                                                     *
*           IEEMSG ID=IKT012D,REPLY='U'                               *
*                                                                     *
*                                                                     *
*        FILES:  NONE.                                                *
*                                                                     *
*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS AN MCS EXIT.   *
*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *
*                                                                     *
*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *
*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE ORIGINALLY*
*              REQUESTED.                                             *
*                                                                     *
*            . CHANGING DESCRIPTOR CODES ON MESSAGES INORDER TO CHANGE*
*              MESSAGES TO ROLLABLE/NON-ROLLABLE.                     *
*                                                                     *
*            . DELETEING MESSAGE COMPLETELY BY CHANGING THE ROUTING   *
*              CODE TO ZERO.                                          *
*                                                                     *
*            . TRIGERING AN ACTIVITY (IE. START A TASK) IF A SPECIFIC *
*              MESSAGE IS ISSUED.                                     *
*                                                                     *
*            . REPLY TO 'WTORS' AUTOMATICALLY                         *
*                                                                     *
*        MAINTENANCE HISTORY:                                         *
*                                                                     *
*         7/16/82 - INITIAL RELEASE IN RESPONSE TO H8219703           *
*         3/01/84 - REWORKED AT L. L. BEAN TO ADD PASSWORD SUPPORT    *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE  -   IEECVXIT     ( MCS EXIT )       REL 4.0  01 MARCH 84   *
*                                                                     *
*      THIS MCS EXIT IS BASED ON THE SOURCE FROM 'SYS1.SAMPLIB'       *
*      FROM THE IPO SYSTEM. THIS CODE CAME BY WAY OF FAIRCHILD        *
*      CAMERA CORPORATION THROUGH THE SHARE SPLA MVSMODS TAPE.        *
*                                                                     *
*      THAT IS WHERE THE SIMILIARITY ENDS. WE NOT ONLY WANT TO DO     *
*      THE CHANGING OF ROUTCDE'S, DESC CODES ETC, BUT ALSO WE         *
*      WANT TO DO SOME AUTOMATIC REPLIES. WHY WAKE UP THE OPER-       *
*      ATOR ???  SO FOR THINGS LIKE WHEN VTAM IS INITIALIZED,         *
*      THEN WE ALWAYS  ' S TSO '.  THUS  'R2D2' (ROUTINE IEECR2D2)    *
*      IS NOW ALIVE AND DOING GOOD THINGS. EVER GET AN OPERATOR       *
*      TO REPLY 'HOLD' TO THAT NASTY ALLOCATION MESSAGE AND MAKES     *
*      YOUR 4381 LOOK LIKE IT IS RUNNING OS/MVT ( Q4 IS LOCKED ).     *
*      SO THERE ARE ALL KINDS OF POSSIBILITIES. HOPEFULLY THE         *
*      DIRTY WORK IS DONE. GOOD LUCK ALL                              *
*                                                                     *
*     NOTE: MODULE IS REENTRANT AND SHOULD STAY THAT WAY              *
*                                                                     *
*     INSTALLED: 15 JUNE 1982                                         *
*                                                                     *
*     ----- IMPORTANT INSTALLATION NOTE -----  (JTS-CDC)              *
*                                                                     *
*     THERE ONCE WAS AN APAR DESCRIBING A DISTRIBUTION ERROR FOR      *
*     THE BASE MVS 3.7 SYSTEM.  APAR OZ45469 DESCRIBES IT.            *
*     MODULE IEECVXIT (DUMMY BR14 MCS EXIT) WAS DISTRIBUTED ON        *
*     SYS1.AOSC5 WITH THE LKED ATTRIBUTES OF 'NONE' INSTEAD OF        *
*     'RENT' AND 'REFR' AS IT SHOULD HAVE BEEN.  DURING STAGE 2       *
*     OF THE SYSGEN PROCESS, THIS MODULE ALONG WITH THREE OTHERS      *
*     (IEAVVWTO & IEAVMWTO ON AOSC5 AND IGC0203E ON AOSB3) WERE       *
*     INCLUDED TOGETHER TO PRODUCE MODULE IGC0003E ON LPALIB.         *
*     ALTHOUGH THE OTHER THREE MODULES WERE SHIPPED WITH 'RENT' AND   *
*     'REFR' AS THEY SHOULD HAVE BEEN, THE IEECVXIT MODULE ATTRIBUTE  *
*     OF 'NONE' CAUSE THE FINAL IGC0003E MODULE TO BE GENERATED AS    *
*     'NOT RENT' AND 'NOT REFR'.  IGC0003E RUNNING SERIAL MODE DOES   *
*     LITTLE FOR SYSTEM PERFORMANCE SINCE IT IS IN CONTROL FOR EVERY  *
*     CONSOLE MESSAGE ISSUED.  APAR OZ45469 WAS CLOSED AS 'SUGGESTED  *
*     SYSTEM IMPROVEMENT' AND EVENTUALLY, MVS 3.8 WAS SHIPPED         *
*     CORRECTLY, HOWEVER, THE IPO FOLKS MANAGED TO MAKE THE SAME      *
*     MISTAKE WITH IEECVXIT AND AS FAR AS WAS KNOWN BY TAMPA BAY      *
*     AS OF 5/27/82 (SEE PROBLEM 5X333), THE IPO ERROR HAD NOT BEEN   *
*     OFFICIALLY APARED, BUT LEVEL 2 INDICATED AWARENESS OF THE       *
*     ERROR AND PROMISED TO CORRECT THE DISTRIBUTED CODE ON FUTURE    *
*     SHIPS.  THE CIRCUMVENTION, OF COURSE, IS TO ZAP THE ATTRIBUTE   *
*     OF IEECVXIT ON AOSC5 AND IGC0003E ON LPALIB TO 'RENT' & 'REFR'. *
*     WE HAVE DONE THIS WITHOUT INCIDENT AT CDC.                      *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*    MACRO DEFINITIONS                                                *
*---------------------------------------------------------------------*
         MACRO
&LABEL   IEEMSG   &ID=,&ROUTCDE=,&DESC=,&REPLY=,&CMD=
         LCLC  &DCODE,&RCODE,&FLG,&CRD,&MSGID
         LCLA  &I,&N,&LID,&RCFLG,&DCFLG,&CMFLG,&RSFLG,&LCRD
         LCLA  &LENT
         LCLB  &CRDFLG
&DCODE   SETC  '0000000000000000'
&RCODE   SETC  '0000000000000000'
&FLG     SETC  '00000000'
&DCFLG   SETA  0
&RCFLG   SETA  1
&CMFLG   SETA  2
&RSFLG   SETA  3
&CRDFLG  SETB  0
.*
.* CHECK PARAMETERS
.*
.IDCHK1  AIF   (T'&ID NE 'O').IDCHK1A
         MNOTE 8,'* * * ERROR * * * ID NOT SPECIFIED'
         MEXIT
.IDCHK1A AIF   (K'&ID GE 3).IDCHK1B
         MNOTE 8,'* * * ERROR * * * ID LESS THAN 3 CHARACTERS'
         MEXIT
.IDCHK1B AIF   (K'&ID LE 125).IDCHK1C
         MNOTE 8,'* * * ERROR * * * ID GREATER THAN 125 CHARACTERS'
         MEXIT
.IDCHK1C AIF   (K'&REPLY LE 115).IDCHK1D
         MNOTE 8,'* * * ERROR * * * REPLY GREATER THAN 115 CHARACTERS'
         MEXIT
.IDCHK1D AIF   (K'&CMD LE 120).IDCHK2
         MNOTE 8,'* * * ERROR * * * CMD GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK2  AIF   (NOT(T'&REPLY NE 'O' AND T'&CMD NE 'O')).IDCHK99
         MNOTE 8,'* * * ERROR * * * CMD AND REPLY ARE MUTUALLY EXCLUSIVX
               E'
         MEXIT
.IDCHK99 ANOP
.*
.* DESCRIPTOR CODES
.*
.DCHK    AIF   (T'&DESC EQ 'O').RCHK
         AIF   (N'&DESC EQ 1 AND &DESC(1) EQ 0).DFLG
&I       SETA  1
.DLOOP   ANOP
&N       SETA  &DESC(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGND
         MNOTE 8,'&N IS INVALID DESCRIPTOR - IGNORED'
         AGO   .NXTD
.ASSIGND ANOP
&DCODE   SETC  '&DCODE'(1,&N-1).'1'.'&DCODE'(&N+1,16-&N)
.NXTD    AIF  (&I LE N'&DESC).DLOOP
.DFLG    ANOP
&FLG     SETC  '&FLG'(1,&DCFLG).'1'.'&FLG'(&DCFLG+2,8-&DCFLG+1)
.*
.* ROUTE CODES
.*
.RCHK    AIF   (T'&ROUTCDE EQ 'O').IDCHK
         AIF   (N'&ROUTCDE EQ 1 AND &ROUTCDE(1) EQ 0).RFLG
&I       SETA  1
.RLOOP   ANOP
&N       SETA  &ROUTCDE(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGNR
         MNOTE 8,'&N IS INVALID ROUTE - IGNORED'
         AGO   .NXTR
.ASSIGNR ANOP
&RCODE   SETC  '&RCODE'(1,&N-1).'1'.'&RCODE'(&N+1,16-&N)
.NXTR    AIF   (&I LE N'&ROUTCDE).RLOOP
.RFLG    ANOP
&FLG     SETC  '&FLG'(1,&RCFLG).'1'.'&FLG'(&RCFLG+2,8-&RCFLG+1)
.*
.* MESSAGE ID
.*
.IDCHK   ANOP
&MSGID   SETC  '&ID'
         AIF   ('&MSGID'(1,1) NE '''' OR '&MSGID'(K'&ID,1) NE '''').ID2
&MSGID   SETC  '&MSGID'(2,K'&MSGID-2)
.ID2     ANOP
&LID     SETA  K'&MSGID
.*
.* COMMAND
.*
.CMCHK   AIF   (T'&CMD EQ 'O').RSCHK
&CRD     SETC  '&CMD'
         AIF   ('&CRD'(1,1) NE '''' OR '&CRD'(K'&CMD,1) NE '''').CM2
&CRD     SETC  '&CRD'(2,K'&CRD-2)
.CM2     ANOP
&LCRD    SETA  K'&CRD
&FLG     SETC  '&FLG'(1,&CMFLG).'1'.'&FLG'(&CMFLG+2,8-&CMFLG+1)
&CRDFLG  SETB  1
.*
.* REPLY
.*
.RSCHK   AIF   (T'&REPLY EQ 'O').ASSIGNC
&CRD     SETC  '&REPLY'
         AIF   ('&CRD'(1,1) NE '''' OR '&CRD'(K'&REPLY,1) NE '''').RS2
&CRD     SETC  '&CRD'(2,K'&CRD-2)
.RS2     ANOP
&LCRD    SETA  K'&CRD
&FLG     SETC  '&FLG'(1,&RSFLG).'1'.'&FLG'(&RSFLG+2,8-&RSFLG+1)
&CRDFLG  SETB  1
.ASSIGNC ANOP
&LENT    SETA  4+2+2+1+1+&LID
         AIF   (NOT &CRDFLG).DCS
&LENT    SETA  &LENT+1+&LCRD
.DCS     ANOP
&LABEL   DS   0H
S&SYSNDX EQU  *
         DC   AL2(E&SYSNDX-S&SYSNDX)
         DC   BL2'&DCODE'
         DC   BL2'&RCODE'
         DC   BL1'&FLG'
         DC   AL1(&LID)
         DC   C'&MSGID'
         AIF  (NOT &CRDFLG).END
         DC   AL1(&LCRD)
         DC   C'&CRD'
.END     ANOP
E&SYSNDX DS   0H
         MEND
         EJECT ,
*---------------------------------------------------------------------*
*        START THE PROGRAM                                            *
*---------------------------------------------------------------------*
         SPACE ,
         TITLE 'M C S   EXIT  -    IEECVXIT  ( LOC ) -  MAIN ROUTINE'
IEECVXIT CSECT
         SAVE  (14,12),,IEECVXIT_&SYSDATE_&SYSTIME
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING IEECVXIT,R12,R11        REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         L     R2,0(,R1)               SET ADDR TO UCMEXIT DSECT
         USING UCMEXIT,R2              EST. ADDR TO UCMEXIT DSECT
         GETMAIN R,LV=WKAREAL,SP=250   GET CORE FROM SP=250
         LR    R10,R1                  SAVE THE ADDRESS
         USING WKAREA,R10              GET ADDRESSABILITY
         ST    R13,SAVE+4              CHAIN ...
         LA    R1,SAVE                    ...
         ST    R1,8(,R13)              ...  SAVEAREAS
         LR    R13,R1                  PUT SAVE AREA ADDRESS INTO R13
         EJECT ,
*---------------------------------------------------------------------*
*        TURN OFF ROUTE 14 REGARDLESS                                 *
*                                                                     *
*        THIS CODE IS USED SO ROUTE CODE 14 WILL APPEAR ONLY IN THE   *
*        LOG. IF THIS IS NOT DESIRED IT SHOULD BE DELETED             *
*---------------------------------------------------------------------*
         SPACE ,
         NC    UCMROUTC(2),=BL2'1111111111111011'
         EJECT ,
*---------------------------------------------------------------------*
*        SCAN TABLE                                                   *
*---------------------------------------------------------------------*
         SPACE ,
SCANTBL  DS    0H
         LM    R8,R9,TABLPRMS          POINT TO START & END OF TABLE
         USING MSGENT,R8               ADDRESS IT
SCANLP   DS    0H
         TM    ENTFLAG,DELEFLG         HAS ENTRY BEEN FLAG DELETED ?
         BO    SCANSKP                 YES, SKIP COMPARE
         SLR   R1,R1                   CLEAR FOR IC
         ICM   R1,B'0001',ENTLID       GET LENGTH OF MESSAGE ID
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,ENTCLC               COMPARE ID'S
         BE    GOTENT                  BRANCH IF MATCH
SCANSKP  DS    0H
         ICM   R1,B'0011',ENTLEN       GET LENGTH OF ENTRY
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         LA    R8,0(R1,R8)             POINT TO NEXT ENTRY
         CR    R8,R9                   REACHED END OF TABLE ?
         BL    SCANLP
         B     CHKPSWD                 NO MATCH SO CHECK FOR PASSWORD
         SPACE ,
ENTCLC   CLC   UCMMSTXT(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        CHECK FOR PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
CHKPSWD  DS    0H
         LA    R8,PSWDMSG              POINT TO PASSWORD MSG ENTRY
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,ENTLID               GET LENGTH OF MESSAGE ID
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,PSWCLC               COMPARE ID'S
         BE    DOPSWD                  BRANCH IF MATCH
         B     RETURN                  NOT FOUND
         SPACE ,
PSWCLC   CLC   UCMMSTXT(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        PROCESS   PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
DOPSWD   DS    0H
         LA    R0,UCMMSTXT+128-51      POINT TO END OF SCAN
         LA    R7,UCMMSTXT+10          POINT TO POSSIBLE DSN FIELD
         LA    R9,61                   LENGTH OF MESSAGE
DOPSWDLP DS    0H
         CLC   0(6,R7),=CL6'DSNAME'    LOOK FOR DSNAME IN MESSAGE
         BE    GOTDSN                  FOUND IT
         LA    R7,1(,R7)               BUMP POINTER
         LA    R9,1(,R9)               BUMP POINTER
         CR    R7,R0                   REACHED END OF SCAN ?
         BL    DOPSWDLP                NO, LOOP
         B     RETURN                  RETURN
         SPACE ,
GOTDSN   DS    0H
         MVC   DSN(44),7(R7)           MOVE DSN
         LA    R0,PSWDRPLY             POINT TO FIELD FOR PASSWORD
         LA    R1,DSN                  POINT TO DSN FIELD
         SVC   252                     ASK FOR PASSWORD
         LTR   R15,R15                 DID I GET ONE
         BNZ   RETURN                  NO, RETURN
         MVC   PSWDENT(PSWDMSGL),MSGENT MOVE ENTRY
         LA    R8,PSWDENT              POINT R8 TO NEW ENTRY
         STC   R9,ENTLID               SAVE MESSAGE LENGTH
         BCTR  R9,0                    LESS ONE FOR EX MVC
         EX    R9,MVCPWENT             MOVE MESSAGE
         LA    R9,1(,R9)               GET BACK LENGTH
         LA    R7,ENTID(R9)            POINT TO REPLY AREA
         MVI   0(R7),X'08'             MOVE IN REPLY LENGTH
         MVC   1(8,R7),PSWDRPLY        MOVE IN PASSWORD
         B     GOTENT                  PROCESS AS REGULAR ENTRY
         SPACE ,
MVCPWENT MVC   ENTID(*-*),UCMMSTXT
         EJECT ,
*---------------------------------------------------------------------*
*        GOT TABLE ENTRY NOW PROCESS IT                               *
*---------------------------------------------------------------------*
         SPACE ,
GOTENT   DS    0H
         SPACE ,
CHKDESC  DS    0H
         TM    ENTFLAG,DESCFLG         DO WE WANT TO SET DESC. CODE
         BNO   CHKROUT                 NO, BRANCH TO CHECK NEXT FLAG
         MVC   UCMDESCD(2),ENTDESC     MOVE IN DESC
         SPACE ,
CHKROUT  DS    0H
         TM    ENTFLAG,ROUTFLG         DO WE WANT TO SET ROUT. CODE
         BNO   CHKCMD                  NO, BRANCH TO CHECK NEXT FLAG
         MVC   UCMROUTC(2),ENTROUT     MOVE IN ROUTCDE
         SPACE ,
CHKCMD   DS    0H
         TM    ENTFLAG,(CMMDFLG+RESPFLG) DO WE WANT TO DO AN ATTACH?
         BZ    RETURN                  NO, BRANCH TO RETURN
         B     DOCMD                   YES, BRANCH TO PROCESS
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        ATTACH THE SUBTASK   ' IEECR2D2 ' .  THERE ARE MANY REASONS  *
*        YOU WANT TO ATTACH THE SUBTASK. YOU WANT THE AUTOMATIC       *
*        REPLIES DONE FOR YOU, BUT ALSO YOU WANT SOME COMMANDS        *
*        EXECUTED VIA  SVC 34. SO IF WE GO INTO IEECR2D2 AND          *
*        SPECIFY AN ENTRY CODE = 0, THEN WE WANT AN AUTOMATIC         *
*        REPLY. THE FOLLOWING IS A LIST OF THE ENTRY  CODES           *
*                                                                     *
*             (  R1  )          MEANING                               *
*                                                                     *
*                0      -     ISSUE AN AUTO REPLY                     *
*                4      -     ISSUE AN AUTO COMMAND                   *
*                                                                     *
*        ENTRY                                                        *
*                                                                     *
*        R2  - POINTS TO WTO IEECVXIT PARAMETER (UCMEXIT)             *
*        R8  - POINTS TO TABLE ENTRY            (MSGENT)              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         USING PSA,0
         USING UCMEXIT,R2              EST. ADDR TO UCMEXIT DSECT
         USING MSGENT,R8
DOCMD    DS    0H
         GETMAIN R,LV=PRAREAL,SP=245   GET CORE FROM SP=245
         LR    R9,R1                   LOAD ADDRESS INTO R9
         USING PRAREA,R9               ADDRESS IT
         MVI   FLAG1,X'00'             CLEAR FLAG 1
         MVI   FLAG2,X'00'             CLEAR FLAG 2
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,ENTLID
         LA    R1,ENTID(R1)            POINT TO CMD/REPLY TO BE ISSUED
         SLR   R3,R3                   CLEAR FOR IC
         IC    R3,0(,R1)               GET LENGTH OF CMD
         EX    R3,MVCCMD               MOVE IT
         IC    R3,ENTLID               GET LENGTH OF TEXT
         EX    R3,MVCTXT               MOVE IT
         TM    ENTFLAG,RESPFLG         ARE WE DOING A REPLY ?
         BNO   SETPRM                  NO, GO SET REST OF PARMS
         OI    FLAG1,REPLYFLG          YES, THEN SET FLAG
         DROP  R2
         EJECT ,
*---------------------------------------------------------------------*
*        GET OUR ASID AND COM TASK ASID
*---------------------------------------------------------------------*
         SPACE ,
SETPRM   DS    0H
         SPACE ,
ATTACH   DS    0H
         L     R2,CVTPTR               POINT TO CVT
         USING CVT,R2                  ADDRESS IT
         L     R1,CVTTCBP              GET POINTER
         L     R1,12(,R1)              ASCB ADDRESS
         L     R3,CVTCUCB              UCM  ADDRESS
         LH    R3,UCMCTID-UCM(,R3)     GET COM TASK ASID
         LTR   R3,R3                   IS THERE ONE ?
         BNP   SRBFREE                 NO, RETURN
         CH    R3,ASCBASID-ASCB(R1)    ARE WE COMING FROM COM TASK ?
         BE    SRBFREE                 YES, LEAVE
         MVC   $ASID,ASCBASID-ASCB(R1) SAVE ASID
         L     R1,CVTASVT              POINT TO A.S. VECTOR TAB
         USING ASVT,R1                 ADDRESS IT
         C     R3,ASVTMAXU             ARE WE OVER MAX ?
         BH    SRBFREE                 YES, RETURN
         SLL   R3,2                    ASID TIMES 4
         LA    R3,ASVTENTY-4(R3)       INDEX INTO VECTOR TAB
         TM    0(R3),ASVTAVAI          IS IT IN USE ?
         BO    SRBFREE                 NO, RETURN
         DROP  R1,R2
         L     R2,0(,R3)               GET ASCB POINTER
         LA    R2,0(,R2)               CLEAR TOP
         LTR   R2,R2                   IS THERE ONE ?
         BZ    SRBFREE                 NO, RETURN
         USING ASCB,R2                 ADDRESS IT
         EJECT ,
*---------------------------------------------------------------------*
*        SET UP SRB
*---------------------------------------------------------------------*
         LA    R3,SRBAREA              POINT TO SRB AREA
         USING SRBSECT,R3              ADDRESS IT
         XC    SRBAREA(SRBSIZE),SRBAREA  ZERO OUT OUR SRB
         MVC   SRBID,=CL4'SRB '        MOVE IN THE SRB IDENTIFER
         ST    R2,SRBASCB              COM TASK ASCB
         MVC   SRBPTCB,ASCBTNEW        FIRST READY TCB ADDRESS
         MVC   SRBPASID,ASCBASID       SAVE COM TASK ASID
         DROP  R2
         LA    R1,IEECR2D2             SRB ENTRY POINT
         ST    R1,SRBEP                SAVE IN SRB
         LA    R1,SRBCLEAN             SRB ABNORMAL TERMINATION ROUTINE
         ST    R1,SRBRMTR              SAVE IN SRB
         LA    R1,PRAREA               POINT TO PARAMTERS
         ST    R1,SRBPARM              SEND WORK AREA AS THE PARAMETER
         SPACE ,
*---------------------------------------------------------------------*
*        EVERYTHING IS READY SCHEDULE THE SRB
*---------------------------------------------------------------------*
         SCHEDULE SRB=SRB,SCOPE=LOCAL
         B     RETURN                  ALL DONE SRB IS SCHEDULED
         SPACE ,
MVCCMD   MVC   PRMCMD(*-*),0(R1)       EXECUTED
MVCTXT   MVC   PRMTXT(*-*),ENTLID      EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        SOMETHING ISN'T RIGHT SO WE'RE GOING TO FREE UP              *
*        OUR GOTTEN CORE FROM SP=245 AND BRANCH TO RETURN             *
*---------------------------------------------------------------------*
         SPACE ,
SRBFREE  DS    0H
         LR    R1,R9                   LOAD FREEMAIN ADDRESS
         FREEMAIN R,A=(1),LV=PRAREAL,SP=245 DO FREEMAIN
         B     RETURN                  RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *
*        OUR GOTTEN CORE FROM SP=250                                  *
*---------------------------------------------------------------------*
         SPACE ,
RETURN   DS    0H
         LR    R1,R10                  GET AREA ADDRESS
         L     R13,SAVE+4              RELOAD SAVE AREA ADDRESS
         FREEMAIN R,A=(1),LV=WKAREAL,SP=250 DO FREEMAIN
         LM    R14,R12,12(R13)         RELOAD REGISTERS
         SLR   R15,R15                 SET RETURN CODE
         BR    R14                     RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        SRB ERROR ROUTINE                                            *
*---------------------------------------------------------------------*
         SPACE ,
SRBCLEAN BR    R14                     SRB ERROR ROUTINE
         EJECT ,
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*        TABLE OF MESSAGE ID'S TO BE ACTED ON                         *
*---------------------------------------------------------------------*
         SPACE ,
TABLPRMS DC     A(MSGTABS),A(MSGTABE),A(TABLEND),A(0)
MSGTABS  DS     0H
         IEEMSG ID=IST020I,CMD='S TSO'
         IEEMSG ID=IEE362A,ROUTCDE=2,DESC=4  LET IT ROLL
         IEEMSG ID='DB *',ROUTCDE=1,DESC=11  MAKE IT NON-DELETABLE
         IEEMSG ID='IEC301A S JOB ROSGU',REPLY=' '
         IEEMSG ID='IEC301A S JOB ROSSP',REPLY=' '
         IEEMSG ID=IKT012D,REPLY='U'
MSGTABE  EQU    *
         DC     512X'0'
TABLEND  EQU    *
         SPACE ,
PSWDMSG  IEEMSG ID=IEC301A,REPLY='        '
PSWDMSGL EQU   *-PSWDMSG
         DROP  ,
         TITLE 'IEECR2D2 - AUTOMATIC REPLY SUBTASK OF IEECVXIT'
*---------------------------------------------------------------------*
*                                                                     *
*              I  E  E  C  R  2  D  2     ( R 2 D 2 )                 *
*                                                                     *
*      THIS SUBROUTINE IS RUN UNDER SRB MODE UNDER R2D2'S TCB.        *
*      IT WILL INVOKE A ROUTINE (IRBROUT) WHICH WILL PERFORM          *
*      AUTOMATIC REPLIES TO CERTAIN MSGS GIVEN TO THE OPERATOR        *
*      AND STARTED TASKS. YOU WILL SEE IN THE OPERATOR COMMANDS       *
*      I ISSUE, 'R2D2' APPEARS IN THE MSG BUT ONLY ON SYSLOG.         *
*      THAT IS TO KNOW IF YE OLE OPERATOR DECIDED TO DO IT OR         *
*      NOT; GENERALLY NOT.                                            *
*                                                                     *
*      THE STIMER IS NOTE WORTHY OF DISCUSSION. WHEN WE GO INTO       *
*      R2D2 WANTING A STARTED TASK, IT IS POSSIBLE FOR THE STARTED    *
*      TASK TO APPEAR ON THE CONSOLE LOGS AHEAD OF THE MSG THAT       *
*      CAUSED IT TO HAPPEN. THIS IS BECAUSE THE 'MCS' EXIT GETS       *
*      TO VIEW THE MSG BEFORE IT GETS ISSUED. SO TO KEEP OPS          *
*      MANAGERS FROM GETTING CONFUSED (HEAVEN FORBID), WE WAIT        *
*      FOR TWO SECONDS. IN THE CASE OF WTOR'S THE WAIT CAN BE         *
*      REPEATED UP TO 5 TIMES. THIS IS BECAUSE THE ORE (OPERATOR      *
*      REPLY ELEMENT) HAS NOT BEEN BUILT WHEN WE DETECT THE WTOR.     *
*      IF IT IS NOT FOUND AT THE END OF THAT TIME WE CAN ASSUME       *
*      THAT IT WAS DOM'D OR THE OPERATOR WAS DAMN FAST.               *
*                                                                     *
*      IF ANYONE HAS SUGGESTIONS OR FINDS BUGS, PLEASE CALL, THIS     *
*      CONCEPT HAS MANY, MANY POSSIBILITIES !!!!!!!!                  *
*                                                                     *
*                                 JIM MARSHALL, LT, USAF              *
*                                 AIR FORCE DATA SVCS CENTER          *
*                                 IBM OPERATING SYSTEMS SUPPORT BR    *
*                                 CMIS - ROOM 1C1037                  *
*                                 WASHINGTON D.C.  20330              *
*                                 (202) 695-1274/2478                 *
*                                                                     *
*                                 SRB AND IRB MODIFICATIONS           *
*                                 DONE BY:                            *
*                                                                     *
*                                 JERRY SAUNDERS                      *
*                                 LIBRARY OF CONGRESS                 *
*                                 WASHINGTON D.C. 20540               *
*                                 (202)  287-9026                     *
*                                                                     *
*                                 PASSED REPLY MODIFICATIONS          *
*                                 DONE BY:                            *
*                                                                     *
*                                 JAMES GIBSON                        *
*                                 L. L. BEAN INC.                     *
*                                 FREEPORT, MAINE 04033               *
*                                 (207)  865-2355                     *
*                                                                     *
*                                                                     *
*      THE VALUE IN REGISTER 1 POINTS TO THE PRAREA IN CSA            *
*      CREATED BY IEECVXIT.                                           *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
IEECR2D2 DS    0H
         BALR  R10,R0                  ESTABLISH BASE REGISTER
         USING *,R10                   USE IT
         LR    R7,R14                  SAVE SRB RETURN ADDRESS
         LR    R2,R1                   GET PARAMETER ADDRESS
         USING PRAREA,R2               USE IT
*---------------------------------------------------------------------*
*        THIS ROUTINE IS ENTERED FROM IEECVXIT ASYNCHRONOUSLY.  IT IS *
*        CALLED WHEN IEECVXIT NEEDS TO REPLY TO A WTOR OR ISSUE SOME  *
*        COMMAND.  THE SRB WILL NEED TO ISSUE SVC 34. INORDER TO DO   *
*        THAT WE WILL NEED TO RUN UNDER AN IRB.                       *
*                                                                     *
*        TO CREATE THE ASYNCHRONOUS ROUTINE ON BEHALF OF THE CALLER   *
*        WE GET THE LOCAL LOCK AND CALL THE STAGE ONE EXIT EFFECTOR   *
*        TO BUILD US AN 'IRB' AND AN 'IQE'.  WE WILL THEN INITIALIZE  *
*        THESE CONTROL BLOCKS AND CALL THE STAGE TWO EXIT EFFECTOR    *
*        WHO WILL SCHEDULE THE ROUTINE FOR DISPATCH.                  *
*---------------------------------------------------------------------*
         SPACE ,
*---------------------------------------------------------------------*
*        GET THE LOCAL LOCK                                           *
*---------------------------------------------------------------------*
$GETLOCK SETLOCK OBTAIN,TYPE=LOCAL,REGS=USE,MODE=UNCOND,               C
               RELATED=$FREELOCK
*---------------------------------------------------------------------*
*        BUILD THE 'IRB' AND 'IQE'                                    *
*---------------------------------------------------------------------*
         LA    R4,SRBAREA              POINT TO SRB
         L     R4,SRBPTCB-SRBSECT(,R4) GET TCB ADDRESS FOR CIRB
         CIRB  EP=IRBROUT,KEY=SUPR,MODE=PP,BRANCH=YES,SVAREA=YES,      C
               STAB=(DYN),RETIQE=NO,WKAREA=30
         LR    R3,R1                   ADDRESS OF IRB IN R3
         USING RBBASIC,R3
         L     R1,RBNEXAV              ADDRESS OF IQE IN R1
         USING IQESECT,R1
         ST    R3,IQEIRB               ADDRESS OF IRB IN IQEIRB
         ST    R2,IQEPARM              PARM LIST FOR USER
         ST    R4,IQETCB               ADDRESS OF TCB IN IQETCB
         LCR   R1,R1                   COMPLEMENT REGISTER R1
         L     R12,CVTPTR(,0)          CVTADDRESS
         USING CVT,R12
*---------------------------------------------------------------------*
*        CALL THE STAGE TWO EXIT EFFECTOR
*---------------------------------------------------------------------*
         L     R14,CVT0EF00            ADDR OF STAGE TWO EXIT EFFECTOR
         BALR  R14,R14                 GO SCHEDULE THE IQE
         DROP  R12
STAGE3   DS    0H
*---------------------------------------------------------------------*
*        FREE THE LOCKS AND RETURN TO POST
*---------------------------------------------------------------------*
$FRELOCK SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=$GETLOCK
         LR    R14,R7                  RESTORE REG 14.
         BR    R14                     RETURN TO DISPACHER
         DROP  ,
         EJECT ,
IRBROUT  SAVE  (14,12)                 SAVE CALLERS REGISTERS
         LR    R12,R15                 SETUP BASE REGISTER
         USING IRBROUT,R12             GET NEW BASE REGISTER
         LR    R10,R1                  SAVE ENTRY CODE
         USING PRAREA,R10              GET ADDRESSABILITY
         ST    R13,SAVE1+4             SETUP
         ST    R10,8(,R13)                 SAVEAREA
         LR    R13,R10                        CHAIN
         TM    FLAG1,REPLYFLG          TEST FOR REPLY
         BNO   COMMAND                 COMMAND IF ZERO
         B     REPLY                   REPLY IF NOT
         EJECT ,
*---------------------------------------------------------------------*
*        SOME AUTOMATIC REPLY IS NEEDED TO BE SERVICED. SO WE ARE     *
*        GOING TO RUN THE WQE CHAIN LOOKING FOR THE BEAST, DETER-     *
*        MINE WHAT WE ARE REPLYING TO, COPY THE REPLY TO AN AREA      *
*        OF GETMAINED CORE, MOVE IN THE REPLY NUMBER, AND ISSUE       *
*        SVC 34 TO DO IT.  NEAT !!!!!!!!!                             *
*---------------------------------------------------------------------*
         SPACE ,
REPLY    DS    0H
         LA    R9,5                    LOOP FIVE TIMES
FNDWQE   DS    0H
         STIMER WAIT,BINTVL=TWOSEC     WAIT FOR MCS TO CATCH UP
         L     R1,CVTPTR(,0)           GET UCM ADDRESS
         L     R4,CVTCUCB-CVT(,R1)
         LA    R7,PRMTXT               POINT TO WTO TEXT FROM IEECVXIT
         ICM   R4,B'1111',UCMRPYQ-UCMXECB(R4)  GET ORE CHAIN START
         BZ    $EXIT                   BRANCH IF NONE
         USING OREF,R4                 QRE QUEUE ENTRY ADDRESSING
         USING WQE,R5                  WTO QUEUE ENTRY ADDRESSING
         SPACE ,
WQELOOP1 L     R14,ORELKP              LOAD POINTER TO NEXT ORE
         TM    OREXC,OREBUFC           DOM ISSUED FOR ORE ?
         BO    WQENEXT1                YES, BRANCH
         CLC   $ASID,OREASID           ASID THE ONE WE WANT ?
         BNE   WQENEXT1                NO, BRANCH TO TRY NEXT ONE
         ICM   R5,B'1111',ORERWQE      LOAD WQE POINTER
         BZ    WQENEXT1                BRANCH IF NONE
         TM    WQEXA,WQESUSP           PROCESSING SUSPENDED ?
         BO    WQENEXT1                YES, BRANCH
         CLI   WMJMMLW,0               IS THIS A NORMAL WQE ?
         BNE   WQENEXT1                NO, SKIP TO TRY NEXT ONE
         L     R2,WQENBR               GET MESSAGE LENGTH
         LA    R2,0(,R2)               CLEAR TOP BYTE
         LTR   R2,R2                   ANY DATA ?
         BZ    WQENEXT1                NO, BRANCH
         LA    R1,4                    GET AMOUNT TO SUBTRACT
         SR    R2,R1                   SUB TO OFF LENGTH OF REPLY ID
         BNP   WQENEXT1                BRANCH IF NOTHING LEFT
         LA    R1,WQETXT+4             POINT TO START OF MESSAGE
         IC    R2,0(,R7)               GET LENGTH OF ENTRY TO COMPARE
         BCTR  R2,0                    SUB ONE FOR EXECUTE
         EX    R2,WTOCLC               COMPARE WTO MESSAGE
         BE    WTOFOUND                BRANCH IF MATCH
         B     WQENEXT1                GO TO NEXT WQE
         SPACE ,
WQENEXT1 LA    R4,0(,R14)              CLEAR TOP BYTE OF NEXT ORE ADDR
         LTR   R4,R4                   ANY MORE ORES ?
         BNZ   WQELOOP1                LOOP FOR ALL ORES
         BCT   R9,FNDWQE               DO IT 5 TIMES
         B     $EXIT
         SPACE 2
WTOFOUND DS    0H
         SLR   R5,R5                   CLEAR FOR ICM
         ICM   R5,B'0011',OREID        INSERT REPLY NUMBER
         B     ISSUE                   BRANCH TO ISSUE REPLY
         DROP  R4
         SPACE ,
WTOCLC   CLC   1(*-*,R7),0(R1)         EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        WE NOW HAVE REPLY ID AND CAN ISSUE REPLY                     *
*---------------------------------------------------------------------*
         SPACE ,
ISSUE    DS    0H
         LA    R2,WTOAREA              GET ADDRESS TO WTO AREA
         USING RPYDSECT,R2             USE IT
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,PRMCMD               GET LENGTH OF COMMAND
         BCTR  R1,0                    LESS ONE FOR EX
         EX    R1,$MVCRPLY             MOVE REPLY
         LA    R1,1(,R1)               GET BACK REAL LENGTH
         LR    R0,R1                   AND SAVE IN R0
         MVC   RPYDSECT(RPYHDRLN),RPLYWTO MOVE FIRST PART OF REPLY WTO
         STCM  R5,B'0011',RPYRPNUM     STORE REPLY ID NUMBER
         AH    R0,RPLYWTO              ADD LEN OF WTO TO LEN OF REPLY
         STH   R0,RPYLEN               STORE LENGTH
         LA    R1,RPYREPLY(R1)         POINT PAST REPLY
         MVC   0(RWTOLEN-RPYHDRLN,R1),RPLYWTO+RPYHDRLN MOVE REST
         LR    R1,R2                   POINT R1 TO REPLY WTO
         SR    R0,R0                   SHOW COMMAND ISSUE
         SVC   34                      ISSUE REPLY
         B     $EXIT                   BRANCH TO EXIT
         SPACE ,
$MVCRPLY MVC   RPYREPLY(*-*),PRMCMD+1  EXECUTED
         SPACE ,
RPLYWTO  WTO   'R XX,'''' R2D2',ROUTCDE=(1),DESC=(5),MF=L
RWTOLEN  EQU   *-RPLYWTO
         DROP  R2
         EJECT ,
*---------------------------------------------------------------------*
*        COME HERE TO ISSUE COMMAND                                   *
*---------------------------------------------------------------------*
         SPACE ,
COMMAND  EQU  *
         STIMER WAIT,BINTVL=TWOSEC     GIVE A LITTLE DELAY
         LA    R2,WTOAREA              POINT TO WTO AREA
         USING CMDDSECT,R2             USE IT
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,PRMCMD               GET LENGTH
         BCTR  R1,0                    LESS ONE FOR EX
         EX    R1,$MVCCMD              MOVE CMD
         LA    R1,1(,R1)               GET BACK REAL LENGTH
         LR    R0,R1                   AND SAVE IN R0
         MVC   CMDDSECT(CMDHDRLN),CMDWTO MOVE FIRST PARM OF WTO COMMAND
         AH    R0,CMDWTO               ADD LEN OF WTO TO LEN OF CMD
         STH   R0,CMDLEN               STORE LENGTH OF COMMAND WTO
         LA    R1,CMDCMD(R1)           POINT PAST CMD
         MVC   0(CWTOLEN-CMDHDRLN,R1),CMDWTO+CMDHDRLN MOVE REST OF WTO
         LR    R1,R2                   POINT R1 TO COMMAND WTO
         SR    R0,R0                   SHOW COMMAND
         SVC   34                      ISSUE COMMAND
         B     $EXIT                   BRANCH TO EXIT
         SPACE ,
$MVCCMD  MVC   WTOAREA+4(*-*),PRMCMD+1 EXECUTED
         SPACE ,
CMDWTO   WTO   ' R2D2',MF=L
CWTOLEN  EQU   *-CMDWTO
         DROP  R2
         EJECT ,
*---------------------------------------------------------------------*
*        RETURN                                                       *
*---------------------------------------------------------------------*
         SPACE ,
$EXIT    DS    0H
         LR    R1,R13                  GET ADDRESS OF PRAREA
         L     R13,SAVE1+4             ADDRESS OF PREVIOUS SAVE AREA
         FREEMAIN R,A=(1),LV=PRAREAL,SP=245 DO FREEMAIN
         LM    R14,R12,12(R13)         RESTORE THE REGISTERS
         LA    R15,0(0,0)              SET RC=0
         BR    R14                     RETURN TO THE DISPACHER
         SPACE ,
         DROP  ,
         EJECT ,
*---------------------------------------------------------------------*
*                CONSTANTS AND EQUATES                                *
*---------------------------------------------------------------------*
         SPACE ,
TWOSEC   DC    A(2*100)                2 SECOND DELAY
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
*---------------------------------------------------------------------*
*                LITERALS                                             *
*---------------------------------------------------------------------*
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*        PATCH AREA                                                   *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         TITLE 'DSECTS USED BY IEECVXIT'
*---------------------------------------------------------------------*
*                                                                     *
*        REPLY DSECT                                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
RPYDSECT DSECT
RPYLEN   DS    AL2                     LENGTH OF REPLY WTO
RPYMCS   DC    B'0000000000000000'     MCS FLAG
         DC    C'R '
RPYRPNUM DC    C'XX'                   REPLY ID NUMBER
         DC    C','''
RPYHDRLN EQU   *-RPYDSECT
RPYREPLY EQU   *                       REPLY GOES HERE
         DC    C''' R2D2'
RPYDESC  DC    B'0000000000000000'     DESC CODE
RPYROUT  DC    B'0000000000000000'     ROUTE CODE
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        COMMAND DSECT                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDDSECT DSECT
CMDLEN   DS    AL2                     LENGTH OF COMMAND WTO
CMDMCS   DC    B'0000000000000000'     MCS FLAGS
CMDHDRLN EQU   *-CMDDSECT
CMDCMD   EQU   *                       COMMAND GOES HERE
         DC    C' R2D2'
         EJECT ,
*---------------------------------------------------------------------*
*        MESSAGE TABLE ENTRY DSECT                                    *
*---------------------------------------------------------------------*
         SPACE ,
MSGENT   DSECT
ENTLEN   DS    H                       LENGTH OF THIS ENTRY
ENTDESC  DS    XL2                     DSEC CODE
ENTROUT  DS    XL2                     ROUTE CODE
ENTFLAG  DS    XL1                     FLAGS
DESCFLG  EQU   B'10000000'             DESC CODE SPECIFIED
ROUTFLG  EQU   B'01000000'             ROUTE CODE SPECIFIED
CMMDFLG  EQU   B'00100000'             COMMAND SPECIFED
RESPFLG  EQU   B'00010000'             REPLY SPECIFIED
DELEFLG  EQU   B'00001000'             ENTRY HAS BEEN FLAG DELETED
*        EQU   B'00000100'             UNUSED
*        EQU   B'00000010'             UNUSED
*        EQU   B'00000001'             UNUSED
ENTLID   DS    XL1                     MESSAGE LENGTH
ENTID    DS    CL127                   MESSAGE
         DS    XL1                     COMMAND LENGTH
         DS    CL127                   COMMAND
         EJECT ,
*---------------------------------------------------------------------*
*        IQE DSECT                                                    *
*---------------------------------------------------------------------*
         SPACE ,
IQESECT  DSECT
IQELNK   DS    A     . WORD REFERENCE FOR IQELNKA
         ORG   IQELNK
IQESTAT1 DS    XL1   . RESERVED
IQELNKA  DS    AL3   . ADDRESS OF NEXT IQE
IQEPARM  DS    A     . PARMS TO BE PASSED TO ASYN RTN
IQEIRB   DS    A     . WORD REFERENCE FOR IQEIRBA
         ORG   IQEIRB
IQEFLAGS DS    XL1   . FLAG FIELD
IQEPURGE EQU   X'80' . THIS IQE MUST NOT BE SCHEDULED
IQEIRBA  DS    AL3   . ADDR IRB TO BE SCHEDULED
IQETCB   DS    A     . WORD REFERENCE FOR IQETCBA
         ORG   IQETCB
IQESTAT2 DS    C     . RESERVED
IQETCBA  DS    AL3   . ADDR OF TCB ASSOCIATED WITH THIS IQE
IQEDCB   DS    A     . ADDR OF DCB
IQEOUTLM DS    A     . ADDR OF OUTPUT LIMIT
IQEEND   DS    C     . END OF IQE
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SYSTEM DSECTS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         PRINT OFF
         CVT   DSECT=YES
         IHAPSA
         IHASDWA
         IHASRB
         IKJTCB
         IHAASVT
         IHAASCB
         IHARB
         IKJTSB
         IEECUCM FORMAT=NEW,DSECT=YES
         IHAORE
         IHAWQE
         PRINT ON
         EJECT ,
*---------------------------------------------------------------------*
*        WORK AREA DSECT                                              *
*---------------------------------------------------------------------*
         SPACE ,
WKAREA   DSECT
SAVE     DS    18F                     SAVE AREA
DSN      DS    CL44                    FOR PASSWORD
PSWDENT  DS    CL(PSWDMSGL)
         DS    CL88                    ROOM TO EXPAND ENTRY
PSWDRPLY DS    CL8                     PASSWORD REPLY
WKAREAL  EQU   *-WKAREA
         EJECT ,
*---------------------------------------------------------------------*
*        R2D2 WORK AREA DSECT                                         *
*---------------------------------------------------------------------*
         SPACE ,
PRAREA   DSECT
SAVE1    DS    18F                     SAVE AREA
FLAG1    DS    X                       FLAGS
REPLYFLG EQU   B'10000000'             1 = COMMAND 0 = REPLY
*        EQU   B'01000000'             UNUSED
*        EQU   B'00100000'             UNUSED
*        EQU   B'00010000'             UNUSED
*        EQU   B'00001000'             UNUSED
*        EQU   B'00000100'             UNUSED
*        EQU   B'00000010'             UNUSED
*        EQU   B'00000001'             UNUSED
FLAG2    DS    X                       FLAGS UNUSED
*                                      0        ISSUE REPLY
*                                      NON ZERO ISSUE COMMAND
$ASID    DS    H                       ASID OF JOB THAT ISSUED WTO
SRBAREA  DS    CL(SRBSIZE)             SRB
PRMTXT   DS    CL128                   TEXT FROM IEECVXIT INPUT PARM
WTOAREA  EQU   PRMTXT                  ALSO USED FOR SVC 34
PRMCMD   DS    CL128                   CMD/REPLY TO BE ISSUED
PRAREAL  EQU   *-PRAREA                LENGTH
         EJECT ,
         END
