SPINOFF  TITLE 'SYSOUT - COPY AND REFORMAT UTILITY'           5-72/BKR'
         SPACE 2
* THIS PROGRAM CONVERTS FROM U×F×FB×V×VB×VBS , M×A×_ TO VBA
*   RIGHT BLANKS ARE SCANNED OFF
*     ASSUME MAX PRINT LINE IS 132
         MACRO
&LABEL   STARTN &ID,&SAVE=,&NAME=,&R=DEFAULT
         LCLA  &CNT,&RX,&CNTL,&INC,&REG
         LCLB  &SV,&DF,&DUP(16)
         LCLC  &IDC,&NOMEN,&NAM,&S(16),&AD(16),&JUMP,&RG
&CNTL    SETA  1
&RX      SETA  14
&SV      SETB  ('&SAVE' NE '')
&DF      SETB  ('&R' EQ 'DEFAULT')
         AIF   (&DF).SAVEOK   IF DEFAULT, SAVE ERR NOT POSSIBLE
         AIF   (&R(1) EQ 13 AND &SV).SVERR
.SAVEOK  ANOP
&JUMP    SETC  'STNO'.'&SYSNDX'
.*
.*     THIS SECTION DETERMINES WHAT SAVEAREA NAME TO USE
.*
         AIF   ('&NAME' EQ '').NONAME
&NOMEN   SETC  '&NAME'(1,8)
         AGO   .NAMESET
.NONAME  ANOP
&NOMEN   SETC  'SAVE'.'&SYSNDX'
.NAMESET ANOP
         AIF   (NOT &SV).NOSAV
&NOMEN   SETC  '&SAVE'
.NOSAV   ANOP
.*
.*     THIS SECTION SELECTS BASE REG WITH DEFAULT
.*
         AIF   (NOT &DF).NODEF
         AIF   (&SV).RG12
&RG      SETC  '13'
         AGO   .RGEND
.RG12    ANOP
&RG      SETC  '12'
         AGO   .RGEND
.NODEF   ANOP
&RG      SETC  '&R'
.RGEND   ANOP
&S(1)    SETC  '&RG'
         SPACE 1
         AIF   ('&R'(1,1) EQ '(').MULT
&LABEL   STM   14,12,12(13) SAVE CALLING PROGRAM REGISTERS
         AIF   (&DF AND &SV).A
         AIF   (&DF).BALR15          FOR DEFAULT
         AIF   (&R EQ 15 OR &R EQ 13).BALR15
         AIF   (&R NE 14).A
&RX      SETA  15
.A       ANOP
         BALR  &RG,0    LOAD BASE REGISTER
         USING *,&RG     SET UP ADDRESSIBILITY
         AGO   .ENTRY
.REF13   ANOP
&NAM     SETC  '&NOMEN'
&LABEL   STM   14,12,12(13) SAVE CALLING PROGRAM REGISTERS
.BALR15  BALR  15,0  LOAD REGISTER 15
         USING  *,15  SET UP ADDRESSIBILITY
.ENTRY   LR    &RX,13   TEMPORARILY SAVE REGISTER 13
.*
.*
.*  THIS SECTION BUILDS THE IDENTIFIER CONSTATT AND A BRANCH AROUND IT
.*
.IDCHK   AIF   ('&ID' EQ '').ADDCONS
         AIF   ('&ID'(1,1) EQ '*').IDNAME
&IDC     SETC  '&ID'(1,8)
         AGO   .IDJUMP
.IDCSECT ANOP
         AIF   ('&SYSECT' EQ '').CSCTERR
&IDC     SETC  '&SYSECT'
         AGO   .IDJUMP
.CSCTERR MNOTE *,'NAME FIELD BLANK AND CSECT NAME OMITTED'
         MNOTE *,'              SO IDENTIFIER (*) IS IGNORED'
         AGO   .ADDCONS
.IDNAME  ANOP
         AIF   ('&LABEL' EQ '').IDCSECT
&IDC     SETC  '&LABEL'(1,8)
.IDJUMP  LA    13,&NOMEN   LOAD REGISTER 13 WITH SAVE AREA ADDRESS
         B     &JUMP
         CNOP  0,4
         DC    CL8'&IDC'
         AGO   .IDJMP
.*
.*
.*    THIS SECTION BUILDS AN ADDRESS CONSTANT LIST WHEN MORE THAN ONE
.*       OF THE REGISTERS IS SPECIFIED.  IN ADDITION IT GENERATES A
.*       BRANCH SEQUENCE IF NOT ALREADY DONE (IN IDENTIFIER ROUTINE)
.*
.ADDCONS AIF   (&CNT LE &CNTL).BALJP
         AIF   ('&R'(1,1) NE '(').BALJP
         LA    13,&NOMEN   LOAD REGISTER 13 WITH SAVE AREA ADDRESS
         B     &JUMP
.IDJMP   ANOP
         AIF   ('&R'(1,1) NE '(').SKIPADS
         AIF   (&R(1) EQ 13).INCSET0
&INC     SETA  6
         AGO   .INCSET4
.INCSET0 ANOP
&INC     SETA  0
.INCSET4 ANOP
.*
.ADLOOP  AIF   (&CNT LE &CNTL).SKIPADS
&INC     SETA  &INC+4096
&CNTL    SETA  &CNTL+1
&AD(&CNTL) SETC 'AD'.'&R(&CNTL)'.'&SYSNDX'
&AD(&CNTL) DC  A(&NAM.+&INC)
         AGO   .ADLOOP
.*
.BALJP   AIF   (NOT &SV).BALJPA
         LA    13,&SAVE     LOAD SAVEAREA ADDRESS
         AGO   .SKIPADS
.BALJPA  CNOP  0,4
         BAL   13,&JUMP
.SKIPADS ANOP
.*
.*   THIS BUILDS SAVEAREA (COMMON TO ALL PATHS)
         AIF   (&SV).SKPSV
&NOMEN   DC    18F'0'  SAVE AREA
.SKPSV   ANOP
&JUMP    ST    &RX.,4(13)   SET UP CHAIN BACKWARD ADDRESS
         ST    13,8(&RX)     SET UP CHAIN FORWARD ADDRESS
.*
         AIF   ('&R'(1,1) EQ '(').LRLOOP
.*
         AIF   ('&RG' EQ '13').USE13
         AIF   (&DF AND &SV).XT
         AIF   (&R(1) NE 13).XT
.USE13   USING &NOMEN,13      ESTAB. BASE REG. 13 ADDRESSIBILITY
         DROP  15
         AGO   .XT
.*
.*
.* THIS LOOP GENERATES THE LOAD INSTRUCTIONS REQUIRED WHEN MORE
.*                      THAN ONE REGISTER IS SPECIFIED
.LRLOOP  AIF   (&CNT EQ 1).ENDLRS
         AIF   (&R(&CNT) EQ 13).R13ERR
         L      &R(&CNT),&AD(&CNT)   LOAD BASE REGISTER
&CNT     SETA  &CNT-1
         AGO   .LRLOOP
.*
.*
.*      THIS ROUTINE SETS VALUES FOR &S(1),&S(2),ETC. WHICH ARE USED
.*                TO GENERATE USING STATEMENTS INVOLVING MORE THAN ONE
.*                REGISTER.
.MULT    ANOP
&CNT     SETA  1
.LOOP    ANOP
         AIF   ('&R(&CNT)' EQ '').RETURN
         AIF   (T'&R(&CNT) NE 'N').ERRREG
&REG     SETA  &R(&CNT)+1
         AIF   (&REG GT 16).ERRREG
         AIF   (&DUP(&REG) EQ 1).DUPREG
&DUP(&REG) SETB 1
&S(&CNT) SETC  ','.'&R(&CNT)'
&CNT     SETA  &CNT+1
         AIF   (&CNT GT 16).NUMERR
         AGO   .LOOP
.RETURN  AIF   (&CNT EQ 1+N'&R).BALR
.*
.ERRREG  MNOTE 8,' **** INCORRECT REGISTER SPECIFICATION '
.XT      SPACE 1
         MEXIT
.*
.DUPREG  MNOTE 8,'**** DUPLICATE REGISTER SPECIFICATION'
         AGO   .XT
.*
.SVERR   MNOTE 8,'REG 13 INCORRECTLY USED WITH SAVE PARAMETER'
         AGO   .XT
.*
.NUMERR  MNOTE 4,' TOO MANY BASE REGISTERS SPECIFIED - 1ST 15 ARE USED'
&CNT     SETA  &CNT-1
.BALR    ANOP
&CNT     SETA  &CNT-1
         AIF   (&R(1) EQ 13).REF13
.*      THIS CHOOSES WHICH REGISTER TO SAVE REGISTER 13 IN
         AIF   (&R(1) NE 14).M8
&RX      SETA  15
.*
.*     THIS BUILDS A NAME FOR THE 1ST INST FOR USE IN THE ADDR CONST
.M8      AIF   ('&LABEL' NE '').OLDNAM
&NAM     SETC  'BASE'.'&SYSNDX'
         AGO   .NEWNAM
.OLDNAM  ANOP
&NAM     SETC  '&LABEL'(1,8)
.NEWNAM  ANOP
.*
&NAM     STM   14,12,12(13) SAVE CALLING PROGRAM REGISTERS
         BALR  &R(1),0
         USING        *&S(1).&S(2).&S(3).&S(4).&S(5).&S(6).&S(7).&S(8).X
               &S(9).&S(10).&S(11).&S(12).&S(13).&S(14).&S(15)
         AGO   .ENTRY
.*
.R13ERR  MNOTE 8,'REG 13 INCORRECTLY USED FOR OTHER THAN 1ST BASE REG.'
.*
.ENDLRS  AIF   (&R(1) NE 13).XT
.*
         DROP  15
         USING         &NOMEN&S(1).&S(2).&S(3).&S(4).&S(5).&S(6).&S(7).X
               &S(8).&S(9).&S(10).&S(11).&S(12).&S(13).&S(14).&S(15)
         SPACE 1
.*
         MEND
         EJECT
         DCMSREGS
         EJECT
SPINOFF  CSECT
         SPACE 2
         STARTN *                  SAVE AREA BASE ETC
***   OPEN
         XC    RECOUNT,RECOUNT     CLEAR OUT REC COUNT FIELD
         LTR   R1,R1               IF NO PARM
*        BZ    TESTPARM-6          USE ASSEMBLED VALUE
         B     TESTPARM-6          FORCE NOPARMS VALUE
         L     R4,0(,R1)           FIRST PARM
         LTR   R4,R4               IF ONLY PARM (EXEC PARM=)
         BNP   TESTPARM-6          USE ASSEMBLED PARM
         L     R6,4(R1)            GET DDNAME LIST
         MVC   HOLDDDS(26),0(R6)    INTO BUFFER
         TM    4(R1),X'80'         IF LAST
         BO    TESTPARM-6          USE OTHER INFO
         L     R5,12(,R1)           GET THIRD PARM
         L     R14,16(,R1)         ADDRESS OF FOURTH PARM
         MVC   PARMS,0(R14)        USE IT
         B     TESTPARM            GO TEST PARMS
         XC    PARMS,PARMS
TESTPARM DS    0H
         MVC   LIB(ENDLIB),LIBDUM
         MVC   IN(ENDIN),INDUM     DCB DATA
         OI    IN+(DCBOFLGS-IHADCB),X'08'   UNLIKE ATTRIBUTE CONCAT
         MVC   OUT(ENDOUT),OUTDUM  DCB DATA
         CLI   HOLDDDS+1,X'08'     IF NO FIRST
         BL    NODDS                GET OUT
         CLI   HOLDDDS+2,X'00'     IF DEFAULT
         BE    *+10                 BYPASS
         MVC   IN+DCBDDNAM-IHADCB(8),HOLDDDS+2 FIRST NAME
         CLI   HOLDDDS+1,X'10'     IF NO SECOND
         BL    NODDS                GET OUT
         CLI   HOLDDDS+10,X'00'    IF DEFAULT
         BE    *+10                 BYPASS
         MVC   OUT+DCBDDNAM-IHADCB(8),HOLDDDS+10 SECOND NAME
NODDS    DS    0H
         CLI   PARMS+1,X'2'        IS FIRST PARM A JFCB
         BE    TYPEJIN             YES, DOIT
         MVC   IN+(DCBEXLST+1-IHADCB)(3),=AL3(SPINXX)
         OI    SPINXX,X'80'       ONLY ENTRY
         OPEN  (IN,(INPUT))
         B     OUTPARM             PROCESS SECOND PARM
TYPEJIN  DS    0H
         CLI   PARMS,X'1'          IF SAME UCB
         BNE   NOPROBLM            NO PROBLEM
NOPROBLM DS    0H
         NI    SPINXX,X'7F'       NOT LAST FIELD
         LA    R1,SPINXX          GET DCB EXIT LIST
         STCM  R1,7,IN+(DCBEXLST+1-IHADCB)
         STCM  R4,7,INJFCB         PLACE ADDRESS OF JFCB IN LIST
         OI    52(R4),X'0F'        TURN ON DON'T PUT BACK BITS
         XC    72(8,R4),72(R4)     TURN OFF OPEN INDICATORS
         NI    87(R4),X'7F'
         OI    87(R4),X'BF'
         OPEN  (IN,(INPUT)),TYPE=J JFCB OPEN
OUTPARM  DS    0H
         CLI   PARMS+3,X'1'        IS OUTPUT FILE OPEN
         BE    PASTOPEN            YES, DON'T OPEN
         OI    SPINXX,X'80'       MAKE LAST ENTRY
         MVC   OUT+(DCBEXLST+1-IHADCB)(3),=AL3(SPINXX)
         OPEN  (OUT,(OUTPUT))
*        OI    SPINXX,X'80'       MAKE LAST ENTRY
*        MVC   LIB+(DCBEXLST+1-IHADCB)(3),=AL3(SPINXX)
         OPEN  (LIB,(OUTPUT))
         LA    R5,OUT              USE THIS DCB, NOT PARM
PASTOPEN DS    0H
         TM IN+(DCBOFLGS-IHADCB),X'10' IF NOT OPEN
         BZ    DONE               GET OUT
         CLI   IN+(DCBMACRF+1-IHADCB),X'50'  IF PUTMOVE
         BE    DONE           GET OUT
         MVI   BUFCC,C'1'          FIRST RECORD
         TM IN+(DCBRECFM-IHADCB),X'02'  ? MACH
         BZ    LOOP                 NO - SKIP FIRST REC PROCESSING
***   FIRST RECORD PROCESSING
         GET   IN                  FIRST RECORD
         TM    IN+(DCBOFLGS-IHADCB),X'10'  IF NOT OPEN, GET OUT
         BZ    DONE
         LR    R2,R1               ADDR OF RECORD
         CLI   0(R2),X'89'         PRINT AND SKIP TO ONE
         BNE   MOVE                NO - OK USE IT
LOOP     DS    0H
***   GET
         GET   IN                  GET NEXT RECORD
         TM    IN+(DCBOFLGS-IHADCB),X'10'  IF NOT OPEN, GET OUT
         BZ    DONE
         LR    R2,R1               INPUT RECORD ADDR
***   MOVE DATA
MOVE     DS    0H
         TM    IN+(DCBRECFM-IHADCB),X'80'  ? V
         BO    NOTV                NO
         LH    R3,0(R2)            V-FORM LENGTH
         SH    R3,=H'4'            DATA LENGTH
         LA    R2,4(R2)            STEP OVER V-FORM HEADER
NOTV     DS    0H
         TM    IN+(DCBRECFM-IHADCB),X'06'  ? M×A
         BNZ   MORA                YES
         MVC   BUFDATA,0(R2)
         B     ASA
MORA     DS    0H
         MVC   BUFDATA,1(R2)       SKIP CC
         TM IN+(DCBRECFM-IHADCB),X'04'      ? ASA
         BZ    MACH                NO
         MVC   BUFCC,0(R2)         MOVE CC
         B     ASA
MACH     DS    0H
         TM    0(R2),X'02'         SKIP ONLY ?
         BO    SKIP                YES
ASA      DS    0H
***   BLANK SCAN
         TM    IN+(DCBRECFM-IHADCB),X'80'  ? V
         BZ    *+8                 YES
         LH    R3,IN+(DCBLRECL-IHADCB)  INPUT LRECL
         TM    IN+(DCBRECFM-IHADCB),X'06' ? M×A
         BNZ   *+8                 YES - LENGTH IS OK
         LA    R3,1(R3)            WE SUPPLIED THE CC
         LA    R3,BUFFER-1+5(R3)   HEADER + ONE FOR BCT
BLANK    DS    0H
         BCTR  R3,0                NEXT
         CLI   0(R3),C' '          ? BLANK
         BE    BLANK               YES - TRY AGAIN
         S     R3,=A(BUFFER-1)     GET ABS LENGTH
         CH    R3,=H'6'            MIN SIZE
         BNL   *+8                 NO - FINE
SKIP     DS    0H
         LA    R3,6                YES - MAKE SIX
         STC   R3,BUFHEAD+1        LENGTH FOR OUTPUT
***   PUT
         PUT   LIB,BUFFER
         PUT   (R5),BUFFER          OUTPUT RECORD
         L     R1,RECOUNT     UPDATE REC COUNT
         AL    R1,=F'1'        USING FULL WORD
         ST    R1,RECOUNT
         MVI   BUFCC,C' '          ONE SPACE
         TM    IN+(DCBRECFM-IHADCB),X'06'  ? M×A
         BZ    LOOP                USE ONE SPACE
***   MOVE CC
         MVC   BUFCC,0(R2)         MACH CC
***   MAKE ASA
         TR    BUFCC,MACHCHAR      MACH TO ASA TABLE
***   LOOP FOR ALL RECORDS
         B     LOOP                GET NEXT
***   END OF INPUT
DONE     DS    0H
         CLOSE (IN)
         CLI   PARMS+3,X'1'        IF USING GIVEN OUT DCB
         BE    PCLOSE              DON'T CLOSE
         CLOSE (OUT)
         CLOSE (LIB)
PCLOSE   DS    0H
         SPACE 1
         SR    R15,R15
         L     R1,RECOUNT     GET RECORD COUNT
         LTR   R1,R1          IF ZERO
         BNZ   *+2*4
         LA    R15,4           RETURN CODE =4
         L     R13,4(R13)          OLD SAVE AREA
         RETURN (14,12),T,RC=(15)     EXIT TO CALLER
         SPACE 3
***   CONSTANTS
HOLDDDS  DS    H,CL24
RECOUNT  DC    F'0'
INDUM    DCB   DSORG=PS,MACRF=GL,DDNAME=PRINTIN,EODAD=DONE,SYNAD=DONE
ENDIN    EQU   *-INDUM
IN       DCB   DSORG=PS,MACRF=GL
         SPACE 1
OUTDUM   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSLIST,                       $
               RECFM=VBA,LRECL=137
ENDOUT   EQU   *-OUTDUM
LIBDUM   DCB   DSORG=PS,MACRF=PM,DDNAME=PDSLIST,                       $
               RECFM=VBA,LRECL=137
ENDLIB   EQU   *-LIBDUM
OUT      DCB   DSORG=PS,MACRF=PM
         SPACE 1
LIB      DCB   DSORG=PS,MACRF=PM
BUFFER   DS    0CL137              WORK AREA FOR ONE RECORD
BUFHEAD  DC    XL4'0'              V-FORM HEADER
BUFCC    DC    C' '                CC
BUFDATA  DC    CL132' '            DATA
PARMS    DS    F
SPINXX  DS    0F                  SPINXX EXIT LIST
         DC    X'85',VL3(SPINXTRA)      SPINXX ADDRESS
INEXIT   DS    0F                  DCB OPEN EXIT LIST
         DC    X'87'               LAST+JFCB
INJFCB   DS    AL3                 JFCB ADDRESS
MYTCB    DS    F
MYPK     DS    X
         SPACE 1
       DS      0D
MACHCHAR DS    0CL256
         DC    CL8' + +'
         DC    CL8' '
         DC    CL8' 0 0'
         DC    CL8' - -'
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' 1 1'
         DC    CL8' 2 2'
         DC    CL8' 3 3'
         DC    CL8' 4 4'
         DC    CL8' 5 5'
         DC    CL8' 6 6'
         DC    CL8' 7 7'
         DC    CL8' 8 8'
         DC    CL8' 9 9'
         DC    CL8' A A'
         DC    CL8' B B'
         DC    CL8' C C'
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         LTORG
NEWTIOT  DS    XL(24+100*28)
         DCBD  DSORG=PS,DEVD=DA
         END
