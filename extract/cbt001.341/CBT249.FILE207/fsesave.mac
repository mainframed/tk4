* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*    THIS ROUTINE IS LINKED FROM MAIN DRIVER "FSE" WHEN A SAVE
*    SUBCOMMAND IS ENTERED. EXPLANATION OF LOGIC FLOW FOLLOWES :
*  - UPON ENTRY INTO FSESAVE, A SCAN OF THE SUBCOMMAND BUFFER
*    IS DONE TO SEE WHETHER A DATA SET WAS ENTERED WITH THE "S"
*    OR "SAVE". IF THE DATA SET WAS NOT ENTERED, IT ASSUMES THE
*    SYSEDIT FILE IS TO BE WRITTEN BACK INTO THE ORIGINAL ONE
*    THAT WAS EDITED. FSESAVE WILL USE MANY ADDRESSES PASSED FROM
*    FSE TO RETRIEVE DATATYPE, FLAGS, DSNAMES ETC...
*  - IF A DATA SET WAS ENTERED, FSESAVE WILL SCAN IT FOR VALIDITY
*    ETC... AND ALSO MOVE MEMBER NAME FOR PDS"S INTO SAVE AREAS.
*  - WHEN ALL PERTINENT FIELDS ARE MOVED FROM "FSE" BUFFERS TO
*    FSESAVE BUFFERS, A CHECK IS MADE FOR EITHER OLD OR NEW STATUS
*  - FOR AN OLD DATA SET, A FORMAT 1 DSCB IS READ INTO STORAGE
*    TO VALIDATE DATA SET CHARACTERISTICS ETC...
*  - FOR A NEW DATA SET, (ACCORDING TO TYPE) A DATA SET WILL BE
*    ALLOCATEDWITH STANDARD CHARACTERISTICS.
*  - THE SYSEDIT FILE WILL BE WRITTEN TO THE ALLOCATED DATA SET
*    USING 1 OF 6 POSSIBLE DCB"S THAT ARE DEFINED.
*  - EACH TIME FSESAVE IS ENTERED, A COUNT OF DDNAMED IS INCREMENTED
*    TO ALLOW ONLY ONE USE OF A PARTICULAR DCB PER EDIT.
*    THIS IS USED IN CASE OF ABEND WHILE WRITING OUT..(B37,D37,E37)
*    HAVING THE STAE ROUTINE TAKING CONTROL AND LEAVING THE DCB OPEN
*    (CONTRARY TO DOCUMENTATION, CLOSING THE DCB AND REUSING IT,
*    RESULTED IN VARIOUS I/O ABENDS)
*    AT ENTRY POINT R3 CONTAINS THE ADDRESS OF THE PARMLIST :
*     DC A(TOPADD,LASTADD,ALLOCDSN,SAVEDSN,MEMBER,PSCB,SAVEFLAG,
*          ENDFLAG,SAVELREC,DATATYPE,PARMSAVE,FIXORVAR,CPPL,RESPONSE,
*          DDCOUNT)
*    R7 CONTAINS THE ADDRESS OF THE SUBCOMMAND BUFFER
*    R4 CONTAINS THE ADDRESS OF THE PARMSAVE FLAG (TO INDICATE
*    SUCCESFULL SAVE TO "FSE")
*
*
*    BRUNO LA LICATA        LVL 1.00      11 / 11 / 77
*    N.B.N.A.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
FSESAVE  CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                    AND SET
         USING FSESAVE,R12,R11              ADDRESSABILITY
         L   R11,=A(FSESAVE+4096)              FOR 8K
         BC  15,GETSAVE                SKIP LITERAL POOL
         LTORG
         DS  0H
GETSAVE  ST    R13,SAVE+4            SET UP CONVENTIONAL
         LA    R5,SAVE               SAVE AREA CHAINING
         ST    R5,8(R13)
         LR    R13,R5
         LR   R10,R3                 SAVE R3 ==> R10  MAIN PARM REG.
         ST   R10,SAVEPARM           SAVE IT
         LA   R7,1(R7)
         LR   R2,R7                  R2 ADD(SUBCOMMAND BUFFER)
         LA   R3,10                  MAX LENGTH TO SEE IF DSNAME
         LR   R9,R4                    WAS SPECIFIED.
         L    R1,48(R10)               LOAD R1 WITH C.P.P.L.
         LINK EP=FSEATTR               FREE ATTRLIST(FSEATTR) IF ALLOC.
         L    R1,48(R10)               LOAD R1 WITH C.P.P.L.
         LINK EP=FSEFREE               FREE DDNAMES ALLOCATED
         L    R4,56(R10)
         L    R4,0(R4)                 LOAD DDNAME COUNT
         CVD  R4,DOUBLE
         UNPK DDNAME+6(2),DOUBLE(8)    MOVE IT INTO DAIR FIELD
         OI   DDNAME+7,X'F0'
*
*
         MVC  CATINFO(256),=256C' '    HOUSEKEPING
         MVC  DSNAME(56),CATINFO
         MVC  SAVEDSN(55),CATINFO
         MVI  DATATYPE,X'00'
DSNLOOP  CLI  0(R2),C' '               THIS SECTION WILL TEST TO SEE
         BE   ADDBACK                    IF A DATA SET NAME WAS GIVEN
         LA   R2,1(R2)                   IN THE SAVE SUBCOMMAND.
         BCT  R3,DSNLOOP
         B    NODSNAME                 NO DSNAME FOUND
ADDBACK  LA   R3,5
LOOP1    CLI  0(R2),X'40'
         BNE FOUNDDSN                  DATA SET NAME SPECIFIED..
         LA   R2,1(R2)                 SKIP IF BLANK
         BCT  R3,LOOP1
         B    NODSNAME                NO DSNAME WAS FOUND....
*
*
FOUNDDSN MVC   DDNAME+8(16),=16C' '         CLEAR DAIR UNIT/VOL
         CLC   0(8,R2),=C'FSEABCDE'         IS IT SUBMIT-SAVE?
         BNE   SKIPSUB                      NO, SKIP INIT
         MVC   DDNAME+8(16),=C'3350    IMG038  ' SET UP DAIR
*
SKIPSUB  LA   R4,0                    R4 USED FOR DSNAME LENGTH
         LR   R5,R2                   SAVE DSNAME ADDRESS IN BUFFER
         LA   R3,56  MAX LENGTH (44 + 2 QUOTES + 8 FOR MEMBER)
LOOP2    CLI  0(R2),X'40'             CHECK FOR BLANK (END)
         BE   ENDDSN
         LA   R2,1(R2)                BUMP UP BUFFER ADD.
         LA   R4,1(R4)                BUMP UP LENGTH COUNT
         BCT  R3,LOOP2   GO SCAN AGAIN
         MVI  0(R9),B'00010000'        INVALID DSNAME SPECIFIED
         L    R10,52(R10)              MOVE MESSAGE
         MVC  0(41,R10),SAVEMSG4
         B    RETURN                   GOBACK TO FSE
SAVEMSG4 DC   C'INVALID DSNAME SPECIFIED - USE NEW DSNAME'
         DS   0H
ENDDSN   LR   R7,R4                    DSNAME LENGTH
         MVC  DSNAME(56),=56C' '
         BCTR R4,0                     READY FOR EX
         EX   R4,MOVEDSN               MOVE FROM BUFFER TO "DSNAME"
*
FIXDSN   CLI  DSNAME,C''''             CHECK FOR FULL QUALIFICATION
         BNE  PREFIXID                 NO, MUST BE USER DATA SET
         MVC  SAVEDSN(55),=55C' '      CLEAN "DSNAME"
         MVC  SAVEDSN(55),DSNAME+1     MOVE TO STRIP QUOTE
         LA   R2,SAVEDSN               BEGINNING ADD. FOR SEARH
         LA   R3,55                    OF ENDING QUOTE--MAX LENGTH
*
LOOP3    CLI  0(R2),C''''
         BE   FOUNDQUO                 FOUND IT...
         LA   R2,1(R2)                 BUMP UP ADDRESS
         BCT  R3,LOOP3                 GO SCAN AGAIN
         MVI 0(R9),B'00010000'
         L    R10,52(R10)
         MVC  0(41,R10),SAVEMSG4
         BC   15,RETURN
FOUNDQUO MVI 0(R2),X'40'               MAKE IT BLANK
         B   SKIPID                    GO TO SCAN KEYWORDS
*
* THIS SECTION WILL PREFIX THE DSNAME WITH THE USER"S
*  LOGON ID FOUND AT P.S.C.B. +0. LENGTH IS AT +7.
*
PREFIXID LA   R2,DSNAME
          LA   R3,SAVEDSN
         MVC  SAVEDSN(55),=55C' '      CLEAR IT FOR MOVE
         L    R4,20(R10)               POINT TO LOGON ID
         L    R4,0(R4)
         SR   R5,R5                    CLEAR TO LOAD ID LENGTH
         IC   R5,7(R4)                 INSERT LENGTH OF TSO ID.
         BCTR R5,0                     READY FOR EX
         EX   R5,MOVEID                MOVE ID TO SAVEDSN
         B    *+10                     SKIP EXECUTED MOVE
MOVEID   MVC  0(0,R3),0(4)             ---EXECUTED MOVE--
         DS   0H
         LA   R5,1(R5)                 ADD BACK TO LENGTH
         AR   R3,R5                    POINT TO "." SPOT
         MVI  0(R3),C'.'               MOVE IT IN
         LA   R3,1(R3)                 POINT TO NEXT LEVEL
*
*  THIS SECTION WILL MOVE THE READ-IN DSNAME APPENDED TO ID
*
         BCTR R7,0                     READY TO EX
         EX   R7,MOVEIN                MOVE REST OF DSNAME
         LA   R7,1(R7)                 ADD BACK TO LENGTH
*
*  HERE, THE SPECIFIED KEYWORDS WILL BE SCANNED AND FLAGS
*   IN "DATATYPE" WILL BE SET ACCORDINGLY.
*
SKIPID   EQU  *
MAINLOG  EQU  *
        DS  0H
         LA   R2,SAVEDSN               SCAN ADDRESS
         LA   R4,55
         LA   R6,0                     LENGTH COUNT
LOOP5    CLI  0(R2),C'('               CHECK FOR PDS
         BE   FOUNDPDS
         LA   R2,1(R2)                 BUMP 1
         LA   R6,1(R6)                 ADD 1 TO COUNT
         BCT  R4,LOOP5
* THIS MUST BE A SEQUENTIAL DATA SET
         MVC  DSNAME(55),SAVEDSN
         NI   DATATYPE,B'11111110'     MAKE SEQUNTIAL
         B    OKTYPE
FOUNDPDS OI   DATATYPE,X'01'           FLAG FOR PDS
         LA   R3,SAVEDSN               START ADDRESS
         SR   R2,R3                    LENGTH OF TRUE NAME
         MVC  DSNAME(56),=56C' '
         BCTR R2,0
         EX   R2,MOVETRUE
         B    *+10
MOVETRUE MVC  DSNAME(0),SAVEDSN          MOVE TRUE DSNAME-MEMBER
*
*
OKTYPE   EQU  *                          LOAD UP
         L    R2,48(R10)  CPPL ADD.         C.P.P.L.
         L    R3,4(R2)                           ADDRESSES
         ST   R3,DAPLUPT                                FROM
         L    R3,16(R2)
         ST   R3,DAPLECT                                    FSE
         L    R3,8(R2)
         ST   R3,DAPLPSCB
         XC   DAPLECB(4),DAPLECB
*
*
NEWDSN   TM   DATATYPE,X'01'        IS IT PDS REQUIRED?
         BNO  NOTPDS
         BAL  R6,PDSRTN             DO ALLOCATION FOR PDS
         BC   15,GETMAIN            GO TO MAIN LINE RTN
*
*
*  THIS ROUTINE DOES THE ALLOCATION FOR A NEW AND OLD MEMBER
*   OF AN EXISTING P.D.S.
*
*
PDSRTN   LOCATE CAT                 MAKE SURE DSN IS CATALOGED
         LTR  R15,R15
         BZ   PDSOK                 OK, CATALOGED
PDSNOTOK MVI  0(R9),X'08'
         L    R10,52(R10)
         MVC  0(44,R10),SAVEMSG5
         BC   15,RETURN
SAVEMSG5 DC   C'SPECIFIED PDS NOT CATALOGED - USE NEW DSNAME'
         DS   0H
PDSOK    EQU  *
*
*  THIS NEXT SECTION RETRIEVES THE MEMBER NAME FROM
*   FIELD SAVEDSN, TO BE USED IN THE DAIR BLOCK.
         LA   R5,SAVEDSN
         LA   R2,SAVEDSN
         LA   R3,55            SEARCH COUNT MAX.
LOOP9    CLI  0(R2),C'('       CHECK FOR PARENTHESIS
         BNE  SKIPLOAD
         LR   R5,R2
SKIPLOAD CLI  0(R2),C')'       CHECK FOR END
         BE   GETMEMBE
         LA   R2,1(R2)         BUMP ADDRESS UP 1
         BCT  R3,LOOP9
*
GETMEMBE SR   R2,R5            GET MEMBER LENGTH+1
         BCTR R2,0             TRUE LENGTH
         CH   R2,=H'8'         VALID LENGTH??
         BNH  LENGTHOK
         MVI  0(R9),X'10'
         L    R10,52(R10)
         MVC  0(41,R10),SAVEMSG4
         B    RETURN
*
LENGTHOK LA   R5,1(R5)         POINT TO MEMBER NAME
         BCTR R2,0
         EX   R2,MOVEMEMB
         B    *+10
MOVEMEMB MVC  MEMBER(0),0(R5)  ---EXECUTED MVC--
         LA    R7,NEWMEMBE
         ST    R7,DAPLDAPB
         MVC   NEWMEMBE+2(6),=6X'00'         INITIALIZA
         MVC   DA08BLK(4),=4X'00'                DYNAMIC
         MVC   DA08PQTY(4),=4X'00'                  ALLOCATION
         MVC   DA08SQTY(4),=4X'00'                     PARAMETERS
         MVC   DA08DQTY(4),=4X'00'                   FOR
         MVC   DAIRFLAG(3),=X'080808'                    AN OLD
         MVI   DA08CTL,X'00'                                DATA SET
         MVC   DA08CTL+1(3),=3X'00'
         MVI   DA08CTL+4,X'40'
         MVC   LIST(8),=8C' '
DYNPDS   LA   R1,DAPL                      LOAD PRIMARY DAIR BLOCK
         LINK EP=IKJDAIR                   LINK TO ALLOCATION RTN.
DAIRCHEK LTR  R15,R15                      OK RETURN?
         BZR  R6                           YES,BRANCH TO CALLING RTN
         MVI  0(R9),X'80'                  NO ALLOCATION...
         L    R10,52(R10)                  ADD(RESPONSE FIELD)
         MVC  0(41,R10),SAVEMSG1           MOVE MESSAGE
         BC   15,RETURN                    GO BACK TO FSE
*
SAVEMSG1 DC   C'DYNAMIC ALLOCATION ERROR - USE NEW DSNAME'
         DS   0H
*
NOTPDS   EQU  *
         MVI NEWFLAG,X'01'             NEW DEFAULT
         LOCATE CAT                   MAKE SURE DATA SET DOES"NT EXIST
         LTR  R15,R15                 CHECK RETURN FROM LOCATE
         BNZ  OKNEW                   NOT CATALOGED...
        MVI  NEWFLAG,X'00'            CATALOGED, MOVE TO FLAG
         B    OLDDSN                  GO PROCESS AN OLD DATA SET
NEFLAG   DS   X
         DS 0H
OKNEW    EQU  *
*
*  FOR NEW PHY. SEQ. DATA SET, AN ATTRIBUTE LIST CONTAINING
*   THE LRECL, BLKSIZE, RECFM HAS TO BE CREATED. THESE VALUES
*   WILL BE DEPENDENT ON THE DATA SET TYPE...(CLIST TYPES
*   ARE  VBS 255 X 1680  VARIABLE BLOCKED.... THE REST ARE
*   80  X 4080 FIXED BLOCKED)
*  THE ATTRIBUTE LIST IS LATER USED TO ALLOCATE THE DATA SET
*  DEFAULTING TO SYSGENED SPACE VALUES AND DISP=(NEW,CATLG,CATLG)
*
         LA    R7,ATTRLIST            ADDRESS OF DAIR BLOCK
         ST    R7,DAPLDAPB            STORE IT
         LA   R1,DAPL                 LOAD PRIMARY DAIR BLOCK
         L    R2,36(R10)
CHECK2   TM   0(R2),B'00000100'    CHECK FOR CLIST TYPE
         BNO  SKIPCLIS                NOT CLIST
CLISTTYP LA   R5,255                  BUFFER SIZE AND LRECL
         STH  R5,LRECL                MOVE IT
*        STH  R5,BUFFLEN              MOVE IT
         MVC  BLKSIZE(2),=H'1680'     MOVE DEFAULT BLKSIZE
         MVI  FIXORVAR,X'01'
         MVI  RECFM,B'01010000'       MOVE DEFAULT VB RECFM
         B    DAIRATTR               SKIP OTHER DEFAULTS
SKIPCLIS MVC  LRECL(2),=H'80'        LRECL DEFAULT
*        MVC  BUFFLEN(2),=H'80'      BUFFER SIZE
         MVC  BLKSIZE(2),=H'4080'    BLKSIZE DEFAULT
         MVI  RECFM,B'10010000'      RECFM=FB DEFAULT
DAIRATTR LINK EP=IKJDAIR             LINK TO ALLOCATE DCB
         LTR  R15,R15                GOOD CODE?
         BZ   DSNALLOC               YES, GO ALLOCATE DATA SET
         MVI  0(R9),X'80'            NO, GO TPUT THE CODE
         L    R10,52(R10)
         MVC  0(41,R10),SAVEMSG1
         B    RETURN
DSNALLOC LA   R7,NEWMEMBE           SET UP APPROPRIATE DAIR BLK.
         ST   R7,DAPLDAPB
         MVI DAIRFLAG,B'00000100'       * *  * * * * * * * * * * * *
         MVI DAIRFLAG+1,B'00000010'     *                          *
         MVI DAIRFLAG+2,B'00000000'     *  INITIALIZE DAIR CONTROL *
         MVI DA08CTL,B'10010010'        *  BLOCKS FOR ALLOCATION   *
         MVC NEWMEMBE+2(6),=6X'00'      *  OF NEW DATA SET.        *
         MVC DA08BLK(4),=4X'00'         *                          *
         MVC DA08DQTY(4),=4X'00'        *                          *
         MVC MEMBER(8),=8C' '           *                          *
         MVC  LIST(8),=C'FSEATTR '      * * * * * * * * * * * * * *
         L    R2,4(R10)
         L    R2,0(R2)                  SAVE FIELD "SAVELREC" FROM
         L    R3,32(R10)                FSE INTO FSESAVE.
         LH   R3,0(R3)
         STH  R3,SAVELREC               THIS ROUTINE  WILL CALCULATE
         AR   R2,R3                       THE AMOUNT OF SPACE IN
         MH   R3,=H'50'                   TRACKS NEEDED TO SAVE THE
         AR   R2,R3                       SYSEDIT FILE.
         L    R3,0(R10)                   MINIMUM IS 4 TRACKS, AND
         L    R3,0(R3)                    FOR ANY GREATER SPACE NEEDS
         SR   R2,R3                       EACH 6K OF STORAGE USES 1
LOOKR2   EQU  *                           TRACK TO ALLOW OVERHEAD.
         LR   R3,R2
         XR   R2,R2
         C    R3,=F'6000'               LESS THAN 6K?
         BNH  TRACKS2                   YES, ALLOCATE 4 TRACKS.
*
         D    R2,=F'6000'               DIVIDE TOTAL STORAGE
         LA   R3,3(R3)                     USED IN SYSEDIT BY 6000
         ST   R3,DA08PQTY                  TO CALCULATE THE NUMBER
         ST   R3,DA08SQTY                  OF TRACKS NEEDED FOR
         B    SKIPDEF                      SAVE FUNCTION.
TRACKS2  LA   R3,4
         ST   R3,DA08PQTY               STORE QUANTITY INTO
         ST   R3,DA08SQTY                  DAIR BLOCK
SKIPDEF  EQU  *
         LA  R1,DAPL                    LOAD ADD. OF PRIMARY BLOCK
         LINK EP=IKJDAIR                CALL ALLOCATION RTN.
         LTR  R15,R15                   CHECK RETURN CODE
         BZ   WRITEFIL                  OK, WRITE SYSEDIT TO DISK.
         MVI  0(R9),X'80'               NO GOOD...
        L    R10,52(R10)                MOVE MESSAGE TO RESPONSE
        MVC  0(41,R10),SAVEMSG1             FIELD AND
        B    RETURN                               GO BACK TO FSE.
*  THIS SECTION IS USED TO ALLOCATE AN OLD DATA SET
*
OLDDSN   EQU  *
OLDPS    EQU  *
OKOLDPS  MVI  DA08CTL,B'00000000'       * * * * * * * * * * * * * *
         MVC  NEWMEMBE+2(6),=6X'00'     *
         MVC  DA08BLK(4),=4X'00'        * THIS SECTION INITIALIZES
         MVC  DA08PQTY(4),=4X'00'       *
         MVC  DA08SQTY(4),=4X'00'       * D.A.I.R. BLOCKS FOR
         MVC  DA08DQTY(4),=4X'00'       *
         MVC  MEMBER(8),=8C' '          * ALLOCATION OF AN OLD
         MVC  DAIRFLAG(3),=X'080808'    *
         MVC  LIST(8),=8C' '            * PHY. SEQ. DATA SET
         LA    R7,NEWMEMBE              *
         ST    R7,DAPLDAPB              *
BEFORE   LA   R1,DAPL                   * * * * * * * * * * * * * * *
         LINK EP=IKJDAIR
AFTER    LTR  R15,R15                   GOOD RETURN CODE?
         BZ   GETMAIN                   YES, GO WRITE SYSEDIT
         MVI  0(R9),X'80'               NO, MOVE MESSAGE
         L   R10,52(R10)                   TO RESPONSE FIELD
         MVC 0(41,R10),SAVEMSG1                 AND RETURN TO FSE
         B   RETURN
GETMAIN  EQU  *
         MVC  VOLSER(6),CATINFO+6   MOVE SER. # FOR OBTAIN
         OBTAIN VTOC                READ DSCB TYPE 1
CODE15   LTR  R15,R15               DATA SET THERE??
         BZ   TEST1
         B    PDSNOTOK
*
*  THIS SECTION WILL VALIDATE THE CHARACTERISTICS OF THE
*  DATA SET AND DOUBLE CHECK WITH THE SPECIFIED DATA.
*
TEST1    LA   R6,VTOCINFO           INDEX TO DSCB INFO
WHATYPE  TM   DATATYPE,X'01'        PDS?
         BNO  TEST2
         CLC  38(2,R6),=X'0200'      TEST FOR TRUE PDS
         BE   MAINFSE
         MVI  0(R9),X'08'
         L    R10,52(R10)
         MVC  0(44,R10),SAVEMSG5
         B    RETURN
TEST2    CLC  38(2,R6),=X'2000'       DSORG=DA??
         BNE  TEST3
BADDS    MVI  0(R9),X'04'
         L    R10,52(R10)
         MVC  0(45,R10),SAVEMSG7
         B    RETURN
SAVEMSG7 DC   C'INVALID RECFM/DSORG OR LRECL - USE NEW DSNAME'
         DS   0H
TEST3    CLC  38(2,R6),=X'8000'       DSORG=IS??
         BNE  TEST4
         B    BADDS
TEST4    TM   DATATYPE,X'01'           HERE MAKE SURE SPECIFIED
         BO   MAINFSE                  AS PS AND TRUE DSORG IS PS
         CLC  38(2,R6),=X'4000'        PS?
         BE   MAINFSE
         B    PDSNOTOK
         DS   0H
*
MAINFSE  EQU  *
         CLI  VTOCINFO+40,X'C0'          U RECFM??
         BNE  OKRECFM
         B    BADDS
FIXORVAR DS   X
         DS   0H
*
OKRECFM  CLI VTOCINFO+40,X'80'          F?
         BNE FORMAT1
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT1  CLI VTOCINFO+40,X'90'          FB?
         BNE FORMAT2
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT2  CLI VTOCINFO+40,X'40'             V?
         BNE FORMAT3
         MVI FIXORVAR,X'01'
         B   WRITEFIL
FORMAT3  CLI VTOCINFO+40,X'50'             VB?
         BNE FORMAT4
         MVI FIXORVAR,X'01'
         B   WRITEFIL
FORMAT4  CLI VTOCINFO+40,X'54'             VBA?
         BNE FORMAT5
         MVI FIXORVAR,X'01'
         B   WRITEFIL
FORMAT5  CLI VTOCINFO+40,X'84'             FA?
         BNE FORMAT6
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT6  CLI VTOCINFO+40,X'94'             FBA?
         BNE FORMAT7
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT7  CLI VTOCINFO+40,X'82'             FM?
         BNE FORMAT8
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT8  CLI VTOCINFO+40,X'92'             FBM?
         BNE FORMAT9
         MVI FIXORVAR,X'00'
         B   WRITEFIL
FORMAT9  CLI VTOCINFO+40,X'98'             FBS?
         BNE FORMAT0
         MVI FIXORVAR,X'00'
         B   WRITEFIL
* FORMAT IS THEREFORE SOMETHING WEIRD...BYE BYE
FORMAT0  B   BADDS
WRITEFIL EQU *
*
GOODOLD  EQU  *
         CLI  NEWFLAG,X'01'
         BE   OPENDCB
         L    R2,44(R10)
         CLC  FIXORVAR(1),0(R2)     CHECK TYPES
         BE   CHECKLRE
         B    BADDS
CHECKLRE L    R2,32(R10)
         MVC  SAVELREC(2),0(R2)
         CLC  VTOCINFO+44(2),0(R2)    LRECLS THE SAME?
         BE   OPENDCB                 GO WRITE IT OUT
         B    BADDS
NODSNAME L    R2,36(R10)              * * * * * * * * * * * * * * * *
         TM   0(R2),X'01'             *
         BNO  NOPDS1                  *    THIS ROUTINE IS BRANCHED
         MVI  DATATYPE,X'01'          *
         B    SKIPPS                  *    WHENEVER A SAVE WAS DONE
NOPDS1   MVI  DATATYPE,X'00'          *
SKIPPS   L    R2,8(R10)               *    WITH NO DATA SET NAME
         LA   R2,2(R2)                *
         MVC  DSNAME(56),0(R2)        *    SPECIFIED.
         L    R2,12(R10)              *
         MVC  SAVEDSN(55),0(R2)       *    THE ORIGINAL DSNAME IS
         L    R2,36(R10)              *
         TM   0(R2),X'01'             *    MOVED FROM FSE BUFFERS
         BO   OKTYPE                  *
         TM   0(R2),X'80'             *    AND NEW/OLD PS/PDS FLAGS
         BNO  OLDONE                  *
         MVI  NEWFLAG,X'01'           *    FLAGS ARE INITIALIZED.
         B    OKTYPE                  *
OLDONE   MVI  NEWFLAG,X'00'           *
         B    OKTYPE                  *
*                                     * * * * * * * * * * * * * * * *
*
OPENDCB  EQU  *
*        STAE 0
*        STAE ABEND,PURGE=NONE
         B    DOWORK
ABEND    EQU  *   ,WAS STAE 0
         L    R2,TCBADD
         L    R2,17(R2)
         CLC  0(3,R2),=X'B37000'
         BNE  NOTB37
         MVI  0(R9),X'40'
         B    RETURN
NOTB37   CLC  0(3,R2),=X'D37000'
         BNE  NOTD37
         MVI  0(R9),X'40'
         B    RETURN
NOTD37   CLC  0(3,R2),=X'E37000'
         BNE  NOSPACE
         MVI  0(R9),X'40'
         B    RETURN
NOSPACE  MVI  0(R9),X'20'
         B    RETURN
         DS   0F
SAVEPARM  DS   F
          DS   0H
RETURN   L   R10,SAVEPARM
         L    R1,48(R10)
         LINK EP=FSEFREE
         L    R1,48(R10)
         LINK EP=FSEATTR
         L    R13,4(R13)
         LM   14,12,12(R13)
         XR   R15,R15
         BR   R14
*
*
DOWORK   L    R2,16                        SAVE TCB ADDRESS
         L    R2,0(R2)                         OF THIS LOGON.
         L    R2,4(R2)
         ST   R2,TCBADD
         B    SKIPTCB
TCBADD   DS   F
         DS   0H
SKIPTCB  EQU  *
*
         L   R4,56(R10)                       LOAD ADDRESS(DD COUNT)
         L   R3,0(R4)                         LOAD DDNAME COUNT
         CLI  NEWFLAG,X'01'                     TO BE USED IN INDEXING
         BNE  SETOLD                            TO PICK UP NEW DCB.
WHICHDCB EQU  *
         LA   R7,6
         LA   R8,MOVE1
         LA   R6,DCB1                         THIS LOOP WILL USE
DCBLOOP  XR   R4,R4                              THE VALUE IN REG. R3
         IC   R4,0(R6)                           TO GET ADDRESS OF
         CR   R4,R3                              A DCB TO BE USED
         BNE  TRYPLUS1                           IN OPENING FILE.
         ICM  R4,15,0(R6)
         BALR R14,R8
         BC   15,DCBOPEN
TRYPLUS1 LA   R6,4(R6)                        ADD FOR NEXT 4 BYTES
         BCT  R7,DCBLOOP
         ABEND 999                            BAD NEWS...NO DCB????
SETOLD   LA   R7,6
         LA   R6,DCB1
         LA   R8,MOVE2
         B    DCBLOOP
*
*
DCBOPEN  L    R4,56(R10)                 LOAD ADD(DD COUNT)
         L    R3,0(R4)                   LOAD DD COUNT
         C    R3,=F'6'                   MAX REACHED?
         BE   BACKTO1                    YES, GO SET IT BACK
         LA   R3,1(R3)                   NO, BUMP UP BY 1
         B    *+8
BACKTO1  LA   R3,1                       SET IT BACK TO 1
         ST   R3,0(R4)                      AND STORE IT FSE BUFF.
         L    R3,0(R10)                  GET TOPADD
         L    R3,0(R3)
         L    R4,4(R10)                  GET LASTADD
         L    R4,0(R4)
         AH   R4,SAVELREC                ADD LRECL
         SLL  R2,8                       CLEAN UP BYTE
         SRL  R2,8
LOOPSAVE CR   R3,R4                      WRITE OUT RECORDS
         BE   FINISHOK                      UNTIL LASTADD+LRECL
         PUT  (R2),(R3)                     IS REACHED.
         AH   R3,SAVELREC
         B    LOOPSAVE
FINISHOK CLOSE ((R2))                    CLOSE FILE
         MVI  0(R9),X'01'                    AND MOVE SAVED MESSAGE
         L    R10,52(R10)
         MVC  0(9,R10),SAVEMSG6
         MVC  9(43,R10),DSNAME
*
         B    RETURN                     RETURN TO FSE
SAVEMSG6 DC   C'SAVED IN '
         DS   0F
MOVE1    MVC  X'3E'(2,R4),BLKSIZE        THIS ROUTINE IS BAL"ED
         MVC  X'52'(2,R4),LRECL             FOR OPENING A DCB
         MVC  X'24'(1,R4),RECFM             FOR A NEW DATA SET
         LR   R2,R4
         OPEN ((R2),(OUTPUT))
         BR   R14
MOVE2    MVC  X'52'(2,R4),VTOCINFO+44    THIS ROUTINE IS BAL"ED
         MVC  X'3E'(2,R4),VTOCINFO+42       FOR OPENING A DCB
         MVC  X'24'(1,R4),VTOCINFO+40       FOR A NEW DATA SET
         LR   R2,R4
         OPEN ((R2),(OUTPUT))
         BR   R14
         DS 0F
ALLOCDSN DC H'44'
DSNAME   DC   56C' '
         DS   0H
MOVEDSN  MVC  DSNAME(0),0(R5)
SAVEDSN  DC   55C' '
CAT      CAMLST NAME,DSNAME,,CATINFO
CATINFO  DS   0D
         DC   300C' '
VOLSER   DC   6C' '
         DS   0F
VTOC     CAMLST SEARCH,DSNAME,VOLSER,VTOCINFO
VTOCINFO DS   200C
MOVEIN   DS 0H
         MVC  0(0,R3),DSNAME
DATATYPE DC   X'00'
HEXTABLE DC   X'400102030405060708090A0B0C0D0E0F10111213141516171819'
         DC    X'1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132'
         DC    X'333435363738393A3B3C3D3E3F404142434445464748494A4B'
         DC    X'4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364'
         DC    X'65666768696A6B6C6D6E6F707172737475767778797A7B7C7D'
         DC    X'7E7F80C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6'
         DC    X'D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8'
         DC X'C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1'
         DC X'E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FA'
         DC X'FBFCFDFEFF'
        DS  0F
NEWMEMBE DC X'0008',6X'00'
         DC AL4(ALLOCDSN)
DDNAME   DC C'FSEFIL03'
         DC 16C' '
DA08BLK  DC  4X'00'
DA08PQTY DC 4X'00'
DA08SQTY DC 4X'00'
DA08DQTY DC 4X'00'
MEMBER   DC 8C' '
         DC 8C' '
DAIRFLAG DC 3X'00'
DA08CTL  DC B'00000000'
         DC 3X'00',X'40'
LIST     DC 8C' '
         DS 0F
*
DAPL     EQU *
DAPLUPT  DS F
DAPLECT  DS F
DAPLECB  DC F'0'
DAPLPSCB DS F
DAPLDAPB DS F
  DS 0D
DOUBLE   DS  D
ATTRLIST DC X'0034'       ALLOCATE ATTRLIST
         DC 4X'00'
         DC B'01000000'
         DC X'00'
         DC  C'FSEATTR '
         DC AL4(DAIRACB)
*
         DS  0D
DAIRACB  DC 8X'00'
         DC 6X'00'
         DC X'80'
         DC X'00'
         DC 3X'00'
         DC 3X'00'
         DC 2X'00'
         DC X'10'
         DC X'40'
BUFFLEN  DC H'0'
         DC B'00100000'
         DC 7X'00'
RECFM    DC X'00'
         DC X'80'
BLKSIZE  DC H'00'
LRECL    DC H'0'
         DC X'50'
         DC 4X'00'
         DS  0F
SAVELREC DC  H'0'
FSEDCB1 DCB DDNAME=FSEFIL01,MACRF=PM,DSORG=PS
FSEDCB2 DCB DDNAME=FSEFIL02,MACRF=PM,DSORG=PS
FSEDCB3 DCB DDNAME=FSEFIL03,MACRF=PM,DSORG=PS
FSEDCB4 DCB DDNAME=FSEFIL04,MACRF=PM,DSORG=PS
FSEDCB5 DCB DDNAME=FSEFIL05,MACRF=PM,DSORG=PS
FSEDCB6 DCB DDNAME=FSEFIL06,MACRF=PM,DSORG=PS
*
NEWFLAG DS X
        DS  0F
DCB1 DC  X'01',AL3(FSEDCB1)
DCB2 DC  X'02',AL3(FSEDCB2)
DCB3 DC  X'03',AL3(FSEDCB3)
DCB4 DC  X'04',AL3(FSEDCB4)
DCB5 DC  X'05',AL3(FSEDCB5)
DCB6 DC  X'06',AL3(FSEDCB6)
     DS  0F
SAVE DS  18F
   END
