* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  THIS IS A TSO FULL-SCREEN EDITOR TO BE USED SOLELY FOR REMOTE AND
*    LOCAL 3270 UNITS. IT ALLOWES THE SIMULTANEOUS UPDATE AND BROWSE
*    OF UP TO 21 LINES OF A DATA SET, AND THE EXECUTION OF AN FSE/TSO
*    COMMAND AT THE SAME TIME.
*
*  THE FSE SYSTEM IS MADE UP OF 8 SEPARATE MODULES PLACED IN A
*    LINKLIST DATA SET AND A SUBROUTINE LINKED WITH MAIN MODULE
*    "FSE". THE FOLLOWING IS A SUMMARY OF THESE ROUTINES
*    AND THEIR FUNCTIONS:
*
*  1) FSE      THIS IS THE MAIN DRIVER ROUTINE TO WHICH CONTROL IS
*              PASSED FROM THE TSO TMP. IT SCANS THE PARAMETERS
*              BUFFER, SETS ALL PROCESSING OPTION FLAGS, BUILDS A
*              CORE (GETMAINED) SYSEDIT FILE ACCORDING TO SIZE OF
*              DATA SET BEING EDITED, ALLOCATES THE FILE, AND
*              PERFORMS THE MAIN BULK OF FSE SUBCOMMANDS FOR
*              PERFORMANCE CONSIDERATIONS. ONCE THE FILE IS STORED
*              IN CORE, A MAIN LOOP IS EXECUTED FOR EACH TIME
*              THE ENTER KEY IS PRESSED: A STAE AND STAX ROUTINE
*              IS SET UP TO HANDLE ABENDS AND PA1 KEY INTERRUPTS,
*              THE FIRST 21 LINES OF THE DATA SET (STARTING AT THE
*              CURRENT RECORD) ARE WRITTEN TO THE SCREEN, A FULL
*              SCREEN TGET IS ISSUED TO READ THE CRT"S BUFFERS AND
*              ALL MODIFIED LINES ARE WRITTEN TO THE CORRESPONDING
*              RECORDS IN THE SYSEDIT BY LINE NUMBER. WHEN UP TO
*              A MAXIMUM OF 21 LINES ARE WRITTEN BACK TO STORAGE,
*              FSE WILL READ THE BUFFER WHERE COMMANDS ARE ENTERED.
*              IF IT IS A FSE SUBCOMMAND, A ROUTINE HANDLING THE
*              SUBCOMMAND IS EITHER LINKED OR BRANCHED. IF IT NOT
*              AN FSE DEFINED SUBCOMMAND, MODULE "FSETSO" IS LINKED
*              TO PROCESS THE COMMAND, WITH THE ASSUMPTION THAT IT
*              WAS A NATIVE TSO COMMAND. UPON COMPLETION OF THE
*              COMMAND PROCESSING, THE LOOP IS RE-EXECUTED  ETC...
*          *   PFKEYS ARE ALSO PRE DEFINED TO PERFORM SUBCOMMANDS
*              AND ARE ALSO PROGRAMMABLE TO THE USERS" NEEDS.
*
* 2) FSESAVE   THIS MODULE IS LINKED FROM FSE TO SAVE THE SYSEDIT
*              FILE TO SYSDA STORAGE. ALL CHECKS REGARDING LRECL,
*              DSORG, RECFM ETC ARE PERFORMED TO AVOID ABENDS.
*              THIS MODULE IS ALSO USED TO CREATE A TEMPORARY
*              DATA SET (USERID.FSEABCDE) TO STORE JCL TEXT
*              AND PASS IT TO JES2 FOR BACKGROUND PROCESSING
*              BY USING A FAKE SUBMIT COMMAND INTERNALLY.
*
* 3) FSECHANG  THIS MODULE IS LINKED FROM FSE TO HANDLE "CHANGE"
*              SUBCOMMANDS. DUE TO SIZE AND RARETY IN USE IT IS
*              A SEPARATE MODULE IN THE LINKLIST.
*
* 4) FSEPRTY   THIS MODULE IS LINKED FROM FSE TO ALTER DISPATCHING
*              PRIORITY OF FSE-EXECUTING ADDRESS SPACE FOR BETTER
*              RESPONSE TIME AND TO DECREASE SIGNIFICANCE FOR THE
*              THREE INTERVALS IN TSO IPS"S. IT IS CALLED TWICE
*              ONCE ENTERING FSE AT PRTY=240 AND A SECOND TIME
*              LEAVING IT AT PRTY=126.
*
* 5) FSETSO    THIS MODULE IS LINKED FROM FSE TO PROCESS A COMMAND
*              NOT FOUND TO BE AN FSE SUBCOMMAND. IF AN S806 OCCURS
*              FROM THE LINK ISSUED IN FSETSO, MODULE FSESYSCD WILL
*              PLACE "COMMND NOT FOUND" MSG TO THE RESPONSE FIELD.
*
* 6) FSESYSCD  THIS MODULE IS LINKED FROM FSE WHENEVER AN ABEND
*              OCCURS. IT TRANSLATES THE HEX ABEND CODE IN THE
*              PASSED S.D.W.A. FIELD TO PRINTABLE EBCDIC AND MOVES
*              THE ABEND MSG TO THE RESPONSE FIELD.
*
* 7) FSEFREE   THIS MODULE IS LINKED FROM FSE AND FSESAVE TO FREE
*              ANY ALLOCATED FSE DDNAME.
*
* 8) FSEATTR   THIS MODULE IS LINKED FROM FSE UPON ENTRY AND RETURN
*              TO FREE A DCB ATTRIBUTE LIST ALLOCATED FOR NEW
*              DATA SET SAVE FUNCTIONS.
*
* 9) FSEPFKEY  THIS MODULE IS BRANCH-CALLED FROM MAIN MODULE "FSE"
*              TO EITHER EXECUTE A SPECIFIC SUBCOMMAND OR TSO
*              COMMAND ASSOCIATED WITH THE PRESSING OF A PROGRAM
*              FUNCTION KEY, TO DISPLAY THE CURRENT ASSIGNMENT
*              OF PF KEYS 1 - 12, OR TO PROGRAM A USER"S FUNCTION
*              WITH A PFKEY.
*
* 10) IGC0024H THIS TYPE 3/4 USER SVC (248) IS ALSO USED IN A
*              MVT/SVS/TCAM ENVIRONMENT TO REPOSITION THE INTERNAL
*              TCAM MAJOR TERMINAL QCB TO TOP OF THE SCREEN IN
*              ORDER TO AVOID THE JUMPING TO THE NEXT LINE UPON
*              ISSUING A TGET. THIS IS ESPECIALLY IMPORTANT
*              SO AS NOT TO LOSE ANY OUTSIDE ISSUED MESSAGES
*              SUCH AS JOB-END NOTIFY, OPERATOR OR TSO USER
*              MESSAGES, WHICH WILL BE DISPLAYED ON THE UNUSED
*              VERY FIRST LINE OF THE TERMINAL.
*              THE CODE IN "FSE" WILL ONLY ISSUE THE SVC IF
*              TSO IS RUNNING UNDER TCAM AND NOT UNDER MVS.
*              IT IS NOT USED UNDER MVS BECAUSE THERE IS AN
*              AWFUL AMOUNT OF OVERHEAD IN SCHEDULING AN SRB
*              TO THE TCAM ADDRESS SPACE (GETMAIN, FREEMAIN AND
*              OTHER SVC"S, WHICH WOULD EXECUTE EVERY TIME
*              THE ENTER KEY OR A PF KEY IS PRESSED. ALSO
*              IT WOULD BE JOB NAME DEPENDENT ON THE TCAM
*              PROC NAME IN SEARCHING FOR ITS ASCB IN CORE.
*
*
* FSE SUBCOMMANDS ARE :
*                     TOP,BOTTOM,PF,PB,HF,HB,UP,DOWN,RENUM,CHANGE,
*                     COPY,MOVE,DSN,SAVE,END,DONE,FIND,SAVEEND,
*                     DELETE,INSERT,COLUMN,SUBMIT,AUTOSAVE,PFK
*
*
*
*
*     NATIONAL BANK OF NORTH AMERICA
*     7/77  BRUNO LA LICATA.   1/80 (CITIBANK)
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
FSE      CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
         STM   R14,R12,12(R13)
         LR    R12,R15               SAVE REGS. AND SET
         USING FSE,R12,R11,R9,R10  16K   ADDRESSABILITY
         L     R11,=A(FSE+4096)
         L     R9,=A(FSE+8192)
         L     R10,=A(FSE+12288)
SAVECP   LR    R2,R1                 SAVE CPPL ADDRESSES
*
GETSAVE  GETMAIN R,LV=72             GET SAVE AREA
         ST    R13,4(R1)             STORE OS/VS REGS.
         ST    R1,8(R13)             STORE FSE REGS.
         B   SKIPLTOR
         LTORG
         DS  0H
SKIPLTOR LR   R13,R1
         LM    R3,R6,0(R2)           LOAD CPPL AREA
         STM   R3,R6,CPPL          STORE THEM FOR LATER USE
*
* THIS SECTION WILL SCAN A COPY OF THE TMP COMMAND BUFFER
*  FOR THE SPECIFIED DSNAME AND KEYWORDS. IF THE DSNAME
*  IS NOT FULLY QUALIFIED (I.E. NO QUOTES) THE USER LOGON
*  ID IS PREFIXED TO IT. IF IT IS FULLY QUALIFIED, THEN THE
*  QUOTES ARE REMOVED.
* IF THE DSNAME IS TOO LONG, MISSING OR DOES NOT HAVE
*  MATCHING QUOTES, THE USER WILL BE PROMPTED FOR A NEW
*  DSNAME.  ONCE THE DSNAME IS VERIFIED, THE END RESULT
*  IS AS FOLLOWS :  FIELD "SAVEDSN" WILL CONTAIN EITHER
*  THE FULLY QUALIFIED NAME STRIPPED OF QUOTES, OR
*  THE SPECIFIED DSNAME WITH THE TSO LOGON ID PREFIXED.
*  FIELD "DSNAME" WILL CONTAIN ONE OF TWO THINGS :
*  1) FOR A PDS(MEMBER), ONLY THE PDS NAME  2) FOR A
*  SEQUENTIAL FILE THE FULL NAME. ("DSNAME" IS USED TO
*
* THE SECOND PART OF THE ROUTINE WILL SCAN THE FIELD
*  "DSNAME" TO CHECK FOR A RIGTH APOSTROPHE (I.E. A
*  PARTITIONED DATA SET WITH MEMBER SPECIFIED).
* IF THE CHARACTER "(" IS FOUND, ONLY THE TRUE
*  DSNAME IS KEPT IN FIELD "DSNAME".
* A CHECK OF THE COMMAND BUFFER IS ALSO MADE TO
*  RETRIEVE KEYWORDS. (VALID ONES ARE NEW,OLD,CLIST
*  CNTL,COBOL,ASM,PLI,DATA). FLAG BITS FOR THE TYPES
*
*
*  ARE SET IN FIELD "DATATYPE". ONLY ONE BIT ON WILL
*  BE ALLOWED FOR THE DATA TYPE. BIT #1 IS EITHER ON
*  (NEW) OR OFF (OLD).
*
*
*
         L    R2,16                 CVT ADDRESS
         CLC  228(4,R2),=F'0'       TSCVT PRESENT?
         BNE  NOMVS1                YES, DEFINETLY NOT MVS
         L    R2,=X'000000F0'       LET SWAP PRTY=240
*        LINK  EP=FSEPRTY           LINK MODULE            AXC
NOMVS1   L     R2,CB                ADDRESS OF COMMAND BUFF
         LH   R3,0(R2)                 LENGTH OF COMMAND
         SH   R3,=H'5'                 TO SYNCH WITH DATA
         EX    R3,MOVEBUFF
         LA    R3,1(R3)
         B     *+10
MOVEBUFF MVC   SAVEBUFF(0),4(R2)
         TR    SAVEBUFF(60),HEXTABLE   MAKE EBCDIC
         LA    R2,SAVEBUFF
DSNLOOP  CLC   0(3,R2),=C'FSE'      CHECK FOR TRUE NAME
         BE    FOUND1
         CLC   0(3,R2),=C'FSS'      CHECK FOR TRUE ALIAS NAME   AXC
         BE    FOUND1                                           AXC
         CLC   0(3,R2),=C'INC'      CHECK FOR TRUE ALIAS NAME   AXC
         BE    FOUND1                                           AXC
         LA    R2,1(R2)             NEXT BYTE
         BCT   R3,DSNLOOP           GO SCAN AGAIN
*
*        TPUT MSG1,3               ISSUE ERROR MSG IF ALIAS
         BC   15,RETURN               FOR FSE WAS GIVEN.
MSG1     DC C'ооо'
         DS   0H
*
FOUND1   LA   R2,3(R2)             BUMP TO SKIP COMMAND NAME
LOOP1    CLI  0(R2),X'40'
         BNE FOUNDDSN
         LA   R2,1(R2)             SKIP IF BLANK
         BCT  R3,LOOP1
*
BADNAME  TPUT MSG2,13              NO DSNAME SPECIFIED
READNAME TCLEARQ INPUT             CLEAR TSO INPUT QUEUE
         MVC  DSNAME(56),BLANKS    CLEAN INPUT AREA
         TGET SAVEBUFF,60
         TR   SAVEBUFF(60),HEXTABLE
         LA   R2,SAVEBUFF
*
*
FOUNDDSN LA   R4,0         R4 USED FOR DSNAME LENGTH
         LR   R5,R2        SAVE DSNAME ADDRESS IN BUFFER
         LA   R3,56  MAX LENGTH (44 + 2 QUOTES + 8 FOR MEMBER)
LOOP2    CLI  0(R2),X'40'  CHECK FOR BLANK (END)
         BE   ENDDSN
         LA   R2,1(R2)     BUMP UP BUFFER ADD.
         LA   R4,1(R4)     BUMP UP LENGTH COUNT
         BCT  R3,LOOP2   GO SCAN AGAIN
         TPUT MSG3,24      BAD DSNAME MSG.
         B    READNAME     GO READ ANOTHER
ENDDSN   LR   R7,R4        DSNAME LENGTH
         BCTR R4,0         READY FOR EX
         EX   R4,MOVEDSN   MOVE FROM BUFFER TO "DSNAME"
*
FIXDSN   CLI  DSNAME,C''''  CHECK FOR FULL QUALIFICATION
         BNE  PREFIXID      NO, MUST BE USER DATA SET
         MVC  SAVEDSN(55),BLANKS   CLEAN "DSNAME"
         MVC  SAVEDSN(55),DSNAME+1 MOVE TO STRIP QUOTE
         LA   R2,SAVEDSN    BEGINNING ADD. FOR SEARH
         LA   R3,55              OF ENDING QUOTE--MAX LENGTH
*
LOOP3    CLI  0(R2),C''''
         BE   FOUNDQUO        FOUND IT...
         LA   R2,1(R2)        BUMP UP ADDRESS
         BCT  R3,LOOP3        GO SCAN AGAIN
*
         TPUT MSG3,24         NO ENDING QUOTE...NO GOOD
         BC   15,READNAME    GO READ NEW DSNAME
*
FOUNDQUO MVI 0(R2),X'40'      MAKE IT BLANK
         B   SKIPID           GO TO SCAN KEYWORDS
*
* THIS SECTION WILL PREFIX THE DSNAME WITH THE USER"S
*  LOGON ID FOUND AT P.S.C.B. +0. LENGTH IS AT +7.
*
PREFIXID LA   R2,DSNAME
         LA   R3,SAVEDSN
         MVC  SAVEDSN(55),BLANKS       CLEAR IT FOR MOVE
         L    R4,PSCB           LOAD ADDRESS OF P.S.C.B.
         SR   R5,R5             CLEAR TO LOAD ID LENGTH
         IC   R5,7(R4)          INSERT LENGTH OF TSO ID.
         BCTR R5,0              READY FOR EX
         EX   R5,MOVEID         MOVE ID TO SAVEDSN
         B    *+10              SKIP EXECUTED MOVE
MOVEID   MVC  0(0,R3),0(4)   ---EXECUTED MOVE--
         DS   0H
         LA   R5,1(R5)          ADD BACK TO LENGTH
         AR   R3,R5             POINT TO "." SPOT
         MVI  0(R3),C'.'        MOVE IT IN
         LA   R3,1(R3)          POINT TO NEXT LEVEL
*
*  THIS SECTION WILL MOVE THE READ-IN DSNAME APPENDED TO ID
*
         BCTR R7,0             READY TO EX
         EX   R7,MOVEIN        MOVE REST OF DSNAME
         LA   R7,1(R7)         ADD BACK TO LENGTH
*
*  HERE, THE SPECIFIED KEYWORDS WILL BE SCANNED AND FLAGS
*   IN "DATATYPE" WILL BE SET ACCORDINGLY.
*
SKIPID   EQU  *
         MVC  DSNAME(56),BLANKS
         LA   R2,SAVEBUFF      ADDRESS OF COPY OF C.B.
         LA   R3,80            MAX. SCAN LENGTH
LOOP4    CLC 0(5,R2),=C' NEW ' CHECK FOR NEW DATA SET
         BNE  SKIP1
         OI   DATATYPE,X'80'   SET FLAG
SKIP1    CLC  0(7,R2),=C' CLIST '
         BNE  SKIP2
         OI   DATATYPE,B'00000100'
SKIP2    CLC  0(6,R2),=C' DATA '
         BNE  SKIP3
         OI   DATATYPE,B'00001000'
SKIP3    CLC  0(6,R2),=C' CNTL '
         BNE  SKIP4
         OI   DATATYPE,B'00000010'
SKIP4    CLC  0(5,R2),=C' OLD '
         BNE  SKIP5
         NI   DATATYPE,B'01111111'
SKIP5    CLC  0(5,R2),=C' ASM '
         BNE  SKIP6
         OI   DATATYPE,B'00100000'
SKIP6    CLC  0(5,R2),=C' PLI '
         BNE  SKIP7
         OI   DATATYPE,B'00010000'
SKIP7    CLC  0(7,R2),=C' COBOL '
         BNE  SKIP8
         OI   DATATYPE,B'01000000'
SKIP8    CLC  0(6,R2),=C' LIST '
         BNE  SKIP9
         MVI  LISTFLAG,X'01'
         MVI  DATATYPE,X'04'        GIVE DEFAULT TYPE
         BC   15,SKIP9
LISTFLAG DC   X'00'
         DS   0H
SKIP9    LA   R2,1(R2)              BUMP 1
         BCT  R3,LOOP4
*
*  WHEN LOOP IS EXAUSTED, IF NO "NEW" KEYWORD WAS SPECIFIED
*   THE DEFAULT IS OLD.  A CHECK IS MADE TO SEE IF A TYPE
*   WAS SPECIFIED...IF SO...ONLY ONE SHOULD BE PRESENT...
*   IF NOT...A PROMPT IS MADE FOR TYPE.
*
         B    SKIPCONS             SKIP BYTE
SAVETYPE DC   X'00'
         DS   0H
SKIPCONS MVC  SAVETYPE(1),DATATYPE
         NI   SAVETYPE,B'01111110'
         SR   R5,R5                CLEAR FOR INSERT
         IC   R5,SAVETYPE
         C    R5,=F'2'
         BE   MAINLOG
         C    R5,=F'4'
         BE   MAINLOG
         C    R5,=F'8'
         BE   MAINLOG
         C    R5,=F'16'
         BE   MAINLOG
         C    R5,=F'32'
         BE   MAINLOG
         C    R5,=F'64'
         BE   MAINLOG
*
*  IF HERE, IT MEANS EITHER NO TYPE WAS SPECIFIED, OR
*   MULTIPLE TYPES WERE SPECIFIED...
*
         CH   R5,=H'0'               NO TYPE SPECIFIED?
         BNE  TYPENOOK               MULTIPLE TYPES
         BAL   R7,MAINLOG
         B    SCANTYPE
*
TYPENOOK TPUT BADTYPE,22
         BC   15,RETURN
BADTYPE  DC   C'INVALID TYPE SPECIFIED'
          DS   0H
SCANTYPE LA   R3,44              MAX SCAN LENGTH
         LA   R2,DSNAME          ADDRESS OF SCAN
         LR   R5,R2              SAVE IT
LOOP7    CLI  0(R2),X'40'        END OF DSNAME??
         BE   GETTYPE
         CLI  0(R2),C'.'   A QUALIFIER??
         BNE  ADD1
         LR   R5,R2        SAVE BEGIN ADDRESS
ADD1     LA   R2,1(R2)     ADD 1
         BCT  R3,LOOP7
GETTYPE  EQU  *
         SR   R2,R5        LENGTH OF LAST QUALIFIER (+ ".")
         CLI  0(R5),C'.'   WAS IT A TWO LEVEL DSNAME?
         BNE  SKIPSUBT
         BCTR R2,0         YES, SUBTRACT 1
         LA   R5,1(R5)     YES, POINT TO ACTUAL QUALIFIER
*
SKIPSUBT CLC  0(6,R5),=C'COBOL '
         BNE  DEFAULT1
         OI   DATATYPE,B'01000000'
         B    OKTYPE
DEFAULT1 CLC  0(4,R5),=C'ASM '
         BNE  DEFAULT2
         OI   DATATYPE,B'00100000'
         B    OKTYPE
DEFAULT2 CLC  0(4,R5),=C'PLI '
         BNE  DEFAULT3
         OI   DATATYPE,B'00010000'
         B    OKTYPE
DEFAULT3 CLC  0(5,R5),=C'DATA '
         BNE  DEFAULT4
         OI   DATATYPE,B'00001000'
         B    OKTYPE
DEFAULT4 CLC  0(6,R5),=C'CLIST '
         BNE  DEFAULT5
         OI   DATATYPE,B'00000100'
         B    OKTYPE
DEFAULT5 CLC  0(5,R5),=C'CNTL '
         BNE  NOTYPE
         OI   DATATYPE,B'00000010'
         B    OKTYPE
NOTYPE   EQU  *
*
*  HERE,  NO TYPE WAS SPECIFIED, SO PROMPT USER..
*
         TPUT MSG7,32
         B    SKIPPROM
MSG7     DC   C'INVALID TYPE SPECIFIED, REENTER-'
AGAINTYP DC  20C' '
*
         DS   0H
SKIPPROM TCLEARQ INPUT
         MVC  AGAINTYP(20),BLANKS
         TGET AGAINTYP,20
         TR   AGAINTYP(20),HEXTABLE        MAKE EBCDIC
         LA   R5,AGAINTYP
         LA   R6,20            SCAN LENGTH
PROMPTTT CLI  0(R5),C' '       BLANK?
         BNE  SKIPSUBT         NO..GO CHECK TYPE
         LA   R5,1(R5)         BUMP ADDRESS BY 1
         BCT  R6,PROMPTTT
*
*
MAINLOG  EQU  *
        DS  0H
         LA   R2,SAVEDSN           SCAN ADDRESS
         LA   R4,55
         LA   R6,0                 LENGTH COUNT
LOOP5    CLI  0(R2),C'('           CHECK FOR PDS
         BE   FOUNDPDS
         LA   R2,1(R2)             BUMP 1
         LA   R6,1(R6)             ADD 1 TO COUNT
         BCT  R4,LOOP5
* THIS MUST BE A SEQUENTIAL DATA SET
         MVC  DSNAME(55),SAVEDSN
         B    SKIPPDS
FOUNDPDS OI   DATATYPE,X'01'       FLAG FOR PDS
         LA   R3,SAVEDSN           START ADDRESS
         SR   R2,R3                LENGTH OF TRUE NAME
         MVC  DSNAME(56),BLANKS
         BCTR R2,0
         EX   R2,MOVETRUE
         B    *+10
MOVETRUE MVC  DSNAME(0),SAVEDSN          MOVE TRUE DSNAME-MEMBER
SKIPPDS  EQU  *
*
* CHECK IF HERE FOR NO TYPE
*
         MVC  SAVETYPE(1),DATATYPE
         NI   SAVETYPE,B'01111110'
         SR   R5,R5
         IC   R5,SAVETYPE
         CH   R5,=H'0'
         BNE  OKTYPE
         BR   R7
*
OKTYPE   EQU  *
         LA   R1,CPPL      LOAD TMP PARMS
         LINK  EP=FSEFREE   ,FREE ANY FSE ASSOCIATED DDNAMES
*
         MVC  DAPLUPT,UPT
         MVC  DAPLECT,ECT
         XC   DAPLECB(4),DAPLECB
         MVC  DAPLPSCB,PSCB
         TM   DATATYPE,X'80'  NEW DSN?
         BNO  OLDDSN
NEWDSN   TM   DATATYPE,X'01'  IS IT PDS REQUIRED?
         BNO  NOTPDS
         BAL  R6,PDSRTN             DO ALLOCATION FOR PDS
         BC   15,MAINFSE2
*
*
*  THIS ROUTINE DOES THE ALLOCATION FOR A NEW AND OLD MEMBER
*   OF AN EXISTING P.D.S.
*
*
PDSRTN   LOCATE CAT           MAKE SURE DSN IS CATALOGED
         LTR  R15,R15
         BZ   PDSOK
         TPUT MSG8,22
         BC   15,RETURN
MSG8     DC C'DATA SET NOT CATALOGED'
         DS   0H
PDSOK    EQU  *
*
*  THIS NEXT SECTION RETRIEVES THE MEMBER NAME FROM
*   FIELD SAVEDSN, TO BE USED IN THE DAIR BLOCK.
         LA   R5,SAVEDSN
         LA   R2,SAVEDSN
         LA   R3,55            SEARCH COUNT MAX.
LOOP9    CLI  0(R2),C'('       CHECK FOR PARENTHESIS
         BNE  SKIPLOAD
         LR   R5,R2
SKIPLOAD CLI  0(R2),C')'       CHECK FOR END
         BE   GETMEMBE
         LA   R2,1(R2)         BUMP ADDRESS UP 1
         BCT  R3,LOOP9
*
GETMEMBE SR   R2,R5            GET MEMBER LENGTH+1
         BCTR R2,0             TRUE LENGTH
         CH   R2,=H'8'         VALID LENGTH??
         BNH  LENGTHOK
         TPUT MSG9,19
         B    RETURN
MSG9     DC C'INVALID MEMBER NAME'
         DS   0H
*
LENGTHOK LA   R5,1(R5)         POINT TO MEMBER NAME
         BCTR R2,0
         EX   R2,MOVEMEMB
         B    *+10
MOVEMEMB MVC  MEMBER(0),0(R5)  ---EXECUTED MVC--
         LA    R7,NEWMEMBE
         ST    R7,DAPLDAPB
DYNPDS   LA   R1,DAPL          LOAD PRIMARY DAIR BLOCK
         LINK EP=IKJDAIR      LINK TO ALLOCATION RTN.
DAIRCHEK LTR  R15,R15         OK RETURN?
         BZR  R6              YES,BRANCH TO CALLING RTN
R10CODE  LR    R7,R15          SAVE ERROR CODEDOWN
DAIRERR  TPUT MSG10,15,ASIS   SEND ERROR MSG.
         CVD   R7,DOUBLE
         UNPK MSG11(4),DOUBLE(8)
         OI   MSG11+3,X'F0'
         TPUT MSG11,4
         B    RETURN           BYE BYE
*
MSG10 DC C'DAIR ERROR CODE'
MSG11 DS 4C
      DS 0H
*
NOTPDS   EQU  *
         LOCATE CAT       MAKE SURE DATA SET DOES"NT EXIST
         LTR  R15,R15
         BNZ  OKNEW
*
*  IF R15 = 0 DATA SET ALREADY CATALOGED..NO GOOD
*
         TPUT MSG12,23
         B    RETURN
MSG12    DC C'DATA SET ALREADY EXISTS'
         DS 0H
OKNEW    EQU  *
         B    MAINFSE2
*  FOR NEW PHY. SEQ. DATA SET, AN ATTRIBUTE LIST CONTAINING
*   THE LRECL, BLKSIZE, RECFM HAS TO BE CREATED. THESE VALUES
*   WILL BE DEPENDENT ON THE DATA SET TYPE...(CLIST TYPES
*   ARE  VBS 255 X 1680  VARIABLE BLOCKED.... THE REST ARE
*   80  X 4080 FIXED BLOCKED)
*  THE ATTRIBUTE LIST IS LATER USED TO ALLOCATE THE DATA SET
*  DEFAULTING TO SYSGENED SPACE VALUES AND DISP=(NEW,CATLG,CATLG)
*
*
*  THIS SECTION IS USED TO ALLOCATE AN OLD DATA SET
*
OLDDSN   EQU  *
         TM   DATATYPE,X'01'         A PDS??
         BNO  OLDPS                  MUST BE AN OLD PS
         BAL  R6,PDSRTN              A PDS: GO ALLOCATE
         B    GETMAIN
OLDPS    EQU  *
         LOCATE CAT             MAKE SURE OLD PS IS THERE
         LTR  R15,R15
         BZ   OKOLDPS           YES, CATALOGED...GO ALLOCATE
         TPUT MSG8,22           DATA SET NOT CATALOGED..BYE
         B    RETURN
OKOLDPS  MVI  DA08CTL,X'00'
         LA    R7,NEWMEMBE
         ST    R7,DAPLDAPB
         LA   R1,DAPL            LOAD DAIR BLOCK
         LINK EP=IKJDAIR         ALLOCATE
         LTR  R15,R15
         BZ   GETMAIN
         B    R10CODE
*
GETMAIN  EQU  *
         MVC  VOLSER(6),CATINFO+6   MOVE SER. # FOR OBTAIN
         OBTAIN VTOC                READ DSCB TYPE 1
         LTR  R15,R15               DATA SET THERE??
         BZ   TEST1
         TPUT MSG13,22
         B    RETURN
MSG13    DC   C'DATA SET NOT ON VOLUME'
         DS   0H
*
*  THIS SECTION WILL VALIDATE THE CHARACTERISTICS OF THE
*  DATA SET AND DOUBLE CHECK WITH THE SPECIFIED DATA.
*
TEST1    LA   R6,VTOCINFO           INDEX TO DSCB INFO
WHATYPE  TM   DATATYPE,X'01'        PDS?
         BNO  TEST2
         CLC  38(2,R6),=X'0200'      TEST FOR TRUE PDS
         BE   MAINFSE
         TPUT MSG14,18
         B    RETURN
MSG14 DC C'INCONSISTENT DSORG'
         DS   0H
         LTORG
         DS   0H
TEST2    CLC  38(2,R6),=X'2000'       DSORG=DA??
         BNE  TEST3
         TPUT MSG15,13
         B    RETURN
MSG15    DC   C'INVALID DSORG'
         DS   0H
TEST3    CLC  38(2,R6),=X'8000'       DSORG=IS??
         BNE  TEST4
         TPUT MSG15,13
         B    RETURN
TEST4    TM   DATATYPE,X'01'           HERE MAKE SURE SPECIFIED
         BO   MAINFSE                  AS PS AND TRUE DSORG IS PS
         CLC  38(2,R6),=X'4000'        PS?
         BE   MAINFSE
         TPUT MSG14,18
         B    RETURN
*
MAINFSE  EQU  *
         CLI  VTOCINFO+40,X'C0'          U RECFM??
         BNE  OKRECFM
         TPUT MSG18,21
         B    RETURN
MSG18    DC   C'INVALID RECORD FORMAT'
FIXORVAR DS   X
         DS   0H
*
OKRECFM  CLI VTOCINFO+40,X'80'          F?
         BNE FORMAT1
         MVI FIXORVAR,X'00'
         B   MAINFSE2
FORMAT1  CLI VTOCINFO+40,X'90'          FB?
         BNE FORMAT2
         MVI FIXORVAR,X'00'
         B   MAINFSE2
FORMAT2  CLI VTOCINFO+40,X'40'             V?
         BNE FORMAT3
         MVI FIXORVAR,X'01'
         B   MAINFSE2
FORMAT3  CLI VTOCINFO+40,X'50'             VB?
         BNE FORMAT4
         MVI FIXORVAR,X'01'
         B   MAINFSE2
FORMAT4  CLI VTOCINFO+40,X'54'             VBA?
         BNE FORMAT5
         MVI FIXORVAR,X'01'
         B   MAINFSE2
FORMAT5  CLI VTOCINFO+40,X'84'             FA?
         BNE FORMAT6
         MVI FIXORVAR,X'00'
         B   MAINFSE2
FORMAT6  CLI VTOCINFO+40,X'94'             FBA?
         BNE FORMAT7
         MVI FIXORVAR,X'00'
         B   MAINFSE2
FORMAT7  CLI VTOCINFO+40,X'82'             FM?
         BNE  FORMAT8
         MVI  FIXORVAR,X'00'
         B    MAINFSE2
FORMAT8  CLI  VTOCINFO+40,X'92'            FBM?
         BNE  FORMAT9
         MVI  FIXORVAR,X'00'
         B    MAINFSE2
FORMAT9  CLI  VTOCINFO+40,X'98'            FBS?
         BNE  FORMAT0
         MVI  FIXORVAR,X'00'
         B    MAINFSE2
FORMAT0  TPUT MSG18,21
         B   RETURN
MAINFSE2 TM   DATATYPE,X'80'           NEW DATA SET??
         BO   SETLINES
*
*  IF HERE, DATA SET IS OLD, VERIFIED, CATALOGED AND
*  RESIDENT ON VOLUME
*
GOODOLD  EQU  *
         LA   R5,0           SET REC. COUNT TO 0
         TM   DATATYPE,X'01'        PDS?
         BO   *+8
         B    READWRIT
         MVC MEMBLDL(8),MEMBER
*
*  MUST ALLOCATE FSEDCBPO WITH DIFFERENT DD SO THAT
*  MEMBER NAME IS NOT AFFECTED BY "BLDL"
*
         LA    R7,POPDS
         ST    R7,DAPLDAPB
         MVC  DAPLECB(4),=XL4'00'
         BAL  R6,DYNPDS
         OPEN  FSEDCBPO
MEMCHEK  BLDL FSEDCBPO,LST
         LTR  R15,R15
         BZ   SKIPCLOS
         CLOSE FSEDCBPO
         TPUT MSG22,16
         B    RETURN
MSG22    DC   C'MEMBER NOT FOUND'
         DS   0H
SKIPCLOS CLOSE FSEDCBPO
READWRIT OPEN (FSEDCB,(INPUT))
RECCOUNT GET  FSEDCB,AREA
         LA   R5,1(R5)                 ADD 1 TO RECORDS #
         B    RECCOUNT
EODAD1   STH  R5,RECORDS               SAVE COUNT
         LTR  R5,R5
         BNZ  OVERZERO
         TPUT DSNEMPTY,14
         BC   15,RETURN
DSNEMPTY DC   C'DATA SET EMPTY'
         DS   0H
OVERZERO EQU  *
*
*  R5 NOW CONTAINS THE SIZE OF THE AREA FOR THE EXISTING
*   DATA SET. AN ALGORITHM NOW WILL CALCULATE THE EMPTY
*   SPACE TAGGED AT THE END FOR INSERTIONS.
* THE AMOUNT OF SPACE GIVEN DEPENDS ON THE NUMBER OF
*   RECORDS IN THE DATA SET....IT VARIES FROM 50 TO 200
*
GOCLOSE  CLOSE FSEDCB
         MVC  SAVELREC(2),VTOCINFO+44    SAVE THE LRECL
SPACE1   CH   R5,=H'100'
         BH   SPACE2
         LH   R6,SAVELREC
         MH   R6,=H'300'
         MH   R5,SAVELREC
         AR   R5,R6
         B    GETSPACE
SPACE2   CH   R5,=H'500'
         BH   SPACE3
         LH   R6,SAVELREC
         MH   R6,=H'200'
         MH   R5,SAVELREC
         AR   R5,R6
         B    GETSPACE
SPACE3   CH  R5,=H'1000'
         BH  SPACE4
         LH  R6,SAVELREC
         MH  R6,=H'250'
         MH  R5,SAVELREC
         AR  R5,R6
         B   GETSPACE
SPACE4   LH  R6,SAVELREC
         MH  R6,=H'100'
         MH  R5,SAVELREC
         AR  R5,R6
*
GETSPACE ST  R5,AREASIZE
GETCORE  LR   R0,R5
         GETMAIN EC,LV=(0),A=AREAADD
         LTR  R15,R15
         BZ   OKMAIN
         TPUT MAINMSG,20
         B    RETURN
MAINMSG  DC C'MEMORY NOT AVAILABLE'
         DS   0H
OKMAIN   L    R1,AREAADD
         ST  R1,TOPADD                SAVE BEGIN ADDRESS
         AR  R1,R5                    ADD TO GET END ADD
         SH  R1,SAVELREC              END ADDRESS
         ST  R1,BOTTADD
*
*  CLEAR AREA WITH BLANKS
*
         L    R4,TOPADD
         XR   R6,R6
         L    R7,=XL4'40000000'
         MVCL R4,R6
SKIPERR1 EQU  *
*
*  THIS SECTION WILL READ THE INPUT FILE AND STORE IT
*   SEQUENTIALLY INTO THE GETMAINED AREA.
*
         LA   R5,FSEDCB2
         L    R6,TOPADD
         OPEN FSEDCB2
SETUP1   GET  (R5),(R6)
         AH   R6,SAVELREC
         B    SETUP1
EODAD2   CLOSE FSEDCB2
         MVI   USEFLAG,X'01'
*
         LA   R1,CPPL
         LINK EP=FSEFREE
*        DS   0H
*
SKIPERR2 MVC  CURRADD(4),TOPADD
         LH   R5,RECORDS
         BCTR R5,0
         MH   R5,SAVELREC
         A    R5,TOPADD
         ST   R5,LASTADD
         LH   R5,RECORDS            LOAD # OF RECORDS
         L    R6,TOPADD             TOP OF GETMAINED SYSEDIT
         CLI  LISTFLAG,X'01'
         BE   MAINREAD
LINELOOP CLI  FIXORVAR,X'01'        VARIABLE LENGTH?
         BE   VARTYPE
         TM   DATATYPE,B'01000000'       COBOL?
         BNO  NOCOBOL1
         LR   R8,R6
         B    DOTRT
NOCOBOL1 LR   R8,R6
         AH   R8,SAVELREC
         S    R8,=F'8'               POINT TO LINE NUMBER
DOTRT    SR   R1,R1              FOR TRT
         TM   DATATYPE,B'01000000'
         BNO  *+14
         TRT  0(6,R8),TRTTABLE
         B    *+10
         TRT  0(8,R8),TRTTABLE   SCAN FOR ANYTHING BUT F0 - F9
         LTR  R1,R1              IF 0,VALID LINE #
*
         BNZ  BADLINE#
         TM   DATATYPE,B'01000000'
         BNO  PACK8
         PACK NEWLINE(8),0(6,R8)
         B    *+10
PACK8    PACK NEWLINE(8),0(8,R8)
         CVB  R4,NEWLINE         GET TO BINARY
         C    R4,SAVELINE        IN ASCENDING ORDER?
         BNH  BADLINE#
         ST   R4,SAVELINE        SAVE IT FOR NEXT LINE #
         C    R4,=F'999999'
         BNL  BADLINE#
         B    NEXTLINE           GO SCAN NEXT RECORD
VARTYPE  LR   R8,R6
         LA   R8,4(R8)           POINT TO LINE NUMBER
         B    DOTRT
BADLINE# TPUT MSG20,126
         TCLEARQ INPUT
         TGET SAVEBUFF,1
         B    RENUM
*
MSG20    DC   C'FSE REQUIRES DATA SETS WITH VALID AND IN ASCENDING '
         DC   C'ORDER LINE NUMBERS. PRESS ENTER KEY TO RENUMBER '
         DC   C'AND CONTINUE, OR PA1 TO END'
FAKERENU DC CL25' R'
         DS   0H
*
RENUM    LA   R7,FAKERENU
         BAL  R14,REALONE
         B    MAINREAD
*
NEXTLINE AH   R6,SAVELREC
         BCT  R5,LINELOOP
*
*  ALL PRE-REQS DONE...DO READS AND WRITES
*
          B   MAINREAD
*
SETLINES MVI  USEFLAG,X'00'
         TM   DATATYPE,X'01'               PDS?
         BNO  SET2
         LA    R7,POPDS
         ST    R7,DAPLDAPB
         MVC  DAPLECB(4),=XL4'00'
         BAL  R6,DYNPDS
*
         OPEN  FSEDCBPO
         MVC MEMBLDL(8),MEMBER
         BLDL FSEDCBPO,LST
         LTR  R15,R15
         BZ   BADME
         CLOSE FSEDCBPO
         B    SET2
BADME    TPUT MSG23,21
         B    RETURN
MSG23    DC   C'MEMBER ALREADY EXISTS'
         DS   0H
SET2     TM   DATATYPE,B'00000100'        CLIST TYPE??
         BO   LARGER
         LA   R5,80
         MVI  FIXORVAR,X'00'
         STH  R5,SAVELREC
         B    SETUPNEW
LARGER   LA   R5,255                 LRECL FOR NEW CLIST
         STH  R5,SAVELREC
SETUPNEW EQU  *
         TM   DATATYPE,X'04'
         BNO  *+8
         MVI  FIXORVAR,X'01'
*
         LA   R5,300
         STH  R5,RECORDS
*
         MH   R5,SAVELREC
*
*  GETMAIN FOR 300 RECORDS X LRECL
*
         GETMAIN R,LV=(R5)
         ST   R1,TOPADD
         ST   R1,CURRADD
         SH   R1,SAVELREC
         ST   R1,LASTADD
         AH   R1,SAVELREC
         AR   R1,R5               ADD TO GET ABSOLUTE BOUND
         SH   R1,SAVELREC         GET ADDRESS OF BOTTOM LINE
         ST   R1,BOTTADD
*
*  CLEAR AREA WITH BLANKS
*
         L    R4,TOPADD
         XR   R6,R6
         L    R7,=XL4'40000000'
         MVCL R4,R6
*
*
*  HERE LINE NUMBERS WILL BE PLACED IN THE IN-CORE
*   RECORDS DEPENDING ON THE DATA TYPE
*
         MVC  SAVELINE(4),=F'10'
         LH   R5,RECORDS
         L    R6,TOPADD
SETNUMB  CLI  FIXORVAR,X'01'          VARIABLE LENGTH?
         BO   LARGER2
         L    R7,SAVELINE
         CVD  R7,DOUBLE
*        UNPK 72(8,R6),DOUBLE(8)
*        OI   79(R6),X'F0'
         B    NEXTSET
LARGER2  L    R7,SAVELINE
         CVD  R7,DOUBLE
*        UNPK 4(8,R6),DOUBLE(8)
*        OI   11(R6),X'F0'
         MVC  0(2,R6),SAVELREC         MOVE THE RECORD LENGTH
         MVC  2(2,R6),=H'0'            RESERVED ZEROES
NEXTSET  L    R7,SAVELINE
         A    R7,=F'10'
         C    R7,=F'999999'
         BNH  OKGREAT
BADNUMB  EQU  *
         B    RETURN
*SG26    DC   C'LINE NUMBER TOO LARGE FOUND'
         DS   0H
OKGREAT  ST   R7,SAVELINE
         AH   R6,SAVELREC
         BCT  R5,SETNUMB
*
MAINREAD EQU  *
         MVC  RESPONSE(50),BLANKS
         GETMAIN R,LV=2048         GET AREA FOR INPUT
         ST   R1,AREAADD
         LR   R2,R1
         LA   R3,2048
         XR   R4,R4
         L    R5,=XL4'40000000'
         MVCL R2,R4                CLEAR INPUT AREA
         B    GOTOMVC
         LTORG
         DS   0H
GOTOMVC  MVC  COMMAND(2),=C'PF'    TO START WITH
         MVC  RESPONSE(15),TOPMSG  "TOP OF DATA SET" MSG
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  TESTCOB
         MVC  RESPONSE(17),LOWFIND
         MVC  COMMAND(19),BLANKS
TESTCOB  TM   DATATYPE,X'40'   COBOL?
         BNO  TPUTLOOP         NO, USE COLUMN 1
         MVC  COLUMN(2),=H'6'      AT COL. 7
         MVC  OUTCOL(3),=C'7  '
TPUTLOOP EQU  *
*
*
         STAE 0
         L    R3,ABENDPRM
         STM  R6,R3,SAVEREG
         STAE ABEND01,PARAM=ABENDPRM,PURGE=HALT
         B   KEEPON
         DS   0H
         LTORG
         DS   0H
*
KEEPON   EQU  *
         TM   AUTOFLAG,1
         BNO  MORESAVE
         L    R7,SAVES#
         CH   R7,=H'10'         10 LINES CHANGED?
         BL   MORESAVE
         XR   R7,R7
         ST   R7,SAVES#
         MVI  PARMSAVE,X'00'
         LA   R3,PARMS
         LA   R4,PARMSAVE
         LA   R7,EMERG
         LINK EP=FSESAVE
         B    TPUTLOOP
MORESAVE LA   R7,LINE#1             LOOP TO CLEAR SCREEN AREA
         STAX                  ,  KILL PREVIOUS CIRB BLOCK
         STAX PA1RTN,DEFER=NO  ,SET PA1 KEY EXIT
         LA   R8,21                BCT COUNT FOR NUMBER OF LINES
CLEARLOP MVC  0(7,R7),=7C' '       CLEAR LINE NUMBER
         MVC  7(72,R7),=72C' '     CLEAR LINE DATA
         LA   R7,84(R7)            BUMP UP ADDRESS TO NEXT SET
         BCT  R8,CLEARLOP          GO DO IT AGAIN
*
*
         L    R5,CURRADD
         LA   R7,LINE#1
         L    R6,LASTADD
         LA   R8,21
MOVEDATA CR   R5,R6
         BH   SENDSCRN
*
         CLI  FIXORVAR,X'00'        FIXED TYPE??
         BNE  VARIABLE
         TM   DATATYPE,B'01000000'       COBOL?
         BNO  FIXED
         TM   LISTFLAG,X'01'
         BO   BRUNO1
         MVC  0(6,R7),0(R5)
BRUNO1   B    NOCOBOL2
FIXED    LR   R2,R5
         AH   R2,SAVELREC
         SH   R2,=H'6'
         TM   LISTFLAG,X'01'
         BO   NOCOBOL2
         MVC  0(6,R7),0(R2)
NOCOBOL2 LH   R4,SAVELREC
COLOK1   SH   R4,COLUMN
         CH   R4,=H'72'
         BNH  *+8
         LA   R4,72
         LTR  R4,R4
         BZ   SKIPAA
         BCTR R4,0
SKIPAA   AH   R5,COLUMN
         EX   R4,MOVEFIX
         SH   R5,COLUMN
         B    *+10
MOVEFIX  MVC  7(0,R7),0(R5)        MOVE DATA
         B    SKIPVARI
VARIABLE TM   LISTFLAG,X'01'
         BO   BRUNO2
         MVC  0(6,R7),6(R5)
BRUNO2   LH   R4,SAVELREC
         SH   R4,=H'12'
         SH   R4,COLUMN
         CH   R4,=H'72'
        BNH  *+8
        LA   R4,72
         LTR  R4,R4
         BZ   SKIPBB
         BCTR R4,0
SKIPBB   AH   R5,COLUMN
         CLI  LISTFLAG,X'01'
         BNE  YESLINES
         EX   R4,NOLINES
         B    SKIPEXX
NOLINES  MVC  7(0,R7),0(R5)
YESLINES EX   R4,MOVEVAR
SKIPEXX  SH   R5,COLUMN
         B    *+10
MOVEVAR  MVC  7(0,R7),12(R5)       MOVE DATA
SKIPVARI AH   R5,SAVELREC
*
         LA   R7,84(R7)
         BCT  R8,MOVEDATA
*
*
SENDSCRN EQU  *
         LA   R2,SIZESCR
         TPUT SCREEN,(2),FULLSCR   ,     SEND 3270 SCREEN
         LTR  R15,R15
         BZ   SKIPRET
         B    RETURN
SKIPRET  EQU  *
         L    R2,AREAADD
BL       LA   R3,2048             2048
         XR   R4,R4
         L    R5,=XL4'40000000'
         MVCL R2,R4
         LA   R3,2048            LOAD BACK LENGTH OF TGET
         L    R7,AREAADD
*
*  THE TGET MACRO WILL READ ALL MODIFIED FIELDS FROM THE
*    OUTPUTTED SCREEN. THE SEQUENCE OF INPUT FIELDS ARE :
*    KEY PRESSED,CURSER ADDRESS,BUFFER ADDRESS,DATA,
*    BUFFER ADDRESS,DATA.......
READSCR  EQU   *
         TGET (R7),(R3),ASIS
         LR    R5,R15
         LTR  R5,R5
         BZ   SKIPZZZZ
         B    RETURN
SKIPZZZZ LR   R3,R7
         MVC  KEY(1),0(R3)      SAVE PFKEY
         L    R3,16             CVT ADDRESS
         TM   240(R3),X'80'     TCAM UP?
         BNO  SAVEGET           NO, MUST BE VTAM
         CLC  228(4,R3),=F'0'   SVC 248 (IGC0024H) TYPE 4 IS ONLY
         BE   SAVEGET           ISSUED RUNNING UNDER SVS/MVT/TCAM
*                               ONLY. VTAM DOES NOT JUMP CURSOR.
         L    R1,=X'FFFFFFFF'   FLAG TO INDICATE TCAM FUNCTION
         SVC  248               ISSUE SVC
*
*
*
SAVEGET  LR   R3,R7             SAVE ADDRESS OF GETMAINED DATA
         LA   R4,8           BCT COUNT FOR TRANSLATE
TRLOOP   TR   0(256,R3),HEXTABLE
         LA   R3,256(R3)        TR THE NEXT 256 BYTES
         BCT  R4,TRLOOP         DO IT FOR 2048 BYTES
         B    LINECHAN          #### SCAN LINE CHANGES ####
KEYS     L    R7,AREAADD        #### BEFORE COMMAND    ####
         CLI  KEY,X'7D'        ENTER KEY PRESSED?
         BE   TEST3270          YES, GO SCAN BUFFER
         LR   R1,R7             NO, MUST BE PFKEY...
         LA   R0,0              R0=0 IS PFKEY...R0=1 IS KEY COMMAND
         CALL FSEPFKEY          GO SEE WHAT IT IS
*
TEST3270 EQU *
         MVC  CURRADD(4),SAVECURR   COME HERE AFTER CHANGING LINES
*   R7 HAS ADDRESS OF INPUT AREA
*   R3 HAS LENGTH OF SCAN
*
         L    R7,AREAADD
         LA   R3,2048
INLOOP   CLC  0(3,R7),=XL3'11C1D5'        SCAN FOR COMMAND BUFFER
         BNE  SKIPCO
         B    HERECOMM
SKIPCO   LA   R7,1(R7)
         BCT  R3,INLOOP
         CLI  LINEFLAG,X'00'
         BE   DIRECRTN
         MVI  LINEFLAG,X'00'
         B    TPUTLOOP
*  IF NO COMMAND ENTERED, SCAN FOR CHANGED LINES
*
LINECHAN EQU  *
         MVC  FAKEIN(4),=C'0000'
         MVC  SAVECURR(4),CURRADD
         MVC  FAKELIN2(14),BLANKS
CHANGE01 L    R7,AREAADD
         MVI  LINEFLAG,X'00'
         LA   R3,2048
CHANGELO CLC  0(3,R7),=X'11C261'
         BE   CHANGE02
         CLC  0(3,R7),=X'11C3F1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11C5C1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11C6D1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11C761'
         BE   CHANGE02
         CLC  0(3,R7),=X'11C8F1'
         BE   CHANGE02
         CLC  0(3,R7),=X'114AC1'
         BE   CHANGE02
         CLC  0(3,R7),=X'114BD1'
         BE   CHANGE02
         CLC  0(3,R7),=X'114C61'
         BE   CHANGE02
         CLC  0(3,R7),=X'114DF1'
         BE   CHANGE02
         CLC  0(3,R7),=X'114FC1'
         BE   CHANGE02
         CLC  0(3,R7),=X'1150D1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D161'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D2F1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D4C1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D5D1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D661'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D7F1'
         BE   CHANGE02
         CLC  0(3,R7),=X'11D9C1'
         BE   CHANGE02
         CLC  0(3,R7),=X'115AD1'
         BE   CHANGE02
         CLC  0(3,R7),=X'115B61'
         BE   CHANGE02
CHANGE10 LA   R7,1(R7)
         BCT  R3,CHANGELO
         MVC  RESPONSE(50),BLANKS
         CLI  FAKELIN2,C' '
         BE   KEYS
         CLI  FAKELIN2+7,C' '
         BE   KEYS
GOODRANG ST   R7,SAVE7
         ST   R3,SAVE3
         LA   R7,FAKEBLK
         BAL  R14,SKIPLA14
         L    R7,SAVE7
         L    R3,SAVE3
*
         B    KEYS
CHANGE02 MVI  MODFLAG,X'01'
         L    R6,SAVES#
         LA   R6,1(R6)
         ST   R6,SAVES#
*        MVC  0(3,R7),=C'XXX'
         LA   R7,3(R7)
         B    SKIPBUFF
FAKEINSR DC   C' IN '
FAKEIN#  DC   7C' '
FAKEIN   DC   C'0000'
         DC   C' '
FAKEBUFF DC   C' DEL '
FAKELINE DC   20C' '
FAKEBLK  DC   C' DEL '
FAKELIN2 DC   14C' '
         DS   0H
SKIPBUFF MVI  ENDFLAG,X'00'
         MVC  FAKELINE(20),BLANKS
         CLI  6(R7),C'F'
         BNE  CHECK#L
         MVC  FAKELIN2(6),0(R7)
CHECK#L  CLI  6(R7),C'L'
         BNE  CHECKDEL
         MVC  FAKELIN2+7(6),0(R7)
CHECKDEL ST   R3,SAVE3
         XR   R3,R3
         IC   R3,6(R7)
         C    R3,=F'240'
         BNL  NUMTYPE
         L    R3,SAVE3
         B    CHECKD
NUMTYPE  EQU *
         MVC  FAKEIN+3(1),6(R7)
         MVC  FAKEIN#(6),0(R7)
         ST   R7,SAVE7
         LA   R7,FAKEINSR
         BAL  R14,FAKEINRT
         L    R3,SAVE3
         L    R7,SAVE7
CHECKD   CLI  6(R7),C'D'
         BNE  NODELCHA
         MVC  FAKELINE(6),0(R7)
         ST   R7,SAVE7
         ST   R3,SAVE3
         LA   R7,FAKEBUFF
         BAL  R14,SKIPLA14
         L    R7,SAVE7
         L    R3,SAVE3
         B    CHANGELO
NODELCHA LA   R5,72        MAX SCREEN LINE LENGTH
         LR   R2,R7
         LA   R2,7(R2)     POINT TO DATA
         XR   R4,R4
CHANGE90 CLI  0(R2),X'11'  3270 START BUFFER ADDRESS?
         BE   CHANGE91
         LA   R4,1(R4)     ADD 1 TO DATA COUNT
         LA   R2,1(R2)
         BCT  R5,CHANGE90
CHANGE91 MVI  LINEFLAG,X'01'
         L    R5,TOPADD
         L    R6,LASTADD
         MVI  ENDFLAG,X'00'
CHANGE12 CLI  FIXORVAR,X'00'
         BNE  CHANGE03
         TM   DATATYPE,B'01000000'
         BNO  NOCOBOL3
         CLC  0(6,R7),0(R5)
         BE   CHANGE05
         B    CHANGE06
NOCOBOL3 LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'6'
         CLC  0(6,R7),0(R8)
         BE   CHANGE05
         B    CHANGE06
CHANGE03 CLC  0(6,R7),6(R5)
         BE   CHANGE05
CHANGE06 AH   R5,SAVELREC
         CR   R5,R6
         BH   CHANGE11
         B    CHANGE12
CHANGE11 C    R5,LASTADD
         BNH  CHANGE13
         SH   R5,SAVELREC
CHANGE13 ST   R5,CURRADD
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(50),CHANGMSG
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
CHANGMSG DC C'LINE TO BE MODIFIED NOT FOUND. USE " IN  " COMMAND'
         DS   0H
*
CHANGE05 EQU  *
         MVI  DIRECT,X'01'
         LH   R8,SAVELREC
         SH   R8,=H'8'
         SH   R8,COLUMN
         CLI  FIXORVAR,X'00'
         BNE  CHANGE14
         TM   DATATYPE,B'01000000'
         BNO  NOCOBOL4
         AH   R8,=H'2'
NOCOBOL4 AH   R5,COLUMN
         LTR  R4,R4
         BNZ  WHICH1
         BCTR R8,0
         EX   R8,MOVEX401
         B    *+10
MOVEX401 MVC  0(0,R5),BLANKS
         SH   R5,COLUMN
         B    CHANGELO
WHICH1   CR   R8,R4
         BNH  USE8A
         LR   R8,R4
USE8A    LTR  R8,R8
         BZ   *+6
         BCTR R8,0
         LH   R2,SAVELREC
         SH   R2,=H'8'
         TM   DATATYPE,X'40'   COBOL?
         BNO  *+8
         LA   R2,2(R2)
         SH   R2,COLUMN
         BCTR R2,0
         EX   R2,MOVEX401
         EX   R8,CHANGE15
         B    *+10
CHANGE15 MVC  0(0,R5),7(R7)
         SH   R5,COLUMN
         B    CHANGELO
CHANGE14 SH   R8,=H'4'
         MVC  0(2,R5),SAVELREC
         AH   R5,COLUMN
         LTR  R4,R4
         BNZ  WHICH2
         BCTR R8,0
         EX   R8,MOVEX402
         B    *+10
MOVEX402 MVC  12(0,R5),BLANKS
         SH   R5,COLUMN
         B    CHANGELO
WHICH2   CR   R8,R4
         BNH  USE8B
         LR   R8,R4
USE8B    LTR  R8,R8
         BZ   *+6
         BCTR R8,0
*
         LH   R2,SAVELREC
         SH   R2,=H'12'
         SH   R2,COLUMN
         BCTR R2,0
         EX   R2,MOVEX402
         EX   R8,CHANGE16
         B    *+10
CHANGE16 MVC  12(0,R5),7(R7)
         SH   R5,COLUMN
         B    CHANGELO
*
*
*  NO COMMAND WAS ENTERED AND NO LINES WERE CHANGED...
*    LOOK AT FIELD "DIRECT".. IF = 1 DIRECTION IS FORWARD
*    IF = 0 DIRECTION IS BACKWARD
*
DIRECRTN LA  R7,FAKEPFPB
         CLI  DIRECT,X'00'
         BE   PBRTN
         B    PFRTN           IF = 1  GO AHEAD
FAKEPFPB DC C' PF 1 '
         DS 0H
*
*
*  THIS SECTION WILL SCAN THE INPUT AREA BUFFER FOLLOWING THE
*  SBA AND 3270 ADDRESS FOR INPUT COMMAND. THE FUNCTION IS TO
* DETERMINE WHAT ROUTINE WILL BE BRANCHED TO FOR A SPECIFIED
*  COMMAND.
*
*
HERECOMM LA   R3,22    19+3 OF 3270 INFO
         MVC  0(3,R7),=3C' '
FIRSTBLK CLI  0(R7),C' '
         BNE  TRYIT
         LA   R7,1(R7)
         BCT  R3,FIRSTBLK
         B    DIRECRTN
TRYIT    BCTR R7,0
COMMLOOP CLC  0(5,R7),=C' TOP '
         BE   TOPRTN
         CLC  0(3,R7),=C' T '
         BE   TOPRTN
         CLC  0(5,R7),=C' PFK '
         BNE  TRYBOTT
         LR   R1,R7
         LA   R0,1
         CALL FSEPFKEY
         B    TPUTLOOP
TRYBOTT  CLC  0(4,R7),=C' BOT'
         BE   BOTTRTN
         CLC  0(3,R7),=C' B '
         BE   BOTTRTN
         CLC  0(4,R7),=C' PF '
         BE   PFRTN
         CLC  0(4,R7),=C' PB '
         BE   PBRTN
         CLC  0(4,R7),=C' HF '
         BE   HFRTN
         CLC  0(4,R7),=C' HB '
         BE   HBRTN
         CLC  0(6,R7),=C' FIND '
         BE   FINDRTN
         CLC  0(3,R7),=C' F '
         BE   FINDRTN
         CLC  0(5,R7),=C' DSN '
         BE   DSNRTN
         CLC  0(10,R7),=C' AUTOSAVE '
         BNE  NOAUTO
         MVC  SAVES#(4),=F'0'
         MVI  AUTOFLAG,X'01'
         B    TPUTLOOP
NOAUTO   CLC  0(4,R7),=C' DEL'
         BE   DELRTN
          CLC  0(4,R7),=C' UP '
          BE   UPRTN
          CLC  0(6,R7),=C' DOWN '
          BE   DOWNRTN
          CLC  0(4,R7),=C' IN '
          BE   INRTN
         CLC   0(8,R7),=C' INSERT '
         BE   INRTN
         CLC  0(8,R7),=C' COLUMN '
         BE   COLRTN
         CLC  0(5,R7),=C' COL '
         BE   COLRTN
         CLC  0(3,R7),=C' C '
         BE   CHANGRTN
         CLC  0(8,R7),=C' CHANGE '
         BE   CHANGRTN
         CLC  0(6,R7),=C' COPY '
         BNE  CHECKMOV
         MVI  MOVCOPFL,X'01'
         B    MOVECOPY
CHECKMOV CLC  0(6,R7),=C' MOVE '
         BNE  CHKM2
         MVI  MOVCOPFL,X'00'
         B    MOVECOPY
CHKM2    CLC  0(3,R7),=C' M '
         BNE  NOMOVE
         MVI  MOVCOPFL,X'00'
         B    MOVECOPY
NOMOVE   EQU  *
         CLC  0(6,R7),=C' SAVE '
         BNE  SET11
         MVI  SEFLAG,X'00'
         BC   15,SAVERTN
SET11    CLC  0(3,R7),=C' S '
         BNE  SETEST
         MVI  SEFLAG,X'00'
         BC   15,SAVERTN
SETEST   CLC  0(9,R7),=C' SAVEEND '
         BNE  NOSE
         MVI  SEFLAG,X'01'
         BC   15,SAVERTN
NOSE     EQU  *
         CLC  0(5,R7),=C' END '
         BE   ENDRTN
*        CLC  0(3,R7),=C' H '
*        BE   HELPRTN
*        CLC  0(6,R7),=C' HELP '
*        BE   HELPRTN
         CLC  0(4,R7),=C' REN'
         BE   RENUMRTN
         CLC  0(3,R7),=C' R '
         BE   RENUMRTN
         CLC  0(6,R7),=C' DONE '
         BE   END01
         CLC  0(4,R7),=C' SUB'
         BE   SUBRTN
         LA   R7,1(R7)
         LA   R8,CPPL
         LR   R3,R7
         LA   R4,70
X11LOOP  CLI  0(R3),X'11'
         BNE  KEEPGOIN
         MVC  0(5,R3),BLANKS
         B    TSOCMD
KEEPGOIN LA   R3,1(R3)
         BCT  R4,X11LOOP
TSOCMD   LINK EP=FSETSO
         B    TPUTLOOP
*
*
*  THIS NEXT SECTION CONTAINS ROUTINES WHICH ARE BRANCHED TO
*    WHEN THE CORRISPONDING COMMAND WAS ENTERED IN THE BUFFER
*  REG. R7 HAS THE ADDRESS OF THE COMMAND  EX.  PF 2
ENDRTN   CLI  ENDFLAG,X'01'      WAS AN END ISSUED?
         BE   END01
         CLI  MODFLAG,X'00'      DATA MODIFIED?
         BNE   END03
END01    TPUT  CLEER,8,FULLSCR,HOLD    CLEAR SCREEN
         L     R2,16                   CVT ADDRESS
         CLC   228(4,R2),=F'0'         MVT,SVS TSO?
         BNE   RETURN
         LA    2,126    MAKE SWAPPABLE & RESET PRIORITY BACK
*        LINK  EP=FSEPRTY                                  AXC
DUMMSTAE EQU  *
         B     RETURN
END03    MVC   RESPONSE(50),BLANKS
         MVC   RESPONSE(38),ENDMSG
         MVC   COMMAND(19),BLANKS
         MVI   ENDFLAG,X'01' SET FLAG TO SAY USER ENDS WITH
*                            NO SAVE. FLAG MUST BE RESET ON
*                            COMMANDS THAT MODIFY DATA.
         B     TPUTLOOP
ENDMSG DC C'DATA SET NOT SAVED - ENTER SAVE OR END'
         DS    0H
*
MOVECOPY EQU  *
         LA   R7,1(R7)
         MVI  ENDFLAG,X'00'
         LA   R3,30
MOVCOP1  CLI  0(R7),C' '
         BE   MOVCOP2
         LA   R7,1(R7)
         BCT  R3,MOVCOP1
         B    BADFIND1
MOVCOP2  CLI  0(R7),C' '
         BNE  MOVCOP3
         LA   R7,1(R7)
         BCT  R3,MOVCOP2
         B    BADFIND1
MOVCOP3  XR   R4,R4
         LR   R5,R7
MOVCOP4  CLI  0(R7),C' '
         BE   MOVCOP5
         BAL  R14,DIGITIC
         BCT  R3,MOVCOP4
         B    BADFIND1
MOVCOP5  BAL  R14,LTRRTN
         EX   R4,MOVCOP6
         B    *+10
MOVCOP6  PACK DOUBLE(8),0(0,R5)   EXECUTED
         CVB  R6,DOUBLE
         ST   R6,FIELD1
MOVCOP7  CLI  0(R7),C' '
         BNE  MOVCOP8
         LA   R7,1(R7)
         BCT  R3,MOVCOP7
         B    BADFIND1
MOVCOP8  XR   R4,R4
         LR   R5,R7
MOVCOP9  CLI  0(R7),C' '
         BE   MOVCOP10
         BAL  R14,DIGITIC
         BCT  R3,MOVCOP9
         B    BADFIND1
MOVCOP10 BAL  R14,LTRRTN
         EX    R4,MOVCOP11
         B     *+10
MOVCOP11 PACK  DOUBLE(8),0(0,R5)
         CVB   R6,DOUBLE
         ST    R6,FIELD2
MOVCOP12 CLI   0(R7),C'='
         BE    ONLY2
         CLI   0(R7),C' '
         BNE   MOVCOP13
         LA    R7,1(R7)
         BCT   R3,MOVCOP12
ONLY2    MVC   FIELD3(4),FIELD2
         MVC   FIELD2(4),FIELD1
         B     DOINSRT
MOVCOP13 XR   R4,R4
         LR   R5,R7
MOVCOP14 CLI  0(R7),C' '
         BE   MOVCOP15
         BAL  R14,DIGITIC
         BCT  R3,MOVCOP14
         B    BADFIND1
MOVCOP15 BAL  R14,LTRRTN
         EX   R4,MOVCOP16
         B    *+10
MOVCOP16 PACK DOUBLE(8),0(0,R5)
         CVB  R6,DOUBLE
         ST   R6,FIELD3
*
DOINSRT  EQU  *
         L    R2,TOPADD
         L    R3,LASTADD
         AH   R3,SAVELREC
MOVCOPYY BAL   R14,THRURANG
         C    R5,FIELD1
         BE   CHECK#2
         AH   R2,SAVELREC
         B    THRURANG
CHECK#2  ST   R2,STARTING
         CLC  FIELD1(4),FIELD2
         BNE  MOVCOP19
         ST   R2,ENDING
         B    MOVCOPOK
MOVCOP19 BAL  R14,THRURANG
         C    R5,FIELD2
         BE   CHECK#3
         AH   R2,SAVELREC
         B    THRURANG
CHECK#3  ST   R2,ENDING
*
MOVCOPOK EQU  *
         L   R0,ENDING
         AH  R0,SAVELREC
         S   R0,STARTING
         ST  R0,COPYLEN
         GETMAIN EC,LV=(0),A=COPYADD
         LTR R15,R15
         BNZ  NOCORE
         L   R2,COPYADD
         A   R2,COPYLEN
         ST  R2,COPYEND
         L   R3,COPYLEN
         LR  R5,R3
         L   R2,COPYADD
         L   R4,STARTING
         MVCL R2,R4
*
         XR   R6,R6
         L    R7,ENDING
         AH   R7,SAVELREC
         S    R7,STARTING
         LH   R8,SAVELREC
         DR   R6,R8
         CVD  R7,DOUBLE
         UNPK FAKEIN(4),DOUBLE(8)
         OI   FAKEIN+3,X'F0'
         L    R7,FIELD3
         CVD  R7,DOUBLE
         UNPK FAKEIN#(6),DOUBLE(8)
         OI   FAKEIN#+5,X'F0'
         LA   R7,FAKEINSR
         BAL  R14,FAKEINRT
         TM   INFLAG1,X'01'
         BO   GOODIN
         B    TPUTLOOP
GOODIN   EQU  *
*
GO       MVI  MODFLAG,X'01'
         L    R2,CURRADD
         L    R4,COPYADD
         L    R5,COPYEND
MOVCOP20 CR  R4,R5
         BE  MOVORCOP
         LH  R6,SAVELREC
         SH  R6,=H'7'
         CLI  FIXORVAR,X'00'
         BNE  MOVCOP22
         TM   DATATYPE,X'40'
         BNO  MOVCOP21
         EX   R6,MOVCOP23
         B    NEXTCOPY
MOVCOP21 SH   R6,=H'2'
         EX   R6,MOVCOP24
         B    NEXTCOPY
MOVCOP22 SH   R6,=H'6'
         EX   R6,MOVCOP25
         B    NEXTCOPY
MOVCOP23 MVC  6(0,R2),6(R4)
MOVCOP24 MVC  0(0,R2),0(R4)
MOVCOP25 MVC  12(0,R2),12(R4)
*
NEXTCOPY AH   R2,SAVELREC
         AH   R4,SAVELREC
         B    MOVCOP20
MOVORCOP L    R2,SAVES#
         LA   R2,1(R2)
         ST   R6,SAVES#
         TM   MOVCOPFL,X'01'    COPY SPECIFIED?
         BNO  MOVEFUNC
         L    R0,COPYLEN
         FREEMAIN R,LV=(0),A=COPYADD
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(14),=C'LINE(S) COPIED'
         B    TPUTLOOP
*
MOVEFUNC L    R2,FIELD1
         CVD  R2,DOUBLE
         UNPK FAKELIN2(6),DOUBLE(8)
         OI   FAKELIN2+5,X'F0'
         ICM  R2,X'0F',FIELD2
         CVD  R2,DOUBLE
         UNPK FAKELIN2+7(6),DOUBLE(8)
         OI   FAKELIN2+12,X'F0'
         LA   R7,FAKEBLK
         BAL  R14,SKIPLA14
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(13),=C'LINE(S) MOVED'
         B    TPUTLOOP
*
*
DIGITIC  XR    R6,R6
         IC    R6,0(R7)
         C     R6,=F'240'
         BL    BADFIND1
         LA   R4,1(R4)
         LA   R7,1(R7)
         BR   R14
*
*
LTRRTN   LTR  R4,R4
         BZ   BADFIND1
         C    R4,=F'6'
         BH   BADFIND1
         BCTR R4,0
         BR   R14
*
*
THRURANG CR   R2,R3
         BE   DEL26
         CLI  FIXORVAR,X'00'
         BNE  MOVCOP18
         TM   DATATYPE,X'40'
         BNO  MOVCOP17
         PACK DOUBLE(8),0(6,R2)
         B    CHECK#1
MOVCOP17 LR   R6,R2
         AH   R6,SAVELREC
         SH   R6,=H'6'
         PACK DOUBLE(8),0(6,R6)
         B    CHECK#1
MOVCOP18 PACK DOUBLE(8),6(6,R2)
CHECK#1  CVB  R5,DOUBLE
         BR   R14
*
*
SAVERTN  EQU  *
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  SKIPDC
         B    BADLOW
PARMSAVE DS   X
         DS   0F
DDCOUNT  DC   F'1'
PARMS    DC   A(TOPADD,LASTADD,ALLOCDSN,SAVEDSN,MEMBER)
         DC   A(PSCB,SAVEFLAG,ENDFLAG,SAVELREC,DATATYPE)
         DC   A(PARMSAVE,FIXORVAR,CPPL,RESPONSE,DDCOUNT)
         DS   0H
SKIPDC   EQU  *
         MVI   SAVEFLAG,X'00'
         MVI   PARMSAVE,X'00'
         LA    R4,PARMSAVE    RETURN FLAGS ARE SET HERE
         LA    R3,PARMS
         MVC   COMMAND(19),BLANKS
         MVC   RESPONSE(50),BLANKS
*
         LINK EP=FSESAVE
OKSAVE   TM   PARMSAVE,X'01'    SAVE OK?
         BO   SKIPZERO
         B    TPUTLOOP
SKIPZERO EQU  *
         MVI  MODFLAG,X'00'
         MVI  ENDFLAG,X'01'
         MVI  SAVEFLAG,X'01'   FLAG TO INDICATE SAVED
         XR   R6,R6
         ST   R6,SAVES#
         TM   SEFLAG,1         SAVE-END ISSUED?
         BO   ENDRTN
         MVI  SEFLAG,X'00'
         B    TPUTLOOP
*
SUBRTN   EQU  *
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  *+8
         B     BADLOW
         MVI   PARMSAVE,X'00'
         LA    R3,PARMS
         LA    R4,PARMSAVE
         MVC   COMMAND(19),BLANKS
         LA    R7,FAKESAVE
         LINK  EP=FSESAVE
         TM    PARMSAVE,X'01'
         BNO   TPUTLOOP
         MVC   RESPONSE(50),BLANKS
*        DS    0H
OKSAVE1  LA    R8,CPPL
         LA    R7,FAKESUB
         LINK  EP=FSETSO
         MVC   RESPONSE(50),BLANKS
         ICM   R3,15,PSCB
         XR    R4,R4
         IC    R4,7(R3)
         BCTR  R4,0
         EX    R4,MOVEID#
         BC    15,*+10
MOVEID#  MVC   NAMEOFIT(0),0(R3)
         LA    R4,1(R4)
         LA    R3,NAMEOFIT
         AR    R3,R4
         MVC   0(9,R3),=C'.FSEABCDE'
         SR    R0,R0
         SCRATCH SUBDSN
         LTR   R15,R15
         BZ    SCRCODE
         MVC   RESPONSE(46),SCRMSG
         BC   15,TPUTLOOP
SCRMSG   DC C'UNABLE TO DELETE FSEABCDE. USE DELETE COMMAND '
         DS   0H
SCRCODE  CATALOG UNCATSUB
CATCODE  B     TPUTLOOP
FAKESAVE DC    C' S FSEABCDE '
FAKESUB  DC    C'SUBMIT FSEABCDE     '
UNCATSUB CAMLST UNCAT,NAMEOFIT
SUBDSN   CAMLST SCRATCH,NAMEOFIT,,TSOPAK
NAMEOFIT DC    CL44' '
TSOPAK   DC    H'1'
         DC   X'3050200B'           3350           О CHANGE THESE
         DC   C'DAA001'      AXC    VOL SER IMG038 О FOR INSTALLATION
         DC   H'0'
         DS   0H
INRTN    LA   R14,TPUTLOOP
FAKEINRT LA   R7,1(R7)
         MVI  ENDFLAG,X'00'
         MVI  INFLAG1,X'00'
         LA   R3,19
IN01     CLI  0(R7),C' '
         BE   IN02
         LA   R7,1(R7)
         BCT  R3,IN01
         BR   R14
IN02     CLI  0(R7),C' '
         BNE  IN03
         LA   R7,1(R7)
         BCT  R3,IN02
INBAD    MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(29),INMSG1
INGETOUT MVC  COMMAND(19),BLANKS
         BR   R14
INMSG1   DC   C'INVALID OR MISSING PARAMETERS'
         DS   0H
IN03     LA   R4,0
         LR   R5,R7
IN04     CLI  0(R7),C' '
         BE   IN05
         XR   R6,R6
         IC   R6,0(R7)
         C    R6,=F'240'
         BL   INBAD
         LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,IN04
         B    INBAD
IN05     CH   R4,=H'6'
         BH   INBAD
         BCTR R4,0
         EX   R4,IN06
         B    *+10
IN06     PACK DOUBLE(8),0(0,R5)
         CVB  R4,DOUBLE
         ST   R4,LOWER
IN07     CLI  0(R7),C' '
         BNE  IN08
         LA   R7,1(R7)
         BCT  R3,IN07
         B    INBAD
IN08     LA   R4,0
         LR   R5,R7
IN09     CLI  0(R7),C' '
         BE   IN10
         XR   R6,R6
         IC   R6,0(R7)
         C    R6,=F'240'
         BL   INBAD
         LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,IN09
IN10     BCTR R4,0
         EX   R4,IN11
         B    *+10
IN11     PACK DOUBLE(8),0(0,R5)
         CVB  R4,DOUBLE
         LTR  R4,R4
         BZ   INBAD
         C    R4,=F'1000'
         BNL  INBAD
         STH  R4,INCOUNT
         A    R4,LOWER
         ST   R4,UPPER
         B    INMAIN
         LTORG
         DS   0H
INMAIN   EQU  *
         L    R5,TOPADD
         MVI INFLAG,X'01'    FIRST TIME INSERT
         L    R6,LASTADD
         AH   R6,SAVELREC
IN12     CR   R5,R6
         BE   SKIPFIT
IN72     CR   R5,R6
         BE   DELNONE
*
         CLI  FIXORVAR,X'00'
         BNE  IN13
         TM   DATATYPE,B'01000000'
         BNO  IN14
         XR   R1,R1
         TRT  0(6,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(6,R5)
         CVB  R7,DOUBLE
         B    IN16
IN14     XR   R1,R1
         LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'8'
         TRT  0(8,R8),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(8,R8)
         CVB  R7,DOUBLE
         B    IN16
IN13     XR   R1,R1
         TRT  4(8,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),4(8,R5)
         CVB  R7,DOUBLE
IN16     C    R7,LOWER
         BNH  IN90
         CLI  INFLAG,X'00'
         BE   NOIN
         MVC  CURRADD(4),TOPADD
         L    R5,CURRADD
         B    IN18
NOIN     L    R7,LOWER
         B    DELNONE
IN90     BNE  IN17
         AH   R5,SAVELREC
         ST   R5,CURRADD
         B    IN18
IN17     AH   R5,SAVELREC
         MVI  INFLAG,X'00'
         B    IN72
IN18     MVI  INFLAG,X'00'
         CR   R5,R6
         BNL  SKIPFIT
         L    R3,UPPER
         CLI  FIXORVAR,X'00'
         BNE  IN19
         TM   DATATYPE,B'01000000'
         BNO  IN20
         XR   R1,R1
         TRT  0(6,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(6,R5)
         CVB  R7,DOUBLE
         B    IN21
IN20     XR   R1,R1
         LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'8'
         TRT  0(8,R8),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(8,R8)
         CVB  R7,DOUBLE
         B    IN21
IN19     XR   R1,R1
         TRT  4(8,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),4(8,R5)
         CVB  R7,DOUBLE
IN21     CR   R3,R7
         BL   IN23
IN22     MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(35),INMSG2
         MVC  COMMAND(19),BLANKS
         BR   R14
INMSG2   DC   C'RANGE EXTENDS INTO EXISTING LINE(S)'
         DS   0H
IN23     EQU  *
*  IT FITS
         L    R5,LASTADD
         S    R5,CURRADD
         AH   R5,SAVELREC
         ST   R5,XLEN
         MVC  SAVELAST(4),LASTADD
         LH   R5,INCOUNT
         MH   R5,SAVELREC
         L    R6,LASTADD
         AR   R6,R5
         C    R6,BOTTADD
         BNH  IN24
NOCORE   MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         MVC  RESPONSE(48),INMSG3
         BR   R14
INMSG3 DC C'STORAGE NOT AVAILABLE FOR INSERT. SAVE AND END.   '
         DS   0H
IN24    ST    R6,LASTADD
        L     R6,CURRADD
        L     R7,XLEN
        LR    R5,R7
        LH    R4,SAVELREC
        MH    R4,INCOUNT
        A     R4,CURRADD
         ST    R6,SAVEFROM
        ST    R4,AREASIZE
        LR    R3,R5
        ST    R3,FREELEN
        LR    R0,R5
*       ICM   R0,8,=X'7F000000'        FROM SUBPOOL 127
        GETMAIN EC,LV=(0),A=FREEMAI
        LTR   R15,R15
        BNZ   NOCORE
        L     R2,FREEMAI
        MVCL  R2,R6
        L     R2,FREEMAI
        LR    R3,R5
        L     R4,AREASIZE
        MVCL  R4,R2
         MVI  MODFLAG,X'01'
        L    R0,FREELEN
        FREEMAIN R,LV=(0),A=FREEMAI
*
*
*  INCOUNT HAS # OF RECORDS TO BE INSERTED
*  CURRADD HAS ADDRESS OF IN-CORE FIRST RECORD TO BE INITIATED
*
         L    R4,CURRADD
         LH   R5,SAVELREC
         MH   R5,INCOUNT
         XR   R6,R6
         L    R7,=X'40000000'
*
         MVCL R4,R6
         L    R5,CURRADD
         LH   R3,INCOUNT
IN25     L    R6,LOWER
         LA   R6,1(R6)
         ST   R6,LOWER
         CLI  FIXORVAR,X'00'
         BNE  IN26
         TM   DATATYPE,B'01000000'
         BO   IN27
         CVD  R6,DOUBLE
         LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'8'
         UNPK 0(8,R8),DOUBLE(8)
         OI   7(R8),X'F0'
         B    CLEANUP
IN27     CVD  R6,DOUBLE
         UNPK 0(6,R5),DOUBLE(8)
         OI   5(R5),X'F0'
         B    CLEANUP
IN26     CVD  R6,DOUBLE
         UNPK 4(8,R5),DOUBLE(8)
         OI   11(R5),X'F0'
         MVC  0(2,R5),SAVELREC
         MVC  2(2,R5),=X'0000'
CLEANUP  AH   R5,SAVELREC
         BCT  R3,IN25
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         MVI  INFLAG1,X'01'
         ICM  R6,X'0F',SAVES#
         LA   R6,1(R6)
         ST   R6,SAVES#
         BR   R14
SKIPFIT  LH   R6,INCOUNT
         MH   R6,SAVELREC
         L    R5,CURRADD
         AR   R5,R6
         SH   R5,SAVELREC
         C    R5,BOTTADD
         BH   NOCORE
         ST   R5,LASTADD
         L    R4,CURRADD
         LR   R5,R6
*
         XR   R6,R6
         ICM  R7,15,=X'40000000'
         MVCL R4,R6
         LH   R3,INCOUNT
         L    R5,CURRADD
         MVI  MODFLAG,X'01'
         B    IN25
*
*
         LTORG
         DS   0H
*
*
RENUMRTN MVI  LISTFLAG,X'00'
         LA  R14,TPUTLOOP
REALONE  MVI  ENDFLAG,X'00'
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  RENUMLOW
         B    BADLOW
RENUMLOW LA    R7,1(R7)
         LA    R3,19
RENUM01  CLI   0(R7),C' '
         BE    RENUM02
         LA    R7,1(R7)
         BCT  R3,RENUM01
         B    RENUM07
RENUM02  CLI  0(R7),C' '
         BNE  RENUM03
         LA   R7,1(R7)
         BCT  R3,RENUM02
         MVC  SAVELINE(4),=F'10'
         MVC  NUMVALUE(2),=H'10'
         B    RENUM07
RENUM03  LA   R4,0            DIGIT COUNT
         LR   R5,R7           SAVE BEGIN ADDR.
RENUM04  CLI  0(R7),C' '
         BE   RENUM05
         XR   R6,R6
         IC   R6,0(R7)         CHECK IF NUMERIC
         C    R6,=F'240'
         BL   BADFIND1
         LA   R4,1(R4)         ADD TO DIGIT COUNT
         LA   R7,1(R7)
         BCT  R3,RENUM04
RENUM05  LTR  R4,R4
         BZ   BADFIND1
         C    R4,=F'6'         MORE THAN 6 DIGITS?
         BH   BADFIND1
         BCTR R4,0
         EX   R4,RENUM06
         B    *+10
RENUM06  PACK DOUBLE(8),0(0,5)
         CVB  R6,DOUBLE
         C    R6,=F'999999'
         BH   BADFIND1
         ST   R6,SAVELINE
RENUM14  CLI   0(R7),C' '
         BNE   RENUM15
         LA    R7,1(R7)
         BCT   R3,RENUM14
         MVC   NUMVALUE(2),=H'10'
         B     RENUM07
RENUM15  XR    R4,R4
         LR    R5,R7
RENUM16  CLI   0(R7),C' '
         BE    RENUM17
         XR    R6,R6
         IC    R6,0(R7)
         C     R6,=F'240'
         BL    BADFIND1
         LA    R7,1(R7)
         LA    R4,1(R4)
         BCT   R3,RENUM16
RENUM17  LTR   R4,R4
         BZ    BADFIND1
         C     R4,=F'4'
         BH    BADFIND1
         BCTR  R4,0
         EX    R4,RENUM18
         B     *+10
RENUM18  PACK  DOUBLE(8),0(0,R5)
         CVB   R6,DOUBLE
         LTR   R6,R6
         BZ    BADFIND1
         C     R6,=F'1000'
         BH    BADFIND1
         STH   R6,NUMVALUE
RENUM07  EQU  *
         L    R2,TOPADD
         L    R3,LASTADD
         AH   R3,SAVELREC
RENUMXXX L    R7,LASTADD
         AH   R7,SAVELREC
         S    R7,TOPADD
         LH   R8,SAVELREC
         XR   R6,R6
         DR   R6,R8         FIND OUT # OF RECS
*  R7 HAS # OF USED RECORDS
         MH   R7,NUMVALUE
         A    R7,SAVELINE
         C    R7,=F'999999'   CHECK FOR LINE # TOO BIG
         BH   RENUM11         TOO LARGE
         L   R4,SAVELINE
         SH  R4,NUMVALUE
         ST  R4,SAVELINE
RENUM08  CR   R2,R3
         BE   RENUM09
         L    R4,SAVELINE
         AH   R4,NUMVALUE
         ST   R4,SAVELINE
         CLI  FIXORVAR,X'00'  FIXED TYPE REC LENGTH?
         BNE  RENUM12
         CVD  R4,DOUBLE
         TM   DATATYPE,B'01000000'
         BNO  NOCOBOL5
         UNPK 0(6,R2),DOUBLE(8)
         OI   5(R2),X'F0'
         B    RENUM13
NOCOBOL5 LR   R5,R2
         AH   R5,SAVELREC
         SH   R5,=H'8'
         UNPK 0(8,R5),DOUBLE(8)
         OI   7(R5),X'F0'
         B    RENUM13
RENUM12  CVD  R4,DOUBLE
         UNPK 4(8,R2),DOUBLE(8)
         OI   11(R2),X'F0'
RENUM13  AH   R2,SAVELREC
         B    RENUM08
RENUM09  MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(19),RENUMSG1
         MVC  COMMAND(19),BLANKS
         MVI  MODFLAG,X'01'
         MVC  NUMVALUE(2),=H'10'
         MVC  SAVELINE(4),=F'10'
         BR   R14
RENUMSG1 DC   C'DATA SET RENUMBERED'
         DS   0H
RENUM11  MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(47),RENUMSG2
         MVC  COMMAND(19),BLANKS
         BR   R14
RENUMSG2 DC C'LINE NUMBERS EXCEED 6 DIGITS. USE SMALLER VALUE'
         DS   0H
PFRTN    BAL  R14,DIGITRTN
         LA   R5,20
DOWNDIG  MH   R5,SAVELREC
         MH   R5,DIGIT#
         A    R5,CURRADD
         C    R5,LASTADD
         BH   BOTTRTN
         ST   R5,CURRADD
         MVI  ENDFLAG,X'00'
         MVI  DIRECT,X'01'
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
*
*
PBRTN    BAL  R14,DIGITRTN
         LA   R5,20
UPDIG    MH   R5,SAVELREC
         MH   R5,DIGIT#
         L    R6,CURRADD
         SR   R6,R5
         C   R6,TOPADD
         BL   TOPRTN
         MVI  ENDFLAG,X'00'
         ST   R6,CURRADD
         MVI  DIRECT,X'00'
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
*
*
DIGITRTN LA   R7,3(R7)         POINT TO X'40'
         LA   R3,8             MAX COUNT
PFLOOP1  CLI  0(R7),C' '
         BNE  PF02
         LA   R7,1(R7)
         BCT  R3,PFLOOP1
*
*  NO DIGIT SPECIFIED (DIGIT# = 1)
*
         LA   R5,1
         STH  R5,DIGIT#
         BR   R14
*
*  DIGIT SPECIFIED
*
PF02     XR   R4,R4
         LR   R5,R7
PFLOOP2  CLI  0(R7),C' '
         BE   PF03
         XR   R6,R6
         IC   R6,0(R7)
         C    R6,=F'240'
         BL   INBAD
         LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,PFLOOP2
*
PF03     CH   R4,=H'100'
         BH   INBAD
         LTR  R4,R4
         BZ   *+6
         BCTR R4,0
         EX   R4,PF04
         B    *+10
PF04     PACK DOUBLE(8),0(0,R5)
         CVB  R4,DOUBLE
         STH  R4,DIGIT#
         BR   R14
DIGIT#   DS   H
*
*
DELRTN   EQU  *
         LA   R14,TPUTLOOP
SKIPLA14 MVI  ENDFLAG,X'00'
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  NOTEMPTY
         B    BADLOW
NOTEMPTY LA   R7,1(R7)
         LA   R3,19
DEL01    CLI  0(R7),C' '
         BE   DEL02
         LA   R7,1(R7)
         BCT  R3,DEL01
         B    DEL26
DEL02    CLI  0(R7),C' '
         BNE  DEL03
         LA   R7,1(R7)
         BCT  R3,DEL02
         B    DEL26
DEL03    LA   R4,0
         LR   R5,R7
DEL04    CLI  0(R7),C' '
         BE   DEL05
         XR   R6,R6
         IC   R6,0(R7)
         C    R6,=F'240'
         BL   DEL26
         LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,DEL04
         CH   R4,=H'6'
         BH   DEL26
* NO UPPER BOUND SPECIFIED
         B    DELUPPER
DEL05    CH   R4,=H'6'
         BH   DEL26
         BCTR R4,0
         EX   R4,DEL06
         B    *+10
DEL06    PACK DOUBLE(8),0(0,R5)
         CVB  R4,DOUBLE
         ST   R4,LOWER
DEL07    CLI  0(R7),C' '
         BNE  DEL08
         LA   R7,1(R7)
         BCT  R3,DEL07
DELUPPER MVC  UPPER(4),=4X'00'
         BC   15,DELMAIN
*
DEL08    XR   R4,R4
         LR   R5,R7
DEL09    CLI  0(R7),C' '
         BE   DEL10
         SR   R6,R6
         IC   R6,0(R7)
         C    R6,=F'240'
         BL   DEL26
         LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,DEL09
DEL10    CH   R4,=H'6'
         BH   DEL26
         BCTR R4,0
         EX   R4,DEL11
         B    *+10
DEL11    PACK DOUBLE(8),0(0,R5)
         CVB  R4,DOUBLE
         ST   R4,UPPER
*
DELMAIN  EQU  *
         ICM  R5,15,TOPADD
         ICM  R6,15,LASTADD
         AH   R6,SAVELREC
DEL12    CR   R5,R6
         BE   DELNONE
         CLI  FIXORVAR,X'00'
         BNE  DEL13
         TM   DATATYPE,B'01000000'
         BNO  DEL14
         SR   R1,R1
         TRT  0(6,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(6,R5)
         CVB  R7,DOUBLE
         BC   15,DEL16
DEL14    XR   R1,R1
         LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'8'
         TRT  0(8,R8),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(8,R8)
         CVB  R7,DOUBLE
         BC   15,DEL16
DEL13    XR   R1,R1
         TRT  4(8,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),4(8,R5)
         CVB  R7,DOUBLE
DEL16    C    R7,LOWER
         BNH  DEL89
         L    R7,LOWER
         B    DELBAD
DEL89    BNE  DEL17
         ST   R5,CURRADD
         BC   15,DEL18
DEL17    AH   R5,SAVELREC
         B    DEL12
DELNONE  L    R7,LOWER
DELBAD   CVD  R7,DOUBLE
         UNPK DELMSG2(8),DOUBLE(8)
         OI   DELMSG2+7,X'F0'
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(30),DELMSG1
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
*
DELMSG1  DC C'LINE NUMBER '
DELMSG2  DS 8C
DELMSG3  DC C' NOT FOUND'
         DS 0H
*
DEL18    LA   R3,1
         L    R5,UPPER
         LTR  R5,R5
         BNZ  DEL19
         MVC  UPPER(4),LOWER
         L    R5,UPPER
DEL19    C    R5,LOWER
         BL   DEL26
         L    R5,CURRADD
         L    R6,LASTADD
         AH   R6,SAVELREC
DEL20    CR   R5,R6
         BE   DEL21
         CLI  FIXORVAR,X'00'
         BNE  DEL22
         TM   DATATYPE,B'01000000'
         BNO  DEL23
         XR   R1,R1
         TRT  0(6,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(6,R5)
         CVB  R7,DOUBLE
         B    DEL24
DEL23    XR   R1,R1
         LR   R8,R5
         AH   R8,SAVELREC
         SH   R8,=H'8'
         TRT  0(8,R8),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),0(8,R8)
         CVB  R7,DOUBLE
         B    DEL24
DEL22    XR   R1,R1
         TRT  4(8,R5),TRTTABLE
         LTR  R1,R1
         BNZ  DEL15
         PACK DOUBLE(8),4(8,R5)
         CVB  R7,DOUBLE
DEL24    C    R7,UPPER
         BNH  DEL90
         L    R7,UPPER
         B    DELBAD
DEL90    BE   DEL25
         AH   R5,SAVELREC
         LA   R3,1(R3)
         B    DEL20
DEL21    L    R7,UPPER
         B    DELBAD
DEL15    MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(32),DELMSG4
         MVC  COMMAND(19),BLANKS
         ST   R5,CURRADD
         BC   15,TPUTLOOP
DELMSG4  DC C'INVALID LINE NUMBER - CORRECT IT'
         LTORG
         DS   0H
DEL25    EQU  *
         MH   R3,SAVELREC
         L    R8,LASTADD
         AH   R8,SAVELREC
         S    R8,TOPADD
         SR   R8,R3
         LTR  R8,R8
         BNZ  DEL92
         L    R8,TOPADD
         ST   R8,CURRADD
         SH   R8,SAVELREC
         ST   R8,LASTADD
         B    DEL93
DEL92    L    R4,CURRADD
         LR   R6,R3
         A    R6,CURRADD
         L    R5,LASTADD
         S    R5,CURRADD
         SR   R5,R3
         AH   R5,SAVELREC
         LR   R7,R5
         MVCL R4,R6
         L    R5,LASTADD
         SR   R5,R3
         ST   R5,LASTADD
*
*
*
*
DEL93    MVI  MODFLAG,X'01'
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(16),DELMSG7
         ICM  6,X'0F',SAVES#
         LA   6,1(6)
         ST   6,SAVES#
         MVC  COMMAND(19),BLANKS
         BR   R14
DELMSG7  DC   C'LINE(S) DELETED '
         DS   0H
DEL26    MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         MVC  RESPONSE(23),DELMSG8
         BC   15,TPUTLOOP
DELMSG8  DC C'INVALID RANGE SPECIFIED'
         DS  0H
DOWNRTN  LA   R7,2(R7)
         BAL  R14,DIGITRTN
         LA   R5,1
         BC   15,DOWNDIG
*
*
UPRTN    BAL  R14,DIGITRTN
         LA   R5,1
         B    UPDIG
*
*
FINDRTN  MVI  ENDFLAG,X'00'
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  FINDSK
BADLOW   MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(17),LOWFIND
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
LOWFIND  DC   C'DATA SET IS EMPTY'
SAVECHAR DS   C
         DS   0H
FINDSK   LA   R7,1(R7)
         MVI  DIRECT,X'01'
         LA   R3,19
FIND01   CLI  0(R7),C' '
         BE   FIND02
         LA   R7,1(R7)
         BCT  R3,FIND01
         B    BADFIND1
FIND02   CLI  0(R7),C' '
         BNE  FIND03
         LA   R7,1(R7)
         BCT  R3,FIND02
         B    TRYREPET
FIND03   XR   R2,R2
         IC   R2,0(R7)
         STC  R2,SAVECHAR
         LA   R7,1(R7)
         LR   R5,R7
         LA   R4,0
FIND04   CLC  0(1,R7),SAVECHAR
         BNE  FIND10
         LTR  R4,R4
         BZ   BADFIND1
         BCTR R4,0
FIND11   MVC  FINDSTR(17),BLANKS
         EX   R4,FIND12
         LA   R4,1(R4)
         ST   R4,FINDLENG
         B    FIND05
FIND12   MVC  FINDSTR(0),0(R5)   -- EXECUTED -
FIND10   LA   R4,1(R4)
         LA   R7,1(R7)
         BCT  R3,FIND04
         B    BADFIND1
FIND05   L    R6,CURRADD
         LH   R7,SAVELREC
         L    R8,LASTADD
         AH   R8,SAVELREC
FIND06   LTR  R4,R4
         BZ   BADFIND1
         BCTR R4,0
FIND07   EX   R4,FIND08
         B    *+10
FIND08   CLC  0(0,R6),0(R5)
         BNE  FIND99
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
FIND99   LA   R6,1(R6)
         BCT  R7,FIND07
         CR   R6,R8
         BE   BADFIND2
         LH   R7,SAVELREC
         ST   R6,CURRADD
         B    FIND07
BADFIND1 MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(22),FINDMSG1
         B    TPUTLOOP
BADFIND2 MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(16),FINDMSG2
         B    TPUTLOOP
FINDMSG1 DC   C'INVALID COMMAND FORMAT'
FINDMSG2 DC   C'STRING NOT FOUND'
         DS   0H
TRYREPET L   R4,FINDLENG
         LA  R5,FINDSTR
         LH  R6,SAVELREC
         A   R6,CURRADD
         C   R6,LASTADD
         BH  FIND05
         ST  R6,CURRADD
         B   FIND05
         DS  0F
FINDLENG DC  F'0'
FINDSTR  DC  17C' '
         DS  0H
*
*
CHANGRTN EQU *
         ICM  R6,X'0F',SAVES#
         LA   R6,1(R6)
         ST   R6,SAVES#
         B    CALLCHG
CPARMS   DC   A(TOPADD,LASTADD,SAVELREC,MODFLAG,RESPONSE,COMMAND)
         DC   A(DATATYPE,FIXORVAR)
         DS   0H
CALLCHG  LA   R7,1(R7)
         LA   R3,60
         MVI  ENDFLAG,X'00'
         LA   R4,CPARMS
       LINK EP=FSECHANG
         B    TPUTLOOP
*
*
         DS   0H
COLRTN  EQU  *
         MVI  ENDFLAG,X'00'
         LA   R7,1(R7)
         LA   R3,19
         L    R5,TOPADD
         L    R6,LASTADD
         CR   R5,R6
         BNH  COLLOOP
         B    BADLOW
COLLOOP  CLI  0(R7),C' '
         BE   COLNUM
         LA   R7,1(R7)
         BCT  R3,COLLOOP
COLMOVES MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(35),COLMSG
         B    TPUTLOOP
COLMSG   DC   C'MISSING OR INVALID COLUMN SPECIFIED'
         DS   0H
COLNUM   CLI  0(R7),C' '
         BNE  COLNUM2
         LA   R7,1(R7)
         BCT  R3,COLNUM
         B    COLMOVES
*
COLNUM2  EQU  *
         LR   R4,R7
         LA   R3,3
         LA   R6,0
COLLOOP2 CLI  0(R7),C' '
         BE   COLNUM3
         LA   R6,1(R6)
         SR   R5,R5
         IC   R5,0(R7)
         C    R5,=F'240'
         BL   COLMOVES
         LA   R7,1(R7)
         BCT  R3,COLLOOP2
COLNUM3  BCTR R6,0
         EX   R6,COLNUM4
         B    *+10
COLNUM4  PACK DOUBLE(8),0(0,R4)
         CVB  R5,DOUBLE
         LTR  R5,R5
         BZ   COLMOVES
         CLI  FIXORVAR,X'00'
         BNE  NEXT4
         CH   R5,SAVELREC
         BH   COLMOVES
         BCTR R5,0
         B    SKIPMORE
NEXT4    AH   R5,=H'12'
         CH   R5,SAVELREC
         BH   COLMOVES
         SH   R5,=H'13'
SKIPMORE STH  R5,COLUMN
         MVC  OUTCOL(3),=3C' '
         EX   R6,COLNUM5
         B    *+10
COLNUM5  MVC  OUTCOL(0),0(R4)
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         B    TPUTLOOP
*
*
*
ABENDTOP L    R4,0(R1)    A(PARMLIST IN SDWA)
         L    R4,4(R4)    A(SAVEREG)
*
         LM   R6,R3,0(R4)
         MVI  DIRECT,X'01'
*        MVC  CURRADD(4),TOPADD
         MVI  ENDFLAG,X'00'
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),RESPONSE
         LA   R6,RESPONSE
         LA   R5,SDWA
GETSYSCD LINK EP=FSESYSCD
         B    TPUTLOOP
TOPRTN   EQU  *
         MVC  CURRADD(4),TOPADD
         MVI  ENDFLAG,X'00'
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(15),TOPMSG
         MVC  COMMAND(19),BLANKS
         MVI  DIRECT,X'01'
         B    TPUTLOOP
TOPMSG   DC   C'TOP OF DATA SET'
         DS   0H
PA1RTN   L    R1,0(R1)
         LM   R0,R15,8(R15)
         B    TPUTLOOP
*
*
DSNRTN   MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(50),SAVEDSN
         MVC  COMMAND(19),BLANKS
         MVI  ENDFLAG,X'00'
         B    TPUTLOOP
*
*
BOTTRTN  LA   R5,20
         MH   R5,SAVELREC
         L    R6,LASTADD
         SR   R6,R5
         C    R6,TOPADD
         BL   TOPRTN
         ST   R6,CURRADD
         MVC  COMMAND(19),BLANKS
         MVC  RESPONSE(50),BLANKS
         MVC  RESPONSE(18),BOTTMSG
         MVI  ENDFLAG,X'00'
         MVI  DIRECT,X'00'
         B    TPUTLOOP
BOTTMSG  DC   C'BOTTOM OF DATA SET'
         DS   0H
*
*
HFRTN    LA   R5,10
         MH   R5,SAVELREC
         A    R5,CURRADD
         C    R5,LASTADD
         BH   BOTTRTN
         ST   R5,CURRADD
         MVI  ENDFLAG,X'00'
         MVC  RESPONSE(50),BLANKS
         MVC  COMMAND(19),BLANKS
         MVI  DIRECT,X'01'
         B    TPUTLOOP
*
*
HBRTN    LA   R5,10
         MH   R5,SAVELREC
         L    R6,CURRADD
         SR   R6,R5
         C    R6,TOPADD
         BL   TOPRTN
         ST   R6,CURRADD
         MVI  ENDFLAG,X'00'
         MVC  COMMAND(19),BLANKS
         MVC  RESPONSE(50),BLANKS
         MVI  DIRECT,X'00'
         B    TPUTLOOP
*
*
RETURN   EQU  *
*
*
LOOK3    EQU  *
          LA   R1,CPPL
          LINK EP=FSEFREE
*
*
*
*
*  FOUR FIELDS ARE USED THROUGHOUT THIS PROGRAM TO
*    ADDRESS THE RECORDS FOR THE FULLSCREEN AND TO MAKE
*    BOUNDARIES BETWEEN START OF SYSEDIT, LAST USED LINE
*    AND THE LAST ABSOLUTE LINE (RECORD).
*
*  TOPADD  IS THE ABSOLUTE START OF SYSEDIT
*  CURRADD IS THE ADDRESS OF THE START OF THE CURRENT RECORD
*  LASTADD IS THE ADDRESS OF THE LAST USED RECORD
*  BOTTADD IS THE ADDRESS OF THE LAST USABLE RECORD.
*
GOBACK   L    R13,4(R13)
         LM 14,12,12(13)
         BR 14
         LTORG
         DS  0F
CPPL     EQU  *
CB       DS   F     COMMAND BUFFER
UPT      DS   F     USER PROFILE TABLE
PSCB     DS   F     PROTECTED STEP CONTROL BLOCK
ECT      DS   F     ENVIRONMENT CONTROL TABLE
ALLOCDSN DC H'44'
DSNAME   DC   56C' '
MSG2     DC   C'ENTER DSNAME-'
MSG3     DC   C'INVALID DSNAME, REENTER-'
         DS   0H
MOVEDSN  MVC  DSNAME(0),0(R5)
SAVEDSN  DC   55C' '
SAVEBUFF DC   60C' '
STAEFLAG DC   X'00'
MSG4     DC   C'DATA SET NOT CATALOGED'
VOLSER   DC   6X'00'
         DS   0F
MSG5     DC   C'DATA SET NOT IN VOLUME'
FORMAT   DC   X'00'
MOVEIN   DS 0H
         MVC  0(0,R3),DSNAME
DATATYPE DC   X'00'
HEXTABLE DC   X'400102030405060708090A0B0C0D0E0F10111213141516171819'
         DC    X'1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132'
         DC    X'333435363738393A3B3C3D3E3F404142434445464748494A4B'
         DC    X'4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364'
         DC    X'65666768696A6B6C6D6E6F707172737475767778797A7B7C7D'
         DC    X'7E7F80C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6'
         DC    X'D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8'
         DC X'C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1'
         DC X'E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FA'
         DC X'FBFCFDFEFF'
        DS  0F
NEWMEMBE DC X'0008',6X'00'
         DC AL4(ALLOCDSN)
DDNAME   DC C'FSEFILE '
DA08BLK  DC 16C' '
         DC  4X'00'
DA08PQTY DC 4X'00'
DA08SQTY DC 4X'00'
         DC 4X'00'
MEMBER   DC 8C' '
         DC 8C' '
DAIRFLAG DC 3X'08'
DA08CTL  DC B'00000000'
         DC 4X'00'
LIST     DC 8C' '
         DS 0F
*
DAPL     EQU *
DAPLUPT  DS F
DAPLECT  DS F
DAPLECB  DC F'0'
DAPLPSCB DS F
DAPLDAPB DS F
  DS 0D
DOUBLE   DS  D
SAVECURR  DS  F
FIELD1    DS  F
FIELD2    DS  F
FIELD3    DS  F
STARTING  DS  F
ENDING    DS  F
MOVCOPFL  DS  X
         DS  0F
COPYADD  DS  F
COPYEND  DS  F
COPYLEN  DS  F
BOTTADD  DS  F
TOPADD   DS  F
AREASIZE DS  F
SAVELREC DC  H'0'
RECORDS  DC  H'0'
AREA     DS  255C
FSEDCB DCB MACRF=GM,DDNAME=FSEFILE,DSORG=PS,EODAD=EODAD1
FSEDCB2 DCB DDNAME=FSEFILE,MACRF=GM,DSORG=PS,EODAD=EODAD2
*SEDCB3 DCB DDNAME=FSEFILE,MACRF=PM,DSORG=PS,EODAD=EODAD3
FSEDCBPO DCB DDNAME=FSEFILE2,MACRF=(R),DSORG=PO
     DS  0H
LST  DC H'1',H'58'
MEMBLDL DC 8C' '
        DS 70C
  DS 0F
LASTADD   DS  F
CURRADD   DS  F
SAVELINE  DC  F'-10'
          DS  0D
NEWLINE   DS  D
TRTTABLE  DC  240X'FF',10X'00',6X'FF'
    DS  0F
POPDS    DC X'0008',6X'00',AL4(ALLOCDSN),C'FSEFILE2'
         DC 16C' ',16X'00',16C' '
         DC  3X'08',B'00000000',4X'00',8C' '
    DS  0F
*
*  THIS IS THE DC SECTION USED TO OUTPUT THE FULL SCREEN
CLEER     DC X'C11140403C404000'
SCREEN    EQU *
       DC X'C111C1503C404000'
         DC X'11C1501DE8',C'==>',X'1DC813'
COMMAND   DC 21C' '
          DC         C'==>'
RESPONSE  DC 52C' '
         DC X'11C2601DC8'
LINE#1   DS 7C
LINE1    DS 72C
         DC X'11C3F01DC8'
LINE#3   DS 7C
LINE3    DS 72C
         DC X'11C5401DC8'
LINE#4   DS 7C
LINE4    DS 72C
         DC X'11C6501DC8'
LINE#5   DS 7C
LINE5    DS 72C
         DC X'11C7601DC8'
LINE#6   DS 7C
LINE6    DS 72C
         DC X'11C8F01DC8'
LINE#7   DS 7C
LINE7    DS 72C
         DC X'114A401DC8'
LINE#8   DS 7C
LINE8    DS 72C
         DC X'114B501DC8'
LINE#9   DS 7C
LINE9    DS 72C
         DC X'114C601DC8'
LINE#10  DS 7C
LINE10   DS 72C
         DC X'114DF01DC8'
LINE#11  DS 7C
LINE11   DS 72C
         DC X'114F401DC8'
LINE#12  DS 7C
LINE12   DS 72C
         DC X'1150501DC8'
LINE#13  DS 7C
LINE13   DS 72C
         DC X'11D1601DC8'
LINE#14  DS 7C
LINE14   DS 72C
         DC X'11D2F01DC8'
LINE#15  DS 7C
LINE15   DS 72C
         DC X'11D4401DC8'
LINE#16  DS 7C
LINE16   DS 72C
         DC X'11D5501DC8'
LINE#17  DS 7C
LINE17   DS 72C
         DC X'11D6601DC8'
LINE#18  DS 7C
LINE18   DS 72C
         DC X'11D7F01DC8'
LINE#19  DS 7C
LINE19   DS 72C
         DC X'11D9401DC8'
LINE#20  DS 7C
LINE20   DS 72C
         DC X'115A501DC8'
LINE#21  DS 7C
LINE21   DS 72C
        DC X'115B601DC8'
LINE#22 DS 7C
LINE22  DS 72C
         DC X'115CF01DE8'
 DC C'COL '
OUTCOL  DC C'1  '
        DC C'О'
  DC C'---О',13CL5'----О',C'--C',X'11C1501DE8',C'==>',X'1DC813'
SIZESCR  EQU  (*-SCREEN)
   DS  0F
AREAADD DS  F
SAVELAST DS F
XLEN     DS F
INCOUNT  DS H
UPPER    DS F
LOWER    DS F
COLUMN  DC  H'0'
DIRECT  DC  X'01'
USEFLAG  DC X'00'
SAVEFLAG DC X'00'
INFLAG   DS  X
INFLAG1  DS  X
MODFLAG  DC X'00'
LINEFLAG DC X'00'
ENDFLAG  DC X'01'
SEFLAG   DC X'00'
         DS 0F
NUMVALUE DC H'10'
         DS  0F
SAVEFROM DS  F
FREELEN  DS F
*EWCAT   CAMLST CAT,DSNAME,,CATVOL
*ATVOL   DC  H'1'
*        DC  X'3050200D'
*        DC  C'VS2TSO'
KEY      DS  C
         DS  0F
FREEMAI  DS  F
SAVES#   DC  F'0'
SAVE7    DS  F
SAVE3    DS  F
MYCB     DS  4X
CBTEXT   DS  18C
FAKECPPL DS  0F
FAKECB   DS  F
FAKEUPT  DS  F
FAKEPSCB DS  F
FAKEECT  DS  F
SAVEREG  DS 15F
ABENDPRM DC  A(ABENDTOP,SAVEREG,SDWA)
SDWA     DS 7C
AUTOFLAG DC X'00'
EMERG    DC C' S FSE.AUTOSAVE '
VTOC     CAMLST SEARCH,DSNAME,VOLSER,VTOCINFO
VTOCINFO DS 200C
CAT      CAMLST NAME,DSNAME,,CATINFO
CATINFO  DS  0D
         DS  265C
BLANKS   DC  255C' '
ABEND01  CSECT
         STM  14,12,12(13)
         BALR 12,0
         USING *,12
         ST  13,SAVE+4
         LA  5,SAVE
         ST  5,8(13)
         LR  13,5
*
         L   13,4(13)
         LM  14,12,12(13)
         LA  15,4
         L   3,0(1)
         L   3,0(3)
         LR  0,3
         L   4,0(1)
         L   4,8(4)   ADDRESS OF SDWA IN FSE
         MVC 0(7,4),0(1)
BR14     BR  14
SAVE     DS  18F
         END
*



