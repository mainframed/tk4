RPT TITLE '                    JES2 PERFORMANCE MONITOR REPORT UTILITY'
***********************************************************************
*                                                                     *
* TITLE -- JES2 PERFORMANCE MONITOR REPORT UTILITY                    *
*                                                                     *
* FUNCTION / OPERATION -- THE JES2 PERFORMANCE MONITOR REPORT UTILITY *
*    IS USED TO GENERATE A REPORT FROM THE DATA CREATED BY THE JES2   *
*    PERFORMANCE MONITOR DATA COLLECTION PROGRAM.                     *
*                                                                     *
* METHOD OF OPERATION -- THE REPORT UTILITY CONTAINS THREE MAJOR      *
*    SEGMENTS --                                                      *
*    - INITIALIZATION -- THE INITIALIZATION SEGMENT OPENS THE DATA    *
*      SETS USED BY THE UTILITY, READS THE COFIGURATION RECORD        *
*      PREPARED BY DATA COLLECTION, FORMATS THE CONTENTS OF THE       *
*      CONFIGURATION RECORD, AND THEN INVOKES SORT/MERGE THAT WILL    *
*      IN TURN INVOKE THE OTHER TWO MAJOR SEGMENTS OF THE REPORT      *
*      UTILITY.                                                       *
*    - SORT INPUT EXIT -- THE SORT INPUT EXIT RETRIEVES RECORDS FROM  *
*      THE DATA COLLECTION OUTPUT FILE AND COLLECTS STATISTICS THAT   *
*      WILL BE PRINTED AFTER THE LAST INPUT RECORD HAS BEEN READ.     *
*      IF A RECORD IS TO BE PROCESSED BY SORT / MERGE, THE INPUT      *
*      EXIT RETURNS THE RECORD.                                       *
*      AFTER THE LAST RECORD HAS BEEN READ, THE FIRST GROUP OF        *
*      REPORTS IS PRINTED AND THE INPUT EXIT RETURNS TO SORT / MERGE. *
*    - SORT OUTPUT EXIT -- THE SORT OUTPUT EXIT RETRIEVES SORTED      *
*      RECORDS FROM SORT / MERGE.  THESE RECORDS ARE SORTED BY        *
*      MODULE NAME AND OFFSET WITHIN MODULE.  THE OUTPUT EXIT         *
*      CREATES LINKED LISTS OF RECORD GROUPS THAT USE MORE THAT 1%    *
*      OF JES2 ACTIVE TIME AND RETURNS TO SORT / MERGE FOR THE NEXT   *
*      RECORD.                                                        *
*      AFTER THE LAST RECORD HAS BEEN PROCESSED, THE FINAL REPORT     *
*      SHOWING ADDRESS GROUPS THAT USE MORE THAN 1% OF JES2 ACTIVE    *
*      TIME IS PRINTED.                                               *
*                                                                     *
* STATUS / CHANGE LEVEL -- V0L0 -- MARCH 31, 1980 -- I.N.A.           *
*                                                                     *
*    V0L1 -- JULY 15, 1980 -- I.N.A.                                  *
*      FUNCTIONAL ENHANCEMENTS -- NONE                                *
*      INCREMENTAL IMPROVEMENTS --                                    *
*      1) A SUMMARY MAP SHOWING JES2 MODULES THAT USE MORE THAT 1%    *
*         OF JES2 ACTIVE TIME IS PROVIDED.                            *
*      2) A MAP OF JES2 PAGE FAULT LOCATIONS IS PROVIDED.             *
*      MAINTENANCE --                                                 *
*      1) THE STIMER FIELD WILL PRINT PROPERLY IF ALL INPUT RECORDS   *
*         ARE SUMMARIZED.                                             *
*      2) THE VALUE PRINTED AS JES2 PAGING RATE IS NOT A PAGING RATE  *
*         AND CANNOT BE CONVERTED TO A PAGING RATE.  THE MESSAGE IS   *
*         CHANGED TO INDICATE THE REAL MEANING OF THE FIELD.          *
*      3) THE RB UTILIZATION MESSAGE IS BOTH INCORRECT AND            *
*         MISLEADING.  THE MESSAGE HAS BEEN CORRECTED.                *
*      4) THE FINAL EXIT FROM THE SORT/MERGE E35 EXIT IS PERFORMED    *
*         WITH THE CORRECT RETURN CODE.                               *
*                                                                     *
***********************************************************************
        EJECT
***********************************************************************
*                                                                     *
*      5) THE RUNDATA TABLE HAS BEEN INCREASED TO 1000 ENTRIES FROM   *
*         500 ENTRIES TO SUPPORT PAGE FAULT MAPPING.                  *
*      6) DUE TO ROUNDING ERRORS, SOME AREAS IN THE CPU STORAGE       *
*         USAGE REPORT PRINTED AS 0%.  THE ERROR IS THIS: IF (FOR     *
*         EXAMPLE) 2064 CPU USAGE RECORDS WERE PASSED THROUGH, THEN   *
*         1% IS 20 RECORDS.  IF EXACTLY 20 RECORDS WERE IN A RANGE,   *
*         THEN THE UTILIZATION IS THE INTEGER PART OF (20*100)/2064 = *
*         0.  THE MINIMUM AMOUNT NOW IS 1%+1, EVEN IF THERE IS NO     *
*         REMAINDER FROM CALCULATING THE 1%.                          *
*      7) IF THERE ARE CONSECUTIVE ENTRIES IN A RUN CHAIN FOR TWO     *
*         MODULES AT THE SAME OFFSET, THE SECOND ENTRY WILL PRINT     *
*         OUT OF PLACE.                                               *
*                                                                     *
*    V0L2 -- OCTOBER 27,1980 -- DATACROWN (CHANGES FLAGGED 'DC')      *
*                                                                     *
*      SELBY SHANLY,            416-499-1012                          *
*      DATACROWN INC.,                                                *
*      650 MCNICOLL AVE.,                                             *
*      WILLOWDALE, ONTARIO,                                           *
*      CANADA                                                         *
*                                                                     *
*      FUNCTIONAL ENHANCEMENTS -- NONE                                *
*                                                                     *
*      INCREMENTAL ENHANCEMENTS --                                    *
*      1)  MODULE MAP NOW PROVIDES 16 BYTE RESOLUTION.                *
*          RUNDATA INCREASED TO 1500 ENTRIES.                         *
*      2)  LIMSET ROUTINE NOW INVOKED BY DEFAULT FOR BUFFERS          *
*          CMBS AND SMF BUFFERS.                                      *
*                                                                     *
*      MAINTENANCE --                                                 *
*      1)  FIX BUG IN MODULE USAGE SUMMARY.  MODULES GREATER          *
*          THAN X'7FFF' IN LENGTH COULD SHOW TWICE.                   *
*      2)  ADDRESS AND PAGE FAULT MAP FORMATTING NOT CORRECT.         *
*          ENTRIES IN COLUMNS NOT ALLIGNED PROPERLY WITH              *
*          CORRECT RANGE IN OTHER COLUMNS.                            *
*                                                                     *
* ATTRIBUTES -- THIS MODULE IS NOT REENTRANT, NOT REFRESHABLE AND     *
*    NOT REUSABLE.  IT REQUIRES NO AUTHORIZATION AND OPERATES IN      *
*    PROBLEM KEY AND STATE.                                           *
*                                                                     *
* CHARACTER SET -- EBCDIC IS REQUIRED.  THE OUTPUT FROM THE ASSEMBLER *
*    MUST GENERATE EBCDIC CHARACTER STRINGS.                          *
*                                                                     *
* EXTERNAL ROUTINES --                                                *
*    HIST -- A SUBROUTINE TO GENERATE HISTOGRAMS                      *
*    SORT -- A SUBROUTINE TO SORT THE INPUT RECORDS                   *
*    LIMSET -- A SUBROUTINE TO GENERATE THE LIMIT RANGE TABLES USED   *
*            TO GENERATE THE FREQUENCY TABLES FOR BUFFER UTILIZATION  *
*                                                                     *
*                                                                     *
*    V0L3 -- JULY    27,1981 -- MELLON BANK CHANGES FLAGGED 'SPR2')   *
*                                                                     *
*                                                                     *
*      FUNCTIONAL ENHANCEMENTS -- NONE                                *
*                                                                     *
*      INCREMENTAL ENHANCEMENTS --                                    *
*      1)  ADDED SUPPORT FOR SP RELEASE 2 AND SP/3.                   *
*      2)  INCLUDED JES2 RELEASE AS PART OF REPORT.                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* SETR MACRO -- THE SETR MACRO IS USED TO GENERATE SYMBOLIC REGISTER  *
* EQUATES                                                             *
*                                                                     *
***********************************************************************
         SPACE 1
         MACRO
         SETR
         LCLA  &A
.L       AIF   (&A GT 15).X
R&A      EQU   &A
&A       SETA  &A+1
         AGO   .L
.X       MEND
         SPACE 1
***********************************************************************
*                                                                     *
* DEFINE REPORT CSECT                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
JESRPT   CSECT
         SPACE 1
         SETR  ,                   DEFINE SYMBOLIC REGISTERS
         SPACE 1
***********************************************************************
*                                                                     *
* SAVE CALLER'S REGISTERS AND INITIALIZE ADDRESSABILITY AND THE       *
* SAVE AREAS                                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         SAVE  (14,12),,JES2-PERFORMANCE-MONITOR-REPORT-UTILITY-V0L2-OC?
               TOBER-27-1980                                         DC
         SPACE 1
         LR    R12,R15             COPY PROGRAM ADDRESS TO BASE REG
         LA    R11,4095(,R12)      SETUP SECOND BASE REGISTER
         SPACE 1
         USING JESRPT,R12          ESTABLISH PROGRAM ADDRESSABILITY
         USING JESRPT+4095,R11     ESTABLISH SECOND BASE ADDRESSABILITY
         SPACE 1
         LA    R15,S               LOAD ADDRESS OF NEW OS SAVE AREA
         ST    R15,8(,R13)         ESTABLISH SAVE AREA FORWARD CHAIN
         ST    R13,4(,R15)         ESTABLISH SAVE AREA BACKWARN CHAIN
         LR    R13,R15             ESTABLISH NEW SAVE AREA ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
* OPEN DATA SETS TO BE USED BY THE UTILITY, AND CONFIRM THEY'RE OPEN  *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R2,OPENL            LOAD ADDRESS OF OPEN PARM LIST
         OPEN  MF=(E,(R2))         OPEN DATA SETS
         SPACE 1
NXTESTO  L     R3,0(,R2)           LOAD DCB ADDRESS FROM PARM LIST
         TM    OFLGS(R3),X'10'     TEST IF DCB OPEN
         BO    NXTOTEST            BR IF SO
         OI    SWITCH,QUIT         INDICATE AN OPEN FAILED
         LA    R1,OPNERRM          LOAD ADDRESS OF OPEN ERROR MESSAGE
         MVC   OPNERRD,DDNAM(R3)   COPY DDNAME TO ERROR MESSAGE
         SPACE 1
         TM    RPT+OFLGS,X'10'     TEST IF MESSAGE DCB OPENED OK
         BO    OPUT                USE PUT MACRO TO WRITE ERROR MESSAGE
         SPACE 1
         WTO   MF=(E,(1))          INFORM OPERATOR OF PROBLEM
         SPACE 1
         B     NXTOTEST            AND GO DO THE NEXT DCB
         SPACE 1
OPUT     LA    R0,4(,R1)           GET START OF MESSAGE INTO R0
         LH    R15,0(,R1)          LOAD MESSAGE LENGTH FROM PREFIX
         S     R15,=F'4'           REDUCE BY 4
         LA    R14,DATADATA        LOAD ADDRESS OF DATA LINE
         LR    R1,R15              COPY MESSAGE LENGTH TO R1
         MVCL  R14,R0              COPY MESSAGE TO DATA LINE
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R14,R0              COMPUTE MESSAGE LENGTH
         STH   R14,DATALINE        SAVE IN PREFIX
         SPACE 1
         PUT   RPT,(0)             WRITE MESSAGE TO USER
         SPACE 1
NXTOTEST TM    0(R2),X'80'         TEST IF THIS ENTRY IS THE LAST
         LA    R2,4(,R2)           POINT TO NEXT ENTRY ANYWAY
         BZ    NXTESTO             GO TEST THE NEXT DCB
         SPACE 1
         TM    SWITCH,QUIT         TEST IF ALL THE DCB'S OPENED
         BO    EXIT                BR IF SO
         SPACE 1
***********************************************************************
*                                                                     *
* CONFIRM LOGICAL RECORD LENGTHS OF MONITOR AND CONFIGURATION DATA    *
* SETS ARE WHAT WE EXPECT                                             *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R15,DATALEN         LOAD LENGTH OF MONITOR DATA RECORD
         LA    R0,DATALNER         LOAD ADDRESS OF ERROR MESSAGE
         CH    R15,DATA+LRECL      TEST IF LENGTH OF MONITOR DATA      ?
                                    IS WHAT WE EXPECT
         BNE   BADDS               BR IF SO -- INVALID DATA SET
         SPACE 1
         LA    R15,CONFIGLN        LOAD LENGTH OF CONFIGURATION DATA   ?
                                    RECORD
         LA    R0,CONFLNER         LOAD ADDRESS OF ERROR MESSAGE
         CH    R15,CONFIG+LRECL    TEST IF LENGTH OF CONFIGURATION DATA?
                                    IS WHAT WE EXPECT
         BNE   BADDS               BR IF SO -- INVALID DATA SET
         SPACE 1
***********************************************************************
*                                                                     *
* READ CONFIGURATION DATA AND FORMAT THE CONFIGURATION DATA INTO THE  *
* OUTPUT LINE                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         GET   CONFIG              GET CONFIGURATION DATA
         SPACE 1
         LR    R2,R1               CONFIGURATION DATA ADDRESS TO R2
         SPACE 1
         USING CONFIGDS,R2         ESTABLISH ADDRESSABILITY
         SPACE 1
         L     R15,SMFBUFCT        CONVERT SMF BUFFER COUNT
         CVD   R15,DWORK
         ED    PRTSMFCT,DWORK+5
         L     R15,CMBBUFCT        CONVERT CMB BUFFER COUNT
         CVD   R15,DWORK
         ED    PRTCMBCT,DWORK+5
         L     R15,BUFBUFCT        CONVERT SPOOL BUFFER COUNT
         CVD   R15,DWORK
         ED    PRTBUFCT,DWORK+5
         L     R15,TPBUFCT         CONVERT TP BUFFER COUNT
         CVD   R15,DWORK
         ED    PRTTPCT,DWORK+5
         ED    PRTSTIME,STARTUP    CONVERT START TIME
         ED    PRTSDATE,STARTUP+5  CONVERT START DATE
         L     R15,SAMPRATE        CONVERT SAMPLING RATE
         CVD   R15,DWORK
         ED    PRTRATE,DWORK+5
         MVC   PRTSYS,SYSID        COPY SYSTEM ID
         MVC   PRTVERSN,JES2VER    COPY VERSION ID                 SPR2
         SPACE 1
***********************************************************************
*                                                                     *
* INVOKE LIMSET ROUTINE TO GENERATE THE LIMIT TABLES                  *
*                                                                     *
***********************************************************************
         SPACE 1
SW2      NOP   NOLIMSET            BYPASS LIMSET CODE                DC
         L     R10,=V(LIMSET)      LOAD THE ADDRESS OF LIMSET
         SPACE 1
         LR    R15,R10             COPY ADDRESS TO R15
         CALL  (15),(BUFBUFCT,BUFLIMS),VL,MF=(E,LIMPARM) SETUP SPOOL   ?
                                    BUFFER LIMIT TABLE
         SPACE 1
         LR    R15,R10             COPY ADDRESS TO R15
         CALL  (15),(TPBUFCT,TPLIMS),VL,MF=(E,LIMPARM) SETUP TP        ?
                                    BUFFER LIMIT TABLE
         SPACE 1
         LR    R15,R10             COPY ADDRESS TO R15
         CALL  (15),(CMBBUFCT,CMBLIMS),VL,MF=(E,LIMPARM) SETUP         ?
                                    CONSOLE BUFFER LIMIT TABLE
         SPACE 1
         LR    R15,R10             COPY ADDRESS TO R15
         CALL  (15),(SMFBUFCT,SMFLIMS),VL,MF=(E,LIMPARM) SETUP SMF     ?
                                    BUFFER LIMIT TABLE
         SPACE 1
***********************************************************************
*                                                                     *
* INVOKE SORT / MERGE TO KICK OFF THE MAIN PART OF THE UTILITY        *
*                                                                     *
***********************************************************************
         SPACE 1
NOLIMSET LINK  SF=(E,SORTLINK),MF=(E,SORTPARM) INVOKE SORT/MERGE
         SPACE 1
***********************************************************************
*                                                                     *
* DONE WITH SORT / MERGE -- CLOSE DATA SETS AND RETURN TO CALLER      *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT     LA    R2,OPENL            LOAD ADDRESS OF OPEN / CLOSE PARMS
         CLOSE MF=(E,(R2))         CLOSE THE DATA SETS
         SPACE 1
FREEPL   L     R1,0(,R2)           LOAD DCB ADDRESS FROM CLOSE PARMS
         TM    BUFCB+3(R1),1       TEST IF BUFFER POOL ASSIGNED
         BO    FREE2               BR IF NOT
         FREEPOOL (1)              FREE THE BUFFER POOL
FREE2    TM    0(R2),X'80'         TEST IF LAST DCB ADDRESS IN LIST
         LA    R2,4(,R2)           POINT TO NEXT LIST ENTRY ANYWAY
         BZ    FREEPL              GO DO NEXT DCB IF THERE IS ONE TO DO
         SPACE 1
         L     R13,4(,R13)         LOAD ADDRESS OF CALLER'S SAVE AREA
         RETURN (14,12),T,RC=0     RETURN TO CALLER
         SPACE 1
BADDS    PUT   RPT,(0)             ISSUE ERROR MESSAGE
         B     EXIT                AND LEAVE FOR GOOD
         SPACE 1
         DROP  ,                   KILL ALL ADDRESSABILITY
 TITLE '                                       SORT / MERGE INPUT EXIT'
***********************************************************************
*                                                                     *
* SORT / MERGE INPUT EXIT -- READ INPUT RECORDS AND PREPARE DATA FOR  *
* REPORTS TO BE PRINTED AFTER THE LAST RECORD HAS BEEN READ           *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                 ALIGN TO A DOUBLE WORD BOUNDARY
SORTE15  SAVE  (14,12)             SAVE SORT'S REGISTERS
         SPACE 1
***********************************************************************
*                                                                     *
* SETUP NEW ADDRESSABILITY AND A NEW SAVE AREA FOR THE INPUT EXIT     *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    R12,R15             COPY PROGRAM ADDRESS TO R12
         LA    R11,4095(,R12)      ESTABLISH SECOND BASE REGISTER
         SPACE 1
         USING SORTE15,R12         ESTABLISH FIRST LEVEL ADDRESSABILITY
         USING SORTE15+4095,R11    ESTABLISH SECOND LEVEL ADDRESSING
         SPACE 1
         LA    R15,SORTSAVE        LOAD ADDRESS OF NEW SAVE AREA
         ST    R15,8(,R13)         ESTABLISH SAVE AREA FORWARD CHAIN
         ST    R13,4(,R15)         ESTABLISH SAVE AREA BACKWARD CHAIN
         LR    R13,R15             ESTABLISH A NEW SAVE AREA ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
* READ THE NEXT INPUT RECORD.                                         *
*                                                                     *
***********************************************************************
         SPACE 1
READLOOP GET   DATA                READ A MONITOR DATA RECORD
         SPACE 1
         LR    R2,R1               COPY RECORD ADDRESS TO R2
         SPACE 1
         USING DATASECT,R2         ESTABLISH RECORD ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* IF THE NEW RECORD REALLY DEFINES A TIME AND DATE RECORD, COPY THE   *
* TIME AND DATE TO OUR WORK AREA AND GO DO THE NEXT RECORD            *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   JESWC,255           TEST IF RECORD IS A TIME STAMP RCD
         BNE   SW1                 BR IF SO
         MVC   LASTTIME,0(R2)      COPY TIME TO OUR WORK AREA
         MVC   LASTDATE,4(R2)      COPY DATE TO OUT WORK AREA
         B     READLOOP            AND GO GO GO GO
         SPACE 1
***********************************************************************
*                                                                     *
* CONVERT THE FIELDS IN THE INPUT RECORD TO PRINTABLE FORMAT AND      *
* WRITE THE RECORD TO THE REPORT DATA SET                             *
*                                                                     *
***********************************************************************
         SPACE 1
SW1      B     NORECSUM            BYPASS RECORD SUMMARY CODE
         UNPK  PRTCUR(7),CURADDR+1(4) CONVERT CURRENT JES2 ADDRESS
         TR    PRTCUR,HEXTAB
         UNPK  PRTJES(7),JESADDR+1(4) CONVERT JES2 TASK ADDRESS
         TR    PRTJES,HEXTAB
         UNPK  PRTOFF(5),JESOFFST(3) CONVERT JES2 OFFSET
         TR    PRTOFF,HEXTAB
         UNPK  PRTPTYP(5),JESPTYP(3) CONVERT PCE TYPE
         TR    PRTPTYP,HEXTAB
         UNPK  PRTINTC(3),JESINTC+1(2) CONVERT JES2 INTERRUPT CODE
         TR    PRTINTC,HEXTAB
         UNPK  PRTRB(3),JESRBST(2) CONVERT RB STATUS BYTE
         TR    PRTRB,HEXTAB
         MVC   0(1,R13),JESWC      COPY WAIT COUNT TO MY AREA
         UNPK  PRTWC(3),0(2,R13)   CONVERT WAIT COUNT
         TR    PRTWC,HEXTAB
         MVC   PRTMOD,JESMODID     COPY MODULE ID
         MVI   PRTCUR+6,C' '       FIXUP
         MVI   PRTJES+6,C' '        BYTES
         MVI   PRTOFF+4,C' '         CLOBBERED
         MVI   PRTPTYP+4,C' '         HEX
         MVI   PRTINTC+2,C' '          CONVERSION
         MVI   PRTRB+2,C' '
         MVI   PRTWC+2,C' '
         L     R15,TIMEVAL         CONVERT STIMER INTERVAL VALUE
         CVD   R15,DWORK
         MVC   PRTTIME,=X'402020202120'
         ED    PRTTIME,DWORK+5
         LH    R15,BUFBUFS         CONVERT ACTIVE SPOOL BUFFERS
         CVD   R15,DWORK
         MVC   PRTBUF,=X'402020202120'
         ED    PRTBUF,DWORK+5
         LH    R15,TPBUFS          CONVERT ACTIVE TP BUFFERS
         CVD   R15,DWORK
         MVC   PRTTP,=X'402020202120'
         ED    PRTTP,DWORK+5
         LH    R15,SMFBUFS         CONVERT ACTIVE SMF BUFFERS
         CVD   R15,DWORK
         MVC   PRTSMF,=X'402020202120'
         ED    PRTSMF,DWORK+5
         LH    R15,CMBBUFS         CONVERT ACTIVE CMB'S
         CVD   R15,DWORK
         MVC   PRTCMB,=X'402020202120'
         ED    PRTCMB,DWORK+5
         SPACE 1
         PUT   RPT,OUTREC          WRITE RECORD
         SPACE 1
***********************************************************************
*                                                                     *
* TEST IF RECORD CAME WITH RBWC = 0 AND RBOPSW%-2 = 0A01, E.G., THE   *
* RB INDICATES THE TASK IS NOT IN WAIT, BUT THE RB ADDRESS POINTS     *
* TO AN SVC 1.  THROW THOSE RECORDS AWAY.                             *
*                                                                     *
***********************************************************************
         SPACE 1
NORECSUM NOP   WAITREC
         CLI   JESWC,0             TEST RB WAIT COUNT
         BNE   WAITREC             BR IF TRUE WAIT
         TM    JESRBST,X'04'       TEST IF RB ADDRESS POINTS TO 0A01
         BO    READLOOP            BR IF SO TO READ NEXT RECORD
         SPACE 1
***********************************************************************
*                                                                     *
* SETUP STATISTICS WE'LL REPORT ON AFTER THE LAST RECORD HAS BEEN     *
* PROCESSED.  WE'RE INTERESTED IN ESTIMATING CPU UTILIZATION, PAGE    *
* RATE, ACTIVE JES2 PROCESSOR IDENTIFICATION, SVC UTILIZATION, AND    *
* RB UTILIZATION, AS WELL AS BUFFER USAGE STATISTICS.                 *
*                                                                     *
***********************************************************************
         SPACE 1
WAITREC  L     R1,TOTRECS          LOAD TOTAL NUMBER OF RECORDS
         A     R1,=F'1'            INCREMENT TOTAL RECORDS
         ST    R1,TOTRECS          SAVE RESULT
         SPACE 1
         CLI   JESWC,1             TEST IF JES2 IN WAIT
         BNL   JESWAIT             BR IF SO
         L     R1,JESACTIV         LOAD JES ACTIVE COUNT
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,JESACTIV         STORE UPDATED COUNT
         SPACE 1
JESWAIT  TM    JESRBST,X'02'       TEST IF JES2 PROCESSING A PAGE FAULT
         BZ    NOFALT              BR IF NOT
         L     R1,PAGEFALT         LOAD CURRENT PAGE FAULT VALUE
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,PAGEFALT         STORE UPDATED COUNT
         SPACE 1
NOFALT   CLC   JESPTYP,=X'FFFF'    TEST IF PROCESSOR KNOWN
         BE    NOPROC              BR IF NOT
         LM    R3,R5,=A(PCETAB,24,PCETABE) LOAD SCAN LIMITS
         SPACE 1
SCANPCE  CLC   JESPTYP,4(R3)       TEST IF PCE TYPE MATCH
         BNE   NEXTPCE             BR IF NOT
         L     R1,0(,R3)           LOAD PCE TYPE COUNT
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,0(,R3)           STORE UPDATED COUNT
         L     R1,PCECOUNT         INCREMENT
         A     R1,=F'1'             PCE EVENT
         ST    R1,PCECOUNT           COUNT
         B     NOPROC              AND CONTINUE
         SPACE 1
NEXTPCE  BXLE  R3,R4,SCANPCE       CONTINUE PCE SCAN
         SPACE 1
NOPROC   TM    JESRBST,X'80'       IS JES IN SOMETHING OTHER THAN THE  ?
                                    MAIN PRB
         BZ    MAINPRB             BR IF NOT
         TM    JESRBST,X'20'       IS JES IN AN IRB
         BZ    TESTSVC             BR IF NOT
         L     R1,IRBFREQ          LOAD IRB FREQUENCY COUNT
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,IRBFREQ          SAVE NEW IRB FREQUENCY COUNT
         B     MAINPRB             AND CONTINUE
         SPACE 1
TESTSVC  TM    JESRBST,X'08'       TEST IF JES IN AN SVRB
         BZ    MAINPRB             BR IF NOT
         L     R1,SVCFREQ          LOAD SVC COUNTER
         AL    R1,=F'1'            INCREMENT BY 1
         ST    R1,SVCFREQ          SAVE NEW COUNTER
         SR    R15,R15             CLEAR R15
         IC    R15,JESINTC+1       LOAD INTERRUPT CODE
         SLL   R15,2               MULTIPLY BY 4
         L     R1,SVCTABLE(R15)    LOAD FREQUENCY COUNT FOR THIS SVC
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,SVCTABLE(R15)    STORE NEW FREQUENCY COUNT
         SPACE 1
MAINPRB  LH    R3,BUFBUFS          LOAD SPOOL BUFFER COUNT
         LA    R4,BUFLIMS          LOAD START OF BUFFER LIMIT TABLE
         LA    R5,BUFTAB           LOAD START OF BUFFER COUNTER TABLE
         BAL   R10,LIMTAB          UPDATE THE LIMIT TABLE
         SPACE 1
         CLC   =Y(47),JESINTC      TEST IF JES2 PROCESSING AN STIMER
         BNE   NOTIME              BR IF NOT
         L     R3,TIMEVAL          LOAD TIMER VALUE
         LA    R4,TIMELIMS         LOAD START OF TIMER LIMIT TABLE
         LA    R5,TIMETAB          LOAD START OF TIMER COUNTER TABLE
         BAL   R10,LIMTAB          GO UPDATE TIMER TABLE
         SPACE 1
NOTIME   LH    R3,TPBUFS           LOAD TP BUFFER COUNT
         LA    R4,TPLIMS           LOAD START OF TP LIMIT TABLE
         LA    R5,TPTAB            LOAD START OF TP COUNTER TABLE
         BAL   R10,LIMTAB          GO UPDATE TP TABLE
         SPACE 1
         LH    R3,SMFBUFS          LOAD BUFFER COUNT
         LTR   R3,R3               TEST IF 0
         BZ    SMF0                BR IF SO
         LA    R4,SMFLIMS          LOAD START OF LIMIT TABLE
         LA    R5,SMFTAB           LOAD START OF COUNTER TABLE
         BAL   R10,LIMTAB          GO UPDATE TABLE
         SPACE 1
SMF0     LH    R3,CMBBUFS          LOAD BUFFER COUNT
         LTR   R3,R3               TEST IF 0
         BZ    CMB0                BR IF SO
         LA    R4,CMBLIMS          LOAD START OF LIMIT TABLE
         LA    R5,CMBTAB           LOAD START OF COUNTER TABLE
         BAL   R10,LIMTAB          GO UPDATE TABLE
         SPACE 1
CMB0     CLI   JESWC,0             TEST IF JES WAITING FOR SOMETHING
         BE    TESTMOD             BR IF NOT
         TM    JESRBST,X'02'       TEST IF JES IN PAGE FAULT
         BZ    READLOOP            BR IF NOT
TESTMOD  CLC   =CL4'ABS',JESMODID  TEST FOR MODULES WE DON'T WANT
         BE    READLOOP            BR IF SO
         CLC   =CL4' ',JESMODID
         BE    READLOOP
         SPACE 1
         L     R13,4(,R13)         REESTABLISH SORT'S SAVE AREA
         LM    R14,R0,12(R13)      RELOAD LINK REGISTERS
         LR    R1,R2               COPY RECORD ADDRESS TO R1
         RETURN (2,12),T,RC=12     RETURN TO SORT TO GET NEXT RECORD
         SPACE 1
***********************************************************************
*                                                                     *
* REPORT ON ALL THE DATA WE'VE COLLECTED SO FAR                       *
*                                                                     *
***********************************************************************
         SPACE 1
EOF      ED    PRTEDATE,LASTDATE+1 CONVERT DATE AND TIME IN LAST BLOCK
         ED    PRTETIME,LASTTIME    TO PRINTABLE CHARACTERS
         SPACE 1
         PUT   RPT,MAINHDR         WRITE MAIN HEADER
         PUT   RPT,CNFGHDR1        WRITE CONFIGURATION HEADER
         PUT   RPT,CNFGHDR2        WRITE CONFIGURATION HEADER
         PUT   RPT,HDRDATA         WRITE CONFIGURATION DATA
         EJECT
***********************************************************************
*                                                                     *
* FORMAT JES2 CPU UTILIZATION (ACTIVE*100/RECORDS)                    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,JESACTIV         LOAD JES2 ACTIVE COUNT
         MH    R1,=H'10000'        MULTIPLY BY 10000
         SR    R0,R0               CLEAR R0
         D     R0,TOTRECS          DIVIDE BY TOTAL NUMBER OF RECORDS
         CVD   R1,DWORK            CONVERT JES2 ACTIVE TIME
         ED    ACTAMT,DWORK+5       TO SPREAD DECIMAL
         SPACE 1
         PUT   RPT,ACTMSG          WRITE JES2 ACTIVE MESSAGE
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT JES2 PAGE FAULT PROCESSING (PAGE FAULT RECORDS/RECORD COUNT) *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,PAGEFALT         LOAD NUMBER OF TIMES JES2 WAS IN    ?
                                    PAGE WAIT
         MH    R1,=H'10000'        MULTIPLY BY 10000
         SR    R0,R0               PREP R0 FOR DIVIDE
         D     R0,TOTRECS          DIVIDE BY TOTAL RECORDS TO GET RATE
         CVD   R1,DWORK            CONVERT RATE
         ED    FALTRATE,DWORK+5     TO SPREAD DECIMAL
         SPACE 1
         PUT   RPT,FALTMSG         ISSUE MESSAGE
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT PRB / NON-PRB UTILIZATION DATA                               *
* NOTPRB = NOTPRB / RECORD COUNT                                      *
* NOTPRB & JES ACTIVE = NOTPRB / JES ACTIVE RECORD COUNT              *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R2,IRBFREQ          LOAD IRB FREQUENCY COUNT
         A     R2,SVCFREQ          ADD SVC FREQUENCY
         MH    R2,=H'10000'        MULTIPLY BY 10000
         LR    R1,R2               COPY TOTAL COUNT TO R1
         SR    R0,R0               CLEAR R0
         D     R0,TOTRECS          COMPUTE CPU USAGE
         CVD   R1,DWORK            CONVERT USAGE
         ED    RBTPCT,DWORK+5       TO SPREAD DECIMAL
         SPACE 1
         LR    R1,R2               COPY TOTAL COUNT TO R1
         SR    R0,R0               CLEAR R0
         D     R0,JESACTIV         COMPUTE CPU AS A PRECENT OF JES     ?
                                    TIME
         CVD   R1,DWORK            CONVERT USAGE
         ED    RBAPCT,DWORK+5       TO SPREAD DECIMAL
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT SVC VERSUS PRB USAGE DATA                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R2,SVCFREQ          LOAD SVC FREQUENCY COUNT
         LR    R1,R2               SAVE SVC FREQUENCY COUNT
         A     R2,IRBFREQ          ADD IRB FREQUENCY
         BNZ   *+8                 SKIP NSI IF SOME COUNT            DC
         LA    R2,1                 ELSE AVOID 0C9                   DC
         MH    R1,=H'10000'        MULTIPLY BY 10000
         SR    R0,R0               CLEAR R0 FOR DIVIDE
         DR    R0,R2               COMPUTE PRECENTAGE
         CVD   R1,DWORK            CONVERT USAGE
         ED    RBSVC,DWORK+5        TO SPREAD DECIMAL
         SPACE 1
         L     R1,IRBFREQ          LOAD IRB FREQUENCY COUNT
         MH    R1,=H'10000'        MULTIPLY BY 10000
         SR    R0,R0               CLEAR R0 FOR DIVIDE
         DR    R0,R2               COMPUTE PRECENTAGE
         CVD   R1,DWORK            CONVERT USAGE
         ED    RBIRB,DWORK+5        TO SPREAD DECIMAL
         SPACE 1
         PUT   RPT,RBMSG1          ISSUE FIRST MESSAGE
         PUT   RPT,RBMSG2          ISSUE SECOND MESSAGE
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT SVC UTILIZATION DATA                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         PUT   RPT,SVCHDR1         ISSUE SVC
         PUT   RPT,SVCHDR2          HEADER MSGS
         SPACE 1
         LM    R3,R6,=A(SVCTABLE,4,SVCTABLE+255*4,0) LOAD SVC LIMITS
         SPACE 1
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000') CLEAR DATA
         MVCL  R14,R0                                       LINE
         SPACE 1
         LA    R7,DATADATA+1       LOAD START
         LA    R8,11               LOAD ENTRY LENGTH
         LA    R9,DATADATA+119-11  LOAD END
         SPACE 1
NEXTSVC  L     R1,0(,R3)           LOAD FREQUENCY COUNT FOR SVC
         LTR   R1,R1               TEST IF ANY
         BZ    UPSVC               BR IF NONE -- SKIP ENTRY
         SPACE 1
         CVD   R6,DWORK            CONVERT
         MVC   1(4,R7),=X'40202120'  SVC NUMBER TO
         ED    1(4,R7),DWORK+6       SPREAD DECIMAL
         SPACE 1
         MH    R1,=H'100'          CONVERT
         SR    R0,R0                FREQUENCY
         D     R0,SVCFREQ            COUNT
         CVD   R1,DWORK               TO
         MVC   6(4,R7),=X'40202120'    SPREAD
         ED    6(4,R7),DWORK+6          DECIMAL
         SPACE 1
         MVI   10(R7),C'%'         INSERT % SYMBOL
         BXLE  R7,R8,UPSVC         INCREMENT LINE POSITION
         SPACE 1
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R7,R0               COMPUTE LINE LENGTH
         STH   R7,DATALINE         SAVE IN LINE PREFIX
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000') CLEAR DATA
         MVCL  R14,R0                                       LINE
         LA    R7,DATADATA+1       LOAD START
         SPACE 1
UPSVC    LA    R6,1(,R6)           INCREMENT SVC NUMBER
         BXLE  R3,R4,NEXTSVC       AND GO DO NEXT SVC
         SPACE 1
         LA    R1,DATADATA+1       LOAD SVC ENTRY TEXT START
         CR    R7,R1               TEST IF ANYTHING ON LINE
         BE    DONESVC             BR IF NOTHING ON LINE
         SPACE 1
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R7,R0               COMPUTE LINE LENGTH
         STH   R7,DATALINE         SAVE IN LINE PREFIX
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT PCE UTILIZATION DATA                                         *
*                                                                     *
***********************************************************************
         SPACE 1
DONESVC  DC    0H'0'
         PUT   RPT,PCEHDR1         WRITE FIRST PCE HEADER
         PUT   RPT,PCEHDR2         WRITE SECOND PCE HEADER
         SPACE 1
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000') CLEAR DATA
         MVCL  R14,R0                                       LINE
         LA    R7,DATADATA+1       LOAD START
         SPACE 1
         LA    R8,26               LOAD ENTRY LENGTH
         LA    R9,DATADATA+119-26  LOAD END
         LM    R3,R5,=A(PCETAB,24,PCETABE) LOAD TABLE LIMITS
         SPACE 1
NXTPCENT L     R1,0(,R3)           LOAD VALUE
         LTR   R1,R1               TEST IF ENTRY USED
         BZ    UPPCE               BR IF NOT
         SPACE 1
         MH    R1,=H'100'          MULTIPLY BY 100
         SR    R0,R0               CLEAR R0 FOR DIVIDE
         D     R0,PCECOUNT         DIVIDE BY NUMBER OF TIMES A         ?
                                    PCE USE WAS DETECTED
         CVD   R1,DWORK            CONVERT USAGE
         MVC   2(4,R7),=X'40202120' TO
         ED    2(4,R7),DWORK+6       SPREAD DECIMAL
         SPACE 1
         MVI   6(R7),C'%'          INSERT % SYMBOL
         MVC   8(18,R7),6(R3)      MOVE PCE TYPE DESCRIPTION
         SPACE 1
         BXLE  R7,R8,UPPCE         INCREMENT TO NEXT LINE POSITION
         SPACE 1
         LA    R0,DATALINE         LOAD ADDRESS OF LINE HEADER
         SR    R7,R0               COMPUTE LENGTH OF LINE
         STH   R7,DATALINE         SAVE LINE LENGTH IN LINE HEADER
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
         LA    R7,DATADATA+1       SET NEW START
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000') CLEAR DATA
         MVCL  R14,R0                                       LINE
         SPACE 1
UPPCE    BXLE  R3,R4,NXTPCENT      GO DO NEXT PCE ENTRY
         SPACE 1
         LA    R1,DATADATA+1       LOAD SVC ENTRY TEXT START
         CR    R7,R1               TEST IF ANYTHING ON LINE
         BE    DONEPCE             BR IF NOTHING ON LINE
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R7,R0               COMPUTE LINE LENGTH
         STH   R7,DATALINE         SAVE IN LINE PREFIX
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
***********************************************************************
*                                                                     *
* GENERATE BUFFER UTILIZATION HISTOGRAMS FOR SPOOL BUFFERS, TP        *
* BUFFERS, CONSOLE MESSAGE BUFFERS AND SMF BUFFERS                    *
*                                                                     *
***********************************************************************
         SPACE 1
DONEPCE  L     R15,=V(HIST)        LOAD START OF HIST SUBROUTINE
         LM    R2,R5,=A(SPLHHDR,SPLVHDR,BUFTAB,BUFLIMS) LOAD ARGS
         CALL  (15),(,(R2),(R3),(R4),(R5)),MF=(E,HISTCALL) GENERATE    ?
                                                      THE HISTOGRAM
         SPACE 1
         L     R15,=V(HIST)        LOAD START OF HIST SUBROUTINE
         LM    R2,R5,=A(TPHHDR,TPVHDR,TPTAB,TPLIMS) LOAD ARGS
         CALL  (15),(,(R2),(R3),(R4),(R5)),MF=(E,HISTCALL) GENERATE    ?
                                                      THE HISTOGRAM
         SPACE 1
         L     R15,=V(HIST)        LOAD START OF HIST SUBROUTINE
         LM    R2,R5,=A(CMBHHDR,CMBVHDR,CMBTAB,CMBLIMS) LOAD ARGS
         CALL  (15),(,(R2),(R3),(R4),(R5)),MF=(E,HISTCALL) GENERATE    ?
                                                      THE HISTOGRAM
         SPACE 1
         L     R15,=V(HIST)        LOAD START OF HIST SUBROUTINE
         LM    R2,R5,=A(SMFHHDR,SMFVHDR,SMFTAB,SMFLIMS) LOAD ARGS
         CALL  (15),(,(R2),(R3),(R4),(R5)),MF=(E,HISTCALL) GENERATE    ?
                                                      THE HISTOGRAM
         SPACE 1
         L     R15,=V(HIST)        LOAD START OF HIST SUBROUTINE
         LM    R2,R5,=A(TIMEHHDR,TIMEVHDR,TIMETAB,TIMELIMS) LOAD ARGS
         CALL  (15),(,(R2),(R3),(R4),(R5)),MF=(E,HISTCALL) GENERATE    ?
                                                      THE HISTOGRAM
         SPACE 1
***********************************************************************
*                                                                     *
* COMPUTE 1% OF JES2 ACTIVE AND JES2 PAGE FAULT RECORDS               *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,JESACTIV         LOAD NUMBER OF JES2 ACTIVE ENTRIES
         SR    R0,R0               CLEAR R0
         D     R0,=F'100'          DIVIDE BY 100 TO GET CUTOFF VALUE   ?
                                    FOR ADDRESS ANALYSIS
         LTR   R1,R1               TEST IF VALUE OK
         BNZ   *+8                 BR IF SO,
         LA    R1,1                 OTHERWISE ESTABLISH A CUTOFF
         ST    R1,CUTOFF           AND SAVE THE CUTOFF VALUE
         SPACE 1
         L     R1,PAGEFALT         LOAD NUMBER OF PAGE FAULT RECORDS
         SR    R0,R0               CLEAR R0 FOR DIVIDE
         D     R0,=F'100'          DIVIDE BY 100 TO GET CUTOFF
         LTR   R1,R1               TEST RESULT FOR 0
         BNZ   *+8                 BR IF NON-ZERO,
         LA    R1,1                 OTHERWISE ESTABLISH DEFAULT
         ST    R1,FALTCUT          ESTABLISH THE PAGE FAULT CUTOFF
         SPACE 1
         L     R13,4(,R13)         REESTABLISH SORT'S SAVE AREA
         RETURN (14,12),T,RC=8     RETURN TO SORT THE VERY LAST TIME
         EJECT
***********************************************************************
*                                                                     *
* LIMTAB SUNROUTINE -- THIS SUBROUTINE IS USED TO UPDATE THE BUFFER   *
* USAGE FREQUENCY TABLES. REGISTER USAGE --                           *
*                                                                     *
*    R3  -- CONTAINS THE VALUE FOR WHICH WE'LL UPDATE THE FREQUENCY   *
*           TABLE                                                     *
*    R4  -- POINTS TO LIMIT RANGE TABLE                               *
*    R5  -- POINTS TO FREQUENCY COUNTER TABLE                         *
*    R10 -- LINK REGISTER                                             *
*                                                                     *
***********************************************************************
         SPACE 1
LIMTAB   LA    R0,10               LOAD COUNT OF ENTRIES TO SCAN
         SPACE 1
LIMTEST  CLC   0(4,R4),4(R4)       TEST IF SINGLE VALUE
         BE    LIMTST2             BR IF SO
         C     R3,4(,R4)           TEST IF WE USE THIS BUCKET
         BL    LIMUSE              BR IF SO
         B     LIMLOOP             GO TO END OF LOOP
         SPACE 1
LIMTST2  C     R3,4(,R4)           TEST IF FOR THIS ENTRY
         BNH   LIMUSE              BR IF MATCH
         SPACE 1
LIMLOOP  LA    R4,8(,R4)           POINT TO NEXT LIMIT ENTRY
         LA    R5,4(,R5)           POINT TO NEXT COUNTER ENTRY
         BCT   R0,LIMTEST          GO DO NEXT BUCKET
         S     R5,=F'4'            BACKUP TO LAST ENTRY
         SPACE 1
LIMUSE   L     R1,0(,R5)           LOAD OLD COUNTER VALUE
         A     R1,=F'1'            INCREMENT BY 1
         ST    R1,0(,R5)           SAVE COUNTER VALUE
         BR    R10                 AND RETURN
         SPACE 1
         DROP  ,                   KILL ALL ADDRESSABILITY
 TITLE '                               SORT / MERGE OUTPUT RECORD EXIT'
***********************************************************************
*                                                                     *
* SORT / MERGE OUTPUT RECORD EXIT.  THIS SUBROUTINE COLLECTS AND THEN *
* REPORTS ON CPU AREAS THAT USE MORE THAN 1% OF JES2 ACTIVE TIME. THE *
* REPORT LOOKS SOMETHING LIKE THIS --                                 *
*                                                                     *
*    512 BYTE       256 BYTE       128 BYTE        64 BYTE            *
* NUC  0640  1%  NUC  0640  1%                                        *
* NUC  0850 64%  NUC  0850 52%                                        *
*                NUC  0928 11%  NUC  088C 52%  NUC  088C 52%          *
*                               NUC  098E 11%  NUC  098E 10%          *
*                                              NUC  09C0  1%          *
*                                                                     *
* THE FIRST BYTE FOR AN ADDRESS RANGE CONTAINS THE FIRST LINE FOR A   *
* 512 BYTE ADDRESS RANGE GROUP.  IF ANY RANGE GROUPS WITHIN THAT      *
* 512 BYTE GROUP EXACTLY MATCH THE ADDRESS OF THE 512 BYTE GROUP,     *
* THEY ARE ALSO PRINTED ON THE LINE.  SUBSEQUENT LINES (AND THERE DO  *
* NOT HAVE TO BE ANY) REPORT ON AREAS WITHIN THE 512 BYTE GROUP.      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                 ALIGN TO A DOUBLE WORD
         SPACE 1
SORTE35  SAVE  (14,12)             SAVE CALLER'S REGISTERS
         SPACE 1
***********************************************************************
*                                                                     *
* SETUP NEW ADDRESSABILITY AND A NEW SAVE AREA FOR THE INPUT EXIT     *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    R12,R15             COPY EXIT ADDRESS TO R12
         LA    R11,4095(,R12)      COMPUTE SECOND BASE ADDRESS
         SPACE 1
         USING SORTE35,R12         ESTABLISH FIRST BASE REGISTER
         USING SORTE35+4095,R11    ESTABLISH SECOND BASE REGISTER
         SPACE 1
         LA    R15,SORTSAVE        LOAD ADDRESS OF NEW OS SAVE AREA
         ST    R15,8(,R13)         ESTABLISH FORWARD CHAIN
         ST    R13,4(,R15)          AND BACKWARD CHAIN
         LR    R13,R15             ESTABLISH A NEW SAVE AREA ADDRESS
         SPACE 1
         L     R2,0(,R1)           LOAD RECORD ADDRESS
         LTR   R2,R2               TEST IF PRESENT
         BZ    E35EOF              BR IF NO RECORD PRESENT FOR FINAL   ?
                                    PROCESSING
         SPACE 1
         USING DATASECT,R2         ESTABLISH RECORD ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
* CHECK IF A NEW JES2 MODULE HAS BEEN ENCOUNTERED.  IF SO, USE E35RUN *
* TO TERMINATE ANY ACTIVE ENTRIES FOR THE PREVIOUS MODULE AND SAVE    *
* THE NEW MODULE ID.                                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CLC   LASTMOD,JESMODID    DID THE MODULE ID CHANGE
         BE    CHKADDR             BR IF NOT TO CHECK ADDRESS
         SPACE 1
         LM    R3,R5,=A(ADRENT,ADRLEN,ADRENTE) LOAD RANGE CHK
         SPACE 1
         USING ADRDSECT,R3         ESTABLISH ADR ADDRESSABILITY
         SPACE 1
TERMMOD  BAL   R10,E35RUN          GENERATE A RUN ENTRY
         BXLE  R3,R4,TERMMOD       AND GO DO NEXT ENTRY
         SPACE 1
         LM    R3,R5,=A(FALTENT,ADRLEN,FALTENTE)
         OI    SWITCH,FALTREC      INDICATE PAGE FAULT TABLE
         SPACE 1
FALTMOD  BAL   R10,E35RUN          GENERATE A PAGE FAULT RUN ENTRY
         BXLE  R3,R4,FALTMOD        FOR EACH RANGE
         SPACE 1
         MVC   LASTMOD,JESMODID    COPY NEW MODULE ID
         SPACE 1
***********************************************************************
*                                                                     *
* CHECK TO SEE IF THE OFFSET IN THE CURRENT RECORD GROUP HAS GONE     *
* OVER THE ADDRESS RANGE LIMIT OF ANY OF THE ADDRESS RANGE GROUPS     *
* WE PROCESS.  IF SO, USE E35RUN TO ADD THE PREVIOUS RANGE GROUP TO   *
* THE FILE CHAIN FOR THE CURRENT GROUP                                *
*                                                                     *
***********************************************************************
         SPACE 1
CHKADDR  LM    R3,R5,=A(ADRENT,ADRLEN,ADRENTE) LOAD SCAN RANGE
         NI    SWITCH,255-FALTREC  INDICATE NORMAL RECORD
         CLI   JESWC,0             TEST IF JES IN WAIT
         BE    CHKRANGE            BR IF NOT
         LM    R3,R5,=A(FALTENT,ADRLEN,FALTENTE) LOAD FAULT SCAN LIMS
         OI    SWITCH,FALTREC      INDICATE WE'RE PROCESSING A         ?
                                    PAGE FAULT RECORD
         SPACE 1
CHKRANGE SLR   R14,R14             CLEAR FOR INSERT                  DC
         ICM   R14,3,JESOFFST      LOAD NEW OFFSET                   DC
         SLR   R15,R15             CLEAR FOR INSERT                  DC
         ICM   R15,3,ADROFFST      LOAD BASE OFFSET                  DC
         LH    R1,ADRSHIFT         LOAD SHIFT VALUE
         SRL   R14,0(R1)           SHIFT OUT LOW ORDER BITS IN         ?
                                    NEW OFFSET
         SRL   R15,0(R1)           SHIFT OUT LOW ORDER BITS IN         ?
                                    OLD OFFSET
         SPACE 1
         CR    R14,R15             TEST OUR INTEREST IN THIS RANGE
         BE    CHKADD              INCREMENT ADRCOUNT
         BH    CHKGEN              RANGE CHANGE -- ADD TO RUN CHAIN
         DC    H'0'              **SERIOUS ERROR -- ABEND**
         SPACE 1
CHKGEN   BAL   R10,E35RUN          GO BUILD THE RUN ENTRY
         SPACE 1
CHKADD   LH    R1,ADRCOUNT         LOAD CURRENT RANGE COUNT
         A     R1,=F'1'            INCREMENT BY 1
         STH   R1,ADRCOUNT         SAVE UPDATED COUNT
         BXLE  R3,R4,CHKRANGE      AND CONTINUE
         SPACE 1
         DROP  R2,R3               KILL RECORD AND ADR ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* FINISHED PROCESSING AN INPUT RECORD, RETURN TO SORT / MERGE TO GET  *
* MORE.                                                               *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R13,4(,R13)         LOAD ADDRESS OF SORT'S SAVE AREA
         RETURN (14,12),T,RC=4     RETURN TO SORT TO GET NEXT RECORD
         SPACE 1
***********************************************************************
*                                                                     *
* LAST RECORD HAS BEEN PROCESSED AND SORT / MERGE HAS NO MORE FOR     *
* US.  WRITE THE REPORT.                                              *
*                                                                     *
***********************************************************************
         SPACE 1
E35EOF   PUT   RPT,ADDRHDR1        WRITE FIRST HEADER
         PUT   RPT,ADDRHDR2        WRITE SECOND HEADER
         SPACE 1
         L     R3,=A(ADRENT,ADRLEN,ADRENTE) LOAD START OF TABLE
         NI    SWITCH,255-FALTREC  INDICATE CPU USAGE ENTRIES
         SPACE 1
FALTST   DC    0H'0'
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000')     CLEAR
         MVCL  R14,R0                                     OUTPUT LINE
         SPACE 1
NXT512   L     R2,ADRFIRST-ADRDSECT(,R3) POINT TO NEXT RUN ENTRY
         LTR   R2,R2               TEST IF E.O.C.
         BZ    DONE512             BR IF SO
         SPACE 1
         MVC   ADRFIRST-ADRDSECT(,R3),RUNNEXT-RUNDSECT(R2) UPDATE START
         ST    R2,ADRLAST-ADRDSECT(,R3) POINT TO LAST RUN PROCESSED  DC
         LA    R1,DATADATA+10      LOAD ENTRY START
         LR    R15,R2              COPY RUN ADDRESS TO R15
         BAL   R10,E35FMT          GO FORMAT THE ENTRY
         LR    R2,R3               R2 = ADDR OF PREVIOUS ADR         DC
         SPACE 1
         LM    R5,R7,=A(ADRENT+ADRLEN,ADRLEN,ADRENTRE) LOAD CPU RANGE
         TM    SWITCH,FALTREC      TEST IF PROCESSING PAGE FAULT TABLE
         BZ    *+8                 BR IF NOT
         LM    R5,R7,=A(FALTENT+ADRLEN,ADRLEN,FALTENTE) LOAD FAULT RNGE
         SPACE 1
NXTADR   L     R8,ADRFIRST-ADRDSECT(,R5) POINT TO NEXT RUN ENTRY     DC
         LTR   R8,R8               TEST IF E.O.C.
         BZ    BACK1ADR            BR IF SO                          DC
         L     R4,ADRLAST-ADRDSECT(,R2) POINT TO PREVIOUS RUN        DC
         CLC   RUNMOD-RUNDSECT(,R4),RUNMOD-RUNDSECT(R8) TEST IF      DC?
                                    MODULE IN THIS RANGE = MODULE      ?
                                    IN PREVIOUS RANGE                DC
         BNE   BACK1ADR            BACK UP TO LAST RANGE IF NOT      DC
         SPACE 1
         TM    SWITCH,ADDENT       CHECK IF 1ST ENTRY ON LINE        DC
         BZ    TESTSHFT            BR IF YES                         DC
         CLC   RUNOFFST-RUNDSECT(,R8),RUNOFFST-RUNDSECT(R4)          DC
         BE    FMTOFFST            PRINT IF SAME OFFSET              DC
         BAL   R10,PRINTLNE        ELSE PRINT WHAT WE'VE GOT         DC
         SPACE 1                                                     DC
TESTSHFT SLR   R9,R9               CLEAR FOR INSERT                  DC
         ICM   R9,B'0011',RUNOFFST-RUNDSECT(R8) GET CURRENT OFFSET   DC
         LH    R15,ADRSHIFT-ADRDSECT(,R2) GET PREV. ADR SHIFT AMT    DC
         SRL   R9,0(R15)           SHIFT OUT                         DC
         SLL   R9,0(R15)            LOW ORDER BITS                   DC
         SLR   R10,R10             CLEAR FOR INSERT                  DC
         ICM   R10,B'0011',RUNOFFST-RUNDSECT(R4) GET PREV. RANGE OFF DC
         SRL   R10,0(R15)          SHIFT OUT                         DC
         SLL   R10,0(R15)           LOW ORDER BITS                   DC
         CR    R9,R10              CHECK IF STILL IN PREVIOUS RANGE  DC
         BNE   BACK1ADR            NO - GO BUMP PREVIOUS RANGE       DC
         SPACE 1                                                     DC
FMTOFFST MVC   ADRFIRST-ADRDSECT(,R5),RUNNEXT-RUNDSECT(R8) DECHAIN   DC
         ST    R8,ADRLAST-ADRDSECT(,R5)  RUN AND SAVE ADDRESS        DC
         LR    R15,R8              LOAD ADDR OF RUN                  DC
         BAL   R10,E35FMT          ADD OFFSET TO LINE                DC
         LR    R2,R5               MAKE CURRENT ADR PREVIOUS         DC
         BXLE  R5,R6,NXTADR        AND GO TO NEXT ELEMENT            DC
         SPACE 1                                                     DC
BACK1ADR BAL   R10,PRINTLNE        PRINT LINE IF NECESSARY           DC
         LR    R5,R2               MAKE PREVIOUS ENTRY CURRENT       DC
         SL    R2,=A(ADRLEN)       BACK UP 1 ENTRY                   DC
         CR    R5,R3               IF AT BEGINNING OF TABLE          DC
         BE    NXT512              START WITH NEW 512 RANGE          DC
         SL    R1,=F'15'           BACK UP 1 COLUMN ON REPORT        DC
         B     NXTADR              AND TRY PREVIOUS RANGE            DC
         SPACE 1
PRINTLNE TM    SWITCH,ADDENT       ANYTHING TO PRINT?                DC
         BZR   R10                 RETURN IF EMPTY                   DC
         LR    R9,R1               SAVE PRINT POSITION               DC
         LA    R0,DATALINE         LOAD START OF LINE                DC
         SR    R1,R0               COMPUTE LENGTH WE'LL PRINT
         STH   R1,DATALINE         SAVE IN LENGTH
         SPACE 1
         PUT   RPT,(0)             WRITE DATA LINE
         SPACE 1
         LM    R14,R1,=A(DATADATA,L'DATADATA,0,X'40000000')     CLEAR
         MVCL  R14,R0                                     OUTPUT LINE
         NI    SWITCH,255-ADDENT   SHOW NO DATA ON LINE              DC
         LR    R1,R9               RESTORE PRINT POSITION            DC
         BR    R10                 AND RETURN TO CALLER              DC
         SPACE 1
***********************************************************************
*                                                                     *
* DONE PROCESSING CPU OR PAGE FAULT TABLE.  IF IT WAS THE PAGE FAULT  *
* TABLE, WE'RE DONE.  IF NOT, PRINT THE MODULE SUMMARY TABLE AND THEN *
* SETUP TO PROCESS THE PAGE FAULT TABLE.                              *
*                                                                     *
***********************************************************************
         SPACE 1
DONE512  TM    SWITCH,FALTREC      TEST IF PAGE FAULT TABLE
         BO    E35QUIT             BR IF SO
         SPACE 1
         OI    SWITCH,FALTREC      INDICATE PAGE FAULT TABLE
         SPACE 1
***********************************************************************
*                                                                     *
* GENERATE TOTAL MODULE USAGE REPORT                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         PUT   RPT,MODUHDR1        WRITE FIRST MODULE USAGE HEADER
         MVI   DATAASA,C'0'        SETUP 1ST LINE CARRIAGE CONTROL
         SPACE 1
         LA    R2,12               LOAD ENTRY LENGTH
         LA    R3,DATADATA+L'DATADATA-13 LOAD LAST ENTRY ADDRESS
         LA    R4,DATADATA         LOAD ADDRESS OF FIRST ENTRY
         LA    R5,ADRENTE-(RUNNEXT-RUNDSECT) LOAD PSEUDO RUN START
         SPACE 1
MODSUMM  L     R5,RUNNEXT-RUNDSECT(,R5) LOAD ADDRESS OF NEXT MODULE
         LTR   R5,R5               TEST IF END
         BZ    STFALT              BR IF SO
         SPACE 1
         LH    R7,RUNCOUNT-RUNDSECT(,R5) LOAD COUNT FOR MODULE
         MH    R7,=H'100'          MULTIPLY BY 100
         SR    R6,R6               CLEAR R6
         D     R6,JESACTIV         COMPUTE MODULE UTILIZATION
         CVD   R7,DWORK            CONVERT UTILIZATION
         MVC   3(4,R4),=X'40202120' TO
         ED    3(4,R4),DWORK+6       SPREAD DECIMAL
         OI    7(R4),C'%'          INSERT % SYMBOL
         SPACE 1
         MVC   0(4,R4),RUNMOD-RUNDSECT(R5) COPY MODULE NAME
         SPACE 1
         BXLE  R4,R2,MODSUMM       GO DO NEXT MODULE
         SPACE 1
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R4,R0               COMPUTE LENGTH OF LINE
         STH   R4,DATALINE         INSERT LENGTH INTO HEADER
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
         LA    R4,DATADATA         RESET LINE START
         MVI   DATAASA,C' '        RESET CARRIAGE CONTROL
         B     MODSUMM             AND CONTINUE
         SPACE 1
STFALT   LA    R0,DATADATA         LOAD START OF FIRST ENTRY
         CR    R4,R0               TEST IF LINE USED
         BE    STFALTT             BR IF NOT
         LA    R0,DATALINE         LOAD START OF LINE
         SR    R4,R0               COMPUTE LENGTH OF LINE
         STH   R4,DATALINE         INSERT LENGTH INTO HEADER
         SPACE 1
         PUT   RPT,(0)             WRITE THE LINE
         SPACE 1
***********************************************************************
*                                                                     *
* PRINT HEADERS FOR PAGE FAULT TABLE AND THEN LOOP TO PRINT PAGE      *
* FAULTS                                                              *
*                                                                     *
***********************************************************************
         SPACE 1
STFALTT  MVI   DATAASA,C' '        RESULT CONTROL CHARACTER
         L     R3,=A(FALTENT,ADRENT,FALTENTE) LOAD START OF FAULT TAB
         SPACE 1
         PUT   RPT,FALTHDR1        WRITE THE 1ST PAGE FAULT HEADER
         SPACE 1
         LA    R1,FLTHDR2L         LOAD LENGTH OF LENGTH 2ND HEADING
         STH   R1,ADDRHDR2         SAVE RESULT
         SPACE 1
         PUT   RPT,ADDRHDR2        WRITE THE SECOND HEADER
         SPACE 1
         B     FALTST              GO START NEXT
         EJECT
***********************************************************************
*                                                                     *
* DONE WITH REPORT -- RETURN TO SORT / MERGE SO THAT SORT / MERGE     *
* CAN TERMINATE AND RETURN BACK TO THE MAIN SECTION OF THE PROGRAM.   *
*                                                                     *
***********************************************************************
         SPACE 1
E35QUIT  L     R13,4(,R13)         LOAD ADDRESS OF SORT'S SAVE AREA
         RETURN (14,12),T,RC=8     RETURN TO SORT, INDICATE NO RECALL
         EJECT
***********************************************************************
*                                                                     *
* E35RUN -- E35RUN IS USED TO ESTABLISH A RANGE ENTRY, IF THE USAGE   *
* FOR THE RANGE IS GRATER THAN 1% OF JES2 ACTIVE TIME. REGISTERS --   *
*                                                                     *
*    R2  -- POINTS TO CURRENT RECORD                                  *
*    R3  -- POINTS TO CURRENT ADDRESS RANGE HEADER                    *
*    R10 -- LINK REGISTER                                             *
*                                                                     *
***********************************************************************
         SPACE 1
         USING ADRDSECT,R3         ESTABLISH ENTRY ADDRESSABILITY
         USING DATASECT,R2         ESTABLISH RECORD ADDRESSABILITY
         SPACE 1
E35RUN   L     R0,FALTCUT          SET CUTOFF FOR PAGE FAULT
         TM    SWITCH,FALTREC      TEST IF PAGE FAULT TABLE
         BO    E35FALT             BYPASS CUTOFF CHECK IF SO
         L     R0,CUTOFF           LOAD CPU CUTOFF
         SPACE 1
E35FALT  LH    R1,ADRCOUNT         LOAD CURRENT RANGE COUNT
         CR    R1,R0               TEST IF COUNT LESS THAN CUTOFF
         BNH   E35NRUN             BR IF COUNT <= CUTOFF
         SPACE 1
***********************************************************************
*                                                                     *
* OBTAIN A NEW RUN ENTRY                                              *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R15,RUNADDR         LOAD ADDRESS OF NEXT RUN ENTRY
         LA    R0,RUNLEN(,R15)     COMPUTE ADDRESS OF NEXT NEXT ENTRY
         C     R0,RUNMAX           TEST IF TOO BIG
         BL    *+8                 BR IF OK,
         DC    2H'0'                OTHERWISE ABEND, SPECTACULARLY
         ST    R0,RUNADDR          UPDATE ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
* INITIALIZE THE NEW RUN ENTRY FROM THE ADR                           *
*                                                                     *
***********************************************************************
         SPACE 1
         USING RUNDSECT,R15        ESTABLISH RUN ADDRESSABILITY
         SPACE 1
         L     R14,ADRLAST         LOAD ADDRESS OF PREVIOUS LAST
         ST    R15,ADRLAST         ESTABLISH NEW LAST ADDRESS
         ST    R15,RUNNEXT-RUNDSECT(,R14) ESTABLISH FORWARD CHAIN
         MVC   RUNMOD,ADRMOD       COPY MODULE ID
         MVC   RUNOFFST,ADROFFST   COPY FIRST OFFSET OF RANGE
         MVC   RUNCOUNT,ADRCOUNT   COPY RANGE ACTIVE COUNT
         EJECT
***********************************************************************
*                                                                     *
* RESET THE CURRENT MODULE, FIRST OFFSET AND COUNT IN THE ADR         *
*                                                                     *
***********************************************************************
         SPACE 1
E35NRUN  MVC   ADRMOD,JESMODID     COPY NEW MODULE ID
         MVC   ADROFFST,JESOFFST   COPY NEW OFFSET
         SR    R1,R1               SETUP NEW
         STH   R1,ADRCOUNT          COUNT VALUE
         BR    R10                 AND RETURN
         SPACE 1
         DROP  R15,R3,R2           KILL ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* FORMAT THE CONTENTS OF A RUN INTO THE OUTPUT LINE.  REGISTERS --    *
*                                                                     *
*   R1  -- POINTER TO OUTPUT AREA                                     *
*   R10 -- LINK REGISTER                                              *
*   R15 -- POINTER TO RUN TO FORMAT                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
E35FMT   L     R0,PAGEFALT         LOAD PAGE FAULTS
         TM    SWITCH,FALTREC      TEST IF WE'RE PROCESSING PAGE FAULTS
         BO    *+8                 BR IF SO
         L     R0,JESACTIV         REPLACE WAIT CPU COUNT
         MVC   0(4,R1),RUNMOD-RUNDSECT(R15) COPY MODULE ID
         SPACE 1
         STM   R8,R9,16(R13)        SAVE 2 REGISTERS
         LH    R9,RUNCOUNT-RUNDSECT(,R15) LOAD ENTRY COUNT
         MH    R9,=H'100'           MULTIPLY BY 100
         SR    R8,R8                CLEAR R8
         DR    R8,R0               COMPUTE ACTIVE IN AREA
         CVD   R9,DWORK             CONVERT RESULT TO PACKED DECIMAL
         MVC   8(4,R1),=X'40202120' COPY EDIT MASK
         ED    8(4,R1),DWORK+6      CONVERT USAGE
         MVI   12(R1),C'%'          INSERT SYMBOL
         LM    R8,R9,16(R13)        RELOAD WORK REGISTERS
         SPACE 1
         UNPK  5(5,R1),RUNOFFST-RUNDSECT(3,R15) CONVERT OFFSET
         TR    5(4,R1),HEXTAB       TO SPREAD HEX
         MVI   9(R1),C' '           FIX UP BYTE
         LA    R1,15(,R1)          POINT TO NEXT AREA                DC
         OI    SWITCH,ADDENT       SHOW SOMETHING TO PRINT           DC
         SPACE 1
         BR    R10                  AND RETURN
 TITLE '                                                     DATA AREA'
***********************************************************************
*                                                                     *
*                               DATA AREA                             *
*                                                                     *
***********************************************************************
         SPACE 1
S        DC    9D'0'               NEW OS SAVE AREA
         SPACE 1
SORTSAVE DC    9D'0'               SAVE AREA FOR SORT EXITS
         SPACE 1
DWORK    DC    PL8'0'              DOUBLE WORD WORK AREA
         SPACE 1
OPENL    OPEN  (RPT,OUTPUT,DATA,INPUT,CONFIG,INPUT),MF=L OPEN PARMS
         SPACE 1
         PRINT NOGEN
RPT      DCB   RECFM=VBA,LRECL=125,BLKSIZE=4096,DSORG=PS,MACRF=PM,     ?
               DDNAME=RPTPRINT     REPORT DCB
DATA     DCB   DDNAME=MONDATA,DSORG=PS,MACRF=GL,EODAD=EOF MONITOR DATA
CONFIG   DCB   DDNAME=CONFIG,DSORG=PS,MACRF=GL,EODAD=EOF CONFIGURATION
         PRINT GEN
         SPACE 1
HISTCALL CALL  ,(RPT,*-*,*-*,*-*,*-*,TEN),VL,MF=L PARMS FOR HIST
         SPACE 1
LIMPARM  CALL  ,(*-*,*-*),MF=L     PARMS FOR LIMSET ROUTINE
         SPACE 1
SORTLINK LINK  EP=SORT,SF=L        SYSTEM PARMS TO LINK TO SORT
         SPACE 1
SORTPARM DC    0A(0),AL1(128),AL3(SORTPRM) SORT PARM POINTER
         SPACE 1
         CNOP  2,4                 ALIGN SORT PARMS
SORTPRM  DC    Y(SORTPEND-SORTSTMT) DEFINE PARM LENGTH
SORTSTMT DC    A(SORTSTRT,SORTEND) DEFINE SORT STATEMENT
         DC    A(RECSTRT,RECEND)   DEFINE RECORD STATEMENT
         DC    A(SORTE15)          DEFINE SORT INPUT EXIT
         DC    A(SORTE35)          DEFINE SORT OUTPUT EXIT
STORAGE  DC    A(0)                DEFINE CORE = MAX
SORTPEND EQU   *                   END OF SORT PARM LIST
         SPACE 1
TEN      DC    F'10'               CONSTANT OF 10
TOTRECS  DC    F'0'                TOTAL NUMBER OF RECORDS IN DATA SET
JESACTIV DC    F'0'                NUMBER OF TIMES JES2 ACTIVE
SVCFREQ  DC    F'0'                NUMBER OF TIMES JES IN AN SVC
IRBFREQ  DC    F'0'                NUMBER OF TIMES JES IN AN IRB
PCECOUNT DC    F'0'                NUMBER OF TIMES PCE DETECTED
PAGEFALT DC    F'0'                NUMBER OF TIMES JES IN PAGE WAIT
CUTOFF   DC    F'0'                1% OF JESACTIV FOR ADDRESS ANALYSIS
FALTCUT  DC    F'0'                1% OF PAGEFALT FOR PG FAULT TABLE
LASTMOD  DC    CL4' '              LAST MODULE ID PROCESSED
RUNADDR  DC    A(RUNDATA)          CURRENT ENTRY IN RUNDATA AREA
RUNMAX   DC    A(RUNDATA+1500*RUNLEN) END OF AREA IN RUNDATA AREA    DC
LASTTIME DC    PL4'9988770'        TIME LAST RECORD WRITTEN
LASTDATE DC    PL4'99366'          DATE LAST RECORD WRITTEN
         SPACE 1
BUFLIMS  DC    F'0,5,6,10,11,15,16,20,21,25,26,30,31,35,36,40,41,45,46,?
               50'                 BUFFER LIMIT TABLE
BUFTAB   DC    10F'0'              BUFFER USAGE FREQUENCY TABLE
         SPACE 1
TPLIMS   DC    F'0,5,6,10,11,15,16,20,21,25,26,30,31,35,36,40,41,45,46,?
               50'                 TP BUFFER LIMIT TABLE
TPTAB    DC    10F'0'              TP BUFFER USAGE FREQUENCY TABLE
         SPACE 1
SMFLIMS  DC    F'1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10' SMF LIMITS
SMFTAB   DC    10F'0'              SMF BUFFER USAGE FREQUENCY TABLE
         SPACE 1
CMBLIMS  DC    F'1,1,2,2,3,3,4,4,5,5,6,10,11,20,21,50,51,100,101,200'  ?
                                   CMB BUFFER LIMIT TABLE
CMBTAB   DC    10F'0'              CMB BUFFER USAGE FREQUENCY TABLE
         SPACE 1
TIMELIMS DC    F'0,0,1,10,11,20,21,40,41,60,61,80,81,100,101,200,201,40?
               0,401,86400'        TIMER VALUE LIMIT TABLE
TIMETAB  DC    10F'0'              TIMER VALUE FREQUENCY TABLE
         SPACE 1
ACTMSG   DC    Y(ACTMSGL,0),C'-JES2 WAS ACTIVE '
ACTAM    DC    C' ',X'202120',C'.',X'2020'
ACTAMT   EQU   ACTAM,*-ACTAM
         DC    C'% OF THE TIME'
ACTMSGL  EQU   *-ACTMSG
         SPACE 1
FALTMSG  DC    Y(FALTMSGL,0),C'0JES2 WAS IN PAGE WAIT FOR'
FALTRATE DC    X'402021204B2020',C'% OF THE OBSERVATIONS'
FALTMSGL EQU   *-FALTMSG
         SPACE 1
RBMSG1   DC    Y(RBMSG1L,0),C'0JES2 WAS NOT AT THE MAIN PRB LEVEL FOR'
RBTPCT   DC    X'402021204B2020',C'% OF THE OBSERVATIONS ('
RBAPCT   DC    X'402021204B2020',C'% OF JES2 ACTIVE TIME)'
RBMSG1L  EQU   *-RBMSG1
         SPACE 1
RBMSG2   DC    Y(RBMSG2L,0)
RBSVC    DC    X'402021204B2020',C'% OF THESE OBSERVATIONS WERE SVRB''S?
               ,'
RBIRB    DC    X'402021204B2020',C'% OF THESE OBSERVATIONS WERE IRB''S'
RBMSG2L  EQU   *-RBMSG2
         SPACE 1
SVCHDR1  DC    Y(SVCHDR1L,0),C'0SVC FREQUENCY USAGE TABLE --'
SVCHDR1L EQU   *-SVCHDR1
         SPACE 1
SVCHDR2  DC    Y(SVCHDR2L,0),C'  ',10C'  SVC USAGE'
SVCHDR2L EQU   *-SVCHDR2               0123456789%
         SPACE 1
PCEHDR1  DC    Y(PCEHDR1L,0),C'0PCE USAGE --'
PCEHDR1L EQU   *-PCEHDR1
         SPACE 1
PCEHDR2  DC    Y(PCEHDR2L,0),C'  ',4CL26'  USAGE      PCE TYPE'
PCEHDR2L EQU   *-PCEHDR2
         SPACE 1
DATALINE DC    Y(125,0)
DATAASA  DC    C' '
DATADATA DC    CL120' '
         SPACE 1
MAINHDR  DC    Y(MAINHDRL,0),C'1',((120-81)/2)C' ' 81 = L'MAINTXT
MAINTXT  DC    C'J E S 2    P E R F O R M A N C E    M O N I T O R    R?
                E P O R T    U T I L I T Y'
MAINHDRL EQU   *-MAINHDR
         SPACE 1
CNFGHDR1 DC    Y(CNFGHD1L,0),C'-'
         DC    C' '
         DC    C'MONITOR START     MONITOR END  SYSTEM SAMPLE  SPOOL'
         DC    C'    TP      SMF   CONSOLE MESSAGE   JES2'         SPR2
CNFGHD1L EQU   *-CNFGHDR1
         SPACE 1
CNFGHDR2 DC    Y(CNFGHD2L,0),C' '
         DC    C' '
         DC    C'DATE AND TIME    DATE AND TIME   ID    RATE  BUFFERS '
         DC    C'BUFFERS BUFFERS     BUFFERS       VERSION'        SPR2
CNFGHD2L EQU   *-CNFGHDR2
         SPACE 1
HDRDATA  DC    Y(HDRDATAL,0),C'0'                                  SPR2
PRTSDATE DC    X'40212061202020'
PRTSTIME DC    X'4021207A20207A2020',C' '
PRTEDATE DC    X'40212061202020'
PRTETIME DC    X'4021207A20207A2020',C' '
PRTSYS   DC    CL4' '
PRTRATE  DC    X'402020202120',2C' '
PRTBUFCT DC    X'402020202120',2C' '                               SPR2
PRTTPCT  DC    X'402020202120',2C' '
PRTSMFCT DC    X'402020202120',7C' '
PRTCMBCT DC    X'402020202120',10C' '                              SPR2
PRTVERSN DC    CL8' '                                              SPR2
HDRDATAL EQU   *-HDRDATA
         SPACE 1
ADDRHDR1 DC    Y(ADRHDR1L,0),C'1',((120-85)/2)C' ' 85 = L'ADRHDR1T
ADRHDR1T DC    C'J E S 2    P E R F O R M A N C E    M O N I T O R    A?
                D D R E S S    A N A L Y S I S'
ADRHDR1L EQU   *-ADDRHDR1
         SPACE 1
ADDRHDR2 DC    Y(ADRHDR2L,0),C'0',CL10' '
         DC    CL15'   512 BYTE    '
         DC    CL15'   256 BYTE    '
         DC    CL15'   128 BYTE    '
         DC    CL15'    64 BYTE    '
         DC    CL15'    32 BYTE    '
         DC    CL15'    16 BYTE    '
ADRHDR2L EQU   *-ADDRHDR2                                            DC
FLTHDR2L EQU   *-ADDRHDR2
         SPACE 1
FALTHDR1 DC    Y(FLTHDR1L,0),C'1',((120-92)/2)C' ' 92=L'FLTHDR1T
FLTHDR1T DC    C'J E S 2    P E R F O R M A N C E    M O N I T O R    P?
                A G E    F A U L T    A N A L Y S I S'
FLTHDR1L EQU   *-FALTHDR1
         SPACE 1
MODUHDR1 DC    Y(MODUHD1L,0),C'-',((120-77)/2)C' ' 77=L'MODUHD1T
MODUHD1T DC    C'J E S 2    P E R F O R M A N C E    M O N I T O R    M?
                O D U L E    U S A G E'
MODUHD1L EQU   *-MODUHDR1
         SPACE 1
OUTREC   DC    Y(OUTRECL,0),C' '
PRTCUR   DC    CL6' ',C' '
PRTJES   DC    CL6' '
PRTTIME  DC    CL6' ',C' '
PRTMOD   DC    CL4' ',C' '
PRTOFF   DC    CL4' '
PRTBUF   DC    CL6' '
PRTTP    DC    CL6' '
PRTSMF   DC    CL6' '
PRTCMB   DC    CL6' ',C' '
PRTPTYP  DC    CL4' ',C' '
PRTINTC  DC    CL2' ',C' '
PRTRB    DC    CL2' ',C' '
PRTWC    DC    CL2' '
OUTRECL  EQU   *-OUTREC
         DC    C' '
         SPACE 1
DATALNER DC    Y(DATALN,0),C'0UNEXPECTED RECORD LENGTH IN MONITOR DATA ?
               SET'
DATALN   EQU   *-DATALNER
         SPACE 1
CONFLNER DC    Y(CONFLN,0),C'0UNEXPECTED RECORD LENGTH IN CONFIGURATION?
                DATA SET'
CONFLN   EQU   *-CONFLNER
         SPACE 1
OPNERRM  WTO   'UNABLE TO OPEN XXXXXXXX',MF=L,ROUTCDE=(2,11),DESC=7
         ORG   OPNERRM+4
         DS    C'UNABLE TO OPEN '
OPNERRD  DS    C'XXXXXXXX'
         ORG   ,
         SPACE 1
SWITCH   DC    B'00000000'         FUNCTION SWITCH
ADDENT   EQU   B'10000000'         ENTRY ADDED TO OUTPUT LINE DURING   ?
                                    ADDRESS ANALYSIS
QUIT     EQU   B'10000000'         MUST EXIT NEXT TIME THIS SWITCH     ?
                                    IS CHECKED
FALTREC  EQU   B'01000000'         PAGE FAULT TABLE PROCESSING
         SPACE 1
         CNOP  0,8
HEXTAB   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         SPACE 1
         LTORG ,
         SPACE 1
SVCTABLE DC    256F'0'             SVC FREQUENCY TABLE
         SPACE 1
PCETAB   DC    F'0',X'0000',CL18'ASYNCH'
         DC    F'0',X'0001',CL18'INPUT'
         DC    F'0',X'0101',CL18'LOCAL READER'
         DC    F'0',X'0201',CL18'REMOTE READER'
         DC    F'0',X'0801',CL18'INTERNAL READER'
         DC    F'0',X'0002',CL18'SETUP'
         DC    F'0',X'0003',CL18'CONVERTER'
         DC    F'0',X'0004',CL18'EXECUTION'
         DC    F'0',X'0005',CL18'PROCESS SYSOUT'
         DC    F'0',X'0006',CL18'OUTPUT'
         DC    F'0',X'0007',CL18'PRINT'
         DC    F'0',X'8107',CL18'LOCAL PRINT'
         DC    F'0',X'8207',CL18'REMOTE PRINT'
         DC    F'0',X'0008',CL18'PUNCH'
         DC    F'0',X'8108',CL18'LOCAL PUNCH'
         DC    F'0',X'8208',CL18'REMOTE PUNCH'
         DC    F'0',X'0009',CL18'PURGE'
         DC    F'0',X'000A',CL18'CONSOLE'
         DC    F'0',X'000B',CL18'LINE MANAGER'
         DC    F'0',X'000C',CL18'TIMER'
         DC    F'0',X'000D',CL18'CHECKPOINT'
         DC    F'0',X'000E',CL18'PRIORITY AGING'
         DC    F'0',X'000F',CL18'WARM START'
         DC    F'0',X'0410',CL18'JOB TRANSMITTER'
         DC    F'0',X'0411',CL18'JOB RECEIVER'
         DC    F'0',X'0412',CL18'SYSOUT TRANSMITTER'
         DC    F'0',X'0413',CL18'SYSOUT RECEIVER'
         DC    F'0',X'0414',CL18'PATH MANAGER'
         DC    F'0',X'0015',CL18'REMOTE CONSOLE'
         DC    F'0',X'0016',CL18'TIME EXCESSION'
         DC    F'0',X'0017',CL18'HOLD QUEUE'
         DC    F'0',X'0018',CL18'EVENT TRACE LOG'                    DC
         DC    F'0',X'0019',CL18'XFR I/O MANAGER'                  SPR2
         DC    F'0',X'001A',CL18'XFR DUMP QUEUE'                   SPR2
         DC    F'0',X'001B',CL18'SPOOL MANAGER'                    SPR2
         DC    F'0',X'401C',CL18'NJE ROUTE RCVR'                   SPR2
PCETABE  DC    F'0',X'401D',CL18'NJE ROUTE XMIT'                   SPR2
         SPACE 1
ADRENT   DC    A(0,*-4),CL4' ',XL2'0',H'512,9,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'256,8,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'128,7,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'64,6,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'32,5,0'                      DC
ADRENTRE DC    A(0,*-4),CL4' ',XL2'0',H'16,4,0'                      DC
ADRENTE  DC    A(0,*-4),CL4' ',XL2'0',X'FFFF',H'16,0' BUCKET FOR SINGLE?
                                                      MODULE         DC
FALTENT  DC    A(0,*-4),CL4' ',XL2'0',H'512,9,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'256,8,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'128,7,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'64,6,0'
         DC    A(0,*-4),CL4' ',XL2'0',H'32,5,0'
FALTENTE DC    A(0,*-4),CL4' ',XL2'0',H'16,4,0'
         SPACE 1
SPLHHDR  WTO   'S P O O L    B U F F E R    U T I L I Z A T I O N',MF=L
SPLVHDR  WTO   'FREQUENCY OF OCCURANCE',MF=L
         SPACE 1
TPHHDR   WTO   'T P    B U F F E R    U T I L I Z A T I O N',MF=L
TPVHDR   EQU   SPLVHDR
         SPACE 1
CMBHHDR  WTO   'C O N S O L E    M E S S A G E    B U F F E R    U T I ?
               L I Z A T I O N',MF=L
CMBVHDR  EQU   SPLVHDR
         SPACE 1
SMFHHDR  WTO   'S M F    B U F F E R    U T I L I Z A T I O N',MF=L
SMFVHDR  EQU   SPLVHDR
         SPACE 1
TIMEHHDR WTO   'S T I M E R    I N T E R V A L    V A L U E   ( I N    ?
               1 / 1 0 0 T H S    S E C O N D S )',MF=L
TIMEVHDR EQU   SPLVHDR
         SPACE 1
SORTSTRT DC    C' SORT FIELDS=(13,4,CH,A,17,2,BI,A),SIZE=E5000 '
SORTEND  DC    C' '
         SPACE 1
RECSTRT  DC    C' RECORD TYPE=F,LENGTH=32 '
RECEND   DC    C' '
         SPACE 1
         DC    0D'0'               ALIGN TO A DOUBLE WORD
RUNDATA  DC    1500XL12'0'         ROOM FOR 1500 RANGE DATA ENTRIES  DC
 TITLE '                                        DATA AREA DESCRIPTIONS'
DATASECT DSECT                     MONITOR DATA
JESADDR  DS    XL4                 JES2 TASK ADDRESS
CURADDR  DS    XL4                 JES2 PRB ADDRESS
TIMEVAL  DS    F                   TIMER VALUE IF JES2 CAUGHT IN STIMER
JESMODID DS    CL4                 JES2 MODULE IDENTIFICATION
JESOFFST DS    XL2                 JES2 MODULE OFFSET
BUFBUFS  DS    H                   ACTIVE SPOOL BUFFERS
TPBUFS   DS    H                   ACTIVE TP BUFFERS
SMFBUFS  DS    H                   ACTIVE SMF BUFFERS
CMBBUFS  DS    H                   ACTIVE CONSOLE MESSAGE BUFFERS
JESPTYP  DS    XL2                 CURRENT JES2 PCE ID
JESINTC  DS    XL2                 JES2 INTERRUPT CODE IF NOT IN PRB
JESRBST  DS    XL1                 JES2 RB STATUS
JESWC    DS    XL1                 JES2 TASK WAIT COUNT
DATALEN  EQU   *-DATASECT          LENGTH OF RECORD
         SPACE 5
CONFIGDS DSECT                     CONFIGURATION DATA
SMFBUFCT DS    F                   NUMBER OF SMF BUFFERS ALLOCATED
CMBBUFCT DS    F                   NUMBER OF CONSOLE MESSAGE BUFFERS
BUFBUFCT DS    F                   NUMBER OF SPOOL BUFFERS ALLOCATED
TPBUFCT  DS    F                   NUMBER OF TP BUFFERS ALLOCATED
STARTUP  DS    F,PL4               MONITOR START TIME AND DATE
SAMPRATE DS    F                   MONITOR SAMPLE RATE 1/100THS SECOND
SYSID    DS    CL4                 SMF SYSTEM ID OF SYSTEM OF SYSTEM
JES2VER  DS    CL8                 VERSION NUMBER OF JES           SPR2
CONFIGLN EQU   *-CONFIGDS          LENGTH OF RECORD
         SPACE 5
ADRDSECT DSECT                     ADDRESS RUN DSECT (ADRENT)
ADRFIRST DS    A                   ADDRESS OF FIRST ENTRY FOR RUN
ADRLAST  DS    A                   ADDRESS OF LAST ENTRY IN RUN
ADRMOD   DS    CL4                 CURRENT MODULE
ADROFFST DS    XL2                 CURRENT OFFSET (IN TRUE FORM)
ADRRANGE DS    H                   RANGE VALUE
ADRSHIFT DS    H                   SHIFT VALUE
ADRCOUNT DS    H                   CURRENT ENTRY COUNT
         DS    0F                  ALIGN TO A WORD BOUNDARY
ADRLEN   EQU   *-ADRDSECT          ENTRY LENGTH
         SPACE 5
RUNDSECT DSECT                     RANGE ENTRY DSECT
RUNNEXT  DS    A                   ADDRESS OF NEXT RUN ENTRY
RUNMOD   DS    CL4                 JES MODULE ID
RUNOFFST DS    XL2                 JES MODULE OFFSET
RUNCOUNT DS    H                   RANGE ACTIVITY COUNT
RUNLEN   EQU   *-RUNDSECT          ENTRY LENGTH
         EJECT
         PRINT NOGEN
         DCBD  DSORG=QS,DEVD=DA
BUFCB    EQU   DCBBUFCB-IHADCB     DCBBUFCB OFFSET
OFLGS    EQU   DCBOFLGS-IHADCB     DCBOFLGS OFFSET
LRECL    EQU   DCBLRECL-IHADCB     DCBLRECL OFFSET
DDNAM    EQU   DCBDDNAM-IHADCB     DCBDDNAM OFFSET
         SPACE 5
         END   JESRPT
