MONITOR  TITLE '                     JES2 PERFORMANCE ANALYSIS MONITOR'
***********************************************************************
*                                                                     *
* TITLE -- JES2 PERFORMANCE ANALYSIS DATA COLLECTION MONITOR          *
*                                                                     *
* FUNCTION / OPERATION -- THIS MODULE COLLECTS PERFORMANCE DATA FROM  *
*    THE JES2 ADDRESS SPACE                                           *
*                                                                     *
* METHOD OF OPERATION -- AFTER INITIALIZATION, THIS MODULE            *
*    PERIODICALLY SCHEDULES AN SRB INTO THE JES2 ADDRESS SPACE TO     *
*    COLLECT DATA THAT IS WRITTEN TO THE OUTPUT DATA SET TO BE USED   *
*    AS INPUT TO A DATA COLLECTION UTILITY.  THE MAIN MONITOR PROGRAM *
*    THE SRB AND THE SRB ROUTINE ARE PROVIDED IN THIS ASSEMBLY.       *
*                                                                     *
* STATUS / CHANGE LEVEL -- V0L0 -- DEC 31, 1979 -- I.N.A.             *
*                                                                     *
*    V0L1 -- MAR 31, 1980 -- I.N.A.                                   *
*                                                                     *
*    FUNCTIONAL ENHANCEMENTS --                                       *
*    1) THE MODULE OBTAINS PERFORMANCE RELATED CONFIGURATION DATA     *
*       FROM JES2 AND WRITES THE CONFIGURATION DATA TO A DATA SET     *
*       FOR USE BY A PERFORMANCE ANALYSIS UTILITY.                    *
*    2) THE SRB ROUTINE COLLECTS BUFFER UTILIZATION DATA FROM THE     *
*       JES2 ADDRESS SPACE AND THE CMB'S IN CSA, AND WRITES THE DATA  *
*       TO THE MONITOR OUTPUT DATA SET.                               *
*    3) THE SRB ROUTINE ATTEMPTS TO DETERMINE THE SVC FUNCTION BEING  *
*       USED BY THE JES2 MAIN TASK IF JES2 IS OPERATING UNDER AN      *
*       SVRB.  IF THE SVC IS STIMER, THE INTERVAL VALUE IS OBTAINED.  *
*                                                                     *
*    INCREMENTAL IMPROVEMENTS --                                      *
*    1) THE DEFAULT BUFFER SIZE HAS BEEN CHANGED TO 3640 TO IMPROVE   *
*       TRACK UTILIZATION ON A 3350.  FIVE BUFFERS PER TRACK CAN BE   *
*       WRITTEN WITH THE NEW BLOCK SIZE.                              *
*    2) THE TIMER INTERVAL PARMETER CAN BE SPECIFIED AS PART OF THE   *
*       PARM FIELD. THE VALUE IS SPECIFIED IN 1/100TH SECOND          *
*       INTERVALS.                                                    *
*    3) BLKSIZE CAN BE SPECIFIED IN JCL AND THE ACTUAL I/O BUFFERS    *
*       ARE OBTAINED BY THE PROGRAM.                                  *
*    4) THE MAXIMUM NUMBER OF BLOCKS THAT CAN BE WRITTEN INTO THE     *
*       SPACE PROVIDED BY THE USER IS COMPUTED.  THE MONITOR WILL     *
*       TERMINATE WHEN THESE BLOCKS HAVE BEEN WRITTEN.                *
*                                                                     *
*    MAINTENANCE --                                                   *
*    1) THE DEFAULT MONITOR INTERVAL HAS BEEN CHANGED TO 250 MILLI-   *
*       SECONDS FROM 100 MILLISECONDS.                                *
*    2) THE INTERNAL DOCUMENTATION HAS BEEN UPGRADED.                 *
*                                                                     *
*    V0L2 -- JULY 15, 1980 -- I.N.A.                                  *
*                                                                     *
*    FUNCTIONAL ENHANCEMENTS -- NONE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*    INCREMENTAL IMPROVEMENTS --                                      *
*    1) THE JES2 SYSTEM THAT INITIATES THIS MONITOR IS THE JES2       *
*       SYSTEM THIS MONITOR MONITORS.  THIS CHANGE ALLOWS A POLY-JES  *
*       SYSTEM TO BE MONITORED.  THE RESTRICTION THAT REQUIRED THE    *
*       THE PRIMARY JES TO BE NAMED 'JES2' HAS BEEN REMOVED.          *
*    MAINTENANCE -- NONE                                              *
*                                                                     *
*    V0L3 -- OCTOBER 27, 1980 -- DATACROWN (CHANGES FLAGGED 'DC')     *
*                                                                     *
*    SELBY SHANLY           416-499-1012                              *
*    DATACROWN INC.                                                   *
*    650 MCNICOLL AVE                                                 *
*    WILLOWDALE, ONTARIO                                              *
*    CANADA                                                           *
*                                                                     *
*    FUNCTIONAL ENHANCEMENTS -- NONE                                  *
*                                                                     *
*    INCREMENTAL IMPROVEMENTS --                                      *
*    1) SYSEVENT TRANSWAP ADDED TO REMOVE REQUIREMENT FOR             *
*       PROGRAM PROPERTIES TABLE ENTRY.                               *
*                                                                     *
*    MAINTENANCE --                                                   *
*    1) SRB ROUTINE CODE CHANGED TO REDUCE AP/MP WINDOWS              *
*       TO PROVIDE MORE ACCURATE RESULTS ON AP/MP.                    *
*                                                                     *
*                                                                     *
* RESTRICTIONS -- THIS MODULE IS DESIGNED TO OPERATE WITH JES2        *
*    SP RELEASE 2 WITH NJE AND MULTI ACCESS SPOOL..                   *
*                     THIS MODULE MUST BE ASSEMBLED WITH THE SAME     *
*    LEVEL OF JES2 CONTROL BLOCKS AS ARE USED TO ASSEMBLE THE JES2    *
*    SYSTEM BEING MONITORED.                                          *
*                                                                     *
* EXTERNAL ROUTINES --                                                *
*    RECTRK -- RECTRK IS USED TO COMPUTE THE NUMBER OF RECORDS OF A   *
*       LENGTH SUPPLIED TO THE PROGRAM CAN FIT ONTO A TRACK OF A      *
*       DATA SET DESCRIBED BY AN OPEN DCB.                            *
*                                                                     *
*    V0L4 -- MAY     27, 1981 -- MELLON BANK (CHANGES FLAGGED 'SPR2') *
*                                                                     *
*    MAINTENANCE --                                                   *
*       SUPPORT FOR JES2 SP RELEASE 2 and 3 HAS BEEN ADDED AS WELL AS *
*       USER ABENDS FOR CERTAIN DETECTED ERRORS TO PROVIDE            *
*       DOCUMENTATION.                                                *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
         $HASPCB &DOC=YES,&LIST=YES
         GBLB  &SE
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $PSA  LIST=&LIST
         $CVT  LIST=&LIST
         $JESCT LIST=&LIST
         $SSCT LIST=&LIST
         $SSIB LIST=&LIST
         $ASCB LIST=&LIST
         $TCB  LIST=&LIST
         $JSCB LIST=&LIST
         $RB   LIST=&LIST
         $SRB  LIST=&LIST
         $SMCA LIST=&LIST
         $SVT  DOC=&DOC
         $PCE  DOC=&DOC                                             NJE
         $BUFFER DOC=&DOC                                          SPR2
         $JCT  DOC=&DOC                                            SPR2
         $JQE  DOC=&DOC                                            SPR2
         $CAT  DOC=&DOC                                            SPR2
         $HCT  DOC=&DOC
         $BPM  DOC=&DOC
         $CMB  DOC=&DOC
         AIF   (NOT &SE).MODMAP
         IHASVT CSECT=NO
&SYSECT  CSECT
.MODMAP  PRINT ON
         $MODMAP DOC=NO
         PRINT &PRINT
         POP   PRINT
         PRINT &GEN,&DATA
         MEND
         SPACE 5
JESMON   CSECT                     DEFINE MAIN PROGRAM CSECT
         SPACE 1
         COPY  $HASPGEN
         SPACE 5
         GBLB  &SE                 SE IN SYSTEM OPTION
&SE      SETB  (1)                 SE IN SYSTEM
         TITLE 'HASP AND OS CONTROL BLOCKS'
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                                  GENERATE HASP CONTROL BLOCKS
*
        $HASPCB DOC=&DOC,LIST=&LIST
 TITLE '                             JES2 PERFORMANCE ANALYSIS MONITOR'
***********************************************************************
*                                                                     *
* DEFINE SQA SUBPOOL FOR GETMAIN / FREEMAIN MACROS                    *
*                                                                     *
***********************************************************************
         SPACE 1
SQA      EQU   245                 SUBPOOL FOR SQA STORAGE
         SPACE 1
***********************************************************************
*                                                                     *
* SAVE CALLER'S REGISTERS AND ESTABLISH A NEW SAVE AREA ON THE SAVE   *
* AREA CHAIN                                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         SAVE  (14,12),,JES2-SP-REL2--MONITOR-ROUTINE-V0L4-MAY-27-81 SP
         SPACE 1
         BALR  R12,0               OBTAIN LOCAL ADDRESS
         USING *,R12               SETUP PROGRAM ADDRESSABILITY
         SPACE 1
         LA    R15,S               LOAD ADDRESS OF NEW OS SAVE AREA
         ST    R15,8(,R13)         CHAIN NEW SAVE AREA TO OLD
         ST    R13,4(,R15)         CHAIN OLD SAVE AREA TO NEW
         LR    R13,R15             ESTABLISH NEW SAVE AREA ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
* OBTAIN MONITOR INTERVAL, IF PRESENT, FROM PARM FIELD.  IF IT'S      *
* INVALID, IGNORE THE PARAMETER                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R15,0(,R1)          LOAD ADDRESS OF PARMS
         LH    R1,0(,R15)          LOAD LENGTH OF PARMS
         LTR   R1,R1               TEST IF PARMS PROVIDED
         BZ    KEY0                BR IF NOT, USE DEFAULT INTERVAL
         LA    R1,1(R1,R15)        COMPUTE ADDRESS OF LAST CHARACTER   ?
                                    IN PARMS
         LA    R14,2(,R15)         COMPUTE ADDRESS OF FIRST CHARACTER  ?
                                    IN PARMS
         LR    R15,R14             COPY RESULT ADDRESS TO R15
         LA    R0,1                SET INCREMENT VALUE
TESTNEXT CLI   0(R14),C'0'         TEST FOR NUMERIC
         BL    KEY0                BR IF INVALID -- IGNORE
         CLI   0(R14),C'9'         TEST FOR NUMERIC
         BH    KEY0                BR IF INVALID -- IGNORE
         BXLE  R14,R0,TESTNEXT     AND CONTINUE WITH NEXT
         SR    R14,R15             COMPUTE PARM LENGTH
         BZ    KEY0                BR IF NULL
         BCTR  R14,0               REDUCE PARM LENGTH FOR HARDWARE
         EX    R14,PACK            PACK PARAMETER
         CVB   R14,DWORK           CONVERT PARM TO BINARY
         LTR   R14,R14             TEST IF 0
         BZ    KEY0                BR IF SO -- IGNORE
         ST    R14,INTERVAL        SAVE RESULT
         SPACE 1
***********************************************************************
*                                                                     *
* GET INTO KEY 0 SUPERVISOR STATE TO RUN THE MONITOR.                 *
*                                                                     *
***********************************************************************
         SPACE 1
KEY0     MODESET KEY=ZERO,MODE=SUP GET INTO KEY 0 SUPERVISOR STATE
         SPACE 1
***********************************************************************
*                                                                     *
* ISSUE  SYSEVENT TO FORCE MONITOR NON-SWAPPABLE                      *
*                                                                     *
***********************************************************************
         SPACE 1                                                     DC
         SLR   R1,R1               INDICATE NO ECB                   DC
         SYSEVENT TRANSWAP                                           DC
         SPACE 1                                                     DC
***********************************************************************
*                                                                     *
* OPEN THE OUTPUT DATA SETS AND CONFIRM THE PRIMARY DATA SET IS OPEN  *
*                                                                     *
***********************************************************************
         SPACE 1
         OPEN  MF=(E,OPENL)        OPEN OUTPUT DATA SETS
         SPACE 1
         TM    OUTDCB+OFLGS,X'10'  TEST IF OPEN TOOK
         BZ    BADOPEN             BR IF OPEN FAILED
         EJECT                                                       DC
***********************************************************************
*                                                                     *
* COMPUTE MAXIMUM NUMBER OF RECORDS THAT CAN BE WRITTEN INTO THE      *
* EXISTING EXTENT OF THE MONITOR OUTPUT DATA SET                      *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R2,OUTDCB+BLKSI     LOAD BLKSIZE
         ST    R2,SAVEREG          SAVE IN FULL WORD
         SPACE 1
         L     R15,=V(RECTRK)      LOAD ADDRESS OF ROUTINE TO COMPUTE  ?
                                    RECORDS / TRACK
         CALL  (15),MF=(E,RECPARM) COMPUTE RECORDS / TRACK
         SPACE 1
         LTR   R15,R15             TEST IF RETURN CODE OK
         BNZ   EXIT                BR IF NOT -- JUST EXIT
         SPACE 1
         L     R1,OUTDCB+DEBAD     LOAD ADDRESS OF DEB
         SR    R0,R0               CLEAR COUNTER REGISTER
         SR    R15,R15             CLEAR RESULT REGISTER
         IC    R0,16(,R1)          LOAD NUMBER OF EXTENTS
         SPACE 1
NEXTXTNT AH    R15,14+32(,R1)      ADD IN SIZE OF CURRENT EXTENT
         LA    R1,16(,R1)          INCREMENT EXTENT POINTER
         BCT   R0,NEXTXTNT         AND CONTINUE LOOPING THROUGH DEB    ?
                                    EXTENT TABLE
         SPACE 1
         M     R14,SAVEREG+4       MULTIPLY TRACKS IN DATA SET BY      ?
                                    RECORDS / TRACK TO GET RECORDS IN  ?
                                    DATA SET
         ST    R15,MAXBLOCK        SAVE MAXIMUM NUMBER OF BLOCKS
         SPACE 1
***********************************************************************
*                                                                     *
* OBTAIN STORAGE FOR TWO I/O BUFFERS AND INITIALIZE BUFFER MANAGEMENT *
* POINTERS                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,BUFLEN           LOAD BUFFER LENGTH
         LA    R0,L'JESDATA(,R1)   ADD ONE EXTRA RECORD FOR SAFETY
         SLL   R0,1                MULTIPLY BY 2
         GETMAIN R,LV=(0)          GET STORAGE FOR TWO BUFFERS
         LA    R0,L'JESDATA(,R1)   COMPUTE ADDRESS OF FIRST DATA RECORD
         ST    R0,BUFPTR           INITIALIZE BUFPTR
         ST    R1,CURBUF           INITIALIZE CURBUF
         AH    R1,BUFLEN           COMPUTE ADDRESS OF 2ND BUFFER
         ST    R1,CURBUF+4         INITIALIZE BUFEND
         ST    R1,ALTBUF           INITIALIZE ALTBUF
         AH    R1,BUFLEN           COMPUTE END+1 OF SECOND BUFFER
         ST    R1,ALTBUF+4         SAVE RESULT
         EJECT                                                       DC
***********************************************************************
*                                                                     *
* OBTAIN STORAGE IN THE SQA (TO AVOID PAGE FAULTS) FOR THE SRB, SRB   *
* ROUTINE AND THE SRB ROUTINE DATA AREA.                              *
*                                                                     *
***********************************************************************
         SPACE 1
         GETMAIN R,LV=SHAREDL,SP=SQA OBTAIN STORAGE IN SQA FOR SRB +   ?
                                    ROUTINE
         ST    R1,SQAADDR          SAVE ADDRESS OF SQA AREA
         LR    R9,R1               COPY ADDRESS OF SQA AREA TO R9
         SPACE 1
         USING SQARTN,R9           ESTABLISH SQA AREA ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* COPY THE SQA DATA FROM THIS MODULE TO SQA.                          *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    R0,R1               COPY SQA AREA ADDRESS TO R0
         LA    R1,SHAREDL          LOAD LENGTH OF SQA AREA
         L     R14,=A(SQARTN)      LOAD ADDRESS OF SQA AREA DATA
         LR    R15,R1              COPY LENGTH TO R15
         MVCL  R0,R14              COPY SRB + DATA + PROGRAM TO SQA
         SPACE 1
***********************************************************************
*                                                                     *
* LOCATE JES2 AND CONFIRM IT'S OPERATING PROPERLY                     *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R2,CVTPTR           LOAD ADDRESS OF CVT
         L     R2,CVTJESCT-CVT(,R2) LOAD ADDRESS OF JESCT
         SPACE 1
         USING JESCT,R2            ESTABLISH JESCT ADDRESSABILITY
         SPACE 1
         LA    R3,JESSSCT-(SSCTSCTA-SSCT) LOAD START OF DUMMY SSCT
         SPACE 1
         USING SSCT,R3             ESTABLISH SSCT ADDRESSABILITY
         SPACE 1
         L     R5,PSATOLD-PSA      LOAD ADDRESS OF CURRENT TCB FROM PSA
         L     R5,TCBJSCB-TCBDSECT(,R5) LOAD ADDRESS OF JSCB
         L     R5,JSCBSSIB-JSCB(,R5) LOAD ADDRESS OF LIFE-OF-JOB SSIB
         SPACE 1
         USING SSIB,R5             ESTABLISH SSIB ADDRESSABILITY
         SPACE 1
FINDJES2 L     R3,SSCTSCTA         LOAD ADDRESS OF NEXT SSCT
         LA    R3,0(,R3)           CLEAR OUT ANY JUNK
         LTR   R3,R3               TEST IF END OF CHAIN
         BZ    NOJES               BR IF SO
         CLC   SSIBSSNM,SSCTSNAM   TEST IF THIS IS THE SUBSYSTEM       ?
                                    RUNNING THIS JOB
         BNE   FINDJES2            BR IF SO
         ST    R3,JES2SCT          SAVE SSCT ADDRESS
         L     R4,SSCTSSVT         LOAD ADDRESS OF SUBSYSTEM           ?
                                    VECTOR TABLE
         LA    R4,0(,R4)           CLEAR OUT ANY JUNK
         LTR   R4,R4               TEST IF SSVT ADDRESS DEFINED
         BZ    NOJES               BR IF NO SSVT
         SPACE 1
         USING $SVDSECT,R4         ESTABLISH SSVT ADDRESSABILITY
         SPACE 1
         CLC   SSIBSSNM,$SVSSNM    CONFIRM SUBSYSTEM NAME IN SSVT =    ?
                                    SUBSYSTEM NAME IN SSIB
         BNE   NOJES               BR IF NOT REALLY JES2
         MVC   JESASCB,$SVPOSTE+4  COPY JES ASCB ADDRESS TO OUR AREA
         ST    R4,JESSSVT          SAVE SSVT ADDRESS IN SQA
         TM    $SVSTUS,$SVSTUST    TEST IF TERMINATION COMPLETE
         BNO   *+8                 BR IF NOT
         BAL   R10,JESDONE          OTHERWISE GO TERMINATE
         SPACE 1
         DROP  R5
         EJECT
***********************************************************************
*                                                                     *
* COMPLETE PREPARATION OF THE MONITOR.                                *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R15,SQAMON          LOAD START OF SQA MONITOR
         ST    R15,SRBEP-SRBDSECT+SQASRB SET EP START IN SRB
         L     R15,PSAAOLD-PSA     LOAD ADDRESS OF MY ASCB
         ST    R15,SQAPOST+4       SAVE IN MY POST ELEMENT IN SQA
         MVC   SRBPASID-SRBDSECT+SQASRB,ASCBASID-ASCB(R15) COPY ASID
         L     R15,PSATOLD-PSA     LOAD CURRENT TCB ADDRESS
         ST    R15,SRBPTCB-SRBDSECT+SQASRB SAVE IN SRB
         LA    R15,MONECB          LOAD START OF MONITOR COMPLETE ECB
         ST    R15,SQAPOST         SAVE IN POST ELEMENT
         ST    R15,ECBS            SAVE IN ECB ADDRESS LIST
         WTOR  MF=(E,TERMTEST)     ISSUE TERMINATION WTOR
         TIME  DEC                 GET DATE AND TIME
         STM   R0,R1,STARTUP       SAVE STARTUP DATE AND TIME
         MVC   SAMPRATE,INTERVAL   COPY SAMPLE RATE
         L     R1,CVTPTR           LOAD ADDRESS OF CVT
         L     R1,CVTSMCA-CVTDSECT(,R1) LOAD ADDR OF SYS MNGT CNTL AREA
         MVC   SYSID,SMCASID-SMCA(R1) COPY SYSTEM ID
         SPACE 1
         DROP  R3                  KILL SSCT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
* INITIATE TIME INTERVAL.                                             *
*                                                                     *
***********************************************************************
         SPACE 1
NEXTTIME STIMER REAL,POSTTIME,BINTVL=INTERVAL START TIMER ELEMENT
         SPACE 1
***********************************************************************
*                                                                     *
* TEST IF THE SRB MONITOR IS ALREADY ACTIVE.  IF NOT, INITIATE THE    *
* MONITOR SRB TO GATHER DATA FROM THE JES2 ADDRESS SPACE              *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    SWITCH,MONACTIV     TEST IF SRB ALREADY GOING
         BO    NEXTWAIT            BR IF SO
         OI    SWITCH,MONACTIV     INDICATE SRB STARTED
         STM   R0,R15,SAVEREG      SAVE REGISTERS AROUND SCHEDULE
         AIF   (&SE).SESCHED
         SCHEDULE SRB=SQASRB,SCOPE=GLOBAL START JES MONITOR
         AGO   .BYPSE
.SESCHED SCHEDULE SRB=SQASRB,SCOPE=GLOBAL,COMPAT=NO START JES MONITOR
.BYPSE   BALR  R15,0               DEFINE TEMPORARY ADDRESSABILITY
         LM    R0,R15,SAVEREG-*(R15) RELOAD ALL REGISTERS
         SPACE 1
***********************************************************************
*                                                                     *
* WAIT FOR ONE OF THE ECB'S TO BE POSTED                              *
*                                                                     *
***********************************************************************
         SPACE 1
NEXTWAIT WAIT  1,ECBLIST=ECBS      WAIT FOR ANYTHING TO TERMINATE
         SPACE 1
***********************************************************************
*                                                                     *
* IF THE MONITOR SRB HAS FINISHED, ATTEMPT TO COMPUTE THE JES2        *
* MODULE OFFSET, COPY THE DATA TO THE CURRENT I/O BUFFER, AND IF      *
* NECESSARY, INITIATE THE I/O TO WRITE A COMPLETED BUFFER.            *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    MONECB,X'40'        TEST IF MONITOR POSTED US BACK
         BZ    CHECKIO             BR IF NOT
         MVI   MONECB,0            TURN OFF POSTED BIT
         NI    SWITCH,255-MONACTIV INDICATE SRB NOT RUNNING
         SPACE 1
***********************************************************************
*                                                                     *
* WRITE CONFIGURATION DATA IF NECESSARY.                              *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    SWITCH,CONFIG       TEST IF CONFIGURATION DATA AVAILABLE
         BZ    NOCONFIG            BR IF NOT
         NI    SWITCH,255-CONFIG   TURN OFF SWITCH
         TM    CONFIGDC+OFLGS,X'10' TEST IF DCB OPEN
         BZ    NOCONFIG            BR IF NOT -- DON'T BOTHER
         PUT   CONFIGDC,CONFIGDA   WRITE CONFIGURATION DATA
         SPACE 1
***********************************************************************
*                                                                     *
* CONFIRM THAT JES2 IS STILL OPERATING PROPERLY.  IF NOT, TERMINATE.  *
*                                                                     *
***********************************************************************
         SPACE 1
NOCONFIG L     R15,JES2SCT         LOAD START OF JES SSCT
         L     R15,SSCTSSVT-SSCT(,R15) LOAD START OF SSVT
* WE DON'T USE THE SSVT ADDRESS IN THE SSCT, WE JUST TEST IF IT'S STILL
* THERE SO THAT JES CAN'T GO AWAY BY SURPRISE AS IT WILL BE ABLE TO DO
* WHEN THE PTF THAT CLEARS THE SSVT ON A NORMAL $PJES2 IS APPLIED
         LA    R15,0(,R15)         CLEAR OUT ANY JUNK
         LTR   R15,R15             TEST IF SSVT ADDRESS STILL IN SSCT
         BNZ   *+8                 BR IF SO, OTHERWISE
         BAL   R10,JESDONE          GO TERMINATE
         CR    R4,R15              TEST IF SSVT ADDRESS IN SSCT = SSVT ?
                                    ADDRESS WE STARTED WITH
         BE    *+8                 BR IF SO, OTHERWISE
         BAL   R10,JESDONE          GO TERMINATE
         TM    $SVSTUS,$SVSTUST    TEST IF TERMINATION COMPLETE
         BNO   *+8                 BR IF NOT, OTHERWISE
         BAL   R10,JESDONE          GO TERMINATE THE MONITOR
         EJECT
***********************************************************************
*                                                                     *
* OBTAIN THE MODULE OFFSET                                            *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R0,MAPMODS          LOAD NUMBER OF ENTRIES IN TABLE
         LA    R14,JESMAP          LOAD START OF MAP
         L     R1,CURADDR          LOAD CURRENT JES ADDRESS
         LA    R1,0(,R1)           CLEAR WAIT COUNT
         L     R3,=X'00FFFFFF'     LOAD MAXIMUM OFFSET WE'LL EXPECT
LOOKMAP  LR    R2,R1               COPY INTERRUPT ADDRESS TO R2
         S     R2,8(,R14)          COMPUTE OFFSET IN MODULE
         BM    NOTMOD              BR IF NEGATIVE
         CR    R2,R3               TEST IF NEW OFFSET < MAX OFFSET
         BNL   NOTMOD              BR IF SO
         LR    R3,R2               RESET NEW OFFSET
         STH   R2,JESOFFST         SAVE OFFSET OF MODULE
         MVC   JESMODID,4(R14)     COPY MODULE ID
NOTMOD   LA    R14,MAPENTL(,R14)   POINT TO NEXT POSSIBLE ENTRY
         BCT   R0,LOOKMAP          CONTINUE LOOKING
         C     R3,=X'0000FFFF'     TEST IF DISCOVERED OFFSET <= 64K-1
         BNH   MOVEDATA            BR IF SO
         MVC   JESMODID,=CL8' '    CLEAR MODULE ID
         XC    JESOFFST,JESOFFST    AND MODULE OFFSET
         SPACE 1
***********************************************************************
*                                                                     *
* COPY THE DATA COLLECTED TO THE CURRENT I/O BUFFER.  IF NECESSARY    *
* INITIATE I/O.  IF BOTH BUFFERS ARE FULL, WE ISSUE A WAIT.           *
*                                                                     *
***********************************************************************
         SPACE 1
MOVEDATA L     R14,BUFPTR          LOAD ADDRESS OF CURRENT BUFFER ENTRY
         MVC   0(L'JESDATA,R14),JESDATA MOVE DATA COLLECT FROM JES     ?
                                    TO CURRENT BUFFER
         LA    R14,L'JESDATA(,R14) POINT TO NEXT ENTRY
         ST    R14,BUFPTR          SAVE NEW ADDRESS
         C     R14,BUFEND          TEST IF STILL IN BUFFER
         BL    CHECKIO             BR IF SO
         OI    SWITCH,ROLL         INDICATE BUFFERS MUST BE ROLLED
         TM    SWITCH,IOACTIV      TEST IF IO ACTIVE
         BZ    ROLLEM              BR IF SO -- CAN'T SWITCH IO BUFFERS
         CHECK IODECB              WAIT FOR I/O TO FINISH
ROLLEM   BAL   R11,ROLLBUFF        GO SWITCH BUFFERS
*        B     CHECKIO             AND CONTINUE TEST
         EJECT
***********************************************************************
*                                                                     *
* IF WE WERE POSTED BACK TO INDICATE I/O EVENT COMPLETION, CONFIRM    *
* THE I/O WAS COMPLETED PROPERLY BY USING THE CHECK MACRO, AND        *
* SWITCH BUFFERS IF BOTH BUFFERS ARE FULL.                            *
*                                                                     *
***********************************************************************
         SPACE 1
CHECKIO  TM    IODECB,X'40'        TEST IF I/O EVENT COMPLETED
         BZ    CHKTERM             BR IF NOT
         CHECK IODECB              TEST IF I/O COMPLETED NORMALLY
         MVI   IODECB,0            CLEAR IO ECB
         NI    SWITCH,255-IOACTIV  INDICATE I/O NOT ACTIVE
         TM    SWITCH,ROLL         TEST IF SECOND BUFFER FULL
         BZ    CHKTERM             BR IF NOT
         BAL   R11,ROLLBUFF        GO ROLL THEM BUFFERS
         SPACE 1
***********************************************************************
*                                                                     *
* IF WE WERE POSTED BACK TO INDICATE THE OPERATOR REPLIED TO THE      *
* WTOR, CONFIRM THAT THE OPERATOR REPLIED A LOWER CASE 'Y', AND       *
* START TERMINATION IF SO.  IF A LOWER CASE 'Y' WAS NOT ENTERED,      *
* REISSUE THE WTOR.                                                   *
*                                                                     *
***********************************************************************
         SPACE 1
CHKTERM  TM    TERMECB,X'40'       TEST IF WTOR ECB POSTED
         BZ    CHKTIME             BR IF NOT
         MVI   TERMECB,0           CLEAR WTOR ECB
         CLI   TERMDATA,C'Y'-C' '  TEST IF OPERATOR RESPONDED CORRECTLY
         BNE   *+8                 BR IF NOT, OTHERWISE
         BAL   R10,JESDONE          GO TERMINATE THE MONITOR
         WTOR  MF=(E,TERMTEST)     OTHERWISE, REISSUE TERMINATION WTOR
         SPACE 1
***********************************************************************
*                                                                     *
* IF THE TIMER INTERVAL DID NOT COMPLETE, RETURN TO THE WAIT MACRO    *
* TO WAIT FOR SOMETHING ELSE TO HAPPEN, OTHERWISE GO REISSUE THE      *
* STIMER MACRO AND MOST LIKELY THE SCHEDULE MACRO.                    *
*                                                                     *
***********************************************************************
         SPACE 1
CHKTIME  TM    TIMEECB,X'40'       WAS TIMER ECB POSTED
         BZ    NEXTWAIT            BR IF NOT
         MVI   TIMEECB,0           CLEAR ECB
         B     NEXTTIME            OTHERWISE CHECK JES AGAIN
         EJECT
***********************************************************************
*                                                                     *
* TERMINATE THE MONITOR.  KILL THE CURRENT TIMER INTERVAL, WAIT FOR   *
* THE CURRENT I/O EVENT TO TERMINATE, WRITE AND CHECK THE I/O FOR THE *
* PARTIALLY COMPLETED FINAL BUFFER, AND THEN WAIT FOR THE MONITOR SRB *
* TO COMPLETE.  WHEN THE MONITOR SRB HAS COMPLETED, FREE THE STORAGE  *
* IN SQA, CLOSE THE DATA SETS, AND TERMINATE FOR GOOD.                *
*                                                                     *
***********************************************************************
         SPACE 1
JESDONE  TTIMER CANCEL             KILL ANY TIMER INTERVAL
         TM    SWITCH,IOACTIV      TEST IF I/O ACTIVE
         BZ    LASTBUF             BR IF NOT
         CHECK IODECB              WAIT FOR I/O TO FINISH
LASTBUF  CLC   BUFPTR,CURBUF       TEST IF ANY DATA IN NEW BUFFER
         BE    NOBUF               BR IF NOT -- WE'RE DONE
         BAL   R11,ROLLBUFF        OTHERWISE, WRITE LAST BUFFER
         TM    SWITCH,IOACTIV      TEST IF I/O STARTED
         BZ    NOBUF               BR IF NOT
         CHECK IODECB              WAIT FOR I/O TO FINISH
NOBUF    LH    R11,BUFLEN          LOAD LENGTH OF BUFFER
         STH   R11,OUTDCB+BLKSI    SAVE IN DCB SO THAT THE BLKSIZE     ?
                                    IN THE VTOC IS CORRECT
EXIT     CLOSE MF=(E,OPENL)        CLOSE OPEN DATA SETS
         ICM   R1,15,SQAADDR       TEST IF SQA AREA OBTAINED
         BZ    PROBBACK            BR IF NOT
         TM    SWITCH,MONACTIV     TEST IF MONITOR ACTIVE
         BZ    FREESQA             BR IF NOT
         WAIT  1,ECB=MONECB        WAIT FOR MONITOR TO FINISH
         L     R1,SQAADDR          RELOAD SQA ADDRESS
FREESQA  FREEMAIN R,A=(1),LV=SHAREDL,SP=SQA FREE SQA STORAGE
PROBBACK MODESET KEY=NZERO,MODE=PROB BECOME UNPRIVILEDGED
         L     R13,4(,R13)         LOAD ADDRESS OF CALLER'S SAVE AREA
         RETURN (14,12),T,RC=0     RETURN TO CALLER
         EJECT
NOJES    DS    0H                  JES2 NOT FOUND -- DUMP IT..     SPR2
         WTO   'JMON001 JES/2 MONITOR WAS UNABLE TO LOCATE JES SYSTEM',X
               ROUTCDE=(2,11),DESC=3   LET THEM KNOW..             SPR2
         ABEND 1111,DUMP           GET DOCUMENTATION..             SPR2
BADOPEN  DS    0H                  OPEN FAILED -- DUMP IT..        SPR2
         WTO   'JMON002 JES2 MONITOR UNABLE TO OPEN OUTPUT DATASETS  ',X
               ROUTCDE=(2,11),DESC=3   LET THEM KNOW..             SPR2
         ABEND 2222,DUMP           GET DOCUMENTATION..             SPR2
         SPACE 3
***********************************************************************
*                                                                     *
* COMPUTE ACTUAL BUFFER LENGTH AND INITIATE THE I/O TO WRITE AN       *
* I/O BUFFER.  THEN SWITCH THE BUFFER POINTERS.                       *
*                                                                     *
***********************************************************************
         SPACE 1
ROLLBUFF L     R5,BLOCKCNT         LOAD CURRENT BLOCK COUNT
         C     R5,MAXBLOCK         TEST IF WE'VE DONE OUR LIMIT
         BNLR  R11                 RETURN IF SO
         L     R2,CURBUF           LOAD START OF CURRENT BUFFER
         L     R3,BUFPTR           LOAD UPDATED BUFFER POINTER
         SR    R3,R2               COMPUTE BUFFER LENGTH
         STH   R3,OUTDCB+BLKSI     SAVE AS BLKSIZE
         TIME  DEC                 GET TIME AND DATE FROM SYSTEM
         STM   R0,R1,0(R2)         SAVE IN RECORD
         MVI   JESWC-JESDATA(R2),255 INDICATE TIME RECORD
         OI    SWITCH,IOACTIV      INDICATE I/O IS ACTIVE
         WRITE IODECB,SF,,(R2),MF=E INITIATE I/O
         XC    CURBUF(8),ALTBUF    SWITCH
         XC    ALTBUF(8),CURBUF     BUFFERS
         XC    CURBUF(8),ALTBUF
         L     R2,CURBUF           LOAD ADDRESS OF NEW BUFFER
         LA    R2,L'JESDATA(,R2)   COMPUTE ADDRESS OF FIRST DATA RECORD
         ST    R2,BUFPTR           SAVE POINTER
         NI    SWITCH,255-ROLL     INDICATE BUFFER AVAILABLE
         LA    R5,1(,R5)           INCREMENT CURRENT BUFFER COUNT
         ST    R5,BLOCKCNT         SAVE RESULT
         C     R5,MAXBLOCK         TEST IF WE'VE WRITTEN MAX BLOCKS
         BLR   R11                 RETURN IF NOT, OTHERWISE
         BAL   R10,JESDONE          GO TERMINATE THE MONITOR
         SPACE 1
PACK     PACK  DWORK,0(*-*,R15)    CONVERT PARM TO PACKED DECIMAL
         EJECT
***********************************************************************
*                                                                     *
* TIMER COMPLETION EXIT ROUTINE -- POST THE TIMER ECB AND RETURN TO   *
* EXIT FROM THE TIMER COMPLETION IRB.                                 *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
POSTTIME BALR  R15,0               SETUP ADDRESSABILITY
         USING *,R15               DEFINE TIMER POP EXIT RTN ADDRESSING
         ST    R14,POSTSAVE        SAVE LINK REGISTERS
         POST  TIMEECB,0           POST THE TIMER ECB
         BALR  R15,0               RESET ADDRESSABILITY
         USING *,R15               REESTABLISH ADDRESSABILITY
         L     R14,POSTSAVE        RELOAD R14
         BR    R14                 RETURN TO TIMER MANAGEMENT
         DROP  ,                   KILL ALL ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
* DCB EXIT ROUTINE -- THIS ROUTINE, ENTERED AS A CLOSED SUBROUTINE    *
*   FROM OPEN, ASSIGNS THE ACTUAL BLKSIZE.  THE DEFAULT IS BUFLEN.    *
*   IF THE BLKSIZE IS CODED BY THE USER, THIS EXIT CONFIRMS IT IS A   *
*   MULTIPLE OF LRECL, AND IF NOT, ADJUSTS THE USER SPECIFIED BLKSIZE *
*   TO MAKE IT A MULTIPLE OF LRECL.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                 ALIGN TO A DOUBLE WORD BOUNDARY
         USING *,R15               ESTABLISH EXIT ADDRESSABILITY
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         SPACE 1
OUTEXIT  LH    R3,DCBBLKSI         LOAD USER SPECIFIED BLKSIZE
         LTR   R3,R3               TEST IF SUPPLIED BY USER
         BZ    OUTDFLT             BR IF NOT -- USE DEFAULT
         LH    R0,DCBLRECL         LOAD LRECL
         SR    R2,R2               CLEAR R2
         DR    R2,R0               COMPUTE BLOCKING FACTOR
         MR    R2,R0               COMPUTE ACTUAL BLKSIZE
         STH   R3,DCBBLKSI         SAVE BACK IN DCB
         CR    R3,R0               TEST IF BLKSIZE = LRECL
         BH    OUTLEAVE            RETURN IF BLKSIZE > LRECL
         STH   R0,DCBBLKSI         SAVE LRECL AS BLKSIZE
         NI    DCBRECFM,255-DCBRECBR INDICATE RECFM=F RATHER THAN FB
OUTLEAVE MVC   BUFLEN,DCBBLKSI     SAVE BLKSIZE IN BUFLEN
         BR    R14                 AND RETURN TO OPEN
         SPACE 1
OUTDFLT  MVC   DCBBLKSI,BUFLEN     COPY 'STANDARD' BUFFER LENGTH
         BR    R14                 AND RETURN TO OPEN
         EJECT
***********************************************************************
*                                                                     *
* MAIN TASK DATA AREA                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
S        DC    9D'0'               OS SAVE AREA
         SPACE 1
DWORK    DC    D'0'                DOUBLE WORD WORK AREA
         SPACE 1
SAVEREG  DC    16F'0'              REGISTER SAVE AREA AROUND SCHEDULE
         SPACE 1
OPENL    OPEN  (OUTDCB,OUTPUT,CONFIGDC,OUTPUT),MF=L OPEN PARM LIST
         SPACE 1
INTERVAL DC    F'25'               DEFINE DEFAULT INTERVAL
         SPACE 1
POSTSAVE DC    F'0'                R14 DURING STIMER EXIT ROUTINE
         SPACE 1
         PRINT NOGEN
OUTDCB   DCB   RECFM=FB,LRECL=L'JESDATA,DSORG=PS,MACRF=W,              ?
               DDNAME=JESDATA,EXLST=OUTXLST
CONFIGDC DCB   RECFM=F,LRECL=L'CONFIGDA,BLKSIZE=L'CONFIGDA,            ?
               DSORG=PS,MACRF=PM,DDNAME=CONFIG
         PRINT GEN
         SPACE 1
OUTXLST  DC    0A(0),AL1(128+5),AL3(OUTEXIT)
         SPACE 1
         WRITE IODECB,SF,OUTDCB,*-*,'S',MF=L WRITE PARM LIST
         SPACE 1
ECBS     DC    A(*-*,IODECB,TERMECB),X'80',AL3(TIMEECB)
         SPACE 1
TERMECB  DC    F'0'                ECB POSTED BY WTOR COMPLETION
TIMEECB  DC    F'0'                ECB POSTED BY TIMER EXIT
SQAADDR  DC    F'0'                ADDRESS OF SQA DATA
BLOCKCNT DC    F'0'                CURRENT BLOCK COUNT
MAXBLOCK DC    F'0'                MAXIMUM NUMBER OF BLOCKS
         SPACE 1
RECPARM  CALL  ,(OUTDCB,SAVEREG,SAVEREG,SAVEREG+4),MF=L RECTRK PARMS
         SPACE 1
BUFPTR   DC    A(*-*)              POINTER TO NEXT LOGICAL RECORD
         SPACE 1
CURBUF   DC    A(*-*,*-*)          START AND END OF CURRENT BUFFER
BUFEND   EQU   *-4,4               END OF CURRENT BUFFER
         SPACE 1
ALTBUF   DC    A(*-*,*-*)          START AND END OF ALTERNATE BUFFER
         SPACE 1
TERMTEST WTOR  'REPLY ''y'' TO TERMINATE JES2 PERFORMANCE MONITOR',    ?
               TERMDATA,L'TERMDATA,TERMECB,ROUTCDE=(1,11),MF=L
         SPACE 1
BUFLEN   DC    Y((3665/L'JESDATA)*L'JESDATA)
         SPACE 1
TERMDATA DC    C' '
         SPACE 1
         LTORG ,
         EJECT
***********************************************************************
*                                                                     *
* SQA DATA AREA.  THIS AREA CONSISTS OF THREE SUB AREAS: THE ACTUAL   *
* SRB, THE SRB DATA COLLECTION ROUTINE, AND THE COMMON DATA           *
* COLLECTION DATA AREA.                                               *
*                                                                     *
***********************************************************************
         SPACE 1
SQARTN   CSECT                     CSECT OF SQA ROUTINE
         SPACE 1
SQASRB   DC    CL4'SRB'            SRBID
         DC    A(0)                SRBFLNK
         DC    A(0)                SRBASCB
         DC    0XL8'0'             SRBFLC
         DC    XL2'FFFF'           SRBCPAFF
         DC    H'0'                SRBPASID
         DC    A(0)                SRBPTCB
         DC    A(SQAMON-SQARTN)    SRBEP
         DC    A(0)                SRBRMTR
         DC    A(0)                SRBPARM
         DC    A(0)                SRBSAVE
         DC    X'00'               SRBPKF
         DC    X'00'               SRBFLGS
         DC    X'00'               SRBHLHI
         DC    X'00'               RESERVED
         DC    A(0)                FRR ROUTINE ADDRESS
         ORG   SQASRB+SRBSIZE      ORIGIN SHOULD NOT CHANGE FORWARD
JESASCB  EQU   SRBASCB-SRBDSECT+SQASRB JES ASCB
         EJECT
***********************************************************************
*                                                                     *
* SQA DATA COLLECTION ROUTINE.  THIS ROUTINE IS ENTERED AS AN SRB     *
* ROUTINE IN THE JES2 ADDRESS SPACE.  THE ROUTINE CONFIRMS THAT JES2  *
* IS OPERATING PROPERLY, AND IF SO, COLLECTS PERFORMANCE DATA FROM    *
* THE JES2 ADDRESS SPACE                                              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                 ALIGN TO DOUBLE WORD
SQAMON   BALR  R8,0                ESTABLISH ADDRESSABILITY
         USING *,R8                SETUP ADDRESSABILITY
         SPACE 1
         STM   R0,R15,SQASAVE      SAVE SQA ENTRY REGISTERS EXCEPT R8
         XC    JESDATA,JESDATA     COMPLETELY CLEAR RETURN AREA
         MVI   SQAFUNC,SQAINIT     SET THAT WE'RE INITIATING
         SPACE 1
***********************************************************************
*                                                                     *
* CONFIRM JES2 UP AND ACTIVE.                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R10,JES2SCT         LOAD ADDRESS OF JES2 SSCT
         L     R10,SSCTSSVT-SSCT(,R10) LOAD ADDRESS OF SSVT
         LA    R10,0(,R10)         CLEAR OUT ANY JUNK
         LTR   R10,R10             TEST IF SSVT ADDRESS PRESENT
         BZ    SQAEXIT             RETURN IF SSVT ADDRESS NOT PRESENT
         C     R10,JESSSVT         TEST IF SSVT IS WHERE WE THINK IT IS
         BNE   SQAEXIT             RETURN IF NOT
         SPACE 1
         USING $SVDSECT,R10        SETUP SSVT ADDRESSABILITY
         SPACE 1
         TM    $SVSTUS,$SVSTUST    TEST IF TERMINATION COMPLETE
         BO    SQAEXIT             BR IF SO -- NO MORE JES TO WATCH
         L     R11,$SVHCT          LOAD HCT ADDRESS
         SPACE 1
         USING HCTDSECT,R11        SETUP HCT ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* IF THIS IS THE FIRST TIME THE DATA COLLECTION MODULE HAS BEEN       *
* ENTERED, COPY THE ENTIRE JES2 MODULE MAP TO THE COMMON DATA AREA,   *
* AND THEN OBTAIN CONFIGURATION DATA FROM THE HCT AND ALSO COPY THIS  *
* DATA TO THE COMMON DATA AREA>                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SQAFUNC,SQASTAT     INDICATE WE'RE LOCATING JES2        ?
                                    CONFIGURATION DATA
         TM    SWITCH,FIRST        TEST IF FIRST TIME THROUGH
         BZ    GETSTAT             BR IF NOT
         SPACE 1
         NI    SWITCH,255-FIRST    INDICATE NOT FIRST TIME
         L     R2,$HASPMAP         LOAD ADDRESS OF JES2 MAP
         LA    R3,MAPMODS*MAPENTL  LOAD LENGTH OF MAP
         LA    R4,JESMAP           LOAD START OF MAP IN MY AREA
         LR    R5,R3               LOAD LENGTH OF MAP
         MVCL  R4,R2               MOVE JES2 MODULE MAP TO MY AREA
         SPACE 1
         SR    R0,R0               CLEAR R0
         LH    R0,$NUMSMFB         LOAD NUMBER OF SMF BUFFERS      SPR2
         ST    R0,SMFBUFCT         SAVE AS CONFIGURATION DATA
         LH    R0,$NUMCMBS         LOAD NUMBER OF CMB'S
         ST    R0,CMBBUFCT         SAVE AS CONFIGURATION DATA
         LH    R0,$NUMBUF          LOAD NUMBER OF SPOOL BUFFERS
         ST    R0,BUFBUFCT         SAVE AS CONFIGURATION DATA
         LH    R0,$NUMTPBF         LOAD NUMBER OF SPOOL BUFFERS
         ST    R0,TPBUFCT          SAVE AS CONFIGURATION DATA
         MVC   JES2VER,$VERSION    SAVE JES2 VERSION ID            SPR2
         SPACE 1
***********************************************************************
*                                                                     *
* GET BUFFER POOL UTLIZATION STATISTICS FOR JES2 SPOOL AND TP BUFFERS *
* FROM THE APPROPRIATE BUFFER POOL MAPS                               *
*                                                                     *
***********************************************************************
         SPACE 1
GETSTAT  MVI   SQAFUNC,SQAJBUFS    INDICATE WE'RE LOCATING JES2 BUFS DC
         LA    R14,12              LOAD LENGTH OF TABLE ENTRY
         LA    R15,BUFTBLE         LOAD LAST TABLE ENTRY
         LA    R1,BUFTBL           LOAD START OF TABLE
         SPACE 1
BUFLOOP  LM    R4,R5,0(R1)         LOAD OFFSETS FROM TABLE
         LA    R5,JESADDR(R5)      COMPUTE RESULT ADDRESS
         AR    R4,R11              COMPUTE ADDRESS OF BFR POOL ADDR
         L     R4,0(,R4)           LOAD ADDRESS OF BUFFER POOL MAP
         LTR   R4,R4               TEST IF BUFFER POOL ESTABLISHED
         BZ    BUFNLOOP            BR IF NOT
         SPACE 1
         USING BPMDSECT,R4         ESTABLISH BUFFER POOL MAP ADDRESSING
         SPACE 1
         LH    R4,BPMBUFCT         LOAD AVAILABLE BUFFER COUNT
BUFNLOOP L     R6,8(,R1)           LOAD HCT OFFSET OF BUFFERS ALLOCATED
         LH    R0,0(R6,BASE1)      GET NUMBER OF BUFFERS ALLOCATED
         SR    R0,R4               COMPUTE BUFFERS THAT ARE PRESUMABLY ?
                                    IN USE
         STH   R0,0(,R5)           SAVE RESULT
         BXLE  R1,R14,BUFLOOP      AND CONTINUE
         SPACE 1
         DROP  R4                  KILL BUFFER POOL MAP ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* COUNT NUMBER OF SMF BUFFERS ON THE FREE CHAIN TO COMPUTE THE NUMBER *
* OF FREE SMF BUFFERS.                                                *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SQAFUNC,SQASMF      INDICATE WE'RE COUNTING SMF BUFFERS
         LA    R4,$SMFFREE         LOAD START OF CHAIN OF FREE SMF BUFS
         L     R5,SMFBUFCT         LOAD SMF BUFFER COUNT
NEXTSMF  L     R4,0(,R4)           LOAD ADDRESS OF NEXT FREE SMF BUF
         LTR   R4,R4               TEST IF FREE
         BZ    STORESMF            BR IF SO
         BCTR  R5,0                REDUCE ACTIVE COUNT
         B     NEXTSMF             AND GO DO NEXT BUFFER
STORESMF STH   R5,SMFBUFS          SAVE RESULT
         SPACE 1
***********************************************************************
*                                                                     *
* COUNT NUMBER OF CONSOLE MESSAGE BUFFERS ON THE FREE CHAIN TO        *
* COMPUTE THE NUMBER THAT ARE PRESUMABLY RESERVED OR IN USE.          *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SQAFUNC,SQACMB      INDICATE WE'RE COUNTING CMB'S
         LA    R4,$SVCMBFQ-(CMBCMB-CMBDSECT) LOAD START OF FREE CMB'S
         L     R5,CMBBUFCT         LOAD CMB BUFFER COUNT
NEXTCMB  L     R4,CMBCMB-CMBDSECT(,R4) LOAD ADDRESS OF NEXT FREE CMB
         LA    R4,0(,R4)           CLEAR OUT ANY JUNKO
         LTR   R4,R4               TEST IF PRESENT
         BZ    STORECMB            BR IF DONE
         BCTR  R5,0                REDUCE ACTIVE COUNT
         B     NEXTCMB             AND CONTINUE
STORECMB STH   R5,CMBBUFS          SAVE RESULT
         SPACE 1
***********************************************************************
*                                                                     *
* GET THE ADDRESS OF THE JES2 TCB AND THE CURRENT RB.                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     DC
         L     R2,$HASPTCB         LOAD ADDRESS OF JES2 TCB          DC
         SPACE 1                                                     DC
         USING TCBDSECT,R2         SETUP TCB ADDRESSABILITY          DC
         SPACE 1                                                     DC
         L     R3,TCBRBP           LOAD ADDRESS OF CURRENT RB        DC
         SPACE 1                                                     DC
         USING RBDSECT,R3                                            DC
         SPACE 1                                                     DC
         STM   R2,R3,TCBRBADD      SAVE ADDRESS OF CURRENT TCB & RB  DC
         SPACE 1                                                     DC
***********************************************************************
*                                                                     *
* COPY THE PSW ADDRESS AND WAIT COUNT TO THE OUTPUT RECORD AREA,      *
* AND GET READY FOR RB ANALYSIS.                                      *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SQAFUNC,SQACOPY     INDICATE BASIC COPY OPERATION
         MVC   JESADDR,RBOPSW+4    MOVE CURRENT ADDRESS
         MVC   CURADDR,RBOPSW+4    MOVE CURRENT ADDRESS
         MVC   JESWC,RBWCF         MOVE CURRENT WAIT COUNT
         EJECT
***********************************************************************
*                                                                     *
* RB ANALYSIS.  IF THE CURRENT RB IS NOT THE VERY FIRST RB CREATED    *
* BY CONTENTS MANAGEMENT, WE DETERMINE THE RB CLASS FROM RBSTAB1      *
* AND IF IT'S AN SVRB, GO BACK TO THE VERY FIRST RB TO DETERMINE THE  *
* INTERRUPT CODE.                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SQAFUNC,SQARB       INDICATE RB ANALYSIS
         LRA   R0,0(,R3)           TEST IF RB ADDRESS IS VALID
         BNZ   BADRB               BR IF RB ADDRESS IS INVALID
         CLM   R2,7,RBLINK+1       TEST IF RBLINK POINTS TO TCB
         BE    ISPRB               BR IF SO -- RB IS THE ONLY RB
         SR    R1,R1               CLEAR R1
         IC    R1,RBSIZE+2         INSERT CONTENTS OF RBSTAB1
         SRL   R1,5                ISOLATE RB TYPE BITS
         IC    R1,TYPERB(R1)       INSERT RB MASK BIT TYPE
         EX    R1,SETRB            SET RB CLASS
         TM    JESRBST,IRB         TEST IF RB
         BO    ISPRB               BR IF SO -- NO INTERRUPT
         LR    R1,R3               COPY CURRENT RB ADDRESS TO R1
         LR    R15,R1              COPY CURRENT RB ADDRESS TO R15
FINDPRB  CLM   R2,7,RBLINK+1-RBDSECT(R1) TEST IF RBLINK POINTS TO TCB
         BE    GOTMAIN             BR IF SO -- LAST RB IN CHAIN
         LR    R15,R1              COPY CURRENT RB ADDRESS TO R15
         L     R1,RBLINK-RBDSECT(R1) LOAD ADDRESS OF NEXT RB
         LRA   R0,0(,R1)           TEST IF RB ADDRESS IS VALID
         BZ    FINDPRB             BR IF RB ADDRESS IS VALID
BADRB    OI    JESRBST,RBBAD       INDICATE RB ADDRESS INVALID
         B     SQAEXIT             AND EXIT
GOTMAIN  MVC   CURADDR,RBOPSW+4-RBDSECT(R1) COPY MAIN JES2 ADDRESS
         SH    R1,=H'2'            REDUCE BY 2
         MVC   JESINTC,0(R1)       COPY INTERRUPT CODE TO RECORD
         CLC   =Y(47),JESINTC      TEST IF WE'RE PROCESSING AN STIMER
         BNE   ISPRB               BR IF SO
         L     R1,RBGRS1-RBDSECT(,R15) LOAD R1 VALUE WHEN STIMER ISSUED
         LRA   R0,0(,R1)           TEST IF VALID
         BNZ   ISPRB               BR IF SO
         MVC   TIMEVAL,0(R1)       COPY TIMER VALUE
ISPRB    CLI   JESWC,01            TEST IF JES IN WAIT               DC
         BL    TESTWAIT            BR IF NOT
         MVI   SQAFUNC,SQAPAGE     WE'RE TESTING FOR A PAGE FAULT
         L     R1,JESADDR          GET CURRENT ADDRESS               DC
         SH    R1,=H'2'            BACKUP BY 2
         LRA   R0,0(,R1)           TEST IF ADDRESS WILL TRANSLATE
         BNE   SETFALT             BR IF NOT -- WE'LL SOON GET A FAULT
         CLC   =X'0A01',0(R1)      TEST IF WAIT SVC
         BE    GETPCE              BR IF NOT
SETFALT  OI    JESRBST,PAGEFALT    INDICATE JES2 GOT A PAGE FAULT
         B     GETPCE              AND GO PROCESS THE PCE
         EJECT                                                       DC
***********************************************************************
*                                                                     *
* MOST RECENT RB IS NOT IN WAIT -- TEST IF ADDRESS POINTS TO A WAIT   *
*                                                                     *
***********************************************************************
         SPACE 1
TESTWAIT MVI   SQAFUNC,SQAWAIT     INDICATE WE'RE CHECKING FOR 0A01
         L     R1,JESADDR          LOAD CURRENT ADDRESS              DC
         SH    R1,=H'2'            BACKUP 2
         LRA   R0,0(,R1)           TEST IF ADDRESS AVAILABLE
         BNE   GETPCE              BR IF NOT -- IGNORE PROBLEM
         CLC   =X'0A01',0(R1)      TEST IF ADDRESS AT AN SVC 1
         BNE   GETPCE              BR IF NOT
         OI    JESRBST,SVC1        INDICATE WE'RE AT AN SVC 1 BUT NOT  ?
                                    WAITING
         SPACE 1
***********************************************************************
*                                                                     *
* LOCATE THE CURRENT PCE, AND IF IT'S VALID, COPY THE PCEID           *
*                                                                     *
***********************************************************************
         SPACE 1
GETPCE   MVI   SQAFUNC,SQAPCE      WE'RE LOCATING THE CURRENT PCE
         MVC   JESPTYP,=X'FFFF'    PRESET PCE TYPE TO A BAD TYPE
         LA    R0,$READY-(PCEPCEA-PCEDSECT) GET READY TO TEST FOR PCE0
         L     R1,$CURPCE          LOAD ADDRESS OF "CURRENT" PCE     DC
         CR    R0,R1               TEST IF CURRENT PCE $READY PCE0   DC
         BE    SQAEXIT             BR IF SO
         LA    R1,0(,R1)           CLEAR HI-ORDER BYTE
         LTR   R1,R1               TEST IF THERE IS A CURRENT PCE
         BZ    SQAEXIT             BR IF NOT
         MVC   JESPTYP,PCEID-PCEDSECT(R1) SAVE CURRENT PCE TYPE
         SPACE 1
         DROP  R2,R3               KILL TCB, RB ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* TERMINATE BY USING BRANCH ENTRY POST TO RESTART THE MAIN TASK       *
*                                                                     *
***********************************************************************
         SPACE 1
SQAEXIT  MVI   SQAFUNC,SQATERM     INDICATE WE'RE TERMINATING
         L     R15,CVTPTR          LOAD ADDRESS OF CVT
         L     R15,CVT0PT01-CVT(,R15) POINT TO BR ENTRY POST
         SLR   R10,R10             CLEAR R10
         LA    R11,MONECB          POINT TO ECB
         O     R11,=X'80000000'    SHOW XMPOST
         LA    R12,BR14            POINT TO ERRRET
         L     R13,SQAPOST+4       LOAD ADDRESS OF ASCB OF MONITOR
         BALR  R14,R15             POST MONITOR
BR14     BALR  R14,0               ESTABLISH CURRENT ADDRESS
         SPACE 1
         USING *,R14               SETUP NEW ADDRESSABILITY
         SPACE 1
         LM    R0,R15,SQASAVE      RELOAD REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 1
         DROP  R14                 REVERT TO NORMAL ADDRESSABILITY
         SPACE 1
SETRB    OI    JESRBST,*-*         INSERT RB CLASS
         EJECT
***********************************************************************
*                                                                     *
* COMMON DATA AREA.                                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
SQASAVE  DC    16XL4'0'            REGISTER SAVE AREA
         SPACE 1
TCBRBADD DC    2XL4'0'
         SPACE 1
JESMAP   DS    0XL(MAPMODS*MAPENTL) JES2 MODULE MAP
         DC    (MAPMODS*MAPENTL)X'00' FILL IN MODULE MAP STORAGE
JESMAPE  EQU   *-MAPENTL           LAST ENTRY IN MODULE MAP
         SPACE 1
BUFTBL   DC    A($BFRMAP-HCTDSECT,BUFBUFS-JESADDR,$NUMBUF-HCTDSECT)
BUFTBLE  DC    A($TPBFMAP-HCTDSECT,TPBUFS-JESADDR,$NUMTPBF-HCTDSECT)
         SPACE 1
***********************************************************************
*                                                                     *
* CONFIGURATION DATA AREA.  THIS DATA AREA CONTAINS THE CONFIGURATION *
* CONSTANTS USED BY JES2 THAT ARE OF INTEREST FOR PERFORMANCE         *
*                                                                     *
***********************************************************************
         SPACE 1
SMFBUFCT DC    F'0'       $NUMSMFB NUMBER OF SMF BUFFERS
CMBBUFCT DC    F'0'       $NUMCMBS NUMBER OF CONSOLE MESSAGE BUFFERS
BUFBUFCT DC    F'0'       $NUMBUF  NUMBER OF SPOOL BUFFERS
TPBUFCT  DC    F'0'       $NUMTPBF NUMBER OF TP BUFFERS
STARTUP  DC    F'0',XL4'0080001F'  STARTUP TIME AND DATE
SAMPRATE DC    F'0'                SAMPLE RATE (1/100TH OF A SECOND)
SYSID    DC    CL4' '              SYSTEM ID
JES2VER  DC    CL8' '              VERSION ID                      SPR2
CONFIGDA EQU   SMFBUFCT,*-SMFBUFCT ADDRESS AND LENGTH OF               ?
                                    CONFIGURATION RECORD
         SPACE 1
***********************************************************************
*                                                                     *
* DATA COLLECT OUTPUT DATA AREA.  THIS DATA, AFTER IT HAS BEEN        *
* MASSAGED BY THE MAIN MONITOR ROUTINE, IS WRITTEN TO THE OUTPUT      *
* DATA SET.                                                           *
*                                                                     *
***********************************************************************
         SPACE 1
JESADDR  DC    XL4'0'              CURRENT JES2 TASK ADDRESS
CURADDR  DC    XL4'0'              CURRENT JES2 MAIN PRB ADDRESS
TIMEVAL  DC    F'0'                TIME INTERVAL IF JES2 CAUGHT IN     ?
                                    STIMER MACRO
JESMODID DC    CL4' '              JES MODULE ID (5TH TO 7TH           ?
                                    CHARACTERS OF MODULE NAME)
JESOFFST DC    XL2'0'              OFFSET WITHIN MODULE
BUFBUFS  DC    H'0'                CURRENTLY ACTIVE BUFFERS
TPBUFS   DC    H'0'                CURRENTLY ACTIVE TP BUFFERS
SMFBUFS  DC    H'0'                CURRENTLY ACTIVE SMF BUFFERS
CMBBUFS  DC    H'0'                CURRENTLY ACTIVE CMB'S
JESPTYP  DC    XL2'0'              COPIED FROM PCEID
JESINTC  DC    XL2'0'              JES2 SVC INTERRUPT CODE
JESRBST  DC    XL1'0'              RB STATUS
NOTPRB   EQU   B'10000000'         CURRENT RB NOT PRB
PRB      EQU   B'01000000'         CURRENT RB A PRB (BUT NOT JES RB)
IRB      EQU   B'00100000'         CURRENT RB AN IRB
TIRB     EQU   B'00010000'         CURRENT RB A TIRB
SVRB     EQU   B'00001000'         CURRENT RB AN SVRB
SIRB     EQU   B'00010000'         CURRENT RB AN SIRB
SVC1     EQU   B'00000100'         JES ADDRESS AT SVC 1
PAGEFALT EQU   B'00000010'         JES TASK HALTED BY PAGE FAULT
RBBAD    EQU   B'00000001'         RB ADDRESS INVALID
JESWC    DC    XL1'0'              CURRENT JES WAIT COUNT
JESDATA  EQU   JESADDR,*-JESADDR   JES2 DATA RECORD
         SPACE 1
TYPERB   DC    AL1(NOTPRB+PRB)     000 RB TYPE LOOKUP TABLE
         DC    AL1(NOTPRB)         001
         DC    AL1(NOTPRB+IRB)     010
         DC    AL1(NOTPRB+TIRB)    011
         DC    AL1(NOTPRB+SIRB)    100
         DC    AL1(NOTPRB)         101
         DC    AL1(NOTPRB+SVRB)    110
         DC    AL1(NOTPRB)         111
         SPACE 1
SQAPOST  POST  *-*,ASCB=*-*,ERRET=*-*,MF=L XMPOST PARM LIST
         SPACE 1
MONECB   DC    F'0'                MONITOR ECB
         SPACE 1
JESSSVT  DC    F'0'                ADDRESS OF JES2 SSVT
JES2SCT  DC    F'0'                ADDRESS OF JES2 SSCT
         SPACE 1
SWITCH   DC    0B'0',AL1(FIRST+CONFIG) EXECUTION CONTROL SWITCHES
FIRST    EQU   X'80'               FIRST TIME THROUGH RTN
MONACTIV EQU   X'40'               SRB STARTED BUT NOT POSTED
ROLL     EQU   X'20'               SWITCH I/O BUFFERS
IOACTIV  EQU   X'10'               I/O STARTED BUT NOT YET POSTED
CONFIG   EQU   X'08'               WRITE CONFIGURATION DATA
         SPACE 1
SQAFUNC  DC    XL1'0'
SQAINIT  EQU   1
SQASTAT  EQU   2
SQAJBUFS EQU   3
SQASMF   EQU   4
SQACMB   EQU   5
SQACOPY  EQU   6
SQARB    EQU   7
SQAPAGE  EQU   8
SQAWAIT  EQU   9
SQAPCE   EQU   10
SQATERM  EQU   11
         LTORG ,
         SPACE 1
         DC    0D'0'
SHAREDL  EQU   *-SQARTN            LENGTH OF SHARED AREA
         EJECT
         PRINT NOGEN
         DCBD  DSORG=QS,DEVD=DA
BLKSI    EQU   DCBBLKSI-IHADCB
OFLGS    EQU   DCBOFLGS-IHADCB
DEBAD    EQU   DCBDEBAD-IHADCB
         END   JESMON
