         TITLE 'FCBSNOOP - WHAT HAS HAPPENED TO SYS1.IMAGELIB?'
***********************************************************************
*                                                                     *
*          FCBSNOOP - DISPLAY FORMS CONTROL BUFFER DEFINITONS         *
*                                                                     *
*  FUNCTION                                                           *
*                                                                     *
*     THE FUNCTION OF THIS PROGRAM IS TO DISPLAY ALL 3211 PRINTER     *
*     FORMS CONTROL BUFFER DEFINITIONS (FCB'S) PRESENT IN             *
*     SYS1.IMAGELIB.  THE OUTPUT PRODUCED IS IN A FORMAT SUITABLE     *
*     FOR INPUT TO THE SYSTEM ASSEMBLER.  IT COULD BE USED TO         *
*     REGENERATE ANY OR ALL FCB'S IN THE LIBRARY.                     *
*                                                                     *
*  OUTPUT FORMAT                                                      *
*                                                                     *
*     THE OUTPUT CONSISTS OF UNBLOCKED 80 BYTE RECORDS.  THE OUTPUT   *
*     FOR EACH FCB IMAGE CONSISTS OF:                                 *
*                                                                     *
*     A)  THE ASSEMBLER SOURCE NECESSARY TO REASSEMBLE THE FCB.  IT   *
*         IS IN THE FORM OF A MACRO CALL TO THE MACRO $FCB.  SEE      *
*         BELOW FOR A BRIEF DESCRIPTION OF THIS MACRO.                *
*                                                                     *
*     B)  THE LINKAGE EDITOR CONTROL CARD.  IT IS A NAME CARD FOR     *
*         THE FCB WITH THE REPLACE OPTION SPECIFIED.                  *
*                                                                     *
*     C)  IF AN ALIAS FOR AN FCB IMAGE IS FOUND, THEN A MESSAGE IS    *
*         PRODUCED ON SYSPUNCH INDICATING THIS.  NO FURTHER           *
*         PROCESSING IS PERFORMED FOR THE ALIAS.                      *
*                                                                     *
*  USAGE                                                              *
*                                                                     *
*     THE PROGRAM REQUIRES TWO DD CARDS FOR EXECUTION.                *
*                                                                     *
*     A)  IMAGELIB - POINTING TO SYS1.IMAGELIB                        *
*     B)  SYSPUNCH - POINTING TO THE OUTPUT DATA SET                  *
*                                                                     *
*     PARAMETERS:  IF NO PARAMETERS ARE SPECIFIED ON THE EXEC CARD,   *
*     THEN EVERY FCB IMAGE IN THE LIBRARY WILL BE PROCESSED.          *
*     OPTIONALLY, ONLY SPECIFIC FCB IMAGES NEED BE PROCESSED.  TO DO  *
*     THIS, SUPPLY A LIST OF NAMES FOR THOSE FCB IMAGES REQUIRED.     *
*     THE NAMES IN THE LIST MUST BE SEPARATED BY COMMAS, AND NO       *
*     EMBEDDED BLANKS ARE ALLOWED.  THE NAMES CAN BE SPECIFIED AS     *
*     "FCB2X" OR "X", WHERE "X" IS THE FCB CODE.                      *
*                                                                     *
*     AN EXAMPLE:                                                     *
*                                                                     *
*            //LIST EXEC PGM=FCBSNOOP,PARM='STD,C060,FCB2AAAA'        *
*            //IMAGELIB DD DSN=SYS1.IMAGELIB,DISP=SHR                 *
*            //SYSPUNCH DD SYSOUT=A                                   *
*                                                                     *
*  ERROR MESSAGES                                                     *
*                                                                     *
*     1.  SYSPUNCH DCB FAILED TO OPEN                       ABEND 100 *
*     2.  IMAGELIB DCB FAILED TO OPEN FOR DIRECTORY SEARCH  ABEND 100 *
*     3.  IMAGELIB DCB FAILED TO OPEN FOR LOADING           ABEND 100 *
*     4.  PARM FIELD CANNOT EXCEED 100 CHARACTERS IN LENGTH ABEND 100 *
*     5.  NULL ENTRY ENCOUNTERED IN PARM FIELD              RC    4   *
*     6.  A NAME LONGER THAN 8 CHARACTERS IN PARM FIELD     RC    8   *
*     7.  BLDL FAILURE AGAINST IMAGELIB - CHECK DUMP        ABEND 100 *
*     8.  MEMBER NAME NOT FOUND BY BLDL                     RC    8   *
*     9.  INVALID FCB NAME - IGNORED                        RC    8   *
*                                                                     *
*  ABENDS                                                             *
*                                                                     *
*     THE PROGRAM WILL ABEND WITH A USER 100 COMPLETION CODE IF IT    *
*     DETERMINES THAT IT CANNOT CONTINUE.  AN ERROR MESSAGE WILL      *
*     BE WRITTEN EXPLAINING THE NATURE OF THE PROBLEM.                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  OPERATING SYSTEM DEPENDENCIES                                      *
*                                                                     *
*     THE PROGRAM USES BPAM I/O TO IMAGELIB, AND QSAM I/O TO          *
*     SYSPUNCH.  ERROR MESSAGES ARE WRITTEN USING WRITE-TO-           *
*     PROGRAMMER.                                                     *
*                                                                     *
*  EXTERNAL REFERENCES                                                *
*                                                                     *
*     THERE ARE NO EXTERNAL REFERENCES.                               *
*                                                                     *
*  MODULE ATTRIBUTES                                                  *
*                                                                     *
*     THIS PROGRAM IS SERIALLY REUSABLE.                              *
*                                                                     *
*  REFERENCES                                                         *
*                                                                     *
*     1.  IBM 3211 PRINTER, 3216 INTERCHANGEABLE TRAIN CARTRIDGE,     *
*         AND 3811 PRINTER CONTROL UNIT COMPONENT DESCRIPTION AND     *
*         OPERATOR'S GUIDE.  IBM FORM NUMBER GA24-3543.               *
*                                                                     *
*     2.  OS/VS2 SYSTEM PROGRAMMING LIBRARY: DATA MANAGEMENT.  IBM    *
*         FORM NUMBER GC26-3830.                                      *
*                                                                     *
*  ASSOCIATED ROUTINES                                                *
*                                                                     *
*     ASSOCIATED WITH THIS PROGRAM IS THE $FCB MACRO.  OUTPUT FROM    *
*     THIS PROGRAM IS A SERIES OF CALLS TO THIS MACRO.  BRIEFLY,      *
*     THIS MACRO PROVIDES A SIMPLE WAY OF GENERATING AN FCB IMAGE.    *
*     THE MACRO ACTUALLY USED IS BASED ON THE $FCB MACRO WHICH IS     *
*     DISTRIBUTED WITH HASP II VERSION 4.  FOR MORE INFORMATION       *
*     ABOUT THAT MACRO, REFER TO "OS/VS2 HASP II VERSION 4 LOGIC",    *
*     IBM FORM NUMBER GY27-7255.  WHAT FOLLOWS IS A BRIEF             *
*     DESCRIPTION OF MY $FCB MACRO.  A MORE DETAILED DESCRIPTION      *
*     CAN BE OBTAINED BY LISTING THE MACRO ITSELF.                    *
*                                                                     *
*         FCB2???? $FCB  I,P,C-L,C-L,...,INDEX=X,DEFAULT=YES          *
*                                                                     *
*     ???? - THE FOUR CHARACTER FCB NAME                              *
*                                                                     *
*     I    - THE NUMBER OF LINES PER INCH (EITHER 6 OR 8)             *
*                                                                     *
*     P    - THE NUMBER OF LINES PER PAGE (A VALUE BETWEEN 2 AND 180) *
*                                                                     *
*     C-L  - CARRIAGE PUNCH  -- LINE NUMBER.  THIS IS CODED AS THE    *
*            CHANNEL NUMBER, A HYPHEN, AND THE ASSOCIATED LINE        *
*            NUMBER.  THE CHANNEL NUMBER CAN BE A VALUE BETWEEN 1     *
*            AND 12.  THE LINE NUMBER CAN BE A VALUE BETWEEN 1 AND    *
*            THE NUMBER OF LINES PER PAGE SPECIFIED.                  *
*                                                                     *
*     X    - THE INDEX AMOUNT.  THE PARAMETER "INDEX=X" IS OPTIONAL   *
*            AND CAN BE OMITTED.  IF IT IS, THEN NO INDEXING WILL     *
*            BE PERFORMED.  IF SPECIFIED, X CAN BE A VALUE FROM 1 TO  *
*            31 FOR RIGHT INDEXING; OR -1 TO -31 FOR LEFT INDEXING.   *
*                                                                     *
*     YES  - INDICATES THAT THIS IS TO BE A DEFAULT IMAGE.  THE       *
*            KEYWORD PARAMETER "DEFAULT=YES" CAN BE OMITTED.  IF IT   *
*            IS SPECIFIED, THEN A DEFAULT IMAGE WILL BE GENERATED.    *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  SOURCE                                                             *
*                                                                     *
*     THIS CODE WAS WRITTEN AND DEBUGGED ON AN IBM 370/168MP UNDER    *
*     AN OS/VS2 RELEASE 3.7 (MVS) OPERATING SYSTEM.  WE ARE RUNNING   *
*     JES2 VERSION 4 WHICH HAS BEEN MODIFIED SLIGHTLY.                *
*                                                                     *
*     THIS PROGRAM WAS WRITTEN BY:                                    *
*                                                                     *
*            BILL FLEURY                                              *
*            OPERATING SYSTEMS AND HARDWARE PLANNING                  *
*            COMPUTING AND SYSTEMS DIVISION                           *
*            DEPARTMENT OF GOVERNMENT SERVICES                        *
*            THE GOVERNMENT OF ALBERTA                                *
*            TERRACE BUILDING                                         *
*            9515  - 107 STREET                                       *
*            EDMONTON, ALBERTA, CANADA  T5K-2C4                       *
*                                                                     *
*                                          APRIL, 1977                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                       MAIN ENTRY POINT                              *
*                                                                     *
***********************************************************************
         SPACE
FCBSNOOP CSECT
         USING FCBSNOOP,R15       ESTABLISH A TEMPORARY BASE
         B     START              BRANCH AROUND IDENTIFIER
         DC    AL1(9)             LENGTH OF IDENTIFIER
         DC    CL9'FCBSNOOP'      THE IDENTIFIER
START    DS    0H
         STM   R14,R12,12(R13)    SAVE THE REGISTERS
         LR    R12,R15            SET UP THE ACTUAL BASE REGISTER
         DROP  R15
         USING FCBSNOOP,R12
         LA    R14,SAVEAREA       FIX UP A NEW SAVE AREA
         ST    R14,8(0,R13)       AND LINK IT TO THE OLD ONE
         ST    R13,4(0,R14)
         LR    R13,R14            THERE.  ENTRY IS COMPLETE
         SPACE 3
         USING TABENTRY,RENTRY    FOR THE TABLE ENTRIES
         MVI   RETCODE,X'00'      SET ZERO RETURN CODE
         SPACE 3
         OPEN  (SYSPUNCH,OUTPUT)  OPEN OUTPUT FILE
         SPACE 3
         LA    RDCB,SYSPUNCH      CHECK TO SEE IF THE SYSPUNCH DCB
         USING IHADCB,RDCB        REALLY DID OPEN
         TM    DCBOFLGS,DCBOFOPN
         BZ    ERROR1             BRANCH IF NO
         SPACE 3
***********************************************************************
*                                                                     *
*                   IS THERE A PARM FIELD?                            *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R1,4(0,R13)        PICK UP PARM FIELD POINTER FROM
         L     R1,24(0,R1)        REGISTER SAVE AREA
         LTR   R1,R1              WHAT WERE WE PASSED?
         BZ    NOPARM             BRANCH IF NOTHING
         L     R1,0(0,R1)         WHAT DOES IT POINT TO?
         LTR   R1,R1              WATCH OUT FOR ZERO POINTERS
         BZ    NOPARM
         LH    R2,0(0,R1)         PICK UP LENGTH OF PARM FIELD
         LTR   R2,R2              WATCH OUT FOR ANOTHER ZERO
         BZ    NOPARM
         CH    R2,=H'100'         BY DEFINITION CANNOT EXCEED 100
         BH    ERROR4             BYTES IN LENGTH
         LA    RBUF,2(0,R1)       POINTS TO START OF PARM FIELD
         LA    REBUF,0(R2,RBUF)   POINTS TO END OF PARM FIELD
         EJECT
***********************************************************************
*                                                                     *
*            BUILD A TABLE USING THE PARM FIELD ENTRIES               *
*                                                                     *
***********************************************************************
         SPACE 2
         OPEN  (IMAGELIB,INPUT)   OPEN UP IMAGE LIBRARY
         SPACE 2
         LA    RDCB,IMAGELIB      TEST TO BE SURE THE OPEN WENT OK
         TM    DCBOFLGS,DCBOFOPN
         BZ    ERROR3
         SPACE 2
         GETMAIN R,LV=4096,SP=1   GET SOME SPACE FOR THE TABLE
         SPACE 2
         ST    R1,TSTART          SET POINTER TO START OF TABLE
         LR    RENTRY,R1
         SR    R0,R0
         ST    R0,TLENTRY         SET LAST ENTRY POINTER TO ZERO
         SPACE 3
PARMGET  LR    R1,RBUF            NEXT LOCATION IN PARM FIELD
         LA    R2,1               INCREMENT FOR BXLE INSTRUCTION
         LA    R3,7(0,R1)         MAXIMUM LENGTH OF NAME IS 8
         CR    R3,REBUF           DOES THIS PUT US PAST THE END?
         BL    *+8                SKIP IF NOT
         LR    R3,REBUF           ELSE RESET TO LAST CHARACTER
         BCTR  R3,0               IN PARM FIELD
         SPACE
PARM1    CLI   0(R1),C','         IS THIS A SEPARATOR CHARACTER?
         BE    PARM2              IF SO, THIS MARKS THE END OF A NAME
         BXLE  R1,R2,PARM1        ELSE LOOK AT NEXT CHARACTER
         CR    R1,REBUF           ARE WE AT THE END OF THE BUFFER?
         BNL   PARM2              GO TO PARM2 IF WE ARE
         CLI   0(R1),C','         ELSE CHECK IF THE NEXT CHARACTER
         BNE   ERROR6             IS A SEPARATOR
         SPACE 1
PARM2    SR    R1,RBUF            GIVES CHARACTER COUNT IN NAME
         BZ    ERROR5             IF ZERO, THIS IS A NULL ENTRY
         BCTR  R1,0               ELSE GET IBM LENGTH
         CH    R1,=H'3'           GO TO PARM3 IF THERE ARE MORE
         BH    PARM3              THAN 4 CHARACTERS THERE
         MVC   TABNAME(8),=CL8'FCB2'  STICK IN FCB NAME HEADER
         EX    R1,PARMVC1         ADD IN THE TAIL TO GIVE FCB NAME
         B     PARMBLDL           NOW SEE IF IT'S IN THE LIBRARY
         SPACE 2
PARM3    CLC   0(4,RBUF),=CL4'FCB2'  IS IT A PROPER FCB NAME?
         BNE   ERROR9             BRANCH IF IT ISN'T
         MVI   TABNAME,C' '       BLANK OUT THE ENTRY NAME
         MVC   TABNAME+1(7),TABNAME
         EX    R1,PARMVC2         MOVE IN THE FCB NAME
         EJECT
PARMBLDL MVC   BLDLNAME(8),TABNAME MOVE NAME TO BUILD LIST PARMS
         LA    RBUF,2(R1,RBUF)    BUMP PARM FIELD POINTER
         SPACE
         BLDL  IMAGELIB,BLDLPARM  IS THE FCB THERE?
         SPACE 2
         B     *+4(R15)           USE RETURN CODE AS TABLE INDEX
         B     PARMBOK            0 - HERE IF THE MEMBER WAS FOUND
         B     ERROR8             4 - HERE IF MEMBER NOT THERE
         B     ERROR7             8 - HERE IF PERMANENT I/O ERROR OR
*                                     INSUFFICIENT STORAGE AVAILABLE
         B     ERROR7             C - HERE IF SYSTEM ERROR
         SPACE 3
PARMBOK  SR    R0,R0              THE MEMBER IS THERE...
         STC   R0,TABFLAGS        ZERO FLAGS IN ENTRY
         STCM  R0,B'0111',TABPTR  ZERO CHAIN FIELD IN ENTRY
         TM    BLDLFLAG,ALIAS     IS THIS AN ALIAS?
         BNO   *+14               SKIP IF NOT
         OI    TABFLAGS,TABALIAS  IF IT IS, SET ALIAS FLAG
         MVC   TABRNAME(8),BLDLRNM AND MOVE IN THE REAL NAME
         L     R1,TLENTRY         PICK UP LAST ENTRY ADDRESS
         LTR   R1,R1              IF ZERO, THIS IS THE FIRST
         BZ    *+8                SKIP IF ZERO
         STCM  RENTRY,B'0111',TABPTR-TABENTRY(R1) LINK OLD TO NEW
         ST    RENTRY,TLENTRY     RESET LAST ENTRY POINTER
         LA    RENTRY,TABELEN(RENTRY) BUMP TO NEXT AVAILABLE ENTRY
         SPACE 2
PARMCHEK CR    RBUF,REBUF         HAVE WE COME TO THE END OF THE
         BL    PARMGET            PARM FIELD YET?
         SPACE 2
         B     BUILDFCB           GO BUILD $FCBS IF SO.
         SPACE 3
***********************************************************************
*                                                                     *
*              INITIALIZE FOR IMAGELIB DIRECTORY SCAN                 *
*                                                                     *
***********************************************************************
         SPACE 2
NOPARM   OPEN  (IMAGEDIR,INPUT)
         SPACE 3
         LA    RDCB,IMAGEDIR      NOW CHECK TO SEE IF THE IMAGELIB
         TM    DCBOFLGS,DCBOFOPN  DIRECTORY DCB IS READY TO GO
         BZ    ERROR2             BRANCH IF NO
         SPACE 1
         POINT IMAGEDIR,FIRSTBLK  POINT TO START OF IMAGELIB DIRECTORY
         EJECT
*
*  INITIALIZE LIST OF MEMBER NAMES
*
         SPACE 2
         SR    R0,R0
         ST    R0,TENTRY          ADDRESS OF NEXT TABLE ENTRY
         ST    R0,TSTART          ADDRESS OF FIRST TABLE ENTRY
         ST    R0,TLENTRY         ADDRESS OF LAST ENTRY ADDED
         SPACE 3
***********************************************************************
*                                                                     *
*            READ PARTITONED DATA SET DIRECTORY                       *
*                                                                     *
***********************************************************************
         SPACE 2
READ     READ  INDECB,SF,IMAGEDIR,BUFFER,'S'
         SPACE 3
         CHECK INDECB             EVERYTHING OK?
         SPACE 3
         LA    REBUF,BUFFER       POINT TO FIRST UNUSED BYTE IN BUFFER
         AH    REBUF,BUFFER
         LA    RBUF,BUFFER+2      POINT TO FIRST ENTRY IN BUFFER
         EJECT
*
*  PUT ENTRY INTO TABLE
*
         SPACE 2
ENTRY    CLC   0(8,RBUF),LASTNAME IS THIS THE LAST ENTRY
         BE    EOF                IF SO, WE CAN GO TO EOF
         L     R1,TENTRY          GET ADDRESS OF NEXT ENTRY
         LTR   R1,R1              IF IT IS NONZERO, IT IS PROBABLY
         BNZ   TSAVE              OK TO USE - I HOPE IT IS ANYWAY
         SPACE
         GETMAIN R,LV=4096,SP=1   ELSE WE NEED A PAGE OF STORAGE
         SPACE 2
         ST    R1,TENTRY          SET ADDRESS OF NEXT ENTRY
         A     R1,=F'4096'        BUMP BY LENGTH OF GETMAIN
         ST    R1,TEND            GIVES ADDRESS OF END OF AREA
         L     R1,TENTRY          NOW PICK NEXT ENTRY ADDRESS UP AGAIN
         L     R0,TSTART          IS THIS THE FIRST TIME?
         LTR   R0,R0
         BNZ   TSAVE              BRANCH IF IT ISN'T
         ST    R1,TSTART          OTHERWISE SET START POINTER
         SPACE 1
TSAVE    MVC   TABNAME-TABENTRY(8,R1),0(RBUF) MOVE IN THE MEMBER NAME
         MVI   TABFLAGS-TABENTRY(R1),X'00'  ZERO FLAGS
         XC    TABPTR-TABENTRY(3,R1),TABPTR-TABENTRY(R1) AND POINTER
         TM    11(RBUF),ALIAS     IS THIS ENTRY AN ALIAS NAME?
         BNO   *+14               IF IT IS, SET ON THE ALIAS BIT
         MVC   TABRNAME-TABENTRY(8,R1),36(RBUF) MOVE IN THE REAL NAME
         OI    TABFLAGS-TABENTRY(R1),TABALIAS
         L     R2,TLENTRY         GET ADDRESS OF LAST ENTRY
         LTR   R2,R2              IF IT IS NONZERO, THEN
         BZ    *+8                CHAIN THE NEW ENTRY ON AFTER
         STCM  R1,B'0111',TABPTR-TABENTRY(R2) THE OLD ENTRY
         SPACE 3
*
*  NOW INCREMENT POINTER TO NEXT TABLE ENTRY
*
         SPACE 1
         ST    R1,TLENTRY         ADDRESS OF LAST ENTRY
         LA    R1,TABELEN(R1)     BUMP TO NEXT SEQUENTIAL SLOT
         LA    R0,TABELEN(R1)     AND TO END OF THAT SLOT
         C     R0,TEND            CHECK FOR END OF GETMAINED AREA
         BNH   *+6                IF AT THE END,
         SR    R1,R1              SET THE NEXT ENTRY POINTER TO ZERO
         ST    R1,TENTRY
         EJECT
***********************************************************************
*                                                                     *
*                 BUMP TO NEXT DIRECTORY ENTRY                        *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    RBUF,11(RBUF)      IS THERE ANY USER DATA PRESENT?
         NI    0(RBUF),X'1F'      SAVE LOW 5 BITS
         SR    R1,R1
         IC    R1,0(RBUF)         DOUBLING GIVES LENGTH OF USER DATA
         AR    R1,R1
         LA    RBUF,1(R1,RBUF)    POINT TO NEXT DIRECTORY ENTRY
         CR    RBUF,REBUF         HAVE WE COME TO THE END OF THE BUFFER
         BL    ENTRY              BRANCH IF NO
         B     READ               ELSE READ IN THE NEXT DIRECTORY BLOCK
         SPACE 3
***********************************************************************
*                                                                     *
*                 END OF DIRECTORY HAS BEEN REACHED                   *
*                                                                     *
***********************************************************************
         SPACE 2
EOF      CLOSE (IMAGEDIR)         CLOSE DIRECTORY DCB
         SPACE 3
         OPEN  (IMAGELIB,INPUT)   NOW OPEN LIBRARY FOR MODULE LOADING
         SPACE 3
         LA    RDCB,IMAGELIB      CHECK TO SEE IF IT REALLY OPENED
         TM    DCBOFLGS,DCBOFOPN  CAUSE I'M PARANOID
         BZ    ERROR3             BRANCH IF IT DIDN'T
         SPACE 1
BUILDFCB L     RENTRY,TSTART      NOW GET ADDRESS OF FIRST TABLE ENTRY
         SPACE 1
ENTRYSCN LTR   RENTRY,RENTRY      IF THIS IS ZERO, THIS IS THE END
         BZ    DONE               OF THE TABLE
         CLC   TABNAME(4),=CL4'FCB2' IS THIS AN FCB IMAGE?
         BNE   ENTRYINC           IF NOT, GO GET NEXT TABLE ENTRY
         EJECT
***********************************************************************
*                                                                     *
*                 PREPARE OUTPUT CARD IMAGE                           *
*                                                                     *
***********************************************************************
         SPACE 2
*
*  LOOK AT MODULE NAME
*
         SPACE 2
         MVI   BUFFER,C' '        FIRST BLANK OUT THE BUFFER
         MVC   BUFFER+1(79),BUFFER
         MVC   BUFFER(8),TABNAME  NOW MOVE IN MODULE NAME
         MVC   BUFFER+76(4),BUFFER+4  MOVE NAME INTO SEQUENCE FIELD
         TM    TABFLAGS,TABALIAS  IS THIS ENTRY AN ALIAS NAME?
         BNO   BUILD              GO BUILD $FCB IF IT ISN'T
         MVC   BUFFER+9(15),=C'IS AN ALIAS FOR'
         MVC   BUFFER+25(8),TABRNAME MOVE IN THE REAL NAME
         PUT   SYSPUNCH,BUFFER    AND WRITE IT OUT
         B     ENTRYINC           NOW GET NEXT TABLE ENTRY
         SPACE 2
BUILD    MVC   BUFFER+9(4),=CL4'$FCB'  MACRO CALL
         SPACE
         LOAD  EPLOC=(RENTRY),DCB=IMAGELIB  LOAD UP FCB IMAGE
         SPACE 3
*
*  SET LINES PER INCH
*
         SPACE 1
         ST    R0,FCBADDR         SAVE ADDRESS OF LOADED IMAGE
         LR    RFCB,R0
         LA    R1,FCBINDEX-FCBDSECT(RFCB) LOOK FOR LINES PER INCH
         TM    0(R1),FCBRINDX+FCBLINDX IS INDEXING SPECIFIED?
         BZ    *+8                IF SO, LINES PER INCH IN NEXT BYTE
         LA    R1,1(R1)           SO BUMP POINTER PAST INDEX BYTE
         MVI   BUFFER+15,C'6'     DEFAULT TO 6 LINES PER INCH
         TM    0(R1),FCB8LPI      EXAMINE LINES PER INCH BIT
         BZ    *+8                SKIP IF 6 LINES PER INCH
         MVI   BUFFER+15,C'8'     ELSE SET TO 8 LINES PER INCH
         MVI   BUFFER+16,C','     ADD A SEPARATING COMMA
         SPACE 3
*
*  FIGURE OUT LINES PER PAGE
*
         SPACE
         LA    RBUF,BUFFER+17     LOAD NEXT LOCATION IN BUFFER
         SR    R0,R0
         IC    R0,1(RFCB)         PICK UP FCB LENGTH
         TM    FCBINDEX-FCBDSECT(RFCB),FCBRINDX+FCBLINDX INDEXING?
         BZ    *+6                IF NONE THEN SKIP
         BCTR  R0,0               DECREMENT TO GIVE LINES PER PAGE
         LA    RCHAR,CHARBUF      INITIALIZE -> IN CHARACTER BUFFER
         BAL   R14,STASHNUM       STASH LINES PER PAGE
         MVI   0(RCHAR),C','      ADD A SEPARATING COMMA
         LA    RCHAR,1(RCHAR)     BUMP POINTER
         BAL   R14,COPY           NOW PLACE IN OUTPUT BUFFER
         EJECT
*
*  SET UP CHANNEL PUNCHES
*
         SPACE
         LR    RFCB,R1            ADDRESS IN FCB
         LA    RFCBLINE,1         SET FCB LINE NUMBER TO 1
         MVC   FCBLPAGE(1),0(RFCB) SAVE THIS BYTE FOR DEBUGGING PURP.
         NI    0(RFCB),X'FF'-FCB8LPI TURN OFF LINES PER INCH BIT
         TM    0(RFCB),FCBCHAN    IS THERE A CHANNEL PUNCH HERE?
         BM    CHPUNCH            BRANCH IF THERE IS
         SPACE 2
FCBINCR  TM    0(RFCB),FCBLAST    IS THIS THE LAST BYTE IN THE FCB?
         BO    CHKINDEX           BRANCH IF SO
         LA    RFCB,1(RFCB)       BUMP FCB IMAGE POINTER
         LA    RFCBLINE,1(RFCBLINE) BUMP FCB LINE NUMBER
         TM    0(RFCB),FCBCHAN    IS THERE A CHANNEL PUNCH HERE?
         BZ    FCBINCR            BRANCH IF THERE ISN'T
         SPACE 2
CHPUNCH  MVC   CHAR(1),0(RFCB)    PICK OUT FCB CHARACTER
         NI    CHAR,FCBCHAN       PICK OUT CHANNEL NUMBER
         SR    R0,R0
         IC    R0,CHAR            AND STASH IT IN CHARACTER BUFFER
         LA    RCHAR,CHARBUF      INITIALIZE BUFFER POINTER
         BAL   R14,STASHNUM       DO THE STASHING
         MVI   0(RCHAR),C'-'      ADD IN A HYPHEN
         LA    RCHAR,1(RCHAR)     BUMP BUFFER POINTER
         LR    R0,RFCBLINE        NOW STASH LINE NUMBER
         BAL   R14,STASHNUM
         MVI   0(RCHAR),C','      STICK IN A COMMA
         LA    RCHAR,1(RCHAR)     BUMP CHARACTER POINTER
         BAL   R14,COPY           AND COPY INTO OUTPUT BUFFER
         B     FCBINCR            LOOK AT NEXT FCB BYTE
         SPACE 3
*
*  NOW CHECK FOR INDEXING
*
         SPACE 2
CHKINDEX L     RFCB,FCBADDR       PICK UP ADDRESS OF FIRST FCB BYTE
         TM    FCBINDEX-FCBDSECT(RFCB),FCBRINDX IS THERE RIGHT INDEXING
         BNO   CHKLEFT            IF NOT, GO CHECK FOR LEFT INDEXING
         MVC   CHARBUF(6),=C'INDEX='
         LA    RCHAR,CHARBUF+6    RESET CHARACTER POINTER
         B     STASH
         SPACE 3
CHKLEFT  TM    FCBINDEX-FCBDSECT(RFCB),FCBLINDX  LEFT INDEXING?
         BNO   CHKDEFLT           BRANCH IF NOT SPECIFIED
         MVC   CHARBUF(7),=C'INDEX=-'
         LA    RCHAR,CHARBUF+7
         SPACE 3
STASH    MVC   CHAR(1),FCBINDEX-FCBDSECT(RFCB) PICK UP INDEX BYTE
         NI    CHAR,FCBXAMT       SAVE LOW 5 BITS
         SR    R0,R0
         IC    R0,CHAR            STASH INDEX AMOUNT
         BAL   R14,STASHNUM
         MVI   0(RCHAR),C','      DELIMIT WITH A COMMA
         LA    RCHAR,1(RCHAR)     BUMP CHARACTER POINTER
         BAL   R14,COPY           COPY INTO OUTPUT BUFFER
         EJECT
*
*  CHECK IF THIS IS A DEFAULT IMAGE
*
         SPACE 3
CHKDEFLT TM    FCBFLAG1-FCBDSECT(RFCB),FCBDEFLT IS THIS A DEFAULT?
         BNO   PUNCHIM            IF NO, GO PUNCH THE CARD
         MVC   CHARBUF(11),=C'DEFAULT=YES' ELSE MOVE IN KEYWORD
         LA    RCHAR,CHARBUF+11   RESET CHARACTER POINTER
         BAL   R14,COPY           AND COPY INTO OUTPUT BUFFER
         SPACE 3
***********************************************************************
*                                                                     *
*            FCB PROCESSING DONE - PUNCH CONTROL CARDS                *
*                                                                     *
***********************************************************************
         SPACE 2
PUNCHIM  BCTR  RBUF,0             IS LAST CHARACTER A COMMA?
         CLI   0(RBUF),C','
         BNE   *+8                IF IT IS, BLANK IT
         MVI   0(RBUF),C' '
         SPACE 3
         PUT   SYSPUNCH,BUFFER    PUNCH THE CARD
         SPACE 3
         MVI   BUFFER,C' '        NOW BLANK THE BUFFER
         MVC   BUFFER+1(79),BUFFER
         MVC   BUFFER+2(4),=C'NAME' PREPARE LINKAGE EDITOR CONTROL CARD
         MVC   BUFFER+7(8),TABNAME  MOVE IN MODULE NAME
         LA    RBUF,BUFFER+14
         SPACE
LASTLOOP CLI   0(RBUF),C' '       FIND LAST CHARACTER OF NAME
         BNE   *+10
         BCTR  RBUF,0
         B     LASTLOOP
         MVC   1(3,RBUF),=C'(R)'  AND INSERT REPLACE OPTION
         SPACE 3
         PUT   SYSPUNCH,BUFFER    THEN WRITE IT OUT
         SPACE 3
         DELETE EPLOC=(RENTRY)    NOW GET RID OF THE FCB IMAGE
         EJECT
ENTRYINC ICM   RENTRY,B'0111',TABPTR GET ADDRESS OF NEXT ENTRY
         B     ENTRYSCN           NOW GO CHECK IT OUT
         SPACE 3
***********************************************************************
*                                                                     *
*         PROGRAM PROCESSING COMPLETE - CLOSE FILES AND EXIT          *
*                                                                     *
***********************************************************************
         SPACE 2
DONE     CLOSE (IMAGELIB,,SYSPUNCH)
         SPACE 2
         FREEMAIN R,SP=1
         SPACE 2
RETURN   SR    R15,R15            PICK UP RETURN CODE
         SR    R0,R0
         IC    R0,RETCODE
RETLOOP  LTR   R0,R0
         BE    EXIT
         LA    R15,4(R15)
         SRL   R0,1
         B     RETLOOP
         SPACE 2
EXIT     L     R13,4(0,R13)       RESTORE SAVE AREA POINTER
         L     R14,12(R13)        RESTORE REGISTERS
         LM    R0,R12,20(R13)
         BR    R14                AND EXIT
         EJECT
***********************************************************************
*                                                                     *
*                      ERROR ROUTINES                                 *
*                                                                     *
***********************************************************************
         SPACE
ERROR1   WTO   'SYSPUNCH DCB FAILED TO OPEN',ROUTCDE=11,DESC=7
         SPACE 2
         B     ABEND
         SPACE 3
ERROR2   WTO   'IMAGELIB DCB FAILED TO OPEN FOR DIRECTORY SEARCH',     *
               ROUTCDE=11,DESC=7
         SPACE 2
         B     ABEND
         SPACE 3
ERROR3   WTO   'IMAGELIB DCB FAILED TO OPEN FOR LOADING',ROUTCDE=11,   *
               DESC=7
         SPACE 2
         B     ABEND
         SPACE 3
ERROR4   WTO   'PARM FIELD CANNOT EXCEED 100 CHARACTERS IN LENGTH',    *
               ROUTCDE=11,DESC=7
         SPACE
         B     ABEND
         EJECT
ERROR5   WTO   'NULL ENTRY ENCOUNTERED IN PARM FIELD.  PROCESSING CONTI*
               NUES.',ROUTCDE=11,DESC=7
         SPACE 2
         OI    RETCODE,RETWARN    SIGNAL WARNING MSG ISSUED (RC=4)
         LA    RBUF,1(RBUF)       BUMP PAST THE COMMA
         B     PARMCHEK           GO CHECK FOR END OF PARM FIELD
         SPACE 3
ERROR6   WTO   'A NAME LONGER THAN 8 CHARACTERS HAS BEEN FOUND IN PARM *
               FIELD.',ROUTCDE=11,DESC=7
         SPACE 2
         OI    RETCODE,RETERROR   SIGNAL ERROR MSG ISSUED (RC=8)
         MVC   MESS1CON(8),0(RBUF)  MOVE IN FIRST PART OF NAME
         SPACE 1
         WTO   MF=(E,MESS1)       THE STRING WILL BE IGNORED
         SPACE 2
         LR    R3,REBUF           SET UP LIMIT FOR BXLE
ERROR6A  CLI   0(RBUF),C','       SCAN FOR NEXT SEPARATOR
         BE    ERROR6B            GOT HIM YET?
         BXLE  RBUF,R2,ERROR6A    CHECK NEXT CHARACTER
         B     BUILDFCB           GUESS THAT'S THE END OF IT
         SPACE
ERROR6B  LA    RBUF,1(RBUF)       BUMP PAST COMMA
         B     PARMCHEK           GO CHECK OUT NEXT NAME
         SPACE
MESS1    DC    AL2(EMESS1-*-3)    MESSAGE LENGTH FOR WTO
         DC    X'8000'            MCS FLAGS
         DC    C'THE STRING BEGINNING '  THE MESSAGE
MESS1CON DC    CL8' '             GARBAGE NAME FROM PARM FIELD
         DC    C' WILL BE IGNORED.'
         DC    X'0200'            DESCRIPTOR CODES
         DC    X'0020'            ROUTING CODES
EMESS1   EQU   *                  END OF MESSAGE
         EJECT
ERROR7   WTO   'BLDL FAILURE AGAINST IMAGELIB - CHECK DUMP.',          *
               ROUTCDE=11,DESC=7
         SPACE 2
         B     ABEND
         SPACE 3
ERROR8   MVC   MESS2CON(8),TABNAME MEMBER NAME NOT FOUND
         WTO   MF=(E,MESS2)       ISSUE WTO
         SPACE 1
         OI    RETCODE,RETERROR   SIGNAL ERROR MSG ISSUED (RC=8)
         B     PARMCHEK           GO LOOK FOR MORE NAMES
         SPACE
MESS2    DC    AL2(EMESS2-*-3)    MESSAGE LENGTH FOR WTO
         DC    X'8000'            MCS FLAGS
         DC    C'MEMBER NAME '    THE MESSAGE
MESS2CON DC    CL8' '             NAME FROM PARM FIELD
         DC    C' NOT FOUND BY BLDL - IGNORED.'
         DC    X'0200'            DESCRIPTOR CODES
         DC    X'0020'            ROUTING CODES
EMESS2   EQU   *                  END OF MESSAGE
         SPACE 3
ERROR9   MVI   MESS3CON,C' '      BLANK NAME FIELD IN MESSAGE
         MVC   MESS3CON+1(7),MESS3CON
         EX    R1,E9MVC           MOVE IN THE NAME
         LA    RBUF,2(R1,RBUF)    BUMP PARM FIELD POINTER
         SPACE
         WTO   MF=(E,MESS3)       INVALID FCB NAME
         SPACE 1
         OI    RETCODE,RETERROR   SIGNAL ERROR MSG ISSUED (RC=8)
         B     PARMCHEK           GO LOOK FOR MORE NAMES
         SPACE
E9MVC    MVC   MESS3CON(0),0(RBUF)  ** EXECUTED **
         SPACE
MESS3    DC    AL2(EMESS3-*-3)    MESSAGE LENGTH FOR WTO
         DC    X'8000'            MCS FLAGS
         DC    C'NAME '           THE MESSAGE
MESS3CON DC    CL8' '             NAME FROM PARM FIELD
         DC    C' IS AN INVALID FCB NAME - IGNORED.'
         DC    X'0200'            DESCRIPTOR CODES
         DC    X'0020'            ROUTING CODES
EMESS3   EQU   *                  END OF MESSAGE
         SPACE 3
ABEND    ABEND 100,DUMP
         EJECT
***********************************************************************
*                                                                     *
*                  CONSTANTS AND DATA AREAS                           *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0                  R
R1       EQU   1                    E
R2       EQU   2                      G
R3       EQU   3                        I
R4       EQU   4                          S
R5       EQU   5                            T
R6       EQU   6                              E
R7       EQU   7                                R
R8       EQU   8
R9       EQU   9                  E
R10      EQU   10                   Q
R11      EQU   11                     U
R12      EQU   12                       A
R13      EQU   13                         T
R14      EQU   14                           E
R15      EQU   15                             S
         SPACE 1
REBUF    EQU   R4                 ADDRESS OF END OF BUFFER
RBUF     EQU   R5                 POINTER INTO I/O BUFFER
RENTRY   EQU   R6                 ADDRESS OF CURRENT TABLE ENTRY
RFCB     EQU   R7                 ADDRESS OF LOADED FCB IMAGES
RCHAR    EQU   R8                 POSITION IN CHARACTER BUFFER
RFCBLINE EQU   R10                LINE NUMBER IN FCB
RDCB     EQU   R11                DCB ADDRESS
         SPACE 3
PARMVC1  MVC   TABNAME+4(0),0(RBUF)  FOR EXTRACTING NAMES FROM PARM FLD
PARMVC2  MVC   TABNAME(0),0(RBUF)  FOR EXTRACTING NAMES FROM PARM FLD
         SPACE 3
FIRSTBLK DC    X'00000100'        TTRN FOR FIRST DIRECTORY BLOCK
LASTNAME DC    8X'FF'             NAME FIELD IN LAST DIRECTORY ENTRY
ALIAS    EQU   X'80'              SIGNALS ENTRY IS AN ALIAS
         SPACE 3
         DS    0F
SAVEAREA DS    18XL4              REGISTER SAVE AREA
TENTRY   DC    XL4'0'             ADDRESS OF NEXT TABLE ENTRY
TEND     DC    XL4'0'             ADDRESS OF END OF TABLE
TSTART   DC    XL4'0'             ADDRESS OF START OF ENTRY LIST
TLENTRY  DC    XL4'0'             ADDRESS OF LAST ENTRY USED
FCBADDR  DS    XL4                ADDRESS OF FCB THAT WAS LOADED
         SPACE 2
BLDLPARM DC    AL2(1)             NUMBER OF ENTRIES IN LIST
         DC    AL2(44)            LENGTH OF THIS ENTRY
BLDLNAME DC    CL8' '             MEMBER NAME TO BE LOCATED
         DC    3X'00'             TTR LOCATION OF MEMBER
         DC    X'00'              CONCATENATION NUMBER
         DC    X'00'              SOURCE OF DIRECTORY ENTRY
BLDLFLAG DC    X'00'              FLAGS
         DC    22X'00'            USER DATA
BLDLRNM  DC    CL8' '             REAL MEMBER NAME (FOR ALIAS NAME)
         EJECT
CHAR     DS    X                  A SINGLE CHARACTER WORK AREA
FCBLPAGE DS    X                  FCB LINES/PAGE BYTE
RETCODE  DC    X'00'              FLAGS FOR RETURN CODE
RETWARN  EQU   B'00000001'        WARNING MESSAGE ISSUED (RC=4)
RETERROR EQU   B'00000010'        ERROR MESSAGE ISSUED (RC=8)
         DS    0H
CHARBUF  DS    CL80               CHARACTER BUFFER FOR INTERNAL TEXT
*                                 MANIPULATION PURPOSES
BUFFER   DS    CL256              GENERAL PURPOSE I/O BUFFER
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*                     SYSPUNCH OUTPUT DCB                             *
*                                                                     *
***********************************************************************
         SPACE 1
SYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,                      *
               RECFM=F,LRECL=80,BLKSIZE=80
         EJECT
***********************************************************************
*                                                                     *
*                IMAGELIB DIRECTORY INPUT DCB                         *
*                                                                     *
***********************************************************************
         SPACE 1
IMAGEDIR DCB   DSORG=PO,DDNAME=IMAGELIB,MACRF=R,EODAD=EOF,             *
               RECFM=F,LRECL=256,BLKSIZE=256
         EJECT
***********************************************************************
*                                                                     *
*              IMAGELIB LOAD LIBRARY INPUT DCB                        *
*                                                                     *
***********************************************************************
         SPACE 1
IMAGELIB DCB   DSORG=PO,DDNAME=IMAGELIB,MACRF=R
         EJECT
***********************************************************************
*                                                                     *
*            STASHNUM - OUTPUT NUMBER CONVERSION                      *
*                                                                     *
*  THE PURPOSE OF THIS SUBROUTINE IS TO CONVERT THE SUPPLIED BINARY   *
*  NUMBER TO ITS EQUIVALENT CHARACTER FORM.  THEN THE RESULT IS       *
*  PLACED IN THE OUTPUT BUFFER.  LEADING ZEROS AND BLANKS ARE         *
*  SUPPRESSED.  THE VALUE TO BE CONVERTED IS ASSUMED TO BE POSITIVE.  *
*                                                                     *
*  ON ENTRY, R0 MUST CONTAIN THE VALUE TO BE CONVERTED.  REGISTER     *
*  RCHAR MUST CONTAIN THE OUTPUT BUFFER ADDRESS.  REGISTER 14 MUST    *
*  CONTAIN THE RETURN ADDRESS.  UPON EXIT FROM THIS ROUTINE, THE      *
*  REGISTERS WILL BE RESTORED TO THEIR VALUE ON ENTRY WITH THE        *
*  EXCEPTION OF RCHAR.  IT WILL BE UPDATED TO POINT TO THE NEXT       *
*  AVAILABLE BYTE IN THE OUTPUT BUFFER.                               *
*                                                                     *
*  EXTERNAL REFERENCES - NONE AT ALL.                                 *
*                                                                     *
***********************************************************************
         SPACE 2
STASHNUM DS    0H
         STM   R0,R2,STASHSAV     SAVE SOME REGISTERS
         CVD   R0,STASHWK1        CONVERT VALUE TO PACKED DECIMAL
         MVC   STASHWK2(16),STASHPAT MOVE IN EDIT PATTERN
         LA    R2,STASHWK2+15
         LR    R1,R2              ASSUME RESULT WILL BE ONLY 1 CHAR
         EDMK  STASHWK2(16),STASHWK1 MAKE WITH NICE CHARACTERS
         SR    R2,R1              COMPUTE IBM LENGTH OF RESULT
         EX    R2,STASHMOV        MOVE CHACACTERS INTO OUTPUT BUFFER
         LA    RCHAR,1(R2,RCHAR)  BUMP BUFFER POINTER
         LM    R0,R2,STASHSAV     RESTORE REGISTERS
         BR    R14                AND RETURN
         SPACE 3
STASHMOV MVC   0(0,RCHAR),0(R1)   EXECUTED TO MOVE RESULT
STASHPAT DC    X'4020202020202020' EDIT PATTERN
         DC    X'2020202020202120'
STASHSAV DS    3F                 REGISTER SAVE AREA
STASHWK1 DS    D                  DOUBLE WORD WORK AREA
STASHWK2 DS    16C                ANOTHER WORK AREA
         EJECT
***********************************************************************
*                                                                     *
*                  COPY - STREAM ORIENTED OUTPUT                      *
*                                                                     *
*  THIS SUBROUTINE COPIES THE CHARACTER STRING FROM CHARBUF TO THE    *
*  OUTPUT I/O BUFFER (BUFFER).  IT IS COPIED SUCH THAT THE STRING     *
*  IS APPENDED TO ANY CHARACTERS ALREADY CONTAINED IN THE BUFFER.     *
*  IF THE STRING WILL EXTEND PAST COLUMN 71 ON THE OUTPUT CARD, THEN  *
*  INSTEAD AN ASTERISK (*) IS PLACED IN COLUMN 72 OF THE BUFFER AND   *
*  IT IS WRITTEN OUT.  IT IS THEN BLANKED AND THE STRING IS PLACED    *
*  STARTING IN COLUMN 16.                                             *
*                                                                     *
*  ON ENTRY, RCHAR MUST POINT TO THE NEXT AVAILABLE BYTE IN CHARBUF.  *
*  REGISTER RBUF MUST POINT TO THE NEXT AVAILABLE BYTE IN BUFFER.     *
*  REGISTER 14 MUST CONTAIN THE RETURN ADDRESS.  ON EXIT ALL          *
*  REGISTERS EXCEPT RBUF WILL BE RESORED TO THEIR VALUE ON ENTRY.     *
*  RBUF WILL CONTAIN THE ADDRESS OF THE NEXT AVAILABLE BYTE IN THE    *
*  I/O BUFFER.                                                        *
*                                                                     *
*  EXTERNAL REFERENCES - QSAM PUT ROUTINE WHEN BUFFER IS FULL         *
*                                                                     *
***********************************************************************
         SPACE 2
COPY     DS    0H
         STM   R14,R2,COPYSAVE    SAVE SOME WORK REGISTERS
         LA    R0,CHARBUF+1       COMPUTE IBM LENGTH OF THE INPUT
         LR    R2,RCHAR           STRING
         SR    R2,R0
         LA    R0,1(R2,RBUF)      WILL THE STRING FIT IN THE I/O
         C     R0,COPYADDR        BUFFER?
         BL    COPYMOVE           IF IT WILL, GO MOVE IT
         MVI   BUFFER+71,C'*'     OTHERWISE MARK A CONTINUATION
         SPACE 2
         PUT   SYSPUNCH,BUFFER    AND WRITE IT OUT
         SPACE 2
         MVI   BUFFER,C' '        THEN BLANK OUT THE BUFFER
         MVC   BUFFER+1(79),BUFFER
         LA    RBUF,BUFFER+15     SET UP ADDRESS FOR MOVE
         SPACE 1
COPYMOVE EX    R2,COPYMVC         NOW MOVE IN CHARACTERS
         LA    RBUF,1(R2,RBUF)    BUMP OUTPUT BUFFER POINTER
         LM    R14,R2,COPYSAVE    RESTORE REGISTERS
         BR    R14                AND RETURN
         SPACE 3
COPYMVC  MVC   0(0,RBUF),CHARBUF  EXECUTED TO MOVE CHARS TO I/O BUFFER
COPYSAVE DS    5F                 REGISTER SAVE AREA
COPYADDR DC    A(BUFFER+71)       ADDRESS OF END OF CARD IMAGE
         EJECT
***********************************************************************
*                                                                     *
*                FORMS CONTROL BUFFER DSECT                           *
*                                                                     *
***********************************************************************
         SPACE 1
FCBDSECT DSECT
*
*  CONTROL PROGRAM PREFIX
*
FCBFLAG1 DS    X                  FLAG BYTE
FCBDEFLT EQU   B'10000000'        IF SET MEANS DEFAULT IMAGE
         SPACE
FCBILEN  DS    X                  LENGTH OF FCB DATA PORTION
*
*  FCB DATA PORTION
*
FCBINDEX DS    X                  INDEX BYTE (OPTIONAL)
FCBRINDX EQU   B'10000000'        FLAG FOR RIGHT INDEXING
FCBLINDX EQU   B'01000000'        FLAG FOR LEFT INDEXING
FCBXAMT  EQU   B'00011111'        MASK FOR INDEX AMOUNT
         SPACE
*                                 THE REMAINDER OF THE FCB CONSISTS OF
*                                 LINE BYTES, ONE BYTE FOR EACH LINE ON
*                                 THE FORM.  THERE MUST BE AT LEAST 2
*                                 AND AT MOST 180 LINE BYTES.  THE
*                                 FOLLOWING EQUATES DEFINE THE BITS
*                                 WITHIN EACH LINE BYTE.
         SPACE
FCB8LPI  EQU   B'00010000'        FLAG FOR 8 LINES PER INCH SPACING.
*                                 THIS FLAG APPEARS ONLY IN THE FIRST
*                                 LINE BYTE.
FCBCHAN  EQU   B'00001111'        MASK FOR CHANNEL # IN FCB LINE BYTE
FCBLAST  EQU   B'00010000'        FLAG FOR LAST FCB DATA BYTE.  THIS
*                                 BIT IS SET IN THE LAST LINE BYTE.
         SPACE 1
*  END OF FCB.
         SPACE 3
***********************************************************************
*                                                                     *
*                   TABLE ENTRY DSECT                                 *
*                                                                     *
*  A TABLE IS CONSTRUCTED CONSISTING OF ONE ENTRY FOR EVERY DIRECTORY *
*  ENTRY IN THE DATA SET.  THIS DSECT IS USED TO DESCRIBE EACH ENTRY. *
*                                                                     *
***********************************************************************
         SPACE 1
TABENTRY DSECT
TABNAME  DS    CL8                THE DIRECTORY MEMBER OR ALIAS NAME
TABFLAGS DS    X                  FLAG BYTE
TABALIAS EQU   B'10000000'        TABNAME IS AN ALIAS NAME
TABPTR   DS    AL3                LINK TO NEXT TABLE ENTRY
TABRNAME DS    CL8                IF TABNAME IS AN ALIAS NAME, THIS IS
*                                 THE REAL MEMBER NAME
TABELEN  EQU   *-TABENTRY         LENGTH OF EACH TABLE ENTRY
         SPACE 3
***********************************************************************
*                                                                     *
*                DCB DSECT MACRO EXPANSION                            *
*                                                                     *
***********************************************************************
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         END
