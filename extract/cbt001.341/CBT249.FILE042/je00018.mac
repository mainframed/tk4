./       CHANGE NAME=$JCT      /* TUCC USER PROCLIB MODIFICATION */ KHP
         JE00018A JCT          /* EXTENSIONS TO HASP JCT         */ KHP
./       CHANGE NAME=$LINK     /* TUCC USER PROCLIB MODIFICATION */ KHP
.**********************************************************************
.* KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
.* $LINK MODIFICATION INSERTED DIRECTLY SINCE IT MUST GENERATE AN     *
.* AIF STATEMENT INTERNAL TO THE MACRO.  INSERTS LINES ER011000-7     *
.**********************************************************************
         AIF   ('&SEG'(1,4) EQ 'TUCC').A                        TW00100
.*<-------RESUME VANILLA  $LINK   CODE AT THIS POINT------------->* KHP
.**********************************************************************
./       CHANGE NAME=HASPRDR   /* TUCC USER PROCLIB MODIFICATION */ KHP
         AGO   .JE180D3        /* REMOVE $LINK HASPRCCS          */ KHP
.JE180D3 ANOP                  /* REMOVE $LINK HASPRCCS          */ KHP
         JE00018A RW00100A     /* $LINK TUCCRCCS                 */ KHP
         AGO   .JE180D4        /* REMOVE BE RFLTEST              */ KHP
.JE180D4 ANOP                  /* REMOVE BE RFLTEST              */ KHP
         JE00018A RW00100B     /* INVOKE TUCCRCCS IF EQ          */ KHP
./       CHANGE NAME=HASPXEQ   /* TUCC USER PROCLIB MODIFICATION */ KHP
         JE00018A UW00110D     /* CHECK FOR REQUEUE ON USERPROC  */ KHP
         AGO   .JE180D6        /* REMOVE MVC XJSSNAME            */ KHP
.JE180D6 ANOP                  /* REMOVE MVC XJSSNAME            */ KHP
         JE00018A JE180A6      /* INSERT L AND MOVE TO LITERAL   */ KHP
         AGO   .JE180D7        /* REMOVE ALTERNATE PROCLIB PROC. */ KHP
.JE180D7 ANOP                  /* REMOVE ALTERNATE PROCLIB PROC. */ KHP
         JE00018A UW00110A     /* //*PROCLIB PROCESSING CODE     */ KHP
         JE00018A UW00110B     /* UNALLOCATE USERPROC            */ KHP
         AGO   .JE180D9        /* REMOVE BAL XL1,XCNVWRAP        */ KHP
.JE180D9 ANOP                  /* REMOVE BAL XL1,XCNVWRAP        */ KHP
         JE00018A JE180A9      /* INSERT BAL XL1,UNALCHK         */ KHP
         JE00018A JE180AA      /* INSERT LTORG                   */ KHP
./       ADD   NAME=JE00018A
DUMMY TO BE REPLACED BY REPL
./       REPL  NAME=JE00018A
         MACRO
&L       JE00018A &V
.**********************************************************************
.*                                                                    *
.*   KHPRDC INSTALLATION OF TRIANGLE UNIVERSITIES COMPUTER CENTER     *
.*   //*PROCLIB USER PROCEDURE LIBRARY MODIFICATION.                  *
.*                                                                    *
.*       KAISER/PERMANENTE MEDICAL CARE PROGRAM                       *
.*       NORTHERN CALIFORNIA REGIONAL DATA CENTER                     *
.*       945 CAMELIA STREET, BERKELEY, CALIFORNIA 94710               *
.*       D. THEWLIS, JUNE 1, 1980.   (415) 428-6350                   *
.*                                                                    *
.*       MODIFICATION LEVEL:  FOR SU 825, JES2 RELEASE 4.1,           *
.*                            MSE/IPO 4.0 (3.8B) AT PTF LEVEL 8001,   *
.*                            INCL.   AZ27300 (CKPT DUPLEXING).       *
.*                                                                    *
.*                                                                    *
.*   THIS MODIFICATION IS ORIGINALLY FROM TUCC AND WAS TAILORED       *
.*   FROM THE SHARE JES MODS TAPE VERSION 12, MODS TW00100,TW00110.   *
.*   THANK YOU TUCC.                                                  *
.*                                                                    *
.*   ***NOTE***NOTE***NOTE***NOTE***NOTE***NOTE***NOTE***NOTE***      *
.*                                                                    *
.*   SINCE TUCC HAS ITS OWN NAMING STANDARDS AND CONVENTIONS FOR      *
.*   COPYING SOURCE, THEIR MODIFICATIONS WERE TAKEN OVER DIRECTLY     *
.*   RATHER THAN ALTERING THEM TO FIT OUR MACRO-INVOCATION STRUCTURE, *
.*   INSOFAR AS POSSIBLE.                                             *
.*                                                                    *
.*   DEPENDENCIES:  OUR IMPLEMENTATION OF SMSP DUPLICATE JOB OUTPUT   *
.*                  ALSO HAS AN ADDITION TO THE JCT -- IT GOES        *
.*                  IMMEDIATELY BEFORE THE TEXT ADDED BY THE TUCC     *
.*                  MODIFICATION HEREAFTER.                           *
.*                                                                    *
.*                  NOTE ALSO THAT CSECT 'TUCCRCCS' MUST BE           *
.*                  ADDED TO THE HASPASMS AND TO THE JES2BLD          *
.*                  LINKEDIT PROCEDURE.                               *
.*                                                                    *
.**********************************************************************
         AIF   ('&V' EQ 'JCT').FIRST
         AIF   ('&V' EQ 'RW00100A').THIRD
         AIF   ('&V' EQ 'RW00100B').FOURTH
         AIF   ('&V' EQ 'UW00110D').FIFTH
         AIF   ('&V' EQ 'JE180A6').SIXTH
         AIF   ('&V' EQ 'UW00110A').SEVENTH
         AIF   ('&V' EQ 'UW00110B').EIGHTH
         AIF   ('&V' EQ 'JE180A9').NINTH
         AIF   ('&V' EQ 'JE180AA').TENTH
         MNOTE 12,'INVALID PARAMETER - &V'
         MEXIT
.FIRST   ANOP
***********************************************************************
* KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.              *
* $JCT MODIFICATION.  PART1 FOLLOWS LINE EB296000 AT LINE EB296018    *
* FOR JES2 MODIFICATION JE00018.                                      *
***********************************************************************
JCTPROC  DS    CL44               USER PROCLIB DSNAME           TW00110
JCTPROCV DS    CL6                USER PROCLIB VOLSER           TW00110
JCTPROCP DS    H                  USER PROCLIB PASSWORD LENGTH  TW00110
JCTPROCW DS    CL8                USER PROCLIB PASSWORD         TW00110
JCTCPENQ EQU   34                 USER PROCLIB ENQUEUED         TW00110
*<-------RESUME VANILLA   $JCT   CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.THIRD   ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPRDR MODIFICATIONS.  PART 3 REPLACES LINE R0746000.             *
***********************************************************************
         SPACE 1
* + + + + + + + + + + + BEGIN RW00100A + + + + + + + + + + + +  TW00100
*
* TW00100      JULY 28, 1977      RDR CTL CARDS SEPARATE CSECT
*
*        REPLACE $LINK  HASPRCCS   WITH
*              $LINK TUCCRCCS, WHICH IS A SEPARATE CSECT
*        TUCCRCCS MAY BRANCH DIRECTLY TO HASPRCCS (LEAVING LINK
*        REG ASIS), OR MAY RETURN HERE. ENTRY POINTS ARE
*        GENERATED SO TUCCRCCS CAN SET REG RL2 FOR EXIT ADR
         SPACE 1
         $LINK TUCCRCCS           SCAN HASP CONTROL CARD
         SPACE 1
         ENTRY RNXTCRD            ENTRY POINTS
         ENTRY RPRIREAD            NEEDED
         ENTRY RFLTEST               BY TUCCRCCS
         ENTRY RCRDOUT                (TUCC EXIT
         ENTRY RNOTCCRD                 FOR CONTROL CARDS)
         ENTRY RPUT
         SPACE 1
* - - - - - - - - - - -   END RW00100A - - - - - - - - - - - -  TW00100
         SPACE 1
*<-------RESUME VANILLA HASPRDR  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.FOURTH  ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPRDR MODIFICATIONS.  PART 4 REPLACES LINE R0816000.             *
***********************************************************************
         SPACE 1
* + + + + + + + + + + + BEGIN RW00100B + + + + + + + + + + + +  TW00100
*
* TW00100      JULY 28, 1977      RDR CTL CARDS SEPARATE CSECT
*
*        INVOKE TUCCRCCS HERE FOR JCL COMMENT CARDS
*        SOME TUCC CTL CARDS ARE JCL COMMENTS
         SPACE 2
         BNE   RNOTJCMT           BIF NOT JCL COMMENT
         $LINK TUCCRCCS           INVOKE CTL CARD EXIT RTN
         B     RFLTEST            CONTINUE PROCESSING OF JCL COMMENT
RNOTJCMT DS    0H                 CONTINUE
* - - - - - - - - - - -   END RW00100B - - - - - - - - - - - -  TW00100
         SPACE 1
*<-------RESUME VANILLA HASPRDR  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.FIFTH   ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 5 FOLLOWS LINE U1240000.              *
***********************************************************************
         SPACE 1
* + + + + + + + + + + + BEGIN UW00110D + + + + + + + + + + + +  TW00110
*
* TW00110      JULY 29, 1977      USER PROCLIB
*
*        CHECK CONVERSION RETURN CODE TO DETERMINE IF USERPROC
*        DATASET WAS ENQUEUED. IF SO, HOLD THE JOB AND REQUE
*        IT FOR JCL CONVERSION.
         SPACE 1
         LA    WA,JCTCPENQ        ENQUED PROCLIB RET CODE
         C     WA,JCTCNVRC        WAS PROCLIB ENQUEUED?
         BNE   XCNOXEQ            BIF NOT
         OI    JQEFLAGS,QUEHOLDA  HOLD THE JOB IF ENQUE
         $WTO  PRENQMSG,L'PRENQMSG, SAY 'HELD FOR ENQ'                 C
               JOB=YES,ROUTE=$LOG+$MAIN,CLASS=$NORMAL
         LA    R0,$XEQ            JOB GOES BACK ON CONVERSION QUEUE
         B     XCQPUT2            GO REQUE JOB
         SPACE 1
PRENQMSG $MSG  701,'HELD FOR PROCLIB ENQUE'  PROCLIB ENQUED MSG
         SPACE 1
* - - - - - - - - - - -   END UW00110D - - - - - - - - - - - -  TW00110
         SPACE 1
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.SIXTH   ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 6 REPLACES LINE U1602000.             *
***********************************************************************
         L     R1,=A(XJSSNAME)    FIX ADDRESSABILITY W/LITERAL ADDR KHP
         MVC   0(4,R1),$SVSSNM    MOVE SUB-SYSTEM NAME TO DSNAME    KHP
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.SEVENTH ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 7 REPLACES LINES U1716000--U1867000.  *
***********************************************************************
         TITLE 'CONVERSION SUBTASK - ESTABLISH SPECIFIED USER PROCLIBS C
               - TUCC MOD TW00110'
* + + + + + + + + + + + BEGIN UW00110A + + + + + + + + + + + +  TW00110
*
* TW00110      JULY 29, 1977      USER PROCLIB
*
***********************************************************************
*                                                                     *
*        TUCC USER SPECIFIED PROCLIB                                  *
*                                                                     *
*        THE USER MAY SPECIFY A PROCLIB EITHER BY USE OF A            *
*        //*PROCLIB STATEMENT OR VIA THE JOBPARM STATEMENT.           *
*        ANY ONLINE DATASET MAY BE SPECIFIED VIA THE //*PROCLIB       *
*        STATEMENT; ONLY PREDEFINED PROCLIBS MAY BE SELECTED          *
*        BY JOBPARM.                                                  *
*        IF BOTH ARE SPECIFIED, THE //*PROCLIB DATASET                *
*        (CALLED USERPROC) IS CONCATENATED BEFORE THE JOBPARM         *
*        PROCLIB (DEFAULTS TO PROC00).                                *
*        THIS SECTION OF CODE:                                        *
*              1. ESTABLISHES PROCLIB FOR NEW JOB AS SPECIFIED IN     *
*                 THE JCT.                                            *
*              2. UNHOOKS PREVIOUSLY ALLOCATED USERPROC AND ALTERNATE *
*                 JOBPARM PROCS.                                      *
*                                                                     *
*        IF THE DYNAMIC ALLOCATION OF THE SPECIFIED USERPROC          *
*        IS FAILED FOR REASON 0210 (ENQUEUED DATASET),                *
*        THE JOB IS HELD, AND CONVERSION IS SKIPPED.                  *
*                                                                     *
*        NOTE THAT SOME OF THE DISTRIBUTED SOURCE IS ASSEMBLED        *
*        OUT VIA CONDITIONAL ASSEMBLY STATEMENTS!                     *
*                                                                     *
***********************************************************************
         SPACE 2
         CLI   JCTPROC,0          USERPROC REQUESTED?
         BNE   CLOSTST            BIF USERPROC SPECIFIED
         CLC   JPCEDDNM,JCTPROCN  IS JOBPARM PROCLIB SAME?
         BE    OPENCHK            EXIT IF SAME - NO CHANGE NEEDED
CLOSTST  TM    DCBOFLGS-DCBDSECT+JPCEPROC,DCBOFOPN  TEST OPEN STATUS
         BNO   XCNVPROC           BIF PROCLIB NOT OPEN
         SPACE 2
***********************************************************************
*                                                                     *
*        CLOSE OLD PROCLIB DATASET(S)                                 *
*                                                                     *
***********************************************************************
         SPACE 1
CLOSIT   CLOSE MF=(E,JPCEDCB)      CLOSE THE PROCLIB DATA SET
         SPACE 1
XCNVPROC MVC   DCBDDNAM-DCBDSECT+JPCEPROC,JCTPROCN  DDNAME TO DCB
         MVC   JPCEDDNM,JCTPROCN   SAVE NEW PROCLIB DDNAME
         CLI   JCTPROC,0          USER PROCLIB DESIRED?
         BE    OPENIT             BIF NOT TO OPEN PROCLIB
         SPACE 1
***********************************************************************
*                                                                     *
*        ALLOCATE AND CONCAT NEW USER PROCLIB                         *
*                                                                     *
***********************************************************************
         MVC   DCBDDNAM-DCBDSECT+JPCEPROC,=C'USERPROC' NEW DDN TO DCB
         MVC   UPROCDSN,JCTPROC   SET DSN FOR ALLOCATE
         MVC   JPCEDDNM,=C'USERPROC' REMEMBER DDNAME
         SPACE 1
         LA    R1,TXPTAL2         NOW BUILD REST OF ALLOCATE TEXT
         MVI   0(R1),0            REMOVE POSSIBLE END LIST POINTER
         CLI   JCTPROCV,0         WAS SER SPECIFIED?
         BE    CKPASWD            BIF NOT SPECIFIED
         MVC   UPROCSER,JCTPROCV  SET VOLSER TEXT
         LA    R2,TXTSER          --> SER TEXT
         ST    R2,4(R1)           ADD TO PARM LIST
         LA    R2,TXTUNIT         --> UNIT TEXT
         ST    R2,8(R1)           ADD UNIT TO PARM LIST
         LA    R1,8(R1)           STEP PAST SER AND UNIT
CKPASWD  CLI   JCTPROCP+1,0       WAS PASSWORD SPECIFIED?
         BE    TERMLIST           BIF NO PASSWORD
         LA    R2,TXTPASWD        --> PASSWORD TEXT
         ST    R2,4(R1)           ADD PW TEXT TO PARM LIST
         MVC   TXTPASWL(10),JCTPROCP SET PASSWORD AND ITS LENGTH
TERMLIST MVI   0(R1),X'80'        TERMINATE PARM LIST
         SPACE 1
         MVC   XCNVMSG(DYNMSGL),DYNERMSG SET POTENTIAL ERROR MSG
         LA    R1,RBPALOC         --> ALLOCATE RB POINTER
         DYNALLOC                 ALLOCATE USER PROCLIB
         LTR   R15,R15            ALLOCATE OK?
         BE    CONCAT             BIF ALLOCATED
         SPACE 1
         LA    R2,S99RSC+RBALOC-S99RB  GET ALLOC ERROR REASON
         CLC   =X'0210',0(R2)     IS USERPROC ENQUEUED?
         BNE   SETPRRC            BIF NOT
         MVC   JCTCNVRC,=A(JCTCPENQ) SET ENQ COMPLETION CODE
         MVI   UPROCDSN,0         SHOW NO USERPROC ALLOCATED
         B     XCNVWRAP           WRAPUP PROCESSING FOR NOW
*              JOB WILL BE HELD BY HASP CONVERSION PROCESSING FOR
*              LATER REPROCESSING VIA THE CONVERTER SUBTASK.
*              THE $AA (RELEASE ALL) COMMAND WILL RELEASE THE JOB
*              FOR REPROCESSING.
         SPACE 2
SETPRRC  OI    JCTJOBFL,JCTTSCAN  PREVENT EXECUTION OF JOB
         MVI   UPROCDSN,0         SHOW NO ALLOCATED USERPROC
         MVI   JCTPROC,0          FAKE NO USERPROC REQUESTED
         UNPK  XCNVMSG+DYNERRET(9),0(5,R2) MAKE DYNALLOC RETURN CODE
         TR    XCNVMSG+DYNERRET(8),HEXTAB  PRINTABLE
         MVI   XCNVMSG+DYNERRET+8,C' '  LAST CHAR NO GOOD
         WTO   MF=(E,XCNVMSG)     ISSUE PROPER ERROR MSG
         CLI   0(R2),X'17'        LOCATE ERROR?
         BNE   XCNVPROC           BIF NOT TO USE JOBPARM PROC/DEFAULT
         WTO   'TUCC USERPROC DATASET NOT FOUND',MCSFLAG=(HRDCPY)
         B     XCNVPROC           USE JOBPARM PROC OR DEFAULT
         SPACE 2
CONCAT   DS    0H                 CONCATENATE USERPROC/JOBPARM PROC
         MVC   UPROCONC,JCTPROCN  SET ALTERNATE PROC FOR CONCAT
         LA    R1,RBPCONC         --> CONCATENATE RB POINTER
         DYNALLOC                 CONCATENATE PROCLIBS
         LTR   R15,R15            CHECK RETURN
         BZ    OPENIT             BIF GOOD RETURN
         MVC   XCNVMSG+DYNERTYP(8),=C'CONCAT''N' CHG MSG TO CONCAT'N
         LA    R2,S99RSC+RBCONC-S99RB  GET CONCAT ERROR REASON
         LA    R1,RBPUNAL         --> UNALLOCATE RB POINTER
         DYNALLOC                 UNALLOCATE USERPROC
         B     SETPRRC            SET RETURN CODE AND CONTINUE
         SPACE 1
HEXTAB   EQU   *-C'0'             TRANS TAB ADR
         DC    C'0123456789ABCDEF'
         SPACE 1
***********************************************************************
*                                                                     *
*        O P E N   P R O C L I B   D A T A   S E T                    *
*                                                                     *
***********************************************************************
         SPACE 1
OPENCHK  TM    DCBOFLGS-DCBDSECT+JPCEPROC,DCBOFOPN  TEST OPEN STATUS
         BO    XCNVCNV            BIF ALREADY OPEN
OPENIT   DS    0H                 PROCLIB ESTABLISHED, OPEN NOW
         OPEN  MF=(E,JPCEDCB)      OPEN THE PROCLIB DATA SET
         LA    R2,JPCEPROC         ASSUME SUCCESSFUL OPEN
         ST    R2,NELPROCB-NELDSECT+JPCENEL  OF PROCLIB
         TM    DCBOFLGS-DCBDSECT+JPCEPROC,DCBOFOPN  TEST OPEN STATUS
         BO    XCNVALID            BR IF SUCCESSFUL
         SPACE 1
         MVI   JCTPROC,0          SHOW NO USERPROC DESIRED
         OI    JCTJOBFL,JCTTSCAN  PREVENT EXECUTION OF JOB
         MVC   XCNVMSG(XOPNERRL),XOPNERR  MOVE ERROR MESSAGE
         MVC   XCNVMSG+XOPNERRL-12(8),JPCEDDNM  FILL IN DDNAME
         WTO   MF=(E,XCNVMSG)      ISSUE MSG TO PROGRAMMER/OPERATOR
         MVI   JPCEDDNM,0          ENSURE NEXT JOB RE-OPENS PROCLIB
         XC    NELPROCB-NELDSECT+JPCENEL,NELPROCB-NELDSECT+JPCENEL
         B     XCNVCNV              AND GO TO CALL CONVERTER
         EJECT
***********************************************************************
*                                                                     *
*        V A L I D A T E   P R O C L I B   B L K S I Z E              *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVALID LH    R1,DCBBLKSI-DCBDSECT+JPCEPROC  GET PROCLIB BLKSIZE
         LTR   R1,R1               TEST FOR ZERO BLKSIZE
         BZ    XCNVBAD             BR IF SO
         LA    R3,80               LRECL REQUIRED BY CONVERTER
         CH    R3,DCBLRECL-DCBDSECT+JPCEPROC  TEST PROCLIB LRECL
         BNE   XCNVBAD             BR IF NOT VALID LRECL
         SLR   R0,R0               ZERO R0 FOR DIVIDE
         DR    R0,R3               DIVIDE BLKSIZE BY LRECL
         LTR   R0,R0               TEST FOR REMAINDER
         BZ    XCNVCNV             BR IF VALID LRECL AND BLKSIZE
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O C L I B   L R E C L / B L K S I Z E   I N V A L I D    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVBAD  MVC   XCNVMSG(XIOERRLN),XIOERROR  MOVE ERROR MESSAGE
         MVC   XCNVMSG+XIOERRLN-12(8),JPCEDDNM  FILL IN DDNAME
         WTO   MF=(E,XCNVMSG)      ISSUE MSG TO PROGRAMMER/OPERATOR
         MVI   JPCEDDNM,0          ENSURE NEXT JOB RE-OPENS PROCLIB
         XC    NELPROCB-NELDSECT+JPCENEL,NELPROCB-NELDSECT+JPCENEL
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        L I N K   T O   J C L   C O N V E R T E R                    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVCNV  L     WB,JPCEIOT          GET ADDRESS OF 1ST IOT
         STM   WB,WC,XIOTADDR      SAVE FOR INTERNAL TEXT EXIT
         L     R15,XCNVRTER        GET ADDRESS OF OS JCL CONVERTER
         CALL  (15),MF=(E,JPCENEL)  AND LINK TO IT
         ST    R15,JCTCNVRC        SAVE CONVERTER RETURN CODE
         LA    R0,JCTCIO           TEST FOR SUCCESSFUL
         CLR   R0,R15               JCL CONVERSION
         BH    UNALCHK             BR IF YES                         R4
         MVI   JPCEDDNM,0           ELSE INSURE PROCLIB RE-OPENED
         SPACE 2
UNALCHK  CLI   UPROCDSN,0         IS USERPROC ALLOCATED?
         BE    XCNVWRAP           BIF NOT ALLOCATED
         EJECT
***********************************************************************
*                                                                     *
*        CLOSE AND UNALLOCATE OLD USER PROCLIB                        *
*                                                                     *
***********************************************************************
         SPACE 1
         CLOSE MF=(E,JPCEDCB)     CLOSE PROCLIB FOR UNALLOCATE
         SPACE 2
         LA    R1,RBPUNAL         --> UNALLOCATE RB POINTER
         DYNALLOC                 UNALLOCATE USER PROCLIB
         MVI   UPROCDSN,0         SHOW USERPROC UNALLOCATED
         SPACE 1
         B     XCNVWRAP           GO WRAPUP CONVERSION PROCESSING
         EJECT
***********************************************************************
*                                                                     *
*                       DYNAMIC ALLOCATION CONTROL BLOCKS             *
*                                                                     *
*        DYNAMIC ALLOCATION RB POINTERS, RB'S, TXT POINTERS           *
*        AND TEXT STRINGS FOR USER PROCLIB ALLOCATION,                *
*        CONCATENATION, AND UNALLOCATION.                             *
*                                                                     *
***********************************************************************
         SPACE 1
*              UNALLOCATE
*
RBPUNAL  DC    0F'0',X'80',AL3(RBUNAL)
*
RBUNAL   DC    AL1(20,S99VRBUN,0,0)
         DC    AL2(0,0)
         DC    A(TXPTUN,0,0)
*
TXPTUN   DC    X'80',AL3(TXTDDN)  --> ALLOCATED DDNAME
         SPACE 2
*              ALLOCATE
*
RBPALOC  DC    0F'0',X'80',AL3(RBALOC)
*
RBALOC   DC    AL1(20,S99VRBAL,S99NOMNT,0)
         DC    AL2(0,0)
         DC    A(TXPTAL,0,0)
*
TXPTAL   DC    A(TXTDDN,TXTDSN,TXTBLKS,TXTDISP)
TXPTAL2  DC    A(TXTINOUT,0,0,0)  ROOM FOR PW, SER AND UNIT
*
TXTDDN   DC    AL2(DALDDNAM,1,8),CL8'USERPROC'  DDNAME
TXTDSN   DC    AL2(DALDSNAM,1,44)               DSNAME TEXT
UPROCDSN DC    CL44' '                          DSNAME
TXTUNIT  DC    AL2(DALUNIT,1,4),C'DISK'         UNIT
TXTSER   DC    AL2(DALVLSER,1,6)                VOLSER TEXT
UPROCSER DC    CL6' '                           VOL SER
TXTDISP  DC    AL2(DALSTATS,1,1),X'08'          DISP=SHR
TXTBLKS  DC    AL2(DALBLKSZ,1,2,4240)           BLKSIZE=4240
TXTPASWD DC    AL2(DALPASSW,1)                  PASSWORD TEXT
TXTPASWL DC    AL2(*-*),CL8' '                  LENGTH AND PASSWORD
TXTINOUT DC    AL2(DALINOUT,1,1),X'80'          INPUT ONLY
*
         SPACE 2
*              CONCATENATE
*
RBPCONC  DC    0F'0',X'80',AL3(RBCONC)
*
RBCONC   DC    AL1(20,S99VRBCC,0,0)
         DC    AL2(0,0)
         DC    A(TXPTCONC,0,0)
*
TXPTCONC DC    X'80',AL3(TXTCONC)
*
TXTCONC  DC    AL2(DALDDNAM,2,8),CL8'USERPROC',AL2(8)
UPROCONC DC    CL8'PROC00'        CONCATENATED PROC DDNAME
*
         SPACE 2
         PRINT NOGEN              DONT WANT TO SEE EXPANSIONS
         IEFZB4D0                 SYMBOLS NEEDED FOR DYNAMIC ALLOCATION
         IEFZB4D2                  UNALLOCATION, AND CONCATIONATION
         PRINT GEN
HASPXEQ  CSECT
*
*        DYNALLOC ERROR MESSAGE
*
DYNERMSG WTO   'TUCC USERPROC DYNAMIC ALLOCATE ERROR CODE 12345678 ',  C
               MCSFLAG=(HRDCPY),MF=L
DYNMSGL  EQU   *-DYNERMSG         MSG LENGTH
DYNERTYP EQU   4+22               "ALLOCATE" OR "CONCAT" ERROR
DYNERRET EQU   DYNERTYP+20        DYNALLOC RETURN CODE DISPLACEMENT
         DS    0H
*
*
*        NOW DELETE STOCK JES2 ALTERNATE PROCLIB PROCESSING BY
*        USE OF THE CONDITIONAL ASSEMBLY (AGO) STATEMENT
*
* - - - - - - - - - - -   END UW00110A - - - - - - - - - - - -  TW00110
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK MAC
               IN PROCESSING'
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.EIGHTH ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 7 FOLLOWS LINE U1932000.              *
***********************************************************************
         SPACE 1
* + + + + + + + + + + + BEGIN UW00110B + + + + + + + + + + + +  TW00110
*
* TW00110      JULY 29, 1977      USER PROCLIB
*
***********************************************************************
*                                                                     *
*        UNALLOCATE USERPROC IF ALLOCATED                             *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   UPROCDSN,0         IS THERE A CURRENT USERPROC?
         BNE   NOUPROC            BIF NOT
         LA    R1,RBPUNAL         --> UNALLOCATE RB POINTER
         DYNALLOC                 UNALLOCATE
         XC    UPROCDSN,UPROCDSN  SHOW NO USERPROC
         XC    UPROCSER,UPROCSER   DSN OR SERIAL
         SPACE 1
NOUPROC  DS    0H
* - - - - - - - - - - -   END UW00110B - - - - - - - - - - - -  TW00110
         SPACE 1
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.NINTH   ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 8 REPLACES LINE U2044000.             *
***********************************************************************
         BAL   XL1,UNALCHK        WRAP UP SUBTASK               TW00110
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEXIT
.TENTH   ANOP
***********************************************************************
*  KHPRDC IMPLEMENTATION OF TUCC //*PROCLIB MODIFICATION.             *
*  HASPXEQ MODIFICATIONS.  PART 9 FOLLOWS LINE U2075000.              *
***********************************************************************
         LTORG ,                  MUST HAVE ADDRESSABILITY      TW00110
*<-------RESUME VANILLA HASPXEQ  CODE AT THIS POINT-------------->* KHP
***********************************************************************
         MEND
./ ADD NAME=$SCAN
         MACRO  -- $SCAN JCL MACRO --
&NAME    $SCAN &DATA,&LENGTH,&NONE,&SPACE,&COMMA,                      *
               &LPAR,&RPAR,&QUOTE,&BADCHAR,&TABLE=,&VCON=,&DEFAULT=
         LCLA  &L
         LCLC  &CS
         LCLC  &DF
&DF      SETC  'SCAN&SYSNDX'
         AIF   (T'&DEFAULT EQ 'O').NODF
&DF      SETC  '&DEFAULT'
.NODF    AIF   (T'&TABLE NE 'O').SCT
&CS      SETC  '$SCANTBL'
         AGO   .CKL
.SCT     ANOP
&CS      SETC  '&TABLE'
.CKL     AIF   (T'&LENGTH EQ 'O').NOL
&L       SETA  &LENGTH
         AGO   .LSET
.NOL     ANOP
&L       SETA  L'&DATA
.LSET    ANOP
&NAME    SR    R2,R2              CLEAR REGISTER FOR TRT
         AIF   (T'&DATA EQ 'O').NODA
         LA    R1,&DATA           POINT TO DATA
.NODA    AIF   (T'&VCON EQ 'O').CKCSN
         AIF   ('&VCON' EQ 'YES').GVCON
         AGO   .NOVCON
.CKCSN   AIF   ('&SYSECT' EQ 'TUCCRCCS').NOVCON
.GVCON   L     R15,=V(&CS)        XLATE TABLE ADR
         TRT   0(&L,R1),0(R15)    SCAN THE TABLE
         AIF   (T'&TABLE NE 'O').NSPC
         AGO   .BRT
.NOVCON  TRT   0(&L,R1),&CS       SCAN THE TABLE
         AIF   (T'&TABLE NE 'O').NSPC
.BRT     B     *+4(R2)            TAKE BRANCH TABLE
         AIF   (T'&NONE EQ 'O').NONONE
         B     &NONE                 BR FOR NONE
         AGO   .ANONE
.NONONE  B      &DF                  NONE NOT DEFINED
.ANONE   AIF   (T'&SPACE EQ 'O').NOSPACE
         B     &SPACE                 BR FOR SPACE
         AGO   .ASPACE
.NOSPACE B      &DF                   SPACE NOT DEFINED
.ASPACE  AIF   (T'&COMMA EQ 'O').NOCOMMA
         B     &COMMA                 BR FOR COMMA
         AGO   .ACOMMA
.NOCOMMA B      &DF                   COMMA NOT DEFINED
.ACOMMA  AIF   (T'&LPAR EQ 'O').NOLPAR
         B     &LPAR                 BR FOR LPAR
         AGO   .ALPAR
.NOLPAR  B      &DF                  LPAR NOT DEFINED
.ALPAR   AIF   (T'&RPAR EQ 'O').NORPAR
         B     &RPAR                 BR FOR RPAR
         AGO   .ARPAR
.NORPAR  B      &DF                  RPAR NOT DEFINED
.ARPAR   AIF   (T'&QUOTE EQ 'O').NOQUOTE
         B     &QUOTE                 BR FOR QUOTE
         AGO   .AQUOTE
.NOQUOTE B      &DF                   QUOTE NOT DEFINED
.AQUOTE  AIF   (T'&BADCHAR EQ 'O').NOBAD
         B     &BADCHAR             BR FOR BADCHAR
.NOBAD   B     &DF                BAD CHAR NOT DEFINED
         AIF   (T'&DEFAULT NE 'O').XIT
&DF      DS    0H
.XIT     MEXIT
.NSPC    AIF   (T'&NONE EQ 'O').NONB
         BZ    &NONE              BIF DELIMITER NOT FOUND
.NONB    ANOP
         MEND
./       ADD   NAME=TUCCRCCS      /* RDR CONTROL CARD SCAN ROUTINE   */
RCCS     TITLE 'TUCC RDR CONTROL CARD SCAN ROUTINE'
* TW00100      JULY 28, 1977      RDR CTL CARDS SEPARATE CSECT
*
* ---->  THIS CSECT INSTALLED BY KHPRDC MODIFICATION JE00018
*        FOR KAISER FOUNDATION HEALTH PLAN IMPLEMENTATION
*        OF TUCC //*PROCLIB USER PROCLIBS MODIFICATION.
*
*        CSECT "TUCCRCCS" $LINK-ED TO INSTEAD OF "HASPRCCS" TO
*        PROCESS /* CONTROL CARDS IN HASPRDR. IT MAY THEN GIVE
*        CONTROL TO HASPRCCS OR RETURN DIRECTLY. HASPRDR
*        ALSO CHANGED TO MAKE ENTRY POINTS OF LOCATIONS NEEDED
*        FOR RETURN FROM TUCCRCCS. MODS IN HASPRDR AND TUCCRCCS.
*        IN ADDITION, JCL COMMENT CARDS ARE PASSED TO THIS
*        ROUTINE FOR SIMILIAR SCANNING. THE RETURN RTN AT
*        RETRCCS DETERMINES WHETHER TO EXIT TO HASPRCCS OR
*        BACK TO JCL COMMENT CARDS.
*
TUCCRCCS CSECT
         PRINT OFF
         COPY  $HASPGEN
         $HCT
         $PCE
         $RDRWORK
         $BUFFER
         $JCT
         $JQE
         $LRC
         PRINT ON
         TITLE 'HASP INPUT SERVICE -- CONTROL CARD SCAN TABLE DSECT'
RSCANTBL DSECT                     CONTROL CARD SCAN TABLE DSECT
RSCANAME DS    CL7                 KEYWORD NAME (7 CHARACTERS MAX)
RSCANABR DS    C                   KEYWORD ABREVIATION (1 CHARACTER)
RSCANFLG DS    X                   KEYWORD VALUE FLAGS
RSCFLCOM EQU   B'10000000'              MASK IS COMPLEMENTED
RSCFLNUM EQU   B'10000000'              VALUE MUST BE NUMERIC
RSCFLBIN EQU   B'01000000'              CONVERT VALUE TO BINARY
RSCFLEFT EQU   B'00100000'              LEFT ADJUST VALUE
RSCFLBLK EQU   B'00010000'              BLANK-FILL VALUE
RSCFLPCT EQU   B'00001111'              MAXIMUM NUMBER OF VALUES
RSCANMSK DS    0X                  KEYWORD MASK
RSCANLEN DS    AL1                 KEYWORD VALUE LENGTH
RSCANDSP DS    AL2                 KEYWORD VALUE DISPLACEMENT
RSCANEXT DS    0F                  ADDRESS OF NEXT TABLE ENTRY
TUCCRCCS CSECT                     END OF CONTROL CARD SCAN DSECT
         TITLE 'HASP INPUT SERVICE PROCESSOR'
*
*                             READER REGISTER DEFINITIONS
*
         SPACE 3
RW       EQU   WA                  WORK REGISTER
RBI      EQU   WB                  INPUT BUFFER
RPI      EQU   WC                  INPUT POINTER                     R4
RL1      EQU   WD                  INTERNAL LINK REGISTER 1          R4
RL2      EQU   WE                  INTERNAL LINK REGISTER 2          R4
RBASE2   EQU   WF                  INPUT SERVICE BASE REGISTER       R4
         SPACE 4
*
*                             READER BUFFER DEFINITIONS
*
         SPACE 3
RBUFTRK  EQU   HDBNXTRK-BUFDSECT   BUFFER CHAIN TRACK DISPLACEMENT
*                                  INPUT BUFFER START DISPLACEMENT
ROBUFST  EQU   HDBSTART-BUFDSECT   OUTPUT BUFFER START DISPLACEMENT
         SPACE 4
*
*                             MISCELLANEOUS DEFINITIONS
*
         SPACE 3
*                               RDRSW                                R4
RJFLUSH  EQU   X'01'               JOB FLUSH SWITCH
RNOSCAN  EQU   X'02'               NO CARD SCAN SWITCH
RDREOFSW EQU   X'04'               END-OF-FILE SWITCH
RJCLSW   EQU   X'08'               JOB CONTROL LANGUAGE SWITCH
RSYSINSW EQU   X'10'               GENERATED DD * PROCESSING SWITCH
RXBJOBSW EQU   X'20'               XEQ BATCH CLASS JOB SWITCH
RUNIEXCP EQU   X'01'               UNIT EXCEPTION BIT
*                               RDRSW2                               R4
RJCLH    EQU   X'01'               TYPRUN=JCLHOLD                    R4
*                                                                    R4
RSIOCSWS EQU   X'10'               SIO CSW STORED BIT
RSIOCC   EQU   X'30'               SIO COMPLETION CODE BITS
RDLMSKIP EQU   LRC1RSV7            DLM TEST BYPASS SWITCH            R4
         TITLE 'TUCC RDR CONTROL CARD SCAN ROUTINE'
TUCCRCCS $ENTRY CSECT=YES         DEFINE ENTRY POINT
         USING JCTDSECT,JCT
         SPACE 5
*
*                             DETERMINE TYPE OF CONTROL CARD
*
         SPACE 3
         LA    RW,RCCTAB           GET ADDR OF CONTROL CARD CODE TABLE
         LA    R14,12 GET LENGTH OF EACH ENTRY
         LA    R15,RCCTBEND-1      GET END OF CODE TABLE
         SPACE 1                                                     R4
RCCSERCH IC    R1,0(,RW)           GET LENGTH OF CODE WORD
         EX    R1,RCCTBCLC         COMPARE CODE WORD
         BE    RCNTLCRD            BRANCH IF TABLE ENTRY FOUND
         BXLE  RW,R14,RCCSERCH     TRY AGAIN
         SPACE 2                                                     R4
RCNTLCRD L     RL1,0(,RW)          GET ADDRESS FROM CODE TABLE
         BR    RL1                 GO TO APPROPRIATE PROCESSING ROUTINE
         SPACE 5
RCCTBCLC CLC   4(*-*,RW),2(RPI)    TABLE COMPARE INSTRUCTION
         SPACE 3
RCCTAB   DS    0F                  CONTROL CARD ROUTING TABLE
*        DC    AL1(0),AL3(RCOMCARD),CL8'$'        HASP COMMAND CARD
*        DC    AL1(7),AL3(RJBPCARD),CL8'JOBPARM'  HASP JOBPARM CARD
*        DC    AL1(7),AL3(RMSGCARD),CL8'MESSAGE'  HASP MESSAGE CARD
*        DC    AL1(6),AL3(ROTPCARD),CL8'OUTPUT'   HASP OUTPUT CARD
*        DC    AL1(7),AL3(RPRICARD),CL8'PRIORITY' HASP PRIORITY CARD
*        DC    AL1(5),AL3(ROUTCARD),CL8'ROUTE'    HASP ROUTE CARD
*        DC    AL1(5),AL3(RSETCARD),CL8'SETUP'    HASP SETUP CARD
         DC    AL1(7),AL3(PROCLIB),CL8'*PROCLIB'  PROCLIB       TW00110
RCCTBEND DC    A(RETRCCS)         END OF CONTROL CARD CODE TABLE
         SPACE 5
***********************************************************************
*                                                                     *
*        ACCESS TO VARIOUS POINTS IN HASPRDR                          *
*                                                                     *
***********************************************************************
         SPACE 2
RCRDOUT  L     R15,=V(RCRDOUT)    RETURN ADR
         BR    R15                RETURN
         SPACE 2
RNOTCCRD L     R15,=V(RNOTCCRD)   RETURN ADR
         BR    R15                RETURN
         SPACE 2
RNXTCRD  L     R15,=V(RNXTCRD)    RETURN ADR
         BR    R15                ERETURN
         SPACE 2
RPUT     L     R15,=V(RPUT)       OUTPUT ROUTINE ADR
         BR    R15                GO DO OUTPUT
*              REG RL1 MUST BE SET FOR RETURN FROM RPUT
         SPACE 2
         EJECT
***********************************************************************
*                                                                     *
*        EXIT TO STANDARD HASPRCCS ROUTINE                            *
*              OR CONTINUE JCL COMMENT PROCESSING                     *
*                                                                     *
***********************************************************************
         SPACE 2
RETRCCS  DS    0H                 RETURN TO HASPRCCS ROUTINE
         L     LINK,PCERETN       RESTORE RETURN ADR
         CLI   1(RPI),C'*'        HASP CTL OR JCL COMMENT?
         BNER  LINK               RETURN IF JCL COMMENT
         L     BASE3,=V(HASPRCCS) GET ENTRY POINT
         BR    BASE3              PASS ON
         SPACE 3
***********************************************************************
*                                                                     *
*        TRANSLATE TABLE FOR $SCAN MACRO                              *
*                                                                     *
*        TRANSLATE AND TEST TABLE IS SET FOR $SCAN MACRO.             *
*        NON-ZERO ARGUMENTS ARE DEFINED FOR JCL AND CONTROL           *
*        CARD CONTROL CHARACTERS.                                     *
*                                                                     *
*        ARGUMENTS OF X'24' ARE BAD CHARACTERS IN JCL.                *
*        OTHER "STOP" CHARACTERS ARE:                                 *
*              4 - BLANK                                              *
*              8 - COMMA                                              *
*              12 - LEFT PAREN                                        *
*              16 - RIGHT PAREN                                       *
*              20 - SINGLE QUOTE                                      *
*              28 - SLASH (/) USED TO DENOTE PASSWORD BEGINNING       *
*                                                                     *
***********************************************************************
         SPACE 2
         ENTRY $SCANTBL
$SCANTBL DS    0C
*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
 DC AL1(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24)   00
 DC AL1(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24)   10
 DC AL1(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24)   20
 DC AL1(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24)   30
 DC AL1(04,24,24,24,24,24,24,24,24,24,00,00,00,12,00,00)   40
 DC AL1(00,24,24,24,24,24,24,24,24,24,24,00,00,16,00,00)   50
 DC AL1(00,28,24,24,24,24,24,24,24,24,24,08,00,00,00,00)   60
 DC AL1(24,24,24,24,24,24,24,24,24,24,00,00,00,20,00,00)   70
 DC AL1(24,00,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   80
 DC AL1(24,00,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   90
 DC AL1(24,24,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   A0
 DC AL1(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24)   B0
 DC AL1(24,00,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   C0
 DC AL1(24,00,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   D0
 DC AL1(00,24,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   E0
 DC AL1(00,00,00,00,00,00,00,00,00,00,24,24,24,24,24,24)   F0
         SPACE 2
*              TRANSLATE TABLE FOR FINDING NON-BLANK
         ENTRY $SCANSP
$SCANSP  DC 64X'4',X'0',191X'4'
*              TRANSLATE TABLE FOR FINDING COMMA OR SPACE
         ENTRY $SCANCSP
$SCANCSP DC    256X'00' COMMA AND SPACE TRANSLATE TABLE
         ORG   $SCANCSP+C' '      SPACE
         DC    X'04'
         ORG   $SCANCSP+C','      COMMA
         DC    X'08'
         ORG
         TITLE 'USER PROCLIB CONTROL CARD PROCESSING - TW00110' TW00110
****************************************************************TW00110
*                                                               TW00110
*        //*PROCLIB=DATA-SET-NAME < ,VOL=VOLUME-SERIAL >        TW00110
*                                                               TW00110
*        USER PROCLIB DATA SET NAME IS CAPTURED AND             TW00110
*        STORED IN THE JCT. IF THE OPTIONAL VOLUME SERIAL       TW00110
*        IS PRESENT, IT IS CAPTURED AS WELL.                    TW00110
*                                                               TW00110
****************************************************************TW00110
         SPACE 2                                                TW00110
PROCLIB  DS    0H                 PROCESS USER PROCLIB STATEMENTTW00110
         LTR   JCT,JCT            TEST FOR JOB                  TW00110
         BZ    RNOTCCRD           IGNORE IF NOT IN JOB          TW00110
         $SCAN 11(RPI),45,,PRDSN,PRDSN,DEFAULT=PRBAD FIND DSN   TW00110
         B     PRDSN              BR FOR SLASH                  TW00110
         SPACE 2                                                TW00110
*              BAD PROCLIB NAME                                 TW00110
         SPACE 1                                                TW00110
PRBAD    DS    0H                 BAD PROCLIB STATEMENT         TW00110
         BAL   RL1,RPUT           ADD PROCLIB TO JCL DATASET    TW00110
         MVC   3(77,RPI),2(RPI)   PROPOGATE *                   TW00110
         MVC   6(21,RPI),=C'BAD PROCLIB STATEMENT' ERROR MSG    TW00110
         OI    JCTJOBFL,JCTTSCAN  FORCE 'SCAN' ONLY             TW00110
         XC    JCTPROC,JCTPROC    SHOW NO USER PROC             TW00110
         B     RCRDOUT            OUTPUT ERR MSG, CONTINUE      TW00110
         SPACE 2                                                TW00110
PRDSN    DS    0H                 PROCLIB DSN FOUND             TW00110
*              SAVE DSNAME IN JCT                               TW00110
         SPACE 1                                                TW00110
         LA    RW,11(RPI)         CALCULATE                     TW00110
         SR    RW,R1               LENGTH                       TW00110
         LCR   RW,RW                OF DSNAME                   TW00110
         BNP   PRBAD              MUST BE POSITIVE LENGTH       TW00110
         SPACE 2                                                TW00110
         MVI   JCTPROC,C' '       PRE-BLANK                     TW00110
         MVC   JCTPROC+1(43),JCTPROC  JCT PROCLIB NAME          TW00110
         BCTR  RW,0               - 1 FOR MVC                   TW00110
         EX    RW,PRMDSN          MOVE DSN TO JCT               TW00110
         SPACE 2                                                TW00110
*              CHECK ADDITIONAL PARMS ON STATEMENT              TW00110
         SPACE 1                                                TW00110
         CLI   0(R1),C'/'         WAS PASSWORD SPECIFIED?       TW00110
         BNE   PRCKSER            BIF NOT                       TW00110
         LA    RL1,1(R1)          --> BEGINNING OF PASSWORD     TW00110
         $SCAN 0(RL1),9,PRBAD,TABLE=$SCANCSP FIND SP OR COMMA   TW00110
         SPACE 1                                                TW00110
PRPW     LR    RW,RL1             SAVE BEGIN PASSWORD POINTER   TW00110
         SR    RW,R1              CALCULATE LENGTH              TW00110
         LCR   RW,RW               OF PASSWORD                  TW00110
         STH   RW,JCTPROCP        SAVE LENGTH IN JCT            TW00110
         BNP   PRCKSER            BIF LENGTH NOT > 0            TW00110
         BCTR  RW,0               - 1 FOR MVC                   TW00110
         EX    RW,PRMPW           MOVE PASSWORD TO JCT          TW00110
         MVI   0(RL1),C'X'        'X' OUT PASSWORD FOR SECURITY TW00110
         BCTR  RW,0               - 1 MORE FOR PROPOGATION      TW00110
         LTR   RW,RW              DO WE NEED MORE X'S ?         TW00110
         BM    PRCKSER            BIF 1 CHAR PASSWORD           TW00110
         EX    RW,PRXPW           'X' OUT REST OF PASSWORD      TW00110
         SPACE 1                                                TW00110
PRCKSER  CLI   0(R1),C','         IS THERE ANOTHER PARM?        TW00110
         BNE   RCRDOUT            PROCESS NXT CARD IF NOT       TW00110
         CLC   =C'VOL=',1(R1)     IS VOL= PARM PRESENT?         TW00110
         BNE   PRBAD              BIF NOT                       TW00110
         MVC   JCTPROCV,5(R1)     VOLSER TO JCT                 TW00110
         B     RCRDOUT            READ NEXT CARD                TW00110
         SPACE 2                                                TW00110
PRMDSN   MVC   JCTPROC(*-*),11(RPI)  *** EXECUTED ***           TW00110
PRMPW    MVC   JCTPROCW(*-*),0(RL1)  *** EXECUTED ***           TW00110
PRXPW    MVC   1(*-*,RL1),0(RL1)     *** EXECUTED ***           TW00110
         LTORG
         END
