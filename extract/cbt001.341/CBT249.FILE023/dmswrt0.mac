WRT0     TITLE 'D M S W R T 0  DMS OUTPUT SAVE ROUTINE'
* * * * * * * * * * * * * * * * * * * * *
*                                       *
*              D M S W R T 0            *
*                                       *
* * * * * * * * * * * * * * * * * * * * *
         SPACE
* FUNCTION - OPERATION
*         THIS ROUTINE IS THE NORMAL OS-TASK WRITE ROUTINE.
*         IT CHECKS ALSO FOR OPERATOR STOP- AND MODIFY COMMANDS.
*         THE SYNCHRONISATION WITH THE DMSMNTR MONITOR ROUTINE
*         IS TAKEN WITH XMPOST FROM THE MONITOR AND WAIT FROM THIS
*         ROUTINE.
*         THE SYNCHRONISATION EVENT IS A COMPLETED SERIAL-CPU-PAGE
*         BUFFER.
* INPUT
*         POSTED SERIAL-CPU-PAGE BUFFER.
*         POSTED COMMUNICATION ECB FROM A START- OR MODIFY COMMAND.
* OUTPUT
*        CONTINOUSLY WRITTEN OUTPUT BLOCKS TO THE I/O DEVICE
*         A MAGNENTIC TAPE DRIVE.
* CALLER
*         DMSWRT0 RECEIVES CONTROL FROM THE DMSROT0 ROUTINE
* RETURN
*         BACK TO CALLER
         EJECT
         PRINT ON,NOGEN
         DMSMACRO
         PRINT ON,NOGEN
         SPACE
DMSWRT0  PGMSTART
         LA    R1,TRACEOUT
         MVC   DCBDDNAM(8),POUTDD       SET DDNAME
         OPEN  (TRACEOUT,OUTPUT)
         LA    R1,TRACEOUT
         TM    DCBOFLGS,16              OPEN OK
         BZ    WRTMSG22                 NO, GO
         L     R2,DMSLNGT               GET PARM LNGT
         LA    R2,20(0,R2)              ADD PREFIX
         LR    R7,R2                    SAVE THE BUFFER LNGT
         GETMAIN R,LV=(R2)
         LR    R6,R1                    SAVE THE BUFFER ADDRESS
         LR    R3,R2
         SLL   R3,16
         ST    R3,0(0,R1)               SET BLOCK LNGT = LRECL
         SH    R2,=H'4'
         LR    R3,R2
         SLL   R3,16
         ST    R3,4(0,R1)               SET RECORD LNGT
         XC    8(4,R1),8(R1)            CLEAR RECID & RECNR
         STCK  DMSEDTSC                 ACTUAL TIME
         MVC   12(8,R1),DMSEDTSC        SET TOD CLOCK
         LA    R2,20(0,R1)              -> FIRST DATA BYTE
         LA    R4,DMSCONST              FROM ->
         L     R3,DMSLNGT               DATA
         LR    R5,R3                    LENGTH
         MVCL  R2,R4                    MOVE THE TEXT.
         LR    R0,R1
         PUT   TRACEOUT,(R0)            WRITE THE SELECTION BUFFER
WRT001   FREEMAIN R,A=(R6),LV=(R7)      FREE THE BUFFER
         L     R8,DMSCECBP              -> COMM ECB
         STCM  R8,7,WRTCECBA            TO ECBLIST
         LA    R8,BUFFECB               -> BUFFER ECB
         ST    R8,WRTECBL               TO ECBLIST
         XC    TIMEECB(4),TIMEECB       CLEAR THE TIMER ECB
         ST    DMSREG,WRTREGSV          SET -> TO CONST FOR TIMER EXIT
         STIMER REAL,WRTIMEXT,BINTVL=WRTIME
         XC    DMSLSTEV(4),DMSLSTEV     CLEAR LOST EVENT COUNT
         OI    STARTFL2,STARTGO         ACTIVATE TRACE
WRT002   XC    BUFFECB(4),BUFFECB       CLEAR THE BUFFER ECB
WRT004   L     R2,DMSWRBUF              -> CURRENT OUTPUT BUFFER
         NI    STARTFL2,ALLBIT-DMSPDONE ALLOW POST TO BE ENTERED AGAIN
         USING BUFFER,R2
WRT007   TM    BFRFLG,BFRFULL           IS BUFFER TO BE WRITTEN OUT
         BZ    WTRWAIT                  NO, GO
         LA    R3,BFRLNGT               TO VARIABLE RECORD
         L     R5,BFRLNGT               LENGTH OF BLOCK
         LTR   R5,R5
         BNP   WTR003                   GO IF EMPTY
         LA    R5,4(0,R5)               INCREMENT BY LNGT FIELD
WTR002   SLL   R5,16                    MAKE IT A VARIABLE RECORD
         ST    R5,BFRLNGT               MAKE IT VARIABLE
         BAL   R9,WTROUT
WTR003   XC    BFRLNGT(4),BFRLNGT       CLEAR LENGTH
         L     R5,BFRNEXT               CHAIN NEXT
         ST    R5,DMSWRBUF              BUFFER
         NI    BFRFLG,ALLBIT-BFRFULL    CLEAR BUFFER FULL
         L     R2,DMSCECBP              -> COMM ECB                  RC
         TM    0(R2),X'40'              HAS IT BEEN POSTED           RC
         BZ    WRT004                   NO,CONTINUE                  RC
         OI    DMSFUNCT,DMSSTOP         YES,STOP DMS                 RC
         B     WRT004                   CHECK NEXT
         SPACE 3
WTRWAIT  SLR   R1,R1                    CHECK
         CL    R1,DMSLSTEV              AND
         BE    WTR005                   WRITE
         TM    WRTFLAG,LOSTMSG          LOST EVENT
         BO    WTR005                   MSG
         MESSAGE 023                    LOST EVENT
         OI    WRTFLAG,LOSTMSG          MSG WRITTEN
WTR005   TM    DMSFUNCT,DMSSTOP+DMSEOJ  STOP REQUEST
         BNZ   WTRRET0                  YES, GO
         WAIT  1,ECBLIST=WRTECBL        WAIT FOR CMD OR BUFFER
         TM    BUFFECB,64               BUFFER
         BO    WRT002   YES, PROCESS
         TM    TIMEECB,64               IS CONTROL TIME REACHED
         BO    WRT010                   YES, PROCESS IT
         EXTRACT WRTWORK,FIELDS=(COMM)
         L     R8,WRTWORK
         L     R7,4(0,R8)               -> CIB
         CLC   CIBCLGTH+2(4),=C'DUMP'
         BNE   WTR006
         OI    DMSFUNCT,DMSEOJ+DMSTEST
         MVI   DMSRETCD,4
WTR006   OI    DMSFUNCT,DMSSTOP
         TIME  DEC                      FORCE INTERRUPT
         B     WRT004                   CHECK THE BUFFERS
WRT010   XC    TIMEECB(4),TIMEECB       CLEAR THE ECB
         STIMER REAL,WRTIMEXT,BINTVL=WRTIME
         B     WRT004                   CHECK FOR THE OTHER EVENTS
         SPACE 3
WRTMSG22 MESSAGE 022
         OI    DMSFUNCT,DMSEOJ+DMSSTOP
         B     WTRRET01                                              RP
         SPACE 3
WTROUT   PUT   TRACEOUT,(R3)            WRITE A RECORD
         BR    R9
         SPACE 3
WTRRET0  L     R2,DMSLNGT               LENGTH OF DMSMACRO
         LA    R2,20(R2)                INCREASE FOR PREFIX
         LR    R7,R2                    SAVE BUFFER LENGTH
         GETMAIN R,LV=(R2)              GET BUFFER
         LR    R6,R1                    SAVEE STORAGE GOTTEN
         LR    R3,R2
         SLL   R3,16
         ST    R3,0(0,R1)               SET BLOCK LENGTH
         SH    R2,=H'4'                 RECORD IS -4
         LR    R3,R2
         SLL   R3,16
         ST    R3,4(R0,R1)              SET RECORD LENGTH
         XC    8(4,R1),8(R1)            SET RECORD ID 0
         STCK  DMSEDTPC                 SET TOD CLOCK
         MVC   12(8,R1),DMSEDTPC
         LA    R2,20(R0,R1)             FIRST BYTE
         LR    R4,DMSREG
         L     R3,DMSLNGT
         LR    R5,R3
         MVCL  R2,R4                    MOVE TO RECORD
         LR    R0,R1
         PUT   TRACEOUT,(R0)            WRITE CONST
         FREEMAIN R,A=(R6),LV=(R7)      FREE BUFFER
         CLOSE (TRACEOUT,REREAD)
*        FREEPOOL TRACEOUT
WTRRET01 NI    STARTFL2,ALLBIT-STARTGO  DEACTIVATE TRACE DATA SAVE   RP
         MESSAGE 024                    NA OF LOST EVENTS
         L     R1,DMSLSTEV
         CVD   R1,WRTWORK
         UNPK  WRTMSG24(8),WRTWORK(8)
         OI    WRTMSG24+7,240
         PRINTER WRTLINE,CONSOLE=ON
         MESSAGE 019                    HIGHEST RECORD NUMBER
         UNPK  WRTMSG24(9),DMSSEQCT(5)
         TR    WRTMSG24(8),WRTRTAB
         MVI   WRTMSG24+8,64
         PRINTER WRTLINE,CONSOLE=ON
         TTIMER CANCEL                  CANCEL OUTSTANDING TIMER EVENT
         XC    DMSLSTEV(4),DMSLSTEV
         L     R13,4(R13)               RETURN
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
         SPACE
         SPACE 2
*
*        TIMER EXIT ROUTINE
*
         SPACE
WRTIMEXT STM   R14,R12,12(R13)          SAVE CALLERS REGISTERS
         BALR  R11,0                    LOAD THE BASE REGISTER
         USING *,R11                    ASSIGN TIMER EXIT BASE REG
         POST  TIMEECB                  SET TIME ECB COMPLETED
         LM    R14,R12,12(R13)          RELOAD CALLERS REGISTERS
         BR    R14                      RETURN TO CALLER
         SPACE
***
*        CONSTANTS
***
         SPACE
         ENTRY WRTECBL
WRTWORK  DS    D                        WORK SPACE
WRTECBL  DS    0F                       ECB-LIST
WRTBECBP DS    F                        -> BUFFER ECB
TIMEECBP DC    A(TIMEECB)               -> TO TIMER ECB
         DC    AL1(128)                 END OF LIST
WRTCECBA DS    AL3                      -> COMM ECB
TIMEECB  DC    A(0)                     TIMER ECB
WRTIME   DC    F'1000'                  TURN AROUND CHECK TIME
WRTREGSV DS    F                        SAVE AREA FOR THE CONST BASE
WRTFLAG  DS    AL1                      FLAGS
DASDUNIT EQU   128                      TRACEOUT ON DASD
TAPEUNIT EQU   64                       TRACEOUT ON TAPE
LOSTMSG  EQU   32                       LOST EVENT MSG WRITTEN
WRTLINE  DC    AL2(22,0),CL9' '
WRTMSG24 DC    9C' '
         SPACE
TRACEOUT DCB   DDNAME=TRACEOUT,DSORG=PS,MACRF=(PM),                    X
               RECFM=VB,LRECL=4100
         SPACE
WRTRTAB  DC    256X'40'
         ORG   WRTRTAB+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   WRTRTAB+C'0'
         DC    C'0123456789ABCDEF'
BUFFECB  EQU   BUFECB
         LTORG
         END
