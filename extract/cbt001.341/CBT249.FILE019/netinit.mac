         TITLE 'NETINIT  ...  START VTAM APPLICATIONS AT VTAM START TIMX
               E'
***********************************************************************
*                                                                     *
*             ** INITIAL 80 BYTE RECORD IS 'START' IN COL 11. **      *
*                                                                     *
*  FUNCTION : NETINIT IS A VTAM APPLICATION PROGRAM USED TO CONTROL   *
*             THE STARTUP OF OTHER VTAM APPLICATION PROGRAMS. IT IS   *
*             STARTED AT IPL TIME AND ENSURES THAT CERTAIN VTAM       *
*             APPLICATION PROGRAMS ARE STARTED AND STARTED IN         *
*             A PARTICULAR ORDER.                                     *
*                                                                     *
*             SEVERAL VTAM APPLICATIONS SUCH AS TCAS, NCCF AND HCF    *
*             CURRENTLY REQUIRE OPERATOR INTERVENTION TO START THEM.  *
*             THEY ARE UNABLE TO HANDLE THE SITUATION WHEN THEY       *
*             ARE STARTED BEFORE VTAM IS COMPLETELY INITIALIZED.      *
*             EITHER THEY ABEND OR THEY REQUIRE A REPLY FROM THE      *
*             OPERATOR TO RETRY THEIR STARTUP.                        *
*                                                                     *
*             CURRENTLY, BOTH NCCF AND NETOP CAN BE A PRIMARY         *
*             PROGRAM OPERATOR. NETOP WILL START CORRECTLY IF THE     *
*             POI IS IN USE BY ANOTHER PROGRAM BUT NCCF WILL NOT.     *
*             SINCE BOTH WILL CONTINUE TO BE IN USE, NETOP CAN        *
*             BE STARTED ONLY AFTER NCCF IS RUNNING.                  *
*                                                                     *
*             NETINIT WILL ADDRESS THE ABOVE PROBLEMS.                *
*                                                                     *
*             FIRST, NETINIT READS IN A SET OF COMMAND RECORDS. EACH  *
*             COMMAND RECORD DEFINES A PARTICULAR OS COMMAND          *
*             THAT IS TO BE ISSUED USING SVC 34. THE LEVEL            *
*             NUMBERS ARE USED TO DEFINE A HIERARCHY FOR EXECUTION    *
*             OF THE COMMANDS. HIGHER LEVELS ARE SUBORDINATE TO THE   *
*             LOWER LEVELS THEY FOLLOW IN THE INPUT STREAM. ALL       *
*             COMMANDS WITH IDENTICAL LEVEL NUMBERS AND WHICH ARE     *
*             SUBORDINATE TO ONE LOWER LEVEL COMMAND, CAN BE          *
*             ISSUED IN PARALLEL. A HIGHER LEVEL COMMAND CAN ONLY BE  *
*             EXECUTED ONCE ANY LOWER LEVEL COMMANDS PRIOR TO IT      *
*             IN THE INPUT STREAM HAVE BEEN EXECUTED.                 *
*                                                                     *
*             EG. THIS INPUT COMMAND FILE:                            *
*                                                                     *
*             LEVEL #   COMMAND                                       *
*             *******   *******                                       *
*                1      S NCCF                                        *
*                2      S NETOP                                       *
*                1      S TCAS                                        *
*                1      $SLGN1                                        *
*                2      $SLNE90                                       *
*                1      S HCF                                         *
*                                                                     *
*                 WOULD RESULT IN THE FOLLOWING SEQUENCE OF COMMANDS: *
*                                                                     *
*             S NCCF      S TCAS     $SLGN1      S HCF                *
*             S NETOP                $SLNE90                          *
*                                                                     *
*                 WHERE EXECUTION OF EACH COLUMN OF COMMANDS WOULD    *
*                 PROCEED IN PARALLEL BUT EACH ROW IN A PARTICULAR    *
*                 COLUMN MUST WAIT FOR THE PREVIOUS ROW COMMAND       *
*                 TO COMPLETE.                                        *
*                                                                     *
*             THESE COMMANDS ARE READ INTO THE VTAM STARTUP TABLE     *
*             AND EDITTED FOR OBVIOUS FORMAT ERRORS.                  *
*                                                                     *
*                                                                     *
*             SECOND, NETINIT WAITS UNTIL IT CAN SUCCESSFULLY OPEN    *
*             ITS VTAM ACB.                                           *
*                                                                     *
*                                                                     *
*             THIRD, NETINIT PROCESS THE COMMANDS IT READ INTO        *
*             THE VTAM STARTUP TABLE.                                 *
*                                                                     *
*             NETINIT CAN PROCESS TWO TYPES OF COMMAND RECORDS.       *
*             THE VTAM COMMAND RECORDS DEFINE START COMMANDS FOR      *
*             VTAM APPLICATIONS. NETINIT WILL ISSUE THE GIVEN         *
*             COMMAND AND THEN USE THE INQUIRE MACRO TO WAIT UNTIL    *
*             THE ASSOCIATED VTAM APPLICATION BECOMES ACTIVE. FOR THE *
*             COMMAND COMMAND RECORDS, NETINIT ISSUES THE GIVEN       *
*             COMMAND BUT DOESN'T MONITOR FOR ITS COMPLETION.         *
*                                                                     *
*             FOURTH, NETINIT CAN DELAY PROCESSING OF CERTAIN         *
*             COMMANDS DEPENDANT UPON A USER SPECIFIED TIME           *
*             INTERVAL.                                               *
*                                                                     *
*              EX. 1 V 300 T NCCF S NCCF                              *
*                                                                     *
*             THE 'T' INPUT WOULD RESULT IN A DELAY PRIOR TO          *
*             ISSUTING THIS COMMAND.  THE DELAY IS DEPENDANT          *
*             UPON THE INPUT VALUE PROVIDED IN 'SYSIN'.  IN THIS      *
*             CASE THE REQUESTED DELAY IS '300' OR 5 MINUTES.         *
*             THE VALUE IS 001 IS EQUAL TO 1 SEC.  YOU MAY ENTER      *
*             WHAT YOU WISH FOR DELAY PRIOR TO ISSUING COMMAND.       *
*                                                                     *
*             FIFTH , NETINIT WRITES MESSAGES TO THE OPERATOR         *
*             WHEN ERROR CONDITIONS ARE ENCOUNTERED. FOR EXAMPLE,     *
*             NETINIT SETS TIMEOUT VALUES FOR THE LENGTH OF TIME      *
*             IT WILL ATTEMPT TO OPEN THE ACB BEFORE QUITTING AND     *
*             FOR THE LENGTH OF TIME IT WILL WAIT FOR AN APPLICATION  *
*             TO BECOME ACTIVE.                                       *
*                                                                     *
*             SIXTH, NETINIT CAN BE RERUN AT ANY TIME. BEFORE         *
*             STARTING ANY VTAM APPLICATION, THE STATUS OF THAT       *
*             APPLICATION IS CHECKED WITH INQUIRE MACRO. START        *
*             COMMANDS ARE IGNORED FOR ANY ACTIVE APPLICATIONS. ALL   *
*             'COMMAND' COMMANDS ARE ISSUED REGARDLESS OF ANY         *
*             ASSOCIATED STATUS. THE USER MUST ENSURE THAT ANY        *
*             SUCH COMMANDS WILL NOT INTERFER WITH A CURRENTLY        *
*             ACTIVE VTAM APPLICATION PROGRAM.                        *
*                                                                     *
*                                                                     *
*                                                                     *
*             ** INITIAL 80 BYTE RECORD IS 'STOP'  IN COL 11. **      *
*                                                                     *
* FUNCTION :  NETINIT MAY ALSO BE USED TO PROCESS NETWORK             *
*             SHUTDOWN IN THE FOLLOWING MANNER.                       *
*                                                                     *
*             CODE INITIAL LINE ENTRY AS 'STOP'                       *
*                                                                     *
*             NETINIT WILL THEN CHECK ITS ACB.  IF ACB OPEN           *
*             OK ACB IS CLOSED AND MULTIPLE COMMANDS MAY BE           *
*             ISSUED TO STOP TASKS ORIGINALLY INITIATED               *
*             THROUGH NETINIT STARTUP PROC.                           *
*             THESE COMMANDS ARE PROCESSED IN THE SAME MANNER         *
*             AS THE NETINIT START UP PROCEDURE IN THAT               *
*             THEY ARE DEPENDANT ON LOWER LEVEL COMPLETIONS           *
*             WITHIN THE INPUT COMMAND MEMBER LEVEL STRUCTURE         *
*             AS WELL AS THE TIMING OPTION MAY BE USED TO             *
*             DELAY COMMAND INVOCATION.                               *
*  WRITTEN BY: ED PITKIN, DISTRIBUTED SERVICES, BCSC                  *
*                                                                     *
*  DATE      : JULY 18/80.                                            *
*                                                                     *
*  MODIFIED BY: COLL R CAMPBELL, NPS/BCSC                             *
*                                                                     *
*  DATE      : APRIL 25/83                                            *
*              -----------                                            *
*                1.  ADD R4 AS A BASE REGISTER ...REQUIRED            *
*                2.  IMPLEMENT PASS OF PARM FOR ACB OPEN              *
*                3.  ADD TPEND EXIT                                   *
*                                                                     *
         EJECT                                                        *
*  INPUT:     BELOW IS THE FORMAT FOR AN INPUT COMMAND RECORD.        *
*                                                                     *
*             COLUMN    DATA DESCRIPTION                              *
*             ======    ================                              *
*               1       LEVEL NUMBER ASSOCIATED WITH THIS COMMAND     *
*               2       BLANK                                         *
*               3       'V' IF STATUS OF COMMAND WILL BE MONITORED    *
*                           WITH THE INQUIRE MACRO.                   *
*                       'C' IF COMMAND WILL NOT BE MONITORED          *
*               4       BLANK                                         *
*               5-7     'XXX' WHERE IS XXX IS A NUMERICAL TIMER       *
*                       VALUE WHERE '001' = 1 SECOND                  *
*               8       BLANK                                         *
*               9       'T' IF COMMAND IS TO BE DELAYED FOR INTERVAL  *
*                       SPECIFIED IN COLS 4-6 OTHERWISE BLANK         *
*               10      BLANK                                         *
*               11-18   VTAM APPLICATION ID ASSOCIATED WITH THIS      *
*                       COMMAND.                                      *
*               19      BLANK                                         *
*               20-59   COMMAND THAT WILL BE PASSED TO SVC 34.        *
*                                                                     *
*  REGISTER USAGE:   R0     - WORK REGS                               *
*                    R1     - WORK REGS                               *
*                    R2     - WORK REGS                               *
*                    R3     - WORK REGS                               *
*                    R4     - BASE REG FOR NETINIT                    *
*                    R5     - A(ACB)                                  *
*                    R6     - A(NIB)                                  *
*                    R7     - BAL REG FOR SHOULD NOT OCCURS           *
*                    R8     - A(RPL)                                  *
*                    R9     - A(VSE)                REGS              *
*                    R10    - LENGTH OF VSE          FOR              *
*                    R11    - LAST VSE IN VST         BXLE            *
*                    R12    - BASE REG FOR NETINIT                    *
*                    R13    - A(SAVEAREA)                             *
*                    R14    - LINKAGE REG                             *
*                    R14    - WORK REG                                *
*                                                                     *
*  ATTRIBUTES: AC(1)                                                  *
*                                                                     *
*  VTAM MACROS USED: INQUIRE                                          *
*                                                                     *
*  SYSTEM MACROS USED: OPEN, CLOSE, PUT, GET, WTO, GETMAIN, FREEMAIN  *
*                                                                     *
***********************************************************************
NETINIT   CSECT
          B     STM-NETINIT(0,R15) BR AROUND MODULE HEADER
APPLNAME  DC    AL1(8)             LENGTH OF APPL NAME
          DC    CL8'        '      APPL NAME
          DC    CL10'&SYSDATE'
          DC    CL8' /&SYSTIME/'
STM       STM   R14,R12,12(R13)    SAVE SYSTEMS REGS
          LR    R12,R15            SET ADDRESSABILITY
          USING NETINIT,R12,R4       TO NETINIT
          L     R4,NETINADD        SET UP R4 AS BASE REG
          ST    R13,SAVEAREA+4     STORE SAVEAREA BACKWARD PTR
          LR    R15,R13            TEMPORARILY SAVE OLD SAVEAREA PTR
          LA    R13,SAVEAREA       LOAD A(NEW SAVEAREA)
          ST    R13,8(,R15)        STORE SAVEAREA FORWARD PTR
          USING VSEDSECT,R9        SET ADDRESSABILITY TO VSE
          USING IFGRPL,R8          SET ADDRESSABILITY
          LA    R8,RPL               TO VTAM RPL
          USING ISTDNIB,R6         SET ADDRESSABILITY
          LA    R6,NIB               TO VTAM NIB
          USING IFGACB,R5          SET ADDRESSABILITY
          LA    R5,ACB               TO VTAM ACB
          SPACE 1
*         USE PARM INPUT TO DETERMINE APPL NAME FOR ACB OPEN
          L     R2,0(R1)           LOAD R2 WITH AREA POINTED
          MVC   APPLSZ,1(R2)       TO BY R1.  MOVE IN PASSED PARM
          XR    R3,R3              SETUP R3 FOR USE
          IC    R3,APPLSZ          POINT TO LENGTH OF ACBNAME
          BCTR  R3,0               DECREMENT R3 FOR LENGTH USE
          EX    R3,INSTRCT1        EXEC APPL MOVE TO APPLNAME
          EX    R3,INSTRCT2        AND APPLPSWD PASSING LENGTH
*         BUILD  VTAM STARTUP TABLE
          SPACE 1
          BAL   R14,BUILDVST       READ AND EDIT INPUT COMMANDS
          SPACE 1
*         WAIT UNTIL VTAM IS INITIALIZED
          SPACE 1
          BAL   R14,OPENACB        GO OPEN VTAM ACB
          EJECT
*         PROCESS VTAM STARTUP TABLE (VST) TO START VTAM APPLICATIONS
          SPACE 1
PROLOOP1  LM    R9,R11,VSTSTART    LOAD BXLE REGS
          NI    GLOFLAG,X'FF'-GLOFND1 RESET VSE FOUND FLAG
          SPACE 1
PROLOOP2  TM    TPENDFLG,X'01'     ARE WE SHUTTING DOWN
          BO    RETURN             TPEND SCHEDULED SO GO END
          TM    VSEFLAG,VSEDONE    HAS THIS VSE BEEN COMPLETED
          BO    PRONEXT            YES => GET NEXT VSE
          OI    GLOFLAG,GLOFND1    SAY ATLEAST ONE INCOMPLETE VSE
          TM    VSEFLAG,VSEHELD    HELD FOR LOWER LEVEL COMPLETION
          BO    PRONEXT            YES => GET NEXT VSE
          TM    VSEFLAG,VSETIME    IS THIS VSE ON A TIME DELAY
          BO    TIMCNTL            BRANCH FOR TIMER DECREMENT
          TM    VSEFLAG,VSEWAIT    HELD FOR APPL STARTUP
          BNO   PROVSE             NO => PROCESS VSE
          BAL   R14,STATNQIR       CHECK FOR APPL STATUS
          B     PRONEXT            BRANCH FOR NEXT VSE
          SPACE 1
PROVSE    BAL   R14,ACTVSE         ISSUE COMMAND IN VSE
          SPACE 1
PRONEXT   BXLE  R9,R10,PROLOOP2    GET NEXT VSE
          TM    GLOFLAG,GLOFND1    ANY INCOMPLETE VSE'S?
          BO    PROSTIME           YES => GO WAIT BEFORE RESCANNING VST
          SPACE 1
          TM    GLOFLAG,GLOERR     ANY ERRORS PROCESSING VSE'S
          BO    WRITMSG7           YES => BR TO CONDITIONAL COMPLETION
          WTO   MF=(E,MSG08)       NO  => WTO COMPLETION
          B     RETURN                    GO TO EXIT
WRITMSG7  WTO   MF=(E,MSG07)       WTO CONDITIONAL COMPLETION MSG
          B     RETURN
INSTRCT1  MVC   APPLNAME+1(0),2(R2)    MOVE IN
INSTRCT2  MVC   APPLPSWD+1(0),2(R2)    MOVE IN
          SPACE 1
PROSTIME  STIMER WAIT,BINTVL=WAIT1SEC WAIT 1 SECOND
          B     PROLOOP1                BEFORE RESCANNING VST
          EJECT
*         NORMAL EXIT FROM NETINIT
          SPACE 1
RETURN    DS    0H
          L     15,=A(STORAGE)     R15 = EP OF STORAGE ROUTINE
          BALR  14,15              GO & PRINT STORAGE INFO
          TM    GLOFLAG,GLOACBO    IF VTAM ACB
          BZ    SKIPCACB             IS OPEN
          CLOSE ACB                    THEN CLOSE IT
SKIPCACB  FREEMAIN R,SP=2          FREE SUBPOOL CONTAINING VST
          L     R13,4(,R13)        RESTORE OLD SAVEAREA
          LM    R14,R12,12(R13)    RESTORE OLD REGS
          SR    R15,R15            SET RETURN CODE = 0
          BR    R14
          SPACE 2
*         EXIT FOR ERRORS REQUIRING A DUMP
          SPACE 1
OPENFAIL  DS    0H                 VTAM ACB HAS FAILED TO OPEN
          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS
          MVI   DUMPFLAG,OPENCODE  INDICATE OPEN ACB FAILURE
          B     DUMP               GO TAKE A DUMP
          SPACE 1
SNOCCUR   DS    0H                 FOR CONDITIONS THAT SHOULD NOT OCCUR
          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS
          MVI   DUMPFLAG,SNOCUR    INDICATE SHOULD NOT OCCUR
          B     DUMP
          SPACE 1
DUMP      DS    0H                 USE SVC 13 TO TAKE A DUMP
          SR    R1,R1              CLEAR R1 FOR DUMP CODE
          IC    R1,DUMPFLAG        MOVE DUMP CODE TO REG1
          ABEND (1),DUMP           TAKE A DUMP
          TITLE 'NETINIT - BUILDVST ... BUILD VTAM STARTUP TABLE'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) GETMAIN STORAGE FOR THE VTAM STARTUP TABLE.          *
*             2) READ COMMAND INPUT FROM SYSIN FILE INTO A VSE.       *
*             3) VALIDATE LEVEL, TYPE, TIMER AND TIMER VALUE FIELDS   *
*             4) INITIALIZE TIMER FLAG FOR TIME VSE ENTRIES.          *
*             5) WRITE INPUT FILE PLUS EDIT ERRORS TO SYSOUT FILE.    *
*             6) INITIALIZE BXLE REGS FOR LATER VST PROCESSING.       *
*                                                                     *
*  REGS USED: R0,R1,R2,R14,R15                                        *
*                                                                     *
***********************************************************************
BUILDVST  DS    0H
          ST    R14,RETSAVE        SAVE RETURN ADDRESS
          SPACE 1
*         GETMAIN STORAGE FOR VST
          SPACE 1
          L     R0,VSTLEN          LOAD TABLE SIZE IN BYTES
          ICM   R0,8,X'02'         SET SUBPOOL # = 2
          GETMAIN R,LV=(0)         REQUEST STORAGE
          ST    R1,VSTSTART        SAVE A(VST)
          A     R1,VSTLEN          CALC START OF
          S     R1,=AL4(L'VSENTRY)   LAST VSE
          ST    R1,VSTEND              AND SAVE FOR BXLE
          SPACE 1
*         OPEN  SYSIN AND SYSOUT FILES
          SPACE 1
          OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT))
          TM    SYSINDCB+DCBOFLGS-IHADCB,X'10'  DID SYSIN OPEN OK?
          BZ    DCBOFAIL                        NO => WTO ERROR MSG
          TM    SYSOUDCB+DCBOFLGS-IHADCB,X'10'  DID SYSOUT OPEN OK?
          BO    DCBOPEN                         YES => BR TO READ SYSIN
DCBOFAIL  WTO   MF=(E,MSG01)       WTO OPEN FAILURE MSG
          B     RETURN             BR TO END EXECUTION
          SPACE 1
*         READ  SYSIN RECORDS INTO  VST AND EDIT THEM
          EJECT
DCBOPEN   LM    R9,R11,VSTSTART    LOAD BXLE REGS TO PROCESS VST
          GET   SYSINDCB,(R9)      LOAD FIRST RECORD INTO AREA
          CLC   10(5,R9),=C'START' ARE WE PROCESSING FOR VTAM START
          BNE   TBLCHCK            NO SO CHECK AGAIN
          OI    TBLFLAG,X'01'      FLAG AS SUCH
          B     READLOOP
TBLCHCK   CLC   10(4,R9),=C'STOP'  ARE WE PROCESSING FOR VTAM STOP
          BNE   TBLERR             IF NO THEN WE HAVE AN ERROR
          B     READLOOP           GO AND PERFORM READ ON CARDS
TBLERR    WTO   MF=(E,MSG13)       GO AND INFORM OF TABLE TYPE ERR
          B     RETURN             AND THEN PROCEED TO END
READLOOP  GET   SYSINDCB,(R9)      READ COMMAND RECORD INTO A VSE
          PUT   SYSOUDCB,(R9)      ECHO COMMAND RECORD TO SYSOUT
          MVC   VSELPCNT,=F'120'   SET TIMEOUT FOR CMD TO 120 SECS
          MVI   VSEFLAG,X'00'      RESET VSE STATUS FLAG
          SPACE 1
          LA    R15,EDITERR1       ASSUME ERROR IN LEVEL PARAMETER
          CLI   VSELEVEL,C'0'      LEVEL
          BL    EDITERR              PARAMETER
          CLI   VSELEVEL,C'9'          MUST BE
          BH    EDITERR                  NUMERIC
          SPACE 1
          LA    R15,EDITERR2       ASSUME ERROR IN TYPE PARAMETER
          CLI   VSETYPE,C'V'       TYPE
          BE    ERRCHK1              MUST BE
          CLI   VSETYPE,C'C'           EITHER
          BNE   EDITERR              'C' OR 'V'
          SPACE 1
ERRCHK1   LA    R15,EDITERR3       ASSUME ERROR IN TIME PARAMETER
          CLI   VSETIMED,C'T'      TYPE
          BNE   ERCHK1A              PARAMETER
          OI    VSEFLAG,VSETIME    IF A TIMED ENTRY FLAG AS SUCH
          B     ERRCHK2            BRANCH FOR ADDED CHECK
ERCHK1A   CLI   VSETIMED,C' '      TYPE
          BNE   EDITERR                  'T' OR ' '
          B     READNEXT           GO GET NEXT VSE
          SPACE 1
ERRCHK2   LA    R15,EDITERR4       ASSUME ERROR IN DELAY PARAMETER
          CLI   VSETIMED+1,C' '    TYPE
          BNE   EDITERR                  ' '
          SPACE 1
          LA    R15,EDITERR5       ASSUME ERROR IN DELAY PARAMETER
          CLI   VSCOUNT,C'0'       AMOUNT
          BL    EDITERR            IS THIS VALUE LESS THAN '0'
          CLI   VSCOUNT,C'9'       AMOUNT
          BH    EDITERR            IS THIS VALUE GREATER THAN '9'
          CLI   VSCOUNT+1,C'0'      AMOUNT
          BL    EDITERR            IS THIS VALUE LESS THAN '0'
          CLI   VSCOUNT+1,C'9'      AMOUNT
          BH    EDITERR            IS THIS VALUE GREATER THAN '9'
          CLI   VSCOUNT+2,C'0'      AMOUNT
          BL    EDITERR            IS THIS VALUE LESS THAN '0'
          CLI   VSCOUNT+2,C'9'      AMOUNT
          BH    EDITERR            IS THIS VALUE GREATER THAN '9'
          PACK  CNTTBL(8),VSCOUNT(3) PREPARE TIME INPUT FOR PROCESSING
          CVB   R2,CNTTBL          CONVERT COUNTER VALUE TO BINARY
          ST    R2,VSEBIN          STORE BINARY VALUE FOR FUTURE USE
          B     READNEXT
          SPACE 1
EDITERR   PUT   SYSOUDCB,(R15)     WRITE ERROR MSG TO SYSOUT FILE
          OI    GLOFLAG,GLOEDIT    END EXECUTION AFTER ALL INPUT READ
          SPACE 1
READNEXT  BXLE  R9,R10,READLOOP    READ NEXT COMMAND RECORD
          WTO   MF=(E,MSG02)       IF WE FALL THRU BXLE, THEN THE
*                                  INPUT FILE EXCEEDS THE SIZE OF
*                                  THE VST. WRITE AN ERROR MSG AND
          B     RETURN             END EXECUTION
          EJECT
*         END OF DATA REACHED ON SYSIN
          SPACE 1
EODSYSIN  C     R9,VSTSTART        NULL SYSIN FILE?
          BH    CALCEND            NO  => BR TO CALC LAST VSE
          WTO   MF=(E,MSG03)       YES => WTO ERROR MSG
          B     RETURN                    AND END EXECUTION
CALCEND   S     R9,=AL4(L'VSENTRY) BACKUP TO LAST ACTIVE VSE
          ST    R9,VSTEND          SAVE FOR BXLE
          SPACE 1
          CLOSE (SYSINDCB,,SYSOUDCB)
          SPACE 1
          TM    GLOFLAG,GLOEDIT    ANY EDIT ERRORS?
          BZ    BUILDRET           NO  => BR TO EXIT
          WTO   MF=(E,MSG04)       YES => WTO ERROR MESSAGE
          B     RETURN                    AND END EXECUTION
          SPACE 1
BUILDRET  L     R14,RETSAVE        RESTORE RETURN REGISTER
          BR    R14                RETURN TO CALLER
          TITLE 'NETINIT - OPENACB  ... OPEN VTAM ACB'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) LOOP ATTEMPTING TO SUCCESSFULLY OPEN NETINIT'S       *
*                VTAM ACB.                                            *
*             2) END EXECUTION IF ACB CANNOT BE OPENED AFTER          *
*                TRYING FOR 5 MINUTES.                                *
*                                                                     *
*  REGS USED: R0,R1,R2,R14,R15                                        *
*                                                                     *
***********************************************************************
OPENACB   DS    0H
          ST    R14,RETSAVE        SAVE RETURN ADDRESS
          TM    TBLFLAG,X'01'      ARE WE PROCESSING FOR A START
          BNO   OPENCLSE           IF NOT GO PROCESS FOR A CLOSE
OPENSTRT  L     R2,=F'300'         SET TIMEOUT VALUE FOR OPEN ACB LOOP
          SPACE 1
*         ATTEMPT TO OPEN THE ACB
          SPACE 1
OPENRTRY  OPEN  ACB                ATTEMPT TO OPEN ACB
          LTR   R15,R15            DID ACB OPEN SUCCESSFULLY?
          BZ    OPENRET            YES => BR TO EXIT
          SPACE 1
*         CHECK  OPEN RETURN CODE  FOR RETRYABLE ERROR
          SPACE 1
          CLI   ACBERFLG,X'52'     IF VTAM HALT IS IN PROGRESS
          BNE   OPENCX58             THEN
          WTO   MF=(E,MSG05)           WTO ERROR MSG
          B     RETURN                   AND END EXECUTION
OPENCX58  CLI   ACBERFLG,X'58'     IF APPLID IS ALREADY IN USE
          BNE   OPENCX5A             THEN
          WTO   MF=(E,MSG12)           WTO ERROR MSG
          B     RETURN                   AND END EXECUTION
OPENCX5A  CLI   ACBERFLG,X'5A'     IF VTAM APPLID NOT DEFINED YET
          BE    OPENLOOP             THEN RETRY OPEN ACB
OPENCX5C  CLI   ACBERFLG,X'5C'     IF VTAM IS INACTIVE
          BE    OPENLOOP             THEN RETRY OPEN ACB
          BAL   R7,OPENFAIL        OTHER RETURN CODE => TAKE A DUMP
          SPACE 1
*         RETRY  OPEN ACB EVERY 1  SECONDS TO A MAX OF 5 MINUTES
          SPACE 1
OPENLOOP  BCT   R2,OPENSTIM        DECREMENT TIMEOUT COUNTER
          WTO   MF=(E,MSG06)       WTO TIMEOUT LIMIT EXCEEDED
          B     RETURN             AND END EXECUTION
OPENSTIM  STIMER WAIT,BINTVL=WAIT1SEC WAIT FOR 1 SECOND
          B     OPENRTRY                AND THEN RETRY OPEN ACB
          SPACE 1
OPENCLSE  OPEN  ACB                ATTEMPT TO OPEN ACB/ ARE WE UP?
          LTR   R15,R15            CHECK AND SEE.
          BZ    OPENCLOS
          WTO   MF=(E,MSG14)       GO AND TELL OF ERROR
          B     RETURN             AND THEN BRANCH TO CLEAN UP
OPENCLOS  CLOSE ACB                CLOSE UP ACB SO EXLST NO GO
          LTR   R15,R15            DID WE CLOSE OKAY
          BZ    OPENRET            YES!  GO AND PROCESS COMMANDS
          WTO   MF=(E,MSG15)       GO AND SAY CLOSE IS A NO GO
          B     RETURN             AND THEN BRANCH TO CLEAN UP
OPENRET   OI    GLOFLAG,GLOACBO    FLAG ACB OPENED
          L     R14,RETSAVE        RESTORE RETURN ADDRESS
          BR    R14
          TITLE 'NETINIT - TIMER CONTROL ... TIME VSE ENTRY'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) FOR VSETYPE WITH A 'T' TIMER ENTRY DECREMENT TIMER   *
*                VALUE AND STORE IN VSE.                              *
*             2) PREPARE ALL SUBORDINATE ENTRIES TO TIMED ENTRY FOR   *
*                APPROPRIATE STATUS.                                  *
*             3) RELEASE TIMER FLAG FROM ENTRIES WHOSE TIMER VALUE    *
*                HAS REACHED = '0'.                                   *
*  REGS USED: R2                                                      *
*                                                                     *
***********************************************************************
TIMCNTL   L     R2,VSEBIN          PREPARE VALUE FOR DECREASE
          BCT   R2,TIMSAVE         DEREMENT COUNTER AND BRANCH IF > 0
          NI    VSEFLAG,X'FF'-VSETIME   RESET FLAG WHEN TIME = '0'
          LA    R1,STATEX1         PT @ INSTRUCTION TO BE EXECUTED
          BAL   R14,VSESUBOR       AND THEN BRANCH
          B     PROVSE             BRANCH FOR PROCESS
TIMSAVE   ST    R2,VSEBIN          SAVE TIMER VALUE IN VSE
          LR    R2,R9              SAVE CURRENT VSE
TIMLOOP   BXLE  R9,R10,TIMCHK      POINT TO NEXT VSE
          LR    R9,R2              RESTORE CURRENT VSE
TIMCHK    TM    VSEFLAG,VSEHELD    HAS VSE BEEN HELD AS SUBORDINATE
          BO    TIMLOOP            IF HELD BRANCH FOR NEXT VSE
          LA    R1,AVSWTEX         SETUP R1 FOR FUTURE USE
          BAL   R14,VSELOOP        SAVE CALLING POINT AND BRANCH
          B     PRONEXT
          TITLE 'NETINIT - ACTVSE   ... ISSUE COMMAND'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) FOR VSETYPE='V', VERIFY THAT THE APPLID IS DEFINED   *
*                TO VTAM.                                             *
*             2) FOR VSETYPE='V', FLAG COMMAND COMPLETE IF APPLICATION*
*                IS ALREADY ACTIVE .                                  *
*             3) ISSUE THE COMMAND IN THE VSE USING SVC 34.           *
*             4) FOR VSETYPE='V', WAIT THE CURRENT VSE ENTRY AND HOLD *
*                SUBORDINATE VSE'S.                                   *
*             5) FOR VSETYPE='C', FLAG THE VSE COMPLETE.              *
*                                                                     *
*  REGS USED: R0,R1,R14,R15                                           *
*                                                                     *
***********************************************************************
ACTVSE    DS    0H
          ST    R14,RETSAVE        SAVE RETURN ADDRESS
          SPACE 1
*         INQUIRE ABOUT APPLID FOR VSETYPE='V'
          SPACE 1
          CLI   VSETYPE,C'C'       IF VSE IS COMMAND TYPE
          BE    AVSSVC34             THEN SKIP INQUIRE
          MVC   NIBSYM,VSEAPPL     MOVE APPLID TO NIB
AVSLOOP   INQUIRE RPL=RPL,         ISSUE VTAM INQUIRE                  X
               NIB=NIB,                                                X
               OPTCD=APPSTAT
          EJECT
          CH    R15,=H'12'         INQUIRE RET CODE > 12?
          BNH   *+8                NO  => GO TO BRANCH TABLE
          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR
          B     ERRTAB1(R15)       BR BASED ON ACTION CODE
ERRTAB1   B     AVSFDBK3            0 => SUCCESSFUL COMPLETION
          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR
          B     AVSAPBAD            8 => APPLID WRONG OR NOT DEFINED
          B     AVSLOOP             C => RETRYABLE ERROR
          SPACE 1
*         QUERY APPL STATUS FROM RPLFDBK3
          SPACE 1
AVSFDBK3  SR    R15,R15            CLEAR R15 FOR FDBK3
          IC    R15,RPLFDB3        LOAD FDBK3
          B     AVSTAT(R15)        BR BASED ON APPL STATUS
AVSTAT    B     AVSACTIV            0 => APPLICATION ACTIVE
          B     AVSSVC34            4 => APPLICATION INACTIVE
          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON
          B     AVSACTIV            C => APPL'N TEMP NOT ACCEPTNG LOGON
          B     AVSACTIV           10 => APPLICATION CLOSING DOWN
          SPACE 1
AVSACTIV  OI    VSEFLAG,VSEDONE+VSEPREV FLAG COMMAND COMPLETE
          B     AVSRET
          SPACE 1
AVSAPBAD  MVC   MSG09+20(L'VSEAPPL),VSEAPPL MOVE BAD APPLID TO MSG
          MVC   MSG09C+13(L'VSENTRY),VSENTRY MOVE VSE TO MSG
          WTO   MF=(E,MSG09)       TELL OPR
          WTO   MF=(E,MSG09C)        ABOUT THE BAD APPLID
          OI    VSEFLAG,VSEDONE+VSERROR+VSEINVA FLAG ENTRY COMPLETE
          OI    GLOFLAG,GLOERR     FLAG PROCESSING ERROR
          LA    R1,AVSEX           PT @ INSTR TO BE EXECUTED
          B     *+8                BR AROUND INSTR TO BE EXECUTED
AVSEX     OI    VSEFLAG,VSEDONE+VSERROR+VSEHELD FLAG SUBORDINATE  VSE'S
          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S
          B     AVSRET             BR TO EXIT
          SPACE 1
*         USE SVC 34 TO ISSUE COMMAND IN VSE
          EJECT
AVSSVC34  MVC   MSG10+20(L'VSEAPPL),VSEAPPL MOVE APPLID
          MVC   MSG10+33(35),VSECMD       AND COMMAND TO WTO
          WTO   MF=(E,MSG10)       TELL OPR
          SPACE 1
          MVC   SVC34CMD,VSECMD    MOVE CMD TO SVC 34 BUFFER
          MODESET KEY=ZERO         MUST BE IN KEY 0 FOR SVC 34
          SR    R0,R0              SET R0 = 0
          LA    R1,SVC34BUF            R1 = A(CMD)
          SVC   34                 PASS COMMAND TO SYSTEM
          MODESET KEY=NZERO        RETURN TO USER PROTECT KEY
          SPACE 1
          CLI   VSETYPE,C'V'       VTAM APPLN START CMD?
          BE    AVSWAIT            YES => BR TO SET WAIT FLAG
          OI    VSEFLAG,VSEDONE    NO  => MARK VSE COMPLETE
          LA    R1,STATEX1         LOAD INSTRUCTION TO BE EXEC
          BAL   R14,VSESUBOR       BRANCH AND STORE
          B     AVSRET                    AND EXIT
          SPACE 1
*         WAIT FOR VTAM APPLID TO BECOME ACTIVE BEFORE FLAGGING
*         THIS  VSE COMPLETE AND P ROCESSING SUBORDINATE VSE'S
          SPACE 1
AVSWAIT   OI    VSEFLAG,VSEWAIT    TURN WAIT FLAG ON
          LA    R1,AVSWTEX         PT @ INSTR TO BE EXECUTED
          B     *+8                BR AROUND OI
AVSWTEX   OI    VSEFLAG,VSEHELD    SET HELD FLAG IN SUB VSE'S
          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S
          B     AVSRET             BR TO EXIT
          SPACE 1
AVSRET    L     R14,RETSAVE        RESTORE RETURN REGISTER
          BR    R14                RETURN TO CALLER
          TITLE 'NETINIT - STATNQIR ... INQUIRE APPLID STATUS'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) STATNQIR IS ENTERED FOR VSE'S THAT HAVE THE WAIT     *
*                FLAG SET.                                            *
*             2) STATNQIR ISSUES THE VTAM INQUIRE MACRO TO SEE IF     *
*                THE SPECIFIED VTAM APPLID HAS STARTED YET.           *
*             3) IF THE APPLID IS NOW ACTIVE, THE VSE IS FLAGGED      *
*                COMPLETE AND THE HELD FLAG IS RESET IN ALL           *
*                SUBORDINATE VSE'S.                                   *
*             4) IF THE TIMEOUT VALUE IS EXCEEDED FOR THE APPLID,     *
*                THEN THE ENTRY IS FLAGGED COMPLETE UE TO ERROR,      *
*                AND ALL SUBORDINATE VSE'S ARE FLAGGED COMPLETE.      *
*                                                                     *
*  REGS USED: R0,R1,R14,R15                                           *
*                                                                     *
***********************************************************************
STATNQIR  DS    0H
          ST    R14,RETSAVE        SAVE RETURN ADDRESS
          SPACE 1
*         DECREMENT TIMEOUT COUNTE R FOR THIS APPLID.
          SPACE 1
          L     R1,VSELPCNT        LOAD TIMEOUT COUNTER
          BCT   R1,*+8             DECREMENT TIMEOUT COUNTER
          B     STATIMEO           R1 < 0 => TIMEOUT VALUE EXCEEDED
          ST    R1,VSELPCNT        SAVE TIMEOUT COUNTER
          SPACE 1
*         ISSUE  INQUIRE MACRO FOR  APPLICATION STATUS
          SPACE 1
          MVC   NIBSYM,VSEAPPL     MOVE APPLID INTO NIB
STATLOOP  INQUIRE RPL=RPL,         ISSUE INQUIRE MACRO                 X
               NIB=NIB,                                                X
               OPTCD=APPSTAT
          CH    R15,=H'12'         INQUIRE RET CODE > 12?
          BNH   *+8                NO  => GO TO BRANCH TABLE
          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR
          B     ERRTAB2(R15)       BR BASED ON ACTION CODE
ERRTAB2   B     STATFDB3            0 => SUCCESSFUL COMPLETION
          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR
          BAL   R14,SNOCCUR         8 => APPLID WRONG OR NOT DEFINED
          B     STATLOOP            C => RETRYABLE ERROR
          SPACE 1
*         QUERY APPL STATUS FROM RPLFDBK3
          SPACE 1
STATFDB3  SR    R15,R15            CLEAR R15 FOR FDBK3
          IC    R15,RPLFDB3        LOAD FDBK3
          B     STATAB(R15)        BR BASED ON APPL STATUS
STATAB    B     STATACT             0 => APPLICATION ACTIVE
          B     STATRET             4 => APPLICATION INACTIVE
          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON
          B     STATRET             C => APPL'N TEMP NOT ACCEPTNG LOGON
          B     STATACT            10 => APPLICATION CLOSING DOWN
          SPACE 1
*         APPLI D IS NOW ACTIVE
          SPACE 1
STATACT   OI    VSEFLAG,VSEDONE    FLAG VSE COMPLETE
          LA    R1,STATEX1         PT @ INSTR TO BE EXECUTED
          B     *+8                BR AROUND NI
STATEX1   NI    VSEFLAG,X'FF'-VSEHELD RESET HELD FLAG IN SUB VSE'S
          BAL   R14,VSESUBOR       GO RELEASE SUBORDINATE VSE'S
          B     STATRET            BR TO EXIT
          SPACE 1
*         WE HAVE EXCEEDED THE TIME LIMIT FOR THE VTAM APPLID
*         TO START. ASSUME SOMETHING IS WRONG AND TERMINATE
*         PROCESSING FOR THIS ENTRY AND ALL SUBORDINATE VSE'S.
          SPACE 1
STATIMEO  MVC   MSG11+20(L'VSEAPPL),VSEAPPL MOVE APPLID TO WTO MSG
          WTO   MF=(E,MSG11)         AND TELL OPR
          OI    VSEFLAG,VSEDONE+VSERROR FLAG VSE COMPLETE
          LA    R1,STATEX2
          B     *+8                BR AROUND INSTR TO BE EXECUTED
STATEX2   OI    VSEFLAG,VSEDONE+VSERROR FLAG SUB VSE'S DONE
          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S DONE
          B     STATRET            BR TO EXIT
          SPACE 1
STATRET   L     R14,RETSAVE        RESTORE RETURN ADDR
          BR    R14                RETURN
          TITLE 'NETINIT - VSESUBOR ... PROCESS SUBORDINATE VSE''S'
***********************************************************************
*                                                                     *
*  FUNCTION : 1) FOR EACH VSE THAT IS SUBORDINATE TO THE CURRENT      *
*                VSE, EXECUTE THE INSTRUCTION POINTED AT BY R1.       *
*                                                                     *
*  INPUT    : R1 - ADDRESS OF INSTRUCTION TO BE EXECUTED              *
*                                                                     *
*  REGS USED: R2                                                      *
*                                                                     *
***********************************************************************
VSESUBOR  DS    0H
          LR    R2,R9              SAVE CURRENT VSE
          B     VSENEXT            GO GET FIRST SUBORDINATE VSE
          SPACE 1
VSELOOP   CLC   VSELEVEL,VSELEVEL-VSEDSECT(R2) SUBORDINATE VSE?
          BNH   VSERET             NO  => SCAN COMPLETE
          EX    0,0(R1)            YES => EXECUTE PASSED INSTRUCTION
VSENEXT   BXLE  R9,R10,VSELOOP            AND GET NEXT VSE
          SPACE 1
VSERET    LR    R9,R2              RESTORE CURRENT VSE
          BR    R14                RETURN TO CALLER
          TITLE 'NETINIT - TPEND  ..... PROCESS TPEND'
***********************************************************************
*                                                                     *
*  FUNCTION : FLAG THAT WE ARE SHUTTING DOWN.....DO THE MINIMUM.      *
*                                                                     *
***********************************************************************
TPEND     DS    0H
          DROP  R12                DROP BASE REGISTERS
          DROP  R4                 DROP BASE REGISTERS
          USING *,R15              R15 IS ALL WE HAVE FOR BASE REG
          L     R12,=A(NETINIT)    R12 IS BASE REGISTER
          L     R4,=A(NETINIT+4096) R4 IS BASE REGISTER
          DROP  R15
          USING NETINIT,R12,R4     SET UP BASE REG
          OI    TPENDFLG,X'01'     FLAG THAT WE ARE TPEND
          SR    R15,R15
          BR    R14
          TITLE 'NETINIT - ERREXIT  ... PROCESS RPL ERRORS'
***********************************************************************
*                                                                     *
*  FUNCTION : ERREXIT RECEIVES CONTROL WHENEVER AN RPL-BASED MACRO    *
*             ENDS WITH A NON-ZERO RETURN CODE.                       *
*                                                                     *
*             1) SINCE ONLY THE INQUIRE MACRO IS USED, THERE ARE      *
*                VERY FEW ERRORS THAT SHOULD OCCUR.                   *
*             2) THE RTNCD AND FDBK2 CODES ARE ANALYZED AND AN ACTION *
*                CODE IS LOADED INTO R15 TO BE PASSED BACK TO THE     *
*                CODE IMMEDIATELY FOLLOWING THE MACRO CALL. THIS      *
*                ACTION CODE IS DEFINED AS FOLLOWS:                   *
*                                                                     *
*                  4 => THIS CONDITION SHOULD NOT OCCUR               *
*                  8 => INPUT TO INQUIRE IS INCORRECT                 *
*                  C => REISSUE THE MACRO                             *
*                                                                     *
*             3) THE POSSIBLE ERROR CONDITIONS OF INTEREST TO US      *
*                ARE AS FOLLOWS:                                      *
*                                                                     *
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      0C  00           *
*   10    0A    VTAM ERROR                           SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    4C    NO APPLICATION NAME                  08  00           *
*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  08  00           *
*                                                                     *
*                                                                     *
*                                                                     *
*  INPUT    : R1     - ADDRESS OF RPL IN ERROR                        *
*             R2-R12 - VALUES AT TIME MACRO WAS ISSUED                *
*             R13    - VTAM SAVEAREA                                  *
*             R14    - RETURN ADDRESS TO VTAM                         *
*             R15    - ENTRY POINT OF EXIT                            *
*                                                                     *
***********************************************************************
ERREXIT   DS    0H
          DROP  R8
          USING IFGRPL,R1          SET ADDRESSABILITY TO RPL
          SR    R0,R0              SET ACTION SUBCODE = 0
          SPACE 1
*         SCAN  FOR EXPECTED ERROR S
          SPACE 1
          CLC   RPLRTNCD(2),=XL2'0800' TEMP STORAGE ALLOCATION FAILURE
          BNE   ERR100A                  NO  => CHECK NEXT ERROR
          LA    R15,12                   YES => SET ACTION CODE=RETRY
          B     ERRRET                          AND EXIT
          SPACE 1
ERR100A   CLC   RPLRTNCD(2),=XL2'100A' VTAM INTERNAL ERROR
          BNE   ERR100E                  NO  => CHECK NEXT ERROR
          LA    R15,4                    YES => SET ACTION CODE=SNOCUR
          B     ERRRET                          AND EXIT
          SPACE 1
ERR100E   CLC   RPLRTNCD(2),=XL2'100E' VTAM ABENDING
          BNE   ERR144C                  NO  => CHECK NEXT ERROR
          LA    R15,4                    YES => SET ACTION CODE=SNOCUR
          B     ERRRET                          AND EXIT
          SPACE 1
ERR144C   CLC   RPLRTNCD(2),=XL2'144C' NO APPL NAME SPECIFIED?
          BNE   ERR1453                  NO  => CHECK NEXT ERROR
          LA    R15,8                    YES => SET ACTION CODE=BADAPPL
          B     ERRRET                          AND EXIT
          SPACE 1
ERR1453   CLC   RPLRTNCD(2),=XL2'1453' INVALID APPL NAME?
          BNE   ERSNOCUR                 NO  => BR TO SET SNOCUR
          LA    R15,8                    YES => SET ACTION CODE=BADAPPL
          B     ERRRET                          AND EXIT
          SPACE 1
ERSNOCUR LA     R15,4              ALL OTHER ERRORS ARE UNEXPECTED
          B     ERRRET             BR TO EXIT
          SPACE 1
ERRRET    BR    R14                EXIT TO VTAM
          TITLE 'NETINIT - DCB''S  AND VTAM CONTROL BLOCKS'
          PRINT NOGEN
SYSINDCB  DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),       X
               LRECL=80
          SPACE 2
SYSOUDCB  DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F
          SPACE 2
ACB       ACB   AM=VTAM,APPLID=APPLNAME,EXLST=EXLST,PASSWD=APPLPSWD
          SPACE 2
EXLST     EXLST AM=VTAM,SYNAD=ERREXIT,LERAD=ERREXIT,TPEND=TPEND
          SPACE 2
NIB       NIB   MODE=RECORD,PROC=TRUNC,LISTEND=YES,                    X
               LOGMODE=C' ',BNDAREA=0
          SPACE 2
RPL       RPL   AM=VTAM,ACB=ACB,OPTCD=SYN
          PRINT GEN
          TITLE 'NETINIT - VSE DSECT'
VSEDSECT  DSECT
*
*         THIS  DSECT DESCRIBES AN  ENTRY IN THE VTAM STARTUP TABLE.
*         EACH  VSE IS READ FROM T HE SYSIN FILE.
*
VSENTRY   DS    0CL80              DEFINES ENTIRE VSE ENTRY
VSELEVEL  DC    CL1' '             THE LEVEL NUMBER FOR THIS VSE
*                                  LEVEL #'S RANGE FROM 0-9
*                                  ALL VSE'S BETWEEN THE CURRENT VSE
*                                  AND THE FIRST VSE WITH A LOWER
*                                  OR EQUAL LEVEL NUMBER ARE
*                                  SUBORDINATE TO THE CURRENT VSE.
VSEFLAG   DC    XL1'00'            VSE STATUS FLAG (FILLER)
VSEDONE   EQU   X'80'              PROCESSING COMPLETE FOR VSE
VSEWAIT   EQU   X'40'              WAITING FOR APPLID TO START
VSEPREV   EQU   X'20'              APPLID PREVIOUSLY ACTIVE
VSEHELD   EQU   X'10'              HELD TILL SUPERIOR VSE COMPLETES
VSERROR   EQU   X'08'              ERROR OCCURRED PROCESSING VSE
VSEINVA   EQU   X'04'              INVALID VSEAPPL FOUND ON INQUIRE
VSETIMEO  EQU   X'02'              TIMED OUT WAITING FOR APPL TO START
VSETIME   EQU   X'01'              WAITING FOR TIME DELAY EXPIRATION
          SPACE 1
VSETYPE   DC    CL1' '             V => VTAM => ONCE COMMAND IS ISSUED
*                                               INQUIRE MACRO WILL BE
*                                               USED TO WAIT FOR
*                                               COMPLETION.
*                                  C => CMD  => VSE MARKED DONE ONCE
*                                               COMMAND IS ISSUED
          DC    CL1' '             FILLER
VSCOUNT   DC    CL3'   '           INPUT VALUE FOR TIME DELAY DESIRED
*
          DC    CL1' '             FILLER
VSETIMED  DC    CL1' '             T => TIMED ' ' => UNTIMED VSE
*
          DC    CL1' '             FILLER
VSEAPPL   DC    CL8' '             VTAM APPLID ASSOCIATED WITH VSECMD
          DC    CL1' '             FILLER
VSECMD    DC    CL40' '            COMMAND ISSUED WITH SVC 34
VSELPCNT  DC    F'0'               TIMEOUT COUNTER (FILLER)
VSEBIN    DC    F'0'               TIME COUNTER IN BINARY FORMAT
          ORG   VSEDSECT+80
NETINIT   CSECT
          TITLE 'NETINIT - DATA AREAS'
NUMVSE    EQU   50                 MAXIMUM NUMBER OF VSE'S
VSTLEN    DC    AL4(80*NUMVSE)     STORAGE SIZE FOR VST
VSTSTART  DC    AL4(0)             START OF VST            USED
VSTINCR   DC    AL4(L'VSENTRY)     SIZE OF VSE               FOR
VSTEND    DC    AL4(0)             LAST ACTIVE ENTRY IN VST    BXLE
          SPACE 1
SAVEAREA  DC    18F'0'             NETINIT SAVEAREA
NETINADD  DC    A(NETINIT+4096)    BASE REGISTER POINTER
RETSAVE   DC    F'0'               SAVEAREA FOR RETURN ADDRESS
TBLFLAG   DC    X'00'              FLAG SET BY VTAM START OR STOP
          SPACE 1
WAIT1SEC  DC    F'100'             STIMER VALUE FOR 1 SECOND WAIT
GLOFLAG   DC    XL1'00'            FLAG BYTE
GLOEDIT   EQU   X'80'              ERROR EDITTING VSE INPUT
GLOFND1   EQU   X'40'              ATLEAST 1 INCOMPLETE VSE FOUND
GLOERR    EQU   X'20'              ERROR IN PROCESSING A VSE
GLOACBO   EQU   X'10'              ACB IS OPEN
TPENDFLG  DC    XL1'00'            TPEND FLAG BYTE
          SPACE 1
CNTTBL    DS    D                  WORK AREA FOR TIMER CONTROL
SVC34BUF  DS    0CL(4+L'VSECMD)    CMD BUFFER FOR SVC 34
          DC    AL2(L'SVC34BUF)    LENGTH PASSED TO SVC 34
          DC    AL2(0)             MUST BE ZERO
SVC34CMD  DC    CL(L'VSECMD)' '    COMMAND PASSED TO SVC 34
          SPACE 1
APPLPSWD  DC    AL1(8)             LENGTH OF PASSWORD ENTRY
          DC    CL8'        '      PASSWORD FOR ACB PROCESSING
          SPACE 1
DUMPFLAG  DC    XL1'00'            USED TO HOLD ABEND CODE
OPENCODE  EQU   X'80'              FAILURE OPENING ACB
SNOCUR    EQU   X'40'              SHOULD NOT OCCUR ERROR
DUMPEYE   DC    C'ABEND REGISTERS  STORED HERE' HELP FIND REGS IN DUMP
DUMPREGS  DC    16F'0'             REGISTERS PRIOR TO DUMP
          DS    0F
APPLSZ    DS    XL1                DATA AREA SAVE FOR PASSED LENGTH
          SPACE 1
R0        EQU   0
R1        EQU   1
R2        EQU   2
R3        EQU   3
R4        EQU   4
R5        EQU   5
R6        EQU   6
R7        EQU   7
R8        EQU   8
R9        EQU   9
R10       EQU   10
R11       EQU   11
R12       EQU   12
R13       EQU   13
R14       EQU   14
R15       EQU   15
          TITLE 'NETINIT - WTO AND SYSOUT MESSAGES'
EDITERR1  DC    CL80'LEVEL IN ABOVE ENTRY MUST BE NUMERIC'
EDITERR2  DC   CL80'ENTRY TYPE IN ABOVE RECORD MUST BE ''C'' OR ''V''.'
EDITERR3  DC   CL80'REQUEST FOR TIMER MUST BE ''T'' OR ''V''.'
EDITERR4  DC   CL80'THIS MUST BE A BLANK FIELD'
EDITERR5  DC   CL80'TIMER VALUE IS A NON NUMERIC VALUE'
          SPACE 1
          PRINT NOGEN
MSG01     WTO   'BCSC201I SYSIN OR SYSOUT FILE FAILED TO OPEN. EXECUTIOX
               N TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG02     WTO   'BCSC202I MAXIMUM NUMBER OF INPUT COMMAND RECORDS EXCEEX
               DED. EXECUTION TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG03     WTO   'BCSC203I SYSIN FILE IS EMPTY. EXECUTION TERMINATED.', X
               ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG04     WTO   'BCSC204I ERRORS IN SYSIN FILE. EXECUTION TERMINATED.',X
               ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG05     WTO   'BCSC205I VTAM SHUTTING DOWN. EXECUTION TERMINATED.',  X
               ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG06     WTO   'BCSC206I UNABLE TO OPEN ACB AFTER TRYING FOR 5 MINUTESX
               . EITHER VTAM IS DOWN OR THE NETINIT APPL IS INACTIVE.',X
               ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG07     WTO   'BCSC207I NETINIT COMPLETE EXCEPT FOR NOTED ERRORS. CORX
               RECT AND RESTART NETINIT.',ROUTCDE=(8),DESC=(7),        X
               MF=L
          SPACE 1
MSG08     WTO   'BCSC208I NETINIT COMPLETED SUCCESSFULLY.',            X
               ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG09     WTO   'BCSC209I APPLID=XXXXXXXX IS INACTIVE OR INCORRECTLY ONX
               RECORD=',ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG09C    WTO   'BCSC209I XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',ROUTCDE=(8),DESC=(7) X
               ,MF=L
          SPACE 1
MSG10     WTO   'BCSC210I APPLID=12345678 CMD=1234567891123456789212345C
               6789312345',ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG11     WTO   'BCSC211I APPLID=XXXXXXXX HAS NOT STARTED. FIX PROBLEM X
               AND RESTART NETINIT.',ROUTCDE=(8),DESC=(7),MF=L
          SPACE 1
MSG12     WTO   'BCSC212I NETINIT IS ALREADY ACTIVE. EXECUTION TERMINATX
               ED.',ROUTCDE=(8),DESC=(7),MF=L
MSG13     WTO   'BCSC213I TABLE TYPE ENTRY IS NOT VALID. EXECUTION TERMX
               INATED.',ROUTCDE=(8),DESC=(7),MF=L
MSG14     WTO   'BCSC214I UNABLE TO OPEN NETSTOP ACB FOR PROCESSING OF X
               NETWORK SHUTDOWN.',ROUTCDE=(8),DESC=(7),MF=L
MSG15     WTO   'BCSC215I UNABLE TO CLOSE NETSTOP ACB POST OPEN PROCESSX
               DURING SHUTDOWN.',ROUTCDE=(8),DESC=(7),MF=L
          LTORG
          TITLE 'NETINIT - DCB DSECT'
          DCBD
          PRINT GEN
          TITLE 'NETINIT - ACB DSECT'
          IFGACB
          TITLE 'NETINIT - NIB DSECT'
          ISTDNIB
          TITLE 'NETINIT - RPL DSECT'
          IFGRPL
          EJECT
***********************************************************************
*                                                                     *
*                  S T O R A G E                                      *
*                                                                     *
*    THIS ROUTINE CALCULATES AND WTO'S THE FOLLOWING STORAGE SIZES    *
*                                                                     *
*         PRIVATE USER AREA                                           *
*         COMMON AREA = CSA + SQA + PLPA + OTHER                      *
*         NUCLEUS/SYSTEM AREA                                         *
*    NOTE THAT FOR SQA - ONLY THE FIRST DQE ABOVE PLPA IS USED        *
*         OTHER DQE'S ARE FOUND IN THE CSA PQE                        *
*                                                                     *
*    CREATED MAR 04/83 BY L.R. EVANS                                  *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
         TITLE '*****************    S T O R A G E'
***********************************************************************
*                                                                     *
*                  *****************                                  *
*                                                                     *
*                    S T O R A G E                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *
*                     R13  -  CALLERS SAVE AREA                       *
*                     R14  -  RETURN ADDRESS                          *
*                     R0-R12  NOT USED                                *
*                                                                     *
*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO STORAGE                *
*                     R15     ZERO                                    *
*                                                                     *
*                                                                     *
*  REGISTER USAGE:                                                    *
*                                                                     *
*         R0  - MACRO WORK REGISTER                                   *
*         R1  - PARAMETERS TO MACROS, SVC'S                           *
*         R2  - WORK REG                                              *
*         R3  - SPQEBASE / DQEBASE BASE REGISTERS                     *
*         R4  - GDABASE BASE REGISTERS                                *
*         R5  - CVTBASE BASE REGISTER                                 *
*         R6  - WORK REGISTER                                         *
*         R7  - WORK REGISTER                                         *
*         R8  - WORK REGISTER                                         *
*         R9  - WORK REGISTER                                         *
*         R10 - WORK REGISTER                                         *
*         R11 -                                                       *
*         R12 - BASE REGISTER                                         *
*         R13 - ADDRESS OF SAVE AREA                                  *
*         R14 - RETURN ADDRESS                                        *
*         R15 - ENTRY POINT, RETURN CODES                             *
*                                                                     *
*                                                                     *
*  ATTRIBUTES: SERIALLY REUSEABLE , NON-AUTHORIZED,                   *
*                                                                     *
*  CONTROL BLOCK DEPENDENCIES: CVT                                    *
*                                                                     *
*  ROUTINES CALLED: NONE                                              *
*                                                                     *
*  ********* MACROS USED:                                             *
*                                                                     *
*  SYSTEM MACROS USED: CVT, IHAGDA IHAPQE IHASPQE IHADQEMER, WTO      *
*                                                                     *
*                                                                     *
*  MESSAGES TO TERMINAL USER:                                         *
*                                                                     *
*                                                                     *
*  MESSAGES TO THE SYSLOG:                                            *
*                                                                     *
*             'BCSC216I PVT=****************K,COMMON=****************K,
*              NUCLEUS/SYSTEM=****************K'
*                                                                     *
*             'BCSC217I CSA=****************K,PLPA=****************K,SQ
*              A=****************K'
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*  RESTRICTIONS:                                                      *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE '*********  S T O R A G E - M A I N L I N E'
STORAGE  CSECT
***********************************************************************
*        STORAGE MAIN-LINE CODE INITIALIZATION                        *
***********************************************************************
         SPACE 2
STORSTRT B     STORSTM-STORSTRT(0,15)  JUMP OVER APPL NAME
         DC    CL8'STORAGE  '          MODULE NAME
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME
STORSTM  STM   14,12,12(13)            SAVE REGISTERS
         LR    R12,R15                 LOAD BASE REGISTER
         USING STORSTRT,R12            TELL ASSEMBLER
         ST    R13,STORSAVE+4          CHAIN SAVE AREAS
         LR    R15,R13
         LA    R13,STORSAVE            POINT R13 TO NS SAVE AREA
         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN
*
*        ESTABLISH ADDRESSABILITY TO THE CVT & OBTAIN VALUES
*
         SPACE 1
         LA    CVTBASE,X'10'             LOAD PTR TO CVT
         L     CVTBASE,0(CVTBASE)        LOAD ADDR OF CVT
         USING CVTMAP,CVTBASE            ESTABLISH ADDRESSABILITY
         L     R7,CVTNUCB                LOWEST ADDR NOT IN NUCLEUS
         SRA   R7,10                     DIVIDE BY 1024 TO OBTAIN K
         L     R8,CVTSHRVM               LOWEST ADDR OF CSA
         SRA   R8,10                     DIVIDE BY 1024 TO OBTAIN K
         L     R9,CVTMZ00                HIGHEST ADDR OF VIRTUAL STRG
         AH    R9,=H'1'                  ADD 1 FOR PAGE BOUNDARY
         SRA   R9,10                     DIVIDE BY 1024 TO OBTAIN K
         L     R10,CVTREAL               LOWEST V=V REGION ADDRESS
         SRA   R10,10                    DIVIDE BY 1024 TO OBTAIN K
         SPACE 1
*
*        NUCSTRG = LOWEST ADDR NOT IN NUCLEUS
*
         CVD   R7,WORKAREA               CVD NUCSTRG
         MVC   WTONUC(LENPTN),EDITPTN    MOVE IN EDIT PATTERN
         ED    WTONUC(LENPTN),WORKAREA   AND EDIT IT
ENDNUC   EQU   *
*
*        COMMSTRG = 1 + TOP ADDR OF VIRTUAL STRG - LOWEST ADDR OF CSA
*
         LR    R6,R9                     1 + TOP ADDR OF VIRTUAL STRG
         SR    R6,R8                     LESS LOWEST ADDR OF CSA
         CVD   R6,WORKAREA               CVD COMMON STORAGE
         MVC   WTOCOMM(LENPTN),EDITPTN   MOVE IN EDIT PATTERN
         ED    WTOCOMM(LENPTN),WORKAREA  AND EDIT IT
ENDCOMM  EQU   *
*
*        PVTSTRG  = LOWEST ADDR OF CSA - LOWEST V=V REGION ADDRESS
*
         LR    R6,R8                     LOWEST ADDR OF CSA
         SR    R6,R10                    LESS V=V REGION ADDRESS
         CVD   R6,WORKAREA               EQUALS PVTSTRG
         MVC   WTOPVT(LENPTN),EDITPTN    MOVE IN EDIT PATTERN
         ED    WTOPVT(LENPTN),WORKAREA   AND EDIT IT
ENDPVT   EQU   *
*
*        CSASTRG IS CONTAINED IN THE CSA PQE
*
         L     GDABASE,CVTGDA            OBTAIN ADDR OF GDA
         USING GDA,GDABASE               AND ESTABLISH ADDRESSABILITY
         L     PQEBASE,CSAPQEP           OBTAIN ADDR OF CSA PQE
         USING PQESECT,PQEBASE           AND ESTABLISH ADDRESSABILITY
         L     R6,PQESIZE                ACCUMULATE PQE REGION SIZE
         SRA   R6,10                     DIVIDE BY 1024 TO OBTAIN K
         CVD   R6,WORKAREA               EQUALS CSASTRG
         MVC   WTOCSA(LENPTN),EDITPTN    MOVE IN EDIT PATTERN
         ED    WTOCSA(LENPTN),WORKAREA   AND EDIT IT
ENDCSA   EQU   *
*
*        SQASTRG IS CONTAINED IN THE SQA DQE
*                N. B. ONLY THE STORAGE ABOVE PLPA IS INCLUDED
*
         L     SPQEBASE,SQASPQEP         OBTAIN ADDR OF SQA SPQE
         USING SPQESECT,SPQEBASE         AND ESTABLISH ADDRESSABILITY
         L     DQEBASE,SPDQEPTR          OBTAIN ADDR OF SQA DQE
         USING DQESECT,DQEBASE           AND ESTABLISH ADDRESSABILITY
         L     R6,DQELNTH                OBTAIN DQE SIZE
         SRA   R6,10                     DIVIDE BY 1024 TO OBTAIN K
         CVD   R6,WORKAREA               EQUALS SQASTRG
         MVC   WTOSQA(LENPTN),EDITPTN    MOVE IN EDIT PATTERN
         ED    WTOSQA(LENPTN),WORKAREA   AND EDIT IT
ENDSQA   EQU   *
*
*        PLPASTRG IS LOWEST ADDR OF SQA - CVTLPDIR
*
         L     R6,DQEBLKAD               LOWEST ADDR OF SQA FROM DQE
         XR    R2,R2
         ICM   R2,7,CVTLPDIR             LESS
         SR    R6,R2                     START OF PLPA
         SRA   R6,10                     DIVIDE BY 1024 TO OBTAIN K
         CVD   R6,WORKAREA               EQUALS PLPASTRG
         MVC   WTOPLPA(LENPTN),EDITPTN   MOVE IN EDIT PATTERN
         ED    WTOPLPA(LENPTN),WORKAREA  AND EDIT IT
ENDPLPA  EQU   *
*
*        WRITE TO THE SYSTEM LOG VIA WTO
*
         WTO   MF=(E,STRGMSG0)        LOG STORAGE STATISTICS TO
         WTO   MF=(E,STRGMSG1)        SYSLOG VIA WTO
*
*        RETURN TO OS
*
         L     R13,STORSAVE+4          FIND INPUT SAVE AREA
         SR    R14,R14                 CLEAR FORWARD SAVE
         ST    R14,8(,R13)             AREA CHAIN PTR
         LM    R14,R12,12(R13)         LOAD INPUT REGS
         XR    R15,R15                 RCODE=0 FOR NORMAL RTN
*        RETURN
         BR    14                      RETURN TO CALLER OR ATTACHER
         EJECT
         TITLE '********* D A T A A R E A S'
EDITPTN  DC    X'40202020202020202020202020202021'
LENPTN   EQU   *-EDITPTN
WORKPTN  DS    X'40202020202020202020202020202021'
         DS     0F
STORSAVE DS    16F
WORKAREA DS      D
         SPACE 2
         TITLE '********* W T O '' S'
         SPACE 3
STRGMSG0 WTO  'BCSC216I PVT=****************K,COMMON=****************K,X
               NUCLEUS/SYSTEM=****************K',ROUTCDE=(8),DESC=(7), X
               MF=L
WTOPVT   EQU   STRGMSG0+17
WTOCOMM  EQU   STRGMSG0+42
WTONUC   EQU   STRGMSG0+75
STRGMSG1 WTO  'BCSC217I CSA=****************K,PLPA=****************K,SQX
               A=****************K',ROUTCDE=(8),DESC=(7),MF=L
WTOCSA   EQU   STRGMSG1+17
WTOPLPA  EQU   STRGMSG1+40
WTOSQA   EQU   STRGMSG1+62
         SPACE 3
         TITLE '*********  E Q U A T E S '
PQEBASE  EQU   3                       PQE BASE REG
SPQEBASE EQU   3                       SPQE BASE REG
DQEBASE  EQU   3                       DQE BASE REG
GDABASE  EQU   4                       GDA BASE REG
CVTBASE  EQU   5                       CVT BASE REG
         TITLE '*********  D S E C T S - '
         PRINT  NOGEN
         CVT    DSECT=YES
         IHAGDA DSECT=YES
         IHAPQE
         IHASPQE
         IHADQE
         PRINT  GEN
         TITLE '*********  M A I N L I N E'
STORAGE  CSECT
         LTORG
          END   NETINIT
