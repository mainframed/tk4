***********************************************************************
*   UPDATED JAN 14/82 BY LRE TO :
*           1/ DELETE LOSTERM MSG 'LOSTMSG' WTO
*           2/ DELETE MENU WRITTEN FROM LOGON MSG 'LOGMENU' WTO
*   UPDATED JAN 18/82 BY LRE TO :
*           1/ DELETE LISTWTO MSG 'TERMINAL RELEASED DUE TO I/O ERR
*           2/ ALTER CASE OF RTNCD-FDBK2=1413 LOGIC TO FREE RPL &
*                    EXIT.
*   UPDATED FEB 02/82 BY LRE TO :
*           1/ CORRECT LOGIC ERROR NEAR LABEL REQERR
*   UPDATED FEB 17/82 BY LRE TO :
*           1/ ADD APPLICATIONS TPNSMONA & TPNSMONB
*   UPDATED APR 23/82 BY LRE TO :
*           1/ ALLOW CD OPERATION VIA LOGMODE=0 ON FRESHNIB MACRO
*   UPDATED MAY 15/82 BY LRE TO :
*           1/ ALTER NODENAMES AS PER NEW NAMING STDS
*   UPDATED MAY 20/82 BY LRE TO :
*           1/ CORRECT LOGMDHCF TO SHCF
*   UPDATED MAY 28/82 BY LRE TO :
*           1/ UPDATE LOGO TO DISPLAY SCRSIZE
*   UPDATED JUN  6/82 BY EFP TO :
*           1/ ADD LOGON CMDS FOR ICBC APPLICATIONS
*   UPDATED JUN 24/82 BY LRE TO :
*           1/ ALTER SCREENSIZE DISPLAY TO MODEL NUMBER DISPLAY
*   UPDATED JUL  6/82 BY EFP TO :
*           1/ CHANGE SIMLOGON FROM SYNC TO ASYNC REQUEST
*           2/ CHANGE INQUIRES FROM SYNC TO ASYNC REQUESTS
*           3/ MOVE CMDTAB TO INCREASE ADDRESSABILITY
*   UPDATED AUG 24/82 BY LRE TO :
*           1/ ALTER LOSTERM EXIT TO REPLACE 'RELEASE & REACQUIRE' TO
*              'RELEASE' AS LOGAPPL=NETSOL WILL REACQUIRE THE TERMINAL
*   UPDATED SEP 20/82 BY LRE TO :
*           1/ REMOVE SIMLOGONS TO NETSOL AS LOGAPPL=NETSOL WILL PERFRM
*              THE TASK.  THIS CODE CAN BE CLEANED UP AFTER IT IS
*              DETERMINED THAT NETSOL LOGIC IS OK.
*           2/ ADD IIMS AND VSPC TO THE 3270 APPLICATION MENU
*   UPDATED NOV 01/82 BY LRE TO :
*           1/ UPDATE TERMLTAB FROM 1536 TO 2560 FOR S40D TESTING.
*              REGION SIZE WILL ALSO REQUIRE BUMPING BY 64K
*   UPDATED NOV 03/82 BY BJH TO :
*           1/ DETECT POWER OFF CONDITION AND RELEASE TERMINAL
*           2/ DO A CLOSER CHECK ON BIND CHARACTERS TO ELIMINATE RJE"S
*           3/ ADD AN ENTRY TO TRANSLATE TABLE TO HANDLE A CPICS
*              TRANSACTION AFTER THE TERMINAL HAS BEEN LOST
*   UPDATED JAN 03/83 BY BJH TO :
*           1/ TRANSLATE MSG 12 TO MSG4 FOR ALL CPIC TERMINALS
*              B038A01 AND R025A01
*           2/ ADD ANOTHER ENTRY TO THE TRANSLATE TABLE TO HANDLE
*              OTHER CPICS TRANSACTIONS
*   UPDATED JAN 26/83 BY BJH TO :
*           1/ TRANSLATE CLEAR KEY TO PFK2 (IMS LOGON FOR CPIC TERMS
*              B038A01 AND R025A01
*           2/ LENGTHEN MSG4 FOR CPIC TERMS B038A01 AND R025A01 SO
*              THE DATE IS NOT TRUNCATED BY CPIC"S PDP11
*   UPDATED FEB ??/83 BY BJH TO :
*              UPDATE CMD TABLE TO ALLOW USE OF TSOC (SEYMORE MINI
*              SYSTEM
*   UPDATED FEB 15/83 BY BJH TO :
*            / DETECT SENSE CODE OF 10 AND SENSEI OF 05 (RTNCD 4)
*              WHICH INDICATES AN INVALID SBA. THIS IS PROBABLY A 8775
*              EMULATING A MODEL 1 AND GETTING A LOGO.  SO SEND THEM
*              AN ERRORMSG TELLING THEM WHAT TO DO
*   UPDATED MAY 13/83 BY LRE TO :
*            / UPDATE CPIC NODENAMES TO Y0ACA01;Y0AEA01;Y0A5A01;
*              Z0B8A01
*   UPDATED MAY 20/83 BY LRE TO :
*            / ADD COMMANDS OMEGIMSA AND OMEGIMSB ASSOCIATED
*              WITH APPLICATIONS SOIMA AND SOIMB
*   UPDATED MAY 25/83 BY CRC & LRE TO:
*            / ADD BSC ERROR RECOVERY AS PER ACF/VTAM V2 PROGRAMMING
*              CHAPTER 11 LU TYPE 0 3270 TERMINALS - EXCEPTION
*              CONDITIONS AND SENSE INFORMATION
*   UPDATED JUN 07/83 BY LRE
*            / ADD COMMAND PHOENIX
*   UPDATED JUN 09/83 BY LRE
*            / COMPLETE MAY 25 UPDATE
*   UPDATED JUN 10/83 BY EFP
*            / ADD CARRIAGE RETURN AT START OF 3767 MESSAGES TO SUPPORT
*              HALF DUPLEX OPERATION WITH 1067N.
***********************************************************************
         MACRO
&LABEL   $CMD  &GAPPL,&VAPPL,&ROUT,&CMDTEXT,&CMDFLAG
.*
.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S COMMAND LOOK-UP TABLE.
.*
.*  INPUT    : &GAPPL   - GENERALIZED APPLICATION NAME.
.*             &VAPPL   - ASSOCIATED VTAM APPLICATION NAME.
.*             &ROUT    - ROUTINE TO PROCESS THE COMMAND.
.*             &CMDTEXT - COMMAND ENTERED FROM TERMINAL.
.*             &CMDFLAG - COMMAND FLAG BYTE.
.*
.*  OUTPUT   : AN ENTRY IN NETSOL'S COMMAND ENTRY TABLE IS GENERATED.
.*
.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES
.*
.*  DATE     : APR  15/81
.*
         LCLA  &L
&L       SETA  K'&CMDTEXT-2
&LABEL   DC    CL8'&GAPPL',CL8'&VAPPL',CL8&CMDTEXT,AL4(&ROUT),AL2(&L),AX
               L1(&CMDFLAG,0)
         MEND
         MACRO
&LABEL   $GP   &GPLEN,&ERRTEXT,&GPFLAG
.*
.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S GETPARM OPTION LIST.
.*
.*  INPUT    : &GPLEN   - MAXIMUM LENGTH OF PARAMETER.
.*             &ERRTEXT - TEXT FOR ERROR MSG FROM GETPARM ROUTINE.
.*             &GPFLAG  - OPTION BYTE FOR GETPARM.
.*
.*  OUTPUT   : A PARAMETER OPTION LIST
.*
.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES
.*
.*  DATE     : JUNE 19/81
.*
         LCLA  &L
&L       SETA  K'&ERRTEXT-2
&LABEL   DC    AL2(&GPLEN,&L),AL1(&GPFLAG),CL&L&ERRTEXT
         MEND
         SPACE 2
         COPY $3270INT
         SPACE 2
         TITLE '*****************    N E T S O L'
***********************************************************************
*                                                                     *
*                  *****************                                  *
*                                                                     *
*                    N E T W O R K                                    *
*                                                                     *
*                  S O L I C I T O R                                  *
*                                                                     *
*                   ( N E T S O L )                                   *
*                                                                     *
*                                                                     *
*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *
*                     R13  -  CALLERS SAVE AREA (FROM ATTACH)         *
*                     R14  -  RETURN ADDRESS (POINTS TO SVC 3 IN CASE *
*                             OF ATTACH BY NET)                       *
*                     R0-R12  NOT USED                                *
*                                                                     *
*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO NETSOL                 *
*                     R15     ZERO                                    *
*                                                                     *
*  FUNCTION:  NETSOL IS USED TO HANDLE TERMINAL INITIATED LOGONS      *
*             AND AS SUCH SOLICITS LOGON DATA FROM THE TERMINALS      *
*             UNDER ITS CONTROL.                                      *
*                                                                     *
*             WITH THE ABOVE DATA, NETSOL CAN PASS CONTROL OF THE     *
*             LOGICAL UNIT FROM NETSOL'S CONTROL TO THAT OF THE       *
*             REQUESTED APPLICATION.                                  *
*                                                                     *
*             TO FACILITATE ENDUSER EASE OF USE, NETSOL HAS A TABLE   *
*             OF APPLICATIONS THAT USE NON-STANDARD LOGMODE TABLE     *
*             ENTRIES. WHEN THE USER REQUESTS ONE OF THESE            *
*             APPLICATIONS, NETSOL LOADS THE APPROPRIATE LOGMODE      *
*             NAME FROM THE TABLE AND PASSWS THIS INFORMATION         *
*             TO THE APPLICATION DURING THE CLSDST(PASS). THE ENDUSER *
*             IS NOT REQUIRED TO KNOW ABOUT LOGMODE TABLES. THE       *
*             NAME OF THIS TABLE IS 'LOGMDTAB'.                       *
*                                                                     *
*             THE 'LOGOFF' COMMAND HAS BEEN ADDED TO NETSOL TO ALLOW  *
*             8100-ATTACHED TERMINALS TO DISCONNECT FROM NETSOL. 8100 *
*             TERMINALS ARE GENNED WITH A NULL 'LOGAPPL'. LOGOFF     .*
*             ENTERED AT A STANDARD 3270 TERMINAL, WILL HAVE NO       *
*             EFFECT SINCE LOGAPPL=NETSOL FOR THESE TERMINALS.        *
*                                                                     *
*             ERROR MESSAGES CAN BE ISSUED AT VARIOUS STAGES OF THIS  *
*             PROCESS IF THE APPLICATION IS INACTIVE, LOGON DATA      *
*             ENTERED IS INVALID, APPLICATION WON'T ACCEPT LOGONS,ETC.*
*             ALL ERROR MESSAGES ISSUED BY NETSOL ARE PREFIXED WITH   *
*             THE CHARACTER STRING 'BCSC'.                            *
*                                                                     *
*             TO AID IN DEBUGGING, NETSOL ALSO WRITES SOME MESSAGES   *
*             TO THE OPERATORS CONSOLE WHEN ERRORS AE DETECTED AS A   *
*             RESULT OF I/O ERRORS, INVALID LOGONS, ETC.              *
*                                                                     *
*             NETSOL SUPPORTS BISYNC AND SDLC 3270 DEVICES (3276'S,   *
*             3275'S, 3276'S, AND 3278'S).                            *
*                                                                     *
*             NETSOL USES RECORD MODE I/O TO TALK TO ITS TERMINALS    *
*             SO IT DOES NOT SUPPORT ANY TERMINALS THAT CAN BE        *
*             ACCESSED VIA BASIC MODE I/O ONLY.                       *
*                                                                     *
*             TO AID IN CONTROLLING THE TERMINALS LOGGED ON TO        *
*             NETSOL, NETSOL MAINTAINS A TERMINAL TABLE WHICH HAS     *
*             AN ENTRY FOR EACH TERMINAL THAT HAS BEEN LOGGED ON      *
*             AT ANY TIME SINCE NETSOL WAS FIRST BROUGHT UP. THESE    *
*             TERMINAL TABLE ENTRIES (TTE'S) ARE USED TO PROVIDE      *
*             A MEANS OF TRANSLATING A GIVEN CID TO THE LU NAME AND   *
*             WHEN THE RELEASE-REQUEUE (RELREQ) EXIT NEEDS TO KNOW    *
*             THE STATUS OF A GIVEN TERMINAL (IE IS IT TRYING TO      *
*             DO A LOGON).                                            *
*                                                                     *
*             MOST OF NETSOL'S FUNCTIONS ARE PERFORMED IN VARIOUS     *
*             EXITS AS FOLLOWS:                                       *
*                                                                     *
*             1) TPEND EXIT        - HANDLE 'Z NET' FUNCTION          *
*                                    WHERE NETSOL IS TO SHUT DOWN.    *
*                                                                     *
*             2) LOGON EXIT        - HANDLES TERMINALS BEING LOGGED   *
*                                    ON TO NETSOL. BUILDS OR UPDATES  *
*                                    TTE, DOES OPNDST(ACCEPT), AND    *
*                                    SENDS THE FORMATTED LOGON SCREEN *
*                                    TO THE TERMINAL.                 *
*                                                                     *
*             3) LOSTERM EXIT      - HANDLE 'LOST TERMINAL' CONDITIONS*
*                                    DUE TO LU/PU/LINK/NCP FAILURES.  *
*                                    DEPENDING ON THE CONDITION, MAY  *
*                                    ATTEMPT TO RECOVER THE TERMINAL. *
*                                                                     *
*             4) RELREQ EXIT       - HANDLE RELEASE-REQUEUE REQUESTS  *
*                                    WHERE ANOTHER VTAM APPLICATION   *
*                                    WANTS THE TERMINAL OWNED BY      *
*                                    NETSOL. UNLESS A LOGON IS TAKING *
*                                    PLACE, NETSOL RELEASES THE LU.   *
*                                                                     *
*             AS WELL, A NUMBER OF RPL EXITS ARE USED TO HANDLE       *
*             RPL COMMANDS THAT ARE DONE ASYNCHRONOUSLY VIA RPL'S     *
*             THAT ARE GETMAINED WHEN NEEDED. THESE EXITS ARE:        *
*                                                                     *
*             1) OPNDST END EXIT   - ENTERED WHEN AN ASYNCHRONOUS     *
*                                    OPDNST TO A SPECIFIC TERMINAL    *
*                                    COMPLETES.                       *
*                                                                     *
*             2) RECEIVE END EXIT  - ENTERED WHEN A RECEIVE(ANY) RPL  *
*                                    IS POSTED COMPLETE. EXAMINES THE *
*                                    DATA ENTERED FOR A LOGON REQUEST *
*                                    FROM THE TERMINAL USER.          *
*                                                                     *
*             3) END OF SEND EXIT  - ENTERED WHEN AN ASYNCHRONOUS     *
*                                    SEND TO THE TERMINAL COMPLETES.  *
*                                                                     *
*             4) CLSDST(PASS) END  - ENTERED WHEN THE CLSDST(PASS)    *
*                                    COMPLETES THAT PASSES CONTROL    *
*                                    TO THE APPLICATION REQUESTED.    *
*                                    NETSOL NO LONGER SIMLOGONS TO    *
*                                    GAIN CONTROL BACK WHEN USER      *
*                                    LOGS OFF THE APPLICATION         *
*                                                                     *
*             5) CLSDST(RELEASE)   - ENTERED WHEN CLSDST(RELEASE)     *
*                                    COMPLETES. DONE DUE TO RELREQ    *
*                                    REQUEST OR I/O ERRORS.           *
*                                                                     *
*             AS WELL, NETSOL MAKES USE OF A NUMBER OF SUBROUTINES    *
*             AS FOLLOWS:                                             *
*                                                                     *
*             1) GETRPL            - OBTAIN DYNAMIC RPLS VIA A        *
*                                    GETMAIN FROM SUBPOOL 1           *
*                                                                     *
*             2) FREERPL           - FREEMAIN DYNAMIC RPL'S           *
*                                                                     *
*             3) RECSUB            - ISSUE RECEIVE ANY'S              *
*                                                                     *
*             4) ERROR EXIT        - HANDLES ERRORS WHEN A CHECK      *
*                                    MACRO IS USED ON AN ASYNC RPL    *
*                                    OR A SYNC RPL COMPLETES. PASSES  *
*                                    BACK RETURN CODES AND A MODIFIER *
*                                    (USUALLY ERROR MESSAGE NUMBER)   *
*                                    TO CODE AFTER THE INSTRUCTION    *
*                                    THAT MADE THE MACRO CALL         *
*                                                                     *
*                                                                     *
*  REGISTER USAGE:                                                    *
*                                                                     *
*         R0  - ERROR MESSAGE NUMBER, PARAMETERS, SVC'S, ETC          *
*         R1  - PARAMETERS TO MACROS, SVC'S                           *
*         R2  - WORK                                                  *
*         R3  - -> TTE IN MOST CASES / WORK                           *
*         R4  - WORK                                                  *
*         R5  - -> DYNAMIC RPL / SYNCHRONOUS RPL                      *
*         R6  - WORK                                                  *
*         R7  - WORK  (ADDRESS OF ERROR SOMETIMES ON BAL R7,SNOCCUR)  *
*         R8  - -> ASYNCHRONOUS / SYNCHRONOUS NIB                     *
*         R9  - -> DDT WHEN DOING DEVICE DEP WORK / WORK              *
*         R10 - BASE REGISTER 3                                       *
*         R11 - BASE REGISTER 2                                       *
*         R12 - BASE REGISTER 1                                       *
*         R13 - ADDRESS OF SAVE AREA (USUALLY IN DYNAMIC RPL)         *
*         R14 - RETURN ADDRESS                                        *
*         R15 - ENTRY POINT, RETURN CODES                             *
*                                                                     *
*                                                                     *
*  ATTRIBUTES: SERIALLY REUSEABLE , NON-AUTHORIZED, VTAM APPLICATION  *
*                                                                     *
*  CONTROL BLOCK DEPENDENCIES: RPL, ACB, NIB, EXIT PARAMETER LISTS    *
*                                                                     *
*  ROUTINES CALLED: NONE                                              *
*                                                                     *
*  ********* MACROS USED: DCLSW, GOIF, SET, RESET, EXECUTE            *
*                                                                     *
*  SYSTEM MACROS USED: SAVE, GETMAIN, FREEMAIN, STIMER, OPEN,         *
*                      WAIT, WTO, CLOSE, ABEND, POST, CHECK           *
*                                                                     *
*  VTAM MACROS USED:  SETLOGON, OPNDST, INTRPRET, INQUIRE,            *
*                     GENCB, CLSDST, SIMLOGON, SEND, RECEIVE          *
*                                                                     *
*  MESSAGES TO TERMINAL USER:                                         *
*                                                                     *
*             LOGON SCREEN WITH BCSC LOGO.                            *
*                                        ENTERED BY THE TERMINAL USER)*
*                                                                     *
*             BCSC101          LOGMODE ENTRY UNDEFINED                *
*                                                                     *
*             BCSC102 INVALID LOGON SEQUENCE , REENTER                *
*                                                                     *
*             BCSC103 NO INTERPRET TABLE SPECIFIED FOR LU             *
*                                                                     *
*             BCSC104 NO INTERPRET ROUTINE TO RECOGNIZE APPLICATION   *
*                                                                     *
*             BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION          *
*                                                                     *
*             BCSC106 LOGON IN PROGRESS                               *
*                                                                     *
*             BCSC107 XXXXXXXX NOT DEFINED TO VTAM                    *
*                                                                     *
*             BCSC108 XXXXXXXX IS NOT ACTIVE OR LOGMODE INVALID       *
*                                                                     *
*             BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS             *
*                                                                     *
*             BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS                 *
*                                                                     *
*             BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS       *
*                                                                     *
*                                                                     *
*  MESSAGES TO THE SYSTEM OPERATOR:                                   *
*                                                                     *
*             BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL       *
*                     DUE TO I/O ERROR                                *
*                                                                     *
*             BCSC002 RC=42 ON NETSOL CLOSE ACB                       *
*                                                                     *
*             BCSC003 SYNAD/LERAD EXIT REQ=**,FBDK2=**,SSENSEI=**,    *
*                     SSENSMI=**,SENSE=****,TERM=********             *
*                                                                     *
*             BCSC004 LOSTERM ENTRY CODE ** FOR TERM=********         *
*                                                                     *
*             BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST    *
*                                                                     *
*             BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS    *
*                     PROGRAM IS TERMINATED.                          *
*                                                                     *
*             BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT       *
*                                                                     *
*  USER ABEND CODES:  U0001 - PROBLEM WITH OPEN OF THE ACB            *
*                     U0002 - SETLOGON FAILED                         *
*                     U0004 - RETURN CODE/SENSE CODE NOT EXPECTED     *
*                     U0008 - PROBLEM WITH THE TERMINAL TABLE (TTE)   *
*                                                                     *
*                                                                     *
*  RESTRICTIONS:                                                      *
*                                                                     *
*        1) THE TERMINAL TABLE HAS ONLY ROOM FOR 256 TERMINALS (4K),  *
*           IF MORE ARE NEEDED, THE CONSTANT 'TERMLTAB' WILL HAVE TO  *
*           BE CHANGED WITH A ZAP OR BY RE-ASSEMBLY OF NETSOL.        *
*                                                                     *
*        2) ONLY RECORD MODE DEVICES ARE CURRENTLY SUPPORTED.         *
*                                                                     *
*        3) NO DEVICES ARE CURRENTLY SUPPORTED THAT DO NOT SEND       *
*           3270 CONTROL CHARACTERS (EG SBA X'11'). LOGON CODE        *
*           WOULD HAVE TO BE CHANGED TO SUPPORT THEM.                 *
*                                                                     *
*        4) ANY FIELDS IN THE RPL WORK AREA THAT NEED TO BE ZERO      *
*           INITIALLY SHOULD BE PLACED AHEAD OF THE I/O AREAS AS      *
*           THESE ARE NOT INITIALIZED. IF THE AMOUNT TO BE            *
*           INITIALIZED EXCEEDS 256 BYTES, THE INITIALIZATION AND     *
*           COPY CODE IN GETRPL AND ERREXIT WILL HAVE TO BE CHANGED.  *
*                                                                     *
*        5) NETSOL ASSUMES THAT IT CAN ONLY HAVE ITS LOSTERM EXIT     *
*           ENTERED FOR TERMINALS WHOSE CID'S CAN BE FOUND IN THE     *
*           TERMINAL TABLE. A U0008 ABEND WILL OCCUR IF NOT FOUND.    *
*                                                                     *
*        6) NETSOL OBTAINS THE SYSTEM ID FOR CHANGING '***OLT**'      *
*           APPLICATION ID'S USING SVC 253. IF THIS FUNCTION CHANGES, *
*           NETSOL WILL HAVE TO BE LOOK AT                            *
*                                                                     *
*        7) BE CAREFUL OF CHANGING CODE THAT SETS BRACKET STATES AS   *
*           YOU MAY CAUSE ERRORS ON THE 3276 (MUST SEND BCSC106 WITH  *
*           AND END BRACKET BECAUSE IF THE CLSDST(PASS) FAILS AND WE  *
*           SEND AN ERROR MESSAGE (BCSC108) TO THE 3276, GET A X'0404'*
*           WITH A SENSE OF '081B' INDICATING BAD STATE).             *
*                                                                     *
*                                                                     *
*  VERSION:  *********  NETSOL   DC18202                              *
*                                                                     *
*  LAST UPDATE: FEB 27, 1979
*                                                                     *
*                                                                     *
*        F O R   F U R T H E R   I N F O R M A T I O N   O N          *
*          T H I S   P R O D U C T   S E E   T H E                    *
*              N E T S O L   D O C U M E N T A T I O N                *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE '*********  N E T S O L  -  INITIAL DECLARATIONS'      *
         SPACE 2
         TITLE '*********  N E T S O L  -  MAINLINE'
NETSOL   CSECT
         SPACE 2
***********************************************************************
*        NETSOL MAIN-LINE CODE INITIALIZATION                         *
*        REQUIRES OS/VS2 MVS RELEASE 3.7 + ACF/VTAM (SU 35+40)        *
***********************************************************************
         SPACE 2
START    B     STM-START(0,15)         JUMP OVER APPL NAME
NSNAME   DC    AL1(8),CL8'NETSOL  '    LOGON APPLID NAME FOR NETSOL
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME
STM      STM   14,12,12(13)            SAVE REGISTERS
         LR    R12,R15                 LOAD 1ST BASE REGISTER
         USING START,R12,R11,R10       TELL ASSEMBLER
         LM    R10,R11,RESTBASE        REST OF BASES
         ST    R13,MAINSAVE+4          CHAIN SAVE AREAS
         LR    R15,R13
         LA    R13,MAINSAVE            POINT R13 TO NS SAVE AREA
         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN
         SPACE 2
         USING IFGRPL,PTRRPL           => R P L
         USING ISTDNIB,PTRNIB          => N I B
         USING TERMTABL,R3             => TERMINAL TABLE ENTRY
         USING DDT,R9                  => DEVICE DEPENDENT TABLE
         SPACE 2
***********************************************************************
*        IF THE APPLID FIELD DOESN'T CONTAIN 'NETSOL' FOR THE         *
*        APPLICATION NAME, THIS CODE WILL MOVE THE CONTENTS OF NSNAME *
*        INTO MESSAGE 12 FOR EACH OF THE SUPPORTED DEVICES TO ALLOW   *
*        FOR EASY VISUAL IDENTIFICATION OF THE TEST VERSION OF NETSOL.*
***********************************************************************
         SPACE 1
         CLC   NSNAME+1(8),=CL8'NETSOL' PRODUCTION VERSION OF NETSOL?
         BE    GETTAB                   YES => BR TO GET TERM TABLE
         L     R1,=AL4(S32NSCOM)        NO  => UPDATE 3270
         MVC   0(8,R1),NSNAME+1                   MSG 12
         L     R1,=AL4(S3ENSCOM)        NO  => UPDATE 3270 EXTENDED
         MVC   0(8,R1),NSNAME+1                   MSG 12
         L     R1,=AL4(S37NSCOM)        NO  => UPDATE 3767
         MVC   0(8,R1),NSNAME+1                   MSG 12
*        SPACE 2
***********************************************************************
*        OBTAIN SPACE FROM SUBPOOL 2 FOR THE TERMINAL TABLE. THIS     *
*        TABLE IS USED TO MAINTAIN THE TERMINAL NAME, CID, AND LOGON  *
*        STATUS FOR ALL TERMINALS CONNECTED TO NETSOL. BY USING THIS  *
*        TABLE AND PROVIDING ENTRY ADDRESS IN THE RPL USER FIELD, WE  *
*        SAVE ON HAVING TO DO CID TRANSLATES FOR NAMES.               *
***********************************************************************
         SPACE 1
GETTAB   L     R0,TERMLTAB             GET LENGTH FOR GETMAIN
         ICM   R0,8,=X'02'             ADD SUBPOOL=2 TO IT
         GETMAIN R,LV=(0)              GET SPACE FOR TABLE
         ST    R1,TERMTABS             SAVE STARTING ADDRESS
         A     R1,TERMLTAB             COMPUTE END ADDRESS
         ST    R1,TERMTEND             SAVE IT TOO
         SPACE 1
RTRYOPEN DS    0H
         SR    R15,R15                 CLEAR RETURN-CODE REGISTER
         OPEN  ACB                     CONNECT NETSOL TO VTAM
         SPACE 2
***********************************************************************
*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *
*   ERREXIT IS NOT ENTERED FOR OPEN ERROR.                            *
***********************************************************************
         SPACE 1
         CLI   ACB+X'31',X'52'         HALT IN PROGRESS ?
         BE    CLSOK                   YES, END THE TASK
         LTR   R15,R15                 SUCCESSFUL OPEN ?
         BZ    OPENOK                  YES, ALLOW LOGONS TO HAPPEN
         SPACE 2
***********************************************************************
*        CHECK FOR AN ACB ERROR CODE OF X'58' WHICH CAN HAPPEN IF     *
*        THE OPERATOR HAS STARTED A SECOND COPY OF NETSOL. IN THIS
*        CASE, TELL THE OPERATOR ABOUT HIS MISTAKE AND TERMINATE
*        EXECUTION.                                                   *
***********************************************************************
         SPACE 1
         CLI   ACB+X'31',X'58'         APPLID ALREADY IN USE?
         BNE   OPENA5A                 NO => CHECK NEXT ERROR
         WTO   MF=(E,LISTWTO6)         TELL OPERATOR HIS MISTAKE
         B     FREETTE                 FREE TTE TABLE AND END
         SPACE 2
***********************************************************************
*        CHECK FOR AN ACB ERROR CODE OF X'5A' WHICH CAN HAPPEN IF     *
*        VTAM IS JUST COMMING UP AND NETSOL'S APPLID IS NOT YET       *
*        ACTIVE. IF THIS IS THE CASE, ISSUE A STIMER WAIT FOR
*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *
***********************************************************************
         SPACE 1
OPENA5A  CLI   ACB+X'31',X'5A'         CAN'T OPEN ACB YET ?
         BE    OPENLOOP                NO, REAL OPEN ERROR
         SPACE 2
***********************************************************************
*        CHECK FOR AN ACB ERROR CODE OF X'5C' WHICH CAN HAPPEN IF     *
*        VTAM IS DOWN. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *
*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *
***********************************************************************
         SPACE 1
         CLI   ACB+X'31',X'5C'         CAN'T OPEN ACB YET ?
         BE    OPENLOOP                NO, REAL OPEN ERROR
         SPACE 2
***********************************************************************
*        CHECK FOR AN ACB ERROR CODE OF X'70' WHICH CAN HAPPEN IF     *
*        NETSOL ABENDS AND IS RE-ATTACHED BY VTAM AND VTAM HAS NOT    *
*        YET SUCCESSFULLY FINISHED CLEANUP PROCESSING FOR             *
*        NETSOL'S ACB. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *
*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *
***********************************************************************
         SPACE 1
         CLI   ACB+X'31',X'70'         CAN'T OPEN ACB YET ?
         BNE   OPENFAIL                NO, REAL OPEN ERROR
OPENLOOP STIMER WAIT,BINTVL=WAIT1SEC   WAIT 1 SECOND, TRY AGAIN
         B     RTRYOPEN                GO AND RETRY OPERATION
         EJECT
***********************************************************************
*        READ THE INITIALIZATION FILE CONTAINING NETSOL COMMANDS      *
*        WHICH ESTABLISH AUTO LOGON,WTO MSG DEFAULTS,ETC.             *
*        AN ASYNC RPL WILL BE USED WHEN PROCESSING THESE INIT CMDS.   *
***********************************************************************
         SPACE 1
OPENOK   DS    0H
         BAL   R14,GETRPL              GET RPL FOR INIT CMD USE.
         BAL   R14,READINIT            PROCESS INIT CMDS
         BAL   R14,RECSUB              NOW REUSE RPL FOR RECEIVE
         EJECT
***********************************************************************
*        BEFORE ALLOWING LOGONS TO TAKE PLACE ISSUE 10 RECEIVE ANY'S  *
*        SO WE CAN HANDLE UP TO 10 LOGONS AT A TIME. WHEN THE RECEIVE *
*        EXIT IS SCHEDULED, IT WILL ALSO RE-ISSUE A RECEIVE ANY WITH  *
*        A NEW GOTTEN RPL.                                            *
***********************************************************************
         SPACE 1
         LA    R2,9                    # OF RPLS FOR RECEIVES
GETLOOP  BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE
         BAL   R14,RECSUB              ISSUE RECEIVE ANY
         BCT   R2,GETLOOP              LOOP TILL TEN DONE
         LA    PTRRPL,SETLRPL          POINT TO RPL FOR WORKAREA
         SPACE 2
***********************************************************************
*        ISSUE SETLOGON WITH START OPTION TO ALLOW LOGONS TO TAKE     *
*        PLACE. ANY LOGONS QUEUED FOR NETSOL WILL NOW DRIVE NETSOL'S  *
*        LOGON EXIT.                                                  *
***********************************************************************
         SPACE 1
SLOGON   SETLOGON RPL=(PTRRPL),        SYNCH OPERATION. ACT-           X
               OPTCD=START             IVATE LOGON EXIT.
         SPACE 2
***********************************************************************
*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.  IF          *
*   ERREXIT WAS ENTERED, THE VTAM FEEDBACK CODE IN REG 0 WAS          *
*   PLACED IN REG 15 BEFORE RETURNING TO THE MAINLINE NSI.            *
*   ERREXIT DID NOT CHANGE THE RETURN CODES TO ACTION CODES.          *
***********************************************************************
         SPACE 1
         CH    R15,HEX8                NEED TO REISSUE?
         BE    SLOGON                  YES.  DO IT
         LTR   R15,R15                 SETLOGON ACCEPTED ?
         BNZ   SETLFAIL                NO, BRANCH
         LTR   R0,R0                   VALID COMPLETION?
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 2
***********************************************************************
*    ALL FURTHER WORK IN NETSOL IS PERFORMED VIA ASYNCHRONOUS EXIT    *
*    ROUTINES. THE MAINLINE CODE WAITS UPON AN ECB WHICH IS POSTED    *
*    BY THE TPEND EXIT WHEN VTAM SHUTS DOWN NETSOL.                   *
***********************************************************************
         SPACE 1
         WAIT  ECB=FINISECB            WAIT FOR VTAM END
         EJECT
***********************************************************************
*        EXECUTION CONTINUES HERE WHEN ECB IS POSTED BY TPEND EXIT.   *
***********************************************************************
         SPACE 1
         SR    R15,R15                 ZERO RC REG FOR CLOSE
         CLOSE ACB                     RELEASE CONNECTION WITH
         SPACE 2
***********************************************************************
*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *
*   ERREXIT IS NOT ENTERED FOR CLSDSTERROR.                           *
***********************************************************************
         SPACE 1
         LTR   R15,R15                 DID THE CLOSE GO?
         BZ    CLSOK                   YES, EXIT
         CLI   ACB+X'31',X'42'         CLOSE COMPLETE?
         BNE   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         WTO MF=(E,LISTWTO1)           INFORM OPERATER
         SPACE 2
***********************************************************************
*        SINCE WE DON'T KNOW HOW MANY RPL'S ARE OUTSTANDING (MAY BE   *
*        MORE THAN 10), WE FREE THE WHOLE SUBPOOL OF RPL'S AND DO THE *
*        SAME FOR THE TERMINAL TABLE AS WELL.                         *
***********************************************************************
         SPACE 1
CLSOK    FREEMAIN R,SP=1               FREE DYNAMIC RPL SPACE
         SPACE 1
FREETTE  FREEMAIN R,SP=2               FREE TERMINAL TABLE SPACE
         SPACE 1
         L     R13,MAINSAVE+4          FIND INPUT SAVE AREA
         SR    R14,R14                 CLEAR FORWARD SAVE
         ST    R14,8(,R13)             AREA CHAIN PTR
         LM    R14,R12,12(R13)         LOAD INPUT REGS
         SR    R15,R15                 RCODE=0 FOR NORMAL RTN
*        RETURN
         BR    14                      RETURN TO CALLER OR ATTACHER
         EJECT
***********************************************************************
*        THE FOLOWING CODE IS BRANCHED TO FROM THE MAIN-LINE CODE,    *
*        EXIT CODE, AND FROM THE ERREXIT ROUTINE.  THE ONLY ACTION    *
*        TAKEN SINCE THE CASES ARE 'SHOULD NOT OCCUR' CONDITIONS, IS  *
*        TO ABNORMALLY TERMINATE NETSOL WITH A REASON CODE IN         *
*        DUMPFLAG AND CAUSE A DUMP TO BE TAKEN.                       *
***********************************************************************
         SPACE 1
OPENFAIL DS    0H                      OPEN-ACB IN MAIN-LINE FAILED
         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING
         MVI   DUMPFLAG,OPENCODE       SAVE NETSOL DUMP CODE
         B     DUMP                    BRANCH
         SPACE 1
SETLFAIL DS    0H                      SETLOGON IN MAIN-LINE FAILED
         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING
         MVI   DUMPFLAG,SETLCODE       SAVE NETSOL DUMP CODE
         B     DUMP                    BRANCH
         SPACE 1
SNOCCUR  DS    0H                      REQUEST FAILED BECAUSE
*                                       OF AN INVALID CONTROL
*                                       BLOCK OR OTHER CON-
*                                       DITION WHICH SHOULD
*                                       NOT OCCUR
         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING
         CLOSE ACB                     AVOID OPEN FAILURE ON
*                                      RE-DISPATCH OF SUBTASK
         MVI   DUMPFLAG,CBLKCODE       SAVE NETSOL DUMP CODE
         B     DUMP
         SPACE 1
TOOSMALL STM   R0,R15,SNOREGS          SAVE REGS
         MVI   DUMPFLAG,TABLTRBL       TROUBLE WITH TTE
         B     DUMP
         SPACE 1
DUMP     DS    0H                      TERMINATE WITH A DUMP
         SR    R1,R1                   PUT REASON CODE IN REG 1
         IC    R1,DUMPFLAG
         SPACE 1
         ABEND (1),DUMP
         TITLE '*********  N E T S O L  -  MAINLINE DATA AREAS'
MAINSAVE DS    18F                     SAVE AREA FOR MAINLINE
RESTBASE DC    A(START+8192,START+4096) REST OF BASE REG VALUES
WAIT1SEC DC    F'100'                  WAIT TIME OF 1.00 SECS
TERMTABS DC    A(0)                    START OF TERMINAL TABLE  FOR
TERMTABI DC    A(TERMELEN)             INDEX VALUE              BXLE
TERMTABE DC    A(0)                    LAST ENTRY USED ADDRESS  USE
TERMLTAB DC    A(2560*TERMELEN)        SIZE OF TABLE (ENTRIES*LENGTH)
TERMTEND DC    A(0)                    END OF TABLE + 1
         EJECT
         TITLE '*********  N E T S O L  - READ INITIALIZATION COMMANDS'
***********************************************************************
*                                                                     *
*    READINIT PROCESSES THE NETSOL COMMANDS IN THE SYSIN FILE.        *
*    COMMANDS WHICH CAN BE PLACED IN THIS FILE ARE FLAGGED            *
*    WITH 'CMDINIT' IN THEIR CMD TABLE ENTRY.                         *
*                                                                     *
*    TO ALLOW COMMAND PROCESSING ROUTINES TO BE INDEPENDENT OF THEIR  *
*    SOURCE, ALL COMMAND PROCESSORS ASSUME A DDT,TTE AND ASYNC RPL    *
*    AVAILABLE FOR THEIR USE. THEREFORE, THESE CONTROL BLOCKS HAVE    *
*    BEEN SET UP FOR READINIT.                                        *
*                                                                     *
*    INPUT : R5  - A(ASYNC RPL)                                       *
*            R13 - A(SAVE AREA)                                       *
*            R14 - RETURN ADDRESS                                     *
*                                                                     *
*   OUTPUT : REGISTERS ARE UNCHANGED                                  *
*                                                                     *
***********************************************************************
         EJECT
READINIT DS    0H
         SPACE 1
         STM   R14,R12,12(R13)         SET
         ST    R13,RPLSAVE+4             UP
         LA    R1,RPLSAVE                  SAVE
         ST    R1,8(,R13)                    AREA
         LR    R13,R1                          CHAIN
         SPACE 1
*        OPEN SYSIN AND SYSOUT FILES. NETSOL WILL CONTINUE EXECUTION
*        EVEN WITH ERRORS IN THE INIT FILE.
         SPACE 1
         OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT)) OPEN FILES
         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN OPEN?
         BZ    DCBOSYSI                           NO => ERROR MSG
         TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSOUT OPEN?
         BNZ   RIOPENOK                           YES => BR TO CONTINUE
         MVC   DCBMSG+12(6),=CL6'SYSOUT'  MOVE
         B     *+10                        DDNAME
DCBOSYSI MVC   DCBMSG+12(6),=CL6'SYSIN '      TO OPERATOR MSG
         WTO   MF=(E,DCBMSG)             LOG ERROR MESSAGE ON SYSLOG
         B     RIEXIT                    END PROCESSING
         SPACE 1
*        SET UP RPL,TTE AND DDT LINKS FOR INIT
         SPACE 1
RIOPENOK OI    UFLAGS,INIT               FLAG PROCESSING INITIALIZATION
         LA    R3,TTEDUMMY               LOAD A(DUMMY TTE FOR INIT)
         ST    R3,RPLUSFLD               SET UP RPL USER PTR
         L     R9,=AL4(DDTSYSIN)         LOAD A(DDT FOR INIT)
         ST    R9,TERMDDT                SAVE IN TTE
         SPACE 1
*        PROCESS NETSOL COMMANDS FROM THE SYSIN FILE
         SPACE 1
READLOOP LA    R6,IOAREA                 LOAD A(IO BUFFER)
         GET   SYSINDCB,(R6)             READ CMD FROM SYSIN FILE
         PUT   SYSOUDCB,(R6)             ECHO CMD TO SYSOUT FILE
         LA    R2,80                     SET UP REG 2 WIH REC LENGTH
         B     INTRPRET                  BR TO EDIT COMMAND
         SPACE 1
*        RETURN FROM CMD PROCESSING.
*        R0 CONTAINS MSG INDEX FOR OUTPUT MSG
         SPACE 1
RIPUTMSG LR    R1,R0                   LOAD INDEX INTO R1
         BCTR  R1,0                    INDEX - 1
         SLL   R1,2                    4 * (INDEX - 1)
*                                      = DISPLACEMENT OF MESSAGE
         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE
         LH    R1,0(,R2)               PICK UP MSG LENGTH
         LA    R2,2(R2)                SKIP OVER MSG LENGTH
*        MOVE MESSAGE TO OUTPUT BUFFER AND WRITE TO SYSOUT
         MVI   IOAREA,X'40'            INITIALIZE BUFFER
         MVC   IOAREA+1(79),IOAREA       WITH BLANKS
         BCTR  R1,0                    MOVE MESSAGE
         EX    R1,RIEX1                  TO OUTPUT BUFFER
         PUT   SYSOUDCB,IOAREA         WRITE MESSAGE TO SYSOUT FILE
         B     READLOOP                BR TO GET NEXT CMD
         SPACE 1
*        END OF DATA REACHED ON SYSIN FILE
         SPACE 1
EODSYSIN TM    UFLAGS,INITERR          ERROR WHILE PROCESSING CMD FILE
         BNO   RICLOSE                 NO => CONTINUE
         WTO   MF=(E,INITEMSG)         YES => LOG ERROR TO OPERATOR
RICLOSE  CLOSE (SYSINDCB,,SYSOUDCB)    CLOSE SYSIN & SYSOUT
         NI    UFLAGS,X'FF'-INIT       FLAG END OF INIT PROCESSING
         SPACE 1
*        EXIT FROM READINIT
         SPACE 1
RIEXIT   L     R13,4(,R13)             RESTORE
         LM    R14,R12,12(R13)           REGISTERS
         BR    R14                         AND RETURN
         SPACE 5
RIEX1    MVC   IOAREA(0),0(R2)         MOVE MSG TO OUTPUT BUFFER
         TITLE '*********  N E T S O L  - GETPARM SUBROUTINE'
***********************************************************************
*                                                                     *
*    GETPARM LOCATES THE NEXT TEXT UNIT IN THE COMMAND BUFFER.        *
*                                                                     *
*    THIS TEXT UNIT IS VALIDATED FOR:                                 *
*         A) MAXIMUM LENGTH                                           *
*         B) REQUIRED PARAMETER                                       *
*                                                                     *
*    INPUT : R1  - A(PARAMETER OPTION LIST)                           *
*            R2  - A(OUTPUT MSG BUFFER)                               *
*            R14 - RETURN ADDRESS                                     *
*                                                                     *
*   OUTPUT : R1  - A(TEXT UNIT) OR GARBAGE IF ERROR                   *
*            R15 - LENGTH OF TEXT UNIT                                *
*                                                                     *
*   RETURN : 0(R14) - VALID TEXT UNIT FOUND                           *
*            4(R14) - NO TEXT UNIT FOUND (IF PARAMETER IS OPTIONAL)   *
*            8(R14) - ERROR DETECTED WHILE PROCESSING TEXT UNIT       *
*                                                                     *
***********************************************************************
GETPARM  DS    0H
         SPACE 1
         ST    R1,GPPARM          SAVE A(PARM OPTION LIST)
         SPACE 1
*        CHECK FOR NO DATA LEFT IN COMMAND BUFFER
         SPACE 1
         LH    R6,GPDATAL         GET LENGTH OF REMAINING DATA
         LTR   R6,R6              ANY DATA LEFT?
         BZ    GPNODATA           NO => BR TO HANDLE
         SPACE 1
*        FIND NEXT TEXT UNIT IN COMMAND BUFFER
         SPACE 1
         L     R7,GPDATAP         LOAD A(CURRENT OFFSET IN CMD BUFFER)
GRPLOOP1 CLI   0(R7),X'40'        FIND
         BNZ   GPNONBLK             FIRST
         LA    R7,1(,R7)              NON
         BCT   R6,GRPLOOP1              BLANK
         B     GPNODATA                   CHARACTER
         SPACE 1
*        FIND END OF TEXT UNIT
         SPACE 1
GPNONBLK LR    R1,R7              SET TEXT UNIT PTR
GPLOOP2  CLI   0(R7),X'40'        FIND
         BE    GPGOTIT              LAST
         LA    R7,1(,R7)              NON-BLANK
         BCT   R6,GPLOOP2               CHARACTER
         SPACE 1
*        NEXT TEXT UNIT HAS BEEN FOUND
         SPACE 1
GPGOTIT  ST    R7,GPDATAP         SAVE CURRENT OFFSET IN CMD BUFFER
         STH   R6,GPDATAL         SAVE LENGTH OF REMAINING DATA
         SR    R7,R1              CALC LENGTH OF THE TEXT UNIT
         LR    R15,R7               & MOVE TO REG 15
         B     GPCHKOPT           BR TO VALIDATE PARM OPTIONS
         SPACE 1
GPNODATA SR    R15,R15            INDICATE NO TEXT UNIT
         SPACE 1
*        VALIDATE THE PARAMETER OPTIONS FOR THE TEXT UNIT
         SPACE 1
GPCHKOPT L     R6,GPPARM          LOAD A(OPTION LIST)
         CH    R15,GPLEN(,R6)     TU > MAX ALLOWED?
         BNH   GPCHK10            NO => BR TO NEXT CHECK
         MVC   0(L'GPMSG1,R2),GPMSG1 MOVE ERR MSG TO BUFFER
         CH    R15,=H'8'          MOVE
         BNH   *+8                  MAX 8
         LA    R15,8                  CHARACTERS
         BCTR  R15,0                    OF TEXT UNIT
         EX    R15,GPEX1                  TO ERROR MSG
         LA    R1,L'GPMSG1(,R2)   POINT TO END OF ERROR MSG
         B     GPERRTXT           BR TO MOVE KEYWORD TO MSG
         SPACE 1
GPCHK10  LTR   R15,R15            WAS THERE A TEXT UNIT?
         BNZ   GPXFND             YES => EXIT NORMAL
         TM    GPFLAG(R6),GPOPT   WAS PARAMETER OPTIONAL?
         BNZ   GPXZERO            YES => EXIT NO PARM
         MVC   0(L'GPMSG2,R2),GPMSG2 NO => MOVE ERR MSG
         LA    R1,L'GPMSG2(,R2)   POINT TO END OF ERROR MSG
         SPACE 1
GPERRTXT LH    R7,GPTEXTL(,R6)    GET LENGTH OF TEXT IN OPT LIST
         BCTR  R7,0               DECREMENT FOR MOVE
         EX    R7,GPEX2           ADD OPTION LIST TEXT TO ERR MSG
         SPACE 1
         B     8(,R14)            TAKE ERROR RETURN
         SPACE 1
GPXZERO  B     4(,R14)            RETURN WITH NO TEXT UNIT
         SPACE 1
GPXFND   BR    R14                RETURN WITH TEXT UNIT FOUND
         SPACE 5
GPEX1    MVC   0(0,R2),0(R1)      MOVE TEXT UNIT TO ERROR MSG
GPEX2    MVC   0(0,R1),GPTEXT(R6) MOVE OPT LIST TEXT TO ERROR MSG
GPMSG1   DC    C'XXXXXXXX IS TOO BIG FOR '
GPMSG2   DC    C'MISSING PARAMETER '
         TITLE '*********  N E T S O L  - INIT MSG13 SUBROUTINE'
***********************************************************************
*                                                                     *
*    INITMSG4 LOCATES AND INITIALIZES THE MSG4 OUTPUT BUFFER.         *
*                                                                     *
*    INPUT : R9  - A(DDT)                                             *
*            R14 - RETURN ADDRESS                                     *
*                                                                     *
*   OUTPUT : R2  - A(MSG13 OUTPUT BUFFER)                             *
*                                                                     *
***********************************************************************
INITMSG4 DS    0H
         SPACE 1
         L     R2,DDTM4OFS        GET A(MSG13)
         LH    R1,DDTM4L          LOAD LENGTH OF MSG13 BUFFER
         MVI   0(R2),X'40'        INSERT 1ST BLANK
         BCTR  R1,0               DECREMENT LENGTH
         BCTR  R1,0               DECREMENT LENGTH
         EX    R1,INITM4X         INIT REST OF BUFFER
         SPACE 1
         BR    R14
         SPACE 5
INITM4X  MVC   1(0,R2),0(R2)      PROPOGATE BLANK THRU OUT BUFFER
         TITLE '*********  N E T S O L  - SETLOGON COMMAND'
***********************************************************************
*                                                                     *
*    SETLOGON SETS UP THE AUTOMATIC LOGON APPLICATION FOR A NODE.     *
*                                                                     *
*    THE FORMAT OF THE COMMAND IS:                                    *
*                                                                     *
*        SETLOGON NODENAME APPLID                                     *
*                                                                     *
*    IF THE APPLID IS OMITTED, THEN THE LOGAPPL RESET TO NOTHING.     *
*                                                                     *
*    INPUT : NO PARAMETERS                                            *
*                                                                     *
*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *
*                                                                     *
***********************************************************************
SETLOGON DS    0H
         SPACE 1
         BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER
         SPACE 1
*        GET NODENAME
         SPACE 1
         LA    R1,SLNODE          LOAD A(OPTION LIST)
         BAL   R14,GETPARM        GO GET NODE NAME
         B     *+12               +0 - FOUND IT
         B     SLXERR             +4 - NOT THERE
         B     SLXERR             +8 - ERROR IN NODENAME
         MVC   NODENAME,=CL8' '   SAVE
         BCTR  R15,0                NODENAME
         EX    R15,SLEX1              FOR LATER
         SPACE 1
*        GET APPLID (OPTIONAL)
         SPACE 1
         LA    R1,SLAPPL          LOAD A(OPTION LIST)
         BAL   R14,GETPARM        GO GET APPLID
         B     *+12               +0 - FOUND APPLID
         B     SLTABLOK           +4 - APPLID NOT SPECIFIED
         B     SLXERR             +8 - ERROR IN APPLID
         MVC   DLOGAPPL,=CL8' '   SAVE
         BCTR  R15,0                APPLID
         EX    R15,SLEX2              FOR LATER
         LA    R15,1(,R15)        RESTORE APPLID LENGTH
         SPACE 1
*        SCAN TERM TABLE FOR NODENAME
         SPACE 1
SLTABLOK STM   R3,R5,12(R13)      SAVE REGS
         LA    R1,NODENAME             PT @ NODENAME
         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES
         CR    R3,R5                   CHECK FOR NULL TABLE
         BH    SLNOENT                 NO ENTRIES AS R3 > R5 (INIT 0)
         SPACE 1
SLTABLP  CLC   0(8,R1),TERMNAME        MATCH THE NAME ?
         BE    SLFNDTAB                YES, ALREADY IN THE TABLE
         BXLE  R3,R4,SLTABLP           CONTINUE THE SCAN FOR A WHILE
         SPACE 1
         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?
         BL    SLNOENT                 NO => NODENAME NOT IN TABLE
         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR
         SPACE 1
*        THERE IS NO TTE ENTRY FOR THIS NODE.
*        NO APPLID WILL BE TREATED AS AN ERROR IN THIS CASE.
         SPACE 1
SLNOENT  L     R5,20(,R13)             RESTORE A(RPL)
         LTR   R15,R15                 APPLID SPECIFIED?
         BNZ   SLADDENT                YES => ADD ENTRY
         MVC   0(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG TO BUFFER
         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG
         LM    R3,R5,12(R13)                  RESTORE REGS
         B     SLXERR                         BR TO ERROR EXIT
         SPACE 1
*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME
*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE
         SPACE 1
SLADDENT ST    R3,TERMTABE             SAVE NEW TABLE END
         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY
         MVC   TERMNAME(8),NODENAME    COPY NAME ACROSS
         B      SLADDAPL               BR TO ADD APPLID TO ENTRY
         SPACE 1
SLFNDTAB MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG
         L     R5,20(,R13)             RESTORE A(RPL)
         LTR   R15,R15                 APPLID SPECIFIED?
         BNZ   SLADDAPL                YES => GO ADD APPLID
         XC    TERMDAPL,TERMDAPL       NO  => ZERO LOGON APPLID
         MVC   0(L'SLMSG2,R2),SLMSG2          MOVE MSG TO OUT BUF
         MVC   19(8,R2),NODENAME              ADD NODE NAME TO MSG
         B     SLNDTTE                        BR TO END OF TTE PROCESS
         SPACE 1
SLADDAPL MVC   TERMDAPL,DLOGAPPL       ADD LOGON APPLID TO TTE
         MVC   0(L'SLMSG3,R2),SLMSG3   MOVE OK MSG TO OUT BUF
         MVC   0(8,R2),TERMDAPL        ADD APPLID TO MSG
         MVC   33(8,R2),TERMNAME       ADD NODE NAME TO MSG
         SPACE 1
SLNDTTE  LM    R3,R4,13(R13)           RESTORE REGS
         B     SLEXIT                  BR TO EXIT
         SPACE 1
SLXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION
         BZ    *+8                     NO  => BR TO CONTINUE
         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT
         SPACE 1
SLEXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT
         B     SENDMSG                 EXIT TO SEND MSG
         SPACE 5
SLEX1    MVC   NODENAME(0),0(R1)       SAVE NODENAME PARM
SLEX2    MVC   DLOGAPPL(0),0(R1)       SAVE APPLID PARM
SLMSG1   DC    C'XXXXXXXX NOT KNOWN TO NETSOL'
SLMSG2   DC    C'DEFAULT APPLID FOR XXXXXXXX RESET'
SLMSG3   DC    C'XXXXXXXX IS NOW LOGON APPLID FOR XXXXXXXX'
***********************************************************************
*    ACTION OF NETSOL NOW PROCEEDS BY USE OF EXIT ROUTINES.           *
*    THE FOLLOWING EXITS ARE SCHEDULED IN RESPONSE TO VTAM EVENTS:    *
*                                                                     *
*              TPEND   - VTAM SHUTS DOWN                              *
*              LOGON   - A TERMINAL IS SIMULATED LOGGED ON TO NETSOL, *
*                        OR IS PASSED TO NETSOL BY ANOTHER APPLICATION*
*              LOSTERM - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *
*                        IS DISCONNECTED (DIAL-LINE), OR 'VARY'ED TO  *
*                        ANOTHER APPLICATION                          *
*              RELREQ  - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *
*                        IS REQUESTED BY ANOTHER APPLICATION          *
*                                                                     *
*     RPL EXITS -                                                     *
*                                                                     *
*             READEND  - THE OUTSTANDING READ(ANY) HAS BEEN SATISFIED *
*             SENDEND  - A SEND HAS BEEN POSTED COMPLETE.             *
*             OPENEND  - AN OPNDST HAS COMPLETED.                     *
*             PASSEND  - CLSDST(PASS) HAS COMPLETED FOR A LOGON       *
*                        REQUEST MADE FROM A TERMINAL.                *
*             WRITEND  - END OF WRITE REQUEST.  WRITE WAS DUE         *
*                        TO INVALID LOGON FROM THE TERMINAL.          *
*             CDSTEND1 - CLSDST(RELEASE) COMPLETED.                   *
***********************************************************************
         TITLE '*********  N E T S O L  -  TPEND EXIT ROUTINE'
***********************************************************************
*                                                                     *
*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *
*                                                                     *
*              * VTAM IS CLOSING DOWN                                 *
*                                                                     *
*              * OPERATOR ISSUED A HALT COMMAND                       *
*                                                                     *
*        ON ENTRY:                                                    *
*                                                                     *
*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *
*                                                                     *
*              WORD 0 - ACB ADDRESS.                                  *
*              WORD 1 - REASON CODE FOR SHUTDOWN                      *
*                                                                     *
*        THIS PARAMETER LIST IS NOT USED BY NETSOL                    *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS                              *
*                                                                     *
*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *
*                                                                     *
***********************************************************************
         SPACE 3
TPEND    DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        REST OF  BASE REGS
         OI    UFLAGS,SHUTDOWN         INFORM OTHER EXITS OF SHUTDOWN
         SPACE 1
         POST  FINISECB                POST MAINLINES ECB
         SPACE 1
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN FROM IRB
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  LOGON EXIT ROUTINE'
***********************************************************************
*                                                                     *
*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *
*                                                                     *
*              * A TERMINAL IS LOGGED ON VIA VARY TO NETSOL           *
*                                                                     *
*              * A TERMINAL IS RETURNED TO NETSOL BY AN APPLICATION.  *
*                                                                     *
*        ON ENTRY:                                                    *
*                                                                     *
*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *
*                                                                     *
*              WORD 0 - ACB ADDRESS.                                  *
*              WORD 1 - POINTER TO SYMBOLIC TERMINAL NAME             *
*              WORD 2 - RESERVED                                      *
*              WORD 3 - LENGTH OF LOGON DATA.                         *
*              WORD 4 - READ-ONLY RPL POINTING TO LOGON CINIT.        *
*              WORD 5 - CID OF PENDING SESSION.                       *
*                                                                     *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS                              *
*                                                                     *
*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *
*                                                                     *
***********************************************************************
         SPACE 3
LOGON    DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         LA    R13,GENSAVE             POINT TO SAVE-AREA
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         SPACE 2
***********************************************************************
*        NOW ADD THE TERMINAL NAME TO THE TERMINAL TABLE AND RETURN   *
*        THE ENTRIE'S ADDRESS SO IT CAN BE PLACED IN THE NIB USER     *
*        FIELD. SUBSEQUENT OPERATIONS USING AN RPL WILL HAVE THE      *
*        RPLUSFLD UPDATED WITH THE TERMINAL TABLE ADDRESS FROM THE    *
*        NIB. IF ENTRY ALREADY EXISTS IN TABLE (SECOND LOGON, ETC.),  *
*        THEN WE RESET THE TERMINALS STATUS. A COUNT IS MAINTAINED    *
*        OF THE NUMBER OF LOGONS FOR A GIVEN TERMINAL. THE TERMINAL   *
*        TABLE CAN BE EXPANDED IF NEEDED TO PROVIDE ADDITIONAL STATS. *
***********************************************************************
         SPACE 1
         L     R2,4(,R1)               -> TERMINAL NAME PASSED BY LOGON
         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES
         CR    R3,R5                   CHECK FOR NULL TABLE
         BH    NOTABLE                 NO ENTRIES AS R3 > R5 (INIT 0)
         SPACE 1
TABLOOP  CLC   0(8,R2),TERMNAME        MATCH THE NAME ?
         BE    FOUNDTAB                YES, ALREADY IN THE TABLE
         BXLE  R3,R4,TABLOOP           CONTINUE THE SCAN FOR A WHILE
         SPACE 1
         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?
         BNL   TOOSMALL                YES, ABEND USER 0008
         SPACE 1
NOTABLE  ST    R3,TERMTABE             SAVE NEW TABLE END
         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY
         MVC   TERMNAME(8),0(R2)       COPY NAME ACROSS
         SPACE 1
FOUNDTAB LH    R4,TERMLOGC             GET LOGON COUNT
         A     R4,=F'1'                ADD 1 TO IT
         STH   R4,TERMLOGC             SAVE IT BACK
         MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG
         MVC   TERMCID(4),20(R1)       SAVE PENDING CID FOR INQUIRE
         SPACE 2
***********************************************************************
*        OBTAIN AN ASYNC RPL/NIB AND PREPARE FOR OPNDST               *
***********************************************************************
         SPACE 1
         BAL   R14,GETRPL              OBTAIN AN RPL
         OI    EXITFLAG,LOGONEX        MARK LOGON EXIT ENTERED
         ST    R3,RPLUSFLD             SAVE FOR ERROR ON OPNDST
         ST    PTRRPL,TERMCRPL         SAVE A(RPL) IN TTE
         SPACE 2
***********************************************************************
*        OBTAIN THE SESSION PARAMETERS WITH THE INQUIRE MACRO         *
***********************************************************************
         SPACE 1
INQUIRSE XC    SESSPARM,SESSPARM       ZERO SESSION PARM WORK AREA
         L     R2,TERMCID              LOAD CID FOR INQUIRE
         OI    MACFLAG2,INQSES         INDICATE INQUIRE(SESSPARM)
         OI    MFLAGS2,INQSESS
         INQUIRE RPL=(PTRRPL),                                         X
               OPTCD=SESSPARM,                                         X
               ARG=(R2),                                               X
               AREA=SESSPARM,                                          X
               AREALEN=L'SESSPARM,                                     X
               EXIT=INQSESX
         NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    INQUIRSE                YES. REISSUE
         LTR   R15,R15                 SIMLOGON ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  INQUIRE END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE INQUIRE(SESSPARM)                      *
*        ENTRY IS FROM THE INQUIRE INVOKED IN THE LOGON EXIT          *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
INQSESX  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS2,INQSESS
*                                       IS FOR SIMLOGON
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   10    0A    VTAM ERROR                           SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    4C    NO CINIT QUEUED                      14  00           *
*                                                                     *
***********************************************************************
         SPACE 3
         CH    R15,HEX14               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                 CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTABC(R15)            CHECK VALID ACTIONS
ERRTABC  B     R0CHKC               0  PROBABLY WORKED OK
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8
         BAL   R7,SNOCCUR           C
         B     INQUIRSE            10  REISSUE.  NO NEED TO
         B     FREERPL             14  TERMINAL GONE. END REQUEST
         SPACE 1
R0CHKC   DS    0H
         LTR   R0,R0                   INQUIRE AREA TOO SMALL?
*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 2
***********************************************************************
*        USE BIND PARAMETERS JUST OBTAINED TO DETERMINE TERMINAL TYPE *
***********************************************************************
         SPACE 1
         L     R3,RPLUSFLD             LOAD A(TTE) FROM RPL
         LA    R2,SESSPARM             ESTABLISH ADDRESSABILITY
         USING ISTDBIND,R2               TO BIND PARMATERS
         CLI   BINLUP,BINLUP0C         IF LU TYPE 0
         BE    LUTYPE0                   YES - BR TO MORE CHECKS
         CLI   BINLUP,BINLUP1C         LU TYPE 1 (POSIBLY 3287 SCS) ?
         BE    LUTYPE1                   YES - BR TO MORE CHECKS
         CLI   BINLUP,BINLUP2C         LU TYPE 2 (3270) ?
         BE    LU3270                    YES SO GO PROCESS IT
         CLI   BINLUP,BINLUP3C         IF LU TYPE 3
         BE    LUTYPE3                   YES - BR TO MORE CHECKS
         B     BADLU                   NOTHING WE CAN HANDLE SO AXE IT
LUTYPE0  CLI   BINFM,X'02'               IF FM=02 THEN IT IS A 3277
         BE    LU3270                         YES SO USR LU3270
         CLI   BINFM,X'03'                    IF FM=03 THEN 3767 OR RJE
         BE    LU0FM3                         YES SO FIND WHICH IT IS
         B     BADLU                          ELSE DEVICE NOT SUPPORTED
LU0FM3   TM BINCMNP,BINFMHD            IF THIS IS TRUE THEN HEADERS MAY
*                                      USED IMPLING RJE SO DROP
         BNZ   BADLU                   RJE SO DROP
         B     LU3767                  ELSE 3767 SO GO HANDLE
LUTYPE1  CLI   BINPRSVC+4,X'E1'        MIGHT BE 3287 SO CHECK BINPDSB1
*                                      (SEE VTAM PROGRAMMING ON BNDAREA
*                                     DSECT) FOR AN X'E1' (ALL OUR 3287
*                                     PRINTERS HAVE THIS SET IN MODETBL
         BE    LU3767                  YES SO GO HANDLE IT (USE 3767)
         B     BADLU                   NO SO GET RID OF IT
LUTYPE3  B     BADLU                   SHOULD NOT HAVE ANY OF THESE
*                                      SO GET RID OF IT
*        START OF TERMINAL MODEL DETERMINATION LOGIC
LU3270   DC    0H'0'
         CLI   BINPRESZ,BINPSZ0        UNDEFINED ROWXCOL?
         BE    ISMOD0                  YES - UNABLE TO DETERMINE MODEL
         CLI   BINPRESZ,BINPSZ1        MODEL 1 ?
         BE    ISMOD1                  YES - FILL IN TERMMODL
         CLI   BINPRESZ,BINPSZ2        MODEL 2 ?
         BE    ISMOD2                  YES - FILL IN TERMMODL
         XR    R14,R14                 CLEAR R14 FOR ROWSIZE
         CLI   BINPRESZ,BINPSFX        DEFAULT PSERVIC ROWXCOL ?
         BNE   ALTROW                  NO - CONTINUE
         IC    R14,BINSPRIR            PRIMARY ROWSIZE
         B     GOTROW                  FILL IN TERMROW & TERMCOL
ALTROW   DC    0H'0'
         CLI   BINPRESZ,BINPSZRC       ALTERNATE PSERVIC ROWXCOL ?
         BNE   ISMOD0                  NO - UNABLE TO DETERMINE ROWSIZE
         IC    R14,BINSALTR            ALTERNATE ROWSIZE
GOTROW   DC    0H'0'
         CH    R14,=H'12'              IF ROWSIZE=12 THEN MODEL=1
         BE    ISMOD1
         CH    R14,=H'24'              IF ROWSIZE=24 THEN MODEL=2
         BE    ISMOD2
         CH    R14,=H'32'              IF ROWSIZE=32 THEN MODEL=3
         BE    ISMOD3
         CH    R14,=H'43'              IF ROWSIZE=43 THEN MODEL=4
         BE    ISMOD4
         CH    R14,=H'27'              IF ROWSIZE=27 THEN MODEL=5
         BE    ISMOD5
         B     TERMFIN
ISMOD0   MVI   TERMMODL,C'?'           MODEL TYPE ?
         B     TERMFIN                 AND CONTINUE
ISMOD1   MVI   TERMMODL,C'1'           MODEL TYPE 1
         B     TERMFIN                 AND CONTINUE
ISMOD2   MVI   TERMMODL,C'2'           MODEL TYPE 2
         B     TERMFIN                 AND CONTINUE
ISMOD3   MVI   TERMMODL,C'3'           MODEL TYPE 3
         B     TERMFIN                 AND CONTINUE
ISMOD4   MVI   TERMMODL,C'4'           MODEL TYPE 4
         B     TERMFIN                 AND CONTINUE
ISMOD5   MVI   TERMMODL,C'5'           MODEL TYPE 5
         B     TERMFIN                 AND CONTINUE
TERMFIN  DC    0H'0'
*        END OF TERMMODL MODS
         TM    BINDFLAG,BINSEDS        3270 WITH EXTENDED FUNCTION?
         BO    LU3270E                 YES - BR TO LOAD DDT3270E
         L     R1,=AL4(DDT3270)        NO  - PT AT DDT3270
         B     STORDDT                       BR TO STORE A(DDT)
LU3270E  L     R1,=AL4(DDT3270E)       PT AT DDT3270E
         B     STORDDT                 BR TO STORE IN TTE
LU3767   L     R1,=AL4(DDT3767)        PT AT DDT FOR 3767
STORDDT  ST    R1,TERMDDT              STORE A(DDT) IN TTE
         DROP  R2
         SPACE 2
***********************************************************************
*    ISSUE AN OPNDST TO CONNECT NETSOL TO LOGGED-ON TERMINAL.         *
***********************************************************************
         SPACE 1
         LA    PTRNIB,NIBSTART         -> NIB WITHIN RPL
         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP
         ST    R3,NIBUSER              SAVE IN THE USER FIELD
         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB
OPENDST  OI    MACFLAGS,OPNSPEC        INDICATE DOING AN OPNDST(SP)
         OI   MFLAGS,OPNDSPEC
         OPNDST RPL=(PTRRPL),                                          X
               OPTCD=(ACCEPT,SPEC,NQ),                                 X
               EXIT=OPENEND,                                           X
               NIB=NIBSTART
         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR OPNDST                                           *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    OPENDST                 YES. REISSUE
         LTR   R15,R15                 CLSDST ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  OPNDST END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE OPNDST                                 *
*        ENTRY IS FROM THE OPNDST IN THE LOGON EXIT.                  *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
OPENEND  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO     RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR
*                                       IS FOR OPNDST
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR OPNDST(ACCEPT,SPEC)                              *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                   (R15 R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   0C    09    NODE DEACTIVATED                     14  00           *
*   10    00    TERMINAL UNAVAILABLE                 14  00           *
*   10    01    OPNDST FAILED                        14  00           *
*   10    03    VTAM IS HALTING                      14  00           *
*   10    05    PERMENENT FAILURE IN PATH            08  00           *
*   10    06    AUTO NETWORK SHUTDOWN                08  00           *
*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   10    11    SDT FAILED                           14  00           *
*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *
*   14    54    INVALID TERMINAL NAME                14  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         OI    EXITFLAG,OPENEX         INDICATE IN OPNDST EXIT
         CH    R15,HEX14               HIGHEST VALID ACTION
*******> BH    SNOCCUR                  CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB1(R15)            CHECK VALID ACTIONS
ERRTAB1  B     R0CHK1               0  CHECK IF TERM ACCEPTED
         BAL   R7,SNOCCUR           4
         B     FREERPL              8  CAN'T RELEASE IF CAN'T
*                                       GET IT
         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT
*                                      CONNECTED
         B     OPENDST             10  REISSUE. CHECK FOR RESET
         B     FREERPL             14  CAN'T CONNECT DEVICE
         SPACE 1
R0CHK1   DS    0H
         CH    R0,HEX9                 TERM UNAVAILABLE
         BE    RETURN                  RETURN IF SO
         LTR   R0,R0                   SUCCESSFUL COMPLETION?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 2
***********************************************************************
*        CID OF DEVICE JUST OPNDST'ED IS NOW IN ASYNC NIB.            *
*        NOTE : PGM MANUAL INDICATES CID USUALLY???? IN RPLARG FIELD. *
*        SOLICIT THE DEVICE JUST CONNECTED.                           *
***********************************************************************
         SPACE 1
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL
         LA    PTRNIB,NIBSTART         ADDRESS NIB
         L     R3,NIBUSER              -> TERM TABLE ENTRY
         ST    R3,RPLUSFLD             SAVE A(TTE) IN RPL FOR MSG
         MVC   CID(4),NIBCID           SAVE CID IN RPL WORKAREA
         MVC   TERMCID,NIBCID          COPY THE CID TO TTE
         MVI   TERMFLG2,TOPEN          MARK TERM ON NETSOL
         OI    FLAGS,FIRSTSND          FIRST SEND TO THE DEVICE
         NI    SRPLEXT1,FF-RPLNIB      RESET SYNCHRPL
         SPACE 2
***********************************************************************
*        DO AUTOMATIC LOGON FOR THOSE TERMINALS THAT HAD A            *
*        DEFAULT LOGON SPECIFIED IN THE INITIALIZATION DATA SET.      *
***********************************************************************
         SPACE 1
         CLC   TERMDAPL,=XL8'00'       IS THERE A DEFAULT APPL?
         BE    OPNDSTC                 NO  => GO WRITE MSG TO DEVICE
         SPACE 2
***********************************************************************
*        TO PREVENT LOOPING IN AUTOMATIC LOGON, AUTO LOGON WILL       *
*        BE TERMINATED IF MORE THAN 3 LOGONS FOR A TERMINAL ARE       *
*        PROCESSED IN A 60 SECOND TIME PERIOD.                        *
***********************************************************************
         SPACE 1
         TIME  BIN                     GET TIME IN .01 SECS
         C     R0,TERMDTIM             < 60 SECS SINCE LAST LOGON?
         BH    AUTONEW                 NO  => ASSUME NEW AUTO LOGON
         LH    R1,TERMDCNT             YES => INCR
         LA    R1,1(,R1)                        LOOP
         STH   R1,TERMDCNT                        COUNTER
         CH    R1,HEX2                 MORE THAN 3 TIMES IN 60 SECS?
         BNH   AUTOINQR                NO  => GO INQUIRE RE APPL STATUS
         B     OPNDSTC                 YES => SKIP AUTO LOGON
AUTONEW  A     R0,=AL4(100*60)         ADD 60 SECS TO CURRENT TIME
         ST    R0,TERMDTIM  AND STORE FOR LATER
         XC    TERMDCNT,TERMDCNT       ZERO LOOP COUNTER
***********************************************************************
*                                                                     *
*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *
*    OF THE DEFAULT LOGON APPLICATION FOR THIS TERMINAL.              *
*                                                                     *
***********************************************************************
         SPACE 1
AUTOINQR MVC   APPLID(8),TERMDAPL      SAVE APPLID FROM TTE ENTRY
         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP
         LA    PTRNIB,NIBSTART         PUT THE APPLICATION
         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT
         SPACE 2
***********************************************************************
*    INQUIRE FOR THE APPLICATION STATUS                               *
***********************************************************************
         SPACE 1
INQUIREA OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT
         OI    MFLAGS,INQAPPST
         INQUIRE RPL=(PTRRPL),                                         X
               OPTCD=APPSTAT,                                          X
               NIB=NIBSTART,                                           X
               EXIT=INQAPP1X
         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    INQUIREA                YES. REISSUE
         LTR   R15,R15                 SIMLOGON ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  INQUIRE(APPSTAT) END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE INQUIRE(APPSTAT)                       *
*        ENTRY IS FROM THE INQUIRE INVOKED IN THE LOGON EXIT          *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
INQAPP1X DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,INQAPPST
*                                       IS FOR SIMLOGON
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   10    0A    VTAM ERROR                           SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    4C    NO APPLICATION NAME                  0C  06           *
*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *
*                                                                     *
***********************************************************************
         SPACE 3
         CH    R15,HEX10               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                 CODE IS X'10'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB3(R15)            CHECK VALID ACTIONS
ERRTAB3  B     R0CHK3               0  PROBABLY WORKED OK
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS
*                                      IRRELEVANT
         B     OPNDSTC              C  DEFAULT APPL IS UNKNOWN SO
*                                      SKIP AUTO LOGON
         B     INQUIREA            10  REISSUE.  NO NEED TO
         SPACE 1
R0CHK3   DS    0H
         LTR   R0,R0                   INQUIRE AREA TOO SMALL?
*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         EJECT
***********************************************************************
*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *
*    CODES ARE:                                                       *
*                                                                     *
*        0 - ACTIVE AND AVAILABLE                                     *
*        4 - INACTIVE                                                 *
*        8 - NEVER ACCEPTS A LOGON                                    *
*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *
*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *
***********************************************************************
         SPACE 3
         SR    R15,R15                 CLEAR  REG 15
         IC    R15,RPLFDB3             EXTRACT FEEDBACK INFO.
         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.
         B     STATUS3(R15)            BRANCH IN TABLE
STATUS3  B     DAPACTIV             0  DO AUTO LOGON
         B     OPNDSTC              4  SKIP AUTO LOGON
         B     OPNDSTC              8  SKIP AUTO LOGON
         B     OPNDSTC             12  SKIP AUTP LOGON
         B     OPNDSTC             16  SKIP AUTO LOGON
         SPACE 1
DAPACTIV SR    R4,R4                   SET A(LOGON DATA) = 0
         SR    R2,R2                   SET L(LOGON DATA) = 0
         B     FILLNIB                 BR INTO LOGON PROCESSING
         SPACE 2
***********************************************************************
*        NO AUTO LOGON IS BEING DONE FOR THIS TERMINAL SO             *
*        GO SOLICIT LOGON INFORMATION FROM THE TERMINAL USER.         *
***********************************************************************
         SPACE 1
OPNDSTC  LA    R0,MSG12                WRITE LOGON MESSAGE
         B     SENDMSG                 IS FROM THE LOGON EXIT
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  RECEIVE ANY EXIT'
***********************************************************************
*                                                                     *
*    THIS EXIT ROUTINE IS SCHEDULED WHEN THE OUTSTANDING REC-ANY      *
*    COMPLETES.                                                       *
*                                                                     *
*        ON ENTRY:                                                    *
*                                                                     *
*    REGISTER 1 POINTS TO THE RPL USED FOR THE READ-ANY (IGFRPL)      *
*                                                                     *
*               THE CID FIELD OF THIS RPL HAS CID OF DEVICE           *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS                              *
*                                                                     *
*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *
*                                                                     *
***********************************************************************
         SPACE 3
RECEND   DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         LA    R13,GENSAVE             POINT TO SAVE-AREA
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         SPACE 2
***********************************************************************
*        ISSUE NEW READ SO WE CAN HANDLE MORE THAN 1 LOGON AT A TIME. *
***********************************************************************
         SPACE 1
         LR    R7,R1                   SAVE R7 AROUND THE REC ANY CODE
         BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE
         BAL   R14,RECSUB              ISSUE A RECEIVE (ANY)
         SPACE 1
         LR    PTRRPL,R7               RESTORE THE INPUT RPL @
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL
         L     R3,RPLUSFLD             -> TTE
         ST    R5,TERMCRPL             SAVE A(RPL)
         OI    EXITFLAG,RECEX
         SPACE 2
***********************************************************************
*        SAVE CID OF DEVICE FROM RPL ARG FIELD.                       *
*        GET LENGTH OF RECORD READ. THIS WILL BE DECREMENTED          *
*        IF DEVICE CONTROL CHARACTERS ARE REMOVED BEFORE INTRPRET.    *
*                                                                     *
*        NOTE: INFO IN RPL MAY NOT BE VALID IF CHECK RETURNS          *
*              AN ERROR.                                              *
***********************************************************************
         SPACE 1
         MVC   CID(4),RPLARG           GET CID FROM RPL
         MVC   RECLEN(4),RPLRLEN       GET RPL RECORD LENGTH
         SPACE 1
         OI    MFLAGS,RECA             TELL ERREXIT THAT ERRORS
*                                       ARE FOR REC(ANY)
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                      IS ENTERED IF ERRORS HAVE
         NI    MFLAGS,255-(RECA)       RESET READ INDICATOR
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR CHECK OF READ (ANY)                              *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                   (R15  R0)         *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                 00  00          *
*   04    04    EXCP. CONDITION ON INCOMMING MESSAGE                  *
*                                                                     *
*             SSENSEI/SSENSMI                                         *
*                80     XX        PATH ERRORS         14  00          *
*                80     05        NO SESSION COND.    08  04          *
*                40     XX        RH   ERRORS         SNOCCUR         *
*                20     XX        STATE ERRORS        08  04          *
*                10     03        FUNCTION ^ SUPPORTED08  00          *
*                10     XX        REQUEST ERRORS      SNOCCUR         *
*                08     00        BRACKET ERROR       18  00          *
*                08     01        REQUEST REJECT      08  00          *
*                08     02        INTV REQ            14  00          *
*                08     13        BRACKET ERROR       18  00          *
*                08     2B        PRES. SPACE INT. LO 18  00          *
*                08     2D        SLU BUSY            14  00          *
*                                                                     *
*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *
*   0C    01    I/O ERROR.  DEVICE NOT USABLE         08  00          *
*   0C    02    TEST REQUEST SET (LOSTTERM)           14  00          *
*   0C    07    CONNECT REC. IN PROGRESS              14  00          *
*   0C    08    LU RESTARTED (LOSTTERM)               14  00          *
*   0C    0A    REQU. CANCEL. BY RESETR               SNOCCUR         *
*   0C    0B    CANCELED BY CLSDST                    14  00          *
*   0C    0C    REQUEST CANCEL. BY CLEAR              08  04          *
*   10    05    PERMANENT PATH FAILURE                08  00          *
*   10    07    REQUEST CANCEL BY VARY (LOSTTERM)     14  00          *
*   10    09    TERMINATE SELF OR LOGOFF (LOSTTERM)   14  00          *
*   10    0F    BUFFERS FILLED (LOSTTERM)             14  00          *
*   10    10    TERMINATE SELF COMMAND                08  04          *
*   10    0C    DIAL-IN DISCONNECT                    08  00          *
*   14    12    CLSDST IN PROGRESS                    14  00          *
*   14    32    REQUEST INVALID FOR SPECIFIED DEVICE  08  00          *
*                                                                     *
***********************************************************************
         SPACE 3
         CH    R15,HEX18               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                  CODE IS X'20'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB2(R15)            CHECK VALID ACTIONS
ERRTAB2  B     R0CHK2               0  VALID DATA FROM READ?
         BAL   R7,SNOCCUR           4
         B     RELOPNB              8  CHECK IF WE WANT TO REOPEN
         B     SENDMSG              C  SEND A MESSAGE (MSG# FROM ERREX)
         B     RESEND               10 REISSUE
         B     FREERPL              14
         B     RESEND               18
         SPACE 1
RELOPNB  LTR   R0,R0                   DO OPNDST AFTER CLSDST ?
         BZ    RELEASE
         OI    FLAGS,RELOPND           SAY WE WANT TO REOPEN AFTER RELS
         B     RELEASE
         SPACE 1
R0CHK2   DS    0H
         LTR   R0,R0
*******> BNZ   SNOCCUR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 1
         TM    RPLCNTDC,RPLLUS         DID WE RECEIVE LUSTAT ?
         BO    LUSTATUS                YES, GO HANDLE IT
         SPACE 1
         TM    TERMFLAG,LOGPROC        HAS IMPATIENT USER ISSUED
*                                      A SECOND LOGON SEQUENCE WHILE
*                                      THE FIRST IS IN PROGRESS?
         BO    FREERPL                 YES => IGNORE THIS REQUEST
         OI    TERMFLAG,LOGPROC        NO  => SET LOGON BEING PROCESSED
         SPACE 1
         LA    R6,IOAREA               POINT TO DATA RECEIVED
         L     R2,RECLEN               GET DATA LENGTH
         LTR   R2,R2                   RECEIVE ANY DATA?
*                                      IN CASE NO DATA RECEIVED
*                                       RESOLICIT THE TERMINAL
         BZ    RESEND
         LA    R3,L'IOAREA             COMPARE THE RECLEN WITH
         CR    R2,R3                    THE READ BUFFER LENGTH.
         BNH   GOEDIT                  BUFFER LENGTH GREATER
*                                       THAN INPUT RECORD.
         LR    R2,R3                   ONLY THE FIRST 80 BYTES
*                                       WILL BE READ IN.
         SPACE 1
***********************************************************************
*        BRANCH TO INPUT EDIT ROUTINE FOR THE APPROPRIATE DEVICE TYPE.*
***********************************************************************
         SPACE 1
GOEDIT   DS    0H
         L     R3,RPLUSFLD             LOAD A(TTE)
         L     R9,TERMDDT              LOAD A(DDT FOR DEVICE)
         L     R15,DDTEDIT             LOAD A(DEVICE EDIT ROUTINE)
         BR    R15                     GO EDIT INPUT
         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3270'
***********************************************************************
*                                                                     *
*        S32EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3270       *
*        DEVICE CONTROL CHARACTERS.                                   *
*                                                                     *
***********************************************************************
         SPACE 2
S32EDIT  DS    0H
         CLI   0(R6),CLEARKEY          IS IT 'CLEAR' KEY ?
         BNE   S32PFK                  NO SO CHECK VALID LOGON
*        TEST FOR CPIC TERMINAL, IF SO CHANGE TO PFK2-83/01/26 BJH
         CLC   TERMNAME(8),=C'Y0ACA01 '
         BE    CLRCPIC
         CLC   TERMNAME(8),=C'Y0AEA01 '
         BE    CLRCPIC
         CLC   TERMNAME(8),=C'Y0A5A01 '
         BE    CLRCPIC
         CLC   TERMNAME(8),=C'Z0B8A01 '
         BE    CLRCPIC
         B     RESEND                  NOT CPIC SO ASK FOR MORE
*        MUST BE A CPIC TERMINAL SO CHANGE TO A PFK2
CLRCPIC  MVI   0(R6),C'2'
         B     S32PFK                  AND GO PROCESS IT
         SPACE 2
***********************************************************************
*        NOT 'CLEAR' KEY, CHECK FOR OTHER FUNCTION KEY DEPRESS.  IF   *
*        IT IS A FUNCTION KEY THE DATA WILL BE PASSED DIRECTLY TO     *
*        INTERPRET, OTHERWISE THE DATA POINTER WILL BE UPDATED TO     *
*        SKIP THE 3270 DEVICE CONTROL SEQUENCE.                       *
***********************************************************************
         SPACE 1
S32PFK   DS    0H
         CLI   0(R6),X'7A'             IS IT PF10
         BL    S32PA                   IF LOW CHECK PROGRAM ACCESS
         CLI   0(R6),X'7C'             IS IF PF12
         BNH   INTRPRET                IF IN RANGE DO IT
         CLI   0(R6),C'1'              IS IT PF1
         BL    S32ENTER                IF LOW CARRY ON
         CLI   0(R6),C'9'              IS IT PF9
         BNH   INTRPRET                IF IN RANGE DO IT
*        CHECK PROGRAM ACCESS KEYS HERE
S32PA    CLI   0(R6),X'6C'             IS IT PA1
         BE    INTRPRET                IF YES, DO IT
         CLI   0(R6),X'6E'             IS IT PA2
         BE    INTRPRET                IF YES, DO IT
         CLI   0(R6),X'6B'             IS IT PA3
         BE    INTRPRET                IF YES, DO IT
         SPACE 1
S32ENTER DS    0H
         CLI   0(R6),ENTERKEY          IS IT THE ENTER KEY?
         BNE   BADINPUT
         LA    R3,3                    USER MIGHT HAVE HIT
         CR    R2,R3                   ENTER KEY ONLY BUT NO LOGON
         BE    RESEND                  IF SO LETS GIVE HIM ANOTHER GO
         SPACE 1
         LA    R6,6(R6)                BYPASS SBA 3270 CONTROL + ORDER
         LA    R1,6
         SR    R2,R1                   ALLOW FOR DECREASE
         LTR   R2,R2                   IS THERE ANY THING
         BNP   BADINPUT                NO SO MUST BE INVALID
         B     INTRPRET                GO INTERPRET LOGON SEQ
         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3767'
***********************************************************************
*                                                                     *
*        S37EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3767       *
*        DEVICE CONTROL CHARACTERS.                                   *
*                                                                     *
***********************************************************************
         SPACE 2
S37EDIT  DS    0H
         CLI   0(R6),CR                ONLY CARRIAGE RETURN?
         BNE   INTRPRET                NO  => BR TO INTERPRET INPUT
         B     RESEND                  YES => WRITE MSG 12
         TITLE '*********  N E T S O L  -  COMMAND LOOKUP'
***********************************************************************
*                                                                     *
*    SCAN NETSOL'S COMMAND TABLE FOR AN ENTRY MATCHING THE LOGON DATA *
*    ENTERED FROM THE TERMINAL.  IF A MATCH IS FOUND, THE SPECIFIED   *
*    CMD ROUTINE IS BRANCHED TO. OTHERWISE, AN ERROR MESSAGE IS       *
*    WRITTEN TO THE TERMINAL INDICATING INVALID LOGON DATA.           *
*                                                                     *
*    THE COMMAND CAN BE EITHER:                                       *
*           - A REQUEST FOR LOGON TO A VTAM APPLICATION PROGRAM, OR   *
*           - A REQUEST FOR A SERVICE FROM NETSOL, SUCH AS, LOGOFF    *
*                                                                     *
*    INPUT :                                                          *
*        R2 - LENGTH OF LOGON DATA                                    *
*        R6 - A(LOGON DATA IN DATA BUFFER)                            *
*                                                                     *
*    OUTPUT:                                                          *
*        R0 - ERROR MSG # IF NO ENTRY FOUND                           *
*        R1 - A(MATCHING COMMAND TABLE ENTRY)                         *
*                                                                     *
***********************************************************************
         SPACE 3
BADINPUT LA    R0,MSG02                INPUT NOT RECOGNISED
         B     SENDMSG
         SPACE 1
INTRPRET DS    0H
         STC   R2,DATASEQL             SAVE LOGON DATA LENGTH
         ST    R6,DATAPTR              SAVE A(LOGON DATA)
*        CONVERT LOGON DATA TO UPPER CASE
LOWTOUP  OI    0(R6),X'40'             MAKE CURRENT CHAR UPPER CASE
         LA    R6,1(R6)                GET
         BCT   R2,LOWTOUP                  NEXT CHAR
*        SAVE DATA FOR USE IN CLSDST(PASS)
         IC    R2,DATASEQL             RESTORE LOGON DATA LENGTH
         L     R6,DATAPTR              RESTORE A(LOGON DATA)
         BCTR  R2,0                    REDUCE FOR MOVE
         XC    DATASEQ,DATASEQ         ZERO OUT MSG WORK AREA
         EX    R2,@EXEC1               SAVE LOGON DATA
         SPACE 1
*        SEARCH COMMND TABLE FOR MATCHING COMMAND TEXT
         SPACE 1
         L     R1,=AL4(CMDTAB)
CMDTABLP CLC   CMDGAPPL(,R1),=CL8'ENDOFTAB' END OF SEARCH?
         BNE   CMDTABL1                NO
         LA    R0,MSG07                YES => LOAD ERROR MSG #
         B     SENDMSG                        AND GO SEND IT
CMDTABL1 LH    R2,CMDTEXTL(R1)         LOAD LENGTH OF CMDTEXT
         LA    R4,CMDTEXT(,R1)         PT @ CMDTEXT
         LA    R6,DATASEQ              PT @ LOGON DATA
CMDTABL2 CLC   0(1,R4),0(R6)           DOES THIS CHAR MATCH?
         BNE   CMDTABL3                NO => GET NEXT ENTRY
         LA    R4,1(,R4)               YES => COMPARE
         LA    R6,1(,R6)                        NEXT
         BCT   R2,CMDTABL2                        CHARACTER PAIR
*        TO ENSURE UNIQUENESS OF CMDS, COMMAND TEXT MUST
*        END WITH A BLANK OR BE AT THE END OF THE CMD BUFFER.
         CLI   0(R6),X'40'             IS NEXT CHAR A BLANK?
         BE    CMDFOUND                YES => CMD IS A MATCH
         CLI   0(R6),X'00'             IS THIS END OF CMD BUFFER?
         BE    CMDFOUND                YES => CMD IS A MATCH
         CLI   0(R6),C'$'              LAST CHAR OF PFK INPUT(PFK5=5$)
         BE    CMDFOUND                YES => CMD IS A MATCH
CMDTABL3 LA    R1,CMDTABL(,R1)         NO => GET
         B     CMDTABLP                          NEXT ENTRY
         SPACE 1
*        MATCHING CMD HAS BEEN FOUND
         SPACE 1
*        CHECK IF CMD IS VALID FOR THE SOURCE OF THE CMD
CMDFOUND TM    UFLAGS,INIT             CMD ISSUED DURING NETSOL INIT?
         BZ    CMDCKTRM                NO  => CHECK IF CMD OK FROM TERM
         TM    CMDFLAG(R1),CMDINIT     CMD VALID FROM SYSIN?
         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK
         B     CMDSETGP                YES => CONTINUE CMD SETUP
CMDCKTRM TM    CMDFLAG(R1),CMDTERM     CMD VALID FROM TERMINAL?
         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK
*        SET UP PARAMETERS FOR GETPARM SUBROUTINE
CMDSETGP ST    R6,GPDATAP              SAVE CURRENT CMD BUFFER PTR
         LA    R2,DATASEQ              CALCULATE
         SR    R6,R2                     LENGTH OF CMD
         SR    R2,R2                   CALCULATE
         IC    R2,DATASEQL               LENGTH OF TEXT
         SR    R2,R6                       REMAINING IN CMD BUFFER
         STH   R2,GPDATAL              SAVE FOR USE BY GETPARM
*        BRANCH TO CMD PROCESSING ROUTINE
         L     R2,CMDROUTA(,R1)        LOAD A(CMD ROUTINE)
         BR    R2                        AND BR TO IT
         SPACE 2
*        EXECUTED CODE
@EXEC1   MVC   DATASEQ(0),0(R6)
         TITLE '*********  N E T S O L  -  CHECK APPLICATION STATUS'
***********************************************************************
*                                                                     *
*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *
*    OF THE VTAM APPLICATION ASSOCIATED WITH THE LOGON DATA.          *
*                                                                     *
***********************************************************************
         SPACE 1
CHKAPPL  MVC   APPLID(8),CMDVAPPL(R1)  SAVE APPLID FROM CMD TABLE ENTRY
         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP
         LA    PTRNIB,NIBSTART         PUT THE APPLICATION
         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT
         SPACE 2
***********************************************************************
*    INQUIRE FOR THE APPLICATION STATUS                               *
***********************************************************************
         SPACE 1
INQUIREB OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT
         OI    MFLAGS,INQAPPST
         INQUIRE RPL=(PTRRPL),                                         X
               OPTCD=APPSTAT,                                          X
               NIB=NIBSTART,                                           X
               EXIT=INQAPP2X
         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    INQUIREB                YES. REISSUE
         LTR   R15,R15                 SIMLOGON ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  INQUIRE(APPSTAT) END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE INQUIRE(APPSTAT)                       *
*        ENTRY IS FROM THE INQUIRE INVOKED IN THE RECEIVE EXIT        *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
INQAPP2X DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,INQAPPST
*                                       IS FOR SIMLOGON
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   10    0A    VTAM ERROR                           SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    4C    NO APPLICATION NAME                  0C  06           *
*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *
*                                                                     *
***********************************************************************
         SPACE 3
         CH    R15,HEX10               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                 CODE IS X'10'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB4(R15)            CHECK VALID ACTIONS
ERRTAB4  B     R0CHK4               0  PROBABLY WORKED OK
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS
*                                      IRRELEVANT
         B     APPLBAD              C  THIS IS NORMAL CASE FOR
*                                      APPLICATION UNKNOWN
         B     INQUIREB            10  REISSUE.  NO NEED TO
         SPACE 1
R0CHK4   DS    0H
         LTR   R0,R0                   INQUIRE AREA TOO SMALL?
*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         EJECT
***********************************************************************
*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *
*    CODES ARE:                                                       *
*                                                                     *
*        0 - ACTIVE AND AVAILABLE                                     *
*        4 - INACTIVE                                                 *
*        8 - NEVER ACCEPTS A LOGON                                    *
*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *
*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *
***********************************************************************
         SPACE 3
         SR    R15,R15                 CLEAR  REG 15
         IC    R15,RPLFDB3             EXTRACT FEEDBACK INFO.
         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.
         B     STATUS(R15)             BRANCH IN TABLE
STATUS   B     APPACTIV             0
         B     APPINACT             4
         B     APPNEVER             8
         B     APPTEMP             12
         B     APPCLOSE            16
         SPACE 1
APPTEMP  DS    0H                      APPLICATION TEMPORARILY NOT
*                                      ACCEPTING LOGONS
         LA    R0,MSG11                SET MESSAGE CODE
         B     SENDMSG                 TELL TERMINAL USER
         SPACE 1
APPNEVER DS    0H                      APPLICATION NEVER ACCEPTS LOGONS
         LA    R0,MSG10                SET MESSAGE CODE
         B     SENDMSG                 TELL TERMINAL USER
         SPACE 1
APPINACT DS    0H                      APPLICATION INACTIVE
         LA    R0,MSG08                SET MESSAGE CODE
         B     SENDMSG                 TELL TERMINAL USER
         SPACE 1
APPCLOSE DS    0H                      APPLICATION QUIESCING
         LA    R0,MSG09                SET MESSAGE CODE
         B     SENDMSG                 TELL TERMINAL USER
         SPACE 1
APPLBAD  DS    0H                      BAD APPLICATION NAME
         LA    R0,MSG07                SET MESSAGE CODE
         B     SENDMSG                 TELL TERMINAL USER
         TITLE '*********  N E T S O L  -  CLSDST(PASS) FUNCTION'
***********************************************************************
*    THE APPLICATION IS ACTIVE AND AVAILABLE. PASS THE TERMINAL PLUS  *
*    LOGON DATA TO THE DESIRED APPLICATION.                           *
***********************************************************************
         SPACE 3
APPACTIV OI    FLAGS,CLEARSCR          MUST ISSUE CLEAR SCREEN
         LA    R0,MSG06                SEND LOGON IN PROGRESS
         B     SENDMSG                 GO ISSUE SEND
         SPACE 1
CONTPASS NI    FLAGS,255-(CLEARSCR)    TURN OFF FLAG TO INDICATE RETURN
         SR    R2,R2                   CLEAR
         IC    R2,DATASEQL             GET DATA SEQUENCE LENGTH PASSED
*                                       FROM INTRPRET
         LA    R4,DATASEQ              ADDRESS OF DATA TO PASS
         SPACE 1
FINDBLNK CLI   0(R4),X'40'             IS IT A BLANK?
         BE    FINDDATA                YES SEE IF ANY DATA FIELD
         LA    R4,1(R4)                OVERWISE GO TO NEXT BYTE
         BCT   R2,FINDBLNK             DECREASE COUNT TRY NEXT
         SPACE 1
NODATA   SR    R4,R4                   CLEAR REG TO SAY NO DATA
         B     FILLNIB                 GO ISSUE PASS WITH NO DAT
         SPACE 1
FINDDATA LA    R4,1(R4)                POINT TO NEXT CHARACTER
         CLI   0(R4),X'40'             IS IT STILL A BLANK?
         BNE   DATAFOND                NO SO WE HAVE DATA
         BCT   R2,FINDDATA             TRY AND FIND MORE DATA
         B     NODATA                  ISSUE PASS WITH NO DATA
         SPACE 1
DATAFOND BCTR  R2,0                    END OF LOGON BUT NO DATA
         LTR   R2,R2                   NO MORE DATA?
         BZ    NODATA                  ISSUE CLSDST WITH NO DATA
         SPACE 2
***********************************************************************
* THIS CODE WILL CHECK IF THE REQUESTED APPLICATION IS ONE THAT HAS   *
* A SPECIAL LOGMODE ENTRY. IF SO, THE ASSOCIATED LOGMODE ENTRY IN THE *
* TABLE WILL BE ADDED TO THE NIB PRIOR TO THE CLSDST(PASS).           *
***********************************************************************
         SPACE 1
FILLNIB  LA    PTRNIB,NIBSTART         USE NIB CONTAINED IN RPL.
         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP
         LA    R1,LOGMDTAB             PT @ LOGMODE TABLE
LOGMDLP  CLC   LOGMDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE?
         BE    SKIPLOGM                YES => USE DEFAULT ENTRY
         CLC   APPLID(8),LOGMDAPP(R1)  DOES APPLID MATCH TABLE ENTRY?
         BE    INSRTLGM                YES => GO INSERT LOGMODE NAME
         LA    R1,LOGMDLEN(,R1)        NO  => GET NEXT TABLE ENTRY
         B     LOGMDLP                        & PROCESS IT
INSRTLGM MVC   NIBLMODE(8),LOGMDENT(R1) MOVE LOGMODE NAME INTO NIB
         SPACE 1
SKIPLOGM L     R3,RPLUSFLD             -> TTE
         MVC   NIBSYM(8),TERMNAME      COPY TERMINAL NAME TO NIB
         SPACE 1
PASS     OI    MFLAGS,CLSDST           CLSDST(PASS) BEING DONE
         OI    MACFLAGS,CLOSPASS
         SPACE 1
         CLSDST  RPL=(PTRRPL),                                         X
               NIB=(PTRNIB),                                           X
               OPTCD=(ASY,PASS),                                       X
               AAREA=APPLID,                                           X
               AREA=(R4),                                              X
               RECLEN=(R2),                                            X
               EXIT=PASSEND
         NI    MFLAGS,255-(CLSDST)
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR CLSDST(PASS)                                     *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    PASS                    YES. REISSUE
         LTR   R15,R15                 CLOSE(PASS) ACCEPTED
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   VALID COMPLETION?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  RETURN TO VTAM
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  CLSDST(PASS) EXIT RTN'
***********************************************************************
*                                                                     *
*        CHECK THAT THE CLSDST(PASS) WORKED CORRECTLY                 *
*                                                                     *
*        THIS EXIT ROUTINE IS SCHEDULED WHEN A CLSDST (PASS)          *
*        IS ISSUED.  THE CLSDST IS ISSUED WHEN A VALID LOGON          *
*        SEQUENCE HAS BEEN RECEIVED FROM THE TERMINAL AND             *
*        THE DESIRED APPLICATION IS RECEIVING LOGON'S.                *
*                                                                     *
*        REGISTER 5 CONTAINS THE ADDRESS OF THE RPL USED              *
*            IN THE CLSDST.                                           *
*                                                                     *
***********************************************************************
         SPACE 3
PASSEND  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         LR    PTRRPL,R1               GET THE RPL PASSED
         LA    R13,RPLSAVE             R13 -> RPL SAVE AREA
         SPACE 1
         OI    MFLAGS,CLSDST           INDICATE IN PASSEND
         OI    EXITFLAG,PASSEX
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(CLSDST)
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR CLSDST(PASS)                                     *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   00    08    QUEUED SESSION ALREADY EXISTS        00  08           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *
*   10    00    APPLICATION UNAVAILABLE              0C  08           *
*   10    02    TARGET APPLICATION UNACCEPTABLE      0C  09           *
*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *
*   10    0D    VTAM INACTIVE TO YOUR ACB            SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    12    CLSDST IN PROGRESS                   14  00           *
*   14    13    CID INVALID                          14  00           *
*   14    4B    INVALID LOGMODE ENTRY SPECIFIED      0C  01           *
*   14    53    TERMINAL NOT DEFINED CROSS DOMAIN    0C  03           *
*   14    55    NO OPNDST AUTHORIZATION              0C  05           *
*   14    5D    OPNDST INVALID (TERM NOT CONNECTED)  14  00           *
*   14    5F    RESOURCE NOT OWNED                   14  00           *
*                                                                     *
***********************************************************************
         SPACE 3
         CH    R15,HEX14               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                  CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB5(R15)            CHECK VALID ACTIONS
ERRTAB5  B     R0CHK5               0  PROBABLY PASSED DEVICE
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8
         B     SENDMSG              C  NORMAL CASE IF APPLI-
*                                       CATION STOPPED ACCEPT-
*                                       ING LOGONS SINCE THE
*                                       INQUIRE
         B     RESEND              10  LET USER TRY AGAIN LATER
         B     FREERPL             14  IT COULD BE THAT NETSOL
*                                       NO LONGER HAS THE
*                                       DEVICE SINCE IT WAS
*                                       FREED BY RELREQ AFTER
*                                       THE READEND EXIT WAS
*                                       SCHEDULED.
R0CHK5   DS    0H
         CH    R0,HEX8             08  QUEUED SESSION EXISTS
         BE    QSESSION                 => ISSUE CLSDST RELEASE
         LTR   R0,R0                   ANYTHING BUT FDBK2=08
*******> BNZ   SNOCCUR                   SHOULD NOT OCCUR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
*
*        BYPASS SIMLOGON FUNCTION & FREE RPL - GO BACK TO VTAM
*
         B     FREERPL                 FREE RPL - GO BACK TO VTAM
         TITLE '*********  N E T S O L  -  SIMLOGON FUNCTION'
SIMLOGON L     R3,RPLUSFLD             -> TTE
         MVI   TERMFLG2,TPASSED        MARK TERM NOT ON NETSOL
         MVC   TERMAPPL,APPLID         REMEMBER APPL FROM CLSDST(PASS)
         LA    PTRNIB,NIBSTART         GET ADDRESS OF NIB
         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP
         ST    R3,NIBUSER              SAVE IN THE USER FIELD
         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB
         SPACE 1
         OI    MFLAGS,SMLOGON           INDICATE SIMLOGON
         OI    MACFLAGS,SIMLGON
         SIMLOGON RPL=(PTRRPL),                                        X
               NIB=NIBSTART,                                           X
               OPTCD=(Q,NRELRQ),                                       X
               EXIT=SIMEND
         NI    MFLAGS,255-(SMLOGON)
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR SIMLOGON                                         *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    SIMLOGON                YES. REISSUE
         LTR   R15,R15                 SIMLOGON ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  SIMLOGON END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE SIMLOGON                               *
*        ENTRY IS FROM THE SIMLOGON USUALLY INVOKED BY THE            *
*        CLSDST(PASS) EXIT.                                           *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
SIMEND   DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO     RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,SMLOGON          TELL ERREXIT THAT ERROR
*                                       IS FOR SIMLOGON
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(SMLOGON)     RESET ERROR EXIT INFO
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR SIMLOGON                                         *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   10    00    TERMINAL UNAVAILABLE                 14  00           *
*   10    03    VTAM IS HALTING                      14  00           *
*   10    06    AUTO NETWORK SHUTDOWN                08  00           *
*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *
*   10    13    CID INVALID                          14  00           *
*   10    4B    INVALID LOGON                        0C  02           *
*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *
*   14    54    INVALID TERMINAL NAME                14  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX14               HIGHEST VALID ACTION
*******> BH    SNOCCUR                  CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB6(R15)            CHECK VALID ACTIONS
ERRTAB6  B     R0CHK6               0  CHECK IF TERM ACCEPTED
         BAL   R7,SNOCCUR           4
         B     FREERPL              8  CAN'T RELEASE IF CAN'T
*                                       GET IT
         B     FREERPL              C  CAN'T SEND MSG IF NOT CONNECTED
*                                      CONNECTED
         B     SIMLOGON            10  REISSUE. CHECK FOR RESET
         B     FREERPL             14  CAN'T CONNECT DEVICE
         SPACE 1
R0CHK6   DS    0H
         CH    R0,HEX9                 TERM UNAVAILABLE
         BE    FREERPL                 RETURN IF SO
         CH    R0,HEX8                 X'0008' THAT WE SHOULD NOT GET ?
         BE    FREERPL                 YES, IGNORE IT FOR NOW
         LTR   R0,R0                   SUCCESSFUL COMPLETION?
*******> BNZ   SNOCCUR                 ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     FREERPL                 FREE RPL GO BACK TO VTAM
         TITLE '*********  N E T S O L  -  SEND MESSAGES ROUTINE'
***********************************************************************
*                                                                     *
*          BRANCH TO DEVICE DEPENDENT SEND ROUTINE TO WRITE           *
*          A MESSAGE TO THE LOGICAL UNIT.                             *
*                                                                     *
***********************************************************************
         SPACE 3
         SPACE 3
SENDMSG  DS    0H
         L     R3,RPLUSFLD             -> TTE
         L     R9,TERMDDT              -> DDT FOR TERMINAL
         L     R15,DDTSEND             -> SEND ROUTINE FOR TERMINAL
         BR    R15                     GO SEND MESSAGE
         TITLE '*********  N E T S O L  -  SEND ROUTINE FOR 3270'
***********************************************************************
*                                                                     *
*          S32SEND EDITS AND SENDS NETSOL MESSAGES TO 3270 DEVICES.   *
*                                                                     *
*          ALL MESSAGES SENT ARE ASYNCHRONOUS USING THE RPL PASSED    *
*          IN R5.                                                     *
*                                                                     *
*               ON ENTRY:                                             *
*                  REG. 0 CONTAINS MESSAGE NUMBER                     *
*                  REG. 3 POINTS TO TTE OF ACTIVE TERMINAL            *
*                  REG. 5 POINTS TO RPL BEING USED                    *
*                  REG. 9 POINTS TO DDT FOR TERMINAL                  *
*                                                                     *
***********************************************************************
         SPACE 3
S32SEND  DS    0H
         CLM   R0,1,=AL1(MSG06)        LOGON MESSAGE ?
         BNE   S32MSG1                 NO, THEN DON'T SEND MSG WITH EB
         OI    TERMFLAG,LOGPROC        SINCE SENDING MSG IS LOGON
         OI    RPLRH3,RPLEB            SEND WITH END BRACKET ON
*                                      AS 3276 MAY GET UPSET ON CLSDST
         B     S32MSG2                 SKIP CHECK FOR EB SEND
         SPACE 1
S32MSG1  TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED) DC18203
*                                   ALREADY ISSUED FOR THIS LU  DC18203
       BO    MISSSEND              IF SO DO NOT ISSUE A NEW ONE DC18203
       NI    TERMFLAG,255-(LOGPROC) INDICAT NOT IN LOGON FUNCTION
         TM    RPLRH3,RPLEB            END BRACKET DUE TO MSG 6 ?
         BNO   S32MSG2                 NO, OKAY STILL IN BRACKET
         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE
         OI    RPLRH3,RPLBB            3276 MIGHT LIKE TO KNOW
         SPACE 1
S32MSG2  DS    0H
         STC   R0,MSGINDEX             SAVE MESSAGE INDEX
         TM    FLAGS,FIRSTSND          IS THIS FIRST SEND AFTER OPNDST
         BZ    S32MSGOK
         OI    RPLRH3,RPLBB            INDICATE BEGIN BRACKET
         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET
         SPACE 2
***********************************************************************
*        FIND OUTPUT MESSAGE AND LENGTH                               *
***********************************************************************
         SPACE 1
S32MSGOK DS    0H
*        ADD TEST FOR CPIC MSG12 AND REPLACE WITH MSG04
         CLC   TERMNAME(8),=C'Y0ACA01 '
         BE    SENDCPIC
         CLC   TERMNAME(8),=C'Y0AEA01 '
         BE    SENDCPIC
         CLC   TERMNAME(8),=C'Y0A5A01 '
         BE    SENDCPIC
         CLC   TERMNAME(8),=C'Z0B8A01 '
         BE    SENDCPIC
         B     NOTCPIC                 NO SO CONTINUE
*        CHANGE MESSAGE
SENDCPIC MVI   MSGINDEX,X'04'                   CHANGE TO MSG04
         L     R1,=A(S32M4NOD)         KLUDGE TO GET ADDRBILITY
         MVC   0(8,R1),TERMNAME        ADD NODE NAME
NOTCPIC  SR    R1,R1                   CLEAR OUT REG
         IC    R1,MSGINDEX             GET THE INDEX
         LA    R2,X'FF'-X'80'          TURN OFF POSSIBLE RESET
         NR    R1,R2                    INDICATOR PRIOR TO INDEXING
         BCTR  R1,0                    INDEX - 1
         SLL   R1,2                    4 * (INDEX - 1)
*                                      = DISPLACEMENT OF MESSAGE
         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE
         LH    R1,0(R2)                GET MESSAGE LENGTH
         S     R1,=F'2'                REDUCE BY LENGTH FIELD AT FRONT
         LA    R2,2(R2)                POINT TO ACTUAL MSG.
         LA    R6,IOAREA               POINT TO OUTPUT AREA
         LR    R7,R2                   POINT TO MESSAGE AREA
         AH    R7,DDTMSGOF               WHERE DATA IS TO BE MOVED
         SPACE 2
***********************************************************************
*        REGISTER 1 CONTAINS MESSAGE LENGTH                           *
*        REGISTER 2 POINTS TO MESSAGE                                 *
*        REGISTER 6 POINTS TO OUTPUT AREA                             *
*        REGISTER 7 POINTS TO MESSAGE AREA FOR VARIABLE DATA          *
***********************************************************************
         SPACE 2
***********************************************************************
*        EDIT MESSAGE 01                                              *
***********************************************************************
         CLI   MSGINDEX,X'01'          IS THIS MESSAGE 01?
         BNE   S32CKM4                 NO SO CARRY ON
         LA    R8,NIBSTART             YES => POINT AT NIB
         MVC   0(8,R7),NIBLMODE               ADD LOGMODE ENTRY TO MSG
         B     S32CONT
***********************************************************************
*        EDIT MESSAGE 04                                              *
***********************************************************************
S32CKM4  DS    0H
         CLI   MSGINDEX,X'04'          IS THIS MESSAGE 04?
         BNE   S32CKM7                 NO SO CARRY ON
         STM   R0,R1,TIMESAVE         SAVE REGS
         TIME  DEC
         STM   R0,R1,TIMEWORK        TIME STASHED AS HHMMSSTH DDYYY
         L     R1,=A(S32M4TIM)       -> THE TIME FIELD
         MVC   0(L'EDITMASK,R1),EDITMASK  SET UP THE EDIT MASK
         OI    TIMEWORK+2,X'0F'      SET UP THE SIGN
         ED    0(7,R1),TIMEWORK
         MVI   3(R1),C':'            SET SEPARATOR
         MVI   6(R1),C' '            BLANK OUT THE SECONDS DIGIT
         ED    8(7,R1),TIMEWORK+5    DO IT TO THE DATE
         LM    R0,R1,TIMESAVE        RESTORE REG
         B     S32CONT                 AND GO SEND IT
***********************************************************************
*        EDIT MESSAGE 07                                              *
***********************************************************************
S32CKM7  DS    0H
         CLI   MSGINDEX,X'07'          IS THIS MESSAGE 07?
         BNE   S32CKM8                 NO SO CARRY ON
         MVC   0(8,R7),=CL8' '         BLANK OUT USER DATA FIELD
         LR    R0,R1                   SAVE CONTENTS OF R1
         SR    R1,R1                   LOAD LENGTH
         IC    R1,DATASEQL              OF USER DATA
         CH    R1,=AL2(8)              IF LENGTH
         BNH   *+8                      GREATER THAN 8
         LA    R1,8                      THEN SET TO 8
         BCTR  R1,0                    DECREMENT FOR MVC
         EX    R1,S32MVAPP             MOVE APPLICATION ID TO MSG.
         LR    R1,R0                   RESTORE R1
         B     S32CONT                 SKIP FURTHER EDITS
S32MVAPP MVC   0(0,R7),DATASEQ         *** EXECUTED ***
***********************************************************************
*        EDIT MESSAGE 8,9,10,11                                       *
***********************************************************************
S32CKM8  DS    0H
         CLI   MSGINDEX,X'08'          IS MSG # LESS THAN 8?
         BL    S32CONT                 YES => BYPASS FURTHER CHECKING
         CLI   MSGINDEX,X'0B'          IS MSG # GREATER THAN 11?
         BH    S32CKM12                YES => CONTINUE MESSAGE CHECKING
         MVC   0(8,R7),APPLID          MOVE APPLID TO MESSAGE
         B     S32CONT                 SKIP FURTHER EDITS
***********************************************************************
*        EDIT MESSAGE 12                                              *
***********************************************************************
S32CKM12 CLI   MSGINDEX,X'0C'          IS IT MSG12?
         BNE   S32CONT                 NO
         BAL   R14,TIMETERM            FIND WHERE TO DO IT
         SPACE 1
*        ALL BCSC MENUS WRITTEN FOR LOGABAX TERMINALS ARE TO
*        TRACKED BY WRITING A MESSAGE TO SYSLOG.
         SPACE 1
         C     R9,=AL4(DDT3767)        IF THIS IS A LOGABAX TERMINAL
         B     S32CONT                   BYPASS LOG MSG     **LRE**
         MVC   LOGMENU+17(8),TERMNAME    YES => ADD NODE NAME TO MSG
         MVC   LOGMENU+44(6),=CL6'LOGON'        ASSUME FROM LOGON EXIT
         TM    EXITFLAG,LOGONEX                 IF FROM LOGON EXIT
         BO    *+10                               YES=> BYPASS
         MVC   LOGMENU+44(6),=CL6'RESEND'         NO => MARK AS RESEND
         STM   R0,R1,RPLERRSA                   SAVE REGS
         WTO   MF=(E,LOGMENU)                   WRITE MSG TO LOG
         LM    R0,R1,RPLERRSA                   RESTORE REGS
***********************************************************************
*        MOVE MESSAGE TO OUTPUT AREA                                  *
***********************************************************************
S32CONT  DS    0H
         LR    R3,R1                   LOAD MESSAGE LENGTH TO ODD REG
         LR    R7,R1                   LOAD MESSAGE LENGTH TO ODD REG
         MVCL  R6,R2                   MOVE MESSAGE TO OUTPUT BUFFER
         L     R3,RPLUSFLD             RESTORE TTE POINTER
         LA    R1,IOAREA               CALCULATE
         SR    R6,R1                     THE MESSAGE LENGTH
         ST    R6,SENDLEN              SAVE LENGTH OF SEND
         SPACE 1
SEND     OI    MFLAGS,SENDING          TELL ERREXIT ASY. SEND
         OI    MACFLAGS,SENDASY
         L     R2,SENDLEN              LENGTH TO SEND TO TERM
         L     R4,CID                  TERMINAL ADDRESS
         SPACE 2
***********************************************************************
*        CHECK TO SEE IF SEND IS FOR MESSAGE 6 (LOGON IN PROGRESS)    *
*        AND IF SO, SEND REQUESTING A POSITIVE RESPONSE SO THAT THE   *
*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *
*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *
***********************************************************************
         SPACE 1
         CLI   MSGINDEX,X'06'          LOGON IN PROGRESS MSG ?
         BE    S32SEND6                YES, DO ELSEWHERE
         OI    TERMFLAG,SENDSCED    INDICATE A SEND TO BE ISSUEDDC18203
         SPACE 1
         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X
               EXIT=SENDEND,RPL=(PTRRPL),POST=SCHED,                   X
               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X
               OPTCD=(ASY,CA),RESPOND=(EX,FME,NRRN)
         SPACE 1
         B     S32CHKSD                HANDLE LIKE REST OF SENDS
         SPACE 3
***********************************************************************
*        SEND MESSAGE 6 REQUESTING A POSITIVE RESPONSE SO THAT THE    *
*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *
*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *
***********************************************************************
S32SEND6 SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X
               EXIT=SENDEND,RPL=(PTRRPL),POST=RESP,                    X
               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X
               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)
S32CHKSD NI    MFLAGS,255-(SENDING)
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR SEND                                             *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    SEND                    YES. REISSUE
         LTR   R15,R15                 WRITE ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND CHK)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 1
         B     RETURN                  RETURN TO VTAM
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  SEND EXIT'
***********************************************************************
*                                                                     *
*         SENDEND IS ENTERED WHEN THE EXIT HAS BEEN SCHEDULED         *
*         FOR THE SEND DONE ABOVE.                                    *
*                                                                     *
*         REGISTER 1 POINTS TO THE ASYNCH RPL BEING USED              *
*         REGISTER 15 =A(SENDEND)                                     *
*                                                                     *
***********************************************************************
         SPACE 3
SENDEND  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL
         L     R3,RPLUSFLD                                      DC18203
         NI    TERMFLAG,X'FF'-SENDSCED INDICATE SEND COMPLETE   DC18203
         OI    MFLAGS,SENDING          TELL ERREXIT THAT ERROR
*                                      ARE FOR SEND
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                      IS ENTERED IF ERRORS HAVE
*                                      OCCURRED
         NI    MFLAGS,255-(SENDING)
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR SEND                                             *
*                                                                     *
*                                                    ACTION           *
*  RTNCD FDBK2                                       CODE(S)          *
*  CODE  CODE         MEANING                        RETURNED         *
*                                                   (R15  R0)         *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                 00  00          *
*   04    04    EXCP. INCOMMING MESSAGE                               *
*               REC  RESP HANDLES 0404 FOR 'SEND POST=SCHED'          *
*               SEND EXIT HANDLES 0404 FOR 'SEND POST=RESP'           *
*                                                                     *
*             SSENSEI/SSENSMI                                         *
*                80     XX        PATH ERRORS         14  00          *
*                80     05        NO SESSION COND.    08  04          *
*                40     XX        RH   ERRORS         SNOCCUR         *
*                20     XX        STATE ERRORS        08  04          *
*                10     XX        REQUEST ERRORS      SNOCCUR         *
*                08     00        BRACKET ERROR       18  00          *
*                08     01        REQUEST REJECT      08  00          *
*                08     02        INTV REQ            14  00          *
*                08     13        BRACKET ERROR       18  00          *
*                08     2B        PRES. SPACE INT. LO 18  00          *
*                08     2D        SLU BUSY            14  00          *
*                                                                     *
*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *
*   0C    01    LU NOT AVAILABLE (POWERED OFF)        08  00          *
*   0C    02    REQUEST CANCELLED TEST REQ (LOSTTERM) 14  00          *
*   0C    07    CONNECTION RECOVERY        (LOSTTERM) 14  00          *
*   0C    08    LU RESTARTED               (LOSTTERM) 14  00          *
*   0C    0B    REQUEST CANCELLED BY CLSDST           14  00          *
*   0C    0C    REQUEST CANCELLED BY CLEAR            08  04          *
*   10    03    QUICK HALT (TPEND)                    SNOCCUR         *
*   10    05    PERMANENT CHANNEL OR LINK FAILURE     08  00          *
*   10    07    VARY DEACTIVATE IMMEDIATE  (LOSTTERM) 14  00          *
*   10    09    TERMINATE SELF OR LOGOFF   (LOSTTERM) 14  00          *
*   10    0A    ACF/VTAM ERROR                        SNOCCUR         *
*   10    0D    ACF/VTAM INACTIVE FOR ACB             SNOCCUR         *
*   10    0E    ABEND FOR PROGRAMS TCB                SNOCCUR         *
*   10    0F    BUFFERS FULL               (LOSTTERM) 14  00          *
*   10    10    TERMINATE SELF RECEIVED               08  04          *
*   14    12    CLSDST IN PROGRESS                    14  00          *
*   14    13    CID INVALID                           14  00          *
*                                                                     *
***********************************************************************
         SPACE 3
         OI    EXITFLAG,SENDEX         INDICATE WRITE EXIT
         CH    R15,HEX18               HIGHEST VALID ACTION
*******> BH    SNOCCUR                  CODE IS X'20'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTABB(R15)            CHECK VALID ACTION
ERRTABB  B     ROCHKB               0  CHECK IF WRITE WENT
         BAL   R7,SNOCCUR           4
         B     RELOPNA              8  CHECK IF WE WANT TO REOPEN
         BAL   R7,SNOCCUR           C
         B     WHATSEND            10  FIND OUT WHAT KIND OF SEND
         B     FREERPL             14  LOST DEVICE
         B     RESENDM             18  RESEND MSG
         SPACE 1
RELOPNA  LTR   R0,R0                   OPNDST AFTER CLSDST ?
         BZ    RELEASE                 NO SO JUST GO CLSDST
         OI    FLAGS,RELOPND           INDICATE WE WANT RE-OPEN
         B     RELEASE                 CLSDST FIRST
         SPACE 1
WHATSEND TM    FLAGS,LUSTATE           LUSTAT SEND ?
         BO    SENDLU
         B     SEND                    NO, NORMAL SEND, CONTINUE IT
         SPACE 1
RESENDM  DS    0H                      RESEND MESSAGE
         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT
*                                      HAVE STARTED FIRST
         IC    R0,MSGINDEX             RETRIEVE SAVED MSG #
         B     SENDMSG
         SPACE 1
ROCHKB   DS    0H
         LTR   R0,R0                   SUCCESSFUL COMPLETION?
*******> BNZ   SNOCCUR                 NO ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 1
*ISSSEND NI    FLAGS,255-(LOOPONCE)     TURN OFF RETRY INDIC
MISSSEND TM    FLAGS,LUSTATE           CONTINUE LUSTAT PROC ?
         BO    CONTLU
         TM    FLAGS,CLEARSCR          CLEAR OF SCREEN FROM RECEND?
         BO    CONTPASS
         B     FREERPL                 WAIT FOR ACITIVITY FROM LU
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  RELREQ EXIT'
***********************************************************************
*                                                                     *
*    THIS EXIT ROUTINE IS SCHEDULED WHEN AN APPLICATION ISSUES        *
*    OPNDST (ACQUIRE) FOR A TERMINAL CURRENTLY OWNED BY NETSOL.       *
*                                                                     *
*        ON ENTRY:                                                    *
*                                                                     *
*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *
*         FOLLOWING;                                                  *
*              WORD 0 - ACB ADDRESS.                                  *
*              WORD 1 - ADDRESS OF SYMBOLIC NAME OF TERMINAL          *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS                              *
*                                                                     *
*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *
*                                                                     *
***********************************************************************
         SPACE 3
RELREQ   DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG
         SPACE 2
***********************************************************************
*        NOW SCAN THE TERMINAL TABLE ENTRIES TO SEE IF WE CAN FIND A  *
*        MATCH ON THE TERMINAL NAME (ERROR IF DON'T). WHEN FOUND,     *
*        SEE IF A LOGON IS IN PROGRESS (VIA LOGPROC FLAG). IF THIS IS *
*        THE CASE, WE WON'T RELEASE THE TERMINAL, OTHERWISE RELEASE   *
*        TO THE APPLICATION REQUESTING IT.                            *
***********************************************************************
         SPACE 1
         LM    R3,R5,TERMTABS          SET UP FOR THE BXLE THRU TABLE
         CR    R3,R5                   NULL TABLE ?
*******> BH    SNOCCUR                 YES, ERROR IF SO
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         L     R6,4(,R1)               ADDRESS OF RELREQ NAME OF TERM
         SPACE 1
FINDNAME CLC   0(8,R6),TERMNAME        MATCH ON THE NAME
         BE    FNDNAME                 YES, FOUND ITS TTE
         BXLE  R3,R4,FINDNAME          CONTINUE
         BAL   R7,SNOCCUR              ERROR, SHOULD NEVER GET HERE
         SPACE 1
FNDNAME  TM    TERMFLAG,LOGPROC        LOGON ? YES, DON'T FREE TERMINAL
         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG
         SPACE 1
         OI    EXITFLAG,RELREQEX       INDICATE IN RELREQ EXIT
         BAL   R14,GETRPL              GET AN RPL
         LA    R13,RPLSAVE             R13 -> SAVE IN THE RPL
         ST    R3,RPLUSFLD             SAVE ADDRESS OF TTE IN THE RPL
         ST    R5,TERMCRPL             SAVE ADDRESS OF RPL IN THE TTE
         LA    PTRNIB,SYNCHNIB
         MVC   NIBSYM(8),TERMNAME      PLACE SYMBOLIC TERMINAL
*                                      SET INDICATOR TO
         OI    FLAGS,RELOPND           RELEASE THE DEVICE AND
*                                      TRY TO REOPEN IT
         MVC   CID,TERMCID             GET CID INTO ASYNCH RPL
         SPACE 1
         MVC   RELRQMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG
         WTO   MF=(E,RELRQMSG)         INFORM WORLD OF REQUEST
         SPACE 1
         B     RELEASE                 GO DO THE RELEASE
         SPACE 1
RRFAIL   MVC   RELFLMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG
         WTO   MF=(E,RELFLMSG)         INFORM WORLD OF REQUEST FAILURE
         SPACE 1
         B     RETURN                  REFUSE RELEASE REQUEST
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  LOSTERM EXIT'
***********************************************************************
*                                                                     *
*   THIS EXIT ROUTINE IS SCHEDULED BY VTAM WHEN :                     *
*                                                                     *
*                * WHEN CONTACT WITH AN LU IS LOST                    *
*                * WHEN A LU REQUESTED A LOGOFF                       *
*                * WHEN CERTAIN ERRORS DETECTED IN TRANSMISSION       *
*                * WHEN A LU IS TEMPORARILY UNAVAILABLE               *
*                                                                     *
*        ON ENTRY:                                                    *
*                                                                     *
*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *
*            FOLLOWING;                                               *
*              WORD 0 - ACB ADDRESS.                                  *
*              WORD 1 - CID OF LOST TERMINAL                          *
*              WORD 2 - USER FIELD FROM NIB                           *
*              WORD 3 - REASON CODE, AS FOLLOWS:                      *
*                                                                     *
*  0 - DIAL-LINE DISCONNECT (DIAL-IN)            RELEASE (CLSDST)     *
*  4 - DIAL-LINE DISCONNECT (DIAL-OUT)           RELEASE (CLSDST)     *
*  8 - RESERVED                                                       *
*  C - CONTACT WITH LU PERMANENTLY LOST          PROBDEV (CLSDST)     *
* 10 - LU SUCCESSFULLY RECONTACTED               RELEASE              *
* 14 - UNCONDITIONAL TERMINATE COMMAND           RELEASE (CLSDST)     *
*    -       "       CHARACTER CODED LOGOFF         "        "        *
*    -       "       TERMSESS                       "        "        *
* 18 - CONTACT WITH LU LOST                      RETURN TO VTAM       *
* 1C - RESERVED                                                       *
* 20 - CONDITIONAL TERMINATE SELF                RELEASE              *
*    -     "       CHARACTER CODED LOGOFF           "                 *
*    -     "       TERMSESS                         "                 *
* 24 - BUFFER LIMIT DEFINED FOR LU EXCEEDED         "                 *
* 28 - TEST REQUEST SET                             "                 *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS                              *
*                                                                     *
*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *
*                                                                     *
***********************************************************************
         SPACE 3
LOSTERM  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO    RETURN
         SPACE 1
         LR    R7,R1                   SAVE ACROSS GETRPL
         BAL   R14,GETRPL              GET AN RPL FOR WORK
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         MVC   RPLUSFLD(4),8(R7)       COPY TTE ADDRESS TO RPL
         OI    EXITFLAG,LOSTEX         INDICATE IN LOSTERM EXIT
         MVC   CID,4(R7)               SAVE CID IN RPL/WORKQREA
* LRE    MVC   PACKWORK(1),15(R7)      COPY LOSTERM CODE TO WORK AREA
* LRE    UNPK  PACKWORK+2(3),PACKWORK(2) UNPACK TO PRINT
* LRE    MVC   LOSTMSG+31(2),PACKWORK+2  TO MSG AREA
* LRE    TR    LOSTMSG+31(2),TRTAB     MAKE IT PRINTABLE
         L     R3,RPLUSFLD             GET TTE POINTER
         ST    R5,TERMCRPL             SAVE A(RPL) IN TTE
* LRE    MVC   LOSTMSG+43(8),TERMNAME  TERMINAL LU NAME
* LRE    WTO   MF=(E,LOSTMSG)          ISSUE ERROR MSG.
         SPACE 2
***********************************************************************
*        NOW CHECK TO MAKE SURE THAT THE NIB USER FIELD IS CORRECT.   *
*        WOULD NOT BE IF OPNDST DONE WITH WRONG NIBUSER VALUE.        *
***********************************************************************
         SPACE 1
         CLC   CID,TERMCID             CHECK THAT CID'S ARE CORRECT
         BE    LOSTCODE                YES SO GO CHECK CODE     DC18203
         CLC   TERMCID,=F'0'           IS IT ZERO (THIS HAPPENS DC18203
*                                      WHEN AN OPNDST FAILS FOR DC18203
*                                      FIRST LOGON PRIOR TO     DC18203
*                                      LOSTERM SCHEDULED )      DC18203
******>  BNE   SNOCCUR                 BAD NEWS IF NOT !!!!!!!
         BNE   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
LOSTCODE L     R4,12(R7)               GET LOSTERM ENTRY CODE
         CH    R4,HEX8                 IS IT 0,4 OR 8 ?
         BNH   RELEASE                 YES SO JUST CLSDST DEVICE
         CH    R4,HEXC                 IS IT 12 ?
         BE    PROBDEV                 YES SO WTO AND CLSDST
         CH    R4,HEX10                IS IT X'10' ?
         BE    RELEASE                 YES SO LETS RELEASE
         CH    R4,HEX14                IS IT X'14' ?
         BE    PROBDEV                 YES SO WTO AND CLSDST
         CH    R4,HEX20                IS IT GREATER THAN X'20' ?
         BNL   RELEASE                 YES SO LETS RELEASE
         B     FREERPL                 X'18' CODE (24), IGNORE, WAIT
*                                       FOR REENTRY WITH X'0C' OR X'10'
         SPACE 1
REAQUIRE OI    FLAGS,RELOPND           INDICATE TO RELEASE
         B     RELEASE
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  RELEASE TERMINAL SUBRTN'
***********************************************************************
*                                                                     *
*        RELEASE THE TERMINAL, AND PERHAPS RE-ACQUIRE IT.             *
*                                                                     *
*        THERE ARE THREE ENTRY POINTS TO THIS ROUTINE.                *
*                                                                     *
*        'LOGOFF' IS USED WHEN THE USER ISSUES A LOGOFF COMMAND TO    *
*        NETSOL. THE TERMINAL IS RELEASED.                            *
*                                                                     *
*        'QSESSION' IS USED WHEN A CLSDST(PASS) FAILS BECAUSE A QUEUED*
*        SESSION REQUEST IS OUTSTANDING FOR THIS TERMINAL FROM THE    *
*        REQUESTED APPLICATION. THE TERMINAL IS RELEASED AND THEN     *
*        A SIMLOGON IS NOT ISSUED TO REACQUIRE THE TERMINAL WHEN IT   *
*        IS RELEASED BY THE APPLICATION.                              *
*                                                                     *
*        'PROBDEV' WILL WTO AND RELEASE THE DEVICE BECAUSE OF AN I/O  *
*        PROBLEM.                                                     *
*                                                                     *
*        'RELEASE' WILL RELEASE THE DEVICE AND, IF THERE IS A TEST    *
*        REQUEST SET, 'RELEASE' WILL REACQUIRE THE DEVICE.            *
*                                                                     *
*        REGISTER 5 (PTRRPL) WILL POINT TO AN RPL.                    *
*                                                                     *
***********************************************************************
         SPACE 3
LOGOFCMD OI    FLAGS,LOGOFF            INDICATE CLSDST TO RELEASE THE
*                                      TERMINAL.
         B     RELCODE                 GOTO RELEASE CODE
         SPACE 1
QSESSION OI    FLAGS,LOGOFF            INDICATE CLSDST THEN NO SIMLOGON
*                                      THE CLSDST RELEASE MUST BE DONE
*                                      SINCE THE CLSDST PASS FAILED.
         B     RELCODE                 GOTO RELEASE CODE
         SPACE 1
PROBDEV  OI    FLAGS,BADEVICE          TURN ON  FLAG FOR WTO.
         B     RELCODE                 GOTO RELEASE CODE
         SPACE 1
BADLU    MVC   LISTWTO8+17(8),TERMNAME ADD TERMNAME TO ERROR MSG
         WTO   MF=(E,LISTWTO8)         WRITE ERROR MSG
         MVC   CID,TERMCID             MOVE CID INTO RPL FOR LATER USE
         B     RELCODE                 GO TO RELEASE CODE
         SPACE 1
RELEASE  TM    FLAGS,RELOPND           IS RELEASE A PRELUDE TO
         BO    CLOSEREL                 REOPEN?
*                                      NO. SIMPLY RELEASE IT
*                                      YES. MUST SAVE SYMBOLIC
*                                       NAME FOR LATER REOPEN
*                                      NOTE: THIS CAN OCCUR
*                                       FOR READ(ANY)/CHECK
*                                       ERROR HANDLING.
RELCODE  L     R3,RPLUSFLD             -> TTE FROM RPL
         SPACE 1
*        TM    FLAGS,BADEVICE  82018   IS WTO BIT ON ?   COMMENT OUT
         B     CLOSEREL        82018   BYPASS WTO
         NI    FLAGS,255-(BADEVICE)    YES WTO BIT ON THEN
*                                       TURN WTO FLAG OFF.
         MVC   LISTWTO+17(8),TERMNAME  MOVE DEVICE NAME INTO
*                                      THE MESSAGE AREA OF
*                                      THE LIST FORM OF WTO.
         WTO   MF=(E,LISTWTO)          EXECUTE FORM OF WTO
         SPACE 1
CLOSEREL OI    MACFLAGS,CLSREL         INDICATE DOING CLOSE(REL
         OI    MFLAGS,CLSDST
***********************************************************************
*        CLSDST RELEASE WILL BE DONE FOR THE TERMINAL BY SPECIFYING   *
*        THE TERMINAL NAME IN THE NIB. THE NIB IS USED BECAUSE THE    *
*        CLSDST(RELEASE) CAN BE DONE FROM THE LOGON EXIT BEFORE A     *
*        SESSION HAS BEEN ESTABLISHED. IN THIS CASE, THE CID WOULD BE *
*        REJECTED BY VTAM IF USED IN THE CLSDST(RELEASE).             *
***********************************************************************
         MVC   NIBSTART(NIBLNIB),FRESHNIB INITIALIZE NIB
         LA    PTRNIB,NIBSTART         -> NIB
         L     R3,RPLUSFLD             -> TTE
         ST    R3,NIBUSER              SAVE A(TTE) IN NIB
         MVC   NIBSYM(8),TERMNAME      MOVE TERMINAL NAME TO NIB
         CLSDST RPL=(PTRRPL),                                          X
               EXIT=CDSTEND1,                                          X
               OPTCD=RELEASE,                                          X
               NIB=NIBSTART
         SPACE 1
         NI    MFLAGS,255-(CLSDST)     INDICATE CLOSE DONE
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    CLOSEREL                YES. REISSUE
         LTR   R15,R15                 CLSDST ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  CLSDST(RELEASE) END EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE CLSDST(RELEASE)                        *
*        ENTRY IS FROM THE CLSDST(RELEASE) IN THE RELEASE RTN.        *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
CDSTEND1 DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO     RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,CLSDST           TELL ERREXIT THAT ERROR
*                                       IS FOR CLSDST(RELEASE)
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(CLSDST)
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *
*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    12    CLSDST IN PROGRESS                   14  00           *
*   14    52    NIB INVALID                          SNOCCUR          *
*   14    60    INVALID LU NAME                      14  00           *
*                                                                     *
***********************************************************************
         SPACE 3
         OI    EXITFLAG,CLOSEX         INDICATE IN CLOSE REL EX
         CH    R15,HEX14               HIGHEST POSSIBLE ACTION
*******> BH    SNOCCUR                  CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB9(R15)            CHECK VALID ACTIONS
ERRTAB9  B     R0CHK9               0  PROBABLY RELEASED IT
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8  ALREADY RELEASING, NEW
*                                       RELEASE WON'T HELP
         BAL   R7,SNOCCUR           C  NO MSG TO WRITE AND
*                                       PROBABLY COULDN'T
*                                       ANYWAY
         B     CLOSEREL            10  REISSUE.
         B     FREERPL             14  IT COULD BE THAT NETSOL
*                                       NO LONGER HAS THE
*                                       DEVICE SINCE IT WAS
*                                       ALREADY FREED BY A LOSTERM,
*                                       RELREQ OR READEND
*                                       REQUEST.
         SPACE 1
R0CHK9   DS    0H
         LTR   R0,R0                   VALID COMPLETION?
*******> BNZ   SNOCCUR                 ERROR IF NOT
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         EJECT
***********************************************************************
*                                                                     *
*  AFTER RELEASING THE TERMINAL, IT IS NOT NECESSARY TO               *
*  RE-ACQUIRE IT, OR AT LEAST ATTEMPT TO RE-ACQUIRE IT, FOR THE       *
*  FOLLOWING REASONS:                                                 *
*                                                                     *
*    THE OTHER APPLICATION MAY CANCEL ITS REQUEST FOR THE             *
*    TERMINAL AFTER NETSOL'S RELREQ EXIT HAS ISSUED THE               *
*    CLSDST(RELEASE), BUT BEFORE LOGGING ONTO THE TERMINAL.           *
*    IN THIS CASE NETSOL WISHES TO RE-ACQUIRE THE TERMINAL.           *
*    THE TERMINAL WILL ONLY BE ACQUIRED BY NETSOL IF THE              *
*    OTHER APPLICATION HAS NOT ALREADY LOGGED ON THE TERMINAL.        *
*                                                                     *
*    THE TERMINAL MAY HAVE BEEN RELEASED BECAUSE IT WAS LOGGED        *
*    ON TO NETSOL WHEN THE TEST REQUEST KEY WAS SET.  THIS            *
*    BLOCKS ALL FURTHER I/O TO THE DEVICE, INCLUDING ENTRY OF         *
*    A LOGON SEQUENCE NECESSARY TO PASS THE DEVICE TO TOLTEP.         *
*    NETSOL MUST RELEASE, THEN RE-ACQUIRE THE DEVICE SO THAT          *
*    I/O IS NO LONGER BLOCKED.                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         L     R3,RPLUSFLD             -> TTE FOR THE NAME
         MVI   TERMFLG2,TREL           MARK TERM RELEASED
*
*        UNCOND BRANCH TO FREERPL TO BYPASS OPNDST ACQUIRE
*
         B     FREERPL                 TO FREERPL
         TM    FLAGS,LOGOFF            LOGOFF COMMAND ISSUED?
         BO    FREERPL                  YES => FINISHED
         TM    FLAGS,SIMLOG            NOW DO SIMLOGON?
         BO    SIMLOGON                 YES => BR TO SIMLOGON CODE
         TM    FLAGS,RELOPND           RELEASE DEVICE ONLY ?
         BZ    FREERPL
         NI    FLAGS,255-(RELOPND)
         LA    PTRNIB,NIBSTART         POINT TO THE NIB
         L     R3,RPLUSFLD             -> TTE FOR THE NAME
         MVC   NIBSYM(8),TERMNAME      GET THE SYMBOLIC NAME
         SPACE 2
***********************************************************************
*  MUST USE NIB WITH SYMBOLIC TERMINAL NAME BECAUSE THE CID IS        *
*  NO LONGER VALID AFTER DEVICE IS RELEASED.  OPNDST(SPEC)            *
*  MUST HAVE A SYMBOLIC TERMINAL NAME SUPPLIED.                       *
***********************************************************************
         SPACE 1
REOPEN   DS    0H                      USE THIS LABEL FOR ERREXIT
         L     R3,RPLUSFLD             -> TTE
         ST    R3,NIBUSER              -> TTE IN NIB FOR FUTURE RPL'S
         OI    MACFLAGS,OPNDACQ        SET OPNDST ISSUED
         OI    MFLAGS,OPNDSPEC         SET OPNDST IS CURRENTLY ACTIVE
         OPNDST RPL=(PTRRPL),                                          X
               OPTCD=(SPEC,ACQUIRE),                                   X
               EXIT=OPNAQRX,                                           X
               NIB=NIBSTART
         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    REOPEN                  YES. REISSUE
         LTR   R15,R15                 OPNDST ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RETURN                  GO BACK TO VTAM AND
*                                      WAIT FOR EXIT TO BE SCHEDULED
         TITLE '*********  N E T S O L  -  OPNDST (SPEC,ACQUIRE) EXIT'
***********************************************************************
*                                                                     *
*        CHECK VALIDITY OF THE OPNDST                                 *
*        ENTRY IS FROM THE OPNDST IN THE CLSDST END EXIT.             *
*                                                                     *
*        REGISTER 1 - POINTS TO THE RPL USED.                         *
*        REGISTER 15 - BASE REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 3
OPNAQRX  DS    0H
         DROP  R10,R11,R12             DROP BASE REGS
         USING *,R15                   ESTABLISH INITIAL ADDRESS
         L     R12,=A(START)           R12 IS BASE REGISTER
         DROP  R15
         USING START,R12,R11,R10       TELL ASSEM
         LM    R10,R11,RESTBASE        SET BASE REGS
         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS
         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?
         BO     RETURN
         LR    PTRRPL,R1               POINT TO THE INPUT RPL
         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL
         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR
*                                       IS FOR OPNDST
         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT
*                                       IS ENTERED IF ERRORS HAVE
*                                       OCCURRED
         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO
         EJECT
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*   10    00    DEVICE UNAVAILABLE                   14  00           *
*   10    03    VTAM IS HALTING                      SNOCCUR          *
*   10    05    PERMENENT FAILURE IN PATH            08  00           *
*   10    06    AUTO NETWORK SHUTDOWN                08  00           *
*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *
*   10    0E    ABEND IN VTAM                        SNOCCUR          *
*   14    12    CLSDST IN PROGRESS                   14  00           *
*   14    53    NODE UNKNOWN TO VTAM                 14  00           *
*   14    55    NO OPNDST AUTHORIZATION              SNOCCUR          *
*                                                                     *
***********************************************************************
         SPACE 3
         OI    EXITFLG2,OPNACQX        INDICATE OPNDST EXIT ENTERED
         CH    R15,HEX14               HIGHEST VALID ACTION
*******> BH    SNOCCUR                  CODE IS X'14'
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     ERRTAB7(R15)            CHECK VALID ACTIONS
ERRTAB7  B     R0CHK7               0  CHECK IF DEVICE ACCEPTED
         BAL   R7,SNOCCUR           4
         BAL   R7,SNOCCUR           8  CAN'T RELEASE IF CAN'T
*                                       GET IT
         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT
*                                      CONNECTED
         B     REOPEN              10  REISSUE. NO NEED TO
*                                       CHECK FOR RESET
         B     FREERPL             14  A NORMAL CASE.  FAILED
*                                       TO RECONNECT DEVICE.
         SPACE 1
R0CHK7   DS    0H
         CH    R0,HEX8                 TERMINAL RECONNECTED?
         BE    FREERPL                 NO. THIS IS WHAT IS
*                                       WANTED.  CONTINUE
*                                       WITH OTHER DEVICES.
         LTR   R0,R0                   SUCCESSFUL COMPLETION?
******>  BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 1
         L     R3,RPLUSFLD             -> TTE
         MVI   TERMFLG2,TOPEN             MARK TERM ON NETSOL
         OI    FLAGS,FIRSTSND
         B     RESEND
         TITLE '*********  N E T S O L  -  RESEND ROUTINE'
***********************************************************************
*                                                                     *
*        RESEND (REISSUE A SEND)                                      *
*                                                                     *
*   THIS ROUTINE IS USER BY THE SENDEND EXIT , RECEND EXIT ,          *
*   RELEASE EXIT TO REISSUE THE 'GOOD MORNING ' MESSAGE               *
*   AFTER RECEIVING A BAD LOGON OR RECOVERING AN LU                   *
*                                                                     *
***********************************************************************
         SPACE 3
RESEND   DS    0H
         LA    R0,MSG12                LOGON MESSAGE
         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT
*                                      HAVE STARTED FIRST
         B     SENDMSG
*        A SUBROUTINE TO PUT NODE AND TIME IN MESSAGE 12
*        RETURNS TO R14
TIMETERM DS    0H
         STM   R0,R1,TIMESAVE         SAVE REGS
         L     R1,DDTTERM             -> TERM FIELD IN MSG12
         MVC   0(8,R1),TERMNAME      INSERT THE NAME
*        PLACE IN MSG12
         TIME  DEC
         STM   R0,R1,TIMEWORK        TIME STASHED AS HHMMSSTH DDYYY
         L     R1,DDTTIME            -> THE TIME FIELD
         MVC   0(L'EDITMASK,R1),EDITMASK  SET UP THE EDIT MASK
         OI    TIMEWORK+2,X'0F'      SET UP THE SIGN
         ED    0(7,R1),TIMEWORK
         MVI   3(R1),C':'            SET SEPARATOR
         MVI   6(R1),C' '            BLANK OUT THE SECONDS DIGIT
         ED    8(7,R1),TIMEWORK+5    DO IT TO THE DATE
         L     R1,DDTTMDL            -> MODEL FIELD IN MSG 12
         LTR   R1,R1                 IF =0 THEN EXIT
         BZ    TIMEEXIT
         MVC   0(1,R1),TERMMODL      MOVE IN MODEL NUMBER
TIMEEXIT DC    0H'0'
         LM    R0,R1,TIMESAVE        RESTORE REG
         BR    R14
TIMEWORK DC    F'0'
TIMESAVE DC    2F'0'
EDITMASK DC    X'4020214B212121404021204B212121' TIMESTAMP EDIT
         TITLE '*********  N E T S O L  -  GET AN RPL SUBROUTINE'
***********************************************************************
*                                                                     *
*        THE GETRPL SUBROUTINE GETS A NEW RPL VIA A GETMAIN MACRO     *
*        FOR 'LNGTHRPL' IN SUBPOOL 1. IT THEN INITIALIZES IT AND      *
*        RETURNS TO THE CALLER WITH THE RPL ADDRESS IN R5.            *
*                                                                     *
*        INPUT REGISTERS:                                             *
*                                                                     *
*              REG 10-12 - BASE REGISTERS                             *
*              REG 14    - CALLER'S RETURN ADDRESS                    *
*                                                                     *
*        OUTPUT REGISTERS:                                            *
*                                                                     *
*              REG 0-1 - UNPREDICTABLE                                *
*              REG 5   - ADDRESS OF AN INITIALIZED RPL/NIB/WORKAREA   *
*                                                                     *
***********************************************************************
         SPACE 3
GETRPL   DS    0H
         L     R0,LNGTHRPL             LENGTH OF RPL + SUBPOOL
         GETMAIN R,LV=(0)              G E T M A I N    R P L
         MVC   0(8,R1),=CL8'DYNAMRPL'  IDENTIFY THE RPL AS DYNAMIC
         LA    PTRRPL,8(,R1)           R5 -> R P L
         MVC   IFGRPL(LNIFGRPL),FRESHRPL  COPY RPL TO GOTTEN ONE
*                                      NOTE: THIS MAKES RPL ASYNCH
         MVC   NIBDMPID(8),=CL8'DYNAMNIB' SET NIB DUMP ID
         MVC   NIBSTART(NIBLNIB),FRESHNIB INITITIALIZE NIB
         XC    WORKSPAC(WORKRPLA),WORKSPAC ZERO OUT KEY WORK AREA STUFF
         STM   R0,R1,TIMESAVE          SAVE WORK REGS
         TIME  DEC                      SAVE TIMESTAMP
         STM   R0,R1,GRPLTIME            IN RPL WORKAREA
         LM    R0,R1,TIMESAVE             RESTORE WORK REGS
         BR    R14                     RETURN TO CALLER
         TITLE '*********  N E T S O L  -  FREE RPL SUBROUTINE'
***********************************************************************
*                                                                     *
*        FREERPL IS ENTERED WHEN AN RPL/WORKAREA IS NOLONGER          *
*        NEEDED BY THE EXIT ROUTINES.  IT ISSUES A FREEMAIN           *
*        MACRO FOR THE RPL ADDRESS IN REGISTER 5.                     *
*        IF THE FIRST 8 CHARACTERS OF THE WORKAREA ARE NOT 'DYNAMRPL' *
*        THEN THIS SUBROUTINE BRANCHES TO INDICATE A USER 0008 ABEND. *
*                                                                     *
*        AT EXIT FROM FREERPL, CONTROL IS RETURNED TO VTAM.           *
*                                                                     *
*        INPUT REGISTERS                                              *
*          R5  - POINTS TO RPL/WORKAREA TO BE FREED                   *
*          R10-R12 - BASE REGISTERS                                   *
*          R13 - ADDRESS OF REGISTER SAVE AREA                        *
*                                                                     *
***********************************************************************
         SPACE 3
FREERPL  DS    0H
         L     R3,RPLUSFLD             -> TTE
         LTR   R3,R3                   IF NOT ZERO
         BZ    *+10                      THEN
         XC    TERMCRPL,TERMCRPL              RESET A(RPL) IN TTE
         L     R0,LNGTHRPL             LENGTH OF RPL TO BE FREED
         S     R5,=F'8'                REDUCE FOR INDENTITY AT FRONT
         CLC   0(8,R5),=CL8'DYNAMRPL'  IS IT A DYNAMIC RPL ?
         BNE   TOOSMALL                NO, ISSUE U0008 ABEND
         SPACE 1
         FREEMAIN R,LV=(0),A=(5)       F R E E   R P L  -> R5
         SPACE 1
RETURN   DS    0H
         L     R14,RETVTAM@            RESTORE EXIT RETURN ADDRESS
         BR    R14                     RETURN
         TITLE '*********  N E T S O L  -  RECEIVE(ANY) SUBROUTINE'
***********************************************************************
*                                                                     *
*                   RECEIVE (ANY)                                     *
*                                                                     *
*        THIS SUBROUTINE IS ENTERED ONLY WHEN A REC (ANY) IS TO       *
*        BE ISSUED.                                                   *
*                                                                     *
*        INPUT REGISTERS:                                             *
*                                                                     *
*              REG 5     - POINTS TO AN ASYNCHRONOUS RPL PLUS         *
*                          ITS WORKAREA                               *
*              REG 14    - CALLER'S RETURN ADDRESS                    *
*                                                                     *
*         OUTPUT REGISTERS:                                           *
*                                                                     *
*               REG 0-1   - UNPREDICTABLE                             *
*               REG 2-14  - VALUE AT INPUT                            *
*               REG 15    - UNPREDICTABLE                             *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
RECSUB   DS    0H
         ST    R14,SUBSAV14            SAVE RETURN ADDR
RECANY   OI    MFLAGS,RECA             INDICATE READ(ANY) IN PROGRESS
         RECEIVE RPL=(PTRRPL),OPTCD=(ASY,ANY,TRUNC,Q),                 X
               AREA=IOAREA,AREALEN=L'IOAREA,EXIT=RECEND,               X
               RTYPE=(DFSYN,RESP,NDFASY)
         NI    MFLAGS,255-(RECA)
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR RECEIVE(ANY):                                    *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    RECANY                  YES. REISSUE
         LTR   R15,R15                 READ-ANY ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND TEST)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 1
         L     R14,SUBSAV14            RESTORE THE RETURN ADDR
         BR    R14                     RETURN TO CALLER
         SPACE 3
         LTORG
         TITLE '********* N E T S O L  -  LUSTAT ROUTINE'
***********************************************************************
*       ROUTINE TO HANDLE LOGICAL UNIT STATUS RECEIVED                *
*                                                                     *
*    SSENEEI  SSENSMI                                                 *
*      00        02       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *
*      00        02          SNOCCUR                                  *
*      08        1C       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *
*      08        2B         "     "     "        "    "    "  (RESEND)*
*      08        31       DEVICE POWERED OFF     "    "    "          *
*      08        01          SNOCCUR                                  *
*                                                                     *
***********************************************************************
         SPACE 3
LUSTATUS DS    0H
         OI    FLAGS,LUSTATE           SEND +VE RESPONSE
         OI    MFLAGS,LUSEND
         MVC   SENSE(2),RPLSSEI   SAVE SSENSEI + SSENSMI
         MVC   USENSE(2),RPLUSNSI SAVE USSESEI(2 BYTES)
         NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT
         SPACE 1
SENDLU   EQU   *
         SEND  STYPE=RESP,CONTROL=LUS,RESPOND=(NEX,FME,NRRN),          *
               RPL=(PTRRPL),POST=SCHED,OPTCD=(ASY,CA),EXIT=SENDEND
         NI    MFLAGS,255-(LUSEND)     SEND DONE
         SPACE 2
***********************************************************************
*                                                                     *
*  ERROR ACTIONS FOR SEND                                             *
*                                                                     *
*                                                   ACTION            *
*  RTNCD FDBK2                                      CODE(S)           *
*  CODE  CODE         MEANING                       RETURNED          *
*                                                  (R15  R0)          *
*                                                                     *
*   00    00    SUCCESSFUL COMPLETION                00  00           *
*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *
*                                                                     *
***********************************************************************
         SPACE 1
         CH    R15,HEX10               VTAM BUFFERS FULL?
*                                       (ONLY POSSIBLE ERROR)
         BE    SENDLU                  YES. REISSUE
         LTR   R15,R15                 WRITE ACCEPTED?
*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LTR   R0,R0                   ACCEPTED? (2ND CHK)?
*******> BNZ   SNOCCUR                 NO. ERROR
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B    RETURN                   RETURN TO VTAM
         SPACE 1
CONTLU   NI    FLAGS,255-(LUSTATE)     LUSTAT SEND DONE
         CLC   SENSE,LUS0001           IS DEVICE NOW AVAILABLE
         BE    RESEND                  YES SO SEND LOGON MSG.
         CLC   SENSE,LUS082B           IS DEVICE NOW AVAILABLE
         BE    RESEND
         CLC   SENSE,LUS0831           HAS DEVICE BEEN POWERED OFF?
         BE    LOGOFCMD                YES SO RELEASE TERM.  VTAM WILL
*                                      SCHEDULE A LOGON WHEN DEVICE
*                                      COMES AVAILABLE (3274 ONLY)
         B     FREERPL
         TITLE '*********  N E T S O L  -  ERROR EXIT RTN'
***********************************************************************
*                                                                     *
*    THIS ROUTINE IS ENTERED IF AN ERROR IS DETECTED.                 *
*                                                                     *
*        INPUT REGS:                                                  *
*                                                                     *
*    REGISTER 0 CONTAINS A RTNCD CODE (4, 8, C, 10, 14, 18)           *
*                                                                     *
*    REGISTER 1 POINTS TO THE RPL OF THE REQUEST                      *
*                                                                     *
*           THE FDBK2 FIELD OF THIS RPL CONTAINS A REASON             *
*           CODE WHICH IS A SUBCODE OF THE RTNCD CODE IN              *
*           REGISTER 0.                                               *
*                                                                     *
*    REGISTER 2 - 12 UNMODIFIED BY VTAM                               *
*                                                                     *
*    REGISTER 13 POINTS TO THE SAVE AREA IN USE                       *
*                                                                     *
*    REGISTER 14 CONTAINS RETURN ADDRESS TO VTAM                      *
*                                                                     *
*    REGISTER 15 ERREXIT ROUTINE ADDRESS                              *
*                                                                     *
*                                                                     *
*                                                                     *
*    EXIT FROM ERREXIT IS AS FOLLOWS:                                 *
*                                                                     *
*           THRU ERRETURN TO VTAM, WHICH WILL RETURN TO THE           *
*           MAINLINE OR EXIT ROUTINE NSI.                             *
*                                                                     *
*           TO SNOCCUR, WHICH WILL ABNORMALLY TERMINATE               *
*           NETSOL.                                                   *
*                                                                     *
*           TO PROBDEV.                                               *
*                                                                     *
*                                                                     *
*        OUTPUT REGS:                                                 *
*                                                                     *
*    REGISTER  1-9  UNPREDICTABLE                                     *
*                                                                     *
*    REGISTER 10-12 NETSOL BASE REGISTERS                             *
*                                                                     *
*    REGISTER 13    SAVE AREA UPON ENTRY                              *
*                                                                     *
*    REGISTER 14    UNPREDICTABLE IF EXIT TO SNOCCUR OR               *
*                    RETURN.                                          *
*                   VALUE AT INPUT IF RETURN TO VTAM.                 *
*                                                                     *
*    REGISTER 15    THE INPUT RTNCD CODE IF ERREXIT WAS               *
*                   ENTERED FROM MAINLINE NETSOL.                     *
*                   AN ACTION CODE IF ENTERED FROM AN EXIT            *
*                    ROUTINE.                                         *
*                                                                     *
*    REGISTER  0    UNPREDICTABLE IF ENTERED FROM MAINLINE            *
*                    NETSOL.                                          *
*                   AN ACTION CODE MODIFIER IF ENTERED FROM AN        *
*                    EXIT ROUTINE.                                    *
*                                                                     *
*        NOTE: REGISTERS 0 AND 15 WILL BE RETURNED THRU VTAM          *
*              TO MAINLINE OR EXIT ROUTINE NSI.                       *
*    DESCRIPTION OF ACTION CODES AND FLAGS                            *
*                                                                     *
*                                                                     *
*        THE ERREXIT ROUTINE COMMUNICATES TO THE ERROR EXIT NSI       *
*        VIA AN ACTION CODE SET IN REG 15 AND, IN SOME CASES,         *
*        AN ACTION CODE MODIFIER SET IN REG 0. IN SOME SPECIAL        *
*        CASES, FLAGS ARE SET TO PASS INFORMATION TOO.                *
*                                                                     *
*        THE ACTION CODES AND MODIFIERS INDICATE APPROPRIATE          *
*        ACTIONS TO BE TAKEN BY THE EXIT ROUTINE. THE EXIT            *
*        ROUTINE MAY, HOWEVER, HANDLE THE ERROR ACTION                *
*        DIFFERENTLY FROM WHAT ERREXIT INDICATES BY ITS ACTION        *
*        CODE, IF IT SO CHOOSES.                                      *
*                                                                     *
*        ACTION CODES AND MODIFIERS ARE AS FOLLOWS:                   *
*                                                                     *
*            00 MACRO COMPLETED SUCCESSFULLY                          *
*               REG 0 MODIFIER=0                                      *
*                                                                     *
*            04 THIS IS A SNO (SHOULD NOT OCCUR) WHICH WILL NOT       *
*               BE SET BY THE ERROR EXIT. IF THIS IS SET AT           *
*               NSI, THE NETWORK SOLICITOR SHOULD ABNORMALLY          *
*               TERMINATE.                                            *
*                                                                     *
*TORELES     08 BRANCH TO RELEASE                                     *
*RELONLY        REG 0 MODIFIER=0 CLSDST                               *
*REL1ST                        4 CLSDST + OPNDST (AQUIRE)             *
*                                                                     *
*TOSEND     0C BRANCH TO SENDMSG                                      *
*               REG 0 MODIFIER=MESSAGE NUMBER                         *
*                                                                     *
*REISSU        10     REISSUE THE REQUEST                             *
*                                                                     *
*TOENDREQ    14 BRANCH TO FREERPL                                     *
*                                                                     *
*TORESEND    18 RESEND                                                *
*RSETSOL     1C SNOCCUR                                               *
*                                                                     *
*TOPROBDV    20 BRANCH TO PROBDEV                                     *
*                                                                     *
*    SINCE NETSOL DOES NOT ISSUE ALL API MACROS, NOT ALL              *
*    RTNCD CODES AND REASON CODES ARE POSSIBLE. THOSE                 *
*    FDBK3 CODES WHICH CAN OCCUR FOR THE MACROS ISSUED ARE            *
*    LISTED WITHIN THE SUBSECTIONS OF ERREXIT FOR EACH                *
*    RTNCD CODE. THIS LIST INCLUDES ANY WHICH MAY BE                  *
*    IMPOSSIBLE BECAUSE OF CURRENT NETSOL LOGIC.  THOSE WHICH         *
*    ARE POSSIBLE ARE INDICATED WITH AN '*'.  BASIC ONLY              *
*    CODES ARE NOT LISTED.                                            *
*                                                                     *
*                                                                     *
*    THE FLAGS SET ARE:                                               *
*                                                                     *
*          LOOPONCE - REISSUE I/O COMMAND ONE MORE TIME. IF           *
*                     THE REISSUED COMMAND IS SUCCESSFUL, THE         *
*                     FLAG MUST BE TURNED OFF BY THE MAINLINE         *
*                     OR EXIT ROUTINE. IF UNSUCCESSFUL,               *
*                     ERREXIT TURNS OFF THE FLAG ON ENTRY TO          *
*                     HANDLE THE FAILURE.                             *
*                                                                     *
*            RELOPND - RELEASE THE DEVICE THEN OPNDST(ACQUIRE)        *
*                      IT, THUS RE-ESTABLISHING A SESSION FOR         *
*                      THAT DEVICE.                                   *
*                                                                     *
*           SHUTDOWN - NETSOL SHUTDOWN IN PROGRESS. IF THIS           *
*                      BIT IS ON AT ENTRY TO AN EXIT ROUTINE          *
*                      OTHER THAN TPEND, NO PROCESSING IS DONE        *
*                      WITHIN THE ROUTINE. THIS WILL RAPIDLY          *
*                      FLUSH EXITS REQUESTS ALREADY SCHEDULED         *
*                      AT THE TIME A NEED FOR SHUTDOWN IS             *
*                      DETECTED.                                      *
*                      NOTE: THIS BIT IS ALSO SET BY THE TPEND        *
*                            EXIT, WHICH HAS BEEN SCHEDULED           *
*                            PRIOR TO ENTRY TO ERREXIT FOR A          *
*                            SHUTDOWN CONDITION.                      *
*                                                                     *
***********************************************************************
         SPACE 3
ERREXIT  DS    0H
         SPACE 2
***********************************************************************
*        NO NEED TO ESTABLISH ADDRESSABILITY, SINCE BASE REGISTERS    *
*        HAVE NOT BEEN MODIFIED.  NOTE THAT ALSO PTRRPL POINTS TO RPL *
*        USED IN EXIT ROUTINE, ALTHOUGH IT IS NOT NECESSARILY THE RPL *
*        IN USE WHEN ERREXIT WAS ENTERED, I. E. SYNCHRPL MAY          *
*        HAVE BEEN IN USE FOR INQUIRE (APPSTAT).                      *
***********************************************************************
         SPACE 1
         LR    R7,R0                   SAVE RTNCD CODE TO
*                                       USE AS RETURN CODE IF
*                                       ENTRY FROM MAINLINE.
         SPACE 1
         DROP  R5
         USING IFGRPL,R1               => R P L
         SPACE 1
         LR    R8,R1                   SAVE RPL ADRESS
         LR    R6,R14                  SAVE RETURN ADDRESS
         SPACE 2
***********************************************************************
*        FORMAT THE RPL ERROR FIELDS INTO A READABLE MESSAGE AND      *
*        WRITE THE MESSAGE TO THE OPERATOR. NOTE THAT SOME ERRORS     *
*        WILL NOT BE LOGGED TO THE SYSTEM LOG AS THEY ARE CONSIDERED  *
*        UNIMPORTANT. THE DATA IN ERMDATA IS AVAILABLE FOR            *
*        DEBUGGING PURPOSES.                                          *
***********************************************************************
         SPACE 1
***********************************************************************
*        BYPASS THOSE ERROR COMBINATIONS DEFINED IN 'ERMSGTAB'        *
***********************************************************************
         SPACE 1
         STM   R3,R5,RPLERRSA     SAVE WORK REGS DURING TABLE SCAN
         MVC   ERMDATA(1),RPLREQ  BUILD                  REQ
         MVC   ERMDATA+1(2),RPLFDBK   ERROR COMPARISON  /RTNCD/FDBK2
         MVC   ERMDATA+3(4),RPLSSEI     FIELD           /SSEI/SSMI/USER
         LM    R3,R5,ERMBXLE      LOAD BXLE REGS
         CR    R3,R5              NULL TABLE?
         BH    ERMSG              YES => DISPLAY ERROR MSG
         SPACE 1
ERMLOOP  MVC   ERMTEMP,ERMDATA    COPY COMPARISON FIELD TO WORKAREA
         NC    ERMTEMP,ERMAND(R3) ZERO IRRELEVANT FIELDS FOR COMPARE
         CLC   ERMTEMP,ERMCODE(R3) A NON-DISPLAY ERROR?
         BE    ERMBYPAS             YES => DON'T DISPLAY ERROR MSG
         BXLE  R3,R4,ERMLOOP        NO  => LOOK AT NEXT TABLE ENTRY
         SPACE 1
***********************************************************************
*        FORMAT AND DISPLAY ERROR MESSAGE                             *
***********************************************************************
         SPACE 1
ERMSG    UNPK  PACKWORK(3),RPLREQ(2)   UNPACK REQUEST CODE
         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY
         MVC   ERRORMSG+33(2),PACKWORK PUT IN THE MESSAGE
         UNPK  PACKWORK(3),RPLRTNCD(2) UNPACK RETURN CODE
         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY
         MVC   ERRORMSG+42(2),PACKWORK PUT IT IN THE MESSAGE
         UNPK  PACKWORK(3),RPLFDB2(2)  UNPACK FEEDBACK 2 CODE
         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY
         MVC   ERRORMSG+51(2),PACKWORK PLACE IN MESSAGE
         UNPK  PACKWORK(9),RPLSSEI(5)  UNPACK SYSTEM SENSE CODES
         TR    PACKWORK(8),TRTAB       PRETTY IT UP
         MVC   ERRORMSG+62(2),PACKWORK TO MESSAGE
         MVC   ERRORMSG+73(2),PACKWORK+2  RPLSSMI CODES TOO
         MVC   ERRORMSG+82(4),PACKWORK+4  RPLUSNSI CODES ALSO
         L     R3,RPLUSFLD             -> TTE FOR TERMINAL NAME
         MVC   ERRORMSG+92(8),TERMNAME TO ERROR MESSAGE AREA
ERMWTO   WTO   MF=(E,ERRORMSG)              WRITE ERROR MSG.
ERMBYPAS LR    R15,R7                  RESTORE R0 RETURN CODE
         LR    R1,R8                   RESTORE RPL ADDRESS
         LR    R14,R6                  RESTORE RETURN ADDRESS
         LM    R3,R5,RPLERRSA          RESTORE WORK REGS
         SPACE 2
***********************************************************************
*        CHECK IF ERREXIT HAS BEEN ENTERED FROM MAIN LINE OR          *
*        EXIT ROUTINE . IF ERROR IN MAIN LINE THEN RETURN VIA         *
*        REGISTER 14, AND UPON RETURN TO MAIN-LINE CODE               *
*        APPROPRIATE ACTION WILL BE TAKEN.                            *
***********************************************************************
         SPACE 1
         LR    R3,R14                  SAVE RETURN ADDR
         LA    R8,SETLRPL              IS REQUEST A
         CR    R1,R8                   SETLOGON?
         BER   R14                     YES.  IN MAINLINE
*                                       AND RETURN TO VTAM.
         CH    R15,HEX18           18  RPL ECB/EXIT PROBLEM?
*******> BNL   SNOCCUR                 YES. CANNOT VALIDLY
         BNL   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
*                                       OCCUR SINCE SHUTDOWN
*                                       SWITCH STOPS EXITS'
*                                       ACTION PRIOR TO THE
*                                       CLSDSTACB.
*                                      NOTE. CODES HIGHER
*                                       THAN 18 DO NOT EXIST
         SPACE 2
***********************************************************************
*        UPON ENTRY IF R1 IS NOT EQUAL TO R5 (R1 = A(SYNCHRPL) )      *
*        THEN R1'S AND R5'S INFORMATION MUST BE COMBINED.             *
*        THE COMMAND THAT CAUSED THE ERROR WAS                        *
*        ISSUED USING SYNCHRPL AND R5 IS POINTING TO AN               *
*        ASYNCH RPL.  FOR THIS RTN WE NEED SOME INFO IN BOTH.         *
***********************************************************************
         SPACE 1
         CR    R1,R5                   ARE WE USING ONE RPL
         BE    ERRPLOK                 YES, BRANCH
*              MOVE THE NECESSARY INFORMATION FROM THE R5 RPL TO
*              SYNCHRONOUS RPL (R1). THIS IS THE SWITCHES, SAVE AREAS
*              ETC. PRIOR TO THE WORK AREAS.
         MVC   SYNWORK(WORKRPLA),LNIFGRPL(R5)
         SPACE 2
***********************************************************************
*        GET THE FDBK2 FIELD FROM THE RPL.                            *
*        PREPARE TO BRANCH BASED ON 'RTNCD'.                          *
***********************************************************************
         SPACE 1
ERRPLOK  DS    0H
         SR    R6,R6                   CLEAR REG 6  .
         IC    R6,RPLFDB2              PICK UP REASON CODE
         LR    R7,R6                   START TO INITIALIZE R7
*                                       WHICH WILL BE USED AS
*                                       AN INDEX FOR BRANCH
*                                       TABLES
         SR    R0,R0                   SET UP DEFAULT ACTION CODE
          SPACE 2
***********************************************************************
* TRANSLATE RTNCD CODE AND FDBK2 CODE INTO ACTION CODE                *
*                                                                     *
*   RTNCD CODES HAVE A GENERAL MEANING AS FOLLOWS:                    *
*                                                                     *
*          04   EXTRAORDINARY COMPLETION                              *
*                 FUNCTION COMPLETED. ADDITIONAL INFORMATION          *
*                 AVAILABLE. PROBABLY HANDLED OUT OF LINE.            *
*                 CONDITION SHOULD BE HANDLED BEFORE MAKING           *
*                 FURTHER REQUESTS TO THE DEVICE.                     *
*                                                                     *
*          08   REISSUE                                               *
*                 TEMPORARY ENVIRONMENT CONDITION CAUSED              *
*                 REQUEST TO BE REJECTED.                             *
*                                                                     *
*          0C   DAMAGE                                                *
*                 INTEGRITY OF THE REQUEST OR DEVICE HAS BEEN         *
*                 DISTURBED.                                          *
*                                                                     *
*          10   ENVIRONMENT ERROR                                     *
*                 REQUEST INCOMPLETE DUE TO ENVIRONMENTAL             *
*                 CONDITION. ENVIRONMENT MUST BE ALTERED              *
*                 BEFORE RECOVERY CAN BE ATTEMPTED.                   *
*                                                                     *
*          14   USER LOGIC ERROR                                      *
*                 USER ERROR ON THE REQUEST. REQUEST REJECTED         *
*                 OR INCOMPLETE. NOT EXECUTABLE IN THE                *
*                 PRESENT FORM.                                       *
*                                                                     *
*          18   RPL NOT AN RPL   OR   RPL IS ALREADY ACTIVE.          *
***********************************************************************
         SPACE 1
         B     FEEDTAB(R15)            GO TO FEEDBACK CODE
*                                       HANDLING ROUTINE
FEEDTAB  BAL   R7,SNOCCUR           0  FEEDBACK OF 00 DOESN'T
*                                       ENTER LERAD OR SYNAD
         B     EXTRAORD             4  EXTRAORDINARY COM-
*                                       PLETION
         B     REISSUE              8  REISSUE
         B     DAMAGE               C  DAMAGE
         B     ENVIRON             10  ENVIRONMENT ERROR
         B     LOGIC               14  LOGIC ERROR
         EJECT
***********************************************************************
*                                                                     *
*  RTNCD CODE 04 - EXTRAORDINARY COMPLETION                           *
*                                                                     *
*   FDBK2 CODE   MACRO(S)         MEANING                             *
*                                                                     *
*    03        *  RECEIVE    /   "     "          "     MESSAGE       *
*    04        *  RECEIVE    / EXCP CONDITION INCOMMING RESPONSE      *
*                                                                     *
***********************************************************************
         SPACE 3
EXTRAORD DS    0H
         CH    R6,HEX3                 IS IS VALID FDBK2
         BE    VALFDBK2                YES SO HANDLE IT
         CH    R6,HEX4                 IS IT ONLY VALID REASON CODE
*******> BNE   SNOCCUR                 NO SO FORGET IT
         BNE   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 2
***********************************************************************
* BSC DEVICES UNDER VTAM2 RESPOND WITH ZERO SENSE IN SOME CASES
* TO RECORD MODE MACROS I.E.
* WHEN USER SENSE INCLUDED THE SSENSEI + SSENSMI FIELDS ARE 0
***********************************************************************
         SPACE 1
VALFDBK2 IC    R7,SENSE                SAVE SSENSEI FOR BRANCHING
         LTR   R7,R7                   DO WE HAVE ZERO STATUS?
         BZ    STAT3270                MUST BE STATUS FROM 3270
***********************************************************************
*        CONVERT SENSE CODE INTO BRANCH TABLE OFFSET                  *
***********************************************************************
         SRL   R7,3                    ASSUME X'04' IS INDEX = 0
         SR    R6,R6                   ZERO INDEX REG
CINDEX4  LTR   R7,R7                   INDEX DONE?
         BZ    BRTAB4                  YES => GO BRANCH
         SRL   R7,1                    NO  => SHIFT NEXT BIT OUT
         LA    R6,4(,R6)                      BUMP INDEX BY 4
         B     CINDEX4                        GET NEXT BIT
BRTAB4   CH    R6,HEX14                INDEX TOO BIG?
*******> BH    SNOCCUR YES => SNOCCUR
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         B     RSNTAB4(R6)             GO TO HANDLE SSENSMI
RSNTAB4  BAL   R7,SNOCCUR        <08 (00)  SHOULD NOT OCCUR
         B     REQREJ             08 (04)  REQUEST REJECT
         B     REQERR             10 (08)  REQUEST ERROR
         B     STATERR            20 (0C)  STATE ERROR
         B     RHERROR            40 (10)  RH ERROR
         B     PATHERR            80 (14)  PATH ERROR
         SPACE 2
***********************************************************************
*                                                                     *
*        08 - REQUEST REJECT                                          *
*                                                                     *
*     SSENSEI/SSENSMI                                                 *
*       08      00                  REISSUE SEND (IN BRACKET)         *
*       08      01                  RELEASE LU                        *
*       08      02                  IGNORE (CONTINUE)                 *
*       08      13                  REISSUE SEND (IN BRACKET)         *
*       08      1B                  IGNORE (WAIT FOR LU TO ENTER DATA)*
*       08      1C                  IGNORE                  DC18203   *
*       08      2B                  REISSUE SEND                      *
*       08      2D                  IGNORE (CONTINUE)                 *
*       08      31                     "       "                      *
*                                                                     *
***********************************************************************
         SPACE 1
REQREJ   IC    R7,SENSE+1              GET SSENSMI
         CH    R7,HEX2                 IS IT POSSIBLE
         BH    TRYHIGH                 >2 TRY FOR HIGH RANGE
         LR    R6,R7
         AR    R7,R7                   PEPARE FOR BRANCH
         AR    R7,R6                   TABLE INDEXING
         SLL   R7,2
         B     RSNTAB5(R7)             HANDLE SSENSMI
         SPACE 1
RSNTAB5  LA    R15,TORESEND         0  REISSUE SEND WITH OUT BB
         B     ERRETURN
         NOP   0
         LA    R15,TORELES          1  RELEASE
         LA    R0,RELONLY              NO OPNDST
         B     ERRETURN
         LA    R15,TOENDREQ         2  CONTINUE REQUEST (IGNORE)
         B     ERRETURN
         NOP   0
         SPACE 1
TRYHIGH  CH    R7,HEX13            13  REISSUE SEND
         BNE   CHK1BX
         LA    R15,TORESEND            WITH IN BRACKET CONDITION
         B     ERRETURN
         SPACE 1
CHK1BX   CH    R7,HEX1B                KEY PRESSED ON TERMINAL ?
         BNE   CHK1CX                                         DC18203
         LA    R15,TOENDREQ        1B  WE SHOULD IGNORE
         B     ERRETURN
         SPACE 1
CHK1CX   EQU   *                                               DC18203
         CH    R7,HEX1C                                        DC18203
         BNE   CHK2BX                                          DC18203
         LA    R15,TOENDREQ        IC WE SHOULD IGNORE IT      DC18203
         B     ERRETURN                                        DC18203
         SPACE 1                                               DC18203
CHK2BX   CH    R7,HEX2B
         BNE   CHK2DX
         LA    R15,TORESEND        2B  WE SHOULD TRY AGAIN
         B     ERRETURN
         SPACE 1
CHK2DX   CH    R7,HEX2D
         BNE   CHK31X                                           DC18203
         LA    R15,TOENDREQ        2D  WE SHOULD IGNORE
         B     ERRETURN
CHK31X   CH    R7,HEX31            31  DEVICE POWERED OFF       DC18203
*******> BNE   SNOCCUR                                          DC18203
*        BNE   *+8           JUMP TO THE BAL
*        B     *+8           JUMP OVER THE BAL
*        BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         BNE   SENSERR             INVALID SENSE - RELEASE NODE
         LA    R15,TOENDREQ            SO IGNORE                DC18203
         B     ERRETURN                                         DC18203
         SPACE 2
***********************************************************************
*                                                                     *
*        10 - REQUEST ERROR                                           *
*                                                                     *
*     SSENSEI/SSENSMI                                                 *
*       10      03                  RELEASE TERMINAL                  *
*       10      05                  8775 MOD1 INVALID SBA             *
*       10      XX                  SHOULD NOT OCCUR - RELEASE NODE   *
*                                                                     *
***********************************************************************
         SPACE 1
REQERR   CLI   SENSE+1,X'03'           FUNCTION NOT SUPPORTED?
         BE    SENSEI03
         CLI   SENSE+1,X'05'           INVALID SBA ? (PROB 8775 IN MOD1
*******> BNE   SNOCCUR                 NO - SNOCCUR
*        BNE   *+8                          JUMP TO THE BAL
*        B     *+8                          JUMP OVER THE BAL
*        BAL   R7,SNOCCUR                   TELL WHERE WE CAME FROM
         BNE   SENSERR                 NO - RELEASE NODE
         LA    R0,MSG13                SET MESSAGE NUMBER
         LA    R15,TOSEND              INDICATE WE WILL SEND A MSG
         B     ERRETURN
         SPACE 1
SENSEI03 STM   R1,R3,RPLERRSA          SAVE REG 1-3
         L     R3,RPLUSFLD             LOAD A(TTE)
         MVC   MSG1003+17(8),TERMNAME  MOVE NODE NAME TO MSG
         LR    R3,R1                   SAVE REG 1 RPLERRSA BASE REG LRE
         WTO   MF=(E,MSG1003)          WTO ERROR MSG
         SPACE 1
         LR    R1,R3                   RSTR REG 1 RPLERRSA BASE REG LRE
         LM    R1,R3,RPLERRSA          RESTORE REG 1-3
SENSERR  EQU   *
         LA    R15,TORELES         03  FUNCTION NOT SUPPORTED
         LA    R0,RELONLY              RELEASE TERMINAL
         B     ERRETURN
         SPACE 1
STATERR  LA    R15,TORELES         20  STATE ERROR
         LA    R0,REL1ST               RELEASE AND REOPEN
         B     ERRETURN
         SPACE 1
RHERROR  B     SENSERR             RELEASE NODE
         SPACE 2
***********************************************************************
*                                                                     *
*          80 - PATH ERRORS                                           *
*                                                                     *
*           SSENSEI/SSENSMI                                           *
*             80      05           NO SESSION CONDITION               *
*                                                                     *
***********************************************************************
         SPACE 1
PATHERR  IC    R7,SENSE+1              GET   SSENSMI
         CH    R7,HEX5                 IS IT ONE WE CAN HANDLE
         BE    NOSESS                  YES SO HANDLE IT
         LA    R15,TOENDREQ            OTHERWISE END THIS REQUEST
         B     ERRETURN
         SPACE 1
NOSESS   DS    0H                      THIS IS A NO SESSION COND.
*                                       A SESSION FOR SOME REASON HAS
*                                       NOT BEEN ESTABLISHED BETWEEN
*                                       THE SENDER AND RECEIVER
         LA    R15,TORELES              SO LETS CLOSE TO CLEAR
         LA    R0,REL1ST                AND REOPEN
         B     ERRETURN
         SPACE 1
STAT3270 DS    0H                      HANDLE 2 BYT OF USER SENSE CODES
*                                       RETURNED FROM 3270
         LA    R15,TORELES             ASSUME DEVICE UNUSABLE
         CLC   USENSE,SNAS0200         WAS SDLC STATUS RETURNED FOR DE
*                                       WHICH SHOWS POWER ON
         BE    INTRREQ1                YES CHECK MORE
         CLC   USENSE,SNAS0010         NO CHECK IF INTV. REQ. (DEVICE
*                                       POWERED OFF )
         BNE   ERRETURN                RELEASE DEVICE
         LA    R15,TOENDREQ            WE SHOULD IGNORE REQUEST AND
*                                      WAIT FOR TERM TO BE POWERED UP
         B     ERRETURN                BEFORE WE SEND SCREEN
         SPACE 1
INTRREQ1 DS    0H                      DEVICE IS NOW AVAILABLE. JUST
         LA    R15,TOENDREQ            IGNORE BECAUSE LOSTERM WILL GET
         B     ERRETURN                SCHEDULLED .
         EJECT
***********************************************************************
*                                                                     *
*  RTNCD CODE 08 - REISSUE                                            *
*                                                                     *
*   FDBK2 CODE   MACRO(S)         MEANING                             *
*                                                                     *
*      00      * ALL API MACROS   TEMPORARY STORAGE                   *
*                (NOT CHECK,       ALLOCATION FAILURE                 *
*                 OPEN, OR CLOSE)                                     *
*                                                                     *
***********************************************************************
         SPACE 3
REISSUE  DS    0H
         LTR   R6,R6                   ONLY VALID REASON CODE
*                                       IS 0
*******> BNZ   SNOCCUR             >0  ERROR IF NOT
         BNZ   *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         LA    R15,REISSU           0  ACTION IS TO REISSUE
*                                      REG 0 IS ALREADY SET FOR
*                                       REISSUE ONLY
         B     ERRETURN                RETURN TO EXIT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*  FEEDBACK CODE 0C - DAMAGE                                          *
*                                                                     *
*   REASON CODE   MACROS         MEANING          ACTION              *
*    00              *           BASIC ONLY          *                *
*    01          RECEIVE      LU NOT AVAILABLE     RELEASE 08         *
*                 SEND         "    "   "            "     08         *
*    02          REC/SEND     REQUEST CANCELLED    FREERPL 14 00      *
*                             BY TEST REQUEST                         *
*    03              *         BASIC ONLY             *               *
*    04              *         BASIC ONLY             *               *
*    05              *         BASIC ONLY             *               *
*    06              *         BASIC ONLY             *               *
*    07          REC/SEND     CONNECTION RECOVERY  FREERPL 14 00      *
*                               IN PROGRESS                           *
*    08          REC/SEND     LU RESTARTED         FREERPL 14 00      *
*    09          OPNDST       NODE DEACTIVATED     FREERPL 14 00      *
*    0A          RECEIVE      SNOCCUR                SNOCCUR          *
*    0B         RE/SEND/CLSDST REQUEST CANCELLED   FREERPL 14 00      *
*                                BY CLSDST                            *
*    0C          REC/ SEND     REQUEST CANCELLED   RELEASE 14 04      *
*                                BY CLEAR                             *
*    0D          SEND          REQ CANCEL BY EXCP.  SNOCCUR           *
*                                                                     *
***********************************************************************
         SPACE 3
DAMAGE   DS    0H
         CH    R6,HEXD                 IS REASON CODE WITHIN
*                                       LIMITS OF POSSIBILITY?
*******> BH    SNOCCUR             >D  YES, ERROR
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         AR    R7,R7                   MULTIPLY REASON CODE BY
         AR    R7,R6                   12 FOR BRANCH TABLE
         SLL   R7,2                    INDEXING
         B     RSNTABC(R7)             GO TO REASON CODE
*                                       HANDLING ROUTINE
RSNTABC  BAL   R7,SNOCCUR          0   BASIC MODE ONLY
         NOP   0
         NOP   0
         LA    R15,TORELES         1   LU NOT AVAILABLE
         LA    R0,RELONLY              DO NOT REOPEN
         B     ERRETURN
         LA    R15,TOENDREQ        2   REQUEST CANCELLED BY TEST REQ.
         B     ERRETURN
         NOP   0
         BAL   R7,SNOCCUR          3   BASIC ONLY
         NOP   0
         NOP   0
         BAL   R7,SNOCCUR          4   BASIC ONLY
         NOP   0
         NOP   0
         BAL   R7,SNOCCUR          5   BASIC ONLY
         NOP   0
         NOP   0
         BAL   R7,SNOCCUR          6   BASIC ONLY
         NOP   0
         NOP   0
         LA    R15,TOENDREQ        7   CONNECTION RECOVERY
         B     ERRETURN                 IN PROGRESS
         NOP   0
         LA    R15,TOENDREQ        8   LU  RESTARTED
         B     ERRETURN
         NOP   0
         LA    R15,TOENDREQ        9   NODE DEACTIVATED
         B     ERRETURN
         NOP   0
         BAL   R7,SNOCCUR          A   SNOCCUR
         NOP   0
         NOP   0
         LA    R15,TOENDREQ        B   REQUEST CANCELLED BY CLSDST
         B     ERRETURN
         NOP   0
         LA    R15,TORELES         C   RELEASE WITH OPNDST
         LA    R0,REL1ST
         B     ERRETURN
         BAL   R7,SNOCCUR          D   SNOCCUT
         NOP   0
         NOP   0
         EJECT
***********************************************************************
*                                                                     *
*  RTNCD CODE 10 - ENVIRONMENT                                        *
*                                                                     *
*   FDBK2 CODE   MACRO(S)      MEANING                  ACTION        *
*                                                                     *
*     00        OPNDST/CLSDST  TERM,LU,APPL NOT ACTIVE  CLSDST  0C 08 *
*                                              (OPNDST) FREERPL 14 00 *
*     01        OPNDST         OPNDST FAILED           FREERPL  14 00 *
*                                                                     *
*     02        CLSDST (PASS)  TARGET APPL. UNACCEPTABLE MSG.   0C 09 *
*                                                                     *
*     03        OPNDST/SEND/REC  HALT QUICK                   SNOCCUR *
*                                                                     *
*     05         "      "     "   CHANNEL/LINK FAILURE RELEASE  08 00 *
*                                                                     *
*     06        OPNDST          ANS                    RELEASE  08 00 *
*                                                                     *
*     07        SEND/REC        CANCELLED BY VARY      RELEASE  08 00 *
*                                                                     *
*     09         "    "         TERMINATE SELF/LOGOFF  FREERPL  14 00 *
*                                                                     *
*     0A        ALL MACROS      ACF/VTAM ERROR         RELEASE  08 00 *
*                                                                     *
*     0D        ALL MACROS      ACF/VTAM INACTIVE TO ACB       SNOCCUR*
*                                                                     *
*     0E        ALL MACROS      TCB ABENDED            FREERPL  14 00 *
*                                                                     *
*     0F        SEND/REC        BUFFERS FILLED         FREERPL  14 00 *
*                                                                     *
*     10         "   "          TERMINATE SELF COMMAND RELEASE  08 04 *
*                                                                     *
*     11        OPNDST          SDT FAILED             FREERPL  14 00 *
*                                                                     *
***********************************************************************
         SPACE 3
ENVIRON  DS    0H
         CH    R6,HEX11                IS RSN COD11VALID SIZE?
*******> BH    SNOCCUR             >11 NO. ERROR
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         SPACE 2
***********************************************************************
*   HANDLE FIRST THREE REASON CODES WITHOUT BRANCH TABLE.             *
***********************************************************************
         SPACE 1
         LTR   R6,R6                   CHECK FOR TERMINAL OR
*                                       APPLICATION NOT
*                                       AVAILABLE.
         BNZ   CHKQUIES            ^0  IF NOT, NEXT CHECK
*
         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?
         BO    TERMUNAV
         LA    R15,TOSEND              NO. APPLICATION UNAVAIL-
         LA    R0,MSG08                ABLE WRITE ERROR MSG
         B     ERRETURN
TERMUNAV DS    0H
         LA    R15,TOENDREQ            TERMINAL UNAVAILABLE FOR
         B     ERRETURN                 OPNDST(SPEC) AFTER
*                                       CLSDST(PASS) BECAUSE
*                                       CLSDST(PASS) FAILED
*                                       AND THE NETWORK OPER-
*                                       ATOR VARRIED OFF THE
*                                       TERMINAL.
CHKQUIES DS    0H
         LA    R15,TORELES             PREPARE ACTION CODE
         SLL   R7,2                     AND BRANCH TABLE INDEX
*                                       IN CASE REASON CODE
*                                       GREATER THAN 2
         CH    R6,HEX2                 CHECK FOR 1 OR 2
*
         BL    TERMUNAV             1  OPNDST FAILED FREERPL
*
         BH    RSNTAB10(R7)        >2  GO TO REASON CODE
*                                       HANDLING ROUTINE
*
         LA    R15,TOSEND           2  APPLICATION IS QUIESCING
         LA    R0,MSG09                 OR NEVER ACCEPTS LOGONS
*                                       BUT QUIESCE IS MORE
*                                       LIKELY SINCE 'NEVER
*                                       ACCEPTS WOULD PROBABLY
*                                       HAVE BEEN FOUND ON THE
*                                       INQUIRE.  EITHER CAN
*                                       HAPPEN IF THE OTHER
*                                       APPLICATION CHANGES ITS
*                                       STATUS AFTER NETSOL'S
*                                       INQUIRE(APPSTAT) BUT
*                                       PRIOR TO THE LATER
*                                       CLSDST(PASS).
         B     ERRETURN                WRITE ERROR MESSAGE
RSNTAB10 EQU   *-(3*4)                 START TABLE AT R6=3
*
         B     QUIKHALT             3  VTAM IS HALTING.
*                                      NETSOL CAN NO LONGER
*                                       COMMUNICATE WITH
*                                       DEVICES. TPEND NOTIFIED
*
         BAL   R7,SNOCCUR           4  BASIC MODE ONLY
         B     ERRETURN             5  PERMANENT PATH FAILURE
*                                      ACTION CODE ALREADY SET
*                                       UP TO RELEASE DEVICE
*
         B     ERRETURN             6  AUTO NETWORK SHUTDOWN
*                                      ACTION CODE ALREADY SET
*                                       UP TO RELEASE DEVICE
*
         B     ERRETURN             7  VARY DEACT. IMMEDIATE
*                                       LOSTERM WAS SCHEDULED
*                                      ACTION CODE ALREADY SET
*                                       UP TO RELEASE DEVICE
*
         BAL   R7,SNOCCUR           8  DIAL BASIC MODE ONLY
         B     IGNORERR             9  TERMINATE SELF OR LOGOFF
*
         B     VTAMERR              A  VTAM ERROR FOR DEVICE
*
         BAL   R7,SNOCCUR           B  DIAL-OUT ONLY
*
         BAL   R7,SNOCCUR           C  DIAL IN BASIC MODE ONLY
         BAL   R7,SNOCCUR           D  VTAM INACTIVE TO YOUR
*                                      ACB.  SHOULD NOT OCCUR
*
         B     IGNORERR             E  TCB ABENDED
         B     IGNORERR             F  BUFFERS FILLED
         B     ERR1010             10  TERMINATE SELF
         B     IGNORERR            11  SDT FAILED
*
QUIKHALT DS    0H
         LA    R15,TOENDREQ            INDICATE RETURN TO VTAM
         OI    UFLAGS,SHUTDOWN         TURN ON SHUTDOWN
         B     ERRETURN
*
VTAMERR  DS    0H                      ON 100A RTNCD  JUST
         LA    R15,TOPROBDV             RELEASE THE TERMINAL.
         B     ERRETURN
         SPACE 1
IGNORERR DS    0H
         LA    R15,TOENDREQ            END REQUEST
         B     ERRETURN
         SPACE 1
ERR1010  DS    0H
         LA    R15,TORELES
         LA    R0,REL1ST
         B     ERRETURN
         EJECT
***********************************************************************
*                                                                     *
*  RTNCD CODE 14 - LOGIC
*                                                                     *
*   FDBK2 CODE      MACRO(S)     MEANING                    ACTION    *
*                                                                     *
*       00        REC/SEND    NON-VTAM REQUEST CDE         SNOCCUR    *
*                                                                     *
*       02         "    "     EXIT ADDRESS ZERO            SNOCCUR    *
*                                                                     *
*       03         "    "     ECB ADDRESS ZERO             SNOCCUR    *
*                                                                     *
*       04         CHECK      RPL IS NOT ACTIVE            SNOCCUR    *
*                                                                     *
*       10         REC/SEND   INVALID ACB                  SNOCCUR    *
*                                                                     *
*       11          "    "                                            *
*                                                                     *
*       12          "    "    CLSDST IN PROGRESS (FREERPL)  14 00     *
*                                                                     *
*       13      REC/SEND/INT  RPL ARG + NIB CID INVALID     14 00     *
*                                                                     *
*       1E      REC/SEND      INVALID DATA ARE OR LENGTH   SNOCCUR    *
*                                                                     *
*       23        "   "       INVALID MACRO REQUEST TYPE   SNOCCUR    *
*                                                                     *
*         3C    SEND (POST=SCHED)   TRIED TO ISSUE 2ND SEND14 00DC18203
*       3B-47     "   "                                    SNOCCUR    *
*                                                                     *
*       4A                                                 SNOCCUR    *
*                                                                     *
*       4B          "         INVALID LOGON         (MSG)   0C 07     *
*                                                                     *
*       4C       INQUIRE(APPLSTAT) NO APPL NAME     (MSG)   0C 07     *
*                INQUIRE(SESSPARM) NO QUEUED CINIT(FREERPL) 14 00     *
*                CLSDST(PASS)      NO CDRSC FOR TERM(MSG)   0C 03     *
*                                                                     *
*       4D                                                 SNOCCUR    *
*                                                                     *
*       4E-51                                              SNOCCUR    *
*                                                                     *
*       52      INVALID NIB                                SNOCCUR    *
*                                                                     *
*       53      INQUIRE       INVALID SYM. NAME     (MSG)   0C 06     *
*               OPNDST(SPEC)  INVALID SYM. NAME   (FREERPL) 14 00     *
*                                                                     *
*       54      OPNDST        DEST. UNOPENABLE    (FREERPL) 14 00     *
*                                                                     *
*       55      OPNDST(AQUIRE) APPL NOT AUTHORIZED         SNOCCUR    *
*               CLSDST(PASS)   ????????????????????   (MSG) 0C 05     *
*                                                                     *
*       56-5C                                              SNOCCUR    *
*                                                                     *
*       5D      CLSDST        DEST, NOT OPENED    (FREERPL) 14 00     *
*                                                                     *
*       5E                                                            *
*                                                                     *
*       5F      CLSDST        RESOURCE NOT OWNED  (FREERPL) 14 00     *
*                                                                     *
*       60      CLSDST           "      "  CLOSABL   "     14 00      *
*                                                                     *
*        62     REC/SEND                                   SNOCCUR    *
*                                                                     *
***********************************************************************
         SPACE 3
LOGIC    DS    0H
         CH    R6,HEX60                 IS REASON CODE WITHIN
*                                       LIMITS OF POSSIBILITY?
*                                       X'60' IS HIGHEST VALID
*                                       VALUE TO BE EXPECTED.
*******> BH    SNOCCUR            >60  NO. ERROR
         BH    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         CH    R6,HEX4A                IF REASON CODE AT LEAST
         BNL   CHK56X            >=4A   X'4A', DO SEPARATELY
         LA    R15,TOENDREQ            PREPARE ACTION FOR
*                                       REASON CODES OF 12 & 13
         CH    R6,HEX12                CLSDST IN PROGRESS?
         BE    ERRETURN            12  YES, ACTION CODE
*                                        ALREADY SET
         CH    R6,HEX13                IS REASON CODE 13?
         BE    ERRETURN            13  CID INVALID    *GJL-MADE COMMENT
*                                                      LRE DEL COMMENT
         BE    *+8                 *GJL-GO TO DUMP
         B     *+8                 *GJL-OK, GO AROUND
         BAL   R7,SNOCCUR          *GJL-DUMP
*                                      PROBABLY ALREADY
*                                       RELEASED THE TERMINAL.
*                                       IGNORE.
         CH    R6,HEX3C             3C  TRY TO ISSUE 2ND SEND   DC18203
         BE    ERRETURN                 YES SO IGNORE           DC18203
         BAL   R7,SNOCCUR        16
CHK56X   DS    0H
         CH    R6,HEX56                IF REASON CODE MORE THAN
         BH    CHK5DX             >56   X'56', DO SEPARATELY
         LA    R15,TOSEND              PREPARE DEFAULT ACTION
         SLL   R7,3                     AND BRANCH TABLE INDEX
         B     RSNTAB14(R7)            GO TO REASON CODE
*                                       HANDLING ROUTINE
RSNTAB14 EQU   *-(8*(X'4A'))           START TABLE W/ R6=X'4A'
*
         BAL   R7,SNOCCUR          4A
         NOP   0
*
         LA    R0,MSG07            4B  UNKNOWN LOGOMODE TABLE ENTRY
         B     ER144B                  OR UNIDENTIFIED APPLICATION
*
         LA    R0,MSG07            4C  INQUIRE(APPSTAT)..NO SYMBOLIC
         B     TSTINQA                  NAME FOR APPLICATION
*                                     OR INQUIRE(SESSPARM)..NO QUEUED
*                                       CINIT
*                                      ASSUME INQUIRE(APPSTAT)
*                                       THEN CHECK FOR IT
*
         BAL   R7,SNOCCUR          4D
         NOP   0
*
         BAL   R7,SNOCCUR          4E
         NOP   0
*
         BAL   R7,SNOCCUR          4F
         NOP   0
*
         BAL   R7,SNOCCUR          50
         NOP   0
*
         BAL   R7,SNOCCUR          51  APPLICATION NEVER
         NOP   0                        ACCEPTS LOGONS
*                                      MEANS NETSOL NEVER
*                                       ACCEPTS LOGON.
*
         BAL   R7,SNOCCUR          52
         NOP   0
*
         LA    R0,MSG07            53  SYMBOLIC (APPL OR TERM)
         B     TSTINQA                  NAME NOT KNOWN
*                                      ASSUME INQUIRE(APPSTAT)
*                                       THEN CHECK FOR IT
*
         LA    R15,TOENDREQ                   54
         B     ERRETURN
*
         LA    R0,MSG05            55  APPLICATION NOT AUTHORIZED
         B     OPNDSPC                  FOR OPNDST(ACQUIRE)
*                                      OR
*                                      CLSDST FAILURE.
*
         BAL   R7,SNOCCUR          56  CONFLICT BETWEEN MODE
         NOP   0                        AND DEVICE TYPE.
*                                      TRIED TO OPNDST FOR
*                                       A RECORD DEVICE.
*                                       NETSOL ONLY SUPPORTS
*                                       BASIC DEVICES.
*                                      CAN NOT OCCUR IN NETSOL
CHK5DX   DS    0H
         CH    R6,HEX5D                CLSDST INVALID (TERMINAL
*                                       NOT CONNECTED)
         BNE   CHK5FX             ^5D  NOT X'5D', CHECK FURTHER
         LA    R15,TOENDREQ        5D  ACTION, RELEASE RPL AND
         B     ERRETURN                 RETURN TO VTAM
CHK5FX   DS    0H
         CH    R6,HEX5F                LESS THAN X'5F' NOT
*******> BL    SNOCCUR            <5F   VALID
         BL    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
*
         LA    R15,TOENDREQ     5F 60  REASON CODES OF 5F
         B     ERRETURN                 AND 60 ARE POSSIBLE IF
*                                       A RELREQ OR READEND
*                                       EXIT IS PROCESSED
*                                       AFTER THE DEVICE WAS
*                                       PASSED TO ANOTHER
*                                       APPLICATION.  THIS CAN
*                                       HAPPEN BECAUSE THE
*                                       CLSDST(PASS) WILL NOT
*                                       PURGE AN ALREADY
*                                       SCHEDULED EXIT.
TSTINQA  DS    0H
         TM    MFLAGS,INQAPPST         INQUIRE(APPSTAT) MEANS THE
         BO    ERRETURN                 APPLICATION WAS UNKNOWN TO
*                                       VTAM.
*                                       => PUT OUT ERROR MESSAGE
         LA    R0,MSG03                ASSUME CLSDST(PASS)
         TM    MFLAGS,CLSDST           CLSDST FAILURE MEANS THERE
         BO    ERRETURN                 IS NO CDRSC FOR THE TERMINAL
*                                       IN A CROSS-DOMAIN SESSION.
*                                       => PUT OUT ERROR MESSAGE
         LA    R15,TOENDREQ            ASSUME INQUIRE(SESSPARM)
*                                       FAILURE IMPLIES THAT THERE
         TM    MFLAGS2,INQSESS          IS NO QUEUED CINIT FOR LOGON
         BO    ERRETURN                 PROCESSING FOR THE TERMINAL.
*                                       => END THE REQUEST
         LA    R15,TOENDREQ            ASSUME OPNDST(SPEC)
         TM    MFLAGS,OPNDSPEC         OPNDST FAILURE MEANS THE
         BO    ERRETURN                 NODE IS UNKNOWN TO VTAM.
*                                       POSSIBLY DUE TO MAJOR NODE
*                                       BEING DEACTIVATED.
*                                       => END THE REQUEST
         BAL   R7,SNOCCUR              ANY OTHER CAUSE OF
*                                       ERROR IS IMPOSSIBLE
ER144B   DS    0H
         TM    MFLAGS,CLSDST           ERROR ON CLSDST(PASS)
         BZ    ERRETURN                NO => WRITE UNKNOWN APPL'N
         LA    R0,MSG01                YES. WRITE THE MESSAGE
*                                       'XXXXXXXX UNKNOWN LOGOMODE'
         B     ERRETURN
OPNDSPC  DS    0H
         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?
*******> BO    SNOCCUR
         BO    *+8           JUMP TO THE BAL
         B     *+8           JUMP OVER THE BAL
         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM
         TM    MFLAGS,CLSDST           WAS THIS A CLOSE
         BO    ERRETURN                 CLDST(PASS).  OR
*                                       APPLICATION CAN'T BE
*                                       CONNECTED AS REQUESTED
*                                       IN RELREQ OR READEND.
*                                       ISSUE ALREADY PREPARED
*                                       ERROR MESSAGE.
         BAL   R7,SNOCCUR              NO, ANY OTHER CAUSE
*                                       IS IMPOSSIBLE
         TITLE '*********  N E T S O L  -  SCAN FOR LOGON SUBROUTINE'
ERRETURN DS    0H
         STC   R15,ACTIONS             SAVE ACTION CODES FOR
         STC   R0,ACTIONS+1             DEBUGGING
         CR    R1,R5                   DO WE HAVE BOTH A SYNCH
*                                      RPL AND A ASYNCH RPL
         BE    ERROUT                  NO, SKIP THE MOVE OF THE
*                                      RPL WORKAREA
         MVC   LNIFGRPL(WORKRPLA,R5),SYNWORK RESTORE WORKAREA
         SPACE 1
         DROP  R1
         USING IFGRPL,R5
         SPACE 1
ERROUT   DS    0H
         LR    R14,R3                  RESTORE ADDR AND RETURN
         BR    R14                      VTAM WHICH WILL RETURN
*                                       TO THE NSI AFTER THE
*                                       COMMAND WHICH CAUSED
*                                       ERREXIT TO BE ENTERED.
         TITLE '*********  N E T S O L  -  EQUATES AND CONSTANTS'
R0       EQU   0                       MACRO WORK REGISTER, AND
*                                      CONTAINS REASON CODE UPON
*                                      ABNORMAL TERMINATION
R1       EQU   1                       PARAMETER REGISTER,
*                                      CORRUPTED BY API MACROS
R2       EQU   2                       WORK REGISTER
R3       EQU   3                       WORK REGISTER
R4       EQU   4                       WORK REGISTER
R5       EQU   5                       POINTER TO CURRENT RPL, IT
*                                      IS NOT USED FOR ANY OTHER
*                                      PURPOSE
PTRRPL   EQU   R5                      AS ABOVE
R6       EQU   6                       WORK REGISTER
R7       EQU   7                       WORK REG
R8       EQU   8                       NIB POINTER
PTRNIB   EQU   8                        EXCEPT IN STD LOGON.
R9       EQU   9                       WORK REG
R10      EQU   10                      THIRD BASE REGISTER
R11      EQU   11                      SECOND BASE REGISTER
R12      EQU   12                      FIRST BASE REGISTER
R13      EQU   13                      SAVE AREA POINTER
R14      EQU   14                      RETURN REGISTER
R15      EQU   15                      RETURN CODE AND EXIT ENTRY PTR
         SPACE 2
***********************************************************************
*        FLAGS INDEPENDENT OF A SPECIFIC REQUEST                      *
***********************************************************************
         SPACE 1
UFLAGS   DC    X'00'                   MAIN NETSOL FLAGS
SHUTDOWN EQU   X'80'                   SHUTDOWN IN PROGRESS
INIT     EQU   X'40'                   INITIALIZATION IN PROGRESS
INITERR  EQU   X'20'                   ERROR DURING INITIALIZATION
         SPACE 1
DUMPFLAG DC    X'00'                   REASON CODE FOR DUMPING
OPENCODE EQU   1                       OPEN ACB FAILURE
SETLCODE EQU   2                       SETLOGON FAILURE
CBLKCODE EQU   4                       CONTROL BLOCK FAILURE
TABLTRBL EQU   8                       TROUBLE WITH THE TTE'S
         SPACE 1
TRTAB1   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' HEX->CHAR TR TABLE
TRTAB    EQU   TRTAB1-X'F0'            USE ONLY LAST 16 OF TRTAB
         SPACE 1
         DS    0D
PACKWORK DS    XL16                    UNPACK WORK AREA
         SPACE 1
SYSTEMID DC    X'00'                   SYSTEM ID FOR SOME APPLIDS
         SPACE 1
         DC    C'SAVED REGISTERS FOR USER ABENDS HERE'
SNOREGS  DC    16F'0'                  REGS FOR SNO CONDITIONS
         SPACE 1
RETVTAM@ DS    F                       SAVE AREA FOR EXIT RETURN ADDR
         SPACE 1
GENSAVE  DS    18F                     SAVE AREA FOR SOME EXIT RTNS
         SPACE 1
SUBSAV14 DC    F'0'                    SAVE AREA FOR REG 14
*                                       USED BY SUBROUTINES
FINISECB DC    F'0'                    ECB THAT MAIN-LINE CODE WAITS
*                                      ON, IT IS POST'ED BY TPEND EXIT
         EJECT
*              MISCELLANEOUS CONSTANTS AND MASKS.
SBA      EQU   X'11'                   3270 SET BUFFER @ FIELD
CLEARKEY EQU   X'6D'                   3270 CLEAR KEY
ENTERKEY EQU   X'7D'                   3270 ENTER KEY
HEX50    EQU   X'50'                   3270 BUFFER ADDRESS
HEXD3    EQU   X'D3'                     "    "       "
HEXD5    EQU   X'D5'                     "     "       "
CR       EQU   X'0D'                   3767 CARRIAGE RETURN
FF       EQU   X'FF'                   USED TO TURN OFF SWITCHES
         SPACE 1
*              EQUATES FOR ACTION CODES AND MODIFIERS
TORELES  EQU   8                       BRANCH TO RELEASE
TOSEND   EQU   X'0C'                   BRANCH TO WRITE
REISSU   EQU   X'10'                   REISSUE COMMAND
RELONLY  EQU   0                       RELEASE ONLY DONT REAQUIRE
REL1ST   EQU   4                       RELEASE AND ACQUIRE
TOENDREQ EQU   X'14'                   BRANCH TO FREERPL
TORESEND EQU   X'18'                   TAKE ACTION ACCORDING TO RTN
TOPROBDV EQU   X'20'                   BRANCH TO PROBDEV
         EJECT
*              HEX VALUES FOR FEEDBACK AND RETURN CODE COMPARES
         SPACE 1
         DS    0H
HEX2     DC    XL2'2'
HEX3     DC    XL2'3'
HEX4     DC    XL2'4'
HEX5     DC    XL2'5'
HEX8     DC    XL2'8'
HEX9     DC    XL2'9'
HEXC     DC    XL2'C'
HEXD     DC    XL2'D'
HEX10    DC    XL2'10'
HEX11    DC    XL2'11'
HEX12    DC    XL2'12'
HEX13    DC    XL2'13'
HEX14    DC    XL2'14'
HEX18    DC    XL2'18'
HEX1B    DC    XL2'1B'
HEX1C    DC    XL2'1C'                                      DC18203
HEX20    DC    XL2'20'
HEX2B    DC    XL2'2B'
HEX2D    DC    XL2'2D'
HEX31    DC    XL2'31'
HEX3C    DC    XL2'3C'
HEX4A    DC    XL2'4A'
HEX56    DC    XL2'56'
HEX5D    DC    XL2'5D'
HEX5F    DC    XL2'5F'
HEX60    DC    XL2'60'
         EJECT
*              BISYNCH STATUS ERROR MESSAGE CODES
         DS    0H
SNAS0010 DC    XL2'0010'               3270 -- INTERRUPTION
*                                       REQUIRED BECAUSE DEVICE
*                                       POWERED OFF.
SNAS0200 DC    XL2'0200'                3270 -- DEVICE END
*                                       (ALONE), MEANING THAT
*                                       THE DEVICE IS POWERED
*                                       ON AND OK TO USE.
         SPACE 1
*              LOGICAL UNIT STATUS FOR 3276/3278/3287/ETC.
         SPACE 1
LUS0001  DC    XL2'0001'               DEVICE AVAILABLE
LUS082B  DC    XL2'082B'               DEVICE AVAILABLE
LUS0831  DC    XL2'0831'               DEVICE POWERED OFF
         SPACE 1
@EXEC2   MVC   0(0,R4),2(R7)
@EXEC3   MVC   0(0,R4),0(R6)
         SPACE 3
         LTORG
         TITLE '*********  N E T S O L  -  ERROR BYPASS TABLE'
***********************************************************************
*        THIS TABLE DEFINES THOSE RPL-BASED MACRO ERRORS WHICH        *
*        ARE NOT TO BE WRITTEN TO THE OPERATOR'S CONSOLE.             *
*                                                                     *
*        EACH TABLE ENTRY CONSISTS OFTHE FOLLOWING FIELDS:            *
*                                                                     *
*             ERMCODE - THE ERROR COMBINATION TO BE BYPASSED.         *
*                       THE FORMAT OF THIS FIELD IS:                  *
*                     RPLREQ/RPLRTNCD/RPLFDB2/RPLSSEI/RPLSSMI/RPLUSNSI*
*                       ANY FIELD WHICH DOESN'T MATTER SHOULD BE SET  *
*                       TO ZERO.                                      *
*                                                                     *
*             ERMAND  - THE MASK TO ZERO IRRELEVANT FIELDS IN THE     *
*                       CONSTRUCTED ERROR COMBINATION FIELD PRIOR     *
*                       TO COMPARISON WITH ERMCODE. EACH BYTE HERE    *
*                       HAS A CORRESPONDING BYTE IN ERMCODE AND SHOULD*
*                       BE SET TO:                                    *
*                         X'FF' - IF THE FIELD IN ERRCODE IS NON-ZERO.*
*                         X'00' - IF THE FIELD IN ERRCODE IS ZERO.    *
*                                                                     *
***********************************************************************
         SPACE 2
ERMCODE  EQU   0,7                    ERROR COMBINATION TO BE COMPARED
ERMAND   EQU   7,7                    MASK TO ZERO IRRELEVANT FIELDS
ERMSGL   EQU   14                     LENGTH OF A TABLE ENTRY
         SPACE 2
ERMSGTAB EQU   *                      START OF ERROR MSG TABLE
ERM1CODE DC    XL7'1B144B00000000'      BAD APPLID
ERM1AND  DC    XL7'FFFFFF00000000'        KEYED IN AT TERMINAL
ERMSGEND EQU   *-ERMSGL               LAST ENTRY IN TABLE
         SPACE 2
ERMBXLE  DC    A(ERMSGTAB)            BXLE (TABLE START)
         DC    A(ERMSGL)                REGS   (ENTRY LENGTH)
         DC    A(ERMSGEND)                FOR TABLE SEARCH  (TABLE END)
         TITLE '*********  N E T S O L  -  NETSOL GETPARM OPTIONS'
***********************************************************************
*        THIS TABLE DEFINES THE OPTIONS WHICH CAN BE SPECIFIED        *
*        WHEN SEARCHING THE INPUT CMD STRING FOR AN OPTION.           *
*                                                                     *
*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *
*                                                                     *
*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *
*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *
*                        MULTIPLE LOGON SEQUENCES.                    *
*                                                                     *
*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *
*                        WITH CMDGAPPL                                *
*                                                                     *
*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *
*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *
*                                                                     *
*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *
*                        COMMAND.                                     *
*                                                                     *
***********************************************************************
         SPACE 2
GPAMECT  EQU   0                      START OF OPTION LIST
GPLEN    EQU   0,2                    MAX LENGTH OF PARAMETER
GPTEXTL  EQU   2,2                    LEN OF PARM ERROR TEXT
GPFLAG   EQU   4,1                    OPTION FLAGS
GPOPT    EQU   X'80'                  PARAMETER IS OPTIONAL
GPNULL   EQU   X'00'                  NO OPTIONS FOR THIS PARAMTER
GPTEXT   EQU   5                      TEXT INSERTED INTO GP ERR MSG
         SPACE 2
         PRINT NOGEN
*
*        APPLICATION LOGON SEQUENCES
*
SLNODE   $GP    8,'NODENAME',GPNULL
SLAPPL   $GP    8,'LOGON APPLID',GPOPT
         PRINT GEN
         TITLE '*********  N E T S O L  -  SPECIAL LOGMODE ENTRY TABLE'
***********************************************************************
*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH DO NOT USE       *
*        THE DEFAULT LOGMODE ENTRY FOR THE DEVICE.                    *
*                                                                     *
*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *
*                                                                     *
*             LOGMDAPP - THE APPLID OF THE APPLICATION USING A        *
*                        DIFFERNENT LOGOMODE TABLE ENTRY.             *
*                                                                     *
*             LOGMDENT- THE ASSOCIATED LOGOMODE TABLE ENTRY NAME.     *
*                                                                     *
***********************************************************************
         SPACE 2
LOGMDAPP EQU   0,8                    APPLICATION NAME
LOGMDENT EQU   8,8                    ASSOCIATED LOGMODE TABLE ENTRY
LOGMDLEN EQU   16                     LENGTH OF A TABLE ENTRY
         SPACE 2
LOGMDTAB EQU   *                             START OF LOGMODE TABLE
*                 /APPLID  /    /LOGMODE /   FORMAT ENTRY
LOGMDHCF DC    CL8'SHCF    ',CL8'HCFPX   '   HCF
LOGMDNCF DC    CL8'NCCF    ',CL8'DSILGMOD'   NCCF
LOGMDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF LOGMODE TABLE
         TITLE '*********  N E T S O L  -  MESSAGE EQUATES/CONSTANTS'
*              EQUATES FOR ERROR MESSAGE NUMBERS AND REASON-CODES
MSG01    EQU   1                       INVALID LOGMODE TABLE ENTRY
MSG02    EQU   2                       LOGON DATA NOT IN INTRPRET TBLE.
MSG03    EQU   3                       NO INTRPRET TABLE
MSG04    EQU   4                       NO ROUTINE TO FIND APPL NAME
MSG05    EQU   5                       NOT AUTHORIZED FOR APPLICATION
MSG06    EQU   6                       APPLICATION NOT KNOWN
MSG07    EQU   7                       APPLICATION DEACTIVATED
MSG08    EQU   8                       APPLICATION INACTIVE
MSG09    EQU   9                       APPLICATION QUIESCING
MSG10    EQU   10                      APPLICATION NEVER ACCEPTS LOGONS
MSG11    EQU   11                      APPLICATION TEMPORARILY NOT
*                                      ACCEPTING LOGONS.
MSG12    EQU   12                      THIS TERMINAL LOGGED ON
*                                      TO NETWORK SOLICITOR
MSG13    EQU   13                      8775 WRONG SCREEN SIZE
         SPACE 2
***********************************************************************
*        LIST FORMS OF SOME MESSAGES                                  *
***********************************************************************
         SPACE 1
LISTWTO  WTO  'BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL DUE TOX
                I/O ERROR',                                            X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
LISTWTO1 WTO  'BCSC002 RC=42 ON NETSOL CLOSE ACB',                     X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
LISTWTO6 WTO  'BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS PROX
               GRAM IS TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
ERRORMSG WTO  'BCSC003 SYNAD/LERAD EXIT REQ=**,RTNCD=**,FDBK2=**,SSENSEX
               I=**,SSENSMI=**,SENSE=****,TERM=********',              X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
LOSTMSG  WTO  'BCSC004 LOSTERM ENTRY CODE XX FOR TERM=********',       X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
RELRQMSG WTO  'BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST',  X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
RELFLMSG WTO  'BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT',     X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
LISTWTO8 WTO  'BCSC008 TERM=******** IS AN UNSUPPORTED TERMINAL TYPE', X
               ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
LOGMENU  WTO  'BCSC009 TERM=******** MENU WRITTEN FROM ******',        X
               ROUTCDE=(11),DESC=(7),MF=L
         SPACE 3
MSG1003  WTO  'BCSC010 TERM=******** LOGMODE NOT COMPATIBLE WITH TERMINX
               AL',ROUTCDE=(8),DESC=(7),MF=L
         SPACE 3
DCBMSG   WTO  'BCSC011 XXXXXX FILE WILL NOT OPEN. INITIALIZATION BYPASSX
               ED',ROUTCDE=(1,8),DESC=(7),MF=L
         SPACE 3
INITEMSG WTO  'BCSC012 ERROS ON INITIALIZATION FILE. EXECUTION CONTINUEX
               S',ROUTCDE=(1,8),DESC=(7),MF=L
         TITLE '*********  N E T S O L  -  A C B'
         DS    0D
         DC    CL8'ACB'
         SPACE 2
ACB      ACB   AM=VTAM,                                                X
               APPLID=NSNAME,                                          X
               EXLST=EXLST,                                            X
               MACRF=LOGON
         TITLE '*********  N E T S O L  -  A C B   EXIT LIST'
***********************************************************************
*    EXIT ROUTINES TO BE SCHEDULED IN RESPONSE TO VTAM EVENTS         *
*                                                                     *
*              * ERREXIT ENTERED FOR ERROR CONDITIONS.                *
*              * TPEND SCHEDULED WHEN VTAM SHUTS DOWN                 *
*              * LOGON SCHEDULED WHEN A TERMINAL LOGS ON              *
*              * LOSTERM SCHEDULED WHEN A TERMINAL IS LOST            *
*              * RELREQ SCHEDULED WHEN ANOTHER APPLICATION ACQUIRES   *
*                A TERMINAL CURRENTLY LOGGED ON TO NETSOL.            *
***********************************************************************
         SPACE 3
         DS    0D
         DC    CL8'EXITLIST'
         SPACE 2
EXLST    EXLST LERAD=ERREXIT,                                          X
               SYNAD=ERREXIT,                                          X
               TPEND=TPEND,                                            X
               RELREQ=RELREQ,                                          X
               LOGON=LOGON,                                            X
               LOSTERM=LOSTERM,                                        X
               AM=VTAM
         TITLE '*********  N E T S O L  -  ASYNCHRONOUS  N I B'
***********************************************************************
*        THE FOLLOWING NIB IS USED TO REFRESH THE NIB IN THE          *
*        ASYNCHROUS RPL. IT ITSELF IS NOT USED IN ANY MACRO.          *
***********************************************************************
         SPACE 3
         DS    0D
         DC    CL8'FRESHNIB'
         SPACE 2
FRESHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X
               LISTEND=YES,LOGMODE=0,BNDAREA=0
         TITLE '*********  N E T S O L  -  ASYNCHRONOUS   R P L'
***********************************************************************
*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE ASYNC        *
*        RPL'S IN THE RPL CSECT.  IT IS NOT ITSELF USED IN ANY        *
*        MACRO.                                                       *
***********************************************************************
         SPACE 3
         DS    0D
         DC    CL8'FRESHRPL'
         SPACE 2
FRESHRPL RPL   ACB=ACB,                                                X
               AM=VTAM,                                                X
               OPTCD=ASY
         TITLE '*********  N E T S O L  -  TERMINAL TABLE DSECT'
TERMTABL DSECT
TERMNAME DS    CL8                     TERMINAL LU NAME FROM LOGON
TERMCID  DS    XL4                     CID GOTTEN AFTER OPNDST
TERMCRPL DS    AL4                     A(ACTIVE RPL FOR THIS TTE)
TERMAPPL DS    CL8                     APPLID FOR LAST CLSDST(PASS)
TERMDAPL DS    CL8                     DEFAULT LOGON APPLID FOR TERM
TERMLOGC DS    H                       LOGON COUNTER
TERMFLAG DS    XL1                     FLAG BYTE FOR LOGON STATUS
LOGPROC  EQU   X'80'                   LOGON PROCEEEDING
SENDSCED EQU   X'40'                   SEND (POST=SCED) ISSUED  DC18203
TERMFLG2 DS    XL1                     FLAG FOR TERMINAL'S NETSOL STAT
TOPEN    EQU   X'80'                   TERM LOGGED ON TO NETSOL
TPASSED  EQU   X'40'                   TERM SUCCESSFULLY TO APPLID
TREL     EQU   X'20'                   TERM RELEASED FOR SOME REASON
TINIT    EQU   X'10'                   DEFAULT APPLID SET AT INIT TIME
TERMDDT  DS    AL4                     A(DDT FOR THIS TERMINAL)
TERMDTIM DS    F                       TIME+60 SECS OF AUTO LOGON
TERMDCNT DS    H                       AUTO LOGON LOOP COUNTER
TERMMODL DS    C                       TERM MODEL NUMBER
TERMFILL DS    CL17                    RESERVED
TERMELEN EQU   *-TERMNAME              LENGTH OF AN ENTRY
         TITLE '*********  N E T S O L  - DEVICE DEPENDENT TABLE DSECT'
DDT      DSECT
         SPACE 2
*        THE DEVICE DEPENDENT TABLE IDENTIFIES EDIT AND I/O ROUTINES
*        AND MESSAGES APPLICABLE TO A PARTICULAR DEVICE TYPE.
*        THE INQUIRE MACRO IS ISSUED IN THE LOGON EXIT TO OBTAIN
*        LOGMODE INFORMATION SO THAT THE DEVICE TYPE CAN BE DETERMINED.
*        TERMDDT POINTS TO THE DDT FOR A TERMINAL.
         SPACE 2
         DS    0D
DDTEDIT  DS    AL4                     A(INPUT EDIT ROUTINE)
DDTSEND  DS    AL4                     A(SEND ROUTINE)
DDTTERM  DS    AL4                     A(TERMINAL FIELD IN MSG 12)
DDTTIME  DS    AL4                     A(TIME FIELD IN MSG 12)
DDTM4OFS DS    AL4                     A(USEABLE MSG BUFFER IN MSG4)
DDTMSGOF DS    AL2                     MSG OFFSET OF DATA FIELD
DDTM4L   DS    AL2                     LEN(USEABLE MSG BUFFER IN MSG4)
DDTTMDL  DS    AL4                     A(MODEL NUMBER IN MSG 12)
DDTMSGTB DS    0F
DDTMSG01 DS    AL4                     A(MSG 01)
DDTMSG02 DS    AL4                     A(MSG 02)
DDTMSG03 DS    AL4                     A(MSG 03)
DDTMSG04 DS    AL4                     A(MSG 04)
DDTMSG05 DS    AL4                     A(MSG 05)
DDTMSG06 DS    AL4                     A(MSG 06)
DDTMSG07 DS    AL4                     A(MSG 07)
DDTMSG08 DS    AL4                     A(MSG 08)
DDTMSG09 DS    AL4                     A(MSG 09)
DDTMSG10 DS    AL4                     A(MSG 10)
DDTMSG11 DS    AL4                     A(MSG 11)
DDTMSG12 DS    AL4                     A(MSG 12)
DDTMSG13 DS    AL4                     A(MSG 13)
         TITLE '*********  N E T S O L  -  D C B ''S'
*        DCB FOR SYSIN FILE
         SPACE 1
NETSOL   CSECT
         PRINT NOGEN
SYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),        X
               LRECL=80
*        DCB FOR SYSOUT FILE
         SPACE 1
SYSOUDCB DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F
         SPACE 1
         IHADCB DSORG=PS
         PRINT GEN
         TITLE '*********  N E T S O L  -  N I B   DSECT'
         ISTDNIB
         TITLE '*********  N E T S O L  -  B I N D   DSECT'
         ISTDBIND
         TITLE '*********  N E T S O L  -  R P L   DSECT'
IFGRPLX  DSECT
STSECT   DS    0D                  START DSECT ON D-WORD
         IFGRPL DSECT=NO,AM=VTAM
         EJECT
*********       END OF RPL DSECT AND START OF NIB       **************
         ORG
NIBDMPID DC    0D'0',CL8'DYNAMNIB'     NIB DUMP ID
NIBSTART DS    CL(NIBLNIB)             ASYNCHROUS NIB
*********       END OF NIB AND START OF RPL WORK AREA   **************
WORKSPAC DS    0D                      START OF RPL WORK AREA
CID      DS    F                       CID OF READ DEVICE
RPLSAVE  DS    18F                     SAVE AREA FOR RPL OPERATIONS
RPLERRSA DS    12F                     SAVE AREA FOR SYNAD EXIT
*                                      THAT ARE ASYNCHRONOUS
APPLID   DS    CL8                     NAME OF APPLICATION
MODETAB  DS    CL8                     NAME OF MODE TABLE ENTRY
GRPLTIME DS    CL8     (HHMMSSTH YYYDD) TIMESTAMP WHEN RPL GETMAINED
RECLEN   DS    F                       FOR READ RECLEN FIELD
SENDLEN  DS    F                       FOR SEND TO TERMINAL
DATAPTR  DS    AL4(0)                  A(LOGON SEQUENCE IN IOAREA)
GPPARM   DS    AL4(0)                  A(OPTION LIST PASSED TO GETPARM)
GPDATAP  DS    AL4(0)                  A(CURRENT PTR IN CMD BUFFER)
GPDATAL  DS    H                       LENGTH OF TEXT LEFT IN CMD BUF
MSGINDEX DS    X                       NUMBER OF ERROR MESSAGE WRITTEN
ERMDATA  DS    CL7                     COMBINED ERROR FIELD
REQ      EQU   ERMDATA,1               FOR RPL REQ FIELD
RTNCD    EQU   ERMDATA+1,1             FOR RPL RTNCD FIELD
FDBK2    EQU   ERMDATA+2,1             FOR RPL FDBK2 FIELD
SENSE    EQU   ERMDATA+3,2             SAVE SSENSEI + SSENSMI FIELDS
USENSE   EQU   ERMDATA+5,2             SAVE USSESEI (2 BYTES)
ERMTEMP  DS    CL7                     ERROR FIELD WORKAREA
ACTIONS  DS    2X                      SAVE AREA FOR ERROR
APPLSTAT DC    X'0'                    FOR RPL FDBK FIELD
*                                      ACTION CODES
*        INTERNAL FLAG BYTES
FLAGS    DS    X                       FLAG BYTE
*
LOGOFF   EQU   X'80'                   LOGOFF COMMAND ISSUED
RELOPND  EQU   X'40'                   RELEASE DEVICE, THEN
*                                      ATTEMPT TO RECONNECT
*                                      VIA OPNDST
BADEVICE EQU   X'20'                   PROBLEM WITH DEVICE
LOGMODE  EQU   X'10'                   FLAG TO INDICATE THE USER
*                                      HAS SUPPLIED THE NAME OF A
*                                      LOGMODE TABLE ENTRY IN THE
*                                      LOGON MSG TO BE PASSED TO
*                                      THE APPLICATION.
FIRSTSND EQU   X'08'                   FIRST SEND TO TERMINAL
CLEARSCR EQU   X'04'                   RECEND ISSUING CLEAR SCREEN
LUSTATE  EQU   X'02'                   LUSTAT PROCESSING FOR TERMINAL
SIMLOG   EQU   X'01'                   CLSDST(PASS) FAILED => MUST
*                                      ISSUE CLSDST(RELEASE) BEFORE
*                                      CONTINUING WITH SIMLOGON
         SPACE 1
EXITFLAG DS    X                       FLAG INDICATING WHICH EXITS
*                                      HAVE BEEN ENTERED.
LOGONEX  EQU   X'80'                   ENTERED THE LOGON EXIT
RECEX    EQU   X'40'                   ENTERED THE READEND EXIT
PASSEX   EQU   X'20'                   ENTERED THE CLSDST(PASS) EXIT
SENDEX   EQU   X'10'                   ENTERED THE WRITE EXIT
RELREQEX EQU   X'08'                   ENTERED THE RELREQ EXIT
LOSTEX   EQU   X'04'                   ENTERED THE LOSTERM EXIT
CLOSEX   EQU   X'02'                   ENTERED THE CLSDST(RELEASE)EXIT
OPENEX   EQU   X'01'                   ENTERED THE OPNDST EXIT
         SPACE 1
EXITFLG2 DS    X                       2ND FLAG INDICATING WHICH EXITS
*                                      HAVE BEEN ENTERED.
OPNACQX  EQU   X'80'                   ENTERED THE OPNDST(ACQUIRE) EXIT
         SPACE 1
MFLAGS   DS    X                       FLAG BYTE FOR CURRENT VTAM MACRO
OPNDSPEC EQU   X'80'                   OPNDST(SPEC) IN PROGRESS
INQAPPST EQU   X'40'                   INQUIRE(APPSTST) IN PROGRESS
SENDING  EQU   X'20'                   WRITE IN PROGRESS
RECA     EQU   X'10'                   READ(ANY) IN PROGRESS
SMLOGON  EQU   X'08'                   SIMLOGON ISSUED AFTER CLSDST
INTRPRT  EQU   X'04'                   INTRPRET IN PROGRESS
CLSDST   EQU   X'02'                   CLSDST IN PROGRESS
LUSEND   EQU   X'01'                   LUSTAT RESPONSE SENT
         SPACE 1
         SPACE 1
MFLAGS2  DS    X                      FLAG BYTE2 FOR CURRENT VTAM MACRO
INQSESS  EQU   X'80'                   INQUIRE(SESSPARM) IN PROGRESS
         SPACE 1
MACFLAGS DS    X                       INDICATE MACROS CALLED FLAG 1
CLSREL   EQU   X'80'                   WILL DO CLSDST(RELEASE)
OPNSPEC  EQU   X'40'                   WILL DO OPEN(SPEC)
SIMLGON  EQU   X'20'                   SIMLOGON AFTER CLSDST
INTAPPID EQU   X'10'                   WILL DO INTERP (APPLID)
INQAPPS  EQU   X'08'                   WILL DO INQUIRE(APPSTAT)
CLOSPASS EQU   X'04'                   WILL DO CLSDST(PASS)
SENDASY  EQU   X'02'                   WILL DO SEND ASY
OPNDACQ  EQU   X'01'                   WILL DO OPNDST(AQUIRE)
         SPACE 1
MACFLAG2 DS    X                       INDICATE MACROS CALLED FLAG 2
INQSES   EQU   X'80'                   WILL DO INQUIRE(SESSPARM)
         SPACE 1
DATASEQL DS    X                       X-LATED DATA SEQ-LENGTH
         SPACE 2
WORKRPLA EQU   *-WORKSPAC              USED TO CLEAR OUT WORKAREA
         TITLE '*********  N E T S O L  -  SYNCHRONOUS RPL + NIB + WA'
***********************************************************************
*        THE FOLLOWING RPL IS USED FOR ALL SYNCHRONOUS COMMANDS       *
***********************************************************************
         SPACE 3
NETSOL   CSECT
         DS    0D
         DC    CL8'SYNCHRPL'
         SPACE 2
SYNCHRPL RPL  ACB=ACB,OPTCD=SYN,                                       X
               AM=VTAM
         ORG
***********************************************************************
*        THE FOLLOWING NIB IS USED FOR ALL SYNCHRONOUS OPERATIONS     *
*        REQUIRING A NIB.                                             *
***********************************************************************
         SPACE 3
         DS    0D
         DC    CL8'SYNCHNIB'
         SPACE 2
SYNCHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X
               LISTEND=YES,LOGMODE=C' ',BNDAREA=0
         DS    0D
SYNWORK  DC    (WORKRPLA)X'00'         RPL WORK AREA
         DS    0D
LNGTHRPL DC    AL1(1),AL3(ENDSECT-STSECT+8)  SUBPOOL #/LENGTH OF RPL
*                                      AND ITS OWN WORKAREA
SYNARG   EQU   SYNCHRPL+RPLARG-IFGRPL  DISPLACEMENT TO THE ARG
*                                      WITHIN SYNCHRPL
SYNFDB3  EQU   SYNCHRPL+RPLFDB3-IFGRPL DISPLACEMENT TO FBD3
*                                      IN SYNCHRPL'S WORKAREA
SRPLEXT1 EQU   SYNCHRPL+RPLEXTD1-IFGRPL DISPLACEMENT TO 'NIB@
*                                      IN ARG FIELD' BIT
SYNUSFLD EQU   SYNCHRPL+RPLUSFLD-IFGRPL DISPLACEMENT TO RPL USER FIELD
*                                      FOR USE BY ERROR EXIT ROUTINE
         EJECT
***********************************************************************
*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE SYNCRONOUS   *
*        RPL'S. IT IS NOT ITSELF USED IN ANY MACROS      DC18203      *
***********************************************************************
         SPACE 1
         DS    0D                                              DC18203
         DC    CL8'FRSYNRPL'                                   DC18203
         SPACE 2
FRSYNRPL RPL   ACB=ACB,AM=VTAM,OPTCD=SYN                       DC18203
FRSYNL   EQU   *-FRSYNRPL    LENGTH OF SYN RPL FOR REFRESH     DC18203
         TITLE '*********  N E T S O L  -  SETLOGON RPL'
***********************************************************************
*        SETLOGON RPL - A SEPARATE RPL IS NECESSARY BECAUSE           *
*         THE LOGON EXIT CAN BE DRIVEN BEFORE THE SETLOGON            *
*         COMPLETES.                                                  *
***********************************************************************
         SPACE 3
         DS    0D
         DC    CL8'LOGONRPL'
         SPACE 2
SETLRPL  RPL   ACB=ACB,OPTCD=SYN,                                      X
               AM=VTAM
SETNIB   DC    (8+NIBLNIB)X'00'        NIB IN IFGRPLX DSECT
SETWORKA DC    (WORKRPLA)X'00'         WORKAREA IN IFGRPLX DSECT
         TITLE '*********  N E T S O L  -  NETSOL COMMAND TABLE'
***********************************************************************
*        THIS TABLE DEFINES THE COMMANDS WHICH MAY BE ENTERED FROM    *
*        THE TERMINAL.                                                *
*                                                                     *
*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *
*                                                                     *
*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *
*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *
*                        MULTIPLE LOGON SEQUENCES.                    *
*                                                                     *
*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *
*                        WITH CMDGAPPL                                *
*                                                                     *
*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *
*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *
*                                                                     *
*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *
*                        COMMAND.                                     *
*                                                                     *
***********************************************************************
         SPACE 2
CMDGAPPL EQU   0,8                    GENERIC APPLICATION NAME
CMDVAPPL EQU   8,8                    VTAM APPLICATION NAME
CMDTEXT  EQU   16,8                   LOGON SEQUENCE OR COMMAND
CMDROUTA EQU   24,4                   A(CMD PROCESSING ROUTINE)
CMDTEXTL EQU   28,2                   LENGTH OF CMDTEXT
CMDFLAG  EQU   30,1                   COMMAND FLAG
CMDINIT  EQU   X'80'                  COMMAND ALLOWED FROM SYSIN FILE
CMDTERM  EQU   X'40'                  COMMAND ALLOWED FROM TERMINAL
CMDFILL  EQU   31,1                   FILLER
CMDTABL  EQU   32                     LENGTH OF CMD TABLE ENTRY
         SPACE 2
         PRINT NOGEN
CMDTAB   EQU   *                             START OF COMMAND TABLE
*
*        APPLICATION LOGON SEQUENCES
*
CHCF     $CMD  HCF,SHCF,CHKAPPL,'HCF',CMDTERM
CHCFC    $CMD  HCFC,SHCFC,CHKAPPL,'HCFC',CMDTERM
CIMSTEST $CMD  IMSTEST,SIMST,CHKAPPL,'IMSTEST',CMDTERM
         $CMD  IMSTEST,SIMST,CHKAPPL,'4',CMDTERM
CIMS     $CMD  IMS,SIMSP,CHKAPPL,'IMS',CMDTERM
         $CMD  IMS,SIMSP,CHKAPPL,'2',CMDTERM
         $CMD  IMS,SIMSP,CHKAPPL,'DSSMTCPC',CMDTERM
         $CMD  IMS,SIMSP,CHKAPPL,'DSSMTCCC',CMDTERM
CIIMSP1  $CMD  ICBCIMS,IIMSP1,CHKAPPL,'IIMS',CMDTERM
         $CMD  ICBCIMS,IIMSP1,CHKAPPL,'6',CMDTERM
CIIMST1  $CMD  ICBCIMS,IIMST1,CHKAPPL,'IIMST1',CMDTERM
CIIMST2  $CMD  ICBCIMS,IIMST2,CHKAPPL,'IIMST2',CMDTERM
CIMSC    $CMD  IMSC,IMSC,CHKAPPL,'IMSC',CMDTERM
CLCV     $CMD  LCV,SLCV,CHKAPPL,'LCV',CMDTERM
CNCCFA   $CMD  NCCFA,NCCFA,CHKAPPL,'NCCFA',CMDTERM
CNCCFB   $CMD  NCCFB,NCCFB,CHKAPPL,'NCCFB',CMDTERM
CNCCFC   $CMD  NCCFC,NCCFC,CHKAPPL,'NCCFC',CMDTERM
CNCCF1   $CMD  NCCF1,NCCF1,CHKAPPL,'NCCF1',CMDTERM
CNCCF2   $CMD  NCCF2,NCCF2,CHKAPPL,'NCCF2',CMDTERM
CNETAPL1 $CMD  NETAPPL1,SNETAPL1,CHKAPPL,'NETAPPL1',CMDTERM
CNETAPL2 $CMD  NETAPPL2,SNETAPL2,CHKAPPL,'NETAPPL2',CMDTERM
CNETEST  $CMD  NETEST,SNETST,CHKAPPL,'NETEST',CMDTERM
CNETSOLA $CMD  NETSOLA,NETSOLA,CHKAPPL,'NETSOLA',CMDTERM
CNETSOLB $CMD  NETSOLB,NETSOLB,CHKAPPL,'NETSOLB',CMDTERM
CNETSOL  $CMD  NETSOL,NETSOL,CHKAPPL,'NETSOL',CMDTERM
CNETOP   $CMD  NETOP,SNETOP,CHKAPPL,'NETOP',CMDTERM
CNPA     $CMD  NPA,SNPA,CHKAPPL,'NPA',CMDTERM
COIMA    $CMD  OMEGIMSA,SOIMA,CHKAPPL,'OMEGIMSA',CMDTERM
COIMB    $CMD  OMEGIMSB,SOIMB,CHKAPPL,'OMEGIMSB',CMDTERM
CPHNX    $CMD  PHOENIX,SPHNX,CHKAPPL,'PHOENIX',CMDTERM
CTESTWYL $CMD  TESTWYL,SWYLT,CHKAPPL,'TESTWYL',CMDTERM
CITSOA   $CMD  ITSO,ITSOA,CHKAPPL,'ITSOA',CMDTERM
         $CMD  ITSO,ITSOA,CHKAPPL,'LOGONIA',CMDTERM
CITSOB   $CMD  ITSO,ITSOB,CHKAPPL,'ITSOB',CMDTERM
         $CMD  ITSO,ITSOB,CHKAPPL,'LOGONIB',CMDTERM
CTSOA    $CMD  TSOA,STSOA,CHKAPPL,'TSOA',CMDTERM
         $CMD  TSOA,STSOA,CHKAPPL,'LOGONA',CMDTERM
CTSOB    $CMD  TSOB,STSOB,CHKAPPL,'TSOB',CMDTERM
         $CMD  TSOB,STSOB,CHKAPPL,'LOGONB',CMDTERM
CTSOC    $CMD  TSOC,STSOC,CHKAPPL,'TSOC',CMDTERM
         $CMD  TSOC,STSOC,CHKAPPL,'LOGONC',CMDTERM
CTSO     $CMD  TSO,STSOA,CHKAPPL,'TSO',CMDTERM
         $CMD  TSO,STSOA,CHKAPPL,'LOGON',CMDTERM
CWYLBUR  $CMD  WYLBUR,SWYLP,CHKAPPL,'WYLBUR',CMDTERM
         $CMD  WYLBUR,SWYLP,CHKAPPL,'3',CMDTERM
CVSPC    $CMD  VSPC,SVSPC,CHKAPPL,'VSPC',CMDTERM
         $CMD  VSPC,SVSPC,CHKAPPL,'5',CMDTERM
CSNETSOL $CMD  SNETSOL,SNETSOL,CHKAPPL,'SNETSOL',CMDTERM
*
*        NETSOL COMMANDS
*
CLOGOFF  $CMD  LOGOFF,LOGOFF,LOGOFCMD,'LOGOFF',CMDTERM
CSLOGON  $CMD  SETLOGON,SETLOGON,SETLOGON,'SETLOGON',CMDTERM+CMDINIT
         SPACE 1
CMDTABND DC    CL8'ENDOFTAB'                 END OF COMMAND TABLE
         PRINT GEN
         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X
               270'
***********************************************************************
*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *
*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *
***********************************************************************
DDT3270  DS    0D
S32EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)
S32SENDA DC    A(S32SEND)         A(3270 SEND ROUTINE)
S32TERMA DC    A(S32TERM)         A(TERMINAL FIELD IN MSG 12)
S32TIMEA DC    A(S32TIME)         A(TIME FIELD IN MSG 12)
S32M4OFS DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)
S32OFFST DC    AL2(23)            MSG OFFSET FOR INSERTED DATA
S32M4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)
S32MDLA  DC    A(S32MDL+6)        A(MODEL NUMBER IN MSG 12)
***********************************************************************
*        MESSAGE TABLE INDEX                                          *
***********************************************************************
         SPACE 3
S32MSGTB DS    0F
         DC    A(S32MSG01)
         DC    A(S32MSG02)
         DC    A(S32MSG03)
         DC    A(S32MSG04)
         DC    A(S32MSG05)
         DC    A(S32MSG06)
         DC    A(S32MSG07)
         DC    A(S32MSG08)
         DC    A(S32MSG09)
         DC    A(S32MSG10)
         DC    A(S32MSG11)
         DC    A(S32MSG12)
         DC    A(S32MSG13)
         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X
               270 EXTENDED FUNCTION'
***********************************************************************
*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *
*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES     *
*        THAT HAVE EXTENDED FUNCTION (I.E. COLOUR + SYMBOL SETS ).    *
***********************************************************************
DDT3270E DS    0D
S3EEDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)
S3ESENDA DC    A(S32SEND)         A(3270 SEND ROUTINE)
S3ETERMA DC    A(S3ETERM)         A(TERMINAL FIELD IN MSG 12)
S3ETIMEA DC    A(S3ETIME)         A(TIME FIELD IN MSG 12)
S3EM4OFS DC    A(S3EM4OF)         A(USEABLE BUFFER IN MSG 4)
S3EOFFST DC    AL2(27)            MSG OFFSET FOR INSERTED DATA
S3EM4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)
S3EMDLA  DC    A(S3EMDL+6)        A(MODEL NUMBER IN MSG 12)
***********************************************************************
*        MESSAGE TABLE INDEX                                          *
***********************************************************************
         SPACE 3
S3EMSGTB DS    0F
         DC    A(S3EMSG01)
         DC    A(S3EMSG02)
         DC    A(S3EMSG03)
         DC    A(S3EMSG04)
         DC    A(S3EMSG05)
         DC    A(S3EMSG06)
         DC    A(S3EMSG07)
         DC    A(S3EMSG08)
         DC    A(S3EMSG09)
         DC    A(S3EMSG10)
         DC    A(S3EMSG11)
         DC    A(S3EMSG12)
         DC    A(S3EMSG13)
         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X
               767'
***********************************************************************
*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *
*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3767 TERMINALS.  *
***********************************************************************
DDT3767  DS    0D
S37EDITA DC    A(S37EDIT)         A(3767 INPUT EDIT ROUTINE)
S37SENDA DC    A(S32SEND)         A(3767 SEND ROUTINE)
S37TERMA DC    A(S37TERM)         A(TERMINAL FIELD IN MSG 12)
S37TIMEA DC    A(S37TIME)         A(TIME FIELD IN MSG 12)
S37M4OFS DC    A(S37M4OF)         A(USEABLE BUFFER IN MSG 4)
S37OFFST DC    AL2(9)             MSG OFFSET FOR INSERTED DATA
S37M4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)
S37MDLA  DC    A(0)               A(MODEL NUMBER IN MSG 12)
***********************************************************************
*        MESSAGE TABLE INDEX                                          *
***********************************************************************
         SPACE 3
S37MSGTB DS    0F
         DC    A(S37MSG01)
         DC    A(S37MSG02)
         DC    A(S37MSG03)
         DC    A(S37MSG04)
         DC    A(S37MSG05)
         DC    A(S37MSG06)
         DC    A(S37MSG07)
         DC    A(S37MSG08)
         DC    A(S37MSG09)
         DC    A(S37MSG10)
         DC    A(S37MSG11)
         DC    A(S37MSG12)
         DC    A(S37MSG13)
         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR SX
               YSIN FILE'
***********************************************************************
*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *
*        THE MESSAGE TEXT USED IN PROCESSING CMDS FROM THE SYSIN FILE.*
***********************************************************************
DDTSYSIN DS    0D
SINEDITA DC    A(0)               A(SYSIN INPUT EDIT ROUTINE)
SINSENDA DC    A(RIPUTMSG)        A(SYSIN SEND ROUTINE)
SINTERMA DC    A(0)               A(TERMINAL FIELD IN MSG 12)
SINTIMEA DC    A(0)               A(TIME FIELD IN MSG 12)
SINM4OFS DC    A(SINM4OF)         A(USEABLE BUFFER IN MSG 4)
SINOFFST DC    AL2(0)             MSG OFFSET FOR INSERTED DATA
SINM4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)
SINMDLA  DC    A(0)               A(MODEL NUMBER IN MSG 12)
***********************************************************************
*        MESSAGE TABLE INDEX                                          *
***********************************************************************
         SPACE 3
SINMSGTB DS    0F
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG04)         RESPONSE FOR INITIALIZATION CMDS
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG07)         FOR INVALID COMMANDS
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         DC    A(SINMSG00)
         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'
***********************************************************************
*        MESSAGE TEXTS                                                *
***********************************************************************
         SPACE 3
         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS
         SPACE 3
S32MSG01 DC    YL2(S32END01-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)
         $SF   (HI,SKIP)
         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END01 EQU   *
         SPACE 3
S32MSG02 DC    YL2(S32END02-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)
         $SF   (HI,SKIP)
         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END02 EQU   *
         SPACE 3
S32MSG03 DC    YL2(S32END03-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)
         $SF   (HI,SKIP)
         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END03 EQU   *
         SPACE 3
S32MSG04 DC    YL2(S32END04-*)
         SPACE
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (RESETKBD,MDT)     SET WCC CODE
         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER
         $SF   (SKIP)
S32M4OF  DC    CL46'BCSC04 - BRITISH COLUMBIA SYSTEMS CORPORATION '
S32M4TIM DC    CL15' '
         DC    CL1' '             BLANK FIELD SEPARATER-83/01/26 BJH
S32M4NOD DC    CL8' '             NODE NAME
         DC    CL4'****'          PADDING TO AVOID TRUNC-83/01/26 BJH
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END04 EQU   *
         SPACE 3
S32MSG05 DC    YL2(S32END05-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)
         $SF   (HI,SKIP)
         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END05 EQU   *
         SPACE 3
S32MSG06 DC    YL2(S32END06-*)
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (MDT)              SETUP WCC
         $SBA  (1,1)              SET BUFFER ADDRESS
         $SF   (PROT)             SET ATTRIBUTE BYTE
         DC    C'BCSC106 LOGON IN PROGRESS'
S32END06 EQU   *
         SPACE 3
S32MSG07 DC    YL2(S32END07-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)            SET BUFFER ADDRESS
         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES
         DC    C'BCSC107          NOT DEFINED TO VTAM'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END07 EQU   *
         SPACE 3
S32MSG08 DC    YL2(S32END08-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)            SET BUFFER ADDRESS
         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES
         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END08 EQU   *
         SPACE 3
S32MSG09 DC    YL2(S32END09-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)            SET BUFFER ADDRESS
         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES
         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END09 EQU   *
         SPACE 3
S32MSG10 DC    YL2(S32END10-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)            SET BUFFER ADDRESS
         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES
         DC    C'BCSC110          NEVER ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END10 EQU   *
         SPACE 3
S32MSG11 DC    YL2(S32END11-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,16)            SET BUFFER ADDRESS
         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES
         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S32END11 EQU   *
         SPACE 3
S32MSG12 DC    YL2(S32END12-*)
***********************************************************************
*                                                                     *
*        FULLSCREEN MSG FOR 3275/3277                                 *
*                                                                     *
***********************************************************************
         SPACE
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (RESETKBD,MDT)     SET WCC CODE
         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER
         $SF   (SKIP)
S32NSNAM DC    0H'0'
*                                 ROW # 02
         $SBA  (2,12)
         $RA   (2,25,C'B')
         $SBA  (2,29)
         $RA   (2,44,C'C')
         DC    C'  '
         $RA   (2,61,C'S')
         DC    C'  '
         $RA   (2,78,C'C')
*                                 ROW # 03
         $SBA  (3,11)
         $RA   (3,24,C'B')
         $SBA  (3,28)
         $RA   (3,43,C'C')
         DC    C'  '
         $RA   (3,60,C'S')
         DC    C'  '
         $RA   (3,77,C'C')
*                                 ROW # 04
         $SBA  (4,10)
         $RA   (4,16,C'B')
         $SBA  (4,21)
         DC    C'BB'
         $SBA  (4,27)
         $RA   (4,33,C'C')
         $SBA  (4,40)
         DC    C'CC  SS'
         $SBA  (4,57)
         DC    C'SS  '
         $RA   (4,67,C'C')
         $SBA  (4,74)
         DC    C'CC'
*                                 ROW # 05
         $SBA  (5,09)
         $RA   (5,15,C'B')
         $SBA  (5,20)
         DC    C'BB'
         $SBA  (5,26)
         $RA   (5,32,C'C')
         $SBA  (5,43)
         DC    C'SS'
         $SBA  (5,60)
         $RA   (5,66,C'C')
*                                 ROW # 06
         $SBA  (6,08)
         $RA   (6,21,C'B')
         $SBA  (6,25)
         $RA   (6,31,C'C')
         $SBA  (6,42)
         $RA   (6,57,C'S')
         DC    C'  '
         $RA   (6,65,C'C')
*                                 ROW # 07
         $SBA  (7,07)
         $RA   (7,22,C'B')
         DC    C'  '
         $RA   (7,32,C'C')
         $SBA  (7,41)
         $RA   (7,56,C'S')
         DC    C'  '
         $RA   (7,66,C'C')
*                                 ROW # 08
         $SBA  (8,06)
         $RA   (8,14,C'B')
         $SBA  (8,19)
         DC    C'BB  '
         $RA   (8,31,C'C')
         $SBA  (8,47)
         $RA   (8,55,C'S')
         DC    C'  '
         $RA   (8,65,C'C')
*                                 ROW # 09
         $SBA  (9,05)
         $RA   (9,13,C'B')
         $SBA  (9,18)
         DC    C'BB  '
         $RA   (9,30,C'C')
         $SBA  (9,35)
         DC    C'CC  SS'
         $SBA  (9,46)
         $RA   (9,54,C'S')
         DC    C'  '
         $RA   (9,64,C'C')
         $SBA  (9,69)
         DC    C'CC'
*                                 ROW # 10
         $SBA  (10,04)
         $RA   (10,12,C'B')
         $SBA  (10,17)
         DC    C'BB  '
         $RA   (10,29,C'C')
         $SBA  (10,34)
         DC    C'CC  SS'
         $SBA  (10,45)
         $RA   (10,53,C'S')
         DC    C'  '
         $RA   (10,63,C'C')
         $SBA  (10,68)
         DC    C'CC'
*                                 ROW # 11
         $SBA  (11,03)
         $RA   (11,18,C'B')
         DC    C'  '
         $RA   (11,35,C'C')
         DC    C'  '
         $RA   (11,52,C'S')
         DC    C'  '
         $RA   (11,69,C'C')
*                                 ROW # 12
         $SBA  (12,02)
         $RA   (12,17,C'B')
         DC    C'  '
         $RA   (12,34,C'C')
         DC    C'  '
         $RA   (12,51,C'S')
         DC    C'  '
         $RA   (12,68,C'C')
         $SBA  (14,20)
S32NSCOM DC    C'BRITISH COLUMBIA SYSTEMS CORPORATION'
         EJECT
***********************************************************************
*                                                                     *
*        TIME AND DATE STAMP                                          *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (14,63)
         DC    C'TERM:'           TELL 'EM IT THE NODE NAME
S32TERM  DC    CL13' '            TERM NAME
         $SBA  (15,68)
S32MDL   DC    CL7'MODEL  '       TERMINAL MODEL NUMBER
         $SBA  (15,30)
S32TIME  DC    CL15' '            TIME STAMP
         EJECT
***********************************************************************
*                                                                     *
*        PF KEY SELECTION MENU                                        *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (17,3)
         DC    C'PFK APPL         ENTER     EXIT'
         $SBA  (19,3)
         DC    C'    TSO          LOGON     LOGOFF'
         $SBA  (20,3)
         DC    C' 2  IMS/VS       IMS       /RCL'
         $SBA  (21,3)
         DC    C' 3  WYLBUR       WYLBUR    LOGOFF'
         $SBA  (17,43)
         DC    C'PFK APPL         ENTER     EXIT'
         $SBA  (19,43)
         DC    C' 4  TEST IMS/VS  IMSTEST   /RCL'
         $SBA  (20,43)
         DC    C' 5  VSPC         VSPC      OFF'
         $SBA  (21,43)
         DC    C' 6  ICBC IMS/VS  IIMS      /RCL'
         EJECT
***********************************************************************
*                                                                     *
*        LOGON INPUT AREA                                             *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (22,80)
         $SF   (UNPROT)            SF,ATT(UNPROTECT)
         $IC
         $SBA  (24,1)              DEFINE END OF INPUT FIELD
         $SF   (SKIP)
S32END12 EQU   *
S32SIZ12 EQU   S32END12-S32MSG12   CALCULATE SIZE OF MSG 12
         SPACE 3
S32MSG13 DC    YL2(S32END13-*)
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (MDT)              SETUP WCC
         $SBA  (1,1)              SET BUFFER ADDRESS
         $SF   (PROT)             SET ATTRIBUTE BYTE
         DC    C'BCSC113 SCREEN SIZE SET TO 960 PLEASE CORRECT'
S32END13 EQU   *
         TITLE '*********  N E T S O L  -  MESSAGES FOR EXTENDED FUNCTIX
               ON 3270'
***********************************************************************
*        MESSAGE TEXTS                                                *
***********************************************************************
         SPACE 3
         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS
         SPACE 3
S3EMSG01 DC    YL2(S3EEND01-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND01 EQU   *
         SPACE 3
S3EMSG02 DC    YL2(S3EEND02-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND02 EQU   *
         SPACE 3
S3EMSG03 DC    YL2(S3EEND03-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND03 EQU   *
         SPACE 3
S3EMSG04 DC    YL2(S3EEND04-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             MOVE CURSOR
         $IC                        TO START OF INPUT BUFFER
         $SBA  (24,12)
         $SFE  ATTR=SKIP,COL=RED
S3EM4OF  DC    CL60' '
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND04 EQU   *
         SPACE 3
S3EMSG05 DC    YL2(S3EEND05-*)
         $IO   WRITE
         $WCC  (ALARM,RESETKBD,MDT)
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND05 EQU   *
         SPACE 3
S3EMSG06 DC    YL2(S3EEND06-*)
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (MDT)              SETUP WCC
         $SBA  (1,1)              SET BUFFER ADDRESS
         $SFE  ATTR=PROT,COL=GREEN
         DC    C'BCSC106 LOGON IN PROGRESS'
S3EEND06 EQU   *
         SPACE 3
S3EMSG07 DC    YL2(S3EEND07-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)            SET BUFFER ADDRESS
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC107          NOT DEFINED TO VTAM'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND07 EQU   *
         SPACE 3
S3EMSG08 DC    YL2(S3EEND08-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)            SET BUFFER ADDRESS
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND08 EQU   *
         SPACE 3
S3EMSG09 DC    YL2(S3EEND09-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)            SET BUFFER ADDRESS
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND09 EQU   *
         SPACE 3
S3EMSG10 DC    YL2(S3EEND10-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)            SET BUFFER ADDRESS
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC110          NEVER ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND10 EQU   *
         SPACE 3
S3EMSG11 DC    YL2(S3EEND11-*)
         $IO   WRITE              SET 3270 COMMAND CODE
         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE
         $SBA  (23,1)             CLEAR
         $IC                        OLD
         $RA   (23,80,X'00')          INPUT BUFFER
         $SBA  (24,12)            SET BUFFER ADDRESS
         $SFE  ATTR=SKIP,COL=RED
         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'
         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER
S3EEND11 EQU   *
         SPACE 3
S3EMSG12 DC    YL2(S3EEND12-*)
***********************************************************************
*                                                                     *
*        FULLSCREEN MSG FOR EXTENDED FUNCTION 3270                    *
*                                                                     *
***********************************************************************
         SPACE
         $IO   ERASE/WRITE
         $WCC  (RESETKBD,MDT)
         $SBA  (1,1)              ADDRESS 1ST BYTE ON SCREEN
         $SF   (PROT)             MARK IT PROTECTED
         $SBA  (2,1)
         $SFE  ATTR=SKIP,COL=GREEN
S3ENSNAM DC    0H'0'
*                                 ROW # 02
         $SBA  (2,12)
         $RA   (2,25,C'B')
         $SBA  (2,29)
         $RA   (2,44,C'C')
         DC    C'  '
         $RA   (2,61,C'S')
         DC    C'  '
         $RA   (2,78,C'C')
*                                 ROW # 03
         $SBA  (3,11)
         $RA   (3,24,C'B')
         $SBA  (3,28)
         $RA   (3,43,C'C')
         DC    C'  '
         $RA   (3,60,C'S')
         DC    C'  '
         $RA   (3,77,C'C')
*                                 ROW # 04
         $SBA  (4,10)
         $RA   (4,16,C'B')
         $SBA  (4,21)
         DC    C'BB'
         $SBA  (4,27)
         $RA   (4,33,C'C')
         $SBA  (4,40)
         DC    C'CC  SS'
         $SBA  (4,57)
         DC    C'SS  '
         $RA   (4,67,C'C')
         $SBA  (4,74)
         DC    C'CC'
*                                 ROW # 05
         $SBA  (5,09)
         $RA   (5,15,C'B')
         $SBA  (5,20)
         DC    C'BB'
         $SBA  (5,26)
         $RA   (5,32,C'C')
         $SBA  (5,43)
         DC    C'SS'
         $SBA  (5,60)
         $RA   (5,66,C'C')
*                                 ROW # 06
         $SBA  (6,08)
         $RA   (6,21,C'B')
         $SBA  (6,25)
         $RA   (6,31,C'C')
         $SBA  (6,42)
         $RA   (6,57,C'S')
         DC    C'  '
         $RA   (6,65,C'C')
*                                 ROW # 07
         $SBA  (7,07)
         $RA   (7,22,C'B')
         DC    C'  '
         $RA   (7,32,C'C')
         $SBA  (7,40)
         $RA   (7,56,C'S')
         DC    C'  '
         $RA   (7,66,C'C')
*                                 ROW # 08
         $SBA  (8,06)
         $RA   (8,14,C'B')
         $SBA  (8,19)
         DC    C'BB  '
         $RA   (8,31,C'C')
         $SBA  (8,47)
         $RA   (8,55,C'S')
         DC    C'  '
         $RA   (8,65,C'C')
*                                 ROW # 09
         $SBA  (9,05)
         $RA   (9,13,C'B')
         $SBA  (9,18)
         DC    C'BB  '
         $RA   (9,30,C'C')
         $SBA  (9,35)
         DC    C'CC  SS'
         $SBA  (9,46)
         $RA   (9,54,C'S')
         DC    C'  '
         $RA   (9,64,C'C')
         $SBA  (9,69)
         DC    C'CC'
*                                 ROW # 10
         $SBA  (10,04)
         $RA   (10,12,C'B')
         $SBA  (10,17)
         DC    C'BB  '
         $RA   (10,29,C'C')
         $SBA  (10,34)
         DC    C'CC  SS'
         $SBA  (10,45)
         $RA   (10,53,C'S')
         DC    C'  '
         $RA   (10,63,C'C')
         $SBA  (10,68)
         DC    C'CC'
*                                 ROW # 11
         $SBA  (11,03)
         $RA   (11,18,C'B')
         DC    C'  '
         $RA   (11,35,C'C')
         DC    C'  '
         $RA   (11,52,C'S')
         DC    C'  '
         $RA   (11,69,C'C')
*                                 ROW # 12
         $SBA  (12,02)
         $RA   (12,17,C'B')
         DC    C'  '
         $RA   (12,34,C'C')
         DC    C'  '
         $RA   (12,51,C'S')
         DC    C'  '
         $RA   (12,68,C'C')
         $SBA  (14,20)
S3ENSCOM DC    C'BRITISH COLUMBIA SYSTEMS CORPORATION'
         EJECT
***********************************************************************
*                                                                     *
*        TIME AND DATE STAMP                                          *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (14,65)
         $SFE  ATTR=SKIP,COL=RED
         DC    C'TERM: '          TELL 'EM IT THE NODE NAME
         $SBA  (14,71)
         $SFE  ATTR=PROT,XHL=BLINK,COL=RED
S3ETERM  DC    CL13' '            TERM NAME
         $SBA  (15,1)             DEFINE END OF FIELD TO RESET BLINKING
         $SFE  ATTR=SKIP
         $SBA  (15,72)
S3EMDL   DC    CL7'MODEL  '       TERM MODEL NUMBER
         $SBA  (15,30)
         $SFE  ATTR=SKIP,COL=GREEN
S3ETIME  DC    CL15' '            TIME STAMP
         EJECT
***********************************************************************
*                                                                     *
*        PF KEY SELECTION MENU                                        *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (17,3)
         $SFE  ATTR=SKIP,COL=GREEN
         DC    C'PFK APPL         ENTER     EXIT'
         $SBA  (19,3)
         $SFE  ATTR=SKIP,COL=YELLOW
         DC    C'    TSO          LOGON     LOGOFF'
         $SBA  (20,3)
         $SFE  ATTR=SKIP,COL=PINK
         DC    C' 2  IMS/VS       IMS       /RCL'
         $SBA  (21,3)
         $SFE  ATTR=SKIP,COL=TURQ
         DC    C' 3  WYLBUR       WYLBUR    LOGOFF'
         $SBA  (17,43)
         $SFE  ATTR=SKIP,COL=GREEN
         DC    C'PFK APPL         ENTER     EXIT'
         $SBA  (19,43)
         $SFE  ATTR=SKIP,COL=YELLOW
         DC    C' 4  TEST IMS/VS  IMSTEST   /RCL'
         $SBA  (20,43)
         $SFE  ATTR=SKIP,COL=PINK
         DC    C' 5  VSPC         VSPC      OFF'
         $SBA  (21,43)
         $SFE  ATTR=SKIP,COL=TURQ
         DC    C' 6  ICBC IMS/VS  IIMS      /RCL'
         EJECT
***********************************************************************
*                                                                     *
*        LOGON INPUT AREA                                             *
*                                                                     *
***********************************************************************
         SPACE
         $SBA  (22,80)
         $SFE  ATTR=UNPROT,COL=WHITE
         $IC
         $SBA  (24,1)
         $SFE  ATTR=SKIP          END OF INPUT FIELD
S3EEND12 EQU   *
S3ESIZ12 EQU   S3EEND12-S3EMSG12
         SPACE 3
S3EMSG13 DC    YL2(S3EEND13-*)
         $IO   ERASE/WRITE        SET 3270 COMMAND CODE
         $WCC  (MDT)              SETUP WCC
         $SBA  (1,1)              SET BUFFER ADDRESS
         $SFE  ATTR=PROT,COL=GREEN
         DC    C'BCSC113 PRESS ENTER FOR LOGO'
S3EEND13 EQU   *
         TITLE '*********  N E T S O L  -  MESSAGES FOR 3767'
***********************************************************************
*        MESSAGE TEXTS                                                *
***********************************************************************
         SPACE 3
S37MSG01 DC    YL2(S37END01-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END01 EQU   *
         SPACE 3
S37MSG02 DC    YL2(S37END02-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END02 EQU   *
         SPACE 3
S37MSG03 DC    YL2(S37END03-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END03 EQU   *
         SPACE 3
S37MSG04 DC    YL2(S37END04-*)
         DC    X'15'              CARRIAGE RETURN
S37M4OF  DC    CL60' '
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END04 EQU   *
         SPACE 3
S37MSG05 DC    YL2(S37END05-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END05 EQU   *
         SPACE 3
S37MSG06 DC    YL2(S37END06-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC106 LOGON IN PROGRESS'
         DC    X'15'              CARRIAGE RETURN
S37END06 EQU   *
         SPACE 3
S37MSG07 DC    YL2(S37END07-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC107          NOT DEFINED TO VTAM'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END07 EQU   *
         SPACE 3
S37MSG08 DC    YL2(S37END08-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END08 EQU   *
         SPACE 3
S37MSG09 DC    YL2(S37END09-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END09 EQU   *
         SPACE 3
S37MSG10 DC    YL2(S37END10-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC110          NEVER ACCEPTING LOGONS'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END10 EQU   *
         SPACE 3
S37MSG11 DC    YL2(S37END11-*)
         DC    X'15'              CARRIAGE RETURN
         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'
         DC    X'15'              CARRIAGE RETURN
         DC    C'ENTER ? '        PROMPT FOR INPUT
S37END11 EQU   *
         SPACE 3
S37MSG12 DC    YL2(S37END12-*)
         DC    XL2'1515'          DOUBLE CARRIAGE RETURN
S37NSCOM EQU   *
S37NSNAM DC    C'B.C. SYSTEMS CORPORATION'
***********************************************************************
*                                                                     *
*        TIME AND DATE STAMP                                          *
*                                                                     *
***********************************************************************
         SPACE
         DC    C'   TERM:'        TERM KEYWORD
S37TERM  DC    CL8' '             TERM NAME
         DC    CL3' '             FILLER
S37TIME  DC    CL15' '            TIME STAMP
         DC    XL2'1515'          CARRIAGE RETURN
***********************************************************************
*                                                                     *
*        APPLICATION SELECTION MENU                                   *
*                                                                     *
***********************************************************************
         SPACE
         DC    C'  APPLICATION  ENTER         EXIT'
         DC    X'15'
         DC    X'15'
         DC    C'  TSO          LOGON         LOGOFF'
         DC    X'15'
         DC    C'  IMS          IMS           /RCL'
         DC    X'15'
         DC    C'  TEST IMS     IMSTEST       /RCL'
         DC    X'15'
***********************************************************************
*                                                                     *
*        PROMPT FOR INPUT                                             *
*                                                                     *
***********************************************************************
         DC    C'ENTER ? '
S37END12 EQU   *
S37SIZ12 EQU   S37END12-S37MSG12
         SPACE 3
S37MSG13 DC    YL2(S37END13-*)
         DC    C'BCSC113 PRESS ENTER FOR LOGO'
         DC    X'15'              CARRIAGE RETURN
S37END13 EQU   *
         TITLE '*********  N E T S O L  -  MESSAGES FOR SYSIN'
***********************************************************************
*        MESSAGE TEXTS                                                *
***********************************************************************
         SPACE 3
SINMSG00 DC    YL2(SINEND00-*)
         DC    C'UNSUPPORTED MESSAGE FOR SYSIN CMDS'
SINEND00 EQU   *
         SPACE 3
SINMSG04 DC    YL2(SINEND04-*)
SINM4OF  DC    CL60' '
SINEND04 EQU   *
         SPACE 3
SINMSG07 DC    YL2(SINEND07-*)
         DC    CL60'BCSC107 INVALID COMMAND'
SINEND07 EQU   *
         SPACE 3
         EJECT
         TITLE '*********  N E T S O L  -  R P L   DSECT CONTINUED'
IFGRPLX  DSECT
*        THE FOLLOWING SECTION OF THE WORK AREA IS NOT INITIALIZED BY
*        THE GETRPL FUNCTION SO NO DATA SHOULD BE PLACED IN THAT NEEDS
*        TO BE ZERO AT THE BEGINNING
         SPACE 1
*        THE FOLLOWING MANIPULATION RESERVES A MESSAGE BUFFER FOR
*        THE LARGEST EXISTING MESSAGE.
IOBASE   DS    CL(S32SIZ12)            SPACE FOR 3270 MSG 12
         ORG   IOBASE                  BACK TO START OF BUFFER
         DS    CL(S3ESIZ12)            SPACE FOR 3270 EXTENDED MSG 12
         ORG   IOBASE                  BACK TO START OF BUFFER
         DS    CL(S37SIZ12)            SPACE FOR 3767 MSG 12
         ORG   IOBASE                  BACK TO START OF BUFFER
         ORG   ,                       GO TO END OF BUFFER
LMSG12   EQU   *-IOBASE                CALC MAX MSG 12 SIZE
         ORG   IOBASE BACK TO START OF BUFFER
IOAREA   DS    CL(LMSG12)              FOR MSG OUTPUT / INPUT FROM LU
         ORG   IOAREA+80               ORG OVER SYSIN BUFFER
NODENAME DS    CL8                     TEMP NODE NAME STORAGE
DLOGAPPL DS    CL8                     TEMP APPLID STORAGE
TTEDUMMY DS    CL(TERMELEN)            DUMMY TTE USED BY SYSIN CMDS
SESSPARM DS    XL120                   INQUIRE(SESSPARM) WORK AREA
*                                      MAX SIZE ENCOUNTERED IS 88
         ORG   ,                       ORG BACK TO END OF BUFFER
*        OUTPUT BUFFER DEFINITION COMPLETE.
DATASEQ  DS    CL256                   TRANSLATED DATA SEQUENC DC18203
ENDSECT  DS    0D                      END DSECT ON D-WORD
LNIFGRPL EQU   WORKSPAC-STSECT         LENGTH OF ONE RPL AREA
IOBUFLEN EQU   ENDSECT-IOAREA          LENGTH OF THE IOAREA
*                                      WITHOUT THE WORKAREA
         END
