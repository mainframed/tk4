         TITLE '<ZSORTZ>  IN CORE SORT - AUTHOR UNKNOWN'
ZSORTZ   CSECT
***********************************************************************
*              ******* SORT SUBROUTINE *******                        *
***********************************************************************
*                                                                     *
***********************************************************************
*              SORT ROUTINE RESTRICTIONS                              *
*                                                                     *
*        SORTING IS DONE IN CHARACTER MODE.                           *
*        SEQUENCE OF ASCENDING OF DESCENDING IS OPTIONAL.             *
*        MAXIMUM RECORD SIZE, WITHOUT MODIFICATION, IS 200 BYTES.     *
*        STANDARD O.S. LINKAGE MUST BE USED.                          *
*        THE ADCON LIST MAY BE GREATER THAN 5 IF MULTI-FIELD          *
*             SORTING OPTION IS USED.                                 *
*        ADCON LIST MUST HAVE POINTERS TO THE FOLLOWING VALUES.       *
*        VALUES POINTED TO MUST BE IN THE FORMS SHOWN BELOW.          *
*        DUMMY VALUES ARE SHOWN FOR EACH ARGUMENT.                    *
*                                                                     *
*        DC    A(TABLELOC)         TABLES LOCATION IN ADCON           *
*                                                                     *
*        DC    H'200'              NUMBER OF RECORDS IN TABLE         *
*                                                                     *
*        DC    H'50'               LENGTH OF RECORDS IN TABLE         *
*                                                                     *
*        DC    H'20'               START SORTING IN BYTE X            *
*                                    (START COUNTING WITH 1)          *
* (OPT)  DC    C'A'                ASCENDING SEQUENCE                 *
*                                                                     *
*        DC    H'10'               SORT FOR X BYTES                   *
*                                                                     *
***********************************************************************
*              SAMPLE COBOL LINKAGE                                   *
*        CALL 'ZSORTZ' USING ARRAY, COUNT, LRECL, START-IN, FOR.      *
*              WHERE...                                               *
*        ARRAY IS THE DATA-NAME OF THE 01 LEVEL OF THE TABLE.         *
*        COUNT, A BINARY HALF WORD CONTAINING THE TOTAL RECORDS       *
*              IN THE TABLE TO BE SORTED.                             *
*        LRECL, A BINARY HALF WORD CONTAINING THE LOGICAL RECORD      *
*              LENGTH.                                                *
*        START-IN, THE FIRST BYTE TO BE SORTED (LEFT MOST, RELATIVE   *
*              TO ONE, CONTAINED IN BINARY HALF WORD).                *
*        FOR, THE NUMBER OF BYTES TO BE SORTED IN THE FIELD, RELATIVE *
*              TO ONE, IN A BINARY HALF WORD.                         *
* OPTIONAL                                                            *
*        SEQ, THE DESIRED SEQUENCE, A SINGLE CHARACTER, EITHER AN A   *
*              OR D. A MISSING SEQUENCE PARAMETER WILL DEFAULT TO     *
*              ASCENDING.                                             *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        MULTIPLE FIELD SORTING...                                    *
*                                                                     *
*        ADDITIONAL PASSES CAN BE ACCOMPLISHED BY ADDING ON MORE      *
*              START-IN AND FOR PARAMETERS.                           *
*                                                                     *
*        FOR EACH START-IN, A FOR ENTRY MUST BE PROVIDED.             *
*        UNBALANCED START-IN AND FOR PARAMETERS WILL EITHER CAUSE THE *
*        SORT TO BE IGNORED OR WILL RETURN UNKNOWN RESULTS IN THE     *
*        DATA TABLE PASSED TO THE ROUTINE.                            *
*        EXAMPLE ON CODING FOR A MULTI-PASS SORT CALL...              *
*                                                                     *
*        ENTER LINKAGE.                                               *
*        CALL 'ZSORTZ' USING ARRAY, COUNT, LRECL, START-IN, FOR,      *
*              START-IN-2, FOR-2, START-IN-3, FOR-3.                  *
*        ENTER COBOL.                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         SAVE  (14,12),,*          SAVE REGS AT ENTRY TIME
         LR    R5,R13              SAVE POINTER TO CALLING SAVE AREA
         BALR  R11,R0
         USING *,R11
         LA    R13,ZREGSAVE        LOAD SAVE AREA OF THIS PROGRAM
         ST    R5,ZREGSAVE+4       SAVE POINTER TO PREVIOUS SAVE AREA
         ST    R13,8(R5)           STORE MY POINTER IN PREVIOUS AREA
         ST    R1,ZPOINTER         SAVE LOCATION OF ARGUMENT POINTER
         L     R5,0(R1)            PICK UP POINTER TO TABLE
         LTR   R5,R5
         BM    ERROR1
         ST    R5,ZTABLOC
         L     R5,4(R1)            PICK UP POINTER TO RECORD COUNT
         LTR   R5,R5
         BM    ERROR2
         LH    R5,0(R5)            PICK UP RECORD COUNT
         CH    R5,=H'1'            IS ONLY 1 RECORD TO BE SORTED
         BNH   ZDONEZ              RETURN CONTROL TO USER
         STH   R5,ZRECNUMB         STORE NUMBER OF RECORDS TO BE SORTED
         STH   R5,ZMULTHLD         HOLD RECORD COUNT FOR MULTI SORTS
         L     R5,8(R1)            PICK UP POINTER TO RECORD SIZE
         LTR   R5,R5
         BM    ERROR3
         LH    R5,0(R5)            PICK UP RECORD SIZE
         STH   R5,ZRECLENG
ZPHASEII L     R5,12(R1)           PICK UP POINTER TO STARTNG SORT BYTE
         LTR   R5,R5
         BM    ERROR4
         LH    R5,0(R5)            PICK UP SORT STARTING BYTE NUMBER
         STH   R5,ZSRTSORT
         L     R5,16(R1)           PICK UP POINTER TO NUMBER OF BYTES
         LTR   R5,R5
         BM    ZSET#1
         OI    ZEXITZ+1,X'F0'      SET FOR NEXT SORT PASS
         B     ZLOADR5
*
ERROR1   ABEND 1,DUMP,STEP         ONLY ONE PARAMETER PASSED
*
ERROR2   ABEND 2,DUMP,STEP         ONLY TWO PARAMETERS PASSED
*
ERROR3   ABEND 3,DUMP,STEP         ONLY THREE PARAMETERS PASSED
*
ERROR4   ABEND 4,DUMP,STEP         ONLY FOUR PARAMETERS PASSED
*
ERROR5   ABEND 5,DUMP,STEP         MULTI-PASS SORT ERROR OR UNKNOWN
*                                  ADDITIONAL PARAMETER FOUND
ZSET#1   NI    ZEXITZ+1,X'0F'      SET FOR LAST PASS
ZLOADR5  LH    R5,0(R5)            PICK UP NUMBER OF BYTES TO BE SORTED
         STH   R5,ZSORTCNT
*        START EDITING OF PARAMETERS FOR SEQUENCE ARGUMENT
*        SEE IF LAST PARAMETER HAS ALREADY BEEN FOUND
         TM    ZEXITZ+1,X'F0'      IF VALID BRANCH, SET SEQ ASCEND,
         BZ    ZSETSEQ1            SET NO SEQ CODE, FORCE ASCENDING
*        OTHER PARAMETERS WERE PASSED. A SEQUENCE PARAMETER MAY OR
*        MAY NOT BE INCLUDED. IS NEXT ONE SEQUENCE...
         L     R5,20(R1)           GET NEXT ADCON
         LTR   R5,R5               IF MINUS, PARM MUST BE SEQ
         BM    ZTESTP1             NOT SIGNED, EDIT TO SEE IF THIS PARM
*                                  IS SEQUENCE OR NEXT PASSES IN PARM.
         CLI   0(R5),C'D'          IS IT DESCENDING
         BE    ZSETSEQD            SET DESCENDING SEQ
         CLI   0(R5),C'A'          IS IT ASCENDING
         BE    ZSETSEQA
*        SINCE A HEX F IN THE LEFT MOST HALF BYTE OF THE NEXT PASSES
*        IN PARAMETER WOULD EXCEED MAX LENGTH, IF ON ASSUME INVALID
*        SEQ CODE.
         TM    0(R5),X'F0'         IF ON, NOT VALID SEQ CODE, ERROR
         BO    ERROR5              SET ERROR 5 CONDITION FOR BAD SEQ
*        OTHERWISE SET CODE SHOWING NO SEQ PARM AND DEFAULT WAS USED
         MVI   ZSEQCODE,C'N'       NO SEQ PARAMETER FOUND
         B     ZSETSEQ1            FORCE ASCENDING
*
*        NOW EDIT FOR ONLY ONE ADDITIONAL PARAMETER.
ZTESTP1  NI    ZEXITZ+1,X'0F'      SET FOR LAST PASS WITH NOPED BRANCH
         CLI   0(R5),C'D'          IF NOT D USE DEFAULT OF ASCENDING
         BE    ZSETSEQ2            DESCENDING SET
         B     ZSETSEQ1            ASCENDING SET
*
ZSETSEQA MVI   ZSEQCODE,C'A'       SET ASCENDING CODE
ZSETSEQ1 NI    ZBRA#1+1,X'0F'      DELETE PREVIOUS
         OI    ZBRA#1+1,X'D0'      SET TO BNH
         NI    ZBRA#2+1,X'0F'      DELETE PREVIOUS
         OI    ZBRA#2+1,X'D0'      SET TO BNH
         B     ZLOADR4
*
ZSETSEQD MVI   ZSEQCODE,C'D'       SET DESCENDING CODE
ZSETSEQ2 NI    ZBRA#1+1,X'0F'      DELETE PREVIOUS
         OI    ZBRA#1+1,X'B0'      SET TO BNL
         NI    ZBRA#2+1,X'0F'      DELETE PREVIOUS
         OI    ZBRA#2+1,X'B0'      SET TO BNL
ZLOADR4  L     R4,=A(ZTABLOC)      SET POINTER AS BASE REG FOR ARGS
         LH    R7,6(R4)            LOAD LOGICAL RECORD LENGTH
         MH    R7,4(R4)            MAX TAB = REC LENGTH * REC COUNT
         SH    R7,6(R4)            LAST REC LOC = MAX TAB - REC LEN
         A     R7,0(R4)            LAST ACTUAL REC LOC = LRL + ADCO
*                                                                     *
         LH    R10,6(R4)           LOGICAL RECORD LENGTH
*                                                                     *
         LH    R8,8(R4)            SORT CONTROL, STARTING BYTE
         LH    R9,10(R4)           SORT CONTROL, LENGTH OF FIELD
         L     R3,0(R4)            ADCON OF SORT TABLE
         ST    R3,ZSRTACON         SAVE ADCON FOR LOW POINT COMPARE
         LR    R5,R3               SAME FACTOR IN XR 5, 6, AND 7
         LR    R6,R3
         LR    R4,R3
*                                                                     *
         BCTR  R8,R0
         AR    R4,R10              BASE + RECORD LENGTH + SRT CTLOC
         AR    R3,R8               XR 3 NOW B1 FOR COMPARING
         AR    R4,R8               XR 4 NOW B2 FOR COMPARING
         AR    R6,R10              XR 6 NOW B2 FOR MOVING
***********************************************************************
*                                  XR 5 NOW B1 FOR MOVING             *
***********************************************************************
         BCTR  R9,R0
         BCTR  R10,R0
***********************************************************************
*                                  MODIFY MOVE AND COMP INSTRUCTION   *
***********************************************************************
         STC   R9,ZCOMP#1+1
         STC   R10,ZSWAP#1+1
         STC   R10,ZSWAP#2+1
         STC   R10,ZSWAP#3+1
         STC   R9,ZCOMP#2+1
         STC   R10,ZSWAP#4+1
         STC   R10,ZSWAP#5+1
         STC   R10,ZSWAP#6+1
         LA    R10,1(R10)          INCREMENT REG 10 BY 1
ZCOMP#1  CLC   0(1,R3),0(R4)       MAIN SORT ROUTINE (MOD)
ZBRA#1   BNH   ZBUMP               MODIFIED FOR DESIRED SEQUENCE
ZSWAP#1  MVC   ZSRTHOLD,0(R6)      MODIFIED FOR LENGTH
ZSWAP#2  MVC   0(0,R6),0(R5)       MODIFIED
ZSWAP#3  MVC   0(0,R5),ZSRTHOLD    SWAP COMPLETE (MODIFIED)
         STM   R3,R6,ZXRSAVE       SAVE BASE REGS FOR MOVE + COMP.
ZSORTLOW C     R5,ZSRTACON         IS THIS THE LOW END OF TABLE.
         BNH   ZRESTOR             YES, GO RESTORE FACTORS
         SR    R3,R10
         SR    R4,R10              DECREMENT MOVE AND SORT FACTOR
         SR    R5,R10              REGISTERS BY LOGICAL RECORD SIZE
         SR    R6,R10
ZCOMP#2  CLC   0(1,R3),0(R4)       SWAP SORT ROUTINE (MOD)
ZBRA#2   BNH   ZRESTOR             MODIFIED FOR DESIRED SEQUENCE
ZSWAP#4  MVC   ZSRTHOLD,0(R6)      MODIFIED FOR LENGTH
ZSWAP#5  MVC   0(0,R6),0(R5)       MODIFIED
ZSWAP#6  MVC   0(0,R5),ZSRTHOLD    MODIFIED
         B     ZSORTLOW            TEST FOR LOW TABLE LIMIT
*
ZRESTOR  LM    R3,R6,ZXRSAVE       RESTORE OLD FACTORS TO BASE REGS
ZBUMP    AR    R3,R10              INCREMENT REGS FOR NEXT PASS
         AR    R4,R10
         AR    R5,R10
         AR    R6,R10
         CR    R7,R5               IS SORT COMPLETE
         BH    ZCOMP#1             CONTINUE WITH SORTING
ZEXITZ   B     ZNXTPASS            NOP/BR SWITCH
ZDONEZ   L     R13,ZREGSAVE+4      START ACTUAL EXIT PROCEDURE
         RETURN (14,12)
*
***********************************************************************
*        ENTER HERE FOR MORE THAN ONE SORT PASS                       *
***********************************************************************
ZNXTPASS L     R1,ZPOINTER         PICK UP POINTER TO LAST SET OF PARMS
         CLI   ZSEQCODE,C'N'       WAS A SEQ PARM FOUND
         BNE   ZUPIT12
         LA    R1,8(R1)            INCREMENT FOR NEXT PARAMETERS
         B     ZSTORE1
*
ZUPIT12  LA    R1,12(R1)           NOW POINTS TO NEXT IN PARM
ZSTORE1  ST    R1,ZPOINTER         SAVE FOR NEXT PASS (IF ANY)
         LH    R5,ZMULTHLD
         STH   R5,ZRECNUMB         RESTORE OLD RECORD COUNT
         B     ZPHASEII            GO FOR NEXT PASS
*
ZSEQCODE DC    C'*'                SEQUENCE CODE
ZMULTHLD DC    H'0'                HOLD AREA FOR MULTIPLE SORTS
ZPOINTER DC    F'0'
ZXRSAVE  DS    4F                  HIGHEST SO FAR FACTORS
ZSRTACON DS    F                   ADCON OF TABLES ADDRESS
ZREGSAVE DS    18F                 SAVE REGS FOR SAVE/RETURN MACRO
***********************************************************************
*              FOLLOWING CONSTANT AREAS MUST BE IN A SPECIAL ORDER.
ZTABLOC  DC    F'0'                LOCATION OF TABLE TO BE SORTED.
ZRECNUMB DC    H'0'                NUMBER OF RECORDS TO BE SORTED
ZRECLENG DC    H'0'                SAVE AREA FOR RECORD LENGTH
ZSRTSORT DC    H'0'                SAVE AREA FOR SORT STARTING BYTE NBR
ZSORTCNT DC    H'0'                NUMBER OF BYTES TO BE SORTED
         LTORG
***********************************************************************
ZSRTHOLD DS    200H                SORT SWAP AREA
***********************************************************************
*              END OF SORT SUBROUTINE                                 *
***********************************************************************
         END
