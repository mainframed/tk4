BLDLBLDR TITLE 'RESIDENT BLDL LIST BUILDER'
***********************************************************************
*                                                                     *
*  PURPOSE:  TO CONSTRUCT A LIST SUITABLE FOR PLACEMENT IN A          *
*            IEABLDXX MEMBER IN SYS1.PARMLIB, BASED ON DATA           *
*            DERIVED FROM ANALYSIS OF GTF TRACE BLDL (SVC 18)         *
*            ENTRIES.                                                 *
*                                                                     *
*  INPUT:    THE FOLLOWING INPUT FILES ARE REQUIRED:                  *
*            BLDLMEMS - CONTAINS CARD IMAGES CONSISTING OF A          *
*                       PROGRAM NAME IN COLUMNS 1 TO 8 FOLLOWED       *
*                       BY A 5-DIGIT USE COUNT IN COLUMNS 10-15.      *
*                       THIS FILE MUST BE SORTED IN DESCENDING        *
*                       ORDER BY USE COUNT.                           *
*            LPALIB   - POINTS TO SYS1.LPALIB.  THE PROGRAM WILL      *
*                       ISSUE A BLDL AQAINST THIS FILE TO VERIFY      *
*                       THAT IT IS NOT PRESENT ON LPALIB.  PROGRAMS   *
*                       WHICH ARE LOCATED ON LPALIB WILL NOT HAVE     *
*                       THEIR NAMES ENTERED IN A RESIDENT BLDL LIST.  *
*            LINKLIB  - POINTS TO A CONCATENATION OF DATASETS WHICH   *
*                       INCLUDES SYS1.LINKLIB AND ALL DATASETS        *
*                       CONCATENATED TO IT VIA LNKLSTXX PARMLIB       *
*                       ENTRIES WHICH WILL NOT BE MODIFIED BETWEEN    *
*                       IPLS.  PROGRAMS FOUND ON ANY OF THESE         *
*                       LIBRARIES WILL BE CANDIDATES FOR THE          *
*                       RESIDENT BLDL LIST TO BE BUILT.  IF A         *
*                       PROGRAM NAMED IN THE RESIDENT BLDL LIST IS    *
*                       REPLACED, AN IPL MUST BE PERFORMED BEFORE     *
*                       THE NEW VERSION OF THE PROGRAM WILL BE USED.  *
*                       SIMILARLY, NONE OF THE LNKLSTXX LIBRARIES     *
*                       WHOSE MEMBERS APPEAR IN THE RESIDENT BLDL     *
*                       LIST MAY BE COMPRESSED, EXCEPT AS THE LAST    *
*                       STEP PRIOR TO AN IPL.                         *
*                                                                     *
*  OUTPUT:   THE FOLLOWING OUTPUT FILES ARE CREATED:                  *
*            SYSPRINT - A LISTING OF PROGRAM NAMES PLACED IN THE      *
*                       RESIDENT BLDL LIST.                           *
*            SYSPUNCH - A CARD IMAGE FILE IN THE CORRECT SYNTAX FOR   *
*                       PLACEMENT IN SYS1.PARMLIB AS AN IEABLDXX      *
*                       MEMBER.                                       *
*            MEMLIST  - A FILE CONTAINING THE MEMBER NAME DATA AS IT  *
*                       APPEARS IN THE MEMORY-RESIDENT TABLE,         *
*                       CONSISTING OF:  MEMBER NAME (8 CHARS),        *
*                       CONCATENATION NO. (1 BYTE BINARY), USE        *
*                       COUNT (3 BYTES BINARY).  THIS FILE IS         *
*                       ANALYZED BY SAS TO DETERMINE THE BEST         *
*                       ORDER FOR THE LINKLIST LIBRARY CONCATENATION. *
*                                                                     *
*  EXEC PARM FIELD:  A NUMERIC VALUE MAY BE SUPPLIED AS AN EXEC       *
*                    PARM.  THIS PARM VALUE WILL SET THE MAXIMUM      *
*                    NUMBER OF PAGES TO BE OCCUPIED BY THE RESIDENT   *
*                    BLDL LIST BEING CONSTRUCTED.                     *
*                                                                     *
*  AUTHOR:  P. A. FOSTER                                              *
*                                                                     *
***********************************************************************
         PRINT OFF
         MACRO
&NAME    SAVEX &REGS,&T,&ID,&USING=,&DROP=,&SA=
         LCLC  &U,&D,&S,&R(16)
         LCLA  &N,&I,&K
&NAME    SAVE  &REGS,&T,&ID
         AIF   (T'&DROP EQ 'O').CKUSING
         AIF   ('&DROP'(1,1) EQ '(').DRLIST
&D       SETC  '&DROP'
         AGO   .DROP
.DRLIST  ANOP
&K       SETA  K'&DROP-2
&D       SETC  '&DROP'(2,&K)
.DROP    DROP  &D
.CKUSING ANOP
         AIF   (T'&USING EQ 'O').CKSA
&N       SETA  1
.USLOOP  ANOP
&R(&N)   SETC  '&USING(&N)'
         AIF   (&N EQ N'&USING).USEXIT
&N       SETA  &N+1
         AGO   .USLOOP
.USEXIT  ANOP
         LR    &R(1),15            SET BASE REGISTER TO EP ADDRESS
&U       SETC  '&NAME'
         AIF   ('&U' NE '').NAMEOK
&U       SETC  '&SYSECT'
.NAMEOK  AIF   (&N GT 1).USLIST
         USING &U,&R(1)            SET UP ADDRESSABILITY
         AGO   .CKSA
.USLIST  ANOP
&K       SETA  K'&USING-2
&U       SETC  '&U'.','.'&USING'(2,&K)
         USING &U                  SET UP ADDRESSABILITY
&I       SETA  2
.USLOOP2 AIF   (&I GT &N).USEXIT2
         LA    &R(&I),2048         SET UP
         LA    &R(&I),2048(&R(&I),&R(&I-1)) BASE REGISTER &I
&I       SETA  &I+1
         AGO   .USLOOP2
.USEXIT2 ANOP
.CKSA    AIF   (T'&SA EQ 'O').MEND
         ST    13,&SA(1)+4         CHAIN OLD SAVE AREA TO NEW
         MVC   8(4,13),=A(&SA(1))  CHAIN NEW SAVE AREA TO OLD
         AIF   ('&SA(2)' EQ '*').GENSA
         LA    13,&SA(1)           LOAD REG 13 WITH NEW SAVE AREA
         AGO   .MEND
.GENSA   CNOP  0,4                 ALIGN TO A FULLWORD BOUNDARRY
         BAL   13,*+4+(18*4)       BRANCH AROUND SAVE AREA
&SA(1)   DC    18F'0'
.MEND    MEND
         MACRO
         REGEQU
         LCLA  &N
         SPACE 3
.LOOP    ANOP
R&N      EQU   &N
&N       SETA  &N+1
         AIF   (&N LT 16).LOOP
         SPACE 3
         MEND
         MACRO
         QKSRT1 &NAME,&TYPE,&LENGTH=0,&STRTKY=1,&KYLGTH=0,&ORDER=A,    X
               &EXTRA=0,&OVRTYP=NONE,&DISP=1,&INLINE=NO
***********************************************************************
*** QUICKERSORT MACRO-SUBROUTINE: BASED ON CACM ALGORITHM NUMBER 271  *
*** THE FOLLOWING CHANGES AND ADDITIONS WERE MADE:                    *
*** 1.  CALCULATION OF P AS P:=(I+J)/2 WAS CHANGED TO: P:=I+(J-I)/2   *
*** 2.  THE LINE 'FOR Q:=Q STEP -1 UNTIL K DO' WAS CHANGED TO:        *
***        'FOR Q:=Q STEP -1 UNTIL K+1 DO'                            *
*** 3.  OPTION: CORRESPONDING ELEMENTS IN UP TO FIVE EXTRA ARRAYS MAY *
***        BE EXCHANGED, WHEN ELEMENTS IN THE SORTED ARRAY ARE        *
***        EXCHANGED.  EACH EXTRA ARRAY MUST CONTAIN THE SAME NUMBER  *
***        OF ELEMENTS, AND HAVE ELEMENT SIZES EQUAL TO THOSE OF THE  *
***        SORTED ARRAY.                                              *
*** 4.  OPTION: WITH 'TYPE' SET TO 'C' (CHARACTER FORMAT) OTHER TYPES *
***        OF COMPARES MAY BE MADE BY SPECIFYING ONE OR TWO           *
***        OVERRIDING PARAMETERS.                                     *
*** 5.  OPTION: IN LINE CODE MAY BE GENERATED, IF DESIRED, BY         *
***        SPECIFYING INLINE=YES.  A DUMMY PROGRAM NAME IS STILL      *
***        REQUIRED.  REGISTERS WILL BE SAVED IN A SPECIAL SAVEAREA.  *
***********************************************************************
.**********************************************************************
.*           EXPLANATION OF KEYWORD AND POSITONAL OPERANDS:           *
.*                                                                    *
.* 1. NAME (POSITIONAL): THE SUBROUTINE MUST BE NAMED ARBITRARILY     *
.*    (ONE TO SIX CHARACTERS MAXIMUM) BY THE USER. FORTRAN OR COBOL   *
.*    RULES MUST BE FOLLOWED IN CHOOSING A NAME.                      *
.* 2. TYPE (POSITIONAL): THE TYPE OF VARIABLES TO BE SORTED MUST BE   *
.*    CONVEYED TO THE MACRO.  ADMISSIBLE VALUES ARE: P=PACKED;        *
.*    C=CHARACTER OR ALPHANUMERICS (= A-FORMAT VARIABLES); H=HALFWORD *
.*    INTEGERS (=INTEGER*2); F=FULLWORD (=INTEGER*4); E=SINGLE        *
.*    PRECISION FLOATING POINT (=REAL*4); D=DOUBLE PRECISION FLOATING *
.*    POINT (=REAL*8).                                                *
.* 3. LENGTH (KEYWORD): THE LENGTH IN BYTES OF THE FIELDS OF TYPES P  *
.*    AND C MUST BE SPECIFIED.  THE LENGTH MUST BE LESS THAN 256      *
.*    BYTES FOR C OR 16 BYTES FOR P.                                  *
.* 4. STRTKY (KEYWORD): THE COLUMN THE SORTING KEY BEGINS AT MAY BE   *
.*    CHANGED FROM ITS NULL VALUE OF COLUMN 1.                        *
.* 5. KYLGTH (KEYWORD): THE LENGTH OF THE DESIRED SORTING KEY.  IF    *
.*    KYLGTH IS OMITTED, LENGTH MINUS STRTKY IS THE DEFAULT OPTION.   *
.* 6. ORDER (KEYWORD): THE ORDER OF THE DESIRED SORT. OPTIONS ARE:    *
.*    A=ASCENDING ORDER; D=DESCENDING ORDER. IF ORDER IS NOT          *
.*    SPECIFIED, ASCENDING ORDER IS THE ASSUMED DEFAULT OPTION.       *
.* 7. EXTRA (KEYWORD): THE NUMBER OF ADDITIONAL ARRAYS (RANGE: 0 - 5) *
.*    EXTRA=0 IS THE DEFAULT OPTION.                                  *
.* 8. OVRTYP (KEYWORD): OVRTYP=(D,E,F, OR H) ALLOWS FIXED OR FLOATING *
.*    POINT COMPARES WITHIN LONGER FIELDS.  TYPE MUST EQUAL "C".      *
.* 9. DISP (KEYWORD): WHEN OVRTYP IS SPECIFIED, THIS SPECIFIES THE    *
.*    COLLUMN AT WHICH COMPARISON BEGINS.  DEFAULT IS COLLUMN 1.      *
.*10. INLINE (KEYWORD): INLINE=YES GENERATES IN LINE CODE WITHIN AN   *
.*    ASSEMBLER ROUTINE.  DEFAULT IS A CSECT CALLABLE BY FORTRAN.     *
.**********************************************************************
.*   THE FOLLOWING PARAMETER LIST IS REQUIRED IN THE FORTRAN CALL:    *
.*                                                                    *
.* 1. THE NAME OF THE ARRAY TO BE SORTED.                             *
.* 2. THE NUMBER OF ELEMENTS OF THE ARRAY TO BE SORTED.               *
.* 3. THE NAMES OF "EXTRA" ARRAYS, IF ANY.                            *
.**********************************************************************
.*  SEVERAL EXAMPLES WILL MAKE THE USE OF A MACRO SUBROUTINE CLEAR:   *
.*                                                                    *
.* PROBLEM 1: SORT THE CHARACTER ARRAY CALLED A OF 500 ELEMENTS OF 80 *
.* BYTES EACH ACCORDING TO AN 8 BYTE KEY STARTING IN COLUMN 20.       *
.* SOLUTION:  THE FOLLOWING CARDS ARE NEEDED:                         *
.* // JOB CARD                                                        *
.* // EXEC ASMGC                                                      *
.* //ASM.SYSIN DD *                                                   *
.* (QUICKERSORT MACRO DEFINITION SOURCE CODE IF NOT IN SYSTEM LIBRARY)*
.*          QKRSRT SORT1,C,LENGTH=80,STRTKY=20,KYLGTH=8               *
.*          END                                                       *
.* (COMMENT: THE NAME SORT1 WAS ARBITRARILY CHOSEN. ONLY THE QKRSRT   *
.* AND END CARD NEED APPEAR IF THE MACRO IS IN THE SYSTEM LIBRARY)    *
.* /*                                                                 *
.* // EXEC FORTGCLG                                                   *
.* //FORT.SYSIN DD *                                                  *
.* (FORTRAN DECK WHICH WILL CONTAIN THE FOLLOWING STATEMENT)          *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.*       CALL SORT1(A,500)                                            *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.* /*                                                                 *
.* //GO.SYSIN DD *                                                    *
.* (DATA, IF ANY)                                                     *
.* /*                                                                 *
.*                                                                    *
.* PROBLEM 2: SUPPOSE AN ARRAY OF DOUBLE PRECISION FLOATING POINT     *
.* NUMBERS IS TO BE SORTED.  SUPPOSE THE NAME DBLSRT IS CHOSEN FOR    *
.* THE SUBROUTINE.  THE MACRO PROTOTYPE CARD WOULD THEN READ:         *
.*          QKRSRT DBLSRT,D                                           *
.* HERE THE LENGTH IS IMPLIED TO BE 8 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL DBLSRT(.....)" WOULD APPEAR.                   *
.*                                                                    *
.* PROBLEM 3: SUPPOSE AN ARRAY OF FIXED POINT NUMBERS IS TO BE SORTED.*
.* ALSO TO BE SORTED ELEMENT FOR ELEMENT WITH THE FIRST ARRAY ARE     *
.* THREE ADDITIONAL ARRAYS.  THE MACRO PROTOTYPE WOULD THEN READ:     *
.*          QKRSRT EXSRT,F,EXTRA=3                                    *
.* HERE THE LENGTH IS IMPLIED TO BE 4 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL EXSRT(.., .., .., .., ..)" WOULD APPEAR.       *
.*                                                                    *
.* PROBLEM 4: SUPPOSE A REAL*4 ARRAY WITH DIMENSION ARR(3,100) IS TO  *
.* BE SORTED ON THE SECOND COLLUMN.  THE MACRO PROTOTYPE STATEMENT    *
.* WOULD THEN READ:                                                   *
.*          QKRSRT OVRSRT,C,LENGTH=12,OVRTYP=E,DISP=5                 *
.* HERE SORTING WOULD BE DONE ACCORDING TO THE SECOND COLLUMN.  IN THE*
.* FORTRAN PROGRAM THE STATEMENT "CALL OVRSRT(ARR,100)" WOULD APPEAR. *
.*                                                                    *
.* PROBLEM 5: SUPPOSE AN IN LINE SORT IS DESIRED IN AN ASSEMBLER      *
.* ROUTINE, WITH FIXED POINT COMPARES.  THE MACRO PROTOTYPE WOULD     *
.* THEN READ:                                                         *
.*          QKRSRT XYZ,F,INLINE=YES                                   *
.* HERE THE DUMMY NAME "XYZ" IS NOT GENERATED.  ENTERING THE SORT     *
.* ROUTINE, REGISTER 1 MUST CONTAIN THE ADDRESS OF A PARAMETER LIST   *
.* WITH THE ADDRESSES OF: THE ARRAY TO BE SORTED, THE ARRAY LENGTH    *
.* VARIABLE, AND EXTRA ARRAY ADDRESSES IF ANY.  THE CONTAINING CSECT  *
.* MUST USE R(15) FOR A BASE REGISTER.                                *
.*                                                                    *
.* EFFECTIVELY THE USER PROVIDES A ONE INSTRUCTION ASSEMBLY LANGUAGE  *
.* PROGRAM.  THE USER IS NOW ABLE TO SORT ANYTHING ANY WAY.           *
.**********************************************************************
         LCLA  &STRTKX,&LT2,&SLNGTX,&ZZ,&WW,&XX,&YY,&KYLGTX,&DISPL
         LCLC  &LENGTX,&TYPX,&BRNCH1,&BRNCH2,&QCHK,&REG,&Q
&KYLGTX  SETA  &KYLGTH *               VARIABLE PARAMETERS ARE
&TYPX    SETC  '&TYPE' *               CHANGED TO VARIABLE SYMBOLS
&LENGTX  SETC  '&LENGTH' *             SO THEIR VALUES MAY BE RESET
&STRTKX  SETA  &STRTKY-1
&DISPL   SETA  0
         AIF   ('&OVRTYP' EQ 'NONE').REJ
&DISPL   SETA  &DISP-1
.REJ     AIF   (&EXTRA LE 5).L500
         MNOTE 16,'MORE THAN 5 EXTRA ARRAYS'
         MEXIT
.L500    ANOP
&QCHK    SETC  'G' *                   INDICATES TYPE IS NOT C OR P
&REG     SETC  '7' *                   WORK REG IF TYPE IS NOT C OR P
         AIF   ('&ORDER' EQ 'A').L31 * WHICH ORDER IS DESIRED FOR SORT?
&BRNCH1  SETC  'H' *                   DESCENDING ORDER
&BRNCH2  SETC  'L'
         AGO   .L32
.L31     ANOP *                        ASCENDING ORDER
&BRNCH1  SETC  'L'
&BRNCH2  SETC  'H'
.L32     AIF   (1 LE K'&NAME AND K'&NAME LE 6).L2 * IS NAME OKAY?
         MNOTE 16,'IMPROPER LENGTH FOR SUBROUTINE NAME' * INVALID NAME
         MEXIT *                       STOP EXPANSION
.L2      AIF   ('&TYPE' NE 'F' AND '&TYPE' NE 'E').L3 * TYPE F OR E?
&LENGTX  SETC  '4' *                   IF SO, SET LENGTH TO 4 BYTES
         AIF   ('&TYPE' NE 'F').L4
&TYPX    SETC  ' ' *                   IF TYPE F, SET &TYPX TO BLANK
         AGO   .L4
.L3      AIF   ('&TYPE' NE 'H').L5 *   TYPE H (HALFWORD)?
&LENGTX  SETC  '2' *                   IF SO, SET LENGTH TO 2 BYTES
         AGO   .L4
.L5      AIF   ('&TYPE' NE 'D').L6 *   TYPE D (DOUBLEWORD)?
&LENGTX  SETC  '8' *                   IF SO, SET LENGTH TO 8 BYTES
         AGO   .L4
.L6      AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'P').L7 * TYPE C OR P?
         MNOTE 16,'INVALID TYPE' *     IF ABOVE TYPES NOT SPECIFIED
         MEXIT *                       STOP EXPANSION
.L7      ANOP
&QCHK    SETC  'B' *                   INDICATES TYPE IS C OR P
&REG     SETC  '6' *                   WORK REG IF TYPE IS C OR P
         AIF   ('&LENGTH' NE '0').L1 * LENGTH BLANK FOR TYPE C OR P?
         MNOTE 16,'LENGTH WAS NOT SPECIFIED FOR TYPE P OR C'
         MEXIT *                       IF SO, STOP EXPANSION
.L1      AIF   ('&OVRTYP' EQ 'NONE').M2
&Q       SETC  'B'
         AIF   ('&OVRTYP' NE 'F' AND '&OVRTYP' NE 'E').M5
&YY      SETA  4
         AGO   .M8
.M5      AIF   ('&OVRTYP' NE 'H').M6
&YY      SETA  2
         AGO   .M8
.M6      AIF   ('&OVRTYP' NE 'D').M1
&YY      SETA  8
.M8      ANOP
&Q       SETC  'G'
         AIF   (&DISP+&YY-1 LE &LENGTX).L4
         MNOTE 16,'DISP PLUS OVRTYP LENGTH GREATER THAN LENGTH'
         MEXIT
.M1      MNOTE 16,'INVALID OVRTYP'
         MEXIT
.M2      AIF   (&STRTKX LE &LENGTH).M3
         MNOTE 16,'STRTKY GREATER THAN LENGTH'
         MEXIT
.M3      AIF   (&KYLGTX GT 0).M4
&KYLGTX  SETA  &LENGTH-&STRTKX
.M4      AIF   (&KYLGTX+&STRTKX LE &LENGTX).L4
         MNOTE 16,'KYLGTH PLUS STRTKY GREATER THAN LENGTH'
         MEXIT
.L4      ANOP
&LT2     SETA  &LENGTX*2 *             LENGTH * 2
&SLNGTX  SETA  &LENGTX/2-&LENGTX/8 *   SHIFT POSITIONS = LOG2(LENGTH)
         AIF   ('&QCHK' EQ 'G').L555
         AIF   ('&TYPE' EQ 'C').L551
         AIF   (&LENGTX LE 16).L555
         MNOTE 16,'LENGTH GREATER THAN 16 BYTES FOR DECIMAL'
         MEXIT
.L551    AIF   (&LENGTX LE 256).L555
         MNOTE 16,'LENGTH GREATER THAN 256 BYTES FOR CHARACTER'
         MEXIT
.L555    ANOP
*                                      BEGIN QUICKERSORTING
         AIF   ('&INLINE' EQ 'NO').L543
         STM   14,12,S&SYSNDX
         AGO   .L531
.L543    ANOP
&NAME    CSECT
         STM   14,12,12(13) *          SAVE REGISTERS
         USING &NAME,15 *              SET UP BASE REGISTER
.L531    ST    13,R13&SYSNDX *            STORE POINTER TO SAVEAREA
*                                      (AD(W) MEANS THE ADDRESS OF W)
*                                      THE CONTENTS OF THE REGISTERS
*                                      FOR QUICKERSORT ARE AS FOLLOWS:
*                                       1 - LENGTH
*                                       2 - TMP (TEMP. COMPARE STORAGE)
*                                       4 - T (TEMPORARY COMPARE ITEM)
*                                       5 - M (INDEX FOR LT AND UT)
*                                       8 - Q LOOP DECREMENT = LENGTH
*                                       9 - Q LOOP COMPARAND = AD(A(K))
*                                      10 - K LOOP INCREMENT = LENGTH
*                                      11 - K LOOP COMPARAND = AD(A(Q))
*                                      12 - AD(A(I))
*                                      13 - AD(A(J))
*                                      14 - =F'4' (CONSTANT)
*                                      15 - BASE REGISTER
*                                      0,3,6,7 - WORK REGISTERS
&XX      SETA  3+&EXTRA
         LM    2,&XX,0(1)
         L     3,0(3)
         AIF   (&EXTRA EQ 0).L88
         LR    9,2
         AIF   (&EXTRA GT 1).L94
         LR    10,4
         AGO   .L95
.L94     ANOP
&YY      SETA  9+&EXTRA
         LM    10,&YY,8(1)
.L95     ANOP
&ZZ      SETA  9
&WW      SETA  4
&YY      SETA  &EXTRA
.L90     SR    &ZZ,&WW
&YY      SETA  &YY-1
&ZZ      SETA  &ZZ+1
&WW      SETA  &WW+1
         AIF   (&YY GT 0).L90
         SR    &ZZ,2
         STM   9,&ZZ,DA&SYSNDX
.L88     LA    1,&LENGTX
         SR    2,1
         SR    5,5 *                   M:=1;
         LA    14,4
         LR    10,1
         LCR   8,1
         LR    13,3
         MR    12,1
         LR    12,1 *                  I:=1;
         AR    12,2
         AR    13,2
         AIF   ('&QCHK' EQ 'G').L1000
         LA    2,TMP&SYSNDX
.L1000   ANOP
N&SYSNDX LR    &REG,13 *               N: IF J-I > 1 THEN
         SR    &REG,12
         SR    &REG,1
         BNP   L3E&SYSNDX
*                                      BEGIN COMMENT;
         AR    &REG,1 *                   P:=I+(J-I)/2;
         AIF   ('&QCHK' EQ 'G').L41
         SRDA  6,33
         DR    6,1
         MR    6,1
         AGO   .L42
.L41     SRA   7,&SLNGTX+1
         SLA   7,&SLNGTX
.L42     AR    7,12
         AIF   ('&QCHK' EQ 'G').L43
         MVC   0(&LENGTX,2),0(7) *          T := A(P);
         MVC   0(&LENGTX,7),0(12) *          A(P) := A(I);
         AIF   (&EXTRA EQ 0).L4444
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1002   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         MVC   &ZZ.(&LENGTX,2),0(7)
         MVC   0(&LENGTX,7),0(12)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1002
.L43     L&TYPX    4,0(7) *                T:=A(P);
         L&TYPX    6,0(12)
         ST&TYPX    6,0(7) *                A(P):=A(I);
         AIF   (&EXTRA EQ 0).L44
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1001   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         L&TYPX 0,0(7)
         L&TYPX 6,0(12)
         ST&TYPX 6,0(7)
         ST&TYPX 0,TMP&SYSNDX+&ZZ
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1001
.L4444   AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').L44
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NOREJ
&TYPX    SETC  ' '
.NOREJ   L&TYPX 4,&DISPL.(2)
.L44     LR    11,13 *                  Q := J;
         LR    9,12
         AR    9,1
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NN
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NN
&TYPX    SETC  ' '
.NN      AIF   ('&QCHK' EQ 'B').L11
LP1&SYSNDX C&TYPX    4,&DISPL.(9) *          FOR K:=I+1STEP1 UNTIL Q DO
*                                      BEGIN COMMENT;
         BN&BRNCH1   ND1&SYSNDX *               IF A(K) > T THEN
*                                      BEGIN COMMENT;
LP2&SYSNDX C&TYPX  4,&DISPL.(11) *         FOR Q:=Q STEP-1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
         AGO   .L12
.L11     AIF   ('&TYPX' NE 'P').L13
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,11)
         AGO   .L12
.L13     ANOP
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(11)
.L12     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K1
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K1      BN&BRNCH2   ND2&SYSNDX *               IF A(Q) < T THEN
*                                      BEGIN COMMENT;
&YY      SETA  0-4
&XX      SETA  0
.L99     AIF   ('&QCHK' EQ 'G').L46
         XC    0(&LENGTX,11),0(9) *          X := A(K);
         XC    0(&LENGTX,9),0(11) *          A(K) := A(Q);
         XC    0(&LENGTX,11),0(9) *          A(Q) := X;
         AGO   .L147
.L46     L&TYPX    6,0(11)
         L&TYPX    0,0(9) *                X:=A(K);
         ST&TYPX    6,0(9) *                A(K):=A(Q);
         ST&TYPX   0,0(11) *               A(Q):=X;
.L147    AIF   (&EXTRA EQ 0).L47
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     9,DA&SYSNDX+&YY
         S     11,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L99
.L47     SR    11,1 *                  Q := Q - 1;
*                                      COMMENT;
         B     ND1&SYSNDX *               GO TO L (ND1);
*                                      END
ND2&SYSNDX BXH   11,8,LP2&SYSNDX *          END FOR Q;
         LR    11,9 *                  Q := K - 1;
         SR    11,1
         B     M&SYSNDX *                 GO TO M;
*                                      END
ND1&SYSNDX BXLE  9,10,LP1&SYSNDX *       L: END FOR K;
*                                      COMMENT;
         AIF   ('&QCHK' EQ 'G').L48
M&SYSNDX MVC   0(&LENGTX,12),0(11) *      M: A(I) := A(Q);
         MVC   0(&LENGTX,11),TMP&SYSNDX *       A(Q) := T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L876    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
&YY      SETA  &YY+4
         MVC   0(&LENGTX,11),&ZZ.(2)
&XX      SETA  &XX+1
         MVC   0(&LENGTX,12),0(11)
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L876
.L48     ANOP
M&SYSNDX L&TYPX    6,0(11) *            M: A(I):=A(Q);
         ST&TYPX    6,0(12)
         ST&TYPX    4,0(11) *               A(Q):=T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L765    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
         L&TYPX 0,0(11)
         ST&TYPX 0,0(12)
         L&TYPX 4,TMP&SYSNDX+&ZZ
         ST&TYPX 4,0(11)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L765
.L49     ANOP
*                                      COMMENT;
         LR    6,11 *                  IF 2 *Q > I+J THEN
         SR    11,1
         SLA    6,1
         SR    6,12
         SR    6,13
         BNP   LWR&SYSNDX *               BEGIN
         ST    12,LT&SYSNDX.(5) *           LT(M) := I;
         ST    11,UT&SYSNDX.(5) *          UT(M) := Q - 1;
         LA    11,&LT2.(11)
         LR    12,11 *                 I:=Q+1;
         B     UM&SYSNDX *                END
*                                      ELSE
*                                      BEGIN
LWR&SYSNDX ST    13,UT&SYSNDX.(5) *           UT(M) := J;
         LR    13,11 *                 J:=Q-1;
         LA    11,&LT2.(11)
         ST    11,LT&SYSNDX.(5) *          LT(M) := Q + 1;
*                                      COMMENT;
UM&SYSNDX LA    5,4(5) *                M := M + 1;
         B     N&SYSNDX *                 GO TO N
*                                      END
L3E&SYSNDX CR    12,13 *                   ELSE IF I >= J THEN
*                                      BEGIN COMMENT;
         BNL   P&SYSNDX *                 GO TO P
*                                      END
*                                      ELSE
*                                      BEGIN COMMENT;
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NP
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NP
&TYPX    SETC  ' '
.NP      AIF   ('&QCHK' EQ 'B').L21
         L&TYPX    0,&DISPL.(12)
         C&TYPX    0,&DISPL.(13) *               IF A(I) > A(J) THEN
         AGO   .L22
.L21     AIF   ('&TYPX' NE 'P').L23
         CP    &STRTKX.(&KYLGTX,12),&STRTKX.(&KYLGTX,13)
*                                     IF A(I) > A(J) THEN
         AGO   .L22
.L23     CLC   &STRTKX.(&KYLGTX,12),&STRTKX.(13)
*                                     IF A(I) > A(J) THEN
.L22     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K2
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K2      BN&BRNCH2   P&SYSNDX
*                                      BEGIN
&YY      SETA  0-4
&XX      SETA  0
         AIF   ('&QCHK' EQ 'G').L410
.L999    AIF   ('&QCHK' EQ 'G').L987
         XC    0(&LENGTX,12),0(13) *           X := A(I);
         XC    0(&LENGTX,13),0(12) *           A(I) := A(J);
         XC    0(&LENGTX,12),0(13) *           A(J) := X;
         AGO   .L41129
.L987    L&TYPX 0,0(12)
.L410    L&TYPX    6,0(13) *               X:=A(I);
         ST&TYPX    0,0(13) *               A(I):=A(J);
         ST&TYPX    6,0(12) *               A(J):=X;
.L41129  AIF   (&EXTRA EQ 0).L411
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     12,DA&SYSNDX+&YY
         S     13,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L999
.L411    ANOP
*                                      END;
*                                      COMMENT;
P&SYSNDX SR    5,14 *               P: M := M - 1;
         BM    QT&SYSNDX *                IF M > 0 THEN
*                                      BEGIN
         L     12,LT&SYSNDX.(5) *           I := LT(M);
         L     13,UT&SYSNDX.(5) *           J := UT(M);
         B     N&SYSNDX *                 GO TO N
*                                      END;
*                                      END
QT&SYSNDX L     13,R13&SYSNDX *            END QUICKERSORT
         AIF   ('&INLINE' EQ 'NO').F100
         LM    14,12,S&SYSNDX
         B     YY&SYSNDX
S&SYSNDX DS    15F
         AGO   .F250
.F100    LM    14,12,12(13) *          RESTORE REGISTERS
         BR    14 *                    RETURN TO CALLING PROGRAM
.F250    ANOP
UT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR UT ARRAY
LT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR LT ARRAY
         AIF   (&EXTRA GT 0).LK
         AIF   ('&QCHK' EQ 'G').LL
TMP&SYSNDX DS    CL&LENGTH *                  TEMP STORAGE FOR COMPARES
         AGO   .LL
.LK      ANOP
&YY      SETA  &EXTRA+1
TMP&SYSNDX DS  &YY.CL&LENGTX *                 TEMP STORAGE FOR COMPARE
.LL      ANOP
R13&SYSNDX DS    F *                     SAVE AREA FOR REGISTER 13
         AIF   (&EXTRA EQ 0).LM
&YY      SETA  &EXTRA+1
DA&SYSNDX DS   &YY.F *                    SAVE AREA FOR ADDRESS CHANGES
.LM      AIF   ('&INLINE' EQ 'NO').LMN
YY&SYSNDX NOPR 12
.LMN     MEND
         MACRO
&NAME    RETURNX &REGS,&PARA,&RC=0,&SA=
         AIF   (T'&SA EQ 'O').NOSA
&NAME    L     13,&SA(1)+4         LOAD OLD SAVE AREA ADDRESS
         AGO   .RETURN
.NOSA    ANOP
&NAME    L     13,4(,13)           LOAD OLD SAVE AREA ADDRESS
.RETURN  RETURN &REGS,&PARA,RC=&RC
         MEND
         PRINT ON
BLDLBLDR CSECT
         SAVEX (14,12),,*,USING=11,SA=(SAVE,*)
         REGEQU
         L     R1,0(R1)            PICK UP PARM PTR
         SLR   R2,R2
         ICM   R2,3,0(R1)          GET PARM LENGTH
         BZ    OPEN                BRANCH IF NOT SPECIFIED
         CH    R2,=H'5'            IS IT 5 OR LESS
         BH    OPEN                NO, IGNORE PARM
         BCTR  R2,R0               DECREMENT LENGTH BY 1
         EX    R2,PKPRMVAL         PACK PARM VALUE
         OI    DBLWD+7,X'0F'       ENSURE GOOD SIGN
         CVB   R1,DBLWD            CONVERT PARM VALUE TO BINARY
         MH    R1,=H'4096'         MULTIPLY BY 4K
         SLR   R0,R0
         LA    R2,60               GET DIVISOR (BLDL ENTRY SIZE)
         DR    R0,R2               DIVIDE, GIVING ENTRIES TO FILL
*                                  NO. OF PAGES GIVEN IN PARM.
         STH   R1,MAXMEMS          SAVE LIMIT VALUE
         LA    R0,TMENTLEN         GET TABLE ENTRY LENGTH
         MH    R0,MAXMEMS          MULTIPLY BY LIMIT
         ST    R0,TABSIZE          SAVE TABLE SIZE VALUE
         B     OPEN
PKPRMVAL PACK  DBLWD,2(*-*,R1)     ** EXECUTED **
OPEN     EQU   *
         OPEN  (SYSPRINT,(OUTPUT),BLDLMEMS)
         MVC   HEADISP1(L'HEADTXT1),HEADTXT1 SET UP PAGE HEADER
GETIN    GET   BLDLMEMS
         LR    R2,R1
         USING INCARD,R2
CHKSW    BC    *-*,TESTSWIN
         OI    *-3,X'F0'
         L     R0,TABSIZE          LOAD SIZE FOR GETMAIN
         GETMAIN R,LV=(0)          GETMAIN STORAGE FOR MEMBER TABLE
         ST    R1,TABADDR          SAVE ITS ADDRESS
         ST    R1,TABADDR+4        SET
         A     R1,TABADDR+12       TABLE
         S     R1,TABADDR+8        LIMIT
         ST    R1,TABADDR+12       VALUES
         OPEN  (LINKLIB,,LPALIB,,MEMLIST,(OUTPUT))
TESTSWIN LM    R5,R7,TABADDR+4
         USING TMDSECT,R5
         PACK  DBLWD,INUSECNT PACK MODULE USE COUNT
         OI    DBLWD+7,15     MAKE GOOD SIGN
         CVB   R1,DBLWD       MAKE IT BINARY
         STCM  R1,7,TMODCNT    AND STORE IT INTO TABLE ENTRY
         MVC   TMODNAME,INMEMBER    MOVE NAME TO TABLE
MODULCHK LA    R1,LPALIB           LOAD LPALIB DCB ADDR
         BAL   R10,BLDLRTN         BLDL ON MEMBER
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LNKBLDL             BRANCH IF NOT FOUND IN LPA
         MVC   MODNAME,TMODNAME
         ICM   R1,7,TMODCNT        LOAD USE COUNT
         CVD   R1,DBLWD            CONVERT TO DECIMAL
         OI    DBLWD+7,X'0F'       MAKE GOOD SIGN
         UNPK  MODCOUNT,DBLWD      UNPACK INTO PRINT FIELD
         BAL   R10,PRTLINE         PUT OUT EXCEPTION LINE
         B     GETIN
LNKBLDL  LA    R1,LINKLIB          LOAD LINKLIB DCB ADDR
         BAL   R10,BLDLRTN         BLDL ON MEMBER
         LTR   R15,R15             TEST RETURN CODE
         BNZ   GETIN
         MVC   TMODCNCT,BLDLCNCT   SAVE CONCATENATION NUMBER
         L     R1,MEMCOUNT         LOAD CURRENT MEMBER COUNT
         LA    R1,1(,R1)           ADD 1
         CH    R1,MAXMEMS          COMPARE TO LIMIT
         BH    EOFIN               BRANCH IF EXCEEDED
         ST    R1,MEMCOUNT         STORE UPDATED MEMBER COUNT
         TM    MEMLIST+DCBOFLGS-IHADCB,DCBOFOPN  IS MEMLIST FILE OPEN
         BZ    ADVTABLE            BRANCH IF NO
         PUT   MEMLIST,TMODNAME    PUT OUT MEMBER
ADVTABLE EQU   *
         BXLE  R5,R6,TABLSTM
         DROP  R2,R5
         WTO   'MEMBER TABLE OVERFLOWED -- PROCESSING TERMINATED',     X
               ROUTCDE=11
         ABEND 4,DUMP
TABLSTM  STM   R5,R7,TABADDR+4
         B     GETIN               RETURN FOR NEW MEMBER
EOFIN    CLOSE (BLDLMEMS,,LINKLIB,,LPALIB,,MEMLIST)
         TITLE 'PHASE 2 -- TABLE PROCESSING'
         L     R3,TABADDR          GET TABLE START ADDRESS
         L     R5,TABADDR+4        GET TABLE ENDING ADDRESS
         L     R4,TABADDR+8        GET TABLE ENTRY LENGTH
         SR    R5,R4               POINT TO LAST TABLE ENTRY
         SPACE 5
*    SORT BY  MEMBER NAME
         SPACE 5
         CALL  QKSORT,((R3),MEMCOUNT)
         SPACE 3
*        EDIT OUTPUT
         SPACE 3
EDITOUT  OPEN  (SYSPUNCH,(OUTPUT))
         MVC   HEADISP2(L'HEADTXT2),HEADTXT2 SET UP PHASE 2 PAGE HEADER
         MVC   SUBHD2,SUBHTXT2     SET UP PHASE2 SUBHEAD
CHKBLDL  MVC   PARMCARD,INLINE   SPACE OUT CARD IMAGE
         MVC   PARMCARD(L'LINKNAME),LINKNAME
         LA    R6,L'LINKNAME
         MVC   LINECTR,=H'55'
         XC    PAGECTR,PAGECTR
         BAL   R9,BLDLEDIT
BLDUPCHK EQU   *
         BXLE  R3,R4,BLDLNEXT
         PUT   SYSPUNCH,PARMCARD
         SLR   R2,R2               ZERO WORK REGISTER
         L     R3,MEMCOUNT         GET NUMBER OF BLDL TABLE ENTRIES
         MH    R3,=H'60'           MULTIPLY BY BLDL ENTRY SIZE
         D     R2,=F'4096'         DIVIDE BY PAGE SIZE
         CH    2,=Y(4096/60*60)    TEST IF EXACT FIT
         BNE   PRTCONCL            BRANCH IF NO
         LA    R3,1(,R3)           ROUND UP NO. OF PAGES
         SLR   R2,R2                AND CLEAR REMAINDER
PRTCONCL EQU   *
         MVC   LINE+1(120),LINE    BLANK OUT PRINT LINE
         BAL   R10,PRTLINE         PRINT A BLANK LINE
         MVC   LINE+1(31),=C'RESIDENT BLDL TABLE WILL OCCUPY'
         CVD   R3,DBLWD            CONVERT NO. OF PAGES TO DECIMAL
         OI    DBLWD+7,X'0F'       ENSURE GOOD SIGN
         UNPK  LINE+1+32(3),DBLWD+6(2) UNPACK NO. OF PAGES
         MVC   LINE+1+36(13),=C'4K PAGES PLUS'
         CVD   R2,DBLWD            CONVERT EXCESS BYTES TO DECIMAL
         OI    DBLWD+7,X'0F'       ENSURE GOOD SIGN
         UNPK  LINE+1+50(4),DBLWD+5(3)  UNPACK EXCESS BYTES
         MVC   LINE+1+55(6),=C'BYTES.'
         BAL   R10,PRTLINE         PRINT FINAL LINE
         MVC   LINE+1(120),LINE    BLANK OUT PRINT LINE
FINISH   CLOSE (SYSPRINT,,SYSPUNCH)    CLOSE PRINT, PUNCH FILES
         L     R0,TABSIZE          LOAD SIZE FOR FREEMAIN
         FREEMAIN R,LV=(0),A=TABADDR   FREE STORAGE
         RETURNX (14,12),RC=0,SA=SAVE
         TITLE 'BLDL MODULE EDIT ROUTINE'
BLDLEDIT LA    R7,PARMCARD(R6)
         CL    R7,=A(PARMCARD+61)
         BL    BLDLCDOK
         MVI   PARMCARD+71,C'*'
         PUT   SYSPUNCH,PARMCARD
         MVC   PARMCARD+1(79),PARMCARD
         LA    R6,15
         B     BLDLEDIT
BLDLCDOK EQU   *
         USING TMDSECT,R3
         MVC   MODNAME,TMODNAME
         SLR   R1,R1               ZERO WORK REGISTER
         IC    R1,TMODCNCT         LOAD CONCATENATION NO.
         CVD   R1,DBLWD            CONVERT TO DECIMAL
         OI    DBLWD+7,X'0F'       MAKE GOOD SIGN
         UNPK  MODCONCT,DBLWD      UNPACK INTO PRINT FIELD
         ICM   R1,7,TMODCNT        LOAD USE COUNT
         CVD   R1,DBLWD            CONVERT TO DECIMAL
         OI    DBLWD+7,X'0F'       MAKE GOOD SIGN
         UNPK  MODCOUNT,DBLWD      UNPACK INTO PRINT FIELD
         BAL   R10,PRTLINE
         LA    R1,8(R7)
         MVC   0(8,R7),TMODNAME
         TRT   0(8,R7),TRTTAB2
         LR    R15,R1
         SR    R15,R7
         LA    R6,0(R15,R6)
         BR    R9
         DROP  R3
BLDLNEXT EQU   *
         MVI   0(R1),C','
         LA    R6,1(R6)
         B     BLDLEDIT
BLDLRTN  EQU   *
         USING TMDSECT,R5
         MVC   BLDLMEM,TMODNAME           SET UP MEMBER NAME FOR BLDL
         DROP  R5
         BLDL  (1),BLDLLIST             BLDL ON MEMBER
         BR    R10
PRTLINE  CLC   LINECTR,=H'55'
         BL    NOHEAD
PUTHEAD  EQU   *
         XC    LINECTR,LINECTR
         LH    R1,PAGECTR
         LA    R1,1(,R1)
         STH   R1,PAGECTR
         CVD   R1,DBLWD
         OI    DBLWD+7,15
         MVC   HEADING+100(11),PAGEHD
         ED    HEADING+104(7),DBLWD+5
         PUT   SYSPRINT,HEADING
         PUT   SYSPRINT,SUBHEAD
         MVI   LINE,C'0'
NOHEAD   LH    R1,LINECTR
         LA    R1,1(R1)
         STH   R1,LINECTR
         PUT   SYSPRINT,LINE
         MVI   LINE,C' '
         BR    R10
         SPACE 5
         LTORG
         TITLE 'WORK AREAS AND CONSTANTS'
INLINE   DC    C' '
PARMCARD DC    CL80' '
         DC    CL40' '
PAGEHD   DC    C'PAGE',X'4020206B202120'
LINKNAME DC    C' SYS1.LINKLIB '
TRTTAB2  DC    256X'0'
         ORG   TRTTAB2+C' '
         DC    C' '
         ORG   TRTTAB2+C','
         DC    C','
         ORG
DBLWD    DC    D'0'
TABADDR  DC    A(0,0,TMENTLEN,TMENTLEN*1500)
ENTRYLEN EQU   TABADDR+10,2        HALFWORD TABLE ENTRY LENGTH
KEYLOC   EQU   TABADDR+8,2         KEY LOCATION (HALFWORD OF ZEROES)
KEYLEN   DC    H'8'
BLDLLIST DC    H'1',H'58'
BLDLMEM  DC    CL8' '
         DC    XL50'0'
BLDLCNCT EQU   BLDLMEM+8+3,1
HEADING  DC    CL121'1 '
HEADTXT1 DC    C'LPA MODULES SUBJECT TO BLDL PROCESSING'
HEADISP1 EQU   HEADING+1+(120-L'HEADTXT1)/2
HEADTXT2 DC    C'LINKLIB MODULES SELECTED FOR RESIDENT BLDL LIST'
HEADISP2 EQU   HEADING+1+(120-L'HEADTXT2)/2
         SPACE 3
SUBHEAD  DC    CL24'0 '
         DC    CL35' '
         ORG   *-35
SUBHTXT1 DC    C'MODULE NAME  '
         ORG
         DC    CL62'USE COUNT'
SUBHTXT2 DC    C'CONCATENATION'
SUBHD2   EQU   SUBHEAD+24+L'SUBHTXT1,L'SUBHTXT2
         SPACE 3
LINE     DC    CL24'  '
MODNAME  DS    0CL8
         DC    CL35' '
MODCONCT EQU   MODNAME+L'SUBHTXT1+L'SUBHTXT2/2,2
MODCOUNT DS    0CL6
         DC    CL62' '
         SPACE 3
LINECTR  DC    H'55'
PAGECTR  DC    H'0'
MAXMEMS  DC    H'4096'             MAX 4K MEMBERS
MEMCOUNT DC    F'0'
TABSIZE  DC    A(4096*TMENTLEN)    MAX MEMBER TABLE SIZE
         SPACE 5
         TITLE 'DCB DEFINITIONS'
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,LRECL=121
BLDLMEMS DCB   DDNAME=BLDLMEMS,DSORG=PS,MACRF=GL,RECFM=FB,LRECL=80,    X
               EODAD=EOFIN
SYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80
MEMLIST  DCB   DDNAME=MEMLIST,DSORG=PS,MACRF=PM,RECFM=FB,              X
               LRECL=TMENTLEN
LINKLIB  DCB   DDNAME=LINKLIB,MACRF=R,DSORG=PO
LPALIB   DCB   DDNAME=LPALIB,MACRF=R,DSORG=PO
         TITLE 'MISCELLANEOUS DSECTS'
INCARD   DSECT
INMEMBER DS    CL8
         DS    CL1
INUSECNT DS    CL6
         SPACE 3
TMDSECT  DSECT
TMODNAME DS    CL8         TABLE MEMBER MODULE NAME
TMODCNCT DS    XL1         CONCATENATION NUMBER
TMODCNT  DS    XL3         TABLE MODULE USE COUNT
TMENTLEN EQU   *-TMDSECT   TABLE ENTRY TOTAL LENGTH
         SPACE 3
         PRINT NOGEN
         DCBD  DSORG=PS
         PRINT GEN
         TITLE 'QUICK SORT ROUTINE'
         QKSRT1 QKSORT,C,LENGTH=12,KYLGTH=8
         END
