         TITLE '     S T A C K                '
************************************************************
*                                                          *
*           'STACK' TSO COMMAND                            *
*                                                          *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. APRIL 27 1977.
*        DATE UPDATED. MAY 12 1981.
*        DESCRIPTION.
*         THIS COMMAND STACKS A LIST OF COMMANDS.
*         THE LIST OF COMMANDS IS SPECIFIED AS AN OPERAND OF
*         STACK, WITH THE COMMANDS SEPARATED BY A SEMICOLON.
*         FOR EXAMPLE:
*            STACK EDIT X DATA;V;FIND /ABC/;FIND /WXY/;DOWN;L *
*
*         NOTE: IF THIS COMMAND IS USED ON A SYSTEM THAT HAS THE 'PCF'
*         PRODUCT, THEN TWO SEMICOLONS WOULD BE REQUIRED BECAUSE PCF
*         MODIFIES THE COMMAND BUFFER BEFORE THIS COMMAND SEES IT.
*         BUT THOSE WHO HAVE PCF DO NOT NEED TO USE THIS COMMAND.
*
*         IF THE COMMAND'S ALIAS 'STACKL' IS USED, EACH COMMAND
*         WILL BE LISTED AS IT EXECUTES.
*
*         IF A COMMAND TO BE STACKED REQUIRES A SEMICOLON, CODE
*         A PAIR OF SEMICOLONS OR USE A SUBSTITUTE DELIMITER.
*         A PAIR OF SEMICOLONS WILL BE CHANGED TO ONE SEMICOLON
*         AND WILL NOT BE TREATED AS A DELIMITER.
*
*         IF THE FIRST CHARACTER OF THE OPERAND IS A SUBSTITUTE
*         DELIMITER CHARACTER, THAT CHARACTER WILL BE USED INSTEAD
*         OF THE SEMICOLON TO SEPARATE THE COMMANDS.
*         FOR EXAMPLE:
*             STACK -EDIT X DATA-V-FIND /ABC/-DOWN
*         THE SUBSTITUTE DELIMITER MAY BE ANY CHARACTER EXCEPT
*          BLANK, ALPHANUMERIC, NATIONAL (POUND, AT, DOLLAR), PERCENT.
*         LIKE THE SEMICOLON, A PAIR OF SUBSTITUTE DELIMITERS
*         WILL BE CHANGED TO ONE AND NOT TREATED AS A DELIMITER.
*
*         AN EARLIER VERSION OF THIS COMMAND REQUIRED THE COMMANDS
*         TO BE IN PARENTHESES. THIS VERSION ATTEMPTS TO RECOGNIZE
*         THE OLD SYNTAX AND REMOVE THE PARENTHESES IF THEY ARE USED.
*
*        LOG OF CHANGES.
*         11MAY81 - SYNTAX CHANGED: COMMANDS NO LONGER IN PARENTHESES.
*                   (COMMAND WILL REMOVE PARENS IF PRESENT).
*                   LIST KEYWORD CANNOT BE SUPPORTED WITH NEW SYNTAX,
*                   BUT USE OF ALIAS STACKL PROVIDES EQUAL RESULTS.
*         12MAY81 - DELIMITER PAIRS NO LONGER TREATED AS DELIMITERS BUT
*                   AS A SINGLE CHARACTER THAT MATCHES THE DELIMITER.
*                   MAX LENGTH INCREASED FROM 256 TO 1024.
         SPACE
         GBLB  &MVS
&MVS     SETB  1                   1 - MVS   0 - SVS,MVT
         SPACE
STACK    START
         USING *,R12
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'STACK   '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   14,12,12(13)
         LR    R12,R15
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    13,4(,1)
         ST    1,8(,13)
         LR    13,1
         USING @DATA,R13
         SPACE 1
*              IOPL --> STPB --> LSD --> LIST
         SPACE
$IOPL    EQU   7
$LSD     EQU   9
         SPACE
         XC    LINKAREA(8),LINKAREA
         SLR   R15,R15
         ST    R15,PTRSTCK         ZERO IKJSTCK ADDRESS
         ST    R15,MYANS           ZERO PDL ADDRESS FOR IKJRLSA
         STC   R15,LISTOPT         NO LIST
         L     R1,CPPLECT
         USING ECT,R1
         LA    R14,ECTPCMD         POINT TO NAME OF COMMAND
         CLI   ECTSCMD,C' '        IS THERE A SUBCOMMAND
         BE    *+8                 NO
         LA    R14,ECTSCMD         YES, POINT TO THAT INSTEAD
         CLC   0(8,R14),=CL8'STACKL' IS COMMAND STACKL
         BNE   *+8                 NO
         MVI   LISTOPT,1           YES, SET LIST SWITCH ON
         DROP  R1                  ECT
         LA    $IOPL,MYIOPL
         LA    R8,MYSTPB
         SPACE
         USING IOPL,$IOPL
         USING LSD,$LSD
         SPACE
*                             INITIALIZE THE IOPL
         L     R0,CPPLUPT
         ST    R0,IOPLUPT
         L     R0,CPPLECT
         ST    R0,IOPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
*              IOPLIOPB WILL BE INITIALIZED BY THE STACK MACRO
         SPACE
*        STPB WILL BE INITIALIZED BY THE STACK MACRO
         SPACE
************************************************************
*                                                          *
*        SET CBUF OFFSET BACK ONE SPACE                    *
*                                                          *
************************************************************
         SPACE
*              THE PARSE SERVICE ROUTINE WILL NOT CORRECTLY HANDLE
*              THE SITUATION WHERE THE FIRST POSITIONAL PARAMETER
*              IS DEFINED WITH AN 'IKJIDENT SPACE' MACRO UNLESS THE
*              CBUF OFFSET POINTS TO A LEADING SPACE OR COMMA.
*              THIS OFFSET IS NORMALLY SET BY IKJSCAN TO POINT TO
*              THE FIRST OPERAND, SO WE MUST BACK IT UP ONE BYTE.
*              THE INSERT SUBCOMMAND (IKJEBEIS) OF EDIT, THE ONLY
*              IBM CODE THAT HAS THIS SITUATION, ALSO RESETS THE
*              CBUF OFFSET (THOUGH IT SETS IT BACK TO THE FIRST
*              SPACE FOLLOWING THE SUBCOMMAND NAME).
         SPACE
         L     R1,CPPLECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERAND?
         BO    EXIT0               NO, BRANCH
         DROP  R1                  ECT
         SPACE
         L     R1,CPPLCBUF
         LA    R15,4(,R1)          POINT TO BUFFER
         AH    R15,2(,R1)          POINT TO OPERAND
         CLI   0(R15),C' '         IS IT A SPACE (NEVER IS)
         BE    OFFSETOK            YES, LEAVE OFFSET UNCHANGED
         BCTR  R15,0               BACK UP ONE
         CLI   0(R15),C' '         IS IT PRECEDED BY A SPACE
         BE    OFFBKUP             YES, GO BACK UP 1
         CLI   0(R15),C','         IS IT PRECEDED BY A COMMA
         BNE   OFFSETOK            NO, BRANCH
OFFBKUP  LH    R15,2(,R1)          YES, GET THE OFFSET
         BCTR  R15,0               REDUCE IT BY ONE
         STH   R15,2(,R1)          REPLACE THE OFFSET
OFFSETOK EQU   *
         SPACE
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
*        L     R0,=A(STACKPCL)
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R13,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP1
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
.SKIP1   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BZ    OKPARSE
         LA    R15,12
         B     EXIT
OKPARSE  EQU   *
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
         LA    R1,LIST             POINT TO IN-STORAGE LIST
         ST    R1,NEXTPTR          SAVE NEXT RECORD ADDRESS
         SPACE
*
*              ISOLATE SUBCOMMANDS
*
         LA    R2,SUBCHAIN
         TM    6(R2),X'80'         PRESENT?
         BZ    EXIT0               NO - BRANCH
         LH    R5,4(,R2)           GET LENGTH
         LTR   R5,R5               IS THERE ANYTHING
         BZ    EXIT0               NO - BRANCH
         L     R4,0(,R2)           POINT TO STRING
         SPACE
         LR    R1,R4               THESE 6 INSTRUCTIONS ARE FOR COMMA
         BCTR  R1,0                BACK UP 1
         CLI   0(R1),C','          IS IT PRECEDED BY A COMMA
         BNE   COMMAX              NO
         LR    R4,R1               POINT TO COMMA
         LA    R5,1(,R5)           INCREASE LENGTH BY 1
COMMAX   EQU   *
         SPACE
         CLI   0(R4),C'('          CHECK LEFT PAREN (OLD SYNTAX)
         BNE   PARENX
         BCT   R5,*+8              REDUCE LENGTH BY 1
         B     EXIT0               BRANCH IF NOTHING REMAINS
         LA    R1,0(R5,R4)         POINT TO LAST BYTE
         LA    R4,1(,R4)           IGNORE LEFT PAREN
         CLI   0(R1),C')'          CLOSING LEFT PAREN
         BNE   PARENL              NO, BRANCH
         MVI   0(R1),C' '          YES, ERASE IT
         BCT   R5,*+8              REDUCE LENGTH BY 1
         B     EXIT0               BRANCH IF NOTHING REMAINS
         B     PARENX
PARENL   SH    R1,=H'2'
         CLI   0(R1),C')'
         BNE   PARENLI
         MVC   WORK(2),1(R1)
         OI    WORK+1,X'40'        CAPS
         CLC   WORK(2),=C' L'
         BNE   PARENX
         MVI   LISTOPT,1
         MVC   0(3,R1),BLANKS      ERASE ') L'
         SH    R5,=H'3'            REDUCE LENGTH BY 3
         BP    PARENX
         B     EXIT0
PARENLI  SH    R1,=H'3'
         CLI   0(R1),C')'
         BNE   PARENX
         MVC   WORK(5),1(R1)
         OC    WORK+1(4),BLANKS    CAPS
         CLC   WORK(5),=C' LIST'
         BNE   PARENX
         MVI   LISTOPT,1
         MVC   0(6,R1),BLANKS      ERASE ') LIST'
         SH    R5,=H'6'            REDUCE LENGTH BY 6
         BP    PARENX
         B     EXIT0
PARENX   EQU   *
         SPACE
         MVI   DELIMITR,C';'       DEFAULT DELIMITER IS SEMICOLON
         SLR   R1,R1
         IC    R1,0(,R4)           GET FIRST CHARACTER
         LA    R1,DELMTAB(R1)      POINT TO ASSOCIATED BYTE IN TABLE
         CLI   0(R1),1             IS IT A SUBSTITUTE DELIMITER
         BNE   GOTDELIM            NO, BRANCH
ALTDELIM MVC   DELIMITR(1),0(R4)   USE FIRST BYTE AS DELIMITER
         LA    R4,1(,R4)           POINT PAST DELIMITER
         BCT   R5,*+8              REDUCE LENGTH BY 1
         B     EXIT0               BRANCH IF NOTHING REMAINS
GOTDELIM MVC   DELIMITR+1(1),DELIMITR MAKE A PAIR
         LA    R14,2               CONSTANT 2
SCNEXT   L     R6,NEXTPTR
         LA    R6,4(,R6)           POINT PAST 2 HALFWORDS
         SLR   R1,R1
SCLOOP   EQU   *
         CR    R5,R14              ARE THERE AT LEAST 2 BYTES LEFT
         BL    SCPAIRX             NO, BYPASS PAIR CHECK
         CLC   0(2,R4),DELIMITR    DELIMITER PAIR?
         BNE   SCPAIRX             NO, BRANCH
         LA    R4,1(,R4)           YES, IGNORE FIRST
         BCTR  R5,0                REDUCE LENGTH BY 1
         B     SCNOTDLM            TREAT SECOND AS NON DELIMITER
SCPAIRX  CLC   0(1,R4),DELIMITR    DELIMITER?
         BE    SCSEMI              YES - BRANCH
SCNOTDLM IC    R0,0(,R4)           PICK UP ONE CHARACTER
         STC   R0,0(,R6)           PUT IT IN OUTPUT AREA
         LA    R4,1(,R4)           POINT TO NEXT INPUT
         LA    R6,1(,R6)           POINT TO NEXT OUTPUT
         LA    R1,1(,R1)           COUNT BYTES
         BCT   R5,SCLOOP           LOOP UNTIL DELIMITER FOUND
SCSEMI   LTR   R1,R1               TWO DELIMITERS IN A ROW
         BZ    SCNULL              YES, IGNORE
         LA    R1,4(,R1)           ADD 4 TO LENGTH
         L     R15,NEXTPTR         POINT TO FIRST BYTE MOVED
         STH   R1,HALF             STORE LENGTH
         MVC   0(2,R15),HALF         IN FIRST HALFWORD
         XC    2(2,R15),2(R15)     ZERO SECOND HALFWORD
         LA    R15,0(R1,R15)       POINT PAST LAST BYTE
         ST    R15,NEXTPTR         SAVE ADDRESS FOR NEXT SEGMENT
SCNULL   LA    R4,1(,R4)           POINT PAST DELIMITER
         LTR   R5,R5               ANY MORE INPUT
         BZ    SCX                 NO, BRANCH
         BCT   R5,SCNEXT           YES, LOOP TO PROCESS NEXT SEGMENT
SCX      LA    R14,LIST
         C     R14,NEXTPTR         ANYTHING TO STACK?
         BNE   OKSTRING            YES - BRANCH
         LA    R15,12              NO - EXIT
         B     EXIT
OKSTRING EQU   *
         L     R15,NEXTPTR
         SLR   R15,R14             GET LENGTH
         STH   R15,LISTOTLN
         SPACE
*                             GET AND INITIALIZE THE LSD
         LH    0,LISTOTLN          GETMAIN FOR LIST
         A     0,SP78                          AND LSD (16 BYTES)
         GETMAIN R,LV=(0)
         LR    $LSD,1
         LA    R14,16(,1)          REG 14 --> LIST
         ST    R14,LSDADATA
         ST    R14,LSDANEXT
         SR    R14,R14
         STH   R14,LSDRCLEN
         LH    R14,LISTOTLN
         STH   R14,LSDTOTLN
         SPACE
*        BCTR  R14,0               LENGTH FOR EX
*        MVC   16(0,1),LIST        MOVE LIST TO SUBPOOL 78 AFTER LSD
*        EX    R14,*-6             MOVE LIST INTO SUBPOOL 78
         SPACE
         LA    R14,LIST            POINT TO DATA TO BE MOVED
         LA    R15,16(,R1)         POINT TO RECEIVING AREA
         LH    R1,LISTOTLN         GET LENGTH OF DATA
         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE
         SRDL  R0,8                DIVIDE BY 256
         SRL   R1,24               ISOLATE REMAINDER
         LTR   R0,R0               IS QUOTIENT ZERO
         BZ    MOVER               YES, GO DO REMAINDER
MOVEQ    MVC   0(256,R15),0(R14)   ZERO 256 BYTES
         LA    R14,256(,R14)       INCREMENT ADDRESS
         LA    R15,256(,R15)       INCREMENT ADDRESS
         BCT   R0,MOVEQ            DECREMENT QUOTIENT AND BRANCH
MOVER    LTR   R1,R1               IS REMAINDER ZERO?
         BZ    MOVEX               YES, BRANCH TO EXIT
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                GO AROUND EXECUTED INST
         MVC   0(0,R15),0(R14)     EXECUTED
         EX    R1,*-6              DO THE ABOVE XC
MOVEX    EQU   *
         SPACE
         AIF   (NOT &MVS).SKIP2
         L     R15,16              CVTPTR
         TM    472(R15),X'80'      IS IKJSTCK IN LPA
         BNO   *+12                NO, BRANCH TO LOAD
         L     R15,472(,R15)       YES, LOAD CVTSTCK
         B     SETSTCK             BRANCH AROUND LOAD
.SKIP2   ANOP
         LA    R0,=CL8'IKJSTCK'
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY POINT ADDRESS
         LA    R15,0(,R15)         ZERO HIGH ORDER BYTE
SETSTCK  ST    R15,PTRSTCK         SAVE ADDRESS OF IKJSTCK
         SPACE
         LR    R1,$IOPL
         CLI   LISTOPT,1           'LIST' REQUESTED?
         BE    LISTEM              YES - BRANCH
         SPACE
         STACK PARM=(R8),STORAGE=(($LSD),PROCN),ENTRY=(15),MF=(E,(1))
         SPACE
         B     STACKED
LISTEM   EQU   *
         SPACE
         STACK PARM=(R8),STORAGE=(($LSD),PROCL),ENTRY=(15),MF=(E,(1))
         SPACE
STACKED  LTR   R15,R15
         BZ    EXIT0
         L     R15,PTRSTCK
         LR    R1,$IOPL
         STACK PARM=(R8),DELETE=ALL,ENTRY=(15),MF=(E,(1))
         SPACE
         LA    0,L'STACKMSG
         LA    1,STACKMSG
         TPUT (1),(0),R
         LA    R15,16
         B     EXIT
EXIT12   LA    R15,12
         B     EXIT
EXIT0    LA    15,0
EXIT     LR    R2,R15              SAVE RETURN CODE
         L     R15,PTRSTCK
         LTR   R15,R15             WAS IKJSTCK LOADED
         BNP   EXITNDEL            NO, BRANCH
         LA    R0,=CL8'IKJSTCK'
         DELETE EPLOC=(0)
EXITNDEL EQU   *
         IKJRLSA MYANS
         LR    R15,R2              RESTORE RETURN CODE
         LR    1,13
         L     R0,@SIZE
         L     13,4(,13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(13)
         L     R14,12(,13)
         BR    R14
         SPACE 1
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
STACKMSG DC    CL28'STACK ERROR'
SP78     DC    0F'0',AL1(78),AL3(16) SUBPOOL 78
         LTORG
BLANKS   DC    CL6' '
DELMTAB  DC    0D'0'
         DC    129AL1(1)
         DC    127AL1(0)           ALPHANUMERICS ARE NOT DELIMITERS
         ORG   DELMTAB+X'40'
         DC    AL1(0)              BLANK IS NOT A DELIMITER
         ORG   DELMTAB+C'%'
         DC    AL1(0)              PERCENT SIGN NOT A DELIMITER
         ORG   DELMTAB+C'$'
         DC    AL1(0)              DOLLAR SIGN NOT A DELIMITER
         ORG   DELMTAB+C'@'
         DC    AL1(0)              AT SIGN NOT A DELIMITER
         ORG   DELMTAB+C'#'
         DC    AL1(0)              POUND SIGN NOT A DELIMITER
         ORG
PATCH    DC    4D'0'               PATCH AREA
         SPACE
DDNAM    EQU   40                  DCB OFFSET
EXLST    EQU   36                  DCB OFFSET
PCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT
         SPACE
************************************************************
*                                                          *
*        PARSE PARAMETERS                                  *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
STACKPCL IKJPARM
SPACE    IKJPOSIT SPACE
SUBCHAIN IKJPOSIT STRING,ASIS
         IKJENDP
         PRINT GEN
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F
DOUBLE   DS    D
HALF     EQU   DOUBLE,2
LINKAREA DS    2F
PTRSTCK  DS    F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F
MYIOPL   DS    4F
MYSTPB   DS    8F
DELIMITR DS    C
DELIMIT2 DS    C
WORK     DS    CL6
LISTOTLN DS    H
LISTOPT  DS    C
NEXTPTR  DS    F
LIST     DS    0D,F
         DS    1024X
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
         IKJCPPL
         SPACE 2
         IKJECT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJPPL
         SPACE 2
         IKJLSD
         SPACE 2
         IKJSTPB
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
