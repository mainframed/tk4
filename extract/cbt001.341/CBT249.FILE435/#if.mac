***********************************************************************
*                                                                     *
*              .IF --- CONDITIONAL CONTROL                            *
*                                                                     *
***********************************************************************
         SPACE
IF      $ENTER ,
        $OFF   IFSTAK,IFCWIF       CLEAR .IF SWITCH
         MVI   IFOP,X'00'          CLEAR OPERATION CODE
         MVI   IFOPAO,YNOMIT       CLEAR LOGICAL CODE
         XC    IFLINES,IFLINES     NO 'LINE' ARG POINTER
         LA    R1,IFSTAK+L'IFSTAK-IFSTAKSP   LAST ENTRY IN .IF STACK
         OC    0(IFSTAKSP,R1),0(R1)     IS IT AVAILABLE .Q
         BNZ   IFE04               ERROR IF NOT
IF01     DS    0H
        $OFF   SWITCHS,FCHARIF     ASSUME NUMERIC COMPARISON
        $CALL  GETNUM              TRY FOR A NUMERIC ARG
         BC    BOMIT,IFE01         OMITTED ARG IS AN ERROR
         BC    15-BDNO,IF02        BRANCH IF SUCCESSFUL
         SPACE
         ST    COUNT,ARGSTART      ELSE RESCAN FOR CHARACTER
        $ON    SWITCHS,FNOCASE     NO CASE CONVERSION PLEASE
        $CALL  GETQST              GET ARGUMENT
         BC    BDNO,IFE03          ERROR IF MISMATCHED QUOTES
        $ON    SWITCHS,FCHARIF     CHARACTER COMPARISON
         LA    TEMP,1(,TEMP)       REAL STRING LENGTH
         S     TEMP,QSTRING        LESS DELIMITERS
         CLC   QSTRING,F0          ANY DELIMITERS .Q
         BE    IF02                BRANCH IF NONE
         LA    COUNT,1(,COUNT)     START OF STRING
         SPACE
IF02     DS    0H
         ST    TEMP,IFARGLN        SAVE LEFT ARGUMENT LENGTH
         ST    COUNT,IFARGAD       SAVE LEFT ARGUMENT ADDRESS
         SPACE
        $ON    SWITCHS,FNOCASE     NO CASE CONVERSION PLEASE
        $CALL  GETARG              LOCATE OPERATOR
         BC    BOMIT,IFE05         (NONE => ERROR)
         LA    R1,L'IFOPTB-1       MAX OPERATOR LENGTH
         CR    TEMP,R1             TOO LONG .Q
         BNL   IFE05               ERROR IF YES
         XC    IFOPCH,IFOPCH       CLEAR OPERATOR WORK AREA
         EX    TEMP,IFOPMVC        MOVE COMPARISON OPERATOR
         OC    IFOPCH,BLANKS       UPPER CASE PLEASE
         LA    R0,L'IFOPTB         INCREMENT TO BXLE
         LA    R1,IFOPTBE          ADDRESS OF LAST TABLE ENTRY
         LA    X1,IFOPTB           ADDRESS OF FIRST ENTRY
         LA    TEMP,1(,TEMP)       GET ACTUAL OPERAND LENGTH
         SPACE
IF03     DS    0H
         EX    TEMP,IFOPCLC        CHECK FOR OPERATOR EQUALITY
         BE    IF04                IF YES, QUIT
         BXLE  X1,R0,IF03          KEEP LOOKING
         B     IFE05               (NOT FOUND => ERROR)
         SPACE
IF04     DS    0H
         MVC   IFOP,L'IFOPTB-1(X1) SAVE CONDITION CODE FOR COMPARE
         SPACE
        $IFON  SWITCHS,FCHARIF,IF05 SKIP IF CHARACTER ARGUMENT
        $CALL  GETNUM              NUMERIC. GET IT
         BC    BOMIT+BDNO,IFE02    ERROR IF OMITTED OR INVALID
         BAL   RETURN,IFPUSH       PUSH CURRENT .IF STACK
         L     TEMP,IFARGAD        LOAD LEFT ARGUMENT ADDRESS
         IC    R1,IFOP             GET CONDITION CODE
         CR    TEMP,COUNT          COMPARE VALUES
         EX    R1,IFREL            TEST RELATION
         B     IF10                RELATION UNTRUE
         SPACE
IF05     DS    0H
        $ON    SWITCHS,FNOCASE     NO CASE CONVERSION
        $CALL  GETQST              GET CHARACTER ARGUMENT
         BC    BOMIT,IFE02         (NONE => ERROR)
         BC    BDNO,IFE03          ERROR IF MISMATCHED QUOTES
         LA    TEMP,1(,TEMP)       REAL SECOND STRING LENGTH
         S     TEMP,QSTRING        LESS DELIMITER COUNT
         CLC   QSTRING,F0          ANY DELIMITERS .Q
         BE    IF06                BRANCH IF NONE
         LA    COUNT,1(,COUNT)     START OF STRING
IF06     DS    0H
         L     R1,IFARGLN          CHARACTER COMPARE, GET LENGTH ARG1
         LR    R0,R1               REMEMBER ORIGINAL ARG1 LENGTH
         CR    R0,TEMP             COMPARE LENGTHS
         BNH   IF07                BRANCH IF 1ST EQUAL OR SHORT
         LR    R1,TEMP             TAKE LESSER OF TWO
IF07     DS    0H
         BAL   RETURN,IFPUSH       PUSH CURRENT .IF STACK
         LTR   R1,R1               WAS ONE OR BOTH NULL .Q
         BZ    IF08                BRANCH IF YES
         BCTR  R1,0                LENGTH-1 FOR COMPARE
         L     X3,IFARGAD          GET ADDRESS OF ARG1
         EX    R1,IFCLC            COMPARE ARGUMENTS
         BNE   IF09                BRANCH IF ARGS DISTINGUISH
IF08     DS    0H
         CR    R0,TEMP             EQUAL, LENGTH ALONE COUNTS
IF09     DS    0H
         IC    R1,IFOP             LOAD CONDITION CODE
         EX    R1,IFREL            TEST RELATIONAL OPERATOR
IF10     DS    0H
         CLI   IFOPAO,YNOR         FORMER LOGICAL AN 'OR' .Q
         BE    IF12                YES, CURRENT VALUE STAYS
        $ON    IFSTAK,IFFALSE      .IF WAS FALSE
        $OFF   IFSTAK,IFTRUE       AND NOT TRUE
         B     IF12                BRANCH TO RETURN
IF11     DS    0H
         CLI   IFOPAO,YNAND        FORMER LOGICAL AN 'AND' .Q
         BE    IF12                YES, CURRENT VALUE STAYS
        $ON    IFSTAK,IFTRUE       .IF WAS TRUE
        $OFF   IFSTAK,IFFALSE      AND NOT FALSE
IF12     DS    0H
         XC    IFLINES,IFLINES     CLEAR POTENTIAL 'LINE' ARG START
         L     X1,ARGSTART         GET POTENTIAL 'LINE' ARG START
        $CALL  GETYESNO            GET AND TEST ARG
         BC    BOMIT,IF14          BRANCH IF NOTHING
         ST    X1,IFLINES          THIS MIGHT BE IT LATER
         CLI   YNRESULT,YNAND      LOGICAL 'AND' .Q
         BE    IF13                BRANCH IF YES
         CLI   YNRESULT,YNOR       LOGICAL 'OR' .Q
         BE    IF13                BRANCH IF YES
         B     IF14                GO HANDLE WHAT WE DO HAVE
         SPACE
IF13     DS    0H
         MVC   IFOPAO,YNRESULT     SAVE LOGICAL OPERATOR
         B     IF01                AND GET NEXT COMPARISON
         SPACE
IF14     DS    0H
        $IFOFF IFSTAK+IFSTAKSP,IFTHEN,IF15   BR IF NOT OBJECT OF .TH
        $IFOFF IFSTAK+IFSTAKSP,IFFALSE,IF16  BR IF LAST .IF TRUE
        $ON    IFSTAK,(IFTRUE,IFFALSE)  FALSE, SO PROCESS NOTHING
         B     IF16                BRANCH TO RETURN
IF15     DS    0H
        $IFOFF IFSTAK+IFSTAKSP,IFELSE,IF16   BR IF NOT OBJECT OF .EL
        $IFOFF IFSTAK+IFSTAKSP,IFTRUE,IF16   BR IF LAST .IF FALSE
        $ON    IFSTAK,(IFTRUE,IFFALSE)  TRUE, SO PROCESS NOTHING
         SPACE
IF16     DS    0H
         L     R15,IFLINES         GET 'LINE' ARG POINTER
         LTR   R15,R15             ANY 'LINE' ARG PRESENT .Q
         BZ    IF17                IF NOT, USE NEXT REAL LINE
         ST    R15,ARGSTART        SET 'LINE' ARG POINTER
        $CALL  USARG               MOVE ARG INTO BUFFER
         LA    R15,WRETNR          PROCESS THE RESULT
IF17     DS    0H
        $EXIT  RC=(R15)            AND RETURN TO CALLER
         SPACE
IFPUSH   DS    0H
         CLI   IFOPAO,YNOMIT       FIRST TIME TO PUSH .Q
         BNE   IFPUSH01            BRANCH IF NOT
         L     X3,BUFF3AD          WORKING TEMPORARY BUFFER
         MVC   4(L'IFSTAK-IFSTAKSP,X3),IFSTAK     .IF STACK TO TEMP
         MVC   IFSTAK+IFSTAKSP(L'IFSTAK-IFSTAKSP),4(X3)     DOWN ONE
         XC    IFSTAK(IFSTAKSP),IFSTAK  CLEAR TOP ENTRY
        $ON    IFSTAK,IFLAST       SET .IF SWITCH
IFPUSH01 DS    0H
         BR    RETURN              AND RETURN TO CALLER
         SPACE
IFE01    DS    0H
         OC    IFLINES,IFLINES     ANY ARG LINE POSSIBLE .Q
         BNZ   IF14                YES, USE IT
         MVI   EFLAG003,ERRSET     OMITTED OPERAND
         B     IF16                AND TAKE EXIT
IFE02    DS    0H
         OC    IFLINES,IFLINES     ANY ARG LINE POSSIBLE .Q
         BNZ   IF14                YES, USE IT
         MVI   EFLAG005,ERRSET     INVALID OPERAND
         B     IF16                AND TAKE EXIT
IFE03    DS    0H
         OC    IFLINES,IFLINES     ANY ARG LINE POSSIBLE .Q
         BNZ   IF14                YES, USE IT
         MVI   EFLAG015,ERRSET     MISMATCHED QUOTES
         B     IF16                AND TAKE EXIT
IFE04    DS    0H
         OC    IFLINES,IFLINES     ANY ARG LINE POSSIBLE .Q
         BNZ   IF14                YES, USE IT
         MVI   EFLAG022,ERRSET     IF STACK FULL
         B     IF16                AND TAKE EXIT
IFE05    DS    0H
         OC    IFLINES,IFLINES     ANY ARG LINE POSSIBLE .Q
         BNZ   IF14                YES, USE IT
         MVI   EFLAG040,ERRSET     INVALID COMPARISON OPERATOR
         B     IF16                TAKE EXIT
         SPACE
IFREL    BC    *-*,IF11            TEST SUCCESS OF COMPARISON
IFCLC    CLC   0(*-*,X3),0(COUNT)  COMPARES CHARACTER STRINGS
IFOPCLC  CLC   0(*-*,X1),IFOPCH    IS THIS THE OPERATOR .Q
IFOPMVC  MVC   IFOPCH(*-*),0(COUNT)     MOVE OPERATOR TO WORK
         SPACE
IFOPCH   EQU   SAVED1,8,C'C'       OPERATOR COMPARE WORK AREA
IFARGAD  EQU   SAVEF0,4,C'A'       ADDRESS OF LEFT ARGUMENT
IFARGLN  EQU   SAVEF1,4,C'A'       LENGTH OF LEFT ARGUMENT
IFLINES  EQU   SAVEH0,4,C'A'       ADDR OF 'LINE' ARG START
IFOP     EQU   SAVEX0,1,C'X'       CONDITION CODE FOR BRANCH SWITCH
IFOPAO   EQU   SAVEX1,1,C'X'       LAST LOGICAL OPERATION
         SPACE
IFOPTB   DC    0CL5'OPOPC'         ORIGIN OF OPERATOR TABLE
         DC    CL4'=',X'80'        =  (CL4'OP',X'CC')
         DC    CL4'^=',X'70'       ^=
         DC    CL4'<',X'40'        <
         DC    CL4'>',X'20'        >
         DC    CL4'<=',X'C0'       < OR =
         DC    CL4'>=',X'A0'       > OR =
         DC    CL4'EQ',X'80'       EQUAL
         DC    CL4'NE',X'70'       NOT EQUAL
         DC    CL4'LT',X'40'       LESS THAN
         DC    CL4'GT',X'20'       GREATER THAN
         DC    CL4'LE',X'C0'       LESS THAN OR EQUAL
         DC    CL4'GE',X'A0'       GREATER THAN OR EQUAL
IFOPTBE  EQU   *-L'IFOPTB          ADDRESS OF LAST ENTRY
