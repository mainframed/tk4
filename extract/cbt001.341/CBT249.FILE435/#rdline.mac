***********************************************************************
*                                                                     *
*  THIS ENTRY POINT TO THE SCRIPTRD CONTROL SECTION IS USED           *
*  TO READ A SINGLE LINE.                                             *
*                                                                     *
*  UPON ENTRY, REGISTER ONE POINTS TO AN AREA OF STORAGE THAT         *
*  LOOKS LIKE THE DSECT 'DATABLOK'.                                   *
*                                                                     *
*  UPON EXIT, R15 HOLDS A RETURN CODE THAT HAS THE FOLLOWING MEANING  *
*        0     RECORD READ AND COPIED, NO PROBLEMS                    *
*        4     EOF ENCOUNTERED ON BOTTOM FILE OF INPUT STACK ...      *
*              READ MUST BE REISSUED.                                 *
*        8     EOF ENCOUNTERED ON BOTTOM FILE OF INPUT STACK ...      *
*              USER EOF EXIT REQUESTED                                *
*        12    EOF ENCOUNTERED ON BOTTOM REMOTE FILE OF INPUT STACK ...
*              USER EOF EXIT REQUESTED                                *
*        16    NO MORE FILES LEFT IN THE INPUT STACK......FINAL EOF   *
*                                                                     *
***********************************************************************
         SPACE 2
RDLINE  $ENTER ,
         L     BASE,VSCRICVT       COMMUNICATION VECTOR TABLE
         L     BASE,VRDSCRIP-SCRICVT(,BASE)  LOCAL DATA BASE
         SPACE
         LR    RPARMPTR,R1         SAVE PARM POINTER
         USING DATABLOK,RPARMPTR   TELL THE ASSEMBLER
         SPACE
         LM    RA,RB,CCHIDBUF      GET ADDR/LENGTH OF CC BUFFER
         LTR   RB,RB               ANYTHING THERE .Q
         BZ    READ00              BRANCH IF NOT
         XC    CCHIDBUF(8),CCHIDBUF  CLEAR HIDDEN BUFFER
         B     READ02              GO PASS BACK HIDDEN BUFFER
         SPACE
READ00   DS    0H
         LM    RFILE,RDD,CURFILE   ESTABLISH CURRENT FILE ENV
         SPACE
         LTR   RFILE,RFILE         IS THERE ANY FILE ON THE STACK
         BZ    FINALEOF            BRANCH IF NOT.....NOTHING TO READ
         SPACE
         LTR   RDD,RDD             DID ALLOCATION OF BOTTOM FILE FAIL
         BZ    SOFTEOF2            IF SO, SIMULATE A TEMPORARY EOF
         SPACE
         L     RA,FILITEM          GET RECORD NUMBER
READ01   DS    0H
         C     RA,FILMAX           HAVE WE READ FAR ENOUGH
         BL    READA00             IF NOT, CONTINUE
        $IFNONE FILFLAG,(FIL$AP,FIL$IM),SOFTEOF2  BRANCH IF A REMOTE
        $IFOFF FILFLAG,FIL$NULL,SOFTEOF2     BRANCH IF NULL NOT EOF
        $OFF   FILFLAG,FIL$UEOF    KILL USER EXIT OPTION FOR REREAD
         B     SOFTEOF2            AND SIMULATE AN END OF FILE
         SPACE
READA00  DS    0H
        $CALL  RDRECD              READ ONE RECORD (LOCATE MODE)
         BC    BOMIT,SOFTEOF       BRANCH IF END OF FILE
         BC    BNEG,SOFTEOF2       BRANCH IF ALREADY END OF FILE
         L     RA,FILITEM          CURRENT FILE ITEM NUMBER
         C     RA,FILMIN           REACHED FIRST ITEM TO BE READ .Q
         BL    READ01              IF NOT, MUST SKIP THIS LINE
         SPACE
         L     RA,RECDADDR         GET ADDRESS OF THE READ RECORD
         MVC   DWORD(2),0(RA)      ALIGN RECORD LENGTH
         LH    RB,DWORD            GET ITS LENGTH (V FORMAT)
         S     RB,F4               ALLOW FOR THE RDW
         TM    DDDCB+DCBRECFM,X'06'  ASA OR MACHINE FILE .Q
         BZ    READ02              BRANCH IF NOT
         LTR   RB,RB               WAS IT AN ALL BLANK RECORD .Q
         BZ    READ02              BRANCH IF YES
         TM    DDDCB+DCBRECFM,X'02'  IS IT MACHINE CC .Q
         BO    READM01             BRANCH IF YES
         SPACE
         LA    R1,RDASAPA          POINT TO NEW PAGE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA01             BRANCH IF YES
         LA    R1,RDASASP2         POINT TO SPACE 2
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA01             BRANCH IF YES
         LA    R1,RDASASP1         POINT TO SPACE 1
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA01             BRANCH IF YES
         LA    R1,RDASADC          POINT TO OVERSTRIKE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA01             BRANCH IF YES
         LA    RA,1(,RA)           BUMP OVER CC
         S     RB,F1               LESS CC LENGTH
         BP    READA03             BRANCH IF SOME DATA
         A     RB,F1               ORIGINAL LENGTH IF NONE
         B     READA03             BRANCH TO DONE
READA01  DS    0H
         LA    R0,1(,RA)           BUMP OVER CC
         ST    R0,CCHIDBUF         SAVE ADDRESS
         BCTR  RB,0                NEW LENGTH LESS CC
         ST    RB,CCHIDBUF+4       SAVE NEXT LENGTH
READA02  DS    0H
         LR    RA,R1               POINT TO INSERTED RECORD
         S     RA,F3               DUMMY PREFIX RDW
         MVC   4(1,RA),PERIND      SET CONTROL WORD INDICATOR
         LA    RB,L'RDASAPA-1      SET LENGTH OF SAME
READA03  DS    0H
         B     READ02              GO CHECK AND RETURN RECORD
         SPACE
READM01  DS    0H
         TM    4(RA),X'02'         IS IT AN IMMEDIATE .Q
         BZ    READM02             BRANCH IF NOT
         LA    R1,RDMIPA           POINT TO IMMEDIATE PAGE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA02             BRANCH IF YES
         LA    R1,RDMISP3          POINT TO SPACE 3 IMMEDIATE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA02             BRANCH IF YES
         LA    R1,RDMISP2          POINT TO SPACE 2 IMMEDIATE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA02             BRANCH IF YES
         LA    R1,RDMISP1          POINT TO SPACE 1 IMMEDIATE
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA02             BRANCH IF YES
         LA    R1,RDMINOP          POINT TO NOP
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READA02             BRANCH IF YES
         B     READM03             DON'T KNOW, PASS BACK AS IS
         SPACE
READM02  DS    0H
         LA    R1,RDMAPA           EJECT AFTER PRINT .Q
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READM04             BRANCH IF YES
         LA    R1,RDMASP3          SPACE THREE AFTER PRINT .Q
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READM04             BRANCH IF YES
         LA    R1,RDMASP2          SPACE TWO AFTER PRINT .Q
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READM04             BRANCH IF YES
         LA    R1,RDMADC           WRITE NO SPACE .Q
         CLC   4(1,RA),0(R1)       IS IT .Q
         BE    READM04             BRANCH IF YES
READM03  DS    0H
         LA    RA,1(,RA)           BUMP OVER CC
         BCTR  RB,0                DECREMENT LENGTH BY ONE
         B     READ02              GO AND PASS BACK
READM04  DS    0H
         S     R1,F3               FAKE A DUMMY RDW
         ST    R1,CCHIDBUF         SAVE NEXT RECORD POINTER
         LA    R0,L'RDASAPA-1      LENGTH OF SAME
         ST    R0,CCHIDBUF+4       SAVE THAT TOO
         MVC   4(1,R1),PERIND      SET CONTROL WORD INDICATOR
         LA    RA,1(,RA)           BUMP OVER CC
         BCTR  RB,0                DECREMENT LENGTH BY ONE
         SPACE
READ02   DS    0H
         CH    RB,DATALEN          IF DATA LENGTH IS > AREA LENGTH
         BNH   READ03              THE RECORD MUST BE TRUNCATED
         LH    RB,DATALEN          TRUNCATE THE RECORD.......
READ03   DS    0H
         STH   RB,DATALEN          AREA LENGTH IS ACTUAL LENGTH
         S     RB,F1               GET SS FORMAT LENGTH
         BM    READ04              SKIP MOVE IF THE RECORD IS EMPTY
         EX    RB,RECDMVC          COPY RECORD INTO THE CALLER'S AREA
         SPACE
READ04   DS    0H
         SR    R15,R15             SET ZERO RETURN CODE (SUCCESS)
         SPACE
READ05   DS    0H
        $RESTOR KEEP=(R15)         RESTORE CALLER'S REGISTERS
         BR    RETURN              RETURN TO CALLER
         SPACE
*  THE FOLLOWING CODE HANDLES VARIOUS EOF CONDITIONS                  *
         SPACE
SOFTEOF  DS    0H
         NI    DDDCB+DCBIFLGS,B'00111111' CLEAR DCB ERROR FLAGS
         TM    DDDCB+DCBDSORG,DSORG$PS CHECK IF SEQUENTIAL
         BZ    SOFTEOF2            IF THIS IS A SEQUENTIAL DATA SET
         OI    DDFLAG,DD$EOF       SET ERROR FLAG IN THE DDBLOCK
         SPACE
SOFTEOF2 DS    0H
         LA    R0,4                SET TEMPORARY EOF FLAG
        $IFOFF FILFLAG,FIL$UEOF,SOFTEOF3   BRANCH IF NO USER EOF
         LA    R0,8                RETURN CODE FOR USER EOF
        $IFANY FILFLAG,(FIL$AP,FIL$IM),SOFTEOF3   BRANCH IF NOT REMOTE
         LA    R0,12               SET REMOTE EXIT
SOFTEOF3 DS    0H
         XC    DATALEN,DATALEN     INDICATE NULL RECORD IF NO RESTORE
        $CALL  RDPOP               REMOVE BOTTOM FILE FROM STACK
         LR    R15,R0              RESTORE RETURN CODE
         B     READ05              AND RETURN TO CALLER
FINALEOF DS    0H
         LA    R15,16              SET NO MORE DATA FLAG
         XC    DATALEN,DATALEN     INDICATE NULL RECORD
         B     READ05              RETURN TO THE CALLER
         SPACE
RECDMVC  MVC   DATAAREA(*-*),4(RA) EXECUTED MOVE DATA PORTION
         SPACE
         DROP  RPARMPTR
