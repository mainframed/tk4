***********************************************************************
*                                                                     *
*                             LKGETP                                  *
*                                                                     *
*        ROUTINE TO CONVERT TOPOLOGICAL DATA STRUCTURE TO A SERIES OF *
*        LINEAR CHARACTER STRING OVERLAYS SUITABLE FOR PRINTER OUTPUT.*
*        ON EACH CALL TO THIS ROUTINE ONE MORE LAYER IS PEELED FROM   *
*        THE TOPOLOGICAL DATA STRUCTURE.                              *
*        ELEMENTS THAT ARE PEELED OFF ARE RETURNED TO FREE STORAGE.   *
*        AFTER THE LAST LAYER HAS BEEN PEELED, THE ENTIRE REMAINING   *
*        TOPOLOGICAL DATA STRUCTURE IS RETURNED TO FREE STORAGE.      *
*                                                                     *
***********************************************************************
         SPACE
LKGETP  $ENTER ,
         USING LKPMLIST,R1         TELL ASSEMBLER WHAT CALLER TOLD ME
         L     PCHAR,PMCHLOC       GET LOCATION OF CHARACTER STRING
         L     COUNT3,PMELLNG      GET LENGTH OF PRIMARY LINE
         L     COUNT2,LKSIZE       GET SIZE OF FREE LIST
         L     PFOR,PMELFIR        GET LOC. OF FIRST LINK ELEMENT
         SR    MULT,MULT           CLEAR MULTIPLIER REGISTER
         SR    R0,R0               ASSUME NO OVERLAY LINE WILL BE LEFT
         LA    R15,1               CONSTANT ONE
         SPACE
FORMP1   DS    0H
         USING LINKELEM,PFOR
         IC    MULT,LINKMULT       GET MULTIPLIER
         IC    R14,LINKCHAR        GET CHARACTER
FORMP2   DS    0H
         STC   R14,0(,PCHAR)       SET CHARACTER
         AR    PCHAR,R15           ADVANCE CHARACTER
         BCT   MULT,FORMP2         MULTIPLY CHARACTER
         SPACE
         L     PDOWN,LINKDOWN      GET DOWN POINTER
         LTR   PDOWN,PDOWN         DOES IT EXIST
         BZ    FORMP3              NO, MOVE TO NEXT FORWARD LINK
         SPACE
         MVC   LINKCHAR,LINKCHAR-LINKELEM(PDOWN)  MOVE CHAR TO UPPER
         MVC   LINKDOWN,LINKDOWN-LINKELEM(PDOWN)  DETACH LINK
         MVC   LINKFOR-LINKELEM(4,PDOWN),LKSTAR   ADD TO FREE LIST
         ST    PDOWN,LKSTAR        ...
         AR    COUNT2,R15          BUMP SIZE OF FREE LIST
         CLI   LINKCHAR-LINKELEM(PDOWN),CESCAPE  ESCAPE SEQUENCE .Q
         BE    FORMP3              BRANCH IF YES
         LA    R0,1                AT LEAST ONE OVERLAY LINE LEFT
         B     FORMP4              BRANCH INTO LOOP
         SPACE
FORMP3   DS    0H
         MVI   LINKCHAR,C' '       CLEAR CHARACTER FROM LINK
FORMP4   DS    0H
         L     PFOR,LINKFOR        ADVANCE LINK POINTER
         BCT   COUNT3,FORMP1       AND GO AROUND AGAIN
         LTR   R0,R0               ANY OVERLAY LINES LEFT .Q
         BNZ   FORMP6              BRANCH IF YES
         DROP  PFOR
         SPACE
FORMP5   DS    0H                  NO MORE OVERPRINT CHARS, UNLINK LINE
         L     PFOR,PMELLST        GET LOC. OF LAST LINK
         MVC   0(4,PFOR),LKSTAR    JOIN TO FREE LIST
         MVC   LKSTAR,PMELFIR      ...
         A     COUNT2,PMELLNG      INCREMENT FREE LIST LENGTH
         XC    PMELLNG,PMELLNG     INDICATE END OF OVERPRINT
         SPACE
FORMP6   DS    0H                  ANOTHER OVERPRINT LINE REMAINS
         ST    COUNT2,LKSIZE       UPDATE LINK SIZE
         S     PCHAR,PMCHLOC       CURRENT OUT POINTER LESS START
         ST    PCHAR,PMCHLNG       SET CHARACTER STRING LENGTH
        $EXIT  RC=0                RETURN TO CALLER
         DROP  R1
