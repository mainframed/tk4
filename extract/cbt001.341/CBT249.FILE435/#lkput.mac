***********************************************************************
*                                                                     *
*                             LKPUT                                   *
*                                                                     *
*        ROUTINE TO CONVERT LINEAR CHARACTER STRING, CANONICALIZED    *
*        OR NON-CANONICALIZED TO TOPOLOGICAL DATA STRUCTURE.          *
*                                                                     *
*              THERE IS A CHAIN OF DOUBLY LINKED ELEMENTS,            *
*              ONE FOR EACH COLUMN IN THE INPUT LINE.                 *
*              EACH ELEMENT MAY HAVE A SUBSIDIARY CHAIN OF            *
*              ELEMENTS REPRESENTING CHARACTERS TO BE PRINTED         *
*              IN THE SAME COLUMN -- THE FORWARD AND BACKWARD         *
*              POINTERS ARE UNUSED IN THE OVERLAY ELEMENTS.           *
*              THE ELEMENTS IN THE MAIN CHAIN CONTAIN THE             *
*              EBCDIC CHARACTER AND A REPETITION FACTOR (KNOWN        *
*              AS A MULTIPLIER.                                       *
*                                                                     *
***********************************************************************
         SPACE
*              THIS ROUTINE USED THE FOLLOWING REGISTERS -            *
*                                                                     *
*        R0        NUMBER OF FREE LINK ELEMENTS                       *
*        R1        PARAMETER LIST POINTER                             *
*        PCHAR     POINTER TO CURRENT CHARACTER IN INPUT              *
*        COUNT     CHARACTER COUNTER FOR MAIN LOOP                    *
*        COUNT2    NUMBER OF OUTPUT COLUMNS                           *
*                  NUMBER OF PRIMARY LINKS ALLOCATED                  *
*        LAST      END OF CHAIN POINTER.  THIS IS THE ELEMENT FOR     *
*                  THE RIGHTMOST COLUMN ADDED, BUT NEED NOT BE        *
*                  THE MOST RECENTLY ADDED.                           *
*        NEXT      POINTER TO NEXT FREE LINK TO BE USED.              *
*        CUR       POINTER TO LINK ELEMENT OF CURRENT COLUMN.         *
*        TOP       POINTER TO TOP LINK ELEMENT OF MOST RECENTLY       *
*                  ADDED OR OVERLAYED COLUMN.   CHANGED TO LKTOP      *
*        BOT       POINTER TO BOTTOM LINK ELEMENT OF MOST             *
*                  RECENTLY ADDED OVERLAYED COLUMN.                   *
*        COL       CARRIAGE COUNTERED.  DECREMENTED FOR EACH          *
*                  BACKSPACE AND INCREMENTED FOR ALL ELSE.            *
*                  CORRESPONDS TO 'CUR' LINK ELEMENT.                 *
*        BASE      MAIN REGISTER FOR ADDRESSABILITY                   *
*        R13       SCRIPT COMMON DATA AREA ADDRESSABILITY             *
*        R15       CONSTANT FULLWORD ONE.                             *
         SPACE
LKPUT   $ENTER ,
         USING LKPMLIST,R1         TELL ASSEMBLER WHAT CALLER TOLD ME
         L     PCHAR,PMCHLOC       GET ADDRESS OF INPUT STRING
         L     COUNT,PMCHLNG       GET LENGTH OF INPUT STRING
         LTR   COUNT,COUNT         NULL BUFFER PASSED .Q
         BNP   LKPUT19             YES, THEN IGNORE IT
LKPUT01  DS    0H
         SR    COL,COL             INITIALIZE CARRIAGE COUNT
         SR    COUNT2,COUNT2       CLEAR NUMBER OF OUTPUT COLUMNS
         LA    CUR,LKSTAR          FIRST FREE ELEMENT
         USING LINKELEM,CUR        ADDRESSABILITY
         L     R0,LKSIZE           NUMBER OF FREE ELEMENTS
         CR    R0,COUNT            ENOUGH LINKS LEFT .Q
         BH    LKPUT02             BRANCH IF YES
        $CALL  LKADD               ADD ANOTHER CHARACTER BLOCK
         BC    BPOS,LKPUT01        RETRY IF SUCCESSFUL
         MVI   EFLAG020,ERRTERM    SET ERROR FLAG
         B     LKPUT19             AND BRANCH TO RETURN
         SPACE
LKPUT02  DS    0H
        $OFF   ESCFLAG,ESCSW       CLEAR ESCAPE SWITCH
         SR    LAST,LAST           EMPTY CHAIN INITIALLY,
         L     NEXT,LKSTAR         BEGINNING WITH FIRST FREE
         ST    NEXT,PMELFIR        SET FIRST FREE
         XC    LKTOP,LKTOP         NO COLUMN PROCESSED
         SPACE
         LR    R15,R1              TRT CAN BE DESTRUCTIVE
         EX    COUNT,LPUTTRT       ANY BACKSPACES IN THIS STRING
         LR    R1,R15              RESTORE REGISTER
         L     COUNT,PMCHLNG       RESTORE LENGTH OF STRING
         LA    R15,1               FULLWORD CONSTANT OF ONE
         BNZ   LKPUT04             FULL CANONICAL ROUTINE IF ANY
         SPACE
*              CONTROL ARRIVES HERE ONLY WHEN THE INPUT CHARACTER     *
*              STRING DOES NOT CONTAIN ANY BACKSPACE CHARACTERS.      *
*              THIS ROUTINE WAS ADDED AS AN EFFICIENCY CONSIDERATION, *
*              THE LKPUT04  ROUTINE HAS THE SAME RESULT WITH MORE     *
*              CHECKING.                                              *
         SPACE
         AR    COUNT2,COUNT        FINAL NUMBER OF OUTPUT COLUMNS
         SR    R0,COUNT            DECREMENT NUMBER OF FREE ELEMENTS
LKPUT03  DS    0H
         LA    LAST,0(,CUR)        SAVE LAST POINTER
         L     CUR,LINKFOR         MOVE FORWARD ALONG FREE LIST
         XC    LINKELEM+4(LINKBSIZ-4),LINKELEM+4  CLEAR CHAR BLOCK
         ST    LAST,LINKBACK       SET BACKWARD POINTER
         MVC   LINKCHAR,0(PCHAR)   ENTER CHARACTER
         MVI   LINKMULT,X'01'      SET MULT FACTOR
         MVC   LINKWID,TDEVWID     SET CHARACTER WIDTH
         AR    PCHAR,R15           MOVE TO NEXT INPUT CHAR
         BCT   COUNT,LKPUT03       DO THEM ALL
         SPACE
         LA    LAST,0(,CUR)        LAST CHAR ELEMENT POINTER
         L     NEXT,LINKFOR        NEXT FORWARD POINTER
         B     LKPUT16             GO TO EXIT ROUTINE
         SPACE
LPUTTRT  TRT   0(*-*,PCHAR),LPUTBKSP  EXECUTED TEST FOR BACKSPACE
         DC    0D'0'
LPUTBKSP DC    XL256'00'           INITIALIZE THE AREA
         ORG   LPUTBKSP+CBACKSP
         DC    X'FF'               BACKSPACE ENTRY
         ORG   LPUTBKSP+CESCAPE
         DC    X'FF'               ESCAPE ENTRY
         ORG   ,
         SPACE
LKPUT04  DS    0H
        $IFON  ESCFLAG,ESCSW,LKPUT05    BRANCH IF AFTER AN ESCAPE
         CLI   0(PCHAR),CBACKSP    BACKSPACE .Q
         BE    LKPUT11             YES, DO BACKSPACE PROCESSING
         CLI   0(PCHAR),CESCAPE    ESCAPE CHARACTER .Q
         BE    LKPUT14             YES, DO ESCAPE PROCESSING
         L     CUR,LINKFOR         NEXT FORWARD POINTER
LKPUT05  DS    0H
         SR    R0,R15              DECREMENT NUMBER OF FREE
         AR    COL,R15             BUMP CARRIAGE COUNTER
         CR    CUR,NEXT            REMOVING BACKSPACES .Q
         BNE   LKPUT06             YES, SET UP OVERLAY
         AR    COUNT2,R15          BUMP NUMBER OF COLUMNS
         DROP  CUR
         USING LINKELEM,NEXT       MOVE TO NEXT BLOCK
         XC    LINKELEM+4(LINKBSIZ-4),LINKELEM+4  CLEAR CHAR BLOCK
         ST    LAST,LINKBACK       BACK POINTER FOR NEW ELEMENT
         DROP  NEXT
         USING LINKELEM,CUR        BACK TO CURRENT
         LA    LAST,0(,NEXT)       CLEAR CHAR AND BUMP BLOCKS
         L     NEXT,LINKFOR        NEXT FREE ELEMENT
         ST    CUR,LKTOP           NO OVERLAY INITIALLY
         LR    BOT,CUR
         B     LKPUT08             MOVE IN CHAR FROM STRING
         SPACE
*              CONTROL ARRIVES HERE WHEN AN INPUT CHARACTER MUST      *
*              BE PLACED IN THE SAME COLUMN AS AN EXISTING CHAR.      *
*              IF THE BOTTOM LINK FOR THIS COLUMN IS NOT KNOWN,       *
*              THEN IT MUST BE LOCATED.                               *
         SPACE
LKPUT06  DS    0H
         C     CUR,LKTOP           THIS COLUMN LOCATED .Q
         BE    LKPUT07             YES, SET UP OVERLAY
         ST    CUR,LKTOP           TOP EQUALS CUR
         LR    BOT,CUR             BOT EQUALS CUR->DOWN->DOWN...
         SPACE
*              CONTROL ARRIVES HERE WHEN BOTTOM LINK OF CURRENT       *
*              COLUMN IS NOT KNOWN.  BOTTOM IS LOCATED BY             *
*              FOLLOWING LINKDOWN FROM CUR TO THE END AT ZERO.        *
         SPACE
         DROP  CUR
         USING LINKELEM,BOT        LOOKING WITH BOT
LKPUT06A DS    0H
         L     R14,LINKDOWN        NEXT OVERLAY LEVEL
         LTR   R14,R14             END OF THE DOWN CHAIN .Q
         BZ    LKPUT07             BRANCH IF YES
         LR    BOT,R14             NEXT ATTEMPT
         B     LKPUT06A            AND GO TRY AGAIN
         DROP  BOT
         SPACE
*              CONTROL ARRIVES HERE TO ADD A NEW LINK IN THE SAME     *
*              COLUMN AS AN EXISTING CHARACTER, AFTER THE BOTTOM      *
*              LINK ELEMENT IN THE COLUMN HAS BEEN LOCATED AND        *
*              POINTED TO BY REGISTER BOT.                            *
         SPACE
         USING LINKELEM,LAST       RECHAIN NEW TO NEXT
LKPUT07  DS    0H
         MVC   LINKFOR,LINKFOR-LINKELEM(NEXT)     NEW TO NEXT
         DROP  LAST
         USING LINKELEM,BOT        CURRENT BOTTOM ELEMENT
         ST    NEXT,LINKDOWN       CHAIN NEW INTO DOWN CHAIN
         LR    BOT,NEXT            SET NEW BOTTOM
         L     NEXT,LINKFOR        NEXT FREE ELEMENT
         ST    NEXT,LKSTAR         UPDATE FREE LIST START
         XC    LINKELEM(LINKBSIZ),LINKELEM   CLEAR CHARACTER BLOCK
         SPACE
LKPUT08  DS    0H
         MVI   LINKMULT,X'01'      SET MULT FACTOR
         MVC   LINKWID,TDEVWID     SET CHARACTER WIDTH
        $IFON  ESCFLAG,ESCSW,LKPUT09    BRANCH IF AFTER AN ESCAPE
         MVC   LINKCHAR,0(PCHAR)   CHARACTER FROM STRING
         B     LKPUT15             GO TO END OF LOOP
         SPACE
LKPUT09  DS    0H
        $OFF   ESCFLAG,ESCSW       RESET ESCAPE CHARACTER SWITCH
        $SAVE  ,                   SAVE ALL REGISTERS
         SR    R14,R14             CLEAR WORK REG
         L     R14,VDEVICEA        TERMINAL DESCRIPTOR AREA ADDR
         LTR   CUR,R14             DOES IT EXIST .Q
         BZ    LKPUT10             BRANCH IF NOT
         USING TDEVICEA,CUR        AREA LOOKS LIKE THIS
         SR    R14,R14             ZERO WORK REG
         IC    R14,0(,PCHAR)       GET FUNCTION CHARACTER
         IC    R14,TDEVAESC(R14)   GET LENGTH-1 OF FUNCTION
LKPUT10  DS    0H
         EX    R14,LKPUTMVC        MOVE FUNCTION STRING
         STC   R14,LINKMULT        RETAIN LENGTH-1 OF ESCAPE STRING
         MVI   LINKCHAR,CESCAPE    AND SET CHARACTER ITSELF TO ESCAPE
         AR    PCHAR,R14           BUMP BY STRING LENGTH-1
         SR    COUNT,R14           DECREMENT LENGTH LEFT BY LENGTH-1
        $RESTOR KEEP=(PCHAR,COUNT) RESTORE REGISTERS
         BNP   LKPUT16             BRANCH IF NOTHING LEFT
         B     LKPUT15             ELSE CONTINUE
LKPUTMVC MVC   LINKESC(*-*),0(PCHAR)    ENTER ESCAPE STRING
         DROP  BOT
         SPACE
*              CONTROL ARRIVES HERE FOR BACKSPACE IN INPUT            *
         SPACE
LKPUT11  DS    0H
         CLI   1(PCHAR),CESCAPE    NEXT CHAR AN ESCAPE .Q
         BNE   LKPUT12             BRANCH IF NOT
         MVC   0(2,PCHAR),1(PCHAR) DO THE ESCAPE FIRST
         MVI   2(PCHAR),CBACKSP    RESTORE BACKSPACE
         B     LKPUT04             AND RETRY
LKPUT12  DS    0H
         SR    COL,R15             BACKSPACE PAST COLUMN ONE .Q
         BP    LKPUT13             BRANCH IF NOT
         MVI   EFLAG021,ERRSET     SET TOO MANY BACKSPACES ERROR
         AR    COL,R15             RESET COLUMN ONE OR ZERO
         B     LKPUT15             RETURN TO MAIN LOOP
         SPACE
LKPUT13  DS    0H
         USING LINKELEM,CUR        USE THE CURRENT BLOCK
         L     CUR,LINKBACK        PREVIOUS COLUMN
         DROP  CUR
         B     LKPUT15             RETURN TO MAIN LOOP
         SPACE
*              CONTROL ARRIVES HERE FOR ESCAPE IN INPUT               *
         SPACE
LKPUT14  DS    0H
        $ON    ESCFLAG,ESCSW       TURN ON ESCAPE CHAR SWITCH
         SR    COL,R15             ESCAPE PAST COLUMN ZERO .Q
         BNM   LKPUT15             BRANCH IF NOT
         MVI   EFLAG021,ERRSET     SET TOO MANY ESCAPE ERROR
         AR    COL,R15             RESET COLUMN ZERO
        $OFF   ESCFLAG,ESCSW       TURN OFF ESCAPE SWITCH
         B     LKPUT15             RETURN TO MAIN LOOP
         SPACE
*              CONTROL ARRIVES HERE AFTER ADDING A NEW LINK.          *
*              THIS IS ALSO THE COMMON PATH FOR BACKSPACE.            *
         SPACE
LKPUT15  DS    0H
         AR    PCHAR,R15           BUMP CHAR BY ONE
         BCT   COUNT,LKPUT04       DO FOR ALL IN THE STRING
         SPACE
*              CONTROL ARRIVES HERE WHEN ALL THE INPUT HAS            *
*              BEEN CONVERTED TO 'TOPOLOGICAL' STRUCTURE.             *
         SPACE
LKPUT16  DS    0H
         LTR   COUNT2,COUNT2       ANY INPUT CONVERTED .Q
         BNZ   LKPUT17             BRANCH IF YES
         XC    PMELFIR,PMELFIR     CLEAR START LINK
         SR    LAST,LAST           CLEAR END LINK
         B     LKPUT18             AND CONTINUE
         SPACE
         USING LINKELEM,LAST
LKPUT17  DS    0H
         XC    LINKFOR,LINKFOR     DECHAIN FROM FREE LIST
         DROP  LAST
         SPACE
         USING LINKELEM,NEXT
         XC    LINKBACK,LINKBACK   DECHAIN FROM FREE LIST
         ST    NEXT,LKSTAR         UPDATE FREE LIST START
LKPUT18  DS    0H
         ST    R0,LKSIZE           UPDATE NUMBER FREE ELEMENTS
         ST    LAST,PMELLST        UPDATE PARM LIST START
         ST    COUNT2,PMELLNG      UPDATE PARM LINK COUNT
         SPACE
LKPUT19  DS    0H
         DROP  NEXT,R1
        $EXIT  RC=0                RETURN TO CALLER
