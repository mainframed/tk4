***********************************************************************
*                                                                     *
*              .SR (SET REFERENCE) --- SET VALUE OF REFERENCE NAME    *
*                                                                     *
***********************************************************************
         SPACE
SR      $ENTER ,
        $CALL  GETSYM              PICKUP TARGET NAME
         BC    BOMIT,SRE01         ERROR IF NO OPERAND
         BC    15-BDNO,SR010       BRANCH IF VALID
        $IFON  SRNMFLG,SRNMTSYM,SRE04   BRANCH IF BAD SYMBOL
        $IFON  SRNMFLG,SRNMTSUB,SRE06   BRANCH IF BAD SUBSCRIPT
        $IFANY SRNMFLG,(SRNMTFR,SRNMTTO),SRE07  BRANCH IF BAD SUBSTRING
         CLC   SRNMFR,SRNMFR+L'SRNMFR   'FROM' SUBSTRING SPECIFIED .Q
         BNE   SRE07               ERROR IF YES
         CLC   SRNMTO,SRNMTO+L'SRNMTO   'TO' SUBSTRING SPECIFIED .Q
         BNE   SRE07               ERROR IF YES
SR010    DS    0H
         L     R1,ARGSTART         POINT TO TERMINATING DELIMITER
         CLI   0(R1),C' '          BLANK AFTER .Q
         BE    SR020               CONTINUE IF YES
         CLI   0(R1),C'='          EQUAL AFTER .Q
         BE    SR020               BRANCH IF YES
         B     SRE02               ELSE BAD SYMBOL DELIMITER
         SPACE
SR020    DS    0H
        $CALL  SYMSR               LOOKUP THE SYMBOL
         LR    X1,COUNT            RETAIN RETURNED POINTER
         BC    BPOS,SR070          IF SINGLE ENTRY, SKIP
         BC    BNEG,SR030          BRANCH IF (0) FOUND
         LTR   X1,X1               ROOM FOR (0) ENTRY .Q
         BZ    SRE03               IF NOT, COMPLAIN
         USING RND,X1              ADDRESS OF (0) ENTRY
         XC    RND(RNLN),RND       ZERO DICTIONARY ENTRY
         MVC   RNSYM,SRNM          COPY IN NAME
         SPACE
SR030    DS    0H
         TM    SRNMFLG,SRNMALL     IMPLIED SUBSCRIPT .Q
         BNO   SR040               BRANCH IF NOT
         TM    RNFLAG,RNCHAR+RNPTR IS ENTRY NON NUMERIC .Q
         BNZ   SRE06               ERROR IF NOT NUMERIC
         L     R0,RNDVAL           CURRENT VALUE SUB (0)
         A     R0,F1               BUMP BY ONE
         TM    SRNMFLG,SRNMALLN    NEGATIVE IMPLICATION
         BNO   SR032               BRANCH AROUND IF NOT
         S     R0,F2               DECREMENT BY ONE NET
SR032    DS    0H
         ST    R0,SAVEF0           ALIGN RESULT
         LPR   R0,R0               POSITIVE VALUE
         C     R0,F32767           SMALL ENOUGH .Q
         BH    SRE06               INVALID SUBSCRIPT IF NOT
         MVC   RNDVAL,SAVEF0       ENTER NEW VALUE
         MVC   SRNMSUB,RNDVAL+2    ENTER NEW SUBSCRIPT
         SPACE
SR040    DS    0H
         CLC   SRNMSUB,F0          ZERO SUBSCRIPT .Q
         BE    SR070               YES, CONTINUE
         CLC   RNSLINK,F0          ZEROTH ENTRY THE LAST .Q
         BE    SR042               BRANCH IF YES
         LA    X2,RND              FORMER SUBSCRIPT POINTER
         L     X1,RNSLINK          POINT TO FIRST SUBSCRIPT ENTRY
SR042    DS    0H
         LH    R0,SRNMSUB          GET TARGET SUBSCRIPT
SR050    DS    0H
         CH    R0,RNSUBS           COMPARE WITH TARGET SUBSCRIPT
         BL    SR060               IF LESS, ENTER NOW
         BE    SR070               OUT IF EQUAL
         LA    X2,RND              SAVE OLD PTR
         CLC   RNSLINK,F0          AT THE END .Q
         BE    SR060               BRANCH IF YES
         L     X1,RNSLINK          LOAD LINK PTR
         B     SR050               AND SEARCH AGAIN
         SPACE
SR060    DS    0H
         LA    R1,RNLN             LENGTH FOR ONE NEW ENTRY
        $CALL  GETCELL             GET SOME SPACE
         BC    BNEG,SRE03          BRANCH IF NONE LEFT
         LR    X1,TEMP             THIS IS NEW POINTER
         XC    RND(RNLN),RND       CLEAR DICTIONARY ENTRY
         MVC   RNSYM,SRNM          COPY IN NAME
         MVC   RNSUBS,SRNMSUB      AND SUBSCRIPT
         MVC   RNSLINK,RNSLINK-RND(X2)  FORWARD POINTER
         ST    X1,RNSLINK-RND(,X2) SET NEW POINTER
         SPACE
SR070    DS    0H
        $ON    SWITCHS,FNOCASE     DON'T ALTER ANYTHING
        $CALL  GETARG              SKIP OVER ANY BLANKS
         BC    BOMIT,SRE01         ERROR IF OMITTED
         ST    COUNT,ARGSTART      RESCAN FROM START
         CLI   0(COUNT),C'='       AN EQUAL DELIMITER .Q
         BNE   SR080               BRANCH IF NOT
         LA    COUNT,1(,COUNT)     BUMP POINTER
         ST    COUNT,ARGSTART      POINT TO NEXT OP
SR080    DS    0H
        $ON    SWITCHS,SRSWS       THIS IS .SR CALLING
        $CALL  GETNUM              EVALUATE EXPRESSION
         BC    BOMIT,SR088         NO OPERAND IS A NULL CHAR
         BC    BDNO,SR082          INVALID SOMETHING IN EXPRESSION
         BAL   RETURN,SRFRE        RELEASE FORMER LONG CHAR, IF ANY
         ST    COUNT,RNDVAL        STORE FINAL NUMERIC VALUE
         MVI   RNFLAG,X'00'        ZERO FLAG BYTE
         MVI   RNCLEN,X'00'        NUMERIC STRING LENGTH IS ZERO
         B     SR130               BRANCH TO RETURN
         SPACE
SR082    DS    0H
         ST    COUNT,ARGSTART      RESCAN STRING FROM THE START
        $ON    SWITCHS,FNOCASE     INDICATE NO CASE CONVERSION
        $CALL  GETQST              GET FIRST OPERAND
         BC    BOMIT,SR088         BRANCH IF NO OPERAND
         LA    R1,1(,TEMP)         ACTUAL STRING LENGTH
         CLC   QSTRING,F2          MATCHED DELIMITERS .Q
         BNE   SR090               BRANCH IF NOT
         S     R1,QSTRING          LENGTH LESS DELIMITERS
         LA    COUNT,1(,COUNT)     START OF DELIMITED CONTENTS
         B     SR090               AND CONTINUE
SR088    DS    0H
         SR    R1,R1               LENGTH OF NO OPERAND IS ZERO
         SPACE
SR090    DS    0H
         C     R1,DEFRNLEN+TAB3DEF COMPARE WITH MAX ALLOWED
         BNH   SR100               BRANCH IF OK
         L     R1,DEFRNLEN+TAB3DEF GET MAX ALLOWED INSTEAD
         MVI   EFLAG008,ERRSET     INDICATE LENGTH ERROR
SR100    DS    0H
         LR    X2,COUNT            SAVE ARGUMENT POINTER
         EX    R1,SRCLI            LENGTHS THE SAME .Q
         BE    SR106               BRANCH IF YES
         BAL   RETURN,SRFRE        RELEASE FORMER LONG CHAR, IF ANY
         SPACE
         LA    R0,L'RNCVAL         MAX LENGTH FOR SHORT CHAR
         CR    R1,R0               THIS A LONG CHAR .Q
         BNH   SR106               BRANCH IF NOT
        $CALL  GETCELL             GET A CHAR WORK AREA
         LR    COUNT,TEMP          RETURNED ADDRESS
         BC    BPOS,SR104          BRANCH IF A SUCCESS
         LA    R1,L'RNCVAL         SET MAXIMUM LENGTH POSSIBLE
         MVI   EFLAG008,ERRSET     INDICATE LENGTH TRUNCATED
         B     SR106               ENTER REST OF DATA
         SPACE
SR104    DS    0H
         ST    COUNT,RNCPTR        SET FORWARD DATA POINTER
         L     COUNT,RNTBSCNT      GET CURRENT SUBSCRIPTED VAR COUNT
         LA    COUNT,1(,COUNT)     PLUS ONE
         ST    COUNT,RNTBSCNT      UPDATE SUBSCRIPTED VAR COUNT
         SPACE
SR106    DS    0H
         STC   R1,RNCLEN           SET STRING LENGTH
         LA    COUNT,RNCVAL        SHORT STRING TARGET
         CLI   RNCLEN,L'RNCVAL     IS STRING SHORT .Q
         BNH   SR108               BRANCH IF YES
         L     COUNT,RNCPTR        POINTER TO LONG TARGET
         SPACE
SR108    DS    0H
         OI    RNFLAG,RNCHAR       INDICATE CHARACTER STRING
         LTR   R1,R1               TEST FOR NULL STRING
         BNP   SR110               IF SO, DONE
         BCTR  R1,0                NOT NULL, SS-COUNT OF STRING
         EX    R1,SRMVC            COPY STRING TO TARGET
SR110    DS    0H
         CLC   QSTRING(4),F1       MISMATCHED DELIMITER SITUATION
         BE    SRE05               BRANCH TO ERROR IF YES
         B     SR130               DONE
         SPACE
SRMVC    MVC   0(*-*,COUNT),0(X2)  COPIES CHARACTER ARGUMENT
SRCLI    CLI   RNCLEN,*-*          EXECUTED COMPARE STRING LENGTHS
         SPACE
SRFRE    DS    0H
         TM    RNFLAG,RNCHAR       FORMER VALUE CHARACTER .Q
         BZ    SRFRE01             BRANCH IF NOT
         CLI   RNCLEN,L'RNCVAL     LONG CHAR VALUE .Q
         BNH   SRFRE01             BRANCH IF NOT
        $SAVE  ,                   SAVE CALLER'S REGS
         L     R0,RNCPTR           POINTER TO LONG STRING
         SR    R1,R1               ZERO WORK REG
         IC    R1,RNCLEN           LENGTH OF LONG STRING
        $CALL  FREECELL            RELEASE AREA
        $RESTOR ,                  RESTORE CALLER'S REGS
SRFRE01  DS    0H
         BR    RETURN              RETURN TO CALLER
         DROP  X1
         SPACE
SRE01    DS    0H
         MVI   EFLAG003,ERRSET     OMITTED OPERAND
         B     SR130               GO TO RETURN
SRE02    DS    0H
         MVI   EFLAG005,ERRSET     INVALID OPERAND
         B     SR130               GO TO RETURN
SRE03    DS    0H
         MVI   EFLAG007,ERRSET     TOO MANY REF NAMES
         B     SR130               GO TO RETURN
SRE04    DS    0H
         MVI   EFLAG008,ERRSET     STRING TOO LONG
         B     SR130               GO TO RETURN
SRE05    DS    0H
         MVI   EFLAG015,ERRWARN    MISMATCHED DELIM
         B     SR130               GO TO RETURN
SRE06    DS    0H
         MVI   EFLAG038,ERRSET     INVALID SUBSCRIPT
         B     SR130               GO TO RETURN
SRE07    DS    0H
         MVI   EFLAG039,ERRSET     INVALID SUBSTRING
         B     SR130               GO TO RETURN
         SPACE
SR130    DS    0H
        $EXIT  RC=0                DONE WITH .SR
