1





















             Formatted Displays on 3270 Terminals

                       Wilbur C. Hadden

                        November 1981
1










              Formatted Displays on 3270 Terminals

 With 3270 terminals it is possible to format displays so that
 certain portions of the screen are used for the operator's
 response and other portions are reserved for use by the
 program controlling the display. An example is shown in
 Exhibit 1 and the program creating this example is discussed
 in this paper.

 The advantage of using formatted communications over
 unformatted is that a formatted display may present the
 operator with more than one request for information at one
 time. This lengthens messages between computer and operator;
 each message contains more information and the rhythm of the
 communication is more natural. By grouping related items
 together in a formatted display each request for information
 is embedded in a broader context. From this broader context
 the operator is able to find a better understanding of the
 meaning or purpose of information requests and can thus
 respond with better answers.  The fact that the operator's
 responses are not transmitted until all requests are satisfied
 means that the operator has more oportunity to review and
 revise responses before they are entered. These
 characteristics of formatted communications mean that the
 operator has more control over responses and can respond with
 greater accuracy.


          ___________________________________________
         /                                           \
         ×                                           ×
         ×                 Example Form              ×
         ×                                           ×
         ×                                           ×
         ×                                           ×
         ×  Please enter a letter: _                 ×
         ×                                           ×
         ×                                           ×
         ×                                           ×
         ×                                           ×
         ×-------------------------------------------×
         ×  Respond with PA2 to end.                 ×
         ×___________________________________________×
         ×                                           ×
         \__________________________________________/

         Exhibit 1: An example of a formatted display.
1
 Formatted Displays on 3270 Terminals                       2
 Introduction



 There is no reason to attempt to summarize or repeat the
 information in "An Introduction to Programming the IBM 3270
 Information Display System" (IBM GC27-6999) since this
 publication is neither long nor difficult to read. It contains
 basic information required to code data streams to 3270s and
 decode data streams from 3270s.  In this publication however,
 all of the computer programming is done in assembly language.
 The routines made available with this paper extend the
 capacity to format 3270s to PL/I programmers.

 There are two sets of routines documented here. The first set
 contains PL/I preprocessor routines that a programmer can use
 to build the data structures that are displays with the
 special characters which control 3270 terminals.  The second
 set of routines is comprised of external procedures to be
 linkedited with application programs that handle the terminal
 I/O.

 The example in Exhibit 1, show above, is overly simple, but
 was chosen as a way of illustrating some dynamics of
 communicating with a terminal operator in 3270 mode.  The
 program that displays the Example Form is listed in Exhibit 2.
 The next section is a line-by-line commentary on how it
 achieves its purpose.
1
 Formatted Displays on 3270 Terminals                       3
 Exhibit 2: Example Program Listing





  LINE
   1 EXAMPLE:
   2    PROC OPTIONS (MAIN) REORDER;
   3    DCL
   4       PLIXOPT CHAR(10) VAR STATIC EXTERNAL INIT('ISA(10K)'),
   5       RETC BINARY FIXED(15,0);
   6    %INCLUDE PROCS;
   7    START_FORM(EG) ERASE;
   8       FIELD(2,28,EXAMPLE FORM) SKIP INTENSE;
   9       FIELD(8,1,PLEASE ENTER A LETTER:) SKIP;
  10       FIELD(8,24,,LETTER CHAR(1),1);
  11          INSERT_CURSOR;
  12       FIELD(8,26) SKIP;
  13          REPEAT_TO_ADDRESS(20,1,-,21,1
  14             ,RESPOND WITH PA2 TO END.);
  15          REPEAT_TO_ADDRESS(22,1,_,23,1);
  16    END_FORM;
  17    START_FORM(REFRESH) EAU;
  18    END_FORM;
  19    ON COND(TELCOM)
  20       BEGIN;
  21          PUT FILE (SYSPRINT) EDIT ('TELCOM CONDITION',
  22             RETC,'.  PROGRAM ABORTED.')(A,F(4));
  23          GO TO THE_END;
  24       END;
  25    ON COND(PA2)
  26       BEGIN;
  27          START_FORM(THANKS) ERASE INHIBIT;
  28             FIELD(1,1
  29                ,THANK YOU FOR YOUR PARTICIPATION.)
  30                 PROT;
  31             INSERT_CURSOR(2,1);
  32          END_FORM;
  33          CALL PUTSCRN(THANKS,LENGTH_OF_THANKS,RETC);
  34          GO TO THE_END;
  35       END;
  36    CALL PUTSCRN(EG,LENGTH_OF_EG,RETC);
  37 IA:
  38    CALL GETSCRN(RESPONSES_TO_EG,TABLE_FOR_EG,RETC);
  39    DO WHILE ( LETTER<'a' × LETTER>'Z' );
  40       CALL PROTEST(LETTER,TABLE_FOR_EG.FIELDS(1));
  41    END;
  42    CALL PUTSCRN(REFRESH,LENGTH_OF_REFRESH,RETC);
  43    GO TO IA;
  44    /*   END OF PROGRAM   */
1
 Formatted Displays on 3270 Terminals                       4
 Exhibit 2: Example Program Listing



  LINE
  45 PROTEST:
  46    PROC (VAR,TBL_ENTRY);
  47    DCL
  48       VAR CHAR(*),
  49       1 TBL_ENTRY,
  50         3 ADDRESS CHAR(2),
  51         3 O BINARY FIXED(15,0),
  52         3 L BINARY FIXED(15,0),
  53         3 FLAG CHAR(1),
  54       SUBSTR BUILTIN;
  55    START_FORM(PROMPT) ALARM;
  56       INSERT_CURSOR(1,1);
  57       FIELD(24,1
  58          ,ENTRY AT CURSOR IS IN ERROR.  PLEASE REENTER.)
  59          SKIP;
  60    END_FORM;
  61    DCL
  62       1 TABLE_FOR_PROMPT STATIC,
  63          2 SIZE BINARY FIXED(15,0) INIT(1),
  64          2 ENTRY(1),
  65             3 ADDRESS CHAR(2),
  66             3 O BINARY FIXED(15,0) INIT(1),
  67             3 L BINARY FIXED(15,0) INIT(80),
  68             3 FLAG CHAR(1),
  69       RESPONSE_TO_PROMPT CHAR(80);
  70    START_FORM(RESET) INHIBIT;
  71       REPEAT_TO_ADDRESS(24,1, ,1,1);
  72       INSERT_CURSOR(1,1);
  73    END_FORM;
  74    SUBSTR(PROMPT.CURSOR.ADDRESS,2,2)=TBL_ENTRY.ADDRESS;
  75    TABLE_FOR_PROMPT.ENTRY(1).ADDRESS=TBL_ENTRY.ADDRESS;
  76    TABLE_FOR_PROMPT.ENTRY(1).FLAG=TBL_ENTRY.FLAG;
  77    CALL PUTSCRN(PROMPT,LENGTH_OF_PROMPT,RETC);
  78    CALL GETSCRN(RESPONSE_TO_PROMPT,TABLE_FOR_PROMPT,RETC);
  79    IF TBL_ENTRY.FLAG='3' THEN
  80       VAR=SUBSTR(RESPONSE_TO_PROMPT,80-TBL_ENTRY.L);
  81    ELSE
  82       VAR=SUBSTR(RESPONSE_TO_PROMPT,1,TBL_ENTRY.L);
  83    CALL PUTSCRN(RESET,LENGTH_OF_RESET,RETC);
  84    END PROTEST;
  85 THE_END:
  86    END EXAMPLE;

  INCLUDED TEXT FOLLOWS FROM DD.MEMBER =  SYSLIB  .PROCS

  88    DCL
  89       PUTSCRN ENTRY(,BINARY FIXED(15,0),BINARY FIXED(15,0))
  90               OPTIONS(ASM,INTER),
  91       GETSCRN ENTRY(CHAR(*),*,BINARY FIXED(15,0)),
  92       (TELCOM,PA2) CONDITION EXTERNAL;
  93    %NOPRINT;
1
 Formatted Displays on 3270 Terminals                       5
 Example Program Commentary




                   Example Program Commentary

 Line 5: The variable RETC is a return code; its use will
 become apparent as we proceed.

 Line 6: The %INCLUDE statment references the PL/I preprocessor
 procedures which translate statements defining forms into PL/I
 code and declarations for external procedures which will be
 called to do I/O with 3270 terminals.  The %INCLUDE statement
 could be included anywhere in the program, but near the top is
 appropriate because it includes declarations (see lines
 88-92). For details on using the preprocessor procedures, see
 the section "PL/I Preprocessing Procedures" below.

 Lines 7-16: These lines define the example form shown in
 Exhibit 1.

 Line 7: This is a START_FORM command. It invokes a
 preprocessor procedure with that name. The parameter, EG, is
 the name of the display; the erase option will blank the
 screen before the form is displayed.

 Line 8: The units of formated displays are fields. The FIELD
 command defines the location, attributes and contents of a
 field.  In this line a field is created to display the title
 "Example Form" in row 2 at column 28.  The option SKIP
 protects the field from modification by the terminal operator
 and causes the cursor to skip over the field as it is moved
 over the screen.  The intense option displays the title in
 bright letters.

 Line 10: This FIELD command creates a field to contain the
 operator's response and declares a variable name and
 attributes for the response [LETTER CHAR(1)].

 Line 11: The INSERT_CURSOR command places the cursor in the
 response field when the form is displayed.

 Lines 13-15: REPEAT_TO_ADDRESS draws lines accross the form
 and inserts text.

 Lines 17-18: Here a form named Refresh is defined. The EAU
 option stands for "Erase All Unprotected;" it will erase form
 entries and insert the cursor in the first unprotected field
 so the operator may fill in the form again.

 Lines 19-24: Since the program communicates with a remote
 terminal it is vulnerable to failures in the communication
 network. If the procedures which send and receive messages are
 unsuccessful they signal condition TELCOM and place a return
 code in the variable declared in line 5. These return codes
1
 Formatted Displays on 3270 Terminals                       6
 Example Program Commentary


 are listed in an appendix. In these lines an on-unit is
 defined to print a message and branch to the program's end. In
 this on-unit a message is printed on file sysprint; this may
 not be an appropriate action, especially if file sysprint is
 allocated to the terminal with which communication just
 failed.

 Lines 25-35: 3270 terminals have two program access keys, PA1
 and PA2. PA1 is resrved by TSO as an attention interupt; it
 will end any program executing under TSO. In these lines a
 meaning is given to the PA2 key; it is also used to end this
 program.

 Lines 27-32: These lines create a form to erase the screen and
 thank the operator.

 Line 33: PUTSCRN is an external procedure which sends messages
 to the terminal. It has three parameters: 1) the name of the
 form to be sent; 2) the length of the form; and 3) a return
 code.  The START_FORM...END_FORM sequence creates the form and
 the variable LENGTH_OF_form.

 Line 36: The program's main part begins by displaying the form
 named EG.

 Lines 37-43: These lines are a loop defining the major work of
 the example program.

 Line 38: GETSCRN is an external procedure which reads the
 operator's response and assigns it to PL/I variables in the
 program. It has three parameters, the first two are created by
 the START_FORM...END_FORM commands, and the third is the
 return code.

 Lines 39-41: In these lines the operator's responses are
 edited and processed. In this example program there is little
 editing and no processing, but the concept is illustrated.  If
 the response is in error, i.e. not a letter, then the do-loop
 is executed; a procedure named PROTEST is called to get a new
 response. Its paramaters are the PL/I variable naming the
 response (created in line 10) and the section of TABLE_FOR_EG
 that describes the field. The dimention value for
 TABLE_FOR_EG.FIELDS is found by counting the unprotected
 fields on the form; in this example LETTER is the first input
 field.  Procedure PROTEST is on the second page of Exhibit 2.

 Line 42-43: After editing and processing the operator's
 response the program erases the form entries with form Refresh
 and branches back to read it again.  This is the end of the
 main program.

 Lines 45-76: This is procedure PROTEST, called from line 40,
 which obtains a corrected entry for a field found to be in
1
 Formatted Displays on 3270 Terminals                       7
 Example Program Commentary


 error.

 Lines 46-53: The parameters to procedure PROTEST are the PL/I
 variable to be corrected and the corresponding entry from the
 TABLE_FOR_form.  Line 48 declares the variable as character.
 Lines 49-53 show that the table entry for each inupt field
 consists of the screen address, its offset from the begining
 of the response variable structure, the length of the variable
 and a flag which indicates whether to translate lower case
 entries to upper case or to right justify data in the
 variable.

 Lines 55-60: These lines define a prompt message to the
 terminal operator. The alarm option will ring a bell at the
 terminal if one is installed.

 Lines 61-69: Since the form Prompt is going to receive data
 back from an input field but does not have an input field of
 its own, it is necessary to provide the variables
 TABLE_FOR_PROMPT and RESPONSE_TO_PROMPT. The structure of
 TABLE_FOR_PROMPT is similar to the structure of variables
 declared by the preprocessor routines so it can be used as a
 parameter to procedure GETSCRN.

 Lines 70-73: Form Reset restores the displayed form by
 removing the error message. The inhibit option keeps the
 keyboard locked.

 Line 74: Each time procedure Prompt is called the address of
 the cursor in the prompting message is reset by this
 statement.

 Line 75: This statement sets the address in the prompt table
 equal to the address of the field in error.

 Line 76: Here the flag for the response to the prompt is set
 equal to the flag for the field in error.

 Lines 77-78: The prompt message is sent and the corrected
 field read.

 Lines 79-82: A flag of 3 indicates that the data for the field
 in error is to be right justified in its field (this is for
 picture data); in these lines the corrected entry is moved
 from the response to the prompt to the parameter data field.
 Depending on the value of the flag the data moved is taken
 from the right or left portion of the response field.

 Line 83: The form is reset for continued processing.
1
 Formatted Displays on 3270 Terminals                       8
 Program Summary and Evaluation






                 Program Summary and Evaluation

 Perhaps the example program is not very impressive at first
 reading.  It does not do very much and its form, "please enter
 a letter," is not very interesting.  But the example program
 does illustrate how to create, display, read back and process
 forms in PL/I.

 The main program illustrates the use of preprocessor
 procedures to define formatted displays. It demonstrates that
 programs using these procedures are readable, that the purpose
 of the preprocessor statements is understandable, and thus
 that they may be coded reliably. The form, EG, though simple,
 shows the use of the I/O procedures GETSCRN and PUTSCRN. And,
 the simplicity of the example program emphasizes two other
 features of these procedures, conditions PA2 and TELCOM.
 These are provided to aid the user in taking advantage of the
 features of 3270 terminals and to simplify the programming for
 special conditions.

 The example becomes more interesting, and much more difficult,
 when the procedure PROTEST is considered. This is intentional.
 Any program requesting information from a terminal operator is
 likely to include data editing and prompting for corrections
 to erroneous input. This is a problem because prompting for
 corrections requires detailed knowledge of program data
 structures and 3270 control. The example solves this problem
 for the user; procedure PROTEST is a generalized procedure;
 the reader of this paper could copy it into his/her own
 program and it would perform the same function.  Procedure
 PROTEST thus serves three purposes in the example.  First it
 illustrates the concept of prompting for corrected responses
 in editing and processing a completed form.  Second it
 illustrates in greater detail than the main procedure the data
 structures produced by the preprocessor procedures.  And
 third, it supplies readers with a prompting procedure that can
 be used in any program.

1
 Formatted Displays on 3270 Terminals                       9
 Procedures PUTSCRN and GETSCRN




                 Procedures PUTSCRN and GETSCRN



 The use of procedures PUTSCRN and GETSCRN was described above.
 Here are a few words about their functions.

 PUTSCRN is an assembly language procedure which sends messages
 to terminals using a TPUT macro instruction with the FULLSCR
 option. Upon receiving control back from the macro, the return
 code is stored, then tested, and the TELCOM condition raised
 if the code is not zero.

 Procedure PUTSCRN requires three parameters: 1) the starting
 address of the message or form to be transmitted to the
 terminal; 2) the address of a half-word integer giving the
 length of the message or form; and 3) the address of a
 half-word field in which the value of the return code is to be
 placed.

 GETSCRN is a procedure in PL/I. It calls a procedure similar
 to PUTSCRN which reads messages back from terminals using a
 TGET macro with the ASIS option. After the call to this
 procedure, the returned message is processed. If PA2 was
 entered, the PA2 condition is signaled. The fields returned by
 the read (those fields that the operator modified) are
 identified and their content is assigned to the appropriate
 PL/I variables using the variable map in TABLE_FOR_form and
 the flag keys. Fields for which the DUP key was pressed are
 left as they were. Fields for which there is new data are
 updated.  In fields that are cursor or pen selectable, if they
 are selected, the character ">" is entered.  Fields for which
 there is no response are set to blank.  The longest message
 returned from a terminal that GETSCRN can process is 1021
 bytes.

 Procedure GETSCRN requires three parameters: 1) a PL/I
 structure containing variables to hold the terminal operator's
 responses; 2) a table containing a screen address, variable
 offset, variable length and translation option flag of each of
 these variables; and 3) a default precision binary variable to
 hold the return code.

 The first two parameters for both PUTSCRN and GETSCRN are
 created by the proprocessor procedures described in this
 document and given standardardized names containing the form
 name assigned by the programmer. The form is called simply by
 its name.  The second parameter to PUTSCRN is called
 LENGTH_OF_name.  The parameters to GETSCRN are called
 RESPONSE_TO_name and TABLE_FOR_name.
1
 Formatted Displays on 3270 Terminals                      10
 Implementation




                         Implementation

 These procedures for formatting 3270 terminals were developed
 to run under IBM OS/MVS with TSO.  They are limited to the
 basic features of the 3270 family.  In particular, the
 extended features of newer models, color, underlining, reverse
 video and blinking, are not supported.  Insofar as possible
 the terminology of the programs, coding and documentation has
 been kept consistent with publication "An Introduction to
 Programming the IBM 3270 Information Display System" (IBM
 GC27-6999) to facilitate the user's understanding.

 The restriction to TSO systems is localized in the two
 assembly language procedures PUTSCRN and TERMGET. These
 contain macro instructions TPUT and TGET which specifically
 perform terminal I/O under TSO. It may be possible to extend
 the use of the PL/I procedures by replacing these two with
 others which perform similar functions in other environments.

 One other dependency is coded into the preprocessor procedure
 START_FORM. At the end of this procedure, where the begining
 of the form message is composed, an escape character is
 inserted before the command code. This escape character is
 required by TSO but may be an error in other environments.  If
 so, it could easily be deleted.

 The library containing this documentation has the following
 members:

 ASM. Here is the assembler source code for procedures PUTSCRN
      and TERMGET. They were written for the F level assembler.

 DOCUMENT. This is the documentation you are reading. It
      contains upper and lower case letters and the first
      column is blank except at page breaks where there is a
      carriage control character, "1".

 MACRO. Here are the preprocessor procedures and declarations
      for GETSCRN and PUTSCRN which must be INCLUDEd in any
      PL/I program referencing them. They are not required to
      compile the procedure GETSCRN in member PLI.

 PLI. This member contains source code for procedure GETSCRN.
      It was written for the PL/I Optimizing Compiler, version
      1, release 3.1.

 To use these procedures, member PLI must be compiled, member
 ASM assembled, and these object modules linked with any
 program using the preprocessor procedures in MACRO. The latter
 can most easily by accessed with a %INCLUDE statement
 referencing a member of a partitioned dataset.
1
 Formatted Displays on 3270 Terminals                      11
 Preprocessor Procedures





                PL/I Preprocessor Procedures for
                       Creating Displays

 Each formatted 3270 display is a message which contains text,
 control characters and format specifications sent by a program
 to a terminal.  A PL/I programmer can use the preprocessor
 procedures described below to create display messages without
 having to become involved in the details of the control
 characters and format specifications.  Each display should be
 started with the START_FORM procedure, ended with the END_FORM
 procedure, and defined by FIELD and other procedures.

 The output of these procedures are PL/I declarations of three
 structures and a scalar variable.  One structure is the form,
 the message to the terminal by the procedure PUTSCRN with its
 text, control characters and format specifications.  It has
 the name given in the name field of the START_FORM procedure.
 The second structure contains the variables to which the
 terminal operators' responses are assigned by the procedure
 GETSCRN at execution time; it is named RESPONSES_TO_name.  The
 third structure, named TABLE_FOR_name, is a map of the second
 which procedure GETSCRN uses to assign a terminal response to
 a PL/I variable.  The scalar variable is named LENGTH_OF_name;
 its name identifies its value.

 These procedures use preprocessor variables whose names become
 reserved words in PL/I programs that include these procedures.
 These names are listed below.

 In the procedures there are a few edits on a programmer's
 coding that may produce diagnostic messages (for instance, it
 is an error to start a new form while another form is still
 pending), but for the most part a programmer is responsible
 for the correctness of his/her coding.  Errors will result in
 compilation errors or displays that do not conform to
 specifications.

 In the following descriptions the syntax given is not the only
 possible coding that will invoke the procedures, but it is the
 recommended one.  All of the procedures' parameters, except
 where noted, are optional.  Parameters within parantheses are
 positional paramaters.  If they are omitted, their place
 should be marked with a comma when succeeding parameters are
 coded.  The "options" are keyword parameters; as many as
 needed may be coded in any order in a list delimited with
 blanks.  The semicolons are required.  Upper case characters
 are used for required literals.  Lower case letters are used
 where the programmer may make a substitution.  The pair "r,c"
 is used to describe a screen address, given as integer row and
 column numbers.  The standard screen has twenty-four rows and
1
 Formatted Displays on 3270 Terminals                      12
 Preprocessor Procedures


 eighty columns.  Coding the "r,c" pair resets the current
 screen address.





                      START_FORM PROCEDURE

 Syntax

                   START_FORM(name) options;

 "name" is a PL/I variable name for the form; it is delimited
 by the parantheses and may not contain blanks.  It is used to
 create a symbolic name for the data structures to be passed as
 parameters at execution time to the procedures PUTSCRN and
 GETSCRN as described above.  The START_FORM procedure must be
 used to begin any form or message to be sent to a terminal.

 The options are listed below with an explanation of their
 effect when the form is displayed.

           ERASE       erases screen
           EAU         erases all unprotected fields
           ALARM       sounds the terminal's alarm,
                       if one is installed
           INHIBIT     does not unlock the keyboard
           MDTS        retains modified data tags

 ERASE and EAU are altenatives.  Since the ERASE option blanks
 the screen it is used to display new forms.  The EAU option
 can be used to erase the entries on a previously displayed
 form, as when an operator is repeatedly completing the same
 form in data entry tasks.  The EAU option also resets the
 MDTs, unlocks the keyboard and positions the cursor at the
 first unprotected address.  The alarm feature is an option
 which may or may not be installed on individual teminals.  The
 modified data tags control the transmition of data from the
 terminal to the program; the standard read action transmits
 only those fields that have been modified.  The default
 display option is to reset the MDTs so that only those fields
 modified after a display are transmitted by a subsequent read.
 The programmer can, however, cause previously modified fields
 to be retransmitted by specifying MDTS to retain the settings
 on the modified data tags.
1
 Formatted Displays on 3270 Terminals                      13
 Preprocessor Procedures




                       END_FORM PROCEDURE

 Syntax

                           END_FORM;

 The END_FORM procedure has no parameters.  It must be invoked
 at the end of every form.






                        FIELD PROCEDURE

 Syntax

             FIELD(r,c,content,
                   response variable declaration,
                   length of response variable,flag) options;

 The position in the display at the current address will be
 taken up by an invisible attribute character and neither the
 program nor the operator will be able to make an entry in it.
 Choose the attributes of the field created by the attribute
 character from the options listed below.  The programmer can
 display text immediately following the attribute character by
 coding an entry in the contents position.  The entry is
 delimited by the commas and may contain blanks and any
 displayable characters, except commas.  If the field is
 unprotected the programmer should provide a variable to
 contain the response.  The entry in this position is used in a
 PL/I declare statement so it must contain a unique name and
 either the character or picture attribute with length
 specifications.  The next entry, the length of the response
 variable, must agree with the length specification in the
 declaration for the response variable.  It is up to the
 programmer to enforce this agreement as the procedure does not
 test it.

 The flag field controls the assignment of data to the response
 variable by the procedure GETSCRN during execution.  It can be
 given the following values:

           TRANSLATE   translation of lower to upper
             or T      case characters
           RADJ        right adjusts data in field
                       (to create correct alignment
                       of numeric picture data)
1
 Formatted Displays on 3270 Terminals                      14
 Preprocessor Procedures



 The default attributes of fields are unprotected, alphameric,
 displayed at lower intensity, not selectable by light pen or
 cursor, and the modified data tag initialized off.  Any of
 these attributes may be changed by coding one of the following
 options:

           PROT        protected, the operator cannot
                       enter data in the field
           NUM         only numeric data may be
                       entered (terminal option)
           SKIP        automatic tab over field
                       from end of previous field
           INTENSE     high intensity display
           SELECTABLE  selectable by pen or
                       cursor (terminal option)
           SECRET      field contents not displayed
           MDT         modified data tag set on





                  REPEAT_TO_ADDRESS PROCEDURE

 Syntax

           REPEAT_TO_ADDRESS(r,c,character,r,c,text);

 This procedure can be used to partition a screen display by
 repeating a character across it.  The first "r,c" pair is
 optional and may be used to set the screen address for the
 first character of the repetition.  The "character" parameter
 must be specified and must be only one character in length.
 The second "r,c" pair is required and specifies the next
 position after the end of the repetition.  REPEAT_TO_ADDRESS
 resets the current address to the second "r,c" pair.  The
 "text" parameter can be used to insert text after the
 repetition.
1
 Formatted Displays on 3270 Terminals                      15
 Preprocessor Procedures






                     SET_ADDRESS PROCEDURE

 Syntax

                     SET_ADDRESS(r,c,text);

 The SET_ADDRESS procedure can be used to reset the screen
 address.  The most likely use for it is to insert text
 elsewhere than the begining of a field.  The "r,c" pair is
 required.  The "text" parameter is optional and will cause the
 given text to be displayed starting at the specified row and
 column address.





                    INSERT_CURSOR PROCEDURE

 Syntax

                      INSERT_CURSOR(r,c);

 The INSERT_CURSOR procedure should be invoked once for each
 display to specify the cursor location in the form.
 Additional invocations will cause an error.  Invoking the
 INSERT_CURSOR procedure without parameters immediately after
 invoking a FIELD procedure that creates an unprotected field
 with no displayed text will display the cursor at the start of
 the field.






                  ERASE_UNPROTECTED PROCEDURE

 Syntax

                ERASE_UNPROTECTED(r,c,r,c,text);

 The ERASE_UNPROTECTED procedure erases all of the unprotected
 fields from the current address through the position before
 the address specified by the second "r,c" pair, which is
 required.  The first "r,c" pair may be used to reset the
 current address.  The process of erasing resets the current
 address to that of the second "r,c" pair where text may be
 displayed by coding the text parameter.
1
 Formatted Displays on 3270 Terminals                      16
 Preprocessor Procedures







                        OTHER PROCEDURES

 In addition to the above procedures there are two others,
 FORM_TEXT and BASE64, which are called from the above
 procedures.  BASE64 does the conversion of the screen
 addresses from decimal to device codes; it is unlikely that a
 user would want to invoke it directly.  A user might, however,
 want to invoke the FORM_TEXT procedure to insert a text at the
 current screen address.

 Syntax

                        FORM_TEXT(text);

 "text" is simply the text to appear on the form.





                         RESERVED NAMES

              ADDRESS                    INSERT
              ADDRESSES                  L
              ATTRIBUTE                  LENGTH
              COMMA                      LENGTHS
              COMMAND                    O
              CURSOR                     OFFSET
              ERASE                      OFFSETS
              FIELD_NAME                 REPEAT_NUMBER
              FIELD_NUMBER               RESPONSE_VARIABLES
              FLAG                       UNPROTECTED_FIELDS
              FLAGS                      VARIABLES_LENGTH
              FORM_LENGTH                WITH
              FORM_NAME
1
 Formatted Displays on 3270 Terminals                      17
 Appendix: Return codes





             Return Codes from PUTSCRN and GETSCRN

 The procedures PUTSCRN and GETSCRN place the value zero in the
 return code if the transmition is successful. If the
 transmition fails then the following retrun codes may result:

      Code   Meaning

       08    An attention interruption occurred while the
             routine was processing. The message was not
             sent or received.

       12    The input buffer was not large enough to accept
             the entire message from the terminal. The buffer
             in procedure GETSCRN is 1021 bytes long.

       20    The terminal has been disconnected and could
             not be reached.

 If the return code is nonzero procedures PUTSCRN and GETSCRN
 signal the PL/I condition TELCOM.
1








              Formatted Displays on 3270 Terminals

                       Table of Contents




     1)  Introduction                                   1

     2)  Exhibit 2: Example Program Listing             3

     3)  Example Program Commentary                     5

     4)  Program Summary and Evaluation                 8

     5)  Procedures PUTSCRN and GETSCRN                 9

     6)  Implementation                                10

     7)  Preprocessor Procedures                       11
             START_FORM                                12
             END_FORM                                  13
             FIELD                                     13
             REPEAT_TO_ADDRESS                         14
             SET_ADDRESS                               15
             INSERT_CURSOR                             15
             ERASE_UNPROTECTED                         15
             Others                                    16
             Reserved Names                            16

     8)  Appendix: Return codes                        17
