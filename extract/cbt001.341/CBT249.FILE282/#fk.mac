***********************************************************************
*                                                                     *
*              .FK (FLOATING KEEP) --- CONTROL                        *
*                                                                     *
***********************************************************************
         SPACE
FK      $ENTER ,
        $CALL  GETYESNO            GET AND TEST ARGUMENT
         BC    BPOS,FKBEG          BRANCH IF START
         BC    BNEG,FKEND          BRANCH IF END
         CLI   YNRESULT,YNDUMP     WAS ARGUMENT 'DUMP' .Q
         BE    FKDUMP              YES, BRANCH TO PRINT
         BC    BOMIT,FKE003        BRANCH IF ARG OMITTED
         B     FKE005              BRANCH IF ARG INVALID
         SPACE
FKBEG    DS    0H
         CLI   ICORFLG,ICORNONE    ARE WE FORMATTING INTO CORE .Q
         BNE   FKE012              ERROR IF YES
         LA    R1,ICORSLEN         NEED THIS MUCH SPACE
        $CALL  GETCELL             GET THE SPACE
         BC    BNEG,FKE024         BRANCH IF FAILURE
         USING ICORSAVE,TEMP       SAVE AREA LOOKS LIKE THIS
         ST    TEMP,FKQSAVE        SAVE AREA POINTER
         MVC   ICOROLD1,FMTOLD1    SAVE CURRENT SWITCHES
         MVC   ICOROLD2,FMTOLD2    SAVE PAGE DESCRIPTORS
         MVC   ICORBX,BXPTR        SAVE BOX BUILD POINTER
         XC    BXPTR,BXPTR         CLEAR CURRENT BOX IN PROGRESS
         MVC   ICOROO,OOANCH       SAVE OUTPUT OVERLAY ANCHOR
         XC    OOANCH,OOANCH       CLEAR CURRENT OUTPUT OVERLAYS
         MVC   ICORSKSP,SKSP       SAVE CONDITIONAL SKIP/SPACE
         XC    SKSP,SKSP           CLEAR CURRENT SKIP/SPACE
         DROP  TEMP
         SPACE
         XC    OLDCOUNT,OLDCOUNT   WIPE OUT PREVIOUS LINE
         MVI   ICORFLG,ICORFK      NOW SAVING FLOATING KEEP
         LA    TEMP,FKAREA         FLOATING KEEP CONTROL
         ST    TEMP,ICORANCH       SAVE THIS FOR LATER
         LH    TEMP,INDL           RESET INDENT
         AH    TEMP,OFFLI          ..
         STH   TEMP,INDL           ..
         STH   TEMP,RMARGIN        SET RIGHT MARGIN
         SR    TEMP,TEMP           ZERO WORK REGISTER
         STH   TEMP,INDENTR        ZERO RIGHT INDENT VALUE
         STH   TEMP,PICNT          ZERO PARAGRAPH INDENT
         STH   TEMP,HICNT          ZERO HANGING INDENT
         STH   TEMP,UNDL           ZERO UNDENT VALUE
         STH   TEMP,OFFLI          ZERO OFFSET VALUE
         STH   TEMP,CECNT          ZERO CENTER VALUE
         STH   TEMP,LICNT          ZERO LITERAL VALUE
         B     FKDONE              START SAVING THE FLOATING KEEP
         SPACE
FKEND    DS    0H
         CLI   ICORFLG,ICORFK      NOW SAVING A .FK SEQUENCE INCORE .Q
         BNE   FKE012              ERROR IF NOT
        $CALL  PRINT               CLEAR LAST .FK LINE FROM BUFFER
         SPACE
        $CALL  GETNUM              GET ANY EXTRA USER REQUEST
         BC    15-BDNO,FKEND01     BRANCH IF NOT INVALID
         MVI   EFLAG005,ERRSET     SET INVALID OPERAND
         SR    COUNT,COUNT         AND USER ZERO EXTRA VALUE
         B     FKEND02             AND CONTINUE
FKEND01  DS    0H
         BC    15-BOMIT,FKEND02    BRANCH IF NOT OMITTED
         SR    COUNT,COUNT         SET USER EXTRA VALUE ZERO
FKEND02  DS    0H
         LA    R1,FKAREA           FLOATING KEEP DESCRIPTOR AREA
        $CALL  CPENDS              TERMINATE THE BLOCK
         SPACE
         L     TEMP,FKQSAVE        RESTORE SAVED AREA POINTER
         XC    FKQSAVE,FKQSAVE     CLEAR POINTER
         USING ICORSAVE,TEMP       AREA LOOKS LIKE THIS
        $CALL  BXCLR               DELETE ANY BOX IN PROGRESS
         LA    R1,OOANCH           OUTPUT OVERLAY ANCHOR
        $CALL  OVCLR               DELETE ANY IN PROGRESS
        $MVC   FMTOLD1,ICOROLD1    RESTORE CURRENT SWITCHES
        $MVC   FMTOLD2,ICOROLD2    RESTORE PAGE DESCRIPTORS
        $MVC   BXPTR,ICORBX        RESTORE BOX IN PROGRESS
        $MVC   OOANCH,ICOROO       RESTORE OUTPUT OVERLAY IN PROGRESS
        $MVC   SKSP,ICORSKSP       RESTORE CONDITIONAL SKIP/SPACE
         LA    R0,ICORSAVE         POINT TO AREA
         LA    R1,ICORSLEN         LENGTH OF SAVE AREA
        $CALL  FREECELL            RELEASE WORK AREA
         DROP  TEMP
         SPACE
         MVI   ICORFLG,ICORNONE    RESET SAVING FLOAT SWITCH
         XC    ICORANCH,ICORANCH   CLEAR FLOATING KEEP CONTROL
         SPACE
        $IFON  SWITCHS,FEMPTY,FKEND06   BRANCH IF PAGE NOW EMPTY
         LH    TEMP,PLCT           COUNT OF LINES LEFT
         S     TEMP,FKQCNT         LESS QUEUED LINE COUNT
         SH    TEMP,SKSPCCNT       LESS ANY CONDITIONAL SPACES
         SR    TEMP,COUNT          LESS USER'S EXTRA REQUEST
         BM    FKEND07             BRANCH IF WON'T FIT
         LH    R1,BMMRG            BOTTOM MARGIN
         AH    R1,FNSEP            PLUS FOOTNOTE MARGIN
         CR    TEMP,R1             BELOW BOTTOM MARGIN .Q
         BL    FKEND07             WON'T FIT IF YES
         LA    R1,FKAREA           .FK CONTROL DESCRIPTOR
        $CALL  CPFKPRT             DUMP ALL DATA NOW
         B     FKEND07             GO TO RETURN
FKEND06  DS    0H
         XC    SKSP,SKSP           CLEAR CONDITIONAL SPACES
        $CALL  PAGETOP             PRINT HEADER AND SAVED LINES
FKEND07  DS    0H
         B     FKDONE              ALL THROUGH
         SPACE
FKDUMP   DS    0H
         CLI   ICORFLG,ICORNONE    CURRENTLY FORMATTING INCORE .Q
         BNE   FKE012              ERROR IF YES
         SPACE
        $CALL  GETNUM              GET BLOCK COUNT
         LR    X3,COUNT            RETAIN BLOCK COUNT
         BC    BDNO,FKE005         ERROR IF INVALID
         BC    BNEG,FKE014         ERROR IF TOO SMALL
         BC    BPOS,FKDUMP01       BRANCH IF VALID
         L     X3,F32767           ELSE DO LARGE NUMBER OF BLOCKS
FKDUMP01 DS    0H
         LTR   X3,X3               ANYTHING TO DO .Q
         BNP   FKDUMP05            BRANCH IF NOT
         LA    R1,FKAREA           FLOATING KEEP DESCRIPTOR
        $CALL  CPFKNXT             ANY DATA TO PRINT .Q
         BC    BOMIT,FKDUMP05      BRANCH IF NOT
        $CALL  PRINT               CAUSE A BREAK BEFORE 'DUMP'
         SPACE
FKDUMP02 DS    0H
         S     X3,F1               DECREMENT BLOCK COUNT
         BM    FKDUMP05            BRANCH IF DONE
         LA    R1,FKAREA           POINT TO FK DESCRIPTOR
        $CALL  CPFKNXT             GET NEXT BLOCK
         BC    BOMIT,FKDUMP05      BRANCH IF EMPTY
         USING FNQELEM,TEMP        LAST RECORD POINTER
        $ON    FNQFLAG,FNQONE      PRINT ONLY ONE BLOCK
         DROP  TEMP
        $IFON  SWITCHS,FEMPTY,FKDUMP03  BRANCH IF PAGE EMPTY
         LH    TEMP,PLCT           LINES LEFT ON THIS PAGE
         S     TEMP,FKQCNTF        LESS LENGTH OF FIRST BLOCK
         BM    FKDUMP04            BRANCH IF WON'T FIT
         LH    R1,BMMRG            BOTTOM MARGIN
         AH    R1,FNSEP            PLUS FOOTNOTE SEPARATOR
         CR    TEMP,R1             BELOW BOTTOM MARGIN .Q
         BL    FKDUMP04            WON'T FIT IF YES
         LA    R1,FKAREA           .FK CONTROL DESCRIPTOR
        $CALL  CPFKPRT             DUMP FIRST BLOCK NOW
         B     FKDUMP02            AND TRY AGAIN
FKDUMP03 DS    0H
        $CALL  PAGETOP             PRINT HEADER AND SAVED BLOCK
         B     FKDUMP02            AND TRY AGAIN
FKDUMP04 DS    0H
        $CALL  PAGE                TERMINATE THIS PAGE
         B     FKDUMP03            AND PRINT ON THE NEXT
FKDUMP05 DS    0H
         B     FKDONE              ALL THROUGH
         SPACE
FKE003   DS    0H
         MVI   EFLAG003,ERRSET     OMITTED CONTROL WORD
         B     FKDONE              GO TO TERMINATE
FKE005   DS    0H
         MVI   EFLAG005,ERRSET     INVALID CONTROL WORD
         B     FKDONE              GO TO TERMINATE
FKE012   DS    0H
         MVI   EFLAG012,ERRSET     ILLEGAL CONTROL WORD
         B     FKDONE              GO TO TERMINATE
FKE014   DS    0H
         MVI   EFLAG014,ERRSET     OPERAND TOO SMALL
         B     FKDONE              GO TO TERMINATE
FKE024   DS    0H
         MVI   EFLAG024,ERRSET     NO STORAGE FOR BLOCK
         B     FKDONE              GO TO TERMINATE
         SPACE
FKDONE   DS    0H
        $EXIT  RC=0                DONE WITH FLOATING KEEP
