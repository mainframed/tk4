***********************************************************************
*                                                                     *
*              .FB (FLOATING BLOCK) --- CONTROL                       *
*                                                                     *
***********************************************************************
         SPACE
FB      $ENTER ,
        $CALL  GETYESNO            GET AND TEST ARGUMENT
         BC    BPOS,FBBEG          BRANCH IF START
         BC    BNEG,FBEND          BRANCH IF END
         BC    BOMIT,FBE003        BRANCH IF ARG OMITTED
         CLI   YNRESULT,YNDUMP     WAS ARGUMENT 'DUMP' .Q
         BE    FBDUMP              BRANCH IF YES
         B     FBE005              BRANCH IF ARG INVALID
         SPACE
FBBEG    DS    0H
         CLI   ICORFLG,ICORNONE    ARE WE FORMATTING INTO CORE .Q
         BNE   FBE012              ERROR IF YES
         LA    R1,ICORSLEN         NEED THIS MUCH SPACE
        $CALL  GETCELL             GET THE SPACE
         BC    BNEG,FBE024         BRANCH IF FAILURE
         USING ICORSAVE,TEMP       SAVE AREA LOOKS LIKE THIS
         ST    TEMP,FBQSAVE        SAVE AREA POINTER
         MVC   ICOROLD1,FMTOLD1    SAVE CURRENT SWITCHES
         MVC   ICOROLD2,FMTOLD2    SAVE PAGE DESCRIPTORS
         MVC   ICORBX,BXPTR        SAVE BOX BUILD POINTER
         XC    BXPTR,BXPTR         CLEAR CURRENT BOX IN PROGRESS
         MVC   ICOROO,OOANCH       SAVE OUTPUT OVERLAY ANCHOR
         XC    OOANCH,OOANCH       CLEAR CURRENT OUTPUT OVERLAYS
         MVC   ICORSKSP,SKSP       SAVE CONDITIONAL SKIP/SPACE
         XC    SKSP,SKSP           CLEAR CURRENT SKIP/SPACE
         DROP  TEMP
         SPACE
         XC    OLDCOUNT,OLDCOUNT   WIPE OUT PREVIOUS LINE
         MVI   ICORFLG,ICORFB      NOW SAVING FLOATING BLOCK
         LA    TEMP,FBAREA         FLOATING BLOCK CONTROL
         ST    TEMP,ICORANCH       SAVE THIS FOR LATER
         LH    TEMP,INDL           RESET INDENT
         AH    TEMP,OFFLI          ..
         STH   TEMP,INDL           ..
         STH   TEMP,RMARGIN        SET RIGHT MARGIN
         SR    TEMP,TEMP           ZERO WORK REGISTER
         STH   TEMP,INDENTR        ZERO RIGHT INDENT VALUE
         STH   TEMP,PICNT          ZERO PARAGRAPH INDENT
         STH   TEMP,HICNT          ZERO HANGING INDENT
         STH   TEMP,UNDL           ZERO UNDENT VALUE
         STH   TEMP,OFFLI          ZERO OFFSET VALUE
         STH   TEMP,CECNT          ZERO CENTER VALUE
         STH   TEMP,LICNT          ZERO LITERAL VALUE
         B     FBDONE              START SAVING THE FLOATING BLOCK
         SPACE
FBEND    DS    0H
         CLI   ICORFLG,ICORFB      NOW SAVING A .FB SEQUENCE INCORE .Q
         BNE   FBE012              ERROR IF NOT
        $CALL  PRINT               CLEAR LAST .FB LINE FROM BUFFER
         SPACE
        $CALL  GETNUM              GET ANY EXTRA USER REQUEST
         BC    15-BDNO,FBEND01     BRANCH IF NOT INVALID
         MVI   EFLAG005,ERRSET     SET INVALID OPERAND
         SR    COUNT,COUNT         AND USER ZERO EXTRA VALUE
         B     FBEND02             AND CONTINUE
FBEND01  DS    0H
         BC    15-BOMIT,FBEND02    BRANCH IF NOT OMITTED
         SR    COUNT,COUNT         SET USER EXTRA VALUE ZERO
FBEND02  DS    0H
         LA    R1,FBAREA           FLOATING BLOCK DESCRIPTOR AREA
        $CALL  CPENDS              TERMINATE THE BLOCK
         SPACE
         L     X1,FBQANCH          FLOATING BLOCK ANCHOR
         LTR   X1,X1               ANY DATA AT ALL .Q
         BZ    FBEND05             BRANCH IF NONE
         USING FNQELEM,X1          TELL THE ASSEMBLER WHERE WE ARE
FBEND03  DS    0H
         OC    FNQFCHN,FNQFCHN     LAST ENTRY .Q
         BZ    FBEND04             BRANCH IF YES
         L     X1,FNQFCHN          NEXT ENTRY POINTER
         B     FBEND03             SEARCH FORWARD
FBEND04  DS    0H
        $ON    FNQFLAG,FNQONE      PRINT BUT ONE AT A TIME
         DROP  X1
         SPACE
FBEND05  DS    0H
         L     TEMP,FBQSAVE        RESTORE SAVED AREA POINTER
         XC    FBQSAVE,FBQSAVE     CLEAR POINTER
         USING ICORSAVE,TEMP       AREA LOOKS LIKE THIS
        $CALL  BXCLR               DELETE ANY BOX IN PROGRESS
         LA    R1,OOANCH           OUTPUT OVERLAY ANCHOR
        $CALL  OVCLR               DELETE ANY IN PROGRESS
        $MVC   FMTOLD1,ICOROLD1    RESTORE CURRENT SWITCHES
        $MVC   FMTOLD2,ICOROLD2    RESTORE PAGE DESCRIPTORS
        $MVC   BXPTR,ICORBX        RESTORE BOX IN PROGRESS
        $MVC   OOANCH,ICOROO       RESTORE OUTPUT OVERLAY IN PROGRESS
        $MVC   SKSP,ICORSKSP       RESTORE CONDITIONAL SKIP/SPACE
         LA    R0,ICORSAVE         POINT TO AREA
         LA    R1,ICORSLEN         LENGTH OF SAVE AREA
        $CALL  FREECELL            RELEASE WORK AREA
         DROP  TEMP
         SPACE
         MVI   ICORFLG,ICORNONE    RESET SAVING INCORE SWITCH
         XC    ICORANCH,ICORANCH   CLEAR FLOATING BLOCK CONTROL
         SPACE
         LA    R1,FBAREA           POINT TO FB ANCHOR DATA
        $CALL  CPFKNXT             GET COUNT OF FIRST BLOCK
         B     FBDONE              ALL THROUGH
         SPACE
FBDUMP   DS    0H
         CLI   ICORFLG,ICORNONE    CURRENTLY FORMATTING INCORE .Q
         BNE   FBE012              ERROR IF YES
        $CALL  GETNUM              GET CALL COUNT
         BC    BDNO,FBE005         ERROR IF INVALID
         BC    BNEG,FBE014         ERROR IF TOO SMALL
         BC    BPOS,FBDUMP01       BRANCH IF VALID
         L     COUNT,F32767        ELSE DO A LARGE NUMBER
FBDUMP01 DS    0H
         S     COUNT,F1            DECREMENT CALL COUNT
         BM    FBDUMP04            BRANCH IF DONE
FBDUMP02 DS    0H
         L     X1,FBQANCH          FLOATING BLOCK ANCHOR
         LTR   X1,X1               ANY DATA AT ALL .Q
         BZ    FBDUMP04            QUIT IF NONE
        $IFOFF SWITCHS,FEMPTY,FBDUMP03  BRANCH IF PAGE NOT EMPTY
        $CALL  PAGETOP             PRINT PAGE HEADINGS FIRST
FBDUMP03 DS    0H
         LA    R1,FBAREA           .FB CONTROL DESCRIPTOR
        $CALL  CPFKPRT             PRINT ALL DATA NOW
         BC    BOMIT,FBDUMP04      BRANCH IF LAST BLOCK DONE
         BC    BPOS,FBDUMP01       BRANCH IF FIRST BLOCK DONE
        $CALL  PAGE                TERMINATE THIS PAGE
         B     FBDUMP02            AND CONTINUE WITH CURRENT BLOCK
FBDUMP04 DS    0H
         LA    R1,FBAREA           .FB CONTROL DESCRIPTOR
        $CALL  CPFKNXT             SET UP NEXT BLOCK LENGTH
         B     FBDONE              AND GO TO RETURN
         SPACE
FBE003   DS    0H
         MVI   EFLAG003,ERRSET     OMITTED CONTROL WORD
         B     FBDONE              GO TO TERMINATE
FBE005   DS    0H
         MVI   EFLAG005,ERRSET     INVALID CONTROL WORD
         B     FBDONE              GO TO TERMINATE
FBE012   DS    0H
         MVI   EFLAG012,ERRSET     ILLEGAL CONTROL WORD
         B     FBDONE              GO TO TERMINATE
FBE014   DS    0H
         MVI   EFLAG014,ERRSET     OPERAND TOO SMALL
         B     FBDONE              GO TO TERMINATE
FBE024   DS    0H
         MVI   EFLAG024,ERRSET     NO STORAGE FOR SAVE DATA
         B     FBDONE              GO TO TERMINATE
         SPACE
FBDONE   DS    0H
        $EXIT  RC=0                DONE WITH FLOATING BLOCK
