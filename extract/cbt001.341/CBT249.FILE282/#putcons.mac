***********************************************************************
*                                                                     *
*              'PUTCONS' --- WRITE TO ONLINE TERMINAL                 *
*                                                                     *
***********************************************************************
         SPACE
*        TO ENTER  --  (R0)  -> RDW OF RECORD TO DISPLAY
*
*        ON EXIT   --  CC = BPOS  IF DONE
*                      CC = BNEG  IF NOT DONE
         SPACE
PUTCONS $ENTER ,
        $IFON  TTYPE,TFILE,PUTCON01     BRANCH IF OUTPUT TO A FILE
        $IFON  SWITCHS,TSOWS,PUTCON01   BRANCH IF TSO
        $IFON  SWITCHS,CMSWS,PUTCON01   BRANCH IF CMS
         SPACE
        $CC    NEG                 SKIP THIS FUNCTION
         B     PUTCON14            AND RETURN
         SPACE
PUTCON01 DS    0H
         LR    R1,R0               RDW POINTER
         MVC   SAVEH0,0(R1)        ALIGN RECORD LENGTH
         LH    TEMP,SAVEH0         LENGTH INCL RDW
         S     TEMP,F5             LENGTH-1 OF DATA
         LA    R0,1(,TEMP)         RETAIN DATA LENGTH
         LA    X1,4(,R1)           POINT TO DATA
        $IFON  TTYPE,TFILE,PUTCON04     BRANCH IF OUTPUT TO A FILE
         L     X2,VDEVICEA         TERMINAL DESCRIPTION
         LTR   X2,X2               DOES BLOCK EXIST .Q
         BZ    PUTCON11            BRANCH IF NOT
         USING TDEVICEA,X2         AREA LOOKS LIKE THIS
         CLI   TDEVHMI,X'00'       HORIZONTAL MOTION INDEX DEFINED ,Q
         BNE   PUTCON04            BRANCH IF YES
         CLI   TDEVNLF,X'00'       NEGATIVE LINEFEED DEFINED .Q
         BNE   PUTCON04            BRANCH IF YES
         DROP  X2
         EX    TEMP,PUTCTRT        ANY INTERESTING CHARACTERS .Q
         BZ    PUTCON11            BRANCH IF NONE
         SPACE
PUTCON04 DS    0H
         L     TEMP,BUFF3AD        WORK AREA START ADDRESS
         MVC   0(256,TEMP),BLANKS  CLEAR GOT WORK AREA
         XC    0(4,TEMP),0(TEMP)   CLEAR AREA FOR RDW
         MVI   SAVEX0,TDEVHMI-TDEVICEA   HORIZONTAL MOTION INDEX
         LA    TEMP,4(,TEMP)       TARGET ADDRESS FOR DATA
         ST    TEMP,SAVEF0         SET POINTER FOR OUTPUT
         MVC   SAVEH0,TDEVWID      SET DEFAULT CHAR WIDTH
         LA    R1,SAVED0           POINT TO PARM AREA
        $CALL  LKGESC              AND ENTER ESCAPE
         LR    X2,R1               NEXT FREE CHAR
        $IFOFF SWITCHS,FOVLY,PUTCON05   BRANCH IF NO OVERLAY LINE
         MVI   SAVEX0,TDEVNLF-TDEVICEA  NEGATIVE LINEFEED
         ST    X2,SAVEF0           WHERE TO PUT IT
         LA    R1,SAVED0           POINT TO PARM AREA
        $CALL  LKGESC              AND ENTER ESCAPE
         LR    X2,R1               REMEMBER FIRST FREE
PUTCON05 DS    0H
         LTR   R0,R0               ANY MORE TO DO .Q
         BNP   PUTCON10            BRANCH IF NOT
         LR    TEMP,R0             LENGTH OF REMAINDER
         BCTR  TEMP,0              LENGTH-1 OF REMAINDER
         SR    COUNT,COUNT         PREPARE FOR A HIT
         EX    TEMP,PUTCTRT        ANY INTERESTING CHARS .Q
         BZ    PUTCON09            BRANCH IF NONE
         SPACE
         LR    TEMP,R1             ENDED HERE
         SR    TEMP,X1             AND STARTED HERE
         BZ    PUTCON06            BRANCH IF IMMEDIATE
         SR    R0,TEMP             DECREMENT LENGTH REMAINING
         BCTR  TEMP,0              LENGTH-1 TO MOVE
         EX    TEMP,PUTCMVC        ADD DATA
         LA    X1,1(TEMP,X1)       STOP INPUT CHAR
         LA    X2,1(TEMP,X2)       NEXT OUTPUT CHAR
PUTCON06 DS    0H
         EX    R0,PUTCEX1-4(COUNT) DO AS REQUIRED
         ST    X2,SAVEF0           OUTPUT POINTER
         LA    R1,SAVED0           PARM POINTER
        $CALL  LKGESC              ADD ESCAPE
         LR    X2,R1               NEXT FREE OUTPUT
PUTCON07 DS    0H
         MVC   0(1,X2),0(X1)       STOP CHARACTER
         TR    0(1,X2),DIABOUT     TRANSLATE SAME
         LA    X2,1(,X2)           BUMP OUTPUT POINTER
         LA    X1,1(,X1)           AND INPUT POINTER
         BCTR  R0,0                DECREMENT LENGTH LEFT
         EX    R0,PUTCEX2-4(COUNT) DO AS REQUIRED
         ST    X2,SAVEF0           OUTPUT POINTER
         LA    R1,SAVED0           PARM POINTER
        $CALL  LKGESC              ADD ESCAPE
         LR    X2,R1               NEXT FREE OUTPUT
PUTCON08 DS    0H
         B     PUTCON05            AND CONTINUE
         SPACE
PUTCEX1  B     PUTCON07            TRANSLATE CHAR ONLY
         MVI   SAVEX0,TDEVSUP-TDEVICEA  SUPERSCRIPT
         MVI   SAVEX0,TDEVSUB-TDEVICEA  SUBSCRIPT
PUTCEX2  B     PUTCON08            TRANSLATE CHAR ONLY
         MVI   SAVEX0,TDEVSUB-TDEVICEA  SUPERSCRIPT
         MVI   SAVEX0,TDEVSUP-TDEVICEA  SUBSCRIPT
         SPACE
PUTCMVC  MVC   0(*-*,X2),0(X1)     MOVE DATA
PUTCTRT  TRT   0(*-*,X1),DIABIN    SEARCH FOR SPECIAL CHARS
         SPACE
PUTCON09 DS    0H
         EX    TEMP,PUTCMVC        MOVE REMAINDER
         LA    X2,1(TEMP,X2)       NEXT FREE SLOT
PUTCON10 DS    0H
         L     R1,BUFF3AD          START OF WORK AREA
         SR    X2,R1               LENGTH OF RESULT
         STH   X2,0(,R1)           SET RESULTING LENGTH
         SPACE
PUTCON11 DS    0H
        $IFON  TTYPE,TFILE,PUTCON12     BRANCH IF OUTPUT TO A FILE
         MVC   SAVEH0,0(R1)        ALIGN RECORD LENGTH
         LH    R0,SAVEH0           RECORD LENGTH INCL RDW
         S     R0,F4               LENGTH OF DATA
         LA    R1,4(,R1)           POINTER TO DATA
        $CALL  SYCONSW             LET HIM PRINT IT
         B     PUTCON13            AND CONTINUE
PUTCON12 DS    0H
         LR    R0,R1               POINT TO RDW
        $CALL  PUTPRT              AND CALL PRINT FILE ROUTINE
         SPACE
PUTCON13 DS    0H
        $CC    POS                 ALL COMPLETE
         SPACE
PUTCON14 DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*              DIABLO TERMINAL CONVERSION TABLES                      *
*                                                                     *
***********************************************************************
         SPACE
*        INPUT CHARACTERS --  X'04'  TRANSLATE TO DIABOUT
*                             X'08'  SUPERSCRIPT TRANSLATE TO DIABOUT
*                             X'0C'  SUBSCRIPT TRANSLATE TO DIABOUT
         SPACE
         DC    0D'0'               ALIGN TRANSLATE TABLES
DIABIN   DC    256AL1(0)           INPUT DIABLO CHARACTERS
         ORG   DIABIN+X'00'
         DC    X'04'                    NULL CHARACTER
         ORG   DIABIN+X'8F'
         DC    X'04'                    LINE INTERSECTION
         ORG   DIABIN+X'AB'
         DC    2X'04'                   UPPER CORNERS
         ORG   DIABIN+X'BB'
         DC    2X'04'                   LOWER CORNERS
         ORG   DIABIN+X'BF'
         DC    X'04'                    HORIZONTAL LINE
         ORG   DIABIN+X'B0'
         DC    10X'08'                  SUPER NUMERICS
         ORG   DIABIN+X'8D'
         DC    X'08'                    SUPER LEFT PAREN
         ORG   DIABIN+X'9D'
         DC    X'08'                    SUPER RIGHT PAREN
         ORG   DIABIN+X'8E'
         DC    X'08'                    SUPER PLUS
         ORG   DIABIN+X'A0'
         DC    X'08'                    SUPER MINUS
         ORG   DIABIN+X'80'
         DC    X'0C'                    SUB ZERO
         ORG   DIABIN+X'51'
         DC    9X'0C'                   SUB NUMERICS
         ORG   DIABIN+X'DC'
         DC    X'0C'                    SUB LEFT PAREN
         ORG   DIABIN+X'CC'
         DC    X'0C'                    SUB RIGHT PAREN
         ORG   DIABIN+X'CA'
         DC    X'0C'                    SUB PLUS
         ORG   DIABIN+X'CB'
         DC    X'0C'                    SUB MINUS
         ORG   DIABIN+X'AF'
         DC    X'04'                    BULLET
         ORG   ,
         SPACE
DIABOUT  DC    256AL1(*-DIABOUT)   OUTPUT DIABLO CHARACTERS
         ORG   DIABOUT+X'00'
         DC    C' '                     NULL CHARACTER
         ORG   DIABOUT+X'8F'
         DC    C'+'                     LINE INTERSECTION
         ORG   DIABOUT+X'AB'
         DC    C'++'                    UPPER CORNERS
         ORG   DIABOUT+X'BB'
         DC    C'++'                    LOWER CORNERS
         ORG   DIABOUT+X'BF'
         DC    C'-'                     HORIZONTAL LINE
         ORG   DIABOUT+X'B0'
         DC    C'0123456789'            SUPER NUMERICS
         ORG   DIABOUT+X'8D'
         DC    C'('                     SUPER LEFT PAREN
         ORG   DIABOUT+X'9D'
         DC    C')'                     SUPER RIGHT PAREN
         ORG   DIABOUT+X'8E'
         DC    C'+'                     SUPER PLUS
         ORG   DIABOUT+X'A0'
         DC    C'-'                     SUPER MINUS
         ORG   DIABOUT+X'80'
         DC    C'0'                     SUB ZERO
         ORG   DIABOUT+X'51'
         DC    C'123456789'             SUB NUMERICS
         ORG   DIABOUT+X'DC'
         DC    C'('                     SUB LEFT PAREN
         ORG   DIABOUT+X'CC'
         DC    C')'                     SUB RIGHT PAREN
         ORG   DIABOUT+X'CA'
         DC    C'+'                     SUB PLUS
         ORG   DIABOUT+X'CB'
         DC    C'-'                     SUB MINUS
         ORG   DIABOUT+X'AF'
         DC    C'*'                     BULLET
         ORG   ,
