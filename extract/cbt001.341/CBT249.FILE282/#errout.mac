***********************************************************************
*                                                                     *
*              INTERNAL ROUTINE 'ERROUT' -- FORMAT ERROR MESSAGES     *
*                                                                     *
***********************************************************************
         SPACE
*        ON EXIT:  R15 = 0      IF ABLE TO CONTINUE PROCESSING
*                  $CALL QUITS  IF UNABLE TO CONTINUE PROCESSING
         SPACE
ERROUT  $ENTER ,
         LA    X3,0                ASSUME NO ERRORS
         SPACE
ERRO01   DS    0H
         L     R1,UPTABAD          ONLY X'00' AT THE START
         TRT   ERRFLGS,0(R1)       FIND FIRST ERROR FLAG, IF ANY
         BZ    ERRO12              BRANCH OUT IF NONE
         LR    X1,R1               POINT TO ERROR FLAG
         SR    X3,X3               CLEAR FOR SEVERITY
         IC    X3,0(,X1)           GET ERROR SEVERITY
         LA    R0,ERRTERM          TERMINAL ERROR LEVEL
         CR    X3,R0               COMPARE ACTUAL WITH TERMINAL
         BL    ERRO02              BRANCH IF NOT TERMINAL
         LR    X3,R0               SET CODE TO TERMINAL
         STC   X3,0(,X1)           MAKE SURE A VALID CODE
         MVC   PASSNO,DEFPASOF+TAB3DEF  PREVENT FURTHER PASSES
         XC    ERCONT,ERCONT       ZERO ERROR CONTINUE COUNT
         SPACE
ERRO02   DS    0H
         CLI   0(X1),ERRWARN       IS THIS LESS THAN A WARNING .Q
         BL    ERRO03A             BRANCH AROUND IF YES
         CH    X3,RETCODE          HIGHER RETURN CODE .Q
         BNH   ERRO03              BRANCH IF NOT
         STH   X3,RETCODE          SET NEW RETURN CODE
         SPACE
ERRO03   DS    0H
         L     R0,ERCONT           USER ERROR CONTINUE COUNT
         S     R0,F1               LESS ONE
         BM    ERRO04              BRANCH IF ALL THROUGH
         ST    R0,ERCONT           UPDATE ERROR CONTINUE COUNT
ERRO03A  DS    0H
         LA    X3,0                AND WE MAY CONTINUE
         B     ERRO05              CONTINUE
ERRO04   DS    0H
         LA    X3,4                SET UNABLE TO CONTINUE RETURN CODE
         MVC   PASSNO,DEFPASOF+TAB3DEF  PREVENT FURTHER PASSES
         SPACE
ERRO05   DS    0H
         LA    COUNT,ERRFLGS       START OF ERROR FLAGS
         SR    COUNT,X1            LESS CURRENT FLAG POINTER
         LPR   COUNT,COUNT         MAKE IT POSITIVE
         SLL   COUNT,1             DOUBLE SAME
         LA    R1,ERROMSG          MESSAGE TABLE BASE
         AH    R1,0(COUNT,R1)      POINT TO ERROR DATA
         L     COUNT,BUFF3AD       POINT TO WORK AREA
         XC    0(4,COUNT),0(COUNT) CLEAR RDW
         MVC   4(B2LG,COUNT),BLANKS     CLEAR ALL WORK BUFFER
         MVC   4(L'ERRSTPR,COUNT),ERRSTPR    MOVE ERROR PREFIX
         SR    TEMP,TEMP           PREPARE WORK REGISTER
         IC    TEMP,0(,R1)         GET LENGTH-1 OF MESSAGE
         EX    TEMP,ERRSTMVC       ADD MESSAGE TEXT
         LA    TEMP,5+L'ERRSTPR(,TEMP)  TOTAL LENGTH INCL RDW
         STH   TEMP,0(,COUNT)      SET LENGTH
         SPACE
         SR    X2,X2               ZERO LENGTH REGISTER
         IC    X2,ERRTEXT          LENGTH OF ANY ADDITIONAL TEXT
         S     X2,F1               LENGTH-1
         BM    ERRO05A             BRANCH IF NONE
         LA    R1,1(TEMP,X2)       TOTAL NEW MESSAGE LENGTH
         STH   R1,0(,COUNT)        SET NEW MESSAGE LENGTH
         LA    TEMP,0(COUNT,TEMP)  EXTRA TEXT TARGET
         BCTR  TEMP,0              BACKUP POINTER TO REMOVE '.'
         L     R1,ERRTEXT          EXTRA TEXT ADDRESS
         EX    X2,ERREXMVC         ADD EXTRA TEXT
         XC    ERRTEXT,ERRTEXT     CLEAR EXTRA TEXT POINTER
         SPACE
ERRO05A  DS    0H
         SR    R1,R1               CLEAR FOR SEVERITY
         IC    R1,0(,X1)           SEVERITY CODE
         SRL   R1,2                OFFSET IN SUFFIX CHARACTERS
         IC    R1,ERRSTSU(R1)      SUFFIX CHARACTER
         STC   R1,7+L'ERRSTPR(,COUNT)   SET ERROR SUFFIX TYPE
         MVI   0(X1),ERRCLR        CLEAR ERROR FLAG
         LR    R0,COUNT            POINT TO CONSTRUCTED MESSAGE
        $CALL  PRTERM              PRINT FIRST LINE OF ERROR
         XC    0(4,COUNT),0(COUNT) CLEAR RDW
         MVC   4(B2LG,COUNT),BLANKS     CLEAR ALL OF WORKING BUFFER
         MVC   4(L'ERROUM,COUNT),ERROUM ENTER FIRST ERROR MESSAGE
         SPACE
         CLC   COMFILNM,BLANKS     NO FILENAME HERE .Q
         BE    ERRO09              YES, FORGET SECOND LINE
         MVC   28(8,COUNT),COMFILNO     COPY LINE NUMBER
         LA    R1,4+L'ERROUM(,COUNT)    END OF STRING
         MVC   0(8,R1),COMFILNM    COPY FILE NAME
         BAL   RETURN,ERRSKBL      SKIP BLANKS
         SPACE
         CLI   COMMEMNM,C' '       ANY MEMBER NAME .Q
         BE    ERRO06              BRANCH IF NONE
         MVI   0(R1),C'('          LEFT PAREN
         MVC   1(8,R1),COMMEMNM    ADD MEMBER NAME
         BAL   RETURN,ERRSKBL      SKIP BLANKS
         MVI   0(R1),C')'          RIGHT PAREN
         LA    R1,1(,R1)           SKIP PAREN
         SPACE
ERRO06   DS    0H
         MVI   0(R1),C':'          MORE ON NEXT LINE
         LA    R1,1(,R1)           POINT TO END OF STRING
         SR    R1,COUNT            LENGTH OF STRING INCL RDW
         STH   R1,0(,COUNT)        SET LENGTH
         LR    R0,COUNT            ADDRESS OF RECORD
        $CALL  PRTERM              PRINT SECOND LINE
         L     X1,CURFILE          CURRENT FILE CONTROL BLOCK
         LTR   X1,X1               CURRENT FILE STILL ON RDR STACK .Q
         BZ    ERRO09              NO, AFTER EOF PROCESSED
         USING FILBLOCK,X1         AND TELL THE ASSEMBLER
ERRO07   DS    0H
         L     X1,FILPREV          PREVIOUS FILE IN INPUT STACK
         LTR   X1,X1               ANY PREVIOUS FILE .Q
         BZ    ERRO09              BRANCH IF NOTHING
         XC    0(4,COUNT),0(COUNT) CLEAR WORK RDW
         MVC   4(B2LG,COUNT),BLANKS     CLEAR ALL OF WORKING BUFFER
         MVC   4(L'ERROUF,COUNT),ERROUF ENTER FROM MESSAGE
         MVC   28(8,COUNT),FILNUMBR     COPY FILE LINE NUMBER
         LA    R1,4+L'ERROUF(,COUNT)    END OF STRING
         MVC   0(8,R1),FILDDNAM    COPY LOGICAL FILE NAME
         BAL   RETURN,ERRSKBL      SKIP BLANKS
         CLI   FILMEMNM,C' '       ANY MEMBER NAME .Q
         BE    ERRO08              BRANCH IF NONE
         MVI   0(R1),C'('          LEFT PAREN
         MVC   1(8,R1),FILMEMNM    ADD MEMBER NAME
         BAL   RETURN,ERRSKBL      SKIP TO BLANK
         MVI   0(R1),C')'          RIGHT PAREN
         LA    R1,1(,R1)           SKIP PAREN
ERRO08   DS    0H
         MVI   0(R1),C':'          MORE ON NEXT LINE
         LA    R1,1(,R1)           POINT TO END OF STRING
         SR    R1,COUNT            SET MESSAGE LENGTH
         STH   R1,0(,COUNT)        SET LENGTH IN RDW
         LR    R0,COUNT            ADDRESS OF MESSAGE
        $CALL  PRTERM              PRINT RESULTING MESSAGE
         B     ERRO07              AND TRY AGAIN
         DROP  X1
         SPACE
ERRO09   DS    0H
         LH    TEMP,BUFF2LGZ       GET LENGTH OF CURRENT INPUT
         LTR   TEMP,TEMP           ANYTHING THERE .Q
         BNP   ERRO10              BRANCH IF NOT
         EX    TEMP,ERROUMVC       MOVE RECORD TO TARGET
         LA    TEMP,5(,TEMP)       PLUS CARRIAGE CONTROL AND RDW
         STH   TEMP,0(,COUNT)      SET RECORD LENGTH
         LR    R0,COUNT            ADDRESS OF RECORD
        $CALL  PRTERM              PUT OUT RECORD IN ERROR
         SPACE
         MVC   4(B2LG,COUNT),BLANKS     CLEAR ALL OF WORK BUFFER AGAIN
         LA    R1,BUFF2            RECORD IN ERROR
         L     TEMP,ERRSTART       POSSIBLE ERROR LOCATION
         SR    TEMP,R1             LOWER THAN START .Q
         BM    ERRO10              YES, THEN OUT OF RANGE
         LA    TEMP,6(,TEMP)       PLUS CC, RDW AND ASTERISK
         CH    TEMP,0(,COUNT)      HIGHER THAN END .Q
         BH    ERRO10              YES, THEN OUT OR RANGE AGAIN
         STH   TEMP,0(,COUNT)      LENGTH OF THIS MESSAGE
         AR    TEMP,COUNT          ERROR LOCATION
         BCTR  TEMP,0              LESS ONE
         MVI   0(TEMP),C'*'        ENTER ERROR INDICATOR
         LR    R0,COUNT            ADDRESS OF RECORD
        $CALL  PRTERM              PUT OUT ERROR INDICATOR
         SPACE
ERRO10   DS    0H
         L     R1,DUMPAD           DUMP AREA ADDRESS
         USING DUMPAREA,R1         AND TELL THE ASSEMBLER
         OC    DUMPPSW,DUMPPSW     ANYTHING THERE .Q
         BZ    ERRO11              BRANCH IF NOT
        $CALL  DUMPIT              GO TO FORMAT A DUMP
         DROP  R1
ERRO11   DS    0H
         B     ERRO01              CHECK FOR MULTIPLE ERRORS
         SPACE
ERRO12   DS    0H
         LTR   X3,X3               CAN WE NOW CONTINUE .Q
         BZ    ERRO13              BRANCH IF YES
         LA    R1,WRETQQ           IMMEDIATE TERMINATION CODE
        $CALL  QUITS               CALL TERMINATION ROUTINE
ERRO13   DS    0H
        $EXIT  RC=0                RETURN TO CALLER
         SPACE
ERRSKBL  DS    0H
         LA    R1,1(,R1)           POINT TO NEXT CHAR
         CLI   0(R1),C' '          IS IT A BLANK .Q
         BNE   ERRSKBL             LOOP BACK IF NOT
         BR    RETURN              RETURN TO CALLER
         SPACE
ERRSTMVC MVC   4+L'ERRSTPR(*-*,COUNT),1(R1)  ADD MSG TEXT
ERREXMVC MVC   0(*-*,TEMP),0(R1)   ADD EXTRA TEXT TO MESSAGE
ERROUMVC MVC   5(*-*,COUNT),BUFF2  EXECUTED MOVE ERROR RECORD
         SPACE
ERRSTPR  DC    C'0SCRW'            CC/ERROR MESSAGE PREFIX
ERRSTSU  DC    C'IWEST?'           ERROR MESSAGE SUFFIX CHARACTERS
ERROUM   DC    C' ERROR OCCURRED AT LINE ******** OF FILE '
ERROUF   DC    C'       CALLED FROM LINE ******** OF FILE '
         SPACE 2
ERROMSG $MSGSECT TYPE=MSG,DOC=GEN  GENERATE ERROR MESSAGE TEXT
