*          DATA SET PSNRFDD    AT LEVEL 001 AS OF 10/30/80
         TITLE 'PSNRFDD - REFORMAT THE DD CARD TO STANDARDS'
PSNRFDD  PSNMSTRT  SASIZ=WKLENG
         EJECT
*                    TO REFORMAT A GIVEN DD CARD, BUILDING
*                    THE COMMENT BLOCK IF NEEDED, AND ALIGNING
*                    THE OPERANDS ONE TO A LINE, ELIMINATING
*                    THOSE THAT ARE NONSTANDARD.  RECOGNIZE THE
*                    ONES THAT CAN COEXIST ON A LINE.
*
         L     R9,PSWDDLST        ADDRESS THE DD BLOCK
         USING DDBLOCK,R9         OFFICIALLY
         BAL   R14,PUTCOMNT       IN CASE A COMMENT PRECEEDED THIS
*
         LA    R5,DDBDISPL        POINT TO THE DISPLACEMENTS
FINDFRST EQU   *
         LH    R6,0(,R5)          PICK UP THE DISPLACEMENT
         LTR   R6,R6
         BNZ   FIRSTCAL           A HIT - MAKE THE FIRST CALL
         LA    R5,2(,R5)
         B     FINDFRST           AND BACK TO THE FIRSTIME SCAN
*
FIRSTCAL EQU   *
         BAL   R14,FIRSTLIN       PUT OUT THE FIRST LINE ENTRY
*
*
NEXTWORD EQU   *
         LA    R5,2(,R5)
         LA    R15,DDBDISPX       END OF THE DISPLACEMENTS
         CR    R5,R15             ARE WE AT THE END YET
         BNL   DDBUILT            YES - END OF THE LIST
         LH    R6,0(,R5)          PICK UP DISPLACEMENT TO FIELD
         LTR   R6,R6              DOES IT EVEN EXIST
         BZ    NEXTWORD           NO - SKIP THE IDEA
         LA    R6,DDBLOCK(R6)     POINT TO THE ENTRY ITSELF
         MVI   0(R8),C','         MORE TO COME - CONTINUE PREVIOUS
         L     R15,PSWWRITE
         BALR  R14,R15            PROCURE THE BUILDING AREA
         LA    R7,70(,R15)        POINT TO END OF IT
         LA    R8,15(,R15)        AND THE START OF IT
         BAL   R14,MOVEKWD        AND DO THE WORK
         B     NEXTWORD           AND GO TO WORK
*
DDBUILT  EQU   *
         SR    R15,R15
         B     RETURN
         EJECT
*                    TO INSERT THE COMMENT LINE FIRST, IF ONE EXISTS
*
PUTCOMNT PSNMBLOK  PCM,RENT=YES
         L     R8,DDBCOMNT        ADDRESS THE COMMENT LINE
         USING COMMENT,R8         AND ADDRESS IT
         LTR   R8,R8              IS THERE A COMMENT
         BZ    PCMEXIT            NO - A QUICKIE
*
PCMBUILD EQU   *                  BUILD EACH OF THE LINES
         L     R15,PSWWRITE       FETCH BACK NEXT BUFFER
         BALR  R14,R15
         MVI   2(R15),C'*'         STANDARD COMMENT STARTER
         TM    CMTIND1,CMTI1BLK   HOW ABOUT A BLANK LINE
         BO    PCMNEXT            YES - HAVE DONE THAT ALREADY
         TM    CMTIND1,CMTI1AST   IS THIS ALL ******
         BO    PCMSTAR            YES - SPECIAL REBUILDER HERE
*                    PUT THE COMMENT IN ITS ORIGINAL COLUMN
         LH    R1,CMTLENGC        THE LENGTH OF THE TEXT
         BCTR  R1,0               FOR THE EX MOVE
         AH    R15,CMTCOL         INDEX IN TO ORIGINAL COLUMN
         EX    R1,PCMMOVE         MOVE COMMENT TO LINE
         B     PCMNEXT
PCMSTAR  EQU   *                  IF IT IS ALL ******'S
         MVC   3(68,R15),2(R15)   ROLL DOWN THE *'S
*
PCMNEXT  EQU   *
         L     R8,CMTNEXT         CHECK - IS THERE ANOTHER COMMENT
         LTR   R8,R8              .
         BZ    PCMEXIT
         B     PCMBUILD           STILL MORE - ON WITH IT
PCMMOVE  MVC   0(0,R15),CMTTEXT   MOVE TEXT TO OUTPUT LINE
         DROP  R8
         EJECT
*                    TO INSERT THE NAME OF THE DD ENTRY, AND
*                    THE VALUE DD, AND THE FIRST REAL KEYWORD
*
FIRSTLIN PSNMBLOK  FLN
         L     R15,PSWWRITE       PICK UP THE NEXT OUTPUT BUFFER
         BALR  R14,R15
         LR    R8,R15             ADDRESS THE BUFFER
         MVC   2(8,R8),DDBDDNAM   DD NAME INTO THE LINE
         MVC   11(2,R8),PSWCDD    INCLUDE THE LITERAL FOR A DD
         LA    R6,DDBLOCK(R6)     POINT TO THE ENTRY ITSELF
         LA    R7,70(,R8)         POINT TO END OF  LINE
         LA    R8,15(,R8)         POINT TO RECEIVING AREA
         BAL   R14,MOVEKWD        AND MOVE IN THE SYMBOL
         B     FLNEXIT
         EJECT
*                    GIVEN R8 POINTS TO WHERE TO START THE BUILD,
*                    AND R7 POINTS TO LAST USEABLE CHARACTRER ON
*                    THE LINE, R6 POINTS TO THE WORD ENTRY;  MOVE THE
*                    VALUE, AND ITS ORIGINAL UNSUBSTITUTED VALUE TO
*                    THE PRINT LINE
*
MOVEKWD  PSNMBLOK  MKW
         USING DDBDDPTR,R6        ADDRESS THE INDIVIDUAL ENTRY
         LH    R1,DDBPNBR         KEYWORD NUMBER OF THIS ONE
         PSNMFKEY  (R1),R=R15     FIND THE KEYWORD AND ITS LENGTH
         MVC   0(8,R8),0(R15)     PUT IN THE VALUE ITSELF
         AH    R8,10(R15)         LENGTH OF THAT KEYWORD
         TM    DDBPIND1,DDBP1NOD  EQUAL AND NO DATA CONDITION
         BZ    MKWCKDAT           NO - NO THIS SPECIAL ONE
         MVI   0(R8),C'='         YES - EQUAL AND NO DATA
         LA    R8,1(,R8)          AND KEEP THE POINTER GOING
         B     MKWNONE            SO SKIP THE DATA PART
MKWCKDAT EQU   *
         CLI   DDBPORIG,X'00'     SO - IS THERE ANY DATA
         BE    MKWNONE            NO - SKIP THE WHOLE IDEA
         MVI   0(R8),C'='         HAVE DATA - PLUG IN =
         LA    R8,1(,R8)          AND KEEP THE POINTER GOING
         SR    R1,R1              CLEAR FOR INSERTION OF THE LENGTH
         IC    R1,DDBPORIG        LENGTH OF THE SUBSTITUTION VALUE
         BCTR  R1,0
         L     R15,DDBPORIG       POINT TO THE DATA ITSELF
         LA    R0,0(,R7)          COMPUTE LENGTH LEFT FOR THIS PART
         SR    R0,R8              AS LAST COLUMN LESS CURRENT POINTER
         CR    R1,R0              AND SEE IF IT WILL FIT
         BL    *+8                YES - PLENTY OF ROOM
         BAL   R14,KW2LINE        OOPS - USE TWO LINES FOR IT
         EX    R1,MKWMOVE         MOVE IN THE VALUE ITSELF
         LA    R8,1(R1,R8)        COLUMN PAST THE VALUE, FOR LATER ,
MKWNONE  EQU   *                  REJOIN FROM THE NO-DATA LEG
         L     R15,DDBPCOM        PICK UP THE COMMENT POINTER
         LTR   R15,R15            IS THERE A COMMENT
         BZ    MKWEXIT            NO - END OF THE WORD PROCESS
*
*                    PUT IN THE COMMENT - NOTE IT IS RIGHT JUSTIFIED -
*                    THERE ARE OTHER WAYS TO DO IT;  THIS WAS SIMPLY
*                    THE FIRST WAY TO TRY OUT - UNDOUBTEDLY IT WILL
*                    BE CHANGED AS THE DECISION-MAKING PROCESS
*                    CONTINUES.
*
         SR    R14,R14            TO CAPTURE THE LENGTH OF COMMENT
         IC    R14,DDBPCOM        .
         BCTR  R14,0              PREPARED FOR THE MOVE
         LA    R1,0(,R7)          BUILD POINTER TO RECEIVING AREA
         SR    R1,R14             AS END LESS COMMENT LENGTH
         CR    R8,R1              UNLESS IT OVERFLOWS, THAT IS
         BL    MKWCOMOK           ALL PROPER - IT WILL FIT
         LA    R1,1(,R8)          NEW TARGET FOR COMMENT MOVE
         LA    R14,0(,R7)         THIS IS END OF RECEIVING AREA
         SR    R14,R1             SO THIS IS LENGTH TO MOVE
         BCTR  R14,0              RECOMPUTE FOR THE EXEC, OF COURSE
         MVI   0(R7),C'+'         SHOW COMMENT WAS TRUNCATED
MKWCOMOK EQU   *                  AND MOVE IN THE COMMENT
         EX    R14,MKWMVCOM       MOVE COMMENT TO JCL LINE
         LA    R15,4              SHOW A COMMENT WENT INTO LINE
         B     MKWEXIT
         DROP  R6
*
MKWMOVE  MVC   0(0,R8),0(R15)     MOVE RAW DATA TO LINE
MKWMVCOM MVC   0(0,R1),0(R15)     MOVE COMMENT TO LINE
         EJECT
*                    GIVEN A KEYWORD VALUE IS TOO LONG FOR THE
*                    LINE - SCAN BACK FROM THE LAST GOOD POSITION
*                    TO FIND THE COMMA, MOVE THAT MUCH TO CURRENT
*                    LINE, AND SET UP TO MOVE THE REST TO THE NEW
*                    LINE.
*
KW2LINE  PSNMBLOK  K2L
         LR    R14,R0             THE LENGTH THAT CAN BE ACCOMMODATED
         LA    R14,0(R14,R15)    POINT THAT FAR INTO THE DATA
         BCTR  R14,0              LESS ONE FOR EXACTNESS
K2LSRCH  EQU   *
         CLI   0(R14),C','        IS THIS THE DELIMITER
         BE    K2LCOMA            YES - FOUND A BREAKING POINT
         BCTR  R14,0              BACK UP ONE IN THE DATA
         BCT   R0,K2LSRCH         AND INDEX BACKWORK
*                    FELL OUT WITH NO MATCH - REAL PROBLEM
         PSNMERR   ERRISCAN,((R15),(R1))
         SR    R15,R15            ASK TO KEEP GOING ANYWAY
         B     RETURN             BUT DROP THIS DD STATEMENT
K2LCOMA  EQU   *
         LA    R15,0(,R15)        CLENSE THE DATA POINTER FIELD
         SR    R14,R15            COMPUTE LENGTH OF THE FIELD
         EX    R14,K2LMOVE        AND MOVE THE DATA TO OUTPUT
         SR    R1,R14             COMPUTE LENGTH LEFT TO MOVE
         BCTR  R1,0               EXACTLY
         LA    R15,1(R14,R15)    POINT TO START OF REMAINDER
         STM   R15,R1,PSWWSCAN    SAVE THESE POINTERS
         L     R15,PSWWRITE       NOW GET ANOTHER LINE OF BUFFER
         BALR  R14,R15            .
         LA    R7,70(,R15)        POINT TO END OF IT
         LA    R8,15(,R15)        AND START OF IT
         LM    R15,R1,PSWWSCAN    RECAPTURE THE DATA POINTERS
         B     K2LEXIT            BACK TO MOVE THE REST OF IT
*
K2LMOVE  MVC   0(0,R8),0(R15)     MOVE DATA TO OUTPUT
         EJECT
         PSNMDD
         SPACE 3
         PSNMCMT
         EJECT
WORKAREA DSECT
         DS    18F
         PSNMBLOK  RENT=REGS
WKLENG   EQU   *-WORKAREA
         EJECT
         PSNMWORK
         END
