*          DATA SET Q3SEARCH   AT LEVEL 001 AS OF 04/01/83
SEARCH QSTART 'QUEUE COMMAND - JQE AND JOE SEARCH AND FORMAT'
*******************************************************************
* RNB CHANGES:                                                    *
*      (1) RNB16 - PROCESS BOTH LOCAL AND REMOTE JOE QUEUE.       *
*                  ALSO, FIX BUG IN UF020 THAT WAS CLEARING       *
*                  FIELD JOEFLAG IN THE WORK JOE.                 *
*      (2) RNB19 - FOR SP, SEARCH DUMP Q AND CONVERSION (XEQ) Q IF*
*                  STATUS COMMAND OR DJ. ALSO OUTPUT QUEUE        *
*******************************************************************
* MOD 1 - K TRUE - FCI - 30 JUN 80                                 FCI*
* MERGED IN DF, DQ FROM LATEST RELEASE,AND ADDED HOWFULL ROUTINE   FCI*
*                                                                  FCI*
* MOD 2 - K TRUE - INTEL-29 JUN 81                                INTEL
* PROVIDED GENERIC SEARCH CAPABILITY FOR 'ST' COMMAND. USE '.' OR INTEL
* '*' OR '?' CHARS TO INDICATE MATCH FOR ANY                      INTEL
*                                                                 INTEL
* MOD 3 - K TRUE - INTEL- 8 JAN 82                                INTEL
* ADAPTED CODE FROM CBT FILE 308 FROM LANE BRYANT FOR SEARCH      INTEL
* LIMITATIONS (Q= T= C= F= R= Q^ T^ C^ F^ AND R^ DELIMITERS)      INTEL
* FROM THE FILE308 FORMAT CSECT (Q7).                             INTEL
*                                                                 INTEL
***********************************************************************
         GBLB  &DEBUG                                             INTEL
&DEBUG   SETB  0          INTERNAL DEBUG ROUTINE                  INTEL
         GBLB  &QSP           MVS/SP OPTION                       UF020
         L     R10,QVCKPT     LOAD BASE REG
         USING JQEDSECT,R9    BASE REG FOR JQE DSECT
         USING JOEDSECT,R8    BASE REG FOR JOE DSECT
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
******************************************************************UF006
*                                                                 UF006
*   CALL - READ JES2 CHECKPOINT FILE                              UF006
*                                                                 UF006
******************************************************************UF006
         L     R15,=V(CKPT)   ADDR OF CKPT ROUTINE                UF006
         BALR  R14,R15        GO TO IT                            UF006
***********************************************************************
*                                                                     *
*   BRANCH TO PROPER ROUTINE                                          *
*                                                                     *
***********************************************************************
         XC    TOTRECS,TOTRECS  CLEAR OUT ACCUMULATOR             INTEL
         CLC   QPARM1,=CL8'*' USER WANTS LOGON ID AS DEFAULT      INTEL
         BNE   BRTABIT        NO. EXIT                            INTEL
         CLI   QCODEH+1,0     MAYBE, BUT IS COMMAND FOR STATUS?   INTEL
         BE    SUBUID         YES..SUBSTITUTE USERID FOR *        INTEL
         CLI   QCODEH+1,40    IS IT DJ COMMAND                    INTEL
         BE    SUBUID         YES..WE'LL PLAY WITH THIS ONE       INTEL
         B     BRTABIT        NO..NO FIDDLING WITH QPARM1         INTEL
         SPACE 1                                                  INTEL
SUBUID   MVI   QLNG1,X'08'    YES. SET LENGTH OF SUB PARM         INTEL
         MVC   QPARM1,QLOGON  MOVE LOGON ID INTO SUB PARM         INTEL
         SPACE 1                                                  INTEL
BRTABIT  LH    R1,QCODEH      LOAD FUNCTION CODE INTO R1          INTEL
         CH    R1,=H'48'      IS THE FUNCTION SUPPORTED?
         BH    STOP           NO. RETURN.
         B     *+4(R1)        BRANCH TO ROUTINE
         B     ST             0 OFFSET
         B     DA             4
         B     DI             8
         B     AO   DO        12
         B     AI             16
         B     AO             20
         B     HI             24
         B     HO             28
         B     DT             32
         B     DJ             36
         B     DS             40
         B     DQ             44
         B     DF             48
         EJECT ,                                                  INTEL
***********************************************************************
*                                                                     *
*   STATUS - FIND ALL JOBS THAT MATCH LEVEL                           *
*                                                                     *
***********************************************************************
ST       CLI   QPARM1,C' '    DID USER SPECIFY LEVEL?
         BNE   ST2            NO. USE QLOGON.
         MVC   QPARM1,QLOGON  MOVE USER PARM1 TO LEVEL
ST2      BAL   R2,PARMLEN     DETERMINE PARM LENGTH
* SEARCH THE TSO QUEUE
         USING JQTDSECT,R1    BASE REG FOR JQT
DJ2      QDEBUG 'DJ2 ENTERED'                                     INTEL
         LH    R6,QLNG1       LENGTH OF COMPARE FOR LEVEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTTSU      ADDR OF TSO QUEUE
         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DJ3            END OF QUEUE
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE RECORD
* SEARCH THE SYSTEM QUEUE
DJ3      QDEBUG 'DJ3 ENTERED'                                     INTEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTSTC      ADDR OF STC QUEUE
         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DJ4            END OF QUEUE
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE RECORD
* SEARCH FOR HELD OUTPUT
DJ4      QDEBUG 'DJ4 ENTERED'                                     INTEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE
         DROP  R1
         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         AIF   (&QSP).RNB19A                                      RNB19
         B     ST3            END OF QUEUE
         AGO   .RNB19B                                            RNB19
.RNB19A  ANOP                                                     RNB19
         B     DJ5            END OF QUEUE                        RNB19
.RNB19B  ANOP                                                     RNB19
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)
         BNE   PRTJQE         YES. PRINT THE RECORD.
         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)
         BNZ   PRTJQE         YES. PRINT THE RECORD.
         B     REJJQE         REJECT THE RECORD
         AIF   (NOT &QSP).RNB19C                                  RNB19
* SEARCH DUMP QUEUE                                               RNB19
DJ5      QDEBUG 'DJ5 ENTERED'                                     INTEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19
         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19
         LA    R4,JQTDUMP     ADDR OF DUMP QUEUE                  RNB19
         DROP  R1                                                 RNB19
         MVI   QCLASS,12      INDICATE THIS IS THE DUMP QUEUE     RNB19
         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19
         B     DJ6            END OF QUEUE                        RNB19
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19
         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19
         B     PRTJQE         PRINT THE RECORD                    RNB19
* SEARCH CONVERSION (XEQ) QUEUE                                   RNB19
DJ6      QDEBUG 'DJ6 ENTERED'                                     INTEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19
         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19
         LA    R4,JQTXEQ      ADDR OF CONVERSION QUEUE            RNB19
         DROP  R1                                                 RNB19
         MVI   QCLASS,16      INDICATE THIS IS THE CNV QUEUE      RNB19
         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19
         B     DJ7            END OF QUEUE                        RNB19
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19
         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19
         B     PRTJQE         PRINT THE RECORD                    RNB19
* SEARCH OUTPUT (AWAITING OUTPUT) QUEUE                           RNB19
DJ7      QDEBUG 'DJ7 ENTERED'                                     INTEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19
         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19
         LA    R4,JQTAWOUT    ADDR OF OUTPUT QUEUE                RNB19
         DROP  R1                                                 RNB19
         MVI   QCLASS,20      INDICATE THIS IS THE CNV QUEUE      RNB19
         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19
         B     ST3            END OF QUEUE                        RNB19
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19
         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19
         B     PRTJQE         PRINT THE RECORD                    RNB19
.RNB19C  ANOP                                                     RNB19
* SEARCH INPUT QUEUES
ST3      QDEBUG 'ST3 ENTERED'                                     INTEL
         MVI   QCLASS,192     START WITH CLASS A
ST4      BAL   R2,NEXTJQT     FIND NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     ST4            END OF QUEUE
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         CLI   JQEFLAGS,0     IS THE JOB EXECUTING OR HELD?
         BNE   ST7            YES. SPECIAL HANDLING.
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE JQE
ST7      EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   REJJQE         NO. SKIP THIS RECORD.
         B     PRT2JQE        PRINT THE RECORD WITHOUT INCR COUNT
* SEARCH OUTPUT QUEUES
ST5      QDEBUG 'ST5 ENTERED'                                     INTEL
         MVI   QCLASS,192     START WITH CLASS A
ST6      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE
         B     ST6            END OF QUEUE
         BAL   R14,MASKOFF    SET JOBNAME MASK IN PLACE           INTEL
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJOE        NO. SKIP THIS RECORD.
         B     PRTJOE         PRINT THE RECORD
* COMPARE USED TO CHECK LEVEL
STCLC    CLC   MASKNAME(1),WORKNAME IS JOBNAME EQUAL TO LEVEL     INTEL
***********************************************************************
*                                                                     *
*   DQ - PRINT SUMMARY OF ALL JOBS IN THE INPUT QUEUES                *
*                                                                     *
***********************************************************************
*  SEARCH ALL QUEUES
DQ       MVI   QCLASS,192           START WITH CLASS A
         MVC   QDHLINE,DQHEADER     MOVE IN THE HEADING
DQ1      BAL   R2,NEXTJQT           FIND NEXT QUEUE
         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR EXECUTING JOBS
         ZAP   QCOUNTA,=P'0'        ZERO COUNT FOR AWAITING JOBS
         ZAP   QCOUNTH,=P'0'        ZERO COUNT FOR HELD JOBS
         BAL   R2,SRCHJQE           SEARCH THE QUEUE
         B     DQ4                  END OF QUEUE
         TM    JQEFLAGS,QUEBUSY     IS THIS JOB EXECUTING
         BZ    DQ2                  NO, NEXT TEST
         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ2      TM    JQEFLAGS,X'E0'       IS THIS A HELD JOB
         BZ    DQ3                  NO, NEXT TEST
         AP    QCOUNTH,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ3      CLI   JQEFLAGS,0           IS THIS JOB AWAITING EXECUTION
         BNE   SKIPJQE              NO, PROCESS NEXT JQE
         AP    QCOUNTA,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ4      CLC   QCOUNT,=PL3'0'       IS THIS QUEUE EMPTY
         BE    DQ1                  YES, TRY THE NEXT QUEUE
         MVC   QDMSG,DQLINE         MOVE IN DETAIL LINE
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS
         MVC   QECOUNT,FCOUNT+3                    IN EXECUTION
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTA            NUMBER OF JOBS
         MVC   QACOUNT,FCOUNT+3                    AWAITING EXECUTION
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTH            NUMBER OF JOBS
         MVC   QHCOUNT,FCOUNT+3                    IN HELD STATUS
         MVC   FCOUNT,ED5           MOVE IN THE TOTAL NUMBER OF JOBS
         ED    FCOUNT,QCOUNT             IN THIS QUEUE
         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS
         BAL   R2,DISPLAY           GO DISPLAY THIS LINE
         B     DQ1                  PROCESS THE NEXT QUEUE
***********************************************************************
*                                                                     *
*   DF - PRINT SUMMARY OF ALL JOBS IN THE OUTPUT QUEUES               *
*                                                                     *
***********************************************************************
DF       MVI   QCLASS,192           START WITH CLASS A
         MVC   QDHLINE,DFHEADER     MOVE IN THE HEADING
         BAL   R2,HOWFULL           GO GET/FORMAT % FULL OF SPOOL  FCI*
DF1      BAL   R2,NEXTJOT           FIND NEXT QUEUE
         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR JOBS PRINTING
         ZAP   QCOUNTA,=P'0'        ZERO COUNT FOR LOCAL           FCI*
         ZAP   QCOUNTH,=P'0'        ZERO COUNT FOR REMOTE          FCI*
         SLR   R5,R5                ACCUMULATOR FOR LINE COUNT     FCI*
         BAL   R2,SRCHJOE           SEARCH THE QUEUE
         B     DF2                  END OF QUEUE
         A     R5,JOERECCT          ADD UP COUNT OF RECS           FCI*
         AIF   (&QSP).SP$0                                        INTEL
         CLI   JOEROUT+1,X'00'      ROUTE RMT00=LOCAL?             FCI*
         AGO   .SP$0A                                             INTEL
.SP$0    ANOP  ,                                                  INTEL
         CLC   =H'0',JOEREMOT       REMOTE=0000 IS LOCAL...       INTEL
.SP$0A   ANOP  ,                                                  INTEL
         BNE   DF1R                 NO..ITS REMOTE                 FCI*
         AP    QCOUNTA,=P'1'        YES..ITS LOCAL                 FCI*
         B     DF1A                   SKIP                         FCI*
DF1R     AP    QCOUNTH,=P'1'        ITS REMOTE                     FCI*
DF1A     TM    JOEFLAG,$JOEPRT      IS JOB PRINTING               INTEL
         BNO   SKIPJOE              NO, PROCESS NEXT JOE
         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER
         B     SKIPJOE              PROCESS NEXT JOE
DF2      CLC   QCOUNT,=PL3'0'       QUEUE EMPTY
         BE    DF1                  YES, TRY THE NEXT QUEUE
         MVC   QDMSG,DFLINE         MOVE IN DETAIL LINE
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS
         MVC   QECOUNT,FCOUNT+3                    PRINTING
         MVC   FCOUNT,ED5           MOVE IN                        FCI*
         ED    FCOUNT,QCOUNTA            NUMBER OF JOBS            FCI*
         MVC   QACOUNT,FCOUNT+3                    FOR LOCAL       FCI*
         MVC   FCOUNT,ED5           MOVE IN                        FCI*
         ED    FCOUNT,QCOUNTH            NUMBER OF JOBS            FCI*
         MVC   QHCOUNT,FCOUNT+3                    FOR REMOTE      FCI*
         MVC   FCOUNT,ED5           MOVE IN TOTAL NUMBER OF JOBS
         ED    FCOUNT,QCOUNT             IN THIS QUEUE
         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS
         CVD   R5,CONVERT           CONVERT RECS TO DECIMAL        FCI*
         A     R5,TOTRECS           ADD UP TOTAL RECORDS          INTEL
         ST    R5,TOTRECS           AND SAVE IT AWAY              INTEL
         MVC   QTRECS,ED12          MOVE IN MASK                   FCI*
         ED    QTRECS,CONVERT+3     MAKE IT PRETTY                 FCI*
         BAL   R2,DISPLAY           GO DISPLAY THIS LINE
         B     DF1                  PROCESS NEXT QUEUE
***********************************************************************
*                                                                     *
*   DJ - FIND A SPECIFIC JOB                                          *
*                                                                     *
***********************************************************************
DJ       CLI   QPARM1,C' '    DID USER SPECIFY JOBNAME?
         BE    DJ9            NO. TILT.
         MVC   QLNG1,=H'7'    COMPARE FOR 8 CHARACTERS
         MVC   MASKAREA,=XL8'00' SET MASK TO NULLS                INTEL
         MVC   MASKNAME,QPARM1   AND MOVE IN NAME FOR LATER COMPA INTEL
         B     DJ2            USE THE STATUS ROUTINES
DJ9      QTILT '*** YOU MUST SPECIFY JOBNAME ***'
***********************************************************************
*                                                                     *
*   DI - PRINT ALL JOBS IN INPUT QUEUES                               *
*                                                                     *
***********************************************************************
DI       BAL   R2,INITSRCH    DID USER SPECIFY CLASS?              FCI*
         B     DI5            YES. LIMIT TO ONE QUEUE.             FCI*
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
DI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     DI2            END OF QUEUE
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
DI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS
         BAL   R2,FINDJQT     FIND QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   AI - PRINT JOBS IN INPUT QUEUES THAT ARE AVAILABLE FOR SELECTION  *
*                                                                     *
***********************************************************************
AI       BAL   R2,INITSRCH    DID USER SPECIFY CLASS?              FCI*
         B     AI5            YES. LIMIT TO ONE QUEUE.             FCI*
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
AI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     AI2            END OF QUEUE
         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?
         BNE   REJJQE         YES. SKIP IT.
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
AI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS
         BAL   R2,FINDJQT     FIND QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?
         BNE   REJJQE         YES. SKIP IT.
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   AO - PRINT AVAILABLE JOBS IN THE OUTPUT QUEUE                     *
*                                                                     *
***********************************************************************
AO       BAL   R2,INITSRCH    DID USER SPECIFY CLASS?              FCI*
         B     AO5            YES. LIMIT TO ONE QUEUE.             FCI*
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
AO2      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE
         B     AO2            END OF QUEUE
         BAL   R14,CHKONJOE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJOE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJOE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
AO5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS
         BAL   R2,FINDJOT     FIND QUEUE
         BAL   R2,SRCHJOE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         BAL   R14,CHKONJOE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJOE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJOE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   HI - PRINT JOBS IN INPUT QUEUES THAT ARE HELD                     *
*                                                                     *
***********************************************************************
HI       BAL   R2,INITSRCH    DID USER SPECIFY CLASS?              FCI*
         B     HI5            YES. LIMIT TO ONE QUEUE.             FCI*
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
HI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     HI2            END OF QUEUE
         TM    JQEFLAGS,X'E0' IS THE JOB HELD?
         BZ    REJJQE         NO. SKIP IT.
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
HI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS
         BAL   R2,FINDJQT     FIND QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         TM    JQEFLAGS,X'E0' IS THE JOB HELD?
         BZ    REJJQE         NO. SKIP IT.
         BAL   R14,CHKONJQE   GO CHECK IF MATCH TO LIMITS         INTEL
         B     REJJQE         YES. , AND THIS ONE DOESN'T MATCH   INTEL
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   HO - LIST ALL JOBS WITH HELD OUTPUT                               *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
HO       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE
         DROP  R1
         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)
         BNE   PRTJQE         YES. PRINT THE RECORD.
         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)
         BNZ   PRTJQE         YES. PRINT THE RECORD.
         B     REJJQE         REJECT THE RECORD
***********************************************************************
*                                                                     *
*   DA - FIND ALL EXECUTING JOBS                                      *
*        AND ACTIVE OUTPUT JOES (ON DEVICES)                      INTEL
***********************************************************************
DA       MVI   QCLASS,192     START WITH CLASS A
DA2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DA2            END OF QUEUE
         TM    JQEFLAGS,QUEBUSY IS THE JOB EXECUTING?
         BZ    REJJQE         NO. REJECT IT.
         B     PRTJQE         PRINT THE RECORD
*                                                                 INTEL
DA3      L     R1,QCJQHEAD    GET JQE QUEUE HEAD POINTER           FCI*
*                               (MAPPED BY JQTDSECT)               FCI*
         AIF   (&QSP).SP$1                                        INTEL
         LA    R4,10(R1)      POINT TO 'UNMARKED' QUEUE HEAD       FCI*
         AGO   .SP$1A                                             INTEL
.SP$1    ANOP  ,                                                  INTEL
         LA    R4,JQTINPUT-JQTDSECT(,R1) GET $INPUT QUEUE         INTEL
         MVI   QCLASS,20      LIE ABOUT THE CONVERTER QUEUE       INTEL
.SP$1A   ANOP  ,                                                  INTEL
         BAL   R2,SRCHJQE     GO SEARCH THIS QUEUE                 FCI*
         B     DA4            END OF QUEUE..SPLIT TO NEXT LEVEL    FCI*
         CLI   JQETYPE,$INPUT ON INPUT?                            FCI*
         BE    PRTJQE         YES..PRINT IT                        FCI*
         B     REJJQE         NO..NOT THE ONE                      FCI*
*                                                                  FCI*
* SEARCH OUTPUT QUEUES                                             FCI*
DA4      MVI   QCLASS,192     START WITH CLASS A                   FCI*
DA5      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE                 FCI*
         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE                   FCI*
         B     DA5            END OF QUEUE                         FCI*
         TM    JOEFLAG,$JOEBUSY IS JOE ACTIVE ON A DEVICE?         FCI*
         BZ    REJJOE         NO. SKIP THIS RECORD.                FCI*
         B     PRTJOE         PRINT THE RECORD                     FCI*
***********************************************************************
*                                                                     *
*   DT - LIST ALL TSO USERS                                           *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
DT       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTTSU      ADDR OF TSO QUEUE
         DROP  R1
         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   DS - LIST ALL SYSTEM STARTED TASKS                                *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
DS       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTSTC      ADDR OF STC QUEUE
         DROP  R1
         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   DETERMINE LENGTH OF LEVEL                                         *
*                                                                     *
***********************************************************************
PARMLEN  LA    R3,7           MAXIMUM LENGTH OF 8
         LA    R4,QPARM1+7    END OF FIELD
PARMLEN2 CLI   0(R4),C' '     IS THIS BYTE BLANK?
         BNE   PARMLEN3       NO. THIS IS THE LENGTH
         BCTR  R4,0           TRY PREVIOUS BYTE
         BCT   R3,PARMLEN2    LOOP
PARMLEN3 STH   R3,QLNG1       STORE THE LENGTH OF LEVEL
         MVC   MASKAREA,QPARM1 MOVE PARM INTO MASK AREA           INTEL
         TR    MASKAREA,TRMASK GENERATE MASK                      INTEL
         MVC   MASKNAME,QPARM1 MOVE COMPARE MASK TO HOLDING AREA  INTEL
         OC    MASKNAME,MASKAREA AND MASK OFF THE DONT CARES      INTEL
         BR    R2             RETURN TO CALLER
***********************************************************************
*                                                                 INTEL
*   MASK OFF BYTES FOR COMPARE OF JQEJNAME TO GENERIC MASKING     INTEL
*                                                                 INTEL
***********************************************************************
MASKOFF  MVC   WORKNAME,JQEJNAME  MOVE NAME TO WORK AREA          INTEL
         OC    WORKNAME,MASKAREA  PUT X'FF' IN DONT CARE BYTES    INTEL
         BR    R14                                                INTEL
***********************************************************************
*                                                                     *
*   SEARCH A JQE QUEUE                                                *
*                                                                     *
***********************************************************************
SRCHJQE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT
         AIF   (&QSP).QSP3                                        UF020
         LH    R9,0(R4)       LOAD FIRST JQE OFFSET
         N     R9,=X'0000FFFF' KILL EXTRANEOUS BITS
NEXTJQE  SLA   R9,2           MULTIPLY BY 4
         AGO   .QSP4                                              UF020
.QSP3    ANOP                                                     UF020
         L     R9,0(R4)       LOAD FIRST JQE OFFSET               UF020
NEXTJQE  LA    R9,0(,R9)      KILL EXTRANEOUS BITS                UF020
         LTR   R9,R9          TEST FOR END OF QUEUE               UF020
.QSP4    ANOP                                                     UF020
         BZR   R2             END OF QUEUE. RETURN.
         A     R9,QCJQTA      ADD BASE TO OFFSET
         B     4(R2)          DETERMINE ELIGIBILITY
PRTJQE   AP    QCOUNT,=P'1'   INCREMENT COUNT
PRT2JQE  SR    R1,R1          INDICATE THIS IS A JQE
         L     R15,=V(FORMAT) ADDR OF PRINT MODULE
         BALR  R14,R15        PRINT THE JQE IN R9
         AIF   (&QSP).QSP5                                        UF020
REJJQE   LH    R9,JQECHAIN    LOAD OFFSET TO NEXT JQE
         AGO   .QSP6                                              UF020
.QSP5    ANOP                                                     UF020
REJJQE   L     R9,JQENEXT     LOAD OFFSET TO NEXT JQE             UF020
.QSP6    ANOP                                                     UF020
         B     NEXTJQE        GET THE NEXT JQE
SKIPJQE  AP    QCOUNT,=P'1'   INCREMENT COUNT
         B     REJJQE         CONTINUE
***********************************************************************
*                                                                     *
*   SEARCH A JOE QUEUE                                                *
*                                                                     *
***********************************************************************
         AIF   (&QSP).QSP7                                        RNB16
SRCHJOE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT
FIRSTJOE LH    R8,0(R4)       LOAD FIRST JOE OFFSET
         N     R8,=X'0000FFFF' KILL EXTRANEOUS BITS.
         AGO   .QSP8                                              UF020
.QSP7    ANOP                                                     UF020
SRCHJOE  ZAP   QCOUNT,=P'0'    ZERO THE QUEUE COUNT               RNB16
         OI    QFLAG1,QFLG1LCL SHOW SEARCHING LOCAL QUEUE         RNB16
         B     FIRSTJOE        AND GO DO IT                       RNB16
*                                                                 RNB16
SRCHJOE1 NI    QFLAG1,X'FF'-QFLG1LCL TURN OFF LOCAL QUEUE FLAG    RNB16
         LA    R4,4(,R4)             POINT TO REMOTE QUEUE        RNB16
*                                                                 RNB16
FIRSTJOE L     R8,0(R4)       LOAD FIRST JOE OFFSET               UF020
         LA    R8,0(,R8)       KILL EXTRANEOUS BITS.              UF020
.QSP8    ANOP                                                     UF020
         LTR   R8,R8          IS THE QUEUE EMPTY?
         AIF   (&QSP).QSP8A                                       RNB16
         BZR   R2             YES. RETURN TO CALLER.
         AGO   .QSP8B                                             RNB16
.QSP8A   BNZ   $1             /NO  - CONTINUE                     RNB16
*                             /YES -                              RNB16
         TM    QFLAG1,QFLG1LCL WAS THIS THE LOCAL QUEUE?          RNB16
         BO    SRCHJOE1       /YES - GO DO REMOTE QUEUE           RNB16
         BR    R2             /NO  - RETURN TO CALLER             RNB16
$1       EQU   *                                                  RNB16
.QSP8B   ANOP                                                     RNB16
         XC    PRIORITY(12),PRIORITY ZERO OUT HIGHEST POINTERS
         AIF   (&QSP).QSP9                                        UF020
NEXTJOE  SLA   R8,2           MULTIPLY BY 4
         AGO   .QSP10                                             UF020
.QSP9    ANOP                                                     UF020
NEXTJOE  LA    R8,0(,R8)      CLEAR EXTRA BITS                    UF020
         LTR   R8,R8          TEST FOR END OF QUEUE               UF020
.QSP10   ANOP                                                     UF020
         BZ    TESTJOE        END OF QUEUE. PASS HIGHEST TO CALLER.
         A     R8,QCJOTA      ADD BASE TO OFFSET
         AIF   (&QSP).QSP11                                       UF020
         LH    R9,JOEJQE      OFFSET TO JQE
         SLA   R9,2           MULTIPLY BY 4
         AGO   .QSP12                                             UF020
.QSP11   ANOP                                                     UF020
         L     R9,JOEJQE      OFFSET TO JQE                       UF020
         N     R9,=A(X'00FFFFFF')  CLEAR EXTRA BITS               UF020
.QSP12   ANOP                                                     UF020
         BZ    TRYJOE         THIS JOE ALREADY USED. TRY NEXT ONE.
         A     R9,QCJQTA      ADD BASE TO OFFSET
         LA    R7,255         PRESET MAXIMUM PRIORITY
         TM    JQEPRIO,240    IS THIS JOB PRIORITY 15?
         BO    HIGHJOE        YES. PASS TO CALLER.
         LA    R1,16          PRESET PRIORITY ONE
         CLI   JQETYPE,$HARDCPY IS THE JOB EXECUTING?
         BNE   EXECJOE        YES. USE PRIORITY ONE.
         IC    R1,JQEPRIO     INSERT JQE PRIORITY
EXECJOE  IC    R7,JOEPRIO     INSERT JOE PRIORITY
         AR    R7,R1          ADD PRIORITIES
         SRL   R7,1           BECAUSE HASP DOES IT, THAT'S WHY
HIGHJOE  C     R7,PRIORITY    IS THIS LESS THAN PREVIOUS HIGH?
         BL    TRYJOE         YES. TRY NEXT ONE.
         STM   R7,R9,PRIORITY NO. REPLACE PREVIOUS HIGH.
         AIF   (&QSP).QSP11A                                      UF020
TRYJOE   LH    R8,JOENEXT     ADDR OF NEXT JOE
         AGO   .QSP12A                                            UF020
.QSP11A  ANOP                                                     UF020
TRYJOE   L     R8,JOENEXT     ADDR OF NEXT JOE                    UF020
         N     R8,=A(X'00FFFFFF')  CLEAR EXTRA BITS               UF020
.QSP12A  ANOP                                                     UF020
         B     NEXTJOE        TRY NEXT JOE
TESTJOE  LM    R7,R9,PRIORITY LOAD ADDR OF HIGHEST JOE
         LTR   R8,R8          WAS THE QUEUE EMPTY?
         AIF   (&QSP).QSP12B                                      RNB16
         BZR   R2             YES. END OF QUEUE.
         AGO   .QSP12C                                            RNB16
.QSP12B  ANOP                                                     RNB16
         BNZ   $2                                                 RNB16
         TM    QFLAG1,QFLG1LCL WAS THIS THE LOCAL QUEUE?          RNB16
         BO    SRCHJOE1       /YES - GO DO REMOTE QUEUE           RNB16
         BR    R2             /NO  - END OF QUEUE.                RNB16
$2       EQU   *                                                  RNB16
.QSP12C  ANOP                                                     RNB16
         MVC   JOEJQEB,=F'0'  INDICATE THIS JOE USED              RNB16
*        MVC   JOEJQE,=F'0'   INDICATE THIS JOE USED              UF020
         B     4(R2)          DETERMINE ELIGIBILITY
PRTJOE   L     R1,TOTRECS     GET RECORD TOTAL                    INTEL
         A     R1,JOERECCT    ADD COUNT OF RECS FOR THIS JOE      INTEL
         ST    R1,TOTRECS     AND REPLACE TOTAL                   INTEL
         LA    R1,4           INDICATE THIS IS A JOE              INTEL
         AP    QCOUNT,=P'1'   INCREMENT COUNT
         L     R15,=V(FORMAT) ADDR OF PRINT MODULE
         BALR  R14,R15        PRINT THE JOE IN R9
REJJOE   B     FIRSTJOE       GET THE NEXT JOE
SKIPJOE  AP    QCOUNT,=P'1'   INCREMENT COUNT
         B     REJJOE         CONTINUE
***********************************************************************
*                                                                     *
*   DETERMINE INPUT QUEUE                                             *
*                                                                     *
***********************************************************************
FINDJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         BCTR  R4,0           SUBTRACT 1
         STH   R4,QCLASSH     RESTORE VALUE
         B     NEXTJQT2       CONTINUE
NEXTJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         CH    R4,=H'36'      IS THIS THE LAST QUEUE?
         BNL   NEXTJQT9       YES. GO HOME.
NEXTJQT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS
         AR    R4,R4          MULTIPLY BY 2
         AIF   (NOT &QSP).QSP13                                   UF020
         AR    R4,R4          AND BY 2 AGAIN                      UF020
.QSP13   ANOP                                                     UF020
         USING JQTDSECT,R1    BASE REG FOR JQT
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTCLSA(R4) NEXT QUEUE
         DROP  R1
         BR    R2             RETURN TO CALLER
NEXTJQT9 CLI   QCODE,0        IS THIS A STATUS REQUEST?
         BE    ST5            YES. GO TO STATUS.
         CLI   QCODE,36       IS THIS A DJ REQUEST?
         BE    ST5            YES. RETURN TO STATUS.               FCI*
         CLI   QCODE,4        IS THIS A DA REQUEST?                FCI*
         BNE   STOP           NO. GO HOME.
         B     DA3            YES. GO TO DA JOE PROCESSING.        FCI*
***********************************************************************
*                                                                     *
*   DETERMINE OUTPUT QUEUE                                            *
*                                                                     *
***********************************************************************
FINDJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         BCTR  R4,0           SUBTRACT 1
         STH   R4,QCLASSH     RESTORE VALUE
         B     NEXTJOT2       CONTINUE
NEXTJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         CH    R4,=H'36'      IS THIS THE LAST QUEUE?
         BNL   STOP           YES. GO HOME.
NEXTJOT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS
         AR    R4,R4          MULTIPLY BY 2
         AIF   (NOT &QSP).QSP14                                   UF020
         SLL   R4,2           AND THEN BY 4 (WILL ONLY GET LOCALS)UF020
.QSP14   ANOP                                                     UF020
         USING JOTDSECT,R1    BASE REG FOR JOT
         L     R1,QCJOTA      LOAD ADDR OF JOT
         LA    R4,JOTCLSQ(R4) NEXT QUEUE
         DROP  R1
         BR    R2             RETURN TO CALLER
***************************************************************** INTEL
*                                                                 INTEL
*  INITIALIZE SEARCH FOR CLASS/DEST/LINES/ETC                     INTEL
*                                                                 INTEL
***************************************************************** INTEL
INITSRCH XC    SRCHFLAG(SRCH$LEN),SRCHFLAG CLEAR OUT MAGILLA      INTEL
         CLI   QPARM1,C' '    WERE ANY PARMS SPECED?              INTEL
         BE    4(,R2)         NO...SKIP BACK TO SEARCH ALL QUEUES INTEL
         STM   R14,R4,REGSAVE1  SAVE OFF THE REGISTERS MAUDE,     INTEL
*                               WE'LL HAVE TO DO SOME WORK..SIGH  INTEL
         SPACE 1                                                  INTEL
         LA    R0,4           SCAN 4 PARMS                        INTEL
         LA    R1,QPARM1      POINT TO FIRST                      INTEL
INITSRC1 CLC   =CL8' ',0(R1)  NO PARM TO LOOK AT?                 INTEL
         BE    INITEND        THATS RIGHT...RETURN                INTEL
         NI    SRCHFLAG,255-GOTPARM  RESET PARM OK THIS PASS FLAG INTEL
         BAL   R2,INITPARM    GO CHECK OUT/INITIALIZE PARM        INTEL
         TM    SRCHFLAG,GOTPARM  DID WE GET ONE THIS TIME         INTEL
         BZ    TILT           NO..RAISE BLOODY HELL               INTEL
         LA    R1,QPARM2-QPARM1(,R1) BUMP BY SIZE OF ENTRY        INTEL
         BCT   R0,INITSRC1    THEN GO BACK AND CHECK FOR NEXT     INTEL
         SPACE 1                                                  INTEL
*                                                                 INTEL
INITEND  TM    SRCHFLAG,DOCHECK  ANYTHING TO DO                   INTEL
         BZ    TILT              NO..GROUSE ABOUTIT..             INTEL
*                                                                 INTEL
INITEND1 LM    R14,R4,REGSAVE1 GET BACK THE REGISTERS             INTEL
         B     4(,R2)         AND RETURN TO DO SEARCH             INTEL
*                                                                 INTEL
*  EXAMINE EACH PARM IN TURN FOR SPECIFICATIONS                   INTEL
*                                                                 INTEL
INITPARM CLI   0(R1),C'Q'     IS THIS A QUEUE REQUEST             INTEL
         BNE   INITS010       NO BYPASS THIS STUFF                INTEL
         MVI   SRCHCLAS,#EQ   ASUME EQUALITY                      INTEL
         CLI   1(R1),C'='     WANT EQUALITY?                      INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHCLAS,#NE                                       INTEL
         MVC   SRCHCLAS+1(L'SRCHCLAS-1),2(R1)  MOVE IN VALUE      INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
*                                                                 INTEL
INITS010 CLI   0(R1),C'F'     IS THIS A FORM  REQUEST             INTEL
         BNE   INITS020       NO BYPASS THIS STUFF                INTEL
         MVI   SRCHFORM,#EQ   ASUME EQUALITY                      INTEL
         CLI   1(R1),C'='     WANT EQUALITY?                      INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHFORM,#NE                                       INTEL
         MVC   SRCHFORM+1(L'SRCHFORM-1),2(R1)  MOVE IN VALUE      INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
*                                                                 INTEL
INITS020 CLI   0(R1),C'T'     IS THIS A UCS   REQUEST             INTEL
         BNE   INITS030       NO BYPASS THIS STUFF                INTEL
         MVI   SRCHUCS,#EQ    ASUME EQUALITY                      INTEL
         CLI   1(R1),C'='     WANT EQUALITY?                      INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHUCS,#NE                                        INTEL
         MVC   SRCHUCS+1(L'SRCHUCS-1),2(R1)    MOVE IN VALUE      INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
*                                                                 INTEL
INITS030 CLI   0(R1),C'C'     IS THIS A FCB   REQUEST             INTEL
         BNE   INITS040       NO BYPASS THIS STUFF                INTEL
         MVI   SRCHFCB,#EQ    ASUME EQUALITY                      INTEL
         CLI   1(R1),C'='     WANT EQUALITY?                      INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHFCB,#NE                                        INTEL
         MVC   SRCHFCB+1(L'SRCHFCB-1),2(R1)    MOVE IN VALUE      INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
*                                                                 INTEL
INITS040 CLI   0(R1),C'R'     IS THIS A DEST  REQUEST             INTEL
         BE    INITS04A       YES..START IT UP                    INTEL
         CLI   0(R1),C'D'     IS A DEST REQUEST (ALIAS)           INTEL
         BNE   INITS050       NO..BYPASS                          INTEL
         SPACE 1                                                  INTEL
INITS04A CLI   2(R1),C'L'     IS IT FOR LOCAL                     INTEL
         BE    INITS04X       YES.....SETUP FOR RMT000 ALREADY    INTEL
         CLI   2(R1),C'R'     IS IT REMOTE FORMAT?                INTEL
         BNE   TILT           NO...INDICATE ERROR                 INTEL
***                                                               INTEL
         LA    R15,6          SET SEARCH LIMIT                    INTEL
         LA    R14,2(,R1)     POINT TO START OF 'RMTNNN' MESSAGE  INTEL
INITS041 CLI   0(R14),C'0'    IS THIS NUMERIC?                    INTEL
         BNL   INITS042       YEP.. CHAR ^< '0'..GO CONTINUE      INTEL
         LA    R14,1(R14)     NO.. BUMP                           INTEL
         BCT   R15,INITS041       AND GRIND                       INTEL
         B     TILT           BAD FORM..NO NUMERIC REMOTE..GROUSE INTEL
*                                                                 INTEL
INITS042 LR    R3,R14         SAVE ADDR OF FIRST NUMERIC CHARACTERINTEL
         LR    R4,R15         SAVE COUNT OF CHARS LEFT TO SCAN    INTEL
INITS043 CLI   0(R3),C' '     IS THIS THE END OF THE FIELD?       INTEL
         BE    INITS044       YES..CHK FOR TOTAL NUMERIC          INTEL
         LA    R3,1(R3)       LOOP                                INTEL
         BCT   R4,INITS043      UNTIL END OR BLANK FOUND          INTEL
*                                                                 INTEL
INITS044 SR    R15,R4         GET COUNT OF ALLEGED NUMERIC CHARS  INTEL
         BCTR  R15,0          AND MAKE INTO MACHINE LENGTH        INTEL
         MVC   QFZONES,QFZONE PREPARE FOR ACID TEST               INTEL
         EX    R15,MVZ        MOVE ZONES FOR NUMERIC TEST         INTEL
         CLC   QFZONES,QFZONE ALL NUMERIC?                        INTEL
         BNE   TILT           NOPE..SORRY BUT SPLIT               INTEL
         EX    R15,PACK       PACK NUMBER                         INTEL
         CVB   R15,CONVERT    AND GET BINARY NUMBER WE WANT       INTEL
INITS045 CH    R15,=H'255'    TOO BIG?                            INTEL
         BH    TILT              YES                              INTEL
         LTR   R15,R15        TO LOW ? (NEGATIVE THAT IS)         INTEL
         BM    TILT              YES..BYE BYE                     INTEL
         AIF   (&QSP).SP$2                                        INTEL
INITS046 STC   R15,SRCHDEST+1 AHHHHHHH....AN HONEST USER.....     INTEL
         AGO   .SP$2A                                             INTEL
.SP$2    ANOP  ,                                                  INTEL
INITS046 STCM  R15,B'0011',SRCHDEST+1     AN HONEST USER.....     INTEL
.SP$2A   ANOP  ,                                                  INTEL
*                                                                 INTEL
         SPACE 1                                                  INTEL
INITS04X MVI   SRCHDEST,#EQ   ASUME EQUALITY                      INTEL
         CLI   1(R1),C'='     WANT EQUALITY?                      INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHDEST,#NE                                       INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
*                                                                 INTEL
INITS050 CLI   0(R1),C'L'     IS THIS A LINES REQUEST             INTEL
         BNE   INITSXXX       NO BYPASS THIS STUFF                INTEL
         LA    R15,6          SET SEARCH LIMIT                    INTEL
         LA    R14,2(,R1)     POINT TO START OF 'NNNNNN' MESSAGE  INTEL
*                                                                 INTEL
INITS051 LR    R3,R14         SAVE ADDR OF FIRST NUMERIC CHARACTERINTEL
         LR    R4,R15         SAVE COUNT OF CHARS LEFT TO SCAN    INTEL
INITS052 CLI   0(R3),C'0'     IS THIS THE END OF THE FIELD?       INTEL
         BL    INITS053       YES..CHK FOR TOTAL NUMERIC          INTEL
         LA    R3,1(R3)       LOOP                                INTEL
         BCT   R4,INITS052      UNTIL END OR BLANK FOUND          INTEL
*                                                                 INTEL
INITS053 SR    R15,R4         GET COUNT OF ALLEGED NUMERIC CHARS  INTEL
         BCTR  R15,0          AND MAKE INTO MACHINE LENGTH        INTEL
         MVC   QFZONES,QFZONE PREPARE FOR ACID TEST               INTEL
         EX    R15,MVZ        MOVE ZONES FOR NUMERIC TEST         INTEL
         CLC   QFZONES,QFZONE ALL NUMERIC?                        INTEL
         BNE   TILT           NOPE..SORRY BUT SPLIT               INTEL
         EX    R15,PACK       PACK NUMBER                         INTEL
         CVB   R15,CONVERT    AND GET BINARY NUMBER WE WANT       INTEL
         CLI   0(R3),C'K'     WANT AMOUNT IN 1000S?               INTEL
         BNE   INITS055       NO...USE AS IS                      INTEL
         SR    R14,R14        CLEAR FOR MULTIPLY                  INTEL
         M     R14,=F'1000'   MAKE IT IN 1000S (K)                INTEL
INITS055 STCM  R15,B'1111',SRCHLINE+1  STORE AWAY RESULT          INTEL
*                                                                 INTEL
         SPACE 1                                                  INTEL
INITS05X MVI   SRCHLINE,#GE   ASUME GREATER THAN OR EQUAL         INTEL
         CLI   1(R1),C'<'     WANT  LESS THAN OR EQUAL ?          INTEL
         BE    *+8            NO..USE INEQUALITY                  INTEL
         MVI   SRCHLINE,#LE                                       INTEL
         OI    SRCHFLAG,DOCHECK+GOTPARM DO THE SEARCH             INTEL
         SPACE 2                                                  INTEL
INITSXXX BR    R2             RETURN BACK TO MAIN LOOP            INTEL
         SPACE 2                                                  INTEL
MVZ      MVZ   QFZONES(1),0(R14)   EXECUTED                       INTEL
PACK     PACK  CONVERT,0(1,R14)    EXECUTED                       INTEL
         SPACE 2                                                  INTEL
***************************************************************** INTEL
*                                                                 INTEL
*   REPORT PROBLEM WITH PARSING OF THE DI,AI,HI,DO,AO COMMAND     INTEL
*                                                                 INTEL
***************************************************************** INTEL
TILT     L     R2,=A(HEADING)  MOVE IN THE                        INTEL
         MVC   QDHLINE,0(R2)     HEADING                          INTEL
         LA    R2,MESSAG1N     NUMBER OF MESSAGES                 INTEL
         L     R3,=A(MESSAGE1) ADDRESS OF FIRST MESSAGE           INTEL
PUTHELP  MVC   QDMLNG,=H'80'   SET MSG LENGTH                     INTEL
PUTHELP1 ST    R3,QDMSGA       SET MESSAGE ADDRESS                INTEL
         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE         INTEL
         BALR  R14,R15         LINK TO ROUTINE                    INTEL
         LA    R3,80(,R3)      POINT TO NEXT LINE                 INTEL
         BCT   R2,PUTHELP1     LOOP TILL DONE                     INTEL
         SPACE 1                                                  INTEL
         XC    QDMLNG,QDMLNG   SET TO FLUSH BUFFER                INTEL
         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE         INTEL
         LA    R14,TILT       INSURE LOOP FOR DISPLAY             INTEL
         BR    R15                                                INTEL
         SPACE 2                                                  INTEL
******************************************************************INTEL
*                                                                 INTEL
*  PERFORM CHECK FOR DESIRED STUFF WITH A JOE                     INTEL
*                                                                 INTEL
******************************************************************INTEL
CHKONJOE TM    SRCHFLAG,DOCHECK  ARE WE WANTED HERE?              INTEL
         BZ    4(R14)            NO, THANK YOU..USE THE JOE       INTEL
         STM   R14,R2,REGSAVE1   SAVE WORK REGISTERS              INTEL
         SR    R1,R1             USED FOR EXECUTE INSTRUCTIONS    INTEL
*                                                                 INTEL
         IC    R1,SRCHCLAS       GET OPCODE FOR DEST              INTEL
         CLC   SRCHCLAS+1(L'SRCHCLAS-1),QCLASS                    INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         IC    R1,SRCHLINE       GET OPCODE FOR LINES             INTEL
         CLC   SRCHLINE+1(L'SRCHLINE-1),JOERECCT  COMPARE LINECNT INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         AIF   (&QSP).SP$3                                        INTEL
         LH    R15,JOECHAR       GET CHARACTERISTIC JOE ADDRESS   INTEL
         N     R15,=X'0000FFFF'  WIPE OFF TRASH                   INTEL
         SLL   R15,2             MULT BY 2 (EL CHEAPO..)          INTEL
         AGO   .SP$3A                                             INTEL
.SP$3    ANOP  ,                                                  INTEL
         L     R15,JOECHAR       GET CHARACTERISTIC JOE ADDRESS   INTEL
         LA    R15,0(,R15)       CLEAN OFF THE TRASH              INTEL
.SP$3A   ANOP  ,                                                  INTEL
         A     R15,QCJOTA        AND ADDRESS THE CHAR. JOE        INTEL
*                                                                 INTEL
         IC    R1,SRCHDEST       GET OPCODE FOR DEST              INTEL
         AIF   (&QSP).SP$4                                        INTEL
         CLC   SRCHDEST+1(L'SRCHDEST-1),JOEROUT+1                 INTEL
         AGO   .SP$4A                                             INTEL
.SP$4    ANOP  ,                                                  INTEL
         CLC   SRCHDEST+1(L'SRCHDEST-1),JOEREMOT    SP 1.3        INTEL
.SP$4A   ANOP  ,                                                  INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         IC    R1,SRCHFORM       GET OPCODE FOR FORM              INTEL
         CLC   SRCHFORM+1(L'SRCHFORM-1),JOEFORM-JOEDSECT(R15)     INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         IC    R1,SRCHFCB        GET OPCODE FOR FCB               INTEL
         CLC   SRCHFCB+1(L'SRCHFCB-1),JOEFCB-JOEDSECT(R15)        INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         IC    R1,SRCHUCS        GET OPCODE FOR UCS               INTEL
         CLC   SRCHUCS+1(L'SRCHUCS-1),JOEUCS-JOEDSECT(R15)        INTEL
         EX    R1,WHATNOW        GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
* SURVIVED THE GAUNTLET.....EXIT STAGE LEFT..AND SELECT THE THING INTEL
*                                                                 INTEL
EXITOK   LM    R14,R2,REGSAVE1   RESTORE REGISTERS                INTEL
         B     4(R14)            LOOKS OK..USE SELECT JOE EXIT    INTEL
EXITBAD  LM    R14,R2,REGSAVE1   RESTORE REGISTERS                INTEL
         BR    R14               NO MATCH..NO SELECT EXIT         INTEL
*                                                                 INTEL
WHATNOW  NOP   EXITBAD           REJECT EXIT (***EXECUTED***)     INTEL
******************************************************************INTEL
*                                                                 INTEL
*  PERFORM CHECK FOR DESIRED STUFF WITH A JQE                     INTEL
*                                                                 INTEL
******************************************************************INTEL
CHKONJQE TM    SRCHFLAG,DOCHECK  ARE WE WANTED HERE?              INTEL
         BZ    4(R14)            NO, THANK YOU..USE THE JQE       INTEL
         SR    R1,R1             USED FOR EXECUTE INSTRUCTIONS    INTEL
*                                                                 INTEL
         IC    R1,SRCHCLAS       GET CODE FOR CLASS               INTEL
         NI    SRCHCLAS+1,X'7F'  MASK OFF CHAR->CNVT TO JQE CLASS INTEL
         CLC   SRCHCLAS+1(L'SRCHCLAS-1),JQETYPE    CLASS IS OURS? INTEL
         EX    R1,WHATNOW1       GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         IC    R1,SRCHDEST       GET OPCODE FOR DEST              INTEL
         AIF   (&QSP).SP$5                                        INTEL
         CLC   SRCHDEST+1(L'SRCHDEST-1),JQEPRTRT+1 PRINT IS OURS? INTEL
         AGO   .SP$5A                                             INTEL
.SP$5    ANOP  ,                                                  INTEL
         CLC   SRCHDEST+1(L'SRCHDEST-1),JQEPRREM   PRINT IS OURS? INTEL
.SP$5A   ANOP  ,                                                  INTEL
         EX    R1,WHATNOW1       GO TO LOCATION (MAYBE)           INTEL
*                                                                 INTEL
         AIF   (&QSP).SP$6                                        INTEL
*        CLC   SRCHDEST+1(L'SRCHDEST-1),JQEPUNRT+1 PUNCH IS OURS? INTEL
         AGO   .SP$6A                                             INTEL
.SP$6    ANOP  ,                                                  INTEL
*        CLC   SRCHDEST+1(L'SRCHDEST-1),JQEPUREM   PUNCH IS OURS? INTEL
.SP$6A   ANOP  ,                                                  INTEL
*        EX    R1,WHATNOW1       GO TO LOCATION (MAYBE)           INTEL
*                         ENABLE ABOVE IF PUNCH ROUTE WANTED      INTEL
*                                                                 INTEL
GOODJQE  B     4(,R14)           LOOKS OK..USE SELECT JQE EXIT    INTEL
BADJQE   BR    R14               NO MATCH..NO SELECT EXIT         INTEL
WHATNOW1 NOP   BADJQE       **EXECUTED**                          INTEL
***********************************************************************
*                                                                  FCI*
*  FIND OUT HOW 'FULL' IS JES2 SPOOL SPACE NOW                     FCI*
*                                                                  FCI*
***********************************************************************
HOWFULL  L     R15,16         POINT TO CVT                         FCI*
         USING CVTDSECT,R15                                        FCI*
         L     R15,CVTJESCT   POINT TO JESCT                       FCI*
         DROP  R15                                                 FCI*
         USING JESCT,R15                                           FCI*
         L     R15,JESSSCT    POINT TO SSCT                        FCI*
         DROP  R15                                                 FCI*
         USING SSCT,R15                                            FCI*
         L     R15,SSCTSSVT   POINT TO SSVT                        FCI*
         DROP  R15                                                 FCI*
         USING SSVT,R15                                            FCI*
         L     R1,$SVTGALC    GET TRACK GROUPS ALLOCATED           FCI*
         M     R0,=F'100'     ALLOW FOR PERCENTAGE                 FCI*
         D     R0,$SVTGTOT    DIVIDE BY TOTAL TRACK GROUPS         FCI*
         CVD   R1,CONVERT     CONVERT TO DECIMAL                   FCI*
         MVC   FCOUNT,ED5     MOVE IN MASK FOR CONVERT             FCI*
         ED    FCOUNT,CONVERT+5  EDIT IT NICE                      FCI*
         MVC   SPOOLMSG,FCOUNT+3  MOVE NUMBER INTO MESSAGE         FCI*
         BR    R2             AND RETURN TO CALLER                 FCI*
         DROP  R15                                                 FCI*
***********************************************************************
*                                                                     *
*   CALL DISPLAY ROUTINE                                              *
*                                                                     *
***********************************************************************
DISPLAY  LA    R1,QDMSG             SAVE ADDRESS
         ST    R1,QDMSGA                 OF THE MESSAGE
         MVC   QDMLNG,=H'80'        SET THE LENGTH
         L     R15,=V(DISPLAY)      BRANCH TO
         BALR  R14,R15                     DISPLAY
         BR    R2                   RETURN TO CALLER
***********************************************************************
*                                                                     *
*   GO HOME (AND OPTIONALLY POST A TOTALS MESSAGE)                INTEL
*                                                                     *
***********************************************************************
STOP     L     R1,TOTRECS           GET TOTAL RECORD COUNT        INTEL
         LTR   R1,R1                ANYONE THERE?                 INTEL
         BNP   STOPIT               NO..KISS OFF                  INTEL
         CLI   QCODEH+1,4           IS THIS A DA REQUEST?         INTEL
         BE    STOPIT               YES...NO TOTALS HERE          INTEL
         MVC   QDMSG,TOTHDR         MOVE IN FINAL TOTALS MSG      INTEL
         CVD   R1,CONVERT           GET IT IN BINARY              INTEL
         MVC   QTRECS,ED12          MOVE IN MASK                  INTEL
         ED    QTRECS,CONVERT+3     AND MAKE IT PRETTY            INTEL
         BAL   R2,DISPLAY           POKE OUT THE LINE             INTEL
STOPIT   QSTOP
         LTORG
***********************************************************************
*                                                                     *
*   TABLES FOR CLASS DETERMINATION                                    *
*                                                                     *
***********************************************************************
NAMETBL  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
CLASSTBL DC    192X'01'
         DC    X'00010203040506070809',7X'00'
         DC    X'0A0B0C0D0E0F101112',8X'00'
         DC    X'131415161718191A',6X'00'
         DC    X'1B1C1D1E1F2021222324',6X'00'
***********************************************************************
*                                                                     *
*   MISCELLANEOUS GARBAGE                                             *
*                                                                     *
***********************************************************************
ED5      DC    X'402020202120'
ED12     DC    X'402020206B2020206B202120'   MASK FOR TOTAL LINES  FCI*
DQHEADER DC    CL80'*** INPUT QUEUES ***'
DQLINE   DC    CL80' INPUT                        EXECUTING      WAITINX
               G      HELD'
DFHEADER DC    CL80'*** OUTPUT QUEUES ***   (CURRENT SPOOL UTILIZATION X
               IS XXX% FULL)       RECORDS '                       FCI*
DFLINE   DC    CL80' OUTPUT                       PRINTING       LOCAL X
                      REMOTE'
TOTHDR   DC    CL80'    --  TOTAL RECORDS IN QUEUES SELECTED  --       X
                            '                                     INTEL
TRMASK   DC    XL256'00'      USED TO SET MASK FOR STATUS COMPARE INTEL
         ORG   TRMASK+C'?'                                        INTEL
         DC    XL1'FF'                                            INTEL
         ORG   TRMASK+C'.'                                        INTEL
         DC    XL1'FF'                                            INTEL
         ORG   TRMASK+C'*'                                        INTEL
         DC    XL1'FF'                                            INTEL
         ORG   ,                                                  INTEL
HEADING  DC  CL80'THE SYNTAX FOR DI,AI,HI,DO,HO,AO COMMANDS IS:'  INTEL
MESSAGE1 DS    0H                                                 INTEL
        DC CL80'--------------------OPERANDS FOR DI,AI,HI,DO, AND AO---X
               -------------------------'                         INTEL
 DC CL80'  Q=X     X    = INCLUDE CLASS                Q^X     X    = EX
               XCLUDE CLASS'                                      INTEL
 DC CL80'  R=YYYY  YYYY = INCLUDE REMOTE ID            R^YYYY  YYYY = EX
               XCLUDE REMOTE ID'                                  INTEL
 DC CL80'     NOTE: YYYY MAY BE IN ''RMTNNN'' OR ''LOCAL'' FORMAT.' NTL
        DC CL80'--------------------OPERANDS FOR DO AND AO-------------X
               -------------------------'                         INTEL
 DC CL80'  C=VVVV  VVVV = INCLUDE FCB IMAGE            C^VVVV  VVVV = EX
               XCLUDE FCB IMAGE'                                  INTEL
 DC CL80'  F=WWWW  WWWW = INCLUDE FORMS                F^WWWW  WWWW = EX
               XCLUDE FORMS'                                      INTEL
 DC CL80'  T=ZZZZ  ZZZZ = INCLUDE UCS IMAGE            T^ZZZZ  ZZZZ = EX
               XCLUDE UCS IMAGE'                                  INTEL
 DC CL80'  L>NNNNNN     = INCLUDE IF LINES>NNNNNN      L<NNNNNN     = IX
               NCLUDE IF LINES<NNNNNN'                            INTEL
 DC CL80'    NOTE: ''NNNNNN'' MAY ALSO BE ''NNNNNK'' WHERE ''K'' IS 100X
               0. '                                               INTEL
 DC CL80'           (E.G.  L>10K  LOOKS FOR JOBS WITH OUTPUT > 10,000 LX
               INES.)'                                            INTEL
 DC CL80' '                                                       INTEL
 DC CL80'   THE ABOVE OPERANDS MAY BE MIXED AND BE ENTERED IN ANY ORDERX
               , E.G.:'                                           INTEL
 DC CL80'  DO R=LOC Q=X F^STD.'                                   INTEL
 DC CL80'   WOULD SHOW ALL LOCAL SYSOUT=X THAT DOES NOT USE A STANDARD X
               FORM'                                              INTEL
 DC CL80'  DO F^STD. R^LOCAL '                                    INTEL
 DC CL80'   WOULD SHOW ALL NON-LOCAL OUTPUT WITH NON-STANDARD FORMS'  L
 DC CL80' '                                                       INTEL
 DC CL80'NOTE: THE OPERANDS FORM A LOGICAL ''AND'' CONDITION..IF ANY ONX
               E OF THE TESTS FAIL,'                              INTEL
 DC CL80'      THE RECORD WILL NOT BE SELECTED FOR DISPLAY.'      INTEL
MESSAG1N EQU   (*-MESSAGE1)/80 NUMBER OF MESSAGES                 INTEL
SYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023
SEARCH   CSECT ,                                                  UF023
         SPACE 1                                                  UF001
$MAXNODE EQU   99             FOR NJE $JOT EXPANSION              UF001
         SPACE 1                                                  UF001
         $CVT   ,                                                  FCI*
         $JESCT ,                                                  FCI*
         $SSCT  ,                                                  FCI*
         $SVT   ,                                                  FCI*
         $JQE
JQEHQLOK EQU   JQEJBLOK       NEW LABEL FOR OLD FIELD             UF020
         $JOE
         $JOT
         $JQT
         EJECT ,                                                  INTEL
WORK     DSECT
         DS    CL80
PRIORITY DS    3F
CONVERT  DS    D                                                   FCI*
WORKNAME DS    CL8                                                INTEL
REGSAVE1 DS    7F         SAVE FOR REGS 14,15,0,1,2,3,4           INTEL
*                                                                 INTEL
SRCHFLAG DC    X'00'               SET TO DO GENERIC SEARCH       INTEL
DOCHECK  EQU   X'80'                                              INTEL
GOTPARM  EQU   X'40'      FOUND A PROPER PARM IN INITSRCH PASS.   INTEL
         SPACE 2                                                  INTEL
#NOP     EQU   X'00'               NOP                            INTEL
#B       EQU   X'F0'               BRANCH                         INTEL
*                                                                 INTEL
* NOTE: REVERSED LOGIC ON ITEMS...                                INTEL
*       REMEMBER WE WANT TO BRANCH IF  N O T  A SUCCESSFUL MATCH  INTEL
*       THAT MAKES THE LOGIC FOR THE SCAN AN IMPLICIT 'AND' AND   INTEL
*       THE FIRST FAILURE CAUSES REJECT OF THE JOE/JQE.           INTEL
*       (DE MORGAN WAS RIGHT....)                                 INTEL
*                                                                 INTEL
#NE      EQU   X'80'               BRANCH IF EQUAL                INTEL
#EQ      EQU   X'70'               BRANCH NOT EQUAL               INTEL
#GE      EQU   X'40'               BRANCH A < B  NOBR ON EQUAL    INTEL
#LE      EQU   X'20'               BRANCH A > B  NOBR ON EQUAL    INTEL
*                                                                 INTEL
* FORMAT OF NEXT 4 FIELDS IS : OPCODE FOLLOWED BY FIELD           INTEL
*                                                                 INTEL
SRCHCLAS DC    XL2'00'             OP:CLASS TO LOOK FOR           INTEL
         AIF   (&QSP).SP$7                                        INTEL
SRCHDEST DC    XL2'00'             OP:DEST TO LOOK FOR            INTEL
         AGO   .SP$7A                                             INTEL
.SP$7    ANOP  ,                                                  INTEL
SRCHDEST DC    XL3'00'             OP:DEST TO LOOK FOR  SP 1.3    INTEL
.SP$7A   ANOP  ,                                                  INTEL
SRCHFORM DC    XL5'00'             OP:FORM TO LOOK FOR            INTEL
SRCHFCB  DC    XL5'00'             OP:FCB  TO LOOK FOR            INTEL
SRCHUCS  DC    XL5'00'             OP:UCS  TO LOOK FOR            INTEL
SRCHLINE DC    XL5'00'             OP:LINES TO LOOK FOR           INTEL
SRCH$LEN EQU   *-SRCHFLAG          LENGTH OF OPCODE/FIELD AREAS   INTEL
         SPACE 1                                                  INTEL
MASKAREA DC    CL8' '              AREA TO HOLD MASK FOR NAME     INTEL
MASKNAME DC    CL8' '              AREA TO MASKED TARGET FOR JOBN INTEL
         SPACE 1                                                  INTEL
TOTRECS  DC    F'0'                FOR TOTAL RECORD COUNTS        INTEL
         SPACE 1                                                  INTEL
WORKLEN  EQU   *-WORK                                             INTEL
         QCOMMON
         SPACE 2
         ORG   QDMSG
         DS    CL9
CLASS    DS    CL1
         DS    CL2
QTCOUNT  DS    CL6
         DS    CL7
QECOUNT  DS    CL3
         DS    CL12
QACOUNT  DS    CL3
         DS    CL10
QHCOUNT  DS    CL3
         DS    CL10                                                FCI*
QTRECS   DS    CL12                                                FCI*
         ORG   QTCOUNT
FCOUNT   DS    CL6
         SPACE 1                                                  INTEL
SPOOLMSG EQU   QDHLINE+54,3        THE 3 DIGITS OF HOW FULL SPOOLISFCI*
SYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023
         END
