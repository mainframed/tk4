*          DATA SET MSSTSO     AT LEVEL 001 AS OF 03/10/79
MSSTSO   TITLE ' DISPLAY 3850 ACTIVITY ON A SCREEN'
***********************************************************************
*                                                                     *
*             MODULE NAME = MSSTSO                                    *
*                                                                     *
*             DESCRIPTIVE NAME = IPO SUPPLIED EXAMPLE OF A 3850       *
*                ACTIVITY DISPLAY ON A SCREEN UNDER TSO.              *
*                                                                     *
*             COPYRIGHT = NONE                                        *
*                                                                     *
*             STATUS = RELEASE 01.0 OF IPO                            *
*                                                                     *
*             FUNCTION =                                              *
*                DISPLAY MSS ACTIVITY ON A VIDEO.                     *
*                SHOW HOW MSS WORKS AND USES SPACE ON STAGING PACKS.  *
*                PROGRAM IS INVOKED A TSO COMMAND MSSTSO              *
*                                                                     *
*             OPERATION =                                             *
*                DYNAMIC ALLOCATION OF THE PRIMARY TABLE PACK (THE    *
*                VOLUME SERIAL NUMBER OF WHICH IS ASKED VIA A TGET    *
*                TO THE TERMINAL).                                    *
*                READ THE MSS TABLES IN EXCP ACCESS METHOD.           *
*                UPON VALUES IN THE CONFIGURATION TABLE AND THE PAGE  *
*                AVAILABILITY BLOCK TABLE,CONSTRUCT A CCW CHAIN TO    *
*                SELECT INFORMATIONS AS REQUIRED.                     *
*                ALLOW TO CHANGE SOME DISPLAY PARAMETERS.             *
*                ALLOW TO PRINT THE CURRENT SCREEN ON A DYNAMICALLY   *
*                ALLOCATED SYSOUT. THIS SYSOUT WILL BE RELEASED IN    *
*                CLASS A AT THE END OF THE TSO COMMAND.               *
*                 SEE BELOW FOR A MORE COMPLETE DESCRIPTION           *
*                                                                     *
*             NOTES =                                                 *
*                DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE  *
*                   IF A DIFFERENT CHARACTER SET IS NEEDED.           *
*                                                                     *
*                                                                     *
*                RESTRICTIONS = MSS MUST BE ACTIVE....                *
*                                                                     *
*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *
*                   REGISTERS 0 TO 10 = WORK REGISTERS                *
*                   REGISTERS 11,12   = ADDRESSABILITY TO MSSDISP     *
*                                       CSECT                         *
*                   REGISTER 13       = SAVE AREA REGISTER            *
*                   REGISTERS 14,15   = WORK REGISTERS                *
*                                                                     *
*                PATCH LABEL = NONE                                   *
*                                                                     *
*                MODULE TYPE = PROCEDURE                              *
*                   PROCESSOR = ASM                                   *
*                   MODULE SIZE = < 6K BYTES                          *
*                   ATTRIBUTED = PROBLEM PROGRAM STATE                *
*                                                                     *
*                ENTRY POINT = MSSDISP (MAIN ENTRY POINT)             *
*                              MVTDISP (CALLED SUBROUTINE EP)         *
*                              INIPRINT (CALLED SUBROUTINE EP)        *
*                   LINKAGE =                                         *
*                      FROM A TSO COMMAND (SPF2 IS SUPPORTED)         *
*                                                                     *
*                INPUT = NONE                                         *
*                                                                     *
*                OUTPUT = SCREEN IMAGES ON SYSPRINT                   *
*                                                                     *
*                EXIT - NORMAL =AT PROGRAM END VIA BRANCH REGISTER 14 *
*                   OUTPUT =DYNAMIC SYSOUT FILE IN CLASS A IF REQUIRED*
*                   RETURN CODE = ZERO                                *
*                                                                     *
*                EXIT - ERROR = WITH MESSAGES IF CATASTROPHIC         *
*                               SITUATIONS ARE FOUND                  *
*                   OUTPUT = ERROR MESSAGE ON DISPLAY CONSOLE         *
*                   RETURN CODE = 0                                   *
*                                                                     *
*                EXTERNAL REFERENCES = NONE                           *
*                                                                     *
*                   DATA AREAS = VARIOUS SCREEN BUFFERS               *
*                                AND TABLE I/O BUFFERS                *
*                   CONTROL BLOCKS= MSS TABLES DSECTS                 *
*                        SVC126 REQUEST BLOCK                         *
*                                                                     *
*                TABLES = SVC 126 REQUEST BLOCK   (PARM126)           *
*                         VOLUME IDENTIFIER TABLE (IDARRAY)           *
*                         VIRTUAL VOLUME LIST     (VIRTVOL)           *
*                         .....                                       *
*                                                                     *
*                MACROS = DYNALLOC,OPEN,TGET,TPUT,                    *
*                    TIME,EXCP,WAIT,CLOSE.                            *
*                                                                     *
*                                                                     *
*                CHANGE ACTIVITY = NONE                               *
*                                                                     *
*                MESSAGES = ERROR MESSAGES ARE ISSUED TO THE OPERATOR *
*                     CONSOLE.                                        *
*                                                                     *
*                ABEND CODES = NONE                                   *
*                                                                     *
*                                                                     *
*                SCREEN DISPLAYS DESCRIPTION =                        *
*                                                                     *
*    FOR SPECIFIED SDG(S),THE INFORMATIONS DISPLAYED ARE :            *
*            - FOR EACH SSID ONLINE FOR THIS SDG (S) :                *
*                 - THE OWNER OF EACH VIRTUAL PAGE (A CHARACTER IS    *
* USED AS A CROSS REFERENCE IN THE LIST OF THE MOUNTED VOLUME).       *
*  NOTES : THE CHARACTERS **** INDICATE THE POSITION OF THE MSS       *
*          TABLES ON A TABLE PACK SSID.                               *
*          A DOT INDICATES THAT THE CORRESPONDING PAGE IS ALLOCATED   *
*          TO A VOLUME WHICH IS NOT LISTED IN THAT FRAME. *
*                 - THE NUMBER OF ACT, INACT, FREE, BOUND PAGES       *
*            _ THE SERIAL OF EACH VOLUME IN THE MVT, WITH THE INDEX   *
* CHARACTER AS A REFERENCE IN THE PAGE OWNER IN SSIDS. A CHARACTER    *
* 'M' FOLLOWING THIS KEY INDICATES THAT VOLUME IS REALLY MOUNTED,     *
* WHILE A BLANK SHOWS DATA REUSE IS POSSIBLE.                         *
*                                                                     *
*      THE LAST LINE IS USE TO CHANGE THE FRAME, PRINT FRAME OR       *
* TERMINATE THE PROGRAM.                                              *
*     - PF1 WILL PRODUCE AN INFORMATIVE PANNEL.                       *
*     - PF2 WILL PRODUCE A FRAME TO UPDATE DISPLAY CONSTANTS.         *
*     - PF4 WILL PRINT THE DISPLAYED FRAME ON SYSPRINT.               *
*     - PF8 WILL ALLOW TO DISPLAY THE NEXT FRAME (IF AVAILABLE)       *
*     - PA2 WILL STOP THE PROGRAM.                                    *
*     - A VOLUME SERIAL ENTERED AFTER ' VOL' WILL PRODUCE A DISPLAY   *
* OF THE MVT BLOCK FOR THIS VOLUME,SHOWING THE VOLUME ATTRIBUTES,     *
* AND, FOR EACH REAL PAGE, THE CORRESPONDING VIRTUAL PAGE, LUA, AND   *
* THE CYLINDER MAP. OPERATING UNDER THIS FRAME, DEPRESSING PF4 WILL   *
* PRODUCE PRINTING OF THE MVT DISPLAY ON SYSPRINT, AND DEPRESSING     *
* PF3 WILL RETURN TO THE MAIN FRAME.                                  *
*                                                                     *
* NOTE   :  IF THE ERROR MESSAGE : 'TOO MUCH VOLUMES IN MVT.....'     *
* ---       APPEARS, INCREASE THE VALUE OF NBFRAME IN THE SOURCE      *
*           PROGRAM AND REDO THE ASSEMBLY.                            *
*            NBFRAME IS THE NUMBER OF FRAMES THAT CAN BE DISPLAYED ON *
*           THE SCREEN,EACH FRAME GIVING UP TO 40 VOLUMES TO BE       *
*           LISTED.                                                   *
*             THE INITIAL VALUE OF NBFRAME IS 6, PROVIDING MAX 240    *
*           MVT ENTRIES TO BE DISPLAYED.                              *
*                                                                     *
*                                                                     *
*  THE PROGRAM IS INVOKED ISSUING A COMMAND MSSTSO ON THE TERMINAL.   *
*                                                                     *
***********************************************************************
         EJECT
MSSTSO   CSECT
         SAVE  (14,12),,MSSTSO_&SYSDATE   SAVE REGISTERS
         LR    R12,R15             INITIALIZE BASE REGISTER
         USING MSSTSO,R12,R11      BASE REGISTERS
         LA    R11,2048(R12)       INITIALIZE
         LA    R11,2048(R11)                  2ND BASE REGISTER
         B     SAVE1+72            GO TO NEXT EXECUTABLE INSTRUCTION
SAVE1    DS    18F                 SAVE AREA FOR CALLED PROGRAM
         ST    R13,SAVE1+4         SAVE R13 OF CALLING PROGRAM
         LA    R15,SAVE1           R15=SAVE ADDRESS OF CALLED
         ST    R15,8(R13)          PROTECT SAVE AREA OF CALLED PROGRAM
         LR    R13,R15             R13=SAVE AREA ADDR OF CALLED
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
NBFRAME  EQU   6                  NUMBER OF FRAMES ALLOWED
         SPACE 2
CHKOPER  EXTRACT FCIPSCB,'S',FIELDS=(PSB)  FIND PSCB FOR TSO USER
         SPACE 1
         L     R1,FCIPSCB         GET ADDRESS OF PSCB
         USING PSCB,R1              AND GOOD OLE ADDRESSABILITY
         TM    PSCBATR1,PSCBCTRL  DOES USER HAVE OPER PRIVLEDGE?
         BO    GETVOL             YES... DO THE THING
         LA    R1,NOTOPER         NO...GRIPE AND SPLIT
         LA    R0,L'NOTOPER
         TPUT  (1),(0),R
         B     NOGETMN            SPLIT THE SCENE......
FCIPSCB  DC    F'0'
NOTOPER  DC    CL38'SORRY..OPER PRIVLEDGE REQD. FOR MSSTSO'
         EJECT
**********************************************************************
*                                                                    *
*        EXTRACT VOLUME SERIAL OF THE TABLE PACK VOLUME              *
*                                                                    *
**********************************************************************
         SPACE 2
GETVOL   LA    R1,MESS1            SEND MESSAGE
         LA    R0,L'MESS1
         TPUT  (R1),(R0)
         LA    R1,REPAREA          RESPONSE ADRESS
         LA    R0,6                   LENGTH EXPECTED
         TGET  (R1),(R0)           RECEIVE RESPONSE
         LA    R10,REPAREA         PICK UP TABLE PACK VOL SER
         OC    0(6,R10),=CL6' '    SHIFT TO CAPITAL LETTERS
         MVC   VOLTABLE(6),0(R10)  MOVE
         MVC   DSNTABLE+14(6),0(R10)       VOLUME SERIAL #
         MVC   WTONM(6),0(R10)               OF PRIMARY TABLE PACK
         SPACE 2
**********************************************************************
*                                                                    *
*                GET TIME AND DATE OF THE DISPLAY                    *
*                                                                    *
**********************************************************************
         SPACE 2
         TIME  DEC                 PICK UP DATE OF DISPLAY
         ST    R1,TEMP+4           PROTECT DATE
         BAL   R9,TRDATE           TRADUCT DATE IN JJ MM AA
         MVC   DATELINE(+2),DATE+3 MOVE MONTH OF DISPLAY
         MVC   DATELINE+3(2),DATE+1  MOVE DAY
         OI    DATELINE+3,X'F0'    FORCE TWO DIGITS FOR DAY
         MVC   DATELINE+6(2),DATE+7  MOVE YEAR
         MVI   DATELINE+2,C'/'     MOVE
         MVI   DATELINE+5,C'/'          SEPARATOR
         SPACE 2
**********************************************************************
*                                                                    *
*          DYNAMIC ALLOCATION OF THE TABLE PACK AS REQUIRED          *
*                                                                    *
**********************************************************************
         SPACE 2
         MVC   DYNVOL(6),VOLTABLE  MOVE VOLUME SRIAL NUMBER
         MVC   DYNDSN(44),DSNTABLE  AND NAME OF PRIMARY TABLE PACK
         MVC   DYNUNIT(4),TABLUNIT MOVE UNIT NAME FOR TABLE PACK
         BAL   R9,DYNALLOC         DYNAMIC ALLOC OF THE TABLE PACK
         SPACE 2
         OPEN  (TABLE,(INPUT))     MSS PRIMARY TABLE PACK
         SPACE 2
**********************************************************************
*                                                                    *
*                   OBTAIN STORAGE FOR THE TABLES                    *
*                                                                    *
**********************************************************************
         SPACE 2
         L     R0,=A(NBFRAME*3*4+NBFRAME*40*11+NBFRAME*40*4+NBFRAME*80*C
               8+4)                GET STORAGE LENGTH
         ST    R0,LZONE            STORE LENGTH OF GETMAINED AREA
         GETMAIN R,LV=(R0)         OBTAIN STORAGE
         LTR   R15,R15             IS IT SUCCESSFUL?
         BE    GETMNOK             BRANCH IF YES
         LA    R1,GETMNER          PICK UP ERROR MESSAGE ADDRESS
         LA    R0,L'GETMNER        AND LENGTH
         TPUT  (R1),(R0)           SEND ERROR MESSAGE
         B     CLAFIN              AND EXIT
GETMNER  DC    CL41'UNSUCESSFUL GETMAIN.PROCESSING TERMINATED'
GETMNOK  DS    0H                  *
         ST    R1,AZONE            STORE ADDRESS OF OBTAINED AREA
         SPACE 2
**********************************************************************
*                                                                    *
*                   MAIN DISPLAY LOOP                                *
*                                                                    *
**********************************************************************
         SPACE 2
BIGLOOP  EQU   *                   *
         L     R2,AZONE            SET AREA TO BE CLEARED
         LR    R4,R2                         PREPARE
         L     R3,LZONE                            FOR
         XR    R5,R5                                 NEXT
         MVCL  R2,R4                                  TIME
         SPACE 2
         L     R1,AZONE            AREA
         LA    R2,NBFRAME*3*4(R1)      BEGINNING OF VIRTVOL
         LA    R9,NBFRAME          NUMBER OF FRAMES
INLP1    ST    R2,0(R1)            STORE ADDRESS
         LA    R2,40*4(R2)         NEXT TABLE
         LA    R1,12(R1)           NEXT COUNTER
         BCT   R9,INLP1            INITIALIZE  VIRTVOL ADDR TABLE
         SPACE 1
         MVC   0(4,R2),=XL4'FFFFFFFF'   TO STOP SCANNING
         LA    R2,4(R2)            BEGINNING OF VIRTVOLP TABLES
         SPACE 2
         L     R1,AZONE            AREA
         LA    R1,4(R1)            TABLE OF VIRTVOLP ADDR
         LA    R9,NBFRAME          NUMBER OF FRAMES
INLP2    ST    R2,0(R1)            STORE ADDRESS OF EVIRTVOL TABLE
         LA    R2,40*11(R2)        NEXT TABLE
         LA    R1,12(R1)           NEXT COUNTER
         BCT   R9,INLP2            INITIALIZE EVIRTVOL ADDR TABLE
         SPACE 2
         L     R1,AZONE            AREA
         LA    R1,8(R1)            TABLE OF VIRTFRAM ADDR
         LA    R9,NBFRAME          NUMBER OF FRAMES
INLP3    ST    R2,0(R1)            STORE ADDRESS OF VIRTFRAM TABLE
         LA    R2,80*8(R2)         NEXT TABLE
         LA    R1,12(R1)           NEXT COUNTER
         BCT   R9,INLP3            INITIALIZE VIRTFRAM ADDR TABLE
         SPACE 2
         MVI   SSID,X'40'                                      *
         MVC   SSID+1(239),SSID                                *
         MVC   SSID+240(240),SSID+239                          *
         MVC   SSID+480(160),SSID+479                          *
         MVC   SDG00(16),SSID                                  *
         SPACE 1
         LA    R9,8                                            *
         LA    R1,FRAMASK                                      *
         MVI   0(R1),X'00'                                     *
CLRLP1   MVC   1(80,R1),0(R1)                                  *
         LA    R1,80(R1)                                       *
         BCT   R9,CLRLP1                                       *
         SPACE 1
         MVC   L2(80),SSID                                     *
         MVC   QVOL(6),SSID                                    *
         MVC   ERVOL(11),SSID                                  *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE AREA
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)            IT
         SPACE 3
**********************************************************************
*                                                                    *
*                      READ THE VERIFICATION TABLE                   *
*                                                                    *
**********************************************************************
         SPACE 2
         XC    SEEKADDR,SEEKADDR   CLEAR SEEK ADDRESS
         MVC   CC(1),CYL1          MOVE CCHHR
         MVC   HH(1),HEAD1                    OF
         LA    R1,1                              VERIFICATION
         STC   R1,R                                           TABLE
         MVC   CCWVAR(48),CCWVER   MOVE APPROPRIATE CCW CHAIN
         BAL   R9,EXCP             READ ALL VERIFICATION TABLE
         L     R1,=A(NUMSDG)       PICK UP ADDR OF NUMBER OF SDG
         MVC   NSDG(1),0(R1)       MOVE NUMBER OF SDG TO BE DISPLAYED
         XI    NSDG,X'F0'          MAKE IT BINARY
         L     R1,=A(FIRSTSDG)     PICK UP ADDR OF FIRST SDG
         XC    TEMP(8),TEMP        PREPARE
         MVC   TEMP(2),0(R1)       MOVE FIRST SDG NUMBER
         PACK  TEMP+6(2),TEMP(2)   CONVERT TO DECIMAL
         XC    TEMP(2),TEMP        CLEAR
         CVB   R1,TEMP             CONVERT TO BYNARY
         STC   R1,SFIRST           STORE 1ST SDG TO BE DISPLAYED
         TM    SFIRST,X'01'        FIRST SDG IS ODD ?
         BNO   PAIR1               IGNORE IF NOT
         CLI   NSDG,X'02'          TWO SDG TO BE DISPLAYED ?
         BE    ERROR1              ERROR IN THAT CASE
PAIR1    EQU   *                   *
         TM    SFIRST,X'01'        FIRST SDG IS ODD ?
         BNO   PAIR2               BRANCH IF NOT
         BCTR  R1,0                TAKE THE LOWER EVEN SDG
         SPACE 2
**********************************************************************
*                                                                    *
*                      SCAN THE CONFIGURATION TABLE                  *
*                                                                    *
**********************************************************************
         SPACE 2
PAIR2    EQU   *                   *
         L     R5,=A(REC2)         POINT ON CONFIGURATION BIT MAP
         USING CONFIG,R5           ESTABLISH DSECT ADDRESSABILITY
         LA    R4,8                NUMBER OF BYTES TO BE SCANNED
         LA    R3,SDG0             FIRST SDG
         LA    R2,CONFSDGG         POINT ON FIRST SDG BYTE MAP
         AR    R2,R1                  WITH DISPLAY OPTION AS REQUIRED
         XR    R9,R9               CLEAR
         IC    R9,NSDG             PICK UP SDG NUMBER
         CLI   NSDG,X'02'          TWO SDG SPECIFIED ?
         BE    TWOSDG              BRANCH IF YES
         LA    R9,1(R9)            ELSE,FORCE TO TWO
TWOSDG   EQU   *                   *
         CLC   0(2,R2),=XL2'00'    ARE THE TWO SDG OFFLINE ?
         BE    ERROR2              BRANCH IF YES....ERROR
LOOPSDG  EQU   *                   *
         BCTR  R3,0                ADR SDG-1
         CLI   0(R2),X'00'         SDG NOT USED ?
         BE    FINSDG              BRANCH IF YES
         XR    R1,R1               CLEAR R1
         IC    R1,0(R2)            PICK UP SDG DECRIPTION BYTE
POINT    EQU   *                   *
         STC   R1,0(R4,R3)         STORE IMAGE IN SDG DRIVE ADDR
         SRL   R1,1                SHIFT ONE BIT RIGTH
         BCT   R4,POINT            CONTINUE WITH THE 8 BITS
         LA    R3,1(R3)            RESTORE ORIGINAL VALUE
         NC    0(8,R3),=8X'01'     ACTUALIZE SDG DRIVE IMAGE
         LA    R3,8(R3)            NEXT SDG
         LA    R2,1(R2)            NEXT SDG BYTE MAP
         LA    R4,8                NUMBER OF BYTES TO BE SCANNED
FINSDG   EQU   *                   *
         BCT   R9,LOOPSDG          CONTINUE FOR THIS SDG
         SPACE 2
**********************************************************************
*                                                                    *
*         CONSTRUCT A CCW CHAIN TO READ THE PAB FOR ONLINE SSID      *
*               PER SELECTED SDG (8 SSID MAX ARE DISPLAYED)          *
*                                                                    *
**********************************************************************
         SPACE 2
         LA    R3,SDG0             PICK UP FIRST SDG MAP
         LA    R4,CCWSDG           POINT CCW CHAIN
         LA    R6,8                DRIVES NUMBER PER SDG
         LA    R7,0                LOOP COUNTER
         LA    R9,2                NUMBER OF LOOPS TO BE DONE
         L     R5,AREC1            PICK UP 1ST RECEPTION AREA
CCWLOOP  EQU   *                   *
         LR    R8,R5               PROTECT R5 VALUE
         LA    R5,RECLNGTH(R5)     POINT ON NEXT RECEIVING AREA
READREC  EQU   *                   *
         ST    R8,0(R4)            STORE RECEIVING ADDRESS IN CCW
         MVI   0(R4),X'86'         MOVE CCW CODE 'READ DATA'
         LA    R3,1(R3)            NEXT SSID
         LA    R4,8(R4)            NEXT CCW
         BCT   R6,CCWLOOP          LOOP ON SDG RECORDS
         LR    R8,R5               PROTECT R5 VALUE
         SLL   R7,2                MULTIPLY R7 BY 4
         L     R5,ARECX(R7)        PICK UP RECEIVING AREA FOR
*                                         PAGE AVAILABILITY BLOCK
         SRL   R7,2                RESTORE ORIGINAL VALUE
         LA    R7,1(R7)            +1 ON SDG NUMBER
         ST    R5,0(R4)            INSERT CCW IN CHAIN
         MVI   0(R4),X'86'         CCW CODE
         LA    R4,8(R4)            NEXT CCW
         LR    R5,R8               RESTORE R5 ORIGINAL VALUE
         LA    R6,2                NEXT
CCWLOOP1 EQU   *                   *
         ST    R5,0(R4)            2 CCW'S
         MVI   0(R4),X'86'                 ARE NOT
         LA    R4,8(R4)                            KEPT
         BCT   R6,CCWLOOP1
         LA    R6,8                NB OF DRIVES FOR NEXT SDG
         LR    R5,R8               RESTORE ORIGINAL VALUE
         BCT   R9,CCWLOOP          CONTINUE FOR SECOND SDG
         SPACE 3
         SH    R4,=H'8'            BACK TO NEXT AVAILABLE CCW
         MVI   4(R4),X'20'         END OF CCW CHAIN
         LA    R3,CCWSDG           PICK UP BEGINNING OF CCW CHAIN
         LA    R4,8(R4)            R4=END OF CCW CHAIN
         SR    R4,R3               LENGTH
         BCTR  R4,0                MACHINE LENGTH
         STC   R4,MVCCCW+1         PREPARE FOR MOVE
MVCCCW   MVC   CCWVAR(*-*),CCWSDG  MOVE APPROPRIATED CCW CHAIN
         MVI   SEEKADDR,X'01'      SET EXTENT NUMBER
         MVC   CC(1),CYL2          MOVE CYLINDER OF TABLE
         XR    R0,R0               CLEAR
         XR    R1,R1                     REGISTERS
         IC    R1,SFIRST           PICK UP 1ST SDG NUMBER
         TM    SFIRST,X'01'        1ST SDG TO BE DISPLAYED IS ODD?
         BNO   *+6                 IGNORE IF NOT
         BCTR  R1,0                ELSE TAKE THE LOWER EVEN NUMBER
         MH    R1,=H'11'           CALCULATE THE RELATIVE
         LA    R1,1(R1)              RECORD NUMBER
         D     R0,=F'32'           DIVIDE BY NUMB OF REC BY TRACK
         STC   R0,R                MOVE RECORD NUMBER
         STC   R1,HH               STORE TRACK FOR THIS SDG
         BAL   R9,EXCP             READ SDG TABLE
         DROP  R5                  KILL PREVIOUS ADDRESSABILITY
         SPACE 2
**********************************************************************
*                                                                    *
*                TRY TO GET REALLY ONLINE SSID'S                     *
*                                                                    *
**********************************************************************
         SPACE 2
         L     R5,ARECX            PICK UP FIRST PAB
         USING PAB,R5              ACTIVATE PAB DSECT ADDRESSABILITY
         LA    R3,SDG0             PICK UP SSID BYTE MAP
         LA    R9,2                NUMBER OF LOOPS
         LA    R6,8                NUMBER OF SSID'S PER SDG
         LA    R4,PABDEVCE         PICK UP DEVICES DESCRIPTION
PABLOOP  EQU   *                   *
         TM    0(R4),X'C0'         IS SSID ONLINE ?
         BNO   *+8                 BRANCH IF NOT
         OI    0(R3),X'C0'         REFLECT SSID STATUS IN SDG BYTE MAP
         TM    0(R4),X'11'         IS THIS THE SECOND PART OF A 3330-1
         BZ    *+8                 IGNORE IF NOT
         OI    0(R3),X'01'         SHOW SSID AS AVAILABLE
         LA    R4,4(R4)            NEXT DEVICE
         LA    R3,1(R3)            NEXT SDG BYTE
         BCT   R6,PABLOOP          CONTINUE SCANNING
         LA    R5,RECLNGTH(R5)     NEXT PAGE AVAILABILITY BLOCK
         LA    R6,8                NUMBER OF SSID PER SDG
         LA    R4,PABDEVCE         PICK UP DEVICE DESRIPTION
         BCT   R9,PABLOOP          CONTINUE WITH THIS SDG
         SPACE 5
         XR    R7,R7               R7=NUMBER OF VALID SSID FOUND
         LA    R3,SDG0             PICK UP SDG BYTE MAP
         CLI   NSDG,X'02'          TWO SDG SPECIFIED ?
         BNE   ONESDG              BRANCH IF NOT
         LA    R9,16               NUMBER OF BYTES TO SCAN
         B     SDGSCAN             CONTINUE
ONESDG   EQU   *                   *
         LA    R9,8                NUMBER OF BYTES TO SCAN
         TM    SFIRST,X'01'        IS FIRST SDG ODD ?
         BNO   SDGSCAN             BRANCH IF NOT
         LA    R3,8(R3)            SCAN ONLY SECOND SDG
SDGSCAN  EQU   *                   *
         CLI   0(R3),X'C1'         IS SSID OK ?
         BNE   SDGSCAN1            BRANCH IF NOT
         OI    0(R3),X'F0'         SHOW SSID AS DISPLAYABLE
         LA    R7,1(R7)            +1 ON SSID NUMBER
SDGSCAN1 EQU   *                   *
         LA    R3,1(R3)            NEXT BYTE
         BCT   R9,SDGSCAN          CONTINUE SCANNING
         SPACE 1
         CH    R7,=H'8'            IS THE NUMBER OF SSID GT 8 ?
         BNH   NUMBOK              BRANCH IF NOT
         MVI   NSDG,X'01'          ELSE,FORCE 1 SDG TO BE DISPLAYED
         SPACE 2
**********************************************************************
*                                                                    *
*                     FILL THE OUTPUT BUFFER                         *
*                                                                    *
**********************************************************************
         SPACE 2
NUMBOK   EQU   *                   *
         XR    R10,R10             R10 WILL BE THE SSID VALUE
         LA    R6,SDG0             PICK UP SDG BYTE MAP TABLE
         L     R3,AREC1            PICK UP FIRST DATA AREA
         LA    R7,FRAMASK          PICK UP FRAME MASK AREA
         LR    R14,R7              SAVE BEGINNING ADDRESS
         ST    R7,SSIDVAL          PROTECT THIS VALUE
         LA    R4,4                INCREMENT FOR BXLE LOOP
         MVI   SSIDNB,X'00'        RESET SSID NUMBER TO ZERO
         SPACE 1
SSIDLOP1 EQU   *                   *
         CLI   0(R6),X'F1'         IS SSID DISPLAYABLE ?
         BE    SSIDOK              BRANCH IF YES
SSIDSKIP EQU   *                   *
         LA    R3,RECLNGTH(R3)     ELSE,SKIP RECORD
         B     SSIDNEXT                         AND TRY NEXT SSID
SSIDOK   EQU   *                   *
         LA    R10,1(R10)          PLUS ONE ON DISPLAYED SSID
         LA    R5,212(R3)          LIMIT OF REAL PAGE MAP SCAN
         LA    R3,8(R3)            SKIP PREFIX
         MVI   0(R7),C'0'          MOVE FIRST PART OF SSID VALUE
         IC    R0,SSIDNB           PICK UP CURRENT SSID NUMBER
         STC   R0,1(R7)            STORE SSID VALUE
         TR    1(1,R7),IDARRAY     MAKE IT PRINTABLE
         LA    R7,4(R7)            POINT TO NEXT OUTPUT AREA
         XR    R1,R1               CLEAR R1
SSIDLOP2 EQU   *                   *
         USING RPMAP,R3            ASSUME REAL PAGE MAP ADDRESSABILITY
         LH    R9,RPMVT            PICK UP MVT POINTER
         CH    R9,IDLIMIT          IS DISPLACEMENT VALID ?
         BH    ERROR6              BRANCH IF OVERLAP
         XR    R8,R8               PREPARE FOR DIVIDE
         D     R8,=F'40'           CALCULATE THE RELATIVE FRAME NUMBER
         LR    R1,R9               R1=RELATIVE FRAME NUMBER
         STC   R1,CURFRAM          PROTECT CURRENT FRAME NUMBER
         LR    R9,R8               R9 IS IDARRAY MODULO 40
         L     R2,AZONE            PICK UP TABLE ADDRESS
         MH    R1,=H'12'           TAKE APPROPRIATE
         AR    R2,R1                                FRAME
         L     R1,0(R2)            ADDRESS OF VIRTVOL TABLE
         ST    R1,VIRTVOL          STORE ADDRESS OF VIRTVOL TABLE
         MVI   0(R2),X'FF'         SHOW THAT THIS FRAME IS ACTIVE
         L     R1,4(R2)            ADDRESS OF VIRTVOLP FOR THIS FRAME
         ST    R1,VIRTVOLP         STORE IT
         L     R1,8(R2)            ADDRESS OF VIRTFRAM FOR THIS FRAME
         ST    R1,VIRTFRAM         STORE IT
         SPACE 2
         CLI   RPFLAG,X'00'        PAGE FREE ?
         BE    PAGENEXT            BRANCH IF YES
         TM    RPFLAG,X'01'        PAGE NOT AVAILABLE ?
         BO    NOTAVAIL            BRANCH IF YES
         TM    RPFLAG,X'02'        PAGE ALLOCATED TO TABLES ?
         BO    TABLES              BRANCH IF YES
         TM    RPFLAG,X'08'        PAGE HAS AN ERROR
         BO    PAGINERR            DO NOT USE IF YES
         IC    R0,IDARRAY(R9)      PICK UP REFERENCING CHARACTER
         MVI   0(R7),C'.'          MOVE TO FRAME MASK
         LR    R15,R7              PICK UP ACTUAL POSITION
         SR    R15,R14             DISPLACEMENT IN FRAMASK
         L     R1,VIRTFRAM         PICK UP VIRTFRAM ADDRESS
         AR    R1,R15              + DISPLACEMENT
         STC   R0,0(R1)            MOVE REFERENCING CHARACTER
         LH    R9,RPMVT            RESTORE ORIGINAL MVT DISPLACEMENT
         SLL   R9,2                MULTIPLY BY 4
         L     R2,AZONE            PICK UP 1ST
         L     R2,0(R2)                        VIRTVOL ADDRESS
         AR    R9,R2               PICK UP
         L     R15,0(R9)                   VOLUME ENTRY
         LA    R15,1(R15)          ADD ONE VOLUME TO THIS ENTRY
         ST    R15,0(R9)           STORE UPDATED VALUE
         SPACE 2
PAGENEXT EQU   *                   *
         LA    R7,1(R7)            NEXT CHARACTER IN FRAME MASK
         BXLE  R3,R4,SSIDLOP2      CONTINUE REAL PAGE MAP SCANNING
         LA    R3,48(R3)           SKIP REMAINDER OF CURRENT RECORD
         L     R7,SSIDVAL          PICK UP BEGINNING OF CURRENT LINE
         LA    R7,80(R7)           POINT TO
         ST    R7,SSIDVAL          STORE UPDATED VALUE
         SPACE 1
SSIDNEXT EQU   *                   *
         LA    R6,1(R6)            NEXT SDG BYTE MAP VALUE
         CH    R10,=H'7'           MAX DISPLAYABLE SSID REACHED ?
         BH    COUNTSDG            BRANCH IF YES
         XR    R0,R0               CLEAR
         IC    R0,SSIDNB           PICK UP NUMBER OF SSID
         AL    R0,=F'1'            ADD ONE
         CH    R0,=H'15'           END OF SECOND SDG ?
         BH    COUNTSDG            BRANCH IF YES
         STC   R0,SSIDNB           STORE CURRENT NUMBER OF SSID
         B     SSIDLOP1            CONTINUE WITH NEXT SSID
         SPACE 5
NOTAVAIL EQU   *                   *
         MVI   0(R7),C'-'          INSERT ID FOR NOT AVAILABLE
         B     PAGENEXT            CONTINUE
         SPACE 2
TABLES   EQU   *                   *
         MVC   0(4,R7),=C'****'    MOVE ID FOR TABLES
         LA    R7,4(R7)            INCREMENT OUTPUT LINE
         LA    R3,16(R3)           SKIP NEXT THREE ENTRIES
         B     SSIDLOP2            CONTINUE
         SPACE 2
PAGINERR EQU   *                   *
         MVI   0(R7),C'?'          SHOW PAGE IN ERROR
         B     PAGENEXT            CONTINUE
         SPACE 2
ERROR1   EQU   *                   *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE ADDRESS
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)             ERROR AREA
         MVC   0(41,R1),=C'IF TWO SDG SPECIFIED,THE 1ST MUST BE EVEN'
         L     R1,=A(LINECURS)     PICK UP CURSOR ADDRESS
         MVC   2(2,R1),=X'4AF5'    SET CURSOR ADDRESS
         B     MODIF               SEND MESSAGE
         SPACE 2
ERROR2   EQU   *                   *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE ADDRESS
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)             ERROR AREA
         MVC   0(28,R1),=C'SDG NOT ON LINE....RESPECIFY'
         L     R1,=A(LINECURS)     PICK UP CURSOR ADDRESS
         MVC   2(2,R1),=X'4AF5'    SET CURSOR ADDRESS
         B     MODIF               SEND MESSAGE
         SPACE 2
ERROR3   EQU   *                   *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE ADDRESS
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)             ERROR AREA
         MVC   0(17,R1),=C'INVALID CHARACTER'
         L     R1,=A(LINECURS)     PICK UP CURSOR ADDRESS
         MVC   2(2,R1),=X'C8C7'    SET CURSOR ADDRESS
         B     MODIF               SEND MESSAGE
         SPACE 2
ERROR4   EQU   *                   *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE ADDRESS
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)             ERROR AREA
         MVC   0(17,R1),=C'INVALID CHARACTER'
         L     R1,=A(LINECURS)     PICK UP CURSOR ADDRESS
         MVC   2(2,R1),=X'C9D6'    SET CURSOR ADDRESS
         B     MODIF               SEND MESSAGE
         SPACE 2
ERROR5   EQU   *                   *
         L     R1,=A(ERROR)        PICK UP ERROR MESSAGE ADDRESS
         MVI   0(R1),X'40'         CLEAR
         MVC   1(69,R1),0(R1)             ERROR AREA
         MVC   0(17,R1),=C'INVALID CHARACTER'
         L     R1,=A(LINECURS)     PICK UP CURSOR ADDRESS
         MVC   2(2,R1),=X'4AF5'    SET CURSOR ADDRESS
         B     MODIF               SEND MESSAGE
         SPACE 2
ERROR6   EQU   *                   *
         LA    R1,ERR6MSG          PICK UP ERROR MESSAGE ADDRESS
         LA    R0,L'ERR6MSG        AND LENGTH
         TPUT  (R1),(R0)           SEND ERROR MESSAGE
         B     CLAFIN              EXIT
ERR6MSG  DC    CL47'TOO MUCH VOLUMES IN MVT...PROCESSING TERMINATED'
         DS    0H
         SPACE 2
**********************************************************************
*                                                                    *
*                PICK UP COUNTS FROM PAGE AND BLOCK RECORDS          *
*                                                                    *
**********************************************************************
         SPACE 2
COUNTSDG EQU   *                   *
         DROP  R3                  KILL PREVIOUS
         DROP  R5                                ADDRESSABILITY
         SPACE 2
         L     R3,ARECX            PICK UP FIRST PAGE AVAILABILITY BLK
         USING PAB,R3              ESTABLISH PAGE AVAILABILITY BLOCK
         LA    R6,SDG0             PICK UP SDG BYTE MAP TABLE
         LA    R7,FRAMASK          PICK UP 1ST FRAME MASK LINE
         LA    R10,PABFCNT         PICK UP SSID COUNTS VALUES
         LA    R4,8                NUMBER OF SSID BY SDG
         XR    R9,R9               CLEAR
         LA    R9,2                NUMBER OF LOOPS
SSIDLOP3 EQU   *                   *
         CLI   0(R6),X'F1'         IS SSID DISPLAYABLE
         BNE   SSIDNXT1            BRANCH IF NOT
         MVC   60(4,R7),=X'40202120'  MOVE MASK
         MVC   65(4,R7),=X'40202120'  MOVE MASK
         MVC   70(4,R7),=X'40202120'  MOVE MASK
         MVC   75(4,R7),=X'40202120'  MOVE MASK
         XR    R1,R1               CLEAR
         IC    R1,0(R10)           PICK UP FREE PAGE COUNT
         CVD   R1,TEMP             CONVERT TO DECIMAL
         ED    60(4,R7),TEMP+6     EDIT FREE COUNT
         IC    R1,1(R10)           PICK UP ACTIVE PAGE COUNT
         CVD   R1,TEMP             CONVERT TO DECIMAL
         ED    65(4,R7),TEMP+6     EDIT ACTIVE COUNT
         IC    R1,2(R10)           PICK UP INACTIVE PAGE COUNT
         CVD   R1,TEMP             CONVERT TO DECIMAL
         ED    70(4,R7),TEMP+6     EDIT INACTIVE COUNT
         IC    R1,3(R10)           PICK UP BOUND PAGE COUNT
         CVD   R1,TEMP             CONVERT TO DECIMAL
         ED    75(4,R7),TEMP+6     EDIT BOUND COUNT
         LA    R7,80(R7)           NEXT LINE IN OUTPUT BUFFER
SSIDNXT1 EQU   *                   *
         LA    R6,1(R6)            NEXT SDG BYTE MAP TABLE
         LA    R10,4(R10)          NEXT ENTRY IN PAGE AVAIL BLOCK
         BCT   R4,SSIDLOP3         CONTINUE FOR THIS SDG
         LA    R4,8                SSID NUMBER FOR NEXT SDG
         LA    R3,RECLNGTH(R3)     SKIP TO NEXT SDG PAB
         LA    R10,PABFCNT         POINT TO SSID COUNTS
         BCT   R9,SSIDLOP3         CONTINUE WITH NEXT SDG
         DROP  R3                  KILL PAB ADDRESSABILITY
         SPACE 5
         MVC   SDG00(3),=C'SDG'    MOVE TEXT
         CLI   NSDG,X'02'          TWO SDG TO BE DISPLAYED ?
         BNE   UNO1                IGNORE IF NOT
         MVC   SDG01(3),SDG00      MOVE TEXT FOR SECOND SDG
         MVI   SLASH,C'/'          MOVE SEPARATOR
UNO1     EQU   *                   *
         L     R1,=A(FIRSTSDG)     PICK UP 1ST SDG NUMBER ADDRESS
         MVC   S0(2),0(R1)         MOVE FIRST SDG NUMBER
         CLI   NSDG,X'02'          TWO SDG TO BE DISPLAYED ?
         BNE   UNO2                IGNORE IF NOT
         XR    R2,R2               CLEAR R2
         IC    R2,SFIRST           PICK UP 1ST SDG NUMBER
         LA    R2,1(R2)            TAKE 2ND SDG NUMBER
         CVD   R2,TEMP             CONVERT TO DECIMAL
         MVC   TEMP(4),=X'40212020'   MOVE MASK
         ED    TEMP(4),TEMP+6      EDIT SDG #
         MVC   S1(2),TEMP+2        MOVE SECOND SDG NUMBER
UNO2     EQU   *                   *
         SPACE 2
**********************************************************************
*                                                                    *
*            FIND VOLID FOR VIRTUAL VOLUMES -- READ THE MVT          *
*                                                                    *
**********************************************************************
         SPACE 2
FINDVOL  EQU   *                   *
         MVI   SEEKADDR,X'01'      MOVE EXTENT NUMBER
         MVC   CC(1),CYL3          MOVE CYLINDER OF MVT TABLE
         L     R1,AZONE            PICK UP TABLE AREA
         L     R5,0(R1)            VIRTUAL VOLUME
         LA    R5,0(R5)                           PAGES TABLE
         L     R10,4(R1)           VIRTUAL VOL SERIAL NUMB TABLE
         MVC   CCWVAR(8),CCWMVT    MOVE CORRECT CCW CHAIN
         LR    R8,R5               SAVE STARTING ADDRESS
         SPACE 1
NEXT     EQU   *                   *
         ICM   R3,15,0(R5)         ARE WE AT THE END OF LIST ?
         BZ    INCRLOOP            IF ZERO,REL BLOCK NOT IN USE
         BM    EXIT                BRANCH IF END OF LIST
         LR    R3,R5               COMPUTE DISPLACEMENT=REL BLOCK NUM
         SR    R3,R8               SUBSTRACT WHERE WE ARE NOW
         SRL   R3,2                DIVIDE BY 4 TO GET RELATIVE BLOCK
         SH    R3,=H'13'           NUMB OF RECORDS ON 1ST TRACK
         BP    NOTFIRST            BRANCH IF NOT ON 1ST TRACK
         MVC   HH(1),HEAD3A        MOVE 1ST TRACK ADDRESS
         LA    R3,13(R3)           RESTORE ORIGINAL VALUE
         LA    R3,19(R3)           BECAUSE 1ST MVT DATA IS 0009000B13
         STC   R3,R                STORE RECORD ADDR OF THIS MVT DATA
         B     EXCPVOLR            READ MVT DATA BLOCK
NOTFIRST EQU   *                   *
         XR    R2,R2               CLEAR FOR DIVIDE
         D     R2,=F'32'           FIND OUT HOW MANY TRACKS AWAY
         STC   R2,R                SAVE RECORD #
         LTR   R3,R3               ANY TRACK ?
         BNZ   NOTSECD             YES THEREFORE NOT ON 2ND TRACK
         MVC   HH(1),HEAD3B        MOVE SECOND TRACK #
         B     EXCPVOLR            READ MVT DATA BLOCK
NOTSECD  EQU   *                   *
         XR    R2,R2               CLEAR REMAINDER
         L     R2,DISKADDR         PICK UP STARTING MVT DISK ADDRESS
         CH    R3,=H'5'            IS IT ON THAT CYLINDER ?
         BH    NEXTCYL             BRANCH IF NOT
         AR    R2,R3               NEW CCHH
         ST    R2,TEMP             STORE NEW CCHH
         MVC   SEEKADDR+3(4),TEMP  MOVE CCHH
         B     EXCPVOLR            READ MVT DATA BLOCK
NEXTCYL  EQU   *                   *
         SH    R3,=H'5'            TRACKS ON FIRST CYLINDER
         XR    R2,R2               CLEAR FOR DIVIDE
         D     R2,=F'19'           COMPUTE CC AND HH
         LA    R3,10(R3)           STARTING CYLINDER
         STC   R3,CC               SET CYLINDER
         STC   R2,HH               SET HEAD #
EXCPVOLR EQU   *                   *
         BAL   R9,EXCP             READ THE MVT DATA BLOCK
         L     R4,=A(REC1)         POINT R4 ON INPUT AREA
         USING MVT,R4              ASSUME MVT ADDRESSABILITY
         MVC   0(6,R10),MVTVOLID   MOVE VOLID TO DISPLAY AREA
         MVI   6(R10),C' '         ASSUME VOLUME NOT MOUNTED
         TM    MVTMOUNT,X'80'      IS VOLUME MOUNTED ?
         BNO   *+8                 IGNORE IF NOT
         MVI   6(R10),C'M'         SHOW VOLUME MOUNTED
         MVC   7(4,R10),CC         MOVE CHHR OF THIS MVT DATA BLOCK
INCRLOOP EQU   *                   *
         LA    R10,11(R10)         NEXT AVAILABLE AREA
         LA    R5,4(R5)            CHECK NEXT
         B     NEXT                           ENTRY
         DROP  R4                  KILL MVT ADDRESSABILITY
         SPACE 2
EXIT     EQU   *                   *
         MVI   CURFRAM,X'00'       SET TO BEGIN WITH 1ST FRAME
         SPACE 2
**********************************************************************
*                                                                    *
*                 CONSTRUCT THE CURRENT FRAME PATTERN                *
*                                                                    *
**********************************************************************
         SPACE 2
NEXTFRAM EQU   *                   *
         XR    R1,R1               CLEAR
         IC    R1,CURFRAM          PICK UP CURRENT FRAME NUMBER
TRYNXT   EQU   *                   *
         LR    R5,R1               PROTECT FRAME NUMBER
         L     R2,AZONE            PICK UP TABLE ADDRESS
         MH    R5,=H'12'           COMPUTE ADDRESS FOR THAT FRAME
         AR    R5,R2               R5 IS ADDRESS FOR THAT FRAME
         LA    R1,1(R1)            PREPARE FOR
         STC   R1,CURFRAM                       NEXT FRAME
         CVD   R1,TEMP             CONVERT NUMBER TO DECIMAL
         MVC   FRAMNB(4),=XL4'40212020'  MOVE MASK
         ED    FRAMNB(4),TEMP+6    EDIT FRAME NUMBER
         MVI   FRAMNB+1,C'#'       MOVE IDENTIFIER
         CLI   0(R5),X'FF'         IS THAT FRAME VALID ?
         BE    FRAMDISP            BRANCH IF YES
         CH    R1,=AL2(NBFRAME-1)  END OF FRAMES ?
         BH    BIGLOOP             BRANCH IF YES
         B     TRYNXT              ELSE,TRY NEXT POSSIBLE FRAME
FRAMDISP EQU   *                   *
         LA    R9,8                NUMBER OF LINES
         LA    R6,SSID             DISPLAY AREA
         LA    R7,FRAMASK          FRAME MASK AREA
FRAMLP1  MVC   0(80,R6),0(R7)      MOVE THE MASK FRAME
         LA    R6,80(R6)                  TO
         LA    R7,80(R7)                     THE
         BCT   R9,FRAMLP1                         DISPLAY AREA
         SPACE 2
         L     R7,8(R5)            PICK UP ADDRESS OF VIRTFRAM AREA
         LA    R6,SSID             DISPLAY AREA
         LA    R10,8               MAX NUMBER OF SSID
FRAMLP3  EQU   *
         LA    R9,56               NUMBER OF CHARS
FRAMLP2  CLI   0(R7),X'00'         IS THAT PAGE FREE IN VIRTFRAM ?
         BE    NXTCHAR             BRANCH IF YES
         MVC   0(1,R6),0(R7)       ELSE,MOVE PAGE OWNER ID
NXTCHAR  LA    R6,1(R6)            NEXT
         LA    R7,1(R7)                CHARACTER
         BCT   R9,FRAMLP2                        IN DISPLAY AREA
         LA    R7,24(R7)           PREPARE FOR
         LA    R6,24(R6)                       NEXT SSID
         BCT   R10,FRAMLP3         AND DO IT
         SPACE 2
**********************************************************************
*                                                                    *
*                 PUT VIRTUAL VOLUMES SERIAL IN OUTPUT BUFFER        *
*                                                                    *
**********************************************************************
         SPACE 2
         LA    R1,L16              CLEAR
         LA    R2,8                     THE
         MVI   0(R1),X'40'                 VOLUME
CLRLOOP  EQU   *                                 AREA
         MVC   1(80,R1),0(R1)                        IN
         LA    R1,80(R1)                               DISPLAY
         BCT   R2,CLRLOOP                                     FRAME
         SPACE 1
         L     R3,0(R5)            VIRTVOL ADDRESS FOR THAT FRAME
         LA    R3,0(R3)            IGNORE HIGHEST BYTE
         LA    R1,40*4             SIZE OF VIRTVOL FOR THAT FRAME
         AR    R1,R3               ENDIND ADDRESS OF VIRTVOL
         ST    R1,EVIRVOLP         PROTECT THAT ADDRESS
         LA    R1,L16              OUTPUT AREA
         LA    R2,IDARRAY          ID ARRAY
         L     R4,4(R5)            VIRTVOLP TABLE
VVLOOP   EQU   *                   *
         ICM   R5,15,0(R3)         PICK UP ALLOCATED PAGES NUMBER
         BZ    ENDVLOOP            TRY NEXT ENTRY IF EMPTY
         MVC   0(6,R1),0(R4)       MOVE VOLID
         MVC   14(1,R1),6(R4)      MOVE VOLUME ATTRIBUTE
         MVC   9(4,R1),=X'40202120' MOVE MASK
         SLL   R5,3                MULT BY 8 TO GET CYLINDERS
         CVD   R5,TEMP             CONVERT TO DECIMAL
         ED    9(4,R1),TEMP+6      ED CYLINDERS NUMBER
         MVC   8(1,R1),0(R2)       MOVE REFERENCING ID
         LA    R1,16(R1)           NEXT OUTPUT AREA
         C     R1,=A(ENDDISP)      END OF DISPLAY AREA ?
         BNL   WRITE               YES....WRITE BUFFER
ENDVLOOP EQU   *                   *
         LA    R2,1(R2)            INCREMENT ID POINTER
         LA    R3,4(R3)            INCREMENT PAGE COUNT POINTER
         LA    R4,11(R4)           INCREMENT VOLID TABLE POINTER
         C     R3,EVIRVOLP         END OF PAGE COUNT TABLE ?
         BNL   WRITE               WRITE BUFFER IF YES
         B     VVLOOP              ELSE,KEEP ON BUILDING
         SPACE 2
**********************************************************************
*                                                                    *
*                 WRITE THE MSS MAIN DISPLAY                         *
*                                                                    *
**********************************************************************
         SPACE 2
WRITE    EQU   *                   *
         SPACE 2
         TIME  DEC                 PICK UP TIME OF DISPLAY
         IC    R0,=X'F0'           IGNORE 1/100
         SRL   R0,4                             OF SECONDS
         ST    R0,TEMP             STORE TIME
         MVC   TIMELINE(10),=X'402021204B20204B2020'  MOVE MASK
         ED    TIMELINE(10),TEMP   EDIT TIME OF DISPLAY
         SPACE 5
         L     R2,ABUFFER          PICK UP BUFFER ADDRESS
         SH    R2,=H'4'            INCLUDE WCC WORD
TPUT     LA    R0,1924             BUFFER LENGTH
         TPUT  (R2),(R0),FULLSCR   WRITE CURRENT PANNEL
         SPACE 2
**********************************************************************
*                                                                    *
*                      READ RESPONSE (IF ANY)                        *
*                                                                    *
**********************************************************************
         SPACE 2
READ1    EQU   *
         XC    REP(20),REP         CLEAR RESPONSE AREA
         LA    R1,REP              PICK UP RESPONSE ADDRESS
         LA    R0,20               PICK UP LENGTH
         TGET  (R1),(R0),ASIS      READ RESPONSE
         SPACE 2
**********************************************************************
*                                                                    *
*                     ANALYZE   RESPONSE                             *
*                                                                    *
**********************************************************************
         SPACE 2
         CLI   REP,X'F1'           PF1 DEPRESSED ?
         BE    HELP                WRITE INFORMATIONS
         CLI   REP,X'F2'           PF2 DEPRESSED ?
         BE    MODIF1              CHANGE OPTIONS IF YES
         CLI   REP,X'F4'           PF4 DEPRESSED ?
         BE    PRINTASK            PRINT CURRENT PANNEL
         CLI   REP,X'F8'           PF8 DEPRESSED ?
         BE    NEXTFRAM            PRINT THE NEXT FRAME
         CLI   REP,X'6E'           PA2 DEPRESSED ?
         BE    CFINI               TERMINATE IN THIS CASE
         CLI   REP,X'7D'           ENTER KEY DEPRESSED ?
         BNE   BIGLOOP             OTHER RESPONSE IGNORED
         CLI   REP+3,X'11'         SBA ?
         BE    LISTVOL             GO DISPLAY DESIRED VOLUME
         B     BIGLOOP             IGNORE IF RESPONSE IS BLANK
         SPACE 5
**********************************************************************
*                                                                    *
*                 DISPLAY MVT FOR A SELECTED VOLUME                  *
*                                                                    *
**********************************************************************
         SPACE 2
LISTVOL  EQU   *                   *
         LA    R1,REP+6            PICK UP RESPONSE VOLUME
         LA    R9,6                NUMBER OF CHARACTERS
CAPITAL  OI    0(R1),X'40'         FORCE CAPITAL LETTER
         LA    R1,1(R1)            NEXT CHARACTER
         BCT   R9,CAPITAL          LOOP ON VOLUME NAME
         LA    R1,REP+6            RESTORE ORIGINAL POINTER
         CLC   0(6,R1),=CL6' '     IS NAME A BLANK AREA ?
         BE    REENTER             REENTER VOLUME NAME IF YES
         L     R2,AZONE            PICK UP TABLES ADDRESS
         L     R9,8(R2)            SET END OF SCANNING ADDRESS
         L     R2,4(R2)            VIRTVOLP VOLUME TABLE ADDRESS
VOLLOP   CR    R2,R9               END OF TABLE ?
         BH    VOLERR              ERROR - NOT FOUND
         CLC   0(6,R2),0(R1)       SAME VOLUME SERIAL # ?
         BE    VOLFND              BRANCH IF YES
         LA    R2,11(R2)           TRY NEXT ENTRY
         B     VOLLOP              AND LOOP
         SPACE 1
REENTER  MVC   QVOL+8(10),=CL10'REENTER'  MOVE ERROR MESSAGE
         B     VOLERR1             ISSUE MESSAGE
         SPACE 1
VOLERR   MVC   QVOL(6),0(R1)       MOVE VOLUME IN ERROR
         MVC   QVOL+8(10),=C'NOT IN MVT'   ERROR MESSAGE
VOLERR1  L     R3,=A(BUFFER)       BUFFER ADDRESS
         SH    R3,=H'4'            INCLUDE WCC WORD IN BUFFER
         L     R4,=A(ENDNORM)      END BUFFER ADDRESS
         SR    R4,R3               R4=LENGTH OF BUFFER
         TPUT  (R3),(R4),FULLSCR   WRITE PANNEL
         L     R3,=A(LINECURS)     INSERT CURSOR ADDRESS
         MVC   2(2,R3),=X'5D6A'    CURSOR LOCATION
         LA    R4,5                LENGTH
         TPUT  (R3),(R4),FULLSCR   WRITE CURSOR LINE
         XC    REP(20),REP         CLEAR RESPONSE AREA
         LA    R1,REP              PICK UP RESPONSE AREA
         LA    R0,20               AND RESPONSE LENGTH
         TGET  (R1),(R0),ASIS      READ RESPONSE
         B     LISTVOL             AND ANALYZE THE RESPONSE
         SPACE 3
VOLFND   EQU   *                   *
         MVC   CC(4),7(R2)         MOVE CCHHR OF THE MVT FOR VOLUME
         BAL   R9,EXCP             READ THE BLOCK
         L     R4,=A(REC1)         PICK UP THE MVT BLOCK ADDRESS
CALLMVT  EQU   *                   CALL MVT DISPLAY SUBROUTINE
         B     LOADCON             BRANCH AROUND ADCON
IHBCON   DC    A(MVTDISP)          ENTRY POINT ADDRESS
LOADCON  L     R15,IHBCON          LOAD R15 WITH ENTRY ADDRESS
         BALR  R14,R15             BRANCH TO ENTRY POINT
         SPACE 2
         LTR   R15,R15             WAS DISPLAY SUCCESSFUL
         BNE   CFINI               TERMINATE IF NOT
         B     BIGLOOP             CONTINUE PROCESSING
         SPACE 5
**********************************************************************
*                                                                    *
*                 DISPLAY INFORMATIVE PANNEL                         *
*                                                                    *
**********************************************************************
         SPACE 2
HELP     EQU   *                   *
         L     R3,=A(TEXTHELP)     PICK UP PANNEL ADDRESS
         L     R4,=A(ENDHELP)      PICK UP END OF MESSAGE ADDRESS
         SR    R4,R3               R4=MESSAGE LENGTH
         TPUT  (R3),(R4),FULLSCR   WRITE INFORMATIVE PANNEL
         XC    REP(20),REP         CLEAR RESPONSE AREA
         LA    R1,REP              PICK UP RESPONSE ADDRESS
         LA    R0,20               AND LENGTH
         TGET  (R1),(R0),ASIS      READ RESPONSE
         CLI   REP,X'F3'           PF3 ENTERED ?
         BE    BIGLOOP             CONTINUE IF RETURN CODE RECEIVED
         B     HELP                ELSE ASK FOR REPLY AGAIN
         SPACE  5
**********************************************************************
*                                                                    *
*                 DISPLAY CONSTANTS AND ALLOW MODIFICATIONS          *
*                                                                    *
**********************************************************************
         SPACE 2
MODIF1   EQU   *                   *
         L     R3,=A(LINECURS)     PICK UP MESSAGE ADDRESS
         MVC   2(2,R3),=X'C9D6'    CURSOR POSITION
MODIF    EQU   *                   *
         L     R3,=A(TEXTOPT)      PICK UP TEXT ADDRESS
         L     R4,=A(ENDOPT)       PICK UP END OF TEXT ADDRESS
         SR    R4,R3               R4=LENGTH OF TEXT
         TPUT  (R3),(R4),FULLSCR   WRITE TEXT PANNEL
         L     R3,=A(LINECURS)     LINE CURSOR ADDRESS
         LA    R4,5                TEXT LENGTH
         TPUT  (R3),(R4),FULLSCR   INSERT CURSOR
         XC    REP(20),REP         CLEAR RESPONSE AREA
         LA    R1,REP              PICK UP RESPONSE ADDRESS
         LA    R0,20               AND LENGTH
         TGET  (R1),(R0),ASIS      READ RESPONSE
         SPACE 10
         LA    R1,REP              PICK UP RESPONSE AREA
         CLI   REP,X'7D'           ENTER KEY DEPRESSED ?
         BNE   MODIF               IGNORE RESPONSE IN THIS CASE
         CLI   3(R1),X'11'         RETURN
         BNE   SCANRET                    IF NOTHING MODIFIED
         LA    R1,4(R1)            POINT ON 1ST MODIFIED AREA
SCANREP  EQU   *                   *
         CLC   0(2,R1),=X'C9D6'    NUMB OF SDG MODIFIED ?
         BE    NUMBMOD             BRANCH IF YES
         CLC   0(2,R1),=X'4AF5'    FIRST SDG NUMBER MODIFIED ?
         BE    FIRSTMOD            BRANCH IF YES
OREP     EQU   *                   *
         CLI   3(R1),X'00'         END OF RESPONSE AREA ?
         BE    SCANRET             TAKE ANOTHER PICTURE
         CLI   4(R1),X'00'         END OF RESPONSE AREA ?
         BE    SCANRET             TAKE ANOTHER PICTURE
CHRNEXT  EQU   *                   *
         LA    R1,1(R1)            NEXT CHARACTER
         CLI   0(R1),X'11'         ANOTHER SBA FOUND ?
         BNE   CHRNEXT             BRANCH IF NOT
         LA    R1,1(R1)            JUMP OVER SBA
         B     SCANREP             ANALYZE THE RESPONSE
         SPACE 2
NUMBMOD  EQU   *                   *
         LA    R2,2(R1)            POINT ON FIRST RESPONSE CHARACTER
         L     R3,=A(NUMSDG)       PICK UP BUUFFER ADDRESS
         MVC   0(1,R3),0(R2)       MOVE RESPONSE TO BUFFER
         BAL   R10,VALIDATE        CHECK IF CHARACTER IS VALID
         LTR   R15,R15             ANY ERROR ?
         BNE   ERROR4              BRANCH IF ERROR
         B     OREP                ANALIZE NEXT RESPONSE AREA
         SPACE  2
FIRSTMOD EQU   *                   *
         LA    R9,2                2 CHARACTERS TO SCAN
         LA    R2,2(R1)            POINT ON FIRST RESPONSE CHARACTER
         L     R3,=A(FIRSTSDG)     PICK UP BUFFER ADDRESS
         MVC   0(2,R3),0(R2)       MOVE RESPONSE TO BUFFER
FRSCAN   EQU   *                   *
         BAL   R10,VALIDATE        CHECK IF CHARACTER IS VALID
         LTR   R15,R15             ANY ERROR ?
         BNE   ERROR5              BRANCH IF ERROR
         LA    R2,1(R2)            PICK UP NEXT CHARACTER
         BCT   R9,FRSCAN           LOOP
         B     OREP                ANALIZE NEXT RESPONSE AREA
         SPACE 2
SCANRET  EQU   *                   *
         B     BIGLOOP             TAKE ANOTHER DISPLAY
         SPACE 5
VALIDATE EQU   *                   *
         LA    R15,0               ASSUME CORRECT CHARACTER PASSED
         CLI   0(R2),X'F0'         IS CHARACTER
         BL    CHARERR                          IN
         CLI   0(R2),X'F9'                         NUMERICAL
         BNH   CHAREXIT                                      RANGE ?
CHARERR  EQU   *                   *
         LA    R15,4               SET RETURN ERROR CODE IF NOT
CHAREXIT EQU   *                   *
         BR    R10                 RETURN TO CALLER
         SPACE  5
         SPACE 2
**********************************************************************
*                                                                    *
*                 PRINT THE CURRENT PANNEL                           *
*                                                                    *
**********************************************************************
         SPACE 2
PRINTASK EQU   *                   *
         L     R1,=A(PRINTFLG)     TEST IF SYSOUT
         CLI   0(R1),X'FF'                       IS ALLOCATED
         BE    WEPRINT             BRANCH IF YES
         L     R15,=A(INIPRINT)    BRANCH TO SYSOUT
         BALR  R14,R15                       ALLOCATION ROUTINE
         LTR   R15,R15             TEST IF ALLOCATION IS OK
         BNE   CFINI               TERMINATE IF ERROR
WEPRINT  EQU   *                   *
         L     R7,ABUFFER          PICK UP BUFFER ADDRESS
         LA    R4,23               NUMBER OF LINES TO PRINT
         MVI   LIGNE,C'1'          CAUSE EJECT
SORLOOP  EQU   *                   *
         MVC   LIGNE+1(80),0(R7)   MOVE TEXT TO LINE
         BAL   R9,PRINT            PRINT LINE
         LA    R7,80(R7)           NEXT LINE
         BCT   R4,SORLOOP          CONTINUE PRINTING
         B     BIGLOOP             CONTINUE
         SPACE 5
PRINT    EQU   *                   *
         PUT   SYSPRINT,LIGNE      WRITE LINE
         MVI   LIGNE,X'40'         CLEAR
         MVC   LIGNE+1(80),LIGNE         TEXT AREA
         BR    R9                  RETURN
         SPACE 2
**********************************************************************
*                                                                    *
*                       TERMINATE PROCESSING                         *
*                                                                    *
**********************************************************************
         SPACE 2
CFINI    EQU   *                   *
         CLOSE TABLE
         BAL   R9,UNALLOC          DYNAMIC UNALLOCATE MSCTABLE
         L     R1,=A(PRINTFLG)     DO WE
         CLI   0(R1),X'FF'               HAVE PRINTED ?
         BNE   CFINI1              IGNORE IF NOT
         CLOSE SYSPRINT            CLOSE AND RELEASE THE SYSOUT FILE
CFINI1   EQU   *
         B     CLAFIN              END OF JOB
         SPACE 5
**********************************************************************
*                                                                    *
*                          EXCP SUBROUTINE                           *
*                                                                    *
**********************************************************************
         SPACE 2
EXCP     EQU   *                   *
         XC    ECB(4),ECB          CLEAR ECB
         EXCP  IOB                 READ
         WAIT  ECB=ECB             WAIT I/O COMPLETED
         TM    ECB,X'7F'           SUCCESSFULL ?
         BO    EXCPRET             BRANCH IF YES
         LA    R1,IOERRMSG         PICK UP ERROR MESSAGE
         LA    R0,L'IOERRMSG                            AND LENGTH
         TPUT  (R1),(R0)           WRITE ERROR MESSAGE
         B     CFINI               TERMINATE PROCESSING
IOERRMSG DC    CL26'I/O ERROR ON SYS1.MSCTABLE'
         SPACE 2
EXCPRET  EQU   *                   *
         BR    R9                  RETURN
         SPACE 3
**********************************************************************
*                                                                    *
*                   DATE TRADUCTION SUBROUTINE                       *
*                                                                    *
**********************************************************************
         SPACE 2
TRDATE   EQU   *                   TRADUCT DATE IN JJ MM AA
         MVI   PYEARTAB+4,28       ASSUME NON-LEAP YEAR
         TM    TEMP+5,X'01'        TEST
         BO    *+16                 FOR
         TM    TEMP+5,X'12'          LEAP
         BM    *+8                    YEAR
         MVI   PYEARTAB+4,29       SET UP TABLE FOR LEAP YEAR
         MVC   DATE(9),DATEMASK    MOVE MASK
         ED    DATE+4(5),TEMP+5          EDIT YEAR
         XC    TEMP(6),TEMP        CLEAR ALL BUT JULIAN DATE
         XR    R0,R0               CLEAR
         CVB   R1,TEMP             CONVERT JULIAN DATE TO BINARY
         LA    R2,PYEARTAB-4       PREPARE TO SCAN CONV TABLE
PRIDATE  SR    R1,R0               CONVERT
         LA    R2,4(R2)             FROM JULIAN
         IC    R0,0(,R2)             DATE TO
         CR    R0,R1                  MONTH
         BL    PRIDATE                 AND DAY
         CVD   R1,TEMP             CONVERT TO DECIMAL
         MVO   TEMP(2),TEMP+6(2)  SHIFT FOR EDIT
         ED    DATE(3),TEMP        EDIT DAY
         MVC   DATE+3(2),1(R2)     MOVE MONTH
         BR    R9                  RETURN TO CALLER
DATE     DS    CL9' '
DATEMASK DC    XL9'4021204040F1F92120'
         DS    0H                  ALIGNEMENT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*              DYNAMIC ALLOCATION OF THE TABLE PACK                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
DYNALLOC EQU   *                   DATA SET DYNAMIC ALLOCATION
         SPACE 1
         LA    R3,DYNRB            PICK UP RB ADDRESS
         USING S99RB,R3            ESTABLISH RB ADDRESSABILITY
         XC    S99VERB(S99RBEND-S99VERB),S99VERB   CLEAR AREA
         OI    S99VERB,S99VRBAL    TURN ALLOCATE BIT ON
         LA    R1,DYNTXTPT         GET TEXT POINTER ADDRESS
         ST    R1,S99TXTPP         SAVE POINTER TEXT IN RB
         MVI   DYNTXTPT,X'00'      THIS IS NOT END OF POINTERS
         LA    R1,DYNRBPTR         GET RB POINTER
         BAL   R10,ALLOC           ALLOCATE
         USING IHADCB,R4           ESTABLISH DCB ADDRESSABILITY
         LA    R4,TABLE            GET DCB ADDRESS
         MVC   DCBDDNAM,DDNAME     MOVE DDNAME RETURNED BY DYNALLOC
         BR    R9                  RETURN TO CALLER
         DROP  R4                  KILL DCB DSECT ADDRESSABILITY
         SPACE 5
ALLOC    EQU   *                   ALLOCATE / UNALLOCATE
         DYNALLOC                  CALL DYNAMIC ALLOCATION
         LTR   R15,R15             ALLOCATION/DEALLOCATION COMPLETE ?
         BE    ALLOCRTR            RETURN IF YES
         CLI   DYNFLG,X'FF'        IS THIS THE SECOND ATTEMPT ?
         BE    DYNWTO              SEND MESSAGE IN THAT CASE
         MVI   DYNFLG,X'FF'        SHOW SECOND ATTEMPT WILL BE MADE
         MVI   DYNUTXT4+5,X'04'    TRY TO ALLOCATE
         MVC   DYNUNIT+4(2),=CL2'  '               ON A MODEL 1
         LA    R1,DYNRBPTR         REDO THE
         B     ALLOC                        DYNALLOC
DYNWTO   LA    R1,WTOALLOC+4       PICK UP ERROR MESSAGE ADDRESS
         LH    R0,WTOALLOC         LENGTH
         TPUT  (R1),(R0)           SEND ERROR MESSAGE
         B     CLAFIN              EXIT
WTOALLOC DS    0F                  DYNAMIC ALLOCATION ERROR MESSAGE
         DC    AL2(53)             MESSAGE LENGTH
         DC    B'0000000000000000' MCS FLAGS
         DC    C'DYNAMIC ALLOCATION FAILED ON SYS1.MSCTABLE.'
WTONM    DC    CL6' '              PRIMARY TABLE PACK NAME
         SPACE 3
ALLOCRTR DS    0H                  *
         BR    R10                 RETURN TO CALLER
*---------------------------------------------------------------------*
*                                                                     *
*              DYNAMIC TABLE PACK DEALLOCATION                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
UNALLOC  EQU   *                   *
         SPACE 1
         LA    R3,DYNRB            POINT DSECT
         XC    S99VERB,S99VERB     ZERO ALLOCATE VERB
         OI    S99VERB,S99VRBUN    TURN ON UNALLOCATE VERB IN RB
         MVI   DYNTXTPT,X'80'      END OF POINTERS
         LA    R1,DYNRBPTR         GET REQUEST BLOCK POINTER
         BAL   R10,ALLOC           UNALLOCATE
         BR    R9                  RETURN TO CALLER
         DROP  R3                  KILL DSECT ADDRESSABILITY
         SPACE 5
CLAFIN   EQU   *                   *
         ICM   R1,15,AZONE         DID WE HAVE A GETMAINED AREA
         BZ    CLRSCN              BRANCH IF NOT
         L     R0,LZONE            PICK UP LENGTH OF AREA
         FREEMAIN R,LV=(R0),A=(R1)  RELEASE STORAGE AREA
CLRSCN   LA   R1,CLEAR
         LA   R0,L'CLEAR
         TPUT (1),(0),FULLSCR
NOGETMN  EQU   *                   *
         L     R13,SAVE1+4         RESTORE R13 OF CALLER
         LA    R15,0               SET
         ST    R15,16(R13)             RETURN CODE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVI   12(R13),X'FF'       SHOW THAT WE ARE RETURNED
         BR    R14                 RETURN TO CALLER
         SPACE 5
         LTORG
         SPACE 5
DYNRBPTR DC    X'80',AL3(DYNRB)    ADDR OF ALLOCATE REQUEST BLOCK
DYNRB    DC    AL1(20)             SIZE OF REQUEST BLOCK
         DC    CL19' '             REST OF REQUEST BLOCK
DYNTXTPT DC    X'00',AL3(DYNUTXT1) TEXT POINTER TO DSNAME
DYNTXTP0 DC    X'00',AL3(DYNUTXT0) TEXT POINTER TO VOLUME SERIAL NUMBER
DYNTXTP1 DC    X'00',AL3(DYNUTXT2) TEXT PTR FOR DISP PARM
DYNTXTP2 DC    X'00',AL3(DYNUTXT3) TEXT PTR FOR RETURN DDNAME
DYNTXTP3 DC    X'80',AL3(DYNUTXT4) TEXT PTR FOR UNIT FIELD
DYNUTXT0 DC    AL2(DALVLSER),AL2(1),AL2(6)       VOL SER TEXT LIST
DYNVOL   DS    CL6                 SPACE FOR VOLUME SERIAL NUMBER
DYNUTXT1 DC    AL2(DALDSNAM),AL2(1),AL2(DSNLNGTH)  DSNAME TEXT LIST
DYNDSN   DS    CL44                SPACE FOR DSNAME
DYNUTXT2 DC    AL2(DALSTATS),AL2(1),AL2(1)       DISP TEXT LIST
DYNDISP  DC    X'08'               DISP=SHR KEY
DYNUTXT3 DC    AL2(DALRTDDN),AL2(1),AL2(8)      RETURN DDNAME TEXT LIST
DDNAME   DS    CL8                 RETURNED DDNAME
DYNUTXT4 DC    AL2(DALUNIT),AL2(1),AL2(6)       UNIT TEXT LIST
DYNUNIT  DC    CL6'3330-1'                      ASSUME 3330-1
DYNFLG   DC    X'00'               DYNAMIC ALLOCATION FLAG
         SPACE 2
DSNLNGTH EQU   L'DYNDSN            DSNAME LENGTH
VOLTABLE DC    CL6' '
DSNTABLE DC    CL44'SYS1.MSCTABLE.'
TABLUNIT DC    CL4'3330'
REPAREA  DS    CL6                 RESPONSE AREA
MESS1    DC    CL34'ENTER VOLSER OF PRIMARY TABLE PACK'
CLEAR    DC   X'C31140403C4040001140401D6013'
         SPACE 5
PYEARTAB DC    AL1(31),C'01 '      JULIAN
         DC    AL1(28),C'02 '       DATE
         DC    AL1(31),C'03 '        TO
         DC    AL1(30),C'04 '         DAY
         DC    AL1(31),C'05 '          AND
         DC    AL1(30),C'06 '           MONTH
         DC    AL1(31),C'07 '            CONVERSION
         DC    AL1(31),C'08 '             TABLE
         DC    AL1(30),C'09 '              *
         DC    AL1(31),C'10 '               *
         DC    AL1(30),C'11 '                *
         DC    AL1(255),C'12 '                *
         SPACE 2
RECLNGTH EQU   264                 RECORD SIZE
         SPACE 5
SSIDVAL  DS    F                   CURRENT LINE DISPLAY POINTER
CYL1     DC    X'07'               CC HH
HEAD1    DC    X'01'                     FOR VERIFICATION TABLE
CYL2     DC    X'08'               CC HH
CYL3     DC    X'09'               CC HH
HEAD3A   DC    X'0B'                      1ST AND
HEAD3B   DC    X'0C'                              2ND MVT DATA BLOCK
         SPACE 5
PARM126  DS    0F                  SVC 126 REQUEST BLOCK DUMP MSC SECT
QULEN    DC    F'44'               LENGTH OF REQUEST BLOCK
QUORD    DC    XL1'0B'             ORDER CODE:READ A MSC CONTROL SECTOR
QURES    DC    XL1'00'             RESERVED
QUCODE   DC    XL1'03'             OP CODE : READ MSC STORAGE
QUSECT   DC    X'C9'               SECTOR OF MOUNT EQUALIZATION RECORD
QWRES1   DC    XL2'00'             RESERVED
QWFLAG   DC    XL1'00'             MAIN (00) OR EXTENDED (80) STORAGE
QWRES2   DC    XL29'00'            RESERVED
QUPTR    DC    A(REC1)             RECEIVING DUMP AREA
         SPACE 5
IOB      DS    0D                  IOB
IOBFLAG1 DC    X'42'
IOBFLAG2 DC    X'00'
IOBSENS0 DC    X'00'
IOBSENS1 DC    X'00'
IOBECBCC DS    0C
IOBECBPT DC    A(ECB)
IOBFLAG3 DC    X'00'
IOBCSW   DC    XL7'00'
IOBSIOCC DS    0C
IOBSTART DC    A(CCW1)
IOBDCBPT DC    A(TABLE)
IOBRESTR DC    A(0)
         DC    F'0'
SEEKADDR DS    0CL8
         DC    X'00000000'         MBBC
CC       DC    X'07'                  C
         DC    X'00'                  H
HH       DC    X'01'                  H
R        DC    X'01'                  R
         SPACE 2
NSDG     DC    X'00'               NUMBER OF SDG TO BE DISPLAYED
SFIRST   DC    X'00'               FIRST SDG TO BE DISPLAYED
REP      DC    CL20' '             RESPONSE AREA
         DS    0F
DISKADDR DC    XL4'0009000B'       FIRST CCHH OF MVT DATA BLOCK
ECB      DC    F'0'                ECB
ARECX    DC    A(RECX)
         DC    A(RECY)
AREC1    DC    A(REC1)
ABUFFER  DC    A(BUFFER)           OUTPUT BUFFER ADDRESS
ASSID    DC    A(SSID)             BEGINNING OF VARYING SSID AREA
         SPACE 2
CCW1     CCW   X'23',SEEKADDR,X'60',1     SET SECTOR
         CCW   X'31',SEEKADDR+3,X'60',5   SEARCH ID EQAL
         CCW   X'08',*-8,X'60',1          TIC
CCWVAR   DC    24D'0'                     AREA FOR APPROPRIATED CCW
         SPACE 4
CCWMVT   CCW   X'86',REC1,X'20',264       CCW CHAIN FOR MVT DATA BLK
         SPACE 2
CCWVER   DS    0D                         CCW CHAIN FOR VER TABLE
         CCW   X'86',REC1,X'60',264       MISCELLANEOUS DATA
         CCW   X'86',REC2,X'60',264       UN
         CCW   X'86',REC2,X'60',264          SIG
         CCW   X'86',REC2,X'60',264              NIFI
         CCW   X'86',REC2,X'60',264                   CANT
         CCW   X'86',REC2,X'20',264       ALLOCATION BIT MAP
         SPACE 2
CCWSDG   DS    0D                         CCW CHAIN FOR SDG TABLE
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         CCW   X'86',REC1,X'60',264       *****  MODIFIED   *****
         SPACE 5
LZONE    DC    F'0'                LENGTH OF GETMAINED AREA
AZONE    DC    F'0'                ADDRESS OF GETMAINED AREA
VIRTVOL  DS    F                   CURRENT BYTE MAP VOLUME
VIRTVOLP DS    F                   CURRENT VOLID TABLE
EVIRVOLP DS    F                   END OF VOLID TABLE
VIRTFRAM DS    F                   CURRENT DISPLAY FRAME
SDG0     DC    2D'0'               SDG ALLOCATION BYTE MAP
SDGLRU   DC    XL28'00'            INITIAL LRU VALUE PER SDG
         SPACE 5
TABLE    DCB   DSORG=PS,MACRF=(E)     SYS1.MSCTABLE DCB
         SPACE 5
SYSPRINT DCB   DSORG=PS,MACRF=(PM),BLKSIZE=81,RECFM=FBA,LRECL=81
         SPACE 5
LIGNE    DC    CL81' '
         SPACE 2
         SPACE 4
         DS    0D                  DOUBLE WORD ALIGNMENT
         DC    X'C2114040'         WCC SBA R1 C1
BUFFER   DS    0CL1920             OUTPUT BUFFER
L1       DC    CL80'MSSTSO --- FCI/IPO MSS DISPLAY  VER(1.0)'
TIMELINE EQU   L1+60,8             TIME VALUE
DATELINE EQU   L1+71,8             DATE VALUE
SDG00    EQU   L1+44               FIRST SDG
SLASH    EQU   L1+50               SEPARATOR
S0       EQU   L1+47               FIRST SDG NUMBER
SDG01    EQU   L1+52               SECOND SDG
S1       EQU   L1+55               SECOND SDG NUMBER
L2       DC    CL80' '
L3       DC    CL5' '
         DC    CL5'FRAME'
FRAMNB   DC    CL4' '              FRAME NUMBER
         DC    CL6' '
         DC    CL60'STAGING DRIVES UTILIZATION'
L4       DC    CL60'ID   ....5...10...15...20...25...30...35...40...45.X
               ..50.'
         DC    CL20' FREE ACTV INAT BND'
SSID     DC    8CL80' '            SSID'S DESCRIPTIONS
SSIDLIM  EQU   (*-SSID)/80         LIMIT
L13      DC    CL80' '             BLANK SEPARATOR LINE
L14      DC    24C'-'
         DC    CL32' V I R T U A L   V O L U M E S -'
         DC    23C'-'
         DC    CL1' '
L15      DC    5CL16'SERIAL ID CYL * '
L16      DC    8CL80' '                SPACE FOR SERIAL NUMBER
ENDDISP  EQU   *                   * END OF DISPLAY
         DC    CL8' OPTIONS'
         DC    X'1DE8'             SF HIGH DENSITY
         DC    C'PF2'
         DC    X'1D60'             SF ATT
         DC    C'END'
         DC    X'1DE8'             SF HIGH
         DC    C'PA2'
         DC    X'1D60'             SF ATT
         DC    C'PRINT'
         DC    X'1DE8'             SF HIGH
         DC    C'PF4'
         DC    X'1D60'             SF ATT
         DC    C'COMMENTS'
         DC    X'1DE8'             SF HIGH
         DC    C'PF1'
         DC    X'1D60'             SF ATT
         DC    C'NEXT'
         DC    X'1DE8'             SF HIGH
         DC    C'PF8'
         DC    X'1D60'             SF ATT
         DC    X'1DE8'             SF HIGH
         DC    C'VOL'
         DC    X'1DC8'             SF HIGH UNPROTECTED
         DC    X'13'               INSERT CURSOR
QVOL     DC    CL6' '              VOLUME TO BE DISPLAYED
         DC    X'1D60'             SF ATT
ERVOL    DC    CL11' '             ERROR TEXT
         SPACE 2
ENDNORM  DC    CL80' '
TEMP     DS    D                   CONVERT AREA
IDARRAY  DC    CL40'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ@$#+&&'
IDLIMIT  DC    AL2(40*NBFRAME)     MAX NUMBER OF VOLUMES IN MVT
CURFRAM  DC    X'00'               CURRENT FRAME NUMBER
SSIDNB   DC    X'00'               CURRENT SSID NUMBER
FRAMASK  DS    8CL80               MASK FRAME FOR DISPLAY
         SPACE 5
         DS    0D
RECX     DC    XL8'0'              PAGE AVAILABILITY BLOCK FOR SDG0
         DC    XL256'0'
RECY     DC    XL8'0'              PAGE AVAILABILITY BLOCK FOR SDG1
         DC    XL256'0'
REC1     DC    XL8'00'
         DC    XL256'00'
REC2     DC    XL8'00'
         DC    XL256'00'
REC3     DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         DC    XL8'00'
         DC    XL256'00'
         SPACE 5
TEXTHELP DS    0D                  HELP TEXT PANNEL
         DC    X'C7114040'         WCC SBA R1 C1
LL1      DC    5CL80' '
LL6      DC    CL35' '
         DC    C'COMMENTS'
         DC    CL37' '
LL7      DC    CL35' '
         DC    8C'*'
         DC    CL37' '
LL8      DC    CL80' '
LL9      DC    CL22' '
         DC    C'THIS IS A DYNAMIC DISPLAY OF THE MSS'
         DC    CL22' '
LL10     DC    CL10' '
         DC    CL70'EACH POINT IDENTIFIES A VIRTUAL PAGE (8 CYL EACH)'
LL11     DC    CL10' '
         DC    CL70'NEXT LINES ARE FOR EACH ON LINE SSID'
LL12     DC    CL5' '
         DC    C'THE CHARACTER UNDER EACH VIRTUAL PAGE IS AN IDENTIFIE'
         DC    C'R FOR THE VIRTUAL     '
LL13     DC    CL5' '
         DC    CL75'VOLUME TO WHICH THIS PAGE IS ALLOCATED'
LL14     DC    CL10' '
         DC    C'(THIS IDENTIFIER IS REPEATED IN THE VIRTUAL VO'
         DC    C'LUME CROSS REF).        '
LL15     DC    CL6' '
         DC    C'A . ON A PAGE SHOWS THAT THIS PAGE IS ALLOCATED TO A '
         DC    C'VOL IN ANOTHER FRAME '
LL16     DC    CL10' '
         DC    C'THE STARS **** IDENTIFY THE PAGES ALLOCATED TO THE MS'
         DC    C'S TABLES.       '
LL17     DC    CL80' '
LL18     DC    CL10' '
         DC    C'THE COUNTS UNDER FREE ACT INAT'
         DC    C' BND ARE                                '
LL19     DC    CL5' '
         DC    C'THE NUMBER OF FREE/ACTIVE/INACTIVE/BOUND PAG'
         DC    C'ES ON THIS SSID               '
LL20     DC    4CL80' '
LL24     DC    CL20' '
         DC    C'DEPRESS'
         DC    X'1DE8'
         DC    C' PF3 '
         DC    X'1D60'
         DC    C'TO RETURN'
         DC    CL37' '
ENDHELP  DS    0C                  END OF HELP PANNEL
         SPACE 5
         SPACE 5
TEXTOPT  DS    0D                  CHANGE OPTIONS PANNEL
         DC    X'C2114040'         WCC SBA R1 C1
         DC    X'1D60'             PROTECTED LOW
         DC    CL79' '
         DC    CL28' '
         DC    CL25'CHANGE OPTIONS IF DESIRED'
         DC    CL27' '
         DC    2CL80' '
         DC    CL15' '
         DC    CL65'WARNING MAX SSID''S ONLINE FOR A DISPLAY IS 8'
         DC    CL80' '
         DC    CL80' '
         DC    CL20' '
         DC    CL17'DISPLAY SSID''S ON'
         DC    X'1DC8'             UNPROTECTED HIGH
NUMSDG   DC    C'1'                NUMBER OF SDG TO BE DISPLAYED
         DC    X'1D60'             PROTECTED LOW
         DC    CL29'STAGING DRIVE GROUPS.(1 OR 2)'
         DC    CL11' '
         DC    CL20' '
         DC    CL32'FIRST SDG TO BE DISPLAYED IS SDG'
         DC    X'1DC8'             UNPROTECTED HIGH
FIRSTSDG DC    C'00'               1 ST SDG NUMBER
         DC    X'1D60'             PROTECTED LOW
         DC    CL24' '
         DC    CL20' '
         DC    CL60'(IF 2 SDG SPECIFIED,THE 1ST ONE MUST BE EVEN)'
         DC    CL80' '
         DC    CL30' '
         DC    CL4'THEN'
         DC    X'1DE8'             PROTECTED HIGH
         DC    CL45'DEPRESS ENTER  KEY'
         DC    CL80' '
         DC    CL10' '
ERROR    DC    CL70' '             ERROR MESSAGE IF REQUIRED
         DC    10CL80' '
ENDOPT   EQU   *                   END OF OPTION PANNEL
         SPACE 5
LINECURS DC    X'C711C8C713'       INSERT CURSOR LINE
         SPACE 5
         EJECT
CONFIG   DSECT                     CONFIGURATION BIT MAP DSECT
CONFPREF DS    CL8                 PREFIX
         DS    CL72                RESERVED
CONFDRDG DS    CL4                 DRD GENERATED
CONFSAG  DS    CL2                 SA
CONFDRCG DS    CL2                 DRC
CONFSDGG DS    CL30                SDG GENERATED
CONFFLAG DS    CL1                 FLAG
CONFCSG  DS    CL1                 CS
CONFDRDO DS    CL4                 DRD ONLINE
CONFSAO  DS    CL2                 SA
CONFDRCO DS    CL2                 DRC
CONFSDGO DS    CL30                SDG ONLINE
         DS    CL1
CONFCSO  DS    CL1                 CS
         EJECT
PAB      DSECT                     PAGE AVAILABILITY BLOCK DSECT
PABPREF  DS    CL8                 PREFIX
PABFREE  DS    CL2                 FREE TOTAL
PABACT   DS    CL2                 ACTIVE TOTAL
PABINACT DS    CL2                 INACTIVE TOTAL
PABOUND  DS    CL2                 BOUND TOTAL
         DS    CL1                 '33'
PABUPD   DS    CL1                 UPPER DELTA
PABUPT   DS    CL2                 UPPER THRESHOLD
         DS    CL1
PABLOD   DS    CL1                 LOWER DELTA
PABLOT   DS    CL2                 LOWER THRESHOLD
PABSA    DS    CL4                 STAGING ADAPTERS
PABWXYZ  DS    CL4                 DESTAGE SLICE TIME RANGES
         DS    CL8                 RESERVED
PABFCNT  DS    8CL4                FREE/ACT/INACT/BOUND BY DEVICE
PABFPMAP DS    8CL8                FREE PAGE BIT MAP BY DEVICE
PABAPMAP DS    8CL8                ACTIVE PAGE BIT MAP BY DEVICE
PABDEVCE DS    8CL4                FLAGS AND DEVICE DESCRIPTION
         EJECT
RPMAP    DSECT                     REAL PAGE MAP DESCRIPTION DSECT
RPFLAG   DS    CL1                 FLAG
RPVPAGE  DS    CL1                 VIRTUAL PAGE
RPMVT    DS    CL2                 MOUNTED VOLUME TABLE POINTER
         EJECT
MVT      DSECT                     MVT DATA BLOCK DESCRIPTION DSECT
MVTPREF  DS    CL8                 PREFIX
MVTVOLID DS    CL6                 VOLID
MVTATRIB DS    CL1                 VOLUME ATTRIBUTE
         DS    CL1                 RESERVED
MVTLZYX1 DS    CL2                 1ST CARTRIDGE LOCATION
MVTLZYX2 DS    CL2                 2ND CARTRIDGE LOCATION
MVTMOUNT DS    CL1                 MOUNT FLAG
MVTINACT DS    CL1                 TOTAL NUMBER OF INACTIVE PAGES
MVTRESRL DS    CL1                 RESERVE/RELEASE
MVTSDG   DS    CL1                 SDG #
MVTLADDR DS    CL1                 LOGICL ADDRESS OF MOUNTED VOLUME
MVTVAM   DS    CL1                 VOLUME AVAILABLE MESSAGE
         DS    2CL1                RESERVED
MVTSA    DS    CL1                 STAGING ADAPTER 1 & 2
MVTCPUID DS    CL3                 CPU IDENTIFICATION
MVTVVA   DS    CL1                 VIRTUAL VOLUME ADDRESS
MVTVUA   DS    CL3                 VIRTUAL UNIT ADDRESS
         DS    CL24                CONTINUATION FOR DIFFERENT SA'S
MVTFLAGD DS    CL1                 PAGE DESCRIPTION
MVTBOUND DS    CL1                 COUNT OF NUMBER OF BOUND ACQUIRE
MVTREALP DS    CL1                 REAL PAGE ON DASD
MVTCYLM  DS    CL1                 BIT PAGE CYLINDER MAP
         EJECT
*
*
*  INCLUDED IN THE UNWASHED AREA BELOW ARE MACROS:
*
*
*        IHADCB                   DCB DESCRIPTION DSECT
*        IEFZB4D0
*        IEFZB4D2
*
*
         PRINT OFF
         IHADCB                   DCB DESCRIPTION DSECT
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         EJECT
         PRINT ON
         IKJPSCB
         EJECT
MVTDISP  CSECT
         SAVE  (14,12),,MVTDISP_&SYSDATE  SAVE REGISTERS
         LR    R12,R15             INITIALIZE BASE REGISTER
         USING MVTDISP,R12         BASE REGISTER
         B     SAVE2+72            GO TO NEXT EXECUTABLE INSTRUCTION
SAVE2    DS    18F                 SAVE AREA FOR CALLED PROGRAM
         ST    R13,SAVE2+4         SAVE R13 OF CALLING PROGRAM
         LA    R15,SAVE2           R15=SAVE ADDRESS OF CALLED
         ST    R15,8(R13)          PROTECT SAVE AREA OF CALLED PROGRAM
         LR    R13,R15             R13=SAVE AREA ADDR OF CALLED
         SPACE 2
         SPACE 2
**********************************************************************
*                                                                    *
*                   MVT DISPLAY SUBROUTINE                           *
*                      ****************                              *
*      THIS ROUTINE IS USED TO DISPLAY THE CONTENT OF A MVT DATA     *
*   BLOCK WHICH IS GIVEN IN REGISTER 4 AT ENTRY POINT.               *
*      FOLLOWING INFORMATIONS ARE PROVIDED :                         *
*             - VOLUME NAME                                          *
*             - VOLUME ATTRIBUTES                                    *
*             - SDG NUMBER                                           *
*       AND,FOR EACH VIRTUAL PAGE :                                  *
*             - VIRTUAL PAGE NUMBER                                  *
*             - REAL PAGE NUMBER                                     *
*             - LUA                                                  *
*             - PAGES ATTRIBUTES (B=BIND,S=SCHEDULE FOR DESTAGE,     *
*                                 A=ACTIVE)                          *
*             - CYLINDER BIT MAP                                     *
*                                                                    *
*                                                                    *
*           BY DEPRESSING PF4,RETURN IS MADE TO THE CALLER AFTER     *
*   PRINTING THE FRAME DISPLAYED.                                    *
*           BY DEPRESSING PF3,IMMEDIATE RETURN IS MADE TO THE        *
*   CALLER                                                           *
*                                                                    *
**********************************************************************
         SPACE 20
         USING MVT,R4              ESTABLISH MVT ADDRESSABILITY
         MVC   PVOL(6),MVTVOLID    MOVE VOLUME ID
         MVI   PBIND,C'N'          ASSUME NOT A BIND VOLUME
         TM    MVTATRIB,X'04'      IS ASSUMPTION CORRECT ?
         BZ    NOBIND              BRANCH IF YES
         MVI   PBIND,C'Y'          SHOW BIND VOLUME
NOBIND   MVI   PINHIBIT,C'N'       ASSUME NOT AN INHIBIT VOLUME
         TM    MVTATRIB,X'02'      IS ASSUMPTION CORRECT ?
         BZ    NOTINHIB            BRANCH IF YES
         MVI   PINHIBIT,C'Y'       SHOW INHIBIT VOLUME
NOTINHIB MVI   PEXCLU,C'N'         ASSUME NOT AN EXCUSIVE VOLUME
         TM    MVTATRIB,X'10'      IS ASSUMPTION CORRECT ?
         BZ    NOTEXCL             BRANCH IF YES
         MVI   PEXCLU,C'Y'         SHOW EXCLUSIVE VOLUME
NOTEXCL  MVI   PDASDER,C'N'        ASSUME NOT A SECURE VOLUME
         TM    MVTATRIB,X'20'      IS ASSUMPTION CORRECT ?
         BZ    NODASDER            BRANCH IF YES
         MVI   PDASDER,C'Y'        SHOW SECURE VOLUME
NODASDER MVI   PSDG,C'0'           MOVE
         MVC   PSDG+1(1),MVTSDG          SDG NUMBER
         OI    PSDG+1,X'F0'        MAKE IT PRINTABLE
         SPACE 3
         LA    R5,MVTL6            POINT ON RECEIVING AREA
         USING  LINEMVT,R5         ESTABLISH ADDRESSABILITY
         LA    R11,51              NUMBER OF PAGES
MVTLOOP1 EQU   *                   *
         LA    R10,3               NUMBER OF PAGES PER OUTPUT LINE
MVTLOOP2 EQU   *                   *
         MVC   2(24,R5),=CL24' '   CLEAR OUTPUT AREA
         XR    R1,R1               CLEAR R1
*        IC    R1,MVTCYLM          PICK UP CYL MAP
         IC    R1,MVTREALP         PICK UP REAL PAGE(NOT ALLOC=0)
         LTR   R1,R1               IS PAGE EMPTY ?
         BE    MVTNEXT             BRANCH IF YES
         XR    R3,R3               CLEAR
         IC    R3,MVTREALP         PICK UP REAL PAGE ON DASD
         CVD   R3,TEMPMVT          CONVERT REAL PAGE TO DECIMAL
         MVC   EDITMVT(4),=X'40212020' MOVE MASK
         ED    EDITMVT(4),TEMPMVT+6  EDIT REAL PAGE #
         MVC   REALP(2),EDITMVT+2  MOVE REAL PAGE
         SPACE 1
         MVC   LUAP(1),MVTFLAGD    SET
         NI    LUAP,X'07'              THE
         OI    LUAP,X'F0'                  LUA
         SPACE 1
         MVI   BINDP,C'N'          ASSUME VOLUME IS NOT BIND
         ICM   R1,1,MVTBOUND       IS ASSUMPTION CORRECT ?
         BE    *+8                 BRANCH IF YES
         MVI   BINDP,C'Y'          ELSE,SHOW BIND PAGE
         SPACE 1
         MVI   ACTP,C'N'           ASSUME PAGE INACTIVE
         TM    MVTFLAGD,X'80'      IS ASSUMPTION CORRECT ?
         BO    *+8                 BRANCH IF YES
         MVI   ACTP,C'Y'           ELSE,SHOW PAGE IS ACTIVE
         SPACE 1
         MVI   DESTP,C'N'          ASSUME PAGE NOT SCHEDULED
         TM    MVTFLAGD,X'60'      IS ASSUMPTION CORRECT ?
         BZ    *+8                 BRANCH IF YES
         MVI   DESTP,C'Y'          PAGE SCHEDULED FOR DESTAGING
         SPACE 1
         LA    R6,8                NUMBER OF BYTES TO SCAN
         LA    R3,CYLMAP           RECEIVING AREA
         BCTR  R3,0                MINUS ONE
         IC    R1,MVTCYLM          PICK UP PAGE DESCRIPTION
MAPCYL   EQU   *                   *
         STC   R1,0(R6,R3)         STORE CYL BIT IDENTIFIER
         SRL   R1,1                SHIFT ONE BIT RIGTH
         BCT   R6,MAPCYL           CONTINUE FOR THE 8 BYTES
         LA    R3,1(R3)            RESTORE ORIGINAL POINTER
         NC    0(8,R3),=8X'01'     ACTUALIZE CYL BIT MAP
         OC    0(8,R3),=8X'F0'     MAKE BIT MAP PRINTABLE
MVTNEXT  BCTR  R11,0               -1 ON PAGE NUMBER
         LA    R4,4(R4)            NEXT PAGE IN MVT
         LA    R5,26(R5)           NEXT OUTPUT AREA
         BCT   R10,MVTLOOP2        CONTINUE......
         LA    R5,2(R5)            BECAUSE 3RD BLOCK IS 28 LONG
         LTR   R11,R11             END OF MVT ?
         BNE   MVTLOOP1            BRANCH IF NOT
         LA    R3,TEXTMVT          BUFFER ADDRESS
         LA    R4,ENDMVT           BUFFER END ADDRESS
         SR    R4,R3               LENGTH
         TPUT  (R3),(R4),FULLSCR   WRITE MVT DISPLAY
         L     R2,=A(REP)          RESPONSE AREA
         XC    0(20,R2),0(R2)      CLEAR RESPONSE AREA
         LA    R0,20               RESPONSE LENGTH
         TGET  (R2),(R0),ASIS      READ RESPONSE
         L     R1,=A(REP)          PICK UP RESPONSE AREA
         CLI   0(R1),X'F4'         PF4 ENTERED (WRITE OUTPUT) ?
         BNE   MVTRTRN
         L     R1,=A(PRINTFLG)     TEST IF SYSOUT IS
         CLI   0(R1),X'FF'                           ALLOCATED
         BE    OPDONE              BRANCH IF YES
         L     R15,=A(INIPRINT)    ELSE,BRANCH TO SYSOUT
         BALR  R14,R15                      ALLOCATION ROUTINE
         LTR   R15,R15             TEST RETURN CODE
         BE    OPDONE              BRANCH IF OK
         B     MVTSETC             ELSE SET RETURN CODE AND EXIT
OPDONE   EQU   *                   *
         L     R6,=A(SYSPRINT)     PICK UP OUTPUT DCB ADDRESS
         LA    R7,TEXTMVT          PICK UP BUFFER ADDRESS
         LA    R7,4(R7)            IGNORE WCC
         MVI   TEXTMVT+5,X'40'     ERASE WCC
         MVI   MVTL3+15,X'40'                AND SF
         MVI   PVOL+7,X'40'                         ON PRINTED COPY
         LA    R4,23               NUMBER OF LINES
         L     R5,=A(LIGNE)        PICK UP LINE ADDRESS
         MVI   0(R5),C'1'          CAUSE EJECT
PRINTMVT EQU   *                   *
         MVC   1(80,R5),0(R7)      MOVE TEXT TO LINE
         PUT   (R6),0(R5)          WRITE CURRENT LINE
         MVI   0(R5),X'40'         CLEAR CURRENT
         MVC   1(80,R5),0(R5)                    LINE
         LA    R7,80(R7)           NEXT LINE
         BCT   R4,PRINTMVT         CONTINUE PRINTING
         MVI   TEXTMVT+5,X'F0'     RESTORE
         MVI   MVTL3+15,X'E8'              WCC
         MVI   PVOL+7,X'60'                    AND SF
         B     MVTRTRN             RETURN TO MAIN PROGRAM
         SPACE 5
MVTRTRN  EQU   *                   *
         LA    R15,0               SET
MVTSETC  L     R13,SAVE2+4         RESTORE R13 OF CALLER
         ST    R15,16(R13)             RETURN CODE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVI   12(R13),X'FF'       SHOW THAT WE ARE RETURNED
         BR    R14                 RETURN TO CALLER
         SPACE 5
         LTORG
         SPACE 5
TEMPMVT  DS    D                   WORK AREA
EDITMVT  DS    CL4                 EDIT WORK AREA
         SPACE 5
TEXTMVT  DS    0F                  MVT PANNEL DISPLAY
         DC    X'C71140401DF0'     FIELD ATTRIBUTE
         DC    CL22' '
MVTL1    DC    CL59'REAL PAGE TO VIRTUAL PAGE RELATIONSHIP'
MVTL2    DC    CL80' '
MVTL3    DC    C'VIRTUAL VOLUME'
         DC    X'1DE8'             SF HIGH
PVOL     DC    CL6' '              VOLUME SEQUENCE #
         DC    X'1D60'             SF ATT
         DC    C'  BIND '
PBIND    DC    CL1' '              BIND VOLUME
         DC    C'  READONLY '
PINHIBIT DC    CL1' '              READONLY VOLUME
         DC    C'  EXCLUSIVE '
PEXCLU   DC    CL1' '              EXCLUSIVE VOLUME
         DC    C'  DASDERASE '
PDASDER  DC    CL1' '              SECURE VOLUME
         DC    CL10' '
MVTL4    DC    C'SDG '
PSDG     DC    CL2' '              SDG #
         DC    CL20' '
         DC    CL54'(D=LUA, A=ACTIVE, S=SCHD DSTGE, B=BOUND)'
MVTL5    DC    CL26'VP D RP A S B  CYLINDER '
         DC    CL26'VP D RP A S B  CYLINDER '
         DC    CL28'VP D RP A S B  CYLINDER '
MVTL6    DS    0C
         DC    CL26'00'
         DC    CL26'01'
         DC    CL28'02'
         DC    CL26'03'
         DC    CL26'04'
         DC    CL28'05'
         DC    CL26'06'
         DC    CL26'07'
         DC    CL28'08'
         DC    CL26'09'
         DC    CL26'10'
         DC    CL28'11'
         DC    CL26'12'
         DC    CL26'13'
         DC    CL28'14'
         DC    CL26'15'
         DC    CL26'16'
         DC    CL28'17'
         DC    CL26'18'
         DC    CL26'19'
         DC    CL28'20'
         DC    CL26'21'
         DC    CL26'22'
         DC    CL28'23'
         DC    CL26'24'
         DC    CL26'25'
         DC    CL28'26'
         DC    CL26'27'
         DC    CL26'28'
         DC    CL28'29'
         DC    CL26'30'
         DC    CL26'31'
         DC    CL28'32'
         DC    CL26'33'
         DC    CL26'34'
         DC    CL28'35'
         DC    CL26'36'
         DC    CL26'37'
         DC    CL28'38'
         DC    CL26'39'
         DC    CL26'40'
         DC    CL28'41'
         DC    CL26'42'
         DC    CL26'43'
         DC    CL28'44'
         DC    CL26'45'
         DC    CL26'46'
         DC    CL28'47'
         DC    CL26'48'
         DC    CL26'49'
         DC    CL28'50'
         DC    CL80' '
         DC    CL9' '
         DC    CL20'RETURN NO PRINT WITH'
         DC    X'1DE8'             SF HIGH
         DC    C'PF3'
         DC    X'1D60'             SF ATT
         DC    CL4' '
         DC    CL22'RETURN WITH PRINT WITH'
         DC    X'1DE8'             SF HIGH
         DC    C'PF4'
         DC    X'1D60'             SF ATT
         DC    CL9' '
ENDMVT   EQU   *
         EJECT
LINEMVT  DSECT                     CURRENT LINE DSECT
         DS    CL3
LUAP     DS    CL1                 LUA
         DS    CL1
REALP    DS    CL2                 REAL PAGE
         DS    CL1
ACTP     DS    CL1                 PAGE IS ACTIVE
         DS    CL1
DESTP    DS    CL1                 PAGE WAS SCHEDULED FOR DESTAGE
         DS    CL1
BINDP    DS    CL1
         DS    CL2
CYLMAP   DS    CL8                 CYLINDER BIT MAP
         SPACE 5
         EJECT
**********************************************************************
*                                                                    *
*              DYNAMIC ALLOCATE A SYSOUT DATA SET                    *
*                                                                    *
**********************************************************************
         SPACE 2
INIPRINT CSECT
         SAVE  (14,12),,INIPRINT_&SYSDATE  SAVE REGISTERS
         LR    R12,R15             INITIALIZE BASE REGISTER
         USING INIPRINT,R12        BASE REGISTER
         B     SAVE3+72            GO TO NEXT EXECUTABLE INSTRUCTION
SAVE3    DS    18F                 SAVE AREA FOR CALLED PROGRAM
         ST    R13,SAVE3+4         SAVE R13 OF CALLING PROGRAM
         LA    R15,SAVE3           R15=SAVE ADDRESS OF CALLED
         ST    R15,8(R13)          PROTECT SAVE AREA OF CALLED PROGRAM
         LR    R13,R15             R13=SAVE AREA ADDR OF CALLED
         SPACE 2
         CLI   PRINTFLG,X'FF'      DO WE ALREADY HAVE A SYSOUT FILE
         BER   R14                 RETURN IF YES
         LA    R3,DYNRBS           PICK UP RB ADDRESS
         USING S99RB,R3            ESTABLISH RB ADDRESSABILITY
         XC    S99VERB(S99RBEND-S99VERB),S99VERB  CLEAR AREA
         OI    S99VERB,S99VRBAL    TURN ALLOCATE BIT ON
         LA    R1,DYNSYSOU         GET POINTER ADDRESS
         ST    R1,S99TXTPP         SAVE POINTER TEXT IN RB
         LA    R1,DYNRBPT          GET RB POINTER
         DYNALLOC                  ALLOCATE A SYSOUT DATA SET
         LTR   R15,R15             IS RETURN OK ?
         BNE   SYSOUERR            BRANCH IF NOT
         USING IHADCB,R4           ESTABLISH DCB ADDRESSABILITY
         L     R4,=A(SYSPRINT)     PICK UP DCB ADDRESS
         MVC   DCBDDNAM,SYSOUTDD   MOVE DDNAME TO DCB
         OPEN  ((R4),(OUTPUT))     OPEN SYSOUT FILE
         MVI   PRINTFLG,X'FF'      SHOW SYSOUT FILE OPENED
         DROP  R4                  KILL DCB ADDRESSABILITY
         LA    R15,0               SET
INIEND   L     R13,SAVE3+4         RESTORE R13 OF CALLER
         ST    R15,16(R13)             RETURN CODE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVI   12(R13),X'FF'       SHOW THAT WE ARE RETURNED
         BR    R14                 RETURN TO CALLER
         SPACE 5
SYSOUERR EQU   *                   ERROR
         LA    R1,ERRORX           ERROR MESSAGE
         LA    R0,L'ERRORX            AND LENGTH
         TPUT  (R1),(R0)           ISSUE MESSAGE
         LA    R15,8               SET ERROR CODE
         B     INIEND              AND EXIT
         SPACE 5
         LTORG
DYNRBPT  DC    X'80',AL3(DYNRBS)   ADDR OF ALLOCATE REQUEST
DYNRBS   DC    AL1(20)             SIZE OF REQUEST BLOCK
         DC    CL19' '             REQUEST BLOCK
DYNSYSOU DC    X'00',AL3(DYNSYS)   PTR TO ALLOCATE SYSOUT
         DC    X'00',AL3(DYNCLO)   PTR TO FREE=CLOSE
         DC    X'80',AL3(DYNDDNM)  PTR TO RETURN DDNAME
DYNSYS   DC    AL2(DALSYSOU),AL2(1),AL2(1)  ALLOCATE A SYSOUT DATA SET
SYSCLS   DC    CL1'T'              SYSOUT CLASS
DYNCLO   DC    AL2(DALCLOSE),AL2(0)         FREE = CLOSE
DYNDDNM  DC    AL2(DALRTDDN),AL2(1),AL2(8)  RETURN DDNAME
SYSOUTDD DC    CL8' '                       RETURNED DDNAME
         SPACE 2
ERRORX   DC    CL32'DYNAMIC SYSOUT ALLOCATION FAILED'
PRINTFLG DC    X'00'               OPENED SYSPRINT FLAG
         SPACE 5
         END
