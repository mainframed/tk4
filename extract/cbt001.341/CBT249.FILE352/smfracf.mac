        /* DATA SET SMFRACF    AT LEVEL 004 AS OF 02/01/79    */
 SMFRACF: PROC(PARAM)  OPTIONS(MAIN) REORDER;
 /*********************************************************************/
 /* READ TYPE 80/81 RECS TO FIND OUT RACF USAGE/ACTIONS.              */
 /*    10MAY78  K TRUE   V1.0                                         */
 /*********************************************************************/
 /*                                                                   */
 /* THIS PROGRAM READS SMF RECORDS TYPE 81 (RACF INIT) AND            */
 /*   TYPE 80 (RACF ACTIVITY) RECORDS AND PRODUCES A REPORT.          */
 /*                                                                   */
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/
1DCL INPUT FILE  RECORD INPUT  ENV(CONSECUTIVE);
 DCL OUTPUT FILE RECORD OUTPUT ENV(CONSECUTIVE);
 DCL PRINT FILE  STREAM OUTPUT PRINT;
 DCL CLIST FILE  RECORD OUTPUT ENV(CONSECUTIVE);

 DCL VERSION CHAR(17) INIT('VER 1.0 (10MAY78)');
 DCL EOFIN         BIT(1) INIT('0'B);
 DCL DATE          BUILTIN;
 DCL INDEX         BUILTIN;
 DCL TIME          BUILTIN;
 DCL NULL          BUILTIN;
 DCL ONCHAR        BUILTIN ;
 DCL (I,J,K,L)
                   FIXED BIN(15) INIT(0);
 DCL (REC80,REC80_DONE,INREC,#FLUSHED,REC81,REC00,REC130)
                   FIXED BIN(31) INIT(0);

 DCL INDATE          CHAR(6) INIT(' '),
     C_YY     CHAR(2) DEF(INDATE) POS(1),
     C_MM     CHAR(2) DEF(INDATE) POS(3),
     C_DD     CHAR(2) DEF(INDATE) POS(5);

 DCL PACK5         PIC'99999'    INIT(0),
     PACK6         PIC'999999'   INIT(0),
     R941X11  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER),
     R941X12  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER);
              /* IN SYS2.FCILIB  */

 DCL TYPE00        BIT(8) INIT ('00000000'B ) ;
 DCL TYPE80        BIT(8) INIT ('01010000'B ) ;
 DCL TYPE81        BIT(8) INIT ('01010001'B ) ;
 DCL TYPE130       BIT(8) INIT ('10000010'B ) ;

 DCL TEMP8         BIT(8) INIT((8)'0'B);
 DCL EVENT_#       FIXED BIN(15,0) INIT(0);
 DCL TEMP31        FIXED BIN(31,0) INIT(0);
 DCL BZERO         BIT(32) INIT((32)'0'B);
 DCL PARAM         CHAR(100) VAR;
1/*------------------------------------------------------*/
 /* ESTABLISH RUN PARMS FROM PARM FIELD                  */
 /*------------------------------------------------------*/
 DCL DEBUG         BIT(1) INIT('0'B);
 DCL DOCLIST       BIT(1)   INIT('0'B);
 DCL DOACCESS      BIT(1)   INIT('0'B);
 DCL NOCMDS        BIT(1)   INIT('1'B);

 IF LENGTH(PARAM) > 0 THEN
    DO;
      IF INDEX(PARAM,'CLIST') ^= 0 THEN DOCLIST = '1'B;
      IF INDEX(PARAM,'DEBUG') ^= 0 THEN DEBUG = '1'B;
      IF INDEX(PARAM,'CMDS')  ^= 0 THEN NOCMDS='0'B;
      IF INDEX(PARAM,'ACCESS')^= 0 THEN DOACCESS='1'B;
    END;

1DCL 1 DETAIL,     /*   DETAIL OUTPUT LINE..USE HEAD1/HEAD2 FOR TITLE*/
       2 P_RCD_DATE    PIC'Z9/99/99',
       2 F3            CHAR(1),
       2 P_RCD_TIME    PIC'Z9.99.99',
       2 F4            CHAR(1),
       2 P_RACF_EVENT  CHAR(16),
       2 F5            CHAR(1),
       2 P_JOBNAME     CHAR(8),
       2 F1            CHAR(1),
       2 P_VIOLATION   CHAR(1),
       2 F6            CHAR(1),
       2 P_RACF_USER   CHAR(8),
       2 F7            CHAR(1),
       2 P_RACF_GROUP  CHAR(8),
       2 F8            CHAR(1),
       2 P_TERM_ADDR   CHAR(4),
       2 F9            CHAR(1),
       2 P_USER_ATTR(5) CHAR(1),
       2 F10           CHAR(1),
       2 P_LOG_REASON  CHAR(38),
       2 F17           CHAR(1),
       2 P_HEX1        CHAR(8),
       2 F18           CHAR(1),
       2 P_HEX2        CHAR(8);

 DCL PDETAIL  CHAR(131) BASED(@DETAIL);
     @DETAIL  = ADDR(P_RCD_DATE);
     DETAIL = '';

 DCL 1 DETAIL1,
       2 P_BLANKS      CHAR(46),
       2 P_DETAIL      CHAR(85);

 DCL PDETAIL1 CHAR(131) BASED(@DETAIL1);
     @DETAIL1 = ADDR(P_BLANKS);
     DETAIL1='';

 DCL DETAILV  CHAR(255) VAR INIT('');
 DCL CSTR     CHAR(1024) VAR INIT('');

1DCL 1 OUTREC,           /* OUTPUT RECORD FOR SUBSEQUENT PROCESSING*/
       2 JOBNAME     CHAR(8)   INIT(' '),
       2 RCD_DATE    FIXED  DEC(7)      INIT(0),
       2 RCD_TIME    FIXED  BIN(31,0)   INIT(0),
       2 RACF_EVENT  CHAR(16)   INIT(' '),
       2 VIOLATION   CHAR(1)    INIT(' '),
       2 RACF_USER   CHAR(8)    INIT(' '),
       2 RACF_GROUP  CHAR(8)    INIT(' '),
       2 TERM_ADDR   CHAR(4)    INIT(' '),
       2 TGT_USER    CHAR(8)    INIT(' '),
       2 TGT_GROUP   CHAR(8)    INIT(' '),
       2 TGT_DSNAME  CHAR(44)   INIT(' '),
       2 TGT_VOLUME  CHAR(6)    INIT(' '),
       2 TGT_CLASS   CHAR(8)    INIT(' '),
       2 USER_ATTR(5) CHAR(1)   INIT(' '),
       2 LOG_REASON  CHAR(36)   INIT(' '),
       2 CL_#LINES   FIXED BIN(15,0) INIT(0),
       2 CL_LINES(10) CHAR(72)  INIT((10)(72)' ');


 DCL   OUTSTR        CHAR(1024) VAR INIT('');



 DCL 1 CL_REC,           /* OUTPUT RECORD FOR CLIST CONSTRUCTION   */
       2 BODY        CHAR(72)   INIT(' '),
       2 REC#        PIC'999999' INIT(0),
       2 SUBREC#     PIC'99'     INIT(0);


1DCL (H_MAIN1,H_BLANK,H_DETAIL1,H_DETAIL2,H_SUMMARY1,H_SUMMARY2,
      RPTHEAD,TITLE1,TITLE2)
         CHAR(131)  INIT('');
 DCL SUBTITLE  CHAR(131) VAR INIT('');


 DCL RUNDATE     PIC'Z9/99/99' DEF(H_MAIN1) POS(104),
     RUNTIME     PIC'99.99.99' DEF(H_MAIN1) POS(113),
     PAGENO      PIC'ZZ9'      DEF(H_MAIN1) POS(128);

           /*          1         2         3         4         5    */
           /* ....5....0....5....0....5....0....5....0....5....0... */
 H_MAIN1   = 'SMFRACF   FAIRCHILD CAMERA & INSTRUMENT          RACF' ××

           /*                                               1    1  */
           /*  5    6         7         8         9         0    0  */
           /* .5....0....5....0....5....0....5....0....5....0....5. */
             'ACTIVITY ANALYZER PGM  V1M0               RUN ON: MM/' ××

           /*    1         1         1                              */
           /*    1         2         3                              */
           /* ...0....5....0....5....0.                             */
             'DD/YY HH.MM.SS  PAGE XXX ';


 H_DETAIL1 = '------EVENT------                  TSO-USER V ------R' ××
             'ACF------  TERM USER  REASON                         ' ××
             '                        ';

 H_DETAIL2 = '..DATE.. ..TIME.. ...RACF EVENT... /JOBNAME _ USERID ' ××
             '  GROUP    ADDR ATTR  FOR LOGGING                    ' ××
             '                         ';

 H_SUMMARY1= '                                                     ' ××
             '                                                     ' ××
             '                        ';

 H_SUMMARY2= '                                                     ' ××
             '                                                     ' ××
             '                        ';


1DCL 1 RECIN BASED (PTR),            /* INPUT RECORD */
       2 INRZER              BIT(8),
       2 INRREC              BIT(8),
       2 INRTIME             BIT(32),
       2 INRDATE             FIXED DEC(7),
       2 INRID               CHAR(2),
       2 INRSYS              CHAR(2),
       2 INRJOB              CHAR(8),
       2 INRTME              BIT(32),
       2 INRDTE              FIXED DEC(7),
       2 INRUI1              CHAR(6),
       2 INRUI2              CHAR(2),
       2 INRRES(2048)        CHAR(1);

 DCL INCONV(4096)  CHAR(1) BASED(PTR);

 DCL HEXIN         CHAR(8),
     HEXBASED      CHAR(8) BASED(@HEXPTR),
     HEXOUT        CHAR(16),
     HEXC(2)       CHAR(8)  DEF(HEXOUT) POS(1),
     HEX           BIT(1)   INIT('0'B),
     HEXCC   ENTRY (CHAR(*),CHAR(*)),
     OFFSET        FIXED    BIN(15,0)   INIT(0);

 DCL VREASON   CHAR(38) VAR INIT('');
 DCL COMMENT   CHAR(80) VAR INIT('');


 DCL (PTR,@SUMMARY,@DETAIL1,@DETAIL,@HEXPTR,@RELPTR) POINTER;

1DCL 1 SMFREC80 BASED(PTR),      /*  SMF RECORD 80   RACF ACTIVITY   */
       2 SMF80FLG       BIT(8),
       2 SMF80RTY       BIT(8),
       2 SMF80TME       BIT(32),
       2 SMF80DTE       FIXED DEC(7),
       2 SMF80SID       CHAR(4),
       2 SMF80DES(0:15) BIT(1),
       2 SMF80EVT       BIT(8),       /* EVENT CODE           */
       2 SMF80EVQ       BIT(8),       /* EVENT CODE QUALIFIER */
       2 SMF80USR       CHAR(8),
       2 SMF80GRP       CHAR(8),
       2 SMF80REL       FIXED BIN(15,0) UNALIGNED, /* OFFSET TO REL */
       2 SMF80CNT       FIXED BIN(15,0) UNALIGNED, /* # OF RELOCATE */
       2 SMF80ATH(0:7)  BIT(1),       /* SPECIAL AUTHORITIES   */
       2 SMF80REA(0:7)  BIT(1),       /* REASON FOR LOGGING    */
       2 SMF80TLV       BIT(8),
       2 SMF80ERR(0:7)  BIT(1),       /* CMD PROC ERR FLAG     */
       2 SMF80TRM       CHAR(8),      /* TERMINAL ID FGND USER */
       2 SMF80JBN       CHAR(8),      /* JOBNAME               */
       2 SMF80RST       FIXED BIN(31) UNALIGNED, /*RDR START TIME */
       2 SMF80RSD       FIXED DECIMAL(7),        /*RDR START DATE */
       2 SMF80UID       CHAR(8);      /* SMF USERID/TERMINAL      */

1DCL 1 SMFREC81 BASED(PTR),      /*  SMF RECORD 81   RACF INITALIZE  */
       2 SMF81FLG       BIT(8),
       2 SMF81RTY       BIT(8),
       2 SMF81TME       BIT(32),
       2 SMF81DTE       FIXED DEC(7),
       2 SMF81SID       CHAR(4),
       2 SMF81RDS       CHAR(44),     /* RACF DSNAME          */
       2 SMF81RVL       CHAR(6),      /* RACF VOLSER          */
       2 SMF81RUN       CHAR(3),      /* RACF UNIT            */
       2 SMF81UDS       CHAR(44),     /* UADS DSNAME          */
       2 SMF81UVL       CHAR(6),      /* UADS UNIT            */
       2 SMF81OPT       BIT(8),       /* RCVTSTAT   STATS     */
       2 SMF81OP2       BIT(8),       /* RCVTSTAT   STATS     */
       2 SMF81OP3       BIT(8),       /* RCVTSTAT   PROT OPT  */
       2 SMF81AOP       BIT(8),       /* RCVTAUOP   AUDIT     */
       2 SMF81AO2       BIT(8),       /* RESERVED....         */
       2 SMF81TMO       BIT(8),       /* RCVTEROP   TERMINAL  */
       2 SMF81PIV       BIT(8);       /* RCVTPINV   PW CHG INT*/

 DCL 1 SMFREC00 BASED(PTR),      /*  SMF RECORD 00   SYSTEM IPL      */
       2 SMF00FLG       BIT(8),
       2 SMF00RTY       BIT(8),
       2 SMF00TME       BIT(32),
       2 SMF00DTE       FIXED DEC(7),
       2 SMF00SID       CHAR(4);

 DCL 1 SMFREC130 BASED(PTR),     /*  SMF RECORD 130  SWAPRACF COMMAND*/
       2 SMF130FLG      BIT(8),
       2 SMF130RTY      BIT(8),
       2 SMF130TME      BIT(32),
       2 SMF130DTE      FIXED DEC(7),
       2 SMF130SID      CHAR(4),
       2 SMF130JBN      CHAR(8),
       2 SMF130RST      BIT(32),
       2 SMF130RSD      FIXED DEC(7),
       2 SMF130UID      CHAR(8),
       2 SMF130OLD(0:31) BIT(1),
       2 SMF130NEW(0:31) BIT(1);

1 DCL  EVENT_NAME(25)  CHAR(16)   INIT(
          'JOB INIT/LOGON  ','RESOURCE ACCESS ','END OF VOLUME   ',
          'RENAME DATA SET ','SCRATCH DS/TAPE ','DEL 1 VOLUME    ',
          'DEFINE DSN/TAPE ','ADDSD CMD       ','ADDGROUP CMD    ',
          'ADDUSER CMD     ','ALTDSD CMD      ','ALTGROUP CMD    ',
          'ALTUSER CMD     ','CONNECT CMD     ','DELDSD CMD      ',
          'DELGROUP CMD    ','DELUSER CMD     ','PASSWORD CMD    ',
          'PERMIT CMD      ','RALTER CMD      ','RDEFINE CMD     ',
          'RDELETE CMD     ','REMOVE CMD      ','SETROPTS CMD    ',
          'RVARY CMD       '          );

 DCL  CMD_NAME(25) CHAR(8) VAR INIT('','','','','','','',
          'ADDSD','ADDGROUP','ADDUSER','ALTDSD',
          'ALTGROUP','ALTUSER','CONNECT','DELDSD',
          'DELGROUP','DELUSER','PASSWORD','PERMIT',
          'RALTER','RDEFINE','RDELETE','REMOVE',
          'SETROPTS','RVARY '     );

 DCL  ADDSD_KEYWDS(9) CHAR(6) VAR INIT(
          'VOLUME','UNIT','UACC','OWNER',
          'AUDIT','SET','NOSET','LEVEL','');

 DCL  GROUP_KEYWDS(4) CHAR(10) VAR INIT(
          'SUPGROUP','OWNER','NOTERMUACC','TERMUACC');

 DCL UACC_KEYWDS(8) CHAR(7) VAR INIT(
          'ALTER','CONTROL','UPDATE','READ',
          '','','','NONE'           );

 DCL AUDIT_KEYWDS(8) CHAR(8) VAR INIT(
          'ALL','SUCCESS','FAILURES','NONE',
          '','','',''                );

 DCL ALTDSD_KEYWDS(13) CHAR(12) VAR INIT(
          'OWNER','UACC','AUDIT','LEVEL',
          'ADDVOL','DELVOL','SET','NOSET',
          'GLOBALAUDIT','VOLUME','','UNIT',
          'ALTVOL'                      );

 DCL USER_KEYWDS(27) CHAR(12) VAR INIT(
          'DFLTGRP','GROUP','PASSWORD','NOPASSWORD',
          'NAME','AUTHORITY','DATA','GRPACC',
          'NOGRPACC','UACC','ADSP','NOADSP',
          'OWNER','SPECIAL','NOSPECIAL','OPERATIONS',
          'NOOPERATIONS','CLAUTH','NOCLAUTH','AUDITOR',
          'NOAUDITOR','OIDCARD','NOOIDCARD','REVOKE',
          'RESUME','UAUDIT','NOUAUDIT');

1 DCL CONNECT_KEYWDS(13) CHAR(12) VAR INIT(
          'GROUP','UACC','AUTHORITY','ADSP',
          'NOADSP','REVOKE','RESUME','GRPACC',
          'NOGRPACC','OPERATIONS','NOOPERATIONS','SPECIAL',
          'NOSPECIAL'                     );

  DCL DELDSD_KEYWDS(3) CHAR(6) VAR INIT(
          'SET','NOSET','VOLUME'       );

  DCL PASSWORD_KEYWDS(3) CHAR(8) VAR INIT(
          'INTERVAL','USER','PASSWORD'   );

  DCL PERMIT_KEYWDS(8)   CHAR(8) VAR INIT(
          'CLASS','ID','ACCESS','FROM',
          'DELETE','FCLASS','VOLUME','FVOLUME');

  DCL RDEF_KEYWDS(8)     CHAR(12) VAR INIT(
          'DATA','OWNER','UACC','LEVEL',
          'AUDIT','GLOBALAUDIT','ADDVOL','DELVOL');

  DCL CLASS_KEYWDS(8)   CHAR(8) VAR INIT(
          '', 'GROUP','USER','DATASET',
          'DASDVOL','TAPEVOL','TERMINAL','');

  DCL REMOVE_KEYWDS(2)   CHAR(8) VAR INIT(
          'GROUP','OWNER'                );

  DCL SETROPTS_KEYWDS(17) CHAR(12) VAR INIT(
          'TAPE','NOTAPE','INITSTATS','NOINITSTATS',
          'SAUDIT','NOSAUDIT','STATISTICS','NOSTATISTICS',
          'AUDIT','NOAUDIT','TERMINAL','NOTERMINAL',
          'INTERVAL','CMDVIOL','NOCMDVIOL','DASD',
          'NODASD'                        );

  DCL SETR_STATS(8) CHAR(12) VAR INIT(
          '','NORACINIT','NODATASET','NOTAPEVOL',
          'NODASDVOL','NOTERMINAL','','');

  DCL SETR_AUDIT(8) CHAR(8)  VAR INIT(
          '','GROUP','USER','DATASET',
          'DASDVOL','TAPEVOL','TERMINAL','');

  DCL SETR_MISC(10) CHAR(12) VAR INIT(
          'TERMAUTHCHK','TERM=NONE','CMDVIOL','SPECIAL-USR',
          '','','','',
          'TAPEVOLPROT','DASDVOLPROT');

  DCL RVARY_KEYWDS(3) CHAR(8) VAR INIT(
          'ACTIVE','INACTIVE','NOTAPE');

  DCL RVARY_TEXT(2)  CHAR(22) VAR INIT(
          'CMD DENIED BY OPER','RC^=0 FROM RACF MGR');

  DCL INIT_FAIL_MSG(4) CHAR(8) VAR INIT(
          'PASSWORD','GROUP','OIDCARD','TERMINAL');

  DCL CMD_COMMENT(0:2) CHAR(24) VAR INIT(
      '','(NO RACF UPDATE) ','(PARTIAL RACF UPDATE) ');


  DCL GRPAUTH_KEYWDS(4) CHAR(7) VAR INIT(
          'JOIN','CONNECT','CREATE','USE');

  DCL CLAUTH_KEYWDS(8) CHAR(8) VAR INIT(
          '',       '',       'USER',    '',
          'DASDVOL','TAPEVOL','TERMINAL','');

  DCL USER_VAUTH(3) CHAR(16) VAR INIT(
      'NO CLAUTH(USER)','NO AUTH TO GROUP','NO AUTH TO USER');

  DCL R_KEYWDS(8) CHAR(12) VAR INIT(
      'DATA','OWNER','UACC','LEVEL',
      'AUDIT','GLOBALAUDIT','ADDVOL','DELVOL');

  DCL TYPE3_COMMENT(0:1) CHAR(16) VAR INIT(
      '','(INSUFF AUTH)');

  DCL TYPE4_COMMENT(0:5) CHAR(22) VAR INIT(
      '','(GROUP NOT DEFINED)',
      '(USR NOT CONN TO GRP)','(INSUFF GRP AUTH)',
      '(DSN ALREADY DEFND)','(USR NOT RACF DEFND)');

  DCL TYPE5_COMMENT(0:2) CHAR(22) VAR INIT(
      '','(RESOURCE NOT FND)','(INVALID VOL ID)');


1 DCL @PTR(19)  POINTER;
  @PTR = NULL;
  DCL RELLEN(19) FIXED BIN(15,0);
  RELLEN='';

  DCL 1 RELOC   BASED(@RELPTR),    /* DUMMY RELOCATE SECTION..........*/
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 DATA  CHAR(255)       ;

  DCL 1 T1      BASED(@PTR(01)),   /* DATA TYPE=  1-OLD/OR ONLY DSNAME*/
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 OLD_DSNAME    CHAR(44);

  DCL 1 T2      BASED(@PTR(02)),   /* DATA TYPE=  2-NEW DSNAME        */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 NEW_DSNAME    CHAR(44);

  DCL 1 T3      BASED(@PTR(03)),   /* DATA TYPE=  3-ACCESS AUTH RQED  */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 ACCESS_REQUESTED   BIT(8);

  DCL 1 T4      BASED(@PTR(04)),   /* DATA TYPE=  4-ACCESS AUTH ALLOWD*/
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 ACCESS_ALLOWED     BIT(8);

  DCL 1 T5      BASED(@PTR(05)),   /* DATA TYPE=  5-DATA SET LEVEL    */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 DSNLEVEL           BIT(8);

  DCL 1 T6      BASED(@PTR(06)),   /* DATA TYPE=  6-RACF CMD DATA     */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 CMD_DATA      CHAR(255);

  DCL 1 T7      BASED(@PTR(07)),   /* DATA TYPE=  7-INSTALL DATA      */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 INSTALL_DATA  CHAR(64);

  DCL 1 T8      BASED(@PTR(08)),   /* DATA TYPE=  8-USER NAME         */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 USER_NAME     CHAR(20);

  DCL 1 T9      BASED(@PTR(09)),   /* DATA TYPE=  9-RESOURCE NAME     */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 RESOURCE_NAME CHAR(255);

  DCL 1 T10     BASED(@PTR(10)),   /* DATA TYPE= 10-FLGS/VOLSER       */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 FLAGS(0:7)    BIT(1),
        2 VOLSER        CHAR(8);

  DCL 1 T11     BASED(@PTR(11)),   /* DATA TYPE= 11-FLGS/VOLSER       */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 FLAGS(0:7)    BIT(1),
        2 VOLSER        CHAR(8);

  DCL 1 T12     BASED(@PTR(12)),   /* DATA TYPE= 12-ID NAMES(PERMIT)  */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 ENT(27),
          5 FLAGS(0:7)  BIT(1),
          5 ID          CHAR(8);

  DCL 1 T13     BASED(@PTR(13)),   /* DATA TYPE= 13-PERMIT FROM RESNME*/
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 FROM_RESOURCE   CHAR(44);

  DCL 1 T14     BASED(@PTR(14)),   /* DATA TYPE= 14-PERMIT VOL/FVOL   */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 VOLUME          CHAR(6),
        2 FVOLUME         CHAR(6);

  DCL 1 T15     BASED(@PTR(15)),   /* DATA TYPE= 15-VOLSER            */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 VOLSER          CHAR(6);

  DCL 1 T16     BASED(@PTR(16)),   /* DATA TYPE= 16-OLD VOLSER        */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 OLDVOL          CHAR(6);

1 DCL 1 T17     BASED(@PTR(17)),   /* DATA TYPE= 17-CLASS NAME        */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 CLASS_NAME      CHAR(8);

  DCL 1 T18     BASED(@PTR(18)),   /* DATA TYPE= 18-MENTITY           */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 MENTITY         CHAR(44);

  DCL 1 T19     BASED(@PTR(19)),   /* DATA TYPE= 19-MODEL VOLSER      */
        2 TYPE  BIT(8),
        2 LEN   BIT(8),
        2 MVOLSER         CHAR(6);


  DCL 1 ACCESS,
        2 FLAGS(5) BIT(8) INIT('10000000'B,'01000000'B,
                               '00100000'B,'00010000'B,'00001000'B),
        2 NAME(5) CHAR(8) VAR
                          INIT('ALTER',    'CONTROL',
                               'UPDATE',   'READ',     'NONE') ;

  DCL S81OPT(8) CHAR(12) VAR INIT(
      'INITSTAT=N','DSNSTAT=N','ICHRIX01','ICHRCX01','ICHRDX01',
      'ICHRIX02','ICHRDX02','');


  DCL S81OP2(8) CHAR(12) VAR INIT(
      'TAPESTAT=N','DASDSTAT=N','TERMSTAT=N','ICHCNX00',
      'ICHCCX00','','','');

  DCL S81OP3(8) CHAR(12) VAR INIT(
      'TAPEPROT=Y','DUPDSN=N','DASDPROT=Y','',
      '', '', '', ''             );

  DCL S81AOP(8) CHAR(12) VAR INIT(
      'USER','GROUP','DATASET','TAPEVOL',
      'DASDVOL','TERMINAL','CMDVIOL','SPECIAL-USR');

  DCL S81TMO(8) CHAR(12) VAR INIT(
      'TERM_AUTH=Y','TUACC=NONE','','',
      '','','','');

1 DCL 1 ADDSD   BASED(@PTR(06)),  /* ADDSD COMMAND TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=8                     */
        2 I_FLAGS       BIT(16),
        2 DSNAME        CHAR(44),
        2 UNIT          CHAR(8),
        2 UACC          BIT(8),
        2 OWNER         CHAR(8),
        2 AUDIT         BIT(8),
        2 LEVEL         BIT(8),
        2 P_FLAGS       BIT(8);


  DCL 1 ADDGROUP BASED(@PTR(06)), /* ADDGROUP CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=9                     */
        2 I_FLAGS       BIT(8),
        2 GROUP         CHAR(8),
        2 SUPGROUP      CHAR(8),
        2 OWNER         CHAR(8);

  DCL 1 ADDUSER  BASED(@PTR(06)), /* ADDUSER  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(32),  /*       CODE=10                    */
        2 I_FLAGS       BIT(32),
        2 RSVD1         CHAR(4),
        2 V_FLAG        BIT(8),
        2 USERID        CHAR(8),
        2 DFLTGRP       CHAR(8),
        2 RSVD2         CHAR(8),
        2 AUTH          BIT(8),
        2 UACC          BIT(8),
        2 OWNER         CHAR(8),
        2 CLAUTH        BIT(16),
        2 I_CLAUTH      BIT(16);

1 DCL 1 ALTDSD   BASED(@PTR(06)), /* ALTDSD   CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=11                    */
        2 I_FLAGS       BIT(16),
        2 E_FLAGS       BIT(16),
        2 DSNAME        CHAR(44),
        2 OWNER         CHAR(8),
        2 UACC          BIT(8),
        2 AUDIT         BIT(8),
        2 LEVEL         BIT(8),
        2 GLOBALAUDIT   BIT(8),
        2 VOLUME        CHAR(6),
        2 P_FLAGS       BIT(8),
        2 UNIT          CHAR(8);

  DCL 1 ALTGROUP BASED(@PTR(06)), /* ALTGROUP CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=12                    */
        2 I_FLAGS       BIT(8),
        2 V_FLAGS       BIT(8),
        2 GROUP         CHAR(8),
        2 SUPGROUP      CHAR(8),
        2 OWNER         CHAR(8),
        2 E_FLAGS       BIT(8);

  DCL 1 ALTUSER  BASED(@PTR(06)), /* ALTUSER  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(32),  /*       CODE=13                    */
        2 I_FLAGS       BIT(32),
        2 E_FLAGS       BIT(32),
        2 V_FLAGS       BIT(8),
        2 USERID        CHAR(8),
        2 DFLTGRP       CHAR(8),
        2 GROUP         CHAR(8),
        2 AUTH          BIT(8),
        2 UACC          BIT(8),
        2 OWNER         CHAR(8),
        2 CLAUTH        BIT(16),
        2 I_CLAUTH      BIT(16);

1 DCL 1 CONNECT  BASED(@PTR(06)), /* CONNECT  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=14                    */
        2 I_FLAGS       BIT(16),
        2 USERID        CHAR(8),
        2 GROUP         CHAR(8),
        2 UACC          BIT(8),
        2 AUTH          BIT(8);

  DCL 1 DELDSD   BASED(@PTR(06)), /* DELDSD   CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=15                    */
        2 I_FLAGS       BIT(8),
        2 DSNAME        CHAR(44),
        2 VOLUME        CHAR(6),
        2 P_FLAGS       BIT(8);

  DCL 1 DELGROUP BASED(@PTR(06)), /* DELGROUP CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 GROUP         CHAR(8);  /*       CODE=16                    */

  DCL 1 DELUSER  BASED(@PTR(06)), /* DELUSER  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 USER          CHAR(8);  /*       CODE=17                    */

  DCL 1 PASSWORD BASED(@PTR(06)), /* PASSWORD CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=18                    */
        2 I_FLAGS       BIT(8),
        2 E_FLAGS       BIT(8),
        2 INTERVAL      BIT(32),
        2 USER          CHAR(8);

  DCL 1 PERMIT   BASED(@PTR(06)), /* PERMIT   CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=19                    */
        2 I_FLAGS       BIT(16),
        2 E_FLAGS       BIT(16),
        2 CLASS         BIT(16),
        2 ACCESS        BIT(8),
        2 FCLASS        BIT(16);

1 DCL 1 RALTER   BASED(@PTR(06)), /* RALTER   CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=20                    */
        2 I_FLAGS       BIT(16),
        2 C_FLAGS       BIT(16),
        2 OWNER         CHAR(8),
        2 UACC          BIT(8),
        2 LEVEL         BIT(8),
        2 AUDIT         BIT(8),
        2 GLOBALAUDIT   BIT(8);

  DCL 1 RDEFINE  BASED(@PTR(06)), /* RDEFINE  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(16),  /*       CODE=21                    */
        2 I_FLAGS       BIT(16),
        2 C_FLAGS       BIT(16),
        2 OWNER         CHAR(8),
        2 UACC          BIT(8),
        2 LEVEL         BIT(8),
        2 AUDIT         BIT(8),
        2 RSVD          BIT(8);

  DCL 1 RDELETE  BASED(@PTR(06)), /* RDELETE  CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 C_FLAGS       BIT(16);  /*       CODE=22                    */

1 DCL 1 REMOVE   BASED(@PTR(06)), /* REMOVE   CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=22                    */
        2 I_FLAGS       BIT(8),
        2 USER          CHAR(8),
        2 GROUP         CHAR(8),
        2 OWNER         CHAR(8);

  DCL 1 SETROPTS BASED(@PTR(06)), /* SETROPTS CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(24),  /*       CODE=23                    */
        2 I_FLAGS       BIT(24),
        2 STATISTICS    BIT(16),
        2 AUDIT         BIT(16),
        2 INTERVAL      BIT(8),
        2 TERMINAL      BIT(8),
        2 A_STATS       BIT(8),
        2 A_AUDIT       BIT(16),
        2 A_MISC        BIT(16),
        2 MAX_PW_INTVL  BIT(8);

  DCL 1 RVARY    BASED(@PTR(06)), /* RVARY    CMD  TYPE 6 OVERLAY     */
        2 CMD_TY        BIT(8),
        2 CMD_LEN       BIT(8),
        2 FLAGS         BIT(8),   /*       CODE=24                    */
        2 V_FLAGS       BIT(8);

1/*     SETUP ERROR HANDLING  AND PROGRAM CLEANUP              */

     ON ERROR BEGIN;
       ON ERROR SYSTEM;
       PUT DATA(INREC,SMFREC00,SMFREC80,SMFREC81);
              END;



     ON FINISH BEGIN ;
        PUT FILE(PRINT) SKIP(2) EDIT
            (INREC,  ' RECORDS READ IN',
             REC00     ,' TYPE 00  RECORDS FOUND (SYSTEM IPL)',
             REC81     ,' TYPE 81  RECORDS FOUND (RACF INITALIZE)',
             REC130    ,' TYPE 130 RECORDS FOUND (FCI RACF EN/DISABLE)',
             REC80     ,' TYPE 80  RECORDS FOUND (RACF EVENT)',
             #FLUSHED  ,' TYPE 80  RECORDS NOT SELECTED',
             REC80_DONE,' TYPE 80  RECORDS SELECTED')
            ((7)(P'Z,ZZZ,ZZ9',A,SKIP));
        CLOSE FILE (INPUT),
              FILE (OUTPUT),
              FILE (PRINT) ;
        IF DOCLIST THEN CLOSE FILE(CLIST);
     END ;

     ON ENDFILE(INPUT)   EOFIN='1'B;

     ON ENDPAGE(PRINT) BEGIN;
        IF PAGENO > 0 THEN PUT FILE(PRINT) PAGE;

        PAGENO = PAGENO + 1;
        PUT FILE(PRINT)      EDIT
           (H_MAIN1)        (A)
           (RPTHEAD)        (SKIP,A)
           (H_BLANK)        (SKIP,A);

        IF TITLE1 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE1)     (SKIP,A);

        IF TITLE2 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE2)     (SKIP,A);
     END;

1    OPEN FILE (INPUT)  INPUT,
          FILE (OUTPUT) OUTPUT,
          FILE (PRINT) PRINT LINESIZE(131);

     INDATE = DATE;
     RUNDATE = C_MM ×× C_DD ×× C_YY;

     RUNTIME = SUBSTR(TIME,1,6);
     PAGENO = 0;

     ON ENDFILE(SYSIN) GOTO START;

     GET FILE(SYSIN) DATA(HEX,OFFSET,DOCLIST);

  START: SUBTITLE = '';
     SUBTITLE = 'SELECTION: ';
     IF NOCMDS THEN SUBTITLE = SUBTITLE ×× ' NOCMDS ';
               ELSE SUBTITLE = SUBTITLE ×× ' CMDS ';

     IF DOACCESS THEN SUBTITLE = SUBTITLE ×× ' ACCESS=ALL ';
                 ELSE SUBTITLE = SUBTITLE ×× ' ACCESS=VIOL ';

     IF DOCLIST THEN SUBTITLE = SUBTITLE ×× ' CLIST ';
                ELSE SUBTITLE = SUBTITLE ×× ' NOCLIST ';

     IF DEBUG   THEN SUBTITLE = SUBTITLE ×× ' DEBUG ';
                ELSE SUBTITLE = SUBTITLE ×× ' NODEBUG ';

     IF HEX  THEN
       IF OFFSET < 0 × OFFSET > 4088 THEN HEX = '0'B;

     IF HEX THEN
       DO;
         PACK5 = OFFSET;
         SUBTITLE = SUBTITLE ×× ' HEXDISP, OFFSET=' ×× PACK5 ×× ' ';
         SUBSTR(H_DETAIL1,115,17)='HEX OFFSET=' ×× PACK5;
         SUBSTR(H_DETAIL2,115,17)='........ ........';
         OFFSET = OFFSET + 1;
       END;

     RPTHEAD = '';
     I = (LENGTH(RPTHEAD) - LENGTH(SUBTITLE))/2;
     SUBSTR(RPTHEAD,I+1,LENGTH(SUBTITLE)) = SUBTITLE;

     PUT SKIP DATA(HEX,OFFSET,DOCLIST);
     PUT SKIP EDIT(SUBTITLE) (A);



1/* MAIN LOOP....READ IN SMF TYPE80 RECORDS AND PROCESS              */

     TITLE1 = H_DETAIL1;
     TITLE2 = H_DETAIL2;
     SIGNAL ENDPAGE(PRINT) ;
     IF DOCLIST THEN OPEN FILE(CLIST) OUTPUT;

     EOFIN = '0'B;
     READ FILE(INPUT) SET(PTR);

     DO WHILE(^EOFIN);     /*  MAIN LOOP...READ AND PROCESS RECORDS */

       INREC = INREC + 1;

       IF INRZER = '00000010'B &
          INRREC = TYPE80      THEN
          DO;
            REC80 = REC80 + 1;
            IF SELECTED
             THEN
                CALL RECTY80;
             ELSE
                #FLUSHED = #FLUSHED + 1;
          END;
       IF INRZER = '00000010'B &
          INRREC = TYPE81      THEN
          DO;
            REC81 = REC81 + 1;
            CALL RECTY81;
          END;
       IF INRZER = '00000010'B &
          INRREC = TYPE00      THEN
          DO;
            REC00 = REC00 + 1;
            CALL RECTY00;
          END;
       IF INRZER = '00000010'B &
          INRREC = TYPE130     THEN
          DO;
            REC130= REC130+ 1;
            CALL RECTY130;
          END;
       READ FILE(INPUT) SET(PTR);
     END;

     CALL SUMMARY;    /* REPORT TOTALS..MINMAX..AVGS */

     STOP;

 /*   END OF MAIN PROGRAM            */
1/*------------------------------------------------------------*/
 RECTY80: PROC ;            /* SMF REC TYPE80 RACF ACTIVITY     */
 /*------------------------------------------------------------*/
     REC80_DONE = REC80_DONE + 1;
     P_JOBNAME,JOBNAME = SMF80JBN;    /* COPY JOBNAME */


     RCD_DATE = SMF80DTE;
     RCD_TIME = CNVTIME(SMF80TME);    /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;
     UNSPEC(EVENT_#) = '00000000'B ×× SMF80EVT; /* GET EVENT TYPE  */
     P_RACF_EVENT,RACF_EVENT = EVENT_NAME(EVENT_#);  /* SET TO TEXT*/

     IF SMF80DES(0) THEN VIOLATION = '*';
                    ELSE VIOLATION = '';
     P_VIOLATION = VIOLATION;

     P_RACF_USER,RACF_USER   = SMF80USR;   /* COPY RACF USER ID   */
     P_RACF_GROUP,RACF_GROUP = SMF80GRP;   /* COPY RACF GROUP NAME*/

     @HEXPTR = ADDR(INCONV(73));           /* CONVERT TERM ADDR FROM */
     HEXIN = HEXBASED;
     CALL HEXCC(HEXIN,HEXOUT);             /* IEFUJI SMF USER PARMS  */
     TERM_ADDR = SUBSTR(HEXOUT,1,4);       /* TO PRINTABLE EBCDIC    */
     IF TERM_ADDR = '4040' THEN TERM_ADDR='';
     IF TERM_ADDR = '0000' THEN TERM_ADDR='';
     P_TERM_ADDR = TERM_ADDR;

     USER_ATTR = '';
     IF SMF80ATH(0) THEN USER_ATTR(1) = 'N'; /* NORMAL AUTH CHK     */
     IF SMF80ATH(1) THEN USER_ATTR(2) = 'S'; /* SPECIAL             */
     IF SMF80ATH(2) THEN USER_ATTR(3) = 'O'; /* OPERATIONS          */
     IF SMF80ATH(3) THEN USER_ATTR(4) = 'A'; /* AUDITOR             */
     IF SMF80ATH(4) THEN USER_ATTR(5) = 'I'; /* INSTALLATION EXIT   */
     P_USER_ATTR = USER_ATTR;

1    VREASON = '';                           /* ESTABLISH LOG REASON*/
     IF SMF80REA(0) THEN
       VREASON = VREASON ×× ',CHG CLS=AUDIT';
     IF SMF80REA(1) THEN
       VREASON = VREASON ×× ',USR AUDIT';
     IF SMF80REA(2) THEN
       VREASON = VREASON ×× ',S-USR AUDIT';
     IF SMF80REA(3) THEN
       VREASON = VREASON ×× ',ACS AUDIT';
     IF SMF80REA(4) THEN
       VREASON = VREASON ×× ',RACINIT FAIL';
     IF SMF80REA(5) THEN
       VREASON = VREASON ×× ',CMD AUDIT';
     IF SMF80REA(6) THEN
       VREASON = VREASON ×× ',CMD VIOLATION';
     IF SMF80DES(1) THEN
       VREASON = VREASON ×× ',(USER NOT RACF DEFINED)';
     IF SUBSTR(VREASON,1,1) = ',' THEN
       VREASON = SUBSTR(VREASON,2);
     LOG_REASON,P_LOG_REASON = VREASON;

     IF HEX THEN
       DO;
         @HEXPTR = ADDR(INCONV(OFFSET));
         HEXIN = HEXBASED;
         CALL HEXCC(HEXIN,HEXOUT);
         P_HEX1 = HEXC(1);
         P_HEX2 = HEXC(2);
       END;

     PUT FILE(PRINT) SKIP EDIT     /* WRITE OUT DETAIL LINE   */
        (PDETAIL)    (A);

     CALL FIND_RELOCATE;           /* GO INDEX THE REL SECTS  */
     CALL PROC_EVENT(EVENT_#);     /* AND THEN PROCESS THE EVNT*/

     IF EVENT_# < 8 THEN CALL POST_MSG(','); /* SPLIT ON ','  */
                    ELSE CALL POST_MSG(' '); /* SPLIT ON ' '  */

     IF EVENT_# >= 8 & DOCLIST THEN CALL GEN_CLIST(' '); /*  CLIST */

     WRITE FILE(OUTPUT) FROM(OUTREC);

     RETURN ;
 END RECTY80;
1/*------------------------------------------------------------*/
 RECTY81: PROC ;            /* SMF REC TYPE81 RACF INITIALIZE   */
 /*------------------------------------------------------------*/

     DCL I  FIXED BIN(15,0),
         PINV   PIC'999';

     PDETAIL = '';                    /* INITIALIZE RECORD  */
     RCD_DATE = SMF81DTE;
     RCD_TIME = CNVTIME(SMF81TME);    /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;
     P_RACF_EVENT = 'RACF INITIALIZE';
     PDETAIL1='';
     P_LOG_REASON = 'RACF INITIALIZATION';
     DETAILV= 'RACFDSN=' ×× DEBLANK(SMF81RDS) ×× ',VOL=' ×× SMF81RVL;
     P_DETAIL  = DETAILV;

     PUT FILE(PRINT) SKIP EDIT (PDETAIL)    (A)
                               (H_BLANK)    (SKIP,A)
                               (PDETAIL1)   (A);

     DETAILV= 'UADSDSN=' ×× DEBLANK(SMF81UDS) ×× ',VOL=' ×× SMF81UVL;
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;

     PUT FILE(PRINT) SKIP EDIT (PDETAIL1)   (A);

     DETAILV = 'EXITS=(' ×× GET_OPTS(SMF81OPT,BZERO,BZERO,
               '11000001'B,S81OPT,',',8);       /* SELECT EXITS   */
     IF (SMF81OP2 & '00011000'B) ^= '00000000'B
       THEN
         DETAILV = DETAILV ×× ',' ×× GET_OPTS(SMF81OP2,BZERO,BZERO,
                   '11100111'B,S81OP2,',',8)    /* SELECT EXITS   */
                   ×× ')';
       ELSE
         DETAILV = DETAILV ×× ')';
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;
     PUT FILE(PRINT) SKIP EDIT (PDETAIL1) (A);

     DETAILV = 'OPT=(' ×× GET_OPTS(SMF81OPT,BZERO,BZERO,
               '00111111'B,S81OPT,',',8) ×× ')';
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;
     PUT FILE(PRINT) SKIP EDIT (PDETAIL1) (A);

     DETAILV = 'OPT2=(' ×× GET_OPTS(SMF81OP2,BZERO,BZERO,
               '00011111'B,S81OP2,',',8) ×× ')';
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;
     PUT FILE(PRINT) SKIP EDIT (PDETAIL1) (A);

     DETAILV = 'AUDIT=(' ×× GET_OPTS(SMF81AOP,BZERO,BZERO,
               BZERO,      S81AOP,',',8) ×× ')';
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;
     PUT FILE(PRINT) SKIP EDIT (PDETAIL1) (A);

     UNSPEC(I) = '00000000'B ×× SMF81PIV;
     PINV = I;
     DETAILV = 'TERMINAL=(' ×× GET_OPTS(SMF81TMO,BZERO,BZERO,
               BZERO,      S81TMO,',',8) ××
               '),INTERVAL=' ×× PINV;
     P_DETAIL  = '';
     P_DETAIL  = DETAILV;
     PUT FILE(PRINT) SKIP EDIT (PDETAIL1) (A)
                               (H_BLANK)  (SKIP,A);

     RETURN ;
 END RECTY81;
1/*------------------------------------------------------------*/
 RECTY130: PROC ;           /* FCI SWAPRACF ACTIVITY           */
 /*------------------------------------------------------------*/
     PDETAIL='';
     OUTREC='';
     P_JOBNAME,JOBNAME = SMF130JBN;   /* COPY JOBNAME */

     RCD_DATE = SMF130DTE;
     RCD_TIME = CNVTIME(SMF130TME);   /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;


     @HEXPTR = ADDR(INCONV(37));           /* CONVERT TERM ADDR FROM */
     HEXIN = HEXBASED;
     CALL HEXCC(HEXIN,HEXOUT);             /* IEFUJI SMF USER PARMS  */
     TERM_ADDR = SUBSTR(HEXOUT,1,4);       /* TO PRINTABLE EBCDIC    */
     IF TERM_ADDR = '4040' THEN TERM_ADDR='';
     IF TERM_ADDR = '0000' THEN TERM_ADDR='';
     P_TERM_ADDR = TERM_ADDR;

     P_RACF_EVENT,RACF_EVENT = '* SWAPRACF CMD *';


     VREASON = '';                           /* ESTABLISH LOG REASON*/
     IF SMF130OLD(0) THEN
       VREASON = VREASON ×× ',RACF WAS **DISABLED**';
     IF ^SMF130OLD(0) THEN
       VREASON = VREASON ×× ',RACF WAS ACTIVE';
     IF SMF130NEW(0) THEN
       VREASON = VREASON ×× ',RACF NOW **DISABLED**';
     IF ^SMF130NEW(0) THEN
       VREASON = VREASON ×× ',RACF NOW ACTIVE';
     IF LENGTH(VREASON) > 1 THEN
        VREASON = SUBSTR(VREASON,2);
     LOG_REASON,P_LOG_REASON = VREASON;

     PUT FILE(PRINT) SKIP EDIT     /* WRITE OUT DETAIL LINE   */
        (PDETAIL)    (A)
        (H_BLANK)    (A);

     WRITE FILE(OUTPUT) FROM(OUTREC);

     RETURN ;
 END RECTY130;
1/*------------------------------------------------------------*/
 RECTY00: PROC ;            /* SMF REC TYPE00 SYSTEM IPL        */
 /*------------------------------------------------------------*/


     PDETAIL = '';                    /* INITIALIZE RECORD  */
     RCD_DATE = SMF00DTE;
     RCD_TIME = CNVTIME(SMF00TME);    /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;
     P_RACF_EVENT = '***************';
     P_LOG_REASON = 'SYSTEM INITIAL PROGRAM LOAD  (IPL)';

     PUT FILE(PRINT) SKIP EDIT (PDETAIL)    (A);


     RETURN ;
 END RECTY00;
1/*----------------------------------------------------------*/
 /* INDEX THE RELOCATE BLOCK ADDRESSES                       */
 /*----------------------------------------------------------*/
   FIND_RELOCATE: PROC;

   DCL #RELOCATE FIXED BIN(15,0);
   DCL RELOCATE_INDEX  FIXED BIN(15,0);
   DCL REL_TYPE        FIXED BIN(15,0);
   DCL REL_LEN         FIXED BIN(15,0);
   DCL SECT_#   FIXED BIN(15,0) INIT(0);

   @PTR = NULL;                    /* INIT ALL RELOCATE PTRS     */
   RELLEN=0;                       /* INIT ALL LENGTH REGISTERS  */
   #RELOCATE       = SMF80CNT;     /* INIT COUNT OF REL SECTIONS */
   RELOCATE_INDEX  = SMF80REL+1;   /* INIT CHARS TO RELOCATE STRT*/


   DO  SECT_# = 1 TO #RELOCATE ;   /* LOOP OVER # OF REL SECTIONS    */

     @RELPTR = ADDR(INCONV(RELOCATE_INDEX));   /* GET ADDRSABILITY   */

     UNSPEC(REL_TYPE) = '00000000'B ×× @RELPTR -> RELOC.TYPE;
     UNSPEC(REL_LEN) = '00000000'B ×× @RELPTR -> RELOC.LEN;
                                               /* GET REL SECT TYPE  */

     @PTR(REL_TYPE) = @RELPTR;                 /* REMEMBER POINTER   */
     RELLEN(REL_TYPE) = REL_LEN;               /* REMEMBER LENGTH    */

     RELOCATE_INDEX = RELOCATE_INDEX + 2 + REL_LEN; /* BUMP POINTERS */
   END;

   RETURN ;

 END FIND_RELOCATE;
1/*----------------------------------------------------------*/
 /*  PROC EVENTS  DECODE RELOCATE SECTIONS                   */
 /*----------------------------------------------------------*/

 PROC_EVENT: PROC(EVNT#);

    DCL EVNT# FIXED BIN(15,0);
    DCL EVNT_TYPE(25) LABEL;

    CSTR = '';
    COMMENT='';                   /* NULL OUT FAILURE MESSAGE*/
    IF EVNT# >= 8 THEN
      COMMENT = CMD_COMMENT(SMF80EVQ); /* SET UP COMMENT FOR CMDS*/

    GOTO EVNT_TYPE(EVNT#);

  EVNT_TYPE( 1):  CALL GEN_TYPE01; /* JOB INIT/LOGON FAIL    */
    GOTO FIN;
  EVNT_TYPE( 2):  CALL GEN_TYPE02; /* RESOURCE ACCESS        */
    GOTO FIN;
  EVNT_TYPE( 3):  CALL GEN_TYPE03; /* END OF VOLUME          */
    GOTO FIN;
  EVNT_TYPE( 4):  CALL GEN_TYPE04; /* RENAME DATASET         */
    GOTO FIN;
  EVNT_TYPE( 5):  CALL GEN_TYPE05; /* SCR DS OR TAPE VOL     */
    GOTO FIN;
  EVNT_TYPE( 6):  CALL GEN_TYPE06; /* DEL 1 VOL OF MULTIVOL  */
    GOTO FIN;
  EVNT_TYPE( 7):  CALL GEN_TYPE07; /* DEF DS OR TAPE VOLUME  */
    GOTO FIN;
  EVNT_TYPE( 8):  CALL GEN_TYPE08; /* ADDSD    COMMAND       */
    GOTO FIN;
  EVNT_TYPE( 9):  CALL GEN_TYPE09; /* ADDGROUP COMMAND       */
    GOTO FIN;
  EVNT_TYPE(10):  CALL GEN_TYPE10; /* ADDUSER  COMMAND       */
    GOTO FIN;
  EVNT_TYPE(11):  CALL GEN_TYPE11; /* ALTDSD   COMMAND       */
    GOTO FIN;
  EVNT_TYPE(12):  CALL GEN_TYPE12; /* ALTGROUP COMMAND       */
    GOTO FIN;
  EVNT_TYPE(13):  CALL GEN_TYPE13; /* ALTUSER  COMMAND       */
    GOTO FIN;
  EVNT_TYPE(14):  CALL GEN_TYPE14; /* CONNECT  COMMAND       */
    GOTO FIN;
  EVNT_TYPE(15):  CALL GEN_TYPE15; /* DELDSD   COMMAND       */
    GOTO FIN;
  EVNT_TYPE(16):  CALL GEN_TYPE16; /* DELGROUP COMMAND       */
    GOTO FIN;
  EVNT_TYPE(17):  CALL GEN_TYPE17; /* DELUSER  COMMAND       */
    GOTO FIN;
  EVNT_TYPE(18):  CALL GEN_TYPE18; /* PASSWORD COMMAND       */
    GOTO FIN;
  EVNT_TYPE(19):  CALL GEN_TYPE19; /* PERMIT COMMAND         */
    GOTO FIN;
  EVNT_TYPE(20):  CALL GEN_TYPE20; /* RALTER COMMAND         */
    GOTO FIN;
  EVNT_TYPE(21):  CALL GEN_TYPE21; /* RDEFINE COMMAND        */
    GOTO FIN;
  EVNT_TYPE(22):  CALL GEN_TYPE22; /* RDELETE COMMAND        */
    GOTO FIN;
  EVNT_TYPE(23):  CALL GEN_TYPE23; /* REMOVE COMMAND         */
    GOTO FIN;
  EVNT_TYPE(24):  CALL GEN_TYPE24; /* SETROPTS COMMAND       */
    GOTO FIN;
  EVNT_TYPE(25):  CALL GEN_TYPE25;  /* RVARY   COMMAND       */

  FIN:;           /* END OF PROC_EVENT                       */

     IF DEBUG THEN
    PUT SKIP DATA(EVNT#,CSTR);
   RETURN;
 END PROC_EVENT;
1/*----------------------------------------------------------*/
 /*  JOB INIT/LOGON       EVENT TYPE 1                       */
 /*----------------------------------------------------------*/

  GEN_TYPE01: PROC;

    CSTR = 'REASON=INVALID ' ×× INIT_FAIL_MSG(SMF80EVQ);


    RETURN;
  END GEN_TYPE01;
1/*----------------------------------------------------------*/
 /*  RESOURCE ACCESS      EVENT TYPE 2                       */
 /*----------------------------------------------------------*/

  GEN_TYPE02: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(03) ^= NULL THEN
       DO;
         DO I=1 TO 5;
           IF ACCESS.FLAGS(I) = T3.ACCESS_REQUESTED THEN
              CSTR = CSTR ×× ',ACCESS=' ×× ACCESS.NAME(I);
         END;
       END;
     IF @PTR(04) ^= NULL THEN
       DO;
         DO I=1 TO 5;
           IF ACCESS.FLAGS(I) = T4.ACCESS_ALLOWED THEN
              CSTR = CSTR ×× ',ALLOWED=' ×× ACCESS.NAME(I);
         END;
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(16) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',OLDVOL=' ×× SUBSTR(T16.OLDVOL,1,RELLEN(16));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     RETURN;

  END GEN_TYPE02;
1/*----------------------------------------------------------*/
 /*  END OF VOLUME        EVENT TYPE 3                       */
 /*----------------------------------------------------------*/

  GEN_TYPE03: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(04) ^= NULL THEN
       DO;
         DO I=1 TO 5;
           IF ACCESS.FLAGS(I) = T4.ACCESS_ALLOWED THEN
              CSTR = CSTR ×× ',ALLOWED=' ×× ACCESS.NAME(I);
         END;
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(16) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',OLDVOL=' ×× SUBSTR(T16.OLDVOL,1,RELLEN(16));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     COMMENT = COMMENT ×× TYPE3_COMMENT(SMF80EVQ);

     RETURN;

  END GEN_TYPE03;
1/*----------------------------------------------------------*/
 /*  RENAME DATASET       EVENT TYPE 4                       */
 /*----------------------------------------------------------*/

  GEN_TYPE04: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(02) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',NEWNAME=' ××
                   SUBSTR(T2.NEW_DSNAME,1,RELLEN(2));
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     COMMENT = COMMENT ×× TYPE4_COMMENT(SMF80EVQ);

     RETURN;

  END GEN_TYPE04;
1/*----------------------------------------------------------*/
 /*  SCRATCH DSN/TAPEVOL  EVENT TYPE 5                       */
 /*----------------------------------------------------------*/

  GEN_TYPE05: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     COMMENT = COMMENT ×× TYPE5_COMMENT(SMF80EVQ);

     RETURN;

  END GEN_TYPE05;
1/*----------------------------------------------------------*/
 /*  DEL 1 VOL/MULTIVOL   EVENT TYPE 6                       */
 /*----------------------------------------------------------*/

  GEN_TYPE06: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     RETURN;

  END GEN_TYPE06;
1/*----------------------------------------------------------*/
 /*  DEFINE DATASET/TAPEVOL EVENT TYPE 7                     */
 /*----------------------------------------------------------*/

  GEN_TYPE07: PROC;

     IF @PTR(01) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',DSN=' ××
                   SUBSTR(T1.OLD_DSNAME,1,RELLEN(1));
       END;
     IF @PTR(15) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',VOL=' ×× SUBSTR(T15.VOLSER,1,RELLEN(15));
       END;
     IF @PTR(16) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',OLDVOL=' ×× SUBSTR(T16.OLDVOL,1,RELLEN(16));
       END;
     IF @PTR(17) ^= NULL THEN
       DO;
         CSTR = CSTR ××
                ',CLASS=' ×× SUBSTR(T17.CLASS_NAME,1,RELLEN(17));
       END;
     IF @PTR(18) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',MODEL-DSN=' ××
                   SUBSTR(T18.MENTITY,1,RELLEN(18));
       END;
     IF @PTR(19) ^= NULL THEN
       DO;
         CSTR = CSTR ×× ',MODEL-VOL=' ××
                SUBSTR(T19.MVOLSER,1,RELLEN(19));
       END;

     IF SUBSTR(CSTR,1,1) = ',' THEN CSTR=SUBSTR(CSTR,2);

     COMMENT = COMMENT ×× TYPE5_COMMENT(SMF80EVQ);

     RETURN;

  END GEN_TYPE07;
1/*----------------------------------------------------------*/
 /*  ADDSD COMMAND        EVENT TYPE 8                       */
 /*----------------------------------------------------------*/

 GEN_TYPE08: PROC;
    DCL SAVEVOL  CHAR(6) INIT(' ');

    CSTR = CMD_NAME(08)   ×× ' ''' ××     /* PUT CMD/DSNAME  */
           DEBLANK(ADDSD.DSNAME) ×× ''' ';

    CSTR = CSTR ×× GET_OPTS(ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                   '1111100111111111'B,ADDSD_KEYWDS,' ',9)
                ×× ' ';

    CSTR = CSTR ×× KEYWORD_BIT(3,ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                   ADDSD_KEYWDS,ADDSD.UACC,UACC_KEYWDS, ' ');

    IF @PTR(10) ^= NULL THEN
      DO;
        SAVEVOL = SUBSTR(T10.VOLSER,1,RELLEN(10));

        CSTR = CSTR ×× KEYWORD_STR(1,ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                       ADDSD_KEYWDS,SAVEVOL,' ');
      END;

    CSTR = CSTR ×× KEYWORD_STR(2,ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                   ADDSD_KEYWDS,ADDSD.UNIT,' ');

    CSTR = CSTR ×× KEYWORD_STR(4,ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                   ADDSD_KEYWDS,ADDSD.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_BIT(5,ADDSD.FLAGS,ADDSD.I_FLAGS,BZERO,
                   ADDSD_KEYWDS,ADDSD.AUDIT,AUDIT_KEYWDS,' ');

    RETURN;
 END GEN_TYPE08;
1/*----------------------------------------------------------*/
 /*  ADDGROUP COMMAND     EVENT TYPE 9                       */
 /*----------------------------------------------------------*/

 GEN_TYPE09: PROC;

    CSTR = CMD_NAME(09)   ×× ' (' ××     /* PUT CMD/GROUP   */
           DEBLANK(ADDGROUP.GROUP) ×× ') ';

    CSTR = CSTR ×× KEYWORD_STR(2,ADDGROUP.FLAGS,ADDGROUP.I_FLAGS,BZERO,
                   GROUP_KEYWDS,ADDGROUP.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_STR(1,ADDGROUP.FLAGS,ADDGROUP.I_FLAGS,BZERO,
                   GROUP_KEYWDS,ADDGROUP.SUPGROUP,' ');

    CSTR = CSTR ×× GET_OPTS(ADDGROUP.FLAGS,ADDGROUP.I_FLAGS,BZERO,
                   '11001111'B,
                   GROUP_KEYWDS,' ',4); /* SELECT KEYWORDS */

    RETURN;
 END GEN_TYPE09;
1/*----------------------------------------------------------*/
 /*  ADDUSER COMMAND      EVENT TYPE 10                      */
 /*----------------------------------------------------------*/

 GEN_TYPE10: PROC;
    DCL SAVENAME CHAR(20)  INIT(' ');

    CSTR = CMD_NAME(10)   ×× ' (' ××     /* PUT CMD/USERID  */
           DEBLANK(ADDUSER.USERID) ×× ') ';

    CSTR = CSTR ×× KEYWORD_STR(1,ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,ADDUSER.DFLTGRP,' ');

    CSTR = CSTR ×× KEYWORD_BIT(6,ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,ADDUSER.AUTH,GRPAUTH_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(18,ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,ADDUSER.CLAUTH,CLAUTH_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(10,ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,ADDUSER.UACC,UACC_KEYWDS, ' ');

    IF @PTR(08) ^= NULL THEN
      DO;
        SAVENAME = SUBSTR(T8.USER_NAME,1,RELLEN(8));

        CSTR = CSTR ×× KEYWORD_STR(5,ADDUSER.FLAGS,
                   ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,SAVENAME,' ');
      END;

    CSTR = CSTR ×× KEYWORD_STR(13,ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   USER_KEYWDS,ADDUSER.OWNER,' ');

    CSTR = CSTR ×× GET_OPTS(ADDUSER.FLAGS,ADDUSER.I_FLAGS,BZERO,
                   '110011100100100001000001'B,
                   USER_KEYWDS,' ',24);     /* SELECT KEYWORDS */

    IF VIOLATION ^= ' ' THEN
      COMMENT = COMMENT ×× ',REASON=(' ××
                AUTH_FAIL(ADDUSER.V_FLAG,USER_VAUTH,',',3) ×× ')';

    RETURN;
 END GEN_TYPE10;
1/*----------------------------------------------------------*/
 /*  ALTDSD  COMMAND      EVENT TYPE 11                      */
 /*----------------------------------------------------------*/

 GEN_TYPE11: PROC;

    DCL SAVEVOL1 CHAR(6) INIT(' ');
    DCL SAVEVOL2 CHAR(6) INIT(' ');
    DCL SAVEBOTH CHAR(13) INIT(' ');

    CSTR = CMD_NAME(11)   ×× ' ''' ××     /* PUT CMD/DSNAME  */
           DEBLANK(ALTDSD.DSNAME) ×× ''' ';

    CSTR = CSTR ×× GET_OPTS(ALTDSD.FLAGS,ALTDSD.I_FLAGS,ALTDSD.E_FLAGS,
                   '1111110011111111'B,ALTDSD_KEYWDS,' ',13)
                ×× ' ';

    CSTR = CSTR ×× KEYWORD_BIT(2,
                   ALTDSD.FLAGS,ALTDSD.I_FLAGS,ALTDSD.E_FLAGS,
                   ALTDSD_KEYWDS,ALTDSD.UACC,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_STR(1,
                   ALTDSD.FLAGS,ALTDSD.I_FLAGS,ALTDSD.E_FLAGS,
                   ALTDSD_KEYWDS,ALTDSD.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_BIT(3,
                   ALTDSD.FLAGS,ALTDSD.I_FLAGS,ALTDSD.E_FLAGS,
                   ALTDSD_KEYWDS,ALTDSD.AUDIT,AUDIT_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(9,
                   ALTDSD.FLAGS,ALTDSD.I_FLAGS,ALTDSD.E_FLAGS,
                   ALTDSD_KEYWDS,ALTDSD.GLOBALAUDIT,
                   AUDIT_KEYWDS,' ');

    IF @PTR(10) ^= NULL THEN
      DO;
        SAVEVOL1= SUBSTR(T10.VOLSER,1,RELLEN(10));
      END;

    IF @PTR(11) ^= NULL THEN
      DO;
        SAVEVOL2= SUBSTR(T11.VOLSER,1,RELLEN(11));
      END;

    CSTR = CSTR ×× KEYWORD_STR(5,ALTDSD.FLAGS,ALTDSD.I_FLAGS,
                   ALTDSD.E_FLAGS,ALTDSD_KEYWDS,SAVEVOL1,' ');

    CSTR = CSTR ×× KEYWORD_STR(6,ALTDSD.FLAGS,ALTDSD.I_FLAGS,
                   ALTDSD.E_FLAGS,ALTDSD_KEYWDS,SAVEVOL1,' ');

    IF SUBSTR(ALTDSD.FLAGS,13,1) THEN
      DO;
        SAVEBOTH = SUBSTR(T11.VOLSER,1,RELLEN(11)) ×× ',' ××
                   SUBSTR(T10.VOLSER,1,RELLEN(10));

        CSTR = CSTR ×× KEYWORD_STR(10,ALTDSD.FLAGS,ALTDSD.I_FLAGS,
                       ALTDSD.E_FLAGS,ALTDSD_KEYWDS,SAVEBOTH,' ');
      END;

    CSTR = CSTR ×× KEYWORD_STR(10,ALTDSD.FLAGS,ALTDSD.I_FLAGS,
                   ALTDSD.E_FLAGS,ALTDSD_KEYWDS,ALTDSD.VOLUME,' ');

    CSTR = CSTR ×× KEYWORD_STR(12,ALTDSD.FLAGS,ALTDSD.I_FLAGS,
                   ALTDSD.E_FLAGS,ALTDSD_KEYWDS,ALTDSD.UNIT,' ');
    RETURN;
 END GEN_TYPE11;
1/*----------------------------------------------------------*/
 /*  ALTGROUP COMMAND     EVENT TYPE 12                      */
 /*----------------------------------------------------------*/

 GEN_TYPE12: PROC;

    CSTR = CMD_NAME(12)   ×× ' ' ××     /* PUT CMD/GROUP   */
           DEBLANK(ALTGROUP.GROUP) ×× ' ';

    CSTR = CSTR ×× KEYWORD_STR(2,ALTGROUP.FLAGS,ALTGROUP.I_FLAGS,BZERO,
                   GROUP_KEYWDS,ALTGROUP.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_STR(1,ALTGROUP.FLAGS,ALTGROUP.I_FLAGS,BZERO,
                   GROUP_KEYWDS,ALTGROUP.SUPGROUP,' ');

    CSTR = CSTR ×× GET_OPTS(ALTGROUP.FLAGS,ALTGROUP.I_FLAGS,BZERO,
                   '11001111'B,
                   GROUP_KEYWDS,' ',4); /* SELECT KEYWORDS */
    RETURN;
 END GEN_TYPE12;
1/*----------------------------------------------------------*/
 /*  ALTUSER COMMAND      EVENT TYPE 13                      */
 /*----------------------------------------------------------*/

 GEN_TYPE13: PROC;
    DCL SAVENAME CHAR(20)  INIT(' ');

    CSTR = CMD_NAME(13)   ×× ' ' ××     /* PUT CMD/USERID  */
           DEBLANK(ALTUSER.USERID) ×× ' ';

    CSTR = CSTR ×× KEYWORD_STR(1,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.DFLTGRP,' ');

    CSTR = CSTR ×× KEYWORD_STR(2,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.GROUP  ,' ');

    CSTR = CSTR ×× KEYWORD_BIT(6,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.AUTH,GRPAUTH_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(18,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.CLAUTH,CLAUTH_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(10,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.UACC,UACC_KEYWDS, ' ');

    IF @PTR(08) ^= NULL THEN
      DO;
        SAVENAME = SUBSTR(T8.USER_NAME,1,RELLEN(8));

        CSTR = CSTR ×× KEYWORD_STR(5,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,SAVENAME,' ');
      END;

    CSTR = CSTR ×× KEYWORD_STR(13,
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   USER_KEYWDS,ALTUSER.OWNER,' ');

    CSTR = CSTR ×× GET_OPTS(
                   ALTUSER.FLAGS,ALTUSER.I_FLAGS,ALTUSER.E_FLAGS,
                   '1100111001001000010000000000'B,
                   USER_KEYWDS,' ',27);     /* SELECT KEYWORDS */

    IF VIOLATION ^= ' ' THEN
      COMMENT = COMMENT ×× ',REASON=(' ××
                AUTH_FAIL(ADDUSER.V_FLAG,USER_VAUTH,',',3) ×× ')';

    RETURN;
 END GEN_TYPE13;
1/*----------------------------------------------------------*/
 /*  CONNECT COMMAND      EVENT TYPE 14                      */
 /*----------------------------------------------------------*/

 GEN_TYPE14: PROC;
    DCL SAVENAME CHAR(20)  INIT(' ');

    CSTR = CMD_NAME(14)   ×× ' (' ××     /* PUT CMD/USERID  */
           DEBLANK(CONNECT.USERID) ×× ') ';

    CSTR = CSTR ×× KEYWORD_STR(1,CONNECT.FLAGS,CONNECT.I_FLAGS,BZERO,
                   CONNECT_KEYWDS,CONNECT.GROUP  ,' ');

    CSTR = CSTR ×× KEYWORD_BIT(3,CONNECT.FLAGS,CONNECT.I_FLAGS,BZERO,
                   CONNECT_KEYWDS,CONNECT.AUTH,GRPAUTH_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(2,CONNECT.FLAGS,CONNECT.I_FLAGS,BZERO,
                   CONNECT_KEYWDS,CONNECT.UACC,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× GET_OPTS(CONNECT.FLAGS,CONNECT.I_FLAGS,BZERO,
                   '1110000000000111'B,
                   CONNECT_KEYWDS,' ',13);  /* SELECT KEYWORDS */
    RETURN;
 END GEN_TYPE14;
1/*----------------------------------------------------------*/
 /*  DELDSD  COMMAND      EVENT TYPE 15                      */
 /*----------------------------------------------------------*/

 GEN_TYPE15: PROC;
    DCL TEMPDSN   CHAR(44) INIT(' ');
    TEMPDSN = DELDSD.DSNAME;
    UNSPEC(TEMPDSN) = UNSPEC(TEMPDSN) × UNSPEC((44)' ');
    CSTR = CMD_NAME(15)   ×× ' ''' ××    /* PUT CMD/DSNAME  */
           DEBLANK(TEMPDSN) ×× ''' ';

    CSTR = CSTR ×× KEYWORD_STR(3,DELDSD.FLAGS,DELDSD.I_FLAGS,BZERO,
                   DELDSD_KEYWDS,DELDSD.VOLUME   ,' ');

    CSTR = CSTR ×× GET_OPTS(DELDSD.FLAGS,DELDSD.I_FLAGS,BZERO,
                   '00100000'B,
                   DELDSD_KEYWDS,' ',3 );   /* SELECT KEYWORDS */
    RETURN;
 END GEN_TYPE15;
0/*----------------------------------------------------------*/
 /*  DELGROUP COMMAND     EVENT TYPE 16                      */
 /*----------------------------------------------------------*/

 GEN_TYPE16: PROC;
    DCL TEMPGRP   CHAR(8) INIT(' ');
    TEMPGRP = DELGROUP.GROUP;
    UNSPEC(TEMPGRP) = UNSPEC(TEMPGRP) × UNSPEC((8)' ');

    CSTR = CMD_NAME(16)   ×× ' (' ××    /* PUT CMD/USERID  */
           DEBLANK(TEMPGRP) ×× ') ';

    RETURN;
 END GEN_TYPE16;
0/*----------------------------------------------------------*/
 /*  DELUSER  COMMAND     EVENT TYPE 17                      */
 /*----------------------------------------------------------*/

 GEN_TYPE17: PROC;

    DCL TEMPUSER CHAR(8) INIT(' ');

    TEMPUSER = DELUSER.USER; /* MAKE SURE OF TRAINLING BLANKS */
    UNSPEC(TEMPUSER) = UNSPEC(TEMPUSER) × UNSPEC((8)' ');

    CSTR = CMD_NAME(17)   ×× ' (' ××    /* PUT CMD/USERID  */
           DEBLANK(TEMPUSER) ×× ') ';

    RETURN;
 END GEN_TYPE17;
1/*----------------------------------------------------------*/
 /*  PASSWORD COMMAND     EVENT TYPE 18                      */
 /*----------------------------------------------------------*/

 GEN_TYPE18: PROC;

    DCL  INTVL  PIC'999' INIT(0),
         INTCHR CHAR(3)  INIT('');

    INTVL = PASSWORD.INTERVAL;
    INTCHR= INTVL;

    CSTR = CMD_NAME(18)   ×× ' ';

    CSTR = CSTR ×× KEYWORD_STR(2,
                   PASSWORD.FLAGS,PASSWORD.I_FLAGS,PASSWORD.E_FLAGS,
                   PASSWORD_KEYWDS,PASSWORD.USER,' ');

    CSTR = CSTR ×× KEYWORD_STR(1,
                   PASSWORD.FLAGS,PASSWORD.I_FLAGS,PASSWORD.E_FLAGS,
                   PASSWORD_KEYWDS,INTCHR,' ');

    CSTR = CSTR ×× GET_OPTS(
                   PASSWORD.FLAGS,PASSWORD.I_FLAGS,PASSWORD.E_FLAGS,
                   '1101111111111111'B,
                   PASSWORD_KEYWDS,' ',3 ); /* SELECT KEYWORDS */
    RETURN;
 END GEN_TYPE18;
1/*----------------------------------------------------------*/
 /*  PERMIT  COMMAND      EVENT TYPE 19                      */
 /*----------------------------------------------------------*/

 GEN_TYPE19: PROC;
    DCL RESOURCE CHAR(255)  INIT(' ');
    DCL TEMPSTR  CHAR(255) VAR INIT('');
    DCL (I,J,K)  FIXED BIN(15,0);

    RESOURCE = SUBSTR(T9.RESOURCE_NAME,1,RELLEN(9));

    CSTR = CMD_NAME(19)   ×× ' ''' ××     /* PUT CMD/RESOURCE*/
           DEBLANK(RESOURCE) ×× ''' ';

    IF @PTR(12) ^= NULL THEN
      DO;                       /* PROCESS ID STRING          */
        DO I = 1 TO RELLEN(12)/7;   /* LOOP OVER ENTRIES      */

          IF T12.ENT(I).FLAGS(0)
             THEN TEMPSTR = TEMPSTR ×× '/*' ××
                            DEBLANK(T12.ENT(I).ID) ×× '*/ ';
             ELSE TEMPSTR = TEMPSTR ×× DEBLANK(T12.ENT(I).ID) ×× ' ';
        END;

      IF LENGTH(TEMPSTR) > 1
         THEN TEMPSTR=SUBSTR(TEMPSTR,1,LENGTH(TEMPSTR)-1);
      CSTR = CSTR ×× KEYWORD_VSTR(2,       /* DO ID(......)    */
                     PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                     PERMIT_KEYWDS,TEMPSTR,' ');
    END;

    CSTR = CSTR ×× KEYWORD_BIT(5,         /* DELETE(  )       */
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,PERMIT.ACCESS,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(3,         /* ACCESS(  )       */
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,PERMIT.ACCESS,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_BIT(1,          /* CLASS()  */
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,PERMIT.CLASS,CLASS_KEYWDS, ' ');

    IF @PTR(13) ^= NULL THEN
      DO;
        RESOURCE = '';
        RESOURCE = SUBSTR(T13.FROM_RESOURCE,1,RELLEN(13));
        CSTR = CSTR ×× KEYWORD_STR(6,
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,RESOURCE,' ');
      END;

    IF @PTR(14) ^= NULL THEN
      DO;
        CSTR = CSTR ×× KEYWORD_STR(7,
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,T14.VOLUME,' ');
        CSTR = CSTR ×× KEYWORD_STR(8,
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,T14.FVOLUME,' ');
      END;

    CSTR = CSTR ×× KEYWORD_BIT(6,          /* FCLASS()  */
                   PERMIT.FLAGS,PERMIT.I_FLAGS,PERMIT.E_FLAGS,
                   PERMIT_KEYWDS,PERMIT.FCLASS,CLASS_KEYWDS, ' ');


    RETURN;
 END GEN_TYPE19;
1/*----------------------------------------------------------*/
 /*  RALTER  COMMAND      EVENT TYPE 20                      */
 /*----------------------------------------------------------*/

 GEN_TYPE20: PROC;

    DCL SAVEVOL1 CHAR(6) INIT(' ');
    DCL SAVEVOL2 CHAR(6) INIT(' ');
    DCL RESOURCE CHAR(255) VAR INIT('');

    RESOURCE = SUBSTR(T9.RESOURCE_NAME,1,RELLEN(9));

    CSTR = CMD_NAME(20)   ×× ' ' ××
                   GET_OPTS(RALTER.C_FLAGS,BZERO,BZERO,
                   '1111000111111111'B,CLASS_KEYWDS,' ',8 )
                ×× '(' ×× RESOURCE ×× ') ';

    CSTR = CSTR ×× KEYWORD_BIT(3,
                   RALTER.FLAGS,RALTER.I_FLAGS,BZERO,
                   R_KEYWDS,RALTER.UACC,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_STR(2,
                   RALTER.FLAGS,RALTER.I_FLAGS,BZERO,
                   R_KEYWDS,RALTER.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_BIT(5,
                   RALTER.FLAGS,RALTER.I_FLAGS,BZERO,
                   R_KEYWDS,RALTER.AUDIT,AUDIT_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(6,
                   RALTER.FLAGS,RALTER.I_FLAGS,BZERO,
                   R_KEYWDS,RALTER.GLOBALAUDIT,
                   AUDIT_KEYWDS,' ');

    IF @PTR(10) ^= NULL THEN
      DO;
        SAVEVOL1= SUBSTR(T10.VOLSER,1,RELLEN(10));
      END;

    IF @PTR(11) ^= NULL THEN
      DO;
        SAVEVOL2= SUBSTR(T11.VOLSER,1,RELLEN(11));
      END;

    CSTR = CSTR ×× KEYWORD_STR(7,RALTER.FLAGS,RALTER.I_FLAGS,
                   BZERO,R_KEYWDS,SAVEVOL1,' ');

    CSTR = CSTR ×× KEYWORD_STR(8,RALTER.FLAGS,RALTER.I_FLAGS,
                   BZERO,R_KEYWDS,SAVEVOL2,' ');

    RETURN;
 END GEN_TYPE20;
1/*----------------------------------------------------------*/
 /*  RDEFINE COMMAND      EVENT TYPE 21                      */
 /*----------------------------------------------------------*/

 GEN_TYPE21: PROC;

    DCL RESOURCE CHAR(255) VAR INIT('');

    RESOURCE = SUBSTR(T9.RESOURCE_NAME,1,RELLEN(9));

    CSTR = CMD_NAME(21)   ×× ' ' ××
                   GET_OPTS(RDEFINE.C_FLAGS,BZERO,BZERO,
                   '1111000111111111'B,CLASS_KEYWDS,' ',8 )
                ×× '(' ×× RESOURCE ×× ') ';

    CSTR = CSTR ×× KEYWORD_BIT(3,
                   RDEFINE.FLAGS,RDEFINE.I_FLAGS,BZERO,
                   R_KEYWDS,RDEFINE.UACC,UACC_KEYWDS, ' ');

    CSTR = CSTR ×× KEYWORD_STR(2,
                   RDEFINE.FLAGS,RDEFINE.I_FLAGS,BZERO,
                   R_KEYWDS,RDEFINE.OWNER,' ');

    CSTR = CSTR ×× KEYWORD_BIT(5,
                   RDEFINE.FLAGS,RDEFINE.I_FLAGS,BZERO,
                   R_KEYWDS,RDEFINE.AUDIT,AUDIT_KEYWDS,' ');

    RETURN;
 END GEN_TYPE21;
1/*----------------------------------------------------------*/
 /*  RDELETE COMMAND      EVENT TYPE 22                      */
 /*----------------------------------------------------------*/

 GEN_TYPE22: PROC;

    DCL RESOURCE CHAR(255) VAR INIT('');

    RESOURCE = SUBSTR(T9.RESOURCE_NAME,1,RELLEN(9));

    CSTR = CMD_NAME(21)   ×× ' ' ××
                   GET_OPTS(RDEFINE.C_FLAGS,BZERO,BZERO,
                   '1111000111111111'B,CLASS_KEYWDS,' ',8 )
                ×× '(' ×× RESOURCE ×× ') ';

    RETURN;
 END GEN_TYPE22;
0/*----------------------------------------------------------*/
 /*  REMOVE  COMMAND      EVENT TYPE 23                      */
 /*----------------------------------------------------------*/

 GEN_TYPE23: PROC;

    CSTR = CMD_NAME(23)   ×× ' (' ××     /* PUT CMD/USERID  */
           DEBLANK(REMOVE.USER) ×× ') ';

    CSTR = CSTR ×× KEYWORD_STR(1,          /* GROUP(......)    */
                   REMOVE.FLAGS,REMOVE.I_FLAGS,BZERO,
                   REMOVE_KEYWDS,REMOVE.GROUP,' ');

    CSTR = CSTR ×× KEYWORD_STR(2,          /* OWNER(......)    */
                   REMOVE.FLAGS,REMOVE.I_FLAGS,BZERO,
                   REMOVE_KEYWDS,REMOVE.OWNER,' ');

    RETURN;
 END GEN_TYPE23;
1/*----------------------------------------------------------*/
 /*  SETROPTS COMMAND     EVENT TYPE 24                      */
 /*----------------------------------------------------------*/

 GEN_TYPE24: PROC;
    DCL TEMP   FIXED BIN(15,0),
        PINV   PIC'999',
        PINVC  CHAR(3);

    CSTR = CMD_NAME(24)   ×× ' ';

    CSTR = CSTR ×× KEYWORD_BIT(7,    /* STATISTICS(     )     */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,
                   SETROPTS.STATISTICS,CLASS_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(8,    /* NOSTATS(    )         */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,
                   SETROPTS.STATISTICS,CLASS_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(9,    /* AUDIT(      )         */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,
                   SETROPTS.AUDIT,CLASS_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(10,   /* NOAUDIT(    )         */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,
                   SETROPTS.AUDIT,CLASS_KEYWDS,' ');

    CSTR = CSTR ×× KEYWORD_BIT(11,   /* TERMINAL(   )         */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,
                   SETROPTS.TERMINAL,UACC_KEYWDS,' ');

    UNSPEC(TEMP) = '00000000'B ×× SETROPTS.INTERVAL;
    PINV = TEMP; PINVC=PINV;
    CSTR = CSTR ×× KEYWORD_STR(13,         /* INTERVAL(NNN)    */
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   SETROPTS_KEYWDS,PINVC,' ');

    CSTR = CSTR ×× GET_OPTS(
                   SETROPTS.FLAGS,SETROPTS.I_FLAGS,BZERO,
                   '000000111110100001111111'B,
                   SETROPTS_KEYWDS,' ',17); /* SELECT KEYWORDS */

    CSTR = CSTR ×× '/* RESULT: STATS(' ××
                   GET_OPTS(
                   SETROPTS.A_STATS,BZERO,BZERO,
                   BZERO,
                   SETR_STATS,     ' ',8 );    /* SELECT KEYWORDS */

    CSTR = CSTR ×× ') AUDIT('          ××
                   GET_OPTS(
                   SETROPTS.A_AUDIT,BZERO,BZERO,
                   BZERO,
                   SETR_AUDIT,     ' ',8 );    /* SELECT KEYWORDS */

    CSTR = CSTR ×× ') MISC('          ××
                   GET_OPTS(
                   SETROPTS.A_MISC,BZERO,BZERO,
                   BZERO,
                   SETR_MISC,      ' ',10) ××  /* SELECT KEYWORDS */
                   ') ';

    UNSPEC(TEMP) = '00000000'B ×× SETROPTS.MAX_PW_INTVL;
    PINV = TEMP;
    CSTR = CSTR ×× 'MAXINTERVAL=' ×× PINV ×× ' */';

    RETURN;
 END GEN_TYPE24;
1/*----------------------------------------------------------*/
 /*  RVARY   COMMAND      EVENT TYPE 25                      */
 /*----------------------------------------------------------*/

 GEN_TYPE25: PROC;

    CSTR = CMD_NAME(25)   ×× ' ';

    CSTR = CSTR ×× GET_OPTS(RVARY.FLAGS,BZERO,BZERO,
                   '00100000'B,
                   RVARY_KEYWDS,' ',2 );    /* SELECT KEYWORDS */

    IF SUBSTR(RVARY.FLAGS,3,1) THEN
      CSTR = CSTR ×× '(NOTAPE)';

    IF VIOLATION ^= ' ' THEN
      COMMENT = COMMENT ×× ',REASON=(' ××
                AUTH_FAIL(RVARY.V_FLAGS,RVARY_TEXT,',',2) ×× ')';

    RETURN;
 END GEN_TYPE25;
1/*------------------------------------------------------------*/
  POST_MSG: PROC(SEP);   /* SPLIT MULTILINE MSG FOR PRINTING   */
 /*------------------------------------------------------------*/

     DCL MSG   CHAR(80) VAR INIT('');
     DCL (CLEN,MLEN,CPTR,CEND,K,L) FIXED BIN(15,0);
     DCL SEP   CHAR(1);

     CLEN = LENGTH(CSTR);
     IF CLEN = 0 THEN RETURN;     /* SPLIT IF NOTHING TO PRINT */

     CPTR = 1;                    /* INDICATE START WITH FIRST */
                                  /* CHARACTER IN CSTR         */

     PUT FILE(PRINT) SKIP EDIT (H_BLANK) (A); /* SKIP A LINE   */

     IF CLEN <= 80 THEN
       DO;
         DETAIL1 = '';
         P_DETAIL = CSTR;
         PUT FILE(PRINT) SKIP EDIT
            (PDETAIL1)  (A);
       END;
      ELSE
       DO  WHILE(CPTR < CLEN);
         CEND = CPTR + 80 -1;    /* ESTABLISH TARGET CUTOFF POINT */
         CEND = MIN(CEND,CLEN);  /* MAKE SURE WE DONT OVERFLOW    */
         IF CEND < CLEN THEN
           DO;
             DO K = CEND TO CPTR BY -1 WHILE(SUBSTR(CSTR,K,1) ^= SEP);
             END;                /* FIND PRIOR DIVIDE POINT       */
             K = K+1;            /* BACKUP TO BLANK....           */
             MLEN = K - CPTR -1; /* GET LENGTH OF TARGET STRING   */
             MSG= SUBSTR(CSTR,CPTR,MLEN); /* MOVE STR TO ASSEMBLY AREA*/
             DETAIL1='';
             P_DETAIL = MSG ×× ' +';/* INDICATE CONTINUED         */
           END;
          ELSE
           DO;
             DETAIL1='';
             P_DETAIL=SUBSTR(CSTR,CPTR);  /* USE THE REST OF CSTR */
             MLEN=9999;                   /*INSURE LAST LOOP      */
           END;
         PUT FILE(PRINT) SKIP EDIT(PDETAIL1) (A);  /* WRITE THE LINE*/
         CPTR = CPTR + MLEN + 1; /* POINT TO NEXT CHARACTER AND   */
                                 /*   LOOP WITH THE DO            */
       END;

    IF LENGTH(COMMENT) > 0 THEN
      DO;
        DETAIL1='';
        P_DETAIL=COMMENT;
        PUT FILE(PRINT) SKIP EDIT(PDETAIL1) (A);
      END;

    IF CLEN > 0 THEN PUT FILE(PRINT) SKIP EDIT(H_BLANK) (A);

     RETURN;
  END POST_MSG;
1/*------------------------------------------------------------*/
  GEN_CLIST:PROC(SEP);   /* GENERATE CLIST FOR COMMANDS        */
 /*------------------------------------------------------------*/

     DCL MSG   CHAR(80) VAR INIT('');
     DCL (CLEN,MLEN,CPTR,CEND,K,L) FIXED BIN(15,0);
     DCL SEP   CHAR(1);
     CLEN = LENGTH(CSTR);
     IF CLEN = 0 THEN RETURN;     /* SPLIT IF NOTHING TO PRINT */

     IF SMF80EVQ ^= 0 THEN RETURN; /* NO UPDATE..NO CLIST NECESSARY*/

     CL_REC.BODY='';
     CL_REC.REC# = CL_REC.REC# + 1; /* BUMP CLIST COUNT         */
     CL_REC.SUBREC# = 0;            /* RESET CARD COUNTER       */

     CL_REC.BODY = '/* ' ×× P_RCD_DATE ×× ' ' ×× P_RCD_TIME ×× ' ' ××
                   P_JOBNAME ×× ' ' ×× P_RACF_USER ×× ' ' ××
                   P_RACF_GROUP ×× ' */ +';

     WRITE FILE(CLIST) FROM(CL_REC);


     CPTR = 1;                    /* INDICATE START WITH FIRST */
                                  /* CHARACTER IN CSTR         */

     IF CLEN <= 67 THEN
       DO;
         CL_REC.SUBREC# = CL_REC.SUBREC# + 1;
         CL_REC.BODY ='';
         CL_REC.BODY = '  ' ×× CSTR;
         WRITE FILE(CLIST) FROM(CL_REC);
       END;
      ELSE
       DO  WHILE(CPTR < CLEN);
         CEND = CPTR + 66;       /* ESTABLISH TARGET CUTOFF POINT */
         CEND = MIN(CEND,CLEN);  /* MAKE SURE WE DONT OVERFLOW    */
         IF CEND < CLEN THEN
           DO;
             DO K = CEND TO CPTR BY -1 WHILE(SUBSTR(CSTR,K,1) ^= SEP);
             END;                /* FIND PRIOR DIVIDE POINT       */
             K = K+1;            /* BACKUP TO BLANK....           */
             MLEN = K - CPTR -1; /* GET LENGTH OF TARGET STRING   */
             MSG= '  ' ××
                  SUBSTR(CSTR,CPTR,MLEN)  /* MOVE STR TO ASSEMBLY AREA*/
                  ×× ' +';          /* AND INDICATE THAT ITS CONTINUED*/
           END;
          ELSE
           DO;
             MSG= '  ' ××
                 SUBSTR(CSTR,CPTR);       /* USE THE REST OF CSTR */
             MLEN=9999;                   /*INSURE LAST LOOP      */
           END;
         CL_REC.SUBREC# = CL_REC.SUBREC# + 1;
         CL_REC.BODY ='';
         CL_REC.BODY = MSG;
         WRITE FILE(CLIST) FROM(CL_REC);
         CPTR = CPTR + MLEN + 1; /* POINT TO NEXT CHARACTER AND   */
                                 /*   LOOP WITH THE DO            */
       END;

     RETURN;
  END GEN_CLIST;
1/*------------------------------------------------------------*/
  DEBLANK: PROC (INSTR) RETURNS(CHAR(255) VAR);
 /*------------------------------------------------------------*/

     DCL INSTR  CHAR(*),
         OUTSTR CHAR(255) VAR,
         I      FIXED BIN(15,0);

     I = INDEX(INSTR,' ');     /* FIND BLANK IF THERE IS ONE */
     IF I=0 THEN               /*   NO BLANK....             */
       DO;
         OUTSTR=INSTR;
         RETURN (OUTSTR);
       END;
     IF I<=1 THEN              /*   NO BLANK....             */
       DO;
         OUTSTR='';
         RETURN (OUTSTR);
       END;

     OUTSTR=SUBSTR(INSTR,1,I-1);

     RETURN (OUTSTR);
 END DEBLANK;
1/*------------------------------------------------------------*/
 /*    DECODE BIT STRINGS INTO TEXT OPTIONS                    */
 /*------------------------------------------------------------*/
 GET_OPTS: PROC(FLAGS,I_FLAGS,E_FLAGS,IGNORE,TEXT,SEP,COUNT)
             RETURNS(CHAR(256) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS,IGNORE)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         (COUNT,I,L) FIXED BIN(15,0),
         OSTRING     CHAR(256) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

     DO  I = 1 TO COUNT;                 /* DECODE OPTIONS  */
       HEAD,TAIL='';
       IF SUBSTR(FLAGS,I,1) &            /* SELECT IF BIT SET AND */
          ^SUBSTR(IGNORE,I,1)   THEN     /* WE SHOULD NOT IGNORE  */
         DO;
           IF SUBSTR(I_FLAGS,I,1) THEN   /* CMD FAIL DUE TO AUTH*/
             DO;
               HEAD = '/*';
               TAIL = '<AUTH>*/ ';
             END;
           IF SUBSTR(E_FLAGS,I,1) THEN   /* CMD FAIL DUE TO ERROR*/
             DO;
               HEAD = '/*';
               TAIL = '<ERR>*/ ';
             END;

           OSTRING=OSTRING ×× HEAD ×× TEXT(I) ×× TAIL ×× SEP;
         END;
     END;

     L = LENGTH(OSTRING);                    /* REMOVE TRAILING */
     IF L>1                                  /* SEPARATOR       */
       THEN OSTRING=SUBSTR(OSTRING,1,L-1);
     IF DEBUG THEN
     PUT SKIP DATA(COUNT,FLAGS,I_FLAGS,E_FLAGS,IGNORE,OSTRING);
     RETURN (OSTRING);
 END GET_OPTS;
1/*------------------------------------------------------------*/
 /*    DECODE AUTH FAILURE REASONS INTO TEXT FOR CMD VIOLATIONS*/
 /*------------------------------------------------------------*/
 AUTH_FAIL: PROC(FLAGS,TEXT,SEP,COUNT)
             RETURNS(CHAR(255) VAR);

     DCL FLAGS       BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         (COUNT,I,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR;

     OSTRING='';

     DO  I = 1 TO COUNT;                 /* DECODE OPTIONS  */
       IF SUBSTR(FLAGS,I,1) THEN         /* SELECT IF BIT SET AND */
         DO;

           OSTRING=OSTRING ×× TEXT(I) ×× SEP;
         END;
     END;

     L = LENGTH(OSTRING);                    /* REMOVE TRAILING */
     IF L>1                                  /* SEPARATOR       */
       THEN OSTRING=SUBSTR(OSTRING,1,L-1);

     RETURN (OSTRING);
 END AUTH_FAIL;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD STRING..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_STR:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,STR,SEP)
        RETURNS(CHAR(255) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         STR         CHAR(*) ,
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                DEBLANK(STR) ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);
     RETURN (OSTRING);
 END KEYWORD_STR;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD STRING..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_VSTR:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,STR,SEP)
        RETURNS(CHAR(255) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         STR         CHAR(*) VAR,
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                STR ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);
     RETURN (OSTRING);
 END KEYWORD_VSTR;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD BITS  ..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_BIT:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,BITS,TEXT2,SEP)
        RETURNS(CHAR(256) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         TEXT2(*)    CHAR(*) VAR,
         BITS        BIT(*),
         SEP         CHAR(1),
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(256) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                GET_OPTS(BITS,BZERO,BZERO,BZERO,
                            TEXT2,' ',LENGTH(BITS)) ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);

     RETURN (OSTRING);
 END KEYWORD_BIT;
1/*----------------------------------------------------------*/

 SELECTED: PROC  RETURNS(BIT(1));

    IF NOCMDS & SMF80EVT > 7 THEN /* SKIP COMMANDS IF DESIRED   */
      DO;

        RETURN ('0'B);
      END;

    IF SMF80EVT < 8 & ^SMF80DES(0) & ^DOACCESS THEN /* FLUSH ACCESS*/
      DO;                                           /* IF NOT VIOL */

        RETURN ('0'B);
      END;


   RETURN ('1'B);
 END SELECTED;

1/*----------------------------------------------------------*/
 SUMMARY: PROC ;       /* WRITE OUTPUT SUMMARY STATISTICS    */
 /*----------------------------------------------------------*/


     RETURN ;
 END SUMMARY ;
0/*------------------------------------------------------*/
 CNVTIME: PROC(INTIME)  RETURNS(FIXED BIN(31,0));

 /*  CONVERT 100THS OF A SECOND TO HHMMSS                */
 /*------------------------------------------------------*/
    DCL INTIME FIXED BIN(31,0),
        (HH,MM,SS,RESULT) FIXED BIN(31,0) INIT(0);

      HH = INTIME / 360000;
      MM = INTIME / 6000 - 60 * HH;
      SS = MOD( (INTIME/100) , 60 );

      RESULT = 10000 * HH  +  100 * MM   + SS;

    RETURN(RESULT);

 END CNVTIME;
     END SMFRACF; /* END OF MAIN PROGRAM */
