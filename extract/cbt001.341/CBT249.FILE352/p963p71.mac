        /* DATA SET S963P71    AT LEVEL 001 AS OF 10/27/78    */
 S963P71: PROC OPTIONS(MAIN) REORDER;
 /******************************************************************/
 /*                                                                */
 /*    PROGRAM NAME: SUPER MATCH                                   */
 /*                                                                */
 /*      WRITTEN BY: BILL WILLIAMS ................26 OCT. 1978    */
 /*                                                                */
 /* PROGRAM PURPOSE: TO CREATE DATASET FOR SUPER SCRATCH JOB.  THIS*/
 /*                  DATASET WILL HAVE FIRST AND SECOND NODE OF    */
 /*                  DSNAME NOT TO SCRATCH.  THE PURPOSE OF JOB    */
 /*                  LETS OPERATOR RUN SUPERSCR WHEN WORK SPACE    */
 /*                  IS LOW, BUT TEMP DATASETS ARE REQUIRED LONGER */
 /*                  THAN THE SIX HOUR LIMIT.                      */
 /*                                                                */
 /*            I/O : REPLY(FCI2.A00963.F0963.F800) SYSTEM NOT TO  */
 /*                  SCRATCH, CREATED WITH OPERATORS REPLYS.       */
 /*                  DSLOG(FCI2.A00963.F0963.F801) DSNAMES OF ALL  */
 /*                  DATASETS FOUND ON WORK, SORTED BY SYSTEM.     */
 /*                  OUTNODE(FCI2.A00963.F0963.F805) DATASETS NODES*/
 /*                  TO BE PASSED TO SUPERSCR.                     */
 /*                                                                */
 /******************************************************************/
 /*         OUTLINE:         - OPEN,SET ENDFILE                    */
 /*                    START - CALL OPERATOR SYSTEM REPLYS         */
 /*                  PROCESS - CALL DSNAME LOG BY SYSTEM & MATCH   */
 /*                   HANDLY - MATCH TO REPLY - PULL NODE & WRITE  */
 /*                    N_F_R - NOT FOUND REPLY - OP REPLY OK,CANCEL*/
 /*               READ_REPLY - READ OPERATOR SYSTEM REPLYS -CHK ASC*/
 /*                READ_VTOC - READ DSNAME LOG - CHK ASCENDING     */
 /*                EOF_REPLY - END OF FILE - CHK LOG IF N_EOF READ */
 /*                 EOF_VTOC - END OF FILE - CHK REPLY IF NOT READ */
 /*                      EOJ - CLOSE INPUT OUTPUT - CHK FOR ABEND  */
 /******************************************************************/

1DCL ABEND ENTRY;                         /* ABEND IF BAD DATA     */

 DCL REPLY  FILE                          /* REPLY DATASET         */
            RECORD
            INPUT;

 DCL DSLOG  FILE                          /* DSLOG DATASET         */
            RECORD
            INPUT;

 DCL OUTNODE FILE RECORD OUTPUT;          /* OUTPUT NODES DATASET  */

 DCL 1 I_REPLY,                 /* REPLY - SYSTEMS NOT TO SCRATCH*/
       2 R_SYSTEM    CHAR(8)      INIT(' '),
       2 FILL1       CHAR(72)     INIT(' ');

 DCL 1 I_LOG,                      /* DSLOG DATASET LIST OF DSN ON WK*/
       2 DSNAME      CHAR(18)         INIT(' '),
       2 REST        CHAR(26)         INIT(' '),
       2 MSVGP       CHAR(8)          INIT(' '),
       2 VOLUME      CHAR(6)          INIT(' '),
       2 DEVICE      CHAR(8)          INIT(' '),
       2 DISKTYPE    CHAR(1)          INIT(' '),
       2 EXTNTS      BIT(8)           INIT((8)'0'B),
       2 DSORG       CHAR(3)          INIT(' '),
       2 RECFM       CHAR(4)          INIT(' '),
       2 SALLC_TYPE  CHAR(1)          INIT(' '),
       2 SALLC_QTY   FIXED BIN(15,0)  INIT(0),
       2 LRECL       FIXED BIN(15,0)  INIT(0),
       2 BLKSIZE     FIXED BIN(15,0)  INIT(0),
       2 TRK_ALLOC   FIXED BIN(15,0)  INIT(0),
       2 TRK_USED    FIXED BIN(15,0)  INIT(0),
       2 DIR_ALLOC   FIXED BIN(15,0)  INIT(0),
       2 DIR_USED    FIXED BIN(15,0)  INIT(0),
       2 USE_COUNT   FIXED BIN(15,0)  INIT(0),
       2 DAYS_UNUSED FIXED BIN(15,0)  INIT(0),
       2 CREATED     FIXED DEC(5)     INIT(0),
       2 LAST_USED   FIXED DEC(5)     INIT(0),
       2 LAST_MOD    FIXED DEC(5)     INIT(0),
       2 LAST_MOD_TIME BIT(16)        INIT((16)'0'B),
       2 EXP_DATE    FIXED DEC(5)     INIT(0),
       2 MOD_USER    CHAR(8)          INIT(' '),
       2 L_SYSTEM    CHAR(8)          INIT(' '),
       2 DSNFLAGS    CHAR(8)          INIT(' '),
       2 SCRFLAG     CHAR(1)          INIT(' '),
       2 PC_USED     FIXED DEC(5)     INIT(0),
       2 EXPIRES     PIC'ZZZZZZ'      INIT(0);

1DCL 1 O_NODE,                  /* OUTNODE- NODES NOT TO SCRATCH*/
       2 DS_NODE     CHAR(19)     INIT(' '),
       2 FILL2       CHAR(61)     INIT(' ');



 DCL HIGH_VAL        CHAR(8)      INIT((8)'9');   /* ON EOF SET   */

 DCL H_ABEND       FIXED BIN(15) INIT(0),          /* IF 1 ABEND   */
     DUMP          FIXED BIN(31,0) INIT(9999),     /* ABEND DUMP   */
     CODE          FIXED BIN(31,0) INIT(9999);     /* ABEND ASCEND */

 DCL H_NODE          CHAR(18)     INIT(' '),   /* HOLD NODES   */
     W_NODE          CHAR(18)     INIT(' ');   /* FIND A NODE  */

 DCL HR_SYS          CHAR(8)      INIT(' '),   /* ASCEND REPLY */
     HI_SYS          CHAR(8)      INIT(' ');   /* ASCEND DSLOG */

 DCL H_DISP          CHAR(71)     INIT(' '),   /* HOLD DISPLAY */
     REPLYX          CHAR(6)      INIT(' ');   /* REPLY TO DISP*/

 DCL I             FIXED BIN(15) INIT(0),          /* DO LOOP      */
     J             FIXED BIN(15) INIT(0),          /* HOLD ADDRESS */
     K             FIXED BIN(15) INIT(0),          /* DO LOOP      */
     L             FIXED BIN(15) INIT(0),          /* HOLD ADDRESS */
     NRVTOC        FIXED BIN(15) INIT(0),          /*DONT READ VTOC*/
     F_REPLY       FIXED BIN(15) INIT(0),          /* FOUND REPLY  */
     PERM1         FIXED BIN(15) INIT(0);          /* FOUND REPLY  */


1/*----------------------------------------------------------------*/
 /*  OPEN AND CHECK FOR EOF -                                      */
 /*----------------------------------------------------------------*/
     ON ENDFILE(REPLY)   GO TO EOF_REPLY;          /* EOF REPLY    */
     ON ENDFILE(DSLOG)   GO TO EOF_VTOC;           /* EOF DSLOG    */
     OPEN FILE (REPLY) INPUT ,                     /* OPEN IO      */
          FILE (DSLOG) INPUT ,
          FILE (OUTNODE) OUTPUT;
 /*----------------------------------------------------------------*/
 /*  READ REPLY SYSTEM DATA                                        */
 /*----------------------------------------------------------------*/
 START:
  CALL READ_REPLY;
 /*----------------------------------------------------------------*/
 /*  READ DSLOG SYSTEM AND DSNAME DATASET                          */
 /*       THEN CHECK HIGH LOW EQUAL AND BRANCH                     */
 /*----------------------------------------------------------------*/
 PROCESS:
  IF NRVTOC   =  1  THEN  NRVTOC   =  0;    /* ON END REPLY OR NOT */
     ELSE                                   /* FOUND REPLY DONT    */
     CALL READ_VTOC;                        /* READ DSLOG          */
  IF SUBSTR(R_SYSTEM,3,3)  >   SUBSTR(L_SYSTEM,6,3)  /*SCR THIS ONE*/
     THEN   GO  TO  PROCESS;
  IF SUBSTR(R_SYSTEM,3,3)  =   SUBSTR(L_SYSTEM,6,3)  /*DONT SCR    */
     THEN   GO  TO  HANDLY;                 /* WRITE OUTNODE       */
  IF F_REPLY   =   1                        /*FOUND ALL NODES      */
         THEN DO;
           F_REPLY   =   0;
           NRVTOC    =   1;                 /* DONT READ DSLOG     */
           GO  TO  START;                   /* BUT DO READ REPLY   */
         END;
         ELSE
           GO  TO  N_F_R;

1/*----------------------------------------------------------------*/
 /*  FOUND SYSTEM - CHECK IF YOU SAW IT BEFORE IF NOT WRITE        */
 /*       FIND THE FIRST AND SECOND NODES.                         */
 /*----------------------------------------------------------------*/
 HANDLY:
  DO  I  =  1  TO  9;                  /* TO FIND FIRST NODE*/
    IF SUBSTR(DSNAME,I,1)   =   '.'
       THEN DO;
       J  =  I + 1;
       GO TO NEXT;
       END;
  END;
    W_NODE = DSNAME;             /* ONLY ONE NODE IN DSNAME */
    GO TO NEXT1;
 NEXT:
      L  =  J  +  9;
  DO  K  =  J  TO  L;                  /* TO FIND SECOND NODE*/
    IF SUBSTR(DSNAME,K,1)   =   '.'
         THEN DO;
          W_NODE = SUBSTR(DSNAME,1,K-1);
          GO  TO  NEXT1;
         END;
  END;
  W_NODE = DSNAME;              /* FULL DATASET - TWO NODES*/
 NEXT1:
  IF  W_NODE  =  H_NODE    THEN   GO  TO  PROCESS; /*ALREADY FOUND*/
       ELSE DO;
          H_NODE  =  W_NODE;             /* MOVE TO HOLD */
          DS_NODE =  'P'  ××  W_NODE;      /* PLACE A P IN FIRST */
          WRITE FILE(OUTNODE) FROM(O_NODE);     /* WRITE NODES   */
          F_REPLY  =  1;                       /* FOUND REPLY    */
          GO  TO  PROCESS;                     /* DO IT AGAIN    */
       END;
1/*----------------------------------------------------------------*/
 /*  NOT FOUND REPLY - THIS SYSTEM WAS NOT ON WORK  - CHECK WITH   */
 /*       OPERATOR IF THIS IS OK AND TO CANCEL JOB.                */
 /*----------------------------------------------------------------*/
 N_F_R:
  H_DISP = 'SYSTEM ' ×× R_SYSTEM ×× ' NOT FOUND ON WORK - ' ××
           'ENTER CANCEL OR OK';             /* CREATE DISPLAY */
 LOOP:         /* IF BAD REPLY THEN LOOP BACK TO ASK AGAIN     */
  DISPLAY (H_DISP)  REPLY (REPLYX);
  IF REPLYX  =  'CANCEL'
       THEN DO;                  /* CANCEL - THEN CALL ABEND */
         H_ABEND  =  1;
         GO  TO  EOJ;
       END;
  IF SUBSTR(REPLYX,1,3)  =  'OK '
       THEN DO;                  /* OK - THEN GO READ ANOTHER REPLY*/
         NRVTOC  =  1;
         GO  TO  START;
       END;
  DISPLAY('TRY AGAIN - ENTER RR,CANCEL  OR  RR,OK');
  GO  TO  LOOP;                    /* BAD REPLY - TRY AGAIN */

1/*----------------------------------------------------------------*/
 /*  READ OP REPLY DATASET - CHECK IF ASCENDING - THEN CHECK IF    */
 /*       DSLOG HAS HIT EOF YES THEN REPLY NOT FOUND - THEN CHECK  */
 /*       IF SYSTEM IS IMSP YES WRITE IT AND READ NEXT REPLY RECORD*/
 /*----------------------------------------------------------------*/
 READ_REPLY: PROC;

  IF PERM1 = 0
       THEN DO;
         DS_NODE = 'NMARKIV.LIB';
          WRITE FILE(OUTNODE) FROM(O_NODE);
         DS_NODE = 'PSYS2      ';
          WRITE FILE(OUTNODE) FROM(O_NODE);
          PERM1 = 1;
       END;

  READ FILE(REPLY) INTO (I_REPLY);                /* READ REPLY */
  IF R_SYSTEM  <  HR_SYS                          /* CHK ASCEND */
     THEN DO;
       H_DISP = 'REPLY DATASET NOT ASCENDING AT ' ×× R_SYSTEM ××
                'JOB ABEND - CALL SPACEMAN';
       DISPLAY(H_DISP);                   /* NOT ASCEND - ABEND */
       H_ABEND  =  1;
       GO  TO  EOJ;
     END;
  HR_SYS  =  R_SYSTEM;                   /* HOLD SYS FOR ASCEND CHK*/
  IF L_SYSTEM = HIGH_VAL  THEN  GO  TO  N_F_R; /* DSLOG HIT EOF    */
  IF SUBSTR(R_SYSTEM,1,4)  =  'IMSP'       /* IF IMSP THEN WRITE   */
     THEN DO;
          DS_NODE =  'P'  ××  R_SYSTEM;
          WRITE FILE(OUTNODE) FROM(O_NODE);
          CALL READ_REPLY;
       END;
 END;

 /*----------------------------------------------------------------*/
 /*  READ DSLOG DATASET - CHECK IF ASCENDING - IF REPLY HIT EOF    */
 /*       THEN LOOP AND KEEP READING DSLOG TO CHK ASCENDING        */
 /*----------------------------------------------------------------*/
 READ_VTOC: PROC;


  READ FILE(DSLOG) INTO (I_LOG);            /* READ DSLOG */
  IF L_SYSTEM  <  HI_SYS                    /* CHK ASCEND */
     THEN DO;
       H_DISP = 'DSN LOG NOT ASCENDING AT ' ×× L_SYSTEM ××
                'JOB ABEND - CALL SPACEMAN';
       DISPLAY(H_DISP);
       H_ABEND  =  1;                /* NOT ASCEND CALL ABEND */
       GO  TO  EOJ;
     END;
  HI_SYS  =  L_SYSTEM;               /* HOLD RECORD FOR ASCEND CHK*/
  IF R_SYSTEM = HIGH_VAL  THEN   CALL   READ_VTOC;   /*LOOP*/

 END READ_VTOC;

1/*----------------------------------------------------------------*/
 /*  ON END FILE REPLY -  CHECK IF DSLOG HIT EOF YES THEN EOJ      */
 /*       NO SET HIGH VAL AND GO READ DSLOG                        */
 /*----------------------------------------------------------------*/
 EOF_REPLY:
   IF L_SYSTEM = HIGH_VAL THEN GO TO EOJ;      /*EOF ON DSLOG */
   R_SYSTEM    = HIGH_VAL;                     /* SET HIGH VAL*/
   CALL  READ_VTOC;                            /* READ DSLOG  */

 /*----------------------------------------------------------------*/
 /*  ON END FILE DSLOG -  CHECK IF REPLY HIT EOF YES THEN EOJ      */
 /*       NO SET HIGH VAL AND GO READ REPLY                        */
 /*----------------------------------------------------------------*/
 EOF_VTOC:
   IF R_SYSTEM = HIGH_VAL THEN GO TO EOJ;      /*EOF ON REPLY*/
   L_SYSTEM    = HIGH_VAL;                     /*SET HIGH VAL*/
  IF F_REPLY   =   1                        /*FOUND ALL NODES      */
         THEN DO;
           F_REPLY   =   0;
           CALL  READ_REPLY;    /* FOUND - READ REPLY FINISH REST */
         END;
  GO  TO  N_F_R;                /* DID NOT FIND - SEND MSG.   */

 /*----------------------------------------------------------------*/
 /* THATS IT CLOSE IT DOWN  -  CHECK CONDITION                     */
 /*----------------------------------------------------------------*/
 EOJ:

        CLOSE FILE (REPLY),               /*CLOSE ALL INPUT OUTPUT*/
              FILE (DSLOG),
              FILE (OUTNODE);

        IF  H_ABEND  =  1  THEN                       /* IF ABEND */
              CALL ABEND(DUMP,CODE);                   /*THEN ABEND*/

 END S963P71;                          /* END OF MAIN PROGRAM */
