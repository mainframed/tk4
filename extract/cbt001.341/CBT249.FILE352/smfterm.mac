        /* DATA SET SMFTERM    AT LEVEL 006 AS OF 08/20/80    */
        /* DATA SET SMFTERM    AT LEVEL 005 AS OF 12/28/79    */
        /* DATA SET SMFTERM    AT LEVEL 004 AS OF 04/27/78    */
             /*  SMF TERMINAL ANALYSIS PROGRAM..VERSION 1.1    */
 /*(CHECK(TSCPU,TSELAP,TPRIME,TNPRIME,PRIME,NONPRIME)): */
 SMFTERM: PROC(PARAM) OPTIONS(MAIN) REORDER;
 /*********************************************************************/
 /* READ TYPE 35    RECORDS TO FIND TERMINAL ANALYSIS RECORDS         */
 /*    22FEB78      0307   19:00     K TRUE   / K WONG   V1.0         */
 /*    30MAR78      0307             K TRUE              V1.1         */
 /*    28DEC79    INCREASED TABLES   K TRUE              V1.2         */
 /*********************************************************************/
 DCL INPUT FILE
            INPUT
            RECORD
            ENV (CONSECUTIVE);
 DCL OUTPUT FILE RECORD OUTPUT ENV(CONSECUTIVE);
 DCL PRINT FILE
              STREAM
              OUTPUT
              PRINT;
 DCL TERMDEF FILE RECORD INPUT  ENV(CONSECUTIVE);
 DCL VERSION CHAR(17) INIT('VER 1.2 (28DEC79)');
 DCL EOFIN         BIT(1) INIT('0'B);
 DCL DEBUG         BIT(1) INIT('0'B);
 DCL DO_DETAIL     BIT(1) INIT('1'B);
 DCL CODE          FIXED BIN(15,0);
 DCL DATE          BUILTIN;
 DCL INDEX         BUILTIN;
 DCL INCNT         FIXED BIN(15,0);
 DCL INDX          FIXED BIN(15,0);
 DCL LEN           FIXED BIN (15,0);
 DCL NUMB          FIXED BIN (15,0);
 DCL TIME          BUILTIN;
 DCL LENGTH        BUILTIN;
 DCL ONCHAR        BUILTIN ;
 DCL PARAM         CHAR(100) VAR;
 DCL PARMFIELD     CHAR(100) INIT(' ');
 DCL (I,J,K,L)
                   FIXED BIN(15) INIT(0);
 DCL (REC35,REC35_DONE,INREC)
                   FIXED BIN(31) INIT(0);
 DCL 1 COMP(120),
     2 INTERM      CHAR(4) INIT((4)' '),
     2 INTYPE      CHAR(8) INIT((8)' '),
     2 INUSER      CHAR(10) INIT((10)' ') ;
 DCL 1 RECORD,
       2 TERMADDR  CHAR(4),
       2 FILL1     CHAR(1),
       2 TERMTYPE  CHAR(8),
       2 FILL2     CHAR(1),
       2 TERMUSER  CHAR(10),
       2 FILL3     CHAR(56);

 DCL TERMIN        CHAR(4) INIT((4)' '),
     TYPEIN        CHAR(4) INIT((4)' '),
     USERIN        CHAR(10) INIT((10)' ');
 DCL 1 TSUM(120),
       2 TSLOG       FIXED BIN(31,0) INIT(0),
       2 TSBUSY      FIXED BIN(31,0) INIT(0),
       2 TSCPU       FIXED BIN(31,0) INIT(0),
       2 TSELAP      FIXED BIN(31,0) INIT(0),
       2 TSMAXSESS   FIXED BIN(31,0) INIT(0),
       2 TPRIME      FIXED BIN(31,0) INIT(0),
       2 TNPRIME     FIXED BIN(31,0) INIT(0);

 DCL INDATE          CHAR(6) INIT(' '),
     C_YY     CHAR(2) DEF(INDATE) POS(1),
     C_MM     CHAR(2) DEF(INDATE) POS(3),
     C_DD     CHAR(2) DEF(INDATE) POS(5);

 DCL PACK5         PIC'99999'    INIT(0),
     PACK6         PIC'999999'   INIT(0),
     R941X12  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER);
              /* IN SYS2.FCILIB  */

 DCL SUMDX         FIXED BIN(31,0) INIT(0);
 DCL TID(4)        CHAR(1);
 DCL 1 TERM1       DEF TID,
       2 TERMNO    CHAR(4);
 DCL TEMP33        FIXED BIN(31);
 DCL PRIMESECS     FIXED BIN(31);
 DCL SESS_SECS     FIXED BIN(31);
 DCL ELAP_SECS     FIXED BIN(31);
 DCL TOTAL_POOL    FIXED BIN(31) INIT(0);
 DCL TOTAL_NPOOL   FIXED BIN(31) INIT(0);
 DCL TYPE35        BIT(8) INIT ('00100011'B ) ;
 DCL TYPOOL        CHAR(4) INIT('POOL');

1DCL 1 DETAIL,     /*   DETAIL OUTPUT LINE..USE HEAD1/HEAD2 FOR TITLE*/
       2 P_ADDR        CHAR(4),
       2 F1            CHAR(1),
       2 P_USERID      CHAR(7),
       2 F2            CHAR(3),
       2 P_ONTIME      PIC'Z9.99.99',
       2 F3            CHAR(2),
       2 P_ONDATE      PIC'Z9/99/99',
       2 F4            CHAR(2),
       2 P_OFFTIME     PIC'Z9.99.99',
       2 F5            CHAR(2),
       2 P_OFFDATE     PIC'Z9/99/99',
       2 F6            CHAR(1),
       2 P_TPUTS       PIC'ZZZZZZ9',
       2 F7            CHAR(1),
       2 P_TGETS       PIC'ZZZZZZ9',
       2 F8            CHAR(1),
       2 P_SVCEUNIT    PIC'ZZZZZZ9',
       2 F9            CHAR(1),
       2 P_SESSTIME    PIC'ZZZ.Z9.99',
       2 F10           CHAR(1),
       2 P_XACTNCNT    PIC'ZZZZZZ9',
       2 F11           CHAR(2),
       2 P_CPUTIME     PIC'Z,ZZ9.99',
       2 F12           CHAR(1),
       2 P_AVGELAP     PIC'Z,ZZ9.9',
       2 F13           CHAR(1),
       2 P_AVGCPU      PIC'ZZZ9.99',
       2 F14           CHAR(10);

 DCL PDETAIL  CHAR(131) BASED(@DETAIL);
     @DETAIL  = ADDR(P_ADDR);
     DETAIL = '';

1DCL 1 S_SUMMARY,  /*   EDIT FIELDS FOR SUMMARY STATISTICS           */
       2 S_ONTIME      PIC'Z9.99.99'    INIT(0),
       2 S_ONDATE      PIC'Z9/99/99'    INIT(0),
       2 S_OFFTIME     PIC'Z9.99.99'    INIT(0),
       2 S_OFFDATE     PIC'Z9/99/99'    INIT(0),
       2 S_PRIMSTRT    PIC'Z9.99.99'    INIT(0),
       2 S_PRIMSTOP    PIC'Z9.99.99'    INIT(0),
       2 S_TPUTS       PIC'Z,ZZZ,ZZZ,ZZZ' INIT(0),
       2 S_TGETS       PIC'Z,ZZZ,ZZZ,ZZZ' INIT(0),
       2 S_SVCEUNIT    PIC'Z,ZZZ,ZZ9'   INIT(0),
       2 S_SESSTIME    PIC'Z,ZZ9.99.99' INIT(0),
       2 S_ELAPSED     PIC'Z,ZZ9.99.99' INIT(0),
       2 S_XACTNCNT    PIC'Z,ZZZ,ZZZ,ZZZ' INIT(0),
       2 S_CPUTIME     PIC'ZZZZ,ZZ9.99' INIT(0),
       2 S_AVGELAP     PIC'ZZZ9.9'      INIT(0),
       2 S_PRIMETIME   PIC'Z,ZZ9.99.99' INIT(0),
       2 S_AVGCPU      PIC'ZZ9.99'      INIT(0);


1DCL 1 T_SUMMARY,  /*   SUMMARY OUTPUT LINE FOR TERMINALS            */
       2 T_ADDR        CHAR(4),
       2 F1            CHAR(2),
       2 T_TYPE        CHAR(8),
       2 F2            CHAR(2),
       2 T_USAGE       CHAR(10),
       2 F3            CHAR(1),
       2 T_#SESSIONS   PIC'ZZZZ9',
       2 F4            CHAR(2),
       2 T_LOGONHMS    PIC'ZZZ.Z9.99',
       2 F5            CHAR(1),
       2 T_PRIMEHMS    PIC'ZZZ.Z9.99',
       2 F6            CHAR(1),
       2 T_NPRIMEHMS   PIC'ZZZ.Z9.99',
       2 F7            CHAR(1),
       2 T_AVGSESS     PIC'ZZZ.Z9.99',
       2 F8            CHAR(1),
       2 T_MAXSESS     PIC'ZZZ.Z9.99',
       2 F9            CHAR(1),
       2 T_CPUSECS     PIC'ZZ,ZZ9.99',
       2 F10           CHAR(2),
       2 T_PCENTUSED   PIC'ZZ9.9',
       2 F11           CHAR(31);

 DCL PTSUMMARY  CHAR(131) BASED(@TSUMMARY);
     @TSUMMARY = ADDR(T_ADDR);
     T_SUMMARY = '';

1DCL 1 OUTREC,           /* OUTPUT RECORD FOR SUBSEQUENT PROCESSING*/
       2 USERID      CHAR(8)   INIT(' '),
       2 TERMINAL    CHAR(4)   INIT(' '),
       2 LOGON_TIME  FIXED  BIN(31,0)   INIT(0),
       2 LOGON_DATE  FIXED  DEC(7)      INIT(0),
       2 LOGOFF_TIME FIXED  BIN(31,0)   INIT(0),
       2 LOGOFF_DATE FIXED  DEC(7)      INIT(0),
       2 TPUTS       FIXED  BIN(31,0)   INIT(0),
       2 TGETS       FIXED  BIN(31,0)   INIT(0),
       2 XACTIONS    FIXED  BIN(31,0)   INIT(0),
       2 TOT_SESSTIME FIXED BIN(31,0)   INIT(0),
       2 TOT_PRIME    FIXED BIN(31,0)   INIT(0),
       2 TOT_NONPRIME FIXED BIN(31,0)   INIT(0),
       2 SVCEUNITS   FIXED  BIN(31,0)   INIT(0),
       2 CPUSECONDS  FIXED  BIN(31,0)   INIT(0),
       2 AVG_ELAP    FIXED  BIN(31,0)   INIT(0),
       2 AVG_CPU     FIXED  BIN(31,0)   INIT(0);





1DCL (H_MAIN1,H_BLANK,H_DETAIL1,H_DETAIL2,H_SUMMARY1,H_SUMMARY2,
      RPTHEAD,TITLE1,TITLE2)
         CHAR(131)  INIT('');

 DCL RUNDATE     PIC'Z9/99/99' DEF(H_MAIN1) POS(104),
     RUNTIME     PIC'99.99.99' DEF(H_MAIN1) POS(113),
     PAGENO      PIC'ZZ9'      DEF(H_MAIN1) POS(128);

           /*          1         2         3         4         5    */
           /* ....5....0....5....0....5....0....5....0....5....0... */
 H_MAIN1   = 'SMFTERM   FAIRCHILD CAMERA & INSTRUMENT      TSO TERM' ××

           /*                                               1    1  */
           /*  5    6         7         8         9         0    0  */
           /* .5....0....5....0....5....0....5....0....5....0....5. */
             'INAL MONITOR PROGRAM  VERSION  1.03       RUN ON: MM/' ××

           /*    1         1         1                              */
           /*    1         2         3                              */
           /* ...0....5....0....5....0.                             */
             'DD/YY HH.MM.SS  PAGE XXX ';


 H_DETAIL1 = 'TERM   TSO     ------LOGON-------  ------LOGOFF------' ××
             '  ---TERMINAL--- SERVICE  SESSION   # OF   CPU (TCB) ' ××
             '-AVG SECS/XACT-         ';

 H_DETAIL2 = 'ADDR .USERID   HH.MM.SS  MM/DD/YY  HH.MM.SS  MM/DD/YY' ××
             '   TPUTS   TGETS  UNITS   HH.MM.SS  XACTNS SECONDS   ' ××
             'ELAPSED CPU(TCB)        ';

 H_SUMMARY1= '---------TERMINAL---------  # OF   LOG-TIME   PRIME  ' ××
             '  N-PRIME   AVG-SESS  MAX-SESS  CPU (TCB) %USED      ' ××
             '                        ';

 H_SUMMARY2= 'ADDR  ..TYPE..  USAGE/DESC  SESS   HH.MM.SS  HH.MM.SS' ××
             '  HH.MM.SS  HH.MM.SS  HH.MM.SS   SECONDS  PRIME      ' ××
             '                        ';





1DCL 1 TOTALS,
       2 MINDATE   FIXED DEC(7)    INIT(9999365),
       2 MINTIME   FIXED BIN(31,0) INIT(99999999),
       2 MAXDATE   FIXED DEC(7)    INIT(0),
       2 MAXTIME   FIXED BIN(31,0) INIT(0),
       2 TPUTS     FIXED BIN(31,0) INIT(0),
       2 TGETS     FIXED BIN(31,0) INIT(0),
       2 SVCEUNIT  FIXED BIN(31,0) INIT(0),
       2 SESSTIME  FIXED BIN(31,0) INIT(0),
       2 #XACTNS   FIXED BIN(31,0) INIT(0),
       2 CPUTIME   FIXED BIN(31,0) INIT(0);

 DCL TOT_ELAPSED   PIC'ZZ9.99.99' INIT(0);
 DCL PRIME_TIME    PIC'ZZ9.99.99' INIT(0);
 DCL NPRIME_TIME   PIC'ZZ9.99.99' INIT(0);

 DCL (LSTME,LETME,TEMP_ELAP,SAVE_ELAP,TEMP_DAYS,PRIME,NONPRIME)
                                  FIXED BIN(31,0) INIT(0);

 DCL ONE_DAY       FIXED BIN(31,0) INIT(86400),   /* NUMBER SECS/DAY */
     STRT_PRIME    FIXED BIN(31,0) INIT(28800),   /* SECS FOR 8:00   */
     END_PRIME     FIXED BIN(31,0) INIT(61200);   /* SECS FOR 17:00  */



 DCL 1 RECIN BASED (PTR),            /* INPUT RECORD */
       2 INRZER              BIT(8),
       2 INRREC              BIT(8),
       2 INRTIME             BIT(32),
       2 INRDATE             FIXED DEC(7),
       2 INRID               CHAR(2),
       2 INRSYS              CHAR(2),
       2 INRJOB              CHAR(8),
       2 INRTME              BIT(32),
       2 INRDTE              FIXED DEC(7),
       2 INRUI1              CHAR(6),
       2 INRUI2              CHAR(2),
       2 INRRES(1024)        CHAR(1);

 DCL 1 TEMPORARY,
       2 USNAME         CHAR(8),
       2 TSERVICE       FIXED BIN (31,0) ,
       2 TXACTN_CNT     FIXED BIN (31,0);


 DCL (PTR,@SUMMARY,@TSUMMARY,@DETAIL)   POINTER;

1DCL 1 SMFREC35 BASED(PTR),     /* SMF RECORD TYPE 35 LOGOFF...       */
       2 TLGRFLG        BIT(8),
       2 TLGRCDTY       BIT(8),
       2 TLGRCDTS       FIXED BIN(31,0) UNALIGNED,
       2 TLGRCDTE       FIXED DEC(7),
       2 TLGRCPUID      CHAR(4),
       2 TLGUIF         CHAR(8),
       2 TLGONTME       FIXED BIN(31,0) UNALIGNED,
       2 TLGONDTE       FIXED DEC(7),
       2 TLGUDATA       CHAR(6),
       2 TLGUDATB(4)    BIT(4),
       2 TLGSTPCT       BIT(8),
       2 TLGCRTME       BIT(32),
       2 TLGOUTCT       FIXED BIN(31,0) UNALIGNED,
       2 TLGINCT        FIXED BIN(31,0) UNALIGNED,
       2 TLGSTAT        BIT(16),
       2 TLGPRI         BIT(8),
       2 TLGNQTME       FIXED BIN(31,0) UNALIGNED,
       2 TLGNQDTE       FIXED DEC(7),
       2 TLGTRMI        BIT(8),
       2 TLGOUTCL       BIT(8),
       2 TLGTRANT       BIT(32),
       2 TLGRVC         BIT(32),
       2 TLGSPK         BIT(8),
       2 TLGSRBT        BIT(24),
       2 TLGTJS         FIXED BIN(31,0) UNALIGNED,
       2 TLGTTAT        BIT(32),
       2 TLGNTSN        FIXED BIN(31,0) UNALIGNED,
       2 TLGPGNO        BIT(16),
       2 TLGRV2         BIT(16),
       2 TLGVAR         BIT(8),
       2 TLGRVB         CHAR(20),
       2 TLGCPUTM       BIT(24),
       2 TLGNBRAC       BIT(8),
       2 TLGACFLD       CHAR(1024);

1/*     SETUP ERROR HANDLING  AND PROGRAM CLEANUP              */

     ON ERROR BEGIN;
       ON ERROR SYSTEM;
       PUT DATA;
              END;

     ON FINISH BEGIN ;
        PUT FILE(PRINT) SKIP(2) EDIT
            (INREC,  ' RECORDS READ IN',
             REC35     ,' LOGOFF (TYPE 35) RECORDS  FOUND',
             REC35_DONE,' LOGOFF (TYPE 35) RECORDS SELECTED')
            ((3)(P'Z,ZZZ,ZZ9',A,SKIP));
        CLOSE FILE (INPUT),
              FILE (OUTPUT),
              FILE (TERMDEF),
              FILE (PRINT) ;
     END ;

     ON ENDFILE(TERMDEF) EOFIN='1'B;
     ON ENDFILE(INPUT)   EOFIN='1'B;

     ON ENDPAGE(PRINT) BEGIN;
        IF PAGENO > 0 THEN PUT FILE(PRINT) PAGE;

        PAGENO = PAGENO + 1;
        PUT FILE(PRINT)      EDIT
           (H_MAIN1)        (A)
           (RPTHEAD)        (SKIP,A)
           (H_BLANK)        (SKIP,A);

        IF TITLE1 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE1)     (SKIP,A);

        IF TITLE2 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE2)     (SKIP,A);
     END;

     OPEN FILE (INPUT)  INPUT,
          FILE (OUTPUT) OUTPUT,
          FILE (TERMDEF) INPUT,
          FILE (SYSPRINT) PRINT LINESIZE(131),
          FILE (PRINT) PRINT LINESIZE(131);

   IF LENGTH(PARAM) >= 0 THEN
     DO;
       PARMFIELD = PARAM;   /* CONVERT TO FIXED LENGTH STRING */

       IF INDEX(PARMFIELD,'DEBUG')      =0 THEN DEBUG = '0'B;
                                           ELSE DEBUG = '1'B;
       IF INDEX(PARMFIELD,'SUMMARY')    =0 THEN DO_DETAIL='1'B;
                                           ELSE DO_DETAIL='0'B;
     END;

1/*   READ IN TERMINALS TO BE MONITORED FROM TERMDEF DD         */

     INDATE = DATE;
     RUNDATE = C_MM ×× C_DD ×× C_YY;
     RUNTIME = SUBSTR(TIME,1,6);
     PAGENO = 0;

     SUBSTR(RPTHEAD,53,25) = 'TERMINALS TO BE MONITORED';
     SIGNAL ENDPAGE(PRINT);


     DO WHILE ( ^EOFIN & NUMB < DIM(COMP.INTERM,1));
        READ FILE(TERMDEF) INTO (RECORD);
        IF ^EOFIN THEN
           DO;
             NUMB = NUMB + 1;
             INTERM(NUMB) = RECORD.TERMADDR;
             INTYPE(NUMB) = RECORD.TERMTYPE;
             INUSER(NUMB) = RECORD.TERMUSER;
             PUT FILE(PRINT) SKIP EDIT
                ('   ADDR=',INTERM(NUMB),
                 '   TYPE=''',INTYPE(NUMB),'''',
                 '   USER=''',INUSER(NUMB),'''')
                 (COL(2),(8)(A));
           END;
     END;
     IF NUMB ^> 0 THEN
        DO;
          PUT FILE(PRINT) SKIP(3) EDIT
          (' *** NO TERIMNAL-ID TO SCAN WERE INPUT VIA TERMDEF *** ')
          (A);
          STOP;
         END;
     /*   END OF INPUT TERMDEF FOR TERMINAL ID  */
     INCNT = NUMB;
      PUT FILE(PRINT) SKIP(2) EDIT
         (' TERMINAL TOTALS =  ',NUMB)
          (COL(2),A,F(3)) ;

1/* MAIN LOOP....READ IN SMF TYPE35 RECORDS AND PROCESS              */

     SUBSTR(RPTHEAD,51,30) = 'DETAILED LOGON ACTIVITY REPORT';
     TITLE1 = H_DETAIL1;
     TITLE2 = H_DETAIL2;
     IF DO_DETAIL THEN SIGNAL ENDPAGE(PRINT) ;

     EOFIN = '0'B;
     READ FILE(INPUT) SET(PTR);

     DO WHILE(^EOFIN);     /*  MAIN LOOP...READ AND PROCESS TYPE 35 */

       INREC = INREC + 1;

       IF INRZER = '00000010'B &
          INRREC = TYPE35      THEN
          DO;
            REC35 = REC35 + 1;
            DO I =1 TO 4 ;
               CODE = TLGUDATB(I) + 1;
               TID(I) = SUBSTR('0123456789ABCDEF',CODE);
            END;
            SUMDX = 0;
            DO INDX = 1 TO INCNT WHILE(SUMDX = 0);
              IF TERMNO= INTERM(INDX) THEN SUMDX = INDX;
            END;
            IF SUMDX > 0 THEN CALL RECTY35; /* FOUND ONE..GO PROCESS*/
                         ELSE CALL NOT_SELECTED; /* OTHERWISE GROUSE*/
          END;
       READ FILE(INPUT) SET(PTR);
     END;

     CALL SUMMARY;    /* REPORT TOTALS..MINMAX..AVGS */

     CALL TERMSUM ;   /* REPORT TERMINAL ACTIVITY    */
     STOP;

 /*   END OF MAIN PROGRAM            */
1/*------------------------------------------------------------*/
 RECTY35: PROC ;            /* SMF REC TYPE35 LOGOFF RECORDS    */
 /*------------------------------------------------------------*/
     REC35_DONE = REC35_DONE + 1;
     P_ADDR,OUTREC.TERMINAL = TERMNO;
     USNAME,OUTREC.USERID = TLGUIF;
     P_USERID = TLGUIF;

     IF TLGONDTE < TOTALS.MINDATE THEN    /* ACCUM MIN DATE/TIME  */
       DO;                                /* FOR LOGON            */
         TOTALS.MINDATE = TLGONDTE;
         TOTALS.MINTIME = TLGONTME;
       END;

     IF TLGONDTE = TOTALS.MINDATE &
        TLGONTME < TOTALS.MINTIME   THEN
          TOTALS.MINTIME = TLGONTME;


     IF TLGRCDTE > TOTALS.MAXDATE THEN    /* ACCUM MAX DATE/TIME */
       DO;                                /* FOR LOGOFF          */
         TOTALS.MAXDATE = TLGRCDTE;
         TOTALS.MAXTIME = TLGRCDTS;
       END;

     IF TLGRCDTE = TOTALS.MAXDATE &
        TLGRCDTS > TOTALS.MAXTIME   THEN
          TOTALS.MAXTIME = TLGRCDTS;


     P_OFFTIME = CNVTIME(TLGRCDTS); /* CONVERT LOGOFF TIME    */
     OUTREC.LOGOFF_TIME = TLGRCDTS;
     OUTREC.LOGOFF_DATE = TLGRCDTE;
     PACK5 = TLGRCDTE ;
     CALL R941X12(PACK5,PACK6)  ;
     IF PACK6 ^= 0 THEN P_OFFDATE = PACK6;
                   ELSE P_OFFDATE = 000000;

     P_ONTIME = CNVTIME(TLGONTME);    /* CONVERT LOGON TIME   */
     OUTREC.LOGON_TIME = TLGONTME;
     OUTREC.LOGON_DATE = TLGONDTE;
     PACK5 = TLGONDTE ;
     CALL R941X12(PACK5,PACK6);
     IF PACK6 ^= 0 THEN P_ONDATE = PACK6;
                   ELSE P_ONDATE = 000000;

     P_TPUTS = TLGOUTCT ;                   /*  # TPUTS ISSUED       */
     OUTREC.TPUTS = TLGOUTCT;
     TOTALS.TPUTS = TOTALS.TPUTS + TLGOUTCT ;
     P_TGETS = TLGINCT;                     /*  # TGETS ISSUED       */
     OUTREC.TGETS = TLGINCT;
     TOTALS.TGETS = TOTALS.TGETS + TLGINCT;
     TSERVICE = TLGTJS;                     /*  SERVICE UNITS        */
     P_SVCEUNIT = TSERVICE;
     OUTREC.SVCEUNITS = TSERVICE;
     TOTALS.SVCEUNIT = TOTALS.SVCEUNIT + (TLGTJS+500)/1000;

     SESS_SECS = CALCELT(TLGONTME,TLGONDTE,TLGRCDTS,TLGRCDTE);
     OUTREC.TOT_SESSTIME = SESS_SECS;
     TOTALS.SESSTIME = TOTALS.SESSTIME + SESS_SECS;
     P_SESSTIME = CNVTIME1(SESS_SECS);      /* SESSION TIME          */

     TXACTN_CNT = TLGNTSN;                  /* # OF TRANSACTIONS     */
     OUTREC.XACTIONS = TLGNTSN;
     TOTALS.#XACTNS = TOTALS.#XACTNS +TLGNTSN;

     TEMP33 = TLGCPUTM;
     OUTREC.CPUSECONDS = TEMP33;
     P_CPUTIME = TEMP33;                    /* CPU (TCB) .01 SECS    */
     TOTALS.CPUTIME = TOTALS.CPUTIME + TEMP33;

     IF TXACTN_CNT = 0 THEN TXACTN_CNT = 1;
     P_XACTNCNT = TXACTN_CNT;
     P_AVGCPU= TEMP33 / TXACTN_CNT; /* AVG CPU/XACTION         */
     OUTREC.AVG_CPU = P_AVGCPU;
     P_AVGELAP =SESS_SECS*10 / TXACTN_CNT;/* AVG SECS/XACTION  */
     OUTREC.AVG_ELAP = P_AVGELAP;

     CALL ACCUM_STATS;    /* ACCUMULATE STATS FOR TERMINAL     */

     CALL FWRITER;        /* WRITE DETAIL LINE..LOG VIA OUTPUT */

     RETURN ;
 END RECTY35;
1/*------------------------------------------------------------*/
 NOT_SELECTED: PROC;        /* NOT IN TABLE.....                */
 /*------------------------------------------------------------*/
     IF ^DEBUG THEN RETURN;
     P_ADDR = TERMNO;
     USNAME = TLGUIF;
     P_USERID = TLGUIF;


     P_OFFTIME = CNVTIME(TLGRCDTS); /* CONVERT LOGOFF TIME    */
     PACK5 = TLGRCDTE ;
     CALL R941X12(PACK5,PACK6)  ;
     IF PACK6 ^= 0 THEN P_OFFDATE = PACK6;
                   ELSE P_OFFDATE = 000000;

     P_ONTIME = CNVTIME(TLGONTME);    /* CONVERT LOGON TIME   */
     PACK5 = TLGONDTE ;
     CALL R941X12(PACK5,PACK6);
     IF PACK6 ^= 0 THEN P_ONDATE = PACK6;
                   ELSE P_ONDATE = 000000;

     P_TPUTS = TLGOUTCT ;                   /*  # TPUTS ISSUED       */
     P_TGETS = TLGINCT;                     /*  # TGETS ISSUED       */
     P_SVCEUNIT = TLGTJS;

     SESS_SECS = CALCELT(TLGONTME,TLGONDTE,TLGRCDTS,TLGRCDTE);
     P_SESSTIME = CNVTIME1(SESS_SECS);      /* SESSION TIME          */

     TXACTN_CNT = TLGNTSN;                  /* # OF TRANSACTIONS     */

     TEMP33 = TLGCPUTM;
     P_CPUTIME = TEMP33;                    /* CPU (TCB) .01 SECS    */

     IF TXACTN_CNT = 0 THEN TXACTN_CNT = 1;
     P_XACTNCNT = TXACTN_CNT;
     P_AVGCPU= TEMP33 / TXACTN_CNT; /* AVG CPU/XACTION         */
     P_AVGELAP =SESS_SECS*10 / TXACTN_CNT;/* AVG SECS/XACTION  */

     PUT FILE(SYSPRINT) SKIP EDIT
        (PDETAIL)    (A);

     RETURN ;
 END NOT_SELECTED;
1/*----------------------------------------------------------*/

 CALCELT: PROC(START_TIME,START_DATE,STOP_TIME,STOP_DATE)
          RETURNS(FIXED BIN(31,0));

 /*     CALCULATE ELAPSED TIME IN SECONDS                    */

 /*----------------------------------------------------------*/

     DCL (START_DATE,STOP_DATE) FIXED DEC(7),
         (START_TIME,STOP_TIME) FIXED BIN(31,0) UNALIGNED,
         (YR1,DY1,YR2,DY2,JD1,JD2,RESULT)
                                FIXED BIN(31,0) INIT(0),
         DAYSECS     FIXED BIN(31,0) STATIC INIT(86400);
                     /*      =  60 * 60 * 24  = SECONDS/DAY    */


     YR1 = START_DATE/1000;     /* EXTRACT OFF YEAR AND DAYS FROM */
     DY1 = MOD(START_DATE,1000);/* START DATE                     */

     YR2 = STOP_DATE /1000;     /* EXTRACT OFF YEAR AND DAYS FROM */
     DY2 = MOD(STOP_DATE, 1000);/* STOP DATE                      */

     IF YR1=YR2  THEN           /* SAME YEAR..EASY TASK...        */
       DO;
         RESULT = (DY2-DY1)*DAYSECS + STOP_TIME/100 - START_TIME/100;
       END;
      ELSE
       DO;                       /* NOT SAME YEAR..CALC DAYS DIFF */

          JD1 = JUL2DAY(START_DATE);   /* CONVERT TO JULIAN DAYS   */
          JD2 = JUL2DAY(STOP_DATE);    /*  BOTH START/STOP DATES   */

          RESULT = (JD2-JD1)*DAYSECS + STOP_TIME/100 - START_TIME/100;


       END;

     RETURN(RESULT);

 END CALCELT;

1         JUL2DAY: PROC (INDATE) RETURNS(FIXED BIN(31));

 /*                                                                   */
 /* FUNCTION CONVERTS INTEGER DATE IN YYDDD JULIAN FORMAT TO          */
 /* JULIAN DAYS SINCE 1900 .  MOD(DAYS,7) PRODUCES 0=SAT, THRU 6=FRI  */
 /*                                                                   */
 /* KEN TRUE 2JUN77 FROM MY FORTRAN CODE (W GREG QUEEN) OF SEPT72     */
 /*                                                                   */

 DCL INDATE       FIXED DEC(7),
     (Y,M,D,MY4,I) FIXED BIN(31,0),
     MONTH(11)    FIXED  BIN(31,0) STATIC
           INIT(31,59,90,120,151,181,212,243,273,304,334);

      D   = MOD(INDATE,1000);
      Y   = INDATE/1000;
      MY4 = MOD(Y,4);

      I   =1461*(Y/4) +365*MY4 + D;
      IF MY4 > 0 ×
         ((MY4 = 0) & D > 59) THEN I = I + 1;
      RETURN(I);
  END JUL2DAY;
1/*----------------------------------------------------------*/
 SUMMARY: PROC ;       /* WRITE OUTPUT SUMMARY STATISTICS    */
 /*----------------------------------------------------------*/
    DCL (STRT_JDAY,END_JDAY,STRT_OFFSET,END_OFFSET,EMBEDDED_DAYS,
         PRIME_DAYS)
        FIXED BIN(31,0) INIT(0);

    TITLE1,TITLE2,RPTHEAD='';
    SUBSTR(RPTHEAD,51,30) = 'SUMMARY OF TERMINAL STATISTICS';
    SIGNAL ENDPAGE(PRINT);

    OUTREC.USERID = '*SUMMARY';
    OUTREC.TERMINAL = '';

    S_OFFTIME = CNVTIME(TOTALS.MAXTIME);
    OUTREC.LOGOFF_TIME = TOTALS.MAXTIME;
    OUTREC.LOGOFF_DATE = TOTALS.MAXDATE;
    PACK5 = TOTALS.MAXDATE;
    CALL R941X12(PACK5,PACK6);
    IF PACK6 ^= 0 THEN S_OFFDATE = PACK6;
                  ELSE S_OFFDATE = 0;

    S_ONTIME = CNVTIME(TOTALS.MINTIME);
    OUTREC.LOGON_TIME = TOTALS.MINTIME;
    OUTREC.LOGON_DATE = TOTALS.MINDATE;
    PACK5 = TOTALS.MINDATE;
    CALL R941X12(PACK5,PACK6);
    IF PACK6 ^= 0 THEN S_ONDATE = PACK6;
                  ELSE S_ONDATE = 0;

    S_TGETS = TOTALS.TGETS;
    S_TPUTS = TOTALS.TPUTS;
    OUTREC.TPUTS = TOTALS.TPUTS;
    OUTREC.TGETS = TOTALS.TGETS;

    S_SVCEUNIT =  TOTALS.SVCEUNIT;
    OUTREC.SVCEUNITS = TOTALS.SVCEUNIT;

    S_SESSTIME = CNVTIME1(TOTALS.SESSTIME);
    OUTREC.TOT_SESSTIME = TOTALS.SESSTIME;

    S_XACTNCNT = TOTALS.#XACTNS;
    OUTREC.XACTIONS = TOTALS.#XACTNS;

    S_CPUTIME = TOTALS.CPUTIME;
    OUTREC.CPUSECONDS = TOTALS.CPUTIME;

    S_AVGCPU = TOTALS.CPUTIME / TOTALS.#XACTNS;
    OUTREC.AVG_CPU = S_AVGCPU;

    S_AVGELAP = (TOTALS.SESSTIME * 10) / TOTALS.#XACTNS;
    OUTREC.AVG_ELAP = S_AVGELAP;

    ELAP_SECS = CALCELT(TOTALS.MINTIME,TOTALS.MINDATE,
                        TOTALS.MAXTIME,TOTALS.MAXDATE);
    S_ELAPSED = CNVTIME1(ELAP_SECS);

    STRT_JDAY = JUL2DAY(TOTALS.MINDATE);      /* GET JULIAN DAYS  */
    END_JDAY  = JUL2DAY(TOTALS.MAXDATE);      /* FOR MIN/MAX DATES*/

    STRT_OFFSET = MOD(STRT_JDAY,7);      /* CALC # DAYS TO OMIT DUE*/
    IF STRT_OFFSET < 2                   /* TO START ON WEEKEND    */
      THEN STRT_OFFSET = 2 -STRT_OFFSET; /* =2 FOR SAT, =1 FOR SUN */
      ELSE STRT_OFFSET = 0;              /* =0 FOR MON-FRI         */

    END_OFFSET  = MOD(END_JDAY,7);       /* CALC # DAYS TO OMIT DUE*/
    IF END_OFFSET  < 2                   /* TO END ON WEEKEND      */
      THEN END_OFFSET  = END_OFFSET+1;   /* =1 FOR SAT, =2 FOR SUN */
      ELSE END_OFFSET  = 0;              /* =0 FOR MON-FRI         */

                                         /*  CALC # EMBEDDED DAYS  */
                                         /* IN WEEKENDS INSIDE     */
                                         /* THE INTERVAL           */
    EMBEDDED_DAYS = MAX(0,(END_JDAY-STRT_JDAY-END_OFFSET)/7) * 2;

    PRIME_DAYS = (END_JDAY-STRT_JDAY+1)   /* CALCULATE TOTAL DAYS   */
                 - STRT_OFFSET            /* WITH PRIME TIME IN THEM*/
                 - END_OFFSET
                 - EMBEDDED_DAYS;


    PRIMESECS = PRIME_DAYS * (END_PRIME - STRT_PRIME);
    OUTREC.TOT_PRIME    = PRIMESECS;
    OUTREC.TOT_NONPRIME = ELAP_SECS - PRIMESECS;
    S_PRIMETIME = CNVTIME1(PRIMESECS);

    S_PRIMSTRT = CNVTIME1(STRT_PRIME);
    S_PRIMSTOP = CNVTIME1(END_PRIME);


    PUT FILE(PRINT) SKIP(3) EDIT
      ('DATE:  ',S_ONDATE,'  TO  ',S_OFFDATE)   (A,COL(18),(3)(A))
      ('TIME:  ',S_ONTIME,'  TO  ',S_OFFTIME)   (SKIP,A,COL(18),(3)(A))
      ('ELAPSED:',S_ELAPSED,' (HH.MM.SS)')      (SKIP,A,COL(15),A,A)
      ('PRIME TIME:',S_PRIMSTRT,'  TO  ',S_PRIMSTOP)
                                            (SKIP(2),A,COL(18),(3)(A))
      ('(MONDAY THRU FRIDAY)')              (X(3),A)
      ('TOTAL PRIME:',S_PRIMETIME,' (FOR PERCENTAGE CALCULATIONS)')
                                            (SKIP,A,COL(15),A,X(2),A)
      ('----TOTALS----')                             (SKIP(2),A)
      ('SESSION TIME:',S_SESSTIME,'   (HH.MM.SS)')
                  (SKIP(2),COL(4),A,COL(42),A,A)
      ('SERVICE UNITS:',S_SVCEUNIT,'K ')
                  (SKIP,COL(4),A,COL(44),A,A)
      ('CPU (TCB) TIME:',S_CPUTIME,'   SECONDS   ')
                  (SKIP,COL(4),A,COL(42),A,A)
      ('TPUTS:       ',S_TPUTS,' ')
                  (SKIP,COL(4),A,COL(40),A,A)
      ('TGETS:       ',S_TGETS,' ')
                  (SKIP,COL(4),A,COL(40),A,A)
      ('TRANSACTIONS:',S_XACTNCNT,' ')
                  (SKIP,COL(4),A,COL(40),A,A)
      ('AVERAGE CPU/XACTN:',S_AVGCPU,'   SECONDS')
                  (SKIP(2),COL(4),A,COL(47),A,A)
      ('AVERAGE ELAPSED/XACTN:',S_AVGELAP,'   SECONDS')
                  (SKIP,COL(4),A,COL(47),A,A)
      ('TOTAL SESSIONS MONITORED:',REC35_DONE)
               (SKIP(2),COL(4),A,COL(43),P'ZZ,ZZZ,ZZ9')
      ('   POOL TERMINAL SESSIONS:',TOTAL_POOL)
                  (SKIP,COL(4),A,COL(43),P'ZZ,ZZZ,ZZ9')
      ('NONPOOL TERMINAL SESSIONS:',TOTAL_NPOOL)
                  (SKIP,COL(4),A,COL(43),P'ZZ,ZZZ,ZZ9');

     WRITE FILE(OUTPUT) FROM(OUTREC);
     RETURN ;
 END SUMMARY ;
1/*----------------------------------------------------------*/
 FWRITER: PROC ;       /* WRITE OUTPUT RECORDS-OUTPUT WRITER */
 /*----------------------------------------------------------*/

     IF DO_DETAIL THEN
     PUT FILE(PRINT) SKIP EDIT
        (PDETAIL)    (A);


     WRITE FILE(OUTPUT) FROM(OUTREC);
     RETURN ;
 END FWRITER ;
1/*------------------------------------------------------*/
 CNVTIME: PROC(INTIME)  RETURNS(FIXED BIN(31,0));

 /*  CONVERT 100THS OF A SECOND TO HHMMSS                */
 /*------------------------------------------------------*/
    DCL INTIME FIXED BIN(31,0),
        (HH,MM,SS,RESULT) FIXED BIN(31,0) INIT(0);

      HH = INTIME / 360000;
      MM = INTIME / 6000 - 60 * HH;
      SS = MOD( (INTIME/100) , 60 );

      RESULT = 10000 * HH  +  100 * MM   + SS;

    RETURN(RESULT);

 END CNVTIME;
0/*------------------------------------------------------*/
 CNVTIME1: PROC(INTIME) RETURNS(FIXED BIN(31,0));

 /*  CONVERT SECONDS TO HHMMSS                           */
 /*------------------------------------------------------*/
    DCL INTIME FIXED BIN(31,0),
        (HH,MM,SS,RESULT) FIXED BIN(31,0);

      HH = INTIME / 3600;
      MM = INTIME / 60 - 60 * HH;
      SS = MOD( INTIME , 60 );

      RESULT = 10000 * HH  +  100 * MM   + SS;

    RETURN(RESULT);

 END CNVTIME1;
1/*----------------------------------------------------------*/

 ACCUM_STATS: PROC;  /* ACCUMULATE TERMINAL STATISTICS       */
 /*----------------------------------------------------------*/

     /*    TERMINAL SUMMARY     */

     TSLOG(SUMDX) = TSLOG(SUMDX) + 1;        /* ACCUM LOGON COUNTS */
     TSCPU(SUMDX) = TSCPU(SUMDX) + TEMP33;   /* ACCUM TCB CPU TIME */
     TSELAP(SUMDX) = TSELAP(SUMDX) + SESS_SECS;/*ACCUM ELAPSD TIME */
     TSMAXSESS(SUMDX) = MAX(TSMAXSESS(SUMDX),SESS_SECS);

     OUTREC.TOT_PRIME,OUTREC.TOT_NONPRIME = 0;

     IF SUBSTR(INTYPE(SUMDX),1,4) = TYPOOL
        THEN TOTAL_POOL = TOTAL_POOL + 1;
        ELSE TOTAL_NPOOL = TOTAL_NPOOL + 1;

     LSTME = TLGONTME/100;               /* SET UP LOGON TIME     */
     LETME = TLGRCDTS/100;               /* SET UP LOGOFF TIME    */
     TEMP_ELAP = SESS_SECS;              /* SET UP ELAPSED SECONDS*/
     SAVE_ELAP = SESS_SECS;              /* SET UP ELAPSED SECONDS*/
     TEMP_DAYS = JUL2DAY(TLGONDTE);      /* GET JULIAN DAYS       */
     IF TEMP_ELAP + LSTME > ONE_DAY THEN
       DO;                               /* SESSION EXTENDS ACROSS*/
         LETME = ONE_DAY;                /* A DAY BOUNDARY IE24:00*/
         TEMP_ELAP = LETME - LSTME;
       END;

     DO WHILE(TEMP_ELAP > 0);         /* REPEAT FOR # DAYS REQD    */

       PRIME = MIN(END_PRIME,LETME) -   /* EXTRACT # SECS IN PRIME */
               MAX(STRT_PRIME,LSTME);   /* TIME.                   */

                                      /* PRIME>0 MEANS VALID       */
                                      /* PRIME<0 MEANS NO PRIME    */


       IF PRIME > 0 THEN NONPRIME = TEMP_ELAP - PRIME;
                    ELSE NONPRIME = TEMP_ELAP;

       IF PRIME < 0 THEN PRIME = 0;

       IF MOD(TEMP_DAYS,7) > 1 THEN   /* PRIME ONLY MON-FRI        */
         DO;
           TPRIME(SUMDX)    = TPRIME(SUMDX) + PRIME;
           TNPRIME(SUMDX)   = TNPRIME(SUMDX) + NONPRIME;
           OUTREC.TOT_PRIME = OUTREC.TOT_PRIME + PRIME;
           OUTREC.TOT_NONPRIME = OUTREC.TOT_NONPRIME + NONPRIME;
         END;
        ELSE
         DO;                          /* SAT OR SUNDAY..NO PRIME    */
           TNPRIME(SUMDX)   = TNPRIME(SUMDX) + PRIME + NONPRIME;
           OUTREC.TOT_NONPRIME = OUTREC.TOT_NONPRIME + NONPRIME + PRIME;
         END;

       SAVE_ELAP = SAVE_ELAP - TEMP_ELAP;    /* SEE IF MORE TO DO   */

       TEMP_ELAP = SAVE_ELAP;

       IF TEMP_ELAP > 0 THEN
         DO;
           TEMP_DAYS = TEMP_DAYS + 1;        /* BUMP DAY COUNTER    */
           LSTME = 0;                        /* START AT 0 SECONDS  */
           IF TEMP_ELAP + LSTME > ONE_DAY
             THEN LETME = ONE_DAY;
             ELSE LETME = TLGRCDTS/100;
           TEMP_ELAP = LETME - LSTME;
         END;
     END;


 END ACCUM_STATS;
1/*----------------------------------------------------------*/

 TERMSUM: PROC ; /* SUMMARY ALL TERMNIAL   COUNTS            */
 /*----------------------------------------------------------*/
     DCL  TEMP    FIXED BIN(31,0);

     RPTHEAD = '';
     SUBSTR(RPTHEAD,50,32) = 'SUMMARY TERMINAL ACTIVITY REPORT';
     TITLE1 = H_SUMMARY1;
     TITLE2 = H_SUMMARY2;

     SIGNAL ENDPAGE(PRINT);

     DO I = 1 TO INCNT;

        IF INTYPE(I) = 'NPOL' THEN INTYPE(I) = '';
        T_ADDR      = INTERM(I);
        T_TYPE      = INTYPE(I);
        T_USAGE     = INUSER(I);

        T_LOGONHMS  = CNVTIME1(TSELAP(I));/* TOTAL ELAPSED SESS TIME */
        T_PRIMEHMS  = CNVTIME1(TPRIME(I));  /* PRIME TIME USAGE      */
        T_NPRIMEHMS = CNVTIME1(TNPRIME(I)); /* NON PRIME TIME        */
        T_MAXSESS   = CNVTIME1(TSMAXSESS(I)); /* MAX SESSION TIME    */

        T_#SESSIONS = TSLOG(I);
        T_CPUSECS   = TSCPU(I);

        IF TSLOG(I) > 0 THEN
          DO;
            TEMP = TSELAP(I) / TSLOG(I);
            T_AVGSESS = CNVTIME1(TEMP);
          END;
         ELSE
          T_AVGSESS = 0;

        IF PRIMESECS > 0
          THEN TSBUSY(I) = (TPRIME(I) * 1000) / PRIMESECS;
          ELSE TSBUSY(I) = 0;

        TSBUSY(I) = MIN(TSBUSY(I),1000);
        T_PCENTUSED = TSBUSY(I);

        PUT FILE(PRINT) SKIP EDIT
          (PTSUMMARY)       (A);
     END;

     PUT FILE(PRINT) SKIP(2) EDIT
         (TOTAL_POOL,' POOL TERMINAL SESSIONS, ',
          TOTAL_NPOOL,' NON-POOL TERMINAL SESSIONS.')
         (COL(4),(2)(P'ZZ,ZZ9',A,X(2)) );

     RETURN;

 END TERMSUM;
     END SMFTERM; /* END OF MAIN PROGRAM */
