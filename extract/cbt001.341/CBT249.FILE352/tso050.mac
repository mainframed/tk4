*          DATA SET TSO050     AT LEVEL 001 AS OF 02/03/81
*)F       THE $ COMMAND CAN BE USED IN PLACE OF THE CALL COMMAND
*         FOR PROGRAMS THAT ARE IN THE 'SYS1.LINKLIB' DATA SETS;
*         THIS INCLUDES ALL COMPILERS AND UTILITIES AS WELL AS
*         SPNB PROGRAMS SUCH AS MRCLEAN AND LISTPDS#.
*
*         ADVANTAGES OF THE $ COMMAND OVER CALL:
*         1) THE $ COMMAND REQUIRES NO DYNAMIC DD CARD NOR
*            ALLOCATION AND IS, THEREFORE, CONSIDERABLY FASTER;
*         2) THE $ COMMAND SIMPLIFIES SYNTAX AND REQUIRES LESS TYPING;
*         3) THE $ COMMAND ALLOWS USE OF PROGRAMS IN ANY OF THE LINKLIB
*            DATA SETS, WITHOUT KNOWING WHICH OF THE DATA SETS THE
*            PROGRAM IS IN.
*         DISADVANTAGES OF THE $ COMMAND:
*         THE ONLY DISADVANTAGE OF THE $ COMMAND IS THAT THE PROGRAM
*         BEING CALLED MUST BE IN A LINKLIB DATA SET; HENCE,
*         TO CALL A USER'S PROGRAM FROM HIS LIBRARY, THE CALL COMMAND
*         MUST STILL BE USED.
*)X       THE SYNTAX OF THE $ COMMAND IS AS FOLLOWS:
*         $ PROGRAM 'PARM'
*         WHERE PROGRAM IS THE NAME OF THE PROGRAM TO BE EXECUTED AND
*         'PARM' IS AN OPTIONAL PARM FIELD OF UP TO 100 CHARACTERS
*         WHICH IS TO BE PASSED TO THE PROGRAM.
*)O       THE OPERANDS OF THE $ COMMAND ARE:
*         PROGRAM - THE 1 TO 8 CHARACTER NAME OF THE PROGRAM TO BE
*                   EXECUTED.
*         'PARM'  - THE OPTIONAL 0 TO 100 CHARACTER STRING, ENCLOSED IN
*                   QUOTES, REPRESENTING THE PARAMETER TO BE PASSED TO
*                   THE PROGRAM.
*
*         EXAMPLE - INVOKING MRCLEAN FOR VOLS PUBDA1 AND TSODA1
*         $ MRCLEAN 'PUBDA1,TSODA1'
*
*         EXAMPLE - INVOKING ASSEMBLER F WITH PARMS OF TEST AND RENT
*         $ IEUASM 'TEST,RENT'
         MACRO
         TSWORK
DOUBLE   DC    D'0'                     FOR CONVERSIONS
ATTLIST  ATTACH DE=0,SF=L               PHONEY ATTACH LIST
ATTLISTL EQU   *-ATTLIST                LENGTH
ATTTCB   DC    A(0)                     TCB ADDRESS
ATTECB   DC    F'0'                     ECB ADDRESS
STAECMP  DC    F'0'                     CMP FOR STAI
BLDL     DC    2H'0',CL58' '            BLDL LIST
PARM     DC    H'0',CL100' '            PARM FIELD
PARMPTR  DC    A(0)                     POINTER TO PARM
         DC    3A(0)                    FAKE REST OF CPPL
         DS    0D           SPACE TO GROW......
         MEND
         PRINT OFF                 MACRO DEFINITIONS FOLLOW
         MACRO
         USNGX  &ADDR,&REG
         GBLC  &REGADDR(16),&REGREG(16)
         LCLA  &LOOP
&LOOP    SETA  1
         USING &ADDR,&REG
.FIND    AIF   ('&REGADDR(&LOOP)' EQ '').GOT
&LOOP    SETA  &LOOP+1
         AIF   (&LOOP LE 16).FIND
         MNOTE *,'REGISTER TABLE OVERFLOW'
         MEXIT
.GOT     ANOP
&REGADDR(&LOOP) SETC '&ADDR'
&REGREG(&LOOP) SETC '&REG'
         MEND
         MACRO
         DROPX &REG
         GBLC  &REGADDR(16),&REGREG(16)
         LCLA  &LOOP
&LOOP    SETA  1
         AIF   (T'&REG EQ 'O').ALLDROP
         DROP  &REG
.FIND    AIF   ('&REGREG(&LOOP)' EQ '&REG').GOTIT
&LOOP    SETA  &LOOP+1
         AIF   (&LOOP LE 16).FIND
         MNOTE 8,'REGISTER &REG WAS NOT AN OPERAND ON A USNGX '
         MEXIT
.GOTIT   ANOP
&REGADDR(&LOOP) SETC ''
&REGREG(&LOOP) SETC ''
         MEXIT
.ALLDROP AIF   ('&REGREG(&LOOP)'  EQ '').SKIP
         DROP  &REGREG(&LOOP)
&REGADDR(&LOOP) SETC ''
&REGREG(&LOOP) SETC ''
.SKIP    ANOP
&LOOP    SETA  &LOOP+1
         AIF   (&LOOP                   LE 16).ALLDROP
         MEND
         MACRO
         INUSE
         GBLC  &REGADDR(16),&REGREG(16)
         LCLA  &LOOP
&LOOP    SETA  1
         SPACE
         MNOTE *,'THE FOLLOWING REGISTERS ARE IN USE:'
.LOOK    AIF   ('&REGADDR(&LOOP)' EQ '').SKIP
         MNOTE *,'          &REGADDR(&LOOP),&REGREG(&LOOP)'
.SKIP    ANOP
&LOOP    SETA  &LOOP+1
         AIF   (&LOOP LE 16).LOOK
         MNOTE *,'**********'
         SPACE
         MEND
         PRINT ON         END OF INLINE MACROS
$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'
*
*        LAST UPDATED 09 MAY 73 - BMD (*BMD*)
*                     FIX PARM OF '' AND SHARE
*                     SUBPOOL 78 FOR IKJPUTGT
*
*        MOD A - K TRUE - 29 MAY 80 - REMOVED/CONVERTED TSO MACROS
*                TO INLINE EXPANTIONS
*
         SPACE 2
*$       TSENTRY  PL=(PARSE),MACRO=YES             FCI
TSDSECT  DSECT
TSAVE    DS    18F                      SAVE AREA
    SPACE
***********************************************************************
*    THE COMMAND PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF         *
*    ADDRESSES PASSED FROM THE TMP TO THE CP VIA REGISTER 1           *
***********************************************************************
    SPACE
CPPL     DS    0A
CPPLCBUF DS    A        PTR TO COMMAND BUFFER
CPPLUPT  DS    A        PTR TO UPT
CPPLPSCB DS    A        PTR TO PSCB
CPPLECT  DS    A        PTR TO ECT
CPPLL    EQU   *-CPPL
TSECB    DS    F                        ECB FOR THE TSO SERVICES
    SPACE
***********************************************************************
*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     *
*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         *
***********************************************************************
    SPACE
PPL      DS    0A
PPLUPT   DS    A        PTR TO UPT
PPLECT   DS    A        PTR TO ECT
PPLECB   DS    A        PTR TO CP'S ECB
PPLPCL   DS    A        PTR TO PCL
PPLANS   DS    A        PTR TO ANS PLACE
PPLCBUF  DS    A        PTR TO CMD BUFFER
PPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)
PPLL     EQU   *-PPL
TSPARANS DS    F                        PARSE RETURNS PTR TO PDL HERE
***********************************************************************
*                                                                     *
*        DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                 *
*                                                                     *
***********************************************************************
    SPACE
         DS    0D                       BEGIN ON DOUBLE WORD BOUNDARY
         TSWORK
TSDSECTL DS    0D
         EJECT
         SPACE
***********************************************************************
*                                                                     *
*                   DEFINE SYMBOLIC REGISTERS                         *
*                                                                     *
***********************************************************************
         SPACE
R0       EQU   0                        THE SYMBOLIC REGISTERS
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
$        CSECT
         SAVE  (14,12),,$_&SYSDATE               BRANCH AROUND ID
         SPACE
         USNGX $,12
         LR    12,15                    ESTABLISH ADDRESSABILITY
         LR    5,1                      SAVE PTR TO CPPL
         GETMAIN R,LV=TSDSECTL-TSDSECT,SP=1
         ST    13,4(1)                  DO SAVE AREA CHAINING
         ST    1,8(13)
         LR    13,1                     ESTABLISH ADDRESSABILITY
         USNGX TSDSECT,13
         MVC   CPPL(CPPLL),0(5)         COPY CPPL TO TS AREA
         L     1,CPPLUPT                GET PTR TO UPT
         L     2,CPPLECT                GET PTR TO ECT
         LA    3,TSECB                  GET PTR TO ECB
         SR    0,0                      CLEAR ECB
         ST    0,TSECB
         STM   1,3,PPL                  INITIALIZE PPL. UPT,ECT,ECB
         LA    4,TSPARANS               ADRS OF PARSE ANSWER PLACE
         ST    4,PPLANS                 POINTER TO ADRS OF PARSE ANSWER
         ST    13,PPLUWA                PARSE USER WORK AREA POINTER
         XC    TSPARANS(4),TSPARANS     TO AVOID DUPLICATE IKJRLSA
         INUSE
    SPACE
$        CSECT
         TITLE '$ - INITIALIZATION CODE'
         MVC   BLDL(4),=AL2(1,58)       NUMBER/LEN
         XC    TSPARANS(4),TSPARANS     CLEAR ANSWER FIELD
         XC    TSECB(4),TSECB           AND ECB
         MVC   STAECMP(4),TSECB         CLEAR IT THIS WAY
*TRTPARS TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(PCL),I)  INVOKE PARSE
STRTPARS L     0,=V(PCL)
         ST    0,PPLPCL
         L     0,CPPLCBUF
         ST    0,PPLCBUF
         LA    1,PPL
         LINK  EP=IKJPARS
FINPARS  LTR   R15,R15                  TEST RETURN CODE
         BZ    ANALYZE                  OK, CONTINUE
BADPARSE LA    R0,L'MSG01               LOAD MESSAGE SIZE
         LA    R1,MSG01                 AND MESSAGE ADDR
         B     PRELEAVX                 DONE, FORGET IT
         TITLE '$ - ANALYZE INPUT'
         USNGX PDL,R11                  TELL ASSEMBLER
ANALYZE  L     R11,TSPARANS             LOAD ANSWER AREA
         L     R1,MODNAME               GET MODULE NAME ENTRY
         TM    MODNAME+6,X'80'          IS IT THERE
         BNO   BADPARSE                 NO, STOP HERE
         MVC   BLDL+4(8),=8C' '         CLEAR MODULE NAME
         LH    R15,MODNAME+4            GET LEN
         BCTR  R15,0                    -1 FOR EXECUTE
         EX    R15,MVCMOD               DO IT
         LH    R2,PDLPARM+4             GET LENGTH
         L     R3,PDLPARM               GET ADDRESS
         CH    R2,=H'100'               CHECK IT
         BNH   LENOK                    OK, SO FAR
         LA    R1,MSG02                 GET MESSAGE
         LA    R0,L'MSG02               AND LENGTH
         TPUT  (1),(0),R                DO IT
         LA    R2,100                   SET AT MAXIMUM
LENOK    LTR   R2,R2                    TEST FOR NON-ZERO LEN *BMD*
         STH   R2,PARM                  SAVE IN LENGTH
         BCTR  R2,0                     SUBTRACT ONE
         BNP   *+12                     NOT THERE, NO MOVE *BMD*
         EX    R2,MVCPARM               DO THAT
         B     *+10                     AROUND XC
         XC    PARM+2(40),PARM+2        CLEAR IT FOR ACCIDENTAL PARSE
         LA    R1,PARM                  LOAD PARM FIELD
         ST    R1,PARMPTR               SAVE IT THERE
         MVI   PARMPTR,X'80'            FLAG AS LAST
         MVC   PARMPTR+4(12),CPPLUPT    JUST IN CASE CALL CP
         SPACE 3
         XR    R1,R1                    CLEAR DCB ADDRESS
         BLDL  (1),BLDL                 DO IT
         CH    R15,=H'8'                CHECK JUST IN CASE
         BNH   *+8                      OK
         LA    R15,12                   LOAD ERROR CODE
         B     *+4(R15)                 DO BRANCH
         B     DOATTACH                 RETURN CODE=0
         B     NONESUCH                 NO SUCH MODULE
         B     IOERR                    I/O ERROR IN SEARCH
         LA    R1,MSG03                 BAD RETURN CODE FROM BLDL
         LA    R0,L'MSG03               AND LEN
         B     PRELEAVX                 DIE RIGHT NOW
         TITLE '$ - ERROR AND RETURN CODE'
NONESUCH MVC   PARM(L'NOMOD),NOMOD      MOVE IN MESSAGE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MODULE NAME
         LA    R1,PARM                  LOAD PLACE
         LA    R0,L'NOMOD               LEN
         B     PRELEAVX                 DO IT
         SPACE 2
IOERR    LA    R1,IOERRMSG              LOAD MESSAGE
         LA    R0,L'IOERRMSG            LENGTH
         SPACE 2
PRELEAVX MVI   STAECMP+3,20             ERROR CODE
PRELEAVE TPUT  (1),(0),R                DO IT
RELEASEA IKJRLSA TSPARANS
         L     R2,STAECMP               TEST CMP CODE
         LTR   R2,R2                    TEST IT
         BP    *+6                      AROUND CLEAR
         XR    R2,R2                    CLEAR IT
         SPACE
*        EXIT     RC=(R2),LV=TSDSECTL-TSDSECT  SPLIT
         LR    1,13                     SAVE FREEMAIN ADD
         L     13,4(13)                 UNCHAIN
         ST    R2,16(13)                 SAVE RETURN CODE
         FREEMAIN R,LV=TSDSECTL-TSDSECT,A=(1),SP=1
         LM    14,12,12(13)
         BR    14
         TITLE '$ - SOME CONSTANTS'
MSG01    DC    C'MISSING PROGRAM NAME OR PARSE ERROR, PLEASE RE-ENTER C+
               OMMAND'
MSG02    DC    C'PARM FIELD TOO LONG, TRUNCATED AT 100 CHARACTERS'
MSG03    DC    C'** ERROR IN BLDL ** CONTACT SYSTEMS PERSONNEL'
MSG10    DC    C'** ATTACH ERROR ** CONTACT SYSTEMS PERSONNEL'
IOERRMSG DC    C'** I/O ERROR DURING BLDL ** CONTACT SYSTEMS PERSONNEL'
NOMOD    DC    C'PROGRAM 12345678 NOT FOUND, PLEASE RE-ENTER COMMAND'
ABCODE   DC    C'PROGRAM 12345678 ABENDED, SYS=000, USER=0000'
NONZERO  DC    C'PROGRAM 12345678 ENDED, COND. CODE=00000000 '
MODOFF   EQU   8
ABSYS    EQU   30
ABUSER   EQU   40
NONCODE  EQU   35
TRT      EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         TITLE '$ - PARSE PCL'
         PRINT NOGEN
PCL      IKJPARM DSECT=PDL
MODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  +
               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   +
               HELP='NAME OF PROGRAM TO BE CALLED'
         SPACE 2
PDLPARM  IKJPOSIT QSTRING,HELP='PARM FIELD FOR PROGRAM'
         IKJENDP
         PRINT GEN
         TITLE '$ - SET UP AND ATTACH PROGRAM'
DOATTACH TM    CPPLCBUF,X'80'           CALL ON ME?
         BO    NOECTCHG                 RIGHT, DON'T CHANGE ECT
         L     R1,CPPLECT               LOAD ECT ADDR
         MVC   12(8,R1),BLDL+4          MOVE IN MODULE NAME
NOECTCHG LA    R1,PARMPTR               LOAD PARM POINTER
         SPACE 3
         XC    ATTLIST(ATTLISTL),ATTLIST  CLEAR ATTACH LIST
         XC    ATTECB(4),ATTECB         CLEAR IT
ATTACH   ATTACH DE=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,                   +
               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,                +
               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78  *BMD*
         LTR   R15,R15                  TEST RETURN CODE
         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT
         LA    R1,MSG10                 MESSAGE ADDRESS
         LA    R0,L'MSG10               AND LEN
         B     PRELEAVX                 DONE FOR
         SPACE 3
ATTWAIT  ST    R1,ATTTCB                SAVE TCB ADDRESS
         WAIT  1,ECB=ATTECB             WAIT FOR SUBTASK
         OC    STAECMP(4),STAECMP       GET CMP FROM TASK
         BZ    GETRC                    OK, GET RETURN CODE
         MVI   STAECMP,X'00'            CLEAR HIGH BYTE
         L     R1,STAECMP               GET IT
         SLL   R1,4                     NOW HAVE 0SSSUUU0
         ST    R1,ATTECB                SAVE IT
         MVC   PARM(L'ABCODE),ABCODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MOD NAME
         UNPK  DOUBLE(4),ATTECB(3)      GET FOR HEX
         MVC   PARM+ABSYS(3),DOUBLE     DO THAT
         TR    PARM+ABSYS(3),TRT        GET IN PRINTABLE
         MVC   ATTECB(2),STAECMP+2      GET LOW 2 BYTES
         NI    ATTECB,X'0F'             OFF LOW SYSTEM BYTE
         LH    R15,ATTECB               LOAD CMP CODE
         CVD   R15,DOUBLE               CONVERT IT
         UNPK  PARM+ABUSER(4),DOUBLE+5(3)
         OI    PARM+ABUSER+3,C'0'       PRINTABLE
         B     DETACH                   DO DETACH
         SPACE 3
GETRC    L     R15,ATTECB               GET ECB
         LA    R15,0(,R15)              OFF POST FLAGS
         LTR   R15,R15                  TEST RETURN CODE
         ST    R15,STAECMP              SAVE IT IN RIGHT FIELD
         MVI   STAECMP,X'FF'            SET NO-FLAG
         BZ    DETACH                   NO FORMAT TO DO
         MVI   STAECMP,X'00'            OFF FLAG
         CVD   R15,DOUBLE               CONVERT IT
         MVC   PARM(L'NONZERO),NONZERO  MOVE IN CODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN NAME
         UNPK  PARM+NONCODE(8),DOUBLE+3(5)
         OI    PARM+NONCODE+7,C'0'      PRINTABLE
         EJECT
DETACH   DETACH ATTTCB,STAE=NO          NO CHANCE
         LA    R1,PARM                  LOAD ADDRESS OF ROUTINE
         LA    R0,L'NONZERO             BOTH SAME LEN
         CLI   STAECMP,X'FF'            CMP ZERO?
         BE    RELEASEA                 YES, NO MESSAGE
         B     PRELEAVE                 DIE NOW
         TITLE '$ - STAI EXIT ROUTINE'
         DROPX
         USNGX STAI,R15                 TELL ASSEMBLER
STAI     CH    R0,=H'12'                CODE FOR NO CORE?
         BE    STAINCOR                 NO CORE, OK
         L     R2,0(,R1)                GET ADDR OF PARM
         USNGX TSDSECT,R2               TELL ASSEMBLER
         OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  RECURSION-DIE
         MVC   STAECMP(4),4(R1)         COPY STAE ABCODE
         B     STAIDO                   GO TO RETRY ROUTINE
         SPACE 3
STAINCOR OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  STAI-RECURSION DIE
         ST    R1,STAECMP               SAVE CMP AS PUT THERE
STAIDO   LA    R0,STAITRY               LOAD STAE RETRY ROUTINE
         LA    R15,4                    LOAD RETRY CODE
         SVC   3                        RETURN TO ASIR
         SPACE 1
STAIDIE  LR    R3,R1                    SAVE POINTER
         POST  ATTECB,0                 POST MY MOTHER
         XC    DOUBLE(4),DOUBLE         CLEAR IT
         WAIT  1,ECB=DOUBLE             STOP HERE
         DROPX
STAITRY  STAE  0,CT                     CLEAR ANY STAE CB'S
         SVC   3                        RETURN UP ANOTHER LEVEL
         EJECT
         USNGX TSDSECT,R13              RE-ESTABLIST FOR THESE ISNS
MVCMOD   MVC   BLDL+4(0),0(R1)          <<EXECUTED>>
MVCPARM  MVC   PARM+2(0),0(R3)          <<EXECUTED>>
         SPACE 2
HERMAN   LTORG
         END
