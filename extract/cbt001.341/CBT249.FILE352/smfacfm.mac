        /* DATA SET SMFACFM    AT LEVEL 001 AS OF 10/05/79    */
 SMFACFM: /* ACF2 MATCH-MERGE GSA TO LOG RECORDS  V1M0               */
          PROC(PARM) OPTIONS(MAIN) REORDER;
 /*                                                                  */
 /* MATCH-MERGE GSA NAME RECORDS TO ACF2 LOG RECORDS VIA ACF2 KEY    */
 /*                                                                  */
 /* CREATE OUTPUT LOG DATASET WITH GSA FIELDS FILLED IN.             */
 /*                                                                  */
 /* K TRUE   4 OCT 79                                                */
 /*                                                                  */
 /*                                                                  */

 DCL (DATE,TIME)    BUILTIN;
 DCL PARM   CHAR(100) VARYING,
     DEBUG  BIT(1)    INIT('0'B);
 DCL INLOG    FILE  RECORD SEQUENTIAL INPUT  ENV(CONSECUTIVE);
 DCL OUTLOG   FILE  RECORD SEQUENTIAL OUTPUT ENV(CONSECUTIVE);
 DCL INGSA    FILE  RECORD SEQUENTIAL INPUT  ENV(CONSECUTIVE);

1DCL 1 LOGREC,           /* OUTPUT RECORD FOR SUBSEQUENT PROCESSING*/
       2 JOBNAME     CHAR(8)   INIT(' '),
       2 RCD_DATE    FIXED  DEC(7)      INIT(0),
       2 RCD_TIME    FIXED  BIN(31,0)   INIT(0),
       2 ACF2_EVENT  CHAR(8)    INIT(' '),
       2 ACF2_ACCESS CHAR(8)    INIT(' '),
       2 VIOLATION   CHAR(1)    INIT(' '),
       2 RCD_REASON(5) CHAR(1)  INIT(' '),
       2 ACF2_LOGONID CHAR(8)   INIT(' '),
       2 TERM_ADDR   CHAR(4)    INIT(' '),
       2 ACF2_KEY    CHAR(8)    INIT(' '),
       2 ACF2_DSNAME CHAR(44)   INIT(' '),
       2 ACF2_MEMBER CHAR(8)    INIT(' '),
       2 ACF2_VOLUME CHAR(6)    INIT(' '),
       2 ACF2_DDNAME CHAR(8)    INIT(' '),
       2 ACF2_PGM    CHAR(8)    INIT(' '),
       2 ACF2_STEP   CHAR(8)    INIT(' '),
       2 ACF2_LIBNAM CHAR(44)   INIT(' '),
       2 ACF2_JOBID  CHAR(8)    INIT(' '),
       2 ACF2_UNAME  CHAR(20)   INIT(' '),
       2 GSA_BADGE   CHAR(5)   INIT(' '),
       2 GSA_NAME    CHAR(20)   INIT(' '),
       2 GSA_AREA    CHAR(8)    INIT(' ');

 DCL 1 GSAREC,           /* INPUT RECORD FOR GSA DATA              */
       2 ACF2_KEY    CHAR(8)    INIT(' '),
       2 F1          CHAR(1)    INIT(' '),
       2 GSA_BADGE   CHAR(5)   INIT(' '),
       2 F2          CHAR(1)    INIT(' '),
       2 GSA_NAME    CHAR(20)   INIT(' '),
       2 F3          CHAR(4)    INIT(' '),
       2 GSA_AREA    CHAR(8)    INIT(' '),
       2 F4          CHAR(33)   INIT(' ');

 DCL (INREC_LOG,INREC_GSA,INREC_NOTFOUND,RECOUT_OUTLOG)
                     FIXED BIN(15,0) INIT(0);

 DCL RETURN_CODE  FIXED BIN(31,0) INIT(0);


  DCL EOF_INLOG      BIT(1)   INIT('0'B),
      EOF_INGSA      BIT(1)   INIT('0'B),
      FINISHED       BIT(1)   INIT('0'B);

  OPEN FILE(INLOG)    INPUT,
       FILE(INGSA) INPUT,
       FILE(OUTLOG)   OUTPUT;

  ON FINISH
    BEGIN;
      CLOSE FILE(INLOG),
            FILE(OUTLOG),
            FILE(INGSA);
    END;

  ON ENDFILE(INLOG)
    BEGIN;
     IF DEBUG THEN PUT FILE(SYSPRINT) SKIP LIST('**EOF ON INLOG**');
     LOGREC.ACF2_KEY = (8)'9'; /* MOVE HIGH VALUES TO ACF2_KEY */
     EOF_INLOG = '1'B;
    END;

  ON ENDFILE(INGSA)
    BEGIN;
     IF DEBUG THEN PUT FILE(SYSPRINT) SKIP LIST('**EOF ON INGSA**');
     GSAREC.ACF2_KEY = (8)'9'; /* MOVE HIGH VALUES TO ACF2_KEY */
     EOF_INGSA = '1'B;
    END;

  READ FILE(INLOG) INTO(LOGREC);      /* SET UP FOR PROCESING.. READ  */
  READ FILE(INGSA) INTO(GSAREC);      /* FIRST GSA/LOGREC RECORDS     */
  FINISHED = EOF_INLOG × EOF_INGSA;
  IF ^EOF_INLOG THEN INREC_LOG = INREC_LOG + 1;
  IF ^EOF_INGSA THEN INREC_GSA = INREC_GSA + 1;

1 /*    MAIN LOOP TO VALIDATE DATASETS          */

 DO WHILE(^FINISHED);


   IF LOGREC.ACF2_KEY = GSAREC.ACF2_KEY THEN CALL PROCESS;
     ELSE
   IF LOGREC.ACF2_KEY < GSAREC.ACF2_KEY THEN CALL GEN_DFLT;
     ELSE
                                      CALL GET_NEWGSA;
   FINISHED = EOF_INLOG & EOF_INGSA;

 END;                           /* END OF MAIN LOOP                 */

   CALL SUMMARY;                /*  PERFORM SUMMARY REPORTING       */



   STOP;
0 /*    END OF MAIN PROGRAM LOOP                */
1/* GEN_DFLT ACF2 KEY NOT FOUND ON GSA FILE..GENERATE DEFAULTS        */

 GEN_DFLT: PROC;

   IF SUBSTR(LOGREC.ACF2_KEY,1,1) = '$' THEN /* ASSUME TSO GSA */
     DO;
       LOGREC.GSA_NAME = 'TSO GSA';
       LOGREC.GSA_BADGE= '88888';
     END;

   IF LOGREC.GSA_BADGE = '     ' THEN   /* ASSUME SECURITY MGR */
     DO;
       LOGREC.GSA_NAME = 'SECURITY MANAGER';
       LOGREC.GSA_BADGE= '99999';
     END;

   INREC_NOTFOUND = INREC_NOTFOUND + 1;

   WRITE FILE(OUTLOG) FROM(LOGREC);
   RECOUT_OUTLOG = RECOUT_OUTLOG + 1;

   READ FILE(INLOG) INTO(LOGREC);
   IF ^EOF_INLOG THEN INREC_LOG = INREC_LOG + 1;
   RETURN;
 END GEN_DFLT;


1/* GET_NEWGSA READ NEW GSA RECORD TO COMPARE ..                      */

 GET_NEWGSA: PROC;

   READ FILE(INGSA) INTO(GSAREC);
   IF ^EOF_INGSA THEN INREC_GSA = INREC_GSA + 1;
   RETURN;
 END GET_NEWGSA;

1/* PROCESS  KEY FOUND ON BOTH GSA AND INLOG                          */

 PROCESS: PROC;
   LOGREC.GSA_NAME = GSAREC.GSA_NAME;
   LOGREC.GSA_BADGE= GSAREC.GSA_BADGE;
   LOGREC.GSA_AREA = GSAREC.GSA_AREA;

   WRITE FILE(OUTLOG) FROM(LOGREC);
   RECOUT_OUTLOG = RECOUT_OUTLOG + 1;

   READ FILE(INLOG) INTO(LOGREC);
   IF ^EOF_INLOG THEN INREC_LOG = INREC_LOG + 1;

   RETURN;

 END PROCESS;

 SUMMARY: PROC;
   PUT FILE(SYSPRINT) SKIP EDIT
         (INREC_LOG,     'LOG RECORDS READ IN',
          INREC_GSA,     'GSA RECORDS READ IN',
          INREC_NOTFOUND,'GSA ASSUMED RECS GENERATED',
          RECOUT_OUTLOG, 'MERGED OUTPUT LOG RECORDS WRITTEN')
         ((4)(P'ZZ,ZZZ,ZZ9',X(2),A,SKIP));
    RETURN;
 END SUMMARY;

 END SMFACFM;
