*          DATA SET PSNSETUP   AT LEVEL 002 AS OF 10/30/80
         TITLE 'PSNSETUP - READ NEXT REQUEST AND PREPARE FOR IT'
PSNSETUP PSNMSTRT  SASIZ=WKSIZ
         EJECT
*                    TO READ IN THE NEXT REQUEST AND PREPARE THE
*                    PROCESSING FOR IT - POINT TO THE PROPER MEMBER
*                    PREPARE ANY OUTPUT LIBRARY PROCESSING, AND
*                    INTERPRET SPECIAL REQUEST CONDITIONS
*
         TM    PSWGFLG1,PSWM1PDS  WANT ENTIRE PDS
         BO    FULLPDS            YES - SPECIAL PATH
*                    REQUESTS WILL BE BY CONTROL CARD
GETAGAIN EQU   *
         L     R2,PSWSYSIN        ADDRESS THE INPUT DCB
         LA    R1,ENDINPUT        ALWAYS RESET EOF ADDRESS
         ST    R1,DCBEODAD-IHADCB(,R2)
         GET   (R2)
         LR    R9,R1              SAVE POINTER TO THE INPUT DATA
         MVC   PSWPNAME,0(R9)     SAVE THE NAME REQUESTED
         PSNMCTR  PSWCREQ         COUNT THE MEMBERS REQUESTED
*
         BAL   R14,REPOINT        REDO THE VARIOUS POINTERS
*
         BAL   R14,FINDMBR        FIND THIS MEMBER IN SYSLIB
         LTR   R15,R15            DID IT GO WELL
         BNZ   GETAGAIN           WELL, NO IT DID NOT
*
         BAL   R14,CHKOVRD        DID HE REQUEST ANYTHING SPECIAL
         LTR   R15,R15            DID THE OVERRIDES WORK
         BNZ   GETAGAIN           NO - TRY NEXT CONTROL CARD
*
         SR    R15,R15
         B     RETURN
*
ENDINPUT EQU   *                  EOF ADDRESS FOR SYSIN
         LA    R15,4              END OF THE REQUESTS
         B     RETURN
         EJECT
*                    IF THE REQUEST BY PARM IS TO READ THE
*                    FULL PDS
*
FULLPDS  EQU   *
         L     R15,PSWPDSR        THE PDS READ ROUTINE
         BALR  R14,R15
         LTR   R15,R15            DID HE SIGNAL ALL OVER
         BNZ   ENDINPUT           YES - QUIT
*                    SET UP POINTER TO THIS ONE
         BAL   R14,FINDMBR
         LTR   R15,R15
         BNZ   RETURN             REALLY SHOULD ALWAYS BE THERE
*
         BAL   R14,REPOINT        REDO ALL THE INTERNAL POINTERS
         SR    R15,R15            LOOK GOOD TO CONTINUE
         B     RETURN
         EJECT
*                    FIND THE MEMBER AND SET UP FOR READING THAT MBR
*
FINDMBR  PSNMBLOK  FND,RENT=YES
         L     R1,PSWSYLIB        ADDRESS THE PROCLIB DATASET
         FIND  (1),PSWPNAME,D     IS IT THERE?
         LTR   R15,R15            THE ENVELOP, PLEASE
         BZ    FNDEXIT            MEMBER IN PLACE, READY TO READ
         CH    R15,PSWHALF4       WHAT WAS THE ERROR
         BH    FNDIOERR           OVER 4 IS IO ERROR
         PSNMERR  ERRMNOTF,PSWPNAME MEMBER NOT FOUND
         LA    R15,8              RETURN CODE FOR PROCESSING ERROR
         B     FNDEXIT
*
FNDIOERR EQU   *
         PSNMERR  ERRIO,PSWPNAME,PSWDDSLB,FIND
         LA    R15,8              CANNOT PROCESS THIS MEMBER
         B     FNDEXIT
FIND     DC    C'FIND'            WHERE THE IO ERROR OCCURRED
         EJECT
*                    TO REPOINT THE INCORE TABLE POINTERS
*                    TO PREPARE FOR THIS NEW MEMBER
*
REPOINT  PSNMBLOK  REP
         LA    R3,PSWGCORE
         LA    R4,PSWGMLNG        LENGTH OF THE ENTRY
         LA    R5,PSWCOREX
*
REPLOOP  EQU   *
         L     R1,12(,R3)         THE START OF THE GOTTEN MAIN
         ST    R1,0(,R3)          INTO NEXT AVAILABLE POINTER
         BXLE  R3,R4,REPLOOP
*
*                    OTHER RESET FIELDS
         LA    R1,2               REQUEST TIME IN DECIMAL
         SVC   11
         ST    R0,WKDOUBL         SAVE THIS TIME FIELD
         UNPK  PSWTIME+1(5),WKDOUBL(3)
         MVC   PSWTIME(2),PSWTIME+1
         MVI   PSWTIME+2,C':'     FINISH OUT THE TIME FIELD
         MVI   PSWTIME+5,C' '     CLEAR THE GARBAGE FIELD
*
*                    MOVE THE GLOBAL OPTIONS TO THE MEMBER OPTIONS
         MVC   PSWMDATA(PSWMDATL),PSWGLOBL
         MVC   PSWMDDOT,PSWDDOUT  THE DD FOR OUTPUT - CAN CHANGE
         MVC   PSWMNEWN,PSWPNAME  DEFAULT NEWNAME TO THIS NAME
         MVC   PSWRMODE,=CL11'PROCSCAN OF'  MOVE IN MODE            NTL
*
*
         ZAP   PSWLINUM,PSWPZERO  CLEAR THE LINE NUMBER, TOO
         ZAP   PSWIREC#,PSWPZERO  CLEAR INPUT RECORD COUNTER        NTL
         XC    PSWPOINT,PSWPOINT  CLEAR THE ERROR-POINT COUNTER
         XC    PSWHEADC,PSWHEADC  CLEAR THE COMMENT POINTER
         MVI   PSWSTAT1,X'00'     AND THE GLOBAL STATUS BYTE..
         XC    PSWCOLTP,PSWCOLTP  CLEAR THE COLUMN OF THE TYPE CODE
         XC    PSWEXCHN,PSWEXCHN  START OF THE EXEC CHAIN
         XC    PSWEXEND,PSWEXEND  CURRENT EXEC BLOCK POINTER
         XC    PSWDDLST,PSWDDLST  CURRENT DD POINTER
         XC    PSWTHISC,PSWTHISC  CURRENT COMMENT POINTER
         XC    PSWLASTC,PSWLASTC  LAST COMMENT IN STRING POINTER
         L     R1,PSWASYM         POINT TO THE SYMBOLICS TABLE
         XC    0(32,R1),0(R1)     AND CLEAR OUT THE FIRST PART
*
*                    REPOINT THE DEBLOCKING FIELDS
         XC    PSWRSAV(16),PSWRSAV CLEAR ALL THE POINTERS
         LA    R1,1
         ST    R1,PSWRSAV         THE INCREMENT
*                    SKIP TO NEW PAGE FOR NEW MEMBER
         LA    R1,999
         STH   R1,PSWLINCT
*
         SR    R15,R15
         B     REPEXIT
         EJECT
*                   TO FIND AND PROCESS ANY CONTROLS THAT APPLY TO THIS
*                   ONE MEMBER
*
CHKOVRD  PSNMBLOK  CKO
CKOCTL2  EQU   *
         LA    R4,8(,R9)         POINT TO START OF THE PARM
         LA    R3,71(,R9)         AND TO THE END OF PARM
*                    EXAMINE THE PARM FIELD
         PSNMSCAN (R4),(R3),KEYLIST,PSWWSCAN,CKOERROR,CKOSPED
*
*                    DETERMINE THE OUTCOME
         CH    R15,PSWHALF8       HOW DOES IT MATCH UP
         BL    CKOPASS
         BE    CKOCONT            TO BE CONTINUED
         LA    R1,12              CHECK FOR NORMAL ERRORS
         CR    R15,R1             AGAINST THE RETURN CODE
         BE    *+8                ALL NORMAL - JUST BAD KEYWORD
         EX    R0,*               TABLE ERROR OR INTERNAL SCANNING
         PSNMERR   ERRNOTP,PSWPNAME
         LA    R15,4              CODE TO QUIT THIS PROCESS
         B     CKOEXIT            AND GO ON TO NEXT CARD
*
CKOPASS  EQU   *                  NONE OR ALL OK IS QUITE PROPER
         SR    R15,R15
         B     CKOEXIT
*
CKOCONT  EQU   *                  CONTINUED ON NEXT CARD
         L     R2,PSWSYSIN        READDRESS THE INPUT DCB
         LA    R1,CKOPREOF        SPECIAL EOF ADDRESS FOR THIS
         ST    R1,DCBEODAD-IHADCB(,R2)
         GET   (R2)
         LR    R9,R1              SAVE THE ADDRESS OF THE INPUT AGAIN
         B     CKOCTL2            AND CONTINUE THE INTERPRET
*
CKOPREOF EQU   *                  EOF DURING CONTINUATION PROCEEDINGS
         PSNMERR  ERREOF,CKOCTLC
         LA    R15,4              EOF CODE
         B     RETURN             AND AN IMMEDIATE RETURN
CKOCTLC  DC    C'CTL CARD CONTINUATION'
*
CKOERROR DS    0H                 IF A KEYWORD GOES WRONG
         ST    R14,WKERSAVE       STORE THIS RETURN ADDRESS
         LR    R14,R0              PREPARE TO INDEX TO CAUSE TABLE
         SLL   R14,3
         LA    R14,CKOCAUSE-8(R14)
         PSNMERR  ERRPARM,((R14),8),((R15),(R1))
         L     R14,WKERSAVE
         BR    R14                BACK INTO THE INTERPRETATION
*
CKOCAUSE DS    0D                 LIST OF THE POSSIBLE CAUSES OF ERROR
         DC    CL8'NOVALUE',CL8'ENDING',CL8'KEYWORD',CL8'VALUE'
         DC    CL8'VALUE2',CL8'LENGTH',CL8'DATA',CL8'ENTRY'
*
         EJECT
CKOSPED  DC    A((CKOSPEND-*-4)/4)  NUMBER OF EDITS
         DC    A(SPED1)           DUMMY FIRST SPECIAL EDIT
CKOSPEND EQU   *
*
SPED1    SR    R2,R2              AN EDIT OF COMPLETE NOPPPPPING
         BR    R14
*
*                    THE SET OF KEYWORDS PROCESSED AT MBR LEVEL
KEYLIST  DS    0D
         PSNMKEY NOABEND,PSWMFLG1,OPTION=BITON,BIT=PSWM1NAB
         PSNMKEY REFORM,PSWMFLG1,OPTION=BITON,BIT=PSWM1REF
         PSNMKEY NOREFORM,PSWMFLG1,OPTION=BITOF,BIT=PSWM1REF
         PSNMKEY NOLIST,PSWMFLG1,OPTION=BITON,BIT=PSWM1NOL
         PSNMKEY NOCOLS,PSWMFLG1,OPTION=BITON,BIT=PSWM1NCL          NTL
         PSNMKEY NOCOMM,PSWMFLG1,OPTION=BITON,BIT=PSWM1NCM          NTL
         PSNMKEY NOTRIVIA,PSWMFLG1,OPTION=BITON,                    NTL*
               BIT=PSWM1NCL+PSWM1NCM                                NTL
         PSNMKEY COLS,PSWMFLG1,OPTION=BITOF,BIT=PSWM1NCL            NTL
         PSNMKEY COMMENT,PSWMFLG1,OPTION=BITOF,BIT=PSWM1NCM         NTL
         PSNMKEY TRIVIA,PSWMFLG1,OPTION=BITOF,                      NTL*
               BIT=PSWM1NCL+PSWM1NCM                                NTL
         PSNMKEY LIST,PSWMFLG1,OPTION=BITOF,BIT=PSWM1NOL
         PSNMKEY NEWNAME,PSWMNEWN,OPTION=CHAR
         PSNMKEY LIBDD,PSWMDDOT,OPTION=CHAR
         PSNMKEY SEV,PSWMSEV,OPTION=HALF
         PSNMKEY NEW1,PSWMNEW1,OPTION=PACK
         PSNMKEY INCR,PSWMINCR,OPTION=PACK
         PSNMKEY END
*
         EJECT
         LTORG
         PSNMKEYD
         EJECT
         PSNMWORK
         EJECT
WORKAREA DSECT
         DS    18F
WKDOUBL  DS    D
WKERSAVE DS    F                  SAVE RETURN FROM ERROR FROM SCAN
         PSNMBLOK  RENT=REGS
WKSIZ    EQU   *-WORKAREA
         PRINT NOGEN
         IHADCB   DSORG=PO,DEVD=DA
         END
