*          DATA SET MAPDISK2   AT LEVEL 002 AS OF 03/10/83
*          DATA SET MAPDISK2   AT LEVEL 002 AS OF 05/24/78
*          DATA SET FASTMAP2   AT LEVEL 001 AS OF 11/09/77
PDSR TITLE '                 FASTMAP2 -- PDSREAD'
* PDSREAD IS A SUBROUTINE OF FASTMAP WHICH IS CALLED BY FASTDISK
* TO DETERMINE THE NUMBERS OF DIRECTORY BLOCKS USED AND ALLOCATED
* FOR THE PDS'S ON A DISK.
*
* PDSREAD, F.G.ROSS, 1/10/73
*
* FASTMAP2, GENE CZARCINSKI, 07APR73
*
* SUPPORTS: 2301,2302,2303,2311,2314,2321  (FCI 3330,3330-1,3350)
*
*           3380 SUPPORT ADDED    KMT (INTEL)                       NTL
*                                                                   NTL
* UPON ENTRY:
*        R0 = AL1(NUM OF PDS/TRK),AL3(TABLE OF DATA CHAINS)
*        R1 = AL1(NUM OF TRKS/CYL),AL3(IOB)
*        R3 = A(CCW BUILD AREA)
*
* NOTE:  THIS ROUTINE ASSUMES THAT THE CCW WORK AREA PASSED TO IT
*        HAS AT LEAST 1416 BYTES (50*20 + 52*8) AVAILABLE.
*
         SPACE 1
          MACRO
&NAME     SUPVR &BASE=10
&NAME     BALR  &BASE,0
          USING *,&BASE
          STM   13,1,SAVETWO SAVE REGS
*         MODESET KEY=ZERO
          MODESET KEY=ZERO
          SPACE 1
          LM    13,1,SAVETWO   RESTORE REGS
          BALR  13,1  GO TO SUPER CODE
          SPACE 1
*         MODESET KEY=NZERO
          MODESET KEY=NZERO
          LM    13,1,SAVETWO  RESTORE REGS
          BR    14    RETURN
          SPACE 1
          DS     0F
SAVETWO   DC    5F'0'
          DROP  &BASE
          MEND
         LCLA  &SVC          *** USED TO MODIFY DEB EXTENTS ***
&SVC     SETA  254
 EJECT
FASTMAP2 START 0
         ENTRY PDSREAD
*
R0       EQU   0
R1       EQU   1
R2       EQU   2             BASE REG
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8             CNTR FOR # BLKS USED
R9       EQU   9             CNTR FOR # BLKS ALLOCATED
R10      EQU   10            PNTR TO INPUT AREA
R11      EQU   11            PNTR TO ECB
R12      EQU   12            PNTR TO IOB
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
PDSREAD  SAVE  (14,12),,*
         LR    R5,R15                  INIT BASE REG
         USING PDSREAD,R5
         LA    R15,SAVEAREA            INIT SAVE AREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
* INIT PNTRS, VARIABLES, ETC.
         MVI   SW,0                    CLEAR THE SWITCHES
         LR    R4,R0                   A(DATA TABLE)
         LA    R6,0(R4)
         LR    R12,R1                  A(IOB)
         SRL   R1,24                   GET # TRKS/CYL
         BCTR  R1,0                    MINUS ONE FOR INDEXING
         STC   R1,TRKS+1
         SRL   R4,24                   BLKS/TRK (CCWS TO BUILD)
         STC   R4,PDS
         MH    R4,=H'8'                FINAL ADRS FOR STOP
         LA    R3,0(R3)                CCW AREA
         LA    R10,52*8(R3)            INPUT AREA
         ST    R3,16(R12)              SET CCW PNTR IN THE IOB
         MVI   39(R12),0               SET 'R' TO ZERO
*
         AIF   (&SVC EQ 0).SKIP1
         L     R1,20(R12)              A(DCB)
         L     R1,44(R1)               A(DEB)
         L     R14,32(R1)              A(UCB)
         LA    R15,5
         TM    TRKS+1,X'FE'            2321?
         BO    *+8                     YES.
         IC    R15,19(R14)             NO, GET TYPE CODE
         BCTR  R15,0                   -1
         MH    R15,=H'6'
         LA    R15,EXTS(R15)           A(NEW DEB LIMIT)
         MVC   NEWDEB+4(6),0(R15)
          LR     R2,R1    SAVE
          LA     R1,$DOIT
          BAL    R14,SUPER
          B      $OVER
$DOIT     DS     0H
         LA    R14,NEWDEB
         LA    R2,38(R2)               TARGET IN DEB.
$MVC     MVC   0(10,R2),0(R14)         MOVE IN EXTENTS
          BR     R13
$OVER    EQU   *
.SKIP1   ANOP
* CONSTRUCT THE CHANNEL PROGRAM WHICH WILL READ THE PDS DIRECTORY
         MVC   0(16,R3),CCWSHA         SEARCH (SHA & TIC)
         LA    R15,35(R12)             A(CCHH IN THE IOB)
         ST    R15,0(R3)
         MVI   0(R3),X'39'             SHA
         ST    R3,8(R3)
         MVI   8(R3),X'08'             TIC
         LA    R3,16(R3)
         AR    R4,R3
         LR    R15,R10                 INPUT AREA PNTR
CCWLOOP  MVC   0(8,R3),CCWCKD          READ CCW
         ST    R15,0(R3)
         MVI   0(R3),X'1E'             CKD
         LA    R3,8(R3)
         LA    R15,20(R15)
         CR    R3,R4
         BL    CCWLOOP
         SH    R3,=H'4'                DONE...BACK UP 4
         NI    0(R3),X'BF'             AND TURN OFF CMD CHAIN
*
         ST    R6,ADSCB                SAVE A(CORE BLK)
         LTR   R6,R6                   GET A(FIRST DATA CHAIN)
         BZ    GETMOR                  IF THE LAST ONE
*
START    NI    SW,X'0F'                RESET THE SWITCHES
         MVI   13(R6),0                ZERO THE RES0 BYTE
         LA    R7,16(R6)               A(START OF THE DSCB DATA)
         CLI   44(R7),X'F1'            IS IT FORMAT ONE?
         BNE   GETMOR                  NO, SKIP IT.
         TM    82(R7),X'02'            IS IT A PDS?
         BNO   GETMOR                  NO, SKIP IT.
         TM    93(R7),B'00010100'      PASSWORD PROTECTED FOR READ?
         BM    GETMOR                  YES, SKIP IT.
         MVC   CCHH,107(R7)            GET THE STARTING CCHH
         XR    R8,R8                   CLEAR THE BLK COUNTERS
         XR    R9,R9
         CLI   59(R7),0                ZERO EXTENTS (PATTERN DSCB)?
         BE    DIRDON                  YES, SKIP
         AIF   (&SVC NE 0).SKIP2
         L     R6,20(R12)              A(DCB)
         TM    48(R6),X'10'            ALREADY CLOSED?
         BZ    NOTOPEN                 YES.
         CLOSE ((R6))
NOTOPEN  L     R6,36(R6)               A(DCB EXLST)
         L     R6,0(R6)                A(JFCB)
         XC    0(118,R6),0(R6)         CLEAR/INIT THE JFCB
         XC    124(52,R6),124(R6)
         OI    52(R6),X'08'            SET SO JFCB NOT RETURNED
         MVC   0(44,R6),0(R7)          MOVE DSNAME TO JFCB
         L     R6,20(R12)              A(DCB)
         OPEN  ((R6),INPUT),TYPE=J
         TM    48(R6),X'10'            OPEN OK?
         BZ    ERROR                   NO.
.SKIP2   ANOP
*
EXCP     MVC   35(4,R12),CCHH          MOVE THE STARTING CCHH TO IOB
         XC    0(250,R10),0(R10)       CLEAR THE INPUT AREA
         XC    250(250,R10),250(R10)
         XC    500(250,R10),500(R10)
         XC    750(250,R10),750(R10)
* EXECUTE THE CHANNEL PROGRAM AND PROCESS THE RETURN CODE.
         L     R11,4(R12)              A(ECB)
         XC    0(4,R11),0(R11)         CLEAR THE ECB
         EXCP  (R12)
         WAIT  ECB=(R11)
         CLI   0(R11),X'7F'            OK?
         BE    READOK                  YES.
         CLI   0(R11),X'42'            EXTENT VIOLATION?
         BE    ERROR                   YES...BAD ERROR
* TREAT ANYTHING ELSE AS EOF OR SALVAGABLE
         XR    R14,R14                 CLEAR
         LR    R7,R10                  POINT AT INPUT AREA
ERRCHK   CLC   =XL5'0',0(R7)           WAS ANYTHING READ IN?
         BE    ENDCHK                  NO...DONE
         CLC   =H'0',6(R7)             EOF?
         BE    ENDCHK
         CLC   =X'0100',6(R7)          PDS BLK (LEN=256)?
         BE    ERRCHK1                 YES...OK
         OI    SW,X'80'                NO...BAD...FLAG ERROR
         B     ENDCHK
ERRCHK1  LA    R14,1(R14)              CONTINUE SCAN
         LA    R7,20(R7)
         CH    R14,PDS-1               MORE THAN FOR PDS?
         BH    ERROR                   YES...ABORT
         B     ERRCHK
ENDCHK   OI    SW,X'20'                SET FLAG
         B     READOK1
*
READOK   LH    R14,PDS-1               INIT BLK COUNTER
READOK1  LR    R7,R10                  INIT INPUT AREA POINTER
CNTLOOP  CLC   =H'0',6(R7)             EOF?  (COUNT=ZERO)
         BE    DIRDON                  YES, DONE
         CLC   =X'0100',6(R7)          LEN=256?
         BNE   ERROR                   NO...ERROR
         TM    SW,X'40'                LOGICAL END PASSED?
         BO    SKIP2                   YES
         CLI   8(R7),X'FF'             SPECIAL KEY FOR LAST?
         BNE   SKIP1                   NO
         OI    SW,X'40'                FLAG LOGICAL END
SKIP1    LA    R8,1(R8)                BUMP USED COUNT
SKIP2    LA    R9,1(R9)                BUMP ALLOC COUNT
         LA    R7,20(R7)               POINT AT NEXT AREA
         BCT   R14,CNTLOOP             LOOP TILL DONE
*
GETDIR   TM    SW,X'80'                ERROR?
         BO    ERROR                   YES.
         TM    SW,X'30'                EOF HIT?
         BNZ   DIRDON                  YES.
* UPDATE THE CCHH
         L     R7,ADSCB
         LA    R7,16(R7)               GET A(DSCB)
         TM    TRKS+1,X'FE'            2321?
         BNO   NOT2321                 NO.
         CLI   CCHH+3,20               UPDATE CCHH FOR 2321
         BNL   *+20
         IC    R6,CCHH+3               TRKS
         LA    R6,1(R6)
         STC   R6,CCHH+3
         B     CHKEXT
         MVI   CCHH+3,0
         CLI   CCHH+2,5                CYL/STRIP
         BNL   *+20
         IC    R6,CCHH+2
         LA    R6,1(R6)
         STC   R6,CCHH+2
         B     CHKEXT
         MVI   CCHH+2,0
         CLI   CCHH+1,10               STRIP/SUBCELL
         BNL   *+20
         IC    R6,CCHH+1
         LA    R6,1(R6)
         STC   R6,CCHH+1
         B     CHKEXT
         MVI   CCHH+1,0
         IC    R6,CCHH
         LA    R6,1(R6)                JUST INC SUBCELL
         STC   R6,CCHH
         B     CHKEXT
NOT2321  LH    R6,CCHH+2               GET THE HH
         CH    R6,TRKS                 AT LIMIT OF CYL?
         BL    TRKOK                   NO.
         LH    R6,CCHH                 GET THE CC
         LA    R6,1(R6)                BUMP IT
         STH   R6,CCHH                 THEN SAVE IT
         XR    R6,R6                   RESET THE HH
         B     CYLOK
TRKOK    LA    R6,1(R6)
CYLOK    STH   R6,CCHH+2               STORE THE HH
CHKEXT   CLC   CCHH,X'6F'(R7)          AT END OF FIRST EXTENT?
         BE    ERROR                   YES, ERROR.
         B     EXCP
*
ERROR    L     R6,ADSCB                GET THE A(DSCB AREA)
         MVI   13(R6),X'80'            SET ERROR FLAG
*
DIRDON   L     R6,ADSCB                A(DSCB BLOCK)
         OI    13(R6),X'40'            SET THE 'DONE' FLAG
         STH   R8,158(R6)              # BLKS USED
         STH   R9,156(R6)              # BLKS ALLOCATED
GETMOR   L     R6,ADSCB                A(DSCB BLOCK)
         L     R6,4(R6)                GET THE NEXT BLK
         ST    R6,ADSCB                SAVE NEW PNTR
         LTR   R6,R6                   ALL DONE?
         BNZ   START                   NO, CONTINUE
*
ALDONE   L     R13,4(R13)              RESTORE REGS & RETURN
         RETURN (14,12),T,RC=0
SUPER   SUPVR BASE=11
 EJECT
SAVEAREA DC    18F'0'
CCHH     DC    F'0'                    CURRENT CCHH
ADSCB    DC    A(0)                    A(CORE BLK-DSCB)
ACCWSRT  DC    F'0'
TRKS     DC    H'0'                    TRKS/CYL
         DC    X'00'                   DUMMY FOR 'PDS'
PDS      DC    X'00'                   PDS BLKS PER TRK
SW       DC    X'00'
         AIF   (&SVC EQ 0).SKIP9
NEWDEB   DC    Y(0,1,0,0,1)
EXTS     DC    Y(199,9,1999)           2311
         DC    Y(0,199,199)            2301
         DC    Y(79,9,799)             2303
         DC    Y(491,45,22631)         2302
         DC    YL1(19,5,4,19),Y(19599) 2321
         DC    Y(0,0,0)                2305-1
         DC    Y(0,0,0)                2305-2
         DC    Y(199,19,3999)          2314
         DC    Y(403,18,7675)    9     3330
         DC    Y(0,0,0)          A
         DC    Y(554,29,16649)   B     3350                         FCI
         DC    Y(0,0,0)          C
         DC    Y(807,18,15351)   D     3330-1
         DC    Y(884,14,13274)   E     3380                         NTL
.SKIP9   ANOP
         LTORG
CCWSHA   CCW   X'39',0,X'40',4         SEARCH HOME ADDRESS
CCWTIC   CCW   X'08',0,X'40',0         TRANSFER IN CHANNEL
CCWCKD   CCW   X'1E',0,X'60',20        READ: COUNT,KEY,DATA; LEN=20
*
         END
