/*

                       ______________________
                      ×                      ×
                      ×     A    ACCESS      ×
                      ×     C    CONTROL     ×
                      ×     F    FACILITY    ×
                      ×     MON  MONITOR     ×
                      ×                      ×
                      ×     VERSION  2.0     ×
                      ×______________________×


                            HENRY WACKER

               FAIRCHILD CAMERA & INSTRUMENT CORPORATION
                        A SCHLUMBERGER COMPANY

                          450 NATIONAL AVE
                             MS 22-150
                       MOUNTAIN VIEW, CA 94040
                           (415) 962-3661

                          (C) JULY 1, 1980



*/ PAGE;

/*----------------------------------------------------------------------
           PROGRAM DESCRIPTION
------------------------------------------------------------------------

THIS PROGRAM PROVIDES A DIFFERENT ORGANIZATIONAL APPROACH THAN THE SKK
BATCH REPORT GENERATION FOR THE REPORTING OF VARIOUS ACF2 EVENTS.

THE PROGRAM DESIGN IS FOUNDED ON THE FOLLOWING TWO PREMISES:

1) EACH RULE SET KEY AND/OR LOGONID HAS ASSOCIATED WITH IT A RECIPIENT
   (CONTACT) OF ACF2 EVENT REPORTING

2) ALL ACF2 EVENTS PERTAINING TO A KEY OR LOGONID ARE REPORTED TO THE
   THE CONTACT FOR THE KEY OR LOGONID.


PROGRAM OPERATION CAN BE ILLUSTRATED BY THE FOLLOWING EXAMPLE:

   MIKE IS A TSO USER WITH A LOGONID OF 'XYZ' AND A RULE SET FOR
   HIS TSO ACCOUNT DEFINED WITH A KEY OF 'XYZ'. JOHN IS MIKE'S
   MANAGER AND WILL BE THE RECIPIENT OF ALL ACF2 EVENTS FOR MIKE'S
   TSO LOGONID AND RULE SET.

   THE ASSOCIATION OF A KEY OR LOGONID WITH A CONTACT IN THIS VERSION
   OF THE PROGRAM IS MADE WITH AN INDEX. THE INDEX IS CREATED AND
   MAINTAINED WITH ANY SUTABLE TEXT EDITOR AND HAS THE FOLLOWING
   FORMAT.


        KEY/LID      NAME                   AREA
        (INDEX)      (CONTACT)              (CONTACT'S LOCATION)
        -------      -------------          ------------------------
        XYZ          JOHN                   ROOM 212
        .            .                      .
        .            .                      .
        ACRV         STEVE                  MANAGER,ACCT RECV
        PROD450      STEVE                  MANAGER,ACCT RECV


  IN THE ABOVE EXAMPLE THERE IS A SINGLE INDEX ENTRY FOR MIKE'S TSO
  LOGONID AND RULE SET KEY. THIS VERSION OF THE PROGRAM ASSUMES THAT
  THE SAME CONTACT SHALL BE THE RECIPIENT OF REPORTING FOR LOGONIDS
  AND RULE KEYS THAT ARE IDENTICAL.

  STEVE IS THE MANAGER OF THE ACCOUNTS RECEIVABLE SYSTEM. AR DATASETS
  ARE ORGANIZED UNDER THE KEY OF 'ACRV'  AND STEVE'S PRODUCTION JOBS
  RUN WITH THE LOGONID OF 'PROD450' IN THIS HYPOTHETICAL.

  ALL ACF2 EVENTS FOR THE ABOVE LOGONID'S OR KEYS ARE GATHERED AND
  REPORTED TO STEVE OR JOHN, THEIR REPSECTIVE CONTACTS.

  JOHN MIGHT SEE A LOGONID CHANGE TO LOGONID 'XYZ', A RULE SET CHANGE
  FOR KEY 'XYZ' , DATASET LOGGIN AGAINST 'XYZ' AND PASSWORD VIOLATIONS
  (PASSWORD NOT MATCHED) FOR LOGONID 'XYZ'.

  STEVE MIGHT SEE A RESTRICTED LOGONID JOB SUBMISSION EVENT FOR
  LOGONID 'PROD450', AN INVALID AUTHORITY EVENT (IE INVLAID SOURCE)
  FOR LOGONID 'PROD450' , A DATASET VIOLATION AGAINST THE AR SYSTEM
  -- KEY 'ACRV' AND A RULE SET CHANGE FOR KEY 'ACRV'

  ALL EVENTS ARE REPORTED IN A 'STANDARDIZED' TWO-LINE REPORT FORMAT
  THAT HAS BEEN CAREFULLY DESIGNED TO BE BOTH COMPACT AND HIGHLY
  READABLE.

  LOGONID EVENTS:
       INSERTS, DELETES, CHANGES
       INVALID PASSWORD, AUTHORITY VIOLATIONS
       RESTRICTED LOGONID JOB SUBMISSION

  KEY EVENTS:
       RULE INSERTS, DELETES, CHANGES
       DATASET LOGGING
       DATASET SECURITY VIOLATIONS




  IN ADDITION LOGONID/KEY EVENT REPORTING TO CONTACTS, THERE ARE REPORTS
  PRESENTING THE SAME INFORMATION IN A FORMAT USABLE FOR THE SECURITY
  OFFICER. FOR EXAMPLE, DATASET LOGGING VIA THE LOGONID ATTRIBUTE
  'TRACE' IS REPORTED TO THE GLOBAL SECURITY OFFICERS AND NOT TO THE
  CONTACT FOR THE LOGONID.  (PRESENTLY EVENTS RECORDS GENERATED BY
  'TSO-TRC' ARE NOT HANDLED BY THE PROGRAM). ALL DATASETS VIOLATIONS
  ACCROSS THE WHOLE SYSTEM ARE REPORTED TO THE GLOBAL SECURITY OFFICER.
  ADDITIONAL REPORTS FOR THE GLOBAL SECURITY OFFICER ARE LOGS OF DATASET
  ACCESSES BY LOGONIDS WITH NON-CNCL OR SECURITY AUTHORITY WHERE THE
  ACCESS WAS GRANTED BECAUSE OF THAT AUTHORITY.

  THE PROGRAM ALSO PROVIDES A CROSS-REFERENCE OF EVENTS LOGGED
  AGAINST AN INDEX (KEY OR LOGONID) AND SEPARATE CROSS-REFERENCE
  BY LOGONID CAUSING THOSE EVENTS. A THIRD CROSS-REFERENCE BY CONTACT
  SHOWS THE ACTIVITY REPORTED TO EACH CONTACT.

  THE PROGRAM IS WRITTEN IN SAS (VER 79.3B).  MOST PROGRAM FEATURES ARE
  SELECTABLE VIA SINGLE STATEMENT OPTION MACROS. AND THE PROGRAM CAN
  EASILY BE MODIFIED TO CONFORM TO INSTALLATION DEPENDENT REQUIREMENTS.









*/ PAGE;
/*----------------------------------------------------------------------
           REPORT OPTIONS
------------------------------------------------------------------------

 THIS PROGRAM HAS SEVERAL REPORTING OPTIONS SELECTABLE BY SETTING THE
 APPROPRIATE MACRO DEFINITIONS IN THE THE TABLE BELOW.  THE METHOD OF
 IMPLEMENTING THIS OPTION TECHNIQUE IS AS FOLLOWS. THE STANDARD FOLLOWED
 THROUGHOUT THE PROGRAM IS THAT EACH SOURCE RECORD CONTAINS AT MOST ONE
 EXECUTABLE SAS STATEMENT PER RECORD.  TWO MACROS, 'YES' AND 'NO' ARE
 DEFINED. 'YES' IS A BLANK AND 'NO' IS AN '*'.  THE PROGRAM OPTION
 MACROS ARE THEN DEFINED AS 'YES' OR 'NO'.  THEREFORE WHEN MACRO
 EXPANSION OCCURS, THEY WILL EVALUATE AS EITHER A BLANK OR AN '*'.

 THE PROGRAM OPTION MACRO NAME IS PLACED AS THE FIRST SYNTACTIC WORD ON
 SOURCE RECORDS CONTAINING THOSE SAS STATEMENTS PERTAINING TO THE
 OPTION.  IF THE CORRESPONDING PROGRAM OPTION IS INVOKED IN THE
 NEGATIVE, ('NO'), THE PROGRAM OPTION NAME EVALUATES AS AN '*' AND THE
 ASSOCIATED SAS STATEMENTS BECOME COMMENT STATEMENTS AND ARE NOT
 EXECUTED. IF THE PROGRAM OPTION IS INVOKED IN THE AFFIRMATIVE, ('YES'),
 THE PROGRAM OPTION NAME EVALUATES AS A 'SPACE' AND THE ASSOCIATED SAS
 STATEMENTS ARE THEN INCLUDED IN THE PROGRAM.  CONSIDER THE THE
 FOLLOWING EXAMPLE:

                   MACRO YES   %;
                   MACRO NO  * %;
                   MACRO O_OPT1  YES %;  *CHANGE INCHES TO FEET;
                   MACRO O_OPT2  NO  %;  *PRINT INPUT DATA;
                   DATA E1;
                   INFILE INDDN;
                   INPUT LENGTH HEIGHT WIDTH;
            O_OPT1 LENGTH=LENGTH/12;
            O_OPT1 WIDTH =WIDTH /12;
                   AREA  =LENGTH*WIDTH;
            O_OPT2 PROC PRINT;
            O_OPT2          TITLE3 INPUT DATA;
            O_OPT2  O_OPT1  TITLE4 UNIT OF MEASURE IS FEET;
                   PROC MEANS;
                   TITLE3 LENGTH-WIDTH STATISTICS;
            O_OPT1 TITLE4 UNIT OF MEASURE IS FEET;
                   ETC.....

 THIS TECHNIQUE HAS THE ADVANTAGES THAT IT IS SELF DOCUMENTING AND
 ALLOWS SOURCE STATEMENTS ASSOCIATED WITH AN OPTION TO BE 'DISTRIBUTED'
 THROUGHOUT THE PROGRAM AS REQUIRED.
*/ PAGE;
/*----------------------------------------------------------------------
           REPORT OPTIONS MACRO DEFINITIONS
------------------------------------------------------------------------

           OPTION       CURRENT       OPTION DESCRIPTION
           LABEL        VALUE              /VALUES
           --------     --------      -------------------            */

 MACRO     O_SYNTAX     NO        %;* OBS=0 AND CHECK ALL SOURCE
                                           YES = SYNTAX
                                           NO  = NO SYNTAX         ;

 MACRO     O_PRINT      YES       %;* MISC PRINT
                                           YES = PRINT
                                           NO  = NO PRINT          ;

 MACRO     O_SUM        YES       %;* LOGGING SUMMARY
                                           YES = SUMMARY
                                           NO  = NO SUMMARY        ;

 MACRO     O_KEYXRF     YES       %;* KEY CROSS REFERENCE
                                           YES = XREF IF O_SUM = YES
                                           NO  = NO XREF           ;

 MACRO     O_LIDXRF     YES      %;* LID CROSS REFERENCE
                                           YES = XREF IF O_SUM = YES
                                           NO  = NO XREF           ;

 MACRO     O_LIDJR      YES       %;* LOGONID MODIFICATION JOURNAL
                                           YES = PRINT SEP REPORT
                                           NO  = NO REPORT         ;

 MACRO     O_LIDLG      YES       %;* LOGONID MODIFICATION JOURNAL
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;

 MACRO     O_UD         YES       %;* $USERDATA STATEMENT PROCESSING
                                           YES = EXTRACT $USERDATA
                                           NO  = NO EXTRACT $USERD.;

 MACRO     O_RULEJR     YES       %;* RULE MODIFICATION JOURNAL REPORT
                                           YES = PRINT SEP REPORT
                                           NO  = NO REPORT         ;

 MACRO     O_RULELG     YES       %;* RULE MODIFICATION JOURNAL REPORT
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;

 MACRO     O_RLIDJR     YES       %;* RESTRICTED LOGONID JOB SUMISSION
                                           YES = PRINT SEP REPORT
                                           NO  = NO REPORT         ;

 MACRO     O_RLIDLG     YES       %;* RESTRICTED LOGONID JOB SUMISSION
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;

 MACRO     O_NLIDLG     YES       %;* NON-CANCEL LOGONID SECTION
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;

 MACRO     O_SLIDLG     YES       %;* SECURITY   LOGONID SECTION
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;

 MACRO     O_PSWDJR     YES       %;* INVALID PSWD/AUTHORITY LOG
                                           YES = PRINT SEP REPORT
                                           NO  = NO REPORT         ;

 MACRO     O_PSWDLG     YES       %;* INVALID PSWD/AUTHORITY LOG
                                           YES = INCLUDE ON ACF2 LOG
                                           NO  = DO NOT INCLUDE    ;


 MACRO     O_LID        ALL_OBS  %;* INPUT LID RECS                  ;
 MACRO     O_RULES      ALL_OBS   %;* INPUT RULE DATA                 ;
 MACRO     O_SMFIN      ALL_OBS   %;* INPUT SMF DATA                  ;
 MACRO     O_GSA        ALL_OBS   %;* INPUT KEY REPORT INDEX
                                            ALL_OBS    = READ ALL OBS
                                            NO_OBS     = OBS=0
                                            OBS=#      = READ # OBS
                                            NOTE: SAS DATASETS EXIST
                                                  WITH OBS=#/0        ;

/*--------------------------------------------------------------------*/

 MACRO     NO           *         %;* TO COMMENT-OUT SOURCE STATEMENTS;
 MACRO     YES                    %;* TO INCLUDE SOURCE/NULL VALUE    ;
 MACRO     NO_OBS       OBS=0     %;*  NO OBSERVATIONS TO BE PROCESSED;
 MACRO     ALL_OBS                %;* ALL OBSERVATIONS TO BE PROCESSED;
PAGE;
/*-------------------------------------------------------------------*/;

***     SAS SYSTEM OPTIONS     ***;

OPTIONS PAGESIZE=52 SKIP=4 S=72 SOURCE;
TITLE1 A C F M O N ;
TITLE2 (C) 1980  F.C.I. ;

/*-------------------------------------------------------------------*/
PAGE;
/*-------------------------------------------------------------------*/
/*                    SYNTAX */
/*-------------------------------------------------------------------*/
                       /*
                       THE  MACRO 'O_SYNTAX' HAS A VALUE OF * OR BLANK.
                       A VALUE OF BLANK REDEFINES ALL OTHER OPTION
                       MACROS TO INCLUDE THEIR RESPECTIVE SOURCE
                       STATEMENTS AND SETS OBS = 0   */

O_SYNTAX  DATA _NULL_;
O_SYNTAX  OPTIONS OBS=0;
O_SYNTAX  MACRO O_PRINT  YES       %;* MISC PRINT;
O_SYNTAX  MACRO O_SUM    YES       %;* SUMMARY;
O_SYNTAX  MACRO O_KEYXRF YES       %;* KEY CROSS-REFERENCE;
O_SYNTAX  MACRO O_LIDXRF YES       %;* LID CROSS-REFERENCE;
O_SYNTAX  MACRO O_LIDJR  YES       %;* LOGONID JOURNAL ;
O_SYNTAX  MACRO O_LIDLG  YES       %;* LOGONID JOURNAL ;
O_SYNTAX  MACRO O_UD     YES       %;* $USERDATA STATM ;
O_SYNTAX  MACRO O_RULEJR YES       %;* RULE JOURNAL ;
O_SYNTAX  MACRO O_RULELG YES       %;* RULE JOURNAL ;
O_SYNTAX  MACRO O_RLIDJR YES       %;* RESTRICTED LID ;
O_SYNTAX  MACRO O_RLIDLG YES       %;* RESTRICTED LID ;
O_SYNTAX  MACRO O_NLIDLG YES       %;* N-C LID SECTION;
O_SYNTAX  MACRO O_SLIDLG YES       %;* SEC LID SECTION;
O_SYNTAX  MACRO O_PSWDJR YES       %;* INVLD PSWD/LID ;
O_SYNTAX  MACRO O_PSWDLG YES       %;* INVLD PSWD/LID ;
O_SYNTAX  MACRO O_LID    NO_OBS    %;* INPUT LID RECS ;
O_SYNTAX  MACRO O_RULES  NO_OBS    %;* INPUT RULE DATA ;
O_SYNTAX  MACRO O_SMFIN  NO_OBS    %;* INPUT SMF DATA  ;
O_SYNTAX  MACRO O_GSA    NO_OBS    %;* INPUT KEY REPORT INDEX ;
O_SYNTAX  PUT @20 30*'-';
O_SYNTAX  PUT @20  'NOTE:  SYNTAX CHECK SET OBS=0';
O_SYNTAX  PUT @20  'NOTE:  ALL SOURCE INCLUDED';
O_SYNTAX  PUT @20 30*'-';
PAGE;
/*-------------------------------------------------------------------*/;
*                        GLOBAL MACROS
/*-------------------------------------------------------------------*/;


MACRO  M_SYSNAM ' A C F M O N ' %;
MACRO  M_SYSVER '(2.0) '                   %;

MACRO  M_SEC_F  'CELESTE'%;   * GLOBAL SECURITY OFFICER;
MACRO  M_SEC_L  'FROGNER'%;
MACRO  M_SFT_F  'KEN'    %;   * MANAGER OF SYSTEM SOFTWARE;
MACRO  M_SFT_L  'TRUE'   %;

PAGE;


/*-------------------------------------------------------------------*/
/*                  KEY ASSIGNMENT DATA                              */
/*-------------------------------------------------------------------*/
/*
     THIS CODE CREATES A SAS DATASET CALLED 'KEYDATA' FROM
     AN OS DATASET WHOSE DDNAME IS 'KEYINDEX'.  'KEYDATA'
     IS SORTED AND CHECKED FOR RECORDS THAT ARE OUT OF
     SEQUENCE OR THAT ARE DUPLICATES. THE RESULT IS A VALIDATED
     SAS DATASET CALLED 'KEYINDEX' WHICH IS THEN USED IN THE
     REST OF THE PROGRAM TO DRIVE THE REPORT GENERATOR.

     THE OS DATASET CONTAINING THE KEY INDEX ASSUMES THE FOLLOWING
     RECORD LAYOUT:

        ITEM     COLUMNS  FORMAT        DESCRIPTION
        ----     -------  ------        ----------------------------
        KEY      1-8      $CHAR8.       ACF2 KEY/LID
        NAME     10-29    $20 (MAX)     NAME (FIRST LAST) OF CONTACT,
                                        ONE IMBEDED SPACE SEPARATING
                                        FIRST AND LAST
        AREA     32-47    $CHAR16.      AREA, ADDRESS,ETC FOR CONTACT

     THE FOLLOW SAS VARIABLES ARE CONTAINED ON 'KEYINDEX':

        KEY      - AN ACF2 KEY OR LOGONID NAME
        KEYFNAME - THE NAME (FIRST LAST) OF THE CONTACT TO
        KEYLNAME   RECEIVE REPORTING FOR ALL ACF2 EVENTS FOR
                   THE ACF2 KEY AND/OR LOGONID. ONLY ONE SPACE
                   SPARATES THE FIRST AND LAST NAME -- USE AN
                   UNDERSCORE '_' FOR NAMES WITH OTHER, IMBEDED
                   SPACES.
        KEYAREA  - THE ADDRESS, MAIL STOP, ETC FOR THE CONTACT


     IN THE PRESENT VERSION OF THE PROGRAM, ALL 'KEYS' MUST BE UNIQUE.
     A GIVEN VALUE FOR THE VARIABLE KEY MAY REPRESENT AN ACTUAL ACF2
     KEY AND/OR AN ACF2 LOGONID. WHERE THE VALUE REPRESENTS BOTH,
     ONLY ONE CONTACT CAN RECIEVE NOTICE OF THE ASSOCIATED ACF2 EVENTS.
     THE PROGRAM MUST BE MODIFIED TO ACCOMODATE SEPARATE CONTACTS FOR
     ACF2 KEYS AND LOGONIDS THAT ARE IDENTICAL.
*/PAGE;

DATA
     KEYDATA
          (KEEP = RECNUM KEY KEYFNAME KEYLNAME KEYAREA
          );

INFILE KEYINDEX MISSOVER CLOSE=FREE
               O_GSA;

     INPUT @1  KEY      $CHAR8.
           @10 KEYFNAME:$20. KEYLNAME:$20.
           @32 KEYAREA  $CHAR16.
           ;

     RETAIN LASTKEY '        ' LASTRN 0 ;
     RECNUM=_N_;
     IF LASTKEY > KEY THEN
          DO;
          PUT / 60*'-'
              / 'WARNING: KEY INDEX RECORD SEQUENCE ERROR'
              /  @10 'RECORD NUMBER: ' LASTRN ' KEY: ' LASTKEY
              /  @10 'RECORD NUMBER: ' RECNUM ' KEY: ' KEY
              / ;
          END;
     LASTKEY=KEY;
     LASTRN =RECNUM;


PROC SORT EQUALS DATA=KEYDATA; BY KEY ;

DATA KEYINDEX
          (KEEP = KEY KEYFNAME KEYLNAME KEYAREA
          );

     SET KEYDATA; BY KEY;

     IF FIRST.KEY AND ^LAST.KEY THEN
          PUT / 60*'-' /
             'WARNING: DUPLICATE KEY INDEX RECORDS (LAST RECORD USED)';
     IF ^(FIRST.KEY AND LAST.KEY) THEN
          PUT  /@10 'RECORD NUMBER: ' RECNUM ' KEY: ' KEY;
     IF ^LAST.KEY THEN DELETE;
PAGE;
/*-------------------------------------------------------------------*/;
 *                       RULE PROCESSING
/*-------------------------------------------------------------------*/;
/*
     INFILE ACFRULES IS A SEQUENTIAL DISK DATASET CONTAINING THE SYSOUT
     LISTING OF THE ACF2 COMMAND 'DECOMP LIKE(********)', PROCESSED BY
     THE TSO BATCH EXECUTION MONITOR, IKJEFT01, IN A PREVIOUS STEP OF
     THIS JOB.  RECFM IS VBA AND LRECL IS 133.

     BASICALLY THE PROGRAM PARSES THE DECOMP ACF60030 MESSAGES TO
     BUILD A LIST CURRENT RULES AND THOSE LOGONIDS THAT HAVE CHANGED
     THEM. THE $USERDATA(..) STATEMENT IS ALSO PROCESSED. %CHANGE
     STATEMENTS FOLLOWING THE $USERDATA STATEMENTS ARE NOT PROCESSED
     IN THIS VERSION OF THE PROGRAM. THIS IS THE POINT TO DO IT IF
     YOU NEED TO.

     THE VARIABLE 'MODE' HAS SIGNIFICANCE FOR THOSE INSTALLATIONS USING
     THE CONTENTS OF THE $USERDATA FIELD OF THE RULE SET TO DECIDE HOW
     TO ENFORCE THE RULES. THIS VERSION OF THE PROGRAM ASSUMES THAT THE
     $USERDATA FIELD CONTAINS EITHER 'LOG', 'WARN' OR 'CNCL'.  AN
     PROGRAM OPTION, O_UD, WHEN SET TO 'YES', WILL SET MODE ACCORDINLY.
     THE CODE ASSUMES THAT EACH RULE SET HAS A $USERDATA STATEMENT.
     USING THE $USERDATA FIELD IN THIS SENSE, MODE IS PROPERLY AN
     ATTRIBUTE OF EACH RULE SET.  SEE PAGE 90 OF THE ACF2 PLANNING
     GUIDE. IF O_UD IS 'NO', THEN NO $USERDATA STATEMENTS ARE PROCESSED
     AND MODE IS SET TO 'CNCL'
                                                                      */
DATA
     ACFRULES
          (KEEP = KEY MODE CHGBY CHGDATE DATE TIME
          ) ;
/*--------------------------------------------------------------------*/
INFILE ACFRULES MISSOVER CLOSE=FREE
                O_RULES;
     FORMAT
             ACF60030 $8.
             RULE     $4.
             KEY      $8.
             STORED   $6.
             BY       $2.
             CHGBY    $8.
             ON       $2.
             CHGDATE  $14.
             DATE     MMDDYY8.
             TIME     $5.
             MODE     $4.
             USERDATA $16.
             ;
INPUT
         @2 ACF60030 @
         ;
     IF ACF60030 ^= 'ACF60030' THEN DELETE;


INPUT
     RULE KEY STORED BY CHGBY ON CHGDATE;

     MODE='CNCL';
O_UD INPUT
O_UD /              /* DISCARD $KEY() STATEMENT */
O_UD @2 USERDATA @ ;
O_UD
O_UD IF SUBSTR(USERDATA,1,9)='$USERDATA' THEN
O_UD      DO;
O_UD      MODE=SUBSTR(USERDATA,11,4);
O_UD      IF   MODE = 'LOG)' THEN MODE='LOG ';
O_UD      ELSE
O_UD           IF  MODE^='WARN' AND MODE^='CNCL' THEN
O_UD               MODE ='????';
O_UD      END;
O_UD  ELSE MODE='????';
      TIME=SUBSTR(CHGDATE,10,5);
      DATE=INPUT(CHGDATE,MMDDYY8.);
OUTPUT   ACFRULES;
/*--------------------------------------------------------------------*/
PAGE;
/*--------------------------------------------------------------------*/
              PROC PRINTTO UNIT=21;
/*--------------------------------------------------------------------*/
O_PRINT PROC SORT DATA=ACFRULES;
O_PRINT   BY DESCENDING DATE DESCENDING TIME ;
O_PRINT PROC PRINT UNIFORM DATA=ACFRULES(OBS=40);
O_PRINT   VAR KEY MODE CHGBY CHGDATE;
O_PRINT   TITLE4 ACF2 RULES;
O_PRINT   TITLE5 (40) MOST RECENTLY CHANGED RULE SETS ;

PAGE;
/*-------------------------------------------------------------------*/;
 *                       SMF DATA
/*-------------------------------------------------------------------*/;



 * MACRO DEFINITIONS            ;
 *@39   A_SECTYP PIB1.          ; /* RECORD TYPE FLAGS                */
     MACRO A_SJOURN '1.......'B%; /* THIS RECORD GENERATED BY LOGGING */
     MACRO A_SVIOLG '.1......'B%; /* THIS RECORD GENERATED BY A VIOL  */
     MACRO A_STRACE '..1.....'B%; /* THIS RECORD IS A TRACE           */
     MACRO A_SINSTL '...1....'B%; /* THIS RECORD REQUESTED BY INSTAL. */
     MACRO A_SDTAPE '....1...'B%; /* TAPE DATASET OVERRIDE            */
     MACRO A_SPGMNM '.....1..'B%; /* IF ON, PGMNAME LOGGING/VIOLATION */
     MACRO A_SABEND '......1.'B%; /* UNKNOWN/INVALID PARMLIST ERROR   */
     MACRO A_SVOLUM '.......1'B%; /* IF ON, VOLUME LOG/VIO            */
 *@40   A_SSPID1 PIB1.          ; /* SECURITY MODULE ISSUING SVC      */
        /* A_SSPIOP 0                OPEN DASDM                       */
        /* A_SSPIEV 1                E-O-V DASDM                      */
        /* A_SSPIVS 2                VSAM DSNAME OPEN                 */
        /* A_SSPITO 3                TAPE OPEN                        */
        /* A_SSPITE 4                TAPE E-O-V                       */
        /* A_SSPICT 5                AMS/CATALOG MANAGEMENT           */
        /* A_SSPIAL 6                DASDM NEW DATASET ALLOC          */
        /* A_SSPIRN 7                RENAME DASDM DSNAME              */
        /* A_SSPISC 8                SCRATCH/DELETE                   */
        /* A_SSPIUR 9                USER DEFINED                     */
        /* A_SSPIEX 10               EXTERNAL                         */
        /* A_SSPIPG 11               PROGRAM NAME                     */
        /* A_SSPIPG 12               TAPE EXTENSION                   */
        /* A_SSPIPG 13               TAPE VERIFY OPEN                 */
        /* A_SSPIPG 14               TAPE VERIFY EOV                  */
        /* A_SSPIPG 15               OS CVOL PROCESSOR                */
 *@41   A_SSPAC1 PIB1.          ; /* ACCESS FLAGS                     */
     MACRO A_SSPAIN '.0..0000'B%; /* INPUT ACCESS                     */
     MACRO A_SSPARB '.0..0001'B%; /* READBACK ACCESS                  */
     MACRO A_SSPAIO '.0..0011'B%; /* IN/OUT ACCESS                    */
     MACRO A_SSPAUP '.0..0100'B%; /* UPDATE ACCESS                    */
     MACRO A_SSPAOI '.0..0111'B%; /* OUT/IN ACCESS                    */
     MACRO A_SSPAOU '.0..1111'B%; /* OUTPUT ACCESS                    */
     MACRO A_SSPAEX '.1..0000'B%; /* EXEC ONLY ACCESS                 */
     MACRO A_SSPAOT '.1..1111'B%; /* NON-INPUT: ALLOC/RENAME/SCRATCH  */
     MACRO A_SSPAXX '.0..0000'B%; /* LAST ENTRY FLAG                  */
  /* MASK FOR ABOVE '.1..1111'B
     GARBAGE IN BITS × ××        */
/*@42   A_SSMISC PIB1.               MISC CONTROL BITS                */
/*@43   A_SSCNTL PIB1.               TSO/BATCH CNTL BITS              */
        /* A_SSCTSU  '80'X           USER IS IN TMP, FORE/BACK        */
        /* A_SSCTST  '40'X           USER IS IN TEST COMMAND          */
        /* A_SSCALL  '20'X           USER ISSUED CALL COMMAND         */
        /* A_SSCNOT  '10'X           DISALLOW TEST W/O OPERANDS       */
        /* A_SSCEXC  '08'X           CALL/EXEC BYPASS MODE            */
        /* A_SSCMTP  '04'X           MULTIPLE TMPS, UNKNOWN LIBRARY   */
/*--------------------------------------------------------------------*/
DATA
     SMFDATA
              (KEEP = TYPE
                      JOBNAME   JOBDT     JOBID
                      DATETIME  EVENT     ACCESS
                      SECTYPE   VIOL      REASON
                      LOGONID   USERNAME  SOURCE
                      KEY       DSNAME    MEMBER    VOLUME
                      STEP      PROGRAM   DDNAME    LIBNAME
                      MAXDT     MINDT
               )
     PSWDLID
              (KEEP = TYPE
                      DATETIME LOGONID JOBNAME
                      SUBMITTR SOURCE PROGRAM RC CPU
               )
     RESLIDJL
              (KEEP = TYPE
                      DATETIME LOGONID JOBNAME
                      SUBMITTR SOURCE PROGRAM APFAUTH CPU
               )
     RULEJRNL
              (KEEP = TYPE
                      JOBNAME   JOBDT
                      DATETIME  EVENT     ACCESS
                      KEY       BY        REASON
               )
     LIDJRNAL
              (KEEP = TYPE
                      JOBNAME   JOBDT
                      DATETIME  EVENT     ACCESS
                      LOGONID   BY        REASON
               );

/*-------------------------------------------------------------------*/

INFILE SMFDATA MISSOVER CLOSE=FREE
               RECFM=VBS LRECL=10000 END=LASTREC
               O_SMFIN;

/*-------------------------------------------------------------------*/
FORMAT
     TYPE           3.
     JOBNAME        $CHAR8.
     JOBDT          DATETIME18.
     JOBID          $CHAR8.
     DATETIME       DATETIME18.
     EVENT          $CHAR8.
     ACCESS         $CHAR8.
     SECTYPE        $CHAR8.
     VIOL           $CHAR1.
     REASON         $CHAR8.
     LOGONID        $CHAR8.
     USERNAME       $CHAR20.
     SOURCE         $CHAR8.
     KEY            $CHAR8.
     DSNAME         $CHAR44.
     MEMBER         $CHAR8.
     VOLUME         $CHAR6.
     STEP           $CHAR8.
     PROGRAM        $CHAR8.
     DDNAME         $CHAR8.
     LIBNAME        $CHAR44.
     ;
/*-------------------------------------------------------------------*/
     IF LASTREC THEN
          DO;
          KEY=' '; DSNAME=' '; JOBID='RANGE';
          LOGONID=' '; JOBNAME=' ';
          OUTPUT SMFDATA;
          PUT // @10 24*'-'
               / @10 'FROM: ' MINDT
               / @10 'TO:   ' MAXDT
               / @10 24*'-' //;
          END;
INPUT
     @2   TYPE      PIB1. @;
/*-------------------------------------------------------------------*/

          IF TYPE=220 THEN GO TO L220; /* INVALID PASSWORD/AUTH   */
          IF TYPE=221 THEN GO TO L221; /* LOGGING                 */
          IF TYPE=222 THEN GO TO L222; /* LOGONID MOD/UPDATE      */
          IF TYPE=223 THEN GO TO L223; /* RULE MOD JOURNAL        */
          IF TYPE=224 THEN GO TO L224; /* RES LID JOB SUBMISSION  */
          DELETE;

PAGE;
/*-------------------------------------------------------------------*/;
 *                       TYPE 220 RECORDS
/*-------------------------------------------------------------------*/;
*******************************;
L220:    /* TYPE 220 RECORDS  */
*******************************;

        *MACRO
         ACFSMFP &DSECT=YES
ACFSMFP  ACDEF &DSECT
*
*              ACF INVALID PASSWORD ATTEMPT OR UNAUTHORIZED
*              PATH SMF RECORD
*
         SPACE 1
ACPMFRDW DS    XL4  RDW
ACPMFIND DS    X  SMF SYSTEM INDICATOR
ACPMFVS2 EQU   X'02'  VS2 INDICATOR
ACPMFTYP DS    AL1  RECORD TYPE IN BINARY
ACPMFTIM DS    XL4  TIME OF DAY IN .01 SECS PAST MIDNIGHT
ACPMFDAT DS    PL4  DATE IN PACKED DECIMAL
ACPMFCPU DS    CL4  SMF CPU IDENTIFIER
ACPMFLID DS    CL8  LOGONID ATTEMPTED
ACPMFSRC DS    CL8  SOURCE OF INPUT REQUEST
ACPMFSUB DS    CL8  SUBMITTERS LID OR PROCNAME
ACPMFJBN DS    CL8  JOBNAME SUBMITTED
ACPMFPRG DS    CL8  AUTHORIZED PGM THAT SUBMITTED JOB (IF ANY)
ACPMFWHY DS    X    REASON CODE MESSAGE ID IN BINARY
ACPMFCTL DS    X    ACVCNTL FIELD MAPPED BY ACVALD
ACPMFLEN EQU   *-ACFSMFP  LENGTH OF RECORD
         MEND
FORMAT
              RC       $CHAR44.
              T_MID    $CHAR3.
              ;
INPUT
         @3   DATETIME SMFSTAMP.
         @11  CPU      $CHAR4.
         @15  LOGONID  $CHAR8.
         @23  SOURCE   $CHAR8.
         @31  SUBMITTR $CHAR8.
         @39  JOBNAME  $CHAR8.
         @47  PROGRAM  $CHAR8.
         @55  ACPMFWHY PIB1.
         @56  ACPMFCTL PIB1.
         ;
               RETAIN
               ACF01  '012$PASSWORD NOT MATCHED'
               ACF02  '004@LOGONID NOT FOUND   '
               ACF03  '009$REQD PGM NOT MATCHED'
               ACF04  '008$SUB PGM NOT APF AUTH'
               ACF05  '013$LID SUSP/PSWD VIOLS '
               ACF06  '010$LOGONID CANCELED    '
               ACF07  '011$LOGONID SUSPENDED   '
               ACF08  '002@INVLD SUBFUN REQUEST'
               ACF09  '006$PSWD NOT ALLOWED    '
               ACF10  '007$PASSWRD REQD FOR LID'
               ACF11  '003@RETRN AREA TOO SMALL'
               ACF12  '001@CALLER NOT AUTHORIZD'
               ACF13  '015$INVLD PSWD SYNTAX   '
               ACF14  '016@LOGONID REQUIRED    '
               ACF15  '017$PASSWORD EXPIRED    '
               ACF16  '018$INVLD SYNTX NEW PSWD'
               ACF17  '019$PSWD < MIN LENGTH   '
               ACF18  '020$PSWD < MIN LENGTH   '
               ACF19  '021$PSWD EXPIRED/NO ALTR'
               ACF20  '023$NEW PSWD=OLD PSWD   '
               ACF21  '026$ACCESS DENIED/INSTLL'
               ACF22  '027$PSWD REVAL/NO ACUCB '
               ACF23  '028$PSWD REVAL/NO LID   '
               ACF24  '029$PSWD REVAL/NO MATCH '
               ACF25  '030$STC LID ONLY        '
               ACF26  '031$NO STC ATTR FOR LID '
               ACF27  '032$LID & SOURCE INVALID'
               ACF28  '040@MUSASS NO ACUCB     '
               ACF29  '097@NO DEFAULT LID      '
               ACF30  '099@ACF2 SYSTEM ERROR   '
               ACF31  '128$INVLD PSWD SYNTAX   '
               ACF32  '129$PSWD SUCCESS ALTERED'
               ACF33  '130$PSWD < MIN LENGTH   '
               ACF34  '131$NEW PSWD = OLD PSWD '
               ACF35  '132$NEW PSWD NOT ALLWD  '
               ACF36  '133$NEW PSWD DENIED/INST'
               ;
     ARRAY ACFMES ACF01-ACF36;
     T_MID=PUT(ACPMFWHY,Z3.);
     DO OVER ACFMES;
          IF SUBSTR(ACFMES,1,3)=T_MID THEN
               DO;
               RC    =' ==> ACF01' ×× T_MID ×× ' '
                                   ×× SUBSTR(ACFMES,5,20)
                                   ×× ' FOR ==>';
               T_LGCODE=SUBSTR(ACFMES,4,1);
               GO TO FOUNDMES;
               END;
     END;
     RC    =' ==> ACF01' ×× T_MID ×× ' ==>';
FOUNDMES:
     OUTPUT PSWDLID;

O_PSWDLG     IF T_LGCODE='$' THEN
O_PSWDLG          DO;
O_PSWDLG          IF SUBMITTR^=' ' THEN
O_PSWDLG              USERNAME='BY: '××SUBMITTR;
O_PSWDLG          KEY=LOGONID;
O_PSWDLG          VIOL='P';
O_PSWDLG          DSNAME=RC;
O_PSWDLG          EVENT='PSWD/LID';
O_PSWDLG          ACCESS='INVALID';
O_PSWDLG          REASON='ACF01'××T_MID;
O_PSWDLG          OUTPUT SMFDATA;
O_PSWDLG          END;
RETURN;


PAGE;
/*--------------------------------------------------------------------*/
/*            TYPE 221 RECORDS  (DS LOGGING)                          */
/*--------------------------------------------------------------------*/

/*----------------------------*/
             L221:
/*----------------------------*/

/*      ACFS$SMF                     SMF SECURITY JOURNAL RECORD     */

/*      A_SMFRDW XL4              /* SMF RECORD DESCRIPTOR WORD      */
/*      A_SMFIND XL1              /* SMF SYSTEM INDICATOR BITS       */

INPUT
  @2    A_SMFSMF PIB1.            /* SMF RECORD TYPE, BINARY         */
  @3    DATETIME SMFSTAMP8.       /* SMF RECORD TIME, .01 SEC.
  @11   A_SMFCPU $CHAR4.          /* SMF RECORD SYSTEM CPU ID.       */
  @15   JOBNAME  $CHAR8.          /* JOB NAME ON READER              */
  @23   JOBDT    SMFSTAMP8.       /* JOB TIME ON READER, .01 SEC.    */
                                  /* JOB DATE ON READER, 00YYDDDF    */
  @31   A_SMFUID $CHAR8.          /* SMF COMMON USER ID FIELD        */
  @39   A_SECTYP PIB1.            /* RECORD TYPE FLAGS               */
  @40   A_SSPID1 PIB1.            /* SECURITY MODULE ISSUING SVC     */
  @41   A_SSPAC1 PIB1.            /* ACCESS FLAGS                    */
  @42   A_SSMISC PIB1.            /* MISC CONTROL BITS               */
  @43   A_SSCNTL PIB1.            /* TSO/BATCH CNTL BITS             */
  @44   DSNAME   $CHAR44.         /* DATASET ACCESSED                */
  @88   VOLUME   $CHAR6.          /* VOLUME ON WHICH DATASET RESIDES */
  @94   A_SSPUCB $CHAR3.          /* UCB ON WHICH VOLUME EXISTS      */
  @97   MEMBER   $CHAR8.          /* MEMBER NAME FOR DATASET, IF ANY */
  @105  DDNAME   $CHAR8.          /* DDNAME USED FOR ACCESS, OR BLANK*/
  @113  LIBNAME  $CHAR44.         /* JOB/STEPLIB, CALL LIBRARY NAME  */
  @157  A_SSLVOL $CHAR6.          /* VOLUME ON WHICH LIBRARY RESIDES */
  @163  PROGRAM  $CHAR8.          /* CURRENT PROGRAM/COMMAND EXECING */
  @171  STEP     $CHAR8.          /* CURRENT STEPNAME                */
  @179  EXEC     $CHAR8.          /* CURRENT EXEC=PGM NAME           */
  @187  JOBID    $CHAR8.          /* JES JOB IDENTIFICATION NUMBER   */
  @195  SOURCE   $CHAR8.          /* TCAM LINE UCB#/LINE ID.         */
  @203  LOGONID  $CHAR8.          /* USER LOGON ID                   */
  @211  A_SSSKEY $CHAR8.          /* USERS HIGH LEVEL INDEX          */
  @219  USERNAME $CHAR20.         /* USERS NAME                      */
  @239  A_SLFLAG  PIB2.           /* LID FLAGS ...                   */
  @241  A_SLCND1  PIB1.           /* SVC REASON CODE                 */
  @242  A_SLCND2  PIB1.           /* RM RETURN CODE                  */
  @243  A_SLAPPL  PIB1.           /* ACCESS PERMISSION FLAGS         */
  @247  KEY       $CHAR8.         /* VSAM, KEY OF RULE READ          */
  @255  UID       $CHAR24.        /* USERID STRING                   */
  @279  A_UCOM    $CHAR8.         /* INSTALLATION COMMON AREA        */
  @287  A_SLCOD1  PIB1.           /* SVC/INSTL REASON CODE           */
  @288  A_SLCOD2  PIB1.           /* SVC/DUMP REASON CODE            */
  @289  A_SLCOD3  PIB1.           /* LOG REASON CODE                 */
  @290  A_SLCOD4  PIB1.           /* RESERVED                        */
  ;


PAGE;
/*--------------------------------------------------------------------*/
/*   MIN/MAX DATE-TIME RANGE                                          */
/*--------------------------------------------------------------------*/


     FORMAT MAXDT   DATETIME18.       MINDT  DATETIME18.;
     RETAIN MAXDT '1JAN1970:00:01'DT  MINDT '1JAN99:00:01'DT;
     MAXDT=MAX(MAXDT,DATETIME);
     MINDT=MIN(MINDT,DATETIME);


/*--------------------------------------------------------------------*/
/*   DECODE SECURITY TYPE (A_SECTYP)                                  */
/*--------------------------------------------------------------------*/


     SECTYPE='--------';
     IF A_SECTYP=A_SJOURN THEN
               SUBSTR(SECTYPE,1,1)='L';  /* THIS REC GEN BY LOGGING */
     IF A_SECTYP=A_SVIOLG THEN
               DO;
               VIOL='*';                /* FLAG SECURITY VIOL      */
               SUBSTR(SECTYPE,2,1)='*'; /* THIS REC GEN BY A VIOL  */
               END;
        ELSE
               DO;
               IF A_SLCND1=1 THEN VIOL='S'; ELSE  /* SECURITY LID   */
               IF A_SLCND1=2 THEN VIOL='N';       /* NON-CNCL LID   */
               END;
     IF A_SECTYP=A_STRACE THEN
               DO;
               SUBSTR(SECTYPE,3,1)='T';  /* THIS REC GEN BY A TRACE */
               END;
     IF A_SECTYP=A_SINSTL THEN
               SUBSTR(SECTYPE,4,1)='I';  /* THIS REC REQSTD BY INSTL*/
     IF A_SECTYP=A_SDTAPE THEN
               SUBSTR(SECTYPE,5,1)='O';  /* TAPE DATASET OVERRIDE   */
     IF A_SECTYP=A_SPGMNM THEN
               SUBSTR(SECTYPE,6,1)='P';  /* IF ON, PGMNAME LOG×VIOL */
     IF A_SECTYP=A_SABEND THEN
               SUBSTR(SECTYPE,7,1)='E';  /* UNK×INVLD PARMLIST ERR  */
     IF A_SECTYP=A_SVOLUM THEN
               SUBSTR(SECTYPE,8,1)='V';  /* IF ON, VOL LOG×VIOL     */

PAGE;
/*--------------------------------------------------------------------*/
/*   DECODE ACCESS FLAGS                                              */
/*--------------------------------------------------------------------*/


     RWAE='R=×----×';
     IF A_SLAPPL='1.......'B THEN SUBSTR(RWAE,4,1)='A'; ELSE
     IF A_SLAPPL='.1......'B THEN SUBSTR(RWAE,4,1)='L';
     IF A_SLAPPL='..1.....'B THEN SUBSTR(RWAE,5,1)='A'; ELSE
     IF A_SLAPPL='...1....'B THEN SUBSTR(RWAE,5,1)='L';
     IF A_SLAPPL='....1...'B THEN SUBSTR(RWAE,6,1)='A'; ELSE
     IF A_SLAPPL='.....1..'B THEN SUBSTR(RWAE,6,1)='L';
     IF A_SLAPPL='......1.'B THEN SUBSTR(RWAE,7,1)='A'; ELSE
     IF A_SLAPPL='.......1'B THEN SUBSTR(RWAE,7,1)='L';


/*--------------------------------------------------------------------*/
/*   DECODE A_SLCOD3                                                  */
/*--------------------------------------------------------------------*/


     FORMAT   COD3_1 - COD3_6   $CHAR8.;
     RETAIN
     COD3_1  'LOG/VIOL'   COD3_2  'MAIN PGM'
     COD3_3  'LOGD BLP'   COD3_4  'LOGD PGM'
     COD3_5  'RES PGM '   COD3_6  'RING IN '  ;
     ARRAY COD3(I)  COD3_1 - COD3_6;
     I=A_SLCOD3+1;
     IF 0 < I < 7 THEN CODE3=COD3;
                  ELSE CODE3='COD3='××PUT(A_SLCOD3,3.);


/*--------------------------------------------------------------------*/
/*   DECODE A_SLCND2  /  SET REASON CODE                              */
/*--------------------------------------------------------------------*/


     IF A_SLCND2=0   THEN REASON= RWAE     ;  ELSE
     IF A_SLCND2=4   THEN REASON='NO RULE' ;  ELSE
     IF A_SLCND2=8   THEN REASON='DSN ERR' ;  ELSE
     IF A_SLCND2=12  THEN REASON='NO KEY'  ;  ELSE
     IF A_SLCND2=255 THEN
          DO;
          IF A_SLCOD3=0
                     THEN REASON= SECTYPE   ; ELSE
                          REASON= CODE3    ;
          END;
     ELSE                 REASON='CND2='××PUT(A_SLCND2,3.);

PAGE;
/*--------------------------------------------------------------------*/
/*  DECODE EVENT/ACCESS                                               */
/*--------------------------------------------------------------------*/


     FORMAT EVNT_1 - EVNT_16 $CHAR8.;
     RETAIN
     EVNT_1  'DA-OPEN '    EVNT_2  'EOV-DA  '
     EVNT_3  'VSAM-OPN'    EVNT_4  'TAPE-OPN'
     EVNT_5  'TAPE-EOV'    EVNT_6  'CATALOG '
     EVNT_7  'ALLOC   '    EVNT_8  'RENAME  '
     EVNT_9  'DELETE  '    EVNT_10 'USER-CHK'
     EVNT_11 'EXTERNAL'    EVNT_12 'PGM NAME'
     EVNT_13 'TAPE EXT'    EVNT_14 'T-V OPN '
     EVNT_15 'T-V  EOV'    EVNT_16 'OS CVOL ' ;
     ARRAY EVNT(I)  EVNT_1-EVNT_16;

     I=A_SSPID1+1;
     IF 0 < I < 17 THEN EVENT=EVNT; ELSE EVENT='?';

IF A_SSPAC1=A_SSPAIN THEN ACCESS='INPUT   ';  ELSE
IF A_SSPAC1=A_SSPARB THEN ACCESS='READBACK';   ELSE
IF A_SSPAC1=A_SSPAIO THEN ACCESS='IN/OUT  ';   ELSE
IF A_SSPAC1=A_SSPAUP THEN ACCESS='UPDATE  ';   ELSE
IF A_SSPAC1=A_SSPAOI THEN ACCESS='OUT/IN  ';   ELSE
IF A_SSPAC1=A_SSPAOU THEN ACCESS='OUTPUT  ';   ELSE
IF A_SSPAC1=A_SSPAEX THEN ACCESS='EXECUTE ';   ELSE
IF A_SSPAC1=A_SSPAOT THEN ACCESS='DATASET ';   ELSE
                          ACCESS='?';


     IF EVENT='CATALOG' THEN
          DO;
          IF A_SSMISC='...0....'B THEN
             ACCESS='DEFINE'; ELSE ACCESS='DELETE';
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*   WHAT TO DO IF 'KEY' IS BLANK                                     */
/*--------------------------------------------------------------------*/


     IF KEY=' ' THEN
          IF A_SECTYP=A_STRACE THEN KEY=LOGONID;
          ELSE
          IF A_SLCOD3=4 THEN KEY='×RES PG×';
          ELSE
          KEY='×BLANK×'   ;

/*--------------------------------------------------------------------*/
/*   OUTPUT
/*--------------------------------------------------------------------*/

     OUTPUT SMFDATA;
     RETURN;

PAGE;
/*--------------------------------------------------------------------*/
/*        TYPE 222 RECORDS     (LOGONID JOURNAL)                      */
/*--------------------------------------------------------------------*/

/*----------------------------*/
            L222:
/*----------------------------*/
/*       MACRO
         ACFSMFL &DSECT=YES
ACFSMFL  ACDEF &DSECT

               ACF LOGONID RECORD JOURNAL RECORD

         SPACE 1
ACLMFRDW DS    XL4  RDW
ACLMFIND DS    X  SYSTEM INDICATOR
ACLMFVS2 EQU   X'02' VS2 INDICATOR
ACLMFTYP DS    AL1 RECORD TYPE
ACLMFTIM DS    XL4  TIME OF DAY IN .01 SECONDS
ACLMFDAT DS    PL4  DATE IN PACKED DECIMAL
ACLMFCPU DS    CL4  SMF CPU IDENTIFER
ACLMFJBN DS    CL8  JOB NAME
ACLMFRTM DS    XL4  JOB TIME STAMP FROM READER
ACLMFRDT DS    PL4  JOB DATE STAMP FROM READER
ACLMFUIF DS    CL8  SMF USER IDENTIFICATION
ACLMFCN  DS    X    FUNCTION
ACLMFINS EQU   0      INSERT
ACLMFREP EQU   1      REPLACE
ACLMFDEL EQU   2      DELETE
ACLMFUPD EQU   3      UPDATE BECAUSE OF CHANGES MADE DURING
*                     THE ACCOUNT VALIDATION PROCESS
ACLMFKEY DS    CL8  KEY OF RECORD
ACLMFLID DS    CL8  LOGONID OF USER WHO INITIATED THIS ACTION
ACLMFBSE DS    0F      FULL WORD ALIGN
ACLBLEN  EQU   *-ACFSMFL  LENGTH OF BASE LOGGING RECORD
*
*              IF INSERT/REPLACE, NEW RECORD FOLLOWS
*
ACLMFREC DS    CL(LIDLEN)  AREA FOR RECORD
*
*              IF IT IS A DELETE, THEN THE TIME OF DAY STAMP FOLLOWS
*
         ORG   ACLMFBSE
ACLMFTOD DS    XL8  TIME OF DAY STAMP OF DELETE
ACLDLEN  EQU   *-ACFSMFL  LENGTH OF DELETE SMF RECORD
         ORG
         MEND
*/
PAGE;
/*--------------------------------------------------------------------*/
/*       TYPE 222 RECORDS (CONT.)    (LOGONID JOURNAL)                */
/*--------------------------------------------------------------------*/


INPUT
         @3   DATETIME SMFSTAMP.
         @11  CPU      $CHAR4.
         @15  JOBNAME  $CHAR8.
         @23  JOBDT    SMFSTAMP.
         @39  ACLMFCN  PIB1.
         @40  LOGONID  $CHAR8.
         @48  BY       $CHAR8.
         ;
         IF 0 <= ACLMFCN <= 2 THEN
              DO;
              IF ACLMFCN=0 THEN ACCESS='INSERT'; ELSE
              IF ACLMFCN=1 THEN ACCESS='REPLACE'; ELSE
              IF ACLMFCN=2 THEN ACCESS='DELETE';
              EVENT='LOGONID';
              OUTPUT LIDJRNAL;
O_LIDLG       VIOL='L';
O_LIDLG       DSNAME=' ==> LOGONID MODIFICATION BY ==>';
O_LIDLG       REASON=ACCESS;
O_LIDLG       KEY=LOGONID;
O_LIDLG       LOGONID=BY;
O_LIDLG       OUTPUT SMFDATA;
              END;
         ELSE
              DELETE;

RETURN;

PAGE;
/*--------------------------------------------------------------------*/
/*       TYPE 223 RECORDS     (ACCESS RULE JOURNAL)                   */
/*--------------------------------------------------------------------*/

/*----------------------------*/
             L223:
/*----------------------------*/


/*       MACRO
         ACFSMFR &DSECT=YES
ACFSMFR  ACDEF &DSECT
*
*              ACF ACCESS RULE JOURNAL RECORD
*
*
         SPACE 1
ACRMFRDW DS    XL4  RDW
ACRMFIND DS    X  SYSTEM INDICATOR
ACRMFVS2 EQU   X'02'  VS2
ACRMFTYP DS    AL1  RECORD TYPE IN BINARY
ACRMFTIM DS    XL4  TIME OF DAY IN BINARY .01 SECONDS PAST MIDNIGHT
ACRMFDAT DS    PL4  DATE IN PACKED DECIMAL
ACRMFCPU DS    CL4  SMF CPU IDENTIFIER
ACRMFJBN DS    CL8  JOB NAME THAT CAUSED THIS UPDATE TO OCCUR
ACRMFRTM DS    XL4  JOB TIME STAMP FROM READER
ACRMFRDT DS    PL4  JOB DATE STAMP FROM READER
ACRMFUIF DS    CL8  SMF USER IDENTIFICATION FIELD
ACRMFCN  DS    X    FUNCTION PERFORMED
ACRMFINS EQU   0      INSERT/REPLACE
ACRMFDEL EQU   2      DELETE
ACRMFKEY DS    CL8  KEY OF RECORD
ACRMFLID DS    CL8  LOGONID OF USER WHO INITIATED THIS ACTION
ACRMFBSE DS    0F   FULL WORD ALIGN
ACRBLEN  EQU   *-ACFSMFR  LENGTH OF BASE RECORD
*
*              IF IT IS AN INSERT/REPLACE, NEW RECORD FOLLOWS
*
ACRMFRUL DS    CL4096    ACF 2.1 RULE RECORD MAXIMUM IS 4K      TS71115
*
*              IF IT IS A DELETE, JUST THE TIME OF DAY FOLLOWS
*
         ORG   ACRMFBSE
ACRMFTOD DS    XL8   TIME OF DAY STAMP OF DELETE
ACRDLEN  EQU   *-ACFSMFR  LENGTH OF DELTE RECORD
         ORG
         MEND
*/
PAGE;
/*--------------------------------------------------------------------*/
/*       TYPE 223 RECORDS (CONT.)  (ACCESS RULE JOURNAL)              */
/*--------------------------------------------------------------------*/

INPUT
         @3   DATETIME SMFSTAMP.
         @11  CPU      $CHAR4.
         @15  JOBNAME  $CHAR8.
         @23  JOBDT    SMFSTAMP.
         @39  ACRMFCN  PIB1.
         @40  KEY      $CHAR8.
         @48  BY       $CHAR8.
         ;

         IF 0 <= ACRMFCN <= 2 THEN
              DO;
              IF ACRMFCN=0 THEN ACCESS='INSERT'; ELSE
              IF ACRMFCN=1 THEN ACCESS='REPLACE'; ELSE
              IF ACRMFCN=2 THEN ACCESS='DELETE';
              EVENT='RULE   ';
              OUTPUT RULEJRNL;
O_RULELG      VIOL='R';
O_RULELG      DSNAME=' ==> ACCESS RULE MODIFICATION BY ==>';
O_RULELG      REASON=ACCESS;
O_RULELG      LOGONID=BY;
O_RULELG      OUTPUT SMFDATA;
              END;
         ELSE
              DELETE;

RETURN;


PAGE;
/*--------------------------------------------------------------------*/
/*       TYPE 224 RECORDS  (RESTRICTED LID JOB SUBMISSION JOURNAL)    */
/*--------------------------------------------------------------------*/

/*----------------------------*/
             L224:
/*----------------------------*/

/*ACF RESTRICTED LID JOB SUBMISSION LOG                            *
         MACRO
         ACFSMFJ &DSECT=YES
ACFSMFJ  ACDEF &DSECT
*
*              ACF RESTRICTED LID JOB SUBMISSION LOG
*
*  ACFSMFJ --> ACF2 IS A LICENSED PROGRAM PRODUCT  -FEB, 1978
*              OF SCHRAGER KLEMENS AND KRUEGER, INC.
*
*
         SPACE 1
ACJMFRDW DS    XL4   RDW
ACJMFIND DS    X     SYSTEM INDICATOR
ACJMFVS2 EQU   X'02' VS2 INDICATOR
ACJMFTYP DS    AL1   RECORD TYPE
ACJMFTIM DS    XL4   TIME OF DAY IN .01 SECS PAST MIDNIGHT
ACJMFDAT DS    PL4   DATE IN PACKED DECIMAL
ACJMFCPU DS    CL4   SMF CPU IDENTIFIER
ACJMFLID DS    CL8   RESTRICTED LID NAME
ACJMFJBN DS    CL8   JOB NAME THAT WAS SUBMITTED
ACJMFSUB DS    CL8   SUBMITTERS LID OR PROC NAME
ACJMFSRC DS    CL8   SOURCE OF REQUEST (READER1, INTRDR, ETC.)
ACJMFPRG DS    CL8   AUTHORIZED PROGRAM NAME THAT SUBMITTED JOB
ACJMFPTH DS    CL8   PATH OF SUBMISSION (UNUSED IN RELEASE 1)
ACJMFCTL DS    X     ACVCNTL FIELD MAPPED BY ACVALD
ACJLEN   EQU   *-ACFSMFJ  LENGTH OF RECORD
         MEND */

PAGE;
/*--------------------------------------------------------------------*/
/*       TYPE 224 RECORDS  (RESTRICTED LID JOB SUBMISSION JOURNAL)    */
/*--------------------------------------------------------------------*/

INPUT
         @3   DATETIME SMFSTAMP.
         @11  CPU      $CHAR4.
         @15  LOGONID  $CHAR8.
         @23  JOBNAME  $CHAR8.
         @31  SUBMITTR $CHAR8.
         @39  SOURCE   $CHAR8.
         @47  PROGRAM  $CHAR8.
         @55  ACJMFCTL PIB1.
         ;

         IF ACJMFCTL='.0......'B THEN APFAUTH='NO';

OUTPUT   RESLIDJL;

O_RLIDLG  IF LOGONID = 'ACFDUMMY'  AND
O_RLIDLG       VERIFY(SUBSTR(JOBNAME,2,3),'0123456789')=0 THEN
O_RLIDLG       DO;
O_RLIDLG            DSNAME=' ==> JOB WITHOUT LOGONID  ==>';
O_RLIDLG            KEY = 'A00'××SUBSTR(JOBNAME,2,3);
O_RLIDLG            USERNAME='ERROR: LOGONID REQD';
O_RLIDLG            EVENT = 'LOGONID';
O_RLIDLG            ACCESS = 'OMITTED';
O_RLIDLG            STEP='BY-';
O_RLIDLG            REASON='NO LID';
O_RLIDLG            IF SUBMITTR^=' ' THEN
O_RLIDLG                 LIBNAME='SUBMITTER: '××SUBMITTR;
O_RLIDLG            VIOL='L';
O_RLIDLG            OUTPUT SMFDATA;
O_RLIDLG       END;

RETURN;

/*--------------------------------------------------------------------*/
/*       SMFDATA AND DATA SET STATS                                   */
/*--------------------------------------------------------------------*/
PAGE;
/*--------------------------------------------------------------------*/
/*       RESTRICTED LID JOB SUBMISSION JOURNAL REPORT                 */
/*--------------------------------------------------------------------*/

O_RLIDJR PROC SORT DATA=RESLIDJL;
O_RLIDJR      BY JOBNAME SOURCE DATETIME;
O_RLIDJR
O_RLIDJR PROC PRINT UNIFORM DATA=RESLIDJL;
O_RLIDJR      VAR DATETIME JOBNAME LOGONID SUBMITTR
O_RLIDJR          SOURCE PROGRAM APFAUTH CPU;
O_RLIDJR      TITLE4 RESTRICTED LOGONID JOBLOG;
O_RLIDJR      TITLE5 BY JOBNAME SOURCE DATE-TIME;
O_RLIDJR
O_RLIDJR DATA RESLIDRL;
O_RLIDJR      SET RESLIDJL;
O_RLIDJR      IF SUBSTR(PROGRAM,1,3)^='RMT' THEN DELETE;
O_RLIDJR
O_RLIDJR PROC SORT DATA=RESLIDRL;
O_RLIDJR      BY PROGRAM SOURCE JOBNAME DATETIME;
O_RLIDJR
O_RLIDJR PROC PRINT UNIFORM DATA=RESLIDRL;
O_RLIDJR      VAR DATETIME SOURCE JOBNAME LOGONID
O_RLIDJR          SUBMITTR PROGRAM APFAUTH CPU;
O_RLIDJR      TITLE4 REMOTE SOURCE RESTRICTED LOGONID JOBLOG;
O_RLIDJR      TITLE5 BY SOURCE JOBNAME DATE-TIME;

PAGE;
/*--------------------------------------------------------------------*/
/*       RULE / LOGONID MODIFICATION JOURNAL REPORT                   */
/*--------------------------------------------------------------------*/

O_RULEJR PROC SORT DATA=RULEJRNL;
O_RULEJR       BY KEY DATETIME;
O_RULEJR  PROC PRINT UNIFORM DATA=RULEJRNL;
O_RULEJR       ID DATETIME;
O_RULEJR       VAR ACCESS KEY BY JOBNAME;
O_RULEJR       TITLE4 RULE MODIFCATION JOURNAL;
O_RULEJR       TITLE5 ;

O_LIDJR   PROC SORT DATA=LIDJRNAL;
O_LIDJR        BY LOGONID DATETIME ;
O_LIDJR   PROC PRINT UNIFORM DATA=LIDJRNAL;
O_LIDJR        ID DATETIME;
O_LIDJR        VAR ACCESS LOGONID BY JOBNAME;
O_LIDJR        TITLE4 LOGONID MODIFICATION JOURNAL;
O_LIDJR        TITLE5 ;


PAGE;
/*--------------------------------------------------------------------*/
/*       PASSWORD - LOGONID AUTHORITY VIOLATION REPORT                */
/*--------------------------------------------------------------------*/

O_PSWDJR   PROC SORT DATA=PSWDLID;
O_PSWDJR        BY LOGONID DATETIME ;
O_PSWDJR   PROC PRINT UNIFORM DATA=PSWDLID;
O_PSWDJR        ID DATETIME;
O_PSWDJR        VAR LOGONID JOBNAME SUBMITTR SOURCE PROGRAM RC CPU;
O_PSWDJR        TITLE4 INVALID PASSWORD/AUTHORITY LOG;
O_PSWDJR        TITLE5 BY LOGONID DATE-TIME;

O_PSWDJR   PROC SORT DATA=PSWDLID;
O_PSWDJR        BY SOURCE DATETIME ;
O_PSWDJR   PROC PRINT UNIFORM DATA=PSWDLID;
O_PSWDJR        ID DATETIME;
O_PSWDJR        VAR LOGONID JOBNAME SUBMITTR SOURCE PROGRAM RC CPU;
O_PSWDJR        TITLE4 INVALID PASSWORD/AUTHORITY LOG;
O_PSWDJR        TITLE5 BY SOURCE DATE-TIME;
PAGE;
/*-------------------------------------------------------------------*/
/*                       MERGE SORT                                  */
/*-------------------------------------------------------------------*/

PROC SORT DATA=ACFRULES; BY KEY ;
PROC SORT DATA=SMFDATA ; BY KEY DSNAME LOGONID JOBNAME;

/*-------------------------------------------------------------------*/
/*                       MERGE DATA STEP                             */
/*-------------------------------------------------------------------*/

DATA
     ACF2SMF
              (KEEP = TYPE      SORTKEYA  COUNT
                      JOBNAME   JOBDT     JOBID
                      DATETIME  EVENT     ACCESS
                      SECTYPE   VIOL      REASON
                      LOGONID   USERNAME  SOURCE
                      KEY       DSNAME    MEMBER    VOLUME
                      STEP      PROGRAM   DDNAME    LIBNAME
                      MAXDT     MINDT
                      AREA      FIRSTNAM  LASTNAME  NOTIFY
                      MODE      CHGBY     CHGDATE
            );
/*--------------------------------------------------------------------*/

     MERGE
          SMFDATA  (IN=INACF)
          KEYINDEX (IN=INGSA)
          ACFRULES (IN=INRULE)
          ;
                   BY KEY ;
/*--------------------------------------------------------------------*/
     IF INACF;
/*--------------------------------------------------------------------*/
PAGE;
/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  DECLARATIONS                             */
/*-------------------------------------------------------------------*/

     FORMAT
          AREA      $CHAR16.
          FIRSTNAM  $CHAR16.
          LASTNAME  $CHAR16.
          SORTKEYA  $CHAR8.
          ;

/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  MIN/MAX DATE-TIME                        */
/*-------------------------------------------------------------------*/
               RETAIN T_MAXDT T_MINDT;
               DROP   T_MAXDT T_MINDT;

               IF JOBID='RANGE' THEN
                    DO;
                    T_MAXDT=MAXDT;
                    T_MINDT=MINDT;
                    DELETE;
                    END;

     MAXDT=T_MAXDT;
     MINDT=T_MINDT;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  COMMON CODE                              */
/*-------------------------------------------------------------------*/

     AREA=KEYAREA;
     LASTNAME=KEYLNAME;
     FIRSTNAM=KEYFNAME;
     SORTKEYA='2';
     COUNT=0;

/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  RESTRICTED PROGRAMS                      */
/*-------------------------------------------------------------------*/

     IF KEY='×RES PG×' THEN
          DO;
          AREA='SECURITY';
          FIRSTNAM=M_SEC_F;
          LASTNAME=M_SEC_L;
          OUTPUT ACF2SMF;
          AREA='SYSTEMS SOFTWARE';
          FIRSTNAM=M_SFT_F;
          LASTNAME=M_SFT_L;
          OUTPUT ACF2SMF;
          RETURN;
          END;

PAGE;
/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  TRACE RECORDS                            */
/*-------------------------------------------------------------------*/



     IF SUBSTR(SECTYPE,3,1)='T' THEN
          DO;
          AREA='SECURITY TRACE';
          FIRSTNAM=M_SEC_F;
          LASTNAME=M_SEC_L;
          OUTPUT ACF2SMF;
          RETURN;
          END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  TSO RECORDS WITH NO KEY INDEX ENTRY      */
/*-------------------------------------------------------------------*/

     IF SUBSTR(KEY,1,1)='$' AND KEYAREA=' ' THEN
          DO;
          AREA='TSO LOGGING';
          FIRSTNAM=M_SEC_F;
          LASTNAME=M_SEC_L;
          END;
     ELSE

/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OTHER RECORDS WITH NO KEY INDEX ENTRY    */
/*-------------------------------------------------------------------*/

     IF KEYAREA =' ' THEN
          DO;
          AREA='UNASSIGNED KEYS';
          FIRSTNAM=M_SEC_F;
          LASTNAME=M_SEC_L;
          END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT                                   */
/*-------------------------------------------------------------------*/


     OUTPUT ACF2SMF;

PAGE;
/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  VIOLATION SUMMARYS               */
/*-------------------------------------------------------------------*/

     IF VIOL='*' THEN
          DO;
          T_KEY = KEY; KEY='× VIOL ×';
          OUTPUT ACF2SMF;
          KEY=T_KEY;
          AREA='DS VIOLATIONS';

          FIRSTNAM=M_SEC_F;
          LASTNAME=M_SEC_L;
          OUTPUT ACF2SMF;

          FIRSTNAM=M_SFT_F;
          LASTNAME=M_SFT_L;
          OUTPUT ACF2SMF;

          END;

/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  NON-CNCL LID JOURNALS           */
/*-------------------------------------------------------------------*/


O_NLIDLG  IF VIOL='N' THEN
O_NLIDLG       DO;
O_NLIDLG       AREA='NON-CNCL LID LOG';
O_NLIDLG       FIRSTNAM=M_SEC_F;
O_NLIDLG       LASTNAME=M_SEC_L;
O_NLIDLG       OUTPUT ACF2SMF;
O_NLIDLG       END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  SECURITY LID SECTIONS            */
/*-------------------------------------------------------------------*/

O_SLIDLG  IF VIOL='S' THEN
O_SLIDLG       DO;
O_SLIDLG       AREA='SECURITY LID LOG';
O_SLIDLG       FIRSTNAM=M_SEC_F;
O_SLIDLG       LASTNAME=M_SEC_L;
O_SLIDLG       OUTPUT ACF2SMF;
O_SLIDLG       END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  PSWD/LID VIOL SECTIONS           */
/*-------------------------------------------------------------------*/

O_PSWDLG  IF TYPE=220 THEN
O_PSWDLG       DO;
O_PSWDLG       AREA='PSWD/LID VIOL';
O_PSWDLG       FIRSTNAM=M_SEC_F;
O_PSWDLG       LASTNAME=M_SEC_L;
O_PSWDLG       OUTPUT ACF2SMF;
O_PSWDLG
O_PSWDLG       END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  LID MOD JOURNAL SECTIONS         */
/*-------------------------------------------------------------------*/

O_LIDLG   IF TYPE=222 THEN
O_LIDLG        DO;
O_LIDLG        AREA='LOGONID JOURNAL';
O_LIDLG        FIRSTNAM=M_SEC_F;
O_LIDLG        LASTNAME=M_SEC_L;
O_LIDLG        OUTPUT ACF2SMF;
O_LIDLG        END;


/*-------------------------------------------------------------------*/
/*        MERGE DATA STEP:  OUTPUT  RULE MOD JOURNAL SECTIONS        */
/*-------------------------------------------------------------------*/

O_RULELG  IF TYPE=223 THEN
O_RULELG       DO;
O_RULELG       AREA='RULE JOURNAL';
O_RULELG       FIRSTNAM=M_SEC_F;
O_RULELG       LASTNAME=M_SEC_L;
O_RULELG       OUTPUT ACF2SMF;
O_RULELG       END;
PAGE;

/*--------------------------------------------------------------------*/
/*            SUMMARY AND CROSS-REFERENCE                             */
/*--------------------------------------------------------------------*/


DATA XREFSUM
    (KEEP= LASTNAME FIRSTNAM NAME AREA SORTKEYA
           KEY LOGONID USERNAME EVENT ACCESS MINDT MAXDT);

/*--------------------------------------------------------------------*/

    FORMAT
         SORTKEYA  $CHAR8.
         NAME      $CHAR20. ;

/*--------------------------------------------------------------------*/

    SET ACF2SMF;

         IF KEY='× VIOL ×' THEN DELETE;

/*--------------------------------------------------------------------*/

    SORTKEYA='1';
    NAME=TRIM(FIRSTNAM) ×× ' ' ×× TRIM(LASTNAME);

/*--------------------------------------------------------------------*/

    IF VIOL^=' ' THEN
         DO;
              IF VIOL='*' THEN
                   DO;
                   EVENT='DATASET';
                   ACCESS='VIOL   *';
                   END;
         ELSE IF VIOL='N' THEN
                   DO;
                   EVENT='N-C LID';
                   ACCESS='DS LOG';
                   END;
         ELSE IF VIOL='S' THEN
                   DO;
                   EVENT='SEC LID';
                   ACCESS='DS LOG';
                   END;
         ELSE IF VIOL='P' THEN
                   DO;
                   ACCESS='VIOL   *';
                   END;
         /*   IF VIOL='R' THEN EVENT AS IS
              OR VIOL='L'      ACCESS AS IS */
         END;
    ELSE DO;
         IF KEY^='×RES PG×' THEN
              DO;
              EVENT='DATASET';
              ACCESS='LOGGING';
              END;
         END;
OUTPUT;




/*--------------------------------------------------------------------*/
/*            SUMMARY                                                 */
/*--------------------------------------------------------------------*/


PROC SUMMARY DATA=XREFSUM NWAY MISSING;
     CLASS LASTNAME FIRSTNAM NAME AREA SORTKEYA
           KEY LOGONID USERNAME EVENT ACCESS;
     ID MAXDT MINDT;
     OUTPUT OUT=SUMMARY;

/*--------------------------------------------------------------------*/
/*            KEY CROSS-REFERENCE                                     */
/*--------------------------------------------------------------------*/

O_KEYXRF PROC SUMMARY DATA=XREFSUM MISSING NWAY;
O_KEYXRF      CLASS KEY NAME AREA;
O_KEYXRF      OUTPUT OUT=KEYXREF;

/*--------------------------------------------------------------------*/
/*            LID CROSS-REFERENCE                                     */
/*--------------------------------------------------------------------*/

O_LIDXRF PROC SUMMARY DATA=XREFSUM MISSING NWAY;
O_LIDXRF      CLASS LOGONID USERNAME KEY EVENT ACCESS AREA NAME;
O_LIDXRF      OUTPUT OUT=LIDXREF;

PAGE;

/*--------------------------------------------------------------------*/
/*            KEY CROSS-REFERENCE REPORT                              */
/*--------------------------------------------------------------------*/


O_KEYXRF PROC EXPLODE;
O_KEYXRF PARMCARDS; O_KEYXRF
S  9
9  KEY XREF
P
*;

O_KEYXRF PROC PRINT UNIFORM DATA=KEYXREF(RENAME=(_FREQ_=COUNT));
O_KEYXRF      ID KEY;
O_KEYXRF      DROP _TYPE_ ;
O_KEYXRF      TITLE3 ;
O_KEYXRF      TITLE4  ______________________________ ;
O_KEYXRF      TITLE5 ×                              × ;
O_KEYXRF      TITLE6 ×                              × ;
O_KEYXRF      TITLE7 ×     KEY CROSS-REFERENCE      × ;
O_KEYXRF      TITLE8 ×                              × ;
O_KEYXRF      TITLE9 ×______________________________× ;
O_KEYXRF      TITLE10 ;
O_KEYXRF
PAGE;


/*--------------------------------------------------------------------*/
/*            LID CROSS-REFERENCE REPORT                              */
/*--------------------------------------------------------------------*/


O_LIDXRF PROC EXPLODE;
O_LIDXRF PARMCARDS; O_LIDXRF
S  9
9  LOGONID  XREF
P
*;

O_LIDXRF PROC PRINT UNIFORM DATA=LIDXREF(RENAME=(_FREQ_=COUNT));
O_LIDXRF      ID LOGONID;
O_LIDXRF      DROP _TYPE_;
O_LIDXRF      TITLE4  ______________________________ ;
O_LIDXRF      TITLE5 ×                              × ;
O_LIDXRF      TITLE6 ×                              × ;
O_LIDXRF      TITLE7 ×    LOGONID CROSS-REFERENCE   × ;
O_LIDXRF      TITLE8 ×                              × ;
O_LIDXRF      TITLE9 ×______________________________× ;
O_LIDXRF      TITLE10 ;
O_LIDXRF
PAGE;


/*--------------------------------------------------------------------*/
/*            SUMMARY REPORT                                          */
/*--------------------------------------------------------------------*/


O_SUM PROC EXPLODE;
O_SUM PARMCARDS; O_SUM
S  9
9  S U M M A R Y
P
*;

O_SUM PROC PRINT UNIFORM DATA=SUMMARY(RENAME=(_FREQ_=COUNT));
O_SUM      BY NAME AREA NOTSORTED;
O_SUM      ID KEY;
O_SUM      VAR LOGONID USERNAME EVENT ACCESS COUNT;
O_SUM      OPTIONS NOCENTER;
O_SUM      TITLE4  .______________________________.;
O_SUM      TITLE5  ×                              × ;
O_SUM      TITLE6  ×                              × ;
O_SUM      TITLE7  ×   SUMMARY OF ACF2 LOGGING    × ;
O_SUM      TITLE8  ×                              × ;
O_SUM      TITLE9  ×______________________________× ;
O_SUM      TITLE10 ;
O_SUM
PAGE;


/*--------------------------------------------------------------------*/
/*        ACF2 LOGGING REPORT                                         */
/*--------------------------------------------------------------------*/

/*--------------------------------------------------------------------*/
          PROC PRINTTO UNIT=22;
/*--------------------------------------------------------------------*/
OPTIONS CENTER SKIP=0;

PROC EXPLODE;
PARMCARDS;
S 9
9   ACF2 LOGGING
P
*;


PROC SORT DATA=ACF2SMF;
          BY LASTNAME FIRSTNAM AREA SORTKEYA
             KEY DSNAME LOGONID
             JOBDT JOBID
             DATETIME;

PAGE;
/*--------------------------------------------------------------------*/
/*        ACF2 LOGGING REPORT                                         */
/*--------------------------------------------------------------------*/


DATA _NULL_;     /*ACF LOGGING REPORT*/

/*--------------------------------------------------------------------*/
FILE PRINT HEADER=RPTAHEAD NOTITLES
          LINESLEFT=LL LINE=LN PS=60 MOD;
/*--------------------------------------------------------------------*/
     FORMAT
             TOD        $29.
             SVIOL      $CHAR32.
             T_PGMLIB   $CHAR17.
             T_LID      $CHAR11.
             R_LID      $CHAR11.
             R_DATE     $CHAR5.
             R_TIME     $CHAR8.
             NAME       $CHAR20.
             ;
     RETAIN  SVIOL    L_VOL    L_PGM    L_PGMLIB L_DDN
             L_DATE   L_STEP   L_EVENT  L_ACCESS L_SOURCE
             L_LID    L_JOBID  L_REASON L_DSNAME         ;

/*--------------------------------------------------------------------*/
/*        SET TRANSACTIONS                                            */
/*--------------------------------------------------------------------*/

     SET
          SUMMARY(DROP=_TYPE_ NAME RENAME=(_FREQ_=COUNT))
          ACF2SMF ;

          BY LASTNAME FIRSTNAM AREA SORTKEYA KEY NOTSORTED;

/*--------------------------------------------------------------------*/
/*        PAGE CONTROL                                                */
/*--------------------------------------------------------------------*/

     IF (LL < 6)               OR
        (LL < 9 AND FIRST.KEY) OR
        FIRST.SORTKEYA         THEN
          DO;
          TOD=PUT(DATE(),WEEKDATE.);
          PUT #59 @16 SVIOL
              #60 @20 'PRINTED ON ' TOD ;
          LINK RESET;
          SVIOL=' ';
          END;
PAGE;
/*--------------------------------------------------------------------*/
/*      SORTKEY '1' RECORDS                                           */
/*--------------------------------------------------------------------*/


     IF SORTKEYA='1' THEN
          DO;
          PUT
               @34 KEY
               @44 LOGONID
               @54 USERNAME
               @76 EVENT
               @86 ACCESS
               @96 COUNT     5.
               ;
          IF LAST.SORTKEYA  OR LL < 12 THEN
               DO;
               PUT
                //  @27  80*'_'
                //  @27 'PLEASE, UPDATE YOUR ACF2 RULE SETS TO EL'
                        'IMINATE THE ABOVE LOGGING WHERE POSSIBLE'
                //  @27 'JOBS RUNNING WITH <ACFDUMMY> AS THE LOGO'
                        'NID, MUST USE A PROPER LOGONID STATEMENT'
                 /  @27 'AFTER THE JOB CARD: //*LOGONID <LOGONID>'
                        '  JOBS WITHOUT A LOGONID WILL NOT BE RUN'
                 /  @27  80*'_'
                   ;
              END;
          RETURN;
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*      SORTKEY '2' RECORDS                                           */
/*--------------------------------------------------------------------*/


     IF FIRST.KEY OR LN < 11 THEN
          DO;
          LINK RESET;
          IF KEY='×RES PG×' THEN
               PUT // 'KEY' @7 KEY  @28 'RESTRICTED PROGRAM LOGGING';
          ELSE
          IF KEY='× VIOL ×' THEN
               PUT // 'KEY' @7 KEY  @28 'VIOLATION SUMMARY'   ;
          ELSE
          IF KEY='×BLANK×' THEN
               PUT // 'KEY' @7 KEY  @28 'UNKNOWN KEY      '   ;
          ELSE
          IF REASON='NO KEY' THEN
               PUT // 'KEY' @7 KEY  @28 'NO RECORD IN RULE DATABASE';
          ELSE
          IF TYPE  = 222     THEN
               PUT // 'KEY' @7 KEY  ;
          ELSE
               PUT // 'KEY' @7 KEY
                            @18 MODE
                                    @28 'STORED BY ' CHGBY $CHAR8.
                                        ' ON '       CHGDATE    ;
          I=LENGTH(KEY);
          RETAIN R_DASH '--------';
          PUT               @7 R_DASH $VARYING8. I;
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*        LIBNAME PROCESSING                                          */
/*--------------------------------------------------------------------*/


     IF TYPE=221 THEN
          DO;
          IF LIBNAME='SYS1.LINKLIB' THEN LIBNAME=' '; ELSE
          IF LIBNAME=' ' THEN LIBNAME='U/L-0 *BLANK*'; ELSE
          IF SUBSTR(LIBNAME,1,15)='UNKNOWN.LIBRARY' THEN
               DO;
               T_PGMLIB=SCAN(LIBNAME,3);
               IF LENGTH(T_PGMLIB)=1  AND
                  '0' < SUBSTR(T_PGMLIB,1,1) < '8' THEN
                    DO;
                    I=INPUT(SUBSTR(T_PGMLIB,1,1),1.);
                    RETAIN
                    UNKLIB1   'U/L-1 CONCAT LIB'
                    UNKLIB2   'U/L-2 TMP INTERF'
                    UNKLIB3   'U/L-3 IVLD MODEL'
                    UNKLIB4   'U/L-4 TMP PATH  '
                    UNKLIB5   'U/L-5 PGM PATH  '
                    UNKLIB6   'U/L-6 TMP BATCH '
                    UNKLIB7   'U/L-7 IVLD CALL '
                    ;
                    ARRAY LIBMES(I) UNKLIB1-UNKLIB7;
                    LIBNAME=LIBMES;
                    END;
              ELSE
                    LIBNAME='U/L-'××T_PGMLIB;
              END;
          END;
     T_PGMLIB=LIBNAME;
     IF SUBSTR(T_PGMLIB,17,1)^=' ' THEN SUBSTR(T_PGMLIB,17,1)='+';
PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE: TIME DATE  /  VIOL                        */
/*--------------------------------------------------------------------*/


     R_TIME=PUT(TIMEPART(DATETIME),TIME8.);
     SUBSTR(R_TIME,3,1)='.'; SUBSTR(R_TIME,6,1)='.';
     R_TIME=LEFT(R_TIME);


     R_DATE                = PUT(DATEPART(DATETIME),MMDDYY5.);
     SUBSTR(R_DATE,3,1)    = '-'                             ;
     IF SUBSTR(R_DATE,1,1) = '0' THEN SUBSTR(R_DATE,1,1)=' ' ;
     R_DATE                = LEFT(R_DATE);

     IF L_DATE            ^= R_DATE THEN L_DATE=R_DATE       ; ELSE
     R_DATE                = ' '                             ;

     IF VIOL='*' OR VIOL ='P' THEN R_VIOL='*';

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE:  DSNAME VOLUME EVENT ACCESS               */
/*--------------------------------------------------------------------*/

     IF L_DSNAME^=DSNAME OR LN<13  THEN
          DO;
          R_DSN=DSNAME; L_DSNAME=DSNAME;
          R_VOL=VOLUME; L_VOL=VOLUME;
          END;
     ELSE DO;
          R_DSN='.';
          IF VOLUME^=L_VOL THEN
               DO;
               R_VOL=VOLUME;
               L_VOL=VOLUME;
               END;
          ELSE
               IF VOLUME^=' ' THEN R_VOL='.';
          END;

     IF L_EVENT^=EVENT OR L_ACCESS^=ACCESS THEN
          DO;
          R_EVENT=EVENT;     L_EVENT=EVENT;
          R_ACCESS=ACCESS;   L_ACCESS=ACCESS;
          END;
     ELSE DO;
          R_EVENT='.';
          R_ACCESS='.';
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE:  LOGONID USERNAME SOURCE                  */
/*--------------------------------------------------------------------*/


     IF VIOL='N' OR VIOL='S' THEN
          T_LID=TRIM(LOGONID)××'('××TRIM(VIOL)××')';
     ELSE T_LID=LOGONID;

     IF L_LID^=T_LID THEN
          DO;
          R_LID=T_LID;           L_LID=T_LID;
          R_UNAME=USERNAME;
          R_SOURCE=SOURCE;       L_SOURCE=SOURCE;
          END;
     ELSE DO;
          R_LID='.';
          IF USERNAME ^=' ' THEN R_UNAME='.';
          IF L_SOURCE^=SOURCE THEN
               DO;
               R_SOURCE=SOURCE; L_SOURCE=SOURCE;
               END;
          ELSE IF SOURCE^=' ' THEN R_SOURCE='.';
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE:  JOBID JOBNAME STEP PROGRAM               */
/*--------------------------------------------------------------------*/

     IF L_JOBID^=JOBID THEN
          DO;
          R_JOBNAM=JOBNAME  ;
          R_JOBID=JOBID     ;      L_JOBID=JOBID;
          END;
     ELSE DO;
          IF JOBNAME^=' ' THEN R_JOBNAM='.';
          IF JOBID  ^=' ' THEN R_JOBID= '.';
          END;


     IF  (L_STEP^=STEP) OR  (L_PGM^=PROGRAM) THEN
          DO;
          R_STEP=STEP       ;  L_STEP=STEP      ;
          R_PGM=PROGRAM     ;  L_PGM=PROGRAM    ;
          R_DDN=DDNAME      ;  L_DDN=DDNAME     ;
          END;
     ELSE DO;
          IF STEP^=' '    THEN R_STEP='.';
          IF PROGRAM^=' ' THEN R_PGM= '.';
          IF L_DDN^=DDNAME THEN
               DO;
               R_DDN=DDNAME; L_DDN=DDNAME;
               END;
          ELSE DO;
               IF DDNAME^=' ' THEN R_DDN='.';
               END;
          END;


PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE:  LIBRARY REASON                           */
/*--------------------------------------------------------------------*/


     IF T_PGMLIB=' ' OR T_PGMLIB='?' OR
        L_PGMLIB^=T_PGMLIB THEN
          DO;
          R_PGMLIB=T_PGMLIB ;  L_PGMLIB=T_PGMLIB;
          END;
     ELSE
          R_PGMLIB='.'      ;


     IF L_REASON^=REASON   THEN
          DO;
          R_REASON=REASON   ;  L_REASON=REASON  ;
          END;
     ELSE
          R_REASON='.'      ;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT LINE:  PUT                                      */
/*--------------------------------------------------------------------*/



     PUT
     @1   R_DATE    $CHAR5.
     @7   R_TIME    $CHAR8.
     @16  R_VIOL    $CHAR1.
     @18  R_EVENT   $CHAR8.
     @28  R_DSN     $CHAR44.
     @74  R_LID     $CHAR11.
     @86  R_SOURCE  $CHAR8.
     @96  R_JOBID   $CHAR8.
     @106 R_STEP    $CHAR8.
     @116 R_DDN     $CHAR8.
     @125 R_REASON  $CHAR8.
     /
     @18  R_ACCESS  $CHAR8.
     @28  R_VOL     $CHAR8.
     @58  MEMBER    $CHAR8.
     @74  R_UNAME   $CHAR20.
     @96  R_JOBNAM  $CHAR8.
     @106 R_PGM     $CHAR8.
     @116 R_PGMLIB  $CHAR17.
     ;

     IF R_VIOL='*' THEN
         SVIOL='* = DATASET/PSWD VIOLATION ';

     RETURN;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT HEADINGS: COMMON CODE                           */
/*--------------------------------------------------------------------*/

RPTAHEAD:
          NAME=TRIM(FIRSTNAM) ×× ' ' ×× TRIM(LASTNAME);
          ***   CENTER NAME ;
                NAME=RIGHT(NAME);
                II=MAX(VERIFY(NAME,' '),1);
                KK=INT(II/2)+1;
                SUBSTR(NAME,KK)=SUBSTR(NAME,II);
          ***   CENTER AREA ;
                AREA=RIGHT(AREA);
                II=MAX(VERIFY(AREA,' '),1);
                KK=INT(II/2)+1;
                SUBSTR(AREA,KK)=SUBSTR(AREA,II);

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT HEADINGS: SORTKEY=1                             */
/*--------------------------------------------------------------------*/

    IF SORTKEYA='1' THEN
      DO ;
      PUT
      # 1 @1    M_SYSNAM M_SYSVER
          @61  'ACF2 LOGGING'
          @111 'FROM: '
          @117  MINDT   DATETIME16.
      # 2 @1   '(C) 1980 F.C.I. '
          @49   38*'_'
          @111 '  TO: '
          @117  MAXDT    DATETIME16.
      # 3 @48 '×'                       @87 '×'
      # 4 @48 '×'                       @87 '×'
      # 5 @48 '×' @58 NAME  $CHAR20.    @87 '×'
      # 6 @48 '×'                       @87 '×'
      # 7 @48 '×' @49 38*'_'            @87 '×'
      # 8 @48 '×'                       @87 '×'
      # 9 @48 '×'                       @87 '×'
      #10 @48 '×' @60 AREA  $CHAR16.    @87 '×'
      #11 @48 '×'                       @87 '×'
      #12 @48 '×' @49 38*'_'            @87 '×'
      #16 @34 'KEY/LID'
          @44 'LOGONID'
          @54 'USERNAME'
          @76 'EVENT'
          @86 'ACCESS'
          @96 'COUNT'
      // ;
      RETURN;
      END;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT HEADINGS: SORTKEY=2                             */
/*--------------------------------------------------------------------*/


     IF SORTKEYA='2' THEN
          DO;
          PUT
          @1    M_SYSNAM M_SYSVER
          @60   AREA $CHAR16.
          @111 'FROM: '
          @117  MINDT   DATETIME16.
          /
          @1   '(C) 1980  F.C.I. '
          @58   NAME $CHAR20.
          @111 '  TO: '
          @117  MAXDT    DATETIME16.
          //
          @1   132*'-'
          /
          @1   'DATE'
          @7   'TIME'
          @18  'EVENT'
          @28  'DATASET NAME'
          @74  'LOGONID'
          @86  'SOURCE'
          @96  'JOB ID'
          @106 'STEP'
          @116 'DDNAME'
          @125 'REASON'
          /
          @18  'ACCESS'
          @28  'VOLUME'
          @58  'MEMBER'
          @74  'USER NAME'
          @96  'JOB NAME'
          @106 'PROGRAM'
          @116 'LIBRARY'
          /
          @1    132*'-'
          @;
          END;

PAGE;
/*--------------------------------------------------------------------*/
/*             REPORT HEADINGS: RESET 'LAST' DATA ELEMENTS            */
/*--------------------------------------------------------------------*/


RESET:
     L_DATE   = '@#$%&';
     L_DSNAME = '@#$%&';
     L_VOL    = '@#$%&';
     L_SOURCE = '@#$%&';
     L_PGM    = '@#$%&';
     L_STEP   = '@#$%&';
     L_EVENT  = '@#$%&';
     L_ACCESS = '@#$%&';
     L_LID    = '@#$%&';
     L_JOBID  = '@#$%&';
     L_PGMLIB = '@#$%&';
     L_REASON = '@#$%&';

RETURN;
