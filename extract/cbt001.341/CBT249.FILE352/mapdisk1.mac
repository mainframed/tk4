*          DATA SET MAPDISK1   AT LEVEL 003 AS OF 03/16/83
*          DATA SET MAPDISK1   AT LEVEL 002 AS OF 05/24/78
*          DATA SET FASTMAP1   AT LEVEL 001 AS OF 11/09/77
FORM TITLE '                 FASTMAP1 -- FORMAT'
* * * * * * * * * * * * * * * * * * *
*        PRODUCED AT TRIANGLE UNIVERSITIES COMPUTATION CENTER,
*                    RESEARCH TRIANGLE PARK,
*                    NORTH CAROLINA, 27709
*        SYSTEMS PROGRAMMER - H. L. JACKSON
*
* EXTENTIONS AT THE GODDARD SPACE FLIGHT CENTER
*                   GREENBELT, MARYLAND 20771
*        BY HANK HOOVER
*    MODIFIED BY L. N. FOSTER  10/13/70
*
*    MODIFIED BY F. G. ROSS 1/10/73
*
*    UPDATED AND EXTENSIVELY MODIFIED BY GENE CZARCINSKI
*        FASTMAP2/FORMAT, 23APR73
*
*    MODIFIED BY K. M. TRUE (FCI) 17 FEB 77 TO SUPPORT ASM2 SYSTEM
*        STATISTICS.
*
*    MODIFIED BY K. M. TRUE (FCI)  2 MAY 77 TO SUPPORT LOGGING OF
*        DATASET STATISTICS.
*
*    MODIFIED BY K. M. TRUE (FCI) 14 FEB 78 TO SUPPORT DYNAMIC ALLOC
*        OF MASS STORAGE VOLUMES
*
* SUPPORTS: 2301,2302,2303,2311,2314,2321 (FCI 3330,3330-1,3350)
*
* * * * * * * * * * * * * * * * * * *
*
* FUNCTION:  THIS ROUTINE IS CALLED BY FASTDISK TO PROCESS THE (READ
*        IN) DSCB'S TO GENERATE A FORMATTED LISTING (ALLOCATION MAP)
*        OF A DASD VOLUME.
*
* * * * * * * * * * * * * * * * * * *
*
* LOCAL MACRO DEFINITION
         MACRO
&N       PRNT  &A,&OP=0,&LEN=0,&LABEL=
&N       LA    R1,&A                   ADDRESS
         LA    R0,&OP                  OPERATION CODE
         L     R15,=V(PRNT)
         BALR  R14,R15
&LABEL   DC    YL1(&LEN,0)             LINE LENGTH
         MEND
*
         LCLC  &OPENMOD,&ASM2MOD,&LOGMOD,&LOGMOD2,&MSSMOD
&OPENMOD SETC  'Y'           SET TO 'Y' IF DESIRED; 'N' IF NOT ***
&ASM2MOD SETC  'Y'           SET TO 'Y' IF DESIRED; 'N' IF NOT ***
&LOGMOD  SETC  'Y'           SET TO 'Y' IF DESIRED; 'N' IF NOT ***
&LOGMOD2 SETC  'N'   DONT PRINT VTOC MAP 'Y'=NO PRNT,'N'=PRNT
&MSSMOD  SETC  'Y'           SET TO 'Y' IF DESIRED;              MSSMOD
 EJECT
FASTMAP1 START 0
         ENTRY FORMAT
         AIF   ('&LOGMOD' NE 'Y').SKIPL0
         ENTRY DSNLOG,INITLOG,TERMLOG                        LOGMOD
.SKIPL0  ANOP
R0       EQU   0             STD PARAM REG
R1       EQU   1             STD PARAM REG
R2       EQU   2
R3       EQU   3             WORK REG
R4       EQU   4             WORK REG
R5       EQU   5             WORK REG
R6       EQU   6
R7       EQU   7             BASE ADRS FOR 3-4-5 DSCB TABLE
R8       EQU   8             MAIN BASE REG
R9       EQU   9
R10      EQU   10            BASE FOR DSCB FORMAT4 DESCRIPTION BLK
R11      EQU   11            BASE FOR UCB
R12      EQU   12            BASE FOR F1 TABLE
R13      EQU   13            SAVE AREA POINTER; 2ND BASE REG ***
R14      EQU   14            RETURN REG FOR SUBS
R15      EQU   15            POINTER & COND CODE RETURN
T2321    EQU   B'00100000'   FLAG FOR 2321 DASD (DATA CELL)
         USING DSCB,R10                TO ADDRESS THE DSCB'S
         USING UCB,R11                 TO ADDRESS THE UCB
FORMAT   SAVE  (14,12),,*
         LR    R8,R15                  INIT BASE REG
         USING FORMAT,R8
         LA    R15,SAVEAREA            INIT SAVE AREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         USING SAVEAREA,R13            SECONDARY BASE REG.
         NI    SW,0                    RESET SWITCH
         LTR   R3,R3                   NE ZERO IF 2321
         BZ    *+14
         OI    SW,T2321                2321...FLAG AND
         MVC   UNIT,0(R3)              SAVE UNIT NAME
         AIF   ('&MSSMOD' NE 'Y').M$1                            MSSMOD
         MVC   MSVGP,0(R4)             SAVE MSVGP                MSSMOD
.M$1     ANOP                                                    MSSMOD
         LTR   R2,R2                   EXT?
         BP    *+8                     YES.
         OI    SW,X'01'                NO.
         MVC   ACCTABLE,0(R2)          A(WORKAREA FOR EXTENTS)
         L     R15,4(R2)               A(BOTTOM OF CORE)
         ST    R15,ACORE1
         SH    R15,=H'8'
         ST    R15,ACORE2
         L     R15,8(R2)               A(TOP OF CORE)
         ST    R15,ALIMIT
         LA    R15,4(R2)               A(#TOP)
         ST    R15,ACORE0
         LR    R2,R0
         LR    R3,R1
         ST    R2,ADATACH              SAVE A(DATA CHAIN)
         LA    R14,1                   INIT COUNTERS
         ST    R14,SRTKNT
         ST    R14,NTRKNT
         ST    R3,ATIOT                SAVE A(TIOT ENTRY)
         SRL   R2,24                   GET NUM OF TRK/CYL
         SRL   R3,24                   GET NUM OF DSCB/TRK
         STH   R2,TRKPRCYL
         STH   R3,DSCBSTRK
         MVI   F1SW,0                  INIT THE F1 SWITCH
         L     R1,ATIOT                GET A(TIOT ENTRY)
         SR    R11,R11                                            INTEL
         ICM   R11,B'0011',14(R1)      GET A(UCB/SUBUCB)          INTEL
         TM    SW,T2321                2321?
         BZ    NOT2321                 NO.
         MVC   DEVICE,=CL8'2321'       YES...INIT
         MVC   SAVESER,4(R11)          SERIAL NO. FROM SUBUCB
         MVI   UNIT+3,C'/'
         MVC   UNIT+4(1),1(R11)        BIN NO.
         OI    UNIT+4,X'F0'
         B     NOMOV
NOT2321  MVC   SAVESER,SRTEVOLI        MOVE IN THE VOL SER
         MVC   UNIT,UCBNAME            MOVE IN THE UNIT NAME
         MVC   UNIT+3(2),=CL10' '
         AIF   ('&LOGMOD' NE 'Y').SKIPL00
         MVC   LOGUTYP,UCBTYP+3        SAVE UNIT TYPE         LOGMOD
.SKIPL00 ANOP
         L     R1,DEVNAMET             LOAD ADDRESS OF DEVNAMET  FCI
         LTR   R1,R1                    DID WE LOAD IT YET?      FCI
         BNZ   FLOOKUP                  YES-> SKIP THE LOAD      FCI
         LOAD  EP=DEVNAMET              NO-> GO GETIT            FCI
         ST    R0,DEVNAMET               SAVE ADDRESS            FCI
         LR    R1,R0                    LOAD ADDRESS OF DEVNAMET FCI
FLOOKUP  L     R10,0(R1)                LOAD NUMBER OF ENTRIES   FCI
         LA    R1,4(R1)                  POINT TO FIRST ENTRY    FCI
FLOOP    CLC   UCBTYP(4),8(R1)         IS THIS ONE THE ONE?      FCI
         BE    FFOUND                  YES-> GO MOVE IT IN       FCI
         LA    R1,12(R1)               NO->  BUMP                FCI
         BCT   R10,FLOOP                    AND GRIND            FCI
         MVC   DEVICE,=CL8' '          NOT THERE..CLEAR IT OUT   FCI
         B     NOMOV                                             FCI
FFOUND   MVC   DEVICE,0(R1)            GOTIT..MOVE IN THE NAME   FCI
*                                                                FCI
NOMOV    PRNT  PRNTPARM,OP=0           INIT THE PRNT ROUTINE
 EJECT
         L     R10,ADATACH             A(DATA CHAIN)
         L     R10,0(R10)              A(DSCB)
         AIF   ('&LOGMOD' NE 'Y').SKIPLAA
         MVC   LOGVOL,SAVESER          SAVE VOLSER            LOGMOD
         AIF   ('&MSSMOD' NE 'Y').M$2                            MSSMOD
         MVC   LOGMSVGP,MSVGP          SAVE MSVGP FOR LOG        MSSMOD
         MVC   LOGDEVCE,DEVICE         SAVE DEVICE TYPE FOR LOG  MSSMOD
.M$2     ANOP                                                    MSSMOD
.SKIPLAA ANOP
DONXTF1  CLI   DS1FMTID,C'1'           FORMAT 1 DSCB?
         BNE   GETNEXT                 NO.
         OI    SPUSEDSW+1,X'F0'        RESET SW
         MVC   DATANAME,DS1DSNAM       MOVE DSNAME TO MSG
         AIF   ('&ASM2MOD' EQ 'Y').USEASM2
         LA    R1,DS1CREDT             A(CREATED DATE)
         LA    R2,CRDATE               MSG AREA
         BAL   R14,CALEN
         LA    R1,DS1EXPDT             A(EXPERATION DATE)
         LA    R2,PURGDATE             MSG AREA
         BAL   R14,CALEN
*
         AIF   ('&OPENMOD' NE 'Y').NOOPEN
         MVC   OPENMSG1,=CL10' '
         MVC   OPENMSG2,=CL10' '
         CLI   OPENDATE,74             IGNORE OLD GARBAGE   FCI
         BL    SKIPOPEN
*        LA    R1,OPENDATE                                  FCI RY
*        LA    R2,OPENMSG1                                  FCI RY
*        BAL   R14,CALEN                                    FCI RY
         UNPK  OPENMSG1(5),OPENDATE(3)                      FCI RY
         B     SKIPOPEN                                     FCI RY
         XC    WORK,WORK
         MVC   WORK+2(2),OPENCNT       *******************************
         L     R3,WORK
         MVC   OPENMSG2,=X'20202020202120'
         CVD   R3,WORK
         ED    OPENMSG2-1(8),WORK+4
SKIPOPEN EQU   *
.NOOPEN  ANOP
         AGO   .NOASM2
.USEASM2 ANOP
*                              CALL ASM2 SUBROUTINE TO GEN LINE
         LA    R1,ASM2PARM     LOAD PARM REGISTER
         ST    R10,ASM2DSCB    SAVE DSCB ADDRESS
         L     R15,=V(ASM2DATA)  GET ADDRESS OF SUBROUTINE
         BALR  R14,R15         GO DO THE ASM2 STUFF
*
         AIF   ('&LOGMOD' NE 'Y').SKIPL1
         MVC   LOGDSN,DS1DSNAM  MOVE IN DSNAME TO LOG RECORD     LOGMOD
         XC    LOGSAQTY(14),LOGSAQTY  CLEAR OUR SAQTY TO DIRUSED LOGMOD
         MVC   LOGEXTNT,DS1NOEPV      MOVE IN # EXTENTS          LOGMOD
.SKIPL1  ANOP
.NOASM2  ANOP
         MVC   DSORG,=CL10' '
         LA    R2,DSORG                FOR 'DSORG=XX'
         TM    DS1DSORG,X'04'          TCAM'S MQ
         BZ    TYPX01
         MVC   0(2,R2),=C'MQ'
         LA    R2,2(R2)
         B     TYPON1
TYPX01   TM    DS1DSORG,X'08'          TCAM'S CQ
         BZ    TYPX02
         MVC   0(2,R2),=C'CQ'
         LA    R2,2(R2)
         B     TYPON1
TYPX02   TM    DS1DSORG,X'80'          ISAM?
         BZ    TYPX04
         MVC   0(2,R2),=C'IS'
         LA    R2,2(R2)
         B     TYPON1
TYPX04   TM    DS1DSORG,X'20'          DIRECT?
         BZ    TYPX08                                     FCI
         MVC   0(2,R2),=C'DA'
         LA    R2,2(R2)
         B     TYPON1
TYPX08   TM    DS1DSORG+1,X'08'        VSAM?              FCI
         BZ    TYPX06                                     FCI
         MVC   0(2,R2),=C'VS'                             FCI
         LA    R2,2(R2)                                   FCI
         B     TYPON1                                     FCI
TYPX06   TM    DS1DSORG,X'40'          PHYSICALLY SEQUENTIAL?
         BZ    TYPX1
         MVC   0(2,R2),=C'PS'
         LA    R2,2(R2)
         NI    SPUSEDSW+1,X'0F'        SET TO COMPUTE THE SPACE USED
         B     TYPON1
TYPX2    NI    SWPDS+1,X'0F'           SET TO PROCESS PDS
         MVC   0(2,R2),=C'PO'
         LA    R2,2(R2)
         NI    SPUSEDSW+1,X'0F'        SET TO COMPUTE THE SPACE USED
         B     TYPON
TYPX1    TM    DS1DSORG,X'02'          PARTITIONED?
         BO    TYPX2                   YES.
TYPON1   OI    SWPDS+1,X'F0'           JUMP AROUND PDS
TYPON    TM    DS1DSORG,X'01'          UNMOVABLE?
         BZ    *+8                     NO.
         MVI   0(R2),C'U'
         AIF   ('&LOGMOD' NE 'Y').SKIPL2
         MVC   LOGDSORG,DSORG          MOVE IN DSORG INFO        LOGMOD
.SKIPL2  ANOP
         XR    R3,R3
         IC    R3,DS1NOEPV        GET EXTENT NO.
         ST    R3,EXTKNT          STORE EXTENT VALUE FOR REST OF CALCUL
         AIF   ('&ASM2MOD' EQ 'Y').NOJUNK
         MVC   SERIALNO,DS1DSSN   MOVE SERIAL NUMBER
         MVC   WORK(2),DS1VOLSQ   SEQUENCE NO IN HALF WORD
         LH    R3,WORK
         LA    R1,CALCU+2
         BAL   R14,EDIT           VOLUME SEQUENCE NUMBER
         MVC   SEQNO,CALCU+3
.NOJUNK  ANOP
* NOW READY TO FIND PRIMARY ALLOCATION
         L     R9,ACCTABLE
         MVC   SPUSED,=CL10' '
SPUSEDSW NOP   SEC3
         OC    DS1LSTAR(5),DS1LSTAR    ARE FIELDS VALID
         BZ    SEC3                    NO
         LH    R3,DS1LSTAR             REL NO. OF TRKS USED
         CLI   DS1LSTAR+2,0            ANY RECORDS USED ON TRK
         BE    *+8                     NO
         LA    R3,1(R3)                YES - UP TRK COUNT
         LA    R1,SPUSED          OUT AREA
         AIF   ('&LOGMOD' NE 'Y').SKIPL3
         STH   R3,LOGTRKU         SAVE TRKS USED IN LOG RECORD   LOGMOD
.SKIPL3  ANOP
         BAL   R14,EDIT           PUT OUT USED VALUE
SEC3     XR    R11,R11            CLEAR ACCUM REG
         LA    R1,DS1EXT1         F1 FIRST EXTENT
         L     R5,EXTKNT          NUMBER OF EXTENTS
         LTR   R5,R5              TEST FOR AN EMPTY DATA SET
         BZ    EXTSS3             JUMP IF EMPTY
         CH    R5,=H'4'           CHECK FOR ALL EXTENTS IN F1
         BL    EXTSS1
         LA    R5,3               SET FOR LAST 3
EXTSS1   BAL   R14,ALLSUM         SUM UP ALLOCATION
         CLI   DS1NOEPV,4         CHECK FOR F3 TO BE CHECKED
         BL    EXTSS3             THRU
SRCHF3   BAL   R14,SRCHDSCB       GET NEW FORMAT 3 DSCB
         LR    R10,R3                  SET UP FOR NEW DSCB
         CLI   DS3FMTID,C'3'           IS THIS A FORMAT 3 DSCB
         BE    FOUNDF3                 YES - GO COMPUTE EXTENTS
         CLI   DS3FMTID,C'2'           FORMAT 2 (IS)?
         BE    SRCHF3                  YES, TRY AGAIN.
         B     ERROR4                  NO, ERROR.
FOUNDF3  LA    R1,DS3EXTNT        START OF GROUP
         L     R5,EXTKNT          EXTENT COUNT BACK
         SH    R5,=H'3'           REDUCE BY THOSE ALREADY DONE
         CH    R5,=H'5'           FOUR MORE FIELDS
         BL    EXTSS2
         LA    R5,4               SET TO 4
EXTSS2   BAL   R14,ALLSUM         SUM UP SOME MORE
         L     R5,EXTKNT          LOAD IN COUNT
         SH    R5,=H'7'           SET TO DO LAST 9
         BNP   EXTSS3A                 THRU
         LA    R1,DS3ADEXT
         BAL   R14,ALLSUM         DO LAST OF THEM
EXTSS3A  L     R10,ADATACH             RESTORE THE DSCB
         L     R10,0(R10)              RESET THE DSCB ADRS
EXTSS3   LR    R3,R11                  PUT IN OUTPUT AREA
         AIF   ('&LOGMOD' NE 'Y').SKIPL4
         STH   R3,LOGTRKA              SAVE ALLOC TRKS IN LOG    LOGMOD
.SKIPL4  ANOP
         LA    R1,SPALLOC              TOTAL ALLOCATION
         BAL   R14,EDIT                PUT OUT TOTAL
         XC    0(4,R9),0(R9)           INDICATE END OF LIST
SWPDS    B     NOPDS                   SWITCH FOR PDS PROCESSING
         TM    RES0,X'40'              WAS THIS PDS PROCESSED?
         BZ    NOPDS                   NO, DO NOT PROCESS IT.
         LH    R3,BLKUSED              GET CNT OF BLKS USED
         AIF   ('&LOGMOD' NE 'Y').SKIPL5
         STH   R3,LOGDIRU              SAVE DIR BLOCKS USED      LOGMOD
.SKIPL5  ANOP
         LA    R1,DRBLUSED             A(OUTPUT LINE AREA)
         BAL   R14,EDIT
         LH    R3,BLKALOC              GET CNT OF BLKS ALLOCATED
         AIF   ('&LOGMOD' NE 'Y').SKIPL6
         STH   R3,LOGDIRA              SAVE DIR BLOCKS ALLOCATED LOGMOD
.SKIPL6  ANOP
         LA    R1,DRBLOCKS
         BAL   R14,EDIT
         PRNT  DATANAME,OP=12,LEN=LEN2
         TM    RES0,X'80'              ERROR READING THE DIRECTORY?
         BZ    PDSEND                  NO.
         MVC   ERRNAME,DS1DSNAM        YES, OUTPUT MESSAGE
         PRNT  IOERR1,OP=16,LEN=IOERR1L
         PRNT  IOERR2,OP=16,LEN=IOERR2L
         AIF   ('&LOGMOD' NE 'Y').SKIPL7
         OI    LOGDIRA,X'80'           INDICATE DIR BLK ERROR    LOGMOD
         OI    LOGDIRU,X'80'           INDICATE DIR BLK ERROR    LOGMOD
.SKIPL7  ANOP
         B     PDSEND
NOPDS    PRNT  DATANAME,OP=12,LEN=LEN1
PDSEND   LA    R5,RECFM
         MVC   0(5,R5),=CL10' '        CLEAR THE AREA
         CLC   =C'MQ',DSORG            TCAM/MQ SPECIALS?
         BNE   CHBIT2                  NO..DID NOT EXPECT IT.
         TM    DS1RECFM,B'00000010'    GOT SOME...
         BZ    *+12                    HOW ABOUT THAT.
         MVI   0(R5),C'R'
         LA    R5,1(R5)
         TM    DS1RECFM,B'00000100'
         BZ    *+12
         MVI   0(R5),C'G'
         LA    R5,1(R5)
         TM    DS1RECFM,B'00001000'
         BZ    CHBIT13
         MVI   0(R5),C'S'
         B     CHBIT13
CHBIT2   TM    DS1RECFM,X'C0'
         BZ    CHBIT8             NOTHING AT ALL - GO OUT
         BM    CHBIT5
         MVI   0(R5),C'U'         PUT IN UNDEFINED
CHBIT6   LA    R5,1(R5)
         B     CHBIT8
CHBIT5   TM    DS1RECFM,X'80'     CHECK FIXED
         BZ    CHBIT7
         MVI   0(R5),C'F'         FIXED FORMAT
         B     CHBIT6
CHBIT7   MVI   0(R5),C'V'         VARIABLE FORMAT
         B     CHBIT6
CHBIT8   TM    DS1RECFM,X'20'     CHECK TRACK OVERFLOW
         BZ    CHBIT9
         MVI   0(R5),C'T'         TRACK OVERFLOW
         LA    R5,1(R5)
CHBIT9   TM    DS1RECFM,X'10'     CHECK
         BZ    CHBIT10
         MVI   0(R5),C'B'         BLOCKED
         LA    R5,1(R5)
CHBIT10  TM    DS1RECFM,X'08'     CHECK NEXT BIT
         BZ    CHBIT11
         MVI   0(R5),C'S'         STANDARD BLOCKS
         LA    R5,1(R5)
CHBIT11  TM    DS1RECFM,X'04'
         BZ    CHBIT12
         MVI   0(R5),C'A'         ASA CONTROL CHARACTER
         B     CHBIT13
CHBIT12  TM    DS1RECFM,X'02'
         BZ    CHBIT13
         MVI   0(R5),C'M'         MACHINE CONTROL CHARACTER
CHBIT13  LH    R3,DS1LRECL        BRING IN RECORD LENGTH
         LA    R2,LRECL           ADDRESS TO STORE
         AIF   ('&LOGMOD' NE 'Y').SKIPL8
         STH   R3,LOGLRECL        SAVE LRECL TO LOG RECORD       LOGMOD
         MVC   LOGRECFM,RECFM     SAVE RECFM TO LOG RECORD       LOGMOD
.SKIPL8  ANOP
         BAL   R14,LFTJXT         PUT IN SYMBOLS LEFT JUSTIFIED
         LH    R3,DS1BLKL
         AIF   ('&LOGMOD' NE 'Y').SKIPL9
         STH   R3,LOGBLKSZ        SAVE BLOCKSIZE TO LOG RECORD   LOGMOD
.SKIPL9  ANOP
         LA    R2,BLKSIZE
         BAL   R14,LFTJXT
SEC0     TM    DS1DSIND,B'01010100'    SECURITY?             FCI
         BZ    NOSEC                   NO.                   FCI
         MVC   SECURITY,=CL10'WRITE ONLY'                    FCI
         TM    DS1DSIND,B'00010100'    READ/WRITE?           FCI
         BO    CHKRACF                 YES...READ/WRITE
         MVC   SECURITY,=CL10'READ/WRITE'                    FCI
CHKRACF  TM    DS1DSIND,B'01000000'    RACF PROTECTION       FCI
         BZ    SEC1PRT                                       FCI
         MVC   SECURITY,=CL10'-R A C F-'                     FCI
SEC1PRT  PRNT  TYPESORG,OP=16,LEN=SECURLEN
         B     SEC2
NOSEC    PRNT  TYPESORG,OP=16,LEN=TYPESORL
SEC2     MVC   TALLOC(3),=C'ABS'
         TM    DS1SCALO,X'C0'
         BZ    CHBIT14
         MVC   TALLOC(3),=C'CYL'
         BO    CHBIT14
         MVC   TALLOC(3),=C'TRK'
         TM    DS1SCALO,X'80'
         BO    CHBIT14
         MVC   TALLOC(3),=C'BLK'
CHBIT14  LA    R15,TALLOC+3
         TM    DS1SCALO,X'08'
         BZ    *+18
         MVC   0(7,R15),=C',CONTIG'
         LA    R15,7(R15)
         B     CHBIT14B
         TM    DS1SCALO,X'04'
         BZ    *+18
         MVC   0(5,R15),=C',MXIG'
         LA    R15,5(R15)
         B     CHBIT14B
         TM    DS1SCALO,X'02'
         BZ    *+14
         MVC   0(4,R15),=C',ALX'
         LA    R15,4(R15)
CHBIT14B TM    DS1SCALO,X'01'
         BZ    *+14
         MVC   0(6,R15),=C',ROUND'
         LA    R15,6(R15)
         MVC   0(6,R15),=C', 2ND='
         LA    R15,6(R15)
         MVC   2(10,R15),=CL10' '
         LR    R1,R15                  SAVE
         LH    R3,DS1SCALO+2           FORMAT SECONDARY ALLOC
         AIF   ('&LOGMOD' NE 'Y').SKIP$@
         STH   R3,LOGSAQTY             SAVE SEC ALLOC QTY       LOGMOD
         MVC   LOGSATYP,TALLOC         SAVE SEC ALLOC TYPE      LOGMOD
.SKIP$@  ANOP
         CVD   R3,WORK
         MVC   0(L'PAT,R15),PAT
         ED    0(L'PAT,R15),WORK+5
         LA    R15,L'PAT(R15)
CHBIT14D MVC   0(10,R1),1(R1)
         BCTR  R15,0
         CLI   0(R1),C' '
         BE    CHBIT14D
         TM    SW,X'01'                EXT TO BE LISTED?
         BZ    CHBIT14E                YES.
         MVC   0(6,R15),=C', EXT='
         LA    R2,6(R15)
         LA    R15,11(R15)
         L     R3,EXTKNT
         BAL   R14,LFTJXT
CHBIT14E S     R15,=A(ALLMSG)
         STC   R15,ALLMSGL
         PRNT  ALLMSG,OP=16,LEN=2,LABEL=ALLMSGL
         TM    SW,X'01'                EXT?
         BZ    *+8                     YES.
         OI    SW,X'02'                NO, SKIP LISTING.
         BAL   R14,PRNTEXTS       PRINT AND SORT ALL EXTEXTS
         NI    SW,X'FD'
         AIF   ('&LOGMOD' NE 'Y').SKIPL10
         CLI   DS1FMTID,C'4'           IS THIS THE VTOC?         LOGMOD
         BE    PRMAP                     YEP..SKIP THE TRASH     LOGMOD
         TM    DSNLOG+48,X'10'         IS THE DCB OPEN?          LOGMOD
         BZ    NOPUTLOG                NO...SKIP THE PUT         LOGMOD
         PUT   DSNLOG,LOGDSN           PUT OUT THE RECORD        LOGMOD
NOPUTLOG EQU   *                                                 LOGMOD
.SKIPL10 ANOP
*
GETNEXT  CLI   DS1FMTID,C'4'           IS IT THE VTOC?
         BE    PRMAP
GETNEXT1 MVI   F1SW,X'FF'              SET THE SWITCH
         L     R10,ADATACH             A(TABLE ENTRY POSITION)
         LA    R10,4(R10)              GET NEXT POSITION
         ST    R10,ADATACH             UPDATE THE POINTER
         L     R10,0(R10)              A(NEW DSCB)
         LTR   R10,R10
         BZ    MAPZ                    DONE WITH DSCB MAP.
         B     DONXTF1                 LOOP TIL DONE
 EJECT
ABTOREL  MVC   HOLD(8),2(R1)      MOVE FOR BOUNDRIES
         TM    SW,T2321
         BZ    ABTOREL0
         ST    R1,HOLD+28              SAVE
         XR    R1,R1                   CLEAR WORK REG
         XR    R2,R2                   CLEAR ACC
         IC    R2,HOLD
         MH    R2,=H'10'               STRIP/SUBCELL
         IC    R1,HOLD+1
         ALR   R2,R1
         MH    R2,=H'5'                CYL/STRIP
         IC    R1,HOLD+2
         ALR   R2,R1
         MH    R2,=H'20'               TRK/CYL
         IC    R1,HOLD+3
         ALR   R2,R1                   NOW IN TRACKS
         L     R1,HOLD+28              RESTORE
         B     ABTOREL1
ABTOREL0 LH    R2,HOLD            CC
         MH    R2,TRKPRCYL
         AH    R2,HOLD+2          HH
ABTOREL1 TM    SW,T2321
         BZ    ABTOREL2
         ST    R1,HOLD+28
         XR    R1,R1                   CLEAR WORK REG
         XR    R3,R3                   CLEAR ACC
         IC    R3,HOLD+4
         MH    R3,=H'10'               STRIP/SUBCELL
         IC    R1,HOLD+5
         ALR   R3,R1
         MH    R3,=H'5'                CYL/STRIP
         IC    R1,HOLD+6
         ALR   R3,R1
         MH    R3,=H'20'               TRK/CYL
         IC    R1,HOLD+7
         ALR   R3,R1
         L     R1,HOLD+28
         B     ABTOREL3
ABTOREL2 LH    R3,HOLD+4          CC
         MH    R3,TRKPRCYL
         AH    R3,HOLD+6          HH
ABTOREL3 SLL   R2,16              MOVE TO TOP
         ALR   R2,R3              PUT TOGETHER
         BR    R14                EXIT
*
ALLSUM   ST    R14,HOLD+8         TAKE CARE OF FETCHING ALLOCATIONS
ALLSUM1  BAL   R14,ABTOREL
         ST    R2,0(R9)           PUT IN TABLE
         LA    R9,4(R9)           NEXT READY
         BAL   R14,LENGTH         GET LENGTH IN R3
         AR    R11,R3             TOTAL UP ALL LENGTHS FOR DS
         LA    R1,10(R1)          SET FOR NEXT
         BCT   R5,ALLSUM1         LOOP
         L     R14,HOLD+8         RESTORE
         BR    R14                BACK OUT
*
CALEN    SR    R3,R3              COMPUTE YEARS AND DAYS
         IC    R3,0(R1)           PICK UP YEAR
         CVD   R3,WORK
         OI    WORK+7,X'0F'
         UNPK  0(2,R2),WORK+6(2)  YEAR
         MVC   WORK(2),1(R1)      FETCH LAST TWO BYTES
         LH    R3,WORK
         CVD   R3,WORK            TO DECIMAL
         OI    WORK+7,X'0F'
         UNPK  2(3,R2),WORK+6(2)  DAYS
         BR    R14                RETURN
*
EDIT     CVD   R3,WORK            MAKE IT DECIMAL
         SH    R1,=H'2'           SET UP CORRECT ADDRESS
         MVC   0(L'PAT,R1),PAT    MOVE PATTERN
         ED    0(L'PAT,R1),WORK+5 PUT IT IN SHAPE
         BR    R14                EXIT
*
FULLEDIT ST    R14,HOLD+4              CONVERT TO DECIMAL
         LA    R1,ZEXT-1               EXTENT NO.
         BAL   R14,EDIT
         BAL   R14,LENGTH
         LA    R1,ZLNGTH+2             LENGTH
         BAL   R14,EDIT
         LA    R1,ZFIRST+1             FIRST TRK ADRS
         LH    R3,HOLD
         BAL   R14,EDIT
         LA    R1,ZLAST+1              LAST TRK ADRS
         LH    R3,HOLD+2
         BAL   R14,EDIT
         L     R14,HOLD+4         RESTORE RETURN ADDRESS
         BR    R14
*
LENGTH   ST    R2,HOLD            SAVE VALUE FOR TEMP
         LH    R3,HOLD+2          BRING IN LAST POSITION
         AH    R3,=H'1'           UPDATE
         SH    R3,HOLD            TAKE OFF START TRACK VALUE
         BR    R14                GO ON BACK
*
LFTJXT   ST    R14,HOLD           SAVE EXIT
         LA    R1,CALCU+2         TEMP WORK AREA
         BAL   R14,EDIT           EDIT INTO TEMP
LOOPBIT  CLI   0(R1),C' '         FIND FIRST NONSPACE
         BNE   FOUNDX
         LA    R1,1(R1)           CHECK NEXT CHARACTER
         B     LOOPBIT
FOUNDX   MVC   0(5,R2),0(R1)      LEFT JUSTIFY NUMERALS
         L     R14,HOLD           EXIT BACK
         BR    R14
*
NOTHER   MVC   WORK(5),0(R4)      LOAD UP EXTENT VALUE
         LH    R3,WORK+2
         MH    R3,TRKPRCYL
         XR    R2,R2
         IC    R2,WORK+4
         AR    R3,R2              FIRST TRACK PLUS CYLINDER
         BZ    ENDDSCB5           DONE IF NOTHING THERE
         AR    R1,R3              ACCUMULATE TOTAL
         LH    R2,WORK
         AR    R3,R2              STOP ADDRESS PLUS ONE
         SLL   R2,16              MOVE TO LEFT
         ALR   R2,R3              ALL TOGETHER
         BCTR  R2,0               LESS ONE
         ST    R2,0(R9)           PUT IT AWAY IN ACCUM
         LA    R9,4(R9)
         LA    R4,5(R4)           GO TO NEXT ONE
         BCT   R5,NOTHER          GO DO FOR NEXT
         BR    R14
 EJECT
* PRINT THE 'VTOC'
PRMAP    MVI   DATANAME,C' '
         MVC   DATANAME+1(LEN2-1),DATANAME
         MVC   DATANAME(27),=CL27'VTOC        **UNUSED DSCBS='
         LA    R1,DS4VTOCE        PUT OUT EXTENT SIZE
         BAL   R14,ABTOREL        CONVERT TO RELATIVE TRACKS R2 BACK
         LA    R3,1               PSUEDO EXTENT NO 1
         BAL   R14,STORMAP        STORE EXTENT FOR MAP R1,R2,DATANAME
         BAL   R14,LENGTH         FIND LENGTH OF DATA SET R2-R3 BACK
         LA    R1,SPALLOC
         BAL   R14,EDIT           PREPARE TO PRINT R3,R1
         LR    R9,R2              SAVE TOTAL FOR AWHILE
         MVC   HOLD+4(4),DS4HPCHR GET END MARKER
         SRL   R2,16
         BAL   R14,ABTOREL1       DO ONLY USED
         BAL   R14,LENGTH
         LA    R1,SPUSED
         BAL   R14,EDIT
         LH    R3,DS4DSREC             FREE DSCBS
         LA    R2,DATANAME+27
         BAL   R14,LFTJXT
         PRNT  DATANAME,OP=12,LEN=LEN1
         MVI   DATANAME,C' '
         MVC   DATANAME+1(LEN2-1),DATANAME
         PRNT  LINEX,OP=16,LEN=LINEXL  EXT--FIRST---LAST...
         LR    R2,R9                   RESTORE FIRST/LAST
         LA    R3,1                    EXTENT = 1 FOR VTOC
         BAL   R14,FULLEDIT       DO FULL EDIT
         PRNT  ZOUT,OP=16,LEN=ZLEN     PRINT VTOC EXTENT
* COMPUTE AND LIST 'FREE SPACE' ON VOLUME
         TM    DS4VTOCI,X'80'     TEST FOR DSCB 5
         BO    SHARED
         MVC   DATANAME(15),=C'* * *FREE SPACE'
         MVC   SPUSED,SPUSED-1    CLEAR USED SPACE
         LA    R10,BLKLEN(R10)         BUMP TO NEXT...SHOULD BE FORMAT5
         CLI   DS5FMTID,C'5'      CHECK FOR 5
         BNE   SHARED
         L     R9,ACCTABLE        LOAD ADDRESS OF ACCUMULATION TABLE
         SR    R1,R1              CLEAR ACCUM REG.
NEXTDS   LA    R5,8                    8 FIELDS FIRST
         LA    R4,DS5AVEXT        AREA OF EXTENTS
         BAL   R14,NOTHER         DO FIRST 8 EXTENTS
         LA    R5,18              LAST IN DSCB
         LA    R4,DS5MAVET
         BAL   R14,NOTHER         DO LAST 18 EXTENTS
         C     R5,DS5PTRDS+1      CHECK IF ONE MORE DSCB5 AROUND
         BE    ENDDSCB5           NO, QUIT
         BAL   R14,SRCHDSCB       GO SEARCH FOR DSCB 5
         LR    R10,R3                  GET A(NEW DSCB)
         B     NEXTDS             KEEP GOING TILL END
ENDDSCB5 XC    0(4,R9),0(R9)           INDICATE END OF LIST
         LR    R3,R1              COUNT IN PARM AREA
         LA    R1,SPALLOC         OUTPUT AREA
         BAL   R14,EDIT           READY FOR PRINT
* PRINT THE FREE SPACE VALUES
         PRNT  DATANAME,OP=16,LEN=LEN1
         BAL   R14,PRNTEXTS       PRINT AND SORT ALL EXTENTS
SHARED   L     R10,ADATACH
         L     R10,0(R10)              A(VTOC)
         CLC   =XL5'0',DS4F6PTR        ANY F6?
         BE    GETNEXT1                NO.
         PRNT  SHAREM1,OP=16,LEN=SHAREM1L
         PRNT  SHAREM2,OP=16,LEN=SHAREM2L
         MVC   DS6PTRDS,DS4F6PTR
         XR    R6,R6                   CLEAR EXT ACCUMULATOR
         MVC   ZOUT+1(ZLEN-1),ZOUT
SHARED1  BAL   R14,SRCHDSCB
         LR    R10,R3
         CLI   DS6FMTID,C'6'           F6?
         BNE   SHARED9                 NO??
         LA    R5,8                    DO FIRST 8
         LA    R4,DS6AVEXT
         BAL   R14,PSHARED
         LA    R5,18                   DO NEXT 18
         LA    R4,DS6MAVET
         BAL   R14,PSHARED
         C     R5,DS6PTRDS+1           DONE?
         BNE   SHARED1                 NO.
SHARED9  MVC   ZOUT+1(ZLEN-1),ZOUT
         B     GETNEXT1
*
PSHARED  ST    R14,HOLD                SAVE RETURN ADRS
PSHARED1 MVC   HOLD+4(5),0(R4)
         LH    R3,HOLD+4
         LTR   R3,R3                   DONE?
         BZ    SHARED9                 YES.
         LA    R1,ZFIRST+1             FIRST TRK ADRS
         BAL   R14,EDIT
         LA    R6,1(R6)
         LA    R1,ZEXT-1               EXTENT NO.
         LR    R3,R6
         BAL   R14,EDIT
         LA    R1,ZLAST                CYL COUNT
         LH    R3,HOLD+6
         BAL   R14,EDIT
         XR    R3,R3
         IC    R3,HOLD+8               NO. SHARING DS
         LA    R1,ZLNGTH+2
         BAL   R14,EDIT
         PRNT  ZOUT,OP=16,LEN=ZLEN
         LA    R4,5(R4)                BUMP TO NEXT ENTRY
         BCT   R5,PSHARED1             LOOP
         L     R14,HOLD                RESTORE
         BR    R14                     AND RETURN
 EJECT
* OUTPUT EXTENT LISTING FOR A DATA SET
PRNTEXTS L     R9,ACCTABLE        SET UP TABLE OF STORED EXTENTS
         XC    EXTKNT,EXTKNT      SET EXTENT COUNT TO 1
         ST    R14,HOLD+8
         TM    SW,X'02'                PRINT EXTENTS?
         BO    PRNTXT1                 NO.
         PRNT  LINEX,OP=16,LEN=LINEXL  EXT-FIRST----
PRNTXT1  L     R2,0(R9)           LOAD IN EXTENT SIZE
         LTR   R2,R2              CHEKC FOR END OF LIST
         BZ    JUMPS1             NO MORE LINES OUT
         L     R3,EXTKNT          BRING EXTENT COUNT IN
         LA    R3,1(R3)           BOOST
         ST    R3,EXTKNT          RESTORE
         BAL   R14,STORMAP        STORE EXTENT FOR MAP OUTPUT
         L     R3,EXTKNT          COUNT BACK IN
         LA    R9,4(R9)                SETUP FOR NEXT LINE.
         TM    SW,X'02'                PRINT?
         BO    PRNTXT1                 NO.
         BAL   R14,FULLEDIT            YES, FORMAT FOR PRINTING
         PRNT  ZOUT,OP=16,LEN=ZLEN
         B     PRNTXT1                 JUMP TO NEXT LINE
JUMPS1   L     R14,HOLD+8         RESTORE RETURN ADDRESS
         BR    R14
 EJECT
* COMPUTE CORE ADDRESS OF NEXT DSCB BASED ON CCHHR
*        R10 - A(DSCB)
*        R3  - MAX RECORD NUMBER OF PRESENT DSCB
*        R4  - MAX RECORD NUMBER OF FORMAT3
SRCHDSCB XR    R2,R2
         XR    R3,R3
         XR    R4,R4
         IC    R3,DS1PTRDS+4           GET RECORD NUMBER
         IC    R2,DS1PTRDS+3           GET THE HH
         MH    R2,DSCBSTRK
         AR    R3,R2
         XR    R2,R2
         TM    SW,T2321                IS IT A DATA CELL?
         BZ    Y2321A                  NO.
         IC    R2,DS1PTRDS             YES, PROCESS ITS
         MH    R2,=H'10'               SPECIAL CCHH
         ST    R2,HOLD+28
         XR    R2,R2
         IC    R2,DS1PTRDS+1
         A     R2,HOLD+28
         MH    R2,=H'5'
         ST    R2,HOLD+28
         XR    R2,R2
         IC    R2,DS1PTRDS+2
         A     R2,HOLD+28
         B     Y2321B
Y2321A   IC    R2,DS1PTRDS+1           GET THE CC
Y2321B   MH    R2,TRKPRCYL
         MH    R2,DSCBSTRK             GET NUMBER OF DSCBS
         AR    R3,R2
         XR    R2,R2
         IC    R4,CCHHR+4              RECORD NUMBER
         IC    R2,CCHHR+3              HH
         MH    R2,DSCBSTRK             CONVERT HH TO RECORDS
         AR    R4,R2
         XR    R2,R2
         TM    SW,T2321                IS IT A DATA CELL?
         BZ    Y2321C                  NO.
         IC    R2,CCHHR                YES, PROCESS ITS
         MH    R2,=H'10'               SPECIAL CCHH
         ST    R2,HOLD+28
         XR    R2,R2
         IC    R2,CCHHR+1
         A     R2,HOLD+28
         MH    R2,=H'5'
         ST    R2,HOLD+28
         XR    R2,R2
         IC    R2,CCHHR+2
         A     R2,HOLD+28
         B     Y2321D
Y2321C   IC    R2,CCHHR+1              GET THE CC
Y2321D   MH    R2,TRKPRCYL             GET NUM TRKS/CYL
         MH    R2,DSCBSTRK             GET NUM DSCBS/TRK
         AR    R4,R2
* GET THE CORE OFFSET FROM THE PRESENT DSCB
         SR    R3,R4
         MH    R3,=Y(BLKLEN)           BUMP TO OFFSET
         AR    R3,R10                  GET CORE ADRS OF FMT 3
         BR    R14
 EJECT
* SAVE EXTENT ENTRY IN TABLE FOR FRACK 'ALLOCATION MAP'
STORMAP  LA    R1,DS1DSNAM             GET A(DSN)
         ST    R2,WORK+4               SAVE FIRST-LAST TRKS
         ST    R1,WORK                 SAVE A(DSN)
         STC   R3,WORK                 SAVE EXTENT NO.
         L     R3,ACORE2               A(TABLE)
         L     R4,SRTKNT               GET NO. OF ENTRIES
SORTE12  BCT   R4,SORTE11
         MVC   8(8,R3),WORK            PUT THE ENTRY AWAY.
SORTE14  L     R4,SRTKNT               GET COUNT
         LA    R4,1(R4)                BUMP FOR NEW ENTRY
         ST    R4,SRTKNT               AND SAVE IT.
         BR    R14
SORTE11  LA    R3,8(R3)                BUMP TO NEXT POSITION
         C     R3,ALIMIT               END OF CORE?
         BNL   ERROR8                  YES.
         LM    R0,R1,0(R3)             SAVE CURRENT ENTRY
         LA    R5,0(R3)                PNTR TO TOP
         CL    R2,4(R5)                LOOK AT REL TRKS
         BH    SORTE12                 IF TOO BIG.
SORTE13  MVC   0(8,R3),WORK            PUT AWAY THE ENTRY
         LA    R3,8(R3)                BUMP TO NEXT POSITION
         C     R3,ALIMIT               END OF CORE?
         BNL   ERROR8                  YES.
         STM   R0,R1,WORK              SAVE CURRENT ENTRY
         LM    R0,R1,0(R3)             SAVE THE NEXT ENTRY
         BCT   R4,SORTE13
         MVC   0(8,R3),WORK            STICK IN LAST ENTRY
         B     SORTE14                 GO FINISH
 EJECT
* FORMAT AND OUTPUT THE TRACK 'ALLOCATION MAP'
         NOP   FINMAPZ                                         FCI
MAPZ     L     R5,SRTKNT               LOAD UP NO. OF EXTENTS
         BCTR  R5,0                    CORRECT COUNT
         L     R9,ACORE1               START OF SORT BIN
         MVC   MAPS+1(MAPSL-1),MAPS
         AIF   ('&LOGMOD2' NE 'Y').FCI$1
         TM    DSNLOG+48,X'10'         WAS LOGGING DONE          LOGMOD
         BO    MAP1                      YES-> SKIP PRINT OF TRK LOGMOD
.FCI$1   ANOP
         PRNT  0,OP=8                  INIT
MAP1     L     R10,0(R9)               A(DSNAME)
         L     R2,4(R9)                GET THE SIZES
         BAL   R14,LENGTH              LENGTH
         LA    R1,LNGTH+1
         BAL   R14,EDIT                LENGTH
         A     R3,TRKTOTAL             ACCUM TRK TOTAL              HHH
         ST    R3,TRKTOTAL             STORE BACK                   HHH
         LH    R3,HOLD                 FIRST TRACK
         LA    R1,STRTT+1
         BAL   R14,EDIT                START TRACK
         LH    R3,HOLD+2               LAST TRACK
         LA    R1,LSTT+1
         BAL   R14,EDIT                LAST TRACK
         XR    R3,R3
         IC    R3,0(R9)                GET THE EXTENT NO.
         LA    R1,EXTT                 EXTENT NO.
         BAL   R14,EDIT
         MVI   SHLINE,C' '             CLEAR THE AREA
         MVC   SHLINE+1(43),SHLINE
         CLI   44(R10),C'1'            IS IT A FORMAT 1?
         BE    MVCDSN                  YES, MOVE IN THE DSNAME
         CLI   44(R10),C'4'            IS IT A FORMAT 4 (VTOC)?
         BE    MVCVTOC
         MVC   SHLINE(15),=C'* * *FREE SPACE'
         B     MAPPUT
MVCVTOC  MVC   SHLINE(4),=C'VTOC'
         B     MAPPUT
MVCDSN   MVC   SHLINE,0(R10)           MOVE IN DATA SET NAME
MAPPUT   DS    0H
         AIF   ('&LOGMOD2' NE 'Y').FCI$2
         TM    DSNLOG+48,X'10'         WAS LOGGING DONE          LOGMOD
         BO    MAPNOPUT                  YES-> SKIP PRINT OF TRK LOGMOD
.FCI$2   ANOP
         PRNT  MAPS,OP=20,LEN=MAPSL
         AIF   ('&LOGMOD2' NE 'Y').FCI$3A
MAPNOPUT DS    0H                                                LOGMOD
.FCI$3A  ANOP
         CH    R5,=H'1'                LAST TIME THRU?
         BE    NOHOLE                  YES, DO NOT CHECK LAST ONE
         LH    R3,6(R9)                GET THE LAST TRK
         LH    R15,12(R9)              GET NEXT START TRK
         SR    R15,R3                  CHECK FOR DIFFERENCE GT 1
         BCTR  R15,0
         LTR   R15,R15
         BZ    NOHOLE                  IF ZERO, THEN NO HOLE.
         LA    R1,HSRT+1
         BAL   R14,EDIT
         LH    R3,12(R9)               GET NEXT START ADRS
         LA    R1,HEND+1
         BAL   R14,EDIT
         AIF   ('&LOGMOD2' NE 'Y').FCI$3
         TM    DSNLOG+48,X'10'         WAS LOGGING DONE          LOGMOD
         BO    NOHOLE                    YES-> SKIP PRINT OF TRK LOGMOD
.FCI$3   ANOP
         PRNT  HOLMES,OP=20,LEN=HOLMESL
NOHOLE   LA    R9,8(R9)                GET THE NEXT ENTRY
         BCT   R5,MAP1
         L     R15,ACORE0              A(#TOP)
         ST    R9,0(R15)               SAVE TOP USED
         MVC   MAPS+1(MAPSL-1),MAPS    CLEAR AREA
         MVC   LSTT,=C'TOTAL'
         L     R3,TRKTOTAL
         LA    R1,LNGTH+1
         BAL   R14,EDIT
         XC    TRKTOTAL,TRKTOTAL                                    HHH
* ALL DONE WITH THIS VOLUME
FINMAPZ  PRNT  MAPS,OP=24,LEN=40
*
         XR    R15,R15                 RC=0
GOBAK    L     R13,4(R13)              RESTORE REGS AND
         RETURN (14,12),T,RC=(15)      RETURN TO FASTDISK.
ERROR4   LA    R15,4                   RC=4
         B     GOBAK
ERROR8   LA    R15,8                   RC=8
         B     GOBAK
         AIF   ('&LOGMOD' NE 'Y').SKIPLXX
         SPACE 2
INITLOG  SAVE  (14,12),,*             INITIALIZE LOG DATASET     LOGMOD
         LR    R12,R15                                           LOGMOD
         USING INITLOG,R12                                       LOGMOD
         LA    R15,FCISAVE           USE OUR SAVEAREA SO NO      LOGMOD
         ST    R13,4(R15)                     BASE CONFLICT      LOGMOD
         ST    R15,8(R13)                                        LOGMOD
         LR    R13,R15                                           LOGMOD
         OPEN  (DSNLOG,OUTPUT)                                   LOGMOD
         L     R13,4(R13)                                        LOGMOD
         RETURN (14,12),T,RC=0                                   LOGMOD
         SPACE 2
TERMLOG  SAVE  (14,12),,*             INITIALIZE LOG DATASET     LOGMOD
         LR    R12,R15                                           LOGMOD
         USING TERMLOG,R12                                       LOGMOD
         LA    R15,FCISAVE                                       LOGMOD
         ST    R13,4(R15)                                        LOGMOD
         ST    R15,8(R13)                                        LOGMOD
         LR    R13,R15                                           LOGMOD
         CLOSE DSNLOG                                            LOGMOD
*        FREEPOOL DSNLOG                                         LOGMOD
         L     R13,4(R13)                                        LOGMOD
         RETURN (14,12),T,RC=0                                   LOGMOD
FCISAVE  DC    18F'0'                  OUR SAVE AREA
.SKIPLXX ANOP
 EJECT
WORK     DC    2D'0'
HOLD     DC    4D'0'                   WORK AREA
SAVEAREA DC    18F'0'                  FORMAT'S SAVE AREA
DEVNAMET DC    F'0'                    EPA FOR DEVNAMET          FCI
PRNTPARM DC    A(SAVESER,UNIT,DEVICE)
         AIF   ('&MSSMOD' NE 'Y').M$5                            MSSMOD
         DC    A(MSVGP)                                          MSSMOD
.M$5     ANOP                                                    MSSMOD
         AIF   ('&ASM2MOD' NE 'Y').SKIPA1
ASM2PARM DC    A(0,ASM2MSG)
         AIF   ('&LOGMOD' NE 'Y').SKIPL11
         DC    A(LOGUCNT)              ADDR OF AREA IN LOG RCD   LOGMOD
.SKIPL11 ANOP
ASM2DSCB EQU   ASM2PARM                ADDRESS OF DSCB1 TO BE ANALYZED
.SKIPA1  ANOP
EXTKNT   DC    F'0'
SRTKNT   DC    F'1'
NTRKNT   DC    F'1'                    NEXT ENTRY POSITION FOR F1 DSCB
TRKTOTAL DC    F'0'
ATIOT    DC    A(0)                    A(TIOT ENTRY)
ADATACH  DC    A(0)                    A(DATA CHAIN)
ACCTABLE DC    A(0)                    A(WORK AREA FOR EXTENTS)
ACORE0   DC    A(0)                    A(#TOP)
ACORE1   DC    A(0)                    A(BOTTOM OF WORK AREA)
ACORE2   DC    A(0)
ALIMIT   DC    A(0)                    A(TOP OF DYNAMIC CORE)
DSCBSTRK DC    H'0'                    DSCBS/TRK
TRKPRCYL DC    H'0'                    TRKS/CYL
SW       DC    X'00'                   INTERNAL SWITCHES
F1SW     DC    X'00'
PAT      DC    X'402020202120'         EDITING PATTERN - 4 COLUMNS
*
         LTORG
*
         AIF   ('&LOGMOD' NE 'Y').SKIPL12
         EJECT
         DS    0H
LOGDSN   DC    CL44' '                LOG DSNAME                 LOGMOD
         AIF   ('&MSSMOD' NE 'Y').M$3                            MSSMOD
LOGMSVGP DC    CL8' '                 LOG MSVGP FOR MSS VOLS     MSSMOD
.M$3     ANOP                                                    MSSMOD
LOGVOL   DC    CL6' '                 VOLUME                     LOGMOD
         AIF   ('&MSSMOD' NE 'Y').M$3A                           MSSMOD
LOGDEVCE DC    CL8' '                 DEVICE TYPE (E.G '3330-1') MSSMOD
.M$3A    ANOP                                                    MSSMOD
LOGUTYP  DC    X'00'                  DISK TYPE =X'0B'=3350 ETC  LOGMOD
LOGEXTNT DC    X'00'                  # EXTENTS FOR DATASET      LOGMOD
LOGDSORG DC    CL3' '                 DSORG                      LOGMOD
LOGRECFM DC    CL4' '                 RECORD FORMAT              LOGMOD
LOGSATYP DC    CL1' '                 SECONDARY ALLOC TYPE       LOGMOD
LOGSAQTY DC    H'0'                   SECONDARY ALLOC QTY        LOGMOD
LOGLRECL DC    H'0'                   LRECL                      LOGMOD
LOGBLKSZ DC    H'0'                   BLKSIZE                    LOGMOD
LOGTRKA  DC    H'0'                   TRACKS ALLOCATED           LOGMOD
LOGTRKU  DC    H'0'                   TRACKS USED                LOGMOD
LOGDIRA  DC    H'0'                   DIRECTORY BLOCKS ALLOCATED LOGMOD
LOGDIRU  DC    H'0'                   DIRECTORY BLOCKS USED      LOGMOD
LOGUCNT  DC    H'0'                   DIRECTORY BLOCKS USED      LOGMOD
LOGCDATE DC    PL3'0'                 LAST USED DATE     YYDDD   LOGMOD
LOGUDATE DC    PL3'0'                 LAST USED DATE     YYDDD   LOGMOD
LOGMDATE DC    PL3'0'                 LAST MODIFIED DATE YYDDD   LOGMOD
LOGMTIME DC    XL2'0000'              LAST MODIFIED TIME HHMM    LOGMOD
LOGEDATE DC    PL3'0'                 EXPIRE DATE FOR DSNYYDDD   LOGMOD
LOGMUSER DC    CL8' '                 LAST MODIFIED BY JOB/USER  LOGMOD
LOGLEN   EQU   *-LOGDSN                                          LOGMOD
         SPACE 2                                                 LOGMOD
DSNLOG   DCB   DSORG=PS,MACRF=(PM),LRECL=LOGLEN,                 LOGMODX
               RECFM=FB,DDNAME=DSNLOG                            LOGMOD
.SKIPL12 ANOP
         EJECT
SAVESER  DC    CL6'SYSRES'             DASD VOL-SER
UNIT     DC    CL3'0C0',CL2' '         UNIT PLUS SPACE FOR BIN NO.
DEVICE   DC    CL8' '                  DEVICE TYPE (MODEL NO.)   FCI
         AIF   ('&MSSMOD' NE 'Y').M$4                            MSSMOD
MSVGP    DC    CL8' '                  SAVE AREA FOR MSVGP       MSSMOD
.M$4     ANOP                                                    MSSMOD
*
DATANAME DC    CL44' ',CL09' '         DATA SET NAME
         AIF   ('&OPENMOD' NE 'Y').NOMSG
OPENMSG1 DC    CL5' ',CL2' '           LAST USED
OPENMSG2 DC    CL7' ',CL2' '           USE COUNT
.NOMSG   ANOP
         AIF   ('&ASM2MOD' NE 'Y').NOASM2M
ASM2MSG  EQU   DATANAME+48             LOCATION TO PUT ASM2DATA
.NOASM2M ANOP
CRDATE   DC    CL5' ',CL2' '           CREATE DATE
PURGDATE DC    CL5' ',CL2' '           PURGE  DATE
SERIALNO DC    CL6' ',CL2' '           SERIAL NO. (OF ORIG VOL)
SEQNO    DC    CL3' ',CL3' '           VOL SEQUENCE NO.
SPALLOC  DC    CL4' ',CL2' '           SPACE ALLOCATED - TOTAL TRACKS
SPUSED   DC    CL4' ',CL3' '           SPACE USED - TOTAL TRACKS
LEN1     EQU   *-DATANAME
DRBLOCKS DC    CL4' ',CL2' '           DIRECTORY BLOCKS ALLOCATED
DRBLUSED DC    CL4' '                  DIRECTORY BLOCKS USED
LEN2     EQU   *-DATANAME
*
CALCU    DC    CL10' '                 THIS IS A WORK AREA
*
ZOUT     DC    CL11' '
ZEXT     DC    CL3' ',CL2' '           EXTENT NUMBER
ZFIRST   DC    CL5' ',CL2' '           FIRST TRACK HERE
ZLAST    DC    CL5' ',CL2' '           LAST TRACK NEXT
ZLNGTH   DC    CL8' '                  LENGTH OF EXTENT
ZLEN     EQU   *-ZOUT
*
MAPS     DC    CL3' '
STRTT    DC    CL5' ',CL9' '           START TRACK
LSTT     DC    CL5' ',CL9' '           LAST TRACK
LNGTH    DC    CL5' ',CL7' '           LENGTH OF EXTENT
EXTT     DC    CL2' ',CL7' '           EXTENT NUMBER
SHLINE   DC    CL44' '            DATA SET NAME
MAPSL    EQU   *-MAPS
*
DEVTAB   DC    X'08',C'2314'
         DC    X'02',C'2301'
         DC    X'03',C'2303'
         DC    X'01',C'2311'
         DC    X'0B',C'3350'                     FCI
         DC    X'09',C'3330'
         DC    X'0D',C'3330'
         DC    X'0E',C'3380'                                        NTL
         DC    X'00',C'    '
*
HOLMES   DC    C'********** UNACCOUNTED SPACE BETWEEN TRACKS '
HSRT     DC    CL5' ',C' AND '
HEND     DC    CL5' ',C' *****'
HOLMESL  EQU   *-HOLMES
*
IOERR1   DC    C'*** I/O ERROR DETECTED READING DIRECTORY FOR '
ERRNAME  DC    CL44' '                 DSNAME
IOERR1L  EQU   *-IOERR1
IOERR2   DC    C'*** THEREFORE, THE DIRECTORY BLOCK COUNT WILL BE INCOR+
               RECT.'
IOERR2L  EQU   *-IOERR2
*
LINEX    DC    CL11' ',C'EXT--FIRST---LAST--LENGTH'
LINEXL   EQU   *-LINEX
*
TYPESORG DC    CL5' ',C'DSORG='
DSORG    DC    CL4' ',C'RECFM='
RECFM    DC    CL6' ',C'LRECL='
LRECL    DC    CL5' ',C' BLKSIZE='
BLKSIZE  DC    CL5' '
TYPESORL EQU   *-TYPESORG
         DC    CL8' ',C'**SECURITY='
SECURITY DC    CL10' '
SECURLEN EQU   *-TYPESORG
*
ALLMSG   DC    CL5' ',C'ALLOC='
TALLOC   DC    CL64' '
*
SHAREM1  DC    C'* * *SHARED (SPLIT) SPACE'
SHAREM1L EQU   *-SHAREM1
SHAREM2  DC    CL11' ',C'EXT--FIRST---CYL---NO. SHARING DATA SETS'
SHAREM2L EQU   *-SHAREM2
 EJECT
DSCB     DSECT
BLKLEN   EQU   160                     ** LENGTH OF CORE BLOCK **
PFWD     DS    F
PBCK     DS    F
CCHHR    DS    5C                      CCHHR FOR THIS DSCB
RES0     DS    C                       FLAGS
         DS    C                       NOT USED
         DS    C                       NOT USED
DSCB4    EQU   *
         DS    0XL44 EQU 0        PADDING OF 04 TO INDICATE FORMAT 4
         DC    44X'04' EQU 0
DS4IDFMT DC    C'4' EQU 44        F4 FOR FORMAT 4
DS4HPCHR DS    CL5  EQU 45        LAST FORMAT 1 - CCHHR
DS4DSREC DS    H    EQU 50        NUMBER OF FORMAT 0'S IN VTOC
DS4HCCHH DS    CL4  EQU 52        CCHH OF NEXT ALTERNATE TRACK
DS4NOATK DS    H    EQU 56        NUMBER OF ALTERNATE TRACKS AVAILABLE
DS4VTOCI DS    1C   EQU 58        =80 IF FORMAT 5 HAS NO MEANING
DS4NOEXT DC    X'1' EQU 59        INDICATES VTOC OF ONE EXTENT
         DS    2C   RESERVED
DS4DEVSZ DS    2H   EQU 62        DEVICE SIZE. 0,1 NO. OF LOGICAL CYL.
*                                              2,3 NO. OF TRACKS PER
DS4DEVTK DS    H    EQU 66        DEVICE TRACK LENGTH IN BYTES
DS4DEVI  DS    AL1  EQU 68        OVERHEAD BYTES FOR KEYED BLOCK
DS4DEVL  DS    AL1  EQU 69        OVERHEAD BYTES FOR KEYED LAST BLOCK
DS4DEVK  DS    AL1  EQU 70        OVERHEAD BYTES REDUCTION IF NO KEY
DS4DEVFG DS    X    EQU 71        =1 IF TOLERANCE FACTOR MUST APPLY
DS4DEVTL DS    H    EQU 72        DFVICE TOLERANCE
DS4DEVDT DS    AL1  EQU 74        NUMBER OF DSCB'S PER TRACK (44+96)
DS4DEVDB DS    AL1  EQU 75        NUMBER OF PDS DIR. BLOCKS PER TRACK
         DS    24C  RESERVED      (8+256)
DS4F6PTR DS    CL5  EQU 100       FORMAT 6 POINTER TO FIRST F6
DS4VTOCE DS    CL10 EQU 105       VTOC EXTENT FLAG,COUNT,CCHH,CCHH
         DS    25C  RESERVED
*
         ORG   DSCB4+140
BLKALOC  DS    H                       DIRECTORY BLKS ALLOCATED
BLKUSED  DS    H                       DIRECTORY BLKS USED
         EJECT
         ORG   DSCB4              RESTORE TO TOP FOR OTHER DSCB
DS1DSNAM DS    CL44 EQU 0         DATA SET NAME
DS1FMTID DC    C'1' EQU 44        FORMAT 1 IDENTIFIER = F1
DS1DSSN  DS    CL6  EQU 45        DATA SET SERIAL NUMBER
DS1VOLSQ DS    CL2  EQU 51        VOLUME SEQUENCE NUMBER
DS1CREDT DS    CL3  EQU 53        CREATION DATE  (YDD)
DS1EXPDT DS    CL3  EQU 56        EXPIRATION DATE (YDD)
DS1NOEPV DS    AL1  EQU 59        NUMBER OF EXTENTS
DS1NOBDB DS    AL1  EQU 60        NUMBER OF BYTES USED IN LAST PDS
         DS    1C   RESERVED
DS1SYSCD DS    CL13 EQU 62        SYSTEM CODE FOR PROGRAMMING SYS ?
         AIF   ('&OPENMOD' NE 'Y').NO
OPENDATE DS    XL3                     DATE LAST OPENED
OPENCNT  DS    XL4                     NO. TIMES OPENED
*
         AGO   .YES
.NO      DS    7C   RESERVED
.YES     ANOP
DS1DSORG DS    XL2  EQU 82        D. S. ORGANIZATION
*        EQU   4000 0100000X      PS PHYSICAS SEQ.   1
*        EQU   2000 0010000X      DA DIRECT ACCESS   2
*        EQU   0200 0000001X      PO PARTITIONED     6
*        EQU   0100 XXXXXXX1      U UNMOVABLE         7
DS1RECFM DS    XL1  EQU 84        RECORD FORMAT
*        EQU   80   10XXXXXX      F  FIXED
*        EQU   40   01XX0XXX      V  VARIABLE
*        EQU   C0   11X00XXX      U  UNKNOWN
*        EQU   20   XX1XXXXX      T  TRACK OVERFLOW
*        EQU   10   XXX1XXXX      B  BLOCKED  (^U)
*        EQU   88   10XX1XXX      S  STANDARD
*        EQU   04   XXXXX10X      A  ASA CONTROL CHARACTER
*        EQU   02   XXXXX01X      M  MACHINE CONTROL CHARACTER
*        EQU   00   XXXXX00X         NO CONTROL CHARACTER
DS1OPTCD DS    XL1  EQU 85        SEE DCBOPTCD IN DCB
DS1BLKL  DS    H    EQU 86        BLOCK LENGTH
DS1LRECL DS    H    EQU 88        LOGICAL RECORD LENGTH
DS1KEYL  DS    AL1  EQU 90        KEY LENGTH
DS1RKP   DS    CL2  EQU 91        RELATIVE KEY POSITION
DS1DSIND DS    XL1  EQU 93        DATA SET INDICATORS
*        EQU   80                 LAST VOLUME FOR DATA SET
*        EQU   40                 DATA SET MUST REMAIN IN SAME ABSOLUTE
*                                 LOCATION ON DISK
*        EQU   20                 BLOCK LENGTH MUST BE MULTIPLE OF 8
DS1SCALO DS    0CL4 EQU 94        SECONDARY ALLOCATION
         DS    XL1  EQU 94        ALLOCATION PARAMETERS
*        EQU   00                 NO SECONDARY - TRACKS RELATICE TO FIX
*        EQU   40                 PHYSICAL RECORDS (BLOCKS)
*        EQU   80                 TRACKS
*        EQU   C0                 CYLINDERS
*        EQU   08                 CONTIGUOUS EXTENT
*        EQU   04                 MAX. CONTIGUOUS EXTENT ON VOLUME
*        EQU   02                 5 LARGEST EXTENTS GREATER THAN A MIN
*        EQU   01                 RECORDS TO ROUND UP TO CYLINDER BOUND
         DS    AL3  EQU 95        SECONDARY ALLOCATION QUANITY
DS1LSTAR DS    0CL5 EQU 98        LAST BLOCK POINTER
         DS    CL2  EQU 98        TT RELATIVE TRACK ADDRESS OF LAST
         DS    CL1  EQU 100       R - BLOCK NUMBER ON THAT TRACK
DS1TRBAL DS    CL2  EQU 101       LL- BYTES REMAINING ON LAST TRACK
         DS    2C   RESERVED
DS1EXT1  DS    0CL10 EQU 105      FIRST EXTENT DESCRIPTION
         DS    CL1  EQU 105       EXTENT INDICATOR
*        EQU   00                 NO EXTENT
*        EQU   01                 EXTENT CONTAINS USER BLOCKS
*        EQU   80                 SHARED CYLINDERS
*        EQU   81                 EXTENT IS ONE OR MORE CYLINDERS LONG
         DS    AL1  EQU 106       EXTENT SEQUENCE NUMBER
         DS    AL4  EQU 107       CCHH - LOWER LIMIT
         DS    AL4  EQU 111       CCHH - UPPER LIMIT (LAST BLOCK)
DS1EXT2  DS    CL10 EQU 115       SECOND EXTENT DESCRIPTION
DS1EXT3  DS    CL10 EQU 125       THIRD EXTENT DESCRIPTION
DS1PTRDS DS    CL5  EQU 135       CCHHR POINTER TO FORMAT 3 FOR NEXT
         EJECT
         ORG   DSCB4
         DS    0CL4 EQU 0         IDENTIFY FORMAT 3 DSCB
         DC    4X'03'  EQU 0
DS3EXTNT DS    4CL10  EQU 4       4 EXTENT FIELDS. SEE DS1EXT1 FORMAT
DS3FMTID DC    C'3' EQU 44        F3 - INDICATE F3 FOR FORMAT 3
DS3ADEXT DS    9CL10  EQU 48      9 MORE FIELDS FOR EXTENTS
DS3PTRDS DS    CL5  RESERVED
         EJECT
         ORG   DSCB4
DS5KEYID DS    0CL4 EQU 0         IDENTIFY FORMAT 5
         DC    4XL1'05' EQU 0     IDENTIFICATION FOR FORMAT 5
DS5AVEXT DS    0CL5 EQU 4         AVAILABLE SPACE
         DS    CL2  EQU 4         RELATIVE TRACK ADDRESS OF EXTENT
         DS    CL2  EQU 6         NUMBER OF FULL CYLINDERS
         DS    CL1  EQU 8         NUMBER OF TRACKS ALSO USED
DS5EXTAV DS    7CL5 EQU 9         7 MORE AVAILABLE SPACE FIELDS
DS5FMTID DC    C'5' EQU 44        F5 IDENTIFY FORMAT 5
DS5MAVET DS    18CL5 EQU 45       18 MORE AVAILABLE SPACE FIELDS
DS5PTRDS DS    CL5  EQU 135       POINTER TO NEXT DSCB 5 - CCHHR
         EJECT
         ORG   DSCB4
DS6KEYID DS    0CL4 EQU 0         IDENTIFY FORMAT 6
         DC    4XL1'06'           06 IN FULL WORD
DS6AVEXT DS    0CL5 EQU 4         EXTENT BEING SHARED
         DS    CL2  EQU 4         RELATIVE TRACK ADDRESS OF FIRST CYL.
         DS    CL2  EQU 6         NUMBER OF FULL CYLINDERS BEING SHARED
         DS    CL1  EQU 8         NUMBER OF DATA SETS SHARING EXTENT
DS6EXTAV DS    7CL5 EQU 9         7 MORE EXTENTS BEING SHARED
DS6FMTID DC    C'6' EQU 44        F6 - FORMAT 6 ID.
DS6MAVET DS    18CL5 EQU 45       18 MORE EXTENTS BEING SHARED
DS6PTRDS DS    CL5  EQU 135       POINTER TO NEXT DSCB 6 - CCHHR
         EJECT
UCB      DSECT
SRTEJBNR DS    XL1  EQU  0        INTERNAL JOB NUMBER
SRTECHAN DS    XL1  EQU  1        ALLOCATION CHANNEL MASK
UCBID    DC    X'FF' EQU 2        IDENTIFICATION
SRTESTAT DS    XL1  EQU  3        STATUS BITS
*              BIT 0     80       1 IS ON LINE
*              BIT 0              0 IS OFF LINE
*              BIT 1     40       CHANGE ON LINE - OFF LINE
*              BIT 2     20       RESERVED DEVICE
*              BIT 3     10       UNLOADED THIS DEVICE
*              BIT 4     08       ALLOCATED
*              BIT 5     04       PERMANENTLY MOUNTED
*              BIT 6     02       SYSTEMS RESIDENCE
*              BIT 7     01       DADSM INTERLOCK
UCBCHA   DS    XL1  EQU  4        FLAG AND CHANNEL ADDRESS
UCBUA    DS    XL1  EQU  5        UNIT ADDRESS
UCBFL2   DS    XL1  EQU  6        FLAGS
UCBDTI   DS    XL1  EQU  7        INDEX TO DEVICE TABLE
UCBETI   DS    XL1  EQU  8        POINTER TO ERROR ROUTINE
UCBSTI   DS    XL1  EQU  9        INDEX TO STATISTICS TABLE
UCBLCI   DS    XL1  EQU  10       INDEX TO LOGICAL CHANNEL TABLE
UCBATI   DS    XL1  EQU  11       INDEX TO ATTENTION TABLE
UCBWGT   DS    XL1  EQU  12       FLAGS
UCBNAME  DS    CL3  EQU  13       UNIT NAME IN EBCDIC
UCBTYP   DS    XL4  EQU  16       DEVICE TYPE
UCBLTS   DS    H    EQU  20       LAST REQUEST ELEMENT
UCBSNS   DS    XL6  EQU  22       SENSE INFORMATION
SRTEVOLI DS    XL6  EQU  28       VOLUME SERIAL NUMBER
SRTESTAB DS    XL1  EQU  34       STATUS BITS B
SRTEDMCT DS    XL1  EQU  35       NUMBER OF DCB'S OPEN ON VOLUME
SRTEFSCT DS    H    EQU  36       3 BYTES FOR TTR OF VTOC
SRTEFSEQ DS    H    EQU  38       LAST BYTE IS ZERO
UCBSQC   DS    D    EQU  40       SEEK QUEUE CONTROL WORD
UCBSKA   DS    D    EQU  48       DISK ADDRESS MBBCCHHR FOR LAST SEEK
SRTEUSER DS    XL1  EQU  56       CURRENT NUMBER OF USERS
SRTEECBA DS    AL3  EQU  57       DIRECT ACCESS ECB ADDRESS
*
         END   ,             *** END OF FASTMAP1/FORMAT ***
