*          DATA SET PSNERROR   AT LEVEL 002 AS OF 10/30/80
         TITLE 'PSNERROR - STANDARD ERROR PROCESSOR'
         COPY PSNMERMS
         EJECT
PSNERROR PSNMSTRT SASIZ=WKLENG
         EJECT
*                    TO PROCESS ANY ERROR CONDITIONS FOUND
*                    BY THE VARIOUS PROCESSORS INVOLVED
*              MAINLINE PROCESS - CHECK FOR REQUESTS AND SERVICE THEM
*
         STM   R1,R12,PSWERREG    SAVE CURRENT REGS IN OUR HOLD AREA
*
         BAL   R14,CHKINPUT       DEFINE THE REQUEST
         LTR   R15,R15
         BZ    PROCERR            THIS IS A NORMAL REQUEST
*                    AN OUTPUT BUFFER REQUEST - PROCESS
         BAL   R14,OUTBUFFR       GET THE BUFFER
         B     RETURN             PASS BACK THE ADDRESS
*
PROCERR  EQU   *
         USING ERRTABL,R9
*
         BAL   R14,BUILDMSG       BUILD UP THE TEXT OF IT ALL
*
         TM    ERDOPT1,ERD1ERR    WAS AN ERROR MESSAGE IN ORDER
         BZ    *+8
         BAL   R14,WRITERR        YES - PUT IT OUT
*
         TM    ERDOPT1,ERD1SNAP   CHECK FOR A SNAP
         BZ    *+8
         BAL   R14,SNAP           SNAP WAS REQUESTED
*
         TM    ERDOPT1,ERD1CALR   WTO CALLER NAME AND DISPLACEMENT
         BZ    *+8
         BAL   R14,CALLER         CALLER IDENTIFICATION REQUESTED
*
         TM    ERDOPT1,ERD1WTO    WAS A WTO IN THE LIST
         BZ    *+8
         BAL   R14,WTO            YES - PUT IT OUT
*
         TM    ERDOPT1,ERD1WTOR   CHECK IF OPERATOR 2-WAY REQUESTED
         BZ    *+8
         BAL   R14,WTOR           WTOR WAS REQUESTED
*
         TM    ERDOPT1,ERD1ABND   HOW ABOUT THE ULTIMATE
         BZ    *+8                WHEW
         BAL   R14,ABEND          ITS ALL OVER, FOLKS
*
         LH    R15,ERDSEVER       PICK UP SEVERITY OF THE ERROR
         B     RETURN
         EJECT
*                    TO DECODE THE INPUT PARAMETERS, DEFINING THE
*                    FORMAT OF THE REQUEST.
*
CHKINPUT PSNMBLOK CKI,RENT=YES
         LTR   R10,R1             SAVE THE PASSED PARAMETER LIST PTR
         BZ    CKIEXIT            RETURN WITH NONZERO R15 - BUFFER REQ
         LA    R0,256             HIGHEST ERROR NUMBER ALLOWED
         CR    R1,R0              MAYBE THIS IS THE REAL POINTER
         BL    CKITABLE           NO - THIS IS AN ERROR NUMBER
         LR    R9,R10             SO NOW R9 HAS ERROR BLOCK
         LH    R10,ERDERRNO       AND R10 THE ERROR NUMBER
         B     CKIHIT
*
CKITABLE EQU   *                  MESSAGE IS FROM A TABLE
         L     R15,PSWERLST       PICK UP THE ERROR LIST CSECT
         BALR  R14,R15            ASK FOR HIS POINTERS
         L     R9,0(,R15)         PICK UP STARTING POINTER
         L     R8,4(,R15)         AND END OF THE LIST
         LR    R0,R9              SAVE FOR SECOND SEARCH
*
CKILOOP  EQU   *
         CH    R10,ERDERRNO       IS THIS THE ONE
         BE    CKIHIT             YES - PASS IT BACK
         AH    R9,ERDLENG         ADD CURRENT LENGTH TO POINTER
         CR    R9,R8              HOW DOES IT FIT INTO TABLE
         BL    CKILOOP           STILL IN IT
         LR    R9,R0              PASS BACK ENTRY FOR BAD ENTRY
         SR    R15,R15            SET PROPER RETURN CODE
         B     CKIEXIT
*
CKIHIT   EQU   *
         LA    R0,1
         AH    R0,ERDCOUNT
         STH   R0,ERDCOUNT
         LH    R1,PSWPOINT        ADD UP THE POINT TOTAL
         AH    R1,ERDPOINT
         STH   R1,PSWPOINT
         SR    R15,R15            SET PROPER RETURN CODE
         B     CKIEXIT
         EJECT
*                    TO INSERT THE VALUES IN THE MESSAGE
*                    GIVEN THE BASE MESSAGE AND VARIABLE LIST
*                    OV VALUES PASSED BY THE CALLER
*
BUILDMSG PSNMBLOK BMS
         MVC   PSWEBILD,PSWBLANK  CLEAR THE MESSAGE AREA
         LA    R8,PSWEBILD        POINT TO THE BUILD AREA
         LH    R14,ERDRDW         LENGTH OF THE BARE MESSAGE
         BCTR  R14,0              LESS ONE FOR MOVING AROUND
         LA    R4,ERDMSG          POINT TO THAT MESSAGE
         TM    ERDOPT1,ERD1INSR   IS INSERT REQUESTED
         BO    BMSINSR            YES - SCAN FOR INSERTION POINTS
*                    MOVE IN THE VIRGIN MESSAGE
BMSNOINS EQU   *
         EX    R14,BMSMOVE        MOVE IN THE MESSAGE
         LA    R1,1(R14,R8)       POINT TO END OF MESSAGE
         B     BMSDONE            AND FOR FINAL UPDATING
BMSMOVE  MVC   0(0,R8),0(R4)      EX TO MOVE IN THE MESSAGE
*
*                    INSERTIONS INTO THE MESSAGE COME HERE - SCAN FOR
*                    THE / AND REPLACE WITH VALUES PASSED
BMSINSR  EQU   *
         LA    R3,PSWERV1-4       PREPARE FOR INSERTION LIST
         LA    R15,0(R4,R14)      LAST BYTE OF THE MESSAGE
         LA    R14,1              INCREMENT FOR THE SEARCH
BMSVINSR EQU   *                  VARIABLE INSERT LOOP
         LA    R3,4(,R3)          POINT TO NEXT ENTRY IN PARM LIST
         CR    R4,R15             CHECK FOR END OF TEXT, OF COURSE
         BNL   BMSVALUI           NO MORE MSG - ONLY MORE INSERTS
         LR    R1,R4              STARTING POINT TO SCAN MESSAGE
*                    THIS IS THE SEARCH LOOP - LOOPING RATHER THAN
*                    TRT FOR VARYING LENGTHS
BMSFIND  EQU   *
         CLI   0(R1),C'/'         IS THIS THE SPECIAL ONE
         BE    BMSHIT             YES - INSERT THE SPECIAL TEXT
         BXLE  R1,R14,BMSFIND     KEEP LOOKING FOR THE END
*                   END OF THE MSG - MOVE FINAL PART
         B     BMSHIT             FOR REST OF THE VALUES
BMSMOVV  MVC   0(0,R8),0(R5)      MOVE VALUE INTO MESSAGE
BMSMOV2  MVC   0(0,R8),0(R4)      MOVE PIECE OF MESSAGE IN
*
BMSHIT   EQU   *                  R1--/,R4 AT MSG START
         SR    R1,R4              LENGTH OF THE MOVE OF MESSAGE SEG
         BCTR  R1,0               LESS ONE, OF COURSE
         EX    R1,BMSMOV2         MOVE IN MESSAGE SEGMENT
         LA    R8,1(R1,R8)        PAST RECEIVING AREA
         LA    R4,2(R1,R4)        PAST SENDING AREA
BMSVALUI EQU   *                  INSERT THE VALUE INTO MESSAGE
         L     R5,0(,R3)          POINT TO THE VALUE ITSELF
         IC    R1,0(,R3)          NOW HAVE THE LENGTH OF VALUE
         N     R1,MASKOFF         TURN OFF THE 80 BIT
         BZ    BMSSTAR            IF NONE THERE, USE DEFAULT
BMSFRNTB EQU   *                  FIND BLANKS IN FRONT
         CLI   0(R5),C' '         HAVE A LEADING BLANK
         BNE   BMSFINDB           NO - FIND BACK BLANKS
         LA    R5,1(,R5)          LOOK ON TO NEXT ONE
         BCT   R1,BMSFRNTB        AND KEEP LOOKING
BMSSTAR  EQU   *
         MVI   0(R8),C'*'         SHOW NO REAL DATA
         B     BMSDONEV           DONE WITH THAT VALUE
BMSBACK1 EQU   *                  BACK DOWN TO A NONBLANK
         LA    R6,0(R1,R5)        POINT TO LAST CHARACTER
         CLI   0(R6),C' '         IS IT A BLANK
         BNE   *+8                NO - USE THIS LENGTH
BMSFINDB EQU   *                  FOUND NON-BLANK - USE THIS LENGTH
         BCT   R1,BMSBACK1        LOOP BACK UNTIL NONBLANK FOUND
         EX    R1,BMSMOVV         MOVE IN THE VALUE
BMSDONEV EQU   *                  THAT VALUE IS ACCOUNTED FOR
         LA    R8,1(R1,R8)        POINT PAST VALUE AND SPACE
         LA    R0,PSWEBILD+L'PSWEBILD POINT TO END OF IT
         CR    R8,R0
         BNL   BMSOVFLO           GONE TOO FAR
         TM    0(R3),X'80'        IS THIS THE LAST ENTRY
         BZ    BMSVINSR           NO - MORE TO COME
*                    ALL VALUES MOVED - MORE OF MESSAGE
BMSOVFLO EQU   *
         LR    R1,R8              POINT TO END OF MESSAGE
         CR    R4,R15             MATCH AGAINST THE END
         BNL   BMSDONE            ONLY IF ALL OF MESSAGE MOVED
*                    R4 AND R15 DELINIATE THE MESSAGE NOW
         SR    R15,R4             SO THIS IS THE LENGTH TO MOVE
         EX    R15,BMSMOV2        MOVE REST OF THE MESSAGE
         LA    R1,1(R15,R8)       POINT TO THE END OF IT
*                    ENTIRE MESSAGE BUILT - CLEAN UP
BMSDONE  EQU   *
         LA    R0,PSWEBILD        START OF THE MESSAGE
         SR    R1,R0              THIS IS LENGTH OF THE MESSAGE
         STH   R1,PSWEBILD        AND SAVE THAT LENGTH
         SR    R15,R15            NORMAL EXIT FROM THE ROUTINE
         B     BMSEXIT            THAT MESSAGE IS BUILT....
         EJECT
*                    PROCESS AN ERROR MESSAGE - PUT IT ON THE
*                    ERROR DCB, OF COURSE
*
WRITERR  PSNMBLOK WER
         LH    R3,PSWEBILD        PICK UP LENGTH OF THE BUILT MESSAGE
         SH    R3,HALF5           LESS A NON-ARBITRARY AMOUNT
*
         L     R2,PSWSYPRT        POINT TO THE PROPER DCB
         TM    48(R2),X'10'       IS IT ALREADY OPEN
         BZ    WERSTERM
         LA    R15,79             MAXIMUM LENGTH USED HERE
         CR    R3,R15             CHECK FOR THIS MAX
         BL    *+12               ALL OK - USE COMPUTED LENGTH
         LR    R3,R15             STICK TO THIS CEILING
         MVC   PSWEBILD+83(2),=C' +'  SHOW MORE THERE
         BAL   R14,OUTBUFFR       ADDRESS THE PRINTER
         EX    R3,WERERMOV        MOVE IN THE MESSAGE
*
WERSTERM EQU   *                  CHECK FOR SYSTERM OUTPUT
         L     R2,PSWSTERM        ADDRESS THE SYSTERM DCB
         TM    48(R2),X'10'       IS THIS ONE OPEN
         BZ    WEREXIT            NO - BYPASS THIS PART
         L     R4,PSWSPARB        THE SPARE BUFFER AREA
         MVC   0(81,R4),PSWBLANK
         MVC   9(13,R4),WERLMASK  EDIT MASK FOR LINE NUMBER
         ED    9(10,R4),PSWLINUM  LINE NUMBER FOR THE MESSAGE
         MVC   1(8,R4),PSWPNAME   NAME OF MEMBER UNDER EDIT
         LA    R15,56             MAXIMUM LENGTH USED HERE
         CR    R3,R15             CHECK FOR THIS MAX
         BL    *+12               ALL OK - USE COMPUTED LENGTH
         LR    R3,R15             STICK TO THIS CEILING
         MVC   PSWEBILD+59(2),=C' +'  SHOW MORE THERE
         EX    R3,WERTMMOV        MOVE IN THE DIAGNOSTIC
         PUT   (R2),(R4)          SYSTERM ERROR MESSAGE
*
         B     WEREXIT
*
WERERMOV MVC   53(0,R15),PSWEBILD+4 MOVE MESSAGE TO SYSPRINT
WERTMMOV MVC   22(0,R4),PSWEBILD+4 MOVE SYSTERM MSG TO OUTPUT
WERLMASK DC    X'40202020202020202020406040'
         DS    0F
         EJECT
*                    IF THE REQUEST IS FOR A SNAP, THIS ROUTINE WILL
*                    PROVIDE A PICTURE OF THE CORE IN GREAT
*                    DETAIL
*
SNAP     PSNMBLOK SNAP
         L     R2,PSWSNAPD        POINT TO THE PROPER DCB
         TM    48(R2),X'10'       IS IT ALREADY OPEN
         BZ    SNAPEXIT
         LH    R3,ERDERRNO        ERROR NUMBER IS SNAP-ID
         SNAP  ID=(R3),MF=(E,PSWSNAP)
*
         B     SNAPEXIT
         EJECT
*                    THE IDENTIFICATION OF THE CALLER IS REQUESTED
*                    A WTO ROUTCDE=11 WITH PROGRAM ID AND DISPLACEMENT
*                    INTO THAT PROGRAM IS PRODUCED - AUTOMATIC FOR
*                    WTO, AND THEREFORE FOR ABEND
*
CALLER   PSNMBLOK  CAL
         L     R1,4(,R13)         BACK UP ONE SAVEAREA
         L     R2,68(,R1)         CAPTURE HIS R12 - BASE
         MVC   PSWABWMD,5(R2)     MOVE IN THE MODULE NAME
         L     R3,12(,R1)         CAPTURE HIS RETURN POINTER
         SR    R3,R2              DISPLACEMENT INTO THE MODULE
         ST    R3,WKDISPL         PUT THIS DISPLACEMENT IN PLACE
         UNPK  WKHOLD,WKDISPL+2(3) INSERT SOME ZONES
         TR    WKHOLD(4),PSWHEXTR AND MAKE ALL VALUES PRINTABLE
         MVC   PSWABWDS,WKHOLD+1  PUT IN THE DISPLACEMENT
         WTO   MF=(E,PSWABWTO)
         B     CALEXIT
         EJECT
*                    TO WRITE A MESSAGE TO THE OPERATOR, WITH THE
*                    MESSAGE DESCRIPTOR BLOCK PROVIDING THE ROUTING AND
*                    DESCRIPTOR CODES.
*
WTO      PSNMBLOK
         BAL   R14,CALLER
         WTO   MF=(E,PSWEBILD)
         SR    R15,R15            PASS PROPER RETURN CODE
         B     WTOEXIT
         EJECT
*                    TO SEND A MESSAGE TO THE OPERATOR REQUESTING
*                    A RESPONSE, AND EDIT THAT RESPONSE AGAINST THE
*                    LIST OF ACCEPTABLES ANSWERS.
*
WTOR     PSNMBLOK
         LA    R1,WKREPLY         THE REPLY AREA
         ST    R1,WKWTOREP        INTO THE WTOR PARM LIST
         STC   R4,WKWTOREP
         LA    R1,WKECB           THE ECB TO WAIT ON
         ST    R1,WKWTOREC        ALSO INTO THE LIST
WTORISSU EQU   *                  FOR THE REISSUE AFTER BAD ANSWER
         LA    R1,WKWTOREC        THE WTOR PARM LIST
         WTOR  MF=(E,R1)
         WAIT  ECB=WKECB,LONG=YES
         LR    R1,R4              CAPTURE LENGTH OF ANSWER ELEMENT
         BCTR  R1,0               FOR THE COMPARE
*                    VALIDATE THE REPLY
         LH    R5,ERDLENG         LENGTH OF THE FULL MSG-BLOCK
         LA    R5,ERRTABL(R5)     END OF THE ANSWER LIST
         LR    R15,R2             POINT TO START OF ANSWER LIST
WTORSRCH EQU   *                  IS THIS A PROPER RESPONSE
         EX    R1,WTORCOMP        IS THIS ANSWER VALID
         BE    WTORHIT            THIS IS THE ONE....
         BXLE  R15,R4,WTORSRCH    LOOK AGAIN
*                    BAD REPLY - REDO IT
         WTO   'PSN902A - INVALID REPLY',ROUTCDE=(1,2,11)
         B     WTORISSU           GO DO IT AGAIN
WTORCOMP CLC   0(0,R15),WKREPLY    EX TO VALIDATE REPLY
*
WTORHIT  EQU   *                  THIS REPLY IS VALID
         LA    R15,WKREPLY        PASS BACK THE REPLY
         B     WTOREXIT           AND CLEAR THE AREA
         EJECT
*                    THE ULTIMATE SOLUTION - THINGS HAVE NOT
*                    GONE WELL AND THIS IS THE ONLY WAY OUT
*
ABEND    PSNMBLOK AB
         BAL   R14,WTO            ALWAYS MESSAGE THIS ONE FIRST
*
         BAL   R14,CLOSFILS
*
         LH    R2,ERDERRNO        PICK UP THE ERROR NUMBER
         LA    R1,1000(,R2)       PLUS 1000 FOR THE USER-CODE
         ABEND  (1),DUMP
*
         EJECT
*                    CLOSE ANY OF THE DCBS THAT HAVE BEEN
*                    WORKED OVER DURING THE RUN
*
CLOSFILS PSNMBLOK CLOS
         LA    R3,PSWDCBS         POINT TO THE START OF THE DCBS
         LA    R4,4               LENGTH OF A POINTER ENTRY
         LA    R5,PSWDCBX         LAST POSSIBLE DCB POINTER
*
CLOSLOOP EQU   *
         L     R2,0(,R3)          THE ADDRESS OF A DCB
         LTR   R2,R2              IS THERE EVEN ONE THERE
         BZ    CLOSNEXT           NO - SKIP THE IDEA
         TM    48(R2),X'10'       IS THIS THING OPEN?
         BZ    CLOSNEXT           NO - CARRY STRAIGHT ON
*                    AN EXISTANT, OPEN DCB - CLOSE IT
         ST    R2,WKDOUBL
         MVI   WKDOUBL,X'80'      SHOW END OF THIS LIST
         CLOSE   MF=(E,WKDOUBL)
CLOSNEXT EQU   *
         BXLE  R3,R4,CLOSLOOP
         SR    R15,R15            NORMAL COMPLETION, OF COURSE
         B     CLOSEXIT           AND THAT IS THE END OF THAT
         EJECT
*                    TO OBTAIN A BUFFER, COUNTING LINES AND ALL
*                    EITHER FOR ERROR ROUTINE, OR FOR AN OUTSIDE
*                    REQUESTOR
*
OUTBUFFR PSNMBLOK  OBF
         L     R4,PSWSYPRT        ADDRESS THE PRINT DCB
         TM    48(R4),X'10'       IS THE PRINT DCB OPEN
         BZ    OBFNOTOP           NO - NO PRINT OUTPUT REQUESTED
*
*                    DETERMINE LINE COUNT FROM LAST USER
         L     R2,PSWBUFSV        ADDRESS SAVED BUFFER ADDRESS
         LA    R1,1               GUESS AT SINGLE-SPACE
         CLI   0(R2),C' '         AND IS IT
         BE    OBFLSET            YES, INDEED
         LA    R1,3               REGUESS AT TRIPLE, THEN
         CLI   0(R2),C'-'
         BE    OBFLSET            SO THAT WAS IT
         LA    R1,2               ALL THE REST ARE DOUBLE-SPACE.....
OBFLSET  EQU   *
         AH    R1,PSWLINCT        UP YOUR LINE COUNT
         STH   R1,PSWLINCT
         CH    R1,PSWMAXLN        HAS THIS PAGE OVERFLOWED
         BL    OBFGET             NO - CARRY STRAIGHT ON
*
*                    A NEW PAGE - PUT OUT THE HEADINGS
         PUT   (R4)
         MVC   0(136,R1),HEAD1    INSERT THE MAIN HEADING
         AP    PSWPAGE,PSWPONE    UP YOUR PAGE
         ED    H1PAGE-HEAD1(L'H1PAGE,R1),PSWPAGE
         PUT   (R4)
         MVC   0(136,R1),HEAD2
         MVC   H2RMODE-HEAD2(L'H2RMODE,R1),PSWRMODE  INSERT RPT MODENTL
         MVC   H2PNAME-HEAD2(L'H2PNAME,R1),PSWPNAME   ADD PROC NAME
         MVC   H2DATE-HEAD2(L'H2DATE,R1),PSWDATE     TODAYS DATE
         MVC   H2TIME-HEAD2(L'H2TIME,R1),PSWTIME     TIME STARTED
         MVC   H2DSN-HEAD2(L'H2DSN,R1),PSWDSNAM      MOVE IN DSNAME NTL
         MVC   H2MASK-HEAD2(L'H2MASK,R1),PSWMMEMB    MOVE MEMB MASK NTL
         MVI   0(R1),C'0'         AND DOUBLE-SPACE IT
         PUT   (R4)               FOR SOME BLANK LINES, NEXT
         MVC   0(136,R1),HEAD3    PUT OUT THE THIRD LINE            NTL
         MVI   0(R1),C'-'         AND TRIPLE SPACE IT               NTL
         LA    R1,7               NUMBER OF LINES THUS FAR          NTL
         STH   R1,PSWLINCT
*
OBFGET   EQU   *                  OBTAIN BUFFER FOR REPORT LINE
         PUT   (R4)
         MVC   0(136,R1),PSWBLANK PRECLEAR THE LINE
         LR    R15,R1             PASS BACK THE ADDRESS
         ST    R1,PSWBUFSV        REMEMBER BUFFER LOCATION
         B     OBFEXIT
*
OBFNOTOP EQU   *                  REPORT NOT REQUESTED THIS RUN
         L     R15,PSWSPARB       POINT TO SCRATCH AREA
         B     OBFEXIT
         EJECT
         DS    0D             THE REPORT HEADINGS
*
HEAD1    DS    0CL136
         DC    CL48'1PROCSCAN  (VER 1.0) '
         DC    CL67'INTEL-CIS PROC VERIFICATION UTILITY'
         DC    C'PAGE'
H1PAGE   DC    X'4020206B202120'
         DC    CL10' '
H1LENG   EQU   *-HEAD1
*
*
HEAD2    DS    0CL136
         DC    CL1' '                                               NTL
H2RMODE  DC    CL11' '
         DC    CL1' '                                               NTL
         DC    C'MEMBER='                                           NTL
H2PNAME  DC    CL8' '
         DC    CL05' DSN='
H2DSN    DC    CL44' '                                              NTL
         DC    CL11' '                                              NTL
H2DATE   DC    CL8' '
         DC    CL3' '
H2TIME   DC    CL5' '
         DC    CL07'  MASK='                                        NTL
H2MASK   DC    CL8' '                                               NTL
         DC    CL17' '                                              NTL
H2LENG   EQU   *-HEAD2
*
HEAD3    DC    CL136' ....+....1....+....2....+....3....+....4....+....*
               5....+....6....+....7.*--------'                     NTL
*
*
*                    CONSTANTS AND SUCH FOR THESE ROUTINES
MASKOFF  DC    0F'0',X'0000007F'  TO CLEAR 80 IN PARM FIELD
HALF5    DC    H'5'               LENGTH OF MSG PREFIX TO IGNORE
*
         LTORG
         EJECT
*                    THE DESCRIPTION OF THE GOTTEN-MAIN WORK AREA
WORKAREA DSECT
         DS    18F                THE STANDARD SAVEAREA
WKDOUBL  DS    D                  WORK DOUBLE-WORD
WKWTOREP DS    F                  LENG AND POINTER TO REPLY AREA
WKWTOREC DS    F                  POINTER TO ECB ASSOCIATED WITH WTOR
WKREPLY  DS    CL8                THE WTOR REPLY AREA
WKECB    DS    F                  ECB FOR THE WTOR
WKDISPL  DS    F                  HOLD FOR DISPLACEMENT COMPUTE - CALLE
         DS    C                  OVERFLOW IN THAT COMPUTE
WKHOLD   DS    CL5                UNPACKED VALUE OF DISPLACEMENT
*
         PSNMBLOK RENT=REGS
WKLENG   EQU   *-WORKAREA         LENGTH OF THE WORKAREA
         EJECT
         PSNMERMD
         EJECT
*                    THE COMMUNICATION AREA PASSED INTERNALLY
         PSNMWORK
*
         END
