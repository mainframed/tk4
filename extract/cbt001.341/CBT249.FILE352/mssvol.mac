        /* DATA SET MSSVOL     AT LEVEL 001 AS OF 04/01/81    */
 MSSVOL: /* DASD MONITOR SYSTEM - GEN MSSVOL LIST    V1M0            */
          PROC OPTIONS(MAIN) REORDER;
 /*                                                                  */
 /*    THIS SPECIAL USE PROGRAM IS FOR INFORMATION PROCESSING        */
 /*    TO BE USED ON TSO.  OUTPUT REPORT CALLED REPORT IS 79 CHARS.  */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /* BILL WILLIAMS V1M0    15 AUG 79                                  */
 /*                                                                  */
 /* PROGRAM RETURNS RC=1000   NORMAL (NO PROBLEMS)                   */
 /*                 RC=1016   NO MSSVOLS TO MONITOR                  */
 /*                                                                  */

 DCL SYSIN    FILE  RECORD SEQUENTIAL INPUT  ENV(CONSECUTIVE);
 DCL MSVI     FILE  RECORD KEYED BUFFERED SEQUENTIAL INPUT
                    ENV(VSAM,GENKEY);
 DCL REPORT   FILE  STREAM PRINT OUTPUT;


 DCL INREC    CHAR(80)    INIT(' ');

1/*                                                                */
 /* THE FOLLOWING RECORDS ARE IN THE MSVI..THE MNEMONICS           */
 /* (AND RECORD LAYOUT) ARE FROM THE OS/VS2 MVS MASS STORAGE       */
 /* SYSTEM COMMUNICATOR (MSSC) LOGIC MANUAL FORM SY35-0013-2       */
 /*                                                                */

 DCL 1 GREC,                      /* MSVI GROUP RECORD  */
       2 GROG        CHAR(3)  INIT('G  '),
       2 GROVVGRP    CHAR(8)  INIT(' '),
       2 GROBLANK    CHAR(1)  INIT(' '),
       2 GROZERO     BIT(8)   INIT((8)'0'B),
       2 GROGVR      BIT(1),
       2 GRORES1     BIT(15),
       2 GROBIND     BIT(1),
       2 GROEXCL     BIT(1),
       2 GRODAREA    BIT(1),
       2 GRORONLY    BIT(1),
       2 GRORLSE     BIT(1),
       2 GRORETN     BIT(1),
       2 GROMSG1     BIT(1),
       2 GRORSVD2    BIT(9),
       2 GROFSN      CHAR(6),
       2 GROLSN      CHAR(6),
       2 GROPCENT    BIT(8),
       2 GRONGEN     FIXED BIN(15,0) UNALIGNED,
       2 GRONRSTD    FIXED BIN(15,0) UNALIGNED,
       2 GRONINAC    FIXED BIN(15,0) UNALIGNED,
       2 GROPSPD     FIXED BIN(15,0) UNALIGNED,
       2 GROSSPD     FIXED BIN(15,0) UNALIGNED,
       2 GROSTRSH    FIXED BIN(31,0) UNALIGNED,
       2 GROFRESP    FIXED BIN(31,0) UNALIGNED,
       2 GROFREXT    FIXED BIN(31,0) UNALIGNED,
       2 GRORETPD    FIXED BIN(31,0) UNALIGNED,
       2 GROERRDT    CHAR(4),
       2 GROERRTM    CHAR(4),
       2 GRODESCR    CHAR(30),
       2 GROCONUS    BIT(8),
       2 GRORESSP    BIT(8),
       2 GROOWNER    CHAR(10),
       2 GROADDR     CHAR(30),
       2 GROUNUSED   CHAR(28);


1DCL 1 GEREC   BASED(@GEREC),     /* MSVI GROUP EXTENSION RECORD */
       2 GVSG        CHAR(3),
       2 GVSVVGRP    CHAR(8),
       2 GVSBLANK    CHAR(1),
       2 GVSNO       BIT(8),
       2 GVSRES0     BIT(1),
       2 GVSGVSEX    BIT(1),
       2 GVSRES1     BIT(14),
       2 GVSEX       BIT(1),
       2 GVSRES2     BIT(15),
       2 GVSUNUS1    CHAR(1),
       2 GVSESIND    FIXED BIN(15,0),
       2 GVSUNUS2    CHAR(8),
       2 GVSSLOTS(960) CHAR(1);

 DCL GROUPKEY        CHAR(13) INIT('G  XXXXXXXX  '),
     MSVGP           CHAR(8) DEF(GROUPKEY) POS(4),
     ZER_FILL        CHAR(1) DEF(GROUPKEY) POS(13);

 DCL 1 GVSVOLENT     BASED(@VOL), /* VOLUME DESCRIPTOR IN GVSSLOTS */
       2 GVSVOLID    CHAR(6),
       2 GVSCPUM     BIT(16),
       2 GVSRCFSI    BIT(1),
       2 GVSMTNSH    BIT(1),
       2 GVSRSVD     BIT(14),
       2 GVSFRESP    FIXED BIN(15,0) UNALIGNED,
       2 GVSLEXT     FIXED BIN(15,0) UNALIGNED,
       2 GVSEXPDT    CHAR(4),
       2 GVSMTDSP    FIXED BIN(15,0) UNALIGNED;

1DCL 1 VREC,                     /* MSVI BASE VOLUME RECORD     */
       2 BASEVKEY    CHAR(5),
       2 BASSERNO    CHAR(6),
       2 BASBLANK    CHAR(1),
       2 BASZERO     BIT(8),
       2 BASRES7     CHAR(1),
       2 BASRES1     BIT(2),
       2 BASBASVR    BIT(1),
       2 BASRES2     BIT(13),
       2 BASDLSF     BIT(1),
       2 BASNOCPY    BIT(1),
       2 BASGRPV     BIT(1),
       2 BASGENUS    BIT(1),
       2 BASRSTD     BIT(1),
       2 BASINAC     BIT(1),
       2 BASBIND     BIT(1),
       2 BASEXCL     BIT(1),
       2 BASDAERA    BIT(1),
       2 BASRONLY    BIT(1),
       2 BASREASS    BIT(1),
       2 BASFIRST    BIT(1),
       2 BASLAST     BIT(1),
       2 BASFILL1    BIT(3),
       2 BASCPUID    BIT(16),
       2 BASRCVYF    BIT(16),
       2 BASMISCF    BIT(16),
       2 BASCSN1     CHAR(12),
       2 BASLIB1     BIT(8),
       2 BASCSN2     CHAR(12),
       2 BASLIB2     BIT(8),
       2 BASPREV     CHAR(6),
       2 BASNEXTV    CHAR(6),
       2 BASNCOPY    BIT(8),
       2 BASNBKUP    BIT(8),
       2 BASBKLMT    BIT(8),
       2 BASFILL2    CHAR(3),
       2 BASFRESP    FIXED BIN(15,0) UNALIGNED,
       2 BASLEXT     FIXED BIN(15,0) UNALIGNED,
       2 BASFREXT    FIXED BIN(31,0) UNALIGNED,
       2 BASKLCPY    CHAR(13),
       2 BASRES6     CHAR(3),
       2 BASDLMTD    FIXED DECIMAL(7),
       2 BASEXPDT    FIXED DECIMAL(7),
       2 BASDTREM    FIXED DECIMAL(7),
       2 BASDESCR    CHAR(30),
       2 BASOWNER    CHAR(10),
       2 BASDEST     CHAR(30),
       2 BASRECOV    CHAR(6),
       2 BASGROUP    CHAR(8),
       2 BASXPDT2    FIXED DECIMAL(7),
       2 BASFILL3    CHAR(32);

 DCL VOLKEY     CHAR(13)  INIT('V    XXXXXX  '),
     MSSVOL     CHAR(6) DEF(VOLKEY) POS(6),
     VOLKEY_ZER CHAR(1) DEF(VOLKEY) POS(13);

 DCL 1 OUTREC,
       2 VOLSER      CHAR(6)   INIT(' '),
       2 UNIT        CHAR(8)   INIT(' '),   /* ESOTERIC UNIT TYPE */
       2 GROUP       CHAR(8)   INIT(' '),   /* MSVGP              */
       2 FREESPC     PIC'ZZZZ9' INIT(0),    /* TOT CYLS AVAIL     */
       2 AVAIL       PIC'ZZZZ9' INIT(0),    /* MAX CONTIG CYLS    */
       2 EXTENTS     PIC'ZZZZZ' INIT(0),    /* # EXTENTS FREE     */
       2 DESCR       CHAR(30)  INIT(' '),   /* FROM GROUP OR VOL  */
       2 OWNER       CHAR(10)  INIT(' '),   /*   "    "   "   "   */
       2 FILLER      CHAR(3)   INIT(' ');
 DCL #3330V          CHAR(8)   INIT('3330V');

 DCL (CMDS_IN,VOLS_OUT,VOLS_BYPASSED,MSVGPS_EMPTY,
      MSVGP_REQ,MSVGP_PROC,MSVGP_NFND,VOL_REQ,VOL_PROC,VOL_NFND,
      RPTPAGENO,
      I,J,K)
                     FIXED BIN(15,0) INIT(0);

 DCL (RETURN_CODE,OBTAIN_RC)
                  FIXED BIN(31,0) INIT(0);

  DCL MIN_PC    FIXED BIN(31,0) INIT(32767),
      MAX_PC    FIXED BIN(31,0) INIT(0);

  DCL EOF_SYSIN      BIT(1)   INIT('0'B),
      FINISHED       BIT(1)   INIT('0'B),
      FOUND          BIT(1)   INIT('0'B),
      EOF_MSVI       BIT(1)   INIT('0'B),
      BIT16          BIT(16)  INIT('0'B);

  DCL PRNTRC      PIC'999'    INIT(0),
      REASON      CHAR(80) VAR INIT('');


  DCL BLANKLINE  CHAR(72) INIT(' ');


1/*  INITIALIZATION OF VARIABLES                                    */

  OPEN FILE(SYSIN)    INPUT,
       FILE(MSVI )    INPUT,
       FILE(REPORT) OUTPUT LINESIZE(79);

  ON FINISH
    BEGIN;
      CLOSE FILE(SYSIN),
            FILE(MSVI),
            FILE(REPORT);
    END;

   PUT FILE(REPORT) SKIP EDIT
         ('*** TSO MSS VOLUME LOOKUP **')
         (A);
    PUT FILE(REPORT) SKIP EDIT(BLANKLINE) (A);


  ON ENDFILE(SYSIN) EOF_SYSIN = '1'B;

  READ FILE(SYSIN) INTO(INREC);       /* SET UP FOR PROCESING.. READ  */
  FINISHED = EOF_SYSIN;
  IF ^EOF_SYSIN THEN CMDS_IN = CMDS_IN + 1;


1 /*    MAIN LOOP TO GENERATE MSS VOLUME LIST FROM CNTL CARDS */

 DO WHILE(^FINISHED);

    SUBSTR(INREC,73,8) = (8)' ';
    J = INDEX(INREC,'MSVGP=');
    K = INDEX(INREC,'VOL=');

    IF J > 0  THEN
      DO;
        MSVGP = SUBSTR(INREC,J+6,8);
        MSVGP_REQ = MSVGP_REQ + 1;
        CALL DO_MSVGP;
      END;
     ELSE
      IF K > 0 THEN
        DO;
          MSSVOL = SUBSTR(INREC,K+4,6);
          VOL_REQ = VOL_REQ + 1;
          CALL DO_MSSVOL;
        END;
     ELSE
      IF SUBSTR(INREC,1,1) = '*' THEN /* ACCEPT COMMENT */ ;

       ELSE

      PUT FILE(REPORT) SKIP EDIT
         ('ABOVE COMMAND NOT MSVGP= OR VOL= FORM ..CMD FLUSHED ',
          (5)'*',BLANKLINE)
         (COL(12),A,A,SKIP,A);



   READ FILE(SYSIN) INTO(INREC);
   IF ^EOF_SYSIN THEN CMDS_IN = CMDS_IN + 1;

   FINISHED = EOF_SYSIN ;

 END;                           /* END OF MAIN LOOP                 */



   IF VOLS_OUT = 0      THEN RETURN_CODE = 16;

   CALL PLIRETC(RETURN_CODE);


   STOP;
1/* PROCESS MSVGP=  COMMAND          */

  DO_MSVGP: PROC;

    UNSPEC(ZER_FILL) = '00000000'B; /*                           */
    CALL GET_GROUPREC;

    IF FOUND & ^EOF_MSVI THEN
      DO;
         MSVGP_PROC = MSVGP_PROC + 1;
         PUT FILE(REPORT) SKIP EDIT
             ('MSVGP=',GROVVGRP)                 (COL(12),A,A)
             ('RESP=',GROOWNER)                  (X(1),A,A)
             ('DESCR=',GRODESCR)                 (X(1),A,A)
             ('VOLUME COUNTS: ')                 (SKIP,COL(12),A)
             (GRONGEN,' ACTIVE GEN USE,  ')      (P'ZZ9',A)
             (GRONRSTD,' ACTIVE RESTR USE,  ')   (P'ZZ9',A);
    PUT FILE(REPORT) SKIP EDIT(BLANKLINE) (A);

          IF GRONGEN  > 0
            THEN CALL PROCESS_VOLUMES;
            ELSE
              DO;
                 PUT FILE(REPORT) SKIP EDIT
                     ('GROUP BYPASSED..NO GENERAL USE VOLUMES IN GROUP',
                       (5)'*',BLANKLINE)
                     (COL(12),A,A,X(1),A,SKIP,A);
                 MSVGPS_EMPTY = MSVGPS_EMPTY + 1;
              END;

      END;
     ELSE
      DO;

        PUT FILE(REPORT) SKIP EDIT
            ('GROUP ',MSVGP,' NOT FOUND IN MSVI ',(5)'*',BLANKLINE)
            (COL(12),A,A,A,A,SKIP,A);

        MSVGP_NFND = MSVGP_NFND + 1;
      END;
    RETURN;
  END DO_MSVGP;


1/* PROCESS VOL= COMMAND             */
  DO_MSSVOL: PROC;

    DCL COMMENT CHAR(14) VAR INIT('');

    OUTREC = '';
    UNSPEC(VOLKEY_ZER) = (8)'0'B;

    ON KEY(MSVI) BEGIN;
      FOUND = '0'B;
      GO TO KLUDGE1;
                 END;

    FOUND = '0'B;
    READ FILE(MSVI) INTO(VREC) KEY(VOLKEY);
    FOUND = '1'B;
  KLUDGE1:;

    IF FOUND THEN
      DO;
       VOL_PROC = VOL_PROC + 1;
       OUTREC.DESCR = BASDESCR;     /* COPY OVER INFO FROM VOL REC */
       OUTREC.OWNER = BASOWNER;
       OUTREC.GROUP = BASGROUP;
       OUTREC.VOLSER = BASSERNO;
       OUTREC.FREESPC = BASFRESP;
       OUTREC.AVAIL   = BASLEXT;
       OUTREC.EXTENTS = BASFREXT;
       OUTREC.UNIT    = #3330V;

       IF BASFRESP < 403 THEN
         DO;
           VOLS_OUT = VOLS_OUT + 1;
           COMMENT = '';
         END;
        ELSE
         DO;
           VOLS_BYPASSED = VOLS_BYPASSED + 1;
           COMMENT = '* VTOC EMPTY *';
         END;

       PUT FILE(REPORT) SKIP EDIT
           ('VOLUME=',OUTREC.VOLSER)           (COL(15),A,A)
           (':  FREE-CYLS=',OUTREC.FREESPC)    (A,A)
           (', MAX-CCYL=',OUTREC.AVAIL)        (A,A)
           (COMMENT)                           (X(1),A);

      END;
     ELSE
      DO;
        PUT FILE(REPORT) SKIP EDIT
            ('VOLUME ',MSSVOL,' NOT FOUND IN MSVI ',(5)'*')
            (COL(12),A,A,A,A);
        VOL_NFND = VOL_NFND + 1;
      END;
    PUT FILE(REPORT) SKIP EDIT(BLANKLINE) (A);
    RETURN;
  END DO_MSSVOL;

1/* GET THE MSVI GROUP HEADER RECORD */

  GET_GROUPREC: PROC;

    ON KEY(MSVI) BEGIN;
       FOUND = '0'B;
       GO TO KLUDGE;
                 END;

    ON ENDFILE(MSVI) EOF_MSVI = '1'B;

    FOUND ='0'B;

    READ FILE(MSVI) INTO(GREC) KEY(GROUPKEY);
    FOUND = '1'B;

    KLUDGE:
     RETURN;

  END GET_GROUPREC;


1/* PROCESS VOLUME ENTRIES IN GROUP EXTENSION RECORDS */

 PROCESS_VOLUMES: PROC;

   DCL COMMENT  CHAR(14) VAR INIT('');
   DCL (TOT_CYLS,MAX_CONTIG,VOL_CNT) FIXED BIN(15,0) INIT(0);
   DCL PC       FIXED BIN(31,0) INIT(0);

   ON ENDFILE(MSVI) EOF_MSVI = '1'B;

   OUTREC = '';
   OUTREC.DESCR = GRODESCR;
   OUTREC.OWNER = GROOWNER;
   OUTREC.GROUP = GROVVGRP;
   OUTREC.UNIT  = #3330V;


   READ FILE(MSVI) SET(@GEREC);/* TRY TO GET THE GROUP EXTENSION REC*/

   IF ^EOF_MSVI  &                /* IF OUR GROUP IS THE SAME AND */
      GVSVVGRP = MSVGP &          /* IT IS AN EXTENSION RECORD    */
      GVSGVSEX                    /* THEN PROCESS THE VOLUMES     */
     THEN FOUND = '1'B;
     ELSE FOUND = '0'B;

   DO WHILE(FOUND);
     DO   I = 1 TO GVSESIND - 1;  /* SCAN OVER THE SLOTS  */

       @VOL = ADDR(GVSSLOTS( (I-1)*20 + 1 ) ); /* POINT TO ENTRY */

       OUTREC.VOLSER = GVSVOLID;   /* COPY OVER VOLSER */
       OUTREC.FREESPC = GVSFRESP;
       OUTREC.AVAIL   = GVSLEXT;
       OUTREC.EXTENTS = 0;        /* NO EXTENT COUNT IN GRP RECORD */

       TOT_CYLS = TOT_CYLS + GVSFRESP;   /* ACCUMULATE TOTAL AND MAX */
       MAX_CONTIG = MAX(MAX_CONTIG,GVSLEXT); /* CONTIG AVAILABLE     */
       VOL_CNT = VOL_CNT + 1;

       IF GVSFRESP < 403 THEN
         DO;
           VOLS_OUT = VOLS_OUT + 1;
           COMMENT = '';
         END;
        ELSE
         DO;
           VOLS_BYPASSED = VOLS_BYPASSED + 1;
           COMMENT = '* VTOC EMPTY *';
         END;

       PUT FILE(REPORT) SKIP EDIT
           ('VOLUME=',OUTREC.VOLSER)           (COL(15),A,A)
           (':  FREE-CYLS=',OUTREC.FREESPC)    (A,A)
           (', MAX-CCYL=',OUTREC.AVAIL)        (A,A)
           (COMMENT)                           (X(1),A);

    END;

    READ FILE(MSVI) SET(@GEREC);

    IF ^EOF_MSVI &                /* IF OUR GROUP IS THE SAME AND */
       GVSVVGRP = MSVGP &         /* IT IS AN EXTENSION RECORD    */
       GVSGVSEX                   /* THEN PROCESS THE VOLUMES     */
      THEN FOUND = '1'B;
      ELSE FOUND = '0'B;

  END;

  IF VOL_CNT  > 0 THEN
    DO;
      PC = (((VOL_CNT*403) - TOT_CYLS) * 1000)/(VOL_CNT*403);
      MIN_PC = MIN(MIN_PC,PC);        /* ACCUMULATE MIN/MAX PERCENT */
      MAX_PC = MAX(MAX_PC,PC);        /* FREE ON VOLUMES            */

      PUT FILE(REPORT) SKIP EDIT
          ('MSVGP TOTAL AVAIL CYLS= ')   (COL(15),A)
          (TOT_CYLS)                     (P'ZZZ,ZZ9')
          (', MAX-CCYL=',MAX_CONTIG)     (A,P'ZZZZ9')
          (',  MSVGP IS ',PC,'%')   (A,P'ZZ9.9',A);
    END;
    PUT FILE(REPORT) SKIP EDIT(BLANKLINE) (A);

 END PROCESS_VOLUMES;


 END MSSVOL;
