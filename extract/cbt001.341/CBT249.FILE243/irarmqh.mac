*%;  /*
         MACRO
&NAME    IRARMQH   &DSECT=YES,     USE OTHER OPRNDS IF DSECT=NO SPECD  *
               &QUE=               QUEUE (HEADER BLOCK) IDENTIFIER
.*
         GBLB  &IRAQHCM            IRARMQH COMMENTARY PRINT CONTROL
         AIF   (&IRAQHCM).RMQHAL1  BYPASS DUPLICATE IRARMQH INTRO
         IEZBITS                   INVOKE STANDARD BIT DECLARATIONS
*                                                                    */
* /*                                                                 */
* /* MACCOMP Z-4 SC1CX/PKD16                                         */
* /* MACSTAT Z-4 75007/Z40PBSS                                       */
* /* *************************************************************** */
* /*                                                                 */
* /*   MACRO NAME - IRARMQH                                          */
* /*                                                                 */
* /*   DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER QUEUE HEADER BLK  */
* /*                                                                 */
* /*   COPYRIGHT - NONE                                              */
* /*                                                                 */
* /*   STATUS - OS/VS2 RELEASE 4, 10/05/73, LEVEL=1                  */
* /*                                                                 */
* /*   FUNCTION - THE RMQH SERVES AS A DUMMY MEMBER ON THE SYSTEM    */
* /*         RESOURCES MANAGER QUEUE IT DESCRIBES.  IT IS USED       */
* /*         AS A STARTING POINT TO SEARCH THAT QUEUE, AND IT        */
* /*         SIMPLIFIES DOUBLE-CHAINING IF THE QUEUE IS EMPTY.       */
* /*                                                                 */
* /*   METHOD OF ACCESS - THE ADDRESSES OF THE VARIOUS RMQH BLOCKS   */
* /*         ARE CONTAINED IN THE RESPECTIVE -RMCTXXQE- FIELDS OF    */
* /*         THE SYSTEM RESOURCES MANAGER CONTROL TABLE.             */
* /*                                                                 */
* /* *************************************************************** */
*        %GOTO RMQHPLS2; /*
&IRAQHCM SETB  1                   IRARMQH COMMENTARY WAS PRINTED
         AGO   .RMQHAL1                                              */
* /* *************************************************************** */
* /*                                                                 */
* /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */
* /*                                                                 */
* /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */
* /*         - OTHERWISE, QUE='IDQE' TO SPECIFY THE QUEUE ID,        */
* /*           WHERE 'ID' ARE TWO SUPPLIED CHARACTERS, AND           */
* /*           'QE' ARE THE CHARACTERS 'Q' AND 'E'.                  */
* /*                                                                 */
* /*           IF DSECT=NO IS NOT CODED, USING ON RMQH WILL GIVE     */
* /*           ADDRESSABILITY TO ALL SYMBOLS.                        */
* /*                                                                 */
* /*           IF DSECT=NO IS CODED, THE IRARMQH MACRO WILL GENER    */
* /*           'DC' INSTRUCTIONS, SO THAT THE MACRO MAY BE USED TO   */
* /*           ASSEMBLE INITIAL RMQH FIELD VALUES INTO THE IRARMCNS  */
* /*           MODULE, WHICH CONTAINS THE VARIOUS RMQH BLOCKS.       */
* /*                                                                 */
* /*     PLS - %RMQHLEVL='USERLEVL' IF THE RMQH MAPPING IS TO BE     */
* /*           CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE    */
* /*           RMQH BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.    */
* /*         - %RMQH9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */
* /*                                                                 */
* /*         TO ACCESS AS A STANDALONE STRUCTURE DCL RMQHPTR PTR.    */
* /*                                                                 */
* /*   CHANGE ACTIVITY =                                             */
* /*                                                                 */
* /*   A000000-999999                                          Y02133*/
* /* *************************************************************** */
* /*
.RMQHAL1 ANOP
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').RMQHAL2
RMQH     DSECT
RMQHNAME DS    CL4 -               QUEUE IDENTIFICATION
RMQHFWD  DS    A -                 QUEUE FORWARD POINTER
RMQHBCK  DS    A -                 QUEUE BCKWARD POINTER
RMQHQVL  DS    F -                 QUEUE ENTRY ORDERING VALUE
RMQHFLG  DS    0CL4 -              QUEUE ENTRY DESCRIPTOR FLAGS
RMQHQFL  DS    BL1 -               QUEUE TRANSITION FLAGS
RMQHGOB  EQU   BIT2 -              TRANSITIONING BETWEEN QUEUES
RMQHSFL  DS    BL1 -               QUEUE CONTINUATION FLAGS
RMQHSCN  EQU   BIT7 -              QUEUE TERMINATION MARK
RMQHYFL  DS    BL1 -               QUEUE ENTRY TYPE FLAGS
RMQHAFL  DS    BL1 -               QUEUE ENTRY PROCESSING FLAGS
RMQHLST  DS    A -                 QUEUE LAST USED ENTRY POINTER
RMQHEND  DS    0D -                END OF RMQH
RMQHLEN  EQU   RMQHEND-RMQH -      LENGTH OF RMQH
         AGO   .RMQHAL4
.RMQHAL2 ANOP
         DS    0D
IRA&QUE  EQU   *
         AIF   ('&NAME' EQ '').RMQHAL3
&NAME    EQU   *
.RMQHAL3 ANOP
         SPACE 1
         DS    0CL24 -             QUEUE HEADER BLOCK
         DC    C'&QUE' -           QUEUE IDENTIFICATION
         DC    A(0) A(IRA&QUE) -   QUEUE FORWARD POINTER
         DC    A(0) A(IRA&QUE) -   QUEUE BCKWARD POINTER
         DC    X'FFFFFFFF' -       QUEUE ENTRY ORDERING VALUE
         DC    X'00010000' -       QUEUE ENTRY DESC FLAGS      @Z40BPCH
         DC    A(0) A(IRA&QUE) -   QUEUE LAST USED ENTRY POINTER
.RMQHAL4 ANOP
         MEND
*                                                                    */
*%RMQHPLS2:  ;
*        %IF RMQH9999 ^= ','        /* DOES STRUCTURE CONTINUE       */
*            %THEN %RMQH9999 = ';'; /* NO, END DECLARE STATEMENT     */
*        %IF RMQHLEVL ^= ''         /* IS STRUCTURE CONCATENATED     */
*            %THEN %GOTO RMQHPLS3;  /* YES, OMIT DECLARE STATEMENT   */
*   DCL
*     1 RMQH BASED(RMQHPTR) BDY(DWORD),
*            %GOTO RMQHPLS4;        /* SKIP USER-GIVEN LEVEL         */
*%RMQHPLS3:  RMQHDUM = RMQHLEVL××' RMQH';  /* PICK UP GIVEN LEVEL    */
*     RMQHDUM BDY(DWORD),
*%RMQHPLS4:  ;
*       10 RMQHNAME CHAR(4),        /* QUEUE IDENTIFICATION          */
*       10 RMQHFWD  PTR(31),        /* QUEUE FORWARD POINTER         */
*       10 RMQHBCK  PTR(31),        /* QUEUE BCKWARD POINTER         */
*       10 RMQHQVL  FIXED UNSIGNED, /* QUEUE ENTRY ORDERING VALUE    */
*       10 RMQHFLG  BIT(32) BDY(WORD), /* QUE ENTRY DESCRIPTR FLAGS  */
*         12 RMQHQFL  BIT(8),       /* QUEUE TRANSITION FLAGS        */
*           14 RMQHQR0 BIT(2),      /* RESERVED                      */
*           14 RMQHGOB BIT(1),      /* TRANSITIONING BETWEEN QUEUES  */
*           14 RMQHQR3 BIT(5),      /* RESERVED                      */
*         12 RMQHSFL  BIT(8),       /* QUEUE CONTINUATION FLAGS      */
*           14 RMQHSR0 BIT(7),      /* RESERVED                      */
*           14 RMQHSCN BIT(1),      /* QUEUE TERMINATOR MARK         */
*         12 RMQHYFL  BIT(8),       /* QUEUE ENTRY TYPE FLAGS        */
*         12 RMQHAFL  BIT(8),       /* QUEUE ENTRY PROCESS FLAGS     */
*       10 RMQHLST  PTR(31),        /* QUE LAST USED ENTRY POINTER   */
*       10 RMQHEND  CHAR(0) BDY(DWORD)   /* END OF RMQH              */
*   RMQH9999
*   %RMQHLEN = 'LENGTH(RMQH)';      /* SYMBOLIC FOR LENGTH OF RMQH   */
