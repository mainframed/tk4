         MACRO
&LABEL   GTEDADOC
*
*  +----------------------------------------------------------------+
*  ×  This is an explanation of the GTE Dynamic Allocation macros.  ×
*  ×                                                                ×
*  ×         Chuck Hoffman                                          ×
*  ×         Systems Programming                                    ×
*  ×         GTE Laboratories - Technical Computation Center        ×
*  ×         40 Sylvan Road                                         ×
*  ×         Waltham, MA  02254                                     ×
*  ×                               617/466-2131  v/n 679-2131       ×
*  +----------------------------------------------------------------+
*
* PURPOSE:
*     DAIR/IKJDAIR is now being maintained only for compatability with
* older programs.  IBM states that all new applications should be
* written using SVC-99 rather than DAIR.  The purpose of these macros
* is to make the use of SVC-99 and IKJEFF18 (DAIRFAIL messages) easy
* from assembler programs.
*
* REFERENCE:
*     The user of these routines should have available the IBM manual:
* 'GC28-0627, OS/VS2 MVS Systems Programming Library:  Job Management'
* which describes SVC-99.  A detailed knowledge of SVC-99 is not
* necessary.
*
* FUNCTION:
*     GTEDADAT - Allocates space at assembly time for control blocks.
*                Generates literals and constants.
*     GTEDASET - Initializes control blocks at exection time.
*     GTEDAALC - Invokes SVC-99 and IKJEFF18.
*
*
* GTEDADAT - creating control blocks.
*
* 1.  The name of the control blocks is limited to three characters,
*     because it is used as a prefix for data items in the generated
*     control blocks.
*                okay:  ABC      GTEDADAT ...
*                  no:  ABCD     GTEDADAT ...
*
* 2.  The use of MAP=ONLY will produce DS entries without initializing
*     the contents of the blocks.
*          DC entries:  ABC      GTEDADAT ...
*          DS entries:  ABC      GTEDADAT MAP=ONLY,...
*
* 3.  The names of text unit operands are the same as those used in the
*     'Job Management' manual.  For instance, DSNAM and DDNAM rather
*     than DSNAME and DDNAME.  By limiting operands to five characters,
*     labels can be created using the 3-character block name as a
*     prefix, followed by the 5-character (max) operand name.  The
*     dataset name in the example in 2, above, would be labeled
*     ABCDSNAM.
*           -------------------------------------------------
*           ---  There is one exception because IBM uses  ---
*           ---  the same last 5 characters for infor-    ---
*           ---  mation retrieval with two different      ---
*           ---  SVC-99 verb codes.  If using the DSN     ---
*           ---  Allocation SVC-99 verb (X'01') use the   ---
*           ---  IBM names on the left.  If using the     ---
*           ---  Information Retrieval SVC-99 verb (X'07')---
*           ---  use the GTE names on the right:          ---
*           ---                                           ---
*           ---     DSN Alloc.        Info. Retrieval     ---
*           ---       RTDDN              INDDN            ---
*           ---       RTDSN              INDSN            ---
*           ---       RTORG              INORG            ---
*           -------------------------------------------------
*
* 4.  Text unit operands come in three flavors (refer to 'Job
*     Management')
*
*     A.  Those for which an explicit value is supplied, e.g. DDNAME.
*
*              code:  ADC      GTEDADAT DDNAM=FILEA
*
*         generated: +         DC     X'0001,0001,0008'
*                    +ADCDDNAM DC     CL8'FILEA'
*
*     B.  Those which are either on or off:  e.g. Space type TRK
*
*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES
*
*         generated: +         DC     X'0001,0001,0008'
*                    +ADCDDNAM DC     CL8'FILEA'
*                    +ADCTRK   DC     X'0007,0000'
*         ----------------------------------------------------------
*         ---  Note.  Information retrieval is in this category. ---
*         ----------------------------------------------------------
*
*     C.  Those for which there is a choice which can be coded,
*         e.g. Dataset organization.
*
*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES,DSORG=PS
*
*         generated: +         DC     X'0001,0001,0008'
*                    +ADCDDNAM DC     CL8'FILEA'
*                    +ADCTRK   DC     X'0007,0000'
*                    +ADCDSORG DC     X'003C,0001,0002,4000'
*
*   NOTE 1. -
*     Each operand generates a text unit which begins with a two-byte
*     key.  Each operand generates a label.  The label may be at the
*     key, as in ADCTRK and ADCDSORG, above, or it may be at the
*     literal, as in ADCDDNAM, above.  Location of the label is based
*     on a best guess of anticipated use of that text unit.
*
*   NOTE 2. -
*     Setting a key value to X'0000' will cause SVC-99 to ignore that
*     text unit.  After executing GTEDASET which builds a list of
*     pointers to the text units, values in the text units can be
*     changed at will.
*
*   NOTE 3. -
*     At this time, not all operands generate executable code, and
*     those which do may be in error.  If you discover errors or need
*     new functions, call Systems Programming.
*
*
* GTEDASET - setting addresses in control blocks
*
* 1.  This macro needs to be executed once before the GTEDAALC macro
*     executes.  It simply links together the control blocks generated
*     by GTEDADAT.  After this macro has been executed, there is no
*     problem changing values in the control blocks.
*
* 2.  The CPPLPTR operand is the name of a fullword.  If the program is
*     a TSO Command Processor, the fullword must contain the address of
*     the Command Processor Parameter List (CPPL).  If the program is
*     not a Command Processor, the fullword should contain the address
*     of a fake CPPL, or ERRMSG=NO should be coded in the GTEDAALC
*     macro (below).
*
*
* GTEDAALC - executing SVC-99 and IKJEFF18
*
* 1.  This macro is executed once each time you want SVC-99 to
*     execute.
*
* 2.  The choice of VERB= are as follows.  Again, keywords correspond
*     to names in the 'Job Management' manual.
*       VERB=AL  dsn allocation        VERB=UN  dsn or ddn unallocation
*       VERB=CC  concatenation         VERB=DC  deconcatenation
*       VERB=RI  remove in-use         VERB=DN  ddn allocation
*       VERB=IN  information retrieveal
*
*     Concatenation and deconcatenation aren't yet supported, but they
*     will be.
*
* 3.  This macro has the ERRMSG=NO operand to suppress creating code to
*     return the SVC-99 failure messages to the TSO terminal.  Use this
*     operand when the CPPLPTR operand of the GTEDASET macro points to
*     a fullword which does not contain the address of a CPPL.  When
*     this operand is used, the SVC-99 return code and the error and
*     info codes are still available to your program.  Only the writing
*     of an error message to the terminal is suppressed.  E.g.:
*
*                         GTEDAALC  ADC,VERB=AL,ERRMSG=NO
*
*     Places the return and error/info codes in these areas:
*
*               +ADCS99RC DS     F        SVC-99 RETURN CODE
*
*               +ADCERROR DS     H        SVC-99 ERROR CODE
*               +ADCINFO  DS     H        SVC-99 INFO CODE
*
*     The error and info codes are contiguous, and the error code is
*     aligned on a fullword boundry.
*
*
* MAPPING MACROS:
*     The following mapping macros must appear in the source.  Base
* registers do not need to be assigned.
*
*     IEFZB4D0                             Maps SVC-99 blocks
*     IKJEFFDF DFDSECT=YES,DFDSEC2=YES     Maps IKJEFF18 control blocks
* ---------------------------------------------------------------------
         EJECT
* ---------------------------------------------------------------------
*                        *** EXAMPLE ***
*
* We want to allocate member CURVES of CAH0.PDS.DATA to file FT12F001,
* and we want to allocate member SPLINE of the same dataset to file
* FT14F001.  Dataset status should be SHR, and sequential organization
* will be used.  Further, we want the program to be reenterable, so all
* variable data will be located in storage obtained with GETMAIN.
*
* Choose operands for the GTEDADAT macro by reference to the 'Job
* Management' manual.
*
*
*
*             PRINT NOGEN
*    EXMPL1   LINKSAVE BASE=12,GETMAIN=YES           LINKAGE CNVNTNS
*             LR    5,1                              HOLD CPPL ADDRESS
*             GETMAIN R,LV=1024                      GET WORK STORAGE
*             LR    11,1                             ADDRESSABILITY OF
*             USING AREA1,11                           WORK STORAGE
*              .       .
*             ST    5,CPPLADDR                       SAVE CPPL ADDRESS
*              .       .
*              .       .
*             MVC   XYZ(XYZLEN),ABC                  COPY TO WORK AREA
*             GTEDASET XYZ,CPPLPTR=CPPLADDR          SET POINTERS
*              .       .
*              .       .
*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT12F001
*              .       .
*              .       .
*             MVC   XYZMEMBR,=C'SPLINE  '            CHANGE MEMBER NME
*             MVC   XYZDDNAM,=C'FT14F001'            CHANGE FILE NAME
*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT14F001
*              .       .
*              .       .
*    ENDUP    FREEMAIN R,LV=1024,A=(11)              FREE STORAGE
*             XR    15,15                            ZERO R/C
*             LINKBACK                               LINKAGE CNVNTNS
*              .       .
*              .       .
*              .       .
*    ABC      GTEDADAT DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,              X
*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES
*              .       .
*              .       .
*    AREA1    DSECT
*    CPPLADDR DS    F
*    XYZ      GTEDADAT MAP=ONLY,DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,     X
*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES
*              .       .
*              .       .
*             IEFZB4D0
*             IKJEFFDF DFDSECT=YES,DFDSEC2=YES
*             END
* ---------------------------------------------------------------------
         MEND
