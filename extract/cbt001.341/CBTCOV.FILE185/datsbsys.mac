         TITLE 'DATSBSYS  --  MAPPING MACROS'
DATSBSYS CSECT
         EQUREGS
         IEFJSCVT
         EJECT
         IEFJSSVT
         ORG   SSVTFRTN
SSVTFUN1 DS    A
SSVTFUN2 DS    A
SSVTFUN3 DS    A
SSVTFUN4 DS    A
SSVTHEAD DS    2A
         ORG
         EJECT
         IEFJSSWA
         EJECT
         IEFJSSIB
         EJECT
         IEFJSSOB (AL,DA,CI,AG),CONTIG=NO
         EJECT
         IEFSSARB
         EJECT
         IFGACB
         EJECT
         IFGRPL
         EJECT
         IDARMRCD
         EJECT
         IFGEXLST
         EJECT
         IEZDEB LIST=YES
         EJECT
JFCB     DSECT
         IEFJFCBN LIST=YES
         EJECT
         IEFJESCT
         EJECT
         SSIOB
         EJECT
         GSR
         EJECT
         GSD
         EJECT
         GSB
         EJECT
         IHAPSA
         EJECT
         IKJTCB
         EJECT
         IHARB
         EJECT
         CVT   DSECT=YES
         EJECT
         IHAFRRS
         EJECT
         IHASDWA
         EJECT
         IHAWSAVT CLASS=GLOBAL
         TITLE 'DATSBSYS - TRANSFER VECTOR TO PROCESSING ROUTINES'
*
* THE FOLLOWING TRANSFER VECTOR IS REQUIRED BY THE
* INITIALIZATION LOGIC IN MODULE DATSBINT
*
DATSBSYS CSECT
         DC    A(NOPE-DATSBSYS)
         DC    A(ALLOC-DATSBSYS)
         DC    A(OPNCLOS-DATSBSYS)
         TITLE 'NO-OP SUBSYSTEM SERVICES ROUTINE'
*
*        ROUTINE 'NOPE'
*              SET RETURN CODE ZERO AND RETURN
*              HANDLES UNALLOCATION, CONVERTER EXIT
*
NOPE     DS    0H
         USING SSOB,R1
         XC    SSOBRETN,SSOBRETN
         SR    R15,R15
         BR    R14
         TITLE 'ALLOCATE SUBROUTINE'
ALLOC    SAVE  (14,12),,*
         LR    R2,R1              SAVE SSOB
         BALR  R12,0
         USING *,R12
         USING SSOB,R2
         XC    SSOBRETN,SSOBRETN
         L     R3,SSOBINDV
         USING SSOBGN,R3
         L     R4,SSAGARBP
         USING SSARB,R4
DOSSARB  L     R5,SSAGJFCB
         USING JFCB,R5
         MVI   JFCRECFM,JFCVAR+JFCRFB
         MVC   JFCLRECL,=H'4080'
         MVC   JFCBLKSI,=H'4084'
         L     R4,SSAGNRBP
         LTR   R4,R4
         BNE   DOSSARB
         RETURN (14,12),RC=0
         DROP  ,
         LTORG
         TITLE 'SUBSYSTEM OPEN AND CLOSE ROUTINE'
*
* OPEN AND CLOSE SUPPORT
*
* REGISTER USAGE
*  0  WORK
*  1  WORK
*  2  SSOB
*  3  GLOBAL GETMAIN
*  4  GLOBAL AND LOCAL GETMAIN
*  5  DEB
*  6
*  7  LOCAL GETMAIN
*  8  SSIOB
*  9  SAVEAREA
* 10  BASE
* 11  SETLOCK
* 12  SETLOCK
* 13  SETLOCK AND SAVEAREA
* 14  WORK
* 15  WORK
OPNCLOS  SAVE  (14,12),,*
         MODESET EXTKEY=ZERO,SAVEKEY=16(R13),WORKREG=2
         LR    R9,R13
         LR    R2,R1
         BALR  R10,0
         USING *,R10
         USING PSA,R0
         USING SSOB,R2
         XC    SSOBRETN,SSOBRETN
         L     R3,SSOBINDV
         USING SSOBGN,R3
         L     R5,SSDADEBP
         USING DEBBASIC,R5
         DROP  R3
         CLC   SSOBFUNC,=AL2(SSOBCLOS)
         BE    CLOSER
         L     R3,DEBDCBAD
         USING IFGACB,R3
         LA    R0,GETPUT
         ST    R0,ACBINRTN
         DROP  R3
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=SALLOC,RELATED=X
         GETMAIN RU,LV=SSIOLEN,SP=SSIOSP,BNDRY=PAGE,                   *
               BRANCH=(YES,GLOBAL),KEY=5
         ST    R1,DEBIRBAD
         LR    R7,R1
         LA    R8,4094(R1)
         USING SSIOID-2,R8
         SETLOCK RELEASE,TYPE=SALLOC,RELATED=X
         XC    SSIOID(SSIOEND-SSIOID),SSIOID
         MVC   SSIOID,=CL4'SSIO'
         LA    R0,SSIOOPEN
         ST    R0,SSIOFLG
         MVC   SSIOASCB,PSAAOLD
         MVC   SSIORPL(SSIOEND-SSIORPL),OPNRPL
         LA    R11,SSIORPL
         LA    R12,SSIORBA
         USING IFGRPL,R11
         ST    R1,RPLDACB
         ST    R7,RPLAREA
         ST    R12,RPLARG
         DROP  R11
         L     R4,PSATOLD
         L     R7,PSAAOLD
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=LOCAL,RELATED=X
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=CMS,RELATED=X
         QUEUE ADD,SSIOCHAN,HEAD=SSVTHEAD
         GETMAIN RU,LV=SSUBLEN,SP=SSUBSP,BRANCH=YES,KEY=8
         SETLOCK RELEASE,TYPE=CMS,RELATED=X
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=X
         ST    R1,SSIOUPBA
         B     OCEND
         EJECT
CLOSER   DS    0H
         L     R8,DEBIRBAD
         L     R6,SSIOUPBA
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=LOCAL,RELATED=X
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=CMS,RELATED=X
         L     R4,PSATOLD
         L     R7,PSAAOLD
         QUEUE REMOVE,SSIOCHAN
         FREEMAIN RU,A=(R6),LV=SSUBLEN,SP=SSUBSP,BRANCH=YES,KEY=8
         SETLOCK RELEASE,TYPE=CMS,RELATED=X
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=X
         SETLOCK OBTAIN,MODE=UNCOND,TYPE=SALLOC,RELATED=X
         FREEMAIN RU,A=(R8),LV=SSIOLEN,SP=SSIOSP,BRANCH=(YES,GLOBAL),  *
               KEY=5
         SETLOCK RELEASE,TYPE=SALLOC,RELATED=X
         EJECT
OCEND    DS    0H
         LR    R13,R9
         MODESET KEYADDR=16(R13),WORKREG=2
         RETURN (14,12),RC=0
         DROP  ,
OPNRPL   RPL   ACB=0,AM=VSAM,                                          *
               OPTCD=(ADR,DIR,UPD)
         LTORG
         TITLE 'GET AND PUT DUMMY ROUTINE'
GETPUT   SAVE  (14,12),,*
         LR    R10,R1
         USING IFGRPL,R10
         L     R9,RPLDACB
         USING IFGACB,R9
         BALR  R12,0
         USING *,R12
         C     R0,=A(RPLPUT)
         BH    HERINVP
         C     R0,=A(RPLPUT)
         BE    HERNORML
         B     HERNOEOD
         TITLE 'HAM -- RPL RETURN PROCESSING RIPPED OFF FROM SSSM'
*
*
*              RPL ERROR RETURNS -- LOGICAL
*
*
         SPACE 1
HERNOEOD LA    R0,RPLEODER         END-OF-DATA OCCURRED.
         B     HERLOGER
HERSPACE LA    R0,RPLNOEXT         NO SPOOL SPACE IS LEFT.
         B     HERLOGER
HERINRBA LA    R0,RPLINRBA         BAD RBA - POINT, GET-UPD.
         B     HERLOGER
HERSTOR  LA    R0,RPLNOVRT         GETMAIN FAILED.
         B     HERLOGER
HERINBUF LA    R0,RPLINBUF         NO ROOM IN USER BUF - GET.
         B     HERLOGER
HERINVP  LA    R0,RPLINACC         E.G., GET ON OUTPUT DATA SET.
         B     HERLOGER
HERINUPD LA    R0,RPLINUPD         PUT-UPD BEFORE GET-UPD.
         B     HERLOGER
HERDLCER LA    R0,RPLDLCER         PUT-UPD WOULD CHANGE LENGTH.
         B     HERLOGER
HERRECLN LA    R0,RPLINLEN         E.G., SYSOUT LENGTH GREATER THAN 254
         B     HERLOGER
         SPACE 1
HERLOGER AL    R0,=A(RPLLOGER*65536)  SET LOGICAL ERROR.
         B     HRPLEXIT            START RETURNING TO USER.
         SPACE 3
*
*
*              RPL ERROR RETURNS -- PHYSICAL
*
*
         SPACE 1
HERRDERD LA    R0,RPLRDERD         PHYS RD ERR OR KEY MISMATCH.
         B     HERPHYER
HERWTERD LA    R0,RPLWTERD         PHYSICAL WRITE ERROR.
         SPACE 1
HERPHYER AL    R0,=A(RPLPHYER*65536)  SET PHYSICAL ERROR.
         B     HRPLEXIT            START RETURNING TO USER.
         SPACE 3
*
*
*              RPL ERROR RETURNS -- CONTROL BLOCK
*
*
HERBLKER ABEND X'1FA',DUMP,,SYSTEM  CONTROL BLOCK ERROR.
         SPACE 3
*
*              RPL NORMAL RETURN - NO ERROR
*
HERNORML SLR   R0,R0               SHOW NO ERROR AT ALL.
         EJECT
*
*              HRPLEXIT - RETURN CODE (IN R0) TO CALLER
*
HRPLEXIT DS    0H
         STCM  R0,7,RPLFDBK        SET COMPLETION CODE IN RPL.
         MVI   RPLCMPON,2          SET COMPONENT ID.
* POST CALLER'S ECB
         LA    R1,RPLECB           ASSUME INTERNAL ECB.
         TM    RPLOPT1,RPLECBSW    IF INTERNAL ECB,
         BZ    *+8                 SKIP.
         L     R1,RPLECB           POINT TO EXTERNAL ECB.
         MVI   0(R1),X'40'         POST THE ECB.
         LTR   R0,R0               IF NO ERROR INDICATED,
         BZ    HEX200              GO RETURN TO CALLER.
*
*              ERROR INDICATED - SEE IF USER EXIT APPLIES
*
         L     R4,ACBEXLST         POINT TO ACB'S EXIT LIST.
         CL    R4,=F'1'            IF POINTER IS 0 OR 1,
         BNH   HEX200              THERE'S NO EXIT LIST.
         USING IFGEXLST,R4         SET EXLST ADDRESSABILITY.
         CLI   EXLID,EXLIDD        IS IDENTIFIER OKAY...
         BNE   HEX200              IF NOT, IGNORE EXIT LIST.
* ASSUME END-OF-FILE EXIT
         LA    R2,EXLEODF          POINT TO EOD ENTRY.
         LA    R3,EXLEODL          GET MIN LENGTH FOR IT.
         CLI   RPLRTNCD,RPLLOGER   IF NOT LOGICAL ERROR,
         BNE   HEX020              IT MUST BE PHYSICAL ERROR.
         CLI   RPLERRCD,RPLEODER   LOGICAL.  IF EOD,
         BE    HEX100              GO TAKE USER EXIT.
* ASSUME OTHER LOGICAL ERROR THAN END-OF-FILE
         LA    R2,EXLLERF          POINT TO LOGICAL ERROR ENTRY.
         LA    R3,EXLLERL          GET MIN LENGTH FOR IT.
         B     HEX100              GO TAKE USER EXIT.
* ASSUME PHYSICAL ERROR
HEX020   DS    0H
         LA    R2,EXLSYNF          POINT TO PHYSICAL ERROR ENTRY.
         LA    R3,EXLSYNL          GET MIN LENGTH FOR IT.
*
*              IF THE APPROPRIATE EXIT ROUTINE EXISTS, ENTER IT
*
HEX100   DS    0H
         CH    R3,EXLLEN           IS EXIT LIST LONG ENOUGH...
         BH    HEX200              IF NOT, NO USER EXIT.
         USING IFGEXLEF,R2         SET ENTRY ADDRESSABILITY.
         TM    EXLFLAG,EXLPRES+EXLACTV  IF ENTRY NOT PRESENT &
         BNO   HEX200              ACTIVE, NO USER EXIT.
         ICM   R0,15,EXLEXITP
         TM    EXLFLAG,EXLLINK     IF IT POINTS TO EXIT CODE,
         BZ    HEX150              GO TAKE USER EXIT.
         LOAD  EPLOC=(0)           ELSE LOAD USER EXIT ROUTINE.
         STCM  R0,15,EXLEXITP
         NI    EXLFLAG,255-EXLLINK SHOW ENTRY POINTS TO CODE.
HEX150   DS    0H
         LM    R1,R12,24(R13)      RESTORE R1 THROUGH R12.
         LR    R15,R0              SET R15 = USER EXIT ENTRY PT.
         BALR  R14,R15             TAKE USER EXIT.
HEX200   DS    0H                  IF USER EXIT RETURNS,
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         BR    R14                 AND RETURN TO CALLER.
         SPACE 3
         DROP  ,                   DROP ALL ADDRESSABILITY.
         LTORG
         END
