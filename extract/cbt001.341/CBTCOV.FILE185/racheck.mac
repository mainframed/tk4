         TITLE 'RACHECK - SVC 130 TO PERMIT ACCESS TO DATASETS'
************************************************************* *
*        THE RACHECK SVC (130) IS CALLED BY OPEN, SCRATCH,    *
*        AND RENAME WHEN A DATASET BEING PROCESSED HAS THE    *
*        RACF INDICATION IN ITS FORMAT1 DSCB.                 *
*                                                             *
*        THIS VERSION OF THE EXIT PERMITS ACCESS IF THE       *
*        HIGHEST LEVEL QUALIFIER OF THE DATASET MATCHES       *
*        THE CURRENT USERID OR IF THE CALLER IS A STARTED     *
*        TASK OR YCC USER.                                    *
*                                                             *
*        SPECIAL PROCESSING IS PROVIDED FOR CERTAIN           *
*        SYSTEM DATASETS                                      *
*                                                             *
*        CHANGE 10-3-79 BY JSA: USE RBGRS11 TO LOCATE         *
*        F1-DSCB; WORKS FOR CONCATENATED DATASETS             *
*        AS WELL AS PRIMARY DATASET                           *
*                                                             *
*        ADDITION 11-20-79 BY JSA: SUPPORT INSTLN PARAMETER   *
*        INSTLN MAY OPTIONALLY SPECIFY THREE WORD LIST        *
*        WORD 1--> F1-DSCB DATA PORTION                       *
*        WORD 2--> USERID                                     *
*        WORD 3--> PROJECT                                    *
*        WHEN INSTLN IS SUPPLIED, REQUESTS FROM STARTED TASKS *
*        ARE NOT AUTOMATICALLY PASSED.                        *
*        USERID AND PROJECT MUST BE EIGHT BYTES, LEFT JUSTIF. *
*        PADDED WITH BLANKS.                                  *
*                                                             *
************************************************************* *
*        COPY  HAL
         PRINT OFF
         COPY  HAL
         PRINT ON
         EJECT
RACHECK  CSECT
         BALR  R12,0              SET BASE REG
         USING *,R12
         USING RBBASIC,R5
         ST    R14,RETURN
         MVI   QUAL1,C' '
         MVC   QUAL1+1(INITLEN-1),QUAL1
SVC      BLOCK ,                  LEAVE THIS BLOCK WITH R15 SET
*                                 TO RETURN TO CALLER
         SPACE 1
OK       BLOCK ,                  LEAVE THIS BLOCK AND I'LL SET R15=0
         SPACE 1
         LR    R3,R1              R3 -> RACHECK PARAMETER LIST
         USING ACHKLIST,R3          THROUGHOUT THIS CODE
         SPACE 1
*        **************************************************** *
*        * TEMPORARY DBC SUPPORT FOR DEBUGGING                *
*        **************************************************** *
         B     NODEBUG
         LOAD  EP=DBC
         LR    R2,R0
         ESTAE (R2),CT
         DC    X'00DEAD00'
NODEBUG  DS    0H
         SPACE 1
*        **************************************************** *
*        * THIS BETTER BE A DSN REQUEST                       *
*        **************************************************** *
         L     R6,ACHKCLNW
         IF    (DSNCLS(DSNCLSL),NE,0(R6),CLC),THEN
         LEAVE OK
         BEND
         SPACE 1
*        **************************************************** * JSA
*        * PROCESS INSTLN PARAMETER, IF SUPPLIED              * JSA
*        **************************************************** * JSA
         L     R1,ACHKINSW                                      JSA
         LA    R1,0(,R1)                                        JSA
INSTLN   IF    (R1,NE,0),THEN      HAVE PARAMETER               JSA
         L     R11,0(,R1)          --> SUPPLIED DSCB            JSA
         LM    R1,R2,4(R1)         --> USERID AND PROJECT       JSA
         MVC   USEUID,0(R1)        MOVE IN USERID               JSA
         MVC   USEPROJ,0(R2)       MOVE IN PROJECT              JSA
         SPACE 1
*        **************************************************** * JSA
*        * GET ENVIRONMENTAL DATA IF INSTLN IS NOT SUPPLIED   * JSA
*        **************************************************** * JSA
         ELSE  ,                   GET ENVIRONMENTAL DATA       JSA
         SR    R11,R11             INDICATE NO F1 DSCB          JSA
         SPACE 1
*        **************************************************** *
*        * STARTED TASKS GET CARTE BLANCHE                    *
*        **************************************************** *
         USING ASCB,R7            (PASSED AT ENTRY TO SVC)
         IF    (ASCBTSB,EQ,=F'0',CLC),AND,       NOT TSO               X
               (ASCBJBNI,EQ,=F'0',CLC),THEN      NOT BATCH
         LEAVE OK
         BEND
         SPACE 1
*        **************************************************** *
*        * NOW GO FIND THE USERID AND PROJECT                 *
*        **************************************************** *
*        * THERE ARE TWO WAYS TO DO THIS. THE WAY WHICH USES  *
*        * STANDARD MVS CONTROL BLOCKS IS REPRODUCED BELOW IN *
*        * COMMENT CARDS. THE EXECUTABLE CODE USES YCC        *
*        * CONTROL BLOCKS WHICH ARE ALSO VALID FOR XBATCH     *
*        * MONITOR JOBS.                                      *
*        **************************************************** *
*        USING TCB,R4
*        L     R4,TCBJSCB      JSCB OF CURRENT TASK
*        USING IEZJSCB,R4
*        L     R4,JSCBACT      ACTIVE JSCB
*        L     R4,JSCBJCT
*        USING JCT,R4
*        MVC   USEUID,JCTJNAME                                  JSA
*        ICM   R4,7,JCTACTAD     GET ACT
*        USING ACTDSKAD-16,R4
*        MVC   USEPROJ,ACTJNFLD+2                               JSA
*        IF    (ACTPRGNM,NE,C' ',CLI),THEN
*        MVC   USEPROJ,ACTPRGNM    BATCH HAS PROGRAMMER NAME HERE
*        BEND
*        DROP  R4
         L     R8,CVTPTR              CHAIN THROUGH SYSTEM
         L     R8,CVTUSER-CVT(R8)     CONTROL BLOCKS TO FIND
         L     R8,XCVTXASV-XCVT(R8)   THE YCC DATA AREA KNOWN
         LH    R1,ASCBASID            AS THE XASCB. IT CONTAINS
         SLL   R1,2                   ACCOUNT INFO.
         L     R8,XASVENTY-4-XASVT(R8,R1)
         USING XASCB,R8
         MVC   USEUID,XASCUID                                   JSA
         MVC   USEPROJ,XASCPROJ                                 JSA
         DROP  R7
         BEND  INSTLN                                           JSA
         EJECT
BREAKUP  BLOCK
*        **************************************************** *
*        * NOW BREAK DSN UP INTO PIECES                       *
*        **************************************************** *
         L     R6,ACHKENTW        -> DSN
         LA    R9,43(R6)          HOLD FOR LATER
         LA    R7,QUAL1
         BAL   R14,MOVEONE
         IF    (R2,NE,8),THEN
         LEAVE BREAKUP            UNQUALIFIED OR ILLEGAL
         BEND
         LA    R7,QUAL2
         BAL   R14,MOVEONE
         IF    (R2,NE,8),OR,(0(R9),NE,C' ',CLI),THEN
         LEAVE BREAKUP            ILLEGAL OR NO TYPE
         BEND
         DO    WHILE,(R2,NE,4)    TILL ENDS IN A BLANK
         LA    R7,QUAL3
         BAL   R14,MOVEONE        PICK UP NEXT QUALIFIER
*                                 EXITS WITH LAST QUALIFIER
         BEND
         BEND  BREAKUP
         SPACE 1
*        **************************************************** *
*        * ADDRESS F1 DSCB IN O/C/E/ WORK AREA,               *
*        * (OR PHONEY DS1RAC BIT IF SCRATCH/RENAME REQUEST)   *
*        **************************************************** *
SETBYTE  BLOCK ,                   SET CONTENTS OF TSTBYTE      JSA
         MVI   TSTBYTE,DS1NOISE    ASSUME CANNOT GET DSCB       JSA
TENTDSCB IF    (R11,EQ,0),THEN     DSCB NOT SUPPLIED IN INSTLN  JSA
         L     R1,RBLINK               PREVIOUS RB
         L     R1,RBLINK-RBBASIC(R1)   HIS FATHER
         LA    R1,0(,R1)               CHECK -1 IN PREFIX
         BCTR  R1,0                       FOR SVC NUMBER
         IF    (0(R1),EQ,19,CLI),OR,   IS IT OPEN SVC           JSA    X
               (0(R1),EQ,22,CLI),OR,         OR OPENJ                  X
               (0(R1),EQ,55,CLI),THEN        OR EOV
         L     R11,RBGRS11         TENT. --> F1 DSCB            JSA
         ELSE ,                                                 JSA
         LEAVE SETBYTE             MUST ACCEPT DEFAULT          JSA
         BEND  ,                                                JSA
         BEND  TENTDSCB            HAVE CANDIDATE DSCB          JSA
         USING DS1FMTID,R11                                     JSA
         IF    (DS1FMTID,NE,C'1',CLI),THEN                      JSA
         LEAVE SETBYTE             NOT REALLY, USE DEFAULT      JSA
         BEND  ,                                                JSA
*        **************************************************** *
*        * UNPACK FUNNY YCC SQUISHED PROJECT IN DSCB          *
*        **************************************************** *
UNPK     BLOCK
         ICM   R1,B'1110',DS1PROJ+1 PROJECT IS IN 6BIT
         BAL   R14,UNPACK         PACKED 4 CHARS/3 BYTES
         ST    R0,DSPROJ          WHICH MUST BE EXPANDED
         ICM   R1,B'1110',DS1PROJ+4 GET NEXT 4 CHARS
         BAL   R14,UNPACK
         ST    R0,DSPROJ+4
         LEAVE UNPK
UNPACK   LA    R15,4              4 CHARS
UNPCKL   SLL   R0,2
         O     R0,=F'3'           SET HIGH BITS ON
         SLDL  R0,6               COPY LOW 6 BITS
         CLM   R0,B'0001',=X'C0'  LOOKOUT FOR BLANK
         IF    EQ,THEN            WHICH IS SPECIAL
         IC    R0,=C' '
         BEND  ,
         BCT   R15,UNPCKL
         BR    R14
         BEND  UNPK
*        **************************************************** *
*        * NOW WE HAVE THE INFO TO MAKE ACCESS DECISIONS      *
*        **************************************************** *
         SPACE 1
RDCHECK  IF    (ACHKFLG2,EQ,ACHKTRD,CLI),THEN
         SR    R0,R0
         IC    R0,DS1RAC
         SRL   R0,DS1RSHFT
         STC   R0,TSTBYTE
         ELSE  ,
         MVC   TSTBYTE,DS1RAC
         NI    TSTBYTE,DS1WBITS
         BEND  RDCHECK
         BEND  SETBYTE                                          JSA
         DROP  R11                                              JSA
         SPACE 1
ACCESS   BLOCK ,
PERMIT   BLOCK ,
WHOCHECK BLOCK ,
         MVC   TSTBYTE2,TSTBYTE
         NI    TSTBYTE2,DS1WHO
         IF    (QUAL1,EQ,USEUID,CLC),OR,                        JSA    X
               (USEPROJ(3),EQ,=C'YCC',CLC),OR,                  JSA    X
               (TSTBYTE2,EQ,DS1ALL,CLI),THEN
         LEAVE WHOCHECK
         BEND  ,
         IF    (TSTBYTE2,EQ,DS1PRJCT,CLI),AND,                         X
               (DSPROJ,EQ,USEPROJ,CLC),THEN                     JSA
         LEAVE WHOCHECK
         BEND  ,
         IF    (TSTBYTE2,EQ,DS1DEPT,CLI),AND,                          X
               (DSPROJ(3),EQ,USEPROJ,CLC),THEN                  JSA
         LEAVE WHOCHECK
         BEND  ,
         LEAVE PERMIT
         BEND  WHOCHECK
         SPACE 1
NOISEY   IF    (TSTBYTE,ON,DS1NOISE),THEN
         LA    R15,=CL8' CHANGE'
         IF    (ACHKFLG2,EQ,ACHKTRD,CLI),THEN
         LA    R15,=CL8' READ'
         BEND  ,
         IF    (ACHKFLG2,EQ,ACHKTUPD,CLI),THEN
         LA    R15,=CL8' UPDATE'
         BEND  ,
         MVC   MSGUID,USEUID                                    JSA
         MVC   MSGACS,0(R15)
         L     R6,ACHKENTW
         MVC   MSGDSN,0(R6)
         L     R2,PSAAOLD-PSA
         L     R2,ASCBTSB-ASCB(R2)
TPUTER   IF    (R2,NE,0),THEN
         LA    R1,MSGA
         TPUT  (1),MSGL
         ELSE  ,
         LA    R0,MSGL+4
         SLL   R0,16
         ST    R0,WTOA
         LA    R1,WTOA
         WTO   MF=(E,(R1))
         BEND  TPUTER
         BEND  NOISEY
         LEAVE OK
         BEND  PERMIT
         MVC   MSGUID(16),=CL16'X PROTECTED DSN'
         L     R6,ACHKENTW
         MVC   MSGDSN,0(R6)
         LA    R0,MSGL+4
         SLL   R0,16
         ST    R0,WTOA
         LA    R1,WTOA
         WTO   MF=(E,(R1))
         BEND  ACCESS
         LA    R15,KILLIT
         LEAVE SVC
         BEND  OK
         SR    R15,R15
         BEND  SVC
         L     R14,RETURN
         BR    R14
         SPACE 1
MOVEONE  BLOCK
*        **************************************************** *
*        * MOVE ONE QUALIFIER TO FIELD POINTED TO BY R7       *
*        * ON ENTRY, R6 IS DSN SCAN POINTER                   *
*        * FIELD IS LEFT BLANK IF SYNTAX ERROR                *
*        * R2 IS SET TO 0 IF FIELD >8 CHARS                   *
*        *           TO 4 IF FIELD ENDS IN ' '                *
*        *           TO 8 IF FIELD ENDS IN '.'                *
*        **************************************************** *
         SR    R2,R2
         TRT   0(9,R6),TRTAB
         IF    EQ,THEN
         LEAVE MOVEONE
         BEND
         LR    R4,R1
         SR    R4,R6
         IF    (R4,EQ,0),THEN
         LEAVE MOVEONE
         BEND
         BCTR  R4,0
         EX    R4,MOVEQ
         LA    R6,1(R1)           POINT TO NEXT PART
         BEND  MOVEONE
         BR    R14
         SPACE 1
MOVEQ    MVC   0(*-*,R7),0(R6)
         TITLE 'RACHECK - CONSTANTS AND EQUATES'
DSNCLS   DC    AL1(7),CL7'DATASET'
DSNCLSL  EQU   *-DSNCLS
TRTAB    DC    256AL1(0)
         ORG   TRTAB+C' '
         DC    AL1(4)
         ORG   TRTAB+C'.'
         DC    AL1(8)
         ORG
KILLIT   EQU   8
         LTORG
         TITLE 'RACHECK - DSECTS'
         PRINT NOGEN
         IECEQU  IEZDEB=YES
R10      EQU   10                 ADD TWO DIGIT REGISTER EQU'S
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         XCVT
         XASVT
         XASCB
         IECDSECS CVT,DCB,MAIN,WTG,PREFX,                              X
               RB,ASCB,PSA,                                            X
               EXPAND=YES
RBPRFX   DSECT
         ORG   RBEXSAVE
*
*        THE XSA IN THE SVRB IS AVAILABLE TO US AS A WORK AREA
*
RETURN   DS    A
QUAL1    DS    CL8                HIGHEST DSN QUALIFIER (UID)
QUAL2    DS    CL8                SECOND DSN COMPONENT
QUAL3    DS    CL8                LOWEST LEVEL (DS TYPE)
DSPROJ   DS    CL8
INITLEN  EQU   *-QUAL1
TSTBYTE  DS    X
TSTBYTE2 DS    X
         DS    0XL(RBEXSAVE+48+1-*) FLAGGED IF OVERFLOW         JSA
         ORG   QUAL1
WTOA     DS    A                  WTO PREFIX
RPLY     EQU   WTOA
MSGA     DS    0C
MSGUID   DC    CL8'USERID'
MSGACS   DC    CL8' UPDATE '
MSGDSN   DC    CL24'DSNAME'
MSGL     EQU   *-MSGA
         DS    0XL(RBEXSAVE+48+1-*) FLAGGED IF OVERFLOW         JSA
         ORG   RBFEPARM                                         JSA
*                                                               JSA
*        WE ALSO USE THE RBFEPARM AREA FOR WORKING STORAGE      JSA
*        IF A FESTAE IS ADDED TO THIS SVC THIS MUST BE BORN     JSA
*        IN MIND                                                JSA
*                                                               JSA
USEUID   DS    CL8                 CALLERS USERID               JSA
USEPROJ  DS    CL8                 CALLERS PROJECT              JSA
         DS    0XL(RBFEPARM+24+1-*) FLAGGED IF OVERFLOW         JSA
         ICHACHKL
         IECSDSL1 1
         END   RACHECK
