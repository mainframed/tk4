TSO      TITLE 'TSO (T) SUBCOMMAND FOR TEST--ESCAPE TO TSO MODE'
         SPACE 3
*****************************************************************
*                                                               *
*        THIS PROCESSOR SHOULD BE INSTALLED IN THE USER         *
*        SUBCOMMAND NAME TABLE OF THE TEST COMMAND FOR          *
*        ESCAPE TO TSO. THE MODULE PERFORMS BOTH ORDINARY       *
*        COMMAND AND IMPLICIT EXEC FUNCTIONS                    *
*        USE:                                                   *
* IKJEGSCU CSECT                                                *
*          DC    X'03',C'TSO',X'01',C'T',C'IKJEGTSO',X'21'      *
*                                                               *
*****************************************************************
         SPACE 3
IKJEGTSO CSECT
         YREGS
CPPLREG  EQU   R10                 ->CPPL
ECTREG   EQU   R11                 ->ECT
CBUFREG  EQU   R9                  ->CBUF
TCOMREG  EQU   R8                  ->TCOMTAB
INBUF    EQU   120                 IN TCOMTAB
TPLPTR   EQU   80                  IN TCOMTAB
         EJECT
         PRINT NOGEN
         IKJCSPL
CSPLEND  EQU   *
         IKJCSOA
CSOAEND  EQU   *
         IKJCPPL
CPPLEND  EQU   *
         IKJECT
         CVT   DSECT=YES
         SPACE 3
         PRINT GEN
DS       DSECT ,                   DYNAMIC STORAGE
         DS    18F                 STANDARD SAVE AREA
#CSPL    DS    0F
         DS    (CSPLEND-CSPL)X
#CSOA    DS    0F
         DS    (CSOAEND-CSOA)X
#ECB     DS    1F
#FLG     DS    1F
BLDLHEAD DS    2H                  HEADER INFORMATION FOR BLDL LIST
LOADNAME DS    CL8
         DS    50X                 REMAINDER OF BLDL ENTRY
ATTCH    ATTACH DE=LOADNAME,SHSPV=78,SZERO=NO,ECB=TASKECB,ESTAI=ERRX,  X
               SF=L
LATTCH   EQU   *-ATTCH
SAVEECTP DS    CL8                 SAVE AREA FOR ECTPCMD
SAVEECTS DS    CL8                 SAVE AREA FOR ECTSCMD
TASKECB  DS    1F                  ECB FOR ATTACH
TCBADDR  DS    1A                  ADDRESS OF TCB FOR ATTACH-DETACH
#CPPL    DS    0F
         DS    (CPPLEND-CPPL)X
ESTAE    ESTAE MF=L                ESTAE PARM LIST
STAXL    STAX  TSOSTAX,USADDR=0,REPLACE=NO,MF=L STAX PARM LIST
LSTAXL   EQU   *-STAXL             LENGTH OF LIST
DSLEN    EQU   *-DS
         SPACE 3
CBUF     DSECT ,                   COMMAND BUFFER
LEN      DS    1H
OFFSET   DS    1H
TEXT     EQU   *
         EJECT
IKJEGTSO CSECT
         SAVE  (14,12),,*
         BALR  R12,0
         USING *,R12
         GETMAIN R,LV=DSLEN        GET DYNAMIC STORAGE
         ST    R1,8(R13)           FORWARD CHAIN SAVE AREAS
         ST    R13,4(R1)           BACK CHAIN SAVE AREAS
         LR    R13,R1              ESTABLISH NEW SAVE AREA
         USING DS,R13              ADDRESS IT
         LR    TCOMREG,R9          ->TCOMTAB
         B     SKIPTHIS            TO ACCOMPLISH DEBUGGING, ZAP
*                                  THIS TO A NOP
         LOAD  EP=DDT              GET DDT (ESTAE ROUTINE)
         LR    R2,R0               USE R2 FOR ESTAE MACRO
         ESTAE (R2),MF=(E,ESTAE)   ESTABLISH DDT AS LOCAL ESTAE
         $DIE  'DEBUG'             START DEBUGGING MODE
SKIPTHIS EQU   *
         SPACE 3
*        ESTABLISH STANDARD CPPL, ADDRESS OTHER STRUCTURES
         SPACE 1
         L     CBUFREG,INBUF(TCOMREG) GET ADDRESS OF NEXT COMMAND BUF
         USING CBUF,CBUFREG
         L     CPPLREG,TPLPTR(TCOMREG) GET ADDRESS OF TPL
*                                 THE FIRST FOUR WORDS LOOK LIKE A CPPL
         USING CPPL,CPPLREG
         L     R1,CPPLCBUF         GET OLD COMMAND BUFFER
         LH    R0,LEN-CBUF(R1)     GET ITS LENGTH
         FREEMAIN RC,LV=(0),A=(1),SP=1 FREE OLD BUFFER
         ST    CBUFREG,CPPLCBUF    REPLACE WITH NEW BUFFER
         MVC   #CPPL(CPPLEND-CPPL),CPPL COPY CPPL
         LA    CPPLREG,#CPPL       POINT TO COPY
         L     ECTREG,CPPLECT      GET ECT ADDRESS
         USING ECT,ECTREG          ADDRESS ECT
         XC    INBUF(4,TCOMREG),INBUF(TCOMREG) CLEAR INBUF FIELD
         SPACE 3
*        FIX BUFFER TO OFFSET OF ZERO
         SPACE 1
         LH    R7,LEN              GET LENGTH OF BUFFER
         LH    R6,OFFSET           GET CURRENT OFFSET
         LA    R6,4(R6)            COMPUTE OFFSET FR. BEGIN. OF BUFFER
         CR    R6,R7               CHECK IF BUFFER ALL SCANNED
         BNL   ENDING              IF SO, NOTHING TO DO
         LA    R5,CBUF(R6)         POINT TO UNSCANNED TEXT
         SR    R7,R6               GET RESIDUAL LENGTH
         BCTR  R7,0                EXECUTE FORM
         MVC   TEXT(0),0(R5)       (EXECUTED)
         EX    R7,*-6              MOVE UNSCANNED TEXT TO HEAD
         LA    R8,TEXT+1(R7)       POINT PAST MOVED TEXT
         LH    R15,OFFSET          COMPUTE NUMBER OF CHARS. DESTROYED
BLANK    MVI   0(R8),C' '          BLANK OUT NOW INVALID CHARS
         LA    R8,1(R8)            ADVANCE TO NEXT CHAR
         BCT   R15,BLANK           REPEAT AS NECESSARY
         XC    OFFSET,OFFSET       SET OFFSET TO ZERO
         SPACE 3
*        INITIALIZE FOR COMMAND SCAN
         SPACE 1
         LA    R2,#CSPL
         USING CSPL,R2
         ST    ECTREG,CSPLECT      ECT
         MVC   CSPLUPT,CPPLUPT     UPT
         ST    CBUFREG,CSPLCBUF    COMMAND BUFFER
         LA    R0,#ECB
         ST    R0,CSPLECB          ECB
         LA    R0,#CSOA
         ST    R0,CSPLOA           CSOA
         LA    R0,#FLG             FLAG
         ST    R0,CSPLFLG
         XC    #FLG,#FLG           CLEAR FLAG
         XC    #ECB,#ECB           CLEAR ECB
         SPACE 3
*        LINK TO SCAN AND RETRIEVE RESULTS
         SPACE 1
         LR    R1,R2               GET PARMS
         CALLTSSR EP=IKJSCAN       LINK TO SCAN ROUTINE
         LTR   R15,R15             TEST SUCCESS
         BNZ   SCANFAIL
         LA    R2,#CSOA            ADDRESS ANSWER AREA
         USING CSOA,R2
         TM    CSOAFLG,CSOAVWP+CSOAVNP VALID COMMAND?
         BZ    SCANFAIL            NO, GET OUT
         NI    ECTSWS,X'FF'-ECTNOPD YES, ASSUME PARAMETERS
         TM    CSOAFLG,CSOAVWP     HAS PARAMETERS?
         BO    PARMS               YES, SKIP ECT FLAG RESET
         OI    ECTSWS,ECTNOPD      TURN ON FLAG INDICATING NO PARMS
PARMS    TM    CSOAFLG,CSOAEXEC    % INDICATED?
         BO    DOEXEC              YES, BRANCH TO EXEC CODE
         SPACE 3
*        A VALID, NON-EXEC-LIKE COMMAND WAS ISSUED. ATTEMPT BLDL
         SPACE 1
         MVI   LOADNAME,C' '       BLANK OUT....
         MVC   LOADNAME+1(7),LOADNAME ...LOAD NAME
         LH    R15,CSOALNM         GET NAME LENGTH
         L     R3,CSOACNM          --> NAME
         BCTR  R15,0               FOR EXECUTE
         MVC   LOADNAME(0),0(R3)   (EXECUTED)
         EX    R15,*-6             MOVE NAME
         MVC   BLDLHEAD(4),=X'0001003A' INITIALIZE BLDL LIST
         BLDL  0,BLDLHEAD          EXECUTE A BLDL TO FIND MODULE
         LTR   R15,R15             FOUND?
         BNZ   DOEXEC              NO, DO IMPLICIT EXEC
         B     ATTCD               GO TO ATTACH CODE
         SPACE 3
*        HANDLE IMPLICIT EXEC CASE
         SPACE 1
DOEXEC   XC    OFFSET,OFFSET       SET BUFFER OFFSET TO ZERO
         MVC   LOADNAME,=CL8'EXEC' INDICATE EXEC PROCESSOR
         MVC   BLDLHEAD(4),=X'0001003A' INITIALIZE BLDL LST
         BLDL  0,BLDLHEAD          DO BLDL FOR EXEC
*                                  ASSUME SUCCESS
         SPACE 3
*        SET UP ATTACH
         SPACE 1
ATTCD    MVC   SAVEECTP,ECTPCMD    SAVE PRIMARY COMMAND NAME
         MVC   SAVEECTS,ECTSCMD    SAVE SUBCOMMAND NAME
         MVC   ECTPCMD,LOADNAME    SET PRIMARY NAME
         MVI   ECTSCMD,C' '        BLANK SUBCOMMAND NAME
         MVC   ECTSCMD+1(7),ECTSCMD
         XC    TASKECB,TASKECB     CLEAR ECB
         XC    ATTCH(LATTCH),ATTCH CLEAR ATTACH PARM LIST
         XC    STAXL(LSTAXL),STAXL CLEAR STAX PARM LIST
         STAX  TSOSTAX,USADDR=TASKECB,REPLACE=NO,MF=(E,STAXL)
*                                  ESTABLISH STAX COVERAGE FOR SUBTASK
         LR    R1,CPPLREG          RESTORE CPPL POINTER
         ATTACH DE=LOADNAME,SHSPV=78,SZERO=NO,ECB=TASKECB,ESTAI=ERRX,  X
               SF=(E,ATTCH)
*                                  ATTACH THE CP
         ST    R1,TCBADDR          SAVE TCB ADDRESS
         WAIT  1,ECB=TASKECB       WAIT FOR TERMINATION
         DETACH TCBADDR,STAE=YES   DETACH THE TASK
         STAX  ,                   CANCEL LOCAL STAX
         MVC   ECTPCMD,SAVEECTP    RESTORE PRIMARY COMMAND
         MVC   ECTSCMD,SAVEECTS    RESTORE SUBCOMMAND
         SPACE 3
*        NOTHING TO DO, GO BACK
         SPACE 1
ENDING   LR    R1,R13              RESTORE R1 FOR FREEMAIN
         L     R13,4(R13)          CHAIN BACK SAVE AREAS
         LA    R0,DSLEN
         FREEMAIN R,LV=(0),A=(1)   FREE DYNAMIC STORAGE
         RETURN (14,12),T,RC=0
         SPACE 3
*        SCAN FAILURE, ISSUE MESSAGE AND RETURN
         SPACE 1
SCANFAIL TPUT  FAILMSG,L'FAILMSG
         B     ENDING
FAILMSG  DC    C'COMMAND INVALID'
         SPACE 3
*        ESTAI EXIT
         SPACE 1
ERRX     LA    R15,16              INDICATION TASK TERMINATION WITH NO
*                                  FURTHER ESTAI PROCESSING
         BR    R14
         SPACE 3
*        STAX EXIT
         SPACE 1
TSOSTAX  SAVE  (14,1)              SAVE SYSTEM REGISTERS
         L     R1,8(R1)            ADDRESS TASK ECB (USADDR)
         POST  (R1)                POST TASK 'COMPLETE' TO
*                                  STIMULATE DETACH
         RETURN (14,1),T,RC=0      RETURN TO SYSTEM
         LTORG
         END
