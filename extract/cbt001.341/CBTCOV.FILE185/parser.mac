PARSER   TITLE 'PL/I-CALLABLE INTERFACE TO IKJPARS'                YAPB
*******************************************************************YAPB
* PARSER HAS SIX ARGUMENTS:                                        YAPB
* 1) COMMAND BUFFER (IN OS COMMAND PROCESSOR FORMAT)               YAPB
*   DCL 1 PARM,                                                    YAPB
*       2 LENGTH FIXED BIN(15,0),       LENGTH OF BUFFER           YAPB
*       2 OFFSET FIXED BIN(15,0),       OFFSET TO OPERANDS         YAPB
*       2 BUFFER CHAR(256).             COMMAND BUFFER             YAPB
* 2) PARSE CONTROL LIST (PCL GENERATED BY IKJPARS (ASM) MACROS)    YAPB
*    THE PCL DESCRIBES THE COMMAND SYNTAX                          YAPB
*   DCL PCL     PTR STATIC EXTERNAL.                               YAPB
*    PCL IS THE NAME OF THE CSECT CREATED BY THE IKJPARM MACRO     YAPB
*    PASS ADDR(PCL) TO PARSER TO GET THE PROPER LEVEL OF INDIRECTION. *
* 3) VALIDITY CHECKING ROUTINES (PL/I VALCHK SUBROUTINES)          YAPB
*   DCL VALCHK(N) ENTRY VARIABLE INIT(X,Y).                        YAPB
*    N IS THE NUMBER OF VALIDITY CHECKING ROUTINES PASSED,         YAPB
*    X AND Y ARE THE SUBROUTINES.                                  YAPB
*    THE PL/I VALCHK ROUTINES HAVE THREE ARGUMENTS:                YAPB
*       I) A PTR TO THE PARSE DESCRIPTOR ELEMENT (PDE),            YAPB
*       II) A PTR TO PROMPTING TEXT THAT THE VALCHK ROUTINE WANTS  YAPB
*       IKJPARS TO ISSUE (IF THE VALCHK ROUTINE DOES NOT SUPPLY A  YAPB
*       MESSAGE, THE PTR REMAINS NULL),                            YAPB
*       III) RETURN CODE FROM THE VALCHK ROUTINE:                  YAPB
*           0 - PDE IS OK                                          YAPB
*           4 - PARSE SHOULD ISSUE ERROR MESSAGE & PROMPT FOR      YAPB
*               REPLACEMENT                                        YAPB
*           8 - VALCHK ISSUED MESSAGE, PARSE SHOULD PROMPT FOR     YAPB
*               REPLACEMENT                                        YAPB
*          12 - PARSE SHOULD RETURN IMMEDIATELY TO CALLER.         YAPB
* 4) RETURN CODE (HALFWORD) FROM PARSER:                           YAPB
*    (NOTE CODES 0 - 28 ARE IKJPARS CODES)                         YAPB
*       0 - PARSE IS OK                                            YAPB
*       4 - PARMS ARE INCOMPLETE AND PARSE COULD NOT PROMPT        YAPB
*       8 - ATTN INTERRUPT                                         YAPB
*      12 - INVALID PARSE PARAMETER LIST (PPL)                     YAPB
*      16 - PARSE COULD NOT GETMAIN STORAGE                        YAPB
*      20 - VALCHK ROUTINE REQUESTED TERMINATION                   YAPB
*      24 - CONFLICTING PARMS IN (TERM, OPER, OR RSVWD) MACROS     YAPB
*      28 - TERMINAL DISCONNECTED                                  YAPB
*      32 - ERROR IN PARSER ROUTINE                                YAPB
* 5) PDE PTRS RETURNED FROM IKJPARS                                YAPB
*   DCL 1 PDEPTRS,                                                 YAPB
*       2 PDE1  PTR,                                               YAPB
*       2 PDE2  PTR,    ETC.                                       YAPB
*    THERE IS ONE PTR FOR EACH PDE GENERATED BY THE CALL TO IKJPARS.  *
*    THE ORDER OF THE PDES CORRESPONDS TO THE ORDER OF THE IKJPARS YAPB
*    MACROS.                                                       YAPB
* 6) PTR TO DYNAMIC STORAGE ACQUIRED BY IKJPARS (FOR PDES)         YAPB
*    (USE THIS PTR AS THE ARGUMENT TO ROUTINE "PARSFRE" AFTER      YAPB
*    PROCESSING THE PDES TO FREE THE STORAGE).                     YAPB
*    SINCE PARSER IS REENTRANT, MULTIPLE CALLS MAY BE MADE BEFORE  YAPB
*    FREEING ANY OF THE STORAGE.                                   YAPB
*******************************************************************YAPB
         EJECT                                                     YAPB
* KNOWLEDGE OF IKJPARS IS REQUIRED TO USE PARSER,                  YAPB
* SEE TSO GUIDE TO WRITING A TMP OR CP.                            YAPB
         SPACE 2                                                   YAPB
* DCL PARSER  EXT ENTRY;              /* THE PARSE INTERFACE */    YAPB
* /* PARSER IS IN ASSEMBLER BUT NEEDS PL/I LOCATOR DESCRIPTORS */  YAPB
* DCL PARSFRE EXT ENTRY(PTR);         /* FREE STORAGE ROUTINE */   YAPB
         SPACE 2                                                   YAPB
* WRITTEN BY JSA - 07/03/78                                        YAPB
*                                                                  YAPB
* MODIFICATIONS  - 07/23/79:                                       YAPB
* STAX ADDED TO POST IKJPARS' "SERVICE ROUTINE ECB" AFTER AN       YAPB
* ATTN INTERRUPT.  THIS CAUSES IKJPARS TO RETURN IMMEDIATELY       YAPB
* WITH RETURN CODE 8.                                              YAPB
*                                                                  YAPB
* MODIFICATIONS  - 08/24/79:                                       YAPB
* IF PARSER DISCOVERS THAT THE PSCBPTR IN THE JSCB IS NULL (IE.    YAPB
* WE ARE NOT RUNNING THE TMP IN EITHER THE FOREGROUND OR THE       YAPB
* BACKGROUND) THEN IT WILL FORMAT A UPT AND AN ECT AND PUT THEIR   YAPB
* ADDRS INTO THE PPL SO THAT IKJPARS MAY BE INVOKED FROM A         YAPB
* BATCH PROGRAM.                                                   YAPB
* THE FORMATS FOR THE UPT & ECT WERE DETERMINED FROM THEIR         YAPB
* CONTENTS WHEN RUNNING THE TMP UNDER BATCH.                       YAPB
* A PROFILE PREFIX IS CREATED FROM THE USERID SO THAT DATASET      YAPB
* QUALIFICATION MAY BE PERFORMED (IF REQUESTED).                   YAPB
* SINCE TSO USERIDS HAVE A MAXIMUM LENGTH OF 7 CHARACTERS, A BATCH YAPB
* USER WITH AN 8 CHARACTER USERID WILL NOT HAVE A PROFILE PREFIX.  YAPB
* NOPROMPT HAS BEEN SPECIFIED FOR THE PROFILE SO IF THERE IS AN    YAPB
* ERROR IN THE SYNTAX IKJPARS WILL RETURN WITH RC=4.               YAPB
* WE ALSO STACK AN OUTPUT DATASET SO THAT SYNTAX ERROR MESSAGES    YAPB
* CAN BE WRITTEN TO THE USER (FILE SYSPRINT).                      YAPB
* IF THERE IS NO ALLOCATION FOR FILE SYSPRINT AND THERE IS A       YAPB
* SYNTAX ERROR, A "SYSPRINT DD STATEMENT MISSING" MESSAGE WILL     YAPB
* BE PUT IN THE JES JOB LOG AND PROCESSING WILL CONTINUE.          YAPB
* SINCE NOPROMPT IS SPECIFIED THE ONLY I/O SERVICES USED WILL      YAPB
* BE FOR OUTPUT.                                                   YAPB
         SPACE 2                                                   YAPB
* DETAILED DOCUMENTATION ON THE USE OF PARSER CAN BE FOUND IN      YAPB
* 'YCC1.DOC.TEXT(PARSER)'.                                         YAPB
* A PL/I INCLUDE DESCRIBING ARGUMENTS AND DECLARING THE ENTRIES    YAPB
* AND VARIOUS PDES CAN BE FOUND IN 'YCC1.PLIXMACS(PARSER)'.        YAPB
         SPACE 2                                                   YAPB
* ATTRIBUTES:  REENTRANT, REUSABLE, REFRESHABLE                    YAPB
         EJECT ,
PARSER1  CSECT
         REGS                                                      YAPB
         SPACE 1                                                   YAPB
CBUFREG  EQU   R6
PCLREG   EQU   R7
VALIREG  EQU   R8
RETREG   EQU   R9
PDEREG   EQU   R10
ANSREG   EQU   R11
PCELEN   EQU   R14
PDEMAX   EQU   R3
         EJECT                                                     YAPB
*        STANDARD PL/I ENTRY
         SPACE 1
         ENTRY PARSER,PARSFRE
         DC    C' PARSER'
         DC    X'06'
PARSER   SAVE  (14,12)
         BALR  R2,0
         USING *,R2                BASE
         LR    R3,R1               SAVE PARAMETERS
         LA    R0,DSALEN           R0 HAS DSA LENGTH
         USING DSA,R13             --> OLD DSA
         L     R1,NAB              R1 HAS NAB
         ALR   R0,R1               R0 HAS NEW NAB CANDIDATE
         CL    R0,12(,R12)         COMPARE TO EOS IN TCA
         BNH   ENUF                HAVE ENOUGH?
         L     R15,116(,R12)       NO, CALL PL/I STORAGE OVERFLOW
         BALR  R14,R15             TO GET DSA
ENUF     L     R14,LWS             GET LWS ADDRESS
         LR    R15,R0              NAB AND EOP NAB ARE SAME
         ST    R13,4(,R1)          BACKCHAIN DSAS
         LA    R13,0(,R1)          ADDRESS NEW DSA
         STM   R14,R0,LWS          PLACE LWS, NAB, EOP NAB IN NEW DSA
         MVC   DSAFLAG,=X'8020'    SET DEFAULT DSA FLAGS
         MVC   ENABCELL,=X'91C091C0' SET ENABLE CELLS
         ST    R5,BACKCHN          SET STATIC BACKCHAIN
         EJECT                                                     YAPB
*        SAVE ARGUMENTS; SET UP PARSE CALL
         SPACE 1
         LM    CBUFREG,ANSREG,0(R3) ACQUIRE ARGUMENT LIST
         LA    R4,#PPL             ADDRESS PPL                     YAPB
         USING PPL,R4              .                               YAPB
         L     PCLREG,0(,PCLREG)   SKIP LOCATOR
         ST    PCLREG,PPLPCL       PLACE IN PPL
         ST    ANSREG,PPLANS       STORE ANSWER WORD ADDR. IN PPL
         MVC   PPLCBUF,0(CBUFREG)  MOVE CBUF ADDRESS TO PPL
         ST    R13,PPLUWA          DSA ADDRESS IS USER WORK AREA VALUE
         LA    R3,ECB              ADDRESS ECB
         ST    R3,PPLECB           . INTO PPL                      YAPB
         XC    ECB,ECB             CLEAR THE ECB
         MVC   VALRSAVE,0(VALIREG) SAVE ADDR. OF VALIDITY ROUT. VECTOR
         L     PDEREG,0(PDEREG)    SKIP LOCATOR OF PDEPTR VECTOR
         USING PSA,0               ADDRESS PSA
         L     R3,PSATOLD          --> TCB
         L     R3,TCBJSCB-TCB(,R3) --> JSCB
         L     R3,JSCBPSCB-IEZJSCB(,R3) --> PSCB
         LA    R3,0(R3)            CLEAR HI-ORDER BYTE             YAPB
         LTR   R3,R3               TEST TSO/BATCH ENVIRONMENT      YAPB
         BZ    BATCH               NULL PSCB => BATCH (& NO TMP)   YAPB
* HERE IF WE ARE IN A TSO (OR TSO UNDER BATCH) ENVIRONMENT         YAPB
         MVC   PPLUPT,PSCBUPT-PSCB(R3) UPT ADDRESS IN PPL
         L     R3,PSCBRLGB-PSCB(,R3) ADDRESS RLGB
         MVC   PPLECT,RLGBECT-RLGB(R3) MOVE ECT ADDRESS TO PPL
         B     GOTPPL              PPL INITIALIZATION COMPLETE     YAPB
         EJECT                                                     YAPB
* HERE IF WE ARE IN A BATCH ENVIRONMENT                            YAPB
BATCH    EQU   *                                                   YAPB
         MVC   BATCHCB(PROTOLEN),PROTOCB     GET UPT & ECT         YAPB
         LA    R3,UPTCB            ADDR UPT                        YAPB
         ST    R3,PPLUPT           . INTO PPL                      YAPB
         LA    R3,ECTCB            ADDR ECT                        YAPB
         ST    R3,PPLECT           . INTO PPL                      YAPB
         SPACE 1                                                   YAPB
* COMPUTE PROFILE PREFIX (FROM USERID)                             YAPB
         L     R3,PSAAOLD          -> ASCB                         YAPB
         USING ASCB,R3             .                               YAPB
         LH    R1,ASCBASID         ASID # (1 ORIGIN)               YAPB
         SLL   R1,2                MULT ASID BY 4 & ADD 4          YAPB
         LA    R1,4(R1)            R1 IS INDEX OF XASCB IN XASVT   YAPB
         L     R3,FLCCVT           -> CVT                          YAPB
         USING CVT,R3              .                               YAPB
         L     R3,CVTUSER          -> XCVT                         YAPB
         USING XCVT,R3             .                               YAPB
         L     R3,XCVTXASV         -> XASVT                        YAPB
         L     R3,0(R1,R3)         -> XASCB                        YAPB
         USING XASCB,R3            .                               YAPB
         LA    R3,XASCUID          -> USERID                       YAPB
         DROP  R3                                                  YAPB
         LA    R1,7(R3)            -> LAST CHAR IN USERID          YAPB
CHKLEN   CLI   0(R1),C' '          LOOK FOR LAST NON-BLANK CHAR    YAPB
         BNE   GOTNBLNK            GOT IT                          YAPB
         BCT   R1,CHKLEN           CHECK NEXT                      YAPB
GOTNBLNK SR    R1,R3               LENGTH OF USERID - 1            YAPB
         LA    R1,1(R1)            ADD ONE                         YAPB
         CH    R1,=H'8'            8 CHAR USERID?                  YAPB
         BE    ENDPREF             YES, NO PREFIX (TOUGH BEANS)    YAPB
         MVC   UPTCB+16(7),0(R3)   MOVE IN USERID                  YAPB
         STC   R1,UPTCB+23         MOVE IN LENGTH                  YAPB
ENDPREF  EQU   *                   PROFILE PREFIX IS SET           YAPB
* PPL INITIALIZATION COMPLETE                                      YAPB
         EJECT                                                     YAPB
* SETUP STACK FOR I/O ROUTINES                                     YAPB
         XC    STACKLST(STACKLEN),STACKLST   CLEAR STACK PARMS     YAPB
         STACK PARM=STACKLST,UPT=UPTCB,ECT=ECTCB,ECB=ECB,          YAPB*
               DATASET=(OUTDD=OUTDD),MF=(E,IOPL)                   YAPB
* END OF BATCH FAKEOUT CODE...                                     YAPB
         EJECT                                                     YAPB
GOTPPL   EQU   *                   TSO & BATCH FROM HERE           YAPB
* SET UP STAX FOR IKJPARS                                          YAPB
         MVC   STAXLIST(STAXLEN),STAXMODL    STAX PL TO DSA        YAPB
         LA    R3,ECB              GET ADDR(ECB)                   YAPB
         STAX  ATTN,REPLACE=NO,USADDR=(R3),MF=(E,STAXLIST)         YAPB
         EJECT                                                     YAPB
         LA    R3,VALINK           GET VALIDITY LINK INTERFACE
         ST    R3,VALIROUT         SAVE IN DSA
         ST    R12,TCASAVE         SAVE TCA ADDRESS
         LR    R5,R13              SAVE DSA ADDRESS
         LA    R13,PARSAVE         GET HIDDEN SAVE AREA FOR PARSE
         LR    R1,R4               R1->PPL                         YAPB
         CALLTSSR EP=IKJPARS       INVOKE PARSE SERVICE
         LR    R13,R5              RESTORE DSA
         STH   R15,0(,RETREG)      SAVE RETURN CODE FOR CALLER
         SPACE 1                                                   YAPB
         STAX  ,                   CANCEL STAX FOR IKJPARS         YAPB
         SPACE 1                                                   YAPB
         LH    R15,0(,RETREG)                                      YAPB
         LTR   R15,R15             TEST FOR SUCCESS
         BNZ   EXIT                NO? DON'T PROCESS PDES
         EJECT                                                     YAPB
*        FILL IN PDEPTR ADDRESSES FOR CALLER
         SPACE 1
         L     ANSREG,0(ANSREG)    GET PDE ADDRESS SUPPLIED BY PARSE
         LH    R15,0(PCLREG)       LENGTH OF PCL
         LH    PDEMAX,2(PCLREG)    LENGTH OF PDL
         LA    R15,0(R15,PCLREG)   END OF...
         BCTR  R15,0               ...PCL
         LA    PCELEN,6            FIRST PCE, IKJPARM PCE, HAS LEN 6.
PDELOOP  BXH   PCLREG,PCELEN,EXIT  POSITION TO NEXT PCE
         IC    R1,0(,PCLREG)       GET PCE FLAG
         N     R1,=X'000000E0'     ISOLATE 3-BIT TYPE CODE
         BNZ   SOMETYPE            MAY BE END-OF-FIELD
*                                  IF SO, IT IS EITHER THE END OF
*                                  THE PCL OR A SUBFIELD MARKER. ASSUME
*                                  SUBFIELD MARKER (LENGTH 3)
         LA    PCELEN,3            ...AND LET BXH DECIDE
         B     PDELOOP
SOMETYPE C     R1,=A(X'60')        TEST FOR IKJNAME, WHICH HAS NO PDE
         BE    NOPDE               SKIP PDE PROCESSING IF SO
         LH    R1,4(PCLREG)        GET PDE OFFSET
         CR    R1,PDEMAX           TEST FOR PARADOX
         BH    ERROR
         LA    R1,0(R1,ANSREG)     GET PDE ADDRESS
         ST    R1,0(PDEREG)        STORE FOR CALLER
         LA    PDEREG,4(PDEREG)    ADVANCE PDE REG
NOPDE    LH    PCELEN,2(PCLREG)    GET PCE LENGTH
         B     PDELOOP             REPEAT LOOP
         SPACE 3
*        ERROR IN PDE RESOLUTION
         SPACE 1
ERROR    LA    R15,32              USE RETURN CODE 32
         STH   R15,0(,RETREG)      PLACE IN APPROPRIATE PLACE
         SPACE 3
*        RETURN
         SPACE 1
EXIT     EQU   *                   RETURN TO CALLER
         L     R13,4(,R13)         CHAIN BACK DSA
         RETURN (14,12),T,RC=0
         DROP  R2
         EJECT ,
VALINK   EQU   *                   VALIDITY CHECK INTERFACE
         SAVE  (14,12)             SAVE IKJPARS'S REGISTERS
         LR    R12,R13             TEMPORARILY SAVE IKJPARS'S R13
         L     R13,4(,R1)          RESTORE DSA
         ST    R12,BACKSAVE        SAVE IKJPARS'S R13
         L     R12,TCASAVE         RESTORE TCA
         L     R5,VALRSAVE         GET VALIDITY ROUTINE VECTOR
         LR    R15,R0              GET PLIVALI MACRO ADDRESS
         A     R5,12(,R15)         ADD VALIDTY ROUTINE OFFSET
         L     R15,0(,R5)          GET ACTUAL PL/I ENTRY POINT
         L     R5,4(,R5)           GET STATIC DSA BACKCHAIN
         LA    R2,0(,R1)           --> A(PDE)
         LA    R3,8(R1)            --> A(SECOND LEVEL MESSAGE)
         LA    R4,INTERRES         --> INTERFACE RESULT WORD
         STM   R2,R4,INTERARG      CREATE INTERFACE ARG LIST
         OI    INTERARG+8,X'80'    SET VL TYPE FLAG
         LR    R2,R1               SAVE ORIGINAL ARG LIST
         LA    R1,INTERARG         POINT TO INTERFACE ARG LIST
         BALR  R14,R15             CALL PL/I ROUTINE
         LR    R1,R2               RESTORE ORIGINAL ARG LIST
         LH    R15,INTERRES        SET INTERFACE RETURN CODE
         L     R13,BACKSAVE        RESTORE IKJPARS SAVEAREA REG
         L     R14,12(,R13)        RESTORE R14
         RETURN (2,12),T           RETURN TO IKJPARS
         EJECT ,
PARSFRE  EQU   *                   FREE PARSE ANSWER AREA
         SAVE (14,2)               SAVE REGS
         BALR  R2,0
         USING *,R2                BASE
         L     R1,0(R1)            ADDRESS OF ANSWER AREA POINTER
         IKJRLSA (1)               RELEASE STORAGE
         RETURN (14,2),,RC=0       RETURN TO CALLER
         EJECT                                                     YAPB
ATTN     EQU   *                   ATTN INTERRUPT EXIT             YAPB
         DS    0H                  R1->STAX PARMLIST               YAPB
         L     R1,8(R1)            R1->ECB                         YAPB
         POST  (R1)                POST ECB                        YAPB
         BR    R14                 RETURN                          YAPB
         SPACE 2                                                   YAPB
         LTORG  ,                  LITERAL POOL
         SPACE 2                                                   YAPB
STAXMODL STAX  ATTN,REPLACE=NO,MF=L                                YAPB
STAXLEN  EQU   *-STAXMODL                                          YAPB
         SPACE 2                                                   YAPB
OUTDD    DC    CL8'SYSPRINT'       DDNAME FOR STACK OUTPUT         YAPB
         EJECT                                                     YAPB
* PROTOTYPES FOR UPT & ECT TO RUN IN THE BATCH                     YAPB
* THESE PROTOTYPES ARE MODELED AFTER THE CONTROL BLOCKS CREATED    YAPB
* WHEN RUNNING THE TMP IN THE BACKGROUND...                        YAPB
* NOTE - NEW DEFINITIONS OF THE UPT OR THE ECT WILL REQUIRE        YAPB
* REWRITING HERE (AND POTENTIALLY THE LENGTH OF UPTCT & ECTCB...)  YAPB
PROTOCB  EQU   *                                                   YAPB
PUPT     EQU   *                   USER PROFILE TABLE              YAPB
         DC    XL12'00'            RESERVED                        YAPB
         DC    XL1'71'             NOPROMPT,MSGID,NOINTER,WTPMSG   YAPB
         DC    XL1'00'             CHARACTER DELETE CHAR           YAPB
         DC    XL1'00'             LINE DELETE CHAR                YAPB
         DC    XL1'00'             RESERVED                        YAPB
         DC    CL7' '              USERID PREFIX                   YAPB
         DC    XL1'00'             LENGTH OF PREFIX                YAPB
* PREFIX AND PREFIX LENGTH WILL BE COMPUTED AND PUT INTO UPTCB     YAPB
PECT     EQU   *                   ENVIRONMENT CONTROL TABLE       YAPB
         DC    XL4'00'             LAST COMMAND RC                 YAPB
         DC    A(0)                I/O WORK AREA                   YAPB
*        FILLED IN ON CALL TO STACK                                YAPB
         DC    XL4'00'             SECOND LEVEL MESSAGE CHAIN      YAPB
         DC    CL8'$PARSER$'       PRIMARY COMMAND (WHY NOT)       YAPB
         DC    CL8' '              SUBCOMMAND                      YAPB
         DC    XL1'02'             BACKGROUND MODE                 YAPB
         DC    XL3'00'             TEMPORARY DDNAME COUNTER        YAPB
         DC    XL4'00'             RESERVED                        YAPB
         DC    A(0)                BACKGROUND PARAMETER BLOCK      YAPB
         DC    XL16'00'            RESERVED                        YAPB
PROTOLEN EQU   *-PROTOCB           END OF FAKE CONTROL BLOCKS      YAPB
 TITLE 'MAPPING MACROS FOR TSO CONTROL BLOCKS, ETC.'
         PRINT NOGEN
         CVT   DSECT=YES
         SPACE 3
         IKJTCB ,                  TCB
         SPACE 3
         IEZJSCB ,                 JSCB
         SPACE 3
         IKJPSCB ,                 PSCB
         SPACE 3
         IKJRLGB ,                 RLGB
         SPACE 3
         IHAPSA ,                  PSA
         SPACE 3
         IHAASCB ,                 ASCB                            YAPB
         EJECT                                                     YAPB
         XCVT  ,                   EXTENDED CVT (YCC)              YAPB
         SPACE 3                                                   YAPB
         XASVT ,                   EXTENDED ASVT (YCC)             YAPB
         SPACE 3                                                   YAPB
         XASCB ,                   EXTENDED ASCB (YCC)             YAPB
         SPACE 3                                                   YAPB
         PRINT GEN                                                 YAPB
         IKJPPL ,                  PARSE PARAMETER LIST
 TITLE 'PL/I DYNAMIC STORAGE AREA'
DSA      DSECT ,
         DS    0D
DSAFLAG  DS    XL2                 DSA FLAGS
         DS    70X                 STANDARD SAVE AREA
LWS      DS    1A                  ADDRESS OF LIBRARY WORK SPACE
NAB      DS    1A                  NEXT AVAILABLE BYTE
EOPNAB   DS    1A                  END OF PROLOGUE NAB
ENABCELL DS    XL4                 ENABLE CELLS
BACKCHN  DS    1A                  STATIC BACKCHAIN
         DS    28X                 RESERVED FOR PL/I; UNUSED HERE
VALIROUT DS    1A                  ADDRESS OF VALIDCHK. INTERFACE ROUT.
#PPL     DS    7A                  STORAGE FOR PPL
ECB      DS    1F                  ECB USED BY SERVICE ROUTINES    YAPB
TCASAVE  DS    1A                  SAVE ADDRESS FOR TCA REG.
VALRSAVE DS    1A                  SAVE ADDRESS FOR VALIDITY ROUTINES
PARSAVE  DS    18F                 SECRET SAVE AREA FOR IKJPARS
BACKSAVE DS    1A                  SAVE WORD FOR VALIDITY INTERFACE
INTERARG DS    3A                  ARGUMENT LIST FOR INTERFACE
INTERRES DS    1H                  RESULT CODE FOR INTERFACE
STAXLIST STAX  MF=L                                                YAPB
BATCHCB  EQU   *                   AREA FOR BATCH UPT & ECT        YAPB
UPTCB    DS    XL24                UPT                             YAPB
ECTCB    DS    XL56                ECT                             YAPB
STACKLST STACK MF=L                STACK PARAMETER BLOCK           YAPB
STACKLEN EQU   *-STACKLST                                          YAPB
IOPL     DS    4F                  I/O PARAMETER LIST              YAPB
         DS    0D                  TRAILING ALIGNMENT; LENGTH MUST BE D
DSALEN   EQU   *-DSA
         END   PARSER                                              YAPB
