BPAMRD   PLIXSET   ,                   BEGINS BPAM-READ PACKAGE
*****JOSH AUERBACH, AUGUST 31, 1977*****
*   THE PACKAGE IMPLEMENTS THE STANDARD BPAM READING MACROS
*     OPEN
*     BLDL
*     FIND   (TYPES C AND D)
*     READ   (AND CHECK)
*     CLOSE
*   ALL ENTRIES ARE PL/I CALLABLE.  BPROPEN, BLDL, FINDC, AND FINDD
*   RETURN A FIXED BIN CONDITION CODE.  BPREAD RETURNS A POINTER TO THE
*   NEXT BLOCK, OR NULL AT EOD OR ERROR.  BPCLOSE RETURNS NO VALUE.
*   THE SYNTAX FOR EACH ROUTINE IS DOCUMENTED ABOVE ITS ENTRY POINT.
*   THE PACKAGE MAY BE USED ON A SINGLE FILE, USING THE
*   SUPPLIED CSECT STDDCB, OR STDDCB MAY BE COPIED
*   SEVERAL TIMES TO IMPLEMENT A MULTIPLE FILE CAPABILITY.
*   EXAMPLE1:  DCL STDDCB (56)PTR EXT;
*              I=BPROPEN(DDNAME,STDDCB);
*   EXAMPLE2:  DCL (STDDCB EXT,DCB1,DCB2)(56)PTR;
*              DCB1=STDDCB;
*              I=BPROPEN(DDNAME1,DCB1);
*              ....
*              DCB2=STDDCB;
*              I=BPROPEN(DDNAME2,PTR2);
*              I=BPROPEN(DDNAME3,STDDCB);
*   IF THE FORM OF EXAMPLE 2 IS USED, STDDCB SHOULD
*   NEVER BE USED AS AN ARGUMENT UNTIL AFTER IT HAS
*   FINISHED BEING USED AS A PROTOTYPE.  NOTE THAT
*   DCBS SHOULD NOT BE FREED OR REUSED UNTIL THEIR
*   ASSOCIATED FILES ARE CLOSED.  THE USER MAY ALTER DCB
*   FIELDS PRIOR TO OPENING (ASSUMING HE HAS A MAPPING DECLARATION
*   EQUIVALENT TO IHADCB).  NEVERTHELESS, THE USER SHOULD
*   BE AWARE THAT THE BPAM PACKAGE WILL ITSELF INSERT
*   VALUES FOR BUFNO, NCP AND EODAD, OVERRIDING HIS VALUES.
*   THE DCB ITSELF IS 88 BYTES (22 WORDS) LONG.  THE
*   NEXT 19 WORDS (76 BYTES) ARE FOR BOOKKEEPING
*   PURPOSES AS FOLLOWS:
*              WORD 23:  FULLWORD STATUS  0=NOT OPEN
*                                         4=OPEN, NOT POSITIONED
*                                         8=OPEN AND POSITIONED
*              WORD 24:  NEXT DECB CHAIN ELEMENT TO BE CHECKED
*              WORD 25:  NEXT BUFFER CHAIN ELEMENT TO BE FILLED
*              WORDS 26-41 CONTAIN TWO CIRCULAR CHAINS USED TO
*                      "DISPATCH" DECBS AND BUFFERS
*   THE NEXT 15 WORDS (60 BYTES) CONTAIN THE DECBS
*   (READ MACROS WITH 'S',MF=L) USED FOR READING THE FILE.
         EJECT
BPROPEN  PLIXDENT  ,
*   BPAMREADING OPEN ROUTINE, PL/I CALLABLE
*   SEE GENERAL DOCUMENTATION ABOVE
*   DCL BPROPEN ENTRY(CHAR(8),*)RETURNS(FIXED BIN);
*   DCL RETCODE FIXED BIN, /*THE RETURN CODE*/
*   DDNAME CHAR(8), /*DDNAME OF THE FILE TO BE OPENED*/
*   DCB (56)PTR; /*A DCB WITH A SPECIAL EXTENSION AREA
*   (SEE ABOVE). THE EXTERNAL NAME STDDCB
*   MAY BE USED AS AN ARGUMENT (ONCE
*   ONLY) OR AS A PROTOTYPE*/
*   RETCODE=BPROPEN(DDNAME,DCB);
*   RETCODE=0  SUCCESSFUL
*   RETCODE=4  NOT SUCCESSFUL: DCB ALREADY IN USE OR NOT VALID
         LM        R2,R4,0(R1)         GET ARGUMENTS
         L         R2,0(R2)            GET DDNAME ADDRESS,SKIPPING
         L         R3,0(R3)            GET DCB ADDRESS, SKIPPING PT
         USING     IHADCB,R3
         CLC       STATUS,=F'0'        DOES THIS SEEM TO BE AN UNOP
         BNE       ERR1
         MVC       DCBDDNAM,0(R2)      MOVE IN DDNAME
         LA        R5,EOD              GET EOD ROUTINE ADDRESS
         ST        R5,DCBEODAD         ...AND PUT IT IN DCB
         MVI       DCBNCP,3            NCP=3
         MVI       DCBBUFNO,5          BUFNO=5
         OPEN      ((R3))              OPEN THE DCB
         TM        DCBOFLGS,DCBOFOPN   SUCCESSFUL?
         BZ        ERR1
         EJECT
*   NOW WE BUILD BOOKKEEPING CHAINS IN IHADCB
         LA        R5,BUFCHN           GET HEAD OF BUFFER CHAIN
         ST        R5,NEXTBUF          STORE IN NEXTBUF LOCATION
         ST        R5,BUFCHN+36        AND ALSO IN LAST NODE OF
*                                      BUFFER TO MAKE IT CIRCULAR
         GETBUF    (R3),(R6)           GET A BUFFER
         ST        R6,BUFCHN           STORE IN CHAIN
         LA        R5,8(R5)            POINT TO NEXT NODE
         ST        R5,BUFCHN+4         STORE IN FORWARD PTR OF THIS
         GETBUF    (R3),(R6)           CONTINUE THE PROCESS UNTIL
         ST        R6,BUFCHN+8         BUFFER CHAIN IS BUILT
         LA        R5,8(R5)
         ST        R5,BUFCHN+12
         GETBUF    (R3),(R6)
         ST        R6,BUFCHN+16
         LA        R5,8(R5)
         ST        R5,BUFCHN+20
         GETBUF    (R3),(R6)
         ST        R6,BUFCHN+24
         LA        R5,8(R5)
         ST        R5,BUFCHN+28
         GETBUF    (R3),(R6)
         ST        R6,BUFCHN+32        DONE
         EJECT
*   NOW WE DO THE SAME THING WITH THE DECB CHAIN
         LA        R5,DECBCHN
         ST        R5,NEXTDECB
         ST        R5,DECBCHN+20
         LA        R6,DECB1
         ST        R6,DECBCHN
         LA        R5,8(R5)
         ST        R5,DECBCHN+4
         LA        R6,DECB2
         ST        R6,DECBCHN+8
         LA        R5,8(R5)
         ST        R5,DECBCHN+12
         LA        R6,DECB3
         ST        R6,DECBCHN+16
         SPACE
*   SET STATUS AND RETURN A HALFWORD ZERO
         MVC       STATUS,=F'4'
         XC        0(2,R4),0(R4)
         B         RETURN1
ERR1     MVC       0(2,R4),=H'4'       ERROR IN OPENING...RETURN A 4
RETURN1  PLIXEXT
*   END OF OPEN ROUTINE
         EJECT
BLDL     PLIXDENT  ,                   BLDL ROUTINE
*   THIS ROUTINE IS OPTIONAL, SINCE FINDD WILL FIND A
*   MEMBER WHO HASN'T BEEN BLDL'D.  IT IS MAXIMALLY
*   EFFICIENT WHEN MANY MEMBERS, NAMES KNOWN IN ADVANCE,
*   WILL EVENTUALLY BE READ
*   DCL BLDL ENTRY(*,*)RETURNS(FIXED BIN);
*   DCL RETCODE FIXED BIN,
*   1 LIST,
*   2 #ENTRIES FIXED BIN INIT(N),
*   2 LENGTH_OF_ENTRY FIXED BIN INIT(12+L),
*   2 ENTRY (N),
*   3 NAME CHAR(8), /*MEMBER NAME*/
*   3 TTRK,   /*USED AS ARGUMENT TO FINDC*/
*   4 TT FIXED BIN, /*TRACK NUMBER*/
*   4 R BIT(8) ALIGNED, /*RECORD NUMBER*/
*   4 K BIT(8) ALIGNED, /*CONCATENATION #*/
*   3 ANYTHINGELSE CHAR(L);/*GENERALLY NEEDED ONLY
*   FOR LOAD MODULES*/
*   DCL STDDCB (56)PTR EXT;
*   RETCODE=BLDL(LIST,STDDCB);
*   IN GENERAL, YOU SET N AND L AS APPROPRIATE,
*   FILL IN THE NAME FIELD WITH MEMBERS AS DESIRED.
*   YOU GET BACK TTRKS WHICH CAN THEN BE PROCESSED BY
*   FINDC.
*   RETCODE=0 SUCCESSFUL
*   RETCODE=4 ONE OR MORE MEMBERS NOT FOUND.  THE UNFOUND MEMBERS
*   HAVE R SET TO ZERO.
*   RETCODE=8 I/0 ERROR ON DIRECTORY
*   RETCODE=12 FILE NOT OPEN
         LM        R2,R4,0(R1)         GET ARGUMENTS
         L         R2,0(R2)            GET LIST ADDRESS
         L         R3,0(R3)            GET DCB ADDRESS
         CLC       STATUS,=F'4'        CHECK IF STATUS IS AT LEAST  4
         BL        ERR2
         BLDL      (R3),(R2)           ISSUE BLDL MACRO
         STH       R15,0(R4)           STORE RETURN CODE
         B         RETURN2
ERR2     MVC       0(2,R4),=H'12'      RETURN A HALFWORD 12, FILE NOT
*                                      FOUND
RETURN2  PLIXEXT
*   END OF BLDL ROUTINE
         EJECT
FINDC    PLIXDENT  ,                   FIND TYPE C ROUTINE, REQUIRES
*                                      BLDL TO BE CALLED FIRST
*   DCL FINDC ENTRY(*,*)RETURNS(FIXED BIN);
*   DCL RETCODE FIXED BIN,
*   1 LIST, /*SEE ABOVE, UNDER BLDL*/
*   .....
*   3 TTRK,
*   ......,
*   STDDCB (56)PTR EXT;
*   RETCODE=FINDC(TTRK(J),STDDCB);
*   RETCODE=0  SUCCESSFUL
*   RETCODE=4  FILE NOT OPEN
*   FINDC OR FINDD MUST BE ISSUED BEFORE ANY READING CAN
*   TAKE PLACE.  USE FINDD WHEN MEMBER NAMES CANNOT BE
*   EFFICIENTLY BLDL'D.
         LM        R2,R4,0(R1)         GET ARGUMENTS
         L         R2,0(R2)            GET TTRK ADDRESS
         L         R3,0(R3)            GET DCB ADDRESS
         L         R5,STATUS           GET STATUS WORD
         L         R6,LADDER(R5)       GET ADDRESS FROM "LADDER"
         BR        R6                  BRANCH TO APPROPRIATE PLACE
LADDER   DC        A(ERR3)             IF  0, FILE IS NOT OPEN
         DC        A(DOIT)             IF  4, WE ARE SET FOR FIND
         DC        A(CLEAR)            IF  8, WE MUST CLEAR FIRST
CLEAR    BAL       R7,CLEARIT          CALL CLEAR ROUTINE
DOIT     FIND      (R3),(R2),C         ISSUE FIND MACRO INSTRUCTION
         BAL       R7,STARTUP          CALL STARTUP ROUTINE
         MVC       STATUS,=F'8'        SET STATUS TO INDICATE ACTION
         XC        0(2,R4),0(R4)       RETURN A ZERO
         B         RETURN3
ERR3     MVC       0(2,R4),=H'4'       RETURN A FOUR IF ERROR
RETURN3  PLIXEXT
*   END OF FIND TYPE C ROUTINE
         EJECT
FINDD    PLIXDENT  ,                   FIND TYPE D ROUTINE, DOES NOT
*                                      REQUIRE BLDL TO BE CALLED FIRST
*   MUST BE CALLED (OR FINDC, ALTERNATIVELY) BEFORE DOING
*   ANY READING
*   DCL FINDD ENTRY(CHAR(8),*)RETURNS(FIXED BIN);
*   DCL RETCODE FIXED BIN,
*   MEMBERNAME CHAR(8),
*   DCB (56)PTR;/*SEE ABOVE*/
*   RETCODE=FINDD(MEMBERNAME,DCB);
*   VALUES OF RETCODE ARE AS FOR BLDL
         LM        R2,R4,0(R1)         GET ARGUMENTS
         L         R2,0(R2)            POINT TO MEMBERNAME
         L         R3,0(R3)            POINT TO DCB
         L         R5,STATUS           THE FOLLOWING SECTION MIMICS
*                                      FINDC
         L         R6,LADDER2(R5)
         BR        R6
LADDER2  DC        A(ERR4)
         DC        A(DOIT2)
         DC        A(CLEAR2)
CLEAR2   BAL       R7,CLEARIT
DOIT2    FIND      (R3),(R2),D         ISSUE TYPE D FIND INSTRUCTION
         STH       R15,0(R4)           SAVE RETURN CODE
         BAL       R7,STARTUP          CALL STARTUP ROUTINE
         MVC       STATUS,=F'8'        SET STATUS TO INDICATE ACTION
         B         RETURN4
ERR4     MVC       0(2,R4),=H'12'      RETURN A 12 IF FILE NOT OPEN
RETURN4  PLIXEXT
*   END OF FIND TYPE D ROUTINE
         EJECT
CLEARIT  EQU       *                   ROUTINE USED BY BOTH FIND
*                                      ROUTINES TO CLEAR OUTSTANDING
*                                      READS ON THE PREVIOUS MEMBER
         LA        R5,THISEOD          GET LOCAL EOD ADDRESS...
         ST        R5,REALEOD          ...AND STORE IT IN THE SPECIFIED
*                                      LOCATION OF THE GEN. EOD ROUTINE
         L         R5,NEXTDECB         GET DECB CHAIN ELEMENT
         L         R6,0(R5)            GET DECB
         CHECK     (R6)                CHECK IT
         L         R5,4(R5)            ADVANCE ON DECB CHAIN
         L         R6,0(R5)            GET DECB ADDRESS,
         CHECK     (R6)                CHECK IT
         L         R5,4(R5)            ONCE AGAIN..
         L         R6,0(R5)
         CHECK     (R6)
THISEOD  EQU       *                   WE MIGHT GET HERE EITHER BY
*                                      CHECKING 3 DECBS OR FROM EOD. IT
*                                      DOESN'T MATTER:  ALL WE WANT IS
*                                      CLEAR UP OLD BUSINESS.
         BR        R7                  RETURN TO CALLER
         SPACE
STARTUP  EQU       *                   ROUTINE USED BY FIND ROUTINES
*                                      TO PRIME THE SYSTEM BY STARTING
*                                      3 CHANNEL PROGRAMS TO BE CHECKED
*                                      LATER
         L         R5,NEXTDECB         GET DECB CHAIN ELEMENT
         L         R6,0(R5)            GET ADDRESS OF DECB
         L         R8,NEXTBUF          GET BUFFER CHAIN ELEMENT
         L         R9,0(R8)            GET ADDRESS OF BUFFER
         READ      (R6),SF,(R3),(R9),'S',MF=E ISSUE A READ
         L         R5,4(R5)            FORWARD CHAIN ON DECB
         L         R8,4(R8)            DITTO ON BUFFER
         L         R6,0(R5)            GET ASSOCIATED DECB ADDRESS
         L         R9,0(R8)            DITTO FOR BUFFER
         READ      (R6),SF,(R3),(R9),'S',MF=E ISSUE ANOTHER READ
         L         R5,4(R5)            ONCE MORE
         L         R8,4(R8)
         L         R6,0(R5)
         L         R9,0(R8)
         READ      (R6),SF,(R3),(R9),'S',MF=E ISSUE FINAL READ
         L         R8,4(R8)            ONE MORE FORWARD CHAIN TO GET
*                                      A CLEAR BUFFER
         ST        R8,NEXTBUF
         BR        R7                  RETURN TO CALLER
         SPACE
EOD      EQU       *                   GENERALIZED EOD ROUTINE WHICH
*                                      RETURNS TO LOCATION SPECIFIED
*                                      IN REALEOD
         MVC       STATUS,=F'4'        SET STATUS BACK TO 4
         L         R5,REALEOD
         BR        R5                  GO WHERE YOU SPOSED TO GO
REALEOD  DC        A(0)
         EJECT
BPREAD   PLIXDENT  ,                   READ ROUTINE (INCORPORATING
*                                      CHECK MACROS).
*   BPROPEN AND BLDL-FINDC OR FINDD MUST BE CALLED FIRST
*   DCL BPREAD ENTRY(FIXED BIN,*)RETURNS(PTR);
*   DCL BLOCKADDR PTR,
*   LEN FIXED BIN,
*   DCB (56)PTR;/*SEE ABOVE*/
*   BLOCKADDR=BPREAD(LEN,DCB);
*   BLOCKADDR WILL POINT TO THE BLOCK JUST READ, OR WILL BE
*   NULL ON EOD OR ERROR.
*   THE VALUE OF LEN IS IMMATERIAL ON ENTRY, BUT WILL BE SET BY
*   THE FUNCTION TO INDICATE THE LENGTH OF THE BLOCK READ
         LM        R2,R4,0(R1)         GET ARGUMENTS
         L         R3,0(R3)            GET DCB ADDRESS
         CLC       STATUS,=F'8'        SEE IF WE ARE READY TO READ
         BNE       ERR5
         LA        R5,ERR5             GET LOCAL ERROR ADDRESS
         ST        R5,REALEOD          STORE IT IN GEN. EOD ROUTINE
         L         R5,NEXTDECB         NOW PICK UP DECB CHAIN ELEMENT
         L         R6,0(R5)            AND POINT TO ASSOCIATED DECB
         CHECK     (R6)                CHECK THE DECB
         L         R5,4(R5)            ADVANCE ON DECB CHAIN
         ST        R5,NEXTDECB         AND SAVE FOR NEXT TIME
         MVC       0(4,R4),12(R6)      MOVE ADDRESS OF THE BUFFER WHICH
*                                      WAS ASSOCIATED WITH THE READ NOW
*                                      BEING CHECKED TO THE RETURN
*                                      AREA
         L         R5,16(R6)           GET ADDRESS OF IOB ASSOCIATED
*                                      WITH THIS DECB
         LH        R7,DCBBLKSI         GET THE BLOCKSIZE FOR THIS DCB
         SH        R7,14(R5)           SUBTRACT RESIDUAL COUNT (FROM
*                                      IOB) FROM THE BLOCK SIZE
*                                      TO OBTAIN THE LENGTH OF THE
*                                      BLOCK NOW BEING PROCESSED.
         STH       R7,0(R2)            STORE RESULT FOR CALLER
         L         R5,NEXTBUF          NOW GET NEXT BUFFER CHAIN ELEMNT
         L         R7,0(R5)            AND ASSOCIATED BUFFER
         READ      (R6),SF,(R3),(R7),'S',MF=E READ SAME DECB W NEW BUF
         L         R5,4(R5)            ADVANCE ON BUFFER CHAIN
         ST        R5,NEXTBUF          AND STORE
         B         RETURN5
ERR5     MVC       0(4,R4),=X'FF000000' RETURN NULL POINTER
RETURN5  PLIXEXT
*   END OF BPREAD ROUTINE
         EJECT
BPCLOSE  PLIXDENT      ,               CLOSE ROUTINE
*   DCL BPCLOSE ENTRY(*);
*   DCL DCB(56)PTR;
*   CALL BPCLOSE(DCB);
         L         R3,0(R1)            GET ARGUMENT
         L         R3,0(R3)            GET DCB ADDRESS
         CLOSE     ((R3))              CLOSE IT
         FREEPOOL  (R3)                FREE ASSOCIATED BUFFER POOL
         XC        STATUS,STATUS       SET STATUS BACK TO ZERO
         PLIXEXT       ,           RETURN
*   END OF CLOSE ROUTINE
         LTORG
*   END OF BPAM PACKAGE CSECT
         EJECT
STDDCB   CSECT
*   STANDARD DCB WITH SPECIAL APPENDAGE FOR USE BY PL/I
*   CALLABLE BPAM PACKAGE
         DCB       DSORG=PO,MACRF=R
         DC        F'0'
         DS        18F                 FOR BOOKKEEPING,MAPPED BY
*                                      ACCOMPANING DSECT IHADCB
         READ      PROTO1,SF,MF=L      DECBS
         READ      PROTO2,SF,MF=L
         READ      PROTO3,SF,MF=L
         EJECT
*   HERE'S A DSECT TO MAP THE ABOVE
*   IT IS SIMPLY THE IHADCB DSECT GENERATED BY THE DCBD
*   MACRO INSTRUCTION, WITH SOME ADDITIONAL AREAS TACKED ON
         DCBD      DSORG=PO,DEVD=DA
STATUS   DS        1F                  FOR COMMUNICATION BETWEEN
*                                      ENTRIES.  STATES STATUS OF THIS
*                                      THIS DCB.  0=NOT OPEN
*                                      4=OPEN, NOT POSITIONED
*                                      8=OPEN AND POSITIONED
NEXTDECB DS        1F                  ADDRESS OF NEXT-TO-BE CHECKED
*                                      DECB CHAIN ELEMENT
NEXTBUF  DS        1F                  ADDRESS OF NEXT-TO-BE USED
*                                      BUFFER CHAIN ELEMENT
DECBCHN  DS        6F                  WILL HOLD A CIRCULAR CHAIN
*                                      OF DECB ADDRESSES
BUFCHN   DS        10F                 WILL HOLD A CIRCULAR CHAIN
*                                      OF BUFFER ADDRESSES
         READ      DECB1,SF,MF=L       MAP DECBS IN THE CSECT
         READ      DECB2,SF,MF=L
         READ      DECB3,SF,MF=L
         END
