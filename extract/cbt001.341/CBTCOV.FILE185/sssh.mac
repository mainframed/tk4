YUSSH    TITLE 'SUBSYSTEM SVC SCREEN HANDLER'
*************************************************************
*                                                           *
* MODULE NAME - APLYUSSH                                    *
*                                                           *
* DESCRIPTIVE NAME - SUBSYSTEM SVC SCREEN HANDLER           *
*                                                           *
* COPYRIGHT - YALE UNIVERSITY 1979                          *
*                                                           *
* STATUS - RELEASE 4, MODIFICATION LEVEL 0                  *
*                                                           *
* FUNCTION - MANAGE INDEPENDANT REQUESTS FOR SVC SCREENING  *
*                                                           *
* PROCESSER - OS/VS ASSEMBLER                               *
*                                                           *
* TYPE - SVC                                                *
*                                                           *
* ATTRIBUTES - REENTRANT, ETC.                              *
*                                                           *
* NOTES - THIS MODULE WAS WRITTEN INDEPENDANTLY OF          *
*         VSAPL/TSO. IT CAN, WITHOUT MODIFICATION, BE       *
*         INSTALLED AS A USER SVC FOR THE PURPOSE OF        *
*         HANDLING MULTIPLE AND UNRELATED SVC SCREENING     *
*         REQUESTS FROM ARBITRARY PROGRAMS.                 *
*                                                           *
*************************************************************
         EJECT ,
APLYUSSH CSECT ,
         SPACE 3
         AIF   ('&SYSPARM' EQ 'DOC').PRTALL
         PRINT NOGEN
.PRTALL  ANOP
         SPACE 3
         IHAPSA ,                  PREFIXED STORAGE AREA               *
                                   BASE IS PSA
         USING PSA,0               DECLARE PSA BASE
         SPACE 3
         CVT   DSECT=YES,LIST=YES  COMMUNICATIONS VECTOR TABLE         *
                                   BASE IS CVTMAP
         SPACE 3
         IHASCVT DSECT=YES,LIST=YES SECONDARY COMMUNICATIONS VECTOR    *
                                   TABLE                               *
                                   BASE IS SCVTSECT
         SPACE 3
         IHALPDE ,                 LINK PACK DIRECTORY ENTRY           *
                                   BASE IS LPDE
         SPACE 3
         IHASVC ,                  SVC TABLE ENTRY                     *
                                   BASE IS IHASVC
         SPACE 3
         IHAASCB ,                 ADDRESS SPACE CONTROL BLOCK         *
                                   BASE IS ASCB
         SPACE 3
         IHAASXB ,                 ADDRESS SPACE EXTENSION BLOCK       *
                                   BASE IS ASXB
         SPACE 3
         IKJTCB LIST=YES           TASK CONTROL BLOCK                  *
                                   ROOT BASE IS TCB
         SPACE 3
         IHARB ,                   REQUEST BLOCK                       *
                                   ROOT BASE IS RBBASIC                *
                                   PREFIX BASE IS RBPRFX
         SPACE 3
         IHASCB ,                  STAE CONTROL BLOCK                  *
                                   BASE IS SCB
         SPACE 3
         PRINT ON,GEN,NODATA
         EJECT ,
         $REGS R                   STANDARD REGISTER NAMES
         SPACE 1
CVTREG   EQU   R3                  CVT POINTER
TCBREG   EQU   R4                  TCB POINTER
RBREG    EQU   R5                  RB POINTER
BASEREG  EQU   R6                  BASE REGISTER
ASCBREG  EQU   R7                  ASCB POINTER
         SPACE 1
SVCSYNCH EQU   12                  SYNCH
SVCATACH EQU   42                  ATTACH
         EJECT ,
*************************************************************
*                                                           *
*        SSSIQE -- INTERCEPT QUEUE ELEMENT                  *
*                                                           *
*************************************************************
         SPACE 1
SSSIQE   DSECT ,
SSSQLINK DS    A                   CHAIN OF DEFINED SSSIQE'S
SSSQALNK DS    A                   CHAIN OF SSSIQE'S FOR CURRENTLY
*                                  ENTERED INTERCEPT ROUTINES
*                                  HI BYTE = X'FF' FOR LAST ACTIVE IQE
SSSQSVC# DS    FL1                 ASSOCIATED SVC NUMBER
SSSQPRIO DS    FL1                 INTERCEPT'S PRIORITY. DEEPEST
*                                  INTERCEPT IS PRIO 255.
SSSQFLAG DS    B                   FLAG BYTE
SSSQFAUT EQU   B'10000000'         THIS INTERCEPT WAS CREATED AT THE
*                                  REQUEST OF AN AUTHORIZED CALLER.
SSSQFSUB EQU   B'01000000'         THIS INTERCEPT IS TO BE PROPAGATED
*                                  TO ANY SUBTASKS THAT MAY BE CREATED
*                                  DURING ITS LIFE.
SSSQFCAN EQU   B'00100000'         INTERCEPT HAS BEEN CANCELLED    SBB
*                                  AND IS TO BE DEQUEUED WHEN NO   SBB
*                                  LONGER ACTIVE.                  SBB
SSSQIADR DS    A                   ADDRESS OF THE INTERCEPT ROUTINE
SSSQSID  DS    CL8                 ID OF THE "SCREEN" OWNING THIS
*                                  INTERCEPT
SSSQIID  DS    CL8                 ID OF THIS INTERCEPT
SSSQSDA  DS    A                   CALLER PROVIDED VALUE ASSOCIATED
*                                  WITH THIS INTERCEPT ROUTINE'S OWNING
*                                  SCREEN
SSSQIDA  DS    A                   CALLER PROVIDED VALUE ASSOCIATED
*                                  WITH THIS INTERCEPT ROUTINE
SSSQSAVE DS    A                   SAVE AREA USED BY SSSROUTR
SSSQEND  DS    0D                  END OF SSSIQE
SSSQLEN  EQU   SSSQEND-SSSIQE      LENGTH OF IQE
         EJECT ,
*************************************************************
*                                                           *
*        SSSDATA -- SCREEN DATA AREA                        *
*                                                           *
*************************************************************
         SPACE 1
SSSDATA  DSECT ,
SSSDRADR DC    A(SSSROUTR)         ROUTER ROUTINE'S ADDRESS
SSSDTYPE DC    AL1(SVCTP34,0)      ROUTER IS TO RUN AS A TYPE 3-4 SVC.
SSSDLOKS DC    AL1(SVCLL,0)        ROUTER IS TO BE ENTERED HOLDING THE
*                                  LOCAL LOCK.
SSSDMASK DC    256B'10000000'      INITIAL SCREEN INTERCEPTS NO SVC'S.
SSSDMID  DC    CL8'SSSHHHHH'       THE SCREEN'S MASTER ID
SSSDQHED DS    A                   HEAD OF QUEUE OF CURRENTLY DEFINED
*                                  INTERCEPT ROUTINES
SSSDACTV DS    A                   HEAD OF QUEUE OF CURRENTLY ENTERED
*                                  INTERCEPT ROUTINES
         SPACE 3
         DS    0D                  ALIGNMENT
SSSDIQE1 DS    XL(SSSQLEN)         BUILT IN HQE FOR THE ROUTER
*                                  ROUTINE'S ATTACH SVC INTERCEPT
SSSDEND  DS    0D                  END OF DATA AREA
SSSDLEN  EQU   SSSDEND-SSSDATA     LENGTH OF DATA AREA
         EJECT ,
         SSSHSPE ,
         EJECT ,
         SSSHIPE ,
         EJECT ,
*************************************************************
*                                                           *
*        LOCAL DATA AREA USED BY SSSSVC. THIS AREA IS       *
*        MAPPED INTO RBEXSAVE.                              *
*                                                           *
*************************************************************
         SPACE 1
RBPRFX   DSECT ,                   RESUME RB MAP
LDA      EQU   RBEXSAVE,L'RBEXSAVE
         ORG   LDA                 RELOCATE
LDAR14SV DS    A                 × SAVE AREA (R14)
LDACC    DS    F                 × SSSSVC COMPLETION CODE (R15)
LDAREASN DS    F                 V SSSSVC REASON CODE (R0)
LDATCBHD DS    A                   THIS TCB ADDRESS LIMITS THE SEARCH
*                                  OF SUBTASK QUEUES.
LDASETCR DS    A                   SAVE AREA (SETCREEN)
LDAIQEDE DS    A                   SAVE AREA (IQEDELET)
LDAFLAG  DS    B                   FLAG BYTE
LDAFAUTH EQU   B'10000000'         THE CALLER OF SSSSVC IS AUTHORIZED.
LDAPFLAG DS    B                   WORK AREA FOR SSSHFLAG
LDAEND   EQU   *                   END OF LDA
LDALEN   EQU   LDAEND-LDA          LENGTH OF LDA
         $TEST SIZE=(LDALEN,LE,L'LDA)
         EJECT ,
*************************************************************
*                                                           *
*        ATTACH SVC PARAMETER LIST                          *
*                                                           *
*************************************************************
         SPACE 1
ATTPLIST DSECT ,                   ATTACH PARAMETER LIST
         DS    XL8                 8 BYTES IRRELEVANT TO OUR PURPOSES
ATTPFLG1 DS    X                   FIRST FLAG BYTE
ATTPLNGP EQU   B'00001000'         FIELD ATTPLNG PRESENT (60 BYTE LIST)
         DS    XL3                 3 BYTES I. T. O. P.
ATTPGSPF DS    X                   GSP FLAG
ATTPGSPL EQU   B'00000001'         GSP VALUE IS A LIST
ATTPGSP  DS    AL3                 GSP VALUE
ATTPSSPF DS    X                   SHSP FLAG
ATTPSSPL EQU   B'00000001'         SHSP VALUE IS A LIST
ATTPSHSP DS    AL3                 SHSP VALUE
ATTPFLG2 DS    X                   SECOND FLAG BYTE
ATTPVS2  EQU   B'00100010'         VS2 TYPE LIST, AT LEAST 52 BYTES
         DS    XL6                 6 BYTES ITOP
ATTPFLG3 DS    X                   THIRD FLAG BYTE
ATTPNDSP EQU   B'10000000'         DISP=NO
ATTPJSCB EQU   B'01000000'         JSCB ADDRESS SUPPLIED
ATTPKEY0 EQU   B'00010000'         TASK IS KEY 0
ATTPSZNO EQU   B'00001000'         SZERO=NO
ATTPNSAV EQU   B'00000100'         NO SAVE AREA
ATTPJSTC EQU   B'00000010'         JOB STEP TCB
ATTPSUPV EQU   B'00000001'         SUPERVISOR STATE
         DS    XL8                 8 BYTES ITOP
ATTPL36  EQU   *-ATTPLIST          36-BYTE PLIST
         SPACE 1
ATTPAUTH DS    XL5                 RESERVED, JSCB, TASKID
         DS    XL4                 4  BYTES ITOP
ATTPESTA DS    AL3                 ESTAI EXIT ADDRESS
         DS    XL4                 4 BYTES ITOP
ATTPL52  EQU   *-ATTPLIST          52-BYTE PLIST
         SPACE 1
ATTPFLG4 DS    X                   FOURTH FLAG BYTE
ATTPNSPF EQU   B'10000000'         NSHSPV FLAG
ATTPRAPF EQU   B'01000000'         RSAPF
ATTPLNGH DS    AL3                 LENGTH OF PLIST
ATTPNSHP DS    A                   NSHSPV VALUE
ATTPL60  EQU   *-ATTPLIST          60-BYTE PLIST
         SPACE 1
         DS    0D                  TRAILING DOUBLE WORD ALIGNMENT
ATTPLEN  EQU   *-ATTPLIST          MAXIMUM CURRENT LENGTH OF LIST
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- SSSSVC - SCREEN CREATIO*
               N AND DELETION'
APLYUSSH CSECT ,
*************************************************************
*                                                           *
*        SSSSVC -- THIS SVC IS CALLED TO CREATE OR DELETE   *
*        SVC SUB-SCREENS AND THEIR ASSOCIATED INTERCEPT     *
*        ROUTINES.                                          *
*                                                           *
*        INPUTS:                                            *
*              - NO LOCKS SHOULD BE HELD.                   *
*              - R1 POINTS TO A STANDARD PARAMETER LIST.    *
*              - R4 POINTS TO THE CURRENT TCB.              *
*              - R5 POINTS TO THE ROOT (RBBASIC) OF THE     *
*                SVRB UNDER WHICH THIS SVC IS RUNNING.      *
*              - R6 POINTS TO THIS SVC'S ENTRY POINT        *
*                (SSSSVC).                                  *
*              - R7 POINTS TO THIS ADDRESS SPACE'S ASCB.    *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*        THE PARAMETER LIST CONTAINS ONE (FOR SUB-SCREEN    *
*        DELETION) OR TWO-OR-MORE (FOR SUB-SCREEN CREATION  *
*        OR MODIFICATION) 4-BYTE ENTRIES. THE FIRST ENTRY   *
*        POINTS TO AN SSSHSPE. ALL ADDITIONAL ENTRIES (IF   *
*        ANY) POINT TO SSSHIPE'S. THE LAST ENTRY IS         *
*        IDENTIFIED BY A 1 BIT IN THE HI-ORDER BIT          *
*        POSITION. ZEROED POINTERS IMPLY OMITTED SSSHIPE'S. *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - R14 IS RESTORED.                           *
*              - R15 CONTAINS A COMPLETION CODE.            *
*              - R0 CONTAINS A REASON CODE.                 *
*              - ALL OTHER REGISTERS ARE NOT RESTORED.      *
*              - THE ACTIONS REQUESTED BY THE SSSHSPE AND   *
*              - SSSIQE'S ARE, IF POSSIBLE, PERFORMED.      *
*                                                           *
*        THE FOLLOWING COMPLETION-REASON CODES ARE DEFINED. *
*                                                           *
*        R15  R0  EXPLANATION                               *
*        0    0   ALL FUNCTIONS PERFORMED WITHOUT ERROR.    *
*        4    0   A PARTICULAR INTERCEPT REQUEST FAILED FOR *
*                 ONE OR MORE TCB'S. IF AN INTERCEPT WAS TO *
*                 BE DELETED, THEN IT WAS EITHER NOT FOUND  *
*                 OR THE CALLER WAS NOT AUTHORIZED TO       *
*                 DELETE IT.                            IF  *
*                 AN INTERCEPT WAS TO BE ADDED, THEN IT WAS *
*                 FOUND ALREADY TO EXIST (I.E. AN SSSIQE    *
*                 WITH THE SAME SVC#, HID, AND IID WAS      *
*                 FOUND AND THE SSSQFCAN WAS OFF.)          *
*        8    0   A PARTICULAR INTERCEPT REQUEST FAILED. A  *
*                 MAXIMUM NUMBER OF INTERCEPTS ALREADY      *
*                 EXISTS FOR THE INDICATED SVC. FOR SVC 12  *
*                 (SYNCH) THE MAXIMUM IS ZERO. FOR ALL      *
*                 OTHER SVC'S, THE MAXIMUM NUMBER IS 128.   *
*        8    4   A PARTICULAR INTERCEPT REQUEST FAILED. AN *
*                 INTERCEPT FOR THE SAME SVC WITH THE SAME  *
*                 OR A HIGHER PRIORITY WAS ACTIVE.          *
*        12   4   THE ENTIRE REQUEST FAILED FOR A           *
*                 PARTICULAR TCB. SSSHFTCB WAS ON AND THE   *
*                 ADDRESS POINTED TO BY SSSHTCB WAS FOUND   *
*                 NOT TO CONTAIN A TCB.                     *
*        12   8   THE ENTIRE REQUEST FAILED FOR A           *
*                 PARTICULAR TCB. A MASTER SVC SCREEN WAS   *
*                 FOUND THAT WAS NOT THE SCREEN MAINTAINED  *
*                 BY SSSH.                                  *
*        16   0   THE ENTIRE REQUEST HAS FAILED FOR ALL     *
*                 TCB'S. SSSHFLAG CONTAINED ZEROS FOR ALL   *
*                 OF SSSHFALL, SSSHFTCB, AND SSSHFCRN.      *
*        16   4   THE ENTIRE REQUEST HAS FAILED FOR ALL     *
*                 TCB'S. SSSHSID CONTAINED THE MASTER ID    *
*                 (SSSHHHHH).                               *
*        16   8   THE ENTIRE REQUEST HAS FAILED FOR ALL     *
*                 TCB'S. AN SSSHSPE HAS NOT BEEN GIVEN BY   *
*                 THE CALLER.                               *
*                                                           *
*************************************************************
         SPACE 1
         USING PSA,0
         USING TCB,TCBREG
         USING SSSSVC,BASEREG
         USING ASCB,ASCBREG
         ENTRY SSSSVC
         SPACE 3
*************************************************************
*        INITIALIZE THE LOCAL DATA AREA AND ESTABLISH       *
*        FESTAE PROTECTION.                                 *
*************************************************************
         SPACE 1
SSSSVC   SH    RBREG,=Y(RBBASIC-RBPRFX) --> RB PREFIX
         USING RBPRFX,RBREG        DCL RB BASE
         XC    LDA(LDALEN),LDA     CLEAR THE LOCAL DATA AREA
         ST    R14,LDAR14SV        SAVE RETURN ADDRESS
         XC    RBFEPARM(24),RBFEPARM CLEAR FE PARMS
         B     NOTRAP1             SKIP DBC                        SBB
*************************************************************      SBB
*        DEBUGGING CODE TO SET UPDBC AS ESTAE               *      SBB
*************************************************************      SBB
         LR    R2,R6               SAVE BASE REG                   SBB
         LM    R0,R1,=CL8'DBC'     LOAD NAME                       SBB
         L     R3,CVTPTR           POINT TO CVT                    SBB
         L     R15,CVTLPDSR-CVT(,R3) EP TO IEAVVMSR                SBB
         BALR  R14,R15             FIND DBC                        SBB
* NB: THIS ROUTINE CLOBBERS REGS 0,6,8 AND 9
         B     DBCFND1-*(,R14)     GOTIT                           SBB
         LR    R6,R2               RESTORE BASE                    SBB
         B     NOTRAP1             MISSED IT                       SBB
DBCFND1  EQU   *                   SBB
         LR    R15,R0              SAVE LPDE ADDR                  SBB
         LR    R6,R2               RESTORE BASE                    SBB
         L     R2,LPDENTP-LPDE(,R15) POINT TO EP                   SBB
         FESTAE EXITADR=(R2),RBADDR=(RBREG),TCBADDR=(TCBREG)
         B     NOTRAP1             ZAPPABLE GATE
         DC    X'00DEAD',AL1(14),C'SSSSVC ENTERED' CALL DEBUGGER
NOTRAP1  DS    0H
         SPACE 3
*************************************************************
*        GET THE LOCAL LOCK.                                *
*************************************************************
         SPACE 1
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=MISC
         SPACE 3
*************************************************************
*        VALIDATE THE SSSHSPE.                              *
*************************************************************
         SPACE 1
         LA    R0,8                ASSUMED REASON CODE
         ICM   R8,7,RBGRS1+1       PLIST POINTER EXIST?
         BZ    SPEFAIL             NO, 16-8 ERROR
         ICM   R8,7,1(R8)          YES, SSSHSPE POINTER EXIST?
         BZ    SPEFAIL             NO, 16-8 ERROR
         USING SSSHSPE,R8          YES, DCL SSSHSPE BASE
         LA    R0,4                ASSUMED REASON CODE
         CLC   SSSHSID,MASTERID    SID=SSSH?
         BE    SPEFAIL             YES, 16-4 ERROR
         TM    SSSHFLAG,SSSHFCRN+SSSHFTCB+SSSHFALL NO, TCB SELECTION
*                                  GIVEN?
         BNZ   SPEOK               YES, PROCEED
         SR    R0,R0               NO, 16-0 ERROR
         SPACE 1
SPEFAIL  LA    R15,16              COMPLETION CODE
         BAL   R14,SETRC           SET COMPLETION-REASON CODE
         B     SVCRETRN            GO EXIT
SPEOK    EQU   *
         SPACE 3
*************************************************************
*        DETERMINE WHETHER OR NOT THE CALLER IS AUTHORIZED. *
*        THIS EVENTUALLY AFFECTS THE INVIRONMENT UNDER      *
*        WHICH THE INTERCEPT ROUTINES NOW BEING DEFINED ARE *
*        GIVEN CONTROL.                                     *
*************************************************************
         SPACE 1
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=2,BRANCH=YES
         LTR   R15,R15             IS CALLER AUTHORIZED?
         BNZ   NAUTH               NO, SKIP
         OI    LDAFLAG,LDAFAUTH    YES, REMEMBER
NAUTH    EQU   *
         SPACE 3
*************************************************************
*        ANALYZE SSSHFLAG TO DETERMINE FOR WHICH TCB'S      *
*        SCREENS ARE TO BE CREATED, DELETED, OR MODIFIED.   *
*************************************************************
         SPACE 1
         MVC   LDAPFLAG,SSSHFLAG   COPY FLAG TO WORK AREA
         TM    LDAPFLAG,SSSHFALL   ALL TCB'S TO BE PROCESSED?
         BZ    TNOTALL             NO, SKIP
         NI    LDAPFLAG,255-SSSHFTCB YES, CLEAR POSSIBLE REDUNDANCY
         L     TCBREG,ASCBASXB     --> ASXB
         L     TCBREG,ASXBFTCB-ASXB(,TCBREG) --> 1ST (RCT'S) TCB
         ST    TCBREG,LDATCBHD     SET SUBTASK SEARCH LIMIT
         B     TCBSLOOP            GO PROCESS ALL TCB'S FOLLOWING THE
*                                  RCT'S TCB.
         SPACE 1
TNOTALL  ST    TCBREG,LDATCBHD     ASSUME THAT THE SUBTASK SEARCH (IF
*                                  ANY) IS TO BE LIMITED BY THE
*                                  CURRENT TCB.
         TM    LDAPFLAG,SSSHFCRN   PROCESS THE CURRENT TCB?
         BNZ   TCBSTART            YES, PROCEED
         SPACE 1
TYES1TCB NI    LDAPFLAG,255-SSSHFTCB NO, PROCESS (STARTING WITH) THE
*                                  TCB POINTED TO BY SSSHTCB. CLEAR
*                                  FOR LOOP CONTROL.
         L     TCBREG,ASCBASXB     --> ASXB
         L     TCBREG,ASXBFTCB-ASXB(,TCBREG) --> RCT'S TCB
         ST    TCBREG,LDATCBHD     STORE SUBTASK QUEUE SEARCH LIMIT
         SPACE 1
*        SCAN ALL TCB'S TO SEE IF SSSHTCB REALLY DOES POINT TO A VALID
*        TCB.
TCB1SRCH BAL   R14,NEXTTCB         --> NEXT TCB. HAVE ALL TCB'S BELOW
*                                  LDATCBHD% BEEN SEARCHED?
         BZ    TCB1NFND            YES, 12-4 ERROR
         C     TCBREG,SSSHTCB      NO, IS THIS THE RIGHT TCB?
         BNE   TCB1SRCH            NO, KEEP SEARCHING
         ST    TCBREG,LDATCBHD     YES, LIMIT POSSIBLE SUBTASK QUEUE
*                                  SEARCH.
         B     TCBSTART            GO PROCESS (STARTING WITH) SSSHTCB%.
         SPACE 1
TCB1NFND LA    R15,12              LOAD COMPLETION CODE
         LA    R0,4                LOAD REASON CODE
         BAL   R14,SETRC           SET THEM
         B     TCBSDONE            DONE HERE
         SPACE 3
*************************************************************
*        PROCESS AT LEAST THE INDICATED TCB AND POSSIBLY    *
*        ALL OF ITS SUBTASK TCB'S.                          *
*************************************************************
         SPACE 1
TCBSLOOP BAL   R14,NEXTTCB         --> NEXT TCB. ALL TCB'S BELOW
*                                  LDATCBHD% DONE?
         BZ    TRY1TCB             YES, DONE HERE
TCBSTART C     TCBREG,SSSHTCB      NO, SAME AS SSSTCB%?
         BNE   TNOT1TCB            NO, PROCEED
         NI    LDAPFLAG,255-SSSHFTCB YES, PREVENT REDUNDANT ACTION
TNOT1TCB BAL   R14,SETCREEN        PROCESS THIS TCB
         TM    LDAPFLAG,SSSHFALL+SSSHFSUB PROCESS SUBTASK TCB'S?
         BNZ   TCBSLOOP            YES, LOOP TO DO SO
TRY1TCB  TM    LDAPFLAG,SSSHFTCB   NO, STILL NEED TO DO SSSHTCB%?
         BNZ   TYES1TCB            YES, LOOP TO DO SO
         DROP  R8                  RELEASE SSSHSPE BASE
TCBSDONE EQU   *
         SPACE 3
*************************************************************
*        RETURN TO CALLER.                                  *
*************************************************************
         SPACE 1
SVCRETRN LM    R14,R0,LDAR14SV     RESTORE R14; LOAD CC & RC
         BR    R14                 RETURN TO CALLER
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- SETPRC, SETRC - SAVE CO*
               MPLETION AND REASON CODES'
*************************************************************
*                                                           *
*        SETPRC -- THIS ROUTINE STORES A COMPLETION CODE    *
*        INTO THE SSSHCC FIELD OF AN SSSHIPE. CONTROL THEN  *
*        PASSES TO SETRC.                                   *
*                                                           *
*        SETRC -- THIS ROUTINE CHECKS FOR AND SAVES THE     *
*        HIGHEST COMPLETION-REASON CODE COMBINATION         *
*        RECEIVED SO FAR.                                   *
*                                                           *
*        INPUTS:                                            *
*              - R15 CONTAINS A COMPLETION CODE.            *
*              - R0 CONTAINS A REASON CODE.                 *
*              - R11 POINTS TO AN SSSHIPE (SETPRC ONLY).    *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - THE CODES ARE SAVED AS APROPRIATE.         *
*              - NO REGISTERS ARE ALTERED.                  *
*                                                           *
*************************************************************
         SPACE 1
         USING SSSHIPE,R11         DCL SSSHIPE BASE
SETPRC   CLM   R15,1,SSSHCC        HIGHEST CC SO FAR?
         BNH   SETRC               NO, SKIP
         STC   R15,SSSHCC          YES, SAVE
         DROP  R11                 RELEASE SSSHIPE BASE
         SPACE 3
SETRC    C     R15,LDACC           HIGHEST CC SO FAR?
         BLR   R14                 NO, RETURN TO CALLER
         ST    R15,LDACC           (MAYBE, SAVE)
         BH    SETREASN            YES, GO STORE REASON CODE
         C     R0,LDAREASN         SAME AS PREVIOUS HIGH; HIGHEST
*                                  REASON CODE FOR THIS CC?
         BNHR  R14                 NO, RETURN TO CALLER
SETREASN ST    R0,LDAREASN         YES, SAVE
         BR    R14                 RETURN TO CALLER
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- NEXTTCB - FIND NEXT TCB*
                WITHIN A GIVEN SUBTASK TREE'
*************************************************************
*                                                           *
*        NEXTTCB -- THIS ROUTINE FINDS THE NEXT TCB WITHIN  *
*        A GIVEN SUBTASK TREE.                              *
*                                                           *
*        INPUTS:                                            *
*              - TCBREG POINTS TO THE PREVIOUSLY PROCESSED  *
*                TCB.                                       *
*              - R14 POINTS TO THE RETURN ADDRESS.          *
*              - LDATCBHD POINTS TO THE TCB AT THE TOP OF   *
*                THE SUBTASK TREE TO BE SEARCHED.           *
*                                                           *
*        RETURN 0(,R14) CC^=0:                              *
*              - THE NEXT TCB HAS BEEN FOUND.               *
*              - TCBREG POINTS TO THE NEXT TCB.             *
*              - R1 HAS BEEN DESTROYED.                     *
*              - ALL OTHER REGISTERS ARE UNALTERED.         *
*                                                           *
*        RETURN 0(,R14) CC=0:                               *
*              - THE SUBTASK TREE HAS BEEN EXHAUSTED.       *
*              - R1 AND TCBREG HAVE BEEN DESTROYED.         *
*              - ALL OTHER REGISTERS ARE UNALTERED.         *
*                                                           *
*************************************************************
         SPACE 1
NEXTTCB  LR    R1,TCBREG           COPY PREV TCB PTR
         DROP  TCBREG              RELEASE GLOBAL TCB BASE
         USING TCB,R1              DCL LOCAL TCB BASE
         ICM   TCBREG,7,TCBLTC+1   DAUGHTER TASK EXIST?
         BNZR  R14                 YES, RETURN WITH THAT (CC^=0)
NTCBLOOP C     R1,LDATCBHD         NO, IS THIS THE TOP OF THE SUBTASK
*                                  TREE?
         BER   R14                 YES, RETURN EMPTY HANDED (CC=0)
         ICM   TCBREG,7,TCBNTC+1   NO, SISTER TASK EXIST?
         BNZR  R14                 YES, RETURN WITH THAT (CC^=0)
         ICM   R1,15,TCBOTC        NO, MOTHER TASK EXIST?
         BNZ   NTCBLOOP            YES, CONTINUE SCAN
         B     R14                 NO, RETURN EMPTY HANDED (CC=0)
         DROP  R1                  RELEASE LOCAL TCB BASE
         USING TCB,TCBREG          RESTORE GLOBAL TCB BASE
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- SETCREEN - CREATE, MODI*
               FY, OR DELETES SCREENS'
*************************************************************
*                                                           *
*        SETCREEN -- THIS ROUTINE CREATES, MODIFIES, OR     *
*        DELETES SVC SUB-SCREENS FOR GIVEN TCB'S.           *
*                                                           *
*        INPUTS:                                            *
*              - TCBREG POINTS TO THE TCB TO PROCESS.       *
*              - R8 POINTS TO AN SSSHSPE.                   *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*              - RBGRS1 POINTS TO THE SVC'S ORIGINAL        *
*                PARAMETER LIST.                            *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - ALL SCREEN REQUESTS ARE PROCESSED FOR THE  *
*                GIVEN TCB.                                 *
*              - R14, AND R4 --> R8 ARE NOT ALTERED.        *
*              - ALL OTHER REGISTERS MAY BE ALTERED.        *
*                                                           *
*************************************************************
         SPACE 1
         USING SSSHSPE,R8          DCL SSSHSPE BASE
SETCREEN ST    R14,LDASETCR        SAVE
         SPACE 3
*************************************************************
*        CHECK TO SEE IF A MASTER SCREEN ALREADY EXISTS FOR *
*        THIS TCB. IF SO, THEN VERIFY THAT IT IS ONE        *
*        CONTROLLED BY SSSH AND IS CURRENTLY IDLE.          *
*************************************************************
         SPACE 1
         ICM   R9,7,TCBSVCA2+1     DOES A SCREEN ALREADY EXIST?
         BZ    NOSCREEN            NO, GO CREATE ONE
         USING SSSDATA,R9          YES, DCL SSSDATA BASE
         CLC   SSSDRADR,=A(SSSROUTR) RIGHT SCREEN?
         BE    YESCREEN            YES, PROCEED
         LA    R0,8                NO, 12-8 ERROR
SETSCERR LA    R15,12              GET CC
         BAL   R14,SETRC           SAVE HI CC/RC
         B     SETSCRET            GO RETURN TO CALLER
         DROP  R9                  RELEASE SSSDATA BASE
NOSCREEN EQU   *
         SPACE 3
*************************************************************
*        NO SCREEN CURRENTLY EXISTS FOR THIS TCB. BUILD     *
*        ONE.                                               *
*************************************************************
         SPACE 1
         LA    R0,SSSDLEN          GET L'SSSDATA+L'SSSIQE
         GETMAIN RU,LV=(0),SP=253,BRANCH=YES GET MEMORY
         L     ASCBREG,PSAAOLD     RESTORE
         LR    R9,R1               LOAD SSSDATA PTR
         USING SSSDATA,R9          DCL SSSDATA BASE
         LR    R0,R9               --> AREA TO CLEAR
         LA    R1,SSSDLEN          GET L'AREA TO CLEAR
         SR    R15,R15             SET UP FOR CLEAR-BY-MVCL
         MVCL  R0,R14              CLEAR THE GOTTEN AREA
         LA    R0,SSSROUTR         --> ROUTER ROUTINE
         ST    R0,SSSDRADR         STORE INTO SSSDATA
         MVI   SSSDTYPE,SVCTP34    "SVC" TYPE
         MVI   SSSDLOKS,SVCLL      ENTERED WITH LOCAL LOCK
         MVI   SSSDMASK,B'10000000' INITIALIZE THE MASK TABLE
         MVC   SSSDMASK+1(255),SSSDMASK PROPAGATE
         MVC   SSSDMID,MASTERID    GET MASTER ID
         MVI   SSSDACTV,X'FF'      MAKE ZERO, YET NOT-ZERO
         SPACE 1
*        INITIALIZE AN IQE FOR POSSIBLE MASTER INTERCEPT OF THE ATTACH
*        SVC.
         MVI   SSSQSVC#-SSSIQE+SSSDIQE1,SVCATACH ATTACH SVC #
         MVI   SSSQPRIO-SSSIQE+SSSDIQE1,255 MAKE SURE ALWAYS 1ST ON Q
         MVI   SSSQFLAG-SSSIQE+SSSDIQE1,SSSQFAUT INTERCEPT IS AUTH
         LA    R1,SSSATACH         --> INTERCEPT ROUTINE
         ST    R1,SSSQIADR-SSSIQE+SSSDIQE1 STORE INTO IQE
         MVC   SSSQSID-SSSIQE+SSSDIQE1,SSSDMID MASTER ID
         ST    R9,TCBSVCA2         STORE SCREEN POINTER INTO TCB
YESCREEN OI    TCBFLGS7,TCBSVCS    ENABLE SVC SCREENING FOR THIS TCB
         SPACE 3
*************************************************************
*        IF THIS IS A SUB-SCREEN DELETION REQUEST, THEN     *
*        DELETE ALL INTERCEPT ROUTINES ASSOCIATED WITH THE  *
*        GIVEN SUB-SCREEN.                                  *
*************************************************************
         SPACE 1
         TM    SSSHFLAG,SSSHFDEL   SUB-SCREEN DELETION?
         BZ    SCRNODEL            NO, SKIP
         LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) YES, LOAD SCANNER
         USING SSSIQE,R1           DCL SSSIQE BASE
SCRDELLP LR    R12,R1              SAVE LAGGING POINTER
         ICM   R1,7,SSSQLINK+1     --> NEXT SSSIQE; ANY MORE?
         BZ    SCRNULCK            NO, GO SEE IF ANYTHING'S LEFT
         CLC   SSSQSID,SSSHSID     YES, RIGHT SUB-SCREEN?
         BNE   SCRDELLP            NO, KEEP LOOPING
         BAL   R14,IQEDELET        YES, DELETE THIS SSSIQE
         BZ    SCRDELLP            SUCCESSFUL; LOOP FOR NEXT
         LA    R15,4               UNSUCCESSFUL; 4-0 ERROR
         SR    R0,R0
         BAL   R14,SETRC
         B     SCRDELLP            LOOP FOR NEXT
         DROP  R1                  RELEASE IQE BASE
SCRNODEL EQU   *
         SPACE 3
*************************************************************
*        SCAN THE GIVEN IPE'S, AND PERFORM ALL REQUESTED    *
*        FUNCTIONS.                                         *
*************************************************************
         SPACE 1
         L     R10,RBGRS1          LOAD PLIST PTR
NEXTIPE  TM    0(R10),B'10000000'  ANY MORE IPE'S?
         BNZ   SCRNULCK            NO, GO SEE IF ANYTHING'S LEFT
         LA    R10,4(,R10)         YES, ADVANCE PLIST SCANNER
         ICM   R11,7,1(R10)        LOAD SSSHIPE PTR; NULL?
         BZ    NEXTIPE             YES, TRY NEXT PLIST ENTRY
         USING SSSHIPE,R11         NO, DCL IPE BASE
         ICM   R1,15,SSSHIADR      IQE DELETION REQUEST?
         BNZ   IQEADD              NO, GO TRY ADDING A NEW IQE
         SPACE 3
*************************************************************
*        THE REQUEST IS TO DELETE A PARTICULAR IQE.         *
*************************************************************
         SPACE 1
         LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) LOAD Q SCANNER
         USING SSSIQE,R1           DCL IQE BASE
IQEDELLP LR    R12,R1              SAVE LAGGING SCANNER
         ICM   R1,7,SSSQLINK+1     --> NEXT IQE; ANY MORE?
         BZ    IQEDELER            NO, IQE NOT FOUND
         CLC   SSSQSVC#,SSSHSVC#   YES, RIGHT SVC #?
         BNE   IQEDELLP            NO, LOOP
         CLC   SSSQSID,SSSHSID     YES, RIGHT SUB-SCREEN?
         BNE   IQEDELLP            NO, LOOP
         CLC   SSSQIID,SSSHIID     YES, RIGHT INTERCEPT?
         BNE   IQEDELLP            NO, LOOP
         BAL   R14,IQEDELET        YES, ATTEMPT DELETION; AUTHORIZED TO
*                                  DELETE THIS IQE?
         DROP  R1                  (RELEASE IQE BASE)
         BZ    NEXTIPE             YES, LOOP FOR NEXT REQUEST
         SPACE 1
IQEDELER LA    R15,4               NO, 4-0 ERROR
         SR    R0,R0
         BAL   R14,SETPRC          SAVE HIGH CC/RC
         B     NEXTIPE             LOOP FOR NEXT REQUEST
         SPACE 3
*************************************************************
*        THE REQUEST IS TO ADD A PARTICULAR IQE.            *
*************************************************************
         SPACE 1
IQEADD   LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) LOAD QUEUE SCANNER
         USING SSSIQE,R1           DCL IQE BASE
IQEREDUN ICM   R1,7,SSSQLINK+1     --> NEXT IQE; DONE?
         BZ    IQENRDUN            YES, PROCEED
         CLC   SSSQSVC#,SSSHSVC#   NO, SAME SVC?
         BNE   IQEREDUN            NO, LOOP
         CLC   SSSQSID,SSSHSID     YES, SAME SUB-SCREEN?
         BNE   IQEREDUN            NO, LOOP
         CLC   SSSQIID,SSSHIID     YES, SAME INTERCEPT?
         BNE   IQEREDUN            NO, LOOP
         TM    SSSQFLAG,SSSQFCAN   HAS  IQE BEEN CANCELLED?        SBB
         BO    IQEREDUN            YES, LOOP                       SBB
         LA    R15,4               NO, 4-0 ERROR
         B     IPEERR              SAVE ERROR INFO
         DROP  R1                  RELEASE SSSHIPE BASE
         SPACE 1
IQENRDUN LA    R15,8               ASSUMED COMPLETION CODE
         CLI   SSSHSVC#,SVCSYNCH   RESTRICTED SVC?
         BE    IPEERR              YES, ERROR
         SR    R14,R14             NO, CLEAR
         IC    R14,SSSHSVC#        GET THE SVC #
         LA    R14,SSSDMASK(R14)   --> ASSOCIATED MASK/COUNTER
         CLI   0(R14),B'00000000'  MAX INTERCEPTS ALREADY ON THIS SVC?
         BNE   IQENOFLW            NO, PROCEED
IPEERR   SR    R0,R0               YES, CLEAR REASON CODE
         BAL   R14,SETPRC          SAVE CC/RC
         B     NEXTIPE             LOOP FOR NEXT REQUEST
IPEERR1  EQU   *                                                   SBB
         LA    R15,8               LOAD CC                         SBB
         LA    R0,4                LOAD REASON CODE                SBB
         BAL   R14,SETPRC          SAVE CC/RC/                     SBB
         B     NEXTIPE                                             SBB
IQENOFLW EQU   *
         SPACE 1
         LA    R15,4               ASSUMED COMPLETION CODE
         LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) LOAD Q SCANNER
         USING SSSIQE,R1           DCL IQE BASE
IQENSRLP LR    R12,R1              SAVE LAGGING PTR
         ICM   R1,7,SSSQLINK+1     --> NEXT IQE; ANY MORE?
         BZ    IQEINSRT            NO, APPEND A NEW IQE
         CLC   SSSQSVC#,SSSHSVC#   YES, SAME SVC?
         BNE   IQENSRLP            NO, KEEP LOOPING                SBB
         CLC   SSSQPRIO,SSSHPRIO   YES, AT RIGHT PRTY LEVEL YET?   SBB
         BL    IQEINSRT            YES, GO INSERT IT               SBB
         ICM   R0,15,SSSQALNK      NO, IS THIS IQE ACTIVE?         SBB
         BNZ   IPEERR1             YES, 4-0 ERROR                  SBB
         B     IQENSRLP            NO, KEEP LOOPING                SBB
         DROP  R1                  NO, RELEASE IQE BASE
         SPACE 3
*************************************************************
*        GETMAIN AND BUILD A NEW IQE.                       *
*************************************************************
         SPACE 1
IQEINSRT LA    R0,SSSQLEN          GET BASIC IQE LENGTH
         GETMAIN RU,LV=(0),SP=253,BRANCH=YES
         L     ASCBREG,PSAAOLD     RESTORE
         USING SSSIQE,R1           DCL IQE BASE
         XC    SSSIQE(SSSQLEN),SSSIQE CLEAR ROOT AREA
         MVC   SSSQPRIO,SSSHPRIO   INSERT PRIORITY
         TM    LDAPFLAG,SSSHFALL+SSSHFSUB PROPAGATE TO SUBTASKS?
         BZ    IQENSUB             NO, SKIP
         OI    SSSQFLAG,SSSQFSUB   YES, REMEMBER
IQENSUB  TM    LDAFLAG,LDAFAUTH    AUTHORIZED?
         BZ    IQENAUTH            NO, SKIP
         OI    SSSQFLAG,SSSQFAUT   YES, REMEMBER
IQENAUTH MVC   SSSQIADR,SSSHIADR   A(INTERCEPT)
         MVC   SSSQSID,SSSHSID     SUB-SCREEN NAME
         MVC   SSSQIID,SSSHIID     INTERCEPT NAME
         MVC   SSSQSDA,SSSHSDA     SUB-SCREEN DATA VALUE
         MVC   SSSQIDA,SSSHIDA     INTERCEPT DATA VALUE
         MVC   SSSQLINK,SSSQLINK-SSSIQE(R12) ENQUEUE
         ST    R1,SSSQLINK-SSSIQE(,R12) ENQUEUE
         SR    R14,R14             CLEAR
         IC    R14,SSSHSVC#        GET SVC #
         STC   R14,SSSQSVC#        STORE INTO IQE
         IC    R15,SSSDMASK(R14)   GET INTERCEPT COUNTER
         BCTR  R15,0               "INCREMENT"
         STC   R15,SSSDMASK(R14)   STORE NEW VALUE
         B     NEXTIPE             LOOP FOR NEXT REQUEST
         DROP  R1                  RELEASE IQE BASE
         DROP  R11                 RELEASE IPE BASE
         SPACE 3
*************************************************************
*        IF ANY INTERCEPTS REQUIRE SUBTASK PROPAGATION,     *
*        THEN INSERT A MASTER INTERCEPT FOR THE ATTACH SVC; *
*        OTHERWISE, TAKE OUT THE MASTER INTERCEPT FOR THE   *
*        ATTACH SVC.                                        *
*************************************************************
         SPACE 1
SCRNULCK LA    R1,SSSDIQE1         --> MASTER IQE FOR ATTACH
         C     R1,SSSDQHED         QUEUED?
         BNE   ATCHNQUD            NO, SKIP
         CLI   SSSDMASK+SVCATACH,B'10000000' YES, CHECK COUNTER
         $DIE  NL                  DIE IF LOGIC ERROR
         MVC   SSSDQHED,SSSQLINK-SSSIQE(R1) DEQUEUE
         IC    R1,SSSDMASK+SVCATACH GET INTERCEPT COUNTER
         LA    R1,1(,R1)           "DECRIMENT"
         STC   R1,SSSDMASK+SVCATACH STORE NEW VALUE
ATCHNQUD EQU   *
         SPACE 3
         LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) LOAD Q SCANNER
         USING SSSIQE,R1           DCL IQE BASE
ATCHLOOP ICM   R1,7,SSSQLINK+1     --> NEXT IQE; ANY MORE?
         BZ    NOSUBS              NO, NO SUBTASK PROPAGATION
         TM    SSSQFLAG,SSSQFSUB   YES, SUBTASK PROPAGATION?
         BZ    ATCHLOOP            NO YET; KEEP LOOPING
         DROP  R1                  YES, RELEASE IQE BASE
         SPACE 1
         CLI   SSSDMASK+SVCATACH,B'00000000' CHECK COUNTER VALUE
         $DIE  E                   DIE ON LOGIC ERROR
         LA    R1,SSSDIQE1         --> MASTER IQE FOR ATTACH
         MVC   SSSQLINK-SSSIQE(,R1),SSSDQHED ENQUEUE
         ST    R1,SSSDQHED         ENQUEUE
         IC    R1,SSSDMASK+SVCATACH GET COUNTER
         BCTR  R1,0                "INCREMENT"
         STC   R1,SSSDMASK+SVCATACH STORE NEW VALUE
NOSUBS   EQU   *
         SPACE 3
*************************************************************
*        CHECK TO SEE IF THERE ARE ANY INTERCEPTS LEFT. IF  *
*        NOT, THEN DELETE THE ENTIRE MASTER SCREEN.         *
*************************************************************
         SPACE 1
         ICM   R1,7,SSSDQHED+1     ANY IQE'S LEFT?
         BNZ   SETSCRET            YES, JUST RETURN TO CALLER
         NI    TCBFLGS7,255-TCBSVCS NO, DISABLE SCREENING
         XC    TCBSVCA2,TCBSVCA2   CLEAR THE SCREEN PTR
         LA    R0,SSSDLEN          GET L'SSSDATA
         FREEMAIN RU,LV=(0),A=(R9),SP=253,BRANCH=YES
         DROP  R9                  RELEASE SSSDATA BASE
         L     ASCBREG,PSAAOLD     RESTORE
         SPACE 3
*************************************************************
*        RETURN TO CALLER.                                  *
*************************************************************
         SPACE 1
SETSCRET L     R14,LDASETCR        RESTORE
         BR    R14                 RETURN TO CALLER
         DROP  R8                  RELEASE SPE BASE
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- IQEDELET - IQE DELETION*
               '
*************************************************************
*                                                           *
*        IQEDELET -- THIS ROUTINE DELETES A GIVEN INTERCEPT *
*        ROUTINE. IF INTERCEPT IS ACTIVE THEN CHECK         *      SBB
*        AUTHORITY AND FLAG SSSIQE FOR DELETION BY THE      *      SBB
*        ROUTER WHEN INTERCEPT BECOMES INACTIVE.            *      SBB
*                                                           *
*        INPUTS:                                            *
*              - R1 POINTS TO THE IQE TO BE DELETED.        *
*              - R9 POINTS TO THE SSSDATA FOR THE TCB BEING *
*                PROCESSED.                                 *
*              - R12 POINTS TO THE IQE QUEUED JUST AHEAD OF *
*                THE ONE TO BE DELETED.                     *
*                                                           *
*        RETURN 0(,R14) CC=0:                               *
*              - THE INDICATED IQE IS DELETED.              *
*              - R1 POINTS TO THE IQE THAT R12 POINTS TO.   *
*              - R14, R15, R0, AND R3 ARE DESTROYED.        *
*              - ALL OTHER REGISTERS ARE UNCHANGED.         *
*                                                           *
*        RETURN 0(,R14) CC^=0:                              *
*              - THE CALLER IS NOT AUTHORIZED TO DELETE THE *
*                INDICATED IQE.                             *
*              - ALL REGISTERS ARE UNCHANGED.               *
*                                                           *
*************************************************************
         SPACE 1
         USING SSSIQE,R1
         USING SSSDATA,R9
IQEDELET EQU   *
         TM    LDAFLAG,LDAFAUTH    NO, IS THE CALLER AUTHORIZED?
         BNZ   IQEDELGO            YES, PROCEED
         TM    SSSQFLAG,SSSQFAUT   NO, IS THE INTERCEPT AUTHORIZED?
         BNZR  R14                 YES, RETURN TO CALLER (CC^=0)
IQEDELGO EQU   *                                                   SBB
         SPACE 1
         ICM   R0,15,SSSQALNK      IS THE INTERCEPT ACTIVE?        SBB
         BZ    IQEDENOW            NO, GO AHEAD                    SBB
         OI    SSSQFLAG,SSSQFCAN   YES, FLAG FOR LATER DELETION    SBB
         CR    R14,R14             BY THE ROUTER. CLEAR CC         SBB
         BR    R14                 AND RETURN TO CALLER            SBB
IQEDENOW EQU   *                                                   SBB
         SPACE 1
         ST    R14,LDAIQEDE        SAVE
         MVC   SSSQLINK-SSSIQE(,R12),SSSQLINK DEQUEUE
         SR    R14,R14             CLEAR
         IC    R14,SSSQSVC#        GET SVC #
         LA    R14,SSSDMASK(R14)   --> ASSOCIATED COUNTER
         CLI   0(R14),B'10000000'  COUNTER VALID?
         $DIE  NL                  NO, LOGIC ERROR
         IC    R15,0(,R14)         YES, GET IT
         LA    R15,1(,R15)         "DECRIMENT" IT
         STC   R15,0(,R14)         STORE NEW VALUE
         LA    R0,SSSQLEN          GET L'IQE ROOT
         FREEMAIN RU,LV=(0),A=(1),SP=253,BRANCH=YES
         DROP  R1                  RELEASE IQE BASE
         L     ASCBREG,PSAAOLD     RESTORE
         LR    R1,R12              COPY LAGGING IQE PTR
         L     R14,LDAIQEDE        RESTORE
         CR    R14,R14             SET CC=0
         BR    R14                 RETURN TO CALLER
         DROP  R9                  RELEASE SSSDATA BASE
         SPACE 3
         DROP  ,                   RELEASE ALL BASES
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- SSSROUTR - INTERCEPT RO*
               UTER'
*************************************************************
*                                                           *
*        SSSROUTR -- THIS SVC INTERCEPT IS CALLED WHENEVER  *
*        AN INTERCEPTED SVC IS ISSUED UNDER THE CURRENT     *
*        TCB.                                               *
*                                                           *
*        INPUTS:                                            *
*              - THE LOCAL LOCK IS HELD.                    *
*              - R13, R15, R0, AND R1 CONTAIN DATA THAT     *
*                MUST BE PASSED TO THE INTERCEPT ROUTINE.   *
*              - R3 POINTS TO THE CVT.                      *
*              - R4 POINTS TO THE CURRENT TCB.              *
*              - R5 POINTS TO THE ROOT (RBBASIC) OF THE     *
*                SVRB UNDER WHICH THIS INTERCEPT IS         *
*                RUNNING.                                   *
*              - R6 POINTS TO THIS INTERCEPT'S ENTRY POINT  *
*                (SSSROUTR).                                *
*              - R7 POINTS TO THIS ADDRESS SPACE'S ASCB.    *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*                                                           *
*        EXIT TO INTERCEPT:                                 *
*              - R0, R1, R3, R4, R5, R7, AND R13 ARE        *
*                RESTORED TO THEIR INITIAL VALUES.          *
*              - IF THE INTERCEPT IS AUTHORIZED, THEN R15   *
*                TOO IS RESTORED TO ITS INITIAL VALUE.      *
*              - R6 IS LOADED WITH THE INTERCEPT'S ENTRY    *
*                ADDRESS.                                   *
*              - R14 IS LOADED WITH AN APROPRIATE RETURN    *
*                ADDRESS. NOTE, THE INTERCEPT MUST RETURN   *
*                TO 0(,R14).                                *
*              - ALL OTHER REGISTERS CONTAIN UNPREDICTABLE  *
*                VALUES.                                    *
*              - RBEXSAVE(4) CONTAINS A COPY OF SSSQSDA.    *
*              - RBEXSAVE+4(4) CONTAINS A COPY OF SSSQIDA.  *
*              - IF THE INTERCEPT IS AUTHORIZED, THEN IT IS *
*                BALR'ED TO IN SUPERVISOR STATE AND KEY 0;  *
*                OTHERWISE, IT IS SYNCH'ED TO IT PROBLEM    *
*                STATE AND KEY.                             *
*              - NO LOCKS ARE HELD.                         *
*                                                           *
*        RETURN FROM INTERCEPT:                             *
*              - THE INTERCEPT MUST RETURN TO 0(,R14).      *
*              - NO REGISTERS NEED BE RESTORED.             *
*              - NO LOCKS NEED BE HELD OR RELEASED.         *
*              - THE ROUTER DOES NOT REQUIRE THAT ANY       *
*                PARTICULAR INFORMATION BE PRESERVED IN THE *
*                SVRB.                                      *
*                                                           *
*************************************************************
         SPACE 1
         USING PSA,0
         USING CVTMAP,CVTREG
         USING TCB,TCBREG
         USING SSSROUTR,BASEREG
         USING ASCB,ASCBREG
         ENTRY SSSROUTR
         SPACE 3
*************************************************************
*        INITIALIZE.                                        *
*************************************************************
         SPACE 1
SSSROUTR NI    TCBFLGS7,255-TCBSVCS DISABLE SCREENING (NOT REALLY
*                                  NECESSARY)
         SH    RBREG,=Y(RBBASIC-RBPRFX) --> RB PREFIX
         USING RBPRFX,RBREG        DCL RB BASE
         XC    RBFEPARM(24),RBFEPARM CLEAR
         B     NOTRAP2             SKIP DBC                        SBB
*************************************************************      SBB
*        DEBUGGING CODE TO SET UPDBC AS ESTAE               *      SBB
*************************************************************      SBB
         STM   R0,R6,RBEXSAVE      SAVE REGS                       SBB
         ST    R14,RBEXSAVE+(7*4)  SAVE RET                        SBB
         LM    R0,R1,=CL8'DBC'     LOAD NAME                       SBB
         L     R3,CVTPTR           POINT TO CVT                    SBB
         L     R15,CVTLPDSR-CVT(,R3) EP TO IEAVVMSR                SBB
         BALR  R14,R15             FIND DBC                        SBB
         B     DBCFND2-*(R14)      GOTIT                           SBB
         LM    R0,R6,RBEXSAVE      RESTORE  REGS                   SBB
         L     R14,RBEXSAVE+(7*4)  AND RET ADDR                    SBB
         B     NOTRAP2             MISSED IT                       SBB
DBCFND2  EQU   *                   SBB
         LR    R15,R0              SAVE LPDE ADDR                  SBB
         L     R14,RBEXSAVE+(7*4)  AND RET ADDR                    SBB
         LM    R0,R6,RBEXSAVE      RESTORE REGS                    SBB
         L     R2,LPDENTP-LPDE(,R15) POINT TO EP                   SBB
         FESTAE EXITADR=(R2),RBADDR=(RBREG),TCBADDR=(TCBREG)
*        END OF TEST CODE *** END OF TEST CODE *** END OF TEST CODE
         SPACE
         B     NOTRAP2             ZAPPABLE GATE
         DC    X'00DEAD',AL1(16),C'SSSROUTR ENTERED' CALL DEBUGGER
NOTRAP2  DS    0H
         SPACE 3
*************************************************************
*        LOCATE THE DESIRED INTERCEPT ROUTINE.              *
*************************************************************
         SPACE 1
         L     R9,TCBSVCA2         --> SSSDATA
         USING SSSDATA,R9          DCL SSSDATA BASE
         L     R8,RBLINK           --> OLDER RB
         SH    R8,=Y(RBBASIC-RBPRFX) --> ITS PREFIX
         SR    R2,R2               CLEAR
         IC    R2,RBINTCOD+1-RBPRFX(,R8) GET THE ISSUED SVC #
         LA    R8,SSSDMASK(R2)     --> ASSOCIATED MASK BYTE
         SR    R10,R10             CLEAR
         IC    R10,0(,R8)          GET THE COUNTER
         LA    R11,1(,R10)         "DECRIMENT"
         STC   R11,0(,R8)          STORE NEW VALUE
         LCR   R10,R10             CONVERT TO -
         N     R10,=X'0000007F'     NORMAL COUNTER
         LA    R8,SSSDQHED-(SSSQLINK-SSSIQE) LOAD QUEUE SCANNER
         USING SSSIQE,R8           DCL IQE BASE
ROUTSRCH ICM   R8,7,SSSQLINK+1     --> NEXT IQE; ANY MORE?
         $DIE  Z                   NO, LOGIC ERROR
         CLM   R2,1,SSSQSVC#       YES, RIGHT SVC?
         BNE   ROUTSRCH            NO, KEEP SEARCHING
         BCT   R10,ROUTSRCH        YES, SKIP TO THE RIGHT IQE
         ICM   R2,15,SSSQALNK      IS THIS IQE CURRENTLY ACTIVE?
         $DIE  NZ                  YES, LOGIC ERROR
         TM    SSSQFLAG,SSSQFCAN   IS INTERCEPT CANCELLED?         SBB
         $DIE  NZ                  YES, LOGIC ERROR                SBB
         MVC   SSSQALNK,SSSDACTV   NO, ENQUEUE ONTO ACTIVE QUEUE
         ST    R8,SSSDACTV         ENQUEUE
         ST    R14,SSSQSAVE        SAVE ROUTER'S RETURN ADDRESS
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=MISC
         MVC   RBEXSAVE(4),SSSQSDA STORE SDA FOR THE INTERCEPT
         MVC   RBEXSAVE+4(4),SSSQIDA STORE IDA FOR THE INTERCEPT
         SPACE 1
         TM    SSSQFLAG,SSSQFAUT   IQE AUTHORIZED?
         BNZ   ROUTAUTH            YES, GO HANDLE
         SPACE 3
*************************************************************
*        INTERFACE TO THE UNAUTHORIZED INTERCEPT ROUTINE.   *
*************************************************************
         SPACE 1
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=2,BRANCH=YES
         LTR   R15,R15             IS THE CALLER AUTHORIZED?
         LM    R0,R1,RBGRS0        (RESTORE)
         LM    R13,R15,RBGRS13     (RESTORE)
         STM   R13,R1,RBEXSAVE     (STORE ICO 'YES')
         BZ    RNOCALL             YES, BYPASS THIS INTERCEPT
         L     CVTREG,CVTPTR       NO, RESTORE
         FESTAE 0,WRKREG=(R2),TCBADDR=(TCBREG) KILL THE ESTAE
         LA    RBREG,RBBASIC       --> RB ROOT
         USING RBBASIC,RBREG       DCL RB ROOT BASE
         L     BASEREG,SSSQIADR    --> INTERCEPT
         DROP  BASEREG
         OI    TCBFLGS7,TCBSVCS    ENABLE SCREENING
         SYNCH (BASEREG)           GO TO UNAUTHORIZED INTERCEPT
         NI    TCBFLGS7,255-TCBSVCS DISABLE SCREENING (NOT REALLY
*                                  NECESSARY)
         BALR  BASEREG,0           LOAD TEMP BASE
         USING *,BASEREG           DCL TEMP BASE
         L     BASEREG,=A(SSSROUTR) LOAD TRUE BASE
         USING SSSROUTR,BASEREG    DCL TRUE BASE
         SH    RBREG,=Y(RBBASIC-RBPRFX) RESTORE RB PTR
         USING RBPRFX,RBREG        DCL RB BASE
         STM   R13,R1,RBEXSAVE     SAVE RETURNED REGS
         B     RNOCALL             DONE HERE
         SPACE 3
*************************************************************
*        INTERFACE TO THE AUTHORIZED INTERCEPT ROUTINE.     *
*************************************************************
         SPACE 1
ROUTAUTH FESTAE 0,WRKREG=(R2),TCBADDR=(TCBREG)
         LM    R0,R1,RBGRS0        RESTORE
         LM    R13,R15,RBGRS13     RESTORE
         L     CVTREG,CVTPTR       RESTORE
         LA    RBREG,RBBASIC       --> RB ROOT
         USING RBBASIC,RBREG       DCL RB ROOT BASE
         L     BASEREG,SSSQIADR    --> INTERCEPT
         DROP  BASEREG             RELEASE LOCAL BASE
         OI    TCBFLGS7,TCBSVCS    ENABLE SCREENING
         BALR  R14,BASEREG         GO TO AUTHORIZED INTERCEPT
         DROP  ,                   RELEASE ALL BASES
         USING PSA,0               DCL PSA BASE
         L     TCBREG,PSATOLD      RESTORE TCB PTR
         USING TCB,TCBREG          DECLARE TCB BASE
         NI    TCBFLGS7,255-TCBSVCS DISABLE SCREENING (NOT REALLY
*                                  NECESSARY)
         BALR  BASEREG,0           LOAD TEMP BASE
         USING *,BASEREG           DCL TEMP BASE
         L     BASEREG,=A(SSSROUTR) LOAD TRUE BASE
         USING SSSROUTR,BASEREG    DCL TRUE BASE
         L     ASCBREG,PSAAOLD     RESTORE ASCB BASE
         USING ASCB,ASCBREG        DCL ASCB BASE
         L     RBREG,TCBRBP        RESTORE RB ROOT PTR
         SH    RBREG,=Y(RBBASIC-RBPRFX) --> RB PREFIX
         USING RBPRFX,RBREG        DCL RB BASE
         L     R9,TCBSVCA2         --> SSSDATA
         USING SSSDATA,R9          DCL SSSDATA BASE
         CLC   SSSDRADR,=A(SSSROUTR) STILL RIGHT SCREEN?
         $DIE  NE                  NO, LOGIC ERROR
         STM   R13,R1,RBEXSAVE     YES, SAVE RETURNED REGS
         SETLOCK RELEASE,TYPE=ALL,RELATED=MISC INSURE NO LOCKS
         SPACE 3
*************************************************************
*        RESET THE MASTER SCREEN.                           *
*************************************************************
         SPACE 1
RNOCALL  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=MISC
         ICM   R8,7,SSSDACTV+1     GET CURRENT IQE
         $DIE  Z                   (LOGIC ERROR)
         USING SSSIQE,R8           DCL IQE BASE
         MVC   SSSDACTV,SSSQALNK   DEQUEUE FROM ACTIVE QUEUE
         XC    SSSQALNK,SSSQALNK   CLEAR
         MVC   RBEXSAVE+4(4),SSSQSAVE GET RETURN ADDRESS BACK      SBB
         SPACE 1
         TM    SSSQFLAG,SSSQFCAN   IQE SHEDULED FOR DELETION?      SBB
         BO    RIQEDEL             YES, LEAVE COUNTER ALONE        SBB
*                                  AND GO DELETE IQE               SBB
         SR    R2,R2               CLEAR
         IC    R2,SSSQSVC#         GET SVC #
         LA    R2,SSSDMASK(R2)     --> COUNTER
         CLI   0(R2),B'00000000'   VALID VALUE?
         $DIE  E                   NO, LOGIC ERROR
         IC    R10,0(,R2)          LOAD THE COUNTER
         BCTR  R10,0               "INCREMENT"
         STC   R10,0(,R2)          STORE NEW VALUE
         B     RSCRESET            SKIP TO EXIT                    SBB
         SPACE 3
*************************************************************
*        DELETE THIS IQE ALTOGETHER                         *
*************************************************************
         SPACE 1
RIQEDEL  EQU   *
         LA    R1,0(R8)            SAVE CURRENT IQE,CLEAR HI BYTE  SBB
         LA    R8,SSSDQHED-(SSSQLINK-SSSIQE) -->Q HEAD             SBB
         SPACE 1
RIQDELLP EQU   *                   RUN CHAIN TO GET PREVIOUS IQE   SBB
         LR    R12,R8              SAVE LAGGING POINTER            SBB
         ICM   R8,7,SSSQLINK+1     LAST IQE?                       SBB
         $DIE  Z                   YES, LOGIC ERROR                SBB
         CR    R1,R8               FOUND CURRENT IQE               SBB
         BNE   RIQDELLP            NO, LOOP                        SBB
*                                  R12 --> PREVIOUS IQE            SBB
         MVC   SSSQLINK-SSSIQE(,12),SSSQLINK DEQUEUE IQE           SBB
*                                  DON'T NEED TO CHANGE COUNTER    SBB
*                                  SINCE ITS STILL SET FROM        SBB
*                                  ACTIVE RETURN                   SBB
         LA    R0,SSSQLEN          LOAD LENGTH FOR FREEMAIN        SBB
         FREEMAIN RU,LV=(0),A=(1),SP=253,BRANCH=YES,               SBB X
               RELATED=IQEINSRT                                    SBB
         L     ASCBREG,PSAAOLD     RESTORE ASCB REGISTER           SBB
         SPACE 3
*************************************************************      SBB
*          DELETE THE MASTER ATTACH INTERCEPT IF QUEUED     *      SBB
*          THEN RE-ADD IT IF STILL REQUIRED.                *      SBB
*************************************************************      SBB
         SPACE 1
         LA    R1,SSSDIQE1         --> MASTER IQE FOR ATTACH       SBB
         C     R1,SSSDQHED         QUEUED?                         SBB
         BNE   RATTNQUD            NO, SKIP                        SBB
         CLI   SSSDMASK+SVCATACH,B'10000000' YES, CHECK COUNTER    SBB
         $DIE  NL                  DIE IF LOGIC ERROR              SBB
         MVC   SSSDQHED,SSSQLINK-SSSIQE(R1) DEQUEUE                SBB
         IC    R1,SSSDMASK+SVCATACH GET INTERCEPT COUNTER          SBB
         LA    R1,1(,R1)           "DECRIMENT"                     SBB
         STC   R1,SSSDMASK+SVCATACH STORE NEW VALUE                SBB
RATTNQUD EQU   *
         SPACE 3
         LA    R1,SSSDQHED-(SSSQLINK-SSSIQE) LOAD Q SCANNER        SBB
         USING SSSIQE,R1           DCL IQE BASE                    SBB
RATTLOOP ICM   R1,7,SSSQLINK+1     --> NEXT IQE; ANY MORE?         SBB
         BZ    RNOSUBS             NO, NO SUBTASK PROPAGATION      SBB
         TM    SSSQFLAG,SSSQFSUB   YES, SUBTASK PROPAGATION?       SBB
         BZ    RATTLOOP            NO YET; KEEP LOOPING            SBB
         DROP  R1                  YES, RELEASE IQE BASE           SBB
         SPACE 1
         CLI   SSSDMASK+SVCATACH,B'00000000' CHECK COUNTER VALUE   SBB
         $DIE  E                   DIE ON LOGIC ERROR              SBB
         LA    R1,SSSDIQE1         --> MASTER IQE FOR ATTACH       SBB
         MVC   SSSQLINK-SSSIQE(,R1),SSSDQHED ENQUEUE               SBB
         ST    R1,SSSDQHED         ENQUEUE                         SBB
         IC    R1,SSSDMASK+SVCATACH GET COUNTER                    SBB
         BCTR  R1,0                "INCREMENT"                     SBB
         STC   R1,SSSDMASK+SVCATACH STORE NEW VALUE                SBB
RNOSUBS  EQU   *
         SPACE 3
*************************************************************      SBB
*        CHECK TO SEE IF THERE ARE ANY INTERCEPTS LEFT. IF  *      SBB
*        NOT, THEN DELETE THE ENTIRE MASTER SCREEN.         *      SBB
*************************************************************      SBB
         SPACE 1
         ICM   R1,7,SSSDQHED+1     ANY IQE'S LEFT?                 SBB
         BNZ   RSCRESET            YES, JUST RETURN TO CALLER      SBB
         NI    TCBFLGS7,255-TCBSVCS NO, DISABLE SCREENING          SBB
         XC    TCBSVCA2,TCBSVCA2   CLEAR THE SCREEN PTR            SBB
         LA    R0,SSSDLEN          GET L'SSSDATA                   SBB
         FREEMAIN RU,LV=(0),A=(R9),SP=253,BRANCH=YES               SBB
         DROP  R9                  RELEASE SSSDATA BASE            SBB
         L     ASCBREG,PSAAOLD     RESTORE                         SBB
         B     ROUTRELS            EXIT WITHOUT RESETTING SCREEN   SBB
         SPACE 3
*************************************************************
*        RELEASE LOCKS, ENABLE SCREENING AND RETURN TO      *
*        CALLER.                                            *
*************************************************************
         SPACE
RSCRESET EQU   *                   RESET SCREENING                 SBB
         OI    TCBFLGS7,TCBSVCS    FOR THIS TASK                   SBB
         SPACE
         SPACE 1
ROUTRELS EQU   *
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=MISC RELEASE LOCAL LOCK
         LM    R13,R1,RBEXSAVE     RESTORE REGS
         BR    R14                 RETURN TO DISPATCHER
         SPACE 3
         DROP  ,                   RELEASE ALL BASES
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- SSSATACH - SCREEN PROPA*
               GATION'
*************************************************************
*                                                           *
*        SSSATACH -- THIS ROUTINE INTERCEPTS THE ATTACH SVC *
*        SO THAT THOSE IQE'S THAT NEED TO BE CAN BE         *
*        PROPAGATED TO THE NEW TCB.                         *
*                                                           *
*        INPUTS:                                            *
*              - R15 AND R1 CONTAIN PARAMETERS FROM THE     *
*                CALLER FOR THE ATTACH SVC ROUTINE.         *
*              - R3 POINTS TO THE CVT.                      *
*              - R4 POINTS TO THE CURRENT (ATTACHING) TCB.  *
*              - R5 POINTS TO THE SVRB UNDER WHICH THIS     *
*                INTERCEPT IS RUNNING.                      *
*              - R6 POINTS TO THIS INTERCEPT'S ENTRY POINT  *
*                (SSSATACH).                                *
*              - R7 POINTS TO THIS ADDRESS SPACE'S ASCB.    *
*              - R14 POINTS TO A RETURN ADDRESS IN THE      *
*                SVC INTERCEPT ROUTER ROUTINE.              *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - A SUBTASK TCB IS ATTACHED AS REQUESTED BY  *
*                THE CALLER. AN SVC SCREEN IS ASSOCIATED    *
*                WITH IT, AND COPIES OF THOSE IQE'S THAT    *
*                REQUEST PROPAGATION ARE QUEUED FROM THE    *
*                NEW SCREEN.                                *
*              - R13, R15, R0, R1 CONTAIN THE VALUES        *
*                RETURNED FROM THE REAL SVC 42.             *
*                                                           *
*************************************************************
         SPACE 1
         USING PSA,0
         USING TCB,TCBREG
         USING SSSATACH,BASEREG
         USING ASCB,ASCBREG
         ENTRY SSSATACH
         SPACE 3
*************************************************************
*        ESTABLISH ESTAE PROTECTION.                        *
*************************************************************
         SPACE 1
SSSATACH SH    RBREG,=Y(RBBASIC-RBPRFX) --> RB PREFIX
         USING RBPRFX,RBREG        DCL RB BASE
         ST    R14,RBEXSAVE+4      SAVE
*** DELETED TESTING FESTAE FOR DBC
*        FESTAE EXITADR=(R2),RBADDR=(RBREG),TCBADDR=(TCBREG)
         B     NOTRAP3             ZAPPABLE GATE
         DC    X'00DEAD',AL1(16),C'SSSATACH ENTERED' CALL DEBUGGER
NOTRAP3  DS    0H
         SPACE 3
*************************************************************
*        GET THE LOCAL LOCK.                                *
*************************************************************
         SPACE 1
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=MISC
         SPACE 3
*************************************************************
*        GETMAIN A WORK AREA IN WHICH A MODIFIED COPY OF    *
*        THE CALLER'S ATTACH PARAMETER LIST CAN BE BUILT.   *
*        THE AREA IS GOTTEN IN THE CALLER'S KEY.            *
*************************************************************
         SPACE 1
         L     R3,RBLINK           --> CALLER'S RB
         IC    R3,RBOPSW+1-RBBASIC(R3) GET CALLER'S KEY INTO BYTE-1
         N     R3,=X'000000F0'     ISSOLATE
         LA    R0,ATTPLEN          MAX LENGTH
         GETMAIN RU,LV=(0),SP=229,KEY=(3),BRANCH=YES
         L     ASCBREG,PSAAOLD     RESTORE ASCB PTR
         LR    R8,R1               COPY AREA POINTER
         XC    0(ATTPLEN,R8),0(R8) CLEAR
         SPACE 3
*************************************************************
*        DETERMINE THE LENGTH OF THE CALLER PROVIDED PLIST  *
*        AND COPY IT TO THE WORK AREA.                      *
*************************************************************
         SPACE 1
         MODESET EXTKEY=RBT234,WORKREG=2 LOAD CALLER'S KEY
         L     R2,RBGRS15          GET ATTACH PARM LIST ADDR
         USING ATTPLIST,R2
         LA    R1,ATTPL36          GET MINIMUM LENGTH OF LIST
         TM    ATTPFLG1,ATTPLNGP   IS IT LONG LIST?
         BZ    ATTACH1             NO, TEST FOR 52 BYTES
         ICM   R1,B'0111',ATTPLNGH GET ACTUAL LENGTH
         C     R1,=A(ATTPLEN)      TEST LENGTH
         BNH   ATTACH2             OK, PROCEED
         LA    R1,ATTPLEN          EXCESSIVE, CORRECT IT
         B     ATTACH2
ATTACH1  TM    ATTPFLG2,ATTPVS2    IS IT VS/2 (52 BYTE) LIST?
         BZ    ATTACH2             NO, ACCEPT 36 BYTES
         LA    R1,ATTPL52          YES, RESET LENGTH
ATTACH2  BCTR  R1,0                DECR FOR EX-MVC
         MVC   0(*-*,R8),ATTPLIST  (EXECUTED)
         EX    R1,*-6              MOVE PARAMETER LIST
         DROP  R2                  RELEASE CALLER'S PLIST BASE
         USING ATTPLIST,R8         DCL WORKING PLIST BASE
         MODESET EXTKEY=ZERO       RESUME KEY-0
         MVC   RBEXSAVE(1),ATTPFLG3 SAVE FOR DISPATCH TEST
         OI    RBEXSAVE,255-ATTPNDSP ASSUME CALLER IS AUTHORIZED
         SPACE 3
*************************************************************
*        IF THE CALLER IS UNAUTHORIZED, THEN CLEAR ALL      *
*        AUTHORIZED REQUEST CODES FROM OUR WORKING COPY OF  *
*        THE ATTACH PLIST.                                  *
*************************************************************
         SPACE 1
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,BRANCH=YES
         LTR   R15,R15             IS CALLER AUTHORIZED?
         BZ    ATTAUTH             YES, SKIP
         NI    ATTPFLG3,ATTPSZNO   NO, CLEAR AUTHORIZED FLAGS
         MVI   RBEXSAVE,0          SET ^AUTH & MUST DISPATCH
         XC    ATTPAUTH,ATTPAUTH   MAKE SURE NO JSCB OR TASK ID GIVEN
         MVI   ATTPFLG4,0          CLEAR OTHER AUTHORIZED FLAGS
         XC    ATTPNSHP,ATTPNSHP   MAKE SURE THE BOZO AIN'T DOON THIS
         LA    R3,ATTPL60          LENGTH OF 60
         STCM  R3,B'0111',ATTPLNGH SET LENGTH TO 60
         OI    ATTPFLG1,ATTPLNGP   INDICATE LENGTH PRESENT
         OI    ATTPFLG2,ATTPVS2    INDICATE VS/2 TYPE LIST
         SPACE 1
ATTAUTH  OI    ATTPFLG3,ATTPNDSP   ATTACH AS NON-DISPATCHABLE
         SPACE 3
*************************************************************
*        FREEZE ALL OTHER TCB'S IN THIS ADDRESS SPACE SO    *
*        THAT THE SVC SCREEN CAN BE SET IN THE NEW SUBTASK  *
*        WITHOUT INTERFERANCE.                              *
*************************************************************
         SPACE 1
         STATUS SET,MC,STEP        SET UP PARAMETERS
         ORG   *-2                 ERASE THE SVC INSTRUCTION
         LR    R13,R15             LOAD PARAMETER REG
         L     R15,CVTPTR          --> CVT
         L     R15,CVTABEND-CVTMAP(,R15) --> SCVT
         L     R15,SCVTSTAT-SCVTSECT(,R15) --> STATUS ROUTINE
         BALR  R14,R15             FREEZE ALL OTHER TCB'S
         SPACE 3
*************************************************************
*        ATTACH THE SUBTASK AS NON-DISPATCHABLE.            *
*************************************************************
         SPACE 1
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=MISC RELEASE LCL LOCK
         MODESET EXTKEY=RBT234,WORKREG=2 RESUME CALLER'S KEY
         LM    R0,R1,RBGRS0        RESTORE PARM REGS
         L     R13,RBGRS13         RESTORE REGISTER
         LR    R15,R8              POINT TO COPIED PARM LIST
         SVC   42                  DO THE ATTACH
         MODESET EXTKEY=ZERO       RESTORE KEY-0
         STM   R15,R1,RBEXSAVE+8   SAVE
         SPACE 3
*************************************************************
*        AQUIRE THE LOCAL LOCK AND THEN RELEASE MC,STEP.    *
*************************************************************
         SPACE 1
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=MISC
         STATUS RESET,MC,STEP      LOAD PARAMETER REGISTERS
         ORG   *-2                 ERASE THE SVC
         LR    R13,R15             COPY PARAMETER REGISTER
         L     R15,CVTPTR          --> CVT
         L     R15,CVTABEND-CVTMAP(,R15) --> SCVT
         L     R15,SCVTSTAT-SCVTSECT(,R15) --> STATUS ROUTINE
         BALR  R14,R15             RESET,MC,STEP
         SPACE 3
*************************************************************
*        FREE THE WORKING PLIST.                            *
*************************************************************
         SPACE 1
         L     R3,RBLINK           --> CALLER'S RB
         IC    R3,RBOPSW+1-RBBASIC(R3) CALLER'S KEY IN BYTE-1
         N     R3,=X'000000F0'     ISSOLATE
         LA    R0,ATTPLEN          GET L'WORKING PLIST
         FREEMAIN RU,LV=(0),A=(R8),SP=229,KEY=(3),BRANCH=YES
         DROP  R8                  RELEASE BASE
         L     ASCBREG,PSAAOLD     RESTORE ASCB PTR
         SPACE 3
*************************************************************
*        POINT TCBREG (R4) TO THE NEW SUBTASK'S TCB. THIS   *
*        IS IMPORTANT FOR THE SUBSEQUENT GETMAINS.          *
*************************************************************
         SPACE 1
         L     TCBREG,RBEXSAVE+16  --> ATTACHED TCB
         SPACE 3
*************************************************************
*        IF OUR CALLER IS UNAUTHORIZED, THEN INSURE THAT    *
*        THE SUBTASK PROGRAM, EVEN IF AUTHORISED, IS NOT    *
*        LOADED AUTHORIZED.                                 *
*************************************************************
         SPACE 1
         L     R1,TCBRBP           --> ATTACHED TCB'S NEWEST RB (AN
*                                  SVRB)
         MVC   RBGRS2-RBBASIC((R12-R2+1)*4,R1),RBGRS2 PROPAGATE
*                                  CALLER'S R2-R12 TO THE SUBTASK
         CLI   RBEXSAVE,0          IS CALLER AUTHORIZED?
         BNZ   NAUTH2              YES, SKIP
         NI    RBEXSAVE+8-RBBASIC(R1),B'01111111' NO, CLEAR 'WKSYS'
NAUTH2   EQU   *
         SPACE 3
*************************************************************
*        IF OUR CALLER IS NOT IN SUPERVISOR STATE, THEN     *
*        INSURE THAT THE NEW TASK'S ESTAI (IF ANY) DOESN'T  *
*        GET CONTROL IN SUPERVISOR STATE.                   *
*************************************************************
         SPACE 1
         L     R1,RBLINK           --> CALLER'S RB
         TM    RBOPSW+1-RBBASIC(R1),B'00000001' PROBLEM STATE?
         BZ    ESTAIOK             NO, SKIP
         L     R8,RBGRS15          YES, --> ORIGINAL PARM LIST
         USING ATTPLIST,R8         DCL ATTPLIST BASE
         ICM   R0,7,ATTPESTA       WAS ESTAI REQUESTED?
         BZ    ESTAIOK             NO, SKIP
         ICM   R1,B'0111',TCBSTABB YES, FIND NEW ESTAI SCB; ANY?
         BZ    ESTAIOK             NO, SKIP
         USING SCB,R1              YES, DCL SCB BASE
         TM    SCBFLGS1,SCBSTAI    IS IT STAI/ESTAI?
         BNO   ESTAIOK             NO, SKIP
         NI    SCBFLGS2,X'FF'-SCBSUPER YES, CLEAR SUPERVISOR STATE
         DROP  R1                  RELEASE SCB BASE
         DROP  R8                  RELEASE ATTPLIST BASE
ESTAIOK  EQU   *
         SPACE 3
*************************************************************
*        PROPAGATE THE SVC SCREEN AND SELECTED IQE'S TO THE *
*        NEW TCB.                                           *
*************************************************************
         SPACE 1
         ICM   R9,7,TCBSVCA2+1     --> SUBTASK'S SCREEN; ANY YET?
         $DIE  NZ                  YES, LOGIC ERROR
         LA    R0,SSSDLEN          NO, GET L'SCREEN
         GETMAIN RU,LV=(0),SP=253,BRANCH=YES GET A SCREEN AREA
         L     ASCBREG,PSAAOLD     RESTORE
         LR    R9,R1               COPY NEW SSSDATA AREA PTR
         L     R14,PSATOLD         --> OUR TCB
         ICM   R14,7,TCBSVCA2+1-TCB(R14) --> OLD SSSDATA; EXIST?
         $DIE  Z                   NO, LOGIC ERROR
         USING SSSDATA,R14         DCL OLD SSSDATA BASE
         LA    R8,SSSDIQE1         --> OUR (ATTACH) IQE
         CLM   R8,7,SSSDQHED+1     1ST QUEUED?
         $DIE  NE                  NO, LOGIC ERROR
         LA    R15,SSSDLEN         YES, GET COPY SOURCE LENGTH
         LR    R0,R9               --> COPY SINK
         LR    R1,R15              GET COPY SINK LENGTH
         MVCL  R0,R14              MODEL NEW SSSDATA ON OLD SSSDATA
*        NOTE  R15 NEW IS ZEROED.
         DROP  R14                 RELEASE OLD SSSDATA BASE
         USING SSSDATA,R9          DECLARE NEW SSSDATA BASE
         MVI   SSSDMASK,B'10000000' RESET SCREEN MASKS
         MVC   SSSDMASK+1(255),SSSDMASK PROPAGATE
         LA    R12,SSSDIQE1        --> NEW ATTACH IQE
         USING SSSIQE,R12          DCL IQE BASE
         ST    R12,SSSDQHED        STORE 1ST IQE PTR
         ST    R15,SSSDACTV        CLEAR ACTIVE IQE CHAIN
         MVI   SSSDACTV,X'FF'      MAKE ZERO YET NOT ZERO
         SPACE 1
ATHIQELP ST    R15,SSSQLINK        CLEAR CHAIN FIELD
         ST    R15,SSSQALNK        CHEAR CHAIN FIELD
         ST    R15,SSSQSAVE        CLEAR SAVE AREA
         IC    R15,SSSQSVC#        GET SVC #
         LA    R15,SSSDMASK(R15)   --> MASK/COUNTER BYTE
         ICM   R0,1,0(R15)         GET MASK; REACHED 0 YET?
         $DIE  Z                   YES, LOGIC ERROR
         BCTR  R0,0                NO, "INCREMENT" COUNTER
         STCM  R0,1,0(R15)         STORE NEW VALUE
         SPACE 1
ATHIQESK ICM   R8,7,SSSQLINK+1-SSSIQE(R8) --> NEXT OLD IQE; ANY MORE?
         BZ    ATHIQEND            NO, DONE
         TM    SSSQFLAG-SSSIQE(R8),SSSQFSUB YES, SUBTASK PROPAGATION?
         BZ    ATHIQESK            NO, SKIP
         LA    R0,SSSQLEN          YES, GET L'IQE
         GETMAIN RU,LV=(0),SP=253,BRANCH=YES GET AN AREA
*        NOTE  R15 IS NOW ZEROED AGAIN.
         L     ASCBREG,PSAAOLD     RESTORE ASCB PTR
         ST    R1,SSSQLINK         APPEND TO NEW IQE CHAIN
         LR    R12,R1              COPY IQE PTR
         MVC   SSSIQE(SSSQLEN),0(R8) MODEL NEW IQE ON OLD IQE
         B     ATHIQELP            LOOP
         SPACE 1
ATHIQEND CLM   R12,7,SSSDQHED+1    ANY IQE'S PROPAGATED?
         $DIE  E                   NO, LOGIC ERROR
         DROP  R12                 YES, RELEASE IQE BASE
         ST    R9,TCBSVCA2         STORE NEW SCREEN PTR IN NEW TCB
         OI    TCBFLGS7,TCBSVCS    ENABLE NEW SCREENING
         DROP  R9                  RELEASE NEW SSSDATA BASE
         SPACE 3
*************************************************************
*        SET THE NEW SUBTASK DISPATCHABLE.                  *
*************************************************************
         SPACE 1
         TM    RBEXSAVE,ATTPNDSP   SHOULD SUB-TASK BE DISPATCHED?
         BNZ   ATHNDISP            NO, SKIP
         STATUS RESET,ND,(TCBREG),(12),E YES, START THE SUBTASK        *
                                   SIMPLE, WELL-DOCUMENTED INTERFACE
         ORG   *-2                 ERASE THE SVC
         LR    R13,R15             COPY PARAMETER REGISTER
         L     R15,CVTPTR          --> CVT
         L     R15,CVTABEND-CVTMAP(,R15) --> SCVT
         L     R15,SCVTSTAT-SCVTSECT(,R15) --> STATUS ROUTINE
         BALR  R14,R15             BRANCH ENTER IT
ATHNDISP EQU   *
         SPACE 3
*************************************************************
*        RELEASE THE LOCAL LOCK AND RETURN TO CALLER        *
*        (SSSROUTR).                                        *
*************************************************************
         SPACE 1
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=MISC
         L     R13,RBGRS13         RESTORE
         LM    R14,R1,RBEXSAVE+4   RESTORE
         BR    R14                 RETURN TO SSSROUTR
         SPACE 3
         DROP  ,
         TITLE 'SUBSYSTEM SVC SCREEN HANDLER -- STATIC DATA AREA'
MASTERID DC    CL8'SSSH'
         SPACE 3
         LTORG ,
         SPACE 3
         END   ,
