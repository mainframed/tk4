YMRQ     TITLE     'ZEAVEMRQ--POSTFIX ROUTINE TO IEAVEMRQ'
***********************************************************************
*                                                                     *
*        NAME:     ZEAVEMRQ                                           *
*                                                                     *
*        ENTRY:    THIS MODULE IS LINKED "IN FRONT" OF THE ROUTINE    *
*                  WHICH INITIALIZES ADDRESS SPACE CONTROL BLOCKS--   *
*                  IEAVEMRQ.  THUS, IT IS ENTERED WITH THE PARAMETERS *
*                  SET UP FOR THAT ROUTINE.  R13, R14, AND R15 HAVE   *
*                  THEIR NORMAL OS LINKAGE USES.  R1 POINTS TO THE    *
*                  CSCB FOR WHICH THE ADDRESS SPACE IS BEING CREATED. *
*                                                                     *
*        FUNCTION: THE SEQUENCE OF OPERATION OF THIS MODULE IS:       *
*                  1) SAVE REGISTERS.                                 *
*                  2) CALL IEAVEMRQ (WITH THE PARMS PASSED TO US).    *
*                  3) CHECK THE RETURN CODE FROM IEAVEMRQ.            *
*                  4) IF THE R.C. IS NONZERO, RETURN IMMEDIATELY.     *
*                  5) IF THE R.C. IS ZERO, THEN                       *
*                     A) OBTAIN CORE FOR THE XASCB (FROM SUBPOOL      *
*                        XASCSUBP).                                   *
*                     B) INITIALIZE THE XASCB,                        *
*                     C) PUT A POINTER TO IT IN THE XASVT,            *
*                     D) AND RETURN.                                  *
*                                                                     *
*        EXIT:     EXIT IS ALWAYS NORMAL.  THE RETURN CODE FROM       *
*                  IEAVEMRQ IS PASSED BACK IN R15.                    *
*                                                                     *
*        NOTE:     ALTHOUGH THE HEADER INFORMATION IN IEAVEMRQ        *
*                  SPECIFICALLY SAYS THAT NO INFORMATION IS PASSED    *
*                  BACK EXCEPT IN THE CSCB AND REG 15, REG 0 IS       *
*                  IN FACT USED TO PASS BACK THE ASID (WHICH IS       *
*                  ALSO IN THE CSCB) AND AT LEAST ONE CALLER,         *
*                  IEE0803D, DEPENDS ON IT BEING THERE.  THUS,        *
*                  IF R15=0, WE SAVE R0 FOR THE CALLER ALSO.          *
*                                                                     *
*        ATTRIBUTES:  REENTRANT, REFRESHABLE.                         *
*                                                                     *
*        VERSION:  1.0   DATE:  7/24/74   AUTHOR:  T. DAHLQUIST       *
*                                                                     *
***********************************************************************
         PRINT NOGEN
         INITIAL
         EJECT
IEAVEMRQ RSECT LENGTH=DSECTL
RCHAIN   EQU   R11
         USING DSECT,R13
         DO    SAVE -> CSCB
         L     RCHAIN,0(,R1)
         USING CHAIN,RCHAIN
         OD    CSCB ADDRESSABLE.
         DO    CALL IEAVEMRQ
         L     R15,=V(YEAVEMRQ)
         BALR  R14,R15
         LTR   R15,R15        TEST RETURN.
         OD    CALLED, R.C. TESTED.
         IF    *,ZE           IF RETURN CODE IS ZERO,
         DO    SAVE R0 FOR CALLER.
         L     R1,SAVEAREA+4  GET ADDRESS OF CALLERS SAVEAREA,
         ST    R0,12+2*4(,R1) AND PUT R0 INTO SAVED R0.
         OD    R0 SAVED.
         SPACE 1
         DO    GET CORE FOR XASCB AND ZERO.
         L     R0,GETXASC     SUBPOOL, LENGTH
         GETMAIN R,LV=(0)
         USING XASCB,R1
         LR    R2,R1          NOW ZERO.
         LA    R3,XASCBL
         SR    R4,R4
         LR    R5,R4
         MVCL  R2,R4
         OD    R1 -> XASC CORE
         SPACE 1
         DO    INITIALIZE XASC
         LH    R2,CHASID      GET ASID FROM CSCB,
         STH   R2,XASCASID    AND PUT INTO XASC.
         L     R4,CVTPTR      GET -> CVT,
         USING CVT,R4
         L     R3,CVTASVT     GET -> ASVT
         USING ASVT,R3
         SLA   R2,2           CONVERT ASID INTO FULLWORD OFFSET,
         L     R3,ASVTENTY-4(R2)   GET -> ASCB,
         ST    R3,XASCASCB    AND PUT ASCB POINTER INTO XASCB.
         MVC   XASCXASC,=C'XASC'
         OD    XASC INITIALIZED, R2 STILL FULLWORD OFFSET, R4->CVT
         SPACE 1
         DO    PUT XASCB POINTER INTO XASVT.
         L     R3,CVTUSER     GET -> XCVT
         USING XCVT,R3
         L     R3,XCVTXASV    GET -> XASVT
         USING XASVT,R3
         ST    R1,XASVENTY-4(R2)   PUT XASCB POINTER INTO XASVT.
         OD    XASVT -> XASCB
         SR    R15,R15        MAKE SURE THIS DIDN'T GET CLOBBERED.
         FI    ON RETURN CODE FROM IEAVEMRQ.
         SPACE 1
         RRETURN RC=(R15)
         FINAL
         TITLE 'CONSTANTS'
GETXASC  DS    0F
         DC    AL1(XASCSUBP),AL3(XASCBL)
         LTORG
         SPACE 1
         TITLE 'DATA AREA, DSECTS'
DSECT    DSECT DATA AREA
SAVEAREA DS    18F
DSECTL   EQU   *-DSECT
         PRINT GEN
CSCB     DSECT
         IEECHAIN
         CVT   DSECT=YES
         XCVT
         IHAASVT
         XASVT
         XASCB
         END
