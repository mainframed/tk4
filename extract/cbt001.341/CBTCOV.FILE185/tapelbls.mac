         PUNCH '         SETCODE AC(1)'                         YCC DBC
TAPELBLS START
         SAVE  (14,12),,*
         BALR  12,0
         USING *,12
         ST    13,SAVEAREA+4
         LA    11,SAVEAREA
         ST    11,8(13)
         LR    13,11
         LR    10,1          PRESERVE PARM LIST ADDR
         OPEN  (SYSPRINT,OUTPUT)
         TM    SYSPRINT+48,X'10'    SEE IF SUCCESSFULLY OPENED
         BZ    ERROR1        IF NOT, WRITE MESSAGE & FINISH
         BAL   11,TIMEDATE   GET TIME & DATE & PRINT PAGE HEADING
         LR    1,10          RESTORE PARM LIST ADDR TO R1
         L     1,0(1)        GET PARM ADDR
         LH    2,0(1)        GET LENGTH OF PARM
         C     2,=F'0'       SEE IF LENGTH = 0 (IE, NO PARM)
         BE    RDJFCB        BRANCH IF SO
         CLC   2(7,1),=C'LABELS='    SEE IF CORRECT FORM OF PARM
         BNE   ERROR2        IF NOT, PRINT MESSAGE & CONTINUE
         S     2,=F'8'       GET VALUE'S LENGTH - 1, FOR LATER INSTRNS
         BM    ERROR2        BAD PARM:  PRINT MESSAGE & CONTINUE
         STC   2,TRT+1       CHANGE LENGTH IN NEXT INSTRN
TRT      TRT   9(1,1),TABLE  CHECK FOR NUMERICALITY OF PARM'S VALUE
         BC    6,ERROR2      BAD VALUE, PRINT MESSAGE & CONTINUE
         OC    PACK+1(1),TRT+1    OVERLAY 2D LENGTH IN NEXT INSTRN
PACK     PACK  PKDVAL,9(1,1) PACK VALUE IN PARM
         CVB   2,PKDVAL      CONVERT TO BINARY, FOR LOOPING INDEX
         C     2,=F'0'       SEE IF VALUE IS 0
         BE    ERROR2        BAD VALUE, PRINT MESSAGE & CONTINUE
         ST    2,#BLOCKS     STORE NUMBER OF BLOCKS TO BE READ
RDJFCB   RDJFCB TAPE         READ JFCB OF TAPE
         MVI   JFCBAREA+66,X'10'   SET JFCB FOR BYPASS-LABEL PROCESSING
         XR    0,0           ZERO R0
*****    DELETED                                                YCC DBC
*         WTO   ('THIS IS A ''TAPELBLS'' JOB ---- ',D),
*               ('YOU MAY HAVE TO CONSULT THE /*SETUP MESSAGE',D),
*               ('OR THE JOB REQUEST FORM FOR SPECIFIC INFORMATION',D),
*               ('ABOUT THE TAPE TO BE MOUNTED.',DE)
*****    DELETED                                                YCC DBC
         OPEN  (TAPE),TYPE=J OPEN, USING ALTERED, IN-CORE JFCB
         TM    TAPE+48,X'10' SEE IF SUCCESSFULLY OPENED
         BZ    ERROR3        IF NOT, PRINT MESSAGE & FINISH
         GETMAIN EC,LV=32768,A=BUFFERAD    GET CORE FOR BUFFER
         LTR   15,15         SEE IF SUCCESSFULLY OBTAINED
         BNZ   ERROR4        IF NOT, PRINT MESSAGE & FINISH
         OC    CCWREAD(4),BUFFERAD    INSERT BUFFER ADDR IN READ CCW
         L     7,BUFFERAD    LOAD (DEDICATED) R7 WITH BUFFER ADDR
         MVI   0(7),X'00'    FOLLOWING CODE WILL SHORTEN A DUMP,
         LA    2,1(7)        BECAUSE OF SUPPRESSION OF DUPLICATE LINES
         LR    4,7           IN BUFFER
         L     3,=F'32767'
         LR    5,3
         MVCL  2,4           ZERO OUT REMAINDER OF BUFFER
         L     2,#BLOCKS     R2 IS LOOPING REGISTER HEREAFTER
         MVC   CURRCCW,CCWRWD    LOAD CURRENT CCW WITH REWIND CCW
         BAL   10,CHNLPGM    POSITION TAPE TO ITS BEGINNING
         B     READ1         DO FIRST READ
         B     ERROR5        ERROR IN REWIND POSITIONING
         B     ERROR5
READ1    MVC   CURRCCW,CCWREAD    LOAD CURRENT CCW WITH READ CCW
         BAL   10,CHNLPGM    FIRST READ
         B     STARTPRT      UNEVENTFUL COMPLETION
         B     NSL           TM FOUND:  NON-STANDARD-LABELLED TAPE
         B     ERROR6        ERROR IN READING
NSL      BAL   11,PRTDASHS
         B     MAINLOOP
STARTPRT BAL   10,PRINT1A    PRINT 1ST 80 BYTES OF BLOCK
         CLC   0(3,7),=C'VOL'    SEE IF BLOCK BEGINS WITH 'VOL'
         BNE   CHKINDEX      IF NOT, NOT A STANDARD-LABELLED TAPE
MAINLOOP L     2,#BLOCKS     REFRESH LOOPING REGISTER
         MVC   CURRCCW,CCWREAD    LOAD CURRENT CCW WITH READ CCW
         BAL   10,CHNLPGM
         B     X4            UNEVENTFUL, SO SKIP AROUND NEXT BRANCHES
         B     CHKDONE       2D TM IN A ROW:  END OF WRITTEN TAPE?
         B     ERROR6        ERROR IN READING
X4       BAL   10,PRINT1A    PRINT FIRST 80 BYTES OF BLOCK
CHKINDEX BCT   2,X5          SEE IF LOOP EXHAUSTED; SKIP IF NOT
         BAL   11,PRTDASHS   PRINT DASHES, BECAUSE OF TM COMING
         MVC   CURRCCW,CCWADV    LOAD CCW WITH FORWARD-SPACE-FILE CCW
         BAL   10,CHNLPGM
         B     MAINLOOP      UNEVENTFUL, GO TO BEGINNING OF LOOP
         B     ERROR7        SHOULDN'T BE TM HERE
         B     ERROR7        ERROR IN FORWARD POSITIONING
X5       MVC   CURRCCW,CCWREAD    LOAD CURRENT CCW WITH READ CCW
         BAL   10,CHNLPGM
         B     X6            UNEVENTFUL, SO SKIP AHEAD
         B     X5A           TM FOUND, SKIP AHEAD
         B     ERROR6        ERROR IN READING
X5A      BAL   11,PRTDASHS   TM FOUND, SO PRINT DASHES
         B     MAINLOOP      GO TO BEGINNING, TO READ NEW DATASET
X6       BAL   10,PRINT1A    PRINT FIRST 80 BYTES OF BLOCK
         B     CHKINDEX      SEE IF THIS IS LAST BLOCK TO BE PRINTED
         SPACE 5
*----------------------------------------------------------------------
CHNLPGM  XC    ECBLOCK,ECBLOCK    ZERO EVENT CONTROL BLOCK
         XC    3(77,7),3(7)  ZERO BYTES 3-80 OF BUFFER (1-3 LEFT INTACT
*                            FOR HDR CHECK AT 'CHKDONE')
         EXCP  IOBLOCK       EXECUTE CHANNEL PROGRAM
         WAIT  ECB=ECBLOCK   WAIT FOR COMPLETION
         TM    ECBLOCK,X'7F' SEE IF UNEVENTFUL COMPLETION
         BO    0(10)         BRANCH BACK IF SO
         TM    IOBLOCK+12,X'01'    SEE IF TM ENCOUNTERED IN READ
         BO    4(10)         BRANCH TO 2D INSTRN AFTER 'BAL', IF SO
         B     8(10)         OTHERWISE, ERROR IN OPERATION:  STOP
         SPACE 5
*----------------------------------------------------------------------
PRTDASHS LA    3,DASHES
         BAL   10,PRINT1B    NO NEED TO LOAD R3 THERE
         BR    11            BRANCH BACK
         SPACE 5
*----------------------------------------------------------------------
PRINT1A  LR    3,7           LOAD R3 WITH ADDR OF BUFFER
PRINT1B  PUT   SYSPRINT      GET ADDR IN OUTPUT BUFFER
         MVC   0(80,1),0(3)
         BR    10            BRANCH BACK
         SPACE 5
*----------------------------------------------------------------------
TIMEDATE TIME
TIME     ST    0,TIME1       STORE TIME INFORMATION
         MVI   TIME1+3,X'0C' INSERT ZERO & SIGN HALF-BYTES
         UNPK  TIME2+1(5),TIME1+1(3)  UNPACK MINUTES, SECONDS & ZERO
         MVC   TIME2+6(2),TIME2+3  MOVE SECONDS
         MVC   TIME2+4(1),TIME2+2  MOVE LOW-ORDER MINUTE
         MVC   TIME2+3(1),TIME2+1  MOVE HIGH-ORDER MINUTE
         MVI   TIME2+2,C':'  INSERT COLON OVER OLD LOW-ORDER MINUTE
         MVI   TIME2+5,C':'  INSERT COLON OVER ZERO
         MVO   TIME1+2(2),TIME1(1)  SHIFT HOUR BYTE
         MVC   TIME1(2),TIME1+2
         CP    TIME1(2),PKD12  COMPARE HOUR TO PACKED 12
         BNL   T0            BRANCH IF 12 NOON OR LATER
         MVI   XM+1,C'A'     INSERT 'A' TO MAKE 'AM'
T0       CP    TIME1(2),PKD13  COMPARE HOUR TO PACKED 13
         BL    T1            BRANCH IF BEFORE 1 PM
         SP    TIME1(2),PKD12  NORMALIZE HOUR TO 12-HOUR FORM
         B     T2            BRANCH
T1       CP    TIME1(2),PKD0 COMPARE HOUR TO PACKED 0
         BNE   T2            BRANCH IF NOT 12 AM
         AP    TIME1(2),PKD12  NORMALIZE HOUR TO 12-HOUR FORM
T2       UNPK  TIME2(2),TIME1(2)  UNPACK HOUR
         MVZ   TIME2+1(1),TIME2  FIX ZONE FIELD
         CLI   TIME2,C'0'    SEE IF LEADING ZERO IN HOUR
         BNE   T3            BRANCH IF NOT
         MVI   TIME2,C' '    BLANK LEADING ZERO IN HOUR
T3       MVC   PAGEHDR3+34(11),TIME2    INSERT TIME IN PAGEHDR3
DATE     STH   1,PKDDAY+6    STORE JULIAN DAY
         SRA   1,12          SHIFT PACKED YEAR TO LOWER HALF OF R1
         N     1,=X'FFFFFFF0'  ZERO LOW-ORDER HALF-BYTE
         O     1,=X'0000000C'  INSERT SIGN IN HALF-BYTE
         ST    1,PKDYR+4     STORE PACKED YEAR
         UNPK  TIME1,PKDYR+6(2)   UNPACK YEAR
         MVZ   TIME1+3(1),TIME1+2    FIX ZONE FIELD
         MVC   PAGEHDR3+54(2),TIME1+2    INSERT YEAR IN PAGEHDR3
         DP    PKDYR,PKD4    DIVIDE PACKED YEAR BY 4
         CP    PKDYR+6(2),PKD0 SEE IF LEAP YEAR (REMAINDER = 0)
         BNE   T4            BRANCH IF NOT A LEAP YEAR
         CP    PKDDAY,PKD60  COMPARE JULIAN DAY TO 29 FEB
         BL    T4            BRANCH IF BEFORE 29 FEB
         BE    T6            BRANCH IF 29 FEB
         SP    PKDDAY,PKD1   PREPARE FOR NON-LEAP-YEAR MONTH INDEX
T4       CVB   2,PKDDAY      CONVERT, FOR INDEXING
         XR    5,5           ZERO R5, FOR INDEXING
         IC    5,MONTHPTR(2) GET MONTH INDEX (0-11)
         M     4,=F'3'       MULTIPLY BY 3, FOR 3-BYTE INDEXING
         LA    4,MONTHLST(5) GET ADDR OF MONTH
         MVC   PAGEHDR3+50(3),0(4) INSERT MONTH IN PAGEHDR3
         XR    4,4           ZERO R4, FOR DIVISION
         D     4,=F'3'       RESTORE MONTH INDEX
         M     4,=F'4'       MULTIPLY BY 4, FOR FULLWORD INDEXING
         S     2,CUMDAYS(5)  SUBTRACT CUMULATIVE DAYS
         CVD   2,PKDDAY      CONVERT TO PACKED DAY OF MONTH
         UNPK  TIME1,PKDDAY  UNPACK
         MVZ   TIME1+3(1),TIME1+2    FIX ZONE FIELD
         CLI   TIME1+2,C'0'  SEE IF LEADING ZERO IN DAY OF MONTH
         BNE   T5            BRANCH IF NO LEADING ZERO
         MVI   TIME1+2,C' '  BLANK LEADING ZERO
T5       MVC   PAGEHDR3+47(2),TIME1+2   INSERT DAY OF MONTH IN PAGEHDR3
         B     HEADPAGE      SKIP NEXT INSTRUCTION
T6       MVC   PAGEHDR3+47(6),=C'29 FEB'    INSERT IN PAGEHDR3
HEADPAGE PUT   SYSPRINT
         MVC   0(80,1),PAGEHDR1
         PUT   SYSPRINT
         MVC   0(80,1),PAGEHDR2
         PUT   SYSPRINT
         MVC   0(80,1),PAGEHDR3
         PUT   SYSPRINT
         MVC   0(80,1),PAGEHDR2
         PUT   SYSPRINT
         MVC   0(80,1),PAGEHDR1
         PUT   SYSPRINT      PRINT A BLANK LINE
         XC    0(80,1),0(1)
         BR    11            BRANCH BACK
         SPACE 5
*----------------------------------------------------------------------
ERROR1   WTO   'NO ''SYSPRINT'' DD STATEMENT',ROUTCDE=11
         MVI   RETCODE+3,12  SET RETURN CODE
         B     CLOSE2
         SPACE
ERROR2   PUT   SYSPRINT
         MVC   0(80,1),ERRMSG1    (INVALID PARM, 'LABELS=2' USED)
         PUT   SYSPRINT      PRINT A BLANK LINE
         XC    0(80,1),0(1)
         MVI   RETCODE+3,4   SET RETURN CODE
         B     RDJFCB
         SPACE
ERROR3   PUT   SYSPRINT
         MVC   0(80,1),ERRMSG2    (NO 'TAPE' DD STATEMENT)
         MVI   RETCODE+3,12  SET RETURN CODE
         B     CLOSE1
         SPACE
ERROR4   PUT   SYSPRINT
         MVC   0(80,1),ERRMSG3    (NOT ENOUGH CORE)
         MVI   RETCODE+3,12  SET RETURN CODE
         B     CLOSE1
         SPACE
ERROR5   PUT   SYSPRINT      PRINT A BLANK LINE
         XC    0(80,1),0(1)
         PUT   SYSPRINT
         MVC   0(80,1),ERRMSG4    (ERROR IN REWIND POSITIONING)
         CLOSE SYSPRINT
         ABEND 111,DUMP,STEP
         SPACE
ERROR6   PUT   SYSPRINT      PRINT A BLANK LINE
         XC    0(80,1),0(1)
         PUT   SYSPRINT
         MVC   0(80,1),ERRMSG5    (ERROR IN READING TAPE)
         CLOSE SYSPRINT
         ABEND 333,DUMP,STEP
         SPACE
ERROR7   PUT   SYSPRINT      PRINT A BLANK LINE
         XC    0(80,1),0(1)
         PUT   SYSPRINT
         MVC   0(80,1),ERRMSG6    (ERROR IN FORWARD POSITIONING)
         CLOSE SYSPRINT
         ABEND 222,DUMP,STEP
         SPACE 5
*----------------------------------------------------------------------
CHKDONE  BAL   11,PRTDASHS
         CLC   0(3,7),=C'HDR'  SEE IF LAST BLOCK WAS STANDARD HDR BLOCK
         BE    MAINLOOP        IF SO, THIS WAS AN EMPTY DATASET
         CLC   0(3,7),=C'UHL'  SEE IF LAST BLOCK WAS USER HDR BLOCK
         BE    MAINLOOP        IF SO, DITTO
DONE     FREEMAIN E,LV=32768,A=BUFFERAD
CLOSE1   CLOSE TAPE
CLOSE2   CLOSE SYSPRINT
         L     15,RETCODE    LOAD RETURN CODE
         L     13,SAVEAREA+4
RETURN   RETURN (14,12),RC=(15)
         EJECT
*----------------------------------------------------------------------
*----------- CONSTANTS AND STORAGE AREAS ------------------------------
*----------------------------------------------------------------------
         SPACE 5
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PL,DSORG=PS,LRECL=80,             X
               BLKSIZE=4000,RECFM=FB
         EJECT
TAPE     DCB   DDNAME=TAPE,MACRF=E,DSORG=PS,EXLST=JFCBADDR
         EJECT
SAVEAREA DS    18F
CURRCCW  DS    D
CCWRWD   DC    X'0700000000000001'
CCWREAD  DC    X'0200000020007FFF'
CCWADV   DC    X'3F00000000000001'
ECBLOCK  DS    F
IOBLOCK  DC    X'02000000'
         DC    A(ECBLOCK)
         DS    2F
         DC    A(CURRCCW)
         DC    A(TAPE)
         DS    F
         DC    H'1'
         DS    H
PKDVAL   DS    D
TABLE    DC    240X'01'
         DC    10X'00'
         DC    6X'01'
JFCBADDR DC    X'87'
         DC    AL3(JFCBAREA)
JFCBAREA DS    CL176
ERRMSG1  DC    CL80'INVALID PARM, ''LABELS=2'' ASSUMED'
ERRMSG2  DC    CL80'NO ''TAPE'' DD STATEMENT'
ERRMSG3  DC    CL80'NOT ENOUGH CORE'
ERRMSG4  DC    CL80'ERROR IN REWIND POSITIONING'
ERRMSG5  DC    CL80'ERROR IN READING TAPE'
ERRMSG6  DC    CL80'ERROR IN FORWARD POSITIONING'
DASHES   DC    80C'-'
#BLOCKS  DC    F'2'
BUFFERAD DS    F
RETCODE  DC    F'0'
TIME1    DS    F
TIME2    DS    D
XM       DC    C' PM'
PKD0     DC    PL1'0'
PKD1     DC    PL2'1'
PKD4     DC    PL2'4'
PKD12    DC    PL2'12'
PKD13    DC    PL2'13'
PKD60    DC    PL2'60'
PKDDAY   DC    D'0'
PKDYR    DC    D'0'
PAGEHDR1 DC    80C'*'
PAGEHDR2 DC    C'*'
         DC    CL78' '
         DC    C'*'
PAGEHDR3 DC    C'*'
         DC    CL23' '
         DC    C'TAPELBLS, 00:00:00 XM, 00 000 00'
         DC    CL23' '
         DC    C'*'
MONTHPTR DC    31X'00'         USED AS OFFSETS IN INDEXING
         DC    28X'01'
         DC    31X'02'
         DC    30X'03'
         DC    31X'04'
         DC    30X'05'
         DC    31X'06'
         DC    31X'07'
         DC    30X'08'
         DC    31X'09'
         DC    30X'0A'
         DC    31X'0B'
CUMDAYS  DC    F'0,31,59,90,120,151,181,212,243,273,304,334'
MONTHLST DC    C'JAN'
         DC    C'FEB'
         DC    C'MAR'
         DC    C'APR'
         DC    C'MAY'
         DC    C'JUN'
         DC    C'JUL'
         DC    C'AUG'
         DC    C'SEP'
         DC    C'OCT'
         DC    C'NOV'
         DC    C'DEC'
         END TAPELBLS
