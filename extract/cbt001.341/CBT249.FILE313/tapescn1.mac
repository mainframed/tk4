TSCN TITLE 'TAPESCAN 3.4  -  GSFC TAPE ANALYSIS AND COPYING UTILITY'
* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL
* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL
* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.
* SEE IRSS MEMO SSSL-7-3 FOR FURTHER DOCUMENTATION.
* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS
* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT
* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH
* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.
* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC
* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT
* CENTER, JANUARY 1975.
* VERSION 3.2 CORRECTED VARIOUS BUGS.
* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.
* VERSION 3.4 ADDS 6250 BPI TAPE HANDLING.
*   08DEC78  FRANK PAJERSKI  MEMOREX
*      . MAX BLKSIZE REDUCED FROM 32767 TO 32760 TO KEEP MVS HAPPY
*
* PLACEMENT OF PROGRAM SECTIONS: INIT CODE, INIT SUBS, INIT VARS,
* INIT LITS, COMMON ROUTINES, COMMON VARS, COMMON LITS, MAIN CODE,
* MAIN SUBS, MAIN VARS, MAIN LITS.
MSECT    DSECT
TRT1     DS    32D
BLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST
TRT2     DS    32D
MSGBUF   DS    CL136
RECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 32K
TAPESCAN CSECT
R0       EQU   0   WORK REG + SYSTEM USES
R1       EQU   1   WORK REG + SYSTEM USES
R2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM
R3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB-
R4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  *
                   TAPEMARK OR THE LOAD POINT.
R5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE
R6       EQU   6   WORK REG
R7       EQU   7   WORK REG + LENGTH OF LAST BLK READ
R8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR
R9       EQU   9   BASE REG FOR DSECT MSECT
R10      EQU   10  FREE UNUSED REG
R11      EQU   11  2ND BASE REG
R12      EQU   12  1ST BASE REG
R13      EQU   13
R14      EQU   14  WORK REG + SYSTEM USES
R15      EQU   15  WORK REG + SYSTEM USES
DCBTRTCH EQU   16
DCBDEN   EQU   18
DCBEODAD EQU   32
DCBDEBAD EQU   44
DCBOFLGS EQU   48
DCBBLKSI EQU   62
DCBIOBA  EQU   68                 PTR TO IOB'S BSAM PREFIX
IOBECBPT EQU   4
IOBSTART EQU   16
DEBUCBAD EQU   32
JFCBTSDM EQU   52
JFCBLTYP EQU   66                 LABEL TYPE (AL, LTM, ETC.)
JFCBFLSQ EQU   68                 FILE SEQUENCE NUMBER, 0 OR 1 =1ST
JFCBVOLS EQU   118                1ST BYTE OF JFCB VOLUME LIST
*        PRINT NOGEN
         USING *,R12              BASE FOR INITIALIZATION ONLY
         STM   14,12,12(13)
         LR    R12,R15            R12 = TEMP BASE FOR INITIALIZATION
         LA    R11,EXIT           PERMANENT BASE FOR MAIN AND COMMON
         USING EXIT,R11
         LA    R9,SAVE
         ST    R9,8(R13)
         ST    13,SAVE+4
         LR    R13,R9
         L     R1,0(R1)           GET PTR TO PARM FIELD
         LH    R8,0(R1)           LOAD PARM FIELD LENGTH
         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING
         LA    R9,SRCHPRM         LOAD TEMPORARY BASE FOR MSECT DSECT
         USING MSECT,R9           PERMANENT DECLARATION FOR MSECT BASE
         OPEN  (SYSPRINT,OUTPUT)
         TM    SYSPRINT+DCBOFLGS,X'10'
         BZ    EXITRC8
         GETMAIN VU,LA=GMCTRL,A=GMLOCS
         L     R9,GMLOCS          THERE IS AT LEAST THE MINIMUM CORE
*              ABOVE STMT SETS UP PERMANENT BASE FOR MSECT DSECT
*        MVI   BLANKBUF,C' '           (POSTPONE TIL AFTER CLEAR) -CWB-
*        MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-
         LR    R6,R9              START CLEARING GOTTEN MAIN TO        *
                                  SHORTEN POSSIBLE DUMPS.
         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN
         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN
CLOOP    CR    R4,R5              R5 CONTAINS F'256'
         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT
         XC    0(256,R6),0(R6)    CLEAR 256 BYTES
         SR    R4,R5              R5 CONTAINS F'256'
         AR    R6,R5              R5 CONTAINS F'256'
         B     CLOOP
LE256    BCTR  R4,0               SET TO MACHINE LENGTH
         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES
XCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE
         MVI   BLANKBUF,C' '           CLEAR BLANK AREA.          -CWB-
         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-
         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB-
         ST    R1,AMSGBP46        STORAGE.                        -CWB-
         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB-
         ST    R1,AMSGBP72                                        -CWB-
         LA    R15,RECBUF         POINT THE WRITE
         O     R15,WRTCMND        CCW TO DYNAMICALLY
         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.
         LA    R15,RECBUF         SET FILE SEARCH CCW TO
         O     R15,READ81CM       POINT TO
         ST    R15,READ81CM
         LA    R15,RECBUF         INSERT POINTER IN               -CWB-
         O     R15,READCMND            READ COMMAND.              -CWB-
         ST    R15,READCMND                                       -CWB-
         LR    R5,R9              PTR TO TRT1
         LA    R6,16
         LA    R7,CTABLE
SETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1
         MVC   1(15,5),0(5)       AND PROPAGATE IT
         LA    5,16(5)
         LA    7,1(7)
         BCT   6,SETUPTR1
         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2
         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES
         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF
         ST    R0,BADLNGTH        SAVE TIME WHILE YOU'RE AT IT
         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE
         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD
         L     R15,=V(DATE)       IRSS DATE SUBROUTINE (DATECONV)
         BALR  R14,R15            CONVERT 00YYJJJF TO MM/DD/YY
         ED    TIMERSLT,BADLNGTH  EDIT INTO PAGE HEADER LINE BUFFER
*        SR    R0,R0              SET TO AVOID RESERVING ANY LINES
*        BAL   R2,PAGECHK         PRINT PAGE HEADER
         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB
         LTR   R15,R15            SEE IF DD STATEMENT THERE
         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT
         MVC   DDVOL,JFCBIN+JFCBVOLS  PUT VOL INTO PAGE HEAD.     -CWB-
         MVC   JFCLTSV,JFCBIN+JFCBLTYP SAVE INPUT TAPE'S LABEL TYPE
         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED
         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS
         MVI   JFCBIN+JFCBLTYP,X'10' ELSE SET TO BLP
         MVC   JFCBIN+JFCBFLSQ(2),=H'1' SET FILE SEQ. NO. TO = 1
         OPEN  (INPUT),TYPE=J
         TM    INPUT+DCBOFLGS,X'10'
         BZ    NOINPUT            TERMINAL ERROR
         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH
         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN
         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED
         CVD   R1,BADLNGTH        CONVERT DIFERENCE TO PACKED DECIMAL
         UNPK  MORECORE+33(5),BADLNGTH
         OI    MORECORE+37,C'0'
         LH    R2,INPUT+DCBBLKSI  TO PREVENT DATA 'OVERRUNS'
         SR    R2,R1              SUBTRACT DIFFERENCE OF MORE CORE
         STH   R2,INPUT+DCBBLKSI  AND PUT BACK IN DCB
         BAL   R2,PUTLINE
         MVC   MSGBUF(L'MORECORE),MORECORE
SENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL
         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL
         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE
         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED
         BO    SRCHPRM            BIF LOAD POINT SENSED
         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN
         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL
         BAL   R4,EXECEXCP
         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT
         BO    SRCHPRM            BIF AT LOAD POINT
         BAL   R2,PUTLINE         PRINT ERROR MESSAGE
         MVC   MSGBUF(66),=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT*
                - TERMINATING EXECUTION'
         B     EXITRC8
SRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH
         BNH   ENDPARMS
         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER
         LR    R4,R3              SAVE PTR TO START OF PARM
SRCHCOMA CLI   0(R3),C','
         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR
         BE    GOTCOMMA
         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM
         BCT   R8,SRCHCOMA
GOTCOMMA CLC   0(6,R4),=C'NOLIST' GET HERE IF COMMA OR END OF PARM LIST
         BE    NOLIST
         CLC   0(4,4),=C'LIST'
         BE    LIST
         CLC   0(5,4),=C'MAXTM'   INITIALLY 32760           FJP/08DEC78
         BE    MAXTM
         CLC   0(6,4),=C'SKIPTM'
         BE    SKIPTM
         CLC   0(5,4),=C'NOHEX'
         BE    NOHEX
         CLC   0(6,4),=C'MAXEOV'
         BE    MAXEOV
         CLC   0(7,4),=C'SKIPEOV'
         BE    SKIPEOV
         CLC   0(9,4),=C'NOSUMMARY'
         BE    NOSUMARY
         CLC   0(5,4),=C'COUNT'
         BE    COUNT
         CLC   0(7,4),=C'NOCOUNT'
         BE    NOCOUNT
         CLC   0(6,4),=C'ERRLIM'
         BE    ERRLIM
         CLC   0(4,4),=C'COPY'
         BE    COPY               TAPE COPYING OPTION
         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS
         BE    EOVMOD
         CLC   0(8,4),=C'NOVOLSER'
         BE    NOVOLSER
         CLC   0(3,4),=C'OPT'
         BE    OPT                MISCELLANEOUS OPTIONS
UNRECOG  BAL   R2,PUTLINE
         MVC   MSGBUF(33),=C'0ERROR - UNRECOGNIZABLE PARAMETER'
PRLENERR BAL   2,PUTLINE
         MVC   MSGBUF(32),=C'0WARNING - INVALID PARM IGNORED.'
SRCHPARM BCTR  R8,0
         B     SRCHPRM
GETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB
         SR    6,6                CLEAR ACCUMULATOR
         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         *
         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           *
         CLI   0(4),C'0'          * RESULT RETURNED IN R6             *
         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   *
         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          *
         IC    R7,0(4)            PICK UP DECIMAL CHARACTER
         SLL   7,28               CHOP OFF LEFT 4 BITS
         SRL   7,28               AND SHIFT BACK
         AR    6,7                ADD DIGIT INTO RESULT
         LA    4,1(4)             BUMP PTR TO NEXT CHAR
         BCT   5,GETNUM+2         GO TO TOP OF LOOP
         BR    2                  RETURN FROM GETNUM SUBROUTINE
NUMERR   BAL   R2,PUTLINE         ERROR DESCRIPTOR SUBROUTINE
         MVC   MSGBUF(50),=C'0ERROR - PARAMETER HAS INVALID NUMERICAL C*
               OMPONENT'
         B     PRLENERR
NOCOUNT  CH    R5,=H'7'
         BNE   PRLENERR           *** WARNING *** MODIFIED IN COPY/MOD *
                                                  OPTION ROUTINES.
         MVI   COUNTFLG,C'N'
         B     SRCHPARM
COUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION
         BNE   UNRECOG
         MVI   COUNTFLG,C'Y'
         B     SRCHPARM
NOVOLSER CH    R5,=H'8'
         BNE   UNRECOG
         MVI   SVOUTFLG,C'Y'      SET 'NOVOLSER SPECIFIED' FLAG
*        TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF N-CWB-
*        BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.        -CWB-
         OI    WRTFLG,X'04'       OR IN 'DO NOT COPY INPUT VOL LABEL'
         B     COPY+8             NOVOLSER IMPLIES COPY.          -CWB-
COPY     CH    R5,=H'4'
         BNE   UNRECOG
         OI    COPYFLG,X'01'      INDICATE COPY OPTION SPECIFIED
         OI    WRTFLG,X'01'       INDICATE COPY   REQUESTED (THAT BIT)
         OI    NOCOUNT+5,X'F0'    NOP OUT NOCOUNT & SET FOR WARN MSG
         B     COUNT+8            COPY OPTION INVOKES COUNT AUTOMATICLY
EOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV
         BNE   UNRECOG
         OI    COPYFLG,X'03'      BITS = 'COPY OPT + MOD OPT REQUESTED'
         B     NOVOLSER+8          MOD IMPLIES NOVOLSER OPTION.   -CWB-
OPT      CH    R5,=H'3'
         BNH   PRLENERR
         LA    R4,4(R4)
         SH    R5,=H'4'
         BAL   R2,GETNUM
         ST    R6,OPTNO
         B     SRCHPARM
ERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT
         BNH   PRLENERR
         LA    R4,6(R4)
         SH    R5,=H'6'
         BAL   R2,GETNUM
         ST    R6,SYNADNO
         B     SRCHPARM
NOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM
         BNE   UNRECOG
         SR    R0,R0
         ST    R0,LISTNO
         B     SRCHPARM
LIST     CH    R5,=H'4'
         BNH   PRLENERR
         LA    R4,4(R4)
         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER
         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM
         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER
         B     SRCHPARM
NOHEX    CH    R5,=H'5'
         BNE   UNRECOG
         MVI   HEXFLG,C'N'
         B     SRCHPARM
NOSUMARY CH    R5,=H'9'
         BNE   UNRECOG
         MVI   SUMFLG,C'N'        SET SUMMARY FLAG TO 'NOSUMMARY'
         LA    R0,1               READ MINIMUM OF 1 BLK AFTER A TAPEMRK
         ST    R0,READNO          SET # OF BLKS TO READ FOR SUMMARY=0
         B     SRCHPARM
SKIPTM   CH    R5,=H'6'
         BNH   PRLENERR
         LA    R4,6(R4)
         SH    R5,=H'6'
         BAL   R2,GETNUM
         ST    R6,SKIPTMNO
         B     SRCHPARM
MAXTM    CH    R5,=H'5'
         BNH   PRLENERR
         LA    R4,5(4)
         SH    R5,=H'5'
         BAL   R2,GETNUM
         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0
         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM
         ST    R6,MAXTMNO
         B     SRCHPARM
SKIPEOV  CH    R5,=H'7'
         BNH   PRLENERR
         LA    R4,7(R4)
         SH    R5,=H'7'
         BAL   R2,GETNUM
         ST    R6,SKPEOVNO
         B     SRCHPARM
MAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM
         BNH   PRLENERR           LENGTH MUST BE GREATER THAN 6
         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER
         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER
         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM
         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0
         BZ    NUMERR             INVALID NUMERICAL COMPONENT
         ST    R6,MAXEOVNO        STORE RESULT
         B     SRCHPARM
ENDPARMS DS    0H
         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING
         BL    *+26               SKIP IF NO ERROR
         BAL   R2,PUTLINE
         MVC   MSGBUF(48),=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MA*
               XEOV-1'
         L     R2,MAXEOVNO
         SH    R2,=H'1'
         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1
         CLC   SKIPTMNO,MAXTMNO
         BL    *+26               SKIP IF SKIPTMNO & MAXTMNO CONSISTENT
         BAL   R2,PUTLINE         PRINT ERROR MESSAGE
         MVC   MSGBUF(44),=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM*
               -1'
         L     R2,MAXTMNO         MAXIMUM ON TAPEMARKS TO BE READ
         SH    R2,=H'1'
         ST    R2,SKIPTMNO        STORE AS MAXTM-1
         TM    COPYFLG,X'01'      SEE IF COPY AND/OR MOD SPECIFIED
         BZ    NOTBOTH            BIF COPY OPTION NOT SPECIFIED
         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS
         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT
         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG
         MVC   POSMSG+22(6),JFCBOUT+JFCBVOLS  PUT VOL IN MSG.     -CWB-
         MVC   OUTLTYP,JFCBOUT+JFCBLTYP SAVE LABEL TYPE FOR OUTPUT TAPE
         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM
         BO    *+8                BIF YES - IT IS NL OR LTM
         MVI   JFCBOUT+JFCBLTYP,X'10' ELSE SET TO BLP
*COMMENT OI    JFCBOUT+JFCBTSDM,X'08' INHIBIT WRITING BACK OF JFCB
         LA    R0,1
         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.
         LTR   R2,R2              BUT IF IT'S
         BNZ   *+6                EQUAL TO ZERO THEN
         LR    R2,R0              SET IT TO = 1.
         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1
         OPEN  (OUTPUT,OUTPUT),TYPE=J
         TM    OUTPUT+DCBOFLGS,X'10' CHECK IF OPENED SUCCESSFULLY
         BZ    NOOUTPUT
         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB-
         IC    R0,OUTPUT+DCBIOBA  CHANGE DCB POINTER FROM EXCP-   -CWB-
         ST    R1,OUTPUT+DCBIOBA       TYPE TO BSAM-TYPE POINTER  -CWB-
         STC   R0,OUTPUT+DCBIOBA       FOR "EXECEXCP" CONSISTANCY.-CWB-
         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB
         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL
         BZ    COPYOUT            BIF NOT ONE OF ABOVE
         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB-
         LA    R2,OUTPUT               LABEL (CHANGED FROM BSAM   -CWB-
         BAL   R4,EXECEXCP             READING).                  -CWB-
         LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB-
         LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB-
         SR    R7,R6
         BNH   BADREC             VERY BAD IF RECORD LENGTH LT 1
         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL
         BO    COPYSL             BIF SL OR SUL
*COPYAL  CLC   RECBUF(4),=X'B6AFAC51'  SEE IF ANSI 'VOL1'
         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI
         C     R7,=F'80'
         BL    BADOUTVL
         B     REWINDCK
COPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES
         BNE   BADOUTVL           BIF PRESUMED IBM LABEL NOT 80 BYTES
         CLC   RECBUF(4),=C'VOL1'
         BNE   BADOUTVL
         CLC   JFCBOUT+JFCBVOLS(6),RECBUF+4 COMPARE VOL SERS
         BNE   BADOUTVL
REWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1
         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1
         TM    COPYFLG,X'02'      DO NOT REWIND IF EOVMOD SPECIFIED
         BO    COPYOUT            DO NOT REWIND IF EOVMOD SPECIFIED
         CLI   SVOUTFLG,C'Y'      DO NOT REWIND IF NOVOLSER SPECIFIED
         BE    COPYOUT            DO NOT REWIND IF NOVOLSER SPECIFIED
         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND
         LA    R2,OUTPUT          OUTPUT DCB
         BAL   R4,EXECEXCP        REWIND AND SENSE
         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED
         BO    COPYOUT            BIF SENSED LOADPOINT
         BAL   R2,PUTLINE
         MVC   MSGBUF(67),=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POIN*
               T - TERMINATING EXECUTION'
         B     EXITRC8
BADOUTVL BAL   R2,PUTLINE
         MVC   MSGBUF(32),=C'0OUTPUT VOLUME LABEL IS INVALID:'
         LR    R3,R12             PROVIDE PROPER ADDRESSABILITY.
         L     R12,=A(EXIT+4096)
         DROP  R12
         USING TAPESCAN,R3
         BAL   R5,LISTON
         B     EXITRC8
         LR    R12,R3             RESTORE ADDRESSABILITY.
         DROP  R3
         USING TAPESCAN,R12
COPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE
         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN
         ST    R0,OUTPUT+DCBEODAD AND SET IT UP IN DCB.
FILELOOP TM    COPYFLG,X'02'      SEE IF MOD SPECIFIED
         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK
         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?
         BNL   FILEMSG            BIF YES
FILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK
         LA    R2,OUTPUT
         BAL   R4,EXECEXCP
         LA    R0,1               MAINTAIN
         AH    R0,COUTFILE        CURRENT FILE
         STH   R0,COUTFILE        NUMBER.
         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE
         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE
         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED
         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED
         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB-
         LA    R2,OUTPUT               FOLLOWS THE TAPE MARK.     -CWB-
         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB-
         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON
FILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV
         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB
         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK
         BAL   R4,EXECEXCP
         LH    R0,COUTFILE        AND
         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY
         STH   R0,COUTFILE
FILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG
         LH    R1,COUTFILE
         CVD   R1,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  POSMSG+32(4),BADLNGTH TELL WHERE 1ST FILE OUTPUT GO-CWB-
         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB-
         BAL   R2,PUTLINE
         MVC   MSGBUF(L'POSMSG),POSMSG
         B     NOTBOTH
EODADOUT LA    R0,1               COUNT
         AH    R0,COUTFILE        THIS
         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).
         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK
         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK
         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED
         BO    FILEPOS            BIF EOVMOD SPECIFIED
         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS
         BO    FILEPOS            BIF IT IS SPECIFIED
         B     BADEOV             GIVE 'EM HELL, HARRY!
TOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456
         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK
BADEOV   BAL   R2,PUTLINE
         MVC   MSGBUF(83),=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE*
                OUTPUT TAPE FINISHED INITIAL POSITIONING'
         B     EXITRC8
EODADBAD BAL   R2,PUTLINE
         MVC   MSGBUF(092),=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWI*
               NG LOAD POINT, BUT NEITHER LTM OR BLP WAS SPECIFIED'
*                                 (LENGTH FIELD CORRECTED.)       -CWB-
         B     EXITRC8
NOTBOTH  DS    0H
         L     R12,=A(EXIT+4096)  LOAD 2ND BASE REG FOR MAIN CODE
         DROP  R12                DROP R12 FOR COMMON STUFF, ONLY R11
         B     SKIPEOVP           INITIALIZATION ENDS HERE
         USING TAPESCAN,R12
NOOUTPUT MVC   BADINPUT+1(6),=C'OUTPUT'
NOINPUT  BAL   R2,PUTLINE         BAD OR MISSING DD ROUTINE
         MVC   MSGBUF(L'BADINPUT),BADINPUT
         B     EXITRC8
         DROP  R12
BSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP
         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES
READ81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY
         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG
JFCBOUT  DS    22D
JOUTFLSQ EQU   JFCBOUT+JFCBFLSQ
EXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)
GMCTRL   DC    A(RECBUF+136-TRT1)  MINIMUM LENGTH FOR THE GETMAIN
         DC    A(RECBUF-TRT1+32768) MAXIMUM LENGTH FOR THE GETMAIN
GMLOCS   DC    2F'0'
EXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB
         DC    X'87'              LAST ENTRY AND RDJFCB
         DC    AL3(JFCBIN)        BUFFER FOR INPUT TAPE'S JFCB
BADINPUT DC    C'0INPUT  DD STATEMENT MISSING OR INVALID'
POSMSG   DC    C'0FIRST OUTPUT FILE ON VVVVVV IS 0000 -- LABEL=(0000,BL*
               P)'                                                -CWB-
MORECORE DC    C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF CO*
               RE FOR RELIABLE OPERATION; PROCESSING WILL BE ATTEMPTED *
               ANYWAY.'
CTABLE   DC    C'0123456789ABCDEF'
SVOUTFLG DC    C'N'               C'Y' = 'SAVE OUTPUT VOL LABEL '
VERIFLG  DC    C'N'
OUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE
COPYFLG  DC    X'00'              COPY AND MOD OPTION REQUEST BITS
         LTORG
* COMMON ROUTINES FOR BOTH INITIALIZATION AND MAIN ARE HERE.
EXIT     MVI   RCINSTR+3,X'00'    NORMAL END, SET RET CODE = 0
EXITRC8  DS    0H                                                 -CWB-
         TM    OUTPUT+DCBOFLGS,X'10'  IS OUTPUT DCB OPEN?         -CWB-
         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB-
         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB-
         IC    R0,OUTPUT+DCBIOBA       TO POINT TO TRUE IOB, NOT  -CWB-
         ST    R1,OUTPUT+DCBIOBA       BSAM-TYPE IOB PREFIX.      -CWB-
         STC   R0,OUTPUT+DCBIOBA                                  -CWB-
         NI    OUTPUT+DCBOFLGS,X'7F'   PRETEND LAST I/O WAS A     -CWB-
         OI    OUTPUT+DCBOFLGS,X'04'   READ TO AVOID WRITING A    -CWB-
*                                      TAPE MARK.                 -CWB-
         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB-
CLOSEIN  TM    INPUT+DCBOFLGS,X'10'  IS INPUT TAPE OPEN?          -CWB-
         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB-
*                                      DID IT.                    -CWB-
         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB-
NOTOPEN  DS    0H                                                 -CWB-
         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA
         LM    14,12,12(13)
RCINSTR  LA    15,8
         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES
PUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1
         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST
PUTLINE2 EX    0,0(R2)            GENERAL PRINTING SUBROUTINE, ENTRY 2
PUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3
         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK
         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO
         BE    C0                 BIF IS A ZERO
         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS
         B     LNCOUNT
C0       LA    R0,2               COUNT TWO LINES
         B     LNCOUNT
         LA    R0,1               COUNT ONE LINE
LNCOUNT  A     R0,LINENO
         ST    R0,LINENO
         C     R0,=F'60'                                    FJP/27NOV78
         BNH   SAMEPAGE
         MVC   PAGECHAR,=X'40202120' EDIT PATTERN
         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-
         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-
         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-
         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-
         ED    PAGECHAR,DBLPAGE+6                                 -CWB-
         MVI   LINENO+3,X'00'
         PUT   SYSPRINT,PAGEHDR
SAMEPAGE PUT   SYSPRINT,MSGBUF
         B     6(R2)              RETURN FROM PUTLINE SUBROUTINE
PAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE
         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO
         C     R0,=F'60'         COMPARE TO MAX LINE #      FJP/27NOV78
         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM
         MVI   LINENO+3,0         ZERO LINE COUNTER
*        AP    PAGEPACK,=P'1'     COUNT NEW PAGE                  -CWB-
         MVC   PAGECHAR,=X'40202120'
*        ED    PAGECHAR,PAGEPACK                                  -CWB-
         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-
         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-
         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-
         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-
         ED    PAGECHAR,DBLPAGE+6                                 -CWB-
         PUT   SYSPRINT,PAGEHDR
         BR    R2
*BADREC  WTL   'BAD (0) BLOCK SIZE' (OFTEN MEANS TAPE OFF END OF REEL)
BADREC   DS    0H                                               -CWB-
         BAL   R2,PUTLINE
         MVC   MSGBUF(L'BADRECM),BADRECM
         B     EXITRC8
SYNERR   SYNADAF ACSMETH=BSAM
SYNERR2  ST    R14,SVR14
         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE
         BNE   DIRECT
         LH    R14,12(R1)         LOAD NO. OF BYTES READ
         CVD   R14,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  32(5,R1),BADLNGTH
         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='
DIRECT   BAL   R2,PUTLINE         PRINT SYNAD ERROR MESSAGE
         MVC   MSGBUF(120),8(R1)
         LA    R14,1
         A     R14,ERRCOUNT       INCREMENT ERROR COUNT
         ST    R14,ERRCOUNT
         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT
         BH    TOOMANY            PRINT MSG & EXIT IF ERR LIM EXCEEDED
         SYNADRLS
         L     R14,SVR14
         BR    R14
TOOMANY  BAL   R2,PUTLINE         YOU SHOULD PROBABLY SET ERRLIM TO 0 -
         MVC   MSGBUF(55),=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O*
                ERROR COUNT.'
         B     EXITRC8            FOR TAPE COPYING OPERATIONS.
EXECEXCP DS    0H                 EXCP SUBROUTINE, R2=PTR TO DCB, AND  *
                                  R1=PTR TO 3-BYTE ADCON WHICH POINTS  *
                                  TO CHANNEL PROGRAM.
         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB-
         L     R2,DCBIOBA(R2)     GET PTR TO A BSAM IOB PREFIX
         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW
         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG
         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX
         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB
         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX
         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB
         WAIT  ECB=4(R2)
         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB-
         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW
         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY
         BCR   8,R4               RETURN IF IT DID
         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB-
         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB-
         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB-
         BNE   DOSYN              IF NOT, DO ERROR.               -CWB-
         LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB-
         CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB-
         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB-
         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB-
         L     R1,DCBEODAD(R1)    GO TO EODAD ROUTINE.            -CWB-
         BR    R1                                                 -CWB-
DOSYN    DS    0H                                                 -CWB-
         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO
         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED
         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR
         BR    R4
SAVE     DS    9D
JFCBIN   DS    22D                176 BYTES
BADLNGTH DC    D'0'
DBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB-
FSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI
RWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI
SENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI
READCMND CCW   X'02',0,X'20',32760  READ COMMAND.           FJP/08DEC78
READLENG EQU   READCMND+6           READ LENGTH FIELD.            -CWB-
WRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB-
WTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB-
         CCW   X'04',SENSBYTS,X'20',1  SENSE CHAINED FOR DEV END. -CWB-
*                                 ABOVE FIELDS MOVED HERE FROM    -CWB-
*                                      LATTER PART OF PROGRAM TO  -CWB-
*                                      CORRECT ADDRESSABILITY.    -CWB-
SENSBYTS DC    3CL8'SENSBYTS'     BUFFER FOR SENSE BYTES
AMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB-
AMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB-
ERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS
OPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG
LINENO   DC    F'90'                                              -CWB-
LISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET
SKIPTMNO DC    F'0'
MAXTMNO  DC    F'32760'                                     FJP/08DEC78
SKPEOVNO DC    F'0'
MAXEOVNO DC    F'1'
SYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION
READNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION
PAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB-
SVR14    DC    F'0'                                               -CWB-
COUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.
*PAGEPACK DC   PL2'0'             (REPL'D BY PAGECNT)             -CWB-
BADRECM  DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED'
ERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX'
PAGEHDR  DC    CL60'1TAPESCAN 3.4  -   MRX TAPE ANALYSIS AND COPYING PR*
               OGRAM    '                                   -CWB-
DATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE
         DC    CL2'  '
TIMERSLT DC    XL11'4021207A20207A20204B20'
         DC    C'   INPUT VOL='                                   -CWB-
DDVOL    DC    CL6'VVVVVV'                                        -CWB-
         DC    CL22'   (LAST MOD-12/08/76)'                       -CWB-
         DC    CL7'   PAGE'
PAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER
         DC    CL12'           '  PAGE TRAILING BLANKS
JFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE
EXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB-
EXCPECB  DC    F'0'                                               -CWB-
EXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0'  IOB PROPER.  -CWB-
RESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB-
EXCPCCW  DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB-
         DC    A(OUTPUT,0,0)                                      -CWB-
EXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB-
STARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD
WRTFLG   DC    X'00'              TWO BIT COPY FLAG, X'03'=WRITE BLOCK
COUNTFLG DC    C'Y'               COUNT OPTION DEFAULT VALUE
HEXFLG   DC    C'Y'
SUMFLG   DC    C'Y'
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            *
               BLKSIZE=3458,LRECL=133
INPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         *
               BLKSIZE=32760,EODAD=EODS,SYNAD=SYNERR,EXLST=EXITLIST
OUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-*
               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB-
         LTORG
* MAIN LOOP AND MAIN LINE CODE STARTS HERE
SKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE
         USING EXIT+4096,R12
         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-
*                                      BLOCK ENTRY.               -CWB-
         CLC   CEOVNO,SKPEOVNO
         BNL   SKIPTMPR
         SR    R4,R4              ZERO TO GET GOOD BLK CNT EVEN IF     *
                                  SKIPTM OR SKIPEOV USED.
         SR    R8,R8              (RE)-ZERO BYTE COUNTER
         ST    R8,BLKCNT          (RE)-ZERO BLKCNT
         BAL   R5,READER          CHECK FOR DOUBLE TAPEMARK
         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)
         BNE   CONTROL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *
                                                    LABEL).
         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *
                                  TAPEMARK OR THE LOAD POINT.
         BNE   CONTROL            BIF IT ISN'T THE FIRST
         CLC   RECBUF(4),=C'EOV1'
         BNE   CONTROL
         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'
         B     CONTROL            POSITION PAST TAPEMARK AND GOTO EODS
SKIPTMPR CLC   CTPMKNO,SKIPTMNO   SKIPTM OPTION CONTROL ROUTINE
         BL    SKIPEOVP+12
         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE
         ST    R8,BLKCNT          (RE)-ZERO BLKCNT
         OI    WRTFLG,X'02'       OR IN  'ALL TM & EOV SKIPPING DONE'
         L     R1,CTPMKNO         GET TAPEMARK COUNT.             -CWB-
         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB-
         D     R0,=F'3'                WE HAVE SKIPPED.           -CWB-
         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB-
         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-
*                                      BLOCK ENTRY.               -CWB-
PROCESS  DS    0H                 TOP OF OUTER MAIN LOOP
         SR    R4,R4              ZERO BLK COUNTER
         ST    R4,FILEBYTS        CLEAR FILE BYTE COUNT.          -CWB-
         ST    R4,MAX             RESET MAX BLKSIZE WATCHER
         MVC   MIN,=F'32760'      RESET MIN BLKSIZE WATCHER FJP/08DEC78
         MVC   PREVHDR1,HDR1FLAG     SAVE PREV LABEL INDICATION.  -CWB-
         MVI   HDR1FLAG,C'N'             ASSUME NO HDR1 LABEL.    -CWB-
         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB-
PROCESS2 DS    0H                 TOP OF MAIN INNER LOOP
         C     R4,READNO          SEE IF BLK IS TO BE READ FOR SUMMARY
         BNL   OTHRCHKS
         BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX
         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)
         BNE   NOLABEL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *
                                                    LABEL).
         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *
                                  TAPEMARK OR THE LOAD POINT.
         BNE   *+18               BIF IT ISN'T THE FIRST
         CLC   RECBUF(4),=C'EOV1'
         BNE   *+8
         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'
         CLI   SUMFLG,C'Y'        SEE IF SUMMARY OPTION IS YES
         BE    CHKLABEL           DO SUMMARY PROCESSING IF SO
NOLABEL  C     R4,LISTNO
         BNH   LISTER             BRANCH TO LIST BLOCK
         B     PROCESS2
OTHRCHKS C     R4,LISTNO
         BNL   CHKCNT             BRANCH IF EVERYTHING ALREADY LISTED
         BAL   R5,READON
LISTER   BAL   R5,LISTON
         B     PROCESS2
CHKCNT   CLI   COUNTFLG,C'N'
         BE    CONTROL
         BAL   R5,READER          TOP    OF MAIN COUNTBLK OPTION LOOP
         B     *-4                BOTTOM OF MAIN COUNTBLK OPTION LOOP
CONTROL  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      *
                                  THEN BACKSPACE OVER IT.
         SR    R4,R4              RE-ZERO CURRENT BLK COUNT
         ST    R4,MAX             ZERO MAX TO INHIBIT BLK COUNT MSG
         SR    R8,R8              IS THIS NECESSARY?
         BAL   R5,READON          NOW READ THE TAPEMARK
         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!
         BAL   R2,PUTLINE         PRINT ERR MSG
         MVC   MSGBUF(37),=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'
         B     EXITRC8
READON   DS    0H
         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST
READER   XC    TAPE(4),TAPE       CLEAR ECB
         LA    R2,RECBUF
         READ  TAPE,SF,INPUT,(R2),'S' READ A BLK OR TAPEMARK (WE HOPE)
         CHECK TAPE
         MVI   MARK,X'00'         SET TO X'FF' WHEN TAPEMARK READ (EOD)
         LA    R4,1(R4)           COUNT THE BLK JUST READ FOR DATASET
         L     R6,TAPE+16         GET PTR TO IOB
         LH    R6,14(R6)          GET RESIDUAL COUNT
         LH    R7,INPUT+DCBBLKSI
         SR    R7,R6              COMPUTE BLOCK'S LENGTH
         BNH   BADREC             BIF ZERO OR NEG RECORD LENGTH
         L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB-
         AR    R1,R7                   BYTE COUNT FOR THIS        -CWB-
         ST    R1,FILEBYTS             FILE.                      -CWB-
         AR    R8,R7              COUNT ALL BYTES READ DURING RUN
         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX
         BNH   *+8                SKIP IF OLD MAX IS BIGGER
         ST    R7,MAX             STORE NEW MAX BLK LENGTH
         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN
         BNL   *+8                SKIP IF OLD MIN IS SMALLER
         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH
         TM    WRTFLG,X'03'       SEE IF SHOULD WRITE TO OUTPUT TAPE
         BNO   READEREX
         TM    WRTFLG,X'04'       HAS EOVMOD BEEN HANDLED?        -CWB-
         BZ    COPOUT             IF SO, BRANCH.                  -CWB-
         C     R7,=F'80'          IS THIS AN 80-BYTE BLOCK?       -CWB-
         BNE   COPOUT             IF NOT, GO COPY.                -CWB-
         CLC   RECBUF(4),=C'VOL1' IS THIS A VOL LABEL?            -CWB-
         BE    READEREX           IF SO, BYPASS COPY.             -CWB-
COPOUT   EQU   *                                                  -CWB-
         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW
         LA    R1,=AL3(WRTCMND)
         LA    R2,OUTPUT
         LR    R6,R4              SAVE R4 (CURRENT FILE BLK CNT)
         BAL   R4,EXECEXCP
         LR    R4,R6              RESTORE R4 (CURRENT FILE BLK COUNT)
READEREX NI    WRTFLG,X'03'       ZERO OFF POSSIBLE 'NOVOLSER' BIT
         BR    R5                 RETURN FROM READON SUBROUTINE
LISTON   MVI   MSGBUF,C'0'
         LA    R0,4               PREPARE TO RESERVE 4 LINES
         BAL   R2,PAGECHK         RESERVE 4 LINES
         BAL   R2,PUTLINE2        LIST THE FIRST PART OF THE BLOCK
         MVC   MSGBUF+1(132),RECBUF
HEXON    CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED
         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID
         MVC   MSGBUF+1(132),RECBUF
         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES
         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES
         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE
         BH    TRINT1             BRANCH IF LE 132 BYTES
         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH
         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION
         STC   R7,TRINT2+1        AND IN THE SECOND ONE
TRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)
         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL
         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX
         DC    C'TRT111'
         MVC   MSGBUF+1(132),RECBUF
TRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)
         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX
         DC    C'TRT222'          FILLER
         BR    R5                 RETURN FROM LISTON OR HEXON SUBR
CHKLABEL DS    0H
         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB-
         MVI   MSGBUF,C'0'
         MVC   MSGBUF+1(132),RECBUF
         CLC   RECBUF(4),=C'HDR1'
         BE    HDR1
         CLC   RECBUF(4),=C'EOF1'
         BE    EOF1EOV1
         CLC   RECBUF(4),=C'HDR2'
         BE    HDR2
         CLC   RECBUF(4),=C'EOF2'
         BE    EOF2EOV2
         CLC   RECBUF(4),=C'VOL1'
         BE    VOL1
         CLC   RECBUF(4),=C'EOV1'
         BE    EOF1EOV1
         CLC   RECBUF(4),=C'EOV2'
         BE    EOF2EOV2
         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB-
         B     NOLABEL            IT'S NOT A LABEL AFTER ALL
HDR1     DS    0H
         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB-
         LA    R0,14              PREPARE TO RESERVE 14 LINES
         BAL   R2,PAGECHK
         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST
         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL
         MVC   MSGBUF+44(33),MSGBUF+43 FILL IN REST OF ASTERISKS  -CWB-
         MVI   MSGBUF,C'-'
         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS
         DC    C'HDR222'
         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK
         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS
         DC    C'HDR333'
         MVC   MSGBUF+45(30),=C' DATASET SEQUENCE NUMBER 0000 '   -CWB-
*        MVC   MSGBUF+70(4),RECBUF+31  MOVE IN DATASET SEQUENCE NU-CWB-
*        MVC   MSGBUF+83(4),RECBUF+31  AND MOVE IT IN AGAIN       -CWB-
         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.    -CWB-
         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB-
         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB-
         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB-
         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB-
         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB-
         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB-
         ST    R1,CURRVTOC                                        -CWB-
         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB-
*                                      R3 POINTS AT CURRENT ENTRY.-CWB-
         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB-
         ST    R0,0(R5)                POINTER IN NEW BLOCK.      -CWB-
         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB-
         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB-
NXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB-
         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB-
         IC    R1,0(R5)                                           -CWB-
         LA    R1,1(R1)                                           -CWB-
         STC   R1,0(R5)                                           -CWB-
         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB-
CLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF  CLEAR OUT VTOC ENTRY.     -CWB-
         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB-
         LA    R1,1(R1)                SEQUENCE NUMBER COUNT.     -CWB-
         ST    R1,TRUESEQN                                        -CWB-
         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB-
         CVD   R1,DBLWORK              OPPOSED TO WHAT THE LABEL  -CWB-
         OI    DBLWORK+7,X'0F'         SAYS) IN MESSAGE BOX.      -CWB-
         UNPK  MSGBUF+70(4),DBLWORK                               -CWB-
         MVC   VTOCSEQN,MSGBUF+70 ALSO USE IT IN VTOC.            -CWB-
         CLC   MSGBUF+70(4),RECBUF+31 DO COUNT AND LABEL          -CWB-
         BE    PRINTBOX                 AGREE?  IF SO, BRANCH.    -CWB-
         MVC   MSGBUF+79(31),=C'(LABEL SEQ FIELD CONTAINS 0001)'  -CWB-
         MVC   MSGBUF+105(4),RECBUF+31  ELSE SHOW DIFFERENCE.     -CWB-
PRINTBOX EQU   *                                                  -CWB-
         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS
         DC    C'HDR444'
         MVC   MSGBUF+44(33),MSGBUF+43 REFILL WITH ASTERISKS      -CWB-
         MVC   MSGBUF+79(31),MSGBUF+78           ASSURE BLANKS.   -CWB-
         BAL   R2,PUTLINE3
         DC    C'HDR555'
         BAL   R2,PUTLINE3
         DC    C'HDR666'
         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS
         MVC   MSGBUF+1(80),RECBUF
         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '
         MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #
         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #
         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT
         BAL   R2,PUTLINE3
         DC    C'HDR111'
         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES
         CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0
         BNE   DOBLKCNT
         MVC   MSGBUF,BLANKBUF
LBL1     DS    0H
         MVC   MSGBUF+6(7),=C'DSNAME='
         MVC   MSGBUF+13(17),RECBUF+4
         LTR   R3,R3                  DO WE HAVE A VTOC ENTRY?    -CWB-
         BZ    *+10                   IF NOT, SKIP DSN SAVE.      -CWB-
         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB-
         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB-
         PACK  BADLNGTH+4(4),RECBUF+42(5)   CONVERT FOR DATE SUBROUTINE
         L     R2,BADLNGTH+4
         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB-
         L     R15,=V(DATE)       IRSS DATECONV SUBROUTINE
         BALR  R14,R15            DATE SUBROUTINE
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-
         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-
         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB-
         CLC   RECBUF+48(5),=C'00000'  DOES TAPE HAVE EXP DATE?   -CWB-
         BE    EXPIRED            IF NOT, BRANCH.                 -CWB-
         MVC   MSGBUF+56(16),=C'EXPIRATION DATE='  ELSE, LIST IT. -CWB-
         PACK  BADLNGTH+4(4),RECBUF+48(5)                         -CWB-
         L     R2,BADLNGTH+4      DO CONVERSION AS BEFORE.        -CWB-
         LA    R1,AMSGBP72                                        -CWB-
         L     R15,=V(DATE)                                       -CWB-
         BALR  R14,R15                                            -CWB-
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-
         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-
         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB-
EXPIRED  EQU   *                                                  -CWB-
         MVI   MSGBUF,C'0'
         BAL   R2,PUTLINE3
         DC    CL6'LBL111'
         B     PROCESS2
EOF1EOV1 DS    0H
         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE *
                                  CURRENT ONE.
         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL
         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ
         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1
         BAL   R2,PUTLINE2
         MVC   MSGBUF(100),=C'0ERROR - THE DATASET SEQ. NO. ON THE FOLL*
               OWING LABEL DOES NOT MATCH THAT ON THE PRECEDING HDR1 LA*
               BEL'
         LA    R0,6               PREPARE TO RESERVE 6 LINES
         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT
         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF
NEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER
         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '
         MVC   MSGBUF+116(4),RECBUF+31
         BAL   R2,PUTLINE3
         DC    C'EOF1EV'
         BAL   R5,HEXON
DOBLKCNT MVC   MSGBUF,BLANKBUF
         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB-
         MVC   MSGBUF+94(6),RECBUF+54                             -CWB-
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-
         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB-
         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB-
         BNE   LBL1                    FILLED IN?  IF SO, BRANCH. -CWB-
         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB-
         B     LBL1
EOF2EOV2 DS    0H
         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT
         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT
         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '
         B     LBL2
HDR2     DS    0H
         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT
         BAL   R2,PAGECHK         RESERVE PRINT
         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '
LBL2     DS    0H
         MVC   MSGBUF+116(4),DATASEQ
         BAL   R2,PUTLINE3
         DC    C'HDR222'
         BAL   R5,HEXON
         MVC   BLKSIZE(5),RECBUF+5
         MVC   LRECL(5),RECBUF+10
         MVC   DENSITY(1),RECBUF+15
         CLI   DENSITY,C'0'
         BNE   *+10
         MVC   DENSITY+2(9),=C'(200 BPI)'
         CLI   DENSITY,C'1'
         BNE   *+10
         MVC   DENSITY+2(9),=C'(556 BPI)'
         CLI   DENSITY,C'2'
         BNE   *+10
         MVC   DENSITY+2(9),=C'(800 BPI)'
         CLI   DENSITY,C'3'
         BNE   *+10
         MVC   DENSITY+2(10),=C'(1600 BPI)'
         CLI   DENSITY,C'4'                                       -CWB-
         BNE   *+10                                               -CWB-
         MVC   DENSITY+2(10),=C'(6250 BPI)'                       -CWB-
         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.
         SR    R1,R1
         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'
         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')
         LA    R1,2
         MVC   RECFM+1(2),=C'BS'
         B     CTRLCHAR
         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED
         BE    CTRLCHAR           BIF UNBLOCKED
         MVC   RECFM+1(1),RECBUF+38   MOVE B OR S BLOCK ATTRIBUTE CHAR
         LA    R1,1               BUMP PTR PAST THE B OR S
CTRLCHAR LA    R1,RECFM+1(R1)
         MVC   0(1,R1),RECBUF+36
         MVC   TRTCH(2),RECBUF+34
         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS
         BNE   *+10
         MVC   TRTCH(8),=C'STANDARD' 9-TRK OR 7-TRK
         BAL   R2,PUTLINE
         MVC   MSGBUF(109),LBL2MSG
         CLI   RECBUF,C'H'        SEE IF IS 'HDR2'
         BNE   PROCESS2           BIF IT WAS EOF2 OR EOV2
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-
         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB-
         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB-
         MVC   VTOCLREC,LRECL                                     -CWB-
         MVC   VTOCBLKS,BLKSIZE                                   -CWB-
         MVC   VTOCDEN,DENSITY+3                                  -CWB-
         MVC   VTOCTRTC,RECBUF+34                                 -CWB-
         MVC   VTOCJOBN,RECBUF+17                                 -CWB-
         MVC   VTOCSTEP,RECBUF+26                                 -CWB-
NOVSTUFF EQU   *                                                  -CWB-
         MVC   MSGBUF+2(120),MSGBUF+1    CLEAR MOST OF MSGBUF
         MVC   CRMSG+15(8),RECBUF+17
         MVC   CRMSG+32(8),RECBUF+26
         BAL   R2,PUTLINE2
         MVC   MSGBUF+6(L'CRMSG),CRMSG
         B     PROCESS2
VOL1     DS    0H
         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT
         BAL   R2,PAGECHK         AND RESERVE THEM
         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'
         MVI   MSGBUF,C'0'
         BAL   R2,PUTLINE3
         DC    C'VOL111'
         BAL   R5,HEXON
         MVC   MSGBUF,BLANKBUF
         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='
         MVC   MSGBUF+27(6),RECBUF+4
         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''
         MVC   MSGBUF+59(10),RECBUF+41
         MVI   MSGBUF+69,C''''
         MVC   VSNSAVE,RECBUF+4   SAVE VSN AND OWNER FOR USE      -CWB-
         MVC   OWNERSAV,RECBUF+41      IN VTOC LISTING.           -CWB-
         MVI   MSGBUF,C'0'
         BAL   R2,PUTLINE3
         DC    C'VOL222'
         CLC   JFCBIN+JFCBVOLS(6),RECBUF+4 SEE IF JCL MATCHES VOLSER
         BE    PROCESS2           BIF SAME
         BAL   R2,PUTLINE
         MVC   MSGBUF(098),=C'0WARNING - VOLUME SERIAL NUMBER IN ABOVE *
               LABEL DOES NOT MATCH THAT SPECIFIED ON INPUT DD STATEMEN*
               T'
         TM    WRTFLG,X'01'       ARE WE MAKING A COPY?        -CWB-
         BZ    PROCESS2           IF NOT, CONTINUE PROCESSING. -CWB-
         L     R0,CTPMKNO         GET CURRENT TAPEMARK NUMBER
         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)
         BNZ   PROCESS2           BIF A TAPEMARK HAS ALREADY BEEN READ
         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON
         BZ    PROCESS2           IF IT'S NOT THEN 'NO VERIFY' (BLP OR *
                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON.
         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG
         MVC   MSGBUF(38),=C'0TERMINATION DUE TO WRONG TAPE MOUNTED'
         B     EXITRC8
EODS     DS    0H
*        AP    MARKNO,=P'1'       COUNT THE TAPEMARK              -CWB-
*        UNPK  MARKNUM,MARKNO                                     -CWB-
         L     R1,MARKNO          COUNT THE TAPEMARK (COUNT       -CWB-
         LA    R1,1(R1)                STORED IN BINARY FORM).    -CWB-
         ST    R1,MARKNO                                          -CWB-
         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-
         UNPK  MARKNUM,DBLWORK                                    -CWB-
         OI    MARKNUM+3,X'F0'
         LA    R1,1
         A     R1,CTPMKNO         CURRENT NUMBER OF TAPEMARKS PASSED
         ST    R1,CTPMKNO         IS NOW UPDATED TO ACTUAL VALUE
         L     R1,BLKCNT          BLKS IN PREVIOUS DATASETS
         AR    R1,R4              ADD NO. OF BLKS IN DATASET JUST READ
         ST    R1,BLKCNT          TO GET TOTAL BLKS READ SO FAR (EXCEPT*
                                  FOR SKIPPING - SKIPEOV OR SKIPTM).
         TM    WRTFLG,X'03'       SEE IF COPY BEING DONE NOW      -CWB-
         BNO   *+24               SKIP WRITING TAPEMARK IF NOT    -CWB-
         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE
         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT
         ST    R4,SVR4            SAVE R4 FOR EXEC ESCP CALL
         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP
         L     R4,SVR4            RESTORE R4
         CLI   COUNTFLG,C'N'
         BE    SIMPLETM           BIF COUNT OPTION NOT SPECIFIED
         L     R0,MAX
         LTR   R0,R0
         BZ    SIMPLETM           BIF NO COUNTING WORK HAS BEEN DONE
         LTR   R4,R4              BYPASS MAX/MIN/AVG IF           -CWB-
         BZ    SIMPLETM                NO RECORDS.                -CWB-
         L     R1,MIN
         CVD   R1,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  MINMSG,BADLNGTH
         L     R1,MAX
         CVD   R1,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  MAXMSG,BADLNGTH
         LR    R1,R4              COPY COUNT OF RECORDS AND DIVIDE-CWB-
         SRA   R1,1                    BY 2 TO ROUND THE AVERAGE. -CWB-
         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB-
         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB-
         ST    R0,FILEBYTS        ALSO CLEAR FILEBYTS FOR NEXT    -CWB-
*                                      FILE.                      -CWB-
         DR    R0,R4              DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB-
         CVD   R1,BADLNGTH        MAKE AVERAGE SIZE PRINTABLE.    -CWB-
         OI    BADLNGTH+7,X'0F'                                   -CWB-
         UNPK  AVGMSG,BADLNGTH                                    -CWB-
         CVD   R4,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  COUNTMSG,BADLNGTH
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-
         BZ    NOSAVE             IF NOT, BRANCH.                 -CWB-
         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB-
         BE    NOSAVE             IF SO, DON'T SAVE STAT'S.       -CWB-
         MVC   VTOCMINB,MINMSG    SAVE MIN, MAX, AVG, AND COUNT   -CWB-
         MVC   VTOCMAXB,MAXMSG         FOR VTOC LISTING.          -CWB-
         MVC   VTOCAVGB,AVGMSG                                    -CWB-
         MVC   VTOCOUNT,COUNTMSG                                  -CWB-
NOSAVE   EQU   *                                                  -CWB-
*        MVI   EOVM+1,120         SET LENGTH FOR POSSIBLE LONG EOV-CWB-
         MVI   EOVM+1,CNTSEND-TPMKMSG-1  SET LENGTH FOR MVC.      -CWB-
*        MVI   MSGBUF+100,C' '    PREPARE TO CLEAR PART OF MSG BUF-CWB-
*        MVC   MSGBUF+101(32),MSGBUF+100 CLEAR LAST PART OF  BUFFE-CWB-
         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER COMPLETELY.        -CWB-
*        MVC   MSGBUF+18(87),EOVNUM+3                             -CWB-
         MVC   MSGBUF+18(CNTSEND-EOVNUM-3),EOVNUM+3 COPY MESG.    -CWB-
         LA    R5,PUTLINE2        SPECIFY LONG TYPE OF TAPEMARK MSG
         B     TMSGDONE
SIMPLETM MVI   EOVM+1,33          SET LENGTH OF POSSIBLE EOV MSG
         LA    R5,PUTLINE         SPECIFY SHORT TPMK FOUND MSG IF ANY
*TMSGDONE CLI   MARK,X'FF'
*        BE    EOVPROC
*        MVI   MARK,X'FF'
TMSGDONE DS    0H                                                 -CWB-
         CLI   EOV1FLG,C'Y'
         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET
         CLI   MARK,X'FF'         TWO CONSECUTIVE MARKS?          -CWB-
         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB-
         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB-
         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB-
SKPCHK   MVI   MARK,X'FF'         NOTE THIS MARK FOUND.           -CWB-
         CLC   SKPEOVNO,CEOVNO    SKIP SKIPTM PROCESSSING IF
         BH    SKIPEOVP           SKIPEOV PROCESSING IS BEING DONE
         CLC   CTPMKNO,SKIPTMNO   COMPARE CTPMKNO WITH SKIPTMNO
         BL    SKIPTMPR           BRANCH TO DO POSSIBLE SKIPTM PROCESS
         BALR  R2,R5              TO PUTLINE OR PUTLINE2
         MVC   MSGBUF(18),TPMKMSG
         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY
         CLC   CTPMKNO,MAXTMNO
         BL    PROCESS
         TM    WRTFLG,X'01'       CHECK IF COPY BEING DONE        -CWB-
         BNO   *+16               SKIP IF IT'S NOT BEING DONE     -CWB-
         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,
         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD
         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.
         B     PRENDMSG
EOVPROC  DS    0H                 HANDLES END-OF-VOLUME INDICATIONS
         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG
*        AP    EOVNO,=P'1'        COUNT EOV'S                     -CWB-
*        UNPK  EOVNUM,EOVNO                                       -CWB-
         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB-
         LA    R1,1(R1)                IN BINARY FORM).           -CWB-
         ST    R1,EOVNO                                           -CWB-
         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-
         UNPK  EOVNUM,DBLWORK                                     -CWB-
         OI    EOVNUM+2,X'F0'
*        MVC   WRITELOG+11(3),EOVNUM                              -CWB-
*WRITELOG WTL  'EOV000 ENCOUNTERED'                               -CWB-
         BAL   R2,PUTLINE
EOVM     MVC   MSGBUF(00),TPMKMSG LENGTH SPECIFIED IN EODS EXIT
         LA    R1,1
         A     R1,CEOVNO
         ST    R1,CEOVNO
         C     R1,SKPEOVNO
         BL    SKIPEOVP           BIF SKIPEOV BEING DONE
         BNE   NOTJUST            BIF SKIPEOV PROCESSING NOT JUST DONE
         CLC   CTPMKNO,SKIPTMNO   SEE IF SKIPTM PROCESSING COMPLETED
         BL    NOTJUST            BIF NOT, SKIPTMNO SHOULD BECOME      *
                                  ACTUAL NUMBER OF TAPEMARKS SKIPPED.
         MVC   SKIPTMNO,CTPMKNO   MORE THAN SKIPTMNO WERE SKIPPED DUE  *
                                  SKIPEOV; RESET SKIPTMNO TO INDICATE  *
                                  ACTUAL NUMBER SKIPPED (FOR LNGTH EST)
NOTJUST  DS    0H
*        OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY-CWB-
         CLC   CEOVNO,MAXEOVNO
         BL    PROCESS
PRENDMSG DS    0H
         CLI   COUNTFLG,C'N'
         BE    SHORT              SKIP TO NOT PRINT COUNTS
         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT
         BAL   R2,PAGECHK         RESERVE THEM
         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING
         LA    R2,INPUT           PTR TO DCB FOR EXCP CALL
         BAL   R4,EXECEXCP
         L     R2,DCBDEBAD+INPUT  FIND UCB.                       -CWB-
         L     R2,DEBUCBAD(R2)                                    -CWB-
         TM    19(R2),X'03'       IS THIS A 2400?                 -CWB-
         BNO   ITS2400            IF SO, BRANCH.                  -CWB-
         TM    SENSBYTS+6,X'80'   IS THIS A 7 TRACK DRIVE?        -CWB-
         BO    SEVENTRK           IF SO, BRANCH.                  -CWB-
         MVI   INDEX+3,4          SET INDEX FOR NO-CONVERT.       -CWB-
         LA    R2,3               ASSUME DEN=3.                   -CWB-
         TM    SENSBYTS+6,X'10'   IS IT 1600 BPI?                 -CWB-
         BZ    ADDDEN2            IF SO, GO.                      -CWB-
         LA    R2,4               ASSUME DEN=4.                   -CWB-
         TM    SENSBYTS+6,X'08'   IS THIS A MODEL 4, 6, OR 8?     -CWB-
         BO    ADDDEN2            IF SO, GO.                      -CWB-
         LA    R2,2               ELSE, DEN=2.                    -CWB-
         B     ADDDEN2                                            -CWB-
ITS2400  TM    SENSBYTS+1,X'10'   CHECK IF 7-TRK, 1 BIT = 7-TRK   -CWB-
         BO    SEVENTRK
         MVI   INDEX+3,4          SINCE 9-TRK, LOAD OFFSET FOR NO CONV
         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI
         BNO   EIGHTBPI           BIF 800 BPI 9-TRK
         MVI   DCBDEN+INPUT,X'C3' SET DEN=1600 BPI INDICATOR
         B     ADDDEN
EIGHTBPI DS    0H
         MVI   INPUT+DCBDEN,X'83' SET DEN=800 BPI INDICATOR
         B     ADDDEN
SEVENTRK DS    0H
         MVI   SAVETRK,C'7'                                       -CWB-
         MVI   INDEX+3,40         LOAD OFFSET FOR 7-TRK           -CWB-
         LA    R0,3900            LOAD TAPEMARK LENGTH FOR 7-TRK
         STH   R0,TMLENGTH
         MVC   LNGTHEST+57(14),=C'C (CONVERSION)'                 -CWB-
         CLI   INPUT+DCBTRTCH,X'13' SEE IF CONVERSION SPECIFIED
         BE    ADDDEN             BIF IT IS, OFFSET=0 FOR CONV
         MVI   INDEX+3,44         SET OFFSET FOR 7-TRK, NO CONVERS-CWB-
         MVC   LNGTHEST+57(19),=C'7-TRK NO CONVERSION'            -CWB-
ADDDEN   DS    0H
         SR    R2,R2
         IC    R2,INPUT+DCBDEN
         SRL   R2,6               SHIFT INTO RIGHT-HAND 2 BITS
         LTR   R2,R2              SEE IF DEN=0 SPECIFIED
         BNE   ADDDEN2            BIF DEN=0 NOT SPECIFIED
         L     R2,DCBDEBAD+INPUT  GET PTR TO DEB
         L     R2,DEBUCBAD(R2)    GET PTR TO UCB
         TM    19(R2),X'03'       SEE IF IT'S A 3400 SERIES OR THE LIKE
         LA    R2,0               CLEAR R2 WITHOUT RESETTING CC
         BNO   ADDDEN2            BIF IT ISN'T, IT'S OK
         LA    R2,1               SET DENSITY USED FOR LENGTH ESTIMATE *
                                  TO 556 BPI BECAUSE 3400 SERIES       *
                                  DOESN'T SUPPORT 200 BPI (EXCEPT 3410)
ADDDEN2  DS    0H
         LA    R0,X'F0'           LOAD C'0' FOR OR OPERATION
         OR    R0,R2              GET PRINTABLE DENSITY CHARACTER
         STC   R0,LNGTHEST+45     STORE PRINTABLE DENSITY MSG     -CWB-
         STC   R0,TRUEDEN         PUT INTO TRUE DEN MESG.         -CWB-
         SLL   R2,3               MULTIPLY BY 8 TO GET DEN OFFSET
         A     R2,INDEX           ADD PREVIOUS OFFSETS
         ST    R2,INDEX           STORE COMPLETED OFFSET FOR BPIBGTBL
*         FORMULA FOR LENGTH IN INCHES FOLLOWS:
*         INCHES=R8/BPI+(IBG*BLKCNT+CTPMKNO*TMLENGTH)/1000
         L     R15,CTPMKNO        LOAD NUMBER OF TAPEMARKS READ
         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED
         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)
         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE
         L     R1,BLKCNT          LOAD BLOCK COUNT
         MH    R1,BPIBGTBL-20(R2) MULTIPLY TO GET TOTAL GAP LENGTH*1000
         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000
         SR    R0,R0
         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES
         LR    R15,R1             SAVE THIS FOR LATER
         LH    R2,BPIBGTBL-18(R2) LOAD PHYSICAL BPI (NOT LOGICAL BPI)
         LR    R1,R8              LOAD TOTAL BYTE COUNT
         SR    R0,R0
         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI
         AR    R1,R15             GET TOTAL LENGTH IN INCHES
         SR    R0,R0
         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0
         CVD   R1,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  LNGTHEST+17(4),BADLNGTH
         CVD   R0,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  LNGTHEST+27(2),BADLNGTH
         BAL   R2,PUTLINE         PRINT TRUE DEN MESG.            -CWB-
         MVC   MSGBUF(TRUEDLEN),TRUEDMSG                          -CWB-
         BAL   R2,PUTLINE
         MVC   MSGBUF(76),LNGTHEST                                -CWB-
         BAL   R2,PUTLINE
         MVC   MSGBUF(106),LNGTHACC
         MVI   SHORTNOW+1,111     MACHINE LENGTH OF LONG MSG FOR COUNTS
         CVD   R8,BADLNGTH        TOTAL BYTES READ (FOR COUNT OPT ONLY)
         OI    BADLNGTH+7,X'0F'   SET SIGN NIBBLE
         UNPK  BYTES,BADLNGTH
         L     R8,BLKCNT          TOTAL BLKS READ ON TAPE, EXCLUDING   *
                                  THOSE READ DURING SKIP PROC%SSING.
         CVD   R8,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  NBLKS,BADLNGTH
SHORT    BAL   R2,PUTLINE         PRINT 'SUCCESSFUL END' MSG
SHORTNOW MVC   MSGBUF(L'ENDMSG),ENDMSG (LENGTH MODIFIED FOR COUNTBLKS)
         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN
         LTR   R2,R2              SEE IF ZERO
*        BZ    EXIT               EXIT IF SO                      -CWB-
         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB-
         CVD   R2,BADLNGTH
         OI    BADLNGTH+7,X'0F'
         UNPK  ERRSUMSG+22(5),BADLNGTH
         BAL   R2,PUTLINE
         MVC   MSGBUF(L'ERRSUMSG),ERRSUMSG
*        B     EXIT                                               -CWB-
         SPACE 3
LISTVTOC CLC   FRSTVTOC+1(3),=AL3(0)  DID WE MAKE A VTOC?         -CWB-
         BE    EXIT               IF NOT, SKIP IT.                -CWB-
         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB-
         BAL   R2,PAGECHK                                         -CWB-
         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB-
         MVC   MSGBUF(VHEADLEN),VTOCHEAD                          -CWB-
         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB-
         MVC   MSGBUF(L'VTOCHED2),VTOCHED2                        -CWB-
         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB-
         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB-
NEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB-
*                                      THE VTOC BLOCK.            -CWB-
         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB-
*                                      THIS VTOC BLOCK.           -CWB-
NEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB-
         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB-
         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB-
         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB-
         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB-
         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB-
         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB-
         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB-
         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB-
         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB-
         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB-
         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB-
         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB-
         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB-
         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB-
         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB-
         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB-
         DC    CL6'VTOC--'        REQUIRED DEAD SPACE.            -CWB-
         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB-
         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB-
         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB-
         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB-
         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB-
         FREEMAIN  R,LV=(0),A=(1) FREE UP VTOC BLOCK'S CORE.      -CWB-
         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB-
         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB-
         BZ    EXIT               IF SO, WE'RE DONE.              -CWB-
         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB-
         EJECT
*WRTCMND CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GETM-CWB-
*WTMCMND CCW   X'1F',0,X'60',1    WRITE TAPEMARK, SLI, CC TO SENSE-CWB-
*        CCW   X'04',SENSBYTS,X'20',1 SENSE CHAINED FOR DEVICE END-CWB-
*                                 ABOVE MOVED FOR ADDRESSABILITY. -CWB-
CTPMKNO  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED
CEOVNO   DC    F'0'               # OF DOUBLE TAPEMARKS PASSED
SVR4     DC    F'0'               FOR SAVING R4 TEMPORARILY
*SVR14   DC    F'0'                                               -CWB-
BLKCNT   DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE
                                  EXCLUDING THOSE READ DURING SKIPPING.
MAX      DC    F'0'               KEEPS TRACK OF MAXIMUM BLK LENGTH
MIN      DC    F'32760'           KEEPS TRACK OF MINIMUM BLK LENGTH
TMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)
INDEX    DC    F'0'               NOCONV=+4, 7-TRK=+40, +DEN*8    -CWB-
*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL
*                                 WHICH IS LIKE A 3-D ARRAY:
*                                 7-TRK=+40,  NOCONV=+4, +DEN*8   -CWB-
BPIBGTBL DC    H'601,800'   800 BPI NOCONV 9-TRK
         DC    H'1,1'      1600 BPI CONV   9-TRK (NOT USED)
         DC    H'651,1600' 1600 BPI NOCONV 9-TRK
         DC    H'300,4687'        6250 BPI, CONV   9-TRK (NOT USED)
         DC    H'300,6250'        6250 BPI, NOCONV 9-TRK          -CWB-
         DC    H'752,150'   200 BPI CONV   7-TRK
         DC    H'752,200'   200 BPI NOCONV 7-TRK
         DC    H'751,417'   556 BPI CONV   7-TRK
         DC    H'751,556'   556 BPI NOCONV 7-TRK
         DC    H'751,600'   800 BPI CONV   7-TRK
         DC    H'751,800'   800 BPI NOCONV 7-TRK
*MARKNO  DC    PL3'0'                                             -CWB-
*EOVNO   DC    PL2'0'                                             -CWB-
MARKNO   DC    F'0'               NUMBER OF TAPE MARKS READ.      -CWB-
EOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB-
TPMKMSG  DC    C'0TAPEMARK NO. '
MARKNUM  DC    C'    '
         DC    C' -- EOV NO. '
EOVNUM   DC    CL3'000'
         DC    C'    BLOCK LENGTHS:  MIN='                        -CWB-
MINMSG   DC    C'00000'
         DC    C'  MAX='                                          -CWB-
MAXMSG   DC    C'00000'
         DC    C'  AVG='                                          -CWB-
AVGMSG   DC    C'00000'                                           -CWB-
         DC    C'    NUMBER OF BLOCKS='
COUNTMSG DC    C'000000'
CNTSEND  EQU   *                                                  -CWB-
DATASEQ  DC    CL4'NONE'
ENDMSG   DC    C'0SUCCESSFUL PROCESSING OF THIS TAPE COMPLETED'
         DC    C':    TOTAL BYTES READ='
BYTES    DC    C'XXXXXXXX'
         DC    C'    NUMBER OF DATA BLOCKS READ='
NBLKS    DC    C'XXXXXX'
TRUEDMSG DC    C'-TRUE DENSITY AT END OF PROCESSING:  DEN='       -CWB-
TRUEDEN  DC    C'3'                                               -CWB-
TRUEDLEN EQU   *-TRUEDMSG                                         -CWB-
LNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES FOR DEN=X AND TRT*
               CH=STANDARD           '                            -CWB-
LNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU*
               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT)'
*BADRECM DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED' (MOVED)         -CWB-
LBL2MSG  DC    CL12'0     RECFM='
RECFM    DC    CL16'        BLKSIZE='
BLKSIZE  DC    CL16'XXXXX     LRECL='
LRECL    DC    CL25'XXXXX     LABEL DEN SPEC='
DENSITY  DC    CL24'                  TRTCH='
TRTCH    DC    CL16' '
CRMSG    DC    C'CREATED BY JOB          IN STEP         '
MARK     DC    X'00'              'TAPEMARK JUST READ' FLAG (00 = NOT)
EOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   *
                                  AFTER A TAPEMARK IS 80 BYTES LONG &  *
                                  STARTS WITH 'EOV1'.
LABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB-
*                                      PROCESSING A LABEL FILE.   -CWB-
PREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB-
HDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB-
DBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB-
CURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB-
FRSTVTOC DC    AL1(VTOCEPB),AL3(0)  ADDRESS OF FIRST VTOC BLOCK;  -CWB-
*                                      HIGH-ORDER BYTE SET TO     -CWB-
*                                      FORCE FIRST GETMAIN.       -CWB-
FILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB-
TRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB-
VTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB-
VSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB-
SAVETRK  DC    C'9 TRACK    '                                     -CWB-
OWNERSAV DC    CL10'          '                                   -CWB-
VHEADLEN EQU   *-VTOCHEAD                                         -CWB-
VTOCHED2 DC    C'-SEQ.  DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT*
               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N*
               AME  STEP      EXPIRES'                            -CWB-
         LTORG
         SPACE 5
VTOC     DSECT
VTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB-
VTOCDSN  DS    CL17               DATA SET NAME.                  -CWB-
VTOCRECF DS    CL4                RECFM.                          -CWB-
VTOCLREC DS    CL5                LRECL.                          -CWB-
VTOCBLKS DS    CL5                BLKSIZE.                        -CWB-
VTOCDEN  DS    CL4                DENSITY.                        -CWB-
VTOCTRTC DS    CL2                TRTCH.                          -CWB-
VTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB-
VTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB-
VTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB-
VTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB-
VTOCCREA DS    CL8                CREATION DATE.                  -CWB-
VTOCJOBN DS    CL8                JOB NAME.                       -CWB-
VTOCSTEP DS    CL8                STEP NAME.                      -CWB-
VTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB-
         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB-
VTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB-
VTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB-
VTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB-
         END
