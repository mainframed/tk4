$ST      TITLE   'JES2/TSO $STATUS TSO COMMAND PROCESSOR'
STATUS   CSECT
*
*
*        THIS IS THE NEW STATUS COMMAND.  IT ALLOWS THE USER TO
*        SPECIFY A GENERIC JOB NAME RATHER THAT REQUIRING THAT
*        A SPECIFIC JOB NAME BE ENTERED.  IT ALSO WILL SHOW MORE
*        DETAILS ON THE STATUS OF THE JOB AND CURRENT EXECUTION
*        TIME IF ITS IN EXECUTION.
*
         EJECT
         STM   R14,R12,12(R13)             DO THE HOUSEKEEPING
         BALR  R10,0
         USING *,R10
         LR    R2,R1                  GET ADDRESSABILITY FROM SAVED PTR
         USING CPPL,R2
         GETMAIN R,LV=BUFDSCTL             GET STORAGE FOR S/A
         USING BUFDSCT,R9
         LR    R9,R1
         ST    R13,SAVEB+4                 SET UP SAVE AREAS
         LA    R11,SAVEB
         ST    R11,8(R13)
         LR    R13,R11
         EJECT
*        FIRST WE WANT TO PARSE THE INPUT PARAMTER IF ONE WAS
*        ENTERED AND REPROMPT IF ONE WAS NOT ENTERED OR WAS
*        ENTERED IN ERROR.
         SPACE 3
         GETMAIN R,LV=PPLUWA-PPL+4,SP=1  GET WORK AREA FOR PARSE
         LR    R3,R1
         USING PPL,R3
         XC    PPLUPT(PPLUWA-PPLUPT),PPLUPT
         MVC   PPLUPT,CPPLUPT
         MVC   PPLECT,CPPLECT
         MVC   PPLCBUF,CPPLCBUF
         XC    PARSECB,PARSECB
         LA    R0,PARSECB
         ST    R0,PPLECB              SET UP ECB ADDRESSES
         LA    R0,PARSANS
         ST    R0,PPLANS              SET UP ADDR OF ANSWER
         L     R0,=A(PARMST)
         ST    R0,PPLPCL              SET UP PARSE PARM ADDRESSES
         SPACE 1
         CALLTSSR EP=IKJPARS          GO DO PARSE
         SPACE 1
         LTR   R15,R15                 GOOD RETURN CODE?
         BZ    PARSEOK                 YES, GO SEE IF JES IS UP
         SPACE 2
         TPUT  MSG2,L'MSG3             NO, INFORM USER
         LA    R15,8                   SET RETURN
         B     EXIT                    GET OUT
         EJECT
*
*
*        NOW WE SEE IF JES IS UP, IF NOT WE EXIT
*        IF IT IS UP, WE GET THE ADDR OF THE $HCT
*        FOR THE SRB.
*
*
         USING SSCT,R15
PARSEOK  L     R15,16                   GET CVT BASE ADDR
         L     R15,CVTJESCT-CVT(R15)    GET ADDR OF JES CONTROL TBL
         LTR   R15,R15                  IS IT THERE?
         BZ    NOSUB                    NO
         L     R15,JESSSCT-JESCT(R15)   GET ADDR OF SSCT
         SPACE 1
SSCTLOOP LTR   R15,R15                   SSCT EXIST?
         BZ    NOSUB                     NO, JES ISN'T UP
         CLC   SSCTSNAM-SSCT(L'SSCTSCTA,R15),=C'JES2'  IS IT JES2?
         BE    FOUNDSUB                  YES, SO WE CAN SCHEDULE SRB
         L     R15,SSCTSCTA-SSCT(R15)    NO, CHAIN TO NEXT SSCT
         B     SSCTLOOP                  GO TRY AGAIN
         SPACE 1
NOSUB    TPUT  MSG1,L'MSG1               WRITE OUT MESSAGE
         LA    R15,8                     SET RETURN
         B     EXIT                      EXIT
         SPACE 1
FOUNDSUB DS    0H
         L     R15,SSCTSSVT-SSCT(R15)    GET SSVT ADDRESS
         LTR   R15,R15                   DOES IT EXIST?
         BZ    NOSUB                     NO, JES NOT THERE
         L     R1,$SVHCT-SSVT(R15)       GET ADDR OF HCT
         ST    R1,DOUBLE                 SAVE IT IN TEMP AREA
         EJECT
         SPACE 2
*        NOW WE FIND THE ADDR OF JES'S ASCB SO WE CAN SCHEDULE IT
*        TO THE CORRECT ADDRESS SPACE.
         SPACE 1
         L     R15,16                     GET ADDR OF CVT
         L     R2,CVTASVT-CVT(R15)        GET ADDR OF ASVT
         L     R15,ASVTMAXU-ASVT(R2)      GET MAX # OF ASVT'S
LOOP10   L     R4,ASVTENTY-ASVT(R2)       GET ASCB POINTER
         LTR   R4,R4                      IS IT ACTIVE?
         BM    LOOP11                     NO, TRY NEXT
         L     R5,ASCBJBNS-ASCB(R4)       GET POINTER TO JOBNAME
         CLC   0(4,R5),=C'JES2'           IS IT JES?
         BE    FOUNDJES                   YES WE GO IT!!!!
         SPACE 1
LOOP11   DS    0H
         LA    R2,4(R2)                   BUMP TO NEXT ASCB POINTER
         BCT   R15,LOOP10                 GO TRY NEXT
         SPACE 2
*        IF WE GOT HERE, JES WAS NOT FOUND AND WE HAVE A PROBLEM
         SPACE 1
         LA    R15,8                       SET BAD RETURN
         B     EXIT                        RETURN
         SPACE 3
*        WEVE FOUND THE ADDRESS SPACE, LETS SAVE ITS ASCB ADDRESS
         SPACE 1
FOUNDJES DS    0H
         ST    R4,DOUBLE+4                 SAVE ASCB ADDR IN TEMP AREA
         EJECT
*
*
*        AT THIS POINT WE KNOW JES IS UP SO WE WANT TO BUILD AN
*        SRB AND SCHEDULE IT TO HIM.
*
         STAX  DEFER=YES                  DON'T ALLOW INTERRUPTS
         MODESET KEY=ZERO,MODE=SUP        GO INTO GOOD KEY AND STATE
         LA    R11,CSAADDR                GET ADDR OF CSA POINTER
         ESTAE ESTAEXIT,CT,PARAM=(R11),TERM=YES,BRANCH=YES,            X
               SVEAREA=(13),KEY=SAVE,MF=(E,MFLESTAE)
         LTR   R15,R15                    STAE GO OK?
         BZ    GETSTOR                    YES, GO GET STORAGE
         TPUT  MSG5,L'MSG5                NO, PUT OUT ERROR MESSAGE
         B     EXIT                       GET OUT
         SPACE 3
*        NOW WE GET STORAGE FROM CSA FOR THE SRB
         SPACE 1
GETSTOR  DS    0H
         GETMAIN  R,LV=STADSCTL+STATSRBL,SP=228
         USING SRBSECT,R11
         LR    R11,R1                     PUT ADDR IN BASE
         ST    R11,CSAADDR                SAVE THE ADDR OF CSA
         XC    0(STARET-SRBSECT,R11),0(R11)  CLEAR OUT SRB
         EJECT
*        NOW WE WANT TO BUILD THE SRB WITH VARIOUS POINTERS, THE
*        SEARCH ARGUMENT AND THE SRB ENTRY POINT.
         SPACE 3
         L     R4,DOUBLE                   GET HCT ADDR WE SAVED
         ST    R4,SRBHCT                   PUT IT IN SRB
         L     R4,DOUBLE+4                 GET ASCB ADDR WE SAVED
         ST    R4,SRBASCB                  PUT IT IN SRB
         MVC   SRBID,=CL4'SRB'             MOVE ID TO SRB
         MVC   STAASCB,PSAAOLD-PSA         PASS OUR ASCB ADDR FOR POST
         L     R4,=V(STATSRB)
         MVC   SRBSECT+STADSCTL(STATSRBL),0(R4)
         LA    R4,SRBSECT+STADSCTL         GET ADDR OF CSA AREA
         ST    R4,SRBEP                    GIVE IT THE SRB'S ADDRESS
         SPACE 1
         L     R4,PPLANS                   GET ADDR OF ANSWER
         L     R4,0(R4)                    GET ADDR OF PARSE LIST
         USING JNAMDSCT,R4
         L     R5,JNAME                     GET INPUT STRING ADDR
         LTR   R5,R5                        WAS ANYTHING ENTERED?
         BZ    USETSOID                     NO, USE TSO ID
         MVC   IPARMN,0(R5)                 YES, MOVE JOB NAME
         LH    R6,JNAME+4                   GET IT'S LENGTH
         B     STORLEN                      YES, GO MOVE IT
         SPACE 2
*        A JOBNAME WAS NOT ENTERED, SO WE WILL USE THE TSO-ID.
         SPACE 1
USETSOID DS    0H
         L     R6,PSATOLD-PSA               GET CURRENT TCB PTR.
         L     R6,TCBJSCB-TCB(R6)           POINTER TO JSCB
         L     R6,JSCBACT-IEZJSCB(R6)       POINTER TO ACTIVE JSCB
         L     R6,JSCBPSCB-IEZJSCB(R6)      POINTER TO PSCB
         MVC   IPARMN,PSCBUSER-PSCB(R6)     MOVE THE USER ID
         MVI   IPARMN+7,X'40'
         LA    R6,7
         SPACE 2
STORLEN  DS    0H
         STC   R6,IPARML                    SET IT
         FREEMAIN R,LV=PPLUWA-PPL+4,SP=1,A=(R3)  FREE PARSE WORK AREA
         EJECT
*
*        NOW WE SCEDULE THE SRB AND QUEUE IT TO THE ADDRESS SPACE
*
*
         XC    STAECB,STAECB                CLEAR OUT OUR ECB
         SCHEDULE SRB=(R11)                 SEND IT TO JES
         WAIT  1,ECB=STAECB
         CLI   STAECB+3,X'00'               EVERYTHING OK?
         BE    SRBOK                        YES, CONTINUE
         TPUT  MSG2,L'MSG2                  NO, WRITE ERROR TO TERMINAL
         LA    R15,8                        SET BAD RETURN CODE
         B     EXIT
         EJECT
*        NOW WE COPY THE DATA TO A REGULAR BUFFER
         SPACE 3
SRBOK    DS    0H
         MVC   TBUFLEN,IPARML                  SAVE JOBNAME LENGTH
         MVC   TBUFNAME,IPARMN                 SAVE JOBNAME
*        MVC   BUFTABL(L'IBUFTABL*NUMENT),IBUFTABL SAVE THE DATA
         LA    R2,BUFTABL                      GET ADDR OF RECEIVING
         LA    R4,IBUFTABL                     GET ADDR OF SENDING
         LA    R3,L'IBUFTABL*NUMENT            GET LENGTH
         LR    R5,R3                           DUP IT
         MVCL  R2,R4                           MOVE THE DATA TO BUFFER
         FREEMAIN R,LV=STADSCTL+STATSRBL,A=(R11),SP=228
         XC    CSAADDR,CSAADDR                 CLEAR OUT CSA ADDR
         MODESET KEY=NZERO,MODE=PROB
         STAX  DEFER=NO
         EJECT
*        NOW WE MOVE THE DATA RETURNED TO A OUTPUT AREA AND TPUT IT.
         SPACE 2
         LA   R5,BUFTABL
         SR   R6,R6
         IC   R6,BUFLEN-BUFTABL(R5)     PICK UP FIRST ENTRY
         LTR  R6,R6                     ANY ENTRIES?
         BNZ  OUTLOOP                   YES, GO DISPLAY
         TPUT MSG4,L'MSG4               WRITE OUT NO JOBS FOUND
         B    EXIT
         SPACE 3
OUTLOOP  DS   0H
         MVI  OUTLINE,X'40'
         MVC  OUTLINE+1(L'OUTLINE-1),OUTLINE
         SR   R6,R6
         IC   R6,BUFLEN-BUFTABL(R5)     PICK UP ENTRY LENGTH
         LTR  R6,R6                     DOES ENTRY EXIST
         BZ   EXIT                      NO, DONE GET OUT
         SPACE 2
*        WE WANT TO CHECK THE JOB NUMBER TO SEE IF IT IS A BATCH
*        JOB, A STARTED TASK OR A TSO USER
         SPACE 1
         LH   R2,BUFNO-BUFTABL(R5)      GET JOB NUMBER
         SRDA R2,32                     SHIFT IT
         D    R2,=F'10000'              DIVIDE IT
         C    R3,=F'0'                  WAS IT A BATCH JOB?
         BNE  CHK1                      NO, GO TRY NEXT
         MVC  OUTJOB,=C'JOB '           MOVE 'JOB'
         B    CHKEND                    ALL DONE
CHK1     DS   0H
         C    R3,=F'1'                  WAS IT A STARTED TASK?
         BNE  CHK2                      NO, MUST BE A TSO USER
         MVC  OUTJOB,=C'STC '           MOVE 'STC'
         B    CHKEND                    ALL DONE
CHK2     DS   0H
         MVC  OUTJOB,=C'TSU '           MOVE 'TSU'
CHKEND   DS   0H
         SPACE 2
         MVC  OUTLINEN,BUFNAME-BUFTABL(R5) MOVE JOBNAME
         SR   R1,R1                     CONVERT JOB NUMBER
         LH   R1,BUFNO-BUFTABL(R5)      GET JOB NUMBER IN BINARY
         CVD  R1,DOUBLE                 CONVERT IT TO DECIMAL
         UNPK OUTLINEJ,DOUBLE           UNPACK IT
         OI   OUTLINEJ+3,X'F0'          MAKE GOOD SIGN
         EJECT
*        FIRST WE CHECK IF ITS WAITING EXECUTION BECAUSE THEN
*        THE REST OF THE BITS MEANS SOMETHING ELSE.
         SPACE 3
         TM   BUFTYPE-BUFTABL(R5),$XEQ   XEQ OR CONVERT QUEUE?
         BZ   CHECKOUT                  NO, GO SEE IF WAITING OUT/PRNT
         CLI  BUFTYPE-BUFTABL(R5),$XEQ   IN CONVERTER ?
         BNE  EXEC                     NO, TRY EXECUTION
         SPACE 2
AWEXEC   DS   0H
         MVC  OUTEXEC(38),=C'AWAITING EXECUTION CLASS X PRIORITY YY'
         SR   R1,R1
         IC   R1,BUFPRIO-BUFTABL(R5)     GET PRIORITY
         SRL  R1,4                       SHIFT IT RIGHT
         CVD  R1,DOUBLE                  CONVERT IT TO DECIMAL
         UNPK OUTEXEC+36(2),DOUBLE       UNPACK IT
         OI   OUTEXEC+37,X'F0'           CLEAN UP SIGN
         MVC  OUTEXEC+25(1),BUFTYPE-BUFTABL(R5)  MOVE IN JOB CLASS
         OI   OUTEXEC+25,X'80'            MAKE IT DISPLAYABLE
         TM   BUFFLAGS-BUFTABL(R5),QUEHOLDA+QUEHOLD1  JOB IN HOLD?
         BZ   NOEND                     NO, GO DISPLAY IT
         MVC  OUTEXEC+39(4),=C'HOLD'   ADD 'HOLD'
         B    NOEND                     GO DISPLAY IT
         SPACE 3
*        NOW WE CHECK IF ITS EXECUTING AND IF SO GET THE CURRENT
*        JOB-STEP CPU TIME
         SPACE 1
EXEC     DS   0H
         TM   BUFFLAGS-BUFTABL(R5),QUEBUSY   IS IT CURRENTLY BUSY
         BZ   AWEXEC                    NO, THEREFORE MUST BE WAITING
         SPACE 1
         L    R15,16                    GET ADDR OF CVT
         L    R2,CVTASVT-CVT(R15)       GET ADDR OF ASVT
         L    R3,ASVTMAXU-ASVT(R2)      GET MAX # OF ASCBS
LOOP4    L    R4,ASVTENTY-ASVT(R2)      GET ADDR OF ASCB
         LTR  R4,R4                     IS IT AN ACTIVE ONE?
         BM   LOOP5                     NO, TRY NEXT ONE
         USING ASCB,R4
         L    R8,ASCBJBNI               GET ADDR OF JOBNAME FIELD
         LTR  R8,R8                     IT THERE
         BZ   NOTBAT                    NO, MUST NOT BE BATCH
         CLI  24(R8),C'A'               **** THIS CODE RIPPED FROM
         BL   NOTIT                           WINDOW
         MVC  OUTSTEP,24(R8)
         B    JOBOK
NOTIT    DS   0H
         MVC  OUTSTEP,56(R8)
         B    JOBOK
NOTBAT   DS   0H
         L    R8,ASCBJBNS               GET ADDR OF OTHER JOBNAME FIELD
         L    R1,ASCBCSCB               GET ADDR OF CSCB
         MVC  OUTSTEP(8),CHCLS-CHAIN(R1) MOVE STEPNAME
         SPACE 1
JOBOK    DS   0H
         MVI  OUTSTEP+8,X'40'           PUT TRAILING BLANK
         SPACE 3
         SR   R1,R1
         IC   R1,BUFLEN-BUFTABL(R5)     GET LENGTH OF JOBNAME
         BCTR R1,0                      DECREMENT FOR EXECUTE
         EX   R1,COMPCPU                IS IT THE CORRECT JOBNAME?
         BNE  LOOP5                     NO, GO TRY NEXT
         SPACE 2
         L    R1,ASCBEJST               GET HIGH ORDER PART OF JOB TIME
         A    R1,ASCBSRBT               ADD IN SRB TIME
         CVD  R1,DOUBLE                 GET IT READY TO SHOW
         UNPK OUTTIME,DOUBLE
         OI   OUTTIME+4,X'F0'
         MVC  OUTTIMEC,=C'TIME:'
         MVC  OUTTIMEU,=C' SECS'
         MVC  OUTEXEC,=C'EXECUTING '
         B    NOEND                     GO FOR NEXT ENTRY
LOOP5    LA   R2,4(R2)                  GO TRY NEXT
         BCT  R3,LOOP4                  END OF ASCB CHAIN?
         MVC  OUTSTEP,=C'        '      YES, BLANK OUT STEP NAME
         SPACE 2
NOCPU    DS   0H
CHECKOUT DS   0H
         TM   BUFTYPE-BUFTABL(R5),$OUTPUT IS JOB AWAITING OUTPUT?
         BZ   NO2                       NO, GO TRY SOMETHING ELSE
         TM   BUFFLAGS-BUFTABL(R5),QUEBUSY   IS IT BUSY?
         BNZ  AWAITPRT
         MVC  OUTEXEC(15),=C'AWAITING OUTPUT'
         TM   BUFFLAGS-BUFTABL(R5),QUEHOLDA+QUEHOLD1  JOB IN HOLD?
         BZ   NOEND                     NO, GO DISPLAY IT
         MVC  OUTEXEC+16(4),=C'HOLD'   ADD 'HOLD'
         B    NOEND                     GO DISPLAY IT
         SPACE 3
NO2      DS   0H
         TM   BUFTYPE-BUFTABL(R5),$HARDCPY IS JOB AWAITING PRINT?
         BZ   NO3                       NO, GO TRY SOMETHING ELSE
AWAITPRT DS   0H
         MVC  OUTEXEC(14),=C'AWAITING PRINT'
         MVC  OUTEXEC+20(5),=C'PRNT '
         MVI  OUTEXEC+25,C'R'           INDICATE REMOTE ROUT
         SR   R4,R4
         ICM  R4,1,BUFROUT-BUFTABL(R5)  IS IT ROUTED TO A USER?
         BNZ  NOTUSER                   NO
         MVI  OUTEXEC+25,C'U'           YES, INDICATE USER
NOTUSER  DS   0H
         ICM  R4,1,BUFROUT-BUFTABL+1(R5) PICK UP ROUT CODE
         BNZ  CONVERT                   NOT ZERO, THEREFORE NOT LOCAL
         MVC  OUTEXEC+25(5),=C'LOCAL'   ZERO, MUST BE LOCAL
         B    CKPUNCH                   FINISHED, GET OUT
CONVERT  DS   0H
         CVD  R4,DOUBLE                 CONVERT THE ROUT TO DECIMAL
         UNPK OUTEXEC+26(3),DOUBLE      UNPACK IT
         OI   OUTEXEC+28,X'F0'          MAKE THE SIGN GOOD
         SPACE 1
CKPUNCH  DS   0H
         MVC  OUTEXEC+32(5),=C'PNCH '
         MVI  OUTEXEC+37,C'R'           INDICATE REMOTE ROUT
         SR   R4,R4
         ICM  R4,1,BUFROUTP-BUFTABL(R5) IS IT ROUTED TO A USER
         BNZ  NOTUSERP                  NO
         MVC  OUTEXEC+37,C'U'           YES, INDICATE USER
NOTUSERP DS   0H
         ICM  R4,1,BUFROUTP-BUFTABL+1(R5) PICK UP ROUT CODE
         BNZ  CONVERTP                  NOT LOCAL, CONVERT TO ROUT
         MVC  OUTEXEC+37(5),=C'LOCAL'   ZERO, MUST BE LOCAL
         B    CKHOLD                    FINISHED, GET OUT
CONVERTP DS   0H
         CVD  R4,DOUBLE                 CONVERT ROUT TO DECIMAL
         UNPK  OUTEXEC+38(3),DOUBLE     UNPACK IT
         OI    OUTEXEC+40,X'F0'         MAKE THE SIGN GOOD
         SPACE 1
CKHOLD   DS   0H
         TM   BUFFLAGS-BUFTABL(R5),QUEHOLDA+QUEHOLD1  JOB IN HOLD?
         BZ   NOEND                     NO, GO DISPLAY IT
         MVC  OUTEXEC+15(4),=C'HOLD'   ADD 'HOLD'
         B    NOEND                     GO DISPLAY IT
         SPACE 3
NO3      DS   0H
NOEND    DS   0H
         LA   R4,OUTLINE                GET ADDR OF OUTPUT AREA
         TPUT (4),L'OUTLINE         WRITE IT TO THE TERMINAL
         SPACE 1
NEXTENT  DS   0H
         LA   R5,L'BUFTABL(R5)          BUMP TO NEXT ENTRY
         B    OUTLOOP
         EJECT
EXIT     DS   0H
         L    13,SAVEB+4
         FREEMAIN R,LV=BUFDSCTL,A=(R9)
         LM   R14,R12,12(R13)
         BR   R14
         EJECT
*        CONSTANTS AND THINGS
COMPCPU  CLC   0(0,R8),BUFNAME-BUFTABL(R5)  COMPARE FOR EXECUTE
MSG1     DC    C'JES2 IS DOWN'
MSG2     DC    C'JOBQ SEARCH ERROR'
MSG3     DC    C'ERROR DURING PARSE'
MSG4     DC    C'NO JOBS FOUND'
MSG5     DC    C'UNABLE TO CREATE ESTAE'
PARMST   IKJPARM DSECT=JNAMDSCT
JNAME    IKJPOSIT JOBNAME
         IKJENDP
         LTORG
         EJECT
ESTAEXIT DS    0H
         PUSH USING
         DROP
         USING *,R15
         LA    R5,12
         CR    R0,R5
         BE    NOSDWA
         L     R2,SDWAPARM-SDWA(R1)     GET PARMAMETER ADDR
NOSDWA   L     R3,0(R2)                 GET ADDR OF STORAGE AREA
         LTR   R3,R3                    WAS IT EVER OBTAINED?
         BZ    ENDEXIT                  NO, GET OUT
         FREEMAIN R,LV=STADSCTL+STATSRBL,SP=228,A=(3) FREE THE STORAGE
ENDEXIT  SLR   R15,R15                  CONTINUE WITH ABEND
         BR    R14                      EXIT
         POP   USING
         EJECT
NUMENT   EQU   198             MAX NUMBER OF MATCHES TO BE FOUND
         IHASRB
STAECB   DS    F
SRBHCT   DS    F
STAASCB  DS    F
IPARM    DS    0CL9
IPARML   DS    CL1
IPARMN   DS    CL8
IBUFTABL DS    0CL18
IBUFLEN  DS    CL1
IBUFNAME DS    CL8
IBUFNO   DS    CL2
IBUFTYPE DS    CL1
IBUFLAGS DS    CL1
IBUFROUT DS    CL2
IBUFROTP DS    CL2
IBUFPRIO DS    CL1
STARET   DS    (NUMENT)CL(L'IBUFTABL)
         DS    0D
STADSCTL EQU   *-SRBSECT
BUFDSCT  DSECT
SAVEB    DS    18F
CSAADDR  DS    F
DOUBLE   DS    D
TBUFLEN  DS    CL1
TBUFNAME DS    CL8
OUTLINE  DS    0CL88
OUTJOB   DS    CL4
OUTLINEN DS    CL8
OUTSPC1  DS    CL1
OUTLINEJ DS    CL4
OUTSPC2  DS    CL1
OUTEXEC  DS    CL10
OUTSPC3  DS    CL1
OUTSTEP  DS    CL9
OUTTIMEC DS    CL5
OUTTIME  DS    CL5
OUTTIMEU DS    CL5
OUTSPC4  DS    CL35
PARSANS  DS    F
PARSECB  DS    F
MFLESTAE ESTAE 0,MF=L
BUFTABL  DS    0CL18
BUFLEN   DS    CL1
BUFNAME  DS    CL8
BUFNO    DS    CL2
BUFTYPE  DS    CL1
BUFFLAGS DS    CL1
BUFROUT  DS    CL2
BUFROUTP DS    CL2
BUFPRIO  DS    CL1
BUFRET   DS    (NUMENT)CL(L'BUFTABL)
BUFDSCTL EQU   *-BUFDSCT
         EJECT
         PRINT NOGEN
         IHASDWA
         IKJCPPL
         IKJPPL
         IEFJSCVT
         IEFJESCT
         IHAASCB
         IHAPSA
         IKJTCB
         IEZJSCB
         IKJPSCB
STATUS   CSECT
         IHAASVT
STATUS   CSECT
         $SVT
         DSECT
         IEECHAIN
         PRINT GEN
STATUS   CSECT
         CVT   DSECT=YES,LIST=NO
         TITLE 'SRB FOR STATUS'
*
*
*        THIS ROUTINE OF THE STATUS COMMAND SEARCHES THE JQE'S
*        LOOKING  FOR A MATCH ON THE JOB NAME ENTERED IN THE
*        STATUS COMMAND.  IT RUNS IN THE JES2 ADDRESS SPACE AND
*        IS SCHEDULED AS AN SRB BY THE STATUS COMMAND MAIN
*        PROGRAM.
*
*
         EJECT
         PUSH  USING
         DROP
STATSRB  CSECT
         USING STATSRB,R12           SET UP BASE REGISTER
         LR    R12,R15
         LR    R9,R0                 SET ADDRESS OF DYNAMIC AREA PASSED
         USING SRBSECT,R9
         ST    R14,SRBSAVE           SAVE REGISTER 14 AWAY
*        LA    R11,STATFRR
*        SETFRR A,FRRAD=(R11),WRKREGS=(R8,R6),PARMAD=(R10)
         L     R11,SRBHCT            GET ADDR OF HASP CONTROL TABLE
         USING HCTDSECT,R11          SET ADDRESSABILITY
*
         LA    R8,$JQTYPES           GET TOTAL NUMBER OF QUEUES
         SR    R10,R10               CLEAR INDEX
QHEAD    DS    0H
         USING JQEDSECT,R6
         LH    R6,$JQHEADS(R10)       GET OFFSET TO JQE CHAIN
         N     R6,=X'0000FFFF'        MASK OUT GARBAGE, ANYBODY QUEUED?
         BZ    NQUE                   NONE IN QUEUE
         SLL   R6,2                   SHIFT IT
         AL    R6,$JOBQPTR            ADD TO BASE ADDRESS
QNEXT1   DS    0H
         SR    R7,R7
         IC    R7,IPARML              GET LENGTH OF SEARCH ARGUMENT
         BCTR  R7,0                   DECREMENT FOR COMPARE
         EX    R7,COMPNAME            JOB NAMES MATCH?
         BNE   JQENEXT                NO
         LA    R1,NUMENT              GET NUMBER OF ENTRIES IN TABLE
         LA    R2,IBUFTABL            GET ADDR OF STUFF TABLE
TRYAGN   DS    0H
         CLI   0(R2),X'00'            IS THIS A FREE ENTRY?
         BE    FOUNDENT               YES, GO FILL IT UP
         LA    R2,L'IBUFTABL(R2)      BUMP TO NEXT ENTRY
         BCT   R1,TRYAGN              GO TRY AGAIN
         B     EXIT2                  WERE FULL, GO EXIT
         SPACE 2
JQENEXT  DS    0H
         LH    R6,JQECHAIN             CHAIN TO NEXT JQE
         N     R6,=X'0000FFFF'         MASK OFF GARBAGE
         BZ    NQUE                    ANYBODY QUEUED, NO
         SLL   R6,2                    SHIFT IT
         AL    R6,$JOBQPTR             GO TO NEXT JQE
         B     QNEXT1                  GO LOOK AT IT
         SPACE 3
FOUNDENT DS    0H
         CLI   JQETYPE,$PURGE          IS IT IN PURGE?
         BZ    JQENEXT                 YES, FORGET IT
         SPACE 3
         SR    R3,R3
         LA    R7,JQEJNAME             CALCULATE LENGTH OF JOBNAME
         LA    R1,8
LOOP8    DS    0H
         CLI   0(R7),X'40'
         BE    DONE
         LA    R3,1(R3)
         BCT   R1,LOOP8
DONE     DS    0H
         SPACE 3
         STC   R3,IBUFLEN-IBUFTABL(R2)                   SET LENGTH
         MVC   IBUFNAME-IBUFTABL(L'IBUFNAME,R2),JQEJNAME  JOBNAME,
         MVC   IBUFNO-IBUFTABL(L'IBUFNO,R2),JQEJOBNO      JOB NUMBER,
         MVC   IBUFTYPE-IBUFTABL(L'IBUFTYPE,R2),JQETYPE      TYPE,
         MVC   IBUFLAGS-IBUFTABL(L'IBUFLAGS,R2),JQEFLAGS     FLAGS,
         MVC   IBUFROUT-IBUFTABL(L'IBUFROUT,R2),JQEPRTRT     ROUT,
         MVC   IBUFROTP-IBUFTABL(L'IBUFROTP,R2),JQEPUNRT     ROUT,
         MVC   IBUFPRIO-IBUFTABL(L'IBUFPRIO,R2),JQEPRIO    AND PRIORITY
         MVI   L'IBUFTABL(R2),X'00'     CLEAR OUT NEXT ENTRY
         B     JQENEXT                GO LOOK SOME MORE
         SPACE 3
NQUE     DS    0H
         LA    R10,2(R10)
         BCT   R8,QHEAD               QUEUE
         B     EXIT2
         SPACE 3
EXIT2    DS    0H                     POST BACK SRB ORIGINATOR
         LA    R11,STAECB             GET ADDR OF ECB
         ICM   R11,B'1000',=X'80'     SET FOR CROSS MEMORY
         SLR   R10,R10                COMPLETION CODE
*        LA    R12,POSTERR            ADDR OF ERROR ROUTINE
         L     R13,STAASCB            CALLERS ASCB ADDR
         L     R1,16
         L     R15,CVT0PT01-CVT(R1)   POST ROUTINE ENTRY POINT
         BALR  R14,R15                GO POST HIM
         SPACE 1
         L     R14,SRBSAVE
         BR    R14
         SPACE 3
         LTORG
         EJECT
STATFRR  DS    0H
         PUSH  USING
         DROP
         USING STATFRR,R13            SET UP
         LR    R13,R15                ADDRESSABILITY
         POP   USING
         EJECT
         LTORG
COMPNAME CLC   JQEJNAME(0),IPARMN     EXECUTED CLC
STATSRBL EQU   *-STATSRB
         COPY  $HASPGEN
         $JQE
         $PCE
         $HCT
         DROP BASE1
         END
