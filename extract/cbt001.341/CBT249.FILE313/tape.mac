TAPE     TITLE 'PAPER TAPE COMMAND PROCESSOR'
         PRINT GEN
***********************************************************************
*                                                                     *
* FUNCTION -                                                          *
*             THIS COMMAND ALLOWS PAPER TAPE INPUT FROM               *
*             A TIME SHARING TERMINAL (TSO) WITHOUT XON AND XOFF      *
*             FACILITY.                                               *
*                                                                     *
* ENTRY POINT -                                                       *
*             TAPECP IS THE ONLY ENTRY POINT.                         *
*                                                                     *
* INPUT -                                                             *
*         REGISTER 1 POINTS TO THE COMMAND PROCESSOR PARAMETER LIST.  *
*                                                                     *
* OUTPUT -                                                            *
*          A DISK DATA SET TO WHICH IS WRITTEN THE DATA READ          *
*          FROM THE PAPER TAPE INPUT.                                 *
*                                                                     *
* EXIT -                                                              *
*          RETURN TO THE TERMINAL MONITOR PROGRAM.                    *
*                                                                     *
* REGISTER USAGE -                                                    *
*                  1,2,3,10,11 WORK REGISTERS                         *
*                  4 LOCAL WORK AREA                                  *
*                  5 OUTPUT DCB                                       *
*                  6 PARSE PARAMETER LIST (PPL)                       *
*                  7 DAIR PARAMETER LIST (DAPL)                       *
*                  8 DAPB08                                           *
*                  9 DFDSECTD                                         *
*                  12 BASE                                            *
*                  13 SAVEAREA                                        *
* ATTRIBUTES -                                                        *
*                 RENT REUS                                           *
*                                                                     *
* MACROS -                                                            *
*          CXD      IKJCPPL   IKJIDENT  IKJPPL   PUT     TPUT         *
*          CLOSE    IKJDAPL   IKJKEYWD  IKJRLSA  RETURN               *
*          DCB      IKJDAP04  IKJNAME   IKJSUBF  SAVE                 *
*          DCBD     IKJDAP08  IKJPARM   LINK     STCLEAR              *
*          GETMAIN  IKJENDP   IKJPOSIT  OPEN     TGET                 *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* COMMAND SYNTAX -                                                    *
*                 TAPE DATA-SET-NAME SPACE(PRI,SEC) TRACKS            *
*                 T                                 CYLINDERS         *
*                                                   BLOCKS            *
*                                                                     *
*                 DIR(INTEGER) LINE(RECORD-LENGTH) BLOCK(BLKSIZE)     *
*                                                                     *
*                 NUM(INTEGER1,INTEGER2) RLSE   OLD                   *
*                 NONUM                  NORLSE NEW                   *
*                                               MOD                   *
* COMMAND DEFAULTS -                                                  *
*                 DATA-SET-NAME (ONLY REQUIRED OPERAND)               *
*                 SPACE(2,2)                                          *
*                 TRACKS                                              *
*                 DIR(1)                                              *
*                 LINE(80)                                            *
*                 BLOCK(3120)                                         *
*                 NUM(10,10)                                          *
*                 RLSE                                                *
*                 OLD                                                 *
*                                                                     *
* NOTES -                                                             *
*          1. THE FOLLOWING OPERANDS ARE VALID ONLY FOR 'NEW'         *
*             DATA SETS: SPACE,DIR,LINE,BLOCK,TRACKS,CYLINDERS,       *
*             BLOCKS,RLSE,NORLSE.                                     *
*          2. 'MOD' IS NOT VALID FOR A PARTITIONED DATA SET.          *
*          3. WHEN MEMBER NAME IS NOT SPECIFIED FOR A PDS             *
*             'TEMPNAME' IS USED.                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* TCAM/TSO MODIFICATIONS -                                            *
*                                                                     *
*          TWO MODIFICATIONS TO TCAM ARE REQUIRED.                    *
*                                                                     *
*          1. MODULE IEDQKA IS MODIFIED TO PREVENT SENDING CPU-ID     *
*             TO THE TERMINAL.                                        *
*          2. MODULE IEDAYM IS MODIFIED TO BYPASS SENDING MESSAGES    *
*             TO A TERMINAL WHEN THE PAPER TAPE COMMAND IS IN         *
*             PROGRESS.                                               *
*                                                                     *
*          TWO MODIFICATIONS TO TSO/TIOC ARE REQUIRED.                *
*                                                                     *
*          1. MODULE IGG0940G IS MODIFIED TO BYPASS CHECKING TERMINAL *
*             TYPE FOR THE STCLEAR MACRO.                             *
*                                                                     *
*          THE COMMAND SHOULD FUNCTION PROPERLY WITH ANY VERSION      *
*          OF TCAM, HOWEVER, TESTING AND IMPLEMENTATION WAS DONE      *
*          WITH TCAM9 ON MVS IPO 4.0 .     AN ADDITIONAL REQUIREMENT  *
*          ON MVS IS THE ABILITY TO ISSUE THE SWAP AND DONTSWAP       *
*          SYSEVENTS IN ORDER TO GUARANTEE STORAGE RESIDENCY WHILE    *
*          THE COMMAND IS IN PROGRESS. AUTHORIZATION TO ISSUE THE     *
*          KEY ZERO AND THEREBY AN AUTHORIZED STATE. THIS CODE IS
*          CLEARLY MARKED AND SHOULD BE REMOVED FOR SYSTEMS OTHER
*          THAN MVS.
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*          THE STATEMENTS WITH TJR IN COLUMNS 69-71 WERE CHANGED OR   *
*          ADDED AT THE SAN BRUNO POSTAL DATA CENTER BY TIMOTHY J.    *
*          RAIMER ON 12-9-75 TO FIX THE FOLLOWING PROBLEMS:           *
*           1. ERROR WHEN USING FULLY QUALIFIED DSN.                  *
*           2. USAGE OF A PDS.                                        *
*                                                                     *
*          THE STATEMENTS WITH     IN COLUMNS 69-71 WERE ADDED        *
*          AT THE SAN BRUNO POSTAL DATA CENTER BY BILLY VICARS ON     *
*          ON 12-26-75 TO CORRECT THE PROBLEM OF LINE SIZE GREATER    *
*          THAN 80 BYTES.                                             *
*                                                                     *
***********************************************************************
         EJECT                                                        *
***********************************************************************
* DSECTS                                                              *
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
WORK8    DS    D
CPECB    DS    F
ANS      DS    F
NUMLOC   DS    F
REQSERVC DS    3F                             .     REJ
DAIRRC   DS    F                                    REJ
IKJEFF02 DS    F                                    REJ
TAPESIZE DS    F
ORGSIZE  DS    F
WORKDSN  DS    CL46
ENDMSG   DS    CL41
NUM1     DS    PL5
NUM2     DS    PL5
PERFORM  DS    X                              .     REJ
GARBAGE  DS    X                              .     REJ
USERNO   DS    CL7                            .     REJ
OPENLIST OPEN  (DCBMODEL),MF=L                      REJ
CLOSLIST CLOSE (DCBMODEL),MF=L                      REJ
WTOBUF   WTO   'USERNO - GARBAGE CHAR WHILE USING TAPE',ROUTCDE=(8),   *
               DESC=(2),MF=L
WTOLEN   EQU   *-WTOBUF
INAREA   DS    CL255           LRECL LIMITED TO 255 BYTES
WORKLEN  EQU   *-WORKAREA
         DCBD  DSORG=(QS),DEVD=(DA)
         IKJPPL
         IKJDAPL
         IKJDAP08
         IKJEFFDF DFDSECT=YES
         CVT
         PRINT GEN
         TITLE 'MAIN CSECT'
TAPECP   CSECT
***********************************************************************
* SAVE REGISTERS
* SET UP DSECT/CSECT ADDRESSABILITY
* INITIALIZE STORAGE
* SET UP SAVE AREA
***********************************************************************
         SAVE  (14,12),,*               SAVE REGS
         LR    R12,R15                  USE REG 12 AS BASE
         USING TAPECP,R12
         LR    R10,R1                   SAVE CPPL ADDR
         USING CPPL,R10                 LIST ADDR IN REG 10
         L     R0,CXD                   GET LENGTH OF DSECTS
         GETMAIN R,LV=(0)               GET STORAGE
         LR    R6,R1                    BEGINNING OF CLEAR
         LA    R7,WORKLEN               SIZE OF WORK AREA
         LR    R8,R1                    BEGINNING OF CLEAR
         LA    R9,0                     ZERO OUT WORK AREA
         MVCL  R6,R8
         ST    R13,4(R1)                SAVE PTR TO OLD SAVEAREA
         ST    R1,8(R13)                SAVE PTR TO NEW SAVEAREA
         LR    R13,R1                   POINT TO NEW SAVEAREA
         USING WORKAREA,R13
         LM    R5,R9,QCONS+4            LOAD QCONS FOR DSECTS
         LA    R5,0(R5,R1)              .
         LA    R6,0(R6,R1)              .
         LA    R7,0(R7,R1)              .
         LA    R8,0(R8,R1)              .
         LA    R9,0(R9,R1)              .
         USING IHADCB,R5                .
         USING PPL,R6                   .
         USING DAPL,R7                  .
         USING DAPB08,R8                .
         USING DFDSECTD,R9              .
         MVI   WORKDSN+2,C' '           CLEAR DSNAME AREA TO SPACES
         MVC   WORKDSN+3(43),WORKDSN+2  .
         MVC   DAPB08(84),MODEL08       INITIALIZE DAPB08
         MVC   0(DCBLEN,R5),DCBMODEL    INITIALIZE OUTPUT DCB
***********************************************************************
* INITIALIZE THE PPL AND DAPL
***********************************************************************
         L     R1,CPPLCBUF              GET COMMAND BUFFER ADDR
         ST    R1,PPLCBUF                AND PUT IN PPL
         L     R1,CPPLUPT               GET USER PROFILE TABLE ADDR
         ST    R1,PPLUPT                 AND PUT IN PPL
         ST    R1,DAPLUPT                AND PUT IN DAPL
         L     R1,CPPLECT               GET ENVIRON CONTROL TABLE ADDR
         ST    R1,PPLECT                 AND PUT IN PPL
         ST    R1,DAPLECT                AND PUT IN DAPL
         L     R1,CPPLPSCB              GET PROT STEP CONTROL BLK ADDR
         ST    R1,DAPLPSCB               AND PUT IN DAPL
         MVC   USERNO,0(R1)   MOVE USERNO TO WORKAREA
         LA    R1,CPECB                 GET CP ECB ADDR
         ST    R1,PPLECB                 AND PUT IN PPL
         ST    R1,DAPLECB                AND PUT IN DAPL
         L     R1,PCLADDR               GET PCL ADDR
         ST    R1,PPLPCL                 AND PUT IN PPL
         LA    R1,ANS                   GET ANSWER ADDR
         ST    R1,PPLANS                 AND PUT IN PPL
         XR    R1,R1                    CLEAR...
         ST    R1,PPLUWA                 UWA
         DROP  R10
***********************************************************************
* PARSE THE INPUT COMMAND BUFFER
***********************************************************************
         CALLTSSR  EP=IKJPARS,MF=(E,PPL)    GO TO PARSE ROUTINE     REJ
         LTR   R15,R15                  WAS PARSE GOOD
         BNZ   PARSEERR                 NO...
         L     R11,ANS                  GET ANSWER ADDR
         USING IKJPARMD,R11
***********************************************************************
* PROCESS DATA SET NAME
***********************************************************************
         L     R1,DSN                   GET POINTER TO DSNAME
         LH    R2,DSN+4                 GET LENTH OF DSNAME
         STH   R2,WORKDSN               AND PUT IN WORK AREA
         BCTR  R2,0                     DECREASE FOR MVC
         EX    R2,MVCDSN                MOVE DSN TO WORK AREA
         LA    R1,WORKDSN               GET ADDR OF DSNAME
         ST    R1,DA08PDSN              AND PUT IN DAPB08
         TM    DSN+14,X'80'             IS MEMBER NAME PRESENT
         BNO   NOMEM                    NO...
         L     R1,DSN+8                 YES...GET POINTER TO MEMBER
         LH    R2,DSN+12                GET LENGTH OF MEMBER NAME
         BCTR  R2,0                     DECREASE FOR MVC
         EX    R2,MVCMEM                MOVE MEMBER TO DAPB
NOMEM    DS    0H
         TM    DSN+20,X'80'             IS PASSWORD PRESENT
         BNO   NOPASS                   NO...
         L     R1,DSN+16                YES...GET POINTER TO PASSWORD
         LH    R2,DSN+20                GET LENGTH OF PASSWORD
         BCTR  R2,0                     DECREASE FOR MVC
         EX    R2,MVCPASS               MOVE PASSWORD TO DAPB
NOPASS   DS    0H
         TM    DSN+6,X'40'              IS DSN IN QUOTES            TJR
         BO    *+12                     YES...
         OI    DA08CTL,DA08UID          NO...PREFIX DSN WITH USER ID
***********************************************************************
* PROCESS SEQUENCE NUMBERS (NUM/NONUM)
***********************************************************************
NUMBER   DS    0H
         TM    INTEGER1+6,X'80'         IS INTEGER1 SPECIFIED
         BNO   NUMBERNO                 NO...
         L     R1,INTEGER1              GET POINTER TO INTEGER1
         LH    R2,INTEGER1+4            GET LENGTH OF INTEGER1
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                PACK INTEGER1
         ZAP   NUM1,WORK8+3(5)          SAVE PACKED INTEGER1
         L     R1,INTEGER2              GET POINTER TO INTEGER2
         LH    R2,INTEGER2+4            GET LENGTH OF INTEGER2
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                PACK INTEGER2
         ZAP   NUM2,WORK8+3(5)          SAVE PACKED INTEGER2
NUMBERNO DS    0H
***********************************************************************
* PROCESS DATA SET DISPOSITION
***********************************************************************
         LH    R1,DISP                  GET NUMBER OF DISP KEYWORD
         SLL   R1,2                     MULT BY 4 FOR BRANCH TABLE
         B     *(R1)
         B     DSPOLD                   OLD SPECIFIED
         B     DSPNEW                   NEW SPECIFIED
DSPMOD   DS    0H                       MOD SPECIFIED
         MVI   DA08DSP1,DA08MOD         DISP=(MOD,
         MVI   DA08DPS2,DA08KEEP                  KEEP,
         MVI   DA08DPS3,DA08KEP                        KEEP)
         B     DAIR                     GO TO DAIR
DSPOLD   DS    0H
         MVI   DA08DSP1,DA08OLD         DISP=(OLD,
         MVI   DA08DPS2,DA08KEEP                  KEEP,
         MVI   DA08DPS3,DA08KEP                        KEEP)
         B     DAIR                     GO TO DAIR
DSPNEW   DS    0H
         MVI   DA08DSP1,DA08NEW         DISP=(NEW,
         MVI   DA08DPS2,DA08CAT                   CATLG,
         MVI   DA08DPS3,DA08DELE                        ,DELETE)
***********************************************************************
* PROCESS  RECORD LENGTH
***********************************************************************
         L     R1,LRECL                 GET POINTER TO LRECL
         LH    R2,LRECL+4               GET LENGTH OF LRECL
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                CONVERT TO BINARY
         CVB   R1,WORK8                 .
RECLEN2  DS    0H
         STH   R1,DCBLRECL              PUT LRECL IN DCB
***********************************************************************
* PROCESS SPACE REQUIREMENTS
***********************************************************************
         LH    R1,SPACEVAL              GET NUMBER OF SPACEVAL KEYWD
         SLL   R1,2                     MULT BY 4 FOR BRANCH TABLE
         B     *(R1)
         B     SPTRKS                   TRACKS SPECIFIED
         B     SPCYLS                   CYLINDERS SPECIFIED
SPBLKS   DS    0H                       BLOCKS SPECIFIED
         OI    DA08CTL,DA08ABKL         ALLOC BLOCKS
         B     SPRLSE
SPCYLS   DS    0H
         OI    DA08CTL,DA08CYLS         ALLOC CYLINDERS
         B     SPRLSE
SPTRKS   DS    0H
         OI    DA08CTL,DA08TRKS         ALLOC TRACKS
SPRLSE   DS    0H
         LH    R1,RLSE                  WAS RLSE SPECIFIED
         CH    R1,H1                    .
         BNE   *+8                      NO...
         OI    DA08CTL,DA08RLSE         YES...SAY IT IN DAPB
SPDQTY   DS    0H
         TM    DSN+14,X'80'             IS MEMBER SPECIFIED
         BO    SPDQTY1                  YES...
         TM    DIRECTRY+6,X'80'         NO...IS DIR SPECIFIED
         BNO   SPPQTY                   NO...IS NOT A PDS
         MVC   DA08MNM,TEMPNAME         YES...USE 'TEMPNAME'
SPDQTY1  DS    0H
         LA    R1,DEFDIR                GET DEFAULT DIRECTORY BLOCKS
         TM    DIRECTRY+6,X'80'         IS DIR SPECIFIED
         BNO   SPDQTY2                  NO...
         L     R1,DIRECTRY              GET POINTER TO DIRECTORY AMT
         LH    R2,DIRECTRY+4            GET LENGTH OF DIRECTORY AMT
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                CONVERT TO BINARY
         CVB   R1,WORK8                 .
SPDQTY2  DS    0H
         STCM  R1,7,DA08DQTY+1          MOVE TO DAPB
SPPQTY   DS    0H
         L     R1,PRI                   GET POINTER TO PRI QTY
         LH    R2,PRI+4                 GET LENGTH OF PRI QTY
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                CONVERT TO BINARY
         CVB   R1,WORK8                 .
SPPQTY2  DS    0H
         STCM  R1,7,DA08PQTY+1          MOVE TO DAPB
SPSQTY   DS    0H
         L     R1,SEC                   GET POINTER TO SEC QTY
         LH    R2,SEC+4                 GET LENGTH OF SEC QTY
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                CONVERT TO BINARY
         CVB   R1,WORK8                 .
SPSQTY2  DS    0H
         STCM  R1,7,DA08SQTY+1          PUT IN DAPB
***********************************************************************
* PROCESS BLKSIZE
***********************************************************************
SPBLK    DS    0H
         L     R1,BLKSIZE               GET POINTER TO BLKSIZE
         LH    R2,BLKSIZE+4             GET LENGTH OF BLKSIZE
         BCTR  R2,0                     DECREASE FOR EXEC OF PACK
         EX    R2,PACKIT                CONVERT TO BINARY
         CVB   R1,WORK8                 .
SPBLK2   DS    0H
         STCM  R1,3,DA08BLK+2           PUT IN DAPB
         OI    DA08CTL,DA08PERM         SET FOR PERMANENT ALLOC
***********************************************************************
* SEE IF BLKSIZE IS MULTIPLE OF LRECL
***********************************************************************
         XR    R2,R2                    CLEAR REG 2
         LH    R3,DA08BLK+2             GET BLKSIZE
         LH    R1,DCBLRECL              GET LRECL
         DR    R2,R1                    DIVIDE BLKSIZE BY LRECL
         LTR   R2,R2                    IS BLKSI MULTIPLE OF LRECL
         BNZ   BLKSIERR                 NO...ERROR
         B     DAIR2                    GO LINK TO DAIR
***********************************************************************
* LINK TO DAIR
***********************************************************************
DAIR     DS    0H
DAIR2    DS    0H
         IKJRLSA ANS               RELEASE PARSE STORAGE
         LA    R1,DAPB08                GET DAPB ADDR
         ST    R1,DAPLDAPB              AND PUT IN DAPL             REJ
         CALLTSSR EP=IKJDAIR,MF=(E,DAPL)    CALL DAIR               REJ
         LTR   R15,R15                  IS RETURN CODE ZERO
         BNZ   DAIRERR                  NO...
         TM    DA08DSO,X'40'           IS DSORG=PS                  TJR
         BO    DDNMOVE                 YES .....                    TJR
         TM    DA08DSP1,DA08MOD        IS DISP=MOD SPECIFIED        TJR
         BNO   *+8                                                  TJR
         B     MODERR                ERROR, MOD OF PDS              TJR
         CLI   DA08MNM,C' '    DID HE SPECIFIY MODULE NAME          TJR
         BE    MEMBERR         NO, OLD BUT NO MEM SPECIFIED         TJR
***********************************************************************
* PREPARE TO PROCESS DATA - DCB,STAX,STCLEAR,ETC.
***********************************************************************
DDNMOVE  DS 0H
         MVC   DCBDDNAM,DA08DDN         GET DDNAME FROM DAPB
         MVI   OPENLIST,X'80'
         OPEN  ((R5),(OUTPUT)),MF=(E,OPENLIST)
***********************************************************************
* THE FOLLOWING CODE SHOULD BE REMOVED FOR SYSTEMS OTHER THAN MVS.    *
***********************************************************************
***********************************************************************
         MODESET KEY=ZERO               GET KEY ZERO                MVS
         LA    R1,REQSERVC              POINT TO RETURN AREA        MVS
         LA    R0,X'26'                 SYSEVENT CODE (REQSERVC)    MVS
         SVC   95                       ISSUE SVC                   MVS
         LA    R1,X'FE'                 DPRTY=254                   MVS
         LA    R0,X'0A'                 SYSEVENT INITATT            MVS
         SVC   95                       .                           MVS
         LA    R0,X'29'                 SYSEVENT DONTSWAP           MVS
         SVC   95                       ISSUE SVC                   MVS
         MODESET KEY=NZERO              GET BACK INTO PROB KEY      MVS
***********************************************************************
         STAX  ATTNEXIT                 SPECIFY ATTN EXIT
         GTSIZE
         ST    R1,ORGSIZE               SAVE IT IN ORIGINAL SIZE
         LH    R1,DCBLRECL              PICK UP NEW LINE SIZE
         ST    R1,TAPESIZE              SAVE IT FOR STSIZE
         STSIZE SIZELOC=TAPESIZE        USE NEW LINE SIZE
         TPUT  STARTMSG,L'STARTMSG      TELL HIM TO START
         STCLEAR STRING=NOMSG           TURN OFF OUTPUT TO TERMINAL
         LA    R3,0                     SET COUNTER = 0
***********************************************************************
* PROCESS INPUT DATA
***********************************************************************
         MVI   GARBAGE,X'00'  SET SWITCH OFF
GETPUT   DS    0H
         LA    R1,INAREA                LOAD ADDR OF INAREA
         LR    R4,R1          SAVE FOR LATER                    REJ
         LA    R0,255         LOAD LENGTH OF INAREA             REJ
         TGET  (1),(0)                  GET INPUT RECORD
         B     *+4(R15)
         B     GETOK
         B     GETERR
         B     CPEND
         B     GETERR
         B     GETERR
         B     CPEND
GETOK    DS    0H
         CLI   0(R4),X'53'    GARBAGE ?
         BNE   GETCONT
         LA    R4,1(R4)       BUMP BUFFER POINTER
         BCTR  R1,0           DECREMENT BUFFER LENGTH
         CLI   GARBAGE,X'80'  GARBAGE BEFORE THIS ?
         BE    GETCONT
         MVI   GARBAGE,X'80'  SET FLAG
         MVC   WTOBUF(WTOLEN),WTOMSG  SET UP BUFFER
         MVC   WTOBUF+4(7),USERNO  MOVE USER NUMBER TO BUFFER
         LR    R2,R1          SAVE REG 1
         WTO   MF=(E,WTOBUF)  DO IT
         LR    R1,R2          RESTORE R1
GETCONT  LTR   R1,R1          DID WE RECEIVE A BLANK LINE
         BZ    GETPUT         YES, THEN DON'T WRITE IT
         CLC   0(4,R4),NOMSG     FIND OUT WHEN TO QUIT
         BE    CPEND
         TM    NUM1+4,X'0C'             ARE WE INSERTING SEQ NUMBERS
         BNO   PUT                      NO...
         LR    R2,R4                    YES...GET ADDR OF INAREA
         AH    R2,DCBLRECL              CALCULATE SEQ NUM ADDR
         SH    R2,H8                    SUBTRACT 8
         UNPK  0(8,R2),NUM1             PUT NUMBER IN
         OI    7(R2),X'F0'              GET RID OF SIGN
         AP    NUM1,NUM2                ADD INCR TO NUM FOR NEXT TIME
PUT      DS    0H
         LA    R3,1(R3)                 ADD TO COUNTER
         PUT   (R5),(R4)                PUT OUTPUT RECORD
         B     GETPUT                   GO FOR ANOTHER ONE
***********************************************************************
* ATTENTION EXIT ROUTINE
***********************************************************************
ATTNEXIT DS    0H
         BR    R14
***********************************************************************
* WRAP IT UP
***********************************************************************
CPEND    DS    0H
***********************************************************************
* THE FOLLOWING CODE SHOULD BE REMOVED FOR SYSTEMS OTHER THAN MVS.    *
***********************************************************************
         MODESET KEY=ZERO               GET KEY ZERO                MVS
         LA    R0,X'2A'                 SYSEVENT OKSWAP             MVS
         SVC   95                       ISSUE SVC                   MVS
         LA    R1,X'7E'                 DPRTY=126                   MVS
         ICM   R1,2,REQSERVC+9          GET PERF. GROUP NO.         MVS
         LA    R0,X'0A'                 SYSEVENT INITATT            MVS
         SVC   95                       ISSUE SVC                   MVS
         MODESET KEY=NZERO              GET BACK INTO PROB KEY      MVS
***********************************************************************
         MVI   CLOSLIST,X'80'
         CLOSE ((R5)),MF=(E,CLOSLIST)   CLOSE OUTPUT FILE
         STCLEAR STRING=0               ALLOW OUTPUT TO TERMINAL
         STSIZE SIZELOC=ORGSIZE         RESET TERM. LINE SIZE
         CVD   R3,WORK8                 CONVERT TO DECIMAL
         MVC   ENDMSG,ENDMSGA           MOVE END MESSAGE TO DSECT
         LA    R0,L'ENDMSGA             SET UP LENGTH FOR TPUT
         LA    R1,ENDMSG                SET UP ADDRESSABILITY FOR TPUT
         MVC   ENDMSG+12(8),EDMSK1      MOVE EDIT MASK TO CHAR
         ED    ENDMSG+12(8),WORK8+4     EDIT TO EBCDIC
         TPUT  (1),(0)                  TELL HIM/HER IT'S DONE
         LA    R15,0          SET RETURN CODE
         CLI   GARBAGE,X'80'  DID WE GET GARBAGE ?
         BNE   END            RETURN
         TPUT  ENDMSGB,L'ENDMSGB
         TPUT  ENDMSGC,L'ENDMSGC
         LA    R15,8          SET RETURN CODE
         B     END                      RETURN...
***********************************************************************
* ERROR ROUTINES
***********************************************************************
DAIRERR  DS    0H
         ST    R7,DFDAPLP     POINT TO DAPL                         REJ
         ST    R15,DAIRRC     SAVE RC                               REJ
         LA    R1,DAIRRC      POINT TO RC                           REJ
         ST    R1,DFRCP       PLACE IN PARM LIST                    REJ
         LA    R1,IKJEFF02    POINT TO ADDRESS PLACE                REJ
         ST    R1,DFJEFF02    PLACE IN PARM LIST                    REJ
         LA    R1,H1          POINT TO CALLER ID                    REJ
         ST    R1,DFIDP       PLACE IN PARM LIST                    REJ
         LR    R1,R9          PUT ADDR OF DFDSECTD IN R1            REJ
         LINK  EP=IKJEFF18    LINK TO DAIRFAIL ROUTINE              REJ
         B     END            GO BACK
PARSEERR DS    0H
         LA    R0,L'ERRMSG2
         LA    R1,ERRMSG2
         B     PUTMSG
GETERR   DS    0H
         LA    R0,L'ERRMSG3
         LA    R1,ERRMSG3
         B     PUTMSG
FINDERR  DS    0H
         LA    R0,L'ERRMSG4
         LA    R1,ERRMSG4
         B     PUTMSG
MODERR   DS    0H
         LA    R0,L'ERRMSG5
         LA    R1,ERRMSG5
         B     PUTMSG
BLKSIERR DS    0H
         LA    R0,L'ERRMSG6
         LA    R1,ERRMSG6
         B     PUTMSG
MEMBERR  DS    0H
         LA    R0,L'ERRMSG7
         LA    R1,ERRMSG7
         B     PUTMSG
PUTMSG   DS    0H
         TPUT   (1),(0)
***********************************************************************
* RETURN TO THE TMP
***********************************************************************
END      DS    0H
         L     R13,SAVEAREA+4           RESTORE CALLERS SAVEAREA ADDR
         RETURN (14,12),RC=(15)
         PRINT GEN
***********************************************************************
* PARAMETER CONTROL LIST
***********************************************************************
PCL      IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
SPACE    IKJKEYWD DEFAULT='SPACE'
         IKJNAME  'SPACE',SUBFLD=SPACEFD
SPACEVAL IKJKEYWD DEFAULT='TRACKS'
         IKJNAME  'TRACKS'
         IKJNAME  'CYLINDERS'
         IKJNAME  'BLOCKS'
DIR      IKJKEYWD
         IKJNAME  'DIR',SUBFLD=DIRFD
LINE     IKJKEYWD DEFAULT='LINE'
         IKJNAME  'LINE',SUBFLD=LINEFD
BLOCK    IKJKEYWD DEFAULT='BLOCK'
         IKJNAME  'BLOCK',SUBFLD=BLOCKFD
NUM      IKJKEYWD DEFAULT='NUM'
         IKJNAME  'NUM',SUBFLD=NUMFD
         IKJNAME  'NONUM'
RLSE     IKJKEYWD DEFAULT='RLSE'
         IKJNAME  'RLSE'
         IKJNAME  'NORLSE'
DISP     IKJKEYWD DEFAULT='NEW'
         IKJNAME  'OLD'
         IKJNAME  'NEW'
         IKJNAME  'MOD'
SPACEFD  IKJSUBF
PRI      IKJIDENT 'PRI',FIRST=NUMERIC,OTHER=NUMERIC,                   X
               MAXLNTH=4,DEFAULT='2'
SEC      IKJIDENT 'SEC',FIRST=NUMERIC,OTHER=NUMERIC,                   X
               MAXLNTH=4,DEFAULT='2'
DIRFD    IKJSUBF
DIRECTRY IKJIDENT 'DIR',FIRST=NUMERIC,OTHER=NUMERIC,                   X
               MAXLNTH=4,DEFAULT='1'
LINEFD   IKJSUBF
LRECL    IKJIDENT 'LRECL',FIRST=NUMERIC,OTHER=NUMERIC,                 X
               MAXLNTH=3,DEFAULT='80'
BLOCKFD  IKJSUBF
BLKSIZE  IKJIDENT 'BLKSIZE',FIRST=NUMERIC,OTHER=NUMERIC,               X
               MAXLNTH=5,DEFAULT='3120'
NUMFD    IKJSUBF
INTEGER1 IKJIDENT 'INTEGER1',FIRST=NUMERIC,OTHER=NUMERIC,DEFAULT='10', X
               MAXLNTH=8
INTEGER2 IKJIDENT 'INTEGER2',FIRST=NUMERIC,OTHER=NUMERIC,DEFAULT='10', X
               MAXLNTH=8
         IKJENDP
***********************************************************************
* CONSTANTS, EXECUTED INSTRUCTIONS, ETC.
***********************************************************************
DCBMODEL DCB   MACRF=(PM),DSORG=PS,RECFM=FB
DCBLEN   EQU   *-DCBMODEL
MODEL08  DS    0F
         DC    XL2'0008'                CD
         DC    3XL2'0000'               FLG,DARC,CTRC
         DC    A(0)                     PDSN
         DC    3CL8' '                  DDN,UNIT,SER
         DC    4XL4'00000000'           BLK,PQTY,SQTY,DQTY
         DC    2CL8' '                  MNM,PSWD
         DC    8XL1'00'                 DSP1,DPS2,DPS3,CTL,DSO
         DC    CL8' '                   ALN
PCLADDR  DC    A(PCL)
NOMSG    DC    C'$$$$'                  STCLEAR STRING
TEMPNAME DC    CL8'TEMPNAME'
H1       DC    H'1'
H8       DC    H'8'
HEX      DC    C'0123456789ABCDEF'
PACKIT   PACK  WORK8,0(0,R1)            EXECUTED PACK INSTRUCTION
MVCPASS  MVC   DA08PSWD(0),0(R1)        MOVE PASSWORD TO DAPB
MVCDSN   MVC   WORKDSN+2(0),0(R1)       MOVE DSN TO WORK AREA
MVCMEM   MVC   DA08MNM(0),0(R1)         MOVE MEMBER TO DAPB
STARTMSG DC    C'START TAPE'
EDMSK1   DC    XL8'4020202020202120'
ENDMSGA  DC    C'DATA SAVED, 12345678 LINES WERE PROCESSED'
ENDMSGB  DC    C'***** THERE WERE BAD CHARACTERS RECEIVED *****'
ENDMSGC  DC    C'***** DO NOT DISCONNECT, CALL DATA CENTER ****'
ERRMSG2  DC    C'PARSE ERROR - REENTER COMMAND'
ERRMSG3  DC    C'INPUT ERROR - REENTER COMMAND'
ERRMSG4  DC    C'DATA SET NOT FOUND - REENTER COMMAND'
ERRMSG5  DC    C'MOD NOT VALID FOR PDS - REENTER COMMAND'
ERRMSG6  DC    C'BLKSIZE NOT A MULTIPLE OF LRECL - REENTER COMMAND'
ERRMSG7  DC    C'DATA SET IS A PDS BUT NO MEMBER SPECIFIED'
WTOMSG   WTO   'USERNO - GARBAGE CHAR WHILE USING TAPE',ROUTCDE=(8),   *
               DESC=(2),MF=L
CXD      CXD
QCONS    DC    Q(WORKAREA,IHADCB,PPL,DAPL,DAPB08,DFDSECTD)
         IKJCPPL
***********************************************************************
* EQUATES
***********************************************************************
DEFDIR   EQU   1                        PDS DRECTORY DEFAULT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
