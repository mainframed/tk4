*PROCESS OPT(TIME),LC(60);
 /*     R E C 7 5   ---   PROCESS SMF RECORD 75 FOR RMFRPT            */
 REC75: PROC(REC_PTR, AV_REQS, BSY, DSN, ADR, SER, AV_SLOTS,
             SEQNO, BYTE, #SWAPS, #LOCALS);
 /*  REC75   PAGE/SWAP ACTIVITY    V 1.07  */
 /* WRITTEN BY V.TICE, SCE, 2/6/78
-   THE FUNCTION OF THIS PROGRAM IS TO LOOK AT SMF TYPE 75 RECORDS
    GENERATED BY RMF2 AND TO EXTRACT, COMPUTE AND RETURN THE
    REQUESTED DATA.
0   THE ARGUEMENTS ARE AS FOLLOWS:
0   INPUT:
        REC_PTR              POINTER TO RMF SMF COMMON SECTION
        SEQNO                SEQUENCE NUMBER FOR COUNT OF
                             LOCAL PAGE DATASETS
        BYTE                 SELECTION BYTE (FORMAT AND MEANING
                             SAME AS PAGE_TYPE )
        #SWAPS               NUMBER OF SWAP DATASETS TO ALLOW FOR
        #LOCALS              NUMBER OF LOCALS TO ALLOW FOR
    OUTPUT:
        AV_REQS(*)           AVERAGE REQUESTS PENDING
        BSY(*)               % BUSY ARRAY
                               PLPA, COMMON, DUPLEX, SWAP, LOCALS
        DSN(*)               DATASET NAMES
        ADR(*)               ADDRESSES (HEX)
        SER(*)               VOL SERS
        AV_SLOTS(*)          AVERAGE SLOTS (SWAP SETS) USED
0 % BUSY COMPUTED AS 100* (# SAMPLES IN USE BY ASM)/
                          (# SAMPLES TOTAL)
 LAYOUT OF ARRAYS IS AS FOLLOWS:
        PLPA
        COMMON
        DUPLEX
        SWAP1 TO SWAPN    WHERE N=MIN((ACTUAL SWAP DSNS),#SWAPS)
        EXCESS SWAP SPACES   IF MORE ROOM IS ALLOCATED THEN THERE
                             ARE SWAPS THEN STILL RESERVE #SWAPS
        LOCAL1 TO LOCALN  WHERE N=MIN((ACTUAL LOCAL DSNS),#LOCALS)
        EXCESS LOCAL SPACES  IF MORE ROOM IS ALLOCATED THEN THERE
                             ARE LOCALS THEN STILL RESERVE #LOCALS
0 IF # SAMPLES = 0 THEN RESULT IS 0% BUSY.
0 IF PAGE IN ERROR OR CAME ONLINE DURING INTERVAL THEN 0% BUSY.
0*/
0DCL REC_PTR           POINTER;
 DCL AV_REQS(*)        DEC FLOAT(6);
 DCL BSY(*)            DEC FLOAT(6);
 DCL DSN(*)            CHAR(44);
 DCL ADR(*)            CHAR(3);
 DCL SER(*)            CHAR(6);
 DCL AV_SLOTS(*)       FLOAT DEC(6);
 DCL SEQNO             FIXED BIN(15);
 DCL BYTE              BIT(8) ALIGNED;
 DCL (#SWAPS,#LOCALS)  FIXED BIN(15);
 DCL (@SWAP,@LOCAL)    FIXED BIN(15) STATIC;
0DCL PCT_BUSY          DEC FLOAT(6) STATIC;
 DCL I                 FIXED BIN(15) STATIC;
 DCL (SUBSTR,INDEX,HBOUND,FLOAT,LENGTH) BUILTIN;
 DCL TBYTE             BIT(8) ALIGNED STATIC;
0
 DCL 1 PAGE_SWAP_ACTIVITY          BASED(REC_PTR),
     2 COMMON_SECT,
       3 PAGE_SIZ                 FIXED BIN(15),
       3 PAGE_INT_START           FIXED DEC(7),          /* HHMMSS */
       3 PAGE_RMF_START_DATE      FIXED DEC(7),          /* YYDDD  */
       3 PAGE_INT_DUR             FIXED DEC(7,5),        /* MMSSTTT */
       3 PAGE_RESV1               CHAR(4),
       3 PAGE_TOTAL_SAMPLES       FIXED BIN(31),
       3 PAGE_RMF_VERS            CHAR(2),
       3 PAGE_RESV3               CHAR(2),
       3 PAGE_OS_REL_LVL          CHAR(4),               /* NNLL   */
       3 PAGE_RESV3A              CHAR(4),
     2 PAGE_SWAP_CONTROL_SECT,
       3 PAGE_RESV4               CHAR(4),
     2 PAGE_SWAP_DATA_SECT,
       3 PAGE_DSN                 CHAR(44),
       3 PAGE_TYPE                BIT(8) ALIGNED,
       3 PAGE_RESV41              CHAR(6),
       3 PAGE_DEVADR              BIT(12) ALIGNED,
       3 PAGE_VOLSER              CHAR(6),
       3 PAGE_RESV42              CHAR(17),
       3 PAGE_AV_SLOTS            FIXED BIN(31),
       3 PAGE_RESV5               CHAR(4),
       3 PAGE_SAMPLES_BUSY        FIXED BIN(31),
       3 PAGE_NO_REQS             FIXED BIN(31),
       3 PAGE_RESV6               CHAR(12);
0 /* PAGE_TYPE IS AS FOLLOWS:
     1... .... PLPA
     .1.. .... COMMON
     ..1. .... DUPLEX
     ...1 .... LOCAL
     .... 1... SWAP
     .... .1.. UNUSABLE
     .... ..1. CAME ONLINE DURING INTERVAL
     .... ...1 RESERVED
0    11.1 1... THESE ON BITS ARE MUTUALLY EXCLUSIVE
               ( ONLY 1 MAY BE ON AT A GIVEN TIME )
0 */
1IF SEQNO = 0 THEN DO;
    AV_REQS, BSY, AV_SLOTS = 0;
    ADR, SER, DSN = '';
    SEQNO = 1;
    @SWAP = 4;
    @LOCAL= #SWAPS+4;
    END;
0IF BYTE & PAGE_TYPE  THEN DO;
    TBYTE = PAGE_TYPE & '11111000'B;
    I = INDEX(TBYTE,'1'B);
    IF   I ^= 0    THEN DO;
       IF  PAGE_TYPE & '00010000'B THEN DO;  /* LOCAL */
           IF @LOCAL > HBOUND(AV_REQS,1) THEN RETURN; /* OUT OF RM */
           I = @LOCAL;
           @LOCAL = @LOCAL + 1;
           END;
       IF  PAGE_TYPE & '00001000'B THEN DO;  /* SWAP */
           IF @SWAP  >= #SWAPS + 4 THEN RETURN; /* OUT OF ROOM */
           I = @SWAP;
           @SWAP = @SWAP + 1;
           END;
       IF  PAGE_TOTAL_SAMPLES ^= 0  THEN DO;
           BSY(I) = 1.E2 * PAGE_SAMPLES_BUSY / PAGE_TOTAL_SAMPLES;
           AV_REQS(I) = FLOAT( PAGE_NO_REQS ) /PAGE_TOTAL_SAMPLES;
           END;
       ELSE DO;
           BSY(I), AV_REQS(I) = 0E0;
           END;
       DSN(I) = PAGE_DSN;
       SER(I) = PAGE_VOLSER;
       AV_SLOTS(I) = PAGE_AV_SLOTS;
       ADR(I) = BITHEX( PAGE_DEVADR );
 /* DEBUG          PUT SKIP LIST('I,DSN,DADR',I,DSN(I),ADR(I));  */
       END;
    END;
0BITHEX: PROC(BIT_CODE) RETURNS(CHAR(16) VAR);
    /*
         CNVERT BIT STRING TO HEX EQUIV
    */
0
    DCL BIT_CODE        BIT(*) VAR,
         RET_CODE       CHAR(16) VAR STATIC,
         I              FIXED BIN(30) STATIC,
         HEX(0:15)      STATIC CHAR(1)  INIT(
              '0','1','2','3','4','5','6','7','8','9','A',
              'B','C','D','E','F');
0
    RET_CODE='';
    DO I=1 TO LENGTH(BIT_CODE) BY 4;
         RET_CODE=RET_CODE ×× HEX(SUBSTR(BIT_CODE,I,4));
         END;
    RETURN(RET_CODE);
 END;
0END REC75;
