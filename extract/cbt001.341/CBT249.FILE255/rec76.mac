*PROCESS OPT(TIME),LC(60);
 /*     R E C 7 6   ---   PROCESS SMF RECORD 76 FOR RMFRPT            */
 REC76: PROC(REC_PTR, TRACE, LIST, SEQNO); /* VER 1.11 */
 /* THE FUNCTION OF THIS PROGRAM IS TO LOOK AT SMF TYPE 76 RECORDS
    GENERATED BY RMF2 AND TO EXTRACT, COMPUTE AND RETURN THE
    REQUESTED DATA.
0   THE ARGUMENTS ARE AS FOLLOWS:
0   INPUT:
        REC_PTR              POINTER TO RMF SMF COMMON SECTION
        LIST                 LIST OF FIELDS TRACED(  (*) CHAR(8))
                             IF LESS THAN (*) FIELDS THEN LAST FIELDS
                             ARE BLANK.
    OUTPUT:
        TRACE                VALUE OF FIELD (AVERAGE OR AVG END VALUE)
        SEQNO                POSITION OF FIELD IN LIST.
                             IF UNKNOWN THEN SET TO 0
0
 */
0DCL REC_PTR           POINTER;
 DCL TRACE             DEC FLOAT(6);
 DCL SEQNO             FIXED BIN(31);
 DCL LIST(*)           CHAR(8) CONNECTED;
 DCL COUNT      STATIC DEC FLOAT(6); /* WORK FOR SAMPLES */
 DCL I                 STATIC FIXED BIN(15);
 DCL J                 STATIC FIXED BIN(15);
 DCL SET_PTR           POINTER STATIC;
 DCL NXT_PTR           POINTER STATIC;
 DCL ENTRY_SET_A_PTR   POINTER STATIC;
 DCL (HBOUND,ADDR)     BUILTIN;
 DCL REC76A ENTRY EXTERNAL;
0
 DCL 1 TRACE_ACTIVITY              BASED(REC_PTR),
     2 COMMON_SECT,
       3 TRACE_SIZ                 FIXED BIN(15),
       3 TRACE_INT_START           FIXED DEC(7),          /* HHMMSS */
       3 TRACE_RMF_START_DATE      FIXED DEC(7),          /* YYDDD  */
       3 TRACE_INT_DUR             FIXED DEC(7,5),        /* MMSSTTT */
       3 TRACE_RESV1               CHAR(4),
       3 TRACE_TOTAL_SAMPLES       FIXED BIN(31),
       3 TRACE_RMF_VERS            CHAR(2),
       3 TRACE_RESV3               CHAR(2),
       3 TRACE_OS_REL_LVL          CHAR(4),               /* NNLL   */
       3 TRACE_RESV3X              CHAR(4),
     2 TRACE_CONTROL_SECT,
       3 TRACE_SIZ_CNTL_SECT     FIXED BIN(15),
       3 TRACE_SIZ_DATA_SECT     FIXED BIN(15),
       3 TRACE_NO_SAMPLE_SETS    FIXED BIN(15),
       3 TRACE_RESV4A            FIXED BIN(15),
     2 TRACE_DATA_SECT,
       3 TRACE_NAME               CHAR(8),
       3 TRACE_OPT                BIT(8) ALIGNED,
       3 TRACE_SIZ_SET            BIT(8) ALIGNED,
       3 TRACE_LEN_FIELD          BIT(8) ALIGNED,
       3 TRACE_RESV5              CHAR(13),
       3 TRACE_SUM_VALUES         BIT(64) ALIGNED,
       3 TRACE_RESV6              CHAR(12),
       3 TRACE_END_VALUE          FIXED BIN(31),
     2 TRACE_START_ENTRY_SET      CHAR(1);
     /* MORE FOLLOWS BUT NOT NEEDED HERE */
0DCL NXT_SET(0:100) CHAR(1) BASED(SET_PTR);
 DCL NXT_SETB CHAR(128) BASED(SET_PTR);
 DCL FLD_LEN FIXED BIN(15) STATIC;
0DCL 1 TRACE_ENTRY_SET_A        STATIC,
       2 TRACE_MIN            FLOAT DEC(15),
       2 TRACE_SUM            FLOAT DEC(15),
       2 TRACE_MAX            FLOAT DEC(15),
       2 TRACE_SUM_SQ         FLOAT DEC(15),
       2 TRACE_END            FLOAT DEC(15);
 DCL ENTRY_SET_A(5)           FLOAT DEC(15) BASED(ENTRY_SET_A_PTR);
 ENTRY_SET_A_PTR = ADDR( TRACE_ENTRY_SET_A );
0DCL 1 TRACE_ENTRY_SUM          STATIC,
       2 TRACE_MIN              FLOAT DEC(15),
       2 TRACE_SUM              FLOAT DEC(15),
       2 TRACE_MAX              FLOAT DEC(15),
       2 TRACE_SUM_SQ           FLOAT DEC(15),
       2 TRACE_END              FLOAT DEC(15);
0 /* TRACE_OPT IS AS FOLLOWS:
     1... .... MINIMUM VALUE SET
     .1.. .... MAXIMUM VALUE SET
     ..1. .... SUM REQUIRED FOR AVERAGE SET
     ...1 .... SUM OF SQUARES FOR STANDARD DEVIATION SET
     .... 1... END VALUE SET
     .... .1.. ALL OPTIONS SELECTED
     .... ..1. DOMAIN TRACING TERMINATED
     .... ...1 THIS ENTRY IS A DOMAIN FIELD
0   IN CASE MULTIPLE MEASURES FOR EACH TRACE ARE PRESENT THEN
    THE TRACE VALUE WILL BE SET TO THE FIRST OF:
        AVG, END, MAX, MIN, STD.
        CURRENTY, ONLY AVG AND END ARE SUPPORTED.
0ALL COUNTS, SAMPLE NUMBERS ETC. ARE TREATED AS UNSIGNED BINARY
 INTEGERS. SOME WILL BE EIGHT BYTES IN LENGTH.
0*/
0
0COUNT = TRACE_TOTAL_SAMPLES;
 SEQNO = 0;
 TRACE = -.001;
0LOOP: DO I = 1 TO HBOUND(LIST,1); /* SEARCH LIST FOR TRACE NAME */
    IF  TRACE_NAME = LIST(I) THEN DO;
        SEQNO = I;
        FLD_LEN = TRACE_LEN_FIELD;
0/* DEBUG    PUT SKIP LIST('#SETS, LEN FIELD, SIZE SET,SIZE DATA SECT'××
     ',TRACE NAME, END VALUE, OPT',
    TRACE_NO_SAMPLE_SETS, TRACE_LEN_FIELD, TRACE_SIZ_SET,
    TRACE_SIZ_DATA_SECT, TRACE_NAME, TRACE_END_VALUE, TRACE_OPT);
    /* END DEBUG */
0
        SELECT;
          WHEN((TRACE_OPT & '00000011'B) = '00000011'B ) DO;
              /* DOMAIN AND DOMAIN TERMINATED */
              LEAVE LOOP;
              END;
          OTHERWISE DO;
0            SET_PTR = ADDR(TRACE_START_ENTRY_SET);
             TRACE_ENTRY_SUM = 0E0;
             DO J = 1 TO TRACE_NO_SAMPLE_SETS;
                 IF FLD_LEN = 2 × FLD_LEN = 4   THEN DO;
                    CALL REC76A(TRACE_OPT, FLD_LEN, NXT_SETB,
                       ENTRY_SET_A);
                    NXT_PTR = ADDR(NXT_SET(TRACE_SIZ_SET));
                    END;
                 ELSE LEAVE LOOP; /* UNKNOWN FIELD LENGTH */
0/* DEBUG    PUT SKIP DATA(J,TRACE_ENTRY_SET_A); /* END DEBUG */
0
0                TRACE_ENTRY_SUM = TRACE_ENTRY_SUM +
                                   TRACE_ENTRY_SET_A;
                 SET_PTR = NXT_PTR;
                 END;
             END; /* OTHERWISE */
           END; /* SELECT */
0/* NOW COMPUTE AVG OF VALUES WANTED */
        SELECT;
          WHEN( TRACE_OPT & '00100100'B ) DO; /* AVG OR ALL */
             TRACE = TRACE_SUM_VALUES;
             TRACE = TRACE / COUNT;
             END;
          WHEN( TRACE_OPT & '00001000'B ) DO; /* AVG OF END */
             TRACE = TRACE_ENTRY_SUM.TRACE_END / TRACE_NO_SAMPLE_SETS;
             END;
          OTHERWISE LEAVE LOOP; /* NOT SUPPORTED */
          END; /* SELECT */
       END; /* IF DO */
    END; /* DO LOOP */
0END; /* REC76 */
