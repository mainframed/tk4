*PROCESS OPT(TIME),LC(60);
 /*   R E C 7 4   ---   PROCESS SMF RECORD 74 FOR RMFRPT              */
 /*********************************************************************/
 /*                                                                   */
 /*                            R E C 7 4                              */
 /*                                                                   */
 /*             PROCESS SMF RECORD 74 FOR RMFRPT PROGRAM              */
 /*                                                                   */
 /*********************************************************************/
-(SUBRG):REC74: PROC(REC_PTR,DEV_TYPE,VOLSER,ADDR,TYPE,ACTIVITY,QLNGTH,
             PCTBSY,PCTCUDELAY,PCTRESV,PCTDRESV,AVGDSOPN,PCTREQBSY,
             PCTREQPATHBSY,AVGQMS,AVGDEVMS,TOTMS,COND,TVOLSER,TADDR,
             NUMDEVICES);
1/*********************************************************************/
 /*                                                                   */
 /*           FOLLOWING STRUCTURE MAPS TYPE 74 SMF RECORDS            */
 /*                                                                   */
 /*********************************************************************/
 DCL
01 REC_74                    BASED(REC_PTR) UNALIGNED,
   2 COMMON_CDS,
     3 SIZE                  FIXED BIN(15),
     3 TIME                  FIXED DECIMAL(7),
     3 DATE                  FIXED DECIMAL(7),
     3 INTERVAL              FIXED DECIMAL(7),
     3 RESERVED              CHAR(2),
     3 DEVICE_CLASS          BIT(16),
     3 #SAMPLES              FIXED BIN(31),
     3 RMFVERSION            CHAR(2),
     3 RESERVED1             CHAR(2),
     3 SYSRLSE               CHAR(4),
     3 CYCLE_LEN             FIXED DECIMAL(7),
   2 DEVICE_CDS,
     3 DCDS_SIZE             FIXED BIN(15),
     3 #DD_SECTIONS          FIXED BIN(15),
     3 DD_SECTION_SIZE       FIXED BIN(15),
     3 DD_SECTIONS_FOLLOW    FIXED BIN(15),
     3 TOTAL_#DD             FIXED BIN(15),
     3 TOTAL_#DEVICES        FIXED BIN(15),
   2 DEVICE(UPPER REFER (#DD_SECTIONS)),
     3 DEV_ADDR(4)           BIT(4),
     3 RESERVED2             CHAR(1),
     3 DEV_INDICATOR(0:7)    BIT(1),
     3 UNIT_TYPE             FIXED BIN(31),
     3 VOLSER                CHAR(6),
     3 #LOG_CHAN             FIXED BIN(15),
     3 #REQ_SERVICED         FIXED BIN(31),
     3 #DEV_BUSY             FIXED BIN(31),
     3 #REQ_ENQ              FIXED BIN(31),
     3 #MULTEX_DEV_BUSY      FIXED BIN(31),
     3 #NOT_READY            FIXED BIN(31),
     3 #ALLOCATED            FIXED BIN(31),
     3 #CU_BUSY              FIXED BIN(31),
     3 #REQ_QED              FIXED BIN(31),
     3 #DSOPEN               FIXED BIN(31),
     3 #Q0                   FIXED BIN(31),
     3 #Q1                   FIXED BIN(31),
     3 #Q2                   FIXED BIN(31),
     3 #Q3                   FIXED BIN(31),
     3 #Q4PLUS               FIXED BIN(31),
     3 #RESERVED             FIXED BIN(31),
     3 #MOUNT_PENDING        FIXED BIN(31),
     3 #CPU_RESERVES         FIXED BIN(31);
1/*********************************************************************/
 /*                                                                   */
 /*                     INPUT/OUTPUT PARAMETERS                       */
 /*                                                                   */
 /*********************************************************************/
 DCL
0REC_PTR                     POINTER,
 VOLSER(*)                   CHAR(6),
 ADDR(*)                     CHAR(3),
 TYPE(*)                     FIXED BIN(15),
 DEV_TYPE(*)                 FIXED BIN(15);
-DCL
0(ACTIVITY(*),      QLNGTH(*),   PCTBSY(*),    PCTCUDELAY(*),
  PCTRESV(*),       PCTDRESV(*), AVGDSOPN(*),  PCTREQBSY(*),
  PCTREQPATHBSY(*), AVGQMS(*),   AVGDEVMS(*),  TOTMS(*)  ) FLOAT DEC(6),
0COND(*)                     FIXED BIN(15),
0TVOLSER(*)                  CHAR(6),
 TADDR(*)                    CHAR(3),
 NUMDEVICES                  FIXED BIN(15);
-DCL
0( UPPER,DIMEN,ETYPE)        FIXED BIN(15) INIT(1),
 ( I,J,K,L,M,N, #REQ )       FIXED BIN(15),
 TEMPADDR                    CHAR(3),
 TEMPSTRING                  CHAR(7),
 (MINUTES,SECONDS,MSEC,
  NUMSAMPLES,NUMSAMPLES_PCT,INTERVALMS,
  TEMPVALUE,INTERVAL)        FLOAT DECIMAL(6),
  DADDR_TABLE(0:15)          CHAR(1) INIT('0','1','2','3','4','5','6',
                                  '7','8','9','A','B','C','D','E','F'),
 (HBOUND,ABS,FLOAT,SUBSTR,UNSPEC)    BUILTIN;
-DCL
 DASD                        BIT(16) INIT('0000000000100000'B),
 MAGTAPE                     BIT(16) INIT('0000000010000000'B),
 COMM                        BIT(16) INIT('0000000001000000'B),
 UNITREC                     BIT(16) INIT('0000000000001000'B),
 GRAPHIC                     BIT(16) INIT('0000000000010000'B),
 CHARRDR                     BIT(16) INIT('0000000000000100'B);
-DCL
01 EXCB(12)                  CONTROLLED,
   2 CALLS                   FIXED BIN(15),
   2 SORT(*),
     3 VALUE                 FLOAT DEC(6),
     3 DEV#                  FIXED BIN(15);
-DCL
0SYSPRINT                    FILE PRINT;
1/*********************************************************************/
 /*                                                                   */
 /*        DETERMINE NUMBER OF REQUESTS ISSUED BY THE CALLER          */
 /*                                                                   */
 /*********************************************************************/
0DIMEN = HBOUND(VOLSER,1);
 IF TYPE(1) = 0 THEN GOTO QUIT;
 DO #REQ = DIMEN TO 1 BY -1;
    IF TYPE(#REQ) ^= 0 THEN LEAVE;
 END;
0/*********************************************************************/
 /*                                                                   */
 /*     BUILD TABLE OF DEVICE ADDRESSES AND CORRESPONDING VOLSERS     */
 /*                                                                   */
 /*********************************************************************/
 NUMDEVICES = #DD_SECTIONS;
0DO I = 1 TO NUMDEVICES;
    IF DEVICE(I).DEV_INDICATOR(7) = '1'B &
       DEVICE(I).DEV_INDICATOR(6) = '0'B THEN
         TVOLSER(I) = DEVICE(I).VOLSER;
    ELSE TVOLSER(I) = '*OFFL*';
    IF UNSPEC(SUBSTR(TVOLSER(I),1,1)) = '00000000'B THEN
       TVOLSER(I) = '*NRDY*';
    TADDR(I)   = DADDR_TABLE(DEVICE(I).DEV_ADDR(1)) ××
                 DADDR_TABLE(DEVICE(I).DEV_ADDR(2)) ××
                 DADDR_TABLE(DEVICE(I).DEV_ADDR(3)) ;
 END;
0/*********************************************************************/
 /*                                                                   */
 /*     DIMENSION STRUCTURE EQUAL TO NUMBER OF DEVICES IN SMF RECORD  */
 /*                                                                   */
 /*********************************************************************/
 ALLOCATE  1 EXCB(12),
             2 CALLS,
             2 SORT(#DD_SECTIONS),
               3 VALUE,
               3 DEV#;
0DO I = 1 TO 12;
    EXCB(I).CALLS = 0;
    DO J = 1 TO #DD_SECTIONS;
       EXCB(I).SORT(J).VALUE = 0.0;
       EXCB(I).SORT(J).DEV#  = 0;
    END;
 END;
1/*********************************************************************/
 /*                                                                   */
 /*     CALCULATE:                                                    */
 /*        INTERVAL LENGTH IN SECONDS                                 */
 /*        INTERVAL LENGTH IN MS                                      */
 /*        NUMBER OF SAMPLES TAKEN                                    */
 /*        '% SAMPLES'  (USED IN ANOTHER CALCULATION)                 */
 /*                                                                   */
 /*********************************************************************/
 PUT STRING(TEMPSTRING) EDIT(COMMON_CDS.INTERVAL) (F(7));
 GET STRING(TEMPSTRING) EDIT(MINUTES,SECONDS,MSEC) (F(2),F(2),F(3));
 INTERVAL = MINUTES * 60.0 + SECONDS + MSEC / 1000.0;
 INTERVALMS = INTERVAL * 1000.0;
 NUMSAMPLES = FLOAT(COMMON_CDS.#SAMPLES);
 NUMSAMPLES_PCT = NUMSAMPLES / 100.0;
-/*********************************************************************/
 /*                                                                   */
 /*               SCAN THROUGH ALL REQUESTS FROM USER                 */
 /*                                                                   */
 /*     TYPE(I) = 0   END OF REQUEST LIST                             */
 /*     TYPE(I) = 1   VOLUME SERIAL NUMBER WAS SPECIFIED              */
 /*     TYPE(I) = 2   UNIT ADDRESS WAS SPECIFIED                      */
 /*     TYPE(I) = < 0 EXCEPTION REQUEST = VOLSER AND ADDR ARE OUTPUT  */
 /*                                                                   */
 /*********************************************************************/
 DO I = 1 TO #REQ;
0   IF      TYPE(I) = 1 THEN DO;
       DO J = 1 TO #DD_SECTIONS;
          IF DEVICE(J).VOLSER = VOLSER(I) THEN DO;
             IF DEVICE(J).DEV_INDICATOR(6) = '1'B THEN DO;
                COND(I) = 2;
                GO TO NEXT_REQUEST;
             END;
             COND(I) = 0;
             CALL FILLIN(I,J);
             GO TO NEXT_REQUEST;
          END;
       END;
       COND(I) = 3;
    END;
1   ELSE IF TYPE(I) = 2 THEN DO;
       DO J = 1 TO #DD_SECTIONS;
          TEMPADDR = DADDR_TABLE(DEVICE(J).DEV_ADDR(1)) ××
                     DADDR_TABLE(DEVICE(J).DEV_ADDR(2)) ××
                     DADDR_TABLE(DEVICE(J).DEV_ADDR(3)) ;
          IF TEMPADDR = ADDR(I) THEN DO;
             IF DEVICE(J).DEV_INDICATOR(7) ^= '1'B THEN DO;
                COND(I) = 1;
                GO TO NEXT_REQUEST;
             END;
             COND(I) = 0;
             CALL FILLIN(I,J);
             GO TO NEXT_REQUEST;
          END;
       END;
       COND(I) = 3;
    END;
0   ELSE IF TYPE(I) = 0 × TYPE(I) > 2 × TYPE(I) < -12 THEN COND(I) = 4;
0   ELSE IF TYPE(I) < 0 THEN DO;
       ETYPE = ABS(TYPE(I));
 /*********************************************************************/
 /*                                                                   */
 /*     IF THIS IS THE FIRST EXCEPTION REQUEST WE MUST BUILD A TABLE  */
 /*     FOR ALL THE DEVICES SORTED BY THE PARAMETER THE EXCEPTION     */
 /*     REQUEST IS EXAMINING.                                         */
 /*                                                                   */
 /*********************************************************************/
0      IF EXCB(ETYPE).CALLS = 0 THEN DO;
          EXCB(ETYPE).SORT(1).VALUE = RESULT(ETYPE,1);
          EXCB(ETYPE).SORT(1).DEV#  = 1;
0         DO J = 2 TO #DD_SECTIONS;
             TEMPVALUE = RESULT(ETYPE,J);
 SCAN:       DO K = 1 TO J - 1;
                IF TEMPVALUE > EXCB(ETYPE).SORT(K).VALUE THEN DO;
                   DO L = J  TO K + 1 BY -1;
                      EXCB(ETYPE).SORT(L)=EXCB(ETYPE).SORT(L-1),BY NAME;
                   END;
                   LEAVE SCAN;
                END;
             END;
0            EXCB(ETYPE).SORT(K).VALUE = TEMPVALUE;
             EXCB(ETYPE).SORT(K).DEV#  = J;
          END;
       END;
0/*********************************************************************/
 /*                                                                   */
 /*     EXTRACT THE 'CALLS'TH VALUE FROM THE SORTED STRUCTURE         */
 /*                                                                   */
 /*********************************************************************/
0      EXCB(ETYPE).CALLS = EXCB(ETYPE).CALLS + 1;
       COND(I) = 0;
       CALL FILLIN(I,EXCB(ETYPE).SORT(EXCB(ETYPE).CALLS).DEV#);
    END;
 NEXT_REQUEST: END;
 FREE EXCB;
 QUIT: RETURN;
1/*********************************************************************/
 /*                                                                   */
 /*                           R E S U L T                             */
 /*                                                                   */
 /*             CALCULATE VARIOUS I/O DEVICE STATISTICS               */
 /*                                                                   */
 /*********************************************************************/
0RESULT: PROC(EXTYPE,DEVNUM)  RETURNS( FLOAT DECIMAL(6) );
 DCL     (EXTYPE,DEVNUM) FIXED BIN(15),
         RTN             FLOAT DECIMAL(6);
-SELECT (EXTYPE);
0  WHEN (1) DO;
      RTN = DEVICE(DEVNUM).#REQ_SERVICED / INTERVAL;
      RETURN(RTN);
   END;
0  WHEN (2) DO;
      RTN = DEVICE(DEVNUM).#REQ_ENQ / NUMSAMPLES;
      RETURN(RTN);
   END;
0  WHEN (3) DO;
      RTN = DEVICE(DEVNUM).#DEV_BUSY / NUMSAMPLES_PCT;
      RETURN(RTN);
   END;
0  WHEN (4) DO;
      RTN = DEVICE(DEVNUM).#CU_BUSY / NUMSAMPLES_PCT;
      RETURN(RTN);
   END;
0  WHEN (5) DO;     /* THIS IS "RESV DELAY" - OTHER CPU */
      RTN = DEVICE(DEVNUM).#CPU_RESERVES / NUMSAMPLES_PCT;
      RETURN(RTN);
   END;
0  WHEN (6) DO;     /* THIS IS "DEV RESV" - THIS CPU */
      RTN = DEVICE(DEVNUM).#RESERVED / NUMSAMPLES_PCT;
      RETURN(RTN);
   END;
0  WHEN (7) DO;
      RTN = DEVICE(DEVNUM).#DSOPEN / NUMSAMPLES;
      RETURN(RTN);
   END;
0  WHEN (8) DO;
      IF DEVICE(DEVNUM).#REQ_ENQ = 0 THEN RTN = 0;
      ELSE RTN = (100.0 * DEVICE(DEVNUM).#REQ_QED) /
                 (DEVICE(DEVNUM).#REQ_ENQ);
      RETURN(RTN);
   END;
0  WHEN (9) DO;
      IF DEVICE(DEVNUM).#REQ_ENQ = 0 THEN RTN = 0;
      ELSE RTN = ( (DEVICE(DEVNUM).#REQ_ENQ - DEVICE(DEVNUM).#REQ_QED) *
                 100.0 ) / (DEVICE(DEVNUM).#REQ_ENQ);
      RETURN(RTN);
   END;
0  WHEN (10) DO;
      IF DEVICE(DEVNUM).#REQ_SERVICED = 0 THEN RTN = 0;
      ELSE RTN = (DEVICE(DEVNUM).#REQ_ENQ * INTERVALMS) /
            (NUMSAMPLES * DEVICE(DEVNUM).#REQ_SERVICED);
      RETURN(RTN);
   END;
0  WHEN (11) DO;
      IF DEVICE(DEVNUM).#REQ_SERVICED = 0 THEN RTN = 0;
      ELSE RTN = (DEVICE(DEVNUM).#DEV_BUSY * INTERVALMS) /
            (NUMSAMPLES * DEVICE(DEVNUM).#REQ_SERVICED);
      RETURN(RTN);
   END;
0  WHEN (12) DO;
      IF DEVICE(DEVNUM).#REQ_SERVICED = 0 THEN RTN = 0;
      ELSE RTN = ( (DEVICE(DEVNUM).#REQ_ENQ + DEVICE(DEVNUM).#DEV_BUSY)
          * INTERVALMS ) / (NUMSAMPLES * DEVICE(DEVNUM).#REQ_SERVICED);
      RETURN(RTN);
   END;
 END;
0END RESULT;
1/*********************************************************************/
 /*                                                                   */
 /*                           F I L L I N                             */
 /*                                                                   */
 /*                FILL IN OUTPUT ARRAYS WITH RESULTS                 */
 /*                                                                   */
 /*********************************************************************/
0FILLIN: PROC(REQUEST,DEVNUM);
 DCL     (REQUEST,DEVNUM)    FIXED BIN(15);
 IF DEVICE(DEVNUM).DEV_INDICATOR(7) = '1'B THEN
      VOLSER(REQUEST) = DEVICE(DEVNUM).VOLSER;
 ELSE VOLSER(REQUEST) = '*OFFL*';
 IF UNSPEC(SUBSTR(VOLSER(REQUEST),1,1)) = '00000000'B THEN
       VOLSER(REQUEST) = '*NRDY*';
 ADDR(REQUEST)   = DADDR_TABLE(DEVICE(DEVNUM).DEV_ADDR(1)) ××
                   DADDR_TABLE(DEVICE(DEVNUM).DEV_ADDR(2)) ××
                   DADDR_TABLE(DEVICE(DEVNUM).DEV_ADDR(3)) ;
0SELECT (DEVICE_CLASS);
   WHEN (DASD   )  DEV_TYPE(REQUEST) = 0;
   WHEN (MAGTAPE)  DEV_TYPE(REQUEST) = 1;
   WHEN (COMM   )  DEV_TYPE(REQUEST) = 2;
   WHEN (UNITREC)  DEV_TYPE(REQUEST) = 3;
   WHEN (GRAPHIC)  DEV_TYPE(REQUEST) = 4;
   WHEN (CHARRDR)  DEV_TYPE(REQUEST) = 5;
 END;
0ACTIVITY(REQUEST)      = RESULT( 1,DEVNUM);
0QLNGTH(REQUEST)        = RESULT( 2,DEVNUM);
0PCTBSY(REQUEST)        = RESULT( 3,DEVNUM);
0PCTCUDELAY(REQUEST)    = RESULT( 4,DEVNUM);
0PCTRESV(REQUEST)       = RESULT( 5,DEVNUM);
0PCTDRESV(REQUEST)      = RESULT( 6,DEVNUM);
0AVGDSOPN(REQUEST)      = RESULT( 7,DEVNUM);
0PCTREQBSY(REQUEST)     = RESULT( 8,DEVNUM);
0PCTREQPATHBSY(REQUEST) = RESULT( 9,DEVNUM);
0AVGQMS(REQUEST)        = RESULT(10,DEVNUM);
0AVGDEVMS(REQUEST)      = RESULT(11,DEVNUM);
0TOTMS(REQUEST)         = RESULT(12,DEVNUM);
0RETURN;
 END FILLIN;
 END REC74;
