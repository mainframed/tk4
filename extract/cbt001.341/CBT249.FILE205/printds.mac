         TITLE 'PRINTDS  RELEASE 2.0  11/28/79  M.J.SPRINZEN'
*
PRINTDS  CSECT
*
*  "PRINTDS" - A TSO COMMAND PROCEDURE                  WRITTEN 7/77
*
*
*  NOTES:
*   (1) THIS IS A CP AND EXPECTS REG. 1 TO POINT TO A CPPL.
*   (2) USING REGS 4,5,9 FOR PARSE, 4,5,6,8 FOR DYNALLOC,
*       REG 4 FOR DCBD, REGS 11,12 FOR PROGRAM, REG 13 FOR DSECT1,
*       REGS 2,3,7,10    FOR WORKING.
*   (3) RETURN CODE OF 12 IF ERROR (PARSE,DYNALLOC,OPEN,SYNAD,CLOSE).
*   (4) THIS ROUTINE DOES DYNALLOC AND THEN CALLS PRINTDSX TO PRINT.
*   (5) THE INPUT DATASET IS NOT FREED SO C.B.'S CAN BE REUSED. NOTE:
*       SINCE IT IS NOT ALLOCATED WITH PERMANENT ATTR THIS IS O.K.
         SPACE 7
*        SET DEFAULT SYSOUT CLASS, LINE LENGTH, AND LINECOUNT
         SPACE 1
         GBLC  &CLASS,&LNESIZE,&LNECNT
&CLASS   SETC  '1'                     AXC CBT
&LNESIZE SETC  '133'
&LNECNT  SETC  '83'                    AXC CBT
         SPACE 2
SP1      EQU   7              SUBPOOL FOR GETMAINS
         EJECT
         SAVE  (14,12),,*     SAVE REGS
         LR    12,15          ESTABLISH ADDRESSABILITY
         LA    11,2048(12)
         LA    11,2048(11)    POINT TO NEXT 4K
         USING PRINTDS,12,11
* SAVE PARM PTR IN R3
         LR    9,1
         SPACE 1
* GETMAIN FOR REENT
         GETMAIN R,LV=DLENGTH,SP=SP1
         ST    13,4(1)        SAVE R13 INTO NEW SAVEAREA
         ST    1,8(0,13)      STORE NEW SAVEAREA ADDR INTO OLD
         LR    13,1           R1 POINTS TO NEW SAVE (BEG DSECT1)
         USING DSECT1,13      ADDRES. FOR DSECT1 (CONTAINS SAVEAREA)
         EJECT
*
*  INITIALIZE GETMAINED AREA
*
         SPACE 1
* ZILCH CORE (FIRST 256 BYTES- THUS, ANYTHING THAT MUST BE 0 GOES HERE)
*   START AFTER SAVEAREA SO AS NOT TO OVERLAY
         XR    3,3
         STC   3,72(13)       AFTER 72 BYTE SAVEAREA
         MVC   73(256,13),72(13)
         SPACE 1
* MOVE IN PUTMSG,TABADDR,WORKP,WORKZ,LINESIZE,LINECNT
         MVC   PUTMSG(4),PUTMSG2
         MVC   TABADDR,=V(PARMTAB)
         MVC   LINECNT,=H'&LNECNT'   DEFAULT
         MVC   LINESIZE,=H'&LNESIZE' DEFAULT
         SPACE 1
* INIT IOPL AND PUTLINE STUFF
         MVC   PUTLIST(PUTLISTL),PUTLIST2
         LA    3,PUTMSG
         ST    3,PUTLIST+4
         LA    3,PUTLIST
         ST    3,IOPL+12     IOPL NEEDS ADDR OF LIST FORM
         LA    3,ECBPUT
         ST    3,IOPL+8      IOPL ALSO NEEDS ECB ADDRESS
         SPACE 1
* MOVE 75 BLANKS INTO DSN , DDNAMES , & ROUTELOC
         IC    3,=C' '
         STC   3,DDNAME1
         MVC   DDNAME1+1(74),DDNAME1
         SPACE 1
* SAVE ORIGINAL PARM REG
         ST    9,CPPLADDR    STORE ADDR OF CPPL FOR LATER USE
         EJECT
*
*    PARSE ROUTINE SETUP
*
*    ALLOCATE SPACE FOR PPL AND MOVE IN FIELDS FROM CPPL + ELSEWHERE
*
*        FOR FOLLOWING SECTION OF CODE USING REGS 4,5 + 6 FOR DSECTS
*        FROM MACROS IKJCPPL, IKJPPL AND IKJPARM WHICH IS PDL RETRND
*        FROM PARSE AND CONTAINS THE SPECIFIED PDE'S.
*
         L     4,CPPLADDR
         USING CPPL,4        ADDRESSABILITY FOR CPPL DSECT
*
         LA    5,PPLAREA
         USING PPL,5
*    NOW CREATE PARSE PARAMETER LIST (PPL)  AND IOPL FOR PUTLINES
         L     7,CPPLCBUF   FROM CPPL
         ST    7,PPLCBUF           TO PPL
         L     7,CPPLUPT    FROM CPPL
         ST    7,PPLUPT            TO PPL
         ST    7,IOPL              TO IOPL FOR PUTLINE
         L     7,CPPLECT    FROM CPPL
         ST    7,PPLECT            TO PPL
         ST    7,IOPL+4            TO IOPL FOR PUTLINE
         LA    7,0          PUT 0 IN THIS FIELD
         ST    7,PPLUWA                      IN PPL
         LA    7,ECBPPL     PUT ADDR OF ECB
         ST    7,PPLECB                      IN PPL
         L     7,TABADDR    FROM PARSE MACROS - PDL
         ST    7,PPLPCL
         LA    7,ANSADDR    ADDR OF ANSWER AREA FOR PARSE
         ST    7,PPLANS
         DROP  4,5
*
         LR    1,5           PUT ADDR OF PPL IN R1 AND THEN
         LINK  EP=IKJPARS    CALL PARSE ROUTINE
         LTR   15,15
         BNZ   ERRPARSE
*
         L     9,ANSADDR     GET LOC. OF PDL RETURNRD BY PARSE
         USING IKJPARMD,9    USE THE IKJPARMD DSECT FOR ADDRES.
*
* IKJPARMD DSECT LOOKS AS FOLLOWS:
* IKJPARMD DSECT
*          DS   2A HEADER INFO. - USED BY RELEASE MACRO
* DSNPDE   DS   6A CONTAINS LENGTH OF(4-5) + PTR(8-11) TO DSNAME
* COPKEYW  DS   AL2
* LINKEYW  DS   AL2
* LCCKEYW  DS   AL2
* FCBKEYW  DS   AL2
* CHAKEYW  DS   AL2
* DESKEYW  DS   AL2
* CLAKEYW  DS   AL2
* FUNKEYW  DS   AL2
* NOPKEYW  DS   AL2
* NOHKEYW  DS   AL2
* NOIKEYW  DS   AL2
* NOMKEYW  DS   AL2
* TERKEYW  DS   AL2
* HOLKEYW  DS   AL2
* RANKEYW  DS   AL2
* SELKEYW  DS   AL2
* COUKEYW  DS   AL2
* STAKEYW  DS   AL2
* FORKEYW  DS   AL2
* VOLKEYW  DS   AL2
* UNIKEYW  DS   AL2
* SEAKEYW  DS   AL2
* COPNUM   DS   2A IF COPIES ENTERED THEN 1ST 4 BYTES ARE PTR.
* LINNUM   DS   2A IF LINESIZE ENTRD THEN 1ST 4 BYTES ARE PTR.
* LCCNUM   DS   2A IF LINECOUNT ETRD THEN 1ST 4 BYTES ARE PTR.
* FCBNUM   DS   2A IF FCB    ENTERED THEN 1ST 4 BYTES ARE PTR.
* CHANUM   DS   2A IF CHARS  ENTERED THEN 1ST 4 BYTES ARE PTR.
* DESNUM   DS   2A IF DEST   ENTERED THEN 1ST 4 BYTES ARE PTR.
* CLANUM   DS   2A IF CLASS  ENTERED THEN 1ST 4 BYTES ARE PTR.
* FUNNUM   DS   2A IF FUNC   ENTERED THEN 1ST 4 BYTES ARE PTR.
* RANNUM   DS   4A IF RANGE  ENTERED THEN 2 ENTRIES ("RANGE" OPTION)
* SELNUM   DS   3A IF SELECT ENTERED THEN LINKED LIST("LIST" OPTION)
* COUNUM   DS   2A IF COUNT  ENTERED THEN 1ST 4 BYTES ARE PTR.
* STANUM   DS   2A IF START  ENTERED THEN 1ST 4 BYTES ARE PTR.
* FORNUM   DS   2A IF FORMS  ENTERED THEN 1ST 4 BYTES ARE PTR.
* VOLNUM   DS   2A IF VOLUME ENTERED THEN 1ST 4 BYTES ARE PTR.
* UNINUM   DS   2A IF UNIT   ENTERED THEN 1ST 4 BYTES ARE PTR.
* SEANUM   DS   2A IF SEARCH ENTERED THEN 1ST 4 BYTES ARE PTR.
* SEANUM2  DS   2A IF SEARCH (2ND POS PARM)   4 BYTES ARE PTR.
*          DS   0D
* IKJ@0056 EQU  *-IKJPARMD = CC  FOR THIS SET OF PARSE MACROS
*
         MVC   DSNLNGTH(2),DSNPDE+4  MOVE LENGTH OF DSN INTO DSNLNGTH
         L     3,DSNPDE       LOAD FIRST 4 BYTES OF PDE (PTR TO DSN)
         LH    7,DSNLNGTH     LOAD LENGTH INTO R7 FOR MVC
         BCTR  7,0            FOR MVC
         EX    7,MVCEX1       MOVE DSNAME INTO DSNAME FIELD
         B     CONT1
MVCEX1   MVC   DSNAME(0),0(3)   MVC FOR EX INSTRUCTION
CONT1    EQU   *
         TM    DSNPDE+14,X'80'  SEE IF MEMBER NAME WAS SUPPLIED(FLAG)
         BZ    CONT2          NO IT WAS NOT
         MVC   MEMLNGTH(2),DSNPDE+12 MOVE LENGTH OF MEM INTO MEMLNGTH
         L     3,DSNPDE+8     LOAD 3RD 4 BYTES OF PDE (PTR TO MEM)
         LH    7,MEMLNGTH     LOAD LENGTH INTO R7 FOR MVC
         BCTR  7,0            DEC LENGTH BY 1 FOR MVC
         EX    7,MVCMEMB      MOVE DSNAME INTO DSNAME FIELD
         B     CONT2
MVCMEMB  MVC   MEMBER(0),0(3)   MVC FOR EX INSTRUCTION
CONT2    EQU   *
*
*  SEE IF "NOHEADING" WAS SPECIFIED, IF NOT TURN ON FLAGS BIT 1.
*
         TM    NOHKEYW+1,X'01' SEE IF "NOHEADING" ENTERED
         BZ    CONT2X          NO
         OI    FLAGS4,X'20'    INDICATE EXPLICITELY DEFINED
         OI    FLAGS4,X'40'    INDICATE NOHEADING
         B     CONT2Y
CONT2X   TM    NOHKEYW+1,X'02' SEE IF "HEADING" ENTERED
         BZ    CONT2Y          NO
         OI    FLAGS4,X'20'    INDICATE EXPLICITELY DEFINED
CONT2Y   EQU   *
NONOH    EQU   *
*
*  SEE IF "PAGE" WAS SPECIFIED, IF NOT, DO NOT TURN ON FLAGS BIT 0.
*
         TM    NOPKEYW+1,X'02' SEE IF "PAGE" ENTERED
         BZ    NONOP           NO
         OI    FLAGS,X'80'     TURN ON IF NEW PAGE FOR EACH MEMBER
NONOP    EQU   *
*
*  SEE IF "NOINDEX" WAS SPECIFIED, IF NOT TURN ON FLAGS BIT 7.
*
         TM    NOIKEYW+1,X'01' SEE IF "NOINDEX" ENTERED
         BO    NONOI           YES
         OI    FLAGS,X'02'     TURN ON IF INDEX REQUESTED
NONOI    EQU   *
*
* SEE IF "LINESIZE" WAS SPECIFIED
*
         TM    LINNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOLIN          NO IT WAS NOT - USE SYSTEM DEFAULT
         L     7,LINNUM       LOAD PTR TO LINSZE FIELD
         LH    3,LINNUM+4     LOAD LENGTH OF LINSZE ENTERED(1,2,OR 3)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ(7),=ZL3'0' CLEAR
         LA    2,WORKZ        FOR MVC
         LA    2,2(2)         ADD 2 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1, OR 2 DEPENDING ON # OF BYTES
         EX    3,MVCLIN       EXEC MVC
         B     CONT2A
MVCLIN   MVC   0(0,2),0(7)    MOVE N CHARS (MAX 3 NUMERICS)
CONT2A   PACK  WORKP(8),WORKZ(3) PACK THE 3 BYTES
         CVB   3,WORKP        GET BINARY EQUIV
         STH   3,LINESIZE     STORE FOR USE LATER.
NOLIN    EQU   *
*
* SEE IF "LINECOUNT" WAS SPECIFIED
*
         TM    LCCNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOLCC          NO IT WAS NOT - USE SYSTEM DEFAULT
         L     7,LCCNUM       LOAD PTR TO LINCNT FIELD
         LH    3,LCCNUM+4     LOAD LENGTH OF LINCNT ENTERED(1,2,OR 3)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ(7),=ZL3'0' CLEAR
         LA    2,WORKZ        FOR MVC
         LA    2,2(2)         ADD 2 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1, OR 2 DEPENDING ON # OF BYTES
         EX    3,MVCLCC       EXEC MVC
         B     CONT2B
MVCLCC   MVC   0(0,2),0(7)    MOVE N CHARS (MAX 3 NUMERICS)
CONT2B   PACK  WORKP(8),WORKZ(3) PACK THE 3 BYTES
         CVB   3,WORKP        GET BINARY EQUIV
         STH   3,LINECNT      STORE FOR USE LATER.
NOLCC    EQU   *
*
* SEE IF "COUNT" WAS SPECIFIED
*
         TM    COUNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOCOU          NO IT WAS NOT - IGNORE
         OI    FLAGS2,X'40'   TURN ON COUNT BIT
         L     7,COUNUM       LOAD PTR TO COUNT  FIELD
         LH    3,COUNUM+4     LOAD LENGTH OF COUNT  ENTERED(1-7)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ2(7),=ZL7'0' CLEAR
         LA    2,WORKZ2       FOR MVC
         LA    2,6(2)         ADD 6 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1,2.... DEPENDING ON # OF BYTES
         EX    3,MVCCOU       EXEC MVC
         B     CONT2C
MVCCOU   MVC   0(0,2),0(7)    MOVE N CHARS (MAX 7 NUMERICS)
CONT2C   PACK  WORKP(8),WORKZ2(7) PACK THE 7 BYTES
         CVB   3,WORKP        GET BINARY EQUIV
         ST    3,COUNT        STORE FOR USE LATER.
NOCOU    EQU   *
*
* SEE IF "START" WAS SPECIFIED
*
         TM    STANUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOSTA          NO IT WAS NOT
         OI    FLAGS2,X'20'   TURN ON START BIT
         L     7,STANUM       LOAD PTR TO START  FIELD
         LH    3,STANUM+4     LOAD LENGTH OF START  ENTERED(1-7)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ2(7),=ZL7'0' CLEAR
         LA    2,WORKZ2       FOR MVC
         LA    2,6(2)         ADD 6 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1,2.... DEPENDING ON # OF BYTES
         EX    3,MVCSTA       EXEC MVC
         B     CONT2D
MVCSTA   MVC   0(0,2),0(7)    MOVE N CHARS (MAX 7 NUMERICS)
CONT2D   PACK  WORKP(8),WORKZ2(7) PACK THE 7 BYTES
         CVB   3,WORKP        GET BINARY EQUIV
         ST    3,START        STORE FOR USE LATER.
NOSTA    EQU   *
*
* SEE IF "RANGE" WAS SPECIFIED - RANGE OPTION ON IKJIDENT
*
         TM    RANNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NORAN          NO IT WAS NOT
         OI    FLAGS2,X'10'   TURN ON RANGE BIT
         MVC   RANGES(8),=8XL1'00'  CLEAR FIELD
         MVC   RANGES+8(8),=8XL1'FF'  "    "
         L     7,RANNUM       LOAD PTR TO 1ST ENTRY
         LH    3,RANNUM+4     LOAD LENGTH OF ENTRY (1-8)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCRAN1
         ICM   7,B'1111',RANNUM+8 LOAD PTR TO 2ND ENTRY
         BZ    CONT2E         NO SECOND ENTRY
         LH    3,RANNUM+12    LOAD LENGTH OF ENTRY (1-8)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCRAN2
         B     CONT2E
MVCRAN1  MVC   RANGES(0),0(7)   MOVE N CHARS (MAX 8)
MVCRAN2  MVC   RANGES+8(0),0(7) MOVE N CHARS (MAX 8)
CONT2E   EQU   *
NORAN    EQU   *
*
*  SEE IF "LIST" WAS SPECIFIED, IF YES TURN ON FLAGS2 BIT 5.
*
         TM    TERKEYW+1,X'01' SEE IF "LIST" ENTERED
         BZ    NOLIST          NO
         OI    FLAGS2,X'04'    TURN ON BIT
NOLIST   EQU   *
*
* SEE IF "SELECT" WAS SPECIFIED - LIST OPTION ON IKJIDENT
*
         TM    SELNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOSEL          NO IT WAS NOT
         OI    FLAGS2,X'08'   TURN ON SELECT BIT
         LA    3,0            INITIALIZE COUNTER
         LA    7,SELNUM
*        LOOP TO SEE HOW MANY ENTRIES FOR GETMAIN
LOOPSEL1 LA    3,1(3)         INCR COUNTER
         L     7,8(7)         GET A(NEXT BLOCK)
         C     7,=XL4'FF000000' LAST BLOCK ?
         BNE   LOOPSEL1       NOPE
         SPACE 1
*        DO GETMAIN
         LR    10,3
         ST    3,MEMCOUNT     SAVE FOR USE BY PRINTDSX
         LA    10,2(10)       INCR. BY 2 FOR HIGHFF & LASTENTB
         MH    10,=H'12'      FOR GETMAIN
         GETMAIN R,LV=(10),SP=SP1
         ST    1,MEMPTR       SAVE ADDRESS
         SPACE 1
*        LOOP THRU ENTRIES AGAIN PLACING IN GETMAINED AREA
         LA    7,SELNUM       GET A(FIRST BLOCK)
LOOPSEL2 LH    8,4(7)         GET LENGTH
         BCTR  8,0            DECR BY 1 FOR MVC
         MVC   0(8,1),=CL8' ' INIT AREA
         L     10,0(7)        GET ADDRESS OF ENTRY
         EX    8,MVCSEL       MOVE IN NAME
         L     7,8(7)         POINT TO NEXT BLOCK
         LA    1,12(1)        INCR POINTER INTO MEMLIST
         BCT   3,LOOPSEL2
         SPACE 1
*        COMPLETE BLOCK
         MVC   0(8,1),HIGHFF     PUT IN HIGH FF'S
         MVC   12(8,1),LASTENTB  INDICATE END OF BLOCK
         B     NOSEL
MVCSEL   MVC   0(0,1),0(10)    MOVE IN ENTRY
NOSEL    EQU   *
*
*  SEE IF "NOMSG" WAS SPECIFIED, IF YES TURN ON FLAGS BIT 8.
*
         TM    NOMKEYW+1,X'01' SEE IF "NOMSG" ENTERED
         BZ    NONOM           YES
         OI    FLAGS,X'01'     TURN ON IF NOMSG REQUESTED
NONOM    EQU   *
*
* SEE IF "SEARCH" WAS SPECIFIED
*
         TM    SEANUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOSEA          NO IT WAS NOT - IGNORE
         OI    FLAGS3,X'10'   TURN ON SEARCH BIT
         L     7,SEANUM       LOAD PTR TO SEARCH FIELD
         LH    3,SEANUM+4     LOAD LENGTH OF SEARCH ENTERED(1-7)
         ST    3,SRCHLNG      SAVE FOR USE LATER
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCSEA       EXEC MVC
         B     CONT2F
MVCSEA   MVC   SRCHID(0),0(7) MOVE N CHARS (MAX 16)
CONT2F   EQU   *
*  SEE IF OPTIOAL LOCATION SPECIFIED WITH SEARCH
         TM    SEANUM2+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOSEA          NO IT WAS NOT - IGNORE
         OI    FLAGS3,X'08'   TURN ON LOC   BIT
         L     7,SEANUM2      LOAD PTR TO LOC    FIELD
         LH    3,SEANUM2+4    LOAD LENGTH OF LOC    ENTERED(1-7)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ2(7),=ZL7'0' CLEAR
         LA    2,WORKZ2       FOR MVC
         LA    2,6(2)         ADD 6 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1,2.... DEPENDING ON # OF BYTES
         EX    3,MVCSEA2      EXEC MVC
         B     CONT2G
MVCSEA2  MVC   0(0,2),0(7)    MOVE N CHARS (MAX 7 NUMERICS)
CONT2G   PACK  WORKP(8),WORKZ2(7) PACK THE 7 BYTES
         CVB   3,WORKP        GET BINARY EQUIV
         ST    3,SRCHLOC      STORE FOR USE LATER.
NOSEA    EQU   *
*
* SEE IF VOLUME & UNIT SPECIFIED
*
         TM    VOLNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOVOL          NO IT WAS NOT - FORGET IT
         TM    UNINUM+6,X'80' UNIT ALSO SPEC ?
         BZ    ERRVOL         NO IT WAS NOT - ERROR
         OI    FLAGS3,X'04'   INDICATE VOL & UNIT SPEC
         LH    3,VOLNUM+4     LOAD LENGTH OF ENTERED(1-6)
         ST    3,VOLUMEL       PUT LENGTH
         L     7,VOLNUM       LOAD PTR TO VOL  FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCVOL         EXEC MVC INSTRUCTION
         B     CONT2H
MVCVOL   MVC   VOLUME(0),0(7) MOVE
CONT2H   EQU   *
*
*        SETUP UNIT
         LH    3,UNINUM+4     LOAD LENGTH OF ENTERED(1-6)
         ST    3,UNITL         PUT LENGTH
         L     7,UNINUM       LOAD PTR TO UNIT FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCUNI         EXEC MVC INSTRUCTION
         B     CONT2I
MVCUNI   MVC   UNIT(0),0(7) MOVE N CHARACTERS (MAX 6 CHAR)
CONT2I   EQU   *
NOVOL    EQU   *
         EJECT
*
*   NOW DYNAMICALLY ALLOCATE THE SYSOUT DATASET
*
*        FOR FOLLOWING SECTION OF CODE USING REGS 4,5,6+8 FOR DSECTS
*        FROM MACROS IEFZB4D0 + IEFZB4D2 (AN RB AND A PARM LIST).
*                 LENGTH = 4+20+(NX4) + N1,N2,N3,...
         LA    8,150     = 4+20+40 +  7+13+10+10+7+4+7+10+4+14
         GETMAIN R,LV=(8),SP=SP1
         LR    8,1
         USING S99RBP,8       ADDRESSABILITY FOR 'RBPTR' DSECT
         LA    4,S99RBPTR+4   4 BYTES BEYOND 'RBPTR'
         USING S99RB,4        ADDRESSABILITY FOR 'RB' DSECT
         ST    4,S99RBPTR     MAKE 'RBPTR' POINT TO 'RB'
         OI    S99RBPTR,S99RBPND  TURN ON HIGH ORDER BIT IN 'RBPTR'
         XC    S99RB(RBLEN),S99RB ZERO OUT 'RB' ENTIRELY
         MVI   S99RBLN,RBLEN   PUT IN LENGTH OF 'RB' IN ITS LENGTH FLD
         MVI   S99VERB,S99VRBAL  SET VERB CODE FIELD TO ALLOC FUNCTION
         LA    5,S99RB+RBLEN   POINT 20 BYTES BEYOND START OF 'RB'
         USING S99TUPL,5       ESTAB. ADDRESSABILITY FOR TEXT UNIT PTRS
         ST    5,S99TXTPP      INIT. THE TEXT PTRS. ADDRESS IN 'RB'
*
         LA    6,S99TUPL+40    POINT JUST PAST 10 TEXT UNIT PTR'S
         USING S99TUNIT,6      SET ADDRESSABILITY FOR 1ST TEXT UNIT
         ST    6,S99TUPTR      POINT 1ST TEXT UNIT PTR TO 1ST TEXT UNIT
*
* SEE IF COPIES WAS SPECIFIED
*
         TM    COPNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOCOP          NO IT WAS NOT - USE SYSTEM DEFAULT
         L     7,COPNUM       LOAD PTR TO COPIES FIELD
         LH    3,COPNUM+4     LOAD LENGTH OF COPIES ENTERED(1,2,OR 3)
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         MVC   WORKZ(7),=ZL3'0' CLEAR
         LA    2,WORKZ       FOR MVC
         LA    2,2(2)         ADD 2 TO ADDR (PT TO LAST BYTE)
         SR    2,3            SUB 0,1, OR 2 DEPENDING ON # OF BYTES
         EX    3,MVCCOP        EXEC MVC
         B     CONT3
MVCCOP   MVC   0(0,2),0(7)  MOVE N CHARS (MAX 3 NUMERICS)
CONT3    PACK  WORKP(8),WORKZ(3) PACK THE 3 BYTES
         CVB   3,WORKP    GET BINARY EQUIV. -THIS IS PARM FIELD
*
         LA    7,DALCOPYS      GET KEY FOR NO COPIES
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LA    7,1             LENGTH OF PARM
         STH   7,S99TULNG      PUT LENGTH OF PARM
         STC   3,S99TUPAR      FROM CVB ABOVE- STORE 1 CHAR
*
         LA    6,S99TUNIT+7    POINT JUST PAST 1ST TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 2ND TUP IN LIST
         ST    6,S99TUPTR      POINT 2ND TUP TO 2ND TEXT UNIT
NOCOP    EQU   *
*
* SEE IF DEST WAS SUPPLIED
*
         TM    DESNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NODEST         NO IT WAS NOT - FORGET IT
         LA    7,DALSUSER      GET KEY FOR DEST
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LH    3,DESNUM+4     LOAD LENGTH OF ENTERED(1-7)
         STH   3,S99TULNG      PUT LENGTH
         L     7,DESNUM       LOAD PTR TO DEST FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCDES1        EXEC MVC INSTRUCTION
         EX    3,MVCDES2
         B     CONT4
MVCDES1  MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 7 CHAR)
MVCDES2  MVC   ROUTELOC(0),0(7) MOVE
CONT4    EQU   *
*
         LA    6,S99TUNIT+13   POINT JUST PAST 2ND TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 3RD TUP IN LIST
         ST    6,S99TUPTR      POINT 3RD TUP TO 3RD TEXT UNIT
         B     CONT4A
NODEST   MVC   ROUTELOC(5),=CL5'LOCAL'  IF DEST NOT SUPPLIED
CONT4A   EQU   *
*
* SEE IF FCB  WAS SUPPLIED
*
         TM    FCBNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOFCB          NO IT WAS NOT - FORGET IT
         OI    FLAGS2,X'01'   INDICATE CHARS/FCB SPEC
         LA    7,DALFCBIM      GET KEY FOR FCB
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LH    3,FCBNUM+4     LOAD LENGTH OF ENTERED(1-4)
         STH   3,S99TULNG      PUT LENGTH
         L     7,FCBNUM       LOAD PTR TO DEST FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCFCB         EXEC MVC INSTRUCTION
         MVC   CALLFLD(8),=CL8' ' ALSO FILL IN CALLFLD FOR CHECK
         EX    3,MVCFCB2         ROUTINE - PRINTDSY
         B     CONT4B
MVCFCB   MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 4 CHAR)
MVCFCB2  MVC   CALLFLD(0),0(7)    "  "    "
CONT4B   EQU   *
         LA    6,S99TUNIT+10   POINT JUST PAST 3RD TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 4TH TUP IN LIST
         ST    6,S99TUPTR      POINT 4TH TUP TO 4TH TEXT UNIT
NOFCB    EQU   *
*
* SEE IF CHARS WAS SUPPLIED
*
         TM    CHANUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOCHA          NO IT WAS NOT - FORGET IT
         OI    FLAGS2,X'01'   INDICATE CHARS/FCB SPEC
         LA    7,DALUCS        GET KEY FOR CHARS (ACTUALLY UCS)
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LH    3,CHANUM+4     LOAD LENGTH OF ENTERED(1-4)
         STH   3,S99TULNG      PUT LENGTH
         L     7,CHANUM       LOAD PTR TO DEST FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCCHA         EXEC MVC INSTRUCTION
         MVC   CALLFLD(8),=CL8' ' ALSO FILL IN CALLFLD FOR CHECK
         EX    3,MVCCHA2         ROUTINE - PRINTDSY
         B     CONT4C
MVCCHA   MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 4 CHAR)
MVCCHA2  MVC   CALLFLD(0),0(7)    "  "      "
CONT4C   EQU   *
*
         LA    6,S99TUNIT+10   POINT JUST PAST 4TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 5TH TUP IN LIST
         ST    6,S99TUPTR      POINT 5TH TUP TO 5TH TEXT UNIT
NOCHA    EQU   *
*
* SEE IF FUNC WAS SUPPLIED
*
         TM    FUNNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOFUNC
         L     7,FUNNUM      LOAD PTR TO FUNC FIELD
         CLI   0(7),C'I'     SEE IF IT IS AN "I"
         BNE   NOFUNC        IF NOT, FORGET IT
*
         LA    7,DALFUNC       GET KEY FOR FUNC
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         STH   7,S99TULNG      PUT LENGTH = 1
         MVI   S99TUPAR,X'80' PARM FOR INTERPRET
*
         LA    6,S99TUNIT+7    POINT JUST PAST 5TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 6TH TUP IN LIST
         ST    6,S99TUPTR      POINT 6TH TUP TO 6TH TEXT UNIT
NOFUNC   EQU   *
*
*  SEE IF HOLD WAS SPECIFIED
*
         TM    HOLKEYW+1,X'01' SEE IF HOLD SPECIFIED
         BZ    NOHOLD          NO
         LA    7,DALSHOLD      GET KEY FOR HOLD OPTION
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,0             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
*
         LA    6,S99TUNIT+4    POINT JUST PAST 6TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 7TH TUP IN LIST
         ST    6,S99TUPTR      POINT 7TH TUP TO 7TH TEXT UNIT
NOHOLD   EQU   *
*
* SEE IF FORMS WAS SUPPLIED
*
         TM    FORNUM+6,X'80' CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOFOR          NO IT WAS NOT - FORGET IT
         OI    FLAGS2,X'01'   INDICATE FCB/CHARS/FORMS SPEC.
         LA    7,DALSFMNO      GET KEY FOR FORMS
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LH    3,FORNUM+4     LOAD LENGTH OF ENTERED(1-7)
         STH   3,S99TULNG      PUT LENGTH
         L     7,FORNUM       LOAD PTR TO DEST FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCFOR         EXEC MVC INSTRUCTION
         B     CONT4F
MVCFOR   MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 7 CHAR)
CONT4F   EQU   *
*
         LA    6,S99TUNIT+10   POINT JUST PAST 7TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO  8TH TUP IN LIST
         ST    6,S99TUPTR      POINT  8TH TUP TO  8TH TEXT UNIT
NOFOR    EQU   *
         EJECT
*     1- CALL PRINTDSY VALIDITY CHECKNG ROUTINE IF FCB/CHARS/FORM SPEC
*     2- RELEASE PARSE STORAGE
         SPACE 2
*        CHECK FOR VALID CHA OR FCB BY CALLING PRINTDSY
*        NOTE: PRINTDSY MAY CHANGE PDE FOR CLASS
         TM    FLAGS2,X'01'    FCB, CHARS, OR FORMS SPEC ?
         BZ    CONT5A          NO
         CALL  PRINTDSY,(IOPL,FCBNUM,CHANUM,CLANUM,DESNUM),            X
               MF=(E,CPARMS)
         LTR   15,15
         BNZ   END
CONT5A   EQU   *
         SPACE 2
*
*  SEE IF CLASS WAS SPECIFIED (THIS CODE MUST FOLLOW CALL TO PRINTDSY
*        SINCE IT MAY CHANGE CLASS).
         LA    7,DALSYSOU      GET KEY FOR SYSOUT
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LA    7,1             LENGTH OF PARM
         STH   7,S99TULNG      PUT LENGTH OF PARM
         TM    CLANUM+6,X'80'  SEE IF CLASS SPECIFIED
         BZ    CLASSA          NO IT WAS NOT - USE "1"   AXC CBT
         L     7,CLANUM        LOAD PTR TO CLASS FIELD
         MVC   S99TUPAR(1),0(7) MOVE SYSOUT CLASS INTO PARM FIELD
         B     CONT5
CLASSA   MVI   S99TUPAR,C'&CLASS' DEFAULT SYSOUT CLASS IN PARM FLD
*
CONT5    LA    6,S99TUNIT+7    POINT JUST PAST  8TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO  9TH TUP IN LIST
         ST    6,S99TUPTR      POINT  9TH TUP TO  9TH TEXT UNIT
         SPACE 2
*        RELEASE PARSE STORAGE
         IKJRLSA ANSADDR
*
         DROP  9          NO LONGER NEED PARSE ANSWER AREA.
         EJECT
*
*   NOW COMPLETE DYNAMIC ALLOCATION OF SYSOUT DATASET
*
         LA    7,DALCLOSE      GET KEY FOR FREE=CLOSE OPTION
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,0             # OF PARMS
         STH   7,S99TUNUM      PUT KEY
*
         LA    6,S99TUNIT+4    POINT JUST PAST  9TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 10TH TUP IN LIST
         ST    6,S99TUPTR      POINT 10TH TUP TO 10TH TEXT UNIT
*
         OI    S99TUPTR,S99TUPLN TURN ON HIGH ORDER BIT FOR LAST PTR
*
         LA    7,DALRTDDN      GET KEY FOR RETURN DDNAME
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT KEY
         LA    7,8             LENGTH OF PARM - FIX TO 8 BYTES
         STH   7,S99TULNG
*
         LA    7,S99TULNG
         ST    7,LNGADDR1      STORE ADDR OF LENGTH FOR DCB MOD.
*
         LA    7,S99TUPAR      LOAD ADDR. OF PARM FIELD
         ST    7,DDNADDR1       TO USE LATER - DDNAME FIELD.
*
         LR    1,8       PUT RB PTR ADR IN R1 FOR DYNALLOC
         DYNALLOC        INVOKE DYNALLOC ROUTINE
         LTR   15,15     CHK DYNALLOC RETURN CODE
         BNZ   ERRDYN1
*
         DROP  4,5,6,8   NO LONGER NEED FOR THIS DYNALLOC
         EJECT
*
*       NOW DYNAMICALLY ALLOCATE THE INPUT DATASET
*
         LA    8,171       4+20+28 + 50+7+14+12+14+14+8
         GETMAIN R,LV=(8),SP=SP1
         LR    8,1
         USING S99RBP,8       ADDRESSABILITY FOR 'RBPTR' DSECT
         LA    4,S99RBPTR+4   4 BYTES BEYOND 'RBPTR'
         USING S99RB,4        ADDRESSABILITY FOR 'RB' DSECT
         ST    4,S99RBPTR     MAKE 'RBPTR' POINT TO 'RB'
         OI    S99RBPTR,S99RBPND  TURN ON HIGH ORDER BIT IN 'RBPTR'
         XC    S99RB(RBLEN),S99RB ZERO OUT 'RB' ENTIRELY
         MVI   S99RBLN,RBLEN   PUT IN LENGTH OF 'RB' IN ITS LENGTH FLD
         MVI   S99VERB,S99VRBAL  SET VERB CODE FIELD TO ALLOC FUNCTION
         LA    5,S99RB+RBLEN   POINT 20 BYTES BEYOND START OF 'RB'
         USING S99TUPL,5       ESTAB. ADDRESSABILITY FOR TEXT UNIT PTRS
         ST    5,S99TXTPP      INIT. THE TEXT PTRS. ADDRESS IN 'RB'
*
         LA    6,S99TUPL+28    POINT JUST PAST 7 TEXT UNIT PTR'S
         USING S99TUNIT,6      SET ADDRESSABILITY FOR 1ST TEXT UNIT
         ST    6,S99TUPTR      POINT 1ST TEXT UNIT PTR TO 1ST TEXT UNIT
*
         LA    7,DALDSNAM      GET KEY FOR DSNAME
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LH    7,DSNLNGTH      LOAD LENGTH OF DSNAME FOR MVC
         STH   7,S99TULNG      PUT LENGTH OF PARM
         BCTR  7,0             DEC LENGTH BY 1 FOR MVC
         EX    7,MVCDSN        MOVE DSNAME INTO PARM FIELD
         B     CONT7
MVCDSN   MVC   S99TUPAR(0),DSNAME    MVC FOR EX INSTRUCTION
CONT7    EQU   *
*
         LA    6,S99TUNIT+50   POINT JUST PAST 1ST TEXT UNIT(ASSUME 50)
         LA    5,S99TUPL+4     POINT TO 2ND TUP IN LIST
         ST    6,S99TUPTR      POINT 2ND TUP TO 2ND TEXT UNIT
*
* SPECIFY "SHARE" OPTION
*
         LA    7,DALSTATS      GET KEY FOR DATASET STATUS
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         STH   7,S99TULNG      SET PARM LENGTH ALSO TO 1
         MVI   S99TUPAR,X'08'  INDICATE SHARE OPTION
*
         LA    6,S99TUNIT+7    POINT JUST PAST 2ND TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 3RD TUP IN LIST
         ST    6,S99TUPTR      POINT 3RD TUP TO 3RD TEXT UNIT
*
* SPECIFY MEMBER IF WAS INPUT
*
         LH    3,MEMLNGTH      TEST TO SEE IF MEMBER NAME WAS SUPPLIED
         CH    3,=H'0'             IF NOT DO NOT SET UP THIS TEXT UNIT
         BE    NOMEM
         OI    FLAGS,X'10'     INDICATE THAT A MEMBER WAS SPECIFIED
         LA    7,DALMEMBR      GET KEY FOR MEMBER
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         STH   3,S99TULNG      PUT LENGTH OF PARM
         BCTR  3,0             SUBTRACT 1 FOR MVC
         EX    3,MVCMEM        MOVE MEMBER NAME INTO PARM FIELD
         B     CONT8
MVCMEM   MVC   S99TUPAR(0),MEMBER
*
CONT8    LA    6,S99TUNIT+14   POINT JUST PAST 3RD TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 4TH TUP IN LIST
         ST    6,S99TUPTR      POINT 4TH TUP TO 4TH TEXT UNIT
NOMEM    EQU   *
*
* SEE IF VOLUME & UNIT SPECIFIED
*
         TM    FLAGS3,X'04'   CK. FLAG TO SEE IF PRESENT(FLG=0 IF NO)
         BZ    NOVOLX         NO IT WAS NOT - FORGET IT
         LA    7,DALVLSER      GET KEY FOR VOLUME
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         L     3,VOLUMEL      LOAD LENGTH OF ENTERED(1-6)
         STH   3,S99TULNG      PUT LENGTH
         LA    7,VOLUME       LOAD PTR TO VOL  FIELD
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCVOLX        EXEC MVC INSTRUCTION
         B     CONT8A
MVCVOLX  MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 6 CHAR)
CONT8A   EQU   *
*
         LA    6,S99TUNIT+12   POINT JUST PAST 4TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 5TH TUP IN LIST
         ST    6,S99TUPTR      POINT 5TH TUP TO 5TH TEXT UNIT
*        SETUP UNIT
         LA    7,DALUNIT       GET KEY FOR UNIT
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         L     3,UNITL        LOAD LENGTH OF ENTERED(1-6)
         STH   3,S99TULNG      PUT LENGTH
         LA    7,UNIT         LOAD PTR TO UNIT FIELD
*
         BCTR  3,0            DEC LENGTH BY 1 FOR MVC
         EX    3,MVCUNIX        EXEC MVC INSTRUCTION
         B     CONT8B
MVCUNIX  MVC   S99TUPAR(0),0(7) MOVE N CHARACTERS (MAX 6 CHAR)
CONT8B   EQU   *
         LA    6,S99TUNIT+12   POINT JUST PAST 5TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 6TH TUP IN LIST
         ST    6,S99TUPTR      POINT 6TH TUP TO 6TH TEXT UNIT
NOVOLX   EQU   *
*
*  RETURN DDNAME SPECIFICATION
*
         LA    7,DALRTDDN      GET KEY FOR RETURN DDNAME
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT KEY
         LA    7,8             LENGTH OF PARM - FIX TO 8 BYTES
         STH   7,S99TULNG
*
         LA    7,S99TULNG      LOAD ADDR. OF LENGTH OF PARM
         ST    7,LNGADDR2       TO USE LATER - FOR MVC FOR DDN
*
         LA    7,S99TUPAR      LOAD ADDR. OF PARM FIELD
         ST    7,DDNADDR2       TO USE LATER - DDNAME FIELD.
*
         LA    6,S99TUNIT+14   POINT JUST PAST 6TH TEXT UNIT
         LA    5,S99TUPL+4     POINT TO 7TH TUP IN LIST
         ST    6,S99TUPTR      POINT 7TH TUP TO 7TH TEXT UNIT
*
*  SPECIFY RETURN DSORG
*
         OI    S99TUPTR,S99TUPLN TURN ON HIGH ORDER BIT FOR LAST PTR
*
         LA    7,DALRTORG      GET KEY FOR DSORG (FOR RETURN)
         STH   7,S99TUKEY      PUT KEY IN TEXT UNIT KEY FIELD
         LA    7,1             # OF PARMS
         STH   7,S99TUNUM      PUT # OF PARMS
         LA    7,2             LOAD LENGTH
         STH   7,S99TULNG      PUT LENGTH OF PARM
         LA    7,S99TUPAR      LOAD ADDR. OF PARM FIELD
         ST    7,DSORGADR      STORE ADDR FOR USE LATER
*
         LR    1,8       PUT RB PTR ADR IN R1 FOR DYNALLOC
         DYNALLOC        INVOKE DYNALLOC ROUTINE
         LTR   15,15     CHK DYNALLOC RETURN CODE
         BNZ   ERRDYN2
*
         DROP  4,5,6,8   NO LONGER NEED REGS FOR THIS DYNALLOC
         EJECT
*
*        MOVE DDNAME RETRND BY DYNALLOC INTO DDNAME FOR SYSOUT
*
         L     2,LNGADDR1 LOAD ADDRESS OF LENGTH OF DDN FOR MVC
         LH    7,0(2)     LOAD LENGTH
         BCTR  7,0        SUBTRACT 1 FOR EX MVC
         L     3,DDNADDR1 LOAD ADDRESS OF DDNAME FIELD
         EX    7,MVCDD1
         B     CONT6
MVCDD1   MVC   DDNAME1(0),0(3) MOVE DDNAME INTO DDNAME FIELD IN DCB
CONT6    EQU   *
*
*        MOVE DDNAME RETRND BY DYNALLOC INTO DDNAME FOR INPUT
*
         L     2,LNGADDR2 LOAD ADDRESS OF LENGTH OF DDN FOR MVC
         LH    7,0(2)     LOAD LENGTH
         BCTR  7,0        SUBTRACT 1 FOR EX MVC
         L     3,DDNADDR2 LOAD ADDRESS OF DDNAME FIELD
         EX    7,MVCDD2
         B     CONT9
MVCDD2   MVC   DDNAME2(0),0(3) MOVE DDNAME INTO DDNAME FIELD IN DCB
CONT9    EQU   *
         EJECT
*
*     CALL PRINTDSX
*          PRINTDSX DOES ACTUAL PRINTING OF DATASET
         SPACE 2
         L     7,DSORGADR     LOAD ADDR OF DSORG
         LH    7,0(7)         LOAD DSORG PARM
         CH    7,=X'4100'     IS DSORG=PSU
         BE    CONT10         YES
         CH    7,=X'4000'     IS DSORG=PS
         BE    CONT10         YES
         CH    7,=X'0200'     IS DSORG=PO
         BE    PDSDS          YES
         CH    7,=X'0300'     IS DSORG=POU
         BE    PDSDS          YES
*        IF FELL THRU ABOVE TESTS, CANNOT PRINT THIS TYPE DATASET
         B     ERRDSORG
         SPACE 2
PDSDS    TM    FLAGS,X'10'    WAS A MEMBER OF A PDS SPECIFIED?
         BO    CONT10         YES, ASSUME SEQDS  (PDS BIT NOT TRNED ON)
         OI    FLAGS,X'20'    TURN ON PDS INDICATOR BIT.
CONT10   EQU   *
         SPACE 2
*        NOTE: CPARMS HAS ROOM TO STORE 18 ADDRESSES
         CALL  PRINTDSX,(DDNAME1,DDNAME2,IOPL,DSNAME,FLAGS,ROUTELOC,   X
               MEMBER,LINESIZE,LINECNT,START,COUNT,MEMPTR,RANGES,      X
               MEMCOUNT,VOLUME,SRCHID,SRCHLNG,SRCHLOC),                X
               MF=(E,CPARMS)
         SPACE 2
* NOTE: NEXT INSTRUCTION DESTROYS ADDRESABILITY TO DSECT1
END      L     13,SAVEAREA+4  POINT TO OLD SAVEAREA
         LR    8,15           SAVE RC (FREEMAIN CHANGES)
         FREEMAIN R,SP=SP1    FREE ALL
         LR    15,8
         RETURN (14,12),RC=(15)
*
         EJECT
*        ERROR MESSAGES
         SPACE 1
ERRPARSE MVC   PUTTEXT,ERRMSG0
         B     TPUTIT
ERRVOL   MVC   PUTTEXT,ERRMSG3
         B     TPUTIT
ERRDSORG MVC   PUTTEXT,ERRMSG1  DSORG IS NOT PS/PSU/PO/POU
         B     TPUTIT
ERRDYN1  MVC   PUTTEXT,ERRMSG4
         B     TPUTIT
ERRDYN2  MVC   PUTTEXT,ERRMSG5
         USING S99RB,4 WAS DROPPED BUT IS STILL VALID ADDRESS.
*BELOW WILL GIVE EXACT RETURN CODE FROM DYNALLOC
         LH    7,S99ERROR LOAD R7 WITH ANY POSS. ERROR CODE
         CH    7,=X'1708' LOCATE ERROR
         BNE   CONTE1
         MVC   PUTTEXT,ERRMSG6
         B     TPUTIT
CONTE1   CH    7,=X'0210' DATASET ALLOCTED ELSEWHERE
         BNE   CONTE2
         MVC   PUTTEXT,ERRMSG7
         B     TPUTIT
CONTE2   CH    7,=X'0218' SPECIFIED VOLUME NOT MOUNTED
         BNE   CONTE3
         MVC   PUTTEXT,ERRMSG8
         B     TPUTIT
CONTE3   CH    7,=X'021C' UNIT NAME SPEC IS UNDEFINED
         BNE   CONTE4
         MVC   PUTTEXT,ERRMSG9
         B     TPUTIT
CONTE4   CH    7,=X'022C' VOL MOUNTED ON INELIGIBLE DEV
         BNE   CONTE5
         MVC   PUTTEXT,ERRMSG10
         B     TPUTIT
CONTE5   CH    7,=X'023C' REQUIRED CATALOG NOT MOUNTED
         BNE   CONTE6
         MVC   PUTTEXT,ERRMSG11
         B     TPUTIT
CONTE6   CH    7,=X'0220' REQUESTED VOLUME NOT AVAILABLE
         BNE   CONTE7
         MVC   PUTTEXT,ERRMSG12
         B     TPUTIT
CONTE7   CH    7,=X'6708' OBTAIN ERROR - DATASET NOT ON VOLUME
         BNE   CONTE8
         MVC   PUTTEXT,ERRMSG13
         TM    FLAGS3,X'04'  WAS VOL & UNIT EXPLICITELY SPEC ?
         BZ    TPUTIT        NO
         MVC   PUTTEXT,ERRMSG14 OTHERWISE CHANGE MESSAGE
         B     TPUTIT
CONTE8   EQU   *
         SPACE 2
TPUTIT   PUTLINE MF=(E,IOPL)
         SPACE 2
         LA    15,12          SET RC
         B     END
         EJECT
*        STORAGE AREAS
ERRMSG0  DC    CL70'ERROR IN SPECIFICATION OF COMMAND "PRINTDS"'
ERRMSG1  DC    CL70'ERROR - ONLY PS/PSU/PO/POU DSORG ALLOWED'
ERRMSG3  DC    CL70'ERROR - MUST SPECIFY UNIT IF VOLUME SPECIFIED'
ERRMSG4  DC    CL70'ERROR WITH DYNAMIC ALLOCATION OF SYSOUT DATASET'
ERRMSG5  DC    CL70'ERROR WITH DYNAMIC ALLOCATION OF INPUT DATASET'
ERRMSG6  DC    CL70'INPUT DATASET NOT IN CATALOG - REQUEST CANCELLED'
ERRMSG7  DC    CL70'DATASET ALLOCATED ELSEWHERE - REQUEST CANCELLED'
ERRMSG8  DC    CL70'VOLUME NOT MOUNTED - REQUEST CANCELLED'
ERRMSG9  DC    CL70'UNIT NAME SPECIFIED IS UNDEFINED - REQUEST CANC'
ERRMSG10 DC    CL70'UNITNAME IS INVALID FOR MOUNTED VOLUME     (022C)'
ERRMSG11 DC    CL70'REQUIRED CATALOG NOT MOUNTED - REQUEST CANCELED'
ERRMSG12 DC    CL70'REQUESTED VOLUME NOT AVAILABLE - REQUEST CANCELD'
ERRMSG13 DC    CL70'DATASET NOT ON VOLUME AS SPECIFIED IN CATALOG'
ERRMSG14 DC    CL70'DATASET NOT ON VOLUME AND UNIT SPECIFIED'
HIGHFF   DC    8XL1'FF'
LASTENTB DC    7XL1'FF',XL1'FE'
         SPACE 2
         LTORG
         EJECT
* DEFINE CONSTANTS THAT MUST BE INIT.
         SPACE 1
PUTMSG2  DC    H'74' LENGTH OF OUTPUT LINE FOR PUTLINE
         DC    H'0'  RESERVED
         SPACE 3
*   PUTLINE PARAMETER LIST
         SPACE 1
PUTLIST2 PUTLINE OUTPUT=(,TERM,SINGLE,DATA),                           X
               TERMPUT=(EDIT,WAIT,NOHOLD,BREAKIN),MF=L
PUTLISTL EQU   *-PUTLIST2
         EJECT
DSECT1   DSECT
         SPACE 1
*   DSECT FOR REENTERABILITY
         SPACE 2
SAVEAREA DS    18F
         SPACE 2
* FLAGS + FLAGS2 + FLAGS3 + FLAGS4   MUST BE IN FOLLOWING ORDER.
*        NOTE: MANY OF THESE BITS ARE USED BY PRINTDSX ONLY.
         SPACE 1
FLAGS    DS    X  BIT 1000 0000 - NEW PAGE
*                     0100 0000 - RESERVED
*                     0010 0000 - PDS
*                     0001 0000 - MEMBER SPECIFIED
*                     0000 1000 - "F" RECFM
*                     0000 0100 - BUFFER SWITCH 0=BUF1, 1=BUF2
*                     0000 0010 - PAGE INDEX
*                     0000 0001 - NOMESSAGES
FLAGS2   DS    X  BIT 1000 0000 - ABEND EXIT WAS TAKEN
*                     0100 0000 - COUNT OPTION SPEC
*                     0010 0000 - START   "     "
*                     0001 0000 - RANGE   "     "
*                     0000 1000 - SELECT  "     "
*                     0000 0100 - LIST    "     "
*                     0000 0010 - START OPTION SWITCHED OFF INDICATOR
*                     0000 0001 - FCB, UCS, OR FORMS SPECIFIED
FLAGS3   DS    X  BIT 1000 0000 - PDS DCB OPEN
*                     0100 0000 - SEQ DCB OPEN
*                     0010 0000 - SYSOUT DCB OPEN
*                     0001 0000 - SEARCH OPTION SPEC
*                     0000 1000 - SEARCH OPTION WITH LOC SPECIFIED
*                     0000 0100 - VOLUME & UNIT SUPPLIED
*                     0000 0010 - PRINT MEMBER COMM PRIOR TO NEXT LINE
*                     0000 0001 - 1ST LINE OF WRAPAROUND PRINTED
FLAGS4   DS    X  BIT 1000 0000 - ASA CHAR ON INPUT DATASET
*                     0100 0000 - NOHEADING
*                     0010 0000 - HEAD/NOHEAD EXPLICITELY DEF.
*                     0001 0000 - INDICATE NEW PAGE WITH NEXT LINE
*                     0000 1000 - RESERVED
*                     0000 0100 -   "
*                     0000 0010 -   "
*                     0000 0001 -   "
         SPACE 2
ECBPPL   DS    F '0'
ECBPUT   DS    F '0'
MEMCOUNT DS    F '0'     IF SELECT OPTION SPECIFIED.
MEMLNGTH DS    H '0'     SET DEFAULT TO USE IF NOT SUPPLIED
LINESIZE DS    H '132'=DEFAULT
LINECNT  DS    H '60' =DEFAULT
IOPL     DS    A          UPT=      FOR
         DS    A          ECT=       PUTLINE
         DS    A (ECBPUT)  ECB=
         DS    A (PUTLIST) PARM=
         SPACE 1
* FOLLOWING 75 CHARS MUST BE IN THIS ORDER SINCE MVC USED TO INIT.
DDNAME1  DS    CL8 ' '        8 BYTES
DDNAME2  DS    CL8 ' '       16   "
DSNAME   DS    CL44 ' '      60   "
MEMBER   DS    CL8 ' '       68   "
ROUTELOC DS    CL7 ' '       75   "
         SPACE 1
CALLFLD  DS    CL8
PUTMSG   DS    H     LENGTH OF OUTPUT LINE FOR PUTLINE
         DS    H
PUTTEXT  DS    CL70,CL50  ALLOW 50 EXTRA BYTES IF SYNAD USES THIS AREA
TABADDR  DS    V
         DS    0D   ALIGN
WORKP    DS    PL8
WORKZ    DS    ZL3
WORKZ2   DS    ZL7
COUNT    DS    F        FOR "COUNT" OPTION
START    DS    F        FOR "START" OPTION
RANGES   DS    2CL8     FOR "RANGE" OPTION
MEMPTR   DS    A        FOR "SELECT" OPTION
ANSADDR  DS    A        PARSE WILL RETURN ADDR OF PDL HERE
CPPLADDR DS    A        ADDR OF CPPL AS GIVEN TO CP IN R1
DSORGADR DS    A
DDNADDR1 DS    A
DDNADDR2 DS    A
LNGADDR1 DS    A
LNGADDR2 DS    A
DSNLNGTH DS    H
         DS    0D
PPLAREA  DS    CL28    AREA FOR PPL
CPARMS   DS    18F     NUMBER OF PARMS = 18 FOR CALL TO PRINTDSX
PUTLIST  DS    0F,(PUTLISTL)CL1 FOR PUTLIST - LIST FORM
VOLUME   DS    CL6
UNIT     DS    CL6
VOLUMEL  DS    F
UNITL    DS    F
SRCHLNG  DS    F
SRCHLOC  DS    F
SRCHID   DS    CL256
         SPACE 2
DLENGTH  EQU   *-DSECT1
         EJECT
PRINTDS  CSECT
*  SETUP DSECT - "IKJPARMD"  AND CSECT -"PARMTAB" FOR PDE'S
         SPACE 2
         PRINT NOGEN
PARMTAB  IKJPARM
         SPACE 2
DSNPDE   IKJPOSIT DSNAME,PROMPT='DATA SET NAME',USID
         SPACE 2
COPKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'COPIES',SUBFLD=COPSUB
         SPACE 2
LINKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'LINESIZE',SUBFLD=LINSUB
         SPACE 2
LCCKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'LINECOUNT',SUBFLD=LCCSUB
         SPACE 2
FCBKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'FCB',SUBFLD=FCBSUB
         SPACE 2
CHAKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'CHARS',SUBFLD=CHASUB
         SPACE 2
DESKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'DEST',SUBFLD=DESSUB,ALIAS='ROUTE'
         SPACE 2
CLAKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'CLASS',SUBFLD=CLASUB,ALIAS='SYSOUT'
         SPACE 2
FUNKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'FUNC',SUBFLD=FUNSUB
         SPACE 2
NOPKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'NOPAGE'
         SPACE 1
         IKJNAME 'PAGE'
         SPACE 2
NOHKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'NOHEADING'
         SPACE 1
         IKJNAME 'HEADING'
         SPACE 2
NOIKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'NOINDEX'
         SPACE 1
         IKJNAME 'INDEX'
         SPACE 2
NOMKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'NOMESSAGES',ALIAS='NOMSG'
         SPACE 2
TERKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'LIST'
         SPACE 1
         IKJNAME 'NOLIST'
         SPACE 2
HOLKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'HOLD'
         SPACE 1
         IKJNAME 'NOHOLD'
         SPACE 2
RANKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'RANGE',SUBFLD=RANSUB
         SPACE 2
SELKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'SELECT',SUBFLD=SELSUB
         SPACE 2
COUKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'COUNT',SUBFLD=COUSUB
         SPACE 2
STAKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'START',SUBFLD=STASUB
         SPACE 2
FORKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'FORMS',SUBFLD=FORSUB
         SPACE 2
VOLKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'VOLUME',SUBFLD=VOLSUB
         SPACE 2
UNIKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'UNIT',SUBFLD=UNISUB
         SPACE 2
SEAKEYW  IKJKEYWD
         SPACE 1
         IKJNAME 'SEARCH',SUBFLD=SEASUB
         EJECT
COPSUB   IKJSUBF
         SPACE 1
COPNUM   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               PROMPT='COPIES',MAXLNTH=3
         SPACE 2
LINSUB   IKJSUBF
         SPACE 1
LINNUM   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               PROMPT='LINESIZE',MAXLNTH=3
         SPACE 2
LCCSUB   IKJSUBF
         SPACE 1
LCCNUM   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               PROMPT='LINECOUNT',MAXLNTH=5
         SPACE 2
FCBSUB   IKJSUBF
         SPACE 1
FCBNUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='FCB',MAXLNTH=4
         SPACE 2
CHASUB   IKJSUBF
         SPACE 1
CHANUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='CHARS',MAXLNTH=4
         SPACE 2
DESSUB   IKJSUBF
         SPACE 1
DESNUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='DEST',MAXLNTH=7
         SPACE 2
CLASUB   IKJSUBF
         SPACE 1
CLANUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,                          X
               PROMPT='CLASS',MAXLNTH=1
         SPACE 2
FUNSUB   IKJSUBF
         SPACE 1
FUNNUM   IKJIDENT 'CHARACTER',FIRST=ALPHA,                             X
               PROMPT='FUNC',MAXLNTH=1
         SPACE 2
RANSUB   IKJSUBF
         SPACE 1
*        RANGE OPTION SPECIFIED ON IKJIDENT
RANNUM   IKJIDENT 'CHARACTER',FIRST=ALPHA,OTHER=ALPHANUM,RANGE,        X
               PROMPT='RANGE',MAXLNTH=8
         SPACE 2
SELSUB   IKJSUBF
         SPACE 1
*        LIST OPTION SPECIFIED ON IKJIDENT
SELNUM   IKJIDENT 'CHARACTER',FIRST=ALPHA,OTHER=ALPHANUM,LIST,         X
               PROMPT='MEMBER',MAXLNTH=8
         SPACE 2
COUSUB   IKJSUBF
         SPACE 1
COUNUM   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               PROMPT='COUNT',MAXLNTH=7
         SPACE 2
STASUB   IKJSUBF
         SPACE 1
STANUM   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               PROMPT='START',MAXLNTH=7
         SPACE 2
FORSUB   IKJSUBF
         SPACE 1
*        FORMS OPTION SPECIFIED ON IKJIDENT
FORNUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='FORMS',MAXLNTH=4
         SPACE 2
VOLSUB   IKJSUBF
         SPACE 1
*        VOLUME OPTION SPECIFIED ON IKJIDENT
VOLNUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='VOLUME',MAXLNTH=6
         SPACE 2
UNISUB   IKJSUBF
         SPACE 1
UNINUM   IKJIDENT 'CHARACTER',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='UNIT',MAXLNTH=6
         SPACE 2
SEASUB   IKJSUBF
         SPACE 1
*        SEARCH OPTION SPECIFIED
SEANUM   IKJPOSIT QSTRING,PROMPT='SEARCH ARGUMENT'
         SPACE 1
SEANUM2  IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                X
               MAXLNTH=5
         SPACE 3
         IKJENDP
         PRINT GEN
*
         EJECT
         IKJCPPL
         SPACE 5
         IKJPPL
         EJECT
         IEFZB4D0
RBLEN    EQU   (S99RBEND-S99RB)
         EJECT
         IEFZB4D2
         END   PRINTDS
