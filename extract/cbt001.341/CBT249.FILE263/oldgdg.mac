*          DATA SET CBT919     AT LEVEL 001 AS OF 11/01/78
* PROGRAM GDGCHNGE VERSION 001 AS OF 10/05/78
         PRINT NOGEN
         TITLE 'GENERATION DATA SET INDEX CHANGE UTILITY'
GDGCHNGE START 0
         SPACE 2
* THIS UTILITY WILL READ A GDG INDEX STRUCTURE AND CHANGE THE NUMBER
* OF ENTRIES DEFINED BY UNCATALOGING ALL ENTRIES UNDER THE STRUCTURE,
* DELETING THE INDEX STRUCTURE, REBUILDING THE INDEX STRUCTURE, AND
* RECATALOGING THE NECESSARY NUMBER OF ENTRIES UNDER THE REBUILT
* INDEX.  IF THE NEW INDEX CONTAINS LESS ENTRIES THAN THE PREVIOUS
* INDEX AND THERE ARE GENERATIONS LEFT OVER AFTER THE RE-CATALOGING,
* THE REMAINING GENERATIONS ARE SCRATCHED IF THEY RESIDE ON A DASD
* DEVICE.
*
* THIS UTILITY WILL ALSO LIST THE GDG INDEX STRUCTURE, THE ENTRIES
* CATALOGUED UNDER THE INDEX, OR WITH THE PARM=LISTONLY - LIST A
* SERIES OF INDICIES ON A SINGLE PAGE.
         SPACE 2
* FORMAT OF INPUT PARAMETER CARD STARTING IN COL 1.
         SPACE
*         GDG-INDEX-DSN,ENTRIES=NNN(,DELETE)(,EMPTY)
*              NNN = 1 - 255
*
*   OR
*
*         GDG-INDEX-DSN,LIST
*
*   OR
*
*         GDG-INDEX-DSN,LISTENTRIES
*
*   OR
*
*         GDG-INDEX-DSN        --- WITH PARM=LISTONLY ---
         SPACE 2
*  RESTRICTIONS:  THIS UTILITY WILL ONLY PROCESS O.S. CVOL GDG'S
         SPACE 2
R0       EQU   0    *
R1       EQU   1    *
R2       EQU   2    * LINK FOR PRINT ROUTINE
R3       EQU   3    * BASE REGISTER
R4       EQU   4    * POINTER INTO DSN TABLE
R5       EQU   5    * WORK
R6       EQU   6    * MVCL WORK
R7       EQU   7    * MVCL WORK
R8       EQU   8    * WORK * COUNTER
R9       EQU   9    * WORK * POINTER INTO CATALOG WORK AREA 3
*                   * POINTER INTO DSN
R10      EQU   10   * WORK * POINTER INTO CATALOG WORK AREA 4
R11      EQU   11   * WORK
R12      EQU   12   * WORK * POINTER INTO CATALOG WORK AREAS 1 2
R13      EQU   13   * SAVE AREA POINTER * SECOND BASE REGISTER
R14      EQU   14   * LINK * WORK
R15      EQU   15   * RETURN * WORK
         SPACE 2
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING GDGCHNGE,R3
         LA    R12,SAVEA
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         USING SAVEA,R13                * * NOTE USING R13 AS A BASE
*                                       * * REGISTER FROM REGISTER
*                                       * * SAVE AREA ............
         L     R1,0(R1)                 PICK UP ADDRESS OF PARM
         CLC   2(8,R1),=C'LISTONLY'     SEE IF LISTONLY IS REQUESTED
         BNE   OPEN                     ... BRANCH IF NOT
         MVI   LISTONLY,C'L'            FLAG LISTONLY OPTION
OPEN     OPEN  (CARD,,PRT,(OUTPUT))
         EJECT
* READ AND INTERPRET INPUT PARAMETER CARD
         SPACE
READ     MVI   CAMLSTNM,C' '            CLEAR ALL WORK AREAS
         MVC   CAMLSTNM+1(43),CAMLSTNM
         MVI   GDGNM,C' '
         MVC   GDGNM+1(7),GDGNM
         MVI   DSN,C' '
         MVC   DSN+1(43),DSN
         L     R4,=A(DSNTABLE)
         LA    R6,1(R4)
         MVI   0(R4),X'00'
         L     R7,=F'131325'
         SR    R5,R5
         MVCL  R6,R4                    CLEAR DSN TABLE TO X00
         MVI   CAMLST7+2,X'00'          CLEAR EMPTY AND DELETE FLAGS
         MVI   ENTFLG,C' '              CLEAR ENTRIES FLAG
         SPACE 2
         GET   CARD,WKI                 READ NEXT REQUEST
         CLI   LISTONLY,C'L'            CHECK FOR LISTONLY OPTION
         BE    C01                      NO HEADINGS FOR LISTONLY
         SPACE
         AP    REQNO,=P'1'              BUILD REPORT HEADINGS
         MVC   WK+100(7),=C'REQUEST'
         MVC   WK+107(4),=X'40202120'
         ED    WK+107(4),REQNO
         MVC   WK(47),HD
         MVI   LN0,C'1'
         BAL   R2,PRINT                 GO PRINT HEADING
         MVI   LN0,C'0'
         BAL   R2,PRINT                 PRINT BLANK LINE
         MVI   LN0,C' '
         SPACE
C01      MVC   WK(8),=C'REQUEST:'       ECHO REQUEST TO PRINTER
         MVC   WK+10(80),WKI
         BAL   R2,PRINT
         CLI   LISTONLY,C'L'            CHECK FOR LISTONLY OPTION
         BE    C02                      DONT PRINT BLANK LINE
         SPACE
         BAL   R2,PRINT                 PRINT BLANK LINE
         SPACE
C02      SR    R8,R8
         LA    R9,WKI                GET START OF GDG INDEX NAME
         SPACE
CA       CLI   0(R9),C','            LOOK FOR END OF GDG INDEX NAME
         BE    CA1
         CLI   0(R9),C' '            LOOK FOR END OF INDEX IF LISTONLY
         BE    CA1
         LA    R9,1(R9)              INCREMENT TO NEXT CHAR OF NAME
         LA    R8,1(R8)              COUNT NUMBER OF CHARS IN NAME
         C     R9,=A(WK+37)   CANT BE FULL 44 CHAR NAME IN GDG INDEX
         BE    N3                    NAME TOO BIG - ERROR
         B     CA
         SPACE
CA1      BCTR  R8,0                   REDUCE LENGTH OF NAME FOR EX
         EX    R8,MOVEDSN             BUILD DSN FOR UNCATALOG/CATALOG
         LR    R12,R9                 SAVE ADDRESS OF DELIMITER
         SR    R8,R8
         SPACE
C1       CLI   0(R12),C'.'            BACK UP ONE LEVEL OF QUALIFIER
         BE    C2
         BCTR  R12,0                  DECREMENT POINTER INTO NAME
         C     R12,=A(WK)             CHECK FOR START OF NAME
         BE    N3                  BAD - MUST HAVE TWO LEVELS AT LEAST
         LA    R8,1(R8)               COUNT THE NUMBER OF CHARS IN
         B     C1                       LOWEST QUALIFIER
         SPACE
C2       BCTR  R8,0                   FIX LENGTH FOR EXECUTE
         BCTR  R8,0
         EX    R8,MOVEGDG             MOVE LOWEST QUALIFIER
         LA    R11,WKI                CALCULATE LENGTH OF HIGHEST
         SR    R12,R11                 LEVELS OF INDEX QUALIFIERS
         BCTR  R12,0                  DECREMENT LENGTH FOR EXECUTE
         EX    R12,MOVENAME           MOVE HIGH QUALIFIERS
         MVC   CAMLSTN2,CAMLSTNM      SAVE NAME IN ANOTHER PLACE
         CLI   LISTONLY,C'L'          CHECK FOR LISTONLY OPTION
         BE    ENDCARD                DONT PARSE FOR LISTONLY
         SPACE
*  PARSE FOR KEYWORD ENTRIES OF THE REQUEST
         MVI   LISTONLY,C' '
         SPACE
         CLC   1(11,R9),=C'LISTENTRIES' CHECK FOR LIST CAT. ENTRIES
         BNE   C20
         MVI   LISTONLY,C'E'          FLAG CAT LIST OPTION
         B     ENDCARD
         SPACE
C20      CLC   1(4,R9),=C'LIST'
         BNE   C2A
         MVI   LISTONLY,C'X'
         B     ENDCARD
         SPACE
*  NON-LIST KEYWORD PARSE
         SPACE
C2A      CLI   1(R9),C' '              LOOK FOR END OF KEYWORDS
         BE    ENDCARD
         CLC   1(8,R9),=C'ENTRIES='
         BE    ENTR
         CLC   1(6,R9),=C'DELETE'
         BE    DELE
         CLC   1(5,R9),=C'EMPTY'
         BE    EMPT
         B     N4                      INVALID PARAMETER ON CARD
         SPACE
DELE     LA    R9,7(R9)                INCREMENT OVER KEYWORD
         OI    CAMLST7+2,X'40'         DELETE FLAG
         B     C2A                     GO PARSE NEXT ENTRY
         SPACE
EMPT     LA    R9,6(R9)                INCREMENT OVER KEYWORD
         OI    CAMLST7+2,X'08'         EMPTY FLAG
         B     C2A                     GO PARSE NEXT ENTRY
         SPACE
ENTR     LA    R9,9(R9)                INCREMENT OVER KEYWORD
         LR    R4,R9                   GET ADDRESS OF NUMBER OF ENTR.
         MVI   ENTFLG,C'X'             FLAG ENTRIES CHANGE
ENTR1    CLI   1(R4),C','              LOOK FOR END DELIMITER
         BE    ENTR2
         CLI   1(R4),C' '              LOOK FOR BLANK AS END
         BE    ENTR2
         LA    R4,1(R4)
         B     ENTR1
         SPACE
ENTR2    SR    R4,R9                  GET LENGTH TO PACK
         EX    R4,PACKENTR            PACK ENTRIES NUMBER
         OI    DW+7,X'0F'
         CP    DW,=P'255'          CANT HAVE MORE THAN 255 SPECIFIED
         BH    N4                     ERROR IF MORE THEN 255
         CVB   R5,DW                  MAKE NUMBER BINARY
         STC   R5,CAMLST7+3        PUT NUMBER OF ENTRIES IN CAMLST
         LA    R9,1(R4,R9)         INCREMENT TO NEXT PARAMETER
         B     C2A                 GO PARSE NEXT ENTRY
         SPACE
PACKENTR PACK  DW(8),0(1,R9)       PACK ENTRIES NUMBER
         EJECT
* READ AND BUILD EXISTING GDG INDEX STRUCTURE THROUGH THE CHAINED
* CATALOG BLOCKS
         SPACE
ENDCARD  CLI   LISTONLY,C' '            SEE IF ANY LIST REQUESTED
         BNE   ENDCARD1                 ...  OK TO PROCESS LIST
         CLI   ENTFLG,C' '              SEE IF ENTRY CHANGE
         BE    N4                       ...  ERROR IF NO CHANGE EITHER
         SPACE
ENDCARD1 LOCATE CAMLST1                 READ HIGHEST INDEX QUALIFIER
         C     R15,=F'12'               RC 12 OK HERE
         BE    C30
         LTR   R15,R15                  ANY OTHER RC IS...
         BNZ   PLOCERR                  LOCATE ERROR
         CLC   CAMLSTA1(2),=X'0001'     MVS RETURN CHECK
         BNE   C30
         SPACE
         MVC   CVOL(6),CAMLSTA1+6       GET CVOL VOLSER FROM MVS
         LOCATE CAMLST1A                TRY FOR NAME IN CVOL CATALOG
         C     R15,=F'12'               RC 12 OK HERE
         BE    C30
         LTR   R15,R15                  ANY OTHER RC IS ...
         BNZ   PLOCERR                  LOCATE ERROR
         SPACE
C30      LA    R12,CAMLSTA1+2           POINT TO FIRST BLOCK ENTRY
         CLI   11(R12),X'03'            COMP FOR I.C.E. BLOCK
         BNE   C3
         LA    R12,18(R12)              BUMP OVER I.C.E. BLOCK
         SPACE
C3       CLC   0(8,R12),GDGNM           LOOK FOR LOWEST LEVEL INDEX
         BE    G1                       NAME
         CLC   0(4,R12),=X'FFFFFFFF'    COMP FOR I.L.E. BLOCK
         BE    N1                       GO TO GET NEXT CHAINED BLOCK
         SR    R11,R11
         IC    R11,11(R12)           LOAD REMAINING LENGTH - HALFWORDS
         SLL   R11,1                 MAKE HALFWORDS INTO BYTES
         LA    R12,12(R11,R12)       BUMP TO NEXT ENTRY IN BLOCK
         B     C3
         SPACE
G1       CLI   11(R12),X'02'        MAKE SURE THIS IS A G.I.P.E. ENTRY
         BNE   N2
         SR    R11,R11
         IC    R11,13(R12)           PICK UP NUMBER OF ENTRIES
         CVD   R11,DW
         CLI   LISTONLY,C' '         SEE IF ONLY LISTING
         BE    G1A                   ...  NO .. MUST BE CHANGE
         MVC   WK(23),=C'GDG INDEX STRUCTURE IS:'
         B     G1B
G1A      MVC   WK(23),=C'ORIGINAL GDG INDEX WAS:'
G1B      MVC   WK+31(4),=X'40202120' EDIT NUMBER OF ENTRIES
         ED    WK+31(4),DW+6
         MVC   WK+24(8),=C'ENTRIES='
         TM    12(R12),X'02'         CHECK FOR DELETE FLAG
         BNO   G2
         MVC   WK+45(6),=C'DELETE'
G2       TM    12(R12),X'01'         CHECK FOR EMPTY FLAG
         BNO   G3
         MVC   WK+38(5),=C'EMPTY'
G3       IC    R11,15(R12)           PICK UP NUMBER OF GENERATIONS
         CVD   R11,DW                CATALOGUED UNDER THIS INDEX
         MVC   WK+67(4),=X'40202120'
         ED    WK+67(4),DW+6
         MVC   WK+58(10),=C'NO. CATLG='
         BAL   R2,PRINT              PRINT OUT THE ORIGINAL INDEX DATA
         BAL   R2,PRINT
         CLI   LISTONLY,C'L'         CHECK FOR LISTONLY PARM OPTION
         BE    READ                  GO READ NEXT REQUEST
         CLI   LISTONLY,C'X'         CHECK FOR ONLY LIST OF INDEX
         BE    GOODCMP1              END PROCESS FOR LIST
         SPACE
*  SETUP FOR INDEX CHANGE
         SPACE
         CLI   15(R12),X'00'         SEE IF EMPTY GDG INDEX
         BE    UNCAT                 GO SETUP FOR DLTX
         MVC   DSNTTR,8(R12)         GET POINTER TO DSN BLOCK
         MVC   CVOL(6),CAMLSTA1+259  MOVE VOLSER OF CVOL CATALOG
         LOCATE CAMLST3              GET FIRST DSN BLOCK
         LTR   R15,R15               CHECK FOR ERROR
         BNZ   LOCERR
         L     R4,=A(DSNTABLE)
         SPACE
C3SETUP  LA    R9,CAMLSTA2+2         POINT TO FIRST BLOCK ENTRY
         CLI   11(R9),X'03'          COMP FOR I.C.E. BLOCK
         BNE   COMPILE
         LA    R9,18(R9)             INCREMENT OVER I.C.E. BLOCK
         SPACE
COMPILE  CLC   0(4,R9),=X'FFFFFFFF'  COMP FOR I.L.E. BLOCK
         BE    ILE                   GO PROCESS LINK BLOCK
         C     R4,=A(DSNTBLND)       SEE IF TOO MANY ENTRIES
         BH    N5                    ... ERROR
         MVC   FWK,1(R9)             *** FIX
         L     R8,FWK                  * GDG
         LCR   R8,R8                   * NAME
         BCTR  R8,0                    * TO
         ST    R8,FWK                  * EBCDIC
         MVC   1(4,R9),FWK           ***
         MVC   0(8,R4),0(R9)         MOVE GDG DSN TO DSNTABLE
         LA    R4,8(R4)              BUMP TO # VOLSERS
         CLI   11(R9),X'01'          COMP FOR V.C.B.P.E.
         BE    VCBPE                 GO PROCESS VOLUME CONTROL BLOCK
         MVC   0(2,R4),12(R9)        MOVE VOL COUNT
         LH    R5,12(R9)             LOAD VOLCOUNT
         LA    R4,2(R4)              BUMP TO FIRST VOL ENTRY
         SR    R8,R8
         C     R5,=F'1'              CHECK FOR ONLY 1 VOLSER
         BNE   OVER1VOL
         LA    R8,1                  FLAG DSCBTTR FIELD
         MVC   12(3,R4),8(R9)        MOVE DSCBTTR
OVER1VOL LA    R9,14(R9)             POINT TO FIRST VOLSER ENTRY
         SPACE
VOLLOOP  MVC   0(12,R4),0(R9)        MOVE VOLSER ENTRY TO DSNTABLE
         LA    R9,12(R9)             POINT TO NEXT VOLSER ENTRY
         LA    R4,12(R4)
         BCT   R5,VOLLOOP
         LTR   R8,R8                 SEE IF DSCBTTR WAS MOVED IN
         BZ    COMPILE
         LA    R4,4(R4)              BUMP OVER DSCBTTR ENTRY
         B     COMPILE
         SPACE
ILE      CLC   8(3,R9),=X'000000'    COMP FOR LINK FIELD 0
         BE    UNCAT                 ALL DONE READING ENTRIES
         MVC   DSNTTR,8(R9)          MOVE LINK FIELD FOR LOCATE
         LOCATE CAMLST3              READ NEXT LEVEL OF NAME
         LTR   R15,R15               CHECK FOR ERROR
         BNZ   LOCERR
         B     C3SETUP               GO PROCESS THIS BLOCK
         SPACE
VCBPE    MVC   DSNTTR,8(R9)          GET TTR FOR VCB
         LOCATE CAMLST4              GET VCB
         LTR   R15,R15               CHECK FOR ERROR
         BNZ   LOCERR
         LA    R10,CAMLSTA3          POINT TO FIRST ENTRY IN VCB
         MVC   0(2,R4),0(R10)        MOVE VOLCT
         LA    R4,2(R4)              BUMP OVER VOLCT
         LA    R10,2(R10)            BUMP OVER VOLCT IN VCB
         SPACE
VCBLOOP  CLC   0(4,R10),=F'0'        COMP FOR END OF VOLS
         BE    VCBEND                ... END OF VOLUMES
         MVC   0(12,R4),0(R10)       SAVE VOLSER AND UNIT TYPE
         LA    R4,12(R4)             BUMP TO NEXT ENTRY IN DSNTABLE
         LA    R10,12(R10)           BUMP TO NEXT ENTRY IN VCB
         C     R4,=A(DSNTBLND)       SEE IF TOO MANY ENTRIES
         BH    N5                    ...  ERROR
         B     VCBLOOP
         SPACE
VCBEND   CLC   CAMLSTA3+244(3),=X'000000'  COMP FOR LINK TO NEXT VCB
         BE    ENDVCBS               NO MORE VCBS
         MVC   DSNTTR,CAMLSTA3+244   GET TTR FOR NEXT VCB
         LOCATE CAMLST4              GET NEXT VCB
         LTR   R15,R15               CHECK FOR ERROR
         BNZ   LOCERR
         LA    R10,CAMLSTA3+2
         B     VCBLOOP
         SPACE
ENDVCBS  LA    R9,14(R9)             POINT TO NEXT ENTRY IN CAMLSTA2
         B     COMPILE
         EJECT
* UNCATALOG EACH GENERATION ENTRY
         SPACE
UNCAT    LA    R9,DSN               POINT TO DSN WE ARE WORKING ON
UNC1     CLI   0(R9),C' '           LOOK FOR END OF NAME
         BE    UNC2
         LA    R9,1(R9)             INCREMENT TO NEXT BYTE
         B     UNC1
         SPACE
UNC2     L     R4,=A(DSNTABLE)      LOAD ADDRESS OF DSN TABLE
         CLI   0(R4),X'00'          CHECK FOR ANY TO UNCATALOG
         BE    DLTX                 BRANCH TO DLTX IF NONE
         MVI   0(R9),C'.'
UNC3     MVC   1(8,R9),0(R4)        MOVE GENERATION NUMBER INTO NAME
         CLI   LISTONLY,C' '        SEE IF LISTENTRIES IS WANTED
         BE    UNCATLG              MUST BE A CHANGE
         MVC   WK(44),DSN           MOVE DSNAME TO LINE FOR PRINT
         B     UNC03A               BRANCH AROUND THE UNCATLG FOR LIST
         SPACE
UNCATLG  CATALOG CAMLST5            UNCATALOG GENERATION
         LTR   R15,R15              CHECK FOR ERROR
         BNZ   CATERR
         MVC   WK(44),DSN           MOVE WHOLE DSN
         MVC   WK+46(16),=C'* UNCATALOGUED *'
UNC03A   MVC   WK+70(6),14(R4)      MOVE VOLSER
         CLC   8(2,R4),=H'1'        CHECK FOR ONLY 1 VOLSER
         BNE   UNC3A                ...  MORE THAN 1 VOLSER
         MVC   WK+77(27),=C'- ONLY VOLUME SERIAL NUMBER'
         B     UNC3B
UNC3A    MVC   WK+77(28),=C'- FIRST VOLUME SERIAL NUMBER'
UNC3B    BAL   R2,PRINT
         LH    R11,8(R4)            LOAD VOLCT
         SR    R10,R10
         M     R10,=F'12'           X BY VOL ENTRY LENGTH
         CLC   8(2,R4),=H'1'        LOOK FOR DSNBTTR ENTRY
         BNE   UNC4
         LA    R4,4(R4)             BUMP OVER DSNBTTR ENTRY
UNC4     LA    R4,10(R11,R4)        INDEX TO NEXT DSN
         CLI   0(R4),X'00'          LOOK FOR END OF GDGS
         BNE   UNC3
         CLI   LISTONLY,C' '        SEE IF LISTENTRIES WAS SPECIFIED
         BNE   GOODCMP1             ALL DONE IF SO
         SPACE
* DELETE THE EXISTING GDG INDEX STRUCTURE
         SPACE
         MVC   0(9,R9),=C'         '  BLANK THE GENERATION NUMBER
DLTX     INDEX CAMLST6              DELETE INDEX STRUCTURE
         LTR   R15,R15              CHECK FOR ERROR
         BNZ   CATERR
         SPACE
* BUILD NEW GDG INDEX STRUCTURE WITH PARAMETERS SPECIFIED
         SPACE
BLDG     INDEX CAMLST7              REBUILD INDEX STRUCTURE
         LTR   R15,R15              CHECK FOR ERROR
         BNZ   CATERR
         MVC   WK(24),=C'NEW GENERATION INDEX IS:'
         MVI   LN0,C'0'
         SR    R11,R11
         IC    R11,CAMLST7+3        PICK UP NUMBER OF ENTRIES
         CVD   R11,DW
         MVC   WK+31(4),=X'40202120'
         ED    WK+31(4),DW+6
         MVC   WK+24(8),=C'ENTRIES='
         TM    CAMLST7+2,X'40'      CHECK FOR DELETE FLAG
         BNO   BLDG1
         MVC   WK+45(6),=C'DELETE'
BLDG1    TM    CAMLST7+2,X'08'      CHECK FOR EMPTY FLAG
         BNO   BLDG2
         MVC   WK+38(5),=C'EMPTY'
BLDG2    BAL   R2,PRINT
         MVI   LN0,C' '
         BAL   R2,PRINT
         EJECT
* RE-CATALOG EACH GENERATION ENTRY UNTIL EITHER ALL ENTRIES ARE
* CATALOGUED OR THE NEW NUMBER OF ENTRIES IS SATISFIED
         SPACE
         L     R4,=A(DSNTABLE)      GET ADDR OF WORK AREA
         CLI   0(R4),X'00'          CHECK TO SEE IF ANY TO RECATALOG
         BE    GOODCMP1             END NOW IF NONE
         SR    R5,R5
         IC    R5,CAMLST7+3         GET NUMBER OF GENERATIONS TO
         LA    R9,DSN               RECATALOG
CAT1     CLI   0(R9),C' '           FIND END OF DSNAME FOR RECATALOG
         BE    CAT2
         LA    R9,1(R9)             INCREMENT TO NEXT BYTE IN NAME
         B     CAT1
         SPACE
CAT2     MVI   0(R9),C'.'           MOVE IN PERIOD
         MVC   1(8,R9),0(R4)        MOVE IN GENERATION NUMBER
         LA    R11,8(R4)            POINT TO VOLLIST
         ST    R11,CAMLST8+12       STORE ADDRESS OF VOLLIST
         MVI   CAMLST8+1,X'00'      CLEAR DSCBTTR FLAG
         CLC   8(2,R4),=H'1'        CHECK FOR ONLY 1 VOLUME
         BNE   CAT3                 ... NO DSCBTTR FOR MORE THAN 1
         CLI   12(R11),X'20'        LOOK FOR DASD DEVICE TYPE
         BNE   CAT3                 ... NO DSCBTTR FOR NON-DASD
         CLC   22(3,R11),=X'000000' LOOK FOR DSCBTTR
         BE    CAT3                 ... NO DSCBTTR
         MVC   DSCBTTR(3),22(R11)   MOVE DSCBTTR INTO CAMLST
         MVI   CAMLST8+1,X'02'      FLAG PRESENCE OF DSCBTTR
         SPACE
CAT3     CATALOG CAMLST8            RECATALOG THIS ENTRY
         LTR   R15,R15              CHECK FOR ERROR
         BNZ   CATERR
         MVC   WK(44),DSN           MOVE REAL DSN
         MVC   WK+46(17),=C'* RE-CATALOGUED *'
         MVC   WK+70(6),6(R11)      MOVE VOLSER
         CLC   8(2,R4),=H'1'        LOOK FOR ONLY 1 VOLSER
         BNE   CAT3A
         MVC   WK+77(27),=C'- ONLY VOLUME SERIAL NUMBER'
         B     CAT3B
CAT3A    MVC   WK+77(28),=C'- FIRST VOLUME SERIAL NUMBER'
CAT3B    BAL   R2,PRINT
         LH    R11,8(R4)            LOAD NUMBER OF VOL ENTRIES
         SR    R10,R10
         M     R10,=F'12'           X BY VOL ENTRY SIZE
         LA    R11,10(R11)          ADD OVERHEAD SIZE
         CLC   8(2,R4),=H'1'        CHECK FOR ONLY 1 VOLUME
         BNE   CAT4                 ... MORE THAN 1 HAS NO DSCBTTR
         LA    R11,4(R11)           ADD IN SIZE OF DSCBTTR ENTRY
CAT4     AR    R4,R11               INCREMENT TO NEXT GENERATION
         CLI   0(R4),X'00'    SEE IF LIST OF GENERATIONS IS EXHAUSTED
         BE    GOODCMP1
         BCT   R5,CAT2              GO BACK AND RECATALOG SOME MORE
         SPACE
         CLI   0(R4),X'00'          SEE IF ANY DSNS TO SCRATCH
         BE    GOODCMP1             ...  ALL DONE .. NONE TO SCRATCH
         EJECT
* SCRATCH REMAINING GENERATION ENTRIES
         SPACE
SCR1     CLI   12(R4),X'20'         LOOK FOR GENERATION ON DASD DEVICE
         BE    SCR4                 SCRATCH ONLY DASD ENTRIES
SCR2     LH    R11,8(R4)            LOAD NUMBER OF VOL ENTRIES
         SR    R10,R10
         M     R10,=F'12'           X BY VOLENTRY SIZE
         LA    R11,10(R11)          ADD IN OVERHEAD SIZE
         CLC   8(2,R4),=H'1'      LOOK FOR INDICATION OF DSCBTTR ENTRY
         BNE   SCR3                 NO DSCBTTR ENTRY
         LA    R11,4(R11)           ADD IN SIZE OF DSCBTTR ENTRY
SCR3     AR    R4,R11
         CLI   0(R4),X'00'          LOOK FOR END OF DSNS
         BE    GOODCMP1     ALL FINISHED WITH THIS GDG INDEX STRUCTURE
         B     SCR1              GO BACK TO SEE IF THIS ONE IS ON DASD
         SPACE
SCR4     MVC   1(8,R9),0(R4)         MOVE IN GENERATION NUMBER
         LA    R11,8(R4)             POINT TO VOLLIST
         ST    R11,CAMLST9+12     STORE ADDRESS OF VOLLIST IN CAMLST9
         SR    R0,R0           FLAG THAT NO UCB IS AVAILABLE FOR MOUNT
         SCRATCH CAMLST9             SCRATCH DATA SET
         LTR   R15,R15               CHECK FOR ERROR DURING SCRATCH
         BNZ   SCRERR
         MVC   WK(44),DSN            MOVE THE DSN
         L     R14,=A(SCRMSGS)       POINT TO THE SCRACHED MESSAGE
         MVC   WK+46(25),0(R14)      MOVE MESSAGE TO PRINT LINE
         MVC   WK+72(6),6(R11)       MOVE VOLSER
         BAL   R2,PRINT              GO PRINT MESSAGE AND DSN
         B     SCR2
         SPACE
SCRERR   LH    R10,0(R11)            LOAD NUMBER OF VOL ENTRIES
         LA    R11,2(R11)   BUMP OVER NUMBER - POINT TO FIRST VOL ENTRY
SCRERR1  SR    R12,R12
         IC    R12,11(R11)           PICK UP ERROR CODE
         MH    R12,=H'48'            X BY MSG LENGTH
         L     R14,=A(SCRMSGS)       POINT TO SCRATCH MESSAGES
         AR    R12,R14               POINT TO ERROR MESSAGE
         MVC   WK(44),DSN            MOVE DSNAME
         MVC   WK+46(48),0(R12)      MOVE ERROR MESSAGE
         MVC   WK+95(6),4(R11)       MOVE VOLSER
         BAL   R2,PRINT              PRINT ERROR MESSAGE
         OI    RETURN+7,X'08'        PUT IN BAD RETURN CODE
         LA    R11,12(R11)           POINT TO NEXT VOL ENTRY
         BCT   R10,SCRERR1           BACK FOR NUMBER OF VOL ENTRIES
         B     SCR2                  ALL DONE WITH THIS ERROR
         SPACE 2
LOCERR   L     R14,=A(LOCERMSG)      POINT TO LOCATE ERROR MESSAGES
         SPACE
LOCERR1  SRL   R15,2                 GET ERROR NUMBER RELATAVE
         BCTR  R15,0                   TO ZERO
         MH    R15,=H'48'            MULTIPLY BY MESSAGE LENGTH
         AR    R15,R14               POINT TO ERROR MESSAGE
LOCERR2  MVC   WK(44),DSN            MOVE DSNAME
         MVC   WK+46(48),0(R15)      MOVE ERROR MESSAGE
         BAL   R2,PRINT              GO PRINT ERROR
         OI    RETURN+7,X'16'        PUT IN BAD RETURN CODE
         B     GOODCMP2
         SPACE
CATERR   L     R14,=A(CATERMSG)      POINT TO CATALOG ERROR MESSAGES
         B     LOCERR1               GO PROCESS ERROR
         SPACE
PLOCERR  C     R15,=F'4'             SEE IF RETURN CODE IS 4
         BNE   LOCERR                IF SO, ISSUE REGULAR LOCERR MSG
         L     R15,=A(CVOLERMS)      GET ADDRESS OF CVOL ERR MSG
         B     LOCERR2
         SPACE 2
         EJECT
         SPACE
N1       CLC   8(3,R12),=X'000000'  SEE IF CHAINED TO ANOTHER BLOCK
         BE    N2                   ...  NO CHAIN FIELD
         MVC   TTR(3),8(R12)        GET THE TTR FROM THIS BLOCK
         MVC   CVOL(6),CAMLSTA1+259   MOVE THE VOLSER OF THE NEXT BLOCK
         LOCATE CAMLST2             READ NEXT BLOCK
         LTR   R15,R15              CHECK FOR ERROR
         BNZ   LOCERR
         LA    R12,CAMLSTA1+2       POINT TO THE FIRST ENTRY IN THE BLK
         B     C3                   GO PROCESS THIS BLOCK
         SPACE 2
N2       MVC   WK+45(18),=C'NO GDG INDEX FOUND'
         MVC   WK(44),DSN
         BAL   R2,PRINT
         B     GOODCMP4
         SPACE
N3       MVC   WK+45(16),=C'INVALID GDG NAME'
         MVC   WK(44),DSN
         BAL   R2,PRINT
         B     N4
         SPACE
N4       MVC   WK+45(25),=C'INVALID PARAMETER ON CARD'
         BAL   R2,PRINT
         B     GOODCMP4
         SPACE
N5       MVC   WK(85),OVFLOER MOVE IN TABLE OVERFLOW MSG
         MVI   LN0,C'0'
         BAL   R2,PRINT
         MVI   LN0,C' '
         OI    RETURN+7,X'16'
         B     GOODCMP2
         SPACE 2
PRINT    L     R1,=A(PRT)
         PUT   (R1),LN0
         MVI   WK,C' '
         MVC   WK+1(131),WK
         BR    R2
         SPACE
MOVENAME MVC   CAMLSTNM(1),WKI
MOVEGDG  MVC   GDGNM(1),1(R12)
VOLMOVE  MVC   0(1,R11),8(R4)
MOVEDSN  MVC   DSN(1),WKI
         SPACE
GOODCMP1 MVC   WK(30),=C'REQUEST SUCCESSFULLY COMPLETED'
         B     GOODCMP3
         SPACE
GOODCMP2 MVC   WK(32),=C'REQUEST UNSUCCESSFULLY COMPLETED'
GOODCMP3 MVI   LN0,C'0'
         BAL   R2,PRINT
         MVI   LN0,C' '
         B     READ
         SPACE
GOODCMP4 OI    RETURN+7,X'04'
         CLI   LISTONLY,C'L'      CHECK FOR LISTONLY PARM OPTION
         BE    READ
         B     GOODCMP2
         SPACE
END      CLOSE (CARD,,PRT,)
         L     R13,4(R13)
RETURN   RETURN (14,12),RC=0
         EJECT
LISTONLY DC    C' '
ENTFLG   DC    C' '
REQNO    DC    PL2'0'
HD       DC    C'C.S.S. GENERATION DATA SET INDEX CHANGE UTILITY'
OVFLOER  DC    C'INTERNAL TABLE OVERFLOW - TOO MANY GENERATIONS OR '
         DC    C'VOLUMES CATALOGUED UNDER THIS INDEX'
WKI      DS    CL80
VOLTBL   EQU   *  DUMMY NAME FOR CAMLST GENERATION
         SPACE
LN0      DC     C'0'
WK       DC     CL132' '
SAVEA    DS     18F
DW       DS     D
FWK      DS     F
GDGNM    DS     CL8
CAMLSTNM DS     CL44
CAMLSTN2 DS     CL44
DSN      DS     CL44
         SPACE
CAMLST1  CAMLST NAME,CAMLSTNM,,CAMLSTA1
CAMLST1A CAMLST NAME,CAMLSTN2,CVOL,CAMLSTA1
CAMLST2  CAMLST BLOCK,TTR,CVOL,CAMLSTA1
CAMLST3  CAMLST BLOCK,DSNTTR,CVOL,CAMLSTA2
CAMLST4  CAMLST BLOCK,DSNTTR,CVOL,CAMLSTA3
CAMLST5  CAMLST UNCAT,DSN,CVOL
CAMLST6  CAMLST DLTX,DSN,CVOL
CAMLST7  CAMLST BLDG,DSN,CVOL,,DELETE,EMPTY,1
CAMLST8  CAMLST CAT,DSN,CVOL,VOLTBL,DSCBTTR=DSCBTTR
CAMLST9  CAMLST SCRATCH,DSN,,VOLTBL,,OVRD
         SPACE
DSCBTTR  DS    CL3
TTR      DS    CL3
DSNTTR   DS    CL3
CVOL     DS    CL6
         SPACE
         DS    0D
CAMLSTA1 DS    CL265
         DS    0D
CAMLSTA2 DS    CL265
         DS    0D
CAMLSTA3 DS    CL265
         SPACE 2
         LTORG
         PRINT ON,NOGEN
CARD     DCB   DDNAME=CARD,DSORG=PS,MACRF=GM,EODAD=END
PRT      DCB   DDNAME=PRT,DSORG=PS,MACRF=PM,RECFM=FA,BLKSIZE=133
         EJECT
* ERROR MESSAGES
         SPACE
SCRMSGS  DC    CL48'* DATA SET SCRATCHED FROM'
         DC    CL48'* DATA SET NOT ON VOLUME * NOT DELETED *'
         DC    CL48'* DATA SET PASSWORD PROTECTED * NOT DELETED *'
         DC    CL48'* DATA SET NOT EXPIRED * NOT DELETED *'
         DC    CL48'* I/O ERROR ON VOLUME * NOT DELETED *'
         DC    CL48'* VOLUME NOT AVAILABLE * NOT DELETED *'
         DC    CL48'* VOLUME NOT MOUNTED * NOT DELETED *'
         SPACE
CATERMSG DC    CL48'* CVOL NOT MOUNTED OR DOES NOT CONTAIN CATLG C4*'
         DC    CL48'* LOCATE ERROR C8 *'
         DC    CL48'* PROGRAM ERROR C12 *'
         DC    CL48'* INDEX DOES NOT EXIST C16 *'
         DC    CL48'* SPACE NOT AVAILABLE ON SPECIFIED VOLUME C20 *'
         DC    CL48'* IMPROPERLY NAMED GDG OR GDG INDEX FULL C24 *'
         DC    CL48'* PERMANENT I/O ERROR ON CATALOG C28 *'
         SPACE
LOCERMSG DC    CL48'* CVOL NOT MOUNTED OR DOES NOT CONTAIN CATLG L4*'
         DC    CL48'* INVALID NAME L8 *'
         DC    CL48'* INVALID NAME L12 *'
         DC    CL48'* DATA SET NOT FOUND L16 *'
         DC    CL48'* SYNTAX ERROR L20 *'
         DC    CL48'* PERMANENT I/O ERROR L24 *'
         DC    CL48'* LOCATE ERROR L28 *'
         DC    CL48'* PROGRAM ERROR L32 *'
         SPACE
CVOLERMS DC    CL48'* INDEX NOT CONNECTED PROPERLY CL4 *'
         EJECT
* FORMAT OF DSNTABLE ENTRIES
         SPACE
*        CL8     GDG GENERATION NUMBER
*        H       NUMBER OF VOL ENTRIES FOLLOWING
*        XL12    VOL ENTRY
*                XL4   DEVICE CODE - SAME AS IN UCB
*                CL6   VOLUME SERIAL NUMBER
*                XL2   VOLUME SEQUENCE NUMBER FOR TAPE
*                      0000 FOR DASD
*        XL4     DSCBTTR - ONLY EXISTS IF NUMBER OF VOL ENTRIES
*                          IS 1
*                XL3   ACTUAL DSCBTTR
*                XL1   FILL
         SPACE
         DS    0F
DSNTABLE DS    2CL65535
DSNTBLND DS    CL256  PAD AREA
         END
