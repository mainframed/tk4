CTLC     TITLE '                        INTERPRET THE CONTROL CARDS'
CTLCARD  CSECT
***********************************************************************
*        CSECT NAME -- CTLCARD                                        *
*        OTHER ENTRY POINTS -- NONE                                   *
*        LANGUAGE -- IBM 370 ASSEMBLER XF                             *
*        ATTRIBUTES -- NOT REUSABLE, NOT REENTRANT                    *
*        SUBROUTINES USED -- NONE                                     *
*        ATTACH LINK OR LOAD -- NONE                                  *
*        OPERATING SYSTEM -- OS/370/MVS REL 03.7E (IPO20)             *
*        DATE WRITTEN -- 26 DECEMBER 1972                             *
*        MVS UPDATE -- 28 FEBRUARY 1978                               *
*        AUTHOR -- P. MICHAEL HENDERSON                               *
*                  AUGUST TREUBIG (MVS VERSION)                       *
*        INSTALLATION -- MIDDLE SOUTH SERVICES                        *
*                        200 WEST BANK EXPRESSWAY                     *
*                        GRETNA, LOUISIANA 70053                      *
***********************************************************************
         EJECT
         PRIME REG=(R11,R12)            INITIALIZE PGM
         STM   R11,R12,BASES            SAVE THE BASE ADDRESSES
         XC    CONDCODE,CONDCODE        CLEAR THE CONDITION CODE FIELD
         L     R10,0(R1)                GET ADDR OF PASSAREA
         ST    R10,LINKLIST             SAVE ADDR OF PASSAREA
         USING PASSAREA,R10
         L     R2,4(R1)                 LOAD ADDR OF WORK03 DCB
         ST    R2,WORK03                STORE THE ADDR
         MVI   OPERATON,X'40'           MOVE A BLANK
         MVC   OPERATON+1(L'OPERATON-1),OPERATON  BLANK THE FIELD
         L     R1,RCDADDR               LOAD ADDR OF CARD PASSED
         LR    R8,R1                    SAVE START ADDRESS
         MVC   PRNTAREA+8(80),0(R1)     MOVE CARD TO PRINT
         LA    R2,1                     PUT A 1 IN R2 FOR INCR
         LA    R6,1                     PUT A ONE IN R6
         LA    R3,70(R8)                POINT TO END OF CARD
         TM    MISCBITS,NEEDCONT        DID WE NEED A CONT CARD
         BO    GOTCONT                  YES - THEN THIS MUST BE IT
         TM    MISCBITS,SYSINEOF        DID WE HIT EOF ON SYSIN
         BO    NEXTSET                  YES PUT OUT OUT MESSAGE
         CLC   0(2,R1),=CL2'./'         IS IT A CTLCARD
         BNE   NOTCTLCD                 NO - JUST PRINT IT
         LA    R1,2(R1)                 SKIP THE DOT SLASH
FIRSTBLK DS    0H                       FIND FIRST BLANK
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    OPLOOP                   BRANCH IF FOUND
         BXLE  R1,R2,FIRSTBLK           LOOP TILL A BLANK FOUND
         B     ERR1                     ERROR IF FALL THRU
OPLOOP   DS    0H                       LOOP FOR THE OP CODE
         CLI   0(R1),X'40'              CHECK IF A BLANK
         BNE   FOUNDOP                  BRANCH IF NOT A BLANK
         BXLE  R1,R2,OPLOOP             LOOP TILL FOUND
         B     ERR1                     ERROR IF FALL THRU
FOUNDOP  DS    0H                       FOUND THE OP CODE
         ST    R1,ORIGREC               SAVE ADDR OF 1ST REC
         LA    R4,OPERATON              GET ADDR OF FIELD
         LA    R3,8(R1)                 ALLOW ONLY EIGHT BYTES LONG
MVCOP    DS    0H                       MOVE THE OP CODE
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    ENDOP                    IF FOUND - IT'S THE END
         MVC   0(1,R4),0(R1)            MOVE ONE BYTE AT A TIME
         LA    R4,1(R4)                 ADD ONE TO R4
         BXLE  R1,R2,MVCOP              LOOP TILL MOVED
         B     ERR2                     ERROR IF FALL THRU
         SPACE 2
GOTCONT  DS    0H                       HERE IF CONT CARD NEEDED
         NI    MISCBITS,(255-NEEDCONT)  TURN OFF BITS
         LTR   R1,R1                    WAS A RECORD PASSED
         BZ    ERR6                     NO THEN ERROR
         CLC   0(2,R1),=CL2'./'         IS IT A CONTROL CARD
         BNE   ERR6                     NO - THEN ERROR
         B     OPNLOOP                  GO GET THE KEYWORDS
         EJECT
ENDOP    DS    0H                       END OF OP CODE
         LA    R3,70(R8)                GET END ADDR OF CARD
         SR    R9,R9                    CLEAR R9
         LA    R5,ENDTABLE              GET ADDR OF END OF TABLE
         LA    R4,TABLINCR              LEN OF EACH MEMBER
         LA    R7,OPTABLE               ADDR OF START OF TABLE
TABLSRCH DS    0H                        SEARCH THE TABLE
         CLC   0(8,R7),OPERATON          COMPARE TO OPERATION FIELD
         BE    GOTOP                    FOUND OUT OP CODE
         BXLE  R7,R4,TABLSRCH           LOOP TILL FOUND
         B     ERR13                     ELSE ERROR
GOTOP    DS    0H                        FOUND THE OP CODE
         TM    OPBITS,X'FF'             IS THERE A CONTROL SECTION
         BZ    DOOI                     NO - GO DO THE OR IMMEDIATE
BRTORTN  DS    0H                       NOW BRANCH TO THE ROUTINE
         L     R15,8(R7)                LOAD ADDR OF WHERE TO GO (WTG)
         B     0(R15,R9)                BRANCH INCREMENTED BY R9
OI       OI    OPBITS,X'00'             EXECUTED OR IMMEDIATE
DOOI     DS    0H                        DO OR IMMEDIATE TO SET BITS
         ZAP   PAGENO,=PL1'0'           ZERO THE PAGE COUNT
         LA    R15,1                    PUT A ONE IN R15
         ST    R15,LINECNT              MAKE IT PRINT HEADING 1ST TIME
         MVI   CONDCODE+3,X'04'         INDICATE KEEP WRITING
         LA    R9,4                     PUT A 4 IN THE REG
         IC    R15,8(R7)                INSERT BIT MASK IN R15
         LTR   R15,R15                  IS THIS A VALID CODE
         BZ    ERR13                    NO - GIVE ERROR
         EX    R15,OI                    EXECUTE THE OR IMMEDIATE
         MVI   NAME,X'40'               MOVE ONE BLANK
         MVC   NAME+1(L'NAME-1),NAME    BLANK THE FIELD
         MVI   NEWNAME,X'40'            BLANK THE FIELD
         MVC   NEWNAME+1(L'NEWNAME-1),NEWNAME
         MVC   SEQFLD,=CL3'738'         DEFAULT SEQ FLD
         MVI   SEQDSPMT,72              DEFAULT DISPLACEMENT TO 72
         MVI   SEQLEN,X'07'            DEEFAULT LEN TO (8-1)
         MVI   MISCBITS,X'00'           TURN OFF INDICATOR BITS
         MVC   CTLCDIND,=CL2'./'        DEFAULT CTL CARD INDICATOR
         B     BRTORTN                  NOW GO TO THE ROUTINE
         SPACE 2
CLEARFLD DS    0H                       CLEAR THE FIELDS
         BAL   R9,PUTLINE               WRITE THE CONTROL CARD
SKIPPUTS DS    0H                       HERE TO BYPASS PUTS
         EJECT
OPNLOOP  DS    0H                       LOOK THRU THE OPERAND FIELD
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BNE   HITOPN                   IF NOT EQUAL - FOUND OPN FLD
         BXLE  R1,R2,OPNLOOP            LOOP TILL FOUND
         B     ERR3                     ERROR IF FALL THRU
HITOPN   DS    0H                       HIT THE OPERAND FIELD
         LA    R7,9(R1)                 ALLOW ONLY 8 BYTES LONG
         LR    R14,R1                   GET R1'S VALUE
         MVI   WORK,X'40'               MOVE ONE BLANK
         MVC   WORK+1(L'WORK-1),WORK    BLANK THE FIELD
         LA    R4,WORK                  LOAD ADDR OF WORK AREA
HITOPN1  DS    0H                       HIT THE OPERAND FIELD LOOP
         BXH   R14,R6,ERR7              GIVE ERROR IF MORE THAN 8
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    CONTCARD                 IF SO IT'S A CONTINUATION CRD
         CLI   0(R1),C'='               CHECK FOR AN EQUAL SIGN
         BE    CHECKEY                  GO GET THE VALUE
         MVC   0(1,R4),0(R1)            MOVE ONE BYTE
         LA    R4,1(R4)                 ADD ONE TO R4
         BXLE  R1,R2,HITOPN1            LOOP TILL MOVED
         B     ERR4                     ERR IF FALL THRU
         SPACE 3
NOTCTLCD DS    0H                       HERE TO PRINT NON-CTL CARDS
         MVI   CONDCODE+3,X'04'         MAKE RETURN CODE 4
         BAL   R9,PUTLINE               GO PRINT THIS LINE
         B     EOJ3                     NOW RETURN
         SPACE 3
MVCIND   DS    0H                       MOVE CTL CARD INDICATOR
         LA    R1,1(R1)                 SKIP EQUAL SIGN
         MVC   CTLCDIND,0(R1)           MOVE BYTES TO PASSAREA
         B     SKIPVAL                  GO SKIP TO NEXT FIELD
         EJECT
DOADD    DS    0H                       ADD CARD ENCOUNTERED
         B     NEXTSET                  GO INDICATE NEXT SECT IF HERE
         OI    INDBITS,ADDCTL           INDICATE SHOULD BE ADDED
         OI    LOCALSW,ADDCOPY          INDICATE AN ADD OR REPLACE
         B     CLEARFLD                 GO CLEAR THE FIELDS
DOREPL   DS    0H                       REPL CARD ENCOUNTERED
         B     NEXTSET                  GO INDICATE NEXT SECT IF HERE
         OI    INDBITS,REPLCTL          INDICATE SHOULD BE REPLACED
         OI    LOCALSW,ADDCOPY          INDICATE AN ADD OR REPLACE
         B     CLEARFLD
DOCHANGE DS    0H                       CHANGE CARD ENCOUNTERED
         B     NEXTSET                  GO INDICATE NEXT SECT IF HERE
         OI    INDBITS,REPLCTL          INDICATE SHOULD BE REPLACED
         B     CLEARFLD                 GO CLEAR THE FIELDS
DONOCHNG DS    0H                       NOCHANGE CARD ENCOUNTERED
         B     NEXTSET                  GO INDICATE NEXT SECT IF HERE
         BAL   R9,PUTLINE               PRINT THE RECORD
         L     R14,ORIGREC              GET ADDR OF START OF OP CODE
         MVC   0(2,R14),=CL2' '         BLANK THE NO IN NOCHANGE
         B     SKIPPUTS                 GO PROCESS
DOCMPL   DS    0H                       HERE IF A COMPILE OR ASSEMBLE
         B     NEXTSET                  EXECUTED IF NOT 1ST TIME THRU
         B     CLEARFLD                 EXECUTED IF 1ST TIME THRU
DOPUNCH  DS    0H                       HERE IF A PUNCH CONTROL CARD
         B     NEXTSET                  EXECUTED IF NOT 1ST TIME THRU
         B     CLEARFLD                 EXECUTED IF 1ST TIME THRU
DOSCRE   DS    0H                       HERE IF A SCRATCH OR RENAME
         B     NEXTSET                  EXECUTED IF NOT 1ST TIME THRU
         B     CLEARFLD                 EXECUTED IF 1ST TIME THRU
DOLIST   DS    0H                       HERE FOR A LIST OP CODE
         B     NEXTSET                  INDICATE NEXT SECTION
         OI    MISCBITS,LISTOP          TELL THAT A LIST OP
         OI    INDBITS,LISTIND          FAKE A LIST=ALL
         B     CLEARFLD                 GO PROCESS OPERAND FLD
UPDTECD  DS    0H                       HANDLE IEBUPDTE CONTROL CARDS
         BAL   R9,PUTLINE               GO PRINT THE LINE
         MVI   CONDCODE+3,X'04'         JUST KEEP GET-PUTTING
         B     EOJ3                     DON'T DO ANYTHING ELSE
DONUMBER DS    0H                       PROCESS NUMBER CARD
         MVI   CONDCODE+3,X'04'         INDICATE NOT A NEW SET
         BAL   R9,PUTLINE               PUT THE CONTROL CARD
         TM    OPBITS,(ADDOP+REPLOP)    IS IT AN ADD OR REPL OPERATION
         BZ    EOJ3                     NO - DON'T WORRY ABOUT IT
         OI    INDBITS,SEQIND           ELSE WE WILL SEQ THE DECK
         B     OPNLOOP                  GO PROCESS OPERAND FIELD
DOENDUP  DS    0H                       PROCESS ENDUP CONTROL CARDS
         MVC   CTLCDIND,=CL2'./'        RESET TO DEFAULT
         BAL   R9,PUTLINE               GO PRINT THIS CTL CARD
         B     EOJ3                     IGNORE
         EJECT
NEXTSET  DS    0H                       HIT A CTL CARD INDICATING NEW
         TM    MISCBITS,FLUSH           IS THIS SET TO BE FLUSHED
         BO    EOJ3                     YES - DON'T GIVE ANY MESSAGES
         CLC   NAME,=CL8' '             CHK IF NAME FIELD BLANK
         BNE   OKMSG                    NO - THEN GIVE OK MSG
         MVC   NAME,=CL8'TEMPNAME'      ESTABLISH TEMP NAME
         B     ERR12                    TELL USER ABOUT IT
OKMSG    DS    0H                       HERE TO GIVE OK MSG
         MVI   PRNTAREA,X'40'           MOVE ONE BLANK
         MVC   PRNTAREA+1(L'PRNTAREA-1),PRNTAREA  BLANK LINE
         MVC   PRNTAREA(L'MESG10),MESG10  MOVE ALL OKAY MESSAGE
         BAL   R9,PUTLINE               GO PRINT THE LINE
         B     EOJ3                     JUST RETURN TO DASOURCE
         EJECT
DOINSERT DS    0H                       GENERATE INSERT CARD
         BAL   R9,PUTLINE               GO PRINT THIS CTLCARD
         MVI   CONDCODE+3,X'04'         SET TO RETURN CODE OF FOUR
         ZAP   PACKINCR,DFLTINCR        SET THE DEFAULT INCREMENT
         UNPK  INCR1ST,DFLTINCR         UNPK IT FOR THE CARD
         MVC   WORK,=CL8'00000000'      EBCDIC ZERO WORK AREA
IFINDOPN DS    0H                       FIND OPERAND FIELD
         CLI   0(R1),X'40'              CHK FOR A BLANK
         BNE   IGOTOPN                  GOT OPERAND FIELD
         BXLE  R1,R2,IFINDOPN           LOOP TILL FOUND
         B     EOJ3                     ERROR - PUT UNCHANGED
IGOTOPN  DS    0H                       HIT OPERAND FIELD
         CLI   0(R1),X'40'              CHK FOR NEXT BLANK
         BE    IENDOPN                  HIT END OF FIELD
         BXLE  R1,R2,IGOTOPN            LOOP TILL END OF FIELD
         B     EOJ3                     ERROR - PUT AS IS
IENDOPN  DS    0H                       END OF THE FIELD
         BCTR  R1,R0                    SUBTRACT ONE FROM R3
         LA    R4,WORK+7                POINT TO LAST BYTE
         LA    R0,WORK                  GET BEGINNING ADDR OF WORK FLD
IMVCOPN  DS    0H                       MOVE IT TO WORK AREA
         CLI   0(R1),X'40'              CHK FOR A BLANK
         BE    IENDMVC                  END OF MOVE
         CLI   0(R1),C','               CHECK IF INCR FIELD INCLUDED
         BE    IMVCINCR                 YES - GO MOVE IT
         TM    0(R1),X'F0'              CHECK FOR NUMERIC
         BNO   EOJ3                     LET IEBUPDTE GIVE THE ERROR
         MVC   0(1,R4),0(R1)            MOVE ONE BYTE
         BCTR  R1,R0                    SUBTRACT ONE
         CR    R4,R0                    CHECK TO START ADDR
         BL    EOJ3                     MORE THAN 8 BYTES LONG
         BCT   R4,IMVCOPN               SUBTRACT ONE AND LOOP
*    NEVER FALL THRU ABOVE INSTRUCTION
IMVCINCR DS    0H                       MOVE THE INCR
         MVC   INCR1ST,WORK             MOVE THE NEW INCR
         PACK  PACKINCR,WORK            PACK IT TO ADD TO NEW1
         MVC   WORK,=CL8'00000000'      RESET WORK TO ZERO
         B     IENDOPN                  GET THE NEXT FIELD
IENDMVC  DS    0H                       FINISHED MOVING
         MVC   SEQ11ST,WORK             MOVE WORK TO SEQ1 FLD
         PACK  WORK,SEQ11ST             PACK FOR THE ADD
         AP    WORK,PACKINCR            ADD INCR FOR NEW1
         UNPK  NEW11ST,WORK             UNPACK NEW1
         OI    NEW11ST+7,X'F0'          OR FOR F ZONE
         MVC   0(72,R8),INSRT1ST        MOVE INSERT CARD
         OI    MISCBITS,ININSERT        INDICATE WE ARE INSERTING
         B     EOJ3                     FINISHED
INSRT1ST DS    0CL72
         DC    CL3'./'
         DC    CL7'NUMBER'
         DC    CL11'INSERT=YES,'
         DC    CL5'SEQ1='
SEQ11ST  DC    CL8'00000000'
         DC    CL1','
         DC    CL5'NEW1='
NEW11ST  DC    CL8'00000000'
         DC    CL1','
         DC    CL5'INCR='
INCR1ST  DC    CL8'00000100'
         DC    CL10' '
PACKINCR DC    PL5'100'
DFLTINCR DC    XL2'100F'                PACK 100 WITH ZONE PLUS SIGN
         EJECT
DODELETE DS    0H                        GENERATE DELETE CARD
         BAL   R9,PUTLINE               GO PRINT THIS CTLCARD
         MVI   CONDCODE+3,X'04'         SET TO RETURN CODE OF FOUR
         MVC   WORK,=CL8'00000000'      EBCDIC ZERO WORK AREA
         MVC   DSEQ2,=CL8'00000000'     ZERO SEQ2
DFINDOPN DS    0H                       SEARCH FOR OPERAND
         CLI   0(R1),X'40'              LOOK FOR OPERAND
         BNE   DGOTOPN                  FOUND OPERAND FIELD
         BXLE  R1,R2,DFINDOPN           LOOP TILL FOUND
         B     EOJ3                     ERROR IF FALL THRU
DGOTOPN  DS    0H                       GOT OPERAND - NOW SKIP TO END
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    DENDOPN                  AT END IF BLANK
         BXLE  R1,R2,DGOTOPN            LOOP TILL END
         B     EOJ3                     ERROR IF FALL THRU
DENDOPN  DS    0H                       AT END OF OPERAND FIELD
         BCTR  R1,R0                    SUBTRACT ONE
         LA    R4,WORK+7                POINT TO END OF FIELD
DMVCOPN  DS    0H                       NOW MOVE IT
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    DENDMVC                  FINISHED
         CLI   0(R1),C','               CHK FOR TWO FIELDS
         BE    DSEQ2MVC                 GO MOVE SEQ2
         MVC   0(1,R4),0(R1)            MOVE TO WORK AREA
         BCTR  R1,R0                    SUBTRACT ONE
         BCT   R4,DMVCOPN               LOOP TILL MOVED
*    NEVER FALL THRU ABOVE INSTRUCTION
DSEQ2MVC DS    0H                       MOVE SEQ2 FIELD
         MVC   DSEQ2,WORK               MOVE TO SEQ2
         MVC   WORK,=CL8'00000000'      RESET WORK AREA
         B     DENDOPN                  GO GET NEXT FIELD
DENDMVC  DS    0H                       FINISHED MOVING
         MVC   DSEQ1,WORK               MOVE TO SEQ1 FIELD
         CLC   DSEQ2,=CL8'00000000'     WAS THERE A SECOND FIELD
         BNE   DRETURN                  YES - RETURN
         MVC   DSEQ2,DSEQ1              DELETE ONE CARD
DRETURN  DS    0H                       FINISHED
         MVC   0(72,R8),DELETECD        MOVE THE DELETE CARD
         B     EOJ3                     FINISHED
DELETECD DS    0CL72
         DC    CL3'./'
         DC    CL7'DELETE'
         DC    CL5'SEQ1='
DSEQ1    DC    CL8'00000000'
         DC    CL1','
         DC    CL5'SEQ2='
DSEQ2    DC    CL8'00000000'
         DC    CL35' '
         EJECT
DOCOPY   DS    0H                        COPY CODE FROM OTHER PGM
         BAL   R9,PUTLINE               GO PRINT THIS CTLCARD
         MVI   CONDCODE+3,X'04'         DEFAULT TO COND CODE OF FOUR
         MVC   COPYNAME,NAME            DEFAULT TO THIS NAME
         MVC   DDNAME,=CL8'PDS'         DEFAULT TO PDS
         UNPK  INCR1ST,DFLTINCR         DEFAULT TO INCR OF 100
CFINDOPN DS    0H                       LOOP TO FIND OPERAND FIELD
         CLI   0(R1),X'40'              HAVE WE HIT THE FIELD
         BNE   CGOTOPN                  YES - GO PROCESS
         BXLE  R1,R2,CFINDOPN           LOOP TILL FOUND
         B     EOJ3                     ERROR IF FALL THRU
CGOTOPN  DS    0H                       HERE WHEN FOUND OPERAND FIELD
         LA    R4,STARTNO               POINT TO END OF FIELD
         BAL   R9,MVCNO                 GO MOVE THE NUMBER
         LA    R4,ENDNO                 POINT TO END OF FIELD
         BAL   R9,MVCNO                 GO MOVE THE NUMBER
         LA    R4,SEQ11ST               POINT TO END OF FIELD
         BAL   R9,MVCNO                 GO MOVE THE NUMBER
         LA    R4,INCR1ST               POINT TO END OF FIELD
         BAL   R9,MVCNO                 GO MOVE THE NUMBER
         LA    R4,COPYNAME              POINT TO BEGINNING OF FIELD
         BAL   R9,MVCCHAR               GO MOVE THE CHARACTERS
         LA    R4,DDNAME                GET ADDR OF BEGINNING OF FIELD
         BAL   R9,MVCCHAR               GO MOVE THE CHARACTERS
CMVCALL  DS    0H                       HERE AFTER MOVING ALL FIELDS
         PACK  PACKINCR,INCR1ST         PACK INCR
         PACK  WORK,SEQ11ST             PACK NUMBER TO INSERT AFTER
         AP    WORK,PACKINCR            ADD INCR TO GET NO OF 1ST INSRT
         UNPK  NEW11ST,WORK             UNPK THE NEW NUMBER
         OI    NEW11ST+7,X'F0'          MAKE ZONE 'F'
         MVC   0(72,R8),INSRT1ST        MOVE INSERT CARD
         SR    R2,R2                    CLEAR R2
         SR    R3,R3                    CLEAR R3
         IC    R2,SEQDSPMT              PUT DISPLACEMENT IN R2
         IC    R3,SEQLEN                PUT LEN-1 IN R3
         LA    R4,7                     ONE LESS THAN MAX LEN
         SR    R4,R3                    GET THE DIFFERENCE
         STM   R2,R4,SEQREGS            SAVE THESE VALUES
         XC    NAME,COPYNAME            SWAP
         XC    COPYNAME,NAME                 THE
         XC    NAME,COPYNAME                     NAMES
         LA    R1,LINKLIST              LOAD ADDR OF LINKLIST
         LINK  EP=EXPAND,                                              *
               MF=(E,(1))
         XC    NAME,COPYNAME            SWAP
         XC    COPYNAME,NAME                 THE
         XC    NAME,COPYNAME                     NAMES
         B     EOJ3                     FINISHED PROCESSING
         EJECT
MVCNO    DS    0H                       MOVE NUMBERS
         CLI   0(R1),C','               CHECK FOR A COMMA
         BE    ENDFIELD                 YES - ATE END OF THIS FIELD
         CLI   0(R1),X'40'              CHK FOR A BLANK
         BE    ENDFIELD                 YES - AT END OF FIELD
         BXLE  R1,R2,MVCNO              LOOP TILL END OF FIELD
ENDFIELD DS    0H                       FOUND THE END OF THIS FIELD
         MVC   WORK,=CL8'00000000'      EBCDIC ZERO WORK AREA
         LA    R5,WORK+7                POINT TO END OF FIELD
         LR    R7,R1                    SAVE ADDR OF END OF THIS FIELD
         BCTR  R1,R0                    BACK UP ONE
         CLI   0(R1),C','               IS THIS A COMMA ALSO
         BE    NULLFLD                  YES - THEN A NULL FIELD
MVCFIELD DS    0H                       NOW MOVE FIELD WHERE DIRECTED
         MVC   0(1,R5),0(R1)            MOVE ONE BYTE
         BCTR  R1,R0                    BACK UP ONE
         CLI   0(R1),X'40'              CHK FOR A BLANK
         BE    ENDMOVE                  YES - FOUND START OF FIELD
         CLI   0(R1),C','               CHK FOR A COMMA
         BE    ENDMOVE                  YES -THEN AT START OF FIELD
         BCT   R5,MVCFIELD              LOOP TILL FIELD MOVED
*    NEVER FALL THRU ABOVE INSTRUCTION
ENDMOVE  DS    0H                       HERE WHEN AT END OF MOVE
         MVC   0(8,R4),WORK             MOVE WORK FIELD TO DATA
NULLFLD  DS    0H                       HERE IF A NULL FIELD
         LR    R1,R7                    RESTORE R1 TO END OF FIELD
         CLI   0(R1),X'40'              ANY MORE FIELDS ON CARD
         BE    CMVCALL                  NO - TERMINATE
         LA    R1,1(R1)                 SKIP THE COMMA
         BR    R9                       RETURN TO CALLER
         SPACE 2
MVCCHAR  DS    0H                       ROUTINE TO MOVE CHARACTERS
         MVC   WORK,=CL8' '             BLANK OUT WORK
         LA    R5,WORK                  GET THE ADDR OF WORK
CHARLOOP DS    0H                       LOOP TO MOVE CHARACTERS
         CLI   0(R1),C','               CHK FOR A COMMA
         BE    ENDCHAR                  YES - THEN END OF FIELD
         CLI   0(R1),X'40'              CHK FOR A BALNK
         BE    ENDCHAR                  YES - THEN END OF FIELD
         MVC   0(1,R5),0(R1)            MOVE ONE BYTE AT A TIME
         LA    R5,1(R5)                 INCREMENT R5
         BXLE  R1,R2,CHARLOOP           LOOP TILL MOVED
ENDCHAR  DS    0H                       CHAR FIELD MOVED
         MVC   0(8,R4),WORK             MOVE DATA TO FIELD
         CLI   0(R1),X'40'              CHK FOR A BLANK
         BE    CMVCALL                  YES - THEN NO MORE FIELDS
         BR    R9                       ELSE - THEN RETURN TO CALLER
         EJECT
EXIT     DS    0H                       EXIT ROUTINE FOR EXPAND
         STM   R14,R12,12(R13)          SAVE REGISTERS
         USING EXIT,R15                 ESTABLISH TEMP BASE
         LM    R11,R12,BASES            LOAD BASES FOR ADDRESSABILITY
         DROP  R15
         LA    R2,SAVEAREA              LOAD ADDR OF THIS SAVEAREA
         ST    R2,8(R13)                CHAIN FORWARD
         ST    R13,4(R2)                CHAIN BACKWARD
         LR    R13,R2                   GET SAVE AREA ADDR
         L     R10,LINKLIST             GET ADDR OF PASSAREA
         LTR   R1,R1                    CHK IF ANY MORE
         BZ    EXITEOJ                  NO - JUST TERMINATE
         LM    R2,R4,SEQREGS            RESTORE THE REGISTERS
         LA    R8,0(R1,R2)              ADDR OF START OF SEQ FIELD
         LA    R6,STARTNO(R4)           START ADDR + STEP IN
         EX    R3,COMPARE               EXECUTE A COMPARE LOGICAL
         BL    EXITEOJ                  PASS BY IF LOW
         LA    R6,ENDNO(R4)             START ADDR + STEP IN
         EX    R3,COMPARE               CHECK THE SEQ FIELD
         BH    EXITEOJ                  BYPASS IF TOO HIGH
         TM    LOCALSW,ADDCOPY          IS THIS A COPY IN AN ADD OR REP
         BO    DONTPUT                  YES - DON'T PUT THE INSERT CARD
         LR    R2,R1                    SAVE ADDR OF THIS REC
         L     R1,WORK03                GET ADDR OF THE DCB
         L     R0,RCDADDR               GET ADDR OF LAST REC
         LR    R4,R0                    SAVE THIS ADDR IN R4
         PUT   (1)                      WRITE THE REC
DONTPUT  DS    0H                       HERE FIRST TIME IF ADD OR REPL
         MVC   0(72,R4),0(R2)           MOVE 72 BYTES OF THIS REC TO
         NI    LOCALSW,(255-ADDCOPY)    TURN OFF SWITCH
EXITEOJ  DS    0H                       HERE WHEN FINISHED
         L     R13,4(R13)               STEP BACK ONE SAVEAREA
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         BR    R14                      RETURN
COMPARE  CLC   0(0,R8),0(R6)            EXECUTED INSTRUCTION
         EJECT
CHECKEY  DS    0H                       CHECK THE KEYWORD
         LA    R5,ENDKEYTB              LOAD ADDR OF END OF KEY TABLE
         LA    R4,KEYINCR               LOAD THE INCREMENT
         LA    R7,KEYWDTBL              LOAD ADDR OF START OF TABLE
KEYSERCH DS    0H                       SEARCH THE TABLE
         CLC   0(8,R7),WORK             COMPARE TO THE KEYWORD FOUND
         BE    GOTKEY                   BRANCH IF FOUND
         BXLE  R7,R4,KEYSERCH           LOOP TILL FOUND
         TM    OPBITS,(CHANGEOP+NOCHNGOP)  CHK IF A CHANGE OR NOCHANGE
         BZ    ERR11                    ERROR IF NEITHER
         B     ADDONE                   ELSE, JUST SKIP THE VALUE
GOTKEY   DS    0H                       HERE IF KEYWORD FOUND IN TABLE
         L     R15,8(R7)                LOAD ADDR OF ROUTINE TO HANDLE
         BR    R15                      GO THERE
ADDONE   LA    R1,1(R1)                 ADD ONE TO SKIP EQUAL SIGN
SKIPVAL  DS    0H                       SKIP THE VALUE
         CLI   0(R1),X'40'              CHECK IF BLANK
         BE    EOJ3                     END OF THIS CONTROL CARD
         CLI   0(R1),C','               CHECK FOR A COMMA
         BE    ENDVAL                   HIT THE END OF THIS VALUE
         BXLE  R1,R2,SKIPVAL            LOOP TILL ALL SKIPPED
         CLI   0(R1),X'40'              CHK COL 72 FOR A BLANK
         BNE   ERR4                     ERROR IF NOT
         B     EOJ3                     FINISHED WITH THIS CARD
ENDVAL   DS    0H                       END OF THIS VALUE
         LA    R1,1(R1)                 SKIP COMMA
         B     HITOPN                   GO GET THE NEXT KEYWORD
         SPACE 2
CONTCARD DS    0H                       GET A CONTINUATION CARD
         OI    MISCBITS,NEEDCONT        INDICATE THAT WE NEED CONT CARD
         B     EOJ3                     RETURN WITH COND CODE SET
         EJECT
PUTLINE  DS    0H                       WRITE THE LINE
         ST    R1,SAVE                  SAVE REG 1
         L     R15,LINECNT              GET THE LINECOUNT
         BCT   R15,NOHEAD               BYPASS IF NOT DOWN TO ZERO
         LA    R1,LINKLIST              GET ADDR OF PASS LIST
         LINK  EP=HEADING,              PRINT A HEADING                *
               MF=(E,(1))               LINKLIST ADDR IN R1
         MVI   PRNTAREA,C'0'            DOUBLE SPACE NEXT LINE
         ST    R15,LINECNT              SAVE THE NEW LINE COUNT
         L     R1,DCBADDR               GET PRINTER DCB ADDR
         PUT   (1),HDR1                 PUT THAT MESSAGE
         B     DOPUT                    GO PUT THE CTL CARD
NOHEAD   DS    0H                       HERE TO BYPASS A HEADING
         ST    R15,LINECNT              SAVE THE NEW LINECOUNT
DOPUT    DS    0H                       HERE TO SKIP STORE OF LINECNT
         L     R1,DCBADDR               GET DCB ADDRESS
         PUT   (1),PRNTAREA             WRITE THE LINE
         MVI   PRNTAREA,X'40'           MOVE ONE BLANK
         MVC   PRNTAREA+1(L'PRNTAREA-1),PRNTAREA
         L     R1,SAVE                  RESTORE R1
         BR    R9                       RETURN
         EJECT
EOJ3     DS    0H                       TERMINATE POINT
         L     R15,CONDCODE             GET THE CONDITION CODE
         TERME                          TERMINATE PGM
         EJECT
MNEWNAME DS    0H                       NEWNAME KEYWORD
         LA    R4,NEWNAME               LOAD ADDR OF NEWNAME FIELD
         CLI   1(R1),X'40'              CHECK IF NAME SUPPLIED
         BE    ERR4                     GO GIVE ERROR MESSAGE
         CLI   1(R1),C','               CHECK IF NAME SUPPLIED
         BE    ERR4                     GO GIVE ERROR MESSAGE
         OI    INDBITS,NEWNMIND         INDICATE NEW NAME PROCESSING
         B     GETNAME                  GO PROCESS
MVCNAME  DS    0H                       MOVE THE NAME
         LA    R4,NAME                  POINT TO NAME FLD
GETNAME  DS    0H                       PROCESS THE NAME
         LA    R1,1(R1)                 SKIP EQUAL SIGN
         LA    R3,8(R1)                 ONLY 8 BYTES LONG
         CLI   0(R1),C'('               CHK IF NEW NAME
         BE    CHNGNAME                 YES - SPECIAL PROCESSING
NAMELOOP DS    0H                        LOOP TO MOVE THE NAME
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    EOJ3                     FINISHED WITH THIS CARD
         CLI   0(R1),C','               CHECK FOR A COMMA
         BE    NAMEEND                  END OF THE NAME
         CLI   0(R1),C')'               CHK FOR END OF FIELD
         BE    ENDNEW                   YES CLOSE OUT
         MVC   0(1,R4),0(R1)            MOVE ONE BYTE
         LA    R4,1(R4)                 ADD ONE TO R4
         BXLE  R1,R2,NAMELOOP           LOOP TILL MOVED
         B     ERR7                     ERROR IF FALL THRU
NAMEEND  DS    0H                       END OF THE NAME
         NOP   PNEWNAME                 SWITCH FOR NEWNAMES
         LA    R3,70(R8)                POINT TO END OF CARD
         B     ENDVAL                   GET NEXT VALUE
         SPACE 2
CHNGNAME DS    0H                       LOGIC TO CHANGE A NAME
         OI    INDBITS,ADDCTL           TURN ON ADD INDICATOR
         MVI   NAMEEND+1,X'F0'          MAKE NOP A BRANCH
         ST    R1,NAMESTRT              SAVE THE START ADDRESS
         LA    R1,1(R1)                 STEP PAST (
         LA    R3,8(R1)                 ALLOW ONLY 8 BYTES LONG
         B     NAMELOOP                 NOW GO PROCESS
PNEWNAME DS    0H                       GET THE NEWNAME
         NOP   REPLACE                  NEXT TIME THRU SWITCH
         NI    INDBITS,(255-REPLCTL)    TURN OFF REPL IND
         LA    R1,1(R1)                 STEP PAST ,
         CLI   0(R1),C','               CHK IF TWO COMMAS IN ROW
         BE    NONEWNM                  BYPASS TURNING ON BIT
         OI    INDBITS,NEWNMIND         INDICATE NEW NAME PROCESSING
NONEWNM  DS    0H                       BYPASS TURNING ON NEW NAME IND
         LA    R3,8(R1)                 ALLOW ONLY 8 BYTES LONG
         LA    R4,NEWNAME               POINT TO NEWNAME
         MVI   PNEWNAME+1,X'F0'         MAKE NOP A BRANCH
         B     NAMELOOP                 GO MOVE NEWNAME
REPLACE  DS    0H                       FIND OUT IF A REPLACE
         LA    R1,1(R1)                 STEP PAST ,
         CLI   0(R1),C'R'               ONLY LETTER ALLOWED IS R
         BNE   ERR4                     ERROR IF NOT R
         OI    INDBITS,REPLCTL          INDICATE MEMBER SHOULD BE REPL
         NI    INDBITS,(255-ADDCTL)     TURN OFF ADD INDICATOR
         LA    R1,1(R1)                 STEP PAST R
         CLI   0(R1),C')'               CHK FOR END OF FIELD
         BNE   ERR4                     ERROR IF NOT
ENDNEW   DS    0H                       END OF NEW NAME
         MVI   NAMEEND+1,X'00'          MAKE BRANCH A NOP
         MVI   PNEWNAME+1,X'00'         MAKE BRANCH A NOP
         LA    R1,1(R1)                 SKIP )
         ST    R1,ENDNAME               SAVE END NAME ADDRESS
         L     R1,NAMESTRT              PICK UP START ADDRESS
         LA    R3,7(R1)                 ONLY EIGHT BYTES LONG
         LA    R4,NAME                  START ADDRESS OF NAME
MOVENAME DS    0H                       MOVE THE NAME BACK
         CLI   0(R4),X'40'              AT END OF NAME?
         BE    STOPMVC                  YES - GET OUT
         MVC   0(1,R1),0(R4)            MOVE ONE BYTE AT A TIME
         LA    R4,1(R4)                 INCREMENT R4
         BXLE  R1,R2,MOVENAME           LOOP FOR EIGHT BYTES
STOPMVC  DS    0H                       MOVED THE NAME
         ST    R1,NAMESTRT              SAVE LOCATION JUST AFTER NAME
         LA    R3,70(R8)                POINT TO END OF CARD
         L     R4,ENDNAME               WHERE TO START LOOKING FROM
MOVECARD DS    0H                       MAKE CARD LOOK OK TO IEBUPDTE
         CLI   0(R4),X'40'              END OF DATA
         BE    BLANKCRD                 YES - GO BLANK THE REST
         MVC   0(1,R1),0(R4)            MOVE ONE BYTE
         LA    R1,1(R1)                 INCREMENT R1
         BXLE  R4,R2,MOVECARD           LOOP TILL BLANK OR END OF CARD
BLANKCRD DS    0H                       BLANK THE REST OF THE CARD
         ST    R4,ENDNAME               SAVE R4
         SR    R4,R1                    HOW MUCH SPACE BETWEEN
         BCTR  R4,R0                    SUBTRACT ONE FOR EXECUTE
         EX    R4,EXMVCBLK              BLANK THE CARD
         L     R1,NAMESTRT              RESTORE R1
         L     R4,ENDNAME               RESTORE R4
         B     NAMELOOP                 LET STANDARD CODE HANDLE
EXMVCBLK MVC   0(0,R1),=CL55' '         MAX OF 55 BLANKS
         EJECT
MVCSEQFL DS    0H                       MOVE THE SEQ FLD
         LA    R1,1(R1)                 SKIP EQUAL SIGN
         LR    R9,R1                    LOAD START ADDR IN R9
CHKSEQFL DS    0H                       LOOP TO CHECK THE FIELD
         CLI   0(R9),X'40'              CHECK FOR A BLANK
         BE    ENDSEQFL                 END OF FIELD
         CLI   0(R9),C','               CHECK FOR A COMMA
         BE    ENDSEQFL                 END OF FIELD
         BXLE  R9,R2,CHKSEQFL           LOOP TILL SCANNED
         B     ERR4                     HIT END OF CARD
ENDSEQFL DS    0H                       END OF FIELD
         SR    R9,R1                    HOW MANY BYTES LONG
         LTR   R9,R9                    CHECK IF ZERO
         BZ    SKIPVAL                  YES - NULL VALUE
         C     R9,=F'3'                 IS IT GREATER THAN 3
         BH    ERR4                     ERROR IF GREATER
         BNE   NOTHREE
         MVC   SEQFLD,0(R1)             MOVE THE VALUE
         B     CONVTSEQ                 GO GET LEN AND DISPLACEMENT
NOTHREE  DS    0H                       NOT THREE CHARACTERS
         BCTR  R9,R0                    REDUCE COUNT BY ONE
         LTR   R9,R9                    CHECK IF ZERO
         BZ    ERR4                     COUNT WAS ONE - ERROR
         MVC   SEQFLD+1(2),0(R1)        MOVE TWO BYTES
         MVI   SEQFLD,X'F0'             ZERO FIRST BYTE
CONVTSEQ DS    0H                       CONVERT TO LEN AND DISPLMENT
         PACK  WORK,SEQFLD(2)           PACK THE DISPLACEMENT
         CVB   R2,WORK                  GET IT INTO BINARY
         BCTR  R2,R0                    CONVERT FROM COLUMN TO DISPLACE
         STC   R2,SEQDSPMT              SAVE THIS DISPLACEMENT
         IC    R2,SEQFLD+2              LOAD THE LENGTH
         SLL   R2,28                    SHIFT OUT THE 'F'
         SRL   R2,28                    RESTORE TO LOW ORDER
         BCTR  R2,R0                    SUBTRACT ONE FOR INSTRUCTION FM
         STC   R2,SEQLEN                SAVE THE LENGTH
         B     SKIPVAL                  CONTINUE PROCESSING
         SPACE 4
MVCLIST  DS    0H                       MOVE THE LIST VALUE
         LA    R1,1(R1)                 SKIP EQUAL SIGN
         CLC   0(3,R1),=CL3'ALL'        CHK IF LIST EQUAL ALL
         BNE   SKIPVAL                  RETURN IF NOT EQUAL
         OI    INDBITS,LISTIND          TURN ON LIST IND
         B     SKIPVAL                  GO LOOK FOR ANOTHER
         EJECT
MVCNEW1   DS   0H                       MOVE THE FIRST NUMBER
         LA    R4,WORK                  GET THE ADDR OF THE WORK AREA
         LA    R1,1(R1)                 ADD ONE TO SKIP =
         LA    R3,8(R1)                 ONLY 8 BYTES LONG
         SR    R5,R5                    CLEAR R5
         MVI   NEW1BR+1,X'F0'           MAKE IT A BRANCH
         MVC   PACKNEW1+2(2),SNEW1      MOVE ADDR
NUMLOOP  DS    0H                       LOOP TO GET VALUE
         CLI   0(R1),X'40'              CHECK FOR A BLANK
         BE    NEW1END                  END OF CARD
         CLI   0(R1),C','               CHECK FOR A COMMA
         BE    PACKVAL                  IF EQUAL BRANCH TO PACK
         MVC   0(1,R4),0(R1)            MOVE ONE BYTE
         LA    R4,1(R4)                 ADD ONE TO R4
         LA    R5,1(R5)                 ADD ONE TO COUNT BYTES
         BXLE  R1,R2,NUMLOOP            LOOP TILL MOVED
         B     ERR7                     ERROR IF FALL THRU
PACKVAL  DS    0H                       PACK THE VALUE
         BCTR  R5,R0                    SUBTRACT ONE
         STC   R5,WORK2                 STORE COUNT
         OI    WORK2,((L'NEW1-1)*16)    LEN-1 OF NEW1 FLD IN HI NIBBLE
         IC    R5,WORK2                 INSERT IT BACK IN REG
EXINSTR  EX    R5,PACKNEW1              GO PACK THE VALUE
         LA    R3,70(R8)                RESTORE END ADDR
NEW1BR   B     ENDVAL                   GO CONTINUE TO PROCESS
         B     EOJ3                     FINISHED WITH THIS CARD
NEW1END  DS    0H                       MAKE IT GO TO THE END
         MVI   NEW1BR+1,00              MAKE IT A NOP
         B     PACKVAL                  GO PACK THE VALUE
PACKNEW1 PACK  NEW1(0),WORK(0)          EXECUTED PACK INSTRUCTION
         SPACE 2
MVCINCR  DS    0H                       MOVE THE INCR
         LA    R4,WORK                  GET THE ADDR OF THE WORK AREA
         LA    R1,1(R1)                 ADD ONE TO SKIP =
         LA    R3,8(R1)                 ONLY 8 BYTES LONG
         SR    R5,R5                    CLEAR R5
         MVI   NEW1BR+1,X'F0'           MAKE IT A BRANCH
         MVC   PACKNEW1+2(2),SINCR      MOVE ADDR
         B     NUMLOOP                  GO GET THE VALUE
         EJECT
ERR1     DS    0H                       FIRST ERROR MESG
         BAL   R9,PUTLINE               GO PRINT THIS CTL CARD
         MVC   PRNTAREA(L'MESG1),MESG1  MOVE THE MESSAGE
         B     PRINT                    GO PRINT IT
ERR2     DS    0H                       SECOND ERROR MESG
         BAL   R9,PUTLINE               GO WRITE THE MESSAGE
         MVC   PRNTAREA(L'MESG2),MESG2  MOVE THE MESSAGE
         B     PRINT                    GO PRINT IT
ERR3     DS    0H                       THIRD ERROR MESG
         MVC   PRNTAREA(L'MESG3),MESG3  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR4     DS    0H                       FOURTH ERROR MESG
         MVC   PRNTAREA(L'MESG4),MESG4  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR5     DS    0H                       FIFTH ERROR MESSAGE
         MVC   PRNTAREA(L'MESG5),MESG5  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR6     DS    0H                       SIXTH ERROR MESSAGE
         BAL   R9,PUTLINE               PRINT CTL CARD IN ERROR
         MVC   PRNTAREA(L'MESG6),MESG6  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR7     DS    0H                       SEVENTH ERROR MESSAGE
         MVC   PRNTAREA(L'MESG7),MESG7  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR8     DS    0H                       EIGHTH ERROR MESSAGE
         MVC   PRNTAREA(L'MESG8),MESG8  MOVE THE MESSAGE
         B     PRINT                    GO PRINT THE MESSAGE
ERR11    DS    0H                       ERROR MESG
         MVC   PRNTAREA(L'MESG11),MESG11   MOVE THE MESSAGE
         B     PRINT                    GO PRINT IT
ERR12    DS    0H                       TELL USER ABOUT TEMPNAME
         MVC   PRNTAREA(L'MESG12),MESG12  MOVE MESSAGE
         BAL   R9,PUTLINE               GO WRITE THE LINE
         B     EOJ3                     FINISHED SCAN
ERR13    DS    0H                       BAD OPERATION CODE
         BAL   R9,PUTLINE               GO PRINT THIS CTL CARD
         MVC   PRNTAREA(L'MESG13),MESG13  MOVE THE MESSAGE
         B     PRINT                    GO PRINT IT
         SPACE 3
PRINT    DS    0H                       PRINT THE ERROR MESG
         BAL   R9,PUTLINE               GO WRITE THE MESSAGE
         MVI   CONDCODE+3,X'08'         SET RETURN CODE
         B     EOJ3                     GET OUT
         EJECT
WORK03   DS    F                        ADDR OF WORK03 DCB
LINECNT  DS    F
CONDCODE DC    F'0'
SAVE     DS    F
SAVEAREA DS    18F                      SAVEAREA FOR EXIT ROUTINE
BASES    DS    2F                       SAVE AREA FOR BASE ADDRESSES
ORIGREC  DS    F
OPERATON DC    CL8' '
SEQREGS  DS    3F                       SAVE AREA FOR REGS TO PASS TO E
         DS    0D                       MUST BE DOUBLEWORD ALIGNED
WORK     DS    CL8
WORK2    DS    CL1
SEQFLD1  DC    CL3'738'
SNEW1    DC    S(NEW1)
SINCR    DC    S(INCR)
NAMESTRT DS    F
ENDNAME  DS    F
LINKLIST DS    F                        ADDR OF PASSAREA
         DC    A(EXIT)                  EXIT ROUTINE ADDR
COPYNAME DC    CL8' '                   NAME OF MEMBER TO BE COPIED FRO
DDNAME   DC    CL8' '                   DDNAME OF LIB TO BE COPIED FROM
STARTNO  DC    CL8'00000000'            STARTING NUMBER TO COPY FROM
ENDNO    DC    CL8'00000000'            ENDING NUMBER TO COPY FROM
LOCALSW  DC    X'00'                    SWITCH FOR LOCAL CONDITIONS
ADDCOPY  EQU   X'80'                    INDICATE AN ADD OR REPL TO COPY
PRNTAREA DC    CL121' '
MESG1    DC    C'0IZG001I OPERATION CODE NOT FOUND.'
MESG2    DC    C'0IZG002I OPERATION CODE CONTAINS MORE THAN EIGHT CHARA*
               CTERS.'
MESG3    DC    C'0IZG003I OPERAND FIELD NOT FOUND.'
MESG4    DC    C'0IZG004I SYNTAX ERROR IN OPERAND FIELD.'
MESG5    DC    C'0IZG005I SYNTAX REQUIRES CONTINUATION CARD BUT COLUMN *
               72 IS BLANK.'
MESG6    DC    C'0IZG006I EXPECTED CONTINUATION NOT RECEIVED.'
MESG7    DC    C'0IZG007I KEYWORD OR KEYWORD VALUE CONTAINS MORE THAN E*
               IGHT CHARACTERS.'
MESG8    DC    C'0IZG008I NUMBER CARD IS ONLY VALID CONTROL CARD WITH A*
               DD OR REPL CARD.'
MESG10   DC    C'0IZG012I NO ERRORS FOUND IN CONTROL CARD(S).'
MESG11   DC    C'0IZG017I UNDEFINED KEYWORD FOUND ON CONTROL CARD.'
MESG12   DC    C'0IZG018I NAME FIELD NOT SPECIFIED.  TEMPNAME USED.'
MESG13   DC    C'0IZG009I UNDEFINED OPERATION CODE'
HDR1     DC    CL121'  * * * M E S S A G E S  A N D  C O N T R O L  S T*
                A T M E N T S * * *'
         EJECT
***********************************************************************
*
*    TABLE OF VALID KEYWORDS.  KEEPING THE ENTRIES IN ORDER OF
*    FREQUENCY OF USE WILL OPTIMIZE ACCESS TIME.
*
***********************************************************************
KEYWDTBL DS    0F                       START OF KEY WORD TABLE
         DC    CL8'NAME'
         DC    A(MVCNAME)               ADDRESS OF NAME ROUTINE
         DC    CL8'LIST'
         DC    A(MVCLIST)
         DC    CL8'NEW1'
         DC    A(MVCNEW1)
         DC    CL8'INCR'
         DC    A(MVCINCR)
         DC    CL8'NEWNAME'             KEYWORD OF NEWNAME
         DC    A(MNEWNAME)              ADDRESS OF NEWNAME ROUTINE
         DC    CL8'SEQFLD'
         DC    A(MVCSEQFL)
         DC    CL8'SEQ1'
         DC    A(ADDONE)                ROUTINE TO SKIP THIS VALUE
         DC    CL8'SSI'
         DC    A(ADDONE)                ROUTINE TO SKIP THIS VALUE
         DC    CL8'SOURCE'
         DC    A(ADDONE)                ROUTINE TO SKIP THIS VALUE
         DC    CL8'CTLCDIND'            KEYWORD FOR CTL CARD INDICATOR
         DC    A(MVCIND)                ROUTINE TO PROCESS
KEYINCR  EQU   12                       LENTH OF EACH ENTRY
ENDKEYTB EQU   *-KEYINCR                ADDR OF LAST ENTRY
         EJECT
***********************************************************************
*
*    TABLE OF VALID OPERATION CODES.  KEEPING THE OP CODES IN ORDER
*    OF FREQUENCY OF USE WILL OPTIMIZE ACCESS TIME.
*
***********************************************************************
OPTABLE  DS    0F                       DEFINE START OF TABLE
I        DC    CL8'I'                   SHORT FORM INSERT
         DC    A(DOINSERT)              ADDR OF INSERT ROUTINE
D        DC    CL8'D'                   SHORT FORM DELETE
         DC    A(DODELETE)              ADDR OF DELETE ROUTINE
CHANGE   DC    CL8'CHANGE'              CHANGE OP
         DC    AL1(CHANGEOP),AL3(DOCHANGE) START OF NEXT CONTROL SECTIO
NOCHANGE DC    CL8'NOCHANGE'            NOCHANGE OP
         DC    AL1(NOCHNGOP),AL3(DONOCHNG) START OF NEXT CONTROL SECTIO
COMPILE  DC    CL8'COMPILE'             COMPILE OP
         DC    AL1(COMPILOP),AL3(DOCMPL)  START OF NEXT CONTROL SECTION
ADD      DC    CL8'ADD'                  ADD OPERATION
         DC    AL1(ADDOP),AL3(DOADD)     START OF NEXT CONTROL SECTION
REPL     DC    CL8'REPL'                 REPL OP
         DC    AL1(REPLOP),AL3(DOREPL)  START OF NEXT CONTROL SECTION
C        DC    CL8'C'                    SHORT FORM COPY
         DC    A(DOCOPY)                ADDR OF COPY ROUTINE
COPY     DC    CL8'COPY'                COPY OP
         DC    A(DOCOPY)                ADDRO OF COPY ROUTINE
NUMBER   DC    CL8'NUMBER'              IEBUPDTE NUMBER CARD
         DC    A(DONUMBER)              ROUTINE TO PROCESS NUMBER CARDS
INSERT   DC    CL8'INSERT'              SHORT FORM INSERT
         DC    A(DOINSERT)              ADDR OF INSERT ROUTINE
ASSEMBLE DC    CL8'ASSEMBLE'            ASSEMBLE OPERATION
         DC    AL1(ASSEMOP),AL3(DOCMPL)  START OF NEXT CONTROL SECTION
PUNCH    DC    CL8'PUNCH'                PUNCH OP
         DC    AL1(PUNCHOP),AL3(DOPUNCH) START OF NEXT CONTROL SECTION
SCRATCH  DC    CL8'SCRATCH'             SCRATCH OP
         DC    AL1(SCRTCHOP),AL3(DOSCRE)  START OF NEXT CONTROL SECTION
RENAME   DC    CL8'RENAME'              RENAME OP
         DC    AL1(RENAMEOP),AL3(DOSCRE)  START OF NEXT CONTROL SECTION
LIST     DC    CL8'LIST'                LIST AS AN OP CODE
         DC    AL1(LISTOP),AL3(DOLIST)   WHERE TO GO FOR LIST OP.
DELETE   DC    CL8'DELETE'              VALID IEBUPDTE OP CODE
         DC    A(UPDTECD)               ROUTINE TO HANDLE IEBUPDTE
ENDUP    DC    CL8'ENDUP'               ENDUP CONTROL CARD
         DC    A(DOENDUP)               ROUTINE TO PROCESS ENDUP CARDS
LASTOP   EQU   ENDUP
TABLINCR EQU   *-LASTOP
ENDTABLE EQU   LASTOP
PASSAREA PASSAREA
         END
