COMP     TITLE 'SOURCE PROGRAM COMPRESSION PROGRAM'
********       NOTE:  THIS ROUTINE IS NOT REUSABLE ********
********       SYSUT1 IS ENQUEUED UPON FOR SHARED CONTROL
********       SYSUT2 IS ENQUEUED UPON FOR EXCLUSIVE CONTROL
SQEEZSRC START 0              NAME AND ENTRY POINT
***********************************************************************
R0       EQU   0                  SYMBOLIC REGISTER DEFINITION
R1       EQU   1                  SYMBOLIC REGISTER DEFINITION
R2       EQU   2                  SYMBOLIC REGISTER DEFINITION
R3       EQU   3                  SYMBOLIC REGISTER DEFINITION
R4       EQU   4                  SYMBOLIC REGISTER DEFINITION
R5       EQU   5                  SYMBOLIC REGISTER DEFINITION
R6       EQU   6                  SYMBOLIC REGISTER DEFINITION
R7       EQU   7                  SYMBOLIC REGISTER DEFINITION
R8       EQU   8                  SYMBOLIC REGISTER DEFINITION
R9       EQU   9                  SYMBOLIC REGISTER DEFINITION
RA       EQU   10                 SYMBOLIC REGISTER DEFINITION
RB       EQU   11                 SYMBOLIC REGISTER DEFINITION
RC       EQU   12                 SYMBOLIC REGISTER DEFINITION
RD       EQU   13                 SYMBOLIC REGISTER DEFINITION
RE       EQU   14                 SYMBOLIC REGISTER DEFINITION
RF       EQU   15                 SYMBOLIC REGISTER DEFINITION
***********************************************************************
         USING *,RF           TEMPORARY ADDRESSABILITY
         SAVE  (14,12)        SAVE ALL THE REGISTERS
         CNOP  0,4            FORCE TO WORD BOUNDARY
         BAL   R2,SKIPSAVE    SAVEAREA + BASE ADDRESS IN REG. 2
         DROP  RF         END TEMPORARY ADDRESSABILITY
SAVEAREA DS    18CL4          SAVE AREA MUST FOLLOW BAL, BE ON WORD BND
***********************************************************************
SQUEEZWK DS    28D            COMPRESS AND SQUEEZE WORK AREA
SEQ#INCR DC    PL8'0100'     DBLWD INCREMENT BETWEEN SEQUENCE NUMBERS
***********************************************************************
MAJOR    DC    C'COPYDATA'    QNAME
FM8      DC    F'-8'          FULLWORD BINARY MINUS 8 CONSTANT
FM4      DC    F'-4'          FULLWORD BINARY MINUS 4 CONSTANT
FULL63   DC    F'63'          CONSTANT USED FOR COMPARING AND SUBTRACT
ADSQZPL2 DC    A(SQUEEZWK+2)  ADDRESS USED FOR COMPARE
FLAGINC4 DC    B'00100000000000000000000000000000'  FLAGS FOR INCREMENT
FLAGINC5 DC    B'00010000000000000000000000000000'  FLAGS FOR INCREMENT
CURRECAD DS    A              ADDRESS OF CURRENT RECORD IN OUT BUFFER
DUMPCODE DC    X'80000000'    REQUEST DUMP WITH ABEND FLAG WORD-ALIGNED
ROCLIST  OPEN  (QSAMIN,(INPUT),BPAMOUT,(OUTPUT)),MF=L L.RDJFCB,OPEN,CLO
EXTLSTIN DC    XL1'87',AL3(MINORIN)    RDJFCB EXIT LIST INPUT DATA SET
EXTLSTOT DC    XL1'87',AL3(MINOROUT)   RDJFCB EXIT LIST OUTPUT DATA SET
QLIST    ENQ  (MAJOR,MINORIN,S,,SYSTEM,MAJOR,MINOROUT,E,,SYSTEM),MF=L
***********************************************************************
         EJECT
***********************************************************************
QSAMIN   DCB   DDNAME=SYSUT1,      INPUT DDNAME                        C
               DSORG=PS,           PHYSICAL SEQUENTIAL                 C
               BFTEK=S,            SIMPLE BUFFERING                    C
               BFALN=D,            DOUBLEWORD BUFFER ALIGNMENT         C
               EODAD=ENDDATA,      END OF FILE ROUTINE                 C
               EXLST=EXTLSTIN,     EXIT LIST FOR READ DATA SET JFCB    C
               MACRF=GL       GET LOCATE
***********************************************************************
         EJECT
***********************************************************************
BPAMOUT  DCB   DSORG=PO,      PARTITIONED DATA SETS                    C
               MACRF=W,       WRITE                                    C
               NCP=2,         MAX # OUTSTANDING WRITES                 C
               BUFNO=0,       DO OUR OWN BUFFERING                     C
               EXLST=EXTLSTOT,     EXIT LIST FOR READ DATA SET JFCB    C
               RECFM=V,       VARIABLE LENGTH RECORDS                  C
               DDNAME=SYSUT2  DATA SET WHERE MEMBER ADDED/REPLACED
***********************************************************************
         EJECT
***********************************************************************
         WRITE DECB1,SF,BPAMOUT,MF=L   FIRST OF TWO DECB'S
         DC    A(0)           ADDRESS OF LOCATION JUST AFTER BUFFER
DECB2    DC    X'7F00000000200000',A(BPAMOUT),2A(0)  POSTED COMPL. DECB
         DC    A(0)           ADDRESS OF LOCATION JUST AFTER BUFFER
***********************************************************************
MINORIN  DC    CL44' '        DSNAME IN JFCB - INITIALLY BLANK
         DS    CL(176-44)     REST OF JFCB READ-IN AREA
MINOROUT DC    CL44' '        DSNAME IN JFCB - INITIALLY BLANK
         DS    CL(176-44)     REST OF JFCB READ-IN AREA
MEMBWORK DS    CL8            WORKAREA FOR MEMBER NAME FOR STOW
***********************************************************************
MYRELNO  DS    XL1            CURRENT RELEASE # IN PACKED UNSIGNED FORM
DATEWRK  DS    XL4            JULIAN DATE PACKED UNSIGNED + 1 BYTE CRUD
         ORG   *-1                 BACK UP OVER JUNK BYTE
BUFSSIZE DS    F              SIZE OF AREA FOR BUFFERS
***********************************************************************
BLDLLIST DC    H'1',Y(ENDBLENT-MEMBERNM)  # ENTRIES, LENGTH EACH ENTRY
MEMBERNM DC    CL8' '               FOR MEMBER NAME
STOWMEMB EQU   MEMBERNM+2     BEGINNING OF NAME + TTR IN STOW FORMAT
TTRK     DS    XL4                  TTR AND CONCATENATION #
Z        DS    XL1                  SHOULD BE 0 FOR PRIVATE LIBRARY
C        DS    BL1  BITS: ALIAS-1, # TTRN-2, # HALFWORDS USER DATA-5
SSIUDATA DS    XL4                  SSI FIELD IN USER DATA
         DS    XL58                 ROOM FOR MAXIMUM POSSIBLE USER DATA
ENDBLENT EQU   *                    END OF BLDL LIST ENTRY
***********************************************************************
GATHTABL DC    AL1(0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,20,21,22) #1
         DC    AL1(24,25,26,28,29,30,32,33,34,36,37,38,40,41,42)  #2
         DC    AL1(44,45,46,48,49,50,52,53,54,56,57,58,60,61,62)  #3
         DC    AL1(64,65,66,68,69,70,72,73,74,76,77,78,80,81,82)  #4
         DC    AL1(84,85,86,88,89,90,92,93,94,96,97,98,100,101,102)  #5
         DC    AL1(104,105,106,108,109,110,112,113,114,116,117,118)  #6
         DC    AL1(120,121,122,124,125,126,128,129,130,132,133,134)  #7
         DC    AL1(136,137,138,140,141,142,144,145,146,148,149,150)  #8
         DC    AL1(152,153,154,156,157,158,160,161,162,164,165,166)  #9
         DC    AL1(168,169,170,172,173,174,176,177,178,180,181,182) #10
         DC    AL1(184,185,186,188,189,190,192,193,194,196,197,198) #11
         DC    AL1(200,201,202,204,205,206,208,209,210,212,213,214) #12
         DC    AL1(216,217,218,220,221,222)                    LAST-#13
***********************************************************************
TBSCANOT DC    64C'FDP2'      STOP ON ANYTHING TRT TABLE
***********************************************************************
INTBLANK EQU   0                   INTERNAL REPRESENTATION OF BLANK
INTASTER EQU   1                   INTERNAL REPRESENTATION OF ASTERISK
MAXREGCH EQU   61                  MAXIMUM INTERNAL REP IN REGULAR SET
INTSTAST EQU   62        INTERNAL REPRESENTATION OF STRING OF ASTERISKS
INTSTBLN EQU   63        INTERNAL REPRESENTATION OF STRING OF BLANKS
***********************************************************************
TBEXTINT EQU   *         TABLE TO TRANSLATE FROM EBCDIC TO SPECIAL CODE
         DC    AL1(064)  INTERNAL REPRESENTATION                    000
         DC    AL1(065)  INTERNAL REPRESENTATION                    001
         DC    AL1(066)  INTERNAL REPRESENTATION                    002
         DC    AL1(067)  INTERNAL REPRESENTATION                    003
         DC    AL1(068)  INTERNAL REPRESENTATION                    004
         DC    AL1(069)  INTERNAL REPRESENTATION                    005
         DC    AL1(070)  INTERNAL REPRESENTATION                    006
         DC    AL1(071)  INTERNAL REPRESENTATION                    007
         DC    AL1(072)  INTERNAL REPRESENTATION                    008
         DC    AL1(073)  INTERNAL REPRESENTATION                    009
         DC    AL1(074)  INTERNAL REPRESENTATION                    010
         DC    AL1(075)  INTERNAL REPRESENTATION                    011
         DC    AL1(076)  INTERNAL REPRESENTATION                    012
         DC    AL1(077)  INTERNAL REPRESENTATION                    013
         DC    AL1(078)  INTERNAL REPRESENTATION                    014
         DC    AL1(079)  INTERNAL REPRESENTATION                    015
         DC    AL1(080)  INTERNAL REPRESENTATION                    016
         DC    AL1(081)  INTERNAL REPRESENTATION                    017
         DC    AL1(082)  INTERNAL REPRESENTATION                    018
         DC    AL1(083)  INTERNAL REPRESENTATION                    019
         DC    AL1(084)  INTERNAL REPRESENTATION                    020
         DC    AL1(085)  INTERNAL REPRESENTATION                    021
         DC    AL1(086)  INTERNAL REPRESENTATION                    022
         DC    AL1(087)  INTERNAL REPRESENTATION                    023
         DC    AL1(088)  INTERNAL REPRESENTATION                    024
         DC    AL1(089)  INTERNAL REPRESENTATION                    025
         DC    AL1(090)  INTERNAL REPRESENTATION                    026
         DC    AL1(091)  INTERNAL REPRESENTATION                    027
         DC    AL1(092)  INTERNAL REPRESENTATION                    028
         DC    AL1(093)  INTERNAL REPRESENTATION                    029
         DC    AL1(094)  INTERNAL REPRESENTATION                    030
         DC    AL1(095)  INTERNAL REPRESENTATION                    031
         DC    AL1(096)  INTERNAL REPRESENTATION                    032
         DC    AL1(097)  INTERNAL REPRESENTATION                    033
         DC    AL1(098)  INTERNAL REPRESENTATION                    034
         DC    AL1(099)  INTERNAL REPRESENTATION                    035
         DC    AL1(100)  INTERNAL REPRESENTATION                    036
         DC    AL1(101)  INTERNAL REPRESENTATION                    037
         DC    AL1(102)  INTERNAL REPRESENTATION                    038
         DC    AL1(103)  INTERNAL REPRESENTATION                    039
         DC    AL1(104)  INTERNAL REPRESENTATION                    040
         DC    AL1(105)  INTERNAL REPRESENTATION                    041
         DC    AL1(106)  INTERNAL REPRESENTATION                    042
         DC    AL1(107)  INTERNAL REPRESENTATION                    043
         DC    AL1(108)  INTERNAL REPRESENTATION                    044
         DC    AL1(109)  INTERNAL REPRESENTATION                    045
         DC    AL1(110)  INTERNAL REPRESENTATION                    046
         DC    AL1(111)  INTERNAL REPRESENTATION                    047
         DC    AL1(112)  INTERNAL REPRESENTATION                    048
         DC    AL1(113)  INTERNAL REPRESENTATION                    049
         DC    AL1(114)  INTERNAL REPRESENTATION                    050
         DC    AL1(115)  INTERNAL REPRESENTATION                    051
         DC    AL1(116)  INTERNAL REPRESENTATION                    052
         DC    AL1(117)  INTERNAL REPRESENTATION                    053
         DC    AL1(118)  INTERNAL REPRESENTATION                    054
         DC    AL1(119)  INTERNAL REPRESENTATION                    055
         DC    AL1(120)  INTERNAL REPRESENTATION                    056
         DC    AL1(121)  INTERNAL REPRESENTATION                    057
         DC    AL1(122)  INTERNAL REPRESENTATION                    058
         DC    AL1(123)  INTERNAL REPRESENTATION                    059
         DC    AL1(124)  INTERNAL REPRESENTATION                    060
         DC    AL1(125)  INTERNAL REPRESENTATION                    061
         DC    AL1(126)  INTERNAL REPRESENTATION                    062
         DC    AL1(127)  INTERNAL REPRESENTATION                    063
         DC    AL1(000)  INTERNAL REPRESENTATION                    064
         DC    AL1(128)  INTERNAL REPRESENTATION                    065
         DC    AL1(129)  INTERNAL REPRESENTATION                    066
         DC    AL1(130)  INTERNAL REPRESENTATION                    067
         DC    AL1(131)  INTERNAL REPRESENTATION                    068
         DC    AL1(132)  INTERNAL REPRESENTATION                    069
         DC    AL1(133)  INTERNAL REPRESENTATION                    070
         DC    AL1(134)  INTERNAL REPRESENTATION                    071
         DC    AL1(135)  INTERNAL REPRESENTATION                    072
         DC    AL1(136)  INTERNAL REPRESENTATION                    073
         DC    AL1(137)  INTERNAL REPRESENTATION                    074
         DC    AL1(002)  INTERNAL REPRESENTATION                    075
         DC    AL1(003)  INTERNAL REPRESENTATION                    076
         DC    AL1(004)  INTERNAL REPRESENTATION                    077
         DC    AL1(005)  INTERNAL REPRESENTATION                    078
         DC    AL1(006)  INTERNAL REPRESENTATION                    079
         DC    AL1(007)  INTERNAL REPRESENTATION                    080
         DC    AL1(138)  INTERNAL REPRESENTATION                    081
         DC    AL1(139)  INTERNAL REPRESENTATION                    082
         DC    AL1(140)  INTERNAL REPRESENTATION                    083
         DC    AL1(141)  INTERNAL REPRESENTATION                    084
         DC    AL1(142)  INTERNAL REPRESENTATION                    085
         DC    AL1(143)  INTERNAL REPRESENTATION                    086
         DC    AL1(144)  INTERNAL REPRESENTATION                    087
         DC    AL1(145)  INTERNAL REPRESENTATION                    088
         DC    AL1(146)  INTERNAL REPRESENTATION                    089
         DC    AL1(147)  INTERNAL REPRESENTATION                    090
         DC    AL1(008)  INTERNAL REPRESENTATION                    091
         DC    AL1(001)  INTERNAL REPRESENTATION                    092
         DC    AL1(009)  INTERNAL REPRESENTATION                    093
         DC    AL1(010)  INTERNAL REPRESENTATION                    094
         DC    AL1(011)  INTERNAL REPRESENTATION                    095
         DC    AL1(012)  INTERNAL REPRESENTATION                    096
         DC    AL1(013)  INTERNAL REPRESENTATION                    097
         DC    AL1(148)  INTERNAL REPRESENTATION                    098
         DC    AL1(149)  INTERNAL REPRESENTATION                    099
         DC    AL1(150)  INTERNAL REPRESENTATION                    100
         DC    AL1(151)  INTERNAL REPRESENTATION                    101
         DC    AL1(152)  INTERNAL REPRESENTATION                    102
         DC    AL1(153)  INTERNAL REPRESENTATION                    103
         DC    AL1(154)  INTERNAL REPRESENTATION                    104
         DC    AL1(155)  INTERNAL REPRESENTATION                    105
         DC    AL1(156)  INTERNAL REPRESENTATION                    106
         DC    AL1(014)  INTERNAL REPRESENTATION                    107
         DC    AL1(015)  INTERNAL REPRESENTATION                    108
         DC    AL1(016)  INTERNAL REPRESENTATION                    109
         DC    AL1(017)  INTERNAL REPRESENTATION                    110
         DC    AL1(018)  INTERNAL REPRESENTATION                    111
         DC    AL1(157)  INTERNAL REPRESENTATION                    112
         DC    AL1(158)  INTERNAL REPRESENTATION                    113
         DC    AL1(159)  INTERNAL REPRESENTATION                    114
         DC    AL1(160)  INTERNAL REPRESENTATION                    115
         DC    AL1(161)  INTERNAL REPRESENTATION                    116
         DC    AL1(162)  INTERNAL REPRESENTATION                    117
         DC    AL1(163)  INTERNAL REPRESENTATION                    118
         DC    AL1(164)  INTERNAL REPRESENTATION                    119
         DC    AL1(165)  INTERNAL REPRESENTATION                    120
         DC    AL1(166)  INTERNAL REPRESENTATION                    121
         DC    AL1(019)  INTERNAL REPRESENTATION                    122
         DC    AL1(020)  INTERNAL REPRESENTATION                    123
         DC    AL1(021)  INTERNAL REPRESENTATION                    124
         DC    AL1(022)  INTERNAL REPRESENTATION                    125
         DC    AL1(023)  INTERNAL REPRESENTATION                    126
         DC    AL1(024)  INTERNAL REPRESENTATION                    127
         DC    AL1(167)  INTERNAL REPRESENTATION                    128
         DC    AL1(168)  INTERNAL REPRESENTATION                    129
         DC    AL1(169)  INTERNAL REPRESENTATION                    130
         DC    AL1(170)  INTERNAL REPRESENTATION                    131
         DC    AL1(171)  INTERNAL REPRESENTATION                    132
         DC    AL1(172)  INTERNAL REPRESENTATION                    133
         DC    AL1(173)  INTERNAL REPRESENTATION                    134
         DC    AL1(174)  INTERNAL REPRESENTATION                    135
         DC    AL1(175)  INTERNAL REPRESENTATION                    136
         DC    AL1(176)  INTERNAL REPRESENTATION                    137
         DC    AL1(177)  INTERNAL REPRESENTATION                    138
         DC    AL1(178)  INTERNAL REPRESENTATION                    139
         DC    AL1(179)  INTERNAL REPRESENTATION                    140
         DC    AL1(180)  INTERNAL REPRESENTATION                    141
         DC    AL1(181)  INTERNAL REPRESENTATION                    142
         DC    AL1(182)  INTERNAL REPRESENTATION                    143
         DC    AL1(183)  INTERNAL REPRESENTATION                    144
         DC    AL1(184)  INTERNAL REPRESENTATION                    145
         DC    AL1(185)  INTERNAL REPRESENTATION                    146
         DC    AL1(186)  INTERNAL REPRESENTATION                    147
         DC    AL1(187)  INTERNAL REPRESENTATION                    148
         DC    AL1(188)  INTERNAL REPRESENTATION                    149
         DC    AL1(189)  INTERNAL REPRESENTATION                    150
         DC    AL1(190)  INTERNAL REPRESENTATION                    151
         DC    AL1(191)  INTERNAL REPRESENTATION                    152
         DC    AL1(192)  INTERNAL REPRESENTATION                    153
         DC    AL1(193)  INTERNAL REPRESENTATION                    154
         DC    AL1(194)  INTERNAL REPRESENTATION                    155
         DC    AL1(195)  INTERNAL REPRESENTATION                    156
         DC    AL1(196)  INTERNAL REPRESENTATION                    157
         DC    AL1(197)  INTERNAL REPRESENTATION                    158
         DC    AL1(198)  INTERNAL REPRESENTATION                    159
         DC    AL1(199)  INTERNAL REPRESENTATION                    160
         DC    AL1(200)  INTERNAL REPRESENTATION                    161
         DC    AL1(201)  INTERNAL REPRESENTATION                    162
         DC    AL1(202)  INTERNAL REPRESENTATION                    163
         DC    AL1(203)  INTERNAL REPRESENTATION                    164
         DC    AL1(204)  INTERNAL REPRESENTATION                    165
         DC    AL1(205)  INTERNAL REPRESENTATION                    166
         DC    AL1(206)  INTERNAL REPRESENTATION                    167
         DC    AL1(207)  INTERNAL REPRESENTATION                    168
         DC    AL1(208)  INTERNAL REPRESENTATION                    169
         DC    AL1(209)  INTERNAL REPRESENTATION                    170
         DC    AL1(210)  INTERNAL REPRESENTATION                    171
         DC    AL1(211)  INTERNAL REPRESENTATION                    172
         DC    AL1(212)  INTERNAL REPRESENTATION                    173
         DC    AL1(213)  INTERNAL REPRESENTATION                    174
         DC    AL1(214)  INTERNAL REPRESENTATION                    175
         DC    AL1(215)  INTERNAL REPRESENTATION                    176
         DC    AL1(216)  INTERNAL REPRESENTATION                    177
         DC    AL1(217)  INTERNAL REPRESENTATION                    178
         DC    AL1(218)  INTERNAL REPRESENTATION                    179
         DC    AL1(219)  INTERNAL REPRESENTATION                    180
         DC    AL1(220)  INTERNAL REPRESENTATION                    181
         DC    AL1(221)  INTERNAL REPRESENTATION                    182
         DC    AL1(222)  INTERNAL REPRESENTATION                    183
         DC    AL1(223)  INTERNAL REPRESENTATION                    184
         DC    AL1(224)  INTERNAL REPRESENTATION                    185
         DC    AL1(225)  INTERNAL REPRESENTATION                    186
         DC    AL1(226)  INTERNAL REPRESENTATION                    187
         DC    AL1(227)  INTERNAL REPRESENTATION                    188
         DC    AL1(228)  INTERNAL REPRESENTATION                    189
         DC    AL1(229)  INTERNAL REPRESENTATION                    190
         DC    AL1(230)  INTERNAL REPRESENTATION                    191
         DC    AL1(231)  INTERNAL REPRESENTATION                    192
         DC    AL1(025)  INTERNAL REPRESENTATION                    193
         DC    AL1(026)  INTERNAL REPRESENTATION                    194
         DC    AL1(027)  INTERNAL REPRESENTATION                    195
         DC    AL1(028)  INTERNAL REPRESENTATION                    196
         DC    AL1(029)  INTERNAL REPRESENTATION                    197
         DC    AL1(030)  INTERNAL REPRESENTATION                    198
         DC    AL1(031)  INTERNAL REPRESENTATION                    199
         DC    AL1(032)  INTERNAL REPRESENTATION                    200
         DC    AL1(033)  INTERNAL REPRESENTATION                    201
         DC    AL1(232)  INTERNAL REPRESENTATION                    202
         DC    AL1(233)  INTERNAL REPRESENTATION                    203
         DC    AL1(234)  INTERNAL REPRESENTATION                    204
         DC    AL1(235)  INTERNAL REPRESENTATION                    205
         DC    AL1(236)  INTERNAL REPRESENTATION                    206
         DC    AL1(237)  INTERNAL REPRESENTATION                    207
         DC    AL1(238)  INTERNAL REPRESENTATION                    208
         DC    AL1(034)  INTERNAL REPRESENTATION                    209
         DC    AL1(035)  INTERNAL REPRESENTATION                    210
         DC    AL1(036)  INTERNAL REPRESENTATION                    211
         DC    AL1(037)  INTERNAL REPRESENTATION                    212
         DC    AL1(038)  INTERNAL REPRESENTATION                    213
         DC    AL1(039)  INTERNAL REPRESENTATION                    214
         DC    AL1(040)  INTERNAL REPRESENTATION                    215
         DC    AL1(041)  INTERNAL REPRESENTATION                    216
         DC    AL1(042)  INTERNAL REPRESENTATION                    217
         DC    AL1(239)  INTERNAL REPRESENTATION                    218
         DC    AL1(240)  INTERNAL REPRESENTATION                    219
         DC    AL1(241)  INTERNAL REPRESENTATION                    220
         DC    AL1(242)  INTERNAL REPRESENTATION                    221
         DC    AL1(243)  INTERNAL REPRESENTATION                    222
         DC    AL1(244)  INTERNAL REPRESENTATION                    223
         DC    AL1(245)  INTERNAL REPRESENTATION                    224
         DC    AL1(246)  INTERNAL REPRESENTATION                    225
         DC    AL1(043)  INTERNAL REPRESENTATION                    226
         DC    AL1(044)  INTERNAL REPRESENTATION                    227
         DC    AL1(045)  INTERNAL REPRESENTATION                    228
         DC    AL1(046)  INTERNAL REPRESENTATION                    229
         DC    AL1(047)  INTERNAL REPRESENTATION                    230
         DC    AL1(048)  INTERNAL REPRESENTATION                    231
         DC    AL1(049)  INTERNAL REPRESENTATION                    232
         DC    AL1(050)  INTERNAL REPRESENTATION                    233
         DC    AL1(247)  INTERNAL REPRESENTATION                    234
         DC    AL1(248)  INTERNAL REPRESENTATION                    235
         DC    AL1(249)  INTERNAL REPRESENTATION                    236
         DC    AL1(250)  INTERNAL REPRESENTATION                    237
         DC    AL1(251)  INTERNAL REPRESENTATION                    238
         DC    AL1(252)  INTERNAL REPRESENTATION                    239
         DC    AL1(051)  INTERNAL REPRESENTATION                    240
         DC    AL1(052)  INTERNAL REPRESENTATION                    241
         DC    AL1(053)  INTERNAL REPRESENTATION                    242
         DC    AL1(054)  INTERNAL REPRESENTATION                    243
         DC    AL1(055)  INTERNAL REPRESENTATION                    244
         DC    AL1(056)  INTERNAL REPRESENTATION                    245
         DC    AL1(057)  INTERNAL REPRESENTATION                    246
         DC    AL1(058)  INTERNAL REPRESENTATION                    247
         DC    AL1(059)  INTERNAL REPRESENTATION                    248
         DC    AL1(060)  INTERNAL REPRESENTATION                    249
         DC    AL1(253)  INTERNAL REPRESENTATION                    250
         DC    AL1(254)  INTERNAL REPRESENTATION                    251
         DC    AL1(255)  INTERNAL REPRESENTATION                    252
         DC    AL1(062)  INTERNAL REPRESENTATION                    253
         DC    AL1(063)  INTERNAL REPRESENTATION                    254
         DC    AL1(061)  INTERNAL REPRESENTATION                    255
***********************************************************************
TBSCREG1 EQU   *         TABLE TO SEARCH FOR CHARS. W/SPECIAL HANDLING
         DC    AL1(HITBLANK)       BRANCH OFFSET OF BLANKS ROUTINE
         DC    AL1(HITASTER)       BRANCH OFFSET OF ASTERISKS ROUTINE
         DC    (MAXREGCH-1)XL1'00'   TRT NOT STOP ON THESE CHARACTERS
         DC    02AL1(HITNOREG)     BRANCH OFFSET OF UNUSUAL CHAR RTN
         DC    64AL1(HITNOREG)     BRANCH OFFSET OF UNUSUAL CHAR RTN
         DC    64AL1(HITNOREG)     BRANCH OFFSET OF UNUSUAL CHAR RTN
         DC    64AL1(HITNOREG)     BRANCH OFFSET OF UNUSUAL CHAR RTN
***********************************************************************
CURSEQ#R DS    PL5                 CURRENT SEQUENCE NUMBER
WORKSEQ# DC    PL5'0'              WORK SEQUENCE # AREA
***********************************************************************
         USING SAVEAREA,RD    SAVE AREA POINTER USED AS BASE
MOVBYTES MVC   0(0,R3),0(R4)       MOVE CODED BYTES TO OUTPUT WORK AREA
SCANREG1 TRT   1(0,R1),TBSCREG1    SCAN FOR BLANKS, **'S, IRREGULAR CHR
SCANOT   TRT   1(0,RE),TBSCANOT    SCAN FOR NON-REPEATING CHARACTER
MOVETABL MVC   0(0,R1),GATHTABL    MOVE TABLE TO GATHER 3 OF 4
GATH3OF4 TR    0(0,R1),SQUEEZWK    GATHER 3 OUT OF 4 BYTES INTO BUFFER
MVTBLRST MVC   0(0,R1),0(RF)         MOVE TABLE TO GATHER REST
MOVMNAME MVC   MEMBERNM(0),2(R1)   EXECUTED MOVE OF MEMBER NAME
SKIPPACK B     TST1STCL            MOVED TO PACK INST IF NO SEQ #'S
***********************************************************************
SKIPSAVE ST    RD,4(,R2)           BACKWARD CHAIN
         ST    R2,8(,RD)           FORWARD CHAIN
         LR    RD,R2          COPY MY SAVE AREA ADDRESS TO REG 13
***********************************************************************
         L     R1,0(,R1)      ACQUIESCE IN THE PERVASIVE INDIRECTNESS
         LH    R2,0(,R1)      LENGTH OF PARAMETER FROM EXEC CARD
         LTR   R2,R2          TEST LENGTH OF PARAMETER FROM EXEC CARD
         BZ    TILT11         IF NO PARAMETER GO ABEND
         BCTR  R2,0           LENGTH OF PARAMETER - 1 FOR MOVE
         EX    R2,MOVMNAME    MOVE MEMBER NAME FROM EXEC CARD PARAMETER
         MVC   MEMBWORK,MEMBERNM   MOVE NAME TO SET UP IN STOW FORMAT
         L     R2,CVTPTR      CVT ADDRESS FOR DATE + RELEASE #
         A     R2,FM8         BACK UP TO 8 BYTES BEFORE THE CVT
         USING DCVT,R2        ADDRESSABILITY FOR CVT
         PACK  MYRELNO(L'MYRELNO+1),CVTRELNO(3) PACKED UNSIGNED REL. #
         MVO   DATEWRK,CVTDATE+1(3)  YEAR, DAY # IN PACKED UNSIGNED
******** NOTE THAT THE MVO TO DATEWRK MUST BE PRIOR TO STORE BUFSSIZE
         DROP  R2             END CVT ADDRESSABILITY
        RDJFCB ,MF=(E,ROCLIST)         USE REMOTE LIST
         CLI   MINORIN,C' '   SEE IF RDJFCB WORKED OK
         BE    TILT1          IF RDJFCB FAILED, GO ABEND
         CLI   MINOROUT,C' '  SEE IF RDJFCB WORKED OK
         BE    TILT2          IF RDJFCB FAILED, GO ABEND
         ENQ   ,MF=(E,QLIST)  ENQUEUE UPON INPUT + OUTPUT DATA SETS
         OPEN  ,MF=(E,ROCLIST),TYPE=J  USE REMOTE LIST, + HAVE JFCB
         TM    OOFLGS+QSAMIN,X'10'   SEE IF OPEN WAS SUCCESSFUL
         BZ    TILT1          ABEND IF INPUT OPEN WAS NOT SUCCESSFUL
         TM    OOFLGS+BPAMOUT,X'10'  SEE IF OPEN WAS SUCCESSFUL
         BZ    TILT2          ABEND IF OUTPUT OPEN WAS NOT SUCCESSFUL
NOTFIXED EQU   B'01000000'    IF THIS BIT IS ON RECFM IS VAR OR UND
FIXORUND EQU   B'10000000'    IF THIS BIT IS ON RECFM IS FIXED OR UNDEF
         TM    ORECFM+QSAMIN,FIXORUND   SEE IF RECFM IS FIXED ANYTHING
         BNO   TILT7          ABEND IF INPUT RECFM NOT F,FB,FBS,FA,ETC
         TM    ORECFM+QSAMIN,NOTFIXED   SEE IF RECFM IS FIXED ANYTHING
         BO    TILT7          ABEND IF INPUT RECFM NOT F,FB,FBS,FA,ETC
         BLDL  BPAMOUT,BLDLLIST   BUILD 1-ENTRY MEMBER DIRECTORY LIST
         B     BLDLBTAB(RF)   BRANCH TO BRANCH TABLE FOR RETURN CODE
***********************************************************************
BLDLBTAB B     BLDLOKAY       RETURN CODE 0 SO BLDL WAS OKAY
         B     NEWMEMBR       MEMBER NOT CURRENTLY IN THIS PDS     RC 4
********       TILT9 FOR UNCORRECTABLE ERROR SEARCHING DIRECTORY - BLDL
TILT9    LA    R1,900         COMPLETION CODE FOR ABEND DUMP IN R1 RC 8
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
***********************************************************************
NEWMEMBR MVI   C,0            MAKE IT NO HALFWORDS USER DATA NEW MEMBER
ALIASTTR EQU   B'11100000'    MASK FOR ALIAS + TTR/NOTELIST BITS IN C
BLDLOKAY TM    C,ALIASTTR     SEE IF ALIAS, TTR/NOTELIST USED - BAD
         BNZ   TILT3          IF ALIAS OR TTR PRESENT, ABEND
         LH    R8,OBLKSI+BPAMOUT   BLOCK, I.E. BUFFER, SIZE
         LA    R5,3(,R8)           FULLWORD MULTIPLE FOR BLKSIZE
         N     R5,FM4              FULLWORD MULTIPLE FOR BLKSIZE
         LR    R0,R5          COPY FULLWORD MULTIPLE FOR BLKSIZE
         ALR   R0,R0           2 * FULLWORD MULTIPLE FOR BLKSIZE
         ST    R0,BUFSSIZE    SIZE OF AREA FOR BUFFERS
         GETMAIN R,LV=(0)     GET CORE FOR BUFFERS
         ST    R1,ODECBUFR+DECB1   STORE ADDRESS OF 1ST BUFFER
         LA    R4,8(,R1)      INITIALIZE R4 TO ADDR. OF 1ST RECORD
         ST    R4,CURRECAD    STORE ADDRESS OF FIRST RECORD
         SLR   R2,R2          CLEAR R2 FOR TRT TABLE INST. OFFSETS
         LR    R4,R8               COPY BLOCKSIZE
         A     R4,FM4              ADD -4 FOR LRECL
         STH   R8,0(,R1)           BLOCKSIZE FOR ALL BUT LAST BLOCK
         STH   R2,2(,R1)           ZERO BLOCK DESCRIPTOR WORD
         STH   R4,4(,R1)           LRECL FOR ALL BUT LAST RECORD
         STH   R2,6(,R1)           ZERO RECORD DESCRIPTOR WORD
         STH   R4,OLRECL+BPAMOUT   FILL IN DCBLRECL
         LA    R7,DECB1       INITIALIZE REGS. FOR DECBS + BUFFERS
         USING DECBDSCT,R7         ADDRESSABILITY 1ST DECB DSECT
         LR    R3,R1               COPY ADDRESS OF FIRST BUFFER
         ALR   R3,R8               ADDRESS AFTER MAXIMUM BLOCK
         ST    R3,AFTBUFAD         STORE ADDRESS OF JUST PAST BUFFER
         DROP  R7             END ADDRESSABILITY 1ST BUFFER DECB DSECT
         ALR   R1,R5               ADDRESS OF 2ND BUFFER ON FULLWD BND.
         ST    R1,ODECBUFR+DECB2   STORE ADDRESS OF 2ND BUFFER
         STH   R8,0(,R1)           BLOCKSIZE FOR ALL BUT LAST BLOCK
         STH   R2,2(,R1)           ZERO BLOCK DESCRIPTOR WORD
         STH   R4,4(,R1)           LRECL FOR ALL BUT LAST RECORD
         STH   R2,6(,R1)           ZERO RECORD DESCRIPTOR WORD
         LA    R6,DECB2       INITIALIZE REGS. FOR DECBS + BUFFERS
         USING DECBDSCT,R6         ADDRESSABILITY 2ND BUFFER DSECT
         ALR   R1,R8               ADDRESS AFTER MAXIMUM BLOCK
         ST    R1,AFTBUFAD         STORE ADDRESS OF JUST PAST BUFFER
         DROP  R6             END ADDRESSABILITY 2ND BUFFER DECB DSECT
         XR    R6,R7          LOGICAL DIFFERENCE TO FLIP BETWEEN DECBS
         LA    R3,SQUEEZWK    INITIALIZE SQUEEZWK ADDRESS
         GET   QSAMIN         ADDRESS OF CARD IMAGE IN R1
         LA    R5,78(,R1)          POINT TO NEXT TO LAST BYTE TO SCAN
         LA    RF,8                MAX # SEQ # DIGITS
SEQ#LOOP CLI   1(R5),C'0'          IS IT NUMERIC?
         BL    NOTNUMER            BRANCH IF NOT NUMERIC
         CLI   1(R5),C'9'          IS IT NUMERIC?
         BH    NOTNUMER            BRANCH IF NOT NUMERIC
         BCTR  R5,0                DECREMENT R5
         BCT   RF,SEQ#LOOP         DECREMENT COUNT AND LOOP
********       IF FALL THRU DEFAULT 8 SEQ #'S APPLIES
         B     DEFAULT8            BRANCH TO CONTINUE REGULAR PROCESS
***********************************************************************
NOTNUMER LA    RE,70(,RF)          OFFSET OF NEXT TO LAST BYTE TO SCAN
         STC   RE,POINTEND+3       OFFSET OF NEXT TO LAST BYTE TO SCAN
         MVI   0(R3),INTSTAST      FLAG FOR **'S OR SPECIAL ROUTINE
         MVI   1(R3),0             FLAG FOR SPECIAL ROUTINE
         LA    RE,2(,RE)           OFFSET OF FIRST BYTE TO PACK
         STC   RE,PACKSEQ#+5       OFFSET OF FIRST BYTE TO PACK
         LA    RF,79               OFFSET OF LAST BYTE TO PACK
         SR    RF,RE               ONE LESS THAN # OF BYTES TO PACK
         BM    DONTPACK            BRANCH IF NOTHING TO PACK
         STC   RF,2(,R3)           STORE ONE LESS THAN # TO PACK
         OI    2(R3),B'00110000'   SHOW IS NEW # OF SEQUENCE #'S
         LA    R3,3(,R3)           INCR PAST SPECIAL SEQ INDICATOR
         LA    RF,X'40'(RF)        ADD IN PACKED LENGTH -1
         STC   RF,PACKSEQ#+1       STORE LENGTHS IN PACK INST.
         BCTR  RE,0                ONE LESS THAN # OF BYTES TO TRANS
         STC   RE,TRANCARD+1       ONE LESS THAN # OF BYTES TO TRANS
         B     DEFAULT8            BRANCH TO CONTINUE REGULAR PROCESS
***********************************************************************
DONTPACK MVC   PACKSEQ#(4),SKIPPACK  CHANGE PACK TO BRANCH
         MVI   TRANCARD+1,79       ONE LESS THAN # OF BYTES TO TRANS
         MVI   2(R3),B'00111111'   SHOW NOTHING FOR SEQ # #
         LA    R3,3(,R3)           INCR PAST SPECIAL SEQ INDICATOR
BRANBASE EQU   *              BASE FOR TRT TABLE INSTRUCTION OFFSETS
         B     DEFAULT8            BRANCH TO CONTINUE REGULAR PROCESS
***********************************************************************
         USING DECBDSCT,R7         ADDRESSABILITY ANY DECB DSECT
HITASTER EQU   *-BRANBASE          BRANCH HERE IF SCAN HITS AN ASTERISK
         CLI   1(R1),INTASTER  IS NEXT CHAR ALSO AN ASTERISK?
         BNE   SCANLOOP       IF ARE < 3 ****'S, CONTINUE SCAN
         CLR   R1,R5          WAS HIT ON NEXT TO LAST COLUMN?
         BE    THRUSCAN       IF SO, NO MORE SCAN, MOVE TO WORKAREA
         CLI   2(R1),INTASTER  IS 3RD CHAR. ALSO AN ASTERISK?
         BNE   SCANINCR       IF ARE < 3 ****'S, CONTINUE SCAN
MOREASTR EQU   *              ROUTINE TO HANDLE STRING OF MORE THAN TWO
         LR    RF,R1          ENDING ADDRESS FOR MOVE WITH 1 *
         SLR   RF,R4               CALCULATE LENGTH OF MOVE (-1)
         EX    RF,MOVBYTES         MOVE CODED BYTES TO OUTPUT WORK AREA
         ALR   R3,RF          ADDR OF 1ST ASTER FLAG IN OUT WORKAREA
         LA    RE,2(,R1)      ADDRESS OF 3RD *
         LR    RF,R5               CURRENT ENDING ADDRESS OF SCAN (-1)
         SR    RF,RE          CALCULATE ONE LESS THAN LENGTH OF SCAN
         BM    RESTASTR       BRANCH IF NOTHING LEFT TO SCAN
         MVI   TBSCANOT+INTASTER,0  TRT NOT STOP ON INTERNAL CODE *
         EX    RF,SCANOT      SCAN FOR FIRST NON-ASTERISK
         MVI   TBSCANOT+INTASTER,255 RESTORE TRT TABLE TO STOP ON ANY
         BZ    RESTASTR       BRANCH IF ALL OF SCAN WAS ASTERISKS
         LR    R4,R1               STARTING POINT FOR NEXT MOVE
         LR    R0,R1          COPY ADDRESS OF FIRST NON-ASTERISK
         SLR   R0,RE          CALCULATE NUMBER OF ****'S IN STRING -2
         CL    R0,FULL63      COMPARE # IN REGISTER TO 63
         BNL   MORATH64       BRANCH IF R0 > 62, I. E. # ****'S > 64
FLAGSAST MVI   0(R3),INTSTAST      FLAG FOR STRING OF ASTERISKS
         STC   R0,1(,R3)      STORE # IN STRING -2
         LA    R3,2(,R3)      INCREMENT OUT WORK AREA ADDRESS
         BCT   R1,SCANLOOP    START SCAN AT FIRST NON-ASTERISK
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
MORATH64 BE    EXACT65A       BRANCH IF EXACTLY 65 ****'S, R2 = 63
         SL    R0,FULL63      REDUCE NUMBER BY 63
         MVI   0(R3),INTSTAST      FLAG FOR STRING OF ASTERISKS
         MVI   1(R3),61       SHOW 63 SAME CHAR IN STRING THUS FAR
         LA    R3,2(,R3)      INCREMENT OUT WORK AREA ADDRESS
         B     FLAGSAST       BRANCH TO HANDLE REMAINING ASTERISKS
***********************************************************************
EXACT65A LA    R3,1(,R3)      INCREMENT PAST SINGLE * INDICATION
         BCT   R0,FLAGSAST    DECREMENT FOR # LEFT NOW -2 WHICH IS 62
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
RESTASTR MVI   0(R3),INTSTAST      FLAG FOR STRING OF ASTERISKS
         MVI   1(R3),63       SHOW REST OF CARD IS IS THE SAME CHAR
         LA    R3,1(,R3)      INCREMENT TO LAST OF OUTPUT WORKAREA
         CL    R3,ADSQZPL2    SEE IF A WORD IN CONVERSION WORK AREA
         BH    THRUMOVE       IF SO GO PROCESS CARD IN CONVERSION WORK
         LA    R3,1(,R3)      INCREMENT TO NEXT POSITION OF OUTPUT WORK
         B     GETCARD        IF NOT GO GET ANOTHER CARD
***********************************************************************
HITNOREG EQU   *-BRANBASE     HERE IF SCAN HITS AN UNUSUAL CHARACTER
         LR    RF,R1          ADDRESS JUST PAST MOVE IF ANY
         SR    RF,R4          CALCULATE TRUE LENGTH OF MOVE
         BZ    DONTMOVE       BRANCH IF NOTHING TO MOVE
         EX    RF,MOVBYTES         MOVE CODED BYTES TO OUTPUT WORK AREA
         ALR   R3,RF          ADDR OF NEXT SPACE IN OUTPUT WORKAREA
DONTMOVE EQU   *              BRANCH HERE IF NOTHING TO MOVE
         LA    R4,1(,R1)           START ADDRESS FOR NEXT MOVE
         MVI   0(R3),INTSTAST      FLAG FOR STRING OF ***'S OR UNUSUAL
         MVI   1(R3),0             SHOW UNPACKED UNUSUAL CHARACTER NEXT
         UNPK  2(3,R3),0(2,R1)     UNPACK UNUSUAL CHAR + 1 BYTE CRUD
         MVZ   2(2,R3),FULL63      ZERO LEFT HALFBYTES OF UNPACKED
         LA    R3,3(,R3)      INCREMENT OUT WORK AREA ADDRESS
ANYMOSPC CLR   R1,R5               WAS UNUSUAL CHAR LAST OF SCAN?
         BH    THRUMOVE            IF SO, GO PROCESS SQUEEZWK WORKAREA
         CLI   0(R4),MAXREGCH      IS THE NEXT CHARACTER UNUSUAL?
         BH    MORESPEC            IF SO, GO PROCESS MORE UNUSUAL CHAR
         LA    R3,1(,R3)      INCREMENT OUT WORK AREA ADDRESS
         B     SCANLOOP            NEXT NOT UNUSUAL, GO SCAN
***********************************************************************
MORESPEC OI    0(R3),B'00110000'   FLAG PREV UNUSUAL TO SHOW ANOTHER
         UNPK  1(3,R3),0(2,R4)     UNPACK UNUSUAL CHAR + 1 BYTE CRUD
         MVZ   1(2,R3),FULL63      ZERO LEFT HALFBYTES OF UNPACKED
         LR    R1,R4               1 BYTE BEFORE START NEXT SCAN
         LA    R4,1(,R4)      INCREMENT NEXT MOVE STARTING LOCATION
         LA    R3,2(,R3)      INCREMENT OUT WORK AREA ADDRESS
         B     ANYMOSPC            GO SEE IF WE ARE AT END OF SCAN
***********************************************************************
HITBLANK EQU   *-BRANBASE          BRANCH HERE IF SCAN HITS A BLANK
         CLI   1(R1),INTBLANK  IS NEXT CHAR ALSO A BLANK?
         BNE   SCANLOOP       IF ARE < 3 BLANKS, CONTINUE SCAN
         CLR   R1,R5          WAS HIT ON NEXT TO LAST COLUMN?
         BE    THRUSCAN       IF SO, NO MORE SCAN, MOVE TO WORKAREA
         CLI   2(R1),INTBLANK  IS 3RD CHAR. ALSO A BLANK?
         BE    MOREBLAN            IF LESS THAN 3, CONTINUE SCAN
SCANINCR LA    R1,1(,R1)      INCREMENT TO START SCAN AFTER 2 SAME CHAR
SCANLOOP EQU   *        LOOP SCANS FOR CHARS. NEEDING SPECIAL TREATMENT
         LR    RF,R5               CURRENT ENDING ADDRESS OF SCAN (-1)
         SLR   RF,R1               CALCULATE LENGTH OF SCAN (-1 FOR EX)
         EX    RF,SCANREG1         SEE IF ANY BLANKS, **'S, DIF'T SHIFT
         BL    BRANBASE(R2)   IF HIT NOT LAST, BR INDXD BY FUNCTION BYT
         BH    LASTBYTE       BRANCH IF HIT ON LAST BYTE OF RECORD
THRUSCAN EQU   *              SCANNED TO END OF RECORD
         LA    R5,1(,R5)      ADDRESS OF LAST BYTE TO MOVE
         SLR   R5,R4          CALC. LENGTH (-1) FOR MOVE REST
         EX    R5,MOVBYTES    MOVE REMAINDER OF CARD IMAGE INT. CODE
         ALR   R3,R5          ENDING POINT FOR LOOP
THRUMOVE EQU   *              ALL OF CARD MOVED TO 8 TO 6 CONVERT AREA
         LA    R2,4           INCREMENT FOR LOOP
         SLR   R3,R2          SUBTRACT 4 FROM LIMIT
         LA    R4,SQUEEZWK-1  STARTING POINT FOR LOOP
         LR    R5,R4          COPY ADDR. OF SQUEEZWK-1 FOR USE LATER
********       NOTE THAT THERE WILL BE AT LEAST 1 WORD TO PROCESS BELOW
         USING SQUEEZWD-1,R4  DSECT ADDRESSABILITY TO AVOID DIAGNOSTIC
BYTE4TO3 L     R0,SQUEEZWD    DSECT TO AVOID DIAGNOSTIC
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         SRL   R0,2           SHIFT OUT 2 BITS
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         SRL   R0,2           SHIFT OUT 2 BITS
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         SRL   R0,2           SHIFT OUT 2 BITS
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         ST    R1,SQUEEZWD    STORE 3 BYTES OF 4 6-BIT CHARACTERS
         BXLE  R4,R2,BYTE4TO3 LOOP CHANGING 8-BIT TO 6-BIT CHARACTERS
         DROP  R4             END ADDRESSABILITY OF SQUEEZWD
         ALR   R3,R2          ADD 4 BACK TO POINT TO LAST BYTE OF DATA
         LR    R1,R4          COPY ADDRESS END OF THE LAST FULL WORD
         SLR   R1,R5          # OF BYTES OF FULL 4 TO 3 WORDS TO GATHER
         LR    R5,R1          # OF BYTES OF FULL 4 TO 3 WORDS TO GATHER
         SRL   R1,2           # OF WORDS OF FULL 4 TO 3 WORDS TO GATHER
         SLR   R5,R1          # OF BYTES AFTER GATHERING 3 OUT OF 4
         L     R0,CURRECAD    ADDRESS OF AVAILABLE SPACE IN BUFFER
         LR    R1,R0          COPY ADDRESS
         ALR   R0,R5          ADDRESS OF NEXT SPACE IN BUFFER
         C     R0,AFTBUFAD    WILL ALL OF THIS FIT IN BUFFER?
         BNL   NOTALFIT       BRANCH IF NOT ALL FIT OR JUST FITS
         BCTR  R5,0           ONE LESS THAN # OF BYTES
         EX    R5,MOVETABL    MOVE TABLE FOR GATHERING 3 OF 4 BYTES
         EX    R5,GATH3OF4    GATHER 3 OUT OF 4 BYTES INTO BUFFER
NEWRECAD ST    R0,CURRECAD    UPDATE NEXT REC IN BUFFER ADDRESS
         SR    R3,R4          SEE IF ANY MODULUS 4 LEFTOVERS
         BZ    NONEMOD3       IF NOT DON'T MOVE
         MVC   SQUEEZWK(3),1(R4)   MOVE LEFTOVERS MAXIMUM TO BEGIN WKAR
NONEMOD3 LA    R3,SQUEEZWK(R3)     START AGAIN AFTER LEFTOVER IF ANY
GETCARD  EQU   *              GET A CARD IMAGE ADDRESS IN R1
         GET   QSAMIN         ADDRESS OF CARD IMAGE IN R1
POINTEND LA    R5,70(,R1)          POINT TO NEXT TO LAST BYTE TO SCAN
DEFAULT8 EQU   *              BRANCH HERE TO CONTINUE REGULAR PROCESS
         LR    R4,R1               STARTING POINT FOR NEXT MOVE
TRANCARD TR    0(72,R1),TBEXTINT   TRANSLATE TO INTERNAL CODE
PACKSEQ# PACK  CURSEQ#R,72(8,R1)   PACK SEQUENCE #
         OI    CURSEQ#R+4,X'0F'    FORCE VALID SIGN
         AP    WORKSEQ#,SEQ#INCR   GENERATE NEXT SEQ # IF SAME INCREMEN
         CP    CURSEQ#R,WORKSEQ#   SEE IF SAME INCREMENT
         BNE   DIFFINCR            BRANCH IF DIFFERENT INCREMENT
TST1STCL CLI   0(R1),INTBLANK      IS FIRST COLUMN BLANK
         BE    BRANBASE+HITBLANK   IF SO GO SEE HOW MANY BLANKS
         BCT   R1,SCANLOOP    START SCAN AT BEGINNING OF RECORD
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
NOTALFIT L     R2,AFTBUFAD    ADDRESS JUST PAST BUFFER
         SLR   R2,R1          # OF BYTES LEFT IN BUFFER
         SLR   R5,R2          # OF BYTES NOT GO INTO THIS BUFFER
         BCTR  R2,0           1 LESS FOR MOVE AND TRANSLATE-GATHER
         EX    R2,MOVETABL    MOVE TABLE TO GATHER 3 OF 4'S THAT FIT
         EX    R2,GATH3OF4    TRANSLATE TO GATHER 3 OF 4'S THAT FIT
WRITEBLK EQU   *              BRANCH HERE TO WRITE LAST BLOCK
         WRITE (R7),SF,MF=E   INITIATE WRITE FOR BLOCK JUST FILLED
         XR    R7,R6          FLIP FROM ONE DECB + BUFFER TO OTHER
         CHECK (R7)           WAIT FOR COMPLETION,  CHECK
         L     R1,ODECBUFR(,R7)   BUFFER ADDRESS
         LA    R1,8(,R1)      INITIALIZE R1 TO ADDR. OF 1ST RECORD
         ST    R1,CURRECAD    STORE ADDRESS OF FIRST RECORD
         LTR   R0,R5          ANY LEFTOVER
         BZ    NONEOVER       BRANCH IF NONE LEFTOVER
         LA    RF,GATHTABL+1(R2)  ADDR OF REST OF GATHTABL TO USE
         BCTR  R5,0           ONE LESS FOR EXECUTE
         EX    R5,MVTBLRST    MOVE TABLE TO GATHER REST OF 3 OF 4'S
         EX    R5,GATH3OF4    GATHER REMAINING 3 OUT OF 4 INTO BUFFER
NONEOVER ALR   R0,R1          CALCULATE NEXT RECORD ADDR IN BUFFER
         B     NEWRECAD       GO STORE NEW BUFFER RECAD, MOVE MODULUS 3
***********************************************************************
MOREBLAN EQU   *              ROUTINE TO HANDLE STRING OF MORE THAN TWO
         LR    RF,R1          ENDING ADDRESS FOR MOVE WITH 1 BLANK
         SLR   RF,R4               CALCULATE LENGTH OF MOVE
         EX    RF,MOVBYTES         MOVE CODED BYTES TO OUTPUT WORK AREA
         ALR   R3,RF          ADDR OF 1ST BLANK FLAG IN OUT WORKAREA
         LA    RE,2(,R1)      ADDRESS OF 3RD BLANK
         LR    RF,R5               CURRENT ENDING ADDRESS OF SCAN (-1)
         SR    RF,RE          CALCULATE ONE LESS THAN LENGTH OF SCAN
         BM    RESTBLAN       BRANCH IF NOTHING LEFT TO SCAN
         MVI   TBSCANOT+INTBLANK,0  TRT NOT STOP ON INTERNAL CODE BLANK
         EX    RF,SCANOT      SCAN FOR FIRST NON-BLANK
         MVI   TBSCANOT+INTBLANK,255 RESTORE TRT TABLE TO STOP ON ANY
         BZ    RESTBLAN       BRANCH IF ALL OF SCAN WAS BLANKS
         LR    R4,R1               STARTING POINT FOR NEXT MOVE
         LR    R0,R1          COPY ADDRESS OF FIRST NON-BLANK
         SLR   R0,RE          CALCULATE NUMBER OF BLANKS IN STRING -2
         CL    R0,FULL63      COMPARE # IN REGISTER TO 63
         BNL   MORBTH64       BRANCH IF R0 > 62, I. E. # BLANKS > 64
FLAGSBLN MVI   0(R3),INTSTBLN      FLAG FOR STRING OF BLANKS
         STC   R0,1(,R3)      STORE # OF BLANKS -2
         LA    R3,2(,R3)      INCREMENT OUT WORK AREA ADDRESS
         BCT   R1,SCANLOOP    START SCAN AT FIRST NON-BLANK
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
MORBTH64 BE    EXACT65B       BRANCH IF EXACTLY 65 BLANKS, R2 = 63
         SL    R0,FULL63      REDUCE NUMBER BY 63
         MVI   0(R3),INTSTBLN      FLAG FOR STRING OF BLANKS
         MVI   1(R3),61       SHOW 63 BLANKS IN STRING THUS FAR
         LA    R3,2(,R3)      INCREMENT OUT WORK AREA ADDRESS
         B     FLAGSBLN       BRANCH TO HANDLE REMAINING BLANKS
***********************************************************************
EXACT65B LA    R3,1(,R3)      INCREMENT PAST SINGLE BLANK INDICATION
         BCT   R0,FLAGSBLN    DECREMENT FOR # LEFT NOW -2 WHICH IS 62
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
RESTBLAN MVI   0(R3),INTSTBLN      FLAG FOR STRING OF BLANKS
         MVI   1(R3),63       SHOW REST OF CARD IS BLANK
         LA    R3,1(,R3)      INCREMENT TO LAST OF OUTPUT WORKAREA
         CL    R3,ADSQZPL2    SEE IF A WORD IN CONVERSION WORK AREA
         BH    THRUMOVE       IF SO GO PROCESS CARD IN CONVERSION WORK
         LA    R3,1(,R3)      INCREMENT TO NEXT POSITION OF OUTPUT WORK
         B     GETCARD        IF NOT GO GET ANOTHER CARD
***********************************************************************
LASTBYTE CLI   0(R1),MAXREGCH+1    SEE IF IN REGULAR CHARACTER SET
         BL    THRUSCAN       IF SO, NO PROBLEM
         B     BRANBASE(R2)   GO HANDLE CHARACTER NOT IN 63 CHAR SET
***********************************************************************
DIFFINCR MVI   0(R3),INTSTAST      FLAG FOR **'S OR SPECIAL ROUTINE
         MVI   1(R3),0             FLAG FOR SPECIAL ROUTINE
         SP    SEQ#INCR,WORKSEQ#   CALC -(PREVIOUS SEQ #)
         ZAP   WORKSEQ#,CURSEQ#R   COPY SEQUENCE # AND VERIFY NUMERIC
         AP    SEQ#INCR,CURSEQ#R   CALC NEW INCREMENT
         CVB   RE,SEQ#INCR         CONVERT INCR/DECR TO BINARY
         LR    R0,RE          SAVE IN CASE OF OVERFLOW
         SRDL  RE,6                SHIFT 6 WANTED BITS INTO RF
         SRL   RF,2                SHIFT 2 PADDING BITS INTO RF
         SRDL  RE,6                SHIFT 6 WANTED BITS INTO RF
         SRL   RF,2                SHIFT 2 PADDING BITS INTO RF
         SRDL  RE,6                SHIFT 6 WANTED BITS INTO RF
         SRL   RF,2                SHIFT 2 PADDING BITS INTO RF
         SRDL  RE,4                SHIFT 4 WANTED BITS INTO RF
         SRL   RF,4                SHIFT 4 PADDING BITS INTO RF
         SLA   R0,10          SHIFT 10 BITS OUT TO SEE IF CONTAIN INFO
         BO    OVERFLOW       BRANCH IF NEW INCR NOT FIT IN 22 BITS
         O     RF,FLAGINC4         OR FLAG FOR 4 CHAR NEW SEQ # INCR
         ST    RF,0(,RD)      STORE IN FULLWORD ALIGNED AREA
         MVC   2(4,R3),0(RD)       MOVE CODED NEW INCREMENT
         LA    R3,6(,R3)           INCR PAST SPECIAL SEQ INDICATOR
         CLI   0(R1),INTBLANK      IS FIRST COLUMN BLANK
         BE    BRANBASE+HITBLANK   IF SO GO SEE HOW MANY BLANKS
         BCT   R1,SCANLOOP    START SCAN AT BEGINNING OF RECORD
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
OVERFLOW O     RF,FLAGINC5         OR FLAG FOR 5 CHAR NEW SEQ # INCR
         ST    RF,0(,RD)      STORE IN FULLWORD ALIGNED AREA
         MVC   2(4,R3),0(RD)       MOVE CODED NEW INCREMENT
         STC   RE,6(,R3)           STORE HIGH SIGNIFICANT BITS + 2 JUNK
         LA    R3,7(,R3)           INCR PAST SPECIAL SEQ INDICATOR
         CLI   0(R1),INTBLANK      IS FIRST COLUMN BLANK
         BE    BRANBASE+HITBLANK   IF SO GO SEE HOW MANY BLANKS
         BCT   R1,SCANLOOP    START SCAN AT BEGINNING OF RECORD
********       NO CHANCE OF FALLING THRU ABOVE INSTRUCTION
***********************************************************************
ENDDATA  EQU   *              END OF FILE ROUTINE
         L     R4,CURRECAD         ADDRESS JUST PAST LAST DATA
         LA    RF,SQUEEZWK         USED TO TEST FOR MODULUS 4 + FOR EX
         SR    R3,RF               SEE IF ANY MODULUS 4 LEFTOVERS
         BNP   NOLSTMD3            BRANCH IF NONE
         L     R0,SQUEEZWK         LOAD LEFTOVER INTO REGISTER 0
         SRL   R0,8           SHIFT OUT JUNK BYTE
         SLR   R1,R1          MAKE LAST 6 POSSIBLE JUNK BITS ZERO
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         SRL   R0,2           SHIFT OUT 2 BITS
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         SRL   R0,2           SHIFT OUT 2 BITS
         SRDL  R0,6           SHIFT 6 BITS INTO R1
         ST    R1,SQUEEZWK         STORE SIX-BIT CODED LEFTOVERS
         LR    R1,R4          COPY NEXT LOCATION IN OUTPUT BUFFER
         ALR   R4,R3               ADD LEFTOVERS TO # TO WRITE
         BCTR  R3,0           1 LESS THAN # OF LEFTOVERS
         CL    R4,AFTBUFAD    SEE IF LAST BYTES WILL ALL FIT THIS BUF
         BH    NOTQUITE       BRANCH IF JUST DIDN'T QUITE FIT IN BUFFER
         EX    R3,MVTBLRST    MOVE LEFTOVERS TO BUFFER
NOLSTMD3 EQU   *                   BRANCH HERE IF NO ENDFILE MOD 4 LEFT
         L     R1,ODECBUFR(,R7)   BUFFER ADDRESS
         SLR   R4,R1             CALC LENGTH OF LAST BLOCK
WRITLAST EQU   *                   WRITE LAST BLOCK
         STH   R4,0(,R1)           BLOCKSIZE FOR LAST BLOCK OF MEMBER
         A     R4,FM4              ADD -4 FOR LRECL
         CH    R4,H4               SEE IF ANYTHING TO WRITE
         BNH   SKIPWRCK            SKIP WRITE + CHECK IF NOTHING
H4       EQU   *+2                 HALFWORD BINARY CONSTANT 4
         STH   R4,4(R1)            LRECL FOR LAST RECORD OF MEMBER
         WRITE (R7),SF,MF=E   INITIATE WRITE FOR BLOCK JUST FILLED
         XR    R7,R6          FLIP FROM ONE DECB + BUFFER TO OTHER
         CHECK (R7)           WAIT FOR COMPLETION,  CHECK
SKIPWRCK EQU   *                   SKIP WRITE + CHECK IF NOTHING
         CLI   C,2            SEE IF AT LEAST 2 HALFWORDS USER DATA
         BL    FORCE2UD       BRANCH IF NOT ENOUGH USER DATA AREA
         IC    R2,SSIUDATA+1  COUNTER FOR MODIFICATIONS IN SAME DAY
         NI    SSIUDATA+1,X'0F'  CLEAR SAME-DAY COUNTER FOR COMPARE
         CLC   SSIUDATA,MYRELNO    ARE REL.# + DATE THE SAME?
MOVEDATE MVC   SSIUDATA,MYRELNO    PUT IN CURRENT REL.#, DATE ANYWAY
         BNE   DIFFDATE       IF DIFFERENT DATE DON'T INCREMENT COUNTER
         LA    R2,X'10'(,R2)  INCREMENT SAME-DAY COUNTER
         STC   R2,SSIUDATA+1  STORE INCR. COUNTER + SAME-DAY YEAR DIGIT
DIFFDATE EQU   *              BRANCH HERE IF DATE HAS CHANGED
         MVC   STOWMEMB,MEMBWORK   MOVE NAME TO STOW FORMAT, ELIM. K, Z
         XR    R7,R6          FLIP FROM ONE DECB + BUFFER TO OTHER
         CHECK (R7)           WAIT FOR COMPLETION,  CHECK LAST WRITE
         L     R0,BUFSSIZE    SIZE OF AREA FOR BUFFERS
         FREEMAIN R,LV=(0),A=ODECBUFR+DECB1   FREE BUFFERS
         STOW  BPAMOUT,STOWMEMB,R  UPDATE DIRECTORY + WRITE END-OF-DATA
         B     STOWBTAB(RF)   BRANCH TO BRANCH TABLE FOR RETURN CODE
***********************************************************************
FORCE2UD MVI   C,2            MAKE IT 2 HALFWORDS USER DATA
********       AFTER MOVE COND CODE WILL FORCE A BRANCH TO DIFFDATE
         B     MOVEDATE       FORCE NEW DATE
***********************************************************************
STOWBTAB B     CLOSDEQ        STOW WAS OK - MEMBER ALREADY THERE
         B     TILT4A         THIS SHOULD NOT HAPPEN, ABEND
         B     CLOSDEQ        STOW WAS OK - MEMBER ADDED
         B     TILT4A         NO SPACE LEFT IN DIRECTORY TO ADD/REPLACE
******** RETCODE BRAN HERE IF PERMANENT ERROR IN ATTEMPT DIRECTORY UPDT
TILT4A   LA    R1,400(,RF)    COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
***********************************************************************
CLOSDEQ  EQU   *              CLOSE DATA SETS, DEQUEUE AND RETURN
         CLOSE ,MF=(E,ROCLIST)         USE REMOTE LIST
         DEQ   ,MF=(E,QLIST)  DEQUEUE FROM INPUT + OUTPUT DATA SETS
         L     RD,4(,RD)           RESTORE CALLER SAVE AREA POINTER
         LM    RE,RC,12(RD)   RESTORE CALLERS REGISTERS
         SLR   RF,RF          ZERO RETURN CODE
         BR    RE             RETURN TO CALLER
***********************************************************************
NOTQUITE L     RE,AFTBUFAD    ADDRESS JUST PAST BUFFER
         SLR   RE,R1          # BYTES LEFT IN BUFFER
         SLR   R3,RE          # BYTES THAT DIDN'T FIT BUFFER -1
         BCTR  RE,0           # BYTES LEFT IN BUFFER -1
         EX    RE,MVTBLRST    MOVE LEFTOVERS THAT FIT IN BUFFER
         LA    R4,SQUEEZWK+1(RE)  START OF REMAINING LEFTOVERS
         WRITE (R7),SF,MF=E   INITIATE WRITE FOR BLOCK JUST FILLED
         XR    R7,R6          FLIP FROM ONE DECB + BUFFER TO OTHER
         CHECK (R7)           WAIT FOR COMPLETION,  CHECK
         L     R1,ODECBUFR(,R7)   BUFFER ADDRESS
         MVC   8(2,R1),0(R4)  MOVE MAXIMUM LEFTOVERS THAT REMAIN
         LA    R4,9(,R3)      LENGTH OF LAST BLOCK
         B     WRITLAST            BRANCH TO WRITE LAST BLOCK
         DROP  R7             END ADDRESSABILITY ANY BUFFER DECB DSECT
***********************************************************************
TILT1    LA    R1,100         COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
TILT2    LA    R1,200         COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
TILT3    LA    R1,300         COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
TILT6    LA    R1,600         COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
TILT7    LA    R1,700         COMPLETION CODE FOR ABEND DUMP IN R1
         B     TILT           GO OR IN DUMP BIT AND ISSUE ABEND SVC
TILT11   LA    R1,1100        COMPLETION CODE FOR ABEND DUMP IN R1
TILT     O     R1,DUMPCODE    REQUEST DUMP WITH ABEND
         ABEND (1)            GENERATE ABEND SVC
***********************************************************************
SQUEEZWD DSECT                USED TO AVOID DIAGNOSTIC
         DS    F              FLOATS OVER SQUEEZWK
***********************************************************************
DECBDSCT DSECT DSECT FOR DECB AND RELATED INFORMATION
         WRITE DUMMY,SF,BPAMOUT,MF=L   SPACE IN DSECT FOR DECB
ODECBUFR EQU   12             OFFSET OF BUFFER ADDRESS IN DECB
AFTBUFAD DC    A(0)           ADDRESS OF LOCATION JUST AFTER BUFFER
***********************************************************************
         EJECT
***********************************************************************
DCVT     DSECT                FOR MACRO DESCRIBING CVT
         DS    F              NOTHING IN PARTICULAR 8 BYTES BEFORE CVT
CVTRELNO DS    ZL4            RELEASE # BEFORE CVT IN ZONED DECIMAL
         CVT
***********************************************************************
         MVCL  R2,R4               SEE THE BEAUTIFUL 370 INSTRUCTION
         CLCL  R2,R4               SEE THE BEAUTIFUL 370 INSTRUCTION
         ICM   RF,8,20(RD)         SEE THE BEAUTIFUL 370 INSTRUCTION
***********************************************************************
         EJECT
***********************************************************************
         DCBD  DSORG=QS,DEVD=DA    DUMMY SECTION FOR DCB FIELDS
***********************************************************************
OOFLGS   EQU   DCBOFLGS-IHADCB     OFFSET IN DCB OF DCBOFLGS
ORECFM   EQU   DCBRECFM-IHADCB     OFFSET IN DCB OF RECORD FORMAT
OBLKSI   EQU   DCBBLKSI-IHADCB     OFFSET IN DCB OF BLOCK SIZE
OLRECL   EQU   DCBLRECL-IHADCB     OFFSET IN DCB OF RECORD LENGTH
***********************************************************************
         END   SQEEZSRC            ENTRY POINT
