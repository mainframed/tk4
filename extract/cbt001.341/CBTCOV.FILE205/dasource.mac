DASR     TITLE '                        NUCLEUS MODULE FOR THE COMPRESS*
               ED SOURCE LIBRARY SYSTEM'
*        CSECT NAME -- DASOURCE
*        OTHER ENTRY POINTS -- NONE
*        LANGUAGE -- IBM 370 ASSEMBLER F
*        ATTRIBUTES -- NOT REUSABLE, NOT REENTRANT
*        SUBROUTINES USED -- NONE
*        ATTACH, LINK, OR LOAD TO -- CTLCARD
*                                    ADDREPL
*                                    CHANGE
*                                    NOCHANGE
*                                    PUNCH
*                                    IEUASM
*                                    IEYFORT
*                                    IFEAAB
*                                    IEMAA
*                                    IEL0AA
*                                    PDSREORG
*        OPERATING SYSTEM -- OS/370/MVT REL 21.6
*        DATE WRITTEN -- 26 DECEMBER 1972
*        AUTHOR -- P. MICHAEL HENDERSON
*        INSTALLATION -- MIDDLE SOUTH SERVICES
*                        200 WEST BANK EXPRESSWAY
*                        GRETNA, LOUISIANA 70053
*        SPECIAL CONSIDERATIONS -- THE FOLLOWING 'SPECIAL' MACROS ARE
*                                  USED IN THIS ASSEMBLY:
*
*                                  PRIME    INITIALIZE ASSEMBLER PGM
*                                  TERME    TERMINATE ASSEMBLER PROGRAM
         SPACE 3
         EJECT
DASOURCE CSECT
         PRIME
***********************************************************************
*
*    CHECK THE PARM FOR A VALUE OF NOCOMPILE.  IF NOT, THEN CHECK FOR
*    A SLASH WITH AN H OR AN F FOLLOWING. IF SO THEN MOVE FORTRAN H
*    COMPILER NAME OR PL1 F COMPILER NAME.  ISSUE THE STAE.
*
***********************************************************************
         ST    R13,SAVEADDR             SAVE SAVEAREA ADDR
         ST    R12,BASE                 STORE BASE ADDR
         LR    R2,R1                    SAVE PARM POINTER
         TIME  BIN                      GET TIME IN BINARY
         ST    R1,DATE                  SAVE THE DATE
         ST    R0,TIMESTRT              SAVE START TIME
         L     R1,0(R2)                 LOAD POINTER
         STCM  R1,7,ASMOPT+1            STORE THE POINTER TO PARM
         LH    R2,0(R1)                 GET LENGTH OF PARM
         LTR   R2,R2                    CHK IF ZERO - NO PARM PASSED
         BZ    STEPNAME                 YES - GET OUT
         LR    R5,R1                    SAVE R1
         LA    R1,2(R1)                 ADD TWO TO R1
         SR    R4,R4                    CLEAR R4
         LA    R3,0(R1,R2)              GET END ADDR OF PARM
         LA    R2,1                     PUT A ONE IN R2
         CLC   0(9,R1),=CL9'NOCOMPILE'  CHECK FOR A NO COMPILE
         BNE   PARMLOOP                 CONTINUE IF NOT EQUAL
         OI    LOCALSW,NOCOMPLE         SET THE SW FOR A NOCOMPILE
         B     STAE                     FINISHED IF NOT EQUAL
PARMLOOP DS    0H                       LOOP TO CHECK PARM
         CLI   0(R1),C'/'               CHECK FOR A SLASH
         BE    GOTSLASH                 FOUND IT - BRANCH
         LA    R4,1(R4)                 KEEP CNT OF PARM CHARACTERS
         BXLE  R1,R2,PARMLOOP           LOOP TILL FINISHED
         B     STEPNAME                 GO CHECK THE STEP NAME
GOTSLASH DS    0H                       FOUND A SLASH
         STH   R4,0(R5)                 SAVE NEW LENGTH
         LA    R1,1(R1)                 ADD ONE TO BYPASS /
         CLI   0(R1),C'H'               CHECK FOR A H
         BNE   CHKPL1F                  GO CHECK PL1
         MVC   FORTPGM,FORTHPGM         MOVE FORTRAN H COMPILER NAME
         MVC   PGMNAME,ASMHPGM          MOVE ASSM H PGM NAME
         B     STEPNAME                 GO CHECK THE STEP NAME
CHKPL1F  DS    0H                       CHECK FOR PL1
         CLI   0(R1),C'F'               CHECK FOR AN F
         BNE   CHKVSASM                 CHECK IF VS ASSEMBLER
         MVC   PLIPGM,PL1LPGM           MOVEPL1L F PGM NAME
         MVC   PGMNAME,ASMFPGM          MOVE ASM F PROGRAM NAME
CHKVSASM DS    0H                       CHK IF VS ASSEMBLER REQUESTED
         CLI   0(R1),C'V'               V SUPPLIED
         BNE   CHKASMG                  NO - GO CHK IF ASM G
         MVC   PGMNAME,VSASMPGM         MOVE VS ASSEMBLER PGM NAME
CHKASMG  DS    0H                       CHK IF ASM G
         CLI   0(R1),C'G'               IS IT G
         BNE   STEPNAME                 NO - GO CHECK STEPNAMES
         MVC   PGMNAME,ASMGPGM          MOVE ASMG PROGRAM NAME
STEPNAME DS    0H                       CHECK THE STEPNAME
         L     R2,16                    LOAD CVT ADDR
         L     R2,0(R2)                 LOAD ADDR OF TCB WORDS
         L     R2,4(R2)                 LOAD ADDR OF CURRENT TCB
         L     R2,12(R2)                LOAD ADDR OF TIOT
         CLC   8(3,R2),=CL3'COB'        CHK STEPNAME FOR COBOL (UGH)
         BNE   FORTRAN                  NO - GO CHECK FOR FORTRAN
         MVC   PGMNAME,COBUPGM          MOVE COBOL COMPILER NAME
         B     STAE                     GO ISSUE THE STAE
FORTRAN  DS    0H                       CHECK FOR FORTRAN REQUEST
         CLC   8(4,R2),=CL4'FORT'       CHK STEPNAME FOR FORTRAN
         BNE   PLI                      GO CHECK FOR PLI
         MVC   PGMNAME,FORTPGM          MOVE FORTRAN COMPILER NAME
         B     STAE                     GO ISSUE THE STAE
PLI      DS    0H                       CHECK IF PLI
         CLC   8(3,R2),=CL3'PLI'        CHK IF STEPNAME PLI
         BNE   PL1L                     GO CHK IF PL1L
         MVC   PGMNAME,PLIPGM           MOVE PLI COMPILER NAME
         B     STAE
PL1L     DS    0H                       CHECK FOR PL1L
         CLC   8(4,R2),=CL4'PL1L'       CHECK IF STEPNAME PL1L
         BNE   STAE                     DEFAULT TO ASSEMBLER
         MVC   PGMNAME,PL1LPGM          MOVE PL1L F COMPILER NAME
STAE     DS    0H                       ISSUE THE STAE
***********************************************************************
*
*    STAE REMOVED 2/26/74.  DCB ABEND EXIT (X'11') IN SQUEEZE PROGRAM
*    NOW INTERCEPTS D37 & E37 ABENDS ON THE COMPRESSED LIBRARY.
*
***********************************************************************
        RDJFCB PDS                      READ JFCB FOR DSN
         LOAD  EP=CTLCARD               LOAD CTLCARD PGM
         ST    R0,CTLCDADR              SAVE ENTRY POINT ADDRESS
         EJECT
***********************************************************************
*
*    OPEN DATA SETS.  CHECK FOR A ./ IN FIRST TWO COLUMNS.  IF SO, GET
*    FIRST EIGHT BYTES AFTER A BLANK.  CHECK FOR VALID OPERATION CODE.
*    MOVE CARDS TO WORK DATA SET UNTIL ANOTHER ./ CARD WITH VALID
*    OPERATION CODE IS FOUND.
*
***********************************************************************
         OPEN  (SYSIN,INPUT,                                           *
               WORK03,OUTPUT,                                          *
               SYSPRINT,OUTPUT)
         LA    R1,SYSIN                 GET DCB ADDR
         USING IHADCB,R1                TELL ASSEMBLER TO USE R1
         TM    DCBOFLGS,X'10'           TEST IF IT OPENDE
         BZ    OPENERR                  NO GO GIVE ERROR MESSAGE
         DROP  R1
GETPUT   DS    0H                       LOOP
         GET   SYSIN                    GET A CARD
         TM    LOCALSW,REREAD           CHK IF A REREAD TO BE DONE
         BO    RESETSW                  GO RESET THE SW IF SET
         TM    MISCBITS,NEEDCONT        IS CONTINUATION CARD NEEDED
         BO    CTLCARD                  YES - PASS THIS CARD NO MATTER
***********************************************************************
*
*    6/21/76 - THE CHANGES TO DETECT BLANK FIRST CARDS HAS BEEN       *
*    REMOVED.  IN ITS PLACE IS LOGIC TO NUMERIC CHECK ALL SEQUENCE    *
*    FIELDS EXCEPT WHEN READING THRU AN INSERT.                       *
*
***********************************************************************
         TM    OPBITS,CHANGEOP+NOCHNGOP IS THIS A CHANGE OR NOCHANGE
         BZ    NOTCHNG                  NO, BRANCH
         SR    R2,R2                    CLEAR REGISTER
         SR    R3,R3                    CLEAR REGISTER
         IC    R2,SEQDSPMT              GET THE DISPLACEMENT
         IC    R3,SEQLEN                GET THE LENGTH
         LA    R2,0(R1,R2)              ADD DISPL TO START OF CARD
         TM    MISCBITS,ININSERT        ARE WE IN AN INSERT
         BZ    CKNUM                    NO, BRANCH
         CLC   0(2,R1),CTLCDIND         IS THIS A CONTROL CARD
         BNE   CKBLNK                   NO, BRANCH
         NI    MISCBITS,255-ININSERT    RESET INSERT BIT
         B     NOTCHNG
         SPACE
CHKBLNKS CLC   0(0,R2),=CL8' '          EXECUTED CLC
MOVEZN   MVZ   ZONES(0),0(R2)           EXECUTED MVZ
         SPACE
CKBLNK   DS    0H
         EX    R3,CHKBLNKS              IS THE SEQ FIELD BLANK
         BE    NOTCHNG                  YES, BRANCH
         NI    MISCBITS,255-ININSERT    RESET INSERT BIT
         SPACE
CKNUM    DS    0H
         CLC   0(2,R1),CTLCDIND         IS THIS A CONTROL CARD
         BE    NOTCHNG                  YES, BRANCH
         EX    R3,MOVEZN                MOVE ZONES FROM SEQ FIELD
         CLC   ZONES,=8C'0'             IS SEQ FIELD NUMERIC
         BNE   BLANKMSG                 NO, ERROR
         SPACE
NOTCHNG  DS    0H                       HERE IF NOT A CHANG OR NOT BLNK
         TM    OPBITS,(CHANGEOP+NOCHNGOP)  CHK FOR A CHANGE OR A NOCHNG
         BNZ   CTLCARD                  YES - GO PRINT CARD
         CLC   0(2,R1),CTLCDIND         IS IT A CTL CARD
         BNE   PUTCARD                  NO - GO PUT THE CARD
CTLCARD  DS    0H                       BRANCH TO THE CTLCARD ROUTINE
         ST    R1,RCDADDR               SAVE ADDR OF THIS RECORD
         LA    R1,CTLCDLST              GET THE ADDR OF THE LINKLIST
         L     R15,CTLCDADR             LOAD ENTRY POINT ADDR OF CTLCAR
         BALR  R14,R15                  GO TO THE ROUTINE
         L     R1,RCDADDR               RESTORE THE RECORD ADDR
         B     *+4(R15)                 BR INCREMENTED BY R15
         B     NEXTIME                  BEGINNING OF NEW CONTROL SECT
         B     PUTCARD                  CTL CARD WITHIN CONTROL SECT
         B     CTLFLUSH                 SOME TYPE OF CTL CARD ERROR
CTLCDLST DC    A(PASSTABL)              ADDR OF THE PASS AREA
         DC    A(WORK03)                ADDR OF WORK 03 DCB
PUTCARD  DS    0H                       PUT THE CARD
         TM    MISCBITS,FLUSH           ARE WE FLUSHING
         BO    GETPUT                   YES - DON'T WASTE TIME WRITING
         LR    R0,R1                    POINT TO CARD FOR PUT
         PUT   WORK03                   PUT THE RECORD
         B     GETPUT                   LOOP TILL FINISHED
NEXTIME  DS    0H                       NEXT SET OF DATA
         TM    MISCBITS,FLUSH           ARE WE FLUSHING
         BNO   FIRSTCRD                 NO
         NI    MISCBITS,(255-FLUSH)     YES - TURN OFF FLUSH BIT
         CLOSE WORK03                   CLOSE TO REUSE
         OPEN  (WORK03,OUTPUT)          OPEN TO REUSE
         MVI   OPBITS,X'00'             ZERO FOR CTLCARD PGM
         MVI   INDBITS,X'00'            ZERO FOR CTLCARD PGM
         L     R1,RCDADDR               RESTORE POINTER TO CARD
         B     CTLCARD                  GO PROCESS THIS CONTROL CARD
FIRSTCRD DS    0H                       HERE IF NOT FLUSH
         TIME  BIN                      GET NEW START TIME
         ST    R0,TIMESTRT              STORE NEW TIME
         B     ENDCOPY1                 GO PROCESS DATA
         SPACE 2
RESETSW  DS    0H                       RESET THE SWITCH
         NI    LOCALSW,(255-REREAD)     TURN OFF REREAD SW
         B     GETPUT                   GO REISSUE THE GET
         SPACE
CTLFLUSH DS    0H                       SET UP FOR A FLUSH
         MVI   CONDCODE+3,X'10'         SET ERROR RETURN CODE
         NI    MISCBITS,(255-NEEDCONT)  TURN OFF IN CASE SET
         NI    MISCBITS,255-ININSERT    CLEAR ALSO
         OI    MISCBITS,FLUSH           INDICATE A FLUSH
         MVI   OPBITS,0                 RESET OPERATION CODE
         B     GETPUT                   GO FLUSH
         SPACE 2
BLANKMSG DS    0H                       TELL USER WHATS WRONG
         MVC   PRTLINE+8(80),0(R1)      MOVE THE CARD TO PRINT LINE
         BAL   R9,PUTLINE               GO PRINT IT
         MVC   PRTLINE(L'MESG2),MESG2   MOVE MESSAGE TO PRINT
         BAL   R9,PUTLINE               GO PRINT THE LINE
         B     CTLFLUSH                 NOW FLUSH THE REST OF THIS SET
         SPACE 2
PUTLINE  DS    0H                       HERE TO WRITE TO SYSPRINT
         PUT   SYSPRINT,PRTLINE         WRITE THE LINE
         MVI   PRTLINE,X'40'            BLANK THE LINE
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE  BLANK ENTIRE LINE
         BR   R9                        RETURN TO CALLER
         EJECT
***********************************************************************
*
*
***********************************************************************
ENDCOPY  DS    0H                       FINISHED COPYING
         CLOSE SYSIN                    CLOSE INPUT
         OI    MISCBITS,SYSINEOF        INDICATE EOF ON SYSIN
         TM    MISCBITS,FLUSH           ERROR IN THIS SET OF DATA
         BO    EOJ                      YES - DON'T GIVE ALL OK MSG
         TM    OPBITS,X'FF'             ANY CONTROL CARDS
         BZ    NOCTRL                   NO - USE WORK03 AS INPUT
         XC    RCDADDR,RCDADDR          SET ADDR TO ZERO
         LA    R1,CTLCDLST              LOAD ADDR OF LIST
         L     R15,CTLCDADR             GET ADDR OF CTLCARD ROUTINE
         BALR  R14,R15                  GO THE LAST TIME
ENDCOPY1 DS    0H                       LOOP TO PROCESS MORE THAN ONE
        DELETE EP=CTLCARD               MAKE STORAGE AVAILABLE
         CLOSE WORK03                   CLOSE DATA SET
         TM    OPBITS,ADDOP              CHECK IF AN ADD
         BO    ADDREPL                   BRANCH IF AN ADD
         TM    OPBITS,REPLOP            CHECK IF A REPL
         BO    ADDREPL                  BRANCH IF A REPL
         TM    OPBITS,CHANGEOP          CHECK IF A CHANGE
         BO    CHANGE                    BRANCH IF A CHANGE
         TM    OPBITS,NOCHNGOP          CHECK IF A NOCHANGE
         BO    CHANGE                   BRANCH IF A NOCHANGE
         TM    OPBITS,COMPILOP          CHECK IF A COMPILE
         BO    EXPAND                    BRANCH IF A COMPILE
         TM    OPBITS,PUNCHOP            CHECK IF A PUNCH
         BO    PUNCH                    BRANCH IF A PUNCH
         TM    OPBITS,SCRTCHOP          CHECK IF A SCRATCH
         BO    SCRATCH                  BRANCH IF A SCRATCH
         TM    OPBITS,RENAMEOP          CHECK IF A RENAME
         BO    RENAME                   BRANCH IF A RENAME
         B     EOJ                      NOT A LEGAL OPERATION
         EJECT
ADDREPL  DS    0H                       DO AN ADD OR A REPL
         LA    R1,LINKLIST              GET ADDR OF LIST
         LINK  EP=ADDREPL,                                             *
               MF=(E,(1))               LINK TO DO AN ADD OR REPLACE
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   STORER15                 GO CHECK RETURN CODE
         B     COMPILE                  GO COMPILE THE PGM
         EJECT
CHANGE   DS    0H                       CHANGE AN EXISTING DECK
         CLOSE SYSPRINT                 CLOSE FOR IEBUPDTE TO USE
         LA    R1,LINKLIST              GET ADDR OF LIST
         LINK  EP=CHANGE,                                              *
               MF=(E,(1))               PARM LIST ADDR IN R1
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   STORER15                 GO CHECK RETURN CODE
         B     COMPILE                  GO COMPILE THE PROGRAM
         EJECT
EXPAND   DS    0H                       EXPAND WITH NO CHANGES
         LA    R1,LINKLIST              GET ADDR OF LIST
         LINK  EP=NOCHANGE,             LINK TO NO CHANGE              *
               MF=(E,(1))               PARM ADDRS IN R1
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   STORER15                 GO CHECK RETURN CODE
         B     COMPILE                  GO COMPILE THIS PROGRAM
         EJECT
PUNCH    DS    0H                       PUNCH A DECK
         LA    R1,LINKLIST              GET ADDR OF LIST
         LINK  EP=PUNCH,                                               *
               MF=(E,(1))               PARM IN R1
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   STORER15                 GO CHECK RETURN CODE
         B     COMPILE                  GO COMPILE THE MEMBER
         EJECT
SCRATCH  DS    0H                       PROCESS A SCRATCH FUNCTION
RENAME   DS    0H                       PROCESS A RENAME FUNCTION
         LA    R1,LINKLIST              GET ADDR OF LIST
         LINK  EP=SCRENAME,                                            *
               MF=(E,(1))
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   STORER15                 NOT ZERO ERROR
         B     LINKNOP                  GO GET NEXT SET OF DATA
         EJECT
***********************************************************************
*
*    IF NO CONTROL CARD, MAKE INPUT TO COMPILER/ASSEMBLER WORK03.
*    CHECK PROC STEP NAME TO DETERMINE COMPILER/ASSEMBLER NAME. LINK
*    TO COMPILER/ASSEMBLER.
*
***********************************************************************
NOCTRL   DS    0H                       DO NOT UPDATE
         CLOSE WORK03                   WRITE EOF MARK
         MVC   ASMSYSIN,=CL8'WORK03'    POINT TO WORK03
         B     CMPLNOP                  BYPASS MESSAGE
COMPILE  DS    0H                       DO A COMPILE
         TIME  BIN                      GET END TIME IN BINARY
         L     R15,TIMESTRT             GET START TIME
         CR    R0,R15                   CHECK IF END TIME GREATER
         BH    TIMEOK                   END HI - OKAY
         A     R0,=F'8640000'           ADD 24 HOURS IN .01 SEC
TIMEOK   DS    0H                       TIME OKAY
         SR    R0,R15                   SUBTRACT START FROM END TIME
         SRDL  R0,32                    SHIFT R0 INTO R1
         LA    R15,100                  PUT 100 IN R15
         DR    R0,R15                   GET TIME IN SECONDS
         CVD   R1,WORK                  CONVERT SECONDS TO DECIMAL
         MVC   OVHEAD,EDMASK            MOVE THE EDIT MASK
         ED    OVHEAD,WORK+5            EDIT THE SECONDS
         MVC   PRTLINE(L'MESG1),MESG1   MOVE MESSAGE TO PRINT
         BAL   R9,PUTLINE               GO PRINT THE LINE
CMPLNOP  DS    0H                       HERE IF NO CNTRL CARDS ON SYSIN
         TM    MISCBITS,LISTOP          DID WE HAVE A LIST OP HERE
         BO    LINKNOP                  BYPASS LINKING TO COMPILER
         TM    LOCALSW,NOCOMPLE         CHK IF A NOCOMPILE
         BO    LINKNOP                  YES - BYPASS LINKING TO COMPLER
         LA    R1,ASMLIST               GET THE ADDR OF THE LIST
         LA    R15,NAMELIST             LOAD ADDR OF NAME LIST
         LINK  MF=(E,(1)),                                             *
               SF=(E,(15))
STORER15 DS    0H                       STORE CONDITION CODE
         C     R15,CONDCODE             COMPARE TO PRESENT COND CODE
         BNH   LINKNOP                  DON'T UPDATE
         ST    R15,CONDCODE             STORE NEW COND CODE
LINKNOP  DS    0H                       HERE TO BYPASS LINKING TO CMPLR
         TM    MISCBITS,SYSINEOF        END-OF-FILE ON SYSIN?
         BNO   CONTINUE                 NO - CHK FOR ANOTHER DATA GROUP
         EJECT
***********************************************************************
*
*    ALL CARDS ON SYSIN HAVE BEEN READ.  NOW GENERATE A SETSSI CARD
*    FOR THE LKED STEP.
*
***********************************************************************
EOJ      DS    0H                       FINISHED
         ZAP   WORK,DATE                DEFAULT TO NO UPDATE DATE
         OI    WORK+7,X'0F'             PUT A SIGN ON SSI DATA
         L     R15,SSIDATA              LOAD TO CHK IF UPDATE
         LTR   R15,R15                  CHECK IF ZERO
         BZ    NOUPDTE                  YES - THEN USE TODAY'S DATE
         MVO   WORK,SSIDATA             SHIFT SSI DATA 4 BITS FOR SIGN
         OI    WORK+7,X'0F'             PUT A SIGN ON SSI DATA
NOUPDTE  DS    0H                       HERE IF NO UPDATES
         UNPK  SSI,WORK                 UNPACK THE DATA TO CARD
       EXTRACT TIOTADDR,FIELDS=TIOT     GET THE TIOT ADDR
         L     R2,TIOTADDR              LOAD TIOT ADDR
         LA    R2,24(R2)                SKIP TIOT PREFIX
         SR    R3,R3                    CLEAR R3
TIOTLOOP DS    0H                       CHECK FOR CERTAIN DD NAMES
         IC    R3,0(R2)                 INSERT LENGTH OF THIS ENTRY
         LTR   R3,R3                    AT END TO TIOT?
         BZ    ENDTIOT                  YES - GET OUT WITHOUT WRITING
         CLC   4(8,R2),=CL8'SYSLIN'     LOOK FOR SYSLIN DD CARD
         BE    GOTDDNAM                 GOT IT - GO STUFF IN DCB
         CLC   4(8,R2),=CL8'SYSGO'      CHK FOR ASSEM SYSLIN DD CARD
         BE    GOTDDNAM                 GOT IT - GO STUFF IN DCB
         AR    R2,R3                    ADD LEN TO R2
         B     TIOTLOOP                 KEEP LOOKING THRU TIOT
GOTDDNAM DS    0H                       FOUND A GOOD DDNAME
         LA    R1,SYSLIN                GET DCB ADDR
         USING IHADCB,R1
         MVC   DCBDDNAM,4(R2)           MOVE DDNAME FOUND TO DCB
        RDJFCB MF=(E,SYSLINOP+4)        USE OPENLIST TO READ JFCB
         LA    R15,PDSDSN               LOAD ADDR FOR ADDRESSABILITY
         USING JFCB,R15                 ESTABLISH ADDRESSABILITY
         NI    JFCBIND2,X'3F'           TURN OFF 1ST DISP BITS
         OI    JFCBIND2,X'80'           MAKE DISP=MOD
         DROP  R15
SYSLINOP OPEN  (SYSLIN,OUTPUT),TYPE=J   OPEN TYPE J WITH DISP=MOD
         PUT   SYSLIN,SSICARD           PUT THE SETSSI CARD
         CLOSE SYSLIN                   CLOSE THE DCB
ENDTIOT  DS    0H                       HERE IF NO DDNAME FOUND
         DROP  R1
         CLOSE SYSPRINT                 MAKE SURE PRINT FILE CLOSED
         L     R15,CONDCODE             LOAD THE CONDITION CODE
         TERME                          FINISHED
         EJECT
***********************************************************************
*
*    CLOSE WORK03 THEN OPEN FOR OUTPUT.  GET ADDR OF NEXT CONTROL CARD
*    AND BRANCH TO PUT.
*
***********************************************************************
CONTINUE DS    0H
         OPEN  (WORK03,OUTPUT,          OPEN DATA SET                  *
               SYSPRINT,OUTPUT)         IN CASE CHANGE LEFT CLOSED
         MVI   OPBITS,X'00'             ZERO BIT INDICATORS FOR CTLCARD
         MVI   INDBITS,X'00'            ZERO BIT INDICATORS FOR CTLCARD
         LOAD  EP=CTLCARD               LOAD CTLCARD PGM AGAIN
         ST    R0,CTLCDADR              SAVE ENTRY POINT ADDR
         L     R1,RCDADDR               LOAD RECORD ADDRESS
         B     CTLCARD                  GO INTERPRET THE CARD
         SPACE 3
         USING IHADCB,R1
OPENERR  DS    0H                       GIVE ERROR MESG ABOUT OPEN FAIL
         MVC   PRTLINE(L'OPENMESG),OPENMESG  MOVE MESG TO PRINT
         BAL   R9,PUTLINE               GO PRINT IT
         MVI   CONDCODE+3,X'10'         SET RETURN CODE TO 16
         B     EOJ                      TERMINATE PROGRAM
         EJECT
***********************************************************************
*
*    DCB EXIT ROUTINES FOR WORK03,SYSPRINT, AND SYSIN TO DEFAULT
*    BLKSIZE IF NOT SUPPLIED.
*
***********************************************************************
DCBEXIT3 DS    0H                       DCB EXIT FOR WORK 03
         CLC   DCBBLKSI,=2X'00'         CHECK IF ZERO
         BCR   7,R14                    BRANCH IF NOT ZERO
         MVC   DCBBLKSI,=H'400'         DEFAULT TO 400
         BR    R14                      RETURN
         SPACE 2
DCBEXITS DS    0H
         USING *,R15
         L     R12,BASE                 GET BASE ADDR
         DROP  R15
         CLC   DCBLRECL,=2X'00'         CHECK IF LRECL ZERO
         BNE   EXITSBLK                 BYPASS MOVE
         MVC   DCBLRECL,=H'121'         DEFAULT TO 121
EXITSBLK DS    0H                       CHECK THE BLKSIZE
         CLC   DCBBLKSI,=2X'00'         CHECK BLKSIZE FOR ZERO
         BNER  R14                      GET OUT IF NOT ZERO
         MVC   DCBBLKSI,DCBLRECL        DEFAULT TO LRECL SIZE
         BR    R14                      RETURN
         SPACE 2
DCBEXIT  DS    0H                       DCB EXIT FOR SYSIN
         OI    DCBOFLGS,X'08'           SET FOR UNLIKE CONCAT
BYPASS   B     FIRSTIME                 SKIT FIRST TIME
         OI    LOCALSW,REREAD           SET THE SWITCH ON
FIRSTIME DS    0H                       FIRST TIME THRU
         MVI   BYPASS+1,X'00'           TURN THE BRANCH OFF
         BR    R14                      RETURN
         DROP  R1
         EJECT
***********************************************************************
*
*    THIS ROUTINE IS BRANCHED TO TO REORGANIZE THE COMPRESSED LIBRARY.
*    A LINK IS MADE TO PDSREORG TO REORGANIZE THE PDS.  THE CALLING
*    ROUTINE IS THEN RETURNED TO IF THE REORGANIZATION WAS SUCCESSFUL.
*
***********************************************************************
RETRY    DS    0H                       SCHEDULE A RETRY
         USING *,R15
         ST    R12,WORK                 SAVE OLD BASE ADDR
         ST    R14,WORK+4               SAVE RETURN ADDR
         L     R12,BASE                 GET THE BASE ADDR
         DROP  R15
         LINK  EPLOC=PDSREORG,          LINK TO PDSREORG               *
               PARAM=(COMPRESS,DDNAME),VL=1     CONSTRUCT USER LIST
         LTR   R15,R15                  CHECK IF IT WORKED
         BNZ   RETRYEOJ                 TERMINATE IF IT DIDN'T
         DEQ   (QNAME,PDSDSN,44,SYSTEM) DEQ PDS THAT SQUEEZE ENQ'ED
         NI    INDBITS,(255-ABENDIND)   TURN OFF ABEND INDICATOR
         L     R14,WORK+4               RESTORE RETURN ADDR
         L     R12,WORK                 RESTORE BASE ADDR
         BR    R14                      RETURN TO CALLING ROUTINE
         CNOP  2,4                      HALFWORD NOT FULL WORD
COMPRESS DC    H'00'
DDNAME   DC    CL8'INPUT'
         DC    CL8'WORK04'
QNAME    DC    CL8'COPYDATA'
RETRYEOJ DS    0H                       TERMINATE
         L     R13,SAVEADDR             GET ADDR OF THIS SAVEAREA
         B     EOJ                      NOW DO A NORMAL TERMINATION
         EJECT
***********************************************************************
*
*             * * * C O N S T A N T S * * *
*
***********************************************************************
WORK     DS    D
BASE     DS    F
TIMESTRT DS    F
DATE     DS    F                        TODAY'S DATE
SAVEADDR DS    F
TIOTADDR DS    F                        TIOT ADDRESS
CTLCDADR DC    F'0'                     ADDR OF CTLCARD ENTRY POINT
ZONES    DC    CL8'00000000'
PDSREORG DC    CL8'PDSREORG'
CONDCODE DC    F'0'
EXLST03  DC    0F'0',X'85',AL3(DCBEXIT3)
EXLSTSP  DC    0F'00',X'85',AL3(DCBEXITS)
EXLSTSI  DC    0F'0',X'85',AL3(DCBEXIT)
PDSEXLST DC    0F'0',X'87',AL3(PDSDSN)  EXLST FOR PDS DCB
LINEXLST DC    0F'0',X'87',AL3(PDSDSN)  EXLST FOR SYSLIN
LINKLIST DC    0F'0',X'80',AL3(PASSTABL)
ASMLIST  DS    0F
ASMOPT   DC    F'0'
         DC    X'80',AL3(ASMDDNM)
         CNOP  2,4                      HALF WORD NOT FULLWORD
ASMDDNM  DC    H'40'
         DC    8F'0'
ASMSYSIN DC    CL8'INPUT'
NAMELIST LINK  EPLOC=PGMNAME,SF=L
PGMNAME  DC    CL8'IEV90'              DEFAULT ASSEMBLER NAME
ASMFPGM  DC    CL8'IEUASM'              ASM F PROGRAM NAME
ASMHPGM  DC    CL8'IEV90'              ASM H PROGRAM NAME
VSASMPGM DC    CL8'IFOX00'              VS ASSEMBLER PGM NAME
ASMGPGM  DC    CL8'ASMGASM'             ASSEMBLER G PROGRAM NAME
FORTPGM  DC    CL8'IGIFORT'             FORTRAN G1 COMPILER
FORTHPGM DC    CL8'IFEAAB'              FORTRAN XH COMPILER NAME
PLIPGM   DC    CL8'IEL0AA'
PL1LPGM  DC    CL8'IEMAA'               PL1 F COMPILER NAME
COBUPGM  DC    CL8'IKFCBL00'            COBOL U COMPILER NAME
*                                       IF YOU USE COBOL (DID YOU EVER
*                                       CONSIDER USING PLI?)
LOCALSW  DC    X'00'                    INDICATOR FOR CONDITIONS IN
*                                       THIS PROGRAM
REREAD   EQU   X'80'                    REREAD NECESSARY INDICATOR
NOCOMPLE EQU   X'40'                    INDICATES A PARM OF 'NOCOMPILE'
SSICARD  DC    CL80' SETSSI'
         ORG   SSICARD+8
SSI      DS    CL8
         ORG
PRTLINE  DC    CL121' '
MESG1A   DC    C'0IZG014I CLOCK TIME OVERHEAD INVOLVED IN PREPARING SOU*
               RCE FOR COMPILER/ASSEMBLER ='
OVHEAD   DC    CL6' '
MESG1B   DC    C' SEC.'
         ORG   MESG1A
MESG1    DS    0CL(L'MESG1A+L'OVHEAD+L'MESG1B)
         ORG
EDMASK   DC    X'402020202120'
MESG2    DC    C'0IZG026I NUMERIC SEQUENCE FIELD REQUIRED'
OPENMESG DC    C'1IZG025I UNABLE TO OPEN SYSIN   .  JOB TERMINATED'
PASSTABL PASSAREA CSECT
         DS    33F                      REST OF JFCB
         EJECT
SYSIN    DCB   DDNAME=SYSIN,                                           *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EXLST=EXLSTSI,                                          *
               EODAD=ENDCOPY
WORK03   DCB   DDNAME=WORK03,                                          *
               DSORG=PS,                                               *
               MACRF=(PM,GL),                                          *
               EXLST=EXLST03,                                          *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=EOJ
SYSPRINT DCB   DDNAME=WORK04,                                          *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               RECFM=FBA,                                              *
               EXLST=EXLSTSP
PDS      DCB   DDNAME=PDS,                                             *
               DSORG=PO,                                               *
               MACRF=R,                                                *
               EXLST=PDSEXLST
SYSLIN   DCB   DDNAME=SYSLIN,                                          *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               LRECL=80,                                               *
               EXLST=LINEXLST,                                         *
               RECFM=FB
         PRINT GEN
         EJECT
         DCBD  DSORG=(PO,PS),DEVD=DA
         EJECT
JFCB     DSECT
      IEFJFCBN
         END
