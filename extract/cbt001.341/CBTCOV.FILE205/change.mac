CHNG     TITLE '                        PREPARE MEMBER FOR CHANGE BY IE*
               BUPDTE'
***********************************************************************
*        CSECT NAME -- CHANGE                                         *
*        OTHER ENTRY POINTS -- NONE                                   *
*        LANGUAGE -- IBM 370 ASSEMBLER XF                             *
*        ATTRIBUTES -- NOT REUSABLE, NOT REENTRANT                    *
*        SUBROUTINES USED -- NONE                                     *
*        ATTACH, LINK, OR LOAD TO -- EXPAND                           *
*                                    IEBUPDTE                         *
*                                    SQUEEZE                          *
*        OPERATING SYSTEM -- OS/370/MVS REL 03.7E (IPO20)             *
*        DATE WRITTEN -- 26 DECEMBER 1972                             *
*        MVS UPDATE -- 27 FEBRUARY 1978                               *
*        AUTHOR -- P. MICHAEL HENDERSON                               *
*                  AUGUST TREUBIG (MVS VERSION)                       *
*        INSTALLATION -- MIDDLE SOUTH SERVICES                        *
*                        200 WEST BANK EXPRESSWAY                     *
*                        GRETNA, LOUISIANA,70053                      *
***********************************************************************
         EJECT
CHANGE   CSECT
         PRIME
         ST    R12,BASE                 STORE BASE ADDR
         XC    SAVEAREA(72),SAVEAREA    CLEAR SAVEAREA
         L     R10,0(R1)                LOAD ADDR OF PASSAREA
         USING PASSAREA,R10             ESTABLISH ADDRESSABILITY
         ST    R10,UPDTEPRM             STORE PASSAREA ADDR IN LIST
         ST    R10,EXPNDPRM             STORE PASSAREA ADDR IN LIST
         MVC   STOWMEMB(8),NAME         MOVE THE MEMBER NAME
         MVC   MEMNAME,NAME             MOVE THE MEMBER NAME
         MVI   C,0                      INDICATE NO USER DATA
         MVI   DECB2,X'7F'              MAKE IT INDICATE I/O OK
         MVC   DSN(44),PDSDSN           MOVE DATA SET NAME TO MESSAGE
         OPEN  (BPAMOUT,OUTPUT)         OPEN TO WRITE DATA SET
         LA    R2,BPAMOUT               GET DCB ADDR
         BAL   R9,GETBUFF               GO GET THE BUFFERS
         XR    R2,R3                    FLIP DECB ADDR
         STM   R2,R8,BUFFADDR           STORE THEIR ADDRS
         LA    R1,EXPNDPRM               GET ADDR OF PARM LIST
         LINK  EP=EXPAND,               LINK TO EXPAND                 *
               MF=(E,(1))               PASS PARMS IN R1
         L     R0,SAVEAREA              SAVE LENGTH
         L     R1,DECB1+12              GET STARTING ADDR
      FREEMAIN R,LV=(0),A=(1)           FREE BUFFERS
         LTR   R15,R15                  CHECK RETURN CODE FROM EXPAND
         BNZ   EOJ                      ERROR IF NOT ZERO
         STOW  BPAMOUT,STOWMEMB,R       STOW MEMBER NAME
         CLM   R15,1,=X'08'             CHECK IF RETURN CODE EIGHT
         BE    STOWOK                   STOW ADDED MEMBER
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   ERR5                     GIVE ERROR
STOWOK   DS    0H                       STOW WAS OKAY
         CLOSE BPAMOUT
         LINK  EP=IEBUPDTE,PARAM=(OPTLST,DDNMLST),VL=1
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   EOJ                      UPDATE NOT GOOD - GET OUT
RETRY    DS    0H                       HERE IF A D37 OR E37 ABEND
         OPEN  (BPAMIN,INPUT)           SINGLE OPENS              *MVS*
         OPEN  (INPUT,OUTPUT)                                     *MVS*
         LA    R2,BPAMIN                GET BASE
         ST    R2,DECB1+8               STORE DCB ADDR IN DECB
         ST    R2,DECB2+8               STORE DCB ADDR IN DECB
         BAL   R9,GETBUFF               GO GET THE BUFFERS
         FIND  BPAMIN,STOWMEMB,D        FIND THE MEMBER
         READ  (R2),SF,MF=E             READ ONE REC IN PREP
         CHECK (R2)                     CHECK I/O
         ST    R7,BUFFENDX              STORE FOR FLIP/FLOP
         LA    R7,BPAMIN                GET DCB ADDR
         USING IHADCB,R7
         LH    R15,DCBBLKSI             GET THE BLKSIZE           *MVS*
         TM    DCBOPTCD,DCBOPTC         IS OPTCD=C                *MVS*
         BO    *+16                     YES, BRANCH               *MVS*
         L     R9,DCBIOBA               LOAD ADDR OF IOB PREFIX   *MVS*
         LH    R9,22(R9)                GET LAST TWO OF CSW (RESI *MVS*
         B     *+12                     YES, BRANCH               *MVS*
         L     R9,DCBIOBAD              LOAD ADDR OF IOB PREFIX   *MVS*
         LH    R9,30(R9)                GET LAST TWO OF CSW (RESI *MVS*
         DROP  R7
         SR    R5,R9                    GET ADJUSTED END ADDR
         SR    R15,R9                   SUBTRACT RESIDUAL COUNT
         LA    R1,INPUT                 GET DCB ADDR
         USING IHADCB,R1
         STH   R15,DCBBLKSI             STORE THE NEW BLKSIZE
         DROP  R1
         XR    R2,R3                    FLIP/FLOP DECB'S
         READ  (R2),SF,MF=E             START READ FOR NEXT BUFFER
         ST    R3,DECBX                 STORE R3 FOR EXCLUSIVE OR
         ST    R6,BUFFX                 STORE FOR EXCLUSIVE OR
         LA    R3,DECB3                 GET NEXT DECB ADDR
         LA    R6,DECB4                 POINT TO OTHER DECB
         XR    R6,R3                    PREPARE FOR FLIP/FLOP
         WRITE (R3),SF,MF=E             WRITE FIRST BUFFER
         STM   R2,R8,BUFFADDR           STORE THE BUFF ADDR
         TM    OPBITS,NOCHNGOP          WAS IT A NOCHANGE
         BO    NOUPDTE                  YES - PROCESS SPECIAL
SQZLINK  DS    0H                       LINK TO SQUEEZE
         LA    R1,UPDTEPRM              LOAD ADDR OF PARM LIST
         LINK  EP=SQUEEZE,MF=(E,(1))    LINK TO SQUEEZE
         CLM   R15,1,=X'14'             CHK FOR RETURN CODE OF 20
         BNE   NOREORG                  NO - THEN DON'T REORG
         CLOSE (BPAMIN,,INPUT)          CLOSE THE DCB'S
         L     R0,SAVEAREA              LOAD LENGTH TO BE FREEDED
         L     R1,DECB1+12               LOAD ADDR TO BE FREEDED
      FREEMAIN R,LV=(0),A=(1)           FREE THE BUFFERS
         L     R15,REORGADR             LOAD ADDR OF REORG ROUTINE
         BALR  R14,R15                   GO DO THE REORG
         XC    CARDCNT,CARDCNT          ZERO THE CARD COUNT
         B     RETRY                     NOW GO TRY THE SQUEEZE AGAIN
NOREORG  DS    0H                        HERE IF NOT A D37 OR E37 ABEND
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   EOJ                      NOT ZERO - TERMINATE
         TM    INDBITS,REPLIND          WAS THE MEMBER REPLACED
         BO    REPLACED                 YES - GIVE NORMAL MESSAGE
         MVC   ADDED,=CL8'ADDED'        INDICATE ADDED
REPLACED DS    0H                       REPLACED MEMBER BYPASS
         MVO   WORK,SSIDATA             MOVE TO ADD SIGN
         UNPK  CHANGENO,WORK            UNPACK THE DATA
         OI    CHANGENO+7,X'F0'         MAKE ZONE F
         L     R9,CARDCNT               GET NUMBER OF CARDS PASSED
         M     R8,=F'8000'              MULTIPLY BY 80 * 100
         L     R5,BLKSIZE               GET BLKSIZE OF COMPRESSED LIB
         L     R1,NUMBLKS               GET NUMBER OF BLOCKS WRITTEN
         MR    R4,R1                    GET TOTAL BYTES WRITTEN
         A     R5,LASTBLK               ADD LENGTH OF LAST BLOCK
         DR    R8,R5                    GET COMPRESSION FACTOR
         CVD   R9,WORK                  CONVERT TO DECIMAL
         ED    COMPFACT,WORK+5          EDIT RESULT
         L     R0,SAVEAREA              GET LENGTH
         L     R1,DECB1+12              GET STARTING ADDR
      FREEMAIN R,LV=(0),A=(1)           FREE BUFFERS
         CLOSE (BPAMIN,,INPUT)
         MVI   MESG1+(L'MESG1),X'40'    MOVE ONE BLANK
         MVC   MESG1+(L'MESG1+1)(L'NEWNMMSG-1),MESG1+(L'MESG1)
         LA    R1,DCBADDR               LOAD ADDR OF LIST FOR OPEN
         OPEN  MF=(E,(1))               OPEN FILE - EXECUTE FORM
         TM    INDBITS,NEWNMIND         IS THIS NEW NAME PROCESSING
         BNO   REGMESG1                 NO - BYPASS
         MVC   MEMNAME,NEWNAME          INDICATE THE NEWNAME
         LA    R1,DSN                   START ADDR OF DSN
         LA    R2,1                     INCR FOR BXLE
         LA    R3,DSN+(L'DSN-1)         END ADDR OF DSN - 1
DSNLOOP  DS    0H                       FIND LAST CHAR OF DSN
         CLI   0(R1),X'40'              LOOK FOR A BLANK
         BE    ENDNAME                  FOUND THE END OF THE NAME
         BXLE  R1,R2,DSNLOOP             LOOP TILL FOUND
ENDNAME  DS    0H                       FOUND THE END OF THE NAME
         MVC   1(L'NEWNMMSG,R1),NEWNMMSG  MOVE NEW NAME MESSAGE
REGMESG1 DS    0H                       GIVE NORMAL MESG1
         MVC   CARDIMAG(L'MESG1+L'NEWNMMSG),MESG1  MOVE MESG TO PRINT
         L     R1,DCBADDR                GET DCB ADDR
         PUT   (1),CARDIMAG             PUT THE MESSAGE
         MVI   CARDIMAG,X'40'           MOVE FIRST BLANK
         MVC   CARDIMAG+1(120),CARDIMAG BLANK THE FIELD
         MVC   CARDIMAG(L'MESG3),MESG3  MOVE THE MESSAGE
         L     R1,DCBADDR                GET DCB ADDR
         PUT   (1),CARDIMAG             PUT THE MESSAGE
         SR    R15,R15                  RETURN ZERO CONDITION CODE
EOJ      DS    0H                       END OF JOB
         LR    R11,R15                  SAVE R15
         OPEN  (BPAMOUT,OUTPUT)         SINGLE  OPEN DCB'S          MVS
         OPEN  (BPAMIN,OUTPUT)                                      MVS
         STOW  BPAMOUT,STOWMEMB,D       DELETE MEMBER FROM LIB
         STOW  BPAMIN,STOWMEMB,D        DELETE MEMBER FROM LIB
         LR    R15,R11                  RESTORE R15
         CLM   R15,1,=X'10'             CHECK IF RETURN CODE IS 16
         BE    RCOKAY                   RETURN CODE OKAY
         SLL   R15,2                    MULTIPLY BY FOUR
RCOKAY   DS    0H                       BYPASS SHIFT
         LR    R11,R15                  SAVE R15
         CLOSE (BPAMOUT,,BPAMIN,,INPUT) MAKE SURE ALL DCB'S CLOSED
         LR    R15,R11                  RESTORE R15
         TERME                          TERMINATE
         EJECT
GETBUFF  DS    0H                       GET BUFFERS FOR BSAM
         USING IHADCB,R2
         LH    R7,DCBBLKSI              GET THE BLKSIZE
         DROP  R2
         LR    R6,R7                    LOAD BLKSIZE
         LA    R6,7(R6)                 ADD 7 TO ROUND TO DOUBLEWORD
         SRL   R6,3                     ZERO LAST THREE BITS
         SLL   R6,3                     RESTORE
         LA    R0,0(R6,R6)              LOAD R0 WITH TWICE R6
         ST    R0,SAVEAREA              SAVE LENGTH
       GETMAIN R,LV=(0)                 GET MAIN STORAGE FOR BUFFER
         LR    R4,R1                    GET BEGINNING ADDR
         AR    R6,R4                    GET BEGINNING OF SECOND BUFF
         ST    R4,DECB1+12              STORE BUFF ADDR
         ST    R6,DECB2+12              STORE BUFF ADDR
         ST    R4,DECB3+12              STORE FIRST BUFFER ADDR
         ST    R6,DECB4+12              STORE SECOND BUFFER ADDR
         LA    R2,DECB1                 GET DECB ADDR
         LA    R3,DECB2                 GET DECB ADDR
         XR    R3,R2                    PREPARE FOR FLIP/FLOP
         LR    R8,R4                    GET BEGINNING ADDRESS
         LR    R5,R7                    LOAD BLKSIZE
         AR    R5,R4                    GET END ADDRESS
         AR    R7,R6                    GET END ADDRESS
         XR    R6,R4                    PREPARE FOR FLIP/FLOP
         XR    R7,R5                    PREPARE FOR FLIP/FLOP
         BR    R9                       RETURN
         EJECT
EXIT2    DS    0H                       RECEIVE ROUTINE FOR EXPAND
         STM   R14,R12,12(R13)          SAVE REGISTERS
         USING EXIT2,R15
         L     R12,BASE                 LOAD BASE REGISTER
         DROP  R15
         LA    R2,SAVEAREA              GET SAVEAREA ADDR
         ST    R2,8(R13)                CHAIN
         ST    R13,4(R2)                     SAVEAREAS
         LR    R13,R2                   GET NEW SAVEAREA ADDR
         LM    R2,R8,BUFFADDR           GET REGISTER VALUES
         LTR   R1,R1                    CHECK IF ZERO
         BZ    EXIT2END                 IF ZERO - THAT'S ALL FOLKS
         MVC   0(80,R8),0(R1)           MOVE ONE CARD
         LA    R8,80(R8)                ADD 80 TO R8
         CR    R8,R5                    CHECK IF AT END
         BL    EXIT2RET                 ELSE KEEP ADDING
         CHECK (R2)                     CHECK I/O OPERATION
LAST     DS    0H
         XR    R2,R3                    FLIP/FLOP
         XR    R5,R7                    FLIP/FLOP
         XR    R4,R6                    FLIP/FLOP ADDR
         LR    R8,R4                    GET NEW BUFFER ADDR
         WRITE (R2),SF,MF=E             WRITE ONE RECORD
EXIT2RET DS    0H                       LAST RECORD
         STM   R2,R8,BUFFADDR           STORE REGISTERS
         L     R13,4(R13)               RESTORE R13
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         BR    R14                      RETURN
EXIT2END DS    0H                       END OF THE LINE
         CHECK (R2)                     CHECK I/O OPERATION
         SR    R8,R4                    GET LENGTH OF LAST BLOCK
         LTR   R8,R8                    CHECK IF ZERO
         BZ    EXIT2RET                 RETURN IF ZERO
         LA    R9,BPAMOUT               LOAD DCB ADDR
         USING IHADCB,R9
         STH   R8,DCBBLKSI              STORE THE BLKSIZE
         DROP  R9
         XR    R2,R3                    FLIP/FLOP DECB'S
         WRITE (R2),SF,MF=E             WRITE LAST BUFFER
         CHECK (R2)                     CHECK THE WRITE
         B     EXIT2RET                 RETURN
         EJECT
EXIT3    DS    0H                       SQUEEZE EXIT
         STM   R14,R12,12(R13)          SAVE REGISTERS
         USING EXIT3,R15
         L     R12,BASE                 LOAD BASE REGISTER
         DROP  R15
         LA    R2,SAVEAREA              GET SAVEAREA ADDR
         ST    R2,8(R13)                CHAIN
         ST    R13,4(R2)                     SAVEAREAS
         LR    R13,R2                   GET NEW SAVEAREA ADDR
         LM    R2,R8,BUFFADDR           RESTORE REGISTERS
         CR    R8,R5                    CHECK IF AT END OF BUFFER
         BL    EXIT3RET                 ELSE RETURN
         CHECK (R3)                     CHECK THE WRITE
         XR    R3,R6                    FLIP DECB ADDR
         CHECK (R2)                     CHECK THE I/O
         X     R2,DECBX                 FLIP/FLOP DECB'S
         X     R4,BUFFX                 FLIP/FLOP BUFFER ADDRESS
         X     R5,BUFFENDX              FLIP/FLOP BUFF END ADDR
         LR    R8,R4                    GET NEW BUFFER ADDRESS
         USING IHADCB,R7
         LH    R15,DCBBLKSI             GET THE BLKSIZE           *MVS*
         TM    DCBOPTCD,DCBOPTC         IS OPTCD=C                *MVS*
         BO    *+16                     YES, BRANCH               *MVS*
         L     R1,DCBIOBA               LOAD ADDR OF IOB PREFIX   *MVS*
         LH    R1,22(R1)                GET LAST TWO OF CSW (RESI *MVS*
         B     *+12                     YES, BRANCH               *MVS*
         L     R1,DCBIOBAD              LOAD ADDR OF IOB PREFIX   *MVS*
         LH    R1,30(R1)                GET LAST TWO OF CSW (RESI *MVS*
         DROP  R7
         SR    R5,R1                    GET ADJUSTED END BUFFER ADDR
         SR    R15,R1                   GET NEW BLKSIZE
         LA    R9,INPUT                 GET DCB ADDR
         USING IHADCB,R9
         STH   R15,DCBBLKSI             STORE NEW BLKSIZE
         DROP  R9
         WRITE (R3),SF,MF=E             WRITE THE OTHER BUFFER
         READ  (R2),SF,MF=E             READ A BLOCK
EXIT3RET DS    0H                       RETURN
         MVC   CARDIMAG,0(R8)           MOVE CARD TO HOLD AREA
         LA    R1,CARDIMAG              GET THE ADDR FOR SQUEEZE
         LA    R8,80(R8)                ADD 80 TO R8
         L     R15,CARDCNT              GET COUNT OF CARDS
         LA    R15,1(R15)               ADD ONE
         ST    R15,CARDCNT              STORE COUNT
RETURN   DS    0H                       LAST RETURN
         STM   R2,R8,BUFFADDR           SAVE REGISTERS
         L     R13,4(R13)               RESTORE R13
         LM    R14,R0,12(R13)           RESTORE
         LM    R2,R12,28(R13)               REGISTERS
         BR    R14                      RETURN
EXIT3END DS    0H                       END OF THE LINE
         SR    R1,R1                    CLEAR R1
         B     RETURN                   GO BACK
         EJECT
         USING IHADCB,R1
DCBEXIT1 DS    0H                       DCB EXIT FOR WORK01
         CLC   DCBBLKSI,=Y(0)           CHECK IF ZERO
         BNER  R14                      RETURN IF NOT ZERO
         MVC   DCBBLKSI,=Y(3120)        DEFAULT TO 3120           *MVS*
         BR    R14                      RETURN
         SPACE 2
DCBEXIT2 DS    0H                       DCB EXIT FOR WORK02
         LA    R2,INPUT                 GET THE DCB ADDR
         MVC   (DCBBLKSI-IHADCB)(2,R2),DCBBLKSI  MOVE THE BLKSIZE
         BR    R14                      RETURN
         SPACE 3
ERR5     DS    0H                       STOW ERR
         LA    R1,DCBADDR               LOAD ADDR OF LIST FOR OPEN
         OPEN  MF=(E,(1))               OPEN THE FILE
         MVI   CARDIMAG,X'40'           BLANK THE LINE
         MVC   CARDIMAG+1(132),CARDIMAG BLANK THE LINE
         MVC   CARDIMAG(L'MESG2),MESG2  MOVE THE MESSAGE
         L     R1,DCBADDR                LOAD DCB ADDR
         PUT   (1),CARDIMAG             PUT THE MESSAGE
         LA    R15,16                   MAKE RETURN CODE 15
         B     EOJ                      GET OUT
         EJECT
NOUPDTE  DS    0H                       PROCESS FOR 'NOCHANGE'
         LA    R15,EXIT3                GET ROUTINE ADDR
         BALR  R14,R15                  BRANCH TO GET PUT ROUTINE
         LTR   R1,R1                    RECORD PASSED?
         BNZ   NOUPDTE                  YES, BRANCH
         CLOSE (BPAMIN,,INPUT)          CLOSE FILES
         L     R0,SAVEAREA              GET LENGTH OF AREA
         L     R1,DECB1+12              GET ADDR
      FREEMAIN R,LV=(0),A=(1)           FREE BUFFERS
         LA    R1,DCBADDR               LOAD ADDR OF LIST FOR OPEN
         OPEN  MF=(E,(1))               OPEN SYSPRINT
         MVI   CARDIMAG,X'40'           START TO BLANK THE FIELD
         MVC   CARDIMAG+1(132),CARDIMAG BLANK THE FIELD
         MVC   CARDIMAG(L'MESG4),MESG4  MOVE THE MESSAGE
         L     R1,DCBADDR               LOAD DCB ADDR
         PUT   (1),CARDIMAG             PUT THE MESSAGE
         SR    R15,R15                  SET ZERO RETURN CODE
         B     EOJ                      TERMINATE
         EJECT
WORK     DS    D
BASE     DS    F
SAVEAREA DS    18F
BUFFADDR DS    7F
DECBX    DS    F
BUFFX    DS    F
BUFFENDX DS    F
CARDCNT  DC    F'0'
EXLST01  DC    0F'0',X'85',AL3(DCBEXIT1)
EXLST02  DC    0F'0',X'85',AL3(DCBEXIT2)
EXPNDPRM DS    F                        PASSAREA ADDR
         DC    A(EXIT2)
UPDTEPRM DS    F
         DC    A(EXIT3)
STOWMEMB DS    0H,CL8
TTR      DS    CL3
C        DS    CL1
         CNOP  2,4                      HALF WORD - NOT FULLWORD
OPTLST   DC    H'0'                     NO OPTIONS
         CNOP  2,4
DDNMLST  DC    H'72'
         DC    8F'0'
         DC    CL8'WORK03'
         DC    CL8'WORK04'
         DC    2F'0'
         DC    CL8'WORK01'
         DC    CL8'WORK02'
         WRITE DECB1,SF,BPAMOUT,MF=L
         WRITE DECB2,SF,BPAMOUT,MF=L
         WRITE DECB3,SF,INPUT,MF=L
         WRITE DECB4,SF,INPUT,MF=L
CARDIMAG DS    CL80
         DC    CL53' '
MESG1    DS    0CL86
         DC    C'0IZG013I MEMBER NAME XXXXXXXX REPLACED IN '
DSN      DC    CL44' '                  DATA SET NAME
         ORG   MESG1+21
MEMNAME  DS    CL8
         DS    CL1
ADDED    DS    CL8
         ORG
NEWNMMSG DC    C' AND IS A ''NEWNAME''.'
MESG2    DC    C'1IZG010I UNABLE TO UPDATE DIRECTORY OF PARTITIONED DAT*
               A SET DEFINED BY WORK01 DD CARD.'
MESG3    DS    0CL86
         DC    C'0IZG015I COMPRESSION FACTOR FOR THIS SOURCE CODE ='
COMPFACT DC    X'402021204B2020'
         DC    C'/1'
         DC    C'.  CHANGE NUMBER = '
CHANGENO DC    CL8' '
MESG4    DC    C'0IZG019I NOTE ** THE CHANGES REFLECTED IN THIS RUN HAV*
               E NOT BEEN APPLIED TO THE SOURCE CODE ON THE LIBRARY.'
         EJECT
BPAMOUT  DCB   DDNAME=WORK01,                                          *
               DSORG=PO,                                               *
               MACRF=W,                                                *
               EXLST=EXLST01,                                          *
               RECFM=FB,                                               *
               LRECL=80
         EJECT
BPAMIN   DCB   DDNAME=WORK02,                                          *
               DSORG=PO,                                               *
               MACRF=(R,W),                                            *
               EXLST=EXLST02,                                          *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=EXIT3END
         EJECT
INPUT    DCB   DDNAME=INPUT,                                           *
               DSORG=PS,                                               *
               MACRF=W,                                                *
               RECFM=FB,                                               *
               LRECL=80
         EJECT
         DCBD  DSORG=(PO,PS),DEVD=DA
PASSAREA PASSAREA
         END
