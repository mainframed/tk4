MVSC     TITLE 'MVS CORE ZAP PROGRAM'
*   THIS PROGRAM CAN MODIFY THE NUCLEUS OR COMMON STORAGE AREAS IN MVS
*WITHOUT THE NEED FOR STOPPING THE CPU.  IT DOES NOT PROVIDE THE
*ABILITY TO ZAP THE PRIVATE AREA.  THE SYNTAX OF CORE ZAP COMMANDS HAS
*BEEN MADE SIMILAR TO AMASPZAP STATEMENTS FOR CONVENIENCE.
*   NO DD CARDS OTHER THAN STEPLIB ARE REQUIRED BY THIS PROGRAM.
*COMMUNICATION WITH THE PROGRAM IS PERFORMED VIA THE OUTSTANDING REPLY,
*'ENTER CORE ZAP REQUEST'.  THE CORE ZAPS PERFORMED WILL BE RECORDED
*IN THE JES2 JOB LOG.  INVALID REPLIES WILL RESULT IN AN ERROR MESSAGE,
*BUT WILL NOT TERMINATE THE PROGRAM.  THE VALID REPLIES ARE:
*
*ORIGIN XXXXXX
*   THIS SPECIFIES THE VIRTUAL STORAGE ADDRESS OF A CONTROL BLOCK OR
*   CSECT.  IN THE LATTER CASE IT IS EQUIVALENT TO AN AMASPZAP NAME
*   STATEMENT.  VER AND REP STATEMENTS WILL USE OFFSETS FROM THIS
*   LOCATION.  AN ORIGIN STATEMENT CANCELS ANY REP STATEMENTS THAT
*   WERE PREVIOUSLY ENTERED BUT NOT YET PERFORMED BY A GO.
*VER XXXX DATA
*   THIS VERIFIES THE CONTENTS OF VIRTUAL STORAGE BEGINNING AT OFFSET
*   XXXX FROM THE CURRENTLY SPECIFIED ORIGIN.  THE REPLY 'VERIFY OK'
*   OR 'VERIFY FAILED' WILL BE ISSUED BEFORE THE WTOR IS REINSTATED.
*REP XXXX DATA
*   THIS DOES NOT MODIFY STORAGE IMMEDIATELY.  INSTEAD THE REQUEST TO
*   MODIFY THE CONTENTS OF STORAGE BEGINNING AT VIRTUAL ADDRESS XXXX
*   IS STACKED IN A BUFFER.  THIS PERMITS YOU TO CANCEL MISTYPED ZAPS.
*GO
*   THIS CAUSES PREVIOUSLY ENTERED REP REQUESTS TO BE PERFORMED BY
*   SUCCESSIVE MVC INSTRUCTIONS FROM THE BUFFER.  THE IDEA IS TO
*   MINIMIZE THE POSSIBILITY OF ERRORS DUE TO EXECUTION OF PARTIALLY
*   ENTERED CORE ZAPS, BUT FOR NON-CONTIGUOUS ZAPS THIS POSSIBILITY
*   IS NOT ELIMINATED ENTIRELY.
*EXIT
*   THIS TERMINATES EXECUTION OF THE PROGRAM.  REP STATEMENTS NOT
*   FOLLOWED BY A 'GO' ARE CANCELED.
         EJECT
*   A COPY OF THE PROGRAM MACRO IS INCLUDED IN MODULE UICMON.
MCOREZAP PROGRAM 13
*                                       REGISTER USAGE
*R11                               INTERNAL LINKAGE REGISTER
*R10                               POINTS TO AREA HOLDING REPS
         LA    R9,1                HOLDS THE CONSTANT 1
         LA    R8,15               MASK TO GET RID OF ZONE BITS
*R7                                     UNUSED
*R6                                INPUT DATA POINTER
*R5                          ANOTHER INTERNAL LINKAGE REGISTER
*R4                          POINTER TO START OF CURRENT OUTPUT FIELD
*R3                          POINTER TO START OF CURRENT OUTPUT STMT
*R2                                OUTPUT DATA POINTER
         SPACE 3
WORKLEN  EQU   400                 WORK AREA FOR REPS
         GETMAIN R,LV=WORKLEN
         LR    R10,1               SAVE ADDRESS OF WORK AREA
         LA    R1,WORKLEN(,R10)    GET END OF BUFFER
         BCTR  R1,0                SAVE LAST BYTE FOR END MARKER
         ST    R1,BUFEND           SAVE END OF BUFFER ADDRESS
         LR    R3,R10              SET OUTPUT POINTER
         EJECT
READ     EQU   *                   PREPARE TO BLANK OUT REPLY BUFFER
         MVC   BUFFER,BLANKBUF                AND BLANK IT OUT
*                                  READ IN ZAP REQUESTS FROM CONSOLE
         XC    WTORECB,WTORECB     CLEAR THE ECB
         WTOR  'ENTER CORE ZAP REQUEST',BUFFER,80,WTORECB,ROUTCDE=(1)
         WAIT  ECB=WTORECB         WAIT FOR A REPLY
         OC    BUFFER,BLANKBUF     CONVERT INPUT TO UPPER CASE
         LA    R6,BUFFER
         BAL   R11,FINDNBLK        SEARCH FOR FIRST NONBLANK
         CLC   $VER,0(R6)
         BE    VER
         CLC   $REP,0(R6)
         BE    REP
         CLC   $ORIGIN,0(R6)
         BE    ORIGIN
         CLC   $GO,0(R6)           READY TO PROCEED WITH ZAP?
         BE    GO                  GO TO IT IF SO
         CLC   $EXIT,0(R6)
         BE    DONE
         WTO   'INVALID REPLY FOR CORE ZAP',ROUTCDE=(1)
         B     READ
         EJECT
ORIGIN   LA    R6,6(,R6)           BUMP PAST WORD 'ORIGIN'
         CLI   0(R6),C' '          NEXT CHARACTER SHOULD BE BLANK
         BNE   INVALID             ERROR IF NOT
         LR    R3,R10              INITIALIZE OUTPUT POINTER
         LR    R4,R3               INITIALIZE OUTPUT POINTER
         BAL   R5,GETADDR          CONVERT ADDRESS FIELD
         MVC   STARTLOC,ADDRESS    COPY TO SPECIAL ORIGIN ADDRESS
         B     READ                GET NEXT INPUT STATEMENT
         SPACE 3
VER      LA    R6,3(,R6)           BUMP PAST WORD 'VER'
         CLI   0(R6),C' '          NEXT CHARACTER SHOULD BE BLANK
         BNE   INVALID             ERROR IF NOT
         LR    R4,R3               RESET OUTPUT POINTER
         BAL   R5,GETADDR          CONVERT ADDRESS FIELD
         CLI   0(R6),C' '          NEXT CHARACTER SHOULD BE BLANK
         BNE   INVALID             ERROR IF NOT
         BAL   R11,FINDNBLK        FIND FIRST CHARACTER OF DATA
         LR    R2,R4               COPY OUTPUT POINTER
         BAL   R11,CONVERT         CONVERT DATA TO BE VERIFIED
         SR    R2,R4               LENGTH OF DATA TO VERIFY
         BZ    INVALID             VERIFY NOTHING? MUST BE WRONG!
         BCTR  R2,0                SUBTRACT ONE FOR CLC
         L     R5,ADDRESS          LOAD ADDRESS TO VERIFY
         A     R5,STARTLOC         ADD ORIGIN ADDRESS
         EX    R2,VERIFY           DO THE VERIFY
         BE    VERIFIED            BRANCH IF SUCCESSFUL
         WTO   'VERIFY FAILED',ROUTCDE=(1)
         B     READ
VERIFIED WTO   'VERIFY OK',ROUTCDE=(1)
         B     READ
*
VERIFY   CLC   0(1,R5),0(R4)       *** EXECUTED INSTRUCTION ***
         EJECT
REP      LA    R6,3(,R6)           BUMP PAST WORD 'REP'
         CLI   0(R6),C' '          NEXT CHARACTER SHOULD BE BLANK
         BNE   INVALID             ERROR IF NOT
         LR    R4,R3               UPDATE OUTPUT FIELD POINTER
         BAL   R5,GETADDR          CONVERT ADDRESS FIELD
         CLI   0(R6),C' '          NEXT CHARACTER SHOULD BE BLANK
         BNE   INVALID             ERROR IF NOT
         L     R0,ADDRESS          LOAD ADDRESS VALUE
         A     R0,STARTLOC         ADD ADDRESS OF ORIGIN
         STCM  R0,7,1(R3)          SAVE IN WORK AREA
         LA    R4,4(,R3)           ADVANCE FIELD POINTER
         BAL   R11,FINDNBLK        FIND FIRST CHARACTER OF DATA FIELD
         LR    R2,R4               INITIALIZE OUTPUT POINTER
         BAL   R11,CONVERT         CONVERT DATA FIELD
         LR    R5,R2               SAVE END OF STATEMENT ADDRESS
         SR    R2,R4               GET LENGTH OF DATA FIELD
         STC   R2,0(,R3)           STORE AT START OF STATEMENT
         LR    R3,R5               ADVANCE STATEMENT POINTER
         B     READ                AND GO BACK FOR NEXT STATEMENT
         SPACE 3
GO       EQU   *                   EXECUTE PREVIOUSLY STORED REPS
         MVI   0(R3),0             MARK END OF REP REQUESTS
         MODESET KEY=ZERO          WILL REQUIRE KEY 0 TO ZAP NUCLEUS
         LR    R3,R10              BEGIN WITH FIRST REP IN WORK AREA
         SR    R2,R2               CLEAR LENGTH REGISTER
REPLOOP  CLI   0(R3),0             TEST FOR END OF REQUESTS
         BZ    REPEND              BRANCH IF DONE
         IC    R2,0(,R3)           GET LENGTH OF REP DATA
         ICM   R5,15,0(R3)         LOAD ADDRESS TO REP (LEN IN HI BYTE)
         BCTR  R2,0                REDUCE COUNT FOR MVC
         EX    R2,REPINST          *** AND DO THE ZAP ***
         LA    R3,5(R2,R3)         GET NEXT REP STATEMENT
         B     REPLOOP             AND CONTINUE
REPEND   EQU   *
         MODESET KEY=NZERO         GET OUT OF KEY 0
         B     READ                CHECK FOR MORE ZAPS COMING
*
REPINST  MVC   0(1,R5),4(R3)       *** EXECUTED INSTRUCTION ***
         EJECT
DONE     EQU   *                   CLEAN UP AND TERMINATE PROGRAM
         FREEMAIN R,LV=WORKLEN,A=(R10)
         B     EXIT                DONE, NO OPEN DATA SETS ETC.
         SPACE 3
GETADDR  BAL   R11,FINDNBLK        FIND NEXT NONBLANK
         LR    R2,R4               COPY OUTPUT POINTER
         BAL   R11,CONVERT         CONVERT HEX DIGITS
         SR    R2,R4               GET LENGTH OF CONVERTED VALUE
         CH    R2,MAXADLEN         CHECK FOR LONG ADDRESS
         BH    INVALID             ERROR IF SO
         SR    R0,R0
         ST    R0,ADDRESS          CLEAR ADDRESS FIELD
         LTR   R2,R2               TEST FOR NULL ADDRESS
         BZ    RESTR2              TREAT AS ZERO IF SO
         BCTR  R2,0                SUBTRACT ONE FOR MVC
         LA    R1,ADDRESS+3        SET UP TO RIGHT JUSTIFY THE
         SR    R1,R2                 ADDRESS VALUE
         EX    R2,MOVEADDR         MOVE INTO RESERVED FIELD
RESTR2   LR    R2,R4               RESTORE R2 TO REUSE AREA
         BR    R5                  RETURN TO CALLER
MOVEADDR MVC   0(1,R1),0(R4)       *** EXECUTED INSTRUCTION ***
         SPACE 3
FNDNBLK2 AR    R6,R9               ADVANCE TO NEXT CHARACTER IN INPUT
FINDNBLK CLI   0(R6),C' '          IS IT A BLANK
         BE    FNDNBLK2            IF NOT, GET NEXT CHARACTER
         BR    R11                 NONBLANK FOUND, RETURN TO CALLER
         EJECT
CONVERT  EQU   *
         CLI   0(R6),C'A'          CHECK FOR ALPHANUMBERIC
         BNL   NOTPUNCT            BR IF SO TO PROCESS BYTE
PUNCT    CLI   0(R6),C' '          TEST FOR BLANK
         BE    ENDCONVT            IF SO, RETURN TO CALLER
         CLI   0(R6),C','          TEST FOR COMMA
         BE    CONVERT2            ADVANCE TO NEXT CHARACTER IF SO
         B     INVALID             IF NOT, INVALID CHARACTER
NOTPUNCT CLI   1(R6),C'A'          CHECK FOR LEGITIMATE SECOND BYTE
         BL    INVALID             BRANCH IF ERRONEOUS DATA
         BAL   R14,NIBBLE          CONVERT THE FIRST HALF BYTE
         LR    R15,R0              COPY CONVERTED VALUE
         SLL   R15,4               MOVE TO HIGH HALF BYTE
         AR    R6,R9               BUMP TO NEXT BYTE
         BAL   R14,NIBBLE          CONVERT THE SECOND HALF BYTE
         OR    R15,R0              GET FULL CONVERTED BYTE
         STC   R15,0(,R2)          STORE IN OUTPUT AREA
         AR    R2,R9               AND OUTPUT POINTER
         C     R2,BUFEND           IS ROOM LEFT IN BUFFER?
         BL    CONVERT2            BRANCH IF SO TO CONTINUE
         WTO   'CAPACITY EXCEEDED',ROUTCDE=(1)
         B     READ                WIPE OUT EFFECT OF CURRENT STATEMENT
CONVERT2 AR    R6,R9               SKIP OVER COMMA
         B     CONVERT             AND CONVERT MORE BYTES
ENDCONVT EQU   *
         BR    R11                 AND RETURN TO CALLER
         EJECT
NIBBLE   EQU   *
         SR    R0,R0
         IC    R0,0(,R6)           LOAD IN THE CHARACTER
         CLI   0(R6),C'F'
         BNH   HEXCHAR
         CLI   0(R6),C'0'
         BL    INVALID
         CLI   0(R6),C'9'
         BNH   DIGIT               IF DIGIT, SKIP ADDING 9
INVALID  WTO   'INVALID INPUT',ROUTCDE=(1)
         B     READ                GO BACK TO TRY AGAIN
HEXCHAR  AH    R0,ADJUST           ADJUST HEX VALUE
DIGIT    NR    R0,R8               MASK OFF ZONE BITS
         BR    R14                 RETURN TO CALLER
         SPACE 3
$ORIGIN  DC    C'ORIGIN'
$VER     DC    C'VER'
$REP     DC    C'REP'
$GO      DC    C'GO'
$EXIT    DC    C'EXIT'
ADJUST   DC    H'9'             ADJUSTMENT FOR HEX CHARACTERS (C1 = 0A)
MAXADLEN DC    H'3'                MAXIMUM ALLOWABLE LENGTH FOR ADDRESS
WTORECB  DS    F
BUFEND   DS    F                   END OF BUFFER FOR REP STATEMENTS
BUFFER   DS    CL80                BUFFER TO HOLD REP STATEMENTS
ADDRESS  DS    F                   ADDRESS FIELD FROM INPUT
STARTLOC DS    F                   ADDRESS FIELD FROM ORIGIN COMMAND
BLANKBUF DC    CL80' '             INITIALIZE AND UPPER CASE THE BUFFER
         END
