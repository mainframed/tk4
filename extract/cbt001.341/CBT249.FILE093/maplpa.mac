      SUBROUTINE MAPLPA (MODULE, INDIC, IMIN)
      REAL*8 MODULE(2500), NAME(2), NULL/'        '/
      INTEGER LOC(2), LEN(2)
      LOGICAL*1 INDIC(2500), AST/'*'/, LTEST(2), LTST(2)
      INTEGER*2 ITEST, ONE/' 1'/, NUM/' N'/, BLNK/'  '/, ITST
      EQUIVALENCE (ITEST,LTEST(1)), (ITST,LTST(1))
C
C   ROUTINE READS IN MODULE NAMES FROM STREAMS 10 AND 11
C   AND PLACES THEM IN MODULE . INDIC=* IF MORE THAN ONE MODULE/PFTE
C
   20 CONTINUE
      ITST = BLNK
      ITEST = BLNK
      READ (10, 1000, END=10) LTEST(2), LTST(2)
 1000 FORMAT (A1,30X,A1)
      IF (ITEST .NE. ONE .OR. ITST .NE. NUM) GOTO 20
C
C   BEGINNING OF NUMERICAL LPA MAP
C
   30 CONTINUE
      READ (10, 1010, END=10) LTEST(2)
 1010 FORMAT (A1)
      IF (ITEST .NE. BLNK) GOTO 30
      BACKSPACE 10
      READ (10, 1011, END=10) (NAME(I), LOC(I), LEN(I), I=1,2)
 1011 FORMAT(1X, A8,1X,Z3,7X,Z3, 38X, A8,1X,Z3,7X,Z3)
      DO 40 I = 1, 2
      IF (NAME(I) .EQ. NULL) GOTO 40
      IT = LOC(I) - IMIN + 1
      IF (IT .GT. 2500 .OR. IT .LE. 0) GOTO 40
      IEND = IT + LEN(I) - 1
      IF (IEND .LT. IT) IEND = IT
      DO 35 J = IT, IEND
      IF (MODULE(J) .NE. NULL) INDIC(J) = AST
      IF (MODULE(J) .EQ. NULL) MODULE(J) = NAME(I)
   35 CONTINUE
   40 CONTINUE
      GOTO 30
   10 CONTINUE
C
C   END OF LPA DATA
C
      READ (11,1100,END=11) NAME(1), LOC(1), LEN(1)
 1100 FORMAT (A8,1X,Z3,1X,Z3)
      IT = LOC(1) - IMIN + 1
      IF (IT .GT. 2500 .OR. IT .LE. 0) GOTO 10
      IEND = IT + LEN(1) - 1
      IF (IEND .LT. IT) IEND = IT
      DO 50 J = IT, IEND
      IF (MODULE(J) .NE. NULL) INDIC(J) = AST
      IF (MODULE(J) .EQ. NULL) MODULE(J) = NAME(1)
   50 CONTINUE
      GOTO 10
   11 CONTINUE
C
C   END OF MLPA DATA
C
      NAME(1) = MODULE(1)
      DO 60 I = 2, 2500
      IF (MODULE(I) .EQ. NULL) MODULE(I) = NAME(1)
      NAME(1) = MODULE(I)
   60 CONTINUE
CCCCCCCCCCCCCCCCCCCCCCCCC FOR DEBUGGING CCCCCCCCCCCCCCCCCCCC
C     DO 70 IT = 1, 2500, 5
C     IEND = IT + 4
C6904 FORMAT (5(2X,A8,1X,A1))
C  70 WRITE (6, 6904) (MODULE(I), INDIC(I), I = IT, IEND)
CCCCCCCCCCCCCCCCCCCCCCCCC END OF DEBUGGING CCCCCCCCCCCCCCCCC
      RETURN
      END
