      SUBROUTINE ANLS(NAME,DATE)
C
C   STORAGE AREAS FOR 1 PAGE OF SNAPSHOTS
C
      REAL*8 DATE
      REAL*8 JOBNAM(256)
      LOGICAL*1 TYPE(18)
      LOGICAL FIRST
      INTEGER*2 PGRP(18),DISPRT(18),NODSPQ(18),DWAIT(18),
     * VIOS(18),NVIO(18),WLM(18),SWPIN(18),SWPOUT(18),UIC(18)
      INTEGER*2 NOWTS(256),SWCT(18)
      INTEGER*2 ENQH(18),DOMAIN(18)
      INTEGER*4 DSTEP(18),DSRB(18),ALLOC(18),LSQA(18),LOCAL(18),
     * FIXED(18),VIOF(18),
     * SERVSM(18),DSRVSM(18),RRV(18),EVENT(18),STATUS(18)
      INTEGER*4 STPTIM(256),SRBTIM(256),SRVSUM(256)
      INTEGER*4 STP(18),SRB(18),IASID(18),NASID
      INTEGER*4 TOTSTP,TOTSRB,TOTWAT,TOTSRV,TOTIN
      INTEGER*4 TOTOUT,TOTNSR
      INTEGER*4 TOTTSO,TOTINT
      INTEGER*4 SWAP(18,2),ALGOR(18,2),RTIMPS(18),SWAPCD(18)
      REAL*4 PCCPU(18)
      REAL*8 INIT/'INIT    '/
      INTEGER SWAPRE(13) /'TRMO', 'TRMI', 'LONG', 'AUXS', 'REAL',
     * 'DETW', 'REQS', 'ENQX', 'EXWK', 'UNIL', 'TRAN', 'LOGS', 'LOGF'/
C
C   STORAGE AREAS FOR DATA INPUT
C
      REAL ARRAY(24)
      INTEGER*4 IDATA(23),TIME,TTIME,ASID
      EQUIVALENCE (ARRAY(2),IDATA(1)),(ARRAY(1),NT4)
      REAL*8 R81
      REAL*8 RBIT(4)
      INTEGER J1(2,256)
      INTEGER*4 IT4,NT4
      INTEGER*2 IT2(2),NT2(2)
      LOGICAL*1 IT1(4),NT1(4)
      LOGICAL MASK/Z00007000/
      LOGICAL DELTA
      LOGICAL*1 S/'S'/,L/'L'/,B/'B'/,M/'M'/,EVNT(8)
      LOGICAL*1 LTIME(4),LTTIME(4)
      LOGICAL*1 IBIT(8,4)
      INTEGER*2 IDAT(46)
      REAL*8 FMT(20),NAPP,APP
      INTEGER*4 IN /'  IN'/, BLNK /'    '/, MIN4 /'-   '/
      INTEGER*4 STS(3) /' OUT', ' LSW', 'NS/R'/
      LOGICAL*4 LTEMP, LFLG(3) /Z0000FC00, Z00000200, Z00000080/
      INTEGER*2 MIN/'- '/
C
      EQUIVALENCE(IT4,IT2(1)),(IT4,IT1(1)),(NT4,NT1(1))
      EQUIVALENCE(LTTIME(1),TTIME)
      EQUIVALENCE(IDATA(1),TIME),(TIME,LTIME(1)),(IDATA(4),NASID),
     *(IDATA(1),IDAT(1)),(R81,IDATA(2)),(LTEMP,ITEMP)
      EQUIVALENCE(JOBNAM(1),J1(1,1))
      EQUIVALENCE(RBIT(1),IBIT(1,1)),(NT4,NT2(1))
C
      DATA EVNT/'M','P','Q','E','C','T','O','L'/
      DATA FMT /'(1H+,12X',18*'        ',')       '/
      DATA APP /',I6     '/, NAPP /',5X,A1  '/
      DATA LENGTH /23/
      DATA RBIT/'OIB WRT ','NCW APET','WARCSIQD','XBERPAIC'/
C
C   DESCRIPTION OF PRINTOUT AND SOURCE DATA FIELDS
C
C  INDEX IN  INDEX IN   FIELD IN    SOURCE     OUTPUT
C   IDATA      IDAT     MONS LOG     FIELD   IDENTIFICATION
C
C       1               TIME                  (SNAPSHOT AT)
C     2,3               JOBNAME                JOBNAMES
C       4               ASID       ASCBASID    ASID
C     5,6    10,11      ASC$EJST   ASCBEJST    STEP TIME (& DELTA)
C               13      ASC$SEQN   ASCBSEQN    # IN DISP Q
C               14      ASC$DP     ASCBDP      DISP PRTY
C       8               ASC$JSTL   ASCBJSTL
C    9,10               ASC$SRBT   ASCBSRBT    SRB TIME (& DELTA)
C               21      ASC$FLAG   ASCBRCTF
C                                  ASCBFLG1    STATUS
C               22      ALLOC                  ALLOC FRAME
C               23      OUC$NPG    OUCBNPG     PERF GRP
C               24      OUC$WMR    OUCBWMR     WLM RV
C      13               OUC$CMRV   OUCBCMRV    COMPOSITE RV
C      14               OUC$WMS    OUCBWMS     SERV SUM (& DELTA)
C               29      OUC$WSS    OUCBWSS     SWP-IN SIZE
C               30      OUC$PSO    OUCBPSO     SWP-OUT SIZE
C               31      OUC$SWC    OUCBSWC     # OF SWAPS
C               32      OUC$FLG2   OUCBQFL     SWAP FLAGS
C                                  OUCBSFL     (CONT)
C               33      OUC$FLAG   OUCBYFL     TYPE
C                                  OUCBEFL     EVENT
C               34      ASC$IOSM   ASCBIOSM    # I/O REQS (& DELTA)
C               35      ASC$VSC    ASCBVSC     VIO SLOTS
C               36      ASC$NVSC   ASCBNVSC    N-VIO SLOTS
C               37      OUC$FLG3               ALGORITHM
C                                              TRANSACTION
C               38      OUC$NQH    OUCBNQC     # ENQHOLDS
C                       OUC$DMN    OUCBDMN     DOMAIN NO.
C      20               OUC$PS1    OUCBPS1     PGSEC / RSP
C      20               OUC$TME    OUCBTME     PGSEC / RSP
C               41      OUC$SRC    OUCBSRV     SWAP REASON
C               42      LOCAL                  LOCAL FRAME
C               43      LSQA                   LSQA FRAMES
C               44      FIXED                  FIXED FRAME
C               45      VIO                    VIO FRAMES
C               46      UIC                    HIGHEST UIC
C                                              % TIME/SEC
C
C   THE FOLLOWING FLAGS FROM 'OUCBEFL' APPEAR AFTER 'EVENT'
C
C     01 = M    MSO DETECTED WAIT
C     02 = P    QUIESCE COMPLETED
C     04 = Q    QUIESCE STARTED
C     08 = E    ENQHOLD
C     10 = C    COMPOSITE INPUT MESSAGE
C     20 = T    OUTPUT TERMINAL WAIT
C     40 = O    TERMINAL WAIT
C     80 = L    LONG WAIT
C
C   THE FOLLOWING FLAGS FROM 'OUCBQFL' APPEAR AFTER 'SWAP FLAGS'
C
C     80 = O    GOING OUT OF CORE
C     40 = I    COMING INTO CORE
C     20 = B    TRANSITIONING BETWEEN STATES
C     08 = W    REQUESTING ENTER WAIT STATE
C     04 = R    REQUESTING ENTER OUT STATE
C     02 = T    *** NOT DOCUMENTED IN IRAOUCB MACRO ***
C
C   THE FOLLOWING FLAGS FROM 'OUCBSFL' APPEAR AFTER '(CONT)'
C
C     80 = N    NON-SWAPPABLE STATUS
C     40 = C    CTL INHIBITS QUIESCE
C     20 = W    BRING IN FOR CANCEL
C     08 = A    PREVENT SWAP IN
C     04 = P    PRIVILEGED PROGRAM RUNNING
C     02 = E    ENQ RESIDENT STATUS
C     01 = T    SWAP CHAIN TERMINATION MARK
C
C   THE FOLLOWING FLAGS FROM 'OUCBAFL' APPEAR AFTER 'ALGORITHM'
C
C     80 = W    *** NOT DOCUMENTED IN IRAOUCB MACRO ***
C     40 = A    APG ALGORITHM APPLICABLE
C     20 = R    RMA ALGORITHM APPLICABLE
C     10 = C    SIGNIFICANT CPU USER FLAG
C     08 = S    JOBSELECT RECEIVED
C     04 = I    *** RESERVED ***
C     02 = Q    MSO DETECTED NONSWAPPABLE WAIT
C     01 = D    AUTHORIZED FOR DONTSWAP
C
C   THE FOLLOWING FLAGS FROM 'OUCBTFL' APPEAR AFTER 'TRANSACTION'
C
C     80 = X    TRANSACTION IN EXISTENCE
C     40 = B    TRANSACTION START PENDING
C     20 = E    TRANSACTION STOP PENDING
C     10 = R    TRANSACTION RESUME PENDING
C     08 = P    PERF GROUP PERIOD CHANGE PENDING
C     04 = A    ACTIVITY RECORDING SUBTRACT FLAG
C     02 = I    INITIATOR ATTACH PENDING
C     01 = C    INITIATOR ATTACH CURRENT
C
C   ***********************************
C
C   DUMP OF SNAPSHOTS
C
C   ***********************************
      IFLAG=-1
      CALL MONRD(NAME,LENGTH,IDATA,IFLAG)
      IF(IFLAG.GT.0) GOTO 999
      IFLAG=0
C
C   INITIALIZE COUNTERS AND STORAGE AREAS
C
      DELTA=.TRUE.
      FIRST=.TRUE.
C   COUNTERS FOR TOTALS FOR SNAPSHOTS
      TOTSTP=0
      TOTSRB=0
      TOTWAT=0
      TOTSRV=0
      TOTIN=0
      TOTOUT=0
      TOTNSR=0
      TOTINT=0
      TOTTSO=0
      NCALLS=0
C   COUNTERS FOR AVERAGES
      AVRIN=0.
      AVROUT=0.
      AVRNSR=0.
      AVRINT=0.
      AVRTSO=0.
      AVRSTP=0.
      AVRSRB=0.
      AVRWAT=0.
      AVRSRV=0.
C   STORAGE AREAS FOR SNAPSHOTS
      ICT=0
      DO 5 I=1,18
      VIOS(I)=0
      NVIO(I)=0
      STATUS(I)=BLNK
    5 CONTINUE
  100 CONTINUE
      CALL MONRD(NAME,LENGTH,IDATA,IFLAG)
      IF(IFLAG.GT.0) GOTO 20
      IF(NASID.LE.0) GOTO 100
      IF(.NOT.FIRST) GOTO 10
      TTIME=TIME
C
C   OBTAIN BINARY REPRESENTATION OF TIME OF CALL
C
      CALL DECVB(TTIME,LSTIM)
      IFSTIM=LSTIM
      FIRST=.FALSE.
   10 CONTINUE
C
C   CHECK FOR END OF CURRENT SNAPSHOT
C
      IF(TTIME.NE.TIME) GOTO 20
  105 CONTINUE
      ICT=ICT+1
      IF(ICT.GT.18) GOTO 20
      ASID=ICT
C
C   SET DATA INTO STORAGE AREAS
C
      IASID(ASID)=NASID
      IF(JOBNAM(NASID).EQ.R81) GOTO 13
C
C   ASID HAS NEW JOBNAME - RESET COUNTERS
C
      VIOS(ASID)=0
      NVIO(ASID)=0
      NOWTS(NASID)=0
      STPTIM(NASID)=0
      SRBTIM(NASID)=0
      SRVSUM(NASID)=0
      DWAIT(ASID)=0
      JOBNAM(NASID)=R81
   13 CONTINUE
      IF(JOBNAM(NASID).EQ.INIT) TOTINT=TOTINT+1
C
C   FIND IF ADDRESS SPACE IS IN,OUT,NS/R
C
      STATUS(ASID) = IN
      DO 15 I = 1, 3
      ITEMP = IDAT(32)
      LTEMP = LTEMP .AND. LFLG(I)
      IF (ITEMP .NE. 0) STATUS(ASID) = STS(I)
   15 CONTINUE
C
C   INCREMENT COUNTERS
C
      IF(STATUS(ASID).EQ.IN) TOTIN=TOTIN+1
      IF(STATUS(ASID).EQ.STS(1)) TOTOUT=TOTOUT+1
      IF(STATUS(ASID).EQ.STS(3)) TOTNSR=TOTNSR+1
C
C   SET UP # WAITS,D-WAIT,# VIO SLOTS,# NON-VIO SLOTS
C
      DWAIT(ASID)=IDAT(34)-NOWTS(NASID)
      IF(DELTA) DWAIT(ASID)=0
      IF(DWAIT(ASID).LT.0) DWAIT(ASID)=0
      NOWTS(NASID)=IDAT(34)
      VIOS(ASID)=IDAT(35)
      NVIO(ASID)=IDAT(36)
      TOTWAT=TOTWAT+DWAIT(ASID)
      PGRP(ASID)=IDAT(23)
      DISPRT(ASID)=IDAT(14)
      NODSPQ(ASID)=IDAT(13)
      WLM(ASID)=IDAT(24)/256
      SWPIN(ASID)=IDAT(29)
      SWPOUT(ASID)=IDAT(30)
C
C   GET STEP TIME INTO MILLISECS
C
      IT2(1)=IDAT(10)
      IT2(2)=IDAT(11)
      IT4=(IT4/1000)*16
      DSTEP(ASID)=IT4-STPTIM(NASID)
      IF(DELTA) DSTEP(ASID)=0
      IF(DSTEP(ASID).LT.0) DSTEP(ASID)=0
      STPTIM(NASID)=IT4
      STP(ASID)=IT4/100
      TOTSTP=TOTSTP+DSTEP(ASID)
C
C   GET SRB TIME INTO MILLISECS
C
      IT2(1)=IDAT(18)
      IT2(2)=IDAT(19)
      IT4=(IT4/1000)*16
      DSRB(ASID)=IT4-SRBTIM(NASID)
      IF(DELTA) DSRB(ASID)=0
      IF(DSRB(ASID).LT.0) DSRB(ASID)=0
      SRBTIM(NASID)=IT4
      SRB(ASID)=IT4/100
      TOTSRB=TOTSRB+DSRB(ASID)
C
C   MOVE ALLOC,LSQA,LOCAL,FIXED,VIO FRAME COUNTS
C
      ALLOC(ASID)=IDAT(22)
      LOCAL(ASID)=IDAT(42)
      LSQA(ASID)=IDAT(43)
      FIXED(ASID)=IDAT(44)
      VIOF(ASID)=IDAT(45)
      UIC(ASID)=IDAT(46)
      SWCT(ASID)=IDAT(31)
      DSRVSM(ASID)=IDATA(14)-SRVSUM(NASID)
      IF(DELTA) DSRVSM(ASID)=0
      IF(DSRVSM(ASID).LT.0) DSRVSM(ASID)=0
      SRVSUM(NASID)=IDATA(14)
      SERVSM(ASID) = IDATA(14) / 100
      TOTSRV=TOTSRV+DSRVSM(ASID)
      RRV(ASID)=IDATA(13)/256
C
C   SET UP TYPE OF JOB
C
      TYPE(ASID)=B
      ITEMP=IDAT(33)
      LTEMP=LTEMP.AND.MASK
      IT4=ITEMP/4096
      IF(IT4.EQ.1) TYPE(ASID)=M
      IF(IT4.EQ.2) TYPE(ASID)=L
      IF(IT4.EQ.2) TOTTSO=TOTTSO+1
      IF(IT4.EQ.4) TYPE(ASID)=S
C
C   SET UP TYPE OF EVENT
C
      NT4=BLNK
      JCT=4
      IT2(1)=IDAT(33)
      DO 17 I=1,8
      IT2(2)=0
      IT4=IT4/2
      IF(IT2(2).EQ.0) GOTO 17
      NT1(JCT)=EVNT(I)
      JCT=JCT-1
      IF(JCT.EQ.0) GOTO 18
   17 CONTINUE
   18 CONTINUE
      EVENT(ASID)=NT4
C
C   MOVE # ENQHOLDS, DOMAIN NUMBER
C
      NT4=0
      NT2(2)=IDAT(38)
      NT4=NT4*256
      ENQH(ASID)=NT2(1)
      NT2(1)=0
      NT4=NT4*256
      DOMAIN(ASID)=NT2(1)
C
C   SET UP TYPE OF SWAP
C
      I = IDAT(41)
      SWAPCD(ASID) = SWAPRE(I)
C
      NT4=BLNK
      JCT=4
      IT2(2)=IDAT(32)
      DO 210 I=1,16
      IF(I.NE.9) GOTO 211
      SWAP(ASID,1)=NT4
      JCT=4
      NT4=BLNK
  211 CONTINUE
      IF(JCT.EQ.0) GOTO 210
      IT2(1)=0
      IT4=IT4*2
      IF(I.EQ.4.OR.I.EQ.8.OR.I.EQ.12) GOTO 210
      IF(IT2(1).EQ.0) GOTO 210
      NT1(JCT)=IBIT(I,1)
      JCT=JCT-1
  210 CONTINUE
      SWAP(ASID,2)=NT4
C
C   SET UP TYPE OF TRANSACTION/ALGORITHM
C
      NT4=BLNK
      JCT=4
      IT2(2)=IDAT(37)
      DO 220 I=1,16
      IF(I.NE.9) GOTO 221
      ALGOR(ASID,1)=NT4
      JCT=4
      NT4=BLNK
  221 CONTINUE
      IF(JCT.EQ.0) GOTO 220
      IT2(1)=0
      IT4=IT4*2
      IF(IT2(1).EQ.0) GOTO 220
      NT1(JCT)=IBIT(I,3)
      JCT=JCT-1
  220 CONTINUE
      ALGOR(ASID,2)=NT4
C
C   COPY DUAL PURPOSE FIELD
C    FOR TSO USERS, IT IS LAST RESPONSE TIME
C     OTHERWISE, IT IS PAGE SECONDS FOR CURRENT TRANSACTION
C
      RTIMPS(ASID) = IDATA(20)
      GOTO 100
C   ***********************************
   20 CONTINUE
C
C   WRITE OUT SNAPSHOTS OF FIRST 18 ASIDS
C
C   ***********************************
      IF(FIRST) GOTO 999
      IF(ICT.GT.18) ICT=18
      IF(ICT.LE.0) GOTO 999
      IF(TTIME.NE.TIME) DELTA=.FALSE.
      DO 25 I=2,19
      FMT(I)=APP
      IF(STATUS(I-1).NE.STS(2)) GOTO 25
      FMT(I)=NAPP
      PGRP(I-1)=MIN
      SWPIN(I-1)=MIN
      SWPOUT(I-1)=MIN
      WLM(I-1)=MIN
      RRV(I-1)=MIN4
   25 CONTINUE
      WRITE(6,6000) LTTIME,DATE
 6000 FORMAT('1SNAPSHOT AT ',3(Z2,'.'),Z2,' ON ',A8)
 6001 FORMAT('+',12X,18I6)
 6002 FORMAT('+',12X,18(2X,A4))
 6003 FORMAT('+',12X,18(5X,A1))
      WRITE(6,6010)
 6010 FORMAT(' ASID')
      WRITE(6,6001) (IASID(I),I=1,ICT)
      WRITE(6,6011)
 6011 FORMAT(' JOBNAMES')
      WRITE(6,6002) (J1(1,IASID(I)),I=1,ICT)
      WRITE(6,6012)
 6012 FORMAT(1X)
      WRITE(6,6002) (J1(2,IASID(I)),I=1,ICT)
      WRITE(6,6013)
 6013 FORMAT(' TYPE')
      WRITE(6,6003) (TYPE(I),I=1,ICT)
      WRITE(6,6014)
 6014 FORMAT(' PERF GRP')
      WRITE(6,FMT) (PGRP(I),I=1,ICT)
      WRITE(6,6015)
 6015 FORMAT(' SWP-IN SIZE')
      WRITE(6,FMT) (SWPIN(I),I=1,ICT)
      WRITE(6,6016)
 6016 FORMAT(' SWP-OT SIZE')
      WRITE(6,FMT) (SWPOUT(I),I=1,ICT)
      WRITE(6,6017)
 6017 FORMAT(' DISP PRTY')
      WRITE(6,6001) (DISPRT(I),I=1,ICT)
      WRITE(6,6018)
 6018 FORMAT(' # IN DISP Q')
      WRITE(6,6001) (NODSPQ(I),I=1,ICT)
      WRITE(6,6019)
 6019 FORMAT(' STEP TIME')
      WRITE(6,6001) (STP(I),I=1,ICT)
      WRITE(6,6020)
 6020 FORMAT(' D-STEP TIME')
      WRITE(6,6001) (DSTEP(I),I=1,ICT)
      WRITE(6,6021)
 6021 FORMAT(' SRB TIME')
      WRITE(6,6001) (SRB(I),I=1,ICT)
      WRITE(6,6022)
 6022 FORMAT(' D-SRB TIME')
      WRITE(6,6001) (DSRB(I),I=1,ICT)
      WRITE(6,6023)
 6023 FORMAT(' # I/O REQS')
      WRITE(6,6001) (NOWTS(IASID(I)),I=1,ICT)
      WRITE(6,6024)
 6024 FORMAT(' D-I/O REQS')
      WRITE(6,6001) (DWAIT(I),I=1,ICT)
      WRITE(6,6025)
 6025 FORMAT(' ALLOC FRAME')
      WRITE(6,6001) (ALLOC(I),I=1,ICT)
      WRITE(6,6026)
 6026 FORMAT(' LSQA FRAMES')
      WRITE(6,6001) (LSQA(I),I=1,ICT)
      WRITE(6,6027)
 6027 FORMAT(' LOCAL FRAME')
      WRITE(6,6001) (LOCAL(I),I=1,ICT)
      WRITE(6,6028)
 6028 FORMAT(' FIXED FRAME')
      WRITE(6,6001) (FIXED(I),I=1,ICT)
      WRITE(6,6029)
 6029 FORMAT(' VIO FRAMES')
      WRITE(6,6001) (VIOF(I),I=1,ICT)
      WRITE(6,6030)
 6030 FORMAT(' VIO SLOTS')
      WRITE(6,6001) (VIOS(I),I=1,ICT)
      WRITE(6,6031)
 6031 FORMAT(' N-VIO SLOTS')
      WRITE(6,6001) (NVIO(I),I=1,ICT)
      WRITE(6,6032)
 6032 FORMAT(' # OF SWAPS')
      WRITE(6,6001) (SWCT(I),I=1,ICT)
      WRITE(6,6033)
 6033 FORMAT(' SERV SUM')
      WRITE(6,6001) (SERVSM(I),I=1,ICT)
      WRITE(6,6034)
 6034 FORMAT(' D-SERV SUM')
      WRITE(6,6001) (DSRVSM(I),I=1,ICT)
      WRITE(6,6035)
 6035 FORMAT(' WLM RV')
      WRITE(6,FMT) (WLM(I),I=1,ICT)
      WRITE(6,6036)
 6036 FORMAT(' RESOURCE RV')
      WRITE(6,FMT) (RRV(I),I=1,ICT)
      WRITE(6,6037)
 6037 FORMAT(' EVENT')
      WRITE(6,6002) (EVENT(I),I=1,ICT)
      WRITE(6,6100)
 6100 FORMAT(' SWAP FLAGS')
      WRITE(6,6002) (SWAP(I,1),I=1,ICT)
      WRITE(6,6101)
 6101 FORMAT(' (CONT)')
      WRITE(6,6002) (SWAP(I,2),I=1,ICT)
      WRITE(6,6102)
 6102 FORMAT(' ALGORITHM')
      WRITE(6,6002) (ALGOR(I,1),I=1,ICT)
      WRITE(6,6103)
 6103 FORMAT(' TRANSACTION')
      WRITE(6,6002) (ALGOR(I,2),I=1,ICT)
      WRITE(6,6104)
 6104 FORMAT(' # ENQHOLDS')
      WRITE(6,6001) (ENQH(I),I=1,ICT)
      WRITE(6,6105)
 6105 FORMAT(' DOMAIN NO. ')
      WRITE(6,6001) (DOMAIN(I),I=1,ICT)
      WRITE(6,6106)
 6106 FORMAT(' SWAP REASON')
      WRITE(6,6002) (SWAPCD(I),I=1,ICT)
      WRITE(6,6107)
 6107 FORMAT(' PGSEC / RSP')
      WRITE(6,6001) (RTIMPS(I),I=1,ICT)
C     WRITE(6,6108)
C6108 FORMAT(' PAGE PROF')
C     WRITE(6,6001) (PAGPF(I),I=1,ICT)
      WRITE(6,6110)
 6110 FORMAT(' HIGH UIC')
      WRITE(6,6001) (UIC(I),I=1,ICT)
      WRITE(6,6038)
 6038 FORMAT(' STATUS')
      WRITE(6,6002) (STATUS(I),I=1,ICT)
      CALL DECVB(TTIME,NOWTIM)
      RINT=FLOAT(NOWTIM-LSTIM)
      IF(RINT.LT.0.) RINT=RINT+8640000.
      DO 200 I=1,ICT
      PCCPU(I)=0.
      IF(RINT.LE.0.) GOTO 200
      PCCPU(I)=(DSTEP(I)+DSRB(I))/RINT*10.
  200 CONTINUE
      WRITE(6,6070)
 6070 FORMAT(' % TIME/SEC')
      WRITE(6,6071) (PCCPU(I),I=1,ICT)
 6071 FORMAT('+',12X,18F6.1)
      IF(TTIME.EQ.TIME.AND.IFLAG.LE.0) GOTO 110
C
C   WRITE OUT TOTALS FOR SNAPSHOT
C
      NCALLS=NCALLS+1
      CALL DECVB(TTIME,NOWTIM)
      RINT=FLOAT(NOWTIM-LSTIM)/100.
      IF(RINT.LT.0.) RINT=RINT+86400.
      LSTIM=NOWTIM
      WRITE(6,6039) LTTIME,RINT
 6039 FORMAT('1TOTALS AT ',3(Z2,'.'),Z2,5X,'(INTERVAL= ',F6.2,' SECS)')
      WRITE(6,6041)
 6041 FORMAT(' # IN')
      WRITE(6,6040) TOTIN
      WRITE(6,6042)
 6042 FORMAT('+',30X,'# OUT')
      WRITE(6,6060) TOTOUT
 6060 FORMAT('+',48X,I6)
      WRITE(6,6043)
 6043 FORMAT(' # NS/R')
      WRITE(6,6040) TOTNSR
      WRITE(6,6061)
 6061 FORMAT('+',30X,'# TSO')
      WRITE(6,6060) TOTTSO
      WRITE(6,6063)
 6063 FORMAT(' # INITS')
      WRITE(6,6040) TOTINT
      WRITE(6,6020)
 6040 FORMAT('+',18X,I6)
      WRITE(6,6040) TOTSTP
      WRITE(6,6022)
      WRITE(6,6040) TOTSRB
      WRITE(6,6024)
      WRITE(6,6040) TOTWAT
      WRITE(6,6034)
      WRITE(6,6040) TOTSRV
      AVRIN=AVRIN+TOTIN
      AVROUT=AVROUT+TOTOUT
      AVRNSR=AVRNSR+TOTNSR
      AVRTSO=AVRTSO+TOTTSO
      AVRINT=AVRINT+TOTINT
      IF(RINT.EQ.0.) GOTO 115
      RSTP=FLOAT(TOTSTP)/(RINT*1000.)
      RSRB=FLOAT(TOTSRB)/(RINT*1000.)
      RWAIT=FLOAT(TOTWAT)/RINT
      RSRV=FLOAT(TOTSRV)/RINT
C
C   INCREMENT AVERAGE COUNTERS
C
      AVRSTP=AVRSTP+TOTSTP/1000.
      AVRSRB=AVRSRB+TOTSRB/1000.
      AVRWAT=AVRWAT+TOTWAT
      AVRSRV=AVRSRV+TOTSRV
      WRITE(6,6044)
 6044 FORMAT(' STEP TIME/SEC')
      WRITE(6,6045) RSTP
 6045 FORMAT('+',18X,F6.4)
      WRITE(6,6046)
 6046 FORMAT(' SRB TIME/SEC')
      WRITE(6,6045) RSRB
      WRITE(6,6047)
 6047 FORMAT(' # I/O /SEC')
      WRITE(6,6048) RWAIT
 6048 FORMAT('+',18X,F6.1)
      WRITE(6,6049)
 6049 FORMAT(' SERV SUM/SEC')
      WRITE(6,6048) RSRV
C
C   RESET COUNTERS
C
  115 CONTINUE
      TOTSTP=0
      TOTSRB=0
      TOTWAT=0
      TOTSRV=0
      TOTIN=0
      TOTOUT=0
      TOTNSR=0
      TOTINT=0
      TOTTSO=0
  110 CONTINUE
      IF(IFLAG.GT.0) GOTO 999
      ICT=0
      TTIME=TIME
      GOTO 105
  999 CONTINUE
      IF(FIRST) GOTO 99
C
C   WRITE OUT AVERAGES
C
      AVRIN=AVRIN/NCALLS
      AVROUT=AVROUT/NCALLS
      AVRNSR=AVRNSR/NCALLS
      AVRINT=AVRINT/NCALLS
      AVRTSO=AVRTSO/NCALLS
      RINT=FLOAT(LSTIM-IFSTIM)/100.
      IF(RINT.LT.0.) RINT=RINT+86400.
      AVRSTP=AVRSTP/RINT
      AVRSRB=AVRSRB/RINT
      AVRWAT=AVRWAT/RINT
      AVRSRV=AVRSRV/RINT
      WRITE(6,6050)
 6050 FORMAT('1SNAPSHOT AVERAGES',/,1X)
 6062 FORMAT('+',48X,F6.1)
      WRITE(6,6041)
      WRITE(6,6048) AVRIN
      WRITE(6,6042)
      WRITE(6,6062) AVROUT
      WRITE(6,6043)
      WRITE(6,6048) AVRNSR
      WRITE(6,6061)
      WRITE(6,6062) AVRTSO
      WRITE(6,6063)
      WRITE(6,6048) AVRINT
      WRITE(6,6044)
      WRITE(6,6045) AVRSTP
      WRITE(6,6046)
      WRITE(6,6045) AVRSRB
      WRITE(6,6047)
      WRITE(6,6048) AVRWAT
      WRITE(6,6049)
      WRITE(6,6048) AVRSRV
      WRITE(8,8000) DATE
 8000 FORMAT('0SNAPSHOT AVERAGES ON ',A8,/,1X)
      WRITE(8,6041)
      WRITE(8,6048) AVRIN
      WRITE(8,6042)
      WRITE(8,6062) AVROUT
      WRITE(8,6043)
      WRITE(8,6048) AVRNSR
      WRITE(8,6061)
      WRITE(8,6062) AVRTSO
      WRITE(8,6063)
      WRITE(8,6048) AVRINT
      WRITE(8,6044)
      WRITE(8,6045) AVRSTP
      WRITE(8,6046)
      WRITE(8,6045) AVRSRB
      WRITE(8,6047)
      WRITE(8,6048) AVRWAT
      WRITE(8,6049)
      WRITE(8,6048) AVRSRV
   99 CONTINUE
      RETURN
      END
