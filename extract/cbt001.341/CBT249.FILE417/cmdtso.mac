         TITLE 'CMDTSO -   TSO DRIVER MODULE'
***********************************************************************
***********************************************************************
***                                                                 ***
***                                                                 ***
***                                                                 ***
***                     COMMAND  SUB-SYSTEM                         ***
***                  -------------------------                      ***
***                                                                 ***
***                                                                 ***
***       CMDTSO -         TSO DRIVER MODULE                        ***
***                                                                 ***
***       VERSION -        1.1                                      ***
***                                                                 ***
***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***
***                                                                 ***
***       UPDATED -        12/01/79                                 ***
***                                                                 ***
***                                                                 ***
***  THIS MODULE SEARCHES THE CODE IT IS LOADING (#Q, #N, ETC.) TO  ***
***     SEE IF SUBPOOL 241 IS BEING REQUESTED FOR THE GETMAIN.  THIS***
***     MODULE DOES THIS BY SEARCHING FOR X'F100' IN THE CODE.      ***
***     IF THE EXECUTION IS TAKING PLACE VIA THE SYSTEM CONSOLE,    ***
***     THEN SUBPOOL 241 IS ALLOWED.  IF THE EXECUTION IS TAKING    ***
***     PLACE WITHIN TSO, THEN THE X'F100' IS CHANGED TO X'0000'    ***
***     (FOR SUBPOOL 0) PRIOR TO THE ACTUAL EXECUTION OF THE CODE.  ***
***     IF THE PROPER CODING CONVENTIONS ARE NOT FOLLOWED IN THE    ***
***     SUB-MODULES (#Q, #N, ETC.), THIS CHECK MAY NOT BE SUCCESS-  ***
***     FUL, AND AN ABEND B0A WILL TAKE PLACE.
***                                                                 ***
***********************************************************************
***********************************************************************
         EJECT
CMDTSO   CSECT
         SAVE  (14,12)
         LR    R3,R15
         USING CMDTSO,R3
         ST    R13,SAVE+4
         LA    R13,SAVE
         L     R1,0(0,R1)          PARM ADDR
         LH    R15,0(0,R1)         PARM LENGTH
         BCTR  R15,0               SUBTRACT MIN LENGTH
         LTR   R15,R15             ANY SUBPARMS
         BM    EXIT                NO PARMS AT ALL
         LA    R10,COMTAB          # COMMAND TABLE
         LA    R11,MODLIST         # COMMAND MODULE LIST
         CLI   2(R1),C'#'          ## COMMAND
         BNE   PLOOP0              NO
         LA    R1,1(0,R1)          ADJUST INPUT PARM
         BCTR  R15,0               ADJUST LENGTH
         LA    R10,COMTAB2         ## COMMAND TABLE
         LA    R11,MODLIST2        ## COMMAND MODULE LIST
         MVI   TCMDTYP,C'#'        INDICATE ##
         SPACE 1
PLOOP0   MVC   COMMAND(1),2(R1)    SAVE COMMAND
         LA    R1,3(0,R1)          1ST BYTE OF SUBPARM
         LTR   R15,R15             ANY SUBPARMS
         BZ    PROCESS             NO
         BCTR  R15,0
         CH    R15,=H'79'          MAX PARM LENGTH
         BNH   *+8                 NO
         LH    R15,=H'79'          SET MAX
         CLI   0(R1),C' '          1 BLANK ALLOWED
         BNE   *+10
         LA    R1,1(0,R1)
         BCTR  R15,0
         EX    R15,PARMMOVE        MOVE PARM
         LA    R15,PARM-1
         SPACE 1
PLOOP    LA    R15,1(0,R15)
         CLI   0(R15),C' '         END OF PARM
         BE    PLOOP1              YES
         CLI   0(R15),C'@'         COMMA REPLACE
         BNE   PLOOP               NO, NEXT DIGIT
         MVI   0(R15),C','         FORCE COMMA
         B     PLOOP
         SPACE 1
PARMMOVE MVC   PARM(0),0(R1)
         SPACE 1
PLOOP1   LA    R15,PARM
         EJECT
PROCESS  ST    R15,EXITLIST+20     SAVE TEXT ADDR
         MVC   WAITTIME(8),=8C'0'
         XC    CSCSYSID(4),CSCSYSID
         XC    HEXTIME(4),HEXTIME
         LA    R1,PARM
         LA    R8,PARM+74
         SPACE 1
PROCESS1 CLC   0(2,R8),=C'T='      TIME PARM
         BE    PROCESS2            YES
         CLC   0(2,R8),=C'S='      SYSID PARM
         BE    PROCESS4            YES
         BCTR  R8,0                PREVIOUS CHARACTER
         CR    R1,R8               BACK TO BEGINNING
         BNE   PROCESS1            NO, CHECK NEXT
         B     PROCESS5            YES, NO T= FOUND
         SPACE 1
PROCESS2 LA    R1,PACK+3           TARGET FIELD
         MVC   PACK(4),=C'0000'
         CLI   4(R8),C' '          SENDING BYTE BLANK
         BE    *+12                YES, DONT MOVE
         MVC   0(1,R1),4(R8)       MOVE IT
         BCTR  R1,0                NEXT TARGET BYTE
         CLI   3(R8),C' '          SENDING BYTE BLANK
         BE    *+12                YES, DONT MOVE
         MVC   0(1,R1),3(R8)       MOVE IT
         BCTR  R1,0                NEXT TARGET BYTE
         CLI   2(R8),C' '          SENDING BYTE BLANK
         BE    *+10                YES, DONT MOVE
         MVC   0(1,R1),2(R8)       MOVE IT
         MVC   DOUBLE(4),=C'0000'
         MVZ   DOUBLE(4),PACK
         CLC   DOUBLE(4),=C'0000'  IS IT NUMERIC
         BE    PROCESS3            YES
         MVC   PACK(4),=C'0000'
         SPACE 1
PROCESS3 PACK  DOUBLE(8),PACK(4)
         CVB   R15,DOUBLE          SECONDS TO BINARY
         SR    R14,R14
         ST    R15,HEXTIME         SAVE BINARY SECONDS
         D     R14,=F'60'          CALCULATE MINUTES AND SECONDS
         CVD   R15,DOUBLE          MINUTES
         UNPK  WAITTIME+2(2),DOUBLE+6(2)
         OI    WAITTIME+3,X'F0'
         CVD   R14,DOUBLE          SECONDS
         UNPK  WAITTIME+4(2),DOUBLE+6(2)
         OI    WAITTIME+5,X'F0'
         MVC   0(4,R8),=CL4' '
         BCTR  R8,0
         CLI   0(R8),C','
         BNE   *+8
         MVI   0(R8),C' '
         B     PROCESS5
         SPACE 1
PROCESS4 MVC   CSCSYSID(4),2(R8)
         BCTR  R8,0
         MVC   0(8,R8),=CL8' '
         MVC   CSCCMD(1),COMMAND
         MVC   CSCCMD+1(79),PARM
         EJECT
PROCESS5 LA    R1,WAITTIME
         ST    R1,EXITLIST+24      PASS WAITTIME TO COMMANDS
         MVC   TCOMMAND(1),COMMAND
         TR    COMMAND,0(R10)      TRANSLATE COMMAND TO INDEX
         SR    R4,R4
         IC    R4,COMMAND          INSERT INDEX
         SLL   R4,3                OFFSET INTO MODULE LIST
         L     R15,16              CVT ADDR
         L     R15,0(0,R15)        TCB WORDS
         L     R14,12(0,R15)       CURRENT ASCB
         MVC   ASID(2),36(R14)     SAVE ASID
         L     R14,4(0,R15)        CURRENT TCB
         L     R14,12(0,R14)       TIOT
         MVC   USERID(7),0(R14)    USERID (JOBNAME)
         UNPK  TASID(5),ASID(3)
         NC    TASID(4),=8X'0F'
         TR    TASID(4),=C'0123456789ABCDEF'
         MVI   TASID+4,C' '
         L     R15,16              CVT ADDR
         L     R15,196(0,R15)      SMCA
         MVC   SYSTEM(4),16(R15)   SYSTEM ID
         TIME  DEC
         ST    R1,DOUBLE
         UNPK  YEAR(3),DOUBLE+1(2)
         MVI   YEAR+2,C'.'
         UNPK  DAY(3),DOUBLE+2(2)
         OI    DAY+2,X'F0'
         ST    R0,DOUBLE
         UNPK  HOUR(3),DOUBLE(2)
         MVI   HOUR+2,C'.'
         UNPK  MINUTE(3),DOUBLE+1(2)
         MVI   MINUTE+2,C' '
         CLI   CSCSYSID,X'00'      CROSS-SYSTEM REQUEST
         BNE   CSCPROC             YES
         L     R0,ASID
         LA    R1,HEADER
         ICM   R0,3,=H'68'
         SVC   93
         LTR   R4,R4               COMMAND IN LIST
         BNZ   LOAD                YES, GO PROCESS
         L     R0,ASID             LOAD ASID
         LA    R1,=CL20'COMMAND NOT FOUND'
         ICM   R0,3,=H'20'         INSERT MESSAGE LENGTH
         SVC   93                  TPUT SVC
         B     EXIT
         EJECT
CSCPROC  LA    R1,10               RESET TIMER COUNT
         SPACE 1
CSCPROC0 ST    R1,RESETCNT         RESET TIMER COUNT
         BAL   R10,CSCREAD         READ CSC DATA
         L     R1,16               CVT
         L     R1,0(0,R1)          TCB WORDS
         L     R1,4(0,R1)          CURRENT TCB
         L     R1,12(0,R1)         TIOT
         CLC   0(8,R11),=8X'00'    CSC BUSY
         BE    CSCPROC4            NO
         CLI   4(R11),X'FF'        TSO ID CROSS-SYSTEM COMMAND
         BNE   CSCPROC1            NO
         CLC   5(3,R11),4(R1)      TSO ID MATCH
         BE    CSCPROC2            YES
         SPACE 1
CSCPROC1 STIMER WAIT,DINTVL=CSCWAIT
         L     R1,RESETCNT         RESET COUNT
         BCT   R1,CSCPROC0         TRY AGAIN
         MVC   TIMESID(4),4(R11)
         LA    R1,TIMEMSG          TIMEOUT MSG
         L     R0,ASID             LOAD ASID
         ICM   R0,3,=H'48'         INSERT MESSAGE LENGTH
         SVC   93                  TPUT SVC
         BAL   R10,CSCCLEAR        FORCE CLEAR
         B     EXIT
         SPACE 3
CSCPROC2 LH    R9,10(0,R11)        WTO COUNT
         LA    R11,148(0,R11)      1ST WTO ADDR
         SPACE 1
CSCPROC3 LA    R1,4(0,R11)         MSG ADDR
         LH    R0,0(0,R11)         MSG LENGTH
         SH    R0,=H'4'
         ICM   R0,12,ASID          ASID
         SVC   93
         LH    R1,0(0,R11)         WTO LENGTH
         LA    R11,0(R1,R11)       NEXT MSG
         BCT   R9,CSCPROC3
         BAL   R10,CSCCLEAR        RESET DATASET TO ALLOW REUSE
         B     EXIT
         EJECT
CSCPROC4 MVI   0(R11),X'FF'        TSO SENDER
         MVC   1(3,R11),4(R1)      TSO ID
         XC    8(2,R11),8(R11)
         MVC   12(4,R11),=F'148'   COMMAND RECORD LENGTH
         MVC   16(78,R11),CSCCMD   MOVE COMMAND TO RECORD
         XC    96(52,R11),96(R11)
         MVC   4(4,R11),CSCSYSID
         BAL   R10,CSCWRITE        REWRITE RECORD
         MVC   RECVMSG+20(1),16(R11)
         LA    R1,RECVMSG          TIMEOUT MSG
         L     R0,ASID             LOAD ASID
         ICM   R0,3,=H'44'         INSERT MESSAGE LENGTH
         SVC   93                  TPUT SVC
         B     CSCPROC1
         EJECT
CSCREAD  MVC   CSCDATA+62(2),=H'19069' FULL BLOCKSIZE
         OPEN  (CSCDATA)
         GET   CSCDATA,RECORD
         LA    R11,RECORD
         CLC   0(12,R11),=XL12'00' ZERO REQUEST
         BE    CSCREAD1            NO
         CLC   0(96,R11),PREVREC   SAME REQUEST
         BE    CSCREAD2            NO
         SPACE 1
CSCREAD1 MVC   PREVREC(96),0(R11)  SAVE NEW REQUEST
         MVC   RESETCNT(4),=F'10'  SET NEW COUNT
         SPACE 1
CSCREAD2 CLOSE (CSCDATA)
         BR    R10
         EJECT
CSCCLEAR XC    RECORD(16),RECORD
         SPACE 1
CSCWRITE L     R1,RECORD+12        RECORD LENGTH
         LTR   R1,R1               ZERO LENGTH
         BNZ   CSCWRIT1            NO
         LA    R1,16               MINIMUM LENGTH
         SPACE 1
CSCWRIT1 STH   R1,CSCDATA+62       SAVE LENGTH FOR WRITE
         LR    R2,R1
         OPEN  (CSCDATA,(OUTPUT))
         PUT   CSCDATA,RECORD
         CLOSE (CSCDATA)
         BR    R10
         EJECT
LOAD     LA    R4,0(R11,R4)        MODULE NAME ADDR
         LOAD  EPLOC=(R4)          LOAD COMMAND MODULE
         ST    R0,ENTRY            SAVE ENTRY ADDR
         LR    R5,R0               MODULE ADDR
         LA    R6,0(0,R1)          MODULE DOUBLEWORDS
         SLL   R6,3                MODULE LENGTH
         ST    R6,LENGTH           SAVE MODULE LENGTH
         SH    R6,=H'6'            ADJUST SCAN LENGTH
         SPACE  1
LOAD1    CLC   0(6,R5),=X'430020280A23'   WTO INSTRUCTIONS
         BE    LOAD3               YES
         SPACE 1
LOAD2    LA    R5,2(0,R5)          NEXT INSTRUCTION
         BCTR  R6,0
         BCT   R6,LOAD1            PROCESS NEXT
         B     LOAD4
         SPACE 1
LOAD3    MVC   0(6,R5),=X'58F0200005EF'
         B     LOAD2
         SPACE 1
LOAD4    L     R5,ENTRY            MODULE ADDR
         L     R6,LENGTH           MODULE LENGTH
         SH    R6,=H'4'            ADJUST SCAN LENGTH
         SPACE  1
LOAD5    CLC   0(2,R5),=X'F100'    SUBPOOL 241
         BE    LOAD7               YES
         SPACE 1
LOAD6    LA    R5,4(0,R5)          NEXT INSTRUCTION
         BCTR  R6,0
         BCTR  R6,0
         BCTR  R6,0
         BCT   R6,LOAD5            PROCESS NEXT
         B     EXECUTE             END OF MODULE
         SPACE 1
LOAD7    MVC   0(2,R5),=H'0'       SET SUBPOOL ZERO
         EJECT
EXECUTE  LA    R2,EXITLIST         PARM LIST
         L     R15,ENTRY           COMMAND ENTRY
         BALR  R14,R15             BRANCH
         DELETE EPLOC=(R4)         DELETE MODULE
         SPACE 3
         BALR  R15,0
         USING *,R15
         L     R3,=A(CMDTSO)       LOAD ORIGINAL BASE
         DROP  R15
         SPACE 3
EXIT     L     R13,SAVE+4
         RETURN (14,12),RC=0
         SPACE 3
         USING TPUT,R15
TPUT     LH    R0,0(0,R1)          ORIG MSG LENGTH
         SH    R0,=H'4'            NEW MSG LENGTH
         LA    R1,4(0,R1)          MSG TEXT ADDR
         O     R0,ASID             ADD IN MSG LENGTH
         ST    R14,8(0,R2)         SAVE RETURN ADDR
         SVC   93                  TPUT SVC
         L     R14,8(0,R2)         LOAD RETURN ADDR
         BR    R14                 RETURN
         DROP  R15
         EJECT
         LTORG
         SPACE 3
SAVE     DS    18F
         DS    0D
DOUBLE   DS    2F
WAITTIME DS    2F
HEXTIME  DS    F
PACK     DS    F
ENTRY    DS    F
LENGTH   DS    F
COMMAND  DC    F'0'
PARM     DC    CL80' '
CSCSYSID DC    F'0'
CSCCMD   DC    CL80' '
         SPACE 3
HEADER   DS    0CL68
         DC    C'---  <TSO>  CMD SBSYS (#'
TCMDTYP  DC    C' '
TCOMMAND DC    C' ',C')  '
SYSTEM   DC    CL4' ',C'  '
YEAR     DC    CL2' ',C' '
DAY      DC    CL3' ',C'  '
HOUR     DC    CL2' ',C' '
MINUTE   DC    CL2' ',C'  '
USERID   DC    CL7' ',C'  '
TASID    DC    CL4' ',C'  ---'
         SPACE 3
EXITLIST DC    A(TPUT)
ASID     DC    F'0'
         DC    10F'0'
         EJECT
         DS    0D
COMTAB   DC    193X'00'
*                 A B C D E F G H I
         DC    X'04000A030005000C09',XL7'00'
*                 J K L M N O P Q R
         DC    X'0B000200010F0D0E06',XL8'00'
*                 S T U V W X Y Z
         DC    X'0700000800030010',XL23'00'
         SPACE 3
MODLIST  DC    CL8' '
         DC    CL8'CSCSA03D'  1
         DC    CL8'CSCSC03D'  2
         DC    CL8'CSCSD03D'  3
         DC    CL8'CSCSE03D'  4
         DC    CL8'CSCSF03D'  5
         DC    CL8'CSCSG03D'  6
         DC    CL8'CSCSH03D'  7
         DC    CL8'CSCSI03D'  8
         DC    CL8'CSCSJ03D'  9
         DC    CL8'CSCSK03D'  A
         DC    CL8'CSCSL03D'  B
         DC    CL8'CSCSM03D'  C
         DC    CL8'CSCSP03D'  D
         DC    CL8'CSCSQ03D'  E
         DC    CL8'CSCSR03D'  F
         DC    CL8'CSCSZ03D' 10
         DC    CL8'        '
         DC    CL8'        '
         DC    CL8'        '
         EJECT
         DS    0D
COMTAB2  DC    193X'00'
*                 A B C D E F G H I
         DC    X'010203000000000000',XL7'00'
*                 J K L M N O P Q R
         DC    X'040000000000050000',XL8'00'
*                 S T U V W X Y Z
         DC    X'0600000000000000',XL23'00'
         SPACE 3
MODLIST2 DC    CL8'        '
         DC    CL8'CSCZA03D'  1
         DC    CL8'CSCZB03D'  2
         DC    CL8'CSCZC03D'  3
         DC    CL8'CSCZJ03D'  4
         DC    CL8'CSCZP03D'  5
         DC    CL8'CSCZS03D'  6
         DC    CL8'        '
         EJECT
         DS    0D
CSCWAIT  DC    CL8'00000200'
RESETCNT DC    F'10'
PREVREC  DC    CL96' '
         EJECT
RECVMSG  DS    0CL44
         DC    CL44'CMD SUBSYS -   CSC #X COMMAND ACCEPTED'
         SPACE 3
TIMEMSG  DS    0CL48
         DC    CL43'CMD SUBSYS -   CSC TIMEOUT, CMD PENDING ON '
TIMESID  DC    CL4' ',C' '
         EJECT
CSCDATA  DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X
               MACRF=(GM,PM)
         SPACE 5
RECORD   DS    CL19069
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
