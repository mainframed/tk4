***********************************************************************
*
* INFORMATION FOR USE OF BIO - BIORYTHM PLOTTER.
*
*
*
* PARM.    THREE OPTIONAL PARMS MAY BE INCLUDED IN THE PARM FIELD ON
*          THE EXEC STATEMENT.  THESE ARE AMPLITUDE=N, ORIGIN=N, OVPRT.
*          AMPLITUDE IS THE AMPLITUDE OF THE SINE FUNCTIONS USED IN THE
*          PLOTS.  IF NOT OVERRIDDEN BY THE PARM, IT DEFAULTS TO
*          (LRECL-19)/2.  EG. 51 FOR A SYSPRINT LRECL OF 121.
*          ORIGIN IS THE PRINT POSITION OF THE GRAPH'S MEDIAN LINE.  IF
*          NOT OVERRIDDEN BY THE PARM, IT DEFAULTS TO AMPLITUDE+18.
*          (E.G. 69 FOR AMPLITUDE OF 51)
*          OVPRT SPECIFIES THAT IN THE CASE OF INTERSECTING LINES, ALL
*          CHARACTERS WHICH LIE IN A PRINT POSITION WILL BE PRINTED
*          BY OVERPRINTING.  IF OVPRT IS OMITTED, A ZERO IS PRINTED IN
*          SUCH CASES.
*
*
*
* INPUT.   DDNAME=SYSIN, LRECL=80.
*          THIS FILE CONSISTS OF 80 BYTE CARDS, ONE CARD PER PLOT,
*          WHICH CONTAIN BIRTHDAY, PLOT START DATE, NUMBER OF DAYS IN
*          PLOT, AND NAME.
*          THE FORMAT IS AS FOLLOWS.
*
* 0        1         2         3         4         5         6
* 12345678901234567890123456789012345678901234567890123456789012345678
* BIRTHDAY   START DATE NUM   NAME (OPTIONAL)
*
* MM/DD/YYYY,MM/DD/YYYY,NNNNN,XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
*
*
*
* OUTPUT.  DDNAME=SYSPRINT, LRECL=121, BLKSIZE=3993, RECFM=FBM
*          THE OUTPUT DATASET (IN SYSOUT FORMAT) CONTAINS ALL PLOTS.
*          LRECL AND BLKSIZE MAY BE OVERRIDDEN FOR WIDER OR NARROWER
*          PLOTS BY INCLUDING THEM ON THE SYSPRINT DD STATEMENT.  LRECL
*          MUST BE BETWEEN 101 AND 257 INCLUSIVE (121 IS THE DEFAULT).
*
*
*
* ERROR MESSAGES.
*
*       SYSPRINT DCB ERRORS.
*       MESSAGES ARE DISPLAYED IN MESSAGE CLASS SYSOUT VIA WTO.  X'04'
*       IS OR'ED INTO RETURN CODE AND PROCESSING CONTINUES.
*
* ***** JOBNAME  PROCSTEP STEPNAME BIO           ***
*   *** IMPROPER SYSPRINT DCB.     ERRXXXX       ***
*          XXXX=0000  LRECL LESS THAN 101.
*                     LRECL IS SET TO 121.
*               0010  LRECL IS GREATER THAN 257.
*                     LRECL IS SET TO 121.
*               0020  BLKSIZE IS NOT A LRECL MULTIPLE.
*                     BLKSIZE IS SET TO GREATEST LRECL MULTIPLE NOT
*                     GREATER THAN 4096.
*
*
*       PARM FIELD ERRORS.
*       MESSAGES ARE DISPLAYED IN MESSAGE CLASS SYSOUT VIA WTO.  X'04'
*       IS OR'ED INTO RETURN CODE AND PROCESSING CONTINUES.
*
* ***** JOBNAME  PROCSTEP STEPNAME BIO           ***
*   *** UNINTELLIGABLE PARM FIELD. ERRXXXX       ***
*          XXXX=0100  INVALID KEYWORD IN PARM FIELD.
*                     ALL SUBSEQUENT PARM INFORMATION IS IGNORED.
*                     AMPLITUDE AND ORIGIN DEFAULTS ARE GENERATED.
*               0110  MISSING VALUE FOLLOWING AMPLITUDE= OR ORIGIN=.
*                     ALL SUBSEQUENT PARM INFORMATION IS IGNORED.
*                     AMPLITUDE AND ORIGIN DEFAULTS ARE GENERATED.
*               0120  NON-NUMERIC VALUE FOLLOWING AMPLITUDE= OR ORIGIN=
*                     ALL SUBSEQUENT PARM INFORMATION IS IGNORED.
*                     AMPLITUDE AND ORIGIN DEFAULTS ARE GENERATED.
*               0130  AMPLITUDE+ORIGIN+1 IS GREATER THAN SYSPRINT LRECL
*                     AMPLITUDE AND ORIGIN DEFAULTS ARE GENERATED.
*               0140  ORIGIN-AMPLITUDE IS LESS THAN 18.
*                     AMPLITUDE AND ORIGIN DEFAULTS ARE GENERATED.
*
*
*          SYSIN CONTROL CARD SYNTAX ERRORS.
*          THE CARD IMAGE IS LISTED IN THE SYSPRINT DATASET, WITH
*          ***** ERRXXXX ***.  X'08' IS OR'ED INTO THE RETURN CODE AND
*          PROCESSING CONTINUES WITH THE NEXT SYSIN RECORD.
*
*          XXXX=0200  SLASHES IN DATE(S) AND/OR COMMAS MISSING AND/OR
*                     MISPLACED
*               0210  FIELD(S) CONTAIN NON NUMERIC DATA.
*               0220  INVALID DATE FOR BIRTHDAY.
*               0230  INVALID DATE FOR START DATE.
*               0240  BIRTHDAY IS PAST START DATE.
*
***********************************************************************
         EJECT
BIO      CSECT
         SAVE  (14,12),,*          SAVE REGISTERS
         BALR  R3,R0               INITIALIZE BASE REGISTER R3
         USING *,R3,R4             USE R3, R4 AS CSECT BASE REGISTERS
         USING D2RECORD,R11        USE R11 AS D2RECORD DSECT BASE
         USING D1RECORD,R12        USE R12 AS D1RECORD DSECT BASE
BASE0100 B     BASE0300            GO AROUND BASE 2 ADCON
BASE0200 DC    A(BASE0100+4096)    ADDRESS FOR BASE 2
BASE0300 L     R4,BASE0200         LOAD R4 BASE REGISTER
         LA    R12,SAVE            LOAD R12 WITH ADDR OF NEW SAVE AREA
         ST    R13,SAVE+4          STORE ADDR OF OLD SAVE IN NEW SAVE
         ST    R12,8(R13)          STORE ADDR OF NEW SAVE IN OLD SAVE
         LR    R13,R12             LOAD R13 WITH ADDR OF NEW SAVE
PROCESS  BAL   R14,PRINIT          LINK TO INITIALIZATION ROUTINE
PR1000   BAL   R14,START           LINK TO START NEXT GRAPH ROUTINE
         CLI   EOD1SW,X'01'        CHECK FOR AT EOD IN DCB1
         BE    PR3000              IF AT EOD, GO TO PR3000
PR2000   BAL   R14,PRDAY           LINK TO PROCESS DAY ROUTINE
         CLI   EOD2SW,X'01'        CHECK FOR PRINTING COMPLETE
         BNE   PR2000              IF NOT, GO BACK TO PR2000
         B     PR1000              IF COMPLETE, GO BACK TO PR1000
PR3000   BAL   R14,PREOJ           LINK TO END OF JOB ROUTINE
         LH    R15,RC              LOAD R15 WITH RETURN CODE
         L     R13,SAVE+4          LOAD R13 WITH ADDR OF PREV SAVE AREA
         RETURN (14,12),RC=(15)    RETURN TO CALLING PROGRAM
PRINIT   BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         BAL   R14,OPEN1           LINK TO DCB1 OPEN ROUTINE
         BAL   R14,OPEN2           LINK TO DCB2 OPEN ROUTINE
         BAL   R14,CHKPARM         LINK TO PARM CHECK ROUTINE
         BAL   R14,PUT2            LINK TO DCB1 PUT ROUTINE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
START    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
STRT0100 BAL   R14,GET1            LINK TO DCB1 GET ROUTINE
         CLI   EOD1SW,X'01'        CHECK FOR END OF DATA
         BE    R14RTRN             IF AT EOD, GO TO R14 RETURN ROUTINE
         BAL   R14,CHKCTLCD        LINK TO CONTROL CARD CHECK ROUTINE
         CLI   ERRSW,X'01'         CHECK FOR ERRORS ON CONTROL CARD
         BE    STRT0100            IF ERRORS, GO BACK TO STRT0100
STRT0200 MVI   D2CC,X'89'          SET D2CC TO SKIP TO CHAN1 AFTER
         BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         MVI   D2CC,X'89'          SET D2CC TO SKIP TO CHAN1 AFTER
         LA    R5,HEADING1         SET R5 TO BXLE START
         LA    R6,100              SET R6 TO BXLE INCREMENT
         LA    R7,HD1END           SET R7 TO BXLE LIMIT
         BAL   R14,STRT0900        LINK TO HEADING PRINT ROUTINE
         MVI   D2CC,X'11'          SET CARR CTL TO SPACE 2 LINES AFTER
         LA    R5,HEADING2         SET R5 TO BXLE START ADDRESS
         LA    R6,50               SET R6 TO BXLE INCREMENT
         LA    R7,HD2END           SET R7 TO BXLE LIMIT ADDRESS
         BAL   R14,STRT0900        LINK TO HEADING PRINT ROUTINE
         MVI   D2CC,X'11'          SET CARR CTL TO SPACE 2 LINES AFTER
STRT0300 BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         MVI   WKBUFFER,X'40'      RESET WKBUFFER BYTE 0 TO SPACE
         MVC   WKBUFFER+1(255),WKBUFFER    RESET BYTES 1-255 TO SPACE
         MVC   WKBUFFER+5(22),HEADING3 MOVE HEADING3(22) TO WKBUFFER
         MVC   WKBUFFER+58(42),HEADING3+22 MOVE HEADING+22 TO WKBUFFER
         CLI   D1RECORD+27,C','    CHECK FOR COMMA PRECEDING NAME
         BE    STRT0310            IF PRESENT, GO TO STRT0310
         MVC   WKBUFFER+24(3),WKBUFFER+23  MOVE SPACE OVER 'FOR'
         B     STRT0320            GO TO STRT0320
STRT0310 MVC   WKBUFFER+28(29),D1RECORD+28 MOVE NAME TO WKBUFFER
STRT0320 MVC   WKBUFFER+68(10),D1RECORD+11 MOVE START DATE TO WKBUFFER
         MVC   WKBUFFER+89(5),D1RECORD+22  MOVE NUMBER TO WKBUFFER
         LA    R5,WKBUFFER+89      SET BXLE START TO NUMBER BYTE 0
         LA    R6,1                SET BXLE INCREMENT TO 1
         LA    R7,WKBUFFER+92      SET BXLE LIMIT TO NUMBER BYTE 3
STRT0330 CLI   0(R5),C'0'          CHECK FOR LEADING 0 IN NUMBER
         BNE   STRT0340            WHEN 1ST NON ZERO, GO TO STRT0340
         BXLE  R5,R6,STRT0330      CONTINUE CHECKING AT STRT0330
STRT0340 MVC   WKBUFFER+89(11),0(R5)   MOVE SIGNIF OVER LEADING ZEROS
         LA    R5,WKBUFFER+56      POINT R5 AT END OF NAME
STRT0350 CLI   0(R5),X'40'         CHECK FOR TRAILING SPACE IN NAME
         BNE   STRT0360            IF NOT SPACE, GO TO STRT0360
         BCT   R5,STRT0350         CONTINUE CHECKING AT STRT0350
STRT0360 MVC   2(76,R5),WKBUFFER+58    MOVE TEXT OVER TRAILING BLANKS
         MVC   D2PRINT(100),WKBUFFER   MOVE HEADING TO D2PRINT
         BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         MVI   D2CC,X'11'          SET CARR CTL TO SPACE 2 AFTER
         MVC   D2PRINT(41),HEADING3+64 MOVE HEADING+64 TO D2PRINT
         MVC   D2PRINT+30(10),D1RECORD MOVE BIRTHDAY TO D2PRINT
STRT0400 BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         LH    R14,ORIG            LOAD R14 WITH ORIGIN POINT
         BCTR  R14,R0              DECREMENT ORIGIN VALUE
         LH    R15,AMPL            LOAD R15 WITH AMPLITUDE
         LR    R1,R14              LOAD R1 WITH ORIGIN POINT
         SR    R1,R15              SUBTRACT TO GET (-1) POINT
         LA    R1,D2PRINT(R1)      POINT R1 IN D2PRINT
         MVC   0(4,R1),HEADING4    MOVE '(-1)' TO D2PRINT
         LA    R1,D2PRINT-1(R14)   POINT R1 IN D2PRINT
         MVC   0(3,R1),HEADING4+4  MOVE '(0)' TO D2PRINT
         AR    R14,R15             ADD AMPLITUDE TO ORIGIN
         LA    R1,D2PRINT(R14)     POINT R1 AT D2PRINT+ORIG+AMPL
         SH    R1,CH000003         POINT R1 AT D2PRINT+ORIG+AMPL-3
         MVC   0(4,R1),HEADING4+7  MOVE '(+1)' TO D2PRINT
         B     STRT1000            GO TO STRT1000
STRT0900 BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LR    R8,R6               SET R8 TO LENGTH FOR MVC EXECUTE
         BCTR  R8,R0               DECREMENT R8 FOR EX LENGTH
STRT0910 BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         EX    R8,STRT0920         EXECUTE MVC INSTRUCTION
         BXLE  R5,R6,STRT0910      CONTINUE PRINTING HEADING
         B     R14RTRN             GO TO R14 RETURN ROUTINE
STRT0920 MVC   D2PRINT(1),0(R5)    MOVE HEADING LINE TO D2PRINT
STRT1000 MVC   JL1,BIRTHDAY        MOVE BIRTHDAY TO JL1
         MVC   JL2,CURRDAY         MOVE CURRDAY TO JL2
         BAL   R14,JLDIFF          LINK TO DAYS DIFFERENCE ROUTINE
         ZAP   WKAREA1,JL2         MOVE DIFFERENCE TO WKAREA1
         CVB   R5,WKAREA1          CONVERT DIFFERENCE TO BINARY
         LA    R10,MSTRTBL+4       POINT R10 AT 1ST TBL ADDR IN MSTRTBL
STRT1100 BAL   R14,STRT1200        LINK TO INIT TABLE START POSITION
         LA    R10,4(R10)          POINT R10 AT NEXT ADDR IN MSTRTBL
         C     R10,MSTRTBL         CHECK FOR R10 PAST END OF MSTRTBL
         BNH   STRT1100            IF NOT PAST, GO BACK TO STRT1100
         B     STRT2000            IF PAST, GO TO STRT2000
STRT1200 SR    R6,R6               RESET R6 FOR DIVIDE
         LR    R7,R5               LOAD R7 WITH NUMBER OF DAYS DIFF
         L     R8,0(R10)           LOAD R8 WITH ADDRESS OF SINE TABLE
         L     R9,0(R8)            LOAD R9 WITH NUMBER OF DAYS IN CYCLE
         DR    R6,R9               DIVIDE TO GET START POSITION
         LR    R7,R6               SET R7=REMAINDER
         SLL   R7,2                SET R7=REMAINDER*4
         LA    R6,N                SET R6=N (LINES PER DAY)
         MR    R6,R6               SET R7=(REMAINDER*4)*N
         LA    R6,8(R7,R8)         SET R6=8+(REMAINDER*4*N)+TBLADDR
         ST    R6,4(R8)            SAVE STARTING POINT IN TABLE
         BR    R14                 RETURN TO INVOKING AREA
STRT2000 SP    CURRDAY,CP1         SUBTRACT 1 TO INITIALIZE CURRDAY
         LA    R1,CURRDAY          POINT R1 AT CURRDAY
         BAL   R14,WEEKDAY         LINK TO DAY OF WEEK ROUTINE
         LR    R1,R0               LOAD DAY OF WEEK (0-6) INTO R1
         MH    R1,CH000003         MULTIPLY BY 3 FOR TABLE OFFSET
         STCM  R1,3,DAYTBL         STORE OFFSET IN DAY TABLE
         MVI   NEWSW,X'01'         SET NEW PLOT SWITCH
         MVI   EOD2SW,X'00'        RESET EOD2SW
         B     R14RTRN             GO TO R14 RETURN ROUTINE
PRDAY    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         MVI   NCNT+1,X'01'        INITIALIZE NCNT TO 1
PRD0100  BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         CLI   NCNT+1,X'01'        CHECK FOR FIRST TIME THROUGH
         BNE   PRD0200             IF NOT FIRST, GO TO PRD0200
         BAL   R14,BLDDATE         IF 1ST, LINK TO DATE BUILD ROUTINE
PRD0200  BAL   R14,BLDLINE         LINK TO LINE BUILD ROUTINE
         BAL   R14,WRTLINE         LINK TO LINE WRITE ROUTINE
         CLI   NCNT+1,N            CHECK FOR DAY COMPLETE
         BNL   R14RTRN             IF COMPLETE, GO TO R14 RTRN ROUTINE
         LH    R1,NCNT             LOAD R1 WITH NCNT
         LA    R1,1(R1)            ADD 1 TO NCNT
         STH   R1,NCNT             STORE UPDATED COUNT IN NCNT
         B     PRD0100             GO BACK TO PRD0100
BLDDATE  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         SR    R1,R1               RESET R1 FOR SUBSEQUENT ICM'S
BLDD1000 AP    CURRDAY,CP1         ADD 1 TO THE CURRENT DATE
         ZAP   JL1,CURRDAY         MOVE CURRDAY TO JL1 FOR CONVERSION
         BAL   R14,JLCAL           LINK TO JULIAN TO CALENDAR CNVT RTNE
         CLC   CAL,ZERO            CHECK FOR CAL=0, INDICATING ERROR
         BNE   BLDD2000            IF NO ERROR, GO TO BLDD2000
         AP    CURRDAY,CP1000      ADD 1 TO YEAR
         ZAP   CURRDAY+2(2),CP0    SET DAY TO ZERO
         B     BLDD1000            GO BACK TO BLDD1000
BLDD2000 ICM   R1,3,DAYTBL         LOAD R1 WITH DAY TABLE OFFSET
         LA    R1,3(R1)            ADD 3 TO OFFSET
         CH    R1,CH000018         CHECK OFFSET FOR PAST END OF TABLE
         BNH   BLDD2100            IF NOT PAST, GO TO BLDD2100
         SR    R1,R1               SET OFFSET BACK TO 0
BLDD2100 STCM  R1,3,DAYTBL         SAVE OFFSET IN BEGINNING OF TABLE
         LA    R1,DAYTBL+2(R1)     POINT R1 AT DAY IN TABLE
         MVC   D2PRINT(3),0(R1)    MOVE DAY OF WEEK TO D2PRINT
         MVC   D2PRINT+4(2),CALDA  MOVE DAY OF MONTH TO D2PRINT
         CLI   NEWSW,X'01'         CHECK FOR FIRST TIME THRU ROUTINE
         BE    BLDD3000            IF FIRST, G0 TO BLDD3000
         CLC   CALDA,C01           CHECK FOR FIRST OF MONTH
         BNE   BLDD4000            IF NOT FIRST, GO TO BLDD4000
BLDD3000 MVI   NEWSW,X'00'         RESET FIRST TIME SWITCH
         PACK  WKAREA1,CALMO       PACK MONTH INTO WKAREA1
         CVB   R1,WKAREA1          CONVERT MONTH TO BINARY
         MH    R1,CH000003         MULTIPLY BY 3 TO GET TABLE OFFSET
         LA    R1,MONTHTBL(R1)     POINT R1 AT MONTH IN TABLE
         MVC   D2PRINT+7(3),0(R1)  MOVE MONTH TO D2PRINT
         MVC   D2PRINT+11(4),CALYR MOVE YEAR TO D2PRINT
BLDD4000 SP    D,CP1               SUBTRACT 1 FROM DAYS TO PROCESS
         BNZ   R14RTRN             IF NOT ZERO, GO TO R14 RETURN RTNE
         MVI   EOD2SW,X'01'        SET END OF DATA SWITCH
         B     R14RTRN             GO TO R14 RETURN ROUTINE
BLDLINE  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         XC    WKBUFFER,WKBUFFER   RESET ALL BYTES IN WKBUFFER
         LA    R10,MSTRTBL+4       LOAD R10 WITH 1ST ADDRESS IN MSTRTBL
         LA    R9,128              LOAD R9 WITH X'80'
BLDL1000 BAL   R14,BLDL2000        LINK TO POINT PLOT ROUTINE
         LA    R10,4(R10)          POINT R10 AT NEXT ADDRESS IN MSTRTBL
         C     R10,MSTRTBL         CHECK FOR PAST END OF MSTRTBL
         BH    BLDL3000            IF PAST, GO TO BLDL3000
         SRL   R9,1                MOVE BIT IN R9 RIGHT 1 POSITION
         B     BLDL1000            GO BACK TO BLDL1000
BLDL2000 L     R8,0(R10)           LOAD R8 WITH PTR TO SINE TABLE
         L     R5,4(R8)            LOAD R5 WITH PTR IN SINE TABLE
         LA    R5,4(R5)            POINT R5 AT NEXT SINE IN TABLE
         C     R5,8(R8)            CHECK FOR PAST END OF SINE TABLE
         BNH   BLDL2100            IF NOT PAST, GO TO BLDL2100
         LA    R5,12(R8)           POINT R5 AT 1ST SINE IN TABLE
BLDL2100 ST    R5,4(R8)            STORE CURR POSITION BACK IN TABLE
         L     R6,0(R5)            LOAD R6 WITH SIN*100000 FROM TABLE
         MH    R6,AMPL             MULTIPLY BY AMPLITUDE
         SRDA  R6,32               SHIFT NUMBER TO R7 FOR DIVIDE
         BM    BLDL2200            IF NEGATIVE VALUE, GO TO BLDL2200
         A     R7,CF500000         ADD .5*1000000 FOR ROUNDING
         B     BLDL2300            GO TO BLDL2300
BLDL2200 S     R7,CF500000         SUBTRACT .5*1000000 FOR ROUNDING
BLDL2300 D     R6,CF1M             DIVIDE TO GET DISP FROM ORIGIN
         AH    R7,ORIG             ADD ORIGIN TO DISPLACEMENT
         LA    R7,WKBUFFER-1(R7)   POINT R7 IN WKBUFFER
         EX    R9,BLDL2400         OR A BIT ON IN WKBUFFER
         BR    R14                 RETURN TO INVOKING AREA
BLDL2400 OI    0(R7),X'00'         MOVE BIT FROM R9 TO WKBUFFER
BLDL3000 LH    R1,ORIG             LOAD R1 WITH ORIGIN VALUE
         LA    R1,WKBUFFER-1(R1)   POINT R1 AT ORIGIN IN WKBUFFER
         OI    0(R1),X'01'         SET BIT TO PRINT ORIGIN MARKER
         B     R14RTRN             GO TO R14 RETURN ROUTINE
WRTLINE  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LH    R1,DCB2+82          LOAD R1 WITH DCB2 LRECL
         SH    R1,CH000019         SUBTRACT 19 FOR EX LENGTH
         CLI   OVPRTSW,X'01'       CHECK FOR OVER PRINTING REQUESTED
         BE    WRT2000             IF REQUESTED, GO TO WRT2000
WRT1000  EX    R1,WRT1080          EXECUTE MVC TO D2PRINT
         EX    R1,WRT1090          EXECUTE TR ON D2PRINT
         B     WRT9000             GO TO WRT9000
WRT1080  MVC   D2PRINT+17(1),WKBUFFER+17   MOVE GRAPH TO D2PRINT
WRT1090  TR    D2PRINT+17(1),TRTAB4    TRANSLATE TO PRINT CHARACTERS
WRT2000  EX    R1,WRT2060          EXECUTE MVC TO D2PRINT
         EX    R1,WRT2070          EXECUTE TR ON D2PRINT
         EX    R1,WRT2080          EXECUTE TR ON D2PRINT
         EX    R1,WRT2090          EXECUTE TR ON WKBUFFER
         CLI   WKBUFFER+17,X'00'   CHECK FOR X'00' IN BUFFER BYTE 17
         BNE   WRT2100             IF NOT X'00', GO TO WRT2100
         CLC   WKBUFFER+18(238),WKBUFFER+17    CHK BYTES 18-255 FOR'00'
         BNE   WRT2100             IF NOT X'00', GO TO WRT2100
         B     WRT9000             IF ALL '00', GO TO WRT9000
WRT2060  MVC   D2PRINT+17(1),WKBUFFER+17   MOVE GRAPH TO D2PRINT
WRT2070  TR    D2PRINT+17(1),TRTAB1    RESET TRAILING BITS IN BYTES
WRT2080  TR    D2PRINT+17(1),TRTAB2    TRANSFORM TO CHARACTERS
WRT2090  TR    WKBUFFER+17(1),TRTAB3   RESET LEADING BITS IN BYTES
WRT2100  MVI   D2CC,X'01'          SET CC TO SUPRESS SPACING
         BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         LH    R1,DCB2+82          LOAD R1 WITH DCB2 LRECL
         SH    R1,CH000019         SUBTRACT 19 FOR EX LENGTH
         B     WRT2000             GO BACK TO WRT2000
WRT9000  B     R14RTRN             GO TO R14 RETURN ROUTINE
PREOJ    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         BAL   R14,CLOSE1          LINK TO DCB1 CLOSE ROUTINE
         BAL   R14,CLOSE2          LINK TO DCB2 CLOSE ROUTINE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
CHKPARM  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         L     R1,SAVE+4           LOAD R1 WITH ADDR OF PREV SAVE AREA
         L     R1,24(R1)           LOAD R1 WITH PASSED R1
         L     R5,0(R1)            LOAD R5 WITH PARM FIELD POINTER
CKPM1000 LH    R1,DCB2+82          LOAD R1 WITH DCB2 LRECL
         SH    R1,CH000019         SUBTRACT TO GET USABLE BYTES
         SRL   R1,1                DIVIDE BY 2 TO GET AMPL DEFAULT
         STH   R1,AMPL             SET AMPLITUDE DEFAULT VALUE
         STH   R1,AMPLDFLT         SET AMPLITUDE DEFAULT VALUE
         AH    R1,CH000018         ADD 18 TO GET ORIG DEFAULT
         STH   R1,ORIG             SET ORIGIN DEFAULT VALUE
         STH   R1,ORIGDFLT         SET ORIGIN DEFAULT VALUE
CKPM2000 LH    R6,0(R5)            LOAD R6 WITH PARM LENGTH
         LTR   R6,R6               CHECK FOR PASSED PARM FIELD
         BNP   CKPM8000            IF NO PARM, GO TO CKPM8000
         LA    R7,2(R5)            POINT R7 AT PARM TEXT
         LA    R8,1(R5,R6)         POINT R8 AT PARM TEXT LAST BYTE
CKPM3000 CLC   0(7,R7),ORIGIN      CHECK FOR 'ORIGIN=' IN TEXT
         BE    CKPM3100            IF FOUND, GO TO CKPM3100
         CLC   0(10,R7),AMPLITUD   CHECK FOR 'AMPLITUDE=' IN TEXT
         BE    CKPM3200            IF FOUND, GO TO CKPM3200
         CLC   0(5,R7),OVPRT       CHECK FOR OVPRT KEY WORD
         BE    CKPM3300            IF FOUND, GO TO CKPM3300
         B     CKPM7100            INVALID KEYWORD, GO TO CKPM7100
CKPM3100 LA    R7,7(R7)            POINT R7 PAST ' ORIGIN='
         BAL   R14,CKPM6000        LINK TO CONVERT ROUTINE
         STH   R1,ORIG             STORE ORIGIN VALUE IN ORIG
         B     CKPM3900            GO TO CKPM3900
CKPM3200 LA    R7,10(R7)           POINT R7 PAST 'AMPLITUDE='
         BAL   R14,CKPM6000        LINK TO CONVERT ROUTINE
         STH   R1,AMPL             STORE AMPLITUDE VALUE IN AMPL
         B     CKPM3900            GO TO CKPM3900
CKPM3300 MVI   OVPRTSW,X'01'       SET OVER PRINT SWITCH
         LA    R2,5(R7)            POINT R2 PAST KEY WORD
CKPM3900 LA    R7,1(R2)            POINT R7 PAST COMMA
         CR    R2,R8               CHECK FOR PAST END OF TEXT
         BNH   CKPM3000            IF NOT PAST, GO BACK TO CKPM3000
CKPM4000 LH    R14,ORIG            LOAD R14 WITH ORIGIN
         LH    R15,AMPL            LOAD R15 WITH AMPLITUDE
         LA    R14,1(R14,R15)      SET R14=ORIG+AMPL+1
         CH    R14,DCB2+82         CHECK FOR SUM GREATER THAN LRECL
         BH    CKPM7130            IF GREATER, GO TO CKPM7130
         SLL   R15,1               MULTIPLY AMPLITUDE BY 2
         SR    R14,R15             SUBTRACT TO GET ORIGIN-AMPLITUDE+1
         CH    R14,CH000019        CHECK FOR LESS THAN 19
         BL    CKPM7140            IF LESS, GO TO CKPM7140
         B     CKPM9000            GO TO CKPM9000
CKPM6000 CR    R7,R8               CHECK FOR NO VALUE AFTER KEY WORD
         BH    CKPM7110            IF NONE, ERROR, GO TO CKPM7110
         LA    R1,8(R7)            SET R1 TO BXLE LIMIT
         CR    R1,R8               CHECK FOR R1 PAST TEXT END
         BNH   CKPM6100            IF NOT PAST, GO TO CKPM6100
         LR    R1,R8               SET R1 TO TEXT END
CKPM6100 LA    R0,1                SET R0 TO BXLE INCREMENT OF 1
         LR    R2,R7               SET R2 TO BXLE START ADDRESS
CKPM6110 CLI   0(R2),C','          CHECK FOR R2 POINTING AT COMMA
         BE    CKPM6200            WHEN FOUND GO TO CKPM6200
         BXLE  R2,R0,CKPM6110      KEEP LOOKING AT CKPM6110
CKPM6200 CR    R2,R7               CHECK FOR MISSING VALUE
         BE    CKPM7110            IF MISSING, ERROR, GO TO CKPM7110
         LR    R9,R2               SET R8 TO END OF VALUE POINTER
         SR    R9,R7               SUBTRACT TO GET VALUE LENGTH
         BCTR  R9,R0               DECREMENT LENGTH FOR EX
         EX    R9,CKPM6280         EXECUTE NUMERIC TEST
         BC    7,CKPM7120          NOT NUMERIC, ERROR, GO TO CKPM7120
         EX    R9,CKPM6290         EXECUTE PACK INTO WKAREA1
         CVB   R1,WKAREA1          CONVERT VALUE TO BINARY IN R1
         B     CKPM6900            GO TO CKPM6900
CKPM6280 TRT   0(1,R7),ILBOWTBO    CHECK FOR FIELD NUMERIC
CKPM6290 PACK  WKAREA1,0(1,R7)     PACK FIELD INTO WKAREA1
CKPM6900 BR    R14                 RETURN TO INVOKING AREA
CKPM7100 LA    R1,100              SET ERROR INDICATOR TO 100
         B     CKPM7900            GO TO CKPM7900
CKPM7110 LA    R1,110              SET ERROR INDICATOR TO 110
         B     CKPM7900            GO TO CKPM7900
CKPM7120 LA    R1,120              SET ERROR INDICATOR TO 120
         B     CKPM7900            GO TO CKPM7900
CKPM7130 LA    R1,130              SET ERROR INDICATOR TO 130
         B     CKPM7900            GO TO CKPM7900
CKPM7140 LA    R1,140              SET ERROR INDICATOR TO 140
CKPM7900 BAL   R14,ERR0100         LINK TO ERR0100
CKPM8000 MVC   AMPL,AMPLDFLT       SET AMPLITUDE TO DEFAULT VALUE
         MVC   ORIG,ORIGDFLT       SET ORIGIN TO DEFAULT VALUE
CKPM9000 B     R14RTRN             GO TO R14 RETURN ROUTINE
CHKCTLCD BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         MVI   ERRSW,X'00'         RESET ERROR SWITCH
         MVC   WKBUFFER(27),NCLIT1 MOVE NCLIT1 TO WKBUFFER
         NC    WKBUFFER(27),D1RECORD   AND OFF ALL BYTES BUT DELIMITERS
         CLC   WKBUFFER(27),DLMLIT CHECK FOR ALL DELIMITERS PRESENT
         BNE   CKCT7200            IF NOT, GO TO CKCT7200
         MVI   WKBUFFER,X'FF'      MOVE X'FF' TO WKBUFFER BYTE 0
         MVC   WKBUFFER+1(26),WKBUFFER     MOVE X'FF' TO BYTES 1-26
         XC    WKBUFFER(27),NCLIT1 MOVE NCLIT1 COMPLEMENT TO WKBUFFER
         NC    WKBUFFER(27),D1RECORD  AND OFF ALL DELIMITERS
         OC    WKBUFFER(27),OCLIT1 OR ALL DELIMITERS TO X'F0'
         TRT   WKBUFFER(27),ILBOWTBO  CHECK FOR ALL NUMERICS
         BC    7,CKCT7210          IF NOT ALL NUMERIC, GO TO CKCT7210
         MVC   CALMO,D1RECORD      MOVE BIRTH MONTH TO CAL
         MVC   CALDA,D1RECORD+3    MOVE BIRTH DAY TO CAL
         MVC   CALYR,D1RECORD+6    MOVE BIRTH YEAR TO CAL
         BAL   R14,CALJL           LINK TO JULIAN CONVERSION ROUTINE
         CP    JL1,CP0             CHECK FOR ERROR IN CAL
         BE    CKCT7220            IF ERROR, GO TO CKCT7220
         MVC   BIRTHDAY,JL1        SAVE BIRTH DATE IN BIRTHDAY
         MVC   CALMO,D1RECORD+11   MOVE START MONTH TO CAL
         MVC   CALDA,D1RECORD+14   MOVE START DAY TO CAL
         MVC   CALYR,D1RECORD+17   MOVE START YEAR TO CAL
         BAL   R14,CALJL           LINK TO JULIAN CONVERSION ROUTINE
         CP    JL1,CP0             CHECK FOR ERROR IN CAL
         BE    CKCT7230            IF ERROR, GO TO CKCT7230
         MVC   CURRDAY,JL1         MOVE START DAY TO CURRDAY
         CP    BIRTHDAY,CURRDAY    CHECK FOR BIRTHDAY PAST CURRDAY
         BH    CKCT7240            IF PAST, GO TO CKCT7240
         PACK  D,D1RECORD+22(5)    PACK NUMBER OF DAYS TO PLOT IN D
         B     CKCT9000            GO TO CKCT9000
CKCT7200 LA    R1,200              SET ERROR INDICATOR TO 200
         B     CKCT8000            GO TO CKCT8000
CKCT7210 LA    R1,210              SET ERROR INDICATOR TO 210
         B     CKCT8000            GO TO CKCT8000
CKCT7220 LA    R1,220              SET ERROR INDICATOR TO 220
         B     CKCT8000            GO TO CKCT8000
CKCT7230 LA    R1,230              SET ERROR INDICATOR TO 230
         B     CKCT8000            GO TO CKCT8000
CKCT7240 LA    R1,240              SET ERROR INDICATOR TO 240
CKCT8000 BAL   R14,ERR0200         LINK TO ERR0200
         MVI   ERRSW,X'01'         SET ERROR INDICATOR
CKCT9000 B     R14RTRN             GO TO R14 RETURN ROUTINE
CALJL    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         ZAP   JL1,CP0             INITIALIZE JL1 TO PACKED 0
         PACK  WKAREA1,CALMO       PACK MONTH INTO WKAREA1
         CVB   R1,WKAREA1          CONVERT MONTH TO BINARY IN R1
         LTR   R1,R1               CHECK FOR NON POSITIVE MONTH
         BNP   R14RTRN             IF NOT POSITIVE, GO TO R14 RTRN RTNE
         CH    R1,CH000012         CHECK MONTH FOR GREATER THAN 12
         BH    R14RTRN             IF GREATER, GO TO R14 RETURN ROUTINE
         SLL   R1,1                MULTIPLY BY 2 FOR TABLE OFFSET
         LH    R1,CJTBL-2(R1)      LOAD R1 WITH MONTH STRT JULIAN DAY-1
         PACK  WKAREA1,CALDA       PACK DAY INTO WKAREA1
         CVB   R2,WKAREA1          CONVERT DAY TO BINARY IN R2
         LTR   R2,R2               CHECK FOR NON POSITIVE DAY
         BNP   R14RTRN             IF NOT POSITIVE, GO TO R14 RTRN RTNE
         CH    R2,CJTBL+2          CHECK DAY FOR GREATER THAN 31
         BH    R14RTRN             IF GREATER, GO TO R14 RETURN ROUTINE
         AR    R1,R2               ADD DAY TO MONTH START JULIAN DAY-1
         CVD   R1,WKAREA1          CONVERT DAY TO DECIMAL IN WKAREA1
         PACK  JL1(3),CALYR(5)     PACK YEAR(5) INTO JL1
         MVC   JL1+2(2),WKAREA1+6  MOVE DAY TO JL1
         CLC   CALMO,C02           CHECK FOR NOT PAST FEBRUARY
         BNH   R14RTRN             IF NOT PAST, GO TO R14 RETURN RTNE
         PACK  WKAREA1,CALYR       PACK YEAR INTO WKAREA1
         CVB   R1,WKAREA1          CONVERT YEAR TO BINARY
         STC   R1,WKAREA1          STORE LAST BYTE IN WKAREA1
         TM    WKAREA1,X'03'       CHECK FOR DIV BY 4
         BNZ   R14RTRN             IF NOT, NOT LEAP, GO TO R14RTRN
         CLC   CALYR+1(3),ZERO     CHECK FOR YEAR DIV BY 1000
         BE    CJ0100              IF DIV BY 1000, LEAP, GO TO CJ0100
         CLC   CALYR+2(2),ZERO     CHECK FOR CENTURY
         BE    R14RTRN             IF CENTURY, NO LEAP, GO TO R14RTRN
CJ0100   AP    JL1,CP1             LEAP YEAR, ADD 1 TO JULIAN DATE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
JLCAL    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LA    R15,JCTBL+28        POINT R15 AT NO LEAP AREA+2 IN JCTBL
         CLI   JL1+2,X'00'         CHECK FOR CENTURY YEAR
         BNE   JC0100              IF NOT CENTURY, GO TO JC0100
         TM    JL1,X'0F'           CHECK FOR DIVISIBLE BY 1000
         BNZ   JC0200              IF NOT, NOT LEAP, GO TO JC0200
JC0100   XC    WKAREA1,WKAREA1     RESET WKAREA1 TO X'00'
         MVO   WKAREA1+5(3),JL1(2) MOVE W/OFFSET YEAR TO WKAREA1
         OI    WKAREA1+7,X'0F'     FORCE SIGN TO F
         CVB   R0,WKAREA1          CONVERT YEAR TO BINARY
         STC   R0,WKAREA1          STORE LOW ORDER BYTE IN WKAREA1
         TM    WKAREA1,X'03'       CHECK FOR DIVISIBLE BY 4
         BNZ   JC0200              IF NOT, NOT LEAP, GO TO JC0200
         LA    R15,JCTBL+2         POINT R15 AT LEAP AREA+2 IN JCTBL
JC0200   MVC   CAL,ZERO            INITIALIZE CALENDAR DATE TO ZERO
         ZAP   WKAREA1,JL1+2(2)    MOVE JULIAN DAY TO WKAREA1
         CVB   R1,WKAREA1          CONVERT DAY TO BINARY IN R1
         LTR   R1,R1               CHECK FOR NON POSITIVE DAY
         BNP   R14RTRN             IF NOT POSITIVE, GO TO R14 RTRN RTNE
         LA    R0,1                LOAD R0 WITH BXLE INCREMENT OF 1
         LA    R1,12               LOAD R1 WITH BXLE LIMIT OF 12
         LR    R2,R0               LOAD R2 WITH BXLE START OF 1
JC0300   CP    WKAREA1,0(2,R15)    CHECK FOR DAY GREATER THAN TBL ENTRY
         BNH   JC0400              IF NOT GREATER, GO TO JC0400
         LA    R15,2(R15)          POINT R15 AT NEXT TABLE ENTRY
         BXLE  R2,R0,JC0300        GO BACK TO JC0300 AT MOST 12 TIMES
         B     R14RTRN             INVALID DATE, GO TO R14 RETURN RTNE
JC0400   SH    R15,CH000002        BACK UP 1 ENTRY IN TABLE
         SP    WKAREA1,0(2,R15)    SUBTRACT TO GET DAY OF MONTH
         UNPK  CALDA,WKAREA1       UNPACK DAY INTO CALDA
         CVD   R2,WKAREA1          CONVERT MONTH TO DECIMAL IN R2
         UNPK  CALMO,WKAREA1       UNPACK MONTH INTO CALMO
         UNPK  WKAREA1(7),JL1      UNPACK DATE INTO WKAREA1
         MVC   CALYR,WKAREA1       MOVE YEAR TO CALYR
         OC    CAL,ZERO            FORCE F SIGNS ON ALL FIELDS
         B     R14RTRN             GO TO R14 RETURN ROUTINE
JLDIFF   BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         UNPK  WKAREA1(7),JL2      UNPACK DATE2 INTO WKAREA1
         PACK  WKAREA2,WKAREA1(4)  PACK DATE2 YEAR INTO WKAREA2
         CVB   R14,WKAREA2         CONVERT DATE2 YEAR TO BINARY IN R14
         PACK  WKAREA2,WKAREA1+4(3)    PACK DATE2 DAY INTO WKAREA2
         CVB   R15,WKAREA2         CONVERT DATE2 DAY TO BINARY IN R15
         UNPK  WKAREA1(7),JL1      UNPACK DATE1 INTO WKAREA1
         PACK  WKAREA2,WKAREA1(4)  PACK DATE1 YEAR INTO WKAREA2
         CVB   R0,WKAREA2          CONVERT DATE1 YEAR TO BINARY IN R0
         PACK  WKAREA2,WKAREA1+4(3)    PACK DATE1 DAY INTO WKAREA2
         CVB   R1,WKAREA2          CONVERT DATE1 DAY TO BINARY IN R1
         LR    R2,R14              LOAD R2 WITH DATE2 YEAR
         SR    R2,R0               SUBTRACT DATE1 YEAR TO GET YEAR DIFF
         SR    R15,R1              SUBTRACT DATE1 DAY FROM DATE2 DAY
         BNM   JDF0100             IF RESULT NOT MINUS, GO TO JDF0100
         BCTR  R2,R0               IF MINUS, SUBTRACT 1 FROM YEAR DIFF
         LA    R15,365(R15)        AND ADD 365 TO DAY DIFFERENCE
JDF0100  MH    R2,CH000365         MULTIPLY YEAR DIFF BY 365
         AR    R2,R15              ADD DAY DIFF TO (YR DIFF * 365)
JDF0200  BCTR  R14,R0              DECREMENT DATE2 YR TO LOOK FOR LEAP
         CR    R14,R0              CHECK FOR DATE2 YR LESS THAN DATE1
         BL    JDF0400             IF LESS, GO TO JDF0400
         STC   R14,WKAREA1         STORE LAST BYTE OF YR IN WKAREA1
         TM    WKAREA1,X'03'       CHECK FOR DIVISIBLE BY 4
         BNZ   JDF0200             IF NOT, THEN NOT LEAP, GO TO JDF0400
         CVD   R14,WKAREA1         CONVERT YEAR TO DECIMAL IN WKAREA1
         OI    WKAREA1+7,X'F0'     FORCE F SIGN ON YEAR
         UNPK  WKAREA1(3),WKAREA1+6(2) UNPACK LAST 3 DIGITS OF YEAR
         CLC   WKAREA1+1(2),ZERO   CHECK FOR CENTURY
         BNE   JDF0300             IF NOT, THEN LEAP, GO TO JDF0300
         CLC   WKAREA1(3),ZERO     CHECK FOR DIV BY 1000
         BNE   JDF0200             IF NOT, THEN NOT LEAP, GO TO JDF0400
JDF0300  LA    R2,1(R2)            LEAP YEAR, ADD 1 TO DIFFERENCE
         B     JDF0200             GO BACK TO JDF0200
JDF0400  CVD   R2,WKAREA1          CONVERT DIFFERENCE TO DECIMAL
         ZAP   JL2,WKAREA1         MOVE DIFFERNECE TO JL2
         B     R14RTRN             GO TO R14 RETURN ROUTINE
WEEKDAY  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         UNPK  WKAREA1(7),0(4,R1)  UNPACK DATE INTO WKAREA1
         LA    R0,6                LOAD R0 WITH BXLE INCREMENT OF 6
         LA    R1,DTBL1END         LOAD R1 WITH BXLE LIMIT ADDRESS
         LA    R2,DATETBL1         LOAD R2 WITH BXLE START ADDRESS
WKDA0100 CLC   WKAREA1(4),0(R2)    CHECK FOR YEAR LESS OR EQUAL
         BL    WKDA0200            IF LESS, GO TO WKDA0200
         BE    WKDA0300            IF EQUAL, GO TO WKDA0300
         BXLE  R2,R0,WKDA0100      IF GREATER, GO BACK TO WKDA0100
WKDA0200 SR    R2,R0               POINT R2 AT PREV ENTRY IN DATETBL1
         IC    R0,5(R2)            LOAD R0 WITH INIT OFST IN DATETBL2
         PACK  WKAREA2,WKAREA1(4)  PACK YEAR INTO WKAREA2
         CVB   R1,WKAREA2          CONVERT YEAR TO BINARY IN R1
         AR    R1,R0               ADD INIT OFST TO YEAR IN R1
         SR    R0,R0               RESET R0 FOR DIVIDE
         LA    R15,28              LOAD R15 WITH DIVISOR OF 28
         DR    R0,R15              R0=REMAINDER((YR+INIT OFST)/28)
         LR    R1,R0               SET R1 TO VALUE OF R0
         IC    R0,DATETBL2(R1)     LOAD R0 WITH YEAR START DAY
         B     WKDA1000            GO TO WKDA1000
WKDA0300 SR    R0,R0               RESET R0 FOR SUBSEQUENT IC
         IC    R0,4(R2)            LOAD R0 WITH YEAR START DAY
WKDA1000 PACK  WKAREA2,WKAREA1+4(3)    PACK JULIAN DAY INTO WKAREA2
         CVB   R1,WKAREA2          CONVERT DAY TO BINARY IN R1
         AR    R1,R0               ADD YEAR START DAY TO JULIAN DIFF
         LA    R1,6(R1)            SET JULIAN DAY RELATIVE TO 0
         SR    R0,R0               RESET R0 FOR SUBSEQUENT DIVIDE
         LA    R15,7               LOAD R15 WITH DIVISOR OF 7
         DR    R0,R15              DIVIDE BY 7, RO IS 0-6, DAY OF WEEK
         B     R14RTRN             GO TO R14 RETURN ROUTINE
OPEN1    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LA    R2,DCB1             LOAD R2 WITH ADDRESS OF DCB1
         BAL   R14,OPENIN          LINK TO INPUT OPEN ROUTINE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
OPEN2    BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LA    R2,DCB2             LOAD R2 WITH ADDRESS OF DCB2
         BAL   R14,OPENOUT         LINK TO OUTPUT OPEN ROUTINE
         CLI   OPENRC,X'00'        CHECK FOR OPEN ERROR
         BE    OPE29000            IF NONE, GO TO OPE29000
         SR    R1,R1               RESET R1 FOR SUBSEQUENT IC
         IC    R1,OPENRC+1         LOAD R1 WITH OPEN ERROR
         BAL   R14,ERR0000         LINK TO ERROR ROUTINE 0000
OPE29000 B     R14RTRN             GO TO R14 RETURN ROUTINE
OPENIN   BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         OPEN  ((2),INPUT)         OPEN FILE FOR INPUT
         B     R14RTRN             GO TO R14 RETURN ROUTINE
OPENOUT  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         OPEN  ((2),OUTPUT)        OPEN FILE FOR OUTPUT
         B     R14RTRN             GO TO R14 RETURN ROUTINE
DCBOXIT  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         MVI   36(R1),X'92'        SET RECFM=FBM
         SR    R15,R15             RESET R15 FOR SUBSEQUENT COMPARES
         CH    R15,62(R1)          CHECK FOR BLKSIZE SUPPLIED
         BNE   *+10                IF SUPPLIED, SKIP NEXT INSTRUCTION
         MVC   62(2,R1),CH003993   SET BLKSIZE=3993
         CH    R15,82(R1)          CHECK FOR LRECL SUPPLIED
         BNE   *+10                IF SUPPLIED, SKIP NEXT INSTRUCTION
         MVC   82(2,R1),CH000121   SET LRECL=121
         CLC   82(2,R1),CH000101   CHECK FOR LRECL LT 101
         BL    DCBO8000            IF LESS, GO TO DCBO8000
         CLC   82(2,R1),CH000257   CHECK FOR LRECL GT 257
         BH    DCBO8010            IF GREATER, GO TO DCBO8010
         LH    R0,82(R1)           LOAD R0 WITH DCB LRECL
         SR    R14,R14             RESET R14 FOR SUBSEQUENT DIVIDE
         LH    R15,62(R1)          LOAD R15 WITH DCB BLKSIZE
         DR    R14,R0              DIVIDE TO CHECK FOR R14 REMAINDER
         LTR   R14,R14             CHECK FOR REMAINDER
         BZ    DCBO9000            IF NO REMAINDER, GO TO DCBO9000
         B     DCBO8100            GO TO DCBO8100
DCBO8000 B     DCBO8090            GO TO DCBO8090
DCBO8010 MVI   OPENRC+1,10         SET OPEN ERROR=10
DCBO8090 MVI   OPENRC,X'01'        SET OPEN ERROR FLAG
         MVC   62(2,R1),CH003993   SET DCB BLKSIZE=3993
         MVC   82(2,R1),CH000121   SET DCB LRECL=121
         B     DCBO9000            GO TO DCBO9000
DCBO8100 MVI   OPENRC,X'01'        SET OPEN ERROR FLAG
         MVI   OPENRC+1,20         SET OPEN ERROR=20
         SR    R14,R14             RESET R14 FOR SUBSEQUENT DIVIDE
         LH    R15,CH004096        LOAD R15 WITH MAX BLKSIZE OF 4096
         DR    R14,R0              DIVIDE TO SET R15=BLOCKING FACTOR
         MR    R14,R0              MULTIPLY TO SET R15=BLKSIZE
         STH   R15,62(R1)          SET DCB BLKSIZE
DCBO9000 B     R14RTRN             GO TO R14 RETURN ROUTINE
GET1     BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LA    R2,DCB1             POINT R2 AT DCB1
         BAL   R14,GET             LINK TO GET ROUTINE
         LR    R12,R1              SET D1RECORD DSECT BASE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
EOD1     MVI   EOD1SW,X'01'        SET DCB1 EOD SWITCH
         B     R14RTRN             GO TO R14 RETURN ROUTINE
GET      BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         GET   (2)                 GET A RECORD
         B     R14RTRN             GO TO R14 RETURN ROUTINE
PUT2     BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         LA    R2,DCB2             POINT R2 AT DCB2
         BAL   R14,PUT             LINK TO PUT ROUTINE
         LR    R11,R1              SET D2RECORD DSECT BASE
         MVI   D2CC,X'09'          SET D2CC TO SPACE 1 LINE AFTER
         MVI   D2PRINT,X'40'       MOVE SPACE TO D2PRINT BYTE 0
         LH    R15,DCB2+82         LOAD R15 WITH DCB2 LRECL
         SH    R15,CH000002        DECREMENT R15 FOR EX
         EX    R15,PUT2090         EXECUTE MVC TO D2PRINT
         B     PUT2900             GO TO PUT2900
PUT2090  MVC   D2PRINT+1(1),D2PRINT    MOVE SPACE TO D2PRINT BYTES 1-N
PUT2900  B     R14RTRN             GO TO R14 RETURN ROUTINE
PUT      BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         PUT   (2)                 PUT A RECORD
         B     R14RTRN             GO TO R14 RETURN ROUTINE
CLOSE1   LA    R2,DCB1             LOAD R2 WITH ADDRESS OF DCB1
         B     CLOSE               GO TO FILE CLOSE ROUTINE
CLOSE2   LA    R2,DCB2             LOAD R2 WITH ADDRESS OF DCB2
CLOSE    TM    48(R2),X'10'        CHECK FOR FILE OPEN
         BNOR  R14                 IF NOT, RETURN TO INVOKING AREA
         BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         CLOSE ((2))               CLOSE FILE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
ERR0000  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         CVD   R1,WKAREA1          CONVERT ERROR INDICATOR TO DECIMAL
         UNPK  ERMSG000+31(4),WKAREA1  UNPACK INDICATOR INTO ERMSG000
         OI    ERMSG000+34,X'F0'   FORCE DISPLAY SIGN ON INDICATOR
         LA    R1,ERMSG000         POINT R1 AT ERMSG000
         BAL   R14,WTO             LINK TO WRITE TO OPERATOR ROUTINE
         OI    RC+1,X'04'          OR 4 INTO RETURN CODE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
ERR0100  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         CVD   R1,WKAREA1          CONVERT ERROR INDICATOR TO DECIMAL
         UNPK  ERMSG100+31(4),WKAREA1  UNPACK INDICATOR INTO ERMSG100
         OI    ERMSG100+34,X'F0'   FORCE DISPLAY SIGN ON INDICATOR
         LA    R1,ERMSG100         POINT R1 AT ERMSG100
         BAL   R14,WTO             LINK TO WRITE TO OPERATOR ROUTINE
         OI    RC+1,X'04'          OR 4 INTO RETURN CODE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
ERR0200  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         MVI   D2CC,X'89'          SET CARR CTL TO SKIP TO CHAN1 AFTER
         CVD   R1,WKAREA1          CONVERT ERROR INDICATOR TO DECIMAL
         BAL   R14,PUT2            LINK TO DCB2 PUT ROUTINE
         MVC   D2PRINT(80),D1RECORD    MOVE INPUT RECORD TO D2PRINT
         MVC   D2PRINT+85(16),ERMSG200 MOVE ERMSG200 TO D2PRINT
         UNPK  D2PRINT+94(4),WKAREA1   UNPACK ERROR IND INTO D2PRINT
         OI    D2PRINT+97,X'F0'    FORCE DISPLAY SIGN ON INDICATOR
         OI    RC+1,X'08'          OR 8 INTO RETURN CODE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
WTO      BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         CLI   WTOMSG,X'40'        CHECK FOR INITIAL WTO ALREADY DONE
         BE    WTO1000             IF ALREADY DONE, GO TO WTO1000
         ST    R1,SAVE2            SAVE R1 IN SAVE2
         BAL   R14,EXTRACT         LINK TO TIOT EXTRACT ROUTINE
         L     R1,TIOTAD           LOAD TIOT ADDRESS INTO R1
         MVC   WTOMSG+6(8),0(R1)   MOVE JOBNAME TO WTO MESSAGE
         MVC   WTOMSG+15(8),8(R1)  MOVE PROC STEP NAME TO WTO MESSAGE
         MVC   WTOMSG+24(8),16(R1) MOVE STEP NAME TO WTO MESSAGE
         BAL   R14,WTO9000         LINK TO WTO ROUTINE
         MVC   WTOMSG(2),WTOMSG+5  MOVE SPACE TO 1ST 2 BYTES OF WTOMSG
         L     R1,SAVE2            RESTORE R1 FROM SAVE2
WTO1000  SR    R15,R15             CLEAR R15
         IC    R15,0(R1)           LOAD R15 WITH MESSAGE LENGTH
         BCTR  R15,R0              DECREMENT R15 FOR EXECUTE
         EX    R15,WTO8000         EXECUTE MVC TO WTOMSG
         BAL   R14,WTO9000         LINK TO WTO ROUTINE
         B     R14RTRN             GO TO R14 RETURN ROUTINE
WTO8000  MVC   WTOMSG+6(1),1(R1)   MVC TO WTOMSG TO BE EXECUTED
WTO9000  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         CNOP  0,4                 ALLIGN ON FULL WORD BOUNDARY
         BAL   R1,WTOSVC           POINT R1 AT MESSAGE AND GO TO WTOSVC
         DC    H'54',X'8000'       TEXT LENGTH, MCS FLAGS
WTOMSG   DC    CL50'***** JOBNAMEX PROCSTEP STEPNAME BIO           ***'
         DC    X'0000',X'0020'     DISCRIPTOR CODES, ROUTING CODES
         DS    0H                  ALLIGN ON HALF WORD BOUNDARY
WTOSVC   SVC   35                  WRITE TO OPERATOR SVC
         MVC   WTOMSG+6(41),WTOMSG+5   MOVE SPACES TO MESSAGE AREA
         B     R14RTRN             GO TO R14 RETURN ROUTINE
EXTRACT  BAL   R15,R14SAVE         LINK TO R14 SAVE ROUTINE
         EXTRACT TIOTAD,FIELDS=TIOT    GET TIOT ADDRESS IN TIOTAD
         B     R14RTRN             GO TO R14 RETURN ROUTINE
R14SAVE  ST    R15,RTAD            SAVE RETURN ADDRESS IN RTAD
         L     R15,RTAD+4          POINT R15 AT LAST USED AREA
         LA    R15,4(R15)          POINT R15 AT FIRST UNUSED AREA
         ST    R15,RTAD+4          STORE THIS ADDR IN RTAD+4
         ST    R14,0(R15)          STORE R14 IN NEW SAVE AREA
         L     R15,RTAD            LOAD R15 WITH RETURN ADDRESS
         BR    R15                 RETURN TO INVOKING AREA
R14RTRN  L     R15,RTAD+4          LOAD R15 WITH ADDR OF CURR RTAD
         L     R14,0(R15)          LOAD R14 WITH MOST CURRENT RTAD
         SH    R15,CH000004        POINT R15 AT NEXT RTAD
         ST    R15,RTAD+4          SAVE THIS ADDR IN RTAD+4
         BR    R14                 GO TO ADDRESS IN R14
         EJECT
DCB1     DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EOD1,LRECL=80,MACRF=(GL),   C
               RECFM=FB
         EJECT
DCB2     DCB   DDNAME=SYSPRINT,DSORG=PS,EXLST=DCBOXLST,MACRF=(PL)
         EJECT
N        EQU   3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
WKAREA1  DC    D'0'
WKAREA2  DC    D'0'
CF500000 DC    F'500000'
CF1M     DC    F'1000000'
DCBOXLST DC    XL1'05',AL3(DCBOXIT)
MSTRTBL  DC    A(MTBLEND)
         DC    A(SINTBL01)
         DC    A(SINTBL02)
MTBLEND  DC    A(SINTBL03)
RTAD     DC    F'0',A(*),5F'0'
SAVE     DC    18F'0'
SAVE2    DC    F'0'
TIOTAD   DC    F'0'
AMPL     DC    H'0'
AMPLDFLT DC    H'0'
CH000002 DC    H'2'
CH000003 DC    H'3'
CH000004 DC    H'4'
CH000012 DC    H'12'
CH000018 DC    H'18'
CH000019 DC    H'19'
CH000101 DC    H'101'
CH000121 DC    H'121'
CH000257 DC    H'257'
CH000365 DC    H'365'
CH003993 DC    H'3993'
CH004096 DC    H'4096'
CJTBL    DC    H'000'
         DC    H'031'
         DC    H'059'
         DC    H'090'
         DC    H'120'
         DC    H'151'
         DC    H'181'
         DC    H'212'
         DC    H'243'
         DC    H'273'
         DC    H'304'
         DC    H'334'
NCNT     DC    H'0'
OPENRC   DC    H'0'
ORIG     DC    H'0'
ORIGDFLT DC    H'0'
RC       DC    H'0'
BIRTHDAY DC    PL4'0'
CP0      DC    PL1'0'
CP1      DC    PL1'1'
CP1000   DC    PL3'1000'
CURRDAY  DC    PL4'0'
D        DC    PL3'0'
JCTBL    DC    PL2'000'
         DC    PL2'031'
         DC    PL2'060'
         DC    PL2'091'
         DC    PL2'121'
         DC    PL2'152'
         DC    PL2'182'
         DC    PL2'213'
         DC    PL2'244'
         DC    PL2'274'
         DC    PL2'305'
         DC    PL2'335'
         DC    PL2'366'
         DC    PL2'000'
         DC    PL2'031'
         DC    PL2'059'
         DC    PL2'090'
         DC    PL2'120'
         DC    PL2'151'
         DC    PL2'181'
         DC    PL2'212'
         DC    PL2'243'
         DC    PL2'273'
         DC    PL2'304'
         DC    PL2'334'
         DC    PL2'365'
JL1      DC    PL4'0'
JL2      DC    PL4'0'
DATETBL1 DC    CL4'0000',AL1(0),AL1(00)
         DC    CL4'1700',AL1(5),AL1(00)
         DC    CL4'1800',AL1(3),AL1(16)
         DC    CL4'1900',AL1(1),AL1(04)
         DC    CL4'2000',AL1(6),AL1(04)
         DC    CL4'2100',AL1(5),AL1(16)
DTBL1END DC    CL4'9999',AL1(0),AL1(00)
DATETBL2 DC    XL25'00020304050001020305060001030405060102030406000102'
         DC    XL3'040506'
DLMLIT   DC    XL25'000061000061000000006B000061000061000000006B000000'
         DC    XL2'0000'
EOD1SW   DC    XL1'00'
EOD2SW   DC    XL1'00'
ERRSW    DC    XL1'00'
ILBOWTBO DC    240XL1'01',10XL1'00',6XL1'01'
NCLIT1   DC    XL25'0000FF0000FF00000000FF0000FF0000FF00000000FF000000'
         DC    XL2'0000'
NEWSW    DC    XL1'00'
OCLIT1   DC    XL25'0000F00000F000000000F00000F00000F000000000F0000000'
         DC    XL2'0000'
OVPRTSW  DC    XL1'00'
TRTAB1   DC    XL2'0008',2XL1'07',4XL1'06',8XL1'05',16XL1'04',32XL1'03'
         DC    64XL1'02',128XL1'01'
TRTAB2   DC    CL9' PSC    I'
TRTAB3   DC    XL16'00000001000102030001020304050607'
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'404142434445464748494A4B4C4D4E4F'
         DC    XL16'505152535455565758595A5B5C5D5E5F'
         DC    XL16'606162636465666768696A6B6C6D6E6F'
         DC    XL16'707172737475767778797A7B7C7D7E7F'
TRTAB4   DC    CL2' I',30CL1'0',CL1'C',31CL1'0',CL1'S',63CL1'0',CL1'P'
         DC    127CL1'0'
AMPLITUD DC    CL10'AMPLITUDE='
CAL      DS    0CL8
CALMO    DC    CL2' '
CALDA    DC    CL2' '
CALYR    DC    CL4' '
C01      DC    CL2'01'
C02      DC    CL2'02'
DAYTBL   DC    AL2(0),CL21'SUNMONTUEWEDTHUFRISAT'
ERMSG000 DC    AL1(34),CL34'IMPROPER SYSPRINT DCB.     ERRXXXX'
ERMSG100 DC    AL1(34),CL34'UNINTELLIGABLE PARM FIELD. ERRXXXX'
ERMSG200 DC    CL16'***** ERRXXXX ***'
HEADING1 DC    CL50'     THE BIORHYTHM THEORY POSTULATES THAT THERE EX'
         DC    CL50'IST CERTAIN METABOLIC RHYTHMS THAT HAVE A CONSTANT'
         DC    CL50'CYCLE TIME IN THE HUMAN BODY, AND ARE KNOWN AS INN'
         DC    CL50'ER CLOCKS.                                        '
         DC    CL50'     TWO PHYSICIANS, ONE A CONTEMPORARY OF FREUD, '
         DC    CL50'CONCURRENTLY DESCRIBED A 23 DAY CYCLE THAT        '
         DC    CL50'CORRELATED WITH PHYSICAL VITALITY, ENDURANCE, AND '
         DC    CL50'ENERGY, AND A 28 DAY CYCLE THAT CORRESPONDS TO    '
         DC    CL50'SENSITIVITY, INTUITION, AND CHEERFULNESS.  A THIRD'
         DC    CL50' CYCLE WAS OBSERVED BY A PROFESSOR AND OTHERS IN  '
         DC    CL48'1920''S AND 1930''S, AND IS A 33 DAY COGNITIVE OR '
         DC    CL2'IN'
         DC    CL50'TELLECTUAL CYCLE THAT RELATES TO MENTAL ALERTNESS '
         DC    CL50'AND JUDGEMENT.  ALL THREE CYCLES START UP FROM BIR'
         DC    CL50'TH OR THE BEGINNING OF INDEPENDANT LIFE.          '
         DC    CL50'     THE DAYS ON WHICH THE MEDIAN (0) LINE IS CROS'
         DC    CL50'SED ARE CALLED CRITICAL DAYS, ESPECIALLY FOR THE  '
         DC    CL50'PHYSICAL AND SENSITIVITY CYCLES AND ARE WHEN ACCID'
         DC    CL50'ENTS ARE THE MOST LIKELY TO OCCUR.  THE HIGH (+1) '
         DC    CL50'PERIODS IN THE VARIOUS CYCLES ARE THE TIMES WHEN Y'
         DC    CL50'OU SHOULD HAVE THE MOST ENERGY, BE MOST CHEERFUL, '
HD1END   DC    CL50'OUTGOING, AND MENTALLY ALERT.  THE LOW (-1) TIMES '
         DC    CL50'ARE REGARDED AS RECUPERITIVE PERIODS.             '
HEADING2 DC    CL50'GRAPHIC SYMBOLS.   I - MEDIAN LINE       (0 LINE) '
         DC    CL50'                   P - PHYSICAL CYCLE    (23-DAY) '
         DC    CL50'                   S - SENSITIVITY CYCLE (28-DAY) '
HD2END   DC    CL50'                   C - COGNITIVE CYCLE   (33-DAY) '
HEADING3 DC    CL50'THE FOLLOWING PLOT FORBEGINS AT **/**/****, RUNS F'
         DC    CL50'OR ***** DAYS,AND IS BASED ON A BIRTHDAY OF **/**/'
         DC    CL5'****.'
HEADING4 DC    CL11'(-1)(0)(+1)'
MONTHTBL DC    CL39'   JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
ORIGIN   DC    CL7'ORIGIN='
OVPRT    DC    CL5'OVPRT'
WKBUFFER DC    CL256' '
ZERO     DC    CL8'00000000'
         EJECT
SINTBL01 DC    A((ST01END-*-8)/4/N),A(*),A(ST01END)
         DC    F'00000000'         0000000
         DC    F'00090935'         0091061
         DC    F'00181115'         0182121
         DC    F'00269796'         0273182
         DC    F'00356242'         0364243
         DC    F'00439735'         0455304
         DC    F'00519584'         0546364
         DC    F'00595128'         0637425
         DC    F'00665740'         0728486
         DC    F'00730836'         0819546
         DC    F'00789876'         0910607
         DC    F'00842371'         1001668
         DC    F'00887885'         1092728
         DC    F'00926042'         1183789
         DC    F'00956526'         1274850
         DC    F'00979084'         1365911
         DC    F'00993529'         1456971
         DC    F'00999741'         1548032
         DC    F'00997668'         1639093
         DC    F'00987329'         1730153
         DC    F'00968808'         1821214
         DC    F'00942260'         1912275
         DC    F'00907904'         2003335
         DC    F'00866024'         2094396
         DC    F'00816969'         2185457
         DC    F'00761143'         2276518
         DC    F'00699012'         2367578
         DC    F'00631087'         2458639
         DC    F'00557932'         2549700
         DC    F'00480156'         2640760
         DC    F'00398399'         2731821
         DC    F'00313342'         2822882
         DC    F'00225689'         2913942
         DC    F'00136165'         3005003
         DC    F'00045513'         3096064
         DC    F'-0045516'         3187125
         DC    F'-0136167'         3278185
         DC    F'-0225691'         3369246
         DC    F'-0313345'         3460307
         DC    F'-0398402'         3551367
         DC    F'-0480157'         3642428
         DC    F'-0557935'         3733489
         DC    F'-0631088'         3824549
         DC    F'-0699013'         3915610
         DC    F'-0761146'         4006671
         DC    F'-0816970'         4097732
         DC    F'-0866025'         4188792
         DC    F'-0907905'         4279853
         DC    F'-0942260'         4370914
         DC    F'-0968809'         4461974
         DC    F'-0987329'         4553035
         DC    F'-0997668'         4644096
         DC    F'-0999739'         4735156
         DC    F'-0993528'         4826217
         DC    F'-0979082'         4917278
         DC    F'-0956525'         5008339
         DC    F'-0926041'         5099399
         DC    F'-0887882'         5190460
         DC    F'-0842370'         5281521
         DC    F'-0789872'         5372581
         DC    F'-0730833'         5463642
         DC    F'-0665739'         5554703
         DC    F'-0595125'         5645763
         DC    F'-0519579'         5736824
         DC    F'-0439733'         5827885
         DC    F'-0356241'         5918946
         DC    F'-0269790'         6010006
         DC    F'-0181117'         6101067
ST01END  DC    F'-0090930'         6192128
         EJECT
SINTBL02 DC    A((ST02END-*-8)/4/N),A(*),A(ST02END)
         DC    F'00000000'         0000000
         DC    F'00074730'         0074800
         DC    F'00149042'         0149600
         DC    F'00222520'         0224399
         DC    F'00294754'         0299199
         DC    F'00365341'         0373999
         DC    F'00433883'         0448799
         DC    F'00500000'         0523599
         DC    F'00563319'         0598398
         DC    F'00623489'         0673198
         DC    F'00680172'         0747998
         DC    F'00733051'         0822798
         DC    F'00781831'         0897598
         DC    F'00826238'         0972397
         DC    F'00866025'         1047197
         DC    F'00900968'         1121997
         DC    F'00930873'         1196797
         DC    F'00955572'         1271597
         DC    F'00974927'         1346396
         DC    F'00988830'         1421196
         DC    F'00997203'         1495996
         DC    F'01000000'         1570796
         DC    F'00997203'         1645596
         DC    F'00988831'         1720395
         DC    F'00974928'         1795195
         DC    F'00955573'         1869995
         DC    F'00930873'         1944795
         DC    F'00900969'         2019595
         DC    F'00866026'         2094394
         DC    F'00826239'         2169194
         DC    F'00781832'         2243994
         DC    F'00733052'         2318794
         DC    F'00680173'         2393594
         DC    F'00623490'         2468393
         DC    F'00563320'         2543193
         DC    F'00500000'         2617993
         DC    F'00433884'         2692793
         DC    F'00365341'         2767593
         DC    F'00294756'         2842392
         DC    F'00222522'         2917192
         DC    F'00149043'         2991992
         DC    F'00074731'         3066792
         DC    F'00000000'         3141592
         DC    F'-0074728'         3216391
         DC    F'-0149040'         3291191
         DC    F'-0222519'         3365991
         DC    F'-0294754'         3440791
         DC    F'-0365340'         3515591
         DC    F'-0433881'         3590390
         DC    F'-0499998'         3665190
         DC    F'-0563318'         3739990
         DC    F'-0623488'         3814790
         DC    F'-0680172'         3889590
         DC    F'-0733050'         3964389
         DC    F'-0781830'         4039189
         DC    F'-0826238'         4113989
         DC    F'-0866025'         4188789
         DC    F'-0900968'         4263589
         DC    F'-0930872'         4338388
         DC    F'-0955571'         4413188
         DC    F'-0974927'         4487988
         DC    F'-0988829'         4562788
         DC    F'-0997202'         4637588
         DC    F'-1000000'         4712387
         DC    F'-0997204'         4787187
         DC    F'-0988830'         4861987
         DC    F'-0974927'         4936787
         DC    F'-0955574'         5011587
         DC    F'-0930873'         5086386
         DC    F'-0900967'         5161186
         DC    F'-0866026'         5235986
         DC    F'-0826240'         5310786
         DC    F'-0781831'         5385586
         DC    F'-0733053'         5460385
         DC    F'-0680174'         5535185
         DC    F'-0623492'         5609985
         DC    F'-0563321'         5684785
         DC    F'-0500001'         5759585
         DC    F'-0433885'         5834384
         DC    F'-0365340'         5909184
         DC    F'-0294752'         5983984
         DC    F'-0222518'         6058784
         DC    F'-0149040'         6133584
ST02END  DC    F'-0074734'         6208383
         EJECT
SINTBL03 DC    A((ST03END-*-8)/4/N),A(*),A(ST03END)
         DC    F'00000000'         0000000
         DC    F'00063424'         0063467
         DC    F'00126592'         0126933
         DC    F'00189251'         0190400
         DC    F'00251147'         0253866
         DC    F'00312033'         0317333
         DC    F'00371662'         0380799
         DC    F'00429795'         0444266
         DC    F'00486196'         0507732
         DC    F'00540641'         0571199
         DC    F'00592907'         0634665
         DC    F'00642787'         0698132
         DC    F'00690078'         0761598
         DC    F'00734591'         0825065
         DC    F'00776146'         0888531
         DC    F'00814576'         0951998
         DC    F'00849725'         1015464
         DC    F'00881453'         1078931
         DC    F'00909631'         1142397
         DC    F'00934148'         1205864
         DC    F'00954902'         1269330
         DC    F'00971811'         1332797
         DC    F'00984807'         1396263
         DC    F'00993838'         1459730
         DC    F'00998867'         1523196
         DC    F'00999874'         1586663
         DC    F'00996855'         1650129
         DC    F'00989821'         1713596
         DC    F'00978802'         1777062
         DC    F'00963842'         1840529
         DC    F'00945000'         1903995
         DC    F'00922354'         1967462
         DC    F'00895994'         2030928
         DC    F'00866025'         2094395
         DC    F'00832570'         2157861
         DC    F'00795762'         2221328
         DC    F'00755750'         2284794
         DC    F'00712694'         2348261
         DC    F'00666769'         2411727
         DC    F'00618159'         2475194
         DC    F'00567060'         2538660
         DC    F'00513677'         2602127
         DC    F'00458227'         2665593
         DC    F'00400931'         2729060
         DC    F'00342020'         2792526
         DC    F'00281732'         2855993
         DC    F'00220311'         2919459
         DC    F'00158002'         2982926
         DC    F'00095056'         3046392
         DC    F'00031728'         3109859
         DC    F'-0031727'         3173325
         DC    F'-0095055'         3236792
         DC    F'-0158000'         3300258
         DC    F'-0220309'         3363725
         DC    F'-0281731'         3427191
         DC    F'-0342019'         3490658
         DC    F'-0400929'         3554124
         DC    F'-0458225'         3617591
         DC    F'-0513676'         3681057
         DC    F'-0567059'         3744524
         DC    F'-0618157'         3807990
         DC    F'-0666768'         3871457
         DC    F'-0712693'         3934923
         DC    F'-0755748'         3998390
         DC    F'-0795760'         4061856
         DC    F'-0832569'         4125323
         DC    F'-0866025'         4188789
         DC    F'-0895992'         4252256
         DC    F'-0922353'         4315722
         DC    F'-0945000'         4379189
         DC    F'-0963842'         4442655
         DC    F'-0978801'         4506122
         DC    F'-0989820'         4569588
         DC    F'-0996855'         4633055
         DC    F'-0999874'         4696521
         DC    F'-0998866'         4759988
         DC    F'-0993838'         4823454
         DC    F'-0984807'         4886921
         DC    F'-0971812'         4950387
         DC    F'-0954902'         5013854
         DC    F'-0934148'         5077320
         DC    F'-0909632'         5140787
         DC    F'-0881455'         5204253
         DC    F'-0849724'         5267720
         DC    F'-0814577'         5331186
         DC    F'-0776148'         5394653
         DC    F'-0734593'         5458119
         DC    F'-0690080'         5521586
         DC    F'-0642787'         5585052
         DC    F'-0592907'         5648519
         DC    F'-0540641'         5711985
         DC    F'-0486195'         5775452
         DC    F'-0429797'         5838918
         DC    F'-0371662'         5902385
         DC    F'-0312036'         5965851
         DC    F'-0251148'         6029318
         DC    F'-0189251'         6092784
         DC    F'-0126596'         6156251
ST03END  DC    F'-0063430'         6219717
         EJECT
D1RECORD DSECT
         DS    CL80
         SPACE 1
D2RECORD DSECT
D2CC     DS    CL1
D2PRINT  DS    CL132
         SPACE 1
         END
