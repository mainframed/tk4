         PRINT NOGEN
*----------------------------------------------------------------------
*
*
*        THIS PROGRAM SEARCHES A SYSLOG SYSOUT DATA SET (SYSUT1)
*        FOR SELECTED RECORDS, AND WRITES THOSE RECORDS TO SYSPRINT.
*        OPTIONAL PARM INFORMATION SPECIFIES THE DATA TO BE SEARCHED
*        FOR.
*
*        IF NO PARM INFORMATION IS SPECIFIED, THE DEFAULT OUTPUT WILL
*        CONTAIN 'ALL' OF THE LOG OUTPUT EXCLUDING SYSTEM 'STARTED',
*        'ENDED', AND 'STATUS' MESSAGES.  ALSO, ANY JES2 DISPLAY
*        RESPONSES WILL BE SUPPRESSED.  THIS WILL RESULT IN A MORE
*        READABLE LOG LISTING.
*
*        IF PARM INFORMATION IS USED TO SEARCH FOR A SPECIFIED
*        CHARACTER STRING, THEN IT MUST BE IN THE FOLLOWING FORMAT:
*
*        PARM='(NN)DDDDDDDD"(NN)DDDDDDDDDDDDDDDD"(NN)DDD'
*
*              -OR-
*
*        PARM='(NN)DDDDDDDD'
*
*             (NN)   =  LOG DETAIL LINE POSITION OF THE SEARCH FIELD
*                       (THE LOCATION YOU EXPECT THE DATA TO BE IN)
*                        MUST BE TWO CHARACTERS E.G. FOR POS 5 '05'
*
*             D...D  =  THE DATA TO BE SEARCHED FOR
*                       (INCLUDING BLANKS)
*
*        EXAMPLE:  PARM='(25)IEF403"(25)IEF404'
*                  WOULD LOCATE AND PRINT ALL RECORDS CONTAINING
*                  'IEF403' AND 'IEF404' IN POSITIONS 25 OF THE
*                  RECORD.
*
*
*----------------------------------------------------------------------
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION AND PARM ISOLATION
*
*----------------------------------------------------------------------
LOGSCAN  $PROLOG R12              ENTRY LINKAGE
         L     R1,0(R1)           GET PARM POINTER
         LH    R2,0(R1)           GET PARM SIZE
         LTR   R2,R2              ANY PARM?
         BZ    NEXTREC            NO, TAKE DEFAULT
         OI    SWITCH,SPEC        YES, INDICATE SAME
         LA    R3,2(R1)           POINT TO 1ST CHARACTER OF PARM
         LA    R11,2(R1,R2)       FIND END OF PARM STRING
         LA    R9,TABLE           POINT TO DATA TABLE
*
*  ISOLATE POSITION OF DATA
*
PRMLOOP1 CLI   0(R3),C'('         VALID OFFSET CHARACTER?
         BNE   ABEND              NO, ABEND
         CLI   3(R3),C')'         VALID OFFSET CHARACTER?
         BNE   ABEND              NO, ABEND
         MVZ   DW(2),1(R3)        MOVE ZONE DIGITS FOR VALIDATION
         CLC   DW(2),=C'00'       VALID NUMERICS?
         BNE   ABEND              NO, ABEND
         XC    DW,DW              CLEAR FOR NEXT PARM
         SR    R4,R4              CLEAR FOR ICM
         ICM   R4,3,1(R3)         PICK UP CHARACTERS
         SRDL  R4,4               ISOLATE LOW ORDER
         SRL   R4,4               ELIMINATE ZONE
         SLDL  R4,8               MERGE THE TWO
         N     R4,MASK1           ISOLATE DECIMAL DATA
         O     R4,MASK2           ADD SIGN DIGIT
         ST    R4,DW+4            PREPARE FOR CONVERT
         CVB   R4,DW              CONVERT TO HEX
         BCTR  R4,R0              DECREMENT TO FOR 'OFFSET'
         STC   R4,0(R9)           SAVE IN TABLE ENTRY
*
*        ISOLATE LENGTH OF DATA TO SEARCH FOR
*
         LA    R4,4(R3)           POINT TO BEGINNING OF DATA
         LR    R5,R4              COPY TO WORK REG
PRMLOOP2 CR    R5,R11             END OF PARM?
         BNL   CALC               YES, CALCULATE SIZE OF DATA
         CLI   0(R5),C'"'         DELIMITOR?
         BE    CALC               YES, CALCULATE SIZE OF DATA
         LA    R10,1(R10)         BUMP COUNT
         LA    R5,1(R5)           BUMP CHARACTER
         B     PRMLOOP2           CHECK NEXT CHARACTER
CALC     LTR   R10,R10            ANY PARM DATA?
         BZ    ABEND              NO, ERROR
         BCTR  R10,R0             DECREMENT FOR EXECUTE
         STC   R10,1(R9)          SAVE IN TABLE ENTRY
*
*        MOVE DATA TO TABLE FIELD
*
         EX    R10,MOVEDATA       MOVE DATA TO TABLE SLOT
*
*        UPDATE TO NEXT PARM FIELD IF ANY
*
         LA    R3,2(R10,R4)       BUMP TO NEXT PARM IF ANY
         CR    R3,R11             END OF PARM?
         BNL   NEXTREC            YES, BEGIN PROCESSING
         XC    DW,DW              CLEAR FOR NEXT PARM
         LA    R9,128(R9)         BUMP TO NEXT SLOT
         B     PRMLOOP1           GET NEXT PARM FIELD
ABEND    ABEND 1,DUMP             ERROR
         EJECT
*----------------------------------------------------------------------
*
*        INPUT/OUTPUT AND SEARCH ROUTINE
*
*----------------------------------------------------------------------
NEXTREC  BAL   R14,GET            GET INPUT RECORD
         TM    SWITCH,SPEC        WAS A PARM SPECIFIED?
         BO    CONTINUE           YES, CONTINUE
         CLC   24(6,R1),=C'IEF285' IS THIS 'STATUS' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   24(6,R1),=C'IEF287' IS THIS 'STATUS' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   24(6,R1),=C'IEF403' IS THIS 'STARTED' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   24(6,R1),=C'IEF404' IS THIS 'ENDED' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   24(6,R1),=C'IEF125' IS THIS 'LOGON' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   24(6,R1),=C'IEF126' IS THIS 'LOGOFF' MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   36(19,R1),=C' INACTIVE ******** ' INIT MESSAGE?
         BE    NEXTREC            YES, SKIP IT
         CLC   34(11,R1),=C' EXECUTING ' IS THIS A $DA RESPONSE
         BE    NEXTREC            YES, SKIP IT
         CLC   34(10,R1),=C' AWAITING ' IS THIS A $DN RESPONSE
         BE    NEXTREC            YES, SKIP IT
         CLC   34(10,R1),=C' $    INIT ' IS THIS A $DI
         BNE   CHKNEXT            NO, CONTINUE
         CLC   36(9,R1),=C' ACTIVE   ' IS THIS A $DI RESPONSE
         BE    NEXTREC            YES, SKIP IT
CHKNEXT  CLC   34(5,R1),=C' PRT ' IS THIS A $DN RESPONSE
         BNE   WRITE              NO, CONTINUE
         CLC   47(5,R1),=C' PUN ' IS THIS A $DN RESPONSE
         BE    NEXTREC            YES, SKIP IT
CONTINUE LA    R9,TABLE-128       GET TABLE ADDRESS (PREFIX)
LOOP2    LA    R9,128(R9)         GET NEXT ENTRY IN TABLE
         CLI   0(R9),X'00'        VALID ENTRY?
         BE    NEXTREC            NO, ALL DONE
         SR    R3,R3              CLEAR FOR ICM
         IC    R3,0(R9)           GET OFFSET TO COMPARE
         AR    R3,R1              DEVELOP COMPARAND ADDRESS
         IC    R4,1(R9)           GET SIZE TO COMPARE
         EX    R4,COMPARE         COMPARE FOR DATA
         BNE   LOOP2              NOT EQUAL, SKIP RECORD
WRITE    BAL   R14,PUT            EQUAL, WRITE RECORD
         OI    SWITCH,DATA        INDICATE DATA FOUND
         B     NEXTREC            GET NEXT RECORD
EODAD    CLOSE (GETDCB,,PUTDCB)   CLOSE FILES
         LA    R15,4              INDICATE NO DATA FOUND
         TM    SWITCH,DATA        DID WE FIND ANYTHING?
         BZ    EXIT               NO, CONTINUE
         SR    R15,R15            INDICATE DATA FOUND
EXIT     $EPILOG ,                RETURN TO SYSTEM
         EJECT
*----------------------------------------------------------------------
*
*        CONSTANTS AND WORKAREAS
*
*----------------------------------------------------------------------
COMPARE  CLC   0(0,R3),2(R9)      EXECUTED COMPARE
MOVEDATA MVC   2(0,R9),4(R3)      EXECUTED MOVE
SWITCH   DC    X'00'              FLAG SWITCH
DATA     EQU   X'01'              SEARCH SUCCESSFUL
SPEC     EQU   X'02'              PARM WAS PROVIDED
DW       DC    D'0'               DOUBLEWORD WORK AREA
MASK1    DC    X'00000FF0'        ISOLATION MASK
MASK2    DC    X'0000000C'        SIGN MASK
GET      SYSGET DDNAME=SYSUT1
PUT      SYSPUT DDNAME=SYSPRINT,LRECL=132
*        THE FOLLOWING IS THE LOGSCAN MESSAGE TABLE
*        OFFSET-SIZE-DATA FOR COMPARING(MAX 32 CHARS)
TABLE    DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         DC    128X'00'
         END
