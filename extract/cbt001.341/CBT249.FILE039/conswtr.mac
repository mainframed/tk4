CONSWTR  CSECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*     THIS ROUTINE WILL BUILD 'SYSIN' DATA BY PROMPTING THE OPERATOR  *
*     FOR INPUT VIA 'WTOR'.                                           *
*                                                                     *
*     WHEN IT GAINS CONTROL, IT WILL PASS ANY PARM INFORMATION GIVEN  *
*     TO THE PROGRAM TO BE CALLED, AND WILL ATTACH THAT PROGRAM       *
*     AFTER FIRST CHECKING FOR AND VALIDITY CHECKING THE SYSIN DD     *
*     ENTRY.  IF ONE IS FOUND, REQUESTS TO BUILD SYSIN WILL GO TO THE *
*     OPERATORS CONSOLE AND 'SYSIN' WILL BE OPENED FOR OUTPUT.        *
*     AFTER THE SYSIN HAS BEEN BUILT, THIS ROUTINE WILL ATTACH THE    *
*     PROGRAM WHOSE NAME APPEARS IN THE ORIGINAL PARM FIELD, PASSING  *
*     ANY ADDITIONAL PARMS GIVEN.                                     *
*                                                                     *
*                                                                     *
*     EXAMPLES:                                                       *
*                                                                     *
*     PARM='IEHDASDR'        WILL CAUSE SYSIN TO BE OPENED FOR OUTPUT *
*                            AND A 'WTOR' ISSUED FOR THE OPERATOR     *
*                            TO BUILD THE SYSIN DATA RECORDS.         *
*                            IEHDASDR WILL THEN BE ATTACHED WITHOUT   *
*                            ANY PARM INFORMATION.                    *
*                                                                     *
*     PARM='IEBUPDTE,MOD'    WILL CAUSE 'IEBUPDTE' TO BE ATTACHED     *
*                            AFTER BUILDING SYSIN, AND THE PARM       *
*                            'MOD' WILL BE PASSED.                    *
*                                                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         USING *,R11
         SAVE  (14,R12)            LINKAGE CONVENTIONS
         LR    R11,R15             GET BASE REG
         ST    R13,SAVE13          SAVE BACKWARD POINTER
         LA    R13,MYSAVE          SET UP NEW SAVE AREA
         ST    R1,SAVEPARM         SAVE PARM POINTER FOR LINK
         L     R1,0(R1)            GET PARM POINTER
         LR    R15,R1              COPY FOR EXECUTE
         LH    R2,0(R1)            GET PARM SIZE
         LTR   R2,R2               IS THERE A PARM
         BZ    EXIT                IF NOT, BAD START
         LA    R3,2(R1)            GET PARM REAL ADDRESS
         CLI   0(R3),C','          IS FIRST A COMMA
         BE    EXIT                IF SO, BAD PARM
         CLI   0(R3),C' '          IS FIRST A BLANK
         BE    EXIT                IF SO, BAD START
         CLC   0(4,R3),=CL4'DECK'  DECK REQUEST?
         BNE   BACK                NO, NODECK
         OI    SWIT,DECK           SET DECK REQUESTED FLAG
BACK     CLI   0(R3),C','          IS THIS A COMMA
         BE    SETNEW              IF SO GO UPDATE PARM
         BCTR  R2,R0               DECREMENT PARM SIZE
         LTR   R2,R2               IS THAT ALL
         BZ    LINKONLY            IF SO, NO PARMS TO PASS
         LA    R3,1(R3)            UPDATE TO NEXT CHAR
         B     BACK                GO CHECK NEXT
SETNEW   LA    R4,2(R1)            SET DATA POINTER FOR SUBTRACT
         LR    R5,R3               SET DATA POINTER FOR SUBT
         SR    R5,R4               GET DIFFERENCE
         B     DONAME              GO MOVE NAME FOR LINK
LINKONLY SR    R2,R2               INDICATE NO PARM TO PASS
         LH    R5,0(R1)            GET NAME SIZE
         XC    0(2,1),0(R1)        CLEAR PARM SIZE FIELD
DONAME   BCTR  R5,R0               DECREMENT FOR MOVE
         TM    SWIT,DECK           WAS DECK REQUESTED?
         BZ    NOADJ               NO, DON'T ADJUST
         LA    R15,4(R15)          BUMP PAST 'DECK'
         SH    R5,=H'4'            DECREMENT SIZE FIELD
NOADJ    EX    R5,MOVENAME         MOVE LINK TO NAME
         LTR   R2,R2               IS THERE A PARM TO PASS
         BZ    NOPARM              IF NOT SKIP NEXT
         BCTR  R2,R0               DECREMENT FOR CORRECT SIZE
         STH   R2,0(R1)            SET NEW PARM SIZE
         BCTR  R2,R0               DECREMENT FOR MOVE
         EX    R2,MOVEPARM         MOVE UPDATED PARM
         EJECT
NOPARM   L     R2,16               GET CVT
         L     R2,0(R2)            TCB DW POINTER
         L     R2,4(R2)            CURRENT TCB
         L     R2,12(R2)           TIOT POINTER
         MVC   ENDMSG+8(8),NAME    MOVE PROGRAM NAME TO END MSG
         MVC   ABEND+8(8),NAME     MOVE PROGRAM NAME TO END MSG2
         MVC   WTO+22(8),NAME      MOVE PROGRAM NAME TO ENTRY MSG
         MVC   WTO2+22(8),NAME     MOVE PROGRAM NAME TO ENTRY MSG
         LA    R2,24(R2)           UPDATE TO FIRST DD ENTRY IN TIOT
         SR    R3,R3               CLEAR FOR I.C.
FINDIT   CLI   0(2),X'00'          IS THIS THE END
         BE    CHKDDS              IF SO, CHECK FOR SYSIN FOUND
         IC    R3,0(R2)            GET THIS ENTRY SIZE
         CLC   4(8,2),=CL8'SYSIN'  IS THIS SYSIN DD CARD
         BNE   CHKPUN              IF NOT, CHECK FOR PUNCH
         L     R15,16(R2)          GET UCB ADDR
         LA    R15,0(R15)          CLEAR HIGH ORDER
         LTR   R15,R15             DUMMY OR SYSIN/SYSOUT ENTRY?
         BZ    GETNEXT             YES, SKIP IT
         OI    SWIT,SYSIN          SET FOUND SWITCH
         B     GETNEXT             GET NEXT ENTRY
CHKPUN   CLC   4(8,R2),=CL8'CONPUNCH' CONPUNCH DDNAME?
         BNE   GETNEXT             NO, SKIP IT
         OI    SWIT,PUN            ELSE, SET PUNCH DS FOUND
GETNEXT  AR    R2,R3               UPDATE TO NEXT ENTRY
         B     FINDIT              GO LOOK SOME MORE
CHKDDS   TM    SWIT,SYSIN          SYSIN DD FOUND?
         BZ    DOLINK              NO, SKIP TO DO LINK
WTO      WTOR  'ENTER          DATA/.',REPLY+1,71,REPLYECB
WAIT     MVI   REPLYECB,R0         CLEAR ECB CODE FOR WAIT
         WAIT  ECB=REPLYECB        WAIT FOR REPLY
         OC    REPLY(80),=CL80' '  INSURE UPPER CASE
         CLI   REPLY+1,C'.'        IS THIS THE END
         BE    DOLINK              IF SO, GO LINK
 EJECT
CONTINUE LA    R2,WTO              SET RETURN REGISTER
         LA    R5,REPLY+70         GET END OF DATA POINTER
         LA    R6,70               SET COUNT FOR LOOP CONTROL
COMPARE  CLI   0(5),C' '           IS THIS A BLANK
         BNE   CHKCOMMA            IF NOT CHECK FOR COMMA
         BCTR  R5,R0               DECREMENT TO PREVIOUS CHAR
         BCT   R6,COMPARE          LOOP TO CHECK ALL
         BR    2                   IGNORE BLANK CARD
CHKCOMMA CLI   0(5),C','           DID TEXT END WITH COMMA
         BE    FLAG                IF SO, BRANCH TO CONTINUE
         CLI   0(5),C'.'           IS THIS AN END INDICATOR
         BNE   CONT                IF NOT, BRANCH TO CONTINUE
         MVI   0(5),C' '           CLEAR PERIOD IN BUFFER
         LA    R2,DOLINK           SET RETURN REG
         B     CONT                GO WRITE IT OUT
FLAG     MVI   REPLY+71,C'*'       ELSE FLAG CONTINUATION
         BAL   R2,CONT             GENERATE AND RETURN
WTO2     WTOR  'ENTER          DATA/.',REPLY+15,55,REPLYECB
         B     WAIT                GO WAIT FOR REPLY
CONT     LA    R1,REPLY            SET DATA POINTER FOR WRITE RTN
         BAL   R14,OUT             GO WRITE RECORD
         TM    SWIT,PUN+DECK       WAS PUNCH FOUND AND REQUESTED?
         BNO   NOPUN               NO, SKIP
         BAL   R14,PUNCH           GO PUNCH RECORD
NOPUN    MVI   REPLY,C' '          MOVE BLANK TO BUF
         MVC   REPLY+1(79),REPLY   PROPIGATE
         MVI   DOLINK+1,X'00'      SET 1ST TIME SWITCH
         BR    2                   RETURN FOR NEXT MSG
DOLINK   B     LINK                1ST TIME SWITCH FOR WRITE RTN
         CLOSE (OUTDCB,REREAD)     ALLOW NEXT PROGRAM TO REOPEN
LINK     L     R1,SAVEPARM         SET UP PARM POINTER
         ATTACH  EPLOC=NAME,ECB=WAITECB,ETXR=NOP  PASS CONTROL TO PGM
         LA    R1,0(R1)            CLEAR HIGH ORDER OF TCB ADDRESS
         ST    R1,TCB              SAVE TCB ADDRESS
         WAIT  ECB=WAITECB         WAIT FOR SUB TASK TO COMPLETE
         L     R1,TCB              GET TCB ADDRESS
         L     R15,WAITECB         GET COMPLETION FROM ECB
         LA    R15,0(R15)          CLEAR HIGH ORDER
         LTR   R15,R15             TEST FOR NORMAL COMPLETION
         BZ    DONE                IF ZERO RETURN CODE, EXIT
         TM    29(1),X'80'         ABNORMAL TERMINATION?
         BO    ABEND               IF SO,GIVE DUMP
ENDMSG   WTO   '         RETURNED A NON-ZERO RETURN CODE, CHECK SYSOUT'
DONE     DETACH  TCB               DETACH SUBTASK TCB
         SR    R15,R15             INDICATE NORMAL COMPLETION TO OS
         L     R13,SAVE13          GET BACKWARD CHAIN POINTER
         RETURN  (14,12),RC=(15)   RETURN TO SYSTEM TASK CONTROL
ABEND    WTO   '         ABENDED, CHECK SYSOUT'  INFORM USER
         B     DONE                NOW GO EXIT
         EJECT
NOP      BR    14                  DUMMY EXIT RTN FOR ATTACH PROB
EXIT     WTO   'CONSWTR, INVALID/NO PARM SPECIFIED'  TELL USER
         LA    R15,R4              INDICATE BAD RETURN CODE
         B     DONE                LETS EXIT NOW
PARMOVE  MVC   2(1,1),4(R1)
MOVENAME MVC   NAME(1),2(R15)
MOVEPARM MVC   2(1,1),1(R3)
OUT      SYSPUT  DDNAME=SYSIN
PUNCH    SYSPUT  DDNAME=CONPUNCH
         LTORG
MYSAVE   DC    18F'0'
NAME     DC    CL8' '
SAVEPARM DC    F'0'
SAVE13   DC    F'0'
REPLYECB DC    F'0'
TCB      DC    F'0'
WAITECB  DC    F'0'
REPLY    DC    CL81' '
SWIT     DC    X'00'
SYSIN    EQU   X'01'
PUN      EQU   X'02'
DECK     EQU   X'04'
R0       EQU       0
R1       EQU       1
R2       EQU       2
R3       EQU       3
R4       EQU       4
R5       EQU       5
R6       EQU       6
R7       EQU       7
R8       EQU       8
R9       EQU       9
R10      EQU       10
R11      EQU       11
R12      EQU       12
R13      EQU       13
R14      EQU       14
R15      EQU       15
         END
