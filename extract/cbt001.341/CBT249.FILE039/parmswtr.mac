***********************************************************************
*
*        PARMSWTR IS A GENERAL PURPOSE PARM TO DATASET UTILITY.
*        IT REQUIRES VARIABLE LENGTH PARM INFORMATION AS INPUT WHICH
*        IT THEN WRITES TO ONE OF TWO FILES (DDNAMES).
*
*        INPUT PARM INFORMATION MAY REQUEST THAT A SINGLE RECORD
*        (80 BYTES) BE WRITTEN, OR THAT MULTIPLE RECORDS BE WRITTEN.
*        OUTPUT RECORDS ARE ALWAYS WRITTEN AS 80 BYTE RECORDS
*        EVEN THOUGH THE INPUT PARM IS SHORTER THAN 80 (RECORDS ARE
*        PADDED WITH BLANKS.
*
*        DCB INFORMATION IS NOT REQUIRED ON THE 'PARMSWTR' DD CARD.
*        IF AN EXISTING DATASET IS BEING USED, THEN IT'S ATTRIBUTES
*        WILL BE USED (LRECL=80).  IF A NEW FILE IS USED, A DEFAULT
*        OF 80-80 FB WILL BE USED (UNLESS OVERRIDDEN).
*
*        THIS ROUTINE HAS TWO ENTRY POINTS (NAMELY 'PARMSWTR' AND
*        'PARMSIN').  THE NAME USED TO INVOKE THIS ROUTINE IS USED
*        TO DETERMINE THE FILENAME (DDNAME) TO BE USED FOR OUTPUT.
*        IF CALLED VIA THE NAME 'PARMSWTR' (THE NORMAL ENTRY), THE
*        OUTPUT WILL BE WRITTEN TO THE 'PARMSWTR' FILE.
*
*        THE SECOND ENTRY WAS ADDED TO ALLOW SUPPORT WITHIN TSO
*        CLISTS FOR TEMPORARY DATASETS E.G. VIO, AS FOLLOWS:
*
*        IF THE NAME 'PARMSIN' IS USED, OUTPUT WILL BE WRITTEN TO
*        THE 'SYSIN' FILENAME BUT ONLY IF A FILENAME OF 'PARMSWTR'
*        DOES NOT ALSO EXIST.  THIS IS AN ATTEMPT AT VARIFICATION
*        OF THE REQUEST, SINCE WE NEED TO INSURE THAT THE FUNCTION
*        SPECIFIED IS WHAT IS INTENDED (WE DON'T WANT TO CLOBBER
*        A 'SYSIN' DATASET IF THE USER REALLY WANTED TO WRITE TO
*        THE 'PARMSWTR' FILENAME).
*
*        IF BOTH 'PARMSWTR' FILE WAS SPECIFIED BUT THE CALL WAS
*        VIA 'PARMSIN' THEN AN ABEND 'U100' WILL OCCUR INDICATING
*        A REQUEST CONFLICT.
*
***********************************************************************
         SPACE 3
***********************************************************************
*
*        THE FOLLWING IS AN EXAMPLE OF PARM FOR A SINGLE RECORD:
*        PARM=' DDDDDDDDDDDDDDDDD' NOTE THAT THE FIRST CHARACTER
*                                  OF PARM INFO IS 'BLANK'.  IN
*                                  THIS CASE THERE IS NO
*                                  DELIMITER CHARACTER IMPLYING
*                                  THAT A SINGLE RECORD IS TO BE
*                                  WRITTEN (INCLUDING THE BLANK).
*
*                NOTE THAT PARM INFORMATION ON AN 'EXEC' CARD
*                IS LIMMITED TO 100 CHARACTERS.  HOWEVER, A USER
*                MAY EXCEED 100 IF INVOKED BY ANOTHER MEANS
*                (E.G. TSO GENERATION WITHIN CLISTS VIA 'AUTH/XEQ').
*
***********************************************************************
         EJECT
***********************************************************************
*
*        THE FOLLWING IS AN EXAMPLE OF PARM FOR A MULTIPLE RECORDS:
*        PARM='@AAAA@BBBB,@CCCC, ' IN THIS CASE, THE AT SIGN "@" IS
*                                  USED AS A DELIMINATOR (1ST CHAR
*                                  NON-BLANK = MULTIPLE RECORDS).
*                                  THE 'AAAA' WILL BE IN COL 1 OF
*                                  CARD 1, 'BBBB,' WILL BE IN COL 1
*                                  OF CARD 2 AND IT WILL BE FLAGGED
*                                  IN COL 72, 'CCCC,' WILL BE IN
*                                  COL 16 OF CARD 3 BUT CARD 3 WILL
*                                  'NOT' BE FLAGGED IN COL 72 (COMMA
*                                   NOT PRECEDING END OF PARM OR A
*                                   DELIMINATOR).
*
*        IF THE LAST CHARACTER FOUND (LAST OF PARM OR LAST PRECEDING
*        A DELIMINATOR) IS A COMMA (,) THEN THE CURRENT RECORD IS
*        FLAGGED IN COLUMN 72 AS BEING CONTINUED AND THE 'NEXT' PART
*        OF THE PARM WILL BE PLACED INTO COL 16 OF THE NEXT RECORD.
*
*        IF TWO DELIMITORS ARE FOUND IN A ROW, THEN THE 'LAST' CHAR
*        PRECEDING THE DELIMITERS AND THE TWO DELIMITERS WILL BE
*        RUBBED-OUT.  THIS FEATURE IS USED TO WIPE OUT THE
*        GENERATED COMMA (,) ON EXEC CARD PARM CONTINUATION.
*
*             EXAMPLE: PARM='@1234,@@5678@@@89A'
*                      WOULD GENERATE THE FOLLOWING RECORDS:
*                      '1234567'
*                      '89A'
*
***********************************************************************
         EJECT
***********************************************************************
*
*        INITIALIZATION ROUTINE (HOUSEKEEPING AND VALIDATION)
*
***********************************************************************
PARMSWTR CSECT
         ENTRY PARMSIN             INFORM THE ASSEMBLER OF OTHER ENTRY
         USING *,R15               INFORM ASSEMBLER OF SAME
         STM   R14,R12,12(R13)     SAVE CALLERS REGS
         SR    R8,R8               INDICATE PARMSWTR ENTRY
         B     INITIAL             BRANCH AROUND SECOND ENTRY
PARMSIN  EQU   *                   SYSIN ENTRY POINT
         USING *,R15               INFORM ASSEMBLER OF SAME
         STM   R14,R12,12(R13)     SAVE CALLERS REGS
         LA    R8,1                INDICATE PARMSIN ENTRY
INITIAL  BALR  R12,R0              GET NEW BASE REG
         USING *,R12               INFORM ASSEMBLER
         DROP  R15                 RELEASE TEMPORARY BASE
         L     R2,0(R1)            COPY ADDRESS OF PARM INFO
         LA    R0,WORKSIZE         SIZE OF WORKAREA
         BAL   R1,*+4              INDICATE GETMAIN
         SVC   10                  GET REENTRANT STORAGE
         USING WORK,R1             COPY TO USING REGISTER
         XC    SEPCHAR(2),SEPCHAR  CLEAR WORK AREA CONSTANTS
         MVC   RETCODE(@SIZE),@RETCODE MOVE NON-REENTRANT CODE
         ST    R13,SAVEAREA+4      SAVE PREVIOUS SAVE AREA
         ST    R1,8(,R13)          STORE AS NEXT SAVEAREA
         DROP  R1                  DROP USING FOR R1
         LR    R13,R1              SET MINE AS CURRENT SAVEAREA
         USING WORK,R13            SET BASE FOR WORKAREA
         LTR   R8,R8               ENTRY FOR 'PARMSWTR'?
         BZ    SKIPCHK             YES, SKIP TIOT CHECK
         L     R3,16               GET CVT ADDRESS
         L     R3,0(R3)            GET OLD/NEW TCB POINTERS
         L     R3,4(R3)            GET OUR TCB ADDRESS
         L     R3,12(R3)           GET OUR TIOT ADDRESS
         LA    R0,24               SIZE OF TIOT HEADER
NEXTENT  AR    R3,R0               BUMP TO NEXT ENTRY
         CLC   4(8,R3),=CL8'PARMSWTR' IS THIS PARMSWTR NAME?
         BE    ABEND               YES, POSSIBLE ERROR
         ICM   R0,1,0(R3)          SIZE OF ENTRY
         BZ    SETFILE             END OF TIOT, CONTINUE
         B     NEXTENT             CHECK NEXT ENTRY
ABEND    WTO   'FILE ''PARMSWTR'' INVALID FOR ''PARMSIN''',ROUTCDE=11
         ABEND 100                 ABEND, NODUMP
SETFILE  MVC   DCB+40(8),=CL8'SYSIN' MODIFY DDNAME
SKIPCHK  LH    R5,0(,R2)           GET PARM LENGTH
         BCTR  R5,R0               REDUCE PARM COUNT BY 1
         LTR   R4,R5               IS VALID PARM FIELD PRESENT?
         BNP   EXIT                BR NO, INVALID PARM FIELD
         LA    R9,DCB              GET ADDR OF DCB
         LA    R1,DCBADDR          GET ADDRESS OF OPEN LIST
         ST    R9,0(R1)            UPDATE DCB POINTER
         MVI   0(R1),X'8F'         INDICATE OPEN FOR OUTPUT
         SVC   19                  OPEN PARM OUTPUT FILE
         TM    DCB+48,X'10'        OPEN OK?
         BNO   EXIT                NO, ERROR
         LA    R5,2(R5,R2)         CALC LAST PARM BYTE ADDR
         LA    R2,2(R2)            SET DEFAULT PARM DATA START
         CLI   0(R2),C' '          NULL SEPARATOR BYTE?
         BE    NOSEP               YES, NO SEPARATOR GIVEN
         MVC   SEPCHAR(1),0(R2)    USE 1ST BYTE AS FIELDSEP'R
         OI    SWITCH,SEP          ACTIVATE SEP CHECK
         LA    R2,1(R2)            OVERRIDE PARM DATA START
NOSEP    LA    R4,1                SET SCAN INCREMENT
         LR    R10,R2              COPY PARM START ADDR.
***********************************************************************
*
*        MAINLINE ROUTINE TO GENERATE OUTPUT RECORDS
*
***********************************************************************
SEPCHECK TM    SWITCH,SEP          WAS A SEPARATOR CHAR SUPPLIED?
         BZ    SCANBUMP            NO, NO CHECK FOR SEPARATOR
         CLC   0(1,R2),SEPCHAR     IS BYTE A FIELD DELIMITER
         BE    PUTPARM             YES, GO CHECK IT
SCANBUMP BXLE  R2,R4,SEPCHECK      CONT SEPARATOR SCAN TIL PARM END
PUTPARM  LR    R11,R2              COPY SEPARATOR ADDR.
         SR    R11,R10             CALC LENGTH OF THIS PARM FIELD
         BZ    ENDTEST             IF LENGTH = 0 GO TEST FOR END
         BCTR  R11,R0              ADJUST LENGTH FOR MVC
         CR    R2,R5               END OF PARMS REACHED?
         BNL   NORUB               YES, CANNOT BE A RUBOUT
         CLC   1(1,R2),SEPCHAR     IS 'NEXT' CHARACTER ALSO DELIMITER?
         BNE   NORUB               NO, NO RUBOUT TO DO
         BCTR  R2,R0               DECREMENT TO PREVIOUS CHAR
         LR    R15,R5              GET END OF PARM ADDR
         SR    R15,R2              GET LENGTH OF REMAINDER
         S     R15,=F'3'           LENGTH OF DOUBLE DELIMS -1
MOVELOOP C     R15,=F'256'         WITHIN MACHINE LIMITS?
         BL    LASTMOVE            YES, CONTINUE
         MVC   0(256,R2),3(R2)     MOVE BLOCK OF DATA
         LA    R2,256(R2)          BUMP DATA POINTER
         S     R15,=F'256'         DECREMENT COUNT
         B     MOVELOOP            CHECK WHATS LEFT
LASTMOVE EX    R15,RUBOUT          MOVE REMAINING PARM LEFT 3
         LR    R2,R10              RESET TO START OF FIELD
         S     R5,=F'3'            DECREMENT PARM END POINTER
         B     SCANBUMP            RESCAN THE DATA FIELD
RUBOUT   MVC   0(0,R2),3(R2)       SHIFT DATA LEFT 3
NORUB    TM    SWITCH,CONT         CONTINUATION EXPECTED?
         BNO   NORMAL              NO, NORMAL RECORD OUT
         EX    R11,CONTMOVE        MOVE CONTINUATION CARD
         LA    R1,BUFFER+15(R11)   POINT TO END OF DATA
         B     AROUND              BRANCH AROUND NORMAL MOVE
NORMAL   EX    R11,FIELDMVC        PARM FIELD TO OUTPUT BUFFER
         LA    R1,BUFFER(R11)      POINT TO END OF DATA
AROUND   NI    SWITCH,ALLBITS-CONT  RESET CONTINUATION EXP'D
         CLI   0(R1),C','          CONTINUATION REQUEST?
         BNE   PUT                 NO, NORMAL RECORD
         OI    SWITCH,CONT         YES, SET CONT EXPECTED
         MVI   BUFFER+71,C'*'      FLAG CONTINUATION CARD
PUT      OC    BUFFER(80),@BLANK   INSURE UPPER CASE
         LA    R0,BUFFER           POINT TO OUTPUT RECORD
         PUT   (R9)                WRITE PARM FIELD RECORD
         MVC   BUFFER(80),@BLANK   CLEAR BUFFER
         XC    RETCODE,RETCODE     SET ZERO RETURN CODE
ENDTEST  LA    R10,1(,R2)          POINT TO NEXT POSSIBLE PARM FIELD
         CR    R2,R5               END OF PARMS REACHED?
         BL    SCANBUMP            NO, CONTINUE
         LA    R1,DCBADDR          GET ADDRESS OF CLOSE LIST
         MVI   0(R1),X'80'         INDICATE END OF LIST
         SVC   20                  CLOSE PARM OUTPUT FILE
EXIT     L     R10,RETCODE         PICK UP RETURN CODE
         LR    R1,R13              SET ADDRESS FOR FREEMAIN
         L     R13,SAVEAREA+4      POINT TO SYSTEM SAVEAREA
         LA    R0,WORKSIZE         SET SIZE FOR FREEMAIN
         SVC   10                  FREE GOTTEN STORAGE
         LR    R15,R10             COPY RET CODE
         LM    R0,R12,20(R13)      RELOAD SYSTEM REGS.
         L     R14,12(R13)         RELOAD RETURN REG.
         BR    14                  RETURN
***********************************************************************
*
*        EXECUTED INSTRUCTIONS AND THE OPEN EXIT
*
***********************************************************************
FIELDMVC MVC   BUFFER(1),0(R10)    EXECUTED TO MOVE PARM TO BUFFER
CONTMOVE MVC   BUFFER+15(1),0(R10)  EXECUTED TO MOVE CONTINUATION
EXLST    DC    X'85',AL3(OPENEXIT)
OPENEXIT CLI   DCB+36,X'00'        RECFM PROVIDED?
         BNE   CHKBLK              YES, CONTINUE
         MVI   DCB+36,X'90'        PROVIDE RECFM=FB
CHKBLK   CLC   DCB+62(2),=H'0' BLKSIZE PROVIDED?
         BNER  R14                 YES, RETURN
         MVC   DCB+62(2),=H'80' PROVIDE BLKSIZE=80
         BR    R14                 RETURN
         LTORG
***********************************************************************
*
*        CONSTANTS WHICH ARE MOVED TO GOTTEN STORAGE TO MAINTAIN
*        RE-ENTRANT ATTRIBUTES
*
***********************************************************************
@RETCODE DC    F'4'                RETURN CODE (PRIMED)
@DCBADDR DC    F'0'                OPEN / CLOSE LIST
@DCB     DCB   DDNAME=PARMSWTR,MACRF=(PM),DSORG=PS,LRECL=80,           X
               EXLST=EXLST
@BLANK   DC    CL81' '             BLANKS TO FORCE UPPER CASE
@SIZE    EQU   *-@RETCODE          SIZE FOR MOVE OF RELOCATED DATA
***********************************************************************
*
*        GOTTEN WORK AREA DSECT
*
***********************************************************************
WORK     DSECT
SAVEAREA DS    18F                 REG SAVEAREA
RETCODE  DS    F                   RETURN CODE
DCBADDR  DS    F                   OPEN / CLOSE LIST
DCB      DCB   DDNAME=PARMSWTR,MACRF=(PM),DSORG=PS,LRECL=80,           X
               EXLST=EXLST
BUFFER   DS    CL81                OUTPUT BUFFER
SEPCHAR  DS    C                   SEPARATOR CHARACTER HOLD
SWITCH   DS    X                   FLAG SWITCH BITS
ALLBITS  EQU   X'FF'               ALL BITS MASK
CONT     EQU   X'01'               CONTINUATION EXPECTED FLAG
SEP      EQU   X'02'               SEPARATOR WAS DEFINED FLAG
WORKSIZE EQU   *-WORK
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
