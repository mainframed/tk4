         PRINT NOGEN
PAKLPA   CSECT
***********************************************************************
*
*        THIS ROUTINE WILL READ A GTF TRACE TAPE CONTAINING
*        COMPREHENSIVE SVC RECORDS AND REDUCE THE DATA TO
*        1) - TYPE THREE AND FOUR SVC ENTRIES
*        2) - LINK SVC OBJECTS
*        3) - LOAD SVC OBJECTS
*        4) - XCTL SVC OBJECTS
*        5) - ATTACH SVC OBJECTS
*
*        ONCE THE DATA IS REDUCED, REPORTS ARE PROVIDED
*        CONTAINING INFORMATION TO USE IN REBUILDING AN
*        MVS BLDL LIST, POSSIBLE LINK PACK AREA ADDITIONS,
*        AND A SUGGESTED PACK LIST.
*
*        THE PACK LIST PROVIDED IS BOTH PRINTED AND PUNCHED
*        IF A SYSPUNCH DD STATEMENT IS PROVIDED (80-80).
*
*        IN ORDER FOR THE REPORT TO BE OF VALUE, IT IS SUGGESTED
*        THAT THE INPUT TRACE TAPE CONSIST OF THOSE MOST ACTIVE
*        TYPE THREE AND FOUR SVC'S IN YOUR SYSTEM AS WELL AS THE
*        REQUIRED SVC'S (LINK-6, XCTL-7, LOAD-8, AND ATTACH-42).
*
*        AN EXAMPLE GTF PARMLIB ENTRY FOLLOWS:
* TRACE=SVCP
* SVC=(6,7,8,11,13,16,17,19,20,21,22,23,24,25,26,27,29,32,33,34,35)
* SVC=(40,41,42,46,47,51,54,55,57,60,61,64,72,74,76,83,87,91,93,94)
* SVC=(96,97,99,100,101,241,243,249)
*
*        REQUIRED JCL IS AS FOLLOWS:
*        SYSPRINT = REPORT LISTING SYSOUT DATASET
*        SYSPUNCH = OUTPUT DATASET FOR THE CREATED PACK LIST (80/80)
*        SORTIN   = WORK DATASET (ENOUGH DISK SPACE FOR RECORDS)
*        SORTOUT  = WORK DATASET (ENOUGH DISK SPACE FOR RECORDS)
*        LPALIB   = ACTIVE 'SYS1.LPALIB' (SAME SYSTEM AS TRACED)
*        TRACE    = INPUT GTF TRACE TAPE (IF UNLABELED, ADD BLKSIZE)
*
*        ADDITIONALLY, ALL DATASETS/DDNAMES REQUIRED FOR 'SORT'
*        IN YOUR INSTALLATION ARE REQUIRED.
*
*  THE FOLLOWING IS AN EXAMPLE OF THE REQUIRED JCL
*
*  //PAKLPA   EXEC PGM=PAKLPA,REGION=4096K
*  //SYSPRINT DD SYSOUT=A
*  //SYSOUT   DD SYSOUT=A
*  //SYSUDUMP DD SYSOUT=A
*  //*
*  //SYSPUNCH DD DSN=SYS1.PARMLIB(IEAPAK##),DISP=SHR
*  //TRACE    DD DSN=SYS1.GTF.PAK00,DISP=SHR,FREE=CLOSE
*  //LPALIB   DD DSN=SYS1.LPALIB,DISP=SHR
*  //*
*  //SORTLIB  DD DSN=SYS1.SORTLIB,DISP=SHR
*  //SORTIN   DD UNIT=SYSDA,SPACE=(CYL,(40,10))
*  //SORTOUT  DD UNIT=SYSDA,SPACE=(CYL,(40,10))
*  //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,10)
*  //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,10)
*  //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,10)
*  //SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,10)
*  //SORTWK05 DD UNIT=SYSDA,SPACE=(CYL,10)
*  //SORTWK06 DD UNIT=SYSDA,SPACE=(CYL,10)
*
*
***********************************************************************
         EJECT
R0       EQU   0              WORK
R1       EQU   1              WORK
R2       EQU   2              WORK
R3       EQU   3              WORK
R4       EQU   4              WORK
R5       EQU   5              WORK
R6       EQU   6              WORK
R7       EQU   7              WORK
R8       EQU   8              SUBROUTINE LINK REG
R9       EQU   9              LPA MODULE COUNT
R10      EQU   10             GOTTEN STORAGE AREA
R11      EQU   11             BASE REG 2
R12      EQU   12             BASE REG 1
R13      EQU   13             SAVE AREA
R14      EQU   14             OS LINKAGE/WORK
R15      EQU   15             OS LINKAGE/WORK
         SAVE  (14,12),,*     SAVE CALLERS REGISTERS
         LR    R12,R15        GET BASE REG 1
         USING PAKLPA,R12     INFORM ASSEMBLER
         USING PAKLPA+4096,R11  SECOND BASE REG
         L     R11,=A(PAKLPA+4096)  LOAD SECOND BASE
         LR    R10,R13        COPY SAVE AREA ADDR
         LA    R13,SAVEAREA   OUR SAVE AREA
         ST    R13,8(R10)     FORWARD CHAIN
         ST    R10,4(R13)     REVERSE CHAIN
         EJECT
*
*        *************  R E D U C E  *************
*
*        READ THE GTF TRACE INPUT RECORDS IGNORING ALL
*        BUT TYPE 3/4 SVC-ENTRIES, LINK, LOAD, XCTL AND ATTACH.
*        WRITE A RECORD FOR EACH ENTRY ON THE SORTIN FILE
*
         OPEN  (TRACE,(INPUT),SORTIN,(OUTPUT),SYSPRINT,(OUTPUT))
         L     R2,16          GET CVT POINTER
         L     R2,200(R2)     GET SECONDARY CVT POINTER
         L     R2,132(R2)     GET POINTER TO SVC TABLE
         GET   TRACE          GET FIRST TRACE RECORD (CONTROL REC)
*                             TO CHECK TRACE OPTIONS
         TM    18(R1),X'60'   CHECK FOR SYS AND/OR SYSP
         BNZ   CHKTIME        AT LEAST ONE, LET'S GO
         TM    19(R1),X'C0'   SVC/SVCP SPECIFIED?
         BZ    NODATA         NO, ALL DONE
CHKTIME  TM    21(R1),X'01'   TIMESTAMP IN RECORDS?
         BZ    GETGTF         NO, ALL'S OK
         OI    SWITCH,TIMESTMP  SET TIMESTAMP OPTION
GETGTF   GET   TRACE          GET NEXT TRACE RECORD
         CLI   5(R1),X'01'    CHECK FID FOR SVC ENTRY
         BNE   GETGTF         NO, GET NEXT RECORD
         TM    SWITCH,TIMESTMP  TIMESTAMPS IN RECORDS?
         BZ    STANDARD       NO, STANDARD RECORDS
         A     R1,=F'8'       GET RID OF THEM
STANDARD MVC   SVCTYPE(1),25(R1)  MOVE SVC NUMBER TO RECORD
         OI    SVCTYPE,X'F0'  MAKE IT PRINTABLE
         MVC   MODNAME(8),54(R1)  MOVE MOD NAME FOR LINK/LOAD/XCTL
         CLI   25(R1),X'06'   CHECK FOR LINK SVC
         BE    GENDATA        YES, PROCESS IT
         CLI   25(R1),X'07'   CHECK FOR XCTL SVC
         BE    GENDATA        YES, PROCESS IT
         CLI   25(R1),X'08'   CHECK FOR LOAD SVC
         BE    GENDATA        YES, PROCESS IT
         MVI   SVCTYPE,C'A'   INDICATE TYPE OF ENTRY
         MVC   MODNAME(8),83(R1)  MOVE MODULE NAME FOR ATTACH
         CLI   25(R1),X'2A'   CHECK FOR ATTACH SVC
         BE    GENDATA        YES, PROCESS IT
*
*        CHECK SVC TABLE FOR SVC TYPE AND FOR TYPE 3/4 SVC'S
*        CONVERT SVC NUMBER TO REAL MODULE NAME SO WE DONT
*        MISS TYPE THREE AND FIRST LOAD OF TYPE FOUR SVC'S.
*        NOTE THAT THE SVCTABLE SHOULD BE CHECKED TO INSURE
*        THAT THE SVC IS NON-RESIDENT (TYPE 1 OR 2).
*
         SR    R15,R15        CLEAR FOR IC
         IC    R15,25(R1)     PICK UP SVC NUMBER
         LR    R3,R15         COPY TO WORK REG
         SLL   R3,3           MULTIPLY BY EIGHT
         AR    R3,R2          ADD SVCTABLE ENTRY POINT
         TM    4(R3),X'C0'    CHECK IF TYPE 3 OR 4 SVC
         BNO   GETGTF         NOT, SO SKIP IT
         CVD   R15,WKAREA     CONVERT TO DECIMAL
         UNPK  MODNAME+4(4),WKAREA  UNPACK TO FORM EBCIDIC SVC NO
         MVC   MODNAME(4),=C'IGC0'  ADD PREFIX TO NUMBER
         MVI   SVCTYPE,C'S'   INDICATE SVC ENTRY
GENDATA  CLI   MODNAME+1,C'A'  IS IT A NULL NAME?
         BL    GETGTF         YES, IGNORE ENTRY
         PUT   SORTIN,SORTBUF  WRITE IT OUT
         OI    SWITCH,GODATA  INDICATE DATA AVAILABLE FOR SORT
         B     GETGTF         GET NEXT RECORD
TRACEEND CLOSE (TRACE,,SORTIN)  TRACE EOF CLOSE FILES
         FREEPOOL  TRACE      FREE BUFFER POOL FOR TRACE DCB
         TM    SWITCH,GODATA  ANY RECORDS FOUND?
         BO    SORT1          YES, CONTINUE
NODATA   WTO   'PAKLPA01 - NO RECORDS FOUND ON TRACE INPUT',ROUTCDE=11
         B     EXIT           NO RECORDS, RETURN TO CALLER
*
*        SORT THE JUST BUILT SORTIN FILE VIA 'SORT' LINK
*
SORT1    LA    R1,SORT1PRM    SET PARM POINTER FOR SORT
         LINK  EP=SORT        LINK TO SORT
         LTR   R15,R15        CHECK SORT RETURN CODE
         BZ    SORT1OK        ZERO RETURN, CONTINUE
         WTO   'PAKLPA02 - NON-ZERO SORT RETURN CODE',ROUTCDE=11
         B     EXIT           RETURN TO CALLER
*
*        READ RECORDS JUST SORTED (SORTOUT) AND COUNT DUPLICATES
*        AT THE SAME TIME, CREATE A NEW SORTIN FILE FOR SORT 2
*
SORT1OK  SDR   R0,R0          CLEAR FLTPT R0 (MODULE NAME)
         OPEN  (SORTOUT,,LPALIB,,SORTIN,(OUTPUT))
         ZAP   PAGECNT,=P'0'  CLEAR PAGE COUNT
         BAL   R8,SETPAGE     SET PAGE COUNT
         OI    PHASE,RPT1     INDICATE REPORT 1 START
READREC  SR    R10,R10        CLEAR COUNT REG
         LDR   R2,R0          SAVE NEW MODULE ID IN FLTPT R2)
NEXTREC  GET   SORTOUT,SORTBUF  READ SORTED RECORD
         LA    R10,1(R10)     BUMP MODULE COUNT
         LD    R0,MODNAME     GET MODULE NAME
         CDR   R0,R2          COMPARE NAMES (FLTPT REGS)
         BE    NEXTREC        EQUAL, GET NEXT RECORD
         TM    SWITCH,FIRST   FIRST TIME THROUGH
         BO    REPORT1        NO, PROCESS THIS MODULE NAME
         OI    SWITCH,FIRST   SET FIRST TIME SWITCH
         B     READREC        GET NEXT RECORD
RPT1END  OI    SWITCH,LAST    SET LAST TIME FLAG
*
*        *************  R E P O R T  *************
*
*        BUILD A RECORD CONTAINING MODULE NAME (W/MAJOR IF ALIAS)
*        AND COUNT OF OCCURANCES.
*        A BLDL IS DONE FOR LPALIB OR LINKLIB TO IDENTIFY IT'S
*        ORIGIN.
*
REPORT1  STD   R2,MODNAME     STORE MODULE NAME IN OUTPUT AREA
         ST    R10,COUNT      SAVE FETCH COUNT FOR LPA ROUTINE
         CVD   R10,WKAREA     CONVERT COUNT TO DECIMAL
         MVC   FETCHES,FMASK  MOVE IN EDIT PATTERN
         ED    FETCHES,WKAREA  EDIT THE OUTPUT DATA
         MVC   BLDLNAME,MODNAME  MOVE TO BLDL LIST
*
*        LOCATE MODULE VIA BLDL OF LPALIB DDNAME
*
         BLDL  LPALIB,BLDLPTR  LOOK FOR AN ENTRY IN LPALIB
         B     LPATST(R15)    BRANCH ON RETCODE
LPATST   B     ITSLPA         FOUND, BRANCH
         B     TRYLINK        NOTFOUND, TRY LINKLIB
         MVC   PERROR,=CL30'BLDL ERROR FOR LPALIB'
         B     OUT            WRITE OUT MESSAGE
ITSLPA   MVC   LIBRARY(7),=C'LPA    '  MOVE SOURCE TO OUTPUT BUFFER
         MVC   CONCAT,BLANKS  REMOVE POSSIBLE CONCATENATION NO.
         B     RENTEST        CHECK IF RE-ENTRANT
TRYLINK  BLDL  R0,BLDLPTR     NOT LPALIB, TRY LINK
*
*        LOCATE MODULE VIA BLDL THROUGH LINKLIST (NO DCB)
*        IF FOUND, INDICATE THE CONCATINATION
*
         B     LNKTST(R15)    BRANCH ON RETCODE
LNKTST   B     ITSLINK        FOUND, BRANCH
         B     NOTLNK         NOT FOUND, MUST BE USER LIB
         MVC   PERROR,=CL30'BLDL ERROR FOR LINKLIB'
         B     OUT            WRITE OUT MESSAGE
ITSLINK  MVC   LIBRARY,=C'LINK   '  INDICATE ORIGIN
         XR    R1,R1          CLEAR FOR IC
         CLI   BLDLNAME+11,X'00'  WAS IT LINKLIB ITSELF?
         BE    RENTEST        YES, IGNORE CONCAT NUMBER CONVERT
         IC    R1,BLDLNAME+11  INSERT CONCATENATION NO.
         CVD   R1,WKAREA      CONVERT TO DECIMAL
         UNPK  CONCAT,WKAREA  UNPACK SAME
         OI    CONCAT+2,X'F0'  OR SIGN ZONE
         MVI   CONCAT,C'-'    INSERT DASH
         B     RENTEST        NOW SEE IF IT'S RE-ENTRANT
*
*        MODULE NOT FOUND IN LPA/LINK LIBS, INDICATE USER
*        JOBLIB/STEPLIB AND CLEAR ATTRIBUTE FIELDS
*
NOTLNK   MVC   LIBRARY(7),=C'USER   '  INDICATE USER JOB/STEP LIB
         MVC   ATTRIB,BLANKS  CLEAR UNKNOWNS
         MVC   MODSIZE,BLANKS  DON'T KNOW MODULE SIZE
         B     OUT            WRITE OUT RECORD
*
*        TEST MODULE ATTRIBUTES AND INDICATE SAME IN OUTPUT
*
RENTEST  MVC   ATTRIB,=CL6' RENT'
         TM    BLDLNAME+22,X'80'  TEST FOR RE-ENTRENT
         BO    SETSIZE        YES, BRANCH
         MVC   ATTRIB,=C'NORENT'  NO, SO FLAG SAME
*
*        FOR NON-USER MODULES, DEVELOP MODULE SIZE AND
*        INCLUDE IT IN OUTPUT RECORD
*
SETSIZE  MVC   SIZE,BLDLNAME+25  GET SIZE OF MODULE
         MVC   WORK+2(2),BLDLNAME+25  AGAIN FOR CONVERT
         L     R1,WORK        LOAD FOR CONVERSION
         CVD   R1,WKAREA      CONVERT SAME
         MVC   MODSIZE,SMASK  MOVE EDIT MASK
         ED    MODSIZE,WKAREA+4  EDIT IT
         MVC   PERROR,BLANKS  CLEAR ERROR MSG BUF
         TM    BLDLNAME+13,X'80'  TEST FOR ALIAS NAME
         BNO   OUT            NO, WRITE IT OUT
         TM    BLDLNAME+22,X'C0'  TEST FOR RENT OR REUSE
         BZ    OUT            NO, SKIP (NAME NOT THERE)
         TM    BLDLNAME+22,X'04'  TEST FOR SCATTER LOAD
         BO    SCATTER        YES, DIFFERENT FORMAT ENTRY
         MVC   MAJOR,BLDLNAME+38  MOVE MODULE NAME TO BUFFER
         B     MAJCHK         CHECK NAME FOR UNPRINTABLE CHAR
SCATTER  MVC   MAJOR,BLDLNAME+46  MOVE MODULE NAME TO BUFFER
MAJCHK   CLI   MAJOR+7,X'C0'  SPECIAL CHARACTER?
         BNE   OUT            NO, ALL DONE
         MVI   MAJOR+7,C'+'   MODIFY TO MAKE PRINTABLE
OUT      CLI   MODNAME+7,X'C0'  SPECIAL CHARACTER?
         BNE   OUTPUT         NO, CONTINUE
         MVI   MODNAME+7,C'+'  YES, FLAG IT AS SPECIAL
OUTPUT   PUT   SORTIN,SORTBUF  WRITE OUT BUFFER FOR LATER SORT
         BAL   R8,REPORT      WRITE REPORT BY NAME LISTING
         TM    SWITCH,LAST    HAS EOF BEEN REACHED?
         BZ    READREC        NO, CONTINUE WITH NEXT RECORD
*
*        END OF FILE ON SORTOUT (INPUT), NOW SORT NEWLY
*        BUILT SORTIN FILE TO PROVIDE REPORT BY FREQUENCY
*
         CLOSE (SORTOUT,,SORTIN,,LPALIB)  CLOSE FILES 1ST REPORT DONE
         LA    R1,SORT2PRM    SET SORT PARM POINTER
         LINK  EP=SORT        SORT BY MODULE FREQUENCY NOW
         LTR   R15,R15        CHECK SORT RETURN CODE
         BZ    SORT2OK        ZERO, CONTINUE
         WTO   'PAKLPA03 - NON-ZERO SORT RETURN CODE',ROUTCDE=11
         B     EXIT           RETURN TO CALLER
*
*        READ SORTOUT AND GENERATE MODULE REPORT BY FREQUENCY
*
SORT2OK  OPEN  (SORTOUT)      READ SORTOUT TO PROVIDE FREQ LIST
         MVC   HEADER1(110),HEAD2  MODIFY HEADER DATA
         ZAP   PAGECNT,=P'0'  CLEAR PAGE COUNT
         BAL   R8,SETPAGE     RESET PAGE COUNT
         OI    PHASE,RPT2     INDICATE REPORT 2 ACTIVE
RPT2GET  GET   SORTOUT,SORTBUF  GET SORTED RECORD
         BAL   R8,REPORT      PROVIDE REPORT BY FREQUENCY
         B     RPT2GET        GET NEXT RECORD
*
*        SECOND REPORT DONE, NOW SORT SAME DATA BY NAME WITHIN
*        ATTRIBUTES TO PROVIDE LPA/BLDL LIST INFORMATION
*
RPT2END  CLOSE (SORTOUT)      CLOSE SORTOUT (REPORT DONE)
         LA    R1,SORT3PRM    SET PARM POINTER FOR SORT
         LINK  EP=SORT        LINK TO SORT
         LTR   R15,R15        CHECK SORT RETURN CODE
         BZ    SORT3OK        ZERO RETURN, CONTINUE
         WTO   'PAKLPA04 - NON-ZERO SORT RETURN CODE',ROUTCDE=11
         B     EXIT           RETURN TO CALLER
SORT3OK  OPEN  (SORTOUT,(INPUT),SORTIN,(OUTPUT))  OPEN FOR RPT 3/4
         MVC   HEADER1(110),HEAD3  MODIFY HEADER DATA
         ZAP   PAGECNT,=P'0'  CLEAR PAGE NUMBER
         BAL   R8,SETPAGE     RE-INIT PAGE NUMBER
         OI    PHASE,RPT4     INDICATE REPORT 3/4 ACTIVE
         SR    R9,R9          CLEAR LPA COUNT REGISTER
         B     RPT3GET        GET 1ST RECORD
RPT3NEXT CLC   LIBRARY(3),=C'LPA'  IS IT LPA MODULE?
         BNE   RPT3GET        NO, SKIP FOR SORTIN
         CLI   MAJOR,C' '     IS THIS AN ALIAS ENTRY?
         BE    RPT3PUT        NO, PUT AS IS
         MVC   MODNAME,MAJOR  USE MAJOR AS MODNAME
         MVC   MAJOR,BLANKS   CLEAR MAJOR FIELD
RPT3PUT  PUT   SORTIN,SORTBUF  BUILD LPA MODULE FILE
         LA    R9,1(R9)       BUMP LPA MODULE COUNT
RPT3GET  GET   SORTOUT,SORTBUF  GET SORTOUT RECORD
         CLC   LIBRARY(4),=C'LINK'  LINKLIB OR LINK LIST MEMBER?
         BNE   RPT3NEXT       NO, IGNORE IT THEN
         CLI   ATTRIB+1,C'R'  IS IT RE-ENTRANT?
         BNE   RPT3END        NO, POSSIBLE BLDL LIST CANDIDATE
         BAL   R8,REPORT      GENERATE LIST FOR LPALIB
         B     RPT3NEXT       GET NEXT RECORD
RPT3END  MVC   HEADER1(110),HEAD4  MODIFY HEADER DATA
         ZAP   PAGECNT,=P'0'  CLEAR PAGE NUMBER
         BAL   R8,SETPAGE     RE-INIT PAGE NUMBER
         B     RPT4CHK        CHECK PREVIOUSLY GOTTEN RECORD
RPT4NEXT CLC   LIBRARY(3),=C'LPA'  IS IT LPA MODULE?
         BNE   RPT4GET        NO, SKIP FOR SORTIN
         CLI   MAJOR,C' '     IS THIS AN ALIAS ENTRY?
         BE    RPT4PUT        NO, PUT AS IS
         MVC   MODNAME,MAJOR  USE MAJOR AS MODNAME
         MVC   MAJOR,BLANKS   CLEAR MAJOR FIELD
RPT4PUT  PUT   SORTIN,SORTBUF  BUILD LPA MODULE FILE
         LA    R9,1(R9)       BUMP LPA MODULE COUNT
RPT4GET  GET   SORTOUT,SORTBUF  GET SORTOUT RECORD
RPT4CHK  CLC   LIBRARY(4),=C'LINK'  STILL IN LINK LIB/LNKLST?
         BNE   RPT4END        NO, THATS ALL THEN
         CLI   ATTRIB,C'N'    IS IT NON-RENT?
         BNE   RPT4END        NO, END OF REPORT 4 THEN
         BAL   R8,REPORT      GENERATE LIST FOR BLDL LIST
         B     RPT4NEXT       GET NEXT RECORD
RPT4END  CLOSE (SORTOUT,,SORTIN)  CLOSE FOR NEXT PHASE
         FREEPOOL  SORTIN     GET RID OF SORTIN BUFFERS
*
*        SORT THE JUST BUILT SORTIN FILE VIA 'SORT' LINK
*
SORT4    LA    R1,SORT4PRM    SET PARM POINTER FOR SORT
         LINK  EP=SORT        LINK TO SORT
         LTR   R15,R15        CHECK SORT RETURN CODE
         BZ    SORT4OK        ZERO RETURN, CONTINUE
         WTO   'PAKLPA02 - NON-ZERO SORT RETURN CODE',ROUTCDE=11
         B     EXIT           RETURN TO CALLER
SORT4OK  OPEN  (SORTOUT,(INPUT))  OPEN FILE TO BUILD LPA TABLE
         MVC   HEADER1(110),HEAD5  MODIFY HEADER LINE
         MVC   HEADER2+1(110),BLANKS  CLEAR SECOND HEADER
         ZAP   PAGECNT,=P'0'  CLEAR PAGE COUNT
         BAL   R8,SETPAGE     RESET PAGE COUNT
         OI    PHASE,RPT5     INDICATE PHASE
         LA    R0,1(R9)       BUMP FOR SORT FENCE
         SLL   R0,4           MULTIPLY BY 16 BYTES
         ST    R0,STGSIZE     SAVE FOR LATER FREEMAIN
         GETMAIN R,LV=(0)     GETMAIN FOR WORK AREA
         LR    R10,R1         SAVE FOR FREEMAIN
         LR    R3,R10         SET WORKING POINTER
         LR    R2,R9          GET COUNT FOR BCT LOOP CONTROL
LPAPRIME GET   SORTOUT,SORTBUF  GET LPA MODULE RECORD
*        BAL   R8,REPORT ******************************
         MVC   0(8,R3),MODNAME  MOVE MODULE NAME TO WORK
         MVC   8(4,R3),COUNT  MOVE FETCH COUNT TO WORK AREA
         MVC   12(2,R3),SIZE  MOVE SIZE TO WORK
         LA    R3,16(R3)      BUMP TO NEXT POSITION
         BCT   R2,LPAPRIME    GET NEXT RECORD
         CLOSE (SORTOUT)      ALL DONE WITH SORTOUT
         FREEPOOL  SORTOUT    SINCE THROUGH, GET RID OF BUFFERS
         MVC   0(8,R3),=8X'FF'  ADD FENCE TO END OF TABLE
         XC    8(8,R3),8(R3)  INSURE ZERO COUNT FIELD
SRT1CORE NI    SWITCH,X'FF'-SORTFLAG  RE-SET SORT FLAG
         LR    R1,R10         COPY TABLE START ADDR
         LR    R2,R9          COPY MODULE COUNT
SRT1NEXT CLC   0(8,R1),16(R1)  COMPARE MODULE NAMES
         BNE   SRT1CHK        NOT EQUAL - SORT
         CLI   0(R1),X'FF'    NULL ENTRY?
         BE    SRT1BUMP       YES, PROPAGATE THEM
         MVC   16(8,R1),=8X'FF'  CLEAR DUPLICATE NAME
         L     R15,24(R1)     PICK UP MODULE COUNT
         A     R15,8(R1)      ADD MODULE COUNTS TOGETHER
         ST    R15,8(R1)      STORE IN ORIGINAL
         XC    24(4,R1),24(R1)  CLEAR COUNT FOR NEXT SORT
         OI    SWITCH,SORTFLAG  INDICATE OUT OF ORDER
         B     SRT1BUMP       BUMP TO NEXT MODULE
SRT1CHK  BNH   SRT1BUMP       MODULES IN ORDER
         OI    SWITCH,SORTFLAG  INDICATE OUT OF ORDER
         XC    0(16,R1),16(R1)  *
         XC    16(16,R1),0(R1)  *    SWAP MODULE DATA
         XC    0(16,R1),16(R1)  *
SRT1BUMP LA    R1,16(R1)      INCR TO NEXT MODULES
         BCT   R2,SRT1NEXT    CHECK NEXT PAIR
         TM    SWITCH,SORTFLAG  WERE ALL MODULES IN ORDER ?
         BO    SRT1CORE       NO - SORT AGAIN !!
SRT2CORE NI    SWITCH,X'FF'-SORTFLAG  RE-SET SORT FLAG
         LR    R1,R10         COPY TABLE START ADDR
         LR    R2,R9          COPY MODULE COUNT
SRT2NEXT CLC   8(4,R1),24(R1)  COMPARE MODULE COUNTS
         BNL   SRT2BUMP       COUNTS IN ORDER?
         OI    SWITCH,SORTFLAG  INDICATE OUT OF ORDER
         XC    0(16,R1),16(R1)  *
         XC    16(16,R1),0(R1)  *    SWAP MODULE DATA
         XC    0(16,R1),16(R1)  *
SRT2BUMP LA    R1,16(R1)      INCR TO NEXT MODULES
         BCT   R2,SRT2NEXT    CHECK NEXT PAIR
         TM    SWITCH,SORTFLAG  WERE ALL COUNTS IN ORDER ?
         BO    SRT2CORE       NO - SORT AGAIN !!
         LA    R6,16          SET LENGTH FOR BXLE
         L     R7,STGSIZE     GET SIZE OF STG GOTTEN
         AR    R7,R10         NOW HAVE END OF GOTTEN STORAGE
         LR    R1,R10         COPY START OF GOTTEN STORAGE
         SR    R9,R9          CLEAR COUNT REG
FINDFOXS CLI   0(R1),X'FF'    FIND FENCE (X'FF'S)
         BE    FOUNDFOX       FOUND, FINISHED
         XC    8(4,R1),8(R1)  CLEAR COUNT FIELD FOR AFFINITIES
         LA    R9,1(R9)       ADD ONE TO REAL MODULE COUNT
         BXLE  R1,R6,FINDFOXS  NOT FOUND, TRY AGAIN
FOUNDFOX LR    R7,R1          COPY FENCE LOCATION TO BXLE COMPARAND
         S     R7,=F'16'      DECREMENT TO LAST ENTRY START
         LR    R2,R10         COPY TABLE START
         LA    R1,1           INITIALIZE AFFINITY TAGS
OUTLOOP  CLC   8(4,R2),=F'0'  HAS THIS ENTRY BEEN PROCESSED?
         BNE   OUTBXLE        YES, SKIP IT THEN
         LH    R0,12(R2)      PICK UP MODULE SIZE
         N     R0,HALFMASK    CLEAR HIGH ORDER PROPAGATION
         CH    R0,=H'4080'    REASONABLE SIZE?
         BH    SETAFF         HIGH, SET ITS AFFINITY TAG
         LA    R3,16(R2)      BUMP TO NEXT ENTRY
INLOOP   CLC   8(4,R3),=F'0'  IS THERE AN AFFINTIY TAG?
         BNE   INBXLE         YES, IGNORE THIS ENTRY
         LH    R15,12(R3)     PICK UP MODULE SIZE
         N     R15,HALFMASK   CLEAR HIGH ORDER JUNK
         AR    R15,R0         COMBINE WITH TOTAL SIZE
         C     R15,=F'4080'   REASONABLE SIZE?
         BL    INSET          LOW, SET IT'S AFFINITY
         C     R15,=F'4096'   IS IT A GOOD PAGE SIZE?
         BH    INBXLE         HIGH, CHECK NEXT ONE
         ST    R1,8(R3)       SET AFFINITY TAG
         LR    R0,R15         COPY TOTAL SIZE OF PAGE
         B     SETAFF         BRANCH, PAGE COMPLETE
INSET    ST    R1,8(R3)       SET AFFINITY TAG
         LR    R0,R15         COPY TOTAL SIZE OF PAGE
INBXLE   BXLE  R3,R6,INLOOP   BUMP TO NEXT ENTRY
SETAFF   ST    R1,8(R2)       STORE IT'S UNIQUE TAG
         LA    R1,1(R1)       BUMP TAG NUMBER
OUTBXLE  BXLE  R2,R6,OUTLOOP  CHECK NEXT ENTRY
********** DONE, DO CORE SORT ON AFFINITY TAGS *******
SRT3CORE NI    SWITCH,X'FF'-SORTFLAG  RE-SET SORT FLAG
         LR    R1,R10         COPY TABLE START ADDR
         LR    R2,R9          COPY MODULE COUNT
         BCTR  R2,R0          DECREMENT COUNT FOR FENCE
SRT3NEXT CLC   8(4,R1),24(R1)  COMPARE AFFINITY TAGS
         BNH   SRT3BUMP       ARE TAGS IN ORDER?
         OI    SWITCH,SORTFLAG  INDICATE OUT OF ORDER
         XC    0(16,R1),16(R1)  *
         XC    16(16,R1),0(R1)  *    SWAP MODULE DATA
         XC    0(16,R1),16(R1)  *
SRT3BUMP LA    R1,16(R1)      INCR TO NEXT MODULES
         BCT   R2,SRT3NEXT    CHECK NEXT PAIR
         TM    SWITCH,SORTFLAG  WERE ALL TAGS IN ORDER ?
         BO    SRT3CORE       NO - SORT AGAIN !!
********** DONE, GENERATE PAK LIST BASED UPON AFFINITY TAGS ******
         OPEN  (SYSPUNCH,(OUTPUT))  OPEN SYSPUNCH FILE
         LR    R2,R10         RESET TO START OF TABLE
         LA    R5,CARD+1      SET CARD POINTER
         MVI   CARD,C'('      INITIALIZE CARD 1ST TIME
         B     PAKMOVE        MOVE 1ST NAME AS IS
PAKNEXT  L     R1,8(R2)       GET AFFINITY TAG
         C     R1,PREVTAG     SAME AS LAST TAG?
         BNE   PAKPAGE        NO, CLOSE OUT PREVIOUS PAGE
         MVI   0(R5),C','     ADD REQUIRED COMMA
         LA    R5,1(R5)       BUMP TO NEXT CHARACTER
         C     R5,=A(CARD+60)  IS THERE ROOM ON THIS LINE?
         BL    PAKMOVE        YES, MOVE NAME TO RECORD
         BAL   R8,REINIT      WRITE RECORD AND REINITIALIZE
PAKMOVE  MVC   0(8,R5),0(R2)  MOVE MODULE NAME TO CARD
         LA    R15,8          SET BCT LOOP CONTROL
PAKLOOP  CLI   0(R5),C' '     END OF NAME?
         BE    PAKBXLE        GET NEXT ENTRY
         LA    R5,1(R5)       BUMP TO NEXT CHARACTER
         BCT   R15,PAKLOOP    BRANCH BACK IF MORE
         B     PAKBXLE        GET NEXT ENTRY
PAKPAGE  MVC   0(2,R5),=C'),'  CLOSE OUT PREVIOUS PAGE
         LA    R5,2(R5)       BUMP TO NEXT POSITION
         ST    R1,PREVTAG     SET NEW PREVIOUS TAG
         C     R5,=A(CARD+60)  IS THERE ROOM ON THIS LINE?
         BL    PAKNEW         YES, CONTINUE WITH NEW PAGE
         BAL   R8,REINIT      WRITE RECORD AND REINITIALIZE
PAKNEW   MVI   0(R5),C'('     START NEW PAGE
         LA    R5,1(R5)       BUMP TO NEXT POSITION
         B     PAKMOVE        MOVE MODULE NAME TO CARD
PAKBXLE  BXLE  R2,R6,PAKNEXT  BUMP TO NEXT ENTRY
         C     R5,=A(CARD+1)  CHECK IF ANY ON CURRENT CARD
         BNH   RPT5END        NONE, ALL DONE
         MVI   0(R5),C')'     CLOSE OUT LAST PAGE
         BAL   R8,REINIT      WRITE LAST RECORD
RPT5END  CLOSE (SYSPRINT,,SYSPUNCH)
         L     R0,STGSIZE     GET SIZE OF GOTTEN STORAGE
         FREEMAIN  R,LV=(0),A=(10)  FREE GOTTEN STORAGE
EXIT     L     R13,4(R13)     GET PREVIOUS SAVE POINTER
         RETURN  (14,12),,RC=0
REINIT   PUT   SYSPRINT,CARD-1  PROVIDE HARDCOPY
         TM    SYSPUNCH+48,X'10'  WAS SYSPUNCH PROVIDED?
         BZ    NOPUNCH        NO, JUST SKIP PUNCH RECORD
         LA    R15,71         SET BCT LOOP CONTROL
         LA    R1,CARD        SET POINTER TO PUNCH BUFFER
PUNLOOP  CLI   0(R1),C'+'     IS THIS SPECIAL CHARACTER?
         BNE   PUNUPDT        NO, UPDATE TO NEXT CHARACTER
         MVI   0(R1),X'C0'    SUBSTITUTE REAL CHARACTER
PUNUPDT  LA    R1,1(R1)       BUMP TO NEXT CHARACTER
         BCT   R15,PUNLOOP    CHEACK EACH CHARACTER
         PUT   SYSPUNCH,CARD  GENERATE PUNCH RECORD
NOPUNCH  MVC   CARD,BLANKS    CLEAR PUNCH BUFFER
         LA    R5,CARD        RERINITIALIZE WORKING POINTER
         AP    LINECNT,=P'1'  BUMP LINE COUNT
         CP    LINECNT,=P'55'  CHECK FOR OVERFLOW
         BLR   R8             RETURN IF NOT FULL PAGE
         B     SETPAGE        FULL PAGE EJECT
REPORT   MVC   PNAME,MODNAME  BUILD
         MVC   PNUM,FETCHES   PRINT
         MVC   PLIB,LIBRARY   LINE
         MVC   PTYPE,ATTRIB   REPORT
         MVC   PSIZE,MODSIZE  ONE
         MVC   PMAJOR,MAJOR   AND TWO
         PUT   SYSPRINT,PRTBUF1  GENERATE REPORT
         MVI   PRTBUF1,C' '   CLEAR PRINT
         MVC   PRTBUF1+1(132),PRTBUF1  BUFFER
         AP    LINECNT,=P'1'  BUMP LINE COUNT
         CP    LINECNT,=P'55'  CHECK FOR OVERFLOW
         BLR   R8             RETURN IF NOT FULL PAGE
SETPAGE  AP    PAGECNT,=P'1'  INCREMENT THE PAGE COUNT
         MVC   PAGENUM(4),PMASK  PUT IT IN THE OUTPUT BUFFER
         ED    PAGENUM(4),PAGECNT  MAKE IT LOOK RIGHT
         ZAP   LINECNT,=P'0'  CLEAR LINE COUNT
         PUT   SYSPRINT,HEADER1  PRINT HEADER ONE
         PUT   SYSPRINT,HEADER2  PRINT HEADER TWO
         MVI   PRTBUF1,C'0'   DOUBLE SPACE FIRST DATA LINE
         BR    R8             RETURN TO CALLER
EODAD    TM    PHASE,RPT5     END OF REPORT 5?
         BO    RPT5END        YES, BRANCH
         TM    PHASE,RPT4     END OF REPORT3/4?
         BO    RPT4END        YES, BRANCH
         TM    PHASE,RPT2     END OF REPORT2?
         BO    RPT2END        YES, BRANCH
         TM    PHASE,RPT1     END OF REPORT1?
         BO    RPT1END        YES, BRANCH
         EJECT
*        PARM LIST FOR SORT ONE
         DS    0D
SORT1PRM DC    X'80',AL3(PARM1)
         CNOP  2,4            ALIGNMENT
PARM1    DC    AL2(EPARM1-PARM1-2)
         DC    A(SSORT1)      SORT FIELD START
         DC    A(ESORT1)      SORT END ADDRESS
         DC    A(SREC1)       START OF RECORD STATEMENT
         DC    A(EREC1)       END OF RECORD STATEMENT
         DC    F'0'           E15 EXIT NOT USED
         DC    F'0'           E35 EXIT NOT USED
         DC    C'SORT'        ALTERNATE DDNAME
         DC    X'00',XL3'30000'
         DC    X'FF00',C'AP'
EPARM1   EQU   *
SSORT1   DC    C' SORT FIELDS=(1,8,BI,A),SIZE=E'
         DC    C'100000'      ESTIMATED NUMBER OF RECORDS
ESORT1   DC    C' '
SREC1    DC    C' RECORD TYPE=F,LENGTH=60'
EREC1    DC    C' '
         SPACE 3
*        PARM LIST FOR SORT TWO
         DS    0D
SORT2PRM DC    X'80',AL3(PARM2)
         CNOP  2,4            ALIGNMENT
PARM2    DC    AL2(EPARM2-PARM2-2)
         DC    A(SSORT2)
         DC    A(ESORT2)
         DC    A(SREC2)
         DC    A(EREC2)
         DC    F'0'
         DC    F'0'
         DC    C'SORT'
         DC    X'00',XL3'20000'
         DC    X'FF00',C'AP'
EPARM2   EQU   *
SSORT2   DC    C' SORT FIELDS=(10,16,BI,D,1,8,BI,A),SIZE=E'
         DC    C'100000'
ESORT2   DC    C' '
SREC2    DC    C' RECORD TYPE=F,LENGTH=60'
EREC2    DC    C' '
         SPACE 3
*        PARM LIST FOR SORT THREE
         DS    0D
SORT3PRM DC    X'80',AL3(PARM3)
         CNOP  2,4            ALIGNMENT
PARM3    DC    AL2(EPARM3-PARM3-2)
         DC    A(SSORT3)
         DC    A(ESORT3)
         DC    A(SREC3)
         DC    A(EREC3)
         DC    F'0'
         DC    F'0'
         DC    C'SORT'
         DC    X'00',XL3'30000'
         DC    X'FF00',C'AP'
EPARM3   EQU   *
SSORT3   DC    C' SORT FIELDS=(26,4,BI,D,33,2,BI,A,1,8,BI,A),SIZE=E'
         DC    C'100000'
ESORT3   DC    C' '
SREC3    DC    C' RECORD TYPE=F,LENGTH=60'
EREC3    DC    C' '
         SPACE 3
*        PARM LIST FOR SORT FOUR
         DS    0D
SORT4PRM DC    X'80',AL3(PARM4)
         CNOP  2,4            ALIGNMENT
PARM4    DC    AL2(EPARM4-PARM4-2)
         DC    A(SSORT4)
         DC    A(ESORT4)
         DC    A(SREC4)
         DC    A(EREC4)
         DC    F'0'
         DC    F'0'
         DC    C'SORT'
         DC    X'00',XL3'30000'
         DC    X'FF00',C'AP'
EPARM4   EQU   *
SSORT4   DC    C' SORT FIELDS=(10,16,BI,D),SIZE=E'
         DC    C'100000'
ESORT4   DC    C' '
SREC4    DC    C' RECORD TYPE=F,LENGTH=60'
EREC4    DC    C' '
         EJECT
*        CONSTANT AREA
*
         LTORG
WKAREA   DC    D'0'
SAVEAREA DS    18F
STGSIZE  DC    F'0'           SIZE OF GOTTEN STORAGE
HALFMASK DC    X'0000FFFF'    HALFWORD MASK (FULLWORD BOUNDARY)
PREVTAG  DC    F'1'           PREVIOUS TAG SAVE AREA
BLANKS   DC    CL121' '
CARD     DC    CL121' '       SYSPUNCH BUFFER
HEADER1  DC    CL110'1 ---------  M O D U L E   L I S T I N G   B Y   N.
               A M E   ------------------'
         DC    C' PAGE '
PAGENUM  DC    CL5' '         PAGE NUMBER
         DC    CL22' '        PADDING
HEADER2  DC    CL121'0MODULE/ALIAS       FETCHES    LIBRARY    ATTRIB  *
               SIZE        MAJOR NAME'
HEAD2    DC    CL110'1 ------  M O D U L E   L I S T I N G   B Y   F R .
               E Q U E N C Y  ------------'
HEAD3    DC    CL110'1 -----------  P O T E N T I A L   L P A   A D D I.
               T I O N S  ---------------'
HEAD4    DC    CL110'1 ----  P O T E N T I A L   B L D L   L I S T   A *
               D D I T I O N S  ----'
HEAD5    DC    CL110'1 ----  S U G G E S T E D   P A C K   L I S T   R *
               E P L A C E M E N T  ----'
         SPACE 3
PRTBUF1  DC    CL1' '         ASA CHAR
PNAME    DC    CL8' '         MODULE/ALIAS NAME
         DC    CL2' '         PADDING
PNUM     DC    CL16' '        NUMBER OF FETCHES
         DC    CL4' '
PLIB     DC    CL7' '         LIBRARY
         DC    CL4' '
PTYPE    DC    CL6' '         MODULE ATTRIBUTES
         DC    CL2' '
PSIZE    DC    CL8' '         SIZE OF MODULE IN BYTES
         DC    CL8' '
PMAJOR   DC    CL8' '         MAJOR NAME (IF ALIAS)
         DC    CL8' '
PERROR   DC    CL30' '        POSSIBLE ERROR MESSAGE
         DC    CL30' '        PADDING
         SPACE 3
SMASK    DC    XL8'4020202020202020'  EDIT MASK
FMASK    DC    XL16'40202020202020202020202020202020'  EDIT MASK
PMASK    DC    XL4'40202020'  EDIT MASK
         SPACE 3
SWITCH   DC    X'00'          SWITCH BITS
FIRST    EQU   X'10'          FIRST PASS SWITCH
LAST     EQU   X'20'          LAST TIME SWITCH
GODATA   EQU   X'40'          DATA AVAILABLE SWITCH
SORTFLAG EQU   X'80'          IN CORE SORT SWITCH
TIMESTMP EQU   X'01'          GTF OPTION - TIME STAMP
         SPACE 3
PHASE    DC    X'00'          PHASE SWITCHES
RPT1     EQU   X'10'          REPORT 1 SWITCH
RPT2     EQU   X'20'          REPORT 2 SWITCH
RPT4     EQU   X'40'          REPORT 3/4 SWITCH
RPT5     EQU   X'80'          REPORT 5 SWITCH
         SPACE 3
WORK     DC    F'0'
PAGECNT  DC    PL2'0'         PAGE COUNT FIELD
LINECNT  DC    PL2'0'         LINE COUNT FIELD
         SPACE 3
         DS    0D             ALIGNMENT
SORTBUF  DS    0CL60          SORT BUFFER
MODNAME  DC    CL8' '         MODULE NAME
SVCTYPE  DC    CL1' '         SVC TYPE
FETCHES  DC    CL16' '        NUMBER OF FETCHES
LIBRARY  DC    CL4' '         LIBRARY
CONCAT   DC    CL3' '         CONCATINATION NUMBER
ATTRIB   DC    CL6' '         MODULE ATTRIBUTES
MODSIZE  DC    CL8' '         MODULE SIZE IN BYTES
MAJOR    DC    CL8' '         MAJOR NAME IF ALIAS
SIZE     DC    CL2' '         MODULE SIZE IN HEX
COUNT    DC    CL4' '         MODULE FETCH COUNTIN HEX
         EJECT
BLDLPTR  DC    H'1'
         DC    H'58'
BLDLNAME DC    CL8' '
         DC    XL50'00'
TRACE    DCB   MACRF=GL,RECFM=VB,DSORG=PS,LRECL=500,DDNAME=TRACE,      *
               EODAD=TRACEEND
SORTIN   DCB   MACRF=PM,BLKSIZE=6000,LRECL=60,DDNAME=SORTIN,           X
               RECFM=FBS,DSORG=PS
SORTOUT  DCB   MACRF=GM,BLKSIZE=6000,LRECL=60,DDNAME=SORTOUT,          *
               RECFM=FBS,DSORG=PS,EODAD=EODAD
SYSPRINT DCB   MACRF=PM,BLKSIZE=121,LRECL=121,DDNAME=SYSPRINT,         *
               RECFM=FBA,DSORG=PS
SYSPUNCH DCB   MACRF=PM,DSORG=PS,DDNAME=SYSPUNCH
LPALIB   DCB   DSORG=PO,MACRF=(R),DDNAME=LPALIB
         END
