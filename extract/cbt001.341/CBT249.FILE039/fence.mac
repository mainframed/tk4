//DYNFENCE JOB 1070000188,PORTER,MSGLEVEL=(2,0),MSGCLASS=R,CLASS=M
//STEP1    EXEC PGM=ASMBLR,PARM='NOLOAD,NODECK'
//SYSPRINT DD   DSN=&LIST,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,2)),
//            DCB=(RECFM=FB,LRECL=121,BLKSIZE=3025)
//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSIN    DD   *
         TITLE 'DYNAMIC PAGE FRAME FENCE ZAP'
***********************************************************************
*                                                                     *
*        THE DYNAMIC PAGE FRAME FENCE ZAP CHANGES TWO CSECTS:         *
*                                                                     *
*               IRARMCNS  THE SRM CONSTANT CSECT                      *
*               IRARMSTM  THE SRM PAGE STEAL ROUTINE.                 *
*                                                                     *
*        BOTH CSECTS ARE EXPANDED TO CONTAIN THE ZAP.                 *
*                                                                     *
*        IRARMCNS IS EXPANDED TO CONTAIN A WORK AREA PLUS A FENCE     *
*                 TABLE WHICH CONTAINS AN ENTRY FOR EVERY ADDRESS     *
*                 SPACE THAT IS TO BE TREATED SPECIALLY.  THE         *
*                 SPECIAL ADDRESS SPACES ARE IDENTIFIED BY A          *
*                 UNIQUE PERFORMANCE GROUP NUMBER.                    *
*                                                                     *
*        IRARMSTM IS EXPANDED TO CONTAIN CODE TO GAIN CONTROL WHEN    *
*                 AN ADDRESS SPACE IS GOING TO BE STOLEN FROM.        *
*                 AT THAT TIME IT CHECKS THE FENCE TABLE FOR THAT     *
*                 ADDRESS SPACE'S PERFORMANCE GROUP NUMBER.  IF PGN   *
*                 FOUND, THE OUCB ADDRESS IS CHECKED TO ASSURE THE    *
*                 UNIQUENESS OF THE PERFORMANCE GROUP NUMBER.  IF     *
*                 THIS IS THE FIRST USE, OR A RESTART OF USE, OF THIS *
*                 PEFORMANCE GROUP NUMBER THEN THE TABLE ENTRY IS     *
*                 INITIALIZED.  IF IT IS AN OLD ENTRY, THEN THE PAGE  *
*                 STEAL ATTEMPT COUNTER IS INCREMENTED AND            *
*                 CHECKED FOR INTERVAL END.  IF IT IS THE             *
*                 INTERVAL END, THEN THE ADDRESS SPACES'S PAGE IN     *
*                 RATE IS CALCULATED AND CHECKED WITH THE SPECIFIED   *
*                 TOLERANCE.  IF OUT SIDE SPECS, THE TARGET WORKING   *
*                 SET SIZE IS ADJUSTED ACCORDINGLY BY THE SPECIFIED   *
*                 ADJUSTMENT FACTOR.  NEXT THE CURRENT PAGE FRAME     *
*                 COUNT IS COMPARED WITH THE WORKING SET TARGET.      *
*                 IF LOWER THAN TARGET, NO STEALING WILL OCCURE.      *
*                                                                     *
*+++PTF(LZ00101).                                                     *
*+++ VER(Z037) PRE(UZ10991).                                          *
*+++ ZAP(IRARMCNS).                                                   *
*                                                                     *
*               NOTE THIS EXPAND HAS ROOM FOR 4 TABLE ENTRIES         *
*                                                                     *
*+ EXPAND IRARMCNS(152)                                               *
*                                                                     *
*+NAME IRARMCNS                                                       *
*                                                                     *
***********************************************************************
         SPACE 5
IRARMCNS CSECT
         SPACE 5
*+VER 0204 00640064
         SPACE 5
         ORG   IRARMCNS+X'0204'
         DC    X'00190023'    PAGE FAULT RATE LOW=25 HIGH=35
         SPACE 5
*+VER 0854 00000000,0000000000000000,0000000000000000
*+VER 0868 0000000000000000,0000000000000000
*+VER 0878 0000000000000000,0000000000000000
*+VER 0888 0000000000000000,0000000000000000
*+VER 0898 0000000000000000,0000000000000000
*+VER 08A8 0000000000000000,0000000000000000
*+VER 08B8 0000000000000000,0000000000000000
*+VER 08C8 0000000000000000,0000000000000000
*+VER 08D8 0000000000000000,0000000000000000
*+VER 08E8 00000000
         SPACE 5
         ORG   IRARMCNS+X'0854' END OF OLD CSECT
CNLEN1   EQU   *              OLD CSECT LENGTH
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS THE FENCE TABLE WHICH IS INSTALLITION DEPENDENT.     *
*        THE CURRENT EXPAND OF IRARMCNS HAS ROOM FOR 4 ENTRIES.       *
*        TWO SAMPLE ENTRIES ARE PROVIDED HERE.                        *
*                                                                     *
***********************************************************************
         SPACE 5
         ORG   IRARMCNS+X'0868' FENCE TABLE OFFSET
*
*        ENTRY 1        A LARGE TP SYSTEM
*
         DC    X'03000000'    ONLINE TP PERFORMANCE GROUP
         DC    X'0300'        CURRENT WSS TRAGET 3 MEG
         DC    X'0180'        LOW WSS TARGET 1.5 MEG
         DC    X'0380'        HIGH WSS TARGET 3.5 MEG
         DC    X'10'          ADJUST WSS TARGET BY 64K INCREMENTS
         DC    X'0050'        LOW PAGE IN RATE 8.0/SEC.
         DC    X'78'          HIGH PAGE IN RATE 12.0/SEC.
         DC    X'00000080'    DO ANALYSIS EVERY 128 STEAL ATTEMPTS
         DC    X'0000'        # OF PAGE INS IN LAST INTERVAL
         DC    X'00000000'    PAGE IN COUNT AT INTERVAL BEGIN
         DC    X'00000000'    TIME IN LAST INTERVAL
         DC    X'00000000'    TIME OF INTERVAL BEGIN
*
*        ENTRY 2        A DATA ENTRY TP SYSTEM
*
         DC    X'04000000'    VIDEO/370 PERFORMANCE GROUP
         DC    X'0030'        CURRENT WSS TRAGET 192K
         DC    X'0020'        LOW WSS TARGET 128K
         DC    X'0032'        HIGH WSS TARGET 200K
         DC    X'01'          ADJUST WSS TARGET BY 4K INCREMENTS
         DC    X'0001'        LOW PAGE IN RATE 0.1/SEC.
         DC    X'0A'          HIGH PAGE IN RATE 1.0/SEC.
         DC    X'00000200'    DO ANALYSIS EVERY 512 STEAL ATTEMPTS
         DC    X'0000'        # OF PAGE INS IN LAST INTERVAL
         DC    X'00000000'    PAGE IN COUNT AT INTERVAL BEGIN
         DC    X'00000000'    TIME IN LAST INTERVAL
         DC    X'00000000'    TIME OF INTERVAL BEGIN
*
*        MORE ENTRIES CAN BE ADDED HERE
*
         ORG   IRARMCNS+X'08EC' END OF NEW CSECT
CNLEN2   EQU   *              LENGTH OF NEW CSECT
EXPANDCN EQU   CNLEN2-CNLEN1
         EJECT
         ORG   IRARMCNS
***********************************************************************
*                                                                     *
*+++ ZAP(IRARMSTM).                                                   *
*+ EXPAND IRARMSTM(420)                                               *
*+NAME IRARMSTM                                                       *
*                                                                     *
***********************************************************************
         SPACE 5
IRARMSTM DS    0H
         ORG   IRARMSTM+2          BASE REGISTER OFFSET
         USING *,12                BASE REGISTER
*+VER 01B0 45E0,C8B4
         ORG   IRARMSTM+X'01B0' ORIGINAL STEAL ROUTINE CALL
ZAPHERE  BAL   R14,PATCH           CALL FENCE ROUTINE
         ORG   IRARMSTM+X'01CC'
NOSTEAL  DS    0H                  NO STEAL RETURN
         ORG   IRARMSTM+X'08B6'
STEAL    DS    0H                  PAGE STEAL ROUTINE
         SPACE 5
*+VER 09E8 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 09F8 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 0A08 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 0A18 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 0A28 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 0A38 0000,0000,0000,0000,0000,0000,0000,0000
*+VER 0A48 0000,0000,0000,0000,0000,0000,0000,0000
         SPACE 5
         ORG   IRARMSTM+X'09E8' PATCH AREA
STLEN1   EQU   *
PATCH    LA    R7,FENCETBO(RMCT)   GET FENCE TABLE ADDRESS
         USING FENCETBL,R7         FENCE TABLE ENTRY ADDRESSING
TBLSRCH  CLI   PERFORM,X'00'       IS THIS END OF TABLE ?
         BE    STEAL               BRANCH IF YES
         CLC   PERFORM,X'18'(OUCB) DO PERFORMANCE GROUPS MATCH ?
         BE    FENCEFND            BRANCH IF YES
         LA    R7,ENTLEN(R7)       POINT TO NEXT ENTRY
         B     TBLSRCH             LOOP FOR ALL TABLE ENTRIES
         SPACE 5
FENCEFND SR    R9,R9               ZERO R9
         ICM   R9,7,OUCBADDR+1     LOAD OLD OUCB ADDRESS
         BZ    NEWOUCB             BRANCH FOR NEW ENTRY
         CR    R9,OUCB             OLD USER ?
         BE    OLDUSER             BRANCH IF YES
         LRA   R9,0(R9)            IS ADDRESS STILL VALID ?
         BNZ   NEWOUCB             BRANCH IF NOT
         L     R9,OUCBADDR         RELOAD OUCB ADDRESS
         CLC   0(4,R9),COUCB       IS THIS STILL AN OUCB ?
         BNE   NEWOUCB             BRANCH IF NOT
         TM    X'11'(R9),X'10'     IS OUCB INVALID ?
         BO    NEWOUCB             BRANCH IF YES
         CLC   PERFORM,X'18'(R9)   RESTART OF PERFORMANCE GROUP USER ?
         BE    STEAL               BRANCH IF NOT
         SPACE 5
NEWOUCB  STCM  OUCB,7,OUCBADDR+1   SET OUCB ADDRESS
         XC    PGSTLCT,PGSTLCT     ZERO INTERVAL COUNTER
         STM   R0,R1,REGSAVE(RMCT) SAVE R0 AND R1
         STCK  STCLOCK(RMCT)       CURRENT TIME OF DAY
         LM    R0,R1,STCLOCK(RMCT) LOAD TIME OF DAY
         SRDL  R0,18               SET UP FOR DIVIDE
         D     R0,DAY              R1 = DAY OF CENTURY
         SRDL  R0,30               SET UP FOR DIVIDE
         D     R0,F625             GET TIME OF DAY IN HUNDREDTHS
         CH    R0,H312             CHECK FOR ROUNDING
         BNH   *+8                 BRANCH IF NOT NEEDED
         AH    R1,H1               ROUND
         ST    R1,TIMEBEG          SET INTERVAL BEGIN TIME
         LM    R0,R1,REGSAVE(RMCT) RESTORE R0 AND R1
         L     R9,X'94'(ASCB)      OUXB POINTER
         MVC   PGINBEG,X'10'(R9)   SET INTVL BEGIN PAGE IN COUNT
         B     CHKSTEAL            CHECK STEAL ANSWER
         SPACE 5
OLDUSER  LH    R9,PGSTLCT
         AH    R9,H1               INCREMENT INTERVAL COUNT
         STH   R9,PGSTLCT
         CH    R9,PGSTLLIM         PAST LIMIT ?
         BL    CHKSTEAL            BRANCH IF NOT
         XC    PGSTLCT,PGSTLCT     ZERO INTERVAL COUNTER
         STM   R0,R1,REGSAVE(RMCT) SAVE R0 AND R1
         STCK  STCLOCK(RMCT)       CURRENT TIME OF DAY
         LM    R0,R1,STCLOCK(RMCT) LOAD TIME OF DAY
         SRDL  R0,18               SET UP FOR DIVIDE
         D     R0,DAY              R1 = DAY OF CENTURY
         SRDL  R0,30               SET UP FOR DIVIDE
         D     R0,F625             GET TIME OF DAY IN HUNDREDTHS
         CH    R0,H312             CHECK FOR ROUNDING
         BNH   *+8                 BRANCH IF NOT NEEDED
         AH    R1,H1               ROUND
         LR    R0,R1               CURRENT TIME IN R0
         S     R0,TIMEBEG          GET LENGTH OF INTERVAL
         BNZ   *+8                 BRANCH IF NOT ZERO LENGTH
         LA    R0,1                MINIMUN TIME .01 SECONDS
         BNM   *+8                 BRANCH IF NOT END OF DAY
         A     R0,DAY2             ADJUST FOR END OF DAY
         STM   R0,R1,TIMELAST      SAVE LENGTH AND CURRENT TIME
         L     R9,X'94'(ASCB)      OUXB POINTER
         L     R1,X'10'(R9)        PAGE IN COUNT
         LR    R0,R1               SAVE PAGE IN COUNT
         S     R1,PGINBEG          PAGE IN'S IN INTERVAL
         BNM   *+6                 BRANCH IF NOT MINUS
         SR    R1,R1               ZERO R1
         STH   R1,PGINLAST         SAVE INTERVAL PAGE IN COUNT
         ST    R0,PGINBEG          SET NEXT INTVL BEGIN PAGE IN COUNT
         M     R0,F1000            ADJUST FOR SCALE
         L     R9,TIMELAST         TIME IN INTERVAL
         DR    R0,R9               GET PAGE IN RATE
         SRL   R9,1                TIME/2
         CR    R0,R9               ROUNDING NEEDED ?
         BL    *+8                 BRANCH IF NOT
         AH    R1,H1               ROUND
         CH    R1,H255             PAGE IN RATE OVER 25.5/SEC.
         BNH   *+8                 BRANCH IF NOT
         LA    R1,255              SET TO 25.5/SECOND
         STC   R1,CURPIRT          SET CURRENT PAGE IN RATE
         SR    R0,R0               ZERO R0
         IC    R0,WSSTADJ          ADJUSTMENT FACTOR
         LH    R9,CURWSST          CURRECT WSS TARGET
         CLM   R1,1,LOWPIRT        IS PAGE IN RATE LOWER THAN LOW ?
         BL    PILOW               BRANCH IF YES
         CLM   R1,1,HIGHPIRT       IS IT HIGHER THAN HIGH ?
         BNH   RESTORE             BRANCH IF NOT
         AR    R9,R0               INCREMENT TARGET
         CH    R9,HIGHWSST         HIGHER THAN THAN MAX ?
         BH    RESTORE             BRANCH IF YES
         STH   R9,CURWSST          SET NEW TARGET
         B     RESTORE             CHECK FOR STEAL
PILOW    SR    R9,R0               DECREMENT TARGET
         CH    R9,LOWWSST          LOWER THAN MIN ?
         BL    RESTORE             BRANCH IF YES
         STH   R9,CURWSST          SET NEW TARGET
RESTORE  LM    R0,R1,REGSAVE(RMCT) RESTORE R0 AND R1
         SPACE 5
CHKSTEAL CLC   CURWSST,X'98'(ASCB) FRAME COUNT HIGHER THAN TARGET ?
         BL    STEAL               BRANCH IF YES
         B     NOSTEAL             ELSE NOSTEAL
         SPACE 5
H255     DC    H'255'
DAY      DC    F'1350000000'       24*60*60*25*625
DAY2     DC    F'8640000'          24*60*60*100
F625     DC    F'625'
H312     DC    H'312'
H1       DC    H'1'
F1000    DC    F'1000'
COUCB    DC    C'OUCB'
STLEN2   EQU   *
EXPANDST EQU   STLEN2-STLEN1
         EJECT
***********************************************************************
*                                                                     *
*              THE FENCE TABLE ENTRY DSECT.                           *
*                                                                     *
***********************************************************************
         SPACE 5
FENCETBL DSECT
PERFORM  DS    0XL1                PERFORMANCE GROUP NUMBER
OUCBADDR DS    F                   OUCB ADDRESS
CURWSST  DS    H                   CURRENT WORKING SET SIZE TARGET
LOWWSST  DS    H                   LOW WORKING SET SIZE TARGET
HIGHWSST DS    H                   HIGH WORKING SET SIZE TARGET
WSSTADJ  DS    X                   WORKING SET SIZE ADJUSTMENT FACTOR
CURPIRT  DS    X                   CURRENT PAGE IN RATE
LOWPIRT  DS    X                   LOW PAGE IN RATE
HIGHPIRT DS    X                   HIGH PAGE IN RATE
PGSTLCT  DS    H                   COUNT OF ROUTINE INVOLCATION
PGSTLLIM DS    H                   INVOCATION LIMIT FOR INTERVAL
PGINLAST DS    H                   # OF PAGE INS IN LAST INTERVAL
PGINBEG  DS    F                   PAGE IN COUNT AT INTVL BEGINNING
TIMELAST DS    F                   AMOUNT OF TIME IN LAST INTVL
TIMEBEG  DS    F                   TIME OF INTVL BEGIN
ENTLEN   EQU   *-PERFORM           TABLE ENTRY LENGTH
         SPACE 5
R0       EQU   0
R1       EQU   1
R7       EQU   7
R9       EQU   9
R14      EQU   14
RMCT     EQU   2
OUCB     EQU   4
ASCB     EQU   5
REGSAVE  EQU   X'0858'
STCLOCK  EQU   X'0860'
FENCETBO EQU   X'0868'
         END
//STEP2    EXEC PGM=IEBGENER,COND=(0,LT)
//SYSPRINT DD   DUMMY
//SYSIN    DD   DUMMY
//SYSUT1   DD   DSN=&LIST,DISP=(OLD,PASS)
//SYSUT2   DD   SYSOUT=*
//STEP3    EXEC PGM=ASMBLR,PARM='NOLOAD,DECK',COND=(0,LT)
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&OBJ,DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(CYL,(1,1)),DCB=BLKSIZE=400
//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSIN    DD   *
         TITLE 'ZAP CREATION PROGRAM'
***********************************************************************
*                                                                     *
*                  ZAP CREATION PROGRAM                               *
*                                                                     *
*         THIS PROGRAM WILL READ THE ASSEMBLER PRINT OUT OF A         *
*         SPECIALLY WRITTEN PROGRAM TO PRODUCE SUPERZAP INPUT.        *
*                                                                     *
*         INPUT:  DDNAME=LINEIN     PRODUCED BY ASSEMBLER             *
*                                                                     *
*         OUTPUT:  DDNAME=SYSPUNCH   INPUT FOR SUPERZAP               *
*                                                                     *
***********************************************************************
         SPACE 5
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
        EJECT
ZAPCREAT CSECT
         SAVE  (14,12),,*
         BALR  R12,0               BASE REGISTER
         USING *,R12
         LA    R11,SAVE            ESTABLISH SAVE AREA
         ST    R13,4(R11)
         ST    R11,8(R13)
         LR    R13,R11
         OPEN (LINEIN,INPUT,SYSPUNCH,OUTPUT)
READLOOP GET  LINEIN,LINE          READ ASM LISTING LINE
         MVC   CARD,BLANK          BLANK OUTPUT CARD
         CLC   LINE+1(2),=C'00'    ADDRESS ON LINE ?
         BNE   NOADDR              BRANCH IF NOT
         CLI   LINE+8,C' '         DATA FOR ADDRESS ?
         BE    READLOOP            BRANCH IF NOT
         MVC   CARD(3),=C'REP'     PRODUCE REP CARD
         MVC   CARD+4(4),LINE+3    MOVE ADDRESS
         MVC   CARD+9(14),LINE+8   MOVE DATA
         LA    R9,CARD+23          POINT PAST DATA
LENLOOP  BCTR  R9,0                SEARCH FOR FIRST NON-BLANK
         CLI   0(R9),C' '
         BE    LENLOOP
         LA    R8,CARD+9           START OF DATA
         SR    R9,R8               LENGTH OF DATA
         EX    R9,TR               TRANSLATE DATA
         B     CARDPUT             WRITE CARD
TR       TR    CARD+9(0),TABLE     DUMMY FOR EXECUTE
NOADDR   CLC   LINE+41(2),=C'*+'   CONTROL CARD ?
         BNE   READLOOP            BRANCH IF NOT
         MVC   CARD(67),LINE+43    MOVE CONTROL CARD
CARDPUT  PUT   SYSPUNCH,CARD       WRITE CARD
         B     READLOOP            LOOP FOR ALL CARDS
EOF      CLOSE (LINEIN,,SYSPUNCH)
         L     R13,4(R13)          RESTORE OLD SAVE AREA
         RETURN (14,12),T,RC=0
SAVE     DC    18F'0'              SAVE AREA
TABLE    DC    64C'*',C',',128C'*',C'ABCDEF',41C'*',C'0123456789'
         DC    6C'*'
LINE     DC    CL133' '
CARD     DC    CL80' '
BLANK    DC    CL80' '
SYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,RECFM=FB
LINEIN   DCB   DDNAME=LINEIN,DSORG=PS,MACRF=GM,RECFM=FB,EODAD=EOF
         LTORG
         END
//STEP4    EXEC PGM=IEWL,PARM='LET,LIST,MAP',COND=(0,LT)
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   DSN=&OBJ,DISP=(OLD,PASS)
//SYSLMOD  DD   DSN=&GO(GO),DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(CYL,(1,1,1))
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(5,5))
//STEP5    EXEC PGM=*.STEP4.SYSLMOD,COND=(0,LT)
//LINEIN   DD   DSN=&LIST,DISP=(OLD,PASS)
//SYSPUNCH DD   DSN=&PTF,DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(CYL,(1,1)),DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)
//STEP6    EXEC PGM=IEBGENER,COND=(0,LT)
//SYSPRINT DD   DUMMY
//SYSIN    DD   DUMMY
//SYSUT2   DD   SYSOUT=*
//SYSUT1   DD   DSN=&PTF,DISP=(OLD,PASS)
//STEP7    EXEC IPOSMP,COND=(0,LT)
//SMPPTFIN DD   DSN=&PTF,DISP=(OLD,PASS)
//SYSIN    DD   *
RECEIVE S (LZ00101).
APPLY S (LZ00101) FORCE.
//
