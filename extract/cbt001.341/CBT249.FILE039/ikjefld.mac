***********************************************************************
*
*        M V S  I K J E L F D   L O G O N   E X I T
*
*        THIS IS THE RE-ENTRANT TSO LOGON PRE-PROMPT EXIT.
*        BECAUSE THIS ROUTINE MUST BE LINKED WITH MIANLINE
*        TSO IN THE LINKPACK AREA, IT IS NOTHING MORE THAN
*        AN INTERFACE TO THE REAL MODULE (IKJEXIT) WHICH IS
*        LOADED FROM LINKLIB.  THIS ALLOWS TESTING OF A NEW
*        VERSION WITHOUT REQUIRING AN IPL AND CLPA.
*
***********************************************************************
IKJEFLD  CSECT
         SAVE  (14,12),,*          SAVE REGISTERS
         BALR  R12,0
         USING *,R12               ESTABLISH BASE REGISTER
         L     R0,SAVESIZE
         GETMAIN R,LV=(0)          GET WORKING STORAGE
         LR    R15,R13
         ST    R13,4(R1)           CHAIN SAVE AREAS
         ST    R1,8(13)
         L     R10,24(13)          SET LGNREG = IKJEFLA'S R1 ON INPUT
         LR    R11,R1
         USING SAVEAREA,R11        MAKE SCRATCHPAD DSECT ADDRESSIBLE
         USING DAPARM,R10          MAKE DAPARM     DSECT ADDRESSIBLE
         EJECT
*
*         IF USERID='TSTEST',
*           THEN LINK TO IKJTEST
*         IF USERID STARTS WITH 'AS', 'SS', 'DS', OR 'NE',
*           THEN LINK TO IKJEXIT
*         RETURN TO TSO MONITOR
*
*        R10 -> DAPARM DSECT FOR LINKED-TO MODULES. PASSED IN LINK.
*
         LA    R13,SUBSAVE         SET SAVE AREA FOR LINKED-TO MODULES
*
         L     R2,DAPBUFPT         CTLREG -> BUFFER SDV
         USING SDV,R2              MAKE SDV ADDRESSIBLE
         L     R2,SDVPTR           CTLREG -> LOGON KEYIN BUFFER
         DROP  R2
*
         MVC   MYLGNBUF(25),0(R2)  COPY LOGON KEYIN TO MY BUFFER
         OC    MYLGNBUF(25),BLNKS  CONVERT KEYIN TO UPPER CASE
         LA    R2,MYLGNBUF         R2 -> UPPER CASE LOGON
*
*
CHK1     LA    R3,USERID2          R2 -> POINTS TO STRING BEING PARSED
         BAL   R15,PARSE           SEARCH FOR 'TSTEST2' IN LOGON BUFFER
         B     CHK2                NOT FOUND
         B     ACCEPT              FOUND - LINK TO IKJEXITZ
*
CHK2     LA    R3,USERID1          R2 -> POINTS TO STRING BEING PARSED
         BAL   R15,PARSE           SEARCH FOR 'TSTEST' IN LOGON BUFFER
         B     TRY2                NOT FOUND
*
         LINK  EP=IKJTEST          LINK TO IKJTEST IN LINKLIST
         B     EXIT                (NO BLDL)
*
TRY2     LA    R3,LOGON
         BAL   R15,PARSE           SEARCH FOR 'LOGON ' IN LOGON BUFFER
         B     EXIT                NOT FOUND - RETURN TO IKJEFLA
*
*        SLEW THRU BLANKS TO USERID
*
SLEW     CLI   0(R3),X'40'
         BNE   CHKUSER             LOCATED USERID - NOW CHECK IT.
         LA    R3,1(R3)            CHECK NEXT CHAR IN LOGON KEYIN
         B     SLEW
*
*        IF 1ST TWO CHARACTERS OF USERID ARE   'SS', 'AS', OR 'DS',
*        THEN PREPARE TO INVOKE THE LOGON PREPROMPTER, ELSE EXIT.
*
CHKUSER  CLC   0(2,R3),=C'AS'      DOES USERID START WITH 'AS'
         BE    INVOKE              YES
         CLC   0(2,R3),=C'SS'      NO, DOES USERID START WITH 'SS'
         BE    INVOKE              YES
         CLC   0(2,R3),=C'NE'      NO, DOES USERID START WITH 'NE'
         BE    INVOKE              YES
         CLC   0(2,R3),=C'DS'      NO, DOES USERID START WITH 'DS'
         BE    INVOKE              YES
         CLC   0(2,R3),=C'DA'      NO, DOES USERID START WITH 'DA'
         BNE   EXIT                NO, SO EXIT
*
*        FINAL SECURITY CHECK:  DONT LET IDS W/PSWDS USE PROMPTER
*
INVOKE   LA    R6,RVEC             R6 -> FORBIDDEN USERIDS VECTOR
INVOKE1  L     R3,0(R6)            FETCH PTR TO PARSING CHAR STRG
         LTR   R3,R3               END OF RESTRICTED USERID'S LIST?
         BZ    ACCEPT              YES, HE PASSES SECURITY CHECK
         BAL   R15,PARSE           NO - RUN SECURITY CHECK AGAIN
         B     INVOKE2             PARSED FOR STRING NOT FOUND...
         B     EXIT                ***THIS USERID IS RESTRICTED***
INVOKE2  LA    R6,4(R6)            BUMP TO TRY NEXT USERID
         B     INVOKE1             CHECK NEXT USER IN 'RESTRICTED' LIST
ACCEPT   LINK  EP=IKJEXIT          IN LINKLIST MEMBER
         EJECT
*
*        RETURN TO TSO TERMINAL MONITOR PROGRAM
*
EXIT     LR    R13,R11             RESTORE R13 FOR PROPER EXIT.
         LR    R1,R13
         L     R0,SAVESIZE
         L     R13,4(R13)
         FREEMAIN R,LV=(0),A=(1)
         RETURN (14,12),T,RC=0
         EJECT
*
*        PARSE - R2 -> STRING BEING PARSED
*                R3 -> STRING BEING SEARCHED FOR
*
*        IF TEXT FOUND, R3 -> BYTE AFTER TEXT UPON EXIT
*        EXIT AT *   IF TEXT NOT FOUND
*        EXIT AT *+4 IF TEXT IS  FOUND
*
PARSE    STM     R2,R5,PSV    SAVE WORKING REGISTERS
         SR      R4,R4        CLEAR OUT R4 (TEXT LENGTH REGISTER)
         IC      R4,0(R3)     LOAD LNG OF STRG BEING SEARCHED FOR
         BCT     R4,PARSEI    DECREMENT LNG BY 1 FOR CLC INSTR
PARSEI   LA      R3,1(R3)     SET R3 -> 1ST CHAR OF TEXT.
         LA      R5,15        ALLOW 15 ATTEMPTS TO LOCATE
PARSE1   EX      R4,CLC       DO TEXT STRINGS MATCH?
         BE      FOUND        YES - SET UP SPECIAL EXIT FROM 'PARSE'.
         LA      R2,1(R2)     NO  - MOVE CHAR PTR 1 POS RIGHT.
         BCT     R5,PARSE1    TRIED 15 TIMES YET?
         B       PEXIT        YES - TOO BAD.  TEXT NOT FOUND.
FOUND    AR      R2,R4        ADJUST (R2) -> 1 BYTE BEYOND MATCH.
         ST      R2,PSV+4     MAKE R3 = R2 ON EXIT, RESTORE R2,R4,R5.
         LA      R15,4(R15)   TEXT FOUND.  SET EXIT AT *+4
PEXIT    LM      R2,R5,PSV    RESTORE REGISTERS.
         BR      R15          RETURN TO CALLER
CLC      CLC   0(0,R3),0(R2)  TARGET OF 'EX' INSTR
         EJECT
*
*        FIXED STORAGE ALLOCATIONS
*
         DS     0F
SAVESIZE DC    A(SAVEND-SAVEAREA)
USERID1  DC    XL1'06'
         DC    C'TSTEST'      SYSTEMS SOFTWARE TEST ID
USERID2  DC    XL1'07'
         DC    C'TSTEST2'     OPERATIONS TEST ID.
LOGON    DC    XL1'06'
         DC    C'LOGON '      PROMPTER DEBUGGING ID
BLNKS    DC    XL25'40404040404040404040404040404040404040404040404040'
         EJECT
*
*        VECTOR OF ADDRESSES OF USERID PARSING STRINGS NOT ALLOWED
*        TO USE THE LOGON PREPROMPTER FEATURE:
*
RVEC     DC    A(ID01)
         DC    A(ID02)
         DC    A(ID03)
         DC    A(ID04)
         DC    A(ID05)
         DC    A(ID06)
         DC    A(ID07)
         DC    A(ID08)
         DC    A(ID09)
         DC    A(ID10)
         DC    A(ID11)
         DC    A(ID12)
         DC    A(ID13)
         DC    A(ID14)
         DC    A(ID15)
         DC    A(ID16)
         DC    A(ID17)
         DC    A(ID18)
         DC    A(0)
         EJECT
*
*        TSO USERS RESTRICTED FROM USING THE LOGON PREPROMPTER:
*
ID01     DC    XL1'05'
         DC    C'ASDBM'
ID02     DC    XL1'05'
         DC    C'ASJGB'
ID03     DC    XL1'06'
         DC    C'DS$EVG'
ID04     DC    XL1'06'
         DC    C'DS$JAE'
ID05     DC    XL1'06'
         DC    C'DS$JEL'
ID06     DC    XL1'06'
         DC    C'DS$JJW'
ID07     DC    XL1'06'
         DC    C'DS$KWB'
ID08     DC    XL1'05'
         DC    C'SSDDA'
ID09     DC    XL1'06'
         DC    C'DS$OPS'
ID10     DC    XL1'05'
         DC    C'DSTMS'
ID11     DC    XL1'05'
         DC    C'DSTRD'
ID12     DC    XL1'05'
         DC    C'DSTWX'
ID13     DC    XL1'06'
         DC    C'SSHASP'
ID14     DC    XL1'05'
         DC    C'SSHJK'
ID15     DC    XL1'05'
         DC    C'SSIBM'
ID16     DC    XL1'05'
         DC    C'SSJCD'
ID17     DC    XL1'05'
         DC    C'SSJES'
ID18     DC    XL1'05'
         DC    C'SSJFS'
         EJECT
*
*        DYNAMIC STORAGE DEFINITIONS
*
SAVEAREA DSECT
SAVE     DS    18F            IKJEFLD'S SAVE AREA
SUBSAVE  DS    18F            IKJTEST OR IKJEXIT'S SAVE AREA IN IKJEFLD
PSV      DS    4F             PARSE SUBR SAVE AREA
MYLGNBUF DS    CL25           UPPER-CASE LOGON TEXT
SAVEND   DS    D
         EJECT
*
*        VECTOR FROM IKJEFLA POINTED TO BY R2 IN THIS MODULE:
*
DAPARM   DSECT
DAPCTLPT DS    F              PNTR TO CTL BIT STRING DOPE VECTOR (SDV)
DAPBUFPT DS    F              PNTR TO USER'S LOGON KEYIN
DAPUSEPT DS    F              PNTR TO USERID CHAR SDV
DAPSWDPT DS    F              PNTR TO PASSWORD CHAR SDV
DAPACCPT DS    F              PNTR TO ACCOUNT CHAR SDV
DAPROCPT DS    F              PNTR TO PROCEDURE CHAR SDV
DAPRGNPT DS    F              REGION SIZE (FIXED BIN(31))
DAPJCLPT DS    F              PNTR TO JCL CHAR SDV
         DS    F              RESERVED
DAPAT1PT DS    F              PNTR TO PSCB ATTR1 BIT SDV
DAPAT2PT DS    F              PNTR TO PSCB ATTR2 BIT SDV
DAPGUNPT DS    F              PNTR TO GENERIC UNIT CHAR SDV
DAPUPTPT DS    F              PNTR TO UPT BIT SDV
DAPECTPT DS    F              PNTR TO ECT BIT SDV
DAPECBPT DS    F              PNTR TO CANCEL ECB (READ ONLY)
DAPCOMPT DS    F              PNTR TO STEP COMP. CODE (READ ONLY)
DAPPRFPT DS    F              PNTR TO PERFORMANCE GROUP
DAPDESPT DS    F              PNTR TO DEFAULT SYSOUT DESTINTATION
*
*        A MODEL SDV (STRING DOPE VECTOR) DSECT IS DEFINED HERE:
*
SDV      DSECT
SDVPTR   DS    A              POINTER TO THE CHAR STRING ITSELF
SDVMX    DS    H              MAX # OF CHARS ALLOWED IN THE STRING
SDVCUR   DS    H              CURRENT # OF CHARS IN THE STRING
         EJECT
***********************************************************************
*        REGISTER EQUATE STATEMENTS                                   *
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END

