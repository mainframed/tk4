XREFASM  TITLE '-- MASTER CROSS-REFERENCE FOR SYSTEMS OF ASSEMBLY PROGR*
               AMS'
*************************************************************
*                                                           *
* MODULE NAME = XREFASM.                                    *
*                                                           *
* DESCRIPTIVE NAME = MASTER CROSS REFERENCE GENERATOR FOR   *
*                    SYSTEMS OF ASSEMBLER LANGUAGE          *
*                    PROGRAMS.                              *
*                                                           *
* COPYRIGHT = DAVID B. COLE - 1981.                         *
*                                                           *
* STATUS = RELEASE 1, MODIFICATION LEVEL 3.                 * DBC 01/85
*                                                           *
* FUNCTION = XREFIN ACCUMULATES CROSS REFERENCE LISTINGS    *
*            FOR ASSEMBLER LANGUAGE PROGRAMS. XREFOUT SORTS *
*            AND PRINST THE ACCUMULATED LISTINGS. REDUNDANT *
*            ENTRIES RESULTING FROM RE-ASSEMBLIES OF THE    *
*            SAME ROUTINES ARE FILTERED OUT.                *
*                                                           *
* PROCESSOR = OS/VS ASSEMBLER.                              *
*                                                           *
* TYPE = PROCEDURE.                                         *
*                                                           *
* ATTRIBUTES = NONE.                                        *
*                                                           *
* DEPENDANCIES = THE NAME OF THE MODULE FOR WHICH THE       *
*                ASSEMBLY LISTING WAS CREATED MUST APPEAR   *
*                IN THE NAME FIELD OF A TITLE STATEMENT     *
*                USED IN THE ASSEMBLY.                      *
*                                                           *
* NOTES = THIS SOURCE CONTAINS TWO CSECTS WHICH MUST BE     *
*         LINK EDITED INTO SEPERATE LOAD MODULES.           *
*                                                           *
* RESTRICTIONS = NONE.                                      *
*                                                           *
* AUTHOR = DAVID B. COLE.                                   *
*                                                           *
*************************************************************
         TITLE '-- CHANGE HISTORY'                            DBC 01/85
************************************************************* DBC 01/85
*                                                           * DBC 01/85
* XREFASM VERSION 1.3                                       * DBC 01/85
*                                                           * DBC 01/85
* LAST CHANGE DATE - JANUARY 22, 1985.                      * DBC 01/85
*                                                           * DBC 01/85
*                  - I ADDED CODE TO PREVENT THE            * DBC 01/85
*                    POSSIBILITY OF THE DISPLAY OF          * DBC 01/85
*                    OBSELETE SYMBOLS. THIS IS DONE BY      * DBC 01/85
*                    HAVING XREFIN WRITE A TIMESTAMP        * DBC 01/85
*                    RECORD WITH A SYMBOL VALUE OF          * DBC 01/85
*                    X'40FF000000'. THIS VALUE IS LOW       * DBC 01/85
*                    ENOUGH THAT XREFOUT WILL SORT IT       * DBC 01/85
*                    LOWER THAN ALL XREF RECORDS BUT        * DBC 01/85
*                    HIGHER THAN A POSSIBLE PURGE RECORD    * DBC 01/85
*                    (CL9' ANAME'). THIS TIMESTAMP RECORD   * DBC 01/85
*                    WILL NEVER BE DISPLAYED BY XREFOUT,    * DBC 01/85
*                    BUT IT WILL GUARENTEE THAT XREFOUT     * DBC 01/85
*                    WILL KNOW THE MOST RECENT              * DBC 01/85
*                    TIME-OF-ASSEMBLY FOR A PARTICULAR      * DBC 01/85
*                    MODULE PRIOR TO IT RECEIVING FROM      * DBC 01/85
*                    SORT/MERGE ANY DATA RECORDS FOR ANY    * DBC 01/85
*                    ASSEMBLIES OF THAT MODULE.             * DBC 01/85
*                                                           * DBC 01/85
*                  - WHEN XREFOUT REWRITES THE XREF FILE,   * DBC 01/85
*                    IT WILL NOW RESET THE TIMESTAMP FIELD  * DBC 01/85
*                    OF ALL RECORDS TO THE CURRENT DATE.    * DBC 01/85
*                    THIS PREVENTS THE ACCUMULATION OF      * DBC 01/85
*                    REDUNDANT RECORDS IN THE FOLLOWING     * DBC 01/85
*                    SCENARIO:                              * DBC 01/85
*                                                           * DBC 01/85
*                    - THE INPUT FILE IS A CONCATENATION OF * DBC 01/85
*                      TWO OR MORE FILES, AND               * DBC 01/85
*                                                           * DBC 01/85
*                    - THE OUTPUT FILE WRITES BACK TO ONE   * DBC 01/85
*                      OF THE INPUT FILES, AND              * DBC 01/85
*                                                           * DBC 01/85
*                    - THE XREFOUT JOB, USING THE IDENTICAL * DBC 01/85
*                      JCL, IS EXECUTED TWO OR MORE TIMES.  * DBC 01/85
*                                                           * DBC 01/85
*                  - THE S.L.A.C. MODIFIED ASSEMBLER-H HAS  * DBC 01/85
*                    A TROUBLESOME BUG WHERE OCCASIONALLY   * DBC 01/85
*                    THE SYMBOL FIELD IN THE XREF LISTING   * DBC 01/85
*                    CONTAINS GARBAGE CHARACTERS. THIS CAN  * DBC 01/85
*                    OCCUR BOTH ON THE FIRST XREF LINE FOR  * DBC 01/85
*                    A GIVEN SYMBOL, AS WELL AS ON          * DBC 01/85
*                    CONTINUATION LINES (WHEN THAT FIELD    * DBC 01/85
*                    SHOULD BE BLANK), AND EVEN IN THE      * DBC 01/85
*                    NAME FIELD OF TITLE LINES WITHIN THE   * DBC 01/85
*                    XREF. I HAVE ADJUSTED XREFASM TO       * DBC 01/85
*                    COMPENSATE FOR THIS IN TWO WAYS:       * DBC 01/85
*                                                           * DBC 01/85
*                    - ALL LINES HAVING A SYMBOL FIELD      * DBC 01/85
*                      WHOSE FIRST BYTE'S VALUE IS LESS     * DBC 01/85
*                      THAN X'40' ARE DISCARDED.            * DBC 01/85
*                                                           * DBC 01/85
*                    - XREFIN HAS BEEN CHANGED TO CONSIDER  * DBC 01/85
*                      XREF LINES (FROM ASM-H ASSEMBLIES)   * DBC 01/85
*                      HAVING BLANK LEN, VALUE, AND DEFN    * DBC 01/85
*                      FIELDS TO BE CONTINUATION LINES      * DBC 01/85
*                      REGUARDLESS OF WHETHER OR NOT THE    * DBC 01/85
*                      SYMBOL FIELD IS BLANK OR NON-BLANK.  * DBC 01/85
*                                                           * DBC 01/85
*                  - A SUMMARY DISPLAY IS NOW PRINTED BY    * DBC 01/85
*                    XREFOUT AT THE END OF THE MERGED XREF  * DBC 01/85
*                    SHOWING THE NAMES OF ALL CROSS         * DBC 01/85
*                    REFERENCED ASSEMBLY MODULES.           * DBC 01/85
*                                                           * DBC 01/85
*                  - ASSEMBLY MODULES THAT HAVE NO NAME     * DBC 01/85
*                    DEFINED IN THE TITLE LINE ARE NOW      * DBC 01/85
*                    IDENTIFIED AS *BLANK*.                 * DBC 01/85
*                                                           * DBC 01/85
************************************************************* DBC 01/85
         TITLE '-- REGISTER AND OTHER EQUATES'
XREFASM  CSECT ,
         SPACE 3
         #REGS R,                  STANDARD REGISTER NAMES             *
               (BASE1REG,R13),     1ST PGM BASE REGISTER               *
               (BASE2REG,R12),     2ND PROGRAM BASE REGISTER           *
               (TYPEREG,R11),      XREFIN: XREF TYPE TABLE BASE        *
               (INPUTCTR,R10),     XREFIN: INPUT (LISTING) RCDS CTR    *
               (XREFCTR,R9),       XREFIN: XREF FILE RCDS CTR          *
               (SYSPCTR,R8),       XREFIN: SYSPRINT FILE RCDS CTR      *
               (RCDPTR,R11)        XREFOUT/SORTOUT: RECORD PTR
         SPACE 3
PRTLEN   EQU   133                 LENGTH OF A PRINT LINE
         SPACE 3
         #PUT  SUBAD=PUTSYST,MF=INIT MACRO INITIALIZATION
         TITLE '-- IBM MAPPING MACROS'
         PUSH  PRINT
         PRINT NOGEN
SYMDEL   DSECT ,                   SYM-TABLE SUPPRESSION      DBC 01/85
         SPACE 3
*************************************************************
*        DCB = DATA CONTROL BLOCK                           *
*        IHADCB = DSECT AND BASE                            *
*************************************************************
         SPACE 1
         DCBD  DSORG=QS
         SPACE 3
SYMNODEL DSECT ,                   END SYM-TABLE SUPPRESSION  DBC 01/85
         POP   PRINT
         TITLE '-- XREFIN -- TABLE MAP - SOURCE XREF DESCRIPTION TABLE'
TABLE    DSECT ,
TTCHK    CLC   *-*,*-*             IDENTIFIES TITLE LINES
MOGET    MVC   *-*,*-*             EXTRACTS ASSEMBLY NAMES
XRCHK    TM    *-*,B'11110000'     IDENTIFIES XREF DATA LINES
LBCHK    TM    *-*,255-C' '        IDENTIFIES LABEL FIELDS
         NOPR  0                   (FILLER)                   DBC 01/85
LBGET    MVC   *-*,*-*             EXTRACTS LABELS
REFSOFFS DS    H                   OFFSET IN A DATA LINE (NOT INCLUDING
*                                  THE CCC) TO THE FIRST REFERENCE
*                                  ENTRY
TABLELEN EQU   *-TABLE             TABLE LENGTH
         TITLE '-- XREFIN/XREFOUT -- XREFRCD MAP - XREF FILE RECORD'
XREFRCD  DSECT ,
XRRLABEL DS    CL8                 REFERENCED LABEL
XRRMODUL DS    CL8                 CONTAINING MODULE
XRRTSTMP DS    D                   ONE'S COMPLEMENTED TIME STAMP
XRRHEAD  EQU   XREFRCD,*-XREFRCD   HEADER AREA
         SPACE 1
XRROFFS  DS    H                   OFFSET IN XRRDATA TO REFERENCE
*                                  ENTRIES
XRRDATA  DS    CL(PRTLEN-1)        XREF DATA
XRRLEN   EQU   *-XREFRCD           L'XREF RECORD
         TITLE '-- XREFOUT -- STAMP MAP - OBSELETE REFERENCES CONTROL A*
               ND LABEL REFERENCES COUNTER'
STAMP    DSECT ,
STMPHEAD DS    XL(L'XRRHEAD)       COPY OF XRRHEAD
STMPLABL EQU   XRRLABEL-XRRHEAD+STMPHEAD,L'XRRLABEL
STMPMODU EQU   XRRMODUL-XRRHEAD+STMPHEAD,L'XRRMODUL
STMPTIME EQU   XRRTSTMP-XRRHEAD+STMPHEAD,L'XRRTSTMP
STMPHITS DS    PL3                 REFERENCES COUNTER FOR THE CURRENT
*                                  LABEL/MODULE COMBINATION
STMPLEN  EQU   *-STAMP
         TITLE 'XREFIN -- INITIALIZATION'
*************************************************************
*        STANDARD NON-REENTRANT ENTRY LINKAGE WITH TWO BASE *
*        REGISTERS.                                         *
*************************************************************
         SPACE 1
XREFIN   #ENTER XREFIN
               BASES=(BASE1REG,BASE2REG)
         SPACE 3
*************************************************************
*        OPEN THE LISTING FILE. IF IT DOES NOT EXIST, THEN  *
*        TERMINATE.                                         *
*************************************************************
         SPACE 1
         OPEN  LISTING             OPEN THE LISTING FILE
         TM    DCBOFLGS-IHADCB+LISTING,DCBOFOPN DID IT OPEN OK?
         BZ    EXIT16              NO, TERMINATE
         SPACE 3
*************************************************************
*        OPEN THE REMAINING FILES.                          *
*************************************************************
         SPACE 1
         OPEN  (SYSPRINT,OUTPUT,XREF,OUTPUT,SYSTERM,OUTPUT)
         SPACE 3
*************************************************************
*        GET A COMPLEMENTED TIME STAMP. NOTE, THE ACTUAL    *
*        VALUE OF THE TIMESTAMP DOESN'T PARTICULARLY        *
*        MATTER SINCE IT IS NOT USED FOR REPORTING A TIME   *
*        OR DATE. INSTEAD, IT IS USED BY THE XREF-SORT      *
*        ROUTINE (CALLED BY XREFOUT) TO FORCE A LIFO        *
*        ORDERING FOR POSSIBLY REDUNDANT LABELS THAT MIGHT  *
*        EXIST IN THE ACCUMULATION FILE DUE TO              *
*        RE-ASSEMBLIES.                                     *
*************************************************************
         SPACE 1
         STCK  XRRTSTMP-XRRHEAD+HEAD STORE A TIME STAMP
         XC    XRRTSTMP-XRRHEAD+HEAD,=(L'XRRTSTMP)X'FF' COMPLEMENT IT
         SPACE 3
*************************************************************
*        INITIALIZE MISCELLANEOUS COUNTERS.                 *
*************************************************************
         SPACE 1
         SR    INPUTCTR,INPUTCTR   CLEAR LISTING FILE COUNTER
         SR    XREFCTR,XREFCTR     CLEAR XREF FILE COUNTER
         SR    SYSPCTR,SYSPCTR     CLEAR SYSPRINT FILE COUNTER
         SPACE 1
         SR    TYPEREG,TYPEREG     CLEAR XREF TYPE TABLE PTR
         TITLE 'XREFIN -- MAIN PROCESSING LOOP'
*************************************************************
*        GET THE NEXT LISTING FILE RECORD.                  *
*************************************************************
         SPACE 1
GETLOOP  GET   LISTING             LOCATE THE NEXT RECORD
         LA    INPUTCTR,1(,INPUTCTR) COUNT IT
         LR    R14,R1              --> IT
         LH    R15,DCBLRECL-IHADCB+LISTING GET ITS LENGTH (MAYBE)
         SPACE 1
         TM    DCBRECFM-IHADCB+LISTING,DCBRECF RECFM=F OR U?
         BNZ   GOTREC              YES, AOK
         LH    R15,0(,R1)          NO, GET L'DATA+4
         SH    R15,=H'4'           GET L'DATA; VALID?
         BNP   GETLOOP             NO, IGNORE IT
         LA    R14,4(,R1)          YES, --> DATA
GOTREC   DS    0H
         SPACE 1
         LA    R0,XRL              --> LOCAL BUFFER
         LA    R1,L'XRL            GET ITS LENGTH
         ICM   R15,8,=C' '         GET PAD CHARACTER
         MVCL  R0,R14              COPY RCD TO LOCAL BUFFER
         SPACE 3
*************************************************************
*        LOOK FOR AN XREF TITLE LINE FOR ONE OF THE         *
*        SUPPORTED XREF FORMATS.                            *
*************************************************************
         SPACE 1
         TM    FLAG,EOXREFF        PAST XREF YET?                   V11
         BNZ   XREFSKIP            YES, SKIP ALL THIS               V11
         CLI   XRL,C'1'            NO, IS THIS A TITLE LINE?
         BE    TITLXAMN            YES, GO EXAMINE IT               V11
         TM    FLAG,TITNEXT        MAYBE, CHK AGAIN (MACHINE CCC)   V11
         BZ    TITNXTCK            NO, SKIP                   DBC 01/85
TITLXAMN NI    FLAG,255-TITNEXT    YES, CLEAR "TITLE NEXT"    DBC 01/85
         LTR   TYPEREG,TYPEREG     AM I ALREADY PROCESSING    DBC 01/85
*                                  THE XREF?                  DBC 01/85
         BNZ   XREFSKIP            YES, NO NEED TO EXAMINE    DBC 01/85
*                                  THIS TITLE LINE            DBC 01/85
         SPACE 1                                              DBC 01/85
         LA    R1,TYPES-4          NO, --> TYPES VECTOR
         BALR  R14,0               LOOPER                     DBC 01/85
         LA    R1,4(,R1)           --> NEXT VECTOR ENTRY
         ICM   TYPEREG,15,0(R1)    GET NEXT VECTOR ENTRY; ANY MORE?
         BZ    TITNXTCK            NO, NOT A SUPPORTED XREF SECTION V11
         USING TABLE,TYPEREG       YES, DCL TABLE BASE
         EX    0,TTCHK             IS THIS A RECOGNIZED TITLE LINE?
         BNER  R14                 NOT YET, KEEP THINKING ON IT
         SPACE 3
*************************************************************
*        A RECOGNIZED TITLE LINE HAS BEEN FOUND. EXTRACT    *
*        THE ASSEMBLY NAME FROM IT.                         *
*************************************************************
         SPACE 1
         EX    0,MOGET             GET THE ASSEMBLY NAME (IF ANY)
         TM    XRRMODUL-XRRHEAD+HEAD,255-C' ' IS THE ASSEMBLY NAME
*                                  NULL?                      DBC 01/85
         BNZ   MNOTBLNK            NO, PROCEED                DBC 01/85
         MVC   XRRMODUL-XRRHEAD+HEAD,=CL(L'XRRMODUL)'*BLANK*' DBC 01/85
*                                  YES, RESET TO SOMETHING    DBC 01/85
*                                  READABLE                   DBC 01/85
MNOTBLNK MVC   XREFTITN,XRRMODUL-XRRHEAD+HEAD COPY 2 INFO MSG DBC 01/85
TITMSG   #PUT  XREFTIT             SEND THE INFO MSG          DBC 01/85
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        WRITE A TIMESTAMP RECORD FOR THIS ASSEMBLY. SET A  * DBC 01/85
*        SPECIAL FAKE SYMBOL FIELD IN IT SO THAT IT WILL    * DBC 01/85
*        SORT LOWER THAN ALL XREF RECORDS BUT NOT LOWER     * DBC 01/85
*        THAN ANY PURGE RECORDS.                            * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                              DBC 01/85
         TM    DCBOFLGS-IHADCB+XREF,DCBOFOPN XREF FILE EXIST? DCB 01/85
         BZ    TITNXTCK            NO, FORGET IT              DBC 01/85
         PUT   XREF                YES, GET NEXT OUTPUT BUFFR DBC 01/85
         USING XREFRCD,R1          DCL BUFFER BASE            DBC 01/85
         MVC   XRRHEAD,HEAD        COPY ASSEMBLY NAME AND     DBC 01/85
*                                  TIMESTAMP                  DBC 01/85
         MVC   XRRLABEL,=XL8'40FF000000000000' SET            DBC 01/85
*                                  LOW-SORTING "SYMBOL"       DBC 01/85
         #TEST SIZE=(L'XRRLABEL,EQ,8)                         DBC 01/85
         DROP  R1                  RELEASEXREF RCD BASE       DBC 01/85
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        SEE IF THE NEXT LISTING LINE WILL BE A TITLE LINE  * DBC 01/85
*        (MACHINE CCC).                                     * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                                    V11
TITNXTCK CLI   XRL,X'89'           NO, IS NEXT A TITLE?             V11
         BE    SETITNXT            YES, GO SET SIGNAL               V11
         CLI   XRL,X'8B'           MAYBE, CHECK AGAIN               V11
         BNE   XREFSTAT            NO, DONE HERE                    V11
SETITNXT OI    FLAG,TITNEXT        YES, SET SIGNAL                  V11
         SPACE 3
*************************************************************
*        A NON-TITLE LINE HAS BEEN RECEIVED. EXAMINE IT TO  *
*        SEE WHAT I CAN DO WITH IT.                         *
*************************************************************
         SPACE 1
XREFSTAT LTR   TYPEREG,TYPEREG     AM I XREFING NOW?
         BZ    XREFSKIP            NO, SKIP
         TM    DCBOFLGS-IHADCB+XREF,DCBOFOPN YES, DOES THE    DBC 01/85
*                                  XREF OUTPUT FILE EXIST?    DBC 01/85
         BZ    XREFSKIP            NO, FORGET IT
         CLC   XRL+2(L'XRL-2),XRL+1 YES, DOES THIS DATA LINE CONTAIN
*                                  ANYTHING AT ALL?
         BE    XREFSKIP            NO, IGNORE IT
         CLI   XRL+1,C'='          YES, INTO LITTERALS YET?         V11
         BNE   XREFGOTL            NO, PROCEED                      V11
         OI    FLAG,EOXREFF        YES, SIGNAL EO-XREF              V11
         B     XREFSKIP            DONE HERE                        V11
XREFGOTL DS    0H                                                   V11
         SPACE 3
*************************************************************
*        I HAVE RECEIVED A LINE WITHIN THE CROSS-REFERENCE  *
*        AND I HAVE AN XREF OUTPUT FILE AVAILABLE. SEE IF   *
*        THIS IS AN XREF DATA LINE.                         *
*************************************************************
         SPACE 1
         EX    0,XRCHK             IS THERE A DIGIT HERE?
         BNO   XREFSKIP            NO, NOT AN XREF DATA LINE; IGNORE
         B     GOTXR               YES, PROCEED
         SPACE 1
EDXXRCHK TM    XRL+6,B'11110000'   EDX EXTENDED CHECK: DIGIT HERE?
         BO    GOTXR               YES, PROCEED
         TM    XRL+24,B'11110000'  NO, HOW ABOUT HERE?
         BNO   XREFSKIP            NO, NOT AN XREF DATA LINE; IGNORE
         SPACE 3
*************************************************************
*        AN XREF DATA LINE HAS BEEN ENCOUNTERED. IF IT      *
*        CONTAINS A LABEL, THEN SAVE A COPY OF IT. IN ANY   *
*        CASE, CONSTRUCT AN XREF OUTPUT RECORD AND WRITE IT *
*        OUT TO THE XREF ACCUMULATION FILE.                 *
*************************************************************
         SPACE 1
GOTXR    EX    0,LBCHK             IS THE LABEL FIELD FILLED?
         BE    XREFNLBL            NO, SKIP                   DBC 01/85
         EX    0,LBGET             YES, SAVE A COPY OF THE LABEL
XREFNLBL DS    0H
         SPACE 1
         PUT   XREF                GET NEXT OUTPUT BUFFER     DBC 01/85
         USING XREFRCD,R1          DCL XREF RECORD BASE
         LA    XREFCTR,1(,XREFCTR) COUNT XREF RECORDS
         SPACE 1
         MVC   XRRHEAD,HEAD        COPY RECORD HEADER
         MVC   XRROFFS,REFSOFFS    SAVE REFERENCES OFFSET
         MVC   XRRDATA,XRL+1       COPY DATA TO XREF RECORD
         #TEST SIZE=(L'XRRDATA,LE,L'XRL-1)
         DROP  R1                  RELEASE XREF RECORD BASE
         DROP  TYPEREG             RELEASE XREF TYPE TABLE BASE
XREFSKIP DS    0H
         SPACE 3
*************************************************************
*        IF A SYSPRINT FILE IS PRESENT, THEN COPY THE       *
*        LISTING LINE OUT TO IT.                            *
*************************************************************
         SPACE 1
         LA    R1,SYSPRINT         --> DCB
         USING IHADCB,R1           DCL DCB BASE
         TM    DCBOFLGS,DCBOFOPN   IS SYSPRINT OPENED?
         BZ    GETLOOP             NO, DONE HERE
         SPACE 1
         TM    DCBRECFM,DCBRECU    YES, RECFM=I?
         TM    DCBRECFM,DCBRECU    YES, RECFM=U?
         BO    SYSPPUTU            YES, GO HANDLE
         TM    DCBRECFM,DCBRECV    NO, RECFM=V?
         BO    SYSPPUTV            YES, GO HANDLE
         SPACE 3
*************************************************************
*        THE SYSPRINT FILE IS RECFM=F.                      *
*************************************************************
         SPACE 1
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT SYSPRINT RECORD
         LR    R0,R1               --> COPY SINK
         LH    R1,DCBLRECL-IHADCB+SYSPRINT GET L'COPY SINK
         LA    R14,XRL             --> INPUT LINE
         LA    R15,L'XRL           GET L'INPUT LINE
         ICM   R15,15,=C' '        GET COPY PADDING CHARACTER
         MVCL  R0,R14              COPY LISTING RECORD
         B     GETLOOP             DONE HERE
         SPACE 3
*************************************************************
*        THE SYSPRINT FILE IS RECFM=U.                      *
*************************************************************
         SPACE 1
         USING IHADCB,R1           RESTORE SYSPRINT DCB BASE
SYSPPUTU LA    R3,L'XRL            GET L'INPUT LINE
         CH    R3,DCBBLKSI         IS LISTING LINE TOO LONG?
         BNH   SYSPULOK            NO, PROCEED
         LH    R3,DCBBLKSI         YES, TRUNCATE
SYSPULOK STH   R3,DCBLRECL         SET NEEDED BUFFER LENGTH
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT THE SYSPRINT LINE
         SPACE 1
         LR    R0,R1               --> COPY SINK
         LR    R1,R3               GET L'COPY SINK
         LA    R2,XRL              --> COPY SOURCE
         MVCL  R0,R2               COPY LISTING LINE
         B     GETLOOP             DONE HERE
         SPACE 3
*************************************************************
*        THE SYSPRINT FILE IS RECFM=V.                      *
*************************************************************
         SPACE 1
         USING IHADCB,R1           RESTORE SYSPRINT DCB BASE
SYSPPUTV LA    R3,L'XRL            GET L'INPUT LINE
         LA    R4,8(,R3)           GET MIN NEEDED BLKSIZE
         SH    R4,DCBBLKSI         COMPARE WITH ACTUAL MAX; OK?
         BNP   SYSPVLOK            YES, PROCEED
         TM    DCBRECFM,DCBRECSB   NO, LRECL>BLKSIZE; CAN THIS BE
*                                  SWALLOWED?
         BNZ   SYSPVLOK            YES, PROCEED
         SR    R3,R4               NO, REDUCE L'DATA APPROPRIATELY
SYSPVLOK LA    R4,4(,R3)           GET NEEDED BUFFER LENGTH
         STH   R4,DCBLRECL         STORE FOR QSAM
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT THE OUTPUT LINE
         SPACE 1
         SLL   R4,16               CREATE AN RDW
         ST    R4,0(,R1)           STORE INTO OUTPUT BUFFER
         LA    R0,4(,R1)           --> DATA COPY SINK
         LR    R1,R3               GET L'COPY SINK
         LA    R2,XRL              --> COPY SOURCE
         MVCL  R0,R2               COPY DATA TO OUTPUT BUFFER
         B     GETLOOP             DONE HERE
         TITLE 'XREFIN -- TERMINATION'
*************************************************************
*        EOD HAS OCCURED ON THE LISTING FILE. DISPLAY ALL   * DBC 01/85
*        COUNTERS.                                          * DBC 01/85
*************************************************************
         SPACE 1
EOLIST   CVD   INPUTCTR,CVDWA      CNVRT LISTING COUNT TO DEC DBC 01/85
         LA    R1,LISTCNT#+L'LISTCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  LISTCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   LISTCNT#+1(L'LISTCNT#-1),0(R1) LEFT ADJUST
         #PUT  LISTCNT           DISPLAY THE MESSAGE
         SPACE 1
         CVD   SYSPCTR,CVDWA       CNVRT SYSPRINT COUNT TO DECIMAL
         LA    R1,SYSPCNT#+L'SYSPCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  SYSPCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   SYSPCNT#+1(L'SYSPCNT#-1),0(R1) LEFT ADJUST
         #PUT  SYSPCNT           DISPLAY THE MESSAGE
         SPACE 1
         CVD   XREFCTR,CVDWA       CNVRT XREF COUNT TO DECIMAL
         LA    R1,XREFCNT#+L'XREFCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  XREFCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   XREFCNT#+1(L'XREFCNT#-1),0(R1) LEFT ADJUST
         #PUT  XREFCNT           DISPLAY THE MESSAGE
         SPACE 3
*************************************************************
*        CLOSE ALL FILES AND FREE THEIR BUFFER POOLS.       *
*************************************************************
         SPACE 1
         LA    R1,LISTING          --> LISTING DCB
         BAL   R14,CLOSE           CLOSE IT
         SPACE 1
         LA    R1,SYSPRINT         --> SYSPRINT DCB
         BAL   R14,CLOSE           CLOSE IT
         SPACE 1
         LA    R1,XREF             --> XREF DCB
         BAL   R14,CLOSE           CLOSE IT
         SPACE 1
         LA    R1,SYSTERM          --> SYSTERM DCB
         BAL   R14,CLOSE           CLOSE IT
         SPACE 3
*************************************************************
*        TERMINATE.                                         *
*************************************************************
         SPACE 1
EXIT     LH    R15,RCD             GET THE COMPLETION CODE
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER
         SPACE 1
EXIT16   MVI   RCD+1,16            SET ERROR RETURN CODE
         B     EXIT                GO TERMINATE
         TITLE 'XREFIN -- CLOSE - DATASET CLOSE AND FREEPOOL ROUTINE'
*************************************************************
*                                                           *
*        CLOSE -- THIS ROUTINE CHECKS TO SEE IF A GIVEN DCB *
*        IS OPEN. IF IT IS, THEN IT IS CLOSED AND ITS I/O   *
*        BUFFERS ARE RELEASED.                              *
*                                                           *
*        INPUTS:                                            *
*              - R1 POINTS TO THE DCB TO BE CLOSED.         *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - THE DCB, IF NECESSARY, IS CLOSED.          *
*              - ALL REGISTERS ARE RESTORED.                *
*                                                           *
*************************************************************
         SPACE 1
         USING IHADCB,R1           DCL DCB BASE
CLOSE    TM    DCBOFLGS,DCBOFOPN   IS THE DCB OPEN?
         BZR   R14                 NO, RETURN TO CALLER
         STM   R14,R2,SAVECLOS     YES, SAVE REGISTERS
         LR    R2,R1               COPY THE DCB PTR
         DROP  R1                  RELREASE OLD DCB BASE
         USING IHADCB,R2           DCL NEW DCB BASE
         SPACE 1
         CLOSE ((R2))              CLOSE THE DCB
         SPACE 1
         FREEPOOL (R2)             RELEASE ITS BUFFERS
         SPACE 1
         LM    R14,R2,SAVECLOS     RESTORE REGISTERS
         DROP  R2                  RELEASE THE DCB BASE
         BR    R14                 RETURN TO CALLER
         TITLE 'XREFIN -- PUTSYST - SYSTERM MESSAGE PRINTING ROUTINE'
*************************************************************
*                                                           *
*        PUTSYST -- THIS ROUTINE WRITES A MESSAGE TO THE    *
*        SYSTERM FILE, IF ANY.                              *
*                                                           *
*        INPUT:                                             *
*              - R1 POINTS TO A MESSAGE BLOCK.              *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - IF A SYSTERM FILE IS OPEN, THEN THE        *
*                MESSAGE HAS BEEN SENT.                     *
*              - ALL REGISTERS ARE RESTORED.                *
*                                                           *
*************************************************************
         SPACE 1
PUTSYST  TM    DCBOFLGS-IHADCB+SYSTERM,DCBOFOPN IS SYSTERM OPEN?
         BZR   R14                 NO, RETURN TO CALLER
         STM   R14,R1,SAVESYST     YES, SAVE REGISTERS
         MVC   DCBLRECL+1-IHADCB+SYSTERM(1),0(R1) YES, SET L'MSG
         LA    R0,1(,R1)           --> MSG
         PUT   SYSTERM,(0)         SEND THE MESSAGE
         LM    R14,R1,SAVESYST     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         TITLE 'XREFIN -- DATA AREA - CROSS-REFERENCE TABLES PROCESSING*
                CONTROLS'
*************************************************************
*        POINTER VECTOR FOR SUPPORTED XREFS.                *
*************************************************************
         SPACE 1
TYPES    DS    0F
         DC    A(ASM)              S/370 XF ASSEMBLER
         DC    A(ASMH2)            XA H ASSEMBLER V2                V11
         DC    A(EDX)              CROSS ASSEMBLER FOR THE SERIES/1
         DC    A(0)                DELIMITER
         SPACE 3
*************************************************************
*        S/370 XF ASSEMBLER                                 *
*************************************************************
         SPACE 1
ASM      DS    0H
         CLC   ASMTTID,XRL+49      TTCHK
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET
         TM    XRL+36,C'0'         XRCHK                            V11
         CLI   XRL+1,C' '          LBCHK                      DBC 01/85
         NOPR  0                   (FILLER)                   DBC 01/85
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+1 LBGET
         DC    H'30'               REFSOFFS
         #TEST SIZE=(*-ASM,EQ,TABLELEN)
         SPACE 1
ASMTTID  DC    C'  CROSS-REFERENCE  '
         SPACE 3                                                    V11
*************************************************************       V11
*        XA H ASSEMBLER VERSION 2                           *       V11
*************************************************************       V11
         SPACE 1                                                    V11
ASMH2    DS    0H                                                   V11
         CLC   ASMH2TTI,XRL+44     TTCHK                            V11
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET                    V11
         TM    XRL+34,C'0'         XRCHK                            V11
         CLC   XRL+10(20),XRL+9    LBCHK                      DBC 01/85
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+1 LBGET                    V11
         DC    H'30'               REFSOFFS                         V11
         #TEST SIZE=(*-ASMH2,EQ,TABLELEN)                           V11
         SPACE 1                                                    V11
ASMH2TTI DC    C'  CROSS REFERENCE  '                               V11
         SPACE 3
*************************************************************
*        CROSS ASSEMBLER FOR THE SERIES/1                   *
*************************************************************
         SPACE 1
EDX      DS    0H
         CLC   EDXTTID,XRL+39      TTCHK
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET
         B     EDXXRCHK            XRCHK: EXTENDED CHECKING NEEDED
         CLI   XRL+11,C' '         LBCHK                      DBC 01/85
         NOPR  0                   (FILLER)                   DBC 01/85
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+11 LBGET
         DC    H'17'               REFSOFFS
         #TEST SIZE=(*-EDX,EQ,TABLELEN)
         SPACE 1
EDXTTID  DC    C'  CROSS-REFERENCE LISTING  '
         SPACE 1
         DROP  ,                   RELEASE ALL BASES
         TITLE 'XREFIN -- DATA AREA (NON-REENTRANT)'
*************************************************************
*        DATA CONTROL BLOCKS.                               *
*************************************************************
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
         SPACE 1
LISTING  DCB   DDNAME=LISTING,DSORG=PS,MACRF=GL,EXLST=LISTXLST,        *
               EODAD=EOLIST
         SPACE 1
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PL,EXLST=SYSPXLST
         SPACE 1
XREF     DCB   DDNAME=XREF,DSORG=PS,MACRF=PL,EXLST=XREFXLST,RECFM=FB,  *
               LRECL=XRRLEN
         SPACE 1
SYSTERM  DCB   DDNAME=SYSTERM,DSORG=PS,MACRF=PM,RECFM=UA,LRECL=255,    *
               BLKSIZE=255
         SPACE 1
         POP   PRINT
         SPACE 1
         DS    0F                  EXIT LISTS
LISTXLST DC    X'85',AL3(LISTOPEN)
SYSPXLST DC    X'85',AL3(SYSPOPEN)
XREFXLST DC    X'85',AL3(XREFOPEN)
         SPACE 3
*************************************************************
*        MISCELLANEOUS DATA.                                *
*************************************************************
         SPACE 1
CVDWA    DS    D                   CVD WORK AREA
         SPACE 1
         DS    0D
HEAD     DC    CL(L'XRRHEAD)' '    XREF RECORD HEADER CONSTRUCTION AREA
         SPACE 1
SAVESYST DS    4A                  SAVE AREA FOR PUTSYST
SAVECLOS DS    5A                  SAVE AREA FOR CLOSE
         SPACE 1
RCD      DC    H'0'                PROGRAM RETURN CODE
         SPACE 1
FLAG     DC    AL1(TITNEXT)        LOCAL PROGRAM CONTROL FLAGS      V11
GOTSUTIT EQU   B'10000000'         AN XREF LISTING SUB-TITLE HAS BEEN
*                                  SAVED IN THE XREF DATA SET.
TITNEXT  EQU   B'01000000'         A TITLE LINE IS NEXT (MACHINE    V11
*                                  CCC)                             V11
EOXREFF  EQU   B'00100000'         PAST EO-XREF                     V11
         SPACE 1
         LTORG ,                   LITTERAL POOL
         SPACE 3
*************************************************************
*        BUFFERS AND MESSAGES.                              *
*************************************************************
         SPACE 3
XRL      DS    CL(PRTLEN)          LOCAL INPUT DATA BUFFER
         SPACE 3
         DC    AL1(XREFTITL)       DEFAULT IS SHORT TITLE
XREFTIT  DC    C'1CROSS-REFERENCE INPUT FOR '                 DBC 01/85
XREFTITN DS    CL(L'XRRMODUL)                                 DBC 01/85
XREFTITL EQU   *-XREFTIT
         SPACE 3
         DC    AL1(LISTCNTL)
LISTCNT  DC    C'0LISTING RECORDS READ -'
LISTCNT# DC    X'40202020202020202120'
LISTCNTL EQU   *-LISTCNT
         DC    CL(L'LISTCNT#-1)' '
         SPACE 3
         DC    AL1(SYSPCNTL)
SYSPCNT  DC    C' SYSPRINT RECORDS WRITTEN -'
SYSPCNT# DC    X'40202020202020202120'
SYSPCNTL EQU   *-SYSPCNT
         DC    CL(L'SYSPCNT#-1)' '
         SPACE 3
         DC    AL1(XREFCNTL)
XREFCNT  DC    C' XREF RECORDS WRITTEN -'
XREFCNT# DC    X'40202020202020202120'
XREFCNTL EQU   *-XREFCNT
         DC    CL(L'XREFCNT#-1)' '
         TITLE 'XREFIN -- LISTOPEN - DCB OPEN EXIT FOR THE LISTING FILE*
               '
*************************************************************
*        NOTE, THIS ROUTINE IS ALSO BRANCHED TO FROM        *
*        SYSPOPEN.                                          *
*************************************************************
         SPACE 1
         USING IHADCB,R1           DCL LISTING/SYSPRINT DCB BASE
         USING LISTOPEN,R15        DCL LOCAL BASE
LISTOPEN OI    DCBRECFM,DCBRECBR   FORCE BLOCKING                   V11
         SR    R3,R3               CLEAR
         ICM   R3,3,DCBBLKSI       GET BLKSIZE
         SR    R4,R4               CLEAR
         ICM   R4,3,DCBLRECL       GET LRECL
         SPACE 1
         TM    DCBRECFM,DCBRECU    RECFM=U OR UNDEFINED?
         BNM   LORFMU              YES, GO HANDLE
         TM    DCBRECFM,DCBRECF    NO, RECRM=F?
         BNZ   LORFMF              YES, GO HANDLE
         SPACE 3
*************************************************************
*        LISTING/SYSPRINT RECFM=V.                          *
*************************************************************
         SPACE 1
         LTR   R4,R4               IS AN LRECL DEFINED?
         BNZ   LOVRSIZE            YES, PROCEED
         LA    R4,259              NO, GET DEFAULT
LOVRSIZE STH   R4,DCBLRECL         STORE LRECL
         LA    R4,4(,R4)           GET NECESSARY BLKSIZE
         CR    R4,R3               IS GIVEN BLKSIZE BIG ENOUGH?
         BNH   LOVBSIZE            YES, PROCEED
         TM    DCBRECFM,DCBRECSB   NO, DOES IT MATTER? (SPANNED RECS?)
         BNZ   LOVBSIZE            NO, PROCEED
         LR    R3,R4               YES, RESET THE BLKSIZE
LOVBSIZE STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         SPACE 3
*************************************************************
*        LISTING/SYSPRINT RECFM=U.                          *
*************************************************************
         SPACE 1
LORFMU   OI    DCBRECFM,DCBRECU    FORCE RECFM=U
         LTR   R3,R3               BLKSIZE DEFINED?
         BNZ   LOUBSIZE            YES, PROCEED
         LTR   R3,R4               NO, GET LRECL; DEFINED?
         BNZ   LOUBSIZE            YES, PROCEED
         LA    R3,255              NO, GET DEFAULT BLKSIZE
LOUBSIZE STH   R3,DCBBLKSI         SET BLKSIZE
         STH   R3,DCBLRECL         FORCE LRECL=BLKSIZE
         BR    R14                 RETURN TO OPEN
         SPACE 3
*************************************************************
*        LISTING/SYSPRINT RECFM=F.                          *
*************************************************************
         SPACE 1
LORFMF   LTR   R4,R4               IS A LRECL GIVEN?
         BNZ   LOFRSIZE            YES, PROCEED
         LA    R4,255              NO, LOAD DEFAULT VALUE
LOFRSIZE SR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               ISURE INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BH    LOFBSIZE            YES, PROCEED
         LR    R3,R4               NO, SET FILE UNBLOCKED
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
LOFBSIZE STH   R4,DCBLRECL         STORE LRECL
         STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 3
         LTORG ,                   LOCAL LITTERAL POOL
         TITLE 'XREFIN -- SYSPOPEN - DCB OPEN EXIT FOR THE SYSPRINT FIL*
               E'
*************************************************************
*        NOTE, AFTER SOME INITIAL PROCESSING, THIS ROUTINE  *
*        XFERS TO LISTOPEN TO COMPLETE ITS PROCESSING.      *
*************************************************************
         SPACE 1
         USING IHADCB,R1           DCL SYSPRINT DCB BASE
         USING SYSPOPEN,R15        DCL LOCAL PROGRAM BASE
SYSPOPEN L     R2,=A(LISTING)      --> LISTING DCB
         CLI   DCBRECFM,0          IS SYSPRINT RECFM DEFINED?
         BNE   SPORFMOK            YES, PROCEED
         MVC   DCBRECFM,DCBRECFM-IHADCB(R2) NO, COPY FROM LISTING FILE
SPORFMOK ICM   R0,3,DCBLRECL       IS SYSPRINT LRECL DEFINED?
         BNZ   SPOLSZOK            YES, PROCEED
         MVC   DCBLRECL,DCBLRECL-IHADCB(R2) NO, COPY FROM LISTING FILE
SPOLSZOK ICM   R0,3,DCBBLKSI       IS SYSPRINT BLKSIZE DEFINED?
         BNZ   SPOBSZOK            YES, PROCEED
         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R2) NO, COPY FROM LISTING FILE
SPOBSZOK DS    0H
         SPACE 3
*************************************************************
*        XFER CONTROL TO LISTOPEN.                          *
*************************************************************
         SPACE 1
         L     R15,=A(LISTOPEN)    --> LISTOPEN
         DROP  R15                 RELEASE LOCAL PROGRAM BASE
         BR    R15                 XFER TO LISTOPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 3
         LTORG ,                   LOCAL LITTERAL POOL
         TITLE 'XREFIN -- XREFOPEN - DCB OPEN EXIT FOR THE XREF FILE'
         USING IHADCB,R1           DCL XREF DCB BASE
         USING XREFOPEN,R15        DCL LOCAL PROGRAM BASE
XREFOPEN LH    R3,DCBBLKSI         GET BLKSIZE
         LTR   R3,R3               DEFINED?
         BP    XRFBSZOK            YES, PROCEED
         LH    R3,=X'1000'         NO, GET DEFAULT MAX VALUE
XRFBSZOK LH    R4,DCBLRECL         GET LRECL
         SR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               GET INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BH    XRFBSZO2            YES, PROCEED
         LR    R3,R4               NO, RESET LRECL=BLKSIZE
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
XRFBSZO2 STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 3
         LTORG ,                   LOCAL LITTERAL POOL
         TITLE 'XREFOUT -- INITIALIZATION/TERMINATION'
*************************************************************
*        STANDARD NON-REENTRANT ENTRY LINKAGE WITH TWO      *
*        BASES.                                             *
*************************************************************
         SPACE 1
XREFOUT  #ENTER XREFOUT
               BASES=(BASE1REG,BASE2REG)
         SPACE 3
*************************************************************
*        COMPLETE THE TITLE LINE FROM PARM FIELD            *
*        INFORMATION.                                       *
*************************************************************
         SPACE 1
         ICM   R1,7,1(R1)          --> PARM FIELD; EXIST?
         BZ    NOPARM              NO, SKIP
         LH    R15,0(,R1)          YES, GET L'PARM DATA
         LTR   R15,R15             NULL?
         BNP   NOPARM              YES, SKIP
         MVC   TITLFOR,=C'FOR'     NO, ADJUST TITLE TEXT
         LA    R14,2(,R1)          --> PARM FIELD DATA
         LA    R0,TITLWHOM         --> TITLE FIELD
         LA    R1,L'TITLWHOM       GET L'COPY SINK
         ICM   R15,8,=C' '         LOAD PAD CHARACTER
         MVCL  R0,R14              COPY PARM TO TITLE
NOPARM   DS    0H
         SPACE 3
*************************************************************
*        OPEN THE XREF FILE FOR INPUT.                      *
*************************************************************
         SPACE 1
         OPEN  XREFO               OPEN THE XREF FILE FOR INPUT
         TM    DCBOFLGS-IHADCB+XREFO,DCBOFOPN DOES THE FILE EXIST?
         BZ    EXITO16             NO, TEMINATE
         SPACE 3
*************************************************************
*        OPEN THE SYSPRINT FILE FOR OUTPUT.                 *
*************************************************************
         SPACE 1
         OPEN  (SYSPRINO,OUTPUT)   OPEN THE SYSPRINT FILE
         SPACE 3
*************************************************************
*        FILL IN THE SORT/MERGE COMMANDS SKELETON.          *
*************************************************************
         SPACE 1
         LA    R1,L'XRRHEAD        GET LENGTH OF SORT FIELD
         CVD   R1,CVDWAO           CNVRT TO DECIMAL
         UNPK  CMDSORLN,CVDWAO     CNVRT TO EBCDIC
         OI    CMDSORLN+L'CMDSORLN-1,B'11110000' FIX THE SIGN
         SPACE 1
         LA    R1,XRRLEN           GET LENGTH OF SORT RECORD
         CVD   R1,CVDWAO           CNVRT TO DECIMAL
         UNPK  CMDRCDLN,CVDWAO     CNVRT TO EBCDIC
         OI    CMDRCDLN+L'CMDRCDLN-1,B'11110000' FIX THE SIGN
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        GET A COMPLIMENTED TIMESTAMP WHICH WILL BE USED TO * DBC 01/85
*        RESET THE TIMESTAMP FIELDS IN ALL RECORDS WRITTEN  * DBC 01/85
*        TO THE REWRITE FILE.                               * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                              DBC 01/85
         STCK  RSETSTMP            GET THE CLOCK              DBC 01/85
         XC    RSETSTMP,=8X'FF'    COMPLIMENT IT              DBC 01/85
         SPACE 3
*************************************************************
*        INVOKE SORT/MERGE. NOTE, THE MAJOR PROCESSING IS   *
*        DONE IN THE E35 (SORTOUT) EXIT.                    *
*************************************************************
         SPACE 1
         LA    R1,PLISTPTR         --> THE S/M PLIST
         LINK  EP=SORT             INVOKE SORT/MERGE
         SPACE 3
*************************************************************
*        CLOSE FILES AND FREE BUFFERS.                      *
*************************************************************
         SPACE 1
         CLOSE REWRITE             CLOSE THE XREF/REWRITE FILE
         FREEPOOL XREFO            FREE ITS BUFFERS
         SPACE 1
         TM    DCBOFLGS-IHADCB+SYSPRINO,DCBOFOPN WAS SYSPRINT USED?
         BZ    EXITO               NO, DONE HERE
         CLOSE SYSPRINO            YES, CLOSE IT
         FREEPOOL SYSPRINO         FREE ITS BUFFERS
         SPACE 3
*************************************************************
*        RETURN TO CALLER.                                  *
*************************************************************
         SPACE 1
EXITO    LH    R15,RCDO            GET THE RETURN CODE
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER
         SPACE 1
EXITO16  MVI   RCDO+1,16           SET ERROR RETURN CODE
         B     EXITO               RETURN TO CALLER
         DROP  ,                   RELEASE ALL BASES
         TITLE 'XREFOUT -- SORTIN - SORT/MERGE E15 (INPUT) EXIT'
*************************************************************
*        STANDARD NON-REENTRANT ENTRY LINKAGE.              *
*************************************************************
         SPACE 1
SORTIN   #ENTER ESDTYPE=NONE,BASES=(BASE1REG)
         SPACE 3
*************************************************************
*        READ THE NEXT RECORD AND PASS IT TO SORT/MERGE.    *
*************************************************************
         SPACE 1
         GET   XREFO               LOCATE THE NEXT RECORD
         SPACE 1
         #EXIT ((R14,R0),(R2,R12)),RC=12 PASS IT (VIA R1) TO SORT/MERGE
         SPACE 3
*************************************************************
*        EOD HAS OCCURED. TERMINATE THE INPUT PHASE.        *
*************************************************************
         SPACE 1
EOXREF   #EXIT ((R14,R12)),RC=8    TELL SORT/MERGE "NO MORE INPUT"
         DROP  ,                   RELEASE ALL BASES
         TITLE 'XREFOUT -- SORTOUT - SORT/MERGE E35 (OUTPUT) EXIT'
         #PUT  SUBAD=PUTSYSP,MF=INIT MACRO RESET
         SPACE 3
*************************************************************
*        STANDARD NON-REENTRANT ENTRY LINKAGE.              *
*************************************************************
         SPACE 1
SORTOUT  #ENTER ESDTYPE=NONE,BASES=(BASE1REG)
         L     RCDPTR,0(,R1)       --> THE OUTPUT RECORD
         USING XREFRCD,RCDPTR      DCL A BASE FOR IT
         SPACE 3
*************************************************************
*        IF THIS IS THE FIRST OUTPUT RECORD, THEN CLOSE AND *
*        THEN RE-OPEN THE XREF FILE FOR OUTPUT.             *
*************************************************************
         SPACE 1
         TM    FLAGO,OUTNOW        1ST OUTPUT RECORD?
         BNZ   OUTCONT             NO, SKIP INITIALIZATION
         OI    FLAGO,OUTNOW        YES, CLOSE INIT GATE
         SPACE 1
         CLOSE XREFO               CLOSE THE XREF INPUT FILE
         SPACE 1                                              DBC 01/85
         MVC   DCBDDNAM-IHADCB+REWRITE,=CL8'REWRITE' RESET THE DDNAME
         OPEN  (REWRITE,OUTPUT)    RE-OPEN FOR OUTPUT
OUTCONT  DS    0H
         SPACE 3
*************************************************************
*        IF THIS IS THE LAST CALL SIGNAL (RCDPTR=0), THEN   *
*        SET UP A FAKE RECORD POINTER SO THAT I CAN PROCEED *
*        TO FORCE THE OUTPUT OF PREVIOUSLY ACCUMULATED      *
*        DATA.                                              *
*************************************************************
         SPACE 1
         LTR   RCDPTR,RCDPTR       ANY MORE RECORDS?
         BNZ   OUTPROCD            YES, PROCEED
         LA    RCDPTR,DUMYHEAD     NO, --> DUMMY LAST RECORD
OUTPROCD DS    0H
         SPACE 3                                              DBC 07/84
************************************************************* DBC 07/84
*        IF THE CURRENT RECORD IS A PURGE CONTROL RECORD,   * DBC 07/84
*        THEN MOVE THE NAME OF THE MODULE TO BE MERGED OVER * DBC 07/84
*        TO THE MODULE NAME FIELD SO AS NOT TO MESS UP      * DBC 07/84
*        SUBSEQUENT PROCESSING.                             * DBC 07/84
************************************************************* DBC 07/84
         SPACE 1                                              DBC 07/84
         CLI   XRRLABEL,C' '       P.C.R. OR TIMESTAMP RCD?   DBC 01/85
         BH    NOTPCR              NO, XREF RECORD; SKIP      DBC 01/85
         BL    OUTNEXT             NO, GARBAGE, DELETE IT     DBC 01/85
         CLI   XRRLABEL+1,X'FF'    YES, TIMESTAMP RCD?        DBC 01/85
         BE    NOTPCR              YES, SKIP                  DBC 01/85
         SPACE 1                                              DBC 01/85
         MVC   RJBUF(L'XRRMODUL),XRRLABEL+1 NO, GET THE NAME  DBC 07/84
*                                  OF THE MODULE TO PURGE     DBC 07/84
         #TEST SIZE=(L'RJBUF,GE,L'XRRMODUL)                   DBC 07/84
         MVC   XRRLABEL+1(L'XRRLABEL-1),XRRLABEL CLEAR JUNK   DBC 07/84
         MVC   XRRMODUL,RJBUF      COPY MODULE NAME TO PROPER DBC 07/84
*                                  PLACE                      DBC 07/84
NOTPCR   DS    0H                                             DBC 07/84
         SPACE 3
*************************************************************
*        EXAMINE THE CURRENT RECORD TO SEE WHAT             *
*        RELATIONSHIP IT BEARS TO THE PREVIOUSLY RECEIVED   *
*        RECORD.                                            *
*************************************************************
         SPACE 1
         ICM   R3,15,STMPCRNT      --> CURRENT REFERENCES     DBC 07/84
*                                  ACCUM CONTROL BLK; EXIST?  DBC 07/84
         BZ    DIFMODUL            NO, (1ST CALL FROM S/M);   DBC 07/84
*                                  GO HANDLE LABEL/MODULE     DBC 07/84
*                                  COMBO SWITCH               DBC 07/84
         USING STAMP,R3            YES, DCL CNTL ENTRY BASE   DBC 07/84
         CLC   =C'  ',STMPLABL     ARE REFERENCES FROM THE    DBC 01/85
*                                  CURRENT ASSEMBLY BEING     DBC 07/84
*                                  PURGED?                    DBC 07/84
         BNE   NOTPURGE            NO, PROCEED                DBC 01/85
         CLC   XRRMODUL,STMPMODU   YES, IS THE NEW RECORD     DBC 07/84
*                                  FROM THE CURRENT ASSEMBLY? DBC 07/84
         BE    OUTNEXT             YES, IGNORE IT             DBC 07/84
NOTPURGE DS    0H                  NO, PROCEED (FOR NOW)      DBC 07/84
         SPACE 1                                              DBC 07/84
         CLC   XRRHEAD,OUTHEAD     IS THE CURRENT RECORD FOR THE SAME
*                                  LABEL IN THE SAME ASSEMBLY OF THE
*                                  SAME MODULE AS WAS THE     DBC 01/85
*                                  PRIOR RECORD?              DBC 01/85
         BE    CNTREFS             YES, GO COUNT THE NUMBER OF
*                                  REFERENCES THAT IT CONTAINS
         CLC   XRRLABEL(L'XRRLABEL+L'XRRMODUL),OUTLABEL NO, IS THE
*                                  CURRENT RECORD FOR THE SAME LABEL IN
*                                  THE SAME MODULE BUT IN A DIFFERENT
*                                  (OLDER) ASSEMBLY?
         BE    OUTNEXT             YES, IGNORE
         CLC   XRRLABEL,OUTLABEL   NO, IS THE CURRENT RECORD  DBC 07/84
*                                  FOR THE SAME LABEL IN A    DBC 07/84
*                                  DIFFERENT ASSEMBLY?        DBC 07/84
         BE    DIFMODUL            YES, GO HANDLE             DBC 07/84
         SPACE 3
*************************************************************
*        THE CURRENT RECORD IS THE FIRST FOR A NEW LABEL.   *
*        BEFORE I CAN PROCESS IT, I MUST FIRST DUMP (TO THE *
*        PRINTER) MY ACCUMULATORS FOR THE PREVIOUS LABEL.   *
*************************************************************
         SPACE 1                                              DBC 07/84
         CLI   STMPLABL,C' '       WAS THE PRECEEDING RECORD  DBC 01/85
*                                  FOR A TIMESTAMP RECORD OR  DBC 01/85
*                                  A PURGED ASSEMBLY?         DBC 01/85
         BE    DIFMODUL            YES, THERE IS NOTHING TO   DBC 01/85
*                                  DISPLAY                    DBC 07/84
         SPACE 1
         NI    FLAGO,255-NOTFOOLD  NO, THIS LABEL MIGHT BE A  DBC 01/85
*                                  LEFTOVER FROM A PRIOR      DBC 01/85
*                                  ASSEMBLY THAT HAS ACTUALLY DBC 01/85
*                                  BEEN DELETED IN A MORE     DBC 01/85
*                                  RECENT ASSEMBLY. OR IT     DBC 01/85
*                                  MIGHT BE FROM AN           DBC 01/85
*                                  "XREF(FULL)" ASSEMBLY AND  DBC 01/85
*                                  NOT ACTUALLY HAVE ANY      DBC 01/85
*                                  REFERENCES. I.E., ITS      DBC 01/85
*                                  TOTAL REFERENCE COUNT      DBC 01/85
*                                  MIGHT BE ZERO.             DBC 01/85
         MVC   XRPLABEL,OUTLABEL   COPY PREV LABEL TO THE PRINT LINE
         SPACE 1
         MVI   XRPERRF,C' '        CLEAR THE OVERFLOW ERROR SIGNAL
         TM    FLAGO,STMPOVFL      DID A MODULE NAMES OVERFLOW OCCUR
*                                  FOR THIS LABEL?
         BZ    REFNOFLW            NO, PROCEED
         MVI   XRPERRF,C'*'        YES, SET THE VISUAL SIGNAL
         NI    FLAGO,255-STMPOVFL  CLEAR THE CONTROL SIGNAL
REFNOFLW DS    0H
         SPACE 1
         LM    R3,R5,STMPCTL       LOAD STAMPS SCAN CONTROL
         DROP  R3                  RELEASE OLD STAMP PTR BASE DBC 07/84
         USING STAMP,R3            DCL NEW STAMP BASE
         SLR   R5,R4               --> LAST ENTRY             DBC 01/85
         SLR   R3,R4               --> 0TH ENTRY (1-ORIGIN)   DBC 01/85
NEXTALIN MVI   XRPENTS,C' '        CLEAR REFERENCES DISPLAY -
         MVC   XRPENTS+1(L'XRPENTS-1),XRPENTS FIELDS
         LA    R2,XRPENTS          --> SO-FIELDS
         LA    R0,XRPENTCT         GET # OF DISPLAY FIELDS
NEXTAREF BXH   R3,R4,LASTALIN      --> NEXT ACCUMULATOR
         CLC   STMPLABL,OUTLABEL   A COUNTER FOR THE PREVIOUS LABEL?
         BNE   NEXTAREF            NO, SKIP
         CP    STMPHITS,=P'0'      YES, ZERO HITS HERE?       DBC 01/85
         BE    NEXTAREF            YES, SKIP THIS ASSEMBLY    DBC 01/85
         OI    FLAGO,NOTFOOLD      NO, REMEMBER THAT THIS     DBC 01/85
*                                  LABEL REALLY DOES HAVE     DBC 01/85
*                                  REFERENCES.                DBC 01/85
         SPACE 1                                              DBC 01/85
         MVC   RJBUF,STMPMODU      MOVE MODULE NAME TO A BUFFER
*                                  THAT IS LEFT PADDED WITH BLANKS
         LA    R15,RJBUF+L'RJBUF-L'STMPMODU LOAD BLANKS BACK-SCANNER
         CLC   RJBUF,RJBUF-1       IS THE NAME BLANK?         DBC 07/84
         BE    BLANKNAM            YES, CAN'T JUSTIFY         DBC 07/84
         SPACE 1                                              DBC 07/84
         BALR  R14,0               NO, LOAD LOOP POINT        DBC 07/84
         BCTR  R15,0               BACK SCAN                  DBC 07/84
         TM    L'STMPMODU(R15),255-C' ' STILL A TRAILING BLANK?
         BZR   R14                 YES, CONTINUE BACK-SCAN    DBC 07/84
BLANKNAM MVC   XRPENTMO(L'STMPMODU,R2),1(R15) NO, GET ASM NME DBC 07/84
*                                  RIGHT JUSTIFIED TO THE MSG BUFFER
         MVI   XRPENTHY(R2),C'-'   SET HYPHEN
         MVC   XRPENT#R(,R2),=X'2020202120' INSERT EDIT MASK
         LA    R1,XRPENT#R+L'XRPENT#R-1(,R2) PRIME ICO INSIGNIFICANCE
         EDMK  XRPENT#R-1(L'XRPENT#R+1,R2),STMPHITS CONVERT THE
*                                  NUMBER OF REFERENCES (TO
*                                  THIS LABEL FROM THIS MODULE) TO
*                                  EBCDIC.
         MVC   XRPENT#R(,R2),0(R1) LEFT ADJUST
         LA    R2,XRPENTLN(,R2)    --> NEXT DISPLAY FIELD
         BCT   R0,NEXTAREF         LOOP FOR NEXT ACCUMULATOR
         #PUT  XRPMSG              THE MSG BUFFER IS FULL; DISPLAY IT
         MVI   XRPLABEL,C' '       CLEAR LABEL FIELD
         MVC   XRPLABEL+1(L'XRPLABEL-1),XRPLABEL
         MVI   XRPERRF,C' '        CLEAR POSSIBLE OVERFLOW ERROR SIGNAL
         B     NEXTALIN            LOOP TO REFRESH THE PRT LINE BUFFER
         DROP  R3                  RELEASE THE STAMP BASE
         SPACE 1
LASTALIN TM    FLAGO,NOTFOOLD      DID THE LABEL REALLY HAVE  DBC 01/85
*                                  REFERENCES?                DBC 01/85
         BZ    DIFMODUL            NO, SKIP                   DBC 01/85
         AP    LBLCNT,=P'1'        YES, COUNT THE REFERENCED  DBC 01/85
*                                  LABEL                      DBC 01/85
         CLI   XRPENTS+XRPENTHY,C' ' IS THERE A PARTIALLY FILLED
*                                  PRINT LINE LEFT OVER?
         BE    DIFMODUL            NO, DONE HERE              DBC 07/84
         #PUT  XRPMSG              YES, DISPLAY THE RESIDUE
         SPACE 3
*************************************************************
*        THE CURRENT RECORD (PROBABLY) REFERENCES A         *
*        DIFFERENT MODULE THAN THE PREVIOUS. A NEW STAMP    *
*        MUST BE FOUND.                                     *
*************************************************************
         SPACE 1
DIFMODUL CLI   XRRMODUL,X'FF'      IS THE CURRENT "RECORD"    DBC 07/84
*                                  THE DUMMY LAST RECORD?     DBC 07/84
         BE    OUTDONE             YES, GO TEMINATE
         MVC   OUTHEAD,XRRHEAD     NO, RESET THE RECORDS RELATIONSHIP
*                                  CONTROL INFORMATION
         SPACE 1
         LM    R15,R1,STMPCTL      LOAD STAMPS SEARCH CONTROLS
         BAL   R14,SRCH            SEARCH FOR A STAMP ENTRY FOR THE NEW
*                                  MODULE
         LR    R3,R1               (COPY POSSIBLE STAMP POINTER)
         USING STAMP,R3            (DCL POSSIBLE STAMP BASE)
         BE    ASMFOUND            A STAMP ENTRY WAS FOUND; GO PROCESS
         DROP  R3                  NO ENTRY FOUND; DROP BASE  DBC 07/84
         SPACE 3
*************************************************************
*        THIS IS AN ENTIRELY NEW MODULE NAME. A NEW STAMP   *
*        ENTRY MUST BE CREATED.                             *
*************************************************************
         SPACE 1
         C     R15,=A(STAMPS)      IS THERE ROOM FOR A NEW    DBC 01/85
*                                  STAMP ENTRY?               DBC 07/84
         BH    ASMNFITS            YES, PROCEED
         OI    FLAGO,STMPMOVF+STMPOVFL NO, SET ERROR SIGNALS
         MVI   RCDO+1,4            SET ERROR COMPLETION CODE
         XC    OUTTSTMP,OUTTSTMP   CAUSE THE REMAINING RECORDS FOR THIS
*                                  LABEL/MODULE COMBINATION TO BE
*                                  IGNORED.
         B     REWRTRCD            IGNORE THIS RECORD         DBC 01/85
         SPACE 1
ASMNFITS CLC   =C'  ',XRRLABEL     WILL THIS NEW ENTRY BE FOR DBC 01/85
*                                  A PURGED ASSEMBLY?         DBC 07/84
         BE    PRGNOCNT            YES, DON'T COUNT IT        DBC 01/85
         AP    ASMCNT,=P'1'        INCRIMENT MODULES COUNTER
PRGNOCNT DS    0H                                             DBC 01/85
         SPACE 1
         LR    R14,R15             --> CURRENT SO-STAMPS LIST DBC 01/85
         SR    R14,R0              --> NEW SO-STAMPS LIST (COPY SINK)
         ST    R14,STMPCTL         STORE NEW SO-LIST
         LR    R0,R15              --> CURRENT SO-STAMPS (COPY SOURCE)
         LR    R1,R3               --> INSERTION POINT
         SR    R1,R15              GET L'STAMPS TO SHIFT (L'COPY SRCE)
         LR    R15,R1              GET L'COPY SINK
         MVCL  R14,R0              SHIFT SOME STAMPS TO MAKE ROOM FOR
*                                  THE NEW STAMP
         LR    R3,R14              COPY NEW STAMP LOCATION PTR
         USING STAMP,R3            DCL A BASE FOR IT          DBC 07/84
         MVC   STMPHEAD,XRRHEAD    COPY LABEL/MODULE/TIMESTAMP
         SPACE 3
*************************************************************
*        AN EXISTING STAMP ENTRY HAS BEEN FOUND FOR THE NEW *
*        MODULE. RESET ITS LABEL AND REFERENCES COUNTER.    *
*************************************************************
         SPACE 1
ASMFOUND ST    R3,STMPCRNT         STORE NEW CURRENT STAMP PTR
         CLC   =C'  ',STMPLABL     SHOULD THIS RECORD BE      DBC 01/85
*                                  PURGED?                    DBC 07/84
         BE    OUTNEXT             YES, DO SO                 DBC 01/85
         MVC   STMPLABL,XRRLABEL   RESET THE STAMP'S LABEL FIELD
         ZAP   STMPHITS,=P'0'      CLEAR THE REFERENCES COUNTER
         SPACE 3
*************************************************************
*        COMPARE THE CURRENT RECORD'S TIME STAMP TO THE     *
*        TIME STAMP GIVEN IN THE STAMP. IF THEY ARE EQUAL,  *
*        THEN EVERYTHING IS OK. IF THE CURRENT RECORD'S     *
*        STAMP IS HIGH, THEN THE RECORD CONTAINS OBSELETE   *
*        DATA DUE TO A SUBSEQUENT REASSEMBLY OF THE SAME    *
*        MODULE, SO THE RECORD IS IGNORED. IF THE CURRENT   *
*        RECORD'S STAMP IS LOW, THEN XREFOUT HAS BEEN       *
*        COUNTING REFERENCES FROM THIS MODULE FOR LABELS    *
*        THAT NO LONGER EXIST.                              *
*************************************************************
         SPACE 1
         CLC   XRRTSTMP,STMPTIME   COMPARE TIME STAMPS
         BE    CNTREFS             EQUAL; GO COUNT THE NEW REFERENCES
         #DIE  L                   LOW (NEWER); LOGIC ERROR   DBC 01/85
         XC    OUTTSTMP,OUTTSTMP   HIGH (OLDER); IGNORE ALL REMAINING
*                                  RECORDS FOR THE SAME LABEL/MODULE
*                                  COMBINATION.
         B     OUTNEXT             IGNORE THIS RECORD TOO
         SPACE 3
*************************************************************
*        AN ACCEPTABLE XREF DATA LINE HAS BEEN RECEIVED. I  *
*        WILL NOW SCAN IT TO COUNT THE NUMBER OF REFERENCES *
*        THAT IT CONTAINS.                                  *
*************************************************************
         SPACE 1
CNTREFS  CLI   XRRLABEL+1,X'FF'    TIMESTAMP RECORD?          DBC 01/85
         BE    REWRTRCD            YES, SKIP COUNTER          DBC 01/85
         SPACE 1
         NI    FLAGO,255-NOTFOOLD  THE CURRENT RECORD MIGHT   DBC 01/85
*                                  NOT CONTAIN REFERENCES TO  DBC 01/85
*                                  THE CURRENT LABEL. (IT     DBC 01/85
*                                  MIGHT BE FROM AN           DBC 01/85
*                                  "XREF(FULL)" ASSEMBLY).    DBC 01/85
         LA    R1,XRRDATA          --> DATA LINE
         AH    R1,XRROFFS          --> SO-REFERENCES FIELDS
         SR    R2,R2               CLEAR FOR 'TRT'
         SPACE 1
REFSLOOP LA    R15,XRRDATA+L'XRRDATA-1 --> LAST DATA CHARACTER
         SR    R15,R1              GET RECORD RESIDUE-1
         BM    CNTSDONE            EXIT IF DONE
         TRT   0(*-*,R1),TRTBLANK  (EXECUTED)
         EX    R15,*-6             SCAN FOR 1ST NON-BLANK
         BZ    CNTSDONE            EXIT IF THERE ARE NO MORE
         B     *(R2)               GOT ONE; EXAMINE IT
         B     CNTSDONE            +4 NON-BLANK IS ALSO NON-DIGIT; THIS
*                                     RECORD DOES NOT CONTAIN (ANY
*                                     MORE) REFERENCES. EXIT
         AP    STMPHITS,=P'1'      +8 NON-BLANK IS A DIGIT; COUNT THE
*                                  REFERENCE
         OI    FLAGO,NOTFOOLD      REMEMBER THAT THIS RECORD  DBC 01/85
*                                  REALLY DOES CONTAIN        DBC 01/85
*                                  REFERENCES                 DBC 01/85
         SPACE 1
         LA    R15,XRRDATA+L'XRRDATA-1 --> LAST DATA CHARACTER
         SR    R15,R1              GET RECORD RESIDUE-1; IS RCD DONE?
         BNP   CNTSDONE            YES, EXIT
         TRT   0(*-*,R1),TRTDIGTS  (EXECUTED)
         EX    R15,*-6             NO, SCAN FOR NEXT NON-DIGIT; MORE?
         BZ    CNTSDONE            NO, RECORD IS DONE; EXIT
         B     *(R2)               YES, EXAMINE THE NON-DIGIT
         B     CNTSDONE            +4 NON-DIGIT IS ALSO NON-BLANK; THIS
*                                     RECORD DOES NOT CONTAIN ANY MORE
*                                     REFERENCES.
         B     REFSLOOP            +8 NON-DIGIT IS A BLANK; LOOP TO
*                                     SCAN FOR THE NEXT REFERENCE
         DROP  R3                  RELEASE STAMP BASE
CNTSDONE DS    0H
         SPACE 3
*************************************************************
*        IF A REWRITE FILE IS OPEN, THEN COPY THIS RECORD   *
*        TO IT.                                             *
*************************************************************
         SPACE 1
         TM    FLAGO,NOTFOOLD      DOES THE CURRENT RECORD    DBC 01/85
*                                  REALLY CONTAIN REFERENCES? DBC 01/85
         BZ    RWRISKIP            NO, DON'T SAVE IT          DBC 01/85
         SPACE 1                                              DBC 01/85
REWRTRCD TM    DCBOFLGS-IHADCB+REWRITE,DCBOFOPN REWRITING TO BE DONE?
         BZ    RWRISKIP            NO, SKIP
         MVC   XRRTSTMP,RSETSTMP   YES, RESET THE TIMESTAMP   DBC 01/85
         PUT   REWRITE,(RCDPTR)    DO SO
RWRISKIP DS    0H
         SPACE 3
*************************************************************
*        RETURN TO SORT/MERGE.                              *
*************************************************************
         SPACE 1
OUTNEXT  #EXIT ((R14,R12)),RC=4    RETURN FOR NEXT RECORD
         EJECT ,                                              DBC 01/85
*************************************************************
*        END OF SORT DETECTED. ISSUE FINAL MESSAGES AND     *
*        THEN MAKE A FINAL RETURN TO SORT/MERGE.            *
*************************************************************
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        WIDOW CONTROL. INSURE THAT THERE IS SUFFICIENT     * DBC 01/85
*        ROOM LEFT AT THE BOTTOM OF THE CURRENT PAGE TO     * DBC 01/85
*        MOST IF NOT ALL OF THE END-OF-PROGRAM MESSAGES.    * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                              DBC 01/85
OUTDONE  LH    R0,=H'7'            GET MIN # PRT LINES NEEDED 4 FINAL
*                                  MESSAGES
         CH    R0,LINES2GO         IS THERE ENOUGH ROOM ON THE CURRENT
*                                  PAGE FOR FINAL MESSAGES?
         BNL   NOEJECT2            YES, PROCEED
         XC    LINES2GO,LINES2GO   NO, FORCE IMMEDIATE EJECT
         MVI   SUBTITLE,C' '       CLEAR THE SUB-TITLE
         MVC   SUBTITLE+1(L'SUBTITLE-1),SUBTITLE
NOEJECT2 DS    0H
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        ISSUE "END OF PROGRAM" MESSAGE                     * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1
         #PUT  EOPMSG              ISSUE EO-PGM MESSAGE
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        DISPLAY THE NUMBER OF ASSEMBLY MODULES CROSS       * DBC 01/85
*        REFERENCED.                                        * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                              DBC 01/85
         TM    FLAGO,STMPMOVF      WAS THERE NAMES OVERFLOW?  DBC 01/85
         BNZ   YESMOFLW            YES, GO SEND ERROR MSG     DBC 01/85
         SPACE 1                                              DBC 01/85
         MVC   MSGBUF(8),=XL8'F020202020202120' NO, GET CCC   DBC 01/85
*                                  AND EDIT MASK              DBC 01/85
         LA    R1,MSGBUF+7         PRIME ICO INSIGNIFICANCE
         EDMK  MSGBUF(8),ASMCNT    CNVRT ASSEMBLIES CNT TO EBCDIC
         MVC   MSGBUF+1(6),0(R1)   LEFT ADJUST
         LA    R15,MSGBUF+8        --> EO-# FIELD
         SR    R15,R1              GET # DIGITS IN THE NUMBER
         LA    R4,MSGBUF+1(R15)    --> PAST THE DIGITS        DBC 01/85
         MVC   0(35,R4),=C' ASSEMBLED MODULES CROSS-REFERENCED' C 01/85
         #TEST SIZE=(8+35,LE,L'MSGBUF)
         LA    R0,MSGBUF-35        --> SO-MSG
         LR    R1,R4               --> "EO"-MSG               DBC 01/85
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE FOR OUTPUT
         #PUT  MSGBUF              DISPLAY THE MESSAGE
         B     #ASMSZ              SKIP ERROR MSG             DBC 01/85
         SPACE 1                                              DBC 01/85
YESMOFLW MVC   MSGBUF(19),=C'0ERROR - MORE THAN '             DBC 01/85
         LH    R0,=Y((STAMPSZ-STAMPS)/L'STAMPS) GET STAMPS CAPACITY
         CVD   R0,CVDWAO           CNVRT TO DECIMAL
         MVC   MSGBUF+19(7),=XL7'20202020202020' EDIT MASK    DBC 01/85
         EDMK  MSGBUF+18(8),CVDWAO+4 CNVRT TO EBCDIC
         MVC   MSGBUF+19(6),0(R1)  LEFT ADJUST
         LA    R15,MSGBUF+19+7     GET NUMBER -
         SR    R15,R1               OF DIGITS
         LA    R1,MSGBUF+19(R15)   ADVANCE THE SINK SCANNER
         MVC   0(93,R1),=C' ASSEMBLIES WERE CROSS-REFERENCED; SYMBOLS F*
               OLLOWED BY AN ASTEISK (*) HAVE MISSING REFERENCES'
         #TEST SIZE=(19+7+93,LE,L'MSGBUF)
         LA    R0,MSGBUF-93        --> SO-MSG
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE
         #PUT  MSGBUF              DISPLAY THE ERROR MSG
         LA    R4,MSGBUF           --> ASM NAMES FILL AREA    DBC 01/85
         SPACE 1                                              DBC 01/85
#ASMSZ   DS    0H                                             DBC 01/85
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        DISPLAY THE NAMES OF THE CROSS REFERENCED ASSEMBLY * DBC 01/85
*        MODULES.                                           * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1                                              DBC 01/85
         LA    R3,MSGBUF+L'MSGBUF  --> PAST EO-BUFFER         DBC 01/85
         SR    R3,R4               GET ROOM IN BUFFER FOR     DBC 01/85
*                                  ASSEMBLY NAMES             DBC 01/85
         SR    R2,R2               CLEAR FOR DIVIDE           DBC 01/85
         D     R2,=A(L'STMPMODU+1) GET # ASM NAMES THAT CAN   DBC 01/85
*                                  BE HELD IN THE BUFFER      DBC 01/85
         LTR   R3,R3               ANY?                       DBC 01/85
         BNP   ASMNMESZ            NO, FORGET IT              DBC 01/85
         SPACE 1                                              DBC 01/85
         LM    R5,R7,STMPCTL       LOAD ASM-NAMES SCANNER     DBC 01/85
         USING STAMP,R5            DCL STAMP ENTRY BASE       DBC 01/85
         SLR   R7,R6               --> LAST ENTRY             DBC 01/85
         SLR   R5,R6               --> 0TH ENTRY (1-ORIGIN)   DBC 01/85
NXTALINE MVI   MSGBUF,C' '         CLEAR THE -                DBC 01/85
         MVC   MSGBUF+1(L'MSGBUF-1),MSGBUF BUFFER             DBC 01/85
         LR    R1,R4               --> SO-NAMES AREA IN MSGBU DBC 01/85
         LR    R0,R3               GET # NAMES/LINE           DBC 01/85
         SPACE 1                                              DBC 01/85
NXTANAME BXH   R5,R6,LASTANAM      --> NEXT ASM NAME          DBC 01/85
         CLC   =C'  ',STMPLABL     A PURGED MODULE?           DBC 01/85
         BE    NXTANAME            YES, SKIP                  DBC 01/85
         MVC   1(L'STMPMODU,R1),STMPMODU NO, COPY NAME TO     DBC 01/85
*                                  MESSAGE                    DBC 01/85
         LA    R1,1+L'STMPMODU(,R1) ADVANCE TEXT SCANNER      DBC 01/85
         BCT   R0,NXTANAME         LOOP                       DBC 01/85
         DROP  R5                  RELEASE STAMP BASE         DBC 01/85
         SPACE 1                                              DBC 01/85
LASTANAM CLI   1(R4),C' '          ANY ASM NAMES?             DBC 01/85
         BE    ASMNMESZ            NO, DONE                   DBC 01/85
         LA    R0,MSGBUF           YES, --> SO-BUFFER         DBC 01/85
         SR    R1,R0               GET L'MSG                  DBC 01/85
         STC   R1,MSGBUF-1         STORE                      DBC 01/85
         #PUT  MSGBUF              DISPLAY THE NAMES          DBC 01/85
         SLR   R5,R6               BACK OFF THE SCANNER       DBC 01/85
         BXLE  R5,R6,NXTALINE      LOOP IF MORE NAMES         DBC 01/85
ASMNMESZ DS    0H                                             DBC 01/85
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        DISPLAY THE NUMBER OF LABELS LISTED IN THE CROSS   * DBC 01/85
*        REFERENCE.                                         * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1
         MVC   MSGBUF(8),=XL8'4020202020202120' GET CCC AND   DBC 01/85
*                                  EDIT MASK                  DBC 01/85
         LA    R1,MSGBUF+7         PRIME ICO INSIGNIFICANCE
         EDMK  MSGBUF(8),LBLCNT    CNVRT LABELS CNT TO EBCDIC
         MVC   MSGBUF+1(6),0(R1)   LEFT ADJUST
         MVI   MSGBUF,C'0'         SET CCC                    DBC 01/85
         LA    R15,MSGBUF+8        --> EO-# FIELD
         SR    R15,R1              GET # DIGITS IN THE NUMBER
         LA    R1,MSGBUF+1(R15)    --> PAST THE DIGITS
         MVC   0(14,R1),=C' LABELS LISTED'
         #TEST SIZE=(8+14,LE,L'MSGBUF)
         LA    R0,MSGBUF-14        --> SO-MSG
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE FOR OUTPUT
         #PUT  MSGBUF              DISPLAY THE MESSAGE
         SPACE 3                                              DBC 01/85
************************************************************* DBC 01/85
*        MAKE THE FINAL RETURN TO SORT.                     * DBC 01/85
************************************************************* DBC 01/85
         SPACE 1
         #EXIT ((R14,R12)),RC=8    FINAL RETURN TO SORT/MERGE
         TITLE 'XREFOUT -- SORTOUT -- SEARCH - STAMPS LIST SEARCHING RO*
               UTINE'
SRCH     #SEARCH CMPRID=STMPCMPR
         SPACE 3
STMPCMPR CLC   XRRMODUL,STMPMODU-STAMP(R15) RIGHT LIST ENTRY YET?
         BR    R14                 (RETURN TO SEARCH ROUTINE)
         TITLE 'XREFOUT -- SORTOUT -- PUTSYSP - MESSAGE PRINTING ROUTIN*
               E (USEABLE ONLY BY SORTOUT)'
*************************************************************
*                                                           *
*        PUTSYSP -- THIS ROUTINE SENDS A MESSAGE TO         *
*        SYSPRINT. WARNING, THIS ROUTINE CAN BE USED ONLY   *
*        BY THE SORTOUT ROUTINE DUE TO BASE REGISTER        *
*        CONSIDERATIONS.                                    *
*                                                           *
*        INPUTS:                                            *
*              - R1 POINTS TO A MESSAGE BLOCK.              *
*              - R13 IS SORTOUT'S BASE REGISTER.            *
*              - R14 POINTS TO A RETURN ADDRESS.            *
*                                                           *
*        RETURN 0(,R14):                                    *
*              - THE MESSAGE IS PRINTED. IF A NEW PRINTER   *
*                PAGE IS STARTED, THEN TITLE LINES ARE ALSO *
*                PRINTED.                                   *
*              - ALL REGISTERS ARE RESTORED.                *
*                                                           *
*************************************************************
         SPACE 1
PUTSYSP  TM    DCBOFLGS-IHADCB+SYSPRINO,DCBOFOPN IS SYSPRINT AVAILABLE?
         BZR   R14                 NO, RETURN IMMEDIATELY
         STM   R14,R1,SAVESYSP     YES, SAVE REGISTERS
         MVC   NEXTCCC,1(R1)       SET NEXT CCC
         LA    R15,CCC+L'CCC       LOAD SCANNER OF VALID CCC'S
         LA    R0,L'CCC            GET # OF VALID CCC'S
         SPACE 1
CCCLP    BCTR  R15,0               ADVANCE THE SCANNER
         CLC   NEXTCCC,0(R15)      IS THIS CCC VALID?
         BE    GOTCCC              YES, GO ADJUST PAGE RESIDUE
         BCT   R0,CCCLP            DON'T KNOW YET; KEEP CHECKING
         MVI   NEXTCCC,C' '        NO, RESET TO DEFAULT CCC
         LA    R0,2                LOAD LINES ADVANCE+1
         SPACE 1
GOTCCC   BCTR  R0,0                GET LINES ADVANCEMENT
         AH    R0,LINES2GO         DECRIMENT PAGE RESIDUE; PAGE FULL?
         BNP   NOEJECT             NO, SKIP TITLES STUFF
         SPACE 3
*************************************************************
*        THE CURRENT PRINTER PAGE IS FULL. PRINT TITLES ON  *
*        THE NEXT PAGE. INCLUDE A PAGE COUNTER.             *
*************************************************************
         SPACE 1
         AP    PAGECTR,=P'1'       INCRIMENT PAGE COUNT
         MVC   PAGENO,=X'402020202020' GET EDIT MASK
         EDMK  PAGENO,PAGECTR      CNVRT PAGE # TO EBCDIC
         MVC   PAGENO+1(L'PAGENO-1),0(R1) LEFT ADJUST THE PAGE NUMBER
         SPACE 1
         PUT   SYSPRINO            LOCATE NEXT OUTPUT BUFFER
         LR    R14,R1              --> COPY SINK
         LH    R15,DCBLRECL-IHADCB+SYSPRINO GET L'COPY SINK
         LA    R0,TITLEBUF         --> COPY SOURCE
         LA    R1,TITBFLEN         GET L'COPY SOURCE
         ICM   R1,15,=C' '         GET PADDING CHARACTER
         MVCL  R14,R0              COPY TITLE TO OUTPUT BUFFER
         SPACE 1
         PUT   SYSPRINO            LOCATE OUTPUT BIFFER FOR SUB-TITLE
         LR    R14,R1              --> COPY SINK
         LH    R15,DCBLRECL-IHADCB+SYSPRINO GET L'COPY SINK
         LA    R0,SUBTITLE         --> COPY SOURCE
         LA    R1,L'SUBTITLE       GET L'COPY SOURCE
         MVCL  R14,R0              COPY SUB-TITLE TO OUTPUT BUFFER
         SPACE 1
         MVI   NEXTCCC,C'0'        ADJUST NEXT CCC
         LH    R0,LINECT           GET MAX LINES/PAGE
         AH    R0,=H'6'            ADJUST FOR TITLES + 1ST DATA LINE
NOEJECT  STH   R0,LINES2GO         STORE NEW PAGE RESIDUE
         SPACE 3
*************************************************************
*        WRITE THE MESSAGE.                                 *
*************************************************************
         SPACE 1
         PUT   SYSPRINO            LOCATE NEXT OUTPUT BUFFER
         MVC   0(1,R1),NEXTCCC     COPY CCC
         LA    R0,1(,R1)           --> COPY SINK
         LH    R1,DCBLRECL-IHADCB+SYSPRINO GET LRECL
         BCTR  R1,0                GET L'COPY SINK
         L     R14,SAVESYSP+12     RESTORE MSG POINTER
         SR    R15,R15             CLEAR
         IC    R15,0(,R14)         GET L'MSG
         BCTR  R15,0               DECR FOR CCC ALREADY INSERTED
         ICM   R15,8,=C' '         GET PAD CHARACTER
         LA    R14,2(,R14)         --> COPY SOURCE
         MVCL  R0,R14              COPY MSG TO OUTPUT BUFFER
         SPACE 3
*************************************************************
*        RETURN TO CALLER.                                  *
*************************************************************
         SPACE 1
         LM    R14,R1,SAVESYSP     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  ,                   RELEASE ALL BASES
         TITLE 'XREFOUT -- DATA (NON-REENTRANT)'
*************************************************************
*        DATA CONTROL BLOCKS.                               *
*************************************************************
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
         SPACE 1
XREFO    DCB   DDNAME=XREF,DSORG=PS,MACRF=(GL,PM),EODAD=EOXREF,        *
               RECFM=FB,LRECL=XRRLEN
REWRITE  EQU   XREFO               DUEL FUNCTION DCB
         SPACE 1
SYSPRINO DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PL,RECFM=FBA,            *
               LRECL=PRTLEN,EXLST=SYSOXLST
         SPACE 1
         POP   PRINT
         SPACE 1
         DS    0F                  EXIT LISTS
SYSOXLST DC    X'85',AL3(SYSOOPEN)
         SPACE 3
*************************************************************
*        PLIST FOR SORT/MERGE.                              *
*************************************************************
         SPACE 1
PLISTPTR DC    A(PLIST)
         SPACE 1
         DS    0F
         DC    H'0'
PLIST    DC    Y(PLISTLEN)
PLISTBEG DC    A(CMDSORT,CMDSORTZ) 'SORT' COMMAND
         DC    A(CMDRCD,CMDRCDZ)   'RECORD' COMMAND
         DC    A(SORTIN,SORTOUT)   E15/E35 EXITS
         DC    X'00',C'MAX'        MEMORY REQUIREMENTS
         DC    X'01',AL3(100*1024) RESERVED MEMORY
         DC    X'03',AL3(SYSOUT)   SUBSTITUTE 'SYSOUT' DDNAME
         DC    X'FF',C'(I)'        MESSAGE DISPLAY CONTROL
         DC    C'SORT'             DDNAME PREFIX
PLISTLEN EQU   *-PLISTBEG
         SPACE 1
CMDSORT  DC    C' SORT FIELDS=(1,'
CMDSORLN DC    C'##',C',CH,A),EQUALS'
CMDSORTZ DC    C' '
         SPACE 1
CMDRCD   DC    C' RECORD TYPE=F,LENGTH='
CMDRCDLN DC    C'###'
CMDRCDZ  DC    C' '
         SPACE 1
SYSOUT   DC    CL8'SYSTERM'        SUBSTITUTE SYSOUT DDNAME
         SPACE 3
*************************************************************
*        MISCELLANEOUS DATA.                                *
*************************************************************
         SPACE 1
CVDWAO   DS    D                   CVD WORK AREA
         SPACE 1                                              DBC 01/85
RSETSTMP DS    D                   RESET TIMESTAMP BUFFER     DBC 01/85
         SPACE 1
OUTHEAD  DC    XL(L'XRRHEAD)'00'                              DBC 07/84
OUTLABEL EQU   XRRLABEL-XRRHEAD+OUTHEAD,L'XRRLABEL
OUTMODUL EQU   XRRMODUL-XRRHEAD+OUTHEAD,L'XRRMODUL
OUTTSTMP EQU   XRRTSTMP-XRRHEAD+OUTHEAD,L'XRRTSTMP
         SPACE 1
DUMYHEAD DC    (L'XRRHEAD)X'FF'    EO-FILE DUMMY SUBSTITUTE RECORD
         SPACE 1
SAVESYSP DS    4A                  SAVE AREA FOR PUTSYSP
         SPACE 1
RCDO     DC    H'0'                PROGRAM COMPLETION CODE
LINECT   DC    H'-60'              LINES/PRINTER PAGE (NEGATIVE)
LINES2GO DC    H'0'                PRINTER PAGE RESIDUE
         SPACE 1
LBLCNT   DC    PL4'-1'             LISTED LABELS COUNTER
ASMCNT   DC    PL4'0'              CROSS-REFERENCED ASSEMBLIES COUNTER
PAGECTR  DC    PL3'0'              PAGE COUNTER
CCC      DC    C'+ 0-'             RECOGNIZED CCC'S
NEXTCCC  DC    C' '                NEXT CCC
         SPACE 1
FLAGO    DC    B'00000000'         LOCAL PROGRAM CONTROL FLAGS
OUTNOW   EQU   B'10000000'         THE SORTOUT ROUTINE HAS INITIALIZED
NOTFOOLD EQU   B'01000000'         CERTAIN TRICKY CONDITIONS  DBC 01/85
*                                  HAVE BEEN RECOGNIZED       DBC 01/85
STMPMOVF EQU   B'00100000'         THE STAMPS LIST (THE NUMBER OF
*                                  ASSEMBLY MODULES BEING CROSS
*                                  REFERENCED) HAS OVERFLOWED
STMPOVFL EQU   B'00010000'         A STAMPS LIST OVERFLOW HAS OCCURED
*                                  FOR THE LABEL CURRENTLY BEING
*                                  PROCESSED
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         SPACE 3
*************************************************************
*        MESSAGES.                                          *
*************************************************************
         SPACE 3
         DC    AL1(XRPLEN)
XRPMSG   DC    C' '
XRPLABEL DC    CL(L'XRRLABEL)' ',C' '
XRPERRF  DC    C' '
XRPENTS  DC    CL(PRTLEN-(*-XRPMSG))' '
XRPLEN   EQU   *-XRPMSG            L'XREF DISPLAY RECORD
         SPACE 1
XRPENT   EQU   0                   XRP MSG ENTRY
XRPENTMO EQU   XRPENT+1,L'STMPMODU MODULE NAME FIELD (RIGHT JUSTIFIED)
XRPENTHY EQU   XRPENTMO+L'XRPENTMO,1 HYPHEN
XRPENT#R EQU   XRPENTHY+L'XRPENTHY,5 NO. REFS (LEFT JUSTIFIED)
XRPENTLN EQU   XRPENT#R+L'XRPENT#R L'XRPENT
XRPENTCT EQU   L'XRPENTS/XRPENTLN  NUMBER OF SUCH FIELDS
         #TEST SIZE=(XRPENTCT,GT,0) INSURE THERE IS AT LEAST ONE
         DC    CL(L'XRPENT#R)' '   BLANKS FOR LEFT JUSTIFICATION
         SPACE 3
         DC    CL(L'STMPMODU-1)' ' BUFFER FOR RIGHT -
RJBUF    DS    CL(L'STMPMODU)       JUSTIFYING MODULE NAMES
         DC    C' '                  MORE PADDING             DBC 07/84
         SPACE 3
         DS    AL1
MSGBUF   DS    CL(PRTLEN)
         SPACE 3
TITLEBUF DC    C'1MASTER CROSS-REFERENCE '
TITLFOR  DC    C'   ',C' '
TITLWHOM DC    CL(TITLEBUF+PRTLEN-11-*)' '
         DC    C' PAGE'
PAGENO   DC    C' #####'
TITBFLEN EQU   *-TITLEBUF
         #TEST SIZE=(TITBFLEN,EQ,XRPLEN)
         DC    CL(L'PAGENO-1)' '
         ORG   ,
         SPACE 3
SUBTITLE DC    CL(PRTLEN)'0SYMBOL'
         ORG   SUBTITLE+(XRPENTS-XRPMSG)+XRPENTHY-8
         DC    2CL(XRPENTLN)'ASSEMBLY-REFS'                   DBC 01/85
         DC    C'. . .'                                       DBC 01/85
         ORG   ,
         SPACE 3
         DC    AL1(EOPMSGLN)
EOPMSG   DC    C'-END OF CROSS-REFERENCE'
EOPMSGLN EQU   *-EOPMSG
         SPACE 3
         DC    AL1(L'BLNKLIN1)
BLNKLIN1 DC    C' '
         SPACE 3
*************************************************************
*        REFERENCES SCANNING TRT TABLES.                    *
*************************************************************
         SPACE 1
         DS    0D
         SPACE 1
TRTBLANK DC    256AL1(4)
         ORG   TRTBLANK+C' '
         DC    AL1(0)
         ORG   TRTBLANK+C'0'
         DC    (C'9'+1-C'0')AL1(8)
         ORG   ,
         SPACE 1
TRTDIGTS DC    256AL1(4)
         ORG   TRTDIGTS+C' '
         DC    AL1(8)
         ORG   TRTDIGTS+C'0'
         DC    (C'9'+1-C'0')AL1(0)
         ORG   ,
         SPACE 3
*************************************************************
*        ENCOUNTERED ASSEMBLY NAMES SAVE TABLE.             *
*************************************************************
         SPACE 1
STMPCRNT DC    A(0)                CURRENT STAMP PTR
STMPCTL  DC    A(STAMPSZ,STMPLEN,STAMPSZ) STAMPS SCAN CONTROLS
         SPACE 1
STAMPS   DS    1000XL(STMPLEN)     SAVE TABLE
STAMPSZ  EQU   *                   --> LAST ENTRY
         TITLE 'XREFOUT -- SYSOOPEN - DCB OPEN EXIT FOR THE SYSPRINT FI*
               LE'
         USING IHADCB,R1           DCL SYSPRINT DCB BASE
         USING SYSOOPEN,R15        DCL LOCAL PROGRAM BASE
SYSOOPEN LH    R3,DCBBLKSI         GET BLKSIZE
         LTR   R3,R3               ANY GIVEN?
         BP    SOPBSZOK            YES, PROCEED
         LH    R3,=X'1000'         NO, GET MAX DEFAULT VALUE
SOPBSZOK LH    R4,DCBLRECL         GET LRECL
         SR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               GET INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BP    SOPBSZO2            YES, PROCEED
         LR    R3,R4               NO, SET BLKSIZE=LRECL
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
SOPBSZO2 STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         SPACE 3
*************************************************************
*        END OF ASSEMBLY.                                   *
*************************************************************
         SPACE 1
         END   ,
