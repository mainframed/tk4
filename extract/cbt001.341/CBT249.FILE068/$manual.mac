

















                Running V2.0 of INFO/SYS in the BATCH

                        Guy L. Albertelli
                        BFGoodrich                     SHARE Code BFG
                        500 S. Main St.
                        Akron, Ohio  44318
                        (216)374-4071
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH    PAGE: I
    VER: 3.0             T A B L E  O F  C O N T E N T S       JULD: 81.
+  _____________________________________________________________________
0
                1 Justification . . . . . . . . . . . . . . . . . . 1
                2 Convincing INFO/SYS to run in BATCH . . . . . . . 2
                    2.1 Necessary ZAPs. . . . . . . . . . . . . . . 2
                    2.2 Necessary Programs. . . . . . . . . . . . . 5
                    2.3 A Note on Jobnames. . . . . . . . . . . . . 5
                    2.4 Sample Jobstream. . . . . . . . . . . . . . 5
                3 Improving Stored Response Chains. . . . . . . . . 6
                    3.1 Structure of a SRC member.. . . . . . . . . 6
                    3.2 Making Generic SRCs.. . . . . . . . . . . . 7
                    3.3 Using the SYSTSIN Capability. . . . . . . . 8
                4 Program Source. . . . . . . . . . . . . . . . . . 10
                    4.1 TSO Command FAKEUSER. . . . . . . . . . . . 10
                    4.2 TSO Command GETSRC. . . . . . . . . . . . . 14
                    4.3 TSO Command GINFOSRC. . . . . . . . . . . . 19
                    4.4 Pre-Level Set Usermod . . . . . . . . . . . 25
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 1
    VER: 3.0                     Justification                SEC: 1
+  _____________________________________________________________________
0

         1 Justification
+        _ _____________

        INFO/SYS  V2.0 and INFO/Management(INFO/MGMT)  as delivered  by
   seem to be fairly well thought out and fairly flexible.  However,  as
   at BFGoodirch have found out by installing the packages,  no thought
   given  to the ability to run the INFO command in a batch run of the T
   This ability is useful for printing reports for status meetings, and
   creating problem and/or change records automatically.    Since INFO/M
   is  supposed to take  over the problem  management function  of IPCS,
   method needed to be found to capture the same problem information as
   IPO distributed procedure SAVEDMP captured using IPCS.  A prime goal
   to  automate the procedure as much as the IPCS procedure was.  (The o
   human involvement was to start the procedure.)   This document will s
   how we at BFGoodrich have solved this problem.
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 2
    VER: 3.0          Convincing INFO/SYS to run in BATCH     SEC: 2
+  _____________________________________________________________________
0

         2 Convincing INFO/SYS to run in BATCH
+        _ __________ ________ __ ___ __ _____

        The  first attempt to run the INFO command in the batch environm
   showed  us that IBM was  attempting to make the  use of it  in the ba
   difficult.   The following two sections show  the necessary changes t
   were  discovered and  attempts to  explain the  rationale  behind  th

         2.1 Necessary ZAPs
+        ___ _________ ____

        We  found it necessary  to zap the  INFO command in  two locatio
   The  first deals with a test the INFO  does to determine the screen s
   of the tube that invoked it.    Since the batch execution  of the TMP
   identified by the absence of the TSB (Terminal Status Block), the GTS
   macro  returns a  linesize of  132 and  a row  count  of  0  (indicat
   non-display type tube).  The INFO command issued an error message if
   results indicated  that the tube was not at least 24x80.    The solut
   was to disable these tests.    This is accomplished by  the first zap
   USERMOD BF00021.

        The  second zap  deals with  an aspect  of the  way that  Stored
   Immediate Response Chains work.  One case is that if you FILE a probl
   the screen that displays the created problem number is displayed even
   the Response  Chain indicates that further responses are present.
   rest of the response chain is displayed in the input line.  A TGET ma
   is  then issued to get  the operator response (just  ENTER will conti
   the Response Chain).   This action in a  batch execution of the TMP w
   cause the TGET macro to give a RC=0 but also an input length equal to
   The  INFO command promptly went into a loop saying it got a screen er
   and reissuing the TGET.  The solution to this problem, for us,  was w
   the response length of TGET was zero,  to fixup the input buffer to l
   like one of two cases.    The first  case is if  the screen  written
 × either "Print Request Complete" (BLG1M234), "Report Generation Comple
 × (BLG1M212), or "Purge Verification Request"  (BLG1M410)  then  a GETL
 × macro is  issued and the response returned to INFO/MGMT.    In the ba
 × environment  the GETLINE becomes a read from file SYSTSIN which conta
 × the command input stream.   If GETLINE returns either an error or an
 × then the command ';QUIT' is returned to shutdown INFO/MGMT.    The ot
 × case  deals with any other screen,  and the action is  to return a pr
 × request  to document the current location (possibly the termination o
 × SRC).  The  command is "PR S U,2,INFORPT".    This  implies that  the
 × statement INFORPT exists in the procedure or clist.  (Note well that
 × manual says that DCBs are needed to use it.)   The ZAP to do this is
 × one against BLGI2TRW in USERMOD BF00021.



 × ++USERMOD(BF00021).
 × ++VER (Z038) FMID(HOZ1202) PRE(UZ52797)  /* ***LEVEL SET***
 ×     THIS MODIFICATION IMPLEMENTS THE BATCH ACCESS OF INFO/MGMT WHICH
 ×     WAS OMITTED BY IBM IN ITS DEVELOPMENT.  THE FUNCTIONS ARE:
 ×        1. ELIMINATE CHECK FOR SCREEN SIZE IN BLGI2TI.
 ×        2. ON ANY FORCED TGET RESPOND IF PANEL IS NOT IN TABLE RESPOND
 ×           WITH ';PR S U,2,INFORPT'. IF PANEL IS IN TABLE THEN DO A
 ×           GETLINE MACRO AND PUT REPLY BACK INTO BUFFER.  IF GETLINE
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 3
    VER: 3.0                     Necessary ZAPs               SEC: 2.1
+  _____________________________________________________________________
0
 ×           RETURNS ERROR OR EOF THEN REPLY WITH ';QUIT'.  THE TABLE IS
 ×           AS OF NOW:
 ×                          BLG1M234 (PRINT COMPLETE)
 ×                          BLG1M212 (REPORT COMPLETE)
 ×                          BLG1M410 (PURGE VERIFICATION)
 ×     */.
 × ++ZAP (BLGI2TI).
 ×   NAME   BLGI2TI
 × *
 × **    THIS ZAP TURNS OFF THE GTSIZE CHECK FOR ATLEAST 3270 SCREEN
 × **    SIZE
 × *
 ×   VER A0 4740        TEST FOR # ROWS < 24
 ×   REP A0 4700        IGNORE TEST
 ×   VER A8 47B0        TEST FOR # COLS >= 80
 ×   REP A8 47F0        MARK ALWAYS TRUE
 × ++ZAP (BLGI2TRW).
 ×   EXPAND BLGI2TRW(336)
 ×   NAME    BLGI2TRW
 × *
 × **    THIS ZAP RETURNS THE STRING ';PR S U,2,INFORPT' ON ANY TGET WIT
 × **    RETURNED BUFFER LENGTH IS ZERO, UNLESS THE SCREEN IS BLG1M234
 × **    OR BLG1M212 OR BLG1M410
 × *
 ×   VER 05AC 5840,B054     TEST FOR ORIGINAL INST
 ×   VER 0684 0000,0120     TEST FOR ORIGINAL AREA LENGTH
 ×   VER 06C0 0000          TEST FOR NEW PATCH AREA
 ×   REP 05AC 47F0,C6A4        B  PATCH AREA
 ×   REP 0684 0000,013C     SET NEW DSA LENGTH
 ×   REP 06C0 5840,B054        L 4,84(11)      ACCESS TBUF (OVERLAID IN)
 ×   REP 06C4 1266             LTR 6,6         LENGTH ZERO?
 ×   REP 06C6 4770,C594        BNZ RETURN      IF NOT THEN RETURN
 ×   REP 06CA 5810,5004        L 1,4(5)        CYCLE THROUGH
 ×   REP 06CE 5820,1000        L 2,0(1)           BLOCKS TO GET
 ×   REP 06D2 5830,2008        L 3,8(2)             INPUT BUFFER OF SCRE
 ×   REP 06D6 D20A,3000,C7AC * MVC 0(11,3),A   MOVE IN 'QUIT' RESPONSE
 ×   REP 06DC 4160,000B        LA 6,11         SET LENGTH OF 'QUIT'
 ×   REP 06E0 BFFF,4010        ICM 15,15,16(4) GET OUT BUF ADDR
 ×   REP 06E4 4780,C594        BZ RETURN       IF ZERO SKIP
 ×   REP 06E8 D507,F01E,C7C8   CLC 30(8,15),ENTER IS THIS BLG0ENTR
 ×   REP 06EE 4780,C702        BE  GET         IF SO THEN CONSIDER IN TA
 ×   REP 06F2 41E0,C7D0        LA  14,TABLE    POINT AT TABLE
 ×   REP 06F6 9500,E000   LOOP CLI 0(14),0     END OF TABLE?
 ×   REP 06FA 4780,C6F4        BE  PRINT       YES SO PRINT SCREEN
 ×   REP 06FE D507,F016,E000   CLC 22(8,15),0(14) CHECK AGAINST TABLE
 ×   REP 0704 4780,C702        BE GET          IF FOUND THEN DO GETLINE
 ×   REP 0708 41E0,E008        LA 14,8(14)     GET NEXT ENTRY
 ×   REP 070C 47F0,C6DA        B   LOOP        TRY AGAIN
 × *
 × **     PUT ';PR S U,2,INFORPT' COMMAND IN BUFFER
 × *
 ×   REP 0710 4160,0017  PRINT LA 6,23         SET LENGHT OF 'PRINT'
 ×   REP 0714 D20F,3007,C7B7 * MVC 7(16,3),D   MOVE IN 'PRINT'
 ×   REP 071A 47F0,C594        B  RETURN       ALL DONE
 × *
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 4
    VER: 3.0                     Necessary ZAPs               SEC: 2.1
+  _____________________________________________________________________
0
 × **     DO GETLINE MACRO AND PUT RESPONSE IN BUFFER
 × *
 ×   REP 071E 5810,2004  GET   L  1,4(2)       SET R1->CPPL
 ×   REP 0722 58E0,1004        L  14,4(1)      GET UPT ADDR
 ×   REP 0726 58F0,100C        L  15,12(1)     GET ECT ADDRE
 ×   REP 072A 4110,B120        LA  1,IOPL      GET ADDR OF WORKAREA
 ×   REP 072E 50E0,1000        ST 14,0(1)      SAVE ADDR OF UPT
 ×   REP 0732 50F0,1004        ST 15,4(1)      SAVE ADDR OF ECT
 ×   REP 0736 41E0,B138        LA  14,ECB      POINT AT ECB
 ×   REP 073A 50E0,1008        ST  14,8(1)     SAVE ADDR OF ECB
 ×   REP 073E 41E0,B130        LA  14,GTPB     POINT AT GTPB
 ×   REP 0742 50E0,100C        ST  14,12(1)    SAVE ADDR OF GTPB
 ×   REP 0746 D707,B130,B130   XC  GTPB(8),GTPB
 ×   REP 074C 9280,B132        MVI GTPB+2,X'80'  SET FLAGS
 ×   REP 0750 58F0,0010        L   15,16       GET CVT ADDR
 ×   REP 0754 9180,F15C        TM  348(15),X'80'  IS GETLINE LOADED
 ×   REP 0758 47E0,C74A        BNO IKJ@0001    NO BRANCH TO LINK
 ×   REP 075C 58F0,F15C        L   15,348(15)  YES BALR TO GETLINE
 ×   REP 0760 05EF             BALR 14,15      DO GETLINE
 ×   REP 0762 47F0,C762        B   IKJ$0001    ALL DONE
 ×   REP 0766 0700      IKJ@0001 NOPR 0
 ×   REP 0768 45F0,C760        BAL 15,*+20   BRANCH AROUND CONSTANTS
 ×   REP 076C 0000,0000        DC  A(*+8)      CANT ZAP RELO ADDR
 ×   REP 0770 0000,0000        DC  F'0'        DCB ADDR PARM
 ×   REP 0774 C9D2,D1C7,C5E3,D340     DC C'IKJGETL'
 ×   REP 077C 0000  0A06       SVC 6           DONT PUT IN SVC
 ×   REP 077E 49F0,C7A6 IKJ$0001 CH 15,RC      SEE IF END OF CLIST
 ×   REP 0782 4780,C702        BE  GET         IF SO REISSUE GETLINE
 ×   REP 0786 59F0,C7A8        C   15,MARC     CHECK RETURN CODE
 ×   REP 078A 4720,C594        BH  RETURN      RETURN IF BAD
 ×   REP 078E 58F0,B134        L   15,GTPB+4   GET ADDR OF BUFFER
 ×   REP 0792 4810,F000        LH  1,0(15)     GET LENGTH OF BUFFER
 ×   REP 0796 5B10,C7A8        S   1,MARC      CHECK LENGTH >4
 ×   REP 079A 47D0,C594        BNP RETURN      THEN RETURN QUIT
 ×   REP 079E 0610             BCTR  1,0       GET MACHINE LENGTH
 ×   REP 07A0 4410,C7A0        EX   1,MOVEIT   MOVE IN DATA
 ×   REP 07A4 4160,1007        LA   6,7(1)     MOVE IN LENGTH
 ×   REP 07A8 181F             LR   1,15       MOVE IN DATA
 ×   REP 07AA 4800,1000        LH   0,0(1)     GET LENGTH
 ×   REP 07AE BF08,C7C7        ICM  0,8,SUBPOOL GET SUBPOOL VALUE
 ×   REP 07B2 4110,1000        LA   1,0(1)     CLEAR TOP BYTE
 ×   REP 07B6 0A0A             SVC  10         FREE RESPONSE
 ×   REP 07B8 47F0,C594        B    RETURN     AND RETURN
 ×   REP 07BC D200,3006,F004 MOVEIT MVC 6(0,3),4(15)  MOVE IN DATA
 ×   REP 07C2 0010        RC   DC   H'16'      RC FOR END OF CLIST
 ×   REP 07C4 0000,0004   MARC DC   F'4'       CHECK FOR RC AND LEN
 ×   REP 07C8 7D5C,F711,5CF6,5ED8  A  DC X'7D5CF7115CF6',C';QUIT'
 ×   REP 07D0 E4C9,E3
 ×   REP 07D3 D7D9,40E2,40E4,6BF2  D  DC C'PR S U,2,INFORPT'
 ×   REP 07DB 6BC9,D5C6,D6D9,D7E3
 ×   REP 07E3 01                   SUBPOOL DC X'01'
 ×   REP 07E4 C2D3,C7F0,C5D5,E3D9  ENTER    DC  C'BLG0ENTR'   MAIN MENU
 ×   REP 07EC C2D3,C7F1,D4F2,F3F4  TABLE    DC  C'BLG1M234'   PRINT END
 ×   REP 07F4 C2D3,C7F1,D4F2,F1F2           DC  C'BLG1M212'   REPORT END
 ×   REP 07FC C2D3,C7F1,D4F4,F1F0           DC  C'BLG1M410'   PURGE VERI
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 5
    VER: 3.0                     Necessary ZAPs               SEC: 2.1
+  _____________________________________________________________________
0
 ×   REP 0804 0000,0000,0000,0000           DC  XL8'00'  END OF TABLE

         2.2 Necessary Programs
+        ___ _________ ________

         One of the first problems that the INFO command exhibited was t
   it would not function if the length of the USERID was 0.  This data (
   USERID and its length)  was  gotten from the PSCB  block during initi
   ization.   Executing the TMP in batch results in the USERID being bla
   and its length being zero.  To solve this problem, a program was writ
 × that makes  the USERID the  first 7  characters of  the jobname.    T
 × program  is called FAKEUSER and  it can also provide  the job with mo
 × capability (useful in SAVEDMP).    The  source for  this program  is
 × Section 4.1.

         2.3 A Note on Jobnames
+        ___ _ ____ __ ________

        With  the use  of the  FAKEUSER command  the Jobname  will  be
   USERID.  The INFO command looks in the privilege class specified (in
   CLASS operand) for the USERID.   Thus the first seven (7)  characters
   the JOBNAME must be in a privilege class.    If it  isn't then INFO w
   put  up a screen saying that  the USERID is not  in the requested cla
 × It will then do a TGET and quit.

         2.4 Sample Jobstream
+        ___ ______ _________

        The  following jobstream shows how  to run the INFO  command in
   batch.  Note,  the command FAKEUSER is  the program discussed in Sect
   2.2.   The key item is that  we are able to  specify the privilege cl
   and the SRC on the command.    This example  implies that the  SRC is
   produce  a report,  but it  could as  easily be  the  SAVEDMP-like  S



     //GUYINFO JOB (U32050,17F),GUY,CLASS=R,MSGCLASS=N,NOTIFY=GUY
     //REPORT  EXEC PGM=IKJEFT01,REGION=4096K,DYNAMNBR=16
     //SYSTSPRT DD   SYSOUT=N
     //SYSPRINT DD   SYSOUT=N
     //SYSUDUMP DD   SYSOUT=N
     //INFORPT  DD   SYSOUT=N,
     //       DCB=(RECFM=VBA,LRECL=137,BLKSIZE=141)
     //SYSTSIN  DD   *
     FAKEUSER
     ALLOC FI(BLGMPNL) DA('SYS1.BLGMPNL') SHR
     ALLOC FI(BLGPNLS) DA('SYS1.BLGPNLS') SHR
     ALLOC FI(BLGSRC) DA('SYS1.BLGSRC') SHR
     ALLOC FI(BLGFMT) DA('SYS1.BLGFMT') SHR
     ALLOC FI(BLGSD5) DA('INFO1.BLGDB.SDDS5') SHR
     ALLOC FI(BLGSI5) DA('INFO1.BLGDB.SDIDS5') SHR
     INFO SRC(REPORT1)
 ×   ;QUIT
     /*
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 6
    VER: 3.0            Improving Stored Response Chains      SEC: 3
+  _____________________________________________________________________
0

         3 Improving Stored Response Chains
+        _ _________ ______ ________ ______

        As  described by the INFO/SYS  and INFO/MGMT manuals,  there  ar
   number of differences between Immediate Response Chains (IRC) and Sto
   Response Chains (SRC).   One important difference  is that an SRC can
   FILE a problem, change, or configuration record but an IRC can (fixed
   UZ36708 & UZ36709).   Another  important difference is  that an  SRC
   only  have a subcommand at  the end of it,  an IRC can have  one or m
   subcommands anywhere in the chain.    These differences are  due only
   the SRC generation process.  If you could save the IRC it would funct
   correctly as an SRC. The big problem is constructing an SRC that will
   what is desired.  The entire goal of this section is to provide a met
   by which SRCs can be generated through TSO EDIT or SPF.

       The  basic problem is that SPF can  not edit records that are big
   than 256 bytes.    The required  size of  a SRC  is RECFM=F,  LRECL=6
   BLKSIZE=600,  and INFO/MGMT will always  set the SRC file  to that si
   To  circumvent this  problem,  we  have  allocated  a  new  file  cal
   SYS1.BLGMSRC to  ddname BLGMSRC.    The  attributes  of  this  file
   RECFM=FB, LRECL=60,BLKSIZE=600  which is completely SPF editable.
   TSO  command GETSRC (see section 4.2)  is used to  transfer members f
   the INFO/MGMT  SRC library to the SPF library and back.    To move a
   called  TEST1 to the  SPF library,  all  that needs  to be  done is
   following commands

      ALLOC DA('SYS1.BLGSRC') SHR FI(BLGSRC)
      ALLOC DA('SYS1.BLGMSRC') SHR FI(BLGMSRC)
      GETSRC M(TEST1)

   The  SRC TEST1 is now  in a SPF editable  library and can  be changed
   preform any desired function.  After it has been saved,  it can be mo
   back to the INFO/MGMT library by the following command:

      GETSRC M(TEST1),PUTBACK

   The  newly updated  SRC is  now available  to  any  user  of  INFO/MG


         3.1 Structure of a SRC member.
+        ___ _________ __ _ ___ _______

        The  format of an SRC is described  by the GPCB block as documen
   in manual LY25-0008 (INFO/SYS Logic and Diagnosis).   The first 88 by
   contain the name, description,  and status information.    The remain
   512 bytes are devoted to the SRC itself.    The structure  of the SRC
   that of an IRC.  The end of the SRC is signaled by the next byte bein
   binary zero.  If a SRC is edited (by SPF for example)  any valid IRC
   be substituted for the SRC.  Note,  this means that subcommands (nota
   SEarch, and REport)  can be entered in the middle of the response cha
   This  circumvents the unreasonable restriction that the GEnerate proc
   places on the SRC in allowing subcommands only at the end.

       As an example, we at BFGoodrich used SPF to edit a member of the
   file and changed the contents of the SRC to look as follows:

1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 7
    VER: 3.0               Structure of a SRC member.         SEC: 3.1
+  _____________________________________________________________________
0
                      8,1,;RE,2,2,2,INFORPT

   This  chain will  produce a  problem calender  report on  file  INFOR

         3.2 Making Generic SRCs.
+        ___ ______ _______ _____

        The above two sections describe how to get SRCs to be as complex
   desired.   The next problem is that in using INFO/MGMT in a batch CLI
   how do  we substitute data available  in the CLIST  into the SRC.
   rational  for doing this is that  we may want only 1  report type SRC
   service  a number  of  report  functions  by  just  varying  the  sea
   criteria.   Another use is in the IPO supplied batch function of SAVE
   where  it would be nice to automaticly create the INFO/MGMT problem w
   some  of the data that  is isolated from  the dump and  also include
   IPCS problem number.
        The method  used to solve this problem is as follows.    We use
   SRCs to do the processing.    The first  one is called  the skeleton
   contains  the basic  SRC string  with  '?'  where  the  data  is  to
   substituted.   The second SRC is called the actual and is updated by
   TSO command  GINFOSRC (see section  4.3 for  the source).    After  t
   command (GINFOSRC)  the INFO/MGMT command is issued with the SRC oper
   specifing  the name of the actual SRC which has had the data substitu
   for the '?'.    For example,  assume that  SRC SKEL1  has the  follow
   response chain:

    4,1,1,SAVEDMP,4,=,5,=,7,?,14,INITIAL,13,SAVEDMP,25,?,,6,14,?,,4,2,1,
                 ?,3,,2,1,,3,?,,,,4,9,;QUIT

   where the question marks are for data in the following order:

            system id (smfid)
            dump title
            IPCS problem number
            abend code from TCB
            module name from RTM2WA

   Then,  assuming that the CLIST  variables are properly initialized,
   following  commands will initialize the SRC  ACTL1 with the expanded
   and the INFO command will create the problem.

       GINFOSRC M(SKEL1,ACTL1), +
                DATA(&SYSID,'&TITLE',&PROBNUM,&CODE,&MODULE)
       INFO SRC(ACTL1)
 ×     ;QUIT

   One note of caution,  the  length of the variable  &title is usually
   characters,  but the command GINFOSRC  will truncate it to  the first
   characters  since that is the maximum that INFO will accept in any fi
   other than freeform text.    The only limitation  is there is  no way
   access the freeform text by using INFO in the batch.
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 8
    VER: 3.0              Using the SYSTSIN Capability        SEC: 3.3
+  _____________________________________________________________________
0

 ×       3.3 Using the SYSTSIN Capability
+×       ___ _____ ___ _______ __________

 ×      With  this version  of the  INFO/MGMT zap,  a new  feature  is
 × ability for INFO/MGMT to read the SYSTSIN file when the package force
 × read of the "tube".  This is the same file that the TMP reads to get
 × commands from.   It  is also  the file  from which  all commands  in
 × executing CLIST come from.   This provides many possibilities for mak
 × INFO/MGMT do  what is  desired in  your  installation.    The  follow
 × examples show some of the current capabilities.
 ×      The  first use that comes to mind is that this gives the ability
 × delete many records without sitting at a tube.   All that is required
 × that the  record id's be known.    Then  construct  a  job  as  follo


 ×   //TRREPORT JOB (U32050,17F),GUY,CLASS=R,MSGCLASS=N,NOTIFY=GUY
 ×   //SAVEDMP PROC CLASS=N
 ×   //*
 ×   //INFO EXEC PGM=IKJEFT01,REGION=4096K,DYNAMNBR=16,
 ×   //    ACCT=('CHG-U32050  ')
 ×   //SYSPROC  DD   DSN=IPO3.CMDPROC,DISP=SHR
 ×   //SYSTSPRT DD   SYSOUT=*
 ×   //INFORPT  DD   SYSOUT=*,
 ×   //SYSTSIN DD *
 ×     FAKEUSER
 ×   ALLOC FI(BLGMPNL) DA('SYS1.BLGMPNL') SHR
 ×   ALLOC FI(BLGPNLS) DA('SYS1.BLGMPNL' 'SYS1.BLGPNLS') SHR
 ×   ALLOC FI(BLGSRC) DA('SYS1.BLGSRC') SHR
 ×   ALLOC FI(BLGMSRC) DA('SYS1.BLGMSRC') SHR
 ×   ALLOC FI(BLGFMT) DA('SYS1.BLGMFMT' 'SYS1.BLGFMT') SHR
 ×   ALLOC FI(BLGSD5) DA('INFO1.BLGDB.SDDS5') SHR
 ×   ALLOC FI(BLGSI5) DA('INFO1.BLGDB.SDIDS5') SHR
 ×   ALLOC FI(VSAM)   DA('INFO1.INFOMVS') SHR
 ×      INFO
 ×    ;PU R 26
 ×    YES
 ×    ;PU R 28
 ×    YES
 ×    ;PU R 29
 ×    YES
 ×    ;PU R 30
 ×    YES
 ×    ;QUIT


 ×      Another  point is  that you  don't need  to construct  complex S
 × because you can input IRCs from SYSTSIN.   Thus the following will pr
 × a problem calender report of file INFORPT:


 ×   //TRREPORT JOB (U32050,17F),GUY,CLASS=R,MSGCLASS=N,NOTIFY=GUY
 ×   //*
 ×   //TRREPORT EXEC PGM=IKJEFT01,REGION=4096K,DYNAMNBR=16,
 ×   //    ACCT=('CHG-U32050  ')
 ×   //SYSPROC  DD   DSN=IPO3.CMDPROC,DISP=SHR
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 9
    VER: 3.0              Using the SYSTSIN Capability        SEC: 3.3
+  _____________________________________________________________________
0
 ×   //SYSTSPRT DD   SYSOUT=*
 ×   //INFORPT  DD   SYSOUT=*,COPIES=8,
 ×   //         DCB=(RECFM=VBA,LRECL=137,BLKSIZE=141)
 ×   //SYSTSIN DD *
 ×     FAKEUSER
 ×   ALLOC FI(BLGMPNL) DA('SYS1.BLGMPNL') SHR
 ×   ALLOC FI(BLGPNLS) DA('SYS1.BLGMPNL' 'SYS1.BLGPNLS') SHR
 ×   ALLOC FI(BLGSRC) DA('SYS1.BLGSRC') SHR
 ×   ALLOC FI(BLGMSRC) DA('SYS1.BLGMSRC') SHR
 ×   ALLOC FI(BLGFMT) DA('SYS1.BLGMFMT' 'SYS1.BLGFMT') SHR
 ×   ALLOC FI(BLGSD5) DA('INFO1.BLGDB.SDDS5') SHR
 ×   ALLOC FI(BLGSI5) DA('INFO1.BLGDB.SDIDS5') SHR
 ×   ALLOC FI(VSAM)   DA('INFO1.INFOMVS') SHR
 ×      INFO
 ×     8,1,;RE,2,2,2,INFORPT
 ×     ;QUIT
 ×   /*


1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 10
    VER: 3.0                     Program Source               SEC: 4
+  _____________________________________________________________________
0

 ×       4 Program Source
+×       _ _______ ______


         4.1 TSO Command FAKEUSER
+        ___ ___ _______ ________

        The  following program (FAKEUSER)  will  setup the  PSCB USERID
   copying  the first 7 characters of the  jobname and then set the leng
   An  optional feature is the  ability to give the  MOUNT attribute to
   batch session (by default the TMP sets NOMOUNT).

        The program needs to be linked into SYS1.CMDLIB with authorizati
   Also  the TSO authorized command  table IKJEFTE2 should  be updated w
   this name.  Another way is to replace the MODESET macros with a user
   that returns control in key zero.



   SFT8MV92 CSECT
   *********************************************************************
   *
   *        THIS PROGRAM FUNCTIONS ONLY IN A BATCH TMP ENVIRONMENT.  ITS
   *        PURPOSE IS TO FILL IN THE PSCB BLOCK TO SIMULATE THE LOGON
   *        OF A USERID AND THE UADS DATASET ACCESS.
   *
   *        CURRENT FUNCTIONS:
   *              1.  FILL IN THE USERID AND LENGTH
   *                    (USERID = FIRST 7 CHARS OF THE JOBNAME)
   *              2.  IF THE OPERAND 'MOUNT' IS SPECIFIED THEN
   *                    GRANT THE MOUNT AUTHORITY
   *
   *        ****
   *              THIS PROGRAM IS A TSO COMMAND PROCESSOR
   *                                                      ****
   *
   *              CURRENT SYNTAX
   *                            -     -
   *                           ×       ×
   *               FAKEUSER    × MOUNT ×
   *                           ×       ×
   *                            -     -
   *
   *
   *
   *
   *********************************************************************
            SAVE  (14,12),,FAKEUSER_&SYSDATE_&SYSTIME
            LR    R12,R15             SET BASE REG
            USING SFT8MV92,R12
            USING PSA,R0              ADDRESSABILITY FOR AREA
            ST    R13,SAVE+4          CHAIN SAVE AREAS
            LA    R13,SAVE            POINT TO SAVE AREA
            L     R9,PSATOLD          GET OLD TCB
            USING TCB,R9              SETUP ADDRESSABILITY FOR TCB
   *
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 11
    VER: 3.0                  TSO Command FAKEUSER            SEC: 4.1
+  _____________________________________________________________________
0
   **       SAVE CPPL ADDRESS
   *
            LR    R11,R1
            USING CPPL,R11
   *
   **       PARSE PARM LIST TO CHECK FOR OPTIONS
   **             1. SETUP PPL
   **             2. CALL PARSE
   *
            LA    R3,MYPPL            POINT PPL
            USING PPL,R3              SETUP ADDRESSABILITY
            MVC   PPLUPT,CPPLUPT      MOVE THE UPT ADDR
            MVC   PPLECT,CPPLECT      MOVE THE ECT ADDR
            MVC   PPLCBUF,CPPLCBUF    MOVE THE UPT ADDR
            LR    R1,R3               MOVE INTO PROPER REGISTER
            CALLTSSR EP=IKJPARS
            LTR   R15,R15
            BZ    *+6
            DC    H'0'
            L     R8,ANSPTR           GET ANSWER AREA
            USING IKJPARMD,R8         SETUP ADDRESSABILITY
   *
   **       VALIDATE THAT THIS IS A BATCH TMP ENVIRONMENT
   *
            L     R1,PSAAOLD          GET ASCB ADDR
            L     R1,ASCBTSB-ASCB(R1) GET TSB ADDRESS
            LA    R1,0(R1)            CLEAR TOP BYTE
            LTR   R1,R1               DOES TERMINAL BLOCK EXIST
            BNZ   EXIT                IF SO THEN EXIT  -  TSO TMP ENVIR
   *
   **       GET CURRENT PSCB BLOCK INTO OUR CORE
   *
            L     R0,CPPLPSCB         POINT AT PSCB
            LA    R1,PSCBU-PSCB+L'PSCBU GET LENGTH
            LA    R2,MYPSCB
            LR    R3,R1               GET LENGTH
            MVCL  R2,R0               COPY PSCB
            LA    R10,MYPSCB
            USING PSCB,R10            SETUP ADDRESSABILITY FOR PSCB
   *
   **       SET USERID AND LENGTH INTO PSCB
   *
            L     R1,TCBTIO           GET TIOT ADDRESS
            MVC   PSCBUSER(7),0(R1)   MOVE IN JOBNAME FROM TIOT
            LA    R1,7                MAX LENGTH
            LA    R2,PSCBUSER+6       LAST CHARACTER
   USERLN   CLI   0(R2),C' '          CHECK FOR BLANK
            BNE   USERLN1             IF NOT THEN END OF ID
            BCTR  R2,0                DECREMENT ADDRESS
            BCT   R1,USERLN           IF NOT LAST THEN TRY AGAIN
   USERLN1  STC   R1,PSCBUSRL         SAVE LENGTH
   *
   **       HANDLE MOUNT ATTRIBUTE
   *
            CLI   MOUNT+1,1           WAS MOUNT SPECIFIED
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 12
    VER: 3.0                  TSO Command FAKEUSER            SEC: 4.1
+  _____________________________________________________________________
0
            BNE   NOMOUNT             NOT SPECIFIED
            OI    PSCBATR1,PSCBVMNT   SET MOUNT AUTHORITY
   NOMOUNT  DS    0H
   *
   **       MOVE DATA BACK INTO ORIGINAL PSCB
   *
            L     R2,CPPLPSCB         GET REAL PSCB
            LA    R3,PSCBU-PSCB+L'PSCBU GET LENGTH
            LA    R4,MYPSCB           GET MY COPY (UPDATED)
            LR    R5,R3               COPY LENGTH
            MODESET KEY=ZERO,MODE=SUP
            MVCL  R2,R4               MOVE IN COPY
            MODESET KEY=NZERO,MODE=PROB
   *
   **       EXIT
   *
   EXIT     DS    0H
   *
   **       FREE STORAGE
   *
            IKJRLSA ANSPTR            FREE STORAGE
            L     R13,4(R13)
            RETURN (14,12),RC=0
            EJECT
   *
   **       DSECT
   *
            PRINT NOGEN
            IHAPSA
            CVT    DSECT=YES
            IHAASCB
            IKJTCB
            PRINT GEN
            IKJTSB
            IKJPSCB
            IKJCPPL
            IKJPPL
   R0       EQU   0
   R1       EQU   1
   R2       EQU   2
   R3       EQU   3
   R4       EQU   4
   R5       EQU   5
   R6       EQU   6
   R7       EQU   7
   R8       EQU   8
   R9       EQU   9
   R10      EQU   10
   R11      EQU   11
   R12      EQU   12
   R13      EQU   13
   R14      EQU   14
   R15      EQU   15
            EJECT
   SFT8MV92 CSECT
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 13
    VER: 3.0                  TSO Command FAKEUSER            SEC: 4.1
+  _____________________________________________________________________
0
   *
   **       DATA
   *
   SAVE     DC    18F'0'
   MYPPL    DC    A(0,0,MYECB,PARMS,ANSPTR,0,0)
   MYECB    DC    A(0)                ECB
   ANSPTR   DC    A(0)
   MYPSCB   DC    ((PSCBU-PSCB+L'PSCBU+3)/4)A(0)
   PARMS    IKJPARM DSECT=IKJPARMD
   MOUNT    IKJKEYWD
              IKJNAME 'MOUNT'
            IKJENDP
            END
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 14
    VER: 3.0                   TSO Command GETSRC             SEC: 4.2
+  _____________________________________________________________________
0

         4.2 TSO Command GETSRC
+        ___ ___ _______ ______

        This  program moves a SRC  member from ddname BLGSRC  to BLGMSRC
   back, depending on whether the operand PUTBACK is specified.    You n
   some macros out of SYS1.AMODGEN to assemble it.



   SFT8MVXX CSECT
   *********************************************************************
   *
   *        THIS PROGRAM'S PURPOSE IS FETCH AN SRC FROM THE NORMAL SRC
   *        LIBRARY INTO AN SPF-COMPATIBLE LIBRARY SO THAT THE SRCS CAN
   *        EDITED.  ALSO CAN BE WORKED IN THE REVERSE ORDER.
   *
   *
   *
   *        ****
   *              THIS PROGRAM IS A TSO COMMAND PROCESSOR
   *                                                      ****
   *
   *              CURRENT SYNTAX
   *
   *                                        ×-       -×
   *               GETSRC     MEMBER(MEM1)  ×,PUTBACK ×
   *                                        ×-       -×
   *
   *
   *                              WHERE MEM1 IS THE SRC NAME
   *
   *
   *
   *
   *
   *                                       GUY L. ALBERTELLI
   *                                       BFGOODRICH
   *                                       500 S. MAIN STREET
   *                                       AKRON, OHIO    44318
   *
   *                                       216/374-4071
   *
   *
   *
   *********************************************************************
            SAVE  (14,12),,GETOSRC_&SYSDATE_&SYSTIME
            LR    R12,R15             SET BASE REG
            USING SFT8MVXX,R12
            ST    R13,SAVE+4          CHAIN SAVE AREAS
            LA    R13,SAVE            POINT TO SAVE AREA
   *
   **       SAVE CPPL ADDRESS
   *
            LR    R11,R1
            USING CPPL,R11
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 15
    VER: 3.0                   TSO Command GETSRC             SEC: 4.2
+  _____________________________________________________________________
0
   *
   **       PARSE PARM LIST TO CHECK FOR OPTIONS
   **             1. SETUP PPL
   **             2. CALL PARSE
   *
            LA    R3,MYPPL            POINT PPL
            USING PPL,R3              SETUP ADDRESSABILITY
            MVC   PPLUPT,CPPLUPT      MOVE THE UPT ADDR
            MVC   PPLECT,CPPLECT      MOVE THE ECT ADDR
            MVC   PPLCBUF,CPPLCBUF    MOVE THE BUFFER POINTER
            LR    R1,R3               MOVE INTO PROPER REGISTER
            CALLTSSR EP=IKJPARS
            LTR   R15,R15
            BZ    *+6
            DC    H'0'
            L     R8,ANSPTR           GET ANSWER AREA
            USING IKJPARMD,R8         SETUP ADDRESSABILITY
   *
   **       MOVE MEMBER NAME
   *
            L     R1,FRSMEM           GET ADDR OF FIRST MEMBER
            LTR   R1,R1
            BZ    ERROR4              GIVE ERROR MESSAGE
            LH    R2,FRSMEM+4         GET LENGTH
            BCTR  R2,0                GET MACHINE LENGTH
            LA    R3,MEMONE           POINT TO OUTPUT FIELD
            EX    R2,MEMOVE           MOVE THE MEMBER'
   *
   **       SEE WHETHER PUT BACK WAS SPECIFIED
   *
            CLI   PUTBACK+1,0         WAS IT SPECIFIED
            BE    NOPE
            EJECT
   *
   **       OPEN FILE FOR PUTBACK STATE
   *
            OPEN  (BLGMSRC,(INPUT),BLGSRC,(OUTPUT))
            TM    BLGSRC+DCBOFLG,X'10'
            BZ    ERROR1
   *
   **       ACCESS THE MEMBER
   *
            FIND  BLGMSRC,MEMONE,D    LOOK FOR MEMBER
            LTR   R15,R15             SEE IF FOUND
            BNZ   ERROR2
   *
   **       GET THE MEMBER
   *
            READ  FIRSTONE,SF,BLGMSRC,SKELTON,MF=E
            CHECK FIRSTONE
   *
   **       CREATE THE MEMBER
   *
            WRITE SECONE,SF,BLGSRC,SKELTON,MF=E
            CHECK SECONE
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 16
    VER: 3.0                   TSO Command GETSRC             SEC: 4.2
+  _____________________________________________________________________
0
   *
   **       STOW THE MEMBER
   *
            MVC   STOLIST(8),MEMONE
            STOW  BLGSRC,STOLIST,R
            CH    R15,=H'8'
            BH    ERROR3
            B     CLOSE               ALL DONE
            EJECT
   *
   **       OPEN FILE FOR NORMAL STATE
   *
   NOPE     OPEN  (BLGSRC,(INPUT),BLGMSRC,(OUTPUT))
            TM    BLGSRC+DCBOFLG,X'10'
            BZ    ERROR1
   *
   **       ACCESS THE MEMBER
   *
            FIND  BLGSRC,MEMONE,D     LOOK FOR MEMBER
            LTR   R15,R15             SEE IF FOUND
            BNZ   ERROR2
   *
   **       GET THE MEMBER
   *
            READ  FIRSTONE,SF,BLGSRC,SKELTON,MF=E
            CHECK FIRSTONE
   *
   **       CREATE THE MEMBER
   *
            WRITE SECONE,SF,BLGMSRC,SKELTON,MF=E
            CHECK SECONE
   *
   **       STOW THE MEMBER
   *
            MVC   STOLIST(8),MEMONE
            STOW  BLGMSRC,STOLIST,R
            CH    R15,=H'8'
            BH    ERROR3
   *
   **       CLOSE AND EXIT
   *
   CLOSE    CLOSE (BLGSRC,,BLGMSRC)
   *
   **       EXIT
   *
   EXIT     DS    0H
   *
   **       FREE STORAGE
   *
            IKJRLSA ANSPTR            FREE STORAGE
            L     R13,4(R13)
            RETURN (14,12),RC=0
            EJECT
   *
   **       ERROR MESSAGE ROUTINES
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 17
    VER: 3.0                   TSO Command GETSRC             SEC: 4.2
+  _____________________________________________________________________
0
   *
   ERROR1   LA    R8,EXIT             SET RETURN
            LA    R2,ERR1             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR2   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR2             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR3   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR3             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR4   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR4             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   *
   **       ISSUE ERROR MESSAGE
   *
   ERRMSG   DS    0H
            L     R3,CPPLUPT          GET UPT ADDRESS
            L     R4,CPPLECT          GET ECT ADDRESS
            PUTLINE PARM=OUTLIN,UPT=(R3),ECT=(R4),
                  OUTPUT=((R2),TERM,SINGLE,DATA),MF=(E,OUTIOPL)
            BR    R8
            EJECT
   *
   **       EXECUTED INSTRUCTIONS
   *
   MEMOVE   MVC   0(0,R3),0(R1)       MOVE IN MEMBER NAME
            EJECT
   *
   **       DSECT
   *
            PRINT NOGEN
            CVT   DSECT=YES
            PRINT GEN
            IKJCPPL
            IKJIOPL
            IKJPPL
   R0       EQU   0
   R1       EQU   1
   R2       EQU   2
   R3       EQU   3
   R4       EQU   4
   R5       EQU   5
   R6       EQU   6
   R7       EQU   7
   R8       EQU   8
   R9       EQU   9
   R10      EQU   10
   R11      EQU   11
   R12      EQU   12
   R13      EQU   13
   R14      EQU   14
   R15      EQU   15
            EJECT
   SFT8MVXX CSECT
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 18
    VER: 3.0                   TSO Command GETSRC             SEC: 4.2
+  _____________________________________________________________________
0
   *
   **       DATA
   *
   SAVE     DC    18F'0'
   MYPPL    DC    A(0,0,MYECB,PARMS,ANSPTR,0,0)
   MYECB    DC    A(0)                ECB
   ANSPTR   DC    A(0)
   MEMONE   DC    CL8' '
   STOLIST  DC    CL8' ',AL4(0)
   DCBOFLG  EQU   48
            WRITE SECONE,SF,0,0,MF=L
            READ  FIRSTONE,SF,0,0,MF=L
   BLGSRC   DCB   BLKSIZE=600,LRECL=600,DSORG=PO,MACRF=(R,W),
                  RECFM=F,DDNAME=BLGSRC
   BLGMSRC  DCB   BLKSIZE=600,LRECL=60,DSORG=PO,MACRF=(R,W),
                  RECFM=FB,DDNAME=BLGMSRC
   OUTLIN   PUTLINE OUTPUT=(0,TERM,SINGLE,DATA),MF=L
   OUTIOPL  DS    4F
            EJECT
   *
   **       ERROR MESSAGES
   *
   ERR1     DC    AL2(ERR1E-*,0),C'BLGSRC DID NO OPEN'
   ERR1E    EQU   *
   ERR2     DC    AL2(ERR2E-*,0),C'MEMBER NOT FOUND'
   ERR2E    EQU   *
   ERR3     DC    AL2(ERR3E-*,0),C'STOW FAILED'
   ERR3E    EQU   *
   ERR4     DC    AL2(ERR4E-*,0),C'MEMBER PARAMETER MUST BE USED'
   ERR4E    EQU   *
            EJECT
   *
   **       FORMAT OF COMMAND
   *
            PRINT NOGEN
   PARMS    IKJPARM DSECT=IKJPARMD
   MEMBERS  IKJKEYWD
              IKJNAME 'MEMBER',SUBFLD=MEMFLD
   PUTBACK  IKJKEYWD
              IKJNAME 'PUTBACK'
   *
   *
   MEMFLD   IKJSUBF
   FRSMEM     IKJIDENT 'FIRST MEMBER',
                  PROMPT='MEMBER NAME',
                  MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
   *
   *
            IKJENDP
   SKELTON  DS    0F,XL600
            END
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 19
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0

         4.3 TSO Command GINFOSRC
+        ___ ___ _______ ________

        This command updates a target SRC (called the actual) with the d
   from the combination of the DATA operand and the SRC string from the
   skelton SRC.  Any item in the DATA list that is longer than 45
   characters is truncated to 45.  This program requires some macros tha
   are in SYS1.AMODGEN.
   ..JUST OFF



   SFT8MVXX CSECT
   *********************************************************************
   *
   *         THIS PROGRAM'S PURPOSE IS TO UPDATE  A SRC WITH DATA VALUES
   *        BE PLUGGED INTO THE SRC AT CERTAIN POINTS.
   *
   *        ****
   *              THIS PROGRAM IS A TSO COMMAND PROCESSOR
   *                                                      ****
   *
   *              CURRENT SYNTAX
   *
   *
   *               GINFOSRC   MEMBER(MEM1,MEM2),
   *                          DATA(DATA1,DATA2,...DATAN)
   *
   *
   *                              WHERE MEM1 IS THE SKELETON
   *                                    MEM2 IS THE UPDATED ACTUAL
   *
   *                                    DATA1 - DATAN ARE THE VALUES
   *                                          TO REPLACE THE QUESTION MA
   *                                           IN THE SKELETON  IN CREAT
   *                                          THE ACTUAL
   *
   *
   *
   *
   *
   *                                       GUY L. ALBERTELLI
   *                                       BFGOODRICH
   *                                       500 S. MAIN STREET
   *                                       AKRON, OHIO    44318
   *
   *                                       216/374-4071
   *
   *
   *
   *********************************************************************
            SAVE  (14,12),,GINFOSRC_&SYSDATE_&SYSTIME
            LR    R12,R15             SET BASE REG
            USING SFT8MVXX,R12
            ST    R13,SAVE+4          CHAIN SAVE AREAS
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 20
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0
            LA    R13,SAVE            POINT TO SAVE AREA
   *
   **       SAVE CPPL ADDRESS
   *
            LR    R11,R1
            USING CPPL,R11
   *
   **       PARSE PARM LIST TO CHECK FOR OPTIONS
   **             1. SETUP PPL
   **             2. CALL PARSE
   *
            LA    R3,MYPPL            POINT PPL
            USING PPL,R3              SETUP ADDRESSABILITY
            MVC   PPLUPT,CPPLUPT      MOVE THE UPT ADDR
            MVC   PPLECT,CPPLECT      MOVE THE ECT ADDR
            MVC   PPLCBUF,CPPLCBUF    MOVE THE BUFFER POINTER
            LR    R1,R3               MOVE INTO PROPER REGISTER
            CALLTSSR EP=IKJPARS
            LTR   R15,R15
            BZ    *+6
            DC    H'0'
            L     R8,ANSPTR           GET ANSWER AREA
            USING IKJPARMD,R8         SETUP ADDRESSABILITY
   *
   **       VALIDATE THAT BOTH MEMBER NAMES OCCURED
   *
   *
   **       OPEN FILE
   *
            OPEN  (BLGSRC,(UPDAT))
            TM    BLGSRC+DCBOFLG,X'10'
            BZ    ERROR1
   *
   **       MOVE BOTH MEMBER NAMES
   *
            L     R1,FRSMEM           GET ADDR OF FIRST MEMBER
            LH    R2,FRSMEM+4         GET LENGTH
            BCTR  R2,0                GET MACHINE LENGTH
            LA    R3,MEMONE           POINT TO OUTPUT FIELD
            EX    R2,MEMOVE           MOVE THE MEMBER'
            L     R1,SECMEM           GET ADDR OF FIRST MEMBER
            LH    R2,SECMEM+4         GET LENGTH
            BCTR  R2,0                GET MACHINE LENGTH
            LA    R3,MEMTWO           POINT TO OUTPUT FIELD
            EX    R2,MEMOVE           MOVE THE MEMBER'
   *
   **       ACCESS FIRST MEMBER (SKELTON)
   *
            FIND  BLGSRC,MEMONE,D     LOOK FOR MEMBER
            LTR   R15,R15             SEE IF FOUND
            BNZ   ERROR2
   *
   **       GET THE FIRST MEMBER
   *
            READ  FIRSTONE,SF,BLGSRC,SKELTON
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 21
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0
            CHECK FIRSTONE
   *
   **       ACCESS SECOND MEMBER (ACTUAL)
   *
            FIND  BLGSRC,MEMTWO,D     LOOK FOR MEMBER
            LTR   R15,R15             SEE IF FOUND
            BNZ   ERROR3
   *
   **       GET THE SECOND MEMBER
   *
            READ  SECONE,SF,BLGSRC,ACTUAL,MF=E
            CHECK SECONE
   *
   **       MOVE SKELTON TO ACTUAL
   *
            LA    R4,SKELTON+88
            LA    R5,ACTUAL+88
            LA    R6,512              MAX LENGTH TO MOVE
            LA    R7,LSTDATA          POINT AT FIRST DATA ITEM
            TM    6(R7),X'80'         SEE IF FIRST ITEM EXISTS
            BNZ   *+6                 YES
            SR    R7,R7               CLEAR DATA ITEM POINTER
   *
   **       START LOOP TO MOVE SKELTON
   *
   LOOP     CLI   0(R4),0             LOOK FOR END OF SRC
            BE    LOOPEOF             EXIT IF FOUND
            CLI   0(R4),C'?'          SEE IF PROMPT
            BE    LOOP2               IF SO TRY TO MOVE DATA
   LOOP1    MVC   0(1,R5),0(R4)         MOVE  IN  SKELTON  BYTE  TO  ACT
            LA    R4,1(R4)            INCREMENT SKELTON PTR
            LA    R5,1(R5)            INCREMENT ACTUAL PTR
            BCT   R6,LOOP             TRY AGAIN
            B     ERROR4              SKELTON + DATA TOO LONG
   *
   **       SECTION TO INSERT DATA
   **             1. CHECK LENGTH
   **             2. TRANSLATE TO GET RID OF BAD CHARACTERS
   *
   LOOP2    LTR   R7,R7               ANY DATA TO MOVE
            BZ    LOOP1               NOPE SO MOVE PROMPT
            LH    R2,4(R7)            GET LENGTH
            CH    R2,=H'45'           CHECK FOR MAX LENGTH
            BL    *+8                 LENGTH IS OK
            LA    R2,45               SET TO MAX LENGTH
            CR    R2,R6               SEE IF SPACE LEFT
            BH    ERROR5              NOPE
            LA    R4,1(R4)            INCREMENT SKELTON PTR
            BCTR  R2,0                GET MACHINE LENGTH
            L     R1,0(R7)            GET PTR TO DATA
            EX    R2,DAMOVE           MOVE DATA
            EX    R2,TRCOMA            TRANSLATE  TO GET  RID OF  BAD CH
            LA    R5,1(R2,R5)         UPDATE DATA POINTER
            L     R7,8(R7)            GET POINTER TO NEXT DATA ITEM
            LA    R7,0(R7)            CLEAR TOP BYTE
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 22
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0
            SR    R6,R2               DECREMENT LENGTH
            BCT   R6,LOOP             TRY AGAIN
            B     ERROR6              SKELTON+DATA TOO LONG
   LOOPEOF  MVI   0(R5),0             SET EOF IN ACTUAL
   *
   **       REWRITE DATA
   *
            WRITE SECONE,SF,BLGSRC,ACTUAL,MF=E
            CHECK SECONE
   *
   **       CLOSE AND EXIT
   *
   CLOSE    CLOSE (BLGSRC)
   *
   **       EXIT
   *
   EXIT     DS    0H
   *
   **       FREE STORAGE
   *
            IKJRLSA ANSPTR            FREE STORAGE
            L     R13,4(R13)
            RETURN (14,12),RC=0
            EJECT
   *
   **       ERROR MESSAGE ROUTINES
   *
   ERROR1   LA    R8,EXIT             SET RETURN
            LA    R2,ERR1             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR2   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR2             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR3   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR3             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   ERROR6   DS    0H
   ERROR5   DS    0H
   ERROR4   LA    R8,CLOSE            SET RETURN
            LA    R2,ERR4             POINT AT ERROR MESSAGE
            B     ERRMSG              GO AND ISSUE MESSAGE
   *
   **       ISSUE ERROR MESSAGE
   *
   ERRMSG   DS    0H
            L     R3,CPPLUPT          GET UPT ADDRESS
            L     R4,CPPLECT          GET ECT ADDRESS
            PUTLINE PARM=OUTLIN,UPT=(R3),ECT=(R4),
                  OUTPUT=((R2),TERM,SINGLE,DATA),MF=(E,OUTIOPL)
            BR    R8
            EJECT
   *
   **       EXECUTED INSTRUCTIONS
   *
   MEMOVE   MVC   0(0,R3),0(R1)       MOVE IN MEMBER NAME
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 23
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0
   DAMOVE   MVC   0(0,R5),0(R1)       MOVE IN DATA
   TRCOMA   TR    0(0,R5),TRTABLE      TRANSLATE  TO GET  RID OF  BAD CH
            EJECT
   *
   **       DSECT
   *
            PRINT NOGEN
            CVT   DSECT=YES
            PRINT GEN
            IKJCPPL
            IKJIOPL
            IKJPPL
   R0       EQU   0
   R1       EQU   1
   R2       EQU   2
   R3       EQU   3
   R4       EQU   4
   R5       EQU   5
   R6       EQU   6
   R7       EQU   7
   R8       EQU   8
   R9       EQU   9
   R10      EQU   10
   R11      EQU   11
   R12      EQU   12
   R13      EQU   13
   R14      EQU   14
   R15      EQU   15
            EJECT
   SFT8MVXX CSECT
   *
   **       DATA
   *
   SAVE     DC    18F'0'
   MYPPL    DC    A(0,0,MYECB,PARMS,ANSPTR,0,0)
   MYECB    DC    A(0)                ECB
   ANSPTR   DC    A(0)
   MEMONE   DC    CL8' '
   MEMTWO   DC    CL8' '
   DCBOFLG  EQU   48
            WRITE SECONE,SF,BLGSRC,ACTUAL,MF=L
   BLGSRC   DCB   BLKSIZE=600,LRECL=600,DSORG=PO,MACRF=(R,W),
                  RECFM=F,DDNAME=BLGSRC
   OUTLIN   PUTLINE OUTPUT=(0,TERM,SINGLE,DATA),MF=L
   OUTIOPL  DS    4F
            EJECT
   *
   **       ERROR MESSAGES
   *
   ERR1     DC    AL2(ERR1E-*,0),C'BLGSRC DID NO OPEN'
   ERR1E    EQU   *
   ERR2     DC    AL2(ERR2E-*,0),C'SKELTON MEMBER NOT FOUND'
   ERR2E    EQU   *
   ERR3     DC    AL2(ERR3E-*,0),C'ACTUAL MEMBER NOT FOUND'
   ERR3E    EQU   *
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 24
    VER: 3.0                  TSO Command GINFOSRC            SEC: 4.3
+  _____________________________________________________________________
0
   ERR4     DC    AL2(ERR4E-*,0),C'LENGTH OF SKELTON +DATA > 512'
   ERR4E    EQU   *
            EJECT
   *
   **       FORMAT OF COMMAND
   *
            PRINT NOGEN
   PARMS    IKJPARM DSECT=IKJPARMD
   MEMBERS  IKJKEYWD
              IKJNAME 'MEMBER',SUBFLD=MEMFLD
   DATA     IKJKEYWD
              IKJNAME 'DATA',SUBFLD=DATALST
   *
   *
   MEMFLD   IKJSUBF
   FRSMEM     IKJIDENT 'FIRST MEMBER',
                  PROMPT='SKELTON MEMBER NAME',
                  MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
   SECMEM     IKJIDENT 'SECOND MEMBER',
                  PROMPT='ACTUAL MEMBER NAME',
                  MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
   *
   *
   DATALST  IKJSUBF
   LSTDATA    IKJIDENT 'DATA LIST',
                  CHAR,LIST
            IKJENDP
   TRTABLE  DS    0H
            DC    C'                '    00-0F
            DC    C'                '    10-1F
            DC    C'                '    20-2F
            DC    C'                '    30-3F
            DC    C'          Ö.<(+×'    40-4F
            DC    C'&&         !$*);^'   50-5F
            DC    C'-/          %_>?'    60-6F
            DC    C'          :#@''="'   70-7F
            DC    C' ABCDEFGHI      '    80-8F
            DC    C' JKLMNOPQR      '    90-9F
            DC    C'  STUVWXYZ      '    A0-AF
            DC    C'                '    B0-BF
            DC    C' ABCDEFGHI      '    C0-CF
            DC    C' JKLMNOPQR      '    D0-DF
            DC    C'  STUVWXYZ      '    E0-EF
            DC    C'0123456789      '    F0-FF
   SKELTON  DS    0F,XL600
   ACTUAL   DS    0F,XL600
            END
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 25
    VER: 3.0                 Pre-Level Set Usermod            SEC: 4.4
+  _____________________________________________________________________
0

 ×       4.4 Pre-Level Set Usermod
+×       ___ _________ ___ _______

 ×      The  following zap is configured  for INFO/MGMT prior  to the le
 × set PTFs UZ52795, UZ52796, and UZ52797.  Use this zap if you do not h
 × the level set on.



 × ++USERMOD(BF00021).
 × ++VER (Z038) FMID(HOZ1202)  /*
 ×     THIS  MODIFICATION IMPLEMENTS  THE BATCH  ACCESS OF  INFO/MGMT WH
 ×     WAS OMITTED BY IBM IN ITS DEVELOPMENT.  THE FUNCTIONS ARE:
 ×        1. ELIMINATE CHECK FOR SCREEN SIZE IN BLGI2TI.
 ×        2.  ON ANY FORCED TGET  RESPOND IF PANEL IS  NOT IN TABLE RESP
 ×           WITH  ';PR S U,2,INFORPT'.  IF  PANEL IS  IN TABLE  THEN DO
 ×           GETLINE MACRO  AND PUT REPLY  BACK INTO BUFFER.    IF  GETL
 ×           RETURNS ERROR  OR EOF THEN REPLY WITH ';QUIT'.    THE TABLE
 ×           AS OF NOW:
 ×                          BLG1M234 (PRINT COMPLETE)
 ×                          BLG1M212 (REPORT COMPLETE)
 ×                          BLG1M410 (PURGE VERIFICATION)
 ×     */.
 × ++ZAP (BLGI2TI).
 ×   NAME   BLGI2TI
 × *
 × **     THIS ZAP  TURNS OFF  THE GTSIZE  CHECK FOR  ATLEAST  3270  SCR
 × **    SIZE
 × *
 ×   VER A0 4740        TEST FOR # ROWS < 24
 ×   REP A0 4700        IGNORE TEST
 ×   VER A8 47B0        TEST FOR # COLS >= 80
 ×   REP A8 47F0        MARK ALWAYS TRUE
 × ++ZAP (BLGI2TRW).
 ×   EXPAND BLGI2TRW(324)
 ×   NAME    BLGI2TRW
 × *
 × **     THIS ZAP RETURNS THE STRING ';PR S U,2,INFORPT'  ON ANY TGET W
 × **     RETURNED BUFFER LENGTH  IS ZERO,  UNLESS  THE SCREEN  IS BLG1M
 × **    OR BLG1M212 OR BLG1M410
 × *
 ×   VER 0578 5840,B054     TEST FOR ORIGINAL INST
 ×   VER 0650 0000,0120     TEST FOR ORIGINAL AREA LENGTH
 ×   VER 0688 0000          TEST FOR NEW PATCH AREA
 ×   REP 0578 47F0,C66C        B  PATCH AREA
 ×   REP 0650 0000,013C     TEST FOR ORIGINAL AREA LENGTH
 ×   REP 0688 5840,B054        L 4,84(11)        ACCESS TBUF  (OVERLAID
 ×   REP 068C 1266             LTR 6,6         LENGTH ZERO?
 ×   REP 068E 4770,C560        BNZ RETURN      IF NOT THEN RETURN
 ×   REP 0692 5810,5004        L 1,4(5)        CYCLE THROUGH
 ×   REP 0696 5820,1000        L 2,0(1)           BLOCKS TO GET
 ×   REP 069A 5830,2008        L 3,8(2)              INPUT BUFFER OF SCR
 ×   REP 069E D20A,3000,C76C *  MVC 0(11,3),A     MOVE  IN 'QUIT'  RESPO
 ×   REP 06A4 4160,000B        LA 6,11              SET  LENGTH  OF  'QU
 ×   REP 06A8 BFFF,4010        ICM 15,15,16(4) GET OUT BUF ADDR
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 26
    VER: 3.0                 Pre-Level Set Usermod            SEC: 4.4
+  _____________________________________________________________________
0
 ×   REP 06AC 4780,C560        BZ RETURN       IF ZERO SKIP
 ×   REP 06B0 D507,F01E,C788   CLC 30(8,15),ENTER IS THIS BLG0ENTR
 ×   REP 06B6 4780,C6CA        BE  GET          IF  SO THEN CONSIDER IN
 ×   REP 06BA 41E0,C790        LA  14,TABLE    POINT AT TABLE
 ×   REP 06BE 9500,E000   LOOP CLI 0(14),0     END OF TABLE?
 ×   REP 06C2 4780,C6BC        BE  PRINT       YES SO PRINT SCREEN
 ×   REP 06C6 D507,F016,E000     CLC  22(8,15),0(14)  CHECK  AGAINST  TA
 ×   REP 06CC 4780,C6CA        BE GET            IF  FOUND THEN  DO GETL
 ×   REP 06D0 41E0,E008        LA 14,8(14)     GET NEXT ENTRY
 ×   REP 06D4 47F0,C6A2        B   LOOP        TRY AGAIN
 × *
 × **     PUT ';PR S U,2,INFORPT' COMMAND IN BUFFER
 × *
 ×   REP 06D8 4160,0017  PRINT LA 6,23             SET  LENGHT  OF  'PRI
 ×   REP 06DC D20F,3007,C777 * MVC 7(16,3),D   MOVE IN 'PRINT'
 ×   REP 06E2 47F0,C560        B  RETURN       ALL DONE
 × *
 × **     DO GETLINE MACRO AND PUT RESPONSE IN BUFFER
 × *
 ×   REP 06E6 5810,2004  GET   L  1,4(2)       SET R1->CPPL
 ×   REP 06EA 58E0,1004        L  14,4(1)      GET UPT ADDR
 ×   REP 06EE 58F0,100C        L  15,12(1)     GET ECT ADDRE
 ×   REP 06F2 4110,B120        LA  1,IOPL           GET  ADDR  OF  WORKA
 ×   REP 06F6 50E0,1000        ST 14,0(1)      SAVE ADDR OF UPT
 ×   REP 06FA 50F0,1004        ST 15,4(1)      SAVE ADDR OF ECT
 ×   REP 06FE 41E0,B138        LA  14,ECB      POINT AT ECB
 ×   REP 0702 50E0,1008        ST  14,8(1)     SAVE ADDR OF ECB
 ×   REP 0706 41E0,B130        LA  14,GTPB     POINT AT GTPB
 ×   REP 070A 50E0,100C        ST  14,12(1)    SAVE ADDR OF GTPB
 ×   REP 070E D707,B130,B130   XC  GTPB(8),GTPB
 ×   REP 0714 9280,B132        MVI GTPB+2,X'80'  SET FLAGS
 ×   REP 0718 58F0,0010        L   15,16       GET CVT ADDR
 ×   REP 071C 9180,F15C        TM  348(15),X'80'  IS GETLINE LOADED
 ×   REP 0720 47E0,C712        BNO IKJ@0001    NO BRANCH TO LINK
 ×   REP 0724 58F0,F15C        L   15,348(15)  YES BALR TO GETLINE
 ×   REP 0728 05EF             BALR 14,15      DO GETLINE
 ×   REP 072A 47F0,C72A        B   IKJ$0001    ALL DONE
 ×   REP 072E 0700      IKJ@0001 NOPR 0
 ×   REP 0730 45F0,C728         BAL  15,*+20      BRANCH  AROUND  CONSTA
 ×   REP 0734 0000,0000        DC  A(*+8)      CANT ZAP RELO ADDR
 ×   REP 0738 0000,0000        DC  F'0'        DCB ADDR PARM
 ×   REP 073C C9D2,D1C7,C5E3,D340     DC C'IKJGETL'
 ×   REP 0744 0000             SVC 6             dont use  svc because r
 × *                                            addr can't be zaped
 ×   REP 0746 59F0,C768 IKJ$0001 C  15,MARC    CHECK RETURN CODE
 ×   REP 074A 4720,C560        BH  RETURN      RETURN IF BAD
 ×   REP 074E 58F0,B134        L   15,GTPB+4   GET ADDR OF BUFFER
 ×   REP 0752 4810,F000        LH  1,0(15)          GET  LENGTH  OF  BUF
 ×   REP 0756 5B10,C768        S   1,MARC      CHECK LENGTH >4
 ×   REP 075A 47D0,C560        BNP RETURN      THEN RETURN QUIT
 ×   REP 075E 0610             BCTR  1,0       GET MACHINE LENGTH
 ×   REP 0760 4410,C760        EX   1,MOVEIT   MOVE IN DATA
 ×   REP 0764 4160,1007        LA   6,7(1)     MOVE IN LENGTH
 ×   REP 0768 181F             LR   1,15       MOVE IN DATA
 ×   REP 076A 4800,1000        LH   0,0(1)     GET LENGTH
1  DATE: 11/04/81     Running V2.0 of INFO/SYS in the BATCH  PAGE: 27
    VER: 3.0                 Pre-Level Set Usermod            SEC: 4.4
+  _____________________________________________________________________
0
 ×   REP 076E BF08,C787        ICM  0,8,SUBPOOL GET SUBPOOL VALUE
 ×   REP 0772 4110,1000        LA   1,0(1)     CLEAR TOP BYTE
 ×   REP 0776 0A0A             SVC  10         FREE RESPONSE
 ×   REP 0778 47F0,C560        B    RETURN     AND RETURN
 ×   REP 077C D200,3006,F004 MOVEIT MVC 6(0,3),4(15)  MOVE IN DATA
 ×   REP 0784 0000,0004   MARC DC   F'4'           CHECK  FOR  RC  AND
 ×   REP 0788 7D5C,F711,5CF6,5ED8  A  DC X'7D5CF7115CF6',C';QUIT'
 ×   REP 0790 E4C9,E3
 ×   REP 0793 D7D9,40E2,40E4,6BF2  D  DC C'PR S U,2,INFORPT'
 ×   REP 079B 6BC9,D5C6,D6D9,D7E3
 ×   REP 07A3 01                   SUBPOOL DC X'01'
 ×   REP 07A4 C2D3,C7F0,C5D5,E3D9  ENTER    DC  C'BLG0ENTR'      MAIN  M
 ×   REP 07AC C2D3,C7F1,D4F2,F3F4  TABLE    DC  C'BLG1M234'      PRINT
 ×   REP 07B4 C2D3,C7F1,D4F2,F1F2           DC  C'BLG1M212'      REPORT
 ×   REP 07BC C2D3,C7F1,D4F4,F1F0           DC  C'BLG1M410'    PURGE VER
 ×   REP 07C4 0000,0000,0000,0000            DC   XL8'00'    END  OF  TA
