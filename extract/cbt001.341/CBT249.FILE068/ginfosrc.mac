//GUYSRC  JOB (U32048050058,17F),GUY,CLASS=E,MSGCLASS=N,NOTIFY=GUY
/*ROUTE PRINT LOCAL
// EXEC ASMFCL,MAC1='SYS1.AMODGEN'
SFT8MVXX CSECT
***********************************************************************
*
*        THIS PROGRAM'S PURPOSE IS TO UPDATE A SRC WITH DATA VALUES TO
*        BE PLUGGED INTO THE SRC AT CERTAIN POINTS.
*
*        ****
*              THIS PROGRAM IS A TSO COMMAND PROCESSOR
*                                                      ****
*
*              CURRENT SYNTAX
*
*
*               GINFOSRC   MEMBER(MEM1,MEM2),
*                          DATA(DATA1,DATA2,...DATAN)
*
*
*                              WHERE MEM1 IS THE SKELETON
*                                    MEM2 IS THE UPDATED ACTUAL
*
*                                    DATA1 - DATAN ARE THE VALUES
*                                          TO REPLACE THE QUESTION MARKS
*                                          IN THE SKELETON IN CREATING
*                                          THE ACTUAL
*
*
*
*
*
*                                       GUY L. ALBERTELLI
*                                       BFGOODRICH
*                                       500 S. MAIN STREET
*                                       AKRON, OHIO    44318
*
*                                       216/374-4071
*
*
*
***********************************************************************
         SAVE  (14,12),,GINFOSRC_&SYSDATE_&SYSTIME
         LR    R12,R15             SET BASE REG
         USING SFT8MVXX,R12
         ST    R13,SAVE+4          CHAIN SAVE AREAS
         LA    R13,SAVE            POINT TO SAVE AREA
*
**       SAVE CPPL ADDRESS
*
         LR    R11,R1
         USING CPPL,R11
*
**       PARSE PARM LIST TO CHECK FOR OPTIONS
**             1. SETUP PPL
**             2. CALL PARSE
*
         LA    R3,MYPPL            POINT PPL
         USING PPL,R3              SETUP ADDRESSABILITY
         MVC   PPLUPT,CPPLUPT      MOVE THE UPT ADDR
         MVC   PPLECT,CPPLECT      MOVE THE ECT ADDR
         MVC   PPLCBUF,CPPLCBUF    MOVE THE BUFFER POINTER
         LR    R1,R3               MOVE INTO PROPER REGISTER
         CALLTSSR EP=IKJPARS
         LTR   R15,R15
         BZ    *+6
         DC    H'0'
         L     R8,ANSPTR           GET ANSWER AREA
         USING IKJPARMD,R8         SETUP ADDRESSABILITY
*
**       VALIDATE THAT BOTH MEMBER NAMES OCCURED
*
*
**       OPEN FILE
*
         OPEN  (BLGSRC,(UPDAT))
         TM    BLGSRC+DCBOFLG,X'10'
         BZ    ERROR1
*
**       MOVE BOTH MEMBER NAMES
*
         L     R1,FRSMEM           GET ADDR OF FIRST MEMBER
         LH    R2,FRSMEM+4         GET LENGTH
         BCTR  R2,0                GET MACHINE LENGTH
         LA    R3,MEMONE           POINT TO OUTPUT FIELD
         EX    R2,MEMOVE           MOVE THE MEMBER'
         L     R1,SECMEM           GET ADDR OF FIRST MEMBER
         LH    R2,SECMEM+4         GET LENGTH
         BCTR  R2,0                GET MACHINE LENGTH
         LA    R3,MEMTWO           POINT TO OUTPUT FIELD
         EX    R2,MEMOVE           MOVE THE MEMBER'
*
**       ACCESS FIRST MEMBER (SKELTON)
*
         FIND  BLGSRC,MEMONE,D     LOOK FOR MEMBER
         LTR   R15,R15             SEE IF FOUND
         BNZ   ERROR2
*
**       GET THE FIRST MEMBER
*
         READ  FIRSTONE,SF,BLGSRC,SKELTON
         CHECK FIRSTONE
*
**       ACCESS SECOND MEMBER (ACTUAL)
*
         FIND  BLGSRC,MEMTWO,D     LOOK FOR MEMBER
         LTR   R15,R15             SEE IF FOUND
         BNZ   ERROR3
*
**       GET THE SECOND MEMBER
*
         READ  SECONE,SF,BLGSRC,ACTUAL,MF=E
         CHECK SECONE
*
**       MOVE SKELTON TO ACTUAL
*
         LA    R4,SKELTON+88
         LA    R5,ACTUAL+88
         LA    R6,512              MAX LENGTH TO MOVE
         LA    R7,LSTDATA          POINT AT FIRST DATA ITEM
         TM    6(R7),X'80'         SEE IF FIRST ITEM EXISTS
         BNZ   *+6                 YES
         SR    R7,R7               CLEAR DATA ITEM POINTER
*
**       START LOOP TO MOVE SKELTON
*
LOOP     CLI   0(R4),0             LOOK FOR END OF SRC
         BE    LOOPEOF             EXIT IF FOUND
         CLI   0(R4),C'?'          SEE IF PROMPT
         BE    LOOP2               IF SO TRY TO MOVE DATA
LOOP1    MVC   0(1,R5),0(R4)       MOVE IN SKELTON BYTE TO ACTUAL
         LA    R4,1(R4)            INCREMENT SKELTON PTR
         LA    R5,1(R5)            INCREMENT ACTUAL PTR
         BCT   R6,LOOP             TRY AGAIN
         B     ERROR4              SKELTON + DATA TOO LONG
*
**       SECTION TO INSERT DATA
**             1. CHECK LENGTH
**             2. TRANSLATE TO GET RID OF BAD CHARACTERS
*
LOOP2    LTR   R7,R7               ANY DATA TO MOVE
         BZ    LOOP1               NOPE SO MOVE PROMPT
         LH    R2,4(R7)            GET LENGTH
         CH    R2,=H'45'           CHECK FOR MAX LENGTH
         BL    *+8                 LENGTH IS OK
         LA    R2,45               SET TO MAX LENGTH
         CR    R2,R6               SEE IF SPACE LEFT
         BH    ERROR5              NOPE
         LA    R4,1(R4)            INCREMENT SKELTON PTR
         BCTR  R2,0                GET MACHINE LENGTH
         L     R1,0(R7)            GET PTR TO DATA
         EX    R2,DAMOVE           MOVE DATA
         EX    R2,TRCOMA           TRANSLATE TO GET RID OF BAD CHARS
         LA    R5,1(R2,R5)         UPDATE DATA POINTER
         L     R7,8(R7)            GET POINTER TO NEXT DATA ITEM
         LA    R7,0(R7)            CLEAR TOP BYTE
         SR    R6,R2               DECREMENT LENGTH
         BCT   R6,LOOP             TRY AGAIN
         B     ERROR6              SKELTON+DATA TOO LONG
LOOPEOF  MVI   0(R5),0             SET EOF IN ACTUAL
*
**       REWRITE DATA
*
         WRITE SECONE,SF,BLGSRC,ACTUAL,MF=E
         CHECK SECONE
*
**       CLOSE AND EXIT
*
CLOSE    CLOSE (BLGSRC)
*
**       EXIT
*
EXIT     DS    0H
*
**       FREE STORAGE
*
         IKJRLSA ANSPTR            FREE STORAGE
         L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
*
**       ERROR MESSAGE ROUTINES
*
ERROR1   LA    R8,EXIT             SET RETURN
         LA    R2,ERR1             POINT AT ERROR MESSAGE
         B     ERRMSG              GO AND ISSUE MESSAGE
ERROR2   LA    R8,CLOSE            SET RETURN
         LA    R2,ERR2             POINT AT ERROR MESSAGE
         B     ERRMSG              GO AND ISSUE MESSAGE
ERROR3   LA    R8,CLOSE            SET RETURN
         LA    R2,ERR3             POINT AT ERROR MESSAGE
         B     ERRMSG              GO AND ISSUE MESSAGE
ERROR6   DS    0H
ERROR5   DS    0H
ERROR4   LA    R8,CLOSE            SET RETURN
         LA    R2,ERR4             POINT AT ERROR MESSAGE
         B     ERRMSG              GO AND ISSUE MESSAGE
*
**       ISSUE ERROR MESSAGE
*
ERRMSG   DS    0H
         L     R3,CPPLUPT          GET UPT ADDRESS
         L     R4,CPPLECT          GET ECT ADDRESS
         PUTLINE PARM=OUTLIN,UPT=(R3),ECT=(R4),                        X
               OUTPUT=((R2),TERM,SINGLE,DATA),MF=(E,OUTIOPL)
         BR    R8
         EJECT
*
**       EXECUTED INSTRUCTIONS
*
MEMOVE   MVC   0(0,R3),0(R1)       MOVE IN MEMBER NAME
DAMOVE   MVC   0(0,R5),0(R1)       MOVE IN DATA
TRCOMA   TR    0(0,R5),TRTABLE     TRANSLATE TO GET RID OF BAD CHARS
         EJECT
*
**       DSECT
*
         PRINT NOGEN
         CVT   DSECT=YES
         PRINT GEN
         IKJCPPL
         IKJIOPL
         IKJPPL
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
SFT8MVXX CSECT
*
**       DATA
*
SAVE     DC    18F'0'
MYPPL    DC    A(0,0,MYECB,PARMS,ANSPTR,0,0)
MYECB    DC    A(0)                ECB
ANSPTR   DC    A(0)
MEMONE   DC    CL8' '
MEMTWO   DC    CL8' '
DCBOFLG  EQU   48
         WRITE SECONE,SF,BLGSRC,ACTUAL,MF=L
BLGSRC   DCB   BLKSIZE=600,LRECL=600,DSORG=PO,MACRF=(R,W),             X
               RECFM=F,DDNAME=BLGSRC
OUTLIN   PUTLINE OUTPUT=(0,TERM,SINGLE,DATA),MF=L
OUTIOPL  DS    4F
         EJECT
*
**       ERROR MESSAGES
*
ERR1     DC    AL2(ERR1E-*,0),C'BLGSRC DID NO OPEN'
ERR1E    EQU   *
ERR2     DC    AL2(ERR2E-*,0),C'SKELTON MEMBER NOT FOUND'
ERR2E    EQU   *
ERR3     DC    AL2(ERR3E-*,0),C'ACTUAL MEMBER NOT FOUND'
ERR3E    EQU   *
ERR4     DC    AL2(ERR4E-*,0),C'LENGTH OF SKELTON +DATA > 512'
ERR4E    EQU   *
         EJECT
*
**       FORMAT OF COMMAND
*
         PRINT NOGEN
PARMS    IKJPARM DSECT=IKJPARMD
MEMBERS  IKJKEYWD
           IKJNAME 'MEMBER',SUBFLD=MEMFLD
DATA     IKJKEYWD
           IKJNAME 'DATA',SUBFLD=DATALST
*
*
MEMFLD   IKJSUBF
FRSMEM     IKJIDENT 'FIRST MEMBER',                                    X
               PROMPT='SKELTON MEMBER NAME',                           X
               MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
SECMEM     IKJIDENT 'SECOND MEMBER',                                   X
               PROMPT='ACTUAL MEMBER NAME',                            X
               MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
*
*
DATALST  IKJSUBF
LSTDATA    IKJIDENT 'DATA LIST',                                       X
               CHAR,LIST
         IKJENDP
TRTABLE  DS    0H
         DC    C'                '    00-0F
         DC    C'                '    10-1F
         DC    C'                '    20-2F
         DC    C'                '    30-3F
         DC    C'          Ö.<(+×'    40-4F
         DC    C'&&         !$*);^'   50-5F
         DC    C'-/          %_>?'    60-6F
         DC    C'          :#@''="'   70-7F
         DC    C' ABCDEFGHI      '    80-8F
         DC    C' JKLMNOPQR      '    90-9F
         DC    C'  STUVWXYZ      '    A0-AF
         DC    C'                '    B0-BF
         DC    C' ABCDEFGHI      '    C0-CF
         DC    C' JKLMNOPQR      '    D0-DF
         DC    C'  STUVWXYZ      '    E0-EF
         DC    C'0123456789      '    F0-FF
SKELTON  DS    0F,XL600
ACTUAL   DS    0F,XL600
         END
//LKED.SYSLMOD DD DSN=SYS1.CMDLIB(GINFOSRC),DISP=SHR,UNIT=,SPACE=
