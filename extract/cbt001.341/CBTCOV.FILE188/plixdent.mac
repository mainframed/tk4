         MACRO
&ENTRY   PLIXDENT  &DSALEN=92
.*
.* PL/I OPTIMIZING COMPILER DYNAMIC PROCEDURE ENTRY (REENTRANT)
.*
.* PARMS:
.*       &ENTRY: THE ENTRY NAME
.*       &DSALEN:THE LENGTH, IN BYTES, OF THE REQUIRED DSA.
.*               4095 IS THE MAXIMUM AND 92 IS THE MINIMUM LENGTH WHICH
.*               MAY BE BE SPECIFIED.  THE FIRST 120 BYTES OF DSA
.*               ARE DEFINED BY PL/I; ANY ALLOCATION BEYOND 120 BYTES
.*               MAY BE USED FOR TEMPORARIES, ETC.
.*
.* NOTE THAT THE DSA MUST BE ALIGNED ON A DOUBLE-WORD.
.* THE DSA CAN BE MAPPED BY THE PLIXDSA MACRO.
.* EQUATES ARE FROM THE PLIXSET MACRO.
.* PROCEDURE EXIT IS ACCOMPLISHED BY THE PLIXEXT MACRO.
.* THIS CODE WAS MODIFIED FROM A REAL PL/I SUBROUTINE COMPILER LISTING,
.* (NOT FROM THE PROGRAMMER'S GUIDE), SO THE DSA IS KOSHER.
.* APB - 08/29/79
.*
         GBLC  &NAME,&RBASE,&RLAST
         LCLA  &ELN
&ELN     SETA  K'&ENTRY
         DC    (7-&ELN)C' '
         DC    C'&ENTRY'
         DC    AL1(&ELN)
         ENTRY &ENTRY
&ENTRY   STM   R14,&RLAST,12(RDSA) STORE REGISTERS IN CALLER'S DSA
         BALR  R2,0                ESTABLISH BASE
         USING *,R2                FOR PROLOGUE CODE
         LA    R0,8*((&DSALEN.+7)/8)         LENGTH OF REQ'D DSA
         L     R1,D@NAB(,RDSA)     SHOW OLD NAB, BASE OF NEW DSA
         ALR   R0,R1               SHOW NAB AFTER NEW DSA ALLOCATION
         CL    R0,T@TEOS(,RTCA)    COMPARE WITH A(LAST USABLE BYTE)
         BNH   *+10                AND SKIP CALL IF STORAGE AVAILABLE
         L     R15,T@TOVF(,RTCA)   LOAD AND BRANCH TO PL/I LIFO STORAGE
         BALR  R14,R15             OVERFLOW ROUTINE
         L     R14,D@LWS(,RDSA)    A(LWS) FROM OLD DSA
         LR    R15,R0              EOP NAB = NAB
         ST    RDSA,4(,R1)         CHAINBACK OLD DSA
         LA    RDSA,0(,R1)         ADDRESS NEW DSA (& CLEAR HI BYTE)
         STM   R14,R0,D@LWS(RDSA)  A(LWS), NAB, EOP NAB
         ST    R5,D@SB(,RDSA)      STATIC BACKCHAIN
         MVI   0(RDSA),X'80'       PL/I FLAGS
         MVI   1(RDSA),X'00'       .
         MVI   D@CEC(RDSA),X'91'   ERROR HANDLING, CURRENT ENABLE CELL
         MVI   D@CEC+1(RDSA),X'C0' .
         MVC   D@BEC(2,RDSA),D@CEC(RDSA)     BLOCK EC = CURRENT EC
         L     R1,4(,RDSA)         GET PREVIOUS DSA,
         L     R1,24(,R1)          & RESTORE PARM PTR
         L     &RBASE,=A(&NAME)    GET BASE ADDRESS
         USING &NAME,&RBASE        .
         DROP  R2                  DROP PROLOGUE BASE
         MEND
