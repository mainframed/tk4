         MACRO
&LAB     @BITS &A,&OP,&COND,&GOTO,&TRUE,&FALSE,&PFX=
         GBLB  &@FAIL
.*             DEFINE LOCAL SYMBOLS FOR BIT-TEST GENERATOR --
         LCLA  &BYTE(50)           INDEX TO NAME OF BYTE (INIT 0).
         LCLA  &BIT(50)            BIT WITHIN BYTE (ORIGIN 1).
         LCLC  &NAME(50)           LIST OF UNIQUE BYTE NAMES.
         LCLA  &MAXN               NO. OF ENTRIES IN &NAME (INIT 0).
         LCLA  &N                  NO. OF SWITCHES.
         LCLA  &LIM                MAX NO. OF SWITCHES ALLOWED.
         LCLB  &B(9)               TM BIT MASK (INIT 0).
         LCLC  &TEMP
         LCLA  &L,&M               LENGTH CALCULATION TEMP.
         LCLA  &I,&J,&K            VARIOUS INDICES.
         LCLB  &NOT                IF NEGATIVE CONDITION (INIT 0).
         LCLB  &NOTEST             IS NOT AN OP WITH A GOTO.
         LCLC  &R                  = 'R' IF A REGISTER GOTO.
.*
&LIM     SETA  50                  MAX NO. OF BIT SWITCHES.
&NOTEST  SETB  1                   ASSUME NO BRANCH.
         AIF   ('&COND' EQ '').NOTR          CONTINUE IF SO.
&NOTEST  SETB  0                   THERE IS A BRANCH.
         AIF   ('&GOTO' EQ '').NOADDR
         AIF   ('&GOTO'(1,1) NE '(').NOTR
&R       SETC  'R'
.NOTR    ANOP
.*             DO QUICK PROCESSING IF ONLY 1 BIT-SWITCH --
&N       SETA  N'&A                NO. OF SWITCHES.
         AIF   (&N NE 1).NOTONE    HAIRY IF > 1.
         AIF   (T'&A(1) NE 'B').INVAL1       SWITCH MUST BE LIKE 0BL103
&L       SETA  L'&A(1)             GET LENGTH.
         AIF   (&L LT 100).INVAL1
&L       SETA  &L-10*(&L/10)       GET BIT NO. (0-7).
         AIF   (&L GT 7).TRYALL1   IS EITHER INVALID OR 'ALL BITS'.
&B(&L+1) SETB  1                   TURN ON PROPER TM BIT.
&LAB     &OP   &A(1),&PFX.B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
.TM1     AIF   (&NOTEST).END       DONE IF NOT A 'TM'.
         BC&R  &TRUE&COND,&GOTO .
         MEXIT
.NOADDR  @ERROR 7,BRANCH-ADDR,(OMITTED)
         MEXIT
.TRYALL1 AIF   (&L GT 8).INVAL1
&LAB     &OP   &A(1),&PFX.B'11111111' .
         AGO   .TM1
.INVAL1  @ERROR 7,BIT-SWITCH,&A(1)
         MEXIT
.TOOMANY @ERROR 1,BIT-SWITCHES,&LIM
&N       SETA  &LIM                USE MAXIMUM.
         AGO   .OKN
.INVAL   @ERROR 7,BIT-SWITCH,&A(&I)
         AGO   .LOOP1X
.MISS    ANOP  ,                   HERE FROM BYTE NAME LOOK-UP.
&NAME(&J) SETC '&TEMP'
&MAXN    SETA  &J
         AGO   .GOTJ
.*             HERE IF MORE THAN 1 BIT SWITCH --
.NOTONE  AIF   (&N GT &LIM).TOOMANY          CHECK MAX NO.
.OKN     ANOP
&I       SETA  1                   LOOP THRU ALL &N SWITCHES.
.LOOP1   AIF   (T'&A(&I) NE 'B').INVAL       CHECK TYPE.
&L       SETA  L'&A(&I)            GET LENGTH.
         AIF   (&L LT 100).INVAL
&M       SETA  &L/10               GET BYTE NAME WITHIN DSECT.
&L       SETA  &L-10*&M            GET BIT NO. (0-7).
         AIF   (&L GT 8).INVAL
.*                                 FIND BYTE NAME IN &NAME.
&TEMP    SETC  '&A(&I)'(1,3).'&M'  NAME = DSECT ID & BYTE NO.
&J       SETA  0                   LOOP THRU ALL ENTRIES IN &NAME.
.LOOP2   ANOP
&J       SETA  &J+1
         AIF   (&J GT &MAXN).MISS  NOT IN TABLE.
         AIF   ('&TEMP' NE '&NAME(&J)').LOOP2
.GOTJ    ANOP  ,                   &J IS THE RIGHT INDEX IN &NAME.
&BYTE(&I) SETA &J                  SET BYTE INDEX.
&BIT(&I)  SETA &L+1                SET BIT NO. (1-8), OR 9 (ALL BITS).
.LOOP1X  ANOP
&I       SETA  &I+1
         AIF   (&I LE &N).LOOP1    LOOP BACK.
.*
.*             NOW GENERATE THE TM'S.  THE LAST ONE IS SPECIAL.
         AIF   (&MAXN EQ 0).END    (ALL WERE INVALID).
&I       SETA  &MAXN               BYTE NUMBER.
         AIF   ('&LAB' EQ '').LOOP3          NO LABEL.
&LAB     DS    0H
.LOOP3   ANOP  ,                   LOOP THRU ALL UNIQUE BYTES.
&B(1)    SETB  0                   CLEAR TM'S BIT MASK.
&B(2)    SETB  0
&B(3)    SETB  0
&B(4)    SETB  0
&B(5)    SETB  0
&B(6)    SETB  0
&B(7)    SETB  0
&B(8)    SETB  0
&B(9)    SETB  0
.*             FIND LAST SWITCH WITH THIS BYTE NO.
&J       SETA  &N                  SCAN FROM THE RIGHT.
.LOOP4   AIF   (&BYTE(&J) EQ &I).GOTLAST
&J       SETA  &J-1
         AGO   .LOOP4              CAN'T FALL THRU.
.GOTLAST ANOP  ,
&B(&BIT(&J))   SETB 1              SET THE MASK BIT.
.*             NOW FIND ALL THE REST FOR THIS BYTE.
&K       SETA  0                   LOOP THRU ALL THE REST.
.LOOP5   ANOP
&K       SETA  &K+1                LOOK AT NEXT SWITCH.
         AIF   (&K GE &J).GOTALL   ALL DONE WHEN HIT LAST ONE.
         AIF   (&BYTE(&K) NE &I).LOOP5       MUST BE FOR THIS BYTE.
&B(&BIT(&K))   SETB 1              SET THE MASK BIT.
         DC    0S(&A(&K))
         AGO   .LOOP5              GET ALL THE SWITCHES FOR THIS BYTE.
.GOTALL  AIF   (&B(9)).ALLALL      (ALL BITS IN BYTE).
         &OP   &A(&J),&PFX.B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
.LOOP3X  ANOP
&I       SETA  &I-1                SET TO TRY NEXT BYTE.
         AIF   (&I LE 0).FINAL     TREAT THE LAST TM SPECIALLY.
         AIF   (&NOTEST).LOOP3     SKIP IF NOT A 'TM'.
         BC&R  &FALSE&COND,THEN&SYSNDX .
         AGO   .LOOP3              GO TRY NEXT BYTE.
.FINAL   AIF   (&NOTEST).FINIS     DONE IF NOT 'TM'.
         BC&R  &TRUE&COND,&GOTO .
         AIF   (&MAXN LE 1).FINIS  NO UNNECESSARY LABEL.
THEN&SYSNDX EQU *
.FINIS   ANOP
&@FAIL   SETB  0                   SUCCEED EVEN IF SOME ERRORS.
         MEXIT
.ALLALL  &OP   &A(&J),&PFX.B'11111111'
         AGO   .LOOP3X
.END     MEND
