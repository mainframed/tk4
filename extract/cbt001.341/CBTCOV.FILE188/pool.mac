         MACRO ,                   CLOSING 'LOOP'.
&LAB     POOL  &DUMMY,&FI=0,&@EXIT=EXIT
         COPY  @STACK
         LCLA  &I,&N               'FI' LOOP VARIABLES.
         LCLC  &X(20)              HOLDS INTERVENING 'IF' MODA'S.
&I       SETA  1                   SET UP FOR 'FI' LOOP.
&N       SETA  &FI                 COPY SINCE CAN'T ASSIGN TO SYMB.
         AIF   (&N GT 20).TOOBIG   ENFORCE DIMENSION LIMIT.
.L1      AIF   (&I GT &N).POP      END OF 'FI' LOOP.
.*
.*       FI=N => GENERATE N FI'S BEFORE THE POOL.  KNOWING
.*             THIS ALLOWS US TO OPTIMIZE A LITTLE.
.*
         @POP  IF,FI               FIND OPENING 'IF'.
         AIF   (&@FAIL).POP        PUNT IF NO MORE.
         AIF   (&@MODB(&@LEVEL)).ISELSE      IS AN ELSE CLAUSE IN IF.
&X(&I)   SETC  'ELSE&@MODA(&@LEVEL)'         TARGET LABEL.
&I       SETA  &I+1
         AGO   .L1
.ISELSE  ANOP
&X(&I)   SETC  'FI&@MODA(&@LEVEL)'
&I       SETA  &I+1
         AGO   .L1
.TOOBIG  ANOP
&N       SETA  20                  CUT TO THE LIMIT.
         @ERROR 1,FI''S,20
         AGO   .L1                 CONTINUE.
.*
.*       HAVING SET UP &X TO CONTAIN ALL THE REQUESTED IF-TARGETS,
.*       GENERATE THE BACKWARD BRANCH & THEN EQUATE THE IF-TARGETS.
.*
.POP     @POP  LOOP,POOL,N=&LAB    FIND OPENING 'LOOP'.
         AIF   (&@FAIL).END        IF NONE, PUNT.
         AIF   (&@MODB(&@LEVEL)).ISEXIT 'EXIT' SETS &@MODB.
         @ERROR 12,&@EXIT
.ISEXIT  B     LOOP&@MODA(&@LEVEL) .          LOOP BACK.
&N       SETA  1                   SET UP TO GENERATE TARGETS.
.L2      AIF   (&N GE &I).SPACE    DONE.
&X(&N)   EQU   LOOP&@MODA(&@LEVEL)
&N       SETA  &N+1
         AGO   .L2
.SPACE   SPACE 1
.END     MEND
