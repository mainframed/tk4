         MACRO
&LAB     @IF   &A,&REL,&C,&GOTO=,&NEGATE=0
         GBLB  &@FAIL
         LCLB  &NOT                IF NEGATIVE CONDITION (INIT 0).
         LCLA  &COND
         LCLC  &TEMP
.*             DEFINE CONDITION PREFIXES --
         LCLC  &TRUE,&FALSE        (INIT '').
.*
&@FAIL   SETB  0
.*             SET UP THE CONDITION PREFIXES --
&FALSE   SETC  'X''F''-'           ASSUME NOT NEGATED.
         AIF   ('&NEGATE' EQ '0').OKPFX
&TRUE    SETC  '&FALSE'
&FALSE   SETC  ''
.*             DETERMINE TYPE OF TEST --
.OKPFX   AIF   ('&A' EQ '*' AND '&C' EQ '').CC  CONDITION CODE TEST.
         AIF   ('&C' EQ '' AND '&REL' NE '' AND '&A' NE '').BITS
.***     AIF   ('&A' NE '' & '&REL' NE '').RELAT  (NOT IMPL. YET).
         @ERROR 7,IF-TEST,(&A,&REL,&C)       ELSE INVALID.
         MEXIT
.*
.*             PROCESS CONDITION-CODE TEST --
.CC      AIF   (T'&REL NE 'N').CCOK1         COND MASK SHOULD NOT
         @ERROR 6,CONDITION-MASK,&REL        BE A CONSTANT.
.CCOK1   BC    &TRUE&REL,&GOTO .
         MEXIT
.*
.*       PROCESS BIT-SWITCH TESTS.
.*
.BITS    ANOP  ,                   FIRST, SET UP &COND.
&NOT     SETB  ('&REL'(1,1) EQ 'N' OR '&REL'(1,1) EQ '^')
&TEMP    SETC  '&REL'(1+&NOT,1)    FIRST (NON 'N') CHARACTER.
&COND    SETA  1                   IN CASE 'TRUE'.
         AIF   ('&TEMP' EQ 'T').TRUE
         AIF   ('&TEMP' EQ 'F').FALSE
         @ERROR 7,BIT-TEST,&REL    INVALID BIT-TEST.
&COND    SETA  0                   BUT GENERATE CODE ANYWAY.
         AGO   .OKCOND
.FALSE   ANOP  ,
&COND    SETA  8
.TRUE    AIF   (NOT &NOT).OKCOND
&COND    SETA  15-&COND
.OKCOND  @BITS &A,TM,&COND,&GOTO,&TRUE,&FALSE
         MEND
