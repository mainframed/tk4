         MACRO ,                   MULTI-LEVEL EXIT WITHIN 'KNOW'.
         @EXIT &LABEL,&IFTEST=1
         COPY  @STACK
         LCLA  &I,&J               INDICES.
         LCLB  &IF                 THERE IS AN INTERVENING 'IF'.
.*
.*       WHAT 'EXIT' DOES IS RATHER STRANGE:
.*             1) IT FINDS THE CONTAINING 'KNOW' WITH THE SAME LABEL;
.*             2) IT CHECKS TO BE SURE THERE IS AN 'IF' BETWEEN THE
.*                'KNOW' AND THE 'EXIT' -- THAT IS, THERE IS NO POINT
.*                IN HAVING AN UNCONDITIONAL 'EXIT,' SO WE COMPLAIN
.*                IF THIS 'EXIT' IS NOT CONTAINED IN AN 'IF'.
.*                (NOTE:  SINCE THE ABOVE LOGIC LEAVES OUT THE
.*                POSSIBILITY THAT THE EXIT MAY BE CIRCUMVENTED BY A
.*                'GRAB' OR A PREVIOUS 'EXIT' OF SOME TYPE, THE MESSAGE
.*                ERROR LEVEL IS CHANGED TO 4.    TAD)
.*             3) SET &@MODB ON FOR ALL 'LOOP'S CONTAINED IN THE 'KNOW'
.*                WHICH CONTAIN THE 'EXIT'.  SINCE AN 'EXIT' IS THE
.*                ONLY WAY TO TERMINATE A LOOP, 'POOL' CHECKS &@MODB
.*                TO MAKE SURE THE LOOP HAS A POSSIBILITY OF
.*                TERMINATING AT ALL.
.*
&I       SETA  &@LEVEL-1           SET UP FOR LOOP1.
&IF      SETB  ('&IFTEST' EQ '0')  INITIALIZE.
.LOOP1   AIF   ('&@MODC(&I)' EQ '&LABEL' AND '&@NAME(&I)' EQ 'KNOW').OK
&IF      SETB  (&IF OR '&@NAME(&I)' EQ 'IF')     SET IF INTERVENING IF.
&I       SETA  &I-1                KEEP SCANNING FOR PROPER 'KNOW'.
         AIF   (&I GT 1).LOOP1
         @ERROR 9,KNOW             THE 'KNOW' IS NOT THERE.
         MEXIT
.OK      AIF   (NOT &@MODB(&I)).OK2     NOT IN AN 'ONEXIT'.
         @ERROR 7,EXIT,WITHIN-ONEXIT
         MEXIT
.OK2     AIF   (&IF).GOTIF
         @ERROR 12,IF         NO INTERVENING 'IF'                  YTAD
.GOTIF   ANOP
&J       SETA  &@LEVEL-1           NOW SCAN FOR 'LOOP'S.
.LOOP2   AIF   ('&@NAME(&J)' NE 'LOOP').L1
&@MODB(&J) SETB 1                  SET 'POSSIBLE TERMINATION' IN LOOP.
.L1      ANOP
&J       SETA  &J-1
         AIF   (&J GT &I).LOOP2    KEEP GOING.
&@VALUE  SETA  &I                  RETURN STACK POINTER.
         DC    0Y(&LABEL-@LABEL)
&@FAIL   SETB  0                   RETURN SUCCESS.
         MEND
