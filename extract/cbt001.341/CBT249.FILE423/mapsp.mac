MAPSP    TITLE 'MAPSP - TSO COMMAND TO PROVIDE MVS/SP STORAGE LAYOUT MA+
               P.'
         SPACE 2
*%A PPLINK AMODGEN NOTEST AC(1)
         SPACE 1
***********************************************************************
*                                                                     *
*  COPYRIGHT (C) 1984 BY BROIDO COMPUTER CONSULTING.  ALL RIGHTS      *
*  RESERVED EXCEPT:                                                   *
*                                                                     *
*  PARTICULAR LICENSE IS GRANTED TO DISTRIBUTE THIS PROGRAM FREE      *
*  OF CHARGE, BUT IT MUST NOT BE SOLD.  A SERVICE CHARGE FOR          *
*  HANDLING A COLLECTION OF SOFTWARE OF WHICH THIS IS A PART,         *
*  ON THE OTHER HAND, IS APPROPRIATE.                                 *
*                                                                     *
*                                  BROIDO COMPUTER CONSULTING         *
*                                  104 MILLS STREET                   *
*                                  MORRISTOWN, N.J.  07960            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        MAPSP - TSO COMMAND TO PRODUCE STORAGE BOUNDARY MAP FOR      *
*                MVS/SP (NON-XA).                                     *
*                                                                     *
*                SYSLIB: ASM: SYS1.AMODGEN.                           *
*                        LNK: NONE.                                   *
*                                                                     *
*                NOT REENTRANT.                                       *
*                TESTED THROUGH LEVEL SP 1.3.4.                       *
*                                                                     *
*                                  JEFFREY R. BROIDO                  *
*                                  MHT/WCF-4/NYP-NYC                  *
*                                  26  JANUARY  1984                  *
*                                                                     *
***********************************************************************
         SPACE 1
MAPSP    CSECT
         REGS
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R12,R15             COPY BASE.
         USING MAPSP,R12           TELL ASSEMBLER.
         LR    R14,R13             PRESERVE CALLER'S SA PTR.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R14,SAVE+4          CHAIN ...
         ST    R13,8(,R13)         ... SAVE AREAS.
         SPACE 1
         L     R9,X'10'            POINT TO CVT.
         USING CVT,R9              TELL ASSEMBLER.
         L     R8,0(,R9)           POINT TO TCB/ASCB WORDS.
         L     R8,0(,R8)           POINT TO TCB.
         L     R8,X'B4'(,R8)       POINT TO JSCB.
         TM    X'EC'(R8),X'01'     OK TO DO MODESET?
         BZ    NOAUTH              B IF NOT.
         MODESET KEY=ZERO
         ON    AFLG                TURN ON OK-TO-MODESET FLAG.
NOAUTH   L     R8,CVTGDA           POINT TO GDA.
         USING GDA,R8              TELL ASSEMBLER.
         GTSIZE ,                  GET SCREEN SIZE, IF ANY.
         LTR   R0,R0               IS THIS A PAPER TERMINAL (NO DEPTH)?
         BZ    HEADOUT             B IF YES.
         STFSMODE ON,INITIAL=YES
*        TPUT  CLEAR,L'CLEAR,FULLSCR CLEAR THE DISPLAY SCREEN.
         TPUT  CLEAR,L'CLEAR,NOEDIT  CLEAR THE DISPLAY SCREEN.
         STFSMODE OFF
         ON    GFLG                TURN ON 3X7X FLAG.
HEADOUT  TPUT  HEAD1,LEN           OUTPUT HEADINGS.
         TPUT  HEAD2,LEN           OUTPUT UNDERLINES.
         LA    R3,TABLE            POINT TO TABLE ENTRY.
         USING TABLED,R3           TELL ASSEMBLER.
TABLUP   CLI   0(R3),X'00'         END OF TABLE?
         BE    EXIT                B IF YES.
         MVC   AREA,TABTITLE       MOVE ENTRY TITLE.
         L     R15,TABRES          POINT TO DATA RESOLUTION ROUTINE.
         BALR  R14,R15             FILL-IN TABLE ENTRY.
         LA    R1,TABSTART         POINT TO AREA START ADDRESS.
         TM    0(R1),X'80'         IS START ADDRESS PTR NEGATIVE?
         BO    MISSING             B IF YES.  AREA IS INDEED MISSING.
         BAL   R14,HEXOUT          CONVERT TO CHARACTER HEX.
         MVC   START,WORK+2        MOVE START ADDR. CHARACTER HEX.
         LA    R1,TABEND           POINT TO AREA END ADDRESS.
         BAL   R14,HEXOUT          CONVERT TO CHARACTER HEX.
         MVC   END,WORK+2          MOVE END ADDR. CHAR. HEX.
         L     R1,TABLEN           LOAD AREA LENGTH FROM TABLE.
         SRL   R1,10               "DIVIDE" BY 1K.
         CVD   R1,WORK             DECIMALIZE IT.
         MVC   LENGTH,=X'40206B2020206B202120'  MOVE EDIT PATTERN.
         ED    LENGTH,WORK+4       EDIT LENGTH.
         ICM   R1,15,TABFULL       LOAD AREA BYTES USED.
         BNZ   TFE                 B IF NOT ZERO.
         MVC   FULL,=C'--'         MOVE "NOT APPLICABLE" GRAPHIC.
         B     DETPUT              CONTINUE.
MISSING  MVC   START,=C'    --  '  MOVE "MISSING" GRAPHIC.
         MVC   END,=C'    --  '    MOVE "MISSING" GRAPHIC.
         MVC   LENGTH,=C'        --'  MOVE "MISSING" GRAPHIC.
         MVC   FULL,=C'--'         MOVE "MISSING" GRAPHIC.
         B     DETPUT              CONTINUE.
TFE      L     R5,TABLEN           LOAD DIVISOR.
         MH    R1,=H'100'          MULTIPLY BYTES BY 100.
         SR    R0,R0               ZERO HIGH ORDER DIVIDEND.
         DR    R0,R5               GENERATE PERCENT USED.
         SRL   R5,1                "DIVIDE" DIVISOR BY 2.
         CR    R0,R5               SHALL I ROUND?
         BL    NOROUND             B IF NOT.
         LA    R1,1(,R1)           ROUND PERCENTAGE.
NOROUND  CVD   R1,WORK             DECIMALIZE PERCENT.
         UNPK  WORK1(3),WORK+6(2)  UNPAKC PERCENT.
         MVC   FULL,WORK1+1        MOVE PERCENT.
         OI    FULL+1,C'0'         FIX SIGN.
DETPUT   TPUT  DETAIL,LEN          OUTPUT DETAIL LINE.
         LA    R3,TLEN(,R3)        BUMP TO NEXT TABLE ENTRY.
         B     TABLUP              LOOP.
         SPACE 1
EXIT     TF    AFLG                OK TO DO MODESET?
         BZ    EXIT1               B IF NOT.
         MODESET KEY=NZERO
EXIT1    L     R13,SAVE+4          POINT TO CALLER'S SAVE AREA.
         LM    R14,R12,12(R13)     RELOAD CALLER'S REGISTERS.
         SR    R15,R15             SET CC OF 0
         BR    R14                 RETURN TO CALLER.
         TITLE 'DATA RESOLUTION ROUTINES.'
NOPRES   BR    R14                 NOOP RESOLUTION ROUTINE.
PRES     L     R1,PASIZE           LOAD PRIVATE SIZE.
         ST    R1,TABLEN           SAVE IT IN TABLE.
         L     R2,PASTRT           LOAD PRIVATE START ADDRESS.
         ST    R2,TABSTART         SAVE IT IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... END ADDRESS.
         ST    R1,TABEND           SAVE IT IN TABLE.
         BR    R14                 RETURN.
PLPARES  L     R1,PLPAEND          LOAD END OF PLPA + 1
         LR    R15,R1              PRESERVE IT.
         L     R2,CVTLPDIA         POINT TO START OF PLPA.
         LA    R2,0(,R2)           CLEAR FLAG BYTE.
         ST    R2,TABSTART         SAVE IN TABLE.
         ST    R2,LPASTART         SAVE FOR MLPARES.
         SR    R1,R2               GENERATE LENGTH OF PLPA.
         ST    R1,TABLEN           SAVE IN TABLE.
         BCTR  R15,*-*             GENERATE END OF PLPA.
         ST    R15,TABEND          SAVE IN TABLE.
         BR    R14                 RETURN.
MLPARES  L     R1,CVTVPSA          POINT TO SYSGENED PSA.
         LA    R1,X'FFF'(,R1)      GENERATE START ...
         LA    R1,1(,R1)           ... OF MLPA AND/OR BLDL.
         L     R2,LPASTART         POINT TO START OF PLPA.
         OI    TABSTART,X'80'      TELL TABLE AREA MISSING BY DEFAULT.
         CR    R1,R2               ANY MLPA AND/OR BLDL?
         BER   R14                 RETURN IF NOT.
         ST    R1,TABSTART         SAVE START ADDRESS IN TABLE.
         LR    R15,R2              PRESERVE END ADDRESS.
         BCTR  R2,*-*              GENERATE END ADDRESS.
         ST    R2,TABEND           SAVE IN TABLE.
         SR    R15,R1              GENERATE LENGTH.
         ST    R15,TABLEN          SAVE IN TABLE.
         BR    R14                 RETURN.
SPSARES  L     R1,CVTVPSA          POINT TO SYSGENED PSA.
         ST    R1,TABSTART         SAVE IN TABLE.
         LA    R1,X'FFF'(,R1)      GENERATE END ADDRESS (+4K-1).
         ST    R1,TABEND           SAVE IN TABLE.
         BR    R14                 RETURN.
CRES     L     R15,CSAPQEP         POINT TO CSA PQE.
         USING PQESECT,R15         (TELL ASSEMBLER).
         L     R1,PQEREGN          POINT TO START OF CSA REGION.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R0,PQESIZE          LOAD LENGTH OF CSA REGION.
         ST    R0,TABLEN           SAVE IN TABLE.
         AR    R1,R0               GENERATE ...
         BCTR  R1,*-*              ... END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         TF    AFLG                OK TO LOOK AT FETCH PROT. AREAS?
         BZR   R14                 B IF NOT.  RETURN.
         L     R4,PQEFFBQE         POINT TO FIRST FBQE.
         USING FBQESECT,R4         (TELL ASSEMBLER).
CFBQELUP CR    R15,R4              FBQE PTR POINT BACK TO PQE?
         BE    CSUB                B IF YES.  END.
         S     R0,SIZE             SUBTRACT FREE BLOCK SIZE.
         L     R4,0(,R4)           POINT TO NEXT FBQE.
         B     CFBQELUP            LOOP.
CSUB     L     R15,CSASPQEP        POINT TO LAST CSA SPQE.
         USING SPQESECT,R15        (TELL ASSEMBLER)
CSPQELUP ICM   R4,7,SPDQEPTR+1     POINT TO FIRST DQE FOR THIS SUBPOOL.
         USING DQESECT,R4          (TELL ASSEMBLER)
         BZ    CSPQEBMP            B IF NO DQES FOR THIS SUBPOOL.
CDQELUP  CLC   DQFQEPTR,=A(0)      THIS DQE DESCRIBE STORAGE?
         BE    CDQEBUMP            B IF NOT.
         L     R10,DQFQEPTR        POINT TO FIRST FQE.
         USING FQESECT,R10         TELL ASSEMBLER.
CFQELUP  LA    R10,0(,R10)         CLEAR HIGH BYTE.
         LTR   R10,R10             ANY MORE FREE AREAS?
         BZ    CDQEBUMP            B IF NOT.
         S     R0,FQELNTH          DECREMENT USED SPACE ACCUM.
         L     R10,FQEPTR          BUMP TO NEXT FQE.
         B     CFQELUP             LOOP.
CDQEBUMP ICM   R4,7,DQEPTR+1       BUMP TO NEXT DQE.
         BNZ   CDQELUP             LOOP.
CSPQEBMP TM    SPQEFLGS,LASTSPQE   THIS THE LAST SPQE?
         BO    CRESFREE            B IF YES. CALCULATE FREE SPACE.
         L     R15,SPQEAD          POINT TO PREVIOUS SPQE.
         B     CSPQELUP            LOOP.
CRESFREE ST    R0,TABFULL          SAVE CSA USED LENGTH IN TABLE.
         DROP  R15,R4,R10
         BR    R14                 RETURN.
SRES     L     R15,SQASPQEP        POINT TO SQE (SP 245) SPQE.
         USING SPQESECT,R15        (TELL ASSEMBLER)
         L     R4,SPDQEPTR         POINT TO ONLY DQE FOR THIS SUBPOOL.
         USING DQESECT,R4          (TELL ASSEMBLER)
         L     R1,DQEBLKAD         LOAD START ADDRESS OF SQA.
         ST    R1,TABSTART         SAVE IN TABLE.
         ST    R1,PLPAEND          SAVE FOR PLPARES ROUTINE.
         L     R0,DQELNTH          LOAD LENGTH OF SQA.
         ST    R0,TABLEN           SAVE IN TABLE.
         AR    R1,R0               GENERATE ...
         BCTR  R1,*-*              ... END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         L     R10,DQFQEPTR        POINT TO FIRST FQE.
         USING FQESECT,R10         TELL ASSEMBLER.
SFQELUP  LA    R10,0(,R10)         CLEAR HIGH BYTE.
         LTR   R10,R10             ANY MORE FREE AREAS?
         BZ    SRESFREE            B IF NOT.
         S     R0,FQELNTH          DECREMENT USED SPACE ACCUM.
         L     R10,FQEPTR          BUMP TO NEXT FQE.
         B     SFQELUP             LOOP.
SRESFREE ST    R0,TABFULL          SAVE SQA USED LENGTH IN TABLE.
         DROP  R15,R4,R10
         BR    R14                 RETURN.
VRRES    L     R15,VRPQEP          POINT TO V=R PQE.
         USING PQESECT,R15         (TELL ASSEMBLER).
         L     R1,PQEREGN          POINT TO START OF V=R REGION.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,PQESIZE          LOAD LENGTH OF V=R REGION.
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         DROP  R15
         BR    R14                 RETURN.
NUCRES   L     R1,CVTNUCB          POINT PAST END OF NUC.
         BCTR  R1,*-*              GENERATE END OF NUC.
         ST    R1,TABEND           SAVE IN TABLE.
         SH    R2,=H'4095'         GENERATE NUC LENGTH.
         ST    R2,TABLEN           SAVE IN TABLE.
         BR    R14                 RETURN.
         TITLE 'SUBROUTINE(S).'
***********************************************************************
*                                                                     *
*    HEXOUT - SUBROUTINE TO GENERATE CHARACTER CODED HEXADECIMAL      *
*        FOR OUTPUT.  R1 POINTS TO THE FULLWORD TO BE TRANSLATED.     *
*        FIND OUTPUT CHARACTER RESULT IN DOUBLEWORD "WORK."           *
*                                                                     *
***********************************************************************
         SPACE 1
HEXOUT   MVO   WORK1,0(4,R1)       GENERATE PSEUDO PACKED VALUE.
         UNPK  WORK,WORK1+3(5)     SEPARATE NIBBLES.
         NC    WORK,=X'0F0F0F0F0F0F0F0F' ELIMINATE ZONES.
         TR    WORK,=C'0123456789ABCDEF' TRANSLATE TO PRINTABLE HEX.
         BR    R14                 RETURN TO CALLER.
         TITLE 'DATA AREAS.'
SAVE     DS    9D                  SAVE AREA.
WORK     DS    D                   WORK DOUBLEWORD.
WORK1    DS    D                   WORK DOUBLEWORD.
PLPAEND  DC    A(0)                END OF PLPA + 1 (SAVED BY SRES).
LPASTART DC    A(0)                START OF PLPA.
         SPACE 1
FLAG     DC    X'00'               VARIOUS FLAG(S).
GFLG     EQU   FLAG,B'10000000'    USER AT DISPLAY TERMINAL.
AFLG     EQU   FLAG,B'01000000'    OK TO DO MODESET.
         SPACE 1
*CLEAR   DC    X'F31140403C40400013' CLEAR 3X7X TERMINAL.
CLEAR    DC    X'F5F313'           CLEAR 3X7X TERMINAL.
         SPACE 1
HEAD1    DC    C'AREA          '
HEAD1A   DC    C'START    '
HEAD1B   DC    C'END      '
HEAD1C   DC    C'LENGTH (K)  '
HEAD1D   DC    C'%FULL'
LEN      EQU   *-HEAD1
HEAD2    DC    CL(LEN)' '
         ORG   HEAD2
HEAD2A   DC    C'------------'
         ORG   HEAD2+(HEAD1A-HEAD1)
HEAD2B   DC    C'------'
         ORG   HEAD2+(HEAD1B-HEAD1)
HEAD2C   DC    C'------'
         ORG   HEAD2+(HEAD1C-HEAD1)
HEAD2D   DC    C'----------'
         ORG   HEAD2+(HEAD1D-HEAD1)
HEAD2E   DC    C'-------'
         ORG
DETAIL   DC    CL(LEN)' '
         ORG   DETAIL
AREA     EQU   *,12
         ORG   DETAIL+(HEAD1A-HEAD1)
START    EQU   *,8
         ORG   DETAIL+(HEAD1B-HEAD1)
END      EQU   *,8
         ORG   DETAIL+(HEAD1C-HEAD1)
LENGTH   EQU   *,10
         ORG   DETAIL+(HEAD1D-HEAD1)
FULL     EQU   *,2
         ORG
         SPACE 1
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A TABLE OF STORAGE AREAS TO MAP.  THE FIRST     *
*        12 BYTES OF EACH ENTRY IS THE AREA TITLE, THE NEXT WORD      *
*        IS THE AREA START ADDRESS, THE NEXT WORD IS THE LENGTH,      *
*        THE NEXT WORD IS THE END ADDRESS, THE NEXT WORD IS THE       *
*        NUMBER OF BYTES USED OR 0 AND THE LAST WORD IS THE DATA      *
*        RESOLUTION ROUTINE ADDRESS.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
TABLE    DS    0A                  START OF TABLE OF AREAS.
         DC    CL12'SQA',A(0),A(0),A(0),A(0),A(SRES)
         DC    CL12'PLPA',A(0),A(0),A(0),A(0),A(PLPARES)
*        DC    CL12'FLPA',A(CVTFLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'MLPA/BLDL',A(0),A(0),A(0),A(0),A(MLPARES)
         DC    CL12'SYSGEN PSA',A(0),A(4096),A(0),A(0),A(SPSARES)
         DC    CL12'CSA',A(0),A(0),A(0),A(0),A(CRES)
         DC    CL12'V=R (IF ANY)',A(0),A(0),A(0),A(0),A(VRRES)
         DC    CL12'PRIVATE',A(4096),A(0),A(0),A(0),A(PRES)
         DC    CL12'NUCLEUS',A(4096),A(0),A(0),A(0),A(NUCRES)
         DC    CL12'PSA',A(0),A(4096),A(4095),A(0),A(NOPRES)
         DC    X'00'               END OF TABLE.
         TITLE 'MAPSP - DSECTS.'
         CVT   DSECT=YES
         IHAGDA
         IHAPQE
         IHASPQE
         IHADQE
         IHAFBQE
         SPACE 1
*        IHAFQE                    MAPPING MACRO NOT ON SYSTEM.
FQESECT  DSECT                     FREE QUEUE ELEMENT.
FQETYPE  DS    AL1                 FLAG BYTE.
FQERGNFL EQU   B'10000000'         REGION FLAG.
FQECPB   EQU   B'01000000'         FREE AREA CROSSES PAGE BOUNDARY.
         ORG   FQETYPE
FQEPTR   DS    A                   PTR TO NEXT LOWER FQE.
FQELNTH  DS    A                   NUMBER OF BYTES IN FREE SPACE.
FQAREA   DS    A                   HIGH ADDRESS OF FREE SPACE.
FQERSVD  DS    A                   YOU KNOW WHAT.
         SPACE 1
TABLED   DSECT                     TABLE ENTRY MAPPING DSECT.
TABTITLE DS    CL12                TABLE ENTRY TITLE.
TABSTART DS    A                   START ADDRESS OF ENTRY'S AREA.
TABLEN   DS    A                   LENGTH OF ENTRY'S AREA.
TABEND   DS    A                   END ADDRESS OF ENTRY'S AREA.
TABFULL  DS    A                   NUMBER OF BYTES USED.
TABRES   DS    A                   ADDRESS OF RESOLUTION ROUTINE.
TLEN     EQU   *-TABLED            LENGTH OF TABLE ENTRY.
         END   MAPSP
