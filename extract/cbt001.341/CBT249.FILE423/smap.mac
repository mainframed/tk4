SMAP     TITLE 'SMAP - TSO COMMAND TO PRODUCE STORAGE MAP.'
*%A PPLINK NOTEST
***********************************************************************
*                                                                     *
*  COPYRIGHT (C) 1984 BY BROIDO COMPUTER CONSULTING.  ALL RIGHTS      *
*  RESERVED EXCEPT:                                                   *
*                                                                     *
*  PARTICULAR LICENSE IS GRANTED TO DISTRIBUTE THIS PROGRAM FREE      *
*  OF CHARGE, BUT IT MUST NOT BE SOLD.  A SERVICE CHARGE FOR          *
*  HANDLING A COLLECTION OF SOFTWARE OF WHICH THIS IS A PART,         *
*  ON THE OTHER HAND, IS APPROPRIATE.                                 *
*                                                                     *
*                                  BROIDO COMPUTER CONSULTING         *
*                                  104 MILLS STREET                   *
*                                  MORRISTOWN, N.J.  07960            *
*                                                                     *
***********************************************************************
         SPACE 1
SMAP     CSECT
         REGS
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING SMAP,R12
         LR    R14,R13
         LA    R13,SAVE
         ST    R13,8(,R14)
         ST    R14,SAVE+4
         SPACE 1
         L     R3,16               POINT TO CVT.
         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS.
         L     R3,12(,R3)          POINT TO ASCB.
         L     R4,X'30'(,R3)       POINT TO LDA.
         L     R1,X'5C0'(,R4)      LOAD TO TOP OF REGION.
         BAL   R14,OUTHEX          HEXIFY TOP.
         MVC   HEADTOP,WORK+2      MOVE TOP ADDR.
         L     R1,X'5CC'(,R4)      LOAD TO LIMIT.
         BAL   R14,OUTHEX          HEXIFY LIMIT.
         MVC   HEADLIM,WORK+2      MOVE LIMIT.
         SRL   R1,10               DIVIDE BY 1024.
         CVD   R1,WORK             DECIMALIZE LIMIT.
         UNPK  HEADLIMK,WORK+5(3)  UNPACK LIMIT.
         OI    HEADLIMK+4,C'0'     FIX SIGN.
         L     R4,8(,R4)           POINT TO REGION PQE.
         L     R1,X'18'(,R4)       LOAD BOTTOM OF REGION.
         BAL   R14,OUTHEX          HEXIFY BOTTOM.
         MVC   HEADBOT,WORK+2      MOVE BOTTOM.
         L     R1,X'14'(,R4)       LOAD REGION SIZE.
         BAL   R14,OUTHEX          HEXIFY REGION.
         MVC   HEADREG,WORK+2      MOVE REGION.
         SRL   R1,10               DIVIDE REGION BY 1024.
         CVD   R1,WORK             DECIMALIZE REGION.
         UNPK  HEADREGK,WORK+5(3)  UNPACK REGION.
         OI    HEADREGK+4,C'0'     FIX SIGN.
         TPUT  HEAD,HEADL          OUTPUT HEADER.
         L     R5,0(,R4)           POINT TO FIRST FBQE.
FBQELOOP CR    R4,R5               FBQE POINTER POINT BACK TO PQE?
         BE    TCB0                B IF YES.  END OF CHAIN.
         L     R1,12(,R5)          LOAD ADDRESS OF FREE BLOCK.
         BAL   R14,OUTHEX          HEXIFY.
         MVC   OUT2ADDR,WORK+2     MOVE ADDRESS OF FREE BLOCK.
         L     R1,8(,R5)           LOAD SIZE OF FREE BLOCK.
         BAL   R14,OUTHEX          HEXIFY.
         MVC   OUT2LEN,WORK+2      MOVE SIZE.
         SRL   R1,10               DIVIDE SIZE OF FREE BLOCK BY 1K.
         CVD   R1,WORK             DECIMALIZE.
         UNPK  OUT2K,WORK+5(3)     UNPACK.
         OI    OUT2K+4,C'0'        FIX SIGN.
         TPUT  OUT2,OUT2L          OUTPUT FREE BLOCK LINE.
         L     R5,0(,R5)           POINT TO NEXT FBQE
         B     FBQELOOP            LOOP.
TCB0     L     R3,X'6C'(,R3)       POINT TO ASXB.
         L     R3,4(,R3)           POINT TO FIRST TCB.
TCBLOOP  LTR   R3,R3               END OF TCB CHAIN?
         BNZ   TCB1                B IF NOT.
         L     R13,SAVE+4
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14                 BYE.
TCB1     LR    R1,R3               HEXIFY ...
         BAL   R14,OUTHEX          ... TCB ADDRESS.
         MVC   OUT4ADDR,WORK+2     MOVE TCB ADDRESS.
         L     R1,0(,R3)           POINT TO RB.
         L     R1,12(,R1)          POINT TO CDE.
         MVC   OUT4NAME,8(R1)      MOVE PROGRAM NAME FROM CDE.
*        MVC   OUT4NAME,X'60'(R1)  MOVE NAME FROM RB (XA).
         TPUT  OUT4,OUT4L          OUTPUT TCB LINE.
SPQE0    L     R4,X'18'(,R3)       POINT TO FIRST SPQE.
SPQELOOP LTR   R4,R4               END OF SPQE CHAIN?
         BNZ   SPQE1               B IF NOT.
         L     R3,X'74'(,R3)       POINT TO NEXT TCB.
         B     TCBLOOP             LOOP.
SPQE1    SR    R1,R1               CLEAR INSERT REG.
         IC    R1,X'A'(,R4)        LOAD SUBPOOL.
         CVD   R1,WORK             DECIMALIZE SUBPOOL.
         UNPK  OUT0SP,WORK+6(2)    UNPACK SUBPOOL.
         OI    OUT0SP+2,C'0'       FIX SIGN.
         IC    R1,X'B'(,R4)        LOAD KEY.
         BAL   R14,OUTHEX          HEXIFY KEY.
         MVC   OUT0KEY,WORK+6      MOVE KEY.
         TPUT  OUT0,OUT0L          OUTPUT MAJOR LINE.
         L     R5,4(,R4)           POINT TO FIRST DQE FOR THIS SP.
DQELOOP  LTR   R5,R5               END OF DQE CHAIN?
         BNZ   DQE1                B IF NOT.
         L     R4,0(,R4)           POINT TO SPQE FOR NEXT SUBPOOL.
         B     SPQELOOP            LOOP.
DQE1     L     R1,12(,R5)          LOAD LENGTH OF BLOCK IN SUBPOOL.
         LTR   R1,R1               0 LENGTH?
         BZ    DQEBUMP             B IF YES.  NULL ENTRY.
         BAL   R14,OUTHEX          HEXIFY LENGTH.
         MVC   OUT1LEN,WORK+2      MOVE LENGTH TO OUTPUT LINE.
         SRL   R1,10               DIVIDE BY 1024 (2**10).
         CVD   R1,WORK             DECIMALIZE LENGTH/1024.
         UNPK  OUT1K,WORK+5(3)     UNPACK LENGTH.
         OI    OUT1K+4,C'0'        FIX SIGN.
         L     R1,8(,R5)           LOAD ADDRESS OF STORAGE BLOCK.
         BAL   R14,OUTHEX          HEXIFY ADDRESS.
         MVC   OUT1ADDR,WORK+2     MOVE ADDRESS TO OUTPUT LINE.
         TPUT  OUT1,OUT1L          OUTPUT LINE.
FQE0     L     R6,0(,R5)           POINT TO FIRST FQE.
FQELOOP  LA    R6,0(,R6)           CLEAR HIGH BYTE.
         LTR   R6,R6               ANY MORE FREE AREAS IN BLOCK?
         BNZ   FQE1                B IF YES.
DQEBUMP  L     R5,4(,R5)           POINT TO NEXT DQE.
         B     DQELOOP             LOOP.
FQE1     L     R1,8(,R6)           LOAD HIGH ADDRESS PLUS 1.
         BCTR  R1,*-*              MAKE IT REAL HIGH ADDRESS.
         BAL   R14,OUTHEX          HEXIFY HIGH ADDRESS.
         MVC   OUT3TOP,WORK+2      MOVE TO OUTPUT AREA.
         S     R1,4(,R6)           SUBTRACT LENGTH FROM HIGH ADDR.
         LA    R1,1(,R1)           ADD ONE TO GEN. LOW ADDRESS.
         BAL   R14,OUTHEX          HEXIFY LOW ADDRESS.
         MVC   OUT3BOT,WORK+2      MOVE TO OUTPUT AREA.
         L     R1,4(,R6)           LOAD LENGTH.
         BAL   R14,OUTHEX          HEXIFY LENGTH.
         MVC   OUT3LEN,WORK+2      MOVE TO OUTPUT AREA.
         SRL   R1,10               DIVIDE BY 1024.
         CVD   R1,WORK             DECIMALIZE LENGTH/1024.
         UNPK  OUT3K,WORK+5(3)     UNPACK TO OUTPUT AREA.
         OI    OUT3K+4,C'0'        FIX SIGN.
         TPUT  OUT3,OUT3L          OUTPUT FREE RECORD.
         L     R6,0(,R6)           POINT TO NEXT FQE.
         B     FQELOOP             LOOP.
         SPACE 2
         TITLE 'SMAP - HEX OUTPUT ROUTINE.'
OUTHEX   ST    R1,WORK
         MVO   WORK1,WORK(4)       MOVE OVER TO ALLOW FOR SIGN.
         UNPK  WORK,WORK1+3(5)     SEPARATE NIBBLES.
         NC    WORK,=8X'0F'        KILL ZONES.
         TR    WORK,=C'0123456789ABCDEF' TRANSLATE TO HEX GRAPHICS.
         BR    14                  RETURN
         TITLE 'SMAP - DATA AREAS.'
SAVE     DS    9D
WORK     DS    D
WORK1    DS    D
HEAD     DC    C'PRIVATE('
HEADREG  DC    C'XXXXXX',C','
HEADREGK DC    C'#####',C'K) LIMIT('
HEADLIM  DC    C'XXXXXX',C','
HEADLIMK DC    C'#####',C'K) BNDS('
HEADBOT  DC    C'XXXXXX',C'-'
HEADTOP  DC    C'XXXXXX',C')'
HEADL    EQU   *-HEAD
OUT0     DC    C'  SP('
OUT0SP   DC    C'###',C') KEY('
OUT0KEY  DC    C'X',C')'
OUT0L    EQU   *-OUT0
OUT1     DC    C'     BLOCK ADDR('
OUT1ADDR DC    C'XXXXXX',C') LEN('
OUT1LEN  DC    C'XXXXXX',C','
OUT1K    DC    C'#####',C'K)'
OUT1L    EQU   *-OUT1
OUT2     DC    C'FREE BLOCK ADDR('
OUT2ADDR DC    C'XXXXXX',C') LEN('
OUT2LEN  DC    C'XXXXXX',C','
OUT2K    DC    C'#####',C'K)'
OUT2L    EQU   *-OUT2
OUT3     DC    C'           FREE ADDR('
OUT3BOT  DC    C'XXXXXX',C'-'
OUT3TOP  DC    C'XXXXXX',C') LEN('
OUT3LEN  DC    C'XXXXXX',C','
OUT3K    DC    C'#####',C'K)'
OUT3L    EQU   *-OUT3
OUT4     DC    C'TCB('
OUT4ADDR DC    C'XXXXXX',C') RBNAME('
OUT4NAME DC    C'CCCCCCCC',C')'
OUT4L    EQU   *-OUT4
         END
