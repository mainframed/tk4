         MACRO
         TBINSRCH
TBINSRCH DS        0H
**********************************************************************
*
*        BINARY SEARCH ROUTINE - W/ ELEMENT INSERTION CAPABILITY
*        THE ROUTINE OPERATES IN TWO MODES, DEPENDING ON
*        THE 'READ' FLAG SET IN THE TABLE TO BE READ:
*              . READ-ONLY - IN THIS MODE NO ELEMENT INSERTION
*              IS POSSIBLE.  THE MODE MAY BE USED FOR TABLE
*              LOOKUP ONLY.
*              . UPDATE - IN THIS MODE, IF A SEARCH ARGUMENT
*              CAN FIND NO HIT IN THE TABLE, THE SEARCH
*              ARGUMENT IS USED TO BUILD A NEW ENTRY IN THE
*              TABLE. THE AREA TO THE RIGHT OF THE ARGUMENT,
*              UP TO THE LENGTH OF THE ELEMENT, IS SET TO
*              BINARY ZEROS.
*
*        CALLING SEQUENCE:
*              R7 MUST CONTAIN THE ADDR OF THE TABLE TO BE SEARCHED/
*              MANIPULATED.  R15 MUST CONTAIN THE ADDR OF THE SEARCH
*              ARGUMENT.  UPON EXIT, R2 CONTAINS A POINTER TO THE
*              FOUND ENTRY/NEW ENTRY. RTN IS ENTERED 'BAL R8,TBINSRCH'
*
*        CAUTIONS:
*              THIS ROUTINE IS ASSUMED TO USE R15 & R0-R8.
*
*        RETURN CODES:
*              RETURN CODES ARE IMPLEMENTED AS BRANCH BACK ADDRESSES
*              OFFSET FROM R8.
*        RETURN CODE   BRANCH BACK ADDR    MEANING
*          0             R8+0         EXISTING ELEMENT FOUND
*          4             R8+4         NEW ELEMENT BUILT (UPDATE MODE)
*                                     (DOES NOT OCCUR FOR READ-ONLY)
*          8             R8+8         TABLE OVERFLOW (UPDATE MODE)
*                                     ELEM NOT FOUND (READ-ONLY MODE)
*         12             R8+12        LOGIC ERROR
*
**********************************************************************
         USING     TABLE,R7       MAKE TABLE ADDRESSABLE
         TM        TABFLAGS,TABINARY CAN THIS RTN USE THIS TABLE?
         BNO       12(,R8)        BIF NOT - LOGIC ERROR RC=12
         LM        R0,R5,TABMAX   LOAD PARAMETERS
         LR        R6,R3          R6 IS START LOC FOR BIN SEARCH
         MR        R0,R5          R1 IS NOW CURR. MAX. OFFSET
         MR        R2,R5          R3 IS NOW SEARCH BEGIN OFFSET
         LR        R5,R3          R5 IS NOW SEARCH BEGIN OFFSET
TBINFDLP EQU       *
         LA        R2,TABENTRY(R3) ADDR OF CURR COMPARAND
         CR        R1,R3          ARE WE POINTING BEYOND TABLE?
         BL        TBINLOW        BIF WE ARE - GO LOWER IN TABLE
         EX        R4,TBINCLC     COMPARATOR:COMPARAND
         BER       R8             BIF EQUAL
         BH        TBINHI         BIF WE MUST GO HIGHER IN TABLE
TBINLOW  EQU       *              MUST GO LOWER IN TABLE
         SRA       R6,1           R6 IS DIVIDED BY 2 UNTIL ZERO
         BZ        TBINNEW2       CREATE NEW ENTRY
         SRL       R5,1           CUT FLIP-FLOP INCR IN HALF
         SR        R3,R5          REDUCE OFFSET BY THIS INCR
         B         TBINFDLP       BR TO FINDER LOOP
TBINHI   EQU       *
         SRA       R6,1           DIVIDE BY 2 UNTIL ZERO
         BZ        TBINNEW1       CREATE NEW ENTRY @ TABLE BOTTOM
         SRL       R5,1           CUT FLIP-FLOP INCR IN HALF
         AR        R3,R5          INCREASE OFFSET BY INCREMENT
         B         TBINFDLP       BR TO FINDER LOOP
TBINCLC  CLC       0(0,R15),0(R2) PATTERN CLC INSTR
         SPACE     1
TBINNEW1 EQU       *
         A         R3,TABELEML    SKIP TO AREA BEYOND LAST ELEM.
TBINNEW2 EQU       *
         LM        R5,R6,TABMAX   MAX & CURR # OF ELEMENTS
         CR        R5,R6          IS TABLE ALREADY FULL?
         BH        TBINADD1       BIF NOT; STILL HAVE ROOM
         LA        R2,TABENTRY    OTHERWISE, POINT @ OVERFLOW
         TM        TABFLAGS,TABREAD READ-ONLY TABLE?
         BO        8(,R8)         BIF YES; ELEMENT NOT FOUND RC=8
         L         R1,TABOVFL     OTHERWISE, INCR OVERFLOW CNT
         LA        R1,1(,R1)
         ST        R1,TABOVFL
         B         8(,R8)         TABLE OVERFLOW - RC=8
TBINADD1 EQU       *
         LA        R6,TABENTRY(R3)  COMPUTE NEW ELEMENT ADDRESS
         L         R4,TABELEML    ELEMENT LENGTH
         CR        R3,R1          DOES TABLE NEED TO BE SHIFTED?
         BH        TBINADD3       BIF NOT; NEW ELEM GOES @ END
         LA        R2,TABENTRY(R1)  GET ADDR OF CURR LAST ELEM
         LR        R0,R2
         AR        R2,R4          POINT R2 ONE BEYOND LAST ENTRY
         LR        R1,R4          R1 NOW HAS LENGTH OF ELEM ALSO
         LR        R3,R4
         LR        R5,R4
         SLL       R5,1           R5 NOW HAS ELEM LENGTH*2
TBINADD2 EQU       *
         MVCL      R2,R0          SHIFT BOTTOM ENTRY ONE LOWER
         BNE       12(,8)         OPERAND COUNTS MUST BE EQUAL
         LR        R1,R4          RESTORE INCREMENTS AS BEFORE MVCL
         LR        R3,R4
         SR        R0,R5          SET UP 'TO' & 'FROM' ADDRS
         SR        R2,R5          FOR NEXT SHIFT
         CR        R2,R6          HAVE WE FINSIHED SHIFTING?
         BH        TBINADD2       BIF NOT
TBINADD3 EQU       *
         LR        R2,R6          GET ADDR OF NEW ELEMENT
         LR        R3,R4          GET ELEMENT LENGTH
         LR        R0,R15         COMPARATOR ADDRESS
         L         R1,TABLC       LENGTH CODE OF COMPARATOR
         LA        R1,1(,R1)      LENGTH CODE -> LENGTH
         MVCL      R2,R0          MOVE IN ENTRY & ZERO PAST COMPARATOR
         LR        R2,R6          SET POINTER TO NEW ELEMENT
         L         R3,TABCURR     GET CURR # OF ELEMENTS
         LA        R3,1(,R3)      INCR # OF ELEMENTS
         ST        R3,TABCURR
         LA        R4,1
TBINADD4 EQU       *
         SRA       R3,1           CALCULATE NEW SEARCH BEGIN
         BZ        TBINADD5
         SLL       R4,1
         B         TBINADD4
TBINADD5 EQU       *
         ST        R4,TABSRCST    NEW STARTING POINT
         B         4(,R8)         NEW ELEM INSERTED - RC=4
         DROP      R7
         MEND
