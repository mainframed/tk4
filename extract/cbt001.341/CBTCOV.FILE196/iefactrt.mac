         TITLE     'IEFACTRT - WORK AREA USED BY ALL EXITS'
         EXITCORE
LINE     DS    CL116
WORK01   DS    D
WORK02   DS    D
REGSAVE  DS        8F             SAVE AREA FOR UCB LINE BUILD RTN
PARMPTRS DS        A              PTR TO PARM LIST PASSED TO IEFACTRT
ENTRYCDE DS        A              ENTRY CODE PASSED TO IEFACTRT
CEPAADDR DS        A              ADDR OF COMM EXIT PARM AREA
ERRORSW  DS        XL1            ERROR INDICATOR USED BY SUBROUTINES
ERRJT4   EQU   X'01'       ERROR IN SMF TYPE 4 PROCESSOR
ERRJT5   EQU   X'02'       ERROR IN SMF TYPE 5 PROCESSOR
ERRDDNRT EQU   X'04'       ERROR IN DDNAME DISPLAY ROUTINE
ERREQUE  EQU   X'08'       ERROR IN REQUEUER INTERFACE PROCESSOR
ERRTT34  EQU   X'10'       ERROR IN TSO SESSION SMF TYPE 34 PROC.
ERRTT35  EQU   X'20'       ERROR IN TSO SESSION SMF TYPE 35 PROC
ERRTT30  EQU   X'40'       ERROR IN TSO SESSION SMF TYPE 30 PROC
ERRTT32  EQU   X'80'       ERROR IN TSO SESSION SMF TYPE 32 PROC.
LIOUCBED DS    A             ADDR OF END OF UCB PORTION OF SMF RECORD
LIODEPTH DS    F             # OF COLUMNS NCSSARY FOR UCB LIST
LIOJUMP  DS    F             JUMP-AHEAD VALUE FOR UCB LIST WHEN GEN. CO
TRTEND   DS    0H
ENQAREA  EQU   *
ENQMACRO ENQ      (),ECB=0,MF=L
ENQQNAME DS       CL8             ENQ QNAME
ENQRNAME DS       CL12
ENQECB   DS       A               ENQ ECB
ENQHTQE  DS       A               ADDR OF TQE(ET AL) & DIE RTN
ECBLIST0 DS       0F              ECB LIST FOR WAIT MULTIPLE
ECBLIST1 DS       A               ADDR OF 1ST ECB
ECBLIST2 DS       A               ADDR OF 2ND ECB
ENQAREAL EQU      *-ENQAREA
         AIF   ('&SYSPARM' NE 'SP12' AND '&SYSPARM' NE 'SP13').PRESP3B
RIBADDR  DS       A               ADDR OF GQSCAN WORK AREA
ENQGQSCN GQSCAN   AREA=(),                                             *
               SCOPE=LOCAL,                                            *
               RESNAME=(),                                             *
               MF=L
.PRESP3B ANOP
POSTMAC  POST     0,ASCB=0,ERRET=0,MF=L
IOFLAGS  DS       XL1         FLAGS USED BY SMF IO DISPLAY
IOFVSMHD EQU   X'01'          VSAM DATA HEADERS ARE GENERATED
IOFNVSHD EQU   X'02'          NON-VSAM DATA HEADERS ARE GENERATED
IOFVSMPR EQU   X'04'          VSAM INFO PRESENT
CORELGTH EQU       (((*-EXITCORE+7)/8)*8)
WORKEND  EQU      *
         ECFOLLOW
         TITLE        'IEFACTRT - BINARY SEARCH TABLE CONTROL AREA'
         TABLE
         TITLE        'IEFACTRT - SMF IO STATS TABLE ELEMENT LAYOUT'
         SMFIOTAB
         TITLE     'IEFACTRT - LIST OF PARMS PASSED TO IEFACTRT'
         ACTRTMAP
         TITLE     'IEFACTRT - COMMON EXIT PARAMETER AREA'
         COMMEXIT
         TITLE     'IEFACTRT - SMF RECORD LAYOUTS'
SMFREC   DSECT
         IFASMFR 4           SMF TYPE FOUR LAYOUT
         EJECT
         ORG   SMFREC
         IFASMFR 5           SMF TYPE FIVE RECORD
         ORG       SMFREC
         IFASMFR   34
         ORG       SMFREC
         IFASMFR   35
         AIF       ('&SYSPARM' EQ 'NONSE' OR '&SYSPARM' EQ 'SE2' OR    *
               '&SYSPARM' EQ 'SP10' OR '&SYSPARM' EQ 'SP11').PRESP3A
         AIF       ('&SYSPARM' EQ 'SP12' OR '&SYSPARM' EQ 'SP13').SP3A
         MNOTE     12,'IEFACTRT - INVALID SYSPARM FIELD IN ASSEMBLY'
         AGO       .RESUMEA
.SP3A    ANOP
         TITLE     'IEFACTRT - RESOURCE INFORMATION BLOCK(RIB)'
         ISGRIB
         AGO       .RESUMEA
.PRESP3A ANOP
         TITLE    'IEFACTRT - QUEUE CONTROL BLOCK (QCB)'
         IHAQCB
.RESUMEA ANOP
         TITLE    'IEFACTRT - COMMUNICATIONS VECTOR TABLE (CVT)'
         CVT       DSECT=YES
         TITLE   'IEFACTRT - REQUEUER CROSS-MEMORY COMMUNICATIONS AREA'
         CROSSMEM
         TITLE    'IEFACTRT - REQUEUER CSA ANCHOR POINTER'
         RNMANCHR
         TITLE    'IEFACTRT - SYSTEM MGMT CONTROL AREA(SMCA)'
         IEESMCA
         TITLE    'IEFACTRT - PREFIX STORAGE AREA(PSA)'
         IHAPSA
         TITLE 'IEFACTRT - ADDRESS SPACE CONTROL BLOCK(ASCB)'
         IHAASCB
         TITLE 'IEFACTRT - TIMER SUPERVISION WORK AREA(TCP)'
         IEAVVTPC
         TITLE 'IEFACTRT - DIE WORK AREA (INCL TIMER QUEUE ELEMENT)'
         DIEWORK
         TITLE 'IEFACTRT - MAIN ROUTINE'
IEFACTRT  CSECT
***********************************************************************
*
*        PROGRAM: IEFACTRT - SMF ACCOUNTING ROUTINE EXIT
*        INSTALLATION: U. S. SENATE
*        AUTHOR: D. HALBIG
*        DATE WRITTEN: JAN. 1979
*        FUNCTION: PRODUCE ON JCL LISTING OF BATCH JOBS
*        GENERAL AND PERFORMANCE-RELATED ITEMS USEFUL IN
*        DEBUGGING AND TUNING
*
*        MODIFIED EXTENSIVELY 12/09/79 BY DGH TO BETTER STRUCTURE
*              CODE (EASIER MAINTENANCE LATER) & TO CLEAR UP
*              CONFLICT BETWEEN THIS EXIT & TSO TERMINATION.
*         MODIFIED EXTENSIVELY FEB. 1980 BY DGH TO
*         SUPPORT DSNAME CONTENTION REQUEUE FACILITY
*
*         MODIFIED 10/3/80 BY DGH TO:
*            . CLEAN UP WARM-START GETMAIN/FREEMAIN LOGIC
*            . RESTRUCTURE CODE TO PERMIT MAINTAINABILITY
*            . ADD MVS/SE II SUPPORT
*
*         11/23/81(DGH) - INSTALLED BYPASS CODE; FEATURE PERMITS
*           ALL SMF EXITS TO BE BYPASSED IF BYPASS FLAG IS SET.
*           BYPASS FLAG IS SET BY SMF EXIT IEFUJV (SEE IEFUJV
*           FOR FURTHER DETAILS).
*
*         03/30/81(DGH) - CHANGED TSO SESSION TERMINATION TO PERMIT
*           BATCH JOBS CAUGHT BY REQUEUER TO BE AUTOMATICALLY RELEASED
*           WHEN OFFENDING TSO USER SIGNS OFF.
*
*         07/27/82(ABS) - CHANGED TO REPORT TCB & SRB TIMES IN TIME
*           UNITS OF THE SLOWEST MACHINE IN THE COMPLEX.  ECCPUSPD
*           IS PASSED FROM IEFUJI.
*
*         01/07/83(ABS) - CHANGED ELAPSED TIME COMPUTATION TO CORRECT
*           FAILURE WHEN CROSSING A YEAR BOUNDARY.  ALSO CHANGED SETDIE
*           DELAY FROM 30 SECONDS TO 2 MINUTES.  BECAUSE OF INCREASED
*           IEFUJI WAIT TIME BETWEEN $HJ____;$EJ____ AND COMPLETION
*           WITH RC=4, REQUEUER CAN BECOME UNAVAILABLE FOR A WHILE.
*           SEE ALSO IEFUJI.
*
*        REGISTER                 FUNCTION
*              R15                ENTRY ADDR/WORK REG/RETURN CODE
*              R14                RETURN ADDR/WORK REG
*              R13                SAVEAREA/WORKAREA
*              R12                BASE REGISTER (MAIN PROGRAM)
*              R11                BASE REGISTER (SUBROUTINES)
*              R10                RETURN ADDR FOR SUBROUTINES
*              R9                 ADDR OF SMF RECORD
*              R8                 RETURN ADDR REG FOR FUNCTIONS
*              R7-R0              WORK REGISTERS
***********************************************************************
         REGEQU
         SAVE      (14,12),,IEFACTRT-&SYSDATE-&SYSTIME
         LR        R12,R15        ESTAB. BASE REG.
         USING     IEFACTRT,R12   TELL ASSEMBLER
         LR        R8,R1          HOLD ONTO PARM PTRS
         LR        R7,R0          HOLD ONTO ENTRY CODE
         USING     ACTRTMAP,R8    BIVE PASSED PARMS ADDRESSABILITY
         L         R9,ACTSMFRA    GET SMF RECORD ADDRESS
         USING     SMFREC,R9      GIVE IT ADDRESSABILITY
         L         R6,ACTCEPA     GET COMM EXIT PARM AREA PTR
         USING     COMMEXIT,R6    GIVE IT ADDRESSABILITY
         SR        R15,R15        SET RC=0
         TM        CEPIDFLG,CEPIDF05 IS BYPASS FLAG SET?
         BO        MRFEXIT        BIF YES
         TM    CEPRSTOP,CEPRST04  WARM RESTART?
         BO        MRNDCORE       BIF YES; MUST DO OUR OWN GETMAIN
         L         R1,CEPUSER     GET PTR TO UJI-GETMAINED AREA
         LTR       R1,R1          IS AREA USEABLE?
         BNZ       MRCOREOK       BIF YES; CAN USE AREA FROM IEFUJI
MRNDCORE EQU       *
         LA        R0,ECSUBPOL    SUBPOOL #
         SLL       R0,24          PUT INTO LEFTMOST BYTE
         LA        R1,ECWRKSIZ    ACTRT-ONLY WORK AREA SIZE
         OR        R0,R1          MERGE TOGETHER
         GETMAIN   R,LV=(0)
         XC        CEPUSER,CEPUSER ENSURE UJI-GETMAINED AREA NOT USED
MRCOREOK EQU       *
         ST        R1,8(,R13)     COMPLETE THE CHAINING PROCESS
         ST        R13,4(,R1)
         LR        R13,R1
         USING     EXITCORE,R13   GIVE IT ADDRESSABILITY
         ST        R8,PARMPTRS    STOW ADDR OF ACTRT PARMS
         ST        R7,ENTRYCDE    STOW ENTRY CODE VALUE
         ST        R6,CEPAADDR    STOW ADDR OF COMM EXIT PARM AREA
         DROP      R8
         MVI       ERRORSW,X'00'  RESET ERROR INDICATORS
         S         R7,=A(12)      ADJUST FOR WTG TABLE USE
         TM        CEPIDFLG,CEPIDF02 BATCH JOB?
         BO        MRDECIDE       BIF YES: NO FURTHER ADJUSTMENT
         TM        CEPIDFLG,CEPIDF03 TSO SESSION?
         BO        MRISTSO        BIF YES
         LA        R7,32(,R7)     OFFSET WTG VALUES BY 32
         B         MRDECIDE       THIS IS FOR SYSTEM TASK
MRISTSO  EQU       *
         LA        R7,16(,R7)     OFFSET WTG VALUES BY 16 (TSO)
         DROP      R6
MRDECIDE EQU       *
         B         MRWTG(R7)      USE ENTRY CODE FOR WTG ARGUMENT
MRWTG    EQU       *
         B         MRJOBT4       =0;BATCH JOB SMF TYPE 4
         B         MRJOBT5       =4;BATCH JOB SMF TYPE 5
         B         MRJOBT30      =8;BATCH JOB SMF TYPE 30
         BAL       R14,MRSNAPIT =12; **** ERROR ****
         B         MRTSOT34     =16;TSO SESSION SMF TYPE 34
         B         MRTSOT35     =20;TSO SESSION SMF TYPE 35
         B         MRTSOT30     =24;TSO SESSION SMF TYPE 30
         B         MRTSOT32     =28;TSO SESSION SMF TYPE 32
         B         MRSTCT4      =32;SYSTEM TASK SMF TYPE 4
         B         MRSTCT5      =32;SYSTEM TASK SMF TYPE 5
         B         MRSTCT30     =36;SYSTEM TASK SMF TYPE 30
         BAL       R14,MRSNAPIT =40; **** ERROR ****
         SPACE     3
MRJOBT4  DS        0H
***********************************************************************
*        CALL INTERFACE TO BATCH JOB SMF TYPE 4 PROCESSOR
***********************************************************************
         LA        R15,0          SET RC=0 INITIALLY
         TM        SMF4STI,X'20' CANCELLED BY REQUEUER (IEFUJI)?
         BO        MREXIT        BIF YES; BYPASS STATS
         L         R11,=A(JT4RTN) ADDR OF ROUTINE
         BALR      R10,R11        BERFORM IT
         TM        ERRORSW,ERRJT4   ANY ERRORS?
         BO        MRSNAPIT       BIF YES
         L         R1,CEPAADDR  GET COMM EXIT PTR
         USING     COMMEXIT,R1
         L         R1,CEPUSER   GET PTR TO COMMON WORK AREA
         LTR       R1,R1        IS IT THERE?
         DROP      R1
         BZ        MRJOBT4X     BIF NOT: EXIT INSTEAD
         L         R11,=A(DDNAMRTN) GET ADDR OF DDNAME ROUTINE
         BALR      R10,R11      PERFORM IT
         TM        ERRORSW,ERRDDNRT  ERROR IN ROUTINE?
         BO       MRSNAPIT    BIF YES
MRJOBT4X EQU       *
         MVC       LINE+1(L'LINE-1),LINE PROPAGATE ASTERS
         BAL       R8,WRITEMSG
         SR        R15,R15        NORMAL RETURN CODE
         B         MREXIT
         SPACE     3
MRJOBT30 DS        0H
**************************************************************
*     CALL INTERFACE TO BATCH STEP SMF TYPE 30 PROCESSOR
**************************************************************
         LA       R15,0       SET RC=0 INITIALLY
         L        R11,=A(TT30RTN) GET ROUTINE ADDR
         BALR     R10,R11     PERFORM IT
         SR       R15,R15     SET RC=0
         B        MREXIT
         SPACE    3
MRJOBT5  DS        0H
***********************************************************************
*        CALL INTERFACE TO BATCH JOB SMF TYPE 5 PROCESSOR
*        (INTERFACE TO DSN CONTENTION REQUEUE IS HERE)
***********************************************************************
         TM        SMF5JBTI,X'20' CANCELLED BY REQUEUER (IEFUJI)
         BO        MREXIT        BIF YES; BYPASS STATS
         L         R11,=A(JT5RTN) GET ADDR OF BATCH JOBTERM RTN
         BALR      R10,R11        PERFORM IT
         TM        ERRORSW,ERRJT5   ANY ERRORS?
         BO        MRSNAPIT       BIF YES
         L        R11,=A(REQUERTN)      GET ADDR OF DSN CONT. REQUEUE
         BALR     R10,R11               PERFORM RTN
         LA        R15,0          SET RC=0 FINALLY
         TM       ERRORSW,ERREQUE       ERROR IN REQUEUE RTN?
         BO       MRSNAPIT              BIF YES; SNAP IT
         B         MREXIT
         SPACE     3
MRTSOT34 DS        0H
***********************************************************************
*        TSO SMF RECORD TYPE 34 PROCESS CALLER
***********************************************************************
         L         R11,=A(TT34RTN) GET ADDR OF TSO STEPTERM RTN
         BALR      R10,R11        PERFORM IT
         TM        ERRORSW,ERRTT34  ANY ERRORS?
         BO        MRSNAPIT       BIF YES
         SR        R15,R15        NORMAL RETURN
         B         MREXIT         'BYE
         SPACE     3
MRTSOT35 DS        0H
***********************************************************************
*        TSO SMF RECORD TYPE 35 PROCESS CALLER
***********************************************************************
         L         R11,=A(TT35RTN) LOAD ADDR OF TSO JOB TERM RTN
         BALR      R10,R11        PERFORM IT
         TM        ERRORSW,ERRTT35   ANY ERRORS?
         BO        MRSNAPIT
         L         R11,=A(REQUERTN) CHECK REQUEUER FOR THIS TSO SESSION
         BALR      R10,R11
         SR        R15,R15        NORMAL RETURN CODE
         TM        ERRORSW,ERREQUE ERROR IN REQUEUE ROUTINE?
         BO        MRSNAPIT
         B         MREXIT
         SPACE     3
MRTSOT30 DS        0H
***************************************************************
*        CALL INTERFACE TO TSO STEPTERM SMF TYPE 30 PROCESSOR
***************************************************************
         L         R11,=A(TT30RTN)  GET RTN ADDR
         BALR     R10,R11      PERFORM ROUTINE
         TM       ERRORSW,ERRTT30  ERROR IN ROUTINE?
         BO       MRSNAPIT
         SR       R15,R15      SET RC=0
         B        MREXIT
         SPACE    3
MRTSOT32  DS       0H
*****************************************************************
*        CALL INTERFACE TO TSO STEPTERM SMF TYPE 32 PROCESSOR
*****************************************************************
         L        R11,=A(TT32RTN) GET ADDR OF ROUTINE
         BALR     R10,R11       PERFORM IT
         TM       ERRORSW,ERRTT32   ERROR IN ROUTINE?
         BO       MRSNAPIT          BIF YES
         SR       R15,R15      SET RC=0
         B        MREXIT
         SPACE 3
MRSTCT4  DS       0H
****************************************************************
*        CALL INTERFACE TO SYSTEM TASK SMF TYPE 4 PROCESSOR
****************************************************************
         L        R11,=A(ST4RTN) GET ADDR OF ROUTINE
         BALR     R10,R11       PERFORM IT
         SR       R15,R15      SET RC=0
         B        MREXIT
         SPACE    3
MRSTCT5  DS      0H
****************************************************************
*        CALL INTERFACE TO SYSTEM TASK SMF TYPE 5 PROCESSOR
****************************************************************
         L       R11,=A(ST5RTN) GET ADDR OF ROUTINE
         BALR    R10,R11        PERFORM IT
         SR      R15,R15        SET RC=0
         B       MREXIT
         SPACE   3
MRSTCT30 DS      0H
**************************************************************
*        CALL INTERFACE TO SYSTEM TASK SMF TYPE 30 PROCESSOR
**************************************************************
         L       R11,=A(ST30RTN) GET ADDR OF ROUTINE
         BALR    R10,R11          PERFORM IT
         SR      R15,R15          SET RC=0
         B       MREXIT
         SPACE   3
MRSNAPIT DS        0H
***********************************************************************
*        DIAGNOSTIC ROUTINE
***********************************************************************
         DC        X'0000'        FORCE 'S0C1' ABEND
         B         MREXIT
         SPACE     3
MREXIT   DS        0H
***********************************************************************
*        MAIN EXIT ROUTINE
***********************************************************************
         L         R7,CEPAADDR    GET ADDR OF COMM EXIT PARM AREA
         USING     COMMEXIT,R7    GIVE IT ADDRESSABILITY
         L         R2,SAVEAREA+4  GET CALLER'S S/A PTR
         LR        R3,R15         HOLD ONTO RETURN CODE VALUE
         L         R0,GETPARM     GET LENGTH OF UJI-GETMAINED AREA
         L         R1,CEPUSER     GET ADDR OF UJI-GETMAINED AREA
         LTR       R1,R1          IS THERE A UJI-GETMAINED AREA?
         BNZ       MRTRMTST       BIF YES; TEST FOR JOBTERM
         LR        R1,R13         GET ADDR OF ACTRT-GETMAINED AREA
         LA        R0,ECWRKSIZ    GET LENGTH OF ACTRT-GETMAINED AREA
         FREEMAIN  R,LV=(0),A=(1) LOCAL FREEMAIN
         B         MRRETURN
MRTRMTST EQU       *
         L         R4,ENTRYCDE    IS THIS STEP OR JOB TERM?
         C         R4,=A(16)      JOBTERM?
         BNE       MRRETURN       BIF STEPTERM (DON'T DO FREEMAIN)
         FREEMAIN  R,LV=(0),A=(1)
         XC        CEPUSER,CEPUSER ENSURE AREA NEVER RE-USED
         DROP      R7
MRRETURN EQU       *
         LR        R13,R2         R13 NOW HAS CALLER'S S/A PTR
         LR        R15,R3         R15 NOW HAS RETURN CODE
MRFEXIT  EQU       *
         RETURN    (14,12),RC=(15)
         TITLE     'IEFACTRT - FUNC TO ESTAB. DISABLED INTERR. EXIT'
         SETDIE
         TITLE     'IEFACTRT - FUNC TO CLEAN UP AFTER ''SETDIE'''
         PURGEDIE
         TITLE     'IEFACTRT - IEFYS WRITER INTERFACE'
WRITEMSG DS        0H
***********************************************************************
*
*        THIS MODULE WRITES A MESSAGE TO THE SYSTEM OUTPUT MESSAGE
*        DATA SET.  THE MODULE MAY BE USED ONLY FOR BATCH JOBS.
*        THIS ROUTINE STES UP ALL LINE LENGTHS TO 116 BYTES
*
***********************************************************************
         L         R7,CEPAADDR    GET ADDR OF COMM EXIT PARM AREA
         USING     COMMEXIT,R7    GIVE IT ADDRESSABILITY
         TM        CEPSMFOP,CEPSMF07 TSO?
         BO        PUTEXIT        BIF YES - DON'T WRITE MESSAGE
         DROP      R7             DON'T NEED REG ANY MORE
         L         R7,SAVEAREA+4  EXTRACT VALUE IN R12 @ ENTRY TO ACTRT
         L         R7,68(,R7)     R7 NOW HAS VALUE OF ORIG R12
         LA        R6,LINE        SET UP PARMS FOR IEFYS
         ST        R6,36(,R7)
         LA        R6,116         ALL LINES WILL BE 116 BBYTES LONG
         STH       R6,42(,R7)
         LR        R5,R12         REMEMBER R12 IS OUR BASE REG!!!
         L         R15,=V(IEFYS)  BRANCH TO IEFYS
         LR        R12,R7         PUT IN VALUE IEFYS WANTS
         BALR      R14,R15
         LR        R12,R5         RESTORE R12 IMMEDIATELY!!!
PUTEXIT  EQU       *
         BR        R8
         TITLE     'IEFACTRT - TIME CONVERSION FUNCTIONS'
CONVTIME DS        0H
***********************************************************************
*
*        CONVERT TIME IN 100THS OF SECONDS TO TIME IN
*        HHMMSSHS PACKED DECIMAL FORMAT.  INPUT IS IN R3,
*        OUTPUT IS IN VARIABLE 'WORK02'.
*
***********************************************************************
         LA        R2,0           CLEAR R2
         LA        R4,100         100 IS THE DIVISOR VALUE
         DR        R2,R4
         LR        R1,R2          STORE 100THS OF SECS
         LA        R2,0           CLEAR R2
         LA        R4,60          DIVISOR VALUE IS 60
         DR        R2,R4
         MH        R2,=H'100'     SHIFT SECS BY TWO DEC. POS.
         AR        R1,R2          STOW RESULT IN R1
         LA        R2,0           ZERO OUT R2
         DR        R2,R4          DIVIDE BY 60 (AGAIN)
         MH        R2,=H'10000'   SHIFT MINUTES OVER
         AR        R1,R2          ADD MINUTES TO RESULT AREA
         M         R2,=F'1000000' SHIFT HOURS OVER
         AR        R1,R3          ADD HOURS TO RESULT AREA
         CVD       R1,WORK02
         SRP       WORK02,1,0     MAKE VALUE EASY FOR 'ED' INSTR.
         BR        R8             RETURN TO CALLER
         EJECT
CONVCPUT DS    0H                                             ABS072782
***********************************************************************
*                                                                     *
*        CONVERT TIMES, BOTH TCB & SRB, TO THE EQUIVALENT TIMES OF    *
*        THE SLOWEST MACHINE IN THE COMPLEX.  THE COEFICIENT PASSED   *
*        FROM IEFUJI IS THE SPEED DIFFERENTIAL MULTIPLIER TIMES 100.  *
*        THE PURPOSE OF SUPPLYING THESE TIMES IS BECAUSE JCL TIME=    *
*        FOR S322 S ON TEST JOBS IS BEING ADJUSTED IN IEFUJI AND      *
*        PROGRAMMERS NEED TO BE ABLE TO SUPPLY MEANINGFUL TIMES.      *
*                                                                     *
*        INPUT AND OUTPUT ARE BOTH IN R3                              *
*                                                                     *
***********************************************************************
         L     R2,PARMPTRS   R2 ---> A(PARM LIST FROM ENTRY)  ABS072782
         USING ACTRTMAP,R2                                            "
         L     R2,ACTCEPA    R2 ---> A(COMMON EXIT PARAMETER AREA)    "
         USING COMMEXIT,R2                                            "
         L     R2,CEPUSER    R2 ---> A(AREA GETMAINED BY UJI)         "
         DROP  R2                                                     "
         LA    R2,0(R2)      BE SURE BITS 0 -> 7 ARE ZIP              "
         LTR   R2,R2         WAS GETMAIN DONE BY UJI ??               "
         BZR   R8            IF NOT, DO NOTHING___                    "
*                            ___ECCPUSPD WAS NOT PASSED BY UJI        "
*                            FALL THRU IF AREA___                     "
*                            ___AND SPEED COEF. WERE PASSED           "
*                                                                     "
         XR    R2,R2         R2 ==== ZERO                             "
         M     R2,ECCPUSPD   MULT. R2 & R3 BY SPEED COEFICIENT        "
         D     R2,DEC100     DIV.  R2 & R3 BY 100                     "
         BR    R8            HOME-FREE-RINGOLEVIO             ABS072782
         SPACE 1
DEC100   DC    1F'100'                                        ABS072782
         TITLE 'IEFACTRT - UCB ADDR/DEVICE TYPE/I-O COUNT DISPLAY RTN'
LIOBLDLN DS        0H
***********************************************************************
*        R5 = # OF COLUMNS LEFT TO DO @ ENTRY
*        R4 = ADDR OF UCB RECORD PORTION TO BE PROCESSED NOW
*        LIOUCBED = ENDING ADDR OF TABLE OF UCB INFO
*        R8 = RETURN ADDRESS
***********************************************************************
         LA        R3,LINE+2      BASE PTR FOR OUTPUT
         LA        R2,5           5 UNITS ARE TO BE BUILT
*
LIOCALL2 EQU       *
         C         R4,LIOUCBED   HAVE WE RUN OUT OF UCB'S?
         BNL       LIOLNEEX      BIF YES
         BAL       R7,LIOBLDSU    BUILD A SUBUNIT OF A LINE
         A         R4,LIOJUMP    JUMP TO UCB FOR  NEXT COLUMN
         LA        R3,23(R3)     POSITION TO NEXT COLUMN ON OUTPUT
         BCT       R2,LIOCALL2   CONTINUE UNTILL FINISHED
LIOLNEEX EQU       *
         BR        R8             GO BACK TO CALLER
*
LIOBLDSU EQU       *         ROUTINE TO BUILD UCB INFO UNIT
***********************************************************************
*        R7 = SECONDARY ROUTINE RETURN REG
*        R5 = # OF COLUMNS LEFT TO DO @ ENTRY
*        R4 = ADDR OF UCB INFO BING CURRENTLY PROCESSED
*        R6 = PRIMARY RTN RETURN ADDR
*        R3 = OUTPUT AREA POINTER
*        R2 = # OF UNITS TO BE DONE
***********************************************************************
         MVC       0(LIOPT2L,R3),LIOPAT2 PATTERN FOR UCB DISPLAY
         L         R0,4(R4)      # OF EXCP'S ISSUED UNDER THIS UCB
         CVD       R0,WORK01
         MP        WORK01,=P'10' SHIFT FOR EDITING
         ED        9(11,R3),WORK01+3 EXCP'S
         TM        SMF4RIN,X'02' POTENTIAL ERRORS IN UCB DATA?
         BZ        LIOCNTOK      BIF NO DETECTED ERRORS
         MVI       20(R3),C'*'   OTHERWISE, FLAG IT
LIOCNTOK EQU       *
         XC        WORK01,WORK01
         MVC       WORK01(2),2(R4) UCB ADDRESS
         UNPK      WORK01,WORK01(3)
         TR        WORK01+3(4),HEXTABLE CONVERT TO HEX DISPLAY
         MVC       0(3,R3),WORK01+4 GET IT INTO INFO AREA
         TM        2(R4),X'80'   IS THIS A MSS UCB?
         BZ        LIONMSS       BIT NOT MSS
         MVC       0(3,R3),=C'MSS' WIRE IN A VALUE IF IT IS
LIONMSS  EQU       *
         MVC       WORK01+7(1),0(R4) GET DEVICE CLASS
         TR        WORK01+7(1),TYPTABLE CONVERT DEVICE CLASS TO AN OFF
         SR        R1,R1          SET UP FOR TABLE LOOKUP
         IC        R1,WORK01+7
         SLL       R1,3
         A         R1,=A(DEVTABLE) POINT TO BEG. OF LIST FOR THAT TYPE
LIOLOOP1 EQU       *
         C         R1,=A(DEVTABED) HAVE WE REACHED END OF TABLE?
         BNL       LIOUCBNF      BIF END OF TABLE HAS BEEN REACHED
         CLC       0(2,R1),0(R4)  DOES THIS UCBTYPE MATCH TAB ENTRY?
         BE        LIOUCBFD      BIF ENTRY & UCB INFO MATCH
         LA        R1,8(,R1)      SKIP TO NEXT ENTRY
         B         LIOLOOP1      KEEP ON TRUCKIN'
*
LIOUCBFD EQU       *
         MVC       4(6,R3),2(R1)  MOVE EBCDIC NAME OF DEV. TO INFO AREA
         CLC       0(3,R3),=C'FFF'   VIO?
         BNE       LIOTSJES      IF NOT VIO, TEST FOR JES
         MVC       4(6,R3),=C'VIO   '
         B         LIOBLDSX
LIOTSJES EQU       *
         CLC       4(5,R3),=C'DUMMY' IS THIS SPOOLED DATA?
         BNE       LIOBLDSX      BIF NOT
         MVC       9(11,R3),=C'        N/A' IF SO, MARK AS NOT APPL
         MVC       0(4,R3),=C'JES/'
         B         LIOBLDSX
*
LIOUCBNF EQU       *
         XC        WORK01,WORK01
         MVC       WORK01(2),0(R4) DEV TYPE DATA
         UNPK      WORK01,WORK01(3)
         TR        WORK01+3(4),HEXTABLE
         MVC       4(4,R3),WORK01+3
LIOBLDSX EQU       *
         BR        R7             BACK TO FUNCTION 'LIOBLDLN'
         TITLE     'IEFACTRT - GENERAL CONSTANTS'
***********************************************************************
*        CONSTANTS
***********************************************************************
         DS        0D
*
HEXTABLE DC        240CL1'*',C'0123456789ABCDEF'
*
LIOPAT1  DC        C'UCB.DEVICE....EXCP''S   '
*
LIOPAT2  DC        C'          ',X'20206B2020206B202120',C' * '
LIOPT2L  EQU       *-LIOPAT2
         TITLE     'IEFACTRT - UCBTYPE VS NAME LOOKUP TABLE'
DEVTABLE EQU   *
***********************************************************************
*
*        TABLE OF EBCDIC NAMES CROSS-REFERENCED BY DEVICDE TYPE
*        (BYTES 18 &19 OF THE UCB TYPE FIELD)
*        THIS TABLE MUST N-E-V-E-R HAVE MORE THAN 255 ENTRIES
*
***********************************************************************
DEVJES   EQU   *             JES
         DC    X'0000',C'DUMMY ' ANY JES/DUMMY ASSIGNMENTS
DEVCOMM  EQU   *             COMMUNICATIONS DEVICES
         DC    X'4015',C'3705  ' 3705 COMMUNICATIONS PROCESSOR
         DC    X'4092',C'BSCA  ' BISYNC TYPE 1
         DC    X'4011',C'IBM1  ' ASYNCH  (IBM TYPE1)
         DC    X'4051',C'TELE2 ' TELEGRAPH TYPE 2
DEVUR    EQU   *             UNIT RECORD EQUIPMENT
         DC    X'0801',C'2540-R' 2540 CARD READER
         DC    X'0802',C'2540-P' 2540 CARD PUNCH
         DC    X'0803',C'1442  ' 1442 CARD READER PUNCH
         DC    X'0806',C'3505  ' 3505 CARD READER
         DC    X'0808',C'1403  ' 1403 PRINTER MODEL N1, 2, & 7.
         DC    X'0809',C'3211  ' 3211 PRINTER
         DC    X'080A',C'1443N1' 1443 N1 PRINTER
         DC    X'080C',C'3525  ' 3525 CARD PUNCH
         DC    X'0810',C'2671  ' 2671 PAPER TAPE READER
         DC    X'0823',C'3215  ' 3215 CONSOLE PRINTER-KEYBOARD
         DC    X'0830',C'3213  ' 3213 CONSOLE PRINTER KEYBOARD
DEVTAPE  EQU   *             TAPE DRIVES
         DC    X'8003',C'3400  ' 3400 SERIES TAPE DRIVE
         DC    X'8001',C'2400  ' 2400 SERIES TAPE DRIVE
DEVDASD  EQU   *             DASD DEVICES
         DC    X'200D',C'3330-1' 3330-11 DISK DRIVE
         DC    X'200B',C'3350  ' 3350 DISK DRIVE
         DC    X'2009',C'3330  ' 3330 DISK DRIVE
         DC    X'2008',C'2314  ' 2314 DISK DRIVE
DEVTABED EQU   *             END OF THIS MADNESS
         TITLE     'IEFACTRT - UCBTYPE TABLE OFFSET LIST'
TYPTABLE EQU   *
***********************************************************************
*
*        TABLE USED WITH A TRANSLATE INSTR TO DECODE THE DEVICE
*        CLASS IN THE UCB INFO SECTION OF A TYPE 4 SMF RECORD INTO
*        AN OFFSET INTO A TABLE OF EBCDIC DEVICE NAMES
*
***********************************************************************
         DC    AL1((DEVJES-DEVTABLE)/8) JES
         DC    7AL1((DEVTABED-DEVTABLE)/8)
         DC    AL1((DEVUR-DEVTABLE)/8) UNIT RECORD
         DC    23AL1((DEVTABED-DEVTABLE)/8)
         DC    AL1((DEVDASD-DEVTABLE)/8) DASD
         DC    31AL1((DEVTABED-DEVTABLE)/8)
         DC    AL1((DEVCOMM-DEVTABLE)/8)  COMMUNICATIONS
         DC    63AL1((DEVTABED-DEVTABLE)/8)
         DC    AL1((DEVTAPE-DEVTABLE)/8) TAPE
         DC    127AL1((DEVTABED-DEVTABLE)/8)
         LTORG
         TITLE     'IEFACTRT - BATCH JOB SMF TYPE 4 PROCESSOR'
JT4RTN   DS        0H
***********************************************************************
*                                                                     *
*        BATCH JOB SMF TYPE 4 RECORD PROCESSOR                        *
*            . VIRTUAL STORAGE USED                                   *
*            . ADJUSTED TCB TIME                                      *
*            . TCB/SRB RATIO                                          *
*            . RELATIVE STEP #                                        *
*                                                                     *
***********************************************************************
         USING     JT4RTN,R11   USE R11 FOR ROUTINE BASE REG.
         MVI   LINE,C'*'
         MVC   LINE+1(L'LINE-1),LINE PROPAGATE ASTERS
         BAL       R8,WRITEMSG    PUT OUT A LINE
         MVC       LINE+1(ST1LGTH),ST1PATRN
         TM        SMF4STI,X'79'  WAS STEP CANCELLED OR FLUSHED?
         BNZ       STS#ONLY       BIF YES
         LH        R7,SMF4H0ST    STORAGE USED
         TM        SMF4RIN,X'01'  1:REAL;0:VIRTUAL
         BO        STV@EQ@R       BIF V=R
         B         STCONT01
STV@EQ@R EQU       *
         MVI       LINE+12,C'R'
STCONT01 EQU       *
         CVD       R7,WORK02
         SRP       WORK02,1,0
         ED        LINE+14(6),WORK02+5
         LH        R3,SMF4LENN
         L         R3,SMF4LNTH-2(R3) TCB TIME
         LA        R3,0(R3)       CLEAR LENGTH INDICATOR
         BAL       R8,CONVCPUT    CONVERT TO SLOWEST          ABS072782
*                                 SPEED MACHINE               ABS072782
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+58(12),WORK02+3
         L         R3,SMF4SRBT-1  SRB TIME
         LA        R3,0(R3)
         LTR       R3,R3          IS SRB TIME = ZERO?
         BZ        STSRBZRO
         LH        R5,SMF4LENN
         L         R5,SMF4LNTH-2(R5) TCB TIME
         LA        R5,0(R5)
         M         R4,=F'10' SHIFT FOR DEC. POINT
         DR        R4,R3          TCB / SRB TIME
         C         R5,=A(9999)    MAX VALUE
         BH        STSRBZRO       FILL IN W/ ASTERS
         CVD       R5,WORK02
         SRP       WORK02,1,0
         ED        LINE+80(6),WORK02+5
         B         STCONT02
STSRBZRO EQU       *
         MVC       LINE+81(7),=C'*******' IF SRB=0 OR QQUOTIENT > 999.9
         B         STCONT02
STS#ONLY EQU       *
         MVC       LINE+2(86),LINE+1 PROPAGATE SPACES
STCONT02 EQU       *
         SR        R7,R7
         IC        R7,SMF4STN     STEP NUMBER
         CVD       R7,WORK02
         ED        LINE+103(4),WORK02+6
         B         STPUTL1
STPUTL1  EQU       *
         BAL       R8,WRITEMSG    PUT OUT A LINE
***********************************************************************
*                                                                     *
*        LINE TWO                                                     *
*            . LSQA & SWA                                             *
*            . PRIVATE AREA PAGE-INS & RECLAIMS                       *
*            . ADJUSTED SRB TIME                                      *
*            . RESIDENCY / TCB TIME                                   *
*            . STEP NAME                                              *
*
***********************************************************************
         MVC       LINE+1(ST2LGTH),ST2PATRN
         TM        SMF4STI,X'79'  STEP CANCELLED OR BYPASSED?
         BNZ       STSNONLY       PRINT STEP NAME ONLY
         TM        SMF4RIN,X'01'  1:REAL;0:VIRTUAL
         BO        STV#EQ#R
         LH        R7,SMF4SYST    SYSTEM AREA USED
         B         STCONT03
STV#EQ#R EQU       *
         MVC       LINE+2(11),=C'REQUESTED(R'
         LH        R7,SMF4RSH0    REGION SIZE REQUESTED
STCONT03 EQU       *
         CVD       R7,WORK02
         SRP       WORK02,1,0
         ED        LINE+14(6),WORK02+5
         LH        R4,SMF4RLCT    SIZE OF RELOCATE
         L         R7,SMF4FLG+(SMF4PGIN-SMF4PGIN)(R4) PRV PAGE-INS
         CVD       R7,WORK02
         ED        LINE+28(7),WORK02+5
         L         R7,SMF4FLG+(SMF4RECL-SMF4PGIN)(R4)  PRV RECLAIMS
         CVD       R7,WORK02
         ED        LINE+37(7),WORK02+5
         L         R3,SMF4SRBT-1  SRB TIME
         LA        R3,0(R3)       CLEAR FLAGS
         BAL       R8,CONVCPUT    CONVERT TO SLOWEST          ABS072782
*                                 SPEED MACHINE               ABS072782
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+58(12),WORK02+3
         LH        R7,SMF4LENN
         L         R4,SMF4LNTH-2(R7) TCB TIME
         LA        R4,0(R4) CLEAR FLAG BYTE
         LTR       R4,R4          IS TCB ZERO
         BZ        STTCBZRO       BIF YES
         LH        R7,SMF4RLCT
         L         R3,SMF4FLG+(SMF4TRAN-SMF4PGIN)(R7) RESIDENCY TIME
         SR        R2,R2
         M         R2,=F'100000'  INCL MULT OF 10 FOR SHIFT OPER
         D         R2,=F'97656'
         SR        R2,R2
         DR        R2,R4          RES:TCB TIME
         C         R3,=A(9999)
         BH        STTCBZRO       RATIO > 999.9
         CVD       R3,WORK02
         SRP       WORK02,1,0
         ED        LINE+80(6),WORK02+5
         B         STCONT04
STTCBZRO EQU       *
         MVC       LINE+81(7),=C'*******' DIVISOR = 0 OR RATION> 999.9
         B         STCONT04
STSNONLY EQU       *
         MVC       LINE+2(86),LINE+1
STCONT04 EQU       *
         MVC       LINE+103(8),SMF4STMN STEP NAME
         BAL       R8,WRITEMSG    PUT OUT A LINE
***********************************************************************
*                                                                     *
*        LINE THREE                                                   *
*            . AVERAGE WORKING SET SIZE                               *
*            . CSA PAGE-INS & RECLAIMS                                *
*            . RESIDENCY TIME                                         *
*            . ACTIVE / RESIDENCY RATIO                               *
*            . CONDITION CODE                                         *
*
***********************************************************************
         MVC       LINE+1(ST3LGTH),ST3PATRN
         TM        SMF4STI,X'79'  JOB CANCELLED BY EXIT OR BYPASSED?
         BNZ       STNOTEXC       BIF YES
         LH        R7,SMF4RLCT
         LA        R5,SMF4FLG+(SMF4PSEC-SMF4PGIN)(R7) PAGE SECS
         LM        R2,R3,0(R5)
         LH        R4,SMF4LENN
         L         R4,SMF4LNTH-2(R4) TCB TIME
         LA        R4,0(R4)
         LTR       R4,R4
         BNP       STTCB0         DIVISOR IS ZERO
         DR        R2,R4          PAGE-SECS/ TCB
         L         R2,=F'4096'    CONVERT TO W/S SIZE IN 'K' NOT PAGES
         MR        R2,R2          (PAGE-SECS/TCB)*4096
         L         R4,=F'10000'
         DR        R2,R4          QUOTIENT(R3) = 'K' OF W/S
         C         R3,=A(9999)
         BH        STTCB0
         CVD       R3,WORK02
         SRP       WORK02,1,0
         ED        LINE+14(6),WORK02+5
         B         STCONT05
STTCB0   EQU       *              TCB NOT > 0 OR RATIO > 999.9
         MVC       LINE+15(5),=C'*****'
STCONT05 EQU       *
         L         R5,SMF4FLG+(SMF4CPGN-SMF4PGIN)(R7) COMMON PAGE-IN
         CVD       R5,WORK02
         ED        LINE+28(7),WORK02+5
         L         R5,SMF4FLG+(SMF4CRCL-SMF4PGIN)(R7) COMMON RECLAIMS
         CVD       R5,WORK02
         ED        LINE+37(7),WORK02+5
         L         R3,SMF4FLG+(SMF4TRAN-SMF4PGIN)(R7) RESIDENCY TIME
         SR        R2,R2
         M         R2,=F'10000'   CONV 1024-MICROSECS TO 100THS OF
         D         R2,=F'97656'   SECS
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+58(12),WORK02+3
         L         R4,SMF4FLG+(SMF4TRAN-SMF4PGIN)(R7)
         LTR       R4,R4
         BNP       STRESZRO       RESIDENCY TIME IS ZERO
         L         R3,SMF4FLG+(SMF4ACT-SMF4PGIN)(R7) ACTIVE TIME
         MH        R3,=H'10'
         SR        R2,R2
         DR        R2,R4          ACTIVE TIME/RESIDENCY TIME
         C         R3,=A(9999)    EXCEED LIMIT?
         BH        STRESZRO       BIF YES
         CVD       R3,WORK02
         SRP       WORK02,1,0
         ED        LINE+80(6),WORK02+5
         B         STCONT06
STRESZRO EQU       *
         MVC       LINE+81(7),=C'*******'
STCONT06 EQU       *
         TM        SMF4STI,X'02'  ABENDED?
         BO        STABEND        BIF YES
         LH        R7,SMF4SCC     STEP COMPL CODE
         CVD       R7,WORK02
         ED        LINE+101(6),WORK02+5
         B         STPUTL3
STNOTEXC EQU       *
         MVC       LINE+2(86),LINE+1 PUT LIN BLANKS
         MVC       LINE+92(16),=C'NOT EXEC   (   )'
         TM        SMF4STI,X'40'  UJV?
         BNO       STTRYUJI       BIF NOT
         MVC       LINE+104(3),=C'UJV'
         B         STPUTL3
STTRYUJI EQU       *
         TM        SMF4STI,X'20'  UJI?
         BNO   STTRYUSI           BIF NOT UJI
         MVC       LINE+104(3),=C'UJI'
         B         STPUTL3
STTRYUSI EQU       *
         TM    SMF4STI,X'10'      USI?
         BNO       STTRYACT       BIF NOT USI
         MVC       LINE+104(3),=C'USI'
         B         STPUTL3
STTRYACT EQU       *
         TM        SMF4STI,X'08'  WAS IT ACTRT?
         BNO       STISBYPS       BIF NOT
         MVC       LINE+104(3),=C'ACT'
         B         STPUTL3
STISBYPS EQU       *
         MVC       LINE+104(3),=C'BYP'
         B         STPUTL3
STABEND  EQU       *
         TM        SMF4SCC,X'80'  USER ABEND?
         BO        STUSRABD       BIF YES
         MVC       LINE+92(12),=C'ABEND      S'
         XC        WORK01,WORK01
         MVC       WORK01(2),SMF4SCC
         UNPK      WORK01,WORK01(3)
         TR        WORK01+3(4),HEXTABLE
         MVC       LINE+104(3),WORK01+4
         B         STPUTL3
STUSRABD EQU       *
         LH        R7,SMF4SCC
         SLL       R7,17          GET RID OF 'USER ABEND' INDICATOR
         SRL       R7,17
         CVD       R7,WORK02
         ED        LINE+101(6),WORK02+5
         MVC       LINE+92(12),=C'ABEND      U'
STPUTL3  EQU       *
         BAL       R8,WRITEMSG    PUT OUT A LINE
***********************************************************************
*                                                                     *
*        LINE FOUR                                                    *
*            . SWAP COUNT                                             *
*            . VIO PAGE-IN & RECLAIM COUNTS                           *
*            . TIME SPENT IN ALLOCATION                               *
*            . PERFORMANCE GROUP #                                    *
*            . PROGRAM NAME                                           *
*
***********************************************************************
         TM        SMF4STI,X'79'  WAS STEP CNACELLED OR BYPASSED?
         BNZ       LIOEXIT       BIF YES
         MVC       LINE+1(ST4LGTH),ST4PATRN
         LH        R7,SMF4RLCT
         L         R5,SMF4FLG+SMF4NSW-SMF4PGIN(R7) # OF SWAPS
         CVD       R5,WORK02
         SRP       WORK02,1,0
         ED        LINE+14(6),WORK02+5
         L         R5,SMF4FLG+SMF4VPI-SMF4PGIN(R7)  VIO PAGE-INS
         CVD       R5,WORK02
         ED        LINE+28(7),WORK02+5
         L         R5,SMF4FLG+SMF4RCLM-SMF4PGIN(R7) # OF RECLEAIMS
         CVD       R5,WORK02
         ED        LINE+37(7),WORK02+5
         L         R3,SMF4PPST    PROB PROG START TIME
         S         R3,SMF4AST     ALLOC START TIME
         BNM       STCONT07
         A         R3,=A(24*60*60*100)
STCONT07 EQU       *
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+58(12),WORK02+3
         LH        R5,SMF4FLG+SMF4PGNO-SMF4PGIN(R7)
         CVD       R5,WORK02
         SRP       WORK02,1,0
         ED        LINE+85(3),WORK02+6
         MVC       LINE+103(8),SMF4PGMN PROGRAM NAME
         BAL       R8,WRITEMSG    PUT OUT A LINE
***********************************************************************
*                                                                     *
*        LINE FIVE                                                    *
*            . SWAP PAGE-INS                                          *
*            . UNRECORDED TIME (ESTIMATE OF CPU TIME NOT RECORDED     *
*              IN EITHER TCB OR SRB TIME, BUT STILL ASSOCIATED WITH   *
*              THE ADDRESS SPACE. THE TIME IS DERIVED FROM ELEMENTS OF*
*              PAGING, SWAPPING, AND REAL I/O. THE ASSOCIATED         *
*              ALGORITHM IS DOCUMENTED IN THE MVS PERFORMANCE         *
*              NOTEBOOK (GC28-0886), SECTION II-15.)                  *
*              CURRENTLY THE CALCULATED TIME IS TOO HIGH, SINCE IT    *
*              REFLECTS TIMINGS ON A 370/158-3.  CODE NEEDS TO BE     *
*              BUILT WHICH REFLECTS THE SPEED OF THE PROCESSOR ON     *
*              WHICH THE CODE IS RUNNING.                             *
*            . SELECTION PRIORITY                                     *
*            . # OF SERVICE UNITS                                     *
*                                                                     *
***********************************************************************
         MVC       LINE+1(ST5LGTH),ST5PATRN
         LH        R7,SMF4RLCT
         L         R5,SMF4FLG+SMF4PSI-SMF4PGIN(R7) PAGES SWAPPED IN
         CVD       R5,WORK02
         ED        LINE+28(7),WORK02+5
         L         R5,SMF4FLG+SMF4PGIN-SMF4PGIN(R7) RV PAGE-INS
         A         R5,SMF4FLG+SMF4PGOT-SMF4PGIN(R7) PRV PAGE-OUTS
         A         R5,SMF4FLG+(SMF4VPI-SMF4PGIN)(R7) VIO PAGE IN
         A         R5,SMF4FLG+(SMF4VPO-SMF4PGIN)(R7) VIO PAGE OUT
         A         R5,SMF4FLG+(SMF4CPGN-SMF4PGIN)(R7) CAS PAGE IN
         SLL       R5,2           MULT BY 4 (4 MSEC FOR EACH OPERATION)
         L         R4,SMF4FLG+(SMF4PSI-SMF4PGIN)(R7) PAGES SWAPPED IN
         A         R4,SMF4FLG+(SMF4PSO-SMF4PGIN)(R7) PAGES SWAPPED OUT
         SLL       R4,1           MULT BY 2 (2 MSEC FOR EACH OPER)
         AR        R5,R4          COMBINE
         L         R3,SMF4FLG+(SMF4NSW-SMF4PGIN)(R7) # OF SWAPS
         LA        R2,51          51 MSEC FOR EACH SWAP
         MR        R2,R2
         AR        R5,R3
         LH        R7,SMF4LENN    LENFTH OF EXCP PORTION OF RECORD
         S         R7,=F'2'       GET RID OF DIDDLE VALUE
         BNP       STNOEXCP       IS THERE AN EXCP PORTION?
         LA        R3,SMF4EXCP-8(R7) END ADDR OF EXCP PORTION
         LA        R2,8           INCR FOR EACH UCB PORTION
         LA        R1,SMF4EXCP    STARTING ADDR
STADDUCB EQU       *
         A         R5,0(R1)       ASSUME EACH EXCP COSTS 1 MSEC
         BXLE      R1,R2,STADDUCB KEEP ON TRUCKIN'
STNOEXCP EQU       *
         SR        R4,R4
         D         R4,=F'10'      MSEC -> 100THS OF SECS
         LR        R3,R5
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+58(12),WORK02+3 UNRECORDED TIME (FINALLY)
         SR        R5,R5
         IC        R5,SMF4PRTY    DISP. PRIORITY
         SR        R4,R4
         LA        R3,16
         DR        R4,R3          IF IN APG, GET SRM-ASSIGNED VALUE
         C         R5,=F'7'       IN CURRENT APG?
         BNE       STNOTAPG
         C         R4,=F'7'       IN MTW GROUP?
         BL        STMTWGRP       BIF YES
         C         R4,=F'11'      >11:FIXED;<11:FIXED;=11:ROTATE
         BNE       STFXDGRP
         MVC       LINE+80(8),=C'  ROTATE'
         B         STSRVUNT
STMTWGRP EQU       *
         CVD       R4,WORK02
         ED        LINE+84(3),WORK02+6
         MVI       LINE+84,C'('
         B         STSRVUNT
STFXDGRP EQU       *
         MVC       LINE+80(9),=X'C6C9E7C5C42120205D'
         CVD       R4,WORK02
         ED        LINE+85(3),WORK02+6
         MVI       LINE+85,C'('
         B         STCONT08
STNOTAPG EQU       *
         MVC       LINE+80(9),=X'C4C9E2D7212020205D'
         SR        R5,R5
         IC        R5,SMF4PRTY
         CVD       R5,WORK02
         SRP       WORK02,1,0
         ED        LINE+84(4),WORK02+5
         MVI       LINE+84,C'('
STCONT08 EQU       *
STSRVUNT EQU       *
         LH        R7,SMF4RLCT
         L         R7,SMF4FLG+(SMF4SST-SMF4PGIN)(R7) SERV. UNITS
         CVD       R7,WORK02
         ED        LINE+98(12),WORK02+3
         BAL       R8,WRITEMSG    PUT OUT A LINE
         SPACE     3
LIOSTATS EQU       *
***********************************************************************
*
*        I/O STATISTICS, BY DD STATEMENT (EXCL. SPOOLED DATA)
*
***********************************************************************
         MVC   LINE+1(L'LINE-1),LINE ASTERS ON LINE
         LH    R5,SMF4LENN
         BCTR  R5,0
         BCTR  R5,0
         SRL   R5,3          DIVIDE BY EIGHT
         LA        R7,LINE+2
         LTR   R5,R5         ARE THERE ANY UCB'S
         BNP   LIOEXIT          BIF NONE
         CH    R5,=H'5'      ARE THERE LESS THAN 5?
         BL    LIOPARTL      BIF YES
         LA    R5,5          TITLE ALL FIVE COLUMNS
LIOPARTL EQU   *
         MVC       0(20,R7),LIOPAT1 MOVE TITLES IN, ONE AT A TIME
         LA    R7,23(R7)     MOVE TO NEXT SLOT
         BCT   R5,LIOPARTL   TITLE AS MANY COLUMNS AS NEEDED
         BAL       R8,WRITEMSG    PUT OUT A LINE
         LH    R5,SMF4LENN LENGTH OF UCB PORTION OF RECORE
         BCTR  R5,0
         BCTR  R5,0
         LR    R6,R5
         SR    R4,R4
         D     R4,=A(5*8)    HOW MANY ROWS DO WE NEED?
         LTR   R4,R4         EVENLY DIVISABLE BY 5?
         BZ    LIOEVEN       BIF YES
         LA    R5,1(R5)      R5 = DEPTH OF COLUMNS
LIOEVEN  EQU   *
         ST    R5,LIODEPTH
         LR    R1,R5
         SLL   R1,3          JUMP AHEAD VALUE FOR NEXT COLUMN'S UCB
         ST    R1,LIOJUMP
         LA    R4,SMF4DEVC   1ST UCB ENTRY
         AR    R6,R4         R6 -> BYTE BEYOND UCB PORTION
         ST    R6,LIOUCBED   KEEP THIS INFO FOR LATER
         MVI       LINE+1,C' '    BLANK OUT INFO AREA
         MVC       LINE+2(L'LINE-3),LINE+1
LIOCALL1 EQU   *
         L     R6,LIODEPTH   # OF ROWS
         SR    R6,R5         BUILD OFFSET TO UCB ENTRY FOR COL 1
         SLL   R6,3          MULT BY 8
         LA    R4,SMF4DEVC   BEGINNING OF UCB PORTION OF REC
         AR    R4,R6         POINTER TO 1ST ENTRY FOR THIS COL.
         BAL       R8,LIOBLDLN    RTN TO BUILD AN ENTIRE LINE
         STM      R0,R7,REGSAVE    HOLD ONTO REGS FOR WRITE
         BAL       R8,WRITEMSG    PUT OUT A LINE
         LM       R0,R7,REGSAVE    NOW BRING THEM BACK
         MVI       LINE+1,C' '        BLANK OUT INFO AREA
         MVC       LINE+2(L'LINE-3),LINE+1
         BCT   R5,LIOCALL1   LOOP UNTIL ALL ROWS COMPLETE
LIOEXIT  EQU   *
         BR       R10       RETURN TO CALLER
          TITLE     'IEFACTRT - SMF TYPE 4 ROUTINE CONSTANTS'
ST1PATRN EQU       *
         DC        C' USED     (V)'
         DC        X'40206B202120'
         DC        C'K * ...PAGE-INS RECLAIMS * ADJ TCB    '
         DC        X'4020207A20207A20214B2020'
         DC        C' * TCB/SRB'
         DC        X'402021204B20',C':1'
         DC        C'  * STEP NO    '
         DC        X'40202120'
         DC        C'        '
ST1END   EQU       *
ST1LGTH  EQU       *-ST1PATRN
ST2PATRN EQU       *
         DC        C' LSQA+SWA (V)'
         DC    X'40206B202120'
         DC        C'K * PRV '
         DC        X'4020206B202120'
         DC    C'  '
         DC        X'4020206B202120'
         DC        C' * ADJ SRB    '
         DC        X'4020207A20207A20214B2020'
         DC        C' * RES/TCB',X'402021204B20',C':1'
         DC        C'  * STEP NAME  XXXXXXXX    '
ST2END EQU         *
ST2LGTH  EQU       *-ST2PATRN
ST3PATRN EQU       *
         DC        C' AVE W/S SIZE'
         DC        X'40206B202120'
         DC        C'K * CSA '
         DC        X'4020206B202120'
         DC        C'  '
         DC        X'4020206B202120'
         DC        C' * RES TIME   '
         DC        X'4020207A20207A20214B2020'
         DC        C' * ATV/RES'
         DC        X'402021204B20',C':1'
         DC        C'  * COND CODE '
         DC        X'2120202020'
         DC        C'        '
ST3END   EQU       *
ST3LGTH  EQU       *-ST3PATRN
ST4PATRN EQU       *
         DC        C' SWAP CNT    '
         DC        X'40206B202120'
         DC        C'  * VIO '
         DC        X'4020206B202120'
         DC        C'  '
         DC        X'4020206B202120'
         DC        C' * ALLOC TIME '
         DC        X'4020207A20207A20214B2020'
         DC        C' * PFM GRP     '
         DC        X'402120'
         DC        C'  * PGM=       XXXXXXXX    '
ST4END   EQU       *
ST4LGTH  EQU       *-ST4PATRN
ST5PATRN EQU       *
         DC        C'                     * '
         DC        C'SWAP'
         DC        X'4020206B202120'
         DC        C'      N/A '
         DC        C'* UNRC''D TIME'
         DC        X'4020207A20207A20214B2020'
         DC        C' * PRTY    ',C'MTW',X'212020',C')  '
         DC        C'* S/U''S '
         DC        X'402020206B2020206B202120'
         DC        C'     '
ST5END   EQU       *
ST5LGTH  EQU       *-ST5PATRN
         LTORG
         DROP     R11
         TITLE    'IEFACTRT - DDNAME DISPLAY ROUTINE'
DDNAMRTN DS       0H
******************************************************************
*
*        DD NAME DISPLAY ROUTINE
*
******************************************************************
          USING   DDNAMRTN,R11     MAKE CODE ADDRESSABLE
         MVI       IOFLAGS,0       CLEAR FLAGS
         LA        R7,ECSMFTAB     GET ADDR OF SMFIO DATA TABLE
         USING     TABLE,R7        MAKE IT ADDRESSABLE
         L         R1,TABCURR      GET # OF ENTRIES IN TABLE
         LTR       R1,R1           ARE THERE ANY?
         BZ        DDNEXIT        BIF NOT
         L         R2,TABELEML     LENGTH OF ONE ELEMENT
         LR        R4,R2
         LA        R2,TABENTRY(R2) ADDR OF 1ST ENTRY(AFTER OVERFLOW)
         L         R1,TABCURR
         MR        R0,R4           R1: OFFSET TO LAST ENTRY
         LA        R5,TABENTRY(R1) R5: ADDR OF LAST ENTRY
IOLOOP1  EQU       *
         USING     SMFIOTAB,R2     MAKE TABLE ENTRY ADDRESSABLE
         TM        SNFLAGS,SNVSAM  VSAM ENTRY?
         BO        IOLOOPX1        BIF YES
         TM        IOFLAGS,IOFNVSHD HAVE HEADERS BEEN PRODUCED?
         BO        IODATAL1         BIF YES
         OI        IOFLAGS,IOFNVSHD SET HEADER SWITCH
         MVC       LINE+1(L'LINE-1),LINE PROPAGATE ASTERISKS
         MVC LINE+47(21),=X'D5D6D560E5E2C1D42120202061202020612020205D'
         LM        R0,R1,TABMAX     GET MAX, CURR # OF ENTRIES
         CVD       R0,WORK02        MAX # OF ENTRIES
         CVD       R1,WORK01        CURR # OF ENTRIES
         SRP       WORK02,3,0       SHIFT LEFT 3 POS.
         AP        WORK02,WORK01
         L         R0,TABOVFL       # OF OVERFLOW ELEMENTS
         CVD       R0,WORK01
         SRP       WORK02,3,0
         AP        WORK02,WORK01
         SRP       WORK02,1,0
         ED        LINE+55(12),WORK02+2
         MVI       LINE+55,C'('
         STM       R0,R7,REGSAVE
         BAL       R8,WRITEMSG
         MVC       LINE+1(IOPAT1L),IOPAT1 HEADER PATTERN
         BAL       R8,WRITEMSG
         LM        R0,R7,REGSAVE
         MVI       LINE+1,C' '    BLANK OUT LINE
         MVC       LINE+2(L'LINE-3),LINE+1
IODATAL1 EQU       *
         MVC       LINE+2(8),SNDDNAME DDNAME
         MVC       WORK01+7(1),SNUCBTYP+2  DEVICE TYPE (UCBTYP)
         TR        WORK01+7(1),TYPTABLE    GET OFFSET TO CLASS
         SR        R1,R1
         IC        R1,WORK01+7
         SLL       R1,3            MULT BY 8
         A         R1,=A(DEVTABLE) ADDR OF DEV. CLASS BEGIN
IOLOOP2  EQU       *
         C         R1,=A(DEVTABED)  END OF TABLE?
         BNL       IOL2NFD          BIF END (NOT FOUND)
         CLC       0(2,R1),SNUCBTYP+2 OUR DEVICE?
         BE        IOL2FND          BIF OUR DEVICE FOUND
         LA        R1,8(,R1)        INCR TO NEXT ENTRY
         B         IOLOOP2          KEEP ON TRUCKIN'
IOL2NFD  EQU       *
         MVC       LINE+11(6),=C'******'
         B         IOL2VOL          NOW DO VOLSER
IOL2FND  EQU       *
         MVC       LINE+11(6),2(R1) MOVE IN SYMBOLIC NAME
IOL2VOL  EQU       *
         MVC       LINE+18(6),SNVOLSER GET VOLSER
         TM        SNFLAGS,SNVIO    VIO FILE?
         BZ        IOL2OPEN
         MVC       LINE+18(6),=C'*VIO**'
IOL2OPEN EQU       *
         MVC       LINE+25(6),=C'INPUT '
         TM        SNDEBPAT,X'0F'    IS IT INPUT OR OUTPUT?
         BZ        IOL2OCNT          BIF INPUT(ALREADY SET)
         BM        IOL2ODD           BIF OUTIN,INOUT,UPDAT,RDBACK
         MVC       LINE+25(6),=C'OUTPUT'
         B         IOL2OCNT      NOW DO OPEN COUNT
IOL2ODD  EQU       *
         TM        SNDEBPAT,X'07' OUTIN?
         BNO       IOL2INOT      BIF NOT; TRY INOUT
         MVC       LINE+25(6),=C'OUTIN '
         B         IOL2OCNT      NOW DO OPEN COUNT
IOL2INOT EQU        *
         TM         SNDEBPAT,X'03' INOUT?
         BNO        IOL2UPDT     BIF NOT; TRY UPDATE
         MVC        LINE+25(6),=C'INOUT '
         B          IOL2OCNT
IOL2UPDT EQU        *
         TM         SNDEBPAT,X'01' READBACK?
         BO         IOL2RDBK     BIF YES
         MVC        LINE+25(6),=C'UPDAT '
         B          IOL2OCNT
IOL2RDBK EQU        *
         MVC        LINE+25(6),=C'RDBACK'
IOL2OCNT EQU        *
         MVC        LINE+33(5),=X'2020202120'
         LH         R1,SNOPNCNT
         CVD        R1,WORK01
         ED         LINE+32(6),WORK01+5
         TM         SNDSORG,X'40' DSORG=PS?
         BZ         IOL2DA        BIF NOT; TRY DA
         MVC        LINE+40(2),=C'PS'
         TM         SNOPTCD,X'FF'    ANY OPTION FLAGS?
         BZ         IOL2PS05         BIF NOT
         LA        R1,LINE+45     GET STARTING ADDR
         TM        SNOPTCD,X'80'  OPTCD=W?
         BZ        IOL2PS01       BIF NOT
         MVI       0(R1),C'W'
         LA        R1,1(,R1)  SKIP TO NEXT POS.
IOL2PS01 EQU       *
         TM        SNOPTCD,X'40'  OPTCD=U?
         BZ        IOL2PS02       BIF NOT
         MVI       0(R1),C'U'
         LA        R1,1(,R1)  SKIP TO NEXT PO.
IOL2PS02 EQU       *
         TM        SNOPTCD,X'20'  OPTCD=C?
         BZ        IOL2PS03       BIF NOT
         MVI       0(R1),C'C'
         LA        R1,1(,R1)
IOL2PS03 EQU       *
         TM        SNOPTCD,X'04'  OPTCD=Z?
         BZ        IOL2PS04
         MVI       0(R1),C'Z'
         LA        R1,1(,R1)
IOL2PS04 EQU       *
         TM        SNOPTCD,X'01'  OPTCD=J?
         BZ        IOL2PS05
         MVI       0(R1),C'J'
IOL2PS05 EQU       *
         B         IOL2UNMV        NOW TEST FOR UNMOVEABLE
IOL2DA   EQU       *
         TM        SNDSORG,X'20'   DSORG=DA?
         BZ        IOL2PO          BIF NOT: TRY PO
         MVC       LINE+40(2),=C'DA'
         TM        SNOPTCD,X'FF'     ANY OPTION FLAGS?
         BZ        IOL2DA06          BIF NOT
         LA        R1,LINE+45  GET ADDR OF OUTPUT AREA
         TM        SNOPTCD,X'80'  OPTCD=W?
         BZ        IOL2DA01       BIF NOT
         MVI       0(R1),C'W'
         LA        R1,1(,R1)
IOL2DA01 EQU       *
         TM        SNOPTCD,X'40'  OPTCD=T?
         BZ        IOL2DA02
         MVI       0(R1),C'T'
         LA        R1,1(,R1)
IOL2DA02 EQU       *
         TM        SNOPTCD,X'20'  OPTCD=E?
         BZ        IOL2DA03
         MVI       0(R1),C'E'
         LA        R1,1(,R1)
IOL2DA03 EQU       *
         TM        SNOPTCD,X'10'  OPTCD=F?
         BZ        IOL2DA04
         MVI       0(R1),C'F'
         LA        R1,1(,R1)
IOL2DA04 EQU       *
         TM        SNOPTCD,X'08'  OPTCD=A?
         BZ        IOL2DA05
         MVI       0(R1),C'A'
         LA        R1,1(,R1)
IOL2DA05 EQU       *
         TM        SNOPTCD,X'01'  OPTCD=R?
         BZ        IOL2DA06
         MVI       0(R1),C'R'
IOL2DA06 EQU       *
         B         IOL2UNMV         NOW TEST FOR UNMOVEABLE
IOL2PO   EQU       *
         TM        SNDSORG,X'02'    DSORG=PO?
         BZ        IOL2ISAM         BIF NOT: TRY ISAM
         MVC       LINE+40(2),=C'PO'
         TM        SNOPTCD,X'FF'    ANY OPTION FLAGS?
         BZ        IOL2IS06         BIF NOT
         LA        R1,LINE+45     GET STARTING ADDR
         TM        SNOPTCD,X'80'  OPTCD=W?
         BZ        IOL2PO01       BIF NOT
         MVI       0(R1),C'W'
         LA        R1,1(,R1)  SKIP TO NEXT POS.
IOL2PO01 EQU       *
         TM        SNOPTCD,X'40'  OPTCD=U?
         BZ        IOL2PO02       BIF NOT
         MVI       0(R1),C'U'
         LA        R1,1(,R1)  SKIP TO NEXT PO.
IOL2PO02 EQU       *
         TM        SNOPTCD,X'20'  OPTCD=C?
         BZ        IOL2PO03       BIF NOT
         MVI       0(R1),C'C'
         LA        R1,1(,R1)
IOL2PO03 EQU       *
         TM        SNOPTCD,X'04'  OPTCD=Z?
         BZ        IOL2PO04
         MVI       0(R1),C'Z'
         LA        R1,1(,R1)
IOL2PO04 EQU       *
         TM        SNOPTCD,X'01'  OPTCD=J?
         BZ        IOL2PO05
         MVI       0(R1),C'J'
IOL2PO05 EQU       *
         B         IOL2UNMV       NOW TEST FOR UNMOVEABLE
IOL2ISAM EQU       *
         TM        SNDSORG,X'80'    DSORG=IS?
         BZ        IOL2UNKN         BIF UNKNOWN
         MVC       LINE+40(2),=C'IS'
         LA        R1,LINE+45      GET ADDR OF OUTPUT AREA
         TM        SNOPTCD,X'80'   OPTCD=W?
         BZ        IOL2IS01        BIF NOT
         MVI       0(R1),C'W'
         LA        R1,1(,R1)
IOL2IS01 EQU       *
         TM        SNOPTCD,X'20'  OPTCD=M?
         BZ        IOL2IS02
         MVI       0(R1),C'M'
         LA        R1,1(,R1)
IOL2IS02 EQU       *
         TM        SNOPTCD,X'10'  OPTCD=I?
         BZ        IOL2IS03
         MVI       0(R1),C'I'
         LA        R1,1(,R1)
IOL2IS03 EQU       *
         TM        SNOPTCD,X'08'  OPTCD=Y?
         BZ        IOL2IS04
         MVI       0(R1),C'Y'
         LA        R1,1(,R1)
IOL2IS04 EQU       *
         TM        SNOPTCD,X'02'  OPTCD=L?
         BZ        IOL2IS05
         MVI       0(R1),C'L'
         LA        R1,1(,R1)
IOL2IS05 EQU       *
         TM        SNOPTCD,X'01'  OPTCD=R?
         BZ        IOL2IS06
         MVI       0(R1),C'R'
IOL2IS06 EQU       *
         B         IOL2UNMV         NOW CHECK FOR UNMOVEABLE
IOL2UNKN EQU       *
         MVC       LINE+40(2),=C'**'
         B         IOL2RCFM
IOL2UNMV EQU       *
         TM        SNDSORG,X'01'  UNMOVEABLE?
         BZ        IOL2RCFM       BIF NOT: DO RECFM
         MVI       LINE+42,C'U'
IOL2RCFM EQU       *
         LA        R1,LINE+52           STARTING POINT
         TM        SNRECFM,X'C0'  RECFM=U?
         BNO       IOL2FXD        BIF NOT: TRY RECFM=F
         MVI       0(R1),C'U'
         LA        R1,1(,R1)      SKIP TO NEXT POSITION
         B         IOL2TOVF       NOW TEST FOR TRACK OVERFLOW
IOL2FXD  EQU       *
         MVI       0(R1),C'F'        ASSUME RECFM=F
         TM        SNRECFM,X'80'     IS IT RECFM=F?
         BO        IOL2SKP           BIF YES
         MVI       0(R1),C'V'        OTHERWISE, RECFM=V
IOL2SKP  EQU       *
         LA        R1,1(,R1)         SKIP TO NEXT SLOT
IOL2TOVF EQU       *
         TM        SNRECFM,X'20'     TRACK OVERFLOW?
         BZ        IOL2BLK           BIF NOT
         MVI       0(R1),C'T'
         LA        R1,1(,R1)         SKIP TO NEXT SLOT
IOL2BLK  EQU       *
         TM        SNRECFM,X'10'  BLOCKED?
         BZ        IOL2SPND       BIF NOT
         MVI       0(R1),C'B'     MARKED AS BLOCKED
         LA        R1,1(,R1)      SKIP TO NEXT SLOT
IOL2SPND EQU       *
         TM        SNRECFM,X'08'     RECFM=S?
         BZ        IOL2CC            BIF NOT: TRY CARRIAGE CONTROL
         MVI       0(R1),C'S'
         LA        R1,1(,R1)    SKIP TO NEXT POSITION
IOL2CC   EQU       *
         TM        SNRECFM,X'04'  ASA CARRIAGE CONTROL?
         BZ        IOL2MACH       BIF NOT: TRY MACHINE CC
         MVI       0(R1),C'A'
         B         IOL2LRCL     NOW DO LRECL
IOL2MACH EQU       *
         TM        SNRECFM,X'02' MACHINE CARRIAGE CONTROL?
         BZ        IOL2LRCL     BIF NOT: DO LRECL
         MVI       0(R1),C'M'
IOL2LRCL EQU       *
         LH        R1,SNLRECL
         CVD       R1,WORK01
         MVC       LINE+57(5),=X'2020202120'
         ED        LINE+56(6),WORK01+5
         LH        R1,SNBLKSIZ      BLOCKSIZE
         CVD       R1,WORK01
         MVC       LINE+64(6),=X'20206B202120'
         ED        LINE+63(7),WORK01+5
         LH        R1,SNBUFNO     # OF BUFFERS
         CVD       R1,WORK01
         MVC       LINE+71(6),=X'20206B202120'
         ED        LINE+70(7),WORK01+5
         L         R1,SNEXCP         BLOCK COUNT
         CVD       R1,WORK01
         MVC       LINE+78(9),=X'206B2020206B202120'
         ED        LINE+77(10),WORK01+4
         TM        SNFLAGS,SNDASD      IS IT DASD?
         BZ        IOL2TAPE            BIF NOT: DO TAPE PROCESSING
         L         R1,SNTRKALC     # OF TRACKS ALLOCATED
         CVD       R1,WORK01
         MVC       LINE+92(7),=X'20202020202120'
         ED        LINE+91(8),WORK01+4
         TM        SNDSORG,X'80'    DSORG=IS?
         BO        IOL2TRKN         BIF YES
*
         L         R1,SNTRKUSD      WAS # OF TRKS USED > ZERO?
         LTR       R1,R1
         BP        IOL2TRKU         BIF YES
*                                   OTHERWISE, FIGURE IT OUT ELSEHOW
         TM        SNDCBFL,X'80'     WAS LAST OPERATION A WRITE?
         BO        IOL2TRKU          BIF YES: TRACKS USED VALID
         LA        R1,1
         CH        R1,SNBUFNO        WAS # OF BUFFERS = 1?
         BE        IOL2TRKU          BIF YES: TRACKS USED VALID
         TM        SNRECFM,X'88'     RECFM=FS OR FBS?
         BO        IOL2TRKU          BIF YES: TRACKS USED VALID
IOL2TRKN EQU       *
         MVC       LINE+103(3),=C'N/A'  OTHERWISE, INVALID
         B         IOL2TRKR
IOL2TRKU EQU       *
         L         R1,SNTRKUSD     # OF TRACKS USED
         LA        R1,1(,R1)       BUMP UP BY 1 FOR PARTIAL TRACKS
         CVD       R1,WORK01
         MVC       LINE+100(6),=X'202020202120'
         SRP       WORK01,1,0
         ED        LINE+99(7),WORK01+4
IOL2TRKR EQU       *
         L         R1,SNTRKRLS      # OF TRACKS RELEASED
         CVD       R1,WORK01
         MVC       LINE+107(6),=X'202020202120'
         SRP       WORK01,1,0
         ED        LINE+106(7),WORK01+4
         SR        R1,R1
         IC        R1,SNEXTCNT     # OF EXTENTS
         CVD       R1,WORK01
         MVC       LINE+89(3),=X'202120'
         ED        LINE+88(4),WORK01+6
         B         IOL2NVPR     NOW DO PRINT OF DATA LINE
IOL2TAPE EQU       *
         MVC       LINE+89(24),=C'N/A    N/A    N/A    N/A'
IOL2NVPR EQU       *
         STM       R0,R7,REGSAVE
         BAL       R8,WRITEMSG
         LM        R0,R7,REGSAVE
         MVI       LINE+1,C' '
         MVC       LINE+2(L'LINE-3),LINE+1  BLANK THE LINE
         B         IOLOOPX2
IOLOOPX1 EQU       *
         OI        IOFLAGS,IOFVSMPR  NOTE THAT VSAM RECS PRESENT
IOLOOPX2 EQU       *
         BXLE      R2,R4,IOLOOP1    GET ALL ENTRIES
******************************************************************
*      VSAM SUPPORT CODE GOES HERE
*****************************************************************
         TM        IOFLAGS,IOFVSMPR VSAM RECORDS PRESENT?
         BZ        DDNEXIT       BIF NOT
         MVC       LINE+1(L'LINE-1),LINE  LINE OF ASTERS
         MVC       LINE+49(17),=X'E5E2C1D42120202061202020612020205D'
         LM        R0,R1,TABMAX
         CVD       R0,WORK02    MAX # OF ENTRIES
         CVD       R1,WORK01    CURR # OF ENTRIES
         SRP       WORK02,3,0   SHIFT LEFT 3
         AP        WORK02,WORK01
         L         R0,TABOVFL    # OF OVERFLOW ENTRIES
         CVD       R0,WORK01
         SRP       WORK02,3,0   SHIFT LEFT 3
         AP        WORK02,WORK01
         SRP       WORK02,1,0   SHIFT 1 MORE TIME FOR EDIT
         ED        LINE+53(12),WORK02+2
         MVI       LINE+53,C'('  FINISH UP LINE
         STM       R0,R7,REGSAVE   HOLD ONTO REGS FOR A SED
         BAL       R8,WRITEMSG   WRITE SMB
         MVC       LINE+1(IOPAT2L),IOPAT2
         BAL       R8,WRITEMSG
         LM        R0,R7,REGSAVE   GET REGS BACK
         MVI       LINE+1,C' '     NOW BLANK OUT LINE
         MVC       LINE+2(L'LINE-3),LINE+1
         L         R5,TABCURR    CURR # OF TABLE ENTRIES
         L         R4,TABELEML   TABLE ELEMENT LENGTH
         LA        R2,TABENTRY(R4) ADDR OF 1ST ENTRY AFTER OVERFLOW
         LR        R3,R4
         MR        R4,R4         R5: OFFSET TO LAST ENTRY
         LA        R5,TABENTRY(R5) R5: ADDR OF LAST ENTRY
         LR        R4,R3         R4: ELEMENT LENGTH
IOLOOP3  EQU       *
         TM       SVFLAGS,SNVSAM     IS THIS A VSAM ENTRY?
         BZ       IOLOOPX3           BIF NOT: SKIP TO NEXT ENTRY
         MVC       LINE+2(8),SVDDNAME       DDNAME
         TM        SVELTYPE,SVIDXCUR        TO-DATE INDEX CMPT INFO?
         BZ        IOL4ICHG          BIF NOT: TRY CHANGED INDEX INFO
         MVC       LINE+11(9),=C'IDX  CURR'
         B         IOL4OCNT          NOW DO OPEN COUNT
IOL4ICHG EQU       *
         TM        SVELTYPE,SVIDXCNG  CHANGED INDEX CMPT INFO?
         BZ        IOL4DCUR          BIF NOT: TRY CURR. DATA CMPT
         MVC       LINE+11(9),=C'IDX  CHNG'
         B         IOL4OCNT          NOW DO OPEN COUNT
IOL4DCUR EQU       *
         TM        SVELTYPE,SVDATCUR  CURR. DATA COMPONENT?
         BZ        IOL4DCNG          BIF NOT: TRY CHNGED DATA CMPT
         MVC       LINE+11(9),=C'DATA CURR'
         B         IOL4OCNT    NOW DO OPEN COUNT
IOL4DCNG EQU       *
         MVC       LINE+11(9),=C'DATA CHNG'
IOL4OCNT EQU       *
         LA        R0,4
         LNR       R0,R0      DECREMENT VALUE OF 4
         LA        R1,SVCURRNT-4   STOP VALUE FOR BXH
         LA        R3,LINE+104     TARGET ADDR
         LA        R6,SVNEP        SOURCE
IOLOOP4  EQU       *
         MVC       1(8,R3),=X'202020206B202120'
         L         R14,0(,R6)   VALUE TO BE DISPLAYED
         CVD       R14,WORK01
         ED        0(9,R3),WORK01+4
         S         R3,=A(8)     MOVE TO THE LEFT 8 BYTES
         BXH       R6,R0,IOLOOP4   LOOP UNTIL FINISHED
         MVC       LINE+21(4),=X'20202120'
         LH        R1,SVOPNCNT
         CVD       R1,WORK01
         SRP       WORK01,1,0   SHIFT FOR EDITING
         ED        LINE+20(5),WORK01+5
         STM       R0,R7,REGSAVE     HOLD ONTO REGS FOR A SEC
         BAL       R8,WRITEMSG       WRITE SMB
         LM        R0,R7,REGSAVE     BRING IT BACK
         MVI       LINE+1,C' '       NOW BLANK OUT LINE
         MVC       LINE+2(L'LINE-3),LINE+1
IOLOOPX3 EQU       *
         BXLE      R2,R4,IOLOOP3     DO REMAINDER OF TABLE
DDNEXIT  EQU       *
         BR        R10            RETURN TO MAIN ROUTINE
         TITLE     'IEFACTRT - DDNAME DISPLAY ROUTINE CONSTANTS'
IOPAT1   EQU       *
         DC        C' DDNAME   DEVICE VOLSER OPNTYP OPNCNT DSORG '
         DC        C'OPTCD RECFM LRECL BLKSIZE  BUFNO BLOCK-CNT '
         DC        C'EXTS TRKALC TRKUSD TRKRLS  '
IOPAT1L  EQU       *-IOPAT1
IOPAT2   EQU       *
         DC        C' DDNAME   CPNT STAT OPCT  LEVELS EXTENTS RECORDS '
         DC        C'DELETES INSERTS UPDATES    GETS UNUS-CI SPLT-CI '
         DC        C'SPLT-CA  BLKCNT  '
IOPAT2L  EQU       *-IOPAT2
         LTORG
         DROP      R11
         TITLE     'IEFACTRT - BATCH JOB TERMINATION ROUTINE'
JT5RTN  DS        0H
***********************************************************************
*
*        BATCH JOB SMF TYPE 5 RECORD PROCESSOR
*
***********************************************************************
         USING     JT5RTN,R11    USE R11 FOR ROUTINE BASE REG.
         MVI       LINE,C'*'
         MVC       LINE+1(L'LINE-1),LINE LINE OF ASTERS
         BAL       R8,WRITEMSG    PUT OUT A LINE
         MVC       LINE+1(JT1LGTH),JT1PATRN
         L         R3,SMF5JCPU-1  TCB TIME
         LA        R3,0(R3)
         BAL       R8,CONVCPUT    CONVERT TO SLOWEST          ABS072782
*                                 SPEED MACHINE               ABS072782
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+11(12),WORK02+3
         L         R3,SMF5JIT
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+37(12),WORK02+3
         MVC       LINE+61(8),SMF5JBN JOB NAME
         MVC       LINE+81(20),SMF5PRGN PRGMR NAME
         BAL       R8,WRITEMSG    PUT OUT A LINE
         MVC       LINE+1(JT2LGTH),JT2PATRN
         L         R3,SMF5SRBT-1 SRB TIME
         LA        R3,0(R3)
         BAL       R8,CONVCPUT    CONVERT TO SLOWEST          ABS072782
*                                 SPEED MACHINE               ABS072782
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+11(12),WORK02+3
         L         R3,SMF5TME     TIME THIS REC. WAS WRITTEN
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+37(12),WORK02+3
         LA        R7,16          CVT ADDR PTR
         L         R7,0(R7)       CVT ADDR
         S         R7,=F'4'       CVT PREFIX AREA
         MVC       LINE+61(2),0(R7) RELEASE &
         MVC       LINE+64(2),2(R7) LEVEL
         SR        R7,R7
         IC        R7,SMF5ACTF    # OF ACCT FIELDS
         LA        R5,SMF5JSAF    1ST ACCTING FIELD
         LTR       R7,R7
         BZ        JTPUTL2        BIF NO ACCTING FIELDS
         LA        R4,LINE+81     ADDR OF DISPLAY AREA
         LA        R1,LINE+99     ADDR OF END OF DISPLAY AREA
         B         JTCONT01
JTGETACT EQU       *
         LA        R4,2(R3,R4)    BUMP TO NEXT FLD+1
         CR        R1,R4          WILL WE OVERFLOW DISPLAY AREA
         BNP       JTPUTL2        BIF YES
         BCTR      R4,0
         MVI       0(R4),C','
         LA        R4,1(R4)
         SR        R3,R3
         IC        R3,0(R5)       LENGTH OF THIS SUBFIELD
         LA        R5,1(R3,R5)    BUMP TO NEXT INPUT FIELD
JTCONT01 EQU       *
         SR        R3,R3
         IC        R3,0(R5)       GET LENGTH OF FIELD
         LTR       R3,R3
         BZ        JTNXTACT       IF SUBFIELD=0, LOOK @ NEXT
         LA        R2,0(R4,R3)    TEST THE WATERS
         CR        R2,R1          WILL THIS EXCEED LINE LENGTH?
         BNH       JTMVEACT
         SR        R2,R1          DIFF BETWEEN END OF FIELD &
         SR        R3,R2          CHOP ACCT VALUE TO FIT REM. AREA
         BNP       JTPUTL2
JTMVEACT EQU       *
         BCTR      R3,0           LENGTH -> LENGTH CODE
         EX        R3,JTMVEINS    MOVE ACCTING INFO TO DISPLAY AREA
JTNXTACT EQU       *
         BCT       R7,JTGETACT
         B         JTPUTL2
JTMVEINS MVC       0(0,R4),1(R5)
JTPUTL2  EQU       *
         BAL       R8,WRITEMSG    PUT OUT A LINE
         MVC       LINE+1(JT3LGTH),JT3PATRN
         L         R3,SMF5TTAT    TASK ACTIVE TIME
         SR        R2,R2
         M         R2,=F'10000' 1024-MIGRO-SEC -> 100THS OF SECS
         D         R2,=F'97656'
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+11(12),WORK02+3
         ZAP       WORK02,SMF5DTE+2(2) CALC. EPSD TIME
         SP        WORK02,SMF5JID+2(2)
         BNM       JTCONT04
         AP        WORK02,=P'365' JOB STARTED LAST YEAS
         ZAP       WORK01,SMF5JID
         SRP       WORK01,B'111101',0 SHIFT THREE DIGITS TO RIGHT
         DP        WORK01,=P'4'   IS THIS LAST YEAR A LEAP YEAR?
         CP        WORK01+7(1),=P'0' ZERO REMAINDER
         BP        JTCONT04       BIF NOT
         AP        WORK02,=P'1'
JTCONT04 EQU       *
         CVB       R3,WORK02
         M         R2,=A(24*60*60*100)
         A         R3,SMF5TME
         S         R3,SMF5JIT
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+37(12),WORK02+3
         MVC       LINE+61(4),SMF5SID SMFID
JTISBLUE EQU       *
         L         R3,SMF5RST     READER START TIME
         BAL       R8,CONVTIME    CONVERT VALUE TO HHMMSSHS FORMAT
         ED        LINE+80(12),WORK02+3
         MVI       LINE+80,C' '
         ZAP       WORK01,SMF5RSD
         CP        WORK01+6(2),=P'60'
         BL        JTNOTMAR       NOT YET MARCH
         TM        WORK01+5,X'01' TEST FOR LEAP YEAR
         BO        JTNOTLPY       BIF NOT LEAP YEAR
         TM        WORK01+5,X'12' TEST FOR LEAP YEAR
         BM        JTNOTLPY       BIF NOT LEAP YEAR
         CP        WORK01+6(2),=P'60'
         BNH       JTFEB29        IT'S FEB 29
         SP        WORK01+6(2),=P'1'
JTNOTLPY EQU       *
         AP        WORK01+6(2),=P'2'
JTNOTMAR EQU       *
JTFEB29  EQU       *
         AP        WORK01+6(2),=P'91'
         ZAP       WORK02,=P'100'
         MP        WORK02,WORK01+6(2)
         DP        WORK02,=P'003055'
         SP        WORK02(4),=P'2'
         AP        WORK02+4(4),=P'100'
         MVO       WORK02,WORK02(7)
         MVC       WORK02+4(1),WORK02+6
         MVC       WORK02+5(1),WORK01+5
         ZAP       WORK02+6(2),SMF5JID+2(2)
         ED        LINE+92(13),WORK02+3 MM/DD/YY.DDD
         MVI       LINE+92,C'*'
         L         R7,CEPAADDR    GET ADDR OF COMM EXIT PARM AREA
         USING     COMMEXIT,R7
         MVC       LINE+108(1),CEPIDCLS PUT IN INITIATED JOB CLASS
         DROP      R7
         BAL       R8,WRITEMSG    PUT OUT A LINE
         MVC       LINE+1(L'LINE-1),LINE LINE OF ASTERS
         BAL       R8,WRITEMSG    PUT OUT A LINE
JOBEXIT  EQU       *
         BR        R10
          TITLE     'IEFACTRT - JOBTERM ROUTINE CONSTANTS'
JT1PATRN EQU       *
         DC        C' ADJ TCB  '
         DC        X'4020207A20207A20214B2020'
         DC        C' * START TIME '
         DC        X'4020207A20207A20214B2020'
         DC        C' * JOB NAME XXXXXXXX'
         DC        C' PROGRAMMER ',CL18' '
         DC        C'   U.S. SENATE  '
JT1END   EQU       *
JT1LGTH  EQU       *-JT1PATRN
JT2PATRN EQU       *
         DC        C' ADJ SRB  '
         DC        X'4020207A20207A20214B2020'
         DC        C' * END TIME   '
         DC        X'4020207A20207A20214B2020'
         DC        C' * RLS LEVL '
         DC        C'XX.XX    '
         DC        C'ACCT NO    ',CL19' '
         DC        C'COMPUTER CENTER'
JT2END   EQU       *
JT2LGTH  EQU       *-JT2PATRN
JT3PATRN EQU       *
         DC        C' ACTV TIME'
         DC        X'4020207A20207A20214B2020'
         DC        C' * ELP''SD TIME'
         DC        X'4020207A20207A20214B2020'
         DC        C' * SYSTEM   ',C'BLUE'
         DC        C'     JOB LOG   '
         DC    X'F021207A20207A20204B2020F021206120206120204B202020'
         DC        C' - X -    '
JT3LGTH  EQU       *-JT3PATRN
         LTORG
         DROP      R11
          TITLE     'IEFACTRT - DSN CONTENTION REQUEUER FACILITY'
REQUERTN EQU       *
****************************************************************
*
*        THIS ROUTINE, USING ANCHOR PROVIDED IN AN ENQ
*        QCB, COMMUNICATES WITH THE REQUEUER TASK VIA
*        A CROSS-MEMORY POST.  THE FUNCTION OF THE
*        REQUEST IS TO INTERROGATE THE REQUEUER RESOURCE
*        CONTROL FILE TO SEE IF THIS JOB, CURRENTLY
*        GOING THRU TERMINATION, WAS INVOLVED IN ANY
*        DSN CONTENTION PROBLEMS.
*
**************************************************************
          USING     REQUERTN,R11    MAKE RTN ADDRESSABLE
          XC        ENQAREA(ENQAREAL),ENQAREA
          MVI       ENQMACRO,X'C0'  SET END-OF-LIST
          MVC       ENQQNAME,=C'REQUEUER' SET UP ENQ REQUEST
          MVC       ENQRNAME,=C'RESOURCE'
          MVI       ENQMACRO+2,X'44' SET OPTIONS TO ECB=&SCOPE=SYSTEMS
          MVI       ENQMACRO+3,X'00' SET RC TO ZERO
          ENQ       (ENQQNAME,ENQRNAME,E,8,SYSTEM),ECB=ENQECB,         X
               MF=(E,ENQMACRO)
          LTR       R15,R15          DID WE GET RESOURCE?
          BZ        RRTHVRES         BIF WE HAVE RESOURCE
          SR        R1,R1            OTHERWISE, FIGURE OUT WHY NOT
          IC        R1,ENQMACRO+3       GET RET CODE FROM LIST
          B         RRTENWTG(R1)     USE RC FOR WTG LOOKUP
RRTENWTG  EQU      *
          BAL      R14,RRTERROR      RC=0; UNEXPECTED VALUE
          B        RRTWAIT           RC=4; MUST WAIT FOR CONTROL
          BAL      R14,RRTERROR      RC=8; HAVE RES. ALREADY
          BAL      R14,RRTERROR      RC=12; ERROR
          BAL      R14,RRTERROR      RC=16; ERROR
          BAL      R14,RRTERROR      RC=20; ERROR
RRTWAIT   EQU      *
         L         R1,=A(120)           WAIT UP TO 2 MINUTES FOR EVENT
         BAL       R8,SETDIE            SET UP THIS PERIOD
         B         RRTDIEOK             RC=0; DIE SET UP OK
         BAL       R8,PURGEDIE          RC=4; DIE SET UP FAILED
         BAL       R14,RRTERROR         NOW LEAVE ROUTINE
RRTDIEOK EQU       *
         ST        R1,ENQHTQE           HOLD ONTO POINTER FROM SETDIE
         USING     TQE,R1               MAKE THIS WORK AREA ADDRESSABLE
         LA        R1,DIEECB            GET ADDR OF 1ST ECB
         DROP      R1
         ST        R1,ECBLIST1          SET UP WAIT MULTIPLE
         LA        R1,ENQECB            GET ADDR OF 2ND ECB
         ST        R1,ECBLIST2
         MVI       ECBLIST2,X'80'       END-OF-LIST
         WAIT      1,ECBLIST=ECBLIST0
         TM        ENQECB,X'40'         DO WE HAVE CONTROL YET?
         BO        RRTGOTIT             BIF YES; ENQ ECB WAS POSTED
         L         R1,ENQHTQE           GET POINTER TO TQE WORK AREA
         BAL       R8,PURGEDIE          GET RID OF DIE
         B         RRTDEQ               LEAVE QUIETLY
*
RRTGOTIT EQU      *
         L        R1,ENQHTQE            GET POINTER TO TQE WORK AREA
         BAL      R8,PURGEDIE
*
RRTHVRES EQU      *
         AIF      ('&SYSPARM' EQ 'SP12' OR '&SYSPARM' EQ 'SP13').SP3C
         SR       R5,R5    CLEAR REGS FOR DIAGNOSTICS
         SR       R6,R6
         SETLOCK  OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,RELATED=A
         SETLOCK  OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=USE,RELATED=A
         L        R1,16(0,0)            GET CVT ADDRESS
         USING    CVT,R1                MAKE IT ADDRESSABLE
         L        R2,CVTSMCA            GET ADDR OF SMCA
         USING    SMCABASE,R2           MAKE IT ADDRESSABLE
         L        R1,CVTFQCB            GET BEG. OF QCB CHAIN
         USING    QCB,R1                MAKE MAJOR QCB ADDRESSABLE
RRTLOOP1 EQU      *
         CLC      MAJNAME(8),=C'REQUEUER' FIND 1ST PART OF ANCHOR
         BE       RRTFNDRN              BIF FOUND; GET 2ND PART
         L        R1,MAJNMAJ            GO AFTER NEXT MAJOR
         LTR      R1,R1                 ANY MORE LEFT?
         BNZ      RRTLOOP1              BIF YES
         BAL      R6,RRTUNLOK       OTHERWISE, SIGNAL ERROR
RRTFNDRN EQU      *
         L        R1,MAJFMIN            GET ADDR OF 1ST MINOR
         USING    MIN,R1                MAKE MINOR ADDRESSABLE
RRTLOOP2 EQU      *
         CLC      MINNAME(4),SMCASID PREFIX OF MINOR QCB IS SMFID
         BE       RRTHVANC        BIF WE HAVE ANCHOR
         L        R1,MINNMIN      POINT TO NEXT MINOR QCB
         LTR      R1,R1           IS THERE ONE?
         BNZ      RRTLOOP2        BIF YES
         BAL      R5,RRTUNLOK     OTHERWISE, LEAVE QUIETLY
RRTHVANC EQU      *
         DROP     R2
         L        R3,MINNAME+4    GET CSA AREA ANCHOR (SMFID +4)
         DROP     R1
RRTUNLOK EQU      *
         SETLOCK  RELEASE,TYPE=CMS,REGS=USE,RELATED=A
         SETLOCK  RELEASE,TYPE=LOCAL,REGS=USE,RELATED=A
         LTR      R6,R6      ANY ERRORS?
         BZ       RRTHAVIT   BIF NOT
         BAL      R14,RRTERROR     OTHERWISE, SIGNAL IT
RRTHAVIT EQU      *
         LTR      R5,R5            COULD WE FIND POINTER?
         BNZ      RRTDEQ           BIF NOT
         AGO      .RESUMEC
.SP3C    ANOP
         L        R3,GETPARM       GET CURRENT SIZE OF WORK AREA
         LA       R3,0(,R3)        CLEAR HI-BYTE
         LA       R2,WORKEND-EXITCORE GET SIZE IN ACTIVE USE
         SR       R3,R2            CALC SIZE OF AREA NOT IN USE
         SRL      R3,3             ROUND DOWN TO NEXT DOUBLEWORD
         SLL      R3,3
         LA       R2,WORKEND+7     FIND NEXT DOUBLEWORD BOUNDARY
         SRL      R2,3
         SLL      R2,3
         ST       R2,RIBADDR       STOW FOR LATER USE
         GQSCAN   AREA=((R2),(R3)),                                    *
               SCOPE=LOCAL,                                            *
               REQLIM=MAX,                                             *
               RESNAME=(REQNAME),                                      *
               MF=(E,ENQGQSCN)
         B        RRTWTG1(R15)    USE R15 FOR WTG TABLE
RRTWTG1  EQU      *
         B        RRTFNDRB        RC=0; NOW FIND REQUEUER ANCHOR
         BAL      R14,RRTERROR    RC=4; NO RNAME VALUES - MUST BE >= 1
         BAL      R14,RRTERROR    RC=8; GQSCAN REPLY AREA TOO SMALL
         BAL      R14,RRTERROR    RC=12; ABNORMAL CONDITION
         BAL      R14,RRTERROR    RC=16; INVALID SYSNAME VALUE
RRTFNDRB EQU      *
         LR       R2,R0           PICK APART VALUES RETURNED BY GQSCAN
         SLL      R2,16           EXTRACT LENGTH OF AN RIBE
         SRL      R2,16
         LR       R3,R0
         SRL      R3,16           EXTRACT LENGTH OF RIB FIXED PORTION
         L        R4,RIBADDR      GET ADDR OF REPLY AREA
         L        R5,16(0,0)      GET ADDR OF CVT
         USING    CVT,R5          MAKE IT ADDRESSABLE
         L        R5,CVTSMCA      GET ADDR OF SMCA
         USING    SMCABASE,R5
RRTCHK01 EQU      *
         USING    RIB,R4
         L        R7,RIBNRIBE     GET # OF RIBE'S FOR THIS RIB
         LH       R0,RIBVLEN      GET SIZE OF VARIABLE-LENGTH PORTION
         AR       R4,R3           BUMP TO VARIABLE PORTION
         USING    RIBVAR,R4
         CLC      SMCASID(4),RIBRNAME IS REQUEUER CSA-BASED ANCHOR OK?
         BE       RRTHAVIT        BIF WE FOUND THE SUCKER
         SR       R6,R6           BOUNCE TO NEXT RIB
         MR       R6,R2           CALC SIZE TAKEN BY CURRENT RIBE'S
         AR       R4,R7           ADD SIZE TAKEN BY RIBE'S
         AR       R4,R0           ADD SIZE TAKEN BY VARIABLE PORTION
         BCT      R1,RRTCHK01     LOOP UNTIL ALL RIB'S ARE CHECKED
         B        RRTDEQ          BRANCH IF WE COULDN'T FIND CSA PTR
RRTHAVIT EQU      *
         L        R3,RIBRNAME+4   GET POINTER TO AREA IN CSA
.RESUMEC ANOP
         USING    CROSSMEM,R3     MAKE CSA-BASED WORK AREA ADDRESSABLE
         XC       CRMEXECB,CRMEXECB INITIALIZE OUR ECB
         L        R1,16(0,0)      GET CVT ADDRESS
         USING    CVT,R1          MAKE CVT ADDRESSABLE
         L        R1,CVTTCBP      GET NEXT/CURR TCB/ASCB PTRS
         L        R1,12(,R1)      GET ADDR OF CURR (OUR) ASCB
         DROP     R1
         ST       R1,CRMEXASC      STOW THIS ADDR IN CSA AREA
         L        R1,CEPAADDR     ADDR OF COMM EXIT PARM AREA
         USING    COMMEXIT,R1       MAKE IT ADDRESSABLE
         MVC      CRMONJES(2),CEPIDJES OUR JES JOB #
         MVC      CRMONNAM(8),CEPJOBN OWNER'S JOBNAME
         DROP     R1                NO LONGER NEED CEPA
         XC       CRMHDSN(CRMONJES-CRMHDSN),CRMHDSN CLEAR THE REST
         MVI      CRMFLAGS,CRMACTRT IEFACTRT IS MAKING THE REQUEST
         L        R1,16(0,0)        GET CVT ADDRESS
         USING    CVT,R1            MAKE IT ADDRESSABLE
          L       R2,CRMRQASC     GET ADDR OF REQUEUER'S ASCB
         POST     CRMRQECB,0,ASCB=(2),ERRET=CVTBRET,MF=(E,POSTMAC)
         DROP     R1             WAKE UP REQUEUER TASK
         WAIT     1,ECB=CRMEXECB    WAIT UNTIL REQUEUER DONE
         DROP     R3
RRTDEQ   EQU      *
         DEQ      (ENQQNAME,ENQRNAME,8,SYSTEM),RET=HAVE,MF=(E,ENQMACRO)
         B        RRTEXIT
RRTERROR EQU      *
         OI       ERRORSW,ERREQUE  ERROR IN REQUEUE RTN
RRTEXIT  EQU      *
         BR       R10
         TITLE    'IEFACTRT - REQUEUER ROUTINE CONSTANTS'
RRT01SEC DC       A(1*100)         1 SECOND (IN 100THS OF SECS)
REQNAME  DC       CL8'REQUEUER'    QNAME FOR GQSCAN MACRO
         LTORG
         DROP     R11
         TITLE    'IEFACTRT - BATCH SMF TYPE 30 PROCESSOR'
JT30RTN  DS       0H
***************************************************************
*
*      BATCH JOB SMF TYPE 30 PROCESSOR
*
***************************************************************
         USING    JT30RTN,R11
         BR       R10
         LTORG
         DROP     R11
         TITLE     'IEFACTRT - TSO SESSION SMF TYPE 34 PROCESSOR'
TT34RTN  DS        0H
***********************************************************************
*
*        TSO SESSION SMF TYPE 34 RECORD PROCESSOR
*
***********************************************************************
         USING     TT34RTN,R11   USE R11 FOR ROUTINE BASE REG.
         BR        R10            RETURN
         LTORG
         DROP      R11
         TITLE     'IEFACTRT - TSO SESSION SMF TYPE 35 PROCESSOR'
TT35RTN  DS        0H
***********************************************************************
*
*        TSO SESSION SMF TYPE 35 RECORD PROCESSOR
*
***********************************************************************
         USING     TT35RTN,R11   USE R11 FOR ROUTINE BASE REG.
         BR        R10            RETURN
         LTORG
         DROP      R11
         TITLE     'IEFACTRT - TSO SMF TYPE 30 PROCESSOR'
TT30RTN  DS        0H
*****************************************************************
*
*        TSO SESSION SMF TYPE 30 PROCESSOR
*
*****************************************************************
         USING     TT30RTN,R11
         BR       R10
         LTORG
         DROP     R11
         TITLE    'IEFACTRT - TSO SMF TYPE 32 PROCESSOR'
TT32RTN  DS       0H
***************************************************************
*
*        TSO SESSION SMF TYPE 32 PROCESSOR
*
***************************************************************
         USING    TT32RTN,R11
         BR       R10
         LTORG
         DROP     R11
         TITLE    'IEFACTRT - SYSTEM TASK SMF TYPE 4 PROCESSOR'
ST4RTN   EQU      *
****************************************************************
*
*        SYSTEM TASK SMF TYPE 4 PROCESSOR
*
****************************************************************
         USING    ST4RTN,R11
         BR       R10
         LTORG
         DROP     R11
         TITLE    'IEFACTRT - SYSTEM TASK SMF TYPE 5 PROCESSOR'
ST5RTN   DS       0H
****************************************************************
*
*        SYSTEM TASK SMF TYPE 5 PROCESSOR
*
****************************************************************
         USING     ST5RTN,R11
         BR        R10
         LTORG
         DROP      R11
         TITLE     'IEFACTRT - SYSTEM TASK SMF TYPE 30 PROCESSOR'
ST30RTN  DS        0H
*********************************************************************
*
*        SYSTEM TASK SMF TYPE 30 PROCESSOR
*
********************************************************************
         USING    ST30RTN,R11
         BR       R10
         LTORG
         DROP     R11
         END
