         TITLE     'ACCTLOAD - CSA ACCOUNTING AREA'
         ACCTABLE
         TITLE     'ACCTLOAD - LAYOUT OF INPUT RECORDS'
         ACCTINPT
         TITLE     'ACCTLOAD - BINARY TABLE ROUTINE DSECT'
         TABLE
         TITLE     'ACCTLOAD - DATA CONTROL BLOCK(DCB) DSECT'
         DCBD      DSORG=PO,DEVD=DA
         TITLE     'ACCTLOAD - SYSTEM MGMT CONTROL AREA(SMCA)'
         IEESMCA
         TITLE     'ACCTLOAD - COMMUNICATIONS VECTOR TABLE(CVT)'
         CVT       DSECT=YES
         TITLE     'ACCTLOAD - MAIN ROUTINE'
ACCTLOAD CSECT
***********************************************************************
*                                                                     *
*        AUTHOR. D. HALBIG.                                           *
*        DATE-WRITTEN. JULY 1979.                                     *
*        INSTALLATION: U.S. SENATE COMPUTER CENTER                    *
*        FUNCTION:                                                    *
*        . LOAD & EDIT CHECK ACCOUNTING CODES FOR SCC                 *
*              COMPUTER ACCOUNTING SYSTEM                             *
*              . USER CODES                                           *
*              . SECTION CODES                                        *
*              . FUNCTION CODES                                       *
*              . RUN TYPE CODES                                       *
*              . APPLICATION CODES                                    *
*              . JOB SCHEDULER RESOURCE LIMIT TABLE                   *
*              . JOB ROUTING PROGRAM NAME TABLE                       *
*              . SMF INTERVAL ACCOUNTING ELEGIBILITY LIST
*                                                                     *
*        DETAIL LOGIC                                                 *
*                                                                     *
*        . USE 'BLDL' TO LOCATE THE DIRECTORY ENTRY FOR EACH OF THE   *
*              NECESSARY TABLES                                       *
*                                                                     *
*        . CODES FOR EACH CODE GROUP ARE LOADED INTO COLLATING        *
*              SEQUENCE USING A BINARY SEARCH WITH TABLE INSERTION    *
*              CAPABILITY.                                            *
*                                                                     *
*         . AFTER ALL CODE GROUPS ARE IN TABLES, CHAIN TO 'CVTUSER'   *
*           FIELD, EITHER CHECK FOR AN EXISTING GETMAINED AREA (NON-  *
*           ZERO VALUE) OR GETMAIN AN AREA FROM SUBPOOL 241 BIG       *
*           ENOUGH TO HOLD TABLES AND ANCHOR THIS AREA IN THE         *
*           CVTUSER FIELD.                                            *
*                                                                     *
*        .  LOAD CODE GROUPS INTO THIS GETMAINED AREA                 *
*                                                                     *
*        . ISSUE WTO'S TO CONFIRM SUCCESSFUL/UNSUCCESSFUL             *
*              AREA LOAD                                              *
*                                                                     *
*        MODIFICATIONS:                                               *
*          12/18/81(DGH)                                              *
*            . RESTRUCTURE CODE TO PERMIT CODE EXPANSION              *
*              (FIX ADDRESSABILITY PROBLEMS).                         *
*            . CHANGE WHOLE CONCEPT OF ACCOUNTING AREA                *
*              LOADED BY THIS ROUTINE.  (WAS PREVIOUSLY               *
*              2K BYTES OF STORAGE SET ASIDE IN A TYPE 1              *
*              SVC - WAS CONVERTED TO A GETMAINED AREA IN CSA         *
*              - SUBPOOL 241.  THIS GETMAINED AREA IS ANCHORED        *
*              IN THE CVTUSER FIELD.)                                 *
*            . ADD JOB SCHEDULER RESOURCE LIMIT TABLE AS AN           *
*              ADDITIONAL TABLE.                                      *
*                                                                     *
*          06/18/82(DGH) -                                            *
*            . ADD JOB ROUTING PROGRAM NAME FACILITY (GIVES A JOB     *
*              CPU AFFINITY BASED ON PROGRAMS TO BE RUN).             *
*          01/28/83(DGH) -                                            *
*            . ADD SMF INTERVAL ACCOUNTING ELEGIBLITY LIST. FOR       *
*              CAPACITY PLANNING PUPOSES, SMF RECORD TYPE 30, SUBTYPES*
*              2 & 3 ARE NICE TO HAVE.  HOWEVER, THEY ARE REALLY      *
*              NEEDED FOR SELECTED WORKLOADS (CICS, DATABASE, ROSCOE, *
*              AND SELECTED SYSTEM TASKS, SUCH AS JES2 AND MSX). THE  *
*              LIST OF ELIGIBLE PROGRAMS READ IN HERE DO NOT HAVE     *
*              THEIR INTERVAL ACCOUNTING RECORDS CANCELLED BY IEFU83. *
*              ALL OTHERS ARE, RESULTING IN A SIGNIFICANT DROP IN MICS*
*              OVERHEAD AND SMF DATA VOLUME.                          *
*              IN ADDITION, REVISE CODE USING BINARY TABLE LOOKUPS TO *
*              CONSOLIDATE ALL BINARY LOOKUP REQUIREMENTS UNDER 1     *
*              UTILITY ROUTINE.                                       *
*                                                                     *
*                                                                     *
*      REGISTER           USAGE                                       *
*        R15         ENTRY ADDRESS/RETURN CODE                        *
*        R14         RETURN ADDRESS/ERROR SIGNAL ADDRESS              *
*        R13         SAVEAREA/WORKAREA                                *
*        R12         MAIN ROUTINE BASE REGISTER                       *
*        R11         SUBROUTINE BASE REGISTER                         *
*        R10         SUBROUTINE RETURN ADDRESS                        *
*        R9          ADDRESS OF INPUT RECORD DURING                   *
*                    LOAD OF INTERNAL TABLES; ADDRESS OF AREA IN      *
*                    CSA WHEN LOADING THIS ACCOUNTING AREA.           *
*        R8          RETURN ADDRESS FOR FUNCTIONS                     *
*        R7          ADDRESS OF TABLE BEING WORKED ON BY INPUT/       *
*                    ACCOUNTING AREA LOAD ROUTINES                    *
*        R6-R0       WORK REGISTERS                                   *
*                                                                     *
***********************************************************************
         REGEQU
         SAVE      (14,12),,ACCTLOAD-&SYSDATE-&SYSTIME
         LR        R12,R15        R12 WILL BE BASE
         USING     ACCTLOAD,R12
         ST        R13,SAVEAREA+4 SAVE AREA CHAINING
         LA        R2,SAVEAREA
         ST        R2,8(,R13)
         LR        R13,R2
         L         R1,0(,R1)       GET POINTER TO PARM FIELD INFO
         ST        R1,PARMADDR
         L         R11,=A(INITRTN)
         BALR      R10,R11        DO INITIALIZATION
         TM        ERRSW1,ERRINIT  ERROR IN INITIALIZATION RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(APPLRTN)
         BALR      R10,R11        APPLICATION CODE RTN
         TM        ERRSW1,ERRAPPL  ERROR IN APPLICATION CODE RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(FUNCRTN)
         BALR      R10,R11        FUNCTION CODE RTN
         TM        ERRSW1,ERRFUNC  ERROR IN FUNCTION CODE RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(RTYPRTN)
         BALR      R10,R11        RUN-TYPE CODE RTN
         TM        ERRSW1,ERRRTYP  ERROR IN RUN TYPE CODE RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(SECTRTN)
         BALR      R10,R11        SECTION CODE RTN
         TM        ERRSW1,ERRSECT  ERRORS IN SECTION CODE RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(USERRTN)
         BALR      R10,R11        USER CODE RTN
         TM        ERRRTN,ERRUSER ERROR IN USER-CODE RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(LIMITRTN)
         BALR      R10,R11        RESOURCE LIMIT ROUTINE
         TM        ERRSW1,ERRLIMIT ERROR IN RESOURCE LIMIT RTN?
         BO        ERRRTN         BIF YES
         L         R11,=A(JOBRRTN) JOB ROUTING ROUTINE
         BALR      R10,R11
         TM        ERRSW2,ERRJOBR ERROR IN JOB ROUTING ROUTINE?
         BO        ERRRTN         BIF YES
         L         R11,=A(IACTRTN)
         BALR      R10,R11        SMF INTERVAL ACCOUNTING ELIGIBLITY
         TM        ERRRTN,ERRIACT ERROR IN INT ACCT ELIGIBILITY RTN
         BO        ERRRTN         BIF YES
         L         R11,=A(LOADRTN)
         BALR      R10,R11        LOAD RTN
         TM        ERRSW1,ERRLOAD  ERROR IN LOAD RTN?
         BO        ERRRTN         BIF YES
         L         R1,PARMADDR    NOW LOOK FOR 'DIAGNOSE'
         CLC       0(2,R1),=H'8'  CORRECT LENGTH?
         BNE       MAINCLOS       BIF NOT
         CLC       2(8,R1),=CL8'DIAGNOSE'  CORRECT TEXT?
         BE        ERRDIAG        BIF YES
MAINCLOS EQU       *
         CLOSE     (SYSLIB,,SYSPRINT)    CLOSE FILES & GO HOME
         SR        R15,R15        SET LEGITIMATE RETURN CODE
         L         R13,SAVEAREA+4 CALLER'S SAVE AREA PTR
         RETURN    (14,12),RC=(15) 'BYE
         SPACE     3
ERRRTN   EQU       *
         STM       R0,R15,ERRREGS DO THIS FOR DIAGNOSTICS
         WTOR      'ACCTLOAD-01-A - ACCOUNTING CODES NOT LOADED - ENTERX
                ''Y'' TO CONFIRM',REPLY,1,REPLYECB,ROUTCDE=1,DESC=2
         WAIT      ECB=REPLYECB
         CLI       REPLY,C'Y'     CORRECT REPLY?
         BNE       ERRRTN         BIF NOT: TRY AGAIN
ERRDIAG  EQU       *
         OPEN      (SNAPDUMP,(OUTPUT))
         TM        SNAPDUMP+DCBOFLGS-IHADCB,DCBOFOPN OPEN OK?
         BO        ERROPNOK       BIF YES
         WTO       'ACCTLOAD-02-I - OPEN FAILED FOR SNAPDUMP DD STMT', X
               ROUTCDE=2,DESC=3
         B         ERRETURN
ERROPNOK EQU       *
         L         R1,16          GET ADDR OF CVT
         USING     CVT,R1         MAKE IT ADDRESSABLE
         L         R1,CVTUSER     GET OUR FIELD
         LA        R1,0(,R1)      CLEAR HI-BYTE
         DROP      R1
         ST        R1,ERRLIST1    BEGIN ADDR
         A         R1,=A(ACSIZE)  SIZE OF WHOLE AREA
         S         R1,=A(8)       GET WITHIN AREA
         ST        R1,ERRLIST2    END ADDR
         OI        ERRLIST2,X'80' END-OF-LIST
ERRSNAP  SNAP  PDATA=(ALL),DCB=SNAPDUMP,LIST=ERRLIST
         CLOSE     (SNAPDUMP)
ERRETURN EQU       *
         SR        R15,R15        LEGAL RETURN CODE
         L         R13,SAVEAREA+4
         RETURN    (14,12),RC=(15)
         TITLE     'ACCTLOAD - PARM CARD READ ROUTINE'
READRTN  DS        0H
***********************************************************************
*        READ ROUTINE FOR ACCOUNTING CODE FILES
***********************************************************************
         LM        R2,R4,READPARM GET CURR, INCR & END PTRS FOR DEBLK
         AR        R2,R3          INCREMENT CURRENT REC PTR
         CR        R2,R4          HAVE WE GONE BEYOND LIMIT OF BUFFER?
         BL        READDBLK       BIF NOT; DEBLOCK RECORD
         L         R2,READBUFA    GET ADDR OF AREA SET ASIDE FOR BUFFER
         READ      READDECB,SF,SYSLIB,(2),'S' READ A BLOCK
         CHECK     READDECB       CHECK READ OPERATION
         LH        R4,SYSLIB+DCBLRECL-IHADCB GET PHYS REC LGTH FROM LRE
         AR        R4,R2          R4 -> END OF CURR. BUFFER
         STM       R2,R4,READPARM STOW PTRS
         SR        R4,R2          LENGTH OF CURRENT BUFFER
         LR        R5,R4          SET UP FOR DIVIDE
         SR        R4,R4
         DR        R4,R3          IS BUFFER EVEN MULT OF 80?
         LTR       R4,R4
         BZR       R8             BIF YES (REMAINDER = 0)
         B         8(,R8)         RC=8: ERROR IN BLKSIZE
READDBLK EQU       *
         STM       R2,R4,READPARM STOW READ PARMS
         BR        R8             RC=0; READ OK
READEOF  EQU       *
         B         4(,R8)         RC=4: END-OF-FILE
         TITLE     'ACCTLOAD - MESSAGE WRITER ROUTINE'
WRITERTN EQU       *
***********************************************************************
*        SYSPRINT MESSAGE WRITER RTN
***********************************************************************
         L         R7,WRITECNT    # OF LINES ON CURRENT PAGE
         C         R7,=F'55'      TIME FOR PAGE EJECT?
         BNH       WRITEREG       BIF NOT
         AP        WRITEPGE,=P'10' INCR PAGE COUNTER
         ED        WRITEHPG-1(6),WRITEPGE STOW IN DISPLAY LINE
         LA        R7,0           RESET LINE COUNTER
         MVI       WRITECC,C'-' TRIPLE SPACE NEXT DETAIL LINE
         PUT   SYSPRINT,WRITEHDR  PRINT HEADER
         MVC       WRITEHPG,=X'206B202120' RESET PATTERN FOR 'ED' INSTR
WRITEREG EQU       *
         CLI       WRITECC,C' '   SINGLE SPACE
         BNE       WRITEDBS       BIF NOT SINGLE SPACE
         LA        R7,1(,R7)      COUNT 1 LINE
         B         WRITEPUT
WRITEDBS EQU       *
         CLI       WRITECC,C'0'   DOUBLE SPACE?
         BNE       WRITETRS       BIF NOT
         LA        R7,2(,R7)      COUNT 2 LINES
         B         WRITEPUT
WRITETRS EQU       *
         CLI       WRITECC,C'-'   TRIPLE SPACE?
         BNE       WRITEPUT
         LA        R7,3(,R7)      COUNT THREE LINES
         B         WRITEPUT
WRITEPUT EQU       *
         PUT       SYSPRINT,WRITELNE
         MVI       WRITELNE,C' '  WIPE OUT LINE & CARRIAGE CONTROL
         MVC       WRITELNE+1(132),WRITELNE
         ST        R7,WRITECNT
WRITEXIT EQU       *
         BR        R8
         TITLE     'ACCTLOAD - BINARY SEARCH/INSERT ROUTINE'
         TBINSRCH
         TITLE     'ACCTLOAD - SELF-DEFINING CONSTANTS'
         LTORG
         TITLE     'ACCTLOAD - GENERAL WORK AREA'
***********************************************************************
*
*        PROGRAM WORK AREA
*
***********************************************************************
SAVEAREA DC        18F'0'
ERRREGS  DC        16F'0'         SAVE AREA FOR DIAGNOSTICS
LASTUSED DC        A(0)           ADDR OF LAST-USED BYTE IN ACCT AREA
PARMADDR DC        A(0)           ADDR OF PARM (IF ANY)
ERRLIST  DS        0A             FOR SNAP
ERRLIST1 DC        A(0)
ERRLIST2 DC        A(0)
READBUFL DC        F'0'           LENGTH OF READ BUFFER
READBUFA DC        A(0)           ADDR OF READ BUFFER
READPARM DC        3F'0'          PTRS USED FOR DEBLOCKING ACCT'ING REC
PACKWK   DC        D'0'           WORK AREA
HOLDMASK DC        XL1'00'        HOLD AREA FOR PGM NAME CPU AFF. MASK
JRTB#CPU DC        H'0'           # OF SMF ID'S LOADED
JRTBCPUS DC        7CL4'    '     SMFID VALUES
TRANTAB  DS        0D             ALIGN FOR EASIER DEBUG
         DC        193XL1'01',9XL1'00',7XL1'01',9XL1'00',8XL1'01'
         DC        8XL1'00',6XL1'01',10XL1'00',6XL1'01'
TESTAREA DC        CL80' '
TABLEPAT DC        64C'*',C' ',128C'*',9C'A',7C'*',9C'A',8C'*',8C'A'
         DC        6C'*',10C'N',6C'*'
ERRSW1    DC        XL1'00'        PROCESSOR RTN ERROR INDICATORS
ERRINIT  EQU   X'01'              INITIALIZATION RTN INDIC
ERRAPPL  EQU   X'02'              APPLICATION CODE LOAD RTN ERROR
ERRFUNC  EQU   X'04'              FUNCTION CODE LOAD RTN ERROR
ERRRTYP  EQU   X'08'              RUN TYPE CODE LOAD RTN ERROR
ERRSECT  EQU   X'10'              SECTION CODE LOAD RTN ERROR
ERRUSER  EQU   X'20'              USER CODE LOAD RTN ERROR
ERRLOAD  EQU   X'40'              LOAD RTN ERROR
ERRLIMIT EQU   X'80'              JOB SCHEDULER LIMIT RTN ERROR
ERRSW2   DC        XL1'00'        PROCESSOR ROUTINE ERROR INDICATORS
ERRJOBR  EQU   X'01'              JOB ROUTING ROUTINE ERROR
ERRIACT  EQU   X'02'              SMF INTERVAL ACCOUNTING ELIGIBILITY
REPLY    DC        CL1' '         ERROR MSG CONFIRMATION
REPLYECB DC        A(0)           ECB FOR WTOR
WRITECNT DC        F'60'          LINE COUNTER (RESETS @ 55)
WRITEPGE DC        PL3'0'         PAGE COUNTER
WRITELNE DS        0CL133
WRITECC  DC        CL1' '         CARRIAGE CONTROL POSITION
WRITEXT  DC        CL132' '       TEXT
         ORG       WRITEXT+80
WRITERR  DS        CL52    AREA FOR ERROR MESSAGES
WRITEHDR DS        0CL133         HEADER LINE
WRITEHCC DC        CL1'1'         HEADER CARRIAGE CONTROL
WRITEHTX DC        CL100' '       HEADER TEXT
         DC        CL3' '
         DC        X'4021204B202020404020207A20207A2020'
         DC        CL7'  PAGE '
WRITEHPG DC        XL5'206B202120' PAGE COUNTER DISPLAY AREA
         TITLE     'ACCTLOAD - MESSSAGES'
MSGDUPR  DC    CL52'**** ACCTLOAD - DUPLICATE RECORD ****'
MSGOVFL  DC    CL52'**** ACCTLOAD - TABLE FULL - ENTRY CAUSED OVERFLOW X
               ****'
MSGINVLD DC    CL52'**** ACCTLOAD - INVALID RECORD ****'
         TITLE     'ACCTLOAD - BLDL PARM LIST'
***********************************************************************
*
*        PARM LIST OF MEMBERS FROM SYS1.USER.PARMLIB
*              EACH MEMBER CONTAINS A LIST OF SPECIFIC ACCOUNTING CODES
*                  SP1ACODE       APPLICATION CODES
*                  SP1FCODE       FUNCTION CODES
*                  SP1JOBRT       JOB ROUTING PROGRAM NAMES
*                  SP1RCODE       RUN TYPE CODES
*                  SP1RSLMT       JOB SCHEDULER RESOURCE LIMITS
*                  SP1SCODE       SECTION CODES
*                  SP1UCODE       USER CODES
*
*        IF THIS PROGRAM FAILS IN ITS ATTEMPT TO LOAD ANY ONE OF THE
*              MEMBERS, THE WHOLE PROGRAM IS FAILED
*
***********************************************************************
         CNOP      2,8
BLDLLIST EQU       *
BLDL#END DC        AL2(8)         # OF MEMBER ENTRIES
BLDLNMEL DC        AL2(BLDLNMF-BLDLNMA) LENGTH PER ENTRY
BLDLNMA  DC        CL8'SP1ACODE'
BLDLTTRA DC        XL3'00'        AREA TO STOW TTR & K VALUES FROM DIR
BLDLKA   DC        XL1'00'
BLDLNMF  DC        CL8'SP1FCODE'  FUNCTION CODES
BLDLTTRF DC        XL3'00'
BLDLKF   DC        XL1'00'
BLDLNMI  DC        CL8'SP1IACCT'  SMF INTERVAL ACCOUNTING FILTER LIST
BLDLTTRI DC        XL3'00'
BLDLKI   DC        XL1'00'
BLDLNMP  DC        CL8'SP1JOBRT'  PROGRAM PROCCSSOR AFFINITY LIST
BLDLTTRP DC        XL3'00'
BLDLKP   DC        X'00'
BLDLNMR  DC        CL8'SP1RCODE'  RUN TYPE CODES
BLDLTTRR DC        XL3'00'
BLDLKR   DC        XL1'00'
BLDLNML  DC        CL8'SP1RSLMT'  JOB SCHEDULER RESOURCE LIMITS
BLDLTTRL DC        XL3'00'
BLDLKL   DC        XL1'00'
BLDLNMS  DC        CL8'SP1SCODE'  SECTION CODES
BLDLTTRS DC        XL3'00'
BLDLKS   DC        XL1'00'
BLDLNMU  DC        CL8'SP1UCODE'  USER CODES
BLDLTTRU DC        XL3'00'
BLDLKU   DC        XL1'00'
BLDLEND  EQU       *
         TITLE     'ACCTLOAD - DCB''S'
SYSLIB   DCB       DSORG=PO,MACRF=(R),EODAD=READEOF,RECFM=U,           X
               DDNAME=SYSLIB
         SPACE     2
SYSPRINT DCB       DSORG=PS,MACRF=(PM),LRECL=133,BLKSIZE=133,RECFM=FBA,X
               DDNAME=SYSPRINT
         SPACE     3
SNAPDUMP DCB       DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,LRECL=125,X
               DDNAME=SNAPDUMP
         TITLE     'ACCTLOAD - IN-CORE TABLES USED IN LOAD PROCESS'
**********************************************************************
*
*        THE ELEMENTS FOR ALL THE TABLES IN THIS AREA AREA EXACT
*        IMAGES OF THE ELEMENTS IN THE ACCOUNTING AREA ANCHORED OFF
*        THE CVT (CVTUSER FIELD).  ANY CHANGES TO THE CVT-ANCHORED
*        ACCOUNTING AREA MUST BE REFLECTED IN CHANGES TO THE ELEMENTS
*        IN THE TABLES BELOW AS WELL.
*
**********************************************************************
APPLTABL DS        0D
APPLMAX# EQU       100            MAX # OF APPLICATION CODES PERMITTED
         DC        A(APPLMAX#)    BIN. SEARCH - MAX ENTRIES PERMITTED
         DC        A(0)           BIN. SEARCH - CURR # OF ENTRIES
         DC        A(0)           BIN. SEARCH - # OF OVERFLOW ENTRIES
         DC        A(1)           BIN. SEARCH - BEGIN. REC # FOR SEARCH
         DC        A(L'APTBCODE-1)  BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(APTBBT-APTBCODE) BIN SRC - ELEMENT LENGTH
         DC        X'01',XL3'00'  CONTROL FLAGS
APTBCODE DC        CL2'  '        APPLICATION CODE
APTBFLAG DC        XL1'00'        FLAGS
APTBWORQ EQU       X'01'          WORK ORDER REQUIRED
APTBUSRC EQU       X'02'          USER CODE MUST BE IN JOBNAME
APTBPRIS DC        CL1' '         PRIMARY SECTION CODE
APTBBT   EQU       *
         DC        (APPLMAX#*(APTBBT-APTBCODE))X'00'
APTBEND  EQU       *
*
FUNCTABL DS        0D
FUNCMAX# EQU       50             MAX # OF FUNCTION CODES PERMITTED
         DC        A(FUNCMAX#)    BIN. SEARCH - MAX ENTRIES PERMITTED
         DC        A(0)           BIN. SEARCH - CURR. # OF ENTRIES
         DC        A(0)           BIN. SEARCH - CURR. # OF OVFLOW ENT.
         DC        A(1)           BIN. SEARCH - BEGIN. REC FOR SEARCH
         DC        A(L'APTBCODE-1) BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(FNTBBT-FNTBCODE) BIN SRC - ELEMENT LENGTH
         DC        X'01',XL3'00'  BIN. SEARCH - CONTROL FLAGS
FNTBCODE DC        CL2'  '        FUNCTION CODE
FNTBBT   EQU       *
         DC        (FUNCMAX#*(FNTBBT-FNTBCODE))X'00'
FNTBEND  EQU       *
*
RTYPTABL DS        0D
RTYPMAX# EQU       25             MAX # OF RUN TYPE CODES PERMITTED
         DC        A(RTYPMAX#)    BIN. SEARCH - MAX ENTRIES PERMITTED
         DC        A(0)           BIN. SEARCH - CURR. # OF ENTRIES
         DC        A(0)           BIN. SEARCH - CURR. # OF OVFLOW ENT.
         DC        A(1)           BIN. SEARCH - BEGIN. REC FOR SEARCH
         DC        A(L'RTTBCODE-1) BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(RTTBBT-RTTBCODE) BIN SRC - ELEMENT LENGTH
         DC        XL1'01',XL3'00' BIN SEARCH - CONTROL FLAGS
RTTBCODE DC        CL1' '         RUN TYPE CODE
RTTBFLAG DC        XL1'00'        FLAGS
RTTBOPS  EQU       X'01'          'OPERATIONS ONLY'
RTTBTEST EQU       X'02'          'TEST' CATAGORY RUN TYPE CODE
RTTBWONR EQU       X'04'          WORK WORDER # NOT REQ'D
RTTBBT   EQU       *
         DC        (RTYPMAX#*(RTTBBT-RTTBCODE))X'00'
RTTBEND  EQU       *
*
SECTABLE DS        0D
SECTMAX# EQU       20             MAX # OF SECTION CODES PERMITTED
         DC        A(SECTMAX#)    BIN. SEARCH - MAX # OF ENTRIES
         DC        A(0)           BIN. SEARCH - CURR # OF ENTRIES
         DC        A(0)           BIN. SEARCH - CURR # OF OVFLOW ENT.
         DC        A(1)           BIN. SEARCH - BEGIN. REC FOR SEARCH
         DC        A(L'SCTBCODE-1) BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(SCTBBT-SCTBCODE) BIN SRC - ELEMENT LENGTH
         DC        XL1'01',XL3'00' BIN SEARCH - CONTROL FLAGS
SCTBCODE DC        CL1' '         SECTION CODE
SCTBCAT  DC        CL1' '         SECTION CODE CATAGORY
SCTBBT   EQU       *
         DS        (SECTMAX#*(SCTBBT-SCTBCODE))X'00'
SCTBEND  EQU       *
*
USERTABL DS        0D
USERMAX# EQU       300            MAX # OF USER CODES
         DC        A(USERMAX#)    BIN. SEARCH - MAX # OF TABLE ELEMENTS
         DC        A(0)           BIN. SEARCH - CURR # OF ENTRIES
         DC        A(0)           BIN. SEARCH - CURR # OF OVFLOW ENT.
         DC        A(1)           BIN. SEARCH - BEGIN. REC FOR SEARCH
         DC        A(L'USTBCODE-1) BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(USTBBT-USTBCODE) BIN SRC - ELEMENT LENGTH
         DC        XL1'01',XL3'00' BIN SEARCH - CONTROL FLAGS
USTBCODE DC        CL3'   '       USER CODE
USTBFLAG DC        XL1'00'        USER CODE FLAGS
USTBF01  EQU       X'01' 'CODE MAY NOT BE USED IN ACCT
*                                 FIELD; STILL ELIGIBLE FOR JOBNAME
USTBBT   EQU       *
         DC        (USERMAX#*(USTBBT-USTBCODE))X'00'
USTBEND  EQU       *
*
RESLIMTB DS        0D
RLTBCNT  DC        H'0'   # OF ENTRIES IN TABLE
RLTBSTRT DS        0D
RLTBCLAS DS        CL1    ASSIGNED JOB CLASS
RLTBFLAG DS        XL1    ASST'D FLAGS
RLTBHOLD EQU   X'40'      JOB IS TO BE HELD
RLTBVEQR EQU   X'01'      VIRTUAL=REAL PERMITTED
RLTBTOUT EQU   X'02'      TIMEOUT/LINE EXCESSION STRICTLY ENFORCED
RLTBUROK EQU   X'04'      UNIT RECORD DEVICES MAY BE DIRECTLY ASSIGNED
RLTBPERF DS        H      HIGHEST PERFORMANCE GROUP # PERMITTED
RLTBVIO  DS        F      MAX VIO PER STEP, IN 1K BLOCKS
RLTBDASD DS        F      MAX REAL DASD PER STEP, IN 1K BLOCKS
RLTBCPU  DS        F      MAX CPU TIME PER JOB, IN SECONDS
RLTBCORE DS        H      MAX REGION PER STEP, IN K
RLTBLINE DS        H      MAX LINES PER JOB, IN K
RLTB6250 DS        H      MAX 6250/1600 BPI DRIVES PER STEP
RLTB1600 DS        H      MAX 1600/800 BPI DRIVES PER STEP
RLTBDUA  DS        H      MAX DIRECT UNIT ASSIGNS PER STEP
RLTBTP   DS        H      MAX T/P DEVICES PER STEP
RLTBPRTY DS        H      MAX JOB PRIORITY
         DS        H      (RESERVED)
RLTBLGTH EQU       *-RLTBSTRT    LENGTH OF ONE ELEMENT
         DS        35CL(RLTBLGTH)  TOTAL OF 36 ELEMENTS
RLTBEND  EQU       *      END OF THIS MADNESS
*
JOBRTABL DS        0D
JOBRMAX# EQU       20             MAX # OF JOB ROUTING ASSIGNMENTS
         DC        A(JOBRMAX#)    BIN. SEARCH - MAX # OF TABLE ELEMENTS
         DC        A(0)           BIN. SEARCH - CURR # OF ELEMENTS
         DC        A(0)           BIN. SEARCH - CURR # OF OVFLOW ELEM
         DC        A(1)           BIN. SEARCH - BEGIN. REC FOR SEARCH
         DC        A(L'JRTBPGMN-1) BIN SEARCH - COMPARAND LENGTH CODE
         DC        A(JRTBBT-JRTBPGMN) BIN SRC - ELEMENT LENGTH
         DC        X'01',XL3'00'  BIN. SEARCH - CONTROL FLAGS
JRTBPGMN DC        CL8'        '  PROGRAM NAME
JRTBMASK DC        XL1'00'        ELIGIBLE PROCESSOR MASK
*                         THE MASK BITS CORRESPOND TO THE SEQUENCE
*                         NUMBERS ASSIGNED TO EACH PROCESSOR IN JESPARM
         DS        XL1'00'        (RESERVED)
JRTBBT   EQU       *
         DS        (JOBRMAX#*(JRTBBT-JRTBPGMN))X'00'
JRTBEND  EQU       *
*
IACTTABL DS        0D
IACTMAX# EQU       30             MAX # OF SMF INTERVAL ELIGIBLE PGMS
         DC        A(IACTMAX#)    BIN. SEARCH. - MAX # OF TABLE ENTRIES
         DC        A(0)           BIN. SEARCH. - CURR # OF ENTRIES
         DC        A(0)           BIN. SEARCH. - CURR # OF OVFLOW ENT
         DC        A(1)           BIN. SEARCH. - BEGIN. REC FOR SEARCH
         DC        A(L'IATBCODE-1) BIN SEARCH  - COMPARAND LENGTH CODE
         DC        A(IATBBT-IATBCODE) BIN SRC  - ELEMENT LENGTH
         DC        X'01',XL3'00'  BIN. SEARCH  - CONTROL PARMS
IATBCODE DC        CL8'        '  SMF INTERVAL ACCOUNT PGM NAME
IATBBT   EQU       *
         DC        (IACTMAX#*(IATBBT-IATBCODE))X'00'
IATBEND  EQU       *
         TITLE     'ACCTLOAD - INITIALIZATION RTN'
INITRTN  DS        0H
***********************************************************************
*                                                                     *
*        INITIALIZE WORK AREAS, OPEN FILES, ETC.                      *
*                                                                     *
***********************************************************************
         USING     INITRTN,R11
         OPEN      (SYSPRINT,(OUTPUT))
         TM        SYSPRINT+DCBOFLGS-IHADCB,DCBOFOPN OPEN OK?
         BO        INITOPN1       BIF YES
         WTO       'ACCTLOAD-03-W - SYSPRINT OPEN FAILED',ROUTCDE=2,   X
               DESC=3
         BAL       R14,INITERR    SET RET. ADDR
INITOPN1 EQU       *
         OPEN      (SYSLIB,(INPUT))
         TM        SYSLIB+DCBOFLGS-IHADCB,DCBOFOPN OPEN OK?
         BO        INITOPN2       BIF YES
         WTO       'ACCTLOAD-04-W - SYSLIB OPEN FAILED',ROUTCDE=2,     X
               DESC=3
         BAL       R14,INITERR    SET ERROR RT ADDR
INITOPN2 EQU       *
         BLDL      SYSLIB,BLDLLIST LOOK FOR ACCT'ING CODE MEMBERS
         B         INITWTG(R15)   USE R15 RC FOR WTG DISP
INITWTG  B         INITBLDL       RC=0; SUCCESSFUL - ALL MEM'S FOUND
         B         INITINCM       RC=4; INCOMPLETE LIST FOUND
         B         INITBLER       RC=8; I/O ERROR OR PARM LIST ERROR
INITINCM EQU       *
         WTO       'ACCTLOAD-05-W UNABLE TO LOCATE ALL ACCOUNTING CODE X
               TABLES',ROUTCDE=2,DESC=3
         BAL       R14,INITERR    SET ERROR RT ADDR
INITBLER EQU       *
         LR        R2,R0          HOLD ONTO R0 VALUE IN R2
         WTO       'ACCTLOAD-06-W I/O ERROR WHILE ATTEMPTING TO LOCATE X
               ACCOUNTING CODE TABLES',ROUTCDE=2,DESC=3
         BAL       R14,INITERR
INITBLDL EQU       *
         SR        R0,R0
         LH        R1,SYSLIB+DCBBLKSI-IHADCB FILE BLOCKSIZE
         D         R0,=F'80'      IS BLKSIZE EVEN MULT OF 80?
         LTR       R0,R0
         BZ        INITBLKS       BIF YES
         WTO       'ACCTLOAD-07-W - INVALID DCB CHARACTERISTICS FOR ACCX
               UNTING CODES',ROUTCDE=2,DESC=3
         BAL       R14,INITERR    SET ERROR RT ADDR
INITBLKS EQU       *
         LH        R0,SYSLIB+DCBBLKSI-IHADCB BLKSIZE
         ST        R0,READBUFL    BUFFER LENGTH
         GETMAIN   R,LV=(0)       GETMAIN YOUR BUFFER
         ST        R1,READBUFA    STOW THIS ADDR
         A         R1,READBUFL    CALC BUF ENDING ADDR
         LA        R2,80
         LR        R3,R1          ESTAB INITIAL PTRS
         STM       R1,R3,READPARM DEBLOCKING PARMS
         TIME      DEC            GET CURRENT TIME & DATE
         LR        R2,R1          FLIP REGS & PUT IN EVEN-ODD PAIR
         LR        R3,R0
         SRL       R2,4           GET RID OF P.D. SIGN
         SRDL      R2,4           PREPARE FOR EDIT INSTR
         STM       R2,R3,PACKWK   EDIT INSTR IS STORAGE-ORIENTED
         ED        WRITEHTX+103(17),PACKWK+2 YY.DDD  HH:MM:SS
         L         R1,16      CVT POINTER
         USING     CVT,R1     MAKE IT ADDRESSABLE
         L         R1,CVTSMCA GET PTR TO SMCA
         USING     SMCABASE,R1 MAKE IT ADDRESSABLE
         MVC       WRITEHTX+95(4),SMCASID MOVE IN SMF ID
         DROP      R1
         BR        R10
INITERR  EQU       *
         OI        ERRSW1,ERRINIT  SIGNAL ERROR
         BR        R10
         LTORG
         DROP      R11
         TITLE     'ACCTLOAD - APPLICATION CODE READ RTN'
APPLRTN  DS        0H
***********************************************************************
*
*        READ & CHECK APPLICATION CODES
*
***********************************************************************
         USING     APPLRTN,R11
         LA        R1,60          RESET LINE COUNTER TO FORCE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'APPLICATION CODES'
         FIND      SYSLIB,BLDLTTRA,C FIND APPLICATION CODE TABLE
APPLREAD EQU       *
         BAL       R8,READRTN     READ A RECORD
         B         APPLROK        RC=0; READ OK
         B         APPLEXIT       RC=4; END-OF-FILE
         B         APPLRERR       RC=8; READ ERROR
APPLROK  EQU       *
         LR        R9,R2          (R2 -> TO INPUT RECORD)
         USING     APPLINPT,R9    GIVE INPUT REC ADDRESSABILITY
         MVC       WRITEXT(80),0(R2) MOVE TEXT TO OUTPUT AREA
         CLI       APPLINPT,C'*'  COMMENT CARD?
         BE        APPLLIST       BIF YES
         CLI       APINFLAG,C' '  IS THIS CODE VALID?
         BNE       APPLINVD       BIF INVALID
         CLC       APINPRIM,=CL2'  '   ARE WE DEALING WITH A SEC. CODE?
         BNE       APPLINVD      BIF YES
         CLI       APINWORK,APINWO CHECK FOR VALID WORK ORDER FLAGS
         BE        APPLTRT        BIF VALID
         CLI       APINWORK,APINNOWO VALID VALUES ARE 'Y' & 'N'
         BNE       APPLINVD       BIF INVALID
APPLTRT  EQU       *
         TRT       APINCODE,TRANTAB ANY NON-ALPHA-MERICS?
         BZ        APPLVALD       BIF VALID
APPLINVD EQU       *
         MVC       WRITERR(52),MSGINVLD 'INVALID RECORD ' MSG
         B         APPLLIST       BACK FOR ANOTHER
APPLVALD EQU       *
         LA        R15,APINCODE   STOW VALUE INTO TABLE
         L         R7,=A(APPLTABL) GET PARM LIST FOR TABLE
         BAL       R8,TBINSRCH    DO BINARY SEARCH
         B         APPLDUPR       RC=0; EXISTING ELEMENT FOUND
         B         APPLSTOK       RC=4; TABLE ELEMENT INSERTED OK
         B         APPLOVFL       RC=8; TABLE OVERFLOW
         B         APPLRERR       RC=12; SEARCH RTN LOGIC ERROR
*
APPLSTOK EQU       *
         CLI       APINWORK,APINWO WORK ORDER # REQUIRED?
         BNE       APPLDOSH       BIF NOT
         OI        APTBFLAG-APTBCODE(R2),APTBWORQ+APTBUSRC
APPLDOSH EQU       *
         MVC       APTBPRIS-APTBCODE(1,R2),APINSECT  PRIMARY SECT CODE
         B         APPLLIST       BACK FOR ANOTHER
*
APPLDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         APPLLIST        LIST SOURCE
*
APPLOVFL EQU       *
         MVC       WRITERR(52),MSGOVFL 'TABLE OVERFLOWED' MSG
         OI        ERRSW1,ERRAPPL  SET ERROR SWITCH & CONTINUE
         LA        R14,*+4        I HAVE TO HAVE SOMETHING HERE
         B         APPLLIST       BACK FOR MORE PUNISHMENT
*
APPLSERR EQU       *
         WTO       'ACCTLOAD-08-W - ERROR IN APPL TABLE LOAD RTN',     X
               ROUTCDE=2,DESC=3
         BAL       R14,APPLERR    SET ERROR RT ADDR
*
APPLLIST EQU       *
         BAL       R8,WRITERTN
         B         APPLREAD
*
APPLRERR EQU       *
         WTO       'ACCTLOAD-09-W - ERROR WHILE READING APPL CODE FILE'X
               ,ROUTCDE=2,DESC=3
         BAL       R14,APPLERR    SET ERROR RT ADDR
APPLERR  EQU       *
         OI        ERRSW1,ERRAPPL  SET SWITHC
APPLEXIT EQU       *
         BR        R10            RETURN TO MAIN RTN
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - FUNCTION CODE READ AND LOAD RTN'
FUNCRTN  DS        0H
***********************************************************************
*
*        READ & CHECK FUNCTION CODES
*
***********************************************************************
         USING     FUNCRTN,R11
         LA        R1,60          SET LINE COUNTER TO 60 TO FORCE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'FUNCTION CODES'
         FIND      SYSLIB,BLDLTTRF,C FIND FUNCTION CODE MEMBER
FUNCREAD EQU       *
         BAL       R8,READRTN
         B         FUNCROK        RC=0; READ OK
         B         FUNCEXIT       RC=4; END-OF-FILE
         B         FUNCRERR       RC=8; READ ERROR
FUNCROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     FUNCINPT,R9    GIVE IT ADDRESSABILITY
         MVC       WRITEXT(80),0(R2)
         CLI       FUNCINPT,C'*'  COMMENT CARD?
         BE        FUNCLIST      BIF YES
         CLI       FCINFLAG,FCINDEL INVALID RECORD?
         BE        FUNCINVD       BIF YES
         TRT       FCINCODE,TRANTAB VALID ALPHAMERIC CODESS?
         BZ        FUNCVALD       BIF YES
FUNCINVD EQU       *
         MVC       WRITERR(52),MSGINVLD 'INVALID RECORD' MSG
         B         FUNCLIST
FUNCVALD EQU       *
         LA        R15,FCINCODE   GET ADDR OF ARGUMENT TO LOAD
         L         R7,=A(FUNCTABL) ADDR OF BINARY SEARCH TABLE
         BAL       R8,TBINSRCH    DO BINARY SEARCH & INSERT
         B         FUNCDUPR       RC=0; EXISTING ELEMENT FOUND
         B         FUNCSTOK       RC=4; TABLE ELEM INSERTED OK
         B         FUNCOVFL       RC=8; TABLE OVERFLOW
         B         FUNCSERR       RC=12; ROUTINE ERROR
*
FUNCSTOK EQU       *
         B         FUNCLIST       BACK FOR ANOTHER RECORD
*
FUNCDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         FUNCLIST
*
FUNCOVFL EQU       *
         MVC       WRITERR(52),MSGOVFL 'TABLE OVERFLOWED' MSG
         B         FUNCLIST
*
FUNCLIST EQU       *
         BAL       R8,WRITERTN
         B         FUNCREAD
*
FUNCSERR EQU       *
         WTO       'ACCTLOAD-10-W - ERROR IN FUNCTION CODE TABLE LOAD RX
               TN',ROUTCDE=2,DESC=3
         BAL       R14,FUNCERR
FUNCRERR EQU       *
         WTO       'ACCTLOAD-11-W - ERROR WHILE READING FUNCTION CODE FX
               ILE',ROUTCDE=2,DESC=3
         BAL       R14,FUNCERR
FUNCERR  EQU       *
         OI        ERRSW1,ERRFUNC
FUNCEXIT EQU       *
         BR        R10
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - RUN TYPE CODE READ AND LOAD RTN'
RTYPRTN  DS        0H
***********************************************************************
*                                                                     *
*        READ & LOAD RUN TYPE CODES                                   *
*                                                                     *
***********************************************************************
         USING     RTYPRTN,R11
         LA        R1,60          RESET LINE COUNTER TO
         ST        R1,WRITECNT    FORCE PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'RUN TYPE CODES'
         FIND      SYSLIB,BLDLTTRR,C
RTYPREAD EQU       *
         BAL       R8,READRTN
         B         RTYPROK        RC=0; READ OK
         B         RTYPEXIT       RC=4; END-OF-FILE
         B         RTYPRERR       RC=4; READ ERROR
RTYPROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     RTYPINPT,R9    INPUT RECORD
         MVC       WRITEXT(80),0(R2)
         CLI       RTYPINPT,C'*' COMMENT CARD?
         BE        RTYPLIST      BIF YES
         CLI       RTINLOAD,C'1'  CHECK FOR VALID LOAD CODES (1 & 2)
         BE        RTYPTRT        BIF VALID
         CLI       RTINLOAD,C'2'
         BNE       RTYPINVD       BIF INVLID
RTYPTRT  EQU       *
         TRT       RTINCODE,TRANTAB VALID ALPHAMERIC CODE?
         BZ        RTYPVCOD       BIF YES
RTYPINVD EQU       *
         MVC       WRITERR(52),MSGINVLD 'INVALID RECORD' MSG
         B         RTYPLIST       GO BACK FOR ANOTHER RECORD
RTYPVCOD EQU       *
         LA        R15,RTINCODE   SEARCH ARGUMENT
         L         R7,=A(RTYPTABL)
         BAL       R8,TBINSRCH    BINARY SEARCH & INSERTION
         B         RTYPDUPR       RC=0; EXISTING ELEMENT FOUND
         B         RTYPSTOK       RC=4; TABLE STOW OK
         B         RTYPOVFL       RC=8; TABLE OVERFLOW
         B         RTYPSERR       RC=12; LOGIC ERROR
*
RTYPSTOK EQU       *
         CLI       RTINCODE,C'T'  'TEST JOB'?
         BNE       RTYP01         BIF NOT
         OI        RTTBFLAG-RTTBCODE(R2),RTTBTEST YES
         B         RTYPNEXT       SKIP REMAINING TESTS
*
RTYP01   EQU       *
         CLI       RTINLOAD,C'2'  OPERATIONS ONLY?
         BNE       RTYP02         BIF NOT RESTRICTED TO OPERATIONS
         OI        RTTBFLAG-RTTBCODE(R2),RTTBOPS OPERATIONS ONLY
RTYP02   EQU       *
         CLI       RTINCODE,C'X'  'WITHOUT WORK ORDER' CODE?
         BNE       RTYPNEXT       BIF NOT
         OI        RTTBFLAG-RTTBCODE(R2),RTTBWONR FLAG IF NO WO # REQ'D
RTYPNEXT EQU       *
         B         RTYPLIST
*
RTYPDUPR EQU       *
         MVC       WRITEXT(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         RTYPLIST
*
RTYPOVFL EQU       *
         MVC       WRITEXT(52),MSGOVFL ' TABLE OVERFLOWED' MSG
         B         RTYPLIST
*
RTYPLIST EQU       *
         BAL       R8,WRITERTN
         B         RTYPREAD
*
RTYPSERR EQU       *
         WTO       'ACCTLOAD-12-W - ERROR IN RUN TYPE CODE LOAD RTN',  X
               ROUTCDE=2,DESC=3
         BAL       R14,RTYPERR
RTYPRERR EQU       *
         WTO       'ACCTLOAD-13-W - ERROR WHILE READING RUN TYPE CODE FX
               ILE',ROUTCDE=2,DESC=3
         BAL       R14,RTYPERR
RTYPERR  EQU       *
         OI        ERRSW1,ERRRTYP  SET ERROR SWITCH
RTYPEXIT EQU       *
         BR        R10            RETURN
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - SECTION CODE READ AND LOAD RTN'
SECTRTN  DS        0H
***********************************************************************
*                                                                     *
*        READ & CHECK SECTION CODES                                   *
*                                                                     *
***********************************************************************
         USING     SECTRTN,R11
         LA        R1,60          RESET LINE COUNTER TO FORCE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'SECTION CODES'
         FIND  SYSLIB,BLDLTTRS,C  GET BEG. OF SECTION CODES
SECTREAD EQU       *
         BAL       R8,READRTN
         B         SECTROK        RC=0; READ OK
         B         SECTEXIT       RC=4; EOF
         B         SECTRERR       RC=8; READ ERROR
SECTROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     SECTINPT,R9    GIVE IT ADDRESSABILITY
         MVC       WRITEXT(80),0(R2)
         CLI       SECTINPT,C'*'  COMMENT CARD?
         BE        SECTLIST       BIF YES; JUST LIST IT
         CLI       SCINLOAD,SCININVD INVALID RECORD?
         BE        SECTBDCD       BIF YES
         CLI       SCINCAT,SCINADMN CHECK FOR VALID CATAGORY CODES
         BL        SECTBDCD       BIF BAD CODE
         CLI       SCINCAT,SCINAPPL UPPER LIMIT
         BH        SECTBDCD       BIF BAD CODE
         TRT       SCINCODE,TRANTAB VALID ALPHAMERIC DOEE?
         BZ        SECTLKUP       BIF VALID
SECTBDCD EQU       *
         MVC       WRITERR(52),MSGINVLD 'INVALID RECORD ' MSG
         B         SECTLIST       GO BACK TO READ ANOTHER RECORD
SECTLKUP EQU       *
         LA        R15,SCINCODE   ADDR OF SEARCH ARGUMENT
         L         R7,=A(SECTABLE) BINARY SEARCH TABLE & PARMS
         BAL       R8,TBINSRCH    BINARY SEARCH & INSERT
         B         SECTDUPR       RC=0; EXISTING ELEMENT FOUND
         B         SECTSTOK       RC=4; INSERT OK
         B         SECTOVFL       RC=8; TABLE OVERFLOW
         B         SECTSERR       RC=12; LOGIC ERROR
*
SECTSTOK EQU       *
         MVC       SCTBCAT-SCTBCODE(1,R2),SCINCAT  CATAGORY CODE
         B         SECTLIST       BACK FOR ANOTHER RECORD
*
SECTDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         SECTLIST
*
SECTOVFL EQU       *
         MVC       WRITERR(52),MSGOVFL ' TABLE OVERFLOWED' MSG
         B         SECTLIST       BACK FOR ANOTHER
*
SECTLIST EQU       *
         BAL       R8,WRITERTN
         B         SECTREAD       READ ANOTHER RECORD
*
SECTSERR EQU       *
         WTO       'ACCTLOAD-14-W - ERROR IN SECTION CODE TABLE LOAD RTX
               N',ROUTCDE=2,DESC=3
         BAL       R14,SECTERR
SECTRERR EQU       *
         WTO       'ACCTLOAD-15-W - ERROR WHILE READING SECTION CODE FIX
               LE',ROUTCDE=2,DESC=3
         BAL       R14,SECTERR
SECTERR  EQU       *
         OI        ERRSW1,ERRSECT  ERROR IN SECTION CODE LOAD RTN
SECTEXIT EQU       *
         BR        R10
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - USER CODE READ AND LOAD RTN'
USERRTN  DS        0H
***********************************************************************
*
*        READ & CHECK USER CODES
*
***********************************************************************
         USING     USERRTN,R11
         LA        R1,60          RESET LINE COUNTER TO FORCE PAGE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'USER CODES'
         FIND      SYSLIB,BLDLTTRU,C
USERREAD EQU       *
         BAL       R8,READRTN
         B         USERROK        RC=0; READ OK
         B         USEREXIT       RC=4; EOF
         B         USERRERR       RC=8; READ ERROR
USERROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     USCDINPT,R9    GIVE IT ADDRESSABILITY
         MVC       WRITEXT(80),0(R2) LIST IT
         CLI       USCDINPT,C'*'  COMMENT CARD?
         BE        USERLIST
         CLI       USINSW,USINVALD VALID USER CODE?
         BNE       USERBDCD       BIF YES
         TRT       USINCODE,TRANTAB VALID ALPHAMERIC CODE?
         BNZ       USERBDCD       BIF NOT
         CLI       USINCAT,USINCMOF CATAGORY CODE < 0?
         BL        USERBDCD       BIF YES
         CLI       USINCAT,USINCMUS CATAGORY CODE > 9?
         BNH       USERLKUP       BIF NOT
*
USERBDCD EQU       *
         MVC       WRITERR(52),MSGINVLD 'RECORD INVALID' MSG
         B         USERLIST       ON TO NEXT RECORD
*
USERLKUP EQU       *
         LA        R15,USINCODE   SEARCH ARGUMENT
         L         R7,=A(USERTABL) BINARY SEARCH TABLE & PARMS
         BAL       R8,TBINSRCH
         B         USERDUPR       RC=0; EXISTING ELEMENT FOUND
         B         USERSTOK       RC=4; LOOKUP & STOW OK
         B         USEROVFL       RC=8; TABLE OVERFLOW
         B         USERSERR       RC=12; LOGIC ERROR
*
USERSTOK EQU       *
         CLI       USINCAT,USINCSEC 2ND MASTER CODE?
         BE        USERST01       BIF YES
         CLI       USINCAT,USINCJNT JOINT MASTER?
         BNE       USERNEXT       BIF NOT
USERST01 EQU       *
         OI        USTBFLAG-USTBCODE(R2),USTBF01 'CAN'T BE USED IN ACCT
*                                 - ONLY IN JOBNAME FIELD'
USERNEXT EQU       *
         B         USERLIST
*
USERDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         USERLIST
*
USEROVFL EQU       *
         MVC       WRITERR(52),MSGOVFL 'TABLE OVERFLOWED' MSG
         B         USERLIST
*
USERLIST EQU       *
         BAL       R8,WRITERTN
         B         USERREAD      GO GET ANOTHER RECORD
*
USERSERR EQU       *
         WTO       'ACCTLOAD-16-W - ERROR IN USER CODE TABLE LOAD RTN',X
               ROUTCDE=2,DESC=3
         BAL       R14,USERERR
USERRERR EQU       *
         WTO       'ACCTLOAD-17-W - ERROR WHILE READING USER CODE FILE'X
               ,ROUTCDE=2,DESC=3
USERERR  EQU       *
         OI        ERRSW1,ERRUSER  SET ERROR SWITCH
USEREXIT EQU       *
         BR        R10
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - JOB SCHEDULER RESOURCE LIMIT RTN'
LIMITRTN DS        0H
*********************************************************************
*
*         READ & CHECK JOB SCHEDULER RESOURCE LIMITS
*
********************************************************************
         USING     LIMITRTN,R11
         LA        R1,60      RESET LINE COUNTER TO FORCE PAGE EJECT
         ST        R1,WRITECNT
         MVC       WRITEHTX+20(25),=CL25'SCHEDULER RESOURCE LIMITS'
         FIND      SYSLIB,BLDLTTRL,C
*
LIMTREAD EQU       *
         BAL       R8,READRTN      GET RECORD BUFFER
         B         LIMTROK         RC=0; READ OK
         B         LIMTEXIT        RC=4; END OF FILE
         B         LIMTERR         RC=8; FATAL ERROR IN ROUTINE
*
LIMTROK  EQU       *
         LR        R9,R2           R9 NOW POINTS TO RECORD
         USING     RESLIMIN,R9     MAKE INPUT RECORD ADDRESSABLE
         MVC       WRITEXT(80),0(R9) MOVE RECORD TO DISPLAY AREA
         CLI       RLINCLAS,C'*'   COMMENT CARD?
         BE        LIMTLIST        BIF YES
         TRT       RLINCLAS,TRANTAB VALID ALPAHMERIC CODE?
         BNZ       LIMTBDCD        BIF NOT
         L         R1,=A(RESLIMTB) GET ADDR OF IN-CORE TABLE
         LH        R7,RLTBCNT-RESLIMTB(,R1) # OF ELEMENTS LOADED
         LA        R4,RLTBLGTH     LENGTH OF ONE ENTRY
         SR        R6,R6
         MR        R6,R4           CALC DISPLACEMENT TO NEXT ENTRY
         A         R7,=A(RLTBSTRT) MAKE IT INTO AN ADDRESS
         C         R7,=A(RLTBEND)  BEYOND END OF TABLE?
         BNL       LIMTOVFL        BIF YES; SIGNAL OVERFLOW
         MVC       TESTAREA(80),RESLIMIN MOVE REC INTO A TEST AREA
         TR        TESTAREA,TABLEPAT TRANSLATE IT INTO GENERIC VALUES
         CLC       TESTAREA+2(RLINPRTY-RLINHOLD),RECPAT CHECK PATTERN
         BNE       LIMTBDCD       BIF BAD CODE
         L         R1,=A(RESLIMTB) GET ADDR OF IN-CORE TABLE
         LH        R3,RLTBCNT-RESLIMTB(,R1) REC OK; INCREMENT CNT
         LA        R3,1(,R3)
         STH       R3,RLTBCNT-RESLIMTB(,R1)
         MVC       RLTBCLAS-RLTBSTRT(1,R7),RLINCLAS MOVE IN JOB CLASS
         CLI       RLINHOLD,C'Y'  DOES CLASS FORCE AUTO-HOLD?
         BNE       LIMTVEQR       BIF NOT; TRY NEXT CASE
         OI        RLTBFLAG-RLTBSTRT(R7),RLTBHOLD SET 'HOLD' FLAG
*
LIMTVEQR EQU       *
         CLI       RLINVEQR,C'Y'  DOES CLASS PERMIT VIRTUAL=REAL?
         BNE       LIMTTOUT       BIF NOT; TRY NEXT CAS
         OI        RLTBFLAG-RLTBSTRT(R7),RLTBVEQR  SET 'V=R' FLAG
*
LIMTTOUT EQU       *
         CLI       RLINTOUT,C'Y'  TIMEOUT/EXCESSION STRICTLY ENFORCED?
         BNE       LIMTPERF       BIF NOT; LOAD PERFORM LIMIT
         OI        RLTBFLAG-RLTBSTRT(R7),RLTBTOUT SET EXCESSION ENF.
*
LIMTPERF EQU       *
         PACK      PACKWK,RLINPERF  PERFORMANCE GROUP # LIMIT
         CVB       R1,PACKWK
         STH       R1,RLTBPERF-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINVIO  VIO LIMIT
         CVB       R1,PACKWK
         ST        R1,RLTBVIO-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINDASD REAL DASD LIMIT
         CVB       R1,PACKWK
         ST        R1,RLTBDASD-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINCPU JOB-LEVEL CPU TIME LIMIT
         CVB       R1,PACKWK
         ST        R1,RLTBCPU-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINCORE STEP-LEVEL MEMORY LIMIT
         CVB       R1,PACKWK
         STH       R1,RLTBCORE-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINLINE JOB-LEVEL SYSOUT LINE LIMIT
         CVB       R1,PACKWK
         STH       R1,RLTBLINE-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLIN6250 MAX # OF 6250/1600 BPI DRIVES/STEP
         CVB       R1,PACKWK
         STH       R1,RLTB6250-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLIN1600 MAX # OF 1600/800 BPI DRIVES/STEP
         CVB       R1,PACKWK
         STH       R1,RLTB1600-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINDUA  MAX # OF DIRECT UNIT ASSIGNS/STEP
         CVB       R1,PACKWK
         STH       R1,RLTBDUA-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINTP MAX # OF T/P DEVICES/STEP
         CVB       R1,PACKWK
         STH       R1,RLTBTP-RLTBSTRT(,R7)
*
         PACK      PACKWK,RLINPRTY JOB SELECTION PRIORITY
         CVB       R1,PACKWK
         STH       R1,RLTBPRTY-RLTBSTRT(,R7)
*
         B         LIMTLIST   NOW LIST THIS SUCKER
*
LIMTBDCD EQU       *      BAD VALUE IN RECORD
         MVC       WRITERR(52),MSGINVLD
         B         LIMTLIST
*
LIMTOVFL EQU       *
         MVC       WRITERR(52),MSGOVFL
         B         LIMTLIST
*
LIMTLIST EQU       *
         BAL       R8,WRITERTN
         B         LIMTREAD
*
LIMTEXIT EQU       *
         BR        R10
*
LIMTERR  EQU       *
         OI        ERRSW1,ERRLIMIT    SET ERROR SWITCH
         B         LIMTEXIT       NOW LEAVE
*
RECPAT   DC   C'A A A NN NNNNNN NNNNNN NNNNN NNNN NNNNN NN NN NN NN NN'
         LTORG
         DROP      R11
         TITLE     'ACCTLOAD - JOB ROUTING PGM NAME READ AND LOAD RTN'
JOBRRTN  DS        0H
***********************************************************************
*                                                                     *
*        READ & CHECK JOB ROUTING PROGRAM NAMES                       *
*                                                                     *
***********************************************************************
         USING     JOBRRTN,R11
         LA        R1,60          RESET LINE COUNTER TO FORCE PAGE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'JOB ROUTING PGM NAMES'
         FIND      SYSLIB,BLDLTTRP,C
JOBRREAD EQU       *
         BAL       R8,READRTN
         B         JOBRROK        RC=0; READ OK
         B         JOBREXIT       RC=4; EOF
         B         JOBRRERR       RC=8; READ ERROR
JOBRROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     JRCDINPT,R9    GIVE IT ADDRESSABILITY
         MVC       WRITEXT(80),0(R2) LIST IT
         CLI       JRCDINPT,C'*'  COMMENT CARD?
         BE        JOBRPRNT
         CLC       JRINPGMN,=CL8'CPUNAMES' RESERVED WORD?
         BNE       JOBRREGN       BIF NOT
         MVC       JRTBCPUS(4*7),JRINMASK MOVE IN NAMES OF CPUS
         LA        R1,0           SET COUNTER TO ZERO
         LA        R2,JRINCPUS    GET ADDR OF FIRST CPU NAME
JOBRCPUL CLC       0(4,R2),=C'    '  BLANKS?
         BE        JOBRCPUC       YES; NOW COUNT # OF CPU'S
         LA        R1,1(,R1)      INCREMENT # OF CPU'S
         LA        R2,4(,R2)      INCREMENT CPU NAME POINTER
         C         R1,=A(7)       MAX # OF PROCESSORS?
         BH        JOBRBDCD       BIF YES
         B         JOBRCPUL       KEEP ON TRUCKIN'
JOBRCPUC EQU       *
         STH       R1,JRTB#CPU     COUNT # OF CPU NAMES IN STACK
         C         R1,=A(2)        WERE THERE AT LEAST 2?
         BL        JOBRBDCD       BIF NOT; MUST HAVE AT LEAST 2
         B         JOBRPRNT       NOW LIST THIS CARD
JOBRREGN EQU       *
         SLR       R0,R0          CLEAR OUT BIT MAP REG
         LA        R1,JRINMASK    GET ADDR OF MASK BEGIN
         LH        R2,JRTB#CPU     SET UP LOOP COUNT
         LA        R4,1           SET UP BIT FLIPPER
JOBRMSKL EQU       *
         CLI       0(R1),C'1'     IS BIT ON?
         BE        JOBRBIT1       BIF YES
         CLI       0(R1),C'0'     IF NOT ON, IS IT AT LEAST LEGAL?
         BE        JOBRUP1        BIF YES; INCREMENT
         B         JOBRBDCD       OTHERWISE, BAD CODE
JOBRBIT1 EQU       *
         OR        R0,R4          SET BIT ON IF CORRESP CPU IS ELIGIBLE
JOBRUP1  EQU       *
         SLL       R4,1           SHIFT BIT FLIPPER OVER BY 1
         LA        R1,1(,R1)      MOVE TO NEXT FIELD ON INPUT CARD
         BCT       R2,JOBRMSKL    LOOP UNTIL MASK ALL INTERROGATED
         STC       R0,HOLDMASK    HOLD ONTO MASK FOR A BIT
         B         JOBRLKUP       NOW GO TO STOW
JOBRBDCD EQU       *
         MVC       WRITERR(52),MSGINVLD 'RECORD INVALID' MSG
         B         JOBRPRNT       ON TO NEXT RECORD
*
JOBRLKUP EQU       *
         LA        R15,JRINPGMN   SEARCH ARGUMENT
         L         R7,=A(JOBRTABL) BINARY SEARCH TABLE & PARMS
         BAL       R8,TBINSRCH
         B         JOBRDUPR       RC=0; EXISTING ELEMENT FOUND
         B         JOBRSTOK       RC=4; LOOKUP & STOW OK
         B         JOBROVFL       RC=8; TABLE OVERFLOW
         B         JOBRSERR       RC=12; LOGIC ERROR
*
JOBRSTOK EQU       *
         MVC       JRTBMASK-JRTBPGMN(1,R2),HOLDMASK MOVE IN AFF MASK
         B         JOBRPRNT
*
JOBRDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         JOBRPRNT
*
JOBROVFL EQU       *
         MVC       WRITERR(52),MSGOVFL 'TABLE OVERFLOWED' MSG
         B         JOBRPRNT
*
JOBRPRNT EQU       *
         BAL       R8,WRITERTN
         B         JOBRREAD      GO GET ANOTHER RECORD
*
JOBRSERR EQU       *
         WTO       'ACCTLOAD-30-W - ERROR IN JOB ROUTING PGM LOAD RTN',X
               ROUTCDE=2,DESC=3
         BAL       R14,JOBRERR
JOBRRERR EQU       *
         WTO       'ACCTLOAD-31-W - ERROR WHILE READING JOB ROUTING PGMX
               NAME FILE',ROUTCDE=2,DESC=3
JOBRERR  EQU       *
         OI        ERRSW2,ERRJOBR  SET ERROR SWITCH
JOBREXIT EQU       *
         BR        R10
         LTORG
         DROP      R9,R11
         TITLE   'ACCTLOAD - SMF INTERVAL ACCOUNTING READ AND LOAD RTN'
IACTRTN  DS        0H
***********************************************************************
*                                                                     *
*        READ & CHECK SMF INTERVAL ACCOUNTING ELIGIBILITY LIST        *
*                                                                     *
***********************************************************************
         USING     IACTRTN,R11
         LA        R1,60          RESET LINE COUNTER TO FORCE PAGE
         ST        R1,WRITECNT    PAGE EJECT
         MVC       WRITEHTX+20(25),=CL25'SMF INTERVAL ACCOUNTING'
         FIND      SYSLIB,BLDLTTRI,C
IACTREAD EQU       *
         BAL       R8,READRTN
         B         IACTROK        RC=0; READ OK
         B         IACTEXIT       RC=4; EOF
         B         IACTRERR       RC=8; READ ERROR
*
IACTROK  EQU       *
         LR        R9,R2          (R2 -> INPUT RECORD)
         USING     IACTINPT,R9    GIVE IT ADDRESSABILITY
         MVC       WRITEXT(80),0(R2) LIST IT
         CLI       IACTINPT,C'*'  COMMENT CARD?
         BE        IACTLIST
         LA        R15,IAINNAME   SEARCH ARGUMENT
         L         R7,=A(IACTTABL) BINARY SEARCH TABLE & PARMS
         BAL       R8,TBINSRCH
         B         IACTDUPR       RC=0; EXISTING ELEMENT FOUND
         B         IACTSTOK       RC=4; LOOKUP & STOW OK
         B         IACTOVER       RC=8; TABLE OVERFLOW
         B         IACTSERR       RC=12; LOGIC ERROR
*
IACTSTOK EQU       *
         B         IACTLIST
*
IACTDUPR EQU       *
         MVC       WRITERR(52),MSGDUPR 'DUPLICATE RECORD' MSG
         B         IACTLIST
*
IACTOVER EQU       *
         MVC       WRITERR(52),MSGOVFL 'TABLE OVERFLOWED' MSG
         B         IACTLIST
*
IACTLIST EQU       *
         BAL       R8,WRITERTN
         B         IACTREAD      GO GET ANOTHER RECORD
*
IACTSERR EQU       *
         WTO       'ACCTLOAD-16-W - ERROR IN SMF INTERVAL ACCOUNTING TAX
               BLES',ROUTCDE=2,DESC=3
         BAL       R14,IACTERR
IACTRERR EQU       *
         WTO       'ACCTLOAD-17-W - ERROR WHILE READING SMF INTERVAL ACX
               COUNTING RECORDS',ROUTCDE=2,DESC=3
IACTERR  EQU       *
         OI        ERRSW1,ERRIACT  SET ERROR SWITCH
IACTEXIT EQU       *
         BR        R10
         LTORG
         DROP      R9,R11
         TITLE     'ACCTLOAD - ACCOUNTING AREA LOAD RTN'
LOADRTN  DS        0H
***********************************************************************
*                                                                     *
*        LOAD ACCOUNTING AREA FROM TABLES WE JUST BUILT               *
*                                                                     *
*              BY NOW, TABLES INSIDE THIS PROGRAM CONTAIN A-L-L       *
*              THE DATA NEEDED TO LOAD THE ACCOUNTING AREA IN CSA.    *
*              THE FOLLOWING ROUTINE TRANSFERS THE DATA FROM THESE    *
*              PROGRAM TABLES TO THE LOOKUP TABLES IN THE ACCOUNTING  *
*              AREA ANCHORED IN CSA.                                  *
*                                                                     *
***********************************************************************
         USING     LOADRTN,R11
         L        R9,16      GET ADDR OF CVTR
         USING    CVT,R9     MAKE IT ADDRESSABLE
         ICM      R9,15,CVTUSER  SEE IF AREA ALREADY IN USE
         USING    ACCTABLE,R9 MAKE IT ADDRESSABLE IN ANY CASE
         BNZ      LOADSAME    IF NON-ZERO, ASSUME AREA AVAILABLE
         LA       R0,ACSUBPOL GET # OF SUBPOOL
         L        R2,=A(ACSIZE) GET SIZE OF AREA TO BE GETMAINED
         SLL      R0,24        SHIFT TO HI-BYTE
         OR       R0,R2        PUT IT TOGETHER FOR GETMAIN
         GETMAIN  R,LV=(0)    GET AREA FROM CSA
         LR       R9,R1       HOLD ONTO POINTER
LOADSAME EQU      *
         MODESET  KEY=ZERO
         MVI      ACFLAG,ACEMPTY  MAKE SURE NOBODY USES AREA
         MVI      ACVERSN,X'00'   RESET VERSION # TO PREVENT USE
         L        R1,16       GET CVT ADDRESS
         USING    CVT,R1      MAKE IT ADDRESSABLE
         ST       R9,CVTUSER  STOW ADDRESS IN AREA
         DROP     R1
         STIMER  REAL,BINTVL=LOAD2SEC WAIT FOR CURRENT USERS TO LEAVE
         LR      R0,R9   SET AREA TO ZEROS
         L         R1,=A(ACSIZE)   GET SIZE OF AREA
         SR        R2,R2           SET 'FROM' ADDR TO ZERO
         SR        R3,R3           SET 'FROM' LENGTH TO ZERO
         MVCL      R0,R2           DO IT
         L         R1,=A(ACSIZE)   STOW AREA SIZE IN ACCT AREA PREFIX
         STH       R1,ACLENGTH
         AR        R1,R9           COMPUTE ENDING ADDRESS
         ST        R1,ACTBLEND     STOW IT
         LA        R6,ACEND+3     GET NEXT FULLWORD BOUNDARY IN ACCTTAB
         SRL       R6,2
         SLL       R6,2
***********************************************************************
*        LOAD APPLICATION CODES                                       *
***********************************************************************
         ST        R6,ACAPADDR    STOW APPL CODE TABLE ADDR
         USING     APPLCODE,R6    GIVE IT ADDRESSABILITY
         L         R7,=A(APPLTABL) ADDR OF BINARY TABLE FROM WHICH TO
         USING     TABLE,R7      LOAD
         ICM       R4,15,TABCURR  # OF ENTRIES
         BNZ       LOADHAPC       HAVE APPL. CODES
         WTO       'ACCTLOAD-18-W - NO APPLICATION CODES FOUND',       X
               ROUTCDE=2,DESC=3
         BAL       R14,LOADERR
LOADHAPC EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADAPOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADAPOK EQU       *
         MVI       APCDFLAG,TABINARY+TABREAD BINARY SEARCH CONTROL PARM
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,APCDMAX     MAKE IT MAX # OF ENTRIES
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK      NOW DISPLAY # OF ELEMENTS LOADED
         MVC       LOADAWTO+24(5),=X'2020202120'
         ED        LOADAWTO+23(6),PACKWK+5
LOADAWTO WTO   'ACCTLOAD-19-I - XXXXX APPLICATION CODES LOADED',       X
               ROUTCDE=2,DESC=6
***********************************************************************
*        LOAD USER CODES                                              *
***********************************************************************
         ST        R6,ACUSADDR    MAKE THIS BEGINNING OF USER CODE TAB
         USING     USERCODE,R6    GIVE USER CODE AREA IN ACCT ADDRESSIB
         L         R7,=A(USERTABL)
         USING     TABLE,R7      GIVE IT ADDRESSIBILITY
         ICM       R4,15,TABCURR  # OF ENTRIES
         BNZ       LOADHUSC       BIF ENTRIES EXIST
         WTO       'ACCTLOAD-20-W - NO USER CODES FOUND',DESC=3,       X
               ROUTCDE=2
         BAL       R14,LOADERR
LOADHUSC EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADUSOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADUSOK EQU       *
         MVI       USCDFLAG,TABREAD+TABINARY SET FLAGS FOR SEARCH RTN
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,USCDMAX     MAKE IT MAX # OF ENTRIES
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK
         MVC       LOADUWTO+24(5),=X'2020202120'
         ED        LOADUWTO+23(6),PACKWK+5
LOADUWTO WTO   'ACCTLOAD-21-I - XXXXX USER CODES LOADED',DESC=6,       X
               ROUTCDE=2
***********************************************************************
*        LOAD FUNCTION CODES                                          *
***********************************************************************
         ST        R6,ACFNADDR    STOW ADDRESS OF FUNC CODE TABLE BEGIN
         USING     FUNCCODE,R6    FUNCTION CODE TABLE IN ACCT AREA
         L         R7,=A(FUNCTABL)
         USING     TABLE,R7
         ICM       R4,15,TABCURR  # OF ENTRIES IN BINARY LOOKUP TABLE
         BNZ       LOADHFNT       BIF WE DO HAVE FUNCTION CODES
         WTO       'ACCTLOAD-22-W - NO FUNCTION CODES FOUND',DESC=3,   X
               ROUTCDE=2
         BAL       R14,LOADERR
LOADHFNT EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADFNOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADFNOK EQU       *
         MVI       FNCDFLAG,TABINARY+TABREAD BINARY SEARCH CONTROL PARM
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,FNCDMAX     MAKE IT MAX # OF ENTRIES
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK
         MVC       LOADFWTO+24(5),=X'2020202120'
         ED        LOADFWTO+23(6),PACKWK+5
LOADFWTO WTO   'ACCTLOAD-23-I - XXXXX FUNCTION CODES LOADED',DESC=6,   X
               ROUTCDE=2
***********************************************************************
*        LOAD RUN TYPE CODES                                          *
***********************************************************************
         ST        R6,ACRTADDR    STOW ADDRESS OF RUN TYPE  TABLE BEGIN
         USING     RUNTYPE,R6
         L         R7,=A(RTYPTABL)
         USING     TABLE,R7
         ICM       R4,15,TABCURR  # OF ELEMENTS
         BNZ       LOADHRTP       BIF YES
         WTO       'ACCTLOAD-24-W - NO RUN TYPE CODES FOUND',DESC=3,   X
               ROUTCDE=2
         BAL       R14,LOADERR
LOADHRTP EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADRTOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADRTOK EQU       *
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,RTCDMAX     MAKE IT MAX # OF ENTRIES
         MVI       RTCDFLAG,TABINARY+TABREAD BINARY SEARCH CONTROL PARM
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK
         MVC       LOADRWTO+24(5),=X'2020202120'
         ED        LOADRWTO+23(6),PACKWK+5
LOADRWTO WTO   'ACCTLOAD-25-I - XXXXX RUN TYPE CODES LOADED',DESC=6,   X
               ROUTCDE=2
***********************************************************************
*        LOAD SECTION CODES                                           *
***********************************************************************
         ST        R6,ACSEADDR    STOW ADDRESS OF USER CODE TABLE BEGIN
         USING     SECTIONC,R6
         L         R7,=A(SECTABLE)
         USING     TABLE,R7
         ICM       R4,15,TABCURR  # OF ENTRIES
         BNZ       LOADHSCT       BIF YES
         WTO       'ACCTLOAD-26-W - NO SECTION CODES FOUND',DESC=3,    X
               ROUTCDE=2
         BAL       R14,LOADERR
LOADHSCT EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADSCOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADSCOK EQU       *
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,SECDMAX     MAKE IT MAX # OF ENTRIES
         MVI       SECDFLAG,TABINARY+TABREAD BINARY SEARCH CONTROL PARM
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK
         MVC       LOADSWTO+24(5),=X'2020202120'
         ED        LOADSWTO+23(6),PACKWK+5
LOADSWTO WTO   'ACCTLOAD-27-I - XXXXX SECTION CODES LOADED',DESC=6,    X
               ROUTCDE=2
***********************************************************************
*       LOAD JOB SCHEDULER RESOURCE LIMITS                            *
***********************************************************************
         ST        R6,ACRLADDR    STOW ADDRESS OF JOB SCHEDULER TABLE
        USING      RESLIMIT,R6     MAKE CORE AREA ADDRESSABLE
         L         R7,=A(RESLIMTB)  GET ADDR OF IN-CORE TABLE
         LH        R5,RLTBCNT-RESLIMTB(,R7) # OF ENTRIES IN TABLE
         LTR       R5,R5      ANY THERE?
         BNZ       LOADHRLM   BIF YES
         WTO       'ACCTLOAD-28-W NO RESOURCE LIMIT RECORDS FOUND',    X
               DESC=3,ROUTCDE=2
         BAL       R14,LOADERR
*
LOADHRLM EQU       *
         L         R3,=A(RLLGTH)  LENGTH OF ONE ELEMENT
         ST        R3,RLLENGTH    STOW IN ACCOUNTING AREA
         LA        R1,RLTABLE     GET ADDR OF TARGET ACCT AREA
         ST        R1,RLTABBEG    STOW
         LA        R7,RLTBSTRT-RESLIMTB(,R7) GET ADDR OF 1ST ELEM
         BCTR      R3,0      LENGTH => LENGTH CODE
LOADRLML EQU       *
         C         R1,ACTBLEND HAVE WE GONE BEYOND END OF TABLE
         BNL       LOADSIZE   BIF YES
         EX        R3,LOADMVC
         LA        R1,RLLGTH(,R1) BUMP TARGET ADDRESS
         LA        R7,RLTBLGTH(,R7) BUMP SOURCE ADDRESS
         BCT       R5,LOADRLML   KEEP ON TRUCKIN'
*
         LA        R2,3(,R1)  USE ROUNDED VALUE OF LAST ADDR
         SRL       R2,2                 FOR NEXT
         SLL       R2,2                          TABLE
         S         R1,=A(RLLGTH) POINT TO LAST ELEMENT
         ST        R1,RLTABLST   STOW THIS INFO
         LR        R6,R2           CREATE NEW CSA TABLE POINTER
         L         R1,=A(RESLIMTB) GET ADDR OF IN-CORE TABLE
         LH        R1,RLTBCNT-RESLIMTB(,R1) GET COUNT OF # OF ELEMS
         CVD       R1,PACKWK
         MVC       LOADLWTO+24(5),=X'2020202120' SET UP DISPLAY
         ED        LOADLWTO+23(6),PACKWK+5
LOADLWTO WTO       'ACCTLOAD-29-I - XXXXX SCHEDULER RESOURCE LIMITS LOAX
               DED',DESC=6,ROUTCDE=2
***********************************************************************
*        LOAD JOB ROUTING PROGRAM NAMES                               *
***********************************************************************
         ST        R6,ACJRADDR    SET UP ADDR FOR JOB ROUTING TABLE
         USING     JOBROUTE,R6
         MVC       JR#CPU(2),JRTB#CPU  MOVE # OF SMFID
         MVC       JRCPUS(4*7),JRTBCPUS MOVE SMFIDS
         LA        R6,JRLOOKUP    GET ADDR OF ACCT AREA BIN. LOOKUP TAB
         USING     JRLOOKUP,R6    MAKE IT ADDRESSABLE
         L         R7,=A(JOBRTABL)  GET ADDR OF TABLE FOUND IN THIS PGM
         USING     TABLE,R7
         ICM       R4,15,TABCURR  # OF ELEMENTS
         BNZ       LOADHJR        BIF YES
         WTO       'ACCTLOAD-32-W - NO JOB ROUTING PGM NAMES FOUND',   X
               ROUTCDE=2,DESC=3
         BAL       R14,LOADERR
LOADHJR  EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADJROK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADJROK EQU       *
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,JRMAX       MAKE IT MAX # OF ENTRIES
         MVI       JRFLAG,TABINARY+TABREAD   BINARY SEARCH RTN PARMS
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         CVD       R1,PACKWK
         MVC       LOADJWTO+24(5),=X'2020202120'
         ED        LOADJWTO+23(6),PACKWK+5
LOADJWTO WTO   'ACCTLOAD-33-I - XXXXX JOB ROUTING PGM NAMES LOADED',   X
               ROUTCDE=2,DESC=6
***********************************************************************
*        LOAD SMF INTERVAL ACCOUNTING ELIGIBILITY LIST                *
***********************************************************************
         ST        R6,ACIAADDR    STOW ADDRESS OF USER CODE TABLE BEGIN
         USING     INVLACCT,R6    GIVE IACT CODE AREA IN ACCT ADDRESSIB
         L         R7,=A(IACTTABL)
         USING     TABLE,R7      GIVE IT ADDRESSIBILITY
         ICM       R4,15,TABCURR  # OF ENTRIES
         BNZ       LOADHIAC       BIF ENTRIES EXIST
         WTO       'ACCTLOAD-20-W - NO IACT CODES FOUND',DESC=3,       X
               ROUTCDE=2
         BAL       R14,LOADERR
LOADHIAC EQU       *
         LR        R2,R6          GET 'TO' ADDRESS
         L         R3,ACTBLEND    GET END ADDRESS OF CSA AREA
         SR        R3,R6          GET 'TO' LENGTH
         LA        R4,1(,R4)      ADD 1 FOR OVERFLOW AREA
         L         R5,TABELEML    CURR ELEMENT LENGTH
         MR        R4,R4          COMPUTE LENGTH OF TABLE
         A         R5,=A(TABENTRY-TABLE)  ADD SEARCH PGM CONTROL PARMS
         LR        R8,R5          SAVE 'FROM' LENGTH
         LR        R4,R7          'FROM' ADDRESS
         MVCL      R2,R4          MOVE ENTIRE TABLE TO CSA
         BC        10,LOADIAOK    BIF NO OVERFLOW OR OVERLAP
         BAL       R14,LOADSIZE   OTHERWISE, RAN OUT OF ROOM
*
LOADIAOK EQU       *
         L         R1,TABCURR     CURRENT # OF ENTRIES IN TABLE
         ST        R1,IACTMAX     MAKE IT MAX # OF ENTRIES
         MVI       IACTFLAG,TABINARY+TABREAD BINARY SEARCH RTN PARMS
         LA        R6,3(R6,R8)    GET TO NEXT TABLE AREA & ROUND
         SRL       R6,2                 UP TO
         SLL       R6,2                       NEXT FULLWORD
         ST        R6,LASTUSED    STOW ADDRESS NEXT AVAIL SLOT
         CVD       R1,PACKWK
         MVC       LOADIWTO+24(5),=X'2020202120'
         ED        LOADIWTO+23(6),PACKWK+5
LOADIWTO WTO   'ACCTLOAD-21-I - XXXXX ELIGIBLE SMF INTERVAL ACCT NAMES'X
               ,ROUTCDE=2,DESC=6
*
         MVI       ACVERSN,ACVER# PLACE VERSION # OF SAACLOAD IN TABLE
         MVI       ACFLAG,ACLOADED TELL EVERYBODY THAT THE TABLE IS OK
         DROP      R6,R7          DROP ADDRESSABILITY INPUT & OUTPUT
         MODESET   KEY=NZERO      BACK TO USER PK
*********************************************************************
*        PRINT STATISTICS OF ACCOUNTING AREA LOAD
*********************************************************************
         LA        R1,60    RESET LINE COUNTER TO FORCE PAGE EJECT
         ST        R1,WRITECNT
         MVC       WRITEHTX+20(25),=CL25'STATISTICS'
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSAPPL
         L         R7,=A(APPLTABL)
         USING     TABLE,R7
         L         R1,TABCURR   # OF APPLICATION CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0 SHIFT TO LEFT BY 1 TO ACCOMODATE ED
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSFUNC
         L         R7,=A(FUNCTABL) FUNCTION CODE TABLE
         USING     TABLE,R7
         L         R1,TABCURR # OF FUNCTION CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSRUNTYP
         L         R7,=A(RTYPTABL) RUN TYPE CODE TABLE
         USING     TABLE,R7
         L         R1,TABCURR # OF RUN TYPE CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSSECT
         L         R7,=A(SECTABLE) SECTION CODE TABLE
         USING     TABLE,R7
         L         R1,TABCURR # OF SECTION CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSUSER
         L         R7,=A(USERTABL) USER CODE TABLE
         USING     TABLE,R7
         L         R1,TABCURR # OF USER CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSCLASS
         L         R7,=A(RESLIMTB) JOB SCHEDULER RES. LIMIT TABLE
         LH        R1,RLTBCNT-RESLIMTB(,R7) # OF RESOURCE LIMITS LOADED
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSJOBRTE
         L         R7,=A(JOBRTABL) JOB ROUTING PGM NAME TABLE
         USING     TABLE,R7
         L         R1,TABCURR       # OF PROGRAM NAMES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSIACT
         L         R7,=A(IACTTABL) IACT CODE TABLE
         USING     TABLE,R7
         L         R1,TABCURR # OF IACT CODES LOADED
         DROP      R7
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSSIZE
         LH        R1,ACLENGTH   LENGTH OF GETMAINED AREA
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
         MVC       WRITEXT(31),SSREMAIN
         L         R1,ACTBLEND     GET END OF ACCTING AREA
         S         R1,LASTUSED     SUBTRACT ADDR OF NEXT STARTING POINT
         CVD       R1,PACKWK
         SRP       PACKWK,1,0
         ED        WRITEXT+25(6),PACKWK+5
         BAL       R8,WRITERTN
*
LOADEXIT EQU       *
         BR        R10            RETURN TO MAIN ROUTINE
*
LOADSIZE EQU       *
         WTO       'ACCTLOAD-28-W - ACCT TABLE OVERFLOWED',DESC=3,     X
               ROUTCDE=2
         B         LOADERR
LOADERR  EQU       *
         OI        ERRSW1,ERRLOAD   ERROR IN ACCT LOAD RTN
         MODESET   KEY=NZERO      BACK TO USER PK
         BR        R10            RETURN
LOADMVC  MVC       0(0,R1),0(R7)  PATTERN 'MVC' INSTR
LOAD2SEC DC        A(2*100)    2-SECOND DELAY VALUE
SSAPPL   DC        CL25'APPLICATION CODES LOADED',X'40206B202120'
SSFUNC   DC        CL25'FUNCTION CODES LOADED',X'40206B202120'
SSRUNTYP DC        CL25'RUN TYPE CODES LOADED',X'40206B202120'
SSSECT   DC        CL25'SECTION CODES LOADED',X'40206B202120'
SSUSER   DC        CL25'USER CODES LOADED',X'40206B202120'
SSCLASS  DC        CL25'RES LIMIT CLASSES LOADED',X'40206B202120'
SSJOBRTE DC        CL25'PROGRAM NAMES LOADED',X'40206B202120'
SSIACT   DC        CL25'INTV ACCT NAMES LOADED',X'40206B202120'
SSSIZE   DC        CL25'SIZE OF GETMAINED AREA',X'40206B202120'
SSREMAIN DC        CL25'SPACE REMAINING IN AREA',X'40206B202120'
         LTORG
         DROP      R11
         END
