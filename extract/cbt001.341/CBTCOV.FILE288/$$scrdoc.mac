-\INMR01
12500
¤
{1 ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦
{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- {
                       SCREEN¦{- Ó{-                     PL/I TO 3270 DI
ATION INTERFACE¦{- ¦{- ¦{- ¦{- ¦{- ¦{- {-
THOR:Î{                            R. E. STYMA   DEPT. 482.23¦{- {0
                  DATE OF LAST UPDATE:{
18/80¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- Ð{
     RELATED DOCUMENTS¦{- ¦{- {0
MENTS¦{- ƒ{-          GC27-6999-2  INTRODUCTION TO PROGRAMMING THE IBM 3
        GX20-1878-3  3270 INFORMATION DISPLAY SYSTEM REFERENCE SUMMARY‰{
   GA27-2749-8  IBM 3270 INFORMATION DISPLAY SYSTEM COMPONENT DESCRIPTIO
      GC28-0648-2  IOS/VS2 TSO GUIDE TO WRITING  A TERMINAL MONITOR PROG
           A COMMAND PROCESSOR.¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦
{- ¦{- Ì{-                                           - ii -¦{- ¦{  ¦{- ¦
                        1.  3270 FULL SCREEN INTERFACE FROM PL/I{0
   INTRODUCTION{+                ____________Œ{0             THE  IBM 3
IES  TERMINALS ARE  FULL  SCREEN DISPLAY  STATIONS. ¡{           THESE T
  ALLOW A PROGRAMMER TO  PLACE AND EXTRACT DATA  FROM ANY¡{           PO
N THE SCREEN.  THIS MAKES AN IDEAL CONDITION FOR USER ORIENTED¡{
CATION PROGRAMS.  THE CONTROL OF THE FULL SCREEN FEATURES OF A 3270¡{
SERIES TERMINAL IS HOWEVER NOT AVAILABLE IN A FORMAT READILY USABLE FROM
     HIGH LEVEL LANGUAGES.  THE INTERFACE TO A 3270 IS VERY TEDIOUS EVEN
          ASSEMBLY LEVEL PROGRAMS.    THIS INTERFACE ATTEMPTS TO  PROVID
/I¡{           PROGRAMMER WITH  AN EASY ACCESS TO  THE FULL SCREEN CAPAB
 OF THE{           3270.¡{0             THE BASIC I/O  TO A 3270 SERIES
L FROM  AN APPLICATION PROGRAM¡{           RUNNING UNDER TSO IS THOUGH T
F THE TPUT AND TGET SVC'S.  TWO BA-¡{           SIC TYPES  OF COMMANDS A
LABLE.  ONE IS  TO ERASE THE  SCREEN AND¡{           WRITE A NEW SCREEN
OTHER  IS TO UPDATE AN EXISTING SCREEN.   THE¡{           INPUT COMMAND
S A READ MODIFIED FIELDS COMMAND.  THIS MEANS THAT¡{           FIELDS MO
Y THE PERSON AT THE TERMINAL ARE THE ONLY ONES RETURNED¡{           TO T
AM.   THE FIELDS WHICH ARE  RETURNED ARE SEPARATED BY A SPE-¡{
ARACTER CALLED A SET BUFFER ADDRESS (SBA).   EACH SBA IS FOLLOWED¡{
 A HEX CODE TELLING WHERE ON THE SCREEN THE FIELD STARTED. (THIS POSI-Ô{
   TION IS ONE PAST WHERE THE PROGRAM TOLD IT TO START)¡{0             T
T STREAM TO THE TERMINAL HAS THE FORMAT OF SEVERAL HEX CODES¡{
D BY ALL THE OUTPUT FIELDS.   EACH  FIELD IS SEPARATED BY A START¡{
ELD CHARACTER (SF), A HEX VALUE CALLED AN ATTRIBUTE CHARACTER, AND OP-×{
   TIONALLY BY AN SBA AND A HEX CODE TELLING WHERE TO PUT THE SCREEN.¦{-
 ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- Ë{0
       - 1 -¦{- ¦{  ¦{- ¦{- Å{           1.2   ACCESSING THE INTERFACEÅ{
         _________ ___ _________¡{0             THE INTERFACE FORM PL/I
270  IS AN ASSEMBLER PROGRAM WHICH IS¡{           DIRECTLY CALLABLE AS A
TERNAL FUNCTION.   DIRECTLY CALLABLE MEANS¡{           THAT THE  FUNCTIO
 DECLARED  WITH ANY SPECIAL ATTRIBUTES  SUCH AS¡{           THE ASSEMBLE
.    THE ROUTINE FOLLOWS PL/I  CONVENSIONS AND LOOKSÄ{           LIKE A
GRAM TO PL/I.¡{0             THE INTERFACE IS DECLARED AS AN  EXTERNAL F
AND INVOKED AS ANYÀ{           OTHER PL/I FUNCTION.¦{- Ä{           1.2.
SSING THE SOURCEÄ{+                  _________ ___ ______¡{0
 SCREEN (THE FULL  SCREEN INTERFACE)   YOU MUST DECLARE  IT AS¡{
 IN THE SAMPLE DECLARATIONS.  YOU MUST THEN ASSEMBLE THE SOURCE AND{
LINK IT TOGETHER WITH YOUR PL/I PROGRAM.¡{0             THE   SOURCE
E    SCREEN   INTERFACE    IS   IN    LIBRARY¡{           'EXD.PANVALET.
' UNDER THE NAME "TSSCREEN".    THE SOURCE MUST BEÌ{           ASSEMBLED
E 'H' LEVEL ASSEMBLER.¡{0          TO AVOID HAVING TO RECOMPILE THE INTE
PEATEDLY, A COPY OF THE OB-…{           JECT IS IN THE SAME LIBRARY UNDE
ME "TSSCREENO".¦{- ¡{0          AT AUTOMATIC ELECTRIC LABORATORIES THE
G PROCEDURES MAY BE USEDˆ{           TO COMPILE, LINK, AND SAVE A PL/I P
SING THE SCREEN INTERFACE.¦{- Ë{
e¤{0                      ASSEMBLING AND LINKING THE FULL SCREEN INTERFA
               //OPTCOMP  EXEC MDPFPLI,LIB='YOUR.PANVALET.LIBRARY'Å{
       ++WRITE WORK,YOURPROG¤{                   //BALCOMP  EXEC MDPFBAL
D.PANVALET.SUPPORT1',{                   //  ADDPARM=NOLISTÅ{
 ++WRITE WORK,TSSCREEN {                   //LINK     EXEC MDLKED,SAVE=,
RLMOD, {                   //              LOADPRE='YOUR.LOAD.LIBRARY'{
           ++INSERT WORK
{                     ENTRY PLISTART·{
  //¦{- ¦{- ¡{           IN  THE  ABOVE  EXAMPLE   YOUR.PANVALET.LIBRARY
PROG,   YOURLMOD,.{           YOUR.LOAD.LIBRARY  ANRE VALUES WHICH ARE S
BY THE USER.¦{- ¦{- ¦{- ¦{- Ë{0
{- ¦{  ¦{- ¦{- {           1.2.2   PL/I DECLARATIONS{+
___________Æ{0          SAMPLE DECLARATIONS AND CALLS:
{0             DE
REEN ENTRY({                    VARYING CHAR(*),{                    B
                    FIXED BINARY(15),Æ{                    (2) FIXED BIN
Æ{                    (2) FIXED BINARY(15),{                    FIXED B
),¸{                    1(*),{                        2 FIXED BINARY(15
                    2 FIXED BINARY(15),Á{                        2 BIT(1
                    2 BIT(1),Á{                        2 BIT(1),Á{
          2 BIT(1),Á{                        2 BIT(1),Á{
2 BIT(1),Á{                        2 BIT(1),Á{                        2
{                        2 CHAR(3),„{                        2 VARYING C
EXTERNAL RETURNS(FIXED{                        BINARY(15));{0
ARE CMD VARYING CHAR(11);Á{              DECLARE WCO BIT(5);{
ARE AID FIXED BINARY(15);É{              DECLARE CPOS(2) FIXED BINARY(15
          DECLARE REA(2) FIXED BINARY(15);È{              DECLARE NUM
INARY(15);È{              DECLARE RC     FIXED BINARY(15);Ä{
E  01  FIELDEFS(5),Ò{                           02  ROW      FIXED BINAR
                           02  COL      FIXED BINARY(15),{
      02  PROTECT   BIT(1),{                           02  AUTO_NUM  BI
                          02  HIGH      BIT(1),{
NODISP    BIT(1),{                           02  MDT       BIT(1),{
                02  INPUTONLY BIT(1),{                           02  CU
BIT(1),{                           02  FOUND     BIT(1),Ë{
      02  ORDER     CHAR(3),{                           02  DATA      V
HAR(20);ü{-             RC = SCREEN(CMD,WCO,AID,CPOS,REA,NUM FIELDEFS);¦
{- ¦{- ¦{- ¦{- Ë{-                                           - 3 -¦{- ¦{
- Ä{           1.3   PARAMETER DESCRIPTIONSÄ{+                _________
____È{0          1.3.1   PARAMETERS PASSED TO SCREENÈ{+
___ ______ __ ______{0          1.3.1.1   NUM -- NUMBER OF ELEMENTS USE
      THIS IS THE SPECIFICATION OF THE THE  NUMBER OF ELEMENTS USED IN T
           RAY OF STRUCTURES PASSED TO SCREEN.²{0          VALUES:È{
     -1 -  ISSUE THE COMMAND ONLY.¡{                       THIS SPECIAL
S USED TO SIGNAL THAT  ONLY THE COMMAND¡{                       IS TO  B
ED.   NO FIELDS  FROM THE FIELDEFS  ARE PRO-¡{                       CES
 READ  IS PERFORMED (REGARDLESS OF  THE COMMAND),¡{
 DATA  IS TRANSMITTED TO THE TERMINAL.    THIS TYPE OF¡{
CTION IS  DESIRABLE FOR DOING  A SCREEN CLEAR.    MOST FULL¡{
    SCREEN PROGRAMS RUNNING UNDER TSO WILL DO A SCREEN CLEAR BE-¡{
         FORE TERMIMATING TO LEAVE THE SCREEN BLANK.   WHEN THIS CALL¡{
              IS ISSUED,  A SET OF FIELDEFS MUST BE SUPPLIED BUT THEY WI
                   NOT BE USED OR MODIFIED.Ô{                 0  -  USE
ER OF ELEMENTS IN THE ARRAY.¡{                       THIS SPECIAL VALUE
TO  SIGNAL TO THE PROGRAM THAT IT¡{                       SHOULD CALCULA
UMBER OF  FIELD DEFINITIONS TO PROCESSŒ{                       FROM THE
ND LOWER BOUNDS  OF THE ARRAY  OF FIELDEFS. ¡{                       THI
E VALUE  NORMALLY USED  WHEN USING  SCREENS WHOSE¡{
DEFINITIONS ARE HARD CODED.   THIS VALUE SHOULD NOT BE¡{
SED WHEN  USING THE STRUCTURED  SCREEN DECLARATIONS  AS THE¡{
    SCREEN INTERFACE  WILL PICK UP  THE NUMBER OF  ELEMENTS FROM¡{
         THE OVERLAY  WHICH IS PASSED  AND GIVE ERRONEOUS  RESULTS IF¡{
              THE NUMBER  OF ELEMENTS  IN THE OVERLAY  DOES NOT  MATCH T
                   NUMBER OF FIELDS ACTUALLY DEFINED.¸{
Œ{                       "N" IS  THE NUMBER OF ELEMENTS  IN THE ARRAY  O
URES. ¡{                       IF A VALUE FOR  N IS GIVEN WHICH IS GREAT
 THE NUMBER¡{                       OF ELEMEMTS, AN ERROR WILL BE FLAGGE
GIVES THE NUMBER¡{                       OF ELEMENTS IN  THE ARRAY OF FI
INITION STRUCTURES TOÀ{                       PROCESS.¦{- ¦{- ¦{- ¦{- ¦{
- ¦{- ¦{- ¦{- Ë{-                                           - 4 -¦{- ¦{
 {           1.3.1.2   CMD -- DISPLAY COMMAND¡{0          THE DISPLAY
SPECIFIES WHAT  TYPE OF  OUTPUT OPERATION IS  TO BE¡{           PERFORME
  INPUT OPERATION,  IF ANY,   IS ALWAYS A  READ MODIFIED¡{           FIE
ATION.  THE VALUES PASSED TO SCREEN ARE THE CHARACTER STRINGS{
ELOW AS THE VALUES.²{0          VALUES:»{                 ERASE/WRITE¡{
              THIS IS THE NORMAL OUTPUT  OPERATION.   THE SCREEN IS ERAS
                   AND REWRITTEN FROM  SCRATCH.   THE OUTPUT OPERATION
{                       FOLLOWED BY A READ.Æ{                 EWN - ERAS
NOREAD¡{                       THIS COMMAND CAUSES AN ERASE WRITE BUT SK
READ OPERA-»{                       TION.{                 WRITE¡{
          THIS COMMAND CAUSES THE FIELDS SUPPLIED  WITH THE CALL TO BE¡{
               OVERLAID ONTO  THE EXISTING SCREEN  THUS REPLACING  THE O
                    GIONAL FIELDS.   THE OUTPUT OPERATION  IS THEN FOLLO
»{                       READ.Â{                 WN - WRITE-NOREAD‚{
           THIS COMMAND CAUSES A WRITE BUT SKIPS THE READ OERATION.{
      EWA - ERASE-WRITE-ALTERNATE¡{                       THIS COMMAND I
AME AS AN ERASE/WRITE  EXCEPT THAT FOR¡{                       TERMINALS
AL  SIZE SCREENS,  THIS COMMNAD  SHIFTS THE¡{                       TERM
O  THE ALTERNATE  SCREEN SIZE.    NOTE THAT  THE¡{
OMMAND  DOES NOT AFFECT THE  SCREEN SIZE AND  THAT AN¡{
ASE/WRITE COMMAND  WILL REVERT THE  SCREEN TO  THE DEFAULT»{
   SIZE.Í{                 EWAN - ERASE-WRITE-ALTERNATE-NOREAD¡{
       THIS COMMAND IS  LIKE AN ERASE-WRITE-ALTERNATE BUT  IT SKIPSÇ{
            THE READ OPERATION.{                 EAU - ERASE ALL UNPROT
                      THIS COMMAND CAUSES ALL UNPROTECED FIELDS TO BE ER
HE¡{                       OPERATION IF THEN FOLLOWED BY A READ.  THIS C
OES NOT¡{                       USE ANY FIELD DEFINITION.  INPUT FIELDS
MUST BE SUP-({                       PLIED FOR ANY FIELDS RETURNED BY TH
PERATION.¡{                 NOTE: DUE TO THE RESTRICTIONS IMPOSED BY THE
CRO UNDER TSO, {                 THE EAU COMMAND IS NOT FUNCTIONAL.  (TO
- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- Ë{
    - 5 -¦{- ¦{  ¦{- ¦{- Ë{           1.3.1.3   WCO -- WRITE CONTROL OPT
         THIS 5 BIT STRING IS USED TO  SPECIFY CERTAIN OPTIONS USED IN O
G¡{           THE DATA TO THE DISPLAY STATION.   EACH OF THE THREE CHARA
CS AS-¡{           SOCIATED WITH THIS OPTION HAS 1 BIT  IN THE STRING.
UE USED FORÅ{           MOST APPLICATIONS IS '01101'.²{0          VALUES
            BIT 1 - AUDIBLE ALARM¡{                           IF THE TER
 EQUIPTED WITH AN AUDIBLE ALARM,  THEN¡{                           SPECI
 OF THIS BIT WILL  CAUSE THE ALARM TO SOUNDÎ{
HE WRITE OPERATION.Æ{                 BIT 2 - RESTORE KEYBOARD¡{
           TURNING THIS  BIT ON HAS  THE FOLLOWING  RESULT.   AFTER¡{
                COMPLETION OF THE OUTPUT EVENT,   THE TERMINAL IS SET TO
                     ALLOW KEYBOARD INPUT.    IF THIS BIT IS  NOT SET ('
                          THEN THE OPERATOR MUST PUSH  THE RESET BUTTON
N-¡{                           PUT WILL BE ALLOWED.   THIS BIT  IS NORMA
 IN THE<{                           ON POSITION EXCEPT FOR USE WITH ERRO
ES.{                 BIT 3 - RESET MDT'S¡{                           TH
TS (FOUND BITS)  ARE SET WHEN A FIELD IS MODI-¡{
BY THE OPERATOR OR BY  SPECIFICATION OF THE MDT BIT¡{
BY THE  PROGRAM.   DURING  A READ  OPERATION,  ONLY  THE¡{
     FIELDS WITH THE MDT BITS SET  ARE MARKED AS FOUND IN THE¡{
          ARRAY OF STRUCTURES PASSED.   WHEN THIS BIT IS SET,  ALL¡{
               MDT BITS ARE RESET SO THAT ONLY THE FIELDS MODIFIED DUR-¡
                    ING THIS OUTPUT-INPUT CYCLE ARE  RETURNED.   THIS BI
                         NORMALLY USED IN THE ON POSITION.É{
 4  -  DON'T PROTECT SCREEN¡{                           BY DEFAULT THE S
TERFACE INSERTS A TRAILING FIELD¡{                           WHICH MAKES
SED PORTION OF THE SCREEN NON-DISPLAY¡{                           AND PR
   TURN THIS BIT ON ('1'B)  TO CANCEL THIS¡{                           F
  IF THE FEATURE IS NOT USED THE UNUSED PORTION¡{
HE  SCREEN HAS THE ATTRIBUTES  OF THE LAST  FIELD ON¡{
 THE SCREEN.   ALSO NOTE THAT THIS ATTRIBUTE WRAPS AROUND¡{
      UP TO THE FIRST FIELD ON  THE SCREEN.   THIS BIT IS NOR-¡{
           MALLY OFF  IN PROGRAMS USING ERASE/WRITE  OPERATIONS AND¡{
                NORMALLY ON IN PROGRAMS DOING  SCREEN UPDATES.   THIS IS
                     BECAUSE IN  SCREEN UPDATE PROGRAMS  YOU DO NOT  WAN
                          EXTRA FIELD TO  BE OUTPUT WHILE IN   PROGRAMS
LY¡{                           ERASE/WRITE,  YOU WANT THE UNUSED  PORTIO
 SCREEN{                           TO BE PROTECTED.{                 B
 CONVERT TO UPPER CASE¡{                           SPECIFYING THIS BIT (
AUSES THE SCREEN PROGRAM TO¡{                           TRANSLATE ALL AL
 INPUT FIELDS TO UPPER CASE.  IF¡{                           THIS BIT  I
PECIFIED,  THE  DATA IS  LEFT IN  UP-Ç{                           PER/LO
.¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- Ë{
¦{- ¦{  ¦{- ¦{- Ì{           1.3.1.4   FIELDEFS -- FIELD DEFINITIONS¡{0
 THE FIELDS TO  BE READ AND WRITTEN  ARE DESCRIBED BY AN  ARRAY OF STRUC
      TURES. EACH ELEMENT IN THE ARRAY REPRESENTS 1 FIELD.  THE FIELDS M
           ARRANGED IN ASCENDING ROW-COLUMN ORDER.   THUS A FIELD STARTI
W 2¡{           COL 50 FOLLOWS A  FIELD STARTING AT ROW 2 COL 1 AND  A F
RTING ATƒ{           ROW 3 COL 1 FOLLOWS A FIELD STARTING AT ROW 2 COL 5
       VALUES: STRUCTURE ELEMENTS AND VALUESË{0                ROW  -
W FOR THE FIELD¡{                           THIS IS THE ROW IN WHICH  TH
BEING DEFINED BY THE<{                           ELEMENT IN THE ARRAY OF
RES IS TO START.Í{0                COL  -   START COLUMN FOR THE FIELD¡{
                   THIS IS THE  COLUMN IN WHICH THE FIELD  BEING DEFINED
                        TO START.  AN IMPORTANT NOTE IS THAT THE POSITIO
¡{                           FIED BY THE ROW AND COLUMN IS THE POSITION
TTRI-¡{                           BUTE CHARACTER FOR THIS FIELD.   IF AN
FIELD SPE-¡{                           CIFIES ROW 1 COL 1,  THE  THE FIR
ED CHARACTER OF¡{                           THAT COLUMN IS IN ROW 1  COL
 THE FIELD SPECIFIES¡{                           COLUMN 80 THE FIRST CHA
ILL APPEAR ON COLUMN 1 OF¡{                           THE NEXT LINE.   T
ACTERISTIC APPLIES TO BOTH IN-.{                           PUT AND OUTPU
 FOR A START FIELD ORDER.Œ{0                          A SPECIAL SET OF V
XISTS FOR ANY ROW-COLUMN PAIR. ¡{                           THIS VALUE I
COL 0.  SPECIFYING ROW 0 COL 0 FOR A¡{                           FIELD C
HE FIELD  TO START  IMEDIATELY AFTER  THE¡{                           PR
FIELD.   (FOR  THE FIRST FIELD ON  THE SCREEN,¡{
IS THE SAME AS SPECIFYING ROW 1 COL 1.)  SPECIFYING¡{
ROW 0 COL NOT  ZERO OR ROW NOT ZERO COL  0 WILL CAUSE ANÉ{
     ERROR TO BE FLAGGED.
{                           EXAMPLE:¡{
           A FIVE CHARACTER  FIELD STARTING AT ROW 4 COL  4 IS FOL-¡{
                LOWED BY A  FIELD STARTING AT ROW 0 COL  0.   THE FIELDS
                     WILL APPEAR AS FOLLOWS:{
2345A.....¡{                           WHERE 'A' IS THE ATTRIBUTE CHARAC
THE ROW 0 COL 0¡{                           IS ONLY VALID FOR A START  F
ER.  (SEE ORDER SEC-Ë{                           TION OF THE FIELDEFS).
          PROTECT   WRITE PROTECT FLAG¡{                           WHEN
G IS SET  ('1'B),  THIS FIELD BEING DEFINED¡{
CTED.  THIS MEANS THAT THE OPERATOR CANNOT ENTER{
A INTO THIS FIELD.ü{0                AUTO_NUM  AUTOMATIC SKIP OR NUMERIC
.¡{                           THIS FLAG  HAS ONE  OF TWO  MEANINGS DEPEN
ON THE¡{                           SETTING OF  THE PROTECT FLAG  FOR THI
    IF THIS¡{                           FLAG IS SET  AND THE PROTECT FLA
  SET,  THEN THE¡{                           FIELD BEING DEFINED IS NUME
PROTECTED.   THIS ME-Œ{                           ANS THAT  ONLY NUMBERS
 ENTERED INTO  THIS FIELD. ¡{                           THIS OPTION IS O
 FOR TERMINALS ON WHICH THE NUM-¡{                           ERIC PROTEC
E  IS INSTALLED.   IF BOTH  THIS FLAG¡{                           AND TH
T  FLAG ARE SET,  THE  FIELD BEING DEFINED¡{                           W
N AUTO SKIP FIELD.   THIS MEANS THAT IF THE OP-¡{
OR IS ENTERING DATA IN  THE FIELD PRECEDING THIS ONE¡{
 AND TYPES  OVER THE END OF  THE FIELD,  HIS  CURSOR WILL¡{
      JUMP OVER THIS AUTOMATICALLY.    THE ALTERNATIVE IS THAT¡{
           THE KEYBOARD  WILL LOCK  WHEN THE  OPERATOR ATTEMPTS  TO¡{
                TYPE ON THE  FIRST CHARACTER OF THIS  FIELD.   THIS LAST
                     ALTERNATIVE IS TAKEN WHEN THE PROTECT BIT IS SET AN
                          NUMERIC PROTECT BIT IS NOT SET.Ð{0
  -   HIGH INTENSITY FLAG. BIT(1).¦{- Ë{
    - 7 -¦{- ¦{  ¦{- ¦{- ¡{                           WHEN THIS  FLAG IS
1'B),  THEN  ANY DATA  IN THIS¡{                           FIELD IS  DIS
T  HIGH INTENSITY.    THIS INCLUDESÑ{                           BOTH INP
UTPUT FIELDS.{0                NODISP  - DON'T DISPLAY DATAŒ{
         THIS FLAG IS USED FOR SECURITY FIELDS SUCH AS PASSWORDS. ¡{
               THE FIELD IS TREATED NORMALLY  EXCEPT THAT DATA INPUT ORÔ
                    OUTPUT IS NOT DISPLAYED ON THE TUBE.Ä{0
-    SET MDT FLAG¡{                           SETTING THIS  FLAG FORCES
 BIT USED BY  THE 3270¡{                           SCREEN TO BE  SET TO
DLESS OF  WHETHER THE FIELD¡{                           IS  MODIFIED.
  THE 3270  RETURNS ONLY  FIELDS¡{                           CHANGED.
  CAUSES THE FIELD TO  BE TRANSMITTED¡{                           BACK B
70 REGARDLESS OF  WHETHER THE FIELD IS MO-¡{                           D
THE ACTION OBSERVED BY A PL/I PROGRAM WITH RES-¡{
 TO THIS BIT IS THAT SETTING THIS BIT WILL CAUSE THEÉ{
 FOUND BIT TO BE SET..{0                INPUTONLY  -  THIS DEFINITION IS
UT ONLY, BIT(1).¡{                           WHEN THIS FLAG IS SET ('1'B
IELD BEING DEFIEND IS¡{                           NOT USED FOR OUTPUT.
LD MAY HOWEVER BE USED FOR¡{                           RECIEVING AN INPU
   THIS IS PARTICULARLY USEFULL¡{                           WHEN USING T
AM TAB ('PT ')  ORDER.   A FIELD DE-¡{                           FINED W
 ORDER CANNOT BE USED TO RECEIVE AN INPUT¡{                           FI
 FIELD  WITH THE NOUSE ATTRIBUTE  COULD BE DE-¡{
 TO RECEIVE THE INPUT FIELD.   SEE SECTION ON WRIT-†{
ING A FULLSCREEN PROGRAM FOR MORE DETAILS.É{0                CURSOR  - P
R HERE FLAG¡{                           THIS FLAG IS SET FOR A  FIELD DE
 TO INDICATE THE¡{                           THE CURSOR IS TO BE PLACED
THE END OF THE OUTPUT¡{                           OPERATION TO THE DISPL
S FLAG IS SET NORMALLY FOR¡{                           THE FIRST FIELD W
TO RECEIVE INPUT FROM THE OPER-¡{                           ATOR.   THIS
Y ONLY BE SET ONCE DURING A PARTICU-+{                           LAR SCR
NITION (SET OF FIELD DEFINITIONS).È{0                FOUND  -  FOUND FLA
).¡{                           THIS FLAG  IS SET  UNDER ONE  OF TWO  CON
BY  THE¡{                           SCREEN PROGRAM.   THE  FIRST IS IF T
D DEFINED BY¡{                           THIS ELEMENT IN  THE ARRAY OF S
S  HAS BEEN MODI-¡{                           FIED BY THE OPERATOR.   TH
 IS IF THE MDT BIT WAS¡{                           SPECIFIED FOR THIS FI
HE  FOUND FLAG IS AUTOMATI-¡{                           CALLY RESET FOR
LD OUTPUT.   THUS NO INITIALIZA-{                           TION OF THI
IS REQUIRED.‚{0                ORDER  -  OUTPUT ORDER CODE FOR THIS FIEL
ION, CHAR(3).¡{                           THE OUTPUT ORDER  CODE DETERMI
 KIND  OF FIELD IS¡{                           BEING DEFINED  BY THIS  E
N  THE ARRAY  OF STRUC-¡{                           TURES.   THIS FIELD
LY SET TO ALL BLANKS FOR THE¡{                           STANDARD OUTPUT
T FIELD.   THE ALLOWED VALUES ARE¡{                           DESCRIBED
   THIS FIELD IS  A 3  CHARACTER FIXED¡{                           LENGT
G WHOSE  VALUES ARE  THE CHARACTER  STRINGSÄ{
LOW.Â{0                          VALUES:Ð{0                          (BL
TART FIELD ORDER.¡{                                     THIS IS THE NORM
 OR OUTPUT FIELD.   IT¡{                                     SPECIFIES T
ELD IS  TO START AT THE ROW.{                                     AND CO
IED IN THIS STRUCTURE.Î{0                          PT  -     PROGRAM TAB
                                     THIS ORDER  CAUSES THE DATA  ACCOMP
HIS¡{                                     STRUCTURE TO  BE OUTPUT  START
THE NEXT¡{                                     UNPROTECTED FIELD.   THE
 COL ELEMENTS¡{                                     IN THIS STRUCTURE  A
ED AS ARE  THE AT-Ë{-                                           - 8 -¦{-
 ¦{- ¡{                                     TRIBUTE FLAGS.   THE ATTRIBU
TAKEN FROM¡{                                     THE UNPROTECTED FIELD B
D.  IF THE CUR-¡{                                     RENT  BUFFER  POSI
 IN  AN  UNPROTECTED¡{                                     FIELD,   THE
THIS FIELD IS NULLED OUT.¡{                                     NOTE THA
TA CAN  BE RETURNED IN  A DATAŒ{                                     FIE
 STRUCTURE  ELEMENT SPECIFIES 'PT'. ¡{
IS BECAUSE THE LOCATION  OF THE FIELD BE-¡{
ING OUTPUT ON THE SCREEN IS NEVER KNOWN BY THE¡{
     SCREEN  INTERFACE PROGRAM  STRUCTURE  ELEMENTS¡{
          MARKED AS  NOT USED  MAY BE  USED TO  RETRIEVEÇ{
               DATA.Ó{0                          RA  -     REPEAT TO ADD
ER¡{                                     THIS ORDER REPEATS THE SINGLE (
)  DATA¡{                                     CHARACTER UP TO BUT NOT  I
 THE ROW AND¡{                                     COLUMN SPECIFIED IN T
CTURE.  THE CHAR-¡{                                     ACTER INSERTION
AT THE  CURRENT SCREEN¡{                                     POSITION.
AT THE CURRENT SCREEN POSI-¡{                                     TION M
PECIFIED BY  A NULL  FIELD IMME-¡{                                     D
ECEEDING THIS FIELD.   FOR THIS FIELD¡{
ATTRIBUTE FLAGS ARE  IGNORED.   THE ATTRI-Š{
 BUTES ARE PICKED UP FROM THE PRECEDING FIELD.¤{0
-    ERASE UNPROTECTED TO ADDRESS ORDER¡{
IS ORDER ERASES ALL UNPROTECED FIELDS START-¡{
   ING AT THE CURRENT ROW AND COL AND CONNTINUING¡{
        UP TO BUT NOT INCLUDING  THE SPECIFIED ROW AND¡{
             COLUMN.  DATA FOR THIS ORDER IS IGNORED.  NOTE¡{
                  THAT EAU  WILL ERASE  ATTIBUTE CHARACTERS  AND¡{
                       THAT THE  ATTRIBUTE FLAGS  FOR THIS  STRUCTUREË{
                            ARE IGNORED.Ó{0                DATA  -   DAT
E FIELD BEING DEFINED.¡{                           DATA IS A VARYING LEN
ACTER STRING CONTAINING THE¡{                           DATA TO  BE OUTP
ROVIDING  A PLACE  TO PUT  INPUT¡{                           DATA.   IT
BE DECLARED LARGE ENOUGH  TO HOLD THE¡{                           LARGES
OR OUTPUT FIELD DEFINED FOR THE SCREEN BE-¡{                           I
ED.   SINCE THE DATA  FIELD IS A VARYING LENGTH¡{
D,  THE CURRENT LENGTH CAN BE  FROM ZERO TO THE DEC-¡{
 LARED LENGTH.   THE  LENGTH OF THE FIELD  DATA OUTPUT IS¡{
      TAKEN FROM THE CURRENT LENGTH OF THE DATA.  THUS A FIELDÒ{
           OF LENGTH ZERO CAN BE DEFINED.¡{0
 ON THE SCREEN EXTENDS TO THE ATTRIBUTE CHARA-¡{
F THE  NEXT FIELD ON THE SCREEN.   IF  YOU OUTPUT 5¡{
CHARACTERS OF DATA AND THE  NEXT FIELD STARTS 10 CHARAC-¡{
     TERS PAST THE START OF THIS FIELD,  THEN THE FIELD IS 10{
          CHARACTERS LONG.¡{0                             IF THE ROW  0
ECIAL VALUES ARE  USED THE NEXT¡{                           FIELD STARTS
TELY AFTER THE THE LAST CHARACTER OF¡{                           THE DAT
E SHOULD BE  TAKEN WHEN USING THIS OPTION¡{                           AS
LENGTH OF ZERO WILL  CAUSE THE FIELD TO HAVE AÇ{
H OF ZERO.¦{- ¦{- ¦{- ¦{- ¦{- Ë{
-¦{- ¦{  ¦{- ¦{- {           1.3.2   PARAMETERS RETURNED BY SCREEN{+
        __________ ________ __ ______Ã{0          1.3.2.1   RC -- RETURN
          THE RETURN CODE SPECIFIES WHAT TYPE OF ERRORS, IF ANY,  WERE E
ED¡{           DURING THE SCREEN MANIPULATION.   THE REASON CODE GIVES M
RMATION{           FOR SOME ERROR TYPES.¦{- Ë{
           Table{0                                  RETURN CODES FROM S
          VALUES:{                       0   - SUCCESS‚{0
4   - THE TSO TERMINAL TO WHICH THE TPUT WOULD BE OUTPUT‡{
       IS NOT A DISPLAY STATION WITH FULL SCREEN&{
APABILITIES.  THEREFORE FULLSCREEN I/O CANNOT BEÂ{
SED..{0                      8   - ERROR IN PARSING THE STRUCTURE:   DUR
{                             CREATION OF THE SCREEN TO BE OUTPUT TO THE
L+{                             AN ERROR WAS DETECTED WHICH PREVENTS THE
{                             FORMATTING OF THE SCREEN.  THE SCREEN IS N
T&{                             AND THE REASON CODE PARM CONTAINS THE RE
E‚{                             IN ELEMENT 1 AND THE INDEX OF THE STRUCT
ERÍ{                             WHICH CAUSED THE ERROR.<{
       REASONS 1 TO 9 AND 11 TO 14 MAY BE ASSOCIATED{
   WITH THIS RETURN CODE.+{0                      12  - ERROR RELOADING
T STRUCTURE:  AFTER THE({                             DATA HAS BEEN RETR
OM THE TERMINAL, AND+{                             DURING THE LOADING OF
UCTURE DATA FIELDS‚{                             WHICH WERE UPDATED, AN
S DETECTED. IN MOST<{                             CASES THIS IS REASON 1
 INDICATES THAT<{                             A FIELD WAS ENCOUNTERED WH
LONGER THANˆ{                             COULD BE PUT INTO THE STRUCTUR
DATA FOR THIS×{                             FIELD IS TRUNCATED AND THE S
EMENT OF THE×{                             REASON CODE IS SET TO THE IND
E STRUCTUREˆ{                             IN THE ARRAY OF STRUCTURES WHI
RUNCATED.  IN×{                             CASES WHERE THERE ARE MULTIP
ATIONS,  THE+{                             SECOND ELEMENT OF THE REASON
SET TO THE<{                             LAST (LARGEST) INDEX RESULTING
ATION.+{                             REASON CODE 11 SHOULD NEVER BE ENCO
  IF({                             IT IS, A PROBABLE INTERFACE ERROR HAS
,({                             BRING THE PROBLEM TO THE RESPONSIBLE DES
0                      16  - TPUT ERROR:  ELEMENT 1 OF THE REASON PARM G
                           THE TPUT RETURN CODE.+{0
GET ERROR.  ELEMENT 1 OF THE REASON PARM GIVESÌ{
 TGET RETURN CODE.+{0                      24  - INVALID COMMAND SPECIFI
E CMD PARM:  THE({                             COMMAND PASSED WAS CHECKE
T THE LIST OF&{                             VALID COMMANDS AND NO MATCH
D.  NOTE THAT<{                             THE COMMAND MUST NOT CONTAIN
G BLANKS.Ö{0                      28  - IN LOADING THE INPUT STRUCTURE,
WAS‡{                             RECEIVED FROM TGET FOR WHICH THERE WAS
                          STRUCTURE FIELD IN WHICH TO PLACE IT.  THE¤{
                   REASON CODE CONTAINS THE ROW AND COLUMN AT.{
            WHICH THE FIELD STARTED.  DATA HAS BEEN LOST({
       AND LOADING OF THE STRUCTURE HAS BE TERMINATEDÎ{
    PAST THIS ROW AND COLUMN.Ì{-
-¦{- ¦{  ¦{- ¦{- Ë{                                            TableÐ{0
                            TPUT RETURN CODESÒ{-               THIS TABL
EN FROM IBM PUBLICATION:¡{                GC28-0648-2  OS/VS2 TSO GUIDE
NG A TERMINAL MONITOR PROGRAM{                             OR A COMMAND
OR‚{-                      00  -  TPUT COMPLETED SUCCESSFULLY. THIS CODE
VERƒ{                              BE RETURNED BY THE SCREEN PROGRAM.‚{0
              04  -  NOWAIT WAS SPECIFIED AND NO TERMIAL OUTPUT BUFFERˆ{
                      WAS AVAILABLE.  THIS CODE SHOULD NEVER BE RETURNED
                        BY THE SCREEN PROGRAM.  IF IT IS, CONTACT THE{
                     RESPONSIBLE DESIGNER.‚{0                      08  -
ENTION INTERRUPT OCCURED WHILE THE TPUT SVCÖ{
ROCESSING.  THE MESSAGE WAS NOT SENT.‚{0                      12  -  A T
O INSTRUCTION WITH AN ASID OPERAND WAS({                              IS
 THE USER AT THE TERMINAL INDICATED‡{                              BY TH
EQUESTED THAT INTERTERMINAL({                              MESSAGES NOT
ED ON HIS TERMINAL.  THE({                              MESSAGE WAS NOT
HIS CODE SHOULD NEVERƒ{                              BE RETURNED BY THE
ROGRAM.×{0                      16  -  INVALID PARAMETERS WERE PASSED TO
T SVC.¤{                              SCREEN PROGRAM ERROR, CONTACT RESP
{                              DESIGNER.&{0                      20  -
INAL HAS BEEN DISCONNECTED AND COULD NOTÆ{
ED.¦{- Ä{0          1.3.2.2   REA -- REASON CODE¡{0          THIS TWO EL
XED BINARY(15)  ARRAY CONTAINS ADDITIONAL INFORMATION¡{           FOR SO
N CODES.    THE REASON CODES FOR RETURN CODES  OF 8 AND 12¡{           C
F  ONE OF THE  CODES SHOWN BELOW IN  ELEMENT 1 AND  THE ELEMENT¡{
ER FROM  THE ARRAY OF  STRUCTURES WHICH CAUSED  THE ERROR TO  BE DE-¡{
 TECTED IN ELEMENT 2.  FOR RETURN CODES OF 16 AND 20,  ELEMENT 1 CONTAIN
      THE TPUT OR TGET RETURN CODE AND ELEMENT 2 IS ZERO.  FOR RETURN CO
           ELEMENT 1 CONTAINS  THE ROW OF THE  FIELD WHICH COULD NOT  BE
ANDÎ{           ELEMENT 2 CONAINS THE COLUMN OF THIS FIELD.¦{- Í{
2.3   AID -- ATTENTION IDENTIFICATION¡{0          THIS CODE IS RETURNED
ALLING  PL/I PROGRAM IN A FIXED BINARY(15)Ö{           VARIABLE TO IDENT
H KEY WAS PRESSED TO ENTER THE DATA.¡{0             IT IS NOT POSSIBLE W
CURRENT  VERSION OF SCREEN TO RECEIVE ALL¡{           OF THE AID CODES.
1 IS INTERCEPTED BY TSO AND TAKEN TO BE AN AT-¡{           TENTION.  CLE
SO INTERCEPETED BY TSO.   THE SCREEN IS CLEARED AND¡{           TSO WAIT
ORE INTPUT.   THIS ACTION BY THE  OPERATOR WILL PROBABLY¡{           RES
 RETURN CODE OF 28 UNLESS A FIELD WAS DEFINED FOR ROW 1 COL 1¡{
 OR PA2 WAS PRESSED.   IT  IS USUALLY DESIRABLE TO FOLLOW THE CON-¡{
ENTION OF USING PA2  TO BE A SCREEN REFRESH.   A  SCREEN REFRESH SHOULDË
    ALSO BE DONE FOLLOWING RETURN CODE 28.¦{- Ì{-
            - 11 -¦{- ¦{  ¦{- ¦{- Ë{
TableÐ{0                                     TGET RETURN CODESÒ{-
THIS TABLE IS TAKEN FROM IBM PUBLICATION:¡{                GC28-0648-2
SO GUIDE TO WRITING A TERMINAL MODITOR PROGRAM{
A COMMAND PROCESSOR‚{-                      00  -  TGET COMPLETED SUCCES
THIS CODE WILL NEVERƒ{                              BE RETURNED BY THE S
OGRAM.×{0                      04  -  NOWAIT WAS SPECIFIED AND NO INPUT
LABLE({                              TO BE READ THIS CODE SHOULD NEVER B
ED({                              BY THE SCREEN PROGRAM.  IF IT IS, CONT
{                              RESPONSIBLE DESIGNER.‚{0
 -  AN ATTENTION INTERRUPT OCCURED WHILE THE TGET SVC+{
     WAS PROCESSING.  THE MESSAGE WAS NOT RECEIVED.×{0
-  THE INPUT BUFFER WAS NOT LARGE ENOUGH TO ACCEPT‚{
  THE ENTIRE INPUT SENT FROM THE TERMINAL.  CONTACT×{
   THE RESPONSIBLE DESIGNNER,  SYSTEM CHANGES HAVE.{
  INVALIDATED THE BUFFER SIZING CALCULATIONS.×{0                      16
ALID PARAMETERS WERE PASSED TO THE TGET SVC.¤{
EN PROGRAM ERROR, CONTACT RESPONSIBLEÄ{                              DES
0                      20  -  THE TERMINAL HAS BEEN DISCONNECTED AND COU
                              BE REACHED.¦{- {           1.3.2.4   CPOS
OR POSITION¡{0          THIS 2 ELEMENT FIXED BINARY(15) ARRAY IS SET TO
TION OF THE CUR-Î{           SOR WHEN THE INPUT OPERATION WAS COMPLETED.
        VALUES:{                      ELEMENT 1  -  ROW CURSOR WAS INÑ{
              ELEMENT 2  -  COLUMN CURSOR WAS IN¦{- ¦{- ¦{- ¦{- ¦{- ¦{-
Ì{-                                           - 12 -¦{- ¦{  ¦{- ¦{- Ë{
                                  Table{0
  REASON CODES{0                     1  -  NUMBER OF ELEMENTS SPECIFIED
                         GREATER THAN THE NUMBER OF STRUCTURE ELEMENTS{
                    IN THE ARRAY PASSED.+{0                     2  -  CA
ERPRET THE ORDER SPECIFIED:  THE ORDER.{                            PASS
OMPARED AGAINST THE LIST OF VALID({                            ORDERS AN
CH WAS FOUND.  CHECK THE ORDERÖ{                            IN THE STRUC
MENT FOR THE FIELD BEING.{                            DEFINED AND CHECK
METER DECLARATIONS..{0                     3  -  ROW SPECIFIED IS INVALI
 NON-ZERO-ZERO+{                            ROW-COLUMN SPECIFICATION, A
ER LESS THAN.{                            ONE OR GREATER THAN THE NUMBER
 ON THE{                            SCREEN WAS ENCOUNTERED.({0
    4  -  COLUMN SPECIFIED IS INVALID: IN A NON-ZERO-ZERO<{
       ROW-COLUMN SPECIFICATION, A COLUMN NUMBER LESS<{
   THAN ONE OR GREATER THAT THE NUMBER OF ROWS ONÐ{
HE SCREEN WAS ENCOUNTERED.({0                     5  -  MULTIPLE ATTEMPT
ERT THE CURSOR.  SECONDÐ{                            ATTEMPT IS THE ONE
×{0                     6  -  TOO MUCH DATA, SCREEN BUFFER OVERFLOW:  MO
{                            WAS SUPPLIED THAN WILL FIT ON THE SCREEN.‡{
              7  -  STRUCTURE ELEMENT NOT IS ROW-COL ASSENDINGÁ{
            ORDER&{0                     8  -  PT OR EUA ORDER SPECIFIED
OMMAND OTHER THANË{                            WRITE OR WRITE NOREAD {0
            9  -  NO CHARACTER WAS SPECIFIED FOR A REPEAT{
       TO ADDRESS ORDERÕ{0                     10 -  DATA TRUNCATION ON
FIELDS.  DATA.{                            INSERTION COMPLETED.  ELEMENT
S TO THEÒ{                            LAST ELEMENT TO BE TRUNCATED.¤{0
           11 -  COULD NOT IDENTIFY CURSOR POSITION OR OTHER†{
          SCREEN ADDRESS, BRING LISTING AND DUMP TO.{
 AUTHOR.  ELEMENT 2 OF THE REASON CONTAINS THEÍ{
RMATTED SCREEN ADDR.Ì{0                     12 -  FIELD RUNS OFF SCREEN.
                13 -  ROW AND COLUMN SPECIFIED ARE SPECIFY A SCREEN.{
                 ADDRESS PAST THE CURRENT SCREEN ADDRESS:  THE({
            ROW AND COLUMN SPECIFIED FOR A FIELD DEFINITION({
         REFERED TO A BUFFER POSITION WHICH IS LESS THAN&{
      THE BUFFER POSITION AT WHICH THE LAST FIELD ENDED.+{
      THAT IS: IF A 20 CHARACTER FIELD STARTS AT ROW 2×{
    COL 2 THEN A FIELD MAY NOT START AT ROW 2 COL 10.†{0
-  REPEAT TO ADDRESS OR ERASE UNPROTECTED TO.{
S ORDER IMMEDIATELY FOLLOWING A PROGRAMÃ{                            TAB
{- ¦{- Ì{-                                           - 13 -¦{- ¦{  ¦{- ¦
                                         Table{0
          AID CODES.{0                     -1  -  RETURNED WHEN NO READ
N WAS EXECUTEDÃ{                      0   -  ENTER KEY{
  -  PF1  KEY{                      2   -  PF2  KEY{
-  PF3  KEY{                      4   -  PF4  KEY{
 PF5  KEY{                      6   -  PF6  KEY{
F7  KEY{                      8   -  PF8  KEY{                      9
  KEY{                      10  -  PF10 KEY{                      11
KEY{                      12  -  PF12 KEY{                      13  -
Y{                      14  -  PF14 KEY{                      15  -  P
{                      16  -  PF16 KEY{                      17  -  PF1
                     18  -  PF18 KEY{                      19  -  PF19
                   20  -  PF20 KEY{                      21  -  PF21 KE
                 22  -  PF22 KEY{                      23  -  PF23 KEY
               24  -  PF24 KEY{                      25  -  TEST REQ KE
IELDS READ†{                      26  -  CLEAR KEY, SCREEN ERASED, NO FI
DÍ{                      27  -  PA1 KEY, NO FIELDS READÍ{
8  -  PA2 KEY, NO FIELDS READÍ{                      29  -  PA3 KEY, NO
EAD¦{- {           1.4   WRITING FULL SCREEN PROGRAMS{+
 ____ ______ ________ {0          1.4.1   USING COMMAND ERASE/WRITE AND
ITE NOREAD {+                  _____ _______ ___________ ___ ___________
{0          1.4.1.1   GENERAL INFORMATION¡{0             THE ERASE  WRIT
DS  BOTH SERVES THE  FUNCTION OF  CLEARING THE¡{           SCREEN  COMPL
D  WRITING  THE SCREEN  DEFINED  BY THE  PARAMETERS¡{           PASSED
EN.    THE  DIFFERENCE   BETWEEN  EREASE/WRITE  AND  ER-¡{           ASE
OREAD IS THAT THE NOREAD COMMAND RETURNS DIRECTLY TO THE PRO-¡{
FTER THE  OUTPUT IS COMPLETED.   THE NORMAL COMMAND  ISSUES A READÍ{
ND WAITS FOR THE OPERATOR TO ENTER DATA.¡{0             THE ERASE/WRITE
IS THE MOST  BASIC FULL SCREEN COMMAND.   THE¡{           ERASE/WRITE/NO
  BE VIEWED AS AN  OPTION ON THE  ERASE/WRITE COM-¡{           MAND.  TH
PECIALLY TRUE SINCE THAT IS HOW IT IS IMPLEMENTED.  THE¡{           REST
S SECTION WILL  DEAL WITH  THE TWO ERASE/WRITE  COMMANDS TO-Ö{
AND THEN DESCRIBE HOW THEY SHOULD BE USED DIFFERENTLY.¡{0             TH
WRITE COMMAND  WILL ALWAYS BE THE FIRST  FULL SCREEN OUTPUT¡{
USED BY THE PROGRAM.  THIS IS BECAUSE THE OTHER COMMANDS (WRITE)¡{
ECT TO UPDATE A SCREEN THAT EXISTS.  ERASE/WRITE WILL USUALLY ALSO BE.{
  THE LAST COMMAND OUTPUT AS IT CAN BE USED TO CLEAR THE SCREEN.¡{0
TO USE ERASE/WRITE,   SET UP THE FIELD DEFINITIONS  STRUCTURE AND THE¡{
  OTHER COMMAND PARAMETERS AND ISSUE A CALL TO SCREEN.   UPON RETURN CHE
       THE RETURN CODE TO SEE  IF THE OUTPUT WORKED.   IF IT  DIDN'T WOR
{           ZERO RETURN CODE),  PERFORM ERROR ANALYSIS.    IF IT DID WOR
 THE¡{           FOUND ELEMENTS OF THE ARRAY TO SEE IF THERE ARE ANY CHA
LDS.  THEÌ{-                                           - 14 -¦{- ¦{  ¦{-
          PROGRAM MUST KNOW INTERNALLY WHICH STRUCTURE ELEMENTS CORRESPO
AT¡{           DATA.   THE  PROGRAM CAN THEN PROCESS  THE DATA NORMALLY
IDE THEÍ{           TYPE OF SCREEN OPERATION TO PERFORM NEXT.¡{0
 ERASE/WRITE COMMAND  WILL NORMALLY NOT HAVE ANY  OF THE INPUTONLY¡{
LAGS SET BECAUSE THE  STRUCTURE WILL BE CREATING A FULL  SCREEN AND ALLŒ
    FIELDS WHICH  COULD BE  INPUT WILL  NEED TO  BE DEFINED  ON THE  SCR
          FIELDS ARE DELIMITED BY THE START OF  THE NEXT FIELD.   A FIEL
IS¡{           ONLY PARTIALLY FILLED  IS PADDED WITH NULL CHARACTERS BY
0.   IN¡{           THE CASE OF THE LAST FIELD,  THERE IS NO NEXT FIELD.
AST FIELD ON¡{           THE SCREEN WILL WRAP AROUND AND TERMINATE  AT T
NING OF THE FIRST¡{           FIELD ON THE SCREEN.   THIS IS  NOT USUALL
RABLE CONTITION.   THE¡{           SCREEN INTERFACE WILL  OPTIONALLY INS
ELD AFTER THE  LAST ONE DE-¡{           FINED BY THE FIELD DEFINITIONS W
NON-DISPLAY AND PROTECTED.   THEŒ{           FOURTH WRITE  CONTROL OPTIO
ONTROLS WHETHER  THIS BIT  IS OUTPUT. ¡{           WHEN THE BIT IS 0,  T
 IS OUTPUT.   THIS FIELD IS STARTED IMMEDI-¡{           ATELY AFTER THE
A CHARACTER IN  THE LAST FIELD.   THE LAST FIELDŒ{           THEN, IF TH
N IS USED, SHOULD NOT BE AN INPUT FIELD WITH NO DATA. ¡{           IF IT
E  FIELD WILL HAVE A LENGTH OF ZERO WHICH  MAKES IT HARD TO¡{
TA.   IF AN INPUT FIELD IS TO  BE THE LAST FIELD,  THEN THE USERÒ{
ULD PROVIDE HIS OWN TRAILING PROTECT FIELD.¦{-  {           1.4.1.2   CL
 SCREEN AND USING ERASE WRITE NOREADŒ{0             TO  CLEAR A  SCREEN
LOWING  PARAMETERS  SHOULD BE  SPECIFIED. ¡{           CMD='EWR' (ERASE/
READ),  AND NUM=-1.   FIELD DEFINITIONS MUST BE¡{           SUPPLIED BUT
LL NOT BE USED.   ON  A SCREEN CLEAR THERE CAN BE NO¡{           INPUT R
   SPECIFYING CMD='ERASE/WRITE' WILL NOT CAUSE A READ OP-Ñ{           ER
NCE NUM=-1 FORCES THE NOREAD OPTION¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦{- ¦
{- Ì{-                                           - 15 -¦{- ¦{  ¦{- ¦{- É
    1.5   DEBUGGING FULL SCREEN PROGRAMSÉ{+                _________ ___
 ________¡{0          THE SAME TECHNIQUES USED IN DEBUGGING NORMAL ONLIN
MS MAY BE USED¡{           WITH THE FULL SCREEN INTERFACE.  THE INTERFAC
ORK WITH THE CHECK-¡{           OUT COMPILER.  TO RUN THE INTERFACE WITH
CKOUT COMPILER, THE PL/I¡{           SOURCE MUST BE COMPILED WITH THE NO
OBJECT OPTIONS AND A LOAD MO-¡{           DULE CREATED.   THE LOAD MODUL
ONTAIN, IN ADDTION TO THE COMPILED¡{           PL/I THE SCREEN INTERFACE
 THAT WHEN CREATING A CHECKOUT COMPILERŒ{           LOAD MODULE,  THE  I
TPUT ON FILE SYSITEXT)  MUST  ALSO BE SAVED. Œ{           THE SYSITEXT F
 PDS WITH  ONE MEMBER FOR EACH EXTERNAL PROCEDURE. Œ{           THE MEMB
  ARE THE SAME AS  THE EXTERNAL NAMES FOR  THE EXTERIOR. ¡{           AS
MAT  OF THE SYSITEXT FILE IS  THE SAME AS THE  LOAD MODULE,  A¡{
LIBRARY MAY BE USED TO CONTAIN BOTH THE ITEXT AND THE CHECKOUT COM-¡{
PILER LOAD MODULE.   CARE SHOULD BE TAKEN TO INSURE THAT THE LOAD MODULE
     CREATED DOES NOT HAVE THE SAME NAME AS ANY OF THE EXTERIORS IF THE
          AND LOAD MODULE ARE BEING STORED IN THE SAME DATASET.¡{0
HEN EXECUTING  THE CHECKOUT COMPILER  LOAD MODULE,  TWO  EXTRA FILES¡{
 MUST BE ALLOCATED.  FILE SYSITEXT MUST BE ALLOCATED TO THE ITEXT DATASE
      AND FILE SYSUT1 MUST BE ALLOCATED TO  SOME SPACE ON A DIRECT ACCES
           ICE.¡{0             THE MAIN PROBLEM ENCOUNTERED WITH DEBUGGI
LL SCREEN PROGRAM IS¡{           THAT THE SCREEN IS USED FOR DEBUGGING
 AND SCREEN OUTPUT AT THE¡{           SAME TIME.  A SCREEN OUTPUT WILL E
MUTILATE LINE BY LINE MESSAGESŒ{           PUT OUT BY THE PROGRAM AND LI
NE MESSAGES WILL MUTILATE A SCREEN. ¡{           THIS IS  NOT A SERIOUS
 IN  PROGRAMS WHICH USE  ONLY ERASE/WRITEŒ{           TYPE INSTRUCTIONS
  THAT THE BREAK POINTS  ARE CHOSEN CAREFULLY. ¡{           IF  THE CHEC
PILER  IS NOT USED THEN THE METHODS  USED FOR SCREEN.{           UPDATE
 CAN BE USED IN DEBUGGING FULL SCREEN PROGRAMS.¦{- {           1.5.1
G SCREEN UPDATE PROGRAMS{+                  _________ ______ ______ ___
          THE CHIEF  PROBLEM IN DEBUGGING SCREEN  UPDATE PROGRAMS IS THA
ST¡{           NOT MODIFY  THE SCREEN EXECEPT WITH  THE SCREEN INTERFACE
S MEANS¡{           THAT DEBUGGING DATA CANNOT BE OUTPUT TO THE TERMINAL
E NORMAL PUT¡{           DATA LINE BY LINE OUTPUT METHODS.    THUS FAR T
TIVE METHODS HAVE¡{           BEEN DISCOVERED FOR DEALING WITH THIS  PRO
OTE THAT THESE METHODS¡{           WORK EQUALLY  WELL WITH  PROGRAMS USI
 ERASE/WRITE  SCREEN OPERA-{           TIONS.Â{-          SEPARATE DEBU
LE¡{0          ONE DEBUGGING TECHNIQUE  IS TO PUT AN  OUTPUT STATEMENT T
E ALLO-¡{           CATED TO  A TSO DATASET FOLLOWING  EACH INVOCATION O
CREEN INTER-¡{           FACE.  THE OUTPUT SHOULD CONTAIN AN IDENTIFIER
WHICH CALL TO THE¡{           INTERFACE THIS  OUTPUT STATEMENT  REFERS T
 RETURN CODE  FROM THE¡{           INTEFACE,  AND THE REASON CODE FROM T
FACE.   OTHER DATA MAY ALSO¡{           BE INCLUDED  AS NEEDED.   THE PR
S THEN RUN UNTIL  SOMETHING GOES¡{           WRONG AND THEN THE  DEBUGGI
ET MAY BE INSPECTED FOR  A TRACE HIS-¡{           TORY OF  THE CALLS  TO
REEN INTERFACE.    TO FURTHER  PROTECT THE¡{           SCREEN  AGAINST E
S  OUTPUT,  THE  SYSPRINT FILE  SHOULD ALSO  BE¡{           ROUTED TO A
WHICH MAY BE INSPECTED LATER.   TO AVOID USING A DE-Ä{           BUGGING
 THE COMMAND:¡{            ALLOC FI(DEBUG) SYSOUT(X)  HOLD MAY BE USED T
E DUBUGGING OUTPUT¡{           (ASSUMING YOUR PROGRAM IS USING FILE DEBU
HE OUTPUT)  TO A SYSOUT¡{           DATASET WHICH MAY THEN  BE RETRIEVED
G THE OUTPUT  COMMAND OR THE»{           SPF OUTLIST MENU.Ç{-          S
EBUGGING SCREEN FIELDS¡{0          ANOTHER METHOD TO GET AT THE OUTPUT I
ERVE 1 OR MORE LINES ON THEŒ{           SCREEN FOR DEBUGGING OUTPUT.   T
ULD BE LINES NOT OTHERWISE USED. Ì{-
 16 -¦{- ¦{  ¦{- ¦{- ¡{           A CALL TO THE INTERFACE MAY THEN BE SE
CH WILL DISPLAY THE RETURN¡{           CODE  AND  REASON CODES FROM EACH
O THE INTERFACE.    THE COMMAND¡{           USED SHOULD BE  WN (WRITE/NO
ND WCO OPTIONS OF  '00110' WHOULD BE¡{           USED.   OTHER DATA MAY
T ON  THIS SCREEN USING THIS SAME TECHNI-{           QUE.¦{- {
 STRUCTURED PLI DECLARATIONS{+                __________ ___ __________
          AN ARRAY OF  STRUCTURES IS THE MOST USABLE METHOD  FOR INSPECT
{           VALUES RETURNED BY SCREEN.  THE INITIALIZATION OF THESE STRU
S ATŒ{           BEST  MESSY AND  OFTEN PRODUCES  AN UNREADABLE  PL/I DE
TATEMENT. ¡{           THIS ALSO HINDERS  DEBUGGING SINCE DETERMINING WH
  GO WITH WHICHü{           COLUMNS AND WHICH ATTRIBURES IS HARD TO DETE
0             THERE EXISTS A METHOD OF DECLARING THE OUTPUT STRUCTURE IN
WAY¡{           THAT THE LISTING IS  IN A STRUCTURED READABLE FORMAT.
 DONE BY¡{           DECLARING A SINGLE  THREE LEVEL STRUCTURE WHICH MAP
THE SAME STO-¡{           RAGE AS THE ARRAY OF STRUCTURES.   AN  ARRAY O
URES IS THEN BASED¡{           ON THE  ADDRESS OF THIS  ONE STRUCTURE AN
ARRAY OF  STRUCTURES IS¡{           THEN PASSED TO SCREEN.  THE CALL TO
OR THE BASED ARRAY OF STRUC-¡{           TURES IS THE SAME AS ANY OTHER
EPT THAT THE NUM PARAMETER SHOULD¡{           BE USED TO INDICATE THE NU
FIELDS TO OUTPUT.  THE FOLLOWING TABLE¡{           SHOWS A DECLARE FOR T
E STRUCTURE,  THE BASED ARRAY OF STRUCTURES{           AND A CALL TO SC
 ¦{- Ð{           1.6.1   SPECIAL NOTES ON STRUCTURED DECLARESÐ{+
   _______ _____ __ __________ ________¡{0             THE DECLARATION
 DATA STRUCTURE  ELEMENTS ON  THE STRUCTURED¡{           DECLARE MAY BE
TH BUT THEY MUST ALL BE THE SAME VALUE.  THE DATA¡{           IN THE FIE
E ANY LENGTH WITHIN EACH FIELD.   THE SCREEN INTERFACE¡{           PROGR
OUTPUTS THE DATA THAT IS THERE,  THE UNUSED PORTIONS OF THE¡{
LENGTH SCREEN ARE NOT OUTPUT.   THUS  IF THE DATA FIELDS ARE 100¡{
RACTERS LONG AND AND  YOU HAVE A 5 CHARACTER OUTPUT  FIELD,  ONLY THE¡{
  FIVE CHARATERS IN THAT FIELD ARE OUTPUT AND THE NEXT FIELD CAN START I
       MEDIATELY AFTER THE FIFTH CHARACTER.¡{0             THE DECLARATI
E DATA STURUCTURE ELEMENT IN THE ARRAY OF STRUC-¡{           TURES WHICH
S THE STRUCTURED DECLARATION,  MUST BE THE SAME VALUEˆ{           AS ALL
LARATIONS FOR THAT FIELD IN THE STRUCTURED DECLARATION.¦{- ¦{- ¦{- ¦{- ¦
{- Ì{-                                           - 17 -¦{- ¦{  ¦{- ¦{- Ë
                                     TableÔ{0
URED PL/I DECLARES AND CALL„{0               DCL CMD     VARYING CHAR(15
ERASE/WRITE');Ì{                DCL WCO     BIT(5) INIT('01111'B);{
    DCL AID     FIXED BINARY(15) INIT(0);Ö{                DCL NUM     F
ARY(15) INIT(/* NUMBER OF FIELDS */Ó{                DCL CPOS    (2) FIX
Y(15) INIT((2)0);Ó{                DCL REA     (2) FIXED BINARY(15) INIT
{                DCL RC      FIXED BINARY(15) INIT(0);¦{- Í{
1 FIELDEFS(100) BASED(ADDR(FD)),È{                      2   ROW   FIXED
È{                      2   COL   FIXED BIN(15),{
ECT   BIT(1),{                      2   AUTO_NUM  BIT(1),{
  2   HIGH      BIT(1),{                      2   NODISP    BIT(1),{
            2   MDT       BIT(1),{                      2   INPUTONLY B
                      2   CURSOR    BIT(1),{                      2   F
 BIT(1),{                      2   ORDER     CHAR(3),{
  DATA      VARYING CHAR(40);¦{- ¦{- ¦{- {               DECLARE 1 OUTP
 STATIC,{                         2  FIELD_1,Ó{
ROW   FIXED BIN(15) INIT(5),ü{                            3   COL   FIXE
) INIT(20),Ó{                            3   PROTECT   BIT(1) INIT('1'B)
                       3   AUTO_NUM  BIT(1) INIT('1'B),Ó{
     3   HIGH      BIT(1) INIT('1'B),Ó{                            3   N
 BIT(1) INIT('0'B),Ó{                            3   MDT       BIT(1) IN
,Ó{                            3   INPUTONLY BIT(1) INIT('0'B),Ó{
             3   CURSOR    BIT(1) INIT('0'B),Ó{
OUND     BIT(1) INIT('0'B), {                            3   ORDER     C
NIT('   '),.{                            3   DATA      VARYING CHAR(40)
TA1'),{                         2  FIELD_2,Ó{
W   FIXED BIN(15) INIT(6),ü{                            3   COL   FIXED
INIT(20),Ó{                            3   PROTECT   BIT(1) INIT('1'B),Ó
                     3   AUTO_NUM  BIT(1) INIT('1'B),Ó{
   3   HIGH      BIT(1) INIT('1'B),Ó{                            3   NOD
IT(1) INIT('0'B),Ó{                            3   MDT       BIT(1) INIT
{                            3   INPUTONLY BIT(1) INIT('0'B),Ó{
           3   CURSOR    BIT(1) INIT('0'B),Ó{
ND     BIT(1) INIT('0'B), {                            3   ORDER     CHA
T('   '),.{                            3   DATA      VARYING CHAR(40) IN
2'),Å{                                       .Å{
       .Å{                                       .Å{
           .Å{                                       .Ì{0
                    - 18 -¦{- ¦{  ¦{- ¦{- Å{
   .{                         2  FIELD_N,ü{
  FIXED BIN(15) INIT(17),Ó{                            3   COL   FIXED B
NIT(1),Ó{                            3   PROTECT   BIT(1) INIT('1'B),Ó{
                   3   AUTO_NUM  BIT(1) INIT('1'B),Ó{
 3   HIGH      BIT(1) INIT('0'B),Ó{                            3   NODIS
(1) INIT('0'B),Ó{                            3   MDT       BIT(1) INIT('
                           3   INPUTONLY BIT(1) INIT('0'B),Ó{
         3   CURSOR    BIT(1) INIT('0'B),Ó{                            3
     BIT(1) INIT('0'B), {                            3   ORDER     CHAR(
'   '),<{                            3   DATA      VARYING CHAR(40) INIT
');Á{-          1    DCL SCREEN ENTRY(Ë{
 CHAR(*),Å{                                 BIT(5),Ì{
      FIXED BINARY(15),Î{                                 (2) FIXED BINA
{                                 (2) FIXED BINARY(15),Ì{
          FIXED BINARY(15),Ã{                                 1(*),Ð{
                         2 FIXED BINARY(15),Ð{
  2 FIXED BINARY(15),{                                    2 BIT(1),{
                          2 BIT(1),{
),{                                    2 BIT(1),{
       2 BIT(1),{                                    2 BIT(1),{
                     2 BIT(1),{                                    2 BI
                                   2 CHAR(3),Ô{
   2 VARYING CHAR(*)) EXTERNALÎ{                            RETURNS(FIXE
(15)); {-              RC = SCREEN(CMD,WCO,AID,CPOS,REA,NUM,FIELDEFS);¦{
       1.7   SPECIAL ENTRY POINT TSIZEÇ{+                _______ _____ _
__¡{0             A SPECIAL ENTRY POINT,  TSIZE,  IS PROVIDED TO EXTRACT
OUT THE¡{           TERMINAL FOR USE BY THE APPLICATION PROGRAM USING TH
CREEN INTER-¡{           FACE.   THIS FUNCTION CALL RETURNS THE NUMBER O
ON THE SCREEN FOR¡{           THE TERMINAL WITH WHICH THE PROGRAM  IS CO
ING.   IF THE TERMINALƒ{           IS NOT A DISPLAY STATION, THE VALUE Z
ETURNED.Ã{0             SAMPLE DECLARE AND CALL:¤{0               DECLAR
ENTRY EXTERNAL RETURNS(FIXED BINARY(15)); {                DECLARE NUM_L
_SCREEN FIXED BINARY(15);{0               NUM_LINES_PER_SCREEN = TSIZE;
        THE VALUES WHICH ARE RETURNED WITH  THE TERMINALS AVAILABLE AS O
          DATE OF THIS WRITING  ARE:  0 FOR NON-DISPLAY TERMINALS;  24
24×{           LINE TERMINALS (3278-2); AND 43 FOR THE 43 LINE TERMINAL
.¡{0             THIS FUNCTION CALL IS ACCESSABLE AT ANY TIME THAT THE S
NCTION¡{           IS AVAILABLE AS THE SOURCE IS STORED IN THE SAME DATA
 THE SCREEN{           FUNCTION.¦{- Ì{
   - 19 -¦{- ¦{  ¦{- ¦{- ¦{- Ð{-                                     TAB
NTENTS¦{- ¡{           RELATED DOCUMENTS . . . . . . . . . . . . . . . .
 . . . . . . ii¡{-
                page¡{0          1.  3270 FULL SCREEN INTERFACE FROM PL/
 . . . . . . . . . . .  1¡{0                 INTRODUCTION . . . . . . .
. . . . . . . . . . . . . .  1¡{                  ACCESSING THE INTERFAC
 . . . . . . . . . . . . . . . .  2¡{                     ACCESSING THE
. . . . . . . . . . . . . . . . . . .  2¡{                     PL/I DECL
 . . . . . . . . . . . . . . . . . . . . .  3¡{                  PARAMET
IPTIONS . . . . . . . . . . . . . . . . . . . .  4¡{
ERS PASSED TO SCREEN . . . . . . . . . . . . . . . .  4¡{
 NUM -- NUMBER OF ELEMENTS USED . . . . . . . . . . . . .  4¡{
      CMD -- DISPLAY COMMAND . . . . . . . . . . . . . . . . .  5¡{
           WCO -- WRITE CONTROL OPTIONS . . . . . . . . . . . . . .  6¡{
                FIELDEFS -- FIELD DEFINITIONS  . . . . . . . . . . . . .
                  PARAMETERS RETURNED BY SCREEN . . . . . . . . . . . .
¡{                        RC -- RETURN CODE  . . . . . . . . . . . . . .
 . 10¡{                        REA -- REASON CODE . . . . . . . . . . .
. . . . 11¡{                        AID -- ATTENTION IDENTIFICATION  . .
 . . . . . . 11¡{                        CPOS -- CURSOR POSITION  . . .
. . . . . . . . . 12¡{                  WRITING FULL SCREEN PROGRAMS . .
 . . . . . . . . . . . 14¡{                     USING COMMAND ERASE/WRIT
ASE/WRITE NOREAD  . . . . . 14¡{                        GENERAL INFORMAT
 . . . . . . . . . . . . . . . . 14¡{                        CLEARING A
ND USING ERASE WRITE NOREAD . . . . . 15¡{                  DEBUGGING FU
N PROGRAMS . . . . . . . . . . . . . . . . 16¡{                     DEBU
REEN UPDATE PROGRAMS  . . . . . . . . . . . . . 16¡{                  ST
 PLI DECLARATIONS  . . . . . . . . . . . . . . . . . 17¡{
ECIAL NOTES ON STRUCTURED DECLARES  . . . . . . . . . . . 17¡{
SPECIAL ENTRY POINT TSIZE  . . . . . . . . . . . . . . . . . . 19¦{- ¦{-
 ¦{- ¦{- ¦{- ¦{- ¦{- Ì{-                                          - iii
 ©\INMR06
