DYNAUTIL is a reentrant, refreshable, and reusable Assembler language
program that provides dynamic allocation for batch programs and
utilities.  This is accomplished by passing control card images
to the University of Manitoba's DYNAM SVC 99 interface.  DYNAUTIL can
run as a front-end to a batch task or can be called by a batch task
during it's execution.

Control information is passed to DYNAUTIL via a parameter and
via control cards.  The parameter has the following format:

'progname/verbs/DYNAUTIL ddnames/utility ddnames/passed parm value'

The parameter is made up of fields which are separated by slashes.
Fields are made up of elements (with the exception of the 'passed
parm value' field) which are zero to eight alphameric characters
separated by commas.  The 'passed parm value' field is taken as is and
passed to the called program (if any).

If a field that is not to be modified lies between to fields that
are, slashes must still be included.  The same goes for elements.
Trailing slashes and commas are not necessary or permitted.

Example -

No progname, a verb, no DYNAUTIL ddnames, second utility ddname, and
no passed parm value:

   '/ICODE//,SYSOUT'

The fields are defined as follows:

progname    - the name of a load module in the job's current link list
              to be executed upon successful completion of DYNAUTIL.
              If progname is not specified, DYNAUTIL does not pass
              control to another program.  In this way, datasets
              dynamically allocated are treated if allocated by an
              IEFBR14 step.

verbs       - zero to eight elements that are used to specify how
              DYNAUTIL is to execute.  Currently, these five
              elements are valid verbs:

              ICODE  - specifies that the step is to terminate with
                       a return code rather than an user abend if
                       there is an error in invocation (parameter
                       error).
              SCODE  - specifies that the step is to terminate with
                       a return code rather than an user abend if
                       there is an error in the syntax of the control
                       statements.
              XCODE  - specifies that the step is to terminate with
                       a return code rather than an user abend if
                       there is an error in the execution of a control
                       statement.
              SIGNORE - specifies that DYNAUTIL is to continue to
                        process control statements rather than
                        terminate with an user abend if errors are
                        found in the syntax of the control statements.
              XIGNORE - specifies that DYNAUTIL is to continue to
                        process control statements rather than
                        terminate with an user abend if errors are
                        encountered during the execution of the control
                        statements.

DYNAUTIL
    ddnames - zero to two elements that specify alternate ddnames
              for DYNAUTIL to use for it's report and control files.
              The first element specifies the report ddname: it's
              default is DYNARPT.  The second element specifies the
              control (SYSIN) ddname: it's default is DYNAIN.

utility
    ddnames - zero to twelve elements that specify alternate ddnames
              for IBM utilities to use.  For the order of these ddnames
              and their defaults, see the appropriate IBM manual.

passed
 parm value - this field is passed as is to the called program (if
              any) as the first parameter of a two parameter list.
              The second parameter are the alternate utility ddnames
              (above).

Passed parameters -

Applications programs called may access two parameters: the first
being the 'passed parm value' field which is a two byte length
followed by the passed parm value string.  The second is the alternate
utility ddnames which consists of the a two byte length (always 96)
followed by twelve 8 byte "slots" (for a total of 96 bytes).  If the
element is not overridden in the parameter, the slot is zero filled;
if the element is less than eight characters in length it is right
filled with blanks.  Thus, the application program can use this
as a second parameter area for passing values.
