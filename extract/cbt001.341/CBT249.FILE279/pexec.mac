*          DATA SET PEXEC      AT LEVEL 003 AS OF 07/24/81
*          DATA SET PEXEC      AT LEVEL 002 AS OF 07/24/81
*          DATA SET PEXEC      AT LEVEL 001 AS OF 06/22/81
         TITLE 'TSO - PANVALET EXEC PROCESSOR'
***********************************************************************
*                                                                     *
*                                                                     *
* TITLE -      TSO - PANVALET EXEC PROCESSOR                          *
*                                                                     *
* FUNCTION -   PROVIDE AN INTERFACE BETWEEN TSO AND PANVALET          *
*              TO ALLOW A TSO USER TO EXECUTE CLIST COMMANDS          *
*              THAT RESIDE IN A PANVALET LIBRARY.                     *
*                                                                     *
*                                                                     *
* OPERATION -  ACCEPT FROM THE TSO USER A COMMAND                     *
*              STRING CONTAINING THE NAME OF THE PANVALET             *
*              MEMBER TO BE EXECUTED AND OPTIONAL                     *
*              PARAMETERS SPECIFYING CLIST OPTIONS,                   *
*              AND PANVALET ACCESS PARAMETERS.                        *
*                                                                     *
*                                                                     *
* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *
*              POINTED TO BY REGISTER 1                               *
*                                                                     *
*                                                                     *
* OUTPUT -     CONDITION CODE.                                        *
*                                                                     *
* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *
*                                                                     *
* TOM FOTH, WSRCC, 03/09/82                                           *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
&NAME    CLEAR &FIELD
         LCLC  &L
&L       SETC  'L'''
&NAME    MVI   &FIELD,C' '
         MVC   &FIELD+1(&L&FIELD-1),&FIELD
         MEND
         SPACE 3
         MACRO
&NAME    ENTER
&NAME    CSECT
         SAVE  (14,12),,*
         LR    BASEREG1,R15
         LA    BASEREG2,4095(,BASEREG1)
         LA    BASEREG2,1(,BASEREG2)
         USING &NAME,BASEREG1,BASEREG2
         SPACE 2
         B     IHB&SYSNDX
         DC    C'COPYRIGHT 1981 BY THE STATE OF WISCONSIN - WSRCC'
IHB&SYSNDX DS    0H
         MEND
         SPACE 2
         MACRO
&NAME    EXIT  &LV=
&NAME    DS    0H
         AIF   ('&LV' EQ '').A1
         LR    R2,R13         ADDR OF THIS SAVE AREA
.A1      L     R13,4(R13)
         STM   R15,R1,16(R13) RETURN REGS 15, 0, 1
         AIF   ('&LV' EQ '').A2 NOT DYNAMIC CORE
         FREEMAIN R,LV=&LV,A=(R2)
.A2      SPACE
         RETURN (14,12),T
         MEND
         SPACE 3
         MACRO
&NAME    MSG   &TEXT
         LCLA  &A
&A       SETA  K'&TEXT-2+4
&NAME    DC    H'&A',H'0',C&TEXT
         MEND
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
PDLPTR   EQU   8
WORKREG  EQU   9
BASEREG1 EQU   10
BASEREG2 EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 5
PEXEC    ENTER
         LR    R2,R1          SAVE ADDR OF CPPL
         SPACE
         L     R3,CORESIZE
         GETMAIN R,LV=(R3)
         SPACE 2
         LR    WORKREG,R1    ADDR OF WORK AREA
         USING WORKAREA,WORKREG
         EJECT
*
*        CLEAR WORK AREA
*
         SPACE 2
         LA    R14,0(R3)      LENGTH OF AREA
         BCTR  R14,0          EXECUTED LENGTH
         LA    R15,255        LOOP FACTOR
LOOP01   CR    R14,R15        LAST PASS?
         BNH   LOOP00         YES
CLEAR1   XC    0(0,R1),0(R1)
         EX    R15,CLEAR1
         LA    R1,256(R1)
         SR    R14,R15
         BCT   R14,LOOP01     IF MORE TO CLEAR
         SPACE
LOOP00   EX    R14,CLEAR1     CLEAR LAST AREA
         SPACE 2
         STM   BASEREG1,BASEREG2,BASES SAVE BASE ADDRESSES
         SPACE 2
         EJECT
*
*        ESTABLISH STAE EXIT
*
         SPACE 3
         MVC   STAEPARM(LSTAE),STAE MOVE PATTERN STAE TO WORK AREA
         ESTAE STAEEXIT,CT,PARAM=WORKAREA,MF=(E,STAEPARM) ISSUE STAE
         SPACE
         LA    R15,MAINSAVE
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         SPACE 3
*
*
*
         SPACE 3
         ST    R2,CPPLSAVE
         USING CPPL,R2        BASE FOR COMMAND PARM LIST
         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE
         MVC   ADDRPSCB,CPPLPSCB
         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE
         MVC   ADDRCBUF,CPPLCBUF
         DROP  R2
         EJECT
*
*        BUILD PARSE PARAMETER LIST AND INVOKE
*        IKJPARS TO ANALYZE COMMAND OPERANDS
*
         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS
         USING PPL,R1         BASE FOR PARSE PARAMETER LIST
         SPACE 2
         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS
         MVC   PPLECT,ADDRECT AND ECT ADDRESS
         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR
         SPACE
         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS
         SPACE
         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS
         MVI   ATTNECB,0      CLEAR ECB
         ST    R0,PPLECB      PASSE TO PARSE
         SPACE
         L     R2,ADDRCBUF     R2 <- ADDR OF CBUF
         LA    R2,4(R2)        R2 <- R2 + 4 (PTR TO COMMAND STRING)
FIND1ST  CLI   0(R2),C' '      IS THIS CHARACTER NON-BLANK?
         BNE   GOT1ST          YEP, SEE WHAT WE GOT
         LA    R2,1(R2)        INCREMENT TO NEXT CHARACTER
         B     FIND1ST         AND SEE IF IT IS NON BLANK
GOT1ST   CLI   0(R2),C'$'      WERE WE ENTERED VIA $?
         BE    SHORTCMD        YEP, GO DO SHORTFORM
         CLI   0(R2),C'#'      WERE WE ENTERED VIA #
         BNE   GOPARSE         NOPE, GO PARSE
         OI    FLAG,F#         FLAG HE WANTS SHOW
SHORTCMD OI    FLAG,F$         FLAG THE FACT WE ENTERED VIA $
         MVC   DDNSAVE(8),DEFDD DDNSAVE <- DEFAULT DD NAME
         ST    R2,PTR2$        SAVE THE POINTER TO THE $ IN CMD BUFF
         B     TIOTSRCH        GO SEE IF WE HAVE IT
         SPACE
GOPARSE  LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE
         ST    R0,PPLANS      RETURNS PDL ADDRESS
         SPACE
         MVC   PPLPCL,ADDRPCL ADDRESS OF PARSE CONTROL LIST
         SPACE 3
         LINK  EP=IKJPARS     INVOKE PARSE
         DROP  R1
         EJECT
         LA    R14,MAXPARSE   RETURN CODE LIMIT
         SPACE
         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS
         BH    PARSEBAD       NO, ERROR
         SPACE
         B     *+4(R15)       PROCESS RETURN CODE
         SPACE
PARSERET B     PARSEOK         0- SUCESSFUL
         B     EXIT8           4- PARSE UNABLE TO PROMPT
         B     EXIT8           8- USER ENTERED ATTENTION
         B     PARSEBAD       12- INVALID PARAMETERS
         B     PARSEBAD       16- PARSE INTERNAL FAILURE
         B     EXIT8          20 - VALIDITY CHECK ERROR
MAXPARSE EQU   *-PARSERET
         SPACE 5
PARSEBAD DS    0H
         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE
         LA    R1,MSGTEXT2+4+L'MSGPARSE
         SPACE
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R1),DOUBLE
         SPACE
         LA    R0,MSGTEXT2-2
         SR    R1,R0
         SLL   R1,16
         ST    R1,MSGTEXT2
         SPACE 2
         LA    R0,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG
         LA    R1,MSGCMDER
         SPACE
EXITMSG  BAL   R14,ERRORMSG
         SPACE 3
EXIT8    LA    R15,8          ERROR CODE 8
         B     RETURN
         SPACE
EXIT4    LA    R15,4
         B     RETURN
         SPACE
EXIT0    SR    R15,R15
         EJECT
RETURN   LTR   R2,R15         NORMAL EXIT?
         BZ    RETURN1        YES
         SPACE 2
         LA    R1,PARMLIST    AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         TM    FLAG,FEXCOMP    DID EXEC COMPLETE?
         BNO   POPALL          NO --- BLOW OFF WHOLE STACK
         NI    FLAG,X'FF'-FEXCOMP TURN THE FLAG OFF
         STACK PARM=PARMLIST+16,DELETE=TOP,MF=(E,(1))
*                              ABOVE JUST BLOWS OFF LAST ENTRY
         B     RETURN1         AND BRANCH TO RETURN
POPALL   STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         TCLEARQ INPUT         CLEAR INPUT IF TYPE AHEAD
         EJECT
RETURN1  DS    0H
         BAL   R14,FREEPDL    FREE THE PARSE STROAGE
* 1. SEE IF THE PAN LIB WAS OPEN FOR PAM & CLOSE IT
         TM    FLAG,FPOPN      WAS THE PAN LIB OPEN FOR PAM?
         BNO   RETURNA         NO - CONTINUE EXIT PROCESSING
         MVC   ACTION,F0       ACTION <- 0
         LA    R1,PAMPARM      R1 <- ADDR OF PAM PARAMETER LIST
         MVI   PAMPARM,X'80'   END OF LIST
         CALL  PCLOSE          CLOSE THE LIBRARY.
         NI    FLAG,X'FF'-FPOPN FLIP THE FLAG OFF
         CLC   ACTION,F0       WAS CLOSE SUCCESSFUL?
         BE    RETURNA         YES, CONTINUE EXIT PROCESSING
         SR    R0,R0           R0 <- 0
         LA    R1,MSGCLEXE     R1 <- ERROR MESSAGE
         BAL   R14,ERRORMSG    CALL ERROR MESSAGE ROUTINE
         LTR   R2,R2           WHERE WE HERE W/A NON ZERO RC?
         BNZ   RETURNA         YES...CONTINUE EXIT PROCESSING
         B     EXIT8           AND BRANCH BACK FOR BAD EXIT PROCESSING
RETURNA  DS    0H
* 2. SEE IF THE PAN LIB WAS OPEN FOR QSAM AND CLOSE IT.
         TM    FLAG,FLOPN      IS THE LIBRARY OPEN FOR QSAM?
         BNO   RETURNB         NO...CONTINUE EXIT PROCESSING
         L     R3,OPENDCB      R3 <- ADDR OF OPEN DCB
         CLOSE ((R3))          CLOSE THE LIBRARY
         NI    FLAG,X'FF'-FLOPN FLIP THE FLAG OFF
* 3. SEE IF FGPAN23 WAS LOADED AND DELETE IT
RETURNB  DS    0H
         TM    FLAG,FLOAD      WAS FGPAN23 LOADED?
         BNO   RETURNC         NO...CONTINUE EXIT PROCESSING
         DELETE EP=FGPAN23     DELETE THE FGPAN23 MODULE
         NI    FLAG,X'FF'-FLOAD FLIP THE FLAG OFF
RETURNC  DS    0H
* 4. SEE IF THE VIO DS WAS OPENED AND CLOSE IT
         TM    FLAG,FVIOO      WAS THE VIO DS OPEND FOR QSAM?
         BNO   RETURND         NO...CONTINUE EXIT PROCESSING
         L     R3,OPENDCB      R3 <- ADDR OF OPEN DCB
         CLOSE ((R3))          CLOSE THE VIO DS
         NI    FLAG,X'FF'-FVIOO FLIP THE FLAG OFF
RETURND  DS    0H
* 5. SEE IF THE VIO DS WAS ALLOCATED AND FREE IT
         TM    FLAG,FVIOA      WAS THE VIO DS ALLOCATED?
         BNO   RETURNE         NO...CONTINUE EXIT PROCESSING
         BAL   R14,FREEVIO     FREE THE VIO DATASET
         NI    FLAG,X'FF'-FVIOA FLIP THE FLAG OFF
         EJECT
RETURNE  DS    0H
*
         L     R1,ADDRECT      GET THE ECT
         USING ECT,R1
         TM    FLAG+1,F$EX     DID WE CALL EXEC TO PROCESS SYSPROC?
         BNO   RETURNG         NOPE
         TM    FLAG,F#         WERE WE ENTERED VIA # (SHOW)
         BNO   RETURNF         NOPE
         MVC   ECTPCMD,PCMD#EX YEP, MOVE PRIMARY COMMAND
         B     RETURNG         GO GET SUB CMD
RETURNF  MVC   ECTPCMD,PCMD$EX MOVE OTHER PRIMARY COMMAND
RETURNG  CLI   NAME1,X'0'      DID WE EVER FILL IN A MEMBER
         BE    RETURNH         NOPE
         MVC   ECTSCMD,NAME1   MOVE FIRST 8 CHARS OF NAME1
         DROP  R1
RETURNH  LR    R15,R2         RESTORE RETURN CODE
         SPACE
         L     R0,CORESIZE
         SPACE
         EXIT  LV=(0)
         EJECT
PARSEOK  DS    0H
         L     PDLPTR,ADDRANSR ADDR OF PARSE DESCRIPTOR LIST
         USING PEXPDL,PDLPTR  RETURNED BY PARSE
         SPACE 3
         CLEAR DDNSAVE         DDNSAVE <- BLANKS
         SR    R3,R3           R3 <- 0
         LH    R3,DDNAME+4     R3 <- LENGTH OF DDNAME
         BCTR  R3,0            R3 <- R3 - 1 (FOR EX, BELOW)
         L     R4,DDNAME       R4 <- ADDR OF DDNAME
         MVC   DDNSAVE(0),0(R4) DDNSAVE <- DDNAME FROM PARM
         EX    R3,*-6          EXECUTE ABOVE FOR APPROPRIATE LENGTH
TIOTSRCH DS    0H              COME TO HERE IF DDNSAVE ALREADY LOADED
         L     R2,16           R2 <- ADDR OF CVT
         L     R2,0(R2)        R2 <- ADDR OF ADDR OF TCB'S FROM CVT
         L     R2,4(R2)        R2 <- ADDR OF CURRENT TCB
         L     R2,12(R2)       R2 <- ADDR OF TIOT FROM TCB
         LA    R2,24(R2)       R2 <- ADDR OF FIRST DD ENTRY IN TIOT
         SR    R3,R3           R3 <- 0
CHECKDD  CLC   DDNSAVE,4(R2)   IS THIS TIOT ENTRY OUR DDNAME?
         BE    GOTDD           IT IS INDEED!
         IC    R3,0(R2)        R3 <- LENGTH OF THIS TIOT ENTRY
         AR    R2,R3           R2 <- ADDR OF NEXT TIOT ENTRY
         CLI   0(R2),0         IS THIS AN ZERO LENGTH ENTRY (THE END)?
         BNE   CHECKDD         NOPE, WE GOT A LIVE ONE.
         LA    R1,MSGNODD
         SR    R0,R0
         B     EXITMSG         GO PRINT MESSAGE AND EXIT
         SPACE 3
GOTDD    DS    0H
         MVC   ACTION,F0       ACTION <- 0
         LA    R0,ACTION       R0 <- ADDR OF ACTION
         ST    R0,PAMPARM      PARM(0) <- ADDR OF ACTION
         LA    R0,DDNSAVE      R0 <- ADDR OF DDNAME
         ST    R0,PAMPARM+4    PARM(1) <- ADDR OF DDNAME
         LA    R0,NOENTRY      R0 <- ADDR OF NOENTRY
         ST    R0,PAMPARM+8    PARM(2) <- ADDR OF NOENTRY
         MVI   PAMPARM+8,X'80' END THE LIST
         LA    R1,PAMPARM      POINT TO PARAMETER LIST
         CALL  POPEN           CALL POPEN
         CLC   ACTION,F0       WAS POPEN SUCCESSFUL?
         BE    POPENOK         YES IT WAS...
         SR    R0,R0           R0 <- 0
         LA    R1,MSGNOFRM     R1 <- ADDR OF NO FORMAT MSG
         CLC   ACTION,F24      WAS IT ERROR 24?
         BE    EXITMSG         YEP
         LA    R1,MSGBADPO     R1 <- ADDR OF UNKNOWN ERROR MSG
         B     EXITMSG         REPORT ERROR & EXIT
         EJECT
POPENOK  DS    0H
         OI    FLAG,FPOPN      FLAG LIBRARY AS OPEN
         MVC   ACTION,F0       ACTION <- 0
         LA    R0,ACTION       R0 <- ADDR OF ACTION
         ST    R0,PAMPARM      PARM(0) <- ADDR OF ACTION
         LA    R0,DIRENTRY     R0 <- ADDR OF DIR ENTRY AREA
         ST    R0,PAMPARM+4    PARM(1) <- ADDR OF DIR ENTRY AREA
         CLEAR NAME1           NAME1 <- BLANKS
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BNO   GETPMEM         NO - GET MEMBER FROM PCL
         SR    R4,R4           R4 <- 0
         LA    R1,NAME1        R1 <- ADDR OF NAME1
         L     R2,ADDRCBUF     R2 <- ADDR OF THE CBUF
         SR    R3,R3           R3 <- 0
         LH    R3,0(R2)        R3 <- LEN OF BUFFER
         A     R3,ADDRCBUF     R3 <- ADDR OF LAST CHARACTER IN BUFFER
         ST    R3,ADDRPRME     SAVE IT FOR FUTURE USE
         L     R2,PTR2$        POINT TO THE $ IN THE CBUF
         LA    R2,1(R2)        R2 <- R2+6 (CHARACTER AFTER $)
TSTSPC   CLI   0(R2),C' '      IS THIS A SPACE?
         BNE   NAM1ST          NOPE, FIRST CHARACTER
         LA    R2,1(R2)        R1 <- R1 + 1
         CR    R2,R3           R1 > R3?
         BNH   TSTSPC          NO, GO TEST AGAIN
         LA    R1,MSGNOMEM     R1 <- ADDR OF NO MEMBER ERROR
         SR    R0,R0           R0 <- 0
         B     EXITMSG         EXIT WITH MESSAGE
NAM1ST   DS    0H
         OI    0(R2),X'40'     UPSHIFT THE 1 ST CHARACTER
         ST    R2,PTR2NAM      SAVE THE ADDR OF THE NAME
         CLI   0(R2),X'C0'     IS IT ALPHA?
         BH    NAM1ST0         MAYBE ...
         CLI   0(R2),C'#'      IS IT A # ?
         BE    NAM1ST1         YEP, OK - BUT A CLIST
         CLI   0(R2),C'$'      IS IT A $ ?
         BE    NAM1ST1         YEP, OK - BUT A CLIST
         CLI   0(R2),C'@'      IS IT A @ ?
         BE    NAM1ST1         YEP, OK - BUT A CLIST
         B     BADCHAR         IT'S A BAD CHARACTER
NAM1ST0  CLI   0(R2),C'Z'      IS IT REALLY ALPHA?
         BH    MOVENAME        NOPE
NAM1ST1  OI    FLAG+1,F1STALFA YEP, FLAG IT.
MOVENAME DS    0H
         OI    0(R2),X'40'     UPSHIFT THE NAME
         CLI   0(R2),C'.'      IS THIS '.'?
         BNE   MOVENAM1        NOPE
         TM    FLAG+1,FDOT     HAVE WE ALREADY SEEN A DOT?
         BO    BADCHAR         YEP, SORRY, ONLY ONE DOT BE LUSER..
         OI    FLAG+1,FDOT     FLAG THE DOT
         NI    FLAG+1,X'FF'-F1STALFA AND DON'T ALLOW TO SCAN SYSPROC
         B     CHAROK          AND GET NEXT CHARACTER
MOVENAM1 CLI   0(R2),C'#'      IS IT THIS NATIONAL CHARACTER?
         BE    MOVENAM2        YEP
         CLI   0(R2),C'@'      IS IT THIS NATIONAL CHARACTER?
         BE    MOVENAM2        YEP
         CLI   0(R2),C'$'      IS IT THIS NATIONAL CHARACTER?
         BNE   MOVENAM3        NOPE
MOVENAM2 OI    FLAG+1,FNATINAL YEP, FLAG IT.
         B     CHAROK          AND GET NEXT CHARACTER
MOVENAM3 TM    0(R2),X'C0'     IS IT A C0 CHARACTER
         BNO   BADCHAR         NO, ITS BAD
         CLI   0(R2),X'E1'     IS IT 'E1'
         BE    BADCHAR         YEP, THAT'S BAD
         TM    0(R2),X'0F'     IS IT ZERO
         BNZ   TSTLOWBT        NO
         CLI   0(R2),X'F0'     IS IT F0?
         BNE   BADCHAR         C0,D0,E0 ARE BAD
TSTLOWBT TM    0(R2),X'08'     IS 80 ON?
         BNO   CHAROK          NO, THEN IT'S OKAY
         TM    0(R2),X'06'     EITHER MIDDLE BITS ARE BAD
         BZ    CHAROK          BUT NEITHER ON SO OKAY
BADCHAR  DS    0H
         SR    R0,R0           R0 <- 0
         LA    R1,MSGBDCHR     R1 <- BAD CHAR MESSAGE
         B     EXITMSG         EXIT WITH MESSAGE/
CHAROK   MVC   0(1,R1),0(R2)   MOVE ONE CHARACTER TO NAME1
         LA    R4,1(R4)        COUNT CHARACTERS & DO NOT EXCEED 22
         LA    R1,1(R1)        R1 <- PTR TO NEXT CHAR IN NAME1
         LA    R2,1(R2)        R2 <- PTR TO NEXT CHAR IN CBUF
         ST    R2,ADDRCPRM     SAVE ADDRESS OF PARMS MAYBE
         CR    R2,R3           R2 < R3?
         BE    NOOPERND        YEP, GOT THE LAST CHARACTER
         CLI   0(R2),C' '      IS IT A SPACE?
         BE    CK4OPRND        YEP, GOT THE LAST CHARACTER
         C     R4,F8           HAVE WE GOT > 8 CHARACTERS
         BNE   TOOBIGCK        NOPE
         OI    FLAG+1,F9CHAR   FLAG IT.
TOOBIGCK C     R4,F22          HAVE WE GOT > 22 CHARACTERS?
         BNE   MOVENAME        NOPE
         SR    R0,R0           R0 <- 0
         LA    R1,MSGMEMLG     R1 <- ADDR OF ERROR MSG
         B     EXITMSG         EXIT WITH MESSAGE
CK4OPRND DS    0H
         LA    R2,1(R2)        LET'S LOOK AT THE NEXT CHAR (OH BOY)
         CR    R2,R3           ARE WE POINTING AT THE END OF STRING?
         BE    NOOPERND        YEP, NO OPERANDS FOUND
         CLI   0(R2),C' '      IS THIS BLANK?
         BE    CK4OPRND        YEP, GOT TO FIND END OF STRING OR ^' '
         B     GOTNAME1        DON'T SET THE FLAG
NOOPERND DS    0H
         OI    FLAG+1,FNOOPRND FLAG THE FACT WE HAVE NO OPERANDS.
         B     GOTNAME1
GETPMEM  LH    R1,MEMBER+4     R1 <- LENGTH OF PANVALET MEMBER NAME
         BCTR  R1,0            R1 <- R1 - 1 (FOR EX BELOW)
         L     R2,MEMBER       R2 <- ADDR OR MEMBER NAME
         MVC   NAME1(0),0(R2)  MOVE ONE CHARACTER TO NAME1
         EX    R1,*-6          EXECUTE THE ABOVE INSTRUCTION
GOTNAME1 DS    0H
         TM    FLAG+1,FNATINAL WAS A NATIONAL CHAR FOUND?
         BO    EXCLIST         YEP, GO EXECUTE A CLIST (MAYBE...)
         LA    R0,NAME1        R0 <- ADDR OF NAME1
         ST    R0,PAMPARM+8    PARM(2) <- ADDR OR MEMBER NAME
         MVC   COMMENT(8),NOENTRY COMMENT <- 'NO-ENTRY'
         LA    R0,COMMENT      R0 <- ADDR OF COMMENT
         ST    R0,PAMPARM+16   PARM(4) <- ADDR OR COMMENT
         LA    R0,NOENTRY      R0 <- ADDR OF 'NO-ENTRY'
         ST    R0,PAMPARM+12   PARM(3) <- ADDR OF NOENTRY
         CLEAR SUBSET          SUBSET <- SPACES
         MVC   SUBSET(L'SUBSETST),SUBSETST SUBSET <- 'SUBSET'
         LA    R0,SUBSET       R0 <- ADDR OF SUBSET FIELD
         ST    R0,PAMPARM+20   PARM(5) <- ADDR OF NOENTRY
         MVI   PAMPARM+20,X'80' END OF ADDR LIST FOR PSRCH
         LA    R1,PAMPARM      R1 <- ADDR OF PSRCH PARAMETER LIST
         CALL  PSRCH           GET THE DIRECTORY ENTRY FOR THIS MEMBER
         EJECT
         CLC   ACTION,F0       WAS SRCH SUCCESSFUL?
         BE    GOTDIROK        IT WAS ...
         TM    FLAG,F$         WERE WE ENTERED VIA $?
         BNO   PSRCHERR        NOPE, TELL USER OF ERROR
EXCLIST  DS    0H
         TM    FLAG+1,F9CHAR   DO WE HAVE > 8 CHARS
         BO    EXCLIST0        NOPE
         TM    FLAG+1,F1STALFA IS THE FIRST ALPHA?
         BO    EXCLIST1        YES
EXCLIST0 LA    R0,MSGNOPRD     SECOND LEVEL MESSAGE
         LA    R1,MSGNOPRC     MESSAGE TO TELL LUSER (PUN) WE CANNOT
         B     EXITMSG         SCAN SYSPROC - WARN HIM & EXIT
EXCLIST1 OI    FLAG+1,F$EX     FLAG $ CALLED EXEC FOR SYSPROC CHECK
         L     R1,PTR2NAM      GET THE ADDR OF NAME IN THE CBUF
         L     R2,ADDRPRME     GET THE ADDR OF THE END OF THE PARMS
         SR    R2,R1           THE LENGTH OF THE PARAMATER - 1
         CLEAR CMDBUF
         MVC   CMDBUF(0),0(R1) EXECUTED BELOW
         EX    R2,*-6          MOVE IT TO THE COMMAND BUFFER
         TM    FLAG,F#         WERE WE ENTERED VIA #
         BNO   EXCLIST2        NAW, NOT TO WORRY
         LR    R3,R1           MOVE THE ADDRESS TO A USABLE REGISTER
         TPUT  (R3),(R2)       DISPLAY HIM
EXCLIST2 LA    R2,4(R2)        SETUP FOR THE LENGTH
         STH   R2,CMDLEN       AND SAVE IT
         SR    R2,R2           CLEAR R2
         STH   R2,CMDOFF       AND SAVE THE OFFSET
         LA    R2,CMDLEN       GET THE ADDRESS OF OUR CMD BUFF
         L     R1,CPPLSAVE     R1 <- POINTS TO CPPL
         ST    R2,0(R1)        AND SAVE IT IN THE CBUF PTR
         TM    FLAG+1,FNOOPRND WERE THERE OPERANDS?
         BNO   EXCLINK         NOPE.
         L     R2,12(R1)       R2 <- ADDR OF ECT
         OI    28(R2),X'80'    FLAG THE FACT WE HAVE NO OPERANDS
EXCLINK  DS    0H
         LINK  EPLOC=EXECNAME  GO HAVE EXEC HANDLE THIS
         B     RETURN          AND RETURN
PSRCHERR SR    R0,R0           R0 <- 0
         LA    R1,MSGPSR02     R1 <- ADDR OF PSRCH ERROR MSG 2
         CLC   ACTION,F2       DID PSRCH RETURN 2?
         BE    EXITMSG         YES, GO TELL & EXIT
         LA    R1,MSGPSR07     R1 <- ADDR OF PSRCH ERROR MSG 7
         CLC   ACTION,F7       DID PSRCH RETURN 7?
         BE    EXITMSG         YES, GO TELL & EXIT
         LA    R1,MSGPSR23     R1 <- ADDR OF PSRCH ERROR 23
         CLC   ACTION,F23      WAS IT ERROR CODE 23?
         BE    EXITMSG         YES, TELL & EXIT
         LA    R1,MSGPS245     R1 <- ADDR OF PSRCH ERROR 245
         CLC   ACTION,F245     WAS IT ERROR CODE 245?
         BE    EXITMSG         YES, TELL & EXIT
         LA    R1,MSGPSR##     R1 <- ADDR OF PSRCH UNKNOWN ERROR
         CLC   ACTION,F0       WAS ANOTHER ERROR CODE RETURNED?
         BNE   EXITMSG         YES, TELL & EXIT
         SPACE 3
GOTDIROK DS    0H
         OI    FLAG,FPOPN
         CLI   DSECURE,X'F0'   IS SECURITY LEVEL 0?
         BE    ACCOK           YES, DON'T BOTHER WITH ACCESS CODES
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    NOACCESS        YEP, SCOLD HIM
         CLI   OPTACCES+1,X'01' DID USER SPECIFY ACCESS KEYWORD?
         BE    GETUCODE        YES HE DID
NOACCESS LA    R1,MSGNOACC     TELL HIM AN ACCESS CODE IS REQUIRED.
         SR    R0,R0
         B     EXITMSG         AND EXIT
         EJECT
GETUCODE XC    DOUBLE(8),DOUBLE DOUBLE <- 0
         PACK  DOUBLE+6(2),DUSER(4) DOUBLE <- PACKED USER CODE
         CVB   R0,DOUBLE       R0 <- USER CODE (IN BINARY)
         CLI   DSECURE,X'F1'   IS SECURITY LEVEL 1?
         BE    TESTCODE        YEP, THIS IS ALL WE NEED
         STH   R0,CODE         STORE MEMBER USER CODE FOR LATER
         SPACE 5
         MVC   PANDD1(LDCB),DCB            DCB <- MODEL DCB
         MVC   PANDD1+DDDCB(8),DDNSAVE DCB DDN <- OUR DDNAME
         LA    R2,PANDD1       R2 <- ADDR OR PAN DCB
         ST    R2,OPENDCB      SAVE ADDR OF DCB FOR ERROR HANDLERS
         OPEN  ((R2),INPUT)    OPEN THE PANVALET LIBRARY
         TM    DCBOFLGS(R2),X'10' WAS OPEN SUCCESSFUL?
         BO    OPENOK          IT WAS!
         LA    R1,MSGOPNER     ISSUE BAD OPEN ERR MESSAGE
         SR    R0,R0
         B     EXITMSG          AND EXIT
         SPACE 3
OPENOK   DS    0H
         OI    FLAG,FLOPN      FLAG LIBRARY AS OPEN
         GET   (R2)            GET THE FIRST LIBRARY RECORD
         LH    R0,LCDE(R1)     R0 <- LIBRARY SECURITY CODE
         AH    R0,CODE         R0 <- R0 + MEMBER CODE
         STH   R0,CODE         CODE <- R0
         CLOSE ((R2))          CLOSE THE LIBRARY
         NI    FLAG,X'FF'-FLOPN TURN LIBRARY OPEN FLAG OFF
         LH    R0,CODE         RELOAD THE CODE IN CASE WE GO CHECK
         CLI   DSECURE,X'F2'   IS THIS JUST LEVEL 2 SECURITY?
         BE    TESTCODE        YES, GO TEST IT.
         EJECT
         LOAD  EP=FGPAN23  ,ERRET=LOADERR LOAD INSTALLATION PARAMETERS
         OI    FLAG,FLOAD      FLAG THE FGPAN23 BEING LOADED
         SR    R1,R1           R1 <- 0
         LR    R2,R0           R2 <- R0
         LH    R1,ICDE(R2)     R1 <- INSTALLATION CODE
         AH    R1,CODE         R1 <- R1 + LIBRARY CODE + USER CODE
         STH   R1,CODE         CODE <- R1
         DELETE EP=FGPAN23     DROP INSTALLATION PARMATERS
         NI    FLAG,X'FF'-FLOAD TURN THE LOAD FLAG OFF
         SR    R0,R0           R0 <- 0
         LH    R0,CODE         R0 <- INSTALLATION + LIBRARY + USER CODE
         SPACE 5
TESTCODE DS    0H
         L     R1,ACCESSNO     R1 <- ADDR OF ACCESS PARAMETER
         C     R0,0(R1)        ACCESS CODE MATCH ACCESS PARAMETER
         BE    ACCOK           IT DOES! WE GOT US A LIVE ONE
         LA    R1,MSGBADAC     SCOLD HIM
         SR    R0,R0
         B     EXITMSG         AND EXIT
         EJECT
ACCOK    DS    0H
         SR    R0,R0           R0 <- 0
         CLI   ACTIVE,C'A'     IS IT ACTIVE?
         BE    TSTENBL         YES
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    WARNACTV        YEP
         CLI   OPTWARN+1,X'01' DOES HE WANT WARNING?
         BNE   SKIPWARN        NOPE
WARNACTV LA    R1,MSGINACT     R1 <- ADDR OF INACTIVE MESSAGE
         BAL   R14,ERRORMSG    WARN HIM
TSTENBL  CLI   ENBL,C'E'       IS IT ENABLED?
         BE    SKIPWARN        YES
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    WARNENBL        YEP
         CLI   OPTWARN+1,X'01' DOES HE WANT TO BE WARNED?
         BNE   SKIPWARN        NO
WARNENBL SR    R0,R0           R0 <- 0
         LA    R1,MSGDISAB     R1 <- ADDR OF DIASBLED MESSAGE
         BAL   R14,ERRORMSG    GO TELL HIM
SKIPWARN DS    0H
         LA    R1,DAIRBLK      R1 <- ADDR OF DAIR BLK IN VS
         USING DAPB08,R1
         XC    DAIRBLK(LDAIRBLK),DAIRBLK SET WHOLE BLOCK TO ZEROS
         MVC   DA08CD,H8       DAIR SUBCODE
         LA    R0,44           R0 <- 44
         STH   R0,LDSN         LDSN <- 44
         CLEAR DSN             DSN <- SPACES
         LA    R0,LDSN         R0 <- ADDR OF DSN FIELD
         ST    R0,DA08PDSN     ADDR OF DSN FIELD
         CLEAR DA08DDN         DDN <- SPACES
         MVC   DA08UNIT,VIO    UNIT <- VIO
         CLEAR DA08SER         VOLSER <- SPACES
         MVC   DA08PQTY,F1     PRIMARY EXTENTS OF ONE
         MVC   DA08SQTY,F1     SECONDARY EXTENTS OF ONE
         CLEAR DA08MNM         NO MEMBER NAME
         CLEAR DA08PSWD        NO PASSWORD
         MVI   DA08DSP1,DA08NEW     DISP=(NEW,
         MVI   DA08DPS2,DA08DEL               DELETE,
         MVI   DA08DPS3,DA08DELE                     DELETE)
         MVI   DA08CTL,DA08TRKS+DA08PERM SPACE IN TRACKS - PERM
         MVI   DA08DSO,B'01000000'  ACCESS IN PS
         CLEAR DA08ALN         NO ATTRIBUTE OR DD FOR ATTRIBUTES.
         DROP  R1
         EJECT
         BAL   R14,CALLDAIR    CALL DAIR SUBROUTINE
         LTR   R15,R15         WAS DAIR SUCCESSFUL
         BZ    NOVIOERR        YES (HURRAH...)
         BAL   R14,ALLOCERR    NO (BOO, HISS...) - GO REPORT ERROR
         B     EXIT8           AND EXIT CONDITION CODE 8
NOVIOERR OI    FLAG,FVIOA      FLAG THE FACT WE ALLOCATED VIO DS
         TM    DAIRBLK+2,X'80' WAS THERE A SECONDARY ERROR?
         BNO   GOTVIO          NO (HAPPY-HAPPY) CONTINUE
         BAL   R14,ALLOCERR    YES (DRATS...) - GO REPORT ERROR
         B     EXIT8           AND EXIT CONDITION CODE 8
         EJECT
GOTVIO   OI    FLAG,FVIOA      FLAG THE VIO DATASET AS ALLOCATED
         MVC   PSDCB(LPSMODEL),PSMODEL PSDCB <- MODEL SEQ DCB
         MVC   PSDCB+DDDCB(8),DAIRBLK+ADDN DDN IN DCB <- ALLOC DDN
         MVI   PSDCB+BUFNO,X'01' BUFNO IN DCB <- 1
         LA    R2,PSDCB        R2 <- ADDR OF DCB
         ST    R2,OPENDCB      SAVE ADDR OF DCB FOR ERROR HANDLERS
         OPEN  ((R2),OUTPUT)   OPEN VIO DS FOR OUTPUT
         TM    PSDCB+DCBOFLGS,X'10' WAS OPEN SUCCESSFUL?
         BNZ   VIOOK           YES (OF COURSE)
         LA    R1,MSGVIOER     TELL HIM ABOUT ERROR
         SR    R0,R0
         B     EXITMSG         AND EXIT
         SPACE 3
VIOOK    DS    0H
         OI    FLAG,FVIOO      FLAG THE VIO DS AS OPEN
         MVC   ACTION,F0       ACTION <- 0
         LA    R0,ACTION       R0 <- ADDR OF ACTION
         ST    R0,PAMPARM      PARM(0) <- ADDR OF ACTION
         LA    R0,PANREC       R0 <- ADDR OF PANREC
         ST    R0,PAMPARM+4    PARM(1) <- ADDR OF PANREC
*        CLEAR NAME1           NAME <- SPACES
*        LH    R1,MEMBER+4     R1 <- LENGTH OF MEMBER NAME
*        BCTR  R1,0            R1 <- R1 - 1 FOR EX BELOW
*        L     R2,MEMBER       R2 <- ADDR OF MEMBER NAME
*        MVC   NAME1(0),0(R2)  MOVE JUST ONE CHARACTER (EX'ED BELOW)
*        EX    R1,*-6          MOVE APPROPRIATE NUMBER OF MEMBER CHARS
         LA    R0,NAME1        R0 <- ADDR OF MEMBER NAME
         ST    R0,PAMPARM+8    PARM(2) <- ADDR OF MEMBER NAME
         LA    R0,NOENTRY      R0 <- ADDR OF 'NO-ENTRY'
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    NOINC           NO INCLUDES
         CLI   OPTEXPND+1,X'01' WAS NOEXPAND SPECIFIED
         BE    NOINC           DOES NOT WANT ++INCLUDES EXPANDED
         LA    R0,YES          R0 <- ADDR OF 'YES     '
NOINC    ST    R0,PAMPARM+12   PARM(3) <- ADDR OF INCLUDES
         LA    R0,COMMENT      R0 <- ADDR OF COMMENT
         ST    R0,PAMPARM+16   PARM(4) <- ADDR OF COMMENT
         MVI   PAMPARM+16,X'80' END OF PARMETER LIST
         LA    R2,PSDCB        R2 <- ADDR OF DCB (FOR PUT MACRO)
         LA    R3,PANREC       R3 <- ADDR OF RECORD (FOR PUT MACRO)
         EJECT
PREADPUT DS    0H
         MVC   COMMENT(L'NOENTRY),NOENTRY  COMMENT <- 'NO-ENTRY'
         LA    R1,PAMPARM      R1 <- ADDR OF PARAMETER LIST
         CALL  PREAD           CALL PREAD
         CLC   ACTION,F0       WAS IT SUCCESSFUL?
         BE    PREADOK         YES
         SR    R0,R0           R0 <- 0
         LA    R1,MSGINCER     R1 <- INCLUDE ERROR MSG ADDR
         CLC   ACTION,F4       WAS ACTION 4 (INCLUDE MISSING)
         BE    EXITMSG         YEP, GO REPORT & EXIT
         LA    R1,MSGMEM02     R1 <- ADDR OF MEM MSG 2
         CLC   ACTION,F2       WAS IT ERROR 2?
         BE    EXITMSG         YEP, GO REPORT IT
         LA    R1,MSGMEM07     R1 <-  ADDR OF MEM MSG 7
         CLC   ACTION,F7       WAS IT ERROR 7?
         BE    EXITMSG         YEP, GO REPORT IT
         LA    R1,MSGPRDER     NO TELL HIM OF THE OTHER ERROR
         B     EXITMSG         AND EXIT
PREADOK  DS    0H
         CLC   PANREC(2),PANEOF WAS THIS THE EOF RECORD?
         BE    ENDPAN          YES IT WAS
         PUT   (R2),(R3)       PUT THE RECORD TO VIO FILE
         B     PREADPUT        AND GO PUT AGAIN
         SPACE 5
ENDPAN   DS    0H
         CLOSE ((R2))          CLOSE THE DCB
         NI    FLAG,X'FF'-FVIOO FLAG THE VIO DS AS CLOSED
         MVC   ACTION,F0       ACTION <- 0
         MVI   PAMPARM,X'80'   END OF PARAMETER LIST
         LA    R1,PAMPARM      R1 <- ADDR OF PARAMETER LIST
         CALL  PCLOSE          CLOSE THE PAN LIBRARY
         NI    FLAG,X'FF'-FPOPN FLAG THE PAN LIBRARY AS PCLOSED
         CLC   ACTION,F0       WAS PCLOSE SUCCESSFUL?
         BE    PCLOSEOK        YES (WHY SURE!)
         LA    R1,MSGPCLSE     TELL OUR POOR USER
         SR    R0,R0
         B     EXITMSG         AND EXIT
         EJECT
PCLOSEOK DS    0H
         CLEAR CMDBUF          CMDBUF <- SPACES
         LA    R2,CMDBUF       R2 <- ADDRESS OF CMD BUFFER
         MVC   0(L'EXCMD,R2),EXCMD MOVE IN EXEC COMMAND
         LA    R2,L'EXCMD+1(R2) R2<-R2+LENGTH OF EX+1 (PTR TO DSN)
         MVI   0(R2),C''''     CMDBUF <- '
         LA    R2,1(R2)        R2 <- R2 + 1
         LH    R3,LDSN         R3 <- LEN OF DSN
         BCTR  R3,0            R3 <- R3 - 1
         MVC   0(0,R2),DSN     MOVE DSN TO CMDBUF (EX'ED NEXT INSTR)
         EX    R3,*-6          REALLY MOVE THE DSN TO CMDBUF
         LA    R2,1(R3,R2)     R2 <- 1+R3+R2
         MVI   0(R2),C''''     CMDBUF <- '
         LA    R2,2(R2)        R2 <- R2 + 2
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BNO   PARSECMD        MOVE THE PARMS FROM PCL
         L     R1,ADDRPRME     R1 <- ADDR OF LAST CHARACTER IN BUFFER
         L     R3,ADDRCPRM     R3 <- ADDR OF PARMS - 1
         LA    R3,1(R3)        POINT TO NEXT CHAR FOLLOWING BLANK
         CR    R3,R1           WAS THE LAST CHAR OF NAME LAST CHAR
         BNL   NOCMD           OF BUFFER? YES IT WAS
         SR    R1,R3           R1 <- LENGTH OF PARMS
         B     PSIZETST        GO FINISH SETUP
PARSECMD LH    R1,CMDSTR+4     R1 <- LENGTH OF COMMAND STRING
         L     R3,CMDSTR       R3 <- ADDR OF COMMAND STRING
         LTR   R1,R1           DID HE SPECIFY ONE?
         BE    NOCMD           NO
PSIZETST DS    0H
         CH    R1,H188         STRING > 188 CHARACTERS IN LENGTH?
         BNH   MOVCMD          NOPE, IT'S OK...
PARMBIG  LA    R1,MSGSTRER     R1 <- ERROR MESSAGE TO REPORT
         SR    R0,R0           R0 <- 0
         B     EXITMSG         REPORT ERROR & EXIT
MOVCMD   MVI   0(R2),C''''     YES, MOVE IN A QUOTE
         LA    R4,1            SET CHARACTER TALLY COUNT
MOV1CHAR LA    R2,1(R2)        POINT TO NEXT CHARACTER
         MVC   0(1,R2),0(R3)   MVC ONE CHAR TO CMD BUF
         CLI   0(R2),C''''     DID WE JUST MOVE A QUOTE?
         BNE   NOADDQUO        NO WE DIDN'T
         LA    R2,1(R2)        POINT TO NEXT CHARACTER
         MVI   0(R2),C''''     MOVE IN EXTRA QUOTE
         LA    R4,1(R4)        ADD TALLY TO CHAR COUNT
NOADDQUO DS    0H
         LA    R3,1(R3)        POINT TO NEXT CHAR TO BE MOVED
         LA    R4,1(R4)        ADD TALLY TO CHAR COUNT
         CH    R4,H188         STRING > 188 CHARACTERS IN LENGTH?
         BH    PARMBIG         IT'S TOO BIG...
         BCT   R1,MOV1CHAR     THAT'S ONE LESS TO MOVE...
         MVI   1(R2),C''''     PUT IN LAST QUOTE
         LA    R2,3(R2)        R2 <- R2 + 3
NOCMD    MVC   0(3,R2),NOP     PUT NOP IN CMD STR
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    LISTOPT         YEP GO MOVE NOL
         CLI   OPTPRMPT+1,X'01' WAS NOPROMPT SPECIFIED
         BE    LISTOPT         YES
         MVC   0(3,R2),NOP+2   MOVE A 'P  '
LISTOPT  LA    R2,4(R2)        R2 <- R2 + 4
         MVC   0(3,R2),NOL     PUT NOL IN CMD STR
         TM    FLAG,F$         WERE WE ENTERED VIA $
         BO    CALLEXEC        YEP GO CALL EXEC
         CLI   OPTLIST+1,X'01' WAS NOLIST SPECIFIED?
         BE    CALLEXEC        YES
         MVC   0(3,R2),NOL+2   MOVE A 'L  '
CALLEXEC LA    R2,7(R2)         R2 <- R2 + 3
         LA    R3,CMDBUF       R3 <- ADDR OF CMDBUF
         SR    R2,R3           R2 <- LEN OF CMD (ADDR OF END-BEGIN)
         STH   R2,CMDLEN       CMDLEN <- LEN OF CMD
         CLI   OPTSHOW+1,X'01' DOES HE WANT TO SEE THE PARM LINE?
         BE    SHOW            YEP
         TM    FLAG,F#         DID HE ASK VIA # ?
         BNO   NOSHOW          NOPE
SHOW     TPUT  (R3),(R2)       SHOW HIM THE LINE
NOSHOW   DS    0H
         LA    R3,3            R0 <- 3
         STH   R3,CMDOFF       CMDOFF <- 3
*
*
* BUILD AN ALTERNATE CPPL FOR EXEC TO CHOMP ON
*
*
         LA    R1,EXECCPPL     R2 <- ADDR OF OUR CPPL
         USING CPPL,R1
         MVC   CPPLUPT,ADDRUPT CPPLUPT <- CALLER'S UPT
         MVC   CPPLECT,ADDRECT CPPLECT <- CALLER'S ECT
         MVC   CPPLPSCB,ADDRPSCB CPPLPSCB <- CALLER'S PSCB
         LA    R0,CMDLEN       R0 <- ADDR OF CMD (INCLUDING LEN/OFF)
         ST    R0,CPPLCBUF     CPPLCMD <- R0
         MVI   CPPLCBUF,X'80'  END OF LIST
         DROP  R1
         LINK  EPLOC=EXECNAME INVOKE THE EXEC PROCESSOR
         SPACE 3
         OI    FLAG,FEXCOMP   FLAG EXEC AS COMPLETE
         B     RETURN         PERFORM NORMAL EXIT PROCESSING
         EJECT
*
*        STAE EXIT
*
         SPACE 3
STAEEXIT DS    0H
         USING *,R15          TEMPORARY BASE
         SPACE
         CH    R0,STAECODE    IS WORK AREA PROVIDED?
         BE    STAE1          NO
         SPACE
         L     WORKREG,0(R1)  YES, GET OUR WORK AREA ADDR
         B     STAE2
         SPACE 2
STAE1    LR    WORKREG,R2     OUR WORK AREA ADDR
         SPACE 2
STAE2    DS    0H
         STM   0,15,STAEREGS
         SPACE 2
         LM    BASEREG1,BASEREG2,BASES
         DROP  R15
         SPACE
         LA    R13,STAESAVE
         SPACE 2
         SR    R15,R15        NO RETRY EXIT
         BR    R14
         SPACE
STAECODE DC    H'12'
         EJECT
*
*        CALL  DAIR
*
CALLDAIR DS    0H
         ST    R14,R14DAIR
         LA    R1,DAPLLST      R1 <- ADDR OF DAPL PARAMETER LIST
         USING DAPL,R1
         MVC   DAPLUPT,ADDRUPT DAPLUPT <- ADDR OF OUR UPT
         MVC   DAPLECT,ADDRECT DAPLECT <- ADDR OF OUR ECT
         MVC   DAPLPSCB,ADDRECT DAPLPSCB <- ADDR OF OUR PSCB
         LA    R0,ATTNECB      R0 <- ADDR OF OUR ECB
         MVI   ATTNECB,0       OUR ECB <- 0
         ST    R0,DAPLECB      DAPLECB <- ADDR OF OUR ECB
         LA    R0,DAIRBLK      R0 <- OUR DA08BLK FOR VIO ALLOC
         ST    R0,DAPLDAPB     DAPLDAPB <- ADDR OF OUR DA08BLK ...
         MVI   DAPLDAPB,X'80'  END TH PARAMETER LIST
         DROP  R1
         LINK  EP=IKJDAIR      CALL DAIR TO ALLOC VIO DS
         L     R14,R14DAIR
         BR    R14
*
*        REPORT ON ALLOCATE ERROR
*
ALLOCERR DS    0H
         ST    R14,R14ALER
         LA    R1,DFDLST       R2 <- ADDR OF DFDLST
         USING DFDSECTD,R1
         LA    R0,DAPLLST      R0 <- ADDR OF DAPL
         ST    R0,DFDAPLP      PARM(0) <- ADDR OF DAPL
         ST    R15,DAIRRC      DAIRRC <- DAIR RETURN CODE
         LA    R0,DAIRRC       R0 <- ADDR OF DAIR RETURN CODE
         ST    R0,DFRCP        PARM(1) <- ADDR OF DAIR RETURN CODE
         MVC   JEF2ADDR,F0     PARM(2) <- 0
         LA    R0,JEF2ADDR     R0 <- ADDR OF ZEROS FOR ADDR OF JEFF2
         ST    R0,DFJEFF02     PARM(2) <- ADDR OF ZEROES (ABOVE)
         SR    R0,R0           R0 <- 0
         LH    R0,F1+2         R0 <- 1
         STH   R0,DFDOPT       DFDOPT <- 1
         LA    R0,DFDOPT       R0 <- ADDR OF 1
         ST    R0,DFIDP        PARM(3) <- ADDR OF 1
         MVI   DFIDP,X'80'     END THE PARM LIST
         DROP  R1
         LINK     EP=IKJEFF18  CALL DAIRFAIL FOR ERR MESSAGE
         L     R14,R14ALER
         BR    R14             AND RETURN
         EJECT
*
* FREE VIO DS
*
FREEVIO  DS    0H
         ST    R14,R14FREE     SAVE RETURN ADDRESS
         LA    R1,DAIRBLK      R1 <- ADDR OF OUR DAIR BLK IN VS
         USING DAPB18,R1
         MVC   DA18CD,H24      DA18CD <- X'18' (DECIMAL 24)
         MVC   DA18FLG,F0      DA18FLG <- 0 (AS PER GUIDE)
         MVC   DA18DARC,F0     DA18DARC <- 0 (DITTO)
         XC    DA18PDSN,DA18PDSN     DA18PDSN <- 0
         CLEAR DA18MNM         MEMBER NAME <- SPACES
         CLEAR DA18SCLS        SYSOUT CLASS <- SPACES
         MVI   DA18DPS2,0      DISP <- 0
         MVI   DA18CTL,DA18PERM UNALLOCATED PERMANENT ALLOC DS
         XC    DA18JBNM,DA18JBNM JBNM <- 0 AS PER GUIDE
         BAL   R14,CALLDAIR    GO FREE OUR VIO DS (WE HOPE)
         NI    FLAG,X'FF'-FVIOA TURN THE FLAG OFF
         LTR   R15,R15         WAS FREE SUCCESSFUL?
         BZ    FREE1OK         YES - NO PRIMARY ERROR
         BAL   R14,ALLOCERR    GO REPORT THE PRIMARY ERROR
         B     FREERET         AND EXIT
FREE1OK  TM    DA18FLG,X'80'   WAS THERE A SECONDARY ERROR?
         BNO   FREERET         NO THERE WASN'T
         BAL   R14,ALLOCERR    GO REPORT THE SECONDARY ERROR
FREERET  L     R14,R14FREE     LOAD RETURN ADDRESS
         BR    R14
         DROP  R1
         EJECT
*
*        PARSE CLEANUP ROUTINE
*
         SPACE 3
FREEPDL  DS    0H
         SPACE
         ST    R14,R14SAVE
         SPACE
         L     R1,ADDRANSR    ADDR OF PDL
         LA    R1,0(R1)
         LTR   R1,R1          DOES ONE EXIST?
         BCR   8,R14          NO, EXIT
         SPACE
         IKJRLSA ADDRANSR     RELEASE THE STORAGE
         SPACE
         L     R14,R14SAVE
         BR    R14
         EJECT
ERRORMSG DS    0H
         ST    R14,R14SAVE    SAVE LINKAGE REGISTER
         SPACE
         LTR   R0,R0          SECOND LEVEL MSG?
         BZ    ERRORM1        NO
         SPACE
         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA
         LA    R1,MSGTEXT1
         SPACE
         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG
         LA    R15,0(R14,R1)  ADDR OF END OF MSG
         LA    R14,1(R14)     JUMP MSG LENGTH
         STH   R14,0(R1)
         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS
         SPACE 2
         SR    R14,R14        CLEAR CHAIN FIELD
         LA    R15,1          ONE SEGMENT IN 2ND MSG
         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL
*                             OUTPUT LINE DESCRIPTOR ('OLD')
         LA    R0,PUTOLD2
         SPACE 3
ERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO
         LA    R15,1          ONE SEGMENT
         LR    R0,R1          MSG ADDR
         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'
         SPACE
         LA    R1,PARMLIST
         USING IOPL,R1
         SPACE
         MVC   IOPLECT,ADDRECT
         MVC   IOPLUPT,ADDRUPT
         SPACE
         LA    R0,ATTNECB
         ST    R0,IOPLECB
         MVI   ATTNECB,0
         SPACE 3
         XC    PARMLIST+16(4),PARMLIST+16
         PUTLINE PARM=PARMLIST+16,MF=(E,(1)),                          X
               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)
         SPACE 3
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*
*        P A R S E   C O N T R O L   L I S T
*
*
         SPACE 3
         PRINT NOGEN
PCLCSECT IKJPARM DSECT=PEXPDL
         SPACE 2
MEMBER   IKJIDENT 'PAN MEMBER NAME',MAXLNTH=22,FIRST=NONATNUM,         $
               OTHER=ANY,                                              $
               PROMPT='PANVALET MEMBER NAME TO BE EXECUTED AS A CLIST',$
               HELP=('PANVALET MEMBER NAME TO BE EXECUTED AS A CLIST', $
               'A ONE TO TEN ALPHANUMERIC PANVALET MEMBER NAME')
         SPACE 2
CMDSTR   IKJPOSIT QSTRING,                                             $
               HELP=('QUOTED STRING TO BE PASSED TO CLIST AS VALUES',  $
               'A ONE TO 188 CHARACTER QUOTED STRING')
         SPACE 2
OPTPRMPT IKJKEYWD DEFAULT='NOPROMPT'
         IKJNAME 'NOPROMPT'
         IKJNAME 'PROMPT'
         SPACE 2
OPTLIST  IKJKEYWD DEFAULT='NOLIST'
         IKJNAME 'NOLIST'
         IKJNAME 'LIST'
         SPACE 2
OPTEXPND IKJKEYWD DEFAULT='NOEXPAND'
         IKJNAME 'NOEXPAND'
         IKJNAME 'EXPAND'
         SPACE 2
OPTWARN  IKJKEYWD DEFAULT='WARN'
         IKJNAME 'WARN'
         IKJNAME 'NOWARN'
         SPACE 2
OPTSHOW  IKJKEYWD DEFAULT='NOSHOW'
         IKJNAME 'SHOW'
         IKJNAME 'NOSHOW'
         SPACE 2
OPTACCES IKJKEYWD
         IKJNAME 'ACCESS',SUBFLD=$ACCESS
         SPACE 2
OPTDDN   IKJKEYWD DEFAULT='DDNAME'
         IKJNAME 'DDNAME',SUBFLD=$DDNAME
         SPACE 2
$ACCESS  IKJSUBF
ACCESSNO IKJIDENT 'PAN ACCESS CODE',INTEG,                             $
               PROMPT='PANVALET ACCESS CODE',                          $
               HELP=('ONE TO FIVE DIGIT PANVALET ACCESS CODE')
         SPACE 2
$DDNAME  IKJSUBF
DDNAME   IKJIDENT 'DDNAME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,    $
               DEFAULT='PANDD1',                                       $
               HELP=('ALTERNATE DDNAME ALLOCATED TO PANVALET LIBRARY', $
               'ONE TO EIGHT CHARACTER ALPHAMERIC DDNAME')
         SPACE 2
         IKJENDP
         PRINT GEN
         EJECT
*
*
*        CONSTANTS
*                        *-----*
ICDE     EQU   158       *MAGIC*
LCDE     EQU   18        *MAGIC*
*                        *-----*
PCMD$EX  DC    CL8'$!EXEC  '
PCMD#EX  DC    CL8'#!EXEC  '
DEFDD    DC    CL8'PANDD1  '
NOENTRY  DC    CL8'NO-ENTRY'
YES      DC    CL8'YES     '
EXECNAME DC    CL8'EXEC    '
VIO      DC    CL8'VIO     '
PANEOF   DC    CL2'$*'
EXCMD    DC    CL2'EX'
NOP      DC    CL5'NOP  '
NOL      DC    CL5'NOL  '
SUBSETST DC    CL6'SUBSET'
         SPACE 2
         PRINT NOGEN
         SPACE
H4       DC    H'4'
H8       DC    H'8'
H24      DC    H'24'
H188     DC    H'188'
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F4       DC    F'4'
F7       DC    F'7'
F8       DC    F'8'
F22      DC    F'22'
F23      DC    F'23'
F24      DC    F'24'
F245     DC    F'245'
         SPACE
CORESIZE DC    AL1(1),AL3(LENWORK)
         SPACE
ADDRPCL  DC    A(PCLCSECT)    ADDR OF PARSE CONTROL LIST
         SPACE 3
STAE     STAE  0,CT,MF=L      PATTERN STAE EXIT
LSTAE    EQU   *-STAE
         SPACE
DCB      DCB   DDNAME=X,DSORG=PS,DEVD=DA,MACRF=GL
LDCB     EQU   *-DCB
BUFNO    EQU   20
DDDCB    EQU   40
DCBOFLGS EQU   48
X        EQU   0
PSMODEL  DCB   DDNAME=X,DSORG=PS,RECFM=FB,DEVD=DA,LRECL=80,            X
               BLKSIZE=1280,MACRF=PM
LPSMODEL EQU   *-PSMODEL
ADDN     EQU   12
         EJECT
*
*        PROGRAM MESSAGES
*
         SPACE 2
         PRINT NOGEN
MSGMEMLG MSG  ' $ COMMAND ERROR - MEMBER NAME IS TOO LARGE.'
MSGNOPRC MSG  ' $ COMMAND ERROR - NAME NOT FOUND IN PANVALET LIBRARY.'
MSGNOPRD MSG  ' NAME IS ILLEGAL FOR SYSPROC LIBRARY SEARCH.'
MSGBDCHR MSG  ' $ COMMAND ERROR - ILLEGAL CHARACTERS IN MEMBER NAME.'
MSGNOMEM MSG  ' $ COMMAND ERROR -  NO MEMBER NAME SPECIFIED.'
MSGINACT MSG  ' WARNING: MEMBER SPECIFIED IS INACTIVE. PEXEC CONTINUES'
MSGDISAB MSG  ' WARNING: MEMBER SPECIFIED IS DISABLED. PEXEC CONTINUES'
MSGMEM02 MSG  ' ++INCLUDE ERROR - MEMBER NAME IS NOT ALPHANUMERIC.'
MSGMEM07 MSG  ' ++INCLUDE ERROR - MEMBER NAME EXCEEDS 10 CHARACTERS.'
MSGINCER MSG  ' ++INCLUDE ERROR - MEMBER IS NOT IN LIBRARY.'
MSGNOFRM MSG  ' LIBRARY SPECIFIED BY DDNAME HAS NOT BEEN FORMATTED.'
MSGNODD  MSG  ' SPECIFIED DDNAME IS NOT ALLOCATED.'
MSGCMDER MSG  ' PEXEC COMMAND LINE IS IN ERROR.'
MSGNOACC MSG  ' MEMBER REQUIRES ACCESS CODE AND NONE WAS SPECIFIED.'
MSGOPNER MSG  ' CONTACT TECHNICAL SUPPORT. ERR OPENING LIB FOR SECK.'
MSGBADAC MSG  ' ACCESS CODE IS NOT CORRECT FOR MEMBER SPECIFIED.'
MSGVIOER MSG  ' CONTACT TECHNICAL SUPPORT. ERR OPENING VIO DATASET.'
MSGPRDER MSG  ' CONTACT TECHINCAL SUPPORT. ERR DURING PREAD IN PEXEC.'
MSGPCLSE MSG  ' PAM FAILED DURING PCLOSE IN PEXEC.'
MSGBADPO MSG  ' CONTACT TECHNICAL SUPPORT. PAM FAILED IN POPEN.'
MSGPSR02 MSG  ' MEMBER NAME NOT ALPHANUMERIC.'
MSGPSR07 MSG  ' MEMBER EXCEEDS 10 CHARACTERS.'
MSGPSR23 MSG  ' SPECIFIED MEMBER NOT IN PANVALET LIBRARY.'
MSGPS245 MSG  ' CONTACT TECHNICAL SUPPORT. INTERNAL PSRCH ERROR 245.'
MSGPSR## MSG  ' CONTACT TECHNICAL SUPPORT. INTERNAL BAD PSRCH CODE.'
MSGSTRER MSG  ' PARAMETER TO BE PASSED EXCEEDS 188 CHARACTERS.'
MSGCLEXE MSG  ' CONTACT TECHNICAL SUPPORT. PCLOSE FAIL IN EXIT PROCESS'
MSGPARSE DC    C' PARSE ERROR CODE '
         EJECT
*
*        DYNAMIC WORK AREA
*
         SPACE 3
WORKAREA DSECT
MAINSAVE DS    18A
         SPACE
VALSAVE  DS    18A
         SPACE
PARSELST DS    5A             AREA FOR PARSE PARAMETER LIST
         SPACE
STAEREGS DS    16A
STAESAVE DS    18A
BASES    DS    3A             PROGRAM BASE ADDRESSES
         SPACE
R14SAVE  DS    A
R14FREE  DS    A
R14DAIR  DS    A
R14ALER  DS    A
OPENDCB  DS    A
         SPACE
CPPLSAVE DS    A
ADDRCBUF DS    A
ADDRUPT  DS    A
ADDRPSCB DS    A
ADDRECT  DS    A
         SPACE
ADDRANSR DS    A
         SPACE
PTR2$    DS    A
PTR2NAM  DS    A
ADDRCPRM DS    A
ADDRPRME DS    A
         SPACE
         SPACE
DAIRCODE DS    F
         SPACE 2
ATTNECB  DS    F
         SPACE
PARMLIST DS    7A
         SPACE 2
DOUBLE   DS    D
         SPACE
STAEPARM STAE  0,CT,MF=L
         SPACE
CODE     DS    H
JEF2ADDR DS    F
DFDOPT   DS    H
DAIRRC   DS    F
ACTION   DS    F
PAMPARM  DS    6F
DAPLLST  DS    4F
DFDLST   DS    4F
EXECCPPL DS    4F
EXECRCDE DS    4F
PUTOLD1  DS    3F
PUTOLD2  DS    3F
MSGTEXT1 DS    XL124
MSGTEXT2 DS    XL124
LDSN     DS    H
DSN      DS    CL44
FLAG     DS    CL2             TWO BYTES FOR FLAG BITS, ONLY FIRST
*                              BYTE IS USED CURRENTLY.
FPOPN    EQU   X'80'           POPEN HAS BEEN PERFORMED
FLOPN    EQU   X'40'           PAN LIB OPEN FOR QSAM
FLOAD    EQU   X'20'           FGPAN23 IS IN MEMORY
FVIOA    EQU   X'10'           A VIO DATASET IS ALLOCATED
FVIOO    EQU   X'08'           THE VIO DATASET ABOVE IS OPEN
FEXCOMP  EQU   X'04'           WE HAVE RETURNED FROM EXEC PROCESSOR
F$       EQU   X'02'           WE WERE ENTERED VIA $
F#       EQU   X'01'           WE WERE ENTERED VIA #
*                               ---FLAG BYTE 2---
F9CHAR   EQU   X'80'           WE HAVE NINE CHARACTERS IN NAME
F1STALFA EQU   X'40'           THE FIRST CHARACTER IS ALPHA.
FNATINAL EQU   X'20'           A CHARACTER WAS NATIONAL.
FDOT     EQU   X'10'           $ SCAN DISCOVERED A DOT
FNOOPRND EQU   X'08'           $ SCAN DISCOVERED NO OPERANDS
F$EX     EQU   X'04'           $ CALLED EXEC FOR SYSPROC PROCESSING
DDNSAVE  DS    CL8
DIRENTRY DS    0CL80
DSECURE  EQU   *+17
DUSER    EQU   *+13
ACTIVE   EQU   *+24
ENBL     EQU   *+25
PANREC   DS    CL80
NAME1    DS    CL22
COMMENT  DS    CL52
SUBSET   DS    CL27
         DS    0F
CMDLEN   DS    H
CMDOFF   DS    H
CMDBUF   DS    CL256
         SPACE 3
DAIRBLK  DS    25D            SPACE FOR DAIR PARAMETER LIST
LDAIRBLK EQU   *-DAIRBLK
PANDD1   DCB   DSORG=PS,MACRF=GL,DEVD=DA,DDNAME=X
DCBDDNAM EQU   40
DCBEXLST EQU   36
PSDCB    DCB   DSORG=PS,MACRF=PM,DEVD=DA,DDNAME=X,RECFM=FB,            $
               BLKSIZE=6080,LRECL=80
         DS    0D
         DS    25D
LENWORK  EQU   *-WORKAREA
         PRINT GEN
         EJECT
         IKJPPL
         EJECT
         IKJIOPL
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IKJCPPL
         EJECT
         IKJDAPL
         EJECT
         IKJEFFDF DFDSECT=YES
         EJECT
         IKJDAP08
         EJECT
         IKJDAP18
         EJECT
         IKJDACB
         EJECT
         END PEXEC
