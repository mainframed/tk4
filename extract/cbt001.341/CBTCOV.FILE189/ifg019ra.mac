*
* MODULE NAME = IFG019RA
*
* DESCRIPTIVE NAME = OPEN/CLOSE/EOV/DADSM "RESIDENT" ROUTINE
*
* FUNCTION =
*        THIS ROUTINE USED TO HAVE A FUNCTION IN MVT, BUT ITS
*        USE IN MVS CANNOT BE RATIONALLY EXPLAINED EXCEPT AS
*        AN HISTORICAL THROWBACK. WHEN OPEN CONSISTED OF MANY
*        TYPE 4 SVC MODULES WHICH COMMUNICATED THROUGH XCTL
*        LOGIC, THE RESIDENT ROUTINE WAS THE CODE IN THE
*        NUCLEUS WHICH COORDINATED THE XCTL LINKAGE. ITS PRIMARY
*        FUNCTIONS WERE TWOFOLD: 1) TO PERMIT THE LOGICAL EQUIVALENT
*        OF SUBROUTINE CALL LINKAGE BETWEEN TWO TRANSIENT MODULES
*        DESPITE THE FACT THAT THE CALLED MODULE COULD PHYSICALLY
*        REPLACE THE CALLING MODULE IN MAIN STORAGE. 19RA KEPT
*        TRACK OF THE HISTORY OF THE LINKAGE AND ALLOWED A
*        LOGICAL "RETURN" TO BE PERFORMED BY XCTL BACK TO THE
*        ORIGINAL MODULE. 2) TO REDUCE SYSTEM I/O REQUESTS WHEN
*        OPENING MORE THAN ONE DCB, 19RA ACTS AS A SORT OF
*        PSEUDO DISPATCHER FOR THE PARALLEL OPEN PROCESSING.
*        ITS LOGIC ENSURES THE SERIAL REUSE OF ANY LOADED
*        TRANSIENT ROUTINE BY EVERY DCB WHICH NEEDS THAT MODULE
*        AT THIS TIME BEFORE THE MODULE IS REPLACED IN STORAGE
*        BY THE NEXT TRANSIENT.
*
* MODIFICATION LOGIC =
*        THIS MOD PROVIDES THE OUTLINE OF A GENERAL PURPOSE
*        OPEN INTERCEPT. YOU ADD THE LAST TWO CHARACTERS OF THE
*        IFG019, IFG020, OR IFG055 MODULE TO THE MODULE TABLE
*        AT THE END OF THIS SOURCE ALONG WITH A HALFWORD
*        FUNCTION CODE. WHEN ANY TRANSFER OF CONTROL TO THE
*        SPECIFIED MODULE IS ABOUT TO TAKE PLACE, THIS MODIFICATION
*        FIRST TRAPS TO AN SVC ROUTINE. UPON ENTRY TO THE SVC
*          R15 = FUNCTION CODE FROM THE MODULE TABLE
*          R0  = IF ZERO, REGS TO BE PASSED TO THE MODULE
*                WERE LOADED PRIOR TO INVOKING THE TRAP SVC
*                AND CAN BE FOUND IN THE CURRENT SVRB. IF
*                NON-ZERO, A POINTER TO A CONTROL BLOCK
*                CONTAINING THE REGS WHICH WILL BE PASSED
*          R1  = ADDRESS OF THE WHERE-TO-GO TABLE WITH THE
*                FULL MODULE NAME.
*        SINCE THE INTERCEPT SVC CAN BE SCREENED, THIS APPROACH
*        ALLOWS SIMPLE LOCAL DEBUGGING OF ANY PROPOSED OPEN FRONT*
*        END MOD PRIOR TO SYSTEM WIDE INSTALLATION.
IFG019RA CSECT
*        THERE ARE TWO INTERCEPT POINTS. "ZAP1" IS IN THE
*        LOGICAL DISPATCHER WAIT FUNCTION. ONCE A MODULE
*        HAS BEEN LOGICALLY "LOADED" INTO MEMORY, THE DISPATCHER
*        ENSURES THAT EVERY DCB BEING OPENED IN PARALLEL WHICH
*        WANTS TO USE THIS MODULE HAS A CRACK AT IT BEFORE THE
*        NEXT MODULE IS LOADED. THE "ZAP1" LABEL IS IN THE
*        SPECIAL CODE WHICH PREPARES THE SECOND OR SUBSEQUENT
*        DCB FOR ACCESS TO THE MODULE.
ZAP1     EQU   IFG019RA+X'C8'          JUST AFTER RES01200
*        RESTRACE IS THE LABEL OF A NO-OP IN THE LOGICAL "LOAD"
*        FUNCTION WHICH RESERVES SPACE FOR A BRANCE TO A TRACE
*        ROUTINE. IF THE NO-OP IS TURNED INTO A BRANCH, THEN
*        A WTO WILL BE ISSUED WITH THE NAME OF EVERY MODULE
*        WHICH O/C/E LOGICALLY LOADS. THIS IS OBVIOUSLY PART
*        OF A RATHER GROSS DEBUGGING TOOL USED BY THE PROGRAM
*        DEVELOPERS. IT IS NICE FOR OUR PURPOSES BECAUSE IT
*        CLEARLY IDENTIFIES THIS AS A "NICE" PLACE TO ZAP.
RESTRACE EQU   IFG019RA+X'7D0'
RES03300 EQU   IFG019RA+X'8E4'
PATCH    EQU   IFG019RA+X'B68'
         USING IFG019RA,R5
         USING FORCORE,R4
         PRINT DATA
*ZAP CARD ++ USERMOD (HG00030).
*ZAP CARD ++ VER(Z038) FMID(EDM1102) PRE(UZ22510).
*ZAP CARD ++ ZAP(IFG019RA).
*ZAP CARD  NAME IFG019RA
*ZAP START VER
         ORG   ZAP1
         NI    DCBIFLGS-IHADCB+DXDCB,ALLBITS-DCBIFPIO
         LM    R9,R14,DXREG9
         LM    R0,R1,DXREG0
         ORG   RESTRACE
         NOP   RES03300
         ORG   PATCH
         DC    X'00000000'
*ZAP START REP
         ORG   ZAP1
         BAL   R15,PATCH2              TRAP FROM DISPATCHER
         ORG   RESTRACE
         BAL   R15,PATCH               TRAP FROM LOADER
         ORG   PATCH
         LR    R0,R10                  R10 -> IECPREFX WITH REGS
CHKNAME  LA    R1,MODIDS               CHECK FOR TRAPPED MODULE
NAMELOOP CLI   0(R1),0                 END OF LIST?
         BER   R15                     YES, QUIT
         CLC   6(2,R6),0(R1)           CHECK SUFFIX
         BE    TRAP                    MATCH, THEN TRAP
         LA    R1,3(R1)                GO TO NEXT ENTRY
         B     NAMELOOP                CHECK AGAIN
TRAP     ICM   R15,B'1000',2(R1)       PICK UP TRAP FUNCTION CODE
         LR    R1,R6                   WHERE TO GO TABLE
         SVC   237                     ISSUE TRAP SVC
         BR    R15                     RETURN TO CALLER
PATCH2   NI    DCBIFLGS-IHADCB+DXDCB,ALLBITS-DCBIFPIO
         LM    R9,R14,DXREG9           LOAD UP REGS
         SR    R0,R0                   INDICATE IN SVRB
         B     CHKNAME                 GO CHECK MODULE NAME
MODIDS   DC    CL2'4F',AL1(4)      TAPESYS
         DC    AL1(0)
         LTORG
*ZAP STOP
         PRINT NOGEN
         IECEQU  IEZDEB=YES
R10      EQU   10                 ADD TWO DIGIT REGISTER EQU'S
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         IECDSECS CVT,DCB,MAIN,WTG,PREFX,                              X
               PSA,TCB,RB,                                             X
               EXPAND=YES
         END   IFG019RA
