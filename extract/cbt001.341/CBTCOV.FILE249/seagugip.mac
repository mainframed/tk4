.cm
.CM      PDSDOC *UOW SCRIPT INPUT FOR DOCUMENTATION OF SEAG MODS......*
.cm
.co yes
.sr pubMYhs = 1
.ef set close
.TT 1 ///
.tm +2
.ss
.im syspub layout=manual ju=no hy=no ll=76
.pl 70
.point set 1 1 1
.sr pubFNsup = nosup
.sr pubSWinc = 4
.sr pubSWpch = 0
.cm .sr pubFIhdr = 'EXAMPLE'
.major PART
.ll 76
.ad 0
.CM      PDSDOC *DOCUMENTATION ON SPRECHER MODS TO TSSO FOR MLWTO.....*
.titlepage
TSSO Release 4.3
.sp 5
AOF PROCESSING
.sp
OF
.sp
MULTI LINE
.sp
WTO MESSAGES
.sp 30
David Cartwright
Sprecher Energie AG
CH-5036 OBERENTFELDEN
Switzerland
.prelim 'Abstract'
This paper describes the changes made to TSSO AOF processing at the
Sprecher Energie computer centre in Switzerland to handle Multi-Line WTO
messages such as the VTAM error message IST663I.
.chapter 'TEXT'
.sr pubCHrom = 0
.section 'BACKGROUND'
Sprecher Energie AG only run two shifts, the night work is handled by
OPC/A without an Operator being present. If Production jobs fail
overnight our OPC/A exit (see CBT File 172) will 'BLEEP' the duty
Analyst who dials into TSO with a portable PC and tries to fix the
problem. Thus if we don't hear an alarm, we think that everything is OK.
On the night of 3-4 July 1992 nobody heard an alarm, but things were
definitely not OK. One of our non-IBM 3174 compatible controllers
suffered some sort of aberration, and refused all BIND requests. VTAM
issued the message set IST663I, IST664I, IST889I and IST314I describing
the BIND FAILURE with SENSE=080A0000, an unconditional BIND Reject. VTAM
immediately re-tried the BIND which was immediately refused in a
sequence which went on throughout the night. Because VTAM runs at a high
dispatching priority it tied up one hundred percent of the CPU and
nothing else ran. Our online systems were three hours late starting the
next morning. Although this was the first time this failure had occured
in four years of processing, it was so severe that we had to find some
way to handle it. There may well be some VTAM parameter to define the
retry time, but our VTAM expertise was not great enough to find it. We
thought we could automate the handling of IST663I to forestall a
repetition of this problem. The console automation tool we run is
'TSSO' Release 4.3 from File 401 of the CBT Tape Level 321. When we
looked at the automation of messages IST663I and IST664I we ran into a
basic problem; these messages are both data lines of a Multi-Line WTO,
and TSSO cannot handle Multi-Line WTO's. We have modified TSSO to be
able to process these messages, and this paper documents the new
processing options.
.section 'TSSO AUTOMATED OPERATIONS FACILITY'
The User should be familiar with the basic operation of TSSO AOF as
documented in the User's Guide provided by Bellcore Inc. on file 401 of
the CBT tape. This paper will only document the new and changed operands
provided by these modifications.
.subsection 'TABENTRY OPERANDS'
The TABENTRY macro, and the AOF processing of the table, have been
changed significantly, although a reasonable degree of downwards
compatibility has been maintained.
.subsub 'The Entry-Id Operand'
A significant change which can trap the unwary has nothing to do with
MLWTO processing, but is designed to reduce the overhead of running
TSSO. Previously TSSO would scan the entire AOF table for every message,
even after a match had been found. We have changed this logic such that
.ud set ³
if a match is found,
.ul and_no_Entry_Id_is_provided³,
AOF processing for that message will end without scanning the rest of
the table. Note that this logic only works when a match is found,
including any TEST operands. Several entries can be created for the same
message with different TEST operands, and each will be processed
until the TEST is matched. If there is no Entry-Id processing will stop
at that point. Thus if the User wants more than one action to be
performed on a message, Entry-Ids must be provided on each TABENTRY
macro except
.fignum entryid
.ur the last. Example &entryid shows this processing applied to the
IEF238D allocation recovery message. Only one of these entries will be
processed, depending on if and when the 'WAIT' option
appears. Conversely
.fignum clrdump
.ur Example &clrdump shows two entries for a message which will both
be processed when IEA994A appears.
.sp
Users installing these mods to TSSO should check their existing AOF
tables to ensure that this condition is met, because it is a change
which is not downwards compatible.
.subsub 'The TEXT Operand'
In vanilla TSSO it is legal to code a 'TEXT=' operand where it makes no
sense, even when ACTION=POST is coded. An entry with this combination
will overwrite the AOF table in storage when triggered, the results of
which are unpredictable. We encountered this problem during testing when
we changed an AOF table entry to 'ACTION=POST' without deleting all the
previous operands. Therefore logic has been added to the TABENTRY macro
to generate an MNOTE for this error and to ignore the TEXT operand.
.subsub 'The TEST Operand'
Sprecher Energie have added a new test with the form 'L,nn' where 'nn'
is the Line Number which must match the count of the current
line of a Multi-Line WTO. Any tests previous to the 'L,nn' operand will
only be performed on the first line. If this operand is specified for
messages which are not Multi-Line WTO's an error message will be
generated when the Table entry is triggered. If this test is satisfied
it has important consequencies. All subsequent processing for this AOF
Table entry will be performed on the specified Line Number of the
Multi-Line WTO. This means that data from the previous line(s) cannot be
incorporated in TEXT specifications, only data from the specified line.
If further tests are specified they only be applied to the specified
line, not to any previous line, including the first. Because the line
number being processed is an operand of TEST, it does not make sense to
have more than one 'L,nn' operand - such tests will always
.fignum nobind
.ur
fail. Example &nobind shows an entry for the multi line VTAM error
message IST663I. In this case the first line will be tested for
particular Status indicators, then processing will be switched to the
second line to pick up the LU Name for the TEXT.
.subsub 'The ACTION Operand'
Sprecher Energie have introduced the option 'ACTION=NONE', which is
analogous to IEFBR14 for batch jobs. As it suggests, it terminates
processing for the entry at that point without actually doing anything.
However, in conjunction with the new Entry-Id processing it may be used
to restrict the processing performed on frequently occurring messages
to conserve resource
.fignum stopit
.ur utilisation. Example &stopit shows the entry for IST663I previously
.ur shown in Example &nobind, but with an additional entry that will
prevent TSSO from running through the entire AOF Table for every line of
the multi-line message IST663I. Unconditional BIND failure messages will
be handled by the first entry, every other error will stop at the second
entry.
.subsection 'DISPAOF Command'
The DISPAOF command has been changed to display the 'L,nn' operand
introduced by Sprecher Energie.
.section 'MPF SUPPRESSION'
As documented above, we did some work to reduce the overhead of running
TSSO by defining common message with ACTION=NONE. We then found that you
could reproduce most of the MPF list with this parameter. It seemed
illogical to have two points of control for message suppression, so we
added a small check in AOF processing for MPF suppressed messages. If
true, AOF stopped at that point. Now the MPF list becomes the most
important message suppression mechanism, as it should be. If you want to
process a message with TSSO, remove it from the MPF list (if you use
LOGAN from CBT file270 you may want to leave it in with SUP(NO)). The
message is then eligible for AOF processing, which may itself suppress
the message.
.pa
.section 'THEORY OF OPERATION'
To get the most from the Sprecher Energie mods it helps to understand
how AOF works. The Communications Task builds a copy of each WQE in CSA
before branching to the Sub-System Exit (HASPEXIT). The Sub-System
Interface passes each eligible Sub-System via SSI Code 09 (WTO
Communication) the address of the normal WQE for single line WTO's. For
multi-line WTO's it may pass the address of the Major WQE with no Minor
WQE on the first call, or both a Major and Minor WQE address on
subsequent calls. However, it is important to remember that these
addresses are those of the dummy WQE in CSA, not the real WQE in the
Comms Task address space. This may change in MVS/ESA 4.2.2, where
WTL's at least are created in ECSA. They may still be copied to CSA for
the Sub-System Interface, that information is not available
at the time of writing.
.sp
One eligible Sub-System is TSSO, and the module TSSOSS09 handles this
function. It has three distinct segments, but we are only concerned with
the last one, which is WQE processing. After checking that MPF has not
suppressed this message, it separates the message number, or at least
the first eight characters of the data. This in itself can cause
problems, because the Comms Task shuffles the message about a bit to put
in various flags depending on whether it is issued by an Authorised
program or not. Assuming it has got the right message identifier, it
starts to scan the AOF table for this message, or for a generic message
processing entry with '*' specified as the message identifier. If a
match is found for one of these two tests, it goes on to process the
'TEST=' operands. If the tests are satisfied it tests that MATCHLIM has
not been reached and then performs the 'ACTION' specified. Standard TSSO
Release 4.3 will then go round to test the remaining entries in the AOF
table. However, it will only perform WQE processing for Normal WQE's and
for Major WQE's with no Minor. It will ignore subsequent calls for each
Minor WQE of the Major.
.sp
A fundamental change is that the Sprecher Energie version will process
each and every non MPF-suppressed WQE, whether it is Normal, Major or
Minor. Normal WQE processing is much as before, therefore I will
concentrate on Multi-Line WTO's. The message number is always extracted
from the Major WQE, so for example it is not possible to define
processing for the specific message number IST664I because that number
appears in a Minor WQE. If a specific or generic entry is found in the
AOF table processing continues with the TEST operands, if any. If there
are none there is a danger that the ACTION specified will be performed
for every line of the multi-line WTO, which is probably not required -
be careful. Tests are carried out on the Major WQE until the 'L,nn'
operand is detected. It would be nice to run the chain of Minor WQE's,
but unless you care to write the code to go cross memory into the Comms
Task address space you cannot do that, so our code uses data areas in
the AOF table to keep a count of the number of times it has been entered
for this Major WQE. When this count matches the Line Number specified as
a TEST, all subsequent processing switches to the text in the Minor WQE.
This includes any further tests and all ACTION processing. This does
mean that you cannot mix data from the Major and the Minor WQE's in any
TEXT specification. If this is
.ul not³ the Line Number required the TEST fails and TSSO will continue
to run up the AOF table looking for a match on the message number (of
the Major WQE) or for generic ('*') entries. It is to handle this
situation that we added the 'ACTION=NONE' operand.
.chapter 'Examples'
.pa
.ss
.figbegin
.boxon
*
* REPLY 'WAIT' TO 'DEVICE NAME, WAIT OR CANCEL'
* 04SEP92 CART1 ADDED 'CANCEL' IF 'WAIT' IS NOT AN OPTION.
*
*
         TABENTRY MSG=IEF238D,ACTION=REPLY,TEXT='WAIT',                X
               TEST=((W,4,4,'WAIT',''''))
         TABENTRY MSG=IEF238D,ACTION=REPLY,TEXT='WAIT',                X
               TEST=((W,5,4,'WAIT',''''))
         TABENTRY MSG=IEF238D,ACTION=REPLY,TEXT='WAIT',                X
               TEST=((W,6,4,'WAIT',''''))
         TABENTRY MSG=IEF238D,ACTION=REPLY,TEXT='WAIT',                X
               TEST=((W,7,4,'WAIT',''''))
         TABENTRY MSG=IEF238D,ACTION=REPLY,TEXT='CANCEL'
*
.figure entryid 'MULTIPLE CHOICE ENTRIES'
.figend
.sp 3
.figbegin
.boxon
*
*
* PROCESS SYSTEM DUMP MESSAGES
*
*
CLRDUMP  TABENTRY MSG=IEA994A,ACTION=OSCMD,                            X
               TEXT='DD CLEAR,DSN=(01-02)'
         TABENTRY MSG=IEA994A,ACTION=LOWLIGHT
*
*
.figure clrdump 'MULTIPLE ACTION ENTRIES'
.figend
.figbegin
.boxon
*
* UNCONDITIONAL BIND REJECT
* THIS ENTRY REQUIRES MLWTO SUPPORT
*
         TABENTRY MSG=IST663I,ACTION=OSCMD,                            X
               TEST=((W,02,04,'INIT',' '),(W,07,08,'080A0000','=. '),  X
               (L,2)),                                                 X
               TEXT='V NET,INACT,ID=\S028,08\,F'
*
.figure nobind 'MULTI-LINE WTO TESTS'
.figend
.figbegin
.boxon
*
* THESE ENTRIES REQUIRE MLWTO SUPPORT
*
* 1) UNCONDITIONAL BIND REJECT
*
         TABENTRY MSG=IST663I,ACTION=OSCMD,                            X
               TEST=((W,02,04,'INIT',' '),(W,07,08,'080A0000','=. '),  X
               (L,02)),                                                X
               TEXT='V NET,INACT,ID=\S028,08\,F'
*
* 2) STOP PROCESSING ANY OTHER IST663I MAJOR OR MINOR WQE
*
         TABENTRY MSG=IST663I,ACTION=NONE
*
.figure stopit 'RESOURCE CONSUMPTION LIMITATION'
.figend
.br
.pa
.sp 10
.ce on
*** END ***
.ce off
.qu
