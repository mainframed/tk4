         TITLE 'OSWAIT TSO COMMAND PROCESSOR'
OSWAIT   CSECT
         EQUATES
         STM   R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR    R12,R15            LOAD ENTRY POINT OF OSCMD
         LR    R8,R1              SAVE INPUT PARMS.
         USING OSWAIT,R12
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         GETMAIN R,LV=72          WE NEED STORAGE FOR THE SAVE AREA
*
         LA    R7,4095(R12)       MORE ADDRESSABILITY
         LA    R7,1(R7)
         USING OSWAIT+4096,R7     WELL... R7 WAS THE ONLY ONE LEFT.
*
         ST    R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST    R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR    R13,R1             KEEP A COPY IN R13
*
         GETMAIN R,LV=4096         GETMAIN SOME PRIVATE STORAGE...
         LR    R11,R1
         USING OSWTDATD,R11
***********************************************************************
* THIS IS THE OSWAIT COMMAND PROCESSOR.                               *
***********************************************************************
* COMMAND SYNTAX:                                                     *
*                                                                     *
* OSWAIT ENTRYID() TIMEOUT()                                          *
*                                                                     *
* WHERE ENTRYID IS THE AN ENTRYID IN THE CURRENT AOF TABLE AND        *
*       TIMEOUT IS THE AMOUNT OF SECONDS YOU ARE WILLING TO WAIT      *
*       FOR THE MESSAGE TO APPEAR.                                    *
*                                                                     *
*                                                                     *
* THIS COMMAND IS DESIGNED TO BE USED UNDER THE TSSO SUBSYSTEM. IT IS *
* INTENDED TO PROVIDE A TSSO AUTOMATION CLIST WITH THE CAPABILITY OF  *
* WAITING UNTIL A GIVEN MESSAGE APPEARS, BEFORE CONTINUING. WHEN      *
* THE MESSAGE APPEARS ON THE MVS CONSOLE, THIS COMMAND PROCESSOR      *
* WILL BE POSTED. IF THE MESSAGE DOES NOT APPEAR BEFORE THE           *
* TIMEOUT VALUE IS REACHED, THE COMMAND WILL RETURN THE APPROPRIATE   *
* RETURN CODE (8).                                                    *
*                                                                     *
* IF THE MESSAGE DOES APPEAR, THE TEXT OF THE MESSAGE THAT CAUSED THE *
* CLIST TO BE INVOKED WILL BE AVAILABLE TO THE CLIST IN CLIST         *
* VARIABLES. THE FOLLOWING VARIABLES ARE CREATED.                     *
*                                                                     *
* W0 - NUMBER OF WORDS IN THE WTO                                     *
* W1-WN  WORD 1 THROUGH WORD N                                        *
* NOTE THAT THE FIRST WORD IN THE MESSAGE IN THE TIMESTAMP IN THE WTO.*
***********************************************************************
*
* VERSION IDENTIFIER:  TSSO VERSION 4.3
* AUTHOR. MARC SCHARE
***********************************************************************
*
* MODIFIED
*   20OCT92  GLA  USE NEW DSECT FOR AOF TABLE ENTRIES
*
***********************************************************************
         MVC   STIMERD(STIMRPEN-STIMRPRE),STIMRPRE     COPY STIMER
*                                                   PREPROCESSING EXIT
         MVC   OSCALL1D(OSCALL1E-OSCALL1C),OSCALL1C
         MVC   ERROR1HD(82),ERROR1HC
         MVC   ERROR2HD(82),ERROR2HC
         MVC   ERROR3HD(82),ERROR3HC
         MVC   ERROR4HD(82),ERROR4HC
         MVC   ERROR6HD(82),ERROR6HC
         MVC   ERROR7HD(82),ERROR7HC
         MVC   ERROR8HD(82),ERROR8HC
         MVC   ERROR9HD(82),ERROR9HC
         MVC   ERRORAHD(82),ERRORAHC
         MVC   ERRORBHD(82),ERRORBHC
         MVC   ERRORCHD(82),ERRORCHC
         MVC   MESSAGED(152),MESSAGEC
         MVC   OPESTAED(ESTAECE-ESTAEC),ESTAEC
         L     R2,16               GET CVT
         USING CVT,R2
         L     R2,CVTTVT           GET TIME SHARING VECTOR TABLE
         USING TSVT,R2
         LTR   R2,R2               IS THIS A TSO/E R2 SYSTEM ?
         BZ    ERRORA              FAKE NO CLIST...
         L     R15,TSVTVACC        GET ADDRESS OF CLIST ROUTINE TO
         ST    R15,VACCRTN         STORE THIS SUCKER AWAY
*
*
         LA    R2,OSWTDATD
         ST    R2,STIMPARM         GET ADDRESS OF DSECT AREA FOR PARMS
         LA    R2,STIMEREX         GET ADDRESS OF STIMER EXIT
         ST    R2,STIMREAL         AND TELL STIMER PREPROCESSOR
         LA    R2,IOPLADS
         USING IOPL,R2
         L     R3,0(8)
         ST    R3,CPPLCBUF
         L     R3,4(8)
         ST    R3,CPPLUPT
         ST    R3,IOPLUPT
         L     R3,8(8)
         ST    R3,CPPLPSCB
         L     R3,12(8)
         ST    R3,CPPLECT
         ST    R3,IOPLECT
         L     R3,ECBADS
         ST    R3,IOPLECB
*
         TESTAUTH FCTN=1
         LTR   R15,R15
         BNZ   ERROR4
*
         MVC   PPLUPT(4),CPPLUPT       MOVE IN UPT
         MVC   PPLCBUF(4),CPPLCBUF     MOVE IN CBUF/
         MVC   PPLECT(4),CPPLECT       MOVE IN ECT
         L     R1,=V(OSWPARSE)         GET ADDRESS OF PARM CONTROL
         ST    R1,PPLPCL               MOVE IT IN
         LA    R1,MYECB                GET ADDRESS OF AN ECB
         ST    R1,PPLECB               MOVE IT IN
         XC    PPLUWA(4),PPLUWA        ZERO OUT THE WORK AREA
         LA    R1,MYANS                GET ADDRESS OF AN ANSWER
*                                      PLACE
         ST    R1,PPLANS
         LA    R1,PPL                  FINALLY, LOAD R1 WITH A(PPL)
***********************************************************************
* THE FIRST STEP IS TO PARSE THE INPUT, AND DETERMINE WHAT THE USER IS
* AFTER.
***********************************************************************
         LINK  EP=IKJPARS
         L     R9,MYANS
         USING IKJPARMD,R9
*
         LH    R3,ENTRY
         LTR   R3,R3                 WAS ONE SPECIFIED ?
         BZ    ERROR8                NO, KICK HIM OUT.
         LH    R3,ENTSUBID+4         PICK UP THE LENGTH
         L     R4,ENTSUBID
         BCTR  R3,0
         MVI   ENTSPEC,C' '
         MVC   ENTSPEC+1(7),ENTSPEC
         EX    R3,MOVEMSG
         B     ARD1
MOVEMSG  MVC   ENTSPEC(0),0(R4)      ** EXECUTED **
ARD1     DS    0H
*
*
CHEKTMEO DS    0H
         LH    R2,TIMEOUT
         LTR   R2,R2
         BZ    DEFTIMEO              DID NOT SPECIFY TIME.
         L     R2,TMESUBID           OBTAIN THE TIMEOUT VALUE
         L     R3,0(R2)              PICK UP THE ACTUAL VALUE
         C     R3,=F'1'
         BL    ERROR7
         C     R3,=F'10000'          MANY HOURS
         BH    ERROR7
         M     R2,=F'100'            GET .01 SECONDS
         ST    R3,TIMEOVAL           GOT IT !
         B     TIMEOK
DEFTIMEO DS    0H
         MVC   TIMEOVAL,=F'1000'     DEFAULT 10 SECONDS
*
TIMEOK   DS    0H
         DROP  R9
*
***********************************************************************
* WE NOW HAVE THE VALUES FOR ENTRYID AND TIMEOUT. WE NEXT OBTAIN THE  *
* ACTIVE TSSO AOF TABLE, AND SCAN FOR THE APPROPRIATE ENTRYID.        *
* AS IS CUSTOMARY, WE WILL CHECK IF TSSO IS ACTIVE.                   *
***********************************************************************
         GETCVT (R10)
         LTR   R15,R15
         BNZ   ERROR1
         USING TSSOCVT,R10
         LTR   R10,R10           IS TSSO EVEN THERE ?
         BZ    ERROR1            NO, BLOW HIM AWAY
         TM    TSSOFLG1,TSSOGONE TSSO BLOWN AWAY ?
         BO    ERROR1            YUP- SORRY GUY.
         L     R9,TSSOTABL       GET CURRENT TSSO TABLE ADDRESS
         LTR   R9,R9             IS AOF ACTIVE ?
         BZ    ERROR2
***********************************************************************
* R9 WILL SERVE AS THE BASE WHEN WE GO TRAMPING THROUGH THE AOF TABLE.*
*                                                                     *
***********************************************************************
*
*
         CLC   44(8,R9),=CL8'TSSO 4.3'
         BNE   ERROR3
*
         L     R9,0(R9)          POINT TO FIRST RECORD IN TABLE.
         USING AOFNTRY,R9        SETUP ADDRESSABILITY
AOFLOOP  DS    0H
         LTR   R9,R9             IS THIS A VALID RECORD ?
         BZ    ENDRECS           NO, NO MORE RECORDS
         CLC   AOFMSGID,=CL8'ZZZZZZZZ' END OF RECORDS INDICATOR ?
         BE    ENDRECS
*
         CLC   AOFENTR,ENTSPEC   IS THIS THE SPECIFIED ENTRY ?
         BNE   NEXTREC           NO, FORGET IT...
*
***********************************************************************
* HERE, WE HAVE FOUND A MATCHING ENTRY ID IN THE TSSO AOF TABLE. WE   *
* WILL CHECK IF ACTION=POST WAS SPECIFIED...                          *
*                                                                     *
***********************************************************************
         CLC   AOFACTN,=CL8'POST'    WAS ACTION=POST SPECIFIED?
         BNE   NEXTREC               NO, FORGET IT.
***********************************************************************
* HERE, ACTION=POST WAS SPECIFIED...                                  *
***********************************************************************
         TM    AOFPFLG,AOFP1WT      IS THIS RECORD ALREADY ACTIVE ?
         BO    ERROR3
         B     FOUNDREC
*
NEXTREC  DS    0H
         L     R9,AOFNXT
         B     AOFLOOP
*
ENDRECS  DS    0H
         MVC   ERROR6HD+13(8),ENTSPEC
         B     ERROR6
*
***********************************************************************
* WE NOW NEED TO MOVE IN VARIOUS FIELDS INTO THE AOF TABLE... WE WILL *
* ACCOMPLISH THIS NOW.                                                *
***********************************************************************
FOUNDREC DS    0H
         MODESET KEY=ZERO
         LA    R2,OSWTECB
         ST    R2,AOFPECB          DEPOSIT ECB INTO TABLE
         L     R2,X'224'
         ST    R2,AOFPASCB         DEPOSIT ASCB INTO TABLE.
         MVI   AOFWQE,C' '
         MVC   AOFWQE+1(146),AOFWQE BLANK OUT WTO ENTRY.
         MODESET KEY=NZERO
***********************************************************************
* NEXT, WE PREPARE TO AWAIT THE MESSAGE. WE WILL WAIT FOR ONE OF TWO  *
* EVENTS. EITHER THE MESSAGE WILL APPEAR, AND POST OUR ADDRESS SPACE  *
* OR THE TIMER WILL POP, BECAUSE THE MESSAGE DID NOT APPEAR.          *
***********************************************************************
         STIMER REAL,STIMERD,BINTVL=TIMEOVAL
***********************************************************************
* WE WILL AWAKEN UPON ONE OF TWO EVENTS. IF THE STIMER EXPIRES, THE   *
* STIMEREX EXIT IS DRIVEN, AND THIS WILL POST THE ECB. THIS MEANS THAT*
* THE EXPECTED MESSAGE NEVER DID MATERIALIZE, AND     THEREFORE, WE   *
* WILL DUMMY UP THE RESPONSE, SET A CONDITION CODE AND GIVE UP.       *
* ON THE OTHER HAND, IF THE MESSAGE DID MATERIALIZE, WE WILL CANCEL   *
* STIMER, AND PARSE THE RESULTS...                                    *
***********************************************************************
         XC    OSWTECB(4),OSWTECB
         XC    STIMRECB(4),STIMRECB
         LA    R2,OSWTECB             GET ADDRESS OF OSWTECB
         ST    R2,LISTECBS            STORE IN LIST
         LA    R2,STIMRECB            GET ADDRESS OF OTHER ECB
         ST    R2,LISTECBS+4           STORE IN LIST
         OI    LISTECBS+4,X'80'       SET HIGH ORDER BYTE
***********************************************************************
* BECAUSE AN ADDRESS SPACE MAY BE CANCELLED WHILE WAITING FOR TSSO    *
* SERVICES, WE MUST PROVIDE AN ESTAE ROUTINE TO RECOVER...            *
***********************************************************************
         L     R6,=V(OSWAITRC)
         LTR   R6,R6              SAVE ENTRY POINT
         BZ    BADESTAE
*
         ESTAE (R6),TERM=YES,PARAM=(R9),MF=(E,OPESTAED)
*
         LTR   R15,R15
         BNZ   BADESTAE
         B     OKESTAE
BADESTAE DS    0H
         MVC   MESSAGED(2),=H'50'
         MVC   MESSAGED+4(50),=CL50'OSWAIT ESTAE NOT IN EFFECT'
         PUTLINE PARM=PUTBLOK,OUTPUT=(MESSAGED,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
OKESTAE  DS    0H
*
***********************************************************************
* FINALLY, LETS SET THE BIT INDICATING THIS MESSAGE IS ACTIVE.        *
*                                                                     *
***********************************************************************
         MODESET KEY=ZERO
         OI    AOFPFLG,AOFP1WT        THE BIT IS SET.
         MODESET KEY=NZERO
*
         WAIT  ECBLIST=LISTECBS
*
*
***********************************************************************
* WE HAVE BEEN POSTED, EITHER FROM THE WTOR BEING POSTED, OR FROM THE *
* STIMER POPPING...        IF POSTED THROUGH OUR STIMER EXIT, WE ARE  *
* OK, IF POSTED THROUGH THE TSSOSS09 XMEM POST, WE SHOULD CANCEL THE  *
* STIMER.                                                             *
***********************************************************************
         TM    OSWTECB,X'40'          POST BIT ON ?
         BNO   PSTTSTIM
         TTIMER CANCEL
***********************************************************************
* FOLLOWING THE TTIMER, THERE IS A CHANCE THAT THE TIMER EXIT WAS     *
* SCHEDULED (IF TIME REMAINING IS ZERO) BUT NOT YET CALLED. TO HANDLE *
* THIS RARE OCCURANCE, WE WILL CHECK..                                *
***********************************************************************
         LTR   R0,R0          ANY TIME INTERVAL REMAINING ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         TM    STIMRECB,X'40' WERE WE ALREADY POSTED ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         WAIT  ECB=STIMRECB   WE HAVE TO BE CONCERNED... WAIT TILL
*                             STIMER EXIT POPS BEFORE CONTINUING.
NOWAIT2  DS    0H
*
         MVI   BUFFER,C' '
         MVC   BUFFER+1(149),BUFFER
         MVC   BUFFER(147),AOFWQE   COPY THE WTO CAUSING THE EVENT.
         MODESET KEY=ZERO
         NI    AOFPFLG,255-AOFP1WT    THE BIT IS UNSET.
         MODESET KEY=NZERO
         ESTAE 0
         CLC   OSWTECB+1(3),=XL3'000FFF'
         BE    ERRORC
*
         B     PUTRESP
*
PSTTSTIM DS    0H
***********************************************************************
* HERE, THE STIMER EXIT HAS POPPED, AND POSTED THE STIMERECB, MEANING *
* THAT THE MESSAGE HAS NOT APPEARED. WE WILL SET A BAD RETURN CODE,   *
* AND TERMINATE.                                                      *
***********************************************************************
         MODESET KEY=ZERO
         NI    AOFPFLG,255-AOFP1WT    THE BIT IS UNSET.
         MODESET KEY=NZERO
         ESTAE 0
         DROP  R9
*
         MVC   RETCODE(2),=H'8'       SET BAD RETURN CODE
         B     ENDPROG
PUTRESP  DS    0H
***********************************************************************
* HERE, WE HAVE THE MESSAGE THAT CAUSED THE POST TO OCCUR. WE WILL    *
* PARSE THE MESSAGE AND CREATE CLIST VARIABLES.                       *
***********************************************************************
*
PUTCLSTV DS    0H
*
         LA    R4,TSVEUPDT         WE WISH TO UPDATE CLIST VARS..
         ST    R4,ECODE
*
         LA    R4,CLVARNME         GET VARNAME PTR
         ST    R4,NAMEPTR          TELL IKJCT441
         MVC   CLVARNME(3),=CL3'WTO'
*
         LA    R4,3
         ST    R4,NAMELEN
*
GOTNAME  DS    0H
         LA    R2,BUFFER          POINT TO WTO...
         ST    R2,VALUEPTR
*
         LA    R3,BUFFER
         LA    R4,BUFFER+132      START AT LAST CHARACTER
LLOOP    DS    0H
         CLI   0(R4),C' '
         BNE   NBLNKFND           FOUND A NONE BLANK
         BCTR  R4,0
         CR    R4,R3              ARE WE DONE
         BL    NULLVAR            YUP, PITTY...
         B     LLOOP
*
NULLVAR  DS    0H
         XR    R4,R4
         ST    R4,VALUELEN
*
NBLNKFND DS    0H
         SR    R4,R3              GOT THE LENGTH IN R4
         LA    R4,1(R4)
         ST    R4,VALUELEN
*
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELEN,            PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
*
         LTR   R15,R15
         BNZ   ERRORB
*
***********************************************************************
* NOW, WE WANT TO PARSE THIS RETURNED LINE INTO ITS COMPONENT FORM. TO*
* ACCOMPLISH THIS, WE CALL THE TSSOPARS ROUTINE, SCAN THE RESULTS,    *
* AND PUT THE WORDS INTO CLIST VARIABLES.                             *
* WE BEGIN BY SETTING UP THE CALL TO TSSOPARS                         *
***********************************************************************
         ST    R2,OSPARS1      FIRST PARM -> ADDRESS OF STRING TO PARSE
*
         MVC   OSPARS2(4),=F'150' SECOND PARM -> LENGTH OF STRING
*
         MVI   OSPARARR,X'40'
         MVC   OSPARARR+1(255),OSPARARR   BLANK OUT THE RETURNED ARRAY
         MVC   OSPARARR+255(64),OSPARARR  FINISH THE JOB
         MVC   OSPARARR(2),=H'20'         MAX 20 TOKENS...
         LA    R4,OSPARARR                GET ADDRESS
         ST    R4,OSPARS3                 AND PASS TO TSSOPARS
*
         LA    R4,WORDSEPS                TELL TSSOPARS ABOUT THE
         ST    R4,OSPARS4             SEPARATOR CHARACTERS.
         MVC   WORDSEPS(4),=CL4' ,= '
*
         LA    R1,OSPARSPM
         CALL  TSSOPARS              ** PARSE IT **
         LH    R8,OSPARARR
         ST    R8,WORDLINE
***********************************************************************
* PARSE HAS RETURNED.. LETS ANALYZE THE RESULTS...                    *
* FIRST, GET NUMBER OF WORDS RETURNED ON THIS LINE...                 *
***********************************************************************
         LA    R4,CLVARNME           GET VARIABLE NAME
         ST    R4,NAMEPTR
         A     R4,NAMELEN            GET LENGTH OF VARIABLE SO FAR...
         MVI   0(R4),C'W'            MOVE IN A "W"
*
*
         L     R4,NAMELEN
         LA    R4,1(R4)
         ST    R4,NAMELEN
*
         LA    R4,EBCCOUNT
         ST    R4,VALUEPTR
         L     R1,WORDLINE           GET NUMBER OF WORDS RETURNED
         XR    R0,R0
         LA    R10,OSWKAREA
         CALL  JCECVTBD
         STCM  R1,B'1111',EBCCOUNT
*
         LA    R4,4
         ST    R4,VALUELEN
*
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELEN,            PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
         LTR   R15,R15
         BNZ   ERROR5
*
***********************************************************************
* THE NEXT STEP IS TO CREATE THE WTOWN     VARIABLES, WHERE "N" IS    *
* THE CURRENT WORD THAT WE ARE WORKING ON...                          *
* THE STRING IS PARSED, WE JUST NEED TO LOOP AROUND, PLACING IT IN    *
* CLIST VARIABLES.                                                    *
***********************************************************************
*
*
         LA    R4,1
         ST    R4,CURRWNUM               INITIALIZE CURRENT WORD
         LA    R4,OSPARARR+2
         ST    R4,CURRWPOS               INITIALIZE CURRENT POSITION IN
*                                        THE PARSE ARRAY
*
WORDLOOP DS    0H
         L     R4,NAMELEN               LOAD LENGTH OF VAR NAME SO FAR
         ST    R4,NAMELENW              AND KEEP A COPY
         L     R4,CURRWNUM               WHICH WORD ARE WE STARTING ON?
         C     R4,WORDLINE               IS IT PASSED THE LAST WORD ?
         BH    ENDWORDS                  YUP, NO MORE WORDS TO WORK ON
*
         LA    R4,CLVARNME               GET THE VARIABLE NAME
         ST    R4,NAMEPTR                TELL CLIST ROUTINE
*
         L     R4,CURRWNUM               GET BACK CURRENT WORD NUM
         LR    R1,R4
         XR    R0,R0
         LA    R10,OSWKAREA
         CALL  JCECVTBD
         CH    R4,=H'10'
         BL    WOR1BYTE
WOR2BYTE DS    0H
         LA    R3,CLVARNME
         A     R3,NAMELENW               START OF VARIABLE PLUS
*                                        LENGTH = A(END OF VARIABLE)
         STCM  R1,B'0011',0(R3)          PLACE EBCIDIC FOR WORD NUMBER
         L     R3,NAMELENW               GET LENGTH OF NAME (INCLUDING
*                                        THE LEADING "W")
         LA    R3,2(R3)                  INCREMENT BY TWO BYTES
         ST    R3,NAMELENW               RESTORE LENGTH OF NAME
         B     GOTNAME2
WOR1BYTE DS    0H
         LA    R3,CLVARNME
         A     R3,NAMELENW               START OF VARIABLE PLUS
*                                        LENGTH = A(END OF VARIABLE)
         STCM  R1,B'0001',0(R3)          PLACE EBCIDIC FOR WORD NUMBER
         L     R3,NAMELENW               GET LENGTH OF NAME (INCLUDING
*                                        THE LEADING "W")
         LA    R3,1(R3)                  INCREMENT BY TWO BYTES
         ST    R3,NAMELENW               RESTORE LENGTH OF NAME
         B     GOTNAME2
GOTNAME2 DS    0H
***********************************************************************
* CALCULATE THE LENGTH OF THE RETURNED WORD.                          *
*                                                                     *
***********************************************************************
         L     R4,CURRWPOS
         LA    R5,16          MAXIMUM LENGTH FOR WORD IS 16..
         XR    R6,R6
WLENLOOP DS    0H
         CLI   0(R4),C' '    BLANK FOUND ?
         BE    WLENELOP      YUP.. WE HAVE THE LENGTH IN R6
         LA    R6,1(R6)
         LA    R4,1(R4)
         BCT   R5,WLENLOOP
WLENELOP DS    0H
         ST    R6,VALUELEN
*
         L     R4,CURRWPOS
         ST    R4,VALUEPTR
*
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELENW,           PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
*
         LTR   R15,R15
         BNZ   ERROR5
*
         L     R4,CURRWPOS
         LA    R4,16(R4)
         ST    R4,CURRWPOS
*
         L     R4,CURRWNUM
         LA    R4,1(R4)
         ST    R4,CURRWNUM
         B     WORDLOOP
*
ENDWORDS DS    0H
         XC    RETCODE(2),RETCODE
         B     ENDPROG
ERROR1   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR1HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
ERROR2   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR2HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
ERROR3   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR3HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
ERROR4   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR4HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
ERROR5   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR5HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
ERROR6   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR6HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR7   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR7HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR8   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR8HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR9   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERROR9HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERRORA   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERRORAHD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERRORB   DS    0H
         CH    R15,=H'40'             CLIST ENVIRONMENT NOT ACTIVE ?
         BE    NOCLIST                YUP...
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERRORBHD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERRORC   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(ERRORCHD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         MVC   RETCODE(2),=H'8'
         B     ENDPROG
*
NOCLIST  DS    0H
         MVC   MESSAGED+4(150),BUFFER
         PUTLINE PARM=PUTBLOK,OUTPUT=(MESSAGED,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
*
         B     ENDPROG
ENDPROG  DS    0H
         LH    R8,RETCODE
         FREEMAIN R,LV=4096,A=(R11)   FREEMAIN THE PRIVATE STORAGE
         LR    R1,R13              GET ADDRESS OF CORE IN R1
         L     R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
         B     ENDPROG1
ENDPROG1 DS    0H
         L     R14,12(R13)         RELOAD RETURN POINT
         LR    R15,R8              PICK UP RETURN CODE.
         LM    R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR    R14
*
STIMEREX DS    0H
***********************************************************************
* THIS IS THE STIMER EXIT ROUTINE. IT IS BRANCHED TO BY THE STIMER    *
* PREPROCESSING ROUTINE THAT IS SET UP TO PASS PARAMETERS. THE        *
* REGISTERS ON ENTRY TO THIS ROUTINE ARE:                             *
*                                                                     *
* R1: ADDRESS OF THE OSASK DSECT.   R15: ADDRESS OF STIMEREX          *
* R13: SAVEAREA                                                       *
* R14: PLACE TO RETURN TO.                                            *
*
* SINCE THIS CODE MUST RESTORE ALL REGISTERS TO THE OPERATING SYSTEM,
* IT WILL LOCATE THE "REAL" REGS 1 AND 15 THROUGH THE
***********************************************************************
         PUSH  USING
         STM   R14,R12,12(R13)     SAVE OS REGS FOR STIMER
         LR    R12,R15             GET GOOD BASE
         USING STIMEREX,R12        TELL GOOD ASSEMBLER
         LR    R11,R1              GET ADDRESS OF OSASK DSECT AREA
         USING OSWTDATD,R11        TELL MEDIOCRE ASSEMBLER
***********************************************************************
* THE WHOLE IDEA OF THIS CODE IS TO POST THE ECB ASSOCIATED WITH THE  *
* STIMER. THE ECB IS NOW CONVIENTLY ADDRESSABLE.                      *
***********************************************************************
         LA    R2,STIMRECB         GET ADDRESS OF STIMER ECB
         POST  (R2),0              POST ECB WITH COMP CODE ZERO
***********************************************************************
* NOW WE WILL TERMINATE STIMER EXIT PROCESSING BY RESTORING REGISTERS *
* INCLUDING R1 AND R15 PREVIOUSLY DESTROYED. NOTE THAT THESE WERE     *
* SAVED IN THE DSECT AREA, WHICH WE STILL HAVE ADDRESSABILITY TO.     *
***********************************************************************
         L     R15,R15SAVED        RESTORE R15
         L     R1,R1SAVED          RESTORE R1
         L     R14,12(R13)         RESTORE RETURN ADDRESS
         LM    R2,R12,28(R13)      RESTORE EVERYTHING ELSE.
         BR    R14
         DROP  R11
         DROP  R12
         POP   USING
***********************************************************************
* ALTHOUGH THIS LOOKS LIKE REAL CODE, IT'S ACTUALLY A MECHANISM USED  *
* TO PASS A PARAMETER TO A STIMER EXIT ROUTINE. WE WILL PREPORCESS THE*
* ROUTINE WITH THIS ONE, WHICH IS COPIED TO THE DSECT AREA.           *
***********************************************************************
STIMRPRE DS    0D
         USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,20(R15)  +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,24(R15)   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVE  DS    A            +20: ROOM FOR R15
R1SAVE   DS    A            +24: ROOM FOR R1
STMRADDR DC    A(STIMEREX)  +28: ADDRESS OF REAL STIMER EXIT ROUTINE
PARMADDR DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMRPEN DS    0H
*
OSCALL1C CALL  ,(0,0,0,0,0,0),MF=L
OSCALL1E EQU  *
*
*
ERROR1HC DC    H'80',H'0'
         DC    CL80'TSSO IS NOT INSTALLED, OR NOT ACTIVE - REQUEST ABORX
               TED'
*
ERROR2HC DC    H'80',H'0'
         DC    CL80'THE TSSO AOF FACILITY IS NOT ACTIVE  - REQUEST ABORX
               TED'
*
ERROR3HC DC    H'80',H'0'
         DC    CL80'THE SPECIFIED ENTRY IS ALREADY AWAITING POST FROM AX
               NOTHER ADDRESS SPACE'
*
*
ERROR4HC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT WAS NOT INVOKED AUTHORIZED'
*
*
ERROR5HC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - THE CLIST VARIABLE ACCESS ROUTX
               INE FAILED'
*
ERROR6HC DC    H'80',H'0'
         DC    CL80'ENTRY ID XXXXXXXX IS NOT IN THE CURRENT AOF TABLE -X
               WITH ACTION="POST"'
*
ERROR7HC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - TIMEOUT VALUE NOT > 1 AND <  1X
               0000 (OR MISSING)'
*
ERROR8HC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - THE ENTRY ID TO BE WAITED ON IX
               S MISSING'
*
ERROR9HC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT WAS NOT INVOKED FROM A CLISX
               T'
*
ERRORAHC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT REQUIRES TSO/E RELEASE 2 ORX
                HIGHER'
*
ERRORBHC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - AN ERROR OCCURRED IN THE CLISTX
               VARIABLE ACCESS ROUTINE'
*
ERRORCHC DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - TSSO WAS TERMINATED, OR A NEW X
               AOF TABLE WAS LOADED'
*
MESSAGEC DC    H'150',H'0',CL150' '
*
ESTAEC   ESTAE 0,MF=L
ESTAECE  EQU   *
*
OSWPARSE IKJPARM
ENTRY    IKJKEYWD
         IKJNAME 'ENTRY',SUBFLD=ENTSUB
TIMEOUT  IKJKEYWD
         IKJNAME 'TIMEOUT',SUBFLD=TIMEOSUB
ENTSUB   IKJSUBF
ENTSUBID IKJIDENT 'ENT',PROMPT='ENTRY IDENTIFIER',FIRST=ALPHANUM,      X
               OTHER=ALPHANUM,                                         X
               HELP=('TSSO AOF TABLE ENTRY ID')
*
TIMEOSUB IKJSUBF
TMESUBID IKJIDENT 'TIMEOUT',PROMPT='TIMEOUT VALUE',INTEG,              X
               HELP=('TIMEOUT VALUE FOR OSWAIT COMMAND','NUMBER OF SECOX
               NDS TO WAIT FOR MESSAGE BEFORE TIMING OUT')
*
         IKJENDP
OSWTDATD DSECT
OSWKAREA DS    CL200            USED BY PARSE ROUTINE
*
STIMERD  DS    0D
         USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,R15SAVED +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,R1SAVED   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVED DS    A            +20: ROOM FOR R15
R1SAVED  DS    A            +24: ROOM FOR R1
STIMREAL DS    A            +28: ADDRESS OF REAL STIMER EXIT ROUTINE
STIMPARM DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMERDE DS    0H
*
*
ENTSPEC  DS    CL8              ENTRY ID SPECIFIED BY USER
TIMEOVAL DS    F                TIMEOUT VALUE, IN SECONDS.
LENTID   DS    F                LENGTH OF THE SPECIFIED ENTRY ID
RETCODE  DS    H
LISTECBS DS    0F
         DC    A(0)            ONE FOR THE OSWTECB
         DC    X'80'
         DC    A(0)
*
OSWTECB  DS    F                ECB FOR THE OSWAIT COMMAND
STIMRECB DS    F                ECB FOR THE STIMER.
BUFFER   DS    CL150            THE WTO CAUSING THE POST TO OCCUR.
FLAGS    DC    H'0'
* FIRST BYTE:
* X'80' - A ENTRY ID WAS SPECIFIED
* X'40' - A TIMEOUT VALUE WAS SPECIFIED.
BLANKH   DC    H'80',H'0'
BLANK    DC    CL80' '
ERROR1HD DC    H'80',H'0'
         DC    CL80'TSSO IS NOT INSTALLED, OR NOT ACTIVE - REQUEST ABORX
               TED'
*
*
ERROR2HD DC    H'80',H'0'
         DC    CL80'THE TSSO AOF FACILITY IS NOT ACTIVE  - REQUEST ABORX
               TED'
*
ERROR3HD DC    H'80',H'0'
         DC    CL80'THE SPECIFIED ENTRY IS ALREADY AWAITING POST FROM AX
               NOTHER ADDRESS SPACE'
*
ERROR4HD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT WAS NOT INVOKED AUTHORIZED'
*
ERROR5HD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - THE CLIST VARIABLE ACCESS ROUTX
               INE FAILED'
*
ERROR6HD DC    H'80',H'0'
         DC    CL80'ENTRY ID XXXXXXXX IS NOT IN THE CURRENT AOF TABLE -X
               WITH ACTION="POST"'
*
ERROR7HD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - TIMEOUT VALUE NOT > 1 AND <  1X
               0000 (OR MISSING)'
*
ERROR8HD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - THE ENTRY ID TO BE WAITED ON IX
               S MISSING'
*
ERROR9HD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT WAS NOT INVOKED FROM A CLISX
               T'
*
ERRORAHD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - IT REQUIRES TSO/E RELEASE 2 ORX
                HIGHER'
*
ERRORBHD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - AN ERROR OCCURRED IN THE CLISTX
               VARIABLE ACCESS ROUTINE'
*
ERRORCHD DC    H'80',H'0'
         DC    CL80'OSWAIT TERMINATING - TSSO WAS TERMINATED, OR A NEW X
               AOF TABLE WAS LOADED'
*
MESSAGED DC    H'150',H'0',CL150' '
*
OSCALL1D CALL  ,(0,0,0,0,0,0),MF=L
OPESTAED ESTAE 0,MF=L
***********************************************************************
* THE VARIABLES ARE NEEDED FOR THE CLIST VARIABLE ACCESS ROUTINE      *
* IKJCT441.                                                           *
***********************************************************************
VACCRTN  DS    A                ADDRESS OF CLIST VARIABLE ACCESS RTN.
VALPTR   DS    A                FOR CLIST VARIABLE ACCESS ROUTINE.
VALLENGT DS    F                FOR CLIST VARIABLE ACCESS ROUTINE.
TOKEN    DS    F                FOR CLIST VARIABLE ACCESS ROUTINE.
ECODE    DS    F
*
NAMEPTR  DS    F                FOR UPDATE ROUTINE
NAMELEN  DS    F                FOR UPDATE ROUTINE
VALUEPTR DS    F                FOR UPDATE ROUTINE
VALUELEN DS    F                FOR UPDATE ROUTINE
NAMELENW DS    F                FOR UPDATE ROUTINE FROM "CMDOUTNWM"
CLVARNME DS    CL12
EBCCOUNT DS    CL4
CONSOLE  DS    F
***********************************************************************
* THESE VARIABLES ARE USED TO KEEP TRACK OF WHICH LINES AND WORDS WE  *
* ARE USING WHEN STUFFING RESULTS IN CLIST VARIABLES.                 *
***********************************************************************
CURRWNUM DS    F                CURRENT WORD NUMBER IN THE CURRENT LINE
CURRWPOS DS    F                POINTER TO 16 BYTE WORD RETURNED IN
*                               TSSOPARS
WORDLINE DS    F                NUMBER OF WORDS IN CURRENT LINE
NUMLINES DS    F                NUMBER OF LINES RETURNED FROM COMMAND
***********************************************************************
* THESE VARIABLES ARE USED IN CALLING THE NOW FAMOUS TSSO PARSE       *
* ROUTINE.                                                            *
***********************************************************************
OSPARSPM DS    0H
OSPARS1  DS    F
OSPARS2  DS    F
OSPARS3  DS    F
OSPARS4  DS    F
WORDSEPS DS    CL4           PROBABLY CL4' ,= '
OSPARARR DS    20CL16
*
MYECB    DC    F'0'
MYANS    DC    F'0'
PPL      DS    0D                       START OF PARM CONTROL LIST
PPLUPT   DS    A
PPLECT   DS    A
PPLECB   DS    A
PPLPCL   DS    A
PPLANS   DS    A
PPLCBUF  DS    A
PPLUWA   DS    A
*
CPPLCBUF DS    A
CPPLUPT  DS    A
CPPLPSCB DS    A
CPPLECT  DS    A
IOPLADS  DS    4F               SPACE FOR IO PARM LIST
ECBADS   DC    F'0'             ECB FOR PUTLINE, GETLINE
PUTBLOK  PUTLINE MF=L           DEFAULT PUTLINE MACRO, LIST FORM
********************************************************************
* THIS IS THE DESCRIPTION OF THE COMMAND SYNTAX, AS PARSE WANTS IT *
********************************************************************
         IKJIOPL
         IEFJESCT
         IEFJSCVT
         IEFJSSVT
         IKJTSVT
         CVT   DSECT=YES
         TSSOCVT
         TAOFNTRY
         END   OSWAIT
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY OSWAIT(''TSSO V 4.3 &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' INCLUDE  SYSLMOD(TSSOPARS)'
 PUNCH ' INCLUDE  SYSLMOD(OSWAITRC)'
 PUNCH ' ENTRY    OSWAIT'
 PUNCH ' NAME     OSWAIT(R)'
         END
