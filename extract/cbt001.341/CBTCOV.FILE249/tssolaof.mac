        TITLE  'T S S O   L O A D   A O F   T A B L E'
***********************************************************************
* THIS MODULE WILL LOAD, VALIDATE, AND BUILD THE BINARY SEARCH        *
* INDEX FOR AN AOF TABLE.                                             *
* PARAMETERS:                                                         *
* ON ENTRY, R1 POINTS TO THE TSSO DATA AREA (DATD).                   *
* THE NAME OF THE TABLE TO BE LOADED IS IN TSSOTABN.                  *
* THIS TABLE IS LOADED, VERIFIED, AND THE INDEX IS BUILT.             *
* IF EVERYTHING IS OK, THE POINTERS IN THE TSSOCVT ARE REPLACED.      *
* NOTE: LAST MESSAGE NUMBER WAS TSSC142X                              *
*                                                                     *
* CREATED: 10/30/92                                                   *
* AUTHOR:  GUY ALBERTELLI                                             *
*                                                                     *
***********************************************************************
*                                                                     *
* MODIFIED                                                            *
*                                                                     *
***********************************************************************
* RETURN CODES:                                                       *
*   NONE                                                              *
*                                                                     *
***********************************************************************
TSSOLAOF CSECT
         EQUATES
         STM   R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR    R12,R15            LOAD ENTRY POINT OF TSSO
         USING TSSOLAOF,R12       GET ADDRESSIBILITY
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         LR    R9,R1
         USING DATD,R9
         L     R10,TSSOCVTA             GET ADDRESS OF CVT
         USING TSSOCVT,R10              SETUP ADDRESSABILITY
         MODESET KEY=NZERO              GET TO TCB STATE
         GETMAIN R,LV=72           WE NEED STORAGE FOR THE SAVE AREA
         ST    R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST    R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR    R13,R1             KEEP A COPY IN R13
*
         GETMAIN R,LV=1024         GET STORAGE FOR A LOCAL
         LR    R11,R1             DATA AREA
         USING LAOFDATD,R11       AND TELL ASSEMBLER
         MVC   LOAD1D(LOAD1CE-LOAD1C),LOAD1C  INITIALIZE LIST
************************************************************
*                                                          *
*        LOAD THE AUTOMATED OPERATOR FACILITY TABLE        *
*                                                          *
************************************************************
GETTABLE DS    0H
         LA    R2,TSSOTABN
         CLC   0(8,R2),=CL8'NONE'
         BE    AOFDEACT
         LOAD  EPLOC=(R2),GLOBAL=(YES,P),LSEARCH=YES,ERRET=NOLOAD,     X
               SF=(E,LOAD1D)
*#*      LOAD  EPLOC=(R2),ERRET=NOLOAD,                                X
               SF=(E,LOAD1D)
         LR    R6,R0                         REMEMBER LOAD ADDRESS
         MODESET KEY=ZERO                    MOST THINGS NEED 0
         CLC   4(8,R6),=CL8'TSSOTABL'        MAKE SURE WE REALLY
*                                            HAVE A TSSO TABLE
         BNE   TABNGOOD                      DARN
         CLC   44(8,R6),=CL8'TSSO 4.3'       CHECK VERSION NUMBER
         BNE   TABNGOO2                      INCORRECT VERSION
         ST    R6,TSSOTABL
         L     R0,CURRCONS              DIRECT TO CORRECT CONSOLE
         MVC   WTO19D+38(8),TSSOTABN
         WTO   MF=(E,WTO19D)           (MSG 55)
         B     ENDSTP16
TABNGOOD DS    0H                      ** NOT A TSSO TABLE **
         MVC   WTO21D+20(8),TSSOTABN
         WTO   MF=(E,WTO21D)           (MSG 56)
         B     BADE16                  GO TO BAD END OF STEP 16
TABNGOO2 DS    0H                      ** TABLE AT INCORRECT VERSION **
         MVC   WTO32D+19(8),TSSOTABN
         WTO   MF=(E,WTO32D)           (MSG 57)
         B     BADE16                  GO TO BAD END OF STEP 16
NOLOAD   DS    0H
         MVC   WTO20D+20(8),TSSOTABN
         WTO   MF=(E,WTO20D)           (MSG 58)
         MODESET KEY=ZERO                    MOST THINGS NEED 0
         B     BADE16A                 GO TO BAD END OF STEP 16 W/O DEL
BADE16   DS    0H
         LA    R3,TSSOTABN
         DELETE EPLOC=(R3)
BADE16A  DS    0H
         XR    R3,R3
         ST    R3,TSSOTABL
         MVC   TSSOTABN,=CL8'NONE'     INDICATE NO TABLE
         B     ENDPROG
AOFDEACT DS    0H
         WTO   'TSSI059E TSSO AUTOMATED OPERATIONS FACILITY IS DEACTIVAX
               TED BY PARMLIB INPUT'
         B     ENDPROG
ENDSTP16 DS    0H
***********************************************************************
*  TABLE IS NOW LOADED AND VALIDATED, GO AND BUILD THE INDEX.         *
***********************************************************************
         L     R3,TSSOTABL              GET POINTER TO ACTUAL TABLE
         L     R2,52(,R3)               POINT AT ENTRY COUNT
         L     R2,0(,R2)                GET COUNT OF ENTRIES
         LA    R2,1(,R2)                PLUS 1
         SLL   R2,4                     ASSUME WORST,
*                                       ALL ENTRIES DIFFERENT
         LA    R2,4(,R2)                PLUS HEADER
         GETMAIN R,LV=(2),SP=228        GET INDEX SPACE
*#*      GETMAIN R,LV=(2)               GET INDEX SPACE
         ST    R2,0(,R1)                SET LENGTH
         MVI   0(R1),228                SET SUBPOOL
         ST    R1,TSSOBSTH              SAVE ADDRESS OF INDEX BLOCK
         AR    R1,R2                    POINT TO REAL END
         SH    R1,=H'16'                LESS AN ENTRY SIZE
         MVC   4(8,R1),=CL8'ZZZZZZZZ'   PUT IN DUMMY ENTRY
         XC    0(4,R1),0(R1)            CLEAR POINTER
         ST    R1,TSSOBSTS              SAVE POINTER TO START
         ST    R1,TSSOBSTE              SAVE POINTER TO CURRENT LAST
         MVI   TSSOBSTL+3,16            SET LENGTH
         L     R3,0(,R3)                GET ADDRESS OF FIRST ENTRY
         USING AOFNTRY,R3               SETUP ADDRESSABILITY
LPAOFN   DS    0H
         LTR   R3,R3                    ANY ENTRY
         BZ    ENDPROG                  ALL DONE, SO EXIT
         CLC   AOFMSGID,=CL8'*'         IS IT MATCH ALL
         BNE   DORMSG                   NO, DO REAL MESSAGE
         LA    R7,TSSOALMS              POINT TO HEAD OF ALL MSG
         B     CHAINNEW                 CHAIN IT ON
DORMSG   DS    0H                       DO REAL MESSAGE
         LM    R4,R6,TSSOBSTS           LOAD PARMS
         LA    R2,LAOFCLC
         BAL   R14,BSCAN                GO AND FINE
         B     ADD                      +0 NOT IN TABLE, ADD IT
         B     CHAINNEW                 +4 IN TABLE, CHAIN IT
LAOFCLC  CLC   AOFMSGID(8),4(R7)        COMPARE TO TABLE
*
**       CHAIN NEW AOF ENTRY TO PREVIOUS ENTRIES OR HEAD
*
CHAINNEW ICM   R4,15,0(R7)              GET POINTER TO FIRST
         BNZ   CHNLP                    IF ONE EXISTS THEN HANDLE
         ST    R3,0(,R7)                SET FIRST ENTRY
         B     CHNELP                   NOW CLEAR NEW TAIL
CHNLP    LR    R7,R4
         ICM   R4,15,AOFBNXT-AOFNTRY(R7) ANY MORE
         BNZ   CHNLP
         ST    R3,AOFBNXT-AOFNTRY(,R7)  CHAIN NEW ON
CHNELP   XC    AOFBNXT,AOFBNXT          CLEAR NEW TAIL
         L     R3,AOFNXT                POINT TO NEXT
         B     LPAOFN                   GO DO NEXT
*
**       ADD IN NEW ENTRY TO INDEX
*
*                       NOTE
*                            - R7 POINTS TO ENTRY
*                              THAT THE NEW ONE SHOULD FOLLOW
*                            - TSSOBSTS AND TSSOBSTE POINT TO
*                              AND END OF CURRENT TABLE. TSSOBSTS
*                              WILL BE MODIFIED BY THIS ROUTINE
ADD      DS    0H                       ADD IN NEW ENTRY
         LM    R4,R6,TSSOBSTS           GET START AND END PTRS
*
**       COMPUTE LENGTH TO MOVE
*
         LR    R1,R7
         SR    R1,R4                    GET LENGTH TO MOVE
         BNM   ADDNTY                   GO AND DO MOVE
*
**       ADD TO FRONT OF TABLE
*
         SR    R4,R6                    GET NEW LOW VALUE
         ST    R4,TSSOBSTS              SAVE NEW START
         MVC   4(8,R4),AOFMSGID         SET NEW MESSAGE ID
         XC    0(4,R4),0(R4)            CLEAR CHAIN
         LR    R7,R4                    POINT TO ENTRY TO ADD
         B     CHAINNEW                 PUT ON CHAIN
*
**       ADD SOMEWHERE IN TABLE (EVEN END)
*
ADDNTY   DS    0H
         AR    R1,R6                    ADD IN AN ENTRY
         LR    R0,R4                    GET OLD START
         SR    R0,R6                    MAKE IT NEW START
         ST    R0,TSSOBSTS
         LR    R5,R1                    SET OLD LENGTH
         MVCL  R0,R4                    MOVE FRONT OF TABLE UP
*                                       R7 WILL POINT TO OPEN ENTRY
         MVC   4(8,R7),AOFMSGID         SET NEW MESSAGE ID
         XC    0(4,R7),0(R7)            CLEAR CHAIN
         B     CHAINNEW
***********************************************************************
*  ALL DONE!!!!! NOW FREE UP STORAGE AND EXIT                         *
***********************************************************************
ENDPROG  DS   0H
         MODESET KEY=NZERO                   AND OUT AGAIN.
         FREEMAIN R,LV=1024,A=(11)  FREE LOCAL STORAGE
         LR     R1,R13              GET ADDRESS OF CORE IN R1
         L      R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
ENDPROG1 DS     0H
         L      R14,12(R13)         RELOAD RETURN POINT
         XR     R15,R15
         LM     R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR     R14
         COPY  BSCAN
         EJECT
***********************************************************************
* CONSTANTS FOR TSSOLAOF VARIABLES ONLY                               *
*                                                                     *
***********************************************************************
LOAD1C   LOAD  EPLOC=0,GLOBAL=(YES,P),LSEARCH=YES,ERRET=SSILOADB,      X
               SF=L
*#*D1C   LOAD  EPLOC=0,ERRET=SSILOADB,                                 X
               SF=L
LOAD1CE  DS    0H
         LTORG ,
         EJECT
LAOFDATD DSECT
***********************************************************************
* DATA AREA FOR TSSOLAOF VARIABLES ONLY                               *
*                                                                     *
***********************************************************************
LOAD1D   LOAD  EPLOC=0,GLOBAL=(YES,P),LSEARCH=YES,ERRET=SSILOADB,      X
               SF=L
*#*D1D   LOAD  EPLOC=0,ERRET=SSILOADB,                                 X
               SF=L
         COPY  TSSODATD
         TSSOCVT
         TAOFNTRY
         CVT   DSECT=YES
         IEFJESCT
         IEFJSCVT
         IEFJSSVT
         IEFJSSIB
         IEFJSSOB (CM,RR),CONTIG=YES
         IEZJSCB
UCM      DSECT
         IEECUCM
         END   TSSOLAOF
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY TSSOLAOF(''TSSO V 4.3.0  &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' INCLUDE  SYSLMOD(TSSOPARS)'
 PUNCH ' ENTRY    TSSOLAOF'
 PUNCH ' NAME     TSSOLAOF(R)'
         END
