TSSOSS09 TITLE 'TSSO - ROUTINE TO PROCESS SUB SYSTEM FUNCTION 09'
TSSOSS09 CSECT
************************************************************
*
*        PDSDOC *SPRECHER ENERGIE VERSION OF TSSOSS09 WITH ML WTO FIXED
*
* THIS IS THE ENTRY POINT FOR THE TSSO AUTOMATED OPERATIONS FACILITY
* WTO AND WTOR INTERCEPT ROUTINE. THE SUBSYSTEM INTERFACE CODE 9
* PROVIDES THE FACILITY FOR SUBSYSTEMS TO INTERCEPT ALL WTO AND WTOR
* REQUESTS, AND TAKE ACTION. THE SPECIFIC ACTIONS THAT TSSO/AOF WILL
* TAKE IS DETERMINED BY A TABLE, LOADED AT SUBSYSTEM (TSSO)
* INITIALIZATION TIME.
*
* THE FORMAT OF THE TABLE IS COMPLEX, AND BEST DOCUMENTED IN THE
* DISPAOF TSSO COMMAND, INCLUDED WITH TSSO.
*
* SPECIFIC ACTIONS ARE:
* OSCMD - ISSUE AN OPERATING SYSTEM, JES OR TSSO COMMAND IS RESPONSE
*         TO THE MESSAGE
*
* OSCMDT - SIMULATE THE ISSUANCE OF THE COMMAND, BY WTO INSTEAD
*          OF WTOR THE MESSAGE.
*
* HILITE - HILIGHT THE MESSAGE BY TURNING ON THE WQEDCMA BIT.
*
* SUPPRESS- SUPPRESS THE MESSAGE.
*
*    TSSO (VERSION 4.1) PROVIDES THE FACILITY FOR TESTING CERTAIN
* (ACTUALLY, ANY) FIELD IN THE MESSAGE BY WORD OR SUBSTRING CONTENT
* BEFORE ACTUALLY DECIDING TO PERFORM THE ACTION SPECIFIED.
*
*    TSSO (VERSION 4.1) WILL SCAN THE *ENTIRE* TABLE FOR THE
* MESSAGE IDENTIFIER, EVEN WHEN ENCOUNTERED, THUS MULTIPLE ACTIONS
* MAY BE SPECIFIED FOR THE SAME MESSAGE, UNDER DIFFERENT TEST
* CONDITIONS. THE USER IS URGED TO READ NOT ONLY THE TSSO SOURCE CODE,
* BUT THE TSSO SYSTEMS PROGRAMMING REFERENCE GUIDE, FOR DETAILS
* ON TSSO/AOF USAGE.
*
***********************************************************************
* TSSO VERSION 4.2 PROVIDES THE UNPARALLED ABILITY TO ISSUE MVS       *
* OPERATOR COMMANDS FROM A TSSO CLIST, AND GET THE RESPONSE BACK TO   *
* THE CLIST. THIS IS ACCOMPLISHED THROUGH COMMUNICATION BETWEEN THE   *
* OSCMD COMMAND, AND THIS MODULE. THIS MODULE WILL CHECK IF MESSAGES  *
* ARE TO BE INTERCEPTED. IF YES, IT WILL INTERCEPT ALL MESSAGES       *
* DESTINED TO THE CONSOLE OBTAINED BY TSSO AS A SUBSYSTEM CONSOLE, AND*
* STORE THEM IN A GLOBAL BUFFER PROVIDED BY THE OSCMD COMMAND.        *
*                                                                     *
***********************************************************************
*                                                                     *
* TSSO VERSION 4.3 ADDS THE FOLLOWING FUNCTION TO THIS MODULE:        *
*                                                                     *
* 1) SUPPORT FOR MULTIPLE SUBSYSTEM CONSOLES.                         *
*                                                                     *
* 2) SUPPORT FOR ACTION=POST IN THE AOF TABLES.                       *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
* NOTE: LAST MSGID IS 209.                                            *
*                                        MARC.
***********************************************************************
*                                                                     *
* 12JUL92 CART1 MAKE SOME CHANGES FOR MLWTO                           *
* 19AUG92 CART1 ON TEST BLEW UP IEFJRASP LEADING TO IPL. ALTER MATCH  *
*               FAIL CODE TO EXIT IMMEDIATELY.                   *SEAG*
* 24AUG92 CART1 RECODE 'SEDOLINE' TO AVOID THE 0C4'S. THIS ALLOWS US  *
*               TO USE IT IN PARSING THE TESTS TO RESTRICT PROCESSING *
*               TO ONE MINOR WQE. ALSO REDUCE OVERHEAD BY TESTING FOR *
*               TABLE ENTRY NAME AND STOP IF ENTRY MATCHED WITH NO    *
*               ENTRY NAME (DEFAULT ENTR..).                          *
* 26AUG92 CART1 RECODE 'SEDOLINE' FOR USE IN TESTS ONLY, NOT TEXT.    *
*               THE REASON IS THAT THE COMMS TASK ONLY GIVES US A CSA *
*               COPY OF THE WQE WHICH IS IN THE COMMS TASK ADDRESS    *
*               SPACE. THUS WE CANNOT RUN THE LIST OF WQE'S. BY USING *
*               DATA IN THE TEST CONTROL BLOCK WE CAN COUNT THE NUMBER*
*               OF TIMES WE ARE CALLED FOR THIS MAJOR WQE.            *
* 09SEP92 CART1 ADD 'ACTION=NONE' TO PROVIDE A 'STOP' FACILITY TO     *
*               REDUCE RUNNING COSTS.                                 *
*                                                                     *
* 15OCT92  GLA  INCORPORATE NECESSARY FIXES FROM 4.2                  *
*                 A. FIX BUG IN LOWLIGHT ROUTINE. CAUSES EVENTUAL ACT *
*                    MESSAGES NOT TO BE LOWLIGHTED.                   *
*                 B. FIX BUG IN AOF TABLE PROCESSING FOR MESSAGE.     *
*                    ORIGINAL CODE WAS NOT CLEARING THE OUTPUT TOKEN  *
*                    TABLE FULLY. ANY ATTEMPT TO ACCESS WORDS 17      *
*                    TO 20 IN A MESSAGE WOULD RESULT IN GARBAGE.      *
*                                                                     *
* 20OCT92  GLA  INSTALL NEW DSECT FOR AOF TABLES                      *
*                                                                     *
* 30OCT92  GLA -USE BINARY SEARCH TABLE INDEX TO AOF TABLE.           *
*              -GO BACK TO ORIGINAL PROCESSING OF ALL ENTRIES THAT    *
*               MATCH ID, WITH ONE EXCEPTION, PROCESS ALL MSG=*       *
*               ENTRIES AFTER ALL MSG=ID THAT MATCH.                  *
*                                                                     *
* 14SEP92 CART1 ADD CODE TO TEST FOR MPF MESSAGE SUPPRESSION. IF YOU  *
*               MPF SUPPRESS A MESSAGE THAT IS ITS SINGLE POINT OF    *
*               CONTROL.                                              *
*                                                                     *
* 14DEC92  GLA  ADD NEW PARAMETER TO TURN ABOVE FEATURE ON OR OFF.    *
*                                                                     *
***********************************************************************
*
* REGISTER USAGE:
*   R11: POINTS TO THE GETMAINED STORAGE AREA FOR THE LIFE OF THE
*        ROUTINE
*   R9 : POINTS TO THE SSOB EXTENTION FOR THE LIFE OF THE ROUTINE
*   R8 : POINTS TO THE TSSO CVT FOR THE LIFE OF THE ROUTINE.
*   R7 : POINTS TO THE TSSO AOF TABLE, FOR THE LIFE OF THE ROUTINE.
*   R6 : POINTS TO THE CURRENT TEST ENTRY FOR THE LIFE OF THE ROUTINE.
************************************************************
         STM    R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR     R12,R15            LOAD ENTRY POINT OF TSSO
         USING  TSSOSS09,R12         GET ADDRESSIBILITY
         B      AR1
         DC     CL8'&SYSDATE'      GET THE DATE
         DC     CL8'&SYSTIME'      GET THE TIME
AR1      DS     0H
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         LR     R8,R1
         GETMAIN RC,LV=72           WE NEED STORAGE FOR THE SAVE AREA
         LTR    R15,R15
         BNZ    FUNC9EX3           STORAGE AVAILABLE.
         ST     R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST     R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR     R13,R1             KEEP A COPY IN R13
*
*
         GETMAIN RC,LV=4096         GET SOME STORAGE...
         LTR    R15,R15
         BNZ    GETMERR
         LR     R11,R1
         USING  FUN9DATA,R11
*
         LR     R10,R8
         USING  SSOB,R10
         ST     R10,SSOBADDR
*
         GETCVT R8                 FIND TSSO CVT
         USING TSSOCVT,R8
*
         L     R9,SSOBINDV         POINT TO WTO EXTENSION
         ST    R9,SSWTADDR         SAVE IT FOR FUTURE...
         USING SSWTBGN,R9
*
         DROP  R10
         MVC   POST1D(POST1CE-POST1C),POST1C
         XC    MAJWQEAD(4),MAJWQEAD
         XC    MINWQEAD(4),MINWQEAD
         XC    MAJOREAD(4),MAJOREAD
         XC    FUNC9RC(2),FUNC9RC   INIT RETURN CODE
***********************************************************************
* THE FIRST ORDER OF BUSINESS IS TO SEE IF MESSAGE TRAPPING IS ACTIVE *
* FOR AN SS CONSOLE. IF SO, WE WILL QUEUE UP THE MESSAGE BASED ON THE *
* INFORMATION OBTAINED FROM THE OSCMDICB, WHICH IS CHAINED OFF THE    *
* SSCONCB FOR THE SPECIFIC CONSOLE.                                   *
*                                                                     *
***********************************************************************
***********************************************************************
* THE NEXT STEP(S) CONCERN WHETHER TO INTERCEPT THIS MESSAGE. TSSO    *
* MUST HAVE OBTAINED A SUBSYSTEM CONSOLE, AND THE INCOMING MESSAGE    *
* MUST BE DESTINED FOR THAT SUBSYSTEM CONSOLE (IN FIELD TSSCONID).    *
* IF EITHER OF THESE CONDITIONS ARE NOT MET, WE FORGET THIS MESSAGE.  *
***********************************************************************
         L     R5,SSWTWQE          ADDRESS THE WQE.
         ST    R5,MAJWQEAD         REMEMBER THE MAJOR WQE
*        ST    R5,WQEADDR          REMEMBER IT IN TWO PLACES
         USING WQE,R5
***********************************************************************
* WE MUST DETERMINE IF ANY TSSO SUBSYSTEM CONSOLE IS CURRENTLY        *
* INTERCEPTING MESSAGES, AND, IF THEY ARE, WHICH ONE MATCHES THIS     *
* CONSOLE ID. LETS LOOP THROUGH THE SUBSYSTEM CONSOLES.
***********************************************************************
* NOTE THAT THE WQEUCMID FIELD IS IN THE SAME PLACE FOR MAJOR AND
* NORMAL WQE'S
***********************************************************************
         XR    R6,R6               WIPE REGISTER
         IC    R6,WQEUCMID         PICK UP THE CONSOLE THIS GUY IS
*                                  DESTINED FOR
         L     R7,SSCONSAD         THIS, FROM THE TSSO CVT
         LTR   R7,R7               DO WE HAVE ONE ?
         BZ    PART1EXT            TSSO HAS PROBLEMS...
         USING SSCONCBH,R7
         LA    R7,SSCONFIR         GET ADDRESS OF FIRST CONSOLE
SSCLOOP  DS    0H
         USING SSCONCB,R7
         CLC   SSCONNUM(4),=XL4'0000'  END OF SSCON CHAIN
         BE    PART1EXT
         TM    SSCONFLG,X'20'      MESSAGE INTERCEPTION ACTIVE ?
         BNO   SSCLOOPE            NOPE, END OF THE LOOP
         L     R10,SSCONNUM        GET SUBSYSTEM CONSOLE ID
         CR    R6,R10              IS IT OURS ?
         BE    FNDSSCON            BY GOLLY, IT SURE IS...
SSCLOOPE DS    0H
         LA    R7,SSCONCBL(R7)
         B     SSCLOOP
         DROP  R5
***********************************************************************
* NOW WE GET THE OSCMD INTERFACE CONTROL BLOCK, AND PROCEED FROM THERE*
*                                                                     *
***********************************************************************
FNDSSCON DS    0H
         ST    R7,SSCONENT         SSCONENT IS THE ENTRY FOR THIS
*                                  CALL TO THE SSI CODE 9
         TM    TSSOFLG2,TSSOMON    IS THE DEBUG TURNED ON ?
         BNO   NDEB1
         WTO   'A TSSO SS CONSOLE ID IS NOW BEING PROCESSED'
NDEB1    DS    0H
         L     R7,SSCONICB         GET ADDRESS OF OSCMDICB FOR THIS
*                                  CONSOLE
         DROP  R7
         LTR   R7,R7
         BZ    NOICB               PROBLEMS...
         USING OSCMDICB,R7
***********************************************************************
* WE NEED TO FIGURE OUT IF THIS IS A MAJOR WQE, A MINOR WQE, OR       *
* A NORMAL WQE. IT COULD ALSO BE A REPLY.                             *
***********************************************************************
         L     R10,SSWTMIN         GET MINOR WQE ADDRESS
         LTR   R10,R10             CHECK IT OUT..
         BZ    MINZIP              DONT SET FLAG
         OI    FUN9FLG,X'80'       SSWTMIN ^= ZERO
         ST    R10,MINWQEAD        REMEMBER MINOR WQE ADDRESS
MINZIP   DS    0H
         L     R10,SSWTORE         GET ORE ADDRESS.
         LTR   R10,R10             CHECK IT OUT..
         BZ    OREZIP              DONT SET FLAG
         OI    FUN9FLG,X'40'       SSWTORE ^= ZERO
         ST    R10,MAJOREAD        REMEMBER OREADDR
*
OREZIP   DS    0H
*
***********************************************************************
* CHECK FOR A MULTI-LINE WTO.                                         *
*                                                                     *
***********************************************************************
         L     R10,MINWQEAD        IS THIS A MULTI-LINE WTO ?
         LTR   R10,R10             IF NON-ZERO, A MINOR WQE EXISTS,
         BNZ   MLWTOWQE            SO WE GO AND PROCESS IT. OTHERWISE,
*                                  CHECK TO SEE IF ITS THE FIRST LINE
*                                  OF A MULTI-LINE WTO.
         L     R10,MAJWQEAD        GET MAJOR BACK...
         USING WMJM,R10
         TM    WMJMMLW,WMJMMLWB    MAJOR WQE WITH MINORS TO FOLLOW ?
         BNO   NORMWQE             NOPE, NORMAL WQE
***********************************************************************
* HERE, WE HAVE THE MAJOR WQE WITH MINORS TO FOLLOW. WE WILL PROCESS  *
* THE MAJOR WQE BY QUEUEING THE RESPONSE TO OSCMD...                  *
***********************************************************************
         XR    R4,R4              CLEAR LEGNTH REGISTER
         LH    R4,WMJMTXTL        GET LENGTH
         LA    R5,WMJMTXT         GET ADDRESS OF MESSAGE
         BAL   R14,QUEUEWQE       TELL OSCMD ABOUT IT
         B     PART1EXT            MAJOR, WITH MINORS TO FOLLOW,
         DROP  R10
*
***********************************************************************
* PROCESS MULTI-LINE WQE'S...                                         *
*                                                                     *
***********************************************************************
MLWTOWQE DS    0H
***********************************************************************
* AT THIS POINT, WE ARE PROCESSING ONE IN A SEQUENCE OF MINOR WQE'S.  *
***********************************************************************
* THERE MAY BE ZERO, ONE OR TWO MINOR WQE'S FOR EVERY INVOCATION OF   *
* THE SUBSYSTEM INTERFACE. WE MUST CHECK FOR THESE CONDITIONS..       *
* WE WILL QUEUE THE MINOR WQE'S IF THERE IS ROOM                      *
***********************************************************************
*        WTO   'TRAPPED A MULTILINE WTO'
         L     R10,MINWQEAD        LETS DEAL WITH THE MINOR WQE
         USING WMNM,R10
         TM    WMNMLT1,WMNMLT1A+WMNMLT1B+WMNMLT1C   DATA ON THIS LINE ?
         BZ    CHEKEND1            I GUESS NOT, WILL CHECK THE NEXT ONE
         XR    R4,R4
         IC    R4,WMNMTL1          GET LENGTH OF PART 1
         LA    R5,WMNMTXT1        GET ADDRESS OF PART 1
         TM    WMNMML2,WMNMML2H    IS LINE 2 AVAILABLE ?
         BNO   USELNE2
         BAL   R14,QUEUEWQE        GO TELL OSCMD ABOUT IT
         LTR   R15,R15
         BNZ   PSTOSCMD            IF THIS FAILED, DONT DO THE NEXT
*                                  ONE
CHEKEND1 DS    0H
         TM    WMNMLT1,WMNMLT1D    ARE WE AT THE LAST ONE ?
         BO    PSTOSCMD            YUP, POST THE OSCMD PROCESSOR
         B     PART1EXT
*
USELNE2  DS    0H
         TM    WMNMLT2,WMNMLT2A+WMNMLT2B+WMNMLT2C   DATA ON THIS LINE ?
         BZ    CHEKEND2            I GUESS NOT, CHECK FOR END..
         XR    R4,R4
         IC    R4,WMNMTL2          GET LENGTH OF PART 1
         LA    R5,WMNMTXT2        GET ADDRESS OF PART 1
         BAL   R14,QUEUEWQE        GO TELL OSCMD ABOUT IT
         LTR   R15,R15
         BNZ   PSTOSCMD            IF THIS FAILED, DONT DO THE NEXT
*                                  ONE
CHEKEND2 DS    0H
         TM    WMNMLT2,WMNMLT2D    ARE WE AT THE LAST ONE ?
         BO    PSTOSCMD            YUP, POST THE OSCMD PROCESSOR
         B     PART1EXT
*
         DROP  R10
*
*
NORMWQE  DS    0H
***********************************************************************
* AT THIS POINT, WE HAVE DETERMINED THAT WE ARE PROCESSING AN AVERAGE *
* EVERY DAY RUN OF THE MILL WQE. WE WILL DETERMINE IF IT IS DESTINED  *
* FOR THE TSSO SUBSYSTEM CONSOLE, AND IF SO, PROCESS IT.              *
***********************************************************************
*        WTO   'TRAPPED A NORMAL WQE'
         LA    R4,147       (PTF1) LENGTH IS ALWAYS 147 FOR A NORMAL
*                           (PTF1) WQE
         L     R5,MAJWQEAD         START AT MAJOR WQE ADDRESS
         USING WQE,R5
         LA    R5,WQETS     (PTF1) - GET TIMESTAMP INSTEAD OF TEXT
         DROP  R5
         BAL   R14,QUEUEWQE        QUEUE THIS WTO...
***********************************************************************
* NOTE THAT WE DONT REALLY CARE ABOUT THE SUCCESS OF THE QUEUEING.    *
***********************************************************************
         B     PART1EXT            END OF PART 1 OF SSI RTN 9.
*
QUEUEWQE DS    0H
***********************************************************************
* WE MUST PROCESS THE MESSAGE. WE WILL PLACE THE MESSAGE TEXT IN THE  *
* FIELD POINTED TO BY THE OSCMDICB.                                   *
* THE QUEUEWQE ROUTINE IS CALLED AS AN INTERNAL SUBROUTINE FOR THE    *
* PURPOSE OF QUEUEING UP THE CAPTURED MESSAGES IN THE OSCMDICB.       *
*
***********************************************************************
* INPUT REGISTERS:                                                    *
*                                                                     *
* R5 POINTS TO THE MESSAGE TO BE QUEUED UP (WQETXT FROM EITHER MAJOR  *
*    OR MINOR                                                         *
* R4 CONTAINS THE LENGTH OF THE MESSAGE.                              *
* R14 CONTAINS THE RETURN ADDRESS.                                    *
*                                                                     *
* OUTPUT REGISTERS: R15 = 0 : MESSAGE INSERTED OK                     *
*                   R15 = 4 : ERROR INSERTING MESSAGE.                *
***********************************************************************
         L     R6,OSCMDCNT         GET COUNT OF MESSAGES
         C     R6,OSCMDMAX         HAVE WE HIT THE MAXIMUM YET ?
         BE    ENDQWQE4            YUP, WE WILL IGNORE THIS MESSAGE
*                                  AND ALL SUBSEQUENT MESSAGES.
         LA    R6,1(R6)            INCREMENT COUNT OF MESSAGES
         ST    R6,OSCMDCNT         AND STORE BACK.
         L     R6,OSCMDNEX         GET NEXT BUFFER LOCATION
         BCTR  R4,0
         EX    R4,COPYWQET         COPY THE WQETEXT
         LA    R6,150(R6)   (PTF1) INCREMENT BUFFER COUNT NOW 150
         ST    R6,OSCMDNEX
         B     ENDQWQE0
*
COPYWQET MVC   0(0,R6),0(R5)     COPY TEXT INTO BUFFER
*
ENDQWQE0 DS    0H
         LA    R15,SSWTNDSP      SET CODE FOR MESSAGE SUPPRESSION
         STH   R15,FUNC9RC
         XR    R15,R15
         B     ENDQWQE
ENDQWQE4 DS    0H
         LA    R15,4
         B     ENDQWQE
ENDQWQE  DS    0H
         BR    R14
*
PSTOSCMD DS    0H
***********************************************************************
* NOW, WE WILL POST THE OSCMD PROCESSOR, BECAUSE THERE ARE NO MORE    *
* WTO'S FORTHCOMING FOR THIS COMMAND, SO THERE IS NO REASON TO WAIT   *
* FOR THE COMMAND TO END.. OSCMD IS WAITING ON TWO ECBS, THE FIRST    *
* BEING A STIMER FOR THE TIME IN THE WAITIME VARIABLE, THE SECOND     *
* BEING THE OSCMDECB FIELD. WE WILL POST THIS FIELD.                  *
***********************************************************************
         L     R10,SSCONENT               SS CON ENTRY FOR THIS CALL
         USING SSCONCB,R10
         NI    SSCONFLG,255-X'20'        INDICATE NO MORE MESSAGE TRAP
         DROP  R10
         LA    R2,OSCMDECB
         L     R6,OSCMDACB               GET ASCB OF CALLERS ADDRESS SP
         POST  (R2),X'000',ASCB=(R6),ERRET=PART1EXT,MF=(E,POST1D)
         B     PART1EXT
*
NOICB    DS    0H
         WTO   'TSS9201S INVALID ICB POINTER -> RESTART TSSO',DESC=(1)
         B     FUNC9EXT
*
*
PART1EXT DS    0H
FUN9PRT2 DS    0H
***********************************************************************
* THIS IS THE SECOND PART OF THE SS09 INTERCEPT ROUTINE. BASICALLY,   *
* ITS PURPOSE IS TO INTERCEPT LINES THAT START WITH "#.LOGON" AND     *
* SUBSTITUTE STUFF ON THE REST OF THE LINE WITH GIBESRISH - TO BLANK  *
* OUT THE PASSWORD THAT WOULD HAVE BEEN ENTERED ON THE LINE...        *
***********************************************************************
         L     R2,SSWTMIN                  CHECK OUT MINOR WQE
         LTR   R2,R2
         BNZ   PART2EXT                    MINOR WQE -> EXIT.
         L     R2,SSWTORE                  CHECK OUT OPERATOR REPLY?
         LTR   R2,R2
         BNZ   PART2EXT                    OPERATOR REPLY -> EXIT
         L     R2,SSWTWQE                  GET THE MAJOR WQE
         USING WQE,R2
         CLC   WQETXT+2(6),=XL6'4B9396879695'   #.LOGON LOWER CASE
         BE    SUPRLOGN
         CLC   WQETXT+2(6),=CL6'.LOGON'     IS THIS "#.LOGON" ?
         BE    SUPRLOGN                    NO - IGNORE ...
         B     PART2EXT
SUPRLOGN DS    0H
         LA    R15,SSWTNDNH      SET CODE FOR MESSAGE AND LOG
*                                SUPPRESSION
         STH   R15,FUNC9RC       SUPPRESS THE #.LOGON COMMAND.
*        WTO   'TSS9209I TSSO .LOGON COMMAND ECHO SUPPRESSED'
         B     FUNC9EXT                    AND GET OUT OF HERE
         DROP  R2
PART2EXT DS    0H
***********************************************************************
* THIS IS THE END OF THE PROCESSING ROUTINE FOR THE #.LOGON INTERFACE.*
* PART 3 OF THIS ROUTINE IS THE PROCESSING OF THE AOF TABLE.          *
***********************************************************************
         B     FUN9PRT3
*
        TITLE 'AOF PROCESSING'
FUN9PRT3 DS    0H
***********************************************************************
* THIS IS PART THREE OF THE WTO/WTOR MESSAGE INTERCEPTION FUNCTIONS.  *
* HERE, WE HANDLE THE AUTOMATED OPERATIONS FACILITY.                  *
***********************************************************************
         L     R7,TSSOTABL         GET ADDRESS OF TABLE.
         LTR   R7,R7               CHECK IT OUT
         BZ    FUNC9EXT            NO TABLE, NO WORK TO DO.
         SPACE 1                                                14DEC92
         TM    TSSOFLG1,TSSOSMPF   OBEY MPF SUPPRESSION         14DEC92
         BZ    FUN9ACT             NO, HANDLE ALL MESSAGES      14DEC92
         L     R5,SSWTWQE          PICK UP WQE ADDRESS          14DEC92
         USING WQE,R5              ESTABLISH ADDRESSABILITY     14DEC92
         TM    WQESUPB,WQESMPF     SUPPRESSED BY MPF?           14DEC92
         BO    FUNC9EXT            YES, IGNORE MESSAGE          14DEC92
         DROP  R5                  END WQE ADDRESSABILITY       14DEC92
FUN9ACT  DS    0H
***********************************************************************
* IF WE GET HERE, THE TSSO/AOF COMPONENT IS ACTIVE, AND THERE IS A    *
* (VALID) TSSO AOF TABLE. THE VALIDITY OF THE TABLE IS DETERMINED AT  *
* TSSO STARTUP/TABLE RELOAD TIME. R7 WILL SERVE AS A BASE REGISTER    *
* FOR THE TSSO/AOF TABLE CURRENT ENTRY
***********************************************************************
* INITIALIZE VARIABLES.
***********************************************************************
***********************************************************************
* THE FIRST PART OF THE ROUTINE WILL ISOLATE THE MESSAGE ID, BE IT A  *
* WTO OR WTOR, AND PRESERVE IT FOR FUTURE EXAMINATION.                *
***********************************************************************
         MVI   FUN9FLG,X'00'       RESET FLAG.
         L     R5,SSWTMIN          GET MINOR WQE ADDRESS
         LTR   R5,R5               CHECK IT OUT..
         BZ    MINZERO             DONT SET FLAG
         OI    FUN9FLG,X'80'       SSWTMIN ^= ZERO
MINZERO  DS    0H
         L     R5,SSWTORE          GET ORE ADDRESS.
         LTR   R5,R5               CHECK IT OUT..
         BZ    OREZERO             DONT SET FLAG
         OI    FUN9FLG,X'40'       SSWTORE ^= ZERO
         L     R5,SSWTWQE          GET QUEUE ELEMENT
         USING WQE,R5              GAIN ADDRESSABILITY TO WQE
         MVC   TXTMSG(8),WQETXT+4  MOVE IN MESSAGE FOR WTOR
         LA    R7,WQETXT+4         PICK UP STRING START FOR WQE
         ST    R7,STRSTART         AND REMEMBER FOR TSSOPARS LATER
         LA    R1,124              SET MAX. LENGTH
         B     GOTORE
OREZERO  DS    0H
         L     R5,SSWTWQE          GET QUEUE ELEMENT
         LA    R7,WQETXT+1         PICK UP STRING START FOR WQE
         ST    R7,STRSTART         AND REMEMBER FOR TSSOPARS LATER
*
         LA    R7,WQETS            GET TIME STAMP ADDRESS FOR ACTION=
*                                  POST
         ST    R7,WQETSADR
         USING WQE,R5
         MVC   TXTMSG(8),WQETXT+1  WHY THE +1-- WHY NOT ?
*                                  JUST SEEMS TO WORK BETTER
         LA    R1,127              SET MAX. LENGTH
GOTORE   DS    0H
         ST    R1,STRLEN           SAVE LENGTH FOR LATER
         ST    R5,WQEADDR          REMEMBER THE WQE ADDRESS
         DROP  R5                  DROP ADDRESSABILITY TO WQE
************************************************************
* HERE IS WHERE WE EXAMINE THE TEXT OF THE WTO TO SEE IF WE SHOUD
* TAKE ACTION.
* THE ADDRESS OF THE TABLE IS IN TSSOTABL, AND THE FORMAT IS DOCUMENTED
* IN THE TSSO: LOGIC GUIDE (WELL... MAYBE SOMEDAY)
* R6: POINTS TO CURRENT TABLE ENTRY, DURING TEST PROCESSING.
************************************************************
         LM    R4,R6,TSSOBSTS           SETUP FOR BSCAN CALL    30OCT92
         LA    R2,S9BSCMP               POINT AT COMPARE COMMAND30OCT92
         BAL   R14,BSCAN                GO DO BINARY SEARCH     30OCT92
         B     TSTALLMG                 +0 NOT FOUND, LOOK MSG=*30OCT92
*                                       +4 FOUND, DO ENTRIES    30OCT92
         L     R7,0(,R7)                POINT AT FIRST AOFNTRY  30OCT92
         B     MATCHMSG                 GO AND PROCESS A MATCH  30OCT92
S9BSCMP  CLC   TXTMSG(8),4(R7)     **BSCAN EXED** CHECK MSG ID  30OCT92
TSTALLMG DS    0H                                               30OCT92
         ICM   R7,4,TSSOALMS            POINT AT MSG=* ENTRIES  30OCT92
         BZ    PART3EXT                 IF NONE, THEN ALL DONE  30OCT92
         OI    FUN9FLG,X'10'            INDICATE BSCAN DONE     30OCT92
         B     MATCHMSG                 GO PROCESS ALL ENTRIES  30OCT92
         SPACE 2                                                30OCT92
         USING AOFNTRY,R7               SETUP DSECT
***********************************************************************
* TSSO/AOF HAS PERFORMED THE REQUESTED FUNCTION, HOWEVER, WE CAN NOW
* CONTINUE TO SCAN THE TSSO/AOF TABLE, IN HOPES OF FINDING ANOTHER
* TABLE ENTRY TO MATCH THIS MESSAGE ID.
***********************************************************************
GETNEXT  DS    0H                       RUN THE REST OF TABLE   30OCT92
         ICM   R7,15,AOFBNXT            NEXT AOF IN BSCAN CHAIN 30OCT92
         BNZ   MATCHMSG                 HAVE SAME MESSAGE ID    30OCT92
         TM    FUN9FLG,X'10'            DONE MSG=* PROCESSING?? 30OCT92
         BZ    TSTALLMG                 NO, TRY THE MSG=* TYPE  30OCT92
         B     PART3EXT                 ALL DONE WITH MSG=*     30OCT92
         EJECT                                                  30OCT92
MATCHMSG DS    0H
         ST    R7,CURTABAD              SAVE CURRENT ENTRY ADDR
***********************************************************************
* WE COME HERE WHEN A MATCH HAS BEEN FOUND IN THE MESSAGE ID SECTION  *
* OF A TSSO TABLE ENTRY. THE PROCESSING CONTINUES WITH THE PERFORMING *
* OF ANY TESTS THAT NEEDS TO BE ISSUED. IF ALL TESTS ARE MATCHED, THAN*
* BRANCH TO THE PERFACT ROUTINE, WHICH WILL PERFORM ANY ACTIONS       *
* REQUIRED. IF THE TESTS ARE NOT MET, CONTINUE SEARCHING THE TABLE AS *
* THERE MAY BE ANOTHER MATCH.
***********************************************************************
         L     R6,AOFTESTP               LOAD UP TEST ENTRY.
         USING ATSNTRY,R6
TESTLOOP DS    0H                        LOOP FOR TEST ENTRIES
         LTR   R6,R6                     ANY MORE TEST ENTRIES ?
         BZ    TESTSUCC                  NOPE, ALL TESTS MUSTBE OK
         L     R1,ATSWORD          LOAD SUBSTR OR WORD NUMBER
         ST    R1,WORD1            AND REMEMBER IT.
         L     R1,ATSLNGTH         LOAD LENGTH
         ST    R1,WORD2
         MVC   WORDSEPS(4),ATSSEPS LOAD WORD SEPARATORS.
***********************************************************************
* WE MUST DETERMINE THE TEST TYPE, EITHER A WORD TYPE, OR A SUBSTR    *
* TYPE.                                                               *
***********************************************************************
         CLC   ATSTYPE,=CL2'W'     IS IT A WORD ?
         BE    WORDTYPE            YUP, GO PROCESS IT
         CLC   ATSTYPE,=CL2'P'     IS IT A SUBSTRING ?
         BE    SUBSTYPE            YUP, GO PROCESS IT.
         CLC   ATSTYPE,=CL2'S'     IS IT A SUBSTRING ?
         BE    SUBSTYPE            YUP, GO PROCESS IT.
         CLC   ATSTYPE,=CL2'L'     IS IT A LINE NUMBER?
         BNE   TESTTBAD            NO, IT IS WRONG
         L     R2,ATSLINE          PICK UP LINE NO.
         BAL   R14,SEDOLINE        TRY TO FIND IT
         B     TESTFAIL            NO MATCH, THIS TEST FAILS
         B     SUBSSUCC            SUCCESSFUL, GO ONTO NEXT TEST
         SPACE 1
TESTTBAD DS    0H                  INVALID TEST TYPE
* NEITHER WORD NOR SUBSTRING, ** PROBLEM **
         WTO   'TSS9202E INVALID TEST TYPE- IGNORING MESSAGE ID'
*        B     TESTFAIL            SIMULATE TEST FAILING !
         B     PART3EXT            STOP PROCESSING ON FAILURE    *SEAG*
         EJECT ,
WORDTYPE DS    0H
***********************************************************************
* WE COME HERE WHEN WE HAVE A WORD TEST. THE ROUTINE WILL PERFORM THE
* FOLLOWING PROCEDURES.
*                                                                     *
* 1) USE TSSOPARS TO PARSE THE MESSAGE, BASED ON THE SEPARATOR CHARS  *
*    SPECIFIED IN THE TABLE.                                          *
* 2) PERFORM THE TEST BASED ON THE DESIRED WORD, USING THE LENGTH     *
*    SPECIFIED IN THE TABLE.                                          *
* 3) EITHER GO TO TESTFAIL, OR PERFORM ANOTHER TEST.                  *
*                                                                     *
***********************************************************************
         L     R10,STRSTART      GET ADDRESS OF STRING
*                                 NOTE- COULD HAVE BEEN WQETXT+1 IF WTO
*                                 OR WQETXT+4 IF WTOR.
         ST    R10,PARS1         THERES OPERAND NUMBER 1
*
         MVC   PARS2(4),STRLEN    LENGTH OF WTO MESSAGES
*
         MVI   PARARRAY,X'40'
         MVC   PARARRAY+1(255),PARARRAY      BLANK OUT PARARRAY
         MVC   PARARRAY+256(LPARRAY-256),PARARRAY               15OCT92
         MVC   PARARRAY(2),=H'20'           MAX OF 20 TOKENS.
         LA    R10,PARARRAY      PARARRAY IS THIRD PARAMETER
         ST    R10,PARS3         STORE IN PARM LIST.
*
         LA    R10,WORDSEPS      USE WORD SEPARATORS ON TEST DIRECTIVE
         ST    R10,PARS4         AND STORE IN FOURTH WORD IN PARM LIST.
*
         LA    R1,PARSPARM
         CALL  TSSOPARS          ** P A R S E   I T   **
*        MVC   PARARRAY(2),=H'1'
         LH    R10,PARARRAY     HOW MANY DID WE GET BACK
         C     R10,WORD1        SEE WHICH ONE WAS SPECIFIED IN THE
*                                TEST PARAMETER LIST.
         BL    WORDFAIL          NOT ENOUGH WORDS.. FAIL THIS TEST.
         LA    R10,PARARRAY+2   POINT TO WORD NUMBER 1
         L     R5,WORD1          GET WORD  REQUESTED
         BCTR  R5,0
         SLL   R5,4              MULTIPLY BY 16
         LA    R10,0(R5,R10)     POINT TO TOKEN
         ST    R10,TOKADDR      REMEMBER WHERE TOKEN WAS FOUND.
***********************************************************************
* AT THIS POINT, TOKADDR CONTAINS THE ADDRESS OF THE TOKEN (WORD) THAT*
* WAS LOCATED BY TSSOPARS. WE WILL COMPARE THIS WORD, FOR N CHARACTERS*
* AGAINST WHAT WAS SPECIFIED IN THE TSSO/AOF TABLE. IF MATCHED, GREAT *
* IF NOT, TEST HAS FAILED.                                            *
*
* WE NEED TO LOAD UP THE MATCH TEXT AS SPECIFIED IN THE AOF TABLE.    &
***********************************************************************
         LH    R4,ATSTXTL       GET MATCHING TEXT LENGTH
***********************************************************************
* NOTE, THE MATCHING TEXT STRING IS AT 20(R6) WHERE R6 POINTS TO THE
* TEST PARAMETER ENTRY (TPE).
***********************************************************************
         L     R5,TOKADDR       LOAD TOKEN ADDRESS
         BCTR  R4,0             -1 FOR HARDWARE DEFIENCY.
         EX    R4,COMPSTR       DO COMPARE !
         BE    WORDSUCC        WORD MATCHED !!
         BNE   WORDFAIL         WORD DIDNT MATCH !!!
COMPSTR  CLC   0(0,R5),ATSTXT   ** EXECUTED **
WORDSUCC DS    0H
************************************************************
* WE COME HERE IF THE WORD MATCHED, IMPLYING THAT THIS PARTICULAR
* TEST WAS SUCCESSFULL. NOW WE WILL GO SEE IF THERE ARE ANY MORE
* TESTS..
************************************************************
         L     R6,ATSNXT        GET NEXT TEST ENTRY
         B     TESTLOOP         AND TRY AGAIN...
*
WORDFAIL DS    0H
         B     TESTFAIL         IF THIS TEST FAILED, ALL TESTS
*                               FOR THIS ENTRY FAIL, AND WE
*                               CONTINUE SEARCHING THROUGH THE
*                               TABLE.
*
SUBSTYPE DS    0H
***********************************************************************
* THE USER REQUESTED A SUBSTRING TYPE OF TEST ON THE MESSAGE. THE     *
* ROUTINE WILL PROVIDE THAT TEST. THE TEST IS:                        *
* SUBSTR(MVSWTO,START IN AOF,LENGTH IN AOF) ?= MATCHTEX IN AOF.       *
*                                                                     *
***********************************************************************
         L     R5,STRSTART      GET START OF MVS MESSAGE.
         L     R4,WORD1         GET START AS SPECIFIED IN AOF.
         BCTR  R4,0             -1 TO GET CORRECT CHARACTER.
         LA    R5,0(R4,R5)      POINT TO START OF SUBSTRING IN WQE
         L     R4,WORD2         GET LENGTH FOR COMPARE.
         BCTR  R4,0             -1 FOR EXECUTE
         EX    R4,COMPSTR2      PERFORM THE SUBSTRING COMPARE.
         BE    SUBSSUCC         THEY MATCHED! -> TEST SUCCEDED.
         BNE   SUBSFAIL         NO MATCHED- SUBS FAILED
***********************************************************************
* NOTE THAT THE MATCH TEXT IS IN 20(R6) WHERE R6 POINTS TO THE CURRENT
* AOF TABLE.
***********************************************************************
COMPSTR2 CLC   0(0,R5),ATSTXT
SUBSSUCC DS    0H
***********************************************************************
* WE GET HERE IF THE SUBSTRING TEST WAS SUCCESSFULL. TSSO/AOF WILL
* CHECK THE NEXT ENTRY IN THE TABLE AND ATTEMPT THE NEXT TEXT
***********************************************************************
         L     R6,ATSNXT
         B     TESTLOOP
*
SUBSFAIL DS    0H
***********************************************************************
* WE COME HERE IF THIS SUBSTRING TEST HAS FAILED. IF THIS IS THE CASE *
* THEN WE WILL CONTINUING SEARCH AOF TABLE ENTRIES IN HOPES OF AGAIN  *
* FINDING THE MSG ID.
***********************************************************************
         B     TESTFAIL
TESTFAIL DS    0H
***********************************************************************
* WE COME HERE IF A WORD OR SUBSTRING TEST FAILS. IF THIS SHOULD      *
* HAPPEN, WE CONTINUE SEARCHING THROUGH ALL TSSO/AOF TABLE ENTRIES    *
* FOR ANOTHER MATCH ON THE MSGID.                                     *
***********************************************************************
         B     GETNEXT          GO TEST ANOTHER AOF ENTRY
*
TESTSUCC DS    0H
***********************************************************************
* WE COME HERE IF ALL TESTS HAVE BEEN SUCCUSSFULL FOR THIS TABLE ENTRY*
* TSSO WILL GO AND PERFORM THE ACTION REQUESTED AND CONTINUE SEARCHING*
* THE TABLE FOR ANY ADDITIONAL ENTRIES.                               *
***********************************************************************
         B     PERFACT
         DROP  R6
*
PERFACT  DS    0H
************************************************************
* WE COME HERE WHEN WE HAVE FOUND A WTO IN THE TABLE, AND THE TESTS
* SPECIFIED FOR THE ENTRY HAVE BEEN MET. AT THAT TIME, WE PERFORM
* THE ACTION SPECIFIED IN THE ACTION= PARAMETER FOR THE ENTRY.
*
* PROCESSING CONTINUES AS FOLLOWS:
*
* 1) IF MATCHLIM PROCESSING HAS BEEN SPECIFIED (MATCHLIM > 0) DEDUCT
*    ONE FROM MATCHLIM. IF MATCHLIM = 999999 THEN DONT BOTHER. IF
*    MATCHLIM = 0 THEN DO NOT PERFORM THE REQUESTED FUNCTION AFTER ALL.
*
* 2) WE IDENTIFIY WHAT THE TABLE WANTS US TO DO, I.E. ISSUE AN OS
*    COMMAND, TSSO COMMAND, REPLY, OR WHATEVER. WE THEN BRANCH TO THE
*    APPROPRIATE ROUTINE.
*    NOTE THAT R7 POINTS TO THE ENTRY IN THE TSSO/AOF TABLE.
*
************************************************************
         L     R2,AOFMLIM                PICK UP MATCHLIM VALUE.
         C     R2,=F'999999'             WAS MATCHLIM SPECIFIED ?
         BE    PASTMLIM                  NO - DONT BOTHER DEDUCTING
         LTR   R2,R2                     IS COUNT ALREADY ZERO ?
         BZ    FUN9NACT                  NO, TAKE NO ACTION...
         BCTR  R2,0                      TAKE  ONE AWAY FROM MATCHLIM
         ST    R2,AOFMLIM                AND STORE NEW MATCHLIM BACK
PASTMLIM DS    0H
***********************************************************************
* HERE, WE HAVE SURVIVED MATCHLIM PROCESSING, AND ARE READY TO TAKE   *
* ON THE ACTION SPECIFIED IN THE ACTION= PARAMETER OF THE AOF TABLE   *
***********************************************************************
         CLC   AOFACTN,=CL8'NONE'       IS THIS A DUMMY REQUEST?
         BE    GETNEXT                  YES, SO WE HAVE DONE IT
*
         CLC   AOFACTN,=CL8'REPLY'       REQUEST TO REPLY ?
         BE    FUN9RPLY
         CLC   AOFACTN,=CL8'SUPPRESS'     REQUEST TO SUPPRESS.
         BE    FUN9SUPP
         CLC   AOFACTN,=CL8'HILIGHT'     REQUEST TO HILIGHT ?
         BE    FUN9LITE
         CLC   AOFACTN,=CL8'HIGHLITE'   REQUEST TO HILIGHT ?
         BE    FUN9LITE
         CLC   AOFACTN,=CL8'LOWLIGHT'    REQUEST TO TURN OFF HIGHLITE
*                                       DESCRIPTOR ?
         BE    FUN9LOW
         CLC   AOFACTN,=CL8'OSCMD'      REQUEST FOR AN OS COMMAND ?
         BE    FUN9CMND
         CLC   AOFACTN,=CL8'OSCMDT'     REQUEST FOR AN OS COMMAND ?
*                                       IN TEST MODE ?
         BE    FUN9CMDT
*
         CLC   AOFACTN,=CL8'POST'       IS THIS REQUEST FOR POST
         BE    FUN9POST
*
         WTO   'TSS9203E INVALID DIRECTIVE',DESC=1
         B     PART3EXT                 SCOTTY, BEAM ME UP.
FUN9NACT DS    0H
***********************************************************************
* HERE, THE MATCHLIM TEST HAS DETERMINED A ZERO MATCHLIM - IMMEDAITELY*
* TERMINATE SS09 PROCESSING WITHOUT DOING ANYTHING                    *
***********************************************************************
         B     GETNEXT                 GET NEXT TSSO/AOF TABLE ENTRY
FUN9CMDT DS    0H
         OI    FUN9FLG,X'20'           INDICATE TEST MODE
         B     FUN9CMND
FUN9CMND DS    0H
************************************************************
* HERE IS THE ENTRY POINT FOR ISSUEING OS COMMANDS BASED ON
* WTO'S.
************************************************************
         SPACE 1
CMNDGO   DS    0H
         LA    R2,MVSCMD+4       STARTING POINT FOR MVS CMD
         MVI   MVSCMD+4,X'40'         BLANK OUT THE
         MVC   MVSCMD+5(104),MVSCMD+4 COMMAND BUFFER
         LA    R3,AOFACT         START POINT FOR MVS DIRECTIVE
         LH    R4,AOFACTL        LENGTH OF MESSAGE
CMNDLOOP DS    0H
         LTR   R4,R4            CHECK TO SEE IF ANY CHARS REMAIN
*                               IN BUFFER. THIS COULD HAVE HAPPENED
*                               IF THE FORMATTING OPTION HAD BEEN
*                               THE LAST THING IN THE TEXT OPERAND
         BZ    ISSUECMD
         CLI   0(R3),C'\'       SIGNIFICANCE CHARACTER ON?
         BE    SIGON             WELL.. IT IS NOW.
         MVC   0(1,R2),0(R3)
         LA    R2,1(R2)
         LA    R3,1(R3)
         BCT   R4,CMNDLOOP
         B     ISSUECMD          GO DO THE COMMAND
*
SIGON    DS    0H
************************************************************
* WE COME HERE WHEN WE FIND THE '\' DIRECTIVE IN THE TSSO TABLE
* ENTRY FOR THIS MESSAGE. THIS MEANS WE HAVE SOME WORK TO DO.
************************************************************
         LA    R3,1(R3)           POINT TO NEXT CHARACTER
         CLI   0(R3),C'P'         LOOKING FOR POSITION CHARACTER?
         BE    SIGONP             YUP.. GOT IT
         CLI   0(R3),C'S'         CHECK ITS SYNONYM
         BE    SIGONP             YUP.. GOT IT
         CLI   0(R3),C'W'         LOOKING FOR SOME 'WORD' ?
         BE    SIGONW             YUP, GO DO IT !!
         B     SIGWRONG           NO, INVALID '\' DIRECTIVE...
         SPACE 2
SIGONP   DS    0H
         CLI   4(R3),C','         CHECK FOR CORRECT FORMAT.
         BNE   SIGWRONG
         CLI   7(R3),C'\'         CHECK FOR CLOSING TERMINATOR.
         BNE   SIGWRONG           OH WELL...
*
         LA    R10,WORKAREA       POINT R10 TO WORKAREA FOR CVT
         LA    R0,3               SET LENGTH FOR FIRST CONVERT
         LA    R1,1(R3)           SET ADDRESS
         CALL  JCECVTDB           ** CONVERT **
         LTR   R1,R1
         BZ    SIGWRONG           INVALID DATA
         ST    R1,SIGSTART        REMEMBER STARTING POINT
         LA    R0,2               GET LENGTH
         LA    R1,5(R3)           GET NEW START POINT FOR CONVERT
         CALL  JCECVTDB           ** CONVERT **
         LTR   R1,R1
         BZ    SIGWRONG           INVALID DATA
         ST    R1,SIGCOUNT        SAVE COUNT
************************************************************
* AT THIS POINT, WE HAVE THE PARAMETERS NEEDED FOR TEXT
* SUBSTITUTION IN THE OS COMMAND TO BE ISSUED.
************************************************************
         L     R1,SIGCOUNT              GET COUNT FOR EXECUTE
         BCTR  R1,0                     MAKE UP FOR HARDWARE FAULTS
         L     R10,STRSTART             GET START ADDRESS OF TEXT
         L     R5,SIGSTART              GET STARTING POINT
         C     R5,STRLEN                CHECK STARTING POINT
         BH    SIGWRONG                 IF TO HIGH, FORGET IT
         LA    R10,0(R10,R5)            POINT TO STARTING POINT IN WQE
*                                       FOR MOVE.
         BCTR  R10,0                    GET EXACT CORRECT POSTITION
         EX    R1,MOVESIG               MOVE THE STUFF...
         B     AR2
MOVESIG  MVC   0(0,R2),0(R10)
AR2      DS    0H
         A     R2,SIGCOUNT              NEXT CHAR IN CMD BUFFER
         LA    R3,8(R3)                 MOVE PAST \ STUFF IN TSSO TABLE
         SH    R4,=H'9'
         LTR   R4,R4
         BM    SIGWRONG
         B     CMNDLOOP
SIGWRONG DS    0H
         WTO   'TSS9204E ERROR IN DEFINITION (P) FOR NEXT WTO MSG'
         B     PART3EXT
*
SIGONW   DS    0H
         CLI   7(R3),C'\'               TERMINATION FOR W DIRECTIVE
         BNE   SIGWBAD                 SHUCKS
         MVC   SEPCHAR(4),1(R3)        GET SEPARATOR CHARACTERS
         LA    R1,5(R3)                GET START FOR CONVERT RTN
         LA    R0,2
         LA    R10,WORKAREA
         CALL  JCECVTDB                GET DECIMAL
         LTR   R1,R1                   CHECK IT OUT
         BZ    SIGWBAD
         ST    R1,WORDREQ              THIS IS THE REQUESTED WORD
         CH    R1,=H'20'               BUT IS IT OK?
         BH    SIGWBAD                 NO, GUY DIDNT READ THE DOC
************************************************************
* NOW, WE MUST SET UP THE PARSE ROUTINE. THE GENERAL ID IS TO
* PARSE THE WTO MSG INTO USER DEFINED WORDS, AND THEN GET THE ONE
* HE WANTS.
************************************************************
         L     R10,STRSTART       GET ADDRESS OF STRING
         ST    R10,PARS1          THERES OPERAND NUMBER 1
*
         MVC   PARS2(4),STRLEN    LENGTH OF WTO MESSAGES
*
         MVI   PARARRAY,X'40'
         MVC   PARARRAY+1(255),PARARRAY      BLANK OUT PARARRAY
         MVC   PARARRAY+256(LPARRAY-256),PARARRAY               15OCT92
         MVC   PARARRAY(2),=H'20'           MAX OF 20 TOKENS.
         LA    R10,PARARRAY
         ST    R10,PARS3
*
         LA    R10,SEPCHAR
         ST    R10,PARS4
*
         LA    R1,PARSPARM
         CALL  TSSOPARS          ** P A R S E   I T   **
*        MVC   PARARRAY(2),=H'1'
         LH    R10,PARARRAY      HOW MANY DID WE GET BACK
         C     R10,WORDREQ       SEE HOW MANY HE WANTED
         BL    NOWORDS           NOT ENOUGH WORDS.. FORGET IT.
         LA    R10,PARARRAY+2    POINT TO WORD NUMBER 1
         L     R5,WORDREQ        GET WORDS REQUESTED
         BCTR  R5,0
         SLL   R5,4              MULTIPLY BY 16
         LA    R10,0(R5,R10)     POINT TO TOKEN... NOW WE GET LENGTH
         ST    R10,TOKADDR       REMEMBER WHERE TOKEN WAS FOUND.
         XR    R5,R5
         LA    R1,16             TOKENS ARE 16 BYTES LONG
************************************************************
* AT THIS POINT, R10 POINTS TO THE TOKEN RETURNED BY THE PARSE ROUTINE
* THAT THE USER REQUESTED.
************************************************************
WLOOP    DS    0H
         CLI   0(R10),C' '
         BE    ENDTOKEN
         LA    R5,1(R5)
         LA    R10,1(R10)
         BCT   R1,WLOOP
ENDTOKEN DS    0H
         ST    R5,LWORDREQ       STORE LENGTH OF REQUESTED WORD
************************************************************
* AT THIS POINT, WE HAVE ALL THE INFORMATION NEEDED TO DO  *
* THE PARAMETER SUBSTITUTION. R2 POINTS TO THE SPOT TO     *
* SUBSTITUTE.                                              *
************************************************************
         L     R5,LWORDREQ              GET LENGTH OF WORD
         BCTR  R5,0                     MINUS 1 FOR EXECUTE
         L     R10,TOKADDR
         EX    R5,MOVEWORD
         B     AR3
MOVEWORD MVC   0(0,R2),0(R10)
AR3      DS    0H
         A     R2,LWORDREQ
         LA    R3,8(R3)
         SH    R4,=H'9'
         LTR   R4,R4
         BM    SIGWBAD
         B     CMNDLOOP
NOWORDS  DS    0H
         WTO   'TSS9205E NOT ENOUGH TOKENS IN BELOW WTO TO PROCESS'
         B     PART3EXT
SIGWBAD  DS    0H
         WTO   'TSS9206E ERROR PROCESSING W DIRECTIVE- MSG IGNORED'
         B     PART3EXT
SIGLBAD  DS    0H
         WTO   'TSS9208E ERROR PROCESSING L DIRECTIVE- ENTRY IGNORED'
         B     GETNEXT            TRY THE NEXT TSSO/AOF TABLE ENTRY
ISSUECMD DS    0H
         TM    FUN9FLG,X'20'            WAS OSCMD SPECIFIED ?
         BNO   ISSURCMD                GO ISSUE REAL COMMAND
* HERE, WE WILL NOT ISSUE THE COMMAND, BUT WE WILL WTO OUT WHAT THE
* COMMAND WOULD HAVE BEEN
         MVC   WTO1D(WTO1CE-WTO1C),WTO1C
         MVC   WTO1D+13(105),MVSCMD+4
         WTO   MF=(E,WTO1D)           (MSG 207) DEFINED IN THIS MODULE
         B     GETNEXT            TRY THE NEXT TSSO/AOF TABLE ENTRY
*
ISSURCMD DS    0H
         MVC   MVSCMD(2),=H'109'
         MVC   MVSCMD+2(2),=H'0'
         MVC   WTO1D(WTO1CE-WTO1C),WTO1C
         MVC   WTO1D+4(12),=CL12'(TSSO AOF): '   PRIME FOR ECHO
         MVC   WTO1D+16(105),MVSCMD+4
         CLC   AOFECHO,=CL2'NO'                ECHO ON ?
         BE    ECHOOFF1                        NO, GO ISSUE COMMAND
         CLC   AOFECHO,=CL2'LO'                ECHO ON FOR LOGGING ?
         BE    ECHOLOG1
         CLC   AOFECHO,=CL2'YE'                ECHO ON ?
         BE    ECHOYES1
ECHOOFF1 DS    0H
         B     AFTECHO1                        NO ECHO, WHAT A SHAME
*
ECHOYES1 DS    0H
         WTO   MF=(E,WTO1D)        (MSG207)
         B     AFTECHO1                        ECHO TO MASTCONS
*
ECHOLOG1 DS    0H
         MVC   WTL1D(WTL1CE-WTL1C),WTL1C
         MVC   WTL1D+4(12),=CL12'(TSSO AOF): '   PRIME FOR ECHO
         MVC   WTL1D+16(105),MVSCMD+4
         WTL   MF=(E,WTL1D)
         B     AFTECHO1
*
AFTECHO1 DS    0H
         LH    R0,MASTCONS
         LA    R1,MVSCMD
         SVC   34
         B     GETNEXT
FUN9LITE DS    0H
         L     R5,WQEADDR               GET ADDRESS OF THIS WQE
         USING WQE,R5                   GAIN ADDRESSABILITY TO WQE FOR
*                                       HILIGHT
         OI    WQEDC1,WQEDCB            HILITE THE SUCKER
         DROP  R5                       NO LONGER NEED ADDRESSABILITY
*                                       FOR HILIGHT
         B     GETNEXT
*
FUN9LOW  DS    0H
***********************************************************************
* THIS IS THE ROUTINE TO "LOWLITE" A MESSAGE. THE ROUTINE BASICALLY   *
* INTERCEPTS THE MESSAGE, AND FLIPS OFF THE WQEDCA BIT.               *
*                                                                     *
*                                                                     *
***********************************************************************
         L     R5,WQEADDR               GET ADDRESS OF THIS WQE
         USING WQE,R5                   GAIN ADDRESSABILITY TO WQE FOR
*                                       LOW LIGHT
         NI    WQEDC1,255-WQEDCA        (PTF3)
         NI    WQEDC1,255-WQEDCB
         NI    WQEDC1,255-WQEDCC        KILL EVENTUAL ACTION MSG15OCT92
         NI    WQEDC2,255-WQEDCK
         NI    WQEXA,255-WQEWTOR        FAKE OUT COMTASK INTO THINKING
*                                       THE MESSAGE IS NOT A WTOR...
* HILIGHTING CAUSED BY DESCRIPTOR CODES 1, 2 AND 11.
         DROP  R5                       NO LONGER NEED ADDRESSABILITY
         B     GETNEXT
*
FUN9SUPP DS    0H
***********************************************************************
* THIS IS THE SUPPRESS HANDLER. THE SUPPRESS FUNCTION IS PROBABLY THE *
* CLEANEST IN THE WHOLE PRODUCT, BECAUSE SUBSYSTEM CAN CAUSE MESSAGES *
* TO BE SUPPRESSED. NOTE THAT THIS FUNCTION WILL BE INEFFECTIVE FOR   *
* WTOR REQUESTS, HOWEVER, THE LOWLIGHT FUNCTION CAN BE USED.          *
***********************************************************************
         LA    R5,SSWTNDSP              LOAD CODE FOR SUPPRESSION
         STH   R5,FUNC9RC               AND STORE IT AWAY.
         B     GETNEXT                  GET A NEW ENTRY
*
FUN9RPLY DS    0H
***********************************************************************
* THIS IS THE ENTRY POINT FOR THE TSSO AOF REPLY FUNCTION. THE IDEA   *
* HERE IS TO INTERCEPT THE WTOR, FORMAT A REPLY COMMAND OF THE FORM   *
* R NN,MSG-TEXT WHERE NN IS PICKED UP FROM THE ORE (OREID) FIELD.     *
* MSG-TEXT IS PICKED UP FROM THE AOF TABLE. THIS IS USEFULL IN        *
* NUKING OUTSTANDING REPLIES, LIKE IMS. THE REPLY COMMAND CAN THEN BE *
* USED TO REPLY TO THOSE OUTSTANDING MESSAGES.                        *
***********************************************************************
         L     R5,SSWTORE               GET THE OPERATOR REPLY ELEMENT
         LTR   R5,R5                    MAKE SURE..
         BZ    GETNEXT
         USING OREF,R5                  GAIN ADDRESSABILITY TO ORE.
         MVC   REPLY(2),=H'64'
         MVC   REPLY+2(2),=H'0'
         MVC   REPLY+4(6),=CL6'REPLY'
         MVI   REPLYCOM,C','
         MVC   REPLYNUM(2),OREID        MOVE IN AUTOMATIC REPLY NUM
         LH    R1,AOFACTL               PICK UP LENGTH OF REPLY
         BCTR  R1,0
         MVI   REPLYMSG,X'40'
         MVC   REPLYMSG+1(99),REPLYMSG   CLEAR REPLYMSG
         EX    R1,MOVERPLY
         B     AR4
MOVERPLY MVC   REPLYMSG(0),AOFACT          MOVE IN AUTOMATIC REPLY
AR4      DS    0H
***********************************************************************
* THE REPLY DIRECTIVE IS SUPPORTED BY THE ECHO FACILITY. CHECK TO SEE *
* IF THE TABENTRY MACRO SPECIFIED ECHO= ON THE CARD, AND TAKE ACTION  *
***********************************************************************
         MVC   WTO1D(WTO1CE-WTO1C),WTO1C
         MVC   WTO1D+4(12),=CL12'(TSSO AOF): '   PRIME FOR ECHO
         MVC   WTO1D+16(108),REPLY+4
         CLC   AOFECHO,=CL2'NO'                ECHO ON ?
         BE    ECHOOFF2                        NO, GO ISSUE COMMAND
         CLC   AOFECHO,=CL2'LO'                ECHO ON FOR LOGGING ?
         BE    ECHOLOG2
         CLC   AOFECHO,=CL2'YE'                ECHO ON ?
         BE    ECHOYES2
ECHOOFF2 DS    0H
         B     AFTECHO2                        NO ECHO, WHAT A SHAME
*
ECHOYES2 DS    0H
         WTO   MF=(E,WTO1D)
         B     AFTECHO2                        ECHO TO MASTCONS
*
ECHOLOG2 DS    0H
         MVC   WTL1D(WTL1CE-WTL1C),WTL1C
         MVC   WTL1D+4(12),=CL12'(TSSO AOF): '   PRIME FOR ECHO
         MVC   WTL1D+16(105),REPLY+4
         WTL   MF=(E,WTL1D)
         B     AFTECHO2
AFTECHO2 DS    0H
ISSUERPL DS    0H
         LH    R0,MASTCONS              LETS DO REPLY FROM MASTCONS
         LA    R1,REPLY
         SVC   34
         B     GETNEXT
         DROP  R5               DROP ADDRESSABILITY TO OREF
FUN9POST DS    0H
***********************************************************************
* THIS IS THE ENTRY POINT FOR THE TSSO POST ROUTINE, ALLOWING THE     *
* CALLER TO WAIT ON A GIVEN MESSAGE OR AOF ENTRY ID BEFORE BEING      *
* POSTED. THE CALLER WILL BE THE OSWAIT TSO COMMAND, OR (PERHAPS) ITS *
* NCCF EQUIVALENT. STANDARD TSSO ACTION IS THE FOLLOWING:             *
*                                                                     *
* 1) DETERMINE IF THE CURRENT MESSAGE IS ACTIVE. IF NOT, TERMINATE    *
*    IMMEDIATELY.                                                     *
*                                                                     *
* 2) GET THE ADDRESS SPACE, ECB AND PLACE TO PUT THE WTO INTO         *
*    VARIABLES                                                        *
*                                                                     *
* 3) COPY THE WTO INTO THE AOF TABLE ENTRY                            *
*                                                                     *
* 4) POST THE ECB IN THE SPECIFIED ADDRESS SPACE                      *
*                                                                     *
* 5) GO TO NEXT ENTRY.                                                *
*                                                                     *
***********************************************************************
         TM    AOFPFLG,AOFP1WT  IS THIS ENTRY BEING WAITED ON ?
         BNO   END9POST         NO, END OF FUNCTION...
*
         L     R2,AOFPECB       PICK UP ECB TO POST....
         L     R3,AOFPASCB      AND GET THE ADDRESS SPACE.
         L     R4,WQETSADR      GET ADDRESS OF WQE
         MVC   AOFWQE(147),0(R4) COPY TO AOF TABLE
         POST  (R2),X'000',ASCB=(R3),ERRET=END9POST,MF=(E,POST1D)
END9POST DS    0H
         B     GETNEXT
         DROP  R7
         SPACE 2
PART3EXT DS    0H
***********************************************************************
* FINISHED WITH DOING THE AOF PROCESSING OF THE MESSAGE, EXIT NICELY  *
***********************************************************************
         B     FUNC9EXT                 ALL DON SO EXIT
         EJECT ,
GETMERR  DS    0H
***********************************************************************
* THIS CODE IS BRANCHED TO IN CASE OF A GETMAIN ERROR WITHIN          *
* TSSOSS09. THIS WILL OCCUR IF THE CURRENT ADDRESS SPACE SUFFERS      *
* AN 80A OR 878 ABEND. IT IS (PROBABLY) NOT A GOOD IDEA TO ISSUE      *
* A WTO BECAUSE SS09 WOULD GET REDERIVEN BUT STILL BE OUT OF STORAGE  *
***********************************************************************
*        WTO   'TSS9208S SS09 TERMINATING BECAUSE IT CANT GET STORAGE'
         B     FUNC9EX2
FUNC9EXT DS    0H
         LH    R8,FUNC9RC          TEMP STORAGE FOR THE RETURN CODE
         L     R10,SSOBADDR
         USING SSOB,R10
         ST    R8,SSOBRETN
         DROP  R10
         FREEMAIN R,LV=4096,A=(R11)
FUNC9EX2 DS    0H
         LR    R1,R13              GET ADDRESS OF CORE IN R1
         L     R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
FUNC9EX3 DS    0H
         L     R14,12(R13)         RELOAD RETURN POINT
         XR    R15,R15             COPY RC INTO REG 15
         LM    R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR    R14
         TITLE 'LOCATE LINE NUMBER IN MULTI-LINE WTO'
***********************************************************************
* THIS CODE ADDED BY D.H.CARTWRIGHT, SPRECHER ENERGIE, OBERENTFELDEN  *
* CH-5036 SWITZERLAND AS PART OF THE ENHANCEMENT TO ALLOW DATA FROM   *
* MULTI-LINE WTO'S TO BE USED IN OSCMD TEXT. THIS IS PARTICULARLY     *
* NECESSARY FOR VTAM ERRORS DESCRIBED BY THE MLWTO MESSAGE 'IST663I'. *
*                                                                     *
* BASICALLY IT CHECKS THAT WE ARE PROCESSING THE REQUIRED LINE, THEN  *
* ADJUSTS THE STRSTART AND STRLEN VARIABLES SO THAT THE EXISTING      *
* PROCESSING WILL BE SWITCHED TO THE APPROPRIATE LINE OF TEXT.        *
*                                                                     *
* ON ENTRY R2  =  LINE NUMBER REQUIRED                                *
*          R6  =  TEST DEFINITION CONTROL BLOCK                       *
*                                                                     *
* ON EXIT  STRSTART AND STRLEN HAVE BEEN ADJUSTED TO POINT TO THIS WQE*
*    EXIT IS TO R14+4 IF THE LINE HAS BEEN FOUND                      *
*               R14+0 IF THIS IS NOT THE REQUIRED LINE                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
         USING ATSNTRY,R6
SEDOLINE DS    0H                  LOCATE SPECIFIC LINE
         TM    TSSOFLG2,TSSOMON    IS DEBUG TURNED ON ?
         BNO   SEDOLINJ            NO, CHECK MAJOR
         WTO   'A LINE NUMBER HAS BEEN REQUESTED'
SEDOLINJ DS    0H                  PROCESS MAJOR WQE
         L     R10,MAJWQEAD        GET MAJOR BACK...
         USING WMJM,R10            ESTABLISH ADDRESSABILTIY
         TM    WMJMMLW,WMJMMLWB    MAJOR WQE WITH MINORS TO FOLLOW ?
         BNO   SIGLBAD             NOPE, ERROR
         TM    FUN9FLG,X'80'       DO WE HAVE A MINOR WQE?
         BO    SEDOLMIN            YES, GO PROCESS WQE'S
         MVC   ATSSEQ#,WMJMSEQ#    SAVE CONNECT ID
         XR    R1,R1               CLEAR WORK REG.
         STH   R1,ATSLNCNT         CLEAR TEST LINE COUNT
         LA    R1,1                COUNT MAJOR AS FIRST LINE
         CR    R1,R2               IS THIS THE LINE REQUIRED?
         BNE   SEDOLMX             NO, TRY THE MINORS NEXT TIME
         STH   R1,ATSLNCNT         SAVE LINE COUNT
         LA    R1,WMJMTXT+1        POINT TO TEXT (+1 STILL)
         ST    R1,STRSTART         SAVE AS TEXT START
         LH    R1,WMJMTXTL         GET LENGTH OF TEXT
         ST    R1,STRLEN           SAVE TEXT LENGTH
         LA    R1,4                SET RETURN OFFSET
         B     SEDOLINX            GO BACK TO PROCESS
         SPACE 1
SEDOLMIN DS    0H                  NOW PROCESS MINOR WQE'S
         ICM   R15,B'1111',SSWTMIN GET ADDRESS OF MINOR
         BZ    SIGLBAD             ERROR IF NONE
         USING WMNM,R15            ESTABLISH MINOR ADDRESSABILTIY
         LH    R1,ATSLNCNT         GET PREVIOUS LINE COUNT
         SPACE 1
SEDOLM1  DS    0H                  LOOP THROUGH THE LINES
         TM    WMNMML1,WMNMML1C    IS THIS A MINOR WQE?
         BNO   SIGLBAD             NO, ERROR
         CLC   WMNMSEQ1,ATSSEQ#    SAME CONNECT ID?
         BNE   SIGLBAD             NO, ERROR
         LA    R1,1(,R1)           INCREMENT COUNT
         CR    R1,R2               IS THIS THE LINE REQUIRED?
         BNE   SEDOLM2             NO, TRY THE SECOND HALF
         STH   R1,ATSLNCNT         SAVE TEST LINE COUNT
         LA    R1,WMNMTXT1+1       POINT TO TEXT (+1 STILL)
         ST    R1,STRSTART         SAVE AS TEXT START
         SR    R1,R1               CLEAR REGISTER
         IC    R1,WMNMTL1          GET LENGTH OF TEXT
         ST    R1,STRLEN           SAVE TEXT LENGTH
         LA    R1,4                SET RETURN OFFSET
         B     SEDOLINX            GO BACK TO PROCESS
         SPACE 1
SEDOLM2  DS    0H                  PROCESS SECOND HALF OF MINOR WQE
         ICM   R5,B'1111',WMNMNX1  IS THERE A SECOND HALF?
         BZ    SEDOLMX             NO, EXIT
         LA    R1,1(,R1)           YES, INCREMENT COUNT
         CR    R1,R2               IS THIS THE LINE REQUIRED?
         BNE   SEDOLMX             NO, WAIT FOR NEXT MINOR WQE
         STH   R1,ATSLNCNT         SAVE TEST LINE COUNT
         LA    R1,WMNMTXT2+1       POINT TO TEXT (+1 STILL)
         ST    R1,STRSTART         SAVE AS TEXT START
         SR    R1,R1               CLEAR REGISTER
         IC    R1,WMNMTL2          GET LENGTH OF TEXT
         ST    R1,STRLEN           SAVE TEXT LENGTH
         LA    R1,4                SET RETURN OFFSET
         B     SEDOLINX            GO BACK TO PROCESS
         SPACE 1
SEDOLMX  DS    0H                  LINE IS NOT IN THIS MINOR WQE
         STH   R1,ATSLNCNT         SAVE TEST LINE COUNT
         XR    R1,R1               SET RETURN OFFSET TO ZERO
         SPACE 1
SEDOLINX DS    0H                  SUB ROUTINE EXIT
         B     0(R1,R14)           RETURN TO CALLER WITH OFFSET
         DROP  R10                 END MAJOR ADDRESSABILITY
         DROP  R15                 END WQE ADDRESSABILITY
         DROP  R6                  END TSSO AOF TEST BLOCK ADDRESSABTY
         COPY  BSCAN                                            30OCT92
         TITLE 'DATA AREAS'
         LTORG
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
WTO1C    WTO   'TSS9207I                                               X
                                                                       X
                             ',MF=L
WTO1CE   EQU   *
*
WTL1C    WTL   'TSS9207I                                               X
                                                                       X
                             ',MF=L
WTL1CE   EQU   *
*
POST1C   POST  ,ASCB=0,ERRET=0,MF=L
POST1CE  DS    0H
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
FUN9DATA DSECT
WORKAREA DS    CL200            USED FOR CONVERT ROUTINES
***********************************************************************
* RE-ENTRANT MACRO DEFINITIONS...                                     *
*                                                                     *
***********************************************************************
POST1D   POST  ,ASCB=0,ERRET=0,MF=L
***********************************************************************
* VARIABLES USED TO PROCESS REQUESTS OF PART 1 OF THIS ROUTINE, THE   *
* INTERFACE TO THE OSCMD COMMAND.                                     *
*                                                                     *
***********************************************************************
MAJWQEAD DS    F                MAJOR WQE ADDRESS
MINWQEAD DS    F                MINOR WQE ADDRESS
MAJOREAD DS    F                ADDRESS OF AN ORE.
SSOBADDR DS    F                ADDRESS OF THE SSOB
SSWTADDR DS    F                ADDRESS OF THE SSWT FOR THIS SUBSYS CAL
SSCONENT DS    F                IF SS CON ENTRY USED - THIS FIELD HAS
*                               ADDRESS OF SSCON ENTRY FOR IT.
*
*
WQEADDR  DS    A                ADDRESS OF THE WQE WE ARE TRYING
*                               TO DEAL WITH
WQETSADR DS    A                ADDRESS OF TIME STAMP IN THE WQE.
CURTABAD DS    A                CURRENT TSSO/AOF TABLE ADDRESS WE ARE
*                               DEALING WITH
TXTMSG   DS    CL8              FIRST 8 BYTES OF WTO/WTOR
REPLY    DC    H'109',H'0'
         DC    CL6'REPLY '
REPLYNUM DC    CL2' '
REPLYCOM DC    CL1','
REPLYMSG DC    CL100' '
MVSCMD   DC    H'109',H'0'
MVSCMD1  DS    CL105
FUNC9RC  DS    H                RETURN CODE FOR FUNCTION 9.
WTO1D    WTO   'TSS9207I                                               X
                                                                       X
                             ',MCSFLAG=(BRDCST,HRDCPY),MF=L
WTL1D    WTL   'TSS9207I                                               X
                                                                       X
                             ',MF=L
************************************************************
* VARIABLES USED TO PROCESS TEST REQUESTS IN AOF TABLE.
************************************************************
WORD1    DS    F                IF TYPE=SUBSTR  STARTING CHARACTER
*                               IF TYPE=WORD    WORD NUMBER
WORD2    DS    F                LENGTH OF WORD
WORDSEPS DS    CL4              SEPARATOR CHARACTORS FOR WORDS.
STRSTART DS    A                ADDRESS OF FIRST CHARACTER OF WQE
*                               MESSAGE. THIS IS WQETXT+1 IF WTO
*                               AND WQETXT+4 IF WTOR.
STRLEN   DS    A                LENGTH OF WQE MESSAGE
************************************************************
* VARIABLES USED TO PROCESS P DIRECTIVE IN OSCMD REQUEST
************************************************************
SIGSTART DS    F                STARTING ADDRESS OF SIGNIFICANCE
SIGCOUNT DS    F                NUMBER OF CHARACTERS
************************************************************
* PARSE PARAMETERS
************************************************************
PARSPARM DS    0H
PARS1    DS    A
PARS2    DS    A
PARS3    DS    A
PARS4    DS    A
PARARRAY DS    CL2,20CL16  SPACE FOR COUNT AND 20 ITEMS         15OCT92
LPARRAY  EQU   *-PARARRAY                                       15OCT92
************************************************************
* VARIABLES USED TO PROCESS W DIRECTIVE IN OSCMD REQUEST
************************************************************
SEPCHAR  DS    F           SEPARATOR CHARACTERS FOR PARSE
WORDREQ  DS    F
LWORDREQ DS    F
TOKADDR  DS    F           ADDRESS OF REQUESTED TOKEN IN
*                          PARARRAY
************************************************************
* FLAGS USED IN PROCESSING REQUESTS FROM SUBSYSTEM CALL 9
************************************************************
FUN9FLG  DS    X
* X'80'  SSWTMIN ^= 0
* X'40'  SSWTORE ^= 0
* X'20'  OSCMDT WAS SPECIFIED
* X'10'  BSCAN PROCESSING IS DONE
         CVT   DSECT=YES
         IEFJESCT
         IEFJSSVT
         IEFJSCVT
         IEFJSSOB (CM,WT),CONTIG=NO
         TSSOCVT
         TSSOCMND
         TSSONDSA
         TAOFNTRY
         OSCMDICB
         SSCONCBH
         SSCONCB
         IHAWQE
         IHAORE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
************************************************************
* NOTE: PREVIOUS VERSION OF TSSO HAVE BEEN WRITTEN BY:
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC., MCLEAN VA
*        DATE WRITTEN. SEPTEMBER 2 1976.
*        DATE UPDATED. AUGUST 7 1980.
************************************************************
         END  TSSOSS09
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY TSSOSS09(''TSSO 4.3 &SYSDATE &SYSTIME'')'
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' INCLUDE  SYSLMOD(TSSOPARS)'
 PUNCH ' ENTRY    TSSOSS09'
 PUNCH ' NAME     TSSOSS09(R)'
         END
