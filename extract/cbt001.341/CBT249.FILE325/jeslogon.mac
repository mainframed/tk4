JESLOGON CSECT
*
***********************************************************************
*                                                                     *
*                       J E S L O G O N                               *
*                                                                     *
* FUNCTION -                                                          *
*    THIS MODULE IS DESIGNED TO BE THE PROGRAM EXECUTED BY THE TSO    *
*    LOGON PROCESSOR. IT WILL CHANGE THE TSO USER FROM EXECUTION      *
*    UNDER THE PRIMARY SUBSYSTEM TO EXECUTION UNDER ANY OF THE ACTIVE *
*    SUBSYSTEMS.                                                      *
*                                                                     *
* INPUT -                                                             *
*    THE TSO USER IS PROMPTED FOR THE NAME OF THE SUBSYSTEM DESIRED.  *
*    PARAMETERS PASSED BY THE LOGON PROC ARE PASSED ON TO THE TMP     *
*    UNALTERED.                                                       *
*                                                                     *
* OPERATION -                                                         *
*    1) THE TSO USER IS PROMPTED FOR THE SUBSYSTEM NAME THAT HE       *
*       WISHES TO LOG ON TO.                                          *
*    2) IF THE USER SPECIFIED A NULL LINE OR THE NAME OF THE PRIMARY  *
*       SUBSYSTEM, THE TMP IS ATTACHED IMMEDIATELY (IE. GOTO STEP 6). *
*    3) AN SSIB IS BUILT TO INTERFACE TO THE DESIRED SUBSYSTEM.       *
*    4) A SUBSYSTEM REQUEST IS ISSUED FOR "REQUEST JOB ID" FROM THE   *
*       DESIRED SUBSYSTEM TO SET UP THE SJB, ETC.                     *
*    5) THE SSIB POINTER IN THE JSCB IS CHANGED TO POINT TO THE NEW   *
*       SSIB, AND THE ORIGINAL SSIB POINTER IS SAVED.                 *
*    6) IF THE PARAMETERS PASSED TO THE TMP INDICATE THAT THE SESSION *
*       MANAGER IS BEING INVOKED, MODULE ADFMDF03 IS ATTACHED; ELSE   *
*       WE ATTACH IKJEFT01. THIS MODULE THEN WAITS FOR COMPLETION OF  *
*       THE REAL TMP.                                                 *
*    7) WHEN THE TMP TERMINATES, WE RESTORE THE SSIB POINTER IN THE   *
*       JSCB AND ALL THAT STUFF IN THE REVERSE ORDER FROM OUR ENTRY   *
*       CODE.                                                         *
*    8) THE RETURN CODE FROM THE TMP IS PASSED BACK TO THE CALLER AND *
*       JESLOGON TERMINATES.                                          *
*                                                                     *
* RESTRICTIONS -                                                      *
*    1) NO SYSOUT DD CARDS CAN BE INCLUDED IN THE JESLOGON PROC       *
*       BECAUSE ALLOCATIONS WILL BE DONE AGAINST THE PRIMARY          *
*       SUBSYSTEM AND WILL THEREFORE PRODUCE AN 013 ABEND IF AN       *
*       ATTEMPT IS MADE TO ACCESS THEM FROM A SECONDARY.              *
*    2) THE JOBNAME IN THE SECONDARY SUBSYSTEM WILL BE "SYSLOG" DUE   *
*       TO THE WAY IN WHICH "REQUEST JOB ID" SUPPORT FUNCTIONS.       *
*                                                                     *
* NOTES -                                                             *
*    1) ORIGINAL IDEA FOR THIS MODULE WAS SUPPLIED BY JIM VINSON,     *
*       IBM CORP (MANASSAS AT THE TIME). UPDATE AND DEBUG DONE BY     *
*       GEORGE DELANO AND MIKE SHANNON, IBM BURLINGTON (8-) 446-3033. *
*                                                                     *
*       AT SHARE 62 (ANAHEIM 3/84) WE MET MIKE SHANNON AND         WFB*
*       EXPLAINED THAT WE ACQUIRED THIS PROGRAM "IN THE PUBLIC     WFB*
*       DOMAIN". HE IS NOT AWARE OF ANY LEGAL RESTRICTION AGAINST  WFB*
*       REDRISTRIBUTION NOR DOES HE OBJECT TO IT, BUT (AS ALWAYS)  WFB*
*       * * *   U S E   A T   Y O U R   O W N   R I S K   * * *    WFB*
*       THERE IS A SIMILAR PROGRAM DISTRIBUTED WITH THE IBM FDP    WFB*
*       TSO/JES2 BATCH DISPLAY FACILITY. THIS IS NOT THE SAME.     WFB*
*                                                                     *
*    2) LINKAGE EDITOR PARAMETERS AND CONTROL CARDS:                  *
*         PARM.LKED='MAP,LET,LIST,NCAL'                               *
*           ENTRY    JESLOGON                                         *
*           SETCODE  AC(1)                                            *
*           NAME     JESLOGON(R)                                      *
*                                                                     *
*    3) JESLOGON MUST (OBVIOUSLY) BE LINKEDITED INTO AN AUTHORIZED    *
*       SYSTEM LIBRARY ACCESSABLE VIA THE TSO LOGON PROCEDURE.        *
*           SAMPLE:  //TSOPROC PROC                                   *
*                    //TSOPROC EXEC PGM=JESLOGON,DYNAMNBR=...         *
*                                                                     *
*    4) DATE OF LAST UPDATE: 3/13/78 BY GD.                           *
*                                                                     *
***********************************************************************
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
SSOBR    EQU   8
SSIBR    EQU   9
BASEREG  EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         USING *,BASEREG
         SAVE  (14,12),,JESLOGON.&SYSDATE
         SPACE
         LR    BASEREG,R15
         LR    R11,R1                  SAVE PARM
         SPACE
         LA    R0,DSALEN
         GETMAIN R,LV=(0)
         ST    R13,4(R1)               SAVE HIGHER LEVEL SAVE AREA
         ST    R1,8(R13)               CHAIN OUR SAVE AREA TO IT
         LR    R13,R1
         USING DSA,R13
         SPACE
         MVI   DSAFLG,0                INIT FLAG
         EJECT
*        GET CORE FOR AND BUILD SSIB
         SPACE
         MODESET MODE=SUP
         SPACE
         GETMAIN R,LV=SSIBSIZE,SP=255  GET NEW SSIB
         LR    SSIBR,R1
         USING SSIB,SSIBR
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
         XC    SSIB(SSIBSIZE),SSIB     CLEAR SSIB
         MVC   SSIBID,=C'SSIB'
         MVI   SSIBLEN+1,SSIBSIZE
         MODESET KEYADDR=(2)           RESTORE KEY
         EJECT
*        BUILD SSOB
         SPACE
         LA    SSOBR,DSASSOB           PLACE TO BUILD SSOB
         USING SSOB,SSOBR
         XC    SSOB(SSOBLENE),SSOB     CLEAR SSOB
         MVC   SSOBID,=C'SSOB'         IDENTIFY IT
         MVI   SSOBLEN+1,SSOBHSIZ      SET HEADER LENGTH
         MVI   SSOBFUNC+1,SSOBRQST     SET TO REQUEST JOB ID
         ST    SSIBR,SSOBSSIB          SET SSIB ADDRESS
         SPACE
         LA    R1,SSRRLEN              ADDRESS OF EXTENSION
         ST    R1,SSOBINDV             SET IN SSOB HEADER
         MVI   SSRRLEN+1,SSRRSIZE      SET EXTENSION SIZE
         SPACE
         LA    R1,DMYECB               DUMMY ECB
         XC    DMYECB,DMYECB           CLEAR DUMMY ECB
         ST    R1,SSRRSECB             SET AS STOP ECB
         SPACE
         ST    SSOBR,SSREQPRM          SAVE AS PARM
         SPACE
         MVI   SSREQPRM,X'80'          END OF PARM LIST
         EJECT
ENTERIT  TPUT  MSG1,L'MSG1
         SPACE
         LTR   R15,R15
         BNZ   ERR1
         SPACE
         LA    R1,JESNAME
         TGET  (R1),L'JESNAME
         SPACE
         LTR   R15,R15
         BZ    GOODTGET
         C     R15,=F'12'              REPLY TOO LONG?
         BE    BADTGET                 ADMONISH USER IF SO,
         B     ERR1                    ELSE ERROR
         SPACE
GOODTGET LTR   R1,R1                   WAS REPLY NULL?
         BZ    NOCHNG                  IF SO, DEFAULT TO PRIMARY
         SPACE
         OC    JESNAME,=CL4' '         CHANGE TO UPPER CASE
         C     R1,=F'4'                WAS REPLY LENGTH 4?
         BNE   BADTGET                 SLAP USERS HANDS ONE TIME
         SPACE
         L     R1,16                   CVTP
         L     R1,0(R1)                TCB/TCBP
         L     R1,4(R1)                TCBP
         L     R1,124(R1)              JSTCB
         L     R1,X'B4'(R1)            PT TO JSCB
         L     R1,X'13C'(R1)           GET OLD SSIBPTR
         CLC   JESNAME,SSIBSSNM-SSIB(R1) USER PICK PRIMARY SUBSYSTEM?
         BE    NOCHNG                  YES, LOGON TO PRIMARY
         EJECT
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
         MVC   SSIBSSNM,JESNAME        COPY SUBSYSTEM NAME TO SSIB
         MODESET KEYADDR=(2)           RESTORE KEY
         SPACE
         LA    R1,SSREQPRM             SET UP FOR IEFSSREQ
         IEFSSREQ
         SPACE
         C     R15,=A(SSRTNTUP)        CHECK FOR NOT UP
         BE    BADTGET1                IGNORE IF NOT UP
         SPACE
         C     R15,=A(SSRTNOSS)        CHECK FOR INVALID NAME
         BE    BADTGET2                IGNORE IF SUBSYS DOES NOT EXIST
         SPACE
         C     R15,=A(SSRTOK)          CHECK FOR OK
         BNE   ERR1                    B IF NOT
         SPACE
         CLI   SSOBRETN+3,SSRROK       REQUEST OK?
         BNE   ERR1                    B IF NOT
         EJECT
*        NOW CHANGE JSCBSSIB TO POINT TO THE NEW SSIB
         SPACE
         L     R3,16                   CVTP
         L     R3,0(R3)                TCB/TCBP
         L     R3,4(R3)                TCBP
         L     R3,124(R3)              JSTCB
         L     R5,X'B4'(R3)            PT TO JSCB
         L     R3,X'13C'(R5)           GET OLD SSIBPTR
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
         ST    SSIBR,X'13C'(R5)        SET NEW SSIBPTR
         OI    DSAFLG,SETSSIBP         FLAG THIS FACT
         MODESET KEYADDR=(2)
         SPACE
         ST    R3,SAVESSIB             SAVE SSIBPTR FOR RESTORE
         ST    R5,JSCBPTR              SAVE ADDRESS OF JSCB
         EJECT
*        NOW ATTACH THE NORMAL TERMINAL MONITOR PGM
         SPACE
NOCHNG   LA    R2,=CL8'IKJEFT01'       ASSUME NORMAL TMP
         LR    R1,R11                  RESTORE PARM ADDRESS
         L     R14,0(R1)               GET PTR TO INPUT PARAMETERS
         LH    R0,0(R14)               GET PARAMETER LENGTH
         LTR   R0,R0                   WAS THERE A PARAMETER?
         BZ    ATTACHIT                ATTACH NORMAL TMP IF NOT
         CLC   =C'SM(',2(R14)          TEST FOR SESSION MANAGER
         BNE   ATTACHIT                ATTACH NORMAL TMP IF NOT
         LA    R2,=CL8'ADFMDF03'       CHANGE ATTACH TO SESSION MGR.
ATTACHIT LA    R3,DMYECB               POINT TO ECB
         MVC   ATTACH(ATTACHLL),ATTACHL  COPY ATTACH CONTROL LIST
         ATTACH EPLOC=(R2),ECB=(R3),SF=(E,ATTACH)
         SPACE
         ST    R1,TCBADDR              SAVE TCB ADDRESS
         SPACE
         XC    DMYECB,DMYECB           CLEAR ECB
         WAIT  1,ECB=DMYECB            WAIT FOR RETURN
         SPACE
         LA    R1,TCBADDR              GET TCB ADDRESS
         DETACH (1)                    DETACH TMP
         EJECT
         TM    DSAFLG,SETSSIBP         DID WE CHANGE SSIBPTR
         BNO   DNCHNG
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
         L     R5,JSCBPTR
         MVC   X'13C'(4,R5),SAVESSIB   RESET SSIB
         MODESET KEYADDR=(2)
         SPACE
         MVI   SSOBFUNC+1,SSOBRTRN     SET TO RETURN JOB ID
         LA    R1,SSREQPRM             SET UP FOR IEFSSREQ
         IEFSSREQ
         EJECT
DNCHNG   FREEMAIN R,LV=SSIBSIZE,SP=255,A=(SSIBR)  FREE THE SSIB
         SPACE
         LA    R0,DSALEN               SIZE OF CORE TO FREE
         LR    R1,R13                  ADDR OF CORE TO FREE
         L     R4,DMYECB               GET RETURN CODE
         L     R13,4(R13)              GET CALLERS R13
         FREEMAIN R,LV=(0),A=(1)
         SPACE
         MODESET MODE=PROB
         SPACE
         LA    R15,0(R4)               SET RETURN CODE
         RETURN (14,12),RC=(15)        RETURN TO CALLER
         EJECT
BADTGET1 TPUT  MSG3,L'MSG3
         SPACE
         LTR   R15,R15
         BNZ   ERR1
         SPACE
         B     ENTERIT
         SPACE
BADTGET2 TPUT  MSG4,L'MSG4
         SPACE
         LTR   R15,R15
         BNZ   ERR1
         SPACE
         B     ENTERIT
         SPACE
BADTGET  TPUT  MSG2,L'MSG2
         SPACE
         LTR   R15,R15
         BNZ   ERR1
         SPACE
         B     ENTERIT
         SPACE
ERR1     STM   R14,R1,ERRREGS          SAVE R14 THRU R1 FROM ABEND
         ABEND 1,DUMP,STEP
         EJECT
MSG1     DC    C'ENTER SUBSYSTEM NAME OR NULL LINE'
MSG2     DC    C'SUBSYSTEM NAME MUST BE FOUR CHARACTERS...'
MSG3     DC    C'SUBSYSTEM NAME VALID BUT NOT ACTIVE'
MSG4     DC    C'SUBSYSTEM DOES NOT EXIST'
         SPACE 2
ATTACHL  ATTACH RSAPF=YES,SF=L
ATTACHLL EQU   *-ATTACHL
         SPACE 2
         LTORG
         EJECT
DSA      DSECT
         DS    18F
ERRREGS  DS    4F                      STM R14,R1 PRIOR TO ABEND
SAVESSIB DS    A
JSCBPTR  DS    A
TCBADDR  DS    F                       ATTACHED TASK TCB ADDRESS
JESNAME  DS    CL4                     SUBSYSTEM NAME
DMYECB   DS    F'0'                    ECB FOR WAIT AFTER ATTACH
SSREQPRM DS    A
DSAFLG   DC    X'00'
SETSSIBP EQU   X'80'                   ON MEANS CHANGED SSIB IN JSCB
         DS    0F
ATTACH   ATTACH RSAPF=YES,SF=L
         DS    0D
DSASSOB  DS    XL(SSOBLENE)
DSAEND   DS    0D
DSALEN   EQU   *-DSA
         EJECT
         IEFJSSIB
         EJECT
         IEFJSSOB RR,CONTIG=YES
         SPACE 2
         PRINT NOGEN
         CVT
         IEFJESCT
         END
         PUNCH ' ENTRY JESLOGON'
         PUNCH ' SETCODE AC(1)'
         PUNCH ' NAME JESLOGON(R)'
         END
