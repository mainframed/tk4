*              /* LEVEL=0001                                         */
*PROCESS X,A,AG,S,STG,LIST,NEST,F(I),LMSG,MAP,ESD,OPT(2),OF;
 XXSUMRW: /* SUM ROWS OF A VIRTUAL ARRAY */
   PROC(ARRAY_POINTERS, VIRTUAL_MATRIX, VECTOR, TOP_BOUND)
   OPTIONS(REENTRANT) REORDER;
 %SKIP(4);
 /********************************************************************/
 /*   XXSUMRW TAKES A SPARSE ARRAY DESCRIBED BY ARRAY_POINTERS AND   */
 /*   VIRTUAL_MATRIX AND RETURNS IN VECTOR THE SUMS OF THE ROWS.     */
 /*   ARRAY_POINTERS IS AN ARRAY OF INDICES POINTING AT THE          */
 /*   ELEMENTS OF VIRTUAL_MATRIX WHICH ARE THE HEADS OF THE CHAINS   */
 /*   OF THE ELEMENTS IN EACH ROW.                                   */
 /*                                                                  */
 /*   WITHIN VIRTUAL_MAXRIX, THE VALUES OF THE ELEMENTS ARE GIVEN    */
 /*   BY THE SUBELEMENT VALUE, THE COLUMN NUMBER, REPRESENTING THE   */
 /*   'TO' CYLINDER NUMBER BY THE SUBELEMENT CYLINDER_#, AND THE     */
 /*   INDEX OF THE NEXT ENTRY IN THE CHAIN BY NEXT_CYLINDER. THE     */
 /*   END OF THE CHAIN IS SIGNALLED BY THE NEXT_CYLINDER FIELD       */
 /*   BEING ZERO.                                                    */
 /********************************************************************/
 /*   LEVL(0001)  6 MARCH 1979.  CHANGES:                            */
 /*   COMPLETELY REWRITTEN TO USE NEW SPARSE ARRAY ALLOCATION        */
 /*   SCHEME FOR THE SEEK ANALYSIS MATRIX.                           */
 /********************************************************************/
 /* WRITTEN BY    JOHN H LISTER,                                     */
 /*               TECHNICAL SERVICES GROUP,                          */
 /*               DATA PROCESSING DEPARTMENT,                        */
 /*               NATIONAL WESTMINSTER BANK,                         */
 /*               GOODMANS FIELDS COMPUTER CENTRE,                   */
 /*               74 ALIE STREET, LONDON   E1 8HL.                   */
 /*                                                                  */
 /*               TELEPHONE: 01-488 0707 EXT 2766.                   */
 /********************************************************************/
 %SKIP(4);
   DEFAULT
      RANGE(*) FIXED;                  /* NO FLOATS PLEASE - WE'RE
                                       BRITISH */
 %SKIP(4);
 /* PARAMETERS */
 %SKIP;
   DCL
      ARRAY_POINTERS(0:827) FIXED BIN(15) CONNECTED;/* INDICES
                                       POINTING TO THE START OF THE
                                       CHAINS IN VIRTUAL_MATRIX OF THE
                                       ENTRIES FOR EACH CYLINDER. IF
                                       THE ENTRY DOES NOT EXIST THEN
                                       ARRAY_POINTERS(ENTRY) IS -1 */
   DCL
      1 VIRTUAL_MATRIX(*) CONN,        /* VIRTUAL MATRIX FOR SEEK
                                       ANALYSIS */
         2 CYLINDER_# BIN(15),         /* NUMBER OF THIS CYLINDER
                                       (COLUMN ENTRY) */
         2 VALUE BIN(15),              /* MATRIX ENTRY - IE NUMBER OF
                                       SEEKS FROM ARRAY_POINTERS(I)
                                       '->' CYLINDER_#(J) */
         2 NEXT_CYLINDER BIN(15);      /* INDEX OF NEXT CYLINDER ALONG
                                       IN THE ROW OR -1 IF THERE ISN'T
                                       ONE */
   DCL
      VECTOR(*) BIN(15) CONNECTED;     /* ARRAY TO RETURN THE ROW SUMS
                                       */
   DCL
      TOP_BOUND BIN(15);               /* UPPER BOUND OF VECTOR */
 %SKIP(4);
 /* LOCAL VARIABLES */
 %SKIP;
   DCL
      SUMTEMP BIN(15),                 /* TEMPORARY TO HOLD
                                       ACCUMULATED SUM */
      LOOK_AT_CYLINDER BIN(15),        /* INDEX DOWN VIRTUAL_MATRIX
                                       POINTING ALONG CHAIN FOR THIS
                                       ROW */
      LOOP BIN(15);                    /* LOOP COUNTER DOWN THE ROWS
                                       OF THE MATRIX */
 %SKIP(4);
      DO LOOP = 0 TO TOP_BOUND;
         SUMTEMP=0;                    /* ZEROISE ACCUMULATOR */
         LOOK_AT_CYLINDER=ARRAY_POINTERS(LOOP);/* FIRST ELEMENT IN ROW
                                       CHAIN */
         DO WHILE(LOOK_AT_CYLINDER ^= -1);
            SUMTEMP=SUMTEMP+VALUE(LOOK_AT_CYLINDER);/* ACCUMULATE SUM */
            LOOK_AT_CYLINDER=NEXT_CYLINDER(LOOK_AT_CYLINDER);/* CHAIN
                                       DOWN TO NEXT ITEM */
         END;
         VECTOR(LOOP)=SUMTEMP;         /* PUT ACCUMULATED SUM IN
                                       OUTPUT VECTOR */
      END;
      RETURN;
   END;
