*              /* LEVEL=0001                                         */
*PROCESS X,A,AG,S,STG,LIST,NEST,F(I),LMSG,MAP,ESD,OPT(2),OF;
 XXPARTM: /* PARTITION AN ARRAY */
   PROC(ITEMS,KEYS,QUANTILE,BOUND) OPTIONS(REENTRANT) REORDER;
 %SKIP(4);
 /********************************************************************/
 /*  XXPARTM PARTITIONS THE ARRAYS ITEMS AND KEYS SO THAT THE ITEMS  */
 /*  0-QUANTILE-1 ARE THOSE ITEMS WITH THE HIGHEST KEYS. NOTE THAT A */
 /*  COMPLETE SORT IS NOT PERFORMED.                                 */
 /*  THIS ALGORITHM IS DUE TO C A R HOARE & DETAILS MAY BE FOUND IN  */
 /*  COMMUNICATIONS OF THE ACM VOL 13, (1970) NO 1, PP 39-45.        */
 /********************************************************************/
 /*   LEVL(0001)  25 APRIL 1979.                                     */
 /*   PARTITION STEP REWRITTEN TO AVOID LOOPING WHEN                 */
 /*   A LARGE NUMBER OF THE PARTITION ITEMS ARE EQUAL.               */
 /********************************************************************/
 /*   LEVL(0000)  26 JANUARY 1979.                                   */
 /********************************************************************/
 /* WRITTEN BY    JOHN H LISTER,                                     */
 /*               TECHNICAL SERVICES GROUP,                          */
 /*               DATA PROCESSING DEPARTMENT,                        */
 /*               NATIONAL WESTMINSTER BANK,                         */
 /*               GOODMANS FIELDS COMPUTER CENTRE,                   */
 /*               74 ALIE STREET, LONDON   E1 8HL.                   */
 /*                                                                  */
 /*               TELEPHONE: 01-488 0707 EXT 2766.                   */
 /********************************************************************/
 %SKIP(4);
 /* PARAMETERS */
 %SKIP;
   DCL
      BOUND FIXED BIN(15),             /* HBOUND OF ITEMS, KEYS */
      (ITEMS,
      KEYS)(*) FIXED BIN(15) CONN,     /* ITEMS - THE DATA TO BE
                                       PARTITIONED ACCORDING TO THE
                                       KEYS KEYS */
      QUANTILE FIXED BIN(15);          /* THE INDEX FOR PARTITIONING */
 %SKIP(4);
 /* LOCAL VARIABLES */
 %SKIP;
   DCL
      (LEFT,
      RIGHT,
      L1,
      R1) FIXED BIN(15);               /* USED TO HOLD CURRENT VALUES
                                       OF THE PART OF THE ARRAY THAT
                                       IS STILL OF INTEREST */
   DCL
      COMP FIXED BIN(15);              /* COMP - USED TO HOLD
                                       PARTITIONING VALUE FOR
                                       COMPARISON */
   DCL
      (DUPLEFTKEYS,
      DUPRIGHTKEYS) BIT(1) ALIGNED;    /* FLAGS - ON => LEFT/RIGHT
                                       SUB-PARTITIONS HAVE ITEMS WITH
                                       KEYS EQUAL TO THE COMPRISON
                                       ITEM'S KEY */
   DCL
      FORNEXT BIT(1) ALIGNED;          /* TEMPORARY FLAG TO HOLD VALUE
                                       OF DUP(LEFT/RIGHT)KEYS FOR
                                       ALTERATION NEXT PASS THROUGH.
                                       (SEE LOOP COMMENTS FURTHER DOWN
                                       FOR DETAILS */
   DCL
      (LEFTEQMIDDLE,
      RIGHTEQMIDDLE) BIT(1) ALIGNED;   /* FLAGS - ON => LEFT/RIGHT
                                       HAND SCAN HAS REACHED THE
                                       COMPARISON ITEM */
   DCL
      (SUB_PARTITION_L,
      SUB_PARTITION_R) FIXED BIN(15);  /* INDICES TO SUB-PARTITIONS */
   DCL
      (TEMPITEM,
      TEMPKEY) FIXED BIN(15);          /* TEMPORARIES FOR EXCHANGING
                                       ITEMS/KEYS */
   DCL
      TEMPXCH FIXED BIN(15);           /* TEMPORARY TO HOLD INDEX OF
                                       ITEM TO BE EXCHANGED WHEN
                                       MIDDLE IS REACHED */
   DCL
      (MIDDLE,                         /* INDEX OF ITEM WHICH IS BEING
                                       USED AS THE COMPARISON ITEM */
      SPACE) FIXED BIN(15);            /* TEMPORARY TO HOLD SPACE
                                       BETWEEN THE TWO INDICES L1 AND
                                       R1 AS THE AMOUNT OF ARRAY NOT
                                       YET SCANNED */
   DCL
      ORD BIT(1) ALIGNED;              /* FLAG - ON => NEITHER OF THE
                                       TWO SCANS HAS REACHED THE
                                       MIDDLE OF THE ARRAY, OFF => ONE
                                       OR BOTH OF THE SCANS HAS
                                       REACHED THE MIDDLE */
 %PAGE;
      LEFT=0;
      RIGHT=BOUND;                     /*INITIAL VALUES FOR COMPARISON
                                       */
      DO WHILE(LEFT < RIGHT );
         COMP=KEYS(QUANTILE-1);        /* FIRST COMPARISON VALUE
                                       CHOSEN */
         MIDDLE=QUANTILE-1;            /* INDEX OF COMPARISON VALUE */
         L1=LEFT;
         R1=RIGHT;
         DO;                           /* PARTITION STEP */
            DUPLEFTKEYS,DUPRIGHTKEYS='0'B;/* HAVE NOT FOUND DUPLICATE
                                       KEYS ON THIS SCAN YET */
 SCAN_LOOP:
            DO WHILE('1'B);            /* KEEP DOING THIS LOOP UNTIL
                                       BOTH POINTERS REACH THE
                                       'MIDDLE' OF THE ARRAY - NOTE
                                       THAT THE VALUE OF THE 'MIDDLE'
                                       WILL CHANGE IF THERE ARE MORE
                                       RECORDS WITH KEYS LESS THAN THE
                                       KEY OF THE MIDDLE RECORD */
               LEFTEQMIDDLE,RIGHTEQMIDDLE='0'B;/* NEITHER OF THE SCANS
                                       HAS REACHED THE MIDDLE YET */
               ORD='1'B;               /* ORD IS A FLAG AS TO WHETHER
                                       ONE OR OTHER OF THE POINTERS
                                       HAS REACHED THE MIDDLE VALUE
                                       YET AND SO THEREFORE WHETHER
                                       SPECIAL ACTION NEEDS TO BE
                                       TAKEN */
               FORNEXT='0'B;           /* SET EQUAL KEY FLAG OFF */
               DO L1 = L1 BY 1 TO MIDDLE;/* SCAN LEFT HAND PART OF THE
                                       ARRAY FROM THE OUTSIDE INWARDS */
                  DUPLEFTKEYS=DUPLEFTKEYS×FORNEXT;/* AS THE ARRAY IS
                                       SCANNED, A TEST IS MADE TO SEE
                                       IF THERE ARE ANY MORE RECORDS
                                       WITH KEYS EQUAL TO THE
                                       PARTITION ITEM'S KEY. HOWEVER,
                                       THE COUNT NEEDS TO BE KEPT ONE
                                       BEHIND AS THE MIDDLE VALUE
                                       WHICH IS THE ITEM WHOSE KEY IS
                                       BEING USED FOR COMPARISON WILL
                                       OBVIOUSLY HAVE AN EQUAL KEY,
                                       WHICH WOULD MEAN THAT THE
                                       DUPLICATE KEY ROUTINE, WHICH IS
                                       EXECUTED AFTER THE PARTITION TO
                                       CLUMP ALL THE DUPLICATE KEYS
                                       INTO THE MIDDLE WOULD BE CALLED
                                       EVERY TIME NOT JUST WHEN THERE
                                       ARE EQUAL KEYS */
                  FORNEXT=(KEYS(L1)=COMP);/* SET FLAG TO INDICATE
                                       WHETHER THESE ITEMS HAVE
                                       DUPLICATE COMPARISON KEYS - SEE
                                       ABOVE */
                  IF KEYS(L1) < COMP THEN
                     GOTO SCANRIGHT;   /* FOUND AN ELEMENT SMALLER
                                       THAN THE COMPARAND ELEMENT */
               END;
               LEFTEQMIDDLE='1'B;      /* OTHERWISE, IF WE DROP OUT OF
                                       THE BOTTOM OF THE LOOP THEN
                                       WE'VE REACHED THE MIDDLE OF THE
                                       ARRAY */
               L1=MIDDLE;              /* THE VALUE OF L1 WHEN WE DROP
                                       OUT OF THE BOTTOM WILL BE
                                       MIDDLE+1. RESET */
               ORD='0'B;               /* WE'VE REACHED THE MIDDLE OF
                                       THE ARRAY WITH THE LEFT HAND
                                       SCAN, SO SET FLAG TO INDICATE
                                       THAT THE SPECIAL ACTION WILL
                                       HAVE TO BE TAKEN */
 SCANRIGHT:
               FORNEXT='0'B;           /* TURN DUPLICATE KEY FLAG OFF */
               DO R1 = R1 BY -1 TO MIDDLE;/* SCAN RIGHT HAND PART OF
                                       THE ARRAY FROM THE OUTSIDE
                                       INWARDS */
                  DUPRIGHTKEYS=DUPRIGHTKEYS×FORNEXT;/* SET DUPLICATE
                                       KEY FLAG A ACCORDING TO LAST
                                       TIME ROUND (SEE EXPLANATION IN
                                       LEFT HAND SCAN COMMENTS) */
                  FORNEXT=(KEYS(R1)=COMP);/* SET IT FOR NEXT TIME */
                  IF KEYS(R1) > COMP THEN
                     GOTO POSXCHNGE;   /* FOUND AN ITEM LARGER THAN
                                       THE COMPARISON ITEM */
               END;
               RIGHTEQMIDDLE='1'B;     /* OTHERWISE, IF WE DROP OUT OF
                                       THE BOTTOM OF THE LOOP THEN
                                       WE'VE REACHED THE MIDDLE OF THE
                                       ARRAY */
               R1=MIDDLE;
               ORD='0'B;               /* WE'VE REACHED THE MIDDLE */
 %SKIP(2);
 POSXCHNGE:
               IF (LEFTEQMIDDLE & RIGHTEQMIDDLE) THEN
                  LEAVE;               /* BOTH LEFT AND RIGHT HAVE
                                       REACHED THE CENTRE OF THE ARRAY
                                       SO WE'RE DONE */
               TEMPKEY=KEYS(L1);       /* OTHERWISE EXCHANGE THE KEYS */
               KEYS(L1)=KEYS(R1);
               KEYS(R1)=TEMPKEY;
               TEMPITEM=ITEMS(L1);     /* AND EXCHANGE THE ITEMS */
               ITEMS(L1)=ITEMS(R1);
               ITEMS(R1)=TEMPITEM;
               IF ORD THEN
                  DO;                  /* HAVEN'T REACHED THE MIDDLE
                                       WITH EITHER OF THE SCANS YET,
                                       SO KEEP ON GOING */
                     L1=L1+1;
                     R1=R1-1;
                  END;
               ELSE
                  DO;                  /* HAVE REACHED THE MIDDLE, SO
                                       SHIFT THE MIDDLE ITEM */
                     SPACE=R1-L1;      /* DIFFERENCE BETWEEN INDICES
                                       OF ITEMS */
                     IF SPACE=1 THEN
                        DO;            /* DIFFERENCE IS 1, ITEMS ARE
                                       THEREFORE NEXT TO EACH OTHER
                                       AND SO WILL BE IN THE RIGHT
                                       ORDER ALREADY */
                           IF LEFTEQMIDDLE THEN
                              MIDDLE,L1=R1;/* LEFT HAND SCAN REACHED
                                       MIDDLE. MIDDLE ITEM WAS
                                       XCHANGED WITH RIGHT HAND VALUE.
                                       MIDDLE ITEM (THE COMPARAND TEM
                                       IS NOW AT THE R1 POSITION, SO
                                       SET ALL THE INDICES TO THE
                                       IDDLE POSITION TO INDICATE THAT
                                       THE PARTITION SCANS ARE DONE */
                           ELSE
                              MIDDLE,R1=L1;/* OTHERWISE THE REVERSE
                                       HAPPENED AND RIGHT HAND SCAN
                                       HAS REACHED THE MIDDLE. MIDDLE
                                       VALUE IS NOW AT THE L1 POSITION
                                       */
                           LEAVE SCAN_LOOP;/* FINISHED THE SCANS */
                        END;
                     IF LEFTEQMIDDLE THEN
                        DO;            /* LEFT SCAN HAS REACHED THE
                                       MIDDLE. EXCHANGE HAS TAKEN
                                       MIDDLE ELEMENT AND PUT IT IN
                                       THE R1 POSITION. EXCHANGE ITEMS
                                       R1 AND (L1+R1)/2 AND UPDATE
                                       MIDDLE POINTER */
                           TEMPXCH=R1;
                        END;
                     ELSE
                        DO;            /* MUST BE RIGHT SCAN REACHING
                                       THE MIDDLE - EXCHANGE HAS
                                       TRANSFERRED MIDDLE ELEMENT TO
                                       INDEX L1 - SO SET TEMPXCH TO L1
                                       TO EXCHANGE IT WITH THE ELEMENT
                                       MIDWAY BETWEEN L1 AND R1 */
                           TEMPXCH=L1;
                        END;
                     MIDDLE=(L1+R1)/2; /* NEW MIDDLE VALUE */
                     TEMPKEY=KEYS(TEMPXCH);/* EXCHANGE KEYS */
                     KEYS(TEMPXCH)=KEYS(MIDDLE);
                     KEYS(MIDDLE)=TEMPKEY;
                     TEMPITEM=ITEMS(TEMPXCH);/* EXCHANGE ITEMS */
                     ITEMS(TEMPXCH)=ITEMS(MIDDLE);
                     ITEMS(MIDDLE)=TEMPITEM;
                     LEFTEQMIDDLE,RIGHTEQMIDDLE,ORD= '0'B;
                  END;
            END;                       /* OF OUTERLOOP */
            SUB_PARTITION_L=MIDDLE-1;  /* SET DEFAULT VALUES FOR TOP
                                       AND BOTTOM INDICES OF THE
                                       SUB-PARTITIONS */
            SUB_PARTITION_R=MIDDLE+1;
            IF DUPLEFTKEYS THEN
               DO;                     /* DUPLICATE KEYS IN LEFT HAND
                                       SCAN, SO SORT THEM OUT */
                  DO L1 = MIDDLE BY -1 TO LEFT;/* FIRST FIND OUT IF
                                       ALL THE KEYS ARE THE SAME */
                     IF KEYS(L1) ^= COMP THEN
                        GOTO XLEFT;    /* FOUND A NON-DUPLICATE KEY */
                  END;
                  L1=LEFT;             /* SET L1 TO BOTTOM INDEX */
                  LEAVE;               /* ALL DUPLICATE LEFT KEYS */
 XLEFT:
                  SUB_PARTITION_L=L1;  /* NEXT SPACE AVAILABLE FOR
                                       SWAPPING KEYS */
                  DO L1 = SUB_PARTITION_L TO LEFT BY -1;
                     IF KEYS(L1) = COMP THEN
                        DO;            /* DUPLICATE KEYS, EXCHANGE */
                           TEMPKEY=KEYS(SUB_PARTITION_L);
                           KEYS(SUB_PARTITION_L)=KEYS(L1);
                           KEYS(L1)=TEMPKEY;
                           TEMPITEM=ITEMS(SUB_PARTITION_L);
                           ITEMS(SUB_PARTITION_L)=ITEMS(L1);
                           ITEMS(L1)=TEMPITEM;
                           SUB_PARTITION_L= SUB_PARTITION_L-1;
                        END;
                  END;
               END;
            IF DUPRIGHTKEYS THEN
               DO;                     /* DUPLICATE KEYS IN RIGHT HAND
                                       SCAN, SO SORT THEM OUT */
                  DO R1 = MIDDLE BY 1 TO RIGHT;/* FIRST FIND OUT IF
                                       ALL THE KEYS ARE THE SAME */
                     IF KEYS(R1) ^= COMP THEN
                        GOTO XRIGHT;   /* FOUND A NON-DUPLICATE KEY */
                  END;
                  R1=RIGHT;            /* RESET R1 */
                  LEAVE;               /* ALL DUPLICATE RIGHT KEYS */
 XRIGHT:
                  SUB_PARTITION_R=R1;  /* NEXT SPACE AVAILABLE FOR
                                       SWAPPING KEYS */
                  DO R1 = SUB_PARTITION_R+1 TO RIGHT BY 1;
                     IF KEYS(R1) = COMP THEN
                        DO;            /* DUPLICATE KEYS, EXCHANGE */
                           TEMPKEY=KEYS(SUB_PARTITION_R);
                           KEYS(SUB_PARTITION_R)=KEYS(R1);
                           KEYS(R1)=TEMPKEY;
                           TEMPITEM=ITEMS(SUB_PARTITION_R);
                           ITEMS(SUB_PARTITION_R)=ITEMS(R1);
                           ITEMS(R1)=TEMPITEM;
                           SUB_PARTITION_R= SUB_PARTITION_R+1;
                        END;
                  END;
               END;
 %SKIP(4);
         END;                          /* OF PARTITION LOOP */
         IF SUB_PARTITION_L < (QUANTILE-1) THEN
            LEFT=SUB_PARTITION_R;
         IF SUB_PARTITION_R > (QUANTILE-1) THEN
            RIGHT=SUB_PARTITION_L;
      END;
      RETURN;
   END;
