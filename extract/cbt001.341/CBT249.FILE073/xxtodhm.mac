*              /* LEVEL=0000                                         */
*PROCESS X,A,AG,S,STG,LIST,NEST,F(I),LMSG,MAP,ESD,OPT(2),OF;
 XXTODHM: /*TIME-OF-DAY CLOCK HANDLING ROUTINES*/
   PROC(TIMESTAMP,DATEREC) RETURNS(CHAR(12)) OPTIONS(REENTRANT)
   REORDER;
 %SKIP(4);
 /********************************************************************/
 /*    XXTODHM HANDLES PROCESSING OF THE SYSTEM TIME-OF-DAY          */
 /*    CLOCK.  IT HAS THREE ENTRY POINTS:                            */
 /*    TOD1, CALLED FIRST, RETURNS GMT TIME & DATE BASED ON THE      */
 /*    STANDARD THAT TOD 0 IS MIDNIGHT JAN 1, 1900.  IT ALSO         */
 /*    SETS UP A RELATIVE TIME 0 FOR THE REST OF THE CALLS           */
 /*                                                                  */
 /*  XXTODH2 WHEN PRESENTED WITH A TOD STAMP, RETURNS IN             */
 /*    MILLISECONDS*10 THE TIME ELAPSED BETWEEN THE TIMESTAMP        */
 /*    PRESENTED TO TOD1 AND THIS ONE.                               */
 /*                                                                  */
 /*  XXTODH3 WHEN PRESENTED WITH A RELATIVE TIME AS RETURNED BY      */
 /*  XXTODH2 RETURNS THE TIME OF DAY & DATE THAT IT REPRESENTS.      */
 /********************************************************************/
 /*   LEVL(0000)  26 JANUARY 1979.                                   */
 /********************************************************************/
 /* WRITTEN BY    JOHN H LISTER,                                     */
 /*               TECHNICAL SERVICES GROUP,                          */
 /*               DATA PROCESSING DEPARTMENT,                        */
 /*               NATIONAL WESTMINSTER BANK,                         */
 /*               GOODMANS FIELDS COMPUTER CENTRE,                   */
 /*               74 ALIE STREET, LONDON   E1 8HL.                   */
 /*                                                                  */
 /*               TELEPHONE: 01-488 0707 EXT 2766.                   */
 /********************************************************************/
 %SKIP(4);
   DEFAULT
      RANGE(*) FIXED;                  /*DON'T WANT FLOATS*/
 %SKIP(4);
 /*PARAMETERS*/
 %SKIP;
   DCL
      TIMESTAMP BIT(64) ALIGNED,
      DATEREC CHAR(9),
      RELTIME BIN(31);
 /*TIMESTAMP   64 BIT TIME OF DAY CLOCK. (READ).               */
 /*DATEREC     USED TO RETURN DATE. (WRITE).                   */
 /*RELTIME     USED TO PASS RELATIVE TIME TO PROCEDURE (READ). */
 %SKIP(4);
 /*PRIVATE INTER-CALL*/
 %SKIP;
   DCL
      BASETIME(2) CTL BIN(31);
 /*BASETIME    USED TO HOLD VALUE OF BASE TIME FROM WHICH ALL  */
 /*            THE RELATIVE TIMES ARE EVALUATED.               */
 %SKIP(4);
 /*LOCAL VARIABLES*/
 %SKIP;
   DCL
      TIMEDIT PIC '99.99.99.999';
 /*TIMEDIT     PICTURE VARIABLE FOR EDITING TIME               */
 /*            INTO HH.MM.SS.TTT.                              */
   DCL
      DATEDIT CHAR(9) INIT(''),
      YEAREDIT PIC '99' DEFINED DATEDIT POS(8),
      MONTHEDIT CHAR(3) DEFINED DATEDIT POS(4),
      DAYEDIT PIC '99' DEFINED DATEDIT POS(1);
 /*DATEDIT     VARIABLES USED TO EDIT DATE INTO FORM DD.MMM.YY.*/
 /*YEAREDIT &C                                                 */
   DCL
      (TEMP1,
      MSEC,
      SECS,
      MINS,
      HOURS,
      DAYS,
      LOOP,
      YEAR) BIN(15),
      LEAP BIN(15) INIT(4),
      TEMPTIME BIT(32) ALIGNED INIT('0'B),
      (BINTIME1,
      BINTIME2) BIN(31) INIT(0);
 /*TEMP1 MSEC SECS MINS HOURS DAYS LOOP YEAR                   */
 /*            TEMPORARIES USED TO HOLD INTERMEDIATE VALUES IN */
 /*            CONVERTING TOD VALUE INTO DATE & TIME.          */
 %SKIP(4);
 /*CONSTANTS*/
 %SKIP;
   DCL
      MONTHS(12) CHAR(3) STATIC INTERNAL INIT( 'JAN','FEB','MAR','APR',
   'MAY','JUN','JUL','AUG','SEP', 'OCT','NOV','DEC');
   DCL
      DAYS_TO_MONTHEND(0:12) STATIC BIN(15) INIT(0,31,60,91,121,152,182,
       213 ,244,274,305,335,366);
 /*MONTHS      CHARACTER CONSTANS OF MONTHS ABBREVIATIONS.     */
 /*DAYS_TO_MONTHEND NO OF DAYS SO FAR IN YEAR AT END OF EACH   */
 /*                 MONTH IN A LEAP YEAR. CODING TAKES CARE OF*/
 /*                 ORDINARY YEARS.                            */
   DCL
      TWOTO24 FIXED BIN(31) INIT(16777216) STATIC,
      Y1968 FIXED BIN(31) STATIC INIT(24835);
 /*TWOTO26          CONSTANT WITH VALUE 2**24.                 */
 /*Y1968            NO OF DAYS IN CENTURY TO JAN 1 1968.       */
 %SKIP(2);
 /* BUILT IN FUNCTIONS */
   DCL
      (SUBSTR,
      UNSPEC,
      MOD,
      SIGN) BUILTIN;
 %PAGE;
      CALL TOD_MILLIS;                 /*CONVERT TIME OF DAY CLOCK TO
                                       MSEC*10. */
      ALLOCATE BASETIME;
      BASETIME(1)=BINTIME1;            /*SAVE VALUE OF BASE TIMES */
      BASETIME(2)=BINTIME2;
      CALL MILLIS_DAYS;
      DATEREC=DATEDIT;
      RETURN(TIMEDIT);
 %PAGE;
 XXTODH2:
      ENTRY(TIMESTAMP) RETURNS(FIXED BIN(31));
      ON FIXEDOVERFLOW
         GOTO TIME_OUT_OF_MIND;
      CALL TOD_MILLIS;                 /*CONVERT TIME-OF-DAY CLOCK TO
                                       MSECS*10. */
      BINTIME2=BINTIME2-BASETIME(2);
      IF BINTIME2 < 0 /*SUBTRACT ABSOLUTE TIMES*/THEN
         DO;                           /*BORROW/PAYBACK BASE 2**24*/
            BINTIME2=BINTIME2+TWOTO24;
            BINTIME1=BINTIME1-1;
         END;
      BINTIME1=BINTIME1-BASETIME(1);
      RETURN(BINTIME2+BINTIME1*TWOTO24);
 %SKIP(10);
 TIME_OUT_OF_MIND: /* CANNOT HANDLE THIS RELATIVE TIME SO RETURN A
 SUITABLE FLAG */
      RETURN(-2147483647);             /* = -(2**31-1) */
 %PAGE;
 XXTODH3:
      ENTRY(RELTIME,DATEREC) RETURNS(CHAR(12));
      BINTIME1=RELTIME/TWOTO24;        /*CONVERT INTO BASE 2**24*/
      IF RELTIME >= 0 THEN
         BINTIME2=RELTIME;             /* POSITIVE RELATIVE TIME */
      ELSE
         BINTIME2=-RELTIME;            /* NEGATIVE RELATIVE TIME */
      BINTIME2=SIGN(RELTIME)*MOD(BINTIME2,TWOTO24);/* THIS WILL ENSURE
                                       THAT BINTIME2 ALWAYS HAS THE
                                       SAME SIGN AS RELTIME AND WILL
                                       BE THE 'POSITIVE REMAINDER' */
      BINTIME1=BINTIME1+BASETIME(1);   /*ADD RELATIVE TO BASE TO GET*/
      BINTIME2=BINTIME2+BASETIME(2);   /*REAL TIME                  */
      IF BINTIME2 >= TWOTO24 THEN
         DO;
            BINTIME1=BINTIME1+1;
            BINTIME2=BINTIME2-TWOTO24;
         END;
      ELSE
         IF BINTIME2 < 0 THEN
            DO;
               BINTIME1=BINTIME1-1;    /* BORROW/PAYBACK FOR SUBTRACT */
               BINTIME2=BINTIME2+TWOTO24;
            END;
      CALL MILLIS_DAYS;                /*CONVERT TO HHMMSS & DAYS   */
      DATEREC=DATEDIT;                 /*MONTHS YEARS.              */
      RETURN(TIMEDIT);
 %PAGE;
 TOD_MILLIS: /*CONVERTS TIME OF DAY CLOCK INTO MILLISECONDS*10*/
   PROC REORDER;
 /*THE TIME OF DAY CLOCK IS A DOUBLEWORD WITH BIT POSITION 52  */
 /*WHEN NUMBERING 1-64 BEING INCREMENTED BY 1 EVERY MICROSECOND*/
      SUBSTR(TEMPTIME,9,24)=SUBSTR(TIMESTAMP,29,24);
      UNSPEC(BINTIME2)=TEMPTIME;
      SUBSTR(TEMPTIME,5,28)=SUBSTR(TIMESTAMP,1,28);
      UNSPEC(BINTIME1)=TEMPTIME;
 /*THIS SHIFTS TIMESTAMP 12 BITS TO THE RIGHT, DISCARDING THE  */
 /*UNWANTED PORTIONS  IT THEN DIVIDES WHAT'S LEFT BETWEEN TWO  */
 /*FULLWORDS FOR CONVENIENCE AS  PLI CAN'T SUPPORT DOUBLEWORD  */
 /*ARITHMETIC.  NOW DIVIDE BY 100.                             */
      TEMP1=MOD(BINTIME1,100);
      BINTIME1=BINTIME1/100;
      BINTIME2=(BINTIME2+(TEMP1*TWOTO24))/100;
      RETURN;
   END;                                /*OF TOD_MILLIS*/
 %PAGE;
 MILLIS_DAYS: /*CONVERTS MILLISECONDS*10 TO DATE & TIME*/
   PROC REORDER;
 /*FIRST CONVERT TO DAYS, HOURS, MINS, SECS, MSEC*/
      TEMP1=MOD(BINTIME1,100);
      BINTIME1=BINTIME1/100;
      BINTIME2=BINTIME2+(TEMP1*TWOTO24);
      BINTIME2=BINTIME2/10;
      MSEC=MOD(BINTIME2,10);           /*TO CONVERT TO SECONDS DIVIDE
                                       BY 10000 */
      BINTIME2=BINTIME2/10;            /*WHICH IS THE SAME AS DIVIDING
                                       BY 100 */
 /*TWICE.  SECOND METHOD AVOIDS OVERFLOW.*/
      TEMP1=MOD(BINTIME1,100);
      BINTIME1=BINTIME1/100;
      BINTIME2=BINTIME2+(TEMP1*TWOTO24);
      MSEC=MSEC+(MOD(BINTIME2,100)*10);
      BINTIME2=BINTIME2/100;           /*NOW DOWN TO SECONDS WITH
                                       REMAINDER IN MSEC. */
      TEMP1=MOD(BINTIME1,60);
      BINTIME1=BINTIME1/60;
      BINTIME2=BINTIME2+TEMP1*TWOTO24;
      SECS=MOD(BINTIME2,60);           /*SECONDS*/
      BINTIME2=BINTIME2/60;
      BINTIME1=BINTIME1*TWOTO24+BINTIME2;/*VALUE WILL NOW FIT INTO
                                       FULLWORD*/
      MINS=MOD(BINTIME1,60);           /*MINUTES*/
      BINTIME1=BINTIME1/60;
      HOURS=MOD(BINTIME1,24);          /*HOURS*/
      DAYS=BINTIME1/24-Y1968;          /*DAYS SINCE 1968 JAN 1*/
      DO LOOP = 1 BY 1;
         TEMP1=365+LEAP/4;
         IF DAYS <= TEMP1 /*CYCLE ROUND TO FIND OUT HOW MANY*/THEN
 /*YEARS HAVE PAST SINCE 1968.     */
            LEAVE;                     /*LEAP IS USED AS A CYCLE TO
                                       GIVE */
         DAYS=DAYS-TEMP1;              /*AN EXTRA DAY ON LEAP YEARS. */
         LEAP=MOD(LEAP,4)+1;
      END;
      YEAR=67+LOOP;                    /*ADD IN BASE YEARS*/
      IF (MOD(YEAR,4)^=0) & (DAYS >= 59)
      /*DAYS IN MONTHS FOR TESTING */THEN
 /*ARE SET AS IN A LEAP-YEAR  */
         DAYS=DAYS+1;                  /*SO GIVE MARCH 1 &C A       */
 /*NOW MONTH*/
 /*HELPING HAND.              */
      DO LOOP = 1 TO 12;
         IF DAYS <= DAYS_TO_MONTHEND(LOOP) THEN
            LEAVE;
      END;
      DAYS=DAYS-DAYS_TO_MONTHEND(LOOP-1);
 /*NOW EDIT TIME AND DATE INTO PROPER FIELDS*/
      TIMEDIT=((((HOURS*100)+MINS)*100)+SECS)*1000+MSEC;
      YEAREDIT=YEAR;
      MONTHEDIT=MONTHS(LOOP);
      DAYEDIT=DAYS;
      RETURN;
   END;                                /*OF MILLIS_DAYS*/
 %SKIP(3);
   END;                                /*OF TOD 1*/
