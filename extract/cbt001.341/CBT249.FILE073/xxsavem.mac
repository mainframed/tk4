*              /* LEVEL=0001                                         */
*PROCESS X,A,AG,S,STG,LIST,NEST,F(I),LMSG,MAP,ESD,OPT(2),OF;
 XXSAVEM: /*SAVE MESSAGES FOR PRINTING IN A DIFFERENT ORDER*/
   PROC(STRPTR) OPTIONS(REENTRANT) REORDER;
 %SKIP(4);
 /********************************************************************/
 /*   XXSAVEM IS A PROCEDURE THAT ENABLES THE CALLING PROGRAM        */
 /*   TO SAVE UP ERROR MESSAGES AND THEN PRINT THEM AS A BLOCK.      */
 /*   IT HAS TWO ENTRY POINTS:                                       */
 /*                                                                  */
 /*   XXSAVEM EXPECTS A POINTER TO A MESSAGE BLOCK CHAIN WHICH IS    */
 /*   ADDED TO THE CURRENT CHAIN.                                    */
 /*                                                                  */
 /*   XXSAVE1 PRINTS AND FREES THE CURRENT MESSAGE BLOCK CHAIN.      */
 /********************************************************************/
 /*   LEVL(0001)  5 FEBRUARY 1979.  CHANGES:                         */
 /*   CHANGES IN DECLARATION OF MESSAGE BLOCK SO THAT COUNT FIELDS   */
 /*   ARE BINARY INSTEAD OF DEFAULTING TO DECIMA.                    */
 /********************************************************************/
 /* WRITTEN BY    JOHN H LISTER,                                     */
 /*               TECHNICAL SERVICES GROUP,                          */
 /*               DATA PROCESSING DEPARTMENT,                        */
 /*               NATIONAL WESTMINSTER BANK,                         */
 /*               GOODMANS FIELDS COMPUTER CENTRE,                   */
 /*               74 ALIE STREET, LONDON   E1 8HL.                   */
 /*                                                                  */
 /*               TELEPHONE: 01-488 0707 EXT 2766.                   */
 /********************************************************************/
 %SKIP(4);
   DEFAULT
      RANGE(*) FIXED;
 %SKIP(4);
 /*PARAMETER*/
 %SKIP;
   DCL
      STRPTR POINTER;                  /*POINTER TO INPUT MESSAGE
                                       CHAIN*/
 %SKIP(4);
 /*PRIVATE*/
 %SKIP;
   DCL
      1 SAVE_INFO CTL,                 /*SAVE BLOCK CHAIN POINTERS*/
         2 SAVE_PTR POINTER,           /*POINTER TO BEGINNING OF CHAIN*/
         2 CURR_PTR POINTER;           /*POINTER TO END OF CHAIN*/
 %SKIP(4);
 /* BASED VARIABLE TEMPLATES */
 %SKIP;
   DCL
      1 SAVE_MESSAGE_BLOCK BASED,      /*FORMAT OF A BLOCK TO HOLD A
                                       MESSAGE TO BE PRINTED LATER*/
         2 NEXT_BLOCK_PTR POINTER,     /*POINTER TO NEXT MESSAGE*/
         2 NEXT_LINE_PTR POINTER,      /*POINTER TO NEXT LINE*/
         2 NO_OF_LINES_IN_MSG BIN(15) INIT(1), /* NUMBER OF LINES IN
                                       THIS MESSAGE (USED ONLY ON
                                       FIRST LINE OF EACH MESSAGE) */
         2 #CARS_USED BIN(15) INIT(1),
         2 CARR_CTL BIN(15) INIT(1),   /* NUMBER OF LINES SKIPPED */
         2 PLINE CHAR(132) INIT('');   /* MESSAGE CHARACTERS*/
 %SKIP(4);
 /*BUILTIN FUNCTIONS*/
 %SKIP;
   DCL
      (ALLOCATION,
      NULL,
      SUBSTR) BUILTIN;
 %PAGE;
 /* EXTERNAL */
 %SKIP;
   DCL
      1 PRINTFL CTL EXT,               /*CURRENT STATE OF FILE 'PRINT'*/
         2 LINES BIN(15),              /*LINES USED SO FAR IN THIS
                                       PAGE*/
         2 MAXLINES BIN(15),           /*MAXIMUM # OF LINES PER PAGE*/
         2 PAGE# BIN(15);              /*CURRENT PAGE #*/
   DCL
      PRINT FILE EXT PRINT;            /*MAIN OUTPUT FILE*/
 %SKIP;
   DCL
      XXNWPGE ENTRY();                 /* PAGE HEADING ROUTINE */
 %SKIP(4);
 /*LOCAL VARIABLES*/
   DCL
      TEMP_PTR POINTER;                /*TEMPORARY POINTER*/
 %SKIP(4);
 /*ENTRY XXSAVEM: CHAIN ON SAVE-MESSAGE-BLOCKS*/
 %SKIP(2);
      IF ALLOCATION(SAVE_INFO) = 0 THEN
         DO;                           /*HAVEN'T RESERVED ANY STORAGE
                                       - FIRST TIME IN*/
            ALLOCATE SAVE_INFO;        /*ALLOCATE POINTERS*/
            SAVE_PTR,CURR_PTR=STRPTR;  /*SET THEM TO BEGINNING OF LIST*/
            DO WHILE(CURR_PTR->NEXT_BLOCK_PTR ^= NULL );/*CHAIN
                                       CURR_PTR DOWN TO END OF LIST*/
               CURR_PTR=CURR_PTR->NEXT_BLOCK_PTR;
            END;
         END;
      ELSE
         DO;                           /* WE HAVE BEEN HERE BEFORE */
            CURR_PTR->NEXT_BLOCK_PTR=STRPTR;/*CHAIN NEW INFO ONTO END*/
            DO WHILE(CURR_PTR->NEXT_BLOCK_PTR ^= NULL);/*CHAIN
                                       CURR_PTR DOWN TO END*/
               CURR_PTR=CURR_PTR->NEXT_BLOCK_PTR;
            END;
         END;
      RETURN;
 %PAGE;
 XXSAVE1:
      ENTRY;
 %SKIP;
 /*THIS ENTRY PRINTS AND FREES ALL THE ACCUMULATED INFO*/
 %SKIP;
      DO WHILE(SAVE_PTR^=NULL);        /*CHAIN SAVE_PTR ALONG FROM
                                       MESSAGE TO MESSAGE*/
         CURR_PTR=SAVE_PTR;            /*CURR_PTR IS USED TO CHAIN
                                       DOWN THE LINES IN A MESSAGE */
         SAVE_PTR=SAVE_PTR->NEXT_BLOCK_PTR;
         IF (LINES+CURR_PTR->NO_OF_LINES_IN_MSG) > MAXLINES THEN
            CALL XXNWPGE;              /*CAN'T FIT MESSAGE ON PAGE*/
         DO WHILE(CURR_PTR ^= NULL);
            PUT FILE(PRINT)
            EDIT(SUBSTR(CURR_PTR->PLINE,1,CURR_PTR->#CARS_USED)) (
             SKIP(CURR_PTR->CARR_CTL), A(CURR_PTR->#CARS_USED));/*
                                       OUTPUT LINE */
            TEMP_PTR=CURR_PTR;         /* SAVE THIS POINTER*/
            LINES=LINES+CURR_PTR->CARR_CTL;/* COUNT LINES USED */
            CURR_PTR=CURR_PTR->NEXT_LINE_PTR;/*CHAIN ON TO NEXT LINE*/
            FREE TEMP_PTR->SAVE_MESSAGE_BLOCK;/*FREE THIS BLOCK*/
         END;
      END;
      RETURN;                          /*TO CALLING PROGRAM*/
   END;                                /*OF XXSAVEM*/
