*              /* LEVEL=0003                                         */
*PROCESS X,A,AG,S,STG,LIST,NEST,F(I),LMSG,MAP,ESD,OPT(2),OF;
 XXPRTDV: /* PRINT INFORMATION FOR ONE DEVICE */
   PROC(ADDRESS,ALTERNATE,PTR,METHOD) OPTIONS(REENTRANT) REORDER;
 %SKIP(4);
 /********************************************************************/
 /*  XXPRTDV PRINTS THE INFORMATION ACCUMULATED FOR ONE DEVICE IN A  */
 /*  TWO PAGE SPREAD.  THE FIRST PAGE CONTAINS INFORMATION ABOUT THE */
 /*  PERFORMANCE OF THE DEVICE GENERALLY PLUS A SEEK ANALYSIS TABLE  */
 /*  OF THE CYLINDERS DIVIDED INTO 'BOXES'.  THE SECOND PAGE         */
 /*  HAS A SEEK ANALYSIS TABLE OF THE FIFTY BUSIEST CYLINDERS,       */
 /*  ACCORDING TO THE 'METHOD' PARAMETER, PLUS INFORMATION ABOUT     */
 /*  HOW MUCH OF THE SPARSE ARRAY SPACE WAS USED FOR THIS DEVICE     */
 /*  AND A WARNING IF OVERFLOW OCCURRED.                             */
 /********************************************************************/
 /*   LEVL(0003) 12 MARCH 1979.  CHANGES:                            */
 /*   REWRITTEN TO USE NEW STORAGE ALLOCATION SCHEME FOR SEEK        */
 /*   ANALYSIS TABLE SPARSE MATRIX.  HEADING CHANGED TO INCLUDE      */
 /*   PRINTING OF ALTERNATE PATH ADDRESS, AND THE SIDE INFORMATION   */
 /*   PRINTING OF THE NUMBER OF EVENTS OCCURRING ON THE MAIN PATH    */
 /*   COMPARED WITH THE ALTERNATE PATH.  PRINT ON SECOND PAGE OF     */
 /*   THE AMOUNT OF SPACE USED BY THE SPARSE ARRAY FOR PERFORMANCE   */
 /*   EVALUATION.                                                    */
 /********************************************************************/
 /* WRITTEN BY    JOHN H LISTER,                                     */
 /*               TECHNICAL SERVICES GROUP,                          */
 /*               DATA PROCESSING DEPARTMENT,                        */
 /*               NATIONAL WESTMINSTER BANK,                         */
 /*               GOODMANS FIELDS COMPUTER CENTRE,                   */
 /*               74 ALIE STREET, LONDON   E1 8HL.                   */
 /*                                                                  */
 /*               TELEPHONE: 01-488 0707 EXT 2766.                   */
 /********************************************************************/
 %SKIP(4);
   DEFAULT
      RANGE(*) FIXED ;
 %SKIP(4);
 /* PARAMETERS */
 %SKIP;
   DCL
      ADDRESS BIN(15),                 /* ADDRESS OF DEVICE */
      ALTERNATE BIN(15),               /* ALTERNATE PATH ADDRESS, OR
                                       -1 IF THERE IS NO ALTERNATE
                                       PATH */
      PTR POINTER,                     /* POINTER TO DEVICE
                                       INFORMATION */
      METHOD BIN(15);                  /* METHOD OF EVALUATING BUSIEST
                                       CYLINDERS FOR A SELECTIVE
                                       PRINT: (1) = ROWS, USE MAXIMUM
                                       ROW SUMS, (2) MAXIMUM - USE
                                       ROWS WITH HIGHEST INDIVIDUAL
                                       ENTRIES, (3) - AS MAXIMUM, BUT
                                       IGNORE DIAGONALS FOR THIS
                                       PURPOSE */
 %SKIP(4);
 /* CONSTANTS */
 %SKIP;
   DCL
      SLOT_SIZES(4) BIN(15) STATIC INIT(9,17,12,12), /* SIZE OF SLOTS
                                       FOR VARIOUS DISKS */
      HIGH_SLOT_INDICES(4) BIN(15) STATIC INIT(47,48,47,47);/* HIGHEST
                                       SLOT INDICES, IE 48 SLOTS
                                       NUMBERED 0:47, 49 SLOTS
                                       NUMBERED 0:48, AND 2 LOTS OF 48
                                       SLOTS NUMBERED 0:47 */
 %SKIP(4);
 /* LOCAL VARIABLES */
 %SKIP;
   DCL
      SIZEA BIN(15);                   /* HIGHEST INDEX OF ARRAYS */
   DCL
      CURRPTR POINTER;                 /* POINTER TO DEVICE
                                       INFORMATION */
 %PAGE;
 /* BASED VARIABLE TEMPLATES */
 %SKIP;
   DCL
      1 DEVICE_DATA BASED(CURRPTR),    /* INFORMATION ABOUT THE
                                       ACTIVITY OF ONE DEVICE */
         2 DEVICE_TYPE BIN(15) INIT(0), /* DEVICE TYPE - (1) 3330, (2)
                                       3330-II, (3) 3350, (4) 3350-FH
                                       (FIXED HEAD ON CYLINDERS 1 & 2)
                                       */
         2 MAX_SEEK BIN(15) INIT(0),   /* LARGEST NUMBER OF CYLINDERS
                                       TRAVERSED IN ONE SEEK */
         2 TOT_SEEK BIN(31) INIT(0),   /* TOTAL NUMBER OF CYLINDERS
                                       SEEKED ACROSS */
         2 DUMMY_SEEK BIN(31) INIT(0), /* NUMBER OF DUMMY SEEKS MADE
                                       TO CYLINDERS 1 & 2 ON A 3350
                                       FIXED HEAD DEVICE */
         2 #SIOS_0 BIN(31) INIT(0),    /* NUMBER OF SIOS CC 0 ISSUED
                                       TO THIS DEVICE */
         2 #SIOS_1 BIN(31) INIT(0),    /* NUMBER OF SIOS CC 1 ISSUED
                                       TO THIS DEVICE */
         2 #SIOS_2 BIN(31) INIT(0),    /* NUMBER OF SIOS CC 2 ISSUED
                                       TO THIS DEVICE */
         2 #SIOS_3 BIN(31) INIT(0),    /* NUMBER OF SIOS CC 3 ISSUED
                                       TO THIS DEVICE */
         2 #EVENTS_MAIN BIN(31) INIT(0), /* NUMBER OF EVENTS WHEN THIS
                                       DEVICE IS ADDRESSED USING ITS
                                       MAIN PATH */
         2 #EVENTS_ALTERNATE BIN(31) INIT(0), /* NUMBER OF EVENTS WHEN
                                       THIS DEVICE IS ADDRESSED USING
                                       ITS ALTERNATE PATH */
         2 REASONS(6) BIT(16) ALIGNED INIT((6)(16)'0'B), /* REASONS
                                       RETURNED WHEN SIO CC 1 OCCURS */
         2 #REASONS(6) BIN(15) INIT((6)0), /* NUMBER OF TIMES EACH
                                       REASON OCCURS */
         2 DOESNT_COUNT BIN(31) INIT(0), /* NUMBER OF TIMES A SIO CC 1
                                       IS ISSUED TO A DEVICE IN
                                       SUCCESSION OF A SIO CC 1 IS
                                       ISSUED WHEN THERE IS A WRAP
                                       AROUND OF GTF SO THAT NO END
                                       TIME IS RECORDED AND SO THIS
                                       CANNOT COUNT TOWARDS COMPUTING
                                       THE AVERAGE DEFER TIME */
         2 #SIOS_NOT_FINISHED BIN(31) INIT(0), /* THIS IS THE SAME FOR
                                       DOESNT_COUNT AS REGARDS WRAP
                                       ROUND FOR SIO CC 0 RECORDS */
         2 TOT_DEFR BIN(31) INIT(0),   /* TOTAL DEFERRED TIME IE TIME
                                       BETWEEN SIO CC 1 OCCURRING AND
                                       INTERRUPT FOR THAT DEVICE */
         2 MAX_DEFR BIN(31) INIT(0),   /* MAXIMUM INDIVIDUAL DEFERRED
                                       TIME */
         2 MAX_TIME BIN(31) INIT(0),   /* MAXIMUM INDIVIDUAL IO TIME */
         2 TOT_TIME BIN(31) INIT(0),   /* TOTAL IO TIME */
         2 LASTIME BIN(31) INIT(0),    /* RELATIVE TIME OF LAST EVENT
                                       FOR THIS DEVICE */
         2 LAST_SEEK BIN(15) INIT(-1), /* LAST SEEK CYLINDER FOR THIS
                                       DEVICE */
         2 NOINVALSK BIN(15) INIT(0),  /* NUMBER OF SEEKS TO
                                       NON-EXISTENT CYLINDERS */
         2 LAST_EVENT BIN(15) INIT(0), /* LAST EVENT TO HAPPEN TO THIS
                                       DEVICE */
         2 #CYLINDERS BIN(15) INIT(0), /* INDEX OF HIGHEST CYLINDER
                                       NUMBER USED FOR THIS DEVICE
                                       PLUS 20 FOR ALTERNATE TRACKS
                                       ETC */
         2 LAST_USED BIN(15) INIT(-1), /* INDEX OF LAST USED MEMBER OF
                                       TO_ARRAY */
         2 FROM(0:827) BIN(15) INIT((828) -1), /* INDICES TO BEGINNING
                                       OF ROW CHAINS IN SPARSE MATRIX */
         2 TO_ARRAY(10000),            /* ENTRIES IN SPARSE MATRIX */
            3 TO_CYLINDER# BIN(15),    /* COLUMN INDEX OF ENTRY */
            3 TO_VALUE BIN(15),        /* VALUE OF ENTRY */
            3 NEXT_CYLINDER BIN(15);   /* INDEX OF NEXT ITEM IN
                                       THE CHAIN IN TO_ARRAY */
 %SKIP(4);
 /* BUILT IN FUNCTIONS */
   DCL
      (MAX,
      MIN,
      SUBSTR) BUILTIN;
 %SKIP(4);
 /* INITIALISATION CODE */
 %SKIP(2);
      CURRPTR=PTR;                     /* SET POINTER SO THAT TEMPLATE
                                       COVERS DATA */
      SIZEA=#CYLINDERS;                /* GET SIZE OF TEMPORARY ARRAYS
                                       */
 %SKIP(4);
      BEGIN;                           /* HAVE A BEGIN BLOCK TO GET
                                       REST OF REQUIRED STORAGE */
 %SKIP(2);
 /* CONSTANTS */
   DCL
      SIDEHEADS(18) CHAR(16) STATIC INIT('TOTAL SIO CC0   ',
   'TOTAL SIO CC1   ', 'CSW FFFF        ', 'TOTAL SIO CC2   ',
   'TOTAL SIO CC3   ', 'MAIN PATH EVENTS', 'ALT PATH EVENTS ',
   'CYLINDERS SEEKED', 'MAXIMUM SEEK    ', 'AVERAGE SEEK    ',
   'AVERAGE IO MSEC ', 'MAXIMUM IO MSEC ', 'HIGHEST SELF HIT',
   'BUSIEST CYL     ', '# OF DUMMY SEEKS', '# INVALID SEEKS ',
   'AVG DEFER MSEC  ', 'MAX DEFER MSEC  ');/* BLANKS FOR SIDE HEADINGS
                                       */
   DCL
      DEVICE_ADDRESS_CONN STATIC CHAR(15) INIT('DEVICE ADDRESS:');/*
                                       USED IN HEADING PRINT OUT */
   DCL
      ALTERNATE_ADDRESS_CONN STATIC CHAR(15) INIT('ALTERNATE PATH:');/*
                                        HEADING FOR PRINTOUT */
   DCL
      DEVICE_TYPE_CONN STATIC CHAR(12) INIT('DEVICE TYPE:');/* USED IN
                                       HEADING PRINT OUT */
   DCL
      NUM_CYL_CONN STATIC CHAR(20) INIT('NUMBER OF CYLINDERS:');
   DCL
      UNDERLINE STATIC CHAR(35) INIT((35)'_');/* USED TO UNDERLINE
                                       HEADINGS */
   DCL
      WARNINGS(0:9) CHAR(27) INIT( '***************************',
   '*                         *', '*      W A R N I N G      *',
   '*                         *', '*    TABLE OVERFLOW HAS   *',
   '*    OCCURRED - SEEK      *', '*    ANALYSIS TABLE IS    *',
   '*    INCOMPLETE.          *', '*                         *',
   '***************************' );
   DCL
      METHOD_CHARS(3) STATIC CHAR(29) INIT ('ROW SUMS',
   'MAXIMUM ELEMENTS', 'MAXIMUM NON-DIAGONAL ELEMENTS');/*
                                       DESCRIPTIONS OF METHODS USED IN
                                       EVALUATING MOST ACTIVE
                                       CYLINDERS */
 %SKIP(4);
 /* EXTERNAL */
 %SKIP(2);
   DCL
      1 PRINTFL CTL EXT,               /* INFORMATION ABOUT CURRENT
                                       STATE OF FILE PRINT */
         2 LINES FIXED BIN(15) INIT(0), /* LINE NUMBER IN CURRENT PAGE
                                       */
         2 MAXLINES FIXED BIN(15) INIT(59), /* MAXIMUM NUMBER OF LINES
                                       PER PAGE */
         2 PAGE# FIXED DEC(3) INIT(1); /* CURRENT PAGE NUMBER */
   DCL
      DEVCHAR(4) CHAR(7) EXT STATIC INIT('3330   ', '3330-II', '3350   '
          , '3350-FH' );               /* HEADINGS FOR DEVICE TYPES */
   DCL
      LENDCAR(4) BIN(15) STATIC EXT INIT(4,7,4,7);/* REAL LENGTHS OF
                                       DEVICE TYPE CONSTANTS */
 %SKIP(4);
 /* FILE */
 %SKIP;
   DCL
      PRINT FILE EXTERNAL STREAM PRINT;/* MAIN OUTPUT FILE */
 %SKIP(4);
 /* ENTRY */
 %SKIP;
   DCL
      XXVHDGM ENTRY((*) FIXED BIN(15) CONN, (3) CHAR(100) CONN, FIXED
   BIN(15) );                          /* CONVERTS UP TO THE FIRST 50
                                       MEMBERS OF ITS FIRST PARAMETER
                                       ARRAY INTO A HEADING TO GO
                                       ACROSS THE TOP OF THE SEEK
                                       ANALYSIS TABLE. PARAMETERS -
                                       (1) INPUT ARRAY - FIRST INDEX
                                       SHOULD BE 0, (2) OUTPUT ARRAY -
                                       THREE CHARACTER STRINGS
                                       REPRESENTING CONSECUTIVE LINES
                                       FOR PRINTING, (3) UPPER BOUND
                                       OF PARAMETER 1 */
   DCL
      XXNWPGE ENTRY();                 /* STARTS A NEW PAGE ON FILE
                                       PRINT AND PUTS A HEADING ON THE
                                       TOP OF IT */
   DCL
      XXSUMRW ENTRY((0:827) FIXED BIN(15) CONN, 1 (*) CONN, 2 FIXED BIN(
   15), 2 FIXED BIN(15), 2 FIXED BIN(15), (*) FIXED BIN(15), FIXED BIN(
   15) );                              /* PROCEDURE WHICH SUMS THE
                                       ROWS OF A SPARSE SEEK ANALYSIS
                                       ARRAY. PARAMETERS - (1) ARRAY
                                       OF INDICES TO THE BEGINNING OF
                                       THE ROW CHAINS IN THE SECOND
                                       PARAMETER, (2) CHAINS OF
                                       ELEMENTS REPRESENTING ENTRIES
                                       IN THE ROW AS (.A) CYLINDER
                                       NUMBER, (.B) VALUE OF THIS
                                       CYLINDER, (.C) INDEX OF NEXT
                                       ENTRY FOR THIS ROW, (3) ARRAY
                                       WHICH RETURNS THE VALUE OF THE
                                       ROW SUMS, (4) UPPER BOUND OF
                                       ARRAY PARAMETER 3 */
   DCL
      XXMAXEL ENTRY((0:827) FIXED BIN(15) CONN, 1 (*) CONN, 2 FIXED BIN(
   15), 2 FIXED BIN(15), 2 FIXED BIN(15), (*) FIXED BIN(15), (*) FIXED
   BIN(15), FIXED BIN(15) );           /* PROCEDURE WHICH SUMS THE
                                       RETURNS THE MAXIMUM ELEMENTS IN
                                       THE ROWS AND COLUMNS OF THE
                                       SPARSE ARRAY USED FOR THE SEEK
                                       ANALYSIS. PARAMETERS - (1)
                                       ARRAY OF INDICES TO THE
                                       BEGINNING OF THE ROW CHAINS IN
                                       THE SECOND PARAMETER, (2)
                                       CHAINS OF ELEMENTS REPRESENTING
                                       ENTRIES IN THE ROW AS (.A)
                                       CYLINDER NUMBER, (.B) VALUE OF
                                       THIS CYLINDER, (.C) INDEX OF
                                       NEXT ENTRY FOR THIS ROW, (3)
                                       ARRAY USED TO RETURN THE
                                       MAXIMUM ELEMENTS IN THE ROWS,
                                       (4) ARRAY USED TO RETURN THE
                                       MAXIMUM ELEMENTS IN THE
                                       COLUMNS, (5) UPPER BOUND OF
                                       ARRAY PARAMETERS 4 AND 5 */
   DCL
      XXMAXND ENTRY((0:827) FIXED BIN(15) CONN, 1 (*) CONN, 2 FIXED BIN(
   15), 2 FIXED BIN(15), 2 FIXED BIN(15), (*) FIXED BIN(15), (*) FIXED
   BIN(15), FIXED BIN(15) );           /* PROCEDURE WHICH SUMS THE
                                       RETURNS THE MAXIMUM ELEMENTS IN
                                       THE ROWS AND COLUMNS OF THE
                                       SPARSE ARRAY USED FOR THE SEEK
                                       ANALYSIS, DISCOUNTING THE
                                       ELEMENTS ON THE DIAGONALS OF
                                       THE ARRAY. PARAMETERS - (1)
                                       ARRAY OF INDICES TO THE
                                       BEGINNING OF THE ROW CHAINS IN
                                       THE SECOND PARAMETER, (2)
                                       CHAINS OF ELEMENTS REPRESENTING
                                       ENTRIES IN THE ROW AS (.A)
                                       CYLINDER NUMBER, (.B) VALUE OF
                                       THIS CYLINDER, (.C) INDEX OF
                                       NEXT ENTRY FOR THIS ROW, (3)
                                       ARRAY USED TO RETURN THE
                                       MAXIMUM ELEMENTS IN THE ROWS,
                                       (4) ARRAY USED TO RETURN THE
                                       MAXIMUM ELEMENTS IN THE
                                       COLUMNS, (5) UPPER BOUND OF
                                       ARRAY PARAMETERS 4 AND 5 */
   DCL
      XXPARTM ENTRY((*) FIXED BIN(15) CONN, (*) FIXED BIN(15) CONN,
   FIXED BIN(15), FIXED BIN(15) );     /* PARTITIONS AN ARRAY SO THAT
                                       ITEMS (0:QUANTILE-1) ARE THE
                                       ITEMS WITH THE HIGHEST KEYS.
                                       NOTE THAT THIS IS NOT A
                                       COMPLETE SORT. PARAMETERS - (1)
                                       ITEMS TO BE PARTITIONED, (2)
                                       KEYS WHICH DECIDE THE ORDER OF
                                       THE ITEMS, (3) QUANTILE - HOW
                                       MANY ITEMS ARE TO BE IN THE
                                       PARTITION, (4) UPPER BOUND OF
                                       PARAMETER ARRAYS 1 AND 2 */
   DCL
      XXQSRT1 ENTRY((*) FIXED BIN(15) CONN, FIXED BIN(15));/* SORTS AN
                                       ARRAY USING HOARE'S QUICKSORT
                                       METHOD. PARAMETERS - (1) ARRAY
                                       OF ITEMS TO BE SORTED, (2)
                                       UPPER BOUND OF PARAMETER ARRAY
                                       1 (LOWER BOUND IS ASSUMED TO BE
                                       0 */
   DCL
      XXCONVH ENTRY(FIXED BIN(15)) RETURNS(CHAR(3)) REDUCIBLE;/*
                                       CONVERTS A BINARY NUMBER INTO A
                                       3 DIGIT PRINTABLE HEX NUMBER.
                                       PARAMETERS - (1) INPUT NUMBER */
   DCL
      XXCONVT ENTRY(BIT(16) ALIGNED) RETURNS(CHAR(4)) REDUCIBLE;/*
                                       CONVERTS A BIT STRING INTO A
                                       FOUR DIGIT PRINTABLE HEX
                                       DISPLAY. PARAMETERS - (1) BIT
                                       STRING TO BE CONVERTED */
   DCL
      XXEXPCM ENTRY( FIXED BIN(15) ) RETURNS( CHAR(1) ) REDUCIBLE;/*
                                       CONVERTS A POSITIVE BINARY
                                       NUMBER INTO A SINGLE CHARACTER
                                       FOR PRINTING ACCORDING TO A
                                       RANGE TABLE. PARAMETERS - (1)
                                       INPUT TO BE CONVERTED */
   DCL
      XXEXPCN ENTRY(FIXED BIN(31)) RETURNS(CHAR(1));/* AS XXEXPCM BUT
                                       THIS ENTRY IS FOR FULLWORDS */
 %SKIP(4);
 /* LOCAL VARIABLES */
 %SKIP;
   DCL
      ROW_VECTOR(0:SIZEA) BIN(15),     /* TEMPORARY FOR ROW SUMS ETC */
      COL_VECTOR(0:SIZEA) BIN(15),     /* TEMPORARY FOR COLUMN SUMS
                                       ETC */
      INDEX_VECTOR(0:SIZEA) BIN(15);   /* TEMPORARY FOR SORTING
                                       INDICES */
   DCL
      SIDEVALUES(18) DEC(7),           /* VALUES TO BE PRINTED DOWN
                                       THE SIDE OF THE SEEK BY SLOTS
                                       ANALYSIS TABLE */
      PRINT_THIS_ONE(18) BIT(1) ALIGNED INIT((18)(1)'1'B);/* FLAGS TO
                                       INDICATE WHICH OF SIDEVALUES
                                       ARE RELEVANT TO THIS DEVICE AND
                                       THEREFORE CONTAIN VALID
                                       INFORMATION TO BE PRINTED */
   DCL
      (COMPARE,
      COMPARE_DIAG) FIXED BIN(15);     /* COMPARAND VALUES TO FIND
                                       BUSIEST CYLINDER AND HIGHEST
                                       HIT CYLINDER */
   DCL
      (MAXINDEX,
      DIAG_INDEX) FIXED BIN(15);       /* MAXIMUM VALUES' INDICES */
   DCL
      (PRINTED,
      NEXTA,
      NEXTBUT1,
      #CSWS) BIN(15);                  /* COUNTERS USED IN FIRST
                                       PRINTING LOOP TO CONTROL
                                       PRINTING OF SIDE INFORMATION.
                                       PRINTED COUNTS THE NUMBER OF
                                       MAIN HEADINGS PRINTED, NEXTA
                                       CONTROLS THE NEXT PRINT ACTION,
                                       NEXTBUT1 CONTROLS THE NEXT BUT
                                       ONE PRINT ACTION, #CSWS COUNTS
                                       THE NUMBER OF REASONS FOR SIO
                                       CC1 PRINTED */
   DCL
      (FROW,
      LROW ) BIN(15);                  /* USED IN FIRST PRINTING LOOP
                                       TO COUNT EACH ROW OF CELLS'
                                       BEGINNING AND ENDING CYLINDER
                                       NUMBERS */
   DCL
      (LOOP,
      LOOP1,
      LOOP2,
      LOOP3) BIN(15);                  /* LOOP COUNTERS */
   DCL
      CROSSHEAD(3) CHAR(100);          /* HEADING ACROSS MATRIX */
   DCL
      CURRENT_INDEX BIN(15),           /* TEMPORARY USED IN CHAINING
                                       DOWN ENTRIES IN THE SPARSE SEEK
                                       MATRIX */
      FILLINDEX BIN(15);               /* TEMPORARY USED IN FIRST PAGE
                                       PRINTING TO HOLD SLOT NUMBER OF
                                       CURRENT 'TO' CYLINDER */
   DCL
      (SLOTSIZE,                       /* SIZE OF EACH SLOT ON FIRST
                                       PAGE PRINT */
      HIGHSLOT) BIN(15);               /* HIGHEST SLOT INDEX (= NUMBER
                                       OF SLOTS + 1) */
   DCL
      SEEK_WARNING BIT(1) ALIGNED INIT('0'B);/* FLAG SET TO INDICATE
                                       SEEK TABLE OVERFLOW */
   DCL
      SLOT_TOTALS(0:49) BIN(31);       /* ARRAY TO TOTAL CYLINDER
                                       ENTRIES FOR EACH SLOT IN A
                                       PRINT LINE */
   DCL
      (DEVICE_ADDRESS_SAVE,            /* SAVE OF DEVICE ADDRESS */
      SAVE_ALTERNATE_ADDRESS) CHAR(3); /* SAVE OF DEVICE ALTERNATE
                                       ADDRESS, IF IT EXISTS */
   DCL
      (PRESENT_CYLINDER#,              /* USED IN SECOND PAGE PRINT AS
                                       A TEMPORARY TO HOLD NUMBER OF
                                       CYLINDER CURRENTLY BEING LOOKED
                                       AT */
      TONUMBER ) BIN(15);              /* USED IN SECOND PAGE PRINT AS
                                       A TEMPORARY OF THE CYLINDER
                                       NUMBER BEING SEARCHED FOR */
 %PAGE;
 /* DECLARES FOR EDITING VALUES INTO PRINT BUFFER FIELDS */
 %SKIP(2);
   DCL
      BUFFER1 CHAR(132),               /* FIRST PRINT BUFFER */
      BUFFER2 CHAR(132);               /* SECOND PRINT BUFFER */
 %SKIP;
   DCL
      1 TOP_HEADING_LINE DEF BUFFER1,  /* FIELDS FOR THE PART OF THE
                                       TOP HEADING LINE WHICH CONTAINS
                                       THE DEVICE TYPE AND ADDRESS,
                                       USED ON THE TOP LINES OF BOTH
                                       PRINTOUTS */
         2 DEVICE_ADDR_WORDS CHAR(15), /* 'DEVICE ADDRESS' */
         2 PAD1 CHAR(1),               /*  PADDING */
         2 DEVICE_ADDR_NUMBER CHAR(3), /* SPACE FOR DEVICE ADDRESS */
         2 PAD2 CHAR(3),               /* PADDING */
         2 DEVICE_TYPE_WORDS CHAR(12), /* 'DEVICE TYPE:' */
         2 PAD3 CHAR(1),               /* PADDING */
         2 DEVICE_TYPE_NUMBER CHAR(7); /* SPACE FOR ACTUAL DEVICE TYPE
                                       */
 %SKIP;
   DCL
      1 HEADING_SLOTS DEF BUFFER1 POS(51), /* REST OF TOP LINE OF FOR
                                       FIRST PAGE HEADING (SEEK
                                       ANALYSIS BY SLOTS */
         2 SEEK_SLOTS_HEAD CHAR(23),   /* 'TABLE OF SEEKS BY SLOTS' */
         2 PAD1 CHAR(22),              /* PADDING */
         2 SLOT_NUMBERS_CHAR CHAR(16), /* NUMBER OF SLOTS */
         2 PAD2 CHAR(1),               /* PADDING */
         2 SLOT_NUMBERS_VALUE PIC 'Z9', /* SPACE FOR NUMBER OF SLOTS */
         2 PAD3 CHAR(4),               /* PADDING */
         2 SLOT_SIZES_CHAR CHAR(11),   /* SLOT SIZES: */
         2 PAD4 CHAR(1),               /* PADDING */
         2 SLOT_SIZES_VALUE PIC 'Z9';  /* SPACE FOR SIZE OF SLOTS */
 %SKIP;
   DCL
      1 UNDERLINE1 DEF BUFFER2,        /* UNDERLINE SPACE FOR SLOT
                                       HEADING 1 */
         2 PAD1 CHAR(16),              /* PADDING */
         2 U_DEVICE_ADDR CHAR(3),      /* UNDERLINE OF DEVICE ADDRESS */
         2 PAD2 CHAR(16),              /* PADDING */
         2 U_DEVICE_TYPE CHAR(7),      /* UNDERLINE OF DEVICE TYPE */
         2 PAD3 CHAR(8),               /* PADDING */
         2 U_SLOT_HEADING CHAR(23);    /* UNDERLINE OF HEADING */
 %SKIP;
   DCL
      1 HEADING_SELECT DEFINED BUFFER1 POSITION(51), /* SPECIFIC
                                       HEADINGS FOR SECOND PAGE
                                       HEADING - SELECTION OF BUSIEST
                                       CYLINDERS */
         2 HEADING_WORDS CHAR(35),     /* HEADING */
         2 PAD1 CHAR(5),               /* PADDING */
         2 METHOD_PROMPT CHAR(12),     /* 'METHOD USED:' */
         2 PAD2 CHAR(1),               /* PADDING */
         2 METHOD_FORMS CHAR(29);      /* DESCRIPTION OF METHOD */
 %SKIP;
   DCL
      1 UNDERLINE2 DEF BUFFER2,        /* UNDERLINING FOR SECOND PAGE
                                       HEADING */
         2 PAD1 CHAR(16),              /* PADDING */
         2 U2_DEVICE CHAR(3),          /* DEVICE ADDRESS */
         2 PAD2 CHAR(16),              /* PADDING */
         2 U2_DEVICE_TYPE CHAR(7),     /* DEVICE TYPE */
         2 PAD3 CHAR(8),               /* PADDING */
         2 U2_HEADING CHAR(35);        /* UNDERLINE OF HEADING */
 %SKIP;
   DCL
      1 SEEK_LINE DEF BUFFER2,         /* SEEK LINE FIELDS */
         2 SEEK_VALUE PIC'Z,ZZZ,ZZ9',  /* NUMBER FIELD FOR GENERAL
                                       INFORMATION */
         2 EQUALS CHAR(1),             /* SPACE FOR = SIGN */
         2 SEEK_WORDS CHAR(17),        /* DESCRIPTION OF VALUE */
         2 PAD1 CHAR(1),               /* PADDING */
         2 DOWN_NUMBER PIC 'ZZ9',      /* FROM CYLINDER NUMBER */
         2 PAD2 CHAR(1),               /* PADDING */
         2 SEEK_ARRAY(100) CHAR(1);    /* SPACE FOR SEEK ANALYSIS
                                       TABLE */
 %SKIP;
   DCL
      1 ARRAY_HEADING DEF BUFFER1,     /* FIELDS FOR THE TOP AND THIRD
                                       LINES OF THE PRINT ARRAY
                                       HEADING */
         2 PAD1 CHAR(27),              /* PADDING */
         2 FROMSPACE CHAR(4),          /* SPACE FOR 'FROM' */
         2 PAD2 CHAR(1),               /* PADDING */
         2 HEADING1_SPACE CHAR(100);   /* SPACE FOR HEADING */
 %SKIP;
   DCL
      1 ARRAY2_HEADING DEF BUFFER2,    /* FIELDS FOR THE SECOND LINE
                                       OF THE PRINT ARRAY HEADING */
         2 NUMBER_OF_CYLS_WORDS CHAR(20), /* SPACE FOR NUMBER OF
                                       CYLINDERS WORDS */
         2 PAD1 CHAR(1),
         2 NUMBER_CYLINDERS PIC 'ZZ9', /* SPACE FOR NUMBER OF
                                       CYLINDERS VALUE */
         2 PLUSTWENTY CHAR(3),         /* SPACE FOR CHARACTERS '+20' */
         2 TO_LETTERS CHAR(4),         /* SPACE FOR FROM/TO PRINT */
         2 PAD2 CHAR(1),               /* PADDING */
         2 HEADING2_SPACE CHAR(100);   /* SPACE FOR HEADING */
 %SKIP;
   DCL
      1 CSWLINE DEF BUFFER2,           /* FIELDS FOR PRINTING OF
                                       CHANNEL STATUS WORDS WHEN A SIO
                                       CONDITION CODE 1 OCCURS */
         2 PAD1 CHAR(14),              /* PADDING */
         2 CSW_VALUE CHAR(4);          /* SPACE FOR CSW PRINT */
   DCL
      WARNING_WORDS CHAR(27) DEF BUFFER2;/* FIELD FOR WARNING SHOULD
                                       SEEK TABLE OVERFLOW HAVE
                                       OCCURRED */
 %PAGE;
 /*PRELIMINARIES */
 %SKIP(2);
         SLOTSIZE=SLOT_SIZES(DEVICE_TYPE);
         HIGHSLOT=HIGH_SLOT_INDICES(DEVICE_TYPE);
         DO LOOP=0 TO HIGHSLOT;
            INDEX_VECTOR(LOOP)=LOOP*SLOTSIZE;/* HEADING ACROSS TOP OF
                                       HEAD MOVEMENT TABLE FOR FIRST
                                       PRINTOUT IS THE CYLINDER
                                       NUMBERS OF THE CYLINDERS
                                       BEGINNING THE SLOTS */
         END;
         CALL XXVHDGM(INDEX_VECTOR,CROSSHEAD,HIGHSLOT);/* ASSEMBLE
                                       VERTICAL HEADING IN CROSSHEAD */
         IF LINES > 3 THEN
            CALL XXNWPGE;              /* START AT THE TOP OF THE PAGE
                                       */
 %SKIP(2);
 /* THIS SECTION EDITS THE VALUES OF THE INFORMATION FIELDS DOWN THE */
 /* SIDE OF THE SLOT PRINT INTO THE REQUIRED MEMBERS OF SIDEVALUES.  */
 %SKIP(2);
         SIDEVALUES(1)=#SIOS_0;        /* TOTAL OF SIOS CC 0 */
         SIDEVALUES(2)=#SIOS_1;        /* TOTAL OF SIOS CC 1 */
         IF #SIOS_1 = 0 THEN
            PRINT_THIS_ONE(3)='0'B;    /* IF THERE ARE NO SIOS CC 1,
                                       THEN THERE WILL DEFINITELY BE
                                       NO 'REASONS', (CHANNEL STATUS
                                       WORDS), TO PRINT */
         SIDEVALUES(4)=#SIOS_2;        /* TOTAL OF SIOS CC 2.
                                       SIDEVALUES(3) IS TEMPLATE FOR
                                       REASONS FOR SIO CC 1 WHICH IS
                                       USED IN THE PRINTER LOOP */
         SIDEVALUES(5)=#SIOS_3;        /* TOTAL OF SIOS CC 3. */
         SIDEVALUES(6)=#EVENTS_MAIN;   /* NUMBER OF EVENTS ON MAIN
                                       PATH OF DEVICE */
         IF ALTERNATE = -1 THEN
            PRINT_THIS_ONE(7)='0'B;    /* IF ALTERNATE IS -1, THEN NO
                                       ALTERNATE PATH ADDRESS HAS BEEN
                                       FOUND FOR THIS DEVICE, SO THERE
                                       CANNOT BE ANY EVENTS ON THE
                                       ALTERNATE PATH */
         ELSE
            SIDEVALUES(7)=#EVENTS_ALTERNATE;/* OTHERWISE INSERT NUMBER
                                       OF EVENTS ON ALTERNATE PATH */
         SIDEVALUES(8)=TOT_SEEK;       /* TOTAL CYLINDERS SEEKED */
         SIDEVALUES(9)=MAX_SEEK;       /* MAXIMUM CYLINDERS CROSSED
                                       PER SEEK */
         IF #SIOS_0=0 THEN
            DO;                        /* WE HAVEN'T HAD ANY
                                       SUCCESSFUL SIOS ON THIS DEVICE
                                       SO CANNOT HAVE AVERAGE SEEK
                                       LENGTH AND AVERAGE IO TIME */
               PRINT_THIS_ONE(10),PRINT_THIS_ONE(11)='0'B;
            END;
         ELSE
            DO;                        /* OK */
               SIDEVALUES(10)=TOT_SEEK/#SIOS_0;/* AVERAGE SEEK */
               SIDEVALUES(11)=((TOT_TIME/#SIOS_0)+5)/10;/* AVERAGE IO
                                       TIME IN MSEC ROUNDED */
            END;
         SIDEVALUES(12)=(MAX_TIME+5)/10;/* MAXIMUM I/O TIME */
         CALL XXSUMRW(FROM, TO_ARRAY, ROW_VECTOR, SIZEA);/* FIND
                                       MAXIMUM ELEMENTS IN THE ROWS OF
                                       THE SEEK ARRAY, TO FIND BUSIEST
                                       CYLINDER */
         COMPARE,COMPARE_DIAG,MAXINDEX,DIAG_INDEX=0;/* SET TEMPORARIES
                                       FOR COMPARISON IN FINDING
                                       BUSIEST CYLINDER AND HIGHEST
                                       SELF HIT CYLINDER TO ZERO
                                       INITIAL VALUES */
         DO LOOP = 0 TO SIZEA;         /* SCAN THROUGH VECTOR AND
                                       DIAGONAL ELEMENTS OF SEEK
                                       MATRIX */
            IF ROW_VECTOR(LOOP) > COMPARE THEN
               DO;                     /* WE'VE FOUND A BIGGER ONE */
                  COMPARE=ROW_VECTOR(LOOP);
                  MAXINDEX=LOOP;
               END;
            CURRENT_INDEX=FROM(LOOP);  /* FIRST ELEMENT IN CHAIN */
            DO WHILE(CURRENT_INDEX ^= -1);/* SEARCH ALONG CHAIN FOR
                                       DIAGONAL ELEMENT, UNTIL IT IS
                                       FOUND, DEFINITELY NOT FOUND, OR
                                       THE END OF THE CHAIN IS FOUND */
               IF TO_CYLINDER#(CURRENT_INDEX) = LOOP THEN
                  DO;                  /* FOUND DIAGONAL ELEMENT */
                     IF TO_VALUE(CURRENT_INDEX) > COMPARE_DIAG THEN
                        DO;            /* FOUND A BIGGER ONE */
                           COMPARE_DIAG=
                           TO_VALUE(CURRENT_INDEX);/* NEW MAXIMUM */
                           DIAG_INDEX=LOOP;/* SAVE INDEX */
                        END;
                     CURRENT_INDEX= -1;/* SINCE WE HAVE FOUND THE
                                       ELEMENT, NO NEED TO SEARCH ANY
                                       FURTHER DOWN THE CHAIN, SO SET
                                       CURRENT_INDEX SO THAT WE LEAVE
                                       THE LOOP */
                  END;
               ELSE
                  IF TO_CYLINDER#(CURRENT_INDEX) > LOOP THEN
                     CURRENT_INDEX = -1;/* CYLINDERS ARE IN ORDER ON
                                       CHAIN, SO IF THE CYLINDER
                                       NUMBER IS HIGHER THAN LOOP THEN
                                       WE'VE GONE PAST IT AND IT'S NOT
                                       A LOT OF USE LOOKING FURTHER */
                  ELSE
                     CURRENT_INDEX=
                     NEXT_CYLINDER(CURRENT_INDEX);/* OTHERWISE WE ARE
                                       STILL LOOKING, SO CHAIN ON TO
                                       NEXT ENTRY IN CHAIN */
            END;
         END;
         SIDEVALUES(13)=DIAG_INDEX;    /* HIGHEST HIT */
         SIDEVALUES(14)=MAXINDEX;      /* BUSIEST CYLINDER */
         IF DEVICE_TYPE=4 THEN
            SIDEVALUES(15)=DUMMY_SEEK; /* 3350-FH */
         ELSE
            PRINT_THIS_ONE(15)='0'B;   /* NOT FIXED HEAD DEVICE */
         IF NOINVALSK > 0 THEN
            SIDEVALUES(16)=NOINVALSK;  /* THERE ARE SOME INVALID SEEKS
                                       */
         ELSE
            PRINT_THIS_ONE(16)='0'B;   /* NO INVALID SEEK ADDRESSES */
         IF #SIOS_1 >= 0 THEN
            DO;                        /* SOME SIO 1'S SO THERE HAS
                                       BEEN DEFERRED TIME */
               SIDEVALUES(17)=(
                (TOT_DEFR/(#SIOS_1-DOESNT_COUNT))+5)/10;
               SIDEVALUES(18)=(MAX_DEFR+5)/10;/* MAXIMUM DEFER TIME */
            END;
         ELSE
            PRINT_THIS_ONE(17),PRINT_THIS_ONE(18)='0'B;/* NO SIOS ONE */
 %SKIP(2);
 /* THE NEXT SECTION PRINTS THE HEADING ON THE FIRST PAGE */
 %SKIP(2);
         BUFFER1,BUFFER2='';           /* INITIALISE BOTH PRINT
                                       BUFFERS TO BLANKS */
         ;                             /* FILL IN FIELDS OF FIRST
                                       PRINT BUFFER */
         DEVICE_ADDR_WORDS=DEVICE_ADDRESS_CONN;/* 'DEVICE ADDRESS' */
         DEVICE_ADDR_NUMBER,DEVICE_ADDRESS_SAVE=
         XXCONVH(ADDRESS);             /* CONVERT DEVICE ADDRESS INTO
                                       ITS HEX VALUE TO PRINT IT, ALSO
                                       SAVE IT FOR NEXT TIME */
         DEVICE_TYPE_WORDS=DEVICE_TYPE_CONN;/* 'DEVICE TYPE:' */
         DEVICE_TYPE_NUMBER=DEVCHAR(DEVICE_TYPE);/* DEVICE TYPE */
         SEEK_SLOTS_HEAD='TABLE OF SEEKS BY SLOTS';/* MAIN HEADING */
         SLOT_NUMBERS_CHAR='NUMBER OF SLOTS:';
         SLOT_SIZES_CHAR='SLOT SIZES:';
         SLOT_NUMBERS_VALUE=HIGHSLOT+1;/* NUMBER OF SLOTS */
         SLOT_SIZES_VALUE=SLOTSIZE;    /* SIZE OF EACH SLOT */
         ;                             /* FILL IN FIELDS OF UNDERLINES
                                       OF FIRST LINE */
         U_DEVICE_ADDR=SUBSTR(UNDERLINE,1,3);/* UNDERLINE DEVICE
                                       ADDRESS */
         U_DEVICE_TYPE=
         SUBSTR(UNDERLINE,1,LENDCAR(DEVICE_TYPE));/* UNDERLINE DEVICE
                                       TYPE - MAKING UNDERLINE LENGTH
                                       THE SAME AS THE DESCRIPTION OF
                                       THE DEVICE TYPE */
         U_SLOT_HEADING=SUBSTR(UNDERLINE,1,23);/* UNDERLINE MAIN
                                       HEADING */
         ;                             /* THE TWO LINES ARE NOW
                                       COMPLETED, SO OUTPUT THEM */
         PUT FILE(PRINT) EDIT(BUFFER1, BUFFER2) (
          SKIP(2), A(132), SKIP(0), A(132));
         ;                             /* NOW FILL IN INFORMATION FOR
                                       SECOND LINE OF PRINTOUT, IF
                                       THERE IS AN ALTERNATE PATH
                                       ADDRESS TO PRINT */
         IF PRINT_THIS_ONE(7) THEN
            DO;                        /* PRINT_THIS_ONE(7) IS SET TO
                                       '0'B SHOULD THERE NOT BE AN
                                       ALTERNATE PATH ADDRESS. IN THIS
                                       CASE THERE IS ONE */
               DEVICE_ADDR_WORDS=ALTERNATE_ADDRESS_CONN;/* THE SAME
                                       FIELDS AS USED IN
                                       TOP_HEADING_LINE CAN BE USED
                                       AGAIN AS FAR AS POSITION 19,
                                       WHICH IS ALL THAT IS REQUIRED
                                       ANYWAY. REST OF THE LINE IS NOT
                                       PRINTED */
               DEVICE_ADDR_NUMBER,
               SAVE_ALTERNATE_ADDRESS=XXCONVH(ALTERNATE);/* CONVERT
                                       ALTERNATE PATH ADDRESS TO
                                       PRINTABLE HEX AND SAVE IT */
               ;                       /* UNDERLINE IS ALREADY SET UP
                                       IN BUFFER2, SO NOW PRINT THEM */
               PUT FILE(PRINT)
               EDIT(SUBSTR(BUFFER1,1,19),SUBSTR(BUFFER2,1,19) )(
                SKIP, A(19), SKIP(0), A(19));
            END;
         ELSE
            PUT FILE(PRINT) SKIP;      /* OTHERWISE WE NEED A BLANK
                                       LINE */
         ;                             /* ASSEMBLY OF THIRD HEADING
                                       LINE */
         BUFFER1,BUFFER2='';           /* BLANK THE LINES OUT AGAIN */
         FROMSPACE='   T';             /* PART OF VERTICAL LABEL 'TO' */
         HEADING1_SPACE=CROSSHEAD(1);  /* FIRST LINE OF HEADING ACROSS
                                       TOP OF MATRIX */
         NUMBER_OF_CYLS_WORDS=NUM_CYL_CONN;/* 'NUMBER OF CYLINDERS' */
         PLUSTWENTY='+20';
         NUMBER_CYLINDERS=SIZEA-19;    /* SIZEA ALREADY INCLUDES
                                       ALLOWANCE AT THE END FOR
                                       ALTERNATE TRACKS ETC */
         TO_LETTERS='   O';            /* OTHER HALF OF LABEL 'TO' */
         HEADING2_SPACE=CROSSHEAD(2);  /* SECOND LINE OF HEADING
                                       ACROSS THE TOP OF THE PAGE */
         PUT FILE(PRINT) EDIT(BUFFER1, BUFFER2) (
          SKIP, A(132), SKIP, A(132)); /* HEADING LINES NOW ASSEMBLED,
                                       SO PRINT THEM */
         BUFFER1='';                   /* LAST HEADING LINE ASSEMBLY */
         FROMSPACE='FROM';
         HEADING1_SPACE=CROSSHEAD(3);  /* LAST PART OF MATRIX HEADING */
         PUT FILE(PRINT)
         EDIT(BUFFER1, 'GENERAL INFORMATION', SUBSTR(UNDERLINE, 1, 19) )

         (SKIP, A(132), SKIP, A(19), SKIP(0), A(19));/* LAST OF
                                       HEADING PRINT */
 %SKIP(4);
 /* INITIALISATION OF COUNTERS CONTROLLING THE PRINTING OF THE SIDE
 INFORMATION */
         PRINTED=0;                    /* COUNTER OF MEMBERS OF
                                       SIDEVALUES PRINTED YET */
         #CSWS=0;                      /* COUNTER OF NUMBER OF CHANNEL
                                       STATUS WORDS PRINTED AFTER A
                                       SIO CONDITION CODE 1 IS
                                       RECEIVED */
         NEXTA=2;                      /* CONTROLS WHICH OF THE THREE
                                       SIDE PRINTING OPTIONS IS TO BE
                                       EXECUTED NEXT */
         NEXTBUT1=1;                   /* CONTROLS WHICH OF THE THREE
                                       SIDE PRINTING OPTIONS IS TO BE
                                       EXECUTED AFTER NEXTA */
 %PAGE;
 /* PRINTING LOOP OF FIRST PAGE */
 %SKIP(2);
         DO LOOP = 0 TO HIGHSLOT;
 %SKIP(2);
 /* GENERAL INFORMATION PRINT */
 %SKIP;
            BUFFER2='';                /* BLANK OUT BUFFER */
            SELECT(NEXTA);
               WHEN(1)
                  DO;                  /* GENERAL INFORMATION PRINT */
                     DO WHILE(PRINTED < 18);
                        PRINTED=PRINTED+1;
                        IF PRINT_THIS_ONE(PRINTED) THEN
                           GOTO SORT_OUT_THE_PRINTING;
                     END;
                     NEXTA,NEXTBUT1=2; /* IF WE DROP THROUGH THE
                                       BOTTOM OF THE LOOP, THEN THERE
                                       IS NOTHING LEFT TO PRINT, SO
                                       THERE WILL BE SPACES FOR THE
                                       REST OF THE PRINTING */
                     LEAVE;
 SORT_OUT_THE_PRINTING:
                     IF PRINTED = 3 THEN
                        GOTO CSWS_PRINT;/* SPECIAL PRINT FOR SIOS 1
                                       CHANNEL STATUS WORDS */
                     SEEK_VALUE=SIDEVALUES(PRINTED);/* INSERT VALUE
                                       FIELD */
                     EQUALS='=';       /* EQUALS CHARACTER */
                     SEEK_WORDS=SIDEHEADS(PRINTED);/* DEFINITION OF
                                       VALUE */
                     NEXTA=2;
                     IF PRINTED < 18 THEN
                        IF PRINTED = 2 THEN
                           NEXTBUT1=3;
                        ELSE
                           NEXTBUT1=1;
                     ELSE
                        NEXTBUT1=2;
                  END;
               WHEN(2)
                  DO;                  /* BLANK LINE */
                     NEXTA=NEXTBUT1;
                  END;
               WHEN(3)
 CSWS_PRINT:
                  DO;                  /* PRINT OF CHANNEL STATUS
                                       WORDS AFTER A START IO
                                       CONDITION CODE 1 */
                     PRINTED=3;        /* SET PRINTED TO ENSURE THAT
                                       NEXT TIME IN WILL PRINT THE
                                       RIGHT VALUE */
                     SEEK_WORDS=SIDEHEADS(3);/* VALUE INSERT */
                     EQUALS='=';       /* EQUALS CHARACTER INSERT */
                     #CSWS=#CSWS+1;    /* COUNT DOWN ARRAY OF CHANNEL
                                       STATUS WORDS */
                     IF #CSWS <= 6 THEN
                        IF REASONS(#CSWS) THEN
                           DO;         /* THERE IS ANOTHER CHANNEL
                                       STATUS WORD TO PRINT */
                              IF (#CSWS=6)&(
                               REASONS(#CSWS)='1111111111111111'B) THEN
                                 SUBSTR(SEEK_WORDS,5,6)='OTHERS';/*
                                       TABLE OVERFLOW HAS OCCURRED SO
                                       SET LAST REASONS CODE TO
                                       'OTHERS' */
                              ELSE
                                 CSW_VALUE =
                                 XXCONVT(REASONS(#CSWS));/* CONVERT
                                       BINARY CODE TO PRINTABLE HEX */
                              SEEK_VALUE=#REASONS(#CSWS);/* INSERT
                                       NUMBER OF TIMES THAT THIS
                                       CHANNEL STATUS WORD OCCURRED */
                              NEXTA=3; /* TRY TO PRINT ANOTHER CSW
                                       NEXT TIME ROUND THE LOOP */
                           END;
                        ELSE
                           GOTO BLKSIN;
                     ELSE
 BLKSIN:
                        DO;            /* NO MORE REASONS LEFT TO
                                       PRINT */
                           BUFFER2=''; /* BLANK OUT BUFFER AGAIN AS
                                       THERE SHOULD BE A BLANK LINE
                                       BEFORE CONTINUING WITH START IO
                                       CONDITION CODE 2 */
                           NEXTA=1;    /* GO BACK TO PRINTING THE REST
                                       OF THE INFORMATION NEXT TIME*/
                        END;
                  END;
            END;
            DO LOOP2 = 1 TO HIGHSLOT+1;
               SEEK_ARRAY(LOOP2*2)='.';/* FULL STOPS AT PRINT
                                       POSITIONS */
            END;
            SEEK_ARRAY(LOOP*2+2)='+';  /* INSERT + SIGN ON DIAGONAL */
            DOWN_NUMBER,FROW=LOOP*SLOTSIZE;/* DOWN_NUMBER EDITS FIRST
                                       CYLINDER OF SLOT INTO PRINT
                                       LINE, FROW IS THE CONTROLLER OF
                                       THE LOOP DOWN THE ROWS
                                       ACCUMULATING TOTALS FOR THE
                                       SLOTS */
            SLOT_TOTALS=0;             /* ZERO SLOT TOTALS */
            LROW=MIN(FROW+SLOTSIZE-1,SIZEA);/* LAST CYLINDER INDEX OF
                                       SLOT - ENSURING THAT SLOT DOES
                                       NOT GO OUTSIDE ARRAY */
            DO LOOP2 = FROW TO LROW;   /* LOOP DOWN THE ROWS TOTALLING
                                       SLOT VALUES */
               CURRENT_INDEX=FROM(LOOP2);/* HEAD OF THE CHAIN */
               DO WHILE(CURRENT_INDEX ^= -1);/* UNTIL WE RUN OUT OF
                                       CHAIN */
                  FILLINDEX=TO_CYLINDER#(CURRENT_INDEX)/
                  SLOTSIZE;            /* INDEX OF SLOT THIS CYLINDER
                                       NUMBER SHOULD GO IN */
                  SLOT_TOTALS(FILLINDEX)=
                  SLOT_TOTALS(FILLINDEX)+TO_VALUE(CURRENT_INDEX);/*
                                       ADD TO TOTAL FOR THIS SLOT */
                  CURRENT_INDEX=NEXT_CYLINDER(CURRENT_INDEX);/* CHAIN
                                       DOWN TO NEXT CYLINDER IN ROW */
               END;
            END;
            DO LOOP2 = 0 TO HIGHSLOT;  /* NOW LOOP ALONG SLOT TOTALS
                                       AND PUT NON-ZERO ENTRIES IN
                                       PRINT LINE */
               IF SLOT_TOTALS(LOOP2) > 0 THEN
                  SEEK_ARRAY(2*LOOP2+2)=
                  XXEXPCN(SLOT_TOTALS(LOOP2));/* CONVERT TO CODED
                                       SINGLE CHARACTER AND PUT INTO
                                       PRINT LINE */
            END;
            PUT FILE(PRINT) EDIT(BUFFER2) (SKIP, A(132));/* OUTPUT
                                       COMPLETED LINE */
         END;                          /* OF FIRST PAGE PRINT LOOP */
         ;                             /* FIRST PAGE NOW PRINTED */
 %PAGE;
 /* FIND BUSIEST ROWS AND COLUMNS FOR SECOND PAGE PRINTING */
 %SKIP(2);
         SELECT (METHOD);
            WHEN(1)
               ;                       /* ROW SUMS - ALREADY EVALUATED
                                       */
            WHEN(2)
               DO;                     /* MAXIMUM ELEMENTS */
                  CALL
                  XXMAXEL(FROM,TO_ARRAY,ROW_VECTOR,COL_VECTOR, SIZEA);
               END;
            WHEN(3)
               DO;                     /* MAXIMUM ELEMENTS NOT
                                       COUNTING DIAGONALS */
                  CALL
                  XXMAXND(FROM,TO_ARRAY,ROW_VECTOR,COL_VECTOR, SIZEA);
               END;
         END;
         DO LOOP = 0 TO SIZEA;
            INDEX_VECTOR(LOOP)=LOOP;   /* USE AS INDICES TO CYLINDERS
                                       TO KEEP TRACK OF WHICH ORDER
                                       THEY ARE PARTITIONED */
         END;
         CALL XXPARTM(INDEX_VECTOR,ROW_VECTOR,50,SIZEA);/* PARTITION
                                       THE TOP 50 VALUES OF
                                       ROW_VECTOR, KEEPING TRACK OF
                                       THEM USING INDEX_VECTOR */
         DO LOOP = 0 TO 49;
            ROW_VECTOR(LOOP)=INDEX_VECTOR(LOOP);/* TRANSFER THE TOP
                                       ONES INTO ROW_VECTOR */
         END;
         CALL XXQSRT1(ROW_VECTOR,49);  /* SORT THEM */
         IF METHOD = 1 THEN
            DO LOOP = 0 TO 49;         /* IF METHOD IS ROW SUMS, THE
                                       ROW SUMS MUST EQUAL THE COLUMN
                                       SUMS GIVE OR TAKE ONE (WHEN THE
                                       HEAD COMES TO A CYLINDER
                                       (COLUMN ENTRY) IT MUST LEAVE
                                       THE SAME CYLINDER (ROW ENTRY).
                                       THUS THERE IS NO NEED TO
                                       PERFORM THE SAME PARTITION AND
                                       SORT - USE THE ROW VALUES FOR
                                       THE COLUMNS */
               COL_VECTOR(LOOP)=ROW_VECTOR(LOOP);
            END;
         ELSE
            DO;                        /* MAXIMUM ELEMENTS AND MAXIMUM
                                       NO DIAGONALS NEED NOT HAVE THE
                                       SAME ROW AND COLUMN MAXIMA, SO
                                       PROCESS THE COLUMNS SEPARATELY */
               DO LOOP = 0 TO SIZEA;
                  INDEX_VECTOR(LOOP)=LOOP;/* USE AS INDICES TO KEEP
                                       TRACK OF THE PARTITIONED
                                       CYLINDERS */
               END;
               CALL XXPARTM(INDEX_VECTOR,COL_VECTOR,50,SIZEA);/*
                                       PARTITION THE TOP ELEMENTS */
               DO LOOP = 0 TO 49;
                  COL_VECTOR(LOOP)=INDEX_VECTOR(LOOP);
               END;
               CALL XXQSRT1(COL_VECTOR,49);/* SORT THEM */
            END;
 %SKIP(2);
         CALL XXVHDGM(COL_VECTOR,CROSSHEAD,49);/* PREPARE THE HEADING
                                       TO GO ACROSS THE TOP OF THE
                                       SEEK MATRIX */
 %SKIP(4);
 /* HEADINGS ON TOP OF THE SECOND PAGE */
 %SKIP(2);
         CALL XXNWPGE;                 /* START A NEW PAGE */
         LINES=200;                    /* MAKE SURE THAT WHATEVER
                                       FOLLOWS THIS IS PRINTED ON A
                                       NEW PAGE */
 %SKIP(2);
         ;                             /* FIRST LINE */
         BUFFER1,BUFFER2='';           /* BLANK OUT BUFFERS */
         DEVICE_ADDR_WORDS=DEVICE_ADDRESS_CONN;/* 'DEVICE ADDRESS:' */
         DEVICE_ADDR_NUMBER=DEVICE_ADDRESS_SAVE;/* DEVICE ADDRESS IN
                                       PRINTABLE HEX */
         DEVICE_TYPE_WORDS=DEVICE_TYPE_CONN;/* 'DEVICE TYPE:' */
         DEVICE_TYPE_NUMBER=DEVCHAR(DEVICE_TYPE);/* DEVICE TYPE */
         HEADING_WORDS= 'TABLE OF SEEKS BY BUSIEST CYLINDERS';/* MAIN
                                       HEADING FOR THIS PAGE */
         METHOD_PROMPT='METHOD USED:';
         METHOD_FORMS=METHOD_CHARS(METHOD);/* METHOD USED */
 %SKIP(2);
         ;                             /* UNDERLINES OF HEADING LINE */
         U2_DEVICE=SUBSTR(UNDERLINE,1,3);/* UNDERLINE OF DEVICE
                                       ADDRESS */
         U2_DEVICE_TYPE=
         SUBSTR(UNDERLINE,1,LENDCAR(DEVICE_TYPE));/* MAKE UNDERLINE
                                       THE SAME LENGTH AS THE DEVICE
                                       TYPE CHARACTERS */
         U2_HEADING=UNDERLINE;         /* UNDERLINE OF MAIN HEADING */
 %SKIP;
         PUT FILE(PRINT) EDIT(BUFFER1, BUFFER2) (
          SKIP(2), A(132), SKIP(0), A(132) );/* PRINT COMPLETED
                                       BUFFERS */
         ;                             /* NOW FILL IN INFORMATION FOR
                                       SECOND LINE OF PRINTOUT, IF
                                       THERE IS AN ALTERNATE PATH
                                       ADDRESS TO PRINT */
         IF PRINT_THIS_ONE(7) THEN
            DO;                        /* PRINT_THIS_ONE(7) IS SET TO
                                       '0'B SHOULD THERE NOT BE AN
                                       ALTERNATE PATH ADDRESS. IN THIS
                                       CASE THERE IS ONE */
               DEVICE_ADDR_WORDS=ALTERNATE_ADDRESS_CONN;/* THE SAME
                                       FIELDS AS USED IN
                                       TOP_HEADING_LINE CAN BE USED
                                       AGAIN AS FAR AS POSITION 19,
                                       WHICH IS ALL THAT IS REQUIRED
                                       ANYWAY. REST OF THE LINE IS NOT
                                       PRINTED */
               DEVICE_ADDR_NUMBER=SAVE_ALTERNATE_ADDRESS;/* ALTERNATE
                                       PATH ADDRESS IN PRINTABLE HEX */
               ;                       /* UNDERLINE IS ALREADY SET UP
                                       IN BUFFER2, SO NOW PRINT THEM */
               PUT FILE(PRINT)
               EDIT(SUBSTR(BUFFER1,1,19),SUBSTR(BUFFER2,1,19) )(
                SKIP, A(19), SKIP(0), A(19));
            END;
         ELSE
            PUT FILE(PRINT) SKIP;      /* OTHERWISE WE NEED A BLANK
                                       LINE */
         ;                             /* ASSEMBLY OF THIRD HEADING
                                       LINE */
         BUFFER1,BUFFER2='';           /* BLANK THE LINES OUT AGAIN */
         FROMSPACE='   T';             /* PART OF VERTICAL LABEL 'TO' */
         HEADING1_SPACE=CROSSHEAD(1);  /* FIRST LINE OF HEADING ACROSS
                                       TOP OF MATRIX */
         NUMBER_OF_CYLS_WORDS=NUM_CYL_CONN;/* 'NUMBER OF CYLINDERS' */
         PLUSTWENTY='+20';
         NUMBER_CYLINDERS=SIZEA-19;    /* SIZEA ALREADY INCLUDES
                                       ALLOWANCE AT THE END FOR
                                       ALTERNATE TRACKS ETC */
         TO_LETTERS='   O';            /* OTHER HALF OF LABEL 'TO' */
         HEADING2_SPACE=CROSSHEAD(2);  /* SECOND LINE OF HEADING
                                       ACROSS THE TOP OF THE PAGE */
         PUT FILE(PRINT) EDIT(BUFFER1, BUFFER2) (
          SKIP, A(132), SKIP, A(132)); /* HEADING LINES NOW ASSEMBLED,
                                       SO PRINT THEM */
         BUFFER1='';                   /* LAST HEADING LINE ASSEMBLY */
         FROMSPACE='FROM';
         HEADING1_SPACE=CROSSHEAD(3);  /* LAST PART OF MATRIX HEADING */
         PUT FILE(PRINT) EDIT(BUFFER1) (SKIP, A(132));/* HEADING PRINT
                                       */
         PUT FILE(PRINT) SKIP;         /* BLANK LINE */
         IF LAST_USED > 32000 THEN
            SEEK_WARNING='1'B;         /* SPARSE MATRIX TABLE OVERFLOW
                                       HAS OCCURRED, SO PRINT THE
                                       WARNING */
         DO LOOP = 0 TO 49;            /* NOW PRINT THE LINES */
            BUFFER2='';                /* BLANK OUT PRINT LINE */
            DO LOOP2 = 1 TO 50;
               SEEK_ARRAY(LOOP2*2)='.';/* FULL STOPS AT PRINT
                                       POSITIONS */
            END;
            SEEK_ARRAY(LOOP*2+2)='+';  /* INSERT + SIGN ON DIAGONAL */
            IF SEEK_WARNING THEN
               IF LOOP > 40 THEN
                  WARNING_WORDS=WARNINGS(LOOP-40);/* INSERT WARNING
                                       BOX ON LAST TEN LINES OF MATRIX
                                       PRINTOUT */
               ELSE
                  ;
            ELSE
               IF LOOP = 49 THEN
                  DO;                  /* OTHERWISE JUST PRINT EXTENT
                                       OF TABLE USE, AS A GUIDE TO HOW
                                       BIG THE TABLE SHOULD BE */
                     SEEK_WORDS='# ELMTS IN MATRIX';
                     EQUALS='=';
                     SEEK_VALUE=LAST_USED;
                  END;
            CURRENT_INDEX=FROM(ROW_VECTOR(LOOP));/* GET INDEX IN
                                       TO_ARRAY OF FIRST ELEMENT IN
                                       CHAIN */
            LOOP2=0;                   /* COUNT ALONG PRINT SPACES */
            DOWN_NUMBER=ROW_VECTOR(LOOP);/* EDIT IN FROM CYLINDER
                                       NUMBER */
            DO WHILE((LOOP2 <= 49) & (CURRENT_INDEX ^= -1));/* CARRY
                                       ON UNTIL EITHER WE HAVE RUN OUT
                                       OF SPACES TO PRINT, OR THERE
                                       ARE NO MORE VALUES LEFT IN THE
                                       CHAIN TO PRINT */
               TONUMBER=COL_VECTOR(LOOP2);/* NUMBER OF CYLINDER WE
                                       WANT TO FIND */
               PRESENT_CYLINDER#= TO_CYLINDER#(CURRENT_INDEX);/*
                                       NUMBER OF CYLINDER THAN WE HAVE
                                       AT THE MOMENT */
               SELECT;
                  WHEN(TONUMBER < PRESENT_CYLINDER#)
                     DO;               /* THE INDEX IN THE CHAIN IS
                                       TOO LARGE, SO SKIP ALONG LOOP
                                       UNTIL WE FIND ONE THAT IS AT
                                       LEAST AS BIG */
                        LOOP2=LOOP2+1;
                     END;
                  WHEN(TONUMBER = PRESENT_CYLINDER#)
                     DO;               /* FOUND ONE - PRINT VALUE AND
                                       BOTH CHAIN DOWN THE CYLINDER
                                       CHAIN AND INCREASE LOOP2 TO
                                       LOOK FOR NEXT VALUE */
                        SEEK_ARRAY(LOOP2*2+2)=
                        XXEXPCM(TO_VALUE(CURRENT_INDEX));
                        LOOP2=LOOP2+1;
                        CURRENT_INDEX=
                        NEXT_CYLINDER(CURRENT_INDEX);
                     END;
                  WHEN(TONUMBER > PRESENT_CYLINDER#)
                     DO;               /* CYLINDER INDEX IN CHAIN IS
                                       TOO LOW - CHAIN DOWN */
                        CURRENT_INDEX=
                        NEXT_CYLINDER(CURRENT_INDEX);
                     END;
               END;                    /* OF SELECT GROUP */
            END;
            PUT FILE(PRINT) EDIT(BUFFER2) (SKIP, A(132));
         END;
      END;
      RETURN;                          /* TO XXMAINL */
   END;                                /* OF XXPRTDV */
