$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'
*
*        LAST UPDATED 09 MAY 73 - BMD (*BMD*)
*                     FIX PARM OF '' AND SHARE
*                     SUBPOOL 78 FOR IKJPUTGT
*
*        LAST UPDATED 05 JUN 80 - HMD (*HMD MM/YY*)
*                     ADD ALIASES AUTH AND XEQ
*                     USE PUTLINE FOR ALL MESSAGES
*                     ADD LPDE SEARCH PRIOR TO BLDL         *HMD 06/80*
*                     TURN ON AUTHORIZATION DYNAMICALLY     *HMD 06/80*
*                     IF COMMAND INVOKED IS '$' OR 'AUTH'   *HMD 06/80*
*                                                           *HMD 06/80*
*
         SPACE 2
$        TSOENTER REGS=YES,PL=(CPPL,PARSE,IO),WORK=WORKLEN
         EJECT
TSODSECT DSECT ,                        RE-ESTABLIST DSECT
DOUBLE   DC    D'0'                     FOR CONVERSIONS
ATTLIST  ATTACH DE=0,SF=L               PHONEY ATTACH LIST
ATTLISTL EQU   *-ATTLIST                LENGTH
PTPB     PUTLINE MF=L                   PHONEY PUTLINE LIST *HMD 06/80*
ATTTCB   DC    A(0)                     TCB ADDRESS
ATTECB   DC    F'0'                     ECB ADDRESS
STAECMP  DC    F'0'                     CMP FOR STAI
BLDL     DC    2H'0',CL58' '            BLDL LIST
PARM     DC    H'0',CL100' '            PARM FIELD
PARMPTR  DC    A(0)                     POINTER TO PARM
         DC    3A(0)                    FAKE REST OF CPPL
OLD      DS    F                INFORMATIONAL MESSAGE OLD   *HMD 06/80*
OLDA     DS    A                MESSAGE AREA ADDRESS        *HMD 06/80*
MSGAREA  DS    A                MESSAGE HEADER              *HMD 06/80*
MSGID    DS    CL8              MESSAGE IDENTIFICATOR       *HMD 06/80*
MSGTEXT  DS    CL72             MESSAGE TEXT                *HMD 06/80*
WORKUNPK DS    CL5              UNPACK AREA                 *HMD 06/80*
LPDESAVE DS    18F              SAVE AREA FOR REGISTERS     *HMD 06/80*
LPDESV1  DS    18F              SAVE AREA FOR LPDE ROUTINE  *HMD 06/80*
AUTHFLAG DS    X                AUTHFLAG                    *HMD 06/80*
WORKLEN  EQU   *-TSOWORK        LENGTH OF WORK AREA         *HMD 06/80*
$        CSECT
         TITLE '$ - INITIALIZATION CODE'
         MVC   BLDL(4),=AL2(1,58)       NUMBER/LEN
         XC    PPLRANS(4),PPLRANS       CLEAR ANSWER FIELD
         XC    TSOECB(4),TSOECB         AND ECB
         XC    MSGAREA,MSGAREA          CLEAR MESSAGE AREA  *HMD 06/80*
         MVI   AUTHFLAG,0               CLEAR AUTH FLAG     *HMD 06/80*
         MVC   MSGAREA(2),=AL2(84)      MOVE IN LENGTH      *HMD 06/80*
         MVC   OLD,=F'1'                                    *HMD 06/80*
         LA    R1,MSGAREA                                   *HMD 06/80*
         ST    R1,OLDA                                      *HMD 06/80*
         MVC   MSGID(8),=C'XEQ060I '    MOVE IN ID          *HMD 06/80*
         MVC   MSGTEXT,BLANKS           CLEAR MESSAGE TEXT  *HMD 06/80*
         MVC   STAECMP(4),TSOECB        CLEAR IT THIS WAY
         L     R15,CPPLCBUF             LOAD CMD BUFFER
         TSOPARSE CBUF=(15),PCL==V(PCL) CALL PARSE ROUTINE
         LTR   R15,R15                  TEST RETURN CODE
         BZ    ANALYZE                  OK, CONTINUE
BADPARSE LA    R0,L'MSG01               LOAD MESSAGE SIZE
         LA    R1,MSG01                 AND MESSAGE ADDR
         B     PRELEAVX                 DONE, FORGET IT
         TITLE '$ - ANALYZE INPUT'
         LUSE  PDL,R11                  TELL ASSEMBLER
ANALYZE  L     R11,PPLRANS              LOAD ANSWER AREA
         L     R1,MODNAME               GET MODULE NAME ENTRY
         TM    MODNAME+6,X'80'          IS IT THERE
         BNO   BADPARSE                 NO, STOP HERE
         MVC   BLDL+4(8),=8C' '         CLEAR MODULE NAME
         LH    R15,MODNAME+4            GET LEN
         BCTR  R15,0                    -1 FOR EXECUTE
         EX    R15,MVCMOD               DO IT
         LH    R2,PDLPARM+4             GET LENGTH
         L     R3,PDLPARM               GET ADDRESS
         CH    R2,=H'100'               CHECK IT
         BNH   LENOK                    OK, SO FAR
         LA    R2,L'MSG02-1             LENGTH TO MOVE      *HMD 06/80*
         LA    R1,MSG02                 GET MESSAGE
         EX    R2,PREMVC                MOVE MESSAGE TEXT   *HMD 06/80*
         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 06/80*X
               MF=(E,IOPL)                                  *HMD 06/80*
         LA    R2,100                   SET AT MAXIMUM
LENOK    LTR   R2,R2                    TEST FOR NON-ZERO LEN *BMD*
         STH   R2,PARM                  SAVE IN LENGTH
         BCTR  R2,0                     SUBTRACT ONE
         BNP   *+12                     NOT THERE, NO MOVE *BMD*
         EX    R2,MVCPARM               DO THAT
         B     *+10                     AROUND XC
         XC    PARM+2(40),PARM+2        CLEAR IT FOR ACCIDENTAL PARSE
         LA    R1,PARM                  LOAD PARM FIELD
         ST    R1,PARMPTR               SAVE IT THERE
         MVI   PARMPTR,X'80'            FLAG AS LAST
         MVC   PARMPTR+4(12),CPPLUPT    JUST IN CASE CALL CP
         EJECT
LPDESRCH DS    0H                       IF MODULE IS IN LPA *HMD 06/80*
*                                       THEN FORGET BLDL    *HMD 06/80*
         STM   R0,R15,LPDESAVE          SAVE REGISTERS      *HMD 06/80*
         L     R3,CVTPTR                GET CVT ADDRESS
         LUSE  CVT,R3                   ADDRESS THE CVT     *HMD 06/80*
         L     R15,CVTQLPAQ             POINT TO ALPAQ      *HMD 06/80*
         L     R15,0(R15)               1ST CDE ON QUEUE    *HMD 06/80*
         LA    R15,0(R15)               CLEAR FOR ICM       *HMD 06/80*
         LTR   R15,R15                  ANYTHING THERE?     *HMD 06/80*
CDELOOP  BZ    DIRSRCH                  NO, SEARCH DIRECT   *HMD 06/80*
         CLC   BLDL+4(8),8(R15)         NAMES MATCH?        *HMD 06/80*
         BE    LPDEEXIT                 YES, RELOAD REGS    *HMD 06/80*
         ICM   R15,7,1(R15)             GET NEXT POINTER    *HMD 06/80*
         B     CDELOOP                  LOOP AGAIN          *HMD 06/80*
DIRSRCH  LM    R0,R1,BLDL+4             PICK UP THE NAME    *HMD 06/80*
         L     R15,CVTLPDSR             GET LPA SEARCH ROUTINE
         XC    LPDESV1(18*4),LPDESV1    CLEAR PHONY SAVEAREA
         LR    R2,R13                   SAVE R13 ADDRESS    *HMD 06/80*
         LA    R13,LPDESV1              POINT TO PHONY      *HMD 06/80*
         BALR  R14,R15                  SEARCH THE LPA DIRECTORY
         B     LPDEEXIT                 EUREKA, WE FOUND IT *HMD 06/80*
         B     NOTLPA                   SHUCKS, NOT THERE   *HMD 06/80*
         LDROP R3                       GET RID OF BASE     *HMD 06/80*
LPDEEXIT LR    R13,R2                   RESTORE R13         *HMD 06/80*
         LM    R0,R15,LPDESAVE          RESTORE REGS        *HMD 06/80*
         B     DOATTACH                 DO THE ATTACH       *HMD 06/80*
NOTLPA   DS    0H                       NOT IN LPA LIB      *HMD 06/80*
         LR    R13,R2                   RESTORE REG 13      *HMD 06/80*
         LM    R0,R15,LPDESAVE          RESTORE REGISTERS   *HMD 06/80*
         XR    R1,R1                    CLEAR DCB ADDRESS
         BLDL  (1),BLDL                 DO IT
         CH    R15,=H'8'                CHECK JUST IN CASE
         BNH   *+8                      OK
         LA    R15,12                   LOAD ERROR CODE
         B     *+4(R15)                 DO BRANCH
         B     DOATTACH                 RETURN CODE=0
         B     NONESUCH                 NO SUCH MODULE
         B     IOERR                    I/O ERROR IN SEARCH
         LA    R1,MSG03                 BAD RETURN CODE FROM BLDL
         LA    R0,L'MSG03               AND LEN
         B     PRELEAVX                 DIE RIGHT NOW
         TITLE '$ - ERROR AND RETURN CODE'
NONESUCH MVC   PARM(L'NOMOD),NOMOD      MOVE IN MESSAGE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MODULE NAME
         LA    R1,PARM                  LOAD PLACE
         LA    R0,L'NOMOD               LEN
         B     PRELEAVX                 DO IT
         SPACE 2
IOERR    LA    R1,IOERRMSG              LOAD MESSAGE
         LA    R0,L'IOERRMSG            LENGTH
         SPACE 2
PRELEAVX MVI   STAECMP+3,20             ERROR CODE
PRELEAVE MVC   MSGTEXT,BLANKS           CLEAR MSG TEXT      *HMD 06/80*
         LR    R2,R0                    SAVE LENGTH         *HMD 06/80*
PREMVC   MVC   MSGTEXT(0),0(R1)         << EXECUTED >>      *HMD 06/80*
         BCTR  R2,0                     DOWN 1 FOR MVC      *HMD 06/80*
         EX    R2,PREMVC                MOVE IN TEXT        *HMD 06/80*
         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 06/80*X
               MF=(E,IOPL)                                  *HMD 06/80*
RELEASEA IKJRLSA PPLRANS
         L     R2,STAECMP               TEST CMP CODE
         LTR   R2,R2                    TEST IT
         BP    *+6                      AROUND CLEAR
         XR    R2,R2                    CLEAR IT
         TSOLEAVE RETCODE=(R2)          LEAVE NOW
         TITLE '$ - SOME CONSTANTS'
MSG01    DC    C'MISSING PROGRAM NAME OR PARSE ERROR, PLEASE RE-ENTER C+
               OMMAND'
MSG02    DC    C'PARM FIELD TOO LONG, TRUNCATED AT 100 CHARACTERS'
MSG03    DC    C'** ERROR IN BLDL ** CONTACT SYSTEMS PERSONNEL'
MSG10    DC    C'** ATTACH ERROR ** CONTACT SYSTEMS PERSONNEL'
IOERRMSG DC    C'** I/O ERROR DURING BLDL ** CONTACT SYSTEMS PERSONNEL'
NOMOD    DC    C'PROGRAM 12345678 NOT FOUND, PLEASE RE-ENTER COMMAND'
ABCODE   DC    C'PROGRAM 12345678 ABENDED, SYS=000, USER=0000'
NONZERO  DC    C'PROGRAM 12345678 ENDED, COND. CODE=0000     '
*  NOTE THAT NONZERO ABOVE MUST BE SAME LENGTH AS ABCODE    *HMD 06/80*
BLANKS   DC    CL80' '                                      *HMD 06/80*
MODOFF   EQU   8
ABSYS    EQU   30
ABUSER   EQU   40
NONCODE  EQU   35
TRT      EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         TITLE '$ - PARSE PCL'
PCL      IKJPARM DSECT=PDL
MODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  +
               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   +
               HELP='NAME OF PROGRAM TO BE CALLED'
         SPACE 2
PDLPARM  IKJPOSIT QSTRING,HELP='PARM FIELD FOR PROGRAM'
         IKJENDP
         TITLE '$ - SET UP AND ATTACH PROGRAM'
DOATTACH TM    CPPLCBUF,X'80'           CALL ON ME?
         BO    NOECTCHG                 RIGHT, DON'T CHANGE ECT
         L     R6,CPPLECT               GET ECT ADDRESS     *HMD 06/80*
         LUSE  ECT,R6                   ADDRESS THE ECT     *HMD 06/80*
         MVC   ECTPCMD,BLDL+4           MOVE IN MODULE NAME
         LDROP R6                       CLEAR R1            *HMD 06/80*
NOECTCHG LA    R1,PARMPTR               LOAD PARM POINTER
         SPACE 3
         XC    ATTLIST(ATTLISTL),ATTLIST  CLEAR ATTACH LIST
         XC    ATTECB(4),ATTECB         CLEAR IT
ATTACH   ATTACH EPLOC=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,                +
               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,                +
               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78  *BMD*
         LTR   R15,R15                  TEST RETURN CODE
         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT
         LA    R1,MSG10                 MESSAGE ADDRESS
         LA    R0,L'MSG10               AND LEN
         B     PRELEAVX                 DONE FOR
         SPACE 3
ATTWAIT  ST    R1,ATTTCB                SAVE TCB ADDRESS
         WAIT  1,ECB=ATTECB             WAIT FOR SUBTASK
         OC    STAECMP(4),STAECMP       GET CMP FROM TASK
         BZ    GETRC                    OK, GET RETURN CODE
         MVI   STAECMP,X'00'            CLEAR HIGH BYTE
         L     R1,STAECMP               GET IT
         SLL   R1,4                     NOW HAVE 0SSSUUU0
         ST    R1,ATTECB                SAVE IT
         MVC   PARM(L'ABCODE),ABCODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MOD NAME
         UNPK  DOUBLE(4),ATTECB(3)      GET FOR HEX
         MVC   PARM+ABSYS(3),DOUBLE     DO THAT
         TR    PARM+ABSYS(3),TRT        GET IN PRINTABLE
         MVC   ATTECB(2),STAECMP+2      GET LOW 2 BYTES
         NI    ATTECB,X'0F'             OFF LOW SYSTEM BYTE
         LH    R15,ATTECB               LOAD CMP CODE
         CVD   R15,DOUBLE               CONVERT IT
         UNPK  PARM+ABUSER(4),DOUBLE+5(3)
         OI    PARM+ABUSER+3,C'0'       PRINTABLE
         B     DETACH                   DO DETACH
         SPACE 3
GETRC    L     R15,ATTECB               GET ECB
         LA    R15,0(,R15)              OFF POST FLAGS
         LTR   R15,R15                  TEST RETURN CODE
         ST    R15,STAECMP              SAVE IT IN RIGHT FIELD
         MVI   STAECMP,X'FF'            SET NO-FLAG
         BZ    DETACH                   NO FORMAT TO DO
         MVI   STAECMP,X'00'            OFF FLAG
         CVD   R15,DOUBLE               CONVERT IT
         MVC   PARM(L'NONZERO),NONZERO  MOVE IN CODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN NAME
         UNPK  WORKUNPK(5),DOUBLE+5(3)  UNPACK CODE         *HMD 06/80*
         OI    WORKUNPK+4,C'0'          FIX SIGN            *HMD 06/80*
         MVC   PARM+NONCODE(4),WORKUNPK+1  MOVE IN CODE     *HMD 06/80*
         EJECT
DETACH   DETACH ATTTCB,STAE=NO          NO CHANCE
         LA    R1,PARM                  LOAD ADDRESS OF ROUTINE
         LA    R0,L'NONZERO             BOTH SAME LEN
         CLI   STAECMP,X'FF'            CMP ZERO?
         BE    RELEASEA                 YES, NO MESSAGE
         B     PRELEAVE                 DIE NOW
         TITLE '$ - STAI EXIT ROUTINE'
         LDROP *
         LUSE  STAI,R15                 TELL ASSEMBLER
STAI     CH    R0,=H'12'                CODE FOR NO CORE?
         BE    STAINCOR                 NO CORE, OK
         L     R2,0(,R1)                GET ADDR OF PARM
         LUSE  TSODSECT,R2              TELL ASSEMBLER
         OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  RECURSION-DIE
         MVC   STAECMP(4),4(R1)         COPY STAE ABCODE
         B     STAIDO                   GO TO RETRY ROUTINE
         SPACE 3
STAINCOR OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  STAI-RECURSION DIE
         ST    R1,STAECMP               SAVE CMP AS PUT THERE
STAIDO   LA    R0,STAITRY               LOAD STAE RETRY ROUTINE
         LA    R15,4                    LOAD RETRY CODE
         SVC   3                        RETURN TO ASIR
         SPACE 1
STAIDIE  LR    R3,R1                    SAVE POINTER
         POST  ATTECB,0                 POST MY MOTHER
         XC    DOUBLE(4),DOUBLE         CLEAR IT
         WAIT  1,ECB=DOUBLE             STOP HERE
         LDROP *
STAITRY  STAE  0,CT                     CLEAR ANY STAE CB'S
         SVC   3                        RETURN UP ANOTHER LEVEL
         EJECT
         LUSE  TSODSECT,R13             RE-ESTABLIST FOR THESE ISNS
MVCMOD   MVC   BLDL+4(0),0(R1)          <<EXECUTED>>
MVCPARM  MVC   PARM+2(0),0(R3)          <<EXECUTED>>
         SPACE 2
HERMAN   LTORG
         EJECT
         IKJECT                                             *HMD 06/80*
         EJECT                                              *HMD 06/80*
         CVT  DSECT=YES,LIST=YES
         END
