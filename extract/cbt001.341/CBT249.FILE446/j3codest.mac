.chapter 'JES3 Coding Standards'
.se codechap = &pubCHnum
.point begin
The usermod id
.us MUST
be in columns 65-71 of every line of modified code.  Its format is
SJnnnyz.  An @ sign
.us must
also be placed in column 64 of every line
of modified code.
.point 2
where nnn = modification number 000-999.
.point
where   y = module identifier  A-Z and 0-9, a different letter
for each element that a single modification hits.
.point 3
.rc 2 on
NOTE: This is now optional.  If you wish to assign the same modid to
every element updated by the USERMOD you may.  For example if your
modid is SJ999, you could assign SJ999A0 to every element that you
are updating/creating in your USERMOD.  Then the 1st time you update
this USERMOD, reguardless of how many elements are to be updated, you
would assign a modid of SJ999A1.
.rc 2 off
.point 2
where   z = modification change level
.point 1
If the number of lines in a new mod exceeds 10, use a assembler copy,
an external subroutine or user exit.  Otherwise code changes
inline.
.point 2
If the module is either a unique module or an IBM user exit that does
not have any productive IBM code then this does not apply.
.point 1
If there are more than one assembler COPY's in a module, think about
using an external subroutine or a user exit.
.point
The prolog of a module should have a history of all Rockwell
modifications, along with a 1 line functional description, a
more indepth description, external dependencies, entry and exit
expectations, register and macro usage and anything else that you
think might be meaningful since this is the main documentation on
this modification.
.point 2
Copy JES3.CNTL.LOG($PROLOG) for a model source prolog
.point
Copy JES3.CNTL.LOG($MPROLOG) for a model macro prolog
.point 1
Have a Clear routine at the beginning of a program to clear
everything (work areas, flags, etc.), for all non-reentrant code.
.point 2
For JES3 a module may not be linked as RENT but could be used by
JES3 as if it were RENT so this is a good standard practice.
.point 1
Have a Clear routine after every pass through the program
to make sure flags and such are reset.
.point
Use TITLE cards.  Be sure to put module name in name field of the
first TITLE card.
.point
Place boxed comments at the beginning of a routine giving a brief
description of what it does.
.point 2
Copy JES3.CNTL.LOG($BOX) for model source box
.point 2
Copy JES3.CNTL.LOG($MBOX) for model macro box
.point 1
Use meaningful comments on every line within reason.
.point
Put mapping macros in alphabetical order.
.point
Code either top-down or bottom-up.  This means you should have a
mainline of code and everything else should be treated as a sub-
routine.  Decide which registers you want to use for different
functions before you start coding (i.e. base, BAL, etc.).
.point
Coding messages:
.point 2
.ur See example in figure &msgex..
.sp 2
.fignum msgex
.figbegin
.boxon
MESSAGE  DC    AL1(MSGEND-MESSAGE)
         DC    C'RATNNNN '
MSGJOBN  DC    C'(    )'
         DC    C'NOT FOUND'
JOBNUM   EQU   MSGJOBN+1
MSGEND   EQU   *
.boxoff
.figure msgex 'Message Coding Example'
.figend
.pagetest
.fo on
.sp 2
.fo on
.point 1
Try to use a BAL instead of an ACALL whenever possible.  If you
need to save your registers, then use ACALL.
.point
If at all possible, don't read JCT.  It takes too much I/O.
.point
Flags:
.point 2
See the example on coding, setting and testing a flag in figure
.ur &flgex1..
.sp 2
.fignum flgex1
.figbegin
.boxon
Flag Definition Example
.sp 1
FLAG     DS    X         THIS IS A FLAG BYTE
COND1    EQU   X'01'     CONDITION 1
COND2    EQU   X'02'     CONDITION 2
COND3    EQU   X'04'     CONDITION 3
COND4    EQU   X'08'     CONDITION 4
.sp 2
Flag Testing Example 1
.sp 1
         TM    FLAG,COND1   IS THIS CONDITION 1?
         BC    ALLON,LABEL  BRANCH IF YES.
.sp 2
Flag Testing Example 2
.sp 1
         TM    FLAG,COND1+COND4  IS THIS COND1 OR COND4?
         BC    NALLOFF,LABEL     BRANCH IF YES.
.sp 2
Flag Setting Example
.sp 1
         OI    FLAG,COND3   SET CONDITION 3.
.boxoff
.figure flgex1 'Flag Definition/Testing/Setting'
.figend
.pagetest
.fo on
.sp
.point 1
ESTAE or JESTAE routines should be used to clean up resources when
an error occurs.  Try to also check for recursion.  The user is
responsible for closing opened files and releasing allocated JSAM
files in the event of an error.
.point
JES3 control blocks should be referenced by name, not by absolute
displacement.
.point
.ur Register Conventions: See Table &regsconv..
.sp 2
.tabnum regsconv
.tabbegin
.boxon
 R0 & R1 - used for passing parameters to called routine
 R2 - R9 - work registers
 R10     - base register for all DSP's
 R11     - contains address of FCT for the DSP
 R12     - contains address of JES3 TVT
 R13     - base register for CSECT or work area
 R14     - address to which a called routine must return
 R15     - address of the called program
.boxoff
.table  regsconv 'JES3 Register Conventions'
.tabend
.pagetest
.sp
.point
Unit record and tape I/O is performed using the JESOPEN, JESEXCP,
and JESCLOSE macros.
.point
Communication between DSP's and the operator are done using the
LOGIN macro.
.point
You CANNOT delete IBM code.  You have two options, either
branch around the code using RIP or use the assembler
instruction AGO/ANOP which will do an unconditional branch.
.ur See the AGO example in figure &sampanop..
.sp
.pp
.ur See Chapter &ripchap.,
for details on how to use RIP.
.sp 2
.fignum sampanop
.figbegin
.boxon
             AGO   .LABEL
     ORIGLAB DC    X'00'
     .LABEL  ANOP
     ORIGLAB DC    X'FF'
.boxoff
.figure sampanop 'Sample Using AGO and ANOP'
.figend
.pagetest
.fo on
.sp 2
.point 1
Try to invoke the IATXPRT macro. This will aid you in
debugging code when an error occurs.
.point 1
When using a COPY statement, put meaningful comments before and
after the COPY so it will stand out in the assembled code.
.point
If you use the assembler COPY facility then place a statement of code
before the COPY with a label to allow other modification code to
be used at the same location without modification to your COPY code.
.point
Never have a COPY routine that does not allow additional processing
after the COPY code is completed.  If the COPY code ARETURNs with
a cancel/delete return code then the ARETURN is acceptable, otherwise
it should fall thru and allow the provided ARETURN to return normally.
.point
You should NEVER put in sequence numbers manually.  The AUTONUM function
of CUMOD is designed to do this for you.
.point
Mapping macros MUST NEVER be placed with a COPY.
.point
Use SMP for all code, both Rockwell and IBM.  There is no
difference in the way they are maintained.
.point
All IBM messages that are changed must have the IAT prefix changed
to RAT and logged in JES3.MODS.LOG(MESSAGES)
.point
All Rockwell messages must be prefixed RAT and signed out from
JES3.MODS.LOG(MESSAGES).
.point
For any message changes consider using IBM USER EXIT IATUX31.
.point
All labels should be meaningful names or SJxxxyy  where SJxxx = the
modification number and yy is any unique value.  This is to identify all
labels with the modification.
.point end
