//LOG1512 JOB (09667340,1512,3,2,,80,,,80),              Date(06/26/80)
// 'Dickie',CLASS=C,NOTIFY=R50681,MSGLEVEL=(0,0)
// EXEC TPLICL,MEMBER=NO1512,PARM.LKED=OVLY
//PLI.SYSIN DD *
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 Main: Proc(Parm) Options(Main) Reorder;  /*  R.Dickie      06/26/80  */
+                                         /*  ________      ________  */
 %Skip;
 Call Stimer;       /*  Initialize Timing Routine Ttimer              */
 Call Begin(Parm);  /*  Title Page & Optional Controls Input          */
 Call C512;         /*  Pass 1, over Lked.Sysprint, counting          */
 Call R512;         /*  Pass 2, Filling Xref Table, then Reporting    */
 Return;            /*                                   from "1512"  */
+                   /*________________________________________________*/
 %Skip;
 Dcl Begin   Entry(Char(*) Varying);
 Dcl C512    Entry;
 Dcl Parm    Char(*) Varying;
 Dcl Plixopt Ext Char(8) Varying Init('ISA(8K)');
 Dcl R512    Entry;
 Dcl Stimer  Entry;
 End; /* of Main */
+     /*_________*/
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 Begin:Proc(Parm) Reorder;   /*  R.Dickie         No1512    06/26/80  */
+                            /*  ________         ______    ________  */
 Chart, Pli, Tree, Tso = '0'b;
 Debug, Extend = 0;
 Forms = '1';
 Lc = 60;
 Title = '';
 If Parm^='' Then Call Decode_parm;
 Open File(Sysprint) Pagesize(Lc);
 If ^Tso Then Do;
    Put Edit('Trim¿¿>','<¿¿Trim')(Col(10),A,Col(102),A);
    Call Block('   XREF');  /*                   Title Page           */
+                           /*________________________________________*/
    Put Edit(Logo)(Skip,Col(29),A) Skip(3);
    End;
 When = Time;
 When = Substr(When,1,2) ×× ':' ×× Substr(When,3,2);
 Hoy = Date;
 Hoy = Substr(Hoy,3,2)××'/'××Substr(Hoy,5,2)××'/'××Substr(Hoy,1,2);
 If ^Tso Then Put Edit
    ('Trim¿¿>')(Line(Lc),Col(10),A)
    ('Run: ',When,Hoy,'Release: 06/26/80')
    (Col(25),A,A(6),A,Col(80),A)
    ('<¿¿Trim')(Col(102),A);
 Call Parse_pattern;
 Return;       /*                                        from "Begin" */
+              /*_____________________________________________________*/
 %Page;
 Parse_pattern: Proc;
 Parms = Null;                        /* Separate exception templates */
+                                     /*______________________________*/
 Pattern = Translate(Pattern,
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ   ',
    'abcdefghijklmnopqrstuvwxyz&,/');
 Do While(Pattern^='');
    Allocate Patt;
    If Parms = Null
       Then Parms = Bug;
       Else Ptr->Patt.Next = Bug;
    Ptr = Bug;
    Patt.Next = Null;
    Pattern = Substr(Pattern, Verify(Pattern, ' '));
    Blank = Index(Pattern ××' ', ' ');
    Patt.Size = Blank - 1;
    If Substr(Patt.Text,1,1)='-' Then Do;
       Patt.Size = 1 - Patt.Size;
       Patt.Text = Substr(Patt.Text,2);
       End;
    Patt.Text = Substr(Pattern,1,Size);
    If Size+2<=Length(Pattern)
       Then Pattern = Substr(Pattern,Size+2);
       Else Pattern = '';
    End;
 End; /* of Parse_pattern */
+     /*__________ ________*/
 %Page;
 Decode_parm: Proc;
 Parm = Translate(Parm,
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
    'abcdefghijklmnopqrstuvwxyz,');
 Do While(Parm^='');
    Parm = Substr(Parm, Verify(Parm,' '));
    Blank = Index(Parm××' ',' ');
    Delim = Min(Blank, Index(Parm××'(','('));
    Select(Substr(Parm,1,Delim-1));
       When('CHART')   Chart = '1'b;
       When('DEBUG')   Debug = Substr(Parm,7,Blank-8);
       When('EXTEND')  Extend = 1;
       When('FORMS')   Forms = Substr(Parm,7,1);
       When('PATTERN') Pattern = Substr(Parm,9,Blank-10);
       When('PLI')     Pli = '1'b;
       When('TITLE')   Title = Substr(Parm,7,Blank-8);
       When('TREE')    Tree = '1'b;
       When('TSO')     Tso = '1'b;
       Otherwise Put Skip Edit('Invalid option: ',Parm)(A);
       End;
    If Blank<Length(Parm)
       Then Parm = Substr(Parm,Blank+1);
       Else Parm = '';
    End;
 If Forms='8' Then Lc = 80;
 Dcl Delim Fixed Bin;
 End; /* of Decode_parm */
+     /*__________ _____*/
 %Page;
 Dcl   Blank       Fixed Bin(20);
 Dcl   Block       Entry;
 Dcl   Bug         Ptr;
 Dcl   Chart       Ext Bit(1) Aligned;
 Dcl   Date        Builtin;
 Dcl   Debug       Ext Fixed Bin(20);
 Dcl   Extend      Ext Fixed Bin(20);
 Dcl   Forms       Ext Char(1);
 Dcl   Hoy         Char(8);
 Dcl   Index       Builtin;
 Dcl   Lc          Ext Fixed Bin;
 Dcl   Length      Builtin;
 Dcl   Min         Builtin;
 Dcl   Null        Builtin;
 Dcl   Parm        Char(*) Varying;
 Dcl   Parms       Ext Ptr;
 Dcl 1 Patt        Based(Bug),    /*  Csect Avoidance Templates  */
     2 Size        Fixed Bin(20), /*     Length of this template */
     2 Next        Ptr,           /*     Address of the next Patt*/
     2 Text        Char(8);       /*     Actual template string  */
+                                 /*_____________________________*/
 Dcl   Pattern     Char(100) Varying Init('');
 Dcl   Pli         Ext Bit(1) Aligned;
 Dcl   Ptr         Ptr;
 Dcl   Substr      Builtin;
 Dcl   Sysprint    File Print;
 Dcl   Time        Builtin;
 Dcl   Title       Ext Char(80) Varying;
 Dcl   Translate   Builtin;
 Dcl   Tree        Ext Bit(1) Aligned;
 Dcl   Tso         Ext Bit(1) Aligned;
 Dcl   Verify      Builtin;
 Dcl   When        Char(9);
 %Page;
 Dcl Logo(48) Static Char(63) Init(
    '   TRA Pgm 1512: Xref: Csect Cross Reference Relationships',
    '                 ¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿',
    '','Setup:  // EXEC XREF,',
    'Optional:  // PARM.GO=''/...''',
    '             Pattern(template strings),',
    '               to suppress undesired Csect sets,',
    '               such as library routines.',
    '               ''IBM'' implies PL/I,',
    '               ''IHC'' implies FORTRAN.',
    '             Extend,',
    '               to find secondary linkage overlooked by Pattern.',
    '             Forms(10) or 60 or 80',
    '               printer forms code',
    '             Pli,',
    '               to act especially for PL/I',
    '             Title(narrative)',
    '        //LKED.SYSIN DD *',
    '         INCLUDE PRODLIB(member-name)',
    '   or:   INCLUDE TESTBED(member-name)',
    ' Plus:   ENTRY   name-of-appropriate-entry-point','','',
    'Optional:  //LKED.ANYLIB DD ...',
    '           //LKED.SYSIN DD *',
    '            INCLUDE ANYLIB(...','','',
    'Report 1: A list of Csect''s (subprogram, procedure etc.),',
    '          each followed by a list of referenced Csect''s.',
    '          These are ordered alphamericly,',
    '          labeled-Common and Static-External targets included.','',
    'Report 2: A list of Csect''s,',
    '          each followed by those Csect''s referring to same.','',
    'Report 3: Level of Reference report',
    '          These are ordered by "level" or "depth" of reference,',
    '          Defined: L(i) = max(L(j) × Csect(j)->Csect(i)) + 1.',
    '          Accordingly, recursive sets are discovered,',
    '          (A calls B, B calls A; or A calls A),',
    '          Also, never-called modules are similarly identified.','',
    'All reports are 8.5 X 11 inch (Burst & Trim)',
    'Estimate usually<1 cpu min per Exec on 370/155.',
    'Output is always<1K lines.',
    'High-water is usually<100K bytes of memory.','');
 End; /* of Begin */
+     /*__________*/
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 C512:Proc Reorder;  /*  R.Dickie           No1512          06/26/80  */
+                    /*  ________           ______          ________  */
 If Debug>0 Then Put Skip(2) Edit('C512:')(A);
 Member = '';
 Ncsects = 0;
 Read File(Input) Set(P);      /*              preceding LKED step,   */
+                              /*_____________________________________*/
 Do While(Substr(Line,2,18)^='  LOCATION  REFERS');       /* Map only */
+                                                         /* ___      */
    If Substr(Line,2,28)^='' Then Do;
       I=Index(Line,' INCLUDE ');
       If I>12 Then If Substr(Line,2,7)='IEW0000' Then Do;
          Do J=I+9 To 80 While(Substr(Line,J,1)=' ');
             End;
          Member=Substr(Line,J);
          End;
       If Substr(Line,2,7)='IEW0000' Then
       If Index(Line,' ENTRY ')>12   Then
       If Index(Line,' PLISTART ')>0 Then Pli = '1'b;
       If Substr(Line,2,4)='****' & Member=''
          Then Member=Substr(Line,6,Index(Line,'  ')-6);
       If Substr(Line,2,2)='  ' & Substr(Line,4,1)^=' ' Then
       If Substr(Line,4,15)^='CONTROL SECTION' Then Call Map_entry;
       End;
    Read File(Input) Set(P);
    End;
 I = Index(Member,'(');
 If I=0
    Then Substr(Member,2) = Translate(Substr(Member,2),
       'abcdefghijklmnopqrstuvwxyz',
       'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
    Else Do;
       Substr(Member,2,I-2) = Translate(Substr(Member,2,I-2),
          'abcdefghijklmnopqrstuvwxyz',
          'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
       Substr(Member,I+2) = Translate(Substr(Member,I+2),
          'abcdefghijklmnopqrstuvwxyz',
          'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
       End;
 If Debug>0 Then Put Edit
    ('Ncsects=',Ncsects)(Skip,A,F(4))
    ('  Member=',Member)(A)
    ('  Pli=',Pli)(A,B);
 Return; /* from "C512" */
+        /*_____________*/
 %Page;
 Map_entry: Proc;  /*  Observe the Map entry for one Csect            */
+                  /*_________________________________________________*/
 Id = Substr(Line,4,8);
 /*
 If Id='PLISTART' Then Pli = '1'b;
 */
 Ok = Include(Id);
 If Ok × Extend^=0 Then Do;
    Ncsects = Ncsects + 1;
    Allocate Csect Set(Bug_t);
    If Ncsects = 1
       Then Bug_h = Bug_t;
       Else Csect.Bug_n = Bug_t;
    Bug_c = Bug_t;
    Csect.Bug_n = Null;
    Csect.Id = Id;
    Csect.Org = Hex(Substr(Line,14,6));
    Csect.Upper = Csect.Org + Hex(Substr(Line,22,6));
    Csect.Depth = 10000;
    Csect.Ok = Ok;
    End;
 End; /* of Map_entry */
+     /*_______ ______*/
 %Page;
 Dcl   Bug_c       Ptr;
 Dcl   Bug_h       Ptr Ext;
 Dcl   Bug_t       Ptr;
 Dcl 1 Csect       Based(Bug_c),       /*  One per Csect found   */
     2 Bug_n       Ptr,                /*     Address of next    */
     2 Info,                           /*     Set of Csect info  */
     3 Id          Char(8),            /*        Module name     */
     3 Org         Fixed Bin(20),      /*        Module origin   */
     3 Upper       Fixed Bin(20),      /*        Module following*/
     3 Depth       Fixed Bin(15),      /*        Dominance depth */
     3 Ok          Bit(1) Aligned;     /*        To be reported? */
+                                      /*________________________*/
 Dcl   Debug       Ext Fixed Bin(20);
 Dcl   Extend      Ext Fixed Bin(20);
 Dcl   Forms       Ext Char(1);
 Dcl   Hex         Entry(Char(6)) Returns(Fixed Bin(20));
 Dcl   I           Fixed Bin(20);
 Dcl   Id          Char(8);
 Dcl   Include     Entry(Char(8)) Returns(Bit(1) Aligned);
 Dcl   Index       Builtin;
 Dcl   Input       File Record Input;
 Dcl   J           Fixed Bin(20);
 Dcl   Line        Based(P) Char(121);
 Dcl   Member      Ext Char(18);
 Dcl   Ncsects     Ext Fixed Bin(20);
 Dcl   Null        Builtin;
 Dcl   Ok          Bit(1) Aligned;
 Dcl   P           Ptr;
 Dcl   Pli         Ext Bit(1) Aligned;
 Dcl   Substr      Builtin;
 Dcl   Sysprint    File Print;
 Dcl   Translate   Builtin;
 End; /* of C512 */
+     /*_________*/
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 Hex: Proc(string)         /*  R.Dickie       No1512        06/26/80  */
+                          /*  ________       ______        ________  */
    Returns(Fixed Bin(20))
    Reorder;
 %Skip(2);
 /*         Change a hex (character) string to Fixed Bin        */
+/*_____________________________________________________________*/
 Value = 0;
 Pwr = 1;
 Do Digit=6 To 1 By -1 While(Substr(String,Digit,1)^=' ');
    Decimal=Index(Char,Substr(String,Digit,1));
    If Decimal>0
       Then Value = Value + Decimal*Pwr;
    Pwr = Pwr * 16;
    End;
 Return(Value); /* from Hex */
+               /*__________*/
 %Skip(2);
 Dcl Char        Char(15) Init('123456789ABCDEF') Static;
 Dcl Decimal     Static Fixed Bin(20);
 Dcl Digit       Static Fixed Bin(20);
 Dcl Index       Builtin;
 Dcl Pwr         Static Fixed Bin(20);
 Dcl String      Char(6);
 Dcl Substr      Builtin;
 Dcl Value       Static Fixed Bin(20);
 End; /* of Hex */
+     /*________*/
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 Include:                   /*  To determine whether a Csect06/26/80  */
    Proc(Id)                /*  whose name is given                   */
    Returns(Bit(1) Aligned) /*  is to be included in the mapping      */
    Reorder;                /*  per matching any of Pattern           */
+                           /*________________________________________*/
 Ok = '1'b;
 Bug = Parms;
 Do While(Bug^=Null & Ok);
    If Patt.Size>0
       Then Template = Substr(Id,1,Patt.Size);
       Else Template = Substr(Id,9+Patt.Size,-Patt.Size);
    If Template = Substr(Patt.Text,1,Abs(Patt.Size))
       Then Ok = '0'b;
    Bug = Patt.Next;
    End;
 Return(Ok);
 %Skip;
 Dcl   Abs         Builtin;
 Dcl   Bug         Static Ptr;
 Dcl   Id          Char(8);
 Dcl   Null        Builtin;
 Dcl   Ok          Static Bit(1) Aligned;
 Dcl   Parms       Static Ext Ptr;
 Dcl 1 Patt        Based(Bug),    /*  Csect avoidance templates  */
     2 Size        Fixed Bin(20), /*     Length of this template */
     2 Next        Ptr,           /*     Address of the next Patt*/
     2 Text        Char(8);       /*     Actual template string  */
+                                 /*_____________________________*/
 Dcl   Substr      Builtin;
 Dcl   Template    Static Char(8) Varying;
 End; /* of Include */
+     /*____________*/
*PROCESS MAR(2,72,1),LC(60),F(E),OPT(2),S,NM,GN;
 R512:Proc Reorder;  /*  R.Dickie            No1512         06/26/80  */
+                    /*  ________            ______         ________  */
 If Debug>0 Then Put Skip(2) Edit('R512:')(A);
 If Tso Then Ddname = 'SYSPRINT';
 Open File(Out) Pagesize(Lc) Title(Ddname);
 Call Access_lked_xref;
 If ^Pli Then Call Find_entry;
 Call Id_sequencing;
 If Parms^=Null & Extend^=0 Then Call Locate_extensions;
 If Pli Then Call Pli_special;
 Do Bug_c=Bug_h Repeat Csect.Bug_n While(Bug_c^=Null);
    Csect.Id = Substr(Csect.Id, Verify(Csect.Id,'*'));
    Substr(Csect.Id,2) = Translate(Substr(Csect.Id,2),
       'abcdefghijklmnopqrstuvwxyz ',
       'ABCDEFGHIJKLMNOPQRSTUVWXYZ*');
    End;
 Call Report_down;
 Call Report_up;
 Call Seek_reference_depths;
 Call Report_levels;
 Return;       /*                                        from "R512"  */
+              /*_____________________________________________________*/
 %Page;
 Access_lked_xref: Proc;  /*  Fill in Cross-Reference Table  */
+                         /*_________________________________*/
 If Debug>0 Then Put Skip Edit('Access_lked_xref:')(A);
 Nref = 0;
 Xref = '0'b;
 On Endfile(Input) P = Null;
 Read File(Input) Set(P);       /*  from LKED Xref report only        */
+                               /*            ____                    */
 Do While(P^=Null);
    Nref(1) = Nref(1) + 1;
    If Substr(Line,2,14)=' ENTRY ADDRESS' Then Do;
       Entry = Hex(Substr(Line,19,6));
       End;
    If Substr(Line,2,4)='****' & Member='' Then Member=Substr(Line,6,8);
    If Substr(Line,2,3)='' & Substr(Line,10,1)^='' Then Do I=5,65;
       If Substr(Line,I+34,8) ^=(8)' ' Then
       If Substr(Line,I+33,11)^='$UNRESOLVED' Then
       If Include(Substr(Line,I+34,8)) Then Do;
          Nref(2) = Nref(2) + 1;
          Location = Hex(Substr(Line,I,6));  /*  of calling reference */
+                                            /*_______________________*/
          Jcsect = 0;
          Bug_c = Bug_h;
          Do Lcsect=1 To Ncsects While(Jcsect=0);
             If Location<Csect.Org
                Then Jcsect = -1;
                Else If Location<Csect.Upper
                   Then Jcsect = Lcsect;
                   Else Bug_c = Csect.Bug_n;
             End;
          If Jcsect>0 Then Do;
             Tname = Substr(Line,I+34,8);  /*   Name of called routine*/
+                                          /*_________________________*/
             Bug_c = Bug_h;
             Icsect = 0;
             Do Kcsect=1 To Ncsects While(Icsect=0);
                If Tname=Csect.Id Then Icsect = Kcsect;
                Bug_c = Csect.Bug_n;
                End;
             If Icsect>0 Then Xref(Jcsect,Icsect) = '1'b;
             End;
          End;
       End;
    Read File(Input) Set(P);
    End;
 Close File(Input);
 If Debug>0 Then Put Edit('  Nref=')(A) (Nref)(F(5));
 Dcl Nref(4) Static Fixed Bin(20);
 End; /* of Access_lked_xref */
+     /*__________ ____ _____*/
 %Page;
 Find_entry: Proc;      /*         Find non-PL/I user Entry           */
 If Debug>0 Then Put Skip Edit('Find_entry:')(A)
    ('  Entry=',Entry)(A,F(8));
 Bug_c = Bug_h;
 Bug_t = Bug_n;
 Do While(Entry>=Bug_t->Csect.Org);
    Bug_c = Bug_n;
    Bug_t = Bug_n;
    End;
 Csect.Depth = 1;
 If Debug>0 Then Put Edit('  Bug_c=',Unspec(Bug_c))(A,F(10));
 End; /* of Find_entry */
+     /*________ ______*/
 %Page;
 Id_sequencing: Proc; /*      Sort Chain and Table by Id              */
+                     /*______________________________________________*/
 If Debug>0 Then Put Skip Edit('Id_sequencing:')(A);
 Bug_i = Bug_h;
 Do Icsect=1 To Ncsects;
    Bug_j = Bug_i;
    Bug_k = Bug_i->Csect.Bug_n;
    Jcsect = Icsect;
    Id(1) = Substr(Bug_j->Csect.Id, Verify(Bug_j->Csect.Id,'*'));
    Do Kcsect=Icsect+1 To Ncsects;
       Id(2) = Substr(Bug_k->Csect.Id, Verify(Bug_k->Csect.Id,'*'));
       If Id(2)<Id(1) Then Do;
          Id(1) = Id(2);
          Bug_j = Bug_k;
          Jcsect = Kcsect;
          End;
       Bug_k = Bug_k->Csect.Bug_n;
       End;
    If Bug_j^=Bug_i Then Do;
       Swap_c = Bug_i->Info;
       Bug_i->Info = Bug_j->Info;
       Bug_j->Info = Swap_c;
       Swap = Xref(Jcsect,*);
       Xref(Jcsect,*) = Xref(Icsect,*);
       Xref(Icsect,*) = Swap;
       Swap = Xref(*,Jcsect);
       Xref(*,Jcsect) = Xref(*,Icsect);
       Xref(*,Icsect) = Swap;
       End;
    Bug_i = Bug_i->Csect.Bug_n;
    End;
 End; /* of Id_sequencing */
+     /*______ ___________*/
 %Page;
 Locate_extensions: Proc;        /*          Extended Ref's           */
+                                /*___________________________________*/
 If Debug>0 Then Put Skip Edit('Locate_extensiins:')(A);
 Bug_i = Bug_h;
 Do Icsect=1 By 1 While(Bug_i^=Null);
    If Bug_i->Csect.Ok Then Do;
       Bug_j = Bug_h;
       Do Jcsect=1 By 1 While(Bug_j^=Null);
          If Xref(Icsect,Jcsect) & ^(Bug_j->Csect.Ok) Then Do;
             Bug_t = Bug_h;
             Do Kcsect=1 By 1 While(Bug_t^=Null);
                If Xref(Jcsect,Kcsect) & Bug_i^=Bug_t Then Do;
                   If Debug>1
                      Then Put Edit(Icsect,Kcsect)(Col(4),2 F(5));
                   Xref(Icsect,Kcsect) = '1'b;
                   End;
                Bug_t = Bug_t->Csect.Bug_n;
                End;
             End;
          Bug_j = Bug_j->Csect.Bug_n;
          End;
       End;
    Bug_i = Bug_i->Csect.Bug_n;
    End;
 End; /* of Locate_extensions */
+     /*__________ ___________*/
 %Page;
 Pli_special: Proc;    /*             PL/I Special Case               */
+                      /*_____________________________________________*/
 If Debug>0 Then Put Skip Edit('Pli_special:')(A);
 Bug_c = Bug_h;
 Do Icsect=1 To Ncsects While(Csect.Id^='PLIMAIN ');
    Bug_c = Bug_n;
    End;
 Bug_e = Bug_h;
 Do Ecsect=1 To Ncsects While(^Xref(Icsect,Ecsect));
    Bug_e = Bug_e->Bug_n;
    End;
 If Icsect<=Ncsects & Ecsect<=Ncsects Then Do;
    Xref(Icsect,Ecsect) = '0'b;
    Bug_e->Csect.Depth = 1;
    End;
 Bug_c = Bug_h;
 Do Icsect=1 To Ncsects;          /*   Sever static Csect back-ref's  */
+                                 /*__________________________________*/
    If Substr(Csect.Id,1,3)^='IBM' & Substr(Csect.Id,8,1)^='2' Then Do;
       Bug_t = Bug_h;
       Do Jcsect=1 To Ncsects While('1'b);
          If Xref(Icsect,Jcsect) Then Leave;
          Bug_t = Bug_t->Csect.Bug_n;
          End;
       If Jcsect<=Ncsects Then Do;
          Xref(Jcsect,Icsect) = '0'b;
          Xref(Icsect,Icsect) = '0'b;
          Xref(Icsect,*) = Xref(Jcsect,*);
          Xref(Jcsect,*) = '0'b;
          Substr(Csect.Id,8,1) = ' ';
          Bug_t->Csect.Ok = '0'b;
          End;
       End;
    If Index(Csect.Id××' ','* ')>0 Then Csect.Ok = '0'b;
    Bug_c = Csect.Bug_n;
    End;
 End; /* of Pli_special */
+     /*_______ ________*/
 %Page;
 Report_down: Proc;  /*          Cross Reference Reporting            */
+                    /*_______________________________________________*/
 Report = '           References';
 Call Report_header;
 Bug_c = Bug_h;
 Do Icsect=1 To Ncsects; /*  i.e. per Calling routine                 */
+                        /*           _______                         */
    If Csect.Ok Then Do Pass=1,2;
       Bfr = '';
       Kcsect = 0;
       Bug_j = Bug_h;
       Do Jcsect=1 To Ncsects; /*  i.e. per Called routine            */
+                              /*           ______                    */
          If Bug_j->Csect.Ok & Xref(Icsect,Jcsect) Then Do;
             Kcsect = Kcsect + 1;
             If Pass = 2 Then Do;
                If Kcsect=1
                   Then Bfr = Csect.Id ×× ' ×';
                   Else If Mod(Kcsect,7)=1 Then Do;
                      Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
                      Bfr = '         ×';
                      End;
                Bfr = Bfr ×× ' ' ×× Bug_j->Csect.Id;
                End;
             End;
          Bug_j = Bug_j->Csect.Bug_n;
          End;
       If Pass=2 & Bfr^=''
          Then Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
       If Pass=1 & Lineno(Out)+(Kcsect+6)/7>Lc & ^Tso
          Then Call Report_header;
       End;
    Bug_c = Csect.Bug_n;
    End;
 If ^Tso Then Put File(Out) Edit((73)'_')(Skip(0),Col(25),A);
 If ^Tso Then If Lineno(Out)=Lc
    Then Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Skip(0),Col(10),A,Col(102),A);
    Else Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Line(Lc),Col(10),A,Col(102),A);
 End; /* of Report_down */
+     /*__________ _____*/
 %Page;
 Report_header: Proc;
 If Tso Then Put File(Out) Skip(2);
 If Lineno(Out)>1 Then Put File(Out) Page;
 If ^Tso Then Put File(Out) Edit
    ('Trim¿¿>')(Col(10),A)
    (Report)(Col(25-Tso*24),A);
 Pageno = Pageno + 1;
 Do I=Length(Member) By -1 To 1 While(Substr(Member,I,1)=' ');
    End;
 If ^Tso Then If Pageno=1
    Then Put File(Out) Edit(Member)(Col(98-I),A);
    Else Put File(Out) Edit('Page',Pageno)
       (Col(93-Log10(Pageno+.5)),A,F(2+Log10(Pageno+.5)));
 Put File(Out) Edit('<¿¿Trim')(Col(102),A);
 If Title^='' Then Put File(Out) Edit
    (Title)(Col(Max(1,(98-Tso*24-Length(Title))/2)),A);
 If ^Tso Then Put Edit((73)'_')(Skip(0),Col(25),A) File(Out);
 Dcl I Fixed Bin;
 End; /* of Report_header */
+     /*__________ _______*/
 %Page;
 Report_levels: Proc;
 Pageno = 0;
 Report = 'Level      Csects';
 Call Report_header;
 Do I=1 To Ilevel, Ncsects;  /* i.e. per Level */
+                            /*          _____ */
    Bfr = '';
    Do Pass=1,2;
       If Pass=2 & Kcsect>0 Then Do;
          If Lineno(Out)+(Kcsect+6)/7>Lc & ^Tso
             Then Call Report_header;
          Bfr = 'Recursive×';
          If I<Ncsects
             Then Put String(Bfr) Edit(I,'×')(P'ZZZZ9BBBB',A);
          End;
       Kcsect = 0;
       Bug_c = Bug_h;
       Do While(Bug_c^=Null);
          If Csect.Ok & I=Csect.Depth Then Do;
             Kcsect = Kcsect + 1;
             If Pass=2 Then Do;
                If Kcsect>1 & Mod(Kcsect,7)=1 Then Do;
                   Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
                   Bfr = '         ×';
                   End;
                Bfr = Bfr ×× ' ' ×× Csect.Id;
                End;
             End;
          Bug_c = Csect.Bug_n;
          End;
       End;
    If Bfr^='' Then Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
    End;
 If ^Tso Then Put File(Out) Edit((73)'_')(Skip(0),Col(25),A);
 If ^Tso Then If Lineno(Out)=Lc
    Then Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Skip(0),Col(10),A,Col(102),A);
    Else Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Line(Lc),Col(10),A,Col(102),A);
 End; /* of Report_levels */
+     /*__________ _______*/
 %Page;
 Report_up: Proc;  /*        Report Backwards References              */
+                  /*_________________________________________________*/
 Pageno = 0;
 Report = '           Referenced by';
 Call Report_header;
 Bug_j = Bug_h;
 Do Jcsect=1 To Ncsects; /*  i.e. per Called Routine                  */
+                        /*           ______                          */
    Bfr = '';
    If Bug_j->Csect.Ok Then Do Pass=1,2;
       If Pass=2 & Lineno(Out)+(Kcsect+6)/7>Lc & ^Tso
          Then Call Report_header;
       Kcsect = 0;
       If Pass=2 Then Bfr = Bug_j->Csect.Id ×× ' ×';
       Bug_c = Bug_h;
       Do Icsect=1 To Ncsects; /*  i.e. per Calling Routine           */
+                              /*           _______                   */
          If Csect.Ok & Xref(Icsect,Jcsect) Then Do;
             Kcsect = Kcsect + 1;
             If Pass=2 & Kcsect>1 & Mod(Kcsect,7)=1 Then Do;
                Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
                Bfr = '         ×';
                End;
             If Pass=2 Then Bfr = Bfr ×× ' ' ×× Csect.Id;
             End;
          Bug_c = Csect.Bug_n;
          End;
       If Pass=2 Then If Kcsect = 0
             Then If Bug_j->Csect.Depth=1
                Then Bfr = Bfr ×× ' is the primary entry';
                Else Bfr = Bfr ×× ' is never referenced';
             Else If Bug_j->Csect.Depth=1
                Then Bfr = Bfr ×× 'but is also the primary entry';
       End;
    If Bfr^=''
       Then Put File(Out) Edit(Bfr)(Skip,Col(25-Tso*24),A);
    Bug_j = Bug_j->Csect.Bug_n;
    End;
 If ^Tso Then Put File(Out) Edit((73)'_')(Skip(0),Col(25),A);
 If ^Tso Then If Lineno(Out)=Lc
    Then Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Skip(0),Col(10),A,Col(102),A);
    Else Put File(Out) Edit
       ('Trim¿¿>','<¿¿Trim')(Line(Lc),Col(10),A,Col(102),A);
 End; /* of Report_up */
+     /*__________ ___*/
 %Page;
 Seek_reference_depths: Proc;
 Do Ilevel=1 To Ncsects-1 While(Together);
    Lcsect = 0;     /* Count of those found at this level             */
    Bug_c = Bug_h;
    Do Icsect=1 To Ncsects;       /* Find Csects at current level     */
       If Csect.Depth=Ilevel Then Do;                  /* Found */
          Lcsect = Lcsect + 1;
          Bug_j = Bug_h;
          Do Jcsect=1 To Ncsects;  /* Find Csects ref'd by same */
             If Xref(Icsect,Jcsect) Then Do;
                Bug_j->Csect.Depth = Ilevel + 1;
                End;
             Bug_j = Bug_j->Bug_n;
             End;
          End;
       Bug_c = Bug_n;
       End;
    If Lcsect = 0
       Then Together = '0'b;
       Else Do Icsect=1 To Ilevel;  /*  Any gap implies Recursion     */
+                                   /*________________________________*/
          Together = '0'b;
          Bug_j = Bug_h;
          Do Jcsect=1 To Ncsects While(^Together);
             If Bug_j->Csect.Depth = Icsect Then Together = '1'b;
             Bug_j = Bug_j->Bug_n;
             End;
          If ^Together Then Do;
             Bug_j = Bug_h;
             Do Jcsect=1 To Ncsects;  /* Gap found */
                If Bug_j->Csect.Depth>Icsect   Then
                If Bug_j->Csect.Depth<Ncsects  Then
                Bug_j->Csect.Depth = Ncsects;
                Bug_j = Bug_j->Bug_n;
                End;
             End;
          End;
    End;
 End; /* of Seek_reference_depths */
+     /*________ _________ _______*/
 %Page;
 Dcl   Bfr         Char(80) Varying;
 Dcl   Bug_c       Ptr;
 Dcl   Bug_e       Ptr;
 Dcl   Bug_h       Ptr Ext;
 Dcl   Bug_i       Ptr;
 Dcl   Bug_j       Ptr;
 Dcl   Bug_k       Ptr;
 Dcl   Bug_t       Ptr;
 Dcl 1 Csect       Based(Bug_c),       /*  One per Csect found   */
     2 Bug_n       Ptr,                /*     Address of next    */
     2 Info,                           /*     Set of Csect info  */
     3 Id          Char(8),            /*        Module name     */
     3 Org         Fixed Bin(20),      /*        Module origin   */
     3 Upper       Fixed Bin(20),      /*        Module following*/
     3 Depth       Fixed Bin(15),      /*        Dominance depth */
     3 Ok          Bit(1) Aligned;     /*        To be reported? */
+                                      /*________________________*/
 Dcl   Ddname      Static Char(8) Init('OUT');
 Dcl   Debug       Ext Fixed Bin(20);
 Dcl   Ecsect      Fixed Bin(20);
 Dcl   Entry       Fixed Bin(20) Init(0);
 Dcl   Extend      Ext Fixed Bin(20);
 Dcl   Forms       Ext Char(1);
 Dcl   Hex         Entry(Char(6)) Returns(Fixed Bin(20));
 Dcl   I           Fixed Bin(20);
 Dcl   Icsect      Fixed Bin(20);
 Dcl   Id(2)       Char(8);
 Dcl   Ilevel      Fixed Bin(20);
 Dcl   Include     Entry(Char(8)) Returns(Bit(1) Aligned);
 Dcl   Index       Builtin;
 Dcl   Input       File Record Input;
 Dcl   Jcsect      Fixed Bin(20);
 Dcl   Kcsect      Fixed Bin(20);
 Dcl   Last_depth  Fixed Bin(15);
 Dcl   Lc          Ext Fixed Bin;
 Dcl   Lcsect      Fixed Bin(20) Init(0);
 Dcl   Length      Builtin;
 Dcl   Line        Based(P) Char(121);
 Dcl   Lineno      Builtin;
 Dcl   Location    Fixed Bin(20);
 Dcl   Log10       Builtin;
 Dcl   Max         Builtin;
 Dcl   Member      Ext Char(18);
 Dcl   Mod         Builtin;
 Dcl   Ncsects     Ext Fixed Bin(20);
 Dcl   Null        Builtin;
 Dcl   Out         File Print;
 Dcl   P           Ptr;
 Dcl   Pageno      Fixed Bin(20) Init(0);
 Dcl   Parms       Ext Ptr;
 Dcl   Pass        Fixed Bin(20);
 Dcl   Pli         Ext Bit(1) Aligned;
 Dcl   Report      Char(40) Varying;
 Dcl   Substr      Builtin;
 Dcl   Swap        (Ncsects) Bit(1) Aligned;
 Dcl 1 Swap_c      Like Csect.Info;
 Dcl   Sysprint    File Print;
 Dcl   Title       Ext Char(80) Varying;
 Dcl   Tname       Char(8);
 Dcl   Together    Bit(1) Aligned Init('1'b);
 Dcl   Translate   Builtin;
 Dcl   Tso         Ext Bit(1) Aligned;
 Dcl   Unspec      Builtin;
 Dcl   Verify      Builtin;
 Dcl   Xref        (Ncsects,Ncsects) Bit(1) Aligned;
 End; /* of R512 */
+     /*_________*/
//LKED.SYSIN DD *
 OVERLAY NO1512
    INSERT **BEGIN1,**BEGIN2
    INSERT **BLOCK1,**BLOCK2
 OVERLAY NO1512
    INSERT ***C5121,***C5122
 OVERLAY NO1512
    INSERT ***R5121,***R5122
// EXEC XREF,LIB='SYS1.ENGRLOAD',PARM.GO='/Debug(1),Forms(80)'
//LKED.SYSIN DD *
 ENTRY A451
 INCLUDE TESTBED(NO1451)
// EXEC XREF,LIB='SYS1.ENGRLOAD',SYSOUT='SYSOUT=A',
// PARM.GO='R/Debug(2),Forms(80),Pli,Pattern(Ibm&Iel)'
//LKED.SYSIN DD *
 INCLUDE TESTBED(NO1512)
 ENTRY PLISTART
//
