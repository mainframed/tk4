//LOG1764 JOB (09667340,1764,3,2,,80),              Date(04/08/80)
// 'Dickie',MSGLEVEL=(0,0),CLASS=B,NOTIFY=R50681
// EXEC TPLICL,MEMBER=NO1764,
// PARM.LKED='OVLY,LET,LIST,MAP'
//PLI.SYSIN DD *
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Log1764: Proc(Parm)  /*  R.Dickie                          04/08/80  */
+                     /*  ________                          ________  */
    Options(Main)     /*                                              */
    Reorder;          /*  Quantitative Overlay Diagrams               */
+                     /*______________________________________________*/
 %Skip;
 Call Begin(Parm);    /*  to decode the Parm options                  */
 Call Get;            /*  to get data from a Link Editor map          */
 Call Massage;        /*  to massage the csect tree                   */
 Call Report;         /*  to produce the diagram                      */
+                     /*______________________________________________*/
 Return;
 %Skip;
 Dcl Begin   Entry(Char(*) Varying);
 Dcl Get     Entry;
 Dcl Massage Entry;
 Dcl Parm    Char(*) Varying;
 Dcl Plixhd  Ext Char(8) Varying Init('Log1764:');
 Dcl Plixopt Ext Char(8) Varying Init('ISA(10K)');
 Dcl Report  Entry;
 End; /* of Log1764 */
+     /*____________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Begin: Proc(Parm) Reorder;  /*  Decode the Parm Options     04/08/80 */
+                            /*_______________________________________*/
 Parm = Translate(Parm,
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
    'abcdefghijklmnopqrstuvwxyz,');
 Do While(Parm^='');
    Parm = Substr(Parm,Verify(Parm,' '));
    Blank = Index(Parm××' ',' ');
    Paren = Index(Parm××'(','(');
    If Paren<Blank Then Blank = Index(Parm××')',')') + 1;
    Select(Substr(Parm,1,Min(Blank,Paren)-1));
       When('BATCH') Tso   = '0'b;
       When('DEBUG') Debug = '1'b;
       When('FORMS') If Substr(Parm,7,1)^=')'
                        Then Forms = Substr(Parm,7,1);
       When('GROUP') Call Begingr(Substr(Parm,7,Blank-8));
       When('LC')    If Blank>5 Then Lc = Substr(Parm,4,Blank-5);
       When('LS')    If Blank>5 Then Ls = Substr(Parm,4,Blank-5);
       When('TITLE') Title = Substr(Parm,7,Blank-8);
       When('TSO')   Tso   = '1'b;
       Otherwise Put Skip Edit('Unrecognized Parm: ',Parm)(A);
       End;
    If Blank<Length(Parm)
       Then Parm = Substr(Parm,Blank+1);
       Else Parm = '';
    End;
 Open File(Sysprint) Linesize(Ls) Pagesize(Lc);
 Return; /* from "Begin" */
+        /*______________*/
 %Skip;
 Dcl Begingr   Entry(Char(*));
 Dcl Blank     Fixed Bin;
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl Index     Builtin;
 Dcl Length    Builtin;
 Dcl Min       Builtin;
 Dcl Paren     Fixed Bin;
 Dcl Parm      Char(*) Varying;
 Dcl Substr    Builtin;
 Dcl Sysprint  File Print Env(U,Blksize(133));
 Dcl Translate Builtin;
 Dcl Verify    Builtin;
 End; /* of Begin */
+     /*__________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Begingr: Proc(Group) Reorder;  /*  Process the GROUP Option 04/08/80 */
+                               /*____________________________________*/
 %Skip;
 If Group^='' Then Do;
    Group = Translate(Group,'    ','&)/,');
    Do While(Group^='');
       Group = Substr(Group,Verify(Group,' '));
       Blank = Index(Group,' ');
       Allocate Stack;
       If Blank<Length(Group)
          Then Group = Substr(Group,Blank+1);
          Else Group = '';
       End;
    If Allocn(Stack)>0 Then Do;
       Allocate Groups;
       Do I=Allocn(Stack) By -1 To 1;
          Groups(I) = Stack;
          Free Stack;
          End;
       End;
    End;
 Return; /* from "Begingr" */
+        /*________________*/
 %Skip;
 Dcl Allocn    Builtin;
 Dcl Group     Char(*);
 Dcl Groups    (Allocn(Stack)) Ext Ctl Char(8) Varying;
 Dcl I         Fixed Bin;
 Dcl Stack     Ctl Char(8) Varying Init((Substr(Group,1,Blank-1)));
 Dcl Substr    Builtin;
 Dcl Translate Builtin;
 End; /* of Begingr */
+     /*____________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Get: Proc Reorder;  /*  Get Data from a Link Editor Map     04/08/80 */
+                    /*_______________________________________________*/
 Allocate Region;
 Head = Aregion;
 Call Get_branch('');
 On Endfile(Linkmap) Aline = Null;
 Read File(Linkmap) Set(Aline);
 Do While(Aline^=Null);
    If Substr(Line,3,6)='PSEUDO' Then Leave;
    If Substr(Line,2,7)='IEW0000'
       Then Do; /* List Report */
+               /*_____________*/
          Substr(Line,1,8) = '';
          If Line^='' Then Line = Substr(Line,Verify(Line,' '));
          Blank = Index(Line,' ');
          Verb = Substr(Line,1,Blank-1);
          Substr(Line,1,Blank) = '';
          If Line^='' Then Line = Substr(Line,Verify(Line,' '));
          Blank = Index(Line,' ');
          Substr(Line,Blank) = '';
          Select(Verb);
             When('OVERLAY') Call Get_branch(Line);
             When('INCLUDE') If Title='' Then Title=Substr(Line,Blank);
             When('INSERT')  Call Get_insert;
             Otherwise;
             End;
          End;
       Else If Substr(Line,2,2)='  ' & Substr(Line,4,1)^=' '
          Then If Substr(Line,4,15)^='CONTROL SECTION'
             Then Call Get_map; /* Map report */
+                               /*____________*/
    Read File(Linkmap) Set(Aline);
    End;
 Close File(Linkmap);
 Return; /* from "Get" */
+        /*____________*/
 %Page;
 Get_branch: Proc(Line);  /*  Initialize the next Branch  */
+                         /*______________________________*/
 Segment = Segment + 1;
 If Allocn(Csect)>0 Then Call Get_family;
 If Index(Line,'(REGION)')>0 Then Do;
    Allocate Region Set(Bug);
    Region.Link = Bug;
    Aregion = Bug;
    Nregion = Nregion + 1;
    Substr(Line,Index(Line,'(')) = '';
    End;
 Allocate Branch Set(Tbranch);
 If Abranch^=Null Then Branch.Link = Tbranch;
 If Region.Family=Null
    Then Region.Family = Tbranch;
    Else If Line=Branch.Name
       Then Do;
          Branch.Sibling = Tbranch;
          Tbranch->Branch.Parent = Branch.Parent;
          End;
       Else Do;
          Do Bug=Branch.Parent Repeat Bug->Branch.Parent
             While(Bug^=Null);
             If Bug->Branch.Name=Line Then Leave;
             End;
          If Bug=Null
             Then Do;
                Branch.Child = Tbranch;
                Tbranch->Branch.Parent = Bug;
                End;
             Else Do;
                Bug->Branch.Sibling = Tbranch;
                Tbranch->Branch.Parent = Abranch;
                End;
          End;
 Abranch = Tbranch;
 Branch.Name = Substr(Line,1,Blank-1);
 Dcl Line Char(121);
 End; /* of Get_branch */
+     /*_______________*/
 %Page;
 Get_family: Proc;  /*  Wrap-up a Set of Insert's  */
+                   /*_____________________________*/
 Ncsect = Allocn(Csect);
 Allocate Family;
 If Abranch=Null
    Then Region.Family = Afamily;
    Else Branch.Family = Afamily;
 Family.Long(*) = 0;
 Do I=Allocn(Csect) By -1 To 1;
    Family.Name(I) = Csect;
    Free Csect;
    End;
 End; /* of Get_family */
+     /*_______________*/
 %Skip(5);
 Get_insert: Proc;  /*  Recognize and Process an Insert Line  */
+                   /*________________________________________*/
 Line = Translate(Line,' ',',');
 Do While(Line^='');
    Blank = Index(Line,' ');
    Allocate Csect;
    Csect = Substr(Line,1,Blank-1);
    Line = Substr(Line,Blank+1);
    End;
 End; /* of Get_insert */
+     /*_______________*/
 %Page;
 Get_map: Proc;  /*  Process a Line of Map Data  */
+                /*______________________________*/
 If Initial Then Do;
    If Allocn(Csect)>0 Then Call Get_family;
    Aregion = Head;
    Abranch = Region.Family;
    Total = 0;
    Initial = '0'b;
    End;
 Segment = Substr(Line,30,4);
 Tbranch = Abranch;
 Do Abranch=Abranch Repeat Branch.Link While(Branch.Segment<Segment);
    End;
 If Branch.Family=Null Then Do;
    Ncsect = 1;
    Allocate Family Set(Branch.Family);
    Branch.Family->Family.Name(1) = Substr(Line,4,8);
    Branch.Family->Family.Long(1) = 0;
    End;
 Afamily = Branch.Family;
 Do I=1 To Family.Ncsect While(Family.Name(I)^=Substr(Line,4,8));
    End;
 If I>Family.Ncsect Then Do; /* expand the family */
+                            /*___________________*/
    Ncsect = Family.Ncsect + 1;
    Allocate Family Set(Bug);
    Do I=1 To Family.Ncsect;
       Bug->Family.Array(I) = Family.Array(I);
       End;
    Free Family;
    Branch.Family, Afamily = Bug;
    Family.Name(I) = Substr(Line,4,8);
    End;
 Family.Long(I) = Hex(Substr(Line,22,6));
 Origin = Hex(Substr(Line,14,6));
 If Abranch^=Tbranch
    Then Branch.Origin = Origin;
    Else Branch.Origin = Min(Branch.Origin, Origin);
 Branch.Long = Origin + Family.Long(I) - Branch.Origin;
 Total = Max(Total, Origin+Family.Long(I));
 End; /* of Get_map */
+     /*____________*/
 %Page;
 Dcl   Abranch Ptr Init(Null);
 Dcl   Afamily Ptr;
 Dcl   Aline   Ptr;
 Dcl   Allocn  Builtin;
 Dcl   Aregion Ptr;
 Dcl   Blank   Fixed Bin Init(1);
 Dcl 1 Branch  Based(Abranch),
     2 Sibling Ptr Init(Null),
     2 Child   Ptr Init(Null),
     2 Family  Ptr Init(Null),
     2 Link    Ptr Init(Null),
     2 Parent  Ptr Init(Null),
     2 Name    Char(8),
     2 Long    Fixed Bin(20) Init(0),
     2 Origin  Fixed Bin(20) Init(0),
     2 Segment Fixed Bin Init(Segment);
 Dcl   Bug     Ptr;
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl   Csect   Ctl Char(8);
 Dcl 1 Family  Based(Afamily),
     2 Ncsect  Fixed Bin,
     2 Array   (Ncsect Refer(Family.Ncsect)),
     3 Name    Char(8),
     3 Long    Fixed Bin(20);
 Dcl   Hex     Entry(Char(6)) Returns(Fixed Bin(20));
 Dcl   I       Fixed Bin;
 Dcl   Index   Builtin;
 Dcl   Line    Based(Aline) Char(121);
 Dcl   Linkmap File Record Input;
 Dcl   Max     Builtin;
 Dcl   Min     Builtin;
 Dcl   Name    Char(8);
 Dcl   Ncsect  Fixed Bin;
 Dcl   Nregion Fixed Bin Init(1);
 Dcl   Null    Builtin;
 Dcl   Origin  Fixed Bin(20);
 Dcl 1 Region  Based(Aregion),
     2 Link    Ptr Init(Null),
     2 Family  Ptr Init(Null);
 Dcl   Segment Fixed Bin Init(0);
 Dcl   Substr  Builtin;
 Dcl   Sysprint File Print Env(U,Blksize(133));
 Dcl   Tbranch Ptr;
 Dcl   Translate Builtin;
 Dcl   Unspec  Builtin;
 Dcl   Verb    Char(7) Varying;
 Dcl   Verify  Builtin;
 End; /* of Get */
+     /*________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Hex: Proc(String)      /*  Hex --> Binary       No1764      04/08/80 */
+                       /*____________________________________________*/
    Returns(Fixed Bin(20))
    Reorder;
 %Skip;
 Do I=6 By -1 To 1 While(Substr(String,I,1)^=' ');
    If Substr(String,I,1)^='0'
       Then Value=Value+Index('123456789ABCDEF',Substr(String,I,1))*Pwr;
    Pwr = Pwr * 16;
    End;
 Return(Value);
 %Skip;
 Dcl I      Fixed Bin;
 Dcl Index  Builtin;
 Dcl Pwr    Fixed Bin(20) Init(1);
 Dcl String Char(6);
 Dcl Substr Builtin;
 Dcl Value  Fixed Bin(20) Init(0);
 End; /* of Hex */
+     /*________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Massage: Proc Reorder;  /*  Massage the Overlay Tree        04/08/80 */
+                        /*___________________________________________*/
 Do Abranch=Head->Region.Family Repeat Branch.Link While(Abranch^=Null);
    If Branch.Family^=Null Then Do Afamily=Branch.Family;
       Do I=1 To Family.Ncsect; /* remove asterisk prefices */
+                               /*__________________________*/
          J = Verify(Family.Name(I),'*');
          If J>1 Then Family.Name(I) = Substr(Family.Name(I),J);
          End;
       Do I=1 To Family.Ncsect-1; /* sort by csect name */
+                                 /*____________________*/
          J = I;
          Do K=I+1 To Family.Ncsect;
             If Family.Name(K)<Family.Name(J) Then J = K;
             End;
          If I<J Then Do;
             Swap = Family.Array(I);
             Family.Array(I) = Family.Array(J);
             Family.Array(J) = Swap;
             End;
          End;
       Do I=1 To Family.Ncsect-1; /* merge PL/I csect pairs */
+                                 /*________________________*/
          J = Index(Family.Name(I)××' ',' ') - 2;
          If Substr(Family.Name(I),1,J)=Substr(Family.Name(I+1),1,J)Then
          If Substr(Family.Name(I),J+1,1)='1' Then
          If Substr(Family.Name(I+1),J+1,1)='2' Then Do;
             Substr(Family.Name(I),J+1,1) = ' ';
             Family.Long(I) = Family.Long(I) + Family.Long(I+1);
             Family.Long(I+1) = 0;
             End;
          End;
       If Allocn(Groups)>0 Then Call Compact(Afamily);
       Do I=1 To Family.Ncsect-1; /* sort by csect lengths */
+                                 /*_______________________*/
          J = I;
          Do K=I+1 To Family.Ncsect;
             If Family.Long(K)>Family.Long(J) Then J = K;
             End;
          If I<J Then Do;
             Swap = Family.Array(I);
             Family.Array(I) = Family.Array(J);
             Family.Array(J) = Swap;
             End;
          End;
       Call Reduce(Afamily);
       Branch.Family = Afamily;
       If Afamily^=Null Then If Forms='8' × Forms='6' × Tso Then
       Do I=1 To Family.Ncsect; /* translate to initial caps */
+                               /*___________________________*/
          Substr(Family.Name(I),2) = Translate(Substr(Family.Name(I),2),
             'abcdefghijklmnopqrstuvwxyz',
             'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
          End;
       End;
    End;
 Return; /* from "Massage" */
+        /*________________*/
 %Page;
 Dcl   Abranch Ptr;
 Dcl   Afamily Ptr;
 Dcl   Allocn  Builtin;
 Dcl   Aregion Ptr;
 Dcl 1 Branch  Based(Abranch),
     2 Sibling Ptr,
     2 Child   Ptr,
     2 Family  Ptr,
     2 Link    Ptr,
     2 Parent  Ptr,
     2 Name    Char(8),
     2 Long    Fixed Bin(20),
     2 Origin  Fixed Bin(20),
     2 Segment Fixed Bin;
 Dcl   Bug     Ptr;
 Dcl   Compact Entry(Ptr);
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl 1 Family  Based(Afamily),
     2 Ncsect  Fixed Bin,
     2 Array   (Ncsect Refer(Family.Ncsect)),
     3 Name    Char(8),
     3 Long    Fixed Bin(20);
 Dcl   Groups  (*) Ext Ctl Char(8) Varying;
 Dcl   Hbound  Builtin;
 Dcl   I       Fixed Bin;
 Dcl   J       Fixed Bin;
 Dcl   K       Fixed Bin;
 Dcl   Length  Builtin;
 Dcl   Ncsect  Fixed Bin;
 Dcl   Null    Builtin;
 Dcl   Reduce  Entry(Ptr);
 Dcl 1 Region  Based(Aregion),
     2 Link    Ptr,
     2 Family  Ptr;
 Dcl   Segment Fixed Bin Init(1);
 Dcl   Substr  Builtin;
 Dcl 1 Swap    Like Family.Array;
 Dcl   Sysprint File Print Env(U,Blksize(133));
 Dcl   Translate Builtin;
 Dcl   Unspec  Builtin;
 Dcl   Verify  Builtin;
 End; /* of Massage */
+     /*____________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Compact: Proc(Afamily) Reorder;  /*  Group the Csects       04/08/80 */
+                                 /*__________________________________*/
 %Skip;
 Do I=1 To Hbound(Groups,1);
    L = Length(Groups(I));
    Do J=2 To Family.Ncsect;
       If Groups(I)=Substr(Family.Name(J-1),1,L) Then
       If Groups(I)=Substr(Family.Name(J),  1,L) Then Do;
          Family.Long(J) = Family.Long(J) + Family.Long(J-1);
          Family.Long(J-1) = 0;
          Substr(Family.Name(J),L+1) = '-';
          End;
       End;
    End;
 Do J=1 To Family.Ncsect;
    If Family.Long(J)>0 & Index(Family.Name(J),'-')>0
       Then Family.Long(J) = -Family.Long(J);
    End;
 Return; /* from "Compact" */
+        /*________________*/
 %Skip;
 Dcl   Afamily Ptr;
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl 1 Family  Based(Afamily),
     2 Ncsect  Fixed Bin,
     2 Array   (Ncsect Refer(Family.Ncsect)),
     3 Name    Char(8),
     3 Long    Fixed Bin(20);
 Dcl   Groups  (*) Ext Ctl Char(8) Varying;
 Dcl   Hbound  Builtin;
 Dcl   I       Fixed Bin;
 Dcl   Index   Builtin;
 Dcl   J       Fixed Bin;
 Dcl   L       Fixed Bin;
 Dcl   Length  Builtin;
 Dcl   Substr  Builtin;
 Dcl   Sysprint File Print Env(U,Blksize(133));
 End; /* of Compact */
+     /*____________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Reduce: Proc(Afamily);  /*  Reduce the Family Size          04/08/80 */
+                        /*___________________________________________*/
 %Skip;
 Ncsect = Family.Ncsect;
 Do I=1 To Family.Ncsect;
    If Family.Long(I)=0
       Then Ncsect = Ncsect - 1;
       Else Family.Long(I) = Abs(Family.Long(I));
    End;
 If Ncsect<Family.Ncsect Then Do;
    Bug = Null;
    If Ncsect>0 Then Do;
       Allocate Family Set(Bug);
       J = 0;
       Do I=1 To Family.Ncsect;
          If Family.Long(I)>0 Then Do;
             J = J + 1;
             Bug->Family.Array(J) = Family.Array(I);
             End;
          End;
       End;
    Free Family;
    Afamily = Bug;
    End;
 Return; /* from "Reduce" */
+        /*_______________*/
 %Skip;
 Dcl   Abs     Builtin;
 Dcl   Afamily Ptr;
 Dcl   Bug     Ptr;
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl 1 Family  Based(Afamily),
     2 Ncsect  Fixed Bin,
     2 Array   (Ncsect Refer(Family.Ncsect)),
     3 Name    Char(8),
     3 Long    Fixed Bin(20);
 Dcl   I       Fixed Bin;
 Dcl   J       Fixed Bin;
 Dcl   Ncsect  Fixed Bin;
 Dcl   Null    Builtin;
 Dcl   Sysprint File Print Env(U,Blksize(133));
 Dcl   Unspec   Builtin;
 End; /* of Reduce */
+     /*___________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Report: Proc Reorder;  /*  Generate the Overlay Diagram     04/08/80 */
+                       /*____________________________________________*/
 %Skip;
 If Forms^='8' & Forms^='6' Then Bullet = 'X';
 Call Header;
 Do Abranch=Head->Region.Family Repeat Branch.Link While(Abranch^=Null);
    If Branch.Family^=Null Then Do;
       Afamily = Branch.Family;
       J = Max(1,Branch.Origin*Scale);
       Line = '';
       Do Aregion=Head->Region.Link Repeat Region.Link
          While(Aregion^=Null);
          I = Region.Family->Branch.Origin*Scale;
          Substr(Line,I,1) = '×';
          End;
       If Lineno(Sysprint)+Family.Ncsect>=Lc Then Call Header;
       Do I=1 To Family.Ncsect;
          Substr(Line,J,8) = Family.Name(I);
          If Family.Long(I)>500 & J+10<=Ls
             Then Put String(Substr(Line,J+7,4)) Edit
                ((Family.Long(I)+500)/1000,'K')(F(3),A);
          Do Lchar=Ls By -1 To 1 While(Substr(Line,Lchar,1)=' ');
             End;
          If Lineno(Sysprint)=Lc Then Call Header;
          Put Edit(Substr(Line,1,Lchar))(Skip,A);
          Substr(Line,J,11) = '';
          End;
       Do I=J To (Branch.Origin+Branch.Long)*Scale;
          Substr(Line,I,1) = Bullet;
          End;
       Do Lchar=Ls By -1 To 1 While(Substr(Line,Lchar,1)=' ');
          End;
       Put Skip Edit(Substr(Line,1,Lchar))(A);
       End;
    End;
 Put Skip(2) Edit
    (Bullet,' =',1/Scale,' bytes')(2 A,F(2+Log10(1/Scale)),A)
    ((Total+500)/1000,'K')(Col(Ls-5),P'Z,ZZZ',A)
    (Title)(Col((Ls-Length(Title))/2),A);
 Return; /* from "Report" */
+        /*_______________*/
 %Page;
 Header: Proc;
 Put Page Edit
    (Substr(Date,3,2),'/',Substr(Date,5,2),'/',Substr(Date,1,2))(A);
 If Title^='' Then Put Edit(Title)(Col((Ls-Length(Title))/2),A);
 Page = Page + 1;
 If Page=1
    Then Put Edit((Total+500)/1000,'K')(Col(Ls-5),P'Z,ZZZ',A);
    Else Put Edit('Page',Page)
       (Col(Ls-Log10(Page+.1)-6),A,F(2+Log10(Page+.1)));
 Put Skip(2);
 End; /* of Header */
+     /*___________*/
 %Page;
 Dcl   Abranch Ptr;
 Dcl   Afamily Ptr;
 Dcl   Aregion Ptr;
 Dcl 1 Branch  Based(Abranch),
     2 Sibling Ptr,
     2 Child   Ptr,
     2 Family  Ptr,
     2 Link    Ptr,
     2 Parent  Ptr,
     2 Name    Char(8),
     2 Long    Fixed Bin(20),
     2 Origin  Fixed Bin(20),
     2 Segment Fixed Bin;
 Dcl   Bullet  Char(1) Init('ô');
 Dcl 1 Control Ext,
     2 Debug   Bit(1) Aligned Init('0'b),
     2 Forms   Char(1) Init(' '),
     2 Head    Ptr,
     2 Initial Bit(1) Aligned Init('1'b),
     2 Lc      Fixed Bin Init(80),
     2 Ls      Fixed Bin Init(131),
     2 Title   Char(80) Varying Init(''),
     2 Total   Fixed Bin(20),
     2 Tso     Bit(1) Aligned Init('1'b);
 Dcl   Date    Builtin;
 Dcl 1 Family  Based(Afamily),
     2 Ncsect  Fixed Bin,
     2 Array   (Ncsect Refer(Family.Ncsect)),
     3 Name    Char(8),
     3 Long    Fixed Bin(20);
 Dcl   I       Fixed Bin;
 Dcl   J       Fixed Bin;
 Dcl   Lchar   Fixed Bin;
 Dcl   Line    Char(Ls);
 Dcl   Lineno  Builtin;
 Dcl   Log10   Builtin;
 Dcl   Null    Builtin;
 Dcl   Page    Fixed Bin Init(0);
 Dcl 1 Region  Based(Aregion),
     2 Link    Ptr,
     2 Family  Ptr;
 Dcl   Scale   Float Dec Init(((Ls-8)/Total));
 Dcl   Substr  Builtin;
 Dcl   Sysprint File Print Env(U,Blksize(133));
 End; /* of Report */
+     /*___________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Dummy1: Proc;
 End; /* of Dummy1 */
+     /*___________*/
*Process Mar(2,72,1),Nm,Lc(60),S,F(E),Opt(2),Gn;
 Dummy2: Proc;
 End; /* of Dummy2 */
+     /*___________*/
//LKED.SYSPRINT DD UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE),DSN=&&LINKMAP,
// DISP=(,PASS),DCB=BLKSIZE=605
//LKED.SYSIN DD *
 ENTRY PLISTART
 OVERLAY NODE
    INSERT **BEGIN1,**BEGIN2
    INSERT BEGINGR1,BEGINGR2
 OVERLAY NODE
    INSERT ****GET1,****GET2
    INSERT ****HEX1,****HEX2
 OVERLAY NODE
    INSERT MASSAGE1,MASSAGE2
    OVERLAY MASSAGE
       INSERT COMPACT1,COMPACT2
    OVERLAY MASSAGE
       INSERT *REDUCE1,*REDUCE2
 OVERLAY NODE
    INSERT *REPORT1,*REPORT2
 OVERLAY PART(REGION) ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿ ¿
    INSERT *DUMMY11,*DUMMY12
 OVERLAY PART
    INSERT *DUMMY21,*DUMMY22
// EXEC NO1764,LIB='SYS1.ENGRLOAD',
// OP='Group(I,Pli),Ls(104),Lc(60),Forms(80),Title(No1764)'
//
