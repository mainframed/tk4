AMDECODE TITLE '                               AMDAHL AMDPRDMP INSTRUCT*
               ION DECODER.'
         MACRO
         REGISTER
         LCLA  &N
.LOOP    ANOP
R&N      EQU   &N
&N       SETA  &N+1
         AIF   (&N LE 15).LOOP
         MEND
         SPACE 1
         MACRO
&L       PRINTBUF &TEXT
         LCLC  &L2
&L2      SETC  '&L'
         AIF   ('&TEXT' EQ '').NOMOVE
&L2      L     R15,ADPLBUF         GET BUFFER ADDRESS.
         MVC   0(L'BLANKS,R15),BLANKS BLANK OUT PREVIOUS JUNK.
         MVC   OF(L'&TEXT,R15),&TEXT MOVE ITEM TO BUF'R.
&L2      SETC  ''
.NOMOVE  ANOP
&L2      LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLPRNT        EXTRACT PRINT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO PRINT SUBROUTINE.
         MEND
         SPACE 1
         MACRO
&L       FORMAT &PATTERN,&BADRC=
&L       LA    R0,&PATTERN         ADDRESS FORMAT PATTERN.
         LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLFRMT        EXTRACT FORMAT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO FORMAT SUBROUTINE.
         AIF   ('&BADRC' EQ '').NORC
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   &BADRC              NON-ZERO, TAKE ABNORMAL EXIT.
.NORC    ANOP
         MEND
         SPACE 2
         MACRO
         CLASS
         GBLA  &CA
         LCLC  &CC(7)
         LCLA  &I,&J,&CV(7)
&CC(1)   SETC  'FLOAT'
&CC(2)   SETC  'DECIMAL'
&CC(3)   SETC  'I/O'
&CC(4)   SETC  'CONTROL'
&CC(5)   SETC  '370'
&CC(6)   SETC  'XA'
.*
&CV(1)   SETA  1
&CV(2)   SETA  2
&CV(3)   SETA  4
&CV(4)   SETA  8
&CV(5)   SETA  16
&CV(6)   SETA  32
&CV(7)   SETA  64
.LOOP1   ANOP
         AIF   (&I EQ N'&SYSLIST(1)).EXIT
&I       SETA  &I+1
&J       SETA  0
.LOOP2   ANOP
         AIF   (&J EQ 7).ERROR1
&J       SETA  &J+1
         AIF   ('&SYSLIST(1,&I)' NE '&CC(&J)').LOOP2
&CA      SETA  &CA+&CV(&J)
         AGO   .LOOP1
.EXIT    ANOP
         MEXIT
.ERROR1  MNOTE 8,'INVALID CLASS SPECIFICATION:  &SYSLIST(1,&I)'
         MEND
         SPACE 1
         MACRO
&LABEL   OPCODE &MNEMON,&CLASS=,&TYPE=,&EXT=,&COUNT=
         GBLA  &CA
         LCLA  &K
         LCLC  &TC(16)
&TC(1)   SETC  'I'
&TC(2)   SETC  'RR'
&TC(3)   SETC  'RR-R1ONLY'
&TC(4)   SETC  'RRE'
&TC(5)   SETC  'RRE-R1ONLY'
&TC(6)   SETC  'RX'
&TC(7)   SETC  'RS'
&TC(8)   SETC  'RS-R1ONLY'
&TC(9)   SETC  'SI'
&TC(10)  SETC  'S'
&TC(11)  SETC  'S-NOOP'
&TC(12)  SETC  'SS'
&TC(13)  SETC  'SS-L1L2'
&TC(14)  SETC  'SS-R1R3'
&TC(15)  SETC  'SSE'
&TC(16)  SETC  'UNDEFINED'
         AIF   ('&EXT' NE '' OR '&COUNT' NE '').MFO
         AIF   ('&MNEMON' EQ '').CHEKNUL
&CA      SETA  0
         AIF   ('&CLASS' EQ '').NOCLASS
         CLASS &CLASS
.NOCLASS ANOP
         AIF   ('&TYPE' EQ '').ERR1
.LOOP    ANOP
&K       SETA  &K+1
         AIF   (&K EQ 16).ERR2
         AIF   ('&TYPE' NE '&TC(&K)').LOOP
&LABEL   DC    AL1(&CA,(&K-1)*4),CL6'&MNEMON'
         MEXIT
.CHEKNUL ANOP
         AIF   ('&CLASS' NE '').ERR3
         AIF   ('&TYPE' NE '' AND '&TYPE' NE 'UNDEFINED').ERR4
&LABEL   DC    AL1(0,(16-1)*4),CL6'DC'
         MEXIT
.MFO     ANOP
         AIF   ('&COUNT' EQ '' OR '&EXT' EQ '').ERR5
         AIF   ('&TYPE&MNEMON&CLASS' NE '').ERR6
&LABEL   DC    X'8000',AL2(&COUNT),A(&EXT)
         MEXIT
.ERR1    ANOP
         MNOTE 8,'TYPE OPERAND REQUIRED WITH MNEMONIC.'
         MEXIT
.ERR2    ANOP
         MNOTE 8,'INVALID TYPE SPECIFIED:  &TYPE.'
         MEXIT
.ERR3    ANOP
         MNOTE 8,'CLASS OPERAND INVALID WITHOUT MNEMONIC.'
         MEXIT
.ERR4    ANOP
         MNOTE 8,'TYPE MUST BE "UNDEFINED".'
         MEXIT
.ERR5    ANOP
         MNOTE 8,'COUNT AND EXTENSION ARE BOTH REQUIRED.'
         MEXIT
.ERR6    ANOP
         MNOTE 8,'TYPE, CLASS AND MNEMONIC ARE INVALID WITH COUNT AND E*
               XTENSION.'
         MEND
         EJECT
***********************************************************************
*                                                                     *
*                         AMDECODE                                    *
*                                                                     *
*     THIS PROGRAM IS DESIGNED TO RUN AS AN AMDPRDMP EXIT (OR IPCS    *
*     VERBEXIT) TO DECODE INSTRUCTIONS FROM MEMORY WITHIN A DUMP.     *
*     SYNTAX FOR USE IS AS FOLLOWS:                                   *
*                                                                     *
*          DECODE ADDR1:ADDR2             <,ASID=NNN × REAL>          *
*                  <,NOCONTROL>           <,NODECIMAL>                *
*                  <,NOFLOAT>             <,NOIO>                     *
*                  <,NO370>               <,NOXA>                     *
*                                                                     *
*          ADDR1     = BEGINNING ADDRESS AT WHICH MEMORY IS TO BE     *
*                      DECODED.                                       *
*          ADDR2     = ENDING ADDRESS AT WHICH MEMORY IS TO BE        *
*                      DECODED.                                       *
*          ASID      = DECIMAL ASID OF THE MEMORY TO BE USED.         *
*          REAL      = REAL MEMORY IS TO BE EXTRACTED (XA-ONLY).      *
*          NOCONTROL = CONTROL INSTRUCTIONS ARE TO BE DECODED AS      *
*                      HALFWORD HEX CONSTANTS.                        *
*          NODECIMAL = DECIMAL INSTRUCTIONS ARE TO BE DECODED AS      *
*                      HALFWORD HEX CONSTANTS.                        *
*          NOFLOAT   = FLOATINT POINT INSTRUCTIONS ARE TO BE DECODED  *
*                      AS HALFWORD HEX CONSTANTS.                     *
*          NOIO      = INPUT/OUTPUT INSTRUCTIONS ARE TO BE DECODED    *
*                      AS HALFWORD HEX CONSTANTS.                     *
*          NO370     = 370-UNIQUE OPCODES ARE TO BE DECODED AS        *
*                      HALFWORD HEX CONSTANTS.                        *
*          NOXA      = XA-UNIQUE OPCODES ARE TO BE DECODED AS         *
*                      HALFWORD HEX CONSTANTS.                        *
*                                                                     *
*     NOTE:  THE "ADDR1" AND "ADDR2" FIELDS ARE MANDATORY AND MUST    *
*            BE SEPARATED BY A COLON.  ALL OTHER FIELDS ARE OPTIONAL  *
*            AND MUST BE SEPARATED BY COMMAS.  THE FIRST BLANK IN     *
*            THE OPERAND FIELD DELIMITS IT.                           *
*                                                                     *
*     EXIT OPERANDS MAY ALSO BE SUPPLIED THROUGH THE ABEND/DUMP       *
*     PARAMETER LIST, AS FOLLOWS:                                     *
*                                                                     *
*          - ADPLCOM1 = BEGINNING ADDRESS TO DECODE.                  *
*          - ADPLCOM2 = ENDING ADDRESS TO DECODE.                     *
*          - ADPLCOM3 = BITS 0-7 REPRESENT SUPPRESSION FLAGS AS       *
*                       DESCRIBED IN THE $FLAG1 FIELD, BELOW.         *
*          - ADPLCOM4 = BEGINNING OFFSET VALUE TO BE USED.            *
*          - ADPLASID = ADDRESS SPACE NUMBER (VIRTUAL MEMORY).        *
*          - ADPLPRDP = DUMP READ/FORMAT FLAGS.                       *
*                                                                     *
*     INVOKING AMDECODE IN THIS MANNER MAY BE USEFUL IF CALLING       *
*     IT FROM ANOTHER AMDPRDMP EXIT.  THE FIELDS IN THE ABDPL WILL    *
*     BE USED IF THERE ARE NO OPERANDS SPECIFIED IN THE EXTENSION.    *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*     THIS PROGRAM FOLLOWS ALL THE CONVENTIONS DESCRIBED FOR AMDPRDMP *
*     EXITS DESCRIBED IN THE "MVS/XA S.P.L.: SERVICE AIDS" MANUAL.    *
*     IT IS REENTRANT, REUSABLE AND REFRESHABLE AND MAY BE PLACED IN  *
*     THE LINK-PACK AREA IF DESRIABLE.  NOTE THAT IN ORDER TO BE A    *
*     RECOGNIZABLE AMDPRDMP EXIT, THIS MODULES NAME MUST BE PLACED    *
*     IN THE AMDPRDMP EXIT CONTROL TABLE (AMDPRECT).  THE ABOVE-      *
*     MENTIONED MANUAL DESCRIBES THIS PROCESS IN DETAIL.              *
*                                                                     *
*     NOTE:  THE MNEMONICS GENERATED BY THIS PROGRAM ARE BASED ON     *
*     THE PRINCIPLES OF OPERATION MANUAL (XA AND -8 LEVEL) PLUS A     *
*     FEW THAT I INVENTED FOR MVS/SE'S E5 OP-CODES.                   *
*                                                                     *
***********************************************************************
         SPACE 2
         REGISTER
         SPACE 1
OF       EQU   13                  PRINT OFFSET FOR AMDSTAT.
         EJECT
***********************************************************************
*                                                                     *
*     PERFORM BASIC HOUSEKEEPING.  ACQUIRE REENTRANT WORK AREA.       *
*                                                                     *
***********************************************************************
         SPACE 1
AMDECODE CSECT ,                   ESTABLISH PROGRAM ENTRY POINT.
         SAVE  (14,12),,AMDECODE_V03M00_&SYSDATE_&SYSTIME_COPYRIGHT_198*
               5_AMDAHL_CORP._SE_TOOLS_-_SETT010_AMDIPCSE
         LR    R12,R15             LOAD PROGRAM BASE.
         USING AMDECODE,R12        MAKE CODE ADDRESSABLE.
         LR    R10,R1              PRESERVE PARAMETER REGISTER.
         USING ABDPL,R10           MAKE PARAMETER DSECT ADDRESSABLE.
         LA    R0,$LUSER           GET LENGTH OF REENTRANT DSECT.
         ICM   R0,B'1000',ADPLSBPL INSERT PRDMP SUPPLIED SUBPOOL.
         GETMAIN R,LV=(0)          GETMAIN REENTRANT AREA.
         LR    R2,R1               LOAD ADDRESS IN EVEN REGISTER.
         LA    R3,$LUSER           GET LENGTH TO ZERO.
         XR    R5,R5               SET FILL CHARACTER.
         MVCL  R2,R4               ZERO THE REENTRANT AREA.
         LR    R11,R1              LOAD REENTRANT BASE REGISTER.
         USING $USER,R11           MAKE AREA ADDRESSABLE.
         ST    R13,$SAVE+4         FORWARD CHAIN SAVE AREAS.
         LR    R2,R13              HOLD OLD SAVE ADDRESS.
         LA    R13,$SAVE           ADDRESS NEW SAVE AREA.
         ST    R13,8(,R2)          BACK CHAIN SAVE AREAS.
         EJECT
**********************************************************************
*                                                                    *
*     PARSE THE OPERANDS IF THEY WERE SPECIFIED.                     *
*                                                                    *
**********************************************************************
         SPACE 1
         L     R15,ADPLBUF         GET BUFFER ADDR. FOR ERROR MSG.
         L     R9,ADPLEXT          GET ADDRESS OF EXTENSION VECTOR.
         ICM   R2,B'1111',0(R9)    GET ADDRESS OF OPERANDS.
         BZ    SCANNOOP            NONE, CHECK FOR NO-OPERAND RUN.
         AIF   ('&SYSPARM' EQ '370').SKIP1  CHECK ADPLOPLN FOR ZERO.
         OC    ADPLOPLN,ADPLOPLN   OPERAND LENGTH ZERO?
         BZ    SCANNOOP            YES, CHECK FOR NO-OPERAND RUN.
.SKIP1   ANOP
         LA    R4,$NEXT            ADDRESS STARTING ADDRESS BUCKET.
         OI    $FLAG2,$COLONV+$ADDRSCN SET STARTING SCAN FLAGS.
SCAN0    DS    0H
         TM    $FLAG2,$ENDSCAN      WAS A BLANK DELIMITER FOUND?
         BO    SCANEND             YES, CHECK RESULTS.
         LR    R3,R2               SAVE PARM'S STARTING ADDR.
SCAN1    DS    0H
         CLI   0(R2),C','          DO WE HAVE A COMMA?
         BE    SCANCOMA            YES, SEE IF WE CAN USE IT.
         CLI   0(R2),C':'          DO WE HAVE A COLON?
         BE    SCANCOLN            YES, CHECK IF IT'S VALID.
         CLI   0(R2),C'-'          HOW ABOUT A HYPHEN?
         BE    SCANCOLN            YES, TREAT IT AS A COLON.
         CLI   0(R2),C' '          BLANK?
         BE    SCANBLNK            YES, SET DELIMITER FLAG.
         LA    R2,1(,R2)           NONE OF THE ABOVE, INCREMENT ...
         B     SCAN1                  AND TRY AGAIN.
         SPACE 1
SCANCOLN DS    0H
         TM    $FLAG2,$COLONV      ARE WE EXPECTING A COLON?
         BNO   SCANERR2            NO, WE CAN'T HANDLE IT.
         B     SCANCOMA            PRETEND IT'S A COMMA FOR NOW.
         SPACE 1
SCANBLNK DS    0H
         OI    $FLAG2,$ENDSCAN     SET DELIMITER-FOUND FLAG.
         SPACE 1
SCANCOMA DS    0H
         SR    R2,R3               COMPUTE LENGTH OF OPERAND.
         BNP   SCANERR3            NULL OPERAND, GO BOMB OUT.
         TM    $FLAG2,$ADDRSCN     LOOKING FOR ADDRESSES?
         BO    SCANADDR            YES, CHECK ITS VALIDITY.
         SPACE 1
         LA    R5,SCANTBL          ADDRESS THE SCAN COMPARANDS.
         LA    R6,SCANTBLL         LOAD LENGTH OF ONE ENTRY.
         LA    R7,SCANTBLE-1       POINT TO ENDING ENTRY.
SCAN2    DS    0H
         CLC   1(4,R5),0(R3)       OPERAND MATCHES COMPARAND?
         BE    SCANGOT1            YES, WE'VE GOT A WINNER.
         BXLE  R5,R6,SCAN2         NO, TRY NEXT COMPARAND.
         B     SCANERR4            FELL THRU, INVALID OPERAND.
         SPACE 1
SCANGOT1 DS    0H
         CLI   0(R3),C'A'          ASID SPECIFICATION?
         BE    SCANASID            YES, HAVE AT IT.
         AIF   ('&SYSPARM' EQ '370').SKIP2  REAL MEMORY SPECIFICATION.
         CLI   0(R3),C'R'          REAL SPECIFICATION?
         BNE   SCANORIT            NO, JUST OR FLAG BIT ON.
         MVI   ADPLPRDP,ADPLREAL   SET REAL MEMORY ACCESS FLAG.
         B     SCANNEXT            AND GET NEXT OPERAND.
SCANORIT DS    0H
.SKIP2   ANOP
         IC    R6,0(,R5)           INSERT OPERAND MASK BITS.
         EX    R6,SCANOR           TURN ON OMISSION BIT.
SCANNEXT DS    0H
         LA    R2,1(R3,R2)         POINT TO NEXT OPERAND.
         B     SCAN0               AND CONTINUE PARSING.
         SPACE 1
SCANASID DS    0H
         CLI   4(R3),C'='          WAS EQUAL SIGN SPECIFIED?
         BNE   SCANERR5            NO, BUMMER.
         SH    R2,=H'5'            SUBTRACT KEYWORD LENGTH.
         BNP   SCANERR3            NOTHING LEFT, BOMB OUT.
         CH    R2,=H'5'            OPERAND LENGTH TOO LONG?
         BNL   SCANERR6            YES, BOMB OUT.
         LA    R3,5(,R3)           BUMP POINTER TO BYTE 1.
         LR    R4,R2               SAVE BYTE COUNT.
         LR    R5,R3               SAVE OPERAND ADDRESS.
SCAN3    DS    0H
         CLI   0(R5),C'0'          BELOW NUMERIC RANGE?
         BL    SCANERR7            YES, INVALID NUMERIC.
         CLI   0(R5),C'9'          ABOVE NUMERIC RANGE?
         BH    SCANERR7            YES, INVALID NUMERIC.
         LA    R5,1(,R5)           BUMP TO NEXT OPERAND BYTE.
         BCT   R4,SCAN3            CHECK ALL ASID BYTES.
         SPACE 1
         LR    R4,R2                LOAD ASID BYTE COUNT.
         BCTR  R4,0                 LESS ONE FOR MACHINE CODE.
         EX    R4,SCANPACK          PACK THE VALUE.
         CVB   R0,$DOUBLE           CONVERT TO BINARY.
         CH    R0,=H'1100'          HIGHEST THEORETICAL ADDR. SPACE?
         BH    SCANERR6             YES, BOMB OUT.
         STH   R0,ADPLASID          SAVE AS ADDRESS SPACE.
         AIF   ('&SYSPARM' EQ '370').SKIP3
         MVI   ADPLPRDP,ADPLVIRT    SET VIRTUAL MEMORY ACCESS.
.SKIP3   ANOP
         B     SCANNEXT             GET NEXT PARAMETER.
         SPACE 1
SCANADDR DS    0H
         CH    R2,=H'8'             ADDRESS MORE THAN 8 NIBBLES?
         BH    SCANERR8             YES, CAN'T PACK IT.
         LR    R5,R3                SAVE STARTING ADDRESS.
         LR    R6,R2                LOAD ADDRESS LENGTH.
SCAN4    DS    0H
         CLI   0(R5),C'A'           BELOW VALID HEX VALUE?
         BL    SCANERR9             YES, TELL THE DUMMY.
         CLI   0(R5),C'F'           WITHIN HEX (ALPHA)?
         BNH   SCANADOK             YES, VALID HEX DIGIT.
         CLI   0(R5),C'0'           LESS THAN HEX NUMERIC?
         BL    SCANERR9             YES, BOMB OUT.
         CLI   0(R5),C'9'           WITHIN HEX (NUMERIC)?
         BH    SCANERR9             NO, BOMB OUT.
SCANADOK DS    0H
         LA    R5,1(,R5)            DISPLACE TO NEXT ADDRESS BYTE.
         BCT   R6,SCAN4             TEST ALL BYTES.
         SPACE 1
         XC    $DOUBLE,$DOUBLE      ZONK THE RECEIVING FIELD.
         LA    R5,$DOUBLE+8         POINT AT END OF WORD.
         SR    R5,R2                COMPUTE OFFSET INTO WORD.
         LR    R6,R2                SAVE IN REGISTER 6.
         BCTR  R6,0                 DECREMENT FOR MACHINE CODE.
         EX    R6,SCANMVC           MOVE OPERAND INTO WORK AREA.
         EX    R6,SCANTRAN          TRANSLATE TO UNPACKED.
         PACK  0(5,R4),$DOUBLE(9)   PACK THE RESULT.
         TM    $FLAG2,$COLONV       COLON VALID?
         BO    SCANADR2             YES, GET 2ND ADDRESS.
         NI    $FLAG2,255-$ADDRSCN  NO, END OF ADDRESS SCAN.
         B     SCANNEXT             TRY FOR OTHER OPERANDS.
         SPACE 1
SCANADR2 DS    0H
         LA    R4,$END              POINT TO ENDING ADDRESS FIELD.
         NI    $FLAG2,255-$COLONV   COLON NO LONGER VALID DELIMITER.
         B     SCANNEXT             GET ANOTHER OPERAND.
         SPACE 1
SCANEND  DS    0H
         TM    $FLAG2,$ADDRSCN      STILL IN ADDRESS SCAN?
         BO    SCANERR0             YES, UNMATCHED PAIR.
         PRINTBUF TITLE             OUTPUT THE TITLE LINE.
         PRINTBUF ,                 AND A BLANK LINE.
         OI    $FLAG2,$ENDMSG       INDICATE END MESSAGE NEEDED.
         XC    $OFFSET,$OFFSET      ASSUME ZERO OFFSET.
         B     MAINCODE             AND GO RUN DECODER.
         SPACE 1
SCANERR0 DS    0H
         MVC   OF(L'SCERMSG0,R15),SCERMSG0 MOVE IN MESSAGE.
         B     SCANRC4              RETURN WITH DELIM. ERROR.
         SPACE 1
SCANNOOP DS    0H
         OC    ADPLCOM1(8),ADPLCOM1 CHECK FOR ZERO ADDRESS.
         BZ    SCANERR1             ZERO, INVALID INVOCATION.
         L     R0,ADPLCOM1          LOAD STARTING ADDRESS.
         ST    R0,$NEXT             SAVE STARTING ADDRESS.
         L     R0,ADPLCOM2          LOAD ENDING ADDRESS.
         ST    R0,$END              SAVE ENDING ADDRESS.
         IC    R0,ADPLCOM3          GET SUPPRESSION FLAGS.
         STC   R0,$FLAG1            SAVE IN WORK AREA.
         L     R0,ADPLCOM4          GET OFFSET VALUE.
         ST    R0,$OFFSET           SAVE IN WORK AREA.
         B     MAINCODE             GO BOOGIE THROUGH DUMP.
         SPACE 1
SCANERR1 DS    0H
         MVC   OF(L'SCERMSG1,R15),SCERMSG1 MOVE IN MESSAGE.
         B     SCANRC12             RETURN WITH SYNTAX ERROR.
         SPACE 1
SCANERR2 DS    0H
         MVC   OF(L'SCERMSG2,R15),SCERMSG2 MOVE IN MESSAGE.
         B     SCANRC4              RETURN WITH DELIM. ERROR.
         SPACE 1
SCANERR3 DS    0H
         MVC   OF(L'SCERMSG3,R15),SCERMSG3 MOVE IN MESSAGE.
         B     SCANRC12             RETURN WITH SYNTAX ERROR.
         SPACE 1
SCANERR4 DS    0H
         MVC   OF(L'SCERMSG4,R15),SCERMSG4 MOVE IN MESSAGE.
         LA    R0,8                 SET KEYWORD ERROR FLAG.
         B     SCSETRC              GO SET THE RETURN CODE.
         SPACE 1
SCANERR5 DS    0H
         MVC   OF(L'SCERMSG5,R15),SCERMSG5 MOVE IN MESSAGE.
         B     SCANRC4              RETURN WITH DELIM. ERROR
         SPACE 1
SCANERR6 DS    0H
         MVC   OF(L'SCERMSG6,R15),SCERMSG6 MOVE IN MESSAGE.
         B     SCANRC12             RETURN WITH SYNTAX ERROR.
         SPACE 1
SCANERR7 DS    0H
         MVC   OF(L'SCERMSG7,R15),SCERMSG7 MOVE IN MESSAGE.
         B     SCANRC12             RETURN WITH SYNTAX ERROR.
         SPACE 1
SCANERR8 DS    0H
         MVC   OF(L'SCERMSG8,R15),SCERMSG8 MOVE IN MESSAGE.
         B     SCANRC12             RETURN WITH SYNTAX ERROR.
         SPACE 1
SCANERR9 DS    0H
         MVC   OF(L'SCERMSG9,R15),SCERMSG9 MOVE IN MESSAGE.
         SPACE 1
SCANRC12 DS    0H
         LA    R0,12                LOAD RETURN CODE.
         B     SCSETRC              AND SET THE RETURN CODE.
         SPACE 1
SCANRC4  DS    0H
         LA    R0,4                 LOAD DELIMITER ERROR CODE.
         SPACE 1
SCSETRC  DS    0H
         ST    R0,0(,R9)            SAVE THE RETURN CODE.
         SPACE 1
         PRINTBUF ,                 PRINT THE ERROR TEXT.
         B     EOJ                  AND RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*     THIS IS THE MAIN PROGRAM LOOP.  LOGIC IS AS FOLLOWS:            *
*                                                                     *
*          1.  USE AMDPRDMP FORMAT ROUTINE TO ACQUIRE NEXT 6 BYTES    *
*              (BOTH UNTRANSLATED AND TRANSLATED).  THIS ALSO FORMATS *
*              THE ADDRESS AND OFFSET.                                *
*          2.  LOOKUP THE MNEMONIC ENTRY BASED ON THE 1ST BYTE THAT   *
*              WAS RETRIEVED BY THE FORMAT ROUTINE.  IF THE MNEMONIC  *
*              ENTRY IS UNDEFINED, PRINT THIS ENTRY AS A TWO BYTE     *
*              HEX CONSTANT.  IF THE INSTRUCTION IS OF A CLASS NOT    *
*              REQUESTED BY THE PARSED OPERANDS, ASSUME IT'S A 2-BYTE *
*              HEX CONSTANT.                                          *
*          3.  IF THE MNEMONIC ENTRY INDICATES A MULTI-FUNCTION       *
*              OPCODE, LOOK IT UP.  IF LOOK-UP FAILS, PRINT A 2-BYTE  *
*              HEX CONSTANT.                                          *
*          4.  SAVE THE MNEMONIC IN THE OUTPUT RECORD.                *
*          5.  DETERMINE THE INSTRUCTION LENGTH FROM THE OPCODE.      *
*          6.  GET THE INDEX TO THE PROTOCOL LIST FROM THE MNEMONIC   *
*              TYPE FIELD AND BRANCH TO THE PROTOCOL DISPATCHER.      *
*                                                                     *
***********************************************************************
         SPACE 1
MAINCODE DS    0H
         PRINTBUF HEADER           PRINT HEADER LINE.
         MVC   $FORMAT,SKELFMT     INITIALIZE SKELATON FORMAT LIST.
         LA    R0,$NEXT            ADDRESS DATA FIELD.
         ST    R0,$FORMAT+4        SAVE IN FORMAT LIST.
         LA    R0,$OFFSET          ADDRESS DATA FIELD.
         ST    R0,$FORMAT+12       SAVE IN FORMAT LIST.
         SPACE 1
MAINLOOP DS    0H
         L     R2,$NEXT            GET ADDRESS OF NEXT AREA TO DECODE.
         C     R2,$END             OVER THE LIMIT YET?
         BH    EOJ                 YES, THEN LET'S QUIT.
         ST    R2,$FORMAT+20       SAVE ADDRESS FOR UNTRANSLATED.
         ST    R2,$FORMAT+28       SAVE ADDRESS FOR TRANSLATED.
         FORMAT $FORMAT,BADRC=CANTDOIT ATTEMPT TO ACCESS MEMORY.
         L     R15,ADPLBUF         ADDRESS OUTPUT BUFFER.
         MVC   $6BYTES,OF+34(R15)  SAVE UNTRANSLATED DATA.
         MVC   $12BYTES,OF+18(R15) SAVE TRANSLATED DATA.
         MVC   OF+34(6,R15),BLANKS CLEAR THE UNTRANSLATED IN THE LINE.
         MVC   OF+22(8,R15),BLANKS CLEAR 2ND-6TH TRANSLATED BYTES.
         MVI   $LENGTH+1,2         ASSUME TWO BYTE FIELD.
         XR    R9,R9               ZONK FOR INSERT.
         IC    R9,$6BYTES          INSERT THE OP CODE.
         MH    R9,=AL2(MNLENGTH)   DISPLACE TO ENTRY.
         LA    R9,MNEMONIX(R9)     ADDRESS APPROPRIATE ENTRY.
         USING MNEMONIC,R9         MAKE DSECT ADDRESSABLE.
         TM    MNCLASS,MNCMFO      MULTI-FUNCTION OPCODE?
         BNO   NOTMFO              NOPE, SKIP MFO LOOKUP.
         XR    R8,R8               ZONK.
         IC    R8,$6BYTES+1        GET OPCODE'S SECOND BYTE.
         CH    R8,MNCOUNT          SECOND BYTE HIGHER THAN AVAILABLE?
         BNL   UNDEF               YES, UNDEFINED OPCODE.
         MH    R8,=AL2(MNLENGTH)   DISPLACE TO ENTRY.
         L     R9,MN@EXT           GET ADDRESS OF EXTENSION.
         AR    R9,R8               POINT TO SECOND BYTE ELEMENT.
NOTMFO   DS    0H
         CLI   MNTYPE,MNTUNDEF     UNDEFINED OPCODE?
         BE    UNDEF               YES, HANDLE ACCORDINGLY.
         IC    R8,MNCLASS          GET INSTRUCTION'S CLASS.
         N     R8,=X'0000007F'     ISOLATE CLASS BITS.
         BZ    MOVENAME            NO CLASS, NOTHING TO SUPPRESS.
         XR    R7,R7               ZONK.
         IC    R7,$FLAG1           GET SUPPRESSION FLAGS.
         NR    R7,R8               AND VALUES TOGETHER.
         BZ    MOVENAME            NO FLAGS ON, MOVE NAME.
UNDEF    DS    0H
         LA    R9,MNEMONIX         ASSUME IT'S AN X'00'.
         MVI   $6BYTES,X'00'       FORCE LENGTH OF 2.
         SPACE 1
MOVENAME DS    0H
         MVC   OF+39(L'MNNAME,R15),MNNAME MOVE IN MNEMONIC NAME.
         CLI   $6BYTES,X'40'       R-R TYPE OPCODES?
         BL    DOITTOIT            YES, LENGTH IS 2.
         MVI   $LENGTH+1,4         ASSUME 4 BYTES FOR A SECOND.
         MVC   OF+23(4,R15),$12BYTES+4 LIST NEXT 2 BYTES.
         CLI   $6BYTES,X'C0'       LENGTH 4 ASSUMPTION CORRECT?
         BL    DOITTOIT            YES, OFF TO THE PROTOCOL MACHINE.
         MVI   $LENGTH+1,6         SET 6 BYTE LENGTH.
         MVC   OF+28(4,R15),$12BYTES+8 LIST BYTES 5-6.
         SPACE 1
DOITTOIT DS    0H
         XR    R8,R8               ZONK FOR INSERT.
         IC    R8,MNTYPE           INSERT CLASS AND TYPE BITS.
         DROP  R9                  DONE WITH MNEMONIC DSECT.
         LA    R9,OF+46(,R15)      POINT AT OPERAND START IN LINE.
         L     R8,PROTOCOL(R8)     GET ADDRESS OF PROTOCOL VECTOR.
         XR    R0,R0               ZONK FOR CONVERTER.
         SPACE 1
DISPATCH L     R14,0(,R8)          GET ADDRESS OF NEXT ROUTINE.
         LA    R8,4(,R8)           BUMP FOR NEXT PASS.
         BR    R14                 CALL SUBROUTINE.
         SPACE 1
PRINTBUF PRINTBUF ,                PRINT THE FORMATTED LINE.
         L     R9,$NEXT            LOAD CURRENT ADDRESS.
         AH    R9,$LENGTH          UPDATE WITH LENGTH.
         ST    R9,$NEXT            SAVE FOR NEXT PASS.
         L     R9,$OFFSET          LOAD CURRENT OFFSET.
         AH    R9,$LENGTH          UPDATE WITH LENGTH.
         ST    R9,$OFFSET          SAVE FOR NEXT PASS.
         B     MAINLOOP            AND RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*     PROTOCOL MACHINE VECTORS AND SUBROUTINES.                       *
*                                                                     *
***********************************************************************
         SPACE 1
PROTOCOL DC    A(@I,@RR,@RR1,@RRE,@RRE1,@RX,@RS,@RS1)
         DC    A(@SI,@S,@SN,@SS,@SSLL,@SSRR,@SSE,@UNDEF)
         SPACE 1
@I       DC    A(#SVC,PRINTBUF)
@RR      DC    A(#REG1,#COMMA,#REG2,PRINTBUF)
@RR1     DC    A(#REG1,PRINTBUF)
@RRE     DC    A(#RRE1,#COMMA,#RRE2,PRINTBUF)
@RRE1    DC    A(#RRE1,PRINTBUF)
@RX      DC    A(#REG1,#COMMA,#DISP1,#LPAREN,#REG2,#COMMA,#BASE1)
         DC    A(#RPAREN,PRINTBUF)
@RS      DC    A(#REG1,#COMMA,#REG2,#COMMA,#DISP1,#LPAREN,#BASE1)
         DC    A(#RPAREN,PRINTBUF)
@RS1     DC    A(#REG1,#COMMA,#DISP1,#LPAREN,#BASE1,#RPAREN,PRINTBUF)
@SI      DC    A(#DISP1,#LPAREN,#BASE1,#RPAREN,#IMMED,PRINTBUF)
@S       DC    A(#DISP1,#LPAREN,#BASE1,#RPAREN,PRINTBUF)
@SN      DC    A(PRINTBUF)
@SS      DC    A(#DISP1,#LPAREN,#LENGTH,#COMMA,#BASE1,#RPAREN)
         DC    A(#COMMA,#DISP2,#LPAREN,#BASE2,#RPAREN,PRINTBUF)
@SSLL    DC    A(#DISP1,#LPAREN,#LENGTH1,#COMMA,#BASE1,#RPAREN,#COMMA)
         DC    A(#DISP2,#LPAREN,#LENGTH2,#COMMA,#BASE2,#RPAREN)
         DC    A(PRINTBUF)
@SSRR    DC    A(#DISP1,#LPAREN,#REG1,#COMMA,#BASE1,#RPAREN,#COMMA)
         DC    A(#DISP2,#LPAREN,#BASE2,#RPAREN,#COMMA,#REG2,PRINTBUF)
@SSE     DC    A(#DISP1,#LPAREN,#BASE1,#RPAREN,#COMMA,#DISP2,#LPAREN)
         DC    A(#BASE2,#RPAREN,PRINTBUF)
@UNDEF   DC    A(#DC,PRINTBUF)
         SPACE 2
#REG1    DS    0H
         IC    R0,$6BYTES+1        LOAD 2ND INSTRUCTION BYTE.
#REG1COM DS    0H
         SRL   R0,4                ISOLATE HIGH NIBBLE.
         B     #CONVERT            CONVERT IT.
         SPACE 1
#REG2    DS    0H
         IC    R0,$6BYTES+1        LOAD 2ND INSTRUCTION BYTE.
#REG2COM DS    0H
         N     R0,=X'0000000F'     ISOLATE LOW NIBBLE.
         B     #CONVERT            OFF TO CONVERSION.
         SPACE 1
#BASE1   DS    0H
         ICM   R0,B'0011',$6BYTES+2 LOAD 2ND HALFWORD OF INSTRUCTION.
         B     #BASECOM            DO COMMON BASE ROUTINE.
#BASE2   DS    0H
         ICM   R0,B'0011',$6BYTES+4 LOAD 3RD HALFWORD OF INSTRUCTION.
#BASECOM DS    0H
         SRL   R0,12               ISOLATE BASE REGISTER.
         B     #CONVERT            CONVERT THE DATA.
         SPACE 1
#DISP1   DS    0H
         ICM  R0,B'0011',$6BYTES+2 LOAD 2ND HALFWORD OF INSTRUCTION.
         B     #DISPCOM            DO COMMON DISPLACEMENT ROUTINE.
#DISP2   DS    0H
         ICM  R0,B'0011',$6BYTES+4 LOAD 3RD HALFWORD OF INSTRUCTION.
#DISPCOM DS    0H
         N     R0,=X'00000FFF'     ISOLATE DISPLACEMENT FIELD.
         B     #CONVERT            CONVERT THE DATA.
         SPACE 1
#SVC     DS    0H
         IC    R0,$6BYTES+1        LOAD FULL BYTE LENGTH FIELD.
         B     #CONVERT            CONVERT THE FIELD.
         SPACE 1
#LENGTH  DS    0H
         IC    R0,$6BYTES+1        LOAD FULL BYTE LENGTH FIELD.
         AH    R0,=H'1'            INCREMENT TO TRUE VALUE.
         B     #CONVERT            CONVERT THE FIELD.
         SPACE 1
#LENGTH1 DS    0H
         IC    R0,$6BYTES+1        LOAD LENGTH AND IMMEDIATE FIELD.
         SRL   R0,4                SHIFT OUT IMMEDIATE FIELD.
         AH    R0,=H'1'            INCREMENT TO TRUE VALUE.
         B     #CONVERT            AND CONVERT THE VALUE.
         SPACE 1
#LENGTH2 DS    0H
         IC    R0,$6BYTES+1        LOAD TWO LENGTH FIELDS.
         N     R0,=X'0000000F'     TURN OFF FIRST LENGTH FIELD.
         AH    R0,=H'1'            INCREMENT TO TRUE VALUE.
         B     #CONVERT            AND CONVERT THE VALUE.
         SPACE 1
#RRE1    DS    0H
         IC    R0,$6BYTES+3        LOAD EXTENDED REGISTER BYTE.
         B     #REG1COM            TREAT IT LIKE REGISTER 1.
         SPACE 1
#RRE2    DS    0H
         IC    R0,$6BYTES+3        LOAD EXTENDED REGISTER BYTE.
         B     #REG2COM            TREAT IT LIKE REGISTER 2.
         SPACE 1
#COMMA   DS    0H
         MVI   0(R9),C','          MOVE IN A COMMA.
         B     #BUMPR9             AND UPDATE REGISTER 9.
#LPAREN  DS    0H
         MVI   0(R9),C'('          MOVE IN LEFT PARENTHESIS.
         B     #BUMPR9             AND UPDATE REGISTER 9.
#RPAREN  DS    0H
         MVI   0(R9),C')'          MOVE IN RIGHT PARENTHESIS.
#BUMPR9  DS    0H
         LA    R9,1(,R9)           UPDATE R9 BY 1 BYTE.
         B     DISPATCH            BACK FOR ANOTHER FIELD.
         SPACE 1
#IMMED   DS    0H
         MVC   0(3,R9),=C',X'''    MOVE IN IMMEDIATE PRIMER.
         MVC   3(2,R9),$12BYTES+2  MOVE IN IMMEDIATE FIELD.
         MVI   5(R9),C''''         MOVE INCLOSING APOSTROPHE.
         LA    R9,6(,R9)           UPDATE BUFFER POINTER.
         B     DISPATCH            AND GET ANOTHER FIELD?
         SPACE 1
#DC      DS    0H
         MVC   0(2,R9),=C'X'''     MOVE IN "DC" HEADER.
         MVC   2(4,R9),$12BYTES    MOVE IN CONSTANT.
         MVI   6(R9),C''''         MOVE IN CLOSING QUOTE.
         LA    R9,7(,R10)          UPDATE PRINT COUNTER.
         B     DISPATCH            AND GET ANOTHER FIELD?
         SPACE 1
#CONVERT DS    0H
         CVD   R0,$DOUBLE          CONVERT INPUT TO PACKED.
         MVC   $CONVERT(6),CONVMASK MOVE IN EDIT MASK.
         LA    R1,$CONVERT+5       SET R1 FOR ZERO INPUT.
         EDMK  $CONVERT(6),$DOUBLE+5 EDIT AND MARK THE DATA.
         LA    R15,$CONVERT+6      POINT PAST DATA.
         SR    R15,R1              COMPUTE DATA LENGTH.
         BCTR  R15,0               LESS ONE FOR MACHINE.
         EX    R15,CONVMVC         MOVE THE DATA.
         LA    R9,1(R15,R9)        UPDATE BUFFER POINTER.
         XR    R0,R0               RETURN REGISTER ZEROED.
         B     DISPATCH            DO ANOTHER FIELD.
         EJECT
***********************************************************************
*                                                                     *
*     TERMINATION ROUTINES - BOTH NORMAL AND ABNORMAL                 *
*                                                                     *
***********************************************************************
         SPACE 1
CANTDOIT DS    0H
         PRINTBUF MEMFAIL          TELL USER MEMORY UNAVAILABLE.
         LA    R2,4                SAVE RETURN CODE.
         B     WRAPUP              GO TERMINATE.
         SPACE 1
EOJ      DS    0H
         XR    R2,R2               ZONK REGISTER 2.
WRAPUP   DS    0H
         TM    $FLAG2,$ENDMSG      WAS AN ENDING MESSAGE REQUESTED?
         BNO   FREEMAIN            NO, SKIP THE FORMALITIES.
         PRINTBUF BYEBYE           TELL USER GOOD-BYE.
FREEMAIN DS    0H
         LA    R0,$LUSER           GET LENGTH OF USER AREA.
         ICM   R0,B'1000',ADPLSBPL LOAD SUBPOOL.
         LR    R1,R11              LOAD AREA ADDRESS.
         L     R13,4(,R13)         PRESERVE REG. 13.
         FREEMAIN R,LV=(0),A=(1)   FREE USER AREA.
         ST    R2,16(,R13)         SET RETURN CODE.
         LM    R14,R12,12(R13)     RESTORE REGISTERS.
         BR    R14                 AND RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS, TABLES, EQUATES, ETC.                             *
*                                                                     *
***********************************************************************
         SPACE 1
SCANOR   OI    $FLAG1,0            *** EXECUTED ***
SCANPACK PACK  $DOUBLE,0(0,R3)     *** EXECUTED ***
SCANMVC  MVC   0(0,R5),0(R3)       *** EXECUTED ***
SCANTRAN TR    0(0,R5),SCANTRTB-C'A' * EXECUTED ***
         SPACE 1
SCANTBL  DS    0X                  SCAN KEYWORD COMPARAND TABLE.
         DC    X'00',CL4'ASID'
SCANTBLL EQU   *-SCANTBL           LENGTH OF ONE ENTRY.
         DC    X'00',CL4'REAL'
         DC    AL1($NOXA),CL4'NOXA'
         DC    AL1($NO370),CL4'NO37'
         DC    AL1($NOCTL),CL4'NOCO'
         DC    AL1($NOCTL),CL4'NOCT'
         DC    AL1($NOCTL),CL4'NOCN'
         DC    AL1($NOIO),CL4'NOIO'
         DC    AL1($NODEC),CL4'NODE'
         DC    AL1($NOFP),CL4'NOFL'
         DC    AL1($NOFP),CL4'NOFP'
SCANTBLE EQU   *
         SPACE 1
SCERMSG0 DC    C'INCOMPLETE ADDRESS PAIR.'
SCERMSG1 DC    C'ADDRESS OPERANDS MAY NOT BE OMITTED.'
SCERMSG2 DC    C'UNEXPECTED COLON DELIMITER.'
SCERMSG3 DC    C'NULL OPERAND INVALID.'
SCERMSG4 DC    C'INVALID OPERAND SPECIFIED.'
SCERMSG5 DC    C'EQUAL SIGN MISSING ON ASID.'
SCERMSG6 DC    C'ASID OPERAND TOO LARGE.'
SCERMSG7 DC    C'ASID OPERAND NOT NUMERIC.'
SCERMSG8 DC    C'ADDRESS OPERAND TOO LONG.'
SCERMSG9 DC    C'ADDRESS OPERAND NOT HEXADECIMAL.'
         SPACE 1
SCANTRTB DC    X'0A0B0C0D0E0F',42X'00',X'010203040506070809'
         DS    0F
TITLE    DC    C'AMDAHL AMDPRDMP INSTRUCTION DECODER.'
         AIF   ('&SYSPARM' EQ '370').S370  120 OR 132 BLANKS.
BLANKS   DC    CL132' '            A FEW HANDY BLANKS.
         AGO   .BLANKOK
.S370    ANOP
BLANKS   DC    CL120' '            A FEW HANDY BLANKS.
.BLANKOK ANOP
         SPACE 1
HEADER   DC    C'   LOC    OFFSET  OBJECT CODE          OPCODE OPERANDS*
               '
SKELFMT  DC    AL1(CALLSTG+@DATNEXT,3,0,OF)
         DC    AL4(0)              ADDRESS OF $NEXT.
         DC    AL1(CALLSTG+@DATNEXT,3,0,OF+9)
         DC    AL4(0)              ADDRESS OF $OFFSET.
         DC    AL1(@DATNEXT,5,0,OF+18)
         DC    AL4(0)              ADDRESS OF DUMP DATA.
         DC    AL1(NOCONV+@DATNEXT,5,0,OF+34)
         DC    AL4(0,0)            ADDRESS OF DUMP DATA.
CALLSTG  EQU   X'10'               DATA IN IN CALLER'S STORAGE.
@DATNEXT EQU   X'0C'               DATA POINTER FOLLOWS.
NOCONV   EQU   X'20'               DON'T CONVERT TO EBCDIC.
         SPACE 1
CONVMVC  MVC   0(0,R9),0(R1)       *** EXECUTED ***
CONVMASK DC    X'F02020202021'     EDIT MASK.
         SPACE 1
MEMFAIL  DC    C'REQUESTED MEMORY COULD NOT BE ACCESSED.'
BYEBYE   DC    C'END OF AMDAHL AMDPRDMP INSTRUCTION DECODER.'
         SPACE 1
         LTORG ,                   BUILD LITERAL POOL.
         EJECT
***********************************************************************
*                                                                     *
*                           MNEMONIC TABLE                            *
*                                                                     *
***********************************************************************
         SPACE 1
         PRINT ON,NOGEN
         DS    0D
MNEMONIX OPCODE ,                                                00
         OPCODE ,                                                01
         OPCODE ,                                                02
         OPCODE ,                                                03
         OPCODE SPM,TYPE=RR-R1ONLY                               04
         OPCODE BALR,TYPE=RR                                     05
         OPCODE BCTR,TYPE=RR                                     06
         OPCODE BCR,TYPE=RR                                      07
         OPCODE SSK,TYPE=RR,CLASS=(CONTROL,370)                  08
         OPCODE ISK,TYPE=RR,CLASS=(CONTROL,370)                  09
         OPCODE SVC,TYPE=I                                       0A
         OPCODE BSM,TYPE=RR,CLASS=XA                             0B
         OPCODE BASSM,TYPE=RR,CLASS=XA                           0C
         OPCODE BASR,TYPE=RR                                     0D
         OPCODE MVCL,TYPE=RR                                     0E
         OPCODE CLCL,TYPE=RR                                     0F
         OPCODE LPR,TYPE=RR                                      10
         OPCODE LNR,TYPE=RR                                      11
         OPCODE LTR,TYPE=RR                                      12
         OPCODE LCR,TYPE=RR                                      13
         OPCODE NR,TYPE=RR                                       14
         OPCODE CLR,TYPE=RR                                      15
         OPCODE OR,TYPE=RR                                       16
         OPCODE XR,TYPE=RR                                       17
         OPCODE LR,TYPE=RR                                       18
         OPCODE CR,TYPE=RR                                       19
         OPCODE AR,TYPE=RR                                       1A
         OPCODE SR,TYPE=RR                                       1B
         OPCODE MR,TYPE=RR                                       1C
         OPCODE DR,TYPE=RR                                       1D
         OPCODE ALR,TYPE=RR                                      1E
         OPCODE SLR,TYPE=RR                                      1F
         OPCODE LPDR,TYPE=RR,CLASS=FLOAT                         20
         OPCODE LNDR,TYPE=RR,CLASS=FLOAT                         21
         OPCODE LTDR,TYPE=RR,CLASS=FLOAT                         22
         OPCODE LCDR,TYPE=RR,CLASS=FLOAT                         23
         OPCODE HDR,TYPE=RR,CLASS=FLOAT                          24
         OPCODE LRDR,TYPE=RR,CLASS=FLOAT                         25
         OPCODE MXR,TYPE=RR,CLASS=FLOAT                          26
         OPCODE MXDR,TYPE=RR,CLASS=FLOAT                         27
         OPCODE LDR,TYPE=RR,CLASS=FLOAT                          28
         OPCODE CDR,TYPE=RR,CLASS=FLOAT                          29
         OPCODE ADR,TYPE=RR,CLASS=FLOAT                          2A
         OPCODE SDR,TYPE=RR,CLASS=FLOAT                          2B
         OPCODE MDR,TYPE=RR,CLASS=FLOAT                          2C
         OPCODE DDR,TYPE=RR,CLASS=FLOAT                          2D
         OPCODE AWR,TYPE=RR,CLASS=FLOAT                          2E
         OPCODE SWR,TYPE=RR,CLASS=FLOAT                          2F
         OPCODE LPER,TYPE=RR,CLASS=FLOAT                         30
         OPCODE LNER,TYPE=RR,CLASS=FLOAT                         31
         OPCODE LTER,TYPE=RR,CLASS=FLOAT                         32
         OPCODE LCER,TYPE=RR,CLASS=FLOAT                         33
         OPCODE HER,TYPE=RR,CLASS=FLOAT                          34
         OPCODE LRER,TYPE=RR,CLASS=FLOAT                         35
         OPCODE AXR,TYPE=RR,CLASS=FLOAT                          36
         OPCODE SXR,TYPE=RR,CLASS=FLOAT                          37
         OPCODE LER,TYPE=RR,CLASS=FLOAT                          38
         OPCODE CER,TYPE=RR,CLASS=FLOAT                          39
         OPCODE AER,TYPE=RR,CLASS=FLOAT                          3A
         OPCODE SER,TYPE=RR,CLASS=FLOAT                          3B
         OPCODE MER,TYPE=RR,CLASS=FLOAT                          3C
         OPCODE DER,TYPE=RR,CLASS=FLOAT                          3D
         OPCODE AUR,TYPE=RR,CLASS=FLOAT                          3E
         OPCODE SUR,TYPE=RR,CLASS=FLOAT                          3F
         OPCODE STH,TYPE=RX                                      40
         OPCODE LA,TYPE=RX                                       41
         OPCODE STC,TYPE=RX                                      42
         OPCODE IC,TYPE=RX                                       43
         OPCODE EX,TYPE=RX                                       44
         OPCODE BAL,TYPE=RX                                      45
         OPCODE BCT,TYPE=RX                                      46
         OPCODE BC,TYPE=RX                                       47
         OPCODE LH,TYPE=RX                                       48
         OPCODE CH,TYPE=RX                                       49
         OPCODE AH,TYPE=RX                                       4A
         OPCODE SH,TYPE=RX                                       4B
         OPCODE MH,TYPE=RX                                       4C
         OPCODE BAS,TYPE=RX                                      4D
         OPCODE CVD,TYPE=RX                                      4E
         OPCODE CVB,TYPE=RX                                      4F
         OPCODE ST,TYPE=RX                                       50
         OPCODE ,                                                51
         OPCODE ,                                                52
         OPCODE ,                                                53
         OPCODE N,TYPE=RX                                        54
         OPCODE CL,TYPE=RX                                       55
         OPCODE O,TYPE=RX                                        56
         OPCODE X,TYPE=RX                                        57
         OPCODE L,TYPE=RX                                        58
         OPCODE C,TYPE=RX                                        59
         OPCODE A,TYPE=RX                                        5A
         OPCODE S,TYPE=RX                                        5B
         OPCODE M,TYPE=RX                                        5C
         OPCODE D,TYPE=RX                                        5D
         OPCODE AL,TYPE=RX                                       5E
         OPCODE SL,TYPE=RX                                       5F
         OPCODE STD,TYPE=RX,CLASS=FLOAT                          60
         OPCODE ,                                                61
         OPCODE ,                                                62
         OPCODE ,                                                63
         OPCODE ,                                                64
         OPCODE ,                                                65
         OPCODE ,                                                66
         OPCODE MXD,TYPE=RX,CLASS=FLOAT                          67
         OPCODE LD,TYPE=RX,CLASS=FLOAT                           68
         OPCODE CD,TYPE=RX,CLASS=FLOAT                           69
         OPCODE AD,TYPE=RX,CLASS=FLOAT                           6A
         OPCODE SD,TYPE=RX,CLASS=FLOAT                           6B
         OPCODE MD,TYPE=RX,CLASS=FLOAT                           6C
         OPCODE DD,TYPE=RX,CLASS=FLOAT                           6D
         OPCODE AW,TYPE=RX,CLASS=FLOAT                           6E
         OPCODE SW,TYPE=RX,CLASS=FLOAT                           6F
         OPCODE STE,TYPE=RX,CLASS=FLOAT                          70
         OPCODE ,                                                71
         OPCODE ,                                                72
         OPCODE ,                                                73
         OPCODE ,                                                74
         OPCODE ,                                                75
         OPCODE ,                                                76
         OPCODE ,                                                77
         OPCODE LE,TYPE=RX,CLASS=FLOAT                           78
         OPCODE CE,TYPE=RX,CLASS=FLOAT                           79
         OPCODE AE,TYPE=RX,CLASS=FLOAT                           7A
         OPCODE SE,TYPE=RX,CLASS=FLOAT                           7B
         OPCODE ME,TYPE=RX,CLASS=FLOAT                           7C
         OPCODE DE,TYPE=RX,CLASS=FLOAT                           7D
         OPCODE AU,TYPE=RX,CLASS=FLOAT                           7E
         OPCODE SU,TYPE=RX,CLASS=FLOAT                           7F
         OPCODE SSM,TYPE=S,CLASS=CONTROL                         80
         OPCODE ,                                                81
         OPCODE LPSW,TYPE=S,CLASS=CONTROL                        82
         OPCODE DIAG,TYPE=SI,CLASS=CONTROL                       83
         OPCODE WRD,TYPE=SI,CLASS=(CONTROL,370)                  84
         OPCODE RDD,TYPE=SI,CLASS=(CONTROL,370)                  85
         OPCODE BXH,TYPE=RS                                      86
         OPCODE BXLE,TYPE=RS                                     87
         OPCODE SRL,TYPE=RS-R1ONLY                               88
         OPCODE SLL,TYPE=RS-R1ONLY                               89
         OPCODE SRA,TYPE=RS-R1ONLY                               8A
         OPCODE SLA,TYPE=RS-R1ONLY                               8B
         OPCODE SRDL,TYPE=RS-R1ONLY                              8C
         OPCODE SLDL,TYPE=RS-R1ONLY                              8D
         OPCODE SRDA,TYPE=RS-R1ONLY                              8E
         OPCODE SLDA,TYPE=RS-R1ONLY                              8F
         OPCODE STM,TYPE=RS                                      90
         OPCODE TM,TYPE=SI                                       91
         OPCODE MVI,TYPE=SI                                      92
         OPCODE TS,TYPE=S                                        93
         OPCODE NI,TYPE=SI                                       94
         OPCODE CLI,TYPE=SI                                      95
         OPCODE OI,TYPE=SI                                       96
         OPCODE XI,TYPE=SI                                       97
         OPCODE LM,TYPE=RS                                       98
         OPCODE TRACE,TYPE=RS,CLASS=(CONTROL,XA)                 99
         OPCODE ,                                                9A
         OPCODE ,                                                9B
         OPCODE EXT=EXT9C,COUNT=CNT9C                            9C
         OPCODE EXT=EXT9D,COUNT=CNT9D                            9D
         OPCODE EXT=EXT9E,COUNT=CNT9E                            9E
         OPCODE EXT=EXT9F,COUNT=CNT9F                            9F
         OPCODE ,                                                A0
         OPCODE ,                                                A1
         OPCODE ,                                                A2
         OPCODE ,                                                A3
         OPCODE ,                                                A4
         OPCODE ,                                                A5
         OPCODE ,                                                A6
         OPCODE ,                                                A7
         OPCODE ,                                                A8
         OPCODE ,                                                A9
         OPCODE ,                                                AA
         OPCODE ,                                                AB
         OPCODE STNSM,TYPE=SI,CLASS=CONTROL                      AC
         OPCODE STOSM,TYPE=SI,CLASS=CONTROL                      AD
         OPCODE SIGP,TYPE=RS,CLASS=CONTROL                       AE
         OPCODE MC,TYPE=SI                                       AF
         OPCODE ,                                                B0
         OPCODE LRA,TYPE=RX,CLASS=CONTROL                        B1
         OPCODE EXT=EXTB2,COUNT=CNTB2                            B2
         OPCODE ,                                                B3
         OPCODE ,                                                B4
         OPCODE ,                                                B5
         OPCODE STCTL,TYPE=RS,CLASS=CONTROL                      B6
         OPCODE LCTL,TYPE=RS,CLASS=CONTROL                       B7
         OPCODE ,                                                B8
         OPCODE ,                                                B9
         OPCODE CS,TYPE=RS                                       BA
         OPCODE CDS,TYPE=RS                                      BB
         OPCODE ,                                                BC
         OPCODE CLM,TYPE=RS                                      BD
         OPCODE STCM,TYPE=RS                                     BE
         OPCODE ICM,TYPE=RS                                      BF
         OPCODE ,                                                C0
         OPCODE ,                                                C1
         OPCODE ,                                                C2
         OPCODE ,                                                C3
         OPCODE ,                                                C4
         OPCODE ,                                                C5
         OPCODE ,                                                C6
         OPCODE ,                                                C7
         OPCODE ,                                                C8
         OPCODE ,                                                C9
         OPCODE ,                                                CA
         OPCODE ,                                                CB
         OPCODE ,                                                CC
         OPCODE ,                                                CD
         OPCODE ,                                                CE
         OPCODE ,                                                CF
         OPCODE ,                                                D0
         OPCODE MVN,TYPE=SS                                      D1
         OPCODE MVC,TYPE=SS                                      D2
         OPCODE MVZ,TYPE=SS                                      D3
         OPCODE NC,TYPE=SS                                       D4
         OPCODE CLC,TYPE=SS                                      D5
         OPCODE OC,TYPE=SS                                       D6
         OPCODE XC,TYPE=SS                                       D7
         OPCODE ,                                                D8
         OPCODE MVCK,TYPE=SS-R1R3,CLASS=CONTROL                  D9
         OPCODE MVCP,TYPE=SS-R1R3,CLASS=CONTROL                  DA
         OPCODE MVCS,TYPE=SS-R1R3,CLASS=CONTROL                  DB
         OPCODE TR,TYPE=SS                                       DC
         OPCODE TRT,TYPE=SS                                      DD
         OPCODE ED,TYPE=SS,CLASS=DECIMAL                         DE
         OPCODE EDMK,TYPE=SS,CLASS=DECIMAL                       DF
         OPCODE ,                                                E0
         OPCODE ,                                                E1
         OPCODE ,                                                E2
         OPCODE ,                                                E3
         OPCODE ,                                                E4
         OPCODE EXT=EXTE5,COUNT=CNTE5                            E5
         OPCODE ,                                                E6
         OPCODE ,                                                E7
         OPCODE MVCIN,TYPE=SS,CLASS=370                          E8
         OPCODE ,                                                E9
         OPCODE ,                                                EA
         OPCODE ,                                                EB
         OPCODE ,                                                EC
         OPCODE ,                                                ED
         OPCODE ,                                                EE
         OPCODE ,                                                EF
         OPCODE SRP,TYPE=SS-R1R3,CLASS=DECIMAL                   F0
         OPCODE MVO,TYPE=SS-L1L2                                 F1
         OPCODE PACK,TYPE=SS-L1L2                                F2
         OPCODE UNPK,TYPE=SS-L1L2                                F3
         OPCODE ,                                                F4
         OPCODE ,                                                F5
         OPCODE ,                                                F6
         OPCODE ,                                                F7
         OPCODE ZAP,TYPE=SS-L1L2,CLASS=DECIMAL                   F8
         OPCODE CP,TYPE=SS-L1L2,CLASS=DECIMAL                    F9
         OPCODE AP,TYPE=SS-L1L2,CLASS=DECIMAL                    FA
         OPCODE SP,TYPE=SS-L1L2,CLASS=DECIMAL                    FB
         OPCODE MP,TYPE=SS-L1L2,CLASS=DECIMAL                    FC
         OPCODE DP,TYPE=SS-L1L2,CLASS=DECIMAL                    FD
         OPCODE ,                                                FE
         OPCODE ,                                                FF
         SPACE 2
EXT9C    OPCODE SIO,TYPE=S,CLASS=(I/O,370)                       9C00
         OPCODE SIOF,TYPE=S,CLASS=(I/O,370)                      9C01
         OPCODE RIO,TYPE=S,CLASS=(I/O,370)                       9C02
CNT9C    EQU   (*-EXT9C)/MNLENGTH
         SPACE 1
EXT9D    OPCODE TIO,TYPE=S,CLASS=(I/O,370)                       9D00
         OPCODE CLRIO,TYPE=S,CLASS=(I/O,370)                     9D01
CNT9D    EQU   (*-EXT9D)/MNLENGTH
         SPACE 1
EXT9E    OPCODE HIO,TYPE=S,CLASS=(I/O,370)                       9E00
         OPCODE HDV,TYPE=S,CLASS=(I/O,370)                       9E01
CNT9E    EQU   (*-EXT9E)/MNLENGTH
         SPACE 1
EXT9F    OPCODE TCH,TYPE=S,CLASS=(I/O,370)                       9F00
         OPCODE CLRCH,TYPE=S,CLASS=(I/O,370)                     9F01
CNT9F    EQU   (*-EXT9F)/MNLENGTH
         SPACE 1
EXTB2    OPCODE CONCS,TYPE=S,CLASS=(CONTROL,370)                 B200
         OPCODE DISCS,TYPE=S,CLASS=(CONTROL,370)                 B201
         OPCODE STIDP,TYPE=S,CLASS=CONTROL                       B202
         OPCODE STIDC,TYPE=S,CLASS=(I/O,370)                     B203
         OPCODE SCK,TYPE=S,CLASS=CONTROL                         B204
         OPCODE STCK,TYPE=S                                      B205
         OPCODE SCKC,TYPE=S,CLASS=CONTROL                        B206
         OPCODE STCKC,TYPE=S,CLASS=CONTROL                       B207
         OPCODE SPT,TYPE=S,CLASS=CONTROL                         B208
         OPCODE STPT,TYPE=S,CLASS=CONTROL                        B209
         OPCODE SPKA,TYPE=S,CLASS=CONTROL                        B20A
         OPCODE IPK,TYPE=S-NOOP,CLASS=CONTROL                    B20B
         OPCODE ,                                                B20C
         OPCODE PTLB,TYPE=S-NOOP,CLASS=CONTROL                   B20D
         OPCODE ,                                                B20E
         OPCODE ,                                                B20F
         OPCODE SPX,TYPE=S,CLASS=CONTROL                         B210
         OPCODE STPX,TYPE=S,CLASS=CONTROL                        B211
         OPCODE STAP,TYPE=S,CLASS=CONTROL                        B212
         OPCODE RRB,TYPE=RRE,CLASS=(CONTROL,370)                 B213
         OPCODE SIE,TYPE=S,CLASS=CONTROL                         B214
         OPCODE ,                                                B215
         OPCODE ,                                                B216
         OPCODE ,                                                B217
         OPCODE PC,TYPE=S,CLASS=CONTROL                          B218
         OPCODE SAC,TYPE=S,CLASS=CONTROL                         B219
         OPCODE ,                                                B21A
         OPCODE ,                                                B21B
         OPCODE ,                                                B21C
         OPCODE ,                                                B21D
         OPCODE ,                                                B21E
         OPCODE ,                                                B21F
         OPCODE ,                                                B220
         OPCODE IPTE,TYPE=RRE,CLASS=CONTROL                      B221
         OPCODE IPM,TYPE=RRE-R1ONLY                              B222
         OPCODE IVSK,TYPE=RRE,CLASS=CONTROL                      B223
         OPCODE IAC,TYPE=RRE-R1ONLY,CLASS=CONTROL                B224
         OPCODE SSAR,TYPE=RRE-R1ONLY,CLASS=CONTROL               B225
         OPCODE EPAR,TYPE=RRE-R1ONLY,CLASS=CONTROL               B226
         OPCODE ESAR,TYPE=RRE-R1ONLY,CLASS=CONTROL               B227
         OPCODE PT,TYPE=RRE,CLASS=CONTROL                        B228
         OPCODE ISKE,TYPE=RRE,CLASS=CONTROL                      B229
         OPCODE RRBE,TYPE=RRE,CLASS=CONTROL                      B22A
         OPCODE SSKE,TYPE=RRE,CLASS=CONTROL                      B22B
         OPCODE TB,TYPE=RRE,CLASS=CONTROL                        B22C
         OPCODE DXR,TYPE=RRE,CLASS=(FLOAT,XA)                    B22D
         OPCODE ,                                                B22E
         OPCODE ,                                                B22F
         OPCODE CSCH,TYPE=S-NOOP,CLASS=(I/O,XA)                  B230
         OPCODE HSCH,TYPE=S-NOOP,CLASS=(I/O,XA)                  B231
         OPCODE MSCH,TYPE=S,CLASS=(I/O,XA)                       B232
         OPCODE SSCH,TYPE=S,CLASS=(I/O,XA)                       B233
         OPCODE STSCH,TYPE=S,CLASS=(I/O,XA)                      B234
         OPCODE TSCH,TYPE=S,CLASS=(I/O,XA)                       B235
         OPCODE TPI,TYPE=S,CLASS=(I/O,XA)                        B236
         OPCODE SAL,TYPE=S-NOOP,CLASS=(I/O,XA)                   B237
         OPCODE RSCH,TYPE=S,NOOP,CLASS=(I/O,XA)                  B238
         OPCODE STCRW,TYPE=S,CLASS=(I/O,XA)                      B239
         OPCODE STCPS,TYPE=S,CLASS=(I/O,XA)                      B23A
         OPCODE RCHP,TYPE=S-NOOP,CLASS=(I/O,XA)                  B23B
         OPCODE SCHM,TYPE=S-NOOP,CLASS=(I/O,XA)                  B23C
         OPCODE ,                                                B23D
         OPCODE ,                                                B23E
         OPCODE ,                                                B23F
         OPCODE ,                                                B240
         OPCODE ,                                                B241
         OPCODE ADDFRR,TYPE=RRE,CLASS=CONTROL                    B242
CNTB2    EQU   (*-EXTB2)/MNLENGTH
         SPACE 1
EXTE5    OPCODE LASP,TYPE=SSE,CLASS=CONTROL                      E500
         OPCODE TPROT,TYPE=SSE,CLASS=CONTROL                     E501
         OPCODE FIXPG,TYPE=SSE,CLASS=(CONTROL,370)               E502
         OPCODE SVCA,TYPE=SSE,CLASS=CONTROL                      E503
         OPCODE OBLOC,TYPE=SSE,CLASS=CONTROL                     E504
         OPCODE RELOC,TYPE=SSE,CLASS=CONTROL                     E505
         OPCODE OBCMS,TYPE=SSE,CLASS=CONTROL                     E506
         OPCODE RECMS,TYPE=SSE,CLASS=CONTROL                     E507
         OPCODE TRSVC,TYPE=SSE,CLASS=(CONTROL,370)               E508
         OPCODE TRPGM,TYPE=SSE,CLASS=(CONTROL,370)               E509
         OPCODE TRISD,TYPE=SSE,CLASS=(CONTROL,370)               E50A
         OPCODE TRIO,TYPE=SSE,CLASS=(CONTROL,370)                E50B
         OPCODE TRDSP,TYPE=SSE,CLASS=(CONTROL,370)               E50C
         OPCODE TRRET,TYPE=SSE,CLASS=(CONTROL,370)               E50D
CNTE5    EQU   (*-EXTE5)/MNLENGTH
         EJECT
***********************************************************************
*                                                                     *
*     USER DSECT (GETMAINED TO PRESERVE REENTRANCY).                  *
*                                                                     *
***********************************************************************
         SPACE 1
$USER    DSECT ,
$SAVE    DS    18A                 SUBROUTINE SAVE AREA.
$DOUBLE  DS    D                   CONVERSION WORK AREA.
$CONVERT DS    D                   CONVERSION WORK AREA.
$NEXT    DS    A                   DUMP ADDRESS OF NEXT INSTRUCTION.
$OFFSET  DS    A                   OFFSET FROM START "  "  ".
$END     DS    A                   DUMP ADDRESS OF HIGHEST RANGE.
$FORMAT  DS    XL40                AMDPRDMP FORMAT PARM LIST.
$12BYTES DS    XL12                TRANSLATED DUMP DATA.
$6BYTES  DS    XL6                 UNTRANSLATED DUMP DATA
$LENGTH  DS    H                   LENGTH OF INSTRUCTION.
$FLAG1   DS    X                   FIRST FLAG BYTE, AS FOLLOWS:
$MFO     EQU   X'80'                - MULTI-FUNCTION OPCODE.
*        EQU   X'40'                - RESERVED FOR FUTURE USE.
$NOXA    EQU   X'20'                - NO XA-UNIQUE OPCODES REQ.
$NO370   EQU   X'10'                - NO 370-UNIQUE OPCODES REQ.
$NOCTL   EQU   X'08'                - NO CONTROL OPCODES REQ.
$NOIO    EQU   X'04'                - NO I/O OPCODES REQ.
$NODEC   EQU   X'02'                - NO DECIMAL OPCODES REQ.
$NOFP    EQU   X'01'                - NO FLOATING POINT OPCODES REQ.
$FLAG2   DS    X                   SECOND FLAG BYTE, AS FOLLOWS:
$COLONV  EQU   X'80'                - EXPECTING COLON AS DELIMITER.
$ADDRSCN EQU   X'40'                - EXPECTING ADDRESS RANGE.
$ENDSCAN EQU   X'20'                - END OF OPERANDS FOUND.
$ENDMSG  EQU   X'10'                - END OF RUN MESSAGE REQUESTED.
         SPACE 1
$LUSER   EQU   *-$USER             LENGTH OF DSECT.
         SPACE 2
MNEMONIC DSECT ,
MNCLASS  DS    X                   MNEMONIC CLASS FLAG, AS FOLLOWS.
MNCMFO   EQU   X'80'                - MULTI-FUNCTION OPCODE.
*        EQU   X'40'                - RESERVED FOR FUTURE USE.
MNCXA    EQU   X'20'                - XA-UNIQUE OPCODE.
MNC370   EQU   X'10'                - 370-UNIQUE OPCODE.
MNCCNTL  EQU   X'08'                - CONTROL OPCODE.
MNCIO    EQU   X'04'                - I/O OPCODE.
MNCDEC   EQU   X'02'                - DECIMAL OPCODE.
MNCFP    EQU   X'01'                - FLOATING POINT OPCODE.
MNTYPE   DS    X                   MNEMONIC TYPE FLAG, AS FOLLOWS:
MNTI     EQU   X'00'                - IMMEDIATE OPERAND (SVC).
MNTRR    EQU   X'04'                - RR INSTRUCTION.
MNTRR1   EQU   X'08'                - RR INSTRUCTION.
MNTRRE   EQU   X'0C'                - RRE INSTRUCTION.
MNTRRE1  EQU   X'10'                - RRE INSTRUCTION (R1 ONLY).
MNTRX    EQU   X'14'                - RX INSTRUCTION.
MNTRS    EQU   X'18'                - RS INSTRUCTION.
MNTRS1   EQU   X'1C'                - RS INSTRUCTION (R1 ONLY).
MNTSI    EQU   X'20'                - SI INSTRUCTION.
MNTS     EQU   X'24'                - S INSTRUCTION.
MNTSN    EQU   X'28'                - S INSTRUCTION (NO OPERAND).
MNTSS    EQU   X'2C'                - SS INSTRUCTION.
MNTSSLL  EQU   X'30'                - SS INSTRUCTION (L1,L2).
MNTSSRR  EQU   X'34'                - SS INSTRUCTION (R1,R3).
MNTSSE   EQU   X'38'                - SSE INSTRUCTION..
MNTUNDEF EQU   X'3C'                - UNDEFINED OPCODE.
MNNAME   DS    CL6                 MNEMONIC OP-CODE NAME.
MNLENGTH EQU   *-MNEMONIC          LENGTH OF ONE MNEMONIC ENTRY.
         ORG   MNNAME              REDEFINE FOR MFO HEADER.
MNCOUNT  DS    H                   MULTI-FUNCTION-OPCODE COUNT.
MN@EXT   DS    A                   ADDRESS OF MFO EXTENSION.
         EJECT
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ '370').PARM370 XA OR 370 IHAABDPL
         BLSABDPL AMDEXIT=YES,AMDJOB=NO,AMDCPST=NO,AMDPFMT=NO
         AGO   .ABDPLOK
.PARM370 ANOP
         IHAABDPL DSECT=YES        GENERATE ABEND/DUMP PARM LIST.
.ABDPLOK ANOP
         SPACE 4
         END   AMDECODE
