      /*  PDUMP V5L0  CL269  DATE OF LAST REVISION JAN 1982  */
 LIST50: PROC(PARM) OPTIONS(MAIN) REORDER;
      DCL (PAGE,POS,LEN,A,TOP,B,W,S,F,T,BUFRL,CNTRL,FROM,TO,PMAX,
           RCSCAN,OPT#,L,M#,C#,E#,PP   ) FIXED BIN(15) INIT(0);
      DCL (RECORD,NLIST,SKIP,STOPAFT,PREVOFFSET
                                       ) FIXED BIN(31) INIT(0);
      DCL OPTION(21) CHAR(8) VAR INIT('RECL','HEXT','HEX','DUMP',
                     'SKIP','STOPAFT','COPYDD','DSORG','PRINTKEY',
                     'NOLIST','INDD','COPY','KEYDD','CNTRL','COL',
                     'COMPRESS','CCHAR','EXPAND','ECHAR','PAGES',
                     'PASSWORD');
      DCL (HEX,DUMP,NOLIST,PRINTKEY,COPY,HEXT,COMPRESS,EXPAND
                                             ) BIT(1) INIT('0'B);
      DCL (VERIFY,SUBSTR,LENGTH,INDEX,DATE,TIME,ADDR,MIN,REPEAT,
           LINENO,MOD,UNSPEC,NULL              ) BUILTIN;
      DCL SYSPRINT FILE STREAM OUTPUT PRINT;
      DCL KEYS     FILE STREAM INPUT;
      DCL SYSOUT   FILE RECORD OUTPUT;
      DCL SYSXX    FILE VARIABLE INIT(SYSPS);
      DCL SYSPS    FILE RECORD INPUT;
      DCL SYSIS    FILE RECORD INPUT KEYED ENV(INDEXED);
      DCL SYSR1    FILE RECORD INPUT KEYED ENV(REGIONAL(1));
      DCL SYSR2    FILE RECORD INPUT KEYED ENV(REGIONAL(2));
      DCL SYSR3    FILE RECORD INPUT KEYED ENV(REGIONAL(3));
      DCL SYSVS    FILE RECORD INPUT KEYED ENV(VSAM PASSWORD(VSPW));
      DCL FCBLOC   EXTERNAL ENTRY(FILE,POINTER);
      DCL SCANNER  ENTRY(ENTRY,CHAR(*) VAR,) RETURNS(FIXED BIN(15));
      DCL HEXOUT   EXTERNAL ENTRY(CHAR(*) VAR , CHAR(*));
      DCL TRANS32  EXTERNAL ENTRY(CHAR(*));
      DCL ALP      CHAR(26) INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
      DCL NUM      CHAR(10) INIT('0123456789');
      DCL NAT      CHAR(3) INIT('@$#');
      DCL HEXCHARS CHAR(16) INIT('0123456789ABCDEF');
      DCL INDD     CHAR(8) INIT('SYSIN');
      DCL COPYDD   CHAR(8) INIT('SYSOUT');
      DCL KEYDD    CHAR(8) INIT('KEYS');
      DCL KEAY     CHAR(264) VAR INIT('');
      DCL DSORG    CHAR(2) INIT('PS');
      DCL TIMEX    CHAR(9) INIT(' ');
      DCL VSPW     CHAR(8) STATIC INIT(' ');
      DCL HEADER1  CHAR(7) INIT(' ');
      DCL HEADER2  CHAR(8) INIT(' ');
      DCL COL      CHAR(20) VAR INIT('');
      DCL PARM     CHAR(100) VAR;
      DCL R        CHAR(100) VAR INIT('');
      DCL O        CHAR(100) VAR INIT('');
      DCL CR       CHAR(11) INIT(' ');
      DCL OPTVAL   CHAR(20) VAR INIT('');
      DCL (ECHAR,CCHAR) CHAR(1) INIT(' ');
      DCL LINE50 CHAR(50) VAR INIT('');
      DCL LINE CHAR(100) INIT(' ');
      DCL P POINTER INIT((ADDR(Y)));
      DCL Q POINTER INIT((ADDR(YY)));
      DCL OUTREC CHAR(*) VAR CONTROLLED INIT('');
      DCL DATA   CHAR(*) VAR CONTROLLED INIT('');
      DCL HEX64 CHAR(64) INIT(' ');
      DCL LINE32 CHAR(32) VAR INIT('');
      DCL Y CHAR(4) INIT(' ');
      DCL BIN FIXED BIN(31) BASED(P);
      DCL WORK CHAR(3) VAR INIT('');
      DCL 1 DUMPLINE,
            2 OFFSET CHAR(6) INIT(' '),
            2 WORDS(8) CHAR(8) INIT((8)(1)' '),
            2 STAR1 CHAR(1) INIT('*'),
            2 INFO CHAR(32) INIT(' '),
            2 STAR2 CHAR(1) INIT('*');
      DCL YY CHAR(4) INIT(' ');
      DCL WARK CHAR(3) VAR INIT('');
      DCL BAN FIXED BIN(31) BASED(Q);
      DCL (OFFSET1,OFFSET2) CHAR(6) INIT(' ');
      DCL PREVINFO CHAR(32) VAR INIT('');
      DCL 1 PLITABS STATIC EXT,
          2 (OFFSET INIT(6),
            PAGESIZE INIT(60),
            LINESIZE INIT(132),
            NO_OF_TABS INIT(5),
            TAB1 INIT(25),
            TAB2 INIT(49),
            TAB3 INIT(73),
            TAB4 INIT(97),
            TAB5 INIT(121)) FIXED BIN(15,0);
      DCL 1 ACTION,  /* SCANNER ACTION TABLE FOR PARM */
            2 TYPE(21) BIT(1) INIT((21)(1)'0'B),
            2 KW(21) CHAR(8) VAR INIT('R','HEXT','HEX','DU',
                     'SK','ST','COPYDD','DS','PR','NOL','INDD',
                     'COPY','KEYDD','CN','COL','COM','CC',
                     'EXP','EC','PAG','PAS'),
            2 TRANS BIT(1) INIT('0'B);
      DCL 1 FCB BASED(FCBPTR),
               2 F111 CHAR(20),
               2 FADB POINTER,  /* ADDRESS OF DCB OR ACB */
               2 F222 CHAR(16),
               2 FFLA BIT(8),  /* RECORD FORMAT */
                      /* BIT(1) F-FORMAT
                         BIT(2) V-FORMAT
                         BIT(3) U-FORMAT
                         BIT(4) BLOCKED
                         BIT(5) SPANNED */
               2 FFLB BIT(8),  /* FILE ORGANIZATION */
                      /* BIT(1) CONSECUTIVE
                         BIT(2) INDEXED
                         BIT(3) REGIONAL(1)
                         BIT(4) REGIONAL(2)
                         BIT(5) REGIONAL(3)
                         BIT(6) TP(M)
                         BIT(7) TP(R)
                         BIT(8) OTHER */
               2 FFLC BIT(8),  /* ACCESS METHOD */
                      /* X'00'  QSAM
                         X'04'  BSAM
                         X'08'  BSAM(LOAD)
                         X'0C'  TCAM
                         X'10'  QISAM
                         X'14'  BISAM
                         X'18'  BDAM
                         X'1C'  VSAM  */
               2 FFLD BIT(8),
               2 F333 CHAR(4),
               2 FBKZ FIXED BIN(15),  /* BLOCKSIZE */
               2 FKYL FIXED BIN(15),  /* KEYLENGTH */
               2 FRCL FIXED BIN(31),  /* RECORD LENGTH */
               2 F444 CHAR(20),
                 /* BEGIN RECORD I/O OR STREAM I/O SECTION */
               2 F555 CHAR(24),
               2 FFNC BIT(8),
               2 FELV BIT(8);  /* VSAM FLAGS */
                      /* BIT(1) KSDS
                         BIT(2) ESDS
                         BIT(3) RRDS
                         BIT(4) ALTERNATE INDEX PATH
                         BIT(5) ALTERNATE INDEX PATH (NON-UNIQUE)
                         BIT(6) SKIP */
      DCL FCBPTR POINTER INIT((NULL));
      DCL QSAM  BIT(8) INIT('00000000'B);
      DCL BSAM  BIT(8) INIT('00000100'B);
      DCL BSAML BIT(8) INIT('00001000'B);
      DCL VSAM  BIT(8) INIT('00011100'B);
 TODAY: PROC RETURNS(CHAR(7));
      DCL X CHAR(7) , N FIXED BIN(15) , MO CHAR(36) , Y CHAR(6);
      Y=DATE;
      GET STRING(Y) EDIT(N) (X(2),F(2));
      MO='JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC';
      SUBSTR(X,1,2)=SUBSTR(Y,5,2);
      SUBSTR(X,3,3)=SUBSTR(MO,3*N-2,3);
      SUBSTR(X,6,2)=SUBSTR(Y,1,2);
      RETURN(X);
      END TODAY;
      FROM=1;  /* DEFAULT "FROM" VALUE */
      C#=1;    /* DEFAULT "COMPRESS" VALUE */
      RCSCAN=SCANNER(EXIT,PARM,ACTION);
      SELECT(RCSCAN);
      WHEN(8)  R='MISMATCHED PARENTHESES IN PARM';
      WHEN(12) R='PARM SYNTAX ERROR';
      WHEN(98) R='INVALID OPTION: '××OPTVAL;
      WHEN(99) R='INVALID PARAMETER TO OPTION '××OPTION(OPT#-4);
      OTHERWISE R='SCANNER RETURN CODE'××RCSCAN;
      END;
      IF RCSCAN>4 THEN GOTO EOJ;
 EXIT: PROC(KW#,VALUE) RETURNS(FIXED BIN(15));
      DCL KW# FIXED BIN(15);
      DCL VALUE CHAR(*) VAR;
      DCL (RC,L) FIXED BIN(15) INIT(0);
      OPT#=KW#;
      OPTVAL=VALUE;
      L=LENGTH(VALUE);
      IF OPT#>4 THEN DO;
         O=O××OPTION(OPT#-4);
         SELECT(KW#);
         WHEN(25) O=O××'()';
         OTHERWISE IF L>0 THEN O=O××'('××VALUE××')';
         END;
         O=O××',';
         END;
      SELECT(KW#);
      WHEN(5) DO;  /* RECL */
              IF VERIFY(VALUE,NUM)>0×L=0
                 THEN RC=99;
                 ELSE DO;
                      GET STRING(VALUE) LIST(BUFRL);
                      IF BUFRL<0 THEN RC=99;
                      END;
              END;
      WHEN(6) HEXT=^(DUMP×HEX);
      WHEN(7) HEX=^(DUMP×HEXT);
      WHEN(8) DUMP=^(HEX×HEXT);
      WHEN(9) DO;  /* SKIP */
              IF VERIFY(VALUE,NUM)>0×L=0
                 THEN RC=99;
                 ELSE DO;
                      GET STRING(VALUE) LIST(SKIP);
                      IF SKIP<0 THEN RC=99;
                      END;
              END;
      WHEN(10) DO;  /* STOPAFT */
               IF VERIFY(VALUE,NUM)>0×L=0
                  THEN RC=99;
                  ELSE DO;
                       GET STRING(VALUE) LIST(STOPAFT);
                       IF STOPAFT<0 THEN RC=99;
                       END;
               END;
      WHEN(11) COPYDD=VALUE;
      WHEN(12) SELECT(VALUE);  /* DSORG */
               WHEN('IS') DSORG='IS';
               WHEN('R1') DSORG='R1';
               WHEN('R2') DSORG='R2';
               WHEN('R3') DSORG='R3';
               WHEN('VS') DSORG='VS';
               OTHERWISE  RC=99;
               END;
      WHEN(13) PRINTKEY='1'B;
      WHEN(14) NOLIST='1'B;
      WHEN(15) INDD=VALUE;
      WHEN(16) COPY='1'B;
      WHEN(17) KEYDD=VALUE;
      WHEN(18) SELECT(VALUE);  /* CNTRL */
               WHEN('1') CNTRL=1;
               WHEN('2') CNTRL=2;
               WHEN('3') CNTRL=3;
               OTHERWISE RC=99;
               END;
      WHEN(19) DO;  /* COL */
               IF VERIFY(VALUE,NUM××',')>0×L=0
                  THEN RC=99;
                  ELSE DO;
                       COL=VALUE××',,';
                       GET STRING(COL) LIST(FROM,TO);
                       IF FROM<1×TO<0 THEN RC=99;
                       END;
               END;
      WHEN(20) DO;
               COMPRESS=^EXPAND;
               IF L>0 THEN DO;
                  IF VERIFY(VALUE,NUM)>0
                     THEN RC=99;
                     ELSE DO;
                          GET STRING(VALUE) LIST(C#);
                          IF C#<1 THEN RC=99;
                          END;
                  END;
               END;
      WHEN(21) SELECT(L);  /* CCHAR */
               WHEN(0) RC=99;
               WHEN(1) CCHAR=VALUE;
               OTHERWISE SELECT(SUBSTR(VALUE,1,1));
                         WHEN('''') GET STRING(VALUE) LIST(CCHAR);
                         WHEN('"') DO;
                                   IF ^HEXIN(VALUE,CCHAR) THEN RC=99;
                                   END;
                         OTHERWISE RC=99;
                         END;
               END;
      WHEN(22) DO;
               EXPAND=^COMPRESS;
               IF L>0 THEN DO;
                  IF VERIFY(VALUE,NUM)>0
                     THEN RC=99;
                     ELSE DO;
                          GET STRING(VALUE) LIST(E#);
                          IF E#<1 THEN RC=99;
                          END;
                  END;
               END;
      WHEN(23) SELECT(L);  /* ECHAR */
               WHEN(0) RC=99;
               WHEN(1) ECHAR=VALUE;
               OTHERWISE SELECT(SUBSTR(VALUE,1,1));
                         WHEN('''') GET STRING(VALUE) LIST(ECHAR);
                         WHEN('"') DO;
                                   IF ^HEXIN(VALUE,ECHAR) THEN RC=99;
                                   END;
                         OTHERWISE RC=99;
                         END;
               END;
      WHEN(24) DO;  /* PAGES */
               IF VERIFY(VALUE,NUM)>0×L=0
                  THEN RC=99;
                  ELSE DO;
                       GET STRING(VALUE) LIST(PMAX);
                       IF PMAX<0 THEN RC=99;
                       END;
               END;
      WHEN(25) VSPW=VALUE;  /* VSAM PASSWORD */
      OTHERWISE RC=98;
      END;
      RETURN(RC);
 HEXIN: PROC(V,C) RETURNS(BIT(1));
      DCL V CHAR(*) VAR;
      DCL C CHAR(*);
      DCL I FIXED BIN(15) INIT(0);
      IF LENGTH(V)^=4 THEN RETURN('0'B);
      IF VERIFY(SUBSTR(V,2,2),HEXCHARS)^=0 THEN RETURN('0'B);
      I=16*(INDEX(HEXCHARS,SUBSTR(V,2,1))-1);
      I= I+(INDEX(HEXCHARS,SUBSTR(V,3,1))-1);
      UNSPEC(C)=SUBSTR(UNSPEC(I),9,8);
      RETURN('1'B);
      END HEXIN;
      END EXIT;
      SELECT(DSORG);
      WHEN('VS') SYSXX=SYSVS;
      WHEN('IS') SYSXX=SYSIS;
      WHEN('R1') SYSXX=SYSR1;
      WHEN('R2') SYSXX=SYSR2;
      WHEN('R3') SYSXX=SYSR3;
      OTHERWISE  SYSXX=SYSPS;
      END;
      IF COPY THEN DO;
         OPEN FILE(SYSOUT) TITLE(COPYDD);
         M#=RECMAX(SYSOUT);
         ALLOCATE OUTREC CHAR(M#);
         IF EXPAND THEN DO;
            IF E#=0 THEN E#=M#;
                    ELSE E#=MIN(E#,M#);
            END;
         END;
      IF CNTRL=0 THEN DO; IF HEX THEN CNTRL=2; ELSE CNTRL=1; END;
      IF DUMP THEN S=2; ELSE S=CNTRL;
      IF DSORG='PS' THEN PRINTKEY='0'B;
      HEADER1=TODAY;
      TIMEX=TIME;
      HEADER2 = SUBSTR(TIMEX,1,2)  ××  '.'  ××  SUBSTR(TIMEX,3,2)
         ××  '.'  ××  SUBSTR(TIMEX,5,2)  ;
      IF NOLIST THEN GOTO NOENDPAGE;
      ON ENDPAGE(SYSPRINT) BEGIN;
         PAGE=PAGE+1;
         IF PAGE>1 THEN PUT PAGE;
         PUT EDIT(HEADER1,HEADER2,'PAGE ',PAGE)
                 (A,X(4),A,COL(118),A,F(4));
         IF DUMP THEN  ;
         ELSE IF HEX THEN DO;
              PUT EDIT('1         1         2         2         ' ××
                       '3         3         4         4         5')
                      (SKIP,X(18),A);
              IF PRINTKEY THEN PUT EDIT('KEY OR') (COL(105),A);
              PUT EDIT('1 . . . ') (SKIP,A);
              PUT EDIT(REPEAT('5 . . . . 0 . . . . ',3)) (A);
              PUT EDIT('5 . . . . 0') (A);
              PUT EDIT('RECORD','BYTES','LENGTH')
                      (COL(105),A,X(5),A,X(4),A);
              END;
         ELSE DO;
              PUT EDIT('1         2         3         4         ' ××
                       '5         6         7         8         9')
                      (SKIP,X(9),A);
              IF PRINTKEY THEN PUT EDIT('KEY OR') (COL(105),A);
              PUT EDIT(REPEAT('....5....0',9)) (SKIP,A);
              PUT EDIT('RECORD','BYTES','LENGTH')
                      (COL(105),A,X(5),A,X(4),A);
              END;
         IF LINENO(SYSPRINT)<5 THEN PUT LINE(5);
         IF PAGE>PMAX&PMAX>0 THEN DO;
            R='MAXIMUM PAGES EXCEEDED';
            GOTO EOJ;
            END;
         END;
      SIGNAL ENDPAGE(SYSPRINT);
 NOENDPAGE:  ;
      ON UNDEFINEDFILE(KEYS) GOTO OPEN;
      IF DSORG^='PS' THEN DO;
         OPEN FILE(KEYS) TITLE(KEYDD);
         ON ENDFILE(KEYS) GOTO EOJ;
         R='END OF FILE IN KEY DATASET   KEYDD='××KEYDD;
         ON KEY(SYSXX) GOTO NOREC;
         OPEN FILE(SYSXX) DIRECT TITLE(INDD);
         CALL SETREC;
         GOTO KEY_INPUT;
         END;
 OPEN:
      SELECT(DSORG);
      WHEN('PS') OPEN FILE(SYSXX) TITLE(INDD);
      OTHERWISE  OPEN FILE(SYSXX) SEQL TITLE(INDD);
      END;
      CALL SETREC;
      ON ENDFILE(SYSXX) GOTO EOJ;
      R='END OF FILE IN INPUT DATASET   INDD='××INDD;
 LOOP:
      SELECT(DSORG);
      WHEN('PS') READ FILE(SYSXX) INTO(DATA);
      OTHERWISE  READ FILE(SYSXX) INTO(DATA) KEYTO(KEAY);
      END;
      RECORD=RECORD+1;
      IF RECORD<=SKIP THEN GOTO LOOP;
      NLIST=NLIST+1;
      IF NLIST>STOPAFT&STOPAFT>0 THEN DO;
         R='NUMBER OF RECORDS PROCESSED EXCEEDED STOPAFT OPTION';
         GOTO EOJ;
         END;
      IF COPY THEN CALL COPYER;
      CALL PRINT(DATA,'   RECORD ');
      IF PRINTKEY THEN CALL PRINT(KEAY,'      KEY ');
      GOTO LOOP;
 NOREC:
      PUT EDIT ('***ERROR*** KEYED RECORD NOT FOUND. KEY=' ×× KEAY)
               (SKIP(2),A);
 KEY_INPUT:
      GET FILE (KEYS) LIST (KEAY);
      READ FILE(SYSXX) INTO(DATA) KEY(KEAY);
      RECORD=RECORD+1;
      IF COPY THEN CALL COPYER;
      CALL PRINT(DATA,'   RECORD ');
      IF PRINTKEY THEN CALL PRINT(KEAY,'      KEY ');
      GOTO KEY_INPUT;
 SETREC: PROC;
      /*********************************************************
      THIS ROUTINE SETS THE LENGTH(BUFRL) OF THE INTERNAL
      CHARACTER STRING(DATA) INTO WHICH WE WILL READ RECORDS FROM
      THE USERS FILE.
      IF THE USER SUPPLIES A VALUE (IE. RECL>0) WE USE IT,
      OTHERWISE WE USE THE MAXIMUM RECORD SIZE GIVEN IN THE
      FILE CONTROL BLOCK (FCB).
      *********************************************************/
      IF BUFRL<=0 THEN BUFRL=RECMAX(SYSXX);
      ALLOCATE DATA CHAR(BUFRL);
      END SETREC;
 RECMAX: PROC(FNAME) RETURNS(FIXED BIN(15));
      /**********************************************************
      DETERMINE THE MAXIMUM RECORD LENGTH FOR THE GIVEN FILE.
      USE THE FCB RECORD LENGTH (FRCL) FOR ALL ACCESS METHODS.
      THE ONLY EXCEPTION TO THIS IS BSAM OR QSAM FILES WITH
      U-FORMAT RECORDS IN WHICH CASE WE USE THE BLOCKSIZE (FBKZ).
      **********************************************************/
      DCL M FIXED BIN(15) INIT(0);
      DCL FNAME FILE;
      CALL FCBLOC(FNAME,FCBPTR);
      M=FRCL;  /* USE RECORD LENGTH */
      IF FFLC=QSAM×FFLC=BSAM×FFLC=BSAML THEN DO;
         IF SUBSTR(FFLA,3,1)  /* IF RECFM=U */
            THEN M=FBKZ;  /* USE BLOCKSIZE */
         END;
      RETURN(M);
      END RECMAX;
 PRINT: PROC(DODO,X);
      DCL DODO CHAR(*) VAR;  DCL X CHAR(10);
      IF NOLIST THEN RETURN;
      LEN=LENGTH(DODO);
      IF FROM<1×FROM>LEN THEN F=1; ELSE F=FROM;
      IF TO<F THEN T=LEN; ELSE T=MIN(TO,LEN);
      IF HEX THEN DO A=F BY 50 TO T;
      TOP=A+49;
      TOP=MIN(TOP,T);
      LINE50=SUBSTR(DODO,A,TOP-A+1);
      CALL HEXOUT(LINE50,LINE);
      IF HEXT THEN DO;
         PUT SKIP(CNTRL-S);
         S=0;
         DO B=1 TO LENGTH(LINE50);
         PUT EDIT(SUBSTR(LINE50,B,1)××' ') (A);
         END;
         IF A=F THEN PUT EDIT(LINE,RECORD,RANGE(A,TOP),LEN)
                             (SKIP,A,X(1),F(9),X(2),A,X(2),F(5));
                ELSE PUT EDIT(LINE,RANGE(A,TOP)) (SKIP,A,X(12),A);
         END;
      ELSE DO;
         IF A=F THEN DO;
              PUT EDIT(LINE,RECORD,RANGE(A,TOP),LEN)
                      (SKIP(CNTRL-S),A,X(1),F(9),X(2),A,X(2),F(5));
              S=0;
              END;
         ELSE PUT EDIT(LINE,RANGE(A,TOP)) (SKIP(CNTRL),A,X(12),A);
         END;
      END;
      ELSE IF DUMP THEN DO;
      PUT EDIT (X,RECORD,LEN,' BYTES ')
      (SKIP(2-S),X(9),A,P'999999',F(13),A);
      S=0;
      F=F-MOD(F-1,4);  /*  ROUND DOWN TO NEXT FULLWORD  */
      DO A=F BY 32 TO T;
      TOP=A+31;
      TOP=MIN(TOP,T);
      LINE32=SUBSTR(DODO,A,TOP-A+1);
      BIN=A-1;
      IF A=F THEN GOTO ZA;
      IF A+32<=T & LINE32=PREVINFO THEN GOTO ZB;
      IF BIN-PREVOFFSET=32 THEN GOTO ZA;
      BAN=BIN-32;
      WARK=SUBSTR(YY,2,3);
      CALL HEXOUT(WARK,OFFSET2);
      IF BIN-PREVOFFSET=64 THEN DO;
      PUT EDIT ('LINE ',OFFSET2,' SAME AS ABOVE') (SKIP,X(6),A,A,A);
      END;
      ELSE DO;
      BAN=PREVOFFSET+32;
      WARK=SUBSTR(YY,2,3);
      CALL HEXOUT(WARK,OFFSET1);
      PUT EDIT ('LINES ',OFFSET1,'-',OFFSET2,' SAME AS ABOVE')
               (SKIP,X(6),A,A,A,A,A);
      END;
 ZA:
      WORK=SUBSTR(Y,2,3);
      CALL HEXOUT(WORK,DUMPLINE.OFFSET);
      INFO=LINE32;
      CALL TRANS32(INFO);
      CALL  HEXOUT(LINE32,HEX64);
      DO B=1 TO 8;
      WORDS(B)=SUBSTR(HEX64,B*8-7);
      END;
      PUT EDIT (DUMPLINE)
      (SKIP,A,X(2),(4)(X(1),A),X(3),(4)(X(1),A),X(3),A,A,A);
      PREVINFO=LINE32;
      PREVOFFSET=BIN;
 ZB:
      END;
      END;
      ELSE DO A=F BY 100 TO T;
      TOP=A+99;
      TOP=MIN(TOP,T);
      LINE=SUBSTR(DODO,A,TOP-A+1);
      IF A=F THEN DO;
      PUT EDIT(LINE,RECORD,RANGE(A,TOP),LEN)
              (SKIP(CNTRL-S),A,X(1),F(9),X(2),A,X(2),F(5));
      S=0;
      END;
      ELSE PUT EDIT(LINE,RANGE(A,TOP)) (SKIP(CNTRL),A,X(12),A);
      END;
 RANGE: PROC(N1,N2) RETURNS(CHAR(11));
      DCL (N1,N2,I) FIXED BIN(15);
      DCL CN2 CHAR(5);
      DCL RSTR CHAR(11);
      PUT STRING(CN2) EDIT(N2) (F(5));
      I=VERIFY(CN2,' ');
      IF I>1 THEN CN2=SUBSTR(CN2,I);
      PUT STRING(RSTR) EDIT(N1,'-',CN2) (F(5),A(1),A(5));
      RETURN(RSTR);
      END RANGE;
      END PRINT;
 COPYER: PROC;
      IF FROM=1&TO=0&^(COMPRESS×EXPAND) THEN DO;
         OUTREC=DATA;
         WRITE FILE(SYSOUT) FROM(OUTREC);
         RETURN;
         END;
      L=LENGTH(DATA);
      IF FROM<1×FROM>L THEN F=1; ELSE F=FROM;
      IF TO<F THEN T=L; ELSE T=MIN(TO,L);
      IF ^(COMPRESS×EXPAND) THEN DO;
         OUTREC=SUBSTR(DATA,F,T-F+1);
         WRITE FILE(SYSOUT) FROM(OUTREC);
         RETURN;
         END;
      IF COMPRESS THEN DO;
         PP=T;
         DO WHILE(SUBSTR(DATA,PP,1)=CCHAR&(C#+F-1)<PP&F<PP);
         PP=PP-1;
         END;
         OUTREC=SUBSTR(DATA,F,PP-F+1);
         WRITE FILE(SYSOUT) FROM(OUTREC);
         RETURN;
         END;
      /* ASSUME EXPAND */
      OUTREC=SUBSTR(DATA,F,T-F+1);
      IF E#>(T-F+1) THEN OUTREC=OUTREC××REPEAT(ECHAR,E#-T+F-2);
      WRITE FILE(SYSOUT) FROM(OUTREC);
      END COPYER;
 EOJ:
      PUT STRING(CR) EDIT(RECORD) (F(11));
      W=VERIFY(CR,' ');
      CR=SUBSTR(CR,W);
      PUT EDIT('PDUMP V5L0(CL269) PROCESSING TERMINATING DUE TO ',R)
              (SKIP(4),A,A);
      PUT EDIT('NUMBER OF INPUT DATASET RECORDS READ WAS ',CR)
              (SKIP,A,A);
      L=LENGTH(O);
      IF L>0 THEN PUT EDIT('OPTIONS SPECIFIED: '××SUBSTR(O,1,L-1))
                          (SKIP,A);
      PUT EDIT('END OF JOB') (SKIP,A);
      END LIST50;
