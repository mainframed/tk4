 SCANNER: PROCEDURE(VALID,CBUF,KWORDS) RETURNS(FIXED BIN(15,0)) REORDER
         RECURSIVE;
 /*
    SCANNER IS A GENERAL PURPOSE CONTROL CARD/COMMAND STRING
    SCANNER.
0   THE INPUT ARGUMENTS ARE:-
0      VALID   -   THE ADDRESS OF A PL/I PROCEDURE THAT IS CALLED
                   WHENEVER A KEYWORD OR POSITIONAL PARAMETER IS
                   ENCOUNTERED.
0      CBUF    -   IS THE STRING TO BE SCANNED.
0      KWORDS  -   IS A STRUCTURE CONTAINING
         TYPE  - ON/OFF SWITCH. OFF = NOT A DSN, ON = DSN
         WORD  - KEYWORDS TO BE SEARCHED FOR
         TRANS - ON/OFF SWITCH. OFF = DON'T TRANSLATE CBUF,
                                ON  = TRANSLATE FROM LOWER TO UPPER
0   IF TYPE = ON, THE KEYWORD IS ASSUMED TO HAVE A VALUE FIELD
    WHICH CONTAINS A DSN IN TSO FORMAT (I.E. NAME(MEMBER)/PASSWORD).
0   VALID IS CALLED WITH 2 ARGUMENTS:-
0      1. OP   -   CONTAINS THE POSITIONAL PARAMETER OR KEYWORD #
             0 - VAL IS EMPTY
             1 - VAL IS ENCLOSED IN APOSTROPHES
             2 - VAL IS ENCLOSED IN PARENTHESIS
             3 - VAL IS NUMERIC
             4 - VAL IS CHARACTER
             5 - 1ST KEYWORD IN WORD
             :          :
             N - LAST KEYWORD IN WORD
0      2. VAL  -   CHARACTER STRING CONTAINING THE VALUE FIELD
0   SCANNER RETURNS A NUMBER INDICATING THE RETURN CODE:-
0      0  -  SCAN SUCCESSFUL
       4  -  CBUF WAS EMPTY
       8  -  CBUF CONTAINED UNMATCHED PARENTHESIS OR APOSTROPHES
      12  -  SYNTAX ERROR (MOST LIKELY CAUSED BY AN INVALID DSN KEYWORD)
       N  -  ANY NONZERO RETURN CODE FROM VALID. (CAUSES AN
             IMMEDIATE TERMINATION OF THE SCAN OF CBUF.
0                                                                    */
1   DECLARE
      RC                 FIXED BIN(15,0) INIT(0),
      (ACT,POS)          FIXED BIN(15,0) INIT(0),
      CBUF               CHAR(*) VARYING,
      1 KWORDS,
        2 TYPE(*)        BIT(*),
        2 WORD(*)        CHAR(*) VARYING,
        2 TRANS          BIT(*),
-     (HBOUND,
       TRANSLATE,
       VERIFY,
       SUBSTR,
       INDEX,LOW,
       LENGTH)           BUILTIN,
-     UPPER              CHAR(26) STATIC INIT(
          'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),
      LOWER              CHAR(26) STATIC INIT(
          'abcdefghijklmnopqrstuvwxyz'),
      DIG                CHAR(10) STATIC INIT('0123456789'),
-     VALUE              CHAR(256) VARYING INIT(''),
      SZ                 FIXED BIN(15,0) INIT((HBOUND(TYPE,1))),
-     VALID              ENTRY(FIXED BIN(15,0),CHAR(*) VARYING)
                            RETURNS(FIXED BIN(15,0)),
-     KEY                CHAR(256) VARYING INIT(''),
      BUFF               CHAR(LENGTH(CBUF)+2) VARYING INIT(''),
      BUF                CHAR(LENGTH(CBUF)+2) VARYING INIT(''),
      CH                 CHAR(1) INIT(' '),
      QUOTE              BIT(1) INIT('0'B),
      (PAR,SEP,I)        FIXED BIN(15,0) INIT(0);
1   QUOTE = '0'B;
    BUF = ' ';
-   DO I = 1 TO LENGTH(CBUF);
       CH = SUBSTR(CBUF,I,1);
-      SELECT;
0         WHEN(CH = '''') DO;
            QUOTE = ^QUOTE;
            BUF = BUF ×× CH;
          END;
0         WHEN((CH = ' ' × CH = ',') & ^QUOTE) DO;
            IF CH = ' '
               THEN
                 IF SUBSTR(BUF,LENGTH(BUF),1) = ' ' ×
                        SUBSTR(BUF,LENGTH(BUF),1) = ','
                    THEN;
                 ELSE BUF = BUF ×× CH;
            ELSE
              IF SUBSTR(BUF,LENGTH(BUF),1) = ' '
                 THEN SUBSTR(BUF,LENGTH(BUF),1) = CH;
              ELSE BUF = BUF ×× CH;
          END;
0         OTHERWISE BUF = BUF ×× CH;
       END;
    END;
0   IF SUBSTR(BUF,1,1) = ' '
       THEN BUF = SUBSTR(BUF,2);
    ELSE;
0   PAR = 0;
    QUOTE = '0'B;
    BUFF = LOW(1);
1   DO I = 1 TO LENGTH(BUF);
       CH = SUBSTR(BUF,I,1);
0      SELECT;
0         WHEN(CH = '(' & ^ QUOTE) DO;
            PAR = PAR + 1;
            BUFF = BUFF ×× CH;
          END;
0         WHEN(CH = ')' & ^ QUOTE) DO;
            PAR = PAR - 1;
            BUFF = BUFF ×× CH;
          END;
0         WHEN(CH = '''') DO;
            QUOTE = ^ QUOTE;
            BUFF = BUFF ×× CH;
          END;
0         WHEN((CH = ' ' × CH = ',') & ^ QUOTE) DO;
            IF PAR = 0
               THEN
                 IF SUBSTR(BUFF,LENGTH(BUFF),1) ^= LOW(1) × CH = ','
                    THEN BUFF = BUFF ×× LOW(1);
                 ELSE;
            ELSE
              IF SUBSTR(BUFF,LENGTH(BUFF),1) ^= ',' × CH = ','
                 THEN BUFF = BUFF ×× ',';
              ELSE;
          END;
0         OTHERWISE BUFF = BUFF ×× CH;
       END;
    END;
0   IF QUOTE × PAR ^= 0
       THEN RETURN(8);
    ELSE;
0   IF LENGTH(BUFF) = 1
       THEN RETURN(4);
    ELSE BUFF = SUBSTR(BUFF,2);
0   IF SUBSTR(BUFF,LENGTH(BUFF),1) ^= LOW(1)
       THEN BUFF = BUFF ×× LOW(1);
    ELSE;
1   DO WHILE(LENGTH(BUFF) > 0);
       POS = INDEX(BUFF,LOW(1));
0      IF POS = 0
          THEN RETURN(12);
       ELSE;
0      IF POS = 1
          THEN DO;
            VALUE = '';
            ACT = 0;
            GO TO VALIDATE;
          END;
       ELSE KEY = SUBSTR(BUFF,1,POS-1);
0      IF SUBSTR(KEY,1,1) = '''' × SUBSTR(KEY,1,1) = '('
          THEN DO;
            VALUE = KEY;
0           IF SUBSTR(KEY,1,1) = ''''
               THEN ACT = 1;
            ELSE ACT = 2;
0           GO TO VALIDATE;
          END;
       ELSE;
0      IF TRANS
          THEN KEY = TRANSLATE(KEY,UPPER,LOWER);
       ELSE;
-      DO I = 1 TO SZ;
0         IF LENGTH(KEY) >= LENGTH(WORD(I)) & LENGTH(WORD(I)) ^= 0
             THEN
0              IF WORD(I) = SUBSTR(KEY,1,LENGTH(WORD(I)))
                  THEN LEAVE;
               ELSE;
          ELSE;
       END;
1      IF I = SZ + 1
          THEN DO;
            VALUE = KEY;
0           IF VERIFY(KEY,DIG) = 0
               THEN ACT = 3;
            ELSE ACT = 4;
0           GO TO VALIDATE;
          END;
       ELSE ACT = I + 4;
0      VALUE = BREAK(KEY,TYPE(I));
0      IF RC ^= 0
          THEN RETURN(12);
       ELSE;
0VALIDATE:
       RC = VALID(ACT,VALUE);
0      IF RC ^= 0
          THEN RETURN(RC);
       ELSE;
0NEXT:
0      IF LENGTH(BUFF) > POS + 1
          THEN BUFF = SUBSTR(BUFF,POS+1);
       ELSE BUFF = '';
    END;
0   RETURN(0);
1BREAK: PROCEDURE(KY,TY) RETURNS(CHAR(256) VARYING) REORDER;
    DECLARE
      KY                 CHAR(*) VARYING,
      TY                 BIT(*),
      (VA,TM)            CHAR(256) VARYING INIT(''),
      (ME,PA)            CHAR(8) INIT(''),
      (J,J1,J2,J3)       FIXED BIN(15,0) INIT(0);
-   RC = 0;
0   SELECT(TY);
0      WHEN('0'B) DO;
         J = INDEX(KY,'(');
0        IF J = 0
            THEN DO;
              J = INDEX(KY,'=');
0             IF J = 0 × LENGTH(KY) = J
                 THEN RETURN('');
              ELSE RETURN(SUBSTR(KY,J+1));
            END;
         ELSE;
0        VA = SUBSTR(KY,J+1);
0        IF LENGTH(VA) = 1
            THEN VA = '';
         ELSE VA = SUBSTR(VA,1,LENGTH(VA)-1);
       END;
0      WHEN('1'B) DO;
         J = INDEX(KY,'(');
0        IF J = 0
            THEN DO;
              RC = 4;
              RETURN('');
             END;
         ELSE TM = SUBSTR(KY,J+1);
0        TM = SUBSTR(TM,1,LENGTH(TM)-1);
         J1 = INDEX(TM,'/');
0        IF J1 = 1 × J1 = LENGTH(TM) × (LENGTH(TM) - J1 > 8 & J1 ^= 0)
            THEN DO;
              RC = 4;
              RETURN('');
            END;
         ELSE;
1        IF J1 > 0
            THEN DO;
              PA = SUBSTR(TM,J1+1);
              TM = SUBSTR(TM,1,J1-1);
            END;
         ELSE PA = ' ';
0        J = INDEX(TM,'(');
0        IF J ^= 0 & LENGTH(TM) - J - 1 > 8
            THEN DO;
              RC = 4;
              RETURN('');
            END;
         ELSE;
0        IF J > 0
            THEN DO;
              ME = SUBSTR(TM,J+1,LENGTH(TM)-J-1);
0             IF J = 1
                 THEN VA = (44)' ';
              ELSE VA = SUBSTR(SUBSTR(TM,1,J-1) ×× (44)' ',1,44);
            END;
         ELSE VA = SUBSTR(TM ×× (44)' ',1,44);
         VA = VA ×× ME ×× PA;
       END;
0      OTHERWISE RC = 4;
    END;
0   RETURN(VA);
0END BREAK;
0END SCANNER;
