         TITLE '$ORTDATA - MODULE COMMENTARY'
***************************************************************
*                                                             *
*        NAME      .$ORTDATA VERSION 02.03                    *
*                                                             *
*        TITLE     .SYNCSORT PARMEXIT FACILITY EXIT ROUTINE   *
*                   PARAMETER TABLE.                          *
*                                                             *
*        FUNCTION/ .PROVIDE THE $ORTPARM EXIT ROUTINE WITH    *
*        PURPOSE    THE INSTALLATION REQUIREMENTS FOR         *
*                   ASSIGNING SYNCSORT PERFORMANCE RELATED    *
*                   OPTIONS TO BE USED DURING DIFFERENT       *
*                   PERIODS OF THE DAY BASED ON AN ASSESSMENT *
*                   OF THE STATE OF THE SYSTEM'S EXECUTION    *
*                   ENVIRONMENT AT THE TIME THE EXIT ROUTINE  *
*                   IS INVOKED.                               *
*                                                             *
*        MODULE    .READ-ONLY,RENT,REFR,OL,AC=0,              *
*        ATTRIBUTES           AMODE(24),RMODE(24)             *
*                                                             *
*        ENTRY     .$ORTDATA                                  *
*                                                             *
*        INPUT     .THIS MODULE IS LOADED AND REFERENCED      *
*                   BY THE $ORTPARM SYNCSORT EXIT.  IT DOES   *
*                   NOT CONTAIN EXECUTABLE CODE AND RECEIVES  *
*                   NO INPUT FROM $ORTPARM.                   *
*                                                             *
*                                                             *
*        OUTPUT    .THIS MODULE PROVIDES NO OUTPUT PER SE.    *
*                   THE TABLE ENTRIES CONTAINED WITHIN THE    *
*                   MODULE ARE THE MODULE'S OUTPUT.           *
*                                                             *
*        EXIT      .NONE.                                     *
*                                                             *
*        RETURN    .NONE.                                     *
*        CODES                                                *
*                                                             *
*                                                             *
*        RESTRICTIONS/LIMITATIONS                             *
*                                                             *
*                  .NO RESTRICTIONS ARE ASSOCIATED WITH       *
*                   THE $ORTDATA MODULE.  ANY RESTRICTIONS    *
*                   PERTINENT TO PROCESSING THE VARIOUS       *
*                   FIELDS OF TABLE ENTRIES WILL BE           *
*                   ASSOCIATED WITH AND DESCRIBED IN          *
*                   $ORTPARM.                                 *
*                                                             *
*                                                             *
*        PACKAGING/ASSEMBLY                                   *
*                                                             *
*                  .TO SIMPLIFY INSTALLATION AND UPDATES,     *
*                   THE SYNCSORT EXIT IS PACKAGED AS TWO      *
*                   ASSEMBLER SOURCE MODULES AND A MEMBER     *
*                   OF ASSEMBLER "COPY" CODE:                 *
*                                                             *
*                      -$ORTPARM IS THE ACTUAL SYNCSORT EXIT  *
*                       AND CONTAINS PROGRAM MACRO            *
*                       DEFINITIONS, DOCUMENTATION, AND ALL   *
*                       EXECUTABLE CODE.                      *
*                                                             *
*                      -$ORTDATA IS THE PARAMETER TABLE       *
*                       MODULE WHICH IS "LOADED" BY $ORTPARM. *
*                       THIS MODULE CONTAINS THE DEFINITION   *
*                       OF THE #PARM MACRO, AND COPIES THE    *
*                       $ORTABLE PARAMETER TABLE ENTRY        *
*                       DEFINITIONS INTO ITS ASSEMBLY         *
*                       TO PRODUCE THE PARAMETER TABLE WHICH  *
*                       IS LOADED AND REFERENCED BY $ORTPARM. *
*                                                             *
*                      -$ORTABLE IS ASSEMBLER COPY CODE       *
*                       CONTAINING THE PARAMETER TABLE        *
*                       ENTRIES SPECIFYING SORT PARAMETER     *
*                       VALUES AND THE EXECUTION STATE        *
*                       DEPENDENCIES FOR USE OF THE SPECIFIED *
*                       PARAMETER VALUES.  EACH PARAMETER     *
*                       TABLE ENTRY IS DEFINED USING A MACRO, *
*                       #PARM, WHICH IS DEFINED AS A PROGRAM  *
*                       MACRO IN $ORTDATA.                    *
*                                                             *
*                  .THE FOLLOWING SYSTEM LIBRARIES MUST BE    *
*                   INCLUDED IN THE SYSLIB CONCATENATION      *
*                   DURING ASSEMBLY OF $ORTDATA:              *
*                      -SYS1.AMACLIB                          *
*                      -SYS1.AMODGEN                          *
*                      -SYS1.ATSOMAC.                         *
*                   IN ADDITION, THE LIBRARY CONTAINING       *
*                   $ORTABLE MUST BE INCLUDED IN THE SYSLIB   *
*                   CONCATENATION WHEN ASSEMBLING $ORTDATA.   *
*                                                             *
*                                                             *
*        UPDATE HISTORY                                       *
*                  .EXIT DESIGNED, CODED, AND TESTED.         *
*                                                08/09/81  TJA*
*                  .REPACKAGED AS TWO LOAD MODULES            *
*                   FOR EASE OF MAINTENANCE.     09/30/81  TJA*
*                                                             *
*                                                             *
*        FACILITIES/FEATURES                                  *
*                                                             *
*               THE EXIT DETERMINES THE EXECUTION OPTIONS     *
*        TO BE USED BY SYNCSORT BASED ON AN EVALUATION OF THE *
*        STATE OF THE SYSTEM AT THE TIME THE EXIT IS          *
*        INVOKED, AND RETURNS A STANDARD OS/MVS PARAMETER     *
*        STRING CONTAINING THESE OPTIONS.  THIS ALLOWS OUR    *
*        INSTALLATION TO RESTRICT THE USE OF OPTIONS WHOSE    *
*        USE COULD DEGRADE THE RESPONSIVENESS OF ONLINE       *
*        APPLICATIONS (E.G., TSO & CICS), WHILE PERMITTING USE*
*        OF THE MORE EFFICIENT SORTING OPTIONS AT OTHER TIMES.*
*        THE OPTIONS MOST COMMONLY SPECIFIED BY THIS EXIT     *
*        ARE VSCORE=, VSIO=, AND OPT=.                        *
*                                                             *
*                                                             *
*               AS NOTED ABOVE, THE EXIT IS TABLE DRIVEN,     *
*        USING A PARAMETER TABLE ASSEMBLED AS A SEPARATE      *
*        MODULE THAT IS LOADED BY THE EXIT.  THE PARAMETER    *
*        TABLE MODULE, $ORTDATA, IS PACKAGED AS A SEPARATE    *
*        LOAD MODULE TO EASE THE MAINTENANCE AND UPDATING     *
*        PROCESS.  $ORTDATA IS FORMATTED TO APPEAR LIKE A     *
*        BLOCK OF DATA FROM A VARIABLE LENGTH RECORD FILE;    *
*        EACH TABLE ENTRY IS A LOGICAL RECORD WITHIN THE      *
*        BLOCK.  A TABLE ENTRY IS DEFINED USING THE "#PARM"   *
*        MACRO WHICH IS A PROGRAM MACRO DEFINED INTERNALLY    *
*        TO $ORTDATA.  THE "#PARM" MACRO HAS SEVERAL KEYWORD  *
*        PARAMETERS FOR SPECIFYING WHEN THE EXIT SHOULD       *
*        PROCESS THE TABLE ENTRY, A KEYWORD FOR ACTIVATING    *
*        DIAGNOSTIC MESSAGES UNDER CERTAIN CONDITIONS, TWO    *
*        KEYWORDS FOR SPECIFYING PROCESSING OPTIONS IF        *
*        "$ORTPARM" OR "SORTMSG" DD STATEMENTS ARE FOUND IN   *
*        THE TIOT, AND A KEYWORD FOR SPECIFYING THE           *
*        PARAMETER STRING TO BE USED IF THE TABLE ENTRY       *
*        SATISFIES ALL OF THE CONSTRAINTS SPECIFIED ON THE    *
*        OTHER KEYWORD PARAMETERS.  THE KEYWORD PARAMETERS    *
*        THAT ARE SUPPORTED ON THE #PARM MACRO FOR            *
*        INDICATING WHEN THE TABLE ENTRY SHOULD BE SELECTED   *
*        FOR PROCESSING ARE AS FOLLOWS:                       *
*                                                             *
*               ."SID=".  THIS KEYWORD PARAMETER TELLS THE    *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                SYSTEM'S SMF ID MATCHES THE SMF ID SPECIFIED *
*                FOR THIS PARAMETER.  A GENERIC COMPARISON IS *
*                PERFORMED TO DETERMINE WHETHER THERE IS A    *
*                MATCH.  THE DEFAULT VALUE FOR THIS KEYWORD IS*
*                "====", INDICATING THAT THE ENTRY SHOULD BE  *
*                PROCESSED ON ALL SYSTEMS (I.E., THAT EXECU-  *
*                TION ON A SPECIFIC SYSTEM IS NOT A FACTOR IN *
*                SELECTING THIS TABLE ENTRY FOR PROCESSING).  *
*                                                             *
*               ."BEGIN=".  THIS KEYWORD PARAMETER TELLS THE  *
*                EXIT TO SELECT THIS TABLE ENTRY FOR          *
*                PROCESSING IF THE CURRENT TIME OF DAY IS     *
*                GREATER THAN OR EQUAL TO THIS TIME VALUE.    *
*                BEGINNING TIME VALUES ARE SPECIFIED AS ONE   *
*                THROUGH EIGHT DECIMAL DIGITS INDICATING TIME *
*                SPECIFICATIONS AS FOLLOWS:                   *
*                   BEGIN=H                                   *
*                   BEGIN=HH                                  *
*                   BEGIN=HHM                                 *
*                   BEGIN=HHMM                                *
*                   BEGIN=HHMMS                               *
*                   BEGIN=HHMMSS                              *
*                   BEGIN=HHMMSST                             *
*                   BEGIN=HHMMSSTH                            *
*                THE DEFAULT VALUE IS "0000", SPECIFYING A    *
*                BEGINNING TIME OF 00:00:00.00.               *
*                                                             *
*               ."END=".  THIS KEYWORD PARAMETER TELLS THE    *
*                EXIT TO SELECT THIS TABLE ENTRY FOR          *
*                PROCESSING IF THE CURRENT TIME OF DAY IS     *
*                STRICTLY LESS THAN THIS TIME VALUE.  ENDING  *
*                TIME VALUES ARE SPECIFIED AS ONE THROUGH     *
*                EIGHT DECIMAL DIGITS AND ARE INTERPRETED IN  *
*                THE SAME WAY AS "BEGIN=" SPECIFICATIONS.     *
*                THE DEFAULT VALUE IS "2400" SPECIFYING AN    *
*                ENDING TIME OF 24:00:00.00.                  *
*                                                             *
*               ."DOW=".  THIS KEYWORD PARAMETER TELLS THE    *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT DAY OF THE WEEK IS SPECIFIED.  THE   *
*                "DOW=" VALUE IS SPECIFIED A ONE THROUGH SEVEN*
*                DECIMAL DIGITS, WITH EACH DIGIT SPECIFYING A *
*                DAY OF THE WEEK; DIGITS 0-6 ARE VALID WITH   *
*                "0" SPECIFYING SUNDAY, AND "6" SPECIFYING    *
*                SATURDAY.  THE DEFAULT VALUE FOR THIS KEYWORD*
*                IS "0123456" INDICATING THAT THE TABLE ENTRY *
*                SHOULD BE PROCESSED ON EVERY DAY OF THE WEEK *
*                (I.E., DAY-OF-WEEK IS NOT A FACTOR IN        *
*                SELECTING THIS TABLE ENTRY FOR PROCESSING).  *
*                                                             *
*               ."JCLAS=".  THIS KEYWORD PARAMETER TELLS THE  *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT JOB'S EXECUTION CLASS MATCHES THE JOB*
*                CLASS VALUE SPECIFIED FOR THIS PARAMETER.    *
*                THE JOB CLASS VALUE, IF SPECIFIED, MUST      *
*                CONSIST OF A SINGLE CHARACTER; ENCLOSING     *
*                QUOTES ARE OPTIONAL.  A GENERIC COMPARISON IS*
*                PERFORMED TO DETERMINE WHETHER THERE IS A    *
*                MATCH.  THE DEFAULT VALUE FOR THIS PARAMETER *
*                IS "=" INDICATING THAT ALL JOB CLASSES MATCH *
*                (I.E., THAT JOB CLASS IS NOT A FACTOR IN     *
*                SELECTING THIS TABLE ENTRY FOR PROCESSING).  *
*                                                             *
*               ."JNAME=".  THIS KEYWORD PARAMETER TELLS THE  *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT JOB'S JOBNAME MATCHES THE JOBNAME    *
*                VALUE SPECIFIED FOR THIS PARAMETER.  THE     *
*                JOBNAME VALUE, IF SPECIFIED, MUST CONSIST OF *
*                ONE THROUGH EIGHT CHARACTERS; ENCLOSING      *
*                QUOTES ARE OPTIONAL.  A GENERIC COMPARISON IS*
*                PERFORMED TO DETERMINE WHETHER THERE IS A    *
*                MATCH.  THE DEFAULT VALUE FOR THIS PARAMETER *
*                IS "========" INDICATING THAT ALL JOBNAMES   *
*                MATCH (I.E., THAT JOB NAME IS NOT A FACTOR IN*
*                SELECTING THIS TABLE ENTRY FOR PROCESSING).  *
*                                                             *
*               ."SNAME=".  THIS KEYWORD PARAMETER TELLS THE  *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT JOB'S STEPNAME MATCHES THE STEPNAME  *
*                VALUE SPECIFIED FOR THIS PARAMETER.  THE     *
*                STEPNAME VALUE, IF SPECIFIED, MUST CONSIST OF*
*                ONE THROUGH EIGHT CHARACTERS; ENCLOSING      *
*                QUOTES ARE OPTIONAL.  A GENERIC COMPARISON IS*
*                PERFORMED TO DETERMINE WHETHER THERE IS A    *
*                MATCH.  THE DEFAULT VALUE FOR THIS PARAMETER *
*                IS "========" INDICATING THAT ALL STEPNAMES  *
*                MATCH (I.E., THAT STEP NAME IS NOT A FACTOR  *
*                IN SELECTING THIS TABLE ENTRY FOR            *
*                PROCESSING).                                 *
*                                                             *
*               ."PSNAME=".  THIS KEYWORD PARAMETER TELLS THE *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT JOB'S PROCSTEP NAME MATCHES THE      *
*                PROCSTEPNAME VALUE SPECIFIED FOR THIS        *
*                PARAMETER.  THE PROCSTEP NAME VALUE, IF      *
*                SPECIFIED, MUST CONSIST OF ONE THROUGH EIGHT *
*                CHARACTERS; ENCLOSING QUOTES ARE OPTIONAL.  A*
*                GENERIC COMPARISON IS PERFORMED TO DETERMINE *
*                WHETHER THERE IS A MATCH.  THE DEFAULT VALUE *
*                FOR THIS PARAMETER IS "========" INDICATING  *
*                THAT ALL PROCSTEP NAMES MATCH (I.E., THAT    *
*                PROCSTEP NAME IS NOT A FACTOR IN SELECTING   *
*                THIS TABLE ENTRY FOR PROCESSING).            *
*                                                             *
*               ."PGM=".  THIS KEYWORD PARAMETER TELLS THE    *
*                EXIT TO PROCESS THIS TABLE ENTRY IF THE      *
*                CURRENT JOBSTEP'S PROGRAM NAME MATCHES THE   *
*                PROGRAM NAME VALUE SPECIFIED FOR THIS        *
*                PARAMETER.  THE PROGRAM NAME VALUE, IF       *
*                SPECIFIED, MUST CONSIST OF ONE THROUGH EIGHT *
*                CHARACTERS; ENCLOSING QUOTES ARE OPTIONAL.  A*
*                GENERIC COMPARISON IS PERFORMED TO DETERMINE *
*                WHETHER THERE IS A MATCH.  THE DEFAULT VALUE *
*                FOR THIS PARAMETER IS "========" INDICATING  *
*                THAT ALL PROGRAM  NAMES MATCH (I.E., THAT    *
*                PROGRAM  NAME IS NOT A FACTOR IN SELECTING   *
*                THIS TABLE ENTRY FOR PROCESSING).            *
*                                                             *
*               ."PERFORM=".  THIS KEYWORD TELLS THE EXIT TO  *
*                PROCESS THIS TABLE ENTRY IF THE CURRENT JOB'S*
*                PERFORMANCE GROUP NUMBER (OUCBNPG) AT THE    *
*                TIME THE EXIT IS INVOKED MATCHES ONE OF THE  *
*                PERFORMANCE GROUP NUMBERS LISTED BY THIS     *
*                KEYWORD.  EACH PERFORMANCE GROUP SPECIFIED   *
*                MUST HAVE A VALUE BETWEEN 1 AND 999; ZERO    *
*                VALUES WILL BE IGNORED BY THE EXIT, AND      *
*                VALUES GREATER THAN 999 WILL BE FLAGGED      *
*                DURING ASSEMBLY.  THE DEFAULT VALUE FOR THIS *
*                PARAMETER IS NULL(PERFORM=,) INDICATING THAT *
*                ALL PERFORMANCE GROUP VALUES MATCH (I.E.,    *
*                THAT PERFORMANCE GROUP NUMBER IS NOT A FACTOR*
*                IN SELECTING THIS TABLE ENTRY FOR            *
*                PROCESSING).                                 *
*                                                             *
*               ."OJOB=".  THIS KEYWORD TELLS THE EXIT TO     *
*                PROCESS THIS TABLE ENTRY IF A JOB HAVING ANY *
*                OF THE JOB NAMES LISTED BY THIS KEYWORD IS   *
*                FOUND RUNNING ALONGSIDE THE THE CURRENT JOB. *
*                IF THIS KEYWORD IS USED, EACH JOBNAME        *
*                SPECIFIED MUST CONSIST OF ONE THROUGH EIGHT  *
*                CHARACTERS; ENCLOSING QUOTES ARE OPTIONAL.  A*
*                GENERIC COMPARISON IS PERFORMED TO DETERMINE *
*                WHETHER THERE IS A MATCH.  THE DEFAULT VALUE *
*                FOR THIS PARAMETER IS NULL (OJOB=,)          *
*                INDICATING THAT ALL JOB NAMES MATCH (I.E.,   *
*                THAT THE NAMES OF CORESIDENT JOBS ARE NOT A  *
*                FACTOR IN SELECTING THIS TABLE ENTRY FOR     *
*                PROCESSING).  IT SHOULD BE NOTED THAT USE OF *
*                THIS PARAMETER CAN BE COSTLY IN TERMS OF CPU *
*                TIME; THE JOB NAME FOR EACH JOB IN THE SYSTEM*
*                OTHER THAN THE CURRENT JOB MUST BE COMPARED  *
*                AGAINST EACH ENTRY IN THE LIST.  THUS THE    *
*                NUMBER OF COMPARISONS IS EQUAL TO (THE NUMBER*
*                OF ACTIVE ADDRESS SPACES IN THE SYSTEM       *
*                EXCLUDING THE CURRENT JOB) MULTIPLIED BY (THE*
*                NUMBER OF JOB NAME ENTRIES IN THE LIST).  THE*
*                MOST FREQUENT USES OF THIS PARAMETER WILL BE *
*                FOR LIMITING THE RESOURCE USE OF SORTS       *
*                RUNNING ALONGSIDE CRITICAL ONLINE            *
*                APPLICATIONS LIKE CICS, IMS, OR TSO.         *
*                                                             *
*               ."DATE=".  THIS KEYWORD TELLS THE EXIT TO     *
*                PROCESS THIS TABLE ENTRY IF TODAY'S JULIAN   *
*                DATE IS LISTED BY THIS KEYWORD.  THE DATES   *
*                SPECIFIED FOR THIS KEYWORD MUST BE IN A      *
*                FORM THAT CAN BE COMPARED WITH THE DATE      *
*                VALUE RETURNED FROM THE "TIME" MACRO;  THUS  *
*                EACH DATE VALUE MUST CONSIST OF EXACTLY      *
*                FIVE NUMERIC DIGITS REPRESENTING A DATE      *
*                IN "YYDDD" FORM.  THE MOST FREQUENT USES     *
*                OF THIS OPTION WILL BE FOR SPECIFYING        *
*                TABLE ENTRIES FOR HOLIDAYS TO SUPERCEDE      *
*                PREVIOUS TABLE ENTRIES APPLYING AT ALL       *
*                OTHER TIMES.                                 *
*                                                             *
*                                                             *
*               THE GENERIC COMPARISON USED WITH THE SID=,    *
*        JCLAS=, JNAME=, SNAME=, PSNAME=, PGM=, AND OJOB=     *
*        KEYWORDS IS MODELED AFTER THE PICTURE STRING         *
*        IMPLEMENTATION FOR THE FIND AND CHANGE COMMANDS OF   *
*        SPF BROWSE AND EDIT.  THE NAMES SPECIFIED AS VALUES  *
*        FOR THESE KEYWORDS ARE TREATED AS STRING SELECTION   *
*        MASKS.  BLANKS, ALPHABETIC CHARACTERS, AND NUMERIC   *
*        DIGITS ARE VALID AND REPRESENT THEMSELVES; IF A BLANK*
*        IS BEING USED AS A SELECTION CHARACTER IN ANY        *
*        POSITION OTHER THAN AT THE END OF THE MASK, THE      *
*        SELECTION MASK MUST BE ENCLOSED IN QUOTES.  SIX      *
*        CHARACTERS HAVE SPECIAL SIGNIFICANCE IN SELECTION    *
*        MASKS:                                               *
*                                                             *
*             #  -  NUMERIC CHARACTER                         *
*             -  -  NON-NUMERIC CHARACTER                     *
*             @  -  ALPHABETIC CHARACTER                      *
*             $  -  SPECIAL CHARACTER ($,#,@,.,-,=)           *
*             ^  -  ANY NON-BLANK CHARACTER                   *
*             =  -  ANY CHARACTER                             *
*                                                             *
*        THE SELECTION MASK IS COMPARED CHARACTER BY CHARACTER*
*        WITH THE ARGUMENT STRING (THE SMF ID, JOB CLASS, JOB *
*        NAME, STEP NAME, PROCSTEP NAME OR STEP PROGRAM NAME  *
*        BEING TESTED) MOVING FROM LEFT TO RIGHT.  THE FIRST  *
*        CHARACTER NOT SATISFYING THE SELECTION REQUIREMENTS  *
*        OF ITS CORRESPONDING MASK BYTE TERMINATES THE        *
*        COMPARE.  A SELECTION MASK SHORTER THAN ITS ARGUMENT *
*        STRING IS PROCESSED AS IF IT WERE EXTENDED ON THE    *
*        RIGHT WITH "="; A SELECTION STRING LONGER THAN ITS   *
*        ARGUMENT STRING IS CHECKED TO INSURE THAT ITS BYTES  *
*        EXTENDING BEYOND THE LENGTH OF THE ARGUMENT STRING   *
*        ALL CONTAIN "=" BEFORE AN EQUAL COMPARISON IS        *
*        ALLOWED.                                             *
*                                                             *
*                                                             *
*               THE TABLE ENTRY IS SELECTED FOR PROCESSING IF *
*        ALL OF THE TESTS DESCRIBED FOR THE SELECTION KEYWORDS*
*        ARE MET.  BECAUSE THE SELECTION IS MADE BASED ON THE *
*        RESULT OF A LOGICAL "AND" OF ALL THE INTERMEDIATE    *
*        SELECTION TEST RESULTS, THE DEFAULTS FOR THE         *
*        SELECTION TEST KEYWORDS HAVE BEEN ESTABLISHED SO THAT*
*        THE EACH TEST YIELDS A MATCH IN ALL CASES IF         *
*        OVERRIDING VALUES ARE NOT SUPPLIED.  THUS THE USER   *
*        NEEDS TO SPECIFY ONLY THOSE SELECTION KEYWORDS AND   *
*        VALUES OF INTEREST; KEYWORDS NOT SPECIFIED HAVE NO   *
*        EFFECT ON THE SELECTION PROCESS.                     *
*                                                             *
*                                                             *
*               THE KEYWORD PARAMETERS ON THE #PARM MACRO THAT*
*        SPECIFY EXIT PROCESSING OPTIONS WHICH ARE INCIDENTAL *
*        TO THE PRIMARY FUNCTION OF ASSEMBLING A PARAMETER    *
*        STRING VALUE FOR THE SORT ARE AS FOLLOWS:            *
*                                                             *
*               ."ML=".  THIS KEYWORD PARAMETER SPECIFIES A   *
*                MESSAGE LEVEL VALUE.  THIS VALUE IS PROVIDED *
*                TO ALLOW MESSAGES TO THE USER TO BE ISSUED   *
*                CONDITIONALLY WITHOUT REQUIRING USE OF A     *
*                "//$ORTML##" DD STATEMENT (SEE THE           *
*                DESCRIPTION OF THE "//$ORTML## DD" FACILITY  *
*                BELOW.)  TEN VALUES ARE SUPPORTED: ML00-ML09;*
*                EQUATES ARE PROVIDED IN $ORTPARM TO ALLOW    *
*                THESE VALUES TO BE USED AND PROVIDE A        *
*                WHERE-USED INDICATION ON THE ASSEMBLY CROSS  *
*                REFERENCE.  THE DEFAULT VALUE FOR THIS       *
*                KEYWORD IN THE MACRO IS "ML00" WHICH         *
*                INDICATES THAT THIS ENTRY DOES NOT PROVIDE A *
*                MESSAGE LEVEL VALUE OVERRIDING ANY NON-ZERO  *
*                MESSAGE LEVEL VALUE (IF ANY) OBTAINED FROM A *
*                PREVIOUSLY PROCESSED TABLE ENTRY.  THE       *
*                INITIAL DEFAULT VALUE SET BY THE EXIT BEFORE *
*                PROCESSING THE #PARM TABLE IS "ML01"         *
*                (INDICATING THAT NO MESSAGES ARE TO BE       *
*                ISSUED), OR THE "##" VALUE SPECIFIED IN THE  *
*                LAST "$ORTML##" DD STATEMENT FOUND IN THE    *
*                TIOT.                                        *
*                                                             *
*               ."$P=".  THIS KEYWORD PARAMETER SPECIFIES THE *
*                PROCESSING REQUIRED IF A "//$ORTPARM" DD     *
*                STATEMENT IS FOUND IN THE TIOT FOR THE       *
*                CURRENT JOB STEP.  THREE VALUES ARE          *
*                SUPPORTED: $P00-$P02; EQUATES ARE PROVIDED TO*
*                ALLOW THESE VALUES TO BE USED AND PROVIDE A  *
*                WHERE-USED INDICATION ON THE ASSEMBLY CROSS  *
*                REFERENCE.  THESE VALUES HAVE THE FOLLOWING  *
*                SIGNIFICANCE:                                *
*                      -$P00  THIS ENTRY DOES NOT PROVIDE A   *
*                             $ORTPARM PROCESSING VALUE       *
*                             OVERRIDING ANY NON-ZERO $ORTPARM*
*                             PROCESSING OPTION (IF ANY)      *
*                             OBTAINED FROM A PREVIOUSLY      *
*                             PROCESSED TABLE ENTRY.          *
*                      -$P01  USE OF THE "//$ORTPARM DD"      *
*                             STATEMENT IS AUTHORIZED AND ANY *
*                             SORT OPTIONS PROVIDED VIA A     *
*                             "$ORTPARM" DD STATEMENT WILL    *
*                             OVERRIDE VALUES RETURNED BY THE *
*                             EXIT.                           *
*                      -$P02  USE OF THE "//$ORTPARM DD"      *
*                             STATEMENT IS NOT AUTHORIZED; THE*
*                             TIOT WILL BE SCANNED TO LOCATE  *
*                             THESE DD STATEMENTS, AND IF ANY *
*                             "$ORTPARM" DD STATEMENT IS      *
*                             FOUND, AN ERROR MESSAGE WILL BE *
*                             ISSUED WARNING THE USER THAT THE*
*                             USE VIOLATES AN INSTALLATION    *
*                             STANDARD.  THE DATA SET IS NOT  *
*                             DYNAMICALLY UNALLOCATED.        *
*                      -$P03  USE OF THE "//$ORTPARM DD"      *
*                             STATEMENT IS NOT AUTHORIZED; THE*
*                             TIOT WILL BE SCANNED TO LOCATE  *
*                             THESE DD STATEMENTS, AND ANY DD *
*                             STATEMENTS FOUND WILL BE        *
*                             DYNAMICALLY UNALLOCATED USING   *
*                             SVC 99 (DYNALLOC) TO PREVENT    *
*                             SYNCSORT FROM RECOGNIZING THE   *
*                             FIRST SUCH DD STATEMENT AND     *
*                             PROCESSING OPTIONS FROM IT.     *
*                THE DEFAULT VALUE FOR THIS KEYWORD IN THE    *
*                MACRO IS "$P00".  THE INITIAL VALUE SET BY   *
*                THE EXIT BEFORE PROCESSING THE #PARM TABLE IS*
*                "$P01".                                      *
*                                                             *
*               ."MD=".  THIS KEYWORD PARAMETER SPECIFIES THE *
*                PROCESSING REQUIRED IF A "//SORTMSG DD"      *
*                STATEMENT IS FOUND IN THE TIOT FOR THE       *
*                CURRENT JOB STEP.  THREE VALUES ARE          *
*                SUPPORTED: MD00-MD02; EQUATES ARE PROVIDED TO*
*                ALLOW THESE VALUES TO BE USED AND PROVIDE A  *
*                WHERE-USED INDICATION ON THE ASSEMBLY CROSS  *
*                REFERENCE LISTING.  THE SIGNIFICANCE OF THESE*
*                VALUES IS AS FOLLOWS:                        *
*                      -MD00  THIS ENTRY DOES NOT PROVIDE A   *
*                             SORTMSG DD PROCESSING OPTION    *
*                             VALUE.  ANY NON-ZERO SORTMSG    *
*                             PROCESSING OPTION VALUE (IF ANY)*
*                             OBTAINED FROM A PREVIOUSLY      *
*                             PROCESSED TABLE ENTRY REMAINS IN*
*                             FORCE.                          *
*                      -MD01  THE TIOT IS NOT TO BE SCANNED   *
*                             FOR THE PRESENCE OF A           *
*                             "//SORTMSG" DD STATEMENT, AND   *
*                             THE SORT OPTION IS NOT TO BE    *
*                             ADDED TO THE PARAMETER STRING   *
*                             BEING BUILT FOR SORT.           *
*                      -MD02  THE TIOT IS TO BE SCANNED FOR   *
*                             THE PRESENCE OF A "//SORTMSG DD"*
*                             STATEMENT.  IF ONE IS FOUND, THE*
*                             SORT OPTION "MSGDD=SORTMSG" IS  *
*                             TO BE ADDED TO THE PARAMETER    *
*                             STRING BEING BUILT FOR SORT.    *
*                THE DEFAULT VALUE FOR THIS KEYWORD IN THE    *
*                MACRO IS "MD00".  THE INITIAL VALUE SET BY   *
*                THE EXIT BEFORE PROCESSING THE #PARM TABLE IS*
*                "MD02".                                      *
*                                                             *
*                                                             *
*               THE FINAL PROCESSING OPTION VALUES ARE BASED  *
*        ON A COMPLETE SCAN OF THE #PARM TABLE.  EVERY TABLE  *
*        ENTRY SATISFYING THE SELECTION CRITERIA (AND WHICH IS*
*        THEREFORE TO BE PROCESSED) IS EVALUATED, AND ALL     *
*        NON-ZERO PROCESSING OPTION VALUES ARE SAVED,         *
*        SUPERSEDING VALUES PREVIOUSLY SAVED.  A PROCESSING   *
*        OPTION VALUE OF ZERO (ML00, $P00, MD00) IS NOT       *
*        RETAINED, ALLOWING THE LAST STORED OPTION TO REMAIN  *
*        IN FORCE.  THIS ALLOWS THE TABLE TO BE CONSTRUCTED   *
*        WITH TABLE ENTRIES FOR EXCEPTIONS PLACED AT THE END; *
*        THE EXCEPTION ENTRIES NEED ONLY SPECIFY THOSE VALUES *
*        THAT CHANGE WITH THE EXCEPTION; THE PREVIOUS VALUES  *
*        REMAIN IN FORCE.                                     *
*                                                             *
*                                                             *
*               A COMMENT ABOUT THE ORDER WITH WHICH SORT     *
*        PROCESSING OPTIONS ARE DETERMINED IS IN ORDER.  THE  *
*        OPTIONS SPECIFIED VIA THE "//$ORTPARM" DD STATEMENT  *
*        HAVE THE HIGHEST AUTHORITY AND OVERRIDE CORRESPONDING*
*        VALUES PROVIDED BY THE PARMEXIT FACILITY ($ORTPARM   *
*        EXIT ROUTINE) OR THE SORT CALLER (EXEC STATEMENT     *
*        PARM FIELD OR LINK/ATTACH PARAMETER LIST); OPTIONS   *
*        SUPPLIED BY THE PARMEXIT FACILITY, IN TURN,          *
*        OVERRIDE CORRESPONDING VALUES PROVIDED BY THE SORT   *
*        CALLER'S PARAMETER LIST.  BECAUSE OPTIONS SPECIFIED  *
*        VIA THE "//$ORTPARM" DD STATEMENT CAN OVERRIDE       *
*        THOSE PROVIDED BY THE EXIT, THE EXIT PROVIDES THE    *
*        ABILITY TO DYNAMICALLY UNALLOCATE THE "//$ORTPARM"   *
*        DATA SET BEFORE RETURNING CONTROL TO SYNCSORT, IN    *
*        ORDER TO KEEP SYNCSORT FROM RECOGNIZING THE          *
*        PRESENCE OF THE DATA SET AND PROCESSING ITS CONTENTS.*
*                                                             *
*                                                             *
*               THE FINAL KEYWORD SUPPORTED ON THE #PARM      *
*        MACRO IS "PARM=":                                    *
*               ."PARM=".  THIS KEYWORD PARAMETER SPECIFIES THE
*                PARAMETER STRING VALUE TO BE RETURNED TO     *
*                SYNCSORT.  THE STRING VALUE CONSISTS OF ONE  *
*                TO ONE HUNDRED CHARACTERS; IF THE STRING     *
*                VALUE CONTAINS SPECIAL CHARACTERS, IT MUST   *
*                BE ENCLOSED IN QUOTES TO PREVENT ASSEMBLY    *
*                ERRORS ("," AND "=" ARE TWO SUCH CHARACTERS).*
*                THE DEFAULT VALUE FOR THIS KEYWORD IN THE    *
*                MACRO IS NULL (PARM=),  INDICATING THAT THIS *
*                TABLE ENTRY DOES NOT PROVIDE A PARM STRING,  *
*                AND THAT THE PARM STRING VALUE (IF ANY)      *
*                OBTAINED FROM PROCESSING A PRECEDING #PARM   *
*                TABLE ENTRY IS TO REMAIN IN FORCE.  IF THIS  *
*                KEYWORD PARAMETER IS SPECIFIED AS:           *
*                      -PARM='STRING'                         *
*                      -PARM=('STRING')                       *
*                THE "STRING" VALUE REPLACES ANY PARAMETER    *
*                ALREADY DETERMINED.  THE FACILITY TO ADD AN  *
*                OPTION TO THE END OF AN ALREADY PRESENT      *
*                STRING VALUE IS ALSO PROVIDED.  IF THIS      *
*                KEYWORD PARAMETER IS SPECIFIED AS:           *
*                      -PARM=('STRING',UPD)                   *
*                THE "STRING" VALUE IS APPENDED TO ANY STRING *
*                VALUE ALREADY ASSEMBLED.  IF A STRING VALUE  *
*                IS ALREADY PRESENT, A SEPARATING COMMA IS    *
*                INSERTED; IF THE STRING VALUE SO FAR IS NULL,*
*                THE STRING VALUE TO BE APPENDED BECOMES THE  *
*                PARAMETER STRING VALUE FOR SYNCSORT.  NO     *
*                VERIFICATION PROCESSING IS PERFORMED FOR     *
*                DUPLICATE OPTIONS WHEN UPDATING THE CURRENT  *
*                PARAMETER STRING WITH ADDITIONAL VALUES.     *
*                                                             *
*               THE EXIT CONTAINS A DIAGNOSTIC MESSAGE        *
*        FACILITY WHICH CAN BE ACTIVATED IF DIFFICULTIES ARISE*
*        IN USING THE EXIT.  EACH DIAGNOSTIC MESSAGE ISSUED BY*
*        THE EXIT IS ASSOCIATED WITH A MESSAGE LEVEL VALUE.   *
*        IF THE EXIT'S MESSAGE LEVEL IS LESS THAN THE MESSAGE *
*        LEVEL ASSOCIATED WITH THE MESSAGE, THE MESSAGE IS    *
*        SUPPRESSED; WHEN THE EXIT'S MESSAGE LEVEL IS GREATER *
*        THAN OR EQUAL TO THE MESSAGE LEVEL ASSOCIATED WITH   *
*        THE MESSAGE, THE MESSAGE IS ISSUED.  TEN MESSAGE     *
*        LEVEL VALUES ARE SUPPORTED BY THE EXIT:  ML00-ML09.  *
*        ASSEMBLER EQUATES ARE PROVIDED WITHIN THE EXIT TO    *
*        ASSIGN EACH MESSAGE LEVEL ITS NUMERIC EQUIVALENT.    *
*        MESSAGE LEVEL ML00 IS USED ONLY IN #PARM TABLE       *
*        ENTRIES TO INDICATE THAT THE TABLE ENTRY DOES NOT    *
*        CONTAIN A MESSAGE LEVEL OVERRIDE VALUE; IT IS THE    *
*        LOWEST VALUE.  MESSAGE LEVEL ML01 IS USED WHEN ONLY  *
*        EXECUTION ERROR MESSAGES ARE TO BE ISSUED AND ALL    *
*        DIAGNOSTIC MESSAGES ARE TO BE SUPPRESSED.  MESSAGE   *
*        LEVELS ML02-ML09 PROVIDE INCREASING DIAGNOSTIC       *
*        MESSAGE DETAIL.  THE FINAL VALUES MESSAGE, MSG099, IS*
*        THE ONLY MESSAGE ASSOCIATED WITH MESSAGE LEVEL ML02. *
*        AT MESSAGE LEVEL ML09, ALL DIAGNOSTIC MESSAGES ARE   *
*        ISSUED.  THE MESSAGE LEVEL VALUES IN BETWEEN ARE     *
*        ASSOCIATED WITH INCREASING LEVELS OF DETAIL.         *
*                                                             *
*                                                             *
*               THE DEFAULT MESSAGE LEVEL VALUE ASSEMBLED INTO*
*        THE EXIT IS "ML01".  ALTHOUGH THE MESSAGE LEVEL FOR  *
*        SOME MESSAGES CAN BE SPECIFIED VIA THE #PARM TABLE,  *
*        THOSE MESSAGES ISSUED BEFORE OR DURING THE PROCESSING*
*        OF THE #PARM TABLE CANNOT BE TIED TO THE PROCESSING  *
*        OF THE TABLE.  TO SPECIFY A MESSAGE LEVEL VALUE WHICH*
*        APPLIES TO THE ENTIRE EXIT'S PROCESSING, ENTER A     *
*                                                             *
*               //$ORTML##  DD  DUMMY                         *
*                                                             *
*        DD STATEMENT IN THE JCL FOR THE SORT STEP, WHERE "##"*
*        INDICATES THE DESIRED MESSAGE LEVEL VALUE.  THE EXIT *
*        SCANS THE ENTIRE TIOT AND USES THE "##" VALUE FROM   *
*        THE LAST "$ORTML##" DD ENTRY FOUND.  SCANNING THE    *
*        ENTIRE TIOT ALLOWS A "$ORTML##" DD CONTAINED IN A    *
*        CATALOGED PROCEDURE TO BE OVERRIDDEN BY THE EXECUTION*
*        JCL; A DD STATEMENT OVERRIDE WHOSE DDNAME DOES NOT   *
*        MATCH ANY DDNAME IN A CATALOGED PROCEDURE STEP IS    *
*        PLACED AFTER ALL OF THE DD ENTRIES FOR THE PROCEDURE *
*        JCL.                                                 *
*                                                             *
*                                                             *
***************************************************************
***                                                         ***
***>>>>>>>>>>>>>>C U I C   D I S C L A I M E R<<<<<<<<<<<<<<***
***                                                         ***
***************************************************************
***            THE INFORMATION OR MATERIAL BEING PROVIDED   ***
***      BY COMMERCIAL UNION INSURANCE COMPANY (CUIC),      ***
***      WHETHER IN HARD COPY OR MACHINE READABLE FORM,     ***
***      HAS BEEN DEVELOPED BY CUIC FOR ITS OWN PURPOSE     ***
***      AND FOR USE ON ITS OWN EQUIPMENT AND WITHIN ITS    ***
***      OWN DATA PROCESSING SYSTEM.  CUIC MAKES NO         ***
***      REPRESENTATIONS OR WARRANTIES WHATSOEVER WITH      ***
***      RESPECT TO THE INFORMATION OR MATERIAL FURNISHED   ***
***      HEREUNDER, EXPRESSED OR IMPLIED, INCLUDING BUT     ***
***      NOT LIMITED TO ANY REPRESENTATION OR WARRANTY OF   ***
***      MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR USE  ***
***      OR PURPOSE OR THAT THE USE OF THE INFORMATION OR   ***
***      MATERIAL WILL NOT INFRINGE ANY PATENT, COPYRIGHT,  ***
***      TRADEMARK, OR OTHER PROPRIETARY INTEREST.  YOU     ***
***      ARE, THEREFORE, ACCEPTING THIS INFORMATION OR      ***
***      MATERIAL ON AN "AS IS" BASIS AND WILL BE USING IT  ***
***      AT YOUR OWN RISK.  NEITHER CUIC NOR ANY OF ITS     ***
***      AFFILIATES SHALL BE LIABLE WITH RESPECT TO ANY     ***
***      CLAIM, ACTION, OR DEMAND BY ANY USER OR OTHER      ***
***      PARTY (INCLUDING ANY CLAIM, ACTION, OR DEMAND FOR  ***
***      CONSEQUENTIAL DAMAGES EVEN IF CUIC HAS BEEN        ***
***      ADVISED OF THE POSSIBILITY OF SUCH DAMAGES)        ***
***      ARISING FROM THE USE OF THE INFORMATION OR THE     ***
***      MATERIALS AND CONCEPTS RELATED THERETO.            ***
***      FURTHERMORE, CUIC WILL NOT MAINTAIN, CORRECT, OR   ***
***      UPDATE THIS INFORMATION OR MATERIAL IN THE         ***
***      FUTURE.                                            ***
***                                              01/26/83   ***
***************************************************************
*                                                             *
*                                                             *
*               DIRECT INQUIRIES TO THE                       *
*        AUTHOR........                                       *
*                                                             *
*                    THOMAS J. AUBREY                         *
*                    C.U. AUTOMATION SERVICES                 *
*                    COMMERCIAL UNION INSURANCE COMPANIES     *
*                    ONE BEACON STREET - THIRTEENTH FLOOR     *
*                    BOSTON, MASSACHUSETTS  02108             *
*                    TELEPHONE: (617) 725-6208                *
*                                                             *
***************************************************************
         TITLE '$ORTDATA - PROGRAM MACROS'
         MACRO
&LABEL  #PARM  &SID='====',        SYSTEM IDENTIFIER SELECTION MASK    X
               &BEGIN=0000,        STARTING TIME PARM APPLIES(HHMMSSTH)X
               &END=2400,          ENDING   TIME PARM APPLIES(HHMMSSTH)X
               &DOW=0123456,       DAYS-OF-WEEK  PARM APPLIES          X
               &ML=ML00,           MESSAGE LEVEL      OVERRIDE VALUE   X
               &$P=$P00,           $ORTPARM DD AUTH   OVERRIDE VALUE   X
               &MD=MD00,           "MSGDD=SORTMSG"    OVERRIDE VALUE   X
               &JCLAS='=',         JOB CLASS SELECTION MASK            X
               &JNAME='========',  JOB  NAME SELECTION MASK            X
               &SNAME='========',  STEP NAME SELECTION MASK            X
               &PSNAME='========', PROC NAME SELECTION MASK            X
               &PGM='========',    JOB STEP PROGRAM NAME               X
               &PERFORM=,          PERFORMANCE GROUP NUMBER LIST       X
               &OJOB=,             CORESIDENT JOB NAMES LIST           X
               &DATE=,             SELECTIVE DATE SPECIFICATIONS LIST  X
               &PARM=              SORT PARM VALUE TO SUPPLY
.**************************************************************
.*                                                            *
.*             THIS MACRO IS USED TO DEFINE EACH ENTRY        *
.*       IN THE PARAMETER TABLE USED TO BUILD THE PARM        *
.*       STRING TO BE PASSED BACK TO SYNCSORT.  THE OFFSETS   *
.*       AND LENGTHS FOR FIELDS GENERATED BY THIS MACRO       *
.*       MUST AGREE WITH THE #PARMMAP DSECT MAPPING           *
.*       CONTAINED WITHIN $ORTPARM.                           *
.*                                                            *
.**************************************************************
.*
.*
.*       DEFINE THE GLOBAL SET SYMBOLS USED BY #PARM.
         GBLA   &#PARMCT           NUMBER OF #PARM MACROS ISSUED
.*
.*
.*
.*       DEFINE THE LOCAL SET SYMBOLS USED IN #PARM.
         LCLA   &LBLZ              USED FOR SIZE IN LABEL ROUTINE
         LCLA   &LBL#              USED FOR COUNT IN LABEL ROUTINE
         LCLC   &LBLSEQ            CONVERT CT TO CHR IN LABEL ROUTINE
         LCLC   &PLBLBGN           LABEL FOR START OF ENTRY
         LCLC   &PLBLNPG           LABEL FOR START OF PGN       LIST
         LCLC   &PLBLNPE           LABEL FOR END   OF PGN       LIST
         LCLC   &PLBLOJB           LABEL FOR START OF JOB NAMES LIST
         LCLC   &PLBLOJE           LABEL FOR END   OF JOB NAMES LIST
         LCLC   &PLBLDAT           LABEL FOR START OF DATE LIST
         LCLC   &PLBLDTE           LABEL FOR END   OF DATE LIST
         LCLC   &PLBLPTX           LABEL FOR START OF PARM IN ENTRY
         LCLC   &PLBLPTE           LABEL FOR END   OF PARM IN ENTRY
         LCLC   &PLBLEND           LABEL FOR END OF ENTRY
         LCLC   &BC,&EC            BEGIN & END TIMES IN  CHARACTERS
         LCLC   &BCX,&ECX          USED TO STORE SUBSTRINGS
         LCLA   &BGNTME,&ENDTME    BEGIN & END TIMES IN 1/100 SECONDS
         LCLA   &BH,&BM,&BS,&BT    BEGIN TIME COMPONENTS
         LCLA   &EH,&EM,&ES,&ET    END   TIME COMPONENTS
         LCLA   &DWCT1             DAY-OF-WEEK OPERAND LIST INDEX
         LCLA   &DWCT2             DAY-OF-WEEK CHARACTER STRING INDEX
         LCLA   &DWIX              DAY-OF-WEEK BIT MASK INDEX
         LCLB   &D(08)             DAY-OF-WEEK BIT MASK
         LCLC   &DWCH              DAY-OF-WEEK INDIVIDUAL CHARACTER
         LCLC   &DWBITS            DAY-OF-WEEK BIT STRING
         LCLB   &F(08)             FLAG BIT MASK
         LCLC   &FBITS             FLAG BIT STRING
         LCLA   &PGIX              INDEX COUNTER FOR PGN      LIST
         LCLA   &OJIX              INDEX COUNTER FOR JOBNAMES LIST
         LCLA   &DTIX              INDEX COUNTER FOR DATE     LIST
.*
.*
.*       IF #PARM TABLE IS BEING STARTED,
.*       INITIALIZE COUNTERS; OTHERWISE, UPDATE THEM.
         AIF   ('&SYSLIST(1)' NE 'BEGIN' AND                           X
                '&SYSLIST(1)' NE 'BDW').UPDCT   IF NOT BEGINNING ENTRY
&#PARMCT SETA 0                    SET #PARM COUNTER TO ZERO
         AGO   .BYUPDCT
.*
.*
.*       INCREMENT THE #PARM INVOCATION COUNT.
.UPDCT   ANOP
&#PARMCT SETA &#PARMCT+1           INCREMENT #PARM COUNTER
.BYUPDCT ANOP
.*
.**************************************************************
.*                                                            *
.*                                                            *
.*       BUILD THE LABELS USED TO REFERENCE THE START AND     *
.*       END OF THE VARIABLE LENGTH LISTS ASSEMBLED INTO      *
.*       THE ENTRY.                                           *
.*                                                            *
.**************************************************************
.BLDLABL ANOP  ,
&LBL#    SETA  &#PARMCT            SEQUENCE NUMBER FOR THE LABEL
&LBLSEQ  SETC  '&LBL#'             CONVERT NUMBER TO A CHARACTER STR
.BLDLBL1 AIF   (K'&LBLSEQ GE 3).BLDLBL2
&LBLSEQ  SETC  '0'.'&LBLSEQ'       ADD A LEADING ZERO
         AGO   .BLDLBL1            LOOP UNTIL IT'S LARGE ENOUGH
.BLDLBL2 ANOP  ,                   COMPLETE LABEL CONSTRUCTION
&LBLZ    SETA  K'&LBLSEQ           GET THE NUMBER OF DIGITS
&LBLZ    SETA  07-&LBLZ            GET THE SIZE OF THE LABEL HEADER
&PLBLBGN SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'        DEVELOP LABEL
&PLBLNPG SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'N'    DEVELOP LABEL
&PLBLNPE SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'V'    DEVELOP LABEL
&PLBLOJB SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'O'    DEVELOP LABEL
&PLBLOJE SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'W'    DEVELOP LABEL
&PLBLDAT SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'D'    DEVELOP LABEL
&PLBLDTE SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'X'    DEVELOP LABEL
&PLBLPTX SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'P'    DEVELOP LABEL
&PLBLPTE SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'Y'    DEVELOP LABEL
&PLBLEND SETC  '#PRM'(1,&LBLZ).'&LBLSEQ'.'Z'    DEVELOP LABEL
.**************************************************************
.*                                                            *
.*                                                            *
.*       TRANSFORM THE BEGINNING TIME INTO ITS                *
.*       HH, MM, SS, AND TH COMPONENTS, AND CONVERT           *
.*       THE TIME TO 1/100 SECONDS.                           *
.*                                                            *
.**************************************************************
.BGNTIME ANOP  ,
&BC      SETC  '&BEGIN(1)'.'000000'             APPEND ZEROS
.BGNT1   ANOP   ,
         AIF   (K'&BC GE 8).BGNT2
&BC      SETC  '0'.'&BC'
         AGO   .BGNT1
.BGNT2   ANOP   ,
&BC      SETC  '&BC'(01,08)
&BCX     SETC  '&BC'(01,02)          HH
&BH      SETA  &BCX
&BCX     SETC  '&BC'(03,02)          MM
&BM      SETA  &BCX
&BCX     SETC  '&BC'(05,02)          SS
&BS      SETA  &BCX
&BCX     SETC  '&BC'(07,02)          TH
&BT      SETA  &BCX
&BGNTME  SETA  ((((&BH*60)+&BM)*60+&BS)*100+&BT)
.**************************************************************
.*                                                            *
.*                                                            *
.*       TRANSFORM THE ENDING TIME INTO ITS                   *
.*       HH, MM, SS, AND TH COMPONENTS, AND CONVERT           *
.*       THE TIME TO 1/100 SECONDS.                           *
.*                                                            *
.**************************************************************
.ENDTIME ANOP  ,
&EC      SETC  '&END(1)'.'000000'             APPEND ZEROS
.ENDT1   ANOP   ,
         AIF   (K'&EC GE 8).ENDT2
&EC      SETC  '0'.'&EC'
         AGO   .ENDT1
.ENDT2   ANOP   ,
&EC      SETC  '&EC'(01,08)
&ECX     SETC  '&EC'(01,02)          HH
&EH      SETA  &ECX
&ECX     SETC  '&EC'(03,02)          MM
&EM      SETA  &ECX
&ECX     SETC  '&EC'(05,02)          SS
&ES      SETA  &ECX
&ECX     SETC  '&EC'(07,02)          TH
&ET      SETA  &ECX
&ENDTME  SETA  ((((&EH*60)+&EM)*60+&ES)*100+&ET)
.**************************************************************
.*                                                            *
.*                                                            *
.*       DEVELOP THE DAY-OF-WEEK BIT MASK.                    *
.*                                                            *
.**************************************************************
.DOWBITS ANOP  ,
&DWIX    SETA  0              INITIALIZE INDEX VARIABLE
&DWCT1   SETA  0              INITIALIZE CHARACTER COUNTER
.DWLP1   ANOP   ,             START OF OPERAND SUBLIST PROCESSING
&DWCT1   SETA  &DWCT1+1       INCREMENT OPERAND SUBLIST COUNTER
         AIF   (&DWCT1 GT N'&DOW).DWLP9  IF LIST EXHAUSTED
&DWCT2   SETA  0              INITIALIZE CHARACTER COUNTER
.DWLP2   ANOP   ,             START OF JOB NAMES DEFINITION LOOP
&DWCT2   SETA  &DWCT2+1       INCREMENT CHARACTER COUNTER
         AIF   (&DWCT2 GT K'&DOW(&DWCT1)).DWLP4 IF STRING EXHAUSTED
&DWCH    SETC  '&DOW(&DWCT1)'(&DWCT2,1)         INDIVIDUAL CHARACTER
         AIF   ('&DWCH' GE '0' AND '&DWCH' LE '6').DWLP3
         MNOTE 08,'#PARM ERROR - "DOW" CHARACTER "&DWCH" IS INVALID,   X
               MUST BE A DIGIT BETWEEN 0 AND 6'
         AGO   .DWLP2         LOOP FOR NEXT CHARACTER
.DWLP3   ANOP   ,             DAY-OF-WEEK CHARACTER IS VALID
&DWIX    SETA  &DWCH+1        SET INDEX VALUE
&D(&DWIX) SETB 1              SET DAY-OF-WEEK
         AGO   .DWLP2         LOOP FOR NEXT CHARACTER
.DWLP4   ANOP   ,             END OF CHARACTER STRING
         AGO   .DWLP1         LOOP FOR SUB-OPERAND
.DWLP9   ANOP   ,             END   OF DAY-OF-WEEK DEFINITION LOOP
&DWBITS  SETC  '&D(1)&D(2)&D(3)&D(4)&D(5)&D(6)&D(7)&D(8)'
.**************************************************************
.*                                                            *
.*       DEVELOP THE SETTING OF FLAG BIT 4.                   *
.*       FLAG BIT 4 SET ON INDICATES THAT THE PARM STRING     *
.*       VALUE IN THE TABLE ENTRY IS TO BE ADDED TO ANY       *
.*       PARM VALUE ALREADY SAVED RATHER THAN REPLACING IT.   *
.*                                                            *
.**************************************************************
.FBIT4   ANOP  ,
&F(4)    SETB  0               INIT TO ZERO
         AIF   ('&PARM(2)' EQ 'UPD').FBIT41
         AGO   .FBIT4Z         IF NOT A MATCH
.FBIT41  ANOP  ,               SET BIT TO 1
&F(4)    SETB  1               SET TO 1
.FBIT4Z  ANOP  ,               END OF FLAG BIT 4 PROCESSING
.**************************************************************
.*                                                            *
.*       DEVELOP THE FLAG BIT STRING.                         *
.*                                                            *
.**************************************************************
.FLGBITS ANOP  ,
&FBITS   SETC  '&F(1)&F(2)&F(3)&F(4)&F(5)&F(6)&F(7)&F(8)'
.**************************************************************
.*                                                            *
.*                                                            *
.*       GENERATE THE PARM TABLE ENTRY.                       *
.*                                                            *
.*                                                            *
.**************************************************************
.GENPARM ANOP  ,
.*
.*
.*
.*       TEST FOR BEGINNING OR ENDING TABLE ENTRIES.
         AIF   ('&SYSLIST(1)' EQ 'BEGIN' OR                            X
                '&SYSLIST(1)' EQ 'BDW').GENBDW  IF BEGINNING ENTRY
         AIF   ('&SYSLIST(1)' EQ 'END').GENEND  IF TERMINAL ENTRY
.*
.*
.*
.*       DEFINE THE TABLE ENTRY LABEL
         AIF   ('&LABEL' EQ '' OR '&LABEL' EQ '&PLBLBGN').NOLBL2
&LABEL   DS    0C             START OF PARM TABLE ENTRY
.NOLBL2  ANOP   ,
&PLBLBGN DS    0C             START OF PARM TABLE ENTRY
.*
.*
.*
.*       DEFINE THE VLR TABLE ENTRY HEADER
         DC    YL2(&PLBLEND-*,0)             VLR HEADER
.*
.*
.*
.*       DEFINE THE SYSTEM IDENTIFIER
         AIF   ('&SID(1)'(1,1) EQ '''').SIDQ    IF QUOTES THERE
.SIDNQ   ANOP   ,
         DC    CL4'&SID(1)'   SYSTEM IDENTIFIER
         AGO   .BYSID         END OF SID GENERATION
.SIDQ    ANOP   ,
         DC    CL4&SID(1)     SYSTEM IDENTIFIER
.BYSID   ANOP   ,
.*
.*
.*
.*       DEFINE THE BEGINNING TIME
         DC    AL4((((60*&BH)+&BM)*60+&BS)*100+&BT)    BEGIN TIME
.*
.*
.*
.*       DEFINE THE ENDING TIME
         DC    AL4((((60*&EH)+&EM)*60+&ES)*100+&ET)    END   TIME
.*
.*
.*
.*       DEFINE THE DAY-OF-WEEK BIT MASK
         DC    BL1'&DWBITS'   DAY-OF-WEEK BIT MASK
.*
.*
.*
.*       DEFINE THE MESSAGE LEVEL
         DC    AL1(&ML(1))    MESSAGE PROCESSING LEVEL
.*
.*
.*
.*       DEFINE THE $ORTPARM DD AUTHORIZATION VALUE
         DC    AL1(&$P(1))    $ORTPARM DD AUTHORIZATION VALUE
.*
.*
.*
.*       DEFINE THE "MSGDD=SORTMSG" PROCESSING VALUE
         DC    AL1(&MD(1))    "MSGDD=SORTMSG" PROCESSING VALUE
.*
.*
.*
.*       DEFINE THE #PARM TABLE ENTRY FLAG BYTE
         DC    BL1'&FBITS'    FLAG BYTE
.*
.*
.*
.*       DEFINE THE JOB CLASS
         AIF   ('&JCLAS(1)'(1,1) EQ '''').JCLQ    IF QUOTES THERE
.JCLNQ   ANOP   ,
         DC    CL1'&JCLAS(1)' JOB CLASS
         AGO   .BYJCL         END OF JOB NAME GENERATION
.JCLQ    ANOP   ,
         DC    CL1&JCLAS(1)   JOB CLASS
.BYJCL   ANOP   ,
.*
.*
.*
.*       DEFINE THE JOB NAME
         AIF   ('&JNAME(1)'(1,1) EQ '''').JNMQ    IF QUOTES THERE
.JNMNQ   ANOP   ,
         DC    CL8'&JNAME(1)' JOB NAME
         AGO   .BYJNM         END OF JOB NAME GENERATION
.JNMQ    ANOP   ,
         DC    CL8&JNAME(1)   JOB NAME
.BYJNM   ANOP   ,
.*
.*
.*
.*       DEFINE THE STEP NAME
         AIF   ('&SNAME(1)'(1,1) EQ '''').SNMQ    IF QUOTES THERE
.SNMNQ   ANOP   ,
         DC    CL8'&SNAME(1)' STEP NAME
         AGO   .BYSNM         END OF STEP NAME GENERATION
.SNMQ    ANOP   ,
         DC    CL8&SNAME(1)   STEP NAME
.BYSNM   ANOP   ,
.*
.*
.*
.*       DEFINE THE PROC STEP NAME
         AIF   ('&PSNAME(1)'(1,1) EQ '''').PNMQ   IF QUOTES THERE
.PNMNQ   ANOP   ,
         DC    CL8'&PSNAME(1)' PROC STEP NAME
         AGO   .BYPNM         END OF PROC STEP NAME GENERATION
.PNMQ    ANOP   ,
         DC    CL8&PSNAME(1)  PROC STEP NAME
.BYPNM   ANOP   ,
.*
.*
.*
.*       DEFINE THE STEP PROGRAM NAME.
         AIF   ('&PGM(1)'(1,1) EQ '''').PGMQ      IF QUOTES THERE
.PGMNQ   ANOP   ,
         DC    CL8'&PGM(1)'   STEP PROGRAM NAME
         AGO   .BYPGM         END OF STEP PROGRAM NAME GENERATION
.PGMQ    ANOP   ,
         DC    CL8&PGM(1)     STEP PROGRAM NAME
.BYPGM   ANOP   ,
.*
.*
.*
.*       DEFINE THE OFFSETS TO EACH LIST
         DC    YL2((&PLBLNPG-2-&PLBLBGN)*((&PLBLNPE-&PLBLNPG)/(&PLBLNPEX
               -&PLBLNPG)))    OFFSET TO PERFORM GROUP NUMBER LIST LN
         DC    YL2((&PLBLOJB-2-&PLBLBGN)*((&PLBLOJE-&PLBLOJB)/(&PLBLOJEX
               -&PLBLOJB)))    OFFSET TO JOB NAMES LIST LENGTH
         DC    YL2((&PLBLDAT-2-&PLBLBGN)*((&PLBLDTE-&PLBLDAT)/(&PLBLDTEX
               -&PLBLDAT)))    OFFSET TO DATE LIST LENGTH
         DC    YL2((&PLBLPTX-2-&PLBLBGN)*((&PLBLPTE-&PLBLPTX)/(&PLBLPTEX
               -&PLBLPTX)))    OFFSET TO PARM STRING LENGTH
.*
.*
.*
.*       DEFINE THE PERFORMANCE GROUP NUMBER LIST LENGTH
         DC    YL2(&PLBLNPE-&PLBLNPG)   PGN LIST LENGTH
.*
.*
.*
.*       DEFINE THE PERFORMANCE GROUP NUMBER LIST
&PLBLNPG DS   0C              START OF PGN LIST
&PGIX    SETA  0              INITIALIZE INDEX VARIABLE
.PGLP1   ANOP   ,             START OF PGN LIST DEFINITION LOOP
&PGIX    SETA  &PGIX+1        INCREMENT INDEX VALUE
         AIF   (&PGIX GT N'&PERFORM).PGLP9      IF LIST EXHAUSTED
         AIF   ('&PERFORM(&PGIX)' EQ '').PGLP1  IF ELEMENT NULL
         AIF   ('&PERFORM(&PGIX)'(1,1) EQ '''').PGLPQ
.PGLPNQ  ANOP   ,             LIST ELEMENT NOT IN QUOTES
         DC    YL2(&PERFORM(&PGIX))  PGN
         AGO   .PGLP1         LOOP FOR NEXT LIST ELEMENT
.PGLPQ   ANOP   ,             LIST ELEMENT IS IN QUOTES
         DC    HL2&PERFORM(&PGIX)    PGN
         AGO   .PGLP1         LOOP FOR NEXT LIST ELEMENT
.PGLP9   ANOP   ,             END   OF PGN LIST DEFINITION LOOP
&PLBLNPE DS   0C              END   OF PGN LIST
.*
.*
.*
.*       DEFINE THE CORESIDENT JOB NAMES LIST LENGTH
         DC    YL2(&PLBLOJE-&PLBLOJB)   JOB NAMES LIST LENGTH
.*
.*
.*
.*       DEFINE THE CORESIDENT JOB NAMES LIST
&PLBLOJB DS   0C              START OF CORESIDENT JOB NAMES LIST
&OJIX    SETA  0              INITIALIZE INDEX VARIABLE
.OJLP1   ANOP   ,             START OF JOB NAMES DEFINITION LOOP
&OJIX    SETA  &OJIX+1        INCREMENT INDEX VALUE
         AIF   (&OJIX GT N'&OJOB).OJLP9     IF LIST EXHAUSTED
         AIF   ('&OJOB(&OJIX)' EQ '').OJLP1 IF ELEMENT NULL
         AIF   ('&OJOB(&OJIX)'(1,1) EQ '''').OJLPQ
.OJLPNQ  ANOP   ,             LIST ELEMENT NOT IN QUOTES
         DC    CL8'&OJOB(&OJIX)'   JOB NAME
         AGO   .OJLP1         LOOP FOR NEXT LIST ELEMENT
.OJLPQ   ANOP   ,             LIST ELEMENT IS IN QUOTES
         DC    CL8&OJOB(&OJIX)     JOB NAME
         AGO   .OJLP1         LOOP FOR NEXT LIST ELEMENT
.OJLP9   ANOP   ,             END   OF JOB NAMES DEFINITION LOOP
&PLBLOJE DS   0C              END   OF CORESIDENT JOB NAMES LIST
.*
.*
.*
.*       DEFINE THE APPLICABLE DATES LIST LENGTH
         DC    YL2(&PLBLDTE-&PLBLDAT)   DATE LIST LENGTH
.*
.*
.*
.*       DEFINE THE APPLICABLE DATES LIST
&PLBLDAT DS   0C              START OF APPLICABLE DATES LIST
&DTIX    SETA  0              INITIALIZE INDEX VARIABLE
.DTLP1   ANOP   ,             START OF DATE LIST DEFINITION LOOP
&DTIX    SETA  &DTIX+1        INCREMENT INDEX VALUE
         AIF   (&DTIX GT N'&DATE).DTLP9     IF LIST EXHAUSTED
         AIF   ('&DATE(&DTIX)' EQ '').DTLP1 IF ELEMENT NULL
         AIF   ('&DATE(&DTIX)'(1,1) EQ '''').DTLPQ
.DTLPNQ  ANOP   ,             LIST ELEMENT NOT IN QUOTES
         DC    PL4'&DATE(&DTIX)'     DATE
         AGO   .DTLP1         LOOP FOR NEXT LIST ELEMENT
.DTLPQ   ANOP   ,             LIST ELEMENT IS IN QUOTES
         DC    PL4&DATE(&DTIX)       DATE
         AGO   .DTLP1         LOOP FOR NEXT LIST ELEMENT
.DTLP9   ANOP   ,             END   OF DATE LIST DEFINITION LOOP
&PLBLDTE DS   0C              END   OF APPLICABLE DATES LIST
.*
.*
.*
.*       DEFINE THE PARM STRING TEXT LENGTH
         DC    YL2(&PLBLPTE-&PLBLPTX)   PARM TEXT LENGTH
.*
.*
.*
.*       DEFINE THE PARM STRING TEXT
&PLBLPTX DS   0C              START OF PARM TEXT GENERATION
         AIF   (T'&PARM(1) EQ 'O').BYTXT        IF MISSING
         AIF   ('&PARM(1)'(1,1) EQ '''').TXTQ   IF QUOTES THERE
.TXTNQ   ANOP   ,
         DC    C'&PARM(1)'    PARM TEXT
         AGO   .BYTXT         END OF PARM TEXT GENERATION
.TXTQ    ANOP   ,
         DC    C&PARM(1)      PARM TEXT
.BYTXT   ANOP   ,
&PLBLPTE DS   0C              END OF PARM TEXT
.*
.*
.*
.*       DEFINE THE END-OF-ENTRY LABEL
&PLBLEND DS    0C             END OF PARM TABLE ENTRY
         SPACE 2
         MEXIT
.**************************************************************
.*                                                            *
.*       GENERATE THE PARM TABLE BLOCK DESCRIPTOR WORD (BDW). *
.*                                                            *
.**************************************************************
.GENBDW  ANOP  ,
         DS   0D                   START OF PARAMETER TABLE
         AIF   ('&LABEL' EQ '' OR '&LABEL' EQ '&PLBLBGN').NOLBL1
&LABEL   DS   0C
.NOLBL1  ANOP   ,
&PLBLBGN DS   0C
         DC    Y(&SYSLIST(2)-*,0)  BDW FOR PARM TABLE
         MEXIT
.**************************************************************
.*                                                            *
.*       GENERATE THE PARM TABLE TERMINAL ENTRY               *
.*                                                            *
.**************************************************************
.GENEND  ANOP  ,
         AIF   ('&LABEL' EQ '' OR '&LABEL' EQ '&PLBLBGN').NOLBL3
&LABEL   DS   0C
.NOLBL3  ANOP   ,
&PLBLBGN DS   0C
         DC    AL4(0)              END OF #PARM TABLE
         MEND
         TITLE '$ORTDATA - MODULE EQUATES'
$ORTDATA START 000000
*
*
*        EQUATES FOR MESSAGE LEVEL
ML00     EQU   00             MESSAGE LEVEL VALUE NOT PROVIDED
ML01     EQU   01             NO MESSAGES ARE TO BE ISSUED
ML02     EQU   02
ML03     EQU   03
ML04     EQU   04
ML05     EQU   05
ML06     EQU   06
ML07     EQU   07
ML08     EQU   08
ML09     EQU   09
         SPACE 3
*
*
*        EQUATES FOR $ORTPARM DDNAME USE
$P00     EQU   00             $ORTPARM DD AUTHORIZATION NOT PROVIDED
$P01     EQU   01             $ORTPARM DD USE IS AUTHORIZED
$P02     EQU   02             $ORTPARM DD USE NOT AUTHORIZED (ERR MSG)
$P03     EQU   03             $ORTPARM DD USE NOT AUTHORIZED (UNALLOC)
         SPACE 3
*
*
*        EQUATES FOR "MSGDD=SORTMSG" PROCESSING OPTIONS
MD00     EQU   00             "MSGDD=SORTMSD" OPTION NOT PROVIDED
MD01     EQU   01             "MSGDD=SORTMSG" IS NOT TO BE PROCESSED
MD02     EQU   02             "MSGDD=SORTMSG" IS TO BE PROCESSED
         TITLE '$ORTDATA - PARM TABLE FOR SYNCSORT'
***************************************************************
*                                                             *
*        DEFINE THE BLOCK DESCRIPTOR WORD FOR THE TABLE       *
*        TO MAKE $ORTDATA APPEAR LIKE A BLOCK IN A VLR FILE.  *
*                                                             *
***************************************************************
#PRM000 #PARM  BEGIN,#PRM999             START OF PARAMETER TABLE
         SPACE 3
         COPY  $ORTABLE                  INCLUDE USER'S TABLE ENTRIES
         SPACE 5
***************************************************************
*        DEFINE THE END OF THE PARAMETER TABLE.               *
***************************************************************
#PRM999 #PARM  END                     GENERATE LAST ENTRY
         SPACE 5
         END   $ORTDATA
