MODB     TITLE 'UICC MODULE PACKER - LOAD MODULE DIRECTORY READ'
*
*   THIS PROGRAM BUILDS A FILE FROM THE CONTENTS OF THE LOAD MODULE
*   DIRECTORY.  THIS FILE IS USED BY THE PACK LIST GENERATING PROGRAM.
*
* INPUT: THE MODULE SHOULD BE ALLOCATED AS A PDS MEMBER TO THE
* DDNAME 'MODULE', IE
*   //MODULE DD DSN=SYS1.LINKLIB(PROGRAM),DISP=SHR
*
* RESTRICTIONS: PROPERLY THE MODULE SHOULD NOT BE SCATTER LOADED OR
* OVERLAYED. THIS PROGRAM DOES NOT CHECK FOR SUCH THINGS, BUT THE
* RESULTING ANALYSIS OF THE DATA WOULD PROVE CONFUSING. ONLY
* CSECTS ARE MAPPED, SO COMMON BLOCKS, PRIVATE CODE, AND ALTERNATE
* ENTRY POINTS WILL NOT SHOW UP (IE, THEY WILL LEAVE GAPS IN THE
* MAP OF SEEMINGLY UNALLOCATED STORAGE).
*
* BIBLIOGRAPY: FIGURE 39, 'CESD RECORD (LOAD MODULE)' IN SY26-3814
* OS/VS LOADER LOGIC.
*
*   THE FORMAT OF THE OUTPUT FILE IS AS FOLLOWS:
*
*   RECFM=FB,LRECL=16,BLKSIZE=3664
*
*   THE RECORD CONTENTS ARE AS FOLLOWS:
*
*   RECORD 1:
*
*      **********************************************
*      * NUMBER OF * MOD LOW  * MOD HIGH * UNUSED   *
*      *  ENTIRES  * ADDRESS  * ADDRESS  *          *
*      **********************************************
*
*   ALL SUBSEQUENT RECORDS (=NUMBER OF ENTRIES)
*
*      **********************************************
*      *   CSECT NAME         * STARTING * CSECT    *
*      *                      * ADDRESS  * LENGTH   *
*      **********************************************
*
*   THIS PROGRAM WAS WRITTEN BY:
*
*                 BARRY SCHRAGER
*                 COMPUTER CENTER
*                 UNIVERSITY OF ILLINOIS AT CHICAGO CIRCLE
*                 BOX 4348
*                 CHICAGO, ILLINOIS 60680
*
*                 (312) 996-2478
*
*    WITH A LOT OF HELP FROM HOWARD GILBERT OF THE YALE
*    COMPUTATION CENTER, NEW HAVEN, CT.
*
*                 VERSION 1 DATED 7/18/77
*
MODBUILD CSECT
ESDREC   DSECT
ID       DS    X
         DS    5X
COUNT    DS    H
CESD1    DS    0H
         SPACE 1
CESD     DSECT
CESDNAME DS    CL8
CESDTYPE DS    X
CESDADDR DS    XL3
         DS    X
CESDLEN  DS    XL3
DIRENT   DSECT   DIRECTORY ENTRY
DIRNAME  DS    CL8  CSECT NAME
DIRSTART DS    A   STARTING ADDRESS
DIRLNGTH DS    A   CSECT LENGTH
DIRSIZE  EQU   *-DIRENT   LENGTH OF DIRECTORY ENTRY
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
MODBUILD CSECT
         SAVE  (14,12),,*  ENTER
         LR    R12,R15  SET UP ADDRESSING
         USING MODBUILD,R12
         LA    R2,SAVEAREA   CHAIN SAVE AREAS
         ST    R2,8(,R13)
         ST    R13,4(,R2)
         LR    R13,R2
         OPEN  (MODULE,(INPUT))
         LTR   R15,R15  TEST FOR GOOD OPEN
         BZ    *+6  OK, CONTINUE
         DC    H'0'  ABEND IF NOT
         GETMAIN VU,LA=GMAINR,A=STORAGE,BNDRY=PAGE
         L     R3,STORAGE  POINT TO TABLE START
         LR    R15,R3  CALCULATE END OF TABLE
         A     R15,STORSIZE
         ST    R15,STOREND  AND SAVE FOR LATER
         USING DIRENT,R3  ADDRESS IT
*
*  FILL THE DIRECTORY TABLE FROM THE LOAD MODULE DIRECTORY
*
RLOOP    GET   MODULE                   GET THE NEXT RECORD
         SR    R15,R15                  ZERO R15
         USING ESDREC,R1                ADDRESS ESDREC
         CLI   ID,X'20' CHECK FOR ESD ID.
         BNE   EFLOOP                   NOPE, DONE WITH ESDS
         LA    R4,16                    LOOP THRU ESD ENTRIES
         LH    R5,COUNT                 GET COUNT
         SR    R5,R4
         LA    R5,CESD1(R5)             INCREMENT
         LA    R6,CESD1
         USING CESD,R6                  ADDRESS CESD ENTRY
FLOOP    TM    CESDTYPE,X'07'           CHECK FOR PROPER TYPE
         BNZ   NXTCESD                  NOPE
         MVC   DIRNAME,CESDNAME         MOVE NAME TO STORAGE AREA
         ICM   R15,7,CESDADDR           AND BEGINNING ADDRESS
         ST    R15,DIRSTART             TO STORAGE AREA
         ICM   R15,7,CESDLEN            AND LENGTH
         ST    R15,DIRLNGTH             TO STORAGE AREA
         LA    R3,DIRSIZE(R3)           AND INCREMENT TO NEXT
         C     R3,STOREND               OUT OF STORAGE?
         BNL   ERRSIZE                  YUP, TOO BAD TRY BIGGER REGION
NXTCESD  BXLE  R6,R4,FLOOP              LOOP TO NEXT ENTRY
         B     RLOOP                    GET NEXT CARD
         SPACE 2
EFLOOP   L     R4,STOREND   GET THE END OF THE STORAGE
         SR    R4,R3  CALCULATE UNUSED SPACE
         FREEMAIN RU,LV=(R4),A=(R3)  FREE IT
         ST    R3,STOREND  RESET END OF STORAGE
         S     R3,STORAGE  CALCULATE TABLE LENGTH
         C     R3,=A(DIRSIZE)  CHECK FOR ZERO OR 1 ENTRY
         BNH   ERRZERO  ERROR IF SO
         ST    R3,STORSIZE  AND SAVE STORAGE SIZE
         DROP  R3,R1,R6   DROP REGISTERS FROM FIRST LOOP
*
*  SORT THE DIRECTORY BY MODULE START
*
         LA    R0,DIRSIZE   SET UP OUTER LOOP
         SLA   R0,1  MULTIPLY ENTRY SIZE BY 2
         L     R1,STOREND  GET N+1ST ENTRY ADDR
         SR    R1,R0  WANT N-1ST ENTRY ADDR
         SRA   R0,1  GET ENTRY SIZE BACK
         LNR   R2,R0  GET NEG ENTRY SIZE IN R2
         L     R3,STORAGE  GET DIRECTORY STARTG
         SR    R3,R0  GET -1ST ENTRY
OLOOP    L     R5,STORAGE   SET UP INNER LOOP
         LA    R6,DIRSIZE   GET ENTRY SIZE
         LR    R7,R1  SET UP INNER LOOP LIMIT
ILOOP    LA    R8,DIRSIZE(,R5)  GET N+1ST ELEMENT
         L     R0,DIRSTART-DIRENT(R5)  GET NTH ENTRY PT
         C     R0,DIRSTART-DIRENT(R8)  COMPARE TO N+1ST ENTRY PT
         BL    EILOOP  IF LOW, CONTINUE
         MVC   WORK,0(R5)  SWAP THE ENTRIES
         MVC   0(L'WORK,R5),0(R8)
         MVC   0(L'WORK,R8),WORK
EILOOP   BXLE  R5,R6,ILOOP   END INNER LOOP
         BXH   R1,R2,OLOOP  END OUTER LOOP
*
* CALCULATE NUMBER OF ENTRIES, START AND END OF MODULE
*
         XC    WORK,WORK  USE THE WORK AREA FOR STORAGE
         L     R1,STORSIZE  GET THE TABLE LENGTH
         SR    R0,R0  CLEAR R0 FOR DIVIDE
         LA    R15,DIRSIZE  GET THE ENTRY SIZE
         DR    R0,R15   GET THE NUMBER OF ENTRIES
         ST    R1,WORK  PUT INTO WORK STRING
         L     R1,STORAGE  GET THE FIRST ENTRY ADDRESS
         L     R0,DIRSTART-DIRENT(R1)  GET THE FIRST CSECT START
         ST    R0,WORK+4   PUT INTO WORK AREA
         L     R1,STOREND  GET THE ADDR OF THE N+1 ST ENTRY
         SR    R1,R15   GET THE NTH ENTRY ADDR
         L     R0,DIRSTART-DIRENT(R1)  GET THE CSECT START
         A     R0,DIRLNGTH-DIRENT(R1)  ADD IN THE CSECT LENGTH
         ST    R0,WORK+8  AND PUT INTO WORK AREA
*
*  OPEN UP THE OUTPUT FILE AND WRITE OUT THE DIRECTORY
*  THE FIRST RECORD IS THE NUMBER OF ENTRIES, THE
*  MODULE START AND END.  THE REST ARE THE DIRECTORY
*  ENTRIES SORTED BY CSECT START.
*
         OPEN  (DIRECT,(OUTPUT))
         LTR   R15,R15  TEST FOR GOOD OPEN
         BZ    *+6  OK, CONTINUE
         DC    H'0'  ABEND OF NON-ZERO
         PUT   DIRECT,WORK  WRITE OUT STATS
         L     R3,STORAGE  SET UP FOR LOOP TO WRITE DIRECTORY
         LA    R4,DIRSIZE  ENTRY SIZE
         L     R5,STOREND
         SR    R5,R4  LAST ENTRY ADDRESS
WLOOP    PUT   DIRECT,(R3)  WRITE OUT DIRECTORY ENTRY
         BXLE  R3,R4,WLOOP   LOOP
         CLOSE (DIRECT)
         L     R3,STORSIZE  GET STORAGE SIZE
         FREEMAIN RU,LV=(R3),A=STORAGE
         L     R13,4(,R13)  GET OLD SAVE AREA
         RETURN (14,12),RC=0
ERRSIZE  WTO   'REGION TOO SMALL - DIRECTORY BUILD FAILURE',ROUTCDE=11
         L     R13,4(,R13)  GET OLD SAVE AREA
         RETURN (14,12),RC=12  RETURN
         SPACE 3
ERRZERO  WTO   'ONLY 1 CSECT IN LOAD MODULE - PACKING IMPOSSIBLE',     X
               ROUTCDE=11
         L     R13,4(,R13)  DECHAIN SAVE AREA
         RETURN (14,12),RC=12
         SPACE 10
SAVEAREA DS    9D
WORK     DS    CL(DIRSIZE)  WORK AREA
GMAINR   DC    A(4096,409600)  STORAGE GETMAIN RANGE
STORAGE  DC    A(0)  STORAGE AREA START
STORSIZE DC    A(0)  SIZE OF STORAGE AREA
STOREND  DC    A(0)  FIRST BYTE NOT IN STORAGE AREA
DIRECT   DCB   DDNAME=DIRECT,BLKSIZE=3664,LRECL=DIRSIZE,DEVD=DA,       X
               DSORG=PS,MACRF=PM,RECFM=FB
MODULE   DCB   DDNAME=MODULE,DEVD=DA,DSORG=PS,MACRF=GL
         END MODBUILD
