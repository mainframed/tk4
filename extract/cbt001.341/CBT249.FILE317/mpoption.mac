                 MULTIPROCESSING CONSIDERATIONS

            (WRITTEN BY HOWARD GILBERT, YALE UNIV.)




   BOTH PROCESSORS IN AN MP OR AP CONFIGURATION ARE ALWAYS TIMING
SOMETHING. THIS APPEARS TO BE DESIGNED TO INSURE THAT IF ONE PROCESSOR
IS STOPPED, THE OTHER WILL ALWAYS PICK UP THE TIMING FUNCTION
AUTOMATICALLY. IN MANY CASES, HOWEVER, THIS ENSURES THAT TIMER
INTERRUPTS WILL BE RECOGNIZED SIMULTANEOUSLY ON BOTH CPUS; BOTH WILL
ENTER THE EXTERNAL FIRST AND TIMER SECOND LEVEL INTERRUPT HANDLERS
SIMULTANEOUSLY AND RACE FOR THE CS INSTRUCTION WHICH GIVES THEM THE
DISPATCHER LOCK. THE WINNER HANDLES THE TIMER INTERRUPT PROCESSING
WHILE THE OTHER CPU SPINS IN THE LOCK MANAGER WAITING FOR THE
DISPATCHER LOCK. WHEN THE FIRST TERMINATES PROCESSING THE INTERRUPT, IT
RELEASES THE DISPATCHER LOCK AND EXITS TO THE DISPATCHER WHO THEN
REQUESTS THE DISPATCHER LOCK. MEANWHILE, THE OTHER CPU WHO NOW HAS THE
DISPATCHER LOCK INCORRECTLY DEQUES THE FIRST TQE AND TRIES TO HANDLE
THE INTERRUPT.  AFTER DISCOVERING ITS ERROR, IT REQUES THE TQE AND
RELEASES THE LOCK.  THEN IT EXITS TO THE DISPATCHER, ETC.

   FORTUNATELY, THE PATH LENGTH HERE IS FAIRLY SHORT, AND THE COST IS
NOT AS BAD AS IT SOUNDS. THERE ARE SOME IMPORTANT CONSEQUENCES. FIRST,
IF ONE CPU IS DISABLED AND THE OTHER IS ENABLED, THE INTERRUPT WILL BE
HANDLED ON THE LATTER. THUS, IN AN UNCONTROLLED TIMING SITUATION,
STATDIE WILL SAMPLE MORE ON THE ENABLED CPU.  SECONDLY, IN AN ASYMETRIC
SITUATION LIKE A 158 MODEL 1 AP, THE STATDIE SAMPLES WILL TEND TO OCCUR
ON THE FASTER CPU, SINCE IT GETS THE LOCK FIRST.  BOTH CIRCUMSTANCES
BIAS THE RESULTING SAMPLE, PRODUCING QUESTIONABLE STATISTICAL RESULTS.

   TO ADDRESS THESE PROBLEMS, A ZAP WAS DESIGNED TO MODULE IEAVRTI0 IN
THE SET CLOCK COMPARITOR ROUTINE. FOR DIE TQES ONLY, A KIND OF CPU
AFFINITY CAN BE SET IN THE LOW ORDER BYTE OF THE TOD TIMESTAMP FIELD.
THIS IS A USER SUPPLIED FIELD AND THUS BYPASSES THE PROBLEM OF RESERVED
BITS. A STCK INSTRUCTION ALWAYS STORES BINARY 0 IN THIS BYTE POSITION,
AND ANYTHING ELSE HERE IS 'UNUSUAL' BUT VALID. IF THE TQE HAS AFFINITY
TO THE OTHER CPU, THE ZAP SIGNALS THAT CPU TO TIME IT AND INSTEAD TIMES
THE NEXT TQE IN THE QUEUE. THERE ARE A FEW MORE NUANCES DOCUMENTED IN
THE CODE ITSELF.

   STATDIE HAS BEEN MODIFIED SO THAT WHEN IT IS BUILDING THE TQE FOR
THE NEXT SAMPLING INTERVAL IT REQUESTS 'CPU AFFINITY' TO THE OTHER CPU.
IF THE ZAP IS NOT INSTALLED, THIS WILL BE IGNORED AND PROCESSING WILL
BE RANDOM AS EXPLAINED ABOVE. WITH THE ZAP, SAMPLING WILL ALTERNATE
BETWEEN THE TWO PROCESSORS.  EACH SAMPLE USES THE LOW ORDER BIT OF THE
INSTRUCTION ADDRESS IN THE PSW AS A CPU FLAG. IF THE BIT IS OFF, THE
SAMPLE WAS TAKE ON CPU0. IF IT IS ON, THEN THE SAMPLE WAS TAKEN ON
CPU1.  YOU CANNOT COUNT ON THIS ALTERNATION, HOWEVER, IN DESIGNING A
POST PROCESSOR. TO PREVENT BLOCKING TIMER HARDWARE RECOVERY, THE
IEAVRTI0 ZAP WILL REFUSE THE CPU AFFINITY REQUEST IF IT GETS A NON-ZERO
RETURN CODE FROM THE RPSGNL MACRO SIGNALLING THE OTHER PROCESSOR.  THIS
WILL OCCUR IF THE OTHER PROCESSOR IS OFFLINE, IN WHICH CASE STATDIE
WILL SAMPLE WITH THE SAME FREQUENCY AS BEFORE, BUT ALL SAMPLES WILL
TAKE PLACE ON THE REMAINING PROCESSOR. HOWEVER, IT CAN ALSO OCCUR IF
THE OTHER PROCESSOR IS LOGGING A MACHINE CHECK OR CHANNEL CHECK TO ITS
FLOPPY DISK, IN WHICH CASE STATDIE SKIPS A FEW SAMPLES ON THE ONE CPU.
THUS POST PROCESSORS MUST TEST THE LOW BIT OF EVERY ADDRESS TO
DETERMINE THE ACTUAL ACTIVE CPU RATHER THAN RELYING ON REGULAR
ALTERNATION.  INTERESTINGLY, ONE CAN USE IMBALANCES IN THE SAMPLE SIZE
VALUE REPORTED BY THE CPU COMMAND AS A MEASURE OF THE DEGRADATION
EXPERIENCED IN THE LAST 20 MINUTES AS A RESULT OF RECOVERABLE HARDWARE
ERRORS.



                          ASMTOZAP




   ASMTOZAP IS A UTILITY WHICH READS AN ASSEMBLER LISTING AND PRODUCES
AMASPZAP CONTROL CARDS.  THIS ALLOWS NON-TRIVIAL PATCHES TO BE WRITTEN
IN ASSEMBLER LANGUAGE WITH FULL USE OF SYMBOLIC REFERENCES, DSECTS, AND
MACROS.  CODE IS POSITIONED AT THE CORRECT OFFSETS BY USE OF ORG.
SYMBOLIC ADDRESSES CAN BE GENERATED BY ORG, OR FAKED BY EQU, OR COPYED,
ETC.  THERE IS LESS ROOM FOR ERROR, IMPROVED LEGIBILITY, AND CONVERSION
FROM ONE RELEASE TO ANOTHER USUALLY INVOLVES ONLY CHANGING A FEW ORG'S
TO REFLECT THE NEW ADDRESSES OF THE PATCH AREA OR ZAPPED INSTRUCTIONS.

   THERE ARE FOUR CONTROL CARDS WHICH ARE INCLUDED IN THE ASSEMBLER
SOURCE AS COMMENTS WITH '*ZAP' IN COLUMNS 1-4.

*ZAP CARD ZAP STATEMENTS
     EVERYTHING AFTER THE WORD 'CARD' IS REPRODUCED IN THE
     OUTPUT DATASET.  THIS IS USED TO PRODUCE NAME, DUMP,
     DUMPT, ++PTF, ++VER, ++ZAP, OR EXPAND CARDS.
     EXAMPLE:
     *ZAP CARD NAME IGG0003B IGG0003B
     *ZAP CARD DUMP IGG0003B

*ZAP START VER × REP    <SELECT EITHER VER OR REP>
     THIS MARKS THE BEGINNING OF A SECTION OF ASSEMBLER
     LANGUAGE WHICH IS TO BE PROCESSED BY ASMTOZAP.
     ASSEMBLER COMMENT CARDS, ASSEMBLER CONTROL CARDS
     (PRINT, ORG, ETC.), MACRO REFERENCES, AND OTHER LINES
     WHICH DO NOT GENERATE DATA WILL GENERATE ZAP COMMENT
     CARDS.  IF NEITHER VER NOR REP IS SPECIFIED, THE
     DEFAULT IS THE OPTION SPECIFIED ON THE PREVIOUS *ZAP
     START CARD.  VER OR REP MUST BE SPECIFIED BEFORE THE
     FIRST DATA GENERATING LINE IS ENCOUNTERED.  MACHINE
     INSTRUCTIONS OR DC INSTRUCTIONS IN MAINLINE CODE OR IN
     MACRO EXPANSIONS ARE DATA GENERATING.

*ZAP PAUSE
     THIS INHIBITS PROCESSING OF ASSEMBLER STATEMENTS UNTIL
     THE NEXT *ZAP START CARD IS ENCOUNTERED.  INITIALLY
     PROCESSING IS IN THE PAUSE'D STATE.

*ZAP STOP
     THIS TERMINATES ASMTOZAP PROCESSING.  THIS CARD IS
     NECESSARY.  AN END-OF-FILE ON INPUT IS REGARDED AS AN
     ERROR.

   THE FOLLOWING HELPFUL HINTS ARE PROVIDED FOR POTENTIAL
USERS:

     1) SPECIFY 'PRINT DATA'.  ANY OTHER SETTING OF PRINT IS
         PROBABLY WRONG.
     2) WHEN POSSIBLE, WRITE THE ASSEMBLER CODE AS A REAL
         PROGRAM WHICH CAN ACTUALLY RUN.  THIS HELPS YOU TO
         DEBUG THE ZAP BEFORE IT IS APPLIED.  IF THIS IS NOT
         POSSIBLE, TRY TO INCLUDE SUGGESTIONS FOR EXECUTING
         SECTIONS OF THE CODE UNDER TSO TEST.  REMEMBER TO
         PAUSE PROCESSING BEFORE SECTIONS OF CODE INTENDED
         ONLY FOR DEBUGGING.
     3) PUT ALL THE VER SECTIONS FIRST - NOTE THAT THE
         ASSEMBLER WILL OVERWRITE CODE IF ORG SETS THE
         LOCATION COUNTER BACK, SO THIS SCHEME FOR VER AND
         THEN REP CODE WILL LEAVE THE NEW INSTRUCTIONS WHERE
         THEY ARE SUPPOSED TO BE DURING ASSEMBLER DEBUGGING.
     4) GATHER ALL SENSITIVE MODULE OFFSETS TOGETHER AS A
         SEQUENCE OF EQU STATEMENTS AT THE BEGINNING OF THE
         ASSEMBLER SOURCE.  THESE OFFSETS ARE THE MOST
         LIKELY TARGET OF SUBSEQUENT MAINTENANCE, AND
         PUTTING THEM ALL TOGETHER MAKES IT VERY EASY TO
         RECOVER FROM SUBSEQUENT IBM PTF'S.

   FOR AN EXAMPLE OF THE USE OF ASMTOZAP, EXAMINE THE MEMBER
TIMERZAP IN THE SOURCE LIB. THIS WOULD BE RUN THROUGH THE ASSEMBLER
AND THE SYSPRINT OUTPUT USED AS INPUT TO ASMTOZAP TO REPRODUCE
THE HG00102 PTF.
