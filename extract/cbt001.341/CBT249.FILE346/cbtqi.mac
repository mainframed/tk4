N2QI TITLE 'HJSTP - JES2/NJE SP2/REL 2 QUEUE PROCESSOR INITIALIZATION'
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
****************
*
HJSTN2QI CSECT
         HJCPYRIT
         COPY  $HASPGEN
        $SYSPARM  (OFF,GEN,NODATA,NO,YES)
     TITLE 'HJSTP - JES2/NJE SP2/REL 2 QUEUE PROCESSOR INITIALIZATION'
         HJENTRY GENHJCT=NOGEN,GENSYMB=NOGEN,BASE=(HJBASE1,HJBASE2)
********************************
         TITLE 'JES2 PARMLIB PROCESSING'
* NEED TO PROCESS PARMLIB CARDS FOR OUTPUT ROUTING AND OUTPUT CLASSES.
*        AND JOBQ AND BUFSIZE DEFINING PARAMETERS
N2OTPROC DS    0H
         OPEN  (N2PARM,(INPUT))
         TM    N2PARM+48,X'10'     MAKE SURE OPENED
         BZ    N2CDEND             USE DEFAULTS IF NO DD
         LA    R4,1                BXLE INCREMENT
N2OTNXT  DS    0H                  LOOP TO GET NEXT PARM CARD
         GET   N2PARM
         CLC   =CL2'/*',0(R1)      CHECK FOR EOF
         BE    N2CDEND
         LR    R2,R1               USE R2 FOR CURRENT CHAR
         LA    R5,70(R1)           LAST CHAR BEFORE COL 72
         TM    N2FLAGS,N2CONT      CHK IF CONT IN PROCESS
         BZ    N2NEWCD             NO CONTINUATION, CHK CARD TYPE
         CLI   N2FLAGS,N2CONT      CHK IF NOT SPECIAL CARD
         BNE   N2SCN1              SCAN IF CARD OF INTEREST
* IGNORE CARD BUT FIRST SEE IF CONTINUATION
*  HERE TO CHK FOR CONTINUATION ON CARD IF NEED TO FIND NONBLANK
*        AND THEN A BLANK
N2SCN0A  DS    0H                  CHK IF CONT ON CARD
         CLI   71(R1),C' '         CHK 72
         BNE   N2CON0              CONT IF NONBLANK
N2SCN0   CLI   0(R2),C' '          FIND FIRST NONBLANK
         BNE   N2FND0
         BXLE  R2,R4,N2SCN0
N2RST0   DS    0H                  RESET CONTINUATION
         MVI   N2FLAGS,X'00'       RESET CONT IF ALL BLANKS
         B     N2OTNXT
N2FND0   BXH   R2,R4,N2FND0A       SEARCH FOR BLANK
         CLI   0(R2),C' '
         BNE   N2FND0
N2FND0A  DS    0H
         BCTR  R2,0
         CLI   0(R2),C','          CONT IF LAST CHAR BLANK
         BNE   N2RST0              RESET CONT
N2CON0   DS    0H
         OI    N2FLAGS,N2CONT      SET CONT
         B     N2OTNXT             GET NEXT CARD AND IGNORE
         SPACE 2
* HERE IF NEED TO CHK CURRENT CHAR FOR BLANK  IF 72 NONBLANK
N2SCN0B  DS    0H
         CLI   71(R1),C' '         CONT IF 72 NONBLANK
         BNE   N2CON0
N2SCN0C  CLI   0(R2),C' '          FIND A BLANK
         BE    N2FND0A
         BXLE  R2,R4,N2SCN0C
         B     N2FND0A             CHK LAST CHAR FOR ','
         SPACE 2
* CONTINUATION OF ROUTING OR CLASS DEFINING CARD
*        ALSO HERE IF CURRENT CARD IS ROUTE OR CLASS
N2SCN1   CLI   0(R2),C' '          FIND NONBLANK
         BNE   N2FND1              GO WHEN FOUND
         BXLE  R2,R4,N2SCN1
         B     N2SCN0A             CHK FOR CONT IF ALL BLANKS
N2FND1   DS    0H                  NONBLANK FOUND
         TM    N2FLAGS,N2$$        CHK IF CLASS CARD
         BO    N2$CONT             GO IF YES
N2SCN2   CLI   0(R2),C' '          SEARCH FOR ROUTECDE OR BLANK
         BE    N2CHK1              CHECK IF MORE CONT
         CLC   =CL9'ROUTECDE=',0(R2) SEE IF ROUTE SPECIFIED
         BE    N2SETRT             GO SET ROUTE
         CLC   =CL6'NUMPR=',0(R2)  TEST FOR NUM PRTRS SUBPARM
         BE    N2RMTPR              AND BR IF EQ
         CLC   =CL6'NUMPU=',0(R2)  LIKEWISE, TEST FOR NUM PCHS
         BE    N2RMTPU              AND BR IF EQ
         BXLE  R2,R4,N2SCN2
         SPACE 2
N2CHK1   DS    0H                  CHECK IF MORE CONTINUATION
         BCTR  R2,0
         CLI   0(R2),C','          LAST CHAR ,
         BE    N2CON0             KEEP LOOKING FOR ROUTECDE
         TM    N2FLAGS,N2RMT       RMTNNN PARM?
         BZ    N2RESET1             NO, BR
         TM    N2FLAGS,N2NUMPRF     YES, THEN TEST FOR NUMPR SUBPARM
         BO    N2RESET1              AND BR IF SO
         LH    R15,N2NUMRPR          OTHERWISE, ADD DEFAULT
         LA    R15,1(R15)             1 PRTR INTO RMT
         STH   R15,N2NUMRPR            PRTR COUNT
N2RESET1 DS    0H                  RMT PRTR COUNT OK
         NI    N2FLAGS,N2CONT      RESET EVERTHING EXCEPT CONT
         CLI   71(R1),C' '         CHK IF 72 NONBLANK
         BNE   N2CON0             GET NEXT CARD AND IGNORE
         MVI   N2FLAGS,X'00'         RESET CONTINUATION
         B     N2OTNXT             GET NEXT
         SPACE 3
N2SETRT  DS    0H                  ROUTECDE= FOUND
         LA    R2,9(R2)            SKIP TO NNN
         LR    R6,R2               SAVE START
N2SCN3   BXH   R2,R4,N2SCN0A       LOOK FOR END OF NNN
         CLI   0(R2),C'0'
         BNL   N2SCN3              SHOULD BE ' ' OR ','
         SPACE 2
         LR    R7,R2
         SR    R7,R6               GET LENGTH OF NNN
         BCTR  R7,0                - 1 FOR COMPARE AND MOVE
         EX    R7,N2EXCOMP         COMPARE TO NNN ON CTL CARD
         BE    N2SCN2              IGNORE IF EQUAL (CONTINUE SCAN)
         EX    R7,N2EXPACK         MOVE NNN TO WORK AREA
         CVB   R7,N2CNVWK          CONVERT TO BIN ROUTE
         LA    R6,N2$ROUTE         START OF ROUTE TABLE
N2RTLP   DS    0H                  NEED TO FIND SLOT IN TABLE
         CLC   0(2,R6),=X'FFFF'    CHK FOR TABLE END
         BE    N2ERR11             GO IF NO ROOM
         CLI   0(R6),X'FF'         FREE ENTRY
         BE    N2$RTSAV            GO SAVE NEW ENTRY
         CLC   N2CTLCD,2(R6)       CHK IF DUPLICATE NAME
         BE    N2$RTSAV            SAVE THIS ONE IF YES
         LA    R6,10(R6)           NEXT TABLE ENTRY
         B     N2RTLP
         SPACE 2
N2$RTSAV DS    0H                  SPACE FOUND FOR ENTRY
         MVC   2(8,R6),N2CTLCD     SAVE MNEMONIC
         STH   R7,0(R6)            SAVE ROUTECDE
         B     N2SCN2              CONTINUE SCAN FOR OTHER SUBPARMS
         SPACE 3
*        HERE TO SEARCH FOR PUNCH OR PRINT PARAMETER ON $$X CARD
N2$CONT  DS    0H
N2$SCN1  CLI   0(R2),C' '
         BE    N2CHK1              CHK FOR MORE CONT
         CLC   =CL5'PRINT',0(R2)   CHECK FOR PRINT OR PUNCH
         BE    N2$PRT              GO IF PRINT
         CLC   =CL5'PUNCH',0(R2)
         BE    N2$PUN
         BXLE  R2,R4,N2$SCN1
         B     N2CHK1              CHK FOR CONT
         SPACE 2
* $$X WITH PRINT FOUND , REMOVE CLASS FROM PUNCH TABLE
N2$PRT   DS    0H
         LA    R6,N2$SCAT
N2$LP    CLI   0(R6),X'FF'         CHK FOR TABLE END
         BE    N2SCN0B             IGNORE PRINT
         CLC   0(1,R6),N2CTLCD     CHECK IF PRINT CLASS IN PUNCH TBL
         BE    N2$DEL
         LA    R6,1(R6)
         B     N2$LP
N2$DEL   DS    0H              NEED TO DELETE CLASS FROM PUNCH TABLE
         LA    R7,N2$SCAT+L'N2$SCAT  POINT TO END OF TBL
         SR    R7,R6               GET LENGTH OF SHIFT
         BCTR  R7,0                - 1
         EX    R7,N2$EXMVC         SHIFT OVER DELETED ENTRY
         B     N2SCN0B             GO CHK CONT
         SPACE 3
N2$PUN   DS    0H                  PUNCH ENTRY NEEDS TO GO IN SCAT
         LA    R6,N2$SCAT
N2$LP2   CLI   0(R6),X'FF'         FIND FREE ENTRY
         BE    N2$INSRT
         CLC   0(1,R6),N2CTLCD     CHK IF ALREADY IN TABLE
         BE    N2SCN0B             IGNORE IF YES
         LA    R6,1(R6)
         B     N2$LP2
         SPACE 2
N2$INSRT DS    0H                  INSERT NEW PUNCH CLASS
         MVC   0(1,R6),N2CTLCD
         B     N2SCN0B             GO CHK FOR CONT
         SPACE 3
*  NEW CARD CHECK FOR CONTROL CARD WITH ROUTING OR OUTPUT CLASS INFO
*        OR FOR SYSTEM DEFINING CARD.
N2NEWCD  DS    0H
         MVI   N2CARDID,C' '       BLANK CARD NNNNN SAVE
         MVC   N2CARDID+1(L'N2CARDID-1),N2CARDID
         MVI   N2CTLCD,C' '        BLANK ROUTE MNEMONIC SAVE AREA
         MVC   N2CTLCD+1(L'N2CTLCD-1),N2CTLCD
N2CCSCN1 CLI   0(R2),C' '          FIND FIRST NONBLANK
         BNE   N2CCFND1
         BXLE  R2,R4,N2CCSCN1
         B     N2OTNXT             GET NEXT CARD IFALL BLANKS
N2CCFND1 DS    0H                  CHK CARD TYPE
         CLC   =CL3'RMT',0(R2)
         BE    N2CCRMT
         CLC   =CL2'$$',0(R2)      SYSOUT CLASS
         BE    N2CC$$
         SPACE 1
         CLI   0(R2),C'S'          MULTI-ACCESS SPOOL DEFINITION
         BE    N2SIDCK             CHECK SN
         SPACE 1
*        CHECK FOR SYSTEM DEFINING PARM CARD
*        CARDS ARE OF FORM XXXXXX=NNN
         LA    R8,N2SYSTAB         PARAMETERS TO BE CHECKED
         SR    R6,R6               LENGTH FOR COMPARE OF TABLE ENTRIES
N2SYSLP  DS    0H                  LOOP FOR TABLE SEARCH
         CLI   0(R8),X'FF'         CHK FOR TABLE END
         BE    N2SCN0A             IGNORE CARD
         IC    R6,0(R8)            PARAMETER LENGTH-1
         EX    R6,N2SCOMP          CHK INPUT VS TABLE
         BE    N2SYSFND            GO IF MATCH
         LA    R8,16(R8)           NEXT TABLE ENTRY
         B     N2SYSLP             SKIP PARAMETER IF TABLE END
         SPACE 3
*        SYSTEM PARAMETER FOUND
*        CONVERT VALUE TO BINARY AND SAVE IN DEFINING FIELD
N2SYSFND DS    0H
         LA    R2,1(R6,R2)         SKIP TO NN--N START
         L     R8,12(R8)           PTR TO FIELD TO BE UPDATED
         LR    R6,R2               SAVE FIELD START
         CLI   0(R2),C'('          DO WE HAVE A OPEN PARAN         SPR2
         BNE   N2SCNS1             NOPE LEAVE DATA AT START        SPR2
         LA    R2,1(R2)            BUMP PAST THE OPEN PARAN        SPR2
         LA    R6,1(R6)             DITTO -- DITTO -- DITTO        SPR2
         OI    N2FLAGS,SPR2P       TELL OF OPEN PARAN              SPR2
N2SCNS1  BXH   R2,R4,N2SCN0A       LOOK FOR END OF NNN
         CLI   0(R2),C'0'
         BNL   N2SCNS1             COULD  BE ' ' OR ','            SPR2
*        BNL   N2SCNS1             SHOULD BE ' '
         SPACE 2
         LR    R7,R2
         SR    R7,R6               GET LENGTH OF NNN
         BCTR  R7,0                - 1 FOR PACK
         EX    R7,N2EXPACK         PACK NNN INTO WORK AREA
         CVB   R7,N2CNVWK          CONVERT TO BINARY
         STH   R7,0(R8)            SAVE INIT VALUE
         TM    N2FLAGS,SPR2P       DID WE SEE A PARAN              SPR2
         BNO   N2SCN0A             NOPE START NORMAL               SPR2
         NI    N2FLAGS,255-SPR2P   RESET FLAG                      SPR2
         LA    R2,7(R2)            BYPASS REST OF DATA             SPR2
         B     N2SCN0A             CHK FOR CONTINUATION
         SPACE 2
*        MULTI-ACCESS SPOOL DEFINITION (SN) CARD FOUND
*        SET ENTRY IN N2SIDTAB FOR THIS N
N2SIDCK  DS    0H
         CLI   2(R2),C' '          MAKE SURE BLANK AFTER SN
         BNE   N2SCN0A             IGNORE CARD
         CLI   1(R2),C'1'          MAKE SURE S1-S7              FIX 059
         BL    N2SCN0A             IGNORE
         CLI   1(R2),C'7'                                       FIX 059
         BH    N2SCN0A             IGNORE
         SPACE 1
*        HAVE VALID SN
         PACK  N2CNVWK,1(1,R2)       CONVERT TO BINARY TO UPDATE TABLE
         CVB   R8,N2CNVWK
         BCTR  R8,0                DOWN BY 1 TO GET OFFSET
         LA    R8,N2SIDTAB(R8)
         MVI   0(R8),X'FF'         INDICATE ENTRY PRESENT FOR SN
         LA    R2,2(R2)            SKIP SN
         B     N2SCN0A             CHECK FOR CONTINUATION
         SPACE 2
*  $$ CARD SAVE CLASS AND SET FLAG
N2CC$$   DS    0H
         MVC   N2CTLCD(1),2(R2)    SAVE CLASS
         OI    N2FLAGS,N2$$        INDICATE TYPE CARD
         LA    R2,3(R2)            SKIP $$X
         B     N2SCN1              GO SCAN REST OF CARD
         SPACE 3
N2CCRMT  DS    0H                  RMT CARD
         LH    R15,N2NUMRMT        COUNT
         LA    R15,1(R15)           RMTNNN
         STH   R15,N2NUMRMT          PARM
         LA    R2,3(R2)            SKIP RMT
         LA    R6,N2CARDID         NNN SAVE
N2RMLP   CLI   0(R2),C' '
         BE    N2RMDON             QUIT ON FIRST BLANK
         MVC   0(1,R6),0(R2)       SAVE N
         LA    R6,1(R6)
         BXLE  R2,R4,N2RMLP
         LA    R2,*                INDICATE LOC OF 'IMPOSSIBLE' ERROR
         B     N2ERR12             GO IF NOT ENDED
N2RMDON  DS    0H                  ALL NS MOVED
         MVC   N2CTLCD(3),=C'RMT'
         MVC   N2CTLCD+3(3),N2CARDID  MOVE NS
         OI    N2FLAGS,N2RMT       INDICATE CARD TYPE
         B     N2SCN1              GO LOOK FOR ROUTECDE
         SPACE 3
N2RMTPR  DS    0H                  NUMPR=N SUBPARM ON RMTNNN
         OI    N2FLAGS,N2NUMPRF    SET PARM OCCURRENCE FLAG
         LA    R15,N2NUMRPR        PT TO ACCUMULATOR
         B     N2RPXCOM            BR TO COMMON CODE
         SPACE 2
N2RMTPU  DS    0H                  NUMPU=N SUBPARM ON RMTNNN
         LA    R15,N2NUMRPU        PT TO ACCUMULATOR
         SPACE 2
N2RPXCOM DS    0H                  COMMON CODE FOR NUMPR & NUMPU
         LA    R2,6(R2)            PT TO 'N'
         PACK  N2CNVWK,0(1,R2)     PACK IT
         CVB   R14,N2CNVWK          AND MAKE IT BINARY
         TM    N2FLAGS,N2NUMPRF    NUMPR SUBPARM?
         BZ    N2RPXCM1             NO, BR
         LTR   R14,R14              OTHERWISE, TEST FOR ZERO
         BNZ   *+8                   USE NON-ZERO VALUE (I.E., BR)
         LA    R14,1                 CHANGE 0 INTO 1
N2RPXCM1 AH    R14,0(R15)          ADD IN PREV ACCUMULATION
         STH   R14,0(R15)           AND SAVE IT
         B     N2SCN2              CONTINUE SCAN FOR OTHER SUBPARMS
         SPACE 3
* INSTRUCTIONS TO BE INVOKED BY EX INSTR
N2EXCOMP CLC   0(0,R6),N2CARDID    CHECK IF ROUTECDE = DEFAULT
N2EXPACK PACK  N2CNVWK,0(0,R6)     LIMIT FROM FIELD
N2$EXMVC MVC   0(0,R6),1(R6)       SHIFT SCT ENTRIES
N2SCOMP  CLC   0(0,R2),1(R8)       CHK FOR TABLE COMMAND
         SPACE 3
N2CDEND  DS    0H                  ALL DONE WITH CTL CARDS
         TM    N2PARM+48,X'10'     CHECK IF PARMLIB OPENED
         BZ    N2NOPARM
         CLOSE N2PARM
N2NOPARM DS    0H
         SPACE 2
*        USE PARM VALUES TO DETERMINE JOB QUE SIZE AND OFFSETS
         TM    N2NUMRJE,X'80'      SEE IF $NUMRJE CARD READ
         BZ    *+10                GO IF YES
         MVC   N2NUMRJE,N2NUMLNE   ELSE USE &NUMLNES DEFAULT
         LH    R7,N2BUFSIZ         GET SPECIFIED BFR SIZE
         LA    R7,7(R7)            ROUND TO
         SRL   R7,3                 NEXT HIGHER
         SLL   R7,3                  MULTIPLE OF 8
         STH   R7,N2BUFSIZ            AND SAVE
         MVC   CTBUFSIZ,N2BUFSIZ   SPOOL BUFSIZE
         MVC   CTORGNOD,N2OWNNOD+1 SET ORIG SYS NODE NO.
         SPACE 1
*        ADD $OWNNODE VALUE TO BINARY ROUTE CODES IN NON-DEFAULT
*        ROUTING TABLE ENTRIES.
         LA    R7,N2$ROUTE         PT TO TBL
N2FIXRTE CLC   0(2,R7),=X'FFFF'    TEST FOR END OF TBL
         BE    N2FIXXIT             BR IF SO
         CLI   0(R7),X'FF'         TEST FOR FREE ENTRY
         BE    N2FIXXIT             NOT INTERESTED IF SO
         MVC   0(L'CTORGNOD,R7),CTORGNOD   SET NODE NO. OF ORIG SYS
         LA    R7,L'N2$ROUTE(R7)   PT TO NEXT TBL ENTRY
         B     N2FIXRTE            LOOP THRU ALL IN-USE TBL ENTRIES
N2FIXXIT DS    0H                  END OF ROUTE TBL FIX-UP RTN
         SPACE 1
*  READY TO OPEN CHKPT DATA SET
         OPEN  (N2DCB,(INPUT))
         TM    N2DCB+48,X'10'        VERIFY GOOD OPEN
         LA    R2,*                IT'S GOTTA OPEN, BUT IN CASE IT DONT
         BZ    N2BADEND             GO TO 'IMPOSSIBLE ERROR' RTN
         L     R0,=F'20480'        SET GETMAIN FOR CHECKPOINT REC  SPR2
         GETMAIN R,LV=(0)          GET THE MEMORY                  SPR2
         LR    R4,R1               SAVE OFF                        SPR2
         ST    R4,CHRECST          SET OFF FOR GOOD                SPR2
         GET   N2DCB,(R4)          TOSS FIRST RECORD               SPR2
         GET   N2DCB,(R4)          TOSS DASD LOCK                  SPR2
         GET   N2DCB,(R4)          GET REAL MASTER CHKPT RECORD    SPR2
         USING $SAVEBEG,R4         SET A USING TO THE AREA         SPR2
*        SET SHARED SPOOL $QSEL AND $QSENO
         SR    R7,R7               CTR OF SID
         LA    R6,N2SIDTAB         CONTAINS INDICATORS OF SIDS
         LA    R5,L'N2SIDTAB        MAX # OF CPUS
N2SIDLP  DS    0H                  COUNT SID FROM SN CARDS
         CLI   0(R6),X'00'         ANY SN THIS N
         BE    *+8                 GO IF NO
         LA    R7,1(R7)            INCR # SN
         LA    R6,1(R6)            NEXT ENTRY
         BCT   R5,N2SIDLP
         LTR   R7,R7               ANY SHARED SYSTEMS
         BNZ   *+8                 GO IF YES
         LA    R7,1                INDICATE 1 SYSTEM
         SR    R6,R6               FOR MULTIPLY
         SPACE 1                                                   *CKP
*  COMPUTE LENGTH OF SHARED-SPOOL QUEUE ELEMENT  ($QSEL)           *CKP
         LR    R5,R7               COPY $QSENO TO R5 FOR $QSEL CALC
*        MH    R5,=Y(5*2)          SPACE FOR SHARED SPOOL CMCTN QUEUES
*        LA    R5,QSECOMQS-QSEDSECT(R5)   SET $QSEL                *CKP
*        AH    R5,N2NJOBRC         ADD NO. JOB QUEUE AND           *CKP
*        AH    R5,N2NJOTRC          JOT CHKPT CNTL BYTES           *CKP
*        LA    R5,7(R5)            ROUND UP TO                     *CKP
*        N     R5,=F'-8'           MULTIPLE OF 8
         LA    R7,QSELEN           GET QSE LENGTH                  SPR2
         MR    R6,R5               $QSENO X $QSEL = SPACE FOR QSES *CKP
         SPACE 1                                                   *CKP
*  COMPUTE SIZE OF FIRST CHECKPOINT RECORD                         *CKP
         LA    R7,$SAVELEN(R7)     ADD $SAVELEN
         AH    R7,$CKRECN          ADD CHECKPOINT I/O BYTES        SPR2
         ST    R7,N2$DACKP         DISPL TO $DACKPT
         LA    R15,N2$NUMDA        GET NUMBER OF SPOOL VOLUMES     SPR2
         MH    R15,=H'6'           MULTIPLY BY EACH ENTRY LENGTH   SPR2
         AR    R7,R15              ADD LENGTH OF $DACKPT           SPR2
*        SPACE 1
*        LH    R1,N2NUMDA          NEED SIZE OF $DACKPT
*        MH    R1,=H'6'
*        AR    R7,R1               PT TO $MSPOOLQ
*        LH    R1,N2NUMRJE         NEED $MSPOOLQ SIZE
*        LA    R1,1(R1)
*        MH    R1,=H'3'
*        AR    R7,R1               NOW POINT TO $RMTSON
*        LH    R1,N2NUMRJE         NEED $RMTSON SIZE
*        MH    R1,=H'3'
*        LA    R1,7(R1)
*        SRL   R1,3                ROUND
*        AR    R7,R1               NOW POINT TO $TGMAP
*        LH    R1,N2NUMTGV         NEED $TGMAP LENGTH
*        LA    R1,7(R1)
*        SRL   R1,3
*        MH    R1,N2NUMDA          NOW HAVE $CYLMAPL
*        AR    R7,R1               ACTUAL LENGTH OF 1ST CHKPT RECD *CKP
*        LA    R7,32(R7)           ROUND UP TO                     *CKP
*        N     R7,=F'-32'           NEXT OCTAL WORD                *CKP
*        ST    R7,N2$JOBQE         SAVE OFFSET TO BEGIN OF JQES    *CKP
         SPACE 1
*        FIND ADDRESSES OF THE KITS                                SPR2
         LH    R1,$NUMTG           GET NUMBER OF &&NUMTG           SPR2
         LA    R1,7(,R1)           ADD SEVEN                       SPR2
         SRL   R1,3                SHIFT OUT AND DIVIDE BY 8       SPR2
*        R1 HAS LENGTH OF BIT MAP                                  SPR2
         LR   R14,R1               SAVE OFF TRACK MAP SIZE         SPR2
         LA   R2,IOTTGMAP-IOTDSECT GET IOB START                   SPR2
         LA   R2,TGMAP-TGMDSECT(R2)    ADD TGMAP                   SPR2
         LA   R3,3(R2,R1)          DEVELOP IOT OFFSET              SPR2
         EXTRN N2$PDDB
*        LA    R0,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(R1)
         N     R3,=F'-4'           COMPUTE AND STORE OFFSET TO     SPR2
         L     R15,=A(N2$PDDB)     FIRST PDDB IN IOT
         STH   R3,0(R15)                                           SPR2
         MH    R14,=H'2'           MULTIPLY FOR TWO GROUP MAPS     SPR2
         ALR   R7,R14              GET TWICE                       SPR2
         ST    R7,KITSTART         STORE FIRST KIT ADDRESS         SPR2
*     GET JIX KIT AND BYPASS (FOR NOW) THE JIX                     SPR2
         ALR   R7,R4               GET FIRST KIT                   SPR2
         USING KITDSECT,R7         SET KIT ADDRESSING              SPR2
         CLC   KITID,=C'JIX '      IS THIS THE KIT FOR JIX         SPR2
         LA    R2,*                SET THE CONVENTION              SPR2
         BNE   N2BADEND            ABEND IF NOT IT                 SPR2
         LH    R5,KITRECN          GET # OF JIX PAGES(RECS)        SPR2
         SLL   R5,12               MULT BY 4096                    SPR2
         GETMAIN R,LV=(5)          GETMAIN AREA FOR JIX            SPR2
         LR    R4,R1               SAVE OFF AREA                   SPR2
         ST    R1,JIXTABLE         STORE OFF JIX TABLE             SPR2
         LH    R5,KITRECN          RELOAD # OF RECORDS             SPR2
JIXLOOP  GET   N2DCB,(R4)          GET A JIX RECORD                SPR2
         LA    R4,4095(R4)         GO TO NEXT AREA                 SPR2
         LA    R4,1(R4)                                            SPR2
         BCT   R5,JIXLOOP          CONTINUE TO READ JIX            SPR2
*   CALC SIZE OF JOB QUEUE                                         *CKP
         LA    R7,KITLNGTH(R7)     GO TO NEXT KIT                  SPR2
         LH    R1,N2MAXJOB         GET NO. JQES                    *CKP
         LA    R1,1(R1)            ALLOW FOR ROUNDING              CBT
         MH    R1,=AL2(JQELNGTH)   COMPUTE AND                     *CKP
         LA    R1,4095(R1)          STORE NO. OF                   *CKP
         SRL   R1,12                 JOB QUEUE                     *CKP
         STH   R1,N2NJOBRC            RECORDS                      *CKP
         CLC   KITRECN,N2NJOBRC    COMPARE TO CHECKPOINT           SPR2
         LA    R2,*                CONVENTION                      SPR2
         BNE   N2BADEND            ABEND IT ALL                    SPR2
         SLL   R1,12               COMPUTE AND STORE               *CKP
         ST    R1,N2$JQSIZ          SIZE OF JOB QUEUE              *CKP
         SPACE 1                                                   *CKP
*  CALC DEFAULT &NUMJOES IF NOT SUPPLIED                           *CKP
         ICM   R14,3,N2NUMJOE      TEST FOR &NUMJOES IN INIT PARMS *CKP
         BNZ   N2JOECNT             AND BR IF SUPPLIED             *CKP
         LH    R14,N2NUMPRT        BEGIN W/ NO. LOCAL PRTRS        *CKP
         AH    R14,N2NUMPUN         ADD IN NO. LOCAL PCHS          *CKP
         AH    R14,N2NUMRPR          + NO. RMT PRTRS               *CKP
         AH    R14,N2NUMRPU           + NO. RMT PCHS               *CKP
         SR    R15,R15             CLEAR WORK REG                  *CKP
         ICM   R15,3,N2NUMRJE      GET &NUMRJE (OR &NUMLNES) VALUE *CKP
         BZ    N2JOEX10             READY TO MULT IF NOT SPECIFIED *CKP
         SH    R15,N2NUMRMT         SUBTR NO. RMTNNN PARMS, GIVES  *CKP
*                                     NO. RMT PRTRS NOT YET COUNTED*CKP
         AR    R14,R15               ADD INTO TOTAL                *CKP
N2JOEX10 MH    R14,=H'10'              ALL X 10                    *CKP
         STH   R14,N2NUMJOE             AND SAVE RESULT            *CKP
N2JOECNT DS    0H                                                  *CKP
         SPACE 1                                                   *CKP
*  CALC SIZE OF JOT                                                *CKP
         LH    R1,N2NUMJOE         NO. JOES                        *CKP
         LA    R1,((JOTJOES-JOTDSECT)/JOESIZE)(R1)  PLUS JOT PREFIX*CKP
         MH    R1,=AL2(JOESIZE)     X JOE SIZE               CBT   *CKP
         LA    R1,4095(R1)             PLUS ROUNDING FACTOR        *CKP
         SRL   R1,12               DIV BY RECD SIZE                *CKP
         STH   R1,N2NJOTRC           = NO. JOT RECDS               *CKP
         LA    R7,KITLNGTH(R7)     GO TO NEXT KIT                  SPR2
         CLC   KITRECN,N2NJOTRC    COMPARE TO CHECKPOINT           SPR2
         LA    R2,*                CONVENTION                      SPR2
         BNE   N2BADEND            ABEND IT ALL                    SPR2
         SLL   R1,12               X RECD SIZE                     *CKP
         ST    R1,N2JOTSIZ           = JOT SIZE                    *CKP
         SPACE 1                                                   *CKP
         SPACE 1
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*        NOW HAVE DATA NEEDED TO PROCESS JOBQ
         TITLE 'JES2/NJE SP2/REL2  JOB QUEUE INITIALIZATION'
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         SPACE 3                                                   *CKP
* NEED TO GET STORAGE FOR JOB QUEUE
         L     R0,N2$JQSIZ          SIZE OF JOB QUEUE
*        A     R0,N2$JOBQE          PLUS SIZE OF 1ST CHKPT RECD    SPR2
         GETMAIN R,LV=(0)
         LR    R4,R1               SET INPUT AREA START
         ST    R1,N2JOBQ           SAVE JOBQ START
         EXTRN N2EOJQ,N2$JOBQ
         LH    R2,N2MAXJOB         END OF VALID JQES = $MAXJOB     *CKP
         LA    R2,1(R2)             PLUS 1 FOR DUMMY JQE UP FRONT  *CKP
         MH    R2,=AL2(JQELNGTH)    TIMES JQE LENGTH               *CKP
*        A     R2,N2$JOBQE          PLUS OFFSET TO START OF JQES   SPR2
         AR    R2,R1
         L     R15,=A(N2EOJQ)      SAVE END FOR N2QP
         ST    R2,0(R15)
*        L     R2,N2$JOBQE         DISPL TO JQES SPR2
         L     R2,N2JOBQ           GET START ADDRESS               SPR2
         LA    R2,JQELNGTH(R2)     SKIP DUMMY JQE                  *CKP
*        AR    R2,R1               ABSOLUTE 1ST JQE                SPR2
         L     R15,=A(N2$JOBQ)     N2QP NEEDS FOR ADDING OFFSETS
         ST    R2,0(R15)
         SPACE 3
*   READ ALL JOB QUEUE RECDS                                       SPR2
         LH    R5,N2NJOBRC         GET PAGES(RECORDS) OF JOBQ      SPR2
         BCTR  R5,0                DECREMENT FOR FIRST READ        SPR2
         GET   N2DCB,(R4)          GET 1ST CHKPT RECD              *CKP
*        A     R4,N2$JOBQE         PT TO LOC FOR 1ST JQE           SPR2
*        LR    R7,R4               DUPLICATE IT                    SPR2
*        A     R7,N2$JQSIZ         PT TO END OF JOB QUEUE          SPR2
         LA    R6,2048             SIZE OF HALF A JOB QUEUE RECD   *CKP
         LA    R6,0(R6,R6)         SIZE OF WHOLE JOB QUEUE RECD    *CKP
         AR    R4,R6               GO TO NEXT LOCATION             SPR2
*        SR    R7,R6               BACK OFF 4K FROM END OF JOB QUE SPR2
N2RDJOBQ GET   N2DCB,(R4)          READ A JOB QUEUE RECD           *CKP
         AR    R4,R6               GO TO NEXT LOCATION             SPR2
         BCT   R5,N2RDJOBQ         LOOP/READ ALL JOB QUE RECS      SPR2
*        BXLE  R4,R6,N2RDJOBQ      LOOP THRU WHOLE JOB QUEUE       SPR2
         SPACE 2                                                   *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         SPACE 3                                                   *CKP
*  JOBQ IS NOW ALL IN STORAGE
         SPACE 3
*  VALIDATE JOBQ     $HASPID IS FOR JES2
         L     R4,CHRECST          LOAD MASTER RECORD START        SPR2
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         CLC   =C'JES2',$HASPID-$SAVEBEG(R4)
*                                  CHECK ID IN CHKPT RECORD
         BNE   N2ERR7              GO IF NOT JES2
*                                  SPOOL BUFFER SIZE
         SPACE 4
*  LOAD JOT IFF SYSOUTDS=UNDONE
         TM    CTFLGS1,CT1UNDDS    TEST FOR SYSOUT HRDCPY PROCESSING
         BZ    N2JOTEND             AND BR IF NOT REQUESTED
         SPACE 1
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*  GET STORAGE FOR JOT
         L     R7,N2JOTSIZ         GET SIZE OF JOT                 *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         LH    R5,N2NJOTRC         GET PAGES(RECORDS) OF JOT       SPR2
         GETMAIN  R,LV=(R7)        GET STG FOR JOT                 *CKP
         L     R15,=V(N2$JOT)      GET PTR TO JOT PTR
         ST    R1,0(R15)           SAVE JOT ADDR FOR N2QP
         LR    R4,R1                AND FOR XDAP BELOW
         SPACE 1
         LA    R6,2048             LENGTH OF HALF A JOT RECD       *CKP
         LA    R6,0(R6,R6)         LENGTH OF A WHOLE JOT RECD      *CKP
*        AR    R7,R4               PTR TO END OF JOT AREA          SPR2
*        SR    R7,R6               BACK OFF 4K FOR BXLE            SPR2
         SPACE 1                                                   *CKP
N2JOTLOP GET   N2DCB,(R4)          GET A JOT RECD                  *CKP
         AR    R4,R6               BUMP ADDRESS BY 4K              SPR2
         BCT   R5,N2JOTLOP         LOPP/READ ALL JOT               SPR2
*        BXLE  R4,R6,N2JOTLOP      LOOP THRU WHOLE JOT             SPR2
*  FALL THRU WHEN JOT IS ALL IN STORAGE                            *CKP
*   THIS SPACE 3                                                   *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         SPACE 3
N2JOTEND DS    0H                  END OF JOT PROCESSING
         EJECT
*****************************************************************
*  VALIDATE SPOOL DATA SETS ARE ONES FOR CHECKPOINTED DATA SET.
* $DACKPT ENTRY IN JOBQ HAS EXTENT ENTRIES FOR EACH SPOOL DATA SET
*         AND ARE IN SEQUENCE CORRESPONDING TO M OF MBBCCHHR.
*     EACH ENTRY IS TO BE CHECKED AGAINST DEB ENTRIES TO MAKE SURE
*         THE CORRECT SPOOL DATA SETS ARE BEING USED.
* EACH $DACKPT ENTRY IS 6 BYTES LONG.
*        BYTE 0= LOW ORDER DEVICE TYPE BYTE
*        BYTE 1=LOW ORDER BYTE OF VOL SER
*        BYTES 2-3=STARTING ABSOLUTE TRK NUMBER OF HASPACE
*        BYTES 4-5=ENDING TRK NUMBER
*
*****************************************************************
         SPACE 3
         L     R5,CHRECST          START OF JOBQUE CHKPT REC       SPR2
         A     R5,N2$DACKP         1ST $DACKPT ENTRY
         LA    R4,N2$NUMDA         NUMBER SPOOL VOLS (32 FIXED )   SPR2
*        LH    R4,N2NUMDA          NUMBER SPOOL VOLS
         SR    R3,R3               M=RELATIVE $DACKPT ENTRY
*                                  1ST $DACKPT ENTRY
N2DALOOP DS    0H                  LOOP FOR $DACKPT PROCESSING
         OC    0(2,R5),0(R5)       CHECK FOR $DACKPT END
         BZ    N2DAEND             GO IF DONE
         L     R2,CTSCBP           1ST SPOOL CTL BLOCK
         USING SCBDSECT,R2
N2SCBLP  DS    0H                  SEARCH FOR MATCHING SCB ENTRY
         CLC   1(1,R5),SCBVOL+5    CHK LAST VOL SER CHAR
         BE    N2SCBFND            GO IF MATCH
         ICM   R2,15,SCBNXT        NEXT SCB IN CHAIN
         BZ    N2ERR8              GO IF VOL NOT IN LIST
         B     N2SCBLP             CONTINUE SEARCH
N2SCBFND DS    0H                  CORRECT SCB FND-CHECK EXTENTS
         LA    R6,SCBDCB           POINT TO DCB
         L     R7,44(R6)           DEB ADDR
         LH    R1,32+6(R7)         CC FOR EXTENT START
         MH    R1,SCBNTC+2         CCX TRK PER CYL = ABS TRK
         AH    R1,32+8(R7)         ADD HH
         CH    R1,2(R5)            CHK DEB VS $DACKPT
         BNE   N2ERR9              GO IF DIFFERENT
* CHECK ENDING EXTENT
         LH    R1,32+10(R7)        END CC
         MH    R1,SCBNTC+2            X TRK PER CYL
         AH    R1,32+12(R7)        ADD HH
         CH    R1,4(R5)            DEB VS $DACKPT
         BNE   N2ERR9              GO IF ERROR
* DO VERIFY READ OF 1ST REC ON LAST TRACK TO MAKE SURE FORMATTED.
         MVC   N2CC(4),32+10(R7)   DEB END CCHH
         LH    R8,CTBUFSIZ         SPOOL BUFSIZE
         XDAP  N2SPLECB,VI,(R6),*,(R8),,N2CCHHR
         WAIT  ECB=N2SPLECB
         CLI   N2SPLECB,X'7F'      CHK FOR ERROR
         BNE   N2ERR10             GO IF NOT FORMATTED
         SPACE 3
*  THIS $DACKPT ENTRY OK
         STC   R3,SCBM             SAVE M OF MBBCCHHR
         LA    R3,1(R3)            NEXT M
         LA    R5,6(R5)            NEXT $DACKPT
         BCT   R4,N2DALOOP
         DROP R2
*  ALL DONE WITH SPOOL VALIDATION
N2DAEND  DS    0H
         SPACE 3
         CLOSE N2DCB
         L     R13,4(R13)          GET OLD SAVE AREA PTR
         SR    R15,R15
         RETURN (14,12),RC=(15)
         EJECT
*  ERROR ROUTINES
N2ERR1   HJCALL MSGWTR,(27,N2ABEND)    DEVTYPE FAILURE
N2ERR3   HJCALL MSGWTR,(29,N2ABEND)    OBTAIN ERROR
N2ERR5   HJCALL MSGWTR,(31,N2ABEND)    XDAP READ ERROR
N2ERR6   HJCALL MSGWTR,(32,N2ABEND)    EXCEEDED CHKPT DS EXTENT
N2ERR7   HJCALL MSGWTR,(33,N2ABEND)    NOT JES2 CHKPT JOBQUE
N2ERR8   LA    R5,1(R5)            PT TO LOW-ORDER VOL SER CHAR
         HJCALL MSGWTR,(34,N2ABEND,(R5))   MISSING SPOOL DD STMT
N2ERR9   HJCALL MSGWTR,(35,N2ABEND)    SPOOL FAILED $DACKPT EXTENT CHK
N2ERR10  HJCALL MSGWTR,(36,N2ABEND)    SPOOL NOT FORMATTED PROPERLY
N2ERR11  HJCALL MSGWTR,(37,N2ABEND)    ROUTE TABLE TOO SMALL
N2ERR12  B     N2BADEND            JES2 PARMLIB STMT ERROR (IMPOSSIBLE)
         SPACE 3
N2ABEND  ABEND 18,DUMP             GENERAL PURPOSE ABEND
         SPACE 2
N2BADEND ABEND 2989,DUMP           ABEND WHEN 'IMPOSSIBILITIES' OCCUR
         EJECT
*  CONTROL BLOCKS, DATA AREAS, CONSTANTS
*   XDAP LIST ENTRY
         XDAP  N2XDAP,RI,N2DCB,MF=L
N2CCHHR  DS    0D                  CURRENT MBBCCHHR
         DC    XL3'0'              MBB
N2CC     DC    XL2'0'              CC
N2HH     DC    XL2'0'              HH
         DC    XL1'01'             R
         SPACE 3
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
         ENTRY N2JOBQ
N2JOBQ   DS    A                   JOBQ START SAVED HERE
         SPACE 1
*        DISPLACEMENT TO JOBQ RECORD ENTRIES
*   THIS RECORD DELETED BY FIX FOR JES2 APAR OZ20010               *CKP
N2$DACKP DC    A(0)                $DACKPT
N2$JOBQE DC    A(0)                DISPL TO START OF JQES
N2$JQSIZ DC    A(0)                JOB QUEUE REC SIZE
         EJECT
* AREAS USED FOR DETERMINING ROUTINGS AND PRINT AND PUNCH CLASSES
* TABLES ARE PASSED TO N2QP
         SPACE 2
N2FLAGS  DC    X'00'               FLAGS FOR CONTROLLING PARMLIB
N2CONT   EQU   X'80'               CONTINUATION ON PARMLIB CARD
N2RMT    EQU   X'10'               RMTNNN
N2$$     EQU   X'08'               $$X CARD
N2NUMPRF EQU   X'04'               NUMPR SUBPARM ON RMTNNN
SPR2P    EQU   X'01'               SP2R2 PARANS IN DATA FIELD     SPR2
N2CNVWK  DS    D                   WORK FOR CONVERTING ROUTE CODES
N2CARDID DS    CL6                 NNN FROM PARM CARD
N2CTLCD  DS    CL8                 ROUTE MNEMONIC
         SPACE 2
         ENTRY N2$SCAT,N2$ROUTE
N2$SCAT  DS    0CL40               PUNCH CLASS TABLE
         DC    C'B'                ASSUME B ONLY  ARE PUNCH       SPR2
         DC    39X'FF'             REST OF TABLE EOFS             SPR2
         SPACE 2
*  TABLE WITH ROUTE CODES THAT ARE NOT DEFAULTS
N2$ROUTE DC    100XL10'FF404040404040404040'
         DC    X'FFFF'             END OF TABLE
         SPACE 3
*        TABLES AND AREAS FOR SYSTEM INITIALIZATION DATA
N2SIDTAB DC    XL7'00'             00 CHANGED TO FF IF SN FOUND
         SPACE 2
N2SYSTAB DS    0F                  TABLE OF XXXX=NNN PARM CARDS
*  ENTRIES ARE XXCCCCCCCCCCCAAAA
*        XX = LENGTH OF PARAMETER-1
*        CCCCCCCCCCC = PARAMETER
*        AAAA = ADDR OF WHERE TO SAVE VALUE
         DC    AL1(8),CL11'&&BUFSIZE=',A(N2BUFSIZ)
         DC    AL1(8),CL11'&&MAXJOBS=',A(N2MAXJOB)
*        DC    AL1(6),CL11'&&NUMDA=',A(N2NUMDA)                    SPR2
         DC    AL1(8),CL11'&&NUMLNES=',A(N2NUMLNE)
         DC    AL1(7),CL11'&&NUMRJE=',A(N2NUMRJE)
         DC    AL1(6),CL11'&&NUMTG=',A(N2NUMTG)                    SPR2
         DC    AL1(8),CL11'&&NUMJOES=',A(N2NUMJOE)
         DC    AL1(8),CL11'&&NUMPRTS=',A(N2NUMPRT)
         DC    AL1(8),CL11'&&NUMPUNS=',A(N2NUMPUN)
         DC    AL1(8),CL11'&&OWNNODE=',A(N2OWNNOD)
         DC    X'FF'               TABLE END
         SPACE 3
*        INIT VALUES NEEDED TO READ JOBQ AND SET BUFSIZE
N2BUFSIZ DC    H'1960'             DEFAULT BUFSIZ
N2MAXJOB DC    H'100'              DEFAULT JOBQ SIZE
*2NUMDA  DC    H'2'                                                SPR2
N2NUMLNE DC    H'0'
N2NUMRJE DC    XL2'8000'           DEFAULT IS &NUMLNES
N2NUMTG  DC    H'3072'                                             SPR2
N2JOTSIZ DC    F'0'                TOTAL SIZE OF JOT               *CKP
N2NUMJOE DC    H'0'                DEFAULT &NUMJOES (CALC'D VALUE)
N2NUMRPR DC    H'0'                ACCUMULATOR FOR RMT PRTR COUNT
N2NUMRPU DC    H'0'                ACCUMULATOR FOR RMT PCH COUNT
N2NUMPRT DC    H'2'                DEFAULT &NUMPRTS
N2NUMPUN DC    H'1'                DEFAULT &NUMPUNS
N2NUMRMT DC    H'0'                COUNT OF RMTNNN PARMS
N2OWNNOD DC    H'1'                DEFAULT &OWNNODE
N2NJOBRC DC    H'0'                NO. JOB QUEUE RECDS             *CKP
N2NJOTRC DC    H'0'                NO. JOT RECDS                   *CKP
N2$NUMDA EQU   $MAXDA              EQUATE THE SPOOL VOLUMES        SPR2
CHRECST  DC    F'0'                ADDRESS OF MASTER CHKPT REC     SPR2
JIXTABLE DC    F'0'                ADDRESS OF JIX TABLE            SPR2
KITSTART DC    F'0'                START OF KITS IN MASTER CHKPT   SPR2
         EJECT
N2PARM   DCB   DDNAME=HJJ2PL,DSORG=PS,MACRF=GL,EODAD=N2CDEND
N2DCB    DCB   DDNAME=HJCHKPT,MACRF=GM,DSORG=PS,RECFM=U,           *CKPX
               BLKSIZE=20480,BUFNO=1,EODAD=N2ERR5                  *CKP
         EJECT
         PRINT GEN
         $PCE  DOC=&DOC                                            SPR2
         $CAT  DOC=&DOC                                            SPR2
         $TGM  DOC=&DOC
         $HCT  DOC=&DOC
         $JQE  DOC=&DOC
         $JCT  DOC=&DOC                                            SPR2
         $JOE  DOC=&DOC
         $JOT  DOC=&DOC
         $PDDB DOC=&DOC                                            SPR2
         $QSE  DOC=&DOC
         $KIT  DOC=&DOC
         $TAB  DOC=&DOC
         $BUFFER DOC=&DOC
         $IOT  DOC=&DOC
         $JQB  DOC=&DOC
         PRINT GEN
HJSTN2QI CSECT
         HJSCB
         END
