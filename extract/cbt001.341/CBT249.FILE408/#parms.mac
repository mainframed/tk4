         MACRO
&NME     #PARMS &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,&P9,&P10,              *
               &P11,&P12,&P13,&P14,&P15,&P16,&P17,&P18,&P19,&P20,      *
               &P21,&P22,&P23,&P24,&P25,&P26,&P27,&P28,&P29,&P30,      *
               &P31,&P32,&P33,&P34,&P35,&P36,&P37,&P38,&P39,&P40,      *
               &SVID=,&WKID=,&SUBAD=,&PFIX=
.*
.*
.*
.* LAST CHANGE DATE - OCTOBER 18, 1983
.*                  - MAILING ADDRESS CHANGE
.*
.* LAST CHANGE DATE - APRIL 21, 1981
.*                  - MACRO NAME CHANGED FROM $PARMS TO #PARMS.
.*
.* LAST CHANGE DATE - FEBRUARY 2, 1977
.*                  - CHARACTERS NOT WITHIN APOSTROPHIES ARE NOW
.*                    UPCASED.
.*                  - FIXED BUG: THE ERROR RETURN FROM THE PARM
.*                    SUBROUTINE GENERATED BY THE MACRO WAS NEVER
.*                    TAKEN.
.*                  - MAILING ADDRESS CHANGE.
.*
.* LAST CHANGE DATE - JUNE 17, 1975
.*
.* THIS MACRO WAS WRITTEN BY DAVID B. COLE. ANY QUESTIONS CONCERNING IT
.* MAY BE ADDRESSED TO:
.*       RR#2 BOX 712
.*       AFTON, VA. 22920
.*
.*
.*
.*   THIS MACRO WAS WRITTEN TO GENERATE A GENERALIZED PARM FIELD SCAN
.* OUT SUBROUTINE. IT DOES THE FOLLOWING:
.* - IT DETERMINES THE EXISTANCE OF A PARM FIELD.
.* - IT INTERFACES WITH A MESSAGE PRINTING SUBROUTINE TO PRINT
.*   APPROPIATE MESSAGES INCLUDING AN ECHO OF THE PARM FIELD AS WELL AS
.*   ANY ERROR MESSAGES THAT MIGHT BE APPROPIATE.
.* - IT SCANS FOR AND ISSOLATES EACH ENTRY IN THE PARM FIELD,
.*   IDENTIFIES IT AGAINST A LIST OF GIVEN KEYWORDS, AND THEN BRANCHES
.*   TO A GIVEN SPECIALIZED HANDLER ROUTINE.
.* - IF BY THE END OF THE SCAN OUT ANY ERRORS HAVE BEEN DETECTED, THE
.*   ROUTINE WILL MAKE AN ERROR RETURN TO ITS CALLER.
.*
.*
.*
.* THE MACRO CALL USES THE FOLLOWING ARGUEMENTS:
.*
.* THE NAME FIELD (OPTIONAL) -
.*   THIS SPECIFIES BOTH THE NAME OF THE GENERATED SUBROUTINE AND THE
.* PREFIX TO USE FOR ALL GENERATED STATEMENT LABELS. IT SHOULD NOT BE
.* LONGER THAN 4 CHARACTERS. IF OMITTED, THEN THE DEFAULT OF "PARM" IS
.* USED.
.*
.* THE POSITIONAL PARAMETERS (AT LEAST ONE REQUIRED) -
.*   FROM ONE TO 40 POSITIONAL PARAMETERS MAY BE GIVEN. EACH OF THEM
.* MUST CONSIST OF A SUBLIST OF TWO ITEMS. THE FIRST MUST BE A PARM
.* FIELD ENTRY KEYWORD. THE SECOND MUST BE THE ADDRESS (A-TYPE) OF AN
.* ASSOCIATED HANDLING ROUTINE. THIS ROUTINE IS GIVEN CONTROL IF THE
.* ASSOCIATED KEYWORD IS FOUND IN THE PARM FIELD.
.*
.* THE SUBAD= OPERAND (OPTIONAL) -
.*   THIS SPECIFIES THE NAME OF A MESSAGE PRINTING SUBROUTINE TO BE
.* USED BY THE SCAN OUT ROUTINE. IF OMITTED, THEN THE DEFAULT IS TO USE
.* THE PRINTING SUBROUTINE USED BY THE NEXT PREVIOUS #PARMS OR $PUT
.* MACRO.
.*   THE FOLLOWING INFORMATION IS PASSED TO THE MESSAGE PRINTING
.* SUBROUTINE:
.*       R14 --> RETURN ADDRESS
.*       R1 --> A MESSAGE BLOCK. THE FIRST BYTE CONTAINS THE LENGTH OF
.*              THE MESSAGE. THE REMAINDER OF THE BLOCK CONTAINS THE
.*              MESSAGE ITSELF (INCLUDING ASA CARRAGE CONTROL).
.*   THE MESSAGE PRINTING ROUTINE SHOULD RESTORE ALL REGISTERS UPON
.* RETURN.
.*
.* THE SVID= OPERAND (OPTIONAL) -
.*   THIS MUST SPECIFY THE NAME OF AN ALIGNED 8-WORD REGISTER SAVE
.* AREA. IF OMITTED, THEN A SAVE AREA IS GENERATED BY THE MACRO.
.*
.* THE WKID= OPERAND (OPTIONAL) -
.*   THIS MUST SPECIFY THE NAME OF AN ALIGNED 1-WORD WORK AREA. IF
.* OMITTED, THEN A WORK AREA IS GENERATED BY THE MACRO.
.*
.* THE PFIX= OPERAND (OPTIONAL) -
.*   THIS MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS EXPANSION. THIS
.* IS SO THAT THE USE OF THE REGISTERS WILL BE INDICATED IN THE CROSS
.* REFERENCE LISTING. THE PFIX= OPERAND CAN BE USED TO CONTROL THE SET
.* OF EQUATES USED. FOR EXAMPLE, IF "PFIX=GPR" IS SPECIFIED, THEN
.* "GPR1" WILL BE USED WHENEVER THE EXPANSION REFERS TO REGISTER 1.
.*   IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF EQUATES DEFINED
.* BY THE FIRST PRIOR #REGS MACRO WILL BE USED. IF THERE IS NO PRIOR
.* #REGS MACRO, THEN NO EQUATES WILL BE USED.
.*
.*
.*
.* SUBROUTINE PROCESSING INFORMATION
.*
.*       INPUTS:
.*             R14 --> RETURN ADDRESS
.*             R1 --> ANY OS STANDARD PARM FIELD
.*
.*       OUTPUTS:
.*             ALL REGISTERS ARE RESTORED.
.*             THE PARM FIELD IS PROCESSED AND MAY BE DESTROYED.
.*       EXITS:
.*             BRANCH AND LINK TO SPECIFIED HANDLING SUBROUTINES UPON
.*             RECOGNITION OF VALID KEYWORDS.
.*
.*       RETURNS:
.*             NORMAL:  " BR R14 "
.*             ERROR:  " B 4(,R14) "
.*       ATTRIBUTES:
.*             NONE (NOT EVEN SERIEALLY REUSABLE)
.*
.* METHOD OF SCAN -
.*   THE PARM FIELD IS CONSIDERED TO BE A LIST OF KEYWORD ENTRIES.
.* POSITIONAL ENTRIES ARE NOT CONSIDERED.
.*   EACH ENTRY MUST START WITH ONE OF THE KEYWORDS DEFINED IN THE
.* MACRO CALL. ANY CHARACTERS THAT MIGHT BE FOUND IN ADDITION TO THE
.* KEYWORD (I.E. ADJACENT TO AND IMMEDIATELY TO THE RIGHT OF THE
.* KEYWORD) ARE CONSIDERED TO BE THE VALUE ASSIGNED TO THE KEYWORD.
.*   NOTE, THIS ROUTINE DOES NOT EXPLICITLY TEST FOR ANY SEPERATOR
.* CHARACTER BETWEEN THE KEYWORD AND ITS VALUE. SUCH A CHARACTER, IF
.* DESIRED, MUST BE DEFINED AS PART OF THE KEYWORD (E.G. "SEQ=").
.*   ITEMS OF SYNTAX RECOGNIZED BY THIS ROUTINE ARE COMMAS,
.* APOSTROPHIES, AND PARENTHESES. APOSTROPHIES MUST OCCURE IN MATCHING
.* PAIRS. COMMAS AND PARENTHESES FOULD WITHIN MATCHING APOSTROPHIES ARE
.* IGNORED. PARENTHESES NOT FOUND WITHIN APOSTROPHIES MUST BE BALANCED.
.* COMMAS FOUND WITHIN PARENTHESES ARE IGNORED.
.*   COMMAS NOT FOUND WITHING MATCHING APOSTROPHIES OR PARENTHESES ARE
.* TREATED AS PARM FIELD ENTRY DELIMITERS.
.*   EACH PARM FIELD ENTRY IS ISSOLATED AT ITS DELIMITERS AND THEN
.* CHECKED FOR A MATCH IN THE MACRO'S KEYWORD LIST. IF A MATCH IS
.* FOUND, THEN THE ASSOCIATED HANDLING ROUTINE IS CALLED WITH THE
.* FOLLOWING INPUTS:
.*       R14 --> RETURN ADDRESS
.*       R15 --> HANDLER ENTRY ADDRESS
.*       R0 = LENGTH OF THE KEYWORD'S VALUE (IF ANY). IF NO VALUE IS
.*            GIVEN, THEN R0 = 0.
.*       R1 --> FIRST BYTE PAST THE KEYWORD - I.E. AT THE VALUE (IF
.*              ANY).
.*   EACH HANDLER MUST MEET THE FOLLOWING OUTPUT REQUIREMENTS:
.*       - ALL REGISTERS MUST BE RESTORED EXCEPT THAT FOR ERROR RETURNS
.*         R1 MUST POINT TO THE LOCATION OF THE ERROR.
.*   THE FOLLOWING RETURNS ARE PERMITTED:
.*       NORMAL -  " BR R14 "
.*       ERROR -  " B 4(,R14) "
.*
.*
.*
.* INNER MACROS USED - #TEST, #PUT
.*
         GBLC  &#TESRET(20)
         LCLA  &A1,&A2
         LCLC  &N,&@,&SAVEA,&WORKA,&C1
&N       SETC  'PARM'
         AIF   (K'&NME EQ 0).GOTNME
&N       SETC  '&NME'
.GOTNME  ANOP
&@       SETC  '&PFIX'
         AIF   (K'&PFIX NE 0).GOTPFIX
         #TEST PFIX=
&@       SETC  '&#TESRET(1)'
.GOTPFIX ANOP
&SAVEA   SETC  '&SVID'
         AIF   (K'&SVID NE 0).GOTSAVE
&SAVEA   SETC  '&N.SAVE'
.GOTSAVE ANOP
&WORKA   SETC  '&WKID'
         AIF   (K'&WKID NE 0).GOTWORK
&WORKA   SETC  '&N.WORK'
.GOTWORK ANOP
* PARM FIELD SCAN-OUT ROUTINE
*        INPUTS:
*              R14 --> RETURN ADDRESS
*              R1 --> PARM FIELD
         SPACE 1
&N       STM   &@.14,&@.5,&SAVEA   SAVE REGISTERS
         LA    &@.4,0(,&@.1)       PNT TO PARM FIELD (CLEAR HI-BYTE)
         LH    &@.3,0(,&@.4)       GET ITS LENGTH
         LTR   &@.3,&@.3           PARM FIELD GIVEN?
         BZ    &N.RET              NO, GO RETURN TO CALLER
         #PUT  &N.TITL,SUBAD=&SUBAD YES, PRINT AN INTRO LINE
         LA    &@.2,1              GETA BXLE INCREMENT FOR THE SCAN
         AR    &@.3,&@.2           GET LENGTH FOR ECHO MSG
         STC   &@.3,0(,&@.4)       STORE IN THE MSG BLOCK
         MVI   1(&@.4),C'0'        SET CARRAGE CONTROL CHARACTER
         #PUT  (&@.4),SUBAD=&SUBAD ECHO THE PARM FIELD
         AR    &@.3,&@.4           GET THE SCAN BXLE LIMIT
         LA    &@.5,2(,&@.4)       GET THE SCAN BXLE INDEX
&N.LOOP  LR    &@.1,&@.5           SAVE KEYWORD STARTING ADDRESS
         LR    &@.0,&@.2           INIT APOS AND PAREN FLAG
&N.DELM  CLI   0(&@.5),C''''       APOSTROPHIE?
         BNE   &N.NAPO             NO, SKIP
         LCR   &@.0,&@.0           YES, FLIP-FLOP THE APOS FLAG
         B     &N.DEND             GO LOOP FOR NEXT CHARACTER
&N.NAPO  LTR   &@.0,&@.0           WITHIN APOSTROPHIES?
         BNP   &N.DEND             YES, SKIP THIS CHARACTER
         CLI   0(&@.5),C'('        NO, OPEN PAREN?
         BNE   &N.NOPN             NO, SKIP
         CR    &@.0,&@.2           YES, FIRST IN A NEST?
         BNE   &N.N1ST             NO, SKIP
         LR    &@.14,&@.5          YES, SAVE A POINTER TO IT ICO ERROR
&N.N1ST  AR    &@.0,&@.2           COUNT THE NEST LEVEL
         B     &N.DEND             LOOP FOR NEXT CHARACTER
&N.NOPN  CLI   0(&@.5),C')'        CLOSE PAREN?
         BNE   &N.NCPN             NO, SKIP
         SR    &@.0,&@.2           YES, DECR NEST LEVEL; IMBALANCE?
         BP    &N.DEND             NO, LOOP FOR NEXT CHARACTER
         B     &N.SNTX             YES, ERROR; GIVE UP ALTOGETHER
&N.NCPN  OI    0(&@.5),X'40'       UPCASE THE CHARACTER
         CR    &@.0,&@.2           WITHIN PARENS?
         BNE   &N.DEND             YES, SKIP THIS CHARACTER
         CLI   0(&@.5),C','        NO, DELIMITING COMMA?
         BE    &N.GOTC             YES, GOT AN ENTRY; GO PROCESS
&N.DEND  BXLE  &@.5,&@.2,&N.DELM   NO, LOOP FOR NEXT CHARACTER
         CR    &@.0,&@.2           END OF PARM; PARENS & APOS OK?
         BE    &N.GOTC             YES, GO PROCESS LAST ENTRY
         LR    &@.1,&@.14          NO, PNT TO START OF NEST
         BP    &N.ERRR             UNBALANCED PARENS; ISSUE ERROR MSG
&N.BAPO  BCTR  &@.5,0              UNMATCHED APOS; BACK-SCAN
         CLI   0(&@.5),C''''       IS THIS IT?
         BNE   &N.BAPO             NO, CONTINUE BACK-SCAN
&N.SNTX  LR    &@.1,&@.5           YES, POINT TO ERROR
         LR    &@.5,&@.3           PREVENT FURTHER PROCESSING
         B     &N.ERRR             GO FLAG THE ERROR
&N.GOTC  CR    &@.1,&@.5           NULL ENTRY?
         BE    &N.EEND             YES, SKIP
         LA    &@.15,&N.KEYS       NO, POINT TO KEYWORD LIST
         SR    &@.14,&@.14         CLEAR LENGTH REGISTER
&N.SRCH  CLI   0(&@.15),X'FF'      END OF KEYWORDS?
         BE    &N.ERRR             YES, ERROR
         IC    &@.14,3(,&@.15)     NO, GET THIS KEYWORD LENGTH - 1
         CLC   4(*-*,&@.15),0(&@.1) (EXECUTED)
&N.CLC   EX    &@.14,*-6           RIGHT KEYWORD?
         BE    &N.GOTK             YES, GO PASS TO HANDLER
         LA    &@.15,5(&@.14,&@.15) NO, ADVANCE TO NEXT
         B     &N.SRCH             LOOP TO TRY AGAIN
&N.GOTK  MVI   4(&@.15),X'FF'      PREVENT RE-USE OF THIS KEYWORD
         MVC   &WORKA+1(3),0(&@.15) ALIGN THE HANDLER ADDRESS
         L     &@.15,&WORKA        LOAD IT
         LA    &@.1,1(&@.14,&@.1)  POINT TO KEYWORD'S VALUE
         LR    &@.0,&@.5           POINT PAST THE ENTRY
         SR    &@.0,&@.1           GET THE ENTRY'S VALUE'S LENGTH
         BALR  &@.14,&@.15         LINK TO THE HANDLER
         B     &N.EEND             NORMAL RETURN; LOOP FOR NEXT ENTRY
&N.ERRR  MVI   0(&@.1),X'FF'       ERROR RETURN; FLAG THE ERROR
         MVI   1(&@.4),X'00'       SIGNEL THAT AN ERROR HAS OCCURED
&N.EEND  BXLE  &@.5,&@.2,&N.LOOP   LOOP TO PROCESS NEXT ENTRY
         CLI   1(&@.4),C'0'        ANY ERRORS OCCURE?
         BE    &N.RET              NO, GO RETURN TO CALLER
         LA    &@.1,1(,&@.4)       YES, PNT TO PARM CCC.
&N.FLAG  CLI   0(&@.1),X'FF'       ERROR HERE?
         MVI   0(&@.1),C' '        (ASSUME NO)
         BNE   &N.STAR             NO, SKIP TO NEXT CHARACTER
         MVI   0(&@.1),C'*'        YES, SET A VISUAL SIGNEL
&N.STAR  BXLE  &@.1,&@.2,&N.FLAG   LOOP FOR NEXT CHARACTER
         #PUT  (R4),SUBAD=&SUBAD   PRINT THE ERROR FLAG(S)
         #PUT  &N.ERRM,SUBAD=&SUBAD PRINT ERROR INFO
         LTR   &@.14,&@.14         SIGNEL ERROR RETURN
&N.RET   LM    &@.14,&@.5,&SAVEA   (RESTORE REGISTERS)
         BC    7,4(,&@.14)         ERROR RETURN
         BR    &@.14               NORMAL RETURN
         SPACE 3
         AIF   (K'&SVID NE 0).NOSAVE
&SAVEA   DS    8A                  REGISTER SAVE AREA
.NOSAVE  AIF   (K'&WKID NE 0).NOWORK
&WORKA   DS    A                   WORK AREA
.NOWORK  AIF   (K'&SVID NE 0 AND K'&WKID NE 0).NOSPACE
         SPACE 1
.NOSPACE ANOP
&N.KEYS  DS    0H                  KEYWORD LIST
&A1      SETA  0
.LP1     AIF   (&A1 EQ N'&SYSLIST).END1
&A1      SETA  &A1+1
&A2      SETA  K'&SYSLIST(&A1,1)-1
         DC    AL3(&SYSLIST(&A1,2)),AL1(&A2),C'&SYSLIST(&A1,1)'
         AGO   .LP1
.END1    DC    X'FF'               KEYWORD LIST TERMINATOR
         SPACE 1
&C1      SETC  'L'''
         DC    AL1(&C1&N.TITL)
&N.TITL  DC    C'-THE FOLLOWING PARM FIELD HAS BEEN GIVEN.'
         SPACE 1
         DC    AL1(&C1&N.ERRM)
&N.ERRM  DC    C'0ERRORS HAVE BEEN DETECTED AT THE ABOVE ASTERISKS.'
         MEND
