REPLYLOA MENTER 12,EQU,CP=NOCP,COM=REPLYLOA                        *
********************************************************************
* THIS COMMAND WILL SERVE AS THE REPLYING MODULE FOR THE REPLY     *
* COMMAND FUNCTION OF TSSO. THIS MODULE ACCEPT PARAMTERS FROM THE  *
* APPLY PROMPTER, DUE A SPACE SWITCH INTO THE CONSOLE ADDRESS SPACE*
* AND ATTEMPT TO REPLY TO THE COMMAND.                             *
*                                                                  *
* METHOD OF OPERATION                                              *
*                                                                  *
* 1) OBTAIN PARAMETER LIST IN THE FORM:                            *
*                                                                  *
*                                                                  *
* R1==> PARMS                                                      *
* PARMS                                                            *
* MSGID FOR 8 BYTES                                                *
* IMS COPY FOR 4 BYTES                                             *
* REPLY TEXT FOR 120 BYTES                                         *
*
* 2) OBTAIN INFORMATION ABOUT THE CONSOLE ADDRESS SPACE, SUCH AS   *
*    ASID, ASCB AND CONSOLE ID OF MASTER.
*
* 3) SSAR TO CONSOLE ASID
*
* 4) SAC TO CONSOLE ASID
*
* 5) SEARCH THE ORE AND  WQE CONTROL BLOCKS UNTIL EITHER THE IMS   *
*    COPY, OR MESSAGE ID IS LOCATED...
*
* 6) FORMAT AND ISSUE THE REPLY COMMAND, OR SET RETURN CODE SAYING *
*    THIS COULD NOT BE DONE.
*
*
* 7) RETURN TO THE SAFETY OF THE REPLY MODULE, AFTER RETURNING TO  *
*    KEY OF EIGHT.
*
********************************************************************
         LR    R2,R1              COPY PARM ADDRESS
         MVC   REPLYMSG(8),0(R2)
         MVC   IMSCOPY(4),8(R2)
         MVC   REPLYTXT(120),12(R2)
********************************************************************
*                                                                  *
* THE PARAMETERS ARE NOW SAFELY STORED AWAY, THE REST OF THIS CODE *
* MUST RUN IN THE CONSOLE ADDRESS SPACE. WE WILL SSAR AND SAC TO   *
* ACHIEVE THIS.                                                    *
* FIRST, WE MUST DETERMINE THE ASID OF THE COMMTASK ADDRESS SPACE. *
********************************************************************
         L     R2,16              CVT
         USING CVT,R2
         L     R3,CVTCUCB         UCMBASE
         USING UCM,R3
         LH    R4,UCMCTID         CONSOLE ADDRESS SPACE
         STH   R4,CONSASID        PUT AWAY
         LR    R4,R3
         AH    R4,=H'-4'          GO BACK 4 SPACES
         L     R4,0(R4)           UCM PREFIX
         USING UCMPRFX,R4
         L     R14,UCMMCENT       ADDRESS OF UCM FOR MASTER CONSOLE
         USING UCMLIST,R14
         XR    R15,R15
         IC    R15,UCMID
         STH   R15,MASTCONS
         L     R15,UCMASCB        GET ASCB OF COMMTASK ADDRESS SPACE
         ST    R15,COMMASCB       AND PUT IT AWAY
         DROP  R2,R14
         MODESET MODE=SUP,KEY=ZERO
         ESAR  R2                 GET SECONDARY ADDRESS SPACE
         ST    R2,SASID           STORE IT AWAY FOR LATER
         AXSET AX=ONE             GET AUTHORIZATION ANYWHERE
         LH    R2,CONSASID        LOAD UP ASID OF CONSOLE ADDRESS SPACE
         SSAR  R2
* GET CONSOLE ADDRESS SPACE LOCAL LOCK FOR REPLY FUNCTION.
         L     R11,COMMASCB       GET ASCB OF COMMTASK
         ST    R13,R13SAVE        SAVE REG 13
         LA    R13,LOCKSAVE       PROVIDE SETLOCK WITH SAVEAREA
GETLOCK  SETLOCK OBTAIN,TYPE=CML,ASCB=(11),REGS=USE,MODE=UNCOND,       X
               RELATED=(CONASCB,RELLOCK)
         SAC   X'100'             GO INTO SECONDARY ADDRESS SPACE
*                                 MODE (CONSOLE ASID)
REPLYIT  DS    0H
* WE NOW ENTER THE PART OF THE PROGRAM WHERE WE ACTUALLY TO THE REPLY
* AS REQUESTED IN THE COMMAND.
* WE WILL SEARCH THE CHAIN OF ORE ELEMENTS, LOOKING FOR ONE WITH A
* WQE TO MATCH WHAT WE WANT.
         L     R4,UCMRPYQ         LOAD ADDRESS OF FIRST ORE ENTRY
         LA    R7,20
ORELOOP  DS    0H
         USING OREF,R4
         L     R5,ORERWQE         GET ASSOCIATED WQE
         USING WQE,R5             ADDRESS IT
********************************************************************
* NOW WE ARE LOOKING AT A WQE ASSOCIATED WITH SOME OUTSTANDING
* REPLY. WE WILL DETERMINE IF THE REQUIREMENT IS FOR A SPECIFIC
* IMS COPY. IF IT IS, WE INSERT DFS996I INTO THE MESSAGE TEXT AND
* CHECK POSITION 25 FOR THE IMS IDENTIFIER. IF NOT, WE
* INSERT DFSXXXA INTO THE MESSAGE TEXT AND CHECK THE 120 POSITION
* FOR THE IMS INDENTIFIER. IF NEITHER OF THESE WORK OUT, WE
* GO TO THE NEXT WQE.
********************************************************************
         CLC   IMSCOPY(4),=CL4' '  IS THIS AN IMS REQUEST ?
         BE    LOOKMSG             NO IMS REQUEST- LOOK AT MSGID
         CLC   WQETXT+4(8),=CL8'DFS996I'  IS THIS AN IMS WQE ?
         BE    CHKCOPY                    YUP, CHECK WHICH COPY.
         CLC   WQETXT+4(8),=CL8'DFS810A'  IS THIS A FIRST IMS WQE ?
         BE    CHKCOPY2                   YUP, IMS COPY IS IN
CHKCOPY  DS    0H
********************************************************************
* HERE, WE ARE CHECKING THE IMS COPY IN THE WQE FOR THE IMS SHORT
* MESSAGE, I.E. DFS999I. THE MESSAGE APPEARS AFTER DFS810A HAS BEEN
* REPLIED TO ONCE.
********************************************************************
         CLC   WQETXT+25(3),IMSCOPY+1     CORRECT IMS COPY ?
         BE    GOTMSG                     YES !!
         B     TRYNEXT
CHKCOPY2 DS    0H
         CLC   WQETXT+79(3),IMSCOPY+1     CORRECT IMS COPY ?
         BE    GOTMSG                     YES !!
         B     TRYNEXT
*                                         A DIFFERENT PLACE THOUGH
         B     TRYNEXT
********************************************************************
* HERE WE KNOW WE ARE LOOKING FOR MESSAGE TEXT
********************************************************************
LOOKMSG  DS    0H
         CLC   WQETXT+4(8),REPLYMSG  IS THIS THE CORRECT MESSAGE
         BE    GOTMSG             GOT THE MESSAGE
TRYNEXT  DS    0H
         L     R4,ORELKP          TRY NEXT ORE
         LA    R4,0(R4)           ** CLEAR HIGH ORDER BYTE **
         LTR   R4,R4
         BZ    ENDLOOP
         BCT   R7,ORELOOP
         MVC   EXITRC(2),=H'8'    SET RETURN CODE FROM LOOP
         B     XMEMOFF            AND GET OUT OF CROSS MEM LOOP
ENDLOOP  DS    0H
         MVC   EXITRC(2),=H'8'
         B     XMEMOFF
GOTMSG   DS    0H
* HERE, WE PERCEIVE WE HAVE A REPLY TO MAKE, SO WE ISSUE THE
* REPLY COMMAND USING SVC 34. THE MESSAGE NUMBER FOR THE REPLY IS
* IN THE ORE.
         MVC   REPLYCMD(2),=H'90'
         MVC   REPLYCMD+2(2),=H'0'
         MVC   REPLYCMD+4(6),=CL6'REPLY '
         MVC   REPLYNUM(2),OREID
         MVC   REPLYLNE(90),REPLYTXT     COPY REPLY TEXT
         MVI   REPLYCOM,C','
         SAC   X'000'                    OUT OF XMEM MODE
         L     R2,SASID                  GET BACK ID OF SAVED ASID
         SSAR  R2
         L     R11,COMMASCB              GET COMTASK ASCB
RELLOCK  SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X
               RELATED=(CONASCB,GETLOCK)
         L     R13,R13SAVE
         LH    R0,MASTCONS               GET MASTER CONSOLE
         LA    R1,REPLYCMD               GET ADDRESS OF REPLYCOMAND
         SVC   34
         MVC   EXITRC(2),=H'0'
         B     KEYEIGHT
         DROP  R3,R4
XMEMOFF  DS    0H
         L     R11,COMMASCB              GET COMTASK ASCB
         SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X
               RELATED=(CONASCB,GETLOCK)
* HERE, IF EXITRC=0 THEN WE HAVE REPLIED, OTHERWISE, THE MESSAGE
* WAS NOT OUTSTANDING.
         SAC   X'000'                   GO BACK TO HOME ADDRESS SPACE
         L     R2,SASID                 GET ID OF SAVED ASID
         SSAR  R2
         L     R13,R13SAVE
KEYEIGHT DS    0H
         MODESET KEY=NZERO,MODE=PROB
ENDPROG  DS    0H
* NOTE: THE MLEAVE MACRO LOADES R15 WITH EXITRC
         MLEAVE
LOCKSAVE DS    6F            SAVE AREA FOR SETLOCK
R13SAVE  DS    F             SAVE R13 FOR SETLOCK
ONE      DC    H'1'
SASID    DS    F
CONSASID DS    H
COMMASCB DS    F
MASTCONS DS    H
REPLYMSG DC    CL8' '
IMSCOPY  DC    CL8' '
REPLYTXT DC    CL90' '
REPLYCMD DC    H'0',H'0'     REAL LENGTH, ZERO
         DC    CL6'REPLY '   MVS COMMAND "REPLY"
REPLYNUM DC    CL2' '
REPLYCOM DC    C','          COMMA
REPLYLNE DC    CL90' '
         CVT   DSECT=YES
         IHAORE
UCM      DSECT
         IEECUCM
         IHAWQE
         IHAPSA
         END   REPLYLOA
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY REPLYLOA(''V 1.0 &SYSDATE &SYSTIME'') '
 PUNCH ' ENTRY    REPLYLOA'
 PUNCH ' NAME     REPLYLOA(R)'
         END
