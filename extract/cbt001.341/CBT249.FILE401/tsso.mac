         TITLE '   T S S O      '
***********************************************************************
*
* REGISTER USAGE: R12 IS THE PRIMARY BASE REGISTER
*                 R11 IS THE SECONDARY BASE REGISTER (AT 4096 PAST R12
*                 R10 IS THE BASE REGISTER FOR THE TSSO CVT- CHAINED
*                     OFF THE SSCTSUSE FIELD IN TSSO'S SSCT
*                 R4 POINTS TO THE SSCT ENTRY FOR TSSO
*                 R9 POINTS TO THE GETMAINED AREA
* NOTE: LAST MESSAGE NUMBER IS 38.
***********************************************************************
&WTOR    SETC  'YES'                   INCLUDE SUPPORT FOR WTOR REPLY
TSSO     CSECT
         STM    R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR     R12,R15            LOAD ENTRY POINT OF TSSO
         LA     R11,4095(R12)
         LA     R11,1(R11)
         USING  TSSO,R12,R11       GET ADDRESSIBILITY
         LR     R8,R1
         GETMAIN R,LV=72           WE NEED STORAGE FOR THE SAVE AREA
         LTR    R15,R15
         BNZ    GETMERR            GETMAIN FAILED
         ST     R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST     R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR     R13,R1             KEEP A COPY IN R13
***********************************************************************
* INITIALIZE DSECT VARIABLES.
***********************************************************************
         GETMAIN R,LV=4096
         LR    R9,R1
         USING DATD,R9
         MVC   ESTAED(ESTAECE-ESTAEC),ESTAEC
         MVC   ATTACHD(ATTACHCE-ATTACHC),ATTACHC
         MVC   CLOSED(CLOSECE-CLOSEC),CLOSEC
         MVC   OPEND(OPENCE-OPENC),OPENC
         MVC   READD(READCE-READC),READC
         MVC   TWTOD(TWTOCE-TWTOC),TWTOC
         MVC   PARMDCBD(PARMDCBE-PARMDCBC),PARMDCBC  PARMLIB DCB
         MVC   RACINITD(RACINITE-RACINITC),RACINITC  RACINIT MACRO
         MVC   CALL1D(CALL1CE-CALL1C),CALL1C
         MVC   WTO1D(WTO1CE-WTO1C),WTO1C
         MVC   WTO4D(WTO4CE-WTO4C),WTO4C
         MVC   WTO5D(WTO5CE-WTO5C),WTO5C
         MVC   WTO9D(WTO9CE-WTO9C),WTO9C
         MVC   WTO10D(WTO10CE-WTO10C),WTO10C
         MVC   WTO11D(WTO11CE-WTO11C),WTO11C
         MVC   WTO12D(WTO12CE-WTO12C),WTO12C
         MVC   WTO14D(WTO14CE-WTO14C),WTO14C
         MVC   WTO15D(WTO15CE-WTO15C),WTO15C
         MVC   WTO16D(WTO16CE-WTO16C),WTO16C
         MVC   WTO17D(WTO17CE-WTO17C),WTO17C
         MVC   WTO18D(WTO18CE-WTO18C),WTO18C
         MVC   WTO19D(WTO19CE-WTO19C),WTO19C
         MVC   WTO20D(WTO20CE-WTO20C),WTO20C
         MVC   WTO21D(WTO21CE-WTO21C),WTO21C
         MVC   WTO22D(WTO22CE-WTO22C),WTO22C
         MVC   WTO23D(WTO23CE-WTO23C),WTO23C
         MVC   WTO24D(WTO24CE-WTO24C),WTO24C
         MVC   WTOR25D(WTOR25CE-WTOR25C),WTOR25C
         MVC   WTOR26D(WTOR26CE-WTOR26C),WTOR26C
         MVC   WTO27D(WTO27CE-WTO27C),WTO27C
         MVC   WTO28D(WTO28CE-WTO28C),WTO28C
         MVC   WTO29D(WTO29CE-WTO29C),WTO29C
         MVC   WTO32D(WTO32CE-WTO32C),WTO32C
         MVC   WTO36D(WTO36CE-WTO36C),WTO36C
         MVC   WTO38D(WTO38CE-WTO38C),WTO38C
         MVC   PRIMSSIB(36),MASKSSIB
         MVC   PARMMEM(8),=CL8' ' BLANK OUT PARMMEM
         MVI   PARMFLAG,X'00'     ALL FLAGS OFF
         XC    COUNTCMD(4),COUNTCMD    INIT COUNT OF COMMANDS
***********************************************************************
* ESTABLISH DEFAULTS FOR PARMLIB PARAMETERS IN CASE ONE IS LEFT OUT
***********************************************************************
         MVC   TMPNAME(8),=CL8'IKJEFT01'  DEFAULT TMP NAME
         MVI   TSSOSRC,C'#'               DEFAULT SYSTEM RECOGNITION
*                                         CHARACTER
         MVC   TSSOSSSM(8),=CL8'TSSOSSSM' DEFAULT NAME FOR SSSM MODULE
         MVC   TSSOTABN(8),=CL8'NONE'     DEFAULT NAME FOR TSSO TABLE
         MVC   TSSORACF+1(8),=CL8'NONE'   ESTABLISH DEFAULT
         MVC   MAXCMDS(4),=F'15'           DEFAULT MAXIMUM NUMBER OF
*                                         SIMULTANEOUS COMMANDS
         MVI   TSSOSWAP,C'Y'              DEFAULT IS NON-SWAP
         MVC   TSSOPROM,C'N'              DEFAULT NOPROMPT
         MVC   MAXWTO(4),=F'100'          DEFAULT MAXWTO VALUE = 100
*
***********************************************************************
* END PARMLIB DEFAULT SETTING
***********************************************************************
         L     R8,0(R8)           GET ADDRESS OF PARM FIELD IN R8
         LH    R7,0(R8)           GET LENGTHS OF PARMS
         LTR   R7,R7              WAS THERE ON ?
         BZ    NOPARM
         LA    R8,2(R8)           POINT TO MEMBER NAME
         BCTR  R7,0               FOR EX
         EX    R7,MOVEPARM        AND MOVE THE MEMBER NAME
         B     AR1
MOVEPARM MVC   PARMMEM(0),0(R8)   ** EXECUTED **
AR1      DS    0H
         B     ALLOPARM           GOT THE MEMBER- GO ALLOCATE PARMLIB
NOPARM   DS    0H
         MVC   PARMMEM(8),=CL8'TSSOPARM'
ALLOPARM DS    0H
         MVC   TSSOCMDL(2),=H'50'
         MVC   TSSOCMD(50),ALPRMLIB   MOVE IN TSO COMMAND TO ALLOC PARM
         BAL   R14,ISSUECMD           GO DO THE COMMAND
GOTMEM   DS    0H
         OC    PARMMEM(8),=CL8' '        MAKE UPPER CASE
***********************************************************************
*  READ INPUT FROM SYS1.PARMLIB. THE TSSO MEMBER NAME FROM PARMLIB
*  WILL BE PASSED AS A PARAMETER, ALLOWING MULTIPLE TSSO PARAMETER
*  MEMBERS. THE DEFAULT MEMBER NAME WILL BE "TSSOPARM". IF THE START
*  COMMAND IS ISSUED LIKE  "S TSSO,PARM='NEWPARMS' THEN TSSO WILL
*  GO OUT AND USE SYS1.PARMLIB(NEWPARMS) FOR TSSO INPUT.
***********************************************************************
         CLC   PARMMEM(8),=CL8'PROMPT'   WAS PROMPTING REQUESTED?
         BNE   PROMPTNO                  NO, NO NEED
         OI    PARMFLAG,X'40'            INDICATE PROMPTING DESIRED
         MVC   PARMMEM(8),=CL8' '        BLANK OUT PARMMEM
         LA    R7,WTORECB
         XC    WTORECB(4),WTORECB
         LA    R8,PARMMEM
         WTOR  ,(R8),8,(R7),MF=(E,WTOR25D)   ** PROMPT **
         WAIT  ECB=WTORECB
         OC    PARMMEM(8),=CL8' '        MAKE UPPER CASE
PROMPTNO DS    0H
         LA    R7,PARMDCBD        GET PARMLIB DCB
         OPEN  ((R7),INPUT),MF=(E,OPEND)   OPEN IT !!!
         USING IHADCB,R7
         TM    DCBOFLGS,DCBOFOPN   OPEN SUCCESSFULL ?
         BNO   NPARMDCB            NOPE, MUST NOT BE THERE. PRETEND
*                                  NO PARAMETERS.
         CLC   DCBLRECL(2),=H'80'  LRECL IS 80 BYTES ?
         BNE   NPARM3              NOPE, SORRY...
*
         LH    R0,DCBBLKSI         GET BLOCK SIZE OF PARMLIB
         ST    R0,PARMBLK          REMEMBER BLOCK SIZE
*
         GETMAIN R,LV=(0)          GETMAIN 1 BUFFER
         ST    R1,PARMBUF          REMEMBER WHERE IT IS
         OI    PARMFLAG,X'80'      INDICATE STORAGE OBTAINED
*
         FIND  (R7),PARMMEM,D     FIND MEMBER
         LTR   R15,R15             IS IT THERE ?
         BNZ   NPARM2              NOPE, ASSUME ALL DEFAULTS
         XR    R3,R3               R3 WILL BE USED FOR NUMBER OF BYTES
*                                  PROCESSED IN THE BLOCK
READLOOP DS    0H
         L     R8,PARMBUF
         READ  DECB,SF,(R7),(R8),MF=E          PUT IT INTO BUFFER
         CHECK DECB
         L     R1,DECB+16          ADDRESS OF IOB
         LH    R1,14(R1)           RESIDUAL I/O COUNT
         LH    R0,DCBBLKSI         GET DCB BLOCKSIZE
         SR    R0,R1               GET NUMBER OF CHARS IN BUFFER
         STH   R0,PARMREAD         ACTUAL NUMBER OF BYTES IN BUFFER
***********************************************************************
* R8 WILL POINT TO THE CURRENT RECORD BEING PROCESSED.
*    OR THE INPUT BUFFER FOR THE PROMPTING WTOR
***********************************************************************
PARMLOOP DS    0H
***********************************************************************
* WE WILL CALL THE NOW INFAMOUS TSSO PARSE ROUTINE TO SCAN THE
* PARMLIB INPUT
***********************************************************************
PRSCHECK DS    0H
         ST    R8,PARS1            PARM 1 IS THE ADDRESS OF STRING
*
         MVC   PARS2(4),=F'80'     PARM 2 GETS THE LENGTH OF THE STRING
*
         MVI   PARARRAY,X'40'
         MVC   PARARRAY+1(49),PARARRAY
         LA    R6,PARARRAY
         ST    R6,PARS3
         MVC   PARARRAY(2),=H'3'   MAXIMUM OF THREE TOKENS...
*
         LA    R6,PARSSEP          GET ADDRESS OF SEPERATOR CHARACTERS
         ST    R6,PARS4
         MVC   PARSSEP(4),=CL4',='
*
         LA    R1,PARSPARM         LOAD UP PARM REGISTER
         LINK  EP=TSSOPARS         CALL THE FAMOUS PARSE ROUTINE.
***********************************************************************
* THE ARRAY SHOULD NOW BE FILLED WITH ALL KINDS OF GOOD STUFF.
***********************************************************************
         LA    R5,PARARRAY+2      POINT TO FIRST TOKEN
***********************************************************************
* THIS SECTION OF CODE MAY BE ENTERED OUT OF EITHER THE PARMLIB
* INPUT ROUTINE, OR THE PROMPTING ROUTINE. THE ENTRY FROM THE PROMPT
* ROUTINE IS NON OBVIOUS (READ  KLUDGE) SO BEWARE.
***********************************************************************
         CLC   0(8,R5),=CL8'SRC'      WAS IT SRC?
         BE    PRSSRC                 YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'SSSM'     WAS IT SSSM ?
         BE    PRSSSSM                YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'TABLE  '  WAS IT TABLE ?
         BE    PRSTABLE               YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'MAXCMDS'  WAS IT MAXCMD ?
         BE    PRSMAXCM               YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'NONSWAP'  WAS IT NONSWAP ?
         BE    PRSNSWAP               YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'PROMPT'   WAS IT PROMPT ?
         BE    PRSPROM                YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'END    '  WAS IT END     ?
         BE    PRSEND                 YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'RACFID '  WAS IT REQUEST FOR RACF ID?
         BE    PRSRACF                YUP, GO HANDLE IT.
         CLC   0(8,R5),=CL8'MAXWTO '  WAS IT REQUEST FOR MAXIMUM WTOS ?
         BE    PRSMAXWT               YUP, GO HANDLE IT.
         CLI   0(R5),C'*'             WAS IT A COMMENT ?
         BE    PARMNEXT
         B     PRSINV
PRSTMPNM DS    0H
* PROCESS ALTERNATE TMP REQUEST
         MVC   TMPNAME(8),16(R5)
         B     PARMNEXT
PRSSRC   DS    0H
         MVC   TSSOSRC(1),16(R5)
         B     PARMNEXT
PRSSSSM  DS    0H
         MVC   TSSOSSSM(8),16(R5)
         B     PARMNEXT
PRSTABLE DS    0H
         MVC   TSSOTABN(8),16(R5)
         B     PARMNEXT
PRSMAXCM DS    0H
* UP TO 99 MAX COMMANDS MAY BE SPECIFIED. CHECK TO SEE IF ONE DIGIT
* OR 2 WAS SPECIFIED, THEN CALL THE CONVERT ROUTINE TO FIGURE OUT
* WHAT IS WAS.
         LA    R0,1                  ASSUME 1 DIGIT.
         CLI   17(R5),X'40'          IF BLANK, WE HAVE ONLY ONE DIGIT
         BE    CMONEDIG              INDEED, TWO DIGITS
         LA    R0,2                  OTHERWISE, TWO DIGITS
CMONEDIG DS    0H                    ALL THIS, JUST TO GET THE LENGTH
*                                    INTO R0
         LA    R1,16(R5)             POINTER TO PARSE STRING
         LA    R10,DATD              POINT R10 TO WORKAREA.
         CALL  JCECVTDB              CONVERT THE SUCKER.
         LTR   R1,R1                 ANY RESULTS ?
         BNZ   MAXCMOK               YUP, APPARAENTLY OK.
         WTO   'TSSI018E INVALID MAXCMD PARAMETER- DEFAULT TAKEN (5)'
         B     PARMNEXT
MAXCMOK  DS    0H
         ST    R1,MAXCMDS            STORE RESULTS..
         B     PARMNEXT
*
PRSMAXWT DS    0H
***********************************************************************
* THIS IS THE PARSE ROUTINE FOR THE MAXIMUM WTO PARMLIB ENTRY. THIS   *
* ROUTINE WILL DETERMINE HOW MANY DIGITS WERE SPECIFIED FOR THE MAXWTO*
* VALUE, AND CALL THE NIFTY EBCIDIC DECIMAL TO BINARY SUB TO DO THE   *
* CONVERSION. THIS VALUE IS THEN STORED AT MAXWTO. UP TO 4 DIGITS MAY *
* BE SPECIFIED.                                                       *
***********************************************************************
         XR    R1,R1                 START THE COUNT.
         LA    R2,16(R5)
WTLOOP   DS    0H
*
         CLI   0(R2),X'40'           LOOKING FOR BLANK.
         BE    WTBLANK               AHH. FOUND IT !
         LA    R1,1(R1)              INCREMENT COUNT.
         CH    R1,=H'5'              TO BIG ?
         BE    MAXWTINV              YUP, DONT ALLOW.
         LA    R2,1(R2)              TRY NEXT DIGIT.
         B     WTLOOP
*
WTBLANK  DS    0H
***********************************************************************
* NOTE, R1 HAS COUNT OF DIGITS.
***********************************************************************
         LR    R0,R1                 COPY COUNT OF DIGITS.
         LA    R1,16(R5)             POINT TO START OF STRING TO CNVT.
         LA    R10,DATD
         CALL  JCECVTDB              CONVERT THE SUCKER.
         BNZ   MAXWTINV              YUP, APPARAENTLY BAD ONES.
         LTR   R1,R1                 ANY RESULTS ?
MAXWTOK  DS    0H
         ST    R1,MAXWTO             STORE RESULTS..
         B     PARMNEXT
*
MAXWTINV DS    0H
         WTO   'TSSI035E INVALID MAXWTO PARAMETER- DEFAULT TAKEN (100)'
         B     PARMNEXT
*
PRSNSWAP DS    0H
         MVC   TSSOSWAP(1),16(R5)
         B     PARMNEXT
*
PRSPROM  DS    0H
         CLI   16(R5),C'Y'          DOES THE ANSWER START WITH "Y"?
         BNE   PRSPROME
         OI    PARMFLAG,X'40'       INDICATE PROMPTING REQUESTED
PRSPROME DS    0H
         B     PARMNEXT
*
PRSRACF  DS    0H
         TM    PARMFLAG,X'20'    ARE WE IN PARSE MODE ?
         BNO   RACFNPRS          NO, OK TO ACCEPT RACF PARAMETER.
         WTO   'TSSI038A RACFID PARAMETER REJECTED- NOT ACCEPTED IN PROX
               MPT MODE'
         B     PARMNEXT
RACFNPRS DS    0H
         MVC   TSSORACF+1(8),16(R5)
         LA    R10,8
         LA    R1,TSSORACF+1
         XR    R5,R5
RLOOP    DS    0H                GET THE LENGTH
         CLI   0(R1),X'40'       OF THE USER ID AS
         BE    RLOOPEND          REQUIRED BY THE RACINIT MACRO
         LA    R5,1(R5)
         LA    R1,1(R1)
         BCT   R10,RLOOP
RLOOPEND DS    0H
         STC   R5,TSSORACF
         B     PARMNEXT
*
PRSEND   DS    0H
         TM    PARMFLAG,X'20'      WAS END ENTERED FROM PROMPT MODE ?
         BO    ENDPARMS            YUP, BEAM ME UP SCOTTY.
         B     PARMEND
PARMNEXT DS    0H
         TM    PARMFLAG,X'20'      ARE WE IN PROMTING MODE ?
         BO    CHKPROMP            IF IN PROMPTING MODE, PROMPT
         LA    R8,80(R8)
         LA    R3,80(R3)
         CH    R3,PARMREAD         ARE WE AT END OF BLOCK YET?
         BL    PARMLOOP
         XR    R3,R3
         XR    R8,R8
         B     READLOOP
*
PRSINV   DS    0H
         MVC   WTO16D+32(8),0(R5)     MOVE IN VERB FOR MESSAGE
         WTO   MF=(E,WTO16D)          INVALID (YIPES!)
         B     PARMNEXT               GO GET NEXT RECORD
*
PRSNEQU  DS    0H
         MVC   WTO17D+32(8),0(R5)     MOVE IN VERB FOR MESSAGE
         WTO   MF=(E,WTO17D)          INVALID FORMAT
         B     PARMNEXT               GO GET NEXT RECORD
*
NPARMDCB DS    0H
         WTO   'TSSI019E MISSING PARMLIB DD STATEMENT- DEFAULTS TAKEN'
         B     PARMEND
NPARM2   DS    0H
         MVC   WTO18D+20(8),PARMMEM
         WTO   MF=(E,WTO18D)           MEMBER NOT FOUND -
         B     PARMEND
NPARM3   DS    0H
         WTO   'TSSI020E SYS1.PARMLIB IS NOT BLOCKED AT 80 BYTES- PARMLX
               IB INPUT IGNORED'
         B     PARMEND
PARMEND  DS    0H
NEGPROM  DS    0H
         TM    DCBOFLGS,DCBOFOPN   IS THE SUCKER OPEN ?
         BNO   CHKPROMP            NOPE, MUST NOT BE THERE. SEE IF
*                                  PROMPTING WAS REQUESTED.
         CLOSE ((R7),LEAVE),MF=(E,CLOSED)
*
         MVC   TSSOCMDL(2),=H'20'
         MVC   TSSOCMD(20),FRPRMLIB   MOVE IN TSO COMMAND TO FREE PARM
         BAL   R14,ISSUECMD           GO DO THE COMMAND
*
         TM    PARMFLAG,X'80'      DID WE GET STORAGE ?
         BNO   NOGETM              NOPE, DONT BOTHER WITH FREEMAIN
         L     R0,PARMBLK
         L     R1,PARMBUF
         FREEMAIN R,LV=(R0),A=(R1)
         DROP  R7
NOGETM   DS    0H
CHKPROMP DS    0H
         OI    PARMFLAG,X'20'      INDICATE WE ARE INPROMPTING MODE.
         TM    PARMFLAG,X'40'      WAS PROMPTING DESIRED ?
         BNO   ENDPARMS            NO, GO TO END PARMS ROUTINE
         XC    WTORECB(4),WTORECB
         LA    R7,WTORECB
         LA    R8,PROMPINP
         MVC   PROMPINP(80),=CL80' '    BLANK OUT RESPONSE AREA
         WTOR  ,(R8),80,(R7),MF=(E,WTOR26D)   ** PROMPT **
         WAIT  ECB=WTORECB
         OC    PROMPINP(80),=CL80' '     UPPERCASE
         B     PRSCHECK                  GO DO THE PARM
ENDPARMS DS    0H
LOADWTO  DS    0H
         LOAD  EP=TSSOWTO,ERRET=NOTSSWTO
         ST    R0,WTOADDR
         B     GETRING
NOTSSWTO DS    0H
         WTO   'TSSI996E TSSO TERMINATING BECAUSE OF NO TSSOWTO MODULE'
         B     EXIT0
         EJECT
************************************************************
*    GETMAIN STORAGE FOR THE TSSO COMMAND RING, AND SET UP *
*    ALL KINDS OF POINTERS.                                *
*                                                          *
************************************************************
GETRING  DS    0H
         L     R2,MAXCMDS          GET VALUE FOR MAX COMMANDS
         SLL   R2,8                MULTIPLY BY 256- SIZE PER ENTRY
         MODESET KEY=ZERO
         GETMAIN R,LV=(R2),SP=241   GET THE STORAGE
         ST    R1,CMDRINGL         AND PUT IT IN CMDRING
*
         L     R1,CMDRINGL
         LR    R2,R1               COPY STARTING ADDRESS
         L     R4,MAXCMDS          GET MAX COMMAANDS AGAIN
         BCTR  R4,0                SUBTRACT 1 FOR LOOP
CMNDLOOP DS    0H
         XC    0(256,R2),0(R2)     ZERO OUT STORAGE
         LA    R3,256(R2)          POINT TO NEXT ENTRY
         ST    R3,0(R2)            AND STORE ENTRY IN POINTER FIELD
         LR    R2,R3               MAKE EM EQUAL
         BCT   R4,CMNDLOOP         DO IT AGAIN
*
         XC    0(256,R2),0(R2)     ZERO OUT STORAGE
         L     R3,CMDRINGL
         ST    R3,0(R2)            COMPLETE THE RING
         ST    R3,CURRCMD          MARK THIS AS CURRENT COMMAND
*                                  THE NEXT COMMAND IN RING
         B     GETRACF
*
************************************************************
* NEXT, WE WILL DYNAMICALLY CHANGE OUR RACF USER ID TO THAT*
* OF THE USER SPECIFIED VALUE. THIS IS DONE THROUGH A RACF *
* RACINIT CALL. IF THE PARAMETER IS NOT SPECIFIED,         *
* THEN THIS RACINIT IS NOT DONE. NOTE THAT A USER ID OF    *
* TSSO (OR WHATEVER) IN UADS WILL ALSO BE EFFECTIVE AS A   *
* WAY OF PROVIDING SOME COMBINATION OF USER ATTRIBUTES TO  *
* A TSSO COMMAND FROM THE UADS DATASET.
************************************************************
GETRACF  DS    0H
         CLC   TSSORACF+1(8),=CL8' '  RACF ID WANTED ?
         BE    NORACF               NOPE...
         CLC   TSSORACF+1(8),=CL8'NONE' FOR THOSE WHO LIKE TO
*                                     SPECIFY PARMS THAT DO NOTHING
         BE    NORACF
         RACSTAT                  IS RACF ACTIVE ?
         LTR   R15,R15
         BNZ   RACFBAD
         LTR   R15,R15
         BNZ   RACFBAD
         L     R1,X'224'          GET ASCB ADDRESS
         USING ASCB,R1            ADDRESS THE ASCB
         L     R1,ASCBASXB        GET ASXB POINTER
         ST    R1,TSSOASXB
         USING ASXB,R1
         LA    R2,ASXBSENV
         ST    R2,TSSOSENV        STORE PLACE TO PUT NEW SECURITY
*                                 ENVIRONMENT
         L     R2,ASXBSENV        LOAD ASXBSENV FIELD
         ST    R2,RACFSENV        ASXB BEFORE WE CHANGE IT.
         LA    R2,ASXBSENV
         DROP  R1                 (ASXB)
         RACINIT USERID=TSSORACF,MF=(E,RACINITD),ACEE=(R2)
         LTR   R15,R15
         BZ    RACFOK
*
* HERE, THE RACINIT WAS BAD, SO WE MUST REPAIR THE DAMAGE IT CAUSED
         L     R1,RACFSENV        GET ADDRESS OF PREVIOUS ACEE
         L     R2,TSSOASXB        AND ADDRESS TO PUT IT.
         USING ASXB,R2
         ST    R1,ASXBSENV        AND REPAIR DAMAGE CAUSED BY BAD
*                                 RACINIT
*
RACFBAD  DS    0H
         WTO   'TSSI021E ERROR ESTABLISING RACF ID- TSSO RUNNING WITH NX
               O RACF AUTHORITY'
RACFOK   DS    0H
         L     R2,TSSOASXB        GET ASXB AGAIN
         USING ASXB,R2
         MVC   ASXBUSER(7),TSSORACF+1
         DROP  R2
NORACF   DS    0H
         B     GETCVT
************************************************************
*                                                          *
*        FIND OUR SUBSYSTEM CVT (SSCT)                     *
*                                                          *
************************************************************
GETCVT   DS    0H
         SPACE
         L     R2,540              PSATOLD-PSA
         ST    R2,TSSOTCB          SAVE TCB ADDRESS
         USING TCB,R2
         L     R2,TCBJSCB          GET JSCB FIELD
         USING IEZJSCB,R2
         L     R2,JSCBACT          MAKE SURE ITS ACTIVE JSCB
         ST    R2,TSSOJSCB
         L     R2,JSCBSSIB         AND PLUCK OFF SSIB FIELD
         USING SSIB,R2
         ST    R2,HOLDSSIB         PUT IT AWAY FOR NOW
         L     R3,16               CVTPTR
         USING CVT,R3
         L     R4,CVTJESCT         JES CONTROL TABLE
         USING JESCT,R4
         SPACE
*              FOR SUBSYSTEMS, SSIBSSNM IS MSTR, SSIBJBID IS NAME
*              FOR STC,        SSIBSSNM IS JES2, SSIBJBID IS STC NNNN
         SPACE
         MVC   PRIMSSIB+8(4),JESPJESN
         L     R4,JESSSCT
         USING SSCT,R4
ISSCTL   ICM   R4,15,SSCTSCTA      POINT TO NEXT SSCT
         BZ    NOSSCT              IF END, EXIT
         CLC   SSCTSNAM(4),=CL4'TSSO'   IS THIS OURS ?
         BNE   ISSCTL              NO - LOOP
         DROP  R2                  SSIB
         EJECT
************************************************************
*                                                          *
*        OBTAIN THE SSVT (NEW OR OLD)                      *
*        ALSO, OBTAIN THE TSSO CVT                         *
*                                                          *
************************************************************
         SPACE
         MODESET KEY=NZERO
         GETMAIN R,LV=1024,SP=228
************************************************************
* GETMAIN THE TSSO CVT
************************************************************
         LR    R10,R1
         USING TSSOCVT,R10
         XC    0(256,R1),0(R1)
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         MODESET KEY=ZERO
         ST    R10,SSCTSUSE        STORE TSSO CVT ADDRESS
************************************************************
* NOW THAT WE HAVE OUR CVT, FILL IN GLOBAL VARIABLES FROM  *
* LOCAL ONES
************************************************************
         MVC   NUMCMDS(4),MAXCMDS    FILL IN MAX COMMANDS
         MVC   TSSOSSIB(4),HOLDSSIB
         MVC   TSSOCHAR(1),TSSOSRC   DEFAULT IS A '#'
         MVC   CMDRING(4),CMDRINGL
         MVC   NEXTCMD(4),CMDRING    MARK FIRST PLACE   FOR SSSM
*                                     TO PUT COMMAND
         L     R1,X'224'          ASCB ADDRESS
         ST    R1,$SVPASCB        NEEDED FOR CROSS MEMORY POST OF
*                                 TSSO FROM TSSOSSSM
         USING ASCB,R1            WHILE WE ARE HERE, MOVE HIGH
*                                 NUMBER INTO JOB WAIT TIME FIELD
*                                 SO TSSO WILL NOT TIMEOUT
         L     R6,=F'86400'       ALL DAY...
         ST    R6,ASCBSWTL        STICK IN JOB WAIT TIME.
         DROP  R1
************************************************************
*                                                          *
*        SET ESTAE EXIT TO CLEAN UP ABENDS                 *
*                                                          *
************************************************************
         SPACE
         LOAD  EP=TSSOESTA,ERRET=BADESTAE,LSEARCH=YES
         LR    R6,R0              SAVE ENTRY POINT
         ESTAE (R6),TERM=YES,PARAM=(R10),MF=(E,ESTAED)
         SPACE
         LTR   R15,R15
         BNZ   BADESTAE
         B     OKESTAE
BADESTAE DS    0H
         WTO   MF=(E,WTO9D)     ** GIVE USER BAD NEWS **
         B     EXIT0
         EJECT
OKESTAE  EQU   *
************************************************************
*                                                          *
* FIND THE SSVT AND START FILLING IT IN                    *
*                                                          *
************************************************************
         ICM   R2,15,SSCTSSVT      IS OUR SSVT IN?
         USING SSVT,R2
         BZ    NOSSVT              BRANCH IF ALREADY IN
         SPACE
         WTO   'TSSI021A SSVT LOCATED FOR TSSO- MULTIPLE TSSO ADDRESS SX
               ACES MAY EXIST',DESC=(6)
NOSSVT   DS    0H
         GETMAIN R,LV=1024+256+4+4,SP=241
* THE ABOVE INSTRUCTION GETMAINS THE SPACE NEEDED FOR THE TSSO
* SSVT. THE LENGTHS ARE: 1024 FOR THE FUNCTION ROUTINE ADDRESSES
*                         256 FOR THE ONE BYTE LENGTH
*                           4 FOR THE SSVT HEADER
*                           4 FOR THE BTL SSVT IDENTIFIER (SSVT)
*                        1284 ==== TOTAL
         XC    0(256,R1),0(R1)
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         XC    1024(256,R1),1024(R1)
         XC    1280(4,R1),1280(R1)
         SPACE
         MVC   0(4,R1),=C'SSVT'
         LA    R2,4(,R1)           GET ADDRESS OF ACTUAL SSVT
* R2 POINTS TO THE SSVT AS IT WILL BE PRESENTED TO MVS...
         XC    $SVSTUS,$SVSTUS     ZERO STATUS BYTE
         B     IHAVSSVT            SKIP SSVT CLAIM
         SPACE
IHAVSSVT DS    0H
         ST    R2,$SSVT            SAVE SSVT ADDRESS
         ST    R4,$SSCT            SAVE SSCT ADDRESS
         EJECT
* THIS SECTION OF CODE WILL BUMP UP THE COUNT OF SUBSYSTEM
* ACCEPTING WTO REQUESTS BY 1. THIS FIELD IS KEPT IN THE UCM.
         L     R1,16
         USING CVT,R1
         L     R3,CVTCUCB           GET UCM PREFIX
         AH    R3,=H'-4'
         L     R3,0(R3)             GET UCM PREFIX
         USING UCMPRFX,R3
         L     R14,UCMMCENT         GET ADDRESS OF UCM FOR MASTCONS
         USING UCMLIST,R14
         XR    R15,R15
         IC    R15,UCMID            GET THE CONSOLE ID
         STH   R15,MASTCONS         AND STORE IT...
         DROP  R3,R14
         L     R3,CVTCUCB           GET UCM PREFIX
         USING UCM,R3
         AIF   ('&WTOR' NE 'YES').NOBRD
         LH    R1,UCMBRDST
         LA    R1,1(R1)
         STH   R1,UCMBRDST
.NOBRD   ANOP
************************************************************
*                                                          *
*        LOAD THE SUBSYSTEM MONITOR                        *
*                                                          *
************************************************************
         SPACE
         LA    R2,TSSOSSSM
         LOAD  EPLOC=(R2),GLOBAL=(YES,P),LSEARCH=YES,ERRET=NOSSSM
* THE TSSOSSSM MODULE IS NOW LOCATED SOMEWHERE IN CSA. WE WILL REMEMBER
* THE ADDRESS...
         SPACE
         ST    R0,$SSSM
         MVC   SSSMNAME(8),TSSOSSSM      COPY NAME TO TSSO CVT
         B     GETTABLE
NOSSSM   DS    0H
         WTO   'TSSI996E TSSO IS UNABLE TO LOAD THE SUBSYSTEM SUPPORT MX
               ODULE SPECIFIED- AND IS TERMINATING',DESC=(6)
         B     EXIT0
************************************************************
*                                                          *
*        LOAD THE AUTOMATED OPERATOR FACILITY TABLE        *
*                                                          *
************************************************************
GETTABLE DS    0H
         LA    R2,TSSOTABN
         CLC   0(8,R2),=CL8'NONE'
         BE    AOFDEACT
         LOAD  EPLOC=(R2),GLOBAL=(YES,P),LSEARCH=YES,ERRET=NOLOAD
         ST    R0,TSSOTABL
         LR    R6,R0
         CLC   4(8,R6),=CL8'TSSOTABL'        MAKE SURE WE REALLY
*                                            HAVE A TSSO TABLE
         BNE   TABNGOOD                      DARN
         CLC   44(8,R6),=CL8'TSSO 4.1'       CHECK VERSION NUMBER
         BNE   TABNGOO2                      INCORRECT VERSION
         MVC   WTO19D+38(8),TSSOTABN
         WTO   MF=(E,WTO19D)
         B     BLDSSVT
TABNGOOD DS    0H                      ** NOT A TSSO TABLE **
         MVC   WTO21D+20(8),TSSOTABN
         WTO   MF=(E,WTO21D)
         B     NOLOAD
TABNGOO2 DS    0H                      ** TABLE AT INCORRECT VERSION **
         MVC   WTO32D+20(15),TSSOTABN
         WTO   MF=(E,WTO32D)
         B     NOLOAD
NOLOAD   DS    0H
         MVC   WTO20D+20(8),TSSOTABN
         WTO   MF=(E,WTO20D)
         XR    R3,R3
         ST    R3,TSSOTABL
         B     BLDSSVT
AOFDEACT DS    0H
         WTO   'TSSI031E TSSO AUTOMATED OPERATIONS FACILITY IS DEACTIVAX
               TED BY PARMLIB INPUT'
         B     BLDSSVT
         SPACE
************************************************************
*                                                          *
*        BUILD THE SSVT (FUNCTION MATRIX FROM SSSM)        *
*                                                          *
* THE FORMAT OF THE OFFSETS OF SSSM IS AS FOLLOWS. AT SSSM *
* SSSM+40: NUMBER OF FUNCTIONAL ROUTINES, 2 BYTES.
* SSSM+42: A TABLE OF 8   BYTES ENTRIES... THIS TABLE LOOKS*
*          LIKE:
*          DC    F'SUBSSYTEM FUNCTION CODE',A(ROUTINE TO HANDLE IT)
* TO LOAD THIS TABLE, TSSO WILL LOOP AROUND USING THE NUMBER AT SSSM+40
* FILLING THE SSVT.
************************************************************
BLDSSVT  DS    0H
         SPACE
         L     R2,$SSSM            BASE FOR SSSM MOUDLE.
         XR    R1,R1               R1 WILL KEEP A COUNT OF THE NUMBER
*                                  OF ENTRIES LOADED SO FAR. THIS COUNT
*                                  STARTS AT ZERO.
         L     R5,40(R2)           GET COUNT OF NUMBER OF ROUTINES
*                                  TO LOAD...
         LA    R6,44(R2)           REG 6 POINTS TO THE START OF THE
*                                  SSSM TABLE.
         L     R7,$SSVT            REG 7 POINTS TO THE START OF THE
*                                  SSVT MODULE THAT WAS GETMAINED
         STH   R5,2(0,R7)          STORE COUNT OF ROUTINES INTO SSVT
         LA    R7,4(R7)
         LA    R8,256(R7)          REG 8 POINTS TO THE POINTERS FOR THE
*                                  FUNCTION ROUTINE ADDRESSES.
LOADTAB  DS    0H
         L     R3,0(R6)            GET SUBSYSTEM FUNCTION NUMBER E.G.
*                                  10 = OPERATOR COMMAND
         BCTR  R3,0                SUBTRACT ONE FOR STC BECAUSE
*                                  THE SSVT FUNCTION CODES START AT
*                                  1 INSTEAD OF ZERO, SO 10(R7) IS
*                                  FUNCTION CODE 11.
         LA    R1,1(R1)            BUMP UP COUNTER
         STC   R1,0(R3,R7) PLACE THE NUMBER INTO THE
*                                  SUBSYSTEM FUNCTION TABLE. THE
*                                  OFFSET WILL BE THE COUNT IN REG 1
         L     R3,4(R6)            POINT AT ADDRESS OF ROUTINE TO HAND
*                                  LE THE FUNCTION.
         ST    R3,0(R8)            STORE THAT ADDRESS INTO THE
*                                  FUNCTION ADDRESS POINTER TABLE
         LA    R8,4(R8)            POINT TO MEXT FUNCTION ROUTINE
*                                  ADDRESS
         LA    R6,8(R6)            POINT TO NEXT ENTRY IN TABLE
         BCT   R5,LOADTAB
NOVECRTN EQU   *
* AT THIS POINT, THE SSVT HAS BEEN LOADED, AND ALL THAT REMAINS IS TO
* CONNECT THE SSVT INTO THE MVS TABLE.
         SPACE
         L     R2,$SSVT
         SPACE
         OI    SSCTFLG1,SSCTUPSS   USE PRIMARY SUBSYSTEMS SERVICES FOR
*                                  TSSO
*        BAL   R14,REQJOBID        REQUEST JOB ID FROM JES
         EJECT
************************************************************
*                                                          *
*        CONNECT THE SSVT TO THE SSCT                      *
*                                                          *
************************************************************
         SPACE
*              NOTE - MUST BE IN KEY 0
* NOTE: R4 POINTS TO THE SSCT THUS THE BELOW INSTRUCTION IS OK
         L     R2,$SSVT            LOAD THE SSVT
         ST    R2,SSCTSSVT         ** CONNECT **
         WTO   MF=(E,WTO4D)        STARTED MESSAGE
         SPACE
************************************************************
* MARK TSSO ADDRESS SPACE NON-SWAPPABLE FOR PERFORMANCE    *
* IF REQUESTED- ACTUALLY, ITS THE DEFAULT, DO IT PROBABLY  *
* WILL BE DONE.                                            *
************************************************************
         CLI   TSSOSWAP,C'Y'      NON SWAPPABLE REQUESTED
         BNE   MAKESWAP           OH WELL...
         MODESET MODE=SUP,KEY=ZERO
         L     R6,X'224'           GET ASCB ADDRESS
         USING ASCB,R6
         LH    R6,ASCBASID         GET ASID FIELD
         DROP  R6
         SYSEVENT DONTSWAP,ASID=(R6),ENTRY=SVC
         MODESET MODE=PROB,KEY=ZERO
MAKESWAP DS    0H
************************************************************
*                                                          *
*        WAIT FOR POST FROM SSSM                           *
*                                                          *
************************************************************
         SPACE
WAIT     EQU   *
         L     R2,CURRCMD          GET CURRENT COMMAND
         USING TSSOCMND,R2         ADDRESS IT
         MVC   X'A04'(4),CURRCMD
         MVC   X'A08'(4),NEXTCMD
         TM    CMNDFLAG,X'80'      IS IT ACTIVE
         BO    NOWAIT
         TM    FLAG,X'01'          MONITORING?
         BZ    NOMON1
         WTO   MF=(E,WTO10D)       WAITING
NOMON1   EQU   *
         SPACE
*
         WAIT  ECB=$SVPOSTE
*
         TM    FLAG,X'01'          MONITORING?
         BZ    NOMON2
         WTO   MF=(E,WTO11D)       POSTED
NOMON2   EQU   *
NOWAIT   DS    0H
         SPACE
         MVI   $SVPOSTE,0          ZERO OUT THE ECB
*
         MVC   TSSOCMD(128),CMNDCMD+1  MOVE IN COMMAND (- # SIGN)
         L     R1,COUNTCMD             GET COUNT OF COMMANDS
         LA    R1,1(R1)                    INCREMENT
         ST    R1,COUNTCMD             AND REPLACE
*        L     R1,CMNDLENG
         LA    R1,127                  ALWAYS USE BIG LENGTH
         STH   R1,TSSOCMDL             BECAUSE IT WORKS.
         MVC   $SVUCMID(4),CMNDCONS    MOVE IN CONSOLE ID
*
         LA    R1,TSSOCMD
OBV#     DS    0H                   OBVIOUSLY A '#' COMMAND
         CLI   0(R1),C'.'           PERIOD COMMAND
         BE    NONTSO               YES, BRANCH
         CLC   0(6,R1),=C'LOGOFF'   EXCEPTION TO TSO SYNTAX
         BE    STOP
         CLC   0(6,R1),=C'P     '   EXCEPTION TO TSO SYNTAX
         BE    STOP
         B     TSOCMD
NONTSO   DS    0H
         LA    R1,1(,R1)            POINT PAST '.'
         CLI   0(R1),C'P'           STOP
         BE    STOP
*
         CLI   0(R1),C'L'           LIST REPLY
         BE    LISTTSO
*
         CLI   0(R1),C'M'           MONITOR, TURN ON DEBUG BIT
         BE    MONITOR
*
         CLI   0(R1),C'J'           REQUEST STC ID FROM JES
         BE    STC
*
         CLI   0(R1),C'Q'
         BE    QUERY
*
         CLC   0(6,R1),=CL6'RELOAD' REQUEST TO RELOAD WTOR TABLE
         BE    RELOAD
*
         CLC   0(5,R1),=CL5'ABEND'  REQUEST TO RELOAD WTOR TABLE
         BE    ABENDIT
*
         B     INVCMD
ABENDIT  DS    0H
         WTO   'TSST995A TSSO ABENDING AT OPERATOR DEMAND'
         DC    X'00000000'
INVCMD   DS    0H
         L     R0,$SVUCMID         CONSOLE ID
         WTO   MF=(E,WTO5D)
         B     READY
         SPACE
STC      TM    $SVSTUS,$SVSTUSI    DO WE HAVE AN ID ALREADY
         BO    READY               YES, DO NOTHING
         BAL   R14,REQJOBID
         B     READY
         SPACE
         SPACE
MONITOR  CLI   1(R1),C'0'
         BE    MONOFF
         CLI   1(R1),C'1'
         BE    MONON
         B     INVCMD
MONON    OI    FLAG,X'01'
         OI    $SVFLAG,X'01'      PY- MONITORING ON
         B     READY
MONOFF   NI    FLAG,255-X'01'
         NI    $SVFLAG,255-X'01'  PY- MONITORING OFF
         B     READY
RELOAD   DS    0H
         L     R6,TSSOTABL        CHECK TO SEE IF FUNCTION ACTIVE
         LTR   R6,R6              WELL.. IS IT ?
         BZ    NODEL              NO FUNCTION, NO NEED TO DELETE
         LA    R6,TSSOTABN        GET CURRENT TABLE NAME
         DELETE EPLOC=(R6)           DELETE IT !
         MVC   TSSOTABN(8),=CL8' '
NODEL    DS    0H
         MVC   TSSOTABN(8),7(R1)   POINT TO MODULE TO RELOAD TABLE
         CLC   TSSOTABN(8),=CL8'NONE'     OPERATOR WANTS NO REPLIES?
         BNE   LOADNTAB                  NO, LOAD NEW TABLE
* HERE, THE OPERATOR HAS REQUESTED WE SUPPRESS THE WTO REPLY FUNCTION
         XR    R6,R6
         ST    R6,TSSOTABL
         MVC   TSSOTABN(8),=CL8'NONE'
         WTO   'TSST024I TSSO AUTOMATED OPERATOR FACILITY DEACTIVATED'
         B     READY
*
LOADNTAB DS    0H
         LA    R6,TSSOTABN
         LOAD  EPLOC=(R6),GLOBAL=(YES,P),ERRET=LOADFAIL,LSEARCH=YES
*                                 IF THE LOAD FAILED, WE WOULDNT BE
*                                 HERE
         LR    R6,R0
         CLC   4(8,R6),=CL8'TSSOTABL'   CHECK TO MAKE SURE
*                                         WE HAVE ACTUALLY LOADED A
*                                         VALID TABLE
         BNE   LOADBTAB           GOT A BAD TABLE...
         CLC   44(8,R6),=CL8'TSSO 4.1'  CHECK CORRECT VERSION LEVEL
         BNE   LOADBTA2           ** SHUCKS **
         ST    R6,TSSOTABL        STORE ADDRESS OF TABLE
         WTO   'TSST025I TSSO AUTOMATED OPERATOR FACILITY TABLE RELOADEX
               D'
         B     READY
LOADFAIL DS    0H
         XR    R6,R6
         ST    R6,TSSOTABL
         MVC   WTO20D+20(8),TSSOTABN
         WTO   MF=(E,WTO20D)
         MVC   TSSOTABN(8),=CL8'NONE'
         B     READY
LOADBTAB DS    0H
         MVC   WTO21D+20(8),TSSOTABN
         WTO   MF=(E,WTO21D)
         B     LOADFAIL
*
LOADBTA2 DS    0H
         MVC   WTO32D+15(8),TSSOTABN
         WTO   MF=(E,WTO32D)
         B     LOADFAIL
*
QUERY    DS    0H
         CLI   1(R1),C'T'        WANTS TO QUERY TABLES ?
         BE    QUERYTAB
         CLC   1(6,R1),=CL6'MAXCMD'  WANTS TO QUERY MAX COMMANDS
         BE    QUERYMCM
         CLC   1(6,R1),=CL6'MAXWTO'  WANTS TO QUERY MAX COMMANDS
         BE    QUERYMWT
         CLC   1(4,R1),=CL4'SSSM'    WANTS TO QUERY MAX COMMANDS
         BE    QUERYSSM
         CLC   1(4,R1),=CL4'SWAP'    IS TSSO NON SWAPPABLE ?
         BE    QUERYSWP
         CLC   1(4,R1),=CL4'RACF'    TSSO RACF USERID, PLEASE ?
         BE    QUERYRCF
         CLC   1(4,R1),=CL4'VERS'    TSSO VERSION, PLEASE ?
         BE    QUERYVRS
         L     R0,$SVUCMID
         WTO   'TSST025E INVALID QUERY SPECIFIED',MCSFLAG=(REG0)
         B     READY
*
QUERYVRS DS    0H
         WTO   MF=(E,WTO27D)           WRITE IT OUT
         L     R1,$SSSM                GET ADDRESS OF SSSM MODULE
         MVC   WTO28D+13(13),2(R1)      GET SSSM IDENTIFIER
         MVC   WTO28D+46(8),15(R1)     GET MODULE ID, TIME AND DATE
         MVC   WTO28D+62(8),23(R1)
         WTO   MF=(E,WTO28D)
         L     R1,WTOADDR              GET ADDRESS OF TSSOWTO MODULE
         MVC   WTO28D+13(13),4(R1)         GET TSSOWTO MODULE ID
         MVC   WTO28D+46(8),28(R1)         GET DATE OF ASSEMBLY
         MVC   WTO28D+62(8),36(R1)         GET TIME OF ASSEMBLY
         WTO   MF=(E,WTO28D)
         B     READY
*
QUERYRCF DS    0H
         MVC   WTO24D+33(8),TSSORACF+1 GET RACF USER ID
         WTO   MF=(E,WTO24D)           WRITE IT OUT
         B     READY
QUERYSWP DS    0H
         CLI   TSSOSWAP,C'Y'        CHECK IT OUT.
         BNE   QUERNSWP             NOPE...
         WTO   'TSST026I TSSO IS RUNNING NON SWAPPABLE'
         B     READY
QUERNSWP DS    0H
         WTO   'TSST027E TSSO IS RUNNING SWAPPABLE- PERFORMANCE MAY BE X
               DEGRADED'
         B     READY
*
QUERYSSM DS    0H
         MVC   WTO23D+46(8),SSSMNAME    MOVE IN NAME OF SSSM MODULE
         WTO   MF=(E,WTO23D)
         B     READY
*
QUERYMCM DS    0H
         L     R1,MAXCMDS        GET MAX COMMANDS
         LR    R6,R10
         LA    R10,DATD          R10 MUST POINT TO WORKAREA FOR CONVERT
         CALL  JCECVTBD          FROM BINARY TO DECIMAL
         LR    R10,R6
         STH   R1,WTO22D+42
         WTO   MF=(E,WTO22D)
         B     READY
*
QUERYMWT DS    0H
         L     R1,MAXWTO         GET MAXIMUM WTO VALUE.
         LR    R6,R10
         LA    R10,DATD          R10 MUST POINT TO WORKAREA FOR CONVERT
         XR    R0,R0
         CALL  JCECVTBD          FROM BINARY TO DECIMAL
         LR    R10,R6
         STCM  R1,B'1111',WTO36D+43
         WTO   MF=(E,WTO36D)
         B     READY
*
QUERYTAB DS    0H
         L     R6,TSSOTABL       GET ADDRESS OF TABLE
         LTR   R6,R6
         BNZ   QTABREAL
         L     R0,$SVUCMID
         WTO   'TSST027I TSSO AUTOMATED OPERATIONS FACILITY IS NOT ACTIX
               VE',MCSFLAG=(REG0)
         B     ENDQUERY
QTABREAL DS    0H
         MVC   WTO15D+33(8),TSSOTABN
         WTO   MF=(E,WTO15D)
         MVC   WTO38D+23(8),12(R6)  INSERT TABLE ID.
         MVC   WTO38D+39(8),28(R6)  INSERT DATE ASSEMBLED
         MVC   WTO38D+55(8),36(R6)  INSERT TIME.
         WTO   MF=(E,WTO38D)
         B     ENDQUERY
ENDQUERY DS    0H
         B     READY
LISTTSO  DS    0H
         OI    TSSWFLAG,X'80'      TURN ON FIRST BIT OF FLAG WORD.
*                                  INDICATING COMMANDS WILL NOT BE
*                                  ISSUED.
         CLI   1(R1),C' '          L=N OR L=NN, CONSOLE ID
         BE    LIST                JUST L, USE SOURCE CONSOLE
         CLI   1(R1),C'='
         BNE   LIST
         CLI   2(R1),C'0'
         BL    LIST
         CLI   3(R1),C'0'
         BL    LISTID1
         PACK  DOUBLE,2(2,R1)
         B     AR10
LISTID1  PACK  DOUBLE,2(1,R1)
AR10     DS    0H
         CVB   R0,DOUBLE
         LTR   R0,R0
         BZ    LIST
         B     LISTR0
         SPACE
************************************************************
*                                                          *
*        TSO COMMAND                                       *
*                                                          *
************************************************************
         SPACE
TSOCMD   DS    0H
         OI    FLAG,X'80'          INDICATE THIS WAS A TSO COMMAND
         BAL   R14,ISSUECMD        GO DO IT...
         MODESET KEY=ZERO
         B     LIST
READY    EQU   *
         L     R2,CURRCMD
         USING TSSOCMND,R2
         NI    CMNDFLAG,255-X'80'  TURN OFF BIT, INDICATING COMMAND
*                                  DONE.
         L     R2,CMNDNEXT
         ST    R2,CURRCMD
         DROP  R2
         B     WAIT
************************************************************
*                                                          *
*        LIST TSO OUTPUT                                   *
*                                                          *
************************************************************
         SPACE
LIST     DS    0H
************************************************************
* NOTE. CANT LOAD ALL FOUR BYTES FROM $SVUCMID BECAUSE MVS PUTS
* JUNK IN HIGH ORDER BYTE.
************************************************************
         LH    R0,$SVUCMID+2       CONSOLE ID OF SOURCE
LISTR0   DS    0H
************************************************************
* THE LISTR0 LABEL ASSUMES THAT R0 HAS BEEN SET UP WITH THE
* CONSOLE ID DESIRED. NOTE THAT IF ENTRY WAS OBTAINED THROUGH THE
* #.L= COMMAND, THEN WE WILL NOT ALLOW COMMANDS IN THIS INVOCATION
************************************************************
         ST    R0,CONSPARM
         L     R15,WTOADDR
         CALL  (15),(CONSPARM,MAXWTO,TSSWFLAG),MF=(E,CALL1D)
*
         NI    TSSWFLAG,255-X'80'  TURN OFF FLAG BIT.
         B     READY
         EJECT
************************************************************
*                                                          *
* ISSUE A TSO COMMAND BY ATTACHING THE TMP. COMMAND MUST   *
* PREVIOUSLY HAVE BEEN PLACED IN FIELD "TSOCMD" WITH LENGTH*
* IN FIELD TSOCMDL                                         *
************************************************************
ISSUECMD DS    0H
         MODESET KEY=ZERO
         STM   R1,R2,SAVER12      ** STORE REGISTERS NEEDED TO ISSUE
         STM   R6,R7,SAVER67         COMMAND **
         ST    R14,SAVER14        SAVE R14 WHICH HAS RETURN ADDRESS
         LA    R1,TSSOPRMP        POINTER TO IKJEFT01 PARM LIST
         OI    0(R1),X'80'        SOMETIMES THEY HAVE SUCH SILLY RULES
         LA    R2,TSSOPRMS        GET ADDRESS OF PARMS
         ST    R2,TSSOPRMP
         XC    TSSOPECB(4),TSSOPECB  WIPE OUT THE ECB
         LA    R6,TMPNAME         HOPE THIS POINTS TO A TMP.
         LA    R7,TSSOPECB           GET REAL ECB
*
         ATTACH EPLOC=(R6),ECB=(R7),SZERO=NO,SF=(E,ATTACHD)
         ST    R1,TSSOPTCB           SAVE TCB ADDRESS
*
         WAIT  ECB=TSSOPECB          WAIT FOR DYNALLOC
*
         L     R7,540              PSATOLD-PSA
         USING TCB,R7
         L     R7,TCBJSCB          GET JSCB FIELD
         USING IEZJSCB,R7
         L     R7,JSCBACT          MAKE SURE ITS ACTIVE JSCB
         MODESET KEY=ZERO
         OI    236(R7),X'01'       SET IT BACK ON
         DROP  R7
*
         L     R1,TSSOPECB           FINE- DETACH IKJEFT01
         C     R1,=X'40000000'       IS EVERYTHING OK WITH TMP ?
         BNE   TMPABEND              RATS !!
         B     ISSUERET
TMPABEND DS    0H
         ST    R10,SAVER10
         LA    R10,DATD
         CALL  JCECVTBH
         L     R10,SAVER10
         STM   R0,R1,WTO29D+44        GET READY TO PRINT MESSAGE
         WTO   MF=(E,WTO29D)
         B     ISSUERET
ISSUERET DS    0H
         LA    R1,TSSOPTCB
         DETACH (R1)
         LM    R1,R2,SAVER12      ** RESTORE REGISTERS NEEDED TO ISSUE
         LM    R6,R7,SAVER67         COMMAND **
         L     R14,SAVER14           RELOAD RETURN ADDRESS
         MODESET KEY=NZERO
         BR    R14                   RETURN
************************************************************
*                                                          *
*        REQUEST JOB ID FROM PRIMARY SUBSYSTEM             *
*                                                          *
************************************************************
         SPACE
REQJOBID LR    R6,R14
         LA    R5,$SVSSOB           GET ADDRESS OF AN SSOB
         USING SSOB,R5              ADDRESS IT
         MVC   SSOBID(4),=C'SSOB'   FILL IN  "SSOB" HEADER
         LA    R15,SSOBHSIZ         GET LENGTH  OF HEADER
*                                   FROM IEFJSSOBH (COMMON HEADER)
         STH   R15,SSOBLEN          FILL IN LENGTH FIELD
         LA    R15,SSOBRQST         GET "REQUEST" IDENTIFIER
         STH   R15,SSOBFUNC         AND STORE IN FUNCTION FIELD
         LA    R15,$SVSSIB           GET ADDRESS OF OUR NEW SSIB
         MVC   $SVSSIB(36),PRIMSSIB  FILL IN ALL FIELDS FROM MODEL
         ST    R15,SSOBSSIB          STORE IN OUR SSOB
         LA    R15,SSRRBGN          GET ADDRESS OF FUNCTION DEPENDENT
*                                   AREA
         ST    R15,SSOBINDV         AND STORE AWAY
         LA    R1,$SVSSOBA           POINT TO ADDRESS FIELD TO CONTAIN
*                                   A(SSOB)
         ST    R5,0(R1)             PUT ADDRESS OF OUR SSOB INTO IT
         OI    0(R1),X'80'          FLIP ON HIGH ORDER BIT
*                                   AS REQUIRED BY IEFSSREQ
         LA    R15,8
         STH   R15,SSRRLEN          COMPLETE SSOB EXTENSION BY
*                                   FILLING IN LENGTH FIELD OF 8
         LA    R15,$SVRRECB         GIVE IT AN ECB
         ST    R15,SSRRSECB         AND TELL IT WHERE IT IS
         DROP  R5                  SSOB
         SPACE
         LR    R5,R1                SAVE R5 ACROSS THE MODESET
         MODESET MODE=SUP
         LR    R1,R5                AND RETRIEVE IT
         SPACE
         IEFSSREQ
         SPACE
         LR    R5,R15
         MODESET MODE=PROB
         LR    R15,R5
         SPACE
         LTR   R15,R15
         BZ    OKREQ
         WTO   MF=(E,WTO12D)         JOBID REQUEST FAILED
         BR    R6
OKREQ    OI    $SVSTUS,$SVSTUSI    WE HAVE A JOB ID
*
*              OPENING A SYSOUT DATA SET WILL CAUSE A 913-C0 ABEND
*              UNLESS THE JSCB POINTS TO A JES2 SSIB.  WE COULD
*              MODIFY THE SSIB, OR POINT THE JSCB TO A NEW SSIB.
*              THE LATTER IS USED HERE.  THE OTHER METHOD HAS
*              NOT BEEN TESTED.
*
         SPACE
         SPACE
         LA    R1,$SVSSIB          POINT TO OUR SSIB
         L     R15,TSSOJSCB
         STCM  R1,7,X'13D'(R15)    JSCBSSIB-JSCB(,R15)
         OI    $SVSTUS,$SVSTUSJ    INDICATE JSCB MODIFIED
         SPACE
         BR    R6
         EJECT
************************************************************
*                                                          *
*        RETURN JOB ID TO PRIMARY SUBSYSTEM                *
*                                                          *
************************************************************
         SPACE
*              IF THIS IS NOT DONE, JES2 ISSUES MESSAGE
*              $HASP310 SYSLOG  TERMINATED AT END OF MEMORY
         SPACE
RETJOBID TM    $SVSTUS,$SVSTUSI    DO WE HAVE A JOB ID
************************************************************
* NOTE THAT MOST OF THE FIELDS FROM THE SSOB AND SSOB EXTENSION
* ARE FILLED IN ALREADY FROM THE PREVIOUS SUBSYSTEM REQUEST TO
* GET A JOB ID.
************************************************************
         BZR   R14                 NO, RETURN
         LR    R6,R14              SAVE RETURN ADDRESS
         LA    R5,$SVSSOB          SSOB
         USING SSOB,R5
         LA    R15,SSOBRTRN        RETURN JOB ID
         STH   R15,SSOBFUNC
         DROP  R5                  SSOB
         PRINT NOGEN
         SPACE
         MODESET MODE=SUP
         SPACE
         LA    R1,$SVSSOBA
         SPACE
         IEFSSREQ
         SPACE
         MODESET MODE=PROB
         SPACE
         PRINT GEN
         LR    R14,R6              RESTORE RETURN ADDRESS
         BR    R14                 RETURN
         EJECT
************************************************************
*                                                          *
*        STOP - DISCONNECT THE SUBSYSTEM                   *
*                                                          *
************************************************************
         SPACE
STOP     EQU   *
         OI    $SVSTUS,$SVSTUST    TERMINATING
         SLR   R15,R15
         ST    R15,SSCTSSVT        DISCONNECT SSVT
         WTO   MF=(E,WTO14D)       DISCONNECTED
         SPACE
         BAL   R14,RETJOBID        RETURN JOB ID
         NI    SSCTFLG1,255-SSCTUPSS    NO LONGER NEED ITS SERVICES
         SPACE
         L     R1,TSSOSSIB         ORIGINAL SSIB
         SPACE
         TM    $SVSTUS,$SVSTUSJ    HAS JSCBSSIB BEEN MODIFIED
         BZ    OKJSCB              NO, BRANCH
         L     R15,TSSOJSCB        GET JSCB
         USING IEZJSCB,R15
         ST    R1,JSCBSSIB         STORE OLD SSIB AWAY
         DROP  R15
OKJSCB   DS    0H
         SPACE
         LA    R2,SSSMNAME
         DELETE EPLOC=(R2)
TABLFREE DS    0H
* HERE IS WHERE WE FREEMAIN THE TSSO AUTOMATED OPERATOR
* FACILITY TABLE.
         L     R1,CMDRINGL          GET ADDRESS OF TABLE
         L     R2,MAXCMDS           HOW MANY COMMANDS WERE THERE?
         SLL   R2,8                 MULTIPLY BY 256
         FREEMAIN R,LV=(R2),A=(R1),SP=241  FREE IT ALL UP.
EXITF    DS    0H
SSVTFREE DS    0H
         L     R2,$SSVT             POINT TO SSVT
         SL    R2,=F'4'
         LR    R1,R2
         FREEMAIN R,LV=1024+256+4+4,A=(1),SP=241   SSVT FREEMAIN
         SPACE
         XR    R15,R15
         ST    R15,$SSVT
*
         MODESET KEY=NZERO
         FREEMAIN R,LV=1024,A=(R10),SP=228  FREEMAIN THE TSSO CVT.
CVTFREE  DS    0H
         MODESET KEY=ZERO
         SPACE
         B     EXIT0
         SPACE
NOSSCT   DS    0H
         WTO   MF=(E,WTO1D)        SUBSYSTEM NOT DEFINED...
         B     ENDPROG
         SPACE
GETMERR  DS   0H
         WTO  'TSSO TERMINATING BECAUSE IT CANT GET STORAGE !'
         B    ENDPROG1
EXIT0    DS   0H
ENDPROG  DS   0H
         MODESET KEY=NZERO
         SPACE
         FREEMAIN R,LV=4096,A=(R9)
         LR     R1,R13              GET ADDRESS OF CORE IN R1
         L      R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
ENDPROG1 DS     0H
         L      R14,12(R13)         RELOAD RETURN POINT
         XR     R15,R15
         LM     R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR     R14
*
         EJECT
************************************************************
*                                                          *
*        CONSTANTS AND WORKAREAS                           *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
WTO1C    WTO   'TSSI999E SUBSYSTEM NAME NOT DEFINED- TSSO TERMINATING',X
               MF=L
WTO1CE   DS    0H
*
WTO4C    WTO   'TSSI001I  T S S O   VERSION 4.1.0 INITIALIZATION COMPLEX
               TED',MF=L
WTO4CE   DS    0H
*
WTO5C    WTO   'TSST998E INVALID TSSO COMMAND',                        X
               DESC=(5),MCSFLAG=(REG0,NOCPY),MF=L
WTO5CE   DS    0H
*
WTO9C    WTO   'TSSI997E TSSO COULD NOT LOAD ITS ESTAE MODULE (TSSOESTAX
               A- AND IS TERMINATING',MF=L
WTO9CE   DS    0H
*
WTO10C   WTO   'TSSI002I TSSO IS WAITING FOR POST FROM SSSM',MF=L
WTO10CE  DS    0H
*
WTO11C   WTO   'TSSI003I TSSO HAS BEEN POSTED FROM SSSM',MF=L
WTO11CE  DS    0H
*
WTO12C   WTO   'TSST004E TSSO COULD NOT OBTAIN A JOB INDENTIFIER FROM  X
               JES',MF=L
WTO12CE  DS    0H
*
WTO14C   WTO   'TSST005I TSSO DISCONNECTED- SUBSYSTEM UNAVAILABLE',MF=L
WTO14CE  DS    0H
*
WTO15C   WTO   'TSST006I TSSO IS USING TABLE XXXXXXXX FOR THE AUTOMATEDX
                 OPERATIONS FACILITY',MF=L
WTO15CE  DS    0H
*
WTO16C   WTO   'TSSI007E PARMLIB PARAMETER "XXXXXXXX" IS INVALID',MF=L
WTO16CE  DS    0H
*
WTO17C   WTO   'TSSI008E PARMLIB PARAMETER "XXXXXXXX" IS INCORRECTLY SPX
               ECIFIED',MF=L
WTO17CE  DS    0H
*
WTO18C   WTO   'TSSI009E MEMBER XXXXXXXX IS NOT IN PARMLIB- TSSO DEFAULX
               TS USED',MF=L
WTO18CE  DS    0H
*
WTO19C   WTO   'TSSI010I TSSO IS USING TABLE NAME XXXXXXXX FOR THE AUTOX
               MATED OPERATIONS FACILITY',MF=L
WTO19CE  DS    0H
*
WTO20C   WTO   'TSST011E MODULE XXXXXXXX NOT FOUND, AUTOMATED OPERATIONX
               S FACILITY DEACTIVATED',MF=L
WTO20CE  DS    0H
*
WTO21C   WTO   'TSST012E MODULE XXXXXXXX IS NOT A AUTOMATED OPERATIONS X
               FACILITY TABLE- FUNCTION DEACTIVATED',MF=L
WTO21CE  DS    0H
*
WTO22C   WTO   'TSST013I TSSO MAXIMUM COMMANDS SET AT XX',MF=L
WTO22CE  DS    0H
*
WTO23C   WTO   'TSST014I TSSO SUBSYSTEM SUPPORT MODULE IS XXXXXXXX',   X
               MF=L
WTO23CE  DS    0H
*
WTO24C   WTO   'TSST015I TSSO RACF USERID IS XXXXXXXX',MF=L
WTO24CE  DS    0H
*
WTOR25C  WTOR  'TSSI016A ENTER PARMLIB MEMBER FOR TSSO PARAMETERS',MF=L
WTOR25CE DS    0H
*
WTOR26C  WTOR  'TSSI017A ENTER TSSO PARAMETERS (OR "END")',MF=L
WTOR26CE DS    0H
*
WTO27C   WTO   'TSST028I T S S O  VERSION 4.1.0 --> DATE: &SYSDATE, TIMX
               E: &SYSTIME',MF=L
WTO27CE  DS    0H
*
WTO28C   WTO   'TSST029I XXXXXXXXXXXXX -----------> DATE: XXXXXXXX, TIMX
               E: XXXXXXXX',MF=L
WTO28CE  DS    0H
*
WTO29C   WTO   'TSST030A TSO TMP NON ZERO RETURN CODE-->XXXXXXXX',MF=L
WTO29CE  DS    0H
*
WTO32C   WTO   'TSST032A TABLE XXXXXXXX IS AT AN INCORRECT LEVEL- REASSX
               EMBLE',MF=L
*
WTO32CE  DS    0H
*
WTO36C   WTO   'TSST036I TSSO WILL OUTPUT A MAXIMUM OF XXXX WTO"S PER CX
               OMMAND',MF=L
WTO36CE  DS    0H
*
WTO38C   WTO   'TSST038I TABLE ID: XXXXXXXX, DATE: XXXXXXXX, TIME: XXXXX
               XXXX',MF=L
WTO38CE  DS    0H
*
TWTOC    WTO   '                                                       X
                                        ',MF=L
TWTOCE   DS    0H
MASKSSIB DC    0F'0',C'SSIB',AL2(36,0),C'JES2',CL16' ',XL8'00'
*
ESTAEC   ESTAE 0,MF=L
ESTAECE  EQU   *
*
PARMDCBC DCB   DDNAME=PARMLIB,DSORG=PO,MACRF=R,EODAD=PARMEND
PARMDCBE DS    0H
*
READC    READ  CECB,SF,MF=L
READCE   DS    0H
*
OPENC    OPEN  (,INPUT),MF=L
OPENCE   DS    0H
*
CLOSEC   CLOSE  (,LEAVE),MF=L
CLOSECE  DS    0H
*
ATTACHC  ATTACH SF=L
ATTACHCE DS    0H
*
RACINITC RACINIT ENVIR=CREATE,                                         X
               SMC=YES,PASSCHK=NO,MF=L
RACINITE DS    0H
*
CALL1C   CALL  ,(0,0,0),MF=L
CALL1CE  DS    0H
*
DMYPW    DC    CL8'DUMMY'
ALPRMLIB DC    CL50'ALLOC FI(PARMLIB) DSN(''SYS1.PARMLIB'') SHR'
FRPRMLIB DC    CL20'FREE FI(PARMLIB)'
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
DATD     DSECT
WORKAREA DS    CL200            WORK AREA FOR CONVERSIONS AND STUFF
************************************************************
* TSSO SUBSYSTEM PARAMETER SECTION. ALL THESE VALUES CAN BE*
* SET FROM THE TSSO PARMLIB MEMBER.
************************************************************
PARMMEM  DC    CL8' '           ADDRESS OF BUFFER FROM PARM READS
PARMBLK  DS    F                BLOCKSIZE OF SYS1.PARMLIB
PARMREAD DS    H                NUMBER OF BYTES READ THIS TIME
PARMBUF  DS    A                POINTER TO BUFFER FOR PARMLIB
*
TMPNAME  DS    CL8              NAME OF THE TERMINAL MONITOR PGM
TSSOSRC  DS    X                TSSO SUBSYSTEM RECOGNITION CHAR
TSSOSSSM DC    CL8' '           NAME OF TSSO SUB SYSTEM SUPPORT
*                               MODULE
TSSOTABN DC    CL8' '           NAME OF TSSO SYSTEM CONTROL TABLE
MAXCMDS  DS    F                MAXIMUM NUMBER OF COMMANDS
MAXWTO   DS    F                MAXIMUM NUMBER OF WTOS FOR ANY 1
*                               COMMAND.
TSSOSWAP DS    X                SWAPPABLE OR NON-SWAPPABLE
*                               Y - NON SWAPPABLE
*                               N - SWAPPABLE
TSSOPROM DS    X                TSSO PROMPTS OPERATOR FOR PARMS
TSSORACF DS    CL9              TSSO RACF USER ID (AND LENGTH IN BYTE 1
WTORECB  DS    A
PROMPINP DS    CL80             PROMPTING INPUT
************************************************************
* THESE VARIABLES ARE REQUIRED TO ISSUE A TSO COMMAND      *
* USING THE ISSUECMD SUBROUTINE. THE IDEA IS TO PLACE VALUE*
* IN THESE VARIABLES, WHEREAS THAT ROUTINE CAN THAT PICK   *
* UP THOSE VALUES AND EXECUTE THE COMMAND                  *
************************************************************
TSSOPRMP DS    A                POINTER TO THE TSO PARM LIST.
TSSOPRMS DS    0H               TSSO PARAMETER TSO PARM LIST.
TSSOCMDL DS    H                LENGTH OF TSO COMMAND
TSSOCMD  DS    CL130            ACTUAL TSO COMMAND TO BE ISSUED
TSSOPECB DS    F                ECB TO WAIT ON WHILE TMP IS RUNNING
TSSOPTCB DS    A                ADDRESS OF THE TMP'S TCB
SAVER12  DS    2F               SAVE REGISTERS 1 AND 2
SAVER67  DS    2F               SAVE REGISTERS 6 AND 7
SAVER10  DS    F                REGISTER 10
SAVER14  DS    F                REGISTER 14
************************************************************
* TSSO MAINLINE PROGRAM VARIABLES
************************************************************
HOLDSSIB DS    A                TEMP STORAGE FOR TSSOSSIB FIELD
TSSOTCB  DC    F'0'             TSSO MAINLINE TCB
TSSOJSCB DC    F'0'             TSSO SUBSYSTEM INTERFACE BLOCK
TSSOASXB DS    F
TSSOSENV DS    F
RACFSENV DS    F              ACEE BEFORE WE MODIFY IT.
ATTCECB2 DC    F'0'
ATTCTCB2 DC    F'0'
FLAG     DS    F
COUNTCMD DS    F              NUMBER OF COMMANDS PROCESSED SO FAR
TSSOSSNM DS    F              TSSO SSIB SUBSYSTEM NAME
WTOADDR  DS    A              ADDRESS OF TSSOWTO MODULE
TSSWPARM DS    A              TSSOWTO MODULE PARAMETERS.
DOUBLE   DS    D                DOUBLEWORD USED FOR PACKING
CMDRINGL DS    A              ADDRESS OF TSSO COMMAND RING- USED TO
*                             HOLD ADDRESS UNTIL WE GET TSSO CVT
CURRCMD  DS    A              CURRENT COMMAND ENTRY THAT TSSO IS
*                             PROCESSING
CONSPARM DS    F              CONSOLE ID TO BE USED AS A PARAMETER TO
*                             THE TSSOWTO MODULE.
TSSWFLAG DS    F              FLAG WORD TO BE USED AS A PARAMETER TO
*                             THE TSSOWTO MODULE.
PRIMSSIB DC    0F'0',C'SSIB',AL2(36,0),C'JES2',CL16' ',XL8'00'
ESTAED   ESTAE 0,MF=L
*
WTO1D    WTO   'TSSI999E SUBSYSTEM NAME NOT DEFINED- TSSO TERMINATING',X
               MF=L
*
WTO4D    WTO   'TSSI001I  T S S O   VERSION 4.1.0 INITIALIZATION COMPLEX
                TED',MF=L
*
WTO5D    WTO   'TSST998E INVALID TSSO COMMAND',                        X
               DESC=(5),MCSFLAG=(REG0,NOCPY),MF=L
*
WTO9D    WTO   'TSSI997E TSSO COULD NOT LOAD ITS ESTAE MODULE (TSSOESTAX
               A- AND IS TERMINATING',MF=L
*
WTO10D   WTO   'TSSI002I TSSO IS WAITING FOR POST FROM SSSM',MF=L
*
WTO11D   WTO   'TSSI003I TSSO HAS BEEN POSTED FROM SSSM',MF=L
*
WTO12D   WTO   'TSST004E TSSO COULD NOT OBTAIN A JOB INDENTIFIER FROM  X
               JES',MF=L
*
WTO14D   WTO   'TSST005I TSSO DISCONNECTED- SUBSYSTEM UNAVAILABLE',MF=L
*
WTO15D   WTO   'TSST006I TSSO IS USING TABLE XXXXXXXX FOR THE AUTOMATEDX
                 OPERATIONS FACILITY',MF=L
*
WTO16D   WTO   'TSSI007E PARMLIB PARAMETER "XXXXXXXX" IS INVALID',MF=L
*
WTO17D   WTO   'TSSI008E PARMLIB PARAMETER "XXXXXXXX" IS INCORRECTLY SPX
               ECIFIED',MF=L
*
WTO18D   WTO   'TSSI009E MEMBER XXXXXXXX IS NOT IN PARMLIB- TSSO DEFAULX
               TS USED',MF=L
*
WTO19D   WTO   'TSSI010I TSSO IS USING TABLE NAME XXXXXXXX FOR THE AUTOX
               MATED OPERATIONS FACILITY',MF=L
*
WTO20D   WTO   'TSST011E MODULE XXXXXXXX NOT FOUND, AUTOMATED OPERATIONX
               S FACILITY DEACTIVATED',MF=L
*
WTO21D   WTO   'TSST012E MODULE XXXXXXXX IS NOT A AUTOMATED OPERATIONS X
               FACILITY TABLE- FUNCTION DEACTIVATED',MF=L
*
WTO22D   WTO   'TSST013I TSSO MAXIMUM COMMANDS SET AT XX',MF=L
*
WTO23D   WTO   'TSST014I TSSO SUBSYSTEM SUPPORT MODULE IS XXXXXXXX',   X
               MF=L
*
WTO24D   WTO   'TSST015I TSSO RACF USERID IS XXXXXXXX',MF=L
*
WTOR25D  WTOR  'TSSI016A ENTER PARMLIB MEMBER FOR TSSO PARAMETERS',MF=L
*
WTOR26D  WTOR  'TSSI017A ENTER TSSO PARAMETERS (OR "END")',MF=L
*
WTO27D   WTO   'TSST028I T S S O  VERSION 4.1.0 --> DATE: &SYSDATE, TIMX
               E: &SYSTIME',MF=L
WTO28D   WTO   'TSST029I XXXXXXXXXXXXX -----------> DATE: XXXXXXXX, TIMX
               E: XXXXXXXX',MF=L
WTO29D   WTO   'TSST030A TSO TMP NON ZERO RETURN CODE-->XXXXXXXX',MF=L
*
WTO32D   WTO   'TSST032A TABLE XXXXXXXX IS AT AN INCORRECT LEVEL- REASSX
               EMBLE',MF=L
*
WTO36D   WTO   'TSST036I TSSO WILL OUTPUT A MAXIMUM OF XXXX WTO"S PER CX
               OMMAND',MF=L
*
WTO38D   WTO   'TSST038I TABLE ID: XXXXXXXX, DATE: XXXXXXXX, TIME: XXXXX
               XXXX',MF=L
TWTOD    WTO   '                                                       X
                                        ',MF=L
READD    READ  DECB,SF,MF=L
PARMDCBD DCB   DDNAME=PARMLIB,DSORG=PO,MACRF=R,EODAD=PARMEND
OPEND    OPEN  (,INPUT),MF=L
CLOSED   CLOSE  (,LEAVE),MF=L
ATTACHD  ATTACH SF=L
RACINITD RACINIT ENVIR=CREATE,                                         X
               SMC=YES,PASSCHK=NO,MF=L
CALL1D   CALL  ,(0,0,0),MF=L
PARSPARM DS    0H
PARS1    DS    A
PARS2    DS    A
PARS3    DS    A
PARS4    DS    A
PARSSEP  DS    CL4
PARARRAY DS    CL50
PARMFLAG DS    X
* X'80'  STORAGE WAS OBTAINED
* X'40'  PROMPTING REQUESTED DURING PARMLIB INPUT
* X'20'  CURRENTLY IN PROMPT MODE.
         TSSOCVT
         TSSOCMND          DSECT FOR TSSO COMMAND RING
         PRINT NOGEN
         IEFJESCT
         IEFJSCVT
         IEFJSSVT
         DCBD  DSORG=PO,DEVD=DA
UCM      DSECT
         IEECUCM
         CVT   DSECT=YES
         IEFJSSIB
         IEFJSSOB (CM,RR),CONTIG=YES
         IEZJSCB
         IKJTCB
         IHAASCB
         IHAASXB
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY TSSO(''V 4.1.0 &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' ENTRY    TSSO'
 PUNCH ' NAME     TSSO(R)'
         END
