./ ADD NAME=BRKELEM                                01MAY81 18.20.54
         MACRO
         BRKELEM
***********************************************************************
*                                                                     *
*        MAPPING DSECT FOR BREAK ELEMENTS AND ASSOCIATED FLAGS.       *
*                                                                     *
*        STATUS -- VERSION NO. 01 -  RELEASE NO. 01 - OS/VS2          *
*                                                                     *
*        CHANGE LEVEL -- 00 - DATE 03/09/72                           *
*                                                                     *
***********************************************************************
BRKELEM  DSECT
BRKLINK  DS    F -                POINTER TO NEXT BREAK ELEMENT.
BRKADDR  DS    F -                PROBLEM PROGRAM INSTRUCTION ADDRESS.
BRKINST  DS    2F -               ORIGINAL INSTRUCTION AND 2 BYTE SVC.
BRKFLGS  DS    1X -               ONE BYTE FOR FLAGS.
BALSW    EQU   B'10000000' -      BAL OR BALR IN ORIGINAL INSTRUCTION.
BRKRANGE EQU   B'01000000' -      THIS BREAK ELEMENT IS ONE OF A RANGE.
BRKLIST  EQU   B'00100000' -      THIS BREAK ELEMENT IS ONE OF A LIST.
BRKNONOT EQU   B'00010000' -      USER IS NOT TO BE NOTIFIED IF THIS
*                                 BREAKPOINT IS ENCOUNTERED.
         DS    X -                RESERVED.
BRKDISP  DS    H -                DISPLACEMENT FROM FIRST ADDRESS OF
*                                 A RANGE.
BRKNAME  DS    F -                POINTER TO THE ADDRESS STRING.
BRKCHAIN DS    F -                POINTER TO THE SUB-COMMAND CHAIN.
BRKCOUNT DS    F -                COUNT INFORMATION.
BRKRB    DS    F -                POINTER TO PROBLEM PROGRAM RB.
         DS    0D -               FORCE LENGTH EQUATE TO DOUBLE WORD.
BRKLEN   EQU   *-BRKELEM -        BREAK ELEMENT LENGTH.
         MEND
./ ADD NAME=IKJEGSIO                               01MAY81 18.20.54
**********************************************************************
*                                                                    *
*        IKJEGSIO IS A SET OF STRUCTURED MACROS THAT BUILD THE       *
*        ASSEMBLER INSTRUCTIONS TO PREPARE A PERSONALIZED PARM       *
*        LIST AND THE BRANCH TO IKJEGIO FOR I/O SERVICES.  THE       *
*        SET OF MACROS ARE INCLUDED; HOWEVER, THE MACRO SOURCE       *
*        IS SUPPRESSED.                                              *
*                                                                    *
*        STATUS -- VERSION NO. 01 - OS/VS2 RELEASE NO. 02            *
*        CHANGE LEVEL -- 01 - DATE 2-2-73                            *
*                                                                    *
**********************************************************************
         PRINT OFF
         MACRO
&LABEL   IKJEGSIO                                                      *
               &TYPEREQ,               TYPE SERVICE REQUESTED          *
               &FIRST=,                FIRST MESSAGE TO BE ISSUED      *
               &INST11=,               FIRST INSERT OF THE 1ST MSG     *
               &INST12=,               SECOND INSERT OF THE 1ST MSG    *
               &INST13=,               THIRD INSERT OF THE 1ST MSG     *
               &INST14=,               FOURTH INSERT OF THE 1ST MSG    *
               &INST15=,               FIFTH INSERT OF THE 1ST MSG     *
               &INST16=,               SIXTH INSERT OF THE 1ST MSG     *
               &SECOND=,               FIRST MESSAGE TO BE ISSUED      *
               &INST21=,               FIRST INSERT OF THE 2ND MSG     *
               &INST22=,               SECOND INSERT OF THE 2ND MSG    *
               &INST23=,               THIRD INSERT OF THE 2ND MSG     *
               &INST24=,               FOURTH INSERT OF THE 2ND MSG    *
               &INST25=,               FIFTH INSERT OF THE 2ND MSG     *
               &INST26=,               SIXTH INSERT OF THE 2ND MSG     *
               &ID=,                   MODULE CALLING ID NUMBER        *
               &MF=,                   TYPE MACRO TO EXPAND            *
               &DATAPTR=,              ADDRESS OF DATA LINE            *
               &DSNAME=,               ADDRESS OF OPEN DCB             *
               &SVC=,                  SVC NUMBER                      *
               &ABENDRG=,              REGISTER CONTAINING ABEND NUM   *
               &RC=,                   REGISTER CONTAINING ABEND CODE  *
               &VCONBR=            BRANCH TO VCON NOT TO TSTIO @ZA04126
.*********************************************************************
.**                                                                  *
.**                HEADER                                            */
.**DRIVER:
.**                E  MAIN DRIVER                                    */
.**                                                                  *
.*********************************************************************
         GBLB  &LISTSW                 SWITCH TO INDICATE LIST FORM
         GBLB  &STORESW                SW TO INDICATE PARM STRIPPING
         LCLC  &ADDRESS                VARIABLE TO CONTAIN THE STORE AD
         LCLC  &NUMID                  VARIABLE TO STRIP ID NUMBER
         LCLA  &IDCON                  VARIABLE TO CONTAIN THE ID NUM
         LCLA  &LENGTH                 VARIABLE TO COUNT CHARS IN PARM
&LISTSW  SETB  0                       INITIALIZE LIST SWITCH OFF
&STORESW SETB  0                       INITIALIZE STORE SWITCH OFF
&NUMID   SETC  '&ID'(4,2)              STRIP OFF THE LETTERS FROM ID NO
&IDCON   SETA  &NUMID                  TRANSFER VALUE FOR LATER USE
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,%CONT1)
.**                   HAS THE 'MF' PARAMETER BEEN CODED PROPERLY ?   */
.**                                                                  *
.*********************************************************************
         AIF   ('&MF(1)' EQ '').ERRORMF
         AIF   ('&MF(1)' EQ 'E').MFE
         AIF   ('&MF(1)' EQ 'L').MFL
.*********************************************************************
.**                                                                  *
.**                P  ISSUE AN ERROR MESSAGE                         */
.**                P  (,END)
.**                   SET CONDITION CODE = 12                        */
.**                                                                  */
.**                                                                  *
.*********************************************************************
         MNOTE 12,'SYNTAX ERROR ENCOUNTERED IN MF= PARM'
         AGO   .NOLINK
.ERRORMF MNOTE 12,'MF= PARAMETER OMITTED, BUT IS REQUIRED'
         AGO   .NOLINK
.ERORMFE MNOTE 12,'THE ADDRESS PORTION IS REQUIRED WITH THE EXECUTABLE *
               FORM'
         AGO   .NOLINK
.ERORMFA MNOTE 4,'THE ADDRESS PORTION IS INVALID WITH THE LIST FORM AND*
                IS IGNORNED'
         AGO   .IDROUT
.*********************************************************************
.**                                                                  *
.**%CONT1:
.**                P  SET THE MF TYPE SWITCHES ON                    */
.**                                                                  *
.*********************************************************************
.MFE     AIF   ('&MF(2)' EQ '').ERORMFE GO TO ERROR EXIT WITH MSG
&ADDRESS SETC  '&MF(2)'                PREPARE TO PROCESS ADDRESS
         AIF   ('&ADDRESS'(1,1) EQ '(').MFADREG TEST FOR REG NOT.
&LABEL   LA    1,&ADDRESS              ESTABLISH ADDRESSABILITY TO PARM
         AGO   .IDROUT                 CONTINUE PROCESSING NEXT OPERAND
.MFADREG ANOP                          LABEL FOR REG NOTATION OF ADDR
&LABEL   LR    1,&ADDRESS              ESTABLISH ADDRESSABILITY TO PARM
         AGO   .IDROUT                 CONTINUE PROCESSING NEXT OPERAND
.MFL     ANOP                          ROUTINE BRANCHED TO IF LIST FORM
&LISTSW  SETB  1                       TURN ON THE LIST FORM SWITCH
         DS    0H                      ALIGN TO HALFWORD BOUNDRY
         B     *+88                    BRANCH AROUND PARM LIST
         AIF   ('&MF(2)' NE '').ERORMFA  TEST FOR ADDR WITH L FORM
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,%CONT2)
.**                   IS THE USER'S ID NUMBER CODED CORRECTLY ?      */
.**                                                                  *
.*********************************************************************
.IDROUT  ANOP                          LABEL FOR 'ID=' OPERAND PROC
         AIF   ('&ID' EQ '').ERRORID   TEST FOR NULL PARM
&LENGTH  SETA  K'&ID                   COUNT LENGTH OF I.D. PARM
         AIF   (&LENGTH NE 5).ERRIDSZ  PUT OUT ERROR MESSAGE
         AIF   (&LISTSW EQ 1).IDLIST TEST IF THIS SHOULD BE DC OR MVI
         AGO   .IDE                    BRANCH TO MOVE ID INTO P.L. ROUT
.*********************************************************************
.**                                                                  *
.**                P  ISSUE A WARNING MESSAGE                        */
.**                P  (,%CONT3)
.**                   SET CONDITION CODE = 4 IF LIST FORM            */
.**                                                                  *
.*********************************************************************
.ERRIDSZ ANOP                          BRANCH HERE IF ID PARM HAS ERROR
         MNOTE 12,'THERE IS A SYNTAX ERROR IN THE ID= PARM'
         AGO   .NOLINK                 BRANCH TO RETURN TO THE USER
.ERRORID ANOP                          ROUTINE IF ID INCORRECT
         AIF   (&LISTSW EQ 1).ID4    IF THIS IS A LIST FORM SET CC=4
         MNOTE 4,'THE ID= PARM IS MISSING OR INCORRECT'
         AGO   .SELECT                 BRANCH TO CONTINUE PROCESSING
.ID4     MNOTE 0,'THE ID= PARM IS MISSING OR INCORRECT'
         AGO   .SELECT                 BRANCH TO CONTINUE PROCESSING
.*********************************************************************
.**                                                                  *
.**%CONT2:
.**                P  GENERATE THE INSTRUCTIONS NECESSARY TO
.**                   STORE THE USERS ID# IN THE P.L.                */
.**                                                                  *
.*********************************************************************
.IDE     ANOP                          ROUTINE TO MOVE ID # IN P.L.
         MVI   1(1),&IDCON             SET UP MOVE INSTRUCTION
         AGO   .SELECT                 CONTINUE PROCESSING
.IDLIST  ANOP                          ROUTINE TO CREATE 'DC'S FOR ID
&LABEL   DC    AL1(0)                  FILLER
         DC    AL1(&IDCON)             DC FOR CALLER'S ID # IN P.L.
.*********************************************************************
.**                                                                  *
.**%CONT3:
.**                D  (YES,,NO,%CONT4)
.**                   IS THIS REQUEST FOR DATA ?                     */
.**                                                                  *
.*********************************************************************
.SELECT  ANOP                          DETERMINE WHICH SERVICE REQ'D
         AIF   ('&TYPEREQ' NE 'DATA').SELECT2 TEST IF DATA REQUEST
.*********************************************************************
.**                                                                  *
.**                S  (,END)
.**                   CALL DATA: GENERATE INSTRUCIONS FOR DATA       */
.**                                                                  *
.*********************************************************************
         DATA  &DATAPTR,&DSNAME        CALL DATA REQ'T ROUTINE
         AGO   .END                    EXIT
.*********************************************************************
.**                                                                  *
.**%CONT4:
.**                D  (YES,,NO,%CONT5)
.**                   IS THIS REQUEST FOR AN SVC ERROR MESSAGE ?     */
.**                                                                  *
.*********************************************************************
.SELECT2 ANOP                          TEST FOR SVCERR REQUEST ROUT
         AIF   ('&TYPEREQ' NE 'SVCERR').SELECT3 CONTINUE IF NOT SVCERR
.*********************************************************************
.**                                                                  *
.**                S  (,END)
.**                   CALL SVCMSG: GENERATE INSTRUCTIONS FOR SVC MSG */
.**                                                                  *
.*********************************************************************
         SVCERR &SVC,&ABENDRG,&RC,&INST11 CALL SVCERR REQ'T ROUTINE
         AGO   .END                    EXIT
.*********************************************************************
.**                                                                  *
.**%CONT5:
.**                D  (YES,,NO,%CONT6)
.**                   IS THIS REQUEST FOR A MESSAGE ?                */
.**                                                                  *
.*********************************************************************
.SELECT3 ANOP                          TEST FOR MSG REQUEST ROUTINE
         AIF   ('&TYPEREQ' NE 'MSG').SELECT4 CONTINUE IF NOT MSG
.*********************************************************************
.**                                                                  *
.**                S  (,END)
.**                   CALL MSG: GENERATE INSTRUCTIONS FOR MSG        */
.**                                                                  *
.*********************************************************************
         MSG   &FIRST,&SECOND,&INST11,&INST12,&INST13,&INST14,&INST15, *
               &INST16,&INST21,&INST22,&INST23,&INST24,&INST25,&INST26
         AGO   .END                    EXIT
.*********************************************************************
.**                                                                  *
.**%CONT6:
.**                D  (YES,,NO,%CONT7)
.**                   IS THIS REQUEST FOR A PROMPTING MESSAGE ?      */
.**                                                                  *
.*********************************************************************
.SELECT4 ANOP                          TEST FOR PTGT REQUEST ROUTINE
         AIF   ('&TYPEREQ' NE 'PTGT').ERSLECT CONTINUE IF NOT MSG
.*********************************************************************
.**                                                                  *
.**                S  (,END)
.**                   CALL PTGT: GENERATE INSTRUCTIONS FOR PTGT MSG  */
.**                                                                  *
.*********************************************************************
         PTGT  &FIRST                  INVOKE THE INTERNAL SUBROUTINE
         AGO   .END                    EXIT
.*********************************************************************
.**                                                                  *
.**%CONT7:
.**                P  ISSUE AN ERROR MESSAGE                         */
.**                P  (,NOLINK)
.**                   SET CONDITION CODE TO 12                       */
.**                                                                  *
.*********************************************************************
.ERSLECT ANOP                          COME HERE IF SYNTAX IN &TYPEREQ
         MNOTE 12,'MISSING OR SYNTAX ERROR IN OPTION KEYWORD'
         AGO   .NOLINK                 BRANCH TO EXIT
.*********************************************************************
.**                                                                  *
.**END:
.**                D  (NO,,YES,NOLINK)
.**                   HAS THE LIST FORM BEEN REQUESTED ?             */
.**                                                                  *
.*********************************************************************
.END     ANOP                          ENDING ROUTINE FOR ENTIRE MACRO
         AIF   (&LISTSW EQ 1).NOLINK   BRANCH AROUND THE BRANCH & LINK
.*********************************************************************
.**                                                                  *
.**                P  GENERATE THE BRANCH & LINK INSTRUCTION TO I/O  */
.**                                                                  *
.*********************************************************************
         AIF   ('&VCONBR' NE 'YES').BALR
         L     15,@IOVCON               ADDR TO BR TO        @ZA04126
         BALR  14,15                    ENTER THE IO ROUTINE @ZA04126
         AGO      .NOLINK
.BALR    ANOP
         L     15,TSTIO                ESTABLISH THE ADDRESS TO IO
         BALR  14,15                   BRANCH TO I/O
.*********************************************************************
.**                                                                  *
.**NOLINK:
.**                R  RETURN CONTROL                                 */
.**                                                                  *
.*********************************************************************
.NOLINK  MEND                          RETURN CONTROL TO USER
         MACRO
         DATA  &DATAPTR,&DSNAME
.*********************************************************************
.**                                                                  *
.**DATA:
.**                E  DATA REQUEST ROUTINE                           */
.**                                                                  *
.*********************************************************************
         GBLB  &LISTSW
.*********************************************************************
.**                                                                  *
.**                P  SET UP INSTRUCTION NECESSARY TO STORE          */
.**                   DATA REQUEST # IN P.L.                         */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW EQ 1).LISTTYP  FIND OUT WHICH FORM E OR L
         MVI   0(1),1                  STORE TYPE REQT IN P. L. (DATA)
         AGO   .NEXTSTP                BRANCH AND CONTINUE
.LISTTYP ANOP                          LABEL FOR DC TYPE INSTRUCTION
         DC    AL2(0)                  FILLER
.*********************************************************************
.**                                                                  *
.**                D  (YES,,NO,%CONT8)
.**                   IS THE 'DATAPTR' PARAMETER NULL                */
.**                                                                  *
.*********************************************************************
.NEXTSTP ANOP                          LABEL USED TO SKIP DC TYPE INST
         AIF   ('&DATAPTR' NE '').STOREDP  TEST FOR REQD PARM DATAPTR
.*********************************************************************
.**                                                                  *
.**                P  ISSUE WARNING MESSAGE                          */
.**                                                                  *
.*********************************************************************
         MNOTE 0,'THE DATAPTR KEYWORD IS REQUIRED, UNLESS A NULL LINE  *
               HAS BEEN REQUESTED'
.*********************************************************************
.**                                                                  *
.**%CONT8:
.**                S  CALL STORE: TO INSERT DATAPTR, DSNAME
.**                   AND FILLER INTO P.L.                           */
.**                                                                  *
.*********************************************************************
.STOREDP ANOP                          BRANCH HERE IF &DATAPTR CODED
         STORE 4,&DATAPTR,4            PREPARE INST TO INSERT INTO P.L.
         STORE 8,&DSNAME,4             PREPARE INST TO INSERT INTO P.L.
         STORE 12,,72                  IF LIST FORM PREPARE DC'S ZERO
.*********************************************************************
.**                                                                  *
.**%CONT9:
.**                R  RETURN TO THE DRIVER                           */
.**                                                                  *
.*********************************************************************
         MEND
         MACRO
         SVCERR &SVC,&ABENDRG,&RC,&INST11
.*********************************************************************
.**                                                                  *
.**SVC:
.**                E  SVC BUILD PARM ROUTINE                         */
.**                                                                  *
.*********************************************************************
         GBLB  &LISTSW                 SWITCH FOR LIST FORM OF MF
         GBLB  &STORE                  SW FOR STORE TO STRIP NUM DOWN
.*********************************************************************
.**                                                                  *
.**                P  SET UP INST NECESSARY TO STORE
.**                   SVC REQUEST # IN P.L.                          */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW EQ 1).NEXTSTP  TEST FOR LIST FORM INST
         MVI   0(1),3                  STORE SVCERR REQUEST NUM IN P.L.
.*********************************************************************
.**                                                                  *
.**                D  (YES,,NO,%CONT10)
.**                   ARE THE PARAMETERS CODED CORRECTLY ?           */
.**                P  ISSUE WARNING MESSAGE IF INCORRECT             */
.**                                                                  *
.*********************************************************************
.NEXTSTP ANOP                          THIS PORTION CHECKS PARMS
         AIF   ('&ABENDRG' EQ '').CONT1  BRANCH TO CONTINUE IF NULL
         AIF   ('&ABENDRG'(1,1) EQ '(').CONT1  BRANCH TO CONTINUE IF OK
         MNOTE 12,'REGISTER NOTATION IS REQUIRED WITH THE ABENDRG PARM'
.CONT1   ANOP                          BRANCH HERE IF ABENDRG OK
         AIF   ('&RC' EQ '').CONT2     BRANCH TO CONTINUE IF NULL
         AIF   ('&RC'(1,1) EQ '(').CONT2  BRANCH TO CONTINUE IF OK
         MNOTE 12,'REGISTER NOTATION IS REQUIRED WITH THE RC PARM'
.CONT2   ANOP                          BRANCH HERE IF RC PARM OK
         AIF   ('&SVC' NE '').STORSVC  TEST FOR NULL PARM
         MNOTE 0,'THE SVC KEYWORD IS REQUIRED WITH THE SVCERR OPTION'
.*********************************************************************
.**                                                                  *
.**%CONT10:
.**                S  CALL STORE:  TO INSERT &ABENDRG, &SVC,
.**                   &RC AND FILLER INTO P.L.                       */
.**                                                                  *
.*********************************************************************
.STORSVC ANOP                          BRANCH HERE IF &SVC CODED
         STORE 2,,2                    PREPARE FILLER IF LIST FORM
         STORE 4,&ABENDRG,4            PREPARE INST TO INSERT INTO P.L.
         STORE 8,&RC,4                 PREPARE INST TO INSERT INTO P.L.
         STORE 12,,4                   PREPARE FILLER IF LIST FORM
         STORE 16,&SVC,4               PREPARE INST TO INSERT INTO P.L.
         STORE 20,,26                  PREPARE FILLER IF LIST FORM
.*********************************************************************
.**                                                                  *
.**                S  CALL INSTTYP: PROCESS TYPE INSERT              */
.**                                                                  *
.*********************************************************************
         TYPE 46,&INST11
.*********************************************************************
.**                                                                  *
.**                S  CALL STORE: PREPARE INST TO STORE
.**                   FILLER INTO P.L.                               */
.**                                                                  *
.*********************************************************************
         STORE 52,,8                   PREPARE FILLER IF LIST FORM
.*********************************************************************
.**                                                                  *
.**                S  CALL INSTWHR: PROCESS WHERE PORTION OF INSERT  */
.**                                                                  *
.*********************************************************************
         WHERE 60,&INST11
.*********************************************************************
.**                                                                  *
.**%CONT13:
.**                R  RETURN TO DRIVER                               */
.**                                                                  *
.*********************************************************************
         MEND                          END OF SVCERR ROUTINE
         MACRO
         MSG   &FIRST,&SECOND,&INST11,&INST12,&INST13,&INST14,&INST15, *
               &INST16,&INST21,&INST22,&INST23,&INST24,&INST25,&INST26
.*********************************************************************
.**                                                                  *
.**MSG:
.**                E  MSG ROUTINE                                    */
.**                                                                  *
.*********************************************************************
         GBLB  &LISTSW                 SWITCH IF LIST FORM USED
         GBLB  &STORESW                SW INDICATES TO STORE STRIP NUM
.*********************************************************************
.**                                                                  *
.**                P  SET UP INST NECESSARY TO
.**                   STORE MSG REQ # IN P.L.                        */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW EQ 1).LISTTYP  TEST WHICH FORM MACRO L OR E
         MVI   0(1),2                  MOVE CODE FOR MSG INTO P.L.
.*********************************************************************
.**                                                                  *
.**                D  (YES,,NO,%CONT14)
.**                   IS THE 'FIRST' PARAMETER NULL ?                */
.**                                                                  *
.*********************************************************************
.LISTTYP ANOP                          LABEL USED BRANCH AROUND E INST
         AIF   ('&FIRST' NE '').NEXTSTP TEST IF USER CODED FIRST PARM
.*********************************************************************
.**                                                                  *
.**                P  ISSUE AN WARNING MSG                           */
.**                                                                  *
.*********************************************************************
         MNOTE 0,'THE FIRST PARM IS REQUIRED WITH THE MSG OPTION'
.*********************************************************************
.**                                                                  *
.**%CONT14:
.**                S  CALL INSTTYP: SET UP INST TO INSERT
.**                   TYPES INTO P. L.                               */
.**                                                                  *
.*********************************************************************
.NEXTSTP ANOP                          ROUTINE TO PLACE TYPES IN LIST
         INSTTYP 2,&INST11,&INST12,&INST13,&INST14,&INST15,&INST16
         STORE 8,,8                    PREPARE FILLER IF LIST FORM
.*********************************************************************
.**                                                                  *
.**%CONT17:
.**                S  CALL STORE: STORE &FIRST INTO PARM LIST        */
.**                                                                  *
.*********************************************************************
&STORESW SETB  1                       TURN ON STRIP SWITCH FOR STORE
         STORE 16,&FIRST,4             PREPARE INST TO STORE IN LIST
.*********************************************************************
.**                                                                  *
.**                S  CALL INSTWHR: PROCESS WHERE PORTION OF INSERTS */
.**                                                                  *
.*********************************************************************
         INSTWHR 20,&INST11,&INST12,&INST13,&INST14,&INST15,&INST16
         STORE 44,,2                   PREPARE FILLER IF LIST FORM
.*********************************************************************
.**                                                                  *
.**                S  CALL INSTTYP: PROCESS TYPE INSERT OF 2ND LEV   */
.**                                                                  *
.*********************************************************************
         INSTTYP 46,&INST21,&INST22,&INST23,&INST24,&INST25,&INST26
.*********************************************************************
.**                                                                  *
.**                S  CALL STORE: PREPARE INST TO STORE
.**                   &SECOND AND FILLER INTO P.L.                   */
.**                                                                  *
.*********************************************************************
         STORE 52,,4                   PREPARE FILLER IF LIST FORM
&STORESW SETB  1                       TURN ON STRIP SWITCH FOR STORE
         STORE 56,&SECOND,4            PREPARE INST TO STORE &SECOND
.*********************************************************************
.**                                                                  *
.**                S  CALL INSTWHR: PROCESS WHERE PORTION OF INSERTS */
.**                                                                  *
.*********************************************************************
         INSTWHR 60,&INST21,&INST22,&INST23,&INST24,&INST25,&INST26
.*********************************************************************
.**                                                                  *
.**%CONT18:
.**                R  RETURN TO DRIVER                               */
.**                                                                  *
.*********************************************************************
         MEND                          END OF MESSAGE PROCESSOR ROUTINE
         MACRO
         PTGT  &FIRST
.*********************************************************************
.**                                                                  *
.**                E  PTGT ROUTINE                                   */
.**                                                                  *
.*********************************************************************
         GBLB  &LISTSW                 SWITCH FOR LIST FORM
         GBLB  &STORESW                SWITCH FOR STORE TO STRIP NUM
.*********************************************************************
.**                                                                  *
.**                P  SET NECESSARY INST TO STORE
.**                   PTGT # INTO P.L.                               */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW EQ 1).LISTTYP  TEST FOR LIST FORM
         MVI   0(1),4                  STORE CODE NUM FOR PTGT REQT
.*********************************************************************
.**                                                                  *
.**                D  (YES,,NO,%CONT19)
.**                   IS THE 'FIRST' PARAMETER NULL ?                */
.**                                                                  *
.*********************************************************************
.LISTTYP ANOP                          BRANCH TO IF LIST FORM
         AIF   ('&FIRST' NE '').STOR1ST TEST FOR NULL PARM
.*********************************************************************
.**                                                                  *
.**                P  ISSUE AN WARNING MESSAGE                       */
.**                                                                  *
.*********************************************************************
         MNOTE 0,'THE FIRST KEYWORD IS REQUIRED WITH THE PTGT OPTION'
.*********************************************************************
.**                                                                  *
.**%CONT19:
.**                S  CALL STORE: STORE PARMS AND FILLERS INTO P.L.  */
.**                                                                  *
.*********************************************************************
.STOR1ST ANOP                          ROUTINE TO PREPARE P.L.
         STORE 2,,14                   PREPARE FILLER IF LIST FORM
&STORESW SETB  1                       TURN ON STRIP SWITCH
         STORE 16,&FIRST,4             PREPARE INST TO STORE &FIRST
         STORE 20,,64                  PREPARE FILLER IF LIST FORM
.*********************************************************************
.**                                                                  *
.**%CONT20:
.**                R  RETURN TO DRIVER                               */
.**                                                                  *
.*********************************************************************
         MEND                          END OF PTGT PROCESSOR ROUTINE
         MACRO
         INSTTYP &START,&IN1,&IN2,&IN3,&IN4,&IN5,&IN6
.*********************************************************************
.**                                                                  *
.**INSTTYP:
.**                E  ROUTINE FOR INSERT TYPE PORTION                */
.**                                                                  *
.*********************************************************************
         LCLA  &DISP                   VARIABLE TO CONTAIN DISPLACEMENT
&DISP    SETA  &START                  INITIALIZE DISPLACEMENT COUNTER
.*********************************************************************
.**                                                                  *
.**                P  PREPARE EACH INSERT TO BE PROCESSED
.**                   BY TYPE PROCESSOR                              */
.**                                                                  *
.*********************************************************************
         TYPE  &DISP,&IN1              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+1                 INCREMENT DISPLACEMENT COUNTER
         TYPE  &DISP,&IN2              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+1                 INCREMENT DISPLACEMENT COUNTER
         TYPE  &DISP,&IN3              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+1                 INCREMENT DISPLACEMENT COUNTER
         TYPE  &DISP,&IN4              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+1                 INCREMENT DISPLACEMENT COUNTER
         TYPE  &DISP,&IN5              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+1                 INCREMENT DISPLACEMENT COUNTER
         TYPE  &DISP,&IN6              CALL TYPE ROUTINE TO STORE PARM
.*********************************************************************
.**                                                                  *
.**                R  RETURN TO CONTINUE PROCESSING                  */
.**                                                                  *
.*********************************************************************
         MEND                          END OR TYPE PROCESSOR OF INSERTS
         MACRO
         TYPE  &DISP,&IN               INTERNAL ROUTINE / TYPE PORTION
.*********************************************************************
.**                                                                  *
.**TYPE:           E  ROUTINE TO DETERMINE WHICH TYPE                */
.**                                                                  *
.*********************************************************************
         LCLA  &TYINST                 VARIABLE FOR CODE OF INSERT
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,NULLTYP)
.**                   IS THIS INSERT NULL ?                          */
.**                                                                  *
.*********************************************************************
         AIF   ('&IN' EQ '').NULLTYP   BRANCH TO NULL PROCESSING
.*********************************************************************
.**                                                                  *
.**                P  DETERMINE WHICH TYPE REQ'T (PDE,NUM,ETC)       */
.**                                                                  *
.*********************************************************************
         AIF   ('&IN(1)' NE 'APDE').CONT1 TEST IF APDE TYPE INSERT
&TYINST  SETA  6                       SET CODE VARIABLE / INDICATE PDE
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT1   ANOP                          BRANCHED TO IF NOT PDE
         AIF   ('&IN(1)' NE 'NUM').CONT2 TEST IF NUM TYPE INSERT
&TYINST  SETA  5                       SET CODE VARIABLE / INDICATE PDE
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT2   ANOP                          BRANCHED TO IF NOT PDE
         AIF   ('&IN(1)' NE 'REG').CONT3 TEST IF REG TYPE INSERT
&TYINST  SETA  1                       SET CODE VARIABLE / INDICATE REG
         AIF   ('&IN(2)'(1,1) EQ '(').CONT21  TEST FOR REG NOTATION
         MNOTE 12,'WITH THE REG TYPE INSERT ONLY REG NOTATION ALLOWED'
.CONT21  ANOP                          BRANCH HERE IF SYNTAX OK
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT3   ANOP                          BRANCH TO IF NOT REG TYPE
         AIF   ('&IN(1)' NE 'ADDR').CONT4 TEST IF ADDR TYPE INSERT
&TYINST  SETA  2                       SET CODE VAR / INDICATE ADDR
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT4   ANOP                          BRANCH TO IF NOT ADDR TYPE
         AIF   ('&IN(1)' NE 'ADDRCONX').CONT5 TEST ADDRCONX TYPE INSERT
&TYINST  SETA  3                       SET CODE VAR / INDICATE ADDR
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT5   ANOP                          BRANCH TO IF NOT ADDR TYPE
         AIF   ('&IN(1)' NE 'ADDRCOND').CONT6 TEST ADDRCOND TYPE INSERT
&TYINST  SETA  4                       SET CODE VAR / INDICATE ADDR
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.CONT6   ANOP                          BRANCH TO IF NOT ADDRCONX TYPE
         AIF   ('&IN(1)' NE 'VPDE').ERROR TEST VPDE TYPE INSERT
&TYINST  SETA  7                       SET CODE VAR / INDICATE ADDR
         AGO   .PROCESS                BRANCH TO STORE INTO LIST
.*********************************************************************
.**                                                                  *
.**                P  IF THERE IS A SYNTAX ERROR - ISSUE WARNING MSG */
.**                                                                  *
.*********************************************************************
.ERROR   ANOP                          COME HERE IF SYNTAX ERROR FOUND
         MNOTE 12,'THE TYPE PORTION OF AN INSERT HAS A SYNTAX ERROR'
&TYINST  SETA  0                       SET CODE TO NULL VALUE
.PROCESS ANOP                          THIS PORTION CALLS STORE
.*********************************************************************
.**                                                                  *
.**                S  (,ENDTYP)
.**                   CALL STORE: STORE CODE INTO P. L.              */
.**                                                                  *
.*********************************************************************
         STORE &DISP,&TYINST,1         CALL STORE TO PREPARE INST
         AGO   .ENDTYP                 BRANCH TO END TO RETURN
.*********************************************************************
.**                                                                  *
.**NULLTYP:
.**                S  CALL STORE: STORE FILLER ZEROS IF L FORM       */
.**                                                                  *
.*********************************************************************
.NULLTYP ANOP                          BRANCH HERE IF INSERT PARM NULL
         STORE &DISP,,1                CALL STORE FOR FILLER
.*********************************************************************
.**                                                                  *
.**ENDTYP:         R  RETURN TO INSTTYP                              */
.**                                                                  *
.*********************************************************************
.ENDTYP  ANOP                          BRANCH HERE TO EXIT ROUTINE
         MEND                          END OF TYPE ROUTINE
         MACRO
         INSTWHR &START,&IN1,&IN2,&IN3,&IN4,&IN5,&IN6
.*********************************************************************
.**                                                                  *
.**INSTWHR:
.**                E  ROUTINE FOR INSERT WHERE PORTION               */
.**                                                                  *
.*********************************************************************
         LCLA  &DISP                   VARIABLE TO CONTAIN DISPLACEMENT
&DISP    SETA  &START                  INITIALIZE DISPLACEMENT COUNTER
.*********************************************************************
.**                                                                  *
.**                P  PREPARE EACH INSERT TO BE PROCESSED
.**                   BY WHERE PROCESSOR                             */
.**                                                                  *
.*********************************************************************
         WHERE &DISP,&IN1              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+4                 INCREMENT DISPLACEMENT COUNTER
         WHERE &DISP,&IN2              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+4                 INCREMENT DISPLACEMENT COUNTER
         WHERE &DISP,&IN3              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+4                 INCREMENT DISPLACEMENT COUNTER
         WHERE &DISP,&IN4              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+4                 INCREMENT DISPLACEMENT COUNTER
         WHERE &DISP,&IN5              CALL TYPE ROUTINE TO STORE PARM
&DISP    SETA  &DISP+4                 INCREMENT DISPLACEMENT COUNTER
         WHERE &DISP,&IN6              CALL TYPE ROUTINE TO STORE PARM
.*********************************************************************
.**                                                                  *
.**                R  RETURN TO CONTINUE PROCESSING                  */
.**                                                                  *
.*********************************************************************
         MEND
         MACRO
         WHERE &DISP,&IN
.*********************************************************************
.**                                                                  *
.**WHERE:          E  ROUTINE PROCESS WHERE PORTION OF ONE INSERT    */
.**                                                                  *
.*********************************************************************
         GBLB  &STORESW                SWITCH - INDICATE STRIP NUM
         LCLC  &WHERE                  LABEL USED TO OBTAIN WHERE PARM
&WHERE   SETC  '&IN(2)'                STRIP OFF WHERE PORTION OF INST
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,NULLWHR)
.**                   IS THIS INSERT NULL ?                          */
.**                                                                  *
.*********************************************************************
         AIF   ('&IN' EQ '').NULLWHR   BRANCH TO NULL PROCESSING
.*********************************************************************
.**                                                                  *
.**                P  ISSUE A WARNING MSG IF WHERE PORTION IS NULL   */
.**                                                                  *
.*********************************************************************
         AIF   ('&WHERE' NE '').CONT   TEST FOR NULL PORTION
         MNOTE 12,'AN INSERT WHERE PORTION IS MISSING OR MISSPELLED'
.*********************************************************************
.**                                                                  *
.**                P  TURN ON THE STRIP SW IF 'NUM' IS THE TYPE      */
.**                                                                  *
.*********************************************************************
.CONT    ANOP                          THIS PORTION PREPARE TO STORE
&STORESW SETB  ('&IN(1)' EQ 'NUM')     TURN ON STRIP SWITCH IF I/O NUM
.*********************************************************************
.**                                                                  *
.**                S  (,ENDWHR)
.**                   CALL STORE: HAVE WHERE PORTION PLACED IN P.L.  */
.**                                                                  *
.*********************************************************************
         STORE &DISP,&WHERE,4          CALL STORE - STORE WHERE PORTION
         AGO   .ENDWHR                 BRANCH TO END FOR RETURN
.*********************************************************************
.**                                                                  *
.**NULLWHR:
.**                S  CALL STORE: STORE FILLER ZEROS IF L FORM       */
.**                                                                  *
.*********************************************************************
.NULLWHR ANOP                          BRANCH HERE IF INSERT PARM NULL
         STORE &DISP,,4                CALL STORE FOR FILLER
.*********************************************************************
.**                                                                  *
.**ENDWHR:         R  RETURN TO PROCESSING                           */
.**                                                                  *
.*********************************************************************
.ENDWHR  ANOP                          BRANCH HERE TO EXIT
         MEND                          END OF INSTWHR ROUTINE
         MACRO
         STORE &DISP,&PARM,&LEN        ROUT. TO PREPARE INST FOR LIST
.*********************************************************************
.**                                                                  *
.**STORE:
.**                E  STORE DATA IN PARM LIST                        */
.**                                                                  *
.*********************************************************************
         GBLB  &STORESW                SW TO INDICATE STRIPPING
         GBLB  &LISTSW                 SW TO INDICATE USER USED L FORM
         LCLC  &PARMC                  VARIABLE TO STRIP PARM DOWN
         LCLA  &PARMN                  VARIABLE TO CHANGE ATTRIBUTES
         LCLA  &LENGTH                 VARIABLE TO COUNT CHARS IN PARM
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,START)
.**                   IS THIS A LIST FORM ?                          */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW EQ 1).START    AVOID NEXT TEST IF LIST FORM
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,RETURN)
.**                   IS THIS A NULL PARM ?                          */
.**                                                                  *
.*********************************************************************
         AIF   ('&PARM' EQ '').RETURN  TEST FOR NULL PARM (ONLY E FORM)
.*********************************************************************
.**                                                                  *
.**START:          D  (YES,,NO,PROCESS)
.**                   IS STRIP SWITCH ON ?                           */
.**                                                                  *
.*********************************************************************
.START   ANOP                          BRANCH HERE IF LIST FORM
         AIF   (&STORESW NE 1).PROCESS SEE IF THERE IS NO NEED TO STRIP
         AIF   ('&PARM' EQ '').PROCESS IF NULL DO NOT PREPARE TO STRIP
.*********************************************************************
.**                                                                  *
.**                D  (NO,,YES,PROCESS)
.**                   TEST FOR REGISTER NOTATION                     */
.**                                                                  *
.*********************************************************************
         AIF   ('&PARM'(1,1) EQ '(').PROCESS TEST FOR REGISTER NOTATION
.*********************************************************************
.**                                                                  *
.**                P  ISSUE A WARNING MESSAGE IF
.**                   ERROR FOUND IN NUMBER TO BE STRIPPED           */
.**                                                                  *
.*********************************************************************
&LENGTH  SETA  K'&PARM                 COUNT PARM LENGTH FOR POSS ERROR
         AIF   (&LENGTH EQ 5).OK       TEST FOR SYNTAX ERROR BY USER
         MNOTE 12,'A SYNTAX ERROR FOUND IN A MESSAGE OR INSERT NUMBER'
.*********************************************************************
.**                                                                  *
.**OK:             P  STRIP OFF NUMBER PORTION OF PARM               */
.**                                                                  *
.*********************************************************************
.OK      ANOP                          BRANCH HERE IF NUM SEEMS CORRECT
&PARMC   SETC  '&PARM'(3,3)            STRIP OF NUM PORTION
&PARMN   SETA  &PARMC                  CHANGE ATTRIBUTE / CHAR TO ARTH
.*********************************************************************
.**                                                                  *
.**                D  (YES,,NO,BLDINST)
.**                   IS THIS THE LIST FORM WHICH REQS DC'S          */
.**                                                                  *
.*********************************************************************
         AIF   (&LISTSW NE 1).BLDINST  SEE IF PL IN DYNAMIC STORAGE
.*********************************************************************
.**                                                                  *
.**                P  (,RETURN)
.**                   BUILD DC FOR LIST FORM P.L.                    */
.**                                                                  *
.*********************************************************************
         DC    AL&LEN.(&PARMN)         PLACEMENT OF PARAMETER INTO LIST
         AGO   .RETURN                 BRANCH TO EXIT
.*********************************************************************
.**                                                                  *
.**BLDINST:        P  (,RETURN)
.**                   BUILD THE INSTURCTION NECESSARY TO STORE
.**                   INTO A DYNAMIC AREA                            */
.**                                                                  *
.*********************************************************************
.BLDINST ANOP                          BRANCH HERE FOR EXECUTABLE FORM
         AIF   (&LEN EQ 1).BLDMVI1     SEE IF ONE BYTE TYPE INST NEEDED
         LA    14,&PARMN               GET PARAMETER INTO WORK REGISTER
         ST    14,&DISP.(1)            STORE PARAMETER INTO PARM LIST
         AGO   .RETURN                 BRANCH TO EXIT
.BLDMVI1 ANOP                          BRANCH HERE IF ONE BYTE LENGTH
         MVI   &DISP.(1),&PARMN        MOVE PARM INTO PARAMETER LIST
         AGO   .RETURN                 BRANCH TO EXIT
.*********************************************************************
.**                                                                  *
.**PROCESS:        P  PREPARE DC OR INSTRUCTIONS TO BUILD P.L.       */
.**                                                                  *
.*********************************************************************
.PROCESS ANOP                          BRANCH HERE / STANDARD STORE REQ
         AIF   (&LISTSW NE 1).INSTBLD  TEST FOR EXECUTABLE FORM REQT
         AIF   ('&PARM' NE '').DCPARM  TEST FOR FILLER REQUEST
         DC    &LEN.AL1(0)             FILLER OF HEX ZEROS
         AGO   .RETURN                 BRANCH TO EXIT
.DCPARM  ANOP                          BRANCH HERE FOR PREPARATION DC'S
         AIF   ('&PARM'(1,1) NE '(').CONTDC ENSURE USER HAS NOT USED RG
         MNOTE 12,'REGISTER NOTATION IS NOT PERMITTED WITH THE LIST FOR*
               M (MF=L)'
.CONTDC  DC    AL&LEN.(&PARM)          PLACEMENT OF PARAMETER INTO LIST
         AGO   .RETURN                 BRANCH TO EXIT
.INSTBLD ANOP                          BRANCH HERE FOR DYNAMIC LIST
         AIF   (&LEN NE 1).CONTI2      TEST FOR ONE BYTE TYPE INST
         AIF   ('&PARM'(1,1) NE '(').CONTI1 TEST FOR REG NOTATION
         STC   &PARM,&LEN.(1)          STORE PARM INTO LIST
         AGO   .RETURN                 BRANCH TO EXIT
.CONTI1  ANOP                          BRANCH HERE FOR MVI TYPE INST
         MVI   &DISP.(1),&PARM         MOVE VALUE INTO LIST
         AGO   .RETURN                 BRANCH TO EXIT
.CONTI2  ANOP                          BRANCH HERE IF NOT ONE BYTE
         AIF   ('&PARM'(1,1) EQ '(').REGPARM  IF REG USE STORE INST
         LA    14,&PARM                GET PARM INTO WORK REGISTER
         ST    14,&DISP.(1)            STORE PARM INTO PARAMETER LIST
         AGO   .RETURN                 BRANCH TO EXIT
.REGPARM ANOP                          BRANCH HERE IF REG NOTATION
         ST    &PARM,&DISP.(1)         STORE PARM INTO PARAMETER LIST
.*********************************************************************
.**                                                                  *
.**RETURN:         R  RETURN TO CALLER AND CONTINUE PROCESSING       */
.**                                                                  *
.*********************************************************************
.RETURN  ANOP                          EXIT ROUTINE FOR STORE
&STORESW SETB  0                       TURN OFF STRIP SW FOR NEXT PARM
         MEND                          END OF STORE ROUTINE
         PRINT ON
./ ADD NAME=IKJEGSPL                               01MAY81 18.20.54
         MACRO
&NAME    IKJEGSPL &RTRY=,&ABNTB=,&MODNM=,&TNM=*
.**********************************************************************
.*                                                                    *
.*  IKJEGSPL IS USED TO GENERATE A LIST OF INFORMATION TO BE USED BY  *
.*  THE ESTAE EXIT ROUTINE IN AN ABEND SITUATION.  THIS LIST WILL     *
.*  CONTAIN THE FOLLOWING INFORMATION:                                *
.*       RETRY ROUTINE ADDRESS;                                       *
.*       ABEND IC TABLE ADDRESS;                                      *
.*       MODULE ENTRY POINT;                                          *
.*       MODULE NAME;                                                 *
.*       MODULE TEXT NAME.                                            *
.*                                                                    *
*   STATUS -- VERSION NO. 1 - OS/VS2 RELEASE NO. 02                   *
*   CHANGE LEVEL -- 01 - DATE 1-1-73                                  *
.*                                                                    *
.**********************************************************************
         SPACE 1
         LCLA  &LENTNM
         LCLC  &A1
&LENTNM  SETA  K'&TNM
&A1      SETC  '*'
         AIF   (T'&RTRY EQ 'O').MSG1
         AIF   (T'&ABNTB EQ 'O').MSG2
         AIF   (T'&MODNM EQ 'O').MSG3
         AIF   (T'&MODNM NE 'J').MSG3
&NAME    DS    0F                 EXIT ROUTINE PARAM LIST
         DC    A(&RTRY)           RETRY ROUTINE ADDRESS
         DC    A(&ABNTB)          ABEND IC TABLE ADDRESS
         DC    A(&MODNM)          ENTRY POINT FOR THIS MODULE
         DC    CL8'&MODNM'        MODULE NAME
         DS    0X   **THE FOLLOWING IS AN INSERT FOR THE EXIT RTN MSG**
         DC    AL2(&LENTNM+5)     LENGTH OF MODULE TEXT NAME + 5
         DC    AL2(0)             THIS FIELD IS REQUIRED BY I/O
         DC    C'&TNM '      MODULE TEXT NAME
         MEXIT
.MSG1    MNOTE 12,'SET ***RTRY&A1 EQUAL TO YOUR RETRY RTN  ADDR'
         MEXIT
.MSG2    MNOTE 12,'SET ***ABNTB&A1 EQUAL TO YOUR ABEND TABLE ADDR'
         MEXIT
.MSG3    MNOTE 12,'SET ***MODNM&A1 EQUAL TO YOUR MODULE CSECT NAME'
.END     MEND
./ ADD NAME=IKJEGS9G                               01MAY81 18.20.54
         MACRO
&SYMBOL  IKJEGS9G &OPRN,&TCBADDR=,&VALUE=O,&REGNO=P,&MF=D
         LCLB  &B(11),&SW(2)
         LCLA  &FLGS1,&FLGS2,&LEN
         LCLC  &REGNAM
         AIF   ('&MF' NE 'D').CONT1 CHECK IF DSECT REQUESTED.
         AIF   ('&SYMBOL' EQ '').DGEN1 CHECK FOR LABEL.
         MNOTE *,'LABEL IGNORED'
.DGEN1   ANOP
IKJEGS9G DSECT
         SPACE 1
***********************************************************************
*                                                                     *
*        THIS MACRO MAPS THE INPUT PARAMETER LIST TO THE              *
*        BREAKPOINT SVC (SVC 97).                                     *
*                                                                     *
* STATUS -- VERSION NO. 01 - OS/VS2 RELEASE NO. 01                    *
*                                                                     *
* CHANGE LEVEL -- 03 - DATE 04/25/71                                  *
*                                                                     *
***********************************************************************
         SPACE 1
S9GTCBPT DS    A -            TARGET TCB ADDRESS, OR PRB OR IRB
*                             ADDRESS.
S9GVALUE DS    A -            ADDRESS OF VALUE, OR VALUE.
*                             DEPENDING ON FUNCTION REQUESTED.
S9GFLGS1 DS    X -            FLAGS, BYTE 1.
S9GMACRO EQU   B'10000000' -  MACRO FLAG.
S9GTCPON EQU   B'01000000' -  SET TCBTCP BIT TO '1'B.
S9GTCPOF EQU   B'00100000' -  SET TCBTCP BIT TO '0'B.
S9GTRN   EQU   B'00010000' -  ALTER TCBTRN FIELD.
S9GOPSW  EQU   B'00001000' -  ALTER RBOPSW FIELD.
S9GGPR   EQU   B'00000100' -  ALTER SPECIFIED GPR.
S9GAGPR  EQU   B'00000010' -  ALTER ALL GPRS.
S9GFPR   EQU   B'00000001' -  ALTER SPECIFIED FPR.
S9GFLGS2 DS    X -            FLAGS, BYTE 2.
S9GWCF   EQU   B'10000000' -  SET RBWCF TO ZERO.
S9GACHK  EQU   B'01000000' -  VALIDITY CHECK SPECIFIED ADDRESS.
S9GDEQ   EQU   B'00100000' -  ISSUE DEQ FOR IKJEFT04 AFTER ABEND.
*              B'0000XXXX' -  RESERVED BITS.
S9GREGNO DS    H -            REGISTER NUMBER TO BE ALTERED.
         SPACE 1
         AGO   .EXIT
.*
.* FUNCTION VALIDATION SECTION.
.*
.CONT1   ANOP
&B(1)    SETB  1
&B(2)    SETB  ('&OPRN' EQ 'TCPON')
&B(3)    SETB  ('&OPRN' EQ 'TCPOFF')
&B(4)    SETB  ('&OPRN' EQ 'TRN')
&B(5)    SETB  ('&OPRN' EQ 'OPSW')
&B(6)    SETB  ('&OPRN' EQ 'GPR')
&B(7)    SETB  ('&OPRN' EQ 'AGPR')
&B(8)    SETB  ('&OPRN' EQ 'FPR')
&B(9)    SETB  ('&OPRN' EQ 'WCF')
&B(10)   SETB  ('&OPRN' EQ 'ADDRCHK')
&B(11)   SETB  ('&OPRN' EQ 'DEQ')
         AIF   (&B(2)+&B(3)+&B(4)+&B(5)+&B(6)+&B(7)+&B(8)+&B(9)+&B(10)+*
               &B(11) NE 1).ERROR1
&FLGS1   SETA  128*&B(1)+64*&B(2)+32*&B(3)+16*&B(4)+8*&B(5)+4*&B(6)+2*&*
               B(7)+&B(8)
&FLGS2   SETA  128*&B(9)+64*&B(10)+32*&B(11)
         AIF   ('&MF' NE 'L').EXEC1
.*
.* LIST SECTION.
.*
&SYMBOL  DS    0F -           ALIGN ON WORD BOUNDARY.
        AIF ('&TCBADDR' EQ '').NOTCB
         DC    A(&TCBADDR) -  TARGET TCB ADDRESS, OR PRB OR IRB
*                             ADDRESS.
        AGO   .CHKVAL
.NOTCB   ANOP
         DC    A(0)        -  NO  TCB ADDR SUPPLIED
.CHKVAL  ANOP
         AIF   ('&VALUE' EQ 'O').SKIP1 CHECK IF VALUE SPECIFIED.
         DC    A(&VALUE) -    VALUE, OR ADDRESS OF VALUE.
         AGO   .SKIP2
.SKIP1   ANOP
         DC    A(0) -         VALUE NOT SPECIFIED.
.SKIP2   ANOP
         DC    AL1(&FLGS1) -  FLAGS, BYTE 1.
         DC    AL1(&FLGS2) -  FLAGS, BYTE 2.
         AIF   ('&REGNO' EQ 'P').SKIP3 CHECK IF REG SPECIFIED.
         DC    AL2(&REGNO) -  REGISTER NUMBER.
         AGO   .EXIT
.SKIP3   ANOP
         DC    AL2(0) -       REGISTER NOT SPECIFIED.
         AGO   .EXIT
.*
.* EXECUTE FORM
.*
.EXEC1   ANOP
&SW(2)   SETB  0
         AIF   ('&MF(1)' NE 'E').ERROR2
         AIF   ('&MF(2)' EQ '(1)').R1SET
         AIF   ('&MF(2)'(1,1) EQ '(').REG
&SYMBOL  LA    1,&MF(2) -     LOAD LIST ADDRESS.
         AGO   .R1SET
.REG     ANOP
&LEN     SETA  K'&MF(2)
&REGNAM  SETC  '&MF(2)'(2,&LEN-2)
&SYMBOL  LR    1,&REGNAM - LOAD LIST ADDRESS.
.R1SET   ANOP
         MVI   8(1),&FLGS1 -  SET FLAG BYTE 1.
         MVI   9(1),&FLGS2 -  SET FLAG BYTE 2.
         AIF   ('&TCBADDR' EQ '').ERROR3
&SW(1)   SETB  ('&VALUE' EQ 'O')
         AIF   ('&TCBADDR'(1,1) EQ '(').REGT
         LA    14,&TCBADDR -  GET TCB, PRB, OR IRB ADDRESS.
&SW(2)   SETB  1
.REGT    ANOP
         AIF   (&SW(1) EQ 1).STREGS
         AIF   (&SW(2) EQ 1).VALUE
&LEN     SETA  K'&TCBADDR
&REGNAM  SETC  '&TCBADDR'(2,&LEN-2)
         LR    14,&REGNAM - COPY TCB, PRB, OR IRB ADDRESS.
.VALUE   ANOP
         AIF   ('&VALUE'(1,1) EQ '(').REGV
         LA    15,&VALUE -    GET VALUE, OR ADDRESS OF VALUE.
         AGO   .STBOTH
.REGV    ANOP
&LEN     SETA  K'&VALUE
&REGNAM  SETC  '&VALUE'(2,&LEN-2)
         LR    15,&REGNAM - COPY VALUE, OR ADDRESS OF VALUE.
.STBOTH  ANOP
         STM   14,15,0(1) -   STORE INTO PARAMETER LIST.
         AGO   .REGNO
.STREGS  ANOP
         AIF   (&SW(2) EQ 1).ST1
&LEN     SETA  K'&TCBADDR
&REGNAM  SETC  '&TCBADDR'(2,&LEN-2)
         ST    &REGNAM,0(,1) - STORE INTO LIST.
         AGO   .REGNO
.ST1     ANOP
         ST    14,0(,1) -     STORE INTO PARAMETER LIST.
.REGNO   ANOP
         AIF   ('&REGNO' EQ 'P').SVC
         AIF   ('&REGNO'(1,1) EQ '(').REGR
         LA    0,&REGNO -     GET REGISTER NUMBER.
         STH   0,10(,1) -     STORE REGISTER NUMBER IN LIST.
         AGO   .SVC
.REGR    ANOP
&LEN     SETA  K'&REGNO
&REGNAM  SETC  '&REGNO'(2,&LEN-2)
         STH   &REGNAM,10(,1) - STORE REGISTER NUMBER.
.SVC     ANOP
         SVC   97 -           PASS CONTROL TO BREAKPOINT SVC.
.EXIT    ANOP
         MEXIT
.ERROR1  MNOTE 12,'INVALID OPTION OR OPTION NOT SPECIFIED'
         MEXIT
.ERROR2  MNOTE 12,'INVALID MACRO FORM SPECIFIED'
         MEXIT
.ERROR3  MNOTE 12,'TCBADDR NOT SPECIFIED, BUT REQUIRED'
         MEXIT
         MEND
./ ADD NAME=IKJPARMA                               01MAY81 18.20.54
         MACRO
         IKJPARMA
IKJPARMA DSECT                DESCRIPTION OF ADDRESS PDE.
         SPACE
PDELDNAM DS    A              POINTER TO LOAD NAME.
PDELEN1  DS    H              LENGTH OF LOAD NAME.
PDEFLG1  DS    X              FLAGS FOR LOAD NAME.
LDNAMFLG EQU   B'10000000'    INDICATES PRESENCE OF LOAD NAME.
PDERSV1  DS    X              RESERVED.
PDECTNAM DS    A              POINTER TO ENTRY NAME.
PDELEN2  DS    H              LENGTH OF ENTRY NAME.
PDEFLG2  DS    X              FLAGS FOR ENTRY NAME.
CTNAMFLG EQU   B'10000000'    INDICATES PRESENCE OF ENTRY NAME.
PDERSV2  DS    X              RESERVED.
PDEADRPT DS    A              POINTER TO ADDRESS STRING.
PDELEN3  DS    H              LENGTH OF ADDRESS STRING.
PDEFLG3  DS    X              FLAGS FOR ADDRESS STRING.
AFLG     EQU   B'10000000'    INDICATES PRESENCE OF ADDRESS STRING.
PDERSV3  DS    X              RESERVED.
         SPACE
PDEFLG4  DS    X              ADDRESS TYPE FLAGS.
ABSADDR  EQU   B'00000000'    ABSOLUTE ADDRESS.
SYMADDR  EQU   B'10000000'    SYMBOLIC ADDRESS.
RELADDR  EQU   B'01000000'    RELATIVE ADDRESS.
GENR     EQU   B'00100000'    GENERAL REGISTER.
LFPR     EQU   B'00010000'    DOUBLE PREC. FLT. PT. REGISTER.
SFPR     EQU   B'00001000'    SINGLE PREC. FLT. PT. REGISTER.
CTONLY   EQU   B'00000100'    ENTRY NM NOT FOLLOWED BY SYM OR REL.
ABSCOMPL EQU   B'11111111'    COMPLEMENT FOR ABSOLUTE TEST.
         SPACE
PDESIGN  DS    C              EXPRESSION SIGN.
PDEINDCT DS    H              INDIRECT COUNT.
PDEEXPTR DS    A              PTR TO 1ST EXPRESSION PDE.
PDEFLG5  DS    0X             FLAG BYTE, PDE USER WORD.
PURESYM  EQU   B'10000000'    INDICATES PDE USER WORD POINTS TO SIB.
PDEUSER  DS    A              RESOLVED ADDR OR SIB POINTER.
PDESIB   EQU   X'80'          INDICATES USER WORD POINTS TO SIB.
PDECONVD EQU   X'40'          INDICATES ADDRESS IS CONVERTED.
PDEADLST EQU   X'20'          INDICATES PDE IS ONE OF A LIST.
PDEYECH  EQU   X'10'          INDICATES PDE IS USELESS.
PDEWRITE EQU   X'08'          INDICATES ADDRESS IS WRITABLE.
         SPACE
PDECHAIN DS    A              CHAIN PTR FIELD FOR ADDRESS LIST.
         SPACE
         ORG   PDECHAIN       IN ADDR RANGE, ADDR2 FOLLOWS ADDR1.
PDE2LDNA DS    A              POINTER TO LOAD NAME.
PDE2LEN1 DS    H              LENGTH OF LOAD NAME.
PDE2FLG1 DS    X              FLAGS FOR LOAD NAME.
PDE2RSV1 DS    X              RESERVED.
PDE2CTNA DS    A              POINTER TO ENTRY NAME.
PDE2LEN2 DS    H              LENGTH OF ENTRY NAME.
PDE2FLG2 DS    X              FLAGS FOR ENTRY NAME.
PDE2RSV2 DS    X              RESERVED.
PDE2ADRP DS    A              POINTER TO ADDRESS STRING.
PDE2LEN3 DS    H              LENGTH OF ADDRESS STRING.
PDE2FLG3 DS    X              FLAGS FOR ADDRESS STRING.
PDE2RSV3 DS    X              RESERVED.
         SPACE
PDE2FLG4 DS    X              ADDRESS TYPE FLAGS.
PDE2SIGN DS    C              EXPRESSION SIGN.
PDE2INDC DS    H              INDIRECT COUNT.
PDE2EXPT DS    A              PTR TO 1ST EXPRESSION PDE.
PDE2FLG5 DS    0X             FLAG BYTE, PDE USER WORD.
PDE2USER DS    A              RESOLVED ADDR OR SIB POINTER.
         SPACE
PDE2CHAI DS    A              CHAIN POINTER FOR ADDR LIST.
         MEND
./ ADD NAME=TCOMTAB                                01MAY81 18.20.54
         MACRO
         TCOMTAB
TCOMTAB  DSECT
         SPACE 1
***********************************************************************
*                                                                     *
*        THIS MACRO MAPS THE TEST COMMAND PROCESSOR COMMUNICATION     *
*        TABLE (TCOMTAB) USED BY ALL SUBCOMMAND PROCESSORS AND        *
*        SERVICE ROUTINES WHICH MAKE UP THE TSO/TEST COMMAND.         *
*                                                                     *
* STATUS -- VERSION NO. 01 - OS/VS2 RELEASE NO. 01                    *
*                                                                     *
* CHANGE LEVEL -- 04 - DATE 04/25/72                                  *
*                                                                     *
***********************************************************************
         SPACE 1
ECBPP    DS    A -            PP DISPATCHABILITY ECB.
         SPACE 1
ECBLIST  EQU   * -            BEGINNING OF ECBLIST FOR WAIT.
ECBTST   DS    A -            PTR TO TEST DISPATCHABILITY ECB.
ECBTERM  DS    A -            PTR TO PP TERMINATION ECB.
ECBTMPS  DS    A -            PTR TO STAI ECB.
ECBTMPA  DS    A -            PTR TO ATTENTION ECB.
         SPACE 1
ECBLOG   DS    A -            PTR TO STOP/MODIFY ECB.
         SPACE 1
TSTTCB   DS    0A -           PTR TO THE TEST TCB.
TSTTCBR  DS    X -            RESERVED.
TSTTCBP  DS    AL3 -          PTR TO THE TEST TCB.
         SPACE 1
PPTCB    DS    0A -           PTR TO THE PROBLEM PROGRAM TCB.
PPTCBR   DS    X -            RESERVED.
PPTCBP   DS    AL3 -          PTR TO THE PROBLEM PROGRAM TCB.
         DS    D -            *** RESERVED SPACE ***
         SPACE 1
OUTBUF   DS    A -            PTR TO GENERAL OUTPUT BUFFER.
OUTBUFRL EQU   256 -          LENGTH OF OUTPUT BUFFER.
BLDLAREA DS    0A -           ADDRESS OF BLDL ENTRY USED BY
*                             IKJEGINT AND IKJEGLDR.
CONAREA  DS    A -            PTR TO OUTPUT AREA USED BY CONVERT RTN.
CONAREAL EQU   72 -           LENGTH OF CONVERT WORK AREA.
WORKAREA DS    A -            PTR TO GENERAL WORK AREA.
REGSAVEL EQU   72*6 -         LENGTH OF 6 REGISTER SAVE AREAS.
REGSAVE1 DS    A -            PTR TO SAVE AREA FOR MAINLINE.
REGSAVE2 DS    A -            PTR TO SAVE AREA FOR COMMANDS.
REGSAVE3 DS    A -            PTR TO SAVE AREA FOR VALIDITY CHECKERS.
REGSAVE4 DS    A -            PTR TO SAVE AREA FOR IKJEGCVT.
REGSAVE5 DS    A -            PTR TO SAVE AREA FOR IKJEGIO.
REGSAVE6 DS    A -            PTR TO SAVE AREA FOR IKJEGSRH.
@TSTPARM DS    A -            *** RESERVED SPACE ***
         SPACE 1
TPLPTR   DS    A -            PTR TO TPL
TMPLL    DS    H -            LINE LENGTH
TSTMTASK DS    X -            BREAKPOINT SYNCHRONIZATION BYTE.
TSTESTRC DS    X -            ESATE ERROR RETURN CODE
TSTWHR   DS    A -            PTR TO COMMAND LIB DCB.
         SPACE 1
PARMLIST DS    0F -           PARM LIST FOR CALLING SERVICE ROUTINES
TSTUPT   DS    A -            PTR TO UPT
TSTECT   DS    A -            PTR TO ECT
TSTCPECB DS    A -            PTR TO CP ECB
         SPACE 1
TSTANSPL DS    A -            ANSWER PLACE FOR PARSE SERVICE ROUTINE.
         SPACE 1
ABENTAB  DS    A -            PTR TO ABEND VECTOR TABLE(RESIDENT).
ABENTAB1 DS    A -            PTR TO ABEND VECTOR TABLE(TRANSIENT).
TSTRETRY DS    0A -           ENTRY POINT OF TRANSIENT RETRY ROUTINE.
TSTRTYCD DS    X -            SUBCOMMAND ID.
TSTRTYPT DS    AL3 -          PTR TO A STAE RETRY ROUTINE WITHIN ANY
*                             TEST MODULE THAT HAS ISSUED A STAE
         SPACE 1
INBUF    DS    A -            PTR TO BUFFER CONTAINING SUBCMD
TSTIODSN DS    A -            HEAD OF DSNAME CHAIN FOR IKJEGIO 'PRINT'.
TSTIO    DS    A -            ENTRY POINT OF GET ROUTINE IKJEGIO.
         DS    A -            RESERVED
         DS    A -            RESERVED
TSTCONVT DS    A -            ENTRY POINT OF IKJEGCVT.
TSTADDR  DS    A -            ENTRY POINT OF ADDRESS BUILD SUBROUTINE.
TSTSTAE  DS    A -            ENTRY POINT OF STAE EXIT RTN. (IKJEGSTA).
         SPACE 2
TSTFLGS1 DS    X -            TEST FLAGS, BYTE 1.
         SPACE 1
PCHLSTVL EQU   B'10000000' -  PATCH LIST SWITCH.
S9GINTSW EQU   B'01000000' -  INTERNAL SW FOR SVC97          @ZA05687
TSTPRINT EQU   B'00100000' -  PRINT SWITCH.
TSTFIRST EQU   B'00010000' -  FIRST TIME SWITCH.
RANGESW  EQU   B'00001000' -  INDICATES PDE IS FOR ADDRESS RANGE.
TSTBUILD EQU   B'00000100' -  'AT' SWITCH FOR DEFER CHECK.
ENDSW    EQU   B'00000010' -  INDICATES 'END' TO MAINLINE.
RUNSW    EQU   B'00000001' -  INDICATES 'RUN' TO MAINLINE.
         SPACE 2
TSTFLGS2 DS    X -            TEST FLAGS, BYTE 2.
         SPACE 1
TSTLDF   EQU   B'10000000' -  IKJEGLDF TASK-SWITCH INDICATOR.
TSTXCTL  EQU   B'01000000' -  STAE XCTL INDICATOR.
TOFFDEF  EQU   B'00100000' -  NO ACTIVE BREAKPOINTS.
TTESTTCB EQU   B'00010000' -  RUNNING UNDER TEST TASK.
TADDROUT EQU   B'00001000' -  LOAD MODULE FOUND UNDER TCB.
TWHRLOAD EQU   B'00000100' -  VALID LOAD MODULE CHECK.
TSTQUAL  EQU   B'00000010' -  QUALIFICATION IS IN PROCESS
TMYIOMSG EQU   B'00000001' -  IKJEGIO MESSAGE SWITCH.
         SPACE 2
TSTFLGS3 DS    X -            TEST FLAGS, BYTE 3.
         SPACE 1
TSTGOSW  EQU   B'10000000' -  SPECIAL BREAKPOINT TYPE SWITCH.
TSTSTAI  EQU   B'01000000' -  PROBLEM PROGRAM ABEND INDICATOR.
SYMMESG  EQU   B'00100000' -  SYM 'NO DIAGNOSTIC' SWITCH.
TCSECTCK EQU   B'00010000' -  CSECT ONLY DEFER QUEUE CLEAR.
TDUPNAME EQU   B'00001000' -  DEFER QUEUE DUPLICATE NAME BIT.
TSTLINK  EQU   B'00000100' -  SUB-CMD 'LINK FAILED' INDICATOR.
TSTHELP  EQU   B'00000010' -  INDICATES THAT 'HELP' IS ATTACHED.
NOPARMS  EQU   B'00000001' -  INDICATES NO PARAMETERS WITH COMMAND.
         SPACE 2
TSTFLGS4 DS    X              TEST FLAGS, BYTE 4.
         SPACE 1
TSTA     EQU   B'10000000' -  TEST'S INPUT IS NOT FROM A STACK.
TSTB     EQU   B'01000000' -  A STACKED TERMINAL ELEM. IS PRESENT.
TSTFLUSH EQU   B'00100000' -  FORCE TCLEARQ AND POSSIBLE STACK FLUSH.
TSTRERTN EQU   B'00010000' -  A RETRY IS IN PROCESS
TSTESTAE EQU   B'00001000' -  ESTAE IS INVOKING I/O FOR MESSAGE
TSTSVCAB EQU   B'00000100' -  SVC ABEND IS IN PROCESS
TSTPERC  EQU   B'00000010' -  THIS RETRY ROUTINE WAS PERCOLLATED TO
TSTVALCK EQU   B'00000001' -  INDICATES PARSE VALIDITY CHECK IN PROCESS
         SPACE 2
BREAKTAB DS    A -            PTR TO FIRST BREAK ELEMENT.
DEFERTAB DS    A -            PTR TO DEFER'ED CMD LIST
PPLOAD   DS    A -            PTR TO CURRENT BASE FOR RELATIVES.
PPTEMP   DS    A -            TEMPORARY BASE FOR RELATIVES.
SUBCHAIN DS    A -            PTR TO BREAKPOINT SUBCOMMAND CHAIN.
         SPACE 1
TSTGO    DS    0X -           RESUME ADDRESS AFTER BREAKPOINT.
TSTGOPSW DS    F -            SECOND WORD OF RBOPSW FIELD.
TSTGOWCF DS    X -            WAIT COUNT FROM RBWCF FIELD.
TSTRSVD2 DS    X -            RESERVED BYTE.
TSTSVC   DS    H -            AN SVC 97 INSTRUCTION (0A61).
PPRB     DS    A -            CURRENT PROBLEM PROGRAM RB ADDRESS.
         SPACE 1
TSTIODCB DS    A -            PTR TO OPEN PRINT DCB.
CALLPARM DS    A -            HEAD OF CHAIN FOR PARMS BUILT BY 'CALL'.
         DS    A -            *** RESERVED SPACE ***
INTSTDDN DS    0CL8           DDNAME FOR DATA SET SPECIFIED ON THE TEST
*                             COMMAND - USED BY IKJEGINT AND IKJEGLDR.
TSTCURLD DS    CL8 -          CURRENTLY QUALIFIED LOAD NAME.
TERMDD   DS    0CL8 -         DDNAME FOR TERMINAL USED BY OS LOADER.
TSTCURCT DS    CL8 -          CURRENTLY QUALIFIED CSECT NAME.
TSTSYMBA DS    A -            CURRENTLY QUALIFIED SYMBOLIC ADDR BASE.
TSTTRN   DS    A -            HEAD OF SAVE INFORMATION CHAIN
SICHAIN  DS    A -            HEAD OF SYMBOL INFORMATION CHAIN
TSTSYMWK DS    A -            PTR TO SYMBOL PROCESSING WORK AREA.
SYMTABLE DS    A -            PTR TO IN-CORE SYMBOL TABLE.
         SPACE 1
PPEXIT   DS    0A -           BREAKPOINT & EXIT SVC'S FOR PP TERM.
PPEXIT1  DS    H -            AN SVC 97 INSTRUCTION (0A61).
PPEXIT2  DS    H -            AN SVC 3 INSTRUCTION (0A03).
TSTDCB   DS    A -            HEAD OF OVLY DCB CHAIN.
OPCODTAB DS    A -            PTR TO TABLE OF VALID OPERATION CODES.
TSTOPCD2 DS    F -            PTR TO TABLE FOR TWO BYTE S/370
*                             OPERATION CODES.
         DS    A -            RESERVED
         DS    A -            RESERVED
TSTHTCB  DS    A -            POINTER TO THE HELP TCB
TSTAQUAL DS    0X -           AUTOMATIC QUALIFICATION CONTROL
TSTAQLDM DS    CL8 -          EBCDIC LOAD MODULE NAME.
TSTAQEP  DS    A -            ENTRY POINT OF LOAD MODULE.
TSTRSTRT DS    A -            RESTART ADDRESS FOR STAE PROCESSING
TSTSRHRT DS    A -            ADDRESS OF RESIDENT ADDRESS VALIDITY
*                             CHECK ROUTINE.
         SPACE 1
TSTSTAX  DS    5F -           STAX PARAMETER LIST.
TSTDSECB DS    F -            TEST DISPATCHABILITY ECB.
TSTMNLWK DS    10F -          WORK AREA FOR EXCULSIVE USE OF MNL
TSTSTAEL DS    4F -           STAE PARAMETER LIST FOR MNL ONLY.
TSTOIPRM DS    0CL84          IO PARAMETER BLOCK
TSTIOPRM DS    CL84           IO PARAMETER BLOCK USE BY SIO
TSTSVCM1 DS    F              SVC FIRST LEVEL MESSAGE NO.
TSTSVCM2 DS    F              SVC SECOND LEVEL MESSAGE NO.
TSTSVCNQ DS    CL6'ECBTST'    CHARACTER CONSTANT FOR SVC ENQUE
R11SAVE  DS    F              SAVE AREA FOR R11 FOR SVC97    @ZA00889
         DS    8D             *** RESERVED SPACE ***
TCOMLEN  EQU   ((*-TCOMTAB+7)/8)*8 - TCOMTAB LENGTH.
         MEND
