INIT     QSTART 'QUEUE COMMAND - INITIALIZATION ROUTINES',REGS=NO
         PRINT OFF
         COPY  $HASPGEN
         PRINT ON
         PUSH  USING
BUFDSECT EQU   0
BUFSTART EQU   0
         $JCT
         $JQE
         $JOE
         $JOT
         $KIT
         $PCE
         $PDDB
         $TAB
         $CAT
         $HCT
         $IOT
         $QSE
         $TGM
         POP   USING
         TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'
***********************************************************************
*                                                                     *
*   LOAD QCOMMON                                                      *
*                                                                     *
***********************************************************************
*
****
*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,
****              THIS IS THE ONLY REFERENCE TO IT.
*
         WXTRN QUEUECMN                                              RX
         ICM   R11,15,=V(QCOMMON)                                    RX
         BNZ   HAVEQ                                                 RX
         LOAD  EPLOC==C'QUEUECMN'    QUEUE COMMON AREA               RX
         LR    R11,R0         ADDR OF QCOMMON                        RX
HAVEQ    L     R0,=A(QLENGTH)                                        RX
         GETMAIN RU,LV=(0)                                           RX
         LR    R6,R1          INITIALIAZE                            RX
         LR    R7,R0           QCOMMEN                               RX
         LR    R8,R11           *                                    RX
         LR    R9,R0             *                                   RX
         MVCL  R6,R8              *                                  RX
         LR    R0,R1          COMPUTE THE                            RX
         SR    R0,R11          ADJUSTMENT FACTOR                     RX
         LR    R11,R1         ADDR OF NEW QCOMMON                    RX
* INSERT CODE HERE TO RELOCATE ALL ADDRESS CONSTANTS IN QCOMMON      RX
         L     R1,4(R13)      PREVIOUS SAVE AREA
         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA
         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD BASE REG
         AR    R10,R0                                                RX
         ST    R10,QVDAIR                                            RX
         USING QCKPT,R9       BASE REG FOR CKPT WORK
         L     R9,QVCKPT      LOAD BASE REG
         AR    R9,R0                                                 RX
         ST    R9,QVCKPT                                             RX
         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK
         L     R8,QVDSPL      LOAD BASE REG
         AR    R8,R0                                                 RX
         ST    R8,QVDSPL                                             RX
         A     R0,QVPRINT                                            RX
         ST    R0,QVPRINT                                            RX
         LA    R0,DAIRECB                                            RX
         ST    R0,DAPLECB                                            RX
         LA    R0,QIOB                                               RX
         ST    R0,HASPCKPT+X'1C'  SET DCBIOBAD                       RX
         LA    R0,QIOBECB                                            RX
         ST    R0,QIOB+4                                             RX
         LA    R0,HASPCKPT                                           RX
         ST    R0,QIOBDCB                                            RX
         LA    R0,HASPCKPT                                           RX
         STCM  R0,7,HOCKPT+1                                         RX
         LA    R0,QCOUT                                              RX
         STCM  R0,7,QCOPEN+1                                         RX
         TPUT  QDSCREEN,MF=(E,QTPUT)    ISSUE TPUT TO SET REGS       RX
         ORG   *-2                      ORG BACK TO CLEAR SVC        RX
         TGET  QDREPLY,MF=(E,QTGET)     ISSUE TGET TO SET REGS       RX
         ORG   *-2                      ORG BACK TO CLEAR SVC        RX
         LA    R0,QGETLNGH                                           RX
         ST    R0,QFREE                                              RX
         LA    R0,QGETAREA                                           RX
         ST    R0,QFREE+4                                            RX
         ICM   R1,15,=V(QCOMMON)                                     RX
         BNZ   HAVEQ2                                                RX
         DELETE EPLOC==C'QUEUECMN'    QUEUE COMMON AREA              RX
HAVEQ2   EQU   *                                                     RX
****     USING WORK,R13       BASE REG FOR WORK AREA
***********************************************************************
*                                                                     *
*   MOVE PARMS FROM CPPL TO DAPL                                      *
*                                                                     *
***********************************************************************
         USING CPPL,R2           ADDR OF CPPL IS IN R2
         MVC   DAPLUPT,CPPLUPT   USER PROFILE TABLE
         MVC   DAPLPSCB,CPPLPSCB PROTECTED STORAGE CNTL BLK
         MVC   DAPLECT,CPPLECT   ENVIRONMENT CNTL TABLE
***********************************************************************
*                                                                     *
*   MOVE COMMAND BUFFER TO REPLY BUFFER                               *
*                                                                     *
***********************************************************************
         L     R1,CPPLCBUF    ADDR OF COMMAND BUFFER
         LH    R3,0(R1)       LENGTH OF COMMAND BUFFER
         LH    R4,2(R1)       OFFSET TO FIRST DATA BYTE
         LA    R1,4(R1,R4)    FIRST DATA BYTE
         SR    R3,R4          SUBTRACT OFFSET FROM LENGTH
         SH    R3,=H'4'       SUBTRACT OVERHEAD
         SH    R3,=H'1'       IS LENGTH ZERO?
         BM    SKIP           YES. SKIP IT.
         EX    R3,OCBUF       TRANSLATE TO UPPER CASE
         CLC   =C'CKPT(',0(1) IS REQUEST FOR CKPT?
         BE    CKPT           YES. DO IT.
         MVC   QDREPLY,QBLANK BLANK THE REPLY LINE
         CH    R3,=H'62'      IS LENGTH OVER 63?
         BNH   OK             NO. USE IT.
         LA    R3,62          USE MAXIMUM LENGTH
OK       EX    R3,MVCBUF      MOVE THE DATA
         LA    R3,1(R3)       INCREMENT TO TRUE LENGTH
         STH   R3,QDRLNG      STORE REPLY LENGTH
         SPACE 2
***********************************************************************
*                                                                     *
*   LOCATE LOGON ID, MOVE TO QLOGON                                   *
*                                                                     *
***********************************************************************
SKIP     L     R1,16          ADDR OF CVT
         L     R1,0(R1)       ADDR OF DISPATCH QUEUE
         L     R1,12(R1)      ADDR OF CURRENT ASCB
         L     R1,176(R1)     ADDR OF JOBNAME
         MVC   QLOGON,0(R1)   MOVE JOBNAME TO QLOGON
***********************************************************************
*                                                                     *
*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=65536
         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN
         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE
         A     R1,=F'65536'   END OF TABLE
         ST    R1,QCEND
         DROP  R2
***********************************************************************
*                                                                     *
*   ALLOCATE HASPCKPT                                                 *
*                                                                     *
***********************************************************************
         MVC   DA08DDN,=CL8'HASPCKPT'   DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNCKPT)     DSNAME FOR ALLOCATE
         MVI   DAIRFLAG,X'08'           REQUEST ALLOCATE FUNCTION
         L     R15,=V(ALLOCATE)         ADDR OF ALLOCATE MODULE
         BALR  R14,R15                  GO TO IT
         EJECT ,
***********************************************************************
*                                                                     *
*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *
*                                                                     *
***********************************************************************
         DEVTYPE HASPCKPT+DCBDDNAM,QDEVTAB,DEVTAB
         LTR   R15,R15              CHECK RETURN CODE
         BNZ   ABORT3               ABORT IF NO GOOD
         OPEN  MF=(E,HOCKPT)        OPEN HASPCKPT
         TRKCALC FUNCTN=TRKCAP,TYPE=QDEVTAB+3,R=1,DD=4096,             *
               REGSAVE=YES,MF=(E,QTRKCALC)
         LTR   R15,R15              CHECK RETURN CODE
         BNZ   ABORT3               ABORT IF NO GOOD
         ST    R0,QMAXR             SAVE 4K RECORDS PER TRACK
         LA    R2,QSECTOR                                            RX
         STCM  R2,7,QCCWS+1                                          RX
         LA    R2,QIOBSEEK+3                                         RX
         STCM  R2,7,QCCWS+9                                          RX
         LA    R2,QCCWS+8                                            RX
         STCM  R2,7,QCCWS+17                                         RX
         LA    R2,QCKPSCTR                                           RX
         STCM  R2,7,QCCWREAD+9                                       RX
         L     R2,QCSTART           USE TABLE AREA FOR IOAREA
         STCM  R2,7,QCCWREAD+1      SET IOAREA IN CCW
         L     R1,HASPCKPT+DCBDEBAD
         MVC   QIOBSEEK+1(6),36(R1) SET CCHH FROM DEB
         MVI   QIOBSEEK+7,3         SET RECORD THREE
         LA    R1,QCCWS+L'QCCWS     SET CCW START
         ST    R1,QIOBSTRT           IN IOBSTART
         BAL   R14,DIO              READ MASTER CKPT
         USING $SAVEBEG,R2          BASE REG FOR CHECKPOINT
         L     R3,$MASTERL
         C     R3,=F'32767'
         BNH   SETL
         ABEND 99,DUMP
SETL     ST    R3,QCCWREAD+4        STORE LENGTH OF MASTER CKPT RECORD
         STH   R3,QMASTERL          STORE LENGTH OF MASTER CKPT RECORD
***********************************************************************
*                                                                     *
*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *
*                                                                     *
***********************************************************************
         LH    R5,$NUMTG      NUMBER OF TRACK GROUPS
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8
         SRL   R5,3           DIVIDE BY 8
         LA    R5,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(R5) OFFSET
         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY
         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R6,$MAXJOBS    NUMBER OF JQES
         LA    R6,1(,R6)       PLUS 1 FOR EYE-CATCHER
         MH    R6,=AL2(JQELNGTH) MULTIPLY BY LENGTH OF JQE
         LA    R6,4095(R6)    PREPARE TO ROUND
         SRL   R6,12          DIVIDE BY 4096
         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES
         EJECT
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE
         LH    R3,$NUMJOES        NUMBER OF JOES
         LA    R3,NJOTPRFX(,R3)   ADJUSTED LENGTH OF JOT PREFIX
         MH    R3,=AL2(JOESIZE)   MULTIPLY BY LENGTH OF JOE
         LA    R3,4095(R3)        PREPARE TO ROUND
         SRL   R3,12              DIVIDE BY 4096
         STH   R3,QCJOTL          NUMBER OF BLOCKS FOR JOT
***********************************************************************
*                                                                     *
*   COMPUTE TOTAL LENGTH OF QSES                                      *
*                                                                     *
***********************************************************************
         LA    R4,QSELEN      QSE LENGTH
         MH    R4,$QSENO      MULTIPLY LENGTH TIMES NUMBER OF QSES
***********************************************************************
*                                                                     *
*   ADD TOTAL LENGTH OF CHECKPOINT CONTROL BYTES                      *
*                                                                     *
***********************************************************************
         AH    R4,$CKRECN     ADD ONE BYTE FOR EACH 4K CKPT BLOCK
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R5,HASPACE+62  STORE IN DCB
         STH   R5,QBUFSIZE    STORE IN QCOMMON
         LA    R5,63(R5)      PREPARE TO ROUND
         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R14,R5         HASPACE BUFFER SIZE
         MH    R14,=H'3'      3 BUFFERS
         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS
         ST    R1,QCJOTL      STORE RECORD COUNT
         SLL   R1,12          MULTIPLY BY 4096
         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP
         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA
         GETMAIN RC,LV=(0),BNDRY=PAGE
         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA
         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC
         STCM  R1,7,QCCWREAD+1  CHANGE READ CCW
         AH    R1,=H'4096'    INCREMENT
         ST    R1,QCJQTA      BUFFER FOR JQE BLOCKS
         SLL   R6,12          MULTIPLY BY 4096
         AR    R1,R6          INCREMENT
         ST    R1,QCJOTA      BUFFER FOR JOE BLOCKS
         SLL   R3,12          MULTIPLY BY 4096
         AR    R1,R3          INCREMENT
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R5          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R5          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         LA    R1,$JQHEADS-4-$SAVEBEG   OFFSET TO FIRST JQE HEADER
         A     R1,QCJQTL      BASE OF FIRST CKPT REC
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         LA    R3,$SAVEEND(R4)         ADDR OF DA CKPT INFO
         MVC   DA08DDN,=CL8'HASPACE'   DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNSPACE)   DSNAME FOR ALLOCATE
         SR    R4,R4                   ZERO R4
         LR    R15,R3
         LA    R1,$MAXDA
NEWBR    CLI   0(R15),0
         BE    *+8
         LA    R4,1(,R4)
         LA    R15,6(,R15)
         BCT   R1,NEWBR
         LA    R7,QCDCBL+4    LENGTH OF HASPACE DCB + 4
         MR    R6,R4          COMPUTE LENGTH OF DCB POOL & OPEN LIST
         GETMAIN R,LV=(R7)    OBTAIN DCB POOL
         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN
         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN (AND OPEN LIST)
         LR    R7,R1          GET
         SLL   R4,2            ADDR OF
         AR    R7,R4            DCB POOL
         LA    R8,QCSPOOLS    ADDR OF DCB INDEX
         LR    R5,R1          ADDR OF OPEN LIST
         SR    R6,R6                ACTUAL NUMBER OF SPOOL VOLUMES
         MVC   DA08SER(5),$SPOOL    PATTERN FOR VOLSER
         LA    R4,$MAXDA            MUST CHECK ALL 32 DA CKPTS
SPOOL1   CLI   0(R3),0              IS THIS VOLUME UNUSED?
         BE    SPOOL2               YES. TRY NEXT.
         MVC   DA08SER+5(1),1(R3)   LAST DIGIT OF VOLSER
         LA    R6,1(R6)             INCREASE COUNT BY ONE
         STC   R6,DA08DDN+7         UPDATE DDNAME
         OI    DA08DDN+7,X'F0'      MAKE IT A VALID NUMBER
         L     R15,=V(ALLOCATE)     ADDR OF ALLOCATE MODULE
         BALR  R14,R15              GO TO IT
         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL
         MVC   47(1,R7),DA08DDN+7   UPDATE THE DDNAME
         ST    R7,0(R5)         STORE DCB ADDR IN OPEN LIST
         ST    R7,0(R8)         STORE DCB ADDR IN OPEN LIST
         LA    R7,QCDCBL(R7)    INCREMENT TO NEXT DCB
         LA    R5,4(R5)         NEXT ENTRY IN OPEN LIST
SPOOL2   LA    R3,6(,R3)        NEXT VOLUME
         LA    R8,4(R8)         NEXT ENTRY IN OPEN LIST
         BCT   R4,SPOOL1        BRANCH IF MORE VOLUMES.
         SH    R5,=H'4'         INDICATE END
         OI    0(R5),X'80'        OF OPEN LIST
         L     R8,QVDSPL        RELOAD BASE REGISTER
         L     R1,QGETA3        LOAD ADDRESS OF OPEN LIST
         OPEN  MF=(E,(1))       OPEN HASPACE
***********************************************************************
*                                                                     *
*        LOCATE KIT AND BUILD CCW PACKETS TO READ JQES AND JOT        *
*                                                                     *
***********************************************************************
         LH    R5,$NUMTG         NUMBER OF TRACK GROUPS
         LA    R5,7(R5)          ROUND UP TO MULTIPLE OF 8
         SRL   R5,3              DIVIDE BY 8
         ALR   R3,R5             ADD MASTER T.G. MAP LEN
         ALR   R3,R5             ADD BAD T.G. MAP LENGTH
         USING KITDSECT,R3
         LA    R5,1
NEXTKIT  CLC   KITID,=CL4'JQE '
         BE    BUILDCCW
         AH    R5,KITRECN        NOT JQE, WILL SKIP
         LA    R3,KITLNGTH(,R3)
         B     NEXTKIT           LOOK AT NEXT KIT
         DROP  R3
BUILDCCW DS    0H
         BAL   R14,NEXTTT        GO TO NEXT TRACK
         LA    R3,XXXX1
         BALR  R4,R3
         BAL   R14,NEXTR         SKIP A RECORD
         BNHR  R3
         L     R1,DCBDEBAD+HASPCKPT
         TM    DEBDVMOD,B'00011000'
         BNOR  R3
         BAL   R14,NEXTTT        GO TO NEXT TRACK
XXXX1    BCTR  R5,R4
         MVC   QIOBCSW,QIOBSEEK  SAVE MBBCCHHR OF 1ST JQE RECORD
***********************************************************************
*              COMPUTE SIZE OF CCW PACKETS                            *
***********************************************************************
         L     R5,QCJOTL         GET NUMBER OF RECORDS
         LA    R6,CCWLNGTH       START
         LA    R3,XXXX2
         BALR  R4,R3
         BAL   R14,NEXTR         COUNT A RECORD
         LA    R6,8(,R6)
         BNHR  R3
         L     R1,DCBDEBAD+HASPCKPT
         TM    DEBDVMOD,B'00011000'
         BNO   *+8
         BAL   R14,NEXTTT        GO TO NEXT TRACK
         LA    R6,CCWLNGTH-8(,R6)
XXXX2    BCTR  R5,R4
         SPACE 1
***********************************************************************
*              CONSTRUCT CCW PACKETS                                  *
***********************************************************************
         GETMAIN RC,LV=(R6)      GET STORAGE  FOR CCW PACKETS
         ST    R6,QGETL4         STORE LENGTH  OF CCW PACKETS
         ST    R1,QGETA4         STORE ADDRESS OF CCW PACKETS
         LR    R6,R1
         USING CCWDSECT,R6
         ST    R6,QCCWNEXT       SAVE POINTER TO CCW PACKETS
         L     R5,QCJOTL         GET NUMBER OF RECORDS
         MVC   QIOBSEEK,QIOBCSW  RESTORE MBBCCHHR OF 1ST JQE RECORD
         L     R10,QCJQTA        ADDR 1ST JQE BUFFER
         BAL   R4,XXXX3
         BAL   R14,NEXTR         COUNT A RECORD
         LA    R6,L'CCWREAD(,R6)
         BNH   XXXX4
         L     R1,DCBDEBAD+HASPCKPT
         TM    DEBDVMOD,B'00011000'
         BNO   XXXX4
         MVI   CCWREAD+4-8,X'00'          SET COMMAND CHAIN OFF
         BAL   R14,NEXTTT                 GO TO NEXT TRACK
         LA    R6,CCWLNGTH-L'CCWREAD(,R6)
         ST    R6,CCWNEXT-CCWDSECT(,R7)   CHAIN PACKETS TOGETHER
XXXX3    MVC   CCWSEEK,QIOBSEEK           SET MBBCCHHR FOR THIS TRACK
         MVC   CCWSET(L'CCWSKEL),CCWSKEL  FILL IN CCW SKELTIONS
         LA    R1,CCWSET+5
         STCM  R1,7,CCWSET+1
         LR    R7,R6                      SAVE FOR CHAINING
         LA    R1,CCWSEEK+3
         STCM  R1,7,CCWSID+1
         LA    R1,CCWSID
         STCM  R1,7,CCWTIC+1
***********************************************************************
*                                                                     *
*              CODE HERE IS TO COMPUTE SECTOR                         *
*                                                                     *
***********************************************************************
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R0,=FS16'4096'      SET XXK.
         IC    R0,QIOBSEEK+7       SET ...R
         LA    R2,CCWSET+5         POINT TO SECTOR #
         ICM   R2,8,QDEVTAB+3      SET DEV TYPE
         L     R15,16              ADDRESS OF CVT
         L     R15,232(,R15)       ADDRESS OF SECTOR CONV. RTN
         BALR  R14,R15             COMPUTE SECTOR #
         LM    R14,R12,12(R13)     RESTORE REGISTERS
XXXX4    MVC   CCWREAD,CCWSKELR
         STCM  R10,7,CCWREAD+1
         AH    R10,CCWREAD+6
         L     R1,DCBDEBAD+HASPCKPT
         TM    DEBDVMOD,B'00011000'
         BO    XXXX5
         MVI   CCWREAD,X'86'      SET MULTI-TRACK BIT ON
XXXX5    BCTR  R5,R4
         MVI   CCWREAD+4,X'00'    SET COMMAND CHAIN OFF
***********************************************************************
*                                                                     *
*   GET DEVICE-DEPENDENT INFORMATION FOR HASPACE DATASETS             *
*                                                                     *
***********************************************************************
         LM    R5,R7,=A(0,4,4*$MAXDA-4)
SPOOL3   L     R1,QCSPOOLS(R5)
         LTR   R1,R1
         BZ    SPOOL4
         DEVTYPE (1),QDEVTAB,DEVTAB
         LH    R4,QDEVTAB+10
         ST    R4,QCTRKCYL(R5)
         IC    R4,QDEVTAB+3
         STC   R4,QCSPOOLS(R5)
SPOOL4   BXLE  R5,R6,SPOOL3
         AGO   .NOSTAX1
         SPACE 4
***********************************************************************
*                                                                     *
*   SET UP ATTENTION EXIT                                             *
*                                                                     *
***********************************************************************
         PRINT GEN               TURN ON GEN FOR NOW
SETATTN  MVC   WMODEL(WMODELEN),MODEL    COPY MODEL TO DSECT AREA
****     STAX  ATTNEXIT,MF=(E,WSTAX)
         STAX  ATTNEXIT,IBUF=(ATTNMSG,ATTNMSGL),                       X
               USADDR=(8),MF=(E,WSTAX)
.NOSTAX1 ANOP
         SPACE 4
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
         QSTOP
         EJECT
         AGO   .NOSTAX2
***********************************************************************
*                                                                     *
*   ATTENTION EXIT                                                    *
*                                                                     *
***********************************************************************
         PUSH  USING
ATTNEXIT SAVE  (14,12)           SAVE THE CALLERS REGISTERS
         LR    R2,R15            ESTABLISH
         USING ATTNEXIT,R2         TEMPORARY ADDRESSABILITY
         L     R8,8(R1)          POINT TO DISPLAY AREA
**       L     R1,0(R1)          POINT TO TAIE
**       USING TAIE,R1            AND ADDRESS IT
**       L     R8,TAIERSAV+11*4  RESTORE REGISTER 11
**       L     R8,0(R8)          POINT TO DISPLAY AREA
         MVC   QDLNELEN,H80      LINE LENGTH
         MVC   QDLINES,PL21      LINES PER SCREEN AREA
         MVC   QDSCRLEN,SCRLN    SCREEN LENGTH
         MVC   QDSCRPLN,TPUTLN   TPUT LEN
         MVI   QDSCRO1,X'F5'     ERASE/WRITE
         MVC   QDSCRO2,CON1      (2,1)
         MVC   QDSCRO3,CON2      (24,1)
         MVC   QDSCRO4,CON3      (24,72)
         MVC   QDSCRO5,CON4      (3,1)
         STSIZE  SIZE=80,LINE=24    SET SCREEN SIZE FOR VTAM
         RETURN (14,12),RC=0     AND AWAY WE GO....
SCRLN    DC    AL2(21*80)        SCREEN LENGTH
TPUTLN   DC    AL2(21*80+QDLINE1-QDSCREEN)  TPUT LENGTH
H80      DC    H'80'
PL21     DC    PL2'21'
CON1     DC    X'C150'           CONSTANT 1
CON2     DC    X'5CF0'           CONSTANT 2
CON3     DC    X'5DF7'           CONSTANT 3
CON4     DC    X'C260'           CONSTANT 4
         DROP  R2                ERASE ADDRESSABILITY
         POP   USING
         PRINT NOGEN                     TURN GEN BACK OFF
         EJECT
.NOSTAX2 ANOP
***********************************************************************
*                                                                     *
*   SUBROUTINE TO COMPUTE NEXT MBBCCBBR                               *
*                                                                     *
***********************************************************************
NEXTR    SR    R1,R1
         IC    R1,QIOBR
         LA    R1,1(,R1)         ADD ONE
         C     R1,QMAXR          Q. TOO MANY ?
         STC   R1,QIOBR          PUT IN IOBSEEK
         BNHR  R14
         L     R1,DCBDEBAD+HASPCKPT
         TM    DEBDVMOD(R1),B'00011000'
DEBDVMOD EQU   X'44',1,C'B'
         BOR   R14               EXIT
         SPACE 1
NEXTTT   MVI   QIOBR,1           SET R TO 1
         LH    R1,*-*            GET
         ORG   *-2                CURRENT
         DC    S(QIOBHH)           HH NUM
         LA    R1,1(,R1)         ADD ONE
         CH    R1,QDEVTAB+10     Q. TOO MANY ?
         STH   R1,*-*            PUT
         ORG   *-2                IN
         DC    S(QIOBHH)           IOBSEEK
         BNHR  R14               EXIT IF SO.
         SPACE 1
         XC    QIOBHH,QIOBHH     SET HH TO ZERO
         LH    R1,*-*            GET
         ORG   *-2                CURRENT
         DC    S(QIOBCC)           CC NUMBER
         LA    R1,1(,R1)         ADD ONE
         STH   R1,*-*            PUT NEW
         ORG   *-2                CC NUMBER
         DC    S(QIOBCC)           IN IOBSEEK
         BR    R14               EXIT
***********************************************************************
*                                                                     *
*   DO ECXP IO AND ABORT IF I/O ERROR                                 *
*                                                                     *
***********************************************************************
DIO      XC    QIOBECB,QIOBECB   CLEAR ECB
         EXCP  QIOB              EXECUTE CHANNEL PROGRAM
         WAIT  ECB=QIOBECB       WAIT TIL DONE
         CLI   QIOBECB,X'7F'     Q. NORMAL COMPLEATION ?
         BER   R14               EXIT IF NORMAL
         SYNADAF ACSMETH=EXCP,PARM1=QIOB
         MVC   4(21,R1),=C'I/O ERROR ON HASPCKPT'
         LA    R14,4(,R1)        GET ADDRESS
         LH    R15,0(,R1)        GET LENGTH
         TPUT  (R14),(R15),EDIT,MF=(E,QTPUT)
         ABEND 96,DUMP
         EJECT
***********************************************************************
*                                                                     *
*   PROCESS REQUEST FOR DIFFERENT UNIT AND VOL ON SYS1.HASPCKPT       *
*                                                                     *
***********************************************************************
*
*** FORMAT - QUEUE CKPT(UNIT,VOLSER)
*
CKPT     MVC   DA08UNIT(16),QBLANK BLANK THE UNIT AND VOLSER FIELDS
         LA    R5,DA08UNIT    START OF UNIT FIELD
         LA    R6,DA08SER     START OF VOLSER FIELD
         SH    R3,=H'4'       SUBTRACT OVERHEAD FROM LENGTH
CKPT1    CLI   5(R1),C','     IS THIS THE END OF UNIT FIELD?
         BE    CKPT2          YES. PROCESS VOLSER NEXT.
         MVC   0(1,R5),5(R1)  MOVE ONE BYTE OF UNIT NAME
         LA    R5,1(R5)       ADD 1 TO RECEIVING ADDR
         LA    R1,1(R1)       ADD 1 TO SENDING ADDR
         BCT   R3,CKPT1       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETERS.
CKPT2    CLI   6(R1),C')'     IS THIS THE END OF VOLSER FIELD?
         BE    CKPT3          YES. CONTINUE PROCESSING.
         MVC   0(1,R6),6(R1)  MOVE ONE BYTE TO VOLSER
         LA    R6,1(R6)       ADD ONE TO RECEIVING ADDR
         LA    R1,1(R1)       ADD ONE TO SENDING ADDR
         BCT   R3,CKPT2       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETER.
CKPT3    CLI   DA08UNIT,C' '  IS THERE A UNIT?
         BE    ABORT2         NO. INVALID.
         CLI   DA08SER,C' '   IS THERE A VOLSER?
         BE    ABORT2         NO. INVALID.
         CLI   DA08BLK,0      DID WE GO TOO FAR?
         BE    SKIP           NO. EVERTHING LOOKS GOOD.
ABORT2   TPUT  MESSAGE2,L'MESSAGE2,EDIT,MF=(E,QTPUT) TELL THE USER PWF*
         ABEND 97,DUMP        QUIT
***********************************************************************
*                                                                     *
*   ERROR IN DEVTYPE OR TRKCALC. ABORT.                               *
*                                                                     *
***********************************************************************
ABORT3   TPUT  MESSAGE3,L'MESSAGE3,EDIT,MF=(E,QTPUT) TELL THE USER
         ABEND 96,DUMP        QUIT.
         EJECT
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
CCWSKEL0 CCW   X'23',*-*,X'40',1       SET SECTOR #
         CCW   X'31',*-*,X'40',5       SEARCH ID EQ
         CCW   X'08',*-8,0,0           TIC BACK
CCWSKEL  EQU   CCWSKEL0,*-CCWSKEL0
CCWSKELR CCW   X'06',*-*,X'40',4096    READ DATA
         LTORG
OCBUF    OC    0(1,R1),QBLANK          TRANSLATE COMMAND TO UPPER CASE
MVCBUF   MVC   QDREPLY(1),0(R1)        MOVE DATA TO REPLY
DSNCKPT  DC    H'13',CL44'SYS1.HASPCKPT'
DSNSPACE DC    H'12',CL44'SYS1.HASPACE'
ATTNMSG  DC    C'ATTENTION EXIT HAS RESET MODEL TO 2'
ATTNMSGL EQU   *-ATTNMSG
MESSAGE2 DC    C'INVALID PARAMETER SPECIFIED - CKPT(UNIT,VOLSER)'
MESSAGE3 DC    C'ERROR IN DEVTYPE OR TRKCALC MACRO'
DCBDDNAM EQU   40,8            DDNAME
DCBDEBAD EQU   44,4            POINTER TO DEB
         AGO   .NOSTAX3
MODEL    DS    0D
         STAX  ATTNEXIT,MF=L   MODEL STAX
MODELEN  EQU   *-MODEL
WORK     DSECT
         DS    9D
WMODEL   DS    0D
WSTAX    STAX  ATTNEXIT,MF=L       WORK  STAX
WMODELEN EQU   *-WMODEL
         IKJTAIE
.NOSTAX3 ANOP
         IKJCPPL
         QCOMMON
QLENGTH  EQU  *-QCOMMON
         QCCW
         END
