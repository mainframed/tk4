*PROCESS INCLUDE,MARGINS(2,72);
 /* GRAMEP:   GRAMMAR ENTRY POINT PROCEDURE FOR MACRO GRAMMAR        */
 /********************************************************************/
 /*      MODULE NAME: MACRO                                          */
 /*      FUNCTION:    G3P0 GRAMMAR WRITING GRAMMAR                   */
 /*      VERSION:     FEB 15, 1978                                   */
 /*      AUTHOR:      HOWARD GILBERT                                 */
 /*                   YALE COMPUTER CENTER                           */
 /*                   175 WHITNEY AVE                                */
 /*                   NEW HAVEN, CT. 06520                           */
 /*      LANGUAGE:    PLIX RELEASE 3.0 OR LATER                      */
 /*                     (AND IS WRITTEN IN ITSELF)                   */
 /*      COPYRIGHT 1978 HOWARD K. GILBERT                            */
 /*  PERMISSION TO MAKE PRIVATE COPIES OF THIS PROGRAM AND           */
 /*  TO USE IT FREELY IS HEREBY GRANTED BY THE AUTHOR. THIS          */
 /*  PROGRAM MAY NOT BE SOLD, NOR MAY ANY SECTION OF IT BE           */
 /*  INCORPORATED INTO ANY WORK FOR SALE WITHOUT PERMISSION OF       */
 /* THE AUTHOR.                                                      */
 /********************************************************************/
 /*      INSTALLATION INSTRUCTIONS:                                  */
 /*      PREPROCESSING:                                              */
 /*           USE G3P0 VERSION FEB 15, 1978 OR LATER                 */
 /*      COMPILATION:                                                */
 /*           USE VERSION 3.0 OR LATER OF THE PLIX COMPILER          */
 /*           THE REQUIRED COMPILER OPTIONS ARE GIVEN IN THE         */
 /*           *PROCESS CARDS.                                        */
 /*           SYSLIB MUST POINT TO A CARD IMAGE PDS CONTAINING       */
 /*           THE MEMBERS GPPPTCA AND MACINFO.                       */
 /*      LINKAGE EDITING:                                            */
 /*           THIS MODULE IS NOT REENTRANT.                          */
 /*           SPECIFY                                                */
 /*                ENTRY GRAMEP                                      */
 /*                NAME MACRO(R)                                     */
 /********************************************************************/
 /*GRAMMAR MACRO                                                     */
 /*PRINT OFF                                                         */
 /********************************************************************/
 /*      GRAMMAR ENTRY POINT PROCEDURE                               */
 /*           CALLS MACADD TO DEFINE THE MACROS IN THE GRAMMAR       */
 /*           SINCE THE MACROS BEING DEFINED ARE ALMOST              */
 /*           ENTIRELY KNOWN BY ALIASES (THE PROCEDURE NAME          */
 /*           IS NOT EQUAL TO THE MACRO NAME), THIS CODE             */
 /*           IS EXPANDED EXPLICITLY RATHER THAN USING THE           */
 /*           'GRAM' MACRO DEFINED BELOW.                            */
 /********************************************************************/
 GRAMEP: PROC(GPPPTCA);
 DCL 1 GPPPTCA CONNECTED,
 %INCLUDE GPPPTCA;
 DCL COPYRIT CHAR(40) EXT STATIC
         INIT('COPYRIGHT 1978 HOWARD K. GILBERT');
 DCL I FIXED BIN;
 DCL MACRO ENTRY;
 DCL PARMMAC ENTRY;
 DCL PARSMAC ENTRY;
 DCL OPENMAC ENTRY;
 DCL GETMAC ENTRY;
 DCL GRAM ENTRY;
 DCL PUT ENTRY;
 DCL NOTEMAC ENTRY;
 I=MACADD('MACRO',MACRO);
 I=MACADD('PARAMETER',PARMMAC);
 I=MACADD('PARSE',PARSMAC);
 I=MACADD('OPEN',OPENMAC);
 I=MACADD('GET',GETMAC);
 I=MACADD('PUT',PUT);
 I=MACADD('GRAM',GRAM);
 I=MACADD('NOTE',NOTEMAC);
 END GRAMEP;
*PROCESS INCLUDE,MARGINS(2,72);
 /* MACRO:   MACRO PROCEDURE FIRST STATEMENT                         */
 /********************************************************************/
 /*      THE MACRO MACRO                                             */
 /*           USING THE LABEL OF THE MACRO CALL STATEMENT,           */
 /*           GENERATE A PROC STATEMENT.                             */
 /*           DCL THE GPPPTCA.                                       */
 /*           RESET THE PARAMETER SYMBOL TABLE                       */
 /*           SAVE THE MAXIMUM PARAMETER STRING LENGTH.              */
 /********************************************************************/
 /*MACRO:MACRO                                                       */
  MACRO: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 %INCLUDE MACINFO;
 /*PARAMETER MAXLEN POSITIONAL DEFAULT(256)                          */
 /*PARAMETER ENTRY BIT                                               */
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(001),
          3 PARMN CHAR(12) VAR INIT('ENTRY'),
          3 PNUM FIXED BIN INIT(02),
     2 PARAMETERS(0:02),
          3 PARMS CHAR(256) VAR INIT('','256',''),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0100'B,'0000'B),
          3 SUBS FIXED BIN INIT(0,0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL MAXLEN CHAR(256) VAR DEF(PARMS(01));
  DCL ENTRY BIT;
  CALL PARSE(STRING,PARMBLOK);
  ENTRY=NAMEUSED(02)='ENTRY';
 IF ENTRY
    THEN
 /*    PUT " <PARMS(0)>: ENTRY(STRING,GPPPTCA) "                     */
 CALL GEN (' '××PARMS(0)××': ENTRY(STRING,GPPPTCA);');
    ELSE
       DO;
 /*    PUT " <PARMS(0)>: PROC(STRING,GPPPTCA) "                      */
 CALL GEN (' '××PARMS(0)××': PROC(STRING,GPPPTCA);');
 /*    PUT " DCL STRING CHAR(*) VAR "                                */
 CALL GEN (' DCL STRING CHAR(*) VAR;');
 /*    PUT " % NOPRINT "                                             */
 CALL GEN (' % NOPRINT;');
 /*    PUT " DCL 1 GPPPTCA CONNECTED,"                               */
 CALL GEN (' DCL 1 GPPPTCA CONNECTED,');
 /*    PUT " %INCLUDE GPPPTCA "                                      */
 CALL GEN (' %INCLUDE GPPPTCA;');
 /*    PUT " % PRINT "                                               */
 CALL GEN (' % PRINT;');
       END;
 MAXLENS=MAXLEN;
 PARM#=0;
 END MACRO;
*PROCESS INCLUDE,MARGINS(2,72);
 /* PARMMAC:  PARAMETER MACRO PROCEDURE                              */
 /********************************************************************/
 /*      THE PARAMETER MACRO                                         */
 /*           GATHER THE INFORMATION ABOUT THIS PARAMETER            */
 /*           AND PUT IT IN THE NEXT ELEMENT OF THE MACINFO          */
 /*           ARRAY. THIS INFORMATION WILL BE USED BY THE            */
 /*           PARSE MACRO TO BUILD DCL CARDS AND OTHER PLI           */
 /*           STATEMENTS.                                            */
 /********************************************************************/
 /*PARMMAC: MACRO                                                    */
  PARMMAC: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 /*PARAMETER (NAME) POSITIONAL REQUIRED LIST                         */
 /*PARAMETER (DEFAULT)                                               */
 /*PARAMETER (ALIAS)                                                 */
 /*PARAMETER (SUBSCRIPT)                                             */
 /*PARAMETER (CHAR,BIT,FIXED) BIT                                    */
 /*PARAMETER (POSITIONAL,KEYWORD) BIT                                */
 /*PARAMETER (PREPOSITION) BIT                                       */
 /*PARAMETER (REQUIRED) BIT                                          */
 /*PARAMETER (LIST) BIT                                              */
 /*PARAMETER (GENERATED) BIT                                         */
 /*PARAMETER (ENDSCAN) BIT                                           */
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(013),
          3 PARMN CHAR(12) VAR INIT('DEFAULT','ALIAS','SUBSCRIPT','CHAR'
 ,'BIT','FIXED','POSITIONAL','KEYWORD','PREPOSITION','REQUIRED','LIST','
 GENERATED','ENDSCAN'),
          3 PNUM FIXED BIN INIT(02,03,04,05,05,05,06,06,07,08,09,10,11),
     2 PARAMETERS(0:11),
          3 PARMS CHAR(256) VAR INIT('','','','','','','','','','','',''
 ),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0101'B,'0000'B,'0000'B,'
 0000'B,'0000'B,'0000'B,'0000'B,'0000'B,'0000'B,'0000'B,'0000'B),
          3 SUBS FIXED BIN INIT(0,0,0,0,0,0,0,0,0,0,0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL NAME CHAR(256) VAR;
  DCL DEFAULT CHAR(256) VAR DEF(PARMS(02));
  DCL ALIAS CHAR(256) VAR DEF(PARMS(03));
  DCL SUBSCRIPT CHAR(256) VAR DEF(PARMS(04));
  DCL CHAR BIT;
  DCL BIT BIT;
  DCL FIXED BIT;
  DCL POSITIONAL BIT;
  DCL KEYWORD BIT;
  DCL PREPOSITION BIT;
  DCL REQUIRED BIT;
  DCL LIST BIT;
  DCL GENERATED BIT;
  DCL ENDSCAN BIT;
  DCL NEXTWORD CHAR(256) VAR;
  DCL POSITION FIXED BIN;
  DCL RETCODE FIXED BIN;
  CALL PARSE(STRING,PARMBLOK);
  CHAR=NAMEUSED(05)='CHAR';
  BIT=NAMEUSED(05)='BIT';
  FIXED=NAMEUSED(05)='FIXED';
  POSITIONAL=NAMEUSED(06)='POSITIONAL';
  KEYWORD=NAMEUSED(06)='KEYWORD';
  PREPOSITION=NAMEUSED(07)='PREPOSITION';
  REQUIRED=NAMEUSED(08)='REQUIRED';
  LIST=NAMEUSED(09)='LIST';
  GENERATED=NAMEUSED(10)='GENERATED';
  ENDSCAN=NAMEUSED(11)='ENDSCAN';
 IF PARM#>20 THEN
         DO;
 /*      NOTE 12 "TOO MANY PARAMETERS"                               */
 CALL NOTE(012,'TOO MANY PARAMETERS');
         RETURN;
         END;
 PARM#=PARM#+1;
 /*OPEN NAME                                                         */
  POSITION=0;
         DO I=1 TO 15;
 /*      GET NAME                                                    */
  NEXTWORD=GETWORD(PARMS(01),POSITION,RETCODE);
  NAME=NEXTWORD;
         IF NAME='' THEN LEAVE;
         NAMES(PARM#,I)=NAME;
         NAME#(PARM#)=I;
         END;
 DEFAULTS(PARM#)=DEFAULT;
 IF ALIAS='' THEN
         ALIASES(PARM#)=NAMES(PARM#,1);
 ELSE
         ALIASES(PARM#)=ALIAS;
 SUBSCR(PARM#)=SUBSCRIPT;
  PREP(PARM#)=PREPOSITION;
 POSIT(PARM#)=POSITIONAL;
  VLIST(PARM#)=LIST;
 VFIXED(PARM#)=FIXED;
 VBIT(PARM#)=BIT;
 ENDS(PARM#)=ENDSCAN;
 GEND(PARM#)=GENERATED;
 REQ(PARM#)=REQUIRED;
 IF BIT &
         (POSITIONAL×LIST×PREPOSITION) THEN
 /*           NOTE 8 "BIT CONFLICTS WITH OTHER OPTION"               */
 CALL NOTE(008,'BIT CONFLICTS WITH OTHER OPTION');
 IF REQUIRED & ^POSITIONAL
         THEN
 /*           NOTE 8 "REQUIRED MUST BE ON POSITIONAL"                */
 CALL NOTE(008,'REQUIRED MUST BE ON POSITIONAL');
 IF SUBSCRIPT^='' & ^POSITIONAL
         THEN
 /*           NOTE 8 "SUBSCRIPT REQUIRES POSITIONAL"                 */
 CALL NOTE(008,'SUBSCRIPT REQUIRES POSITIONAL');
 END PARMMAC;
*PROCESS INCLUDE,MARGINS(2,72);
 /* PARSMAC:  PARSE MACRO PROCEDURE                                  */
 /********************************************************************/
 /*      THE PARSE MACRO                                             */
 /*           USING THE INFORMATION STORED UP ABOUT THE PARAMETERS   */
 /*           BUILD A PARSE INTERFACE BLOCK. THE FIRST PART OF THIS  */
 /*           BLOCK CONTAINS THE KEYWORDS AND ASSOCIATES ALL ALIASES */
 /*           WITH THE PARAMETER NUMBER THEIR VALUE GOES IN.         */
 /*           THE SECOND PART OF THE BLOCK IS AN ARRAY OF STRUCTURES */
 /*           FOR EACH OF THE POSITIONAL AND KEYWORD PARAMETERS. IT  */
 /*           CONTAINS STATUS INFORMATION ABOUT KIND OF PARAMETER,   */
 /*           STORAGE TO HOLD THE CHARACTER STRING VALUE ASSIGNED    */
 /*           BY THE CALLER TO THAT PARAMETER, AND THE EXPLICIT      */
 /*           KEYWORD AMONG THE VALID ALIASES USED TO SPECIFY THE    */
 /*           VALUE.                                                 */
 /*           FOR CHAR VARIABLES, THE PLI VARIABLE NAME IS DECLARED  */
 /*           TO BE DEFINED OVER THE SPECIFIC MEMBER OF THE 'PARMS'  */
 /*           ARRAY WHICH WILL RECEIVE THE VALUE. FOR FIXED AND BIT  */
 /*           PARAMETERS, THE PLI NAME IS DECLARED AS A SEPARATE     */
 /*           SCALAR VARIABLE WHICH WILL BE ASSIGNED A VALUE AFTER   */
 /*           THE PARSE.                                             */
 /*           ONCE THIS BLOCK IS BUILT, PARSE IS CALLED TO ANALYZE   */
 /*           THE MACRO STATEMENT. UPON RETURN, THE PARAMETER        */
 /*           VALUES HAVE BEEN SET INTO THE 'PARMS' ARRAY AS         */
 /*           CHARACTER STRINGS.                                     */
 /*           FOR FIXED AND BIT VARIABLES WHICH ARE NOT OF THE       */
 /*           'LIST' TYPE, IT IS NOW NECESSARY TO EXPAND             */
 /*           ASSIGNMENT STATEMENTS WHICH WILL SET THE SCALAR        */
 /*           PLI VARIABLES TO THEIR PROPER VALUE. LIST VARIABLES    */
 /*           DO NOT HAVE A PROPER VALUE UNTIL OPENED.               */
 /********************************************************************/
 /*PARSMAC: MACRO                                                    */
  PARSMAC: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 DCL I FIXED BIN;
 DCL ANY BUILTIN;
 %INCLUDE MACINFO;
 DCL STR(0:20) CHAR(70) VAR INIT('');
 DCL STMT CHAR(1024) VAR;
 DCL PICKER PIC'99';
 DCL KEY# PIC'999' INIT(0);
 DCL KEYWD(100) CHAR(12) VAR;
 DCL KEYPN(100) PIC'99';
 DO I=1 TO PARM#;
         IF ^POSIT(I) THEN
              DO J=1 TO NAME#(I);
              KEY#=KEY#+1;
              KEYWD(KEY#)=NAMES(I,J);
              KEYPN(KEY#)=I;
              END;
 END;
 IF KEY#=0
         THEN
              DO;
         KEY#=1;
              KEYWD(1)=' ';
              KEYPN(1)=0;
              END;
 /*PUT " DCL 1 PARMBLOK,"                                            */
 CALL GEN (' DCL 1 PARMBLOK,');
 /*PUT "     2 KEYWORDS(<KEY#>),"                                    */
 CALL GEN ('     2 KEYWORDS('××KEY#××'),');
 PUT STRING(STMT) EDIT(('''',KEYWD(I),''',' DO I=1 TO KEY#-1),
         '''',KEYWD(KEY#),'''),') (A);
 /*PUT "         3 PARMN CHAR(12) VAR INIT(<STMT>"                   */
 CALL GEN ('         3 PARMN CHAR(12) VAR INIT('××STMT);
 PUT STRING(STMT) EDIT((KEYPN(I),',' DO I=1 TO KEY#-1),
         KEYPN(I),'),')(A);
 /*PUT "         3 PNUM FIXED BIN INIT(<STMT>"                       */
 CALL GEN ('         3 PNUM FIXED BIN INIT('××STMT);
 /*PUT "    2 PARAMETERS(0:<PARM#>),"                                */
 CALL GEN ('    2 PARAMETERS(0:'××PARM#××'),');
 PUT STRING(STMT) EDIT(('''',DEFAULTS(I),''',' DO I=1 TO PARM#-1),
         '''',DEFAULTS(PARM#),'''),')(A);
 /*PUT "         3 PARMS CHAR(<MAXLENS>) VAR INIT('',<STMT>"         */
 CALL GEN ('         3 PARMS CHAR('××MAXLENS××') VAR INIT('''','××STMT);
  PUT STRING(STMT) EDIT(('''',PREP(I),POSIT(I),ENDS(I),REQ(I),
         '''B,' DO I=1 TO PARM#-1),'''',
         PREP(PARM#),POSIT(PARM#),ENDS(PARM#),REQ(PARM#),
         '''B),')(A,4 B(1),A);
 /*PUT "         3 STATUS BIT(8) ALIGNED INIT('0000'B,<STMT>"        */
 CALL GEN ('         3 STATUS BIT(8) ALIGNED INIT(''0000''B,'××STMT);
         DO I=1 TO PARM#;
         IF SUBSCR(I)='' THEN
              STR(I)='0';
         ELSE
 SUBSCAN:
              DO;
                   DO J=1 TO PARM#;
                   IF ALIASES(J)=SUBSCR(I) THEN
                        DO;
                        PICKER=J;
                        STR(I)=PICKER;
                        LEAVE SUBSCAN;
                        END;
                   END;
 /*           NOTE 8 "SUBSCRIPT VAR NOT FOUND FOR <ALIASES(I)>"      */
 CALL NOTE(008,'SUBSCRIPT VAR NOT FOUND FOR '××ALIASES(I));
              END;
         END;
 PUT STRING(STMT) EDIT((STR(I),',' DO I=1 TO PARM#-1),
         STR(PARM#),'),')(A);
 /*PUT "         3 SUBS FIXED BIN INIT(0,<STMT>"                     */
 CALL GEN ('         3 SUBS FIXED BIN INIT(0,'××STMT);
 /*PUT "         3 NAMEUSED CHAR(12) VAR "                           */
 CALL GEN ('         3 NAMEUSED CHAR(12) VAR;');
 DO I=1 TO PARM#;
 PICKER=I;
          SELECT;
              WHEN (VFIXED(I))
 /*               PUT " DCL <ALIASES(I)> FIXED BIN "                 */
 CALL GEN (' DCL '××ALIASES(I)××' FIXED BIN;');
              WHEN (VLIST(I))
 /*               PUT " DCL <ALIASES(I)> CHAR(<MAXLENS>) VAR "       */
 CALL GEN (' DCL '××ALIASES(I)××' CHAR('××MAXLENS××') VAR;');
              WHEN (VBIT(I))
                  DO J=1 TO NAME#(I);
 /*               PUT " DCL <NAMES(I,J)> BIT "                       */
 CALL GEN (' DCL '××NAMES(I,J)××' BIT;');
                  END;
              OTHERWISE
 /*UT " DCL <ALIASES(I)> CHAR(<MAXLENS>) VAR DEF(PARMS(<PICKER>)) "  */
 CALL GEN (' DCL '××ALIASES(I)××' CHAR('××MAXLENS××') VAR DEF(PARMS('××P
 ICKER××'));');
          END;
 END;
 IF ANY(VLIST) THEN
         DO;
 /*      PUT " DCL NEXTWORD CHAR(<MAXLENS>) VAR "                    */
 CALL GEN (' DCL NEXTWORD CHAR('××MAXLENS××') VAR;');
 /*      PUT " DCL POSITION FIXED BIN "                              */
 CALL GEN (' DCL POSITION FIXED BIN;');
 /*      PUT " DCL RETCODE FIXED BIN "                               */
 CALL GEN (' DCL RETCODE FIXED BIN;');
         END;
 /*PUT " CALL PARSE(STRING,PARMBLOK) "                               */
 CALL GEN (' CALL PARSE(STRING,PARMBLOK);');
 DO I=1 TO PARM#;
 PICKER=I;
 IF ^VLIST(I) & VFIXED(I) THEN
 /*      PUT " <ALIASES(I)>=NUMBER(PARMS(<PICKER>),'<NAMES(I,1)>') " */
 CALL GEN (' '××ALIASES(I)××'=NUMBER(PARMS('××PICKER××'),'''××NAMES(I,1)
 ××''');');
 IF VBIT(I) THEN
              DO J=1 TO NAME#(I);
 /*           PUT " <NAMES(I,J)>=NAMEUSED(<PICKER>)='<NAMES(I,J)>' " */
 CALL GEN (' '××NAMES(I,J)××'=NAMEUSED('××PICKER××')='''××NAMES(I,J)××''
 ';');
              END;
 END;
 END PARSMAC;
*PROCESS INCLUDE,MARGINS(2,72);
 /* OPENMAC:  OPEN MACRO PROCEDURE                                   */
 /********************************************************************/
 /*      THE OPEN MACRO                                              */
 /*           PREPARE FOR ACCESS TO A LIST OF VALUES BY RESETTING    */
 /*           THE SCAN POINTER TO THE FIRST CHARACTER POSITION IN    */
 /*           THE STRING.                                            */
 /********************************************************************/
 /*OPENMAC: MACRO                                                    */
  OPENMAC: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 /*PARAMETER PNAMES POSITIONAL REQUIRED                              */
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(001),
          3 PARMN CHAR(12) VAR INIT(' '),
          3 PNUM FIXED BIN INIT(00),
     2 PARAMETERS(0:01),
          3 PARMS CHAR(256) VAR INIT('',''),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0101'B),
          3 SUBS FIXED BIN INIT(0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL PNAMES CHAR(256) VAR DEF(PARMS(01));
  CALL PARSE(STRING,PARMBLOK);
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 DO I=1 TO PARM#;
 IF PNAMES=ALIASES(I) THEN GO TO MATCH;
 END;
 /*NOTE 12 "UNRECOGNIZED PARM NAMES"                                 */
 CALL NOTE(012,'UNRECOGNIZED PARM NAMES');
 RETURN;
 MATCH:
 IF ^VLIST(I) THEN
         DO;
 /*      NOTE 12 "PARAMETER IS NOT LIST TYPE"                        */
 CALL NOTE(012,'PARAMETER IS NOT LIST TYPE');
         RETURN;
         END;
 /*PUT " POSITION=0 "                                                */
 CALL GEN (' POSITION=0;');
 END;
*PROCESS INCLUDE,MARGINS(2,72);
 /* GETMAC: GET MACRO PROCEDURE                                      */
 /********************************************************************/
 /*      THE GET MACRO                                               */
 /*           CALL GETWORD TO OBTAIN THE NEXT ITEM IN A              */
 /*           LIST OF VALUES. IF THE VARIABLE IN QUESTION            */
 /*           IS FIXED, CONVERT THE CHARACTER STRING TO              */
 /*           A NUMBER.                                              */
 /********************************************************************/
 /*GETMAC: MACRO                                                     */
  GETMAC: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 /*PARAMETER PNAMES POSITIONAL REQUIRED                              */
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(001),
          3 PARMN CHAR(12) VAR INIT(' '),
          3 PNUM FIXED BIN INIT(00),
     2 PARAMETERS(0:01),
          3 PARMS CHAR(256) VAR INIT('',''),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0101'B),
          3 SUBS FIXED BIN INIT(0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL PNAMES CHAR(256) VAR DEF(PARMS(01));
  CALL PARSE(STRING,PARMBLOK);
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 DCL P PIC'99';
 DO I=1 TO PARM#;
 IF PNAMES=ALIASES(I) THEN GO TO MATCH;
 END;
 /*NOTE 12 "UNRECOGNIZED PARM NAMES"                                 */
 CALL NOTE(012,'UNRECOGNIZED PARM NAMES');
 RETURN;
 MATCH:
 P=I;
 IF ^VLIST(I) THEN
         DO;
 /*      NOTE 12 "PARAMETER IS NOT LIST TYPE"                        */
 CALL NOTE(012,'PARAMETER IS NOT LIST TYPE');
         RETURN;
         END;
 /*PUT " NEXTWORD=GETWORD(PARMS(<P>),POSITION,RETCODE) "             */
 CALL GEN (' NEXTWORD=GETWORD(PARMS('××P××'),POSITION,RETCODE);');
 IF VFIXED(I) THEN
 /*      PUT " <ALIASES(I)>=NUMBER(NEXTWORD,'<ALIASES(I)>') "        */
 CALL GEN (' '××ALIASES(I)××'=NUMBER(NEXTWORD,'''××ALIASES(I)××''');');
 ELSE
 /*      PUT " <ALIASES(I)>=NEXTWORD "                               */
 CALL GEN (' '××ALIASES(I)××'=NEXTWORD;');
 END;
* PROCESS INCLUDE,MARGINS(2,72);
 /* GRAM:  THE GRAMMAR ENTRY POINT CREATION MACRO                    */
 /********************************************************************/
 /*      THE GRAM MACRO                                              */
 /*           CREATE A GRAMMER ENTRY POINT PROCEDURE.                */
 /*           FOR EACH MACRO NAME IN THE LIST, CALL MACADD           */
 /*      TO DEFINE THE MACRO TO G3P0                                 */
 /********************************************************************/
 /*GRAM:MACRO                                                        */
  GRAM: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 /*PARAMETER MACROS POSITONAL LIST                                   */
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(001),
          3 PARMN CHAR(12) VAR INIT('MACROS'),
          3 PNUM FIXED BIN INIT(01),
     2 PARAMETERS(0:01),
          3 PARMS CHAR(256) VAR INIT('','POSITONAL'),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0000'B),
          3 SUBS FIXED BIN INIT(0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL MACROS CHAR(256) VAR;
  DCL NEXTWORD CHAR(256) VAR;
  DCL POSITION FIXED BIN;
  DCL RETCODE FIXED BIN;
  CALL PARSE(STRING,PARMBLOK);
 /*OPEN MACROS                                                       */
  POSITION=0;
 /*GET MACROS                                                        */
  NEXTWORD=GETWORD(PARMS(01),POSITION,RETCODE);
  MACROS=NEXTWORD;
 /*PUT " <PARMS(0)>:PROC(GPPPTCA) "                                  */
 CALL GEN (' '××PARMS(0)××':PROC(GPPPTCA);');
 /*PUT " %NOPRINT "                                                  */
 CALL GEN (' %NOPRINT;');
 /*PUT " DCL 1 GPPPTCA CONNECTED,"                                   */
 CALL GEN (' DCL 1 GPPPTCA CONNECTED,');
 /*PUT " %INCLUDE GPPPTCA "                                          */
 CALL GEN (' %INCLUDE GPPPTCA;');
 /*PUT " %PRINT "                                                    */
 CALL GEN (' %PRINT;');
 /*PUT " DCL I FIXED BIN "                                           */
 CALL GEN (' DCL I FIXED BIN;');
 DO UNTIL(MACROS='');
 /*PUT " DCL <MACROS> ENTRY "                                        */
 CALL GEN (' DCL '××MACROS××' ENTRY;');
 /*PUT " I=MACADD('<MACROS>',<MACROS>) "                             */
 CALL GEN (' I=MACADD('''××MACROS××''','××MACROS××');');
 /*GET MACROS                                                        */
  NEXTWORD=GETWORD(PARMS(01),POSITION,RETCODE);
  MACROS=NEXTWORD;
 END;
 END GRAM;
* PROCESS INCLUDE,MARGINS(2,72);
 /* PUT: THE PUT AND NOTE MACRO PROCEDURES                           */
 /********************************************************************/
 /*      THE PUT MACRO                                               */
 /*           GENERATE AN OUTPUT STATEMENT                           */
 /*           PROVIDES PRIMITIVE FORMATTING CAPABILITY               */
 /*           FOR INSERTION AND PROPER HANDLING OF (').              */
 /********************************************************************/
 /*PUT: MACRO (1024)                                                 */
  PUT: PROC(STRING,GPPPTCA);
  DCL STRING CHAR(*) VAR;
  % NOPRINT;
  DCL 1 GPPPTCA CONNECTED,
  %INCLUDE GPPPTCA;
  % PRINT;
 /*PARAMETER ONE POSITIONAL REQUIRED                                 */
 /*PARAMETER TWO                                                     */
 /*PARAMETER FILE                                                    */
 DCL (I,J) FIXED BIN;
 DCL INSTMT(1024) CHAR(1);
 DCL OUTSTMT(1024) CHAR(1);
 DCL INSTRING CHAR(1024) DEFINED(INSTMT) POS(1);
 DCL OUTSTRING CHAR(1024) DEFINED(OUTSTMT) POS(1);
 DCL (LENGTH,SUBSTR) BUILTIN;
 DCL STMT CHAR(1024) VAR;
 DCL CODE PIC'999' INIT(0);
 DCL NOTER BIT INIT('0'B);
 GO TO PARSER;
 NOTEMAC: ENTRY(STRING,GPPPTCA);
 NOTER='1'B;
 PARSER:
 /*PARSE                                                             */
  DCL 1 PARMBLOK,
      2 KEYWORDS(002),
          3 PARMN CHAR(12) VAR INIT('TWO','FILE'),
          3 PNUM FIXED BIN INIT(02,03),
     2 PARAMETERS(0:03),
          3 PARMS CHAR(1024) VAR INIT('','','',''),
          3 STATUS BIT(8) ALIGNED INIT('0000'B,'0101'B,'0000'B,'0000'B),
          3 SUBS FIXED BIN INIT(0,0,0,0),
          3 NAMEUSED CHAR(12) VAR;
  DCL ONE CHAR(1024) VAR DEF(PARMS(01));
  DCL TWO CHAR(1024) VAR DEF(PARMS(02));
  DCL FILE CHAR(1024) VAR DEF(PARMS(03));
  CALL PARSE(STRING,PARMBLOK);
 IF NOTER
         THEN
              DO;
              CODE=NUMBER(ONE,'CODE');
              STMT=TWO;
              END;
         ELSE
              STMT=ONE;
 INSTRING=STMT;
 IF INSTMT(1)='<'
         THEN
              DO;
              I=2;
              J=1;
              END;
         ELSE
              DO;
              I=1;
              J=2;
              OUTSTMT(1)='''';
              END;
         DO I=I TO LENGTH(STMT);
         IF J>1000
              THEN
                   DO;
 /*                NOTE 12 "OUTPUT STATEMENT TOO LONG"               */
 CALL NOTE(012,'OUTPUT STATEMENT TOO LONG');
                   RETURN;
                   END;
              SELECT (INSTMT(I));
                   WHEN ('''')
                        DO;
                        OUTSTMT(J),OUTSTMT(J+1)='''';
                        J=J+1;
                        END;
                   WHEN ('<')
                        DO;
                        OUTSTMT(J)='''';
                        OUTSTMT(J+1),OUTSTMT(J+2)='×';
                        J=J+2;
                        END;
                   WHEN ('>')
                        DO;
                        OUTSTMT(J),OUTSTMT(J+1)='×';
                        OUTSTMT(J+2)='''';
                        J=J+2;
                        END;
                   OTHERWISE
                        OUTSTMT(J)=INSTMT(I);
              END;
         J=J+1;
         END;
 IF INSTMT(LENGTH(STMT))='>'
         THEN
              DO;
              J=J-3;
              END;
         ELSE
              DO;
              OUTSTMT(J)='''';
              J=J+1;
              END;
 SELECT;
         WHEN (NOTER)
 /*           PUT "CALL NOTE(<CODE>,<SUBSTR(OUTSTRING,1,J-1)>) "     */
 CALL GEN ('CALL NOTE('××CODE××','××SUBSTR(OUTSTRING,1,J-1)××');');
         WHEN (FILE='')
 /*           PUT "CALL GEN (<SUBSTR(OUTSTRING,1,J-1)>) "            */
 CALL GEN ('CALL GEN ('××SUBSTR(OUTSTRING,1,J-1)××');');
         OTHERWISE
              DO;
 /*           PUT "AUTOFILE=<FILE> "                                 */
 CALL GEN ('AUTOFILE='××FILE××';');
 /*           PUT "GENAUTO='1'B "                                    */
 CALL GEN ('GENAUTO=''1''B;');
 /*           PUT "CALL GEN (<SUBSTR(OUTSTRING,1,J-1)>) "            */
 CALL GEN ('CALL GEN ('××SUBSTR(OUTSTRING,1,J-1)××');');
 /*           PUT "AUTOFILE=SYSUT3F "                                */
 CALL GEN ('AUTOFILE=SYSUT3F;');
 /*           PUT "GENAUTO='0'B "                                    */
 CALL GEN ('GENAUTO=''0''B;');
              END;
 END;
 END PUT;
