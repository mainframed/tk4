PROC 0 -
       P(CHECK) -
       HELP -
       DEBUG
IF &DEBUG NE DEBUG THEN CONTROL NOLIST NOMSG
ELSE CONTROL LIST PROMPT CONLIST SYMLIST MSG
  /*
  /*               H   H  EEEEE  L      PPPP
  /*               H   H  E      L      P   P
  /*               H   H  E      L      P   P
  /*               HHHHH  EEE    L      PPPP
  /*               H   H  E      L      P
  /*               H   H  E      L      P
  /*               H   H  EEEEE  LLLLL  P
  /*
  IF &HELP EQ HELP THEN +
    DO
      ERASE
      WRITE                           G D G
      WRITE
      WRITE             THIS UTILITY WILL READ A GDG INDEX
      WRITE             STRUCTURE AND CHANGE THE NUMBER OF
      WRITE             ENTRIES DEFINED BY UNCATALOGING ALL
      WRITE             ENTRIES UNDER THE STRUCTURE,
      WRITE             DELETING THE INDEX STRUCTURE,
      WRITE             REBUILDING THE INDEX STRUCTURE, AND
      WRITE             RECATALOGING THE NECESSARY NUMBER OF
      WRITE             ENTRIES UNDER THE REBUILT INDEX. IF
      WRITE             THE NEW INDEX CONTAINS LESS ENTRIES
      WRITE             THAN THE PREVIOUS INDEX AND THERE
      WRITE             ARE GENERATIONS LEFT OVER AFTER THE
      WRITE             RE-CATALOGING, THE REMAINING
      WRITE             GENERATIONS ARE SCRATCHED IF THEY
      WRITE             RESIDE ON A DASD DEVICE.
      WRITE
      WRITE             THIS UTILITY WILL ALSO LIST THE GDG
      WRITE             INDEX STRUCTURE, AND THE ENTRIES
      WRITE             CATALOGUED UNDER THE INDEX, ADD NEW
      WRITE             INDEX STRUCTURES, AND DELETE OLD
      WRITE             INDEX STRUCTURES.
      EXIT
    END
  /*
  /*         SSS   EEEEE  TTTTT         U   U  PPPP
  /*        S   S  E        T           U   U  P   P
  /*         S     E        T           U   U  P   P
  /*          S    EEE      T    =====  U   U  PPPP
  /*           S   E        T           U   U  P
  /*        S   S  E        T           U   U  P
  /*         SSS   EEEEE    T            UUU   P
  /*
  FREE DD(CARD)
  FREE DD(PRT)
  FREE DD(CARDIN)
  FREE DD(PRTOUT)
  FREE DD(DD1)
  FREE DD(DD2)
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  ALLOC DD(CARD) SPACE(1,1) BLOCK(80)
  ALLOC DD(PRT) DA(*)
  ALLOC DD(CARDIN) SPACE(1,1) BLOCK(80)
  ALLOC DD(PRTOUT) DA(*)
  ALLOC FI(DD1) NEW VOL(MVSRES) SPACE(0 ) BLOCK(80)
  ALLOC FI(DD2) NEW VOL(OS0005) SPACE(0 ) BLOCK(80)
  SET GDGINDEX = &STR()
  ERASE
  /*
  /*         AAA    CCC   TTTTT  IIIII   OOO   N   N
  /*        A   A  C   C    T      I    O   O  N   N
  /*        A   A  C        T      I    O   O  NN  N
  /*        A   A  C        T      I    O   O  N N N
  /*        AAAAA  C        T      I    O   O  N  NN
  /*        A   A  C   C    T      I    O   O  N   N
  /*        A   A   CCC     T    IIIII   OOO   N   N
  /*
GETFUNC1: +
  WRITENR
GETFUNCA: +
  WRITE
  WRITE
GETFUNCB: +
  WRITE &STR(                    GENERATION DATA GROUP UTILITY)
  WRITE &STR(                         PRIMARY OPTION MENU)
  WRITE
  WRITE
  WRITE &STR(               'L'  -- LIST AN EXISTING INDEX.)
  WRITE
  WRITE &STR(               'A'  -- ADD A NEW GDG INDEX.)
  IF &LENGTH(&GDGINDEX) = 0 THEN +
    DO
      WRITE
      WRITE &STR(               'E'  -- END GDG UTILITY.)
      WRITE
      WRITE
      WRITE           ALL OTHER OPTIONS ARE INVALID AT THIS TIME.
      WRITE
      WRITE           BEFORE AN EXISTING GDG INDEX MAY BE MODIFIED
      WRITE                  OR DELETED, IT MUST BE LISTED.
      GOTO GETFUNC2
    END
  WRITE
  WRITE &STR(               'D'  -- DELETE THE GDG INDEX '&GDGINDEX'.)
  WRITE
  WRITE &STR(               'C'  -- CHANGE THE GDG INDEX '&GDGINDEX'.)
  WRITE
  WRITE &STR(               'E'  -- END GDG UTILITY.)
GETFUNC2: +
  WRITE
  WRITE
  WRITENR &STR(                       ENTER OPTION:)
  READ FUNCT
  IF &FUNCT = E THEN +
    DO
      GOTO ENDF
    END
  IF &LENGTH(&FUNCT) = 0 THEN +
    DO
      GOTO LISTF
    END
  IF &FUNCT = L THEN +
    DO
      GOTO LISTF
    END
  IF &FUNCT = A THEN +
    DO
      GOTO ADDF
    END
  IF &LENGTH(&GDGINDEX) = 0 THEN +
    DO
      ERASE
      WRITE &STR(ERR==>         ENTRY NOT ACCEPTED)
      WRITE           FUNCTION MUST BE 'L' 'A' OR EOB ONLY.
      GOTO GETFUNCB
    END
  IF &FUNCT = C THEN +
    DO
      GOTO CHANGEF
    END
  IF &FUNCT = D THEN +
    DO
      GOTO DELF
    END
  ERASE
  WRITE &STR(ERR==>         ENTRY NOT ACCEPTED)
  WRITE           FUNCTION MUST BE 'L', 'A', 'C', 'D', 'E', OR EOB ONLY.
  GOTO GETFUNCB
  /*
  /*                    AAA   DDDD   DDDD
  /*                   A   A  D   D  D   D
  /*                   A   A  D   D  D   D
  /*                   A   A  D   D  D   D
  /*                   AAAAA  D   D  D   D
  /*                   A   A  D   D  D   D
  /*                   A   A  DDDD   DDDD
  /*
ADDF: +
  ERASE
ADDF1: +
  WRITE
  WRITE
ADDF2: +
  WRITENR &STR(          ENTER GDG INDEX NAME: )
  READ GDGINDEX
  IF &LENGTH(&GDGINDEX) = 0 THEN +
    DO
      ERASE
      WRITE
      WRITE &STR(ERR==>         NULL ENTRY NOT ACCEPTED)
      GOTO ADDF2
    END
  ERASE
GETNRA: +
  WRITE
  WRITE
GETNRB: +
  WRITE &STR(          GENERATION: &GDGINDEX)
  WRITE &STR(          ENTER NUMBER OF GENERATIONS TO BE CATALOGED.)
  WRITENR &STR(ENTER:)
  READ NENTRIES
  IF &DATATYPE(&NENTRIES) ^= NUM THEN +
    GOTO ERRORA1
  IF &NENTRIES < 1 THEN +
    GOTO ERRORA1
  IF &NENTRIES >255 THEN +
    GOTO ERRORA1
  ERASE
  GOTO GETMODEA
ERRORA1: +
  ERASE
  WRITE &STR(ERR==>    NON-NUMERIC ENTRY NOT ACCEPTED '&NENTRIES')
  WRITE           ENTRY MUST BE NUMERIC, 1 THROUGH 255 ONLY. TRY AGAIN.
  GOTO GETNRB
GETMODEA: +
  WRITE
  WRITE
GETMODEB: +
  WRITE &STR(          GENERATION: &GDGINDEX)
  WRITE &STR(                       ENTER TYPE OF INDEX MAINTENANCE:)
  WRITE
  WRITE &STR(               'D'  -- OLDEST GENERATION WILL BE)
  WRITE &STR(                       UNCATALOGED AND DELETED AT EOJ)
  WRITE
  WRITE
  WRITE &STR(               'E'  -- ALL PREVIOUS GENERATIONS WILL BE)
  WRITE &STR(                       UNCATALOGED WHEN N+1 GENERATION IS)
  WRITE &STR(                       CATALOGED.)
  WRITE
  WRITE &STR(               ' '  -- OLDEST GENERATION WILL BE)
  WRITE &STR(                       UNCATALOGED BUT NOT DELETED AT EOJ.)
  WRITE
  WRITE
  WRITE
  WRITENR &STR(                       ENTER:)
  READ MODEI
  IF &LENGTH(&MODEI) = 0 THEN +
    DO
      SET COMMA = &STR( )
      SET MODEI = &STR( )
      GOTO DOADD
    END
  IF &MODEI = D THEN +
    DO
      SET COMMA = &STR(,)
      SET MODEI = &STR(DELETE)
      GOTO DOADD
    END
  IF &MODEI = E THEN +
    DO
      SET COMMA = &STR(,)
      SET MODEI = &STR(EMPTY)
      GOTO DOADD
    END
  ERASE
  WRITE &STR(ERR==>    ENTRY NOT ACCEPTED '&MODEI'.)
  WRITE           INDEX OVERFLOW TYPE MUST BE 'D', 'E' OR EOB ONLY.
  GOTO GETMODEB
DOADD: +
  OPENFILE CARDIN OUTPUT
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      CLOSFILE CARDIN
      GOTO ENDF
    END
  SET &CARDIN = &STR( BLDG INDEX=)&GDGINDEX,&STR(ENTRIES=)&NENTRIES+
  &COMMA&MODEI
  /* ' BLDG INDEX-DSN,ENTRIES,(,DELETE)(,EMPTY)' IS EXPECTED INPUT
  PUTFILE CARDIN
  CLOSFILE CARDIN
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  ERASE
  CALL 'SYS2.LINKLIB(HKNGDG02)'
  WRITE
  WRITENR &STR(          TYPE 'ENTER' WHEN YOU WISH THE GDG MENU:)
  READ DUMMY
  ERASE
  GOTO GETFUNC1
  /*
  /*               L      IIIII   SSS   TTTTT
  /*               L        I    S   S    T
  /*               L        I     S       T
  /*               L        I      S      T
  /*               L        I       S     T
  /*               L        I    S   S    T
  /*               LLLLL  IIIII   SSS     T
  /*
LISTF: +
  ERASE
  WRITE
  WRITE
LISTFA: +
  WRITENR &STR(ENTER GDG INDEX NAME: )
  READ GDGINDEX
  IF &LENGTH(&GDGINDEX) = 0 THEN +
    DO
    ERASE
    WRITE &STR(ERR==>    NULL ENTRY NOT ACCEPTED.)
    WRITE
    GOTO LISTFA
    END
GETLISTI: +
  ERASE
  WRITE
  WRITE
GETLIST1: +
  WRITE &STR(          GENERATION: &GDGINDEX)
  WRITE
  WRITE &STR(                       ENTER LIST TYPE:)
  WRITE
  WRITE &STR(               'E'  -- TO LIST INDEX PARAMETERS)
  WRITE &STR(                       AND LIST EACH CURRENTLY)
  WRITE &STR(                       CATALOGED GENERATION.)
  WRITE
  WRITE &STR(               ' '  -- TO LIST INDEX PARAMETERS ONLY.)
  WRITE
  WRITE
  WRITE
  WRITENR &STR(                       ENTER:)
  READ LISTI
  IF &LENGTH(&LISTI) = 0 THEN +
    DO
      SET COMMA = &STR(,)
      SET LISTI = &STR(LIST)
      GOTO DOLIST
    END
  IF &LISTI = E THEN +
    DO
      SET COMMA = &STR(,)
      SET LISTI = &STR(LISTENTRIES)
      GOTO DOLIST
    END
  ERASE
  WRITE &STR(ERR==>    ENTRY NOT ACCEPTED.)
  WRITE           LIST TYPE MUST BE 'E' OR EOB ONLY. TRY AGAIN.
  GOTO GETLIST1

DOLIST: +
  OPENFILE CARD OUTPUT
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      CLOSFILE CARDIN
      GOTO ENDF
    END
  SET &CARD = &GDGINDEX&COMMA&LISTI
  /* 'GDG-INDEX-DSN,LIST' OR
  /* 'GDG-INDEX-DSN,LISTENTRIES' IS EXPECTED INPUT TO HKNGDG.
  PUTFILE CARD
  CLOSFILE CARD
  ERROR +
    DO
      IF &LASTCC = 22 THEN +
        DO
          WRITE &STR(ERR==>    ENTRY NOT ACCEPTED.)
          WRITE           THE INDEX NAME '&GDGINDEX' DOES NOT EXIST.
          GOTO LISTFA
        END
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  ERASE
  CALL 'SYS2.LINKLIB(HKNGDG01)'
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      CLOSFILE CARDIN
      GOTO ENDF
    END
  WRITENR &STR(          TYPE 'ENTER' WHEN YOU WISH THE GDG MENU:)
  READ DUMMY
  ERASE
  GOTO GETFUNC1
  /*
  /*         CCC   H   H   AAA   N   N   GGG   EEEEE
  /*        C   C  H   H  A   A  N   N  G   G  E
  /*        C      H   H  A   A  NN  N  G      E
  /*        C      HHHHH  A   A  N N N  G      EEE
  /*        C      H   H  AAAAA  N  NN  G  GG  E
  /*        C   C  H   H  A   A  N   N  G   G  E
  /*         CCC   H   H  A   A  N   N   GGG   EEEEE
  /*
CHANGEF: +
  ERASE
  WRITE
  WRITE
CHANGEF2: +
  WRITE &STR(          GENERATION: &GDGINDEX)
      WRITE &STR(          ENTER NEW MAXIMUM NUMBER OF GENERATIONS +
  TO BE CATALOGED.)
  WRITENR &STR(          ENTER:)
  READ NENTRIES
  IF &DATATYPE(&NENTRIES) ^= NUM THEN +
    GOTO ERROR1
  IF &NENTRIES < 1 THEN +
    GOTO ERROR1
  IF &NENTRIES >255 THEN +
    GOTO ERROR1
  GOTO GETMODEI
ERROR1: +
  ERASE
  WRITE &STR(ERR==>    ENTRY NOT ACCEPTED '&NENTRIES'.)
  WRITE           VALUE MUST BE NUMERIC, 1 THROUGH 255 ONLY.
  GOTO CHANGEF2
GETMODEI: +
  ERASE
  WRITE
  WRITE
GETMODEC: +
  WRITE &STR(          GENERATION: &GDGINDEX)
  WRITE &STR(                       ENTER TYPE OF INDEX MAINTENANCE:)
  WRITE
  WRITE &STR(               'D'  -- OLDEST GENERATION WILL BE)
  WRITE &STR(                       UNCATALOGED AND DELETED AT EOJ)
  WRITE
  WRITE
  WRITE &STR(               'E'  -- ALL PREVIOUS GENERATIONS WILL BE)
  WRITE &STR(                       UNCATALOGED WHEN N+1 GENERATION IS)
  WRITE &STR(                       CATALOGED.)
  WRITE
  WRITE &STR(               ' '  -- OLDEST GENERATION WILL BE
  WRITE &STR(                       UNCATALOGED BUT NOT DELETED AT EOJ.)
  WRITE
  WRITE
  WRITE
  WRITENR &STR(                       ENTER:)
  READ MODEI
  IF &LENGTH(&MODEI) = 0 THEN +
    DO
      SET COMMA = &STR( )
      SET MODEI = &STR( )
      GOTO DOCHANGE
    END
  IF &MODEI = D THEN +
    DO
      SET COMMA = &STR(,)
      SET MODEI = &STR(DELETE)
      GOTO DOCHANGE
    END
  IF &MODEI = E THEN +
    DO
      SET COMMA = &STR(,)
      SET MODEI = &STR(EMPTY)
      GOTO DOCHANGE
    END
  ERASE
  WRITE &STR(ERR==>    ENTRY NOT ACCEPTED '&MODEI'.)
  WRITE           INDEX MAINTENANCE TYPE MUST BE 'D', 'E' OR EOB ONLY.
  GOTO GETMODEC
DOCHANGE: +
  OPENFILE CARD OUTPUT
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      CLOSFILE CARDIN
      GOTO ENDF
    END
  SET &CARD = &GDGINDEX,&STR(ENTRIES=)&NENTRIES&COMMA&MODEI
  /* 'GDG-INDEX-DSN,ENTRIES=NNN(,DELETE)(,EMPTY)' IS EXPECTED INPUT
  PUTFILE CARD
  CLOSFILE CARD
  ERROR +
    DO
      IF &LASTCC = 22 THEN +
        DO
          WRITE &STR(ERR==>    ENTRY NOT ACCEPTED.)
          WRITE           THE INDEX NAME '&GDGINDEX' DOES NOT EXIST.
          GOTO LISTFA
        END
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  ERASE
  CALL 'SYS2.LINKLIB(HKNGDG01)'
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  WRITE
  WRITENR &STR(          TYPE 'ENTER' WHEN YOU WISH THE GDG MENU:)
  READ DUMMY
  ERASE
  GOTO GETFUNC1
  /*
  /*        DDDD   EEEEE  L      EEEEE  TTTTT  EEEEE
  /*        D   D  E      L      E        T    E
  /*        D   D  E      L      E        T    E
  /*        D   D  EEE    L      EEE      T    EEE
  /*        D   D  E      L      E        T    E
  /*        D   D  E      L      E        T    E
  /*        DDDD   EEEEE  LLLLL  EEEEE    T    EEEEE
  /*
DELF: +
  ERASE
  WRITE
  WRITE
DELF1: +
  WRITE &STR(          VERIFY GDG INDEX TO BE DELETED:)
  WRITE &STR(          IS '&GDGINDEX' TO BE DELETED? (Y/N))
  WRITE
  WRITENR &STR(          ENTER:)
  READ VERIFY
  IF &VERIFY = Y THEN +
    GOTO DODEL
  IF &VERIFY = N THEN +
    DO
      ERASE
      WRITE
      WRITE &STR(          DELETE OF &GDGINDEX CANCELLED. )
      GOTO GETFUNCB
    END
  ERASE
  WRITE &STR(ERR==>    ENTRY NOT ACCEPTED '&VERIFY'.)
  WRITE           VALID RESPONSES ARE 'Y' AND 'N' ONLY.
  GOTO DELF1
DODEL: +
  OPENFILE CARDIN OUTPUT
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      CLOSFILE CARDIN
      GOTO ENDF
    END
  SET &CARDIN = &STR( DLTX INDEX=)&GDGINDEX
  /* ' DLTX INDEX-DSN IS EXPECTED INPUT
  PUTFILE CARDIN
  CLOSFILE CARDIN
  ERROR +
    DO
      %ELIST &LASTCC
      ERROR OFF
      GOTO ENDF
    END
  ERASE
  CALL 'SYS2.LINKLIB(HKNGDG02)'
  WRITE
  WRITENR &STR(          TYPE 'ENTER' WHEN YOU WISH THE GDG MENU:)
  READ DUMMY
  ERASE
  GOTO GETFUNC1
ENDF: +
  FREE DD(CARD)
  FREE FI(PRT)
  FREE FI(CARDIN)
  FREE FI(PRTOUT)
  FREE FI(DD1)
  FREE FI(DD2)
  ERASE
  WRITE
  WRITE
  WRITE
  WRITE
  WRITE
  WRITE
  WRITE
  WRITE
  WRITE                        END OF CLIST GDG
