-
-
-
-
0
-                    EFFECTIVE USE OF THE TSO PDS COMMAND
+                    ____________________________________
0
-×                            PDS Version 7.0
+                             _______________
-                             A. Bruce Leland
                              Hitachi America, LTD.
                              2210 O'Toole Avenue
                              San Jose, Cal.  95131
-
                              (408) 435-2143
-
0×                            January 20, 1985
1
0
1                               TABLE OF CONTENTS
+                               _________________
-        Introduction . . . . . . . . . . . . . . . . . . . . . . . . .
0        Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .
0        Member Groups  . . . . . . . . . . . . . . . . . . . . . . . .
0        Attention Processing . . . . . . . . . . . . . . . . . . . . .
0        Update Protection  . . . . . . . . . . . . . . . . . . . . . .
0        SPF Interface  . . . . . . . . . . . . . . . . . . . . . . . .
0        Background Execution . . . . . . . . . . . . . . . . . . . . .
0        Abbreviations  . . . . . . . . . . . . . . . . . . . . . . . .
0        Subcommands  . . . . . . . . . . . . . . . . . . . . . . . . .
            ALIAS . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ATTRIB  . . . . . . . . . . . . . . . . . . . . . . . . . .
            CHANGE  . . . . . . . . . . . . . . . . . . . . . . . . . .
            CONTROL . . . . . . . . . . . . . . . . . . . . . . . . . .
            DELETE  . . . . . . . . . . . . . . . . . . . . . . . . . .
            DIRENTRY  . . . . . . . . . . . . . . . . . . . . . . . . .
            DISPLAY . . . . . . . . . . . . . . . . . . . . . . . . . .
 ×          EDIT. . . . . . . . . . . . . . . . . . . . . . . . . . . .
            EXEC or %   . . . . . . . . . . . . . . . . . . . . . . . .
            FIND  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            FIXPDS  . . . . . . . . . . . . . . . . . . . . . . . . . .
            HELP  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            HISTORY . . . . . . . . . . . . . . . . . . . . . . . . . .
            IF  . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 ×          ISPMODE . . . . . . . . . . . . . . . . . . . . . . . . . .
            LIST  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            MAP . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            MEMBERS . . . . . . . . . . . . . . . . . . . . . . . . . .
 ×          MEMLIST . . . . . . . . . . . . . . . . . . . . . . . . . .
            OUTCOPY . . . . . . . . . . . . . . . . . . . . . . . . . .
            PATTERN . . . . . . . . . . . . . . . . . . . . . . . . . .
            RECALL  . . . . . . . . . . . . . . . . . . . . . . . . . .
            RENAME  . . . . . . . . . . . . . . . . . . . . . . . . . .
            RESTORE . . . . . . . . . . . . . . . . . . . . . . . . . .
            TSO . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            USAGE . . . . . . . . . . . . . . . . . . . . . . . . . . .
            VERIFY  . . . . . . . . . . . . . . . . . . . . . . . . . .
0        Appendix A: PDS Version 6.2  . . . . . . . . . . . . . . . . .
0        Appendix B: PDS Version 6.3  . . . . . . . . . . . . . . . . .
0        Appendix C: PDS Version 7.0  . . . . . . . . . . . . . . . . .
0        Appendix D: BLKDISK and Blocksizes   . . . . . . . . . . . . .
0        Appendix E: PDS Messages . . . . . . . . . . . . . . . . . . .
0        Appendix F: PDS Suggestion Form  . . . . . . . . . . . . . . .
0        Appendix G: PDS User Survey  . . . . . . . . . . . . . . . . .
1                            INTRODUCTION
+                            ____________
- This document is intended to provide systems programmers and
  other users of the PDS command with examples and notes on using
  the command effectively.
-
     History
+    _______
0    PDS was originally written in 1972 at Fireman's Fund Insurance.

     Since that time it has gone through many revisions at several
     installations and PDS is now known by various command names in
     the user community:  PDS, LPDS, LISTPDS, PDS18 and PDS4.

     Since the PDS command was written, it has grown in size and
     complexity:
 ×      A.  Number of subcommands (was 12, now 41)
 ×      B.  Number of source statements (was 4050, now 18160)
 ×      C.  Number of HELP statements (was 500, now 4100)
 ×      D.  Size of load module (was 16K, now 92K)
-
     Purpose
+    _______
0    The PDS command was designed to manipulate PDS's or partitioned
     data sets.  In the past, only non-authorized functions have been
     performed by the PDS command.

     Sequential data sets are also allowed for several of the PDS
     subcommands which process target data sets (BROWSE, DSPRINT, EDIT,
 ×   FIND, FIXPDS, FSE, LIST, PRINTOFF, REVIEW, SUBMIT, TSOEDIT,
     TSOLIST and VERIFY).  The documented syntax is changed in that
     no data is entered for the member name position.

     Thus, a LIST subcommand such as LIST MEMBERXX SKIPREC(20) for a
     partitioned data set would be entered as LIST SKIPREC(20) for a
     sequential data set.
-
     Operation
+    _________
0    The PDS command accepts the name of a target data set, allocates
     the data set, and processes subcommands entered by the user.

     PDS is a standard TSO command processor which uses PUTLINE,
     GETLINE, and PUTGET MACRO's for terminal communication.  PDS
 ×   subcommands which perform full screen output use ISPF dialog
 ×   services.
-
1                            DEFINITIONS
+                            ___________
- Several of the terms relating to partitioned data sets are defined
  in this section.
-    PDS or Partitioned Data Set - a data set with fixed, variable or
+    ___________________________
     undefined format which is commonly used as a library for related
     types of information.  Partitioned data sets contain two segments
     of data: a directory of information and member data.

     PDS directory -  a segment of a PDS which is a sequential data set
+    _____________
     with eight byte keys and 256 byte data records containing pointers
     to data in the PDS member portion of the data set.

     PDS member data - a segment of a PDS which contains current members
+    _______________
     (which are pointed to by one or more directory entries) and inactiv
     or deleted members (which have no associated directory entries).

     PDS directory entry - a logical entry in a PDS directory which poin
+    ___________________
     to its associated data in the member data; it consists of an eight
     character member name field and at least one three-character relati
     address field.

     Load library -  a partitioned data set which has record format U, U
+    ____________
     or UM and is commonly used to contain executable modules.

     Member -  data in a partitioned data set which is pointed to by one
+    ______
     or more PDS directory entries.

     Load module -  a member contained in a load library.
+    ___________

     Alias member -  a directory entry with a indicator value which
+    ____________
     indicates that the member entry is an alternate name for another
     main member; a main member and its aliases are associated with the
     same recorded data in the PDS.

     Main member -  a non-alias directory entry and its associated
+    ___________
     recorded data (a main member may also be called a real member).

     Orphan member - an alias member which does not have an associated
+    _____________
     main member.

     Deleted member -  member data which is not pointed to by any
+    ______________
     directory entry; deleted members remain in a PDS until the
     data set is compressed.

     Apparent alias member -  data in a partitioned data set which
+    _____________________
     is pointed to by more than one main PDS directory entry.  This
     type of member is not commonly encountered.
1                            MEMBER GROUPS
+                            _____________
- Several subcommands allow for specification of a member name group whi
  consists of a member name range or member name pattern as follows:

0    Member name range -- a subcommand may process all members in a
+    _________________
     range of members by specifying a beginning partial member
     name, a colon, and an ending partial member name (where either
     or both of the partial names may be null):
        subcommand  :         (all members of the data set)
        subcommand  pt1:      (members from PT1 to the end of the direct
        subcommand  :pt2      (members from X'00' through PT299999)
        subcommand  pt3:pt4   (members from PT3 through PT499999)

0    Member name pattern -- a subcommand may process all members whose
+    ___________________
     names contain pattern character segments by specifying a member
     name segment, a slash, and another member name segment (either,
     but not both, of the member name segments may be null):
        subcommand  sg1/      (all member names containing SG1)
        subcommand  /sg2      (all member names containing SG2)
        subcommand  sg3/sg4   (all member names containing SG3 and SG4)

0    Member lists -- a subcommand may process those members whose names
+    ____________
     or group names appear in a list of member names:
        subcommand  (aa,bb)   (members AA and BB)
        subcommand  (:bb,cc)  (members from X'00' through BB999999 and C
        subcommand  (aa,/dd)  (member AA and all members containing DD)

0    Default member name -- if no member name is specified, the last
+    ___________________
     member name list, member name or member group entered for any
     subcommand which defines member groups will be assumed.

0    Asterisk member name -- if * is entered in the member name position
+    ____________________
     the last member name list, member name or member group entered for
     any subcommand which defines member groups will be assumed.

0    Member name display subcommands -- MEMBERS, PATTERN and DISPLAY
+    _______________________________
     allow the display of member groups using the above member group
     syntax; however, these subcommands differ as follows:

        DISPLAY -- can not modify the default member group or use lists;
+       _______    _______
                   if no member specification is entered, the entire
                   member directory is displayed.

        PATTERN -- can not modify the default member group or use lists;
+       _______    _______
                   if no member specification is entered, the member
                   group last entered on a PATTERN subcommand is
                   displayed.

        MEMBERS -- can modify the default member group and use lists;
+       _______    ___
                   if no member specification is entered, the default
                   member group is displayed.
1                            ATTENTION HANDLING
+                            __________________
- Several of the line-mode output subcommands such as LIST, MAP and
  HISTORY can produce large volumes of output.  PDS is designed to
  terminate such output when requested via an attention (PA1) key.

  In general, an attention may be used to terminate the current PDS
  subcommand and two attentions in a row may be used to terminate the
  PDS command.


  In the following, the attention processing provided by PDS is
  described in more detail:

     A.  An single attention should terminate any member group in
         progress.

     B.  An attention at a prompt for a data set should terminate PDS.

     C.  An attention at the normal ENTER OPTION subcommand prompt
         should provide another ENTER OPTION prompt; another attention
         at this point should terminate PDS.

     D.  A single attention during subcommand processing should result
         in an ENTER OPTION prompt; the processing action taken at this
         point depends on what is entered next:
          1.  Another attention should terminate the PDS command.
          2.  A null line should cause the interrupted subcommand to
              continue at the point of interruption with the probable
              loss of any buffered output for the terminal.
          3.  An entered subcommand should be given control immediately.
              The remainder of any PDS CLIST in use should be discarded
              as a part of the attention processing.

     E.  If a PDS subcommand is in a loop that does not involve input or
         output to the terminal or input from the current data set, a
         single attention may not terminate the loop:
          1.  The first attention will provide the normal ENTER OPTION
              prompt.
          2.  If a subcommand is entered at this time, PDS may continue
              looping.
          3.  If PDS is looping, another attention should produce the
              message "PDS470W THE PROGRAM IS PROBABLY IN A LOOP" and
              PDS should terminate the executing subcommand and perform
              the subcommand entered at the ENTER OPTION prompt.
1                            UPDATE PROTECTION
+                            _________________
0
- Member Protection
+ _________________
0×PDS subcommands such as DELETE, EDIT, FIXPDS, FSE, RENAME and TSOEDIT
  change members which might be in use elsewhere in an installation.
  To prevent multiple simultaneous updates of a member, PDS issues
  SPF-style enqueue checks before any of the above subcommands first
  attempt to access a member.

- Data Set Protection
+ ___________________
0 In addition, several PDS subcommands such as ALIAS, ATTRIB, DELETE,
  FIXPDS, RENAME and RESTORE could cause data set integrity problems if
  they update a data set as it is being updated by another user.  This
  is not a problem if the data set is allocated as OLD since exclusive
  use of the data set is assured.

  To circumvent this problem for SHR allocations, PDS uses the following
  SPF RESERVE logic to maintain data set integrity during data set
  updates:

     A.  A volume RESERVE is performed.

     B.  If the data set is a load library, then a linkage-editor style
         RESERVE or ENQUE is performed as appropriate:
          1.  On a shared DASD volume, a volume RESERVE is performed.
          2.  On a non-shared DASD volume, a ENQUE is performed.

     C.  The data set is opened.

     D.  All data set updates are performed.
          1.  For most subcommands with member groups, the data
              set is left open for the entire member group.
          2.  For executions of PDS in batch mode, the volume
              reserve is maintained during the entire use of the
              data set.

     E.  The data set is closed.

     F.  DEQ's are performed to remove the volume RESERVE's and ENQ's.
1                            SPF INTERFACE
+                            _____________
- PDS is a TSO command processor which becomes an SPF dialog with any
  of several SPF interface modes.

-    From READY mode:
+    ________________
     PDS is invoked as a TSO command processor.  When the first
 ×   BROWSE, EDIT, ISPF, ISPMODE, MEMLIST or OUTLIST* subcommand or
 ×   the DSNAME or SYSOUT keyword of the CONTROL* subcommand is entered,
     PDS calls an SPF interface which invokes PDS recursively as an SPF
     dialog.

 ×   SPF services are directly invoked for each subsequent BROWSE, EDIT,
 ×   ISPF, ISPMODE or MEMLIST subcommand.

0    From SPF option 6 or the TSO subcommand of ISPF:
+    ________________________________________________
     PDS is invoked as a TSO command processor but no SPF services can
     be used.  This restriction may be removed in future versions of
     ISPF (according to an IBM response to a SHARE requirement).

0    From another TSO command processor:
+    ___________________________________
     PDS is invoked as a TSO command processor but if an SPF environment
     has been established by an earlier command processor, SPF services
     can not be used.

 ×   Otherwise, when the first BROWSE, EDIT, ISPF, ISPMODE, MEMLIST
 ×   or OUTLIST* subcommand or the DSNAME or SYSOUT keyword of the
 ×   CONTROL* subcommand is entered, PDS calls an SPF interface which
     invokes PDS recursively as an SPF dialog and SPF services are
 ×   directly invoked for each subsequent BROWSE, EDIT, ISPF, ISPMODE
 ×   or MEMLIST subcommand.

0    From the PDS panel in SPF:
+    __________________________
     PDS is invoked as an SPF dialog.  PDS locates and creates any
     required command processor control blocks and invokes SPF services
     directly.

0× *Note: the CONTROL and OUTCOPY subcommands do not used SPF services;
 ×  however, when either is first invoked, it attempts to establish an
    SPF dialog environment so that SPF services can be utilized by
    subsequent PDS subcommands.

1                            BACKGROUND EXECUTION
+                            ____________________
0
- Background TMP
+ ______________
0 Since PDS uses PUTLINE, PUTGET and GETLINE MACRO's for terminal
  communication, PDS may be used effectively in background mode for
  processing large data sets as in the following example JOB:

  //JOBNAME  JOB  ...
  //A       EXEC  PGM=IKJEFT01,DYNAMNBR=30
  //SYSTSPRT  DD  SYSOUT=*
  //SYSTSIN   DD  *
   PDS  'SYS1.SMPCDS'
   FIXPDS EXPANDDIR(100)
 × VERIFY :
   CHANGE  'SYS1.LINKLIB'
   IF A:Z RMODEANY THEN(MAP)
   END
  //

  When PDS is used in background mode, no prompting for yes or no
  replies is performed; instead, at each decision point, a yes response
  is assumed.

  Note that CONTROL NORECOVER is an initialization default for the
  execution of PDS in the background; if recovery is desired, CONTROL
  RECOVER must be explicitly specified.  PDS subcommands which
  specifically test for ABEND conditions (such as VERIFY with LOAD or
  IF with LOADERR) should not terminate the PDS session.

- TSSO support
+ ____________

  PDS also has support for the Time Sharing Subsystem Option or TSSO
  modification which can be obtained from the MVS SHARE tapes to perform
  TSO functions from a started task.

  When PDS is invoked, if a subcommand is entered (after any requested
  disposition and/or any volume parameter), PDS will execute that single
  subcommand and terminate.

  As an example of a subcommand entered on the command line, consider th
  following example input and system response:

     pds lib.pds60 shr attrib $$/
      PDS100I PDS -- VERSION 7.0
      PDS230I SPF STATS: VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT  M
      PDS230I  $$$DOC     60.00  83/09/19  83/09/19 14:54    20    20
      PDS230I  $$$INST    60.00  83/09/27  83/09/27 10:02   105   105
      PDS230I  $$$MODS    60.00  83/09/19  83/09/19 14:54    57    57
      READY
1                            ABBREVIATIONS
+                            _____________
- Subcommand name abbreviation:
+ _____________________________
  Subcommand names may be abbreviated to the first few characters of the
  subcommand name.  Subcommand names are scanned in the order of the
  output from the OPTIONS subcommand or from an invalid subcommand
  message and the first name match is used.  For example if the invalid
  subcommand, NN, is entered, the following system response would be
  received:

   PDS771E NN IS AN INVALID SUBCOMMAND; ENTER "HELP" OR "OPTIONS" FOR HE
   SUBCOMMANDS: ATTRIB   ALIAS    BROWSE   CHANGE   COMPARE  COMPRESS CO
                DISPLAY  DIRENTRY DELETE   DSNAME   DSPRINT  EDIT     EN
                EXEC     FIND     FIXPDS   FSE      HELP     HISTORY  IF
 ×              ISPF     ISPMODE  LIST     MAP      MEMBERS  MEMLIST  OP
                OUTCOPY  PATTERN  PRINTOFF RECALL   RENAME   RESTORE  RE
 ×              SUBMIT   TSO      TSOEDIT  TSOLIST  USAGE    VERIFY


  If the subcommand name A is entered, the ATTRIB subcommand will be
  given control; likewise, if AL is entered, the ALIAS subcommand
  will be given control.

  The set of defined subcommands changes when a sequential data set is
  being processed and in this case, the following system response would
  be received from the invalid subcommand, NN:

   PDS771E NN IS AN INVALID SUBCOMMAND; ENTER "HELP" OR "OPTIONS" FOR HE
   SUBCOMMANDS: BROWSE   CHANGE   CONTROL  DSNAME   DSPRINT  EDIT     EN
 ×              EXEC     FIND     FIXPDS   FSE      HELP     ISPF     IS
 ×              LIST     OPTIONS  PRINTOFF RECALL   REVIEW   SUBMIT   TS
 ×              TSOEDIT  TSOLIST  USAGE    VERIFY

- Keyword abbreviation:
+ _____________________
  Subcommand keywords may be abbreviated to the first characters
  which make the keyword unique.  For example, HELP LIST SYNTAX
  returns:
     SYNTAX -
          LIST  member NUM/SNUM/NONUM/LBLOCK/LDUMP/BLOCK/DUMP
                       OFFSET(Hx) MODULE(Partm)
                       SKIPREC(n) MAXIN(n) MAXOUT(n)
                       SKIPCOL(n) MAXLEN(n)

  The keyword LDUMP may be abbreviated to LD, LDU or LDUM; the keyword
  OFFSET may be abbreviated as the letter O or any other substring of
  the keyword; and SKIPCOL(42) may be abbreviated as SKIPC(42).
- Partial names:
+ ______________
  Several keyword operands allow partial names to be entered.  As an
  example, see MODULE(Partm) in the syntax of the LIST subcommand.

  Partial names are considered to match an actual name if they match
  for the number of characters entered.  For example, with the LIST
  subcommand, MODULE(ief) matches any name beginning IEF...; however,
  it would not match a name such as IEWL.
1                            SUBCOMMANDS
+                            ___________
- On the following pages, examples are provided for several of the PDS
  subcommands.  Note that for each example, command inputs are provided
  in lower-case and system messages are in upper-case.
0
- ALIAS
+ _____
0 The ALIAS subcommand assigns an alias name to a member.
- Example 1: an internal name, EXTRACTZ, is used as an alias name.
+ __________
  alias extract extractz
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  at extract/

   PDS020I EXTRACT ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS160I ALIASES FOR THIS MEMBER ARE: EXTRACTZ

   PDS020I EXTRACTZ ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000CDC
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 2: HECTOR is not an internal CSECT name.
+ __________
  alias extract hector
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000000  --  EXTRACT
0 Example 3: HENNA is not an internal CSECT name.
+ __________
  alias extractz henna
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
0 Example 4: an alias is assigned to a CLIST member.
+ __________
  al copyout copyou2
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  at copyo:copyo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS230I  COPYOU2 -A   01.01  83/07/29  83/07/29  7:21     7     7
   PDS066I MEMBER IS AN ALIAS FOR: COPYOUT
1
  ATTRIB
+ ______
0 The ATTRIB subcommand lists or updates the attributes of a member.
- Example 1: the attributes of a load module are listed.
+ __________
  at savesome
   PDS020I SAVESOME ATTRIBUTES ARE: OVLY, RENT, REUS, NOT EXEC
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RENT
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH REUS
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  7/01/82
0 Example 2: all changeable attributes are removed and others are assign
+ __________
  attrib * none dc auth
   PDS020I SAVESOME ATTRIBUTES ARE: OVLY, DC
   PDS021I APF AUTHORIZED
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  7/01/82
0 Example 3: the attributes of a group of CLIST members are listed.
+ __________
  at cop/
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS230I  COPYABL      SSI: 01200000
   PDS230I  COPYBBB
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS230I  COPY2   -A   01.02  82/10/04  83/03/08 11:02     8     8
   PDS066I MEMBER IS AN ALIAS FOR: COPY
   PDS230I  REFRCOPY     01.01  84/01/16  84/01/16  9:34    17    17
0 Example 4: a range of load module names are used.
+ __________
  at ext:ext

   PDS020I EXTRACT ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS160I ALIASES FOR THIS MEMBER ARE: EXTRACTZ

   PDS020I EXTRACTZ ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000CDC
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 5: a module with aliases is assigned an AMODE value.
+ __________
  attrib a11 amodeany
   PDS020I A11 ATTRIBUTES ARE: RENT, REUS, REFR
   PDS120I MVS/XA RESIDENCE MODE IS 24  -- ADDRESSING MODE IS ANY
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  000020  --      1K
   PDS106I LAST LINK-EDITED ON  7/01/83
   PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: A22
   PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: A33
   PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: R11
   PDS160I ALIASES FOR THIS MEMBER ARE: A22, A33, R11
1
  CHANGE
+ ______
0 The CHANGE or PDS subcommand switches PDS to a different data set.
- Example 1: PCF does not uniquely qualify a data set name.
+ __________
  change pcf
   IKJ58600I QUALIFIERS FOR DATA SET HABL.PCF ARE
   IKJ58600I ASM       OBJ
   IKJ58601A ENTER QUALIFIER - asm
   PDS220I //SYS00034  DD  DSN=HABL.PCF.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSCAT,
   PDS220I //  SPACE=(CYL,(5,1,10))                 /*FREE TRK=14,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
0 Example 2: a new prefix is specified for examining SHARE data.
+ __________
  tso profile prefix(cbt)
   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
  change file182
   PDS220I //SYS00035  DD  DSN=CBT.FILE182.PDS,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),VOL=SER=SYSRES,
   PDS220I //  SPACE=(TRK,(42,20,6))                /*FREE TRK=0,FREE DI

   PDS300A ENTER OPTION -- DSN=CBT.FILE182.PDS,VOL=SER=SYSRES
0 Example 3: switch to the previous data set.
+ __________
  change
   PDS220I //SYS00036  DD  DSN=HABL.PCF.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSCAT,
   PDS220I //  SPACE=(CYL,(5,1,10))                 /*FREE TRK=14,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
0 Example 4: switch to the other data set again.
+ __________
  change
   PDS220I //SYS00037  DD  DSN=CBT.FILE182.PDS,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),VOL=SER=SYSRES,
   PDS220I //  SPACE=(TRK,(42,20,6))                /*FREE TRK=0,FREE DI

   PDS300A ENTER OPTION -- DSN=CBT.FILE182.PDS,VOL=SER=SYSRES
0 Example 5: chose a new data set.
+ __________
  change 'sysx.proclib'
   IKJ56228I DATA SET SYSX.PROCLIB NOT IN CATALOG OR CATALOG CAN NOT BE
   PDS381A REENTER THE DATA SET NAME, VOLUME AND DISPOSITION:
  ?
   IKJ56760I NO INFORMATION AVAILABLE
   PDS381A REENTER THE DATA SET NAME, VOLUME AND DISPOSITION:
  'sys1.proclib'
   PDS220I //SYS00040  DD  DSN=SYS1.PROCLIB,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSALT,
   PDS220I //  SPACE=(CYL,(20,,45))                 /*FREE TRK=67,FREE D

   PDS300A ENTER OPTION -- DSN=SYS1.PROCLIB,VOL=SER=SYSALT
1
  CONTROL
+ _______
0 The CONTROL subcommand specifies PDS processing options.
- Example 1: first instance of CONTROL in a session.
+ __________
  control
   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: ALIASINFO, LKEDDATE, PROMPT, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

0 Example 2: alias information is turned off.
+ __________
  control noaliasinfo
   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, LKEDDATE, PROMPT, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  attrib copy:copyo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS230I  COPYBBB
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS230I  COPYOUT2-A   01.01  83/07/29  83/07/29  7:21     7     7
0 Note: alias information can be requested for an ATTRIB subcommand.
+ _____
  attrib copy:copyo aliasinfo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS160I ALIASES FOR THIS MEMBER ARE: COPY2, APFCOPX
   PDS230I  COPYBBB
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS160I ALIASES FOR THIS MEMBER ARE: COPYOUT2
   PDS230I  COPYOUT2-A   01.01  83/07/29  83/07/29  7:21     7     7
   PDS066I MEMBER IS AN ALIAS FOR: COPYOUT
0 Example 3: prompting is also turned off.
+ __________
  control noprompt
   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOPROMPT, LKEDDATE, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  ren copy copo group
   PDS161I MEMBERS TO BE RENAMED ARE: COPY, COPYBBB, COPYOUT, COPYOUT2,

   PDS090I COPY HAS BEEN RENAMED
   PDS090I COPYBBB HAS BEEN RENAMED
   PDS090I COPYOUT HAS BEEN RENAMED
   PDS090I COPYOUT2 HAS BEEN RENAMED
   PDS090I COPY2 HAS BEEN RENAMED
1
0 Example 4: prompting is returned to normal.
+ __________
  control prompt

   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, LKEDDATE, PROMPT, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  ren copo copy group
   PDS161I MEMBERS TO BE RENAMED ARE: COPO, COPOBBB, COPOOUT, COPOOUT2,

   PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?
  yes
   PDS090I COPO HAS BEEN RENAMED
   PDS090I COPOBBB HAS BEEN RENAMED
   PDS090I COPOOUT HAS BEEN RENAMED
   PDS090I COPOOUT2 HAS BEEN RENAMED
   PDS090I COPO2 HAS BEEN RENAMED
0 Example 5: an input buffering mode change is requested.
+ __________
  control double

   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, LKEDDATE, PROMPT, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

0 Example 6: an ABEND is requested.
+ __________
  control abend

   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, LKEDDATE, PROMPT, RECOVER
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

   PDS033I ABEND -- SYSTEM 0C1 FOLLOWS:
   PDS999E ABEND S0C1 U0000 AT +004B92 IN PROGRAM PDS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
0 Example 7: an ABEND is requested for PDS testing.
+ __________
  control norecover abend

   PDS100I PDS -- VERSION 7.0

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NORECOVER, LKEDDATE, PROMPT
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

   PDS033I ABEND -- SYSTEM 0C1 FOLLOWS:
   PDS999E ABEND S0C1 U0000 AT +004B92 IN PROGRAM PDS
   READY
  test
   TEST
1
0×Example 8: a SYSOUT copy is taken of a partial PDS session.
+×__________
 ×control sysout(x) form(dx00) dest(r131)
 ×
 × PDS100I PDS70 -- VERSION 7.0
 × PDS030I GLOBAL OPERANDS: NORECOVER, ALIASINFO, LKEDDATE, PROMPT
 × PDS030I GLOBAL OPERANDS: SYSOUT(X), FORM(DX00), DEST(R131)
 × PDS031I INPUT BUFFERING: MULTIPLE
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=DSNTEST
 ×printoff compar:comparep
 × PROCESSING HAS BEEN COMPLETED FOR DATASET:
 × HABL.LIB.CNTL
 ×  MEMBER:
 × COMPARE
 × PROCESSING HAS BEEN COMPLETED FOR DATASET:
 × HABL.LIB.CNTL
 ×  MEMBER:
 × COMPAREP
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=COMPAR:
 ×control nosysout
 × PDS080I OUTCOPY DCB IS CLOSED
 ×
 × PDS100I PDS70 -- VERSION 7.0
 × PDS030I GLOBAL OPERANDS: NORECOVER, ALIASINFO, LKEDDATE, PROMPT
 × PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, FORM(DX00), DEST(R131)
 × PDS031I INPUT BUFFERING: MULTIPLE
 × . . .
 ×Corresponding output in SYSOUT(X) for REMOTE(R131):
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=DSNTEST
 ×printoff compar:comparep
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=COMPAR:
 ×control nosysout
0×Example 9: a data set copy is taken of a partial PDS session.
+×__________
 ×control dsname(lib.cntl(dsntest1))
 ×
 × PDS100I PDS70 -- VERSION 7.0
 × PDS030I GLOBAL OPERANDS: NORECOVER, ALIASINFO, LKEDDATE, PROMPT
 × PDS030I GLOBAL OPERANDS: DSNAME(HABL.LIB.CNTL(DSNTEST1)) OLD
 × PDS031I INPUT BUFFERING: MULTIPLE
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=
 ×change lib.asm
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FB       80    6320   1X   405     174     4 CYL
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO004  GRP=
 ×control nodsn
 × PDS080I OUTCOPY DCB IS CLOSED
 × . . .
 ×Corresponding output in 'HABL.LIB.CNTL(DSNTEST1)':
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=
 ×change lib.asm
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FB       80    6320   1X   405     174     4 CYL
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO004  GRP=
 ×control nodsn
1
  DELETE
+ ______
0 The DELETE or SCRATCH subcommand deletes a member from the data set.
- Example 1: a member is deleted.
+ __________
  del apdsnew2
   PDS040I APDSNEW2 HAS BEEN DELETED
0 Example 2: a default member is deleted.
+ __________
  members clear
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS002I DEFAULT MEMBER IS CLEAR
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  yes
   PDS040I CLEAR HAS BEEN DELETED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 3: a default member is not deleted.
+ __________
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  members clearx
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS002I DEFAULT MEMBER IS CLEARX
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  no
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 4: a group of members is deleted.
+ __________
  del cmd/
   PDS162I MEMBERS TO BE DELETED ARE: AACMD, CMD, CMDSBINT, CMDSBSYS, CM
            CMDTSO

   PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I AACMD HAS BEEN DELETED
   PDS040I CMD HAS BEEN DELETED
   PDS040I CMDSBINT HAS BEEN DELETED
   PDS040I CMDSBSYS HAS BEEN DELETED
   PDS040I CMDSBTSO HAS BEEN DELETED
   PDS040I CMDTSO HAS BEEN DELETED
0 Example 5: PLUS2 and its associated members are deleted.
+ __________
  del plus2 alias
   PDS162I MEMBERS TO BE DELETED ARE: PLUS2

   PDS163I ASSOCIATED MEMBERS TO BE DELETED ARE: PLUS, PLUSXX, PLUSXY

   PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I PLUS2 HAS BEEN DELETED
   PDS040I PLUS HAS BEEN DELETED
   PDS040I PLUSXX HAS BEEN DELETED
   PDS040I PLUSXY HAS BEEN DELETED
1
  DIRENTRY
+ ________
0 The DIRENTRY subcommand dumps the directory entry of a member.
- Example 1: a minimal directory entry is dumped.
+ __________
  dir dumpa
   PDS143I DUMPA DIRECTORY ENTRY, LENGTH=12
            0000  C4E4D4D7 C1404040  00060800           *DUMPA   ....*
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEXT,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:    VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT
   PDS230I  DUMPA
0 Example 2: a directory entry with SSI information is dumped.
+ __________
  dir backbl1
   PDS143I BACKBL1 DIRECTORY ENTRY, LENGTH=16
            0000  C2C1C3D2 C2D3F140  00021E02 01200000  *BACKBL1 .......
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:    VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT
   PDS230I  BACKBL1       SSI: 01200000
0 Example 3: a directory entry with SPF statistics is dumped.
+ __________
  dir billing
   PDS143I BILLING DIRECTORY ENTRY, LENGTH= 42
            0000  C2C9D3D3 C9D5C740  0006060F 01000000  *BILLING .......
            0010  0083257F 0083257F  12200016 00160000  *.c.".c.".......
            0020  C8C1C2D3 40404040  4040               *HABL      *
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEXT,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  BILLING      01.00  83/09/14  83/09/14 12:20    22    22
0 Example 4: the directory entry of a main load module is dumped.
+ __________
  dir clear
   PDS143I CLEAR DIRECTORY ENTRY, LENGTH=40
            0000  C3D3C5C1 D9404040  000A102E 000A1500  *CLEAR   .......
            0010  00000000 03F20000  28002800 00009800  *.....2........q
            0020  00000080 106F0100                     *.....?..*
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I CLEAR ATTRIBUTES ARE: NONE
   PDS025I SSI INFORMATION: 0080106F
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  000028  --      1K
   PDS106I LAST LINK-EDITED ON  4/15/80
   PDS160I ALIASES FOR THIS MEMBER ARE: CLEARA, CLEARB
0 Example 5: the directory entry of an alias load member is dumped.
+ __________
  dir clearb
   PDS143I CLEARB DIRECTORY ENTRY, LENGTH=50
            0000  C3D3C5C1 D9C24040  000A10B3 000A1500  *CLEARB  .......
            0010  00000000 03F20000  28002800 00009800  *.....2........q
            0020  00000000 C3D3C5C1  D9404040 0080106F  *....CLEAR   ...
            0030  0100                                  *..*
1
  DISPLAY
+ _______
0 The DISPLAY subcommand lists member names from the data set directory.
- Example 1: the member name directory is listed.
+ __________
  d
   #           BILLING     DUMP        EXTRACT     FCBDATA     FCBOVER -
   FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 2: a range of member names is listed.
+ __________
  d a:fcbd
   BILLING     DUMP        EXTRACT     FCBDATA
0 Example 3: a range of member names is listed.
+ __________
  display a fcbd
   BILLING     DUMP        EXTRACT     FCBDATA
0 Example 4: member names containing FCB are listed.
+ __________
  display fcb/
   FCBDATA     FCBOVER -A  FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 5: display with no operands always lists the entire directory.
+ __________
  display
   #           BILLING     DUMP        EXTRACT     FCBDATA     FCBOVER -
   FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 6: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  display a/x'c2'
   ABEND       AMBLIST     ASMBLK      ASMBLK2
   C1E2D4FF8140C240-A  *ASM.a B *
   BA          BACKBL0 -A  BACKBL1     BATCHCHK    BATCHTMP    BATCHTSO
   BATCHTS2    BKIPOCAT    BKPAGE01    SHRLOADB    TESTFBA
   F1C2D2D7D3D7C1F0    *1BKPLPA0*
1
 ×EDIT
+ ____
0×The EDIT or SPFEDIT subcommand enters SPF edit for a member.
- Example 1: edit a member.
+ __________
 ×edit pdsjcl
   ---screen clear---

   EDIT --- HABL.LIB.PDS60(PDSJCL) - 60.00 -------------------- COLUMNS
   COMMAND ===> _                                               SCROLL =
   ****** ***************************** TOP OF DATA ********************
   000100 //ONE   EXEC  PGM=ASMBLR,REGION=2048K,
   000200 //             PARM=(NORLD,RENT,TERM,NOSTMT,'LINECOUNT(55)',
   000300 //             'XREF(SHORT),BUFSIZE(MAX),SYSPARM(ISPF)')
   000400 //*
   000500 //*          IF YOU DO NOT HAVE SPF, USE SYSPARM(NOSPF)
   000600 //*                 IF YOU HAVE SPF, USE SYSPARM(SPF)
   000700 //*    IF SPF AND ISPF WILL COEXIST, USE SYSPARM(SPF)
   000800 //*                IF YOU HAVE ISPF, USE SYSPARM(ISPF)
   000900 //*
   001000 //*
   001100 //SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR
   001200 //         DD  DSN=SYS1.MACLIB,DISP=SHR
   001300 //SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001400 //SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001500 //SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001600 //SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&
   001700 //         DCB=BLKSIZE=3120
   001800 //SYSPRINT DD  SYSOUT=*
   001900 //SYSTERM  DD  SYSOUT=*
   002000 //SYSIN    DD  DISP=SHR,DSN=THIS.PDS(PDS60)        <=== CHANGE
   002100 //LK1    EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)

- Note 1: to verify that a member does exist before invoking SPF, enter:
+ _______
 ×edit membernn old
0 Note 2: to verify that a member does not exist before invoking SPF, en
+ _______
 ×edit membernn new
0×Note 3: to use an initial edit macro, use the MACRO keyword as follows
+ _______
 ×edit membernn macro(macname)
0×Note 4: to obtain an ISPF member list from which you may select member
+ _______
 ×        to edit, enter:
 ×edit :
1
  EXEC or %
+ _________
0 The EXEC or % subcommand executes a CLIST containing PDS subcommands.
  When input is from a CLIST source, PDS assumes yes responses for
  situations that are normally prompted for (such as a group delete).
- Example 1: the following portion of a CLIST is used for NCP maintenanc
+ __________
  DELE JSJNCP1O
  DELE JSJNCPRO
  DELE SYSO:SYSO
  CHANGE 'SYS1.PRD.VTAMLST' &DISP VOL(&VOL.)
  DELE JSJNCP1O
  CHANGE 'SYS1.VTAMOBJ' &DISP VOL(&VOL.)
  DELE JSJNCP1
0 Note 1: To invoke this CLIST (NCPNEW) from a library allocated to
+ _______
          your SYSPROC FILE and pass it a positional parameter and a
          keyword parameter, you could enter the following while in
          the PDS command:
  %ncpnew old vol(tso002)
0 Note 2: To invoke this CLIST (NCPNEW) from a library named LIB.CLIST
+ _______
          and pass it a positional parameter and a keyword parameter, yo
          could enter the following while in the PDS command:
  exec lib(ncpnew) 'old vol(tso002)'
0×Note 3: At this time, PDS does not support the use of the EXEC or %
+ _______
 ×        subcommands from ISPMODE or MEMLIST.
1
  FIND
+ ____
0 The FIND subcommand displays portions of a member which contain a
  search string.  Optionally, the THEN or ELSE keywords may be entered
  to allow conditional execution of other subcommands.
- Example 1: search for STEPLIB DD statements.
+ __________
  find a:f '//steplib'

   ** FIND     BOOK
   000400 //STEPLIB  DD DSN=SYS1.PLILINK,DISP=SHR
   001900 //STEPLIB  DD DSN=HABL.LIB.LOAD,DISP=SHR
   003600 //STEPLIB  DD  DSN=SYS1.PLILINK,DISP=SHR
   PDS142I       41  LINES IN THIS MEMBER

   ** FIND     CALFORT
   001000 //STEPLIB   DD  DSN=HABL.LIB.LOAD,DISP=SHR
   PDS142I       15  LINES IN THIS MEMBER
0 Example 2: list the names of members containing STEPLIB DD statements.
+ __________
  find a:f '//steplib' then(members)

   ** FIND     BOOK     THEN MEMBERS

   ** FIND     CALFORT  THEN MEMBERS
0 Example 3: edit the members containing STEPLIB DD statements.
+ __________
  find a:f '//steplib' then(spf)

   -- SPF edit for member BOOK --

   -- SPF edit for member CALFORT --
0 Example 4: FIND with FIRST converts to LIST after the string is found.
+ __________
  f pds61 'ikjdfpb' first
   134830          IKJDFPB
   134840          TITLE 'P D S  --  PDS DCBD AND CVT DSECTS           0
   134850          PRINT NOGEN
   134860          DCBD  DSORG=PO
   134870          SPACE 5
   134880          CVT   DSECT=YES
   134890          SPACE 5
   134900 .NOGEN   END  PDS61
   PDS142I   13,490  LINES IN THIS MEMBER
0 Example 5: conditional delete of members without " JOB " in the member
+ __________
  find a:b  = job =  else(delete)

   ** FIND     ASMH2    ELSE DELETE
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  yes
   PDS040I ASMH2 HAS BEEN DELETED

   ** FIND     BLDLMEMB ELSE DELETE
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  no
1
0 Example 6: search a member of a CNTL data set.
+ __________
  f pdsxx 'size'
   000600 //             'XREF(SHORT),BUFSIZE(MAX),SYSPARM(ISPF)')
   PDS142I       26  LINES IN THIS MEMBER
0 Example 7: find a character string in a load module.
+ __________
  find pds /abcd/ ldump
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
     002430 2430  F6F7F8F9 C1C2C3C4  C5C6E2E8 E2C8C5D3  *6789ABCDEFSYSHE
     0037C0 37C0  4B4B4BC1 C2C3C4C5  C6C7C8C9 4B4B4B4B  *...ABCDEFGHI...

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 8: find a lower case string in a load module.
+ __________
  find pds /abcd/ lblock asis
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
   003780 3780 *=".abcdefghi.......jklmnopqr........stuvwxyz............

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 9: find a hexadecimal string (TPUT SVC call).
+ __________
  find pds x0a5dx ldump
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
     000C90 0C90  000C4110 C54CBF18  C5D60A5D 41100001  *....E<..EO.)...
     001540 1540  C55C47DE 00044110  A5644100 00250A5D  *E*......v......
     001550 1550  58107208 41101004  4100004F 0A5D4700  *...........×.).

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 10: find a character string in block output mode.
+ ___________
  f * /pds61/ block
   PDS140I BLOCK  RECORD         1   LENGTH    248   TTR 010308
   000000 0000 *.......0PDS61   ........ALIAS   ........ATTRIB  ........

   PDS140I BLOCK  RECORD         9   LENGTH 14,344   TTR 010401
   0004EA 0000 *.00..PDS61...........zH...H...H../....N...E....;×.......

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 11: find a character string in dump output mode.
+ ___________
  f * /pds61/ dump
   PDS140I DUMP   RECORD         1   LENGTH    248   TTR 010308
     000000 0000  20000000 000100F0  D7C4E2F6 F1404040  *.......0PDS61

   PDS140I DUMP   RECORD         9   LENGTH 14,344   TTR 010401
     0004EA 0000  47F0F00A 05D7C4E2  F6F190EC D00C189F  *.00..PDS61.....

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 12: find a hexadecimal string in a specific CSECT.
+ ___________
  find pds x413085eex module(list) ldump
   PDS141I AT 006DF8  CSECT LIST      LENGTH 000AD1
     006E38 0040  B3F84810 750C4B10  C58E4010 750C4130  *.8......E. ....
     006E48 0050  85EE07F3 5880B910  950076A9 41108A0E  *e..3....n..z...
     007198 03A0  83AA4140 00104130  85EE5800 7B585000  *c.. ....e...#.&

   PDS142I       21 BLOCKS IN THIS MEMBER
1
  FIXPDS
+ ______
0× The FIXPDS subcommand can modify a data set DCB, expand a PDS directo
 × reinitialize a data set, free unused space or mark all space as used.
-  Example 1: re-establish the DCB for a load library.
+  __________
  fixpds load blksize(13030)

   PDS220I //SYS00100  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=23440),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes

   PDS220I //SYS00101  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D
0 Example 2: add 70 directory blocks.
+ __________
  fix expand(70)
   PDS050I ASCEND WILL BE MOVED
   PDS050I BIO WILL BE MOVED

   PDS220I //SYS00101  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes
   PDS051I ASCEND IS BEING MOVED
   PDS051I BIO IS BEING MOVED

   PDS220I //SYS00102  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,115))               /*FREE TRK=38,FREE D
0 Example 3: discard all members and reinitialize the data set.
+ __________
  fixpds reset
   PDS451W ALL MEMBERS IN THIS PDS WILL BE LOST
   PDS850E ZAPASM2 IS BEING UPDATED BY HRJM

   PDS220I //SYS00121  DD  DSN=HABL.LIB.TCLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(17,8,25))                /*FREE TRK=2,FREE DI

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes

   PDS220I //SYS00122  DD  DSN=HABL.LIB.TCLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(17,8,25))                /*FREE TRK=16,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  verify
   PDS110I       0 LOGICAL RECORDS WERE INPUT
   PDS111I       0 PHYSICAL BLOCKS WERE INPUT
   PDS114I       0 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA SET
   PDS115I       0 MEMBERS WERE CHECKED
1
-×Example 4: recover members after the end of the data set (DS1LSTAR).
+ __________
 ×fix maxspace
 ×
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    U         0   19069   2X   180     176     2 CYL
 ×
 × PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
 ×yes
 ×
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    U         0   19069   2X   180       0     2 CYL
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  GRP=
 ×res xxxy 0 prompt
 ×
 × PDS101I DELETED MEMBER FOUND AT TTR: 000401
 ×
 × PDS805E INVALID LOAD MODULE DATA
 × PDS144I DATA LINE 1:
 × ...........g&0..&...&..hK..d..K.....K..%...-...0M......4q.......K....
 ×
 × PDS144I DATA LINE 2:
 × ...........Q ..........4...............:...D.......d...............'.
 ×
 × PDS144I DATA LINE 3:
 × .....................................................................
 ×
 × PDS144I DATA LINE 4:
 × .......h...y ..............@...................H.......Q.............
 ×
 × PDS144I DATA LINE 5:
 × ......K........%K........BK....%K....dj.Q .......fo...o...o...m...m.J
 ×
 ×
 × PDS101I DELETED MEMBER FOUND AT TTR: 000405
 ×
 × PDS164I CSECTS ARE: BLOKHEAD, IEFSD095
 ×
 × PDS106I LAST LINK-EDITED ON  3/24/79
 ×
 × PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
 ×n
 ×
 × PDS101I DELETED MEMBER FOUND AT TTR: 000419
 ×
 × PDS164I CSECTS ARE: MAIN, INIT, YEARHD, MPAGE, DPAGE, DAY, SNOOPS, JA
 ×          MARCH, APRIL, MAY, JUNE, JULY, AUG, SEPT, OCTO, NOV, DEC, MO
 ×          JDATE, IHNECOMH
 ×
 × PDS106I LAST LINK-EDITED ON 12/23/81
 ×
 × PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
 ×y
 × PDS091I XXXY HAS BEEN RESTORED
 × PDS103I ENTRY POINT AT 000000  --  MAIN
 × PDS104I MODULE LENGTH  00E8D0  --     59K
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  GRP=XXXY
1
-×Example 5: release to an extent boundary.
+ __________
 ×fix relextent
 ×
 ×
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FB       80    9040   2X   225     108     5 CYL
 ×
 × PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
 ×y
 ×
 ×     75 TRACKS RELEASED FROM DATA SET HABL.LIB.PDS70
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FB       80    9040   1X   150      33     5 CYL
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS70,VOL=SER=TSO004  GRP=XXXY
-×Example 6: release a part of the unused space to a cylinder boundary.
+ __________
 ×fix relsave(89)
 ×
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    U         0   19069   3X   210     206     2 CYL
 ×
 × PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
 ×y
 ×
 ×    105 TRACKS RELEASED FROM DATA SET HABL.LIB.TEST1
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    U         0   19069   1X   105     101     2 CYL
 ×
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  GRP=XXX:XX
-×Example 7: release all unused space from a sequential data set.
+ __________
 ×fix release
 ×
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FBA     133    3990   1X    10       8    50 TRK
 ×
 × PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
 ×y
 ×
 ×      8 TRACKS RELEASED FROM DATA SET HABL.SYSOUT2.DATA
 × PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 × PDS200I SHR  3380    FBA     133    3990   1X     2       0    50 TRK
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.SYSOUT2.DATA,VOL=SER=TSO004
1
  HELP
+ ____
-×Example 1: List HELP information for PDS subcommands.
+ __________
  help
    The PDS command has the following subcommands:
      %cmem operands  - execute PDS subcommands from the CLIST CMEM
      ATTRIB xx       - list attributes of member or module XX
      ATTRIB xx reus  - assign the reusable linkage attribute to module
      ALIAS xx yy     - add an alias to member XX called YY
      BROWSE xx       - browse member XX with SPF
      CHANGE zzz      - switch to the data set ZZZ
      COMPARE xxx yyy - compare members XXX and YYY with TSO COMPARE
      COMPRESS        - compress the data set
      CONTROL noprom  - do not prompt for yes or no inputs
      DISPLAY rr tt   - display member names in the range RR thru TT9999
      DIRENTRY xx     - dump the directory entry for member XX
      DELETE xx       - delete member XX
      DSNAME tso      - display the current allocation in TSO format
      DSPRINT xx      - print a hardcopy of member XX with TSO DSPRINT
 ×    EDIT xx         - edit member XX with SPF
      END             - terminate the PDS command
      EXEC ccc        - execute PDS subcommands from the CLIST CCC
      FIND xx =fff=   - list occurrences of the string FFF in member XX
      FIXPDS exp(30)  - add 30 directory blocks to the data set
      FSE xx          - edit member XX with TSO FSE
      HELP sss        - list the HELP entry for subcommand SSS with TSO
      HISTORY xx      - list HISTORY data for module XX
      IF mvs/ rent    - locate the ..MVS.. modules marked as reentrant
      ISPF 3.3        - invoke the ISPF primary panel with option 3.3
      ISPMODE         - enter ISPF session display mode
      LIST xx         - display member XX
      MAP xx short    - map the CSECT structure of module XX in short fo
      MEMBERS         - display the current member group
 ×    MEMLIST         - enter ISPF member list mode
      OPTIONS         - display the menu of PDS subcommands
      OUTCOPY xx      - output an IEBCOPY select statement for member XX
      PATTERN pp dd   - display all member names containing PP and DD
      PRINTOFF xx     - print a hardcopy of member XX with TSO PRINTOFF
      RECALL          - display or reenter the previous subcommand
      RENAME xx yy    - rename member XX to YY
      RESTORE xx 1c0a - resurrect member XX at TTR 1C0A
      REVIEW xx       - browse member XX with TSO REVIEW
      SUBMIT xx       - submit JCL member XX with TSO SUBMIT
      TSO yy z1 z2    - invoke the TSO command YY using operands Z1 and
 ×    TSOEDIT xx      - edit member XX with TSO EDIT
      TSOLIST xx      - display member XX with TSO LIST
      USAGE           - list directory and data set statistics
      VERIFY          - validity check the data set

      Additional HELP only entries for PDS:
      ABEND           - explains ABEND processing
      ATTN            - explains attention handling
      DEFINE          - explains member and data set terminology
      DIALOG          - explains the relationship to SPF edit and browse
 ×    LIMITS          - documents several PDS limitations
      GROUP           - explains member groups and name forms allowed
      UPDATE          - explains data set protection and SHR updates
      H MS MS(pds999) - explains the PDS999E program message
1
0 Example 2: request the HELP entry for PDS HELP.
+ __________
  help hel
   The HELP subcommand lists data from the HELP data set.  The TSO
   HELP command is used; if the HELP subcommand is entered without
   operands, a list of valid subcommands is displayed.

  SYNTAX -
       HELP  subcommand FUNCTION SYNTAX OPERAND/OPERAND(k)

   ALIASES  - H, HE, HEL, HELP
   DEFAULTS - none.
   REQUIRED - none.

  OPERANDS -
   subcommand  - optional, specifies the name of a subcommand (or the
                 alias name of a subcommand) for which HELP is to be
                 displayed.  if the subcommand name is omitted, a list
                 of valid subcommands is displayed.
    FUNCTION   - specifies that function information for the subcommand
                 is to be displayed.
    SYNTAX     - specifies that syntax information for the subcommand
                 is to be displayed.
    OPERAND(k) - specifies that information for the keyword identified
                 in the (k) operand is to be displayed.  if the (k)
                 operand is omitted, information on all operands of the
                 subcommand will be displayed.
0 Example 3: request HELP syntax information only.
+ __________
  help hel s
  SYNTAX -
       HELP  subcommand FUNCTION SYNTAX OPERAND/OPERAND(k)

   ALIASES  - H, HE, HEL, HELP
   DEFAULTS - none.
   REQUIRED - none.
0 Example 4: request only selected operands.
+ __________
  help hel o(oper,funct)
    FUNCTION   - specifies that function information for the subcommand
                 is to be displayed.
    OPERAND(k) - specifies that information for the keyword identified
                 in the (k) operand is to be displayed.  if the (k)
                 operand is omitted, information on all operands of the
                 subcommand will be displayed.
0 Example 5: explain two messages received during an ATTRIB subcommand.
+ __________
  .?
    PDS720E NOT APF AUTHORIZED, THE APF DATA IS MISSING
     The APF data for this module is not present and the module is
     assumed not to be authorized.

    PDS722E THE APF DATA CAN NOT BE CHANGED
     Due to missing or invalid APF data, the APF value was not modified.
     A module linked with an old linkage editor might not have APF data.
0 Example 6: explain two messages received during an ATTRIB subcommand.
+ __________
  help msg msg(pds722,pds720)
   --same output as the previous example--
1
  HISTORY
+ _______
0 The HISTORY subcommand displays the last linkage-edit date for a
  module and lists any CSECT IDR data assigned to a load module.
- Example 1: the history of a load module is listed.
+ __________
  history igc0009c
   PDS060I TRANSLATOR HISTORY BY CSECT -
   IKTVTPUT  9/19/80   5741SC103   V02 M02       9/19/80   C'PLS2258'  V
   IKTVTGET  8/28/80   5741SC103   V02 M02       8/28/80   C'PLS2253'  V
   IGG09302  8/25/80   5741SC103   V02 M02
   IKTXMTPT  8/20/80   5741SC103   V02 M02       8/20/80   C'PLS1958'  V
   IKTASTPT  8/19/80   5741SC103   V02 M02       8/19/80   C'PLS1900'  V
   IKT0009C  7/23/80   5741SC103   V02 M02       7/23/80   C'PLS1919'  V
   IKT93EST  2/02/80   5741SC103   V02 M02       2/02/80   C'PLS1501'  V
   IGC0009C 12/19/79   5741SC103   V02 M02
   IGG09301 12/03/79   5741SC103   V02 M02
   IGG09300  3/23/79   5741SC103   V02 M02
   IGG09303  3/05/79   5741SC103   V02 M02
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   IKTASTPT      2/09/84    HABL
   IKTASTPT      2/09/84    HRJM
   IKTASTPT      2/08/84    HABL
   PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -
   IGG09302      1/21/81    UZ33259
   IKTVTPUT      9/19/80    RSI02630761
   IKTVTGET      8/28/80    RSI02410976
   IKTXMTPT      8/20/80    RSI02330596
   IKTASTPT      8/19/80    RSI02320501
   IKT0009C      7/23/80    RSI02040654
   IGG09301      6/11/80    UZ29303
   IGC0009C      6/11/80    UZ29589
   IKT93EST      2/02/80    RSI00330073
   IGG09300      1/17/80    UZ23355
   IGG09303      1/17/80    UZ25385
   PDS064I LAST LINK-EDITED ON  9/22/82 BY LKED 5752SC104 V03 M08
0 Example 2: the PTF names and the linkage-editor name are requested.
+ __________
  hist igc0009c sysmod(uz) lked
   PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -
   IGG09302      1/21/81    UZ33259
   IGG09301      6/11/80    UZ29303
   IGC0009C      6/11/80    UZ29589
   IGG09300      1/17/80    UZ23355
   IGG09303      1/17/80    UZ25385
   PDS064I LAST LINK-EDITED ON  9/22/82 BY LKED 5752SC104 V03 M08
0 Example 3: all modules ZAPPED by userid HABL are requested.
+ __________
  hist : zap(habl)

   ** HISTORY  EXTRACT
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   EXTRACT       2/09/84    HABL

   ** HISTORY  IGC0009C
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   IKTASTPT      2/09/84    HABL
   IKTASTPT      2/08/84    HABL
1
  IF
+ __
0 The IF subcommand searches for members meeting defined conditions.
- Example 1: any members in use in an SPF edit session.
+ __________
  if : spfedit
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  ZAPASM2      01.14  84/01/13  84/01/16  9:30    98    47
0 Example 2: any members with errors on a LOAD.
+ __________
  if : loaderr
   IEA703I 106- E HABL     SPFACCT  MODULE ACCESSED EXTEND

   PDS020I EXTEND ATTRIBUTES ARE: NONE
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  001D08  --      8K
   PDS106I LAST LINK-EDITED ON 11/29/82
0 Example 3: the names of any overlay members with more than 100,000 cha
+ __________
  if : overlay above(100000) then(attrib)

   PDS020I PSCRIPT ATTRIBUTES ARE: OVERLAY
   PDS102I ENTRY POINT AT 000080
   PDS104I MODULE LENGTH  02E260  --    185K
   PDS106I LAST LINK-EDITED ON  8/19/79
0 Example 4: the history of any modules ZAPPED by userid HHHH.
+ __________
  if : zap(hhhh) then(hist)

   ** IF       EXTRACT  THEN HISTORY
   PDS060I TRANSLATOR HISTORY BY CSECT -
   EXTRACT   4/18/74   360SAS037   V21 M00
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   EXTRACT       2/09/84    HABL
   EXTRACT       2/09/84    HHHH
   EXTRACT       6/15/76    NO IDENT
   PDS064I LAST LINK-EDITED ON  6/17/76 BY LKED 360SED521 V21 M00
0 Example 5: the names of any orphan members.
+ __________
  if : orphan then(members)

   ** IF       SAVESOK  THEN MEMBERS

   ** IF       SS1      THEN MEMBERS
0 Example 6: a map of members in the group which contain a CSECT named S
+ __________
  if ten/ module(ssp) then(map)

   ** IF       EXTEND   THEN MAP
   SSP95DIR  000000  001D08

   PDS103I ENTRY POINT AT 000000  --  SSP95DIR
   PDS104I MODULE LENGTH  001D08  --      8K
1
0 Example 7: the names of any members with I/O errors.
+ __________
  if : ioerr then(members)

   ** IF       ERROR1   THEN MEMBERS

   ** IF       ERROR2   THEN MEMBERS
0 Example 8: the attributes of members not saved by userid HABL.
+ __________
  if $:a notuser(habl)
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  $ARSPF       25.01  81/06/20  81/12/21  9:16    28    28
   PDS230I  $BKSPF       25.01  81/06/20  81/12/21  9:17    28    28
   PDS230I  ##
   PDS230I  ADDPASS      01.10  84/01/13  84/01/16 11:30    28    28
0 Example 9: the attributes of members changed between Jan. 10 and Feb.
+ __________
  if a:f changed(84010:84042)
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  ABEND        01.04  83/11/24  84/01/24  9:49     3     3
   PDS230I  CATCLEAN     01.02  82/05/15  84/02/11 12:55    17    17
   PDS230I  DSFRENAM     01.02  84/02/08  84/02/09 10:52    14    14
   PDS230I  DUMPNCP      01.04  84/01/18  84/01/24 10:59     9     8
   PDS230I  DYNASCR      01.07  84/01/24  84/01/10  9:33     9     8
0 Example 10: IEBCOPY statements are requested for non-amode 24 members.
+ ___________
  if : amode24 else(outcopy)

   ** IF       A11      ELSE OUTCOPY
 ×         COPY OUTDD=OUTPUT,INDD=XALOAD
 ×         S M=A11 ,A11))

   ** IF       A22      ELSE OUTCOPY
 ×         S M=A22 ,A22))

   ** IF       R11      ELSE OUTCOPY
 ×         S M=R11 ,R11))
0 Example 11: a combination of conditions is searched for.
+ ___________
  if : apferr lkederr rmodeany created(84042) then(attr)

   PDS020I TESTONE ATTRIBUTES ARE: OVERLAY
   PDS120I MVS/XA RESIDENCE MODE IS ANY -- ADDRESSING MODE IS ANY
   PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE ANY ARE INCOMPATIBLE
   PDS721E NOT APF AUTHORIZED, THE APF DATA IS THE WRONG LENGTH
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RMODE ANY
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH AMODE ANY
   PDS102I ENTRY POINT AT 000080
   PDS104I MODULE LENGTH  02E260  --    185K
   PDS106I LAST LINK-EDITED ON  2/11/84
1
 ×ISPMODE
+ _______
0×The ISPMODE subcommand provides a full screen SPF session display mode
 ×Subcommands entered and the outputs from internal PDS subcommands are
 ×maintained in a session log.  ISPMODE processing is further extended
 ×to member list processing with the MEMLIST subcommand.
 ×
 ×If a PDS subcommand produces a output checkpoint (by default 250 lines
 ×of data), a checkpoint panel will be displayed to allow the user to
 ×continue or terminate the subcommand.  If the subcommand is terminated
 ×or completes normally, control is returned to the ISPMODE panel.
 ×
 ×SPF commands (including PF keys), PDS subcommands and special numeric
 ×control codes for ISPMODE may be entered to control display processing
 ×
 ×MEMLIST and ISPMODE dialog table handling is primarily documented in
 ×the SPF help panels and in the PDS help member; however, the following
 ×should be noted:
 ×  1.  Only 79 characters of an output line are retained or displayed.
 ×  2.  ISPF commands RFIND, RCHANGE, LEFT and RIGHT are not supported.
 ×  3.  PDS subcommands END, HELP and TSO are intercepted by SPF; to use
 ×      these as PDS subcommands, use an alias such as EN, HEL or TS.
 ×  4.  CLIST processing is not supported.
 ×  5.  Output is displayed at the completion of a subcommand or at a
 ×      checkpoint, so output from a subcommand cannot be monitored as
 ×      it is produced.  Thus, if PDS is in a CPU loop, the screen will
 ×      lock up until an attention is entered.  At that time, the
 ×      generated output will be displayed.
0×Example 1: enter ISPMODE with 500 lines between checkpoints.
+ __________
 ×ispmode chkmax(500)

 ×----------------------  ISPMODE Session Display  ------ LINE 00001 COL
 ×COMMAND ===> _                                               SCROLL ==
 ×   Enter an ISPF command, a PDS subcommand or a special control code:
 ×             1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
 ×             2 Clear log           4 Clear above
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=$$$PROSE  ------------------
 ×PDS100I PDS70 -- VERSION 7.0
 ×
 ×PDS200I DISP UNIT     RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
 ×PDS200I SHR  3380     FB       80    9040   4X   150      28     1 CYL
 ×
 ×PDS300A ENTER OPTION -- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=$$$PRO
 ×******************************* BOTTOM OF DATA ***********************
0×Example 2: list a member with more than 500 lines.
+ __________
 ×COMMAND ===> list pdshelp_

 ×--------------------------  Checkpoint Option  -------- LINE 00007 COL
 ×COMMAND ===>                                                 SCROLL ==
 ×   Checkpoint! Enter an ISPF command or special control code 0:
 ×             0 Continue the subcommand
 ×           end Terminate the subcommand
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=PDSHELP  -------------------
 ×list  pdshelp
 ×000100 )F FUNCTION -
 ×000200  The PDS45678 command allows a TSO user to access and manipulat
 ×000300  directory and selected members of a PDS or partitioned data se
 ×000400 ....
1
  LIST
+ ____
0 The LIST subcommand displays data from a member.
- Example 1: a load module is listed in default LDUMP format.
+ __________
  list iefbr15
   PDS141I AT 000000  CSECT IEFBR14   LENGTH 000004
     000000 0000  07FF07FE                              *....*

   PDS142I        5 BLOCKS IN THIS MEMBER
0 Example 2: a load module is listed starting at hexadecimal offset 0470
+ __________
  list units offset(470) lblock
   PDS141I AT 000000  CSECT UNITS     LENGTH 0004D6
   000470 0470 *IKJPUTL ..q.J...............&0........q.................
   0004B0 04B0 *........EXEC    ...Q      (NO MASK)IKJ*

   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
   0004D8 0000 *...... .....-....NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 3: a load module is listed starting at hexadecimal offset 0470
+ __________
  list units offset(470) ldump
   PDS141I AT 000000  CSECT UNITS     LENGTH 0004D6
     000470 0470  C9D2D1D7 E4E3D340  0A0698E1 D10007FE  *IKJPUTL ..q.J..
     000480 0480  1BFF181D 5800C020  58D0D004 50F0D010  *............&0.
     000490 0490  41101000 0A0A98EC  D00C07FE 12000000  *......q........
     0004A0 04A0  00000001 00000000  30000000 00000001  *...............
     0004B0 04B0  00000000 00000000  C5E7C5C3 40404040  *........EXEC
     0004C0 04C0  000004D8 40404040  40404DD5 D640D4C1  *...Q      (NO M
     0004D0 04D0  E2D25DC9 D2D1                         *SK)IKJ*

   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
     0004D8 0000  00170010 00064000  00060008 6000000A  *...... .....-..
     0004E8 0010  04D5C1D4 C5E200                       *.NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 4: module names beginning UNITSP.. are listed.
+ __________
  list units module(unitsp) ldump
   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
     0004D8 0000  00170010 00064000  00060008 6000000A  *...... .....-..
     0004E8 0010  04D5C1D4 C5E200                       *.NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 5: BLOCK format shows all module records.
+ __________
  l iefbr15 block skiprec(2)
   PDS140I BLOCK  RECORD         3   LENGTH     18   TTR 000B1A
   000123 0000  *..b360SED521 .....*

   PDS140I BLOCK  RECORD         4   LENGTH     20   TTR 000B1B
   000135 0000  *............ .......*

   PDS140I BLOCK  RECORD         5   LENGTH      8   TTR 000B1C
   000149 0000  *.......*

   PDS142I        5 BLOCKS IN THIS MEMBER
1
0 Example 6: DUMP format shows all module records.
+ __________
  l iefbr15 dump skiprec(2)
   PDS140I DUMP   RECORD         3   LENGTH     18   TTR 000B1A
     000123 0000  801182F3 F6F0E2C5  C4F5F2F1 40210878  *..b360SED521 ..
     000133 0010  218F                                  *..*

   PDS140I DUMP   RECORD         4   LENGTH     20   TTR 000B1B
     000135 0000  0D000000 00040000  06000000 40000008  *............ ..
     000145 0010  00020008                              *....*

   PDS140I DUMP   RECORD         5   LENGTH      8   TTR 000B1C
     000149 0000  07FF07FE 20104740                     *....... *

   PDS142I        5 BLOCKS IN THIS MEMBER
0 Example 7: the first few lines of several members are displayed.
+ __________
  list print:print maxin(3) num

   ** LIST     PRINTALL
      200 //PRTDUMP EXEC PGM=IMDPRDMP,PARM='0,T',REGION=200K,TIME=20
      300 //TAPE  DD   DSN=DUMPTAPE,VOL=SER=DE4205,DISP=(OLD,KEEP),UNIT=
      400 // LABEL=(,NL)

   ** LIST     PRINTDOC
   000100 //HABLP  JOB (01,02,142,ABL,0005),'LELAND - IPODOC     ',
   000200 //           MSGCLASS=A,NOTIFY=HABL
   000300 //ONEN  EXEC  PGM=IEBGENER

   ** LIST     PRINTEST
       10 //A  EXEC  PGM=IEBGENER
       20 //SYSPRINT DD SYSOUT=A
       30 //SYSUT2   DD SYSOUT=S,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)
0 Example 8: a load module's data is summarized.
+ __________
  list extract ldump maxlen(16) maxout(5)
   PDS141I AT 000000  CSECT EXTRACT   LENGTH 000DD4
     000000 0000  47F0F00C 07C5E7E3  D9C1C3E3 90ECD00C  *.00..EXTRACT...

   PDS141I AT 000CDC  CSECT EXTRACT   ENTRY Z
     000CDC 0CDC  47F0F006 01E990EC  D00C184F 50D040AC  *.00..Z.....×&.

   PDS141I AT 000DD8  CSECT RCON      LENGTH 00090A
     000DD8 0000  47F0F00C 06D9C3D6  D5404040 90ECD00C  *.00..RCON   ...

   PDS141I AT 000E08  CSECT RCON      ENTRY RECFM
     000E08 0030  47F0F00C 06D9C5C3  C6D44040 90ECD00C  *.00..RECFM  ...

   PDS141I AT 000E30  CSECT RCON      ENTRY P
     000E30 0058  47F0F00C 06D74040  40404040 90ECD00C  *.00..P      ...
1
  MAP
+ ___
0 The MAP subcommand lists the CSECT structure of a load module.
- Example 1: a load module is mapped.
+ __________
  map igc0009c
   IKTASTPT  000000  00080C
   IKTAY8    000810  000B48
                                                       IKTAY81   000828
                                                       IKTAY82   00082E
                                                       IKTAY83   000834
   IKT93EST  001358  0003AE
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0
   IKTXMTPT  0027B0  0003EC
                                                       IKTXMFRR  0027C8
   IKT0009C  002BA0  000314
   IGC0009C  002EB8  000188
   IGG09300  003040  000660
   IGG09301  0036A0  00049C
   IGG09302  003B40  0005F4
   IGG09303  004138  000194

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 2: the entry point and size of a load module is mapped.
+ __________
  map igc0009c entry
   IKTASTPT  000000  00080C

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 3: a load module is mapped in short form.
+ __________
  map igc0009c short
   IKTASTPT  000000  00080C
   IKTAY8    000810  000B48
   IKT93EST  001358  0003AE
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0
   IKTXMTPT  0027B0  0003EC
   IKT0009C  002BA0  000314
   IGC0009C  002EB8  000188
   IGG09300  003040  000660
   IGG09301  0036A0  00049C
   IGG09302  003B40  0005F4
   IGG09303  004138  000194

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 4: external names beginning IKTVT are mapped.
+ __________
  map igc0009c module(iktvt)
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0

   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0042D0  --     17K
1
0 Example 5: all members are searched for any modules with external
+ __________
             names beginning SSP.
  map : module(ssp)

   ** MAP      EXTEND
   SSP95DIR  000000  001D08

   PDS103I ENTRY POINT AT 000000  --  SSP95DIR
   PDS104I MODULE LENGTH  001D08  --      8K
0 Example 6: a member with MVS/XA load module attributes is mapped.
+ __________
  map amodeany
   AMODENON  000000  000006
   AMODE24   000008  000006
   AMODE31   000010  000006  RMODE 24  AMODE 31
   AMODEANY  000018  000006  RMODE 24  AMODE ANY

   PDS103I ENTRY POINT AT 000018  --  AMODEANY
   PDS104I MODULE LENGTH  000020  --      1K
0 Example 7: an alias member is mapped.
+ __________
  map extractz
   EXTRACT   000000  000DD4
                                                       EXTRACTZ  000CDC
   RCON      000DD8  00090A
                                                       RECFM     000E08
                                                       P         000E30
                                                       RR        000E58
                                                       RX        000E80
                                                       SI        000EA8
                                                       SS        000ED0
   CONVRT    0016E8  002672
                                                       HEX       001718
                                                       LITS      001740
                                                       BUILD     001768
                                                       PGMHDR    001790
                                                       CLIST     0017B8
                                                       SETHDR    0017E0
                                                       DISP      001808
                                                       SUMARY    001830
   SYNTAX    003D60  0027E0

   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
   PDS104I MODULE LENGTH  006540  --     26K
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
1
  MEMBERS
+ _______
0 The MEMBERS subcommand lists member names from the data set directory.
- Example 1: a range of members is listed.
+ __________
  members a:co
   ASCEND      BIO         BIOPL1F -A  COMP
0 Example 2: the default member group is listed.
+ __________
  members *
   ASCEND      BIO         BIOPL1F -A  COMP
0 Example 3: the default member group is listed.
+ __________
  members
   ASCEND      BIO         BIOPL1F -A  COMP
0 Example 4: members with names containing pattern characters are listed
+ __________
  members a0/c
   CSCGA03D    CSCSA03D    CSCZA03D
0 Example 5: note -- the order of specification is insignificant.
+ __________
  members c/a0
  CSCGA03D    CSCSA03D    CSCZA03D

0 Example 6: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  members a/x'c2'
   ABEND       AMBLIST     ASMBLK      ASMBLK2
   C1E2D4FF8140C240-A  *ASM.a B *
   BA          BACKBL0 -A  BACKBL1     BATCHCHK    BATCHTMP    BATCHTSO
   BATCHTS2    BKIPOCAT    BKPAGE01    SHRLOADB    TESTFBA
   F1C2D2D7D3D7C1F0    *1BKPLPA0*
1
 ×MEMLIST
+ _______
0×The MEMLIST subcommand provides a full screen SPF member list display
 ×manipulation capability by extending ISPMODE concepts.  Subcommands en
 ×and their associated outputs are maintained in the ISPMODE session log
 ×
 ×The current panel display state is called the display mode; the possib
 ×display modes are defined as follows:
 ×  1.  Non-dialog   - PDS output as before ISPMODE and MEMLIST.
 ×  2.  ISPMODE      - session log display.
 ×  3.  MEMLIST      - any of the four member list displays.
 ×  4.  View         - ISPMODE display for PDS subcommand outputs.
 ×  5.  Line command - ISPMODE display for line command outputs.
 ×  6.  Checkpoint   - ISPMODE display for PDS outputs after each 250
 ×                     (by default) output lines from a single subcomman
 ×
 ×The ISPF END command should be used to terminate the current display
 ×mode as follows:
 ×  1.  Non-dialog   - terminates PDS.
 ×  2.  ISPMODE      - terminates PDS if PDS was entered as a dialog;
 ×                     otherwise, reverts to non-dialog mode.
 ×  3.  MEMLIST      - reverts to ISPMODE.
 ×  4.  View         - reverts to MEMLIST.
 ×  5.  Line command - reverts to MEMLIST.
 ×  6.  Checkpoint   - reverts to view mode, line command mode or
 ×                     ISPMODE as appropriate.
 ×
 ×Depending on the display mode, different numeric panel control codes
 ×are available to control dialog processing:
 ×  0 - Continue the subcommand.
 ×  1 - Suspend ISPMODE (this also deletes any current member list).
 ×  2 - Clear the ISPMODE log.
 ×  3 - Clear the ISPMODE log below the current top line displayed.
 ×  4 - Clear the ISPMODE log above the current top line displayed.
 ×  5 - Cross-check alias members using the current member list.
 ×  6 - Clear any current member list and rebuild it with all members.
 ×  7 - Refresh the member list by updating statistics and adding member
 ×  8 - Switch to view mode and suspend the member list.
 ×  9 - Switch to an alternate member list display.
0×Example 1: enter MEMLIST with all members whose names contain PDS70.
+ __________
 ×memlist pds70/

 ×--------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
 ×COMMAND ===> _                                               SCROLL ==
 ×   Enter an ISPF command, a PDS subcommand or a special control code:
 ×             1 Suspend ISPMODE     6 MEMLIST reset       8 View mode
 ×             5 Alias check         7 MEMLIST refresh     9 Display 2
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=PDS70/  --------------------
 ×CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
 ×     PDS70PNS           01.21    84/09/04  84/11/07 14:27    79    37
 ×     PDS70PN2           70.00    84/12/03  84/12/03 15:09    17    17
 ×     PDS70PN3           70.00    84/12/03  84/12/03 15:09    16    16
 ×     PDS70PN4           70.00    84/12/03  84/12/03 15:09    16    16
 ×     PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
 ×     PDS70PN6           01.03    84/10/30  84/12/11  9:54    20    20
 ×     PDS70PN7           70.01    84/12/03  84/12/11  9:54    20    20
 ×     PDS70PN8           01.25    84/09/05  84/12/11  9:54    20    21
 ×******************************* BOTTOM OF DATA ***********************
1
 ×Example 2: enter multiple line commands.
+ __________

 ×--------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
 ×COMMAND ===>                                                 SCROLL ==
 ×   Enter an ISPF command, a PDS subcommand or a special control code:
 ×             1 Suspend ISPMODE     6 MEMLIST reset       8 View mode
 ×             5 Alias check         7 MEMLIST refresh     9 Display 2
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=PDS70/  --------------------
 ×CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
 ×     PDS70PN0 *NEWNAME  01.21    84/09/04  84/11/07 14:27    79    37
 ×del  PDS70PN2           70.00    84/12/03  84/12/03 15:09    17    17
 ×x    PDS70PN3           70.00    84/12/03  84/12/03 15:09    16    16
 ×alia PDS70PN4 pdsx      70.00    84/12/03  84/12/03 15:09    16    16
 ×     PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
 ×ren  PDS70PN6 pds70pny  01.03    84/10/30  84/12/11  9:54    20    20
 ×l    PDS70PN7           70.01    84/12/03  84/12/11  9:54    20    20
 ×yyy_ PDS70PN8           01.25    84/09/05  84/12/11  9:54    20    21
 ×******************************* BOTTOM OF DATA ***********************
-×Example 3: control is received in line command mode from the list line
+ __________

 ×-------------------------  Line Command Output  ------- LINE 00047 COL
 ×COMMAND ===> end_                                            SCROLL ==
 ×   Enter an ISPF command or special control code 1:
 ×             1 Suspend ISPMODE
 ×           end Return to MEMLIST
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=PDS70/  --------------------
 ×LIST     PDS70PN7
 ×)ATTR
 × @ TYPE(OUTPUT) INTENS(LOW)
 × ^ TYPE(OUTPUT) INTENS(LOW) SKIP(ON)
 × | TYPE(INPUT) INTENS(HIGH) CAPS(OFF)
 ×)BODY
 ×%-------------------  MEMLIST Load Member List 1  --------------------
 ×%COMMAND ===>|ZCMD                                          %SCROLL ==
 ×+   Enter an ISPF command, a PDS subcomman or a special control code:
 ×             %1+Suspend ISPMODE    %6+MEMLIST reset     %8+View mode
 ×             %5+Alias check        %7+MEMLIST refresh   %9+Display 2
 ×+&PDSMSG  ------------------------------------------------------------
 ×...
-×Example 4: control returns to MEMLIST after an END command.
+ __________

 ×--------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
 ×COMMAND ===> _                                               SCROLL ==
 ×   Enter an ISPF command, a PDS subcommand or a special control code:
 ×             1 Suspend ISPMODE     6 MEMLIST reset       8 View mode
 ×             5 Alias check         7 MEMLIST refresh     9 Display 2
 ×- DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  GRP=PDS70/  --------------------
 ×CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
 ×     PDSX     *NEWNAME  ALIAS
 ×     PDS70PNY *NEWNAME  01.03    84/10/30  84/12/11  9:54    20    20
 ×     PDS70PN0 *NEWNAME  01.21    84/09/04  84/11/07 14:27    79    37
 ×     PDS70PN4 *ALIAS*   70.00    84/12/03  84/12/03 15:09    16    16
 ×     PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
 ×     PDS70PN7 *LIST*    70.01    84/12/03  84/12/11  9:54    20    20
 ×YYY  PDS70PN8 *INVALID  01.25    84/09/05  84/12/11  9:54    20    21
 ×******************************* BOTTOM OF DATA ***********************
1
  OUTCOPY
+ _______
0 The OUTCOPY subcommand formats utility control statements which can
  be used by IEBCOPY to select members from a data set.
- Example 1: member names which contain pattern characters are selected.
+ __________
  out c/a0 echo
           COPY OUTDD=OUTPUT,INDD=TESTLOAD
           S M=CSCGA03D ,CSCGA03D))
           S M=CSCSA03D ,CSCSA03D))
           S M=CSCZA03D ,CSCZA03D))
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 2: members from a different library are selected.
+ __________
  c lib.cntl
   PDS220I //SYS00068  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
 ×out big:big text('my string')
           COPY OUTDD=OUTPUT,INDD=CNTL
 ×         S M=BIGSIGN  MY STRING
 ×         S M=BIGSIGNR MY STRING
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 3: note - members already selected are not output again.
+ __________
  out sign/
 ×         S M=DESIGNI  MY STRING
 ×         S M=DESIGNM  MY STRING
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  out big:big
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 4: the output must be closed if the PDSOUT data set will be
+ __________
             examined by PDS or any editor.
  out * close
   PDS080I OUTCOPY DCB IS CLOSED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  change pdsout
   PDS530W THIS DATA SET IS NOT PARTITIONED
   PDS220I //SYS00069  DD  DSN=HABL.PDSOUT.DATA,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),VOL=SER=TSO
   PDS220I //  SPACE=(TRK,(3))                      /*FREE TRK=2*/

   PDS300A ENTER OPTION -- DSN=HABL.PDSOUT.DATA,VOL=SER=TSO002
  spf
   --SPF edit for the PDSOUT data set--
0 Note 1: the output data set will be closed during PDS termination
+ _______
          processing if it is not explicitly closed.
0 Note 2: the default control statements generated can be modified
+ _______
          with an editor of some kind to do any of the following:
             a.  exclude members instead of include members.
             b.  rename members by modifying the second member name.
             c.  replace members by adding a ',R'
             d.  use the member list for some other purpose.
1
  PATTERN
+ _______
0 The PATTERN subcommand lists member names from the data set directory.
- Example 1: members with ..SIGN.. in their member names are displayed.
+ __________
  pattern /sign
   BIGSIGN     BIGSIGNR    DESIGNI     DESIGNM
0 Example 2: members with ..SIGN.. in their member names are displayed.
+ __________
  pattern sign
   BIGSIGN     BIGSIGNR    DESIGNI     DESIGNM
0 Example 3: a range of member names is displayed.
+ __________
  pattern x:z
   XCVOLIST    XREFASM     ZAP         ZAPCCHHR-A  ZAPDUMP     ZAPPTR
0 Example 4: note - pattern remembers its operand(s).
+ __________
  pattern
   XCVOLIST    XREFASM     ZAP         ZAPCCHHR-A  ZAPDUMP     ZAPPTR
0 Example 5: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  pattern a/x'c2'
   ABEND       AMBLIST     ASMBLK      ASMBLK2
   C1E2D4FF8140C240-A  *ASM.a B *
   BA          BACKBL0 -A  BACKBL1     BATCHCHK    BATCHTMP    BATCHTSO
   BATCHTS2    BKIPOCAT    BKPAGE01    SHRLOADB    TESTFBA
   F1C2D2D7D3D7C1F0    *1BKPLPA0*
1
  RECALL
+ ______
0 The RECALL subcommand displays the previous subcommand or
  displays and reenters the previous subcommand for execution.
- Example 1: RECALL with no operand.
+ __________
  recall
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
0 Example 2: RECALL with the ENTER operand.
+ __________
  recall enter
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$DOC
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$INST
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$MODS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
0 Example 3: RECALL with no operand followed by a line modification.
+ __________
  recall
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
   ===>  the cursor is moved back to the PRINTOFF  <===
   ===>  line and data to be changed is retyped.   <===
   PRINTOFF $:$ FORM(D101) NOHEAD ASA dest(r106)
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$DOC
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$INST
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$MODS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
1
  RENAME
+ ______
0 The RENAME subcommand updates a member's name.
- Example 1: a member is renamed.
+ __________
  ren extract extracto
   PDS090I EXTRACT HAS BEEN RENAMED
0 Example 2: two members exchange names.
+ __________
  ren unit unitback swap
   PDS090I UNIT HAS BEEN RENAMED
   PDS090I UNITBACK HAS BEEN RENAMED
0 Example 3: a group of members is renamed.
+ __________
  rename cscz csc8 group
   PDS161I MEMBERS TO BE RENAMED ARE: CSCZA03D, CSCZB03D, CSCZC03D, CSCZ
            CSCZP03D, CSCZS03D

   PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?
  yes
   PDS090I CSCZA03D HAS BEEN RENAMED
   PDS090I CSCZB03D HAS BEEN RENAMED
   PDS090I CSCZC03D HAS BEEN RENAMED
   PDS090I CSCZJ03D HAS BEEN RENAMED
   PDS090I CSCZP03D HAS BEEN RENAMED
   PDS090I CSCZS03D HAS BEEN RENAMED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO001
  member
  CSC8A03D    CSC8B03D    CSC8C03D    CSC8J03D    CSC8P03D    CSC8S03D
0 Example 4: a non-load member with aliases is renamed.
+ __________
  ren mydata mydata2
   PDS090I MYDATA HAS BEEN RENAMED
0 Example 5: a load member with aliases is renamed.
+ __________
  ren comp compare
   PDS090I COMP HAS BEEN RENAMED
   PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: CMPRSEQ
   PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: CMPRSEQ2
1
  RESTORE
+ _______
0 The RESTORE subcommand resurrects a deleted member at the given TTR
  address.  Deleted members remain in a partitioned data set until the
  data set is compressed.
- Example 1: a load module is restored.
+ __________
  restore xxx 302
   PDS091I XXX HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  X0MIN
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I XXX ATTRIBUTES ARE: SCTR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS106I LAST LINK-EDITED ON  1/14/83
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del *
   PDS040I XXX HAS BEEN DELETED
0 Example 2: a load module is restored.
+ __________
  restore yyy 302 like(pds)
   PDS091I YYY HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  X0MIN
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I YYY ATTRIBUTES ARE: SCTR, RENT, REUS, REFR
   PDS883E REUSABLE ATTRIBUTE CONFLICTS WITH SCATTER
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS106I LAST LINK-EDITED ON  6/05/82
0 Example 3: a deleted load module is searched for.
+ __________
  restore zzz 501 display
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 000511

   PDS164I CSECTS ARE: PDS, EDIT, BROWSE, PRINTOFF, RESTORE, LIST, HELP,
            RENAME, FIXPDS, ALIAS, DELETE, FINDATTR, ATTRIB, MAP, HISTOR
            ALLOCATE, PARSE, VERMEMBR, VERDSN, PCLMAIN, PCLLIST, PCLFIND
            PCLDSPLY, PCLALIAS, PCLDELET, PCLRESTO, PCLRENAM, PCLMAP, PC
            PCLPRINT, PCLTSOLI, PCLSUBMI, PCLFIX, PCLBROWS, PCLSPFED, ..

   PDS106I LAST LINK-EDITED ON  2/01/83

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  no
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 001214

   PDS164I CSECTS ARE: PLUS

   PDS106I LAST LINK-EDITED ON  3/31/77

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  yes
1
0  PDS091I ZZZ HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  PLUS
   PDS104I MODULE LENGTH  0003B8  --      1K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I ZZZ ATTRIBUTES ARE: NONE
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0003B8  --      1K
   PDS106I LAST LINK-EDITED ON  3/31/77
0 Example 4: multiple load modules are restored.
+ __________
  restore multi 1f11 repeat noprompt

   PDS101I DELETED MEMBER FOUND AT TTR 001F11

   PDS164I CSECTS ARE: CMDTSO

   PDS106I LAST LINK-EDITED ON  5/26/82

   PDS091I MULTI001 HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  CMDTSO
   PDS104I MODULE LENGTH  005648  --     22K


   PDS101I DELETED MEMBER FOUND AT TTR 001F19

   PDS164I CSECTS ARE: CMDBINT

   PDS106I LAST LINK-EDITED ON  6/07/82

   PDS091I MULTI002 HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  CMDSBINT
   PDS104I MODULE LENGTH  0007B8  --      2K


   PDS101I DELETED MEMBER FOUND AT TTR 002004

   PDS164I CSECTS ARE: CMDSBSYS

   PDS106I LAST LINK-EDITED ON  6/07/82

   PDS091I MULTI003 HAS BEEN RESTORED
   PDS102I ENTRY POINT AT 0007A8
   PDS104I MODULE LENGTH  0007A8  --      2K


   PDS006I END OF DATA SET
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS162I MEMBERS TO BE DELETED ARE: MULTI001, MULTI002, MULTI003

   PDS394A SHOULD THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I MULTI001 HAS BEEN DELETED
   PDS040I MULTI002 HAS BEEN DELETED
   PDS040I MULTI003 HAS BEEN DELETED
1
0 Example 5: a CLIST member is restored (note that it is useful to
+ __________
             identify members internally that might need to be restored)

  restore ncpnewx 0 prompt like(ncpnew)
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 000322

   PDS144I DATA LINE 1:
   00010003WRITE

   PDS144I DATA LINE 2:
   00020003WRITE ***  NCPBACK -- BACK OUT THE NEW VERSION OF NCP

   PDS144I DATA LINE 3:
   00030003WRITE

   PDS144I DATA LINE 4:
   00040003WRITE ***  PERFORM RENAMES AS REQUIRED

   PDS144I DATA LINE 5:
   00050003PDS 'SYS1.PRD.VTAMLST'


   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  no
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 000324

   PDS144I DATA LINE 1:
   00010008WRITE

   PDS144I DATA LINE 2:
   00020008WRITE ***  NCPNEW -- INSTALL A NEW VERSION OF NCP

   PDS144I DATA LINE 3:
   00030008WRITE

   PDS144I DATA LINE 4:
   00040008WRITE ***  DELETE PREVIOUS NCP MODULES

   PDS144I DATA LINE 5:
   00050008PDS 'SYS1.NCPLIB'


   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  yes
   PDS091I NCPNEWX HAS BEEN RESTORED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
  at ncpnew/
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  NCPNEW       01.05  83/06/24  84/01/24  8:13    60    83
   PDS230I  NCPNEWX      01.05  83/06/24  84/01/24  8:13    60    83
1
- TSO
+ ___
0×The TSO subcommand may be used to invoke a TSO command processor or CL
- Example 1: a data set is allocated.
+ __________
  tso alloc f(pdsout) da(pdsout.data)
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 2: TIME is requested.
+ __________
  tso time
   IKJ56650I TIME-10:00:26 AM. CPU-00:00:50 SERVICE-321113 SESSION-02:47
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 3: attributes for a data set are requested.
+ __________
  tso dsat pdsout.data
   SERIAL ALLOC  USED EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME
   TSO002     3     1  1  PS   FB    3120    80 02/08/84 HABL.PDSOUT.DAT
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 4: PDS is invoked for a separate PDS session.
+ __________
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  tso pds lib.asm
   PDS100I PDS -- VERSION 7.0
   PDS220I //SYS00155  DD  DSN=HABL.LIB.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(40,0,80))                /*FREE TRK=141,FREE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO002
  at menua
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  MENUA        01.07  84/02/06  84/02/09  8:51 13492 13467   1
   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO002
  end
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
-×Example 5: The following CLIST is invoked:
+ __________
 ×           PROC 0
 ×           WRITE ALL COMMANDS IN THIS CLIST ARE INDEPENDENT OF PDS
 ×           LISTD LIB.CLIST
 ×           TIME
 ×           END
 ×
 ×
 ×tso tsotest
 × ALL COMMANDS IN THIS CLIST ARE INDEPENDENT OF PDS
 × HABL.LIB.CLIST
 × --RECFM-LRECL-BLKSIZE-DSORG
 ×   VB    255   9040    PO
 × --VOLUMES--
 ×   TSO002
 × IKJ56650I TIME-10:34:01 AM. CPU-00:00:00 SERVICE-3766 SESSION-41:08:3
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  GRP=
1
  USAGE
+ _____
0 The USAGE subcommand lists data set attributes and statistics.
- Example 1: a linklist library is used.
+ __________
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
  usage
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069        525     212     0 CYL

   PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECURITY  ASM2
   PDS180I          12/11/83  0/00/00   6/07/84  YES      NONE      HRIS

   PDS181I EXTENTS IN TRACKS: 525

   PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS
   PDS182I               525   313   212        1

   PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES
   PDS183I               180    97    83       2      295       37

   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
- Example 2: an operand is used to request extent information.
+ __________
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
  change lib.cntl
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320        165      41     1 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  usage all
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320        165      41     1 CYL

   PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECURITY  ASM2
   PDS180I          11/14/83  0/00/00   6/07/84  YES      WRITE     HABL

   PDS181I EXTENTS IN TRACKS: 120, 15, 15, 15

   PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS
   PDS182I               165   124    41        4

   PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES
   PDS183I                80    59    21       2      402        3

   PDS184I EXTENT  UCB  LO TT-HI TT  TRACKS     LOW CCHH-HIGH CCHH    BO
   PDS184I ------  ---  ----- -----  ------  ----------- -----------  --
   PDS184I      0  6C2  00.00 00.77     120  00.A4.00.00 00.AB.00.0E  CY
   PDS184I      1  6C2  00.78 00.86      15  01.15.00.00 01.15.00.0E  CY
   PDS184I      2  6C2  00.87 00.95      15  00.3B.00.00 00.3B.00.0E  CY
   PDS184I      3  6C2  00.96 00.A4      15  01.0C.00.00 01.0C.00.0E  CY
1
  VERIFY
+ ______
0 The VERIFY subcommand validity checks data sets.
- Example 1: a CLIST library is validity checked.
+ __________
  c lib.clist
   PDS220I //SYS00077  DD  DSN=HABL.LIB.CLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(1,1,40))                 /*FREE TRK=7,FREE DI
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
 ×verify :
   PDS110I     1,462 LOGICAL RECORDS WERE INPUT
   PDS111I       119 PHYSICAL BLOCKS WERE INPUT
   PDS112I     9,027 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       520 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I         2 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       122 MEMBERS WERE CHECKED
0 Example 2: a link-list library is validity checked.
+ __________
  c 'sys1.linkhit'
   PDS220I //SYS00078  DD  DSN=SYS1.LINKHIT,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=19069),VOL=SER=TSO001,
   PDS220I //  SPACE=(CYL,(40,,80))                 /*FREE TRK=141,FREE
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
 ×verify :

   ** VERIFY   TESTONE
   PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE ANY ARE INCOMPATIBLE
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RMODE ANY
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH AMODE ANY
   IEA703I 706    HABL     SPFACCT  MODULE ACCESSED UNITS

   ** VERIFY   UNITS
   PDS998E ABEND S706 LOADING THIS MODULE

   ** VERIFY   TST3380
   PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS
   PDS861E THE ALIAS DIRECTORY ENTRY NOTES THE MAIN ENTRY NAME AS TSTDIS

   PDS111I     5,384 PHYSICAL BLOCKS WERE INPUT
   PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       875 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I        94 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       320 MEMBERS WERE CHECKED
0 Example 3: a write-protected data set is validity checked.
+ __________
  c 'sys1.proclib'
   PDS220I //SYS00079  DD  DSN=SYS1.PROCLIB,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSRES,
   PDS220I //  SPACE=(TRK,(15,,27),,ROUND)           /*FREE TRK=10,FREE
   PDS300A ENTER OPTION -- DSN=SYS1.PROCLIB,VOL=SER=SYSRES
 ×verify : noupdate
   PDS110I     1,287 LOGICAL RECORDS WERE INPUT
   PDS111I        62 PHYSICAL BLOCKS WERE INPUT
   PDS112I     8,080 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     1,661 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I         1 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I        62 MEMBERS WERE CHECKED
1
0 Example 4: a sequential data set is validity checked.
+ __________
  change log
   PDS530W THIS DATA SET IS NOT PARTITIONED
   PDS220I //SYS00080  DD  DSN=HABL.LOG.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),VOL=SER=TSO
   PDS220I //  SPACE=(TRK,(1))                      /*FREE TRK=0*/
   PDS300A ENTER OPTION -- DSN=HABL.LOG.CNTL,VOL=SER=TSO001
  verify
   PDS006I END OF DATA SET
   PDS110I         9 LOGICAL RECORDS WERE INPUT
   PDS111I         7 PHYSICAL BLOCKS WERE INPUT
   PDS112I       160 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       103 CHARACTERS PER AVERAGE PHYSICAL BLOCK
0 Example 5: a CNTL data set is validity checked.
+ __________
  c lib.cntl
   PDS220I //SYS00081  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO002
 ×verify :

   ** VERIFY   ASM.a B   X'C1E2D4FF8140C240'   NON-STANDARD MEMBER NAME
   PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS

   ** VERIFY   ASSEMBLY
   PDS850E ASSEMBLY IS BEING UPDATED BY HRIS

   ** VERIFY   1BKPLPA0  X'F1C2D2D7D3D7C1F0'   NON-STANDARD MEMBER NAME

   ** VERIFY   ASSEMBLR
   PDS812E BLOCK LENGTH OF 9,040 EXCEEDS THE DATA SET DCB BLKSIZE

   ** VERIFY   RESCPY
   PDS510W THIS IS A NULL MEMBER

   PDS110I     4,737 LOGICAL RECORDS WERE INPUT
   PDS111I       151 PHYSICAL BLOCKS WERE INPUT
   PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     2,510 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I        84 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       130 MEMBERS WERE CHECKED
0 Example 6: an ASM data set is validity checked.
+ __________
  change lib.asm
   PDS220I //SYS00082  DD  DSN=HABL.LIB.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(40,,40))                  /*FREE TRK=96,FREE
   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO003
 ×verify :
   PDS006I END OF DATA SET
   PDS110I    89,681 LOGICAL RECORDS WERE INPUT
   PDS111I       529 PHYSICAL BLOCKS WERE INPUT
   PDS112I    15,440 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I    13,562 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I       125 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       110 MEMBERS WERE CHECKED
1
0×Example 7: an list of load members is checked.
+×__________
 ×verify (zap$,pds70,asid)
 ×
 × ** VERIFY   ZAP$
 × PDS066I MEMBER IS AN ALIAS FOR: ZAPMAIN
 ×
 × PDS111I        12 PHYSICAL BLOCKS WERE INPUT
 × PDS112I    12,288 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     2,344 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × ** VERIFY   PDS70
 ×
 × PDS111I        24 PHYSICAL BLOCKS WERE INPUT
 × PDS112I    17,952 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     3,909 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × ** VERIFY   ASID
 ×
 × PDS111I         7 PHYSICAL BLOCKS WERE INPUT
 × PDS112I     3,120 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I       501 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001  GRP=(ZAP$
0×Example 8: an group of source members is checked.
+×__________
 ×verify comp/
 ×
 × ** VERIFY   COMPAREP
 ×
 × PDS110I     1,183 LOGICAL RECORDS WERE INPUT
 × PDS111I        11 PHYSICAL BLOCKS WERE INPUT
 × PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     8,604 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × ** VERIFY   PDSCOMP
 ×
 × PDS110I        39 LOGICAL RECORDS WERE INPUT
 × PDS111I         1 PHYSICAL BLOCKS WERE INPUT
 × PDS112I     3,120 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     3,120 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS70,VOL=SER=TSO004  GRP=COMP/
0×Example 9: an range of load members is checked.
+×__________
 ×  VERIFY HASP:HASP
 ×
 × ** VERIFY   HASPSSSM
 ×
 × PDS111I        20 PHYSICAL BLOCKS WERE INPUT
 × PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     2,723 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × ** VERIFY   HASPSSSO
 ×
 × PDS111I        20 PHYSICAL BLOCKS WERE INPUT
 × PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
 × PDS113I     2,710 CHARACTERS PER AVERAGE PHYSICAL BLOCK
 ×
 × PDS300A ENTER OPTION -- DSN=SYS1.LPALIB,VOL=SER=SYSXAR  GRP=HASP:HASP
1                            APPENDIX A: PDS VERSION 6.2
+                            ___________________________
- New subcommands
+ _______________

     1.  COMPARE  -- invokes the TSO COMPARE command.
     2.  COMPRESS -- compresses the data set.
     3.  DSNAME   -- displays the current allocation.
     4.  DSPRINT  -- prints a hardcopy using DSPRINT.
     5.  ISPF     -- invokes the ISPF primary panel.



  Improvements
+ ____________

     1.  Added identifiers for program messages.
     2.  Added an extended HELP facility for message explanations.
     3.  Member lists: added for subcommands which define member groups.
     4.  Input buffering: three buffering modes can be selected.
     5.  Allocation:
         a.  rewritten to used SVC 99 instead of DAIR.
         b.  added FILE(filename) support.
         c.  added * data set name support.
         d.  added alias data set name support.
     6.  OUTCOPY: made ECHO mode the default and added the ALIAS operand
     7.  Security:
         a.  added a subcommand authorization exit.
         b.  added a TSO command authorization exit.
         c.  added several sample exits (one uses RACF).
     8.  USAGE: expanded to include more data set information.
     9.  IF: added CREATED and CHANGED keywords.
    10.  RECALL: changed to allow character insert on 3270 terminals.
    11.  PDS panel for SPF: added a HELP screen.
    12.  Added installation generation controls to specify:
         a.  null subcommands
         b.  subcommand names
         c.  supporting TSO command names
         d.  the default DSNAME operand
         e.  default buffering by device type
         f.  device unit names displayed


  Problems fixed
+ ______________

     1.  VERIFY: data sets with large directories sometimes received
         S0C4 ABEND errors.
     2.  % or implied CLIST: a PROC statement is no longer required.
     3.  ESTAE recovery: MVS/XA 2.1.2 received a S0C4 and a S0C6 ABEND.



  Additional information
+ ______________________

     1.  Program comments following VER 6.2: on page 15 of a listing.
     2.  The HELP member.
1                            APPENDIX B: PDS VERSION 6.3
+                            ___________________________
- New subcommand
+ ______________

     ISPMODE  -- invokes an ISPF session display interface written by
         Steven Smith with Security Pacific National Bank in Los Angeles


  Improvements
+ ____________

     1.  VERIFY: added a maximum physical blocksize message.
     2.  FIND: added CAPS and ASIS keywords for entering lower case
         character data.
     3.  IF and HISTORY: added a SYSMOD alias for the USER keyword.
     4.  DSNAME: revised the PDS200I message.
     5.  Batch execution: CONTROL NORECOVER is now a default to prevent
         multiple ABENDS during batch execution;  if ABEND recovery
         is desired; CONTROL RECOVER must be explicitly specified.
     6.  PDS customization: controls were added for PDS to invoke a
         CLIST instead of a TSO command for certain PDS subcommands.
     7.  Exit routines: added an ACF2 sample security exit.


  Problems fixed
+ ______________

     1.  PROFILE NOPREFIX: caused an data set allocation S0C4 ABEND and
         filename allocation did not work properly either.
     2.  Command line parse: PDS DATA.SET VOL(VOLSER) SHR did not work.
     3.  HISTORY: certain FOCUS load modules received S0C7 ABENDS.
     4.  SPFEDIT, BROWSE, ISPF: the RETURN key (or extended return)
         caused subsequent SPFEDIT, BROWSE or ISPF subcommands to exit
         prematurely.  They are now reinvoked to reset RETURN processing
     5.  PDS invoked under TSO EDIT: the SPFEDIT subcommand did not work
     6.  Attention exit:
         a.  added TCLEARQ INPUT to syncronize terminal inputs.
         b.  added STATUS STOP to terminate any subtasks.
         c.  added GETPUT TERM to disallow prompt input from a CLIST.
         d.  added STACK DELETE to terminate any current CLIST.
     7.  ESTAE exit: added STACK DELETE to terminate any current CLIST.
     8.  COMPRESS SB37 ABEND: added a PDS generation control to specify
         the maximum number of members in a data set to be compressed.
     9.  ISPF RESERVE/DEQ name: changed the major name from SPFDSN to
         SPFEDIT as in PTF UZ65671.
    10.  Session Manager:
         a.  PDS entry panel: obtained an S0C4 ABEND.
         b.  SPFEDIT and BROWSE: turned off session manager.
         c.  RESTORE with PROMPT: required double yes/no prompting.
         d.  KLEAR: caused erroneous INVALID SUBCOMMAND messages.



  Additional information
+ ______________________

     1.  Program comments following VER 6.3: on page 17 of a listing.
     2.  The HELP member.
1×                           APPENDIX C: PDS VERSION 7.0
+×                           ___________________________
 ×
 ×
 ×New subcommand
+ ______________
 ×
 ×   MEMLIST  -- invokes a member list management interface written by
 ×       Steven Smith with Security Pacific National Bank in Los Angeles
 ×
 ×
 ×Changes and Improvements
+ ________________________
 ×
 ×  1.  VERIFY: added member and member group verification support.
 ×  2.  IF and FIND:
 ×      a.  added THEN(VERIFY) and ELSE(VERIFY)
 ×      b.  added THEN(MEMLIST) and ELSE(MEMLIST)
 ×  3.  ISPMODE: entered subcommands are echoed in upper/lower case.
 ×  4.  COMPRESS: should be effective for any size data set.
 ×  5.  ISPMODE: added three operands -
 ×      a.  CHKMAX(number) controls the number of lines between checkpoi
 ×      b.  CMDMAX(number) controls the amount of output from a subcomma
 ×      c.  TBLMAX(number) controls the size of the ISPF dialog table.
 ×  6.  CONTROL:
 ×      a.  renamed the ABEND, CPULOOP, MSGS and OUTLOOP operands to
 ×          TESTABEND, TESTCPULOOP, TESTMSGS and TESTOUTLOOP.
 ×      b.  added the SYSOUT operand to provide hardcopy logging.
 ×      c.  added the DSNAME operand to provide data set logging.
 ×  7.  FIXPDS:
 ×      a.  renamed the RESETDIR operand to RESET.
 ×      b.  added support for sequential data sets.
 ×      c.  added MAXSPACE, RELEASE, RELEXTENT and RELSAVE operands.
 ×      d.  reduced the default blocksizes for 3350, 3375 and 3380 disks
 ×  8.  RECALL: added support under ISPMODE and MEMLIST.
 ×  9.  ATTRIB and IF: added support for SSI field manipulation.
 × 10.  OUTCOPY: added the TEXT operand.
 × 11.  TSO subcommand:
 ×      a.  can process CLISTS which are external to PDS.
 ×      b.  can optionally interface to TSOEXEC for TSO/E Release 2.
 × 12.  EDIT subcommand: renamed to TSOEDIT.
 × 13.  SPFEDIT subcommand:
 ×      a.  renamed to EDIT (with an alias of SPFEDIT).
 ×      b.  added the MACRO operand for ISPF Version 2.
 × 14.  OPTIONS dialog support: Steve Smith added the o line command
 ×      and the O command to provide PDS subcommand entry assistance.
 × 15.  Program entry from ISPF: allows for three different entry modes.
 × 16.  PDS200I message: added the number of extents in the message.
 × 17.  PDS300A message: added a default group display to the message.
 ×
 ×
 ×Problems fixed
+ ______________
 ×
 ×   1.  3278-5 terminals: ISPMODE displays are limited to 80 bytes.
 ×   2.  IF CREATED and CHANGED: load module checking was incorrect
 ×       when a year boundary was spanned.
 ×
 ×
 ×Additional information
+ ______________________
 ×
 ×   1.  Program comments following VER 7.0: on page 18 of a listing.
 ×   2.  The information in the HELP member and in the HELP panels.
1                            APPENDIX D: BLKDISK and Blocksizes
+                            __________________________________
0×Since PDS uses EXCP input, it manages its buffers explicitly when
 ×it cannot use the Read Multiple technique.  To speed the processing
 ×of a data set for single or double buffering, you could attempt to
  increase the amount of data in each physical record by carefully
  specifying the data set blocksize.

  However, specifying a large blocksize will do little good unless the
 ×average member size exceeds the chosen blocksize; storage resources
  are actually wasted during input processing of data sets with small
  members and a large blocksize.  The output from a VERIFY subcommand
  can be used to calculate average member sizes of existing data sets.

  In addition, load libraries are resistant to improvement using larger
  blocksizes because each member contains many small blocks along with
  the load module (RLD, ESD, CESD, IDR and SYM blocks).  Only the TEXT
  records would be expanded significantly with the use of a larger
  blocksize and then only to a maximum of 18K.  Note:  a COPYMOD functio
  is available in IEBCOPY to reblock load modules in the DFP products.

  For those data sets with larger members, BLKDISK (available from the
  CBT tape, file 296) should be used to determine an optimal blocksize.
  This TSO command is linked with aliases such as BLK3330 and BLK3380 to
  reflect the actual storage devices available at your installation.
 ×Note: the recommended value from BLKDISK may not be appropriate; be
 ×sure that you also consider the smaller blocksizes listed.

0 Example 1: blocking for a 3380 with 80 character logical records.
+ __________
  blk3380 80
    3380 BLOCKSIZE SUMMARY;    LRECL=80        KEY LENGTH=0
              BLOCKSIZE    BLOCKS/TRACK    LRECLS/TRACK    UTILIZATION
              ---------    ------------    ------------    -----------
                     80              83              83          14.0%
                  2,480              16             496          83.6%
                  2,640              15             495          83.4%
                  2,880              14             504          84.9%
                  3,120              13             507          85.4%
                  3,440              12             516          86.9%
                  3,840              11             528          89.0%
                  4,240              10             530          89.3%
                  4,800               9             540          91.0%
                  5,440               8             544          91.7%
                  6,320               7             553          93.2%
                  7,440               6             558          94.0%
                  9,040               5             565          95.2%
                 11,440               4             572          96.4%
                 15,440               3             579          97.6%
   RECOMMENDED-->23,440               2             586          98.7%
                 32,720               1             409          68.9%

   FOR BLKSIZE 23,440  AND   100,000 RECORDS, ALLOCATE:
          342 BLOCKS,       171 TRACKS, OR        12 CYLINDERS
0 Example 2: allocation computations can be performed with a chosen bloc
+ __________
  blk3380 80 records(500000) blksize(9040)
   ---same blocksize summary table as above---

   FOR BLKSIZE  9,040  AND   500,000 RECORDS, ALLOCATE:
        4,425 BLOCKS,       885 TRACKS, OR        59 CYLINDERS
1
0 Example 3: recorded key lengths can be entered.
+ __________
  blk3350 96 keylength(44)
    3350 BLOCKSIZE SUMMARY;    LRECL=96        KEY LENGTH=44
              BLOCKSIZE    BLOCKS/TRACK    LRECLS/TRACK    UTILIZATION
              ---------    ------------    ------------    -----------
                     96              47              47          23.8%
                    864              16             144          73.0%
                    960              15             150          76.0%
                  1,056              14             154          78.0%
                  1,152              13             156          79.1%
                  1,248              12             156          79.1%
                  1,344              11             154          78.0%
                  1,536              10             160          81.1%
                  1,824               9             171          86.7%
                  2,016               8             168          85.1%
                  2,400               7             175          88.7%
                  2,880               6             180          91.2%
                  3,456               5             180          91.2%
                  4,416               4             184          93.2%
                  6,048               3             189          95.8%
   RECOMMENDED--> 9,312               2             194          98.3%
                 18,912               1             197          99.8%

   FOR BLKSIZE  9,312  AND   100,000 RECORDS, ALLOCATE:
        1,031 BLOCKS,       516 TRACKS, OR        18 CYLINDERS

0 Example 4: track capacity can also be requested (note: the usual block
+ __________
             summary is suppressed due to the illegal null record length
  blk3380 0 trackcap
   *** NULL RECORDS ARE NOT SUPPORTED
    3380 TRACK CAPACITY;    KEY LENGTH=0
         BLOCKS/TRACK     BLKSIZE     BYTES/TRACK     UTILIZATION
         ------------     -------     -----------     -----------
                    1      47,476          47,476          100.0%
                    2      23,476          46,952           98.9%
                    3      15,476          46,428           97.8%
                    4      11,476          45,904           96.7%
                    5       9,076          45,380           95.6%
                    6       7,476          44,856           94.5%
                    7       6,356          44,492           93.7%
                    8       5,492          43,936           92.5%
                    9       4,820          43,380           91.4%
                   10       4,276          42,760           90.1%
                   11       3,860          42,460           89.4%
                   12       3,476          41,712           87.9%
                   13       3,188          41,444           87.3%
                   14       2,932          41,048           86.5%
                   15       2,676          40,140           84.5%
                   16       2,484          39,744           83.7%

   DEVICE SUMMARY: MAX BLOCKSIZE=47,476   TRACKS=13,275   BYTES=630,243,
   NOCYLS=885   TRKS/CYL=15   TRKSIZE=47,968   DSCB/TRK=53   PDS/TRK=46
1                            APPENDIX E: PDS MESSAGES
+                            ________________________
- This appendix is provided to document PDS program messages.

  PDS messages are of the format PDSnnnx (where nnn is numeric and x
  is the letter I, A, W or E).  The program messages are grouped in
  numeric ranges by message severity as shown below:

       MESSAGE RANGE         DESCRIPTION
       -----------------     -----------
       PDS000I - PDS299I     Informational messages
       PDS300A - PDS399A     Action messages (a response is required)
       PDS400W - PDS599W     Warning message (possible error condition)
       PDS600E - PDS999E     Error messages


  Messages above PDS399 (warning and error messages) can be explained
  via the .? or extended help facility if these messages are received
  during PDS program execution.

  To use the extended help facility after warning and/or error messages
  have been received, enter a .?  response to the ENTER OPTIONS prompt
  message and up to five warning or error message explanations from the
  last subcommand will be requested from the HELP data set by the
  program.


  To have any program messages explained during PDS processing,
  you can also enter a command of the form:
      HELP MSG MSG(PDSxxx,PDSyyy, ...)
           (where PDSxxx and PDSyyy are messages to be explained)

  In this appendix, program messages are identified by asterisks followe
  by the text of the message which, in turn, is followed by one or more
  lines of documentation.
0
0×  ****PDS001I TESTMESSAGES -- ALL NUMBERED MESSAGES FOLLOW:
         This message is the header for CONTROL TESTMESSAGES.

    ****PDS002I DEFAULT MEMBER IS member
         This message displays the default member name.

    ****PDS005I END OF FILE
         An end of file marker was input indicating the end of the membe

    ****PDS006I END OF DATA SET
         An end of file marker was input indicating the end of the data

    ****PDS010I THE ALIAS HAS BEEN ASSIGNED
         The ALIAS subcommand has completed normally.

1

    *****PDS020I member ATTRIBUTES ARE: attrib1, attrib2, ...
          This message lists the linkage editor attributes of the member
            DC        - downward compatible with linkage editor level E
            LOAD ONLY - can only be brought into storage with a LOAD MAC
            NOT EDIT  - can not be linkage edited again
            NOT EXEC  - not executable
            OVERLAY   - overlay load structure
            REFR      - refreshable (replaceable by a copy during execut
            RENT      - reentrant (executable by several tasks simultane
            REUS      - reusable (executable by several tasks in serial
            SCTR      - scatter load structure
            TEST      - linked with the TEST option
            NONE      - none of the above linkage attributes

    *****PDS021I APF AUTHORIZED
          This member has been marked as authorized by the linkage edito

    *****PDS022I NOT APF AUTHORIZED, OBSOLETE LINKAGE EDITOR
          This member is not authorized; it was linked by an obsolete li
          editor.

    *****PDS023I APF AUTHORIZED, APF DATA VALUE GREATER THAN 1
          This member was authorized by the linkage editor -- the APF va
          exceeds one.

    *****PDS024I PAGE ALIGNMENT IS REQUIRED
          This member requires alignment on a page boundary.

    *****PDS025I SSI INFORMATION: hexvalue
          This member has the displayed SSI data.

    *****PDS030I GLOBAL OPERANDS: global1, global2, ...
          This message lists the current CONTROL global values:
            ALIASINFO   - alias information is desired for MAP and ATTRI
            NOALIASINFO - no alias information is required.
            LKEDDATE    - linkage edit dates are desired for ATTRIB.
            NOLKEDDATE  - no linkage edit date information is required.
            PROMPT      - yes/no prompts are desired as usual for DELETE
                          FIXPDS, RENAME and RESTORE.
            NOPROMPT    - yes/no prompts are not required for DELETE, FI
                          RENAME or RESTORE (a yes reply is to be assume
            RECOVER     - ESTAE recovery should be attempted after an AB
            NORECOVER   - ESTAE recovery should not be attempted.
            DSNAME(dsn) - names the data set which is receiving the sess
                          log output; this will be combined with a data
                          status such as OLD, NEW, SHR or MOD.
            NODSNAME    - no session log is being output to a data set.
            SYSOUT(c)   - names the SYSOUT class which is currently rece
                          the session log output; this will be combined
                          FORM(form) or NOFORM and DEST(destname) or NOD
            NOSYSOUT    - no session log is being output to a SYSOUT dat

1

    *****PDS031I INPUT BUFFERING: type
          This message lists the current input buffering mode:
            SINGLE    - Read single (each read obtains one physical bloc
            DOUBLE    - Read double (each read obtains two physical bloc
            MULTIPLE  - Read multiple (each read obtains an entire track

          Note that the buffering type is reset for each data set alloca
          according to the device type on which the data set resides.  I
          general, MULTIPLE is used for device types which support the R
          MULTIPLE CCW and DOUBLE is used otherwise.

 ×  *****PDS032I TESTCPULOOP -- CPU LOOP FOLLOWS:
          CONTROL TESTCPULOOP - causes a CPU loop for program testing.

 ×  *****PDS033I TESTABEND -- SYSTEM 0C1 FOLLOWS:
          CONTROL TESTABEND - causes an ABEND for program testing.

 ×  *****PDS034I TESTOUTLOOP -- THIS DATA REPEATS
          CONTROL TESTOUTLOOP - causes an output loop for program testin

 ×  *****PDS035I TESTREAD -- EXCP RETURN CODE=nn; NEXT TTR ADDRESS IS tt
          CONTROL TESTREAD -- verifies the operation of the input EXCP r
          by using an initial TTR of 000001 in each case.

          EXCP is called for each of the buffering modes:
            SINGLE    - Read single (each read obtains one physical bloc
                        The return code should be 00 and NEXT TTR ADDRES
                        should be 000002 if sufficient data is available
            DOUBLE    - Read double (each read obtains two physical bloc
                        The return code should be 00 and NEXT TTR ADDRES
                        should be 000003 if sufficient data is available
            MULTIPLE  - Read multiple (each read obtains an entire track
                        If the disk unit supports the READ MULTIPLE CCW,
                        return code should should be 00 and NEXT TTR ADD
                        should be 000101 if sufficient data is available

                        If this disk unit does not support the READ MULT
                        CCW, a PDS892E message should be received, the r
                        code should be 00 and NEXT TTR ADDRESS should be
                        000003 (double buffering is actually used).

          Return codes from EXCP have the following meanings:
               RC=00    Successful read
               RC=04    End of member
               RC=08    End of data set
               RC=12    I/O error

    *****PDS040I member HAS BEEN DELETED
          DELETE has completed successfully.

    *****PDS050I member WILL BE MOVED
          FIXPDS EXPANDDIR has identified this member as a candidate to
          moved out of the way of the expanded member directory.

1

    *****PDS051I member IS BEING MOVED
          FIXPDS EXPANDDIR is currently moving this member out of the wa
          of the expanded member directory.

    *****PDS060I TRANSLATOR HISTORY BY CSECT -
    *****IKJEFT03  9/22/82   5741SC103  V02 M02   9/22/80  C'PLS2020'  V
    *****IEFBR14  11/22/81   5741SC103  V02 M02

          This message is a header for assembler or compiler IDR records
            IKJEFT03   - name of the CSECT.
            9/22/80    - date of the assembly or compilation.
            5741SC103  - translator identification.
            V02 M02    - translator version and modification level.
            9/22/80    - date of PLS compilation.
            C'PLS2020' - PLS compiler identification.
            V07 M02    - PLS compiler version and modification level.

    *****PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
    *****IEFBR14       6/14/84    HABLX

          This message is a header for zap IDR records:
            IEFBR14    - name of the CSECT.
            6/14/84    - date of the zap.
            HABLX      - zap user identification (USERID or JOB name).

    *****PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -
    *****IEFBR14      11/29/81    UZ54057

          This message is a header for user-supplied IDR records:
            IEFBR14     - name of the CSECT.
            11/29/81    - date of the information.
            UZ54057     - user-supplied IDR information.

    *****PDS064I LAST LINK-EDITED ON mm/dd/yy  BY LKED lkedname  Vnn Mmm
          This message displays the last linkage edit date and linkage
          editor identification information.

    *****PDS065I ASSOCIATED INFORMATION UPDATED FOR MEMBER: member
          This message is issued for various situations:
            1.  A main member is renamed and the identified alias member
                directory entry is updated to point to the renamed membe
            2.  A main member's addressing mode (AMODE) is modified and
                identified alias member's directory entry is updated wit
                corresponding values.
            3.  A main member's residence mode (RMODE) is modified and t
                identified alias member's directory entry is updated wit
                corresponding values.

    *****PDS066I MEMBER IS AN ALIAS FOR: member
          This member is an alias; the main member is identified.

    *****PDS071I THE FOLLOWING OPTIONS ARE AVAILABLE:
          This message is a header for the list of available subcommands

1

 ×  *****PDS080I filename DCB IS CLOSED
 ×        FILE(PDSOUT) or the session copy data set has been closed.

    *****PDS090I member HAS BEEN RENAMED
          RENAME has completed successfully.

    *****PDS091I member HAS BEEN RESTORED
          RESTORE has completed successfully.

 ×  *****PDS100I pdsname -- VERSION 7.0
          This message displays the name and release level of the PDS
          program; this message should be received at program initializa
          and as the first message from the CONTROL subcommand.

    *****PDS101I DELETED MEMBER FOUND AT TTR: hexttr
          A previously deleted member was found at the displayed TTR add

    *****PDS102I ENTRY POINT AT hexaddress
          The entry offset of the module is displayed in hexadecimal.

    *****PDS103I ENTRY POINT AT hexaddress --  symbol
          The entry offset of the module is displayed in hexadecimal and
          name of the corresponding entry point symbol is also displayed

    *****PDS104I MODULE LENGTH  hexlength  --  decimalK
          The length of the module is provided in hexadecimal and in K
          units (units of 1024 bytes using the next higher boundary of 1

    *****PDS106I LAST LINK-EDITED ON mm/dd/yy
          This message displays the last linkage edit date.

    *****PDS110I nn,nnn LOGICAL RECORDS WERE INPUT
          This is a count of the logical input records.

    *****PDS111I nn,nnn PHYSICAL BLOCKS WERE INPUT
          This is a count of the physical input records.

    *****PDS112I nn,nnn CHARACTERS IN THE LARGEST PHYSICAL BLOCK
          This is the maximum physical blocksize read.

    *****PDS113I nn,nnn CHARACTERS PER AVERAGE PHYSICAL BLOCK
          This average is from (total characters read)/(total blocks rea

    *****PDS114I nn,nnn TRACKS COULD BE REGAINED BY COMPRESSING THIS DAT
          The number of tracks indicated contain deleted members; if a
          compress is performed on the data set, these tracks should bec
          available for use.

    *****PDS115I nn,nnn MEMBERS WERE CHECKED
          This message indicates the number of members in the data set.

    *****PDS116I DATA SET WAS CHECKED
          This message indicates that the data set was checked by VERIFY

1

    *****PDS120I MVS/XA RESIDENCE MODE IS rmode -- ADDRESSING MODE IS am
          This message indicates the RMODE and AMODE values of the modul
            RMODE24  - residence mode is 24 (below the 16M line)
            RMODEANY - residence mode is ANY (above the 16M line)
            AMODE24  - addressing mode is 24 bit addresses
            AMODE31  - addressing mode is 31 bit addresses
            AMODEANY - addressing mode is any length addresses

    *****PDS140I BLOCK  RECORD nn,nnn  LENGTH nn,nnn  TTR hexttr
    *****     or DUMP   RECORD nn,nnn  LENGTH nn,nnn  TTR hexttr
          This is a header for BLOCK or DUMP format LIST and FIND output
            RECORD   - the current physical record number
            LENGTH   - the length of the current physical record
            TTR      - the disk address of this record in hexadecimal

    *****PDS141I AT hexaddr  CSECT csectname  LENGTH hexlen
    *****                                 or  ENTRY entryname
          This is a header for LBLOCK or LDUMP format LIST and FIND outp
          for a CSECT or for an entry within a CSECT in a load module:
            AT       - start of this CSECT in the load module
            CSECT    - the name of this CSECT
            LENGTH   - the length of this CSECT
            ENTRY    - the name of this entry (note: if the ENTRY form i
                       used, AT displays the start of this ENTRY symbol)

    *****PDS142I nn,nnn LINES  IN THIS MEMBER
    *****            or BLOCKS IN THIS MEMBER
          Note: this message means that an end of file marker has been
          recognized; it also summarizes the amount of data input -
            LINES    - number of logical records read
            BLOCKS   - number of physical records read

    *****PDS143I member DIRECTORY ENTRY, LENGTH=nn
          This is a header for a dump of the member's directory entry.

    *****PDS144I DATA LINE n:
          This is a header for a display of one line from a formerly
          deleted member.

    *****PDS160I ALIASES FOR THIS MEMBER ARE: alias1, alias2, ...
          This message displays the aliases associated with this main me

    *****PDS161I MEMBERS TO BE RENAMED ARE: member1, member2, ...
          This message displays the group of members which will be
          renamed if a "y" is provided to the next prompt.

    *****PDS162I MEMBERS TO BE DELETED ARE: member1, member2, ...
          This message displays the group of members which will be
          deleted if a "y" is provided to the next prompt.

    *****PDS163I ASSOCIATED MEMBERS TO BE DELETED ARE: member1, member2,
          This message displays the associated (alias, apparent alias an
          main) members which will also be deleted if a "y" is provided
          to the next prompt.

1

    *****PDS164I CSECTS ARE: csect1, csect2, ...
          This message displays the CSECT names found in this previously
          deleted member.

 ×  *****PDS171I COMPRESS HAS COMPLETED; RC=nn
          The compress operation has finished with the indicated return

    *****PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED SECURITY
    *****PDS180I          mm/dd/yy mm/dd/yy  mm/dd/yy  yes/no  type

          This message lists various data set characteristics:
            CREATED  -  data set creation date.
            EXPIRES  -  data set expiration date.
            LAST USE -  last data set open date.
            UPDATED  -  YES if data set has been opened for output or up
                        NO if all opens have been for input.
            SECURITY -  NONE if no data set password security bit is set
                        WRITE if the data set is protected from output u
                        READ if the data set is protected from input use
                        RACF if the data set RACF bit is on.
            ASM2ID   -  last update user (for systems with ASM2)

    *****PDS181I EXTENTS IN TRACKS: nnn, nnn, ...
          This message lists the size of each data set extent in tracks.

    *****PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS
    *****PDS182I              nnnn  nnnn  nnnn     nnnn

          This message lists disk allocation characteristics:
            ALLOCATED - number of allocated disk tracks.
            USED      - number of in-use disk tracks.
            FREE      - number of free disk tracks.
            EXTENTS   - number of disk storage extents.

    *****PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES
    *****PDS183I              nnnn  nnnn  nnnn    nnnn     nnnn     nnnn

          This message lists directory statistics:
            BLOCKS    - number of allocated directory blocks.
            USED      - number of in-use directory blocks.
            FREE      - number of unused directory blocks.
            TRACKS    - number of tracks occupied by directory blocks.
            MEMBERS   - number of members in the data set.
            ALIASES   - number of aliases in the data set.

1

    *****PDS184I EXTENT UCB LO TT-HI TT TRKS     LOW CCHH-HIGH CCHH   BO
    *****PDS184I ------ --- ----- ----- ----  ----------- ----------- --
    *****PDS184I     nn ccc tt.tt tt.tt  nnn  cc.cc.hh.hh cc.cc.hh.hh ty
    *****PDS184I    ...

          This message lists data from each extent of the data set:
            EXTENT    - number of this extent.
            UCB       - UCB for this extent.
            LO TT     - TT (of TTR) address for the first track in this
            HI TT     - TT (of TTR) address for the last track in this e
            TRACKS    - number of disk tracks in this extent.
            LOW CCHH  - CCHH address of the first track of this extent.
            HIGH CCHH - CCHH address of the last track of this extent.
            BOUNDARY  - CYL if the extent is on a cylinder boundary.
                        TRK if the extent is not on a cylinder boundary.

 ×  *****PDS190I AN ALIAS NAMED member IS ALREADY AT THIS TTR
          The identified alias member resides at this location -- RESTOR
          will continue if only alias members are found at this TTR addr

 ×  *****PDS200I DSP UNIT RECFM LRECL BLKSZ ALLOCTRK FREETRK SECONDARY F
 ×  *****PDS200I SHR 3380 FB       80  6320 3X   150      42     1 CYL

          This message documents the current allocation; this format can
          specifically requested by entering: DSNAME MSG
            DISP      - SHR or OLD disposition.
            UNIT      - disk unit device type.
            RECFM     - the record format from the DCB.
            LRECL     - the logical record length from the DCB.
            BLKSIZE   - the blocksize from the DCB.
            ALLOCTRK  - the number of disk extents allocated (example: 3
                        and the total space allocated in tracks.
            FREETRK   - the number of available disk tracks.
            SECONDARY - secondary allocation size and type (CYL or TRK)
            FREEDIR   - if DSORG=PO, the number of available directory b
            DSORG     - if not DSORG=PO, the actual DSORG from the DCB.

    *****PDS210I ALLOC F(SYS00001) DA('datasetname') disp UNIT(3380) -
    *****PDS210I   RECFM(F B) LRECL(80) BLKSIZE(6320) VOLUME(TSO003) -
    *****PDS210I   type SPACE(tot,sec) DIR(mm)     /*FREE TRK=42,FREE DI

          This message documents the current allocation; this format can
          specifically requested by entering: DSNAME TSO
            F(SYS...   - this is the current DDNAME.
            DA(        - this is the data set name.
            disp       - SHR or OLD disposition.
            UNIT(      - disk unit device type.
            RECFM(     - the record format from the DCB.
            LRECL(     - the logical record length from the DCB.
            BLKSIZE(   - the blocksize from the DCB.
            DSORG(     - if not DSORG=PO, the actual DSORG from the DCB.
            VOLUME(    - the volume name.
            type       - CYL or TRK allocation.
            SPACE(     - tot is the total space allocated in "type" unit
                         sec is the secondary allocation size in "type"
            DIR(mm)    - if DSORG=PO, mm is the number of directory bloc
            FREE TRK=  - the number of available disk tracks.
            FREE DIR=  - if DSORG=PO, the number of available directory

1

    *****PDS220I //SYS00001  DD  DSN=datasetname,DISP=SHR,UNIT=3380,
    *****PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003
    *****PDS220I //  SPACE=(type,(tot,sec,mm))     /*FREE TRK=42,FREE DI

          This message documents the current allocation; this format can
          specifically requested by entering: DSNAME JCL
            //SYS..    - this is the current DDNAME.
            DSN=       - this is the data set name.
            DISP=      - SHR or OLD disposition.
            UNIT=      - disk unit device type.
            RECFM=     - the record format from the DCB.
            LRECL=     - the logical record length from the DCB.
            BLKSIZE=   - the blocksize from the DCB.
            DSORG=     - if not DSORG=PO, the actual DSORG from the DCB.
            VOLUME=    - the volume name.
            SPACE=     - type is CYL or TRK allocation.
                         tot is the total space allocated in "type" unit
                         sec is the secondary allocation size in "type"
                         if DSORG=PO, mm is the number or directory bloc
            FREE TRK=  - the number of available disk tracks.
            FREE DIR=  - if DSORG=PO, the number of available directory

    *****PDS230I SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE  INI
    *****PDS230I  RESCPY      01.01  82/06/14  82/11/29 15:37    12    1
    *****PDS230I  RESCOMP     SSI: hexvalue
    *****PDS230I  RESCOMPL-A

          This message displays directory information for a member (SPF
          statistics, SSI information and alias indicators):
            SPF STATS: - the member name.
            -A         - indicates that this member is an alias.
            VER.MOD    - if saved by SPF, version and mod numbers.
                         if SSI:, the SSI data from the directory.
            CREATED    - creation date in yy/mm/dd format.
            LAST       - last modification date in yy/mm/dd format.
            MODIFIED   - last modification time in hh:mm format
            SIZE       - number of records in the member currently.
            INIT       - number of records in the member initially.
            MOD        - number of changed records in the member.
            ID         - identifier of the user who last updated this me

 ×  *****PDS300A ENTER OPTION -- DSN=dsname,VOL=SER=volume  GRP=groupnam
          The current data set name, the associated disk volume name and
          current member group name are displayed in this subcommand pro

    *****PDS380A REENTER THE FIND STRING WITH DELIMITERS:
          Due to a previously noted error condition, the find string is
          valid.  The string and its delimiters should be reentered.

 ×  *****PDS381A REENTER THE DATA SET NAME, VOLUME AND DISPOSITION:
          Due to a previously noted error condition, the data set name
          entered could not be used.  Another data set name and any volu
          or disposition data must be reentered.

1

    *****PDS382A REENTER THE FIRST TTR:
          Due to a previously noted error condition, the first TTR addre
          entered could not be used and should be reentered.

    *****PDS383A REENTER THE SECOND TTR:
          Due to a previously noted error condition, the second TTR addr
          entered could not be used and should be reentered.

    *****PDS384A REENTER THE HEX OFFSET:
          Due to a previously noted error condition, the hexadecimal off
          entered could not be used.  The offset value should be reenter

 ×  *****PDS385A REENTER THE SSI DATA:
 ×        Due to a previously noted error condition, the hexadecimal SSI
 ×        information entered could not be used.  The SSI data should be
 ×        reentered.

    *****PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
          If the identified member should be restored, enter: y
          If the identified member should not be restored, enter: n

    *****PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?
          If the identified members should be renamed, enter: y
          If the identified members should not be renamed, enter: n

    *****PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
          If this data set should be modified by FIXPDS, enter: y
          If this data set should not be modified by FIXPDS, enter: n

    *****PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
          If the identified member should be deleted, enter: y
          If the identified member should not be deleted, enter: n

    *****PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
          If the identified members should be deleted, enter: y
          If the identified members should not be deleted, enter: n

    *****PDS400W NO MEMBERS ARE IN THE DATA SET
          This data set has no member names in its directory.

    *****PDS401W NO MEMBER NAMES ARE IN THIS RANGE
          This data set has no members whose names are in this range of

    *****PDS402W NO MEMBER NAMES MATCH THIS PATTERN
          This data set has no members whose names match these pattern
          characters.

    *****PDS450W ONE EXTRA PADDING DIRECTORY BLOCK WILL BE ADDED
          FIXPDS will add one additional directory block to the director
          because the total number of directory blocks equals the number
          directory blocks which exactly fit on a disk track boundary.

          Adding a directory block forces the end of file marker for the
          directory to the following track and circumvents various IEBCO
          problems.

1

          This circumvention is required because of an inconsistency
          between allocation and the SAM access methods used by FIXPDS.

          For example on a 3380, a data set with 46 directory blocks wil
          have its directory end of file marker placed at the beginning
          the second track by allocation; however, the SAM access method
          sometimes place the directory end of file marker at the end of
          the first track.

    *****PDS451W ALL MEMBERS IN THIS PDS WILL BE LOST
          FIXPDS RESET deletes all members from the data set.

    *****PDS460W NO HISTORY DATA IS AVAILABLE
          This module has no associated history (translator, zap or user
          supplied) IDR data.  This module was probably linked by an obs
          linkage editor.

    *****PDS470W THE PROGRAM IS PROBABLY IN A LOOP
          The previous attention was noted but an interruption point was
          not encountered in the program before this attention.

          Interruptions are checked for at a terminal input or output an
          when the input data set is read.

          This message usually means that the program is in a loop --
          the looping subcommand will be terminated and the subcommand
          that was last entered will be given control.

    *****PDS480W COMPRESS IS IN PROGRESS
          A compress has been initiated.

          Compress is performed in-place on your data set; if IEBCOPY do
          not complete its operation for any reason, the data set should
          checked with a VERIFY subcommand.

         PDS480W COMPRESS MAY NOT BE INTERRUPTED
          Attentions received during a compress operation are ignored si
          the target data set may be destroyed if IEBCOPY does not compl

    *****PDS482W BLOCKSIZE SHOULD BE EVENLY DIVISIBLE BY THE DCB LRECL
          The requested BLKSIZE is not a multiple of the logical record
          length.  This is usually an error.

    *****PDS510W THIS IS A NULL MEMBER
          This member contains no data.

 ×  *****PDS520W NO INFORMATION IS AVAILABLE
          No .? (extended help) information is available -- no warning o
          error messages are current.

          To use the extended help facility, you should enter  .?
          immediately after any subcommand which receives warning (PDSnn
          and/or error (PDSnnnE) messages.  Up to five of the most recen
          warning or error message explanations will be automatically
          requested from the HELP data set by the program.

1

    *****PDS530W THIS DATA SET IS NOT PARTITIONED
          Several subcommands are not available since they are only defi
          for partitioned data sets.

 ×  *****PDS700E THIS RANGE OF NAMES IS INVALID
          The range of names indicated is invalid (the range of names ma
          not progress from one name to a name lower in collating sequen

          For example:
              valid name ranges   --  bb:bb   bb:c   bb:bc   bb:b   bb:
              invalid name ranges --  bb:ba   bb:a

 ×  *****PDS701E THIS DATA SET IS NOT A LOAD LIBRARY
          This subcommand or operand is only defined for load libraries.

 ×  *****PDS702E THIS DATA SET IS A LOAD LIBRARY
          This subcommand or operand is not defined for load libraries.

 ×  *****PDS703E THIS MODULE HAS NO EXTERNAL SYMBOLS
          This usually indicates that the module was not created by a li
          editor or that it was constructed from incomplete data.

    *****PDS704E MODULE member HAS NO EXTERNAL SYMBOLS
          This usually indicates that the module was not created by a li
          editor or that it was constructed from incomplete data.

    *****PDS710E INVALID APF INFORMATION FORMAT; MEMBER IS ASSUMED NOT A
          The APF information for this module is invalid and the module
          is assumed to be not authorized.

 ×  *****PDS720E NOT APF AUTHORIZED; THE APF DATA IS MISSING
          The APF data for this module is not present and the module is
          assumed to be not authorized.

 ×  *****PDS721E NOT APF AUTHORIZED, THE APF DATA IS THE WRONG LENGTH
          The APF data for this module is invalid (not one byte long) an
          the module is assumed to be not authorized.

 ×  *****PDS722E THE APF DATA CAN NOT BE CHANGED
          Due to missing or invalid APF data, the APF value was not modi
          A module linked with an old linkage editor might not have APF

 ×  *****PDS723E THE RLD/CONTROL COUNT CAN NOT BE CHANGED
          Due to non-existent RLD/control data in the member, the direct
          RLD/control count was not modified.  Note that a module linked
          an obsolete linkage editor might not have a RLD/control count

    *****PDS724E RMODE AND AMODE CAN NOT BE CHANGED -- OBSOLETE LINKAGE-
          Residence and addressing mode values do not exist for this mod
          since it was linked with an obsolete linkage editor.

    *****PDS726E PAGE ALIGNMENT CAN NOT BE CHANGED -- OBSOLETE LINKAGE-E
          The page alignment flag does not exist for this module since i
          linked with an obsolete linkage editor.

1

 ×  *****PDS730E THIS SUBCOMMAND IS NOT OPERATIONAL; YOU ARE ALREADY UND
          The BROWSE, EDIT, ISPF, ISPMODE and MEMLIST subcommands cannot
          be used since ISPF was initialized before invoking PDS.

          Note: if PDS is invoked from the PDS panel, these subcommands
          can be used in PDS even though ISPF is active.

    *****PDS731E SPF IS NOT OPERATIONAL NOW
          Due to a previously noted error condition, the BROWSE, ISPF,
          EDIT, ISPMODE and MEMLIST subcommands have been disabled.

 ×  *****PDS732E CLIST PROCESSING IS NOT SUPPORTED FROM ISPMODE OR MEMLI
 ×        The % (implied CLIST) and EXEC subcommands are not currently
 ×        operational in an ISPF dialog environment.

 ×  *****PDS740E THIS MODULE HAS NO MATCHING EXTERNAL SYMBOLS
 ×        The MODULE(name) requested is not contained in this member.

    *****PDS750E A REQUIRED NOTELIST POINTER WAS NOT FOUND IN THIS MEMBE
          Due to an error condition, one or more load module records ref
          to in an overlay notelist record could not be located by FIXPD

          This message may be due to data set or equipment errors.  A VE
          subcommand may provide more information.

          The EXPANDDIR operation is terminated with the member in error
          unchanged.  Any previously moved members and their associated
          aliases are fully updated, however.

          If this problem is due to data set errors, the data set may be
          damaged and should be recovered.

    *****PDS751E A NOTELIST RECORD COULD NOT BE FOUND FOR THIS MEMBER
          Due to an error condition, an overlay notelist record could no
          be input by FIXPDS.

          This message may be due to data set or equipment errors.  A VE
          subcommand may provide more information.

          The EXPANDDIR operation is terminated with the member in error
          unchanged.  Any previously moved members and their associated
          aliases are fully updated, however.

          If this problem is due to data set errors, the data set may be
          damaged and should be recovered.

    *****PDS752E THE NUMBER OF DESIRED DIRECTORY BLOCKS MUST BE SPECIFIE
          Due to a previously noted error condition, the number of direc
          blocks could not be determined.  Therefore, the number of dire
          blocks must be specified to expand or reset the data set direc

    *****PDS770E THE FIRST FIND SUBCOMMAND MUST CONTAIN A STRING
          A default find string cannot be used since no default string h
          been established yet.

1

    *****PDS771E name IS AN INVALID SUBCOMMAND; ENTER "HELP" OR "OPTIONS
          The displayed subcommand name is not defined -- a table of val
          subcommand names follows this header.

 ×  *****PDS780E filename DCB OPEN ERROR -- REALLOCATE AND TRY AGAIN
 ×        The FILE(PDSOUT) or session copy data set could not be opened;
          correct any problems with the current allocation and try again

 ×  *****PDS781E filename DCB ATTRIBUTES CONFLICT -- USE SEQUENTIAL WITH
 ×        RECFM=FB AND LRECL=80
 ×        The attributes of the FILE(PDSOUT) and the session copy data s
          must be RECFM(F B) LRECL(80) with a blocksize which is a multi
          of 80.  It must be allocated to a sequential output data set o
          member of a partitioned data set.

 ×  *****PDS800E NO LOAD MODULE TEXT WAS FOUND FOR MEMBER
          This member contains invalid load module data and it cannot
          be restored.

    *****PDS801E END OF MEMBER SIMULATED -- REMAINDER OF TRACK SKIPPED
          Due to a previously noted input error, the remainder of the
          track cannot be read.  RESTORE will begin processing with the
          following track as if it were the beginning of a new member.

 ×  *****PDS802E A MAIN MEMBER NAMED member IS ALREADY AT THIS TTR
          The identified main member resides at this location; RESTORE
          terminates after checking for other associated members.

    *****PDS804E RESTORE ABANDONED
          Due to a previously noted error condition, RESTORE cannot cont
          You may wish to retry RESTORE with different operands.

    *****PDS805E INVALID LOAD MODULE DATA
          This member contains invalid load module data and it cannot
          be restored.

    *****PDS811E RECORD LENGTH n IS INVALID
          The indicated logical record length (0, 1, 2 or 3) is invalid
          RECFM(V) data sets.

          This type of error usually indicates that your data set DCB ha
          been altered.  If this is the case, the data set DCB can be re
          by the following subcommand:
            FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)
            (where mm, nn and pp are replaced by the proper DCB attribut

    *****PDS812E BLOCK LENGTH OF nn,nnn EXCEEDS THE DATA SET DCB BLKSIZE
          The physical blocksize exceeds the BLKSIZE of the data set.

          This type of error usually indicates that your data set DCB ha
          been altered.  If this is the case, the data set DCB can be re
          by the following subcommand:
            FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)
            (where mm, nn and pp are replaced by the proper DCB attribut

1

    *****PDS813E RECORD LENGTH OF nn,nnn EXCEEDS THE MAXIMUM DCB LRECL
          The logical record length exceeds the LRECL of the data set.

          This type of error usually indicates that your data set DCB ha
          been altered.  If this is the case, the data set DCB can be re
          by the following subcommand:
            FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)
            (where mm, nn and pp are replaced by the proper DCB attribut

    *****PDS814E BLOCK LENGTH OF nn,nnn IS NOT DIVISIBLE BY THE DCB LREC
          The physical blocksize is not a multiple of the data set's LRE

          This type of error usually indicates that your data set DCB ha
          been altered.  If this is the case, the data set DCB can be re
          by the following subcommand:
            FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)
            (where mm, nn and pp are replaced by the proper DCB attribut

    *****PDS820E THIS MEMBER IS AN ALIAS FOR member1 BUT IT POINTS TO me
          This member is actually an alias for main member member1 (acco
          to its TTR), but its directory entry indicates that it should
          alias of member2.

          This is usually caused by doing a rename of a main module with
          some utility which does not update the associated alias module
          directory entries correctly.

          This type of error could cause serious problems if the members
          in your LPALIB (you may not be able to IPL).

          To correct this problem with PDS, issue the following
          subcommand:
            RENAME member1 member1
               (where member1 is the name of the main module identified

    *****PDS821E RMODE ENTRY DOES NOT CORRESPOND WITH MEMBER member
          The residence mode entry for this alias member does not match
          residence mode entry of the identified main module.

          This type of error is unusual; the main module and its aliases
          should be reinstalled.

          To correct this problem with PDS, issue the following
          subcommands:
            ATTRIB member
               (where member is the main member identified above).
            ATTRIB member RMODExx
               (where RMODExx is the RMODE value displayed
                by the above ATTRIB subcommand)

1

    *****PDS822E MAIN AMODE ENTRY DOES NOT CORRESPOND WITH MEMBER member
          The addressing mode entry for this alias member does not match
          the addressing mode entry of the identified main module.

          This type of error is unusual; the main module and its aliases
          should be reinstalled.

          To correct this problem with PDS, issue the following
          subcommands:
            ATTRIB member
               (where member is the main member identified above).
            ATTRIB member AMODExx
               (where AMODExx is the AMODE value displayed
                by the above ATTRIB subcommand)

    *****PDS823E RLD/CONTROL COUNT DOES NOT CORRESPOND WITH MEMBER membe
          The RLD/control count for this alias member does not match
          the RLD/control count of the identified main module.

          This type of error is unusual; the main module and its aliases
          should be reinstalled.

          In MVS/XA, this count field is used by program fetch to constr
          a channel program that will load the member.

          If this error is not resolved before program fetch uses this m
          fetch may operate in a degraded mode.

          To correct this problem with PDS, issue the following
          subcommand for the main module and each of its aliases:
            ATTRIB memberx RLDFIX

    *****PDS824E DUPLICATE MEMBER NAME -- IGNORED
          This member name has previously been encountered in the data s
          directory.

          Your data set has been damaged -- it should be recovered in so
          fashion; it may suffice to just delete one of the duplicate me
          names.

    *****PDS825E MEMBER NAME IS OUT OF SEQUENCE -- IGNORED
          Member names higher in the collating sequence than this member
          have previously been encountered in the data set directory.

          Your data set has been damaged -- it should be recovered in so
          fashion; it may suffice to delete the out-of-sequence member
          name or the member name just before this one in the directory.

1

    *****PDS826E THE DIRECTORY RLD/CONTROL COUNT DOES NOT MATCH THE FIRS
          ENTRY
          The RLD/control count for this member does not match the numbe
          of RLD or control records following the first TEXT record.

          In MVS/XA, this count field is used by program fetch to constr
          a channel program that will load the member.

          If this error is not resolved before program fetch uses this m
          fetch may operate in a degraded mode.

          To correct this problem with PDS, issue the following
          subcommand for the main module and each of its aliases:
            ATTRIB memberx RLDFIX

 ×  *****PDS827E member1 IS AN ALIAS FOR THIS MEMBER BUT IT POINTS TO me
 ×        Member1 is actually an alias for this main member (according t
 ×        TTR), but its directory entry indicates that it should be an a
 ×        of member2.
 ×
 ×        This is usually caused by doing a rename of a main module with
 ×        some utility which does not update the associated alias module
 ×        directory entries correctly.
 ×
 ×        This type of error could cause serious problems if the members
 ×        in your LPALIB (you may not be able to IPL).
 ×
 ×        To correct this problem with PDS, issue the following
 ×        subcommand:
 ×          RENAME mmember mmember
 ×             (where mmember is the name of the main member)

    *****PDS830E OBTAIN ERROR -- PROGRAM TERMINATED
          The data set name could not be found in the VTOC (Volume Table
          Contents); this is probably a program error.

    *****PDS831E UNABLE TO OPEN DATA SET
          The open for the input data set failed; this is probably a
          program error.

    *****PDS832E DUMMY MEMBER ADD FAILED, RC=8
          A dummy member, with name 9FIXPDS, was not added as expected t
          the data set directory; this is probably a program error.

    *****PDS833E DUMMY MEMBER DELETE FAILED, RC=8
          A dummy member, with name 9FIXPDS, was not deleted as expected
          the data set directory; this is probably a program error.

    *****PDS834E ERROR IN GENERAL FAIL SERVICE ROUTINE; R15=nn
          The general FAIL system message routine failed with the indica
          return code; this is probably a program error.

    *****PDS835E ERROR IN DAIRFAIL SERVICE ROUTINE; R15=nn
          The DAIRFAIL system message routine failed with the indicated
          code; this is probably a program error.

1

    *****PDS836E I/O ERROR IN DIRECTORY
          The system directory management routines indicate that the dir
          for this data set contains one or more I/O errors.

          This I/O error may be due to data set or equipment errors; ent
          a VERIFY subcommand may provide more information.

          Data set recovery will be required if this is a data set error

    *****PDS840E INVALID HEXADECIMAL STRING LENGTH
          At most 32 hexadecimal digits may be used for a search string.

    *****PDS841E INVALID HEXADECIMAL CHARACTERS
          Only numeric characters and the characters from A through F ma
          used in hexadecimal strings.

    *****PDS842E THIS SEARCH STRING IS TOO LONG
          At most 16 characters may be used for a search string.

    *****PDS843E ONLY DISK DATA SETS ARE SUPPORTED
          The target data set must exist on disk.

    *****PDS844E FILE(filename) HAS CONCATENATED DATA SETS -- ONLY INDIV
    *****DATA SETS ARE SUPPORTED
          Concatenated data sets are not supported.

    *****PDS850E member IS BEING UPDATED BY username
          This member is being modified by the named user or JOB; this m
          is currently owned by the indicated user or JOB and its status
          not be changed.

    *****PDS851E THIS DATA SET IS BEING UPDATED BY username
          This data set is being modified by the named user or JOB; this
          set is currently owned by the indicated user or JOB and its st
          can not be changed.

    *****PDS852E member ALREADY EXISTS
          This member cannot be added to the data set; this member name
          already in the data set.

    *****PDS853E member NOT FOUND
          This member is not in the data set.

    *****PDS854E member IS AN INVALID MEMBER NAME
          This member name is invalid; member names may be entered in ei
          character or hexadecimal mode.

          Character member names may be from one to eight bytes long wit
          imbedded blanks, commas, parentheses, colons or slashes.

          Hexadecimal member names may contain from one to sixteen hexad
          digits delimited by x' and '.  Note: x'd7c4e2f9' and PDS9 are
          entirely equivalent; also, x'333' and x'0333' are equivalent.

1

    *****PDS855E THE DATA SET DIRECTORY IS FULL AND MEMBERS CANNOT BE AD
          The directory is full; if you are currently trying to save a m
          using an editor, you may wish to save it in another data set).

          This type of problem can be resolved in several ways:
            1.  clean up the directory of the data set by deleting obsol
                members and make room for new member names.
            2.  split the data set into two (or more) data sets.
            3.  reallocate the data set (with a larger directory) and co
                all old members to the replacement data set.
            4.  expand the directory with FIXPDS.  For example, enter
                FIXPDS EXPAND(30)  to add 30 directory blocks.

    *****PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS
          This alias member has no associated main member.  This type of
          alias member is termed an orphan.

          This type of error is usually caused by not linking a main mod
          and all of its aliases; the main module and its aliases should
          reinstalled.

          To correct this problem with PDS, issue the following
          subcommands for each identified orphan member:
            DELETE memberz
               (where memberz is the orphan member)
            ALIAS memberx memberz
               (where memberx is the correct main member)

    *****PDS861E THE ALIAS DIRECTORY ENTRY NOTES THE MAIN MEMBER NAME AS
          This message displays the name of the main member for this ali
          member as noted by its directory entry.

    *****PDS862E ERROR IN GQSCAN DATA
          This message indicates that ENQUEUE check parameters are incor
          this is probably a program error.

    *****PDS864E member IS AN APPARENT ALIAS FOR THIS MEMBER
          This member and the identified member both point to the same T
          address but neither has its alias bit set.

          These members are called apparent aliases and the actual owner
          of the member data can not be determined.

          This type of error is unusual; if the data set is copied or
          compressed, IEBCOPY should fix this situation by creating two
          identical members during the copy.

          To correct this problem with PDS, determine which apparent
          alias member name should correspond to the member data and iss
          the following subcommand:
            DELETE memberx
               (where memberx is the non-corresponding alias name)

1

    *****PDS865E THE IEBCOPY OUTPUT CAN NOT BE OPENED
          A compress has been performed but a summary of IEBCOPY's messa
          cannot be provided since the message data set can not be opene

          This is probably a program error.

    *****PDS870E PDS DIRECTORIES MUST BE CONTAINED IN ONE EXTENT
          The directory of a partitioned data set must be totally contai
          the first extent of the data set.

          From VERIFY, it indicates that your data set was allocated wit
          invalid directory and the data set should not be used as it ma
          fail in program load or when used by IEBCOPY.

          From FIXPDS, it indicates that your data set will require more
          its first extent to contain the expanded (or reset) directory.
          This is not permitted as it would create an invalid data set
          directory.

    *****PDS871E A TTR FOR THIS MEMBER WAS NOT FOUND
          Due to an error condition, a record pointed by this member's
          directory entry could not be found in this load module.

          This message may be due to data set or equipment errors.  A VE
          subcommand may provide more information.

          If this error occurs in FIXPDS, the subcommand is terminated b
          changing the member in error.  Any previously moved members an
          their associated aliases are fully updated, however.

          If this problem is due to data set errors, the data set may be
          damaged and should be recovered.

    *****PDS872E THIS MEMBER IS AFTER THE DATA SET END-OF-FILE
          This member's data follows the end of data set marker (DS1LSTA
          input at the last open of this data set by PDS.

          If another user has saved into the data set, enter a change
          subcommand to the same data set and try this subcommand again.

          If this is not sucessful, it indicates that your data set cont
          one or more invalid TTR pointers and that the data set has bee
          damaged -- the data set should be recovered in some fashion.

    *****PDS873E TTR IS BEYOND THE USED PORTION OF THE DATA SET
          A TTR pointer in this member's directory has a value which exc
          the end of data marker for the data set.

          This type of error is unusual; it indicates that your data set
          contains one or more invalid TTR pointers and that the data se
          been damaged -- the data set should be recovered in some fashi

1

    *****PDS874E TSO COMMAND NAME IS INVALID
          TSO PARSE service indicates that this TSO command name was inv

          Valid TSO command names follow these rules:
            1.  The TSO command name should be from one to eight bytes l
            2.  The first character of the TSO command name must be a
                alphabetic or national character.
            3.  Any additional characters should be alphabetic, numeric
                or national characters.

    *****PDS875E THIS DATA SET HAS NO DIRECTORY BLOCKS
          This is a null data set -- it contains no tracks and consequen
          no directory blocks.

          When the data set takes an extent, it will receive actual disk
          tracks and directory blocks.

    *****PDS876E A DIRECTORY RECORD HAS AN INCORRECT LENGTH (NOT 256 BYT
          This data set has an invalid directory block.  Directory block
          should be 256 characters long and each block should contain an
          eight byte key.

          This type of error usually indicates that your data set has be
          written over and the data set should be recovered in some fash

    *****PDS877E INVALID SUBCOMMAND NAME
          TSO PARSE service indicates that this subcommand name was inva

          Valid subcommand names follow these rules:
            1.  The subcommand name should be from one to eight bytes lo
            2.  The first character of the subcommand name must be a
                alphabetic or national character.
            3.  Any additional characters should be alphabetic, numeric
                or national characters.

    *****PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE xxx ARE INCOMPAT
          Residence mode ANY and an addressing mode of either 24 or ANY
          incompatible; this is an invalid combination of linkage editor
          attributes.

    *****PDS881E REENTRANT ATTRIBUTE CONFLICTS WITH NOT REUSABLE
          A reentrant attribute is incompatible with a not reusable attr
          this is an invalid combination of linkage editor attributes.

    *****PDS882E TEST ATTRIBUTE CONFLICTS WITH NOT EDIT
          A TEST attribute is incompatible with a NOT EDIT attribute;
          this is an invalid combination of linkage editor attributes.

    *****PDS883E REUSABLE ATTRIBUTE CONFLICTS WITH SCATTER
          A reusable attribute is incompatible with a scatter load attri
          this is an invalid combination of linkage editor attributes.

1

    *****PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH xxx
          This message documents an incompatible combination of the over
          attribute and another linkage editor attribute as follows:
            1.  Overlay and reentrant are incompatible.
            2.  Overlay and reusable are incompatible.
            3.  Overlay and scatter load are incompatible.
            4.  Overlay and RMODE ANY are incompatible.
            5.  Overlay and AMODE 31 are incompatible.
            6.  Overlay and AMODE ANY are incompatible.

    *****PDS892E READ MULTIPLE FAILED
          PDS has an input mode called "read multiple" which can read
          an entire track of disk data at a time.  A read multiple can f
          for any of several reasons:
            I/O error    - an I/O error is on the current track
            invalid addr - the disk TTR address provided is invalid
            not capable  - the disk device can not perform a read multip

          After read multiple fails, PDS uses its alternate double
          buffering input mode for the remainder of the subcommand.  Wit
          the next subcommand, read multiple is attempted again.

          If many subcommands issue failure messages for read multiple,
          consider changing the mode for input buffering to double with
          the following subcommand:
            CONTROL DOUBLE

    *****PDS910E TSO COMMAND name IS NOT ALLOWED
          You are not authorized to use this TSO command.  Contact your
          systems support staff if this restriction causes a problem.

    *****PDS920E SUBCOMMAND name IS NOT ALLOWED FOR THIS DATA SET
          You are not authorized to use this subcommand.  Contact your
          systems support staff if this restriction causes a problem.

    *****PDS930E name IS AN INVALID SUBCOMMAND ABBREVIATION
          This subcommand name is not allowed.  You must enter additiona
          characters to create a valid subcommand name.

    *****PDS990E EXTENT INITIALIZATION READ FAILED
          The first read for an extent of this data set failed.  This ty
          of problem is unusual unless your directory contains invalid T
          pointers.

1

    *****PDS991E PERMANENT I/O ERROR AT TTR=hexttr
          An uncorrectable I/O error was encountered at the displayed TT
          address.

          This error may be due to data set or equipment errors.  A VERI
          subcommand may provide more information.

          Data set recovery will be required if this is a data set error

    *****PDS998E ABEND Sxxx LOADING THIS MODULE
          The displayed ABEND code was received while loading this modul

          If you have your user profile set to WTPMSG as in the TSO comm
          PROFILE WTPMSG, you should have also first received an IEA703I
          message with the same ABEND code and a possible return code.

          In the following table of common messages, the ABEND identifie
          from the PDS998E message and the first part of the associated
          IEA703I message are listed with a short error description:

            ABEND  ASSOCIATED MSG   DESCRIPTION
            -----  --------------   -----------
            S106   IEA703I 106-C    Insufficient storage to load the mod
            S106   IEA703I 106-D    Invalid record type in load module
            S106   IEA703I 106-E    Invalid TTR address in load module
            S106   IEA703I 106-F    Uncorrectable I/O error in load modu
            S306   IEA703I 306-8    Uncorrectable I/O error searching li
            S706   IEA703I 706      "not executable" module


    *****PDS999E ABEND Sxxx Unnnn AT hexvalue IN PROGRAM progname
          This ABEND was noted during PDS execution. The various
          fields are as follows:
            Sxxx     - the system ABEND code
            Unnnn    - the user ABEND code
            hexvalue - if signed, an offset from the program entry point
                       otherwise, the address of the ABENDing instructio
            progname - the name of the ABENDing program (if available)
1                            APPENDIX F: PDS SUGGESTION FORM
+                            _______________________________
- Use this form to send suggestions to improve PDS and its documentation
0 Date Submitted: _____/_____/_____            PDS Release Level _______
0 Document (if in error): ____________________ Page Number:_____________
0 Description of Suggestion:
-
-
-
-
-
0
  Proposed Implementation:
-
-
-
-
-
0
  Optional:
         Name: ________________________________  Telephone: (_____)_____
0     Company: _________________________________________________________
0     Address: _________________________________________________________
0        City: ____________________________  State: _____________  ZIP:

0 To mail this form:
    1.  fold this page so that the mailing address on the reverse side s
    2.  tape closed.
    3.  optionally, fill in return address.
    4.  apply the appropriate postage.
1
-
-
-
-
-


  ------------------


-
-
-
-
-
-

  ------------------

  FROM: ______________________________
0       ______________________________
0       ______________________________
0       ______________________________
0

0                                      TO:  A. Bruce Leland
0                                           Hitachi America, LTD.
0                                           2210 O'Toole Avenue
0                                           San Jose, Calif.  95131
1                            APPENDIX G: PDS SURVEY FORM
+                            ___________________________
0 Please complete this form to improve PDS and its documentation.
0 1.  Which PDS commands are in use at your installation?
      ( )  CBT's original MVS version (from before 1981).
      ( )  CBT's PDS 5.x (it identifies the data set on initialization).
      ( )  CBT's PDS 6.0 (it identifies itself on initialization).
      ( )  CBT's PDS 6.1 (it identifies itself on initialization).
      ( )  CBT's PDS 6.2 (it identifies itself on initialization).
      ( )  CBT's PDS 6.3 (it identifies itself on initialization).
      ( )  CBT's PDS 7.0 (it identifies itself on initialization).
      ( )  Los Angeles Users' Group PDS or PDS4.
      ( )  Other, please identify its origin ___________________________
0 2.  What names are used for your installation's PDS commands? ________
0 3.  How many PDS command users are at your installation? _____
0 4.  Are all of these systems programmers? _____
      If no, what other types of users?    _____________________________
0 5.  Mark any of the following PDS subcommands not used at your install
      for reasons of data integrity?
      ( )  % (CLIST reference)     ( )  EXEC                        ( )
      ( )  ALIAS                   ( )  FIND                        ( )
      ( )  ATTRIB                  ( )  FIXPDS (EXPANDDIR)          ( )
      ( )  BROWSE                  ( )  FIXPDS (RESET)              ( )
      ( )  CHANGE                  ( )  FIXPDS (any other option)   ( )
      ( )  COMPARE                 ( )  FSE                         ( )
      ( )  COMPRESS                ( )  HELP                        ( )
      ( )  CONTROL                 ( )  HISTORY                     ( )
      ( )  DISPLAY                 ( )  IF                          ( )
      ( )  DIRENTRY                ( )  ISPF                        ( )
      ( )  DELETE                  ( )  ISPMODE                     ( )
      ( )  DSNAME                  ( )  LIST                        ( )
      ( )  DSPRINT                 ( )  MAP                         ( )
      ( )  EDIT                    ( )  MEMLIST                     ( )
0 6.  Do you personally consider any of the above subcommands hazardous?
      If yes, which subcommands ________________________________________
      and why __________________________________________________________
0 7.  Have any PDS subcommands caused data integrity problems? _____
      If yes, which subcommands ________________________________________
      and in what manner _______________________________________________
0 8.  Does your installation restrict the use of the PDS program? _____
      If yes, how is this done? ________________________________________
0 9.  Does your installation restrict the use of any PDS subcommands? __
      If yes, which subcommands ________________________________________
      and how is this done? ____________________________________________
0 10. Have you sucessfully used PDS member lists (from 6.2)? _____
0 11. Have you sucessfully used the extended help facility (from 6.2)? _
0 12. Have you sucessfully used the ISPMODE subcommand (from 6.3)? _____
0 13. Have you sucessfully used the MEMLIST subcommand (from 7.0)? _____
1
0 14.  Which of the following types of DASD do you have installed (mark
       vendor products as the IBM equivalent, if any):
       ( )  2305-1                  ( )  3330 on a 3830-1 SCU      ( )
       ( )  2305-2                  ( )  3330 on a 3830-2 SCU      ( )
       ( )  2314                    ( )  3330 on a 3880 SCU        ( )
                                                                   ( )
       ( )  other ______________________________________________________
0 15.  Has your installation installed the PDS panels in SPF or ISPF? __
       If yes, where is access to PDS maintained?
       ( )  in the main option panel -- enter the identifier __________
       ( )  in the utility option panel -- enter the identifier ________
       ( )  in a user option panel
0 16.  Have you had problems with PDS ABEND recovery? _____
0 17.  Have you had problems with PDS I/O error recovery? _____
0 18.  Has your installation modified the PDS command? _____
       If yes, please describe briefly _________________________________
       _________________________________________________________________
       _________________________________________________________________
0 19.  Identify any areas which need additional or improved documentatio
       _________________________________________________________________
       _________________________________________________________________
0 20.  Identify any subcommands which need improvement and state any rea
       _________________________________________________________________
       _________________________________________________________________
       _________________________________________________________________
0 21.  Identify any additional PDS commands or functions that would bene
       or your installation: ___________________________________________
       _________________________________________________________________
       _________________________________________________________________
0 22.  Identify any additional concerns regarding the PDS command: _____
       _________________________________________________________________
       _________________________________________________________________
0
0 23.  Optional:
         Name: ________________________________  Telephone: (_____)_____
0     Company: _________________________________________________________
0     Address: _________________________________________________________
0        City: ____________________________  State: _____________  ZIP:

0 This form may be sent to:
                A. Bruce Leland
                Hitachi America, LTD.
                2210 O'Toole Avenue
                San Jose, Calif. 95131
