         MACRO
&LABEL   XWTO  &REPLY=*,&ROUTCDE=,&DESC=,&MSGTYP=,&MCSFLAG=,&ECB=,&MF=I
.**********************************************************************
.*       THIS MACRO IS A SUBSTITUTE FOR WTO AND WTOR THAT PROVIDES    *
.*       GREATER CONVENIENCE WHEN IT IS NECESSARY TO ASSEMBLE MESSAGES*
.*       FROM VARIABLE PIECES. PARAMETER DETAILS ARE:                 *
.*             REPLY=(AREA,LEN,ECB) SHOULD BE GIVEN FOR WTOR,         *
.*             DESC & ROUTCDE ARE AS FOR WTO,                         *
.*             MF HAS THE FOLLOWING FORMS (OPTIONAL PARMS BRACKETED): *
.*             MF=<I,<LISTNAME>>                                      *
.*                      (GENS AND USES INLINE <NAMED> PARMS)          *
.*             MF=(L,<LISTADDR>,<LEN>)                                *
.*                      (GENS PARM INLINE <OR AT ADDR> <AND SETS LEN>)*
.*             MF=(G,LISTADDR,<LEN>)                                  *
.*                      (GENS AND USES PARMS AT ADDR <AND SETS LEN>)  *
.*             MF=(M,LISTADDR)                                        *
.*                      (MODIFIES PARM LIST AT ADDR)                  *
.*             MF=(E,LISTADDR)                                        *
.*                      (MODIFIES AND USES PARM LIST AT ADDR)         *
.*                                                                    *
.*       THE MESSAGE TEXT IS PROVIDED IN 1 TO N POSITIONAL MESSAGE    *
.*       SEGMENTS. A SEGEMENT MAY SIMPLY BE A CHARACTER STRING (FOR A *
.*       CONSTANT PART OF A MESSAGE), OR MAY BE OF THE FORM           *
.*             (LABEL,VALUE,<LENGTH>)                                 *
.*       THE LABEL NAMES THE NEW SEGMENT IN THE I, L AND G FORMS, AND *
.*       SPECIFIES THE SEGMENT TO BE CHANGED IN THE M AND E FORMS.    *
.*       THE VALUE MAY BE ONE OF THE FOLLOWING (N REPRESENTING A      *
.*       DIGIT, AND X A LETTER):                                      *
.*             'TEXT'        (A CHARACTER LITERAL),                   *
.*             NN'TEXT'      (A CHARACTER LITERAL WITH LENGTH),       *
.*             X<LNN>'TEXT'  (A CONSTANT WITH OPTIONAL LENGTH),       *
.*             NN            (UNDEFINED VALUE WITH LENGTH)            *
.*                           (NOT ALLOWED IF MF=I, G, M OR E),        *
.*             XXXX          (VARIABLE TO BE STORED IN MESSAGE)       *
.*                           (NOT ALLOWED IF MF=(L,,<LEN>)),          *
.*             (XX)          (REGISTER FORM OF VARIABLE)              *
.*                           (NOT ALLOWED IF MF=(L,,<LEN>)),          *
.*             C:XXXX        (COLON FORM OF VARIABLE, C=A, S OR *)    *
.*                           (A INDICATES ACCESS BY ADCON REQUIRED)   *
.*                           (S INDICATES ACCESS BY S-CON REQUIRED)   *
.*                           (* INDICATES INDIRECT ADDRESSING)        *
.*                           (NOT ALLOWED IF MF=(L,,<LEN>)).          *
.*                                                                    *
.*       THE LENGTH MAY BE SPECIFIED IN ASSOCIATION WITH A <C:>XXXX   *
.*       OR (XX) VALUE, TO INDICATE THE LENGTH TO BE MOVED. IN THE    *
.*       I, G AND L FORMS OF THE MACRO, THE LENGTH IS REQUIRED IN THIS*
.*       CASE. THE LENGTH MAY BE AN ABSOLUTE EXPRESSION OR, FOR THE   *
.*       M AND E FORMS, MAY BE (XX) OR *:XX, INDICATING THAT THE      *
.*       LENGTH IS IN A REGISTER OR A HALFWORD STORAGE LOCATION.      *
.*                                                                    *
.*       THE ROUTCDE, DESC, MSGTYP AND MCSFLAG KEYWORDS OF THE IBM WTO*
.*       MACRO ARE SUPPORTED, AND MAY BE SUPPLIED IN THE M-FORM AND   *
.*       E-FORM OF THE MACRO.                                         *
.*       HERE ARE SOME SAMPLE MACRO CALLS:                            *
.*                                                                    *
.*       XWTO 'FILE ',(DDNAME,'SYSPRINT'),' NOT OPENED.',MF=(I,NOPEN) *
.*       XWTO  (DDNAME,8'SYSIN'),MF=(E,NOPEN)                         *
.*       GETMAIN R,LV=PLEN                                            *
.*       XWTO  'DATA SET ',(DSNAME,44' '),' DELETED.',MF=(L,(1),PLEN) *
.*       XWTO  (DSNAME,MYDSN,(LENREG)),MF=(E,(1))                     *
.*                                                                    *
.*             MACRO WRITTEN BY ARB, 11/12/76                         *
.*             MACRO REVISED BY ARB, 8/24/78                          *
.*             MACRO REVISED BY ARB, 1/11/79                          *
.**********************************************************************
         GBLC  &XWTOFLD(200)      MESSAGE SEGMENT NAMES
         GBLC  &XWTOID(200)       CONTAINING PARM LIST NAMES
         GBLC  &XWTOAL            RETURN VALUE FROM XWTOLKUP MACRO
         GBLA  &XWTOIX            NUMBER OF USED TABLE ELEMENTS
         GBLA  &XWTOLK            TABLE SUBSCRIPT FOUND BY XWTOLKUP
         GBLB  &UHBG,&UHBM        GENERATE & MODIFY SWITCHES
         GBLC  &UHBGL             UHBMACS GENERATED LABEL
         GBLC  &UHBL              UHBLKUP RETURN VALUE
.*
         LCLC  &S,&ID,&L,&ND,&R
         LCLB  &B(16)
         LCLA  &I,&J,&K
&S       SETC  '&SYSNDX'          SAVE UNIQUE NUMBER
.*
.*       DETERMINE PARM LIST LABEL AND GENERATE PRELUDE CODE.
.*
         AIF   ('&MF(1)' EQ 'I').IPRE  FORCE LABEL FOR I-FORM
&LABEL   UHBBGEN MF=&MF
&ID      SETC  '&UHBGL'           SAVE PARM LIST LABEL
         AGO   .DOGEN
.IPRE    ANOP
&ID      SETC  'UHB&S.P'          GENERATED PARM LIST NAME
&LABEL   UHBBGEN MF=(I,&ID)
.DOGEN   AIF   (NOT &UHBG).DOMOD  POSSIBLY SKIP GENERATION
.*
.*       HANDLE THE REPLY OPERAND (IN-LINE LIST).
.*
         AIF   ('&REPLY&ECB' EQ '*').INOR  IF REPLY NOT PASSED
         UHBGEN &REPLY(2),1,COM=REPLY.LENGTH,RQR=Y,MF=&MF
         UHBGEN &REPLY(1),3,COM=REPLY.AREA,RQR=Y,MF=&MF
         UHBGEN &REPLY(3)&ECB,4,COM=ECB,RQR=Y,MF=&MF
.*
.*       GENERATE THE IN-LINE MESSAGE SEGMENTS.
.*
.INOR    AIF   (N'&SYSLIST NE 0).GOTMSG
         MNOTE 8,'XWTO02 NO MESSAGE SEGMENTS SPECIFIED.'
         AGO   .IDONE
.GOTMSG  ANOP
&B(1)    SETB  ('&ROUTCDE' NE '' OR '&DESC' NE '' OR '&MSGTYP' NE '' OR*
                '&MCSFLAG' NE '')
.*             &B(1)=1 IF ANY MCS STUFF WAS PASSED
&B(4)    SETB  ('&MSGTYP' NE '' AND '&MSGTYP' NE 'N')
.*             &B(4)=1 IF MSGTYP (TO BE) SUPPLIED
         AIF   ('&MCSFLAG' EQ '').INOMCS    TRANSLATE MCS CODES TO BITS
&I       SETA  1
.IMCSLKP UHBLKUP &MCSFLAG(&I),VAL=(REG0,RESP,REPLY,BRDCST,HRDCPY,      *
               QREG0,NOTIME,NOCPY),OUT=(2,3,5,6,7,8,9,14),             *
               NAME=MCSFLAG
         AIF   ('&UHBL' EQ '').INXMCS  ALLOW FOR ERROR
&B(&UHBL) SETB (1)
.INXMCS  ANOP
&I       SETA  &I+1
         AIF   (&I LE N'&MCSFLAG).IMCSLKP
.INOMCS  ANOP
&ND      SETC  'UHB&S.T'          END OF MESSAGE LABEL
         UHBGEN &ND-*,2,COM=MESSAGE.LENGTH,MF=&MF
         UHBGENV B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)0000&B(*
               14)00',COM=MCS.FLAGS,MF=&MF     GENERATE MCS FLAGS
&I       SETA  1                  &SYSLIST INDEX
.ILOOP   AIF   ('&SYSLIST(&I)' NE '').ILOK DIAGNOSE EMPTY SEGMENT
         MNOTE 4,'XWTO03 EMPTY MESSAGE SEGMENT IGNORED.'
         AGO   .INEXT
.ILOK    AIF   (N'&SYSLIST(&I) GT 1).IMULT
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').ITEXT
         MNOTE 8,'XWTO04 INVALID TEXT SEGMENT: &SYSLIST(&I)'
         AGO   .INEXT
.ITEXT   AIF   ('&SYSLIST(&I)'(1,1) EQ '''').ILIT
         AIF   ('&SYSLIST(&I)'(1,1) GE '0' AND '&SYSLIST(&I)'(1,1)     *
               LE '9').ILEN
         UHBGENV &SYSLIST(&I),COM=CONSTANT.TEXT,MF=&MF
         AGO   .INEXT
.ILIT    UHBGENV C&SYSLIST(&I),COM=CONSTANT.TEXT,MF=&MF
         AGO   .INEXT
.ILEN    UHBGENV CL&SYSLIST(&I),COM=CONSTANT.TEXT,MF=&MF
         AGO   .INEXT
.IMULT   AIF   (N'&SYSLIST(&I) EQ 2).IM2
         AIF   ('&MF(1)' NE 'L' OR '&MF(2)' NE '').IM3
         MNOTE 8,'XWTO05 SEGMENT LENGTH INVALID FOR MF=L.'
         MEXIT
.IM3     AIF   ('&SYSLIST(&I,3)'(1,1) NE '(').IM2
         MNOTE 8,'XWTO06 REGISTER SEGMENT LENGTH NOT ALLOWED FOR MF=&MF*
               (1)..'
         MEXIT
.IM2     ANOP
&L       SETC  '&SYSLIST(&I,1)'   NAME OF SEGMENT TO GEN
.*
.*       LOOK THE SEGMENT LABEL UP TO SEE IF AN ALIAS LABEL HAS
.*       ALREADY BEEN GENERATED FOR THE START OF THE PARM LIST (BY THE
.*       PREVIOUS USE OF THE NAME IN A M OR E FORM MACRO).
.*       ADD THE LABEL TO THE TABLE IF NOT THERE ALREADY.
.*
         XWTOLKIN &L,&ID          LOOK UP AND POSSIBLY INSERT IN TABLE
         AIF   (&XWTOLK EQ 0).INEW     BRANCH IF NEW SYMBOL, OR        *
                                  IF INDIRECTLY DEFINED.
&XWTOAL  EQU   &ID                DEFINE PREVIOUSLY USED LIST NAME
.INEW    AIF   (N'&SYSLIST(&I) GT 2).IM3LEN
         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '''').IMLIT
         AIF   ('&SYSLIST(&I,2)'(1,1) GE '0' AND '&SYSLIST(&I,2)'(1,1) *
               LE '9').IMLEN
&L       UHBGENV &SYSLIST(&I,2),COM=VARIABLE.TEXT,MF=&MF
         AGO   .INEXT
.IMLIT   ANOP
&L       UHBGENV &SYSLIST(&I,2),COM=VARIABLE.TEXT,MF=&MF
         AGO   .INEXT
.IMLEN   ANOP
&J       SETA  K'&SYSLIST(&I,2)
         AIF   ('&SYSLIST(&I,2)'(&J,1) EQ '''').IMLLIT IF ENDS IN QUOTE
&L       UHBGENV ,&SYSLIST(&I,2),COM=VARIABLE.TEXT,TYPE=C,RQR=Y,       *
               NAME=MESSAGE-TEXT,MF=&MF
         AGO   .INEXT
.IMLLIT  ANOP
&L       UHBGENV CL&SYSLIST(&I,2),COM=VARIABLE.TEXT,MF=&MF
         AGO   .INEXT
.IM3LEN  ANOP
&J       SETA  K'&SYSLIST(&I,2)
         AIF   ('&SYSLIST(&I,2)'(&J,1) EQ '''').IM3ERR
&L       UHBGENV &SYSLIST(&I,2),(&SYSLIST(&I,3)),COM=VARIABLE.TEXT,    *
               TYPE=C,MF=&MF
         AGO   .INEXT
.IM3ERR  MNOTE 8,'XWTO09 VARIABLE LENGTH NOT ALLOWED WITH LITERAL MESSA*
               GE SEGMENT.'
.INEXT   ANOP
&I       SETA  &I+1               ON TO NEXT SEGMENT
         AIF   (&I LE N'&SYSLIST).ILOOP
.IDONE   AIF   (&B(1)).IRD
&ND      EQU   *                  END OF MESSAGE TEXT
         AGO   .DOMOD
.IRD     ANOP
&ND      XWTORD &DESC,0000,DESCRIPTOR  GENERATE DESC. CODES
         AIF   ('&MCSFLAG' NE '' AND (&B(2) OR &B(8))).NORT
         XWTORD &ROUTCDE,4000,ROUTE    GENERATE ROUTE CODES
         AGO   .JRT
.NORT    XWTORD &ROUTCDE,0000,ROUTE
.JRT      AIF   ('&MSGTYP' EQ 'N' OR '&MSGTYP' EQ '').DOMOD
&I       SETA  1
&B(1)    SETB  (0)
&B(2)    SETB  (0)
&B(3)    SETB  (0)
&B(6)    SETB  (0)
         AIF   ('&MSGTYP' EQ 'Y').IMSGT
&I       SETA  1
.IMSGLKP UHBLKUP &MSGTYP(&I),VAL=(JOBNAMES,STATUS,ACTIVE,SESS),        *
               OUT=(1,2,3,6),NAME=MSGTYP    LOOK UP MSGTYP NAMES
         AIF   ('&UHBL' EQ '').INXMSGT
&B(&UHBL) SETB (1)
.INXMSGT ANOP
&I       SETA  &I+1
         AIF   (&I LE N'&MSGTYP).IMSGLKP
.IMSGT   UHBGENV B'&B(1)&B(2)&B(3)00&B(6)0000000000',COM=MSGTYPE.FLAGS,*
               MF=&MF
.*
.*       GENERATE INTERLUDE CODE
.*
.DOMOD   UHBEGEN MF=&MF
         UHBBMOD MF=&MF
         AIF   (NOT &UHBM).DOSVC  IF NO MODIFY NEEDED
.*
.*       HANDLE MODIFICATION OF REPLY PARAMETERS.
.*
         AIF   ('&REPLY&ECB' EQ '*').ONOR
         UHBMOD 0(1),&REPLY(2),1,COM=REPLY.LENGTH,MF=&MF
         UHBMOD 1(1),&REPLY(1),3,COM=REPLY.AREA,MF=&MF
         UHBMOD 4(1),&REPLY(3)&ECB,4,COM=ECB,MF=&MF
.ONOR    ANOP
.*
.*       NOW HANDLE MODIFICATION OF MESSAGE SEGMENTS.
.*
&I       SETA  1                  &SYSLIST INDEX
&R       SETC  'UHB&S.A'          PROVISIONAL ALIAS NAME
         AIF   (N'&SYSLIST EQ 0).ODONE
.OLOOP   AIF   (N'&SYSLIST(&I) GT 1).OMULT
         AIF   ('&MF(1)' NE 'E' AND '&MF(1)' NE 'M').ONEXT
         MNOTE 8,'XWTO07 UNLABELLED MESSAGE SEGMENT IGNORED.'
         AGO   .ONEXT
.OMULT   ANOP
&L       SETC  '&SYSLIST(&I,1)'   NAME OF DESTINATION SEGMENT
         AIF   ('&MF(1)' NE 'E' AND '&MF(1)' NE 'M').ONLKUP
.*
.*       LOOK THE DESTINATION LABEL UP TO SEE IF A NAME IS KNOWN OR
.*       HAS BEEN GENERATED FOR THE START OF THE CONTAINING LIST. IF
.*       NOT YET KNOWN, WE MAKE A NEW NAME AND INSERT IT IN THE TABLE.
.*
         XWTOLKIN &L,&R,I         FIND ALIAS LABEL, OR GENERATE NEW ONE
&ID      SETC  '&XWTOAL'          SAVE LIST START LABEL
&R       SETC  '0&XWTOLK'         SAVE ENTRY NUMBER FOR CHAINING
.ONLKUP  ANOP
&J       SETA  K'&SYSLIST(&I,2)
         AIF   ('&SYSLIST(&I,2)'(&J,1) EQ '''').OLIT IF LITERAL SEGMENT
.ONLIT   UHBMODV &L-&ID.(1),&SYSLIST(&I,2),&SYSLIST(&I,3),             *
               COM=MESSAGE.SEGMENT,MF=&MF
         AGO   .ONEXT
.OLIT    AIF   ('&SYSLIST(&I,2)'(1,1) LT '0').ONLIT BR UNLESS LIT W LEN
         UHBMODV &L-&ID.(1),CL&SYSLIST(&I,2),&SYSLIST(&I,3),           *
               COM=MESSAGE.SEGMENT,MF=&MF
.ONEXT   ANOP
&I       SETA  &I+1
         AIF   (&I LE N'&SYSLIST).OLOOP
.ODONE   AIF   ('&MF(1)' NE 'M' AND '&MF(1)' NE 'E').DOSVC
         AIF   ('&ROUTCDE' EQ '' AND '&DESC' EQ '' AND '&MCSFLAG' EQ ''*
                AND '&MSGTYP' EQ '').DOSVC
         AIF   ('&REPLY&ECB' EQ '*').ORDNREP
         LA    14,8(,1)           ADDRESS MESSAGE LENGTH
         AGO   .ORD
.ORDNREP LR    14,1
.ORD     AIF   ('&MCSFLAG' EQ '').ONOMCS
&I       SETA  1
.OMCSLKP UHBLKUP &MCSFLAG(&I),VAL=(REG0,RESP,REPLY,BRDCST,HRDCPY,      *
               QREG0,NOTIME,NOCPY),OUT=(4096,2048,512,256,128,64,32,1),*
               NAME=MCSFLAG
         AIF   ('&UHBL' EQ '').ONXMCS
&J       SETA  &J+&UHBL
.ONXMCS  ANOP
&I       SETA  &I+1
         AIF   (&I LE N'&MCSFLAG).OMCSLKP
&K       SETA  &J/64              BITS FOR 1ST BYTE
         UHBMODF 2(14),ON=&K,COM=MCS.FLAGS,MF=E
&K       SETA  (&J-&K*64)*4
         UHBMODF 3(14),ON=&K,COM=MCS.FLAGS,MF=E
.ONOMCS  AIF   ('&ROUTCDE' EQ '' AND '&DESC' EQ '' AND                 *
               '&MSGTYP' EQ '').DOSVC
         AH    14,0(,14)          ADDRESS DESCRIPTOR CODES
         XWTORDM &DESC,0(14),DESCRIPTOR
         XWTORDM &ROUTCDE,2(14),ROUTE
&I       SETA  1
&J       SETA  0
         AIF   ('&MSGTYP' EQ '').DOSVC
.OMSGLKP UHBLKUP &MSGTYP(&I),VAL=(JOBNAMES,STATUS,ACTIVE,SESS),        *
               OUT=(128,64,32,4),NAME=MSGTYP
         AIF   ('&UHBL' EQ '').ONXMSGT
&J       SETA  &J+&UHBL
.ONXMSGT ANOP
&I       SETA  &I+1
         AIF   (&I LE N'&MSGTYP).OMSGLKP
         UHBMODF 4(14),ON=&J,COM=MSGTYPE.FLAGS,MF=E  MODIFY MSGTYP
.*
.*       GENERATE POSTLUDE CODE.
.*
.DOSVC   UHBSVC 35,NAME=WTO(R),MF=&MF CALL SVC IF NEEDFUL
.MEND    MEND
