 /* WORKLOAD DISPLAY COMMAND FOR DCMS                               */
 WORKLD: PROCEDURE        OPTIONS(MAIN);
  /*     VERSION DATE 01/22/79                                   JAC
         MVS R3.7 + SU 50                                        JAC
         YALE UNIVERSITY COMPUTER CENTER
         175 WHITNEY AVE
         NEW HAVEN, CT.
         203 432-4080
         HOWARD GILBERT
         CONVERTED TO DCMS STACK SERVICE 1/25/79 BY J CHAPMAN
         DCMS RELEASE 2.0 FOR MVS/SE
         LINKEDIT WITH PLMAIN AS THE ENTRY POINT
         USE PLI OPTIMIZING COMPILER
    --------------------------------------------
    WHATSA WAMT??
    THE WORKLOAD ACTIVITY MEASUREMENT TABLE IS CREATED
    BY MF/1 OR RMF AND PASSED TO THE SRM. IT CONTAINS
    INFORMATION ABOUT THE SERVICE USAGE OF EACH PERFORMANCE
    GROUP PERIOD IN THE IPS. THE IRAWAMT MAPPING MACRO IS
    IN THE PVTMACS.
    THIS PROGRAM DOES NOT CREATE THE WAMT. IT SIMPLY REPORTS
    THE CURRENT CONTENTS OF THE WAMT CREATED BY MF/1 OR RMF.
    ALTHOUGH THE INFORMATION INCLUDES VALUES NOT REPORTED BY
    MF1, YOU DO NOT NEED RMF FOR THIS PROGRAM TO WORK. MF1
    WILL DO FINE.

     FIELDS REPORTED:
         PG    PERFORMANCE GROUP
         PGP   PERFORMANCE GROUP PERIOD
         OBJ   SERVICE OBJECTIVE
         DMN   DOMAIN
         SRV   SERVICE UNITS PER SECOND CONSUMED BY PGP
         CPU   CPU COMPONENT OF SRV
         IO    IO COMPONENT OF SRV
         MSO   STORAGE COMPONENT OF SRV
         ABS   ABSORPTION RATE (SERVICE/TRANS-ACTIVE TIME)
         TSR   TRANS SERVICE RATE (SERVICE/TRANS-RESIDENT TIME)
         WLL   WORKLOAD LEVEL
         SWP   SWAPS PER SECOND
         ACT   ACTIVITY (TRANS-RESIDENT/ELAPSED TIME)

                    EFFECTIVE AVERAGE NO OF TRANS INCORE
         TRLEN AVERAGE TRANSACTION ELAPSED TIME
                    RESPONSE TIME
     */
   %INCLUDE (PLIDCMS);
   %INCLUDE (#STAKCB);
1/*                                                                 */
 DCL ISASIZE FIXED BIN(31) EXT INIT(10240);
 DCL 1 WAMT BASED(WAMTPTR),
         2 WAR PTR,
         2 SIZ FIXED BIN(31),
         2 (TMA,TMA2,TOC,TOC2) FIXED BIN(31),
         2 ASD FIXED BIN(31),
         2 TCB PTR,
         2 IPS CHAR(2),
         2 (CPD,SPD,HPG) FIXED BIN,
         2 (IPC,IPI,IPM,IPB) CHAR(4),
         2 NDX(0:N REFER(HPG)) FIXED BIN(31);
 DCL BUMPER(0:16384) CHAR(1) BASED(WAMTPTR);
 DCL BUFFER CHAR(16384);
 WAMTPTR=ADDR(BUFFER);
 DCL 1 WAMP BASED(WAMPNEXT),
        2 (TRN,TAT,SRV,TET,NWL,CPU,IOC,MSO,SRB,TRR,SWC) FIXED BIN(31),
        2 (OBJ,DMN) BIT(8) ALIGNED,
        2 FILL CHAR(2);
 DCL OUTSTR CHAR(79) ;
 DCL TIMES FIXED BIN;
 DCL TIMER FIXED BIN;
 DCL MINUT FIXED BIN;
 DCL NOZERO FIXED BINARY(15,0) INIT(0);
 DCL XO CHAR(12) VARYING INIT('');
 DCL RETCODE FIXED BIN(31);
 DCL GETWAMT ENTRY(CHAR(*),FIXED BIN(31));
 ALLOCATE STAKCB SET(STAK_PTR);
 ALLOCATE #STACK SET(#TOP_N);
1/*                                                                 */
 RESTART : ;
    NOZERO = 0 ;
    CALL GETWAMT(BUFFER,RETCODE);
    IF RETCODE=40 THEN
    DO;
       PUT STRING(#TT1_N)
       EDIT('RMF OR MF1 MUST BE ACTIVE')(A);
       STOP;
    END;
    IF RETCODE>4 THEN DO;
       PUT STRING(#TT1_N)
       EDIT('RETURN CODE FROM WORKLOAD COLLECTION',RETCODE)
       (A,F(4));
       STOP;
    END;
0/*                                                                 */
 TIMES=TOC-TMA;
   /*  TIMER = TIMES + 31 ;   */
   /*  MINUT = FLOOR(TIMER/60); */
    IF TIMES<120 THEN DO;
       PUT STRING(#TT1_N)
       EDIT('INTERVAL STARTING: NO DATA AVAILABLE')
       (A) ;
       STOP;
    END;
0/*                                                                 */
    PUT STRING(#TT1_N)
       EDIT('D C M S   WORKLOAD SUMMARY (WAMT)')
       (A) ;
    PUT STRING(#TT2_N)
       EDIT('DURATION=',TIMES,' SEC IPS=',IPS,
       ' CPU=',IPC,' IOC=',IPI,' MSO=',IPM,' SRB=',IPB)
       (A,F(4),10 A);
    PUT STRING(#TT3_N)
     EDIT('PG PGP OBJ DMN SRV CPU IO  MSO ABS TSR WLL SWP  ACT   TRLEN'
          )(A);
1/*                                                                 */
    IKJ = 1 ;
    DO I=0 TO HPG;
    K=1;
      DO J=NDX(I) TO NDX(I+1)-SPD BY SPD;
      WAMPNEXT=ADDR(BUMPER(J));
      IF TRR<=0 THEN DO;
          IF NOZERO ^= 0 THEN DO;
             PUT STRING(#STACK(IKJ))
                 EDIT(I,K,OBJ,DMN,' ZEROS')(F(2),3 F(4),A);
             IKJ = IKJ + 1 ;
             END ;
          END;
          ELSE DO;
          IF TRN=0 THEN PUT STRING(XO) EDIT('   0.00')(A);
             ELSE PUT STRING(XO) EDIT(TET/(TRN*10))(P'ZZZ9.99');
  (NOFIXEDOVERFLOW):
          PUT STRING(#STACK(IKJ))
              EDIT(I,K,OBJ,DMN,SRV/TIMES,CPU/TIMES,IOC/TIMES,MSO/TIMES,
             (SRV*1000)/TAT,(SRV*1000)/TRR,NWL/000256,FLOAT(SWC)/TIMES,
              FLOAT(TAT)/(TIMES*1000),XO)
              (F(2),10 F(4),2 F(5,2),A);
              IKJ = IKJ + 1 ;
           END;
      K=K+1;
      END;
    END;
    ISTK = 1;
 DISPLAY : ;
    LINE01 = #TT1_N ;
    LINE02 = #TT2_N ;
    LINE03 = #TT3_N ;
    DO IMG = 4 TO 22 BY 1 ;
       IMAGE(IMG) = #STACK(ISTK) ;
       ISTK = ISTK + 1 ;
    END;
     TRMIO ;
    IF IOCBAID = AIDPF8 THEN GOTO DISPLAY ;
    IF IOCBAID = ENTER THEN GOTO RESTART;
    IF IOCBAID = AIDPF9 THEN GOTO RESTART;
 RETURN ;
 END;
