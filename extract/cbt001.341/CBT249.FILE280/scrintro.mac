..cm NOTE TO OTHER INSTALLATIONS ---------------------------------------
..cm
..cm      ALL INSTALLATION-DEPENDENT TEXT IN THIS INTRODUCTION
..cm      IS LOCATED IN THE ABSTRACT AND THE CHAPTERS TITLED 'USING SCRI
..cm      AND 'WHERE TO GO FROM HERE', AND IS BRACKETED BY "CONDITIONALS
..cm
..cm for the top title of page 1
..sr install = 'UNIVERSITY OF WATERLOO COMPUTING CENTRE'
..cm
..cm if you don't want the hyphenation exception dictionary,
..cm remove the "hy=full" and set "withhyph" to "without"
..sr withhyph = with
..im syspub layout=guide hy=full
..hy change op-er-and
..cm
..cm The Reference Variable '&site', if null, will cause the Waterloo-
..cm dependent text to print.  You can therefore specify
..cm
..cm      +site=something
..cm
..cm in the invoking parameter list to avoid this -- however, you must
..cm then define three additional input files:
..cm
..cm      editors -- text explaining the editors available and where the
..cm                 user can get more information on them
..cm      output --  text explaining what is available in the way of hig
..cm                 speed line-printer setups, etc
..cm      using --   text explaining the systems available from which th
..cm                 user can submit (invoke) a SCRIPT job, etc.
..cm
..cm END OF NOTE TO OTHER INSTALLATIONS --------------------------------
..tm 12;..hs 3
..ur ..us ×..tt 1 /×&install×//×IntroSCR×/
..ur ..us ×.tt 3 /×Introduction to SCRIPT×//&sysdate/
.prelim 'Abstract'
..tm 6;..hs 0;..tt ////;..tt 3 ////
..pp;The University of Waterloo version of SCRIPT
is a powerful text formatting program.
SCRIPT is very easy to use for "simple" documents such as memos and smal
papers; with just a few SCRIPT commands (called "control words"),
you can satisfy the formatting
requirements of most documents.
..pp SCRIPT is also extremely useful for the preparation
of large documents such as manuals, theses, and other research
and instructional publications.
By using some of the "programming language" capabilities of SCRIPT, it
is possible to make SCRIPT generate a table of contents and an index,
or to write your own control words.
This makes SCRIPT
particularly useful for the construction and
maintenance of large documents, where you wish to be able to
standardize the layout and
make significant changes to a component of the document (add a chapter,
a chapter, or re-order large sections of text) without affecting the res
of the document.
..pp;To use SCRIPT, you must use a text editor to create the input file.
..ur ..if '&site' ne '';..th ..im editors .;..el ..do
There are a number of text editors available to you:
WITS, WYLBUR, the VM/370 CMS Editor, or CMS WYLBUR.
If you are not familiar with any of these editors, introductory
documentation may be obtained from any of the Consulting Offices, and re
manuals are available through the Computer Reference Room.
..do end
..pp In all systems, it is
possible to direct the output to a high-speed line printer.
This is usually desirable for "proofreading" copies; it is also often
desirable for the "final copy" of a large document.
..ur ..if '&site' ne '';..th ..im output .;..el ..do;
It is possible for you to
request that the document be printed on white paper.
Special mylar printer
ribbons may be purchased which result in a very high-quality printout ac
for reproduction by photo-offset printing;
or, if original copies are required, a heavy-bond paper is also availabl
Information
on purchasing and using mylar ribbons and/or special paper can be obtain
by contacting the I/O Services Office (MC 1070, extension 2686).
..pp;Under CMS, the formatted document may be typed at your terminal,
stopping at the bottom of each page for the next sheet of paper.
..do end
..pp This "Introduction to SCRIPT" is intended to
..ul 1 introduce;you to SCRIPT, and therefore will not discuss all of
the features of SCRIPT.
Most of the SCRIPT control words discussed in this Introduction have
additional capabilities;
they are described herein in the ways in which they are likely to be use
most often.
..pp;The version of SCRIPT in existence at the time this Introduction wa
printed was:
..sp;..ce 1;..ur &sysversion
.chapter 'Introduction'
..pp SCRIPT is a computer program which accepts
..us input,
..us processes
it, and produces
..us output.
..pp SCRIPT recognizes only two different types of input:
..us text;and
..us control words.
The processing which SCRIPT performs is called
..us text formatting.
The output produced by SCRIPT is a document
in which all of the text has been formatted according to the layout
instructions specified by the control words.
.chapter 'Creating the Input'
..pp The input to SCRIPT is a collection of text and control words which
type at a
..us typewriter terminal;or
..us visual-display terminal;by using a
..us text editor.
A text editor is a computer program
which allows you to enter, correct, delete, add, and save the text and c
words.
..pp When you are entering the input,
it is important that you start each sentence of the text on a new
input line.  This makes subsequent insertions or deletions of sentences
much easier to perform.
.section 'Control Words and Text'
..pp Each time SCRIPT reads an input line, it looks at the character in
column 1.  If that character is a ".",
SCRIPT considers the input to be a control word.
Otherwise, the input line is treated as text.
..pp Each SCRIPT control word is of the form
..sp;     .xx operand(s)
..sp;The "." is called the control word indicator
..us literal,
..se lipage = &syspage
and "xx" is a 2-character control word.
..ix 'li (LITERAL)'
Some SCRIPT control words have one or more
..us operands.
The first operand begins in the second position after the control word;
each operand is separated by a blank.
.section 'Putting More Than One Control Word on the Same Input Line'
..pp This may be done by separating each control word with a
semicolon (;).
SCRIPT refers to the semicolon as the control word
..us separator.
..ix 'cw (CONTROL WORD SEPARATOR)'
You can also put text on this same input line.  In general,
then, an input line which contains control words is entered as follows:
..sp;     .xx operands;.yy operands;.zz operands;text
..sp;where "xx", "yy", and "zz" are control words (with or without opera
You cannot put SCRIPT control words after the text on an input line.
.chapter 'The Formatting Process'
..pp The basic step in the text formatting process is the creation of an
line.
.section 'The Line Length'
..pp The SCRIPT ".ll"
..ix 'll (LINE LENGTH)'
LINE LENGTH
control word specifies the number of character positions in the output l
The line length for this Introduction was defined with the control word
..sp;..ur      .ll &sysll
..sp
The operand can be an absolute numeric value, as above,
or a signed numeric, such as
..sp;     .ll +20
..sp;which adds 20 to the current LINE LENGTH value.
If no operand is specified,
the default of sixty will be assumed.
Normally, you will specify the value for ".ll" at the beginning of the
document and then not change it.
.section 'Single- and Double-Spacing'
..pp By default, SCRIPT single-spaces the output lines.  The SCRIPT ".ds
..ix 'ds (DOUBLE SPACING)';DOUBLE SPACING control word will cause a blan
line to be generated between each output line.  You can get SCRIPT to re
to single-spacing by issuing the ".ss"
..ix 'ss (SINGLE SPACING)';SINGLE SPACING control word.
.section 'Starting a New Paragraph'
..pp The easiest way to define the start of a new paragraph is to use th
SCRIPT ".pp"
..ix 'pp (PARAGRAPH START)';PARAGRAPH START control word.  For example,
..sp;     .pp;This is the start of a new paragraph ...
..sp;produces:
..pp;This is the start of a new paragraph.  The ".pp" control word skips
a line and indents the line of text 3 spaces.
..in
.section 'Underscoring and Capitalizing'
..pp The SCRIPT ".us"
..ix 'us (UNDERSCORE)';UNDERSCORE control word, ".up"
..ix 'up (UPPERCASE)';UPPERCASE control word, and ".uc"
..ix 'uc (UNDERSCORE AND CAPITALIZE)';UNDERSCORE AND CAPITALIZE control
allow you to underscore and/or capitalize a single line of text.
They are of the form
..sp;     .us line of text to be underscored
     .up line of text to be capitalized
     .uc line of text to be underscored (and capitalized)
..sp;and produce the following effects:
..in 5
..sp;..us line of text to be underscored
..br;..up line of text to be capitalized
..br;..uc line of text to be underscored (and capitalized)
..in
..pp With ".us" and ".uc", it is possible to underscore only selected
parts of the line.
This requires that the SCRIPT ".ud"
..ix 'ud (UNDERSCORE DEFININTION)';UNDERSCORE DEFINITION control word
be used to define a special "escape" character which will indicate that
underscoring is to be turned off and on again.
For example, if
..sp;     .ud set ×
..sp;has already been specified, then
..sp;..cc 2;     .us line ×of text ×to be ×under×scored
     .uc line ×of text ×to be ×under×scored and capitalized
..sp;will produce
..sp;..in 5;..cc 2
..us line ×of text ×to be ×under×scored
..br
..uc line ×of text ×to be ×under×scored and capitalized
..in
..pp;By default, these control words will underscore all characters
.tabnum unders
..ur except those shown in Table &unders..
If you want to add any of these characters to the list to be underscored
automatically, you can use the "on" operand of ".ud" to do it.
For example, if you want SCRIPT to include parentheses in the list of
characters which will be underscored if they appear in the operand strin
of a ".uc" or ".us", then specify:
..sp;     .ud on ( )
.tabbegin;.boxon
.table unders 'Characters Not Underscored (by default)'
..tb set $
..ur ..tb &sysin+30 &sysin+40 &sysin+50
..us $Graphic$Hex
..us Character$Symbol$Code
..sp
backspace$none$16
blank$$40
comma$,$6B
colon$:$7A
double quote$"$7F
exclamation mark$!$5A
left brace$¯$8B
left bracket$[$AD
left parenthesis$($4D
period$.$4B
question mark$?$6F
right brace$ò$9B
right bracket$]$BD
right parenthesis$)$5D
semicolon$;$5E
tab$none$05
underscore$_$6D
..br;..tb set
.boxoff;.tabend
.section 'Keeping a Block of Text Together on the Same Page'
..pp In many instances, it is necessary to ensure that a block of text n
split across a page boundary -- for example, the text (or spaces) for
charts, figures, or tables.
There are two methods which may be used to prevent output lines
from being split over two pages.
..pp The SCRIPT ".cp"
.ix 'cp (CONDITIONAL PAGE)'
CONDITIONAL PAGE control word can be used to start a new page if there
is not enough room on the current page.
For example, when SCRIPT encounters the input sequence
..sp;..cc begin
     .cp begin
     input text and other SCRIPT control words
     .cp end
..cc end;..sp
it formats the "input text and other SCRIPT control words"
in an internal "work area" so that it knows how many lines of output
this input sequence has created.
If there is not sufficient room for these output lines on the current pa
SCRIPT leaves the rest of the current page blank, and
prints these already-formatted output lines at the top of the next page.
..pp If you know precisely how many output lines are needed,
it is more efficient to use ".cp" with a numeric operand.
For example,
..sp;     .cp 10
..sp;will start a new page if there are less than 10 lines available
on the current page.
..pp The ".cp" control word, as mentioned above, will cause the remainde
the current page to be left blank if a new page must be started.
This is often highly undesirable.
If you use the SCRIPT ".fk"
..ix 'fk (FLOATING KEEP)'
FLOATING KEEP control word
..sp;..cc begin
     .fk begin
     input text and other SCRIPT control words
     .fk end
..cc end;..sp
SCRIPT will format the "input text and other SCRIPT control words" inter
and print the resulting output lines
on the current page if there is room for them.
If there is insufficient room,
SCRIPT will save them for printing on the next page, and will
fill the current page with the output created by the text and control wo
which follow the FLOATING KEEP begin/end sequence.
.section 'Starting a New Page'
..pp You can force the output to start on a new page
by using the SCRIPT ".pa"
PAGE control word.
..sp;..cc 3;     .pa
..ix 'pa (PAGE)'
..ix 'pa (PAGE)' 'see also "em"'
     .pa +5
     .pa 1
..sp;The first example skips to the top of the next page;
you might wish to do this, for example, to cause a new chapter to start
a new page.
The second example skips to the top of the next page and adds five
to the page number.
This may be useful if you intend to insert five pages which
are to be produced in some other fashion.
The third example skips to the top of the next page and resets the
page number to "1".
.section 'Blank Lines (Spaces)'
..pp The SCRIPT ".sp"
..ix 'sp (SPACE)'
SPACE control word creates blank output lines.
The operand specifies
the number of blank lines desired.
..sp;..cc 2
     .sp 5
     .sp
..sp;The first example produces five blank lines, the second example
the default of one.
If double-spacing were in effect, the first example would produce 10 bla
and the second would produce 2.  If you want to leave a specific number
blank lines independent of whether you may decide later on to switch the
document from single- to double-spacing (or vice versa), then use the "a
operand, as in
..ix 'sp (SPACE)' 'absolute'
..sp;     .sp 5 a
..sp;In this form, ".sp" will produce the specified number of "absolute"
blank lines, independent of the line-spacing mode.
.section 'Blank Lines at the Top of a Page'
..pp By default, SCRIPT prevents the printing of blank lines at the top
page.  If you want to
..ul allow;this, use the ".le"
..ix 'le (LEADING SPACES)'
..ix 'sp (SPACE)' 'at the top of a page' . 'see also "le"'
LEADING SPACES control word.
For example, you might begin each new chapter with the input sequence
..sp;     .pa;.le yes;.sp 5 a;.le no
..sp;The ".le yes" allows the printing of blank lines at the top of the
page, and the ".le no" suppresses them again.
.section 'Printing Empty Pages'
..pp;By default, SCRIPT does not print pages which are empty.
You can use the SCRIPT ".em" EMPTY PAGES control word to force SCRIPT
to print empty pages.
For example,
..ix 'em (EMPTY PAGES)'
..sp;     .pa;.em yes;.pa;.pa;.em no
..sp;leaves the rest of the current page blank, tells SCRIPT to print
empty pages, creates two empty pages, and then suppresses the printing
of empty pages again.
.section 'Breaks'
..se brpage = '&pubSWprt'
..pp A "break" in the output text is a place where the current output
line has been printed, no matter how full it may be,
and a new output line begun.
There are four ways in which you can specify or cause a "break" in the
output text to occur.
The first way is to use the SCRIPT control word BREAK,
..sp;     .br
..ix 'br (BREAK)'
..pp The second way is to use a SCRIPT control word which, in addition t
doing other things, also
..us implies;a break (such as the ".sp" control word).
..pp The third way is to start an input line with one or more blanks.
This starts a new output line, indented by the number of blanks
with which the input line starts.
..pp The fourth way is to start an input line with a tab character.
This starts a new output line, indented to the first defined tab stop.
.chapter 'The Definition and Use of Tabs'
.section 'Defining Tab-Stop Positions'
..pp;SCRIPT does not know about any physical tab-stop settings you may h
on your output device.  Instead, you must use the SCRIPT ".tb"
..ix 'tb (TAB)'
TAB control word to define the positions in the output line which are to
be used as tab-stop settings.  By default, tab-stop settings are
defined in positions 5, 10, 15, 20, ..., 80, as in
..sp;     .tb 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80
..sp;When SCRIPT encounters a tab character while putting words onto the
line, it inserts the number of blanks necessary to move over to the righ
so that the character after the TAB will appear in the next tab position
in the output line.
..pp;For example, with the default tab-stop positions, a TAB in the firs
of an input line will create a new output line in which the first 4 posi
are blank.
.section 'Entering TAB Characters in the Input'
..pp If your input device has a TAB key, you can use it to enter the TAB
character simply by depressing the TAB key.
If your input device does not have a TAB key,
then you can make use of the SCRIPT
".tb set"
..ix 'tb (TAB)';..ix 'tb (TAB)' 'set'
TAB SET control word to define a special character which
will be treated as the TAB character whenever it is encountered in the i
For example, if you were to include the control word
..sp;     .tb set $
..sp;at the beginning of your input file,
you would be defining the "$" to be the "TAB" character -- any time
SCRIPT encounters an "$" in an input line,
it will automatically
insert the number of blanks necessary to move over to the next defined
tab-stop position.
.section 'Tabs with a "Fill String"'
..pp;In addition to inserting blanks as it moves over to the next tab-st
position, SCRIPT also provides the ability for you to specify a
"fill string" (one or more non-blank characters) to be used instead of
blanks.
For example, if you had defined a tab-stop position with
..sp;     .tb '. '50
..tb '. '50
..sp;then the input sequence
..sp;..cc 5
     .tb set $
     .sp
     hello $ there
     .br
     how are $ you
..sp;would produce
..tb set $
..sp;hello $ there
..br;how are $ you
..br;..tb set
.section 'Right-Aligning Tabs'
..pp;SCRIPT also gives you the ability to specify a tab-stop position to
which text will be right-aligned.
For example, if you had defined the above tab-stop position as
..sp;..ur      .tb '. '&pubSWll.r
..sp;then the exact same input sequence would produce
..ur ..tb '. '&pubSWll.R
..tb set $
..sp;hello $ there
..br;how are $ you
..br;..tb set
..sp;The TAB between the words "hello" and "there" causes SCRIPT to
"push" the word "there" over to the right until its last character is in
..ur column &pubSWll..
.section 'Centering Tabs'
..pp;If the tab-stop position is followed by the letter "C", such as
..sp;     .tb 30c
..sp;then SCRIPT will align the text following the TAB
so that it is centered at that position.
For example,
..sp;..cc 4
     .tb set ^;.tb 30c
     the value is^123456789
     .br
     and the next is^123
..sp;will cause the number "123456789" to print so that the "5" is in
column 30, as shown below.
..tb set ^;..tb 30c
..sp;the value is ^123456789
..br;and the next is^123
..br;..tb set
.section 'Character-Aligning Tabs'
..pp;If the tab-stop position is followed by
a delimited single character, such as
..sp;     .tb 30'.'
..sp;then SCRIPT will align the text following the TAB to the first
occurrence of that character.
For example,
..sp;..cc 4
     .tb set ^;.tb 30'.'
     the value is^12.456789
     .br
     and the next is^123.56
..sp;will cause the number "12.456789" to print so that the "." is in
column 30, as shown below.
..tb set ^;..tb 30'.'
..sp;the value is^12.456789
..br;and the next is^123.56
..br;..tb set
.chapter 'The Output Page'
.section 'The Left and Right Margins'
..pp;The SCRIPT ".ad"
..ix 'ad (ADJUST)'
ADJUST control word may be used to define the
starting position of the output line with respect to the physical left m
(the physical left margin of this Introduction
..ur is actually &sysad spaces to the left of this paragraph).
The term "physical left margin" refers to the leftmost possible print po
of the output device (terminal or printer).
The term "left margin" by itself is used in this
Introduction to refer to the starting position of the output line on the
output device, as defined by the ADJUST value.
Since the initial ADJUST value is zero, the left margin and the physical
left margin are therefore identical at the start of SCRIPT processing.
Specifying a non-zero ADJUST value
moves the left margin the specified number of spaces to the right of
the physical left margin.
The length of the output line, as defined by ".ll",
is not affected by the ADJUST value.
..pp For example, this document contains the SCRIPT control words
..sp;..su;     .ad &sysad;.ll &sysll
..sp
at the beginning of the input file; this creates an output line which be
..ur in print position &sysad+1 and ends in print position &sysad+&sysll
This ADJUST value was specified in order to allow a sufficient
margin on the left of the page for binding.
..pp The right margin is one position to the right of the position defin
the sum of the ADJUST and LINE LENGTH values.
.section 'The Top and Bottom Margins'
..pp The SCRIPT ".tm"
..ix 'tm (TOP MARGIN)'
TOP MARGIN control word may be used to define the number
of lines to be left at the top of each output page.
The top margin for this Introduction was created with the control word
..sp;..ur      .tm &systm
..pp The SCRIPT ".bm"
..ix 'bm (BOTTOM MARGIN)'
BOTTOM MARGIN control word may be used to define the number
of lines to be left at the bottom of each output page.
The bottom  margin for this Introduction was created with the control
word
..sp;..ur      .bm &sysbm
.section 'The Text Area'
..pp The text area is that area of the output page bounded on the left b
left margin (as defined by the ADJUST value), on the right by the right
(as defined by the sum of the ADJUST and LINE LENGTH values plus 1),
on the top
by the top margin (as defined by the TOP MARGIN value), and on the botto
the bottom margin (as defined by the BOTTOM MARGIN value).
..pp It is this "text area" into which SCRIPT places its output lines.
Whenever the text area becomes full, SCRIPT automatically skips to a new
.chapter 'The Formatting Modes'
..pp The criterion which SCRIPT uses in attempting to "fill"
the output line is called the "formatting mode".
To show the effects of the various formatting modes, the text in the fol
sections has been formatted by the same control words which the text is
describing.
.section 'Unformatted Mode'
..pp;To begin, we will start with "unformatted mode", by issuing the SCR
control word
..sp;     .fo no
..ix 'fo (FORMAT)'
..fo no
..pp In the "unformatted mode", SCRIPT does no "text
formatting"; it
merely copies the text exactly as it appeared in the input lines.
We are now in "unformatted mode".
This is useful when we want to enter the text for a table or
figure or example, and we
want the output to appear exactly as we entered it.
..pp In "unformatted" mode,
".ll" has no effect on the length of the output line.
For text in sentence-and-paragraph form, we want something else.
.section 'Concatenated Mode'
..hy user;..ju no
..pp If we now specify the SCRIPT control word CONCATENATE,
..sp;     .co
..ix 'co (CONCATENATE)'
..sp;..co
then SCRIPT puts as many words as possible on an output line.
Note that, although no output line is longer than the ".ll" value,
the right margin is still "ragged".
We can get even more text onto each output line if we also add
"hyphenation" to the "concatenation" process.
.section 'Hyphenation'
..ju no
..pp SCRIPT has three modes of hyphenation.
The hyphenation mode is specified with the HYPHENATE control word:
..sp;..cc 3
     .hy off
     .hy user
     .hy on
..ix 'hy (HYPHENATE)'
..hy off
..pp The "off" operand causes SCRIPT to perform no hyphenation.
..hy user
..pp The hyphenation mode specified by the "user" operand is the default
hyphenating mode.
If SCRIPT encounters a hyphenated word and it cannot
get the whole word on the current output line but
..us can;get the first part and the hyphen, it will do so, and put the
rest of the word on the next output line.
..hy on
..pp The "on" operand causes SCRIPT to perform automatic hyphenation.
SCRIPT attempts to detect all permissible hyphenation points in a word*,
..fn begin
..of 1
*The part of Waterloo SCRIPT which performs hyphenation was adapted from
the IBM "HYPHENATION/360" computer program.
..fn end
and then puts as much of the word as possible on the current line, follo
by a hyphen.
The rest of the hyphenated word is used to start the next output line.
..pp SCRIPT's hyphenation attempts
do not always result in a hyphenation point which is aesthetically pleas
Unfortunately, the human's rules for deciding which
hyphenation points "don't look right" are not sufficiently well-defined
to be programmed.
To overcome this, there is an "exception dictionary" which you may choos
to imbed (using the SCRIPT ".im"
..ix 'im (IMBED)';control word)
if you are formatting your document with ".hy on", by specifying
..sp;     .im syshyph
..ix 'hy (HYPHENATE)' 'imbedding the exception dictionary'
..sp;at the beginning of your document.
The "syshyph" file contains several thousand "exception" words.
When hyphenation is "on", SCRIPT first checks a word it wants to hyphena
to see if it is in the exception dictionary.
If it is, SCRIPT considers only the hyphenation points defined
for that word in the exception dictionary (which may, of course, be
..ul 1 none).
..ur This Introduction was formatted &withhyph the exception dictionary.
..pp The SCRIPT ".hy" control word has several additional operands for
modifying the hyphenation process and the exception dictionary.
It is beyond the intended scope of this Introduction to discuss them her
you can learn more about the ".hy" control word (and other control words
in the SCRIPT Reference Manual mentioned later in this document.
.section 'Concatenated-and-Justified (Formatted) Mode'
..ju no
..pp In the
..hw "concatenated--and--justified"
mode, SCRIPT adds another
step beyond that of concatenation -- after it realizes that it cannot
get any more on the output line, it then
inserts extra blanks between words.
We can add justification to the concatenation process by using the SCRIP
control word JUSTIFY
..sp;     .ju
..ju
..ix 'ju (JUSTIFY)'
..sp;and SCRIPT will include justification from this point on.
This is the default formatting mode.  SCRIPT
refers to this "concatenated-and-justified" mode as the "formatted" mode
Rather than specifying both ".co" and ".ju", we could create the
same effect by specifying the SCRIPT control word FORMAT
..sp;     .fo
..ix 'fo (FORMAT)'
.chapter 'Positioning Blocks of Text in the Text Area'
.section 'Centering Lines of Text'
..pp The SCRIPT ".ce" CENTRE control word,
..ix 'ce (CENTRE)';as used in the following input sequence
..sp;..cc 3
     .ce begin
     input text and other SCRIPT control words
     .ce end
..sp;will cause each text line in the range of the "begin/end" to be
centered on a separate output line.
If only one input line is to be centered, it can be entered as
..sp;     .ce line of text to be centered
..pp A numeric operand can be used, for a specific number of
..ul input;lines of text.
.section 'Right-Adjusting Lines of Text'
..pp The SCRIPT ".ra"
..ix 'ra (RIGHT ADJUST)'
RIGHT ADJUST control word causes input text to be right-adjusted on outp
It is used in the same manner as ".ce" above.
For example,
..sp;     .ra this line of text
..sp;produces:
..sp;..ra this line of text
.section 'Indenting Blocks of Text'
..pp The output line normally starts at the left margin (as defined by t
ADJUST value).
To indent output lines a specific number of spaces, use the SCRIPT ".in"
..ix 'in (INDENT)'
INDENT control word.
This indentation will remain in effect until another ".in"
control word is encountered.
Consider the following examples:
..sp;..cc begin;     .in 10
..sp;..in 10;This causes all output lines to be indented ten spaces from
the left margin.  The control word
..sp;..in 4; .in +5
..sp;..in 15;adds five to the current INDENT value, so that output
lines are now indented 15 spaces from the left margin.  The control word
..sp;..in 4; .in
..cc end;..in
..sp;used without an operand causes the INDENT value to be reset to
zero, so that the output lines now begin at the left margin again.
..pp Note that the INDENT control word, when used in the above ways, doe
not alter the positioning of the right margin.
If that is desired, the control word may be used in the form
..sp;..in 4; .in 10 -5
..sp;..in 10 -5;which causes the left margin to be indented 10 spaces fr
the ADJUST value and the right margin to be indented five spaces to the
..ul 1 left;of the LINE LENGTH value.
..in;..pp In no case does the INDENT value ever alter the
LINE LENGTH value.
.section 'Indenting a Single Line of Text'
..pp To indent only the next line
of text, use the SCRIPT ".il"
..ix 'il (INDENT LINE)';INDENT LINE control word.  For example,
..sp;     .il +3;will cause the next line of ...
..sp;produces:
..sp;..il +3;will cause the next line of text to be indented 3 more than
the value of ".in" currently in effect.
.section 'Offsetting Lines of Text'
..pp To offset all output lines after the next one is printed, use the S
".of"
..ix 'of (OFFSET)'
OFFSET control word.
The ".of" value is relative to the current ".in" INDENT value, and
remains in effect until the next ".of"
or ".in" control word is used.
A list of points could be formatted by using OFFSET as follows.
..sp;..in 4;..cc begin
 .of 4
 (1) first text input line for point
 second text input line for point
 .of 4
 (2) first text input line for second point
 second text input line for second point
 .of
..cc end;..sp;..in
..pp;The explanation below was formatted using the above technique.
..sp;..of 4;(a) The next output line after the ".of 4" is encountered wi
begin at the INDENT value, but output lines thereafter, until the next "
is encountered, will be offset 4 spaces from the INDENT value.
..sp;..of 4
(b) The second ".of 4" is necessary to cancel the effect of the previous
".of 4", so that the "(2)" will be printed beginning at the INDENT value
with output lines thereafter being offset 4 spaces to the right.
..sp;..of 4;(c) The ".of" after the text for the second point
re-sets the current OFFSET value to zero.
.section 'Output Overlay Patterns'
..pp The SCRIPT ".oo" OUTPUT OVERLAY control word
..ix 'oo (OUTPUT OVERLAY)'
replaces blanks in output columns with a specified overlay pattern.
For example, the input sequence
..sp;..cc 6
     .in 10
     .oo 1 OUTPUT
     .oo 1 OVERLAY
     .oo 1 Example
     causes the output to be indented
     10 spaces ...
..sp;produces:
..sp;..in 10;..oo 1 OUTPUT;..oo 1 OVERLAY;..oo 1 Example
causes the output to be indented 10 spaces from the left margin and
defines a sequence of three "output overlay" patterns, each of which is
printed "1" time, as indicated by the "1" following the ".oo".
The "output overlay" patterns are printed in the order in which they are
defined.
..in
..pp;The ".oo" control word can be used to create marginal notes in
indented text, as shown below.
..sp;..cc begin
     .in 10
     The following lines of text will be indented 10 spaces
     and the ".oo" OUTPUT OVERLAY control word will
     be used to position the word "here"
     .oo 1 here==>
     on the line in which the word appears.
     Note that ".oo" does not create a break in the
     formatting of the text.
..cc end;..sp;produces:
..sp;..cc begin
..in 10
The following lines of text will be indented 10 spaces
and the ".oo" OUTPUT OVERLAY control word will
be used to position the word "here"
..oo 1 here==>
on the line in which the word appears.
Note that ".oo" does not create a break in the
formatting of the text.
..in
..cc end
.section 'The "Significant Blank":  Keeping Things on the Same Line'
..pp;When it is necessary to ensure that SCRIPT keeps a string of charac
which includes blanks together on the same output line, the SCRIPT ".tr"
TRANSLATE ON OUTPUT control word must be used.
For example, the input sequence
..sp;..cc begin
     It is absolutely essential that the characters
     .tr $ 40
     X$=$a$+$b$+$c$+$d appear on the same
     line of output, and that SCRIPT not insert
     any extra blanks in the string.
     .tr
..cc end;..ix 'tr (TRANSLATE ON OUTPUT)';..sp;produces:
..sp;..cc begin;..in 5
It is absolutely essential that the characters
.tr $ 40
X$=$a$+$b$+$c$+$d appear on the same
line of output, and that SCRIPT not insert
any extra blanks in the string.
.tr
..cc end;..in
..pp;The ".tr $ 40" causes SCRIPT to translate all occurrences of "$" to
a blank (40 is the machine-code representation for a blank)
..us after ×each line has been formatted and ×just before ×it is printed
The ".tr" all by itself terminates this "translate on output" process.
Be sure not to terminate it right after specifying the string to which y
want it to apply, because it probably hasn't printed yet; wait a few lin
as was done above.
.section 'Putting a Box Around Text'
..pp;The SCRIPT ".bx" BOX control word allows you to create boxes.
For example, the input sequence
..sp;..cc begin
     .cp begin
     .bx 1 60
     .sp;.in +3 -3
     This text will have a box around it,
     in columns 1 and 60,
     compliments of the ".bx" control word.
     .in -3 +3;.sp
     .bx off
     .cp end
..cc end;..ix 'bx (BOX)';..sp;produces:
..sp;..cc begin
..bx 1 60
..sp;..in +3 -3
This text will have a box around it,
in columns 1 and 60,
compliments of the ".bx" control word.
..in -3 +3;..sp
..bx off
..cc end
.section 'Widowing'
..pp;If you want SCRIPT to attempt to prevent the first line of a block
of text from being the last line on a page, or prevent the last line of
a block of text from being the first line on a page, then specify
the SCRIPT ".wd" WIDOW control word
..ix 'wd (WIDOW)'
..sp;     .wd
.chapter 'Footnotes'
..ix 'fn (FOOTNOTE)'
..pp Many documents require the use of footnotes.
Using SCRIPT, it is possible to enter the text of the footnote immediate
after the word
to which the footnote refers.
SCRIPT formats the footnote text into an internal "work area",
counts the number of output lines which result, and leaves sufficient ro
at the bottom of the text area to ensure that the footnote text
is printed at the bottom of the same*
..fn begin
..of 1
*It is possible that some or all of the footnote may spill onto
the next page or for the line containing the reference to
get pushed over.
..fn end
page.  For example, the text for the footnote at the bottom of this page
created by the following sequence of text and control words:
..wd
..sp;..cc begin
     at the bottom of the same*
     .fn begin
     .of 1
     *It is possible that some or all of the
     footnote may spill onto the next page or
     for the line containing the reference to get
     pushed over.
     .fn end
     page.  For example, the text for the footnote ...
..cc end
..pp;The SCRIPT ".fn begin"
FOOTNOTE BEGIN control word defines the start of the footnote.
The output resulting from the input text and SCRIPT control words therea
is saved in SCRIPT's internal "work area".
The SCRIPT ".fn end"
FOOTNOTE END control word terminates this "internal formatting"
of the footnote and restores the formatting mode and
the values of control words such as ".in" and
".of" to whatever their values were before the ".fn begin" was encounter
..pp;By default, SCRIPT separates the last line of text from the first
line of the footnotes by a blank line followed by a line with a centered
row of dashes, followed by another blank line.
You can change this by using the "set"
..ix 'fn (FOOTNOTE)' 'set';operand of the ".fn" control word.
For example, the following input sequence
..sp
..cc 5
     .fn set 4
     .fn set 1 /--------------------///
     .fn set 2 ////
     .fn set 3 ////
     .fn set 4 ////
..sp;sets the number of "footnote separator" lines to 4, the first of
which contains 20 left-justified dashes.
The 2nd, 3rd, and 4th separator lines will be entirely blank.
Whatever you place between the first and second slash will be left-justi
on that separator line.
Whatever you place between the second and third slash will be centered.
Whatever you place between the third and fourth slash will be right-just
.chapter 'Page Numbering:  Top and Bottom Titles'
.section 'Title Lines in the Top Margin'
..pp The SCRIPT ".hs"
..ix 'hs (HEADING SPACE)'
HEADING SPACE control word defines the
number of heading lines which may be printed in the TOP MARGIN area.
The HEADING SPACE for this Introduction was defined by
..sp;..ur      .hs &syshs
..pp The SCRIPT ".hm"
..ix 'hm (HEADING MARGIN)'
HEADING MARGIN control word is used to define the number of blank lines
to be left between the HEADING SPACE area and the first line of the text
The HEADING MARGIN for this Introduction was defined with
..sp;..ur     .hm &syshm
..pp Note that the sum of the ".hs" and ".hm" values may not
be greater that the ".tm" value.
If you currently have a ".tm" value of 5 and you want to define
..sp;     .hm 3;.hs 3;.tm 7
..sp;it must be done in the order
..sp;     .tm 7;.hm 3;.hs 3
..pp The SCRIPT ".tt"
..ix 'tt (TOP TITLE)'
TOP TITLE control word allows you to define lines of text to be printed
in the HEADING SPACE of each page.
This control word is of the form
..sp;     .tt n /left string/centre string/right string/
..sp;The value "n" specifies the line number in the HEADING SPACE on whi
this heading line is to be printed;
if a value is not specified, "1" is assumed.
The characters specified in place of the three "strings" will appear
left-justified, centered, and right-justified on that output line.
.section 'Title Lines in the Bottom Margin'
..pp Three similar control words exist for the BOTTOM MARGIN area of eac
The SCRIPT ".fs"
..ix 'fs (FOOTING SPACE)'
FOOTING SPACE control word specifies the number of lines to be used for
bottom titles.  The ".fm"
..ix 'fm (FOOTING MARGIN)'
FOOTING MARGIN control word specifies the number of blank lines to be le
between the last line of the text area and the first line of the FOOTING
SPACE area.  The ".bt"
..ix 'bt (BOTTOM TITLE)'
BOTTOM TITLE control word is used to define the title lines to be printe
in the FOOTING SPACE area.
..pp A word of caution is in order.  Do not confuse footnotes and footin
Footnotes are printed at the bottom of the text area; footing (bottom ti
lines are printed in the FOOTING SPACE area.
.section 'Page Numbering'
..pp;If page numbering is required, then place a percent sign (%)
into one of the three strings of characters in the top and/or bottom tit
The "%" will be replaced with the current page number when SCRIPT prints
title line.
For example,
..sp;..cc 2
     .tt ////
     .bt //- % -//
..sp;were used to define the top and bottom titles for this Introduction
By default, SCRIPT uses
..sp;     .tt ///PAGE %/;.bt ////
..sp;and arabic numerals for the page numbers.
You can specify the numbering style for the page numbers by specifying a
..sp;..cc 3
     .pn arabic
     .pn roman
     .pn roman upper
..ix 'pn (PAGE NUMBERING)'
.chapter 'Multiple-Column Output'
.pp;The text you read in newspapers and magazines
is formatted in multiple columns per page.
A number of journals also use this style,
and some of them require that authors submit
camera-ready copy which is already formatted
in multiple columns (some IEEE publications, for example).
SCRIPT can produce output in up to nine columns
on a page.
.section 'Defining the Page Layout'
.pp;To use this multiple-column facility,
you must specify the following:
.point begin
the ".cl" COLUMN LENGTH control word, to define
the number of characters to be placed on each
.ix 'cl (COLUMN LENGTH)'
line in a column,
.point
the ".cd" COLUMN DEFINITION control word, to
define the number of columns on the page and the
.ix 'cd (COLUMN DEFINITION)'
displacement of each relative to the left
margin, and
.point
the ".ll" LINE LENGTH control word, to define the
total number of character positions on the
resulting multiple-column output line.
.point end
.pp;As an example, imagine that you wish to format output
in two 60-character columns per page,
with a 10-character "gutter" between them,
resulting in a total line length of 130 characters.
This can be achieved by the
SCRIPT control words
..sp;     .cl 60;.cd 2 0 70;.ll 130
.sp;which define two 60-character columns starting
at displacements 0 and 70 on the 130-character line.
The first column occupies positions 1
through 60, the gutter occupies positions 61 through
70, and the second column occupies position 71 through 130.
.section 'Starting a New Column'
.pp;Working in multiple-column mode requires a change in the
approach taken to formatting a document.  As in single-column
mode, the ".pa" PAGE EJECT and ".cp" CONDITIONAL PAGE
control words operate on a
.us page
basis.  However, there are also ".cb" COLUMN BEGIN and ".cc"
CONDITIONAL COLUMN control words which operate on a
.us column
.ix 'cb (COLUMN BEGIN)';.ix 'cc (CONDITIONAL COLUMN)'
basis, and you should use them instead of ".pa" and ".cp"
(unless you really want to start a new page).
In  multiple-column mode, text defined with a
".fk" FLOATING KEEP sequence will be promoted to the next
column if it won't fit in the current column,
and footnotes are printed at the bottoms of columns instead of pages.
.section 'Balancing Columns'
.pp;By default, SCRIPT attempts to "balance" the columns
on a page before it prints the page.
For example, if the first column on a page
is full and the second is only half full, then
SCRIPT will move some lines from the bottom
of the first column to the top of the second column,
to create two columns which are each three-quarters
full, before it prints the page.
..pp;You can use the ".bc"
BALANCE COLUMNS control word (with an ON or OFF
.ix 'bc (BALANCE COLUMNS)'
operand) to explicitly prevent (OFF) or allow
(ON) column-balancing.
..pp;There are some things which prevent SCRIPT from attempting
to balance the columns on a page even when column-balancing is "ON".
For example, if a column contains a footnote or was terminated with
a ".cb" COLUMN BEGIN, then that column cannot be balanced.
.section 'Switching Between Single and Multiple Columns'
..sp
.multicol 2
..il +3;The ".sc" SINGLE COLUMN control word allows
you to switch from multiple-column
..ix 'sc (SINGLE COLUMN)'
mode to single-column mode (for example,
to create a table or figure the full width
of the page), and the ".mc" MULTIPLE COLUMN
control word will switch you back to the
..ix 'mc (MULTIPLE COLUMN)'
previously-defined multiple-column mode.
For more complicated effects you can use
the ".cd" control word instead.
For example, you can go from two columns to three
columns and back to two columns again.
..pp;If ".bc on" is in effect, then
any time you switch from a multiple-column mode
to a different number of columns (by using either ".sc"
or ".cd"), SCRIPT attempts to balance columns
before switching to the new
column mode.
.multicol 1
.chapter 'Using System Reference Variables'
..pp;System Reference Variables are maintained by SCRIPT
to make it possible to get at information that may be useful
in formatting a document.
For example, the SCRIPT ".ur" USE REFERENCE control word
..ix 'ur (USE REFERENCE)'
..sp;     .ur &sysdate
..sp;results in the characters
..sp;..in 5;..ur &sysdate
..sp;..in;which is the date on which this document was printed.
This is extremely useful in preparing letters, because it can be used
in conjunction with ".ra" (RIGHT ADJUST), as in
..ix 'ra (RIGHT ADJUST)'
..sp;     .ur .ra &sysdate
..sp;to produce the following effect:
..sp;..ur ..ra &sysdate
.chapter 'Creating Your Own SCRIPT Control Words Using MACROs'
..pp A MACRO is a "named" sequence of SCRIPT control words and text deli
with ".dm" DEFINE MACRO
..ix 'dm (DEFINE MACRO)'
control words.  SCRIPT saves these input lines
and invokes them automatically whenever
the name of the MACRO is used as a SCRIPT control word.
For example,
..sp;..cc 3
     .dm para begin
     .sp a;.il +8
     .dm para end
..sp;defines a MACRO named "para" which you can invoke by specifying
..sp;     .para
..sp;and, as a result, one blank line will be generated and the next lin
of text will be indented 8 positions to the right of the current indent
.chapter 'The Control Word Indicator and Separator'
.section 'Ignoring the Control Word Indicator'
..pp;There will be instances in which it is necessary to force SCRIPT
to treat an input line as text even though it starts with the control
word indicator (.) mentioned on page
..ur &lipage..
This can be done for a specific number of input lines by using the SCRIP
..ix 'li (LITERAL)'
LITERAL control word.  For example,
..sp;..cc 3;     .li 2
     ... This line of text starts with a "."
     ... and so does this one
..sp;causes SCRIPT to take the next 2 input lines as text even though th
start with the control word indicator.
.section 'Changing the Control Word Indicator'
..ix 'li (LITERAL)'
..pp;If you have a large number of input text lines which start with the
control word indicator, and you don't want to have to bother counting th
and specifying the ".li" control word as shown in the previous section,
you can change the control word indicator to some other character.
For example,
..sp;..cc 6;     .li ?
     .These are lines of text which may or may not
     start with "."s, but will be treated as text anyway
     .       ...
     .       ...
     ?li .
..sp;causes SCRIPT to change the control word indicator from
a "." to a "?", and then back to a "." later on.
.section 'Defining a "No-Break" Control Word Indicator'
..pp;Many of the SCRIPT control words described in this Introduction
cause a "break"
..ur (see Section &brpage.).
There are some instances in which this is not desirable.
You can define a "no-break" control word indicator by using
the ".li" control word.  For example,
..sp;     .li , nobreak
..ix 'li (LITERAL)'
..sp;defines the "," as the "no-break" control word indicator.
This is very useful whenever you want to use a control word which
would normally create a break without having it do so, as shown below:
..sp;..cc begin
     The following lines of text will be formatted without
     creating any breaks, and, at the same time, we will
     indent the text 10 spaces, starting with the line
     in which the word "here"
     ,in 10
     appears.  If ".in" were used instead, the line
     containing this word would be printed, no matter
     how full it was, and the indent would start with
     the next line after it.
     .in
..cc end;..sp;produces:
..ix 'in (INDENT)' 'without creating a break'
..sp;..cc begin
The following lines of text will be formatted without
creating any breaks, and, at the same time, we will
indent the text 10 spaces, starting with the line
in which the word "here"
,,in 10
appears.  If ".in" were used instead, the line
containing this word would be printed, no matter
how full it was, and the indent would start with
the next line after it.
..in
..cc end
..pp;If you want to
..us remove
the "no-break" indicator, so that it is no longer in effect, then specif
..sp;     .li * nobreak
.section 'The Control Word Separator'
..pp;If you ever find it necessary to change the control word separator
character, the SCRIPT ".cw"
..ix 'cw (CONTROL WORD SEPARATOR)';CONTROL WORD SEPARATOR control word
will do it for you.  For example,
..sp;     .cw <
..sp;causes the control word separator character
(the semicolon, ";") to be replaced by the character "<";
you can restore it to the semicolon later on by specifying
..sp;     .cw ;
..cm -- start of installation-dependent chapters -----------------------
..ur ..if '&site' ne '';..th ..im using .;..el ..do
.chapter 'Using SCRIPT'
.section 'VM/370 CMS'
..pp In CMS, you may use either EDIT or WYLBUR to create a file
of type "script", enter the input records, and save the file.
To SCRIPT the file, specify the CMS command
..sp;     SCript filename (options
..sp;where "filename" is the name of your input file.
A list of the options available may be obtained by issuing the CMS
command
..sp;     help script
..sp;(or "$help script" from within EDIT, or "@help script" from within
..pp It is also possible to use the "help" command to get reference info
on a particular SCRIPT control word, by specifying the control
word instead of "script" (for example, "help .in" will tell you about IN
.section 'The BATCH Service'
..pp If you are using WITS or WYLBUR to create your file, then the follo
Job Control Language (JCL) should be included:
..sp;..cc begin
     //jobname JOB '#,F=5200,accounting options'
     //  EXEC  SCRIPT
     //SCRIPT.SYSIN  DD  *
     input file
     /*
..sp;..cc end;The "accounting options" are described in the "BATCH Job C
Options" document available from any of the Consulting Offices.
If you wish to specify any SCRIPT options, then change the EXEC card to
..sp;     //  EXEC SCRIPT,SCRIPT='options'
.section 'The DEBUG Service'
..pp SCRIPT may be accessed through the DEBUG Service reader/printer
stations or the WIDJET system as follows:
..sp;..cc 3
     $ACC acct# name
     $JOB  SCRIPT
     input file
..sp;Unfortunately, keypunches do not have lower-case characters.
.section 'The UTILITY Service'
..pp If you are using WITS or WYLBUR, you can submit a SCRIPT job to the
DEBUG Service, but the time- and page-limits are restrictive.
Instead, it is more appropriate to submit a SCRIPT job to the
CLASS=Y UTILITY Service, using the following control cards:
..sp;..cc 4
     //jobname JOB '#,F=5200,accounting options',CLASS=Y
     $JOB  SCRIPT
     input file
     /*
.section 'Some Very Helpful SCRIPT Options'
..pp;There are a great many options you can specify when invoking SCRIPT
but most of them are beyond the scope of this Introduction.
The "MARK" and "NUM" options below will make it considerably easier for
relate the output produced by SCRIPT to the corresponding lines in your
input file, and hence make it easier for you to edit your input file.
..in 10
..sp;..cc 3;..oo 1 EIGHT
..ix 'options' 'EIGHT'
SCRIPT assumes that the output is being produced at SIX lines to the ver
inch on a page which is 11 inches long.  Specifying the EIGHT option
causes SCRIPT to count lines at eight per inch instead of six to decide
the 11-inch page is "full".
..sp;..cc 3;..oo 1 MARK
..ix 'options' 'MARK'
The "MARK" option causes SCRIPT to underscore the first character of eac
input text line in the output.  This makes it easier to determine
exactly which input line you are looking at, in conjunction with the "NU
option.
..sp;..cc 3;..oo 1 NUM=n
..ix 'options' 'NUM='
The "NUM=" option causes SCRIPT to print the input line numbers and the
name of the input file from which they came, starting in output column "
For example, "NUM=85" is convenient, because it puts this information
off to the right of the text area.  Take care that the value you specify
for "nn" is greater than the sum of the ADJUST and LINE LENGTH values fo
your document.
..sp;..cc 3;..oo 1 PA=m:n
..ix 'options' 'PA= (PAGE)'
Causes SCRIPT to print only pages "m" through "n".
If ":n" is omitted, only pages from "m" to the end of the document are p
..sp;..cc 3;..oo 1 PL=n
..ix 'options' 'PL= (PAGE LENGTH)'
If your output is not being produced on paper that is 11 inches long, yo
will need to tell SCRIPT how many lines there are on the page.
For example, if your output page is 12.5 inches long, then specify
"PL=75" for 6 lines to the inch, or "PL=100" for 8 lines to the inch.
..sp;..cc 3;..oo 1 PR;..oo 1 DISK;..oo 1 SCREen
..ix 'options' 'PR'
..ix 'options' 'DISK'
..ix 'options' 'SCREEN'
These options are only useful in CMS, where the output is sent to your
terminal by default
(in all other systems mentioned
above, output is always sent to the high-speed line printer).
The "PR" option causes SCRIPT to send the output directly to the high-sp
printer.  The "DISK" option causes SCRIPT to put the output on your disk
in a file with the same name as the input file, but with a file type of
LISTING.
The "SCREen" option is useful for visual-display devices which do not su
"backspace and underscore" output.
..sp;..cc 3;..oo 1 STOP
..ix 'options' 'STOP'
If your output is being produced at a hard-copy terminal, this option wi
cause SCRIPT to stop at the bottom of each page so that you can put in
the next sheet of paper.
..sp;..cc 2;..fo no;..oo 1 example
SPOOL PRINTER FORM 5200
SC filename (PR NUM=85 MARK
..in
.chapter 'Where To Go From Here?'
..pp Before you embark on using SCRIPT for a document of any great compl
it is recommended that you try SCRIPT on a few small documents, to build
some experience.
..pp If you need help with SCRIPT, contact one of the User Services
Consultants, in any of the Consulting Offices.
.section 'SCRIPT Reference Card'
..pp;A copy of the most current SCRIPT Reference Card may be obtained
from any of the Consulting Offices.
.section 'SYSPUB'
..pp SYSPUB is a set of MACROs which simplify the task of
preparing and formatting documents which fall into the category of paper
theses, books, and other research publications.
..pp SYSPUB allows you to prepare your publication using a set of comman
which perform all of the numbering of chapters, sections, subsections,
tables, figures, and footnotes automatically.
These commands also format the text to conform to a widely-accepted
set of layout standards (including those required for theses at this
university).
SYSPUB will also generate a Table of Contents for your publication.
..pp;SYSPUB allows you to prepare your document
without you having to learn any more about SCRIPT than is presented
in this Introduction
(in fact, with SYSPUB, you don't need most of what is in this Introducti
but it's a good idea to understand it anyway).
This Introduction was prepared using the SYSPUB commands.
..pp A copy of the SYSPUB User's Guide many be obtained from any of the
Consulting Offices.
.section 'Obtaining a SCRIPT Reference Manual'
..pp The material presented in this Introduction is the basis for solvin
most of the common formatting problems.
When you need more information on SCRIPT, then submit the following job:
..sp;..cc 2
     //jobname JOB  '#,TIME=2,PAGES=300,F=5200'
     //     EXEC     SCRIPTMN
.section 'Updating Your SCRIPT Reference Manual'
..pp;SCRIPT is under on-going development at the University of
Waterloo.  Updates to your SCRIPT Reference Manual may be produced by
submitting the following job:
..sp;..cc 2
     //jobname JOB '#,T=1,P=200,F=5200'
     //     EXEC     SCRIPTMN,SCRIPT='+UPDATE=yymmdd'
..sp
where "yymmdd" is replaced by the date on which your SCRIPT Reference
Manual was printed (see the title page in the SCRIPT Reference Manual).
Each time you submit this job, you obtain a new title page, and replacem
pages for your Reference Manual for any component which has been changed
since the date specified by "yymmdd".
..pp;You can submit either of the above jobs through WITS, WYLBUR, or CM
If you are submitting a job through CMS, then type "help submit" for mor
information before you attempt to submit the job.
If you are submitting a job on cards at a BATCH Service card-reader, the
you must replace the "#" with your account number and lock.
..do end;..cm end of installation-dependent chapters -------------------
.index 1 'Index of SCRIPT Control Words and Options' 2
.contents
