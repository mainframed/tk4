INIT     TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'          ONL01
INIT     QSTART ,                  START INIT CSECT ASSEMBLY      ONL01
         GBLB  &QSP           MVS/SP OPTION                       UF020
         GBLB  &QDBC          DBC    OPTION                       UF024
         GBLB  &QONL          ONL    OPTION                       ONL08
         GBLC  &QDSPRFX       DEFINES HASPCKPT/HASPACE DSN PREFIX ONL09
***********************************************************************
*                                                                     *
*   LOAD QCOMMON                                                      *
*                                                                     *
***********************************************************************
*
****
*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,
****               THIS IS THE ONLY REFERENCE TO IT.
*
         AIF   (&QONL).ONL08                                      ONL08
         L     R11,=V(QCOMMON) ADDR OF QCOMMON                    UF002
         LTR   R11,R11        SEE IF LINKED IN                    UF002
         BNZ   LOADED         YES, CONTINUE                       UF002
.ONL08   ANOP  ,                                                  ONL08
         SPACE 1                                                  UF002
         LOAD  EP=QUEUECMN    QUEUE COMMON AREA
         LR    R11,R0         ADDR OF QCOMMON
         SPACE 1                                                  UF002
LOADED   DS    0H                                                 UF002
         L     R1,4(R13)      PREVIOUS SAVE AREA
         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA
         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD BASE REG
         USING QCKPT,R9       BASE REG FOR CKPT WORK
         L     R9,QVCKPT      LOAD BASE REG
         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK
         L     R8,QVDSPL      LOAD BASE REG
         USING WORK,R13       ADDRESSING FOR SAVE/WORK AREA       UF024
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   VERIFY A TSO ENVIRONMENT, FIND THE ADDRRESS OF THE PROTECTED  ONL02
*   STEP CONTROL BLOCK, AND VERIFY SOME FIELDS IN THE COMMAND     ONL02
*   PROCESSOR PARAMETER LIST.                                     ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         LA    R3,QDWORK           ADDR FOR EXTRACT ANSWER AREA   ONL02
         LA    R4,QAEXTLST         ADDR OF EXTRACT PARAMETER LIST ONL02
         EXTRACT (R3),FIELDS=(TSO,PSB),MF=(E,(R4))  EXTRACT INFO  ONL02
         SPACE 1                                                  ONL02
         L     R1,QDWORK           PICKUP ADDR OF TSO INDICATOR   ONL02
         TM    0(R1),X'80'         IS THIS A TSO ADDRESS SPACE?   ONL02
         BZ    QAABORT             IF NOT, ABORT                  ONL02
         SPACE 1                                                  ONL02
         L     R1,QDWORK+4         PICKUP ADDR OF PSCB            ONL02
         LTR   R1,R1               IS PSCB AVAILABLE?             ONL02
         BZ    QAABORT             IF NOT, ABORT                  ONL02
         SPACE 1                                                  ONL02
         USING PSCB,R1             NOTE PSCB ADDRESSABILITY       ONL02
         USING CPPL,R2             NOTE CPPL ADDRESSABILITY       ONL02
         SPACE 1                                                  ONL02
         CLM   R1,15,CPPLPSCB      VERIFY PSCB ADDR IN CPPL       ONL02
         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02
         CLC   PSCBUPT,CPPLUPT     VERIFY UPT ADDR IN CPPL        ONL02
         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   GET THE USERID AND ITS LENGTH AND SAVE THEM IN QCOMMON        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         MVC   QLOGON(L'PSCBUSER),PSCBUSER  SET USERID IN QCOMMON ONL02
         SLR   R0,R0               CLEAR FOR INSERT               ONL02
         IC    R0,PSCBUSRL         PICKUP LENGTH OF USERID        ONL02
         ST    R0,QLOGONLN         SET LENGTH IN QCOMMON          ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   CHECK PSCB FOR OPERATOR AUTHORITY                             ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTHORITY? ONL02
         BZ    SKIPOPER            SKIP IF NO                     ONL02
         OI    QAFLAGS,QAFXOPER    SHOW USER HAS OPER AUTHORITY   ONL02
SKIPOPER DS    0H                                                 ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   FILL IN DAIR PARAMETER LIST FROM THE CPPL                     ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         MVC   DAPLUPT,CPPLUPT     USER PROFILE TABLE             ONL02
         MVC   DAPLECT,CPPLECT     ENVIRONMENT CNTL TABLE         ONL02
         MVC   DAPLPSCB,CPPLPSCB   PROTECTED STORAGE CNTL BLK     ONL02
         SPACE 2                                                  ONL02
         AIF   (NOT &QDBC).NODBC1 SKIP IF DBC NOT INSTALLED       UF024
******************************************************************UF024
*                                                                 UF024
*   IF USER HAS OPER AUTHORITY, ESTABLISH ESTAE ENVIRONMENT       UF024
*                                                                 UF024
******************************************************************UF024
         SPACE 1                                                  ONL02
         TM    QAFLAGS,QAFXOPER    DOES USER HAVE OPER AUTHORITY? ONL02
         BZ    NOTOPER             SKIP IF NO                     ONL02
         SPACE 1                                                  ONL02
         LOAD  EP=DBC,ERRET=NOTOPER  LOAD ESTAE ROUTINE           UF024
         LR    R3,R0          ADDR OF ROUTINE                     UF024
         MVC   WORKAREA(DBCMFLN),DBCMFL GET ESTAE PARM LIST       UF024
         ESTAE (R3),MF=(E,WORKAREA)  CREATE THE ESTAE             UF024
         OI    QFLAG1,QFLG1DBC  INDICATE NEED TO DELETE AT TERM   UF024
         B     NOTOPER        CONTINUE PROCESSING                 UF024
DBCMFL   ESTAE ,MF=L          LIST FORM OF ESTAE                  UF024
DBCMFLN  EQU   *-DBCMFL       LENGTH OF LIST FORM ESTAE           UF024
NOTOPER  DS    0H                                                 ONL02
.NODBC1  ANOP                                                     UF024
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   MOVE COMMAND BUFFER TO REPLY BUFFER                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         L     R1,CPPLCBUF    ADDR OF COMMAND BUFFER
         LH    R3,0(R1)       LENGTH OF COMMAND BUFFER
         LH    R4,2(R1)       OFFSET TO FIRST DATA BYTE
         LA    R1,4(R1,R4)    FIRST DATA BYTE
         SR    R3,R4          SUBTRACT OFFSET FROM LENGTH
         SH    R3,=H'4'       SUBTRACT OVERHEAD
         SH    R3,=H'1'       IS LENGTH ZERO?
         BM    SKIP           YES. SKIP IT.
         EX    R3,OCBUF       TRANSLATE TO UPPER CASE
         CLC   =C'CKPT(',0(1) IS REQUEST FOR CKPT?
         BE    CKPT           YES. DO IT.
         MVC   QDREPLY,QBLANK BLANK THE REPLY LINE
         CH    R3,=H'62'      IS LENGTH OVER 63?
         BNH   OK             NO. USE IT.
         LA    R3,62          USE MAXIMUM LENGTH
OK       EX    R3,MVCBUF      MOVE THE DATA
         LA    R3,1(R3)       INCREMENT TO TRUE LENGTH
         STH   R3,QDRLNG      STORE REPLY LENGTH
SKIP     DS    0H                                                 ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         GETMAIN R,LV=65536
         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN
         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE
         A     R1,=F'65536'   END OF TABLE
         ST    R1,QCEND
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM AUTHORIZATION CHECK FOR QUEUE COMMAND START-UP        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QASTART           PERFORM START-UP AUTHORIZATION ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   ALLOCATE HASPCKPT                                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         MVC   DA08DDN,=CL8'HASPCKPT' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNCKPT) DSNAME FOR ALLOCATE
         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM PRE-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK         ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QABEFOPN          PRE-OPEN CKPT/SPOOL AUTH CHECK ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT
         L     R2,QCSTART     USE TABLE AREA FOR IOAREA
         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS
         READ  HDECB1,SF,,(R2),MF=E READ FIRST RECORD
         CHECK HDECB1
*                                                                 UF039
*        GETMAIN DECB WORK AREA FOR CKPT ROUTINE                  UF039
*                                                                 UF039
         SR    R0,R0          CLEAR FOR IC                        UF039
         IC    R0,DCBNCP-IHADCB+HASPCKPT  NUMBER OF CHANNEL PGMS  UF039
         MH    R0,=Y(HDECB1L) TIMES LENGTH OF A DECB              UF039
         GETMAIN R,LV=(0)     GET ENOUGH STORAGE                  UF039
         ST    R1,QCDECBPT    SAVE ADDRESS FOR CKPT ROUTINE       UF039
***********************************************************************
*                                                                     *
*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *
*                                                                     *
***********************************************************************
         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT
         AIF   (&QSP).QSP1                                        UF020
         LH    R5,$NUMTGV     NUMBER OF TRACK GROUPS PER VOLUME
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8
         SRL   R5,3           DIVIDE BY 8
         SR    R0,R0          ZERO OUT R0
         IC    R0,$NUMDA      NUMBER OF SPOOL VOLUMES
         MR    R4,R0          LENGTH OF TRACK GROUP MAP IN R5
         AGO   .QSP2                                              UF020
.QSP1    ANOP                                                     UF020
         LH    R5,$NUMTG      NUMBER OF TRACK GROUPS PER VOLUME   UF020
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8           UF020
         SRL   R5,3           DIVIDE BY 8                         UF020
.QSP2    ANOP                                                     UF020
         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP
         LA    R5,IOTTGMAP-IOTSTART+TGMAP-TGMDSECT+3(R5) OFFSET
         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY
         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT
         AIF   (NOT &QSP).QSP3                                    UF020
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JIX BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R5,$NUMJBNO    NUMBER OF JOB NUMBERS               UF020
         LA    R5,1(,R5)       PLUS 1 FOR HEADER                  UF020
         SLL   R5,1           TIMES LENGTH OF 2                   UF020
         LA    R5,4095(R5)    PREPARE TO ROUND                    UF020
         SRL   R5,12          DIVIDE BY 4096                      UF020
         STH   R5,QCJIXL      NUMBER OF BLOCKS FOR JIX            UF020
.QSP3    ANOP                                                     UF020
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R6,$MAXJOBS    NUMBER OF JQES
         LA    R6,1(,R6)       PLUS 1 FOR EYE-CATCHER
         MH    R6,=AL2(JQELNGTH) MULTIPLY BY LENGTH OF JQE
         LA    R6,4095(R6)    PREPARE TO ROUND
         SRL   R6,12          DIVIDE BY 4096
         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
         LH    R3,$NUMJOES    NUMBER OF JOES
         LA    R3,NJOTPRFX(,R3) ADJUSTED LENGTH OF JOT PREFIX
         MH    R3,=AL2(JOESIZE) MULTIPLY BY LENGTH OF JOE
         LA    R3,4095(R3) PREPARE TO ROUND
         SRL   R3,12          DIVIDE BY 4096
         STH   R3,QCJOTL      NUMBER OF BLOCKS FOR JOT
***********************************************************************
*                                                                     *
*   COMPUTE TOTAL LENGTH OF QSES                                      *
*                                                                     *
***********************************************************************
         LA    R4,QSELEN      QSE LENGTH
         MH    R4,$QSENO      MULTIPLY LENGTH TIMES NUMBER OF QSES
         AIF   (NOT &QSP).QSP5                                    UF020
         ALR   R4,R5          ADD ONE BYTE FOR EACH JIX BLOCK     UF020
******************************************************************UF020
*                                                                 UF020
*   COMPUTE NUMBER OF MSQ BLOCKS ON CKPT                          UF020
*                                                                 UF020
******************************************************************UF020
         LH    R1,$NUMRJE     NUMBER OF REMOTES                   UF020
         MH    R1,=Y(3)       TIMES LENGTH OF 3                   UF020
         LA    R1,3(,R1)       PLUS HEADER LENGTH                 UF020
         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020
         SRL   R1,12          DIVIDE BY 4096                      UF020
         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020
******************************************************************UF020
*                                                                 UF020
*   COMPUTE NUMBER OF RSO BLOCKS ON CKPT                          UF020
*                                                                 UF020
******************************************************************UF020
         LH    R1,$NUMRJE     NUMBER OF REMOTES                   UF020
         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020
         SRL   R1,12          DIVIDE BY 4096                      UF020
         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020
******************************************************************UF020
*                                                                 UF020
*   COMPUTE NUMBER OF LCK BLOCKS ON CKPT                          UF020
*                                                                 UF020
******************************************************************UF020
*        LH    R1,$NUMLCK     NUMBER OF LOAD CKPT ELEMENTS        UF020
         LA    R1,9*7         NUMBER OF LOAD CKPT ELEMENTS        UF020
         MH    R1,=Y(LCKSIZE) TIMES LENGTH OF EACH                UF020
         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020
         SRL   R1,12          DIVIDE BY 4096                      UF020
         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020
.QSP5    ANOP                                                     UF020
         ALR   R4,R6          ADD ONE BYTE FOR EACH JQE BLOCK
         ALR   R4,R3          ADD ONE BYTE FOR EACH JOT BLOCK
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R5,HASPACE+62  STORE IN DCB
         STH   R5,HDECB2+6    STORE IN DECB
         LA    R5,63(R5)      PREPARE TO ROUND
         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R14,R5         HASPACE BUFFER SIZE
         MH    R14,=H'3'      3 BUFFERS
         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS
         AIF   (NOT &QSP).QSP6                                    UF020
         AH    R1,QCJIXL      ADD NUMBER OF JIX BLOCKS            UF020
.QSP6    ANOP                                                     UF020
         ST    R1,QCJOTL      STORE RECORD COUNT
         SLL   R1,12          MULTIPLY BY 4096
         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP
         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA
         GETMAIN R,LV=(0)     OBTAIN BUFFERS
         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA
         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC
         AH    R1,=H'4096'    INCREMENT
         AIF   (NOT &QSP).QSP7                                    UF020
         ST    R1,QCJIXA      BUFFER FOR JIX BLOCKS               UF020
         LH    R15,QCJIXL     NUMBER OF JIX BLOCKS                UF020
         SLL   R15,12         TIMES 4096                          UF020
         AR    R1,R15         INCREMENT                           UF020
.QSP7    ANOP                                                     UF020
         ST    R1,QCJQTA      BUFFER FOR JQE BLOCKS
         SLL   R6,12          MULTIPLY BY 4096
         AR    R1,R6          INCREMENT
         ST    R1,QCJOTA      BUFFER FOR JOE BLOCKS
         SLL   R3,12          MULTIPLY BY 4096
         AR    R1,R3          INCREMENT
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R5          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R5          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         AIF   (NOT &QSP).QSP8                                    UF020
         LA    R1,$JQHEADS+$JQHEADL-$SAVEBEG OFFSET 1ST JQE HEAD  UF020
         AGO   .QSP9                                              UF020
.QSP8    ANOP                                                     UF020
         LA    R1,$JQHEADS+2-$SAVEBEG OFFSET TO FIRST JQE HEADER
.QSP9    ANOP                                                     UF020
         A     R1,QCJQTL      BASE OF FIRST CKPT REC
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         LA    R3,$SAVEEND(R4) ADDR OF DA CKPT INFO
.EXIT    ANOP
         MVC   DA08DDN,=CL8'HASPACE' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNSPACE) DSNAME FOR ALLOCATE
         LA    R4,9           MAX POSSIBLE SPOOLS FOR QUEUE       UF020
         AIF   (&QSP).QSP10                                       UF020
         IC    R4,$NUMDA      MAXIMUM NUMBER OF SPOOL VOLUMES
.QSP10   ANOP                                                     UF020
         LA    R7,QCDCBL      LENGTH OF HASPACE DCB
         MR    R6,R4          COMPUTE LENGTH OF DCB POOL
         GETMAIN R,LV=(R7)    OBTAIN DCB POOL
         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN
         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN
         LR    R7,R1          SAVE ADDR OF DCB POOL
         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST
         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES
         MVC   DA08SER(5),$SPOOL PATTERN FOR VOLSER
SPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL
         CLI   0(R3),0        IS THIS VOLUME UNUSED?
         BE    SPOOL4         YES. TRY NEXT.
SPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?
         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.
         CLC   0(1,R5),0(R3)  IS THIS A MATCH?
         BE    SPOOL3         YES. GO WITH IT.
         LA    R5,12(R5)      NEXT TABLE ENTRY
         B     SPOOL2         TRY NEXT ENTRY
SPOOL3   MVC   150(2,R8),2(R5) MOVE TRK/CYL TO TRK/CYL LIST
         MVC   DA08UNIT,4(R5) MOVE UNIT NAME
         MVC   DA08SER+5(1),1(R3) LAST DIGIT OF VOLSER
         LA    R6,1(R6)       INCREASE COUNT BY ONE
         STC   R6,DA08DDN+7   UPDATE DDNAME
         OI    DA08DDN+7,X'F0' MAKE IT A VALID NUMBER
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL
         MVC   47(1,R7),DA08DDN+7 UPDATE THE DDNAME
         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST
         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB
         LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST
SPOOL4   LA    R3,6(R3)       NEXT VOLUME
         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.
         OI    0(R8),X'80'    INDICATE END OF OPEN LIST
         OPEN  MF=(E,QCSPOOLS) OPEN HASPACE
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM POST-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QAAFTOPN          POST-OPEN CKPT/SPOOL AUTH CHECKONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         QSTOP
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   ABORT QUEUE COMMAND PROCESSING                                ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
QAABORT  DS    0H                  ABORT QUEUE COMMAND PROCESSING ONL02
         WTO   'QUEUE COMMAND ABORTED - INVALID ENVIRONMENT',     ONL02X
               ROUTCDE=(11)        TELL USER WHY                  ONL02
         SPACE 1                                                  ONL02
         ABEND 913                 ABEND U913                     ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   PROCESS REQUEST FOR DIFFERENT UNIT AND VOL ON SYS1.HASPCKPT       *
*                                                                     *
***********************************************************************
*
*** FORMAT - QUEUE CKPT(UNIT,VOLSER)
*
CKPT     MVC   DA08UNIT(16),QBLANK BLANK THE UNIT AND VOLSER FIELDS
         LA    R5,DA08UNIT    START OF UNIT FIELD
         LA    R6,DA08SER     START OF VOLSER FIELD
         SH    R3,=H'4'       SUBTRACT OVERHEAD FROM LENGTH
CKPT1    CLI   5(R1),C','     IS THIS THE END OF UNIT FIELD?
         BE    CKPT2          YES. PROCESS VOLSER NEXT.
         MVC   0(1,R5),5(R1)  MOVE ONE BYTE OF UNIT NAME
         LA    R5,1(R5)       ADD 1 TO RECEIVING ADDR
         LA    R1,1(R1)       ADD 1 TO SENDING ADDR
         BCT   R3,CKPT1       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETERS.
CKPT2    CLI   6(R1),C')'     IS THIS THE END OF VOLSER FIELD?
         BE    CKPT3          YES. CONTINUE PROCESSING.
         MVC   0(1,R6),6(R1)  MOVE ONE BYTE TO VOLSER
         LA    R6,1(R6)       ADD ONE TO RECEIVING ADDR
         LA    R1,1(R1)       ADD ONE TO SENDING ADDR
         BCT   R3,CKPT2       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETER.
CKPT3    CLI   DA08UNIT,C' '  IS THERE A UNIT?
         BE    ABORT2         NO. INVALID.
         CLI   DA08SER,C' '   IS THERE A VOLSER?
         BE    ABORT2         NO. INVALID.
         CLI   DA08BLK,0      DID WE GO TOO FAR?
         BE    SKIP           NO. EVERTHING LOOKS GOOD.
ABORT2   TPUT  MESSAGE2,L'MESSAGE2,EDIT,MF=(E,QTPUT) TELL THE USER
         ABEND 97,DUMP        QUIT
***********************************************************************
*                                                                     *
*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *
*                                                                     *
***********************************************************************
ABORT    TPUT  MESSAGE,L'MESSAGE,EDIT,MF=(E,QTPUT)   TELL THE USER
         ABEND 98,DUMP        QUIT.
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
OCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE
MVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY
DEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME
         DC    X'0B00',H'30',CL8'3350'
         DC    X'0D00',H'19',CL8'3330-1'
         DC    X'0E00',H'15',CL8'3380'                            UF037
         DC    X'FFFF'
         DS    0F
TIR3     DC    X'00000300'    POINT PAST SYNC RECORDS
DSNPRFX  DC    C'&QDSPRFX'         HASPCKPT/HASPACE DSNAME PREFIX ONL09
DSNCKPT  DC    Y(L'DSNPRFX+9),CL44'&QDSPRFX..HASPCKPT'            ONL09
DSNSPACE DC    Y(L'DSNPRFX+8),CL44'&QDSPRFX..HASPACE'             ONL09
MESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'
MESSAGE2 DC    C'INVALID PARAMETER SPECIFIED - CKPT(UNIT,VOLSER)'
WORK     DSECT ,                                                  UF024
         DS    18F                 SAVEAREA PORTION               UF024
WORKAREA DS    D                   START OF SCRATCH WORK AREA     UF024
         SPACE 1                                                  UF024
SYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023
INIT     CSECT ,                                                  UF023
         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01
         GBLC  &VERSION
&VERSION SETC  '0'
         AIF   (NOT &QSP).QSP99A                                  UF020
$MAXNODE EQU   1000           FOR SP2 $JOT DSECT                  UF020
         AGO   .QSP99B                                            UF020
.QSP99A  ANOP                                                     UF020
$MAXNODE EQU   99             FOR NJE $JOT DSECT                  UF001
.QSP99B  ANOP                                                     UF020
SAVE     EQU   13             NEEDED FOR NJE $PCE                 UF001
         $PCE  ,              NEEDED FOR NJE $HCT                 UF001
         $JOE
         $JOT
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE
BASE1    EQU   0
$RPS     EQU   0
$MSGID   EQU   0
$DUPVOLT EQU   0
$PRIOOPT EQU   0
$PRTBOPT EQU   0
$PRTRANS EQU   0
$QSONDA  EQU   0
         AIF   (NOT &QSP).QSP99                                   UF020
*        EQUATES REQUIRED FOR $HCT EXPANSION                      UF020
FF       EQU   X'FF'                                              UF020
$CMBDEF  EQU   15                                                 UF020
$JQEDEF  EQU   100                                                UF020
$MAXDA   EQU   32                                                 UF020
$MAXJBNO EQU   9999                                               UF020
$SMFDEF  EQU   5                                                  UF020
$TGDEF   EQU   3072                                               UF020
JCT      EQU   10                                                 UF020
         $LCK  ,                                                  UF020
.QSP99   ANOP                                                     UF020
         $BUFFER                                                  UF020
         $JCT  ,                                                  UF020
         $CAT  ,                                                  UF020
         $TAB
         $QSE
         $PDDB                                                    UF021
         $IOT
         $TGM
         $JQE
         $HCT
         IKJCPPL ,                                                ONL02
         IKJPSCB ,                                                ONL02
         IHADCB DSORG=PS                                          UF039
         QCOMMON
         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01
SYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023
         END
