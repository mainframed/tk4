.section 'STAE$ macro'
.ix 'STAE$ Macro'
.ix Macros STAE$
This macro sets up an estae environment for STAE$XIT.
.sp
STAE$XIT is an estae exit which displays (on the console
or a TSO terminal or both) information about an abend,
including the psw, registers, and (if the psw is within
the csect that issued this macro) the csect name and
the offset of the psw from the beginning of the csect.
.sp
To use STAE$XIT, you need to add the following 4 statements
to your program.

   1)  Near the beginning of your program, after you've
       set up your base register and (in a re-entrant
       program) getmained a work area, code the STAE$
       macro with no operands.
   2)  Anywhere after the last executable instruction
       (but within the main csect) insert:
         STAE$END EQU   *
       this is used by STAE$XIT to determine if the psw
       is between the start of the csect and here.
   3)  In your work area (which in a re-entrant program
       is usually getmained) insert:
         STAE$WRK DS    32D
         STAE$LST DS    16F
       the first is a work area used by STAE$XIT when
       an abend occurs. The second is a work area used
       by the STAE$ macro at the time it is executed.

STAE$LST is broken down as follows
       4F   -  ESTAE MF=L area
       2F   -  2 word parameter list
       5F   -  option list prefix (words 3 and 4 reserved)
       5F   -  first csect descriptor entry

The STAE$ macro makes these 4 sections contiguous,
but they may in fact be scattered if you generate
your own parameter list for STAE$XIT instead of
using this macro.

The STAE$XIT exit is normally loaded dynamically by the
STAE$ macro. This may be unaccepable overhead for certain
applications.  By specifying LOAD=NO as an operand of
the macro, the macro will reference the exit with a
v-type address constant instead of loading it, so the
STAE$XIT exit can be link-edited with the issuing program.

There are 2 advantages to loading the exit dynamically.
First, the link-edit step need not be changed to reference
the library containing the STAE$XIT exit.
Second, improvements made to the STAE$XIT exit will take
effect automatically, with no re-linking of your program.

Messages are normally displayed on a TSO terminal.
For programs not executing from TSO, there is a MSG=WTO
operand which causes the messages to be issued via WTO.
There is also a MSG=WTOT operand, which causes messages
to be issued thru WTO and TSO both.
