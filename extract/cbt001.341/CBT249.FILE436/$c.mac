.section 'Dynamic Tasklib ($C, $P, @C, and @P)'
.ix '$C - Dynamic Tasklib Command'
.ix '$P - Dynamic Tasklib Command'
.ix '@C - Dynamic Tasklib Command'
.ix '@P - Dynamic Tasklib Command'
.ix 'TSO Commands' '$C - Dynamic Tasklib Command'
.ix 'TSO Commands' '@C - Dynamic Tasklib Command'
.ix 'TSO Commands' '@P - Dynamic Tasklib Command'
.ix 'TSO Commands' '$P - Dynamic Tasklib Command'
.sp
.subsection 'Description'
.sp 2
     These commands allow the user to invoke a TSO command or call a
program without the requirement that the TSO command be in the linklist
or the program library name be specified on the call.  If a tasklib is
allocated, these commands will search the tasklib first for the TSO
command or program.

     An optional parameter is provided to allow you to specify the
ddname to be used as the tasklib and if used must be the first parameter
specified.

     The basic syntax is:

     $C command-name  operands
     @C     "           "
     $P program-name  'parm'
     @P     "           "

            or

     $C TASKLIB(ddn) command-name operands
     @C TASKLIB(ddn) command-name operands
     $P TASKLIB(ddn) program-name  'parm'
     @P TASKLIB(ddn) program-name  'parm'

     TASKLIB may be abbreviated as T.






     These commands require that they be in MLPA/PLPA if you require the
authorized functions.  To become authorized they issue the SPF SVC which
will set the JSCBAUTH flag only if the caller is in MLPA/PLPA.  ACF2 is
also invoked to determine if the caller has authorization to use
specific resources.
.sp 2
.subsection 'Dynamic Tasklibs'
.sp 2
..subsection 'TASKLIB$    non-authorized'
.sp
     DDname TASKLIB$ is used as the tasklib by the $C and $P TSO
commands.
.sp 2
..subsection 'TASKLIB@    authorized'
.sp 1
     DDname TASKLIB@ is used as the tasklib by the @C and @P TSO
commands.  Since this is an authorized tasklib you MUST not concatenate
any non-APF authorized libraries to this DD.
.sp 2
.subsection '@C Command'

     @C allows the user to invoke any authorized TSO command from either
     a tasklib specified by ddname TASKLIB@, LPA or the linklist.

     The syntax of @C is:

     @C command operands

     alternate syntax:

     @C TASKLIB(ddn) command operands

.subsection '$C Command'

     $C allows the user to invoke any non-authorized TSO command from
     either a tasklib specified by ddname TASKLIB$, LPA, or the
     linklist.

     The syntax of $C is:

     $C command operands

     alternate syntax:

     $C TASKLIB(ddn) command operands

.subsection '@P Command'

     @P allows the user to invoke any authorized program from either
     a tasklib specified by ddname TASKLIB@, LPA or the linklist.

     The syntax of @P is:

     @P program-name 'parm'

     alternate syntax:

     @P TASKLIB(ddn) program-name 'parm'

.subsection '$P Command'

     $P allows the user to invoke any non-authorized program from
     either a tasklib specified by ddname TASKLIB$, LPA, or the
     linklist.

     The syntax of $P is:

     $P program-name 'parm'

     alternate syntax:

     @P TASKLIB(ddn) program-name 'parm'

