.section 'COPYCAT - CVOL Copy Utility'
.ix Programs COPYCAT
.ix CVOL COPYCAT
.ix COPYCAT
.subsection 'Preface'
.fo off
                    COPYCAT - OS Catalog Utility Program
                                     by
                             Douglas E. Engert
                        Applied Mathematics Division
                        Argonne National Laboratory
                           9700 South Cass Avenue
                          Argonne, Illinois 60439
.fo on
.pp
This 12-77 version contains several minor fixes from Argonne ("F00001" &
"F00003") and a major speed enhancement to this already fast program in
that the catalog I/O is now done at EXCP level ("EXCP01").  A fix from
UCLA for a little more speed yet is also included ("CCN").  The
hardcoded blksizes for SYSIN and SYSPRINT have been changed to 3200 and
605.
.sp;.in +20
F. Pajerski   NASA/GSFC   01DEC77
.in -20
.sp
.subsection 'Introduction'
COPYCAT is an  OS  utility  program  designed  to improve   performance
of  OS  catalog  management  by producing a restructured copy of a
catalog in order to use  the  existing  access  methods  most
effectively.  Multiple input and output catalogs are  processed  and the
redistribution  of  the  entries  is  under  user control. Model DSCBs
for generation  data  groups  and alias  entries  are  also  processed.
Catalogs on all direct  access  devices,  including  data  cells,  are
supported. Backup copies may also be made.
.pp
COPYCAT is an OS utility program  designed  to  produce  an efficent
system  wide catalog which may reside on many volumes.  Substantial
improvement in performance may also be obtained on a system  with  only
a  single catalog. This is accomplished in a number of ways.  First,
catalog  entries  from  many  different catalogs  may  be  redistributed
to  equalize  the load on each individual  catalog.  Second,   each
individual   catalog   is restructured in a way designed to minimize the
I/O time required both  for  searching  and  updating.  The
redistribution   and restructuring  parameters  are under the control of
the user who should have some knowledge of OS catalog management.
.pp
Our installation at Argonne consists of a 370/195, used for batch
processing,  and a 360/75 used for time sharing. The time sharing
system, tso, shares all its online devices with the 195.  Since  all
datasets  used  by  tso  must be cataloged, they are cataloged on the
resident volume for the 75 to allow batch  jobs to  access tso datasets.
This has placed an extremely heavy load on this shared catalog, which
occupies about 20 cylinders  on  a 2314.  After  some  study of the
situation it was found that the organization of the  shared  catalog
was  one  of  our  biggest bottlenecks.  After  running COPYCAT,
software monitoring showed the percent of unit busy time of the system
resident volume  for the  75  dropped  from  about  80%  to about 20%,
the percent of enqueue wait for the catalog dropped from  about  10%  to
about .1%,  And  the  number of EXCPs required to logon to tso dropped
from about 120 to 70.
.subsection 'User Guide'
.subsub 'Functions'
.pp
Two different types of catalog systems can be processed  by COPYCAT.
The first is the standard OS catalog system consisting of the MASTER
catalog on the system resident volume and zero  or more  catalogs  on
other  volumes.  The  second type of catalog system does not have a
MASTER catalog, but instead has  a  table built  into  the  catalog
management routines used to select the first catalog to be searched. The
changes needed for  this  type of catalog system must be locally
written.
.subsub 'Redistribution'
When more than one catalog is being created, redistribution parameters
are  required.  These parameters are supplied on the output cards in the
form of a range of names. The upper bound is defined  on  each  output
card,  and the range extends from the upper bound of the previous card
to this upper bound. An  EBCDIC collating sequence is used.
.subsub 'Restructuring'
The main function of COPYCAT is to restructure a catalog so as  to take
advantage of the catalog management I/O routines. To do this three
parameters may be specified for each index  level.  The  first  is  the
number  of bytes to leave in each block for expansion.  By  leaving
enough  room,  the  catalog  management routines  will  be able to add
entries without having to add new blocks. Each CVOL  pointer  takes
twenty-two  (22)  bytes,  and single  volume  dataset  entries  take
twenty-six  (26)  bytes.  Second, the number of dummy blocks to be left
after an index may be specified so the index can expand and new lower
level indexes can be added in close proximity. Third,  the  number  of
blocks that  must  be  on a track before starting the next index may be
given. Since indexes may require more then  one  block,  and  an index
can  be  searched  in  one  I/O operation if it is on one track, this
number should be set large enough so most indexes at a particular level
can fit on one track.
.subsub 'MASTER and SECONDARY Catalogs'
When more then one  output  catalog  is  produced,  one  is usually
defined  as  the  MASTER  catalog,  and  the  others as SECONDARY
catalogs. In the case of only one output  catalog,  it is  always a
MASTER catalog. COPYCAT must be run once to produce the MASTER catalog
in MASTER mode, and if  there  are  SECONDARY catalogs, once in
SECONDARY mode.
.subsub 'MASTER Mode'
When COPYCAT is operating in MASTER mode, only  the  MASTER catalog  is
produced  based  on the output MASTER card(s). CVOL pointers for indexes
covered by the output SECONDARY  cards,  if any, are also added to the
MASTER catalog.
.subsub 'SECONDARY Mode'
SECONDARY mode is used to produce the  SECONDARY  catalogs.  The  choice
of  which  indexes are placed on which catalogs are defined on the
output cards.
.subsub 'Model GDG DSCBs'
Model DSCBs for generation data groups  are  also  handled.  Since the
model DSCB must reside on the volume that contains the generation index,
COPYCAT will move or  copy  these  DSCBs.  The choice  of  whether to
move or copy the DSCBs should be based on the application. When a single
catalog is being rebuilt  on  the same physical volume, nothing need be
done, since the DSCBs will still be on the volume. When a catalog  is
being  copied  to  a replacement  volume, such as a new release of a
system, then the DSCBs should be copied. When the whole catalog system
is  being reorginized, then the DSCBs should be moved.
.subsub 'Additional CVOL Processing'
Since every direct access volume can have a catalog, or one system may
have access to another systems catalog, it may become necessary to
change many CVOL pointers  on  one  system  if  the other systems
catalog is redistribuled. The CVOL cards have been provided to
accomplish this.
.subsub 'Alias Processing'
Special handling of alias  entries  has  been  included  in COPYCAT.  In
a  multiple  catalog system, an alias name and its true name sometimes
reside in different catalogs. CVOL  pointers with  the  alias  name are
placed in the MASTER catalog during a MASTER operation and in a
SECONDARY catalog during  a  SECONDARY operation, pointing at the true
names volume. The alias entry is then placed in the true names catalog.
.subsub 'Multiple Inputs'
Thirty-two (32) catalogs may be defined as  input.  COPYCAT has been
designed to work on a catalog system where a high level index name,
other than a CVOL pointer, may only  appear  in  one catalog.  When  a
conflict  is  found, the entry from the first defined input catalog is
used. An example of this would be in  a two  cpu  system,  and  both
system resident volume catalogs are defined as input to COPYCAT. If both
catalogs have  entries  for sys1, then only the entries from the first
defined catalog would be used.
.subsub 'CONTROL Cards'
.in +10;.sp
The format for all control cards is:
.sp
Name  operation operands comments
.in -10;
.pp
The name field, if present, must begin in column  one.  The operation
must  be  separated  from the name and operands by at least one blank,
and may start anywhere after  column  one.  The operands must be
separated by commas with no intervening blanks.  A null operand must be
delimited by commas unless it is the last operand.  The  comments  are
separated  from the operands by at least one blank, and any card with an
asterisk '*' in column one is treated as a comment card.
.subsub 'CONTROL'
.pp
The  CONTROL  card  specifies  the  main  functions  to  be performed,
and must be the first non-comment card.
.in +10;.sp
name  CONTROL  MASTER×SECONDARY , GDGMOVE×GDGCOPY ,
       KEEP×SPLIT×UNCATLG

 MASTER×SECONDARY - COPYCAT is to be executed in the  MASTER
           mode  to  produce  the  MASTER catalog, or in the
           SECONDARY mode to produce the SECONDARY catalogs.

 GDGMOVE×GDGCOPY - generation data group model DSCBs are  to
           be  moved or copied. If this operand is null then
           they are not processed.

 KEEP×SPLIT×UNCATLG - the function to be performed on single
           name  datasets.  They  may  be kept in the MASTER
           catalog (KEEP),  they  may  be  redistributed  to
           SECONDARY   catalogs  (SPLIT),  or  they  may  be
           uncataloged (UNCATLG).
.in -10
.pp
When  COPYCAT  is  run  twice  for  a  MASTER  catalog  and SECONDARY
catalogs,  these last two operands should be the same for both runs. If
local modifications to the catalog  management routines  have  been
added so a MASTER catalog is not required, COPYCAT need only be run once
in SECONDARY mode, and  the  third CONTROL card parameter must be SPLIT.
.subsub 'INPUT'
.pp
The INPUT card defines an input catalog  to  be  processed.  There  must
be at least one and as many as thirty-two (32) input cards. The input
datasets  defined  by  these  cards  are  never changed  by the program.
They must not be the same datasets used for output. The input card(s)
must follow the CONTROL card.
.in +10;.sp
name  INPUT ddname,volid

ddname - the name of a dd statement that defines this input
               dataset.

volid - the volume name on which this catalog resides  when
               used  by  the system. This volume need not be the
               same as that defined by ddname.
.in -10;.sp
.subsub 'OUTPUT'
.pp
The  OUTPUT  cards  define  the  output  datasets  and  the
redistribution table. These cards must follow the input cards.
.in +10;.sp
name  OUTPUT  MASTER×SECONDARY ,ddname,volid ,maxname

MASTER - this card defines the MASTER catalog, or the  only
         catalog if only one is being produced.

SECONDARY - this card defines a SECONDARY catalog.

ddname - the name of a dd statement that defines the output
          dataset.

volid - the volume name on which this catalog will be  used
          by  the system. The catalog may be placed on some
          other   volume   temporarily   for   backup    or
          convenience.

maxname - the highest name in EBCDIC collating sequence  to
          which this OUTPUT card applies. This maxname must
          be greater  then  the  maxname  on  the  previous
          OUTPUT  card, and on the last OUTPUT card it must
          be null.
.in -10;.sp
.pp
Each OUTPUT card defines a range of index names that are to be  placed
in its catalog. This range extends from the previous maxname up to and
including the current maxname. The same ddname and  volid  pair  may
appear on more then one card. This allows more then one range of index
names to be placed on one  catalog.  All MASTER cards must have the same
ddname and volid since there can only be one MASTER catalog. The last
OUTPUT card must have a null maxname.
.subsub 'CVOL'
.pp
The CVOL card may be used to alter CONTROL  volume  pointer entries that
point to catalogs outside the current system.
.in +10;.sp
name  CVOL  volid ,newvol, maxname ,ddname

volid - the volume name that is being changed.

newvol - the new volume name for the CVOL entry.

maxname - the highest name in  the  range  of  index  names
          covered  by this CVOL card. All the CVOL pointers
          that point at this volume, whose name is  greater
          than  the previous maxname and less then or equal
          to this maxname, will  be  changed  to  point  at
          newvol.  The  last CVOL card in a set must have a
          null value for maxname, which is the  highest  in
          the collating sequence.

ddname - the name of a dd statement used  for  device  type
          information. This dd statement must define a unit
          of the same type as newvol.
.sp;.in -10;.pp
Many sets of CVOL cards may be defined. Each set must  have volid
specified  on the first card, and maxname must be null on the last. CVOL
cards must follow the output cards.
.subsub 'LEVEL'
.pp
The  LEVEL  card  is  used  to  specify  the  restructuring information.
The greatest performance improvements derived from running COPYCAT
depend on properly choosing these parameters. Up to twenty-two LEVEL
cards may be defined.
.in +10;.sp
name  LEVEL level,bytes,dummies,blocks

level - the index level between one and twenty-two to which
          this card applies.

btyes - the number of bytes to  leave  in  each  block  for
          future expansion, between 0 and 200.

dummies - the number of dummy blocks to  leave  after  this
          index for future expansion.

blocks - the number of blocks that must be on  the  current
          output track before starting this index.
.in -10;.sp;.pp
The LEVEL cards must follow the CVOL cards, if any.  A default value of
zero is applied for any null or missing values.
.subsub 'JCL Statements'
.pp
A JOB card and an EXEC card are  required.  A  SYSPRINT  DD statement is
required for a listing of the input, informational messages and error
messages. The DCB  parameters  are  fixed  at
RECFM=FBA,LRECL=605,BLKSIZE=121. The CONTROL cards are read from the
SYSIN   file   which   has   fixed   DCB   parameters   of
RECFM=FB,LRECL=80,BLKSIZE=3200.  Additional  DD  statements  are
required as specified by the INPUT, OUTPUT and CVOL  cards.  The
datasets  defined  by  these  DD  statements  need  not be named
SYSCTLG, but they must be  on  a  direct  access  volume.  If  a catalog
is  created  on a volume other then the one on which it will be used by
the system, the temporary volume  should  be  of the same device type as
the final volume.
.subsection 'Messages and Codes'
.pp
After a successful run of COPYCAT certain statistics  about each  output
dataset  are  listed. The last TTR plus one in the dataset and the TTR
of the last used block plus one  are  listed in  hexadecimal.  The
number of control volume pointer entries, dummy blocks,  blocks  at
levels  one  and  two,  and  datasets cataloged are listed in decimal.
.pp
The following is a list of error  messages  and  completion codes. The
maximum completion code found during execution of the program is
returned to OS.
.fo off
ERR01 ERROR FOUND IN PARAMETER AT '$'

     An error was found in a parameter or a  required  parameter
     was missing. The previous line will contain a '$' under the
     error.
     (Completion code = 8)

ERR02 ERROR PROCESSING DDNAME='DDNAME'

     A problem was found with a dd statement. Either it was  not
     found,  could  not be opened, or was not on a direct access
     volume.
     (Completion code = 8)

ERR03 UNEXPECTED END OF FILE ON SYSIN

     More CONTROL cards were expected, but were not found.
     (Completion code = 8)

ERR04 NAME=TRUENAME NOT FOUND FOR ALIAS=ALIASNAME

     While processing an alias entry,  the  true  name  for  the
     alias could not be found.
     (Completion code = 12)

ERR05 ALIAS COUNT ERROR FOUND FOR NAME=TRUENAME

     The alias count field in the named index is  not  equal  to
     the number of aliases found for the name.
     (Completion code = 12)

ERR06 TOO MANY INPUT DATASETS

     More then 32 input cards were found.
     (Completion code = 8)

ERR07 INDEX=INDEX FOUND ON VOLS=(X,Y) THE ENTRY  ON  X  WILL  BE
USED

     The same high  level  index  was  found  on  two  different
     catalogs. The one on the x volume will be used.
     (Completion code = 4)

ERR08 NO INPUT CARDS FOUND

     No input cards were found,  or  they  did  not  follow  the
     CONTROL card.
     (Completion code = 8)

ERR09 FUNCTION FAILED  WITH  (CODE)  ON  VOLUME  FOR  GDG  MODEL
DSCB=name

     While moving or copying model DSCBs, an obtain, allocate or
     scratch  operation  failed  with  the return code of 'code'
     (decimal).
     (Completion code = 4)

ERR10 MODEL DSCB FOR GDG DOES NOT HAVE ZERO EXTENTS DSN=NAME

     The named model DSCB is not copied because it does not have
     zero extents.
     (Completion code = 4)

ERR11 MODEL DSCB FOR GDG EXISTS ON OUTPUT VOLUME WITH  DIFFERENT
ATTRIBUTES FOR DSN=NAME

     While moving or copying model DSCBs a DSCB  with  the  same
     name  was  found  on  the output volume, but the aTTRibutes
     defined by the twelve  bytes  in  the  DSCB  at  offset  82
     (decimal)  are  not  the  same.  The  DSCB  is not moved or
     copied.
     (Completion code = 4)

ERR12 ABEND - NNN - OCCURED. SEE SYSMSG. CURRENT OR LAST NAME IS
name

     A D37, B37 or 213 abend occured. The last  index  structure
     being processed is given.
     (Completion code = 16)

ERR13 I/O ERROR - SYNAD MESSAGE
ERR13 I/O ERROR CURRENT OR LAST NAME IS NAME

     An I/O error occured. The standard message  produced  by  a
     synad  macro  is given, along with the last index structure
     processed.
     (Completion code = 16)

ERR14 NO OUTPUT MASTER CARD WAS FOUND

     When in MASTER mode, at least one output MASTER  card  must
     be defined.
     (Completion code = 8)

The completion codes are as follows:

    0 - No ERRors.

    4 - All catalogs are useable, but duplicate indexes have
        been  left  out  or  model  DSCBs have not been moved or
        copied.

    8 - Errors in processing CONTROL cards. The output datasets
        have not been changed.

   12 - All catalogs are useable, but problems exist with alias
              entries.

   16 - Output catalogs have been partly built, and are not
              useable.
.fo on
.subsection 'Examples'
.sp 1
.subsub 'Copy CVOL to New Volume'
.pp
This first example  illustrates  the  most  common  use  of COPYCAT.  A
catalog  on  one  volume is to be copied to another volume, such as when
a new system is being installed.  This  job would  be run under the old
system to copy the catalog on SYSRES to the new system pack, NEWRES,
which will  later  be  relabeled SYSRES.
.sp 2;.fo off
//EX1    JOB   XXX
//       EXEC  PGM=COPYCAT,REGION=60K
//SYSPRINT DD  SYSOUT=A
//OLDRES DD    DSN=SYSCTLG,VOL=SER=SYSRES,
//             DISP=OLD,UNIT=DISK
//NEWRES DD    DSN=SYSCTLG,VOL=SER=NEWRES,
//             DISP=OLD,UNIT=DISK
//SYSIN  DD    *
*              Example one
         CONTROL MASTER,GDGCOPY,KEEP
         INPUT OLDRES,SYSRES
         OUTPUT MASTER,NEWRES,SYSRES
         LEVEL 1,26,100
         LEVEL 2,52,5,5
.fo on
.pp
In this example model DSCBs for generation data groups  are copied. 100
dummy blocks are left after the highest level index, with 26 bytes left
in each block for future expansion. 52  Bytes are  left  in  each
second level index block, 5 blocks are left after each index, and a
second level index will not  be  started on a track within 5 blocks of
the end.
.subsub 'Back up a CVOL'
.pp
This example demonstrates the use of COPYCAT for backing up a  catalog.
Note  that  the  backup dataset does not need to be called SYSCTLG, thus
many catalogs could be  backed  up  on  the same volume.
.fo off
//EX2    JOB   XXX,REGION=60K
//       EXEC  PGM=COPYCAT
//SYSPRINT DD  SYSOUT=A
//CATALOG DD   DSNAME=SYSCTLG,VOL=SER=PACK01,
//             UNIT=DISK,DISP=OLD
//BACKUP DD    DSNAME=CAT.PACK01,VOL=SER=BACKUP,
//             UNIT=DISK,SPACE=(CYL,(3,2)),DISP=(NEW,KEEP)
//SYSIN  DD    *
*              Example 2
         CONTROL MASTER,GDGCOPY,KEEP
         INPUT CATALOG,PACK01
         OUTPUT MASTER,BACKUP,PACK01
/*
.fo on;.sp
.subsub 'Redistribute a CVOL'
.pp
In this example a single catalog is to  be  SPLIT  up  into four
separate  catalogs.  The first step produces the SECONDARY catalogs, and
the second step produces the MASTER  catalog.  The last  step is
executed only if the first two steps ran properly, and it renames the
dataset on RES075.
.fo off;.sp
//EX3    JOB   XXX
//STEP1  EXEC  PGM=COPYCAT,REGION=60K
//SYSPRINT DD  SYSOUT=A
//INPUT  DD    VOL=SER=RES075,UNIT=DISK,DISP=OLD,
//             DSNAME=SYSCTLG
//OLDRES DD    VOL=SER=RES075,UNIT=DISK,
//             DSNAME=NEWCAT,DISP=(NEW,KEEP),
//             SPACE=(CYL,(5,2))
//P87    DD    UNIT=DISK,VOL=SER=PACK87,
//             DSNAME=SYSCTLG,DISP=(NEW,KEEP),
//             SPACE=(CYL,(5,2))
//P88    DD    UNIT=DISK,VOL=SER=PACK88,
//             DSNAME=SYSCTLG,DISP=(NEW,KEEP),
//             SPACE=(CYL,(5,2))
//P89    DD    UNIT=DISK,VOL=SER=PACK89,
//             DSNAME=SYSCTLG,DISP=(NEW,KEEP),
//             SPACE=(CYL,(5,2))
//SYSIN  DD    *
*              Example 3
*              produce the SECONDARY catalogs
         CONTROL SECONDARY,GDGMOVE,KEEP
         INPUT INPUT,RES075
         OUTPUT SECONDARY,P87,PACK87,B9999999
         OUTPUT SECONDARY,P88,PACK88,H9999999
         OUTPUT MASTER,OLDRES,RES075,K9999999
         OUTPUT SECONDARY,P89,PACK89,R9999999
         OUTPUT MASTER,OLDRES,RES075,S9999999
         OUTPUT SECONDARY,P88,PACK88
         LEVEL 1,26,100
         LEVEL 2,54,5,5
         LEVEL 3,,2,2
/*
//STEP2  EXEC  PGM=COPYCAT,REGION=60K
//SYSPRINT DD  SYSOUT=A
//INPUT  DD    VOL=SER=RES075,UNIT=DISK,DISP=OLD,
//             DSNAME=SYSCTLG
//OLDRES DD    VOL=SER=RES075,UNIT=DISK,
//             DSNAME=NEWCAT,DISP=OLD
//P87    DD    UNIT=DISK,VOL=SER=PACK87,
//             DSNAME=SYSCTLG,DISP=OLD
//P88    DD    UNIT=DISK,VOL=SER=PACK88,
//             DSNAME=SYSCTLG,DISP=OLD
//P89    DD    UNIT=DISK,VOL=SER=PACK89,
//             DSNAME=SYSCTLG,DISP=OLD
//SYSIN  DD    *
*              Example 3
*              produce the MASTER catalog
         CONTROL MASTER,GDGMOVE,KEEP
         INPUT INPUT,RES075
         OUTPUT SECONDARY,P87,PACK87,B9999999
         OUTPUT SECONDARY,P88,PACK88,H9999999
         OUTPUT MASTER,OLDRES,RES075,K9999999
         OUTPUT SECONDARY,P89,PACK89,R9999999
         OUTPUT MASTER,OLDRES,RES075,S9999999
         OUTPUT SECONDARY,P88,PACK88
         LEVEL 1,26,50
         LEVEL 2,54,10,10
/*
//STEP3  EXEC  PGM=IEHPROGM,COND=(5,LT)
//SYSPRINT DD  SYSOUT=A
//OLDRES DD    UNIT=DISK,VOL=SER=RES075,DISP=OLD
//SYSIN  DD    *
         RENAME VOL=2314=RES075,DSNAME=SYSCTLG,
               NEWNAME=OLDCATLG
         RENAME VOL=2314=RES075,DSNAME=NEWCAT,
               NEWNAME=SYSCTLG
/*
.fo on;.sp 2
.pp
All indexes up to c will be on pack87, indexes from c to  I and from t
upwards will be on pack88, and from l to s will be on pack89. CVOL
pointers for these indexes will be placed on res075 along  with  all
the  other indexes. Step 3 will be executed if there are no severe
ERRors.
.subsection 'Program Logic'
.pp
COPYCAT is written entirely in assembler language. QSAM  is used for
SYSPRINT and SYSIN, while bsam in the load mode is used for the output
datasets. BDAM is  used  for  the  input  and  to access previously
written output blocks.
.pp
The heart of the program consists of  a  recursive  routine called  rr,
which is called for each level. The TTR of the first block of the level
is passed to rr. After an  index  is  written with  the old TTRs, it is
reread and for each entry with a lower level, rr is recursively called.
Upon return,  the  new  TTR  is placed in the entry and the block is
rewritten.
.pp
When processing the highest  level  index,  the  additional information
of  which  input  dataset this entry came from must also be saved. This
is done by changing the count field  of  the index.  Only three types of
entries need this information saved:  the index pointer entry, the
volume CONTROL block pointer entry, and the generation index pointer
entry. By making the last three bits of the volume CONTROL block pointer
entry '110',  only  the entries  with  a last bit of '0' contain
additional information.  Two bits are used to distinguish  between  the
three  types  of entries,  and  the  other five bits in the length field
are then used to locate the proper input dataset.
.pp
When processing  model  DSCBs,  the  obtain,  allocate  and scratch
svcs   are   used.   Before   running  COPYCAT,  local restrictions on
allocating and  scratching  datasets  should  be considered.  These
svcs  are  only  used  in the routine called gdsproc.
.pp
Two other important routines are INR and  PUTC.  INR  finds the next
name in the highest level indexes to be processed from among all the
inputs. It is called by  rr  and  it  handles  the problem  of duplicate
index names. PUTC is also called by rr and it takes an index and adds it
to the next block for output. PUTC processes the parameters of the level
cards.
