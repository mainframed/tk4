.section 'MODREP - Dynamic MLPA'
.ix MODREP
.ix Programs MODREP
.ix 'Dynamic MLPA'
.sp 2
   LPA/SVC real time loader and replacement and performance tool

.subsection 'Module concepts:'
                      "real time" MLPA simulation, SVC replacement
                      and module "fixing" (for performance and
                      ease of in-core zap)
                      this module is pageable.
                      Loaded modules and SVCS are placed in fixed
                      CSA memory.
                      Why in fixed memory?
                      1) type 1 and 2 SVC's must be resident in the
                         NUCLEUS (or at least appear to be so)
                      2) as this is a "test tool" the assumption
                         is that in-core zaps may become necessary
                         and you are assured the module will be in
                         core at all times (not paged out)
                      3) for performance testing, a duplicate copy
                         of a currently pageable module may be
                         re-loaded and you will be able to examine
                         the performance gains that would result
                         in the permanent fixing of the module via
                         IEAFIXxx

   Memory utilization:
   for modules:       48 bytes of SQA (SP 245)-for CDE/XTLST
   for SVCS:          0 bytes-svc table updated in place
   for modules/svcs:  xx bytes of CSA (SP 228)-fetch will load and
                      relocate your module based upon module size

   Locks obtained:    SALLOC: GETMAIN,FREEMAIN common areas
                      disp:   lock on CDE chain
                      the use of the locking mechanism will not
                      affect the operation of this module in a U.P.
                      Environment (except for locking overhead)

   Link attr:         AUTH,NORENT,NOREUS
                      must be in APF authorized library

.subsection 'Proc:'
                      to start MODREP issue from the operators console

                      S MODREP.id,DSN=data-set name

                      id is required to identify your MODREP session
                      from any other active MODREP sessions.

                      Data-set name defaults to SYS1.TESTMVS.APF
                      (Note: this must be an authorized library)



.subsection 'Sample JCL:'
                      //MODREP    PROC  LIB='SYS1.MVSLMOD'
                      //MODREP    EXEC  PGM=MODREP,TIME=1440
                      //STEPLIB   DD    DSN=SYS1.MVSAPF,DISP=SHR
                      //MODREP    DD    DISP=SHR,DSN=&LIB.
                      //SYSUDUMP  DD    SYSOUT=A
                      //MODIN     DD    *   (Optional)


                      Notes:

                             If MODIN DD is present then ALL commands
                             must be entered via control cards in the
                             format as if from the console.  The default
                             at EOF is Keep.

                             TIME parm-if this program is cancelled
                             for wait time, mods become resident
                             until the next IPL, unless overridden
                             by another startup of this program.
                             DD MODREP-is Where the modules that
                             you will be loading on a real time
                             basis exist.

                             DD STEPLIB-Library must be named in
                             IEAAPFXX member of PARMLIB, else use
                             a linklist dataset with no STEPLIB
                             SYSUDUMP is not necessary (as this
                             code is totally infallible)...sort of

                             It is possible to have as many copies
                             of this program running at once as is
                             necessary (ie. 1 Per PDS library being
                             accessed).


.subsection '   Modifies:'

                       "Display" - display all modules/svcs
                                   currently loaded and their epa's
                       "di"      - short form of above
                       "delete"  - remove (delete) all modules
                                   loaded, then go away
                       "de"      - short form of above
                       "keep"    - leave (keep) all modules loaded,
                                   then go away
                       "ke"      - short form of above
                       "xxxxxxxx"- xxxxxxxx is the name of the
                                   module/svc to be loaded

   Information on aliases:    ----------warning----------

         Alias should be loaded after loading the true name via
         MODREP. This should be done to assure that the memory
         used by the alias entry(s) will be freed when necessary.
         If you forget to load the true name, the only damage is
         that the memory used cannot be freed via "de" or "delete";
         nevertheless, "de" or "delete" will cause the cessation
         of use of all aliases. be Aware that it is only necessary
         to load a single true name and a single alias for the
         routine entry point that you want to test; it is not
         necessary to load every single alias for a module for
         MODREP testing purposes. Also, be aware that an alias
         only costs 48 bytes for the CDE/XTLST, and no memory for
         for the module, and the entire module is loaded under the
         true name.

.subsection 'Informational messages:'

         Message format-
         WTO   'MODREP-xxxxx xxxxx xxxxx',ROUTCDE=(2)
                xxxxx represents texts found below enclosed in
                double parens.

                       "LPA Rep successful"
                       ---the requested module has been placed in
                          the LXA (link pack extension area) and the
                          active LPA chain updated with the newly
                          built CDE/XTLST, so that subsequent uses
                          of the module will be using this
                          replacement copy

                       "SVC Rep successful"
                       ---the requested module has been placed in
                          the nxa (NUCLEUS extension area) if a
                          type 1 or type 2 SVC, or placed in the
                          LXA (link pack extension area) if a type
                          3 or 4 SVC, and the SVC table updated
                          so that subsequent uses of the SVC will be
                          using this replacement copy

                       Note: the determination of whether or not
                             your module goes in the nxa or LXA
                             is based on the module name. Igcxxx
                             is considered a type 1/2 SVC if xxx
                             is between 0-255 (these modules go in
                             the nxa). Igc00xxx is considered a type
                             3/4 SVC if xxx is bewteen 0-255 (these
                             modules go in the LXA). Any other name
                             is considered a standard LPA name (or
                             a standard SVC second, third, etc. Load
                             and is thus placed in the LXA). The
                             nxa and LXA are conceptual only, in
                             reality both exist in SP 228.

                       "SVCTABLE Type invalid, changed to type 3"
                       ---you have requested a type 3/4 SVC be
                          replaced in the LXA (based on the name you
                          supplied (see note above)), but the
                          SVC entry type indicates a non-type 3/4
                          SVC (ie. 1,2,5,6). Therefore, the SVCTABLE
                          is temporarily updated to indicate that
                          this SVC is a type 3. Before final SVC
                          installation, be sure to zap the SVCTABLE,
                          or do another I/O' gen specifying the
                          correct type of SVC.

                       "SVCTABLE Type invalid, request rejected"
                       ---you have requested a type 1/2 SVC be
                          replaced in the nxa (based on the name you
                          supplied (see note above)), but the
                          SVC entry type indicates a non-type 1/2
                          SVC (ie. 3,4,5,6). Therefore, the request
                          is rejected, as it is unknown whether you
                          intended a type 1 or a type 2 (this is
                          virtually meaningless for the above case
                          of type 3/4 as they are entered with the
                          same attributes, therefore 3/4 in that
                          case will suffice). To correct this
                          problem on a temporary basis, in-core zap
                          the SVCTABLE type to indicate the type of
                          SVC you require, then re-issue your
                          command. Before final SVC installation, be
                          sure to zap the SVCTABLE, or do another
                          I/O' gen specifying the correct type of SVC
                          (note: this will most likely happen in the
                          case of an undefined or type 5 SVC).

                       Note: SVC's that are currently defined as
                             type 5's, or currently undefined may
                             be replaced in the above manner, it
                             is not necessary to do an I/O' gen prior
                             to testing the SVC(s), but if any locks
                             are necessary that are not already on
                             in the SVCTABLE entry, they must be
                             zapped on prior to the loading of the
                             SVC by MODREP, or the SVC will be
                             entered with incorrect lock attributes.

                       "LPA/SVC Delete(s) successful"
                       ---in response to your "delete" or "de"
                          request, all modules and SVCS currently
                          under control of MODREP (this module) have
                          been successfully removed from the system.
                          In the case of SVC's, the SVCTABLE is
                          placed back in it's pre-modrep (original)
                          state (including SVC type), and the nxa
                          memory is freed. In the case of LPA
                          modules, the CDE/XTLST that were built
                          for this module are de-chained, and the
                          memory for the CDE/XTLST (SQA) and LXA
                          memory is freed. The net result is that
                          everything is as it was prior to the
                          invokation of MODREP.

                       "All LPA/SVC mods remain resident"
                       ---in response to your "keep" or "ke"
                          request, all modules and SVCS currently
                          under control of MODREP (this module) are
                          released to the system for permanent use
                          until the next IPL. Once this has taken
                          place, the only way to get rid of the MOD
                          is to start another copy of MODREP and
                          place a "newer" copy of the MOD in the
                          system. You can never delete any module
                          that was placed in the system with a prior
                          invokation of MODREP. This consideration
                          is only important in the fact that a
                          subsequent use of this module will
                          successfully do what you want, but the
                          previous invokation's memory for the
                          CDE/XTLST and module (nxa,lxa) are fixed,
                          and thus become wasted "real frames" of
                          memory. Also a consideration for SVC's
                          is that MODREP can only place the SVCTABLE
                          back in the state it was when MODREP began
                          (assuming you enter "keep" or "ke"),
                          therefore, the SVCTABLE can never be
                          placed back in it's original (as of IPL)
                          state without an IPL (or in-core zap if
                          you recorded the epa before using MODREP).
                          If it is not obvious by now, the
                          implications are such that if you reply
                          "keep" or "ke", you had better mean it!!!

                       Note: the failure of this module (abend) is
                             an implied "keep" or "ke". There is
                             currently no estae environment, and it
                             has not yet proven necessary. The most
                             common loss of the module will be a
                             b23 abend due the comtask failing,
                             thus this task's WTOr causing it's
                             failure. Should this happen, you have
                             more to worry about than MODREP. You
                             may start a subsequent copy as
                             explained above, should the comtask
                             failure (or any other failure) not be
                             permanent.

                       "Module unlocatable"
                       ---in response to your "xxxxxxxx" request,
                          a BLDL to the current PDS (specified by
                          the //MODREP DD STATEMENT) INDICATES THAT
                          The requested module does not exist, and
                          therefore cannot be loaded. Check that you
                          have specified the correct name, or the
                          correct library (see "lib" on proc
                          statement for possible override)

                       "Lock failure"
                       ---during processing, a failure to obtain
                          or release a required lock has occurred.
                          Although this is most likely a system
                          oriented problem (or code has been added
                          incorrectly), the last command issued may
                          be re-issued to check the validity of the
                          message with no harm. If the message
                          persists take two aspirin and lie down,
                          or check to see who is the current holder
                          of the SALLOC or disp lock, and find out
                          why he will not release it (you have
                          now definitely uncovered a system bug).

                       "SVC Rep successful"
                       "SQA critical, request aborted"
                       ---during processing, a conditional request
                          for SQA (for CDE/XTLST, or fetch
                          pre-processing code) has returned a
                          non-zero return code, indicating that SQA
                          is not currently available. The last
                          command issued may be re-issued to check
                          the validity of the message with no harm.
                          If the message persists, check the current
                          SQA level, determine who is using it and
                          why, and wait until it is released, or if
                          necessary, re-ipl specifying more SQA
                          (or CSA for expansion).

                       "Response lost-reenter"
                       ---during processing, a FREEMAIN request for
                          CSA obtained by this module has failed.
                          Re-enter the last command, and the
                          FREEMAIN will be re-attempted. If the
                          condition persists, reply "display" or
                          "di" to find which modules are still under
                          MODREP's control. The modules listed are
                          those that cannot be freed. Enter "keep"
                          or "ke" to allow MODREP to shutdown
                          normally, then if those modules listed
                          should have been replaced by the originals
                          it will be necessary to start MODREP again
                          running against the library where the
                          original moudles are, and using MODREP to
                          re-load the originals. This condition
                          should never persist for more than three
                          attempts, if it does use dristan nasal
                          decongestive, then look at the program
                          logic.


                       "Already loaded, ignored"
                       ---you have requested that MODREP load a
                          module which has already been loaded by
                          MODREP during this session. The request
                          is ignored. If you must load another copy
                          either use MODREP to delete the current
                          one, or if you have multilple modules
                          under modreps control and you do not wish
                          to delete all the modules (which "delete"
                          or "de" does), start another copy of
                          MODREP, and load your module using the
                          new copy.

                       "Slot table overflow"
                       ---after loading the requested module, MODREP
                          found no space in his "slot table" to
                          record necessary information for later
                          deleteion. The module just loaded cannot
                          be deleted. For a temporary solution (if
                          the module must be deleted, use the
                          procedure defined in the section above
                          for the "re-loading" of the original copy.
                          As a final solution, quit being a turkey
                          and don't load over 20 modules at a time
                          with MODREP. Or...If you must persist in
                          being a turkey, increase the multiplier
                          at constant namtable to the maximum amount
                          of loads required.

                       "PDS Open failed"
                       ---MODREP was unable to open the PDS named
                          in the //MODREP DD statement in your
                          Proc.  Start MODREP again, if the failure
                          persists, check to be sure the data set
                          is intact. For a temporary solution, move
                          the necessary modules to another library.

                       "Internal CDE chain error"
                       ---internal processing has found a glitch
                          in the system built CDE as a result of
                          an internal load. All modules currenty
                          loaded are kept, and MODREP dumps with
                          a user 100.

                       "Internal lle chain error"
                       ---internal processing has found a glitch
                          in the system built lle as a result of
                          an internal load. All modules currenty
                          loaded are kept, and MODREP dumps with
                          a user 200.

                       "Xxxxxxxx ep yyyyyy"
                       ---in response to your "display" or "di"
                          command, the module named xxxxxxxx has
                          an ep of yyyyyy.  All modules currenty
                          loaded are listed.

                       "No mods in use"
                       ---in response to your "display" or "di"
                          command, MODREP has determined that
                          no modules are currently under his
                          control.
