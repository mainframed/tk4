.Section 'GDGCOPY'
.ix GDG GDGCOPY
.ix Programs GDGCOPY
.ix GDGCOPY
.pp
This program copies input generation datasets in reverse order (oldest
GDG first) to an output dataset(SYSUT2) allowing a user to maintain data
in chronological sequence.  This is required if using RMF or other post
processor systems that require SMF data to be in sequence (it avoids
large sorts).
.pp
The input dataset name (high level of the GDG) is passed as parm
information and is used to "dynamically" allocate each generation level
of the group.  Once this routine is complete, the user may scratch and
uncatalog the generation data sets if he wishes.  This routine "will
not" scratch or uncatalog any datasets.
.pp
A message dataset (DDname MESSAGES) is required to inform the user of
any errors and to indicate the progress of the copy operation.  This is
in lieu of WTO messages.
.sp
.pp
The input file (SYSUT1) is dynamically allocated during processing for
every Generation in the group.
.sp 2
.us Sample JCL:
.sp;.in +10
//stepname EXEC PGM=GDGCOPY,PARM='GDG.INDEX'
//MESSAGES DD   SYSOUT=*
//SYSUT2   DD   DSN=output dataset,DISP=(NEW,CATLG),etc....
.in -10
.sp
.pp
.us Note 1:
that no DCB information may be specified for SYSUT1.  DCB
information may be supplied for SYSUT2. The DCB info from SYSUT1 will be
copied to SYSUT2 in the DCB open exit.  Because of that fact, this
program will only work on standard label files (disk or tape).
.sp;.pp
.us Note 2:
For VBS/VS files (like SMF datasets) 'BFTEK=A' is forced for SYSUT1 in
the DCB open exit.
.sp;.pp
.us Note 3:
The MESSAGES file has an LRECL of 121, if it is directed to DASD you
must supply a BLKSIZE.
