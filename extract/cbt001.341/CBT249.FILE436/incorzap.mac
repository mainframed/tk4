.section 'INCORZAP'
.ix INCORZAP
.ix Programs INCORZAP
.sp 2
.subsection 'Introduction'
 **********   INCORZAP -- in-core SUPERZAP program   **********
.sp
INCORZAP Is a service aid program available to run under OS/VS2 MVS.
INCORZAP Inspects or modifies programs in main storage without modify-
ing the original copy of the program that resides on direct access
storage in a program library.

INCORZAP permits zaps to be applied directly to NUCLEUS or link pack
area (LPA) modules without the requirement to re-ipl after the zap has
been applied.  Since INCORZAP modifies only the main storage copy of a
module, the zap will be gone when the system is eventually re-ipled un-
less the zap is applied permanently using AMASPZAP.

As a means to make main storage program modifications, INCORZAP is use-
ful for the following reasons:

    -  INCORZAP permits references at the CSECT level rather than only
       at the load module level.

    -  The syntax and operation of SUPERZAP are easy to understand and
       use.

    -  Since temporary modifications to modules on program libraries are
       usually made with SUPERZAP, it makes sense to use a compatible
       mechanism to make temporary modifications to modules in main
       storage.

.subsection 'AMASPZAP Compatibility'
INCORZAP is compatible in control statement format and JCL requirements
to AMASPZAP, the original SUPERZAP program. INCORZAP also has these
additional functions:

    -  The option to supply control statements via a parameter list
       rather than through a SYSIN stream.

    -  The ability to use program symbols as well as absolute numbers to
       determine offsets within CSECTs.

    -  An optional, enhanced console mode of operation.

    -  The option to localize program modifications by loading a private
       version of a module into the job pack area.

    -  Multiple control statements per line via the logical line separa-
       tor character ('/').

.subsub 'JCL Requirements'

                      ×--                                 --×
                      ×  PGM=INCORZAP                       ×
   //(STEPNAME) EXEC <                                      >
                      ×  PGM=LINKZAP,Parm='control stmts'   ×
                      ×--                                 __×


   //SYSLIB DD DSN=...      PROGRAM LIBRARY FROM WHICH IN-CORE MODULE
                            Was loaded. (Required)

   //SYSPRINT DD SYSOUT=... PRINTED OUTPUT. (OPTIONAL).

   //SYSIN DD *             CONTROL STATEMENTS. (REQUIRED FOR INCORZAP,
                            Ignored for LINKZAP) .

.subsub 'Control Statements'

   NAME loadmod (CSECT)
   VERIFY offset** hexstring
   REPLACE offset** hexstring   causes pgfix if pageable
   RESTORE offset** hexstring   like REP, but causes pgfree
   DUMPT loadmod (CSECT)        dump in-core program data
   CONSOLE                      read control statements from console
   BASE hexvalue                hexvalue will be subtracted from numeric
                                offsets
   RESET                        clears no-go switch
   /                            logical line separator
   ZAP offset** hexstring       zeroes bytes if equal to hexstring
   *                            comment
   LOCAL                        following name statements will load mod-
                                ules into job pack area
   GLOBAL                       drop local mode

.subsub 'Notes'

   * - Alternate DD names : the following ddnames are really the first
       choice of INCORZAP: PROGLIB, PROGLIST, PROGIN. These names are
       thus reserved names and are unavailable for use on any other DD's
       in the step.  If one of these names is not present, the more
       traditional name (SYSLIB,SYSPRINT,SYSIN) is used.

  **-  Offset - may be a hexstring (even number of hex digits) or a
       program symbol in single quotation marks. Entry point names in a
       CSECT may always be used as symbolic offsets. Any symbol in a
       CSECT may be used if the CSECT was compiled and linked with the
       test attribute.

.subsection 'INCORZAP VS. AMASPZAP'

   ********** Comparison of INCORZAP and AMASPZAP *************

AMASPZAP, The original SUPERZAP program, modifies or inspects data and
programs on direct access storage. INCORZAP modifies or inspects pro-
grams in main storage without altering the copies of the programs on
direct access storage.

INCORZAP And AMASPZAP are generally compatible in function, JCL require-
ments, and control statement syntax. Some differences do exist and these
are listed here:

  * CCHHR and ABSDUMP - control statements not applicable to INCORZAP.

  * SETSSI and IDRDATA - control statements not applicable to INCORZAP.

  * Alternate ddnames - are specified differently.

  * Dump formats are different.

  * Input via parameter list - not supported by AMASPZAP.

  * '/' Logical line separator - not supported by AMASPZAP.

  * Symbolic offsets - not supported by AMASPZAP.

  * Local and global control statements - not applicable to AMASPZAP.

  * Restore control statement - not applicable to AMASPZAP.

  * RC control statement - not supported by AMASPZAP.

.subsection 'Control of INCORZAP'

   ************ Controlling the use of INCORZAP ****************

Since INCORZAP can be used to change programs in main storage, misuse
of this facility could threaten installation security and intergrity.

The use of INCORZAP should be controlled in the same manner as AMASPZAP.
A discussion of controlling the use of AMASPZAP may be found in OS/VS2
System Programming Library: Service Aids, GC28-0674.

.subsection 'Operation of INCORZAP'

   ************ Operational considerations with INCORZAP *************

INCORZAP is not supported on VS1 or pre-MVS VS2 systems.

INCORZAP may appear to operate incorrectly if the load module copy on
dasd has been re-link-edited since the load module was last loaded into
main storage. This is because INCORZAP reads the dasd copy to determine
the numeric offsets of CSECTs and other symbols within the load module.

For example, if the NUCLEUS has been re-linked since the last IPL, then
the offsets may have changed. In this case the dasd and main storage
versions of the load module may be different, possibly causing INCORZAP
to improperly compute addresses within the load modulue. The same situa-
tion would occur if a SYS1.LPALIB Module were re-linked since it was
last loaded into the link pack are via a CLPA or MLPA IPL.

INCORZAP Must be link-edited as an APF authorized module in an APF
authorized program library.

.subsection 'Examples'

     ************ Examples -- in-core zap program *************

Example 1 - Zapping an LPA module

 //ZAP1 JOB MSGLEVEL=1
 //E1       EXEC PGM=INCORZAP
 //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN    DD *
  NAME IGC0010A IEDAYOO
  VER 03 C1E8
  REP 03 81A8
 /*

Example 2 - Backing out a zap and unfixing the main storage fixed
            previously

 //ZAP2 JOB MSGLEVEL=1
 //E2       EXEC PGM=INCORZAP
 //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN    DD *
  NAME IGC0010A IEDAYOO
  VER 03 81A8
  RES 03 C1E8
 /*

Example 3 - Using entry points am symbolic offsets

 //ZAP3 JOB MSGLEVEL=1
 //E3       EXEC PGM=INCORZAP
 //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN    DD *
  NAME IGC0010A IEDAYOO
  VER 'QTIP0130' 05C0
  REP 'QTIP0130 '00'
  NAME IGG0CLA1 IGG0CLA9
  VER 'IGGPCMRR' 05C0
  REP 'IGGPCMRR' 07FF
 /*

Example 4 - Dumping an in-core CSECT

 //ZAP4 JOB MSGLEVEL=1
 //E4       EXEC PGM=INCORZAP
 //SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN    DD *
  DUMP IEANUC01 IGC018
 /*

Example 5 - Executing LINKZAP via JCL

 //ZAP5 JOB MSGLEVEL=1
 //E5       EXEC PGM=LINKZAP,
 //         PARM='NAME IEANUC01 IEAVFX00/VER 1023 F8/REP 1023 FF'
 //SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR
 //SYSPRINT DD SYSOUT=A

 (Note use of '/' as a logical line separator. This can be used in
 punched card input and console replies as well.)


Example 6 - INCORZAP procedure for console zapping

 //CORZAP PROC LIB=LPALIB
 //INCORZAP  EXEC PGM=LINKZAP,PARM=CONSOLE
 //SYSPRINT  DD SYSOUT=A
 //SYSLIB    DD DSN=SYS1.&LIB,DISP=SHR
 //SYSUDUMP  DD SYOSUT=A

 (The following examples use the console mode of operation)

Example 7 - Finding the address of a load module

   *03 Enter zap statements, rc or end
       R 03,'NAME IGC0010A'
    IEE600I reply to 03 is; suppressed
    +00E44000 = in-core address of preceding symbol

Example 8 - Finding the address of a CSECT in the link pack area

    *04 Enter zap statements, rc, or end
        R 04,NAME IGC0010A IEDAYOO
     IEE600I reply to 04 is; suppressed
     +00E452B8 = in-core address of preceding symbol

Example 9 - Finding the aadress of an entry point

    *05 Enter zap statements, rc, or end
        r 05, VER 'QTIP0130' 00
     IEE600I reply to 05 is; suppressed
     +00EE55EE = in-core address of preceding symbol
     +VERIFY REJECT - set no go switch
