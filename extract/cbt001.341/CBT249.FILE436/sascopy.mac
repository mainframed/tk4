.section 'SASCOPY Clist'
.ix SASCOPY
.ix CLISTs SASCOPY

.subsection 'Description'


  The SASCOPY CLIST invokes the SAS program and passes it a PROC PDSCOPY
  control statement.  The PDSCOPY PROC will copy a load modeule library
  and reblock the output.  The default block size for the output data
  set is 6144.  This CLIST should be used only if reblocking is desired.
  Do not use SASCOPY to copy directly into a data set with existing
  members.  Instead, copy to an intermediate data set and then use
  IEBCOPY to copy to the target data set.

  The following is the syntax for the SASCOPY command procedure:

       SASCOPY input-dataset output-dataset BLOCK(blksize)

       input-dataset         A load module library that you want the
                             block size changed.

       output-dataset        A preallocated load module library that
                             you want input-dataset copied to.  This
                             data set should be an intermediate data
                             set that will be used as input to IEBCOPY
                             to copy into the real target.  See the
                             data set considerationss below.

       BLOCK(blksize)        The block size that you want the output
                             data set to have after the copy.  This
                             parameter will change the block size in
                             the DSCB.  The default block size is
                             6144.

.subsection 'Block Size Considerations'

  For data sets that have a record format of undefined, the block size
  in the DSCB is the maximum length of any physical record in the data
  set.  The block size in the DSCB can be increased without causing
  problems.  But if the block size is decreased, the blocks that are
  longer than the block size will cause errors conditions when
  accessing these blocks.

  A load module library is the most common type of data set that uses
  undefined records.  The actual lengths of records in load modules do
  not affect the performance of fetching the module for executions.
  However, these lengths affect utilization of space and compatibility
  between data sets.  The length of load module records can be changed
  by using the PDSCOPY PROC of SAS or relink editing the load module
  into a data set that has a different block size.  The requirements to
  reblock data sets cam be minimized by establishing data sets with
  compatible block sizes.

.subsection 'Utilization of DASD Space'

  The linkage editor when creating a load module writes control and
  text records.  The text records are constructed to be as long as
  possible (largest 2k multiple record that is less than the block size
  in the DSCB).  There is no attempt made to calculate the amount of
  available space on the track and write a shorter record to fill the
  track.  Even if this was done, compression of a load library would
  still leave empty space on each track.  By reducing the length of the
  text record the track is better utilized.  On the average one-half
  the maximum length of the text records is not used per track.  For a
  data set on a 3350 with a block size of 19069, the longest possible
  text record is 18k and the average wasted space on each track is 9k.
  If the longest text record was 6k then only 3k per track would be
  unused.  The table below shows a few combinations.

          DSCB Block Size      longest Text Record      Wasted Space
                                                        per Track
             19069                   18k                  9k
             19069                   12k                  6k
             19069                    6k                  3k
             13030                   12k                  6k
             13030                    6k                  3k *
              6144                    6k                  3k

       * Recommended

.subsection 'Linkage Editor Considerations'

  The linkage editor will honor the block size of an existing or
  preallocated data set that has the block size established in the DSCB
  for the data set.  If the block size has not been established in the
  DSCB,  the DCBS PARM option along with the blksize subparameter of
  DCBR will instruct the linkage editor to honor the specified block
  size.  Otherwise, the linkage editor will default to full track
  blocking.  The maximum text record length will be the next smaller 2k
  multiple of either 1) one-half value2 or the SIZE PARM option 2) the
  length of the track.

  Therefore, always preallocate load module libraries and establish the
  desired block size in the DSCB.  Use the standard @ cataloged
  procedures to link edit because value2 of the SIZE option is 12k
  which will limit the length of text records to 6k.  The major
  restriction in using 12k as value2 is that the largest CSECT that can
  be linkedited is ((12k/2) * 512) or 3 megabytes.

.subsection 'Compatible Block Sizes'

  Because 13030 is the most common block size for load libraries, the
  block size in the DSCB should be 13030.  For better utilization of
  space the actual physical record length should not exceed 6144.

.subsection 'Data Set Considerations'

  1.  SASCOPY will replace members with like names.  There is not an
      option for no replace.

  2.  SASCOPY will change the block size in the receiving data set by
      default to 6144 or whatever is specified in the BLOCK keyword.
      This could create errors if members in the receiving data set
      have text records greater than the new block size.  This is the
      reason for copying to an intermediate data set and then using
      IEBCOPY to copy into the target data set.

  3.  Do not use the TSO COPY command to copy load modules.  The TSO
      COPY command will reblock the load module if the receiving data
      has a smaller block size but the module will not be executable.

.subsection 'Using SAS Copy in Batch'

  To reblock a load library, TTRs in each member are changed and for
  large data sets this is very time consuming.  The following is an
  example of using the SAS PDSCOPY PROC in batch.

       //stemname EXEC @SAS
       //IN1      DD DSN=input1-dataset-name,DISP=SHR
       //OUT1     DD DSN=output1-dataset-name,DISP=(NEW,KEEP),
       //          DCB=(RECFM=U,BLKSIZE=6144,DSORG=PO),
       //          SPACE=(TRK,(1,1,20))
       //IN2      DD DSN=input2-dataset-name,DISP=SHR
       //OUT2     DD DSN=output2-dataset-name,DISP=(NEW,KEEP),
       //          DCB=(RECFM=U,BLKSIZE=6144,DSORG=PO),
       //          SPACE=(TRK,(1,1,20))
       //IN3      DD DSN=input3-dataset-name,DISP=SHR
       //OUT3     DD DSN=output3-dataset-neme,DISP=(NEW,KEEP),
       //          DCB=(RECFM=U,BLKSIZE=6144,DSORG=PO),
       //          SPACE=(TRK,(1,1,20))
       //SYSIN    DD  *
         PROC PDSCOPY OUTDD=OUT1   INDD=IN1 BLISIZE=6144;
         PROC PDSCOPY OUTDD=out2   INDD=IN2 BLKSIZE=6144;
         PROC PDSCOPY OUTDD=out3   INDD=IN3 BLKSIZE=6144;
       /*
