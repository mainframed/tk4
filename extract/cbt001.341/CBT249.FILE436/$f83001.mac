1
                   AOST FLASH # 83-001
+                  AOST FLASH # 83-001
0        Subject:  SHARE Mods Tape and Assembler H enhancements
0        Date:     10/14/83
0        From:     Lionel Dyck
                   D/205-630
                   Comnet 374-1125
0
0        ---------------------------------------------------------------
0        This is the first AOST flash.  It reflects changes and/or
         enhancements to the OS&T system.  These changes will be
         reflected in the next release of the OS&T Manual.
0        ---------------------------------------------------------------
0        The SHARE Mods tape has been received at WCC and has been
         loaded onto the MSS under the AOST.SHARE index.  All datasets
         have the dsname format AOST.SHARE.FILExxx.yyy where xxx is the
         file sequence number from the tape and yyy is dependent upon
         the datasets contents (ASM, TEXT, DATA, etc.).
0        The index to the tape is AOST.SHARE.FILE001.TEXT and will
         define the dataset suffix (yyy).
0        ---------------------------------------------------------------
0        Enhancement to the IBM Assembler H have been received from
         SLAC.  Attached is a copy of the documentation for this version
         known as SLAC 2.7.
0        Note that all the new 308x opcodes except MVCK, MVCP, MVCS are
         supported native.  These opcodes will assemble using the macros
         found in maclib.
0        This assembler may be found in AOST.LOAD and has the same names
         as the standard IBM Assembler H.  (i.e. IEV90)
0        ---------------------------------------------------------------
0        Please forward any comments, suggestions and/or additions for t
         OS & T manual, ISPF panels or libraries to me.
1
-
                                   1.  INTRODUCTION
+                                  1.  INTRODUCTION
0        The SLAC modifications to the  IBM Program Product H-Level Asse
         are of three kinds:
0        ø Changes that do not affect  the programming language,  but en
           the capabilities and usability of the Assembler;
0        ø Changes to the macro and conditional assembly language; and
0        ø Changes to the assembly ("open-code") language.
-
                             2.  CHANGES TO THE ASSEMBLER
+                            2.  CHANGES TO THE ASSEMBLER
-
         2.1   CHANGES TO PRINTED OUTPUT
+        2.1   CHANGES TO PRINTED OUTPUT
+              _______ __ _______ ______
0      |    ø The heading at the top of each page contains the identific
              "(SLAC V2.7)".
0           ø A  subset of  the  IEV9xx error  messages  that  appear in
              SYSPRINT data set now will also  appear in the SYSTERM dat
              (e.g., no core left, i/o error...).
0           ø The default number of lines in  SYSTERM for a no-error ass
              is now 2.  The "ASSEMBLER DONE" and the "NO STATEMENTS FLA
              are still printed, and the rest are suppressed.
0           ø The DECKID (the  name field from the first title  card)  i
              also printed in  SYSTERM.   This is helpful if you  have d
              batched assembly and are trying  to determine which assemb
              responsible for an error message.
0           ø MACRO/Copy Code Source Cross-Reference.   This is a list o
              SYSLIB data set names (in search  order),  and a listing o
              macros and copy code that were used from each.   The MACRO
              Code  Source  Cross-Reference  is  under  the  control  of
              [NO]MSRC parameter.   MSRC  (the default)  will allow  it
              produced.
0      |    ø DSECT  Cross-Reference.   Directly after  the  MACRO/Copy
       |      Source,   if NODXREF  is  not specified  (i.e.,   DXREF is
       |      default),  a listing of the DSECTs in the assembly is prod
       |      For each DSECT, its name, length (in bytes),  and the stat
       |      number where it is defined are given.
-
0                                     USER NOTE - 1
1
-
            ø At the  top of each  page,  the  current active USINGs  ar
              printed on up to two subtitle lines.   These USINGs are cu
              as of the end of assembly of  the last instruction on the
              page.  These lines are under the control of the [NO]UMAP p
              eter.  UMAP (the default) will cause the USINGs to be prin
0           ø The second  heading line  on each page  of the  actual ass
              listing (the  line with 'LOC  OBJECT ADDR1 ADDR2')   will
              with 'D-LOC' if IBMOUT is not in  effect and at the time o
              page eject the assembly was in a DSECT.
0           ø The IBM implementation  of SYSTERM has been  entirely repl
              The new SYSTERM, for errors in macro-generated code,  will
              print the macro call once.  After printing any individual
              call, it will only print the statement in error and its as
              ated error messages, rather than all the statements betwee
+                                              ___
              call to the error.   The format for  SYSTERM is now the sa
              that for SYSPRINT (i.e.,  it's not  all rearranged like th
              SYSTERM).
0      |    ø At the end of each assembly listing, the number of utility
       |      (SYSUT1) reads and writes are displayed,  along with the S
       |      SYSPRINT and SYSLIB counts which were displayed before.
-
         2.2   CHANGES TO ERROR MESSAGES AND SEVERITIES
+        2.2   CHANGES TO ERROR MESSAGES AND SEVERITIES
+              _______ __ _____ ________ ___ __________
0           ø A new error test and diagnostic message have been added:
0                IEV056 - USING RENDERED NULL BY A PRIOR ACTIVE USING
0             Given  the  rules  governing  base-displacement  resolutio
              implied addresses (choose the register giving the smallest
              placement,  and the highest-numbered such register),  this
              sage will be issued if it is  found that a prior active US
              range  overlaps and  supersedes that  of the  USING being
              cessed.  The severity level of this error is 4.
0           ø The  error  message "IEV044  -  SYMBOL  NOT DEFINED"  has
              extended so that  it now will tell you which  symbol is th
              to be undefined.
0           ø A misquoted operand  on a TITLE card  now will only earn
              level 4 error.
-
-
-
0                                     USER NOTE - 2
1
-
         2.3   CHANGES TO INPUT AND OUTPUT HANDLING
+        2.3   CHANGES TO INPUT AND OUTPUT HANDLING
+              _______ __ _____ ___ ______ ________
0           ø ASMH will now  accept WYLBUR pressed format  (with RECFM=U
              input for both SYSIN and SYSLIB.   The concatenations of S
              may be  either RECFM=FB or RECFM=U,   or a mixture of  the
              Another change to  SYSLIB processing is that the  data set
              the largest block  size need not be first in  the SYSLIB c
              tenation sequence.
0           ø An exit  is available just before  each line is  printed.
              exit routine name  is specified by 'PEXIT=XXXX'  in the in
              tion PARM string.   XXXX is the module name of the exit ro
              in the PDS  pointed to by the EXITLIB DD  statement.   The
              routine is called using standard  OS linkage conventions.
              parameter address list whose address is passed in R1 is:
0                        A(the line to be printed)
                         A(the SYSPRINT DCB)
                         A(OCTL values)
                         A(line type flag byte)
0           The first two are self-explanatory.   The OCTL values,  4 su
            sive halfwords,  will be described  below in the section "Ch
            to the Assembly  Language."  The line type flag is  a single
            whose bits are defined as:
0                  '80' - This line is part of the 3-line title
                          field at the top of each page.
                   '40' - This line is a machine instruction line.
                   '20' - This line is a DC/DS line.
                   '10' - This line is part of the symbol table
                          cross-reference.
                   '08' - This line is part of the post-assembly
                          messages.
                   '04' - This line is part of the pre-assembly
                   '02' - SYSPRINT DCB open exit entry (occurs just befo
                          the exit returns to finish the open).
                   '01' - This line is the first output line of
                          this assembly.
0             (Note:  For the  open-exit call,  only the DCB  address an
              flag  byte address  are defined;   any nonzero  return cod
              equivalent to 20.)
0             When the  exit routine returns  control to the  Assembler,
              must contain  a return  code.   If  an invalid  return cod
              returned, the exit will be turned off (i.e., never called
              for this assembly).  The valid return codes are:
0                     0 - print the line in the buffer
                      4 - don't print the line in the buffer
                      8 - print the line and return back to the
                          exit with an empty buffer
                     12 - don't print the line and return with
0                                     USER NOTE - 3
1
-
                          an empty buffer
                     16 - final return for this line
                     20 - kill the exit (i.e., don't call again
                          for this assembly)
0           ø The LRECL  of the SYSPRINT DCB  has been unhardwired  from
              This allows you  to specify any value greater than  or equ
              121.   (If the LRECL specified is less  than 121 it will b
              to 121.)   If you do specify a value larger than 121,  onl
              first 121 bytes of each print  buffer will be properly bla
              It's up to you to blank or clear anything beyond 121.
0           ø The DD name for the object deck  output data set for the L
              or Linkage Editor is now determined in  much the same way
              ASMG.  The ASMH default DD name, SYSGO, can be overridden
              alternate DD name list.  This name is searched for in the
              if it is found,  it will be used as the DD name.   If not,
              TIOT is searched for SYSGO or SYSLIN.   If either is there
              one found will be used.  If both are there, SYSGO will be
              If neither is there,  the DD name in the DCB will be left
              and processing  will continue as  in the original  ASMH.
              above does not apply to ASMH under CMS).
0           ø SYM cards are  now produced for equates whose  first opera
              relocatable and the LOCTR for that  operand is the current
              The format is the same as that generated by ASMF.
0           ø For any part  of ASMH's input that  is a WYLBUR edit  data
              one now  has a choice of  formats of the sequence  field.
              invocation  parameter  INTEGER,   the default,   will  yie
              sequence  field  of  8  decimal  digits  (Fortran  I8  for
              DECIMAL,  the other  choice,  will yield a sequence  field
              digits, a period, and 3 more digits (Fortran F8.3 format).
0             The input WYLBUR line number 234.567 will yield "00234567"
              INTEGER,  and  "234.567" with DECIMAL.   Note that an  inp
              "87654.321" with  the DECIMAL  option yields:   "7654.321"
              sequence field only has room for 8 characters).
0           ø The FOLD parameter causes ASMH to  treat all lower case ch
              ters as their upper case counterparts.  NOFOLD is the defa
-
-
-
-
-                                     USER NOTE - 4
1
-
         2.4   CHANGES TO PARAMETERS
+        2.4   CHANGES TO PARAMETERS
+              _______ __ __________
0           ø If you  specify the REL2  invocation parameter (a  new opt
              2-byte A-type relocatable constants are allowed,  as in AL
              Y-type constants must still have absolute operands; only A
              constants are affected by the REL2 parameter in this versi
              ASMH.
0           ø The  default for  the  RLD/NORLD  invocation parameter  is
              NORLD.
0           ø The SYSPRINT exit parameter PEXIT=XXXX  is described above
              the discussion of changes to input and output handling.
0           ø The Assembler can now run  entirely in memory,  without SY
              By specifying  NODISK,  the  Assembler will  ignore SYSUT1
              attempt to run entirely with  internal buffering of inform
              that normally would be spilled to disk.   If there isn't e
              memory for the assembly to be done this way,  it will be t
              nated with a level 20 return code and a message.
0             At the end  of each assembly,  the Assembler will  tell yo
              much memory was allocated to buffers  and what it determin
              would  need to  do the  assembly completely  in memory.
              information  is provided  even when  you are  not running
              NODISK (i.e., DISK).
0           ø Two  invocation parameters  have been  added  to control
              statements that appear within an assembly source.  PRINTGE
              specified, will nullify any PRINT NOGENs embedded within a
              gram source.  PRINTON does similarly, overriding PRINT OFF
0           ø The invocation parameter OPCNTS will cause the opcode tabl
              the opcode  usage counts  to be  displayed at  the end  of
              assembly.  The usage count displayed is the number of time
              opcode was searched for in the opcode table.
0             Within the  Assembler,  the  opcodes are hashed  onto a  s
              chains.   For the  OPCNTS display,  the beginning  of each
              chain is flagged by a "×".
0           ø The IBMOUT  parameter requires the Assembler's  SYSPRINT o
              to be similar to that of  the unmodified ASMH.   At the cu
              time,  IBMOUT really means NOUMAP,  NOMSRC and NODXREF.
              the future there are other options  that would change the
              ing format, IBMOUT will reset them also.
0           ø The parameters  INTEGER/DECIMAL and  FOLD/NOFOLD are  desc
              above,  in the  discussion of changes to input  and output
              dling.
0           ø The OLDTYPE invocation parameter is described below in the
              cussion of changes to the macro language.
-                                     USER NOTE - 5
1
-
                          3.  CHANGES TO THE MACRO LANGUAGE
+                         3.  CHANGES TO THE MACRO LANGUAGE
0      | ø Six new system variable symbols have been defined:
0           (1) &SYSSTYP  -  a  character variable  containing  the  loc
                counter type ('CSECT'  or 'DSECT')  at the  invocation o
                current macro.  (This definition is the same as in ASMG.
0           (2,3) &SYSJOB, &SYSSTEP - both are character variables.   Fo
                they return the job name and the rightmost non-blank ste
                in the TIOT.    For CMS,  they return 'NO JOB'  and 'NO
                respectively.
0           (4) &SYSNEST - an arithmetic type  variable that returns the
                rent macro  nesting level.   Level 0  is defined as  the
                code level.    (The use of  &SYSNEST makes  writing recu
                macros not only easier but much safer.  A recursive macr
                has a way of telling how "deep  in the weeds" it is,  an
                do something about it.)
0           (5) &SYSMDSN - a character variable giving the source of the
                rent macro.  The variable is 50 bytes long and is always
                ded with  blanks on the right.    The first 6 bytes  giv
                volume serial on which the macro was found, and the foll
                44 bytes are the data set name.   For CMS,  the DSN is o
                bytes long and is the file name.
0      |    (6) &SYSSTMT - an eight-byte character variable that contain
       |        statement number of the next statement to be generated.
+                                       ____
       |        variable is always eight characters and is padded on the
       |        with  zeros.   (The  significant digits  can  be obtaine
       |        assigning &SYSSTMT to an arithmetic-type variable.)
0        ø MACRO call statement  name fields need not contain  a valid A
           bler symbol.  If you desire to put a number, any string witho
           embedded blank,  or any quoted string in the name field,  no
           messages will be generated.
0        ø There are  2 valid operands on  the AREAD statement that  wer
           documented by IBM:  CLOCKB and CLOCKD.   They return the resu
           a TIME BIN and TIME DEC (in the OS sense) respectively.
0        ø The type attribute (T')  of a parenthesized expression like "
           is no longer 'N'.   It is set to 'U' like it should be.   The
           thing that has  type attribute 'N' is a  truly self-defining
           (Try  generating DC  H'10E(10)' from  within a  macro because
           Assembler "told" you that the T'  of "(10)" was 'N'.   (For a
           that may need the old definition,  there is the OLDTYPE invoc
           parameter.)
0        ø In LCLx/GBLx  statements,  the  "&" preceding  the variable
           being declared is no longer required.  The absence of the "&"
           cause a level 0 warning message to be generated.  This can be
           pressed by running ASMH with FLAG set to greater than 0.
0                                     USER NOTE - 6
1
-
0        ø The macro language has 2 new  opcodes:   ASPACE and AEJECT.
           provide services analogous  to SPACE and EJECT,  but  only fo
           listing of in-line macro source code.  ASPACE, unlike its ass
           time counterpart,   allows only an  unsigned decimal integer
           possible operand.  AEJECT, like EJECT, neither requires nor a
           an operand.
-
                         4.  CHANGES TO THE ASSEMBLY LANGUAGE
+                        4.  CHANGES TO THE ASSEMBLY LANGUAGE
0        ø The <NO>MSOURCE operand  may be specified on  the PRINT state
           If PRINT  NOMSOURCE and PRINT  GEN are  both in effect,   the
           (columns 1  - 71)  of each  macro-generated statement will  n
           printed.   If you write code rich in macro calls, it's nice t
           the addresses and  the generated code on the left  of the lis
           but the body  of each statement can be  fairly meaningless;
           you may not want it printed.
0        ø The underscore (_)  has been added  to the list of characters
           ASMH allows in symbols.  It is treated the same as a numeric
           as far as where it may and may not appear in symbols and in o
           tion codes and macro names.   The  common use is to separate
           in labels or identifiers (don't forget, ASMH allows identifie
           up to 63 characters).
0        ø A new  machine instruction  operation code has  been added  f
           users - DIAG  (DIAGNOSE).  DIAG is treated as  an RS-type ins
           tion:
0                    DIAG   r1,r3,d2(b2)
0        ø The Assembler instruction statement opcode  OCTL provides a w
           passing  parameters to  the  print exit.    There  are 4  ope
           allowed on  an OCTL statement,  each  of which must evaluate
           16-bit absolute expression.   These are evaluated and put int
+                 ________
           corresponding halfwords of the OCTL values passed to the exit
           tine designated by  the PEXIT parameter.   Each operand  may
           three forms:   an absolute expression;   an expression of the
           *N (where * is taken to be  the current value for that OCTL
           tion to which  N is either added or subtracted);   or null,
           means leave the current value as is.   Note:  The Assembler p
           no meaning  on the operand values;   it simply evaluates  the
           passes them to the print exit.   For a missing (null) operand
           value that was there before is left untouched.
0        ø A new operand, NOPRINT, has been added to the PUSH, POP, and
           pseudo instructions.   If you specify 'NOPRINT' the statement
           not be printed, as you would expect.
0        ø Qualified USINGs (or, more properly,  Labeled USINGs and Qual
           Symbols),   are a  major new  capability of  ASMH,  allowing
-                                     USER NOTE - 7
1
-
           greater control over  the resolution of symbolic  expressions
           base-displacement form with specific base registers.
0          The mechanics of this facility are  rather simple.   First,
           label on  a USING  statement.   Then,  to  force the  Assembl
           resolve a symbol  into base-displacement form through  that U
           qualify the  symbol by preceding it  with the label on  the U
           followed by a period.   An example of Labeled USINGs and Qual
           Symbols would be:
0          PRIOR   USING   IHADCB,R10
           NEXT    USING   IHADCB,R2
                   MVC     PRIOR.DCBLRECL,NEXT.DCBLRECL
0          Without labeled USINGs,  this would have to be written in the
           ward and inelegant form:
0                  USING   IHADCB,R10
                   MVC     DCBLRECL,DCBLRECL-IHADCB(R2)
                    or
                   MVC     DCBLRECL-IHADCB(,R10),DCBLRECL-IHADCB(R2)
0          Another example of the use of labeled USINGs is:
0          X       CSECT
                   USING   X,R10,R11
                   .
                   .
           SYSUT2  USING   IHADCB-(DCBUT2-X),R10,R11
                   LH      R0,SYSUT2.DCBBLKSI
                   .
                   .
           DCBUT2  DCB     DDNAME=SYSUT2,...
0          The usual  way of symbolically  referencing parts  of a DCB
           load the address of the DCB into Rn followed by "USING IHADCB
           Such a  technique requires  you to allocate  an extra  regist
           hold the address of the DCB.  With labeled USINGs, you are ab
           utilize already allocated registers (in  this case,  the prog
           base registers).   This technique works  because the two USIN
           not interfere with each other,  even  though they specify the
           registers; see below for details.
0          The label on a USING may not appear in the name field of any
           statements except that of other USINGs.    If a label appears
           USING, any other USING with the same label is nullified.
0          As is the case with non-labeled USING statements, a symbol (i
           first operand)  or  a register (in any of  the remaining oper
           may appear in any number of USINGs.  However, in the case of
           ified USINGs,  as long as all  the USINGs have unique labels,
           are considered active and are eligible to be used as qualifie
-
                                      USER NOTE - 8
1
-
           There is a very basic concept about Labeled and non-Labeled U
           that needs to be understood.    In non-Labeled USINGs,  a reg
           implies data,   in the sense  that a  register may imply  onl
           piece of data at a time (i.e.,  when a register that appeared
           USING appears in another USING, the prior USING is nullified)
           Labeled USINGs the reverse is true:   the data implies a regi
           That is,   a single register may  appear in multiple  USINGs,
+
           being active, so long as all the USINGs have unique labels.
           lification of  Labeled USINGs  occurs only  when a  repeated
           appears, not when a repeated register appears.)
0          Labeled USINGs do not interfere with non-labeled USINGs.  Whe
           Assembler resolves an implied address into base-displacement
           either the expression to be resolved was qualified or not.
           was, the specified labeled USING will be used.  If not, the a
           non-labeled USINGs will be scanned in the standard manner, lo
           for a resolution.
0          A label on a USING defines an environment.  As such, when you
           to nullify (delete)  that environment,  you must DROP the env
           ment's name,  the USING's label.   An attempt to nullify a la
           USING by  dropping its  registers will  result in  those regi
           being dropped instead from the non-labeled USING pool.   You
           nullify the Labeled USINGs from the example above by writing:
0                 DROP   PRIOR,NEXT
0        ø Ten new extended branch mnemonics have  been added to the exi
           set.   The new mnemonics are BGT, BGE, BEQ,  BLE,  BLT,  and
           RR-type BCR counterparts BGTR, BGER, BEQR,  BLER,  and BLTR.
           corresponding branch mask digits are 2, 10, 8,  12,  and 4 re
           tively.
0        ø Literals and  where they  may appear has  been made  slightly
           restrictive.   For machine instructions (and only machine ins
           tions)   a literal  may appear  anywhere a  relocatable symbo
           valid.   The exception  to this is that the length  attribute
           literal is still undefined.  An example of this might be:
0                    LA   R1,=C'??'-24           get parm for ADT lookup
0        ø AOPTION  - a  new opcode.   Given that  the invocation  param
           really only define  a default assembly environment,   AOPTION
           vides a means to specify  a specific statement-by-statement a
           bly environment.    AOPTION may be used  as many times  as de
           during an assembly whether batched or  not.   (TEST and NOTES
           currently the only valid operands.)
0          Now,  at the end of each assembly,  all the ASMH options are
           to their invocation values.  This  means that an environment
           fied through AOPTION will not affect the next assembly in a b
-
0                                     USER NOTE - 9
1
-
         ø The length attribute (L')  used on  a machine instruction wit
           macro definition now behaves the same as that of ASM-F.  (A s
           ment such as:
0                  TM    &X,L'&X
0          used to cause  the  Assembler to think that it had  the lette
           followed by an improperly quoted string.)
0        ø Both the scale attribute (S') and the integer attributes (I')
           may also be used in open code.  Both their definitions are id
           cal to those for use within macro definitions.
0        ø Errors in the invocation parameters are diagnosed better.  In
           of getting a "There is an error  in the parm list" message (a
           end of the assembly), the actual parms in error will be displ
           In an OS environment,  this display  will be sent both to SYS
           and to SYSTERM.   (Note: In CMS, SYSTERM is assigned to the t
           nal.)
0          More important, as soon as the assembler recognizes that it h
           erroneous parm,  a warning message and  the erroneous parm wi
           sent to the terminal.   (This way,   if the parm is critical,
           assembly can be aborted before wasting a lot of time.)
0        ø Associated  USING  statements  provide   additional  control
           address expression resolution.  The format  of an Associated
           is:
0          <label>   USING    S1,S2
0          <label> if present, makes this a labeled Associated USING (se
           discussion of  labeled USINGs above).  S1  is an expression
           interpreted in the same way as in any other USING.  S2 is a s
           address expression specifying where S1 is to be based.
0          An example of the use of an Associated USING might be:
0          X       CSECT
                   USING   X,R10,R11  NORMAL USING
                   .
                   .
                   USING   IHADCB,DCBUT2        ASSOCIATED USING
                   LH      R0,DCBBLKSI          USES R10 OR R11 FOR BASE
                   .
                   .
           DCBUT2  DCB     DDNAME=SYSUT2,...
0          Note that this is another (simpler) solution to the problem s
           in the second example in the description of Labeled USINGs.
0          The difference between ordinary USINGs, Labeled USINGs,  and
           ciated USINGs is the following.    In ordinary situations,  a
-                                     USER NOTE - 10
1
-
           grammer must assign several registers for addressing purposes
           provide USING  statements to allow  the Assembler to  make ad
           resolution decisions.   Labeled and Associated USINGs allow y
           restrict the  Assembler's decisions  and to  reduce the  numb
           registers needed for addressing.
0          With ordinary USINGs,  a given  expression may be addressable
           several registers;  Labeled USINGs provide qualifiers that le
           specify exactly which USING is to  be used to resolve that ex
           sion.   Thus,  Labeled USINGs can be viewed as a way to reduc
           freedom with  which the  Assembler chooses  among the  "avail
           registers.
0          Conversely,  Associated USINGs  allow you to reduce  the numb
           registers that  must be  assigned to  addressing,  but  allow
           Assembler freedom to  choose the register.   If an  area of m
           customarily mapped by one register  is addressed by another,
           the second  need be used for  address resolution;  the  mappi
           specified in an Associated USING, as in the above example.
0        ø Qualifiers (from labeled USINGs) are now cross referenced.
0      | ø All the mnemonics  listed in GA22-7000-7 (the edition  of the
+
       |   tem/370 Principles  of Operation  relevant to  the 3081)   ar
+          _______ __________  __ _________
       |   defined in  the opcode table.    The added opcodes  include:
       |   BASR, CLRCH, CONCS, DISCS, EPAR,  ESAR,  IAC,  IPTE,  IVSK,
       |   MVCIN, MVCK, MVCP, MVCS, PC, PI, SAC, SSAR, TB and TPROT.
-
-
-
-
-
-
-
-
-
0                                     USER NOTE - 11
1
-
-
-                                     Appendix A
+                                     Appendix A
0                      THE CMS/ASMH INTERFACE AND ITS BEHAVIOR
+                      THE CMS/ASMH INTERFACE AND ITS BEHAVIOR
-      | For the IBM  H-Level Assembler to run  under CMS,  there must
       | interface module  to establish  the environment  that the  Asse
       | expects: IBM OS/360 MVT.  This appendix describes such a module
-
         A.1   THE INTERFACE FUNCTION
+        A.1   THE INTERFACE FUNCTION
+              ___ _________ ________
0      | The interface has  two functions:  to convert the CMS  token li
       | ASMH parameters into an OS-format parameter list, and to provid
       | FILEDEFs required for the Assembler to operate.
0      | In providing  the Assembler's required  FILEDEFs,  if  the inte
       | finds that  a FILEDEF  already exists  for a  particular file,
       | existing one will be used.
0      | At the end of the assembly the  interface will issue a FILEDEF
       | for each file the Assembler used.
0      | Just after establishing the FILEDEF  environment and before act
       | calling the Assembler,   the interface will display  the assign
       | for the Assembler input and output  sources and sinks.   The di
       | is  by DDname  and shows  the assigned  file-id or  device type
       | whether the FILEDEF is user-supplied for each source or sink.
-
         A.2   ASMH COMMAND FORMAT
+        A.2   ASMH COMMAND FORMAT
+              ____ _______ ______
0      |         ASMH <src_fn> [(options[)[<maclib_fns>×=<mac_ctl>]]]
-
         A.2.1   ASMH Parameters Actually Understood by the Interface
+        A.2.1   ASMH Parameters Actually Understood by the Interface
+                ____ __________ ________ __________ __ ___ _________
0      | The interface  understands two flavors  of parameters:    those
       | cause the interface to do something, which also get passed on t
       | Assembler;  and those the  interface understands exclusively,
       | are not passed on to the Assembler.
0      | There are  three parameters understood  by the interface  and p
       | on:
-
                                      USER NOTE - 12
1
-
       | NODISK   if specified,  the  interface will not issue  a FILEDE
       |          the utility file, SYSUT1.
0      | NOLIST   if specified,  the  interface will not issue  a FILEDE
       |          the listing file, SYSPRINT.
0      | NOOBJECT if specified,  the  interface will not issue  a FILEDE
       |          the text deck output file, SYSLIN.
0      | There are four parameters understood exclusively by the interfa
0      | FRW      the "default" disk (described below) is set to the fil
       |          of the first R/W disk in the search sequence.
0      | LRW      the "default" disk  is set to the filemode of  the R/W
       |          with the greatest amount of free space,  where "free s
       |          means the number of free disk blocks times the size of
       |          block.  (LRW is the default.)
0      | NOTELL   if specified,  the mapping of sources and sinks is not
       |          duced.
0      | PRINT    if specified, the Assembler listing output (if produce
       |          directed to the user's virtual printer.
0      | The "default disk" is used for the  utility file and for the te
       | listing file if the SYSIN input file is on a read-only disk.
-
         A.2.2   Alternate MACLIB Specification
+        A.2.2   Alternate MACLIB Specification
+                _________ ______ _____________
0      | Normally,  ASMH uses the up to eight MACLIBs specified by the G
       | MACLIB.   Up  to 64  MACLIBS can  be used  by specifying  eithe
       | <maclib_fns> or <mac_ctl> command format.
0      | <maclib_fns>      a list of MACLIB file names, separated by a b
       |                   to be used as the MACLIBs for the assembly.
0      | = <mac_ctl>       the name  of a card-image  file that  contain
       |                   names of the MACLIBs to  be used for the asse
       |                   The form of <mac_ctl> is:
0      |                                     <fn> <ft> <fm>
0      |                   where <ft>  and <fm>  are defaulted  to "MACL
       |                   and "*", respectively.   Single or multiple M
       |                   names may  be specified on  a given record  o
       |                   file,  and  there may be  multiple records  t
       |                   file,  although a  given MACLIB name may  not
       |                   records.
-
0                                     USER NOTE - 13
1
-
-
-                                       INDEX
+                                       INDEX
-        &SYSJOB ... 6                       internal buffering ... 5
         &SYSMDSN ... 6                      invocation parameters ... 1
         &SYSNEST ... 6
         &SYSSTEP ... 6                      Labeled USING ... 7, 10
         &SYSSTMT ... 6                      LCLx/GBLx ... 6
         &SYSSTYP ... 6                      length attribute (L') ... 9
                                             literals ... 9
         "&" ... 6
                                             MACRO/Copy code source cros
         AEJECT ... 7                           reference ... 1
         AOPTION ... 9                       MSOURCE ... 7
         AREAD ... 6
         ASMG ... 6                          name field ... 6
         ASMH ... 7                          nesting ... 6
         ASPACE ... 7                        NODISK ... 5
         Associated USING ... 10             NOMSOURCE ... 7
                                             NOPRINT ... 7
         branch mnemonics ... 9              NOTEST ... 9

         CLOCKB ... 6                        OCTL ... 3, 7
         CLOCKD ... 6                        OLDTYPE ... 5-6
         CMS ... 6, 10                       OPCNTS ... 5
                                             opcode ... 5
         D-LOC ... 2
         DECIMAL ... 4                       PEXIT ... 3, 5, 7
         DECKID ... 1                        POP ... 7
         DIAG (DIAGNOSE) ... 7               PRINT ... 5, 7
         DROP ... 9                          PRINT NOGEN ... 5
         DSECT cross-reference ... 1         PRINT OFF ... 5
         DXREF ... 1                         PRINTGEN ... 5
                                             PRINTON ... 5
         equates ... 4                       PUSH ... 7
         EXITLIB ... 3
                                             Qualified Symbols ... 7
         FOLD ... 4                          qualifiers ... 8

         GA22-7000-7 ... 11                  RECFM=U ... 3
                                             relocatable constants ... 5
         IBMOUT ... 5                        REL2 ... 5
         IEV044 - SYMBOL NOT
            DEFINED ... 2                    scale attribute (S') ... 10
         IEV056 - USING RENDERED             sequence field ... 4
            NULL ... 2                       SLAC V2.7 ... 1
         IEV9xx ... 1                        SYSGO ... 4
         INTEGER ... 4                       SYSLIB ... 3
         integer attribute (I') ... 10       SYSLIN ... 4
0                                     USER NOTE - 14
1
-
         SYSPRINT ... 4-5                    underscore (_) ... 7
         SYSPRINT exit ... 5                 USING ... 7, 10
         SYSTERM ... 2                       utility file ... 2
         SYSUT1 ... 2, 5
                                             VM/SP ... 1
         TEST ... 9
         TITLE card ... 2                    WYLBUR ... 3
         type attribute (T') ... 6
                                             3081 ... 11
         UMAP ... 2
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
                                      USER NOTE - 15
