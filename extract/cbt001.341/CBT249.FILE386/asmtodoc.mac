1
-
                                     ASMTOZAP
-             ASMTOZAP IS A UTILITY WHICH READS AN ASSEMBLER LISTING
           AND PRODUCES AMASPZAP CONTROL CARDS.
-             THERE ARE FOUR CONTROL CARDS WHICH ARE INCLUDED IN THE
           ASSEMBLER SOURCE AS COMMENTS WITH '*ZAP' IN COLUMNS 1-4.
-
0
              *ZAP CARD  . . .


0             EVERYTHING AFTER THE WORD 'CARD' IS REPRODUCED IN THE
           OUTPUT DATASET.
-
0
              *ZAP START
              *ZAP START VER
              *ZAP START REP
                                                                      ×

0          THIS MARKS THE BEGINNING OF A SECTION OF ASSEMBLER LANGUAGE
           WHICH IS TO BE PROCESSED BY ASMTOZAP.  ASSEMBLER COMMENT
           CARDS, ASSEMBLER CONTROL CARDS (PRINT, ORG, ETC.), MACRO
           REFERENCES, AND OTHER LINES WHICH DO NOT GENERATE DATA WILL
           GENERATE ZAP COMMENT CARDS. *ZAP START VER OR REP MUST BE
           SPECIFIED BEFORE THE FIRST DATA GENERATING LINE IS
           ENCOUNTERED. MACHINE INSTRUCTIONS OR DC INSTRUCTIONS IN
           MAINLINE CODE OR IN MACRO EXPANSIONS ARE DATA GENERATING.
-
                                      - 1 -
1
-

              *ZAP PAUSE

0             THE *ZAP PAUSE STATEMENT INHIBITS PROCESSING OF
           SUBSEQUENT ASSMBLER STATEMENTS EXCEPT FOR *ZAP CONTROL
           CARDS.  ASSEMBLER COMMENTS, INSTRUCTIONS, ORG OR EQU
           STATEMENTS, MAPPING MACROS, DEBUGGING CODE, AND SIMILAR
           ASSEMBLER HOUSEKEEPING CAN BE PUT INTO THE ASSEMBLER INPUT
           BUT SURPRESSED FROM THE GENERATED AMASPZAP OUTPUT BY
           PRECEEDING THESE BLOCKS OF CODE WITH A *ZAP PAUSE. THE NEXT
           *ZAP START WILL RESUME NORMAL ASMTOZAP PROCESSING.
-
0
              *ZAP STOP

0             THIS TERMINATES ASMTOZAP PROCESSING.  THIS CARD IS
           NECESSARY.
0             THE FOLLOWING HELPFUL HINTS ARE PROVIDED FOR POTENTIAL
           USERS:
0             1.  SPECIFY 'PRINT DATA'.  ANY OTHER SETTING OF PRINT
                  IS PROBABLY WRONG.
0             2.  WHEN POSSIBLE, WRITE THE ASSEMBLER CODE AS A REAL
                  PROGRAM WHICH CAN ACTUALLY RUN.  THIS HELPS YOU TO
                  DEBUG THE ZAP BEFORE IT IS APPLIED.
0             3.  PUT ALL THE VER SECTIONS FIRST - NOTE THAT THE
                  ASSEMBLER WILL OVERWRITE CODE IF ORG SETS THE
                  LOCATION COUNTER BACK, SO THIS SCHEME FOR VER AND
                  THEN REP CODE WILL LEAVE THE NEW INSTRUCTIONS
                  WHERE THEY ARE SUPPOSED TO BE DURING ASSEMBLER
                  DEBUGGING.
0             4.  GATHER ALL SENSITIVE MODULE OFFSETS TOGETHER AS A
                  SEQUENCE OF EQU STATEMENTS AT THE BEGINNING OF THE
                  ASSEMBLER SOURCE.  THESE OFFSETS ARE THE MOST
                  LIKELY TARGET OF SUBSEQUENT MAINTENANCE, AND
                  PUTTING THEM ALL TOGETHER MAKES IT VERY EASY TO
                  RECOVER FROM SUBSEQUENT IBM PTF'S.
0                                     - 2 -
1
-
           FOR EXAMPLE, CONSIDER THE FOLLOWING ASMTOZAP INPUT:
-
 SUPERZAP CSECT
          TITLE 'CREATE SUPER ZAP CODE TO MODIFY MODULE - AMASPZAP'
 *
 SUPERZAP CSECT
 BRANCH   EQU   SUPERZAP+X'16'          BRANCH MODIFICATION
 PATCH    EQU   SUPERZAP+X'BE6'         POINTER TO PATCH AREA
 *                                      LESS BASE DIFFERENCE OF 6 BYTES
 LNKRG1   EQU   8                       LINK BACK REGISTER
          EJECT
 ********
 ********                BEGINNING OF SMP CONTROL CARDS
 ********
 *ZAP CARD //SYSIN    DD  *
 *ZAP CARD  RECEIVE S(SS80009) .
 *ZAP CARD  APPLY   S(SS80009) RC(RECEIVE=0) .
 *ZAP CARD //SMPPTFIN DD DATA,DLM=ZX
 *ZAP CARD ++USERMOD(SS80009)
 *ZAP CARD   /*
 *ZAP CARD
 *ZAP CARD                 ****   DSDSPZAP   ****
 *ZAP CARD
 *ZAP CARD         THIS USER MODIFICATION IS TO MODIFY "AMASPZAP"
 *ZAP CARD    MODULE TO CALL MODULE "DSDSPZAP" WHICH WRITES AN
 *ZAP CARD    SMF RECORD FOR ALL CONTROL CARDS USED BY MODULE
 *ZAP CARD    "AMASPZAP". THIS MODIFICATION WILL ALLOW FOR A
 *ZAP CARD    HISTORICAL AUDIT TRAIL OF THE USE OF ZAP, AND ALSO
 *ZAP CARD    THE DAILY CHECKING OF THE USE OF ZAP.
 *ZAP CARD
 *ZAP CARD    THIS MODIFICATION IS FOR MVS 3.8 AMASPZAP,
 *ZAP CARD    FMID - EBB1102, PTF LEVEL - UZ30163.
 *ZAP CARD
 *ZAP CARD    FOR AMASPZAP TO BE RUN UNDER TSO A MODIFICATION
 *ZAP CARD    MUST BE MADE TO THE AUTHORIZATION TABLE IN
 *ZAP CARD    MODULE - IKJEFT02 - CSECT - IKJEFTE8. ENTRIES
 *ZAP CARD    FOR 'AMASPZAP', 'IMASPZAP' AND ANY OTHER ALIAS
 *ZAP CARD    ASSIGNED TO SUPERZAP MUST BE PLACED IN THE TABLE.
 *ZAP CARD
 *ZAP CARD                 ****   DSDZAPRP   ****
 *ZAP CARD
 *ZAP CARD         MODULE -DSDZAPRP - IS A REPORT WRITER WHICH
 *ZAP CARD    READS SMF RECORDS AND SELECTS THE RECORD TYPE
 *ZAP CARD    DESCRIBED IN MACRO - SMFZPD -. THE RECORDS ARE THEN
 *ZAP CARD    SORTED AND A REPORT IS PRODUCED IN DATASET NAME
 *ZAP CARD    SEQUENCE.
 *ZAP CARD
 *ZAP CARD                 ****   SMFZPD   ****
 *ZAP CARD
 *ZAP CARD         MACRO - SMFZPD - IS A DSECT FOR THE SMF
 *ZAP CARD    RECORD PRODUCED BY MODULE - AMASPZAP -. THE
 *ZAP CARD    SYMBOLIC - TYPE - DEFAULTS TO RECORD TYPE "255"
 *ZAP CARD    BUT MAY BE CHANGED TO ANY NUMBER FROM 128 TO 255.
 *ZAP CARD
 *ZAP CARD    */ .
-
                                       - 3 -
1
 *ZAP CARD ++VER(Z038) FMID(EBB1102)
 *ZAP CARD             PRE(UZ30163) .
 *ZAP CARD ++JCLIN .
 *ZAP CARD //ZAPMOD   JOB 1,'CURTISS STANLEY',MSGLEVEL=1,CLASS=A
 *ZAP CARD //STEP1    EXEC PGM=ASMBLR
 *ZAP CARD //SYSPUNCH DSN=TS.USEROBJ(DSDZAPRP),DISP=SHR
 *ZAP CARD //SYSIN    DD  *
 *ZAP CARD          COPY DSDZAPRP
 *ZAP CARD /*
 *ZAP CARD //STEP2    EXEC PGM=IEWL,PARM='XREF,LIST'
 *ZAP CARD //SYSLMOD  DD  DSN=SYS1.USERLIB,DISP=SHR
 *ZAP CARD //SYSPUNCH DD  DSN=TS.USEROBJ,DISP=SHR
 *ZAP CARD //SYSIN    DD  *
 *ZAP CARD  INCLUDE SYSPUNCH(DSDZAPRP)
 *ZAP CARD  NAME DSDZAPRP(R)
 *ZAP CARD //STEP3    EXEC PGM=ASMBLR
 *ZAP CARD //SYSPUNCH DSN=TS.USEROBJ(DSDSPZAP),DISP=SHR
 *ZAP CARD //SYSIN    DD  *
 *ZAP CARD          COPY DSDSPZAP
 *ZAP CARD /*
 *ZAP CARD //STEP4    EXEC PGM=IEWL,PARM='XREF,LIST,AC=1'
 *ZAP CARD //SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR
 *ZAP CARD //AOS12    DD  DSN=SYS1.AOS12,DISP=SHR
 *ZAP CARD //SYSPUNCH DD  DSN=TS.USEROBJ,DISP=SHR
 *ZAP CARD //SYSIN    DD  *
 *ZAP CARD  INCLUDE SYSLMOD(AMASPZAP)
 *ZAP CARD  INCLUDE AOS12(AMASPZAP)
 *ZAP CARD  INCLUDE SYSPUNCH(DSDSPZAP)
 *ZAP CARD  ALIAS IMASPZAP
 *ZAP CARD  ORDER AMASPZAP,AMASZDMP,AMASZCON,AMASZIOR,DSDSPZAP
 *ZAP CARD  ENTRY AMASPZAP
 *ZAP CARD  NAME AMASPZAP(R)
 *ZAP CARD ++ZAP(AMASPZAP) .
 *ZAP CARD  EXPAND AMASZIOR(106)
 *ZAP CARD  NAME AMASPZAP AMASZIOR
          PRINT DATA
          USING SUPERD,11            BASE FOR CDBUF, JFCB AND THE DCB
          USING SUPERZAP+6,12        BASE FOR CODE IN CSECT AMASZIOR
 *                                   THE +6 ON THE MODULE IS TO ALLOW
 *                                   FOR THE BASE DIFFERENCE CAUSE BY
 *                                   BASE INITIALIZATION IN THE
 *                                   AMASZIOR MODULE
          ORG   BRANCH                  POINT FOR ++VER STATEMENTS
 *ZAP START VER
          B     X'64'(,12)    AT X'297E'
          ORG   PATCH
          DC    20X'00'   EXPAND AT X'BE6'
 *ZAP START REP
          ORG   BRANCH                  POINT FOR ++REP STATEMENTS
          B     PATCH                   GO TO PATCH AREA
          ORG   PATCH                   POINT TO PATCH AREA
          GET   INPUT,CDBUF        GET AN INPUT CARD (REPLACED CODE)
-
                                      - 4 -
1
 MVCNOP   NOP   BYPASS
          MVI   MVCNOP+1,X'F0'
          CLI   JFCB,X'04'
          BNE   DSNZAP
          MVC   VOLSER,VTOCVOL
          B     *+10
 DSNZAP   MVC   VOLSER,ZAPVOL
          LA    1,VOLSER
          ST    1,VOLPASS
          LA    14,JFCB    AT X'1A2C'
          LA    15,CDBUF   AT X'1CAD'
          STM   14,15,PASSLIST    SAVE FIELD POINTERS
 BYPASS   LA    1,PASSLIST              SET LIST ADDRESS IN REG 1
 *        CALL  DSDSPZAP          CALL SMF MODULE
 *
 *  NOTE --- SINCE THERE IS NO EXTRN FOR DSDSPZAP THE ADDRESS
 *           IS LOADED VIA A "LA" INSTRUCTION. IF THE CSECT DSDSPZAP
 *           CHANGES FROM ORIGIN "3550" THIS MUST BE REFITTED.
 *
          LA    15,X'C4A'(12)     LOAD DSDSPZAP ADDRESS
          BALR  14,15             GO TO DSDSPZAP MODULE
          BCR   15,LNKRG1               GO TO WHERE RDCARD2 WOULD HAVE
 PASSLIST DS    0F
 JFCBPASS DC    F'0'
 CARDPASS DC    F'0'
 VOLPASS  DC    F'0'
 VOLSER   DC    CL6' '
          LTORG
 SUPERD   DSECT
          ORG   SUPERD+X'1FC'           POINT TO JFCB AREA
 JFCB     EQU   *
          ORG   SUPERD+X'228'           POINT TO DSN ZAP VOLSER
 ZAPVOL   EQU   *
          ORG   SUPERD+X'272'
 VTOCVOL  EQU   *
          ORG   SUPERD+X'47D'           POINT TO CARD AREA
 CDBUF    EQU   *
          ORG   SUPERD+X'D08'           POINT TO INPUT DCB
 INPUT    EQU   *
 *ZAP CARD  IDRDATA SS80009
 *ZAP CARD ++MAC(SMFZPD) DISTLIB(SRC) DISTSRC(SRC)
 *ZAP CARD   SYSLIB(MACLIB) TXLIB(TEMPLIB) .
 *ZAP CARD ++SRC(DSDSPZAP) DISTLIB(SRC)
 *ZAP CARD   TXLIB(TEMPLIB) .
 *ZAP CARD ++SRC(DSDZAPRP) DISTLIB(SRC)
 *ZAP CARD   TXLIB(TEMPLIB) .
 *ZAP CARD ZX
 *ZAP STOP
          END
-
-
0
                                      - 5 -
1
               WHICH PRODUCES AS OUTPUT:
-
 //SYSIN    DD  *
  RECEIVE S(SS80009).
  APPLY   S(SS80009) RC(RECEIVE=0) .
 //SMPPTFIN DD DATA,DLM=ZX
 ++USERMOD(SS80009)
   /*

                 ****   DSDSPZAP   ****

         THIS USER MODIFICATION IS TO MODIFY "AMASPZAP"
    MODULE TO CALL MODULE "DSDSPZAP" WHICH WRITES AN
    SMF RECORD FOR ALL CONTROL CARDS USED BY MODULE
    "AMASPZAP". THIS MODIFICATION WILL ALLOW FOR A
    HISTORICAL AUDIT TRAIL OF THE USE OF ZAP, AND ALSO
    THE DAILY CHECKING OF THE USE OF ZAP.

    THIS MODIFICATION IS FOR MVS 3.8 AMASPZAP,
    FMID - EBB1102, PTF LEVEL - UZ30163.

    FOR AMASPZAP TO BE RUN UNDER TSO A MODIFICATION
    MUST BE MADE TO THE AUTHORIZATION TABLE IN
    MODULE - IKJEFT02 - CSECT - IKJEFTE8. ENTRIES
    FOR 'AMASPZAP', 'IMASPZAP' AND ANY OTHER ALIAS
    ASSIGNED TO SUPERZAP MUST BE PLACED IN THE TABLE.

                 ****   DSDZAPRP   ****

         MODULE -DSDZAPRP - IS A REPORT WRITER WHICH
    READS SMF RECORDS AND SELECTS THE RECORD TYPE
    DESCRIBED IN MACRO - SMFZPD -. THE RECORDS ARE THEN
    SORTED AND A REPORT IS PRODUCED IN DATASET NAME
    SEQUENCE.

                 ****   SMFZPD   ****

         MACRO - SMFZPD - IS A DSECT FOR THE SMF
    RECORD PRODUCED BY MODULE - AMASPZAP -. THE
    SYMBOLIC - TYPE - DEFAULTS TO RECORD TYPE "255"
    BUT MAY BE CHANGED TO ANY NUMBER FROM 128 TO 255.

    */ .
 ++VER(Z038) FMID(EBB1102)
             PRE(UZ30163) .
 ++JCLIN .
 //ZAPMOD   JOB 1,'CURTISS STANLEY',MSGLEVEL=1,CLASS=A
 //STEP1    EXEC PGM=ASMBLR
 //SYSPUNCH DSN=TS.USEROBJ(DSDZAPRP),DISP=SHR
 //SYSIN    DD  *
          COPY DSDZAPRP
 /*
 //STEP2    EXEC PGM=IEWL,PARM='XREF,LIST'
 //SYSLMOD  DD  DSN=SYS1.USERLIB,DISP=SHR
 //SYSPUNCH DD  DSN=TS.USEROBJ,DISP=SHR
 //SYSIN    DD  *
  INCLUDE SYSPUNCH(DSDZAPRP)
  NAME DSDZAPRP(R)

                                      - 6 -
1
 //STEP3    EXEC PGM=ASMBLR
 //SYSPUNCH DSN=TS.USEROBJ(DSDSPZAP),DISP=SHR
 //SYSIN    DD  *
          COPY DSDSPZAP
 /*
 //STEP4    EXEC PGM=IEWL,PARM='XREF,LIST,AC=1'
 //SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR
 //AOS12    DD  DSN=SYS1.AOS12,DISP=SHR
 //SYSPUNCH DD  DSN=TS.USEROBJ,DISP=SHR
 //SYSIN    DD  *
  INCLUDE SYSLMOD(AMASPZAP)
  INCLUDE AOS12(AMASPZAP)
  INCLUDE SYSPUNCH(DSDSPZAP)
  ALIAS IMASPZAP
  ORDER AMASPZAP,AMASZDMP,AMASZCON,AMASZIOR,DSDSPZAP
  ENTRY AMASPZAP
  NAME AMASPZAP(R)
 ++ZAP(AMASPZAP) .
  EXPAND AMASZIOR(106)
  NAME AMASPZAP AMASZIOR
  VER 0016 47F0,C064                    B     X'64'(,12)    AT X'297E'
  VER 0BE6 0000000000000000             DC    20X'00'   EXPAND AT X'BE6'
  VER 0BEE 0000000000000000
  VER 0BF6 00000000
  REP 0016 47F0,CBE0                    B     PATCH                   GO
  REP 0BE6 4110,BD08                    LA    1,INPUT
  REP 0BEA 4100,B47D                    LA    0,CDBUF
  REP 0BEE 58F0,1030                    L     15,48(0,1)               L
  REP 0BF2 05EF                         BALR  14,15                    L
  REP 0BF4 4700,CC22           MVCNOP   NOP   BYPASS
  REP 0BF8 92F0,CBEF                    MVI   MVCNOP+1,X'F0'
  REP 0BFC 9504,B1FC                    CLI   JFCB,X'04'
  REP 0C00 4770,CC08                    BNE   DSNZAP
  REP 0C04 D205,CC3A,B272               MVC   VOLSER,VTOCVOL
  REP 0C0A 47F0,CC0E                    B     *+10
  REP 0C0E D205,CC3A,B228      DSNZAP   MVC   VOLSER,ZAPVOL
  REP 0C14 4110,CC3A                    LA    1,VOLSER
  REP 0C18 5010,CC36                    ST    1,VOLPASS
  REP 0C1C 41E0,B1FC                    LA    14,JFCB    AT X'1A2C'
  REP 0C20 41F0,B47D                    LA    15,CDBUF   AT X'1CAD'
  REP 0C24 90EF,CC2E                    STM   14,15,PASSLIST    SAVE FIE
  REP 0C28 4110,CC2E           BYPASS   LA    1,PASSLIST              SE
  REP 0C2C 41FC,0C4A                    LA    15,X'C4A'(12)     LOAD DSD
  REP 0C30 05EF                         BALR  14,15             GO TO DS
  REP 0C32 07F8                         BCR   15,LNKRG1               GO
  REP 0C34 00000000            JFCBPASS DC    F'0'
  REP 0C38 00000000            CARDPASS DC    F'0'
  REP 0C3C 00000000            VOLPASS  DC    F'0'
  REP 0C40 404040404040        VOLSER   DC    CL6' '
  IDRDATA SS80009
 ++MAC(SMFZPD) DISTLIB(SRC) DISTSRC(SRC)
   SYSLIB(MACLIB) TXLIB(TEMPLIB) .
 ++SRC(DSDSPZAP) DISTLIB(SRC)
   TXLIB(TEMPLIB) .
 ++SRC(DSDZAPRP) DISTLIB(SRC)
   TXLIB(TEMPLIB) .
 ZX
0                                     - 7 -
