.he ABE, T. Smith, Appendix B

Appendix B, Virtual Terminal                                           @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  B

                 V I R T U A L   T E R M I N A L



This appendix documents Virtual Terminal Facility, which allows
multiple TSO sessions to be conducted concurrently from a single
physical terminal.

Virtual Terminal Facility is not currently working. It depends on a
software component provided by IBM called VTAM.  When a new release
of VTAM was installed (release 3), Virtual Terminal stopped
working.  Neither IBM nor local support could account for the
failure.

I am reluctant to continue the use of a facility which is dependent
on software over which I have little control, and for which support
is nebulous, and which appears to be far from stable.  In view of
this, and also because Virtual Terminal was not heavily used, I
decided to at least temporarily suspend its use.

Rather than discard Virtual Terminal altogether, however, I have
consolidated the documentation for it in this appendix.  If demand
for Virtual Terminal should increase, further efforts might be made
to get it working again.


          6 - USING THE VIRTUAL TERMINAL FACILITY:
              at cmode emode log nl.

VIRTUAL TERMINAL FACILITY:  HOW TO DOUBLE YOUR FUN.                    @

You've already seen how to make more effective use of the display
screen by splitting it up to display several data sets at the same
time.  This section presents the Virtual Terminal Facility of SSE,
which allows you to make more effective use of the terminal by
letting you run several TSO logon sessions concurrently.  While
a long-running command is running in one session, you can still be
interactive in another session.

Virtual Terminal Facility coincidentally provides you with a fully
editable session.  You can scroll back over what you've done,
and alter and reissue commands.

In the following discussion, the term "original session" will refer
to the session in which TSO sends and receives messages from the
real physical terminal.  This will be the session started by the
very first, or "original" logon, entered at the start of the day.
The term "alternate session" will refer to one in which TSO
communicates with an imaginary terminal fabricated via the VTF
facility of SSE.

The first thing you must do before using VTF is to set up an empty
data set with the attribute DCB=(LRECL=255,BLKSIZE=3120,RECFM=VB).
this is to compensate for a shortcoming in SSE; it should create
this data set for you automatically, but it doesn't yet, so for
mow, do the following:

  %anf * vt.data recfm(vb) lrecl(255)

Now you are ready to start up an alternate TSO session:

  sse vt name(tso) vt(tso) lo

In the above SSE command, the "name" keyword assigns a symbolic
name to the data set (discussed previously), the "vt" keyword tells
SSE that a virtual terminal session is being defined, and that
the session will be used to communicate with TSO (yes, you can
logon to other systems such as VSPC, but its trickier, and won't
be shown here).  The "lo" keyword tells SSE not to translate
lower case letters entered on the command line to upper case.
the next thing you will see is a display like the following
(see next page):
                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

at this point, anything you enter on the command line will be received
by TSO as though it were coming from an imaginary terminal. So the
first thing you always want to do is enter a TSO LOGON command.  Now,
if in the original session, you are logged on as EUP027, you must use
a different userid in the alternate session.  Here is what will happen
if you use the same userid:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  logon eup027 s(4000)
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

  The resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

  00001 logon eup027 s(4000)
  00002 ACF82004  ACF2, ENTER PASSWORD-
  00003 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxx
  00004
  00005 IKJ56425I LOGON REJECTED, USERID EUP027 IN USE
  00006 ACF82997  ACF2, DUPLICATE USERID, YOUR LOGONID IS ALREADY IN U
  00007 ACF82913  ACF2, SESSION CANCELLED.
  00008 ******

Your only choice is to enter the "end n" subcommand, and start over
again:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  end n
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

  00001 logon eup027 s(4000)
  00002 ACF82004  ACF2, ENTER PASSWORD-
  00003 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxx
  (lines omitted for brevity)
    READY
    sse vt name(tso) vt(tso) lo

So now we are back to the original display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

Now I enter the LOGON command specifying a different userid (Note:  To
aid the people who monitor VTAM, there is the restriction that the
first six characters of the userid in the alternate session must match
the userid in the original session.):

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  logon eup027s s(4000)
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö

 he resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)

At this point in time, it is appropriate to discuss cmode (command
mode) versus emode (edit mode). In cmode, anything you enter on the
command line will be transmitted to TSO as an entry from the virtual
terminal in the alternate session.  In emode, anything you enter on
the command line is considered to be an SSE subcommand to be applied
to the session log.  In emode, you can scroll through what you did in
the alternate session, make changes, etc. If you are in cmode, you can
enter emode by entering "em" on the command line.  If you are in
emode, you can enter cmode by entering "cm" on the command line.

The other topic that needs to be discussed before going farther is
asynch versus synch mode.  Asynch mode is the default when you
first start a virtual terminal session.  In this mode, messages
from the alternate session are not automatically added to the
display when they are received.  Instead, you must hit enter to
cause the display to be updated.  For example, in the above display,
you won't see anything change until you enter a null line.
When any lines which have accumulated from the alternate session
will be added to the display.
In synch mode, you don't need to hit enter to see new messages from
the alternate session.  Instead, the display is updated with new
messages from the alternate session whenever they are received. The
disadvantage is that in order to accomplish the continual updating of
the screen, the keyboard must remain locked.  In order for you to
enter anything on the command line, you must first enter an attention
interrupt.  On a remote 3270, you simply hit the ATTN key on the upper
left side of the keyboard.  On a local 3270, you must hit in sequence
the RESET, ALT, and PA1 keys. Once you have done this, the keyboard
will be unlocked, and you can enter anything on the command line.

Incidentally, when you are running in asynch/cmode, when you enter
a null line, if there are no new messages ready for display, the
keyboard will remain locked until at least one new message is
received from the alternate session.  If you decide not to wait,
just enter an attention interrupt (reset/alt/pa1) to get the
keyboard to unlock.

Generally, I always run in synch mode when in cmode, and in
asynch mode when in emode.  So the first thing I usually do after
entering the logon command is the following:


                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  *em*synch*cm
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)
  00002 ..............................
  00003 ACF82004  ACF2, ENTER PASSWORD-
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::

As you can see, I am being prompted for a password from the
alternate session.  I now signal an attention interrupt,
and when the keyboard unlocks, I enter my password:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  xxxxxx
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)
  00002 ..............................
  00003 ACF82004  ACF2, ENTER PASSWORD-
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)
  00002 ..............................
  00003 ACF82004  ACF2, ENTER PASSWORD-
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxxxx
  00005
  00006 EUP027S LOGON IN PROGRESS AT 09:44:58 ON DECEMBER 12, 1980
  00007  to find out the hours of operation at the telecommunications
  00008  over the holidays,   list "oper.holiday.schedule.data"
  00009
  00010  Beginning Monday 12/15/80 ACF2 will no longer accept the one-
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  00012  is supplied after the userid, it will be ignored.  ACF2 will
  00013  always prompt for the password.  This is being changed to avo
  00014  the appearance of the password on the terminal.  If you have
  00015  questions contact Dennis Paschke.                         12/
  00016
  00017 READY

At this point, I usually enter an "ex prologue" command in the
alternate session to establish certain libraries, and to invoke
a monitor program called BIGIDLE.  BIGIDLE reads and executes
commands as I enter them at the terminal.  The advantage of
BIGIDLE is that it prevents the session from being cancelled if
I don't enter anything for a long period of time.  The disadvantage
is that BIGIDLE doesn't execute CLISTS which do their own error
handling very well.  Also, I enjoy the message BIGIDLE prompts you
with instead of READY:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  ex prologue
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001 logon eup027s s(4000)
  00002 ..............................
  00003 ACF82004  ACF2, ENTER PASSWORD-
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxxxx
  00005
  00006 EUP027S LOGON IN PROGRESS AT 09:44:58 ON DECEMBER 12, 1980
  00007  to find out the hours of operation at the telecommunications
  00008  over the holidays,   list "oper.holiday.schedule.data"
  (lines omitted for brevity)

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxxxx
  00005
  00006 EUP027S LOGON IN PROGRESS AT 09:44:58 ON DECEMBER 12, 1980
  00007  to find out the hours of operation at the telecommunications
  00008  over the holidays,   list "oper.holiday.schedule.data"
  00009
  00010  Beginning Monday 12/15/80 ACF2 will no longer accept the one-
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  00012  is supplied after the userid, it will be ignored.  ACF2 will
  00013  always prompt for the password.  This is being changed to avo
  00014  the appearance of the password on the terminal.  If you have
  00015  questions contact Dennis Paschke.                         12/
  00016
  00017 READY
  00018 ex prologue
  00019
  00020 ENTER "HELP TGS" TO SEE A LIST OF AVAILABLE COMMANDS
  00021 FILE NOCC NOT FREED, IS NOT ALLOCATED
  00022 YES_MASTER?

Note above that when more lines were added to the session log than
could fit on the display, SSE started scrolling them off the top. I
can go back and look at these messages at any time by entering
"*em*asynch" and using the display movement subcommands (PB, PF, TOP,
BOTTOM, etc.).

Now I enter an ALLOC command for the alternate session.  Note that
I have deliberately mispelled the keyword "file":

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  alloc fale(xlog) da('bap044.xlog.data') shr
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00004 XXXXXXXX.::$$$$$$$$.::@@@@@@@@.::::xxxxxx
  00005
  00006 EUP027S LOGON IN PROGRESS AT 09:44:58 ON DECEMBER 12, 1980
  (lines omitted for brevity)

the resulting display (next page):
                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00008  over the holidays,   list "oper.holiday.schedule.data"
  00009
  00010  Beginning Monday 12/15/80 ACF2 will no longer accept the one-
  (lines omitted for brevity)
  00022 YES_MASTER?
  00023 alloc fale(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -

In this case I deliberately entered the command in error to show
how an attention interrupt is transmitted to the alternate session:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  at
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00008  over the holidays,   list "oper.holiday.schedule.data"
  00009
  00010  Beginning Monday 12/15/80 ACF2 will no longer accept the one-
  (lines omitted for brevity)
  00022 YES_MASTER?
  00023 alloc fale(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  at
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  (lines omitted  for brevity)
  00022 YES_MASTER?
  00023 alloc fale(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -
  00027 at
  00028 !
  00029 YES_MASTER?

As you can see above,  SSE transmitted an attention interrupt to
the alternate session when I entered "at" in cmode on the command
line (A null line is transmitted when you enter "nl" in cmode
in the command line).

Now, instead of re-keying the entire ALLOC command on the command
line, I do the following:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  *em*asynch
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  (lines omitted  for brevity)
  00022 YES_MASTER?
  00023 alloc fale(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -
  00027 at
  00028 !
  00029 YES_MASTER?

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  (lines omitted  for brevity)
  00022 YES_MASTER?
  00023 alloc fale(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -
  00027 at
  00028 !
  00029 YES_MASTER?
Now that I am in emode, I can go back and alter the ALLOC command
in the session log, and reissue the command via the LOG subcommand,
which will also put me back in cmode:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE
  *synch*log 23
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00011  TSO sign-on sequence, i.e. LOGON userid/password.  If a passw
  (lines omitted  for brevity)
  00022 YES_MASTER?
  00023 alloc file(xlog) da('bap044.xlog.data') shr
  00024
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -
  00027 at
  00028 !
  00029 YES_MASTER

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00014  the appearance of the password on the terminal.  If you have
  (lines omitted  for brevity)
  00025 INVALID KEYWORD, FALE(XLOG)
  00026 REENTER -
  00027 at
  00028 !
  00029 YES_MASTER
  00030 alloc file(xlog) da('bap044.xlog.data') shr
  00031
  00032 YES_MASTER

Now that I have my file allocated, I am going to invoke a clist
called SAS, which will perform some statistical analyses.  Since
SAS is a clist, I temporarily get out of BIGIDLE:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  *end idle*%sas da(sse.sample(sas))*t bigidle
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00014  the appearance of the password on the terminal.  If you have
  (lines omitted  for brevity)
the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00096 200:  DATA SET NOT FOUND.
  00097 NOTE: SAS STOPPED PROCESSING THIS STEP BECAUSE OF ERRORS.
  00098 NOTE: SAS SET OPTION OBS=0 AND WILL CONTINUE TO CHECK STATEMEN
  00099       THIS MAY CAUSE NOTE: NO OBSERVATIONS IN DATA SET.
  00100
  00101  15  PROC CHART DATA=FREQ;
  00102                      ----
  00103                      200
  00104  16    TITLE TRANSACTION FREQUENCY BY HOUR;
  00105  17    HBAR HOUR / SUMVAR=PERCENT DISCRETE;
  00106             ----          -------
  00107             155           155
  00108 155:  THE VARIABLE NAME IS NOT ON THE DATA SET.
  00109 200:  DATA SET NOT FOUND.
  00110 NOTE: SAS STOPPED PROCESSING THIS STEP BECAUSE OF ERRORS.
  00111
  00112 NOTE: SAS INSTITUTE, SAS CIRCLE, BOX 8000, CARY NC 27511
  00113 READY
  00114 YES_MASTER?

As you can see above, I got some errors during my sas run.
Now I go into emode to scroll back through the session log to
find the problem:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE
  *em*asynch
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00096 200:  DATA SET NOT FOUND.
  00097 NOTE: SAS STOPPED PROCESSING THIS STEP BECAUSE OF ERRORS.
  (lines omitted for brevity)

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00096 200:  DATA SET NOT FOUND.
  00097 NOTE: SAS STOPPED PROCESSING THIS STEP BECAUSE OF ERRORS.
  (lines omitted for brevity)
Paging back through, I find that the error was a missing
semicolon on the first comment statement in the input
source file:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00057 READY
  00058 NOTE: THE JOB EUP027S HAS BEEN RUN UNDER RELEASE 79.3A OF SAS
  00059
  00060
  00061   1  * DSN=EUP027.SSE.SAMPLE(SAS)
  00062   2   DATA LOG;
  (lines omitted for brevity)

So I edit the source in the current session to make the correction:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE
  *sse sse.sample(sas) name(sas)*lines
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  (lines omitted for brevity)

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012

  PB
  SAS            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001  * DSN=EUP027.SSE.SAMPLE(SAS)
  00070   DATA LOG;
  00080    INFILE XLOG FIRSTOBS=2 OBS=100;
  00090    INPUT @1 TYPE PK2. @3 MILL PK1. @5 PTIME PIB4. @9 RTIME PIB
  00091      @17 RDATE PD3. @20 QTYPE $1. @21 TERMID $4. @27 QNUM PK1.
  00100      @28 MILLNUM PK1. @32 JOB $3.;
  00111    IF MILL = 98 THEN DELETE;
  00120    IF TYPE NE 100 THEN DELETE;
  00125    IF JOB = '***' THEN DELETE;
  00130    HOUR=INT(PTIME/3600);
  00140    DELAY=PTIME-RTIME;
  00141  PROC PRINT;
  00150  PROC FREQ DATA=LOG;
  00160    TABLES HOUR / OUT=FREQ;
  00170  PROC CHART DATA=FREQ;
  00171    TITLE TRANSACTION FREQUENCY BY HOUR;
  00172    HBAR HOUR / SUMVAR=PERCENT DISCRETE;
As you know from previous text, the LINES subcommand issued on the
previous display does not end editing for the virtual terminal
session; it merely eliminates it from the screen.  As you see in
the next display, I make my correction, issue the SAVE subcommand,
but because I may have further corrections, I don't end editing
of the data set:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012

  *s*lines
  SAS            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00001  * DSN=EUP027.SSE.SAMPLE(SAS);
  00070   DATA LOG;
  (lines omitted for brevity)

the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00057 READY
  00058 NOTE: THE JOB EUP027S HAS BEEN RUN UNDER RELEASE 79.3A OF SAS
  00059
  00060
  00061   1  * DSN=EUP027.SSE.SAMPLE(SAS)
  00062   2   DATA LOG;
  00063   3    INFILE XLOG FIRSTOBS=2 OBS=100;
  00064        ------
  (lines omitted for brevity)

Once again, I get in cmode and run the SAS clist:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  EMODE
  *end idle*%sas da(sse.sample(sas)) go*t bigidle
  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00057 READY
  00058 NOTE: THE JOB EUP027S HAS BEEN RUN UNDER RELEASE 79.3A OF SAS
  00059
  00060
  00061   1  * DSN=EUP027.SSE.SAMPLE(SAS)
  00062   2   DATA LOG;
  00063   3    INFILE XLOG FIRSTOBS=2 OBS=100;
  00064        ------
  (lines omitted for brevity)
the resulting display:

                 1         2         3         4         5         6
        12345678901234567890123456789012345678901234567890123456789012
  CMODE

  TSO            Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö Ö
  00200
  00201 TRANSACTION FREQUENCY BY HOUR
  00202
  00203 BAR CHART OF PERCENT
  00204
  00205 HOUR
  00206        ×
  00207    6   ×*******************************************
  00208        ×
  00209    7   ×******************************************************
  00210        ×
  00211        ----+---+---+---+---+---+---+---+---+---+---+---+---+--
  00212            3   6   9  12  15  18  21  24  27  30  33  36  39
  00213
  00214                                              FREQUENCY PERCENT
  00215
  00216 NOTE: SAS INSTITUTE, SAS CIRCLE, BOX 8000, CARY NC 27511
  00217 READY
  00218 YES_MASTER?

This time, there were no errors.  For testing, I limited the number
of records SAS would process by saying "OBS=100" on the first data
step.  Now that the bugs have been worked out, my next step would
be to bring the source back onto the display, eliminate "OBS=100",
and rerun the SAS procedure again.

The ability to edit source while actively using it in another session
is useful in other areas.  For example, debugging with the Checker is
easier if it is invoked in the alternate session.  Then, you can look
at your original source without having to end the Checker.

I also find it useful to do compiles in the alternate session.
It saves time because I can do other things while the compiles are
running, and then I can go back through any compiler error messages
that were generated at my leisure.

Note that there is a bug in SSE which causes it to abend with a
code of A03 when you return to READY mode after conducting a
virtual terminal session.  The message can be ignored.



 S SUBCOMMANDS -
 ASYNCH, AT,
 CMODE,
 EMODE,
 LOG,
 NL,
 SYNCH,

 X SYNTAX -
         dent   vt()

 SYNCH   execute tso commands in alternate sessions asynchronously
         ASYNCH
 T       signal attention to alternate session
         AT
 MODE    puts you in cmode - used with alternate sessions
         CM
 ENT     dent additional data sets
         DENT   VT()
 MODE    puts you in emode - used with virtual terminal facility
         EMODE
 OG      transmits commands to an alternate session
         LOG <LINE-1> <LINE-2> <NAME> <KEYWORDS>
 L       transmit carriage return to alternate session
         NL
SYNCH    execute tso commands in alternate sessions synchronously
         SYNCH
  l  - log
  ll - log
 +DENT will also allow you to establish secondary TSO and VSPC
  sessions (see the vt operand of the dent subcommand). When
  using this facility, the virtual data set being edited becomes
  the session log, containing all commands you enter, and all
  responses from the system.  The session log is fully editable,
  and can be scanned and altered using dent subcommands.
 )VT() - This keyword is used to establish a secondary tso or
   vspc session, and must be entered as either vt(tso), or
   vt(vspc).  When using this facility, the virtual data set
   being edited becomes the session log, containing all commands
   you enter, and all responses from the system.  The session log
   is fully editable, and can be scanned and altered using dent
   subcommands.
        It is convenient to think of the alternate
   session being conducted from a virtual terminal, simulated by
   the dent subcommand.  If the word "cmode" appears in the
   message area on the display, you are in command mode, and
   anything you enter in the command line will be passed to the
   secondary session, as though it were a line entered at the
   virtual terminal.  Anything that the alternate session sends
   to the virtual terminal will be intercepted by dent and stored
   in the session log.
        It is difficult to impress upon people using this
   facility for the first time that it is indeed a virtual
   terminal they are dealing with.  For example, it does not
   occur to many that the first thing they must do is enter
   a vspc or tso logon command.  Following is a sample session
   log dealing with vspc:


        vspc id=1033827
        enter password
        .????????
        ..logon    08:07:25 10/24/79 1033827
        welcome to vspc rel 2.0
        profile 10/24/79 08:07:27
        time 0.0 secs
        ready

        If "emode" appears in the message area, you are in edit
   mode, and anything you enter in the command line will be
   considered to be a dent subcommand.
        If you are currently in command mode, entering "em"
   in the command line will switch you to edit mode.  If you
   are in edit mode, entering "cm" in the command line will
   switch you to command mode.
        If you enter a line in command mode, you may have to
   hit enter several times before the response from the alternate
   session is displayed.  This is because the alternate session
   runs asynchronously with the primary session.  This means that
   you can enter a long-running command to the alternate session,
   and then do something else in the primary session while waiting
   for the command in the alternate session to complete.
        Note also that you can enter a second command for the
   alternate session without waiting for the response from the
   first to be displayed.  The second and subsequent commands
   are merely passed on to vtam, where they are buffered until
   the alternate session is ready to handle them.
        Note that in order to use dent to establish alternate
   sessions, your installation must have made the following
   vtam application program definition:

        any-name vbuild type=appl
        lulu0    appl   auth=(noacq),eas=1
        .        .      .
        .        .      .
        .        .      .
        lulu9

 ASYNCH
 F FUNCTION -
    This subcommand applies only to the use of the virtual terminal
  facility.  It specifies that asynchronous mode is to be used in
  executing tso commands transmitted to an alternate session. This
  is in contrast to synchronous mode, which is entered via the synch
  subcommand.  Note that asynchronous mode is the default mode when
  you first enter dent.
    In asynchronous mode, when you enter a tso
  command to be transmitted to the alternate session, the terminal
  will be immediately unlocked, and you can enter other tso commands
  to be stacked up for execution in the alternate session, or you
  can go to emode to do something else while waiting for the command
  to complete in the alternate session.  The problem with this mode
  is that the only time dent can add to the display new lines


  received from the alternate session is when you hit enter at the
  terminal.  But if you hit enter without changing anything on the
  display while in cmode, dent will then leave the keyboard locked
  until it receives the next line of output from the terminal
  session. The new lines will then be displayed, and the keyboard
  unlocked. This means that you don't have to keep hitting enter if
  all you want to see is if there is any output yet from the
  alternate session.
    Suppose, however, that you have hit enter without changing
  anything, intending to wait for terminal output from the alternate
  session, and in the meantime, dent has received lines of output,
  and the alternate session is waiting for you to enter something,
  such as a new tso command (READY displayed).  You have told dent
  to keep your keyboard locked until the next line of output is
  received. Since the alternate session is waiting, you aren't going
  to receive that line.  To get out of this situation, simply hit
  reset, and then attention.  Dent will then unlock the keyboard.
 X SYNTAX -
         asynch
  required - none
  defaults - none
  alias    - none
 O OPERANDS - none
 AT
 F FUNCTION -
  Use the at subcommand to cause a n attention to be transmitted
  to an alternate session.
 X SYNTAX - AT
 O OPERANDS - NONE

 CMODE=CM
 F FUNCTION -
  Use the cmode subcommand to switch from edit mode to command
  mode.  Cmode/emode subcommands apply only to a virtual terminal
  session.  See help data for the vt operand of the dent
  subcommand.
 X SYNTAX -
           cmode
  alias - cm
 O OPERANDS - NONE

 EMODE=EM
 F FUNCTION -
  Use the emode subcommand to switch from command mode to edit
  mode.  Cmode/emode subcommands apply only to a virtual terminal
  session.  See help data for the vt operand of the dent
  subcommand.
 X SYNTAX -
           emode
  alias - em
 O OPERANDS - NONE



 LOG
 F FUNCTION -
  Use the log subcommand to indicate commands in the session log
  that are to be re-executed.  Note that the log subcommand
  applies only to virtual terminal data sets.  You must be in
  emode to enter this subcommand.  Once the subcommand is
  complete, you will be placed in cmode.  Note that in emode you
  can re-execute a particular line on the display by entering the
  character "l" in the sequence field of that line.  A group of
  lines can be re-executed by entering "ll" in the sequence
  fields of the first and last lines to be re-executed.
 X SYNTAX -
         log <line-1> <line-2> <name> <keywords>
  required - <line-1>
  defaults - none
 O OPERANDS -
 <line-1> - First line to be re-executed.
 <line-2> - Last line to be re-executed.  This operand is
    optional unless <name> is also to be specified.  If not
    specified, it defaults to the value in <line-1>.
 <name> - This operand is optional.  It indicates that the
    list of commands to be re-executed is to be obtained
    from the data set so named (via name subcommand or name
    operand of dent).
 <keywords> This is a series of keyword parameters specified
    by the user.  Briefly, values specified by these parameters
    are substituted at specified points in each line of the
    range.  See help data set for the symrep subcommand for
    a detailed explanation of the use of these keywords.

 NL
 F FUNCTION -
  Use the nl subcommand to cause a null line to be transmitted
  to an alternate session.  You would use this command, for
  example, if you were in input mode of the ibm edit command
  in an alternate session, and you wanted to return to edit mode.
 X SYNTAX - NL
 O OPERANDS - NONE

 PROBLEMS
  VIRTUAL  - problems associated with the virtual terminal facility.

 )VIRTUAL - problems with virtual terminal facility.
  VTE000 - Effective with VTAM Release 3, the virtual terminal
    facility no longer works.  If any VTAM experts see this, HELP.
  VTE001 - An a03 abend always occurs when leaving dent after
    having used the virtual terminal facility.  This is because
    a detach is not being done.  Note that all normal processing
    is successfully completed before the abend occurs, so no
    data is lost.
  VTE002 - The cmode/emode indication only shows in the message
    area of the first data set on the display.
  VTE003 - Deleting lines in the session log while waiting for
    a command to complete in the alternate session causes wrong
    lines to be deleted.
  VTE004 - Dent gets confused after ending a virtual terminal
    session.  Principal symptom is that commands seem to get
    out of synch with the terminal.  That is, you may enter a
    command, and it won't take effect until you hit enter


    several times more.  The bypass is to not end any virtual
    terminal sessions until you have finished editing any other
    data sets, then end dent immediately after ending the
    virtual terminal session.
  VTE005 - The AT subcommand to signal an attention interrupt
    does not work when the alternate session is VSPC.
 SYNCH
 F FUNCTION -
    This subcommand applies only to the use of the virtual terminal
  facility.  It specifies that synchronous mode is to be used in
  executing tso commands transmitted to an alternate session. This
  is in contrast to asynchronous mode, which is entered via the asynch
  subcommand.  Note that asynchronous mode is the default mode when
  you first enter dent.
    In synchronous mode, the keyboard remains locked until you
  hit reset and then the attention key.  The advantage to this
  mode is that dent can display new lines of output from the
  alternate session as they are received, instead of after each
  time you hit enter.
 X SYNTAX -
         synch
  required - none
  defaults - none
  alias    - none
 O OPERANDS - none

