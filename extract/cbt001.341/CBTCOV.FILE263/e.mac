.he ABE, T. Smith, Appendix E

Appendix E - SNO Subcommand, Pattern Recognition                       @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  E

                  S N O   S U B C O M M A N D








INTRODUCTION, APPENDIX E                                               @

This appendix documents the SNO subcommand, which is an implementation
of the SNOBOL Language pattern matching and replacement statements.
the syntax is similar to that of the ALTER subcommand of the
MTS (Michigan Terminal System) Editor.

BNF SYNTAX DEFINITION                                                  @

  <subcommand> ::= <lsu> <subcmd>
  <subcmd>     ::= <longform> × <shortform>
  <shortform>  ::= 'SNOT' <replacement>
                   NOTE: entering "SNOT etc..." is eqivalent to
                   entering "sno anchor trim rtab(0) $ a = etc...".
  <longform>   ::= <lsu> 'SNO' <keywords> (':') <statement>
  <keywords>   ::= <0 <keyword> / ' '>
  <keyword>    ::= 'RESCAN' × 'ANCHOR' × 'FIND' × 'TRIM' × 'PAD' ×
                   'ALL' × 'STACK' × 'EXEC' × 'LOCATE'
  <lsu>        E.G. see Appendix H
  <statement>  ::= <pattern> ( '=' <replacement> )
  <pattern>    ::= <1, <alternate> / '×'>
  <alternate>  ::= <1, <element> / ' '>
  <element>    ::= <ref> ('$' <name>)
  <ref>        ::= <literal> × <nameref> × <functionref> ×
                   '(' <statement> ')'
  <nameref>    ::= ('*') <name>
  <functionref>::= <function> '(' <0, <arguments> / ','> ')'
  <function>   ::= 'ANY' × 'ARB' × 'BREAK' × 'EQ' × 'EVAL' ×
                   'GE' × 'GT' × 'IDENT' × 'INDEX' × 'LE' ×
                   'LEN' × 'LGT' × 'LT' × 'NE' × 'NOTANY' × 'POS' ×
                   'RPOS' × 'RTAB' × 'SPAN' × 'TAB'
  <arguments>  ::= <literal> × ('*') <name>
  <name>       E.G. ABC123
  <literal>    E.G. 'HOW NOW'
  <replacement>::= <1, <assref> / ' '>
  <assref>     ::= <name> × <literal>



SIMPLE CASES -  LOCATE THE NEXT OCCURRENCE OF A LITERAL OR VARIABLE    @

The LOCATE keyword of the SNO subcommand allows you to reposition the
current dataset to the next record containing an occurrence of the
specified pattern, e.g. given the following sample data set and
subcommand:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno locate '.'                                     ×SAMPLE××

 0001 STILL ROUND THE CORNER THERE MAY WAIT,
 0002   A NEW ROAD OR A SECRET GATE.
 0003 AND THO I OFT HAVE PASSED THEM BY,
 0004   A DAY WILL COME AT LAST WHEN I,
 0005 SHALL TAKE THE HIDDEN PATHS THAT RUN,
 0006   EAST OF THE MOON, WEST OF THE SUN.

The result would be that the dataset is repositioned so that the
top record on the display contains the first occurrence of a
period:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      PF                                                 ×SAMPLE××

 0002   A NEW ROAD OR A SECRET GATE.
 0003 AND THO I OFT HAVE PASSED THEM BY,
 0004   A DAY WILL COME AT LAST WHEN I,
 0005 SHALL TAKE THE HIDDEN PATHS THAT RUN,
 0006   EAST OF THE MOON, WEST OF THE SUN.

Entering the subcommand "n b sno locate '.'" would reposition to the
next occurrecnt of a period:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      PF                                                 ×SAMPLE××

 0006   EAST OF THE MOON, WEST OF THE SUN.


FIND ALL OCCURRENCES OF A LITERAL OR VARIABLE                          @

Given the above sample dataset, the subcommand "sno find '.'" would
produce a new virtual data set containing just the lines with periods:

 0002 A NEW ROAD OR A SECRET GATE.
 0006 EAST OF THE MOON, WEST OF THE SUN.

Note that the string to be found can be specified through a symbolic
variable.  This is a variable which is assigned a replacement value
via the SETL subcommand (and via the SNO subcommand as you will see
later on).  There are also a number of system symbolic variables,
such as SYSDATE.  The replacement value for SYSDATE is the current
day's date in the form MM/DD/YY.

Suppose you had the following data set containing cash amounts due
on a particular date.  You could find all amounts due today as
follows:

               1         2
      123456789012345678901234567890123456789012345678901234567890

      sno find sysdate

 0001 06/24/83 -  $26.00 to george for gambling debt.
 0002 05/24/84 - $500.13 for house payment.
 0003 03/01/84 - $750.00 tax due.
 0004 06/24/83 -   $5.37 lunch.
 0005 03/01/84 - $200.00 gas bill.
 0006 04/01/82 -  $20.00 to sam for loan.

The result would be a virtual data set containing the following two
lines:

 0001 06/24/83 -  $26.00 to george for gambling debt.
 0004 06/24/83 -   $5.37 lunch.

PATTERNS - CONCATENATION AND ALTERNATION                               @

Following is a listing of all the SNO subcommands shown so far.

      sno find '.'
      1 3 sno find '.'
      sno find sysdate

On all of the above subcommands, that portion to the right of the
FIND keyword is known as a "pattern".  This pattern can contain
more than just a single literal or variable reference.  First,
you can concatenate elements, as in the following sequence of
subcommands:

      setl rank 4
      setl suit D
      sno find rank suit

If the above set of subcommands were applied to the following
data set -

               1         2         3         4         5         6
      123456789012345678901234567890123456789012345678901234567890

      00001 AC
      00002 4D
      00003 AH
      00004 KD
      00005 KS

The result would be a virtual data set containing the single line -

      00002 4D



Alternation can also be specified in a pattern in addition to
concatenation, as in the following example, which selects all
red or yellow shirts from a list of clothing:

               1         2         3         4         5         6
      123456789012345678901234567890123456789012345678901234567890

      sno find ('RED' × 'YELLOW') ' SHIRT'

      00001 WHITE SHIRT
      00002 YELLOW SLACKS
      00003 RED SHIRT
      00004 BLUE TIE
      00005 YELLOW SHIRT
      00006 ORANGE TEESHIRT
      00007 RED SLACKS

The results would be a virtual data set containing the following:

      00003 RED SHIRT
      00005 YELLOW SHIRT

Note that the concatenation operation has higher precedence than
alternation.  If the above subcommand had been entered without
Parenthesis (e.g. "sno find 'RED' × 'YELLOW' ' SHIRT') the
results would have been the following:

      00003 RED SHIRT
      00005 YELLOW SHIRT
      00007 RED SLACKS



BUILTIN FUNCTIONS USED IN PATTERNS                                     @

So far in patterns we have seen the use of symbolic variables
(e.g. "sno find sysdate"), literals (e.g. "sno find
'red' × 'yellow' ' shirt'"), and sub-patterns (e.g. "sno find
('red' × 'yellow') ' shirt'").  Another syntactical unit which
may be used in patterns is a builtin function.

Suppose for example that the sample data set shown above appeared
as follows, and we still wanted to find all occurrences of red
or yellow shirts.  The subcommand shown would accomplish this:

               1         2         3         4         5         6
      123456789012345678901234567890123456789012345678901234567890

      sno find ('RED' × 'YELLOW') span(' ') 'SHIRT'

      00001 WHITE SHIRT
      00002 YELLOW   SLACKS
      00003 RED    SHIRT
      00004 BLUE      TIE
      00005 YELLOW       SHIRT
      00006 ORANGE         TEESHIRT
      00007 RED SLACKS

The results would be a virtual data set containing the following:

      00003 RED    SHIRT
      00005 YELLOW       SHIRT

The above example illustrates the use of the SPAN builtin function.
It matches the longest string beginning at the current location in
the subject string (subsequently referred to as the cursor location)
that consists solely of characters appearing in the argument.

Other useful functions are listed below.  In reading the descriptions
for these functions, you should know that any argument may be either
a literal or a variable name reference.  If the argument needs to
be converted to internal floating point, as is the case with the
EQ, GE, GT, LE, LT, and NE functions, if it can't be converted, the
argument will be assumed to have negative infinity as its value.

Note also that some of the descriptions will refer to the current
cursor value.  The cursor is maintained pointing at the next
character to be matched in the subject string.



ANY - matches any character appearing in its argument.  Thus,
  ANY('AEIOU') matches any vowel, and is equivalent to the sub-pattern
  ('A' × 'E' × 'I' × 'O' × 'U').
ARB - matches zero or more characters.  When first encountered by the
  scanner moving from left to right, ARB matches the null string. When
  'backed' into on subsequent occasions, ARB increases the size of the
  substring it matches by one.  ARB fails only when it can no longer
  increase the length of the substring it matches.
BREAK - matches the longest string beginning at the cursor that does
  not contain a character of the argument.
DIFFER - accepts two arguments. The null string is matched if the two
  arguments don't compare equally character-by-character.
EQ - accepts two arguments, which are converted to internal floating
  point numbers, and if they compare equal, the null string is matched
EVAL - accepts a single argument, which is expected to contain a
  SNOBOL <STATEMENT> as defined above in BNF form.  The <STATEMENT>
  will be evaluated and executed.
GE - accepts two arguments, which are converted to internal floating
  point numbers, and if the first argument compares greater than or
  equal to the second argument, the null string is matched.
GT - accepts two arguments, which are converted to internal floating
  point numbers, and if the first argument compares greater than the
  second argument, the null string is matched.
IDENT - accepts two arguments. The null string is matched if the two
  arguments compare equally in a character-by-character comparison.
INDEX - accepts zero or one arguments.  If zero arguments, the next
  concatentation element in the pattern must be a variable name
  reference or literal, and that value will be use as the argument.
  INDEX matches everything up to but not including the specified
  character string.  "INDEX() 'ABC'" is equivalent to "ARB() 'ABC'",
  but is much more efficient.
LE - accepts two arguments, which are converted to internal floating
  point numbers, and if the first argument compares less than or equal
  to the second argument, the null string is matched.
LEN - accepts a single argument, which must be convertable to a
  numeric integer.  LEN matches any string of the specified length.
LGT - accepts two arguments that are compared character-by-character.
  The null string is matched if the first argument compares greater
  than the second argument.
LT - accepts two arguments, which are converted to internal floating
  point numbers, and if the first argument compares less than the
  second argument, the null string is matched.
LE - accepts two arguments, which are converted to internal floating
  point numbers, and if the first argument compares not equal to the
  second argument, the null string is matched.
NOTANY - matches any character not appearing in its argument.
POS - matches the null string if the cursor is at a point in the
  subject string specified by the integer argument. POS(N) matches the
  null string only if the cursor is positioned just at the right of
  the Nth character.
RPOS - matches the null string if the cursor is at a point in the
  subject string specified by the integer argument.  RPOS(N) matches
  the null string only if the cursor is positioned just at the left of
  the Nth character from the end of the subject string.



RTAB - RTAB(N) matches up to but not including the Nth character from
  the right end of the subject string.
SPAN - matches the longest string beginning at the cursor that
  consists solely of characters appearing in the argument.
TAB - TAB(N) matches from the current cursor position up through
  the Nth character of the subject string.

REPLACEMENT - REPLACING STRINGS MATCHED BY PATTERNS                    @

Given the following data set and subcommand:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno '.' = ','

 0001 STILL ROUND THE CORNER THERE MAY WAIT,
 0002   A NEW ROAD OR A SECRET GATE.
 0003 AND THO I OFT HAVE PASSED THEM BY,
 0004   A DAY WILL COME AT LAST WHEN I,
 0005 SHALL TAKE THE HIDDEN PATHS THAT RUN,
 0006   EAST OF THE MOON, WEST OF THE SUN.

the results would be the following:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890


 0001 STILL ROUND THE CORNER THERE MAY WAIT,
 0002   A NEW ROAD OR A SECRET GATE,
 0003 AND THO I OFT HAVE PASSED THEM BY,
 0004   A DAY WILL COME AT LAST WHEN I,
 0005 SHALL TAKE THE HIDDEN PATHS THAT RUN,
 0006   EAST OF THE MOON, WEST OF THE SUN,

The above represents the simplest case of text replacement using the
SNO subcommand, and could just as easily have been done using the
CHANGE subcommand.  Subsequent examples are not so simple.

Suppose you have a list of member names, and you want to produce a
list of ADD control statements for the IEBUPDAT utility.  Such
statements are of the form "./       ADD   name,00,0,1", where the
"./" begins in column 1, the "ADD" begins in column 10, "name" is the
member name beginning in column 16, and is followed by ",00,0,1".  The
sample data set and SNO subcommand are listed below:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno pad break(' ') $ name = './' 10 'ADD' 16 name ',00,0,1'

 0001 FIRST
 0002 SECOND
 0003 THIRD
 0004 FOURTH


The result will be that the data set will be changed to appear as
follows:
               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890


 0001 ./       ADD   FIRST,00,0,1
 0002 ./       ADD   SECOND,00,0,1
 0003 ./       ADD   THIRD,00,0,1
 0004 ./       ADD   FOURTH,00,0,1

PAD AND TRIM KEYWORDS                                                  @

In the previous example, the PAD keyword was used on the SNO
subcommand.  PAD tells SNO to append a single blank at the end of
each record before pattern matching is attempted.  This is useful
when using the BREAK builtin function to search for the end of
a word which might appear at the end of a record.  BREAK matches
the longest string beginning at the cursor that doesn't contain
a character of the argument.  It is important to note however, that
BREAK must find a character in its argument for it to successfully
match.

Suppose the current record is 5 characters long containing the string
"FIRST", and the cursor is 1 when BREAK(' ') is encountered in the
pattern.  BREAK will match all of the characters in "FIRST" and will
when attempt to move the cursor past the end of the record.  Since
the end of the record is encountered before a break character is
found, BREAK does not match, and the pattern fails.

This problem is easily solved by specifying the PAD keyword.  Thus,
the record the pattern sees will be 6 characters long, ending in a
blank, which will cause BREAK to successfully match.

There are other times when you wish to ensure that no blanks occur
at the end of each record scanned.  You can do this by specifying
the TRIM keyword, which tells the SNO subcommand to strip off
trailing blanks from each record before pattern matching begins.
If you want to ensure that exactly one blank occurs at the end
of each record, specify both the PAD and TRIM keywords.

CAUTION:  There is one situation in which PAD will not ensure a
blank at the end of a record.  If the maximum record length is 80,
for example, and column 80 is nonblank, there is no room to append
another character.


IMMEDIATE VALUE ASSIGNMENT - $                                         @

In the previous example, the syntactical unit "break(' ') $ name" was
used.  The $ is used to associate a variable with a component
(literal, variable, sub-pattern, or builtin-function) of a pattern so
that the sub-string matched by that component is immediately assigned
is the replacement value for the specified variable. In this case,
whatever is matched by BREAK(' ') is assigned to variable "name",
which is later used in the replacement:

  sno pad break(' ') $ name = './       add   ' name ',00,0,1'
                           ____                     ____

DEFERRED EVALUATION - *                                                @

Suppose you had the following data set:

 0001 /ABC/DEF/
 0002 *HOW NOW*HEY THERE*

The first character in each line is a delimiter character, which is
used to define the start and end of two strings in that line.  You
would like to eliminate the delimiter characters, and surround each
of the two strings in apostrophes (e.g. "/ABC/DEF/" becomes "'ABC'
'DEF'").  The SNO subcommand and results are shown below:

    sno len(1) $ d break(*d) $ a len(1) break(*d) $ b len(1) =
        '''' a ''' ''' b ''''

 0001 'ABC' 'DEF'
 0002 'HOW NOW' 'HEY THERE'

Note the use of the asterisk (*) in front of the argument to the
BREAK function.  This tells the SNO subcommand that argument "d" is
not to be evaluated until each time the BREAK function is invoked. If
he had not used the asterisk prefixed to the argument, it would have
been evaluated once during the parsing of the subcommand, and the
results would have been entirely different.  Suppose symbolic
variable d had the replacement value "*" when the subcommand -

    sno len(1) $ d break(d) $ a len(1) break(d) $ b len(1) =
        '''' a ''' ''' b ''''

was entered.  The results would have been as follows:

 0001 /ABC/DEF/
 0002 'HOW NOW' 'HEY THERE'

USING THE FIND KEYWORD WHEN REPLACEMENT IS SPECIFIED                   @

Consider the following sample data set and SNO subcommand:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno find '.' = ','

 0001 STILL ROUND THE CORNER THERE MAY WAIT,
 0002   A NEW ROAD OR A SECRET GATE.
 0003 AND THO I OFT HAVE PASSED THEM BY,
 0004   A DAY WILL COME AT LAST WHEN I,
 0005 SHALL TAKE THE HIDDEN PATHS THAT RUN,
 0006   EAST OF THE MOON, WEST OF THE SUN.

The results would be a second virtual data set containing the lines
shown below:

 0002   A NEW ROAD OR A SECRET GATE,
 0006   EAST OF THE MOON, WEST OF THE SUN,

The original data set will not have been changed.  If the changes
in the new virtual data set look ok, you can update the original
data set by specifying the MB subcommand (see part II of this
manual).

The above provides a convenient method of applying a SNO command
and examining the results to make sure they are as desired before
altering data in the original data set.


RESCAN KEYWORD                                                         @

Suppose you have the following data set and issue the indicated
SNO subcommand:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno '/' = ' '

 0001 /ABC/DEF/
 0002 /HOW NOW/HEY THERE/

The results would be the following:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

 0001  ABC/DEF/
 0002  HOW NOW/HEY THERE/

As you can see, only the first occurrence in each line is replaced.
If you wanted all occurrences to be replaced, you should use the
RESCAN keyword, e.g. "sno rescan '/' = ' '".  The results
would be the following:

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

 0001  ABC DEF
 0002  HOW NOW HEY THERE

NOTE: To prevent infinite loops when using the RESCAN keyword (e.g.,
specifying "sno rescan '*' = '**'"), the position in each data
line where the rescan begins is controlled as follows:  When a match
in a data line is found, the data length before and after replacement
is compared.  If the before-length is not greater than the
after-length, the cursor (point where pattern recognition begins
during rescan) is incremented by 1.  When the cursor position
exceeds the current data length, the rescanning operation is
discontinued.

ANCHOR KEYWORD                                                         @

Mormally, the SNO subcommand operates in unanchored mode.  That is,
A pattern can match anywhere in the subject string.  If you specify
the ANCHOR keyword, however, a pattern can match only beginning at
the first character.

SEPARATING KEYWORDS FROM THE PATTERN - :                               @

If the first item in your pattern is a symbolic name which matches one
of the keywords, e.g All, RESCAN, ANCHOR, etc., you must precede it by
A colon (:) so that the SNO subcommand can tell the difference.  For
example "sno rescan 'xyz' = 'abc'" indicates that all occurrences of
the string 'xyz' are to be replaced by the string 'abc'.  However "sno
rescan 'xyz' = 'abc'" indicates that the first occurrence in all
lines of the string formed by concatenating the replacement value for
symbolic variable "rescan" with the literal 'xyz' is to be replaced by
the literal 'abc'.

MULTIPLE REPLACEMENTS IN A SINGLE PATTERN                              @

Recall earlier that it was said that a pattern element could be a
sub-pattern (e.g. ('red' × 'yellow') ' shirt').  Such a sub-pattern
is syntactically equivalent to the <STATEMENT> element defined
on the BNF syntax definition near the start of this appendix.
for example, given the SNO subcommand -

  sno 'ARY(' (break(',') $ a = b) ',' break(',') ','
    (break(')') $ b = a)

And a data line such as -

  ARY(1,2,3)=X;

The results would be -

  ARY(3,2,1)=X;

CAUTION:  If a SNO subcommand contains multiple replacements, their
scopes should not overlap.  That is, if the first replacement is in
columns 5 thru 12, the second replacement should not start, end, or
span columns 5 thru 12.  In the words of that wise old IBM sage,
"Results are unpredictable."

MAJOR DIFFERENCE FROM SNOBOL PATTERN MATCHING - ALL KEYWORD            @

Given the following data set -

 0001 AA
 0002 AB
 0003 ABC
 0004 AC

And the following pattern -

 'A' × 'AB') 'C'

SNOBOL would match lines 3 and 4, but SNO, without the ALL keyword,
would match only line 4.  This is because, by default, SNO uses a
shorthand version of pattern matching, which differs from the
standard SNOBOL pattern matching in that all possible combinations
of pattern elements are not tried.  Instead, once an alternative
in a sub-pattern is matched, that sub-pattern will not be retried
if a concatenated pattern element fails.  Thus, in the above
pattern, alternative 'AB' will never be tried, because the 'A'
will always match first.

However, if the 'ALL' keyword is specified, SNO pattern matching is
consistent with SNOBOL pattern matching, all combinations are
tried, and the above pattern would match lines 3 and 4, just as
SNOBOL would.


OBTAINING THE CURRENT LINE NUMBER - SEQ                                @

Given the following data set and SNO subcommand -

               1         2         3         4         5
      123456789012345678901234567890123456789012345678901234567890

      sno find index('SHIRT') rtab(0) = seq ' del'

 0001 RED SHIRT
 0003 WHITE SHIRT
 0004 YELLOW SHIRT
 0005 RED SLACKS
 0006 WHITE SLACKS
 0007 YELLOW SLACKS

The result will be a new virtual data set containing the following:

 0001 1 DEL
 0003 3 DEL
 0004 4 DEL

This could be run against the original data set to delete all
lines containing the word shirt (see RUN subcommand in part II).

Note the use of variable SEQ in the replacement part of the above
SNO subcommand even though SEQ was not assigned anywhere in the
pattern matching part of the subcommand.  SEQ is a special variable
which is given the current line number as a default value.


ABE SUBCOMMANDS FROM PATTERN MATCHES - STACK AND EXEC KEYWORDS         @

the following subcommand -

  SNO STACK INDEX() ' DD ' RTAB(0) = SEQ ' DEL'

would cause all lines containing the string ' DD ' in the current
data set to be deleted.  This is an example of the use of the STACK
keyword of the SNO subcommand. If STACK is specified, the data in the
records is not changed as a result of a pattern match.  Instead, the
STACK keyword tells SNO to stack on the ABE subcommand queue for
subsequent execution the resulting string whenever the pattern is
matched.  The EXEC keyword performs a similar function except the
command is executed immediately instead of being stacked.

GENERATING MULTIPLE LINES DURING PATTERN REPLACEMENT                   @

Given the following data sets and subcommand:

                  1         2         3         4         5
         12345678901234567890123456789012345678901234567890

         run sample                                 ×DATA××

       1 A B C

      =>                                          ×SAMPLE××
       1 SNO ANCHOR TRIM PAD +
       2   BREAK(' ') $ A SPAN(' ') BREAK(' ') $ B +
       3   SPAN(' ') BREAK(' ') $ C = +
       4   10 A 0 20 B 0 30 C

The result would be:

                  1         2         3         4         5
         12345678901234567890123456789012345678901234567890

                                                    ×DATA××

       1          A
       2                    B
       3                              C

A slightly different example:

                  1         2         3         4         5
         12345678901234567890123456789012345678901234567890

         run sample                                 ×DATA××

       1 A B C

      =>                                          ×SAMPLE××
       1 SNO ANCHOR TRIM PAD +
       2   BREAK(' ') $ A SPAN(' ') BREAK(' ') $ B +
       3   SPAN(' ') BREAK(' ') $ C = +
       4   10 A 50 '+' 16 B 50 '+' 16 C

The result would be:

                  1         2         3         4         5
         12345678901234567890123456789012345678901234567890

                                                    ×DATA××

       1          A                                       +
       2                B                                 +
       3                C

Both of the above examples illustrate using numeric constants in the
replacement pattern to specify positioning within the replacement.
A cursor is maintained during the replacement process.  When a
numeric constant is encountered during replacement, it is compared
to the cursor value.  If the numeric constant is greater than the
cursor, an appropriate number of blanks is inserted in the output
to move the cursor to the specified position.  If the numeric
constant is less than the cursor, a new line is defined in the output,
and blanks are inserted in it to the specified position.  Note that
a numeric constant of 0 will always force a new line to be defined
in the output.

SNO VERSUS GREP - A COMPARISON                                         @

It has been suggested that an implementation of the GREP utility of
the UNIX system as an ABE subcommand would be useful.

Below you will see a sample GREP statement, followed by the equivalent
SNO statement.  Granted that the SNO statement is longer, mostly
because of having to specify the string 'abcdefghijklmnopqrstuvwxyz'
instead of simply 'a-z', still the same function is accomplished.

In the article from which this example was extracted, titled
"GREP.C A Unix-Like, Generalized, Regular Expression Parser in C"
by Allen Holub, Dr. Dobb's Journal, October 1984, the example grep
statement had {\s\t}* where I have {\s}.  I eliminated the check for
the tab, since it would not normally appear in the IBM OS
environment.  I could as well have matched on a string containing
either spaces or cent signs, e.g. span('    ').

In the following grep statement, because my terminal keyboard doesn't
have left and right brackets or a caret, the left and right
braces ({}) and the not sign (^) have been substituted.

   grep ^{a - z}{a - z}*{\s}*.*({^;}*){^;}*$
                                           $ matches end of line.
                                      {^;}* matches any character
                                            except a semicolong
                                            repeated zero or more
                                            times.
                                     ) matches a close parenthesis.
                                {^;}* matches any character except a
                                      semicolon repeated zero or more
                                      times.
                               ( matches an open parenthesis.
                             .* any character repeated zero or more
                                times
                        {s\t\}* matches a space repeated zero or more
                                times.
         {a - z}{a - z}* one or more occurrences of any character in
                         the range a to z
        ^ matches beginning of line

   sno pos(0) span('abcdefghijklmnoprstuvwxyz') span(' ') +
     index() '(' break(';)') ')' (break(';') × rtab(0))

     pos(0)
       matches if the cursor is at the start of line.
     span('abcdefghijklmnopqrstuvwxyz')
       matches a string of any combination of alphabetic characters.
     span(' ')
       matches a string of zero or more blanks.
     index() '('
       matches everything up to the next left parenthesis.
     break(';)')
       matches a string of anything except a semicolon or a right
       parenthesis.
     ')'
       matches a left parenthesis.
     (break(';') × rtab(0))
       matches to the end of line provided a semicolon is not
       encountered.

I see no ability in GREP that is not already available via the SNO
subcommand.  In addition, SNO provides replacement capabilities
not available in GREP.

















