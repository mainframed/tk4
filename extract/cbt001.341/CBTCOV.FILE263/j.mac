.he ABE, T. Smith, Appendix J

Appendix J - LSP subcommand.                                           @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  J

                  L S P   S U B C O M M A N D








INTRODUCTION, APPENDIX J                                               @

This appendix describes the LSP subcommand, which can be used to apply
any other ABE subcommand or subcommands to a range of lines selected
via more sophisticated criteria other than simply line-a thru line-b.
Note that lsp has an alias of lss.  lss is syntactically identical to
lsp, and the subcommands generated will be the same. The difference is
that lss will define a new virtual data set, and will store the
generated subcommands in the new virtual data set instead of executing
them.  The lines on the display owned by the original data set will be
split, and the second half will be given to the newly defined virtual
data set. This gives you a chance to see what will happen when LSP is
entered with the same syntax.  You might find this useful as a new
user of ABE.

LSP SUBCOMMAND SYNTAX                                                  @

       lsp <template> <keywords> topdown
required - <template>
defaults - none

NOTE:  If <template> begins with an apostrophe, the command
name, "lsp", does not have to be entered.  For example,
"lsp 'bl &1' 1(a)", and "'bl &1' 1(a)" are equivalent
commands.

LSP SUBCOMMAND OPERANDS                                                @

TOPDOWN - This keyword indicates that the order of execution
    of generated ABE subcommands is to be from the top down instead
    of bottom up.  Without the TOPDOWN keyword, the first generated
    ABE subcommand to be executed will apply to the last line which
    has met the selection criteria.  Execution of generated ABE
    subcommands then progreABEs towards the beginning of the data
    set.  This is done because LSP first generates all of the ABE
    subcommands and puts them in an execution stack.  Only after
    all the subcommands have been generated does execution of those
    subcommands begin. Consequently, if execution were top-down,
    and the first subcommand caused lines to be inserted in the
    data set (via the blank subcommand, for example), causing
    resequencing of subsequent lines, then any of the generated ABE
    subcommands which are subsequently executed may be applied to
    the wrong lines. You should be thoroughly familiar with this
    logic when using the TOPDOWN keyword.
TEMPLATE - No real TEMPLATE keyword - just identifies
    the documentation for the <template> positional operand.
    <template> describes the format of the ABE subcommand(s) to be
    applied to each line meeting the selection criteria.
    'blank &1' is an example.
         In the template, replacement variables can be specified
    that will be replaced by a replacement value when the ABE
    subcommand is generated. replacement variables always begin
    with an ampersand followed by 1 to 7 alphameric characters,
    and are delimited by blanks, commas, and parentheses.  'bl
    &1', and 'substr &1 &1 1 8 &sysuid' are both examples of
    templates containing replacement variables.
         The replacement values for replacement variables may be
    set in several ways, depending on the type of replacement
    variable.  Variables of the form &0 thru &9 are line
    specification replacement variables (lsrv).  A line
    specification is associated with a particular lsrv via a
    keyword operand of the form n(...) on the lsp subcommand, n
    being a digit from 0 to 9.  The format of the line
    specification will be described later, but its purpose is to
    describe a group of lines.  When generating ABE subcommands
    based on the template, the lsp subcommand will set lsrv
    variables &0 thru &9 with the first line number in the group
    associated with each respective lsrv before generating the
    first command, then set each respective lsrv with the next
    line number before generating the next subcommand, and so
    forth until all of the line numbers in all of the groups have
    been proceABEd at least once.  If a particular group is
    completed before another, the lsp subcommand will start using
    the shorter group from the beginning again. if a line group
    was not associated with a particular lsrv,
    the replacement value for that lsrv will be set to null.
         Previous paragraphs described lsrv variables &0 thru
    &9.  There are also lsrv variables &L0 thru &L9, and &N0
    thru &N9 (these variables must be specified in upper case).
    For each line selected, just as &0 is set to the
    current line number, &L0 is set to the line number of the
    previous line in the data set, and &n0 is set to the line
    number of the next line in the data set (lsrv &0 was used
    here for illustration, and the same applies to &1 thru &9).
    When the current line is the first line in the data set,
    &L0 will be set to '0', and when the current line is the last
    line in the data set, &N0 will be set to '999999'.
         A second type of replacement variable is a keyword
    replacement variable (krv).  A krv and its replacement
    value are specified on the lsp subcommand as keyword operands
    of the form krv(value), where "krv" is the keyword
    replacement variable name itself less the preceding ampersand,
    and "value" is the replacement value to be associated with
    that krv.  "lsp 'substr &1 &1 1 8 &mykey' 1(a) mykey(abc)" is
    an example of an lsp subcommand specifying a krv called
    "mykey".
         &ctl is a special krv used when selecting based on a
    control field.  This type of selection selects lines based on
    whether a control area in each record matches the control
    area in the previous record in the data set.  The range
    specification can indicate that either the first line of
    each group of records with matching control areas is to be
    selected, or that all but the first line of each group of
    records with matching control areas is to be selected.  Krv
    &ctl will be set to the current control area value.
         Note that keyword replacement variables will retain
    their values beyond the life of one lsp subcommand.  That is,
    you may issue an lsp subcommand which sets up
    a krv, and later issue a second lsp subcommand which uses
    the krv established on the first lsp subcommand.
         A third type of replacement variable is a system keyword
    replacement variable (skrv).  These are variables that have
    pre-defined replacement values.  So far, there are five
    skrvs defined:  &sysuid, &lastcc, &sysdate, &systime, and
    &syspref.  &sysuid has a replacement value equal to the
    currently logged on tso userid.  &lastcc has a replacement
    value equal to the return code issued by the most recently
    executed tso command.  &sysdate equals the current date, and
    &systime equals the current time.
         A fourth type of replacement variable is an incremental
    replacement variable (irv).  These variables are of the form
    &#n, where "n" is a single digit "0" to "9".  Each time one
    of these variables is resolved in the template, its replacement
    value is incremented a specified amount.  The default is that
    each irv has an initial value of "0", an increment value of "1",
    and a replacement length value of "0".  The "replacement length
    value" indicates how many characters long the replacement value
    will be (e.g. when the "replacement length value" for #1
    is 3, and the current value is "4", the characters "&#1" in the
    template will be replaced by "003").  When the replacement
    length value is "0", the length of the replacement value is
    then depenabe  on the number of significant digits in the
    current value associated with the variable (e.g. when
    "replacement length value" for #1 is 0, and the current value
    is "4", the characters "&#1" in the template will be replaced
    by "4").
         The initial value, increment value, and replacement length
    value for each incremental replacement variable as described
    in the previous paragraph can be specified on the LSP
    subcommand via keyword operands of the form "#n(init:incr:rlen)",
    where "n" is a single digit "0" to "9", "init" is
    the initial value, "incr" the increment value, and "rlen"
    the replacement length value.  Note that "#n(init:incr)",
    and "#n(init)" are also legitimate formats.  In these latter
    cases, the omitted operands will take the defaults described
    in the previous paragraph.
         Note that the template may contain several ABE
    subcommands.  If the first character of the template is
    not lower or upper case 'a' to 'z', '0' to '9', or '$',
    then it is assumed that the character is a delimiter
    which separates a series of subcommands. '@v &1@del * 3'
    is an example of a template consisting of the ABE
    subcommands 'v &1' and 'del * 3'.
         The only thing remaining to discuss is the line
    specifications.  As previously indicated, these specifications
    are placed on the lsp subcommand as keyword operands of the
    form n(...), where n is a digit from 0 to 9.  The line
    specification itself is contained in the parentheses.  The
    general syntax is described below in modified backus-naur form.
    In this description, "::=" means "is defined as."  The symbols
    "<" and ">" surround the name of syntactical units to be
    further broken down.  Anything surrounded in parentheses is
    optional.  Anything surrounded by apostrophes must be specified
    as is.  The symbol "×" separates alternative choices.  "--"
    indicates the start of descriptive text.

    <line specification> ::= <lsp>
    <lsp> ::= <r>(' ' <lsp>)
         -- A line specification consists of one or more sub-line
         -- specifications separated by blanks.
    <r> ::= 'a' × <nnn> × '(' ('^') <string> <lsp> ')'
         -- A sub-line specification is either the character 'a',
         -- indicating all lines in the data set, or <nnn>,
         -- indicating a specific line or lines, or a
         -- parenthesized expression indicating that only those
         -- lines containing <string> (or not containing <string>
         -- if '^' is specified) will be selected from the given
         -- range.
    <nnn> ::= <n> × <n>:<n> × <n>:<n>:<i>
         -- <n> identifies a single line.  <n>:<n> identifies
         -- a range of lines beginning with the first <n>, and
         -- ending with the second.  <n>:<n>:<i> identifies a
         -- range of lines from which every <i>th line is to
         -- be selected.
    <n> ::= <nsp>(<off>)
         -- <nsp> identifies a specific line in the data set,
         -- and the optional <off> indicates that the line to
         -- be selected is plus or minus so many records from
         -- record <nsp>.
    <nsp> ::= '*' × 't' × 'b' × <num>
         -- '*' indicates the record on the top line of the current
         -- display.  't' indicates the first record in the data
         -- set.  'b' indicates the last record in the data set.
         -- <num> indicates a specific line number.
    <num> ::= --one or more contiguous decimal digits--
    <off> ::= '+'<num> × '-'<num>
    <i> ::= <num>
    <string> ::= <str>(<csp>)
    <str> ::= ''' <quot> ''' × '#' × <an>
         -- '#' indicates that records in the range are to be
         -- selected based on whether the control area specified
         -- by <csp> matches the previous record in the data set.
    <quot> ::= --any character, including blank and ',:(#
    <an> ::= --any character, excluding blank and ',:(#
    <csp> ::= <colcol> × <collen>
    <colcol> ::= ':'<num>(':'<num>)
         -- ':'<num> indicates the character string must begin in
         -- column <num>.  ':'<num1>:<num2> indicates the character
         -- string must be contained in columns <num1> thru <num2>.
    <collen> ::= ':'<num>':+'<num>
         -- ':'<num1>':+'<num2> indicates the character string
         -- must begin somewhere in the columns starting in
         -- <num1> for a length of <num2> columns.
    The following examples and notes should also help to
    understand and use the command:

         lsp '&1 bl' 1(a)
         lsp 'del &1' 1(t+1:b:2)  --  The first lsp subcommand
         above would insert a blank line after every line in the
         data set.  The second lsp subcommand would delete all of
         the blank lines just inserted.  The number 2 after the
         second colon in the second lsp subcommand indicates
         that every 2d line is to be selected, and does not mean
         that the sequence number is to be incremented by 2.

         lsp '&1 del' 1(100 120 10:50) -- Deletes lines 100,
         120, and 10 thru 50.

         lsp '&1 &1 1.8 substr &str' str(xxx) 1(10 20 (smith a))
         -- Inserts the characters "xxx     " starting in column
         1 for a length of 8 in lines numbered 10 and 20, and
         all other lines containing the characters "smith".

         lsp '&1 del' 1((xyz:1 a)) -- Deletes all lines
         containing the character string "xyz"
         beginning in column 1

         lsp '&1 del' 1((xyz:1:+10 a)) -- Deletes all lines
         containing the character string "xyz" anywhere
         beginning in column 1 for a length of 10.

         *ren 1 1*lsp '@&L1 bl@&1 &1 5.3 substr &ctl' 1((#:1:3 a))
         -- Inserts a line in front of each group of lines in the
         data set with matching columns 1 thru 3.  The inserted
         line will contain beginning in column 5 the matching
         characters from columns 1 thru 3 of each line in the
         control group.

         lsp 'drem xxx &1 &1 &1' 1((#:1:3 a)) -- When this
         subcommand is finished, virtual data set with symbolic
         name xxx will contain the first line from each control
         group.  You might use this sample to eliminate duplicate
         lines from a data set.

         Given the following data set:

             10 ABC    AA
             20        AA
             30        AA
             40 XX     BB
             50        BB
             60 AA     CC

         And the following dataset named TEST:

             10 LSS '&&1 &&1 1.7 SUBSTR &&L1 S' 1((#:8:9 A)) T
             20 LSS '&&1 &&1 1.7 SUBSTR &&L1 S' 1((^#:8:9 A)) T

         if the subcommand 'RUN TEST' were issued,
         The results would be the following two data sets,
         arbitrarily named AAA and BBB for reference purposes:

         AAA
             10 10 10 1.7 SUBSTR 0 S
             20 40 40 1.7 SUBSTR 30 S
             30 60 60 1.7 SUBSTR 50 S

         BBB
             10 20 20 1.7 SUBSTR 10 S
             20 30 30 1.7 SUBSTR 20 S
             30 50 50 1.7 SUBSTR 40 S

         If, in the original data set, the subcommand 'RUN BBB'
         were then issued, the results would be as follows:

             10 ABC    AA
             20 ABC    AA
             30 ABC    AA
             40 XX     BB
             50 XX     BB
             60 AA     CC

         lsp 'drem xxx &1 &1 &1' 1((abc a)(def a)) -- Selects to
         data set xxx all lines in the current data set that
         contain EITHER the string 'abc' OR the string 'def'.
         Note that if the command has been written as
         "lsp 'drem xxx &1 &1 &1' 1((abc (def a)))" the function
         would have been to select to data set xxx all lines in the
         current data set that contain the string 'abc' AND the
         string 'def'.

