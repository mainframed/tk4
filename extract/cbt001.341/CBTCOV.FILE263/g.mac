.he ABE, T. Smith, Appendix G

Appendix G - Syntactical Notation Used in this Manual                  @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  G

            S Y N T A C T I C A L   N O T A T I O N








INTRODUCTION, APPENDIX G                                               @

This appendix describes the syntactical notation used throughout
this manual.  There is always a difficulty when describing complex
syntax in that two almost mutually exclusive goals must be achieved.
First, you would like to be succinct and understandable to the
casual user who only needs to know enough about the syntax to do
simple, commonly done tasks.  Second, you would like to be as precise
and complete as possible for those computer hackers who want to
know just how many contortions the syntax can be put through.

Although compromises often don't produce the finest quality, I
finally decided that a modified version of Backus-Naur notation
should be used.  For those of you who aren't heavy into computer
science, Backus-Naur Form (BNF) is a notation used to formally
define the syntax of languages.  A typical statement in BNF might be -

     <sentence> ::= <pronoun> <verb> '.'

which in plain english means that a sentence in the language being
defined consists of a pronoun followed by a verb, ending with a
period.

A complete definition of this simple language might be -

     <text> ::= <sentences>
     <sentences> ::= <sentence> <sentences> × <empty>
     <sentence> ::= <pronoun> <verb> '.'
     <pronoun> ::= 'I' 'You' 'They' 'We'
     <verb> ::= 'jump' 'run' 'play'

and typical <text> might be -

     I jump. You run. We play.

The BNF shown so far is classic.  Following is a modification that is
commonly used to simplify specifying strings of repeating items:

     <list> ::= '(' <0, <word> / ','> ')'

This defines a <list> as a parenthesized list of 0 or more <words>,
separated by commas.

Another notation change that is commonly used is the use of
parentheses to indicate that an item is optional:

     <reference> ::= <name> ('NOT') 'LIKE'

The above defines a <reference> to consist of <name>, followed either
by 'NOT LIKE', or just 'LIKE'.

The notation shown so far is used throughout this manual wherever
I wanted to be very precise in my description.  However, this
notation can be awkward to read in certain cases.  Consider the
following definition of the syntax of the ABE subcommand in
normal BNF:

  <SSE-SUBCOMMAND> ::= 'ABE' <DSNAME> <KEYWORDS>

  <KEYWORDS> ::= <0, <KEYWORD> / ' '>

  <KEYWORD> ::= 'CLIST'
            × 'COUNT('<NUMBER>')'
            × 'DBD'
            × 'HARDCOPY'
            × 'HEX'
            × 'HICASE'
            × 'INFI('<DDNAME>')'
            × 'INP('<SUBCOMMAND-LIST>')'
            × 'LINE('<NUMBER>')'
            × 'LOCASE'
            × 'NAME('<NAME>')'
            × 'NODBD'
            × 'NOFREE'
            × 'NONUM'
            × 'NOPREFIX'
            × 'NOPROMPT'
            × 'NOSHOW'
            × 'OUTDA('<DSNAME>')'
            × 'OUTFI('<DDNAME>')'
            × 'PDF'
            × 'PDFC'
            × 'PDFE'
            × 'PRI('<NUMBER>')'
            × 'PROFILE'
            × 'RECSIZE('<NUMBER>')'
            × 'SECY('<NUMBER>')'
            × 'SUPPORT'
            × 'SYSOUT('<SYSOUT-CLASS>')'
            × 'TRANSLAT'

The definition below defines the same syntax, but is more readable
because of the lack of single quotes:

  <SSE-SUBCOMMAND> # ABE <DSNAME> <KEYWORDS>

  <KEYWORDS> # <0, <KEYWORD> / ' '>

  <KEYWORD> # CLIST
            × COUNT(<NUMBER>)
            × DBD
            × HARDCOPY
            × HEX
            × HICASE
            × INFI(<DDNAME>)
            × INP(<SUBCOMMAND-LIST>)
            × LINE(<NUMBER>)
            × LOCASE
            × NAME(<NAME>)
            × NODBD
            × NOFREE
            × NONUM
            × NOPREFIX
            × NOPROMPT
            × NOSHOW
            × OUTDA(<DSNAME>)
            × OUTFI(<DDNAME>)
            × PDF
            × PDFC
            × PDFE
            × PRI(<NUMBER>)
            × PROFILE
            × RECSIZE(<NUMBER>)
            × SECY(<NUMBER>)
            × SUPPORT
            × SYSOUT(<SYSOUT-CLASS>)
            × TRANSLAT

In BNF, there are two kinds of symbols; terminals and nonterminals.
terminals can't be further broken down into other syntactical units,
and are shown surrounded in single quotes, e.g. 'I', 'run', etc.
nonterminals can be broken down, e.g. <sentence> is broken down
into <pronoun>, <verb>, and '.'.

As you can see in the above definition of the syntax for the ABE
subcommand, this requirement that terminals be surrounded in single
quotes makes it difficult to read.  I have adopted the standard that,
if '::=' is replaced with '#', then terminals will not be surrounded
in single quotes.  This short-hand syntax works in most cases.

Another syntax "short-cut" will be seen in cases where I felt a
nonterminal didn't need further explanation, and a simple example
would suffice.  For example -

     <name> e.g. able12
     <number> e.g. 562

