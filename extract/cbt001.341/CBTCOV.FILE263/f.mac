.he ABE, T. Smith, Appendix F

Appendix F - RUN Subcommand, Internal Language                         @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  F

                  R U N   S U B C O M M A N D








INTRODUCTION, APPENDIX F                                               @

This appendix documents the RUN subcommand, and the language which is
used within run subcommand lists.  You can use RUN to execute a list
of ABE subcommands, under the control of a programming language built
into RUN.  This allows you loop control and logical branching.
facilities are also available for prompting for information at the
terminal, and displaying data in full-screen format. See also the RLIM
subcommand.

SYNTAX - RUN SUBCOMMAND                                                @

         run <name> <operands>
           or
         %%<name> <operands>

  required - <name>
  defaults - none
  alias    - none

NOTE:  As indicated above, the RUN subcommand can be invoked by
entering %% as the first two characters in the subcommand.  For
example, to invoke RUN specifying XYZ as the <name> operand, either
"run xyz" or "%%xyz" would work (except that %% is not recognized in
the INPUT keyword of the ABE command).

OPERANDS - RUN SUBCOMMAND                                              @

<name> is the name, 8 characters or less, associated with the list of
ABE subcommands to be run.  The name may have been previously assigned
to a data set currently being edited using either the define or name
subcommands.  If the RUN subcommand doesn't find a data set currently
being edited with that symbolic name associated with it, it will check
to see if a partitioned data set is allocated with the ddname SYSRUN.
If so, RUN will check to see if the pds contains a member with the
desired name.  If so, it will bring the member in as a currently
edited data set, and will execute the list of ABE subcommands stored
therein.

NOTE:  If the RUN subcommand finds a currently edited data set with
the requisite symbolic name, it will first do a "REN 1 1" subcommand
on that data set.  There is an internal requirement in RUN that the
data set be numbered starting with 1, and incremented by 1.

NOTE:  The list of ABE subcommands must be in a special format
described at the end of the help data for the RUN subcommand.

NOTE:  If a plus sign (+) is encountered as the last nonblank
character on a line, it is to be treated as a continuation indicator
and not part of the data.  In this case, text from the succeeding data
line will replace the plus sign, e.g.

        10 c abc +
        20 top

will be treated as the single subcommand "c abc top".

<OPERANDS> can be a mixture of positional and keyword operands which
will be used to establish the replacement values for corresponding
symbolic variables which may be referenced in the list of subcommands
referenced by the <name> operand of the RUN subcommand.  The PFK
subcommand handles such parameters in a similar manner, so see the
HELP data for that subcommand for more details on this option.

INTERNAL LANGUAGE - RUN SUBCOMMAND                                     @

As previously mentioned, the list of ABE subcommands to be executed
must be in a special format.  This format consists of several
statement types:

DATA STATEMENT: Any statement which does not begin with a $ in column
1 is considered to be a data statement.  Data statements will be
transformed into $write or $cmd statements by concatenating the
characters "$write ", or "$cmd " to the front of them.  If a $control
statement has not yet been encountered, Data statements are
transformed to $cmd statements by default.  See information below on
the $control statement.

  <LABEL>: Label statements identify points in the text for logical
branching.

 * <TEXT>: Comments statement.

 CALL <LABEL>:
executes a $GOTO statement to the specified <LABEL>.  The next
$RETURN statement executed will cause execution to continue at the
statement following the $CALL statement.

$CMD <CMD>: The command statement is used to cause a command to be
immediately issued.  When this statement is encountered, symbolic
replacement will first be done, and then the command will be executed.
Note that all data beginning in column 6 is considered to be part of
the command to be issued.  Note that if you want an ampersand to
appear in a subcommand, use two ampersands (e.g. lsp '&&1 del'
((t:b:2)).

$CONTROL: $Control statements determine how subsequent data statements
will be transformed.
   $CONTROL COMMAND - All subsequent data statements will be
     transformed into $cmd statements.
   $CONTROL GDDM - All subsequent data statements will be transformed
     into GDDM subcommands, e.g. "gsmove 10 10" becomes "gddm gsmove
     10 10".
   $CONTROL LIST - A list of each command will be printed at the
     terminal as it is executed.  This can be an assist for
     debugging.
   $CONTROL NL - All subsequent data statements will be transformed
     into NL subcommands, e.g. "how now brown cow" becomes "nl how
     now brown cow".
   $CONTROL WRITE - All subsequent data statement will be transformed
     $write statements.
   $CONTROL ASIS - If this is not specified, if either "$CONTROL WRITE"
     or "CONTROL NL" is in effect, then leading blanks will be stripped
     from each line before it is transformed into a $WRITE or NL
     statement. If "$CONTROL ASIS" is not in effect, you can get a
     statement to be transformed into a $WRITE or NL statement without
     first stripping leading blanks by placing an underscore (_) in
     position 1.  The underscore will be replaced with a blank, and then
     the line is transformed without removing leading blanks.

$DATA <NAME_LIST> marks the beginning of a group of statements
that are to be executed once for each line of the dataset(s) named
in <NAME_LIST>, e.g. if the subcommand "run sample" were executed
given datasets AAA, BBB, and SAMPLE as follows:

                10        20        30
       1234567890123456789012345678901234567890
                               ×SAMPLE××3X256.1
     1 DEFINE CCC
     2 $DATA AAA BBB
     3   A CCC NL &AAA&BBB
    =>                            ×AAA××6X256.1
     1 STILL ROUND THE CORNER
     2 A NEW ROAD OR
     3 AND THO I OFT
     4 A DAY WILL COME AT
     5 SHALL TAKE THE HIDDEN
     6 EAST OF THE MOON,
    =>                            ×BBB××6X256.1
     1  THERE MAY WAIT,
     2  A SECRET GATE.
     3  HAVE PASSED THEM BY
     4  LAST WHEN I,
     5  PATHS THAT RUN,
     6  WEST OF THE SUN.

the resulting dataset CCC would appear as follows:

                10        20        30
       1234567890123456789012345678901234567890
                                  ×CCC××6X256.1
     1 STILL ROUND THE CORNER THERE MAY WAIT,
     2 A NEW ROAD OR A SECRET GATE.
     3 AND THO I OFT HAVE PASSED THEM BY
     4 A DAY WILL COME AT LAST WHEN I,
     5 SHALL TAKE THE HIDDEN PATHS THAT RUN,
     6 EAST OF THE MOON, WEST OF THE SUN.

The general algorithm for the $DATA statement is defined below.
Note that "dataset name" refers to the symbolic name associated with
each dataset either via e.g. the NAME keyword on the ABE subcommand,
or the NAME subcommand:

  Process.
    If <NAME_LIST> is empty
      then set <NAME_LIST> to the name of the current dataset.
    For each dataset named in <NAME_LIST>
      Save the current line pointer for later restoration.
      Issue a TOP subcommand.
    Loop.
      For each dataset named in <NAME_LIST>
        Issue the "USE SET" subcommand.
        Set the replacement value for the symbolic variable having
          a name matching the current dataset name to the contents
          of the current record.  This is equivalent to issuing the
          subcommands "getname rhname" followed by  "r setd &rhname".
      Set the replacement value for symbolic variable &SEQ to the
        sequence number of the current record in the first dataset
        named in <NAME_LIST>.
      Execute each subcommand in the $DATA group.
      If all datasets named in <NAME_LIST>
        have their last record as the current record
        then exit Loop.
      For each dataset named in <NAME_LIST>
        If the current record is not the last
          then issue the "DOWN 1" subcommand.
      End of Loop.
    For each dataset named in <NAME_LIST>
      restore the current line pointer to its original value.
    End of process.

You will note in the process for $DATA described above that variable
&SEQ is set.  This lets you do things like the following:

                10        20        30
       1234567890123456789012345678901234567890
     %%bbb                        ×AAA××6X256.1
     1
     2
     3
     4
     5
     6
    =>                            ×BBB××6X256.1
     1 $DATA
     2   * 1.1.&SEQ SUBSTR *

which produces -

                10        20        30
       1234567890123456789012345678901234567890
                                  ×AAA××6X256.1
     1 *
     2 **
     3 ***
     4 ****
     5 *****
     6 ******

Note also the "USE SET" subcommand being issued in the $DATA process.
This lets things like the following be done:

                10        20        30
       1234567890123456789012345678901234567890
                                  ×AAA××3X256.1
       ×A $×
     1 A
     2 B
     3 C
    =>                            ×BBB××6X256.1
       ×B $×
     1 D
     2 E
     3 F
    =>                            ×CCC××6X256.1
       ×C $×
     1 G
     2 H
     3 I
    =>                            ×XXX××6X256.1
     1 DEFINE DDD
     2 $DATA AAA BBB CCC
     3   A DDD NL &A&B&C

produces -

                10        20        30
       1234567890123456789012345678901234567890
                                  ×DDD××3X256.1
     1 A   D   G
     2 B   E   H
     3 C   F   I

$GOTO <LABEL>: Unconditional branch to a label statement.

$IF <EXPRESSION>:  The specified <EXPRESSION> is evaluated, and if the
result is non-zero, the group of statements immediately following
the $IF statement and indented further will be executed, e.g.:

  $if name='george'
    $cmd calc a#1
    $cmd nl george has been located
  $else
    $cmd calc a#0
    $cmd nl george has not been located


$INPUT:  Causes the user to prompted for input at the terminal.
Whatever he enters will be assigned to variable &ANSWER.  Note that
you can also prompt for terminal input by referring to the variable
INPUT, e.g. "$IF INPUT='ABC'" would cause a prompt at the terminal.

$LI <COUNT>: In order to use a Data statement beginning with a dollar
sign, you must precede it with a $li statement.  <count> is a number
indicating the number of statements which follow that are to be
considered data statements, regardless of whether they begin with a
dollar sign or not.

$SELECT: Marks the beginning of a select-group, which will contain
one or more $WHEN statements, and possibly an $OTHERWISE statement.
each $WHEN statement specifies an expression which is evaluated, and
is followed by a when-group, which consists of all the statements
immediately following the $WHEN statement that are further indented.
the first expression on a $WHEN statement which evaluates non-zero
will cause the evaluation of expressions to stop, and the when-group
for that $WHEN to be executed.  The $OTHERWISE statements marks the
start of a group of statements that is to be executed if every $WHEN
expression in the select-group evaluates to zero.  Example:

  $select
    $when a>b
      $call bigger
    $when a=b
      $call same
    $otherwise
      $call smaller

$STACK <CMD>: The stack statement is used to place a subcommand on the
subcommand stack, to be executed after run finishes. When this
statement is encountered, symbolic replacement will first be done on
the <cmd> string, which will then be stacked for execution after run
finishes. Note that the command statement is not tokenized as the
answer statement is. Instead all data beginning in column 6 is
considered to be part of the command to be issued.

$TSO <CMD>: The tso statement is used to cause a tso command to be
immediately executed (e.g. ALLOC, FREE, CALL, etc.).  Note, however,
that a clist cannot be invoked via $tso.  When this statement is
encountered, symbolic replacement will first be done, and then the
command will be executed.  Note that the command statement is not
tokenized as the answer and setl statements are.  Instead all data
beginning in column 6 is considered to be part of the command to be
issued.  Note that if you want an ampersand to appear in a command,
use two ampersands (e.g. lsp 'del &&1' 1(f:l:2)).

$UNTIL marks the beginning of a group of statements which is to be
executed until the expression specified on the $UNTIL statement
evaluates to 0.  In this example, all lines from the top through
the bottom will be processed:

  $cmd top
  $until line=bottom
    $cmd * mk 1
    $cmd getmk 1 line
    $cmd substr 'line=&line'
    $cmd down 1
  $write end of loop

$WHILE marks the beginning of a group of statements which is to be
executed while the expression specified on the $WHILE statement
evaluates to 0.  In this example, all lines except the last will
be processed:

  $cmd top
  $while line^=bottom
    $cmd * mk 1
    $cmd getmk 1 line
    $cmd substr 'line=&line'
    $cmd down 1
  $write end of loop


$WRITE <TEXT>: The text from $write statements are displayed at the
terminal as they are encountered. Symbolic variables (names one to
seven characters in length, beginning with an ampersand) can be used
in $write statements.  They will be replaced with their replacement
values before the data statement is displayed at the terminal. Note
that alphabetic characters in symbolic variable names must always by
upper case.  Note that symbolic variables get their replacement values
assigned either through $ans or $setl statements, or through keyword
specifications on the original RUN subcommand. NOTE:  It may sometimes
be useful to ensure that the ensuing text be written starting at the
top the crt screen.  You may do so by inserting the statement "$TSO
 LEARSC" in a line prior to the text.

