.he ABE, T. Smith, Appendix H

Appendix H - Line Specification Units (LSUs)                           @









                       A B E  E d i t o r


                         T .  S m i t h

                       A P P E N D I X  H

         L I N E   S P E C I F I C A T I O N   U N I T S








INTRODUCTION, APPENDIX H                                               @

This appendix describes Line Specification Units (LSUs). The syntax of
most ABE subcommands includes an LSU.  It is used to specify the range
of lines, and columns within those lines, to which the subcommand will
apply.  For example, the subcommand "50 70 30.5 change abc def" tells
ABE to change the string "abc" to "def" if it occurs anywhere in
columns 30 through 34 in lines 50 thru 70.  The LSU in this example is
"50 70 30.5".

Imagine the LSU as defining a data matrix having two dimensions; rows
and columns.  Each line in the line range you specify in the LSU
contains a row of the matrix.  Each row will contain one or more
columns, and a column consists of one or more contiguous record
positions in the line.

In the LSU, you specify the offset within each line to the start of
the first column.  This will commonly be referred to as the <off>
specification.  The length of each column, given in record positions,
is referred to as the <len>, and the number of columns in each row is
called the <ncols> specification.

syntax of a typical ABE subcommand is -

    <prefix> <lsu> <subcommand name> <operands>

    <prefix> # ALL
             × A <name>

    <lsu> # see description below

<prefix> is optional, and may either be the keyword "ALL", or the
keyword "A" followed by a blank and then a <name> unit. If the "ALL"
keyword is specified, it indicates that the specified subcommand is to
be applied to all data sets currently being edited.  If the "A"
keyword is specified, it indicates that the specified subcommand is to
be applied to the data set indicated by the <name> unit.  <name> is
either the short-hand name associated with the data set to which the
subcommand is to be applied, or it is a specification of the form *+n
or *-n. In the former case, <name> may have been associated with the
data set via the DEFINE, or NAME subcommands, among others.  In the
latter case (*+n or *-n), the data set to which the subcommand is to
be applied is the one positioned plus or minus n on the display
relative to the data set on whose command line the subcommand was
entered. For example, suppose data sets AAA, BBB, and CCC are
currently on the display, with AAA being the top data set, BBB the
middle data set, and CCC the last data set.  If "a *+2 20 del" is
entered on the command line for data set AAA, the "20 del" subcommand
will be applied to data set CCC.

<subcommand name> is the name of the subcommand to be executed, e.g
change, find, etc.

<operands> specify information specific to each subcommand.  For
example, the operand "5" in the subcommand "sr 5" indicates the data
in each line should be shifted right 5 spaces.

<lsu> - Line Specification Units (LSUs) are used to specify 6 items of
information as follows:

      <l1>    - The starting line in the range to which the
                subcommand is to be applied.  The default is the
                first line in the data set.
      <l2>    - The ending line in the range to which the subcommand
                is to be applied.  The default is the last line in
                data set if the default is taken for <l1>, and
                otherwise is the value specified for <l1>.
      <incr>  - Skip factor, e.g. if 2 were specified, the subcommand
                will be applied to every other line in the range.
                The default is 1.
      <off>   - Data in each line is broken up into columns, each
                consisting of one or more contiguous record
                positions.  Most ABE subcommands process data one
                column at a time.  <off> indicates the record
                position in which the first column is to begin in
                each line.  The default is 1.
      <len>   - Specifies the number of record positions to be
                included in a single column.  The default is the
                number of record positions from the offset specified
                by <off> to the end of the record.
      <ncols> - Specifies the number of columns.  The default is 1.
                To see how this concept of columns might be used,
                consider the subcommand "1.5.6 sr 3", in which
                <off>=1, <len>=5, and <ncols>=6.  When applied to -

                           1         2         3
                  1234567890123456789012345678901234567

                  abcdefghijklmnopqrstuvwxyz01234567890

                it would produce the following result:


                           1         2         3
                  1234567890123456789012345678901234567

                     ab   fg   kl   pq   uv   z04567890

(Future plans include allowing you to specify the default values to be
used in all subsequent LSUs).

Note that <l1>, <l2>, <incr>, <off>, <len>, and <ncols> will commonly
be used in the descriptions of the various ABE subcommands without
further explanation.  This is why it is important to have read this
Appendix before you try to use the rest of this manual.

Specifying LSUs will seem tricky at first because the syntax is
designed to let you specify a lot of information very succinctly. The
First thing to bear in mind is that if you don't specify a LSU at all,
the subcommand will then, by default, be applied to all lines in the
data set, with all record positions in each line treated as a single
column.

When you do specify an LSU, it will consist of from 1 to 6 of the
previously indicated items, separated either by blanks, commas (,)
periods (.), and in some cases a colon (:). Whether a particular item
in an LSU is <l1>, <l2>, <incr>, <off>, <len>, or <ncols> is determined
by its position relative to other items in that LSU.  If none of the
delimiters comma (,), period (.), or colon (:), are used, then the
order is -

  <l1> <l2> <off> <len> <ncols>

Thus, an LSU consisting of "1 2 3" would have <l1>=1, <l2>=2, and
<off>=3.  <incr>, <len>, and <ncols> would all have default values as
previously indicated.  Note that you can't specify <incr> without the
use of the comma as a delimiter; a further explanation will be given
below.

Periods, colons and commas used as delimiters between items in the LSU
make it possible to specify values for some items while using default
values for other items that would otherwise have to precede them in the
LSU. For example, an LSU consisting of "3." would indicate <off>=3, and
defaults for the rest, including <l1>, <l2>, and <incr>, which would
normally precede <off> in the LSU.

ABE recognizes the various items in an LSU by maintaining a list of
expected items as follows:

  (<l1> ',' <l2> (',' <incr>) <off> '.' <len> '.' <ncols>)

The syntax recognizer in ABE uses a copy of the above list when
processing an LSU, and uses the following algorithm:

  1.  Obtain the next item in the LSU.  If the item is a period or
      comma, or there are no more items in the LSU, goto step 2.
      Otherwise goto step 3.
  2.  Remove items from the front of the expected list (shown above)
      until the last delimiter removed matches the delimiter from the
      LSU.  Use the default values for any non-delimiter items removed
      from the list.  If there are no more items in the LSU, the
      algorithm is finished.  Otherwise, go back to step 1.
  3.  If the next item on the expected  list is the sub-list (','
      <incr>), remove the entire sub-list from the list.  Go on to
      step 4.
  4.  The next item on the expected list should not be a period or
      comma. If it is, the LSU is incorrect. Otherwise the list item
      identifies the item from the LSU.  Use the value from the LSU
      instead of the default value for that item.  Remove the item
      from the expected list, and go back to step 1.

This 4-step process is repeated until all items in the LSU have been
processed.  Notice that because of step 3, the only way to specify
<incr> is to precede it with a comma. Look at the 5 LSUs shown below:

  lsu 1:  1,2,3
  lsu 2:  1,,3
  lsu 3:  ,,3
  lsu 4:  1 2 3
  lsu 5:  1,2 3

In LSUs 1 thru 3 above, <incr> has been specified to have a value of
3.  But in LSUs 4 and 5, the default value will be assumed for <incr>,
and <off> will have a value of 3.

THE COLON (:) AS A DELIMITER IN LSUs                                   @

The colon is used as a delimiter when you want to specify starting and
ending columns, and have ABE calculate <len>.  The following two
subcommands perform identical functions; clearing to blanks record
positions 6 thru 8:

  6.3 clear
  6:8 clear

LSU ITEMS - WHAT THEY CONSIST OF                                      @

You've already seen from some of the examples that the various items
in an LSU can be integer values, but they can be more complex.
consider the following syntax definitions:

        <L1>,<L2> ::= <LSPEC> (<SIGN> <COUNT>)

        <LSPEC> # T × B × N × P × * × <LINENO>

        <SIGN> #  + × -

        <OFF>,<LEN>,<NCOLS>,<COUNT>,<INCR>,<LINENO> # <SPEC>

        <SPEC> ::= '(' <EXPRESSION> ')' × <INTEGER> × <MARKARY-REF>

        <NAME-REF> # <NAME> × * <SIGN> <SPEC>

        <MARKARY-REF> # 1M × 2M × 3M × 4M × 5M × 6M × 7M × 8M × 9M

        <LINENO> # <INTEGER>

As you can see above, not only can <l1> or <l2> be simply a line
number, but also they can be one of the keywords T, B, N, P, or *,
optionally followed by a plus or minus sign and an integer <count>
value.  The following table gives the significance of each of the
keywords:

     T - Refers to the line number of the top line in the data set.
     B - Refers to the line number of the bottom line in the data set.
     N - Refers to the line number of the next line after the
         current line.
     P - Refers to the line number of the line prior to the current
         line.
     * - Refers to the line number of the current line.

The optional "<sign> <count>" following <lspec> allows you to refer to
A line number plus or minus <count> lines from the line indicated by
<lspec>, e.g. "*+1" would be the same as specifying "20" if the current
line were 10 and the subsequent line were 20, and "b-3" would refer to
the fourth line from the bottom.

All the other items in an LSU, in addition to being an integer, can
also be either a parenthesized expression or a mark array reference.
the parenthesized expression can be any expression acceptable to
the CALC subcommand.  For example, if the following two subcommands
were entered, line 246 would be set to "how now brown cow":

   SETL A 123
   (2*A) SUBSTR 'HOW NOW BROWN COW'

Mark array references obtain values from a 9-element array associated
with each data set being edited.  The values in the array can be set
with the MARK subcommand.  If mark array elements 1 and 2 contained
100 and 200 respectively, then the subcommand "1m 2m substr abc"
would set lines 100 thru 200 to "abc".

LSU PROCESSING                                                         @

When ABE subcommands process data defined by an LSU, they do so by
iteratively calling a special subroutine called ABELSP.  After each
call of ABELSP, the calling ABE subcommand will find the current
column of data defined by the LSU in a special buffer call LSPBUF.
the logic in ABELSP is as follows:

  1.  If not the first time called for this LSU,  move the contents
      of LSPBUF back into the record where it was taken from on the
      previous call.  If it is the first time called, allocate
      storage for LSPBUF, and set a pointer accessible by the ABE
      subcommand to the address.

  2.  If there are no more columns of data defined by this LSU,
      free the buffer called LSPBUF, and set the pointer to it to
      null.  Otherwise, fill LSPBUF with the next column to
      process and return to the calling ABE subcommand.

Understanding the above process explains why, given a dataset of
40-character records containing -

             10        20        30
    1234567890123456789012345678901234567890

  1 Hi
  2 diddle
  3 diddle,
  4 the
  5 cat
  6 and
  7 the fiddle,

the subcommand -

  co 20. ol

doesn't appear to make any change to the dataset, but the subcommand -

  1.19 co 20. ol

produces -

             10        20        30
    1234567890123456789012345678901234567890

  1 Hi                 Hi
  2 diddle             diddle
  3 diddle,            diddle,
  4 the                the
  5 cat                cat
  6 and                and
  7 the fiddle,        the fiddle,

The subcommand "co 20. ol" requested that, for each record in the
dataset, a column of data containing all positions of the record
is to be copied into position 20 of that record.  The sequence of
events when the COPY subcommand is executed are as follows:

  1.  The COPY subcommand calls ABELSP for the next to-segment.
      ABELSP defines a new LSPBUF (call it LSPBUF_TO) and fills
      it with blanks from position 20 of the first record.

  2.  ABELSP is then called by COPY for the next from-segment.
      ABELSP defines a new LSPBUF (call it LSPBUF_FROM) and fills
      it with "Hi" followed by 38 blanks from the first record.

  3.  The COPY subcommand assigns the contents of LSPBUF_FROM to
      LSPBUF_TO.

  4.  ABELSP is then called by COPY for the next to-segment.
      ABELSP stores the contents of LSPBUF_TO at offset 20 in the
      first record, which now looks like -

        Hi                  Hi

      ABELSP then fills LSPBUF_TO with blanks from position 20 of
      the second record, and returns control to COPY.

  5.  COPY calls ABELSP for the next from-segment.  ABELSP stores
      the contents of LSPBUF_FROM back in the first record at
      offset 1 for a length of 40, and the record once again
      looks like -

        Hi

  6.  This continues until all columns have been processed, and
      the dataset ends up appearing unchanged.











