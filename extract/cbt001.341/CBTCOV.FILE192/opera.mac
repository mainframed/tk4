         TITLE '    O P E R A              '
************************************************************
*                                                          *
*        'OPERA' TSO COMMAND                               *
*                                                          *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. NOVEMBER 15 1979.
*        DATE UPDATED. AUGUST 1 1980.
*        ATTRIBUTES. RE-ENTRANT.
*        DESCRIPTION.
*            THIS TSO COMMAND EXECUTES AN OPERATOR COMMAND.
*            THE OPERATOR COMMAND IS TYPED ON THE SAME LINE
*            AS THE TSO COMMAND. FOR EXAMPLE
*               OPERA D TS,L
*            WOULD EXECUTE THE 'D J,L' COMMAND.
*
*            THE COMMAND CHECKS CHECKS THE USER'S 'OPER'
*            AUTHORITY BEFORE PROCEEDING.
*
*            IT MUST BE LINK-EDITED AS AN AUTHORIZED PROGRAM
*            AND ITS NAME MUST BE ADDED TO THE TABLE OF
*            AUTHORIZED COMMANDS IN IKJEFT02 CSECT IKJEFTE2.
         EJECT
OPERA    START
         USING *,R12
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'OPERA   '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH
@PROLOG  STM   14,12,12(R13)
         LR    R12,R15             1ST BASE REGISTER
         LA    R11,1(,R12)
         LA    R11,4095(,R11)      2ND BASE REGISTER
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               SET WORKAREA POINTER
         USING @DATA,R9
         SPACE
         ST    R13,4(,R9)
         ST    R9,8(,R13)
         LR    R13,R9
         SPACE
         XC    LINKAREA(8),LINKAREA
         EJECT
AUTHID   L     R1,16               CVTPTR
         L     R15,0(,R1)          TCB WORDS CVTTCBP
         L     R15,4(,R15)         CURRENT TCB
         L     R1,X'0B4'(,R15)     TCBJSCB
         L     R1,X'108'(,R1)      JSCBPSCB
         LTR   R1,R1               ANY PSCB?
         BZ    IMPLEXEC            NO - NOT A TIME SHARING SESSION
         USING PSCB,R1
         CLC   PSCBUSER(6),ASFI    ASFI05
         BE    *+12                YES, BYPASS OPER TEST
         TM    PSCBATR1,PSCBCTRL   OPERATOR
         BZ    IMPLEXEC            NO - BRANCH
         CLC   PSCBUSER(4),ASFI    SYSTEMS SUPPORT USERID
         BE    PROCEED             YES, BRANCH
         LA    R15,USERIDS
AUTHLOOP CLI   0(R15),0            END OF LIST?
         BE    IMPLEXEC            YES, NOT AUTHORIZED
         CLC   PSCBUSER(7),0(R15)
         BE    PROCEED
         LA    R15,8(,R15)         POINT TO NEXT USERID
         B     AUTHLOOP            GO CHECK IT
         DROP  R1                  PSCB
ASFI     DC    C'ASFI05'
USERIDS  DC    0D'0'               ALIGN FOR EASY ZAPS
         DC    8D'0'               ROOM FOR 8 USERIDS
         DC    H'0'                END OF USERID LIST
         SPACE
IMPLEXEC EQU   *
         L     R1,CPPLCBUF
         XC    2(2,R1),2(R1)       SET CBUF TO IMPLICIT EXEC
         L     R1,CPPLECT          GET ECT ADDRESS
         USING ECT,R1
         CLI   ECTSCMD,C' '        IS THIS A SUBCOMMAND
         BNE   *+10                YES - SAY SUBCOMMAND NOT FOUND
         MVC   ECTPCMD,=CL8'EXEC'  NO  - SAY COMMAND NOT FOUND
         DROP  R1                  ECT
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         L     R1,24(,R13)         RESTORE CPPL POINTER
         LA    R15,12(,R13)        POINT TO 2-WORD XCTL PARM
         XC    0(8,R15),0(R15)     CLEAR IT
         XCTL  (2,12),EP=EXEC,SF=(E,(15))
         EJECT
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
PROCEED  LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         EJECT
************************************************************
*                                                          *
*        SET CBUF OFFSET BACK ONE SPACE                    *
*                                                          *
************************************************************
         SPACE
*              THE PARSE SERVICE ROUTINE WILL NOT CORRECTLY
*              HANDLE THE SITUATION WHERE THE FIRST POSITIONAL
*              PARAMETER IS DEFINED WITH AN 'IKJIDENT SPACE' MACRO
*              UNLESS THE CBUF OFFSET POINTS TO A LEADING SPACE.
*              THIS OFFSET IS NORMALLY SET BY IKJSCAN TO POINT TO
*              THE FIRST OPERAND, SO WE MUST BACK IT UP ONE BYTE.
*              THE INSERT SUBCOMMAND (IKJEBEIS) OF EDIT, THE ONLY
*              IBM CODE THAT HAS THIS SITUATION, ALSO RESETS THE
*              CBUF OFFSET (THOUGH IT SETS IT BACK TO THE FIRST
*              SPACE FOLLOWING THE SUBCOMMAND NAME).
         SPACE
         L     R1,CPPLECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERAND?
         BO    ERRNOTXT            NO, BRANCH
         DROP  R1                  ECT
         SPACE
         L     R1,CPPLCBUF
         LA    R15,4(,R1)          POINT TO BUFFER
         AH    R15,2(,R1)          POINT TO OPERAND
         CLI   0(R15),C' '         IS IT A SPACE (NEVER IS)
         BE    OFFSETOK            YES, LEAVE OFFSET UNCHANGED
         BCTR  R15,0               BACK UP ONE
         CLI   0(R15),C' '         IS IT PRECEDED BY A SPACE
         BNE   OFFSETOK            NO, BRANCH
         LH    R15,2(,R1)          YES (ALWAYS), GET THE OFFSET
         BCTR  R15,0               REDUCE IT BY ONE
         STH   R15,2(,R1)          REPLACE THE OFFSET
OFFSETOK EQU   *
         SPACE
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
*        L     R0,=A(OPERAPCL)
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BNZ   ERRPARS
         EJECT
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
************************************************************
*                                                          *
*        BUILD THE SVC 34 PARAMETERS                       *
*                                                          *
************************************************************
         SPACE
         TM    STRING+6,X'80'      OPERAND PRESENT?
         BZ    ERRNOTXT            NO - BRANCH
         MVI   S34TEXT-1,C' '      BLANK
         MVC   S34TEXT,S34TEXT-1   BLANK THE TEXT AREA
         LH    R1,STRING+4         GET LENGTH OF OPERAND
         LTR   R1,R1               IS LENGTH VALID
         BNP   ERRNOTXT            NO, BRANCH
         LA    R14,256             MAX LENGTH
         CR    R1,R14              IS OPERAND TOO LONG?
         BH    ERRLONG             YES, BRANCH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         L     R14,STRING          POINT TO OPERAND
         B     *+10                BRANCH AROUND EXECUTED INSTR
         MVC   S34TEXT(0),0(R14)   (EXECUTED)
         EX    R1,*-6              EXECUTE THE ABOVE MVC
         LA    R14,S34TEXT(R1)     POINT TO LAST BYTE OF TEXT
         LA    R7,1(,R1)           TOTAL LENGTH IN R7
         SPACE
*              IF THIS IS ISSUED FROM BACKGROUND, THE LENGTH
*              OF THE TEXT INCLUDES SOME TRAILING BLANKS, SO
*              BACK UP TO THE LAST NONBLANK.
         SPACE
TRAIL    CLI   0(R14),C' '         IS IT A BLANK
         BNE   TRAILX              NO, GO APPEND ID
         BCTR  R7,0                REDUCE LENGTH
         BCT   R14,TRAIL           BACK UP 1 AND BRANCH
TRAILX   EQU   *
         SPACE
         LA    R5,S34PARM          SET UP R1 FOR SVC 34
         LA    R7,4(,R7)           LENGTH OF TEXT PLUS 4
         STH   R7,0(,R5)           S34LEN
         SLR   R0,R0               ZERO
         STH   R0,2(,R5)           S34ZERO
         L     R6,548              PSAAOLD, CURRENT ASCB
         LH    R6,36(,R6)          ASCBASID
         LTR   R4,R6               IS ASID ZERO (NEVER)
         BZ    CONSOLE             YES, BRANCH (NEVER)
         O     R4,=A(X'00008000')  SET ASID BIT ON
         B     *+8                 SKIP NEXT INSTRUCTION
CONSOLE  LA    R4,1                CONSOLE 1
*              R4 WILL BE LOADED INTO R0 AT SVC 34
*              R5 WILL BE LOADED INTO R1 AT SVC 34
         EJECT
************************************************************
*                                                          *
*        SEE IF MODESET IS GOING TO WORK                   *
*                                                          *
************************************************************
         SPACE
         TESTAUTH FCTN=1
         LTR   R15,R15             ARE WE AUTHORIZED
         BNZ   ERRAPF              NO, BRANCH
         SPACE
************************************************************
*                                                          *
*        ISSUE SVC 34                                      *
*                                                          *
************************************************************
         SPACE
         MODESET KEY=ZERO,MODE=SUP
         SPACE
         L     R15,548             PSAAOLD, CURRENT ASCB
         L     R3,60(,R15)         GET TSB ADDRESS
         LTR   R3,R3               IS THERE A TSB
         BZ    *+8                 NO, SKIP NEXT INSTRUCTION
         BAL   R8,BITONOFF         SET BUFFER FLAG BIT IN TSB
         SPACE
         LR    R0,R4
         LR    R1,R5
         SVC   34
         SPACE
         LR    R2,R15              SAVE RETURN CODE
         LTR   R3,R3               IS THERE A TSB
         BZ    *+10                NO, SKIP NEXT 2 INSTRUCTIONS
         SLR   R5,R5               SET SWITCH TO ZERO
         BAL   R8,BITONOFF         SET BUFFER FLAG BIT OFF
         SPACE
         MODESET KEY=NZERO,MODE=PROB
         SPACE
************************************************************
*                                                          *
*        TEST RETURN CODE AND TERMINATE                    *
*                                                          *
************************************************************
         SPACE
         LTR   R15,R2              WAS RC FROM SVC34 NORMAL
         BZ    EXIT0               YES, BRANCH
         ST    R15,S34RC
         LA    R1,S34RC            HEX INPUT
         LA    R0,4                HEX LENGTH
         LA    R15,MSG             HEX OUTPUT
         BAL   R14,HEX
         LA    R1,MSG              MESSAGE FOR TPUT
         LA    R0,8                MESSAGE LENGTH FOR TPUT
         NOPR  0                   ZAP WITH SVC 93 FOR TPUT
         B     EXIT12              EXIT RC 12
         EJECT
************************************************************
*                                                          *
*        SET ADDITIONAL BUFFER FLAG IN TSB                 *
*                                                          *
************************************************************
         SPACE
BITONOFF EQU   *
         BCR   0,R8                ZAP THIS TO DISABLE ROUTINE
         SPACE
*              THIS ROUTINE IS SIMILAR TO THAT USED IN THE
*              'OPERATOR' TSO COMMAND.  WHY THE LOCKS ARE OBTAINED
*              I DO NOT KNOW. THE SETLOCKS ARE CHANGED TO COMMENTS.
         SPACE
*        SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,RELATED=(TSB)
*        SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=USE,RELATED=(TSB)
         LTR   R5,R5               IS SWITCH ZERO
         BNZ   BITON               NO, GO SET BIT ON
         NI    41(R3),255-2        YES, SET BIT OFF
         B     *+8
BITON    OI    41(R3),2            TSB ADDITIONAL BUFFER FLAG
*        SETLOCK RELEASE,TYPE=CMS,REGS=USE,RELATED=(TSB)
*        SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=(TSB)
         BR    R8                  RETURN
         SPACE
************************************************************
*                                                          *
*        ERROR ROUTINES                                    *
*                                                          *
************************************************************
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTRAN-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
         SPACE
ERRNOTXT LA    R1,MSGMIS
         LA    R0,L'MSGMIS
         B     ERRM12
ERRLONG  LA    R1,MSGLNG
         LA    R0,L'MSGLNG         YES - BRANCH
         B     ERRM12
ERRAPF   LA    R1,MSGAPF
         LA    R0,L'MSGAPF         YES - BRANCH
         B     ERRM12
ERRPARS  LA    R1,MSGPAR
         LA    R0,L'MSGPAR
ERRM12   SVC   93                  TPUT
EXIT12   LA    R15,12              RC = 12
         B     EXIT
         SPACE
************************************************************
*                                                          *
*        TERMINATE                                         *
*                                                          *
************************************************************
         SPACE
EXIT0    SR    R15,R15
EXIT     LR    R2,R15              SAVE RETURN CODE
         SPACE
         IKJRLSA MYANS
         SPACE
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2              RESTORE RETURN CODE
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,16              CVTPTR
         L     R15,444(,R15)       CVTPUTL
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MSGR04   DC    C'SVC 34 ERROR RETURN CODE 4'
MSGR08   DC    C'SVC 34 ERROR RETURN CODE 8'
MSGR12   DC    C'SVC 34 ERROR RETURN CODE 12'
MSGR16   DC    C'SVC 34 ERROR RETURN CODE 16'
MSGR20   DC    C'SVC 34 ERROR RETURN CODE 20'
MSGMIS   DC    C'MISSING OPERAND'
MSGLNG   DC    C'OPERAND LENGTH ERROR - GREATER THAN 256'
MSGPAR   DC    C'ERROR IN PARSE SERVICE ROUTINE'
MSGAPF   DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'
HEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE
PCLADDR  DC    0D'0' END OF THIS CSECT, BEGIN PARSE PCL CSECT
         SPACE
************************************************************
*                                                          *
*         PARSE PCL CSECT AND PDL DSECT                    *
*                                                          *
************************************************************
         PRINT NOGEN
         SPACE
OPERAPCL IKJPARM
SPACE    IKJPOSIT SPACE
STRING   IKJPOSIT STRING,ASIS
         IKJENDP
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         PRINT GEN
         SPACE
@DATA    DSECT
         DS    18F
LINKAREA DS    2F
STATUS   DS    F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
S34RC    DS    F
S34PARM  DS    0F
S34LEN   DS    H
S34ZERO  DS    H
S34TEXT  DS    CL256
MSG      DS    CL9
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
*        IHAPSA
FLC      DSECT
PSALITA  EQU   FLC+X'2FC'
         SPACE
         IKJCPPL
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJUPT
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJECT
         SPACE 2
         IKJPPL
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
