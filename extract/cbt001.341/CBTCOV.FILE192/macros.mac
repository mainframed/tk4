./       ADD NAME=$#SVCKP
         MACRO
&NAME    $#SVCKP
         PRINT OFF
.*------------------------------------------------------------------*
.*                                                                  *
.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET OUT OF           *
.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *
.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *
.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *
.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *
.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *
.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *
.*       DIFFERENT PLACES.                                          *
.*                                                                  *
.*                                                                  *
.*------------------------------------------------------------------*
&NAME    L     R0,=C'ZZLQ'         SETUP R0
         L     R1,=F'0'            SETUP R1
         SVC   255                 GO DO IT
         PRINT ON
         MEND
./       ADD NAME=$#SVCKS
         MACRO
&NAME    $#SVCKS
         PRINT OFF
.*------------------------------------------------------------------*
.*                                                                  *
.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET YOURSELF INTO    *
.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *
.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *
.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *
.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *
.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *
.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *
.*       DIFFERENT PLACES.                                          *
.*                                                                  *
.*       JIM MARSHALL, CAPT, USAF                                   *
.*                                                                  *
.*------------------------------------------------------------------*
&NAME    L     R0,=C'ZZLQ'         SETUP R0
         L     R1,=F'1'            SETUP R1
         SVC   255                 GO DO IT
         PRINT ON
         MEND
./       ADD NAME=$EPILOG
         MACRO
&LABEL   $EPILOG &RC
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
./       ADD NAME=$PROLOG
         MACRO
&LABEL   $PROLOG &LV=0
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
./       ADD NAME=CONVERT
         MACRO
&NAME    CONVERT &EVENREG,&DIGITS,&DBLWD,&TYPE=DEC
.*
.*  THIS MACRO WILL PERFORM HEX TO HEX CHARACTER OR DECIMAL
.*  CHARACTER CONVERSIONS.  IT USES AN EVEN-ODD PAIR OF REGS
.*  AND A DOUBLE WORD OF STORAGE TO DO ITS CALCULATIONS.
.*
         GBLC  &CONV
         GBLC  &P
         LCLA  &N
         LCLA  &ODDREG
         LCLA  &LCLDIGS
&N       SETA  0
&ODDREG  SETA  &EVENREG+1
&LCLDIGS SETA  &DIGITS
         AIF   (T'&EVENREG NE 'N').ERR1
         AIF   (T'&DIGITS NE 'N').ERR2
         AIF   ('&NAME' EQ '').NONAME
&NAME    EQU   *
.NONAME  ANOP
         AIF   ('&TYPE' NE 'DEC').NODEC
         AIF   (&DIGITS GT 5).ERR4
         CVD   &EVENREG,&DBLWD
         UNPK  &DBLWD.(&DIGITS.),&DBLWD+5(3)
         OI    &DBLWD+&DIGITS-1,X'F0'
         MEXIT
.NODEC   ANOP
         AIF   (&DIGITS GT 4).ERR3
&CONV    SETC  'YES'   SO CPDATA KNOWS A HEX CONVERT WAS ISSUED
         AIF   (&LCLDIGS EQ 0).DONE
         SRDL  &EVENREG,4
         SRL   &ODDREG,4
&LCLDIGS SETA  &LCLDIGS-1
         AGOB  .NODEC
.DONE    ANOP
         ST    &ODDREG,&DBLWD
         TR    &DBLWD.(&DIGITS.),&P.CHARS
         MEXIT
.ERR1    ANOP
         MNOTE 8,'FIRST OPERAND NOT NUMERIC'
         MEXIT
.ERR2    ANOP
         MNOTE 8,'SECOND OPERAND NOT NUMERIC'
         MEXIT
.ERR3    ANOP
         MNOTE 8,'SECOND OPERAND > 4 ON HEX CONVERT'
         MEXIT
.ERR4    ANOP
         MNOTE 8,'SECOND OPERAND > 5 ON DEC CONVERT'
         MEND
./       ADD NAME=CPDATA
         MACRO
         CPDATA &LIST=YES
         GBLC  &GIOPL
         GBLC  &DAIRFL
         GBLC  &GPCL
         GBLC  &GDYN
         GBLC  &P
         GBLC  &GNRLF
         GBLC  &CONV
         PUSH  PRINT
         PRINT GEN
         AIF   ('&CONV' EQ '').NOCONV
&P.CHARS DC    C'0123456789ABCDEF'
.NOCONV  ANOP
         AIF   ('&GPCL' EQ 'NONE').NOPCLDC
&P.PCLAD DC    A(&GPCL)
.NOPCLDC ANOP
&P.DATA  DSECT ,              DYNAMIC STORAGE AREA
&P.SAVE  DS    18F            SAVE AREA
&P.ECB   DS    F              COMMAND PROCESSOR ECB
         AIF   ('&LIST' EQ 'YES').LST1
         PRINT NOGEN
.LST1    ANOP
         IKJCPPL
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         AIF   ('&GIOPL' EQ 'NO').NOIOPL
         IKJIOPL
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         PRINT GEN
&P.IOPL  DS    4A             INPUT/OUTPUT PARAM LIST
.NOIOPL  ANOP
         AIF   ('&GPCL' EQ 'NONE').NOPCL
         AIF   ('&LIST' EQ 'NO').NLST2
         PRINT GEN
         AGO   .LST2
.NLST2  ANOP
         PRINT NOGEN
.LST2    ANOP
         IKJPPL
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         PRINT GEN
&P.PPL   DS    7A             PARSE PARAM LIST
&P.ANS   DS    F              POINTER TO PDL (ANSWER PLACE)
.NOPCL   ANOP
         AIF   ('&GDYN' EQ 'NO').NODYN
         AIF   ('&LIST' EQ 'NO').NLST3
         PRINT GEN
         AGO   .LST3
.NLST3  ANOP
         PRINT NOGEN
.LST3    ANOP
         IEFZB4D0
         IEFZB4D2
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         PRINT GEN
&P.RBPTR DS    F              DYN ALLOC RB POINTER
&P.RB    DS    5F             DYN ALLOC REQUEST BLOCK
.NODYN   ANOP
         AIF   ('&GNRLF' EQ '').NOGNRLF
         AIF   ('&LIST' EQ 'NO').NLST4
         PRINT GEN
         AGO   .LST4
.NLST4   ANOP
         PRINT NOGEN
.LST4    ANOP
         IKJEFFGF GFDSECT=YES
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         PRINT GEN
&P.GNRLF DS    F              PTR TO GNRLFAIL CONTROL BLOCK
         DS    3F             GNRLFAIL CONTROL BLOCK
         DS    H
         DS    2X
         DS    2F
         DS    2H
         DS    4F
.NOGNRLF ANOP
         AIF   ('&DAIRFL' EQ '').NODF
         AIF   ('&LIST' EQ 'NO').NLST5
         PRINT GEN
         AGO   .LST5
.NLST5   ANOP
         PRINT NOGEN
.LST5    ANOP
         IKJEFFDF DFDSECT=YES
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         PRINT GEN
&P.DFPL  DS    5A             DAIRFAIL PARAMETER LIST
&P.DFRC  DS    F              SERVICE ROUTINE RETURN CODE
&P.DFID  DS    H              DAIRFAIL ID
&P.FO2PT DS    F              DAIRFAIL IKJEFF02 POINTER
.NODF    ANOP
         MNOTE *,'       CVT    DSECT=YES,LIST=NO'
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         POP   PRINT
&P.DATA  DSECT ,              RESUME ORIGINAL DSECT
         MEND
./       ADD NAME=CPEND
         MACRO
         CPEND
         GBLC  &P
&P.LEN   EQU   *-&P.DATA
         MEND
./       ADD NAME=CPENTER
         MACRO
&CPNAME  CPENTER &PARM=11,        PARAMETER REGISTER                   X
               &BASE=12,          PROGRAM BASE REGISTER                X
               &WORKID=CPWORK,    NAME OF COMMAND PROCESSOR WORKAREA   X
               &SP=0,             SUBPOOL FOR WORKAREA                 X
               &WRKLN=72+32,      LENGTH OF WORKAREA                   X
               &EXIT=EXIT,        ADDR. OF EXIT                        X
               &PCL=PCL           NAME OF PARSE CONTROL LIST
&CPNAME  RENTER PARM=&PARM,BASE=&BASE,WORKID=&WORKID,SP=&SP,           X
               WRKLN=&WRKLN,PRMSECT=PARMS
         SPACE 5
         MNOTE *,'**** R&PARM POINTS TO PARM LIST'
         MNOTE *,'**** R&BASE IS THE PROGRAM BASE'
         MNOTE *,'**** R13 POINTS TO THE WORKAREA'
         EJECT
*****
*****    INITILIZE PPL
*****
         SPACE 5
         LM    2,5,CPPLCBUF       GET PARMS
         ST    2,PPLCBUF          STORE
         ST    3,PPLUPT           STORE
         LA    4,WORKECB          GET ECB ADDR.
         ST    5,PPLECT           STORE ECT ADDR.
         ST    4,PPLECB           STORE ECB ADDR
         SR    5,5                GET A ZERO
         ST    5,WORKECB          SET ZERO ECB
         L     4,=V(&PCL)         ADDR. OF PARM
         ST    4,PPLPCL           STORE IN PARM LIST
         LA    4,PPLANS           GET ADDR. OF ANSWER PLACE
         ST    4,PPLANSP          STORE IN PARM LIST
         EJECT
*****
*****    NOW INVOKE PARSE FOR PARAMETERS
*****
         SPACE 5
         LA    1,PPLUPT           GET ADDR. OF PARM LIST
         LINK  EP=IKJPARS         LINK TO PARSE ROUTINE
         LTR   15,15              BAD RETURN
         BE    CONTINUE           NO ... CONTINUE PROCESSING
&EXIT    REXIT RC=(15)            RETURN
         EJECT
PARMS    DSECT
CPPLCBUF DS    A                  ADDR. OF COMMAND BUFFER
CPPLUPT  DS    A                  ADDR. USER PROFILE TABLE
CPPLPSCB DS    A                  ADDR. OF ECB
CPPLECT  DS    A                  ADDR. OF ECT
         SPACE 5
&WORKID  DSECT
         DS    18F                SAVEAREA
PPLUPT   DS    A                  ADDR. OF UPT
PPLECT   DS    A                  ADDR. OF ECT
PPLECB   DS    A                  ADDR. OF ECB
PPLPCL   DS    A                  ADDR. OF PCL
PPLANSP  DC    A(PPLANS)
PPLCBUF  DS    A                  ADDR. OF COMMAND BUFFER
PPLUWA   DS    A                  ADDR. OF USER WORKAREA
PPLANS   DS    A                  ADDR. OF ANSWER PLACE
WORKECB  DS    A                  ECB
&CPNAME  CSECT ,                  RENTER PROGRAM CSECT
CONTINUE DS    0H                 CONTINUE WITH CP
         MEND
./       ADD NAME=CPENTRY
         MACRO
&L       CPENTRY   &ID=*,&STORAGE=@STORAGE,&SIZE=@SIZE,&SPN=,          +
               &PLBASE=R9,&PL=CPPL
.* GENE CZARCINSKI,  19MAY73
&L       START     0
         REGS
         SAVE      (14,12),,&ID
         LR        R12,R15             INIT PGM BASE REG
         USING     &L,R12
         LR        &PLBASE,R1          INIT PARM LIST BASE REG
         USING     &PL,&PLBASE
         GETMAIN   R,LV=72+&SIZE,SP=&SPN
         ST        R13,4(R1)           INIT/LINK SAVE AREAS
         ST        R1,8(R13)
         LR        R13,R1
         LA        R11,72(R1)          INIT STORAGE BASE REG
         USING     &STORAGE,R11
         MEND      CPENTRY
./       ADD NAME=CPEXIT
         MACRO
&L       CPEXIT    &SIZE=@SIZE,&RC=0,&SPN=
.* GENE CZARCINSKI,  19MAY73
** EXIT FROM A COMMAND PROCESSOR MODULE
&L       LR        R1,R13              A(GOTTEN CORE)
         L         R13,4(R13)          RESTORE OLD SAVEAREA PNTR
         FREEMAIN  R,LV=72+&SIZE,A=(1),SP=&SPN
         LA        R15,&RC             LOAD RC INTO REG 15
         RETURN    (14,12),T,RC=(15)
         MEND      CPEXIT
./       ADD NAME=CPINIT
         MACRO
&NAME    CPINIT &IOPL=NO,&PCL=NONE,&DYN=NO,&PREFIX=IPG
         GBLC  &GIOPL
         GBLC  &GPCL
         GBLC  &GDYN
         GBLC  &P
         LCLA  &A
.*   CHECK THE VALIDITY OF THE PREFIX (MUST BE <= 3 CHARS)
         AIF   (K'&PREFIX LE 3).PFXOK
         MNOTE 8,'PREFIX > 3 CHARS, SHORTENED'
&P       SETC  '&PREFIX'(1,3)
         AGO   .PFXEND
.PFXOK   ANOP
&P       SETC  '&PREFIX'
.PFXEND  ANOP
&GIOPL   SETC  '&IOPL'
&GPCL    SETC  '&PCL'
&GDYN    SETC  '&DYN'
&NAME    CSECT
.*   GENERATE REG EQUATES
&A       SETA  0
.LOOP    ANOP
R&A      EQU   &A
&A       SETA  &A+1
         AIF   (&A LT 16).LOOP
.*   GENERATE THE INITIALIZATION CODE
         MNOTE *,'       SAVE  (14,12),,*'
         SAVE  (14,12),,*
         LR    R10,R15        INITIALIZE BASE REG
         USING &NAME,R10      ESTABLISH ADDRESSIBILITY
         MNOTE *,'       GETMAIN R,LV=&P.LEN,SP=0'
         GETMAIN R,LV=&P.LEN,SP=0
         ST    R13,4(R1)     SAVE THE BACK CHAIN
         ST    R1,8(R13)
         LR    R13,R1         R13 => DYNAMIC STORAGE
         USING &P.DATA,R13
******************************************
*  INITIALIZE THE CONTROL BLOCKS         *
******************************************
         L     R1,4(R13)
         L     R1,24(R1)      R1 => CPPL
         USING CPPL,R1
         AIF   ('&IOPL' EQ 'NO').NOIOPL
*  FILL IN THE UPT, ECT, AND ECB FIELDS OF THE IOPL
.*   AND LEAVE THE POINTER TO THE PARM BLOCK EMPTY
         MVC   &P.IOPL+(IOPLUPT-IOPL)(4),CPPLUPT
         MVC   &P.IOPL+(IOPLECT-IOPL)(4),CPPLECT
         XC    &P.ECB(4),&P.ECB   ZERO THE ECB
         LA    R2,&P.ECB
         ST    R2,&P.IOPL+(IOPLECB-IOPL)
.NOIOPL  ANOP
         AIF   ('&PCL' EQ 'NONE').NOPCL
*  FILL IN ALL THE FIELDS OF THE PARSE PARAMETER LIST (PPL)
         MVC   &P.PPL+(PPLUPT-PPL)(4),CPPLUPT
         MVC   &P.PPL+(PPLECT-PPL)(4),CPPLECT
         LA    R2,&P.ECB
         ST    R2,&P.PPL+(PPLECB-PPL)
         L     R2,&P.PCLAD
         ST    R2,&P.PPL+(PPLPCL-PPL)
         LA    R2,&P.ANS
         ST    R2,&P.PPL+(PPLANS-PPL)
         MVC   &P.PPL+(PPLCBUF-PPL),CPPLCBUF
         XC    &P.PPL+(PPLUWA-PPL),&P.PPL+(PPLUWA-PPL)
.NOPCL   ANOP
         AIF   ('&DYN' EQ 'NO').NODYN
*  FILL IN THE DYNAMIC ALLOCATION REQUEST BLOCK POINTER
         LA    R2,&P.RB
         ST    R2,&P.RBPTR
         OI    &P.RBPTR,S99RBPND
.NODYN   ANOP
         DROP  R1
         EJECT
         MEND
./       ADD NAME=CVDT
         MACRO
&L       CVDT  &O
.*
&L       XR    R15,R15
         IC    R15,DS1&O
         CVD   R15,DWD
         ICM   R14,B'0011',DWD+L'DWD-2
         ICM   R15,B'0011',DS1&O+1
         CVD   R15,DWD
         SRL   R14,4
         STC   R14,DWD+5
         ED    FMT&O,DWD+5
         SPACE
.*
         MEND
./       ADD NAME=CVRT
         MACRO
&L       CVRT  &O,&ADD=0,&OFFSET=0
.*
&L       XR    R15,R15
         LA    R1,1
         SLA   R1,(L'DS1&O-&OFFSET)
         BCTR  R1,0
         EX    R1,*+L'*+4
         B     *+L'*+4
         ICM   R15,*-*,DS1&O+&OFFSET
.*
         AIF   (&ADD EQ 0).CVD
.*
         LA    R15,&ADD.(R15)
.*
.CVD     ANOP
.*
         CVD   R15,DWD
         ED    FMT&O,DWD+8-((L'FMT&O+1)/2)
         SPACE
.*
         MEND
./       ADD NAME=DA08BLD
         MACRO
&L     DA08BLD &DSN,&VOLID,&DISP=(SHR,KEEP,KEEP)
.*
.*   DAO8BLD IS USED TO COMPLETE A CODE 08 DAPB FROM PDE'S
.*   RETURNED FROM IKJPARS FOR DSNAME, VOLUME SERIAL, AND
.*   ALLOCATION DATA (NOT YET SUPPORTED).
.*   DA08BLD ASSUMES THE ADDRESSABILITY OF THE DAPB VIA THE
.*   FIELD NAMES DEFINED BY THE IKJDAP08 MACRO.
.*
*
&L       L     R1,&DSN+0
         L     R15,DA08PDSN
         LH    R14,&DSN+4
         STH   R14,0(R15)
         BCTR  R14,0
         EX    R14,*+L'*+4
         B     *+L'*+6
         MVC   2(*-*,R15),0(R1)
         NI    DA08CTL,X'FF'-DA08UID
         TM    &DSN+6,B'01000000'
         BNZ   *+L'*+4
         OI    DA08CTL,DA08UID
         SPACE
         TM    &DSN+14,B'10000000'
         BZ    *+L'*+4+4+2+4+4+6
         LH    R14,&DSN+12
         L     R1,&DSN+8
         BCTR  R14,0
         EX    R14,*+L'*+4
         B     *+L'*+6
         MVC   DA08MNM(*-*),0(R1)
         SPACE
         TM    &DSN+22,B'10000000'
         BZ    *+L'*+4+4+2+4+4+6
         LH    R14,&DSN+20
         L     R1,&DSN+16
         BCTR  R14,0
         EX    R14,*+L'*+4
         B     *+L'*+6
         MVC   DA08PSWD(*-*),0(R1)
         SPACE
         MVI   DA08DSP1,DA08&DISP(1)
         MVI   DA08DPS2,DA08&DISP(2)
         MVI   DA08DPS3,DA08&DISP(3)
         SPACE
.VOLID   AIF   (T'&VOLID EQ 'O').NEW
.*
         TM    &VOLID+6,B'10000000'
         BZ    *+L'*+4+4+4+4+2+4+4+6
         L     R1,&VOLID+0
         LH    R14,&VOLID+4
         CLI   0(R1),C'*'
         BE    *+L'*+2+4+4+6
         BCTR  R14,0
         EX    R14,*+L'*+4
         B     *+L'*+6
         MVC   DA08SER(*-*),0(R1)
         SPACE
.*
.NEW     AIF   (('&DISP(1)' NE 'NEW') AND ('&DISP(1)' NE 'MOD')).END
.*       MNOTE 4,'DA08BLD - DISP=NEW NOT YET SUPPORTED'
.END     MEND
./       ADD NAME=DCS
         MACRO
&NAME    DCS
.**********************************************************************
.*                                                                    *
.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN. JANUARY 8 1981.                               *
.*        DATE UPDATED. MARCH 18 1982. (ROW AND COL IN PARENS)        *
.*                                                                    *
.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *
.*                                                                    *
.*        SAMPLE                                                      *
.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *
.*                                                                    *
.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *
.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *
.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *
.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *
.*           SO YOU DONT HAVE TO KNOW THE HEX CODES FOR THEM,         *
.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *
.*           (A SET OF RESERVED NAMES) SO YOU DONT HAVE TO KNOW       *
.*           THE HEX CODES FOR THEM.                                  *
.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *
.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *
.*                                                                    *
.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *
.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *
.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *
.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *
.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *
.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *
.*                                                                    *
.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *
.*        ANY COMBINATION OF THE FOLLOWING.                           *
.*                                                                    *
.*        .  AN ORDER.                                                *
.*           VALID ORDERS ARE: SBA, SF, RTA, IC, PT, EUA.             *
.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *
.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *
.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *
.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *
.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *
.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *
.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *
.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *
.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *
.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *
.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *
.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *
.*           THE ORIGINAL VERSION OF THIS MACRO.                      *
.*        .  AN ATTRIBUTE BYTE.                                       *
.*           VALID ATTRIBUTE BYTES ARE:                               *
.*           UNPLO -  UNPROTECTED NORMAL INTENSITY                    *
.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *
.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *
.*           PROLO  - PROTECTED NORMAL INTENSITY                      *
.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *
.*           PROHI  - PROTECTED HIGH INTENSITY                        *
.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *
.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *
.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *
.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *
.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *
.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *
.*                                                                    *
.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *
.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *
.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *
.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *
.*                                                                    *
.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *
.*        SCREEN SIZE OF 24 ROWS BY 80 COLUMNS. FOR SCREENS           *
.*        OF OTHER DIMENSIONS (43 BY 80, 12 BY 40) THE MACRO          *
.*        NEEDS ONLY A FEW CHANGES.                                   *
.*                                                                    *
.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *
.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *
.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *
.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &R,&C,&P,&Q
         LCLA  &AN,&AS,&AL
         LCLB  &B,&NUMERIC,&INTEGER
         LCLC  &T(64)
         LCLC  &N,&ROW,&COL
         LCLC  &CS,&STRING
&T(1)    SETC  '40'
&T(2)    SETC  'C1'
&T(3)    SETC  'C2'
&T(4)    SETC  'C3'
&T(5)    SETC  'C4'
&T(6)    SETC  'C5'
&T(7)    SETC  'C6'
&T(8)    SETC  'C7'
&T(9)    SETC  'C8'
&T(10)   SETC  'C9'
&T(11)   SETC  '4A'
&T(12)   SETC  '4B'
&T(13)   SETC  '4C'
&T(14)   SETC  '4D'
&T(15)   SETC  '4E'
&T(16)   SETC  '4F'
.*
&T(17)   SETC  '50'
&T(18)   SETC  'D1'
&T(19)   SETC  'D2'
&T(20)   SETC  'D3'
&T(21)   SETC  'D4'
&T(22)   SETC  'D5'
&T(23)   SETC  'D6'
&T(24)   SETC  'D7'
&T(25)   SETC  'D8'
&T(26)   SETC  'D9'
&T(27)   SETC  '5A'
&T(28)   SETC  '5B'
&T(29)   SETC  '5C'
&T(30)   SETC  '5D'
&T(31)   SETC  '5E'
&T(32)   SETC  '5F'
.*
&T(33)   SETC  '60'
&T(34)   SETC  '61'
&T(35)   SETC  'E2'
&T(36)   SETC  'E3'
&T(37)   SETC  'E4'
&T(38)   SETC  'E5'
&T(39)   SETC  'E6'
&T(40)   SETC  'E7'
&T(41)   SETC  'E8'
&T(42)   SETC  'E9'
&T(43)   SETC  '6A'
&T(44)   SETC  '6B'
&T(45)   SETC  '6C'
&T(46)   SETC  '6D'
&T(47)   SETC  '6E'
&T(48)   SETC  '6F'
.*
&T(49)   SETC  'F0'
&T(50)   SETC  'F1'
&T(51)   SETC  'F2'
&T(52)   SETC  'F3'
&T(53)   SETC  'F4'
&T(54)   SETC  'F5'
&T(55)   SETC  'F6'
&T(56)   SETC  'F7'
&T(57)   SETC  'F8'
&T(58)   SETC  'F9'
&T(59)   SETC  '7A'
&T(60)   SETC  '7B'
&T(61)   SETC  '7C'
&T(62)   SETC  '7D'
&T(63)   SETC  '7E'
&T(64)   SETC  '7F'
.*
&N       SETC  '&NAME'
&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS
&AS      SETA  0
&B       SETB  0 FALSE
.EACH    AIF   (&AN EQ 0).EPILOG
&AS      SETA  &AS+1
&CS      SETC  '&AS'
&AL      SETA  K'&SYSLIST(&AS)
         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT
         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR
&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')
         AIF   (&NUMERIC AND &INTEGER).ROWCOL
         AIF   (NOT &B).ROWCOLX
         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'
&B       SETB  0 FALSE
.ROWCOLX ANOP
&STRING  SETC  '&SYSLIST(&AS)'
.*             ORDERS
         AIF   ('&STRING' EQ 'SBA').SBA
         AIF   ('&STRING' EQ 'SF').SF
         AIF   ('&STRING' EQ 'RTA').RTA
         AIF   ('&STRING' EQ 'IC').IC
         AIF   ('&STRING' EQ 'PT').PT
         AIF   ('&STRING' EQ 'EUA').EUA
.*             ATTRIBUTES
         AIF   ('&STRING' EQ 'UNPLO').UNPLO
         AIF   ('&STRING' EQ 'UNPHI').UNPHI
         AIF   ('&STRING' EQ 'UNPNP').UNPNP
         AIF   ('&STRING' EQ 'PROLO').PROLO
         AIF   ('&STRING' EQ 'PROLOS').PROLOS
         AIF   ('&STRING' EQ 'PROHI').PROHI
         AIF   ('&STRING' EQ 'PROHIS').PROHIS
.*             CONSTANTS
.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS
.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.
.DC      ANOP
&N       DC    &STRING
         AGO   .NEXT
.SBA     ANOP
&N       DC    X'11'               SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
&N       DC    X'1D'               START FIELD
         AGO   .NEXT
.RTA     ANOP
&N       DC    X'3C'               REPEAT TO ADDRESS
         AGO   .NEXT
.IC      ANOP
&N       DC    X'13'               INSERT CURSOR
         AGO   .NEXT
.PT      ANOP
&N       DC    X'05'               PROGRAM TAB
         AGO   .NEXT
.EUA     ANOP
&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS
         AGO   .NEXT
.UNPLO   ANOP
&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY
         AGO   .NEXT
.UNPHI   ANOP
&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY
         AGO   .NEXT
.UNPNP   ANOP
&N       DC    X'4C'               UNPROTECTED NO-DISPLAY
         AGO   .NEXT
.PROLO   ANOP
&N       DC    X'60'               PROTECTED NORMAL INTENSITY
         AGO   .NEXT
.PROLOS  ANOP
&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP
         AGO   .NEXT
.PROHI   ANOP
&N       DC    X'E8'               PROTECTED HIGH INTENSITY
         AGO   .NEXT
.PROHIS  ANOP
&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP
         AGO   .NEXT
.**********************************************************************
.PAIR    ANOP
         AIF   (N'&SYSLIST(&AS) NE 2).PERR1
&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&R       SETA  &SYSLIST(&AS,1)
&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&C       SETA  &SYSLIST(&AS,2)
         AIF   (&R LT 1 OR &R GT 24).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'
         MEXIT
.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'
         MEXIT
.**********************************************************************
.ROWCOL  ANOP
         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED
&R       SETA  &SYSLIST(&AS)
&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED
         AGO   .NEXTR
.COL     ANOP
&C       SETA  &SYSLIST(&AS)
&B       SETB  0 FALSE             RESET SWITCH
         AIF   (&R LT 1 OR &R GT 24).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 24'
         AGO   .NEXT
.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'
.NEXT    ANOP
&N       SETC  ''                  TURN OFF NAME
.NEXTR   ANOP
&AN      SETA  &AN-1
         AGO   .EACH
.EPILOG  ANOP
         MEND
./       ADD NAME=DCSPARS
         MACRO
&NAME    DCSPARS &OPERAND
.**********************************************************************
.*                                                                    *
.*        DCSPARS - INNER MACRO FOR THE 'DCS' MACRO                   *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN. MARCH 17 1982.                                *
.*        DATE UPDATED. MARCH 17 1982.                                *
.*                                                                    *
.*        THIS MACRO TAKES A OPERAND THAT IS 2 NUMBERS IN             *
.*        PARENTHESES AND RETURNS THE TWO NUMBERS IN GLOBALS          *
.*                                                                    *
.*        THIS IS NECESSARY BECAUSE THE DCS MACRO IS                  *
.*        REFERENCING ITS OPERANDS AS &SYSLIST(N), AND IF             *
.*        ONE OF THE OPERANDS IS A LIST OF VALUES IN PARENTHESES      *
.*        YOU WOULD THINK THAT YOU COULD REFERENCE THE FIRST VALUE    *
.*        AS &SYSLIST(N)(1) AND THE SECOND AS &SYSLIST(N)(2).         *
.*        BUT NOOOOOOOO, THE ASSEMBLER WONT ALLOW THAT.               *
.*        SO THE DCS MACRO ISSUES THIS MACRO WITH &SYSLIST(N)         *
.*        AS THE OPERAND, AND THIS MACRO CAN REFER TO THE             *
.*        VALUES WITHIN THE PARENTHESES BECAUSE IT DOES NOT           *
.*        USE &SYSLIST(N) BUT JUST &OPERAND.                          *
.*                                                                    *
.**********************************************************************
.*
         GBLC  &GDCSROW,&GDCSCOL
&GDCSROW SETC  '&OPERAND(1)'
&GDCSCOL SETC  '&OPERAND(2)'
         MEND
./       ADD NAME=EQUENT
         MACRO
&L      EQUENT &CSECT=,&ID=*,&BASEREG=12,&SA=*,                        +
               &ENTRY=NO,&SP=0,                                        +
               &XTRA=0,&XTRAREG=,&XTRAUSE=
.*
.* GENE CZARCINSKI,  05OCT73
.*
         AIF   ('&CSECT' EQ '').X0
&CSECT   CSECT ,
.X0      AIF   ('&L' NE '').X1
$$$&SYSNDX DC  0H'0'
.X1      AIF   ('&ENTRY' EQ 'NO').X1X
         AIF   ('&ENTRY' EQ 'YES').X1A
         MNOTE 8,'---ONLY ENTRY=YES/NO VALID'
         MEXIT
.X1A     AIF   ('&L' NE '').X1B
         MNOTE 8,'---A LABEL MUST BE SPECIFIED WHEN ENTRY=YES'
         MEXIT
.X1B     ENTRY &L
.X1X     ANOP
&L       SAVE  (14,12),,&ID
         LR    &BASEREG,15   ESTABLISH THE PGM BASE REGISTER
         AIF   ('&L' NE '').X3
         USING $$$&SYSNDX,&BASEREG     AND ADDRESSABILITY.
         AGO   .X4
.X3      USING &L,&BASEREG   AND ADDRESSABILITY.
.*
.X4      AIF   ('&SA' NE '').X5
         MNOTE *,'---REENTRANT ENTRY CODE GENERATED.'
         GETMAIN R,LV=72+&XTRA,SP=&SP
         AIF   ('&XTRAREG' EQ '').X7
         LA    &XTRAREG,72(0,1)        A(END OF SAVE AREA)
         AIF   ('&XTRAUSE' EQ '').X7
         USING &XTRAUSE,&XTRAREG
         AGO   .X7
.X5      MNOTE *,'---NON-REENTRANT ENTRY CODE BEING GENERATED.'
         AIF   ('&SA' EQ '*').X6
         LA    1,&SA         ADDR OF SAVE AREA
         AGO   .X7
.X6      CNOP  4,8
         BAL   1,$$$&SYSNDX.A          BRANCH AROUND
         DC    18F'0'        INLINE SAVE AREA
.*
$$$&SYSNDX.A DC 0H'0'
.X7      ANOP
         LR    15,13
         ST    1,8(0,13)     LINK THE SAVE AREAS
         ST    13,4(0,1)
         LR    13,1          ADDR OF NEW SAVE AREA
         LM    15,1,16(15)             RESTORE USED REGISTERS
         MEND  ENTER
./       ADD NAME=EQUEXT
         MACRO
&L      EQUEXT &RESTORE=(14,12),&RC=0,&FREE=NO,&XTRA=0,&SP=0
.*
.* GENE CZARCINSKI,  08OCT73
.*
&L       DC    0H'0'
         AIF   ('&FREE' EQ 'NO').X5
         AIF   ('&FREE' EQ 'YES').X3
         MNOTE 8,'---ONLY FREE=YES/NO VALID'
         MEXIT
.*
.X3      LR    1,13          POINTER TO GOTTEN CORE
         L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA
         AIF   ('&RC' NE '(15)').X4
         ST    15,16(0,13)             SAVE CONTENTS OVER FREEMAIN.
.X4      FREEMAIN R,A=(1),LV=72+&XTRA,SP=&SP
         AIF   ('&RC' NE '(15)').X6
         L     15,16(0,13)             RESTORE
         AGO   .X6
.*
.X5      L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA
.X6      AIF   ('&RC' EQ '(15)').X7
         LA    15,&RC        LOAD RETURN CODE INTO REG 15
.X7      RETURN &RESTORE,T,RC=(15)
         MEND  EXIT
./       ADD NAME=EQUREG
         MACRO
         EQUREG
R0       EQU   0                   <>
R1       EQU   1                 <<  >>
R2       EQU   2               <<      >>
R3       EQU   3             <<          >>
R4       EQU   4           <<              >>
R5       EQU   5         <<                  >>
R6       EQU   6       <<                      >>
R7       EQU   7     <<    SYMBOLIC REGISTERS    >>
R8       EQU   8       <<                      >>
R9       EQU   9         <<                  >>
R10      EQU   10          <<              >>
R11      EQU   11            <<          >>
R12      EQU   12              <<      >>
R13      EQU   13                <<  >>
R14      EQU   14                  <>
R15      EQU   15
         MEND
./       ADD NAME=EQUREGS
         MACRO
         EQUREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
./       ADD NAME=GNRLFAIL
         MACRO
&NAME    GNRLFAIL &RET=,&TYPE=,&GFCB=,&CPPL=,&KEYN08=NO
.*
.*  THIS MACRO IS USED TO ISSUE ERROR MESSAGES FOR CERTAIN
.*  FAILURES.  IT IS ASSUMED THAT ON ENTRY R15 CONTAINS
.*  EITHER THE ERROR RETURN CODE OR ABEND CODE. THIS ROUTINE
.*  WILL DESTROY R1.
.*
         GBLC  &P
         GBLC  &GNRLF
         LCLC  &CALLID
         LCLC  &GNRLFCB
         LCLC  &LCLLBL
         LCLC  &GFBITS
         AIF   ('&TYPE' EQ '').ERR1   MUST SUPPLY TYPE
         AIF   ('&RET' EQ '').SYSLBL
&LCLLBL  SETC  '&RET'
         AGO   .CONT1
.SYSLBL  ANOP
&LCLLBL  SETC  '&P'.'&SYSNDX'
.CONT1   ANOP
         AIF   ('&GFCB' EQ '').NOGFCB
&GNRLFCB SETC  '&GFCB'
         AGO   .CONT2
.NOGFCB  ANOP
&GNRLFCB SETC  '&P'.'GNRLF'
&GNRLF   SETC  'YES'  SO CPDATA ALLOCATES CONTROL BLOCKS
.CONT2   ANOP
.*  DETERMINE THE CORRECT GFBITS SETTING BASED UPON THE
.*  GNRLFAIL TYPE REQUEST AND THE PROTECT KEY
&GFBITS  SETC  '0'
         AIF   ('&TYPE' NE 'SSREQ' OR '&KEYN08' NE 'YES').CONT4
&GFBITS  SETC  'GFKEYN08+GFSUBSYS'
         AGO   .CONT6
.CONT4   ANOP
         AIF   ('&TYPE' NE 'SSREQ').CONT5
&GFBITS  SETC  'GFSUBSYS'
         AGO   .CONT6
.CONT5   ANOP
         AIF   ('&KEYN08' NE 'YES').CONT6
&GFBITS  SETC  'GFKEYN08'
.CONT6   ANOP
         AIF   ('&NAME' EQ '').NONAME
&NAME    EQU   *
.NONAME  ANOP
         AIF   ('&TYPE' NE 'PARSE').NOPARS
         LA    R1,4           IF PARSE ERROR CODE IS 4 OR 20,
         CR    R15,R1         ERROR MESSAGE HAS BEEN ISSUED
         BE    &LCLLBL
         LA    R1,20
         CR    R15,R1
         BE    &LCLLBL
.NOPARS  ANOP
         LA    R1,&GNRLFCB+4   R1 => GNRLFAIL CONTROL BLOCK
         ST    R1,&GNRLFCB
         USING GFCBPTR,R1
         AIF   ('&TYPE' EQ 'SSREQ').SSREQT    DON'T ZERO PTR IF SSREQ
         XC    GFCBPTR,GFCBPTR  ZERO THE OPTIONAL POINTERS
         AGO   .CONT3
.SSREQT  ANOP
         ST    R0,GFCBPTR     R0 => SSOB
.CONT3   ANOP
         XC    GF02PTR,GF02PTR   ZERO PTR TO TSO MESSAGE ISSUER
         ST    R15,GFRCODE   STORE THE RETURN OR ABEND CODE
         AIF   ('&TYPE' NE 'PUTLINE').NOPUTL
&CALLID  SETC  'GFPUTL'
         AGO   .LINK
.NOPUTL  ANOP
         AIF   ('&TYPE' NE 'PARSE').NOPRS
&CALLID  SETC  'GFPARSE'
         AGO   .LINK
.NOPRS   ANOP
         AIF   ('&TYPE' NE 'ABEND').NOABND
&CALLID  SETC  'GFABEND'
         AGO   .LINK
.NOABND  ANOP
         AIF    ('&TYPE' NE 'SSREQ').ERR3
&CALLID  SETC  'GFSSREQ'
.LINK    ANOP
         LA    R15,&CALLID   SET THE FALURE CODE INTO
         STH   R15,GFCALLID   THE CONTROL BLOCK
         MVI   GFBITS,&GFBITS
         XC    GFRESV1,GFRESV1
         AIF   ('&CPPL' NE '').CPPL
         L     R15,4(R13)
         L     R15,24(R15)    R15 => CPPL
         AGO   .NOCPPL
.CPPL    ANOP
         L     R15,&CPPL      R15 => CPPL
.NOCPPL  ANOP
         ST    R15,GFCPPLP
         XC    GFDSNLEN,GFDSNLEN
         XC    GFPGMNL,GFPGMNL     ZERO THE PROGRAM NAME LENGTH
         XC    GFDSNP,GFDSNP
         XC    GFPGMNP,GFPGMNP
         XC    GFRESV2,GFRESV2
         XC    GFRESV3,GFRESV3
         DROP  R1
         LA    R1,&GNRLFCB
         LINK  EP=IKJEFF19
         AIF   ('&RET' EQ '').GENLBL
         B     &LCLLBL           GO TO ERROR LABEL
         AGO   .EXIT
.GENLBL  ANOP
         AIF   ('&TYPE' NE 'PARSE').EXIT
&LCLLBL  DS    0H
.EXIT    ANOP
         MEXIT
.ERR1    ANOP
         MNOTE 8,'TYPE PARAMETER MISSING ON GNRLFAIL'
         DC    F'0'
         MEXIT
.ERR3    ANOP
         MNOTE 8,'INVALID TYPE ON GNRLFAIL'
         DC    F'0'
         MEXIT
         MEND
./       ADD NAME=IKJEFUAD
*          %GOTO  UADGO;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       I K J E F U A D
*                UADS STRUCTURE MAPPING MACR0
*
*    USE OF THE COMPILE VARIABLES MAKES POSSIBLE THE SELECTIVE
*    INCLUSION OF THE INDIVIDUAL AREAS OF MAPPING
*
* STATUS -- CHANGE LEVEL --   02-000               12-15-1972
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/*
*    ERRORS IN THIS MACRO HAVE BEEN FIXED BY:
*       BILL GODFREY, PLANNING RESEARCH CORPORATION
*       PRC COMPUTER CENTER INC, MCLEAN VA.
*       JANUARY 30 1976
*    THE ERRORS FIXED:
*       (1) THE 'AIF' STATEMENTS DID NOT HAVE THE
*           FIRST VARIABLE NAME IN APOSTROPHES. (APAR # Z07502).
*           EXAMPLE     AIF (&ALL EQ 'ALL').HDR1
*       (2) IN THE HEADER BLOCK, THE FIELD 'UADSUSER'
*           WAS DEFINED AS 0CL8, WHICH CAUSED THE SUBSEQUENT
*           FIELDS TO BE DEFINED WITH IMPROPER OFFSETS.
*           IT IS NOW CHANGED FROM 0CL8 TO CL8 TO AGREE
*           WITH THE PLS CODE.
*       (3) IN THE ACCOUNT NUMBER DATA BLOCK, THE TWO
*           COMMENT CARDS FOLLOWING THE CARD DEFINING THE
*           FIELD 'UADSANUM' DID NOT HAVE AN ASTERISK IN
*           COLUMN 1, THUS CAUSING ASSEMBLY ERROR
*           MSG IFO054 INVALID OPERATION CODE.
*       (4) THE SETC STATEMENT - THERE IS ONLY ONE - WAS FLAGGED
*           WITH ASSEMBLY MSG IFO031 NAME INCONSISTENT WITH TYPE.
*           (OR ASSEMBLER H MSG IEV124 ILLEGAL USE OF PARAMETER).
*           IT IS ONLY EXECUTED IF OPERANDS ARE NOT PROPERLY
*           SPECIFIED ANYWAY. IT IS COMMENTED OUT.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*%UADGO:     ;
*        %GOTO ACTMC1;                                               /*
         MACRO
         IKJEFUAD  &DSPL,&ALL,&HDR,&POB,&AOB,&ROB,&PDB,&ADB,&RDB,      S
               &FSQ,&GNL
         SPACE 1
         SPACE 1
         SPACE 1
         AIF   ('&ALL' EQ 'ALL').HDR1   CHK TO DO ALL
         AIF   ('&HDR' EQ 'HDR').HDR1   CHK TO DO HEADER BLOCK
         AIF   ('&GNL' EQ 'GNL').GOB1   CHK TO DO GENERAL OFFSET
         AIF   ('&POB' EQ 'POB').POB1   CHK TO DO PASSWD OFFSET
         AIF   ('&AOB' EQ 'AOB').AOB1   CHK TO DO ACCTNM OFFSET
         AIF   ('&ROB' EQ 'ROB').ROB1   CHK TO DO PROCNAME OFFSET
         AIF   ('&PDB' EQ 'PDB').PDB1   CHK TO DO PASSWD DATA
         AIF   ('&ADB' EQ 'ADB').ADB1   CHK TO DO ACCTNM DATA
         AIF   ('&RDB' EQ 'RDB').RDB1   CHK TO DO PROCNAME DATA
         AIF   ('&FSQ' EQ 'FSQ').FSQ1   CHK TO DO FREE SPACE ELEMENT
.*&ALL   SETC  'ALL'
         SPACE 1
.HDR1    ANOP
         AIF   ('&DSPL' NE 'DSPL').HDRA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                     H E A D E R   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I---------------------I---------------------I         *
*          0    I UADSBLNG            I UADSFSQP            I         *
*               I---------------------I---------------------I         *
*          4    I UADSUSER                                  I         *
*               I                                           I         *
*               I---------------------I---------------------I         *
*          12   I UADSBN01            I UADSMAXC            I         *
*               I---------------------I---------------------I         *
*          16   I UADSATTR            I UADSINST            I         *
*               I---------------------I---------------------I         *
*          20   I UADSUPTP                                  I         *
*               I-------------------------------------------I         *
*          24   I UADSPWD1                                  I         *
*               I-------------------------------------------I         *
*          28   I UADSPERP                                  I         *
*               I-------------------------------------------I         *
*          32   I UADSDEST                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*          40   I RESERVED                                  I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.HDRA    ANOP
         SPACE 1
DHED     DSECT ,HEDBPTR
         SPACE 1
         DS    0F                      ALIGN TO WORD BOUNDARY
UADSMHDR DS    0CL16                   COMMON HEADER AREA
UADSBLNG DS    AL2                     BLOCK LENGTH
UADSFSQP DS    AL2                     OFFSET TO INITIAL FSQE (FREE
**                                     ..SPACE QUEUE ELEMENT)
UADSUSER DS    CL8                     USERID
UADSBN01 DS    0BL2                    FLAGS
         DS    BL1                     FIRST BYTE OF FLAGS -- RESERVED
         DS    BL1                     SECOND BYTE OF FLAGS
UADSNUSP EQU   X'80'                   ..0 -- NO NON-USABLE SPACE
**                                     ..1 -- ONLY NON-USABLE SPACE
**                                     .......EXISTS IN THIS BLOCK
UADSEXPF EQU   X'40'                   ..0 -- OLD FORMAT UADS
**                                     ..1 -- NEW EXPANDED FORMAT UADS
**                                     .......EXISTS IN THIS BLOCK
UADSMAXC DS    AL2                     MAXIMUM CORE SIZE ALLOTTABLE
**                                     ..TO THIS USER
UADSATTR DS    0BL2                    SYSTEM ATTRIBUTES OF USERID
         DS    BL1                     FIRST BYTE OF IBM FLAGS
USATR00  EQU   X'80'                   ..0 -- NO OPERATOR CAPABILITY
**                                     ..1 -- OPERATOR CAPABILITY
USATR01  EQU   X'40'                   ..0 -- NO ACCOUNT CAPABILITY
**                                     ..1 -- ACCOUNT CAPABILITY
USATR02  EQU   X'20'                   ..0 -- NO JCL CAPABILITY
**                                     ..1 -- JCL CAPABILITY
USATR03  EQU   X'10'                   ..0 -- NO MOUNT CAPABILITY
**                                     ..1 -- MOUNT CAPABILITY
**                                     FLAGS 4 THROUGH 15 ARE
**                                     ..RESERVED FOR IBM USE
         DS    BL1                     SECOND BYTE OF FLAGS, 8 -- 15
         SPACE 1
UADSINST DS    BL2                     FOR INSTALLATION USE
UADSUPTP DS    AL4                     OFFSET TO CURRENT UPT
UADSPWD1 DS    AL4                     OFFSET TO FIRST PASSWORD OFFSET
UADSPERP DS    AL4                     OFFSET TO PERFORMANCE GROUP
UADSDEST DS    CL8                     DESTINATION
         DS    CL24                    RESERVED
         SPACE 1
         SPACE 1
         SPACE 1
         AIF   ('&ALL' EQ 'ALL').GOB1   CHK TO DO ALL
         AIF   ('&GNL' NE 'GNL').DOPOB  CHK TO DO GENERAL OFFSET
.GOB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').GOBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*             G E N E R A L   O F F S E T   B L O C K                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSNNFL I UADSNNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSNSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSNDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.GOBA    ANOP
         SPACE 1
UADSNODE DSECT ,UADSNPTR
         SPACE 1
UADSNNFL DS    BL1                    GENERAL OFFSET BLOCK
**                                     ..INDICATORS
UADSNFLG EQU   X'80'                   ..0 -- CONTINUE CHAINING
**                                     ..1 -- LAST OFFSET BLOCK FOR
**                                     .......THIS OFFSET CHAIN
**                                     .. FLAGS 1 THRU 7 ARE RESERVED
UADSNNEX DS    AL3                    OFFSET TO NEXT OFFSET BLOCK
UADSNSUB DS    AL4                    OFFSET TO ASSOCIATED OFFSET
UADSNDAT DS    AL4                    OFFSET TO DATA BLOCK
         SPACE 1
.DOPOB   ANOP
         AIF   ('&ALL' EQ 'ALL').POB1   CHK TO DO ALL
         AIF   ('&POB' NE 'POB').DOAOB  CHK TO DO PASSWORD OFFSET
.POB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').POBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*            P A S S W O R D   O F F S E T   B L O C K                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSPFLG I UADSPNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSPSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSPDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.POBA    ANOP
         SPACE 1
DPOB     DSECT ,DPOBPTR
         SPACE 1
UADSPFLG DS    BL1                     PASSWORD BLOCK INDICATORS
PFLG01   EQU   X'80'                   ..0 -- CONTINUE CHAINING
**                                     ..1 -- LAST PASSWORD FOR THIS
**                                     .......USERID
**                                     ..FLAGS 1 THRU 7 ARE RESERVED
UADSPNEX DS    AL3                     OFFSET TO NEXT PASSWD OFFSET
**                                     ..BLOCK
UADSPSUB DS    AL4                     OFFSET TO ASSOCIATED ACCOUNT
**                                     ..NUMBER OFFSET BLOCK
UADSPDAT DS    AL4                     OFFSET TO PASSWORD DATA BLOCK
         SPACE 1
.DOAOB   ANOP
         AIF   ('&ALL' EQ 'ALL').AOB1   CHK TO DO ALL
         AIF   ('&AOB' NE 'AOB').DOROB  CHK TO DO ACCT NO. OFFSET
.AOB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').AOBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   A C C O U N T   N U M B E R                       *
*                     O F F S E T   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSAFLG I UADSANEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSASUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSADAT                                  I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.AOBA    ANOP
         SPACE 1
DNOB     DSECT ,DNOBPTR
         SPACE 1
UADSAFLG DS    BL1                    ACCOUNT NUMBER OFFSET BLOCK
**                                     ..INDICATORS
AFLG01   EQU   X'80'                   ..0 -- CONTINUE CHAINING
**                                     ..1 -- LAST ACCOUNT NUMBER FOR
**                                     .......THIS PASSWORD CHAIN
**                                     .. FLAGS 1 THRU 7 ARE RESERVED
UADSANEX DS    AL3                     OFFSET TO NEXT ACCOUNT NUMBER
**                                     ..OFFSET BLOCK
UADSASUB DS    AL4                     OFFSET TO ASSOCIATED PROCNAME
**                                     ..OFFSET BLOCK
UADSADAT DS    AL4                     OFFSET TO ACCOUNT NUMBER DATA
**                                     ..BLOCK
         SPACE 1
.DOROB   ANOP
         AIF   ('&ALL' EQ 'ALL').ROB1   CHK TO DO ALL
         AIF   ('&ROB' NE 'ROB').DOPDB  CHK TO DO PROCNAME OFFSET
.ROB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').ROBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   P R O C E D U R E   N A M E                       *
*                     O F F S E T   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSRFLG I UADSRNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSRSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSRDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.ROBA    ANOP
         SPACE 1
DROB     DSECT ,DROBPTR
         SPACE 1
UADSRFLG DS    BL1                     PROCNAME OFFSET BLOCK
**                                     ..INDICATORS
FLGR01   EQU   X'80'                   ..0 -- CONTINUE CHAINING
**                                     ..1 -- LAST PROCNAME FOR THIS
**                                     .......ACCOUNT NUMBER
**                                     ..FLAGS 1 THRU 7 ARE RESERVED
UADSRNEX DS    AL3                     OFFSET TO NEXT PROCNAME
**                                     ..OFFSET BLOCK
UADSRSUB DS    AL4                     RESERVED BY ACCOUNT
UADSRDAT DS    AL4                     OFFSET TO PROCNAME DATA BLOCK
         SPACE 1
.DOPDB   ANOP
         AIF   ('&ALL' EQ 'ALL').PDB1   CHK TO DO ALL
         AIF   ('&PDB' NE 'PDB').DOADB  CHK TO DO PASSWORD DATA
.PDB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').PDBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              P A S S W O R D   D A T A   B L O C K                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSPCTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSPPWD                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.PDBA    ANOP
         SPACE 1
DPOBD    DSECT ,UADSPPTR
         SPACE 1
UADSPCTR DS    AL1                     COUNT OF REFERENCES TO THIS
**                                     ..DATA BLOCK
         DS    XL3                     RESERVED FOR ACCOUNT
UADSPPWD DS    CL8                     PASSWORD
         SPACE 1
.DOADB   ANOP
         AIF   ('&ALL' EQ 'ALL').ADB1   CHK TO DO ALL
         AIF   ('&ADB' NE 'ADB').DORDB  CHK TO DO ACCT NO. DATA
.ADB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').ADBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   A C C O U N T   N U M B E R                       *
*                      D A T A     B L O C K                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSACTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSADRF (40 BYTES)                       I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I----------I--------------------------------I         *
*          44   I UADSALEN I UADSANUM (MAX OF 40 BYTES)     I         *
*               I----------I                                I         *
*               =                                           =         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.ADBA    ANOP
         SPACE 1
DNOBD    DSECT ,UADSAPTR
         SPACE 1
UADSACTR DS    AL1                     COUNT OF REFERENCES TO THIS
**                                     ..DATA BLOCK
         DS    XL3                     RESERVED FOR ACCOUNT
UADSADRF DS    CL40                    DRIVER DATA FIELD
UADSALEN DS    AL1                     LENGTH OF FOLLOWING ACCOUNT
**                                     ..NUMBER DATA FIELD
UADSANUM DS    CL40                    ACCT NMBR DATA FIELD
*                                      ..NOTE -- USE SPECIFIC
*                                      .....LENGTH REFERENCES
         SPACE 1
.DORDB   ANOP
         AIF   ('&ALL' EQ 'ALL').RDB1   CHK TO DO ALL
         AIF   ('&RDB' NE 'RDB').DOFSQ  CHK TO DO PROCNAME DATA
.RDB1    ANOP
         AIF   ('&DSPL' NE 'DSPL').RDBA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   P R O C E D U R E   N A M E                       *
*                      D A T A     B L O C K                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSRCTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSRNAM                                  I         *
*               I                                           I         *
*               I----------I----------I---------------------I         *
*          12   I RESERVED            I UADSRSIZ            I         *
*               I----------I----------I---------------------I         *
*          16   I UADSUNAM                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                     *
         SPACE 1
.RDBA    ANOP
         SPACE 1
DROBD    DSECT ,UADSRPTR
         SPACE 1
UADSRCTR DS    AL1                     COUNT OF REFERENCES TO THIS
**                                     DATA BLOCK
         DS    XL3                     RESERVED FOR ACCOUNT
UADSRNAM DS    CL8                     LOGON PROCEDURE NAME
         DS    XL2                     RESERVED
UADSRSIZ DS    AL2                     REGION SIZE SPECIFIED IN THE
**                                     ..NAMED PROCEDURE
UADSUNAM DS    CL8                     ESOTERIC GROUP UNIT NAME
         SPACE 1
.DOFSQ   ANOP
         AIF   ('&ALL' EQ 'ALL').FSQ1   CHK TO DO ALL
         AIF   ('&FSQ' NE 'FSQ').DONE   CHK TO DO FSQE DATA
.FSQ1    ANOP
         AIF   ('&DSPL' NE 'DSPL').FSQEA CHK TO DISPLAY FORMAT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                F R E E   S P A C E   Q U E U E                      *
*                         E L E M E N T                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I---------------------I---------------------I         *
*          0    I FSQELNTH            I FSQENEXT            I         *
*               I---------------------I---------------------I         *
*                                                                     *
         SPACE 1
.FSQEA   ANOP
         SPACE 1
UADSFSQE DSECT ,FSQEPTR
         SPACE 1
FSQELNTH DS    AL2                     LENGTH OF FREE SPACE AREA
FSQENEXT DS    AL2                     OFFSET TO NEXT FSQE
.DONE    ANOP
         MEND  , */
*%ACTMC1 :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO UADL0001;
*%ELSE
*   %GOTO HDR1    ;
*%UADL0001:  ;
*%IF HDR^='HDR'  %THEN               /* CHK TO DO HEADER BLOCK       */
*   %GOTO UADL0002;
*%ELSE
*   %GOTO HDR1    ;
*%UADL0002:  ;
*%IF GNL^='GNL'  %THEN               /* CHK TO DO GENERAL OFFSET     */
*   %GOTO UADL0003;
*%ELSE
*   %GOTO GOB1    ;
*%UADL0003:  ;
*%IF POB^='POB'  %THEN               /* CHK TO DO PASSWD OFFSET      */
*   %GOTO UADL0004;
*%ELSE
*   %GOTO POB1    ;
*%UADL0004:  ;
*%IF AOB^='AOB'  %THEN               /* CHK TO DO ACCTNM OFFSET      */
*   %GOTO UADL0005;
*%ELSE
*   %GOTO AOB1    ;
*%UADL0005:  ;
*%IF ROB^='ROB'  %THEN               /* CHK TO DO PROCNAME OFFSET    */
*   %GOTO UADL0006;
*%ELSE
*   %GOTO ROB1    ;
*%UADL0006:  ;
*%IF PDB^='PDB'  %THEN               /* CHK TO DO PASSWD DATA        */
*   %GOTO UADL0007;
*%ELSE
*   %GOTO PDB1    ;
*%UADL0007:  ;
*%IF ADB^='ADB'  %THEN               /* CHK TO DO ACCTNM DATA        */
*   %GOTO UADL0008;
*%ELSE
*   %GOTO ADB1    ;
*%UADL0008:  ;
*%IF RDB^='RDB'  %THEN               /* CHK TO DO PROCNAME DATA      */
*   %GOTO UADL0009;
*%ELSE
*   %GOTO RDB1    ;
*%UADL0009:  ;
*%IF FSQ^='FSQ'  %THEN               /* CHK TO DO FREE SPACE ELEMENT */
*   %GOTO UADL0010;
*%ELSE
*   %GOTO FSQ1    ;
*%UADL0010:  ;
*%ALL='ALL';
*%HDR1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO UADL0011;
*%ELSE
*   %GOTO HDRA    ;
*%UADL0011:  ;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                     H E A D E R   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I---------------------I---------------------I         *
*          0    I UADSBLNG            I UADSFSQP            I         *
*               I---------------------I---------------------I         *
*          4    I UADSUSER                                  I         *
*               I                                           I         *
*               I---------------------I---------------------I         *
*          12   I UADSBN01            I UADSMAXC            I         *
*               I---------------------I---------------------I         *
*          16   I UADSATTR            I UADSINST            I         *
*               I---------------------I---------------------I         *
*          20   I UADSUPTP                                  I         *
*               I-------------------------------------------I         *
*          24   I UADSPWD1                                  I         *
*               I-------------------------------------------I         *
*          28   I UADSPERP                                  I         *
*               I-------------------------------------------I         *
*          32   I UADSDEST                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*          40   I RESERVED                                  I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                    */
*%HDRA   :  ;
*
*DECLARE
*  1 DHED     BASED(HEDBPTR),
*   2 UADSMHDR,                      /* COMMON HEADER AREA           */
*    3 UADSBLNG PTR(15),             /* BLOCK LENGTH                 */
*
*    3 UADSFSQP PTR(15),             /* OFFSET TO INITIAL FSQE (FREE
*                                      ..SPACE QUEUE ELEMENT)        */
*    3 UADSUSER CHAR(8),             /* USERID                       */
*    3 UADSBN01 FIXED(16),           /* FLAGS                        */
*     4 *        BIT(8),             /* RESERVED                     */
*     4 UADSNUSP BIT(1),             /*..0 -- USABLE SPACE EXISTS
*                                      ..1 -- ONLY NON-USABLE SPACE
*                                      .......EXISTS IN THIS BLOCK   */
*     4 UADSEXPF BIT(1),             /*..0 -- OLD FORMAT
*                                      ..1 -- EXPANDED FORMAT        */
*     4 *        BIT(6),             /* RESERVED                     */
*    3 UADSMAXC FIXED(16),           /* MAXIMUM CORE SIZE ALLOTTABLE
*                                         TO THIS USER.              */
*   2 UADSATTR BIT(16),              /* SYSTEM ATTRIBUTES OF USERID  */
*     3 USATR00  BIT(1),             /* ..0 -- NO OPERATOR CAPABILITY
*                                       ..1 -- OPERATOR CAPABILITY   */
*     3 USATR01  BIT(1),             /* ..0 -- NO ACCOUNT CAPABILITY
*                                       ..1 -- ACCOUNT CAPABILITY    */
*     3 USATR02  BIT(1),             /* ..0 -- NO JCL CAPABILITY
*                                       ..1 -- JCL CAPABILITY        */
*     3 USATR03  BIT(1),             /* ..0 -- NO MOUNT CAPABILITY
*                                       ..1 -- MOUNT CAPABILITY      */
*     3 *        BIT(12),            /* RESERVED FOR IBM USE         */
*
*    2 UADSINST BIT(16),             /* FLAGS 16 THROUGH 31 ARE
*                                       ..RESERVED FOR INSTALLATION
*                                       ..USE                        */
*   2 UADSUPTP PTR,                  /* PTR TO USER PROFILE TABLE    */
*   2 UADSPWD1 PTR,                  /* OFFSET TO 1ST PASSWD OFFSET  */
*   2 UADSPERP PTR,                  /* OFFSET TO PERFORMANCE GROUP  */
*   2 UADSDEST CHAR(8),              /* DESTINATION                  */
*   2 *        CHAR(24);             /* RESERVED                     */
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DHEL0001;
*%ELSE
*   %GOTO GOB1    ;
*%DHEL0001:  ;
*%IF GNL='GNL'  %THEN                /* CHK TO DO GENERAL OFFSET     */
*   %GOTO DHEL0002;
*%ELSE
*   %GOTO DOPOB   ;
*%DHEL0002:  ;
*%GOB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DHEL0003;
*%ELSE
*   %GOTO GOBA    ;
*%DHEL0003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*             G E N E R A L   O F F S E T   B L O C K                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSNNFL I UADSNNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSNSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSNDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                    */
*%GOBA   :  ;
*
*DECLARE
*  1 UADSNODE BASED(UADSNPTR),
*
*   2 UADSNWD1 PTR,                  /* CHAIN POINTER                */
*     3 UADSNFLG BIT(1),             /* ..0 -- CONTINUE CHAINING
*                                       ..1 -- LAST OFFSET BLOCK FOR
*                                       .......THIS OFFSET CHAIN     */
*     3 *        BIT(7),             /* FLAGS 1 THRU 7 ARE RESERVED  */
*     3 UADSNNEX PTR(24),            /* OFFSET TO NEXT OFFSET BLOCK  */
*
*   2 UADSNSUB PTR,                  /* OFFSET TO ASSOCIATED OFFSET  */
*
*   2 UADSNDAT PTR;                  /* OFFSET TO DATA BLOCK         */
*%DOPOB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO UADLX001;
*%ELSE
*   %GOTO POB1    ;
*%UADLX001:  ;
*%IF POB='POB'  %THEN                /* CHK TO DO PASSWORD OFFSET    */
*   %GOTO UADLX002;
*%ELSE
*   %GOTO DOAOB   ;
*%UADLX002:  ;
*%POB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO UADLX003;
*%ELSE
*   %GOTO POBA    ;
*%UADLX003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*            P A S S W O R D   O F F S E T   B L O C K                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSPFLG I UADSPNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSPSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSPDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                    */
*%POBA   :  ;
*
*DECLARE
*  1 DPOB     BASED(DPOBPTR),
*
*   2 PFLG01   BIT(1),               /* ..0 -- CONTINUE CHAINING
*                                       ..1 -- LAST PASSWORD FOR THIS
*                                       .......USERID                */
*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */
*
*   2 UADSPNEX PTR(24),              /* OFFSET TO NEXT PASSWD OFFSET
*                                       ..BLOCK                      */
*   2 UADSPSUB PTR,                  /* OFFSET TO ASSOCIATED ACCOUNT
*                                       ..NUMBER OFFSET BLOCK        */
*   2 UADSPDAT PTR;                  /* OFFSET TO PASSWORD DATA
*                                       BLOCK                        */
*%DOAOB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DPOL0001;
*%ELSE
*   %GOTO AOB1    ;
*%DPOL0001:  ;
*%IF AOB='AOB'  %THEN                /* CHK TO DO ACCTNMBR OFFSET    */
*   %GOTO DPOL0002;
*%ELSE
*   %GOTO DOROB   ;
*%DPOL0002:  ;
*%AOB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DPOL0003;
*%ELSE
*   %GOTO AOBA    ;
*%DPOL0003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   A C C O U N T   N U M B E R                       *
*                     O F F S E T   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSAFLG I UADSANEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSASUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSADAT                                  I         *
*               I-------------------------------------------I         *
*                                                                    */
*%AOBA   :  ;
*
*DECLARE
*  1 DNOB     BASED(DNOBPTR),
*
*   2 AFLG01   BIT(1),               /* ..0 -- CONTINUE CHAINING
*                                       ..1 -- LAST ACCOUNT NUMBER FOR
*                                       .......THIS PASSWORD CHAIN   */
*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */
*
*   2 UADSANEX PTR(24),              /* OFFSET TO NEXT ACCOUNT
*                                        NUMBER OFFSET BLOCK         */
*
*   2 UADSASUB PTR,                  /* OFFSET TO ASSOCIATED PROCNAME
*                                       ..OFFSET BLOCK               */
*   2 UADSADAT PTR;                  /* OFFSET TO ACCOUNT NUMBER DATA
*                                       ..BLOCK                      */
*%DOROB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DNOL0001;
*%ELSE
*   %GOTO ROB1    ;
*%DNOL0001:  ;
*%IF ROB='ROB'  %THEN                /* CHK TO DO PROCNAME OFFSET    */
*   %GOTO DNOL0002;
*%ELSE
*   %GOTO DOPDB   ;
*%DNOL0002:  ;
*%ROB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DNOL0003;
*%ELSE
*   %GOTO ROBA    ;
*%DNOL0003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   P R O C E D U R E   N A M E                       *
*                     O F F S E T   B L O C K                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSRFLG I UADSRNEX                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSRSUB                                  I         *
*               I-------------------------------------------I         *
*          8    I UADSRDAT                                  I         *
*               I-------------------------------------------I         *
*                                                                    */
*%ROBA   :  ;
*
*DECLARE
*  1 DROB     BASED(DROBPTR),
*
*   2 FLGR01   BIT(1),               /* ..0 -- CONTINUE CHAINING
*                                       ..1 -- LAST PROCNAME FOR
*                                       .......THIS ACCOUNT NUMBER   */
*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */
*
*   2 UADSRNEX PTR(24),              /* OFFSET TO NEXT PROCNAME
*                                       ..OFFSET BLOCK               */
*   2 *        PTR,                  /* RESERVED BY ACCOUNT          */
*   2 UADSRDAT PTR;                  /* OFFSET TO PROCNAME DATA
*                                       BLOCK                        */
*%DOPDB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DROL0001;
*%ELSE
*   %GOTO PDB1    ;
*%DROL0001:  ;
*%IF PDB='PDB'  %THEN                /* CHK TO DO PASSWORD DATA      */
*   %GOTO DROL0002;
*%ELSE
*   %GOTO DOADB   ;
*%DROL0002:  ;
*%PDB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DROL0003;
*%ELSE
*   %GOTO PDBA    ;
*%DROL0003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              P A S S W O R D   D A T A   B L O C K                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSPCTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSPPWD                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                    */
*%PDBA   :  ;
*
*DECLARE
*  1 DPOBD    BASED(UADSPPTR),
*
*   2 UADSPCTR PTR(8),               /* COUNT OF REFERENCES TO THIS
*                                       ..DATA BLOCK                 */
*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */
*   2 UADSPPWD CHAR(8);              /* PASSWORD                     */
*%DOADB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DPOLX001;
*%ELSE
*   %GOTO ADB1    ;
*%DPOLX001:  ;
*%IF ADB='ADB'  %THEN                /* CHK TO DO ACCT NO. DATA      */
*   %GOTO DPOLX002;
*%ELSE
*   %GOTO DORDB   ;
*%DPOLX002:  ;
*%ADB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DPOLX003;
*%ELSE
*   %GOTO ADBA    ;
*%DPOLX003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   A C C O U N T   N U M B E R                       *
*                      D A T A     B L O C K                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSACTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSADRF (40 BYTES)                       I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I                                           I         *
*               I----------I--------------------------------I         *
*          44   I UADSALEN I UADSANUM (MAX OF 40 BYTES)     I         *
*               I----------I                                I         *
*               =                                           =         *
*               I-------------------------------------------I         *
*                                                                    */
*%ADBA   :  ;
*
*DECLARE
*  1 DNOBD    BASED(UADSAPTR),
*
*   2 UADSACTR PTR(8),               /* COUNT OF REFERENCES TO THIS
*                                       ..DATA BLOCK                 */
*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */
*   2 UADSADRF CHAR(40),             /* DRIVER DATA FIELD            */
*   2 UADSALEN FIXED(8),             /* LENGTH OF FOLLOWING ACCOUNT
*                                       ..NUMBER DATA FIELD          */
*   2 UADSANUM CHAR(40);             /* ACCT NMBR DATA FIELD         */
*%DORDB  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DNOLX001;
*%ELSE
*   %GOTO RDB1    ;
*%DNOLX001:  ;
*%IF RDB='RDB'  %THEN                /* CHK TO DO PROCNAME DATA      */
*   %GOTO DNOLX002;
*%ELSE
*   %GOTO DOFSQ   ;
*%DNOLX002:  ;
*%RDB1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DNOLX003;
*%ELSE
*   %GOTO RDBA    ;
*%DNOLX003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                   P R O C E D U R E   N A M E                       *
*                      D A T A     B L O C K                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I----------I--------------------------------I         *
*          0    I UADSRCTR I RESERVED                       I         *
*               I----------I--------------------------------I         *
*          4    I UADSRNAM                                  I         *
*               I                                           I         *
*               I----------I----------I---------------------I         *
*          12   I RESERVED            I UADSRSIZ            I         *
*               I----------I----------I---------------------I         *
*          16   I UADSUNAM                                  I         *
*               I                                           I         *
*               I-------------------------------------------I         *
*                                                                    */
*%RDBA   :  ;
*
*DECLARE
*  1 DROBD    BASED(UADSRPTR),
*
*   2 UADSRCTR PTR(8),               /* COUNT OF REFERENCES TO THIS
*                                         DATA BLOCK                 */
*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */
*   2 UADSRNAM CHAR(8),              /* LOGON PROCEDURE NAME         */
*   2 *        CHAR(2),              /* RESERVED                     */
*   2 UADSRSIZ FIXED(16),            /* REGION SIZE SPECIFIED IN THE
*                                       ..NAMED PROCEDURE            */
*   2 UADSUNAM CHAR(8);              /* ESOTERIC GROUP UNIT NAME     */
*%DOFSQ  :  ;
*%IF ALL^='ALL'  %THEN               /* CHK TO DO ALL                */
*   %GOTO DUDL0001;
*%ELSE
*   %GOTO FSQ1    ;
*%DUDL0001:  ;
*%IF FSQ='FSQ'  %THEN                /* CHK TO DO FSQE DATA          */
*   %GOTO DUDL0002;
*%ELSE
*   %GOTO DONE    ;
*%DUDL0002:  ;
*%FSQ1   :  ;
*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */
*   %GOTO DUDL0003;
*%ELSE
*   %GOTO FSQEA   ;
*%DUDL0003:  ;
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                F R E E   S P A C E   Q U E U E                      *
*                         E L E M E N T                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
*               I---------------------I---------------------I         *
*          0    I FSQELNTH            I FSQENEXT            I         *
*               I---------------------I---------------------I         *
*                                                                    */
*%FSQEA  :  ;
*
*DECLARE
*  1 UADSFSQE BASED(FSQEPTR),
*   2 FSQELNTH PTR(15),              /* LENGTH OF FREE SPACE AREA    */
*
*   2 FSQENEXT PTR(15);              /* OFFSET TO NEXT FSQE          */
*%DONE   :  ;
./       ADD NAME=JVDENTER
         MACRO , JVDENTER - V1M00 - 01/28/74
&LABEL   JVDENTER                                                      +
               &BASE=(11),                                             +
               &REGS=(14,12),                                          +
               &ID=,                                                   +
               &VERSION=,                                              +
               &DSA=72,                                                +
               &ORIGIN=*,                                              +
               &CFL=YES
.*
         LCLC  &EPID,&BASR,&START
.*
.BEGIN   AIF   ('&LABEL' EQ '').IDT
.*
         SPACE
&LABEL   DS    0H
         ENTRY &LABEL
         SPACE
.*
.IDT     AIF   (T'&ID EQ 'O').IDD
&EPID    SETC  '&ID'
         AGO   .VER
.IDD     AIF   ('&LABEL' EQ '').IDC
&EPID    SETC  '&LABEL'
         AGO   .VER
.IDC     ANOP
&EPID    SETC  '&SYSECT'
.VER     AIF   (T'&VERSION EQ 'O').GEN
&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'
         MNOTE *,'       &EPID'
.*
.GEN     ANOP
&BASR    SETC  '&BASE(1)'
.*
&START   SETC  '&ORIGIN'
         AIF   ('&ORIGIN' NE '@').START
&START   SETC  '&SYSECT'
.START   AIF   ('&ORIGIN' EQ '*').HERE
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         BALR  &BASR,0
         LA    14,*-&ORIGIN
         SLR   &BASR,14
         LR    2,13
         SPACE
.*
         AGO   .GETDSA
.HERE    ANOP
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         LR    &BASR,15
         LR    2,13
         SPACE
.*
.GETDSA  AIF   ('&DSA' EQ '0').NOCFL
.*
         LA    3,&DSA
         GETMAIN R,LV=(3)
         ST    3,0(1)
         ST    13,4(1)
         LR    13,1
.*
         AIF   ('&CFL' EQ 'NO').NOCFL
.*
         ST    1,8(2)
.*
.NOCFL   ANOP
.*
         LM    14,04,12(2)
         SPACE
.*
         MEND
./       ADD NAME=JVDEQU
         MACRO
&L       JVDEQU &O
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
.*
         MEND
./       ADD NAME=JVDLEAVE
         MACRO , JVDLEAVE - V1M00 - 01/28/74
&LABEL   JVDLEAVE                                                      +
               &REGS=(14,12),                                          +
               &RC=,                                                   +
               &DSA=
.*
         LCLC  &L
.*
         AIF   ('&DSA' EQ '0').NODSA
.*
&LABEL   LH    0,2(13)
         LR    1,13
         L     13,4(13)
.*
         AIF   ('&RC' NE '(15)').FREE
.*
         LR    2,15
.*
.FREE    ANOP
.*
         FREEMAIN R,LV=(0),A=(1)
.*
.RCCHK   AIF   ('&RC' EQ '').NORC
         AIF   ('&RC' NE '(15)').RTRN
.*
         LR    15,2
.*
         AGO   .RTRNN
.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC
.*
         LR    15,&RC(1)
.*
.RTRNN   ANOP
.*
&L       RETURN &REGS,RC=(15)
         SPACE
.*
         MEXIT
.RTRNC   ANOP
.*
&L       RETURN &REGS,RC=&RC
         SPACE
.*
         MEXIT
.NORC    ANOP
.*
&L       RETURN &REGS
         SPACE
.*
         MEXIT
.NODSA   ANOP
&L       SETC  '&LABEL'
         AGO   .RCCHK
.*
         MEND
./       ADD NAME=MSGLPA
         MACRO
&L       MSGLPA  &MSG,&O
.*
         LCLA  &N,&F
.*
&N       SETA  K'&MSG-2
         AIF   (T'&O EQ 'O').GEN
&F       SETA  &O
.GEN     ANOP
.*
&L       DS    0A
         DC    Y(&N+4,&F)
         DC    C&MSG
         SPACE
.*
         MEND
./       ADD NAME=REGEQU
         MACRO
         REGEQU
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
./       ADD NAME=REGS
         MACRO
         REGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
./       ADD NAME=TESTOPEN
         MACRO
&NAME    TESTOPEN &DCB,&EXIT
&NAME    LOADIT 1,&DCB,A     REG 1 = DCB ADDRESS
         TM 48(1),X'10'      TEST FOR SUCCESSFUL OPEN.
         AIF ('&EXIT' EQ '').NOEXIT
         LOADIT 15,&EXIT,A   REG 15 = EXIT ADDRESS
         BCR 8,15            BRANCH IF NO OPEN.
         MEXIT
.NOEXIT  BO TEST&SYSNDX      BRANCH IF OPEN OK.
         COMMENT 'OPEN TEST FAILED.'
         SVC 3
TEST&SYSNDX EQU *
         MEND
./       ADD NAME=TMPMAC
         MACRO
&LBL     TMPMAC &CMD=(0,0),&CBUF=,&PGM=,&PARM=,                        X
               &DCB=0,&TASKLIB=0,&CMDLIB=YES,                          X
               &EXEC=YES,&STACK=YES,&SCMD=NO,&STAX=YES,&CMDFAIL=MSG,   X
               &MF=I
         LCLA  &F,&F1,&A
         LCLC  &C
         LCLB  &CBF,&CBR,&CS,&CR1,&CR2,&PGF,&PGS,&PGR
         LCLB  &PRF,&PRS,&PRR,&HF,&HS,&HR
         LCLB  &DCBR,&DCB0,&TSKR
         LCLB  &STRS
         LCLB  &MFL,&MFI,&MFB,&MFE
         AIF   (('&LBL' EQ '') OR ('&MF' EQ 'L') ).L
&LBL     DS    0H
.L       AIF   ('&CBUF' EQ '').L1
&CBF     SETB  1
&F       SETA  X'80'
&C       SETC  '&CBUF'(1,1)
         AIF   ('&C' NE '(').L8
&CBR     SETB  1
         AGO   .L8
.L1      ANOP
&C       SETC  '&CMD(1)'(1,1)
         AIF   ('&C' NE '''').L2
&CS      SETB  1
&STRS    SETB  1
         AGO   .L4
.L2      AIF   ('&C' NE '(').L3
&CR1     SETB  1
.L3      ANOP
&C       SETC  '&CMD(2)'(1,1)
         AIF   ('&C' NE '(').L4
&CR2     SETB  1
.L4      AIF   ('&PGM' EQ '').L7A
&PGF     SETB  1
&F1      SETA  X'80'
&C       SETC  '&PGM'(1,1)
         AIF   ('&C' NE '''').L5
&PGS     SETB  1
&STRS    SETB  1
         AGO   .L6
.L5      AIF   ('&C' NE '(').L6
&PGR     SETB  1
.L6      AIF   ('&PARM' EQ '').L8
&PRF     SETB  1
&C       SETC  '&PARM'(1,1)
         AIF   ('&C' NE '''').L7
&PRS     SETB  1
&STRS    SETB  1
         AGO   .L8
.L7      AIF   ('&C' NE '(').L8
&PRR     SETB  1
         AGO   .L8
.L7A     AIF   ('&CMD(1)' NE '0').L8
         AIF   ('&MF(1)' EQ 'L').L8
         MNOTE 8,'CMD, CBUF, OR PGM MUST BE SPECIFIED'
         MEXIT
.L8      AIF   ('&DCB' NE 'ENV').L8A
&F       SETA  &F+X'40'
&DCB0    SETB  1
         AGO   .L9
.L8A     AIF   ('&DCB' NE '0').L8B
&DCB0    SETB  1
         AGO   .L9
.L8B     ANOP
&C       SETC  '&DCB'(1,1)
         AIF   ('&C' NE '(').L9
&DCBR    SETB  1
.L9      ANOP
&C       SETC  '&TASKLIB'(1,1)
         AIF   ('&C' NE '(').L10
&TSKR    SETB  1
.L10     AIF   ('&CMDLIB' NE 'NO').L11
&F       SETA  &F+X'20'
.L11     AIF   ('&EXEC'  NE 'NO').L12
&F       SETA  &F+X'10'
.L12     AIF   ('&STACK' NE 'NO').L13
&F       SETA  &F+X'02'
.L13     AIF   ('&SCMD' NE 'NO').L14
&F       SETA  &F+X'08'
.L14     AIF   ('&STAX' NE 'NO').L15
&F       SETA  &F+X'04'
         AGO   .L17
.L15     AIF   ('&STAX' EQ 'YES').L17
&HF      SETB  1
&C       SETC  '&STAX'(1,1)
         AIF   ('&C' NE '''').L16
&HS      SETB  1
&STRS    SETB  1
         AGO   .L17
.L16     AIF   ('&C' NE '(').L17
&HR      SETB  1
.L17     AIF   ('&CMDFAIL' NE 'NOMSG').L18
&F       SETA  &F+X'01'
.L18     AIF   ('&MF' NE 'L').L19
&MFL     SETB  1
         AGO   .L23
.L19     AIF   ('&MF' NE 'I').L20
&MFI     SETB  1
         AGO   .L23
.L20     ANOP
&C       SETC  '&MF(1)'
         AIF   ('&C' NE 'B').L21
&MFB     SETB  1
         AGO   .L23
.L21     AIF   ('&C' NE 'E').L22
&MFE     SETB  1
         AGO   .L23
.L22     MNOTE 8,'UNRECOGNIZABE MF'
         MEXIT
.L23     AIF   (NOT &MFL).L37
         AIF   (NOT (&CBR OR &CR1 OR &CR2 OR &PGR OR &PRR OR &DCBR OR  X
               &TSKR)).L24
         MNOTE 8,'R FORM NOT ALOWED WITH MF=L'
         MEXIT
.L24     ANOP
&LBL     DS    0F                       FULLWORD ALIGNMENT
         DC    AL1(&F)                  FLAGS
         AIF   (NOT &DCB0).L25
         DC    AL3(0)                   DCB ADDR
         AGO   .L26
.L25     DC    AL3(&DCB)                DCB ADDR
.L26     AIF   (&PGF).L29
         AIF   (&CBF).L28
         AIF   (&CS).L27
         DC    AL1(&CMD(2))             CMD LNTH
         DC    AL3(&CMD(1))             CMD ADDR
         AGO   .L31
.L27     DC    AL1(L'TMPC&SYSNDX)       CMD LNTH
         DC    AL3(TMPC&SYSNDX)         CMD ADDR
         AGO   .L31
.L28     DC    AL4(&CBUF)               PTR TO CBUF
         AGO   .L31
.L29     AIF   (&PGS).L30
         DC    AL4(&PGM)                PGM NAME ADDR
         AGO   .L31
.L30     DC    AL4(TMPG&SYSNDX)         PGM NAME ADDR
.L31     DC    AL1(&F1)                 FLAGS
         DC    AL3(&TASKLIB)            TASKLIB
         AIF   (&PRF).L32
         DC    AL4(0)                   RETURN/COMPLETION CODE
         AGO   .L34
.L32     AIF   (&PRS).L33
         DC    AL4(&PARM)               PARM PTR/RETURN-COMPLETION CODE
         AGO   .L34
.L33     DC    AL4(TMPR&SYSNDX)         PARM PTR/RETURN-COMPLETION CODE
.L34     AIF   (&HF).L35
         DC    AL4(0)                   UNUSED HERALD FIELD
         AGO   .L38
.L35     AIF   (&HS).L36
         DC    AL4(&STAX)               HERALD/REPLY
         AGO   .L38
.L36     DC    AL4(TMPH&SYSNDX)         HERALD/REPLY
.L37     AIF   (NOT (&STRS OR &MFI)).L38
         B     TMPL&SYSNDX
.L38     AIF   (NOT &CS).L39
TMPC&SYSNDX DC C&CMD
.L39     AIF   (NOT &PGS).L40
TMPG&SYSNDX DC CL8&PGM                  PGM NAME
.L40     AIF   (NOT &PRS).L41
&A       SETA  K'&PARM
&A       SETA  &A-2
TMPR&SYSNDX DC 0F'0',XL1'80',AL3(TMPR&SYSNDX+6)
         DC    F'&A'
         DC    C&PARM
.L41     AIF   (NOT &HS).L42
&A       SETA  K'&STAX
&A       SETA  &A-2
TMPH&SYSNDX DC H'&A',C&STAX
.L42     AIF   (NOT &MFL).L43
         MEXIT
.L43     AIF   (NOT &MFI).L44
TMPT&SYSNDX DC 5F'0'                    CMD BLK FOR TMPSRV
TMPL&SYSNDX LA 1,TMPT&SYSNDX GET TBL ADDR
         AGO   .L45A
.L44     AIF   (NOT &STRS).L45
TMPL&SYSNDX DS 0H
.L45     AIF   ('&MF(2)' EQ '(1)').L45A
         LA    1,&MF(2)                 GET TBL ADDR
.L45A    ANOP
         XC    0(20,1),0(1)             CLEAR TBL
.L46     AIF   (&DCBR).L47
         AIF   (&DCB0).L48
         LA    0,&DCB                   GET DCB ADDR
         ST    0,0(1)                   STORE IN TBL
         AGO   .L48
.L47     ST    &DCB(1),0(1)             STORE DCB ADDR
.L48     AIF   ('&F' EQ '0').L49
         MVI   0(1),&F                  MOVE IN FLAGS
.L49     AIF   (&PGF).L54
         AIF   (&CBF).L53A
         AIF   (&CS).L53
         AIF   (&CR1).L50
         LA    0,&CMD(1)                GET CMD ADDR
         ST    0,4(1)                   STORE IN LST
         AGO   .L51
.L50     ST    &CMD(1),4(1)
.L51     AIF   (&CR2).L52
         MVI   4(1),&CMD(2)             MOVE IN LNTH
         AGO   .L57
.L52     STC   &CMD(2),4(1)             STORE CMD LNTH
         AGO   .L57
.L53     LA    0,TMPC&SYSNDX            GET CMD ADDR
         ST    0,4(1)                   STORE IN TBL
         MVI   4(1),L'TMPC&SYSNDX       MOVE IN LNTH
         AGO   .L57
.L53A    AIF   (&CBR).L53B
         LA    0,&CBUF                  GET CBUF ADDR
         ST    0,4(1)                   STORE IN TBL
         AGO   .L57
.L53B    ST    &CBUF(1),4(1)            STORE CBUF ADDR
         AGO   .L57
.L54     AIF   (&PGS).L56
         AIF   (&PGR).L55
         LA    0,&PGM                   GET PGM NAME ADDR
         ST    0,4(1)                   STORE IN TABLE
         AGO   .L57
.L55     ST    &PGM(1),4(1)             STORE PGM NAME ADDR
         AGO   .L57
.L56     LA    0,TMPG&SYSNDX            GET PGM NAME ADDR
         ST    0,4(1)                   STORE IN TABLE
.L57     AIF   ('&TASKLIB' EQ '0').L59
         AIF   (&TSKR).L58
         LA    0,&TASKLIB               GET ADDR OF TSK DCB
         ST    0,8(1)                   STORE IN TAB
         AGO   .L59
.L58     ST    &TASKLIB(1),8(1)         STORE TSK DCB ADDR
.L59     AIF   ('&F1' EQ '0').L60
         MVI   8(1),&F1                 MOVE IN FLGS
.L60     AIF   (NOT &PRF).L63
         AIF   (&PRS).L62
         AIF   (&PRR).L61
         L     0,&PARM                  GET PARM ADDR
         ST    0,12(1)                  STORE IN TABLE
         AGO   .L63
.L61     ST    &PARM(1),12(1)           ST PRM ADDR IN TABLE
         AGO   .L63
.L62     LA    0,TMPR&SYSNDX            GET PARM ADDR
         ST    0,12(1)                  STORE IN TABLE
.L63     AIF   (NOT &HF).L67
         AIF   (&HS).L65
         AIF   (&HR).L64
         LA    0,&STAX                  GET HERALD ADDR
         ST    0,16(1)                  STORE IN TABLE
         AGO   .L67
.L64     ST    &STAX(1),16(1)           STORE HERALD ADDR
         AGO   .L67
.L65     LA    0,TMPH&SYSNDX            GET HERALD ADDR
         ST    0,16(1)                  STORE IN TBL
.L67     AIF   (&MFB).L68
         LINK  EP=TMPSRV
.L68     MEND
