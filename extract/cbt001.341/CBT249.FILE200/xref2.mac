    /*     PDS EXTERNAL SYMBOL CROSS-REFERENCE PROCESS - RPT PGM  */
    /*                                                            */
    /*     THIS PROGRAM IS BEING DISTRIBUTED WITHOUT CHARGE TO    */
    /*     MEMBERS OF THE GUIDE COBOL GROUP.  IT IS DISTRIBUTED   */
    /*     ON AN AS IS, WHERE IS BASIS, WITHOUT WARRANTY OF ANY   */
    /*     KIND, EITHER EXPRESSED OR IMPLIED.  IT IS HOPED THAT   */
    /*     THE PROGRAM MAY SAVE THE RECIPIANT SOME WHEEL RE-      */
    /*     INVENTING...                                           */
    /*                                                            */
   XREF2:  PROCEDURE         OPTIONS (MAIN);
    /*                                                            */
    /*     ESD     CROSSREFERENCE                                 */
    /*                                                            */
    /*     WRITTEN JANUARY, 1979        REX WIDMER                */
    /*                                                            */
    /*     TRANS WORLD AIRLINES INC.                              */
    /*     KANSAS CITY ADMINISTRATIVE CENTER                      */
    /*     11500 AMBASSADOR DRIVE                                 */
    /*     KANSAS CITY, MO 64153                                  */
    /*                                                            */
    /*     816-464-6671                                           */
    /*                                                            */
1   /*                                                            */
    /*     GENERATES A REPORT DRIVEN BY THE OUTPUT OF PGM XREF1   */
    /*     OF ALL ESD REFERENCES WITHIN A DATASET OR GROUP OF     */
    /*     DATASETS.  ORIGINAL INPUT IS A PDS CONTAINING          */
    /*     LINKEDITOR CREATED LOADMODULES.  OUTPUT IS A LIST OF   */
    /*     CSECTS AND THE MODULES WHICH CONTAIN THEM.             */
    /*                                                            */
    /*     THIS PROGRAM IS DRIVEN BY THE OUTPUT OF PROGRAM        */
    /*     XREF1, WHICH DOES THE ACTUAL SCAN OF THE PDS'S         */
    /*                                                            */
    /*     THIS PROGRAM IS DESIGNED TO BE EXECUTED WITH THE       */
    /*     PL/I OPTIMIZING COMPILER.  IT SHOULD BE EASILY         */
    /*     CONVERTED BACK TO THE PL/I (F) COMPILER BY CHANGING    */
    /*     THE REFERENCES TO THE VARIOUS BUILTIN FUNCTIONS        */
    /*     SUCH AS PLISRTD BECOMES IHESRTD,                       */
    /*                                                            */
    /*     THE PROGRAM DOES NOT USE ANY PL/I SPECIFIC LANGUAGE    */
    /*     FEATURES, IT COULD EASILY BE CONVERTED TO COBOL,       */
    /*     BAL, OR WHAT EVER THE IMPLEMENTOR DESIRES.  THE LOGIC  */
    /*     OF THE PROGRAM IS VERY SIMPLE, IT IS BASICLY A SORT    */
    /*     WITH E15 AND E35 EXITS.                                */
    /*                                                            */
1   /*     JCL / DDCARD REQUIREMENTS...                           */
    /*

            //S1 EXEC PGM=XREF1
            //SYSUT1  DD  DSN=SYPP.PGMLIB,DISP=SHR
            //*       THIS IS THE PDS TO SEARCH
            //SYSUT2  DD  DSN=&&ESD,DISP=(,PASS),
            //        UNIT=SYSVIO,SPACE=(CYL,(5,5))
            //*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2
            //S2 EXEC PGM=XREF2
            //SYSPRINT DD  SYSOUT=A,
            //         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)
            //*        THIS IS THE FINAL REPORT
            //ESDIN   DD  DSN=&&ESD,DISP=(OLD,DELETE)
            //*         INPUT TO REPORTING PROCESS
            //SYSOUT  DD  SYSOUT=A  FOR SORT/MERGE
            //SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT

         DD-CARD REQUIREMENTS

            ESDIN        OUTPUT FILE FROM XREF1
            SYSPRINT     FINAL REPORT
            OTHERS    DD-CARDS APPLICABLE TO YOUR SORT PACKAGE    */
    /*                                                            */
1        /*    DECLARES FOR RECORDS TO SORT    */
-        /*     THESE RECORDS ARE CREATED BY PROGRAM XREF1
                AND DESCRIBE ALL ESD REFERENCES FOUND IN LOAD
                MODULES WITHIN A PDS.
                MULTIPLE RUNS OF XREF1 CAN BE PROCESSED IN A
                SINGLE EXECUTION OF XREF2. SINCE EACH RECORD
                HAS THE ORIGINAL DATASET NAME TAGGED ALONG WITH
                IT.  THE FINAL REPORT PRODUCED BY THIS PROGRAM
                WILL LIST THE DATASET KEY NUMBERS AT THE END OF
                THE REPORT.
                                                                  */
-        DCL   1   OUTREC UNALIGNED BASED (PTOUT),
               2   OUTMEM CHAR(8),   /* PDS MEMBER NAME           */
               2   OUTDSN CHAR (44), /* DSN WHICH WAS SCANNED     */
               2   OUTSER CHAR (6),  /* VOLSER CONTAINING OUTDSN  */
               2   OUTNAME CHAR (8), /* THE EXTERNAL SYMBOL FOUND */
               2   OUTTYP CHAR (2),  /* EBCDIC TYPE OF OUTNAME    */
                                     /*  POSSIBLE VALUES...       */
                                     /*                           */
                                     /*    SD   SECTION DEFINITION*/
                                     /*    ER   EXTERNAL REFERENCE*/
                                     /*    LR   LABEL REFERENCE   */
                                     /*    PC   PRIVATE CODE      */
                                     /*    CM   COMMON AREA       */
                                     /*    PR   PSEUDO REGISTED   */
                                     /*    NL   NULL              */
                                     /*    WX   WEAK EXTERNAL REF */
                                     /*                           */
               2   FILLER CHAR (12); /* SPARE SPACE FOR LATER     */
-        DCL   DMYREC CHAR (80) STATIC; /* ALLOW EASY REDEFINITION */
1        /*    DECLARES FOR WORKING STORAGE VARIABLES    */
0        DCL   TITLE1 CHAR (100) STATIC INIT (' ');
         DCL   TITLE2 CHAR (132) STATIC INIT (' ');
         DCL   PAGE_CTR FIXED DEC (7,0) STATIC INIT (0);
         DCL   (I,J) FIXED BINARY (31) STATIC;
         DCL   CTR FIXED BIN (31,0) STATIC INIT (0);
               /*  CURRENT SLOTS LEFT ON PRINT LINE */
         DCL   CTRMAX FIXED BIN (31,0) STATIC INIT (08);
               /*  MAX SLOTS TO UTILIZE ON A PRINT LINE */
         DCL   NAME_HOLD CHAR (8) STATIC INIT (' ');
0        DCL   ( PTOUT) POINTER STATIC;
         DCL   ESDIN FILE RECORD SEQUENTIAL INPUT ENV (LEAVE);
         DCL   SIGND BIT (1) STATIC INIT ('0'B); /* ENDPAGE FORCED */
         DCL   (ADDR,INDEX,MOD,PLIDUMP,PLIRETC,PLISRTD,SUBSTR,VERIFY)
               BUILTIN;
         DCL   LINENO BUILTIN;
1        /*    DECLARES FOR DSN GATHERING DATA    */
         /*    THESE TABLES ARE UTILIZED FOR ACCUMULATION OF THE
               PDS NAMES WHICH WERE ORIGINALLY SCANNED.
               IT IS APPROPRIATE TO INSERT COMMON PDS NAMES
               IN THE TABLE AS SHOWN BELOW, TO REDUCE SCAN TIME
               THE MOST COMMON SHOULD APPEAR FIRST, SINCE A VERY
               SIMPLE SEQUENTIAL SCAN ALGORITHM IS UTILIZED.
                                                              */
         DCL   DSNS (99) CHAR (44) STATIC;
         DCL   DSN_MAX FIXED BIN (31,0) STATIC INIT (99);
         DCL   DSN_IN_USE FIXED BIN (31,0) STATIC INIT (6);
               /*  THIS IS THE NUMBER OF SLOTS CURRENTLY IN USE
                   ITS INITIAL VALUE SHOULD BE THE NUMBER WITH
                   DEFAULT DSNS SPECIFIED    */
         DSNS (*) = ' ';    /* CLEAR TO NOT IN USE STATUS */
               /*  SET UP SOME DEFAULT VALUES    */
         DSNS (1) = 'TEMPCAT';
         DSNS (2) = 'SYS1.PRODA';
         DSNS (3) = 'SYS1.PRODB';
         DSNS (4) = 'IMSTST.PGMLIB';
         DSNS (5) = 'IMSONL.PGMLIB';
         DSNS (6) = 'SYS1.PRODSUB';
1         /*    DECLARES FOR SORT ASSOCIATED AREAS    */
-         DCL   SORT_CORE FIXED BIN (31) STATIC INIT (128000);
          DCL   SORT_RET FIXED BIN (31) STATIC INIT (0);
          DCL   SORT_RECORD CHAR (80) STATIC INIT
                (' RECORD TYPE=F,LENGTH=88 ');
          DCL   SORT_FIELD CHAR (80) STATIC INIT
               (' SORT FIELDS=(59,8,CH,A,1,8,CH,A,9,44,CH,A) ');
                /*   SORT ON THE FOLLOWING FIELDS:
                   CSECT NAME,
                   MEMBER NAME, DSNAME      */
1        /*    INITIALIZATION CODING    */
0        ON ERROR BEGIN;   /*  DIE IF ANY ERROR IS ENCOUNTERED */
               CALL PLIDUMP ('TFSH');
         END;
0        PTOUT = ADDR (DMYREC);  /* INITIALIZE RECORD POINTER */
0        ON ENDPAGE (SYSPRINT) BEGIN;
               PAGE_CTR = PAGE_CTR + 1;
             PUT FILE (SYSPRINT) PAGE EDIT (
                 TITLE1, 'PAGE ', PAGE_CTR)
                 (A,X(5),A(5),F(5,0));
             PUT FILE (SYSPRINT) SKIP (2) EDIT
                (TITLE2) (A);
             IF SIGND                 /* WAS THIS ENDPAGE FORCED?    */
                THEN DO;
                  PUT FILE (SYSPRINT) SKIP;   /* SKIP ONLY 1 LINE    */
                  SIGND = '0'B;               /* RESET SWITCH        */
                END;
                ELSE PUT FILE (SYSPRINT) SKIP (2);
         END;
         DCL   MAXPAGE FIXED BIN (31) STATIC INIT (58);
               /*  USED TO LIMIT LINES / PAGE  */
0        OPEN FILE (SYSPRINT) STREAM OUTPUT PRINT PAGESIZE (MAXPAGE)
              LINESIZE (132);
         TITLE1 = '   ***     XREF2     TWA   EXTERNAL SYMBOL CROSS REFE
 RENCE PROCESSOR';
         TITLE2 = 'CSECT        IS CONTAINED IN MODULE(S)
                                                              ';
         SIGND = '1'B;            /* SHOW ENDPAGE WAS FORCED  */
         SIGNAL ENDPAGE (SYSPRINT);
1          /*   SORT INPUT AND FORMAT REPORT USING E15 / E35 EXITS */
         CALL PLISRTD (SORT_FIELD, SORT_RECORD, SORT_CORE, SORT_RET,
                        SORTIN, SORTOUT);
         IF SORT_RET ^= 0 THEN DO;
               PUT FILE (SYSPRINT) SKIP EDIT (
                   '***   SORT ERROR   ***') (A);
                   STOP;
               END;
1        /*   SORT INPUT PROCEDURE - SUBROUTINE TO SORT/MERGE      */
-SORTIN: PROCEDURE RETURNS ( CHAR (80) );
         ON ENDFILE (ESDIN) BEGIN;
              CALL PLIRETC (8); /* SIGNAL END OF SORT INPUT */
              GOTO RETRN;
         END;
-READESD: READ FILE (ESDIN) SET(PTOUT);
          IF ^ (( OUTTYP = 'SD' ))  /* KEEP ONLY CSECT ID RECORDS */
                                    /* IF IT IS DESIRED TO KEEP OTHER
                                       CLASSES OF SYMBOLS, THE CODE
                                       WOULD BE INSERTED HERE     */
             THEN GOTO READESD;                        /* ELSE SKIP  */
         CALL PLIRETC (12); /* SIGNAL MORE INPUT */
         DMYREC = STRING (OUTREC); /* SET UP RECORD BACK TO SORT */
0RETRN:  RETURN (DMYREC);
         END;
1         /*   SORT OUTPUT PROCEDURE - PRODUCES REPORT   */
-SORTOUT: PROCEDURE ( INREC );
         DCL  INREC CHAR (80);
         PTOUT = ADDR (INREC);     /* MAP OUT THE RECORD */
         IF NAME_HOLD ^= OUTNAME   /* NEW EXTERNAL SYMBOL HIT */
           THEN DO;                /* PUT OUT A NEW HEADER    */
             NAME_HOLD = OUTNAME;  /* SET UP FOR NEXT TIME    */
             PUT FILE (SYSPRINT) SKIP EDIT
               ( NAME_HOLD )
               ( X(3), A(8));
             CTR = CTRMAX;         /* SET NUMBER LEFT ON LINE  */
           END;
         /*     PRINT THIS MODULE REFERENCE  */
         IF  CTR = 0               /* IS ROOM LEFT ON THE LINE */
            THEN DO;
              CTR = CTRMAX;
              PUT FILE (SYSPRINT) SKIP EDIT
                (' ') ( X(10),A);
            END;
         CTR = CTR - 1;
         PUT FILE (SYSPRINT) EDIT
           ( OUTMEM  )
           ( X(2),A(8));
         /*   IDENTIFY THE DATASET WHICH CONTAINED REF */
         DO I = 1 TO DSN_IN_USE;   /* SCAN KNOWN DSN TABLE */
           IF OUTREC.OUTDSN = DSNS (I)
             THEN DO;
               PUT FILE (SYSPRINT)  EDIT
                 ('(',I,')')
                 ( A(1),F(2),A(1));
               GOTO A2;
             END;
          END;
          /*  ADD DSN TO TABLE IF POSSIBLE */
          DSN_IN_USE = DSN_IN_USE + 1;
          IF DSN_IN_USE > DSN_MAX THEN SIGNAL ERROR;
          DSNS (DSN_IN_USE ) = OUTREC.OUTDSN;
          PUT FILE (SYSPRINT) EDIT
             ('(',I,')')
             ( A(1),F(2),A(1));
 A2:;
         CALL PLIRETC (4); /*   SIGNAL WE WANT MORE */
         END;
1        /*    JOB TERMINATION ROUTINE    */
         /*    PRINT THE DSNS TABLE AS FILLED IN BY THE RUN */
         SIGNAL ENDPAGE (SYSPRINT);
         PUT FILE (SYSPRINT) SKIP EDIT
           ('DSN REFERENCE NUMBER TABLE DUMP.....')
           ( X(2),A);
         DO I = 1 TO DSN_IN_USE;
           PUT FILE (SYSPRINT) SKIP EDIT
              ('REFERENCE NUMBER (',I,') = ', DSNS (I))
              ( X(2),A,F(2),A,A);
         END;
         END;
