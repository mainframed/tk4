TWA      TITLE 'WHATSNEW  -  LIST PDS DIRECTORY WITH DATE INFORMATION'
WHATSNEW START 0
         SYMREGS
         EJECT
***********************************************************************
*                                                                     *
*        WHATSNEW                                                     *
*        --------                                                     *
*                                                                     *
*        LIST THE DIRECTORY OF A PDS.                                 *
*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *
*                                                                     *
*        FOR EACH MEMBER, THE FOLLOWING IS LISTED  -                  *
*              1. THE MEMBER NAME                                     *
*              2. THE TTRC         ( FROM THE DIRECTORY )             *
*              3. THE LINK-EDIT ATTRIBUTES                            *
*              4. THE LENGTH OF THE MODULE                            *
*              5. THE ENTRY POINT                                     *
*              6. THE TOTAL NUMBER OF CSECTS IN THE MODULE            *
*              7. THE NUMBER OF ZAPS ON THE MODULE                    *
*              8. THE CSECT TYPES - AS FOLLOWS -                      *
*                 C = AT LEAST ONE CSECT BEGINS 'ILB'                 *
*                 I = AT LEAST ONE CSECT BEGINS 'DFS'                 *
*              9. DATE THE MODULE WAS LINKED                          *
*             10. DATE OF THE LATEST ZAP.                             *
*                                                                     *
*                                                                     *
*        THE REPORT IS SORTED BY                                      *
*              1. THE GREATER OF 9. & 10. ABOVE                       *
*              2. MODULE NAME                                         *
*                                                                     *
*        WRITTEN BY   REX WIDMER / PETER FARRELL                      *
*                                                                     *
*        TRANS WORLD AIRLINES INC.                                    *
*        KANSAS CITY ADMINISTRATIVE CENTER                            *
*        11500 AMBASADOR DRIVE                                        *
*        KANSAS CITY, MO 64153                                        *
*                                                                     *
*        816-464-6671                                                 *
*                                                                     *
*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *
*        OF THE GUIDE COBOL GROUP.  IT IS DIRTRIBUTED ON AN AS        *
*        IS, WHERE IS BASIS, WITHOUT EXPRESSED OR IMPLIED WARRANTY    *
*        OF ANY KIND.  IT IS DISTRIBUTED IN HOPE THAT IT MAY SAVE     *
*        OTHER MEMBERS OF THE PROJECT SOME WHEEL RE-INVENTING...      *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*     SAMPLE JCL / JOBSTREAM                                          *
*                                                                     *
*       //WN      PROC NAME=,RGN=256K,CLS=X                           *
*       //WN      EXEC PGM=WHATSNEW,REGION=&RGN,                      *
*       //             ACCT='3600001020T    8484OBSDBSIM000B'         *
*       //SYSPRINT  DD SYSOUT=&CLS   THE OUTPUT REPORT                *
*       //SYSUT1    DD DISP=SHR,UNIT=SYSDA,                           *
*       //             DSN=&NAME    THE PDS TO ANALYZE                *
*       //SYSOUT    DD SYSOUT=&CLS FOR SORT                           *
*       //SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,1)                       *
*       //SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,1)                       *
*       //SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,1)                       *
*                                                                     *
***********************************************************************
         EJECT
WHATSNEW CSECT
         SAVE  (14,12),T,*
         LR    R10,R15             ESTABLISH A BASE REGISTER
         USING WHATSNEW,R10        -
         LA    R12,SAVE            CHAIN SAVE AREAS
         ST    R12,8(,R13)         -
         ST    R13,4(,R12)         -
         LR    R13,R12             -
         SPACE  2
*
*        LINK  TO THE SORT  -
*
         LA    R1,SRTPOINT         POINT TO SORT PARM LIST
         LINK  EP=SORT             GO TO THE SORT
         LTR   R15,R15             DID THE SORT RUN O.K.  ?
         BNZ   ERROR1              NO - BRANCH
         SPACE 1
*        RETURN TO O.S.  -
         L     R13,4(,R13)
         RETURN (14,12),T,RC=0
         SPACE 2
*
*        ERROR IN THE SORT  -
*
ERROR1   EQU   *
         LR    R9,R15              GET RETURN CODE FROM THE SORT
         STC   R9,WORK             SAVE IT
         UNPK  WORK+2(3),WORK+2    CONVERT TO PRINTABLE HEX
         MVC   WTOMSG1C,WORK+2     PUT IN MSG.
         TR    WTOMSG1C,TABLE      -
         SPACE 1
         LA    R1,WTOMSG1          POINT TO ERROR MESSAGE
         WTO   MF=(E,(1))          WTO
         LR    R15,R9              SAVE RETURN CODE
         ABEND 1,DUMP              ERROR IN SORT
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*        C O N  S T A N T S                                           *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
SAVE     DC    9D'0'               REGISTER SAVE AREA
WORK     DC    D'0'                WORK AREA
         SPACE 1
*        ERROR MESSAGE ISSUED IF THE SORT TERMINATES WITH ERRORS  -
WTOMSG1  DC    0F'0',Y(WTOMSG1E-*),H'0'
         DC    C'SORT TERMINATED WITH COMPLETION CODE '
WTOMSG1C DC    C'XX'               SORT COMPLETION CODE
WTOMSG1E EQU   *
         SPACE 1
*        PARMS  TO PASS TO THE SORT  -
SRTPOINT DC    0F'0',X'80',AL3(SORTPARM)
         DC    0F'0',H'0'
SORTPARM DC    Y(SORTPL-SORTPF)
SORTPF   DC    A(SORTCF)
         DC    A(SORTCL)
         DC    A(RECDCF)
         DC    A(RECDCL)
         DC    A(E15)
         DC    A(E35)
         DC    X'FF00',C'SC'
         DC    X'01',XL3'010000'   LEAVE ME 64K
SORTPL   EQU   *
         SPACE 1
*        HERE IS THE SORT CARD  -
SORTCF   DC    C' SORT FIELDS=(1,'
         DC    C'3,BI,D,4,8'
         DC    C',BI,A),SIZE=E10000'
SORTCL   DC    C' '
         SPACE 1
*        HERE IS THE RECORD CARD  -
RECDCF   DC    C' RECORD TYPE=F,LENGTH=('
         DC    C'00040'            LENGTH OF RECORD TO SORT
         DC    C')'
RECDCL   DC    C' '
         SPACE 1
*        TABLE USED FOR TRANSLATING TO PRINTABLE HEX  -
         DC    0D'0'
         ORG   *-240
TABLE    EQU   *
         ORG
         DC    C'0123456789ABCDEF'
         SPACE 1
         DC    0D'0'
         LTORG
         DC    0D'0'
         DROP  R10
         EJECT
***********************************************************************
*                                                                     *
*        E15 EXIT                                                     *
*                                                                     *
***********************************************************************
         DC    0D'0'
E15      SAVE  (14,12),T,E15       SAVE REGISTERS
         LR    R10,R15             ESTABLISH A BASE
         USING E15,R10             -
         LA    R12,SAVEXIT         CHAIN SAVE AREAS
         ST    R12,8(,R13)         -
         ST    R13,4(,R12)
         LR    R13,R12
         SPACE 2
*
*        TEST TO SEE IF THE PDS IS OPEN  -
*
         TM    DIRDCB+48,X'10'     IS THE PDS OPEN  ?
         BO    LOOPDS1             YES - BRANCH
         SPACE 1
*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -
         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS
         LTR   R15,R15             DID IT DO THAT O.K.  ?
         BNZ   ERROR2              NO - BRANCH
         SPACE 1
*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -
         OBTAIN CAMLIST            ISSUE OBTAIN
         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?
         BNZ   ERROR3              NO - BRANCH
         SPACE 1
*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -
         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1
         BZ    ERROR4              NOT A PDS - BRANCH
         SPACE 1
*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -
         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN
         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?
         BZ    ERROR5              NO - BRANCH
         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?
         BZ    ERROR5              NO - BRANCH
         SPACE 1
*        GET A BUFFER TO READ THE MEMBERS INTO  -
         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB
         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN
         GETMAIN R,LV=(0)          ISSUE GETMAIN
         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB
         SPACE 1
*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -
         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER
ZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER
         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER
         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER
         SPACE 1
*
*        GET CORE FOR THE CESD TABLE  -
*
*              THIS TABLE WILL BE USED TO CONTAIN SD ENTRIES
*              FROM THE CESD RECORDS.
*              IT IS USED TO RESOLVE ZAP IDRDATA TO THE CORRESPONDING
*              CSECT NAME.
*        TABLE FORMAT IS AS FOLLOWS -
*
*        0 - 3  = POINTER TO THE FIRST SLOT IN TABLE
*        4 - 7  = LENGTH OF EACH TABLE ENTRY  ( 10 BYTES )
*        8 - B  = POINTER TO NEXT AVAIL. SLOT TO ADD AN ENTRY
*        C - F  = POINTER TO THE END OF THE TABLE
*
         L     R0,GETLEN           GET LENGTH AND SUBPOOL I.D.
         GETMAIN R,LV=(0)          GET AREA FOR THE TABLE
         ST    R1,TABLESD          SAVE POINTER TO THE TABLE
         SPACE 1
*        ZERO  THE TABLE  -
         LH    R3,GETLEN+2         GET LENGTH OF THE TABLE
LOOPZERO MVI   0(R1),0             MOVE A ZERO INTO THE TABLE
         LA    R1,1(,R1)           INCREMENT ALONG THE TABLE
         BCT   R3,LOOPZERO         AND ZAP
         SPACE 1
*        INITIALISE THE TABLE  -
         L     R2,TABLESD          POINT TO THE TABLE
         LH    R3,GETLEN+2         GET LENGTH OF THE TABLE
         AR    R3,R2               POINT TO THE END OF THE TABLE
         ST    R3,12(,R2)          SAVE POINTER TO THE END OF THE TABLE
         LA    R3,16(,R2)          POINTER TO FIRST SLOT IN THE TABLE
         ST    R3,0(,R2)           SAVE POINTER TO FIRST SLOT IN TABLE
         ST    R3,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT
         MVI   7(R2),10            LENGTH OF EACH TABLE ENTRY
         B     GET                 GO GET THE FIRST MEMBER
         SPACE 2
*
*        GET NEXT MEMBER IN THE PDS  -
*
*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -
LOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER
         IC    R3,11(,R2)          GET LENGTH OF USER DATA
         N     R3,MASK2            LENGTH IS 5 BITS
         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS
         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC
         AR    R3,R2               POINT TO NEXT MEMBER
         SPACE 1
*        FIND  THE END OF THE DIRECTORY BLOCK  -
         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK
         LH    R5,0(,R4)           GET LENGTH USED
         AR    R5,R4               POINT TO END OF THE BLOCK
         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?
         BH    GOTNEXT             NO - BRANCH
         SPACE 1
*        READ THE NEXT DIRECTORY BLOCK  -
GET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK
         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK
GOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER
         SPACE 1
         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER
         MVI   SWITCH,0            INITIALISE SWITCH
         SPACE 1
*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -
         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES
         BE    ENDPDS              GOT TO END - BRANCH
         SPACE 1
*        COUNT # OF MEMBERS READ  -
         L     R1,CPMEM            GET # OF MEMBERS READ
         AL    R1,=F'1'            INCREMENT BY 1
         ST    R1,CPMEM            AND SAVE IT
         SPACE 2
         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY
         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER
         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER
         SPACE 1
*        BUILD FIRST PART OF THE SORT KEY  -
         LA    R11,OUTREC          POINT TO AREA TO BUILD SORT RECORD
         USING SKREC,R11
         ZAP   SKDATE,=P'0'        DATE OF LAST LINK OR ZAP
         MVC   SKMEM,0(R2)         MEMBER NAME
         MVC   SKTTRC,8(R2)        TTRC
         MVC   SKATTR,20(R2)       LINK-EDIT ATTRIBUTES
         MVC   SKSIZE,22(R2)       SIZE OF MODULE
         MVC   SKEP,27(R2)         ENTRY POINT
         ZAP   SKCST,=P'0'         # OF CSECTS
         ZAP   SKZAP,=P'0'         # OF ZAPS
         MVI   SKTYPE,C' '         CSECT TYPES FIELD
         MVC   SKTYPE+1(L'SKTYPE-1),SKTYPE
         ZAP   SKDTL,=P'0'         DATE OF LINK-EDIT
         ZAP   SKDTZ,=P'0'         DATE OF MOST RECENT ZAP
         SPACE 1
*        RE-INITIALISE CESD TABLE  -
         L     R2,TABLESD          POINT TO CESD TABLE
         MVC   8(4,R2),0(R2)       POINTER TO NEXT AVAIL. SLOT
         SPACE 1
*
*        TEST FOR ALIAS  -
*
         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY
         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?
*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -
         SPACE 2
*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -
         IC    R3,11(,R2)          GET LENGTH OF USER DATA
         N     R3,MASK2            -
         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS
         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH
         EJECT
***********************************************************************
*                                                                     *
*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *
*        AND WRITING IT TO THE OUTPUT FILE.                           *
*                                                                     *
***********************************************************************
         SPACE 1
GETLOOP  EQU   *
         L     R6,DECB+12          POINT TO INPUT AREA
         READ  DECB,SF,MF=E        READ THE NEXT RECORD
         CHECK DECB
         SPACE 1
*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -
         L     R1,CMREC            COUNTS # OF INPUT RECORDS
         AL    R1,=F'1'            INCREMENT
         ST    R1,CMREC            AND SAVE
         SPACE 1
         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS
         AL    R1,=F'1'            BUMP BY 1
         ST    R1,CPREC            AND SAVE
         SPACE 3
*
*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -
*
         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.
         BO    EODAD               YES - BRANCH ( WE ARE DONE )
         SPACE 1
         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?
         BE    CESD                YES - BRANCH
         CLI   0(R6),X'80'         IS IT AN IDR DATA RECORD ?
         BE    IDR                 YES - BRANCH
         B     GETLOOP             GO GET ANOTHER RECORD
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE CESD TYPE INPUT RECORD                           *
*                                                                     *
***********************************************************************
         SPACE 1
CESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY
         LH    R4,6(,R6)           GET LENGTH OF ESD DATA
         AR    R4,R3               POINT TO END OF RECORD
         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC
         SPACE 1
LOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?
         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD
         SPACE 1
         TM    8(R3),X'0F'         LOOK FOR TYPE SD ENTRIES
         BZ    GOTSD               GOT AN SD ENTRY - BRANCH
         SPACE 1
LOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY
         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #
         B     LOOPESD             AND LOOK AT IT
         SPACE 2
*
*        WE HAVE AD SD ENTRY, MUST ADD IT TO THE TABLE -
*
GOTSD    L     R2,TABLESD          POINT TO ESD TABLE
         L     R8,8(,R2)           POINT TO NEXT SLOT TO ADD AN ENTRY
         C     R8,12(,R2)          IS THERE ROOM IN THE TABLE  ?
         BNL   ERROR6              NO - BRANCH
         MVC   0(8,R8),0(R3)       MOVE SD NAME INTO THE TABLE
         STH   R5,8(,R8)           PUT ESD # INTO TABLE
         AL    R8,4(,R2)           BUMP BY LENGTH OF A TABLE ENTRY
         ST    R8,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT
         SPACE 2
*
*        ACCUMULATE DATA FOR THE SORT RECORD  -
*
         AP    SKCST,=P'1'         # OF CSECTS IN MODULE
         SPACE 1
         CLC   =C'DFS',0(R3)       IS THIS AN IMS MODULE  ?
         BNE   NOTIMS              NO - BRANCH
         MVI   SKTYPE+4,C'I'       SET IMS TYPE
         B     NOTCOBOL
NOTIMS   CLC   =C'ILB',0(R3)       IS THIS A COBOL MODULE ?
         BNE   NOTCOBOL            NO - BRANCH
         MVI   SKTYPE+3,C'C'       SET COBOL TYPE
NOTCOBOL B     LOOPESD2            GO LOOK AT NEXT CSECT
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE IDR DATA TYPE RECORD.                            *
*                                                                     *
***********************************************************************
         SPACE 1
*
*        FIRST TEST FOR TYPE OF IDR RECORD  -
*
IDR      TM    2(R6),1             IS IT AMASPZAP  ?
         BO    IDRZAP              YES - BRANCH
         TM    2(R6),2             IS IT THE LINKAGE EDITOR  ?
         BO    IDRLINK             YES - BRANCH
*        INSERT OTHER TESTS IN HERE  -
         B     GETLOOP             WE DO NOT WANT THIS IDR RECORD
         SPACE 2
*
*        AMASPZAP  - SUPERZAP IDR RECORD  -
*
IDRZAP   LA    R5,4(,R6)           POINT TO FIRST ZAP DATA
         IC    R8,3(,R6)           GET # OF ENTRIES
         N     R8,MASK             GET LAST 6 BITS ONLY
         LTR   R8,R8               ARE THERE ANY ENTRIES  ?
         BNP   GETLOOP             NO - BTANCH
         SPACE 1
ZAPLOOP2 EQU   *
         L     R4,TABLESD          POINT TO CESD TABLE
         LM    R1,R3,0(R4)         GET POINTERS TO SLOTS
         SPACE 1
ZAPLOOP  CLC   8(2,R1),0(R5)       TRY TO MATCH ESD # WITH A TABLE ENTR
         BE    PUTZAP              GOT ONE - BRANCH
         BXLE  R1,R2,ZAPLOOP       SCAN THROUGH THE TABLE
         B     ERROR7              TABLE ENTRY NOT FOUND
         SPACE 1
*
*        ACCUMULATE COUNT OF ZAP RECORDS, AND HWM ZAP DATE  -
*
PUTZAP   AP    SKZAP,=P'1'         COUNT # OF ZAPS
         CP    SKDTZ,2(3,R5)       IS THIS A LATER ZAP THAN PREVIOUS ?
         BNL   NOMOREZ             NO - BRANCH
         ZAP   SKDTZ,2(3,R5)       ACCUMULATE HWM OF ZAP DATE
*
*        INDEX THROUGH THE ZAP IDR RECORD  -
*
NOMOREZ  LA    R5,13(,R5)          BUMP TO NEXT ZAP ENTRY
         BCT   R8,ZAPLOOP2         AND WORK ON IT
         B     GETLOOP             GET NEXT INPUT RECORD
         SPACE 3
*
*        GOT LINK-EDIT RECORD,
*        CAN NOW ACCUMULATE THE LINK-EDIT DATE  -
*
IDRLINK  EQU   *
         TM    SWITCH,X'80'        HAVE WE ALREADY GOT THE LINK-DATE ?
         BO    ERROR8              YES - BRANCH
         OI    SWITCH,X'80'        SET FLAG 'GOT LINK-DATE'
         ZAP   SKDTL,15(3,R6)      DATE LINKED
         B     GETLOOP             GO GET ANOTHER RECORD
         SPACE 1
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO THE SORT                                           *
*                                                                     *
***********************************************************************
         SPACE 1
*        COUNT # OF RECORDS SORTED  -
EODAD    L     R1,CSREC            COUNT # OF RECORDS
         AL    R1,=F'1'            - PASSED TO THE SORT
         ST    R1,CSREC            -
         SPACE 1
*        SET SORT-KEY DATE TO THE HIGHER OF  -
*              - DATE LINKED
*              - DATE OF LAST ZAP
         ZAP   SKDATE,SKDTL        LINK DATE
         CP    SKDATE,SKDTZ        IS LATEST ZAP LATER  ?
         BNL   EODAD1              NO - BRANCH
         ZAP   SKDATE,SKDTZ        HWM ZAP DATE
EODAD1   OI    SKDATE+2,X'0F'      ENSURE A GOOD SORT KEY
         SPACE 1
         LA    R1,OUTREC           POINT TO RECORD TO PASS TO THE SORT
         LA    R15,12              INSERT A RECORD
         SPACE 1
GOTATTR  L     R13,4(,R13)
         L     R14,12(,R13)
         RETURN (2,12),T,RC=(15)
         SPACE 2
*        END OF THE PDS - MUST TELL THE SORT NO MORE RECORDS  -
ENDPDS   CLC   CSREC,=F'0'         DO WE HAVE ANY RECORDS TO SORT
         BE    ERROR9              NO - BRANCH
         SPACE 1
*        CLOSE DCBS FOR THE PDS  -
         CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE
         SPACE 1
*        FREE THE BUFFRE USED TO READ THE MEMBERS  -
         L     R0,BUFFER           GET LENGTH AND S.P.
         L     R1,DECB+12          POINT TO BUFFER
         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN
         SPACE 1
*        FREE THE CESD TABLE  -
         L     R0,GETLEN           GET LENGTH & SP.
         L     R1,TABLESD          POINT TO TABLE
         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN
         SPACE 1
*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -
         FREEPOOL DIRDCB
         SPACE 1
         LA    R15,8               SET 'DO NOT RETURN' CODE
         B     GOTATTR             RETURN TO THE SORT - LAST TIME
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
         SPACE 1
*        ERROR IN RDJFCB  -
ERROR2   LA    R2,MEMDCB           POINT TO DCB
         ABEND 2,DUMP
         SPACE 1
*        ERROR IN OBTAIN  -
ERROR3   LA    R2,CAMLIST          POINT TO CAMLST
         ABEND 3,DUMP
         SPACE 1
*        DATASET TO BE PROCESSED IS NOT A PDS  -
ERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL
         ABEND 4,DUMP
         SPACE 1
*        CANNOT OPEN PDS DCBS  -
ERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB
         LA    R3,MEMDCB           POINT TO MEMBER DCB
         ABEND 5,DUMP
         SPACE 1
*
*        CESD TABLE HAS OVERFLOWED -
*              R2 POINTS TO THE TABLE -
ERROR6   ABEND 6,DUMP
         SPACE 1
*        WE HAVE A ZAP RECORD, AND NO SD ENTRY WITH A CORRESPONDING
*        ESD # IN A PREVIOUS CESD RECORD.
*
*              R4 = CESD TABLE POINTER
*              R5 = POINTER TO ZAP RECORD WE ARE WORKING ON
*              R6 = POINTER TO IDR DATA RECORD
ERROR7   ABEND 4,DUMP
         SPACE 1
*        MORE THAN 1 LINK-EDIT IDR RECORD  -
*              R6 POINTS TO THE SECOND ONE FOUND
ERROR8   ABEND 8,DUMP
         SPACE 1
*        NO RECORDS FOUND TO PASS TO THE SORT  -
*         THE PDS CONTAINS NO MEMBERS CREATED BY THE LINKAGE-EDITOR
ERROR9   ABEND 9,DUMP
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*        C O N S T A N T S                                            *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
SAVEXIT  DC    9D'0'               REGISTER SAVE AREA
         SPACE 1
MASK     DC    F'63'               MASK FOR 6 BITS   2 - 7
MASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7
SWITCH   DC    X'00'               SWITCHES
*        X'80' = THE LINK-EDIT IDR RECORD HAS BEEN READ FOR THIS MEM.
         SPACE 1
*        FIELDS RELATING TO THE PDS  -
TTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING
         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB
         SPACE 1
BUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN
BUFFLEN  DC    H'0'                -
GETLEN   DC    0F'0',X'03001000'   SP + LENGTH FOR CESD TABLE
         SPACE 1
CPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS
CMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER
CPREC    DC    F'0'                # OF READS FOR THE PDS
CSREC    DC    F'0'                # OF RECORDS PASSED TO THE SORT
         SPACE 1
TABLESD  DC    F'0'                POINTER TO CESD TABLE
DIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER
LASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS
EXLST    DC    0F'0',X'87',AL3(JFCB)
         SPACE 1
*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -
         ORG   *-240
TABLE1   EQU   *
         ORG
         DC    C'0123456789ABCDEF'
         SPACE 1
*        OUTPUT RECORD  -
OUTREC   DC    0D'0'
         DC    40X'00'             AREA TO BUILD SORT RECORD
         SPACE 1
         DC    0D'0'
         LTORG
         DC    0D'0'
         SPACE 1
CAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA
         SPACE 1
JFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO
AREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL
DIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK
         SPACE 1
*        D C B S  -
         PRINT NOGEN
*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -
MEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X
               EODAD=EODAD
         SPACE 1
*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -
DIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X
               LRECL=256,BUFNO=100
         PRINT GEN
         DROP  R10
         EJECT
***********************************************************************
*                                                                     *
*        E35 EXIT                                                     *
*                                                                     *
***********************************************************************
         DC    0D'0'
E35      SAVE  (14,12),T,E35       SAVE REGISTERS
         LR    R10,R15             ESTABLISH A BASE
         USING E35,R10             -
         LA    R12,SAVE35          CHAIN SAVE AREAS
         ST    R12,8(,R13)         -
         ST    R13,4(,R12)
         LR    R13,R12
         SPACE 2
*        GET RECORD LEAVING THE SORT, AND TEST FOR EOF  -
         L     R11,0(,R1)          POINT TO RECORD LEAVING THE SORT
         LA    R11,0(,R11)         ZERO HI-ORDER BYTE
         LTR   R11,R11             TEST FOR EOF
         BNP   ENDE35              NO MORE RECORDS - BRANCH
         USING SKREC,R11           FORMAT OF SORTED RECORD
         SPACE 2
*
*        OPEN SYSPRINT IF NOT OPEN  -
*
         TM    SYSPRINT+48,X'10'   IS SYSPRINT OPEN ?
         BO    BUILD               YES - BRANCH
         SPACE 1
         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT
         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?
         BO    GETIME              YES - BRANCH
         SPACE 1
*        UNABLE TO OPEN SYSPRINT  -
         ABEND 20,DUMP             ABEND
         SPACE 1
*        GET TIME AND DATE  -
GETIME   TIME  DEC
         ST    R0,TIME             SAVE TIME
         ST    R1,DATE             SAVE DATE
         MVO   TIM,TIME(2)         SAVE TIME
         SPACE 1
*        GET JOBNAME OF JOB, AND SAVE IT  -
         EXTRACT FIELD1,FIELDS=(TIOT)
         L     R1,FIELD1           POINT TO TIOT
         MVC   JNAME,0(R1)         SAVE JOBNAME
*
*        BUILD A PRINT LINE  -
*
BUILD    LA    R3,LINE             R3 WILL POINT TO DETAIL PRINT LINE
         USING DETLINE,R3          -
         MVI   LINE,C' '           BLANK THE PRINT LINE
         MVC   LINE+1(131),LINE    -
         SPACE 1
*        LATEST ZAP DATE  -
         CP    SKZAP,=P'0'         ARE THERE ANY ZAPS ?
         BE    PRINDL              NO - BRANCH
         MVC   DETDTZ-1(7),PAT01
         ED    DETDTZ-1(7),SKDTZ
         SPACE 1
*        DATE LINKED  -
PRINDL   MVC   DETDTL-1(7),PAT01
         ED    DETDTL-1(7),SKDTL
         SPACE 1
*        CSECT TYPES  -
         MVC   DETTYPE,SKTYPE
         SPACE 1
*        NUMBER OF ZAPS  -
         MVC   DETZAP,PAT02
         ED    DETZAP,SKZAP
         SPACE 1
*        NUMBER OF CSECTS  -
         MVC   DETCST,PAT02
         ED    DETCST,SKCST
         SPACE 1
*        MODULE ENTRY POINT  -
         UNPK  DWA(7),SKEP(4)
         MVC   DETEP,DWA
         TR    DETEP,TABLE2
         SPACE 1
*        MODULE SIZE  -
         UNPK  DWA(7),SKSIZE(4)
         MVC   DETSIZE,DWA
         TR    DETSIZE,TABLE2
         SPACE 1
*        MODULE ATTRIBUTES  -
         UNPK  DWA(5),SKATTR(3)
         MVC   DETATTR,DWA
         TR    DETATTR,TABLE2
         SPACE 1
*        TTRC  -
         UNPK  DWA(9),SKTTRC(5)
         MVC   DETTTRC,DWA
         TR    DETTTRC,TABLE2
         SPACE 1
*        MEMBER NAME  -
         MVC   DETMEM,SKMEM
         SPACE 2
*
*        TEST  FOR HEADINGS REQUIRED  -
*
         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?
         BL    NOHEAD              NO - BRANCH
         SPACE 1
         ZAP   LINENO,=P'0'        RESET LINE COUNTER
         AP    PAGE,=P'1'          INCREMENT PAGE #
         SPACE 1
         MVI   HCNTL,X'8B'         SKIP TO 01
         MVI   HLINE,C' '          BLANK HEADING PRINT LINE
         MVC   HLINE+1(131),HLINE  -
         LA    R2,HCNTL            POINT TO PRINT LINE
         BAL   R9,PRINT            GO PRINT
         SPACE 1
         MVC   HLINE+110(6),PAT02
         ED    HLINE+110(6),PAGE   EDIT PAGE #
         MVC   HLINE+106(4),=C'PAGE'
         MVC   HLINE+90(7),PAT01
         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD
         MVC   HLINE+83(5),=C'DATE:'
         MVC   HLINE+30(L'HEAD01),HEAD01
         MVC   HLINE(8),JNAME
         MVI   HCNTL,X'09'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 1
         MVC   HLINE+90(7),PAT03
         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM
         MVC   HLINE+83(5),=C'TIME:'
         MVI   HCNTL,X'19'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 2
*        PUT DSNAME = AND VOLSER =  -
         L     R3,=A(JFCB)         POINT TO JFCB READ IN E15 EXIT
         MVC   HLINE+25(44),0(R3)  MOVE DSNAME
         MVC   HLINE+16(8),=C'DSNAME ='
         MVI   HCNTL,X'09'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 1
         MVC   HLINE+25(6),118(R3) MOVE VOLSER
         MVC   HLINE+16(8),=C'VOLUME ='
         MVI   HCNTL,X'19'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 1
         MVC   HLINE(132),HEAD02
         MVI   HCNTL,X'09'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 1
         MVC   HLINE(132),HEAD03
         MVI   HCNTL,X'09'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 1
         MVC   HLINE(132),HEAD04
         MVI   HCNTL,X'19'
         LA    R2,HCNTL
         BAL   R9,PRINT
         SPACE 2
NOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #
         LA    R2,CNTL             POINT TO DETAIL PRINT LINE
         MVI   CNTL,X'09'
         BAL   R9,PRINT            PRINT IT
         SPACE 2
*
*        RETURN TO SORT, DELETE A RECORD  -
*
         LA    R15,12              DELETE A RECORD CODE
GOBACK   L     R13,4(,R13)
         RETURN (14,12),T,RC=(15)
         SPACE 2
ENDE35   CLOSE (SYSPRINT)          CLOSE SYSPRINT
         LA    R15,8               SET 'DO NOT RETURN' CODE
         B     GOBACK              RETURN TO SORT FOR LAST TIME
         EJECT
***********************************************************************
*                                                                     *
*        PRINT A LINE SUBROUTINE                                      *
*                                                                     *
***********************************************************************
PRINT    LR    R0,R2               POINT TO LINE TO PRINT
         PUT   SYSPRINT            PUT IT
         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED
         MVC   1(131,R2),0(R2)     -
         BR    R9                  RETURN
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*        C O N  S T A N T S                                           *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
SAVE35   DC    9D'0'               REGISTER SAVE AREA
JNAME    DC    CL8' '              JOBNAME OF THIS JOB
FIELD1   DC    F'0'                POINTER TO TIOT
         SPACE
*        DETAIL PRINT LINE  _
CNTL     DC    X'09'
LINE     DC    132C' '
         SPACE 1
*        HEADING PRINT LINE  -
HCNTL    DC    X'8B'
HLINE    DC    132C' '
         SPACE 1
PAT01    DC    XL7'4021204B202020'
PAT02    DC    XL6'402020202120'
PAT03    DC    XL7'402120204B2020'
         SPACE 1
PAGE     DC    PL3'0'              CURRENT PAGE #
LINENO   DC    PL2'99'             CURRENT LINE #
MAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE
         SPACE 1
DWA      DC    2D'0'               WORK SPACE
TIME     DC    F'0'
TIM      DC    X'00000F'
DATE     DC    F'0'
         SPACE 1
HEAD01   DC    C'T W A - PDS LISTING - LINK/ZAP DATE REPORT'
HEAD02   DC    CL132'        MEMBER             LINK           ENTRY   X
                 CSECT    ZAP    CSECT     DATE   LATEST'
HEAD03   DC    CL132'         NAME       TTRC   ATTR  LENGTH   POINT   X
                 COUNT   COUNT   TYPES    LINKED    ZAP'
HEAD04   DC    CL132'       --------  --------  ----  ------  ------   X
                 -----   -----   -----    ------  ------'
         DC    0D'0'
         LTORG
         DC    0D'0'
         ORG   *-240
TABLE2   EQU   *
         ORG
         DC    C'0123456789ABCDEF'
         PRINT NOGEN
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBM,  X
               BLKSIZE=1995
         DC    4D'0'
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF THE RECORD SENT TO THE SORT                        *
*                                                                     *
***********************************************************************
SKREC    DSECT
SKDATE   DS    PL3 -               DATE OF LAST LINK OR ZAP
SKMEM    DS    CL8 -               MEMBER NAME
SKTTRC   DS    XL4 -               TTRC
SKATTR   DS    XL2 -               LINK-EDIT ATTRIBUTES
SKSIZE   DS    XL3 -               SIZE OF MODULE
SKEP     DS    XL3 -               ENTRY POINT OF MODULE
SKCST    DS    PL3 -               COUNT OF # OF CSECTS
SKZAP    DS    PL3 -               COUNT OF # OF ZAPS
SKTYPE   DS    CL5 -               TYPE OF CSECT(S)
SKDTL    DS    PL3 -               DATE OF LINK-EDIT
SKDTZ    DS    PL3 -               DATE OF LATEST ZAP
SKEND    EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF THE DETAIL PRINT LINE                              *
*                                                                     *
***********************************************************************
DETLINE  DSECT
         DS    CL7 -
DETMEM   DS    CL8 -               MEMBER NAME
         DS    CL2 -
DETTTRC  DS    XL8 -               TTRC
         DS    CL2 -
DETATTR  DS    XL4 -               MODULE ATTRIBUTES
         DS    CL2 -
DETSIZE  DS    CL6 -               MODULE SIZE
         DS    CL2 -
DETEP    DS    CL6 -               MODULE ENTRY POINT
         DS    CL4 -
DETCST   DS    CL6 -               NUMBER OF CSECTS
         DS    CL2 -
DETZAP   DS    CL6 -               NUMBER OF ZAPS
         DS    CL3 -
DETTYPE  DS    CL5 -               CSECT TYPES
         DS    CL4 -
DETDTL   DS    CL6 -               DATE LINKED
         DS    CL2 -
DETDTZ   DS    CL6 -               DATE OF LATEST ZAP
         END   WHATSNEW
