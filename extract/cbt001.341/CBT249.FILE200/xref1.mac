XREF     TITLE 'TWA EXTERNAL SYMBOL CROSSREF ROUTINE'
***********************************************************************
*                                                                     *
*        XREF1                                                        *
*        --------                                                     *
*                                                                     *
*        SCANNS A PDS FOR ALL EXTERNAL SYMBOLS                        *
*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *
*                                                                     *
*        PREPARES A FILE TO GENERATE AN EXTERNAL SYMBOL CROSS-        *
*        REFERENCE FOR THE ENTIRE DATA SET (OR DATA SETS IF           *
*        MULTIPLE FILES ARE COMBINED INTO A SINGLE REPORT RUN)        *
*        THE SYSUT2 OUTPUT FILE FROM THIS PROGRAM IS FED INTO         *
*        THE REPORT PROGRAM /XREF2/ TO PRODUCE THE FINAL REPORT.      *
*                                                                     *
*        REX WIDMER        PHONE 816-464-6671                         *
*                                                                     *
*        TWA  KANSAS CITY ADMINISTRATIVE CENTER                       *
*                                                                     *
*        JANUARY, 1979                                                *
*                                                                     *
*                                                                     *
*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *
*        OF THE GUIDE COBOL GROUP ON AN AS IS, WHERE IS BASIS.        *
*        IT IS DISTRIBUTED WITHOUT WARRANTY OF ANY KIND, EITHER       *
*        EXPRESSED OR IMPLIED.  IT IS DISTRIBUTED IN HOPE THAT        *
*        IT MAY HELP OTHER MEMBERS OF THE GROUP AVOID RE-INVENTING    *
*        AT LEAST A FEW WHEELS.                                       *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        SAMPLE JCL FOR ENTIRE STREAM                                 *
*                                                                     *
*           //S1 EXEC PGM=XREF1                                       *
*           //SYSUT1  DD  DSN=SYPP.PGMLIB,DISP=SHR                    *
*           //*       THIS IS THE PDS TO SEARCH                       *
*           //SYSUT2  DD  DSN=&&ESD,DISP=(,PASS),                     *
*           //        UNIT=SYSVIO,SPACE=(CYL,(5,5))                   *
*           //*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *
*           //S2 EXEC PGM=XREF2                                       *
*           //SYSPRINT DD  SYSOUT=A,                                  *
*           //         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)         *
*           //*        THIS IS THE FINAL REPORT                       *
*           //ESDIN   DD  DSN=&&ESD,DISP=(OLD,DELETE)                 *
*           //*         INPUT TO REPORTING PROCESS                    *
*           //SYSOUT  DD  SYSOUT=A  FOR SORT/MERGE                    *
*           //SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT       *
*                                                                     *
*        DD-CARD REQUIREMENTS                                         *
*                                                                     *
*           SYSUT1           PDS TO SCAN FOR EXTERNAL SYMBOLS         *
*           SYSUT2           OUTPUT FILE NAME/MODULE/TYPE/DSN         *
*                                                                     *
***********************************************************************
         EJECT
XREF1    CENTER TYPE=C
         SYMREGS
         EJECT
         OPEN  (SYSUT2,(OUTPUT))   OPEN OUTPUT FILE
         TM    SYSUT2+48,X'10'     DID IT OPEN O.K.   ?
         BO    OKSYSUT2             YES, CONTINUE
         ABEND 99                   ELSE QUIT
OKSYSUT2 EQU   *
         SPACE 1
*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -
         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS
         LTR   R15,R15             DID IT DO THAT O.K.  ?
         BNZ   ERROR2              NO - BRANCH
         SPACE 1
*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -
         OBTAIN CAMLIST            ISSUE OBTAIN
         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?
         BNZ   ERROR3              NO - BRANCH
         SPACE 1
*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -
         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1
         BZ    ERROR4              NOT A PDS - BRANCH
         SPACE 1
*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -
         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN
         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?
         BZ    ERROR5              NO - BRANCH
         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?
         BZ    ERROR5              NO - BRANCH
         SPACE 1
*        GET A BUFFER TO READ THE MEMBERS INTO  -
         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB
         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN
         GETMAIN R,LV=(0)          ISSUE GETMAIN
         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB
         SPACE 1
*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -
         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER
ZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER
         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER
         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER
         B     GET                 NOW START OUT BY READING DIRECTORY
*
*        GET NEXT MEMBER IN THE PDS  -
*
*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -
EODAD    EQU   *
LOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER
         IC    R3,11(,R2)          GET LENGTH OF USER DATA
         N     R3,MASK2            LENGTH IS 5 BITS
         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS
         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC
         AR    R3,R2               POINT TO NEXT MEMBER
         SPACE 1
*        FIND  THE END OF THE DIRECTORY BLOCK  -
         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK
         LH    R5,0(,R4)           GET LENGTH USED
         AR    R5,R4               POINT TO END OF THE BLOCK
         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?
         BH    GOTNEXT             NO - BRANCH
         SPACE 1
*        READ THE NEXT DIRECTORY BLOCK  -
GET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK
         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK
GOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER
         SPACE 1
         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER
         SPACE 1
*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -
         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES
         BE    ENDPDS              GOT TO END - BRANCH
         SPACE 1
*        COUNT # OF MEMBERS READ  -
         L     R1,CPMEM            GET # OF MEMBERS READ
         AL    R1,=F'1'            INCREMENT BY 1
         ST    R1,CPMEM            AND SAVE IT
         SPACE 2
         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY
         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER
         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER
         SPACE 1
*
*        TEST FOR ALIAS  -
*
         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY
         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?
*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -
         SPACE 2
*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -
         IC    R3,11(,R2)          GET LENGTH OF USER DATA
         N     R3,MASK2            -
         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS
         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH
         EJECT
***********************************************************************
*                                                                     *
*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *
*        AND WRITING IT TO THE OUTPUT FILE.                           *
*                                                                     *
***********************************************************************
         SPACE 1
GETLOOP  EQU   *
         L     R6,DECB+12          POINT TO INPUT AREA
         READ  DECB,SF,MF=E        READ THE NEXT RECORD
         CHECK DECB
         SPACE 1
*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -
         L     R1,CMREC            COUNTS # OF INPUT RECORDS
         AL    R1,=F'1'            INCREMENT
         ST    R1,CMREC            AND SAVE
         SPACE 1
         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS
         AL    R1,=F'1'            BUMP BY 1
         ST    R1,CPREC            AND SAVE
         SPACE 3
*
*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -
*
         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.
         BO    EODAD               YES - BRANCH ( WE ARE DONE )
         SPACE 1
         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?
         BE    CESD                YES - BRANCH
         B     GETLOOP             GO GET ANOTHER RECORD
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE CESD TYPE INPUT RECORD                           *
*                                                                     *
***********************************************************************
         SPACE 1
CESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY
         LH    R4,6(,R6)           GET LENGTH OF ESD DATA
         AR    R4,R3               POINT TO END OF RECORD
         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC
         SPACE 1
LOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?
         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD
         SPACE 1
         L     R1,CCSCAN           # OF CSECTS SCANNED
         AL    R1,=F'1'            INCREMENT BY 1
         ST    R1,CCSCAN           AND SAVE IT
         SPACE 1
*        R3 NOW POINTS TO THE NAME IN THE RECORD - BUILD OUTPUT RECORD
*        AND WRITE IT OUT FOR PROCESSING
         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY
*        TYPE   -
         LA    R15,TYPTABL         POINT TO TABLE END
         LA    R1,TYPTAB           POINT TO TABLE
         MVC   DWA(1),8(R3)        GET SEGMENT TYPE
         NI    DWA,X'0F'
NEXTYPE  CLC   0(1,R1),DWA         TRY TO MATCH WITH A TABLE ENTRY
         BE    GOTYPE              GOT A HIT - BRANCH
         CR    R1,R15              IS THIS THE  END OF THE TABLE  ?
         BNL   NOTYPE              YES - BRANCH
         LA    R1,3(,R1)           INDEX ALONG THE TABLE
         B     NEXTYPE             AND TRY NEXT ENTRY
GOTYPE   MVC   OUTTYP,1(R1)        MOVE TYPE TO PRINT LINE
         SPACE 1
*        NAME   -
NOTYPE   MVC   OUTNAME,0(R3)       MODULE NAME
         SPACE 1
*        MEMBER NAME  -
         MVC   OUTMEM,0(R2)
         SPACE 2
*        PUT DSNAME = AND VOLSER =  -
         LA    R1,JFCB             POINT TO JFCB
         MVC   OUTDSN(44),0(R1)  MOVE DSNAME
         MVC   OUTSER(6),118(R1) MOVE VOLSER
         SPACE 2
         PUT   SYSUT2,OUTREC       WRITE OUT CROSSREF RECORD
         B     LOOPESD2
LOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY
         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #
         B     LOOPESD             AND LOOK AT IT
         EJECT
***********************************************************************
*                                                                     *
*        END OF THE PDS - CLEAN UP AND EOJ                            *
*                                                                     *
***********************************************************************
         SPACE 1
*        CLOSE DCBS FOR THE PDS  -
ENDPDS   CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE
         SPACE 1
*        FREE THE BUFFER USED TO READ THE MEMBERS  -
         L     R0,BUFFER           GET LENGTH AND S.P.
         L     R1,DECB+12          POINT TO BUFFER
         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN
         SPACE 1
*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -
         FREEPOOL DIRDCB
         SPACE 1
GOBACK   RETRN RC=0
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
         SPACE 1
*        ERROR IN RDJFCB  -
ERROR2   LA    R2,MEMDCB           POINT TO DCB
         ABEND 2,DUMP
         SPACE 1
*        ERROR IN OBTAIN  -
ERROR3   LA    R2,CAMLIST          POINT TO CAMLST
         ABEND 3,DUMP
         SPACE 1
*        DATASET TO BE PROCESSED IS NOT A PDS  -
ERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL
         ABEND 4,DUMP
         SPACE 1
*        CANNOT OPEN PDS DCBS  -
ERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB
         LA    R3,MEMDCB           POINT TO MEMBER DCB
         ABEND 5,DUMP
         SPACE 1
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*        C O N S T A N T S                                            *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         SPACE 1
MASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7
*        FIELDS RELATING TO THE PDS  -
TTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING
         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB
         SPACE 1
BUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN
BUFFLEN  DC    H'0'                -
         SPACE 1
CPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS
CMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER
CPREC    DC    F'0'                # OF READS FOR THE PDS
CCSCAN   DC    F'0'                # OF CSECTS SCANNED
CCHIT    DC    F'0'                # OF CSECTS WE GOT A HIT ON
         SPACE 1
DIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER
LASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS
EXLST    DC    0F'0',X'87',AL3(JFCB)
         SPACE 1
*        TABLE  USED TO CONVERT ESD TYPE TO PRINTABLE TYPE FORMAT  -
TYPTAB   DC    X'00',C'SD'         SECTION DEFINITION
         DC    X'02',C'ER'         EXTERNAL REFERENCE
         DC    X'03',C'LR'         LABEL REFERENCE
         DC    X'04',C'PC'         PRIVATE CODE
         DC    X'05',C'CM'         COMMON AREA
         DC    X'06',C'PR'         PSEUDO REGISTER
         DC    X'07',C'NL'         NULL
TYPTABL  DC    X'0A',C'WX'         WEAK EXTERNAL REFERENCE
         SPACE 1
         DC    0D'0'
         LTORG
         DC    0D'0'
         SPACE 1
CAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA
         SPACE 1
JFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO
AREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL
DIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK
         SPACE 1
DWA      DC    1D'0'               GENERAL WORK AREA
JNAME    DC    CL8' '              JOBNAME OF THIS JOB
FIELD1   DC    F'0'                POINTER TO TIOT
OUTREC   DC    XL80'00'            OUTPUT RECORD ASSEMBLY AREA
         ORG   OUTREC
OUTMEM   DS    CL8                 MEMBER NAME
OUTDSN   DS    CL44                DATASET NAME
OUTSER   DS    CL6                 VOL SER OF DSN
OUTNAME  DS    CL8                 EXTERNAL NAME FOUND
OUTTYP   DS    CL2                 EBCDIC TYPE OF EXTERNAL SYMBOL
         ORG
*        D C B S  -
         PRINT NOGEN
*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -
MEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X
               EODAD=EODAD
         SPACE 1
*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -
DIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X
               LRECL=256,BUFNO=100
         SPACE 1
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80,               X
               RECFM=FBS,BLKSIZE=2000,BUFNO=5
         PRINT GEN
         LTORG
         END
