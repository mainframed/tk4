AMDPRSCD TITLE 'AMDAHL AMDPRDMP SCD FORMATTER.'
         MACRO
&TAG     SYMBL &TEXT
         LCLC  &LABEL
&LABEL   SETC  '&TAG'
         AIF   ('&TAG' NE '').DOIT
&LABEL   SETC  'L&SYSNDX'
.DOIT    ANOP
&LABEL   DC    0C&TEXT,AL1(L'&LABEL),C&TEXT '
         MEND
         SPACE 1
         MACRO
         REGISTER
         LCLA  &N
.LOOP    ANOP
R&N      EQU   &N
&N       SETA  &N+1
         AIF   (&N LE 15).LOOP
         MEND
         SPACE 1
         MACRO
&L       PRINTBUF &TEXT
         LCLC  &L2
&L2      SETC  '&L'
         AIF   ('&TEXT' EQ '').NOMOVE
&L2      L     R15,ADPLBUF         GET BUFFER ADDRESS.
         MVC   0(120,R15),BLANKS   BLANK OUT PREVIOUS JUNK.       84240
         MVC   0(L'&TEXT,R15),&TEXT MOVE ITEM TO BUF'R.
&L2      SETC  ''
.NOMOVE  ANOP
&L2      LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLPRNT        EXTRACT PRINT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO PRINT SUBROUTINE.
         MEND
         SPACE 1
         MACRO
&L       FORMAT &PATTERN,&BADRC=
&L       LA    R0,&PATTERN         ADDRESS FORMAT PATTERN.
         LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLFRMT        EXTRACT FORMAT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO FORMAT SUBROUTINE.
         AIF   ('&BADRC' EQ '').NORC
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   &BADRC              NON-ZERO, TAKE ABNORMAL EXIT.
.NORC    ANOP
         MEND
         EJECT
         MACRO
&LABEL   LOAD  &RESULT,&INPUT,&BADRC=
&LABEL   LA    R0,&INPUT           ADDRESS INPUT WITH REGISTER 0.
         LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLMEMA        LOAD ADDR OF MEMORY ROUTINE.
         BALR  R14,R15             BRANCH TO MEMORY SERVICE ROUTINE.
         LTR   R15,R15             MEMORY AVAILABLE?
         BNZ   &BADRC              NO, WE CAN'T CONTINUE.
         LR    R1,R0               LOAD RESULT POINTER INTO R1.
         ICM   &RESULT,B'1111',0(R1) LOAD AND TEST ACQUIRED STORAGE.
         MEND
         SPACE 1
*** NOW THAT YOU'VE SEEN THE MACROS, WE'LL SAVE SOME PAPER.
         SPACE 1
         PRINT ON,NOGEN,NODATA
         EJECT
***********************************************************************
*                                                                     *
*                         AMDPRSCD                                    *
*                                                                     *
*     THIS PROGRAM IS DESIGNED TO EXECUTE AS A USER EXIT TO THE       *
*     MVS AMDPRDMP SERVICE AID.  ITS FUNCTION IS TO FORMAT THE        *
*     STATUS COLLECTION DATA BLOCKS USED IN IOS HOT I/O DETECTION     *
*     AND RECOVERY.  THE PROGRAM IS EXECUTED WHENEVER THE "MAPSCD"    *
*     CONTROL CARD IS ENCOUNTERED IN THE AMDPRDMP SYSIN FILE.  IN     *
*     ORDER TO RECOGNIZE THE "MAPSCD" CONTROL CARD, A USER ENTRY MUST *
*     BE MADE IN THE AMDPRECT USER EXIT MODULE.  APPENDIX "C" OF THE  *
*     "OS/VS2 S.P.L.:  SERVICE AIDS" MANUAL DESCRIBED HOW TO PERFORM  *
*     THIS FUNCTION.                                                  *
*                                                                     *
*     THE EXIT FIRST ACCESSED THE CVTDCB FIELD TO DETERMINE IF THE    *
*     PROGRAM IS ANALYZING AN MVS/370 OR MVS/XA DUMP.  IF AN MVS/XA   *
*     DUMP IS BEING ANALYZED, CONTROL IS PASSED TO THE XA VERSION     *
*     OF THE PROGRAM, AMXPRSCD, VIA XCTL.   THE 370-MODE VERSION OF   *
*     THE EXIT USES THE CVT POINTER PROVIDED IN THE ABDUMP PARAMETER  *
*     LIST TO ACCESS THE SELECTABLE UNIT BIT STRING.  IF SU 64 WAS    *
*     NOT PRESENT IN THE DUMP, THEN THERE IS NO CHANNEL-SET-TABLE,    *
*     AND THE SCDS CAN NOT BE ACCESSED VIA POINTERS.  A MESSAGE WILL  *
*     BE PRINTED AND EXECUTION TERMINATED IF SU 64 WAS NOT PRESENT.   *
*     IF SU 64 WAS PRESENT IN THE DUMP, THE CHANNEL-SET-TABLE POINTER *
*     IS ACQUIRED FROM THE CVT.  THEN EACH SCD IS FORMATTED;  FOR     *
*     EACH SCD, THE FLAG BITS ARE INTERPRETED (A MESSAGE IS PRINTED   *
*     IF THE FLAG BIT IS ON).  WHEN 16 SCDS HAVE BEEN FORMATTED FOR   *
*     THE FIRST CST (CPU 0), THE SECOND CST IS ACQUIRED AND THE       *
*     PROCESS REPEATED.  IF THE DUMP IS FROM A UNI-PROCESSOR, THEN    *
*     THERE WILL BE NO SECOND CST; A MESSAGE WILL INDICATE THIS.      *
*                                                                     *
*     THIS EXIT HAS NO OPERANDS.                                      *
*                                                                     *
*     THIS PROGRAM FOLLOWS ALL CONVENTIONS SPECIFIED IN THE ABOVE     *
*     MENTIONED MANUAL.  IT IS REENTRANT AND MAY BE PLACED IN LPA     *
*     TO IMPROVE PERFORMANCE (IF YOU'RE HAVING A WHOLE LOT OF IOS     *
*     PROBLEMS).  ELSE, IT MAY BE PLACED IN LINKLIB OR A USER'S       *
*     STEP LIBRARY.                                                   *
*                                                                     *
***********************************************************************
         SPACE 2
         REGISTER
         EJECT
AMDPRSCD CSECT ,                   ESTABLISH PROGRAM ENTRY POINT.
         USING AMDPRSCD,R15        ESTABLISH TEMPORARY BASE.
         B     START               BRANCH AROUND PROGRAM ID
         DROP  R15                 DONE WITH TEMPORARY BASE.
         SPACE 1
         SYMBL 'AMDPRSCD V03M00 &SYSDATE &SYSTIME COPYRIGHT 1985, AMDAH*
               L CORP., SE TOOLS - SETT010, AMDIPCSE'
        SPACE 1
START    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R12,R15             LOAD PROGRAM BASE.
         USING AMDPRSCD,R12        MAKE CODE ADDRESSABLE.
         LR    R10,R1              PRESERVE PARAMETER REGISTER.
         USING ABDPL,R10           MAKE PARAMETER DSECT ADDRESSABLE.
         LA    R0,$LENGTH          GET LENGTH OF REENTRANT DSECT.
         ICM   R0,8,ADPLSBPL       INSERT PRDMP SUPPLIED SUBPOOL.
         GETMAIN R,LV=(0)          GETMAIN REENTRANT AREA.
         LR    R2,R1               LOAD ADDRESS IN EVEN REGISTER.
         LA    R3,$LENGTH          GET LENGTH TO ZERO.
         XR    R5,R5               SET FILL CHARACTER.
         MVCL  R2,R4               ZERO THE REENTRANT AREA.
         LR    R11,R1              LOAD REENTRANT BASE REGISTER.
         USING $DSECT,R11          MAKE AREA ADDRESSABLE.
         ST    R13,$SAVE+4         FORWARD CHAIN SAVE AREAS.
         LR    R2,R13              HOLD OLD SAVE ADDRESS.
         LA    R13,$SAVE           ADDRESS NEW SAVE AREA.
         ST    R13,8(,R2)          BACK CHAIN SAVE AREAS.
         SPACE 1
         ICM   R7,B'1111',ADPLCVT  LOAD CVT ADDRESS FROM DUMP.
         BZ    BADCVT              NOT THERE, WE CAN'T CONTINUE.
         LOAD  R6,CVTDCB(,R7),BADRC=BADCVT GET THE XA-MODE INDICATOR.
         BNM   MODE370             HIGH BIT OFF, 370-MODE DUMP.
         L     R13,4(,R13)         POINT BACK TO CALLER'S SAVE AREA.
         LA    R0,$LENGTH          LOAD LENGTH TO FREEMAIN.
         ICM   R0,B'1000',ADPLSBPL INSERT SUBPOOL INDICATION.
         LR    R1,R11              LOAD ADDRESS OF AREA TO BE FREED.
         FREEMAIN R,LV=(0),A=(1)   FREE THE USER-DEPENDENT AREA.
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.
         PUSH  USING
         USING AMDPRSCD,R15        TEMPORARY ADDRESSABILITY FOR XCTL.
         XCTL  EP=AMXPRSCD         XCTL TO MVS/XA VERSION.
         POP   USING
         EJECT
MODE370  DS    0H
         PRINTBUF TITLE            OUTPUT THE TITLE LINE.
         PRINTBUF ,                AND A BLANK LINE.
         LOAD  R6,CVTIHASU(,R7),BADRC=BADCVT ADDRESS SU BIT STRING.
         LOAD  R6,8(,R6),BADRC=BADSUBIT GET THE DATA FOR SU 64.
         TM    0(R1),X'80'         IS SU 64 PRESENT?
         BNO   BADSU64             NO, THEN SCD.S CAN'T BE ACCESSED.
         SPACE 1
         MVC   $FORMAT1,PATTERN1   MOVE FORMAT PATTERN TO REENT AREA.
         SPACE 1
         LA    R1,$@SCD+1           ADDRESS SCD BUCKET.
         ST    R1,$DATA1            SAVE IN FORMAT LIST.
         LA    R1,TEXT              ADDRESS TEXT PATTERN.
         ST    R1,$TEXT2            SAVE IN FORMAT LIST.
         SPACE 1
         LOAD  R2,CVTCST(,R7),BADRC=BADCVT GET CST POINTER.
         BZ    BADCST                BAD CST IF RESULT ZERO.
         ST    R2,$@CST              SAVE IN OUR DSECT.
         PRINTBUF CST0               PRINT HEADER.
LOOP1    LOAD R2,CSTSCDP(,R2),BADRC=BADCST GET SCD POINTER.
         BZ    BADSCD                BAD SCD IF RESULT ZERO.
         LA    R3,16                 LOAD SCD COUNTER.
LOOP2    ST    R2,$@SCD              STORE VALUE TO BE DECODED.
         ST    R2,$DATA2            STORE ADDRESS AT WHICH TO BEGIN.
         LA    R4,8(,R2)            POINT AT CSW STATUS AREA.
         ST    R4,$DATA3            SAVE NEXT FORMAT ADDRESS.
         LA    R4,12(,R2)           POINT AT REPEAT COUNTER.
         ST    R4,$DATA4            SAVE NEXT FORMAT ADDRESS.
         PRINTBUF ,                PRINT A BLANK LINE.
         FORMAT $FORMAT1,BADRC=BADSCD FORMAT THE LINE.
         LOAD  R1,16(,R2),BADRC=BADSCD GET 1ST CLOCK WORD.
         ST    R1,$DOUBLE           SAVE PAST NEXT "LOAD".
         LOAD  R1,20(,R2),BADRC=BADSCD GET 2ND CLOCK WORD.
         L     R0,$DOUBLE           RELOAD HIGH WORD IN R0.
         BAL   R14,MICROZ           CONVERT INTO YY.DDD HH:MM:SS.
         PRINTBUF ,                 PRINT THE LINE.
         LOAD  R1,4(,R2),BADRC=BADSCD GET THE FLAGS WORD.
         ST    R1,$SCDFLGS          SAVE FOR LATER.
         LA    R4,MSGTBL            ADDRESS TEST-MASK TABLE.
LOOP3    ICM   R5,B'0001',0(R4)     INSERT & CHECK TEST BITS.
         BZ    NEXTSCD              END OF TABLE, GET NEXT SCD.
         XR    R6,R6                ZONK.
         IC    R6,1(,R4)            INSERT FLAG-WORD OFFSET.
         LA    R6,$SCDFLGS(R6)      DISPLACE TO CORRECT BYTE.
         EX    R5,TM1               TEST IF BIT IS ON.
         BNO   NEXT                 NO, SKIP MESSAGE.
         L     R5,2(,R4)            LOAD R5 WITH MESSAGE POINTER.
         XR    R6,R6                ZONK, AGAIN.
         IC    R6,0(,R5)            INSERT MESSAGE LENGTH.
         BCTR  R6,0                 LESS 1 FOR MACHINE CODE.
         L     R15,ADPLBUF          ADDRESS PRINT BUFFER.
         MVC   0(121,R15),BLANKS    CLEAR THE BUFFER.
         EX    R6,MVC1              MOVE MESSAGE TO PRINT BUFFER.
         PRINTBUF ,                 PRINT THE BUFFER.
         TM    2(R4),X'80'          PRINT ONLY 1 OF THESE?
         BO    NEXTSCD              YES, GET THE NEXT SCD.
NEXT     LA    R4,6(,R4)            POINT TO NEXT TEST-MASK ENTRY.
         B     LOOP3                AND CHECK OTHER BITS.
NEXTSCD  LA    R2,32(,R2)           POINT AT NEXT SCD.
         BCT   R3,LOOP2             LOOP THRU 16 TIMES.
         TM    $FLAG,$CPU1          HAVE WE DONE CPU 1 YET?
         BO    RETURN               YES, WE'RE DONE.
         OI    $FLAG,$CPU1          INDICATE WE'RE ON THE SECOND PASS.
         PRINTBUF ,                 PRINT A BLANK LINE.
         PRINTBUF CST1              PRINT SECOND HEADER.
         L     R2,$@CST             GET CST POINTER.
         LA    R2,32(,R2)           POINT TO CPU 1 CST.
         B     LOOP1                AND RUN THE SCD'S AGAIN.
         EJECT
***********************************************************************
*                                                                     *
*     SUBROUTINE MICROZ CONVERTS THE SCD'S TIME OF DAY CLOCK INTO     *
*     PRINTABLE YY.DDD HH:MM:SS VALUES IN THE OUTPUT RECORD.  ON      *
*     INPUT, R0 & R1 CONTAIN THE SCD'S CLOCK VALUE.                   *
*                                                                     *
***********************************************************************
         SPACE 1
MICROZ   STM   R14,R12,12(R13)       SAVE THE CALLER'S REGISTERS.
         SRDL  R0,12                 SHIFT OUT INSIGNIFICANT DIGITS.
         D     R0,=F'60000000'       GET MINUTES SINCE EPOCH.
         LR    R3,R1                 HOLD IN R3 A MOMENT.
         SRDL  R0,32                 MOVE SECONDS REMAINDER TO R0.
         D     R0,=F'1000000'        COMPUTE SECONDS FROM REMAINDER.
         XR    R2,R2                 ZONK FOR DIVIDE.
         D     R2,=F'60'             COMPUTE MINUTES.
         MH    R2,=H'100'            MOVE TO MINUTES POSITION.
         AR    R1,R2                 ADD TO SECONDS.
         XR    R2,R2                 ZONK.
         D     R2,=F'24'             COMPUTE HOURS RESIDUAL.
         MH    R2,=H'10000'          MOVE TO HOURS POSITION.
         AR    R1,R2                 SAVE TIME VALUE IN R1.
         CVD   R1,$DOUBLE            CONVERT TO PACKED.
         L     R1,$DOUBLE+4          SAVE TIME FOR A SECOND.
         XR    R2,R2                 ZONK.
         SH    R3,=H'364'            ACCOUNT FOR TODAY & 1/1/1900.
         SLDL  R2,2                  MULTIPLY BY 4 (YEARS IN DIVIDEND).
         D     R2,=F'1461'           DIVIDE BY # DAYS IN 4 YEARS.
         LA    R3,1(,R3)             ACCOUNT FOR THIS YEAR.
         MH    R3,=H'1000'           SHIFT R3 TO YEARS POSITION.
         SRL   R2,2                  DIVIDE DAYS BY 4.
         AR    R2,R3                 SUM YEARS*1000 + DAYS.
         CVD   R2,$DOUBLE            CONVERT TO PACKED.
         L     R0,$DOUBLE+4          LOAD SIGNIFICANT VALUE.
         SRL   R0,4                  SHIFT OUT SIGN.
         STCM  R0,B'0111',$DOUBLE    SAVE YY.DDD IN $DOUBLE(3).
         SRL   R1,4                  SHIFT OUT SIGN.
         STCM  R1,B'0111',$DOUBLE+3  SAVE HH:MM:SS IN $DOUBLE+3(3).
         L     R15,ADPLBUF           GET BUFFER ADDRESS.
         MVC   64(L'EDITMASK,R15),EDITMASK MOVE IN EDIT MASK.
         ED    64(L'EDITMASK,R15),$DOUBLE EDIT IN DATA.
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS.
         BR    R14                   RETURN TO CALLER.
         EJECT
BADCVT   PRINTBUF MESSAGE1         PRINT ERROR TEXT.
         B     SETRC               BO SET RETURN CODE.
         SPACE 1
BADCST   PRINTBUF MESSAGE2         PRINT ERROR TEXT.
         B     SETRC               SET RETURN CODE.
         SPACE 1
BADSUBIT PRINTBUF MESSAGE5         INDICATE THAT SU BITS INACCESSABLE.
         B     SETRC               SET RETURN CODE.
         SPACE 1
BADSU64  PRINTBUF MESSAGE4         INDICATE SU 64 IS NOT ON.
         SPACE 1
BADSCD   PRINTBUF MESSAGE3         PRINT ERROR TEXT.
         EJECT
***********************************************************************
*                                                                     *
*     NORMAL AND ABNORMAL RETURN POINT.  AN ENDING MESSAGE IS         *
*     PRINTED, AND THE REENTRANT WORK AREA IS FREED (SUBPOOL NUMBER   *
*     WAS PROVIDED IN THE ABDUMP PARAMETER LIST).                     *
*                                                                     *
***********************************************************************
         SPACE 1
SETRC    LA    R2,4                SET RETURN CODE.
         B     NOENDMSG            PRDMP PROVIDES ERROR MESSAGE.
         SPACE 2
RETURN   PRINTBUF ENDMSG           PRINT ENDING MESSAGE.
         XR    R2,R2               ZERO RETURN CODE.
NOENDMSG LA    R0,$LENGTH          LOAD LENGTH TO FREEMAIN.
         ICM   R0,8,ADPLSBPL       INSERT SUBPOOL.
         LR    R1,R11              SET ADDRESS TO BE FREED.
         L     R13,4(,R13)         BACK TO CALLER'S SAVE AREA.
         FREEMAIN R,LV=(0),A=(1)   FREE REENTRANT AREA.
         ST    R2,16(,R13)         PUT RETURN CODE IN R15 SLOT.
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.
         BR    R14                 RETURN TO CALLING PROGRAM.
         EJECT
***********************************************************************
*                                                                     *
*                    CONSTANTS AND EQUATES                            *
*                                                                     *
***********************************************************************
         SPACE 2
TITLE    DC    C'AMDAHL STATUS COLLECTION DATA FORMATTING PROGRAM.'
ENDMSG   DC    C'END OF SCD MAPPING PROGRAM.'
BLANKS   DC    CL120' '              A FEW HANDY BLANKS.          84240
         SPACE 1
MESSAGE1 DC    C'CVT COULD NOT BE ACCESSED.'
MESSAGE2 DC    C'CST COULD NOT BE ACCESSED.'
MESSAGE3 DC    C'SCD COULD NOT BE ACCESSED.'
MESSAGE4 DC    C'PROCESSOR SUPPORT-II (SU 64) NOT INSTALLED.'
MESSAGE5 DC    C'SELECTABLE UNIT BIT STRING COULD NOT BE ACCESSED.'
TEXT     DC    C'CSID=DEV=STAT=COUNT=TOT=CLOCK='
         SPACE 1
CST0     DC    C'S.C.D.S FOR CST 0.'
CST1     DC    C'S.C.D.S FOR CST 1.'
          SPACE 1
PATTERN1 DC    X'1C02',AL1(0,0)    SCD ADDRESS.
         DC    AL4(0)              ADDRESS OF VALUE.
         DC    X'0F41',AL1(9,14)   CHANNEL SET ENTRY.
         DC    AL4(0,0)            ADDRESS OF TEXT AND DATA.
         DC    X'0531',AL1(19,23)  DEVICE ENTRY.
         DC    X'0D41',AL1(28,33)  CHANNEL STATUS ENTRY.
         DC    AL4(0)              ADDRESS OF CSW STATUS.
         DC    X'0D51',AL1(38,44)  INTERRUPT REPEAT COUNT ENTRY.
         DC    AL4(0)              ADDRESS OF REPEAT COUNT.
         DC    X'0531',AL1(49,53)  TIMEOUT REPEAT COUNT ENTRY.
         DC    X'0150',AL1(58,0)   TIME-OF-DAY CLOCK ENTRY.
         DC    X'00000000'         ENDING INDICATOR.
         SPACE 1
MSGTBL   DS    0F                  MESSAGE BIT-MASK TABLE.
         DC    X'8000',AL4(MSGTEXT1) RECURSIVE DETECTION.
         DC    X'8001',AL4(MSGTEXT2) TIMEOUT.
         DC    X'4001',AL4(MSGTEXT3) AVAILABILITY INTERRUPT.
         DC    X'2001',AL4(MSGTEXT4) UNSOLICITED INTERRUPT.
         DC    X'1001',AL4(MSGTEXT5) NOT SYSGENNED.
         DC    X'0401',AL4(MSGTEXT6) INV. DEV. & CH. ERR.
         DC    X'0201',AL4(MSGTEXT7) CH. ERR., C.U. CAUSED.
         DC    X'0101',AL4(MSGTEXT8) CH. ERR., NOT C.U. CAUSED.
         DC    X'0102',AL4(MSGTEXTC) IRT RECURSION SET.
         DC    X'C00280',AL3(MSGTEXT9) CHANNEL TYPE CONDITION.
         DC    X'800280',AL3(MSGTEXTA) CONTROL UNIT CONDITION.
         DC    X'4002',AL4(MSGTEXTB) DEVICE CONDITION.
         DC    X'0000'              END MARKER.
         EJECT
MSGTEXT1 SYMBL 'CONDITION HAS BEEN DETECTED RECURSIVELY.'
MSGTEXT2 SYMBL 'CONDITION IS DUE TO TIMEOUT.'
MSGTEXT3 SYMBL 'AVAILABILITY INTERRUPT.'
MSGTEXT4 SYMBL 'UNSOLICITED INTERRUPT.'
MSGTEXT5 SYMBL 'DEVICE NOT SYSGENNED.'
MSGTEXT6 SYMBL 'INVALID DEVICE AND CHANNEL ERROR.'
MSGTEXT7 SYMBL 'CHANNEL ERROR, CONTROL UNIT CAUSED.'
MSGTEXT8 SYMBL 'CHANNEL ERROR, NOT CONTROL UNIT CAUSED.'
MSGTEXT9 SYMBL 'CHANNEL-TYPE CONDITION.'
MSGTEXTA SYMBL 'CONTROL UNIT-TYPE CONDITION.'
MSGTEXTB SYMBL 'DEVICE-TYPE CONDITION.'
MSGTEXTC SYMBL 'I.R.T. RECURSION INDICATOR SET.'
         SPACE 2
EDITMASK DC    X'402021204B2020202220217A20207A2020' CLOCK MASK.
         SPACE 1
MVC1     MVC   9(0,R15),1(R5)       *** EXECUTED ***
TM1      TM    0(R6),0              *** EXECUTED ***
         SPACE 1
CVTDCB   EQU   X'74'               LOGREC DCB POINTER OFFSET IN CVT.
CVTCST   EQU   X'41C'              CST POINTER OFFSET IN CVT.
CVTIHASU EQU   X'414'              SU BIT STRING OFFSET IN CVT.
CSTSCDP  EQU   8                   SCD POINTER OFFSET IN CST.
         SPACE 1
         LTORG ,                   BUILD A LITERAL POOL.
         EJECT
$DSECT   DSECT ,                   REENTRANT WORK AREA.
$SAVE    DS    18A                 SAVE AREA FOR SUBROUTINES.
         SPACE 1
$DOUBLE  DS    D                   CONVERSION WORK AREA.
         SPACE 1
$@SCD    DS    A                     DUMP ADDRESS OF SCD.
$@CST    DS    A                     DUMP ADDRESS OF CST.
$SCDFLGS DS    A                     SCD FLAG WORD.
$FLAG    DS    X                     FLAG BYTE AS FOLLOWS:
$CPU1    EQU   X'80'                 CPU 1 SCD'S HAVE BEEN FORMATTED.
         DS    3X                    FILL.
         SPACE 2
$FORMAT1 EQU   *,52                FORMAT LIST AREA.
         DS    4X                  FLAGS.
$DATA1   DS    A                   HEADER VALUE POINTER.
         DS    4X                  FLAGS FOR CHANNEL SET ENTRY.
$TEXT2   DS    A                   LABELS ADDRESS.
$DATA2   DS    A                   DUMP DATA ADDRESS.
         DS    4X                  FLAGS FOR DEVICE ENTRY.
         DS    4X                  FLAGS FOR STATUS WORD.
$DATA3   DS    A                   ADDRESS OF STATUS WORD.
         DS    4X                  FLAGS FOR REPEAT COUNT.
$DATA4   DS    A                   ADDRESS OF REPEAT COUNT.
         DS    4X                  FLAGS FOR TIMEOUT COUNT.
         DS    4X                  FLAGS FOR TOD CLOCK.
         DS    A                   ENDING INDICATOR.
$LENGTH  EQU   *-$DSECT       LENGTH OF REENTRANT AREA.
         SPACE 1
         PRINT ON,GEN,NODATA       WE'LL LET YOU SEE THE PARM LIST.
         EJECT
         IHAABDPL DSECT=YES        GENERATE DUMP PARAMETER LIST.
         SPACE 2
         END   AMDPRSCD
