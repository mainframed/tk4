00060150 SYMSQSH: PROC OPTIONS(MAIN);
00060160 /*********************************************************** */
00060170 /*                                                           */
00060180 /* MODULE NAME = SYMSQSH                                     */
00060190 /*                                                           */
00060200 /* DESCRIPTIVE NAME = SQUISH SYM OBJECT CARDS                */
00060210 /*                                                           */
00060220 /* STATUS = VERSION DATE JAN 5, 1979                         */
00060230 /*                                                           */
00060240 /*********************************************************** */
00060250 /*                                                           */
00060260 /* THIS PROGRAM READS AN OBJECT DECK FROM DDNAME=OBJIN       */
00060270 /* AND PRODUCES A COPY TO DDNAME=OBJOUT. THE SYMBOL          */
00060280 /* DEFINITIONS IN THE PRECEEDING 'SYM' CARDS ARE             */
00060290 /* COMPRESSED IN TWO WAYS:                                   */
00060300 /*                                                           */
00060310 /*  1) ALL SYMBOLS APPEARING AFTER AN ENTRY PRODUCED         */
00060320 /*     BY THE ASSEMBLER STATEMENT                            */
00060330 /*          @SYMOFF   DSECT                                  */
00060340 /*     ARE DELETED UNTIL THE APPEARANCE OF A ENTRY FROM      */
00060350 /*          @SYMON    DSECT                                  */
00060360 /*  2) ALL UNNAMED ENTRIES ARE ELIMINATED.                   */
00060370 /*                                                           */
00060380 /* THIS ALLOWS A MORE COMPACT MODULE FOR LARGE,              */
00060390 /* MULTI-ASSEMBLY SYSTEMS LIKE VSAPL, JES2, ETC.             */
00060400 /* BY DELETING REDUNDANT ENTRIES.                            */
00060410 /*                                                           */
00060420 /*********************************************************** */
00060430 DCL (OBJIN INPUT, OBJOUT OUTPUT)
00060440   FILE RECORD ENV(FB RECSIZE(80) TOTAL);
00060450 DCL INCARD CHAR(80);
00060460 DCL OUTCARD CHAR(80);
00060470 DCL INFIELD CHAR(112) VAR INIT('');
00060480 DCL OUTFIELD CHAR(56) VAR INIT('');
00060490 DCL ITEMTR CHAR(56) VAR INIT('');
00060500 DCL ITEMPTR PTR;
00060510 DCL BYTE BIT(8) ALIGNED BASED(ITEMPTR);
00060520 DCL BUFFSTRT PTR;
00060530 DCL CARDNO PIC'99999999' INIT(0);
00060540 DCL PTROUT ENTRY(FIXED BIN(31)) RETURNS(PTR);
00060550 DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31));
00060560 DCL (K,ITEMLEN) FIXED BIN(31);
00060570 DCL INLEN FIXED BIN BASED(INLENPTR);
00060580 DCL OUTLEN FIXED BIN BASED(OUTLENPTR);
00060590 DCL (INLENPTR,OUTLENPTR) PTR;
00060600 DCL (PURGE,NONAME) BIT INIT('0'B);
00060610 /*STARTUP*/
00060620 ON ENDFILE(OBJIN) GO TO FINN;
00060630 BUFFSTRT=PTROUT(PTRIN(ADDR(INFIELD))+2);
00060640 INLENPTR =PTROUT(PTRIN(ADDR(INCARD))+10);
00060650 OUTLENPTR=PTROUT(PTRIN(ADDR(OUTCARD))+10);
00060660 CALL NEWCARD;
00060670 OUTCARD=INCARD;
00060680 DOAITEM: 
00060690 /*********************************************************** */
00060700 /* PROCESS ONE SYM ITEM. PERIODICALLY WE CALL 'NEWCARD'      */
00060710 /* WHEN IT IS CLEAR THAT THE ITEM BEING PROCESSED IS NOT     */
00060720 /* FULLY REPRESENTED IN THE 'INFIELD' BUFFER. THE            */
00060730 /* LENGTH OF THE CURRENT ITEM IS INCREMENTALLY               */
00060740 /* CALCULATED BASED ON THE VALUES OF THE DATA.               */
00060750 /*********************************************************** */
00060760 IF LENGTH(INFIELD)<4 THEN CALL NEWCARD;
00060770 ITEMPTR=BUFFSTRT;
00060780 ITEMLEN=4;
00060790 SELECT;
00060800    WHEN (BYTE='00001000'B)       /* UNNAMED SPACE            */
00060810          DO;
00060820          ITEMLEN=5;
00060830          NONAME='1'B;
00060840          END;
00060850    WHEN (BYTE&'10000000'B)
00060860              /* A DATA ITEM (DC OR DS) MAY HAVE A NAME       */
00060870              /* HAS A 1 BYTE TYPE, 1 OR 2 BYTE LENGTH,       */
00060880              /* AND MAY HAVE MULTIPLICITY AND SCALE          */
00060890              /* THE PRESENCE OF MULT AND SCALE ARE           */
00060900              /* SIGNALLED BY BITS IN THE FIRST BYTE          */
00060910              /* AND THE SIZE OF THE LEN FIELD IS TYPE        */
00060920              /* DEPENDENT                                    */
00060930         DO;
00060940         IF BYTE&'00001000'B THEN 
00060950              DO;                 /* UNNAMED DC OR DS         */
00060960              ITEMLEN=4;
00060970              NONAME='1'B;
00060980              END;
00060990              ELSE ITEMLEN=5+(BYTE&'00000111'B);
00061000         IF LENGTH(INFIELD)<ITEMLEN+1 THEN CALL NEWCARD;
00061010         K=PTRIN(ITEMPTR)+ITEMLEN;     /* REMEMBER TYPE ADDR  */
00061020         IF BYTE&'01000000'B THEN ITEMLEN=ITEMLEN+3;  /* MULT */
00061030         IF BYTE&'00010000'B THEN ITEMLEN=ITEMLEN+2;  /* SCALE*/
00061040         ITEMPTR=PTROUT(K);
00061050                                  /* LENGTH OF LENGTH FIELD   */
00061060         IF BYTE&'11110000'B THEN ITEMLEN=ITEMLEN+2;
00061070              ELSE ITEMLEN=ITEMLEN+3;
00061080         END;
00061090    OTHERWISE 
00061100         DO;                      /* USUALLY CSECT/DSECT      */
00061110         IF BYTE&'00001000'B THEN 
00061120              DO;
00061130              ITEMLEN=4;
00061140              NONAME='1'B;
00061150              END;
00061160              ELSE ITEMLEN=5+(BYTE&'00000111'B);
00061170         END;
00061180 END;
00061190 IF LENGTH(INFIELD)<ITEMLEN THEN CALL NEWCARD;
00061200 IF ITEMLEN=10 & SUBSTR(INFIELD,5,6)='@SYMON' THEN
00061210    DO;
00061220    PURGE='0'B;
00061230    GO TO NEXTITEM;
00061240    END;
00061250 IF ITEMLEN=11 & SUBSTR(INFIELD,5,7)='@SYMOFF' THEN
00061260    PURGE='1'B;
00061270 IF PURGE | NONAME THEN GO TO NEXTITEM;
00061280 ITEMTR=SUBSTR(INFIELD,1,ITEMLEN);
00061290 IF LENGTH(OUTFIELD)+ITEMLEN>56 THEN
00061300    DO;
00061310    K=56-LENGTH(OUTFIELD);
00061320    OUTFIELD=OUTFIELD||SUBSTR(INFIELD,1,K);
00061330    CALL PUTOUT;
00061340    OUTFIELD=SUBSTR(INFIELD,K+1,ITEMLEN-K);
00061350    END;
00061360 ELSE OUTFIELD=OUTFIELD||SUBSTR(INFIELD,1,ITEMLEN);
00061370 NEXTITEM:
00061380 NONAME='0'B;
00061390 INFIELD=SUBSTR(INFIELD,ITEMLEN+1);
00061400 GO TO DOAITEM;
00061410 /*********************************************************** */
00061420 /* AFTER THE LAST SYM CARD, ALL ELSE IS OBJECT               */
00061430 /*********************************************************** */
00061440 POSTLOOP: WRITE FILE(OBJOUT) FROM(INCARD);
00061450 READ FILE(OBJIN) INTO(INCARD);
00061460 GO TO POSTLOOP;
00061470 NEWCARD: PROC;
00061480 /*********************************************************** */
00061490 /* READ A NEW SYM CARD IN. IF IT ISNT A SYM CARD, THEN       */
00061500 /* WRITE OUT THE LAST (PARTIAL) SYM CARD AND GO TO THE       */
00061510 /* PROGRAM LOOP WHICH PROCESSES THE REST OF THE ESD, TXT,    */
00061520 /* AND RLD RECORDS. OTHERWISE, CONCATENATE IT TO THE         */
00061530 /* CURRENT CONTENTS OF THE INPUT BUFFER                      */
00061540 /*********************************************************** */
00061550 READ FILE(OBJIN) INTO(INCARD);
00061560 IF SUBSTR(INCARD,2,3)^='SYM' THEN
00061570    DO;
00061580    IF LENGTH(OUTFIELD)>0 THEN CALL PUTOUT;
00061590    GO TO POSTLOOP;
00061600    END;
00061610 INFIELD=INFIELD||SUBSTR(INCARD,17,INLEN);
00061620 END;
00061630 PUTOUT: PROC;
00061640 /*********************************************************** */
00061650 /* WRITE OUT A SYM RECORD                                    */
00061660 /*********************************************************** */
00061670 CARDNO=CARDNO+1;
00061680 OUTLEN=LENGTH(OUTFIELD);
00061690 SUBSTR(OUTCARD,17,56)=OUTFIELD;
00061700 SUBSTR(OUTCARD,73,8)=CARDNO;
00061710 WRITE FILE(OBJOUT) FROM(OUTCARD);
00061720 OUTFIELD='';
00061730 END;
00061740 FINN:
00061750 END SYMSQSH;
