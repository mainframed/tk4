00002560*PROCESS FLAG(E),MACRO,MAR(2,72);                                       
00002570 /*   CPU: DISPLAY OF STATDIE INCORE INFORMATION (MP/AP VERSION)     */ 
00002580 /* PROCEDURE: CPU                                                   */ 
00002590 /* FUNCTION:  DISPLAY MARGINAL STATE PROBABILITIES FOR THE CPU      */ 
00002600 /*            BASED ON THE CURRENT INCORE SAMPLE FROM STATDIE       */ 
00002610 /* LANGUAGE:  PLIX                                                  */ 
00002620 /* SYSTEM:    MVS R3.7 + SU7                                        */ 
00002630 /* EXTERNAL:  STATDIE MUST ALREADY HAVE BEEN STARTED TO             */ 
00002640 /*            INITIALIZE TIMER DRIVEN SAMPLING.                     */ 
00002650 /*            CALLS LOADPTR ENTRY IN PLIMISC                        */ 
00002660 /* VERSION:   JAN 9,1978                                            */ 
00002670 /* AUTHOR:    HOWARD GILBERT                                        */ 
00002680 /*            YALE COMPUTER CENTER                                  */ 
00002690 /*            175 WHITNEY AVE                                       */ 
00002700 /*            NEW HAVEN, CONN. 06520                                */ 
00002710 /*            203 432-4080                                          */ 
00002720 /* DISTRIBUTION:                                                    */ 
00002730 /*    THIS PROGRAM IS NOT RESTRICTED IN ANY MANNER. IT MAY BE       */ 
00002740 /* FREELY REPRODUCED AND USED FOR ANY PURPOSE. HOWEVER,             */ 
00002750 /* USERS ARE MORALLY BOUND TO MARK CLEARLY ANY MODIFICATIONS        */ 
00002760 /* THEY ADD PRIOR TO DISTRIBUTING A MODIFIED VERSION TO OTHERS.     */ 
00002770 %PAGE;                                                                 
00002780 /* INSTALLATION NOTES:                                              */ 
00002790 /* RECOMMENDED TARGET LIBRARY: LINKLIB                              */ 
00002800 /* LINKEDIT SYSLIB: PLIBASE                                         */ 
00002810 /*       (MUST BE LINKEDITED WITH PLIMISC SUBROUTINES)              */ 
00002820 /* LINKEDIT PARAMETERS: RENT                                        */ 
00002830 /* LINKEDIT CONTROL CARDS:                                          */ 
00002840 /*        ENTRY PLICALLA                                            */ 
00002850 %SKIP(2);                                                              
00002860 /*    THIS PROGRAM CAN RUN IN BATCH OR BE USED AS A TSO COMMAND.    */ 
00002870 /* THE ONLY FILE USED IN 'SYSPRINT'. IN TSO THIS DDNAME MUST        */ 
00002880 /* ALREADY BE ALLOCATED TO THE TERMINAL FOR THE OUTPUT TO DISPLAY   */ 
00002890 /* PROPERLY. THE USE OF THE 'PLICALLA' ENTRY POINT SURPRESSES THE   */ 
00002900 /* IBM00003I ERRONEOUS PARM FIELD IGNORED MESSAGE IN TSO.           */ 
00002910 %PAGE;                                                                 
00002920 /* ONE PICTURE IS WORTH A LOT OF DOCUMENTATION:                     */ 
00002930 %SKIP(2);                                                              
00002940 /* CPU UTILIZATION    38.8   45.6    SAMPLE SIZE  2400/ 2400        */ 
00002950 /* SUPERVISOR STATE   49.3   77.9    TIME              10:51        */ 
00002960 /* USERSTATE          48.6   17.6    AVG READY TCBS      1.7        */ 
00002970 /* SUPERVISOR STATE IS  SVC: 35.9   SRB: 24.0   OTHER:  4.7         */ 
00002980 /* KEY  PCT  |  SVC  PCT  |   PG  PCT  |  PGM      PCT              */ 
00002990 /*  0  58.6  |    0  7.1  |   0  12.3  |  GEORGE     8.9            */ 
00003000 /*  1   4.2  |   10  4.8  |   1  32.1  |  CML        6.3            */ 
00003010 /*  2   0.0  |   16  4.0  |   2  40.0  |  IEDTCAM2   6.1            */ 
00003020 /*  3   0.0  |   99  1.4  |   3   0.0  |  IEAVAR00   5.1            */ 
00003030 /*  4   0.0  |  114  1.4  |   4   0.0  |  YCCMAINT   4.4            */ 
00003040 /*  5   1.0  |   93  1.3  |   5   0.0  |  VSAPL      3.0            */ 
00003050 /*  6   3.4  |  101  0.9  |   6   0.0  |  IEFIIC     2.7            */ 
00003060 /*  7   0.0  |   20  0.8  |   7   0.0  |  DIFF3D     2.5            */ 
00003070 /*  8  32.5  |   26  0.8  |   8  10.0  |  JES2PROD   2.2            */ 
00003080 /*  9   0.0  |    1  0.8  |   9   5.4  |  QEDMAIN    2.1            */ 
00003090 %SKIP(2);                                                              
00003100 /* THIS IS A TYPICAL OUTPUT FROM CPU. THE VALUES ARE DEFINED        */ 
00003110 /* AS FOLLOWS:                                                      */ 
00003120 /* WHEN STATDIE INITIALIZES, IT ZEROS OUT THE PAGABLE BUFFERS. FOR  */ 
00003130 /* THE FIRST 20 MINUTES, SOME OF THE BUFFERS ARE STILL UNFILLED.    */ 
00003140 /* THERE IS NO VALID PSW WHICH CONTAINS ALL ZERO BITS, SO THE       */ 
00003150 /* SAMPLE IS DEFINED AS THE SET OF PSWS WITH AT LEAST ONE BIT       */ 
00003160 /* ON.                                                              */ 
00003170 /* THE SAMPLE SIZE IS GIVEN AS FIRST THE NUMBER OF SAMPLES ON CPU 0 */ 
00003180 /* THEN THE NUMBER OF SAMPLES ON CPU1.  THE FOLLOWING CONSIDERATIONS*/ 
00003190 /* HOLD FOR THESE VALUES:                                           */ 
00003200 /*    1) IF BOTH CPUS ARE ONLINE DURING THE LAST 20 MINUTES, AND    */ 
00003210 /*       YOU HAVE INSTALLED THE ACCOMPANYING ZAP TO IEAVRTI0 TO     */ 
00003220 /*       PERMIT STATDIE TO SELECT A SPECIFIC CPU, THEN YOU SHOULD   */ 
00003230 /*       HAVE EQUAL SAMPLE SIZES ON BOTH CPUS, OR THEY WILL DIFFER  */ 
00003240 /*       BY AT MOST 1 DURING THE INITITAL FILLING OF THE BUFFERS.   */ 
00003250 /*    2) IF YOU LOSE ONE OF THE CPUS DURING THE PERIOD, ALL OF THE  */ 
00003260 /*       SAMPLES WILL BE TAKEN ON THE REMAINING CPU, AND THIS WILL  */ 
00003270 /*       BE REFECTED IN THE SAMPLE SIZE INFORMATION.                */ 
00003280 /*    3) IF YOU DO NOT INSTALL THE ZAP TO IEAVRTI0, THEN SAMPLES    */ 
00003290 /*       WILL BE TAKEN RANDOMLY ON BOTH CPUS SUBJECT TO TWO SOURCES */ 
00003300 /*       OF BIAS: A) THERE ARE LIKELY TO BE MORE SAMPLES ON         */ 
00003310 /*       A CPU WHICH IS DISABLED LESS OF THE TIME, B) THERE WILL    */ 
00003320 /*       BE MORE SAMPLES ON THE FASTER CPU (MOD 1/ MOD 3 CONFIG     */ 
00003330 /*       BOTH BIASES FAVOR THE ATTACHED PROCESSOR IN A MODEL 1 158  */ 
00003340 /*       AP CONFIGURATION.                                          */ 
00003350 /* CPU UTILIZATION - % OF THE SAMPLE WITH THE WAIT BIT OFF.         */ 
00003360 /*    (NOTE: THIS IS THE ONLY % WHICH IS BASED ON THE WHOLE         */ 
00003370 /*     SAMPLE. ALL OTHER PERCENTS ARE NOW BASED ON COUNT OF         */ 
00003380 /*     NON-WAIT STATE PSW'S).                                       */ 
00003390 /*   THE FIRST CPU UTILTIZATION FIGURE IS FOR CPU 0, THE SECOND IS  */ 
00003400 /*    FOR CPU 1.                                                    */ 
00003410 /*   THE SAME HOLDS FOR THE NEXT TWO VALUES BELOW THEM              */ 
00003420 /* SUPERVISOR STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT         */ 
00003430 /*     OFF.                                                         */ 
00003440 /* USER STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT ON AND        */ 
00003450 /*     NON-SYSTEM KEY (>7).                                         */ 
00003460 /* SUPERVISOR STATE IS FURTHER SUBDIVIDED INTO THE PERCENTAGES      */ 
00003470 /* WHEN AN SVC WAS IN CONTROL IN TASK MODE, WHEN AN SRB IS          */ 
00003480 /* IN CONTROL, AND OTHER (WHICH INCLUDES FOR EXAMPLE, MODESET       */ 
00003490 /* TIME, INITIATOR TIME, JES AND TCAM TASK TIME IN SUPERVISOR       */ 
00003500 /* STATE, ETC).                                                     */ 
00003510 /* THE FOUR COLUMNS OF PERCENTAGES ARE SEPARATE AND TOTAL           */ 
00003520 /*     VERTICALLY. YOU DO NOT READ THEM ACROSS THE ROWS,            */ 
00003530 /*     BECAUSE THERE IS NO HORIZONTAL ASSOCAITION. ONLY             */ 
00003540 /*     TEN ITEMS APPEAR IN EACH COLUMN, THOUGH IT IS EASY           */ 
00003550 /*     TO MODIFY THE PROGRAM TO PRINT MORE. THE COLUMNS             */ 
00003560 /*     WILL NOT TOTAL TO 100% OF COURSE IF THERE IS                 */ 
00003570 /*     ANY OMITTED NON-ZERO VALUE.                                  */ 
00003580 /* KEY - BREAKS DOWN ACTIVE TIME BY PROTECT KEY.                    */ 
00003590 /* SVC - BREAKS DOWN ACTIVE TIME BY THE SVC NUMBER OF THE TEN       */ 
00003600 /*       MOST ACTIVE SVCS.                                          */ 
00003610 /* PG  - BREAKS DOWN ACTIVE TIME BY THE PERFORMANCE GROUP OF        */ 
00003620 /*       THE ASID IN CONTROL.                                       */ 
00003630 /* PGM - BREAKS DOWN ACTIVE TIME BY THE CDENAME POINTED TO BY       */ 
00003640 /*       THE HIGHEST PRB ON THE RB QUEUE.                           */ 
00003650 %PAGE;                                                                 
00003660 /* PREPROCESSOR PARAMETERS GOVERNING VARIABLE DIMENSIONS */            
00003670 %DCL (SIZE,MODULUS) FIXED;                                             
00003680 /* SIZE AND MODULUS EFFECT THE ALLOCATION OF THE HASH TABLE         */ 
00003690 /* FOR PROGRAM NAMES. THEY SHOULD BE CHOSEN BASED ON A GENEROUS     */ 
00003700 /* ESTIMATE OF THE NUMBER OF UNIQUE PROGRAM NAMES. MODULUS MUST     */ 
00003710 /* BE A PRIME NUMBER. IF MORE THAN 'SIZE' UNIQUE MODULE NAMES ARE   */ 
00003720 /* ENCOUNTERED, THE ERROR CONDITION IS RAISED.                      */ 
00003730 %SIZE=1000;                                                            
00003740 %MODULUS=283;                                                          
00003750 % INCLUDE STATGLBL;                                                    
00003760 %PAGE;                                                                 
00003770 CPU: PROC OPTIONS(MAIN REENTRANT);                                     
00003780 DCL STDEPTR PTR;                                                       
00003790 % INCLUDE STDE;                                                        
00003800 %PAGE;                                                                 
00003810 DCL 1 PGBUF(PGBFCT) BASED(STDEBUFP),                                   
00003820 % INCLUDE PGBUF;                                                       
00003830 %PAGE;                                                                 
00003840 /* THE FOLLOWING BUCKETS COLLECT THE VARIOUS STATE COUNTS FOR       */ 
00003850 /* USE IN CALCULATING VARIOUS PERCENTAGES.                          */ 
00003860 DCL KEYS(0:15) FIXED BIN INIT((16) 0);   /* BY PROTECT KEY          */ 
00003870 DCL (PBLMCOUNT(2),                       /* PROBLEM STATE           */ 
00003880         SAMPLE(2),                       /* SAMPLE SIZE             */ 
00003890         ACTIVES(2),                      /* NON-WAIT                */ 
00003900         USERCOUNT(2),                    /* PBLM & KEY>7            */ 
00003910         TCBRDYS)                         /* COUNT READY TCBS        */ 
00003920         FIXED BIN(31) INIT(0);           /*                         */ 
00003930 DCL PG(0:10) FIXED BIN INIT((11) 0);     /* BY PERFORM              */ 
00003940 DCL SVCS(0:256) FIXED BIN INIT((257) 0); /* BY SVC NUMBER           */ 
00003950 DCL (TENSVC,TENPGM) (0:9) FIXED BIN;     /* TOP 10                  */ 
00003960 DCL 1 SUP,                               /* SUP BREAKDOWN           */ 
00003970        2 SVCST FIXED BIN INIT(0),        /* SVC IN TCB              */ 
00003980        2 SRBST FIXED BIN INIT(0),        /* SRB                     */ 
00003990        2 OTHER FIXED BIN INIT(0);        /* ALL ELSE                */ 
00004000 %SKIP(5);                                                              
00004010 /* MISCELANEOUS DECLARATIONS                                        */ 
00004020 DCL (ABS,ADDR,BOOL,MOD,NULL,STRING,SUBSTR,TIME,UNSPEC,                 
00004030     MIN,HBOUND,PLIRETV) BUILTIN;                                       
00004040 DCL LOADPTR ENTRY(CHAR(8),PTR) OPTIONS(ASM INTER RETCODE);             
00004050 DCL SYSPRINT FILE OUTPUT STREAM;                                       
00004060 DCL (I,J,II) FIXED BIN;                                                
00004070 DCL TOD CHAR(5);                                                       
00004080 %SKIP(5);                                                              
00004090  /* HASH VARIABLES                                                  */ 
00004100 /* TO EFFICIENTLY TABULATE THE PROGRAM NAMES, A HASHING             */ 
00004110 /* TECHNIQUE IS USED FOR TABLE LOOKUP. THE EIGHT BYTE NAME          */ 
00004120 /* IS DIVIDED UP INTO 16 BIT PIECES WHICH ARE EXCLUSIVE             */ 
00004130 /* OR'D TOGETHER, THEN DIVIDED BY A PRIME NUMBER AND THE            */ 
00004140 /* REMAINDER IS USED TO INDEX INTO 'HASHTAB'. THE ENTRY             */ 
00004150 /* IN 'HASHTAB' POINTS TO THE FIRST ENTRY IN THE 'HASHBUCKET'       */ 
00004160 /* STRUCTURE WHICH HASHED TO THAT INDEX, AND SUBSEQUENT             */ 
00004170 /* NAMES WHICH HASH TO THE SAME NAME ARE CHAINED OFF                */ 
00004180 /* HASHBUCKET.HASHCHAIN.                                            */ 
00004190 DCL 1 HASHTAB(0:MODULUS) FIXED BIN INIT((MODULUS) -1);                 
00004200 DCL NEXTBUCKET FIXED BIN INIT(-1);                                     
00004210 DCL 1 HASHBUCKET(0:SIZE),                                              
00004220   2 HASHNAME CHAR(8),                                                  
00004230   2 HASHCHAIN FIXED BIN,                                               
00004240   2 HASHCOUNT FIXED BIN;                                               
00004250 DCL KEY CHAR(8);                                                       
00004260 DCL KEYBITS(4) BIT(16) ALIGNED;                                        
00004270 DCL INDX FIXED BIN;                                                    
00004280 DCL (CPU#,AKTIVES) FIXED BIN;                                          
00004290 %PAGE;                                                                 
00004300 CALL LOADPTR('STATSTDE',STDEPTR);                                      
00004310 IF PLIRETV>0 THEN DO;                                                  
00004320   PUT EDIT('UNABLE TO LOCATE STATDIE MODULE')(COL(1),A);               
00004330   STOP;                                                                
00004340   END;                                                                 
00004350 IF STDEFLGS='0'B THEN                                                  
00004360    DO;                                                                 
00004370    PUT EDIT('STATDIE IS NOT INITIALIZED')(COL(1),A);                   
00004380    RETURN;                                                             
00004390    END;                                                                
00004400 IF STDETQE(14)&'1'B THEN                                               
00004410    DO;                                                                 
00004420    PUT EDIT('STATDIE HAS BEEN PURGED BY AN ERROR')(COL(1),A);          
00004430    RETURN;                                                             
00004440    END;                                                                
00004450 TOD=SUBSTR(TIME,1,5);                                                  
00004460 TOD=SUBSTR(TOD,1,2)||':'||SUBSTR(TOD,3,2);                             
00004470 HASHNAME='********';                                                   
00004480 HASHCOUNT=0;                                                           
00004490 %PAGE;                                                                 
00004500  /* NOW PASS ONCE THROUGH THE BUFFER ACCUMULATING COUNTS            */ 
00004510 DO I=1 TO PGBFCT; DO II=1 TO SRBINTVL;                                 
00004520 INITIAL:DO;                                                            
00004530 IF FLAGS(I,II)='0'B & (ADDRESS(I,II)=0 | ADDRESS(I,II)=1)              
00004540          THEN LEAVE INITIAL;                                           
00004550        CPU#=MOD(ADDRESS(I,II),2)+1 ;                                   
00004560       SAMPLE(CPU#)=SAMPLE(CPU#)+1;                                     
00004570       IF FLAGS(I,II)&WAIT THEN; ELSE                                   
00004580 ACTIVE:  DO;                                                           
00004590          ACTIVES(CPU#)=ACTIVES(CPU#)+1;                                
00004600          J=FLAGS(I,II)/16;                                             
00004610          KEY=CDENAME(I,II);                                            
00004620          KEYS(J)=KEYS(J)+1;                                            
00004630          TCBRDYS=TCBRDYS+TCBRDY(I,II);                                 
00004640          IF ABS(PERFORM(I,II))>10 THEN PG(10)=PG(10)+1;                
00004650          ELSE PG(PERFORM(I,II))=PG(PERFORM(I,II))+1;                   
00004660          IF FLAGS(I,II)&SVCMD THEN SVCS(SVC(I,II))=SVCS(SVC(I,II))+1;  
00004670          IF FLAGS(I,II)&PBLM THEN                                      
00004680             DO;                                                        
00004690             PBLMCOUNT(CPU#)=PBLMCOUNT(CPU#)+1;                         
00004700             IF FLAGS(I,II)&'1'B THEN USERCOUNT(CPU#)=USERCOUNT(CPU#)+1;
00004710             END;                                                       
00004720          ELSE                                                          
00004730             IF FLAGS(I,II)& SRB THEN SRBST=SRBST+1;                    
00004740             ELSE IF FLAGS(I,II)& SVCMD THEN SVCST=SVCST+1;             
00004750             ELSE OTHER=OTHER+1;                                        
00004760          IF CDENAME(I,II)^=' ' THEN                                    
00004770 HASH:       DO;                                                        
00004780             STRING(KEYBITS)=UNSPEC(KEY);                               
00004790             KEYBITS(1)=BOOL(BOOL(KEYBITS(1),KEYBITS(2),'0110'B),       
00004800                BOOL(KEYBITS(1),KEYBITS(2),'0110'B),'0110'B);           
00004810             INDX=MOD(KEYBITS(1),MODULUS);                              
00004820 OLDENTRY:      DO;                                                     
00004830                IF HASHTAB(INDX)<0 THEN                                 
00004840                   DO;                                                  
00004850                   NEXTBUCKET=NEXTBUCKET+1;                             
00004860                   IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;                
00004870                   HASHTAB(INDX)=NEXTBUCKET;                            
00004880                   INDX=NEXTBUCKET;                                     
00004890                   LEAVE OLDENTRY;                                      
00004900                   END;                                                 
00004910                ELSE                                                    
00004920                   DO   INDX=HASHTAB(  INDX)                            
00004930                      REPEAT HASHCHAIN(INDX)                            
00004940                      UNTIL(HASHCHAIN(INDX)=0);                         
00004950                   IF KEY=HASHNAME(INDX) THEN                           
00004960                      DO;                                               
00004970                      HASHCOUNT(INDX)=HASHCOUNT(INDX)+1;                
00004980                      LEAVE HASH;                                       
00004990                      END;                                              
00005000                   END;                                                 
00005010                NEXTBUCKET=NEXTBUCKET+1;                                
00005020                IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;                   
00005030                HASHCHAIN(INDX)=NEXTBUCKET;                             
00005040                INDX=NEXTBUCKET;                                        
00005050                END OLDENTRY;                                           
00005060             HASHNAME(INDX)=KEY;                                        
00005070             HASHCHAIN(INDX)=0;                                         
00005080             HASHCOUNT(INDX)=1;                                         
00005090             END HASH;                                                  
00005100          END ACTIVE;                                                   
00005110       END INITIAL;                                                     
00005120    END;END;                                                            
00005130 %PAGE;                                                                 
00005140 AKTIVES=SUM(ACTIVES);                                                  
00005150 SELECT;                                                                
00005160     WHEN (SAMPLE(1)=0) PUT EDIT                                        
00005170         ('CPU0','CPU1','CPU UTILIZATION','DOWN',                       
00005180          ACTIVES(2)*1000/SAMPLE(2),'SAMPLE SIZE',SAMPLE(1),'/',        
00005190          SAMPLE(2),'SUPERVISOR STATE','DOWN',                          
00005200          (ACTIVES(2)-PBLMCOUNT(2))*1000/ACTIVES(2),'TIME',TOD,         
00005210          'USERSTATE','DOWN',USERCOUNT(2)*1000/ACTIVES(2),              
00005220          'AVG READY TCBS',TCBRDYS*10/AKTIVES)                          
00005230         (COL(20),A,COL(27),A,                                          
00005240          COL(1),A(18),X(1),A(4),X(2),P'ZZ9.9',                         
00005250          COL(35),A(12),F(5),A(1),F(5),                                 
00005260          COL(1),A(18),X(1),A(4),X(2),P'ZZ9.9',COL(35),A(18),A(5),      
00005270          COL(1),A(18),X(1),A(4),X(2),P'ZZ9.9',COL(35),A(18),P'ZZ9.9'); 
00005280     WHEN (SAMPLE(2)=0) PUT EDIT                                        
00005290         ('CPU0','CPU1','CPU UTILIZATION',ACTIVES(1)*1000/SAMPLE(1),    
00005300          'DOWN','SAMPLE SIZE',SAMPLE(1),'/',SAMPLE(2),                 
00005310          'SUPERVISOR STATE',(ACTIVES(1)-PBLMCOUNT(1))*1000/ACTIVES(1), 
00005320          'DOWN','TIME',TOD,'USERSTATE',USERCOUNT(1)*1000/ACTIVES(1),   
00005330          'DOWN','AVG READY TCBS',TCBRDYS*10/AKTIVES)                   
00005340         (COL(20),A,COL(27),A,                                          
00005350          COL(1),A(18),X(1),P'ZZ9.9',X(2),A(4),                         
00005360          COL(35),A(12),F(5),A(1),F(5),                                 
00005370          COL(1),A(18),X(1),P'ZZ9.9',X(2),A(4),COL(35),A(18),A(5),      
00005380          COL(1),A(18),X(1),P'ZZ9.9',X(2),A(4),COL(35),A(18),P'ZZ9.9'); 
00005390     OTHERWISE PUT EDIT                                                 
00005400         ('CPU0','CPU1','CPU UTILIZATION',                              
00005410          ACTIVES*1000/SAMPLE,'SAMPLE SIZE',SAMPLE(1),'/',SAMPLE(2),    
00005420          'SUPERVISOR STATE',(ACTIVES-PBLMCOUNT)*1000/ACTIVES,          
00005430          'TIME',TOD,'USERSTATE',USERCOUNT*1000/ACTIVES,                
00005440          'AVG READY TCBS',TCBRDYS*10/AKTIVES)                          
00005450         (COL(20),A,COL(27),A,                                          
00005460          COL(1),A(18),2(P'ZZ9.9',X(2)),COL(35),A(12),F(5),A(1),F(5),   
00005470          COL(1),A(18),2(P'ZZ9.9',X(2)),COL(35),A(18),A(5),             
00005480          COL(1),A(18),2(P'ZZ9.9',X(2)),COL(35),A(18),P'ZZ9.9');        
00005490     END;                                                               
00005500 PUT EDIT('SUPERVISOR STATE IS  SVC:',SVCST*1000/AKTIVES,               
00005510 '    SRB:',SRBST*1000/AKTIVES, '   OTHER:',OTHER*1000/AKTIVES)         
00005520 (COL(1), (3) (A,P'ZZ9.9'));                                            
00005530 CALL FIND10(TENSVC,SVCS);                                              
00005540 CALL FIND10(TENPGM,HASHCOUNT);                                         
00005550 PUT EDIT('KEY  PCT  |  SVC  PCT  |   PG  PCT  |  PGM        PCT',      
00005560 (I,KEYS(I)*1000/AKTIVES,'|',TENSVC(I),SVCS(TENSVC(I))*1000/AKTIVES,'|',
00005570 I,PG(I)*1000/AKTIVES,'|',HASHNAME(TENPGM(I)),HASHCOUNT(TENPGM(I))      
00005580 *1000/AKTIVES DO I=0 TO 9))(COL(1),A, (10)                             
00005590 (COL(1),F(2),X(2),P'Z9.9',X(2),A(1),X(2),F(3),X(1),P'Z9.9',X(2),A(1),  
00005600 X(2),F(2),X(2),P'Z9.9',X(2),A(1),X(2),A(8),X(2),P'Z9.9'));             
00005610 %PAGE;                                                                 
00005620 FIND10: PROC(TEN,SELECT);                                              
00005630 /* INTERNAL PROCEDURE FOR CPU. LOCATES THE INDICES OF THE           */ 
00005640 /* TEN LARGEST VALUES IN A FIXED BIN(15) ARRAY. USED TO             */ 
00005650 /* SELECT WHICH SVC AND PGM NAMES TO DISPLAY.                       */ 
00005660 DCL (TEN(0:9),SELECT(*)) FIXED BIN;                                    
00005670 DCL (I,J,K,N) FIXED BIN INIT(-1);                                      
00005680    DO I=0 TO HBOUND(SELECT,1);                                         
00005690 SCAN:                                                                  
00005700      DO;                                                               
00005710         DO J=0 TO N;                                                   
00005720         IF SELECT(TEN(J))<SELECT(I) THEN                               
00005730            DO;                                                         
00005740            N=MIN(9,N+1);                                               
00005750               DO K=N TO J+1 BY -1;                                     
00005760               TEN(K)=TEN(K-1);                                         
00005770               END;                                                     
00005780            TEN(J)=I;                                                   
00005790            LEAVE SCAN;                                                 
00005800            END;                                                        
00005810         END;                                                           
00005820      IF N<9 THEN                                                       
00005830         DO;                                                            
00005840         N=N+1;                                                         
00005850         TEN(N)=I;                                                      
00005860         END;                                                           
00005870      END;                                                              
00005880    END;                                                                
00005890 END;                                                                   
00005900 END;                                                                   
