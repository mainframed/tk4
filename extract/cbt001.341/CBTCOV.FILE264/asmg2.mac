ASM2     TITLE 'TSO ASSEMBLER(G) PROMPTER MODULE 2 - ASMG2.'
*STATUS- CHANGE LEVEL NIH-1  02/07/72  A.C. CURTIS
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*   THE MODULE ASMG2 SERVES ONLY AS AN INTERFACE BETWEEN THE MAIN     *
*   PROMPTER MODULE ASMG AND THE ASSEMBLER, PASSING ON THE POINTER    *
*   IT RECEIVES FROM ASMG IN REGISTER 1 TO THE ASSEMBLER. A STAE      *
*   EXIT IS SET UP IN CASE OF ASSEMBLER ABNORMAL TERMINATION AND CON- *
*   TROL IS GIVEN TO THE ASSEMBLER.  AFTER EXIT FROM THE ASSEMBLER    *
*   (NORMAL OR OTHERWISE) ANY LIBRARY OR SOURCE CONCATENATIONS ARE DE-*
*   CONCATENATED AND CONTROL IS RETURNED TO THE TMP.                  *
*                                                                     *
*ENTRY POINTS-                                                        *
*   ASMG2 - THIS IS THE ONLY ENTRY POINT TO THIS MODULE               *
*                                                                     *
*INPUT-                                                               *
*   THE POINTER TO THE ASSEMBLER PARAMETER LIST IS RECEIVED IN        *
*   REGISTER 1, POINTER TO WORKING STORAGE IN R11                     *
*                                                                     *
*OUTPUT-                                                              *
*   THE POINTER TO THE ASSEMBLER INPUT IS PASSED IN REGISTER 1.       *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*   NO EXTERNAL ROUTINES ARE USED BY THE MODULE ASMG2.  THE ONLY      *
*   COMMUNICATION WITH CODE OUTSIDE OF THIS MODULE IS WHEN SETTING UP *
*   THE STAE EXIT AND WHEN INVOKING THE ASSEMBLER.                    *
*                                                                     *
*EXITS-NORMAL-                                                        *
*   SETS REGISTER 15 TO 0 AND RETURNS TO THE TMP.                     *
*                                                                     *
*EXITS-ERROR-                                                         *
*   PRESERVES THE RETURN CODE FROM THE ASSEMBLER IN REGISTER 15 AND   *
*   RETURNS TO THE TMP.                                               *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   USES A SMALL PORTION OF THE DSECT WORK AREA 'STORAGE' PASSED TO IT*
*   FROM ASMG.                                                        *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REENTRANT, READ-ONLY, REUSABLE.                                   *
*                                                                     *
*NOTES-                                                               *
*   FEATURES ADDED TO STANDARD IBM VERSION:                           *
*        NOW DECONCATENATES SOURCE AS WELL AS LIBRARY DATASETS        *
*        CALLS ASSEMBLER G                                            *
         EJECT
ASMG2    CSECT
         USING *,R15          ESTABLISH TEMPORARY ADDRESSABILITY
         B     PSTID          BRANCH PAST IDENTITY DC
         DC    C'NIH ASSEMBLER(G) PROMPTER - MODULE 2' IDENTITY DC
PSTID    DS    0H             DEFINE LABEL, INSURE HALFWORD ALIGNMENT
         DROP  R15            DROP TEMPORARY REGISTER
         USING ASMG2,R12      ESTABLISH ADDRESSABILITY
         LR    R12,R15        SET UP BASE
         USING STORAGE,R11    ESTABLISH WORK AREA ADDRESSABILITY
         LR    R7,R1          SAVE PTR TO PARM LIST
         SPACE 5
         LA    R1,STAEBLK     PTR TO STAE PARM BLOCK
         XC    0(4,1),0(1) *******************************************
         STAE  STAEXIT,OV,PARAM=(R11),XCTL=NO,MF=(E,(1)) ACTIVATE STAE
         ST    R12,AP1        SAVE BASE REGISTER
         SPACE 5
* INVOKE ASSEMBLER
         TPUT  ASMSG,L'ASMSG  NOTIFY USER OF PROGRESS
         LR    R1,R7          RESTORE PTR TO PARM LIST
         LINK  EP=IFOX00     LINK TO ASSEMBLER X
         ST    R15,ABENDC
         EJECT
TRYDECAT TM    FLAG2,LIBCAT+SRCCAT  WERE ANY DATASETS CONCATENATED?
         BZ    NODECT02       BRANCH IF NO
         USING DAPB10,R4      ESTABLISH ADDRESSABILITY
         LA    R4,DAPB0CS     SET UP BASE REGISTER
         LA    R1,X10         DAIR DECONCAT ENTRY CODE
         STH   R1,DA10CD      STORE IN DAIR PARAMETER BLOCK
         XC    DA10FLG(C5),DA10FLG ZERO OUT FLAGS, DARC, RESERVED
         TM    FLAG2,LIBCAT   LIBRARY CONCATENATION DONE?
         BZ    NODECT01       BR IF NOT
         MVC   DA10DDN(C8),LIBDSNA+C4 MOVE CONCATED DDNAME
         BAL   R10,GODAIR     GO DECONCATENATE DDNAMES
NODECT01 TM    FLAG2,SRCCAT   SOURCE CONCATENATION DONE?
         BZ    NODECT02       BR IF NOT
         XC    DA10FLG(C5),DA10FLG ZERO OUT FLAGS, DARC, RESERVED
         MVC   DA10DDN(L'DA10DDN),SRCDSNA+C4 MOVE CONCATENATED DDNAME
         BAL   R10,GODAIR     GO DECONCATENATE DDNAMES
NODECT02 L     R1,C4(R13)     PTR TO OLD SAVE AREA
         LA    R2,NOSTST      PTR TO PHONY SAVE AREA
         CR    R1,R2          DID STAE HAVE A SAVE AREA
         BE    NOFREE         BRANCH IF NO
         LR    R1,R11         POINTER TO GETMAIN AREA
         L     R0,STLEN       LENGTH AND SUB-POOL NUMBER
         FREEMAIN R,LV=(0),A=(1) FREE STORAGE
NOFREE   EQU   *              DEFINE LABEL
         L     R15,ABENDC     RESTORE RETURN CODE
         L     R13,C4(R0,R13) RESTORE CALLER'S POINTER
         L     R14,C12(R0,R13)   RESTORE
         LM    R0,R12,C20(R13)   REGISTERS
         BR    R14               RETURN TO CALLER
         EJECT
* DAIR-INVOCATION ROUTINE
GODAIR   LOAD  EP=IKJDAIR     LOAD DAIR SERVICE ROUTINE
         ST    R0,ENTRDAIR    SAVE ENTRY POINT
         LA    R15,DAIRPL     PTR TO DAIR PARM LIST
         USING DAPL,R15       ESTABLISH ADDRESSABILITY FOR DSECT
         ST    R4,DAPLDAPB    STORE PTR TO DAIR PARM BLOCK
         LA    R1,DAPL        PTR TO DAIR PARM LIST
         L     R15,ENTRDAIR   DAIR ENTRY POINT
         XC    DAIRECB(C4),DAIRECB ZERO DAIR ECB
         CALL  (15)           CALL DAIR
         BR    R10            RETURN TO CALLER
         SPACE 3
ASMSG    DC    C'ASSEMBLER(X) INVOKED.'
         SPACE
         DROP  R12            DROP REGISTER 12
         EJECT
* ABEND EXIT ROUTINE
         USING STAEXIT,R15    ESTABLISH ADDRESSABILITY
STAEXIT  CH    R0,H12         WAS STORAGE AVAILABLE
         BNE   STAE01         BRANCH IF YES
         DROP  R11            DROP REGISTER 11
         USING STORAGE,R2     ESTABLISH DSEC\ ADDRESSABILITY
         STM   R14,R12,NOSTST+C12 SAVE REGISTERS
         LA    R13,NOSTST     PHONY SAVE AREA
         ST    R13,STSA+C4    SAVE THIS SAVE AREA PTR
         LA    R1,STSA        PTR TO MY SAVE AREA
         ST    R1,C8(R13)     SAVE PTR TO NEW IN OLD
         LR    R13,R1         SET UP SAVE AREA PTR
         DROP  R2             DROP REGISTER 2
         USING STORAGE,R11    ESTABLISH DSECT ADDRESSABILITY
         LR    R11,R2         RESTORE WORK AREA BASE
         ST    R1,ABENDC      SAVE ABEND CODE
         B     STAE02         SKIP AROUND OTHER RESTORE
STAE01   STM   R14,R12,C12(R13) SAVE REGISTERS
         L     R11,C0(R1)     LOAD STORAGE AREA BASE
         ST    R13,STSA+C4    SAVE PTR TO OLD SAVE AREA
         LA    R3,STSA        PTR TO MY SAVE AREA
         ST    R3,C8(R13)     SAVE PTR TO MY SAVE AREA
         LR    R13,R3         SET UP MY SAVE AREA PTR
         L     R10,C4(R1)     LOAD ABEND CODE
         ST    R10,ABENDC     SAVE ABEND CODE
STAE02   L     R12,AP1        RESTORE BASE REGISTER
         USING ASMG2,R12      SET UP BASE REGISTER
         DROP  R15            DROP TEMPORARY REGISTER
         XC    ABENDC(C4),ABENDC ZERO RETURN CODE
         B     TRYDECAT
         EJECT
* DEFINITIONS
H12      DC    H'12'          HALF WORD TWELVE
         SPACE 3
X10      EQU   X'10'          HEX 10 CONSTANT
X80      EQU   X'80'          HEX 80 CONSTANT
         SPACE 5
R0       EQU   0              SYMBOLIC REGISTER 0
R1       EQU   1              SYMBOLIC REGISTER 1
R2       EQU   2              SYMBOLIC REGISTER 2
R3       EQU   3              SYMBOLIC REGISTER 3
R4       EQU   4              SYMBOLIC REGISTER 4
R5       EQU   5              SYMBOLIC REGISTER 5
R6       EQU   6              SYMBOLIC REGISTER 6
R7       EQU   7              SYMBOLIC REGISTER 7
R8       EQU   8              SYMBOLIC REGISTER 8
R9       EQU   9              SYMBOLIC REGISTER 9
R10      EQU   10             SYMBOLIC REGISTER 10
R11      EQU   11             SYMBOLIC REGISTER 11
R12      EQU   12             SYMBOLIC REGISTER 12
R13      EQU   13             SYMBOLIC REGISTER 13
R14      EQU   14             SYMBOLIC REGISTER 14
R15      EQU   15             SYMBOLIC REGISTER 15
         SPACE 5
C0       EQU   0              SYMBOLIC 0
C4       EQU   4              SYMBOLIC 4
C5       EQU   5              SYMBOLIC 5
C8       EQU   8              SYMBOLIC 8
C12      EQU   12             SYMBOLIC 12
C20      EQU   20             SYMBOLIC 20
         EJECT
         IKJDAP10
         SPACE 3
         IKJDAPL
         SPACE 3
         IKJPPL
         EJECT
* TOP PART OF AREA PASSED FROM ASMG, (G) PROMPTER MODULE 1
STORAGE  DSECT
AP1      DS    A              PROGRAM BASE 1
AP2      DS    A              PROGRAM BASE 2
STLEN    DS    F              LENGTH OF STORAGE (ENTIRE BLOCK, NOT TOP)
ABENDC   DS    F              ABEND CODE
DAPB0CS  DS    6H,21CL8       DAIR 0C ENTRY CODE BLOCK
LIBDSNA  DS    2H,21CL8
SRCDSNA  DS    2H,21CL8
ENTRDAIR DS    A              DAIR SERVICE ROUTINE EMTRY POINT
DAIRPL   DS    5F             DAIR PARAMETER LIST
DAIRECB  DS    F              ECB FOR DAIR
FLAG2    DS    X              SECOND FLAGS
LIBCAT   EQU   X'80'
SRCCAT   EQU   X'20'
STAEBLK  STAE  MF=L           LIST FORM OF STAE
NOSTST   DS    18F            PHONY SAVE AREA
STSA     DS    18F            STAE SAVE AREA
PARSEPL  DS    7F             PARSE PARM LIST
         END
