 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABE063M IS COMMON TO BOTH ABE063 AND ABE072.  MACRO VARIABLE        *
 * ENTINIT SHOULD BE APPROPRIATELY SET BEFORE INCLUDING THIS TEXT.     *
 *                                                                     *
 **********************************************************************/

   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;
   %INCLUDE ABE79ENT;

   DCL 1 SET07 EXT,
   %INCLUDE ABE063J;
   DCL 1 SYM02 EXT,
   %INCLUDE ABE063K;
   DCL 1 SYM03 EXT,
   %INCLUDE ABE063L;

   DCL UG01(4,4) DEC FLOAT(6) EXT, /* USED BY PL2SPA AND PL3SPA */
       UG01OL CHAR(64) BASED(ADDR(UG01));

   DCL (ABE063A,ENTINIT,ABE063C,ABE063D,ABE063E,ABE063G) ENTRY;
   DCL ABE063F ENTRY(CHAR(*) VAR,PTR) RETURNS(FIXED BIN(31,0));
   DCL SETCAPS ENTRY;
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL DUM1PTR PTR;

   DCL PRY(20) PTR;
   DCL BRY(20) FIXED BIN(31,0);
   DCL FRY(20) DEC FLOAT(6);
   DCL SUBRTNE ENTRY VARIABLE;
   DCL PARM_COUNT FIXED BIN(15,0);
   DCL BFLOAT DEC FLOAT(6) BASED(FLOATPTR),
       BFIXED FIXED BIN(31,0) BASED(FIXEDPTR);
   DCL (CHAR_STACK,FIXED_STACK,FLOAT_STACK) PTR;
   DCL 1 STACK_ELEMENT BASED(ELPTR),
     2 NEL PTR,
     2 SNAME CHAR(8) VAR,
     2 NUM PTR;
   DCL STACKSTR CHAR(256) BASED(STRPTR);

   ON CONDITION(BADPLOT) GO TO BADEXIT;
   CHAR_STACK,FIXED_STACK,FLOAT_STACK=NULL;
   CALL SETCAPS(PARY(1));
   IF RHPLOT79=NULL
     THEN DO;
       CALL INIT;
       IF PARY(1)='PLT00' × PARY(1)='' × PARY(1)='DEVICE'
         THEN RETURN;
       END;
   PARM_COUNT=0; /* INITIALIZE GLOBAL */
   SELECT(PARY(1));
     WHEN(''); /* NULL */
     WHEN('DEBUG') CALL ABE063D(RHPTR,RHHDRPT,PARY);
     WHEN('DEVICE') CALL INITA;
     WHEN('SETUG01') DO;
       CALL SETCAPS(PARY(2));
       DUM1PTR=#RHPLOC(PARY(2),RHHDRPT); /* GO FIND INPUT MATRIX */
       IF DUM1PTR=NULL
         THEN DO;
           MSGDATA='VARIABLE '××PARY(2)××' NOT FOUND';
           RHRC=8;
           RETURN;
           END;
       UG01OL=DUM1PTR->NXTHDR->RECSTR;
       END;
     OTHERWISE DO;
       RHRC=ABE063C(PARY(1),RHPLOT79_ENTRIES,SUBRTNE,SETPARM);
       IF RHRC=0
         THEN CALL ABE063G(PARM_COUNT,SUBRTNE,PRY);
         ELSE MSGDATA=PARY(1)××' NOT FOUND';
       END;
     END; /* SELECT */
   IF PARY(1)='DDINF' × PARY(1)='PLT00' × PARY(1)=''
     THEN CALL #PIXZERO(RHPLOT79);
   DO WHILE(CHAR_STACK^=NULL);
     ELPTR=CHAR_STACK;
     CHAR_STACK=NEL;
     CALL #SETC(RHHDRPT,RH_SYMTREE,SNAME,SUBSTR(NUM->STACKSTR,1,
       MAX(1,SUFFIX(NUM->STACKSTR,' '))));
     FREE NUM->STACKSTR;
     FREE STACK_ELEMENT;
     END;
   DO WHILE(FIXED_STACK^=NULL);
     ELPTR=FIXED_STACK;
     FIXED_STACK=NEL;
     CALL #SETA(RHHDRPT,RH_SYMTREE,SNAME,NUM->BFIXED);
     FREE STACK_ELEMENT;
     END;
   DO WHILE(FLOAT_STACK^=NULL);
     ELPTR=FLOAT_STACK;
     FLOAT_STACK=NEL;
     CALL #SETA(RHHDRPT,RH_SYMTREE,SNAME,NUM->BFLOAT);
     FREE STACK_ELEMENT;
     END;
   RETURN;
 BADEXIT:
   IF MSGDATA=''
     THEN MSGDATA='INVALID GRAPHICS SUBCOMMAND';
   IF RHRC=0
     THEN RHRC=8;
   RETURN;

 FIND_ARRAY: PROC(NAME) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE THE MATRIX TO BE PASSED TO A MATRIX UTILITY.       *
 *                                                                     *
 **********************************************************************/
   DCL NAME CHAR(*) VAR;
   DCL RHP PTR;

   CALL SETCAPS(NAME);
   IF NAME='UG01'
     THEN RETURN(ADDR(UG01)); /* UG01 IN COMMON */
   IF NAME='BITMAP'
     THEN RETURN(BITMAPA);
   RHP=#RHPLOC(NAME,RHHDRPT);
   IF RHP=NULL
     THEN DO;
       MSGDATA='ARRAY NAMED '××NAME××' NOT FOUND';
       SIGNAL CONDITION(BADPLOT);
       END;
   RETURN(PTROUT(PTRIN(ADDR(RHP->NXTHDR->RECSTR))+2));
   END FIND_ARRAY;

 INIT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED THE FIRST TIME ABE063 IS ENTERED.                            *
 *                                                                     *
 **********************************************************************/
   DCL HELPSTR CHAR(4) VAR INIT('');

   RHPLOT79_SET07=ADDR(SET07);
   ALLOCATE ABE79ENT SET(RHPLOT79_ENTRIES);
   CALL ENTINIT(RHHDRPT); /* GO FILL IN RHPLOT79_ENTRIES */
   CALL #DOCMD('LDD FT06F001 NOL',HELPSTR);
   I=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   IF I^=0
     THEN CALL #DOCMD('ALLOC FI(FT06F001) DA(*) RECFM(F) REUSE',
       HELPSTR);
   CALL #DOCMD('LDD FT98F001 NOL',HELPSTR);
   I=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   IF I^=0
     THEN CALL #DOCMD(
       'ALLOC FI(FT98F001) DA(''X75826X.PLOT79.HERSHEY'') SHR REUSE',
       HELPSTR);
   CALL ABE063A(RHPLOT79);
   PENARY(9)=' '; /* ERASER */
   CALL INITA;
   END INIT;

 INITA: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED THE FIRST TIME ABE063 IS ENTERED, AND EACH TIME 'GR DEVICE'  *
 * IS ENTERED.                                                         *
 *                                                                     *
 **********************************************************************/
   CALL #PIXZERO(RHPLOT79);
   IF PARY(1)='DEVICE'
     THEN CALL ABE063E(RHPTR,RHHDRPT,PARY);
   I=#CMD('GR PLT00',RHPTR,RHHDRPT);
   I=#CMD('GR SYMSF ''UCTR1'' 0',RHPTR,RHHDRPT);
   END INITA;

 POP: PROC(STACK) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO POP ELEMENTS FROM THE SPECIFIED STACK.                    *
 *                                                                     *
 **********************************************************************/
   DCL (STACK,CUREL) PTR;

   IF STACK=NULL
     THEN RETURN(NULL);
   CUREL=STACK;
   STACK=CUREL->NEL;
   RETURN(CUREL);
   END POP;

 PUSH: PROC(STACK,NAME,NUMPTR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PUSH ELEMENTS ON THE SPECIFIED STACK                      *
 *                                                                     *
 **********************************************************************/
   DCL (STACK,NUMPTR,NEWEL) PTR;
   DCL NAME CHAR(*);

   ALLOCATE STACK_ELEMENT SET(NEWEL);
   NEWEL->NEL=STACK;
   STACK=NEWEL;
   NEWEL->SNAME=NAME;
   NEWEL->NUM=NUMPTR;
   END PUSH;

 SETPARM: PROC(PARM_TYPE);
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET UP A PARAMETER TO A PLOT79 SUBROUTINE.                *
 *                                                                     *
 **********************************************************************/
   DCL PARM_TYPE CHAR(*);
   DCL IX FIXED BIN(15,0);
   DCL I FIXED BIN;
   DCL HDR PTR;

   PARM_COUNT=PARM_COUNT+1; /* INCREMENT PARAMETER COUNT */
   IX=PARM_COUNT+1;
   IF LENGTH(PARY(IX))=0
     THEN DO;
       PUT STRING(MSGDATA) EDIT('MISSING PARAMETER #',IX)
         (A,P'99');
       SIGNAL CONDITION(BADPLOT);
       END;
   SELECT(PARM_TYPE);
     WHEN('ENTRY') DO;
       MSGDATA='INVALID MODULE NAME='××PARY(IX);
       BRY(PARM_COUNT)=ABE063F(PARY(IX),RHPLOT79_ENTRIES);
       PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
       MSGDATA='';
       END;
     WHEN('LOGICAL','INTEGER','REAL') DO;
       IF PARM_TYPE='REAL'
         THEN PRY(PARM_COUNT)=ADDR(FRY(PARM_COUNT));
         ELSE PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
       IF SUBSTR(PARY(IX),1,1)='('
         THEN DO;
           I=#CMD('CALC '××PARY(IX),RHPTR,RHHDRPT);
           IF I^=0 × MSGDATA=''
             THEN SIGNAL CONDITION(BADPLOT);
           PARY(IX)=SUBSTR(MSGDATA,1,SUFFIX(MSGDATA,' '));
           PARY(IX)=SUBSTR(PARY(IX),PREFIX(MSGDATA,' '));
           MSGDATA='';
           END;
       SELECT;
         WHEN(VERIFY(PARY(IX),'.+-0123456789')=0)
           IF PARM_TYPE='REAL'
             THEN FRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             ELSE BRY(PARM_COUNT)=PARY(IX); /* NUM CON */
         WHEN(SUBSTR(PARY(IX),1,1)='&') DO; /* SYMBOLIC VAR */
           CALL SETCAPS(PARY(IX));
           IF PARM_TYPE='REAL'
             THEN FRY(PARM_COUNT)=
               #SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(PARY(IX),2));
             ELSE BRY(PARM_COUNT)=
               #SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(PARY(IX),2));
           END;
         WHEN(SUBSTR(PARY(IX),1,1)='%') DO; /* SYMBOLIC OUTPUT VAR */
           CALL SETCAPS(PARY(IX));
           IF PARM_TYPE='REAL'
             THEN CALL PUSH(FLOAT_STACK,SUBSTR(PARY(IX),2),
               PRY(PARM_COUNT));
             ELSE CALL PUSH(FIXED_STACK,SUBSTR(PARY(IX),2),
               PRY(PARM_COUNT));
           END;
         OTHERWISE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
         END; /* SELECT */
       END;
     WHEN('ARRAY') SELECT;
       WHEN(PARQCK(IX)) /* QUOTED STRING? */
         PRY(PARM_COUNT)=PTROUT(PTRIN(ADDR(PARY(IX)))+2);
       WHEN(SUBSTR(PARY(IX),1,1)='%') DO; /* SYMBOLIC OUTPUT VAR */
         CALL SETCAPS(PARY(IX));
         ALLOCATE STACKSTR SET(STRPTR);
         STRPTR->STACKSTR='';
         CALL PUSH(CHAR_STACK,SUBSTR(PARY(IX),2),STRPTR);
         PRY(PARM_COUNT)=ADDR(STRPTR->STACKSTR);
         END; /* WHEN DO */
       WHEN(VERIFY(PARY(IX),'.+-0123456789')=0)
         IF INDEX(PARY(IX),'.')=0
           THEN DO;
             PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
             BRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
           ELSE DO;
             PRY(PARM_COUNT)=ADDR(FRY(PARM_COUNT));
             FRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
       OTHERWISE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
       END; /* SELECT */
     OTHERWISE DO;
       MSGDATA='INVALID PARAMETER TYPE='××PARM_TYPE;
       SIGNAL CONDITION(BADPLOT);
       END;
     END; /* SELECT */
   END SETPARM;

