 /* QSTR */
 /*
0*$.HE GENERALIZED SUBROUTINES - QSTR
0*$.HE GIVEN AN OPENING APOSTROPHE,
0*$.HE FIND THE CLOSING APOSTROPHE
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$01/16/79
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  QSTR
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS SUBROUTINE, GIVEN THE INDEX TO AN OPENING APOSTROPHE,
0*$WILL RETURN THE INDEX OF THE MATCHING CLOSING APOSTROPHE.
0*$CALL FORMAT IS AS FOLLOWS:
0*$.IN 5
0*$.NF
0*$.SP 1
0*$DCL QSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),
0*$  CHAR(*) VAR, FIXED BIN(15,0));
0*$DCL OUTSTR CHAR(100) VAR;
0*$DCL MAINSTR CHAR(100) VAR INIT(
0*$  '''HI ''''GEORGE,'''' HOW ARE YOU''');
0*$I = INDEX(MAINSTR,'''');
0*$CALL QSTR(MAINSTR,I,OUTSTR,J)
0*$** J NOW EQUALS 29 **
0*$** OUTSTR NOW EQUALS "HI 'GEORGE,' HOW ARE YOU" **
0*$** NOTE THAT THE DOUBLE QUOTES AROUND "HI GEORGE"**
0*$** HAVE BEEN REDUCED TO SINGLE QUOTES. **
0*$.SP 1
0*$IF THE QUOTED STRING IS MISSING A CLOSING APOSTROPHE, J WILL
0*$BE SET TO ZERO.
 */
 /* INSTR CONTAINS QUOTED STRING */
 /* INDX CONTAINS OFFSET, REL. 1, TO STARTING APOSTROPHE.
         MUST BE SET BY CALLER. */
 /* OUTSTR WILL BE SET BY THIS SUBROUTINE TO THE QUOTED STRING,
         LESS SURROUNDING APOSTROPHES, AND WITH ALL SETS OF PAIRED
         APOSTROPHES REDUCED TO SINGLE APOSTROPHES. */
 /* OUTDX WILL BE SET BY THIS SUBROUTINE TO THE OFFSET, REL. 1,
         TO THE FIRST POSITION IN ISNTR BEYOND THE CLOSING
         APOSTROPHE OF THE QUOTED STRING.  IF THE QUOTED
         STRING IS MISSING A CLOSING APOSTROPHE, OUTDX WILL BE
         SET TO ZERO. */
 QSTR:  PROC(INSTR,INDX,OUTSTR,OUTDX) OPTIONS(REENTRANT);
         DCL (INSTR,OUTSTR) CHAR(*) VAR;
         DCL (INDX,OUTDX) FIXED BIN(15,0);
         DCL (I,J) FIXED BIN(15,0);
         DCL DONE BIT(1) INIT('0'B);
         OUTDX = 0;
         OUTSTR = '';
         I = INDX;
         DO UNTIL(DONE);
           J = INDEX(SUBSTR(INSTR,I+1),'''')+I;
           IF J > I
             THEN DO;
               OUTSTR = OUTSTR××SUBSTR(INSTR,I+1,J-I-1);
               I = J;
               OUTDX = I + 1;
               IF I < LENGTH(INSTR)
                 THEN IF SUBSTR(INSTR,I+1,1) = ''''
                   THEN DO;
                     OUTSTR = OUTSTR ×× '''';
                     I = I+1;
                     END;
                   ELSE DONE = '1'B;
                 ELSE DONE = '1'B;
               END;
             ELSE DO;
               OUTDX = 0;
               DONE = '1'B;
               END;
           END;
         END;
