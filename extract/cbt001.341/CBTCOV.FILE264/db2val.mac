 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * THIS SUBROUTINE CAN BE CALLED TO CONVERT VALUES FROM THE RECORD     *
 * POINTED TO BY PRMPTR FROM THE DATA SET POINTED TO BY RHPTR INTO     *
 * EITHER A SET CLAUSE FOR AN SQL UPDATE STATEMENT IF KEYWORD='KEYWORD'*
 * E.G. NAME1=VALUE1,NAME2=VALUE2,...,NAMEN=VALUEN, OR IF              *
 * KEYWORD^='KEYWORD', THE VALUES CLAUSE FOR AN INSERT STATEMENT,      *
 * CLAUSE FOR AN INSERT STATEMENT, E.G. VALUE1,VALUE2,...,VALUEN.      *
 *                                                                     *

 * NOTE THAT THE SUBROUTINE                                            *
 * ASSUMES THAT, IF FREE-FORM FIELDS ARE INVOLVED, THE MOST RECENT     *
 * "USE NOSYM" SUBCOMMAND APPLIES TO THE RECORD POINTED TO BY PRMPTR.  *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(DB2VAL) PARMS(KEYWORD,RHHDRPT,RHPTR,PRMPTR)
   RETURNS(CHAR(32767) VAR);
   %INCLUDE ABESUBA;

   DCL KEYWORD CHAR(*);
   DCL MISSING DEC FLOAT(16),
       MISSINGCH CHAR(8) BASED(ADDR(MISSING));
   DCL MISSING_PACKED FIXED DEC(15,0) STATIC INIT(-999999999999999),
       MISSING_PACKED_CH CHAR(8) BASED(ADDR(MISSING_PACKED));
   DCL MISSING_INTEGER FIXED BIN(31,0) STATIC INIT(-2147483648),
       MISSING_INTEGER_CH CHAR(4) BASED(ADDR(MISSING_INTEGER));
   DCL MISSING_SMALLINT FIXED BIN(15,0) STATIC INIT(-32768),
       MISSING_SMALLINT_CH CHAR(2) BASED(ADDR(MISSING_INTEGER));
   DCL CONVERT ENTRY(PTR,
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0),
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0))
     RETURNS(CHAR(256) VAR);
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL PRMPTR PTR;
   DCL RET CHAR(32767) VAR;
   DCL (STR,CK,TMP) CHAR(256) VAR;
   DCL COMMA CHAR(1) VAR INIT('');

   IF PRMPTR=RHPTR
     THEN RETURN(''); /* ALL DONE */
   UNSPEC(MISSING)='1'B; /* SET MISSING VALUE */
   RET='';
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     STR=GETFIELD(RHNAMPTR,PRMPTR);
     IF STR=''
       THEN STR='NULL';
       ELSE SELECT(RHNTYPE);
         WHEN(2,3) DO; /* ZONED OR CHAR */
           CK=SUBSTR(STR,PREFIX(STR,' ')); /* DROP LEADING BLANKS */
           CK=SUBSTR(STR,1,SUFFIX(STR,' ')); /* DROP TRAILING BLANKS */
           IF CK='.'
             THEN STR='NULL';
             ELSE IF RHNTYPE=2
               THEN DO; /* CHAR */
                 PUT STRING(TMP) LIST(STR);
                 STR=TMP;
                 END;
               ELSE STR=CK;              /* NUMERIC */
           END;
         OTHERWISE STR=CONVERT_INTFC(STR,RHNAMPTR);
         END; /* SELECT */
     IF KEYWORD='KEYWORD'
       THEN RET=RET××COMMA××RHNNAME××'='××STR;
       ELSE RET=RET××COMMA××STR;
     COMMA=',';
     END;
  RETURN(RET);

 CONVERT_INTFC: PROC(STR,R) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * INTERFACE TO CONVERT SUBROUTINE.  STR IS STRING CONTAINING DATA TO  *
 * BE CONVERTED.  R POINTS TO THE FROM-RHNAMESTR.                      *
 *                                                                     *
 **********************************************************************/
   DCL STR CHAR(*) VAR;
   DCL R PTR;

   IF CONVERT_NULLCK(STR,R)
     THEN RETURN('NULL');
     ELSE RETURN(CALCPRT(GET_OPERAND_CONVERT(STR,R)));
   END CONVERT_INTFC;

 CONVERT_NULLCK: PROC(STR,R) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED BY CONVERT_INTFC TO CHECK FOR MISSING VALUE.  IF SO, '1'B    *
 * WILL BE RETURNED.                                                   *
 *                                                                     *
 **********************************************************************/
   DCL STR CHAR(*) VAR;
   DCL CK CHAR(256) VAR;
   DCL (R,WRKPTR) PTR;
   DCL INTEGER FIXED BIN(31,0) BASED(WRKPTR),
       SMALLINT FIXED BIN(15,0) BASED(WRKPTR);

   IF LENGTH(STR)=0
     THEN RETURN('1'B); /* MISSING VALUE */
   SELECT(R->RHNTYPE);
     WHEN(2,3) DO; /* CHAR,ZONED */
       IF STR=''
         THEN RETURN('1'B); /* MISSING VALUE */
       CK=SUBSTR(STR,PREFIX(STR,' ')); /* ELIMINATE LEADING BLANKS */
       CK=SUBSTR(STR,1,SUFFIX(STR,' ')); /* ELIMINATE TRAILING BLANKS */
       IF CK='.'
         THEN RETURN('1'B); /* MISSING VALUE */
         ELSE RETURN('0'B); /* NOT MISSING VALUE */
       END;
     OTHERWISE DO;
       WRKPTR=PTROUT(PTRIN(ADDR(STR))+2);
       SELECT(R->RHNTYPE);
         WHEN(1) /* FLOAT */
           IF STR=MISSINGCH
             THEN RETURN('1'B);
             ELSE RETURN('0'B);
         WHEN(4) /* PACKED */
           IF STR=SUBSTR(MISSING_PACKED_CH,8-LENGTH(STR)+1)
             THEN RETURN('1'B);
             ELSE RETURN('0'B);
         WHEN(7) /* FIXED */
           IF LENGTH(STR)=4
             THEN IF STR=MISSING_INTEGER_CH
               THEN RETURN('1'B);
               ELSE RETURN('0'B);
             ELSE IF STR=MISSING_SMALLINT_CH
               THEN RETURN('1'B);
               ELSE RETURN('0'B);
         OTHERWISE DO; /* UNSUPPORTED DATA TYPE */
           MSGDATA='WARNING - UNSUPPORTED DATA TYPE SET TO MISSING';
           RETURN('1'B);
           END; /* OTHERWISE */
         END; /* SELECT */
       END; /* OTHERWISE */
     END; /* SELECT */
   END CONVERT_NULLCK;

 GET_OPERAND_CONVERT: PROC(STR,R) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE NUMERIC VALUE FOR A GIVEN FIELD NAME.          *
 *                                                                     *
 **********************************************************************/
   DCL (D,R,S) PTR;
   DCL STR CHAR(*) VAR;
   DCL CON CHAR(8) VAR;
   DCL RET DEC FLOAT(16),
       RETCH CHAR(8) DEF RET;
   DCL TYPETAB(7) CHAR(8) VAR STATIC INIT(
     'FLOAT','CHAR','CHAR','PACKED','HEX','BIT','FIXED');
   DCL INTYPE CHAR(8) VAR;
   IF R=NULL
     THEN INTYPE='CHAR'; /* IF R IS NULL, ASSUME CHARACTER */
     ELSE INTYPE=TYPETAB(R->RHNTYPE);
   CON=CONVERT(PTROUT(PTRIN(ADDR(STR))+2),
     INTYPE,LENGTH(STR),0,
     'FLOAT',8,0);
   IF LENGTH(CON)=0
     THEN RET=MISSING;
     ELSE RETCH=CON;
   RETURN(RET);
   END GET_OPERAND_CONVERT;

 GETFIELD: PROC(G,B) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE VALUE FOR A FIELD. G POINTS TO RHNAMESTR       *
 * CONTROL BLOCK FOR THE FIELD, AND B POINTS TO THE RECORD CONTAINING  *
 * FROM WHICH THE FIELD IS TO BE EXTRACTED.                            *
 *                                                                     *
 **********************************************************************/
   DCL (G,B) PTR;
   DCL L FIXED BIN;

   IF G->RHNCLNG=0 × G->RHNCPOS=0
     THEN RETURN(''); /* FIELD IS ZERO LENGTH */
   L=LENGTH(B->RECSTR);
   IF L < G->RHNCPOS
     THEN RETURN(''); /* EMPTY FIELD */
   IF G->RHNCPOS+G->RHNCLNG-1 >= L
     THEN RETURN(SUBSTR(B->RECSTR,G->RHNCPOS));
     ELSE RETURN(SUBSTR(B->RECSTR,G->RHNCPOS,G->RHNCLNG));
   END GETFIELD;

  END DB2VAL;
