 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* #SKIP */
 DENTSK:  PROC(PSTR) RETURNS(PTR) OPTIONS(REENTRANT);
 /* PSTR SHOULD CONTAIN RANGE SPECS -- STC1:ENC1 STC2:ENC2 ...
    RETURNED PTR WILL BE NULL IF ERROR IS ENCOUNTERED, AND OTHERWISE
    WILL POINT TO LINKED LIST OF ELEMENTS.  STC MUST BE GREATER THAN 0
    AND STC MUST ALWAYS BE LESS THAN OR EQUAL TO ENC.  NO OVERLAPPING
    RANGES ARE ALLOWED. */
   DCL PSTR CHAR(*) VAR;
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL PREFIX ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL (SKHD,SKP) PTR;
   DCL NULL BUILTIN;
   DCL 1 SKEL BASED(SKELPTR),
     2 SKNXT PTR, /* SINGLY-LINKED LIST */
     2 STC FIXED BIN(15,0), /* STARTING COLUMN TO SKIP */
     2 ENC FIXED BIN(15,0); /* ENDING COLUMN TO SKIP */
   RHRC=0;
   SKHD,SKP=NULL; /* EMPTY SKIP LIST - HDPTR = NULL */
   CALL SETSKIP(PSTR); /* GO SET UP SKIP LIST */
   SKP=NULL;
   DO SKELPTR=SKHD REPEAT SKNXT WHILE(SKELPTR^=NULL & RHRC=0);
     IF SKP^=NULL
       THEN IF SKP->ENC>=SKELPTR->STC
         THEN RHRC=4;
     SKP=SKELPTR;
     IF SKELPTR->STC>SKELPTR->ENC × SKELPTR->STC<1
       THEN RHRC=4;
     END;
   IF RHRC^=0
     THEN DO SKELPTR=SKHD REPEAT SKHD WHILE(SKHD^=NULL);
       SKHD=SKNXT;
       FREE SKEL;
       END;
   RETURN(SKHD);
 SETSKIP: PROC(PSTR) OPTIONS(REENTRANT);
   DCL PSTR CHAR(*) VAR;
   DCL (I,J,K,L,M) FIXED BIN(31,0);
   I=1; /* POSITION TO BEGIN SEARCH FOR NEXT PAIR OF COLUMNS */
   DO WHILE(I<=LENGTH(PSTR));
     J=PREFIX(SUBSTR(PSTR,I),' ')+I-1; /* J=NEXT NON-BLANK, MAYBE */
     IF J<I
       THEN LEAVE; /* NO MORE PAIRS OF COLUMNS */
     IF J=LENGTH(PSTR)
       THEN I=LENGTH(PSTR)+1;
       ELSE DO;
         I=INDEX(SUBSTR(PSTR,J+1),' ')+J;
         IF I=J
           THEN I=LENGTH(PSTR)+1;
         END;
     CALL DOEL(SUBSTR(PSTR,J,I-J)); /* GO PROCESS PAIR */
     IF RHRC^=0
       THEN RETURN;
     END;
   END SETSKIP;
 DOEL: PROC(PSTR) OPTIONS(REENTRANT);
   DCL PSTR CHAR(*);
   DCL (I,J,K,L,M,S,E) FIXED BIN(31,0);
   DCL (CHSTC,CHENC,CHTMP) CHAR(8) VAR;
   ON CONDITION(BADOP) GOTO BAD;
   I=INDEX(PSTR,':'); /* IS IT A PAIR? */
   IF I=0 × I=LENGTH(PSTR)
     THEN DO;
       IF VERIFY(PSTR,'0123456789')^=0
         THEN SIGNAL CONDITION(BADOP);
       S,E=PSTR;
       END;
     ELSE DO;
       CHSTC=SUBSTR(PSTR,1,I-1);
       IF VERIFY(CHSTC,'0123456789')^=0
         THEN SIGNAL CONDITION(BADOP);
       S=CHSTC;
       IF SUBSTR(PSTR,I+1,1)='+'
         THEN DO;
           IF I+1=LENGTH(PSTR)
             THEN J=0;
             ELSE DO;
               CHTMP=SUBSTR(PSTR,I+2); /* GET +NNN */
               IF VERIFY(CHTMP,'0123456789')^=0
                 THEN SIGNAL CONDITION(BADOP);
               J=CHTMP;
               END;
           E=S+J;
           END;
         ELSE DO;
           CHENC=SUBSTR(PSTR,I+1);
           IF VERIFY(CHENC,'0123456789')^=0
             THEN SIGNAL CONDITION(BADOP);
           E=CHENC;
           END;
       END;
   ALLOCATE SKEL SET(SKELPTR);
   SKNXT=NULL;
   IF SKHD=NULL
     THEN SKHD=SKELPTR;
     ELSE SKP->SKNXT=SKELPTR;
   SKP=SKELPTR;
   STC=S;
   ENC=E;
   RETURN;
 BAD:
   RHRC=16;
   END DOEL;
   END DENTSK;
