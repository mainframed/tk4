*PROCESS CS(60),MACRO;
 /* ARCHIVE */
 /*
 THIS TSO COMMAND PROCESSOR IS PART OF THE TSO ARCHIVES SYSTEM.
 IF IS USED TO DUMP SPECIFIED DATA SETS TO THE ARCHIVES TAPES.
 FORMAT FOR THE COMMAND IS AS FOLLOWS:

     ARCHIVE 'QUALIFIERS' PROMPT

 QUALIFIERS MAY BE ANY NUMBER OF INDEX QUALIFIERS, UP TO AND
 INCLUDING THE DSNAME QUALIFIER.  IF THE QUALIFIERS ARE NOT SURROUNDED
 BY APOSTROPHES, THE TSO USERID WILL BE PREFIXED AS THE HIGH-LEVEL
 QUALIFIER.  IF THE QUALIFIERS ARE SURROUNDED IN APOSTROPHES, A CHECK
 IS MADE AGAINST A TABLE IN LTHE PROGRAM TO ENSURE THAT THE CURRENT
 USERID IS AUTHORIZED TO ARCHIVE DATA SETS WITH DSNAMES NOT HAVING
 THEIR USERID AS THE HIGH-LEVEL QUALIFIER.

 IF THE QUALIFIERS REPRESENT INDEX LEVELS ONLY, ALL DATA SETS CATALOGED
 UNDER THE SPECIFIED INDEX LEVELS WILL BE DUMPTED TO THE ARCHIVES
 TAPES.  IF THE LOW-LEVEL QUALIFIER IS A DSNAME QUALIFIER, THEN ONLY
 THAT DSNAME WILL BE DUMPED.

 THE PROMPT KEYWORD IS OPTIONAL, AND IS USED IF THE USER WISHES
 TO SPECIFY MORE THAT ONE SET OF QUALIFIERS.  THE COMMAND WILL
 KEEP PROMPTING THE USER UNTIL HE ENTERS A NULL LINE.
 */
         % INCLUDE CPINIT1;
         % @CP = 'ARCHIVE';
         % INCLUDE CPINIT2;
         % INCLUDE CTLGDEF;
         @PROC(1,LEVDSN#(DSNAME),PROMPT,LIST,
    JOBCRD(#(DSNAME,DEFAULT='K.IS.U0000.MSTSCH(AU109999)')));
         DCL VOLS(20) CHAR(6) INIT((20)(6)' ');
         DCL VOLINDX FIXED BIN(15,0) INIT(1);
         DCL (VOLINIT,USERR,SUBSW,FIRSTDSN) BIT(1) INIT('0'B);
         DCL PTRFIX FIXED BIN(31,0) DEF CTLGPTR;
         DCL RETB FIXED BIN(31,0);
         DCL RETCODE FIXED BIN(31,0) DEF RETB;
         DCL RET BIT(32) DEF RETB;
         DCL REG15 BIT(8) DEF RETB;
         DCL RETC CHAR(4) DEF RETB;
         DCL CVOL CHAR(6);
         DCL DSN CHAR(44) VARYING INIT('');
         DCL 1 ABND,
              2 DUM BIN FLOAT(53),
              2 MAREA CHAR(265) INIT(' ');
         DCL INQUAL CHAR(46) VARYING;
         DCL CTLGRET CHAR(8);
         DCL 1 SETUP,
              2 CON1 CHAR(15) INIT('/*SETUP'),
              2 SERARY(8),
               3 OUTSER CHAR(6) INIT((8)(6)' '),
               3 OUTCOMMA CHAR(1) INIT((8)(1)' '),
              2 CON2 CHAR(9) INIT(' ');
         DCL 1 MSGREC,
              2 CON1 CHAR(15) INIT('/*MESSAGE'),
              2 CON2 CHAR(10) INIT((10)'*'),
              2 TAPECNT PIC'Z9',
              2 CON3 CHAR(6) INIT(' 9TRK '),
              2 CON4 CHAR(47) INIT((10)'*');
         DCL TMPFILE FILE RECORD OUTPUT ENV(F BLKSIZE(80));
         DCL JCLREC CHAR(80);
         DCL MYUSERID CHAR(7) VARYING;
         DCL USEIDLEN FIXED BIN(31,0) INIT('0');
         DCL (ERROR_CODE,INFO_CODE) FIXED BINARY(15);
         DCL DDNAME CHAR(8);
         DCL JOBCARD FILE RECORD INPUT;
         DCL JCDDN CHAR(8);
         DCL JCMEMBER CHAR(8);
         DCL REC CHAR(80) VARYING;
         %INCLUDE @9,@9SYSOUT,@9WRITER,@9DDNRET,@9CLOSE,@9ALLOC,
                  @9DCLSVC,@9DSNAME,@9STATUS,@9DDNAME,@9FREE,@9MEMBER;
  OPEN_INTERNAL_READER: PROCEDURE;
  J = INDEX(JOBDSN,'(');
  IF J ^= 0 THEN
     DO;
        @9MEMBER(  SUBSTR(JOBDSN, J+1, INDEX(JOBDSN,')')-J-1)  );
        JOBDSN = SUBSTR(JOBDSN,1,J-1);
     END;
  @9DSNAME(JOBDSN);
  @9STATUS('SHR');
  @9DDNRET(JCDDN);
  @9ALLOC(ERROR_CODE,INFO_CODE);
  IF ERROR_CODE ^= 0
    THEN DO;
       PUT FILE(SYSPRINT) EDIT
           ('ERROR ALLOCATING JOBCARD DATA SET = ') (A)
           (ERROR_CODE,INFO_CODE)                   (F(5),F(5));
       PUT DATA(JOBDSN);
       STOP;
       END;
  OPEN FILE(JOBCARD) TITLE(JCDDN);
  @9SYSOUT('*');
  @9WRITER('INTRDR');
  @9DDNRET(DDNAME);
  @9CLOSE;
  @9ALLOC(ERROR_CODE,INFO_CODE);
  IF ERROR_CODE ^= 0
    THEN DO;
       PUT FILE(SYSPRINT) EDIT
           ('ERROR ALLOCATING INTERNAL READER, CODE = ') (A)
           (ERROR_CODE)                                  (F(5));
       STOP;
       END;
  OPEN FILE(TMPFILE) TITLE(DDNAME);
  ON ENDFILE(JOBCARD) GOTO JCEOJ;
  DO FOREVER=1 REPEAT FOREVER;
    READ FILE(JOBCARD) INTO(REC);
    WRITE FILE(TMPFILE) FROM(REC);
    END;
 JCEOJ:
  CLOSE FILE(JOBCARD);
  @9DDNAME(JCDDN);
  @9FREE;
 END OPEN_INTERNAL_READER;
         MYUSERID = SYMC('&SYSUID');
         USEIDLEN = LENGTH(MYUSERID);
         DCL ARCHDSN CHAR(44) INIT('U.SD.U000.TSOARCH(0)');
 CALLCTLG:
         CTLGPTR = ADDR(MAREA);
         DSN = ARCHDSN;
         CALL SYSCTLG('NAME',RET,DSN,'SYSRES',MAREA);
         IF RETCODE ^= 0
              THEN DO;
                   CALL CTLGERR;
                   @WRITE('CONTACT SUPPORT SERVICES - TCC');
                   SIGNAL ERROR;
              END;
         DCL JOBDSN CHAR(44) VARYING;
         JOBDSN = SETDSN@(JOBCRDSUB);
         /* @SETL(&JOBDSN=JOBDSN); */
         /* @ALLOC(DA(BPRT.CNTL),WORK); */
         /* OPEN FILE(TMPFILE) TITLE(JCDDN); */
         CALL OPEN_INTERNAL_READER;
         IF VLSTBLK.VOLCNT > 8
              THEN I = 8;
              ELSE I = VLSTBLK.VOLCNT;
         TAPECNT = I;
         WRITE FILE(TMPFILE) FROM(MSGREC);
         DO J = 1 TO I;
              OUTSER(J) = VLSTBLK.VOLID.VOLSER(J);
              IF J > 1
                   THEN OUTCOMMA(J-1) = ',';
              END;
         WRITE FILE(TMPFILE) FROM(SETUP);
         PDEPTR = ADDR(LEVDSN);
         WRKPTR = PDEDSPT;
         IF ^SUBSTR(PDEDSF1,2,1)
              THEN
                   DSN = MYUSERID ×× '.' ×× SUBSTR(WRKSTR,1,PDEDSL1);
              ELSE DO;
                   DSN = SUBSTR(WRKSTR,1,PDEDSL1);
                   CALL USERCK;
                   IF USERR = '1'B
                        THEN DO;
               @PUTGET('REENTER OR ENTER NULL LINE TO END - ',INQUAL);
                             CALL QUALCK;
                        END;
              END;
 NXT:
         VOLINIT = '1'B;
         CTLGPTR = ADDR(MAREA);
         PTRFIX = PTRFIX + 2;
         CVOL = 'SYSRES';
         CALL SYSCTLG('NAME',RET,DSN,CVOL,MAREA);
         CVOL = SUBSTR(MAREA,260,6);
         IF RETCODE = 0
              THEN DO;
                   CTLGPTR = ADDR(MAREA);
                   CALL OBPROC(DSN,VLSTBLK.VOLSER(1));
                   GO TO NXTP;
                   END;
         IF REG15 ^= '00001100'B
              THEN DO;
                   CALL CTLGERR;
                   @WRITE('ERROR - DSN OR QUALIFIER NOT FOUND.');
                   @PUTGET('REENTER - ',INQUAL);
                   CALL QUALCK;
                   GO TO NXT;
              END;
         CALL RECURS(INDLO);
 NXTP:
         VOLINDX = VOLINDX + 1;
         IF VOLS(VOLINDX) ^= ' '
              THEN GO TO NXT;
         IF PROMPT ^= 0
              THEN DO;
                   @PUTGET(' ENTER NEXT TO BE ARCHIVED - ',INQUAL);
                   CALL QUALCK;
                   GO TO NXT;
                   END;
 EOJ:
         CLOSE FILE(TMPFILE);
         /* @CMD('SUBMIT (''&JOBDSN'' BPRT.CNTL)'); */
         @WRITE('ARCHIVE JOB SUCESSFULLY SUBMITTED');
 ENDJOB:
         /* @CMD('DELETE BPRT.CNTL') */;
 RECURS: PROC(PTTR) RECURSIVE;
         DCL PTTR CHAR(3);
         DCL TTRC CHAR(3);
         TTRC = PTTR;
         DCL 1 ABND,
              2 DUM BIN FLOAT(50),
              2 AREA,
               3 BLK CHAR(256),
               3 ATTR CHAR(3),
               3 ACVOL CHAR(6);
         DCL SAVPTR PTR;
         DCL N FIXED BIN(15,0);
         DCL 1 GDGNAM BASED(CTLGPTR),
              2 GDGG CHAR(1),
              2 GDGNUM BIT(32);
 NEWBLK:
         CALL SYSCTLG('BLOCK',RET,TTRC,CVOL,BLK);
         IF RETB ^= 0
              THEN DO;
                   CALL CTLGERR;
                   SIGNAL ERROR;
              END;
         CTLGPTR = ADDR(AREA);
         PTRFIX = PTRFIX + 2;
 NEWENT:
         IF NAME = HIGH(8)
              THEN DO;
                 IF TTR = LOW(3)
                   THEN RETURN;
                   ELSE DO;
                        TTRC = TTR;
                        GO TO NEWBLK;
                        END;
               END;
         IF HCNT > '00000010'B & HCNT < '00000110'B
              THEN GO TO GETENT;
         IF SUBSTR(GDGNUM,1,8) > '00000101'B
           & SUBSTR(GDGNUM,1,8) < '00010000'B
              THEN GDGNUM = ^GDGNUM;
         DO N = 1 TO 8 WHILE(SUBSTR(NAME,N,1) ^= ' ');
              END;
         IF LENGTH(DSN) > 0
              THEN DSN = DSN ×× '.';
         DSN = DSN ×× SUBSTR(NAME,1,N-1);
         IF HCNT > '00000101'B × HCNT = '00000001'B
              THEN GO TO UNCATLG;
         SAVPTR = CTLGPTR;
         CALL RECURS(TTR);
         CTLGPTR = SAVPTR;
 UNCAT:
         N = LENGTH(DSN)-N;
         IF N > 0
              THEN DSN = SUBSTR(DSN,1,N);
              ELSE DSN = '';
         GO TO GETENT;
 UNCATLG:
         CALL OBPROC(DSN,PTRDS.VOLSER(1));
         GO TO UNCAT;
 GETENT:
         PTRFIX = PTRFIX + 12 + 2*HCNT;
         GO TO NEWENT;
              END;
 USERCK:  PROC;
         USERR = '0'B;
         IF SUBSTR(DSN,1,6) = SUBSTR(MYUSERID,1,6)
              THEN RETURN;
         IF SUBSTR(MYUSERID,1,1) = 'X'
                   THEN RETURN;
         @WRITE('ERROR - YOU CAN ARCHIVE ONLY DATA SETS PREFIXED WITH YO
 UR USERID');
         USERR= '1'B;
         END;
 OBPROC:  PROC(PARMDSN,PARMSER);
         DCL PARMSER CHAR(6);
         DCL PARMDSN CHAR(44) VARYING;
         DCL 1 FREDSN UNALIGNED,
              2 FDLEN FIXED BIN(15,0),
              2 FDNAM CHAR(44);
         FDLEN = LENGTH(PARMDSN);
         FDNAM = PARMDSN;
         DA18PDSN = ADDR(FREDSN);
         DA18DDN = ' ';
         @FREE(KEEP);
         IF SUBSTR(PARMSER,1,1) ^= 'F' &
            SUBSTR(PARMSER,1,1) ^= 'O'
                THEN RETURN;
         DO IX=1 TO 20 WHILE(VOLS(IX)^=' ' & VOLS(IX)^=PARMSER);
              END;
         VOLS(IX) = PARMSER;
         IF IX = VOLINDX
              THEN IF VOLINIT
                   THEN DO;
                        VOLINIT = '0'B;
                        JCLREC = '//ARCH EXEC TSOARCH,SER=' ××
                          PARMSER;
                        WRITE FILE(TMPFILE) FROM(JCLREC);
                        JCLREC = '//ARC.ARCHIVE DD *';
                        WRITE FILE(TMPFILE) FROM(JCLREC);
                        END;
                   ELSE;
              ELSE RETURN;
         JCLREC = ' DUMP DSN=' ×× PARMDSN;
         IF LIST ^= 0
           THEN DO;
             IF ^FIRSTDSN THEN
                 @WRITE('THE FOLLOWING DATA SET(S) WILL BE ARCHIVED:');
             @SETL(&ARCHDSN = PARMDSN);
             @WRITE('   &ARCHDSN');
             FIRSTDSN = '1'B;
           END;
         SUBSW = '1'B;
         WRITE FILE(TMPFILE) FROM(JCLREC);
         END;
 CTLGERR: PROC;
         CALL TROUT(RETC,CTLGRET);
         @SETL(&CTLGRC = CTLGRET);
         @SETL(&CTLGDSN = DSN);
         @WRITE('ERROR = &CTLGRC ACCESSING CATALOG, DSN = &CTLGDSN');
         END;
 QUALCK: PROC;
 REDO:
         INLEN = LENGTH(INQUAL);
         IF INLEN = 0
              THEN DO;
                   IF SUBSW = '1'B THEN GO TO EOJ;
                                   ELSE GO TO ENDJOB;
              END;
                   IF SUBSTR(INQUAL,1,1) ^= ''''
                        THEN DSN = MYUSERID ×× '.' ×× INQUAL;
                        ELSE DO;
                             DSN = SUBSTR(INQUAL,2,INLEN-2);
                             CALL USERCK;
                             IF USERR = '1'B
                                  THEN DO;
                                       @PUTGET('REENTER -',INQUAL);
                                       GO TO REDO;
                                  END;
                             END;
                   VOLS(*) = ' ';
                   VOLINDX = 1;
         END;
 DEADEND:
         END;
