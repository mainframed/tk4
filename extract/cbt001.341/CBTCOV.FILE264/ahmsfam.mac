 /* AHMSFAM */
 /* NOTE THAT THE SEQUENCE OF COMMANDS FOR COMPILING THIS MODULE ARE
    ALLOC FI(DDLIB) DA('X75826.ABE.OBJ') SHR REUSE
    %ABEDSNH AHMSFAM LOAD(X)
    END;END
      INCLUDE DDLIB(DB2VAL)
      ENTRY AHMSFAM
    %HMSBIND
 */
   %INCLUDE ABESUB;
 ABESUB(AHMSFAM) PARMS(RHHDRPT,RHPTR,PASSPTR,CODE) RETURNS(PTR)
   RENT(NO) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE AHMSEDV;

   DCL PASSPTR PTR;
   DCL CODE FIXED BIN(15,0);

   DFT RANGE(*) STATIC;
   DCL PARMPTR PTR;
   DCL 1 PARSSTR BASED(PARMPTR),
   %INCLUDE ABEFAM;
   DCL STMT CHAR(256) VAR;
   DCL (PLIRETV,DIM) BUILTIN;
   DCL DSNTIAR ENTRY OPTIONS(ASM,INTER,RETCODE);
   DCL DATA_LEN FIXED BIN(31) STATIC INIT(120);
   DCL DATA_DIM FIXED BIN(31) STATIC INIT(8);
   DCL 1 ERROR_MESSAGE AUTO,
     2 ERROR_LEN FIXED BIN(15,0) UNAL INIT((DATA_LEN*DATA_DIM)),
     2 ERROR_TEXT(DATA_DIM) CHAR(DATA_LEN);
   DCL MSG CHAR(130) VAR INIT('');
   DCL 1 COLDATA BASED(COLPTR),
     2 COLIND FIXED BIN(15,0),
     2 COLLEN FIXED BIN(15,0),
     2 COLSTR CHAR(L REFER(COLLEN));
   DCL TIX FIXED BIN(15,0);
   DCL (EOFSW,OPENSW,INITSW) BIT(1) INIT('0'B);
   DCL NAMES(5) CHAR(8) VAR INIT(
       'FEATDESC',
       'FEATURES',
       'LOCNAMES',
       'THINGTAB',
       'VENDORS');

   EXEC SQL INCLUDE SQLDA;
   EXEC SQL INCLUDE SQLCA;

   EXEC SQL WHENEVER SQLWARNING CONTINUE;
   EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
   GOTO BY_SQLERROR;
 SQLERROR:
   PUT STRING(MSG) EDIT('SQL ERROR, RETCODE=',SQLCODE)(A,F(10));
   CALL #TERM(MSG);
 /*FETCH DSNTIAR; CAUSES OPERATION EXCEPTION
 */CALL DSNTIAR(SQLCA,ERROR_MESSAGE,DATA_LEN);
   IF PLIRETV=0
     THEN DO I=1 TO DIM(ERROR_TEXT,1);
       CALL #TERM(ERROR_TEXT(I));
       END;
   SIGNAL ERROR;
 BY_SQLERROR:;

   EXEC SQL DECLARE FEATDESC STATEMENT;
   EXEC SQL DECLARE FEATURES STATEMENT;
   EXEC SQL DECLARE LOCNAMES STATEMENT;
   EXEC SQL DECLARE THINGTAB STATEMENT;
   EXEC SQL DECLARE VENDORS  STATEMENT;
   EXEC SQL DECLARE FEATDESC CURSOR FOR FEATDESC;
   EXEC SQL DECLARE FEATURES CURSOR FOR FEATURES;
   EXEC SQL DECLARE LOCNAMES CURSOR FOR LOCNAMES;
   EXEC SQL DECLARE THINGTAB CURSOR FOR THINGTAB;
   EXEC SQL DECLARE VENDORS  CURSOR FOR VENDORS;

   IF CODE^=0
     THEN IF ^INITSW
       THEN DO;
         CALL #TERM('ERROR - INITIALIZATION NOT DONE YET');
         SIGNAL ERROR;
         END;
   SELECT(CODE);
     WHEN(0) RETURN(DO_INIT);          /* INITIALIZATION TIME */
     WHEN(1) RETURN(DO_SUCC(PASSPTR)); /* GET NEXT (#SUCC)    */
     WHEN(2) RETURN(DO_PRED(PASSPTR)); /* GET PRIOR (#PRED)   */
     WHEN(3) RETURN(NULL);             /* DO A SAVE           */
     WHEN(4) RETURN(DO_END);           /* DO END PROCESSING   */
     WHEN(5) RETURN(NULL);             /* DO DISPLAY          */
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */

 DO_END: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=4, I.E. END TIME.                                  *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL ID CHAR(8) VAR;

   IF OPENSW
     THEN DO;
       SELECT(TIX);
         WHEN(1) EXEC SQL CLOSE FEATDESC;
         WHEN(2) EXEC SQL CLOSE FEATURES;
         WHEN(3) EXEC SQL CLOSE LOCNAMES;
         WHEN(4) EXEC SQL CLOSE THINGTAB;
         WHEN(5) EXEC SQL CLOSE VENDORS;
         OTHERWISE;
         END; /* SELECT */
       OPENSW='0'B;
       END;
   SELECT(TIX);
     WHEN(1) ID='FID';
     WHEN(2) ID='ID/FID';
     WHEN(3) ID='LOCNO';
     WHEN(4) ID='ID';
     WHEN(5) ID='VENDOR';
     OTHERWISE ID='';
     END; /* SELECT */
   IF ID^=''
     THEN CALL DO_UPDATE(ID); /* PROCESS UPDATES */
   /* NOW FREE STORAGE */
   DO I=1 TO SQLD;
     COLPTR=SQLIND(I);
     FREE COLDATA;
     END;
   FREE SQLDA;
   FREE PARSSTR;
   RETURN(NULL);
   END DO_END;

 DO_INIT: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=0, I.E. INITIALIZATION TIME.                       *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;

   INITSW='1'B;
   ALLOCATE PARSSTR SET(PARMPTR);
   PARMPTR->PARSSTR=PASSPTR->PARSSTR;
   DO TIX=1 TO HBOUND(NAMES,1);
     IF INDEX(INDSN,NAMES(TIX))^=0
       THEN LEAVE;
     END;
   IF TIX>HBOUND(NAMES,1)
     THEN DO;
       CALL #TERM('INVALID TABLE NAME');
       SIGNAL ERROR;
       END;
   STMT='SELECT * FROM '××INDSN;
   SQLSIZE=330; /* ALLOCATE THE MAXIMUM SIZE SQLDA */
   ALLOCATE SQLDA;
   SELECT(TIX);
     WHEN(1) DO;
       EXEC SQL PREPARE  FEATDESC FROM :STMT;
       EXEC SQL DESCRIBE FEATDESC INTO SQLDA;
       END;
     WHEN(2) DO;
       EXEC SQL PREPARE  FEATURES FROM :STMT;
       EXEC SQL DESCRIBE FEATURES INTO SQLDA;
       END;
     WHEN(3) DO;
       EXEC SQL PREPARE  LOCNAMES FROM :STMT;
       EXEC SQL DESCRIBE LOCNAMES INTO SQLDA;
       END;
     WHEN(4) DO;
       EXEC SQL PREPARE  THINGTAB FROM :STMT;
       EXEC SQL DESCRIBE THINGTAB INTO SQLDA;
       END;
     WHEN(5) DO;
       EXEC SQL PREPARE  VENDORS  FROM :STMT;
       EXEC SQL DESCRIBE VENDORS  INTO SQLDA;
       END;
     OTHERWISE;
     END; /* SELECT */
   DO I=1 TO SQLD;
     SELECT(SQLTYPE(I));
       WHEN(484,485) /* FIXED DECIMAL */
         L=SQLLEN(I)/256;
       OTHERWISE
         L=SQLLEN(I);
       END; /* SELECT */
     ALLOCATE COLDATA;
     SQLDATA(I)=ADDR(COLSTR);
     SQLIND(I)=COLPTR;
     END;
   SELECT(TIX);
     WHEN(1) DO;
       EXEC SQL OPEN FEATDESC;
       END;
     WHEN(2) DO;
       EXEC SQL OPEN FEATURES;
       END;
     WHEN(3) DO;
       EXEC SQL OPEN LOCNAMES;
       END;
     WHEN(4) DO;
       EXEC SQL OPEN THINGTAB;
       END;
     WHEN(5) DO;
       EXEC SQL OPEN VENDORS;
       END;
     OTHERWISE;
     END; /* SELECT */
   OPENSW='1'B;
   RETURN(DO_SUCC(RHPTR));
   END DO_INIT;

 DO_PRED: PROC(CUR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=1, I.E. GET-NEXT-SEQUENTIAL RECORD.                *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (CUR,RET) PTR;

   DO RET=DO_PRED_SUB(CUR) REPEAT DO_PRED_SUB(RET)
     WHILE(RET^=RHPTR) UNTIL(^SUBSTR(RET->RECFLGS,7,1));
     END;
   RETURN(RET);
   END DO_PRED;

 DO_PRED_SUB: PROC(CUR) RETURNS(PTR) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=2, I.E. GET-PRIOR-SEQUENTIAL RECORD.               *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (CUR,CURHOLD,SAVPTR) PTR;

   CURHOLD=CUR;
   DO WHILE(^EOFSW);
     SAVPTR=DO_SUCC(LSTHDR);
     END;
   IF CURHOLD=NULL × CURHOLD=RHPTR
     THEN RETURN(RHPTR->LSTHDR);
     ELSE RETURN(CURHOLD->LSTPTR);
   END DO_PRED_SUB;

 DO_SUCC: PROC(CUR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=1, I.E. GET-NEXT-SEQUENTIAL RECORD.                *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (CUR,RET) PTR;

   DO RET=DO_SUCC_SUB(CUR) REPEAT DO_SUCC_SUB(RET)
     WHILE(RET^=RHPTR) UNTIL(^SUBSTR(RET->RECFLGS,7,1));
     END;
   RETURN(RET);
   END DO_SUCC;

 DO_SUCC_SUB: PROC(CUR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=1, I.E. GET-NEXT-SEQUENTIAL RECORD.                *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (CUR,SAVPTR,LAST) PTR;

   IF EOFSW
     THEN IF CUR=NULL
       THEN RETURN(RHPTR->NXTHDR);
       ELSE RETURN(CUR->NXTPTR);
   IF CUR=RHPTR × CUR=NULL /* DOES HE WANT THE FIRST RECORD? */
     THEN IF NXTHDR^=RHPTR
       THEN RETURN(NXTHDR); /* RECORD ALREADY IN MEMORY */
       ELSE;
     ELSE IF CUR->NXTPTR^=RHPTR
       THEN RETURN(CUR->NXTPTR); /* RECORD ALREADY IN MEMORY */
   SAVPTR=RECPTR;
   RECPTR=LSTHDR;
   SELECT(TIX);
     WHEN(1) DO;
       EXEC SQL FETCH FEATDESC USING DESCRIPTOR SQLDA;
       END;
     WHEN(2) DO;
       EXEC SQL FETCH FEATURES USING DESCRIPTOR SQLDA;
       END;
     WHEN(3) DO;
       EXEC SQL FETCH LOCNAMES USING DESCRIPTOR SQLDA;
       END;
     WHEN(4) DO;
       EXEC SQL FETCH THINGTAB USING DESCRIPTOR SQLDA;
       END;
     WHEN(5) DO;
       EXEC SQL FETCH VENDORS  USING DESCRIPTOR SQLDA;
       END;
     OTHERWISE;
     END; /* SELECT */
   IF SQLCODE^=0
     THEN DO; /* END OF FILE */
       RECPTR=SAVPTR;
       SELECT(TIX);
         WHEN(1) DO;
           EXEC SQL CLOSE FEATDESC;
           END;
         WHEN(2) DO;
           EXEC SQL CLOSE FEATURES;
           END;
         WHEN(3) DO;
           EXEC SQL CLOSE LOCNAMES;
           END;
         WHEN(4) DO;
           EXEC SQL CLOSE THINGTAB;
           END;
         WHEN(5) DO;
           EXEC SQL CLOSE VENDORS;
           END;
         OTHERWISE;
         END; /* SELECT */
       OPENSW='0'B;
       EOFSW='1'B; /* INDICATE ENTIRE DATASET IN MEMORY */
       RETURN(RHPTR); /* RETURN EOF INDICATOR */
       END;
   LAST=NULL;
   CALL #ABESUBR(RHPTR,RHHDRPT,SQLDAPTR,PARMPTR,MSG,LAST);
   RECPTR=SAVPTR;
   RETURN(LSTHDR);
   END DO_SUCC_SUB;

 DO_UPDATE: PROC(ID);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURRENT RECORD MUST BE USED TO UPDATE DB2 TABLE         *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL ID CHAR(8) VAR;
   DCL WHERE_DATA CHAR(256) VAR;
   DCL DB2VAL ENTRY(CHAR(*),PTR,PTR,PTR) RETURNS(CHAR(32767) VAR);
   DCL CMD CHAR(32767) VAR;
   DCL COLNAMES CHAR(1024) VAR INIT('');
   DCL COMMA CHAR(1) VAR INIT('');
   DCL (RHN,RHNA) PTR;

   RHN,RHNA=NULL;
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     IF ID='ID/FID'
       THEN IF RHNNAME='ID'
         THEN RHN=RHNAMPTR;
         ELSE IF RHNNAME='FID'
           THEN RHNA=RHNAMPTR;
           ELSE;
       ELSE IF RHNNAME=ID
         THEN RHN=RHNAMPTR;
     COLNAMES=COLNAMES××COMMA××RHNNAME;
     COMMA=',';
     END;
   IF RHN=NULL
     THEN SIGNAL ERROR;
   DO RECPTR=NXTHDR REPEAT NXTPTR WHILE(RECPTR^=HDPTR);
     IF SUBSTR(RECFLGS,1,1) /* NEW, CHANGED, OR DELETED? */
       THEN DO;
         IF SUBSTR(RECFLGS,6,1) /* NEW? */
           THEN CMD='INSERT INTO X75826.'××NAMES(TIX)××' ('××COLNAMES××
             ') VALUES('××DB2VAL('',RHHDRPT,RHPTR,RECPTR)××')';
           ELSE DO; /* IT MUST BE CHANGE OR DELETE */
             IF ID='ID/FID'
               THEN WHERE_DATA=' WHERE ID='××GETDATA_SUB(RECPTR,RHN)××
                 ' AND FID='××GETDATA_SUB(RECPTR,RHNA);
               ELSE DO;
                 WHERE_DATA=GETDATA_SUB(RECPTR,RHN);
                 IF NAMES(TIX)='VENDORS'
                   THEN WHERE_DATA=''''××WHERE_DATA××'''';
                 WHERE_DATA=' WHERE '××ID××'='××WHERE_DATA;
                 END;
             IF SUBSTR(RECFLGS,7,1) /* DELETE? */
               THEN CMD='DELETE FROM X75826.'××NAMES(TIX)××WHERE_DATA;
               ELSE CMD='UPDATE X75826.'××NAMES(TIX)××' SET '××
                 DB2VAL('KEYWORD',RHHDRPT,RHPTR,RECPTR)××WHERE_DATA;
             END;
         EXEC SQL EXECUTE IMMEDIATE CMD;
         END;
     END;
   END DO_UPDATE;

   END AHMSFAM;
