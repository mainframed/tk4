 /* COPYRIGHT 1986 BY THOMAS GLEN SMITH                      */
 /* ABE071,SPLINE,FILLET                                     */
 /* FILLET <XARRAY> <YARRAY>                                 */
 /* SPLINE <XARRAY> <YARRAY> <XOUTARRAY> <YOUTARRAY> <K> <1> */
   %INCLUDE ABESUB;
 ABESUB(ABE071) PARS(000000) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABEMISS;
   %INCLUDE APLCB;

   DCL SETCAPS ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*)) RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16)) RETURNS(CHAR(80) VAR);
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL SPLINE ENTRY RETURNS(FIXED BIN(15,0));

   DCL BLACK CHAR(2) STATIC INIT('-1');
   DCL YELLOW CHAR(1) STATIC INIT('6');
   DCL TURQUOISE CHAR(1) STATIC INIT('5');
   DCL YES FIXED BIN STATIC INIT(1);
   DCL NO FIXED BIN STATIC INIT(0);
   DCL DISPLAY FIXED BIN INIT(YES);
   DCL COMMAND CHAR(6);
   DCL (XAP,XOH,XOP,XRH,YAP,YOH,YOP,YRH) PTR;
   DCL XIN(1000) DEC FLOAT(6) BASED(XAP);
   DCL YIN(1000) DEC FLOAT(6) BASED(YAP);
   DCL XOUT(1000) DEC FLOAT(6) BASED(XOP);
   DCL YOUT(1000) DEC FLOAT(6) BASED(YOP);
   DCL (XNAME,XONAME,YNAME,YONAME) CHAR(8) VAR;
   DCL (K,X,Y) DEC FLOAT(6);
   DCL (INSIZE,OUTSIZE) FIXED BIN(15,0);
   DCL DISPLAY_CURVE ENTRY VARIABLE;
   DCL MSG CHAR(70);

   ON CONDITION(ERR071) GOTO ERR;
   GOTO BYERR;
 ERR:;
   IF MSGDATA=''
     THEN MSGDATA='ERROR DURING PROCESSING IN FILLET OR SPLINE';
   RHRC=8;
   RETURN;
 BYERR:;

   XNAME=LOWERCASE(PARY(1));
   YNAME=LOWERCASE(PARY(2));
   /* NOW LOCATE THE INPUT X-Y ARRAYS */
   XAP=GET_ARRAY(PARY(1),XRH);
   YAP=GET_ARRAY(PARY(2),YRH);
   IF CMDINDX<3
     THEN DO; /* IT IS SPLINE */
       COMMAND='SPLINE';
       DISPLAY_CURVE=DISPLAY_SPLINE;
       /* NOW LOCATE THE OUTPUT X-Y ARRAYS */
       XOP=GET_ARRAY(PARY(3),XOH);
       YOP=GET_ARRAY(PARY(4),YOH);
       XONAME=LOWERCASE(PARY(3));
       YONAME=LOWERCASE(PARY(4));
       IF PARY(5)^=''
         THEN K=PARY(5);
         ELSE K=0.5;
       OUTSIZE=XOH->RH_APL->RH_APL_DIM(1);
       IF PARY(6)^=''
         THEN DISPLAY=NO;
       END;
     ELSE DO;
       COMMAND='FILLET';
       DISPLAY_CURVE=DISPLAY_FILLET;
       END;
   MAXSIZE=XRH->RH_APL->RH_APL_DIM(1);
   IF MAXSIZE^=YRH->RH_APL->RH_APL_DIM(1)
     THEN DO;
       MSGDATA='INPUT ARRAYS MUST HAVE IDENTICAL DIMENSIONS';
       SIGNAL CONDITION(ERR071);
       END;
   INSIZE=0;
   DO I=1 TO MAXSIZE WHILE(XIN(I)^=0.0);
     INSIZE=INSIZE+1;
     END;

   IF DISPLAY=NO
     THEN DO;
       MSG='';
       CALL DISPLAY_CURVE(0,MSG);
       IF MSG^=''
         THEN DO;
           MSGDATA=MSG;
           SIGNAL CONDITION(ERR071);
           END;
       END;
     ELSE DO;
       I=#CMD('GDDM GSILOC 1 0 50 50',RHPTR,RHHDRPT);
       I=#CMD('GDDM GSENAB 1 1 1',RHPTR,RHHDRPT); /* ENABLE CHOICE */
       I=#CMD('GDDM GSENAB 2 1 1',RHPTR,RHHDRPT); /* ENABLE LOCATOR */
       I=#CMD('GDDM GSCLP 1',RHPTR,RHHDRPT);
       I=#CMD('GDDM ASDFLD 1 1 1 1 79 1',RHPTR,RHHDRPT);
       MAINLOOP: DO FOREVER=1 REPEAT FOREVER;
         CHOICE=DISPLAY_MAIN(X,Y,DISPLAY_CURVE);
         IF CHOICE=3
           THEN LEAVE MAINLOOP;
         J=FINDIX(X,Y);
         SELECT(CHOICE);
           WHEN(1) CALL DO_MOVE(X,Y,J,DISPLAY_CURVE);
           WHEN(2) CALL DO_ADD (X,Y,J,DISPLAY_CURVE);
           WHEN(3) LEAVE MAINLOOP;
           WHEN(4) CALL DO_DELETE(X,Y,J,DISPLAY_CURVE);
           OTHERWISE;
           END; /* SELECT */
         END MAINLOOP;
       I=#CMD('GDDM GSENAB 1 1 0',RHPTR,RHHDRPT); /* ENABLE CHOICE */
       I=#CMD('GDDM GSENAB 2 1 0',RHPTR,RHHDRPT); /* ENABLE LOCATOR */
       END;

 DISPLAY_FILLET: PROC(COLOR,MSG);
   DCL COLOR CHAR(*);
   DCL MSG CHAR(*);
   DCL I FIXED BIN;

   IF INSIZE>=2
     THEN DO;
       I=#CMD('GDDM GSCOL '××COLOR,RHPTR,RHHDRPT);
       I=#CMD('GDDM GSMOVE '××CALCPRT(XIN(1))××' '××CALCPRT(YIN(1)),
         RHPTR,RHHDRPT);
       I=#CMD('GDDM GSPFLT '××CALCPRT(INSIZE)××' '××XNAME××' '××YNAME,
         RHPTR,RHHDRPT);
       END;
   END DISPLAY_FILLET;

 DISPLAY_MAIN: PROC(X,Y,DISPLAY_CURVE) RETURNS(FIXED BIN);
   DCL (X,Y) DEC FLOAT(6);
   DCL DISPLAY_CURVE ENTRY;
   DCL (CHOICE,I,TYPE) FIXED BIN;
   DCL MSG CHAR(70) INIT('PF1=MOVE PF2=ADD PF3=QUIT PF4=DELETE');

   CALL DISPLAY_CURVE(TURQUOISE,MSG);
   CALL DISPLAY_POINTS(YELLOW);
   I=#CMD('GDDM ASCPUT 1 70 '''××COMMAND××' '××MSG××'''',RHPTR,RHHDRPT);
   CALL DISPLAY_READ(CHOICE,X,Y);
   RETURN(CHOICE);
   END DISPLAY_MAIN;

 DISPLAY_POINTS: PROC(COLOR);
   DCL COLOR CHAR(*);
   DCL (I,J) FIXED BIN;

   I=#CMD('GDDM GSCOL '××COLOR,RHPTR,RHHDRPT);
   DO J=1 TO INSIZE;
     I=#CMD('GDDM GSMOVE '××CALCPRT(XIN(J)+.2)××' '××CALCPRT(YIN(J)),
       RHPTR,RHHDRPT);
     I=#CMD('GDDM GSAREA 1',RHPTR,RHHDRPT);
     I=#CMD('GDDM GSARC '××CALCPRT(XIN(J))××' '××CALCPRT(YIN(J))××
       ' 360',RHPTR,RHHDRPT);
     I=#CMD('GDDM GSENDA',RHPTR,RHHDRPT);
     END;
   END DISPLAY_POINTS;

 DISPLAY_READ: PROC(CHOICE,X,Y);
   DCL CHOICE FIXED BIN;
   DCL (X,Y) DEC FLOAT(6);

   CHOICE=0;
   I=#CMD('GDDM GSREAD 1 %TYPE %DEVID',RHPTR,RHHDRPT);
   TYPE=#SYMA(RHHDRPT,RH_SYMTREE,'TYPE');
   DO UNTIL(TYPE=0);
     SELECT(TYPE);
       WHEN(1) DO; /* IT IS CHOICE */
         I=#CMD('GDDM GSQCHO %CHOICE',RHPTR,RHHDRPT);
         CHOICE=#SYMA(RHHDRPT,RH_SYMTREE,'CHOICE');
         END;
       WHEN(2) DO; /* IT IS LOCATOR */
         I=#CMD('GDDM GSQLOC 1 %X %Y',RHPTR,RHHDRPT);
         X=#SYMA(RHHDRPT,RH_SYMTREE,'X');
         Y=#SYMA(RHHDRPT,RH_SYMTREE,'Y');
         END;
       END; /* SELECT */
     I=#CMD('GDDM GSREAD 0 %TYPE %DEVID',RHPTR,RHHDRPT);
     TYPE=#SYMA(RHHDRPT,RH_SYMTREE,'TYPE');
     END;
   END DISPLAY_READ;

 DISPLAY_SPLINE: PROC(COLOR,MSG);
   DCL COLOR CHAR(*);
   DCL MSG CHAR(*);
   DCL I FIXED BIN;

   I=SPLINE(XIN,YIN,INSIZE,XOUT,YOUT,OUTSIZE,K);
   SELECT(I);
     WHEN(0) IF DISPLAY=YES
       THEN DO; /* ALL OK */
         I=#CMD('GDDM GSCOL '××COLOR,RHPTR,RHHDRPT);
         I=#CMD('GDDM GSMOVE '××CALCPRT(XOUT(1))××' '××CALCPRT(YOUT(1)),
           RHPTR,RHHDRPT);
         I=#CMD('GDDM GSPLNE '××CALCPRT(OUTSIZE)××' '××XONAME××' '××
           YONAME,RHPTR,RHHDRPT);
         END;
     WHEN(3) MSG='HBOUND OF XOUT/YOUT M/B >= THAT OF XIN,YIN';
     WHEN(4) MSG='K MUST BE GREATER THAN 0';
     WHEN(5) MSG='AT LEAST FOUR PAIRS OF INPUT COORDINATES ARE NEEDED';
     WHEN(6) MSG='X(I-1)<X(I)<X(I+1) MUST BE TRUE FOR I=2 THRU N-1';
     OTHERWISE DO;
       MSGDATA='UNKNOWN CONDITION RETURNED FROM SPLINE='××I;
       SIGNAL CONDITION(ERR071);
       END;
     END; /* SELECT */
   END DISPLAY_SPLINE;

 DO_ADD: PROC(X,Y,J,DISPLAY_CURVE);
   DCL J FIXED BIN;
   DCL (X,Y) DEC FLOAT(6);
   DCL DISPLAY_CURVE ENTRY;
   DCL I FIXED BIN;

   IF INSIZE=MAXSIZE
     THEN DO;
       MSGDATA='MAXIMUM NUMBER OF POINTS HAS BEEN REACHED';
       SIGNAL CONDITION(ERR071);
       END;
   CALL GET_POINT(X,Y,DISPLAY_CURVE);
   INSIZE=INSIZE+1;
   DO I=INSIZE TO J+2 BY -1;
     XIN(I)=XIN(I-1);
     YIN(I)=YIN(I-1);
     END;
   XIN(J+1)=X;
   YIN(J+1)=Y;
   END DO_ADD;

 DO_DELETE: PROC(X,Y,J,DISPLAY_CURVE);
   DCL J FIXED BIN;
   DCL (X,Y) DEC FLOAT(6);
   DCL DISPLAY_CURVE ENTRY;
   DCL I FIXED BIN;
   DCL MSG CHAR(1);

   CALL DISPLAY_CURVE(BLACK,MSG);
   CALL DISPLAY_POINTS(BLACK);
   INSIZE=INSIZE-1;
   DO I=J TO INSIZE;
     XIN(I)=XIN(I+1);
     YIN(I)=YIN(I+1);
     END;
   XIN(INSIZE+1)=0.0;
   YIN(INSIZE+1)=0.0;
   END DO_DELETE;

 DO_MOVE: PROC(X,Y,J,DISPLAY_CURVE);
   DCL J FIXED BIN;
   DCL (X,Y) DEC FLOAT(6);
   DCL DISPLAY_CURVE ENTRY;
   DCL (NX,NY) DEC FLOAT(6);

   CALL GET_POINT(NX,NY,DISPLAY_CURVE);
   XIN(J)=NX;
   YIN(J)=NY;
   END DO_MOVE;

 FINDIX: PROC(X,Y) RETURNS(FIXED BIN);
   DCL (X,Y) DEC FLOAT(6);
   DCL (DISTANCE,DSAVE,IXSAVE) DEC FLOAT(6);

   DSAVE=99999999.9;
   DO I=1 TO INSIZE;
     DISTANCE=SQRT((XIN(I)-X)**2+(YIN(I)-Y)**2);
     IF DISTANCE<DSAVE
       THEN DO;
         IXSAVE=I;
         DSAVE=DISTANCE;
         END;
     END;
   RETURN(IXSAVE);
   END FINDIX;

 GET_ARRAY: PROC(PNAME,IP) RETURNS(PTR);
   DCL PNAME CHAR(*) VAR;
   DCL IP PTR;

   IF PNAME=''
     THEN IP=NULL;
     ELSE DO;
       CALL SETCAPS(PNAME);
       IP=#RHPLOC(PNAME,RHHDRPT);
       END;
   IF IP=NULL
     THEN DO;
       MSGDATA='ARRAY='××PNAME××' NOT FOUND';
       SIGNAL CONDITION(ERR071);
       END;
   IF IP->RH_APL=NULL
     THEN DO;
       MSGDATA='ARRAY='××PNAME××' IS NOT AN APL VARIABLE';
       SIGNAL CONDITION(ERR071);
       END;
   IF IP->RH_APL->RH_APL_TYPE^=1
     THEN DO;
       MSGDATA='ARRAY='××PNAME××' IS NOT FLOATING POINT';
       SIGNAL CONDITION(ERR071);
       END;
   IF IP->RH_APL->RH_APL_ELEN^=4
     THEN DO;
       MSGDATA='ARRAY='××PNAME××' MUST HAVE ELEMENT LENGTH=4';
       SIGNAL CONDITION(ERR071);
       END;
   IF IP->RH_APL->RH_APL_RANK^=1
     THEN DO;
       MSGDATA='ARRAY='××PNAME××' MUST HAVE RANK=1';
       SIGNAL CONDITION(ERR071);
       END;
   RETURN(PTROUT(PTRIN(ADDR(IP->NXTHDR->RECSTR))+2));
   END GET_ARRAY;

 GET_POINT: PROC(X,Y,DISPLAY_CURVE);
   DCL (X,Y) DEC FLOAT(6);
   DCL DISPLAY_CURVE ENTRY;
   DCL (CHOICE,I) FIXED BIN;
   DCL MSG CHAR(1);

   I=#CMD('GDDM ASCPUT 1 24 ''MOVE CURSOR TO NEW POINT''',
     RHPTR,RHHDRPT);
   CALL DISPLAY_READ(CHOICE,X,Y);
   CALL DISPLAY_CURVE(BLACK,MSG);
   CALL DISPLAY_POINTS(BLACK);
   END GET_POINT;

 LOWERCASE: PROC(PSTR) RETURNS(CHAR(8) VAR);
   DCL PSTR CHAR(*) VAR;

   RETURN(TRANSLATE(PSTR,
     'abcdefghijklmnopqrstuvwxyz',
     'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));
   END LOWERCASE;

   END ABE071;
