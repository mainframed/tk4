 /* COPYRIGHT 1988 BY THOMAS GLEN SMITH */
 /**********************************************************************
 * ABEAVL - BUILD AVL-BALANCED BINARY TREE                             *
 * THIS TEXT MAY BE INCLUDED WITHIN A SUBROUTINE TO BUILD AN           *
 * AVL-BALANCED BINARY TREE.  THE CODE SHOULD APPEAR AS FOLLOWS:       *
 *                                                                     *
 * SUBRTNE:  PROC(T,X);                                                *
 *  %INCLUDE STRUCTURE;                                                *
 *  %DCL RHBF CHAR; %RHBF='BFNAME';                                    *
 *  %DCL RHLCHILD CHAR; %RHLCHILD='LNAME';                             *
 *  %DCL RHRCHILD CHAR; %RHRCHILD='RNAME';                             *
 *  %DCL RHNNAME CHAR; %RHNNAME='NNAME';                               *
 *  %INCLUDE ABEAVL;                                                   *
 *  END SUBRTNE;                                                       *
 *                                                                     *
 * STRUCTURE SHOULD BE A STRUCTURE DECLARATION CONTAINING VARIABLES    *
 * NAMED BFNAME, LNAME, RNAME, AND NNAME.                              *
 *   BFNAME SHOULD BE FIXED BIN(15,0).                                 *
 *   LNAME AND RNAME SHOULD BE PTR.                                    *
 *   NNAME CAN BE ANY VARIABLE WHICH CAN BE USED IN AN EXPRESSION WITH *
 *     RELATIONAL OPERATORS, E.G. A->NNAME>B->NNAME.                   *
 * THE STRUCTURE CAN CONTAIN ANY OTHER ELEMENTS YOU WANT.              *
 *                                                                     *
 * WHEN SUBRTNE IS CALLED, T SHOULD BE A POINTER INITIALIZED TO NULL.  *
 * IT IS ASSUMED TO BE THE HEAD OF THE BINARY TREE.  X SHOULD BE A PTR *
 * TO A NEW ELEMENT TO BE ADDED TO THE TREE.                           *
 *                                                                     *
 * SEE ABESET FOR AN EXAMPLE OF USING ABEAVL.                          *
 **********************************************************************/
   DCL (T,X) PTR;

   DCL (F,A,B,C,CL,CR,P,Q) PTR;
   DCL D FIXED BIN;

   IF T=NULL
     THEN DO; /* SPECIAL CASE: EMPTY TREE */
       T=X;
       X->RHBF=0;
       X->RHLCHILD,X->RHRCHILD=NULL;
       RETURN;
       END;

   /* PHASE 1: LOCATE INSERTION POINT FOR X.  A KEEPS TRACK OF MOST
   RECENT NODE WITH BALANCE FACTOR +-1 AND F IS THE PARENT OF A.
   Q FOLLOWS P THROUGH THE TREE. */

   F,Q=NULL;
   A,P=T;
   DO WHILE(P^=NULL); /* SEARCH T FOR INSERTION POINT FOR X */
     IF P->RHBF^=0
       THEN DO;
         A=P;
         F=Q;
         END;
     SELECT;
       WHEN(X->RHNNAME<P->RHNNAME) DO; /* TAKE LEFT BRANCH */
         Q=P;
         P=P->RHLCHILD;
         END;
       WHEN(X->RHNNAME>P->RHNNAME) DO; /* TAKE RIGHT BRANCH */
         Q=P;
         P=P->RHRCHILD;
         END;
       OTHERWISE SIGNAL ERROR; /* X IS IN T */
       END; /* SELECT */
     END;

   /* PHASE 2: INSERT AND REBALANCE. X IS NOT IN T AND MAY BE INSERTED
   AS THE APPROPIATE CHILD OF Q. */

   Y=X;
   Y->RHLCHILD,Y->RHRCHILD=NULL;
   Y->RHBF=0;
   IF X->RHNNAME<Q->RHNNAME
     THEN Q->RHLCHILD=Y; /* INSERT AS LEFT CHILD */
     ELSE Q->RHRCHILD=Y; /* INSERT AS RIGHT CHILD */

   /* ADJUST BALANCE FACTORS OF NODES ON PATH FROM A TO Q.  NOTE THAT
   BY THE DEFINITION OF A, ALL NODES ON THIS PATH MUST HAVE BALANCE
   FACTORS OF 0 AND SO WILL CHANGE TO +-1.  D=+1 IMPLIES X IS
   INSERTED IN LEFT SUBTREE OF A. D=-1 IMPLIES X IS INSERTED IN
   RIGHT SUBTREE OF A. */

   IF X->RHNNAME>A->RHNNAME
     THEN DO;
       P=A->RHRCHILD;
       B=P;
       D=-1;
       END;
     ELSE DO;
       P=A->RHLCHILD;
       B=P;
       D=+1;
       END;
   DO WHILE(P^=Y);
     IF X->RHNNAME>P->RHNNAME
       THEN DO;
         P->RHBF=-1;
         P=P->RHRCHILD;
         END;
       ELSE DO;
         P->RHBF=+1;
         P=P->RHLCHILD;
         END;
     END;

   /* IS TREE UNBALANCED? */
   IF A->RHBF=0
     THEN DO; /* TREE STILL BALANCED */
       A->RHBF=D;
       RETURN;
       END;
   IF A->RHBF+D=0
     THEN DO; /* TREE IS BALANCED */
       A->RHBF=0;
       RETURN;
       END;
   /* TREE UNBALANCED, DETERMINE ROTATION TYPE */
   IF D=+1
     THEN SELECT; /* LEFT IMBALANCE */
       WHEN(B->RHBF=+1) DO; /* ROTATION TYPE LL */
         A->RHLCHILD=B->RHRCHILD;
         B->RHRCHILD=A;
         A->RHBF,B->RHBF=0;
         END;
       OTHERWISE DO; /* TYPE LR */
         C=B->RHRCHILD;
         IF C=NULL
           THEN CL,CR=NULL;
           ELSE DO;
             CL=C->RHLCHILD;
             CR=C->RHRCHILD;
             END;
         B->RHRCHILD=CL;
         A->RHLCHILD=CR;
         C->RHLCHILD=B;
         C->RHRCHILD=A;
         SELECT;
           WHEN(C->RHBF=+1) DO; /* LR(B) */
             A->RHBF=-1;
             B->RHBF=0;
             END;
           WHEN(C->RHBF=-1) DO; /* LR(C) */
             B->RHBF=+1;
             A->RHBF=0;
             END;
           OTHERWISE B->RHBF,A->RHBF=0;
           END; /* SELECT */
         C->RHBF=0;
         B=C;
         END;
       END; /* SELECT */
     ELSE SELECT; /* RIGHT IMBALANCE; SYMMETRIC TO LEFT IMBALANCE */
       WHEN(B->RHBF=-1) DO; /* ROTATION TYPE RR */
         A->RHRCHILD=B->RHLCHILD;
         B->RHLCHILD=A;
         A->RHBF,B->RHBF=0;
         END;
       OTHERWISE DO; /* TYPE RL */
         C=B->RHLCHILD;
         IF C=NULL
           THEN CL,CR=NULL;
           ELSE DO;
             CL=C->RHLCHILD;
             CR=C->RHRCHILD;
             END;
         B->RHLCHILD=CR;
         A->RHRCHILD=CL;
         C->RHRCHILD=B;
         C->RHLCHILD=A;
         SELECT;
           WHEN(C->RHBF=-1) DO; /* RR(B) */
             A->RHBF=+1;
             B->RHBF=0;
             END;
           WHEN(C->RHBF=+1) DO; /* RR(C) */
             B->RHBF=-1;
             A->RHBF=0;
             END;
           OTHERWISE B->RHBF,A->RHBF=0;
           END; /* SELECT */
         C->RHBF=0;
         B=C;
         END;
       END; /* SELECT */
   /* SUBTREE WITH ROOT B HAS BEEN REBALANCED AND IS THE NEW SUBTREE
   OF F.  THE ORIGINAL SUBTREE OF F HAD ROOT A */
   SELECT;
     WHEN(F=NULL) T=B;
     WHEN(A=F->RHLCHILD) F->RHLCHILD=B;
     WHEN(A=F->RHRCHILD) F->RHRCHILD=B;
     OTHERWISE;
     END;
