 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT032 - ARUN,RUNCONTI */
         % DCL @PROCNAME CHAR;
         % DCL @RENTNAME CHAR;
         % @PROCNAME = 'RENT';
         % @RENTNAME = 'DENT032';
         % INCLUDE DENTSUB;
         DCL 1 RUNDATA UNALIGNED BASED(RUNPTR),
             /* RUN STACK ELEMENT - EACH ELEMENT REPRESENTS
                A RUN CURRENTLY IN PROGRESS. */
           2 RUNPOP PTR,
             /* PTR TO NEXT RUN STACK ELEMENT */
           2 RUNPRE PTR,
             /* PTR TO PRIOR RUN STACK ELEMENT */
           2 RUNRHP PTR,
             /* PTR TO RECHDR FOR DATA SET TO WHICH ARUN IS DONE */
           2 RUNRHEL PTR,
             /* PTR TO RECHDR ASSOCIATED WITH THIS RUN */
           2 RUNCUR PTR,
             /* PTR TO CURRENT REC STRUCTURE */
           2 LABI FIXED BIN(31,0),
             /* INDEX TO THE HIGHEST ELEMENT USED IN RHAIDLBT */
           2 LABTAB(256),
            3 $KEY FIXED BIN(31,0),
            3 $LAB CHAR(8);
         DCL (SETCAPS,SYSDCBP) ENTRY;
         DCL I FIXED BIN(15,0);
         DCL SEQCNT FIXED BIN(15,0) STATIC INIT(8);
         DCL L FIXED BIN(15,0);
         DCL 1 BLSTR BASED(BLPTR),
           2 NBLPTR PTR,
           2 BLCMDLEN FIXED BIN(15,0),
           2 BLCMD CHAR(L REFER(BLCMDLEN)) VAR;
         DCL KEY FIXED BIN(31,0) UNALIGNED;
         DCL RUNNAME CHAR(8);
         DCL DDNAME CHAR(8) STATIC INIT('SYSRUN');
         DCL TRH PTR;
         DCL SYMKEY CHAR(8);
         DCL SYMVAL CHAR(256) VAR;
         DCL GBLSW BIT(1) STATIC INIT('0'B);
         IF CMDINDX=3
           THEN DO; /* IT IS RUNCONT */
             DO RUNPTR=RHRUNSTK REPEAT RUNPOP WHILE(RUNPTR^=NULL)
               UNTIL(RUNRHP=RHPTR);
               END;
             IF RUNPTR=NULL
               THEN DO;
                 MSGDATA='RUNCONT INVALID - NO CURRENT ARUN';
                 RHRC=8;
                 RETURN;
                 END;
             TRH = RUNRHEL;
             KEY = RUNCUR->RECSEQ;
             END;
           ELSE DO; /* IT IS ARUN */
             RHCTLSW = '1'B;
             DO IX = 3 TO 15;
               I = INDEX(PARY(IX),'(');
               IF I < 2 × I > 8
                 THEN DO; /* IT MUST BE POSITIONAL */
                   IK=IX-2; /* IK=POSITIONAL PARAMETER NUMBER */
                   IF IK<10
                     THEN PUT STRING(SYMKEY) EDIT('&P',IK)(A(2),P'9');
                     ELSE PUT STRING(SYMKEY) EDIT('&P',IK)(A(2),P'99');
                   SYMVAL=PARY(IX);
                   END;
                 ELSE DO;
                   SYMKEY = '&'××SUBSTR(PARY(IX),1,I-1);
                   CALL SETCAPS(SYMKEY);
                   SYMVAL = SUBSTR(PARY(IX),I+1,LENGTH(PARY(IX))-I-1);
                   END;
               CALL #SET(GBLSW,SYMKEY,SYMVAL); /* CALL SET@ */
               END;
             CALL SETCAPS(PARY(2));
             DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
               UNTIL(TRH->RHNAME=PARY(2));
               END;
             IF TRH^=NULL
               THEN I=#CMD('REN 1 1',TRH,SUBENT,RHHDRPT);
               ELSE DO;
                 RUNNAME=PARY(2);
                 IF RHRUNDCB=NULL
                   THEN CALL SYSDCBP(RHRUNDCB,DDNAME);
                 CALL SUBENT(32)(RHRUNDCB,RUNNAME,ALCEP,I,SEQCNT);
                   /* CALL DENTPIB */
                 IF I ^= 0
                   THEN DO;
                     IF I=4
                       THEN MSGDATA=RUNNAME××' NOT FOUND';
                       ELSE MSGDATA='SYSRUN FILE INVALID OR MISSING';
                     RHRC = 8;
                     RETURN;
                     END;
                 END;
             ALLOCATE RUNDATA;
             RUNPOP=RHRUNSTK;
             RHRUNSTK=RUNPTR;
             RUNPRE=NULL;
             IF RUNPOP^=NULL
               THEN RUNPOP->RUNPRE=RUNPTR;
             RUNRHP=RHPTR;
             RUNRHEL,RUNCUR = TRH;
             LABI = 0;
             KEY = 0;
             END;
         CALL SUBENT(33)(GET,SUBENT(29),SUBENT(30),DOCMD,
           SUBENT(24),SUBENT(28),STAK,KEY,LABI,LABTAB,RHCTLSW,
             SUBENT(7),RHHDRPT,SUBENT,RHPTR); /* CALL DENTPI */

         /* NOW DEQUEUE AND FREE CURRENT RUN STACK ELEMENT */
         IF RUNPRE=NULL
           THEN RHRUNSTK=RUNPOP;
           ELSE RUNPRE->RUNPOP=RUNPOP;
         IF RUNPOP^=NULL
           THEN RUNPOP->RUNPRE=RUNPRE;
         FREE RUNDATA;

         RHRC = 0;

 DOCMD: PROC(TEMP,HELPSTR);
         DCL (TEMP,HELPSTR) CHAR(*) VAR;
         L=7;
         ALLOCATE BLSTR;
         NBLPTR = BLHDR;
         BLHDR = BLPTR;
         BLCMD = 'RUNCONT';
         L=LENGTH(TEMP);
         ALLOCATE BLSTR;
         NBLPTR = BLHDR;
         BLHDR = BLPTR;
         BLCMD = TEMP;
         GO TO ENDRUN;
         END DOCMD;
 STAK: PROC(TEMP);
         DCL TEMP CHAR(*) VAR;
         DCL L FIXED BIN(15,0);
         DCL 1 BLSTR BASED(BLPTR),
           2 NBLPTR PTR,
           2 BLCMDLEN FIXED BIN(15,0),
           2 BLCMD CHAR(L REFER(BLCMDLEN)) VAR;
         L=LENGTH(TEMP);
         ALLOCATE BLSTR;
         NBLPTR = BLHDR;
         BLHDR = BLPTR;
         BLCMD = TEMP;
         END STAK;
 GET:  PROC(KEY,TXT);
         DCL KEY FIXED BIN(31,0) UNALIGNED;
         DCL TXT CHAR(*) VAR;
         IF KEY^=RUNCUR->RECSEQ
           THEN IF KEY < RUNCUR->RECSEQ
             THEN DO RUNCUR=RUNCUR->LSTPTR REPEAT RUNCUR->LSTPTR
               WHILE(RUNCUR^=RUNRHEL)
               UNTIL(RUNCUR->RECSEQ=KEY);
               END;
             ELSE DO RUNCUR=RUNCUR->NXTPTR REPEAT RUNCUR->NXTPTR
               WHILE(RUNCUR^=RUNRHEL)
               UNTIL(RUNCUR->RECSEQ=KEY);
               END;
         IF RUNCUR=RUNRHEL
           THEN TXT='';
           ELSE TXT=RUNCUR->RECSTR;
         END GET;
 ALCEP:  PROC(INREC);
         DCL INREC CHAR(256) VAR;
         DCL SAVPTR PTR;
         DCL 1 DCB BASED(RHRUNDCB),
              2 DCBPAD1 CHAR(36),
              2 DCBRECFM BIT(8),
              2 DCBPAD2 CHAR(11),
              2 DCBOFLG BIT(8),
              2 DCBPAD3 CHAR(33),
              2 DCBLRECL FIXED BIN(15,0);
         IF TRH=NULL
           THEN DO;
             PARY(*) = '';
             PARY(4) = 'SUBCALL';
             PARY(5) = 'SUPPORT';
             SAVPTR = RHPTR;
             CALL #DENT(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT);
               /* CALL DENTSI */
             L=5;
             ALLOCATE BLSTR;
             NBLPTR = BLHDR;
             BLHDR=BLPTR;
             BLCMD='END N';
             RHNAME = RUNNAME;
             FREE BUFSTR;
             L = DCBLRECL;
             ALLOCATE BUFSTR;
             TRH = RHPTR;
             RHPTR = SAVPTR;
             END;
         IF TRH->RECPTR=TRH
           THEN SEQ=1;
           ELSE SEQ=TRH->RECPTR->RECSEQ+1;
         TRH->BUFPTR->BUF = INREC;
         CALL #ADD(TRH,SUBENT,TRH->RECPTR,TRH->RECPTR,SEQ,
           TRH->BUFPTR->BUF,RHPPTR); /* CALL ADDREC */
         END ALCEP;
 ENDRUN:
         END;
