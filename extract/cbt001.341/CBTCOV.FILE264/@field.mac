 /* @FIELD */
 %NOPRINT;
         % DCL @FIELD ENTRY;
 % @FIELD:  PROC(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)
           STATEMENT RETURNS(CHAR);
 /*
0*$.HE GENERALIZED SUBROUTINES - @FIELD
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE FULL SCREEN SUPPORT FOR PLI UNDER TSO
0*$.PL 55
0*$.PN 0
0*$.SS
0*$.NF
0*$06/21/77
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  @FIELD
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS PLI PREPROCESSOR MACRO IS PART OF A PACKAGE TO PROVIDE 3277
0*$FULL SCREEN SUPPORT TO PLI PROGRAMS UNDER TSO.  SEE ALSO
0*$DOCUMENTATION ON THE @PANEL, @ENDPNL, @DOPNL, @FLDMOD, AND @SCREEN
0*$MACROS.
0*$.SP 1
0*$THE @FIELD MACRO IS USED TO DEFINE THE FIELDS OF A PANEL TO BE
0*$DISPLAYED ON THE 3270 SCREEN.  ONE @FIELD MACRO SHOULD FOLLOW
0*$THE ASSOCIATED @PANEL MACRO FOR EVERY FIELD IN THE PANEL.
0*$FORMAT FOR THE MACRO IS AS FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$@FIELD(NAME(NAME),POSITION(ROW,COLUMN),
0*$  LITERAL(LITERAL),LENGTH(LENGTH),
0*$  PICTURE(PICTURE),PREMOD,HIGH,NODISPLAY,
0*$  VERIFY,AUTODUP,NUMERIC,LOCASE);
0*$.FI L
0*$.IN 0
0*$.SP 1
0*$NAME(NAME)
0*$.IN 5
0*$THIS KEYWORD PARAMETER IS USED TO ASSIGN A NAME TO THE FIELD.
0*$THIS NAME CAN BE USED TO REFERENCE DATA PERTAINING TO THIS
0*$PARTICULAR FIELD.  FOR EXAMPLE, IF "SCREEN1" WERE THE PANEL NAME
0*$(SEE @PANEL MACRO), AND "NAME(FIELD1)" WERE SPECIFIED IN A
0*$SUBSEQUENT @FIELD MACRO, THEN THE STATEMENT "A=SCREEN1_IN.FIELD1;"
0*$WOULD ASSIGN TO VARIABLE "A" WHATEVER THE OPERATOR KEYED INTO THIS
0*$FIELD THE LAST TIME THE PANEL WAS DISPLAYED, AND THE STATEMENT
0*$"SCREEN1_OUT.FIELD1='XYZ';" WOULD CAUSE THE LITERAL 'XYZ' TO BE
0*$PRINTED IN THIS FIELD THE NEXT TIME THIS PANEL IS DISPLAYED ON THE
0*$SCREEN.
0*$.IN 0
0*$POSITION(ROW,COLUMN)
0*$.IN 5
0*$THIS PARAMETER IS USED TO SPECIFY THE STARTING LOCATION OF THE
0*$FIELD IN THE PANEL.  FOR EXAMPLE, "POSITION(1,1)" INDICATES THAT
0*$THE FIELD IS TO START IN THE FIRST POSITION IN THE UPPER LEFT HAND
0*$CORNER OF THE SCREEN.
0*$.IN 0
0*$LITERAL(LITERAL)
0*$.IN 5
0*$THIS PARAMETER IS OPTIONAL, AND MAY BE USED TO SPECIFY A LITERAL
0*$TO BE PRINTED IN THE FIELD WHEN THE PANEL IS DISPLAYED.
0*$"LITERAL(HOW NOW BROWN COW)" FOR EXAMPLE, WOULD CAUSE THE PHRASE
0*$"HOW NOW BROWN COW" TO BE PRINTED IN THE FIELD.  NOTE THAT A
0*$LITERAL CANNOT BE LONGER THAN THE INPUT LENGTH IMPLIED BY THE
0*$PICTURE CLAUSE.
0*$.IN 0
0*$LENGTH(LENGTH)
0*$.IN 5
0*$THIS PARAMETER IS OPTIONAL, AND IS USED ONLY IF A LITERAL KEYWORD
0*$WAS ALSO SPECIFIED ON THIS @FIELD MACRO.  IT INDICATES THAT THE
0*$FIELD LENGTH IS TO BE LONGER THAN THE LENGTH OF THE LITERAL.
0*$SPECIFYING "LITERAL(HI THERE),LENGTH(20)" INDICATES THAT THE LITERAL
0*$"HI THERE" IS TO BE DISPLAYED IN THIS FIELD, WHICH IS 20 BYTES LONG.
0*$IN THIS CASE, IF THE LENGTH KEYWORD HAD NOT BEEN SPECIFIED, THE
0*$FIELD WOULD HAVE BEEN DEFINED TO BE 8 BYTES LONG, WHICH IS THE
0*$LENGTH OF THE LITERAL.
0*$.IN 0
0*$PICTURE(PICTURE)
0*$.IN 5
0*$THIS PARAMETER SHOULD BE SPECIFIED ONLY IF YOU EXPECT THE OPERATOR
0*$TO KEY DATA IN THIS FIELD.  IF A PICTURE KEYWORD IS NOT SPECIFIED
0*$FOR A FIELD, THEN THE FIELD WILL BE PROTECTED (THAT IS, THE
0*$OPERATOR WILL NOT BE ABLE TO KEY DATA IN THIS FIELD).  VALID
0*$PICTURE CHARACTERS ARE "9", ".", "-", "X", "A", AND "H".
0*$THE CHARACTERS "9", ".", AND "-" ARE USED TO DEFINE A NUMERIC
0*$FIELD. THE SPECIFICATION "-999.99" FOR EXAMPLE, DEFINES A NUMERIC
0*$FIELD 7 POSITIONS LONG WHICH MAY CONTAIN A MINUS SIGN AND A
0*$DECIMAL POINT ON INPUT.  THE CHARACTER "X" DEFINES AN ALPHAMERIC
0*$FIELD IN WHICH ANY EBCDIC CHARACTER IS PERMITTED TO BE ENTERED.
0*$"A" DEFINES AN ALPHABETIC ONLY FIELD, AND "H" DEFINES A FIELD IN
0*$WHICH ONLY HEXADECIMAL DIGITS MAY BE ENTERED.  NOTE THAT A
0*$REPITITION SPECIFICATION MAY BE USED.  "PICTURE((23)X)" FOR
0*$EXAMPLE, DEFINES AN ALPHAMERIC FIELD 23 POSITIONS LONG.
0*$.IN 0
0*$PREMOD
0*$.IN 5
0*$THIS KEYWORD IS OPTIONAL, AND INDICATES THAT THE FIELD IS TO BE
0*$MARKED AS PREMODIFIED WHEN WRITTEN TO THE SCREEN.  THUS, ON A
0*$SUBSEQUENT READ, IT WILL APPEAR AS THOUGH THE OPERATOR HAD KEYED
0*$SOMETHING IN THIS FIELD REGARDLESS IF HE DID OR NOT.
0*$.IN 0
0*$HIGH
0*$.IN 5
0*$THIS KEYWORD, IF SPECIFIED, INDICATES THAT THE FIELD IS TO BE
0*$DISPLAYED IN HIGH INTENSITY.
0*$.IN 0
0*$NODISPLAY
0*$.IN 5
0*$THIS OPERAND IS APPLICABLE ONLY TO INPUT FIELDS, AND INDICATES THAT
0*$AS THE OPERATOR KEYS DATA IN THIS FIELD, PRINTING ON THE SCREEN IS
0*$TO BE SUPPRESSED.
0*$.IN 0
0*$VERIFY
0*$.IN 5
0*$FUNCTION FOR THIS KEYWORD HAS NOT BEEN CURRENTLY IMPLEMENTED.
0*$.IN 0
0*$AUTODUP
0*$.IN 5
0*$FUNCTION FOR THIS KEYWORD HAS NOT BEEN CURRENTLY IMPLEMENTED.
0*$.IN 0
0*$NOSKIP
0*$.IN 5
0*$THE NORMAL PROCEDURE WHEN THE OPERATOR KEYS TO THE END OF AN INPUT
0*$FIELD IS THAT THE CURSOR IS TO SKIP AUTOMATICALLY TO THE START OF
0*$THE NEXT INPUT FIELD.  SPECIFYING NOSKIP PREVENTS THIS.  INSTEAD,
0*$THE CURSOR REMAINS AT THE FIRST POSITION BEYOND THE FIELD, AND IF
0*$THE OPERATOR ATTEMPTS TO KEY DATA, THE INPUT INHIBITED LIGHT WILL
0*$GO ON.
0*$.IN 0
0*$LOCASE
0*$.IN 5
0*$THIS KEYWORD INDICATES THAT THE FIELD IS NOT TO BE TRANSLATED TO
0*$UPPER CASE, WHICH IS THE DEFAULT.
0*$.IN 0
 */
         DCL (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)
           CHAR;
         DCL KEYTAB CHAR;
         KEYTAB='NAME,POSITION,LITERAL,LENGTH,PICTURE,PREMOD,HIGH,'××
                'NODISPLAY,VERIFY,AUTODUP,NOSKIP,LOCASE';
         DCL INDX FIXED;
         DCL (I,J,K,L,LNTH,INLEN,M,N,ROW,COL,P,FLDSBAB) FIXED;
         DCL (PARM,TEXT,FLAGS,PMASK,FLDN,FLDSBA,PICTST,PICFLG) CHAR;
         DCL (LIT,PIC) CHAR;
         DCL (PICOFF,PICLEN,INOFF,LITLEN,FLDLEN) FIXED;
         FLAGS = '00000000'××'10000000';
         PMASK = '00000'××'00000'××'00000';
         LIT='';
         LNTH=0;
         @@FLDNUM = @@FLDNUM + 1;
         PICLEN = 0;
         INLEN = 0;
         DO I = 1 TO 15;
              IF I =  1 THEN PARM =  P1; ELSE
              IF I =  2 THEN PARM =  P2; ELSE
              IF I =  3 THEN PARM =  P3; ELSE
              IF I =  4 THEN PARM =  P4; ELSE
              IF I =  5 THEN PARM =  P5; ELSE
              IF I =  6 THEN PARM =  P6; ELSE
              IF I =  7 THEN PARM =  P7; ELSE
              IF I =  8 THEN PARM =  P8; ELSE
              IF I =  9 THEN PARM =  P9; ELSE
              IF I = 10 THEN PARM = P10; ELSE
              IF I = 11 THEN PARM = P11; ELSE
              IF I = 12 THEN PARM = P12; ELSE
              IF I = 13 THEN PARM = P13; ELSE
              IF I = 14 THEN PARM = P14; ELSE
              IF I = 15 THEN PARM = P15;
         IF PARM = ''
              THEN GO TO ENDLP;
         PARM = @STRIP(PARM);
         TEXT = @SPARS(PARM,KEYTAB,INDX);
         IF INDX = 0
              THEN RETURN(' FIELD MACRO - PARAMETER # '××I××
                ' IS IN ERROR');
         L = LENGTH(TEXT);
         PMASK = SUBSTR(PMASK,1,INDX-1)××'1'××
          SUBSTR(PMASK,INDX+1,15-INDX);
         IF INDX = 1 /* TEST FOR NAME KEYWORD */
              THEN FLDN = TEXT;
              ELSE
         IF INDX = 2 /* TEST FOR POSITION KEYWORD */
              THEN DO;
                   J = INDEX(TEXT,',');
                   IF J = 0
                        THEN DO;
                             COL = 1;
                             J = L+1;
                             END;
                        ELSE COL = SUBSTR(TEXT,J+1);
                   ROW = SUBSTR(TEXT,1,J-1);
                   FLDSBAB = (ROW-1)*@COLS+COL-1;
                   FLDSBA = @CONSBA(FLDSBAB);
                   END;
              ELSE
         IF INDX = 3 /* TEST FOR LITERAL */
              THEN LIT = TEXT;
              ELSE
         IF INDX = 4 /* TEST FOR LENGTH */
              THEN LNTH = TEXT;
              ELSE
         IF INDX = 5 /* TEST FOR PICTURE */
              THEN DO;
                   PIC = TEXT;
                   PICTST = SUBSTR(PIC,1,1);
                   INLEN = 0;
                   M = 1;
                   DO K = 1 TO L;
                        N = INDEX(SUBSTR(PIC,M),'(')+M-1;
                        IF N < M
                             THEN N = L+1;
                        INLEN=INLEN+N-M;
                        IF N > L
                             THEN K = L;
                             ELSE DO;
                                  M=INDEX(SUBSTR(PIC,N+1),')')+N+1;
                                  PICTST = SUBSTR(PIC,M,1);
                                  IF M = L
                                       THEN K = L;
                                  P = SUBSTR(PIC,N+1,M-N-2);
                                  INLEN = INLEN + P;
                                  END;
                        END;
                   IF PICTST = 'X'
                        THEN PICFLG = '00';/* ALPHAMERIC (ANY CHAR) */
                        ELSE IF PICTST = '.' × PICTST = '9'
                             THEN PICFLG = '01'; /* NUMERIC */
                             ELSE IF PICTST = 'A'
                                  THEN PICFLG = '10';/*ALPHABETIC*/
                                  ELSE PICFLG = '11';/* HEXADECIMAL */
                   FLAGS=SUBSTR(FLAGS,1,9)××PICFLG××SUBSTR(FLAGS,12,5);
                   END;
              ELSE
         IF INDX = 6 /* TEST FOR PREMOD */
              THEN FLAGS=SUBSTR(FLAGS,1,7)××'1'××SUBSTR(FLAGS,9,8);
              ELSE
         IF INDX = 7 /* TEST FOR HIGH INTENSITY */
              THEN FLAGS=SUBSTR(FLAGS,1,4)××'10'××SUBSTR(FLAGS,7,10);
              ELSE
         IF INDX = 8 /* TEST FOR NODISPLAY */
              THEN FLAGS=SUBSTR(FLAGS,1,4)××'11'××SUBSTR(FLAGS,7,10);
              ELSE
         IF INDX = 9 /* TEST FOR VERIFY */
              THEN FLAGS='1'××SUBSTR(FLAGS,2,15);
              ELSE
         IF INDX = 10 /* TEST FOR AUTODUP */
              THEN FLAGS=SUBSTR(FLAGS,1,1)××'1'××SUBSTR(FLAGS,3,14);
              ELSE
         IF INDX = 11 /* TEST FOR NOSKIP */
              THEN FLAGS=SUBSTR(FLAGS,1,6)××'1'××SUBSTR(FLAGS,8,9);
              ELSE
         IF INDX = 12 /* TEST FOR LOCASE */
              THEN FLAGS=SUBSTR(FLAGS,1,8)××'0'××SUBSTR(FLAGS,10,7);
              END;
 ENDLP:
         IF SUBSTR(PMASK,1,1)='0' /* TEST FOR NO NAME KEYWORD */
              THEN FLDN = @NULL;
         IF SUBSTR(PMASK,2,1)='0' /* TEST FOR NO POSITION KEYWORD */
              THEN RETURN('ERROR IN FIELD MACRO, NO POSITION KEYWORD');
         LITLEN = LENGTH(LIT);
         PICOFF = 36 + LNTH;
         IF SUBSTR(PMASK,5,1)='0' /* TEST FOR NO PICTURE KEYWORD */
              THEN DO;
                   FLAGS=SUBSTR(FLAGS,1,2)××'11'××SUBSTR(FLAGS,5,12);
                   PIC = '';
                   END;
         PICLEN = LENGTH(PIC);
         IF SUBSTR(PMASK,4,1)='0' /*TEST FOR NO LENGTH KEYWORD*/
              THEN IF SUBSTR(PMASK,3,1)='1' /*TEST FOR LITERAL KEY*/
                   THEN LNTH = LITLEN;
                   ELSE LNTH = INLEN;
         IF LNTH < LITLEN
              THEN LNTH = LITLEN;
         IF LNTH < INLEN
              THEN LNTH = INLEN;
         IF SUBSTR(FLAGS,3,1)='0'
              THEN INOFF = @@INOFF;
              ELSE INOFF = 0;
         FLDLEN=38+LITLEN+PICLEN;
         @@PNLLEN=@@PNLLEN+FLDLEN;
         IF INLEN ^= 0
              THEN DO;
                   @@INCNT=@@INCNT+1;
                   @@INDYN=@@INDYN××', 4 '××FLDN××'LEN FIXED BIN(15,0)'
                    ××' INIT('××@NUMSTR(INLEN)××')'××
                    ', 4 '××FLDN××' CHAR('××@NUMSTR(INLEN)××
                    ') VARYING';
                   @@INOFF=@@INOFF+4+INLEN;
                   END;
         @@PNLSTR=@@PNLSTR××', 4 '××FLDN××', 5 @FLDLEN FIXED BIN(15,0)'
           ××' INIT('××@NUMSTR(FLDLEN)××'), 5 @FLDNAME CHAR(8) '××
           'INIT('''××FLDN××'''), 5 @FLDNUM FIXED BIN(15,0) INIT('××
 @NUMSTR(@@FLDNUM)××'), 5 @FLDINUM FIXED BIN(15,0) INIT('××
 @NUMSTR(@@INCNT)××
 '), 5 @INLEN FIXED BIN(15,0) INIT('××@NUMSTR(INLEN)××'), 5 '
 ××' @INOFF FIXED BIN(31,0) INIT('××@NUMSTR(INOFF)××'), 5 @OUTOFF '××
 'FIXED BIN(31,0) INIT('××@NUMSTR(@@OUTOFF)××'), '××
 '5 @PICOFF FIXED BIN(31,0) INIT('××@NUMSTR(PICOFF)××'), 5 '××
           ' @FLAGS BIT(16) INIT('''××FLAGS××'''B), '××
           '5 @FLDSBA BIT(16) INIT('××FLDSBA××
           '), 5 @FLDSBAB FIXED BIN(15,0) INIT('××@NUMSTR(FLDSBAB)××
           '), 5 @LITLEN FIXED BIN(15,0) '××
           'INIT('××@NUMSTR(LITLEN)××'), 5 ';
         IF LITLEN ^= 0
              THEN @@PNLSTR=@@PNLSTR××'@LITERAL CHAR('××
                @NUMSTR(LITLEN)××
                ') INIT('''××LIT××'''), 5 ';
         @@PNLSTR=@@PNLSTR××'@PICLEN FIXED BIN(15,0) INIT('××
           @NUMSTR(PICLEN)××')';
         IF PICLEN ^= 0
              THEN @@PNLSTR=@@PNLSTR××', 5 @PICTURE CHAR('
                   ××@NUMSTR(PICLEN)××') INIT('''××PIC××''')';
         @@OUTDYN=@@OUTDYN××', 4 '××FLDN××'LEN FIXED BIN(15,0) INIT('××
 @NUMSTR(LNTH)××'), 4 '××FLDN××' CHAR('××@NUMSTR(LNTH)××') '××
           'VARYING INIT('''××LIT××''')';
         @@OUTOFF=@@OUTOFF+4+LNTH;
         RETURN('');
         % END @FIELD;
 %PRINT;
