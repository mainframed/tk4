 /*PLOTA*/
 PLOTA:  PROC(INDDN,DOCMD,DOPRM,HARDSW);
         DCL INDDN CHAR(8);
         DCL (DOCMD,DOPRM) ENTRY;
         DCL HARDSW BIT(1);
         DCL (IN1,IN2,IN3,IN4) FILE RECORD INPUT;
         DCL INVAR(4) FILE;
         INVAR(1) = IN1;
         INVAR(2) = IN2;
         INVAR(3) = IN3;
         INVAR(4) = IN4;
         DCL NULL BUILTIN;
         DCL MONTAB(12) CHAR(3) STATIC INIT(
           'JAN','FEB','MAR','APR','MAY','JUN',
           'JUL','AUG','SEP','OCT','NOV','DEC');
         DCL DAFILE RECORD UPDATE KEYED
           ENV(F RECSIZE(181) REGIONAL(1));
         DCL DASW BIT(1) STATIC INIT('0'B);
         DCL DAREC CHAR(181);
         DCL SETCAPS ENTRY;
         DCL LSQR ENTRY;
         DCL SUFFIX ENTRY RETURNS(FIXED BIN(15,0));
         DCL CRTIO ENTRY RETURNS(CHAR(79) VAR);
         DCL CRTZAP ENTRY;
         DCL PLOTB ENTRY RETURNS(FIXED BIN(15,0));
         DCL P2PTR PTR;
         P2PTR = NULL;
         DCL 1 P2 UNALIGNED BASED(P2PTR),
              2 ARRAY(0:23) FIXED BIN(31,0),
              2 INDX FIXED BIN(15,0),
              2 DTE FIXED DEC(5,0),
              2 HDR CHAR(78) VAR;
         DCL AST CHAR(100) STATIC INIT((100)'*');
         DCL (I,J,K,D,TOT) FIXED BIN(31,0);
         DCL SUBENT(11) ENTRY;
         SUBENT(1) = READIN;  /* READS FILE */
         SUBENT(2) = PRNTARY; /* FORMATS DBREC FOR DISPLAY */
         SUBENT(3) = DOCMD; /* ISSUES TSO COMMAND */
         SUBENT(4) = DOPRM; /* PROMPTS FOR TERMINAL INPUT */
         IF HARDSW
              THEN DO;
                   SUBENT(5) = HARDCPY;
                   SUBENT(6) = CRTNOP;
                   END;
              ELSE DO;
                   SUBENT(5) = CRTIO; /* FULL SCREEN WRITE/READ */
                   SUBENT(6) = CRTZAP; /* CLEAR SCREEN */
                   END;
         SUBENT(7) = READDA;
         SUBENT(8) = SPARS; /* SIMPLIFIED PARSING ROUTINE */
         SUBENT(9) = LSQR; /* SIMPLE LINEAR REGRESSION */
         SUBENT(10) = SETNXT;
         SUBENT(11) = WRITEDA;
         DCL (NXTSUB,CMDDATA) CHAR(79) VAR;
         DCL ENDCK CHAR(3);
         DCL DISPLAY(24) CHAR(79) INIT((24)(1)' ');
         DCL ERRCNT FIXED BIN(15,0) INIT(0);
         ON ERROR BEGIN;
              ERRCNT = ERRCNT + 1;
              IF ERRCNT < 10
                   THEN DO;
                        DISPLAY(2) = 'ERROR CONDITION INTERCEPTED';
                        GO TO NXT;
                        END;
              END;
 NXT:
         IF HARDSW
              THEN CMDDATA = HARDCPY(DISPLAY);
              ELSE CMDDATA = CRTIO(DISPLAY);
         ERRCNT = 0;
         DISPLAY(*)='';
         ENDCK = CMDDATA;
         IF CMDDATA ^= ''
           THEN IF ENDCK = 'END'
              THEN DO;
                   IF ^HARDSW
                        THEN CALL CRTZAP;
                   IF DASW
                        THEN CLOSE FILE(DAFILE);
                   RETURN;
                   END;
              ELSE DO;
                   NXTSUB = '';
                   I = 0;
                   DO UNTIL(NXTSUB = '' × I > 0);
                        NXTSUB = '';
                        I = PLOTB(CMDDATA,DISPLAY,SUBENT);
                        CMDDATA = NXTSUB;
                        END;
                   IF I = 4
                    THEN DISPLAY(2) = 'INVALID OPERAND';
                    ELSE IF I = 8
                     THEN DISPLAY(2) = 'COMMAND NOT FOUND';
                     ELSE IF I = 16
                       THEN DISPLAY(2) = 'ERROR INTERCEPTED';
                   END;
         GO TO NXT;
 PRNTARY:  PROC(PRMPTR);
         DCL PRMPTR PTR;
         P2PTR = PRMPTR;
         J = 0;
         DO I = 0 TO 23;
              IF ARRAY(I) > J
                   THEN J = ARRAY(I);
              END;
         K = J;
         J = J/64;
         IF K > J*64
              THEN J = J+1;
         IF J = 0
              THEN J = 1;
         DO I = 0 TO 23;
          IF ARRAY(I) >= 0
              THEN PUT STRING(DISPLAY(I+1)) EDIT(I,SUBSTR(AST,1,
                ARRAY(I)/J),ARRAY(I))(P'Z9',X(1),A,P'ZZZ,ZZZ,ZZZ');
              ELSE PUT STRING(DISPLAY(I+1)) EDIT(I,'INVALID DATA')
                (P'Z9',X(1),A);
          END;
         I = 78-LENGTH(HDR);
         J = SUFFIX(DISPLAY(2),' ')+1;
         IF I < J
              THEN I = J;
         IF I = 0
              THEN I = 1;
         SUBSTR(DISPLAY(2),I)=HDR;
         PUT STRING(SUBSTR(DISPLAY(3),68))
           EDIT('DTE=',DTE)(A,P'99999');
         END PRNTARY;
 HARDCPY:  PROC(DISPLAY) RETURNS(CHAR(79) VAR);
         DCL DISPLAY(24) CHAR(79);
         DCL SYSIN FILE RECORD INPUT
           ENV(F RECSIZE(80) BLKSIZE(80));
         DCL I FIXED;
         DCL INREC CHAR(80);
         DCL INITSW BIT(1) STATIC INIT('1'B);
         IF INITSW
              THEN INITSW = '0'B;
              ELSE DO;
                   DO I = 1 TO 24;
                     PUT EDIT(SUBSTR(DISPLAY(I),1,
                     SUFFIX(DISPLAY(I),' ')))(A) SKIP(2);
                     END;
                   END;
         ON ENDFILE(SYSIN) BEGIN;
              INREC = 'END';
              GO TO ENDH;
              END;
         READ FILE(SYSIN) INTO(INREC);
         CALL SETCAPS(INREC);
 ENDH:
         PUT EDIT(INREC)(A) PAGE;
         RETURN(INREC);
         END HARDCPY;
 READIN:  PROC(OPCODE,FILINDX,MYPTR);
         DCL OPCODE CHAR(*) VAR;
              /* MAY BE EITHER 'INIT', 'NXT', OR 'EOF' */
         DCL FILINDX FIXED BIN(15,0);
         DCL MYPTR PTR;
         ON ENDFILE(INVAR(FILINDX)) GO TO EOF;
         SELECT(OPCODE);
           WHEN('INIT')
              DO;
              CLOSE FILE(INVAR(FILINDX));
              OPEN FILE(INVAR(FILINDX)) TITLE(INDDN);
              READ FILE(INVAR(FILINDX)) SET(MYPTR);
              GO TO ENDREAD;
              END;
           WHEN('NXT')
              DO;
              READ FILE(INVAR(FILINDX)) SET(MYPTR);
              GO TO ENDREAD;
              END;
           OTHERWISE;
           END;
 EOF:
         CLOSE FILE(INVAR(FILINDX));
         MYPTR=(NULL);
 ENDREAD:
         END READIN;
 CRTNOP:  PROC;
         END CRTNOP;
 READDA:  PROC(PINDX,MYPTR);
         DCL PINDX FIXED BIN(15,0);
         DCL MYPTR PTR;
         IF ^DASW
              THEN DO;
                   DASW = '1'B;
                   OPEN FILE(DAFILE) DIRECT TITLE(INDDN);
                   END;
         ON KEY(DAFILE) BEGIN;
              MYPTR = NULL;
              GO TO ENDDA;
              END;
         READ FILE(DAFILE) INTO(DAREC) KEY(PINDX);
         MYPTR = ADDR(DAREC);
 ENDDA:
         RETURN;
         END READDA;
 WRITEDA:  PROC(PINDX,MYPTR);
         DCL PINDX FIXED BIN(15,0);
         DCL MYPTR PTR;
         DCL DAREC CHAR(181) BASED(MYPTR);
         IF ^DASW
              THEN DO;
                   DASW = '1'B;
                   OPEN FILE(DAFILE) DIRECT TITLE(INDDN);
                   END;
         WRITE FILE(DAFILE) FROM(DAREC) KEYFROM(PINDX);
         END WRITEDA;
 SPARS:  PROC(OPERBUF,KEYTAB,KEYVAL,KEYINDX);
         DCL (OPERBUF,KEYVAL) CHAR(*) VAR;
         DCL KEYTAB(*) CHAR(20) VAR;
         DCL (I,J,K,L,M) FIXED;
         DCL KEYINDX FIXED BIN(15,0);
         KEYVAL = '';
         KEYINDX = 0;
         L = LENGTH(OPERBUF);
         IF L = 0
              THEN RETURN;
         K = DIM(KEYTAB,1);
         J = INDEX(OPERBUF,'(');
         IF J = 0
              THEN J = L + 1;
         J = J - 1;
 LUP:    DO I = 1 TO K;
              M = LENGTH(KEYTAB(I));
              IF M >= J
                   THEN DO;
                        IF SUBSTR(KEYTAB(I),1,J)=SUBSTR(OPERBUF,1,J)
                        THEN LEAVE LUP;
                        END;
              END;
         IF I > K
              THEN RETURN;
         IF J < L
              THEN KEYVAL = SUBSTR(OPERBUF,J+2,L-J-2);
         KEYINDX = I;
         END SPARS;
 /* SETNXT CAN BE CALLED TO SET THE NEXT COMMAND TO BE EXECUTED */
 SETNXT:  PROC(PARM);
         DCL PARM CHAR(79) VAR;
         NXTSUB = PARM;
         END SETNXT;
 EOJ:
         CALL CRTZAP;
         END PLOTA;
