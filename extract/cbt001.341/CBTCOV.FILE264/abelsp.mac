  /*ABELSP - COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE NEXT STRING TO BE PROCESSED BY AN ABE          *
 * SUBCOMMAND.  THE 2D PARAMETER SHOULD BE THE POINTER PASSED TO THE   *
 * SUBCOMMAND WITH THE NAME LRNPTR.  ABELSP WILL RETURN A POINTER TO   *
 * THE NEXT STRING TO BE PROCESSED.                                    *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABELSP) PARMS(RHHDRPT,LRNPTR) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABEREC;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   DCL (RETPTR,DELPTR) PTR;

   DELPTR=NULL;
   IF ^LRNSTRT
     THEN CALL STRT; /* STARTUP TIME - WILL POSITION FILE */
     ELSE DO;
       CALL PUTNXT; /* PUT LAST SEGMENT PROCESSED BACK IN RECORD */
       IF ^LRN_EOF
         THEN CALL SETNXT; /* GET SET TO PROCESS NEXT SEGMENT */
         ELSE CALL DELCK; /* CHECK FOR DELETE OF CURRENT RECORD */
       END;
   IF LRN_EOF
     THEN RETPTR=NULL; /* USER REQUESTED END OF PROCESSING */
     ELSE RETPTR=GETNXT; /* FILL BUFFER WITH NEXT */
   IF DELPTR^=NULL
     THEN CALL #PUTSLOT(LRN_RHP,RHHDRPT,DELPTR);
   IF RETPTR=NULL
     THEN CALL STOP; /* STOP TIME */
   RETURN;

 DELCK: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET DELPTR IF THE CURRENT RECORD IS TO BE DELETED.        *
 *                                                                     *
 **********************************************************************/
   IF LRN_RHP->RECPTR^=LRN_RHP
     THEN IF SUBSTR(LRN_RHP->RECPTR->RECFLGS,5,1)
       THEN DO;
         DELPTR=LRN_RHP->RECPTR;
         IF LRN_ORGPTR=DELPTR
           THEN LRN_ORGPTR=DELPTR->LSTPTR;
         END;
   END DELCK;

 GETNXT: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE APPROPRIATE RECORD HAS BEEN LOCATED, AND LRN_CURCOL *
 * CONTAINS THE COLUMN NUMBER TO BE PROCESSED NEXT.  GETNXT WILL FILL  *
 * THE BUFFER WITH THE DATA TO BE PROCESSED.                           *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L) FIXED BIN(31,0);
   /* TEST TO SEE IF STILL IN RANGE */
   IF LRN_RHP->RECPTR=LRN_RHP
     THEN RETURN(NULL);
   IF RH_L1<=RH_L2
     THEN DO;
       I=RH_L1;
       J=RH_L2;
       END;
     ELSE DO;
       I=RH_L2;
       J=RH_L1;
       END;
   IF ^(LRN_RHP->RECPTR->RECSEQ>=I & LRN_RHP->RECPTR->RECSEQ<=J)
     THEN RETURN(NULL); /* OUT OF RANGE */

   /* NOW SET UP CURRENT BUFFER */
   I=RH_OFF+(LRN_CURCOL-1)*RH_LEN; /* CURRENT OFFSET */
   L=LENGTH(LRN_RHP->RECPTR->RECSTR); /* L=LENGTH(CURRENT RECORD) */
   IF I>L
     THEN LSPBUF='';
     ELSE IF (I+RH_LEN-1)>L
       THEN LSPBUF=SUBSTR(LRN_RHP->RECPTR->RECSTR,I);
       ELSE LSPBUF=SUBSTR(LRN_RHP->RECPTR->RECSTR,I,RH_LEN);
   RETURN(LRN_BUFP);
   END GETNXT;

 PUTNXT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO STORE THE CONTENTS OF THE PROCESSING BUFFER IN THE        *
 * APPROPRIATE LOCATION IN THE CURRENT RECORD, AND TO PREPARE FOR      *
 * LOADING THE BUFFER WITH THE NEXT CHUNK OF DATA TO BE PROCESSED.     *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L) FIXED BIN(31,0);
   I=RH_OFF+(LRN_CURCOL-1)*RH_LEN; /* CURRENT OFFSET */
   IF I<=LRN_RHP->RECPTR->RECLEN
     THEN DO; /* THERE IS ROOM IN RECORD FOR THIS COLUMN */
       L=LENGTH(LRN_RHP->RECPTR->RECSTR); /* L=LENGTH(CURRENT RECORD) */
       J=I+LSPLN; /* OFFSET TO DATA FOLLOWING CURRENT COLUMN */
       IF ^(I=1 & J>L)
         THEN DO;
           K=LENGTH(LSPBUF);
           IF K<LSPLN
             THEN LSPBUF=LSPBUF××REPEAT(' ',LSPLN-K-1);
           IF L<(I-1)
             THEN LRN_RHP->RECPTR->RECSTR=LRN_RHP->RECPTR->RECSTR××
               REPEAT(' ',I-L-2);
           END;
       SELECT;
         WHEN(L=I-1)
           LRN_RHP->RECPTR->RECSTR=LRN_RHP->RECPTR->RECSTR××LSPBUF;
         WHEN(I=1)
           IF J>L
             THEN LRN_RHP->RECPTR->RECSTR=LSPBUF;
             ELSE LRN_RHP->RECPTR->RECSTR=LSPBUF××
               SUBSTR(LRN_RHP->RECPTR->RECSTR,J);
         OTHERWISE
           IF J>L
             THEN LRN_RHP->RECPTR->RECSTR=
               SUBSTR(LRN_RHP->RECPTR->RECSTR,1,I-1)××LSPBUF;
             ELSE LRN_RHP->RECPTR->RECSTR=
               SUBSTR(LRN_RHP->RECPTR->RECSTR,1,I-1)××LSPBUF××
               SUBSTR(LRN_RHP->RECPTR->RECSTR,J);
         END; /* SELECT */
       END;
   END PUTNXT;

 SETNXT: PROC;
 /**********************************************************************
 *                                                                     *
 * SETNXT GETS SET TO PROCESS THE NEXT COLUMN.                         *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;
   IF RH_L1<=RH_L2
     THEN DO; /* PROCESSING FRONT TO BACK */
       LRN_CURCOL=LRN_CURCOL+1;
       IF LRN_CURCOL>RH_NCOLS
         THEN DO;
           CALL DELCK; /* GO CHECK FOR DELETE */
           LRN_CURCOL=1;
           DO I=RH_INCR TO 1 BY -1;
             IF LRN_RHP->RECPTR=LRN_RHP
               THEN LEAVE;
             LRN_RHP->RECPTR=#SUCC(RHHDRPT,LRN_RHP,LRN_RHP->RECPTR);
             END;
           IF LRN_RHP->RECPTR=LRN_RHP
             THEN LRN_RHP->CURSEQ=0;
             ELSE LRN_RHP->CURSEQ=LRN_RHP->RECPTR->RECSEQ;
           END;
       END;
     ELSE DO; /* PROCESSING BACK TO FRONT */
       LRN_CURCOL=LRN_CURCOL-1;
       IF LRN_CURCOL<1
         THEN DO;
           CALL DELCK; /* GO CHECK FOR DELETE */
           LRN_CURCOL=RH_NCOLS;
           DO I=RH_INCR TO 1 BY -1;
             LRN_RHP->RECPTR=#PRED(RHHDRPT,LRN_RHP,LRN_RHP->RECPTR);
             END;
           IF LRN_RHP->RECPTR=LRN_RHP
             THEN LRN_RHP->CURSEQ=0;
             ELSE LRN_RHP->CURSEQ=LRN_RHP->RECPTR->RECSEQ;
           END;
       END;
   END SETNXT;

 STOP: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED AT STOP TIME.                                                *
 *                                                                     *
 **********************************************************************/
   IF ^LRNSTRT
     THEN LRN_EOF='0'B; /* WE NEVER GOT STARTED */
     ELSE DO;
       IF ^LRN_EOF
         THEN DO; /* REPOSITION ONLY IF SUBCOMMAND ALLOWS IT */
           IF LRN_ORGPTR=LRN_RHP
             THEN CALL #MD(LRN_RHP,RHHDRPT,0);
             ELSE CALL #NC(LRN_RHP,LRN_ORGPTR);
           END;
       LRNSTRT,LRN_EOF='0'B;
       FREE LSPBUFSTR; /* FREE BUFFER */
       LRN_BUFP=NULL;
       END;
   END STOP;

 STRT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED AT INITIAL INVOCATION OF ABELSP.                             *
 *                                                                     *
 **********************************************************************/
   LRNSTRT='1'B;
   LRN_BUFP=NULL;
   IF LRN_RHP=NULL
     THEN RETURN; /* ? */
   L=MIN(RH_LEN,LRN_RHP->BUFPTR->BUFLN); /* LENGTH TO ALLOC */
   ALLOCATE LSPBUFSTR; /* ALLOCATE BUFFER */
   IF RH_L1<=RH_L2
     THEN LRN_CURCOL=1; /* SET CURRENT COLUMN */
     ELSE LRN_CURCOL=RH_NCOLS; /* SET CURRENT COLUMN */

   /* NOW POSITION TO FIRST RECORD IN RANGE */
   LRN_ORGPTR=LRN_RHP->RECPTR; /* SAVE CURRENT RECORD PTR */
   CALL #MD(LRN_RHP,RHHDRPT,RH_L1);
   END STRT;

   END ABELSP;
