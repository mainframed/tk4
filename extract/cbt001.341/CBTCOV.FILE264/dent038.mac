*PROCESS CS(60),MACRO;
 /* DENT038 - DELDUP L1 L2 C1:C2 C3:C4 ... */
 /* DELETE DUPLICATE LINES FROM DATASET    */
 /* WRITTEN 12/18/81 BY PAUL DIXON         */
 %DCL @PROCNAME CHAR;
 %DCL @RENTNAME CHAR;
 %@PROCNAME = 'RENT';
 %@RENTNAME = 'DENT038';
 %INCLUDE @NUMERIC,DENTSUB;

 DCL (ALCPTR,SAVPTR,DELPTR) PTR;
 DCL (DELDUP_COL(4:16,2),I,J,L,MAX_COL) FIXED BINARY(15);
 DCL (BINARY,INDEX,LENGTH,REPEAT,STORAGE,SUBSTR,VERIFY) BUILTIN;
 DCL FIRST_TIME BIT INIT('1'B);
 DCL (LINE_1,LINE_2,CURRENT_LINE#) FIXED BINARY(31);

 DELDUP_ERR: PROCEDURE(DELDUP_PARM,DELDUP_1,DELDUP_2)
             RETURNS(BIT) REORDER;
 DCL DELDUP_PARM CHAR(*) VARYING;
 DCL (DELDUP_1,DELDUP_2) BIT;
 DCL (BINARY,LENGTH,SUBSTR,VERIFY) BUILTIN;
 DCL DELDUP_PLUS ALIGNED BIT;
 DCL DELDUP_VALUE FIXED BINARY(15);
 DELDUP_PLUS = (^DELDUP_1) & DELDUP_2 & (SUBSTR(DELDUP_PARM,1,1)='+');
 IF DELDUP_PLUS THEN DELDUP_PARM = SUBSTR(DELDUP_PARM,2);
 IF ^@NUMERIC(DELDUP_PARM,,5,,) THEN RETURN ('1'B);
 DELDUP_VALUE = BINARY(DELDUP_PARM);
 IF DELDUP_VALUE <= 0 × DELDUP_VALUE > MAX_COL THEN RETURN('1'B);
 IF DELDUP_PLUS THEN DELDUP_VALUE = DELDUP_VALUE + DELDUP_COL(L,1) - 1;
 IF DELDUP_1 THEN DELDUP_COL(L,1) = DELDUP_VALUE;
 IF DELDUP_2 THEN DELDUP_COL(L,2) = DELDUP_VALUE;
 RETURN('0'B);
 END DELDUP_ERR;

 IF HDPTR->LSTHDR = HDPTR THEN
    DO;
       MSGDATA = 'DELDUP: NO LINES IN DATASET';
       RHRC = 0;
       RETURN;
    END;
 RHRC = 8  /* ASSUME THERE MAY BE AN ERROR */;
 IF ^@NUMERIC(PARY(2),1,8,,) THEN
    DO;
       MSGDATA = 'DELDUP: FIRST LINE NUMBER INVALID:' ×× PARY(2);
       RETURN;
    END;
 IF ^@NUMERIC(PARY(3),1,8,,) THEN
    DO;
       MSGDATA = 'DELDUP: SECOND LINE NUMBER INVALID:' ×× PARY(3);
       RETURN;
    END;
 LINE_1 = BINARY(PARY(2));
 LINE_2 = BINARY(PARY(3));
 MAX_COL = HDPTR->NXTHDR->RECLEN /* LENGTH OF LINES IN DATASET */;
 DO L = 4 TO 16 WHILE(LENGTH(PARY(L)) ^= 0);
    MSGDATA = 'DELDUP: INVALID COLUMN VALUE: ' ×× PARY(L);
    J = INDEX(PARY(L),':');
    SELECT (J);
       WHEN (1) IF DELDUP_ERR(SUBSTR(PARY(L),2),'1'B,'1'B) THEN RETURN;
       WHEN (0,LENGTH(PARY(L))) RETURN /* ":" MISSING OR AT END */;
       OTHERWISE
          DO;
             IF DELDUP_ERR(SUBSTR(PARY(L),1,J-1),'1'B,'0'B) THEN RETURN;
             IF DELDUP_ERR(SUBSTR(PARY(L),J+1)  ,'0'B,'1'B) THEN RETURN;
          END;
    END /* SELECT J */;
 END /* DO L */;
 L = L - 1 /* POSITION OF LAST OPERAND */;
 RHRC = 0 /* PARSE WAS OK */;
 MSGDATA = '';
 BEGIN REORDER;
    DCL (DELDUP_STR,DELDUP_LAST_STR) CHAR(MAX_COL) VARYING AUTOMATIC;
    CURRENT_LINE# = CURSEQ;
    CALL #MD (RHPTR,SUBENT,LINE_1) /* MOVE TO NEAR LINE 1 */;
    DO SAVPTR = RECPTR REPEAT SAVPTR->NXTPTR
                WHILE(SAVPTR ^= HDPTR & SAVPTR->RECSEQ <= LINE_2);
       IF SAVPTR->RECSEQ >= LINE_1 THEN     /* WITHIN LINE RANGE */
          DO;
             DELDUP_STR = '';
             IF L < 4
                THEN DELDUP_STR = SAVPTR->RECSTR /* NO COLUMNS GIVEN */;
                ELSE
                   DO I = 4 TO L;
                      IF DELDUP_COL(I,2) > LENGTH(SAVPTR->RECSTR)
                         THEN DELDUP_STR = DELDUP_STR ××
                                 SUBSTR(SAVPTR->RECSTR ××
                                 REPEAT(' ',MAX_COL-1),
                                 DELDUP_COL(I,1),
                                 DELDUP_COL(I,2)-DELDUP_COL(I,1)+1);
                         ELSE DELDUP_STR = DELDUP_STR ××
                                 SUBSTR(SAVPTR->RECSTR,
                                 DELDUP_COL(I,1),
                                 DELDUP_COL(I,2)-DELDUP_COL(I,1)+1);
                   END /* DO I */;
             SELECT;
                WHEN (FIRST_TIME, DELDUP_LAST_STR^=DELDUP_STR)
                   DELDUP_LAST_STR = DELDUP_STR;
                OTHERWISE
                   DO /* DELETE LINE */;
                      DELPTR = SAVPTR;
                      SAVPTR = SAVPTR->LSTPTR;        /* CALL DENTPS */
                      CALL #PUTSLOT (RHPTR,SUBENT,DELPTR);
                   END /* DELETE LINE */;
             END /* SELECT */;
             FIRST_TIME = '0'B;
          END /* WITHIN LINE RANGE */;
    END /* WHILE SAVPTR ^= HDPTR */;
 END /* BEGIN */;
 CALL #MD (RHPTR,SUBENT,CURRENT_LINE#) /* MOVE TO CURRENT LINE */      ;
 RETURN;
 END;
