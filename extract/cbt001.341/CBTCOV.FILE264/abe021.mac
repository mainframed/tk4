  /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /*ABE021,SL,SR,SUBSTR,OL,AL,AR,SEQ,CLEAR,TRANSLAT,FLIP,RESEQ,LIST,L,*/
 /*1       2  3  4      5  6  7  8   9     10       11   12    13   14*/
 /*PBSL,PBSR,SETSEQ,SUFFIX,SLC,SRC,SLB,SRB */
 /*15   16   17     18     19  20  21  22  */
   %INCLUDE ABESUB;
 ABESUB(ABE021) PARS(00000000) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   DCL 1 OUTPOS,
   %INCLUDE ABELRN;
   %INCLUDE ABERHPNL;

   DCL NOTRSW BIT(1) INIT('0'B);
   DCL NOTRUNC CHAR(7) STATIC INIT('NOTRUNC');
   DCL (RNDSW,COLSW,SAMESW,STRSW,CYCLESW,INCRSW,DECRSW,EXPRSW,NOSEQSW)
     BIT(1) INIT('0'B);
   DCL KEYTABLE(14) CHAR(80) VAR STATIC
     INIT('OFF','LEN','RND','COL','SAMECOL','CYCLE','INCR','DECR',
     'EXPRESSION','CTLOFF','CTLLEN','LOOKUP','PUKOOL','HEX');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL CTLSW BIT(1) INIT('0'B); /* ON IF CTLOFF OR CTLLEN USED */
   DCL (LOOKUPSW,PUKOOLSW) BIT(1) INIT('0'B); /* ON IF LOOKUP USED */
   DCL LOOKUPNAME CHAR(8);
   DCL LOOKRHP PTR;
   DCL (CTLVAL,EXPR,NEWVAL) CHAR(256) VAR;
   DCL SEQBL CHAR(8),SEQPIC PIC'(8)9'DEF SEQBL;
   DCL IDPIC PIC'(15)9';
   DCL SETCAPS ENTRY;
   DCL TRIN ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL VSUBSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),FIXED BIN(15,0),CHAR(
   *));
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL CMDLAB(22) LABEL;
   DCL (DUMSTR,FLIPSTR,STR) CHAR(256) VAR;
   DCL (SAVPTR,ORGPTR,L3PTR,L3PTRS,OLPTR,ALTPTR) PTR;
   DCL (REPEAT,TIME) BUILTIN;
   DCL SEED FLOAT DEC(16);
   DCL INT FIXED BIN(31,0);
   DCL PI DEC FLOAT(16) STATIC INIT(3.141592654);
   DCL SUPCNT FIXED BIN(31,0) INIT(0);
   DCL NSAVE FIXED BIN(15,0);
   DCL (IPTR,OPTR) PTR;
   DCL (YTRAN,ZTRAN) CHAR(256);

   ORGPTR = RECPTR;
   IF CMDINDX=18 /* SUFFIX MUST BE HANDLED SPECIAL */
     THEN DO;
       DO RECPTR=#SUCC(RHHDRPT,RHPTR,NULL)
         REPEAT #SUCC(RHHDRPT,RHPTR,RECPTR) WHILE(RECPTR^=HDPTR);
         IF RECSTR=''
           THEN RECSTR='';
           ELSE DO; /* GYRATIONS TO BYPASS BUG IN COMPILER */
             BUF=RECSTR;
             RECSTR=SUBSTR(RECSTR,1,SUFFIX(BUF,' '));
             END;
         END;
       CALL #NC(RHPTR,ORGPTR); /* CALL NEWCUR */
       RHRC = 0;
       RETURN;
       END;
   CTLOFF=1;
   CTLLEN=8;
   CTLVAL='';
   IPTR=ADDR(LRN_STRUCTURE.POSITIONALS(1));
   OPTR=ADDR(OUTPOS.POSITIONALS(1));
   OLPTR=RHPTR;
   IF CMDINDX=13 × CMDINDX=14
     THEN DO; /* IT IS LIST,L */
       IF PARY(1)^=''
         THEN NOSEQSW='1'B;
       GOTO COMMON;
       END;
   SAVEFLAG='1'B;
   L3 = 0;
   GO TO CMDLAB(CMDINDX);
  CMDLAB(19): /* SLC */
   CMDINDX=2; /* CONVERT TO SL */
   GOTO SLCSRC; /* GO TO COMMON CODE */
  CMDLAB(20): /* SRC */
   CMDINDX=3; /* CONVERT TO SR */
  SLCSRC:
   PUT STRING(PARY(2))
     EDIT(MOD(@CURLOC,LINESIZE)-RHPMAXLN-1)(P'999');
   GOTO CMDLAB(1);
  CMDLAB(21): /* SLB */
   CMDINDX=2; /* CONVERT TO SL */
   GOTO SLBSRB; /* GO TO COMMON CODE */
  CMDLAB(22): /* SRB */
   CMDINDX=3; /* CONVERT TO SR */
  SLBSRB:
   IF PARY(2)^=''
     THEN PARY(4)=PARY(2); /* MOVE KEYWORD */
   PUT STRING(PARY(2)) EDIT(RH_LB)(P'ZZZZZZZ9');
   PUT STRING(PARY(3)) EDIT(RH_RB)(P'ZZZZZZZ9');
  CMDLAB(1): /* ABE021 */
  CMDLAB(2): /* SL      */
  CMDLAB(3): /* SR      */
  CMDLAB(15): /* PBSL    */
  CMDLAB(16): /* PBSR    */
   /*      1     2      3      4       */
   /* SL   <AMT> <SCOL> <ECOL> NOTRUNC */
   /* SR   <AMT> <SCOL> <ECOL> NOTRUNC */
   /* PBSL <AMT> <SCOL> <ECOL> R       */
   /* PBSR <AMT> <SCOL> <ECOL> <R × <MAXLEN>> */
   IF PARY(1)=''
    THEN DO;
      AMT=32767;
      S=1;
      E=9999;
      NOTRSW='1'B;
      END;
     ELSE DO;
       AMT = PARY(1);
       IF PARY(2)=''
         THEN DO;
           S=1;
           E=9999;
           END;
         ELSE DO;
           S=PARY(2);
           IF PARY(3)=''
             THEN E=9999;
             ELSE E=PARY(3);
           END;
       END;
   IF PARY(4) ^=''
     THEN CALL SETCAPS(PARY(4));
   IF VERIFY(PARY(4),'0123456789')=0 & (LENGTH(PARY(4)) > 0)
     THEN L7=PARY(4);
     ELSE DO;
       L7=0;
       IF PARY(4)^=''
         THEN IF PARY(4)=SUBSTR(NOTRUNC,1,MIN(7,LENGTH(PARY(4))))
           THEN NOTRSW='1'B;
       END;
   GO TO COMMON;
  CMDLAB(4): /* SUBSTR */
   /*        1     2.....                        */
   /* SUBSTR <STR> OFF(<OFF>) LEN(<LEN>) RND     */
   /*        <L3>                        COL     */
   /*                                    SAMECOL */
   /*                                    CYCLE   */
   /*                                    INCR    */
   /*                                    DECR    */
   /*                                    EXPR    */
   /*                                    LOOKUP  */
   /*                                    HEX     */
   IF PARQCK(1)
     THEN STRSW='1'B; /* <STR> SPECIFIED */
     ELSE IF VERIFY(PARY(1),'0123456789')=0
       THEN L3=PARY(1);
       ELSE STRSW='1'B;
   STR=PARY(1);
   OFF=1; /* DEFAULT */
   LEN=RH_LEN; /* DEFAULT */
   DO I=2 TO HBOUND(PARY,1) WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
     SELECT(INDX);
       WHEN(0) DO; /* INVALID OPERAND */
         RHRC=8;
         MSGDATA='INVALID OPERAND = '××PARY(I);
         RETURN;
         END;
       WHEN(1)     /* OFF */
         OFF=OPER;
       WHEN(2)     /* LEN */
         LEN=OPER;
       WHEN(3) DO; /* RND */
         STRSW='1'B;
         RNDSW='1'B;
         SEED=SUBSTR(TIME,5);
         SEED=SEED/1E6;
         END;
       WHEN(4)     /* COL */
         COLSW='1'B;
       WHEN(5)     /* SAMECOL */
         SAMESW='1'B;
       WHEN(6)     /* CYCLE */
         CYCLESW,STRSW='1'B;
       WHEN(7) DO; /* INCR */
         INCRSW='1'B;
         IF OPER^=''
           THEN IDAMT=OPER;
           ELSE IDAMT=1;
         END;
       WHEN(8) DO; /* DECR */
         DECRSW='1'B;
         IF OPER^=''
           THEN IDAMT=OPER;
           ELSE IDAMT=1;
         END;
       WHEN(9) DO; /* EXPR */
         EXPRSW,STRSW='1'B;
         EXPR=PARY(1);
         END;
       WHEN(10) DO;/* CTLOFF */
         CTLSW,STRSW='1'B;
         CTLOFF=OPER;
         END;
       WHEN(11) DO;/* CTLLEN */
         CTLSW,STRSW='1'B;
         CTLLEN=OPER;
         IF CTLLEN>256
           THEN DO;
             MSGDATA='ERROR CTLLEN CANNOT EXCEED 256';
             RHRC=8;
             RETURN;
             END;
         END;
       WHEN(12,13) DO;/* LOOKUP */
         STRSW='1'B;
         IF INDX=12
           THEN LOOKUPSW='1'B;
           ELSE PUKOOLSW='1'B;
         LOOKUPNAME=PARY(1);
         CALL SETCAPS(LOOKUPNAME);
         LOOKRHP=RHP_LOC(LOOKUPNAME);
         IF LOOKRHP=NULL
           THEN DO;
             MSGDATA='LOOKUP DATASET NOT FOUND';
             RHRC=8;
             RETURN;
             END;
         END;
       WHEN(14) DO; /* HEX */
         STR=TRHEX(STR);
         IF RHRC^=0
         THEN RETURN;
         END;
       OTHERWISE;  /* PREVENTS COMPILER MESSAGE */
       END; /* SELECT */
     END;
   IF DECRSW × INCRSW
     THEN DO;
       IF STRSW
         THEN DO;
           MSGDATA ='INCR/DECR REQUIRE FIRST OPERAND TO BE NUMERIC';
           RHRC = 8;
           RETURN;
           END;
       IF PARY(1)=''
         THEN INCRDECR=0;
         ELSE INCRDECR=PARY(1);
       END;
   IF CYCLESW
     THEN INCRDECR=1;
   IF STRSW & (COLSW × SAMESW)
     THEN DO;
       RHRC=8;
       MSGDATA ='COL/SAMECOL REQUIRE FIRST OPERAND TO BE NUMERIC';
       RETURN;
       END;
   IF ^(STRSW × COLSW × INCRSW × DECRSW)
     THEN DO;
       CALL #MD(OLPTR,RHHDRPT,L3); /* CALL MDPROC */
       IF OLPTR->RECPTR->RECSEQ ^= L3
         THEN DO;
           MSGDATA ='L3 NOT FOUND';
           RHRC = 8;
           RETURN;
           END;
       IF ^SAMESW
         THEN STR = OLPTR->RECPTR->RECSTR;
       L3PTRS,L3PTR=OLPTR->RECPTR;
       END;
   GOTO COMMON;
  CMDLAB(5): /* OL */
   /*          1    */
   /* OL      <LSP> */
   CALL #ABELSPP(RHHDRPT,RHPTR,ADDR(OUTPOS),CMDBUF,NSAVE);
   ALTPTR=OUTPOS.LRN_RHP;
   GOTO COMMON;
                 /*    */
  CMDLAB(6):     /* AL */
  CMDLAB(7):     /* AR */
   IF CMDINDX=7 /* AR? */
     THEN IF PARY(1) =''
       THEN DO;
         L3=RH_LEN;
         L4=0;
         END;
       ELSE DO;
         L3=PARY(1);
         IF PARY(2)=''
           THEN L4=0;
           ELSE DO;
             L4=PARY(2);
             IF L4>=L3
               THEN DO;
                 MSGDATA='STARTING COLUMN TOO BIG';
                 RHRC=16;
                 RETURN;
                 END;
             END;
         END;
     ELSE IF PARY(1)='' /* IT IS AL */
       THEN DO;
         L3=1;
         L4=0;
         END;
       ELSE DO;
         L3=PARY(1);
         IF PARY(2)=''
           THEN L4=0;
           ELSE DO;
             L4=PARY(2);
             IF L4<=L3
               THEN DO;
                 MSGDATA='ENDING COLUMN TOO SMALL';
                 RHRC=16;
                 RETURN;
                 END;
             END;
         END;
   IF L3<L4
     THEN DO;
       S=L3;
       E=L4;
       END;
     ELSE DO;
       S=L4;
       E=L3;
       END;
   GO TO COMMON;
  CMDLAB(8): /* SEQ */
   IF PARY(1)=''
     THEN L3=BUFLN-7;
     ELSE L3=PARY(1);
   GO TO COMMON;
  CMDLAB(12): /* RESEQ */
   IF PARY(1)=''
     THEN L3=BUFLN-7;
     ELSE L3=PARY(1);
   ROF=L3;
   IF ROF=0
     THEN ROF=1;
   IF PARY(2)=''
     THEN L4=8;
     ELSE L4=PARY(2);
   GO TO COMMON;
  CMDLAB(9): /* CLEAR */
   IF PARY(1)=''
     THEN L3=1;
     ELSE L3=PARY(1);
   GO TO COMMON;
  CMDLAB(10): /* TRANSLAT */
   IF PARY(1)=''
     THEN RHTRANSW ='1'B;
   YTRAN=PARY(1);
   ZTRAN=PARY(2);
   GO TO COMMON;
  CMDLAB(11): /* FLIP */
   /*      1      */
   /* FLIP <LSP>  */
   CALL #ABELSPP(RHHDRPT,RHPTR,ADDR(OUTPOS),CMDBUF,NSAVE);
   ALTPTR=OUTPOS.LRN_RHP;
   GO TO COMMON;
  CMDLAB(17): /* SETSEQ */
   L1=PARY(1);
   CALL #MD(RHPTR,RHHDRPT,L1); /* CALL MDPROC */
   IF RECPTR=HDPTR
     THEN DO;
       MSGDATA='RECORD NOT FOUND';
       RHRC = 8;
       RETURN;
       END;
   L2 = PARY(2);
   L3 = 1;
   IF LSTPTR^=HDPTR
     THEN IF LSTPTR->RECSEQ>=L2
       THEN L3=0;
   IF NXTPTR^=HDPTR
     THEN IF NXTPTR->RECSEQ<=L2
       THEN L3=0;
   IF L3=0
     THEN PUT STRING(CMDDATA)
       EDIT(L1,' MO ',L2)
         (P'ZZZZZZZ9',A,P'ZZZZZZZ9');
     ELSE RECSEQ = L2;
   CALL #NC(RHPTR,ORGPTR); /* CALL NEWCUR */
   RHRC = 0;
   RETURN;
 COMMON:
   DO FOREVER=1 REPEAT FOREVER;
     CALL #ABELSP(RHHDRPT,LRNPTR); /* GET NEXT FROM-SEGMENT */
     IF LRN_STRUCTURE.LRN_BUFP=NULL
       THEN LEAVE; /* ALL DONE */
     SELECT(CMDINDX);
       WHEN(1,2,3) /* IT IS SL, SR */
       IF LSPBUF^=''& S<=LENGTH(LSPBUF)
         THEN DO;
           EN=MIN(MAXLEN(LSPBUF),E);
           IF EN>LENGTH(LSPBUF)
             THEN LSPBUF=LSPBUF××REPEAT(' ',EN-LENGTH(LSPBUF)-1);
           L=MAX(0,EN-S+1);
           BUF=SUBSTR(LSPBUF,S,L);
           IF BUF^=''
             THEN DO;
               IF CMDINDX=3 /* IS IT SR? */
                 THEN IF ^NOTRSW
                   THEN SUBSTR(LSPBUF,S,L)=REPEAT(' ',AMT-1)××BUF;
                   ELSE DO;
                     I=L-SUFFIX(BUF,' '); /* NUMBER OF BLANKS AT END */
                     IF I<AMT
                       THEN IF I>0
                         THEN SUBSTR(LSPBUF,S,L)=REPEAT(' ',I-1)××BUF;
                         ELSE;
                       ELSE SUBSTR(LSPBUF,S,L)=REPEAT(' ',AMT-1)××BUF;
                     END;
                 ELSE IF ^NOTRSW
                   THEN SUBSTR(LSPBUF,S,L)=SUBSTR(LSPBUF,
                     MIN(LENGTH(LSPBUF),S+AMT),MAX(0,L-AMT));
                   ELSE SUBSTR(LSPBUF,S,L)=
                     SUBSTR(BUF,MIN(AMT+1,PREFIX(BUF,' ')));
               END;
           END;
       WHEN(15) /* IT IS PBSL */
       IF LSPBUF^=''& S<=LENGTH(LSPBUF)
         THEN DO;
           TL=MIN(LENGTH(LSPBUF),E)-S+1;
           STR=SUBSTR(LSPBUF,S,TL);
           SUBSTR(LSPBUF,S,TL)='';
           IF AMT>S-1
             THEN IF PARY(6)='R'
               THEN MAMT=AMT;
               ELSE MAMT=MIN(AMT,S-1+PREFIX(STR,' ')-1);
             ELSE MAMT=AMT;
           IF S > 1
             THEN BLCK:DO SL=S-1 TO MIN(1,S-MAMT) BY -1;
               IF SUBSTR(LSPBUF,SL,1)^=' '
                 THEN IF PARY(6)^='R'
                   THEN DO;
                     MAMT=S-SL-1;
                     LEAVE BLCK;
                     END;
                   ELSE SUBSTR(LSPBUF,SL,1)=' ';
               END BLCK;
           IF MAMT>S-1
             THEN DO;
               SL=MAX(0,TL-(MAMT-S+1));
               STR=SUBSTR(STR,TL-SL+1,SL);
               MAMT=S-1;
               END;
           SUBSTR(LSPBUF,S-MAMT,LENGTH(STR))=STR;
           END;
     WHEN(16) /* IT IS PBSR */
     IF LSPBUF^=''& S<=LENGTH(LSPBUF)
       THEN DO;
         TL=MIN(LENGTH(LSPBUF),E)-S+1;
         STR=SUBSTR(LSPBUF,S,TL);
         STR=SUBSTR(STR,1,SUFFIX(STR,' '));
         SUBSTR(LSPBUF,S,TL)='';
         MAMT=AMT;
         IF L7=0
           THEN ML=MAXLEN(LSPBUF);
           ELSE ML=MIN(L7,MAXLEN(LSPBUF));
         SRCK:DO SR=S+TL TO E+AMT;
           IF SR > ML
             THEN LEAVE SRCK;
           IF LENGTH(LSPBUF)>=SR
             THEN IF PARY(6)^='R'
               THEN IF SUBSTR(LSPBUF,SR,1)^=' '
                 THEN DO;
                   MAMT=MIN(AMT,SR-S-LENGTH(STR));
                   LEAVE SRCK;
                   END;
                 ELSE;
               ELSE SUBSTR(LSPBUF,SR,1)=' ';
             ELSE LSPBUF=LSPBUF××' ';
           END;
         TL = LENGTH(LSPBUF)-(S+LENGTH(STR)-1);
         IF MAMT > TL
           THEN IF PARY(6) ^='R'
             THEN MAMT = TL;
             ELSE STR=SUBSTR(STR,1,MAX(0,LENGTH(STR)-MAMT+TL));
         SUBSTR(LSPBUF,MIN(LENGTH(LSPBUF),S+MAMT),LENGTH(STR))=STR;
         END;
     WHEN(4) /* IT IS SUBSTR */
     DO;
       SELECT;
         WHEN(EXPRSW) DO;
           I=#CMD('CALC 0+'××EXPR,RHPTR,RHHDRPT);
           STR=MSGDATA;
           MSGDATA='';
           END;
         WHEN(COLSW)
           STR=SUBSTR(LSPBUF,MIN(L3,LENGTH(LSPBUF)+1));
         WHEN(RNDSW) DO; /* DATA IS TO BE GENERATED RANDOMLY */
           STR='';
           DO I=1 TO IPTR->RH_LEN;
             SEED,INT=(PI+SEED)**8;
             SEED=SEED-INT;
             INT=LENGTH(PARY(1))*SEED+1;
             STR=STR××SUBSTR(PARY(1),INT,1);
             END;
           END;
         WHEN(SAMESW) DO; /* DATA IS TO BE COPIED FROM L3PTR->RECSTR */
           I=RH_OFF+RH_LEN*(LRN_STRUCTURE.LRN_CURCOL-1); /* OFFSET */
           IF LENGTH(L3PTR->RECSTR)<I
             THEN STR='';
             ELSE IF LENGTH(L3PTR->RECSTR)<I+RH_LEN-1
               THEN STR=SUBSTR(L3PTR->RECSTR,I);
               ELSE STR=SUBSTR(L3PTR->RECSTR,I,RH_LEN);
           END;
         WHEN(INCRSW,DECRSW) DO;
           PUT STRING(STR) LIST(INCRDECR);
           STR=SUBSTR(STR,PREFIX(STR,' '));
           STR=SUBSTR(STR,1,SUFFIX(STR,' '));
           IF LEN^=0
             THEN IF LENGTH(STR)<LEN
               THEN STR=REPEAT('0',LEN-LENGTH(STR)-1)××STR;
           IF INCRSW
             THEN INCRDECR=INCRDECR+IDAMT;
             ELSE INCRDECR=INCRDECR-IDAMT;
           END;
         WHEN(CTLSW) DO;
           SELECT;
             WHEN(LENGTH(LSPBUF)<CTLOFF)
               NEWVAL=' ';
             WHEN(LENGTH(LSPBUF)<CTLOFF+CTLLEN-1)
               NEWVAL=SUBSTR(LSPBUF,CTLOFF);
             OTHERWISE
               NEWVAL=SUBSTR(LSPBUF,CTLOFF,CTLLEN);
             END; /* SELECT */
           IF NEWVAL^=CTLVAL × LENGTH(CTLVAL)=0
             THEN DO;
               INCRDECR=1;
               CTLVAL=NEWVAL;
               END;
           PUT STRING(STR) LIST(INCRDECR);
           STR=SUBSTR(STR,PREFIX(STR,' '));
           STR=SUBSTR(STR,1,SUFFIX(STR,' '));
           IF LEN^=0
             THEN IF LENGTH(STR)<LEN
               THEN STR=REPEAT('0',LEN-LENGTH(STR)-1)××STR;
           INCRDECR=INCRDECR+1;
           END;
         WHEN(CYCLESW) DO;
           IF LEN=0
             THEN I=1;
             ELSE I=MIN(LENGTH(PARY(1))-INCRDECR+1,LEN);
           STR=SUBSTR(PARY(1),INCRDECR,I);
           INCRDECR=INCRDECR+I;
           IF INCRDECR>LENGTH(PARY(1))
             THEN INCRDECR=1;
           END;
         WHEN(LOOKUPSW) DO;
           IS=LSPBUF;
           CALL #MD(LOOKRHP,RHHDRPT,IS);
           IF LOOKRHP->RECPTR->RECSEQ=IS
             THEN STR=LOOKRHP->RECPTR->RECSTR;
             ELSE STR='';
           END;
         WHEN(PUKOOLSW) DO;
           RPT=NULL;
           DO RPT=#SUCC(RHHDRPT,LOOKRHP,RPT)
             REPEAT #SUCC(RHHDRPT,LOOKRHP,RPT);
             IF RPT=LOOKRHP
               THEN LEAVE;
             IF RPT->RECSTR=LSPBUF
               THEN LEAVE;
             END;
           IF RPT^=LOOKRHP
             THEN DO;
               PUT STRING(STR) EDIT(RPT->RECSEQ)(P'ZZZZZZZ9');
               STR=SUBSTR(STR,PREFIX(STR,' '));
               END;
             ELSE STR='';
           END;
         OTHERWISE;
         END; /* SELECT */
       IF LEN=0
         THEN TTL=LENGTH(STR);
         ELSE TTL=LEN;
       L=(OFF+TTL-1)-LENGTH(LSPBUF)-1; /* L IS NUMBER OF BYTES LESS 1
         THAT HAVE TO BE PADDED TO LSPBUF */
       IF L>=0
         THEN LSPBUF=LSPBUF××REPEAT(' ',L);
       TLEN=MIN(TTL,LENGTH(LSPBUF)-OFF+1); /*TLEN=# BYTES TO SUBSTR*/
       IF TLEN>0
         THEN SUBSTR(LSPBUF,OFF,TLEN)=STR;
 /*        SUBSTR(STR,MAX(1,LENGTH(STR)-TLEN+1)); REMOVED 11/17/86 */
       END;
     WHEN(6,7) /* IT AL,AR */
     IF LSPBUF^=''
       THEN DO;
         IF L4=0
           THEN DO;
             LSPBUF=SUBSTR(LSPBUF,PREFIX(LSPBUF,' '));
             LSPBUF=SUBSTR(LSPBUF,1,SUFFIX(LSPBUF,' '));
             IF CMDINDX=6 /* IS IT AL? */
               THEN IF L3 > 1
                 THEN LSPBUF=REPEAT(' ',L3-2)××LSPBUF;
                 ELSE;
               ELSE IF LENGTH(LSPBUF)<L3
                 THEN LSPBUF=REPEAT(' ',L3-LENGTH(LSPBUF)-1)××LSPBUF;
             END;
           ELSE DO;
             IF LENGTH(LSPBUF)<S
               THEN BUF='';
               ELSE BUF=SUBSTR(LSPBUF,S,MIN(LENGTH(LSPBUF)-S+1,E-S+1));
             IF BUF^=''
               THEN DO;
                 BUF=SUBSTR(BUF,PREFIX(BUF,' '));
                 BUF=SUBSTR(BUF,1,SUFFIX(BUF,' '));
                 IF CMDINDX=7 /* IS IT AR? */
                   THEN IF LENGTH(BUF)<E-S+1
                     THEN BUF=REPEAT(' ',E-S-LENGTH(BUF))××BUF;
                 IF LENGTH(LSPBUF)<E
                   THEN LSPBUF=SUBSTR(LSPBUF,1,S-1)××BUF;
                   ELSE SUBSTR(LSPBUF,S,E-S+1)=BUF;
                 END;
             END;
         END;
     WHEN(8) /* IT IS SEQ */
     DO;
       SEQPIC=RECSEQ;
       IF L3=0
         THEN LSPBUF=SEQBL××LSPBUF;
         ELSE CALL VSUBSTR(LSPBUF,L3,8,SEQBL);
       END;
     WHEN(12) /* IT IS RESEQ */
     DO;
       RECSEQ=SUBSTR(LSPBUF,ROF,L4);
       IF L3=0
         THEN LSPBUF=SUBSTR(LSPBUF,L4+1);
       END;
     WHEN(9) /* IT IS CLEAR */
     IF LENGTH(LSPBUF)>=L3
       THEN LSPBUF=SUBSTR(LSPBUF,1,L3-1);
     WHEN(10) /* IT IS TRANSLAT */
       SELECT;
         WHEN(YTRAN='') CALL #ABETR(LSPBUF); /* CALL DENTTR */
         WHEN(ZTRAN='') LSPBUF=TRANSLATE(LSPBUF,YTRAN);
         OTHERWISE LSPBUF=TRANSLATE(LSPBUF,YTRAN,ZTRAN);
         END; /* SELECT */
     WHEN(11) /* IT IS FLIP */
     DO;
       SAVPTR=RECPTR;
       RECPTR=ALTPTR;
       CALL #ABELSP(RHHDRPT,ADDR(OUTPOS));
       IF OUTPOS.LRN_BUFP=NULL
         THEN CALL #ABELSP(RHHDRPT,ADDR(OUTPOS)); /* START OVER */
       ALTPTR=RECPTR;
       RECPTR=SAVPTR;
       IF OUTPOS.LRN_BUFP^=NULL
         THEN DO;
           BUF=OUTPOS.LRN_BUFP->LSPBUF;
           OUTPOS.LRN_BUFP->LSPBUF=LSPBUF;
           LSPBUF=BUF;
           END;
       END;
     WHEN(13,14) /* IT IS LIST,L */
     DO;
       IF SUBSTR(RECFLGS,2,1)
         THEN SUPCNT=SUPCNT+1;
         ELSE DO;
           IF SUPCNT^=0
             THEN DO;
               SEQPIC=SUPCNT;
               SUPCNT=0;
               CALL #TERM('LINES SUPPRESSED = '
                 ××SEQPIC);
               END;
           IF NOSEQSW
             THEN CALL #TERM(LSPBUF);
             ELSE DO;
               SEQPIC=RECSEQ;
               CALL #TERM(SUBSTR(SEQBL,4,5)
                 ××' '××LSPBUF); /*CALL TERMWRT*/
               END;
           END;
       END;
     OTHERWISE /* IT IS OL */
     DO;
       SAVPTR=RECPTR;
       RECPTR=ALTPTR;
       CALL #ABELSP(RHHDRPT,ADDR(OUTPOS));
       IF OUTPOS.LRN_BUFP=NULL
         THEN CALL #ABELSP(RHHDRPT,ADDR(OUTPOS)); /* START OVER */
       ALTPTR=RECPTR;
       RECPTR=SAVPTR;
       IF OUTPOS.LRN_BUFP^=NULL
         THEN DO;
           I=0;
           L3LEN=LENGTH(OUTPOS.LRN_BUFP->LSPBUF);
           DO WHILE(I<L3LEN);
             J=PREFIX(SUBSTR(OUTPOS.LRN_BUFP->LSPBUF,I+1),' ');
               /* FIND NEXT NONBLANK */
             IF J=0
               THEN LEAVE; /* NO MORE TO OVERLAY */
             J=J+I;
             I=INDEX(SUBSTR(OUTPOS.LRN_BUFP->LSPBUF,J),' ');
               /* FIND NEXT BLANK */
             IF I=0
               THEN I=LENGTH(OUTPOS.LRN_BUFP->LSPBUF)-J+1;
               ELSE I=I-1;
             CALL VSUBSTR(LSPBUF,J,I,
               SUBSTR(OUTPOS.LRN_BUFP->LSPBUF,J,I));
             I=J+I;
             END;
           END;
       END;
     END; /* SELECT */
     END;
   IF SUPCNT^=0
     THEN DO;
       SEQPIC=SUPCNT;
       SUPCNT=0;
       CALL #TERM('LINES SUPPRESSED = '
         ××SEQPIC);
       END;
   IF CMDINDX=5 × CMDINDX=11 /* FLIP OR OL */
     THEN DO;
       IF OUTPOS.LRNSTRT & OUTPOS.LRN_RHP^=NULL
         THEN DO;
           OUTPOS.LRN_EOF='1'B; /* INDICATE END OF PROCESSING */
           SAVPTR=RECPTR;
           RECPTR=ALTPTR;
           CALL #ABELSP(RHHDRPT,ADDR(OUTPOS));
             /* LET HIM PROCESS LAST BUFFER */
           ALTPTR=RECPTR;
           RECPTR=SAVPTR;
           END;
       IF OUTPOS.LRN_BUFP^=NULL
         THEN FREE OUTPOS.LRN_BUFP->LSPBUFSTR;
         /* FREE IF ALLOCATED IN #ABELSP */
       END;
   RHRC = 0;

 RHP_LOC: PROC(PNAME) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE DATA SET WITH NAME PNAME STILL IS        *
 * BEING EDITED.  IF NOT, NULL WILL BE RETURNED.                       *
 *                                                                     *
 **********************************************************************/
   DCL PNAME CHAR(8);
   DCL TPTR PTR;

   DO TPTR=NXTRHEL REPEAT TPTR->RHNXT
     WHILE(TPTR^=NULL)
     UNTIL(TPTR->RHNAME=PNAME);
     END;
   RETURN(TPTR);
   END RHP_LOC;

 TRHEX:PROC(STR) RETURNS(CHAR(256) VAR);
   DCL STR CHAR(*) VAR;
   DCL OUTSTR CHAR(256) VAR;
   IF MOD(LENGTH(STR),2)^=0
     THEN DO;
       MSGDATA='HEX TEXT MUST BE AN EVEN NUMBER OF CHARACTERS';
       RHRC=8;
       RETURN;
       END;
   IF LENGTH(STR)>128
     THEN DO;
       MSGDATA='HEX STRING CAN BE NO LONGER THAT 128 CHARACTERS';
       RHRC=8;
       RETURN;
       END;
   CALL SETCAPS(STR);
   IF VERIFY(STR,'ABCDEF0123456789')^=0
     THEN DO;
       MSGDATA='INVALID HEX CHARACTERS SPECIFIED';
       RHRC=8;
       RETURN;
       END;
   OUTSTR=REPEAT(' ',LENGTH(STR)/2-1);
   CALL TRIN(STR,OUTSTR);
   RETURN(OUTSTR);
   END TRHEX;

   END;
