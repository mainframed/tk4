 /* @FOREACH */
 %NOPRINT;
 % DCL @FOREACH ENTRY;
 %@FOREACH: /* @FOREACH IN(LIST) SET(VARIABLE) */
 PROCEDURE(IN,SET,POSIT) STATEMENT RETURNS(CHAR);
 /*
0*$.HE GENERALIZED SUBROUTINES = @FOREACH
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE PROCESS EACH ENTRY IN A LIST
0*$.PL 58
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$06/06/78
0*$AUTHOR:  P. DIXON
0*$SOURCE MODULE NAME:  @FOREACH
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS PLI PREPROCESSOR PROCEDURE CAN BE INVOKED TO GENERATE THE
0*$NECESSARY PLI STATEMENTS TO PROCESS EACH ITEM IN A PARAMETER THAT
0*$HAS BEEN DEFINED AS A LIST IN THE @PROC STATEMENT.  THE FORMAT IS:
0*$.SP 1
0*$.IN 5
0*$@FOREACH IN(LIST) SET(VARIABLE)
0*$.IN 0
0*$.SP 1
0*$WHERE "LIST" IS THE NAME OF THE PARAMETER THAT HAS BEEN DEFINED AS
0*$A LIST, AND "VARIABLE" IS THE NAME OF THE VARIABLE WHICH WILL
0*$RECEIVE THE VALUE.  YOU MUST PROVIDE THE DECLARATION FOR "VARIABLE".
0*$.SP 1
0*$FOR EXAMPLE, IF YOUR COMMAND PROCESSOR BEGINS WITH
0*$.SP 1
0*$.NF
0*$.IN 5
0*$@PROC(0,LEVEL(#(LIST)));
0*$DCL LEVEL_NAME CHAR(44);
0*$.IN 0
0*$.FI L
0*$.SP 1
0*$AND THE USER TYPES
0*$.SP 1
0*$.IN 5
0*$YOURCOMMAND LEVEL(SYS1 SYS2 SYS3)
0*$.IN 0
0*$.SP 1
0*$THEN THESE STATEMENTS
0*$.SP 1
0*$.NF
0*$.IN 5
0*$@FOREACH IN(LEVEL) SET(LEVEL_NAME);
0*$    PUT EDIT('PROCESSING LEVEL ',LEVEL_NAME) (A,A);
0*$    CALL PROCESS_LEVEL(LEVEL_NAME);
0*$END; ** @FOREACH **
0*$.IN 0
0*$.FI L
0*$.SP 1
0*$WOULD PROCESS EACH OF THE THREE SPECIFIED LEVELS ("SYS1", "SYS2",
0*$AND 'SYS3") AFTER PRINTING AN INFORMATORY MESSAGE.
0*$.SP 1
0*$"@FOREACH" IS SIMILAR TO A REPETITIVE "DO" STATEMENT IN THAT THERE
0*$IS A CONTROL VARIABLE (LEVEL_NAME) WHICH IS SET TO A NEW VALUE
0*$EACH TIME THROUGH THE LOOP.  NOTE THAT "@FOREACH" REQUIRES AN "END"
0*$STATEMENT TO INDICATE THE END OF THE LOOP.
0*$.SP 1
0*$NOTE THAT IF THE LIST TO BE PROCESSED IS SPECIFIED AS A
0*$POSITIONAL PARAMETER ON THE @PROC STATEMENT, THEN ADD THE
0*$OPERAND "POSIT(YES)" TO THE @FOREACH STATEMENT.
 */
 DCL (IN,SET,POSIT) CHARACTER, @FOREACH_INDEX FIXED;
 @FOREACH_INDEX = INDEX(IN ×× ' ',' ');
 IN = SUBSTR(IN,1,@FOREACH_INDEX-1);
 IF POSIT = 'YES'
   THEN RETURN('DO PDEPTR=ADDR('××IN××') '××
     'REPEAT PDEIKLP WHILE(PDEPTR^=NULL); '××
     SET××' = SUBSTR(PDEIKPT->WRKSTR,1,PDEIKL);');
   ELSE RETURN ('IF '××IN××'^=0 THEN '××
     'DO PDEPTR=ADDR(' ×× IN ×× 'SUB) ' ××
     'REPEAT PDEIKLP WHILE(PDEPTR^=NULL()); ' ××
     SET ×× ' = SUBSTR(PDEIKPT->WRKSTR,1,PDEIKL);' );
 %END @FOREACH;
 %PRINT;
