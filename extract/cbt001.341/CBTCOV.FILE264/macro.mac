*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* MACGRAM   GRAMMAR ENTRY POINT PROCEDURE FOR MACRO GRAMMAR        */
 /********************************************************************/
 /*      MODULE NAME: MACRO                                          */
 /*      FUNCTION:    G3P0 GRAMMAR WRITING GRAMMAR                   */
 /*      VERSION:     JUL 12, 1981                                   */
 /*      AUTHOR:      HOWARD GILBERT                                 */
 /*                   YALE COMPUTER CENTER                           */
 /*                   175 WHITNEY AVE                                */
 /*                   NEW HAVEN, CT. 06520                           */
 /*      LANGUAGE:    PLIX RELEASE 3.0 OR LATER                      */
 /*                     (AND IS WRITTEN IN ITSELF)                   */
 /*      COPYRIGHT 1978 HOWARD K. GILBERT                            */
 /*  PERMISSION TO MAKE PRIVATE COPIES OF THIS PROGRAM AND           */
 /*  TO USE IT FREELY IS HEREBY GRANTED BY THE AUTHOR. THIS          */
 /*  PROGRAM MAY NOT BE SOLD, NOR MAY ANY SECTION OF IT BE           */
 /*  INCORPORATED INTO ANY WORK FOR SALE WITHOUT PERMISSION OF       */
 /* THE AUTHOR.                                                      */
 /********************************************************************/
 /*      INSTALLATION INSTRUCTIONS:                                  */
 /*      PREPROCESSING:                                              */
 /*           USE G3P0 VERSION FEB 28, 1981 OR LATER                 */
 /*      COMPILATION:                                                */
 /*           USE VERSION 3.0 OR LATER OF THE PLIX COMPILER          */
 /*           THE REQUIRED COMPILER OPTIONS ARE GIVEN IN THE         */
 /*           *PROCESS CARDS.                                        */
 /*           SYSLIB MUST POINT TO A CARD IMAGE PDS CONTAINING       */
 /*           THE MEMBERS GPPPTCA AND MACINFO.                       */
 /*      LINKAGE EDITING:                                            */
 /*           THIS MODULE IS NOT REENTRANT.                          */
 /*           SPECIFY                                                */
 /*                ENTRY GRAMEP                                      */
 /*                NAME MACRO(R)                                     */
 /********************************************************************/
 /********************************************************************/
 /*      GRAMMAR ENTRY POINT PROCEDURE                               */
 /*      USES THE GRAMMAR AND DEFMAC MACROS TO DEFINE THE ROUTINES   */
 /*      FOR THE 'MACRO' MACROS.                                     */
 /********************************************************************/
 ? MACGRAM: GRAMMAR (MACRO,GRAMMAR,DEFMAC,PUT);
 DCL COPYRIT CHAR(40) EXT STATIC
         INIT('COPYRIGHT 1978 HOWARD K. GILBERT');
 DCL ADENDUM CHAR(30)             /* CREDIT WHERE IT'S DUE           */
         STATIC EXT               /*                                 */
         INIT('MODIFIED 1981 BY ALAN BEALE');
 ? DEFMAC PARAMETER ENTRY(PARMMAC);
 ? DEFMAC LABEL ENTRY(LABMAC);
 ? DEFMAC PARSE ENTRY(PARSMAC);
 ? DEFMAC OPEN ENTRY(OPENMAC);
 ? DEFMAC GET ENTRY(GETMAC);
 ? DEFMAC NOTE ENTRY(NOTEMAC);
 END MACGRAM;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* MACRO:   MACRO PROCEDURE FIRST STATEMENT                         */
 /********************************************************************/
 /*      THE MACRO MACRO                                             */
 /*           USING THE LABEL OF THE MACRO CALL STATEMENT,           */
 /*           GENERATE A PROC STATEMENT.                             */
 /*           DCL THE GPPPTCA.                                       */
 /*           RESET THE PARAMETER SYMBOL TABLE                       */
 /*           SAVE THE MAXIMUM PARAMETER STRING LENGTH.              */
 /********************************************************************/
 ? MACRO:MACRO;
 %INCLUDE MACINFO;
 ? PARAMETER MAXLEN POSITIONAL DEFAULT(256);
 ? PARAMETER ENTRY BIT;
 ? PARSE;
 IF ENTRY
    THEN
 ?     PUT " <PARMS(0)>: ENTRY(STRING,GPPPTCA,MACNAME);";
    ELSE
       DO;
 ?     PUT " <PARMS(0)>: PROC(STRING,GPPPTCA,MACNAME);" ;
 ?     PUT " DCL STRING CHAR(*) VAR;";
 ?     PUT " % NOPRINT;";
 ?     PUT " DCL 1 GPPPTCA CONNECTED," ;
 ?     PUT " %INCLUDE GPPPTCA;";
 ?     PUT " % PRINT;";
 ?     PUT " DCL MACNAME CHAR(16);";
       END;
 MAXLENS=MAXLEN;
 PARM#=0;
 LABOK,LABREQ,ANYKEY,ANYOPT='0'B;
 END MACRO;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* PARMMAC:  PARAMETER MACRO PROCEDURE                              */
 /********************************************************************/
 /*      THE PARAMETER MACRO                                         */
 /*           GATHER THE INFORMATION ABOUT THIS PARAMETER            */
 /*           AND PUT IT IN THE NEXT ELEMENT OF THE MACINFO          */
 /*           ARRAY. THIS INFORMATION WILL BE USED BY THE            */
 /*           PARSE MACRO TO BUILD DCL CARDS AND OTHER PLI           */
 /*           STATEMENTS.                                            */
 /********************************************************************/
 ? PARMMAC: MACRO;
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 ? PARAMETER (NAME) POSITIONAL REQUIRED LIST                        ;
 ? PARAMETER (DEFAULT) SUBFIELD                                     ;
 ? PARAMETER (ALIAS) SUBFIELD                                       ;
 ? PARAMETER (SUBSCRIPT) SUBFIELD                                   ;
 ? PARAMETER (CHAR,BIT,FIXED) BIT                                   ;
 ? PARAMETER (POSITIONAL,KEYWORD) BIT                               ;
 ? PARAMETER (PREPOSITION) BIT                                      ;
 ? PARAMETER (REQUIRED) BIT                                         ;
 ? PARAMETER (SUBFIELD) BIT                                         ;
 ? PARAMETER (LIST) BIT                                             ;
 ? PARAMETER (GENERATED) BIT                                        ;
 ? PARAMETER (ENDSCAN) BIT                                          ;
 ? PARSE;
 IF PARM#>40 THEN
         DO;
 ?       NOTE 12 "TOO MANY PARAMETERS" ID(MACR001I);
         RETURN;
         END;
 PARM#=PARM#+1;
 ? OPEN NAME;
         DO I=1 TO 15;
 ?       GET NAME;
         IF NAME='' THEN LEAVE;
         NAMES(PARM#,I)=NAME;
         NAME#(PARM#)=I;
         END;
 DEFAULTS(PARM#)=DEFAULT;
 IF ALIAS='' THEN
         ALIASES(PARM#)=NAMES(PARM#,1);
 ELSE
         ALIASES(PARM#)=ALIAS;
 SUBSCR(PARM#)=SUBSCRIPT;
  PREP(PARM#)=PREPOSITION;
 POSIT(PARM#)=POSITIONAL;
  VLIST(PARM#)=LIST;
 VFIXED(PARM#)=FIXED;
 VBIT(PARM#)=BIT;
 SUBF(PARM#)=SUBFIELD;
 ENDS(PARM#)=ENDSCAN;
 GEND(PARM#)=GENERATED;
 REQ(PARM#)=REQUIRED;
 IF POSITIONAL & (ANYKEY × (REQUIRED & ANYOPT)) THEN
 ?   NOTE 12 "PARAMETER OUT OF ORDER" ID(MACR002I);
 IF ^POSITIONAL THEN ANYKEY='1'B;
   ELSE IF ^REQUIRED THEN ANYOPT='1'B;
 IF I>2 & POSITIONAL THEN
 ?  NOTE 4 "EXTRA NAMES FOR POSITIONAL PARAMETER IGNORED" ID(MACR003I);
 IF DEFAULT^='' & REQUIRED THEN
    CALL CONFLICT('DEFAULT','REQUIRED');
 IF BIT &
         (POSITIONAL×LIST×PREPOSITION) THEN
    CALL CONFLICT('BIT','OTHER');
 IF SUBSCRIPT^='' & ^POSITIONAL
         THEN
              CALL RQRPOSIT('SUBSCRIPT');
 IF REQUIRED & ^POSITIONAL
         THEN
              CALL RQRPOSIT('REQUIRED');
 IF SUBFIELD & (POSITIONAL × BIT × PREPOSITION) THEN
              CALL CONFLICT('SUBFIELD','OTHER');
 IF PREPOSITION & LIST THEN
    CALL CONFLICT('PREPOSITION','LIST');
 IF ENDSCAN & ^POSITIONAL
         THEN
              CALL RQRPOSIT('ENDSCAN');
 CONFLICT: PROC(FORBIDDEN,BYWHOM);
 DCL (FORBIDDEN,BYWHOM) CHAR(*);
 ?  NOTE 8 "<FORBIDDEN> CONFLICTS WITH <BYWHOM> OPTION" ID(MACR004I);
 END CONFLICT;
 RQRPOSIT: PROC(FORBIDDEN);
 DCL FORBIDDEN CHAR(*);
 ?  NOTE 8 "<FORBIDDEN> REQUIRES POSITIONAL" ID(MACR005I);
 END RQRPOSIT;
 END PARMMAC;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* LABMAC:  LABEL MACRO PROCEDURE                                   */
 /********************************************************************/
 /*      THE LABEL MACRO                                             */
 /*           GATHER THE INFORMATION ABOUT A LABEL PARAMETER         */
 /*           AND PUT IT IN THE MACINFO STRUCTURE.                   */
 /*           THIS INFORMATION WILL BE USED BY THE                   */
 /*           PARSE MACRO TO BUILD DCL CARDS AND OTHER PLI           */
 /*           STATEMENTS.                                            */
 /********************************************************************/
 ? LABMAC: MACRO;
 %INCLUDE MACINFO;
 ? PARAMETER (NAME) POSITIONAL REQUIRED;
 ? PARAMETER (REQUIRED) BIT;
 ? PARSE;
 IF PARM#^=0 THEN DO;
 ? NOTE 12 "LABEL OUT OF ORDER" ID(MACR009I);
   RETURN;
 END;
 LABOK='1'B;
 LABREQ=REQUIRED;
 LABNAME=NAME;
 END LABMAC;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* PARSMAC:  PARSE MACRO PROCEDURE                                  */
 /********************************************************************/
 /*      THE PARSE MACRO                                             */
 /*           USING THE INFORMATION STORED UP ABOUT THE PARAMETERS   */
 /*           BUILD A PARSE INTERFACE BLOCK. THE FIRST PART OF THIS  */
 /*           BLOCK CONTAINS THE KEYWORDS AND ASSOCIATES ALL ALIASES */
 /*           WITH THE PARAMETER NUMBER THEIR VALUE GOES IN.         */
 /*           THE SECOND PART OF THE BLOCK IS AN ARRAY OF STRUCTURES */
 /*           FOR EACH OF THE POSITIONAL AND KEYWORD PARAMETERS. IT  */
 /*           CONTAINS STATUS INFORMATION ABOUT KIND OF PARAMETER,   */
 /*           STORAGE TO HOLD THE CHARACTER STRING VALUE ASSIGNED    */
 /*           BY THE CALLER TO THAT PARAMETER, AND THE EXPLICIT      */
 /*           KEYWORD AMONG THE VALID ALIASES USED TO SPECIFY THE    */
 /*           VALUE.                                                 */
 /*           FOR CHAR VARIABLES, THE PLI VARIABLE NAME IS DECLARED  */
 /*           TO BE DEFINED OVER THE SPECIFIC MEMBER OF THE 'PARMS'  */
 /*           ARRAY WHICH WILL RECEIVE THE VALUE. FOR FIXED AND BIT  */
 /*           PARAMETERS, THE PLI NAME IS DECLARED AS A SEPARATE     */
 /*           SCALAR VARIABLE WHICH WILL BE ASSIGNED A VALUE AFTER   */
 /*           THE PARSE.                                             */
 /*           ONCE THIS BLOCK IS BUILT, PARSE IS CALLED TO ANALYZE   */
 /*           THE MACRO STATEMENT. UPON RETURN, THE PARAMETER        */
 /*           VALUES HAVE BEEN SET INTO THE 'PARMS' ARRAY AS         */
 /*           CHARACTER STRINGS.                                     */
 /*           FOR FIXED AND BIT VARIABLES WHICH ARE NOT OF THE       */
 /*           'LIST' TYPE, IT IS NOW NECESSARY TO EXPAND             */
 /*           ASSIGNMENT STATEMENTS WHICH WILL SET THE SCALAR        */
 /*           PLI VARIABLES TO THEIR PROPER VALUE. LIST VARIABLES    */
 /*           DO NOT HAVE A PROPER VALUE UNTIL OPENED.               */
 /********************************************************************/
 ? PARSMAC: MACRO;
 DCL I FIXED BIN;
 %INCLUDE MACINFO;
 DCL STR(0:40) CHAR(70) VAR INIT('');
 DCL STMT CHAR(1024) VAR;
 DCL PICKER PIC'99';
 DCL KEY# PIC'999' INIT(0);
 DCL KEYWD(200) CHAR(16) VAR;
 DCL KEYPN(200) PIC'99';
 DCL ANYLIST BIT INIT('0'B);
 ? PARAMETER POSITION SUBFIELD DEFAULT(0);
 ? PARAMETER SPECIAL BIT;
 ? PARSE;
 DO I=1 TO PARM#;
         IF ^POSIT(I) THEN
              DO J=1 TO NAME#(I);
              KEY#=KEY#+1;
              KEYWD(KEY#)=NAMES(I,J);
              KEYPN(KEY#)=I;
              END;
 END;
 IF KEY#=0
         THEN
              DO;
         KEY#=1;
              KEYWD(1)=' ';
              KEYPN(1)=0;
              END;
 ? PUT " DCL 1 PARMBLOK," ;
 ? PUT "     2 KEYWORDS(<KEY#>),";
 PUT STRING(STMT) EDIT(('''',KEYWD(I),''',' DO I=1 TO KEY#-1),
         '''',KEYWD(KEY#),'''),') (A);
 ? PUT "         3 PARMN CHAR(16) VAR INIT(<STMT>"  ;
 PUT STRING(STMT) EDIT((KEYPN(I),',' DO I=1 TO KEY#-1),
         KEYPN(I),'),')(A);
 ? PUT "         3 PNUM FIXED BIN INIT(<STMT>";
 ? PUT "    2 PARAMETERS(0:<PARM#>)," ;
 STMT='';
 PUT STRING(STMT) EDIT((',''',DEFAULTS(I),'''' DO I=1 TO PARM#))(A);
 ? PUT "         3 PARMS CHAR(<MAXLENS>) VAR INIT(''<STMT>),";
  PUT STRING(STMT) EDIT((',''',PREP(I),POSIT(I),ENDS(I),REQ(I)×SUBF(I),
         VBIT(I),VLIST(I),'''B' DO I=1 TO PARM#))(A,6 B(1),A);
 ? PUT "         3 STATUS BIT(8) ALIGNED INIT('0<LABOK>0<LABREQ>00'B<STM
 T>),";
         DO I=1 TO PARM#;
         IF SUBSCR(I)='' THEN
              STR(I)='0';
         ELSE
 SUBSCAN:
              DO;
                   DO J=1 TO PARM#;
                   IF ALIASES(J)=SUBSCR(I) THEN
                        DO;
                        PICKER=J;
                        STR(I)=PICKER;
                        LEAVE SUBSCAN;
                        END;
                   END;
 ?            NOTE 8 "SUBSCRIPT VAR NOT FOUND FOR <ALIASES(I)>"
                     ID(MACR006I);
              END;
         END;
 PUT STRING(STMT) EDIT((',',STR(I) DO I=1 TO PARM#))(A);
 ? PUT "         3 SUBS FIXED BIN INIT(0<STMT>)," ;
 ? PUT "         3 NAMEUSED CHAR(16) VAR;" ;
 IF LABOK THEN
 ? PUT " DCL <LABNAME> CHAR(<MAXLENS>) VAR DEF(PARMS(0));";
 DO I=1 TO PARM#;
 PICKER=I;
          SELECT;
              WHEN (VFIXED(I))
 ?                PUT " DCL <ALIASES(I)> FIXED BIN;";
              WHEN (VLIST(I)) DO;
 ?                PUT " DCL <ALIASES(I)> CHAR(<MAXLENS>) VAR;";
                  ANYLIST='1'B;
                  END;
              WHEN (VBIT(I))
                  DO J=1 TO NAME#(I);
 ?                PUT " DCL <NAMES(I,J)> BIT;";
                  END;
              OTHERWISE
 ?PUT " DCL <ALIASES(I)> CHAR(<MAXLENS>) VAR DEF(PARMS(<PICKER>));";
          END;
 END;
 IF ANYLIST THEN
         DO;
 ?       PUT " DCL NEXTWORD CHAR(<MAXLENS>) VAR;"                   ;
 ?       PUT " DCL POSITION FIXED BIN;"                             ;
 ?       PUT " DCL ENDLIST BIT ALIGNED;";
         END;
 ? PUT " CALL PARSE(STRING,PARMBLOK,<POSITION>,'<SPECIAL>'B);";
 DO I=1 TO PARM#;
 PICKER=I;
 IF ^VLIST(I) & VFIXED(I) THEN
 ?       PUT " <ALIASES(I)>=NUMBER(PARMS(<PICKER>),'<NAMES(I,1)>');";
 IF VBIT(I) THEN
              DO J=1 TO NAME#(I);
 ?            PUT " <NAMES(I,J)>=NAMEUSED(<PICKER>)='<NAMES(I,J)>';";
              END;
 END;
 END PARSMAC;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* OPENMAC:  OPEN MACRO PROCEDURE                                   */
 /********************************************************************/
 /*      THE OPEN MACRO                                              */
 /*           PREPARE FOR ACCESS TO A LIST OF VALUES BY RESETTING    */
 /*           THE SCAN POINTER TO THE FIRST CHARACTER POSITION IN    */
 /*           THE STRING.                                            */
 /********************************************************************/
 ? OPENMAC: MACRO;
 ? PARAMETER PNAMES POSITIONAL REQUIRED                             ;
 ? PARSE                                                            ;
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 DO I=1 TO PARM#;
 IF PNAMES=ALIASES(I) THEN GO TO MATCH;
 END;
 ? NOTE 12 "UNRECOGNIZED PARM NAME <PNAMES>" ID(MACR007I);
 RETURN;
 MATCH:
 IF ^VLIST(I) THEN
         DO;
 ?       NOTE 12 "PARAMETER IS NOT LIST TYPE" ID(MACR008I)          ;
         RETURN;
         END;
 ? PUT " POSITION=0;"                                               ;
 END;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* GETMAC: GET MACRO PROCEDURE                                      */
 /********************************************************************/
 /*      THE GET MACRO                                               */
 /*           CALL GETWORD TO OBTAIN THE NEXT ITEM IN A              */
 /*           LIST OF VALUES. IF THE VARIABLE IN QUESTION            */
 /*           IS FIXED, CONVERT THE CHARACTER STRING TO              */
 /*           A NUMBER.                                              */
 /********************************************************************/
 ? GETMAC: MACRO                                                    ;
 ? PARAMETER PNAMES POSITIONAL REQUIRED                             ;
 ? PARSE;
 %INCLUDE MACINFO;
 DCL I FIXED BIN;
 DCL P PIC'99';
 DCL GE CHAR(2) INIT('>=') STATIC;
 DO I=1 TO PARM#;
 IF PNAMES=ALIASES(I) THEN GO TO MATCH;
 END;
 ? NOTE 12 "UNRECOGNIZED PARM NAME <PNAMES>" ID(MACR007I);
 RETURN;
 MATCH:
 P=I;
 IF ^VLIST(I) THEN
         DO;
 ?       NOTE 12 "PARAMETER IS NOT LIST TYPE" ID(MACR008I)          ;
         RETURN;
         END;
 ? PUT " NEXTWORD=GETLIST(PARMS(<P>),POSITION);"            ;
 ? PUT " ENDLIST=POSITION<GE>LENGTH(PARMS(<P>));";
 IF VFIXED(I) THEN
 ?       PUT " <ALIASES(I)>=NUMBER(NEXTWORD,'<ALIASES(I)>');"       ;
 ELSE
 ?       PUT " <ALIASES(I)>=NEXTWORD;"                              ;
 END;
* PROCESS INCLUDE,MARGINS(2,72);
 /* GRAMMAR:  THE GRAMMAR ENTRY POINT CREATION MACRO                 */
 /********************************************************************/
 /*      THE GRAMMAR MACRO                                           */
 /*           CREATE A GRAMMAR ENTRY POINT PROCEDURE.                */
 /*           FOR EACH MACRO NAME IN THE LIST, CALL MACADD           */
 /*      TO DEFINE THE MACRO TO G3P0                                 */
 /********************************************************************/
 ? GRAMMAR:MACRO;
 ? PARAMETER MACROS POSITIONAL LIST                                 ;
 ? PARSE;
 ? OPEN MACROS                                                      ;
 ? GET MACROS                                                       ;
 ? PUT " <PARMS(0)>: GRAMEP: PROC(GPPPTCA);"                        ;
 ? PUT " %NOPRINT;"                                                 ;
 ? PUT " DCL 1 GPPPTCA CONNECTED,"                                  ;
 ? PUT " %INCLUDE GPPPTCA;"                                         ;
 ? PUT " %PRINT;"                                                   ;
 DO WHILE(MACROS^='');
 ? PUT " DCL <MACROS> ENTRY;"                                       ;
 ? PUT " CALL MACADD('<MACROS>',<MACROS>);"                         ;
 ? GET MACROS                                                       ;
 END;
 END GRAMMAR;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* DEFMAC: THE DEFMAC MACRO PROCEDURE                               */
 /********************************************************************/
 /*      THE DEFMAC MACRO                                            */
 /*         GENERATES A CALL TO MACADD FOR EACH MACRO NAME SPECIFIED */
 /********************************************************************/
 ? DEFMAC:MACRO;
 ? PARAMETER MACROS POSITIONAL LIST REQUIRED;
 ? PARAMETER ENTRY DEFAULT(*) SUBFIELD;
 ? PARSE;
 ? OPEN MACROS;
 ? GET MACROS;
 DO UNTIL(MACROS='');
    IF ENTRY='*' THEN DO;
 ?     PUT " DCL <MACROS> ENTRY;";
 ?     PUT " CALL MACADD('<MACROS>',<MACROS>);";
    END;
       ELSE DO;
 ?        PUT "DCL <ENTRY> ENTRY;";
 ?        PUT "CALL MACADD('<MACROS>',<ENTRY>);";
    END;
 ?  GET MACROS;
 END;
 END DEFMAC;
* PROCESS INCLUDE,MARGINS(2,72);
 /* PUT: THE PUT MACRO PROCEDURES                           */
 /********************************************************************/
 /*      THE PUT MACRO                                               */
 /*           GENERATES AN OUTPUT STATEMENT                          */
 /*           USES THE EXPAND FACILITY OF G3P0 TO EXPAND SHORTHAND   */
 /*           STRING EXPRESSIONS.                                    */
 /********************************************************************/
 ? PUT: MACRO (1024);
 ? PARAMETER TEXT POSITIONAL REQUIRED                                ;
 ? PARAMETER FILE SUBFIELD;                                         ;
 ? PARSE;
 DCL (I,J) FIXED BIN;
 DCL OUTSTRING CHAR(1536) VAR;
 OUTSTRING=EXPAND(TEXT);
         IF (FILE='') THEN
 ?            PUT "CALL GEN (<OUTSTRING>);"           ;
         ELSE
              DO;
 ?            PUT "AUTOFILE=<FILE>;"                                ;
 ?            PUT "GENAUTO='1'B;"                                   ;
 ?            PUT "CALL GEN (<OUTSTRING>);"           ;
 ?            PUT "AUTOFILE=SYSUT3F;"                               ;
 ?            PUT "GENAUTO='0'B;"                                   ;
              END;
 END PUT;
*PROCESS INCLUDE,MARGINS(2,72),CS(60);
 /* NOTEMAC: THE NOTE MACRO PROCEDURE                               */
 /*******************************************************************/
 /*      THE NOTE MACRO                                             */
 /*          GENERATES A DIAGNOSTIC NOTE USING THE GPPP NOTE ENTRY  */
 /*          POINT. THE GPPP EXPAND PROCEDURE IS USED TO EXPAND THE */
 /*          MESSAGE TEXT FROM A SHORTHAND FORM.                    */
 /*******************************************************************/
 ? NOTEMAC: MACRO(1024);
 ? PARAMETER CODE FIXED REQUIRED POSITIONAL;
 ? PARAMETER TEXT POSITIONAL REQUIRED;
 ? PARAMETER ID DEFAULT(****NOTE) SUBFIELD;
 ? PARSE;
 DCL OUTSTRING CHAR(1536) VAR;
 OUTSTRING=EXPAND(TEXT);
 ? PUT "CALL NOTE(<IMAGE(CODE)>,<OUTSTRING>,'<ID>');";
 END NOTEMAC;
