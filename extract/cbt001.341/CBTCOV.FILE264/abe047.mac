 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* 1        2    3        4     5     6      7     8      9         */
 /* ABE047 - SETL,$SETQUOT,$INCR,$DECR,$XLATE,$SETD,$GETMK,SYMC,     */
 /*                10       11    12    13     14    15    16        */
 /*                SETQUOT, INCR, DECR, XLATE, SETD, GETMK,GETDSN,   */
 /*                17      18     19       20      21      22        */
 /*                GETMEM, NUMCK, GETNAME, GETVOL, GETDDN, SETLZF    */
   %INCLUDE ABESUB;
 ABESUB(ABE047) PARS(0000000000000000) CHECK(YES);
   %INCLUDE ABESUBA;
   % INCLUDE JFCB;

   DCL SYSJFCB ENTRY(CHAR(8),PTR);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));

   DCL KEYTABLE(5) CHAR(80) VAR STATIC
     INIT('ALL','PERIOD','LEFT','RIGHT','CHAR');
   DCL (OPER,NUM) CHAR(80) VAR;
   DCL INDX FIXED BIN(15,0);
   DCL JFCBCOR CHAR(176);
   DCL (ALLSW,PERIODSW,LEFTSW,RIGHTSW,CHARSW) BIT(1) INIT('0'B);
   DCL GBLSW BIT(1) STATIC INIT('0'B);
   DCL SYMBOLPM CHAR(8);
   DCL (MYCMD,ANSWER) CHAR(240) VAR;
   DCL SETTXT CHAR(100) VAR;
   DCL HELPSTR CHAR(4) VAR INIT('');
   DCL (TXT,SAVTXT) CHAR(256) VAR;
   DCL 1 REPBUF,
     2 BUFLEN FIXED BIN(15,0),
     2 OFFSET FIXED BIN(15,0),
     2 BF CHAR(256);
   DCL SETCAPS ENTRY;
   DCL (P,Q,TRH,TR,DDNPTR) PTR;
   DCL TREEFL DEC FLOAT(16);
   DCL 1 TREESTR BASED(ADDR(TREEFL)),
     2 TREEP PTR,
     2 TREED CHAR(4);

   RHRC=0;
   SELECT(CMDINDX);
     WHEN(2) DO; /* SETL */
       CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       SELECT;
         WHEN(PARY(3)='') SETTXT=PARY(2);
         WHEN(PARY(4)='') SETTXT=SUBSTR(PARY(2),PARY(3));
         OTHERWISE        SETTXT=SUBSTR(PARY(2),PARY(3),PARY(4));
         END; /* SELECT */
       IF PARY(5)=''
         THEN CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
         ELSE DO; /* HE WANTS TO USE AN ALTERNATE TREE */
           CALL SETCAPS(PARY(5));
           TREEFL=#SYMA(RHHDRPT,RH_SYMTREE,PARY(5));
           IF TREEFL=0
             THEN TREEP=NULL;
           CALL #SETC(RHHDRPT,TREEP,SYMBOLPM,SETTXT);
           CALL #SETA(RHHDRPT,RH_SYMTREE,PARY(5),TREEFL);
           END;
       END;
     WHEN(3,10) DO; /* $SETQUOT,SETQUOT */
       IF PARY(2)=''
         THEN PARY(2)='ANSWER';
       CALL SETCAPS(PARY(2));
       BUFLEN = MIN(260,LENGTH(PARY(2))+5);
       OFFSET = 0;
       BF='&'××PARY(2);
       CALL #REP(RHHDRPT,RH_SYMTREE,REPBUF);
       MYCMD = SUBSTR(BF,1,BUFLEN-4);
       DO I = 0 REPEAT J+1 UNTIL(J=I);
         J=INDEX(SUBSTR(MYCMD,I+1),'''')+I;
         IF J>I
           THEN MYCMD=SUBSTR(MYCMD,1,J-1)××''''××
             SUBSTR(MYCMD,J);
         END;
       MYCMD=''''××MYCMD××'''';
       SETTXT=MYCMD;
       CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(4,5,11,12) DO; /* $INCR,$DECR,INCR,DECR */
       IF PARY(2)=''
         THEN K = 1;
         ELSE K = PARY(2);
       CALL SETCAPS(PARY(1));
       BUFLEN = MIN(260,LENGTH(PARY(1))+5);
       OFFSET = 0;
       SYMBOLPM=PARY(1);
       BF='&'××PARY(1);
       CALL #REP(RHHDRPT,RH_SYMTREE,REPBUF);
       TXT = SUBSTR(BF,1,BUFLEN-4);
       IF TXT=''
         THEN I = 0;
         ELSE I = TXT;
       IF CMDINDX=4 × CMDINDX=11
         THEN I = I + K; /* INCR */
         ELSE I = I - K; /* DECR */
       CALL #SETA(RHHDRPT,RH_SYMTREE,SYMBOLPM,I);
       END;
     WHEN(6,13) DO;  /* $XLATE,XLATE */
       CALL SETCAPS(PARY(1)); /* NAME IN UPPER CASE */
       BUFLEN=MIN(260,LENGTH(PARY(1))+5);
       OFFSET=0;
       SYMBOLPM=PARY(1);
       BF='&'××PARY(1);
       CALL #REP(RHHDRPT,RH_SYMTREE,REPBUF);
       SETTXT=SUBSTR(BF,1,BUFLEN-4);
       CALL SETCAPS(SETTXT); /* TEXT IN UPPER CASE */
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(7,14) DO; /* $SETD,SETD */
       /*      1          2        3     4     5
       /* SETD <VARIABLE> <LINENO> <OFF> <LEN> <NAME> */
       IF PARY(5)=''
         THEN TRH=RHPTR;
         ELSE DO;
           CALL SETCAPS(PARY(5));
           DO TRH=NXTRHEL REPEAT TRH->RHNXT
             WHILE(TRH^=NULL) UNTIL(TRH->RHNAME=PARY(5));
             END;
           END;
       IF TRH=NULL
         THEN DO;
           PUT SKIP LIST('ERROR IN $SETD, NO DATA SET FOUND');
           SIGNAL ERROR;
           END;
       IF PARY(2)='*' × PARY(2)=''
         THEN I=TRH->RECSEQ;
         ELSE I=PARY(2);
       IF I=TRH->RECSEQ
         THEN TR=TRH->RECPTR;
         ELSE DO TR=TRH->NXTHDR REPEAT TR->NXTPTR
           WHILE(TR^=TRH) UNTIL(TR->RECSEQ=I);
           END;
       IF TR=TRH
         THEN DO;
           PUT SKIP LIST('ERROR IN $SETD - LINE NOT FOUND');
           SIGNAL ERROR;
           END;
       IF PARY(3)=''
         THEN OFF=1;
         ELSE OFF=PARY(3);
       IF PARY(4)=''
         THEN LEN=SUFFIX(TR->RECSTR,' ');
         ELSE LEN=PARY(4);
       IF OFF+LEN-1 <= LENGTH(TR->RECSTR)
         THEN ILEN=LEN;
         ELSE IF OFF > LENGTH(TR->RECSTR)
           THEN OFF,ILEN=0;
           ELSE ILEN=LENGTH(TR->RECSTR)-OFF+1;
       SETTXT=SUBSTR(TR->RECSTR,OFF,MIN(100,ILEN));
       CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(8,15) DO; /* GETMK <NUMBER> <LABEL> <NAME> */
       IF PARY(3)=''
         THEN TRH=RHPTR;
         ELSE DO;
           CALL SETCAPS(PARY(3));
           DO TRH=NXTRHEL REPEAT TRH->RHNXT
             WHILE(TRH^=NULL) UNTIL(TRH->RHNAME=PARY(3));
             END;
           END;
       IF TRH=NULL
         THEN DO;
           PUT SKIP LIST('ERROR IN $GETMK, NAME NOT FOUND');
           SIGNAL ERROR;
           END;
       I=TRH->MARKARY(PARY(1));
       CALL SETCAPS(PARY(2));
       SYMBOLPM=PARY(2);
       CALL #SETA(RHHDRPT,RH_SYMTREE,SYMBOLPM,I);
       END;
     WHEN(9) DO; /* SYMC <NAME> <POOL> */
       CALL SETCAPS(PARY(1));
       IF PARY(2)=''
         THEN MSGDATA=#SYMC(RHHDRPT,RH_SYMTREE,PARY(1));
         ELSE DO;
           CALL SETCAPS(PARY(2));
           TREEFL=#SYMA(RHHDRPT,RH_SYMTREE,PARY(2));
           IF TREEFL=0
             THEN TREEP=NULL;
           MSGDATA=#SYMC(RHHDRPT,TREEP,PARY(1));
           END;
       END;
     WHEN(16) DO; /* GETDSN */
       IF PARY(1)=''
         THEN PARY(1)='SYSDSN';
         ELSE CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       IF OUTDDN=NULL
         THEN SETTXT='';
         ELSE SETTXT=OUTDDN->ALCDSN;
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(17) DO; /* GETMEM */
       IF PARY(1)=''
         THEN PARY(1)='SYSMEM';
         ELSE CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       IF OUTDDN=NULL
         THEN SETTXT='';
         ELSE SETTXT=OUTDDN->ALCMEM;
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(18) DO; /* NUMCK */
       CALL SETCAPS(PARY(1));
       NUM=#SYMC(RHHDRPT,RH_SYMTREE,PARY(1));
       IF NUM=''
         THEN DO;
           MSGDATA=PARY(1)××' IS EMPTY';
           RHRC=4; /* FLAG AS NOT OK IF EMPTY */
           RETURN;
           END;
       DO I = 2 TO HBOUND(PARY,1) WHILE(PARY(I)^='');
         CALL SETCAPS(PARY(I));
         CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
         SELECT(INDX);
           WHEN(0) DO;
             MSGDATA='INVALID KEYWORD = '××PARY(I);
             RHRC=8;
             RETURN;
             END;
           WHEN(1) ALLSW='1'B;
           WHEN(2) PERIODSW='1'B;
           WHEN(3) LEFTSW='1'B;
           WHEN(4) RIGHTSW='1'B;
           WHEN(5) CHARSW='1'B;
           OTHERWISE; /* TO GET RID OF COMPILER MESSAGE */
           END; /* SELECT */
         END;
       IF (LEFTSW & RIGHTSW) × (ALLSW & (LEFTSW × RIGHTSW))
         THEN DO;
           MSGDATA='USE ONLY ONE OF THE KEYWORDS ALL, LEFT, RIGHT';
           RHRC=8;
           RETURN;
           END;
       IF PERIODSW & INDEX(NUM,'.')^=0
         THEN SUBSTR(NUM,INDEX(NUM,'.'))='0';
       IF LEFTSW & SUBSTR(NUM,1,1)=' '
         THEN DO;
           MSGDATA=PARY(1)××' IS NOT LEFT JUSTIFIED';
           RHRC=4;
           RETURN;
           END;
       IF RIGHTSW & SUBSTR(NUM,LENGTH(NUM),1)=' '
         THEN DO;
           MSGDATA=PARY(1)××' IS NOT RIGHT JUSTIFIED';
           RHRC=4;
           RETURN;
           END;
       IF ^CHARSW
         THEN DO;
           IF ALLSW
             THEN DO;
               I=VERIFY(NUM,'0123456789');
               IF I^=0
                 THEN DO;
                   MSGDATA=PARY(1)××' IS NOT ALL NUMERIC - FIRST BAD CHA
 R='''××SUBSTR(NUM,I,1)××'''';
                   RHRC=4;
                   END;
               END;
             ELSE DO;
               NUM=SUBSTR(NUM,PREFIX(NUM,' '));
               NUM=SUBSTR(NUM,1,SUFFIX(NUM,' '));
               I=VERIFY(NUM,'0123456789');
               IF I^=0
                 THEN DO;
                   MSGDATA=PARY(1)××' CONTAINS BAD DATA - FIRST BAD CHAR
 ='''××SUBSTR(NUM,I,1)××'''';
                   RHRC=4;
                   END;
               END;
           END;
       IF RHRC=0
         THEN MSGDATA='OK';
       RETURN;
       END;
     WHEN(19) DO; /* GETNAME */
       IF PARY(1)=''
         THEN PARY(1)='SYSSYMB';
         ELSE CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       SETTXT=RHNAME;
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       END;
     WHEN(20) DO; /* GETVOL */
       IF PARY(1)=''
         THEN PARY(1)='SYSVOL';
         ELSE CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       DDNPTR=INDDN;
       IF DDNPTR=NULL
         THEN DDNPTR=OUTDDN;
       IF DDNPTR=NULL
         THEN SETTXT='?';
         ELSE DO;
           JFCBPTR=ADDR(JFCBCOR);
           CALL SYSJFCB(DDNPTR->ALCDDN,JFCBPTR);
           SETTXT=JFCBVOLS(1);
           END;
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       MSGDATA=SETTXT;
       END;
     WHEN(21) DO; /* GETDDN */
       IF PARY(1)=''
         THEN PARY(1)='SYSDDN';
         ELSE CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       DDNPTR=INDDN;
       IF DDNPTR=NULL
         THEN DDNPTR=OUTDDN;
       IF DDNPTR=NULL
         THEN SETTXT='';
         ELSE SETTXT=DDNPTR->ALCDDN;
       CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
       MSGDATA=SETTXT;
       END;
     WHEN(22) DO; /* SETLZF */
       IF PARY(1)=''
         THEN DO;
           MSGDATA='FIRST OPERAND, THE SYMBOL NAME, IS REQUIRED';
           RHRC=8;
           RETURN;
           END;
       CALL SETCAPS(PARY(1));
       SYMBOLPM=PARY(1);
       IF PARY(2)=''
         THEN I=5;
         ELSE I=PARY(2);
       SETTXT=#SYMC(RHHDRPT,RH_SYMTREE,SYMBOLPM); /* GET VALUE */
       IF LENGTH(SETTXT)<I & INDEX(SETTXT,'-')=0
         THEN DO;
           SETTXT=SUBSTR(REPEAT('0',I-1),
             1,I-LENGTH(SETTXT))××SETTXT;
           CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
           END;
       END;
     END; /* END SELECT */
   END ABE047;
