 PERFBIG:  PROC(PARM) OPTIONS(MAIN);
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         % GOTO DCL;
 % HOUSEK:;
 /* HOUSEKEEPING */
         IF INDEX(PARM,'SORTED') = 0
              THEN SORTSW = '0'B;
              ELSE SORTSW = '1'B;
         DO I = 0 TO 255;
              TYPEHDR(I) = NULL;
              END;
         DBHDR,DBHDREND = NULL;
         ON UNDF(DBFILE) DBSW = '0'B;
         OPEN FILE(DBFILE) RECORD OUTPUT;
         DO MEMNAME = GETDIR('PERFLIB') REPEAT GETDIR('PERFLIB')
           WHILE(MEMNAME < 'PERF999');
              I = SUFFIX(MEMNAME,' ');
              IF I > 0
                   THEN MEMNAME = SUBSTR(MEMNAME,1,I);
              IF LENGTH(MEMNAME) > 4
                   THEN IF SUBSTR(MEMNAME,1,4) = 'PERF'
                        THEN IF VERIFY(SUBSTR(MEMNAME,5),
                          '0123456789')=0
                             THEN DO;
                                  I = SUBSTR(MEMNAME,5);
                                  IF I > @SUBCNT
                                       THEN DO;
                                            PUT EDIT(MEMNAME,
                                              ' EXCEEDS CAPACITY')
                                              (A,A) SKIP(1);
                                            SIGNAL ERROR;
                                            END;
                                  SMFPTR = ADDR(START);
                                  CALL CALLSUB(I);
                                  CALL TPROC(@TYP,I);
                                  CALL PPROC(@PTR);
                                  IF I > SUBHI
                                       THEN SUBHI = I;
                                  SUBCK(I) = '1'B;
                                  END;
              END;
 /* THE FOLLOWING DO-BLOCK SOSRTS THE LIST OF 24-HOUR ARRAY ELEMENTS
    INTO SEQUENCE BY INDX. */
         DO UNTIL(SEQSW);
              LSTPTR = NULL;
              SEQSW = '1'B;
              DO CURPTR=DBHDR REPEAT CURPTR->DBNXT WHILE(CURPTR^=NULL);
                   IF CURPTR->DBNXT ^= NULL
                        THEN IF CURPTR->INDX > CURPTR->DBNXT->INDX
                             THEN DO;
                                  SEQSW = '0'B;
                                  NXTPTR = CURPTR->DBNXT;
                                  IF LSTPTR = NULL
                                       THEN DBHDR = NXTPTR;
                                       ELSE LSTPTR->DBNXT = NXTPTR;
                                  CURPTR->DBNXT = NXTPTR->DBNXT;
                                  NXTPTR->DBNXT = CURPTR;
                                  CURPTR = NXTPTR;
                                  END;
                   LSTPTR = CURPTR;
                   END;
              END;
 /* MAIN LOOP */
         ON ENDFILE(SMFDATA) GO TO EOJ;
         DO FOREVER=1 REPEAT FOREVER;
              SMFPTR = ADDR(SMFREC);
              SMFADJ = SMFADJ + 2;
              INVSW = '0'B;
              READ FILE(SMFDATA) INTO(SMFREC);
              IF SORTSW
                   THEN IF WRITDTE ^= DTECTL
                        THEN DO;
                             IF DTECTL ^= -1
                                  THEN CALL EOJSUB;
                             DTECTL = WRITDTE;
                             END;
              I = TYPE;
              DO TPTR = TYPEHDR(I) REPEAT TNXT WHILE(TPTR ^= NULL);
                   CALL CALLSUB(TNUM);
                   END;
              END;
 EOJ:
         IF ^SORTSW
              THEN DO;
                   GRDTE = DATE;
                   GRDTE = SUBSTR(GRDTE,3,4)××SUBSTR(GRDTE,1,2);
                   DTECTL = GREGJUL(GRDTE);
                   DTECTL = DATEOFF(DTECTL,-1);
                   END;
         IF DTECTL ^= -1
              THEN CALL EOJSUB;
 EOJSUB:  PROC;
         DCL (I,J) FIXED BIN(15,0);
         DCL EOJPTR PTR;
         SMFPTR = ADDR(STOP);
         DO I = 1 TO SUBHI;
              IF SUBCK(I)
                   THEN CALL CALLSUB(I);
              END;
         SMFPTR = ADDR(SMFREC);
         SMFADJ = SMFADJ + 2;
         DO PPTR = DBHDR REPEAT DBNXT WHILE(PPTR ^= NULL);
              IF PROTYPE = 'AVE'
                   THEN DO J = 0 TO 23;
                        ARRAY(J) = ARRAY(J)/60;
                        END;
              DBDTE = DTECTL;
              IF INDEX(PARM,'PRINT') ^= 0
                   THEN DO;
                        EOJPTR = PPTR;
                        CALL PRNTARY(EOJPTR);
                        END;
              IF DBSW
                   THEN WRITE FILE(DBFILE) FROM(DBREC);
              ARRAY(*) = 0;
              END;
         END EOJSUB;
 PRNTARY:  PROC(PRMPTR);
         DCL PRMPTR PTR;
         DCL AST CHAR(101) STATIC INIT((101)'*');
         DCL (I,J,K,D) FIXED BIN(31,0);
         PPTR = PRMPTR;
         PUT EDIT(HDR,' DATE = ',DBDTE)(A,X(10),A,P'ZZ99999') PAGE;
         D = DIM(ARRAY,1)-1;
         J = 0;
         DO I = 0 TO D;
              IF ARRAY(I) > J
                   THEN J = ARRAY(I);
              END;
         K = J/100;
         IF J=0 × MOD(J,100)^=0
              THEN K = K + 1;
         DO I = 0 TO D;
              PUT EDIT(I,SUBSTR(AST,1,ARRAY(I)/K),ARRAY(I))
                (X(2),P'Z9',X(1),A,P'ZZZ,ZZZ,ZZZ') SKIP(1);
              END;
         END PRNTARY;
 SETARY:  PROC(PRMPTR,D,B,C);
         DCL PRMPTR PTR,
                   /* POINTS TO DBREC */
             D FIXED BIN(31,0),
                   /* ITEM TO PRORATE */
             B FIXED BIN(31,0),
                   /* STARTING TIME FOR THE CURRENT
                      INTERVAL (1 = .01 SEC). */
             C FIXED BIN(31,0);
                   /* LENGTH OF THE CURRENT INTERVAL.
                      THIS PARAMETER IS IGNORED IF
                      PROTYPE='COU'. (1 = .01 SEC). */
         DCL (WRKD,WRKG,WRKH) FIXED BIN(31,0);
         DCL (WRKE,WRKF,WRKI,WRKJ) BIN FLOAT(53);
         DCL I FIXED BIN(31,0);
         PPTR = PRMPTR;
         IF B = -1
              THEN DO; /* USE DEFAULT */
                   IF ^INVSW
                        THEN DO;
                             I = TYPE;
                             IF I >= 70 & I <= 79 /* RMF? */
                                  THEN CALL RMFINV;
                                  ELSE CALL REGINV;
                             INVSW = '1'B;
                             END;
                   WRKD = INVTME; /* SET INTERVAL START TIME */
                   WRKE = INVLEN; /* SET INTERVAL LENGTH */
                   END;
              ELSE DO; /* USE USER-SUPPLIED VALUES */
                   WRKD = B; /* SET INTERVAL START TIME */
                   WRKE = C; /* SET INTERVAL LENGTH */
                   END;
         WRKG = WRKD/360000; /* INTEGRAL HOUR CONTAINING START TIME */
         /* WRKD = START TIME */
         /* WRKE = ELAPSED TIME */
         /* WRKF = ITEM TO PRORATE */
         /* WRKG = INTEGRAL HOUR CONTAINING START TIME */
         IF PROTYPE = 'COU'
              THEN ARRAY(WRKG) = ARRAY(WRKG) + D;
              ELSE DO;
                   WRKF = D; /* ITEM TO PRORATE */
                   DO WHILE(WRKE ^= 0);
                        WRKH = WRKG;
                        WRKH = WRKH*360000 + 360000;
                             /* WRKH = END 1ST INTEGRAL HOUR */
                        WRKI = WRKH - WRKD;
                        IF WRKI > WRKE
                             THEN WRKI = WRKE;
                             /* WRKI = PORTION EXECUTION IN THIS HOUR */
                        IF PROTYPE = 'AVE'
                             THEN WRKJ = WRKF*(WRKI/6000);
                                  /* ADD TO ARRAY THE AVG * # MIN
                                     AT THAT AVG.  AT END, ARRAY WILL
                                     BE DIVIDED BY 60. */
                             ELSE WRKJ = WRKF*(WRKI/WRKE);
                                  /* ADD PORTION TO THIS HOUR */
                        ON FIXEDOVERFLOW ARRAY(WRKG) = MAXVALU;
                        ARRAY(WRKG) = ARRAY(WRKG) + WRKJ;
                        REVERT FIXEDOVERFLOW;
                        WRKE = WRKE - WRKI;
                             /* REDUCE ELAPSED TIME */
                        IF PROTYPE ^= 'AVE'
                             THEN WRKF = WRKF - WRKJ;
                                  /* REDUCE ITEM TO PRORATE */
                        WRKG = WRKG + 1;
                             /* BUMP INTEGRAL HOUR INDEX */
                        IF WRKG = 24
                             THEN WRKG = 0;
                        WRKD = WRKG*360000; /*SET NEW START TIME*/
                        END;
                   END;
         END SETARY;
 RMFINV:  PROC;
         DCL (HH,MM,SS,SSTH) FIXED BIN(31,0);
         HH = SMF72IST/10000;
              /* HH = INTEGRAL HOURS */
         MM = (SMF72IST-(HH*10000))/100;
              /* MM = INTEGRAL MINUTES */
         SS = SMF72IST-(HH*10000)-(MM*100);
              /* SS = SECONDS */
         INVTME = HH*360000 + MM*6000 + SS*100;
              /* INVTME = INTERVAL START TIME */
         MM = SMF72INT/100000;
         SSTH = (SMF72INT-(MM*100000))/10;
         INVLEN = MM*6000 + SSTH;
              /* INVLEN = INTERVAL ELAPSED TIME */
         END RMFINV;
 REGINV:  PROC;
         INVTME = WRITME;
         INVLEN = 1;
         END REGINV;
 TPROC:  PROC(TYPTR,I);
 /* THIS PROCEDURE IS INVOKED ONCE AT HOUSEKEEPING TIME FOR EACH
    PERFDDD MODULE CALLED WITH SMFPTR POINTING AT THE CHARACTER
    STRING 'START'.  THIS PROCEDURE UPDATES THE SMF RECORD TYPE LIST
    (SEE DCL FOR TYPEHDR AND TELEM) TO INDICATE WHICH RECORDS
    EACH PERFDDD MODULE WILL PROCESS. */
         DCL TYPTR PTR;
         DCL 1 @TYPESTR BASED(TYPTR),
                   /* THIS STRUCTURE IS BUILT BY THE @TYPE MACRO
                      IN THE PERFDDD MODULE.  IT INDICATES WHAT
                      TYPES OF SMF RECORDS ARE TO BE PROCESSED. */
              2 @TYPECNT FIXED BIN(15,0),
                   /* COUNT OF ELEMENTS IN THE FOLLOWING ARRAY */
              2 @TYPEARY(L REFER (@TYPECNT)) FIXED BIN(15,0);
                   /* EACH ELEMENT IN THIS ARRAY CONTAINS THE NUMBER
                      CORRESPONDING TO THE SMF RECORD TYPE TO BE PROCESS
                      BY THIS MODULE. */
         DCL (I,J) FIXED;
         DO J = 1 TO @TYPECNT;
              ALLOCATE TELEM SET(TPTR);
              TNXT = TYPEHDR(@TYPEARY(J));
              TNUM = I;
              TYPEHDR(@TYPEARY(J)) = TPTR;
              END;
         END TPROC;
 PPROC:  PROC(PPTR);
 /* THIS PROCEDURE IS INVOKED ONCE AT HOUSEKEEPING TIME FOR EACH
    PERFDDD MODULE CALLED WITH SMFPTR POINTING AT THE
    CHARACTER STRING 'START'.  THIS PROCEDURE UPDATES THE LIST
    OF 24-HOUR ARRAY ELEMENTS CONSTRUCTED BY @PLOT MACROS IN
    PERFDDD MODULES.  */
         DCL PPTR PTR;
         DCL TMPPTR PTR;
         IF DBHDR = NULL
              THEN DBHDR = PPTR;
              ELSE DBHDRNXT->DBNXT = PPTR;
         DO TMPPTR = PPTR REPEAT TMPPTR->DBNXT
           WHILE(TMPPTR->DBNXT ^= NULL);
              END;
         DBHDRNXT = TMPPTR;
         END PPROC;
         DCL PARM CHAR(100) VAR;
         DCL SEQSW BIT(1);
         DCL (CURPTR,LSTPTR,NXTPTR) PTR;
         DCL SORTSW BIT(1) STATIC;
         DCL MAXVALU FIXED BIN(31,0) STATIC INIT(2147483647);
         DCL INVSW BIT(1) STATIC;
         DCL (INVTME,INVLEN) FIXED BIN(31,0);
         DCL START CHAR(5) STATIC INIT('START');
         DCL STOP CHAR(5) STATIC INIT('STOP');
         DCL SUBCK(@SUBCNT) BIT(1) INIT((@SUBCNT)(1)'0'B);
              /* BIT WILL BE SET TO 1 AT HOUSEKEEPING TIME IF
                 CORRESPONDING PERFDDD MODULE IS PRESENT IN PERFLIB */
         DCL SUBHI FIXED BIN(15,0) INIT(0);
              /* WILL BE SET AT HOUSEKEEPING TIME TO HIGHEST
                 PERFDDD MODULE NUMBER PRESENT IN PERFLIB */
         DCL 1 @DBHDR BASED(SMFPTR),
                   /* SMFPTR IS SET TO THE ADDR OF A STRUCTURE HAVING
                      THIS FORMAT BY EACH PERFDDD MODULE WHEN IT IS CALL
                      WITH SMFPTR SET TO POINT AT A CHARACTER STRING
                      CONTAINING 'START'. */
              2 @TYP PTR,
                   /* THIS POINTS AT A STRUCTURE WHICH IS DESCRIBED IN
                      SUBPROCEDURE TPROC ELSEWHERE IN THIS PROGRAM. */
              2 @PTR PTR;
                   /* THIS POINTS AT A LIST WHICH IS DESCRIBED IN
                      SUBPROCEDURE PPROC ELSEWHERE IN THIS PROGRAM. */
         DCL TYPEHDR(0:255) PTR;
              /* THIS ARRAY CONTAINS AN ENTRY FOR EACH POSSIBLE SMF
                 RECORD TYPE.  EACH ENTRY WILL EITHER CONTAIN NULL
                 OR A POINTER TO A STRING OF ELEMENTS DESCRIBED
                 BELOW. */
         DCL 1 TELEM BASED(TPTR),
              2 TNXT PTR,
                   /* POINTER TO NEXT ELEMENT OR NULL */
              2 TNUM FIXED BIN(15,0);
                   /* NUMBER OF A PERFDDD MODULE WHICH
                      REQUIRES THIS TYPE OF SMF RECORD
                      BE PASSED TO IT. */
         DCL DBHDR PTR;
              /* THIS IS THE HEAD OF A LIST OF DATABASE RECORDS
                 (ALSO MIGHT BE CALLED 24-HOUR ARRAY RECORDS)
                 BUILT BY @PLOT MACROS ISSUED IN PERFDDD
                 MODULES. */
         DCL DBHDREND PTR;
              /* THE ADDRESS OF THE LAST RECORD ON THE
                 CHAIN IS SAVED HERE. */
         DCL 1 DBREC UNALIGNED BASED(PPTR),
              2 ARRAY(0:23) FIXED BIN(31,0),
                   /* 24-HOUR ARRAY
                      1 BUCKET FOR EACH HOUR */
              2 INDX FIXED BIN(15,0),
                   /* NUMBER WHICH UNIQUELY
                      INDENTIFIES THIS STATISTIC */
              2 DBDTE FIXED DEC(5,0),
                   /* DATE */
              2 HDR CHAR(78) VAR;
                   /* DESCRIPTION OF DATA
                      IN THIS RECORD */
         DCL 1 DBRECA UNALIGNED BASED(PPTR),
              2 PAD CHAR(181),
                   /* PAD TO GET BEYOND DATA IN DBREC */
              2 PROTYPE CHAR(3),
                   /* 'AVE' - D IS AN AVERAGE VALUE OVER THE
                              CURRENT INTERVAL.
                      'COU' - D IS A TOTAL COUNT OF ITEMS
                              AT THIS INSTANT IN TIME.  D
                              WILL BE ADDED TO THE BUCKET
                              FOR THE CURRENT INSTANT IN TIME.
                      'PRO' - D IS A TOTAL COUNT OF ITEMS
                              FOR THE CURRENT INTERVAL.  IF
                              THE CURRENT INTERVAL OVERLAPS
                              TWO OR MORE INTEGRAL HOURS, THE
                              COUNT WILL BE PRORATED.  OTHERWISE,
                              THE ENTIRE COUNT WILL BE ADDED
                              TO THE SINGLE BUCKET FOR THE
                              CURRENT INTERVAL. */
              2 DBNXT PTR;
                   /* POINTS TO NXT REC IN LIST OR NULL IF LAST */
         DCL DTECTL FIXED DEC(7,0) STATIC INIT(-1);
         DCL GRDTE CHAR(6);
         DCL GREGJUL ENTRY(CHAR(6))
           RETURNS(FIXED DEC(5,0));
         DCL DATEOFF ENTRY(FIXED DEC(5,0), FIXED BIN(15,0))
           RETURNS(FIXED DEC(5,0));
         DCL DBSW BIT(1) STATIC INIT('1'B);
         DCL (NULL,DATE) BUILTIN;
         DCL GETDIR ENTRY(CHAR(8)) RETURNS(CHAR(8));
         DCL SUFFIX ENTRY(CHAR(*),CHAR(*)) RETURNS(FIXED BIN(15,0));
         DCL MEMNAME CHAR(8) VAR;
         % GOTO ENDDCL;
 % DCL:;
         % INCLUDE @NUMSTR;
         % PRINT;
 /* @SUBCNT IS SET TO THE NUMBER OF PERFDDD ENTRY
    DECLARATIONS THAT WILL BE GENERATED */
         % DCL @SUBCNT FIXED;
         % @SUBCNT = 50;
 /* @SUBDCL WILL CONTAIN THE DECLARES FOR THE PERFDDD SUBROUTINES */
         % DCL @SUBDCL CHAR;
         % @SUBDCL = '';
         % DCL (@SUBNAME,@CALNM) CHAR;
         % DCL @I FIXED;
 CALLSUB:  PROC(I);
         DCL I FIXED BIN(31,0);
         DCL CASE(@SUBCNT) LABEL;
         GO TO CASE(I);
         % DO @I = 1 TO @SUBCNT;
              % @SUBNAME = @NUMSTR(@I);
              % @SUBNAME = 'PERF'××SUBSTR('000',1,3-LENGTH(@SUBNAME))××
                @SUBNAME;
              % @SUBDCL=@SUBDCL××' DCL '××@SUBNAME××' ENTRY; FETCH '××
                @SUBNAME××';';
              % @CALNM = 'CASE('××@NUMSTR(@I)××')';
              @CALNM: CALL @SUBNAME(SMFPTR,SETARY); GO TO ENDCASE;
              % END;
 ENDCASE:
         END CALLSUB;
         GO TO BYSUB;
         @SUBDCL;
 BYSUB:;
         % GOTO HOUSEK;
 % ENDDCL:;
         % INCLUDE SMFRMF;
         % INCLUDE SMFMVS;
         % INCLUDE SMFDEFI;
         END;
