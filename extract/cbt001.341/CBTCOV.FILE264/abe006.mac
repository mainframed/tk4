 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE006 - COLUMN,COL,TRUNCATE,TRUNC,TR,FILL SUBCOMMANDS */
   /* 1        2      3   4        5     6  7                */
   %INCLUDE ABESUB;
 ABESUB(ABE006) PARS(000000) CHECK(YES) PARSEVAL(NO);
   %INCLUDE ABESUBA;
   %INCLUDE ABERHPNL;
   %INCLUDE APLCB;

   DCL MAXLEN ENTRY(CHAR(*) VAR)
     RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL 1 SKEL BASED(SKELPTR),
     2 SKNXT PTR, /* SINGLY-LINKED LIST */
     2 STC FIXED BIN(15,0), /* STARTING COLUMN */
     2 ENC FIXED BIN(15,0); /* ENDING COLUMN */
   DCL SKHD PTR;
   DCL CMDLAB(7) LABEL;
   GO TO CMDLAB(CMDINDX);
 CMDLAB(7): /* FILL */
   J=LINESIZE-RHPMAXLN-2;
   I=PARY(1);
   IF I>J
     THEN DO;
       PUT STRING(MSGDATA) EDIT('FILL VALUE SHORTED TO ',J)(A,P'ZZ9');
       I=J;
       END;
   RHPFILL=I;
   CALL #COLTR(RHHDRPT);
   RHRC=0;
   RETURN;
 CMDLAB(1): /* ABE006 */
 CMDLAB(2): /* COLUMN */
 CMDLAB(3): /* COL */
   IF PARY(1)^=''
     THEN IF SUBSTR(PARY(1),1,1)='('
       THEN DO;
         SKHD=#SKIP(SUBSTR(PARY(1),2,LENGTH(PARY(1))-2));
         IF SKHD=NULL
           THEN DO;
             MSGDATA='INVALID OPERAND';
             RHRC=8;
             RETURN;
             END;
         DO SKELPTR=RHPSKHD REPEAT RHPSKHD WHILE(RHPSKHD^=NULL);
           RHPSKHD=SKNXT;
           FREE SKEL;
           END;
         RHPSKHD=SKHD;
         CALL #COLTR(RHHDRPT);
         RHRC=0;
         RETURN;
         END;
   K=LINESIZE-RHPMAXLN-2;
   IF HEXMODE & RH_DISPLAY_HDR=NULL
     THEN K=K/2;
   MAXL=SET_MAXL;
   IF PARY(1) =''
     THEN NCOL = 1;
     ELSE DO;
       CALL SETCAPS(PARY(1));
       L=MIN(TRUNCATE-COLUMN+1,K);
       SELECT(PARY(1));
         WHEN('L') NCOL=MAX(1,COLUMN-K);
         WHEN('R') NCOL=MIN(MAXL,COLUMN+L);
         OTHERWISE NCOL=PARY(1);
         END;
       END;
   IF NCOL<1
     THEN NCOL=1;
   IF PARY(2) =''
     THEN NTRUNC = MIN(NCOL+K,MAXL+1);
     ELSE NTRUNC = PARY(2);
   GO TO COMMON;
 CMDLAB(4): /* TRUNCATE */
 CMDLAB(5): /* TRUNC */
 CMDLAB(6): /* TR */
   NTRUNC = PARY(1);
   NCOL = COLUMN;
   MAXL=SET_MAXL;
 COMMON:
   IF NCOL>MAXL
     THEN MSGDATA='COLUMN EXCEEDS RECORD LENGTH';
     ELSE IF NTRUNC>(MAXL+1)
       THEN MSGDATA='TRUNCATE EXCEEDS RECORD LENGTH+1';
       ELSE IF NCOL>=NTRUNC
         THEN MSGDATA='COLUMN CANNOT EXCEED OR EQUAL TRUNCATE';
         ELSE IF NTRUNC-NCOL>LINESIZE-RHPMAXLN-2
           THEN MSGDATA='TRUNCATE-COLUMN MORE THAN SCREEN SIZE';
           ELSE DO;
             COLUMN = NCOL;
             TRUNCATE = NTRUNC;
             ALLOCATE SKEL;
             SKNXT=NULL;
             STC=COLUMN;
             ENC=TRUNCATE;
             SKHD=SKELPTR;
             DO SKELPTR=RHPSKHD REPEAT RHPSKHD WHILE(RHPSKHD^=NULL);
               RHPSKHD=SKNXT;
               FREE SKEL;
               END;
             RHPSKHD=SKHD;
             CALL #COLTR(RHHDRPT); /* CALL COLTR */
             END;
   RHRC = 0;
   RETURN;

 SET_MAXL: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE THE MAXIMUM LENGTH TO DISPLAY.                  *
 *                                                                     *
 **********************************************************************/
   DCL MAXL FIXED BIN;

   SELECT;
     WHEN(RHUSEHD^=NULL & RH_DISPLAY_HDR^=NULL)
       MAXL=MAXLEN(BUF); /* THIS ISN'T RIGHT, BUT WILL DO FOR NOW */
     WHEN(RH_APL^=NULL & RH_DISPLAY_HDR^=NULL)
       MAXL=RH_DISPLAY_HDR->RHNLNG*RH_APL_ELCOUNT;
     OTHERWISE MAXL=MAXLEN(BUF);
     END; /* SELECT */
   RETURN(MAXL);
   END SET_MAXL;

   END;
