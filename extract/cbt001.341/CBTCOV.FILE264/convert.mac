 /* CONVERT */
 /*
0*$.HE GENERALIZED SUBROUTINES - CONVERT
0*$.HE CONVERTS FROM ANY DATATYPE TO ANY DATATYPE
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$04/25/83
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  CONVERT
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$CONVERT ACCEPTS A DATA STRING CONTAINING AN ENCODED VALUE, AND
0*$WILL RETURN CHAR(256) VAR CONTAINING THE SAME DATA ENCODED
0*$AS SPECIFIED.  CALL FORMAT IS AS FOLLOWS:
0*$.IN 5
0*$.NF
0*$.SP 1
0*$OUTSTR=CONVERT(DATAPTR,
0*$TYPE1,LENGTH1,SCALE1,
0*$TYPE2,LENGTH2,SCALE2);
0*$.FI L
0*$.HI 5
0*$.SP 1
0*$WHERE -
0*$.SP 1
0*$DATAPTR PTR TO THE DATA TO BE CONVERTED.
0*$.SP 1
0*$TYPE1 CHAR(*) CONTAINING CHAR, HEX, FIXED, PACKED, FLOAT, BIT, OR
0*$BEST, INDICATING TYPE OF DATA POINTED TO BY DATAPTR.  MOST OF THE
0*$DATA TYPES ARE SELF-EVIDENT, BUT BEST IS A SPECIAL DATA TYPE
0*$WHICH, IN THE FROM-SPECIFICATION, IS EQUIVALENT TO CHAR, AND IN
0*$THE TO-SPECIFICATION, TELLS THE SUBROUTINE TO CONVERT THE VALUE
0*$TO FLOATING POINT, AND THEN TO FORMAT IT FOR PRINTING IN THE BEST
0*$FORMAT CONSIDERING THE SIZE OF THE NUMBER.
0*$.SP 1
0*$LENGTH1 FIXED BIN(15,0) CONTAINING LENGTH OF DATA POINTED TO BY
0*$DATAPTR.
0*$.SP 1
0*$SCALE1 FIXED BIN(15,0) CONTAINING SCALE FACTOR OF DATA POINTED TO
0*$BY DATAPTR.  AFTER THE DATA HAS BEEN CONVERTED FROM THE FROM-FORMAT
0*$TO THE TO-FORMAT, THE TO-SCALE IS SUBTRACTED FROM THE FROM-SCALE,
0*$AND THE RESULT IS MULTIPLIED BY 10.  CALL THE RESULT OF THIS
0*$ARITHMETIC 'RESULT'.  IF 'RESULT' IS POSITIVE, THE CONVERTED
0*$DATA IS DIVIDED BY 'RESULT' BEFORE CONTROL IS RETURNED TO THE
0*$CALLER.
0*$.SP 1
0*$TYPE2, LENGTH2, AND SCALE2 HAVE THE SAME MEANINGS AS TYPE1,
0*$LENGTH1, AND SCALE1, EXCEPT THEY APPLY TO THE RETURNED VALUE.
0*$.HI 0
0*$.SP 1
0*$IF CONVERT CANNOT SUCCESSFULLY MAKE THE CONVERSION, IT WILL
0*$RETURN A NULL STRING.
 */
 (SIZE): CONVERT: PROC(DATAPTR,TYPE1,LENGTH1,SCALE1,
   TYPE2,LENGTH2,SCALE2) RETURNS(CHAR(256) VAR) OPTIONS(REENTRANT);
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL DATAPTR PTR;
   DCL (TYPE1,TYPE2) CHAR(*);
   DCL (LENGTH1,LENGTH2,SCALE1,SCALE2) FIXED BIN(15,0);
   DCL (I,J,K,L,O,P,S,T) FIXED BIN(15,0);
   DCL INTEGER_WORD FIXED BIN(31,0);
   DCL ERRCNT FIXED BIN(15,0) INIT(0);
   DCL PADCH CHAR(1);
   DCL MYBIT BIT(32760) VAR,
       MYCH CHAR(4095) VAR DEF MYBIT,
       MYLEN FIXED BIN(15,0) DEF MYBIT;
   DCL (BITSTR BIT(32767) VAR,
       FIXED_SHORT FIXED BIN(15,0),
       FIXED_LONG  FIXED BIN(31,0),
       FLOAT_SHORT    BIN FLOAT(21),
       FLOAT_LONG     BIN FLOAT(53),
       FLOAT_EXTENDED BIN FLOAT(109),
       PACKED_1 FIXED DEC(1,0),
       PACKED_2 FIXED DEC(3,0),
       PACKED_3 FIXED DEC(5,0),
       PACKED_4 FIXED DEC(7,0),
       PACKED_5 FIXED DEC(9,0),
       PACKED_6 FIXED DEC(11,0),
       PACKED_7 FIXED DEC(13,0),
       PACKED_8 FIXED DEC(15,0)) BASED(SOMEPTR);
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL (SETCAPS,TRIN,TROUT) ENTRY;
   DCL LOW BUILTIN;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL KEYTABLE(7) CHAR(80) VAR STATIC
     INIT('CHAR','HEX','FIXED','PACKED','FLOAT','BIT','BEST');
   DCL 1 FSTR(2),
     2 TYPE FIXED BIN(15,0) INIT((2)0),
       /* 1=CHAR,2=HEX,3=FIXED,4=PACKED,5=FLOAT,6=BIT,7=BEST */
     2 LEN FIXED BIN(15,0) INIT((2)0),
     2 SCALE FIXED BIN(15,0) INIT((2)0);
   DCL (INBUF,OUTBUF) CHAR(256) VAR;
   DCL (INPUT,OUTPTR) PTR;
   DCL WRKSTR CHAR(256) BASED(DUMPTR);
   DCL TLEFTSW BIT(1);

   /* FIRST INITIALIZE FSTR */
   DO I=1 TO HBOUND(KEYTABLE,1) WHILE(KEYTABLE(I)^=TYPE1);
     END;
   IF I>HBOUND(KEYTABLE,1)
     THEN RETURN(''); /* BAD KEY */
   TYPE(1)=I;
   DO I=1 TO HBOUND(KEYTABLE,1) WHILE(KEYTABLE(I)^=TYPE2);
     END;
   IF I>HBOUND(KEYTABLE,1)
     THEN RETURN(''); /* BAD KEY */
   TYPE(2)=I;
   IF LENGTH1>256 × LENGTH2>256
     THEN RETURN(''); /* CAN'T HANDLE MORE THAN 256 CHARS */
   LEN(1)=LENGTH1;
   LEN(2)=LENGTH2;
   SCALE(1)=SCALE1;
   SCALE(2)=SCALE2;

   /* NOW DO A LITTLE ERROR CHECKING */
   DO I=1 TO 2;
     SELECT(TYPE(I));
       WHEN(1,2,6,7) /* CHAR, HEX, BIT */
         IF LEN(I)>256
           THEN RETURN(''); /* BAD LENGTH */
       WHEN(3) /* FIXED */
         IF LEN(I)^=2 & LEN(I)^=4
           THEN RETURN(''); /* BAD LENGTH */
       WHEN(4) /* PACKED */
         IF LEN(I)>8
           THEN RETURN(''); /* BAD LENGTH */
       OTHERWISE /* FLOAT */
         IF LEN(I)^=4 & LEN(I)^=8 & LEN(I)^=16
           THEN RETURN(''); /* BAD LENGTH */
       END; /* SELECT */
     END;

   /* NEXT GET INPUT DATA */
   INBUF=SUBSTR(DATAPTR->WRKSTR,1,LENGTH1);

   /* GENERAL HOUSEKEEPING FUNCTIONS */
   /* SET INPTR,OUTPTR - BYPASS HALFWORD LENGTH FIELDS */
   INPTR=PTROUT(PTRIN(ADDR(INBUF))+2);
   OUTPTR=PTROUT(PTRIN(ADDR(OUTBUF))+2);
   L=LENGTH(INBUF); /* L=LENGTH OF INPUT DATA */
   T=TYPE(1)*10+TYPE(2);
   PADCH=LOW(1); /* DEFAULT PADDING CHARACTER */
   OUTBUF=REPEAT(' ',LEN(2)-1);
   ON CONVERSION GOTO BADDATA;
   ON SIZE       GOTO BADDATA;
   ON ERROR GOTO BADDATA;
   GOTO SELECT;
 BADDATA:
   RETURN(''); /* RETURN NULL STRING */

 SELECT:
   SELECT(T);
     WHEN(11,71,77) DO; /* CHAR-TO-CHAR, BEST-TO-CHAR, BEST-TO-BEST */
       IF LEN(2)<L
         THEN OUTBUF=SUBSTR(INBUF,1,LEN(2));
         ELSE OUTBUF=INBUF;
       PADCH=' ';
       END;
     WHEN(12,72) DO; /* CHAR OR BEST TO HEX */
       OUTBUF=REPEAT(' ',L*2-1);
       CALL TROUT(INBUF,OUTBUF);
       IF LENGTH(OUTBUF)>LEN(2)
         THEN OUTBUF=SUBSTR(OUTBUF,1,LEN(2));
       PADCH='0';
       END;
     WHEN(13,73) DO; /* CHAR OR BEST TO FIXED */
       OUTBUF=REPEAT(' ',LEN(2)-1);
       IF LEN(2)=2
         THEN OUTPTR->FIXED_SHORT=INBUF;
         ELSE OUTPTR->FIXED_LONG=INBUF;
       END;
     WHEN(14,74) DO; /* CHAR OR BEST TO PACKED */
       SELECT(LEN(2));
         WHEN(1) OUTPTR->PACKED_1=INBUF;
         WHEN(2) OUTPTR->PACKED_2=INBUF;
         WHEN(3) OUTPTR->PACKED_3=INBUF;
         WHEN(4) OUTPTR->PACKED_4=INBUF;
         WHEN(5) OUTPTR->PACKED_5=INBUF;
         WHEN(6) OUTPTR->PACKED_6=INBUF;
         WHEN(7) OUTPTR->PACKED_7=INBUF;
         WHEN(8) OUTPTR->PACKED_8=INBUF;
         END;
       END;
     WHEN(15,75) DO; /* CHAR OR BEST TO FLOAT */
       SELECT(LEN(2));
         WHEN(4)  OUTPTR->FLOAT_SHORT=INBUF;
         WHEN(8)  OUTPTR->FLOAT_LONG=INBUF;
         WHEN(16) OUTPTR->FLOAT_EXTENDED=INBUF;
         END; /* SELECT */
       END;
     WHEN(16) DO; /* CHAR TO BIT */
       I=MOD(LENGTH(INBUF),8);
       IF I^=0
         THEN INBUF=REPEAT('0',8-I-1)××INBUF; /* LENGTH M/B /8 */
       MYBIT=INBUF;
       MYLEN=MYLEN/8;
       OUTBUF=MYCH;
       END;
     WHEN(17,77)     /* CHAR OR BEST TO BEST */
       OUTBUF=CALCPRT(INBUF);
     WHEN(21,22,23,24,25,26,27) DO; /* HEX TO WHATEVER */
       IF VERIFY(INBUF,'0123456789ABCDEF')=0
         THEN CALL TRIN(INBUF,OUTBUF);
         ELSE OUTBUF=REPEAT('*',LEN(2)-1);
       PADCH=' ';
       END;
     WHEN(31) DO; /* FIXED TO CHAR */
       IF LEN(1)=2
         THEN OUTBUF=INPTR->FIXED_SHORT;
         ELSE OUTBUF=INPTR->FIXED_LONG;
       PADCH=' ';
       END;
     WHEN(32) DO; /* FIXED TO HEX */
       CALL TROUT(INBUF,OUTBUF);
       PADCH='0';
       END;
     WHEN(33) DO; /* FIXED TO FIXED */
       SELECT(LEN(2)*10+LEN(1));
         WHEN(22) OUTPTR->FIXED_SHORT=INPTR->FIXED_SHORT;
         WHEN(24) OUTPTR->FIXED_SHORT=INPTR->FIXED_LONG;
         WHEN(42) OUTPTR->FIXED_LONG=INPTR->FIXED_SHORT;
         WHEN(44) OUTPTR->FIXED_LONG=INPTR->FIXED_LONG;
         END;
       END;
     WHEN(34) DO; /* FIXED TO PACKED */
       IF LEN(1)=2
         THEN SELECT(LEN(2));
           WHEN(1) OUTPTR->PACKED_1=INPTR->FIXED_SHORT;
           WHEN(2) OUTPTR->PACKED_2=INPTR->FIXED_SHORT;
           WHEN(3) OUTPTR->PACKED_3=INPTR->FIXED_SHORT;
           WHEN(4) OUTPTR->PACKED_4=INPTR->FIXED_SHORT;
           WHEN(5) OUTPTR->PACKED_5=INPTR->FIXED_SHORT;
           WHEN(6) OUTPTR->PACKED_6=INPTR->FIXED_SHORT;
           WHEN(7) OUTPTR->PACKED_7=INPTR->FIXED_SHORT;
           WHEN(8) OUTPTR->PACKED_8=INPTR->FIXED_SHORT;
           END;
         ELSE SELECT(LEN(2));
           WHEN(1) OUTPTR->PACKED_1=INPTR->FIXED_LONG;
           WHEN(2) OUTPTR->PACKED_2=INPTR->FIXED_LONG;
           WHEN(3) OUTPTR->PACKED_3=INPTR->FIXED_LONG;
           WHEN(4) OUTPTR->PACKED_4=INPTR->FIXED_LONG;
           WHEN(5) OUTPTR->PACKED_5=INPTR->FIXED_LONG;
           WHEN(6) OUTPTR->PACKED_6=INPTR->FIXED_LONG;
           WHEN(7) OUTPTR->PACKED_7=INPTR->FIXED_LONG;
           WHEN(8) OUTPTR->PACKED_8=INPTR->FIXED_LONG;
           END;
       END;
     WHEN(35) DO; /* FIXED TO FLOAT */
       IF LEN(1)=2
         THEN SELECT(LEN(2));
           WHEN(4) OUTPTR->FLOAT_SHORT=INPTR->FIXED_SHORT;
           WHEN(8) OUTPTR->FLOAT_LONG=INPTR->FIXED_SHORT;
           WHEN(16) OUTPTR->FLOAT_EXTENDED=INPTR->FIXED_SHORT;
           END;
         ELSE SELECT(LEN(2));
           WHEN(4) OUTPTR->FLOAT_SHORT=INPTR->FIXED_LONG;
           WHEN(8) OUTPTR->FLOAT_LONG=INPTR->FIXED_LONG;
           WHEN(16) OUTPTR->FLOAT_EXTENDED=INPTR->FIXED_LONG;
           END;
       END;
     WHEN(36) DO; /* FIXED TO BIT */
       IF LEN(1)=2
         THEN INTEGER_WORD=INPTR->FIXED_SHORT;
         ELSE INTEGER_WORD=INPTR->FIXED_LONG;
       I=MIN(32,LEN(2)*8); /* MAX LENGTH TO HANDLE IS 32 BITS */
       MYBIT=SUBSTR(UNSPEC(INTEGER_WORD),33-I);
       I=MOD(LENGTH(MYBIT),8);
       IF I^=0
         THEN MYBIT=REPEAT('0'B,8-I-1)××MYBIT;
       MYLEN=MYLEN/8; /* SET LENGTH FOR CHARACTER */
       OUTBUF=MYCH;
       END;
     WHEN(37) DO; /* FIXED TO BEST */
       IF LEN(1)=2
         THEN OUTBUF=CALCPRT(INPTR->FIXED_SHORT);
         ELSE OUTBUF=CALCPRT(INPTR->FIXED_LONG);
       PADCH=' ';
       END;
     WHEN(41) DO; /* PACKED TO CHAR */
       SELECT(LEN(1));
         WHEN(1) OUTBUF=INPTR->PACKED_1;
         WHEN(2) OUTBUF=INPTR->PACKED_2;
         WHEN(3) OUTBUF=INPTR->PACKED_3;
         WHEN(4) OUTBUF=INPTR->PACKED_4;
         WHEN(5) OUTBUF=INPTR->PACKED_5;
         WHEN(6) OUTBUF=INPTR->PACKED_6;
         WHEN(7) OUTBUF=INPTR->PACKED_7;
         WHEN(8) OUTBUF=INPTR->PACKED_8;
         END;
       PADCH=' ';
       END;
     WHEN(42) DO; /* PACKED TO HEX */
       CALL TROUT(INBUF,OUTBUF);
       PADCH='0';
       END;
     WHEN(43) DO; /* PACKED TO FIXED */
       IF LEN(2)=2
         THEN SELECT(LEN(1));
           WHEN(1) OUTPTR->FIXED_SHORT=INPTR->PACKED_1;
           WHEN(2) OUTPTR->FIXED_SHORT=INPTR->PACKED_2;
           WHEN(3) OUTPTR->FIXED_SHORT=INPTR->PACKED_3;
           WHEN(4) OUTPTR->FIXED_SHORT=INPTR->PACKED_4;
           WHEN(5) OUTPTR->FIXED_SHORT=INPTR->PACKED_5;
           WHEN(6) OUTPTR->FIXED_SHORT=INPTR->PACKED_6;
           WHEN(7) OUTPTR->FIXED_SHORT=INPTR->PACKED_7;
           WHEN(8) OUTPTR->FIXED_SHORT=INPTR->PACKED_8;
           END;
         ELSE SELECT(LEN(1));
           WHEN(1) OUTPTR->FIXED_LONG=INPTR->PACKED_1;
           WHEN(2) OUTPTR->FIXED_LONG=INPTR->PACKED_2;
           WHEN(3) OUTPTR->FIXED_LONG=INPTR->PACKED_3;
           WHEN(4) OUTPTR->FIXED_LONG=INPTR->PACKED_4;
           WHEN(5) OUTPTR->FIXED_LONG=INPTR->PACKED_5;
           WHEN(6) OUTPTR->FIXED_LONG=INPTR->PACKED_6;
           WHEN(7) OUTPTR->FIXED_LONG=INPTR->PACKED_7;
           WHEN(8) OUTPTR->FIXED_LONG=INPTR->PACKED_8;
           END;
       END;
     WHEN(44) DO; /* PACKED TO PACKED */
       SELECT(LEN(1));
         WHEN(1) OUTPTR->PACKED_1=INPTR->PACKED_1;
         WHEN(2) OUTPTR->PACKED_2=INPTR->PACKED_2;
         WHEN(3) OUTPTR->PACKED_3=INPTR->PACKED_3;
         WHEN(4) OUTPTR->PACKED_4=INPTR->PACKED_4;
         WHEN(5) OUTPTR->PACKED_5=INPTR->PACKED_5;
         WHEN(6) OUTPTR->PACKED_6=INPTR->PACKED_6;
         WHEN(7) OUTPTR->PACKED_7=INPTR->PACKED_7;
         WHEN(8) OUTPTR->PACKED_8=INPTR->PACKED_8;
         END;
       END;
     WHEN(45) DO; /* PACKED TO FLOAT */
       SELECT(LEN(2));
         WHEN(4)
           SELECT(LEN(1));
             WHEN(1) OUTPTR->FLOAT_SHORT=INPTR->PACKED_1;
             WHEN(2) OUTPTR->FLOAT_SHORT=INPTR->PACKED_2;
             WHEN(3) OUTPTR->FLOAT_SHORT=INPTR->PACKED_3;
             WHEN(4) OUTPTR->FLOAT_SHORT=INPTR->PACKED_4;
             WHEN(5) OUTPTR->FLOAT_SHORT=INPTR->PACKED_5;
             WHEN(6) OUTPTR->FLOAT_SHORT=INPTR->PACKED_6;
             WHEN(7) OUTPTR->FLOAT_SHORT=INPTR->PACKED_7;
             WHEN(8) OUTPTR->FLOAT_SHORT=INPTR->PACKED_8;
             END;
         WHEN(8)
           SELECT(LEN(1));
             WHEN(1) OUTPTR->FLOAT_LONG=INPTR->PACKED_1;
             WHEN(2) OUTPTR->FLOAT_LONG=INPTR->PACKED_2;
             WHEN(3) OUTPTR->FLOAT_LONG=INPTR->PACKED_3;
             WHEN(4) OUTPTR->FLOAT_LONG=INPTR->PACKED_4;
             WHEN(5) OUTPTR->FLOAT_LONG=INPTR->PACKED_5;
             WHEN(6) OUTPTR->FLOAT_LONG=INPTR->PACKED_6;
             WHEN(7) OUTPTR->FLOAT_LONG=INPTR->PACKED_7;
             WHEN(8) OUTPTR->FLOAT_LONG=INPTR->PACKED_8;
             END;
         WHEN(16)
           SELECT(LEN(1));
             WHEN(1) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_1;
             WHEN(2) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_2;
             WHEN(3) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_3;
             WHEN(4) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_4;
             WHEN(5) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_5;
             WHEN(6) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_6;
             WHEN(7) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_7;
             WHEN(8) OUTPTR->FLOAT_EXTENDED=INPTR->PACKED_8;
             END;
         END;
       END;
     WHEN(46) DO; /* PACKED TO BIT */
       SELECT(LEN(1));
         WHEN(1) INTEGER_WORD=INPTR->PACKED_1;
         WHEN(2) INTEGER_WORD=INPTR->PACKED_2;
         WHEN(3) INTEGER_WORD=INPTR->PACKED_3;
         WHEN(4) INTEGER_WORD=INPTR->PACKED_4;
         WHEN(5) INTEGER_WORD=INPTR->PACKED_5;
         WHEN(6) INTEGER_WORD=INPTR->PACKED_6;
         WHEN(7) INTEGER_WORD=INPTR->PACKED_7;
         WHEN(8) INTEGER_WORD=INPTR->PACKED_8;
         END;
       I=MIN(32,LEN(2)*8); /* MAX LENGTH TO HANDLE IS 32 BITS */
       MYBIT=SUBSTR(UNSPEC(INTEGER_WORD),33-I);
       I=MOD(LENGTH(MYBIT),8);
       IF I^=0
         THEN MYBIT=REPEAT('0'B,8-I-1)××MYBIT;
       MYLEN=MYLEN/8; /* SET LENGTH FOR CHARACTER */
       OUTBUF=MYCH;
       END;
     WHEN(47) DO; /* PACKED TO BEST */
       SELECT(LEN(1));
         WHEN(1) OUTBUF=CALCPRT(INPTR->PACKED_1);
         WHEN(2) OUTBUF=CALCPRT(INPTR->PACKED_2);
         WHEN(3) OUTBUF=CALCPRT(INPTR->PACKED_3);
         WHEN(4) OUTBUF=CALCPRT(INPTR->PACKED_4);
         WHEN(5) OUTBUF=CALCPRT(INPTR->PACKED_5);
         WHEN(6) OUTBUF=CALCPRT(INPTR->PACKED_6);
         WHEN(7) OUTBUF=CALCPRT(INPTR->PACKED_7);
         WHEN(8) OUTBUF=CALCPRT(INPTR->PACKED_8);
         END;
       PADCH=' ';
       END;
     WHEN(51) DO; /* FLOAT TO CHAR */
       SELECT(LEN(1));
         WHEN(4) OUTBUF=INPTR->FLOAT_SHORT;
         WHEN(8) OUTBUF=INPTR->FLOAT_LONG;
         WHEN(16) OUTBUF=INPTR->FLOAT_EXTENDED;
         END;
       PADCH=' ';
       END;
     WHEN(52) DO; /* FLOAT TO HEX */
       CALL TROUT(INBUF,OUTBUF);
       END;
     WHEN(53) DO; /* FLOAT TO FIXED */
       IF LEN(2)=2
         THEN SELECT(LEN(1));
           WHEN(4) OUTPTR->FIXED_SHORT=INPTR->FLOAT_SHORT;
           WHEN(8) OUTPTR->FIXED_SHORT=INPTR->FLOAT_LONG;
           WHEN(16) OUTPTR->FIXED_SHORT=INPTR->FLOAT_EXTENDED;
           END;
         ELSE SELECT(LEN(1));
           WHEN(4) OUTPTR->FIXED_LONG=INPTR->FLOAT_SHORT;
           WHEN(8) OUTPTR->FIXED_LONG=INPTR->FLOAT_LONG;
           WHEN(16) OUTPTR->FIXED_LONG=INPTR->FLOAT_EXTENDED;
           END;
       END;
     WHEN(54) DO; /* FLOAT TO PACKED */
       SELECT(LEN(1));
         WHEN(4) SELECT(LEN(2));
           WHEN(1) OUTPTR->PACKED_1=INPTR->FLOAT_SHORT;
           WHEN(2) OUTPTR->PACKED_2=INPTR->FLOAT_SHORT;
           WHEN(3) OUTPTR->PACKED_3=INPTR->FLOAT_SHORT;
           WHEN(4) OUTPTR->PACKED_4=INPTR->FLOAT_SHORT;
           WHEN(5) OUTPTR->PACKED_5=INPTR->FLOAT_SHORT;
           WHEN(6) OUTPTR->PACKED_6=INPTR->FLOAT_SHORT;
           WHEN(7) OUTPTR->PACKED_7=INPTR->FLOAT_SHORT;
           WHEN(8) OUTPTR->PACKED_8=INPTR->FLOAT_SHORT;
           END;
         WHEN(8) SELECT(LEN(2));
           WHEN(1) OUTPTR->PACKED_1=INPTR->FLOAT_LONG;
           WHEN(2) OUTPTR->PACKED_2=INPTR->FLOAT_LONG;
           WHEN(3) OUTPTR->PACKED_3=INPTR->FLOAT_LONG;
           WHEN(4) OUTPTR->PACKED_4=INPTR->FLOAT_LONG;
           WHEN(5) OUTPTR->PACKED_5=INPTR->FLOAT_LONG;
           WHEN(6) OUTPTR->PACKED_6=INPTR->FLOAT_LONG;
           WHEN(7) OUTPTR->PACKED_7=INPTR->FLOAT_LONG;
           WHEN(8) OUTPTR->PACKED_8=INPTR->FLOAT_LONG;
           END;
         WHEN(16) SELECT(LEN(2));
           WHEN(1) OUTPTR->PACKED_1=INPTR->FLOAT_EXTENDED;
           WHEN(2) OUTPTR->PACKED_2=INPTR->FLOAT_EXTENDED;
           WHEN(3) OUTPTR->PACKED_3=INPTR->FLOAT_EXTENDED;
           WHEN(4) OUTPTR->PACKED_4=INPTR->FLOAT_EXTENDED;
           WHEN(5) OUTPTR->PACKED_5=INPTR->FLOAT_EXTENDED;
           WHEN(6) OUTPTR->PACKED_6=INPTR->FLOAT_EXTENDED;
           WHEN(7) OUTPTR->PACKED_7=INPTR->FLOAT_EXTENDED;
           WHEN(8) OUTPTR->PACKED_8=INPTR->FLOAT_EXTENDED;
           END;
         END;
       END;
     WHEN(55) DO; /* FLOAT TO FLOAT */
       SELECT(LEN(2)*100+LEN(1));
         WHEN(0404) OUTPTR->FLOAT_SHORT=INPTR->FLOAT_SHORT;
         WHEN(0408) OUTPTR->FLOAT_SHORT=INPTR->FLOAT_LONG;
         WHEN(0416) OUTPTR->FLOAT_SHORT=INPTR->FLOAT_EXTENDED;
         WHEN(0804) OUTPTR->FLOAT_LONG=INPTR->FLOAT_SHORT;
         WHEN(0808) OUTPTR->FLOAT_LONG=INPTR->FLOAT_LONG;
         WHEN(0816) OUTPTR->FLOAT_LONG=INPTR->FLOAT_EXTENDED;
         WHEN(1604) OUTPTR->FLOAT_EXTENDED=INPTR->FLOAT_SHORT;
         WHEN(1608) OUTPTR->FLOAT_EXTENDED=INPTR->FLOAT_LONG;
         WHEN(1616) OUTPTR->FLOAT_EXTENDED=INPTR->FLOAT_EXTENDED;
         END;
       END;
     WHEN(56) DO; /* FLOAT TO BIT */
       SELECT(LEN(1));
         WHEN(4) INTEGER_WORD=INPTR->FLOAT_SHORT;
         WHEN(8) INTEGER_WORD=INPTR->FLOAT_LONG;
         WHEN(16) INTEGER_WORD=INPTR->FLOAT_EXTENDED;
         END;
       I=MIN(32,LEN(2)*8); /* MAX LENGTH TO HANDLE IS 32 BITS */
       MYBIT=SUBSTR(UNSPEC(INTEGER_WORD),33-I);
       I=MOD(LENGTH(MYBIT),8);
       IF I^=0
         THEN MYBIT=REPEAT('0'B,8-I-1)××MYBIT;
       MYLEN=MYLEN/8; /* SET LENGTH FOR CHARACTER */
       OUTBUF=MYCH;
       END;
     WHEN(57) DO; /* FLOAT TO BEST */
       SELECT(LEN(1));
         WHEN(4) OUTBUF=CALCPRT(INPTR->FLOAT_SHORT);
         WHEN(8) OUTBUF=CALCPRT(INPTR->FLOAT_LONG);
         WHEN(16) OUTBUF=CALCPRT(INPTR->FLOAT_EXTENDED);
         END;
       PADCH=' ';
       END;
     WHEN(61) DO; /* BIT TO CHAR */
       MYCH=INBUF;
       MYLEN=MYLEN*8;
       OUTBUF=MYBIT;
       PADCH='0';
       END;
     WHEN(62) DO; /* BIT TO HEX */
       CALL TROUT(INBUF,OUTBUF);
       PADCH='0';
       END;
     WHEN(63) DO; /* BIT TO FIXED */
       MYCH=INBUF;
       MYLEN=MYLEN*8;
       IF LEN(2)=2
         THEN OUTPTR->FIXED_SHORT=MYBIT;
         ELSE OUTPTR->FIXED_LONG=MYBIT;
       END;
     WHEN(64) DO; /* BIT TO PACKED */
       MYCH=INBUF;
       MYLEN=MYLEN*8;
       SELECT(LEN(2));
         WHEN(1) OUTPTR->PACKED_1=MYBIT;
         WHEN(2) OUTPTR->PACKED_2=MYBIT;
         WHEN(3) OUTPTR->PACKED_3=MYBIT;
         WHEN(4) OUTPTR->PACKED_4=MYBIT;
         WHEN(5) OUTPTR->PACKED_5=MYBIT;
         WHEN(6) OUTPTR->PACKED_6=MYBIT;
         WHEN(7) OUTPTR->PACKED_7=MYBIT;
         WHEN(8) OUTPTR->PACKED_8=MYBIT;
         END;
       END;
     WHEN(65) DO; /* BIT TO FLOAT */
       MYCH=INBUF;
       MYLEN=MYLEN*8;
       SELECT(LEN(2));
         WHEN(4) OUTPTR->FLOAT_SHORT=MYBIT;
         WHEN(8) OUTPTR->FLOAT_LONG=MYBIT;
         WHEN(16) OUTPTR->FLOAT_EXTENDED=MYBIT;
         END;
       END;
     WHEN(66) DO; /* BIT TO BIT */
       OUTBUF=INBUF;
       END;
     WHEN(67) DO; /* BIT TO BEST */
       MYCH=INBUF;
       MYLEN=MYLEN*8;
       OUTBUF=CALCPRT(MYBIT);
       PADCH=' ';
       END;
     WHEN(76) DO; /* BEST TO BIT */
       INTEGER_WORD=INBUF;
       I=MIN(32,LEN(2)*8); /* MAX LENGTH TO HANDLE IS 32 BITS */
       MYBIT=SUBSTR(UNSPEC(INTEGER_WORD),33-I);
       I=MOD(LENGTH(MYBIT),8);
       IF I^=0
         THEN MYBIT=REPEAT('0'B,8-I-1)××MYBIT;
       MYLEN=MYLEN/8;
       OUTBUF=MYCH;
       END;
     END; /* SELECT */
   /* NOW APPLY THE SCALE PARAMETERS */
   S=(SCALE(1)-SCALE(2))*10;
   SELECT(SIGN(S));
     WHEN(1) DO; /* MUST SCALE DOWN */
       SELECT(TYPE(2));
         WHEN(3) /* FIXED */
           IF LEN(2)=2
             THEN OUTPTR->FIXED_SHORT=OUTPTR->FIXED_SHORT/S;
             ELSE OUTPTR->FIXED_LONG=OUTPTR->FIXED_LONG/S;
         WHEN(4) /* PACKED */
           SELECT(LEN(2));
             WHEN(1) OUTPTR->PACKED_1=OUTPTR->PACKED_1/S;
             WHEN(2) OUTPTR->PACKED_2=OUTPTR->PACKED_2/S;
             WHEN(3) OUTPTR->PACKED_3=OUTPTR->PACKED_3/S;
             WHEN(4) OUTPTR->PACKED_4=OUTPTR->PACKED_4/S;
             WHEN(5) OUTPTR->PACKED_5=OUTPTR->PACKED_5/S;
             WHEN(6) OUTPTR->PACKED_6=OUTPTR->PACKED_6/S;
             WHEN(7) OUTPTR->PACKED_7=OUTPTR->PACKED_7/S;
             WHEN(8) OUTPTR->PACKED_8=OUTPTR->PACKED_8/S;
             END;
         WHEN(5) /* FLOAT */
           SELECT(LEN(2));
             WHEN(4) OUTPTR->FLOAT_SHORT=OUTPTR->FLOAT_SHORT/S;
             WHEN(8) OUTPTR->FLOAT_LONG=OUTPTR->FLOAT_LONG/S;
             WHEN(16) OUTPTR->FLOAT_EXTENDED=OUTPTR->FLOAT_EXTENDED/S;
             END;
         OTHERWISE;
         END;
       END;
     WHEN(-1) DO; /* MUST SCALE UP */
       S=0-S;
       SELECT(TYPE(2));
         WHEN(3) /* FIXED */
           IF LEN(2)=2
             THEN OUTPTR->FIXED_SHORT=OUTPTR->FIXED_SHORT*S;
             ELSE OUTPTR->FIXED_LONG=OUTPTR->FIXED_LONG*S;
         WHEN(4) /* PACKED */
           SELECT(LEN(2));
             WHEN(1) OUTPTR->PACKED_1=OUTPTR->PACKED_1*S;
             WHEN(2) OUTPTR->PACKED_2=OUTPTR->PACKED_2*S;
             WHEN(3) OUTPTR->PACKED_3=OUTPTR->PACKED_3*S;
             WHEN(4) OUTPTR->PACKED_4=OUTPTR->PACKED_4*S;
             WHEN(5) OUTPTR->PACKED_5=OUTPTR->PACKED_5*S;
             WHEN(6) OUTPTR->PACKED_6=OUTPTR->PACKED_6*S;
             WHEN(7) OUTPTR->PACKED_7=OUTPTR->PACKED_7*S;
             WHEN(8) OUTPTR->PACKED_8=OUTPTR->PACKED_8*S;
             END;
         WHEN(5) /* FLOAT */
           SELECT(LEN(2));
             WHEN(4) OUTPTR->FLOAT_SHORT=OUTPTR->FLOAT_SHORT*S;
             WHEN(8) OUTPTR->FLOAT_LONG=OUTPTR->FLOAT_LONG*S;
             WHEN(16) OUTPTR->FLOAT_EXTENDED=OUTPTR->FLOAT_EXTENDED*S;
             END;
         OTHERWISE;
         END;
       END;
     OTHERWISE; /* SCALE DOES NOT CHANGE */
     END;
   REVERT ERROR;
   IF TYPE(2)=1 × TYPE(2)=2 × TYPE(2)=7
     THEN DO; /* MUST BE CHAR, HEX, OR BEST FOR PADDING */
       IF TYPE(2)=1 × TYPE(2)=7
         THEN TLEFTSW='1'B; /* LEFT ADJUST  */
         ELSE TLEFTSW='0'B; /* RIGHT ADJUST */
       IF LENGTH(OUTBUF)>0
         THEN OUTBUF=SUBSTR(OUTBUF,1,SUFFIX(OUTBUF,' '));
       IF LENGTH(OUTBUF)>0
         THEN DO;
           P=PREFIX(OUTBUF,' ');
           IF P=0
             THEN OUTBUF='';
             ELSE IF TYPE(2)^=1 /* DON'T ADJUST CHAR */
               THEN OUTBUF=SUBSTR(OUTBUF,P);
           END;
       IF LENGTH(OUTBUF)>0
         THEN IF TLEFTSW
           THEN OUTBUF=SUBSTR(OUTBUF,1,SUFFIX(OUTBUF,PADCH));
           ELSE DO;
             P=PREFIX(OUTBUF,PADCH);
             IF P=0
               THEN OUTBUF='';
               ELSE IF TYPE(2)^=1 /* DON'T ADJUST CHAR */
                 THEN OUTBUF=SUBSTR(OUTBUF,P);
             END;
       IF LENGTH(OUTBUF)>LEN(2)
         THEN RETURN(''); /* DATA WON'T FIT */
       /* NOW PAD IF NECESSARY */
       IF LENGTH(OUTBUF)<LEN(2)
         THEN IF TLEFTSW
           THEN OUTBUF=OUTBUF××REPEAT(PADCH,LEN(2)-LENGTH(OUTBUF)-1);
           ELSE OUTBUF=REPEAT(PADCH,LEN(2)-LENGTH(OUTBUF)-1)××OUTBUF;
       END;
   RETURN(OUTBUF);
   END CONVERT;
