* PROCESS CS(60),F(I),NUMBER,GONUMBER,MACRO,INTERRUPT,OFFSET,
 OPTIMIZE(TIME);
 /*
0*$.HE GENERALIZED TSO COMMANDS - MEMLIST
0*$.HE ENHANCED LISTDS COMMAND
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$07/31/78
0*$AUTHOR:  DICK RETTKE
0*$SHARE CODE:  KIM
0*$SOURCE MODULE NAME:  MEMLIST
0*$DOCUMENTATION ID:  0*$
0*$HELP ID:  0*#
0*$.FI L
0*$.SP 5
0*$THIS COMMAND IS USED TO LIST MEMBERS OF DATASETS. IT LISTS THEM IN
0*$A HORIZONTAL FORMAT AND ALLSO PROVIDES SELECTIVITY OF NAMES LISTED.
0*$IT IS WRITTEN IN PLI, AND THE FOLLOWING SEQUENCE OF COMMANDS
0*$SHOULD BE USED TO COMPILE/LINKEDIT THE COMMAND:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$PLI MEMLIST M LIB('SYS2.MACLIB') OBJ
0*$LINK (MEMLIST *) LOAD('SYS3.COMLIB(CATLIST)') -
0*$  LIB('SYS2.PLIBASE') PLIBASE PRINT(*)
0*$ENTER LINK EDIT CONTROL STATEMENTS -
0*$ ENTRY PLICALLA
0*$ ALIAS ML
0*$ NAME MEMLIST(R)
0*#)F FUNCTION -
0*#         'MEMLIST' WILL PRINT/DISPLAY A LISTING OF THE MEMBERS THAT
0*#                   EXIST IN A SPECIFIED PDS.
0*#          NOTE: THE SEARCH,MASK,FROM & TO OPERANDS MAY BE SPECIFIED
0*#                INDIVIDUALLY OR IN COMBINATION.
0*#          NOTE: ALIAS NAMES ARE IDENTIFIED BY A '<' ON THEIR RIGHT
0*#                BUT THIS DOES NOT INFORM YOU AS TO WHAT MEMBER THEY
0*#                ARE AN ALIAS OF. USE LISTD WITH THE MEMBERS OPTION
0*#                IF THIS INFORMATION IS REQUIRED.
0*#)X SYNTAX -
0*#        MEMLIST PDSNAME DATASET(*) DISP() SEARCH() MASK() FROM() TO()
0*#                         EDIT VLIST
0*#             EXAMPLE1: MEMLIST PDSNAME
0*#                       MEMBER LIST FOR FOR PDSNAME ON THE CRT.
0*#             EXAMPLE2: MEMLIST (PDS1,PDS2,PDS3)
0*#                       MEMBER LIST FOR THE 3 SPECIFIED PDS'S
0*#             EXAMPLE3: MEMLIST PDSNAME DATASET(15)
0*#                       MEMBERS LIST FOR PDSNAME PRINTED AT RMT15
0*#)O OPERANDS -
0*#             PDSNAME IS THE ONLY REQUIRED OPERAND.
0*#  PDSNAME  - THIS IS THE NAME OF THE PDS WHOSE MEMBER NAMES ARE TO
0*#             BE LISTED. MULTIPLE NAMES MAY BE ENTERED BY ENCLOSING
0*#             THEM IN PARENTHESIS.
0*#))DATASET  - THIS IS THE DESTINATION OF WHERE THE OUTPUT WILL
0*#             BE SENT. IF THE DATASET PARAMETER IS NOT SPECIFIED THE
0*#             OUTPUT WILL BE PRINTED ON THE CRT.
0*#             VALID VALUES FOR DATASET ARE:
0*#             A) * - OUTPUT TO TUBE (THE DEFAULT)
0*#             B) DSN NAME  - OUTPUT TO DATASET (USE THE DISP
0*#                            PARAMETER TO SPECIFY NEW OLD MOD ETC.
0*#                FOR EXAMPLE: DATASET(PRINT.DATA)
0*#             C) REMOTE ID - THE DIGIT PORTION OF A VALID REMOTE
0*#                            ID, THE OUTPUT WILL PRINT AT THAT REMOTE.
0*#                FOR EXAMPLE: DATASET(15) (SEND PRINT TO REMOTE15)
0*#))DISP     - USED TO SPECIFY THE DISPOSITION OF THE DATASET
0*#             SPECIFIED IN THE DATASET PARAMETER. DEFAULT IS NEW.
0*#))SEARCH   - ONLY MEMBERS THAT CONTAIN THIS VALUE WILL BE LISTED.
0*#             THE VALUE CAN BE ANY COMBINATION OF LETTERS, NUMBERS,
0*#             AND THE NATIONAL CHARACTERS THAT IS LESS THAN 9
0*#             CHARACTERS IN LENGTH. FOR EXAMPLE; SEARCH(ASM) WOULD
0*#             FIND "ASMG", "DOSASMLK", OR "DOSASM" (BUT NOT MSA).
0*#))MASK     - THIS CAN BE ANY COMBINATION OF LETTERS, NUMBERS, AND
0*#             NATIONAL CHARACTERS THAT IS LESS THAN 9 CHARACTERS
0*#             IN LENGTH. A '.' MATCHES ANY CHARACTER IN THAT POSITION.
0*#             ONLY MEMBER NAMES THE SAME LENGTH AS THE MASK WILL BE
0*#             LOCATED. FOR EXAMPLE: MASK(.A.) WOULD FIND ALL MEMBERS
0*#             WHOSE NAMES ARE TWO/THREE CHARACTERS LONG WITH AN 'A' IN
0*#             THE SECOND POSTION, BUT WOULD NOT FIND ANY WITH NAMES
0*#             LONGER THAN 3 CHARACTERS. TO FIND ALL MEMBERS WITH AN
0*#             'A' IN THE SECOND POSITION THE MASK SHOUD BE ENTERED AS
0*#             MASK(.A......).
0*#))FROM     - ONLY MEMBERS THAT ARE GREATER THAN OR EQUAL TO THIS
0*#             VALUE WILL BE LISTED.
0*#))TO       - ONLY MEMBERS LESS THAN OR EQUAL TO THIS VALUE WILL BE
0*#             LISTED.
0*#))EDIT     - THIS OPERAND WILL PRODUCE A VERTICAL LISTING OF THE
0*#             MEMBER NAMES WITHOUT ANY HEADING DATA(IE; DAT-TIME LINE)
0*#             AND EACH NAME WILL BE ENCLOSED BY A '<' AND A '>'. THIS
0*#             IS USEFULL WHEN OUTPUTING TO A DATASET WHICH YOU WILL
0*#             THEN EDIT.
0*#))VLIST    - THIS OPERAND WILL PRODUCE A VERTICAL LISTING OF THE
0*#             MEMBERS MUCH THE SAME AS LISTD PDS MEMBERS DOES.
 */
 %INCLUDE CPINIT1;
 %@CP = 'MEMLIST'; /*ALIAS = 'ML' */
 %INCLUDE CPINIT2;
         @PROC (1,PDSNAME#(LIST),
                  DATASET(*),
                  DISP(NEW),
                  SEARCH(),
                  MASK(),
                  TO(),
                  FROM(),
                  EDIT#(DEFAULT=NOEDIT,NOEDIT,EDIT),
                  VLIST#(DEFAULT=NOVLIST,NOVLIST,VLIST));
         %INCLUDE JFCB;
         DCL (SYSGETM,SYSPARS,PUTLINE,REP@,SYSCMD,SYSDAIR,SYSJFCB)
              EXTERNAL ENTRY;
         DCL (ONCODE,DATE,TIME,ADDR,LENGTH,PLIRETC,INDEX,SUBSTR,
              HIGH,LOW,VERIFY,UNSPEC,BINARY) BUILTIN;
         DCL DDN     FILE VARIABLE,
             OLDFILE FILE RECORD OUTPUT,
             NEWFILE FILE RECORD OUTPUT SEQUENTIAL
                     ENV(FB RECSIZE(80) BLKSIZE(3600)),
             SYSFILE FILE RECORD OUTPUT
                     ENV(FB RECSIZE(133) BLKSIZE(13300) CTLASA),
             PDS FILE RECORD INPUT
                     ENV(U BLKSIZE(256) TOTAL);
         DCL PREC            CHAR(*)   CONTROLLED,
             (RDATE,RTIME,VMEM)
                             CHAR(10)  VARYING        INIT(''),
             CC              CHAR(1)                  INIT(' '),
             PDSDSN          CHAR(44)  VARYING        INIT(''),
             @PDS            CHAR(100) VARYING        INIT(''),
             (HIT,SSW,MSW,TOSW,FROMSW,@WSW,EODB,NOHDSW,EDSW,VSW,
             FIRST_TIME_SW)  BIT(1)                   INIT('0'B),
             (RETCODE,LRECL#,LNAM,STT,ET,STF,EF,LINECNT,I,J,K,L,DIRSUB,
              TABLE_INDEX,NCOLS,LIST#,LRECMIN,IPOS,USER_VALUE)
                             FIXED BIN(31,0)          INIT(0),
             (POINTER_TO_CURRENT_TABLE,POINTER_TO_FIRST_TABLE,PPLPTR,
              INPTR@,PDEPTR,PDLPTR,JFCBPTR,JFCBXPTR,DIRBPTR,ENTPTR)
                             POINTER,
             MYJFCB          CHAR(176)                INIT(''),
             POSITION(256)   CHAR(1)                  BASED(DIRBPTR),
             INREC           CHAR(256) VARYING        INIT(''),
             NUMS(50)        FIXED BIN(15,0)          BASED(DIRBPTR),
             (SEARCH_VALUE,TO_VALUE,FROM_VALUE)
                             CHAR(8)   VARYING        INIT(''),
             (BIT_MASK,MASK_VALUE)
                             CHAR(8)                  INIT('');
         DCL 1 ENTRY                                  BASED(ENTPTR),
               3 MEM         CHAR(8),
               3 TTR         BIT(24),
               3 ALIAS       BIT(1),
               3 USERTTR     BIT(2),
               3 USERCOUNT   BIT(5);
         DCL 1 POINTER_AND_TABLE        BASED(POINTER_TO_CURRENT_TABLE),
               3 POINTER_TO_NEXT_TABLE POINTER        INIT(NULL),
               3 TABLE(100),
                 5 MEMTAB    CHAR(8)                  INIT(' '),
                 5 ALITAB    BIT(1)                   INIT('0'B);
 /*********************************************************************/
 /* OUTPUT PRINT ROUTINE                                              */
 /*********************************************************************/
 @OUTPUT:PROC (NOHDSW);
         DCL PARMSTRING      CHAR(100)                VARYING,
             NOHDSW          BIT(1);
         IF @WSW THEN
           DO;
             IF ^NOHDSW THEN
               DO;
                 PARMSTRING = PREC;
                 CALL SET@('0'B,'&PREC',PARMSTRING);
                 @WRITE('&PREC');
               END;
             RETURN;
           END;
                 ELSE
           DO;
             IF LINECNT < 60 THEN
               DO;
                 LINECNT = LINECNT + 1;
                 IF SUBSTR(PREC,1,1) ^= '1' THEN PREC = ' '××PREC;
               END;
                             ELSE
               DO;
                 LINECNT = 1;
                 PREC = CC××PREC;
               END;
             WRITE FILE(DDN) FROM(PREC);
           END;
         END @OUTPUT;
 /*********************************************************************/
 /* INITILIZE STATIC VARIABLES                                        */
 /*********************************************************************/
         ON ERROR SYSTEM;
         ON UNDEFINEDFILE(OLDFILE) STOP;
         ON UNDEFINEDFILE(NEWFILE) STOP;
         ON UNDEFINEDFILE(SYSFILE) STOP;
         ON UNDEFINEDFILE(PDS) STOP;
         ON ENDFILE(PDS) EODB = '1'B;
         RDATE = DATE;
         RTIME = TIME;
         RDATE = SUBSTR(RDATE,3,2)××'/'××SUBSTR(RDATE,5,2)××'/'××
                 SUBSTR(RDATE,1,2);
         RTIME = SUBSTR(RTIME,1,2)××':'××SUBSTR(RTIME,3,2)××':'××
                 SUBSTR(RTIME,5,2);
         SEARCH_VALUE = SYMC('&SEARCH');
         MASK_VALUE = SYMC('&MASK');
         TO_VALUE = SYMC('&TO');
         FROM_VALUE = SYMC('&FROM');
         IF EDIT ^= 1 THEN EDSW = '1'B;
         IF VLIST ^= 1 THEN VSW = '1'B;
         IF MASK_VALUE ^= '' THEN
           DO;
             BIT_MASK = HIGH(8);
             MSW = '1'B;
             DO DIRSUB = 1 TO 8;
               IF SUBSTR(MASK_VALUE,DIRSUB,1) = '.' THEN
                  SUBSTR(BIT_MASK,DIRSUB,1) = LOW(1);
             END; /* BIT_MASK NOW HAS X'00' FOR '.' &
                                      X'FF' FOR ALL ELSE */
             UNSPEC(MASK_VALUE) = UNSPEC(MASK_VALUE) & UNSPEC(BIT_MASK);
              /* MASK NOW HAS X'00' WHERE THE PERIODS WERE */
           END;
         IF LENGTH(SEARCH_VALUE) > 0 THEN SSW = '1'B;
         IF LENGTH(TO_VALUE) > 0 THEN
           DO;
             TOSW = '1'B;
             STT = VERIFY(TO_VALUE,'........');
             IF STT = 0 THEN STT = 1;
             ET = (LENGTH(TO_VALUE) - STT) + 1;
           END;
         IF LENGTH(FROM_VALUE) > 0 THEN
           DO;
             FROMSW = '1'B;
             STF = VERIFY(FROM_VALUE,'........');
             IF STF = 0 THEN STF = 1;
             EF = (LENGTH(FROM_VALUE) - STF) + 1;
           END;
         PDEPTR = ADDR(PDSNAME);
         DIRBPTR = ADDR(INREC);
         FIRST_TIME_SW = '1'B;
 /*********************************************************************/
 /* ALLOCATE THE OUTPUT DATASET & SET SWITCHES ETC.                   */
 /*********************************************************************/
         SELECT ;
           WHEN (SYMC('&DATASET') = '*')
             DO;
               @WSW = '1'B;
               LRECL# = 79;
             END;
           WHEN (SYMC('&DATASET') >= '0')
             DO;
               DDN = SYSFILE;
               CC = '1';
               LRECL# = 133;
               @CMD('ALLOCATE FILE(SYSFILE) SYSOUT(A) REUSE
                     DEST(RMT&DATASET.)');
             END;
           OTHERWISE
             DO;
               IF SYMC('&DISP') = 'NEW' THEN
                 DO;
                   DDN = NEWFILE;
                   LRECL# = 80;
                   @CMD('ALLOCATE FILE(NEWFILE) DATASET(&DATASET.)
                         &DISP REUSE');
                 END;
                                        ELSE
                 DO;
                   DDN = OLDFILE;
                   @CMD('ALLOCATE FILE(OLDFILE) DATASET(&DATASET.)
                         &DISP REUSE');
                 END;
             END;
         END; /* END OF SELECT */
 /*********************************************************************/
 /* SET UP ADDITIONAL VARIABLES, SWITCHES AND CHECK FOR ERRORS        */
 /*********************************************************************/
         JFCBPTR = ADDR(MYJFCB);
         IF ^@WSW THEN OPEN FILE(DDN);
         IF LRECL# = 0 THEN
           DO;
             CALL SYSJFCB('OLDFILE ',JFCBPTR);
             IF SUBSTR(JFCRECFM,1,2) ^= '10'B THEN
               DO;
                 @WSW = '1'B;
                 ALLOCATE PREC CHAR(79) INIT('');
                 PREC = SUBSTR(JFCBDSNM,1,INDEX(JFCBDSNM,' ') - 1)××
                        ' HAS AN INCOMPATIBLE RECFM, RECFM MUST BE'××
                        ' F/FB';
                 CALL @OUTPUT('0'B);
                 STOP;
               END;
             LRECL# = JFCLRECL;
             IF EDSW THEN LRECMIN = 15;
                     ELSE LRECMIN = 11;
             IF LRECL# < LRECMIN THEN
               DO;
                 @WSW = '1'B;
                 ALLOCATE PREC CHAR(79) INIT('');
                 PUT STRING(PREC) EDIT
                    (SUBSTR(JFCBDSNM,1,INDEX(JFCBDSNM,' ') - 1)) (A)
                    (' HAS A LRECL LESS THAN ')                  (A)
                    (LRECMIN)                                (P'Z9')
                    (' LRECL MUST BE ')                          (A)
                    (LRECMIN)                                (P'Z9')
                    (' OR LARGER.')                              (A);
                 CALL @OUTPUT('0'B);
                 STOP;
               END;
           END;
         ALLOCATE PREC CHAR(LRECL#) INIT('');
 /*********************************************************************/
 /* ATTENTION AND ERROR UNITS CONTROL INTERRUPT HANDLING              */
 /*********************************************************************/
         @PDS = '@'××SUBSTR(RTIME,1,2)××SUBSTR(RTIME,4,2)××
                     SUBSTR(RTIME,5,2)××'@';
         CALL SET@('0'B,'&PDS',@PDS);
         @CMD('ATTRIB &PDS LRECL(256)');
         ON ATTENTION
           BEGIN;
             @CMD('FREE ATTR(&PDS)');
             IF ^@WSW THEN
               DO;
                 CLOSE FILE(DDN);
                 SELECT (DDN);
                   WHEN (OLDFILE) @FREE(FILE(OLDFILE));
                   WHEN (NEWFILE) @FREE(FILE(NEWFILE));
                   OTHERWISE @FREE(FILE(SYSFILE));
                 END; /* END OF SELECT */
               END;
             CALL PLIRETC(RETCODE);
             STOP;
           END; /* END OF ATTENTION BEGIN UNIT */
         ON ERROR
           BEGIN;
             ON ERROR SYSTEM;
             IF LRECL# ^= 79 THEN ALLOCATE PREC CHAR(79) INIT('');
             @WSW = '1'B;
             CALL @OUTPUT('0'B);
             PUT STRING(PREC) EDIT
                 (' MEMLIST ERROR, RC=') (A)
                 (RETCODE)               (P'ZZZZ9')
                 (' ONCODE=')            (A)
                 (ONCODE)                (P'ZZZZ9');
             CALL @OUTPUT('0'B);
             SIGNAL ATTENTION;
           END; /* END OF ON ERROR UNIT */
 /*********************************************************************/
 /* SET SWITCHES FOR SEARCH PARAMETERS AND INIT THESE PARAMETERS      */
 /*********************************************************************/
         IF @WSW THEN NCOLS = 8;
                 ELSE NCOLS = LRECL# / 10;
         IF VSW×EDSW THEN NCOLS = 1;
 /*********************************************************************/
 /* MAIN LOOP, EXECUTED ONCE FOR EACH PDS TO BE SCANNED               */
 /*********************************************************************/
         DO WHILE (PDEPTR ^= NULL);
 /*********************************************************************/
 /* SECONDARY LOOP LABLE PROVIDES EXIT ABILITY FOR LEAVE STMTS.       */
 /*********************************************************************/
 SECONDARY_LOOP:
           DO;
             IPOS,DIRSUB,LNAM,I,J,L = 1;
             LINECNT = 3;
             WRKPTR = PDEIKPT;
             PDSDSN = SUBSTR(WRKSTR,1,PDEIKL);
             PDEPTR = PDEIKLP;
             IF FIRST_TIME_SW & (PDEPTR = NULL) THEN NOHDSW = '1'B;
             FIRST_TIME_SW,EODB = '0'B;
             CALL SET@('0'B,'&PDSDSN',PDSDSN);
             @CMD('ALLOC FI(PDS) DA(&PDSDSN.) SHR REUSE USING(&PDS)');
             OPEN FILE(PDS);
             CALL SYSJFCB('PDS     ',JFCBPTR);
             LNAM = INDEX(JFCBDSNM,' ') - 1;
             POINTER_TO_CURRENT_TABLE,POINTER_TO_FIRST_TABLE = NULL;
             ALLOCATE POINTER_AND_TABLE SET(POINTER_TO_FIRST_TABLE);
             POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
             LIST#,TABLE_INDEX = 0;
             IF ^SUBSTR(JFCDSORG,7,1) THEN
               DO;
                 PREC = SUBSTR(JFCBDSNM,1,LNAM)××' IS NOT A PDS';
                 CALL @OUTPUT('0'B);
                 LEAVE SECONDARY_LOOP;
               END;
             READ FILE(PDS) INTO(INREC);
 /*********************************************************************/
 /* READ DB LOOP IS EXECUTED UNTIL ALL MEMBER NAMES HAVE BEEN READ    */
 /*********************************************************************/
 READ_DB_LOOP:
             DO WHILE(^EODB);
               DIRSUB = 5;
               ENTPTR = ADDR(POSITION(DIRSUB));
               DO WHILE(DIRSUB < NUMS(2) & ^EODB);
                 USER_VALUE = USERCOUNT;
                 DIRSUB = DIRSUB + 12 + (USER_VALUE * 2);
 TEST:
                 DO;
                    HIT = '0'B;
                    IF MEM=HIGH(8)×MEM=LOW(8) THEN LEAVE TEST;
                    IF FROMSW THEN
                      DO;
                        IF SUBSTR(MEM,STF,EF) >=
                           SUBSTR(FROM_VALUE,STF,EF)
                          THEN HIT = '1'B;
                          ELSE DO;
                                 HIT = '0'B;
                                 LEAVE TEST;
                               END;
                      END; /* FROMSW */
                    IF TOSW THEN
                      DO;
                        IF SUBSTR(MEM,STT,ET) <=
                           SUBSTR(TO_VALUE,STT,ET)
                          THEN HIT = '1'B;
                          ELSE DO;
                                 HIT = '0'B;
                                 LEAVE TEST;
                               END;
                      END; /* TOSW */
                    IF SSW THEN
                      DO;
                        IF INDEX(MEM,SEARCH_VALUE) ^= 0
                          THEN HIT = '1'B;
                          ELSE DO;
                                 HIT = '0'B;
                                 LEAVE TEST;
                               END;
                      END; /* SSW */
                    IF MSW THEN
                      DO;
                        IF (UNSPEC(MEM)&UNSPEC(BIT_MASK)) =
                           UNSPEC(MASK_VALUE)
                          THEN HIT = '1'B;
                          ELSE DO;
                                 HIT = '0'B;
                                 LEAVE TEST;
                               END;
                       END; /* MSW */
                    IF ^FROMSW & ^TOSW & ^SSW & ^MSW THEN HIT = '1'B;
                 END TEST;
                 IF HIT THEN
                   DO;
                     IF TABLE_INDEX >= 100 THEN
                       DO;
                         ALLOCATE POINTER_AND_TABLE
                           SET(POINTER_TO_NEXT_TABLE);
                         POINTER_TO_CURRENT_TABLE =
                           POINTER_TO_NEXT_TABLE;
                         TABLE_INDEX = 0;
                       END;
                     TABLE_INDEX = TABLE_INDEX + 1;
                     LIST# = LIST# + 1;
                     MEMTAB(TABLE_INDEX) = MEM;
                     ALITAB(TABLE_INDEX) = ALIAS;
                   END;
                   IF DIRSUB < 255 THEN
                     DO;
                       IF MEM = HIGH(8) THEN SIGNAL ENDFILE(PDS);
                       ENTPTR = ADDR(POSITION(DIRSUB));
                     END;
               END; /* DO DIRBPTR.... */
               READ FILE(PDS) INTO(INREC);
             END; /* DO WHILE (^EODB) */
 /*********************************************************************/
 /*ALL IN FOR A GIVEN PDS, NOW PRINT THE LISTING                      */
 /*********************************************************************/
             CLOSE FILE(PDS);
             IF LIST# = 0 THEN
               DO;
                 PREC = '';
                 CALL @OUTPUT('0'B);
                 PREC = 'NO HITS FOR '××SUBSTR(JFCBDSNM,1,LNAM);
                 CALL @OUTPUT('0'B);
                 PREC = '';
                 CALL @OUTPUT(NOHDSW);
                 LEAVE SECONDARY_LOOP;
               END;
             PREC = CC××'MEMBER LIST OF '××SUBSTR(JFCBDSNM,1,LNAM)××
                    ' ON '××RDATE××' @ '××RTIME;
             IF ^EDSW THEN CALL @OUTPUT(NOHDSW);
             IF (SSW×MSW×TOSW×FROMSW) THEN
               DO;
                 INREC = ' ';
                 IF SSW THEN INREC = INREC ×× 'SEARCH=' ××
                                     SEARCH_VALUE ×× '  ';
                 IF MSW THEN INREC = INREC ×× 'MASK=' ××
                                     MASK_VALUE ×× '  ';
                 IF TOSW THEN INREC = INREC ×× 'TO=' ××
                                      TO_VALUE ×× '  ';
                 IF FROMSW THEN INREC = INREC ×× 'FROM=' ×× FROM_VALUE;
                 PREC = INREC;
                 IF ^EDSW THEN CALL @OUTPUT(NOHDSW);
                 PREC = '';
                 IF ^EDSW THEN CALL @OUTPUT(NOHDSW);
               END;
             PREC = ' ';
             DO POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE
                REPEAT POINTER_TO_NEXT_TABLE
                WHILE(POINTER_TO_CURRENT_TABLE ^= NULL);
               IF POINTER_TO_NEXT_TABLE = NULL
                 THEN L = TABLE_INDEX; /* LAST TABLE IN CHAIN */
                 ELSE L = 100;         /* FULL TABLE / NOT LAST */
               DO J = 1 TO L;
                 IF I <= NCOLS THEN
                   DO;
                     IF ^EDSW THEN
                       DO;
                         SUBSTR(PREC,IPOS,8) = MEMTAB(J);
                         K = INDEX(MEMTAB(J),' ') - 1;
                         IF K < 1 THEN K = 8;
                         IF ALITAB(J) THEN SUBSTR(PREC,IPOS+K,1) = '<';
                       END;
                              ELSE
                       DO;
                         IF INDEX(MEMTAB(J),' ') > 0 THEN
                            VMEM = SUBSTR(MEMTAB(J),1,
                                   INDEX(MEMTAB(J),' ') - 1);
                                                     ELSE
                            VMEM = MEMTAB(J);
                         PREC = '<'××VMEM××'>';
                       END;
                     IPOS = (10 * I) + 1;
                     I = I + 1;
                   END;
                               ELSE
                   DO;
                     CALL @OUTPUT('0'B);
                     PREC = ' ';
                     IPOS = 1;
                     I = 1;
                     IF ^EDSW THEN
                       DO;
                         SUBSTR(PREC,IPOS,8) = MEMTAB(J);
                         K = INDEX(MEMTAB(J),' ') - 1;
                         IF K < 1 THEN K = 8;
                         IF ALITAB(J) THEN SUBSTR(PREC,IPOS+K,1) = '<';
                       END;
                              ELSE
                       DO;
                         IF INDEX(MEMTAB(J),' ') > 0 THEN
                            VMEM = SUBSTR(MEMTAB(J),1,
                                   INDEX(MEMTAB(J),' ') - 1);
                                                     ELSE
                            VMEM = MEMTAB(J);
                         PREC = '<'××VMEM××'>';
                       END;
                     IPOS = (10 * I) + 1;
                     I = I + 1;
                   END;
               END; /* DO J... */
             END; /* DO POINTER... */
             IF PREC ^= ' ' THEN CALL @OUTPUT('0'B);
             PUT STRING(PREC) EDIT ('NUMBER OF MEMBERS LISTED = ') (A)
                                   (LIST#)                 (P'ZZZZZ9');
             IF ^EDSW THEN CALL @OUTPUT('0'B);
             PREC = '';
             IF ^EDSW THEN CALL @OUTPUT(NOHDSW);
           END SECONDARY_LOOP;
           CLOSE FILE(PDS);
           @FREE(FILE(PDS));
           POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
           DO WHILE(POINTER_TO_CURRENT_TABLE ^= NULL)
              UNTIL(POINTER_TO_CURRENT_TABLE = NULL);
             POINTER_TO_FIRST_TABLE = POINTER_TO_NEXT_TABLE;
             FREE POINTER_TO_CURRENT_TABLE -> POINTER_AND_TABLE;
             POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
           END;
         END; /* MAIN LOOP */
         IF ^@WSW THEN
           DO;
             CLOSE FILE(DDN);
             SELECT (DDN);
               WHEN (OLDFILE) @FREE(FILE(OLDFILE));
               WHEN (NEWFILE) @FREE(FILE(NEWFILE));
               OTHERWISE @FREE(FILE(SYSFILE));
             END; /* END OF SELECT */
           END;
         @CMD('FREE ATTR(&PDS)');
         END MEMLIST;
