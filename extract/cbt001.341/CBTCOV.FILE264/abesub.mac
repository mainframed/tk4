 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 % NOPRINT;
 /**********************************************************************
 * ABESUB                                                              *
 * THIS BLOCK OF CODE CAN BE INCLUDED AT THE START OF THE SOURCE       *
 * PROGRAM FOR ANY ABE SUBCOMMAND.  IT WILL SET UP THE PROC STMT       *
 * AND WILL DECLARE ALL OF THE PARAMETERS.                             *
 **********************************************************************/
   %DCL @RHADDON CHAR;
   %@RHADDON=' ';
   %DCL @RHHDR CHAR;
   %@RHHDR='NO';
   %DCL @ABEREC CHAR;
   %@ABEREC='NO';
   %DCL @RHPNL CHAR;
   %@RHPNL='NO';
   %DCL @ENTRYS CHAR;
   %@ENTRYS='NO';
   %DCL ABESUB ENTRY;
 %ABESUB: PROC
   (NAME,CHECK,RENT,RECURS,PARMS,RETURNS,PARS,ENTRIES,APL,PARSEVAL)
   STATEMENT RETURNS(CHAR);
   DCL (NAME,CHECK,RENT,RECURS,PARMS,RETURNS,RET,PARS,DCLS,ENTRIES,APL,
     PARSEVAL) CHAR;
   DCL I FIXED;

   RET='/* COPYRIGHT 1983 BY THOMAS GLEN SMITH */';
   DCLS='';
   IF APL='YES' /* ADDITIONAL MEMORY FOR LONG APL RECORDS? */
     THEN @RHADDON=
       ',2 RECAPLAD(0:M REFER (RECPNLN)) CHAR(M REFER (RECPNLN))';
   IF NAME='MAIN'
     THEN DO;
       IF CHECK='YES'
         THEN RET=RET××'ABE: PROC OPTIONS(MAIN,REENTRANT);'××
           'DCL TESTCP ENTRY;'××
           'HALT; CALL TESTCP(CPPLCBUF,CPPLUPT,CPPLPSCB,CPPLECT);';
         ELSE RET=RET××'ABE: PROC(CPPL1,CPPL2,CPPL3,CPPL4) '××
           'OPTIONS(REENTRANT,MAIN);'××
           'CPPLCBUF=ADDR(CPPL1);'××
           'CPPLUPT=ADDR(CPPL2);'××
           'CPPLPSCB=ADDR(CPPL3);'××
           'CPPLECT=ADDR(CPPL4);';
         END;
     ELSE DO;
       IF PARMS=''
         THEN DO;
           PARMS='(CMDINDX,CMDBUF,RHPTR,RHHDRPT,LRNPTR)';
           DCLS='DCL CMDINDX FIXED BIN(15,0);'××
                'DCL CMDBUF CHAR(*) VAR;';
           END;
         ELSE PARMS='('××PARMS××')';
       IF RETURNS^=''
         THEN RETURNS=' RETURNS('××RETURNS××')';
       RET=RET××NAME××': PROC'××PARMS;
       IF RENT^='NO'
         THEN RET=RET××' OPTIONS(REENTRANT)';
       IF RECURS='YES'
         THEN RET=RET××' RECURSIVE ';
       RET=RET××RETURNS××';';
       IF INDEX(PARMS,'RHPTR')^=0
         THEN DO;
           RET=RET××'DCL RHPTR PTR;';
           @ABEREC='YES';
           END;
       IF INDEX(PARMS,'RHHDRPT')^=0
         THEN DO;
           RET=RET××'DCL RHHDRPT PTR;';
           @RHHDR='YES';
           IF ENTRIES^='NO'
             THEN @ENTRYS='YES';
           END;
       IF INDEX(PARMS,'RHPPTR')^=0
         THEN DO;
           RET=RET××'DCL RHPPTR PTR;';
           @RHPNL='YES';
           END;
       IF INDEX(PARMS,'LRNPTR')^=0
         THEN RET=RET××'DCL LRNPTR PTR;';
       IF CHECK='YES'
         THEN RET=RET××'HALT;';
       IF PARS^=''
         THEN DO;
           I=LENGTH(PARS);
           RET=RET××
             'DCL PARY('××I××') CHAR(256) VAR;'××
             'DCL PARQCK('××I××') BIT(1);'××
             'DCL NUMCK BIT('××I××') STATIC INIT('''××PARS××'''B);'××
             'I=#ABEPRS(CMDBUF,PARY,PARQCK,NUMCK); IF I^=0 THEN DO;'××
             'IF RHPTR^=NULL THEN MSGDATA=''INVALID OPERAND'';'××
             'ELSE CALL #TERM(''INVALID OPERAND'');RHRC=8;RETURN;'××
             'END;';
           IF PARSEVAL^='NO'
             THEN RET=RET××
               'ON CONDITION(BADPARM) GOTO BADPARM_LAB;'××
               'GOTO BADPARM_LAB_BY;'××
               'BADPARM_LAB: IF MSGDATA='''' '××
               'THEN MSGDATA=''INVALID PARAMETER EXPRESSION'';'××
               'RHRC=16; RETURN;'××
               'BADPARM_LAB_BY:;'××
               'CALL #ABEMKS(RHPTR,RHHDRPT,PARY,PARQCK);';
           END;
       END;
   RET=RET××DCLS××'DCL NULL BUILTIN;'××
     'DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));';
   RETURN(RET);
   %END ABESUB;
 % PRINT;
