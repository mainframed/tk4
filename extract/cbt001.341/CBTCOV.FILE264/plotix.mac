 /* PLOTIX */
 PLOTIX:  PROC(PARM) OPTIONS(MAIN);
         DCL PARM CHAR(100) VAR;
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         DCL 1 PLOTAB(4) UNALIGNED STATIC,
              2 PLIX FIXED BIN(15,0) INIT(17,18,19,20),
              2 PLOTIT(2) CHAR(78) VAR INIT(
           'TOTAL SU PLATEAU RATE','TOTAL SU CAPACITY COEF. (1 = .01)',
                'MSO PLATEAU RATE','MSO CAPACITY COEF. (1 = .01)',
                'I/O PLATEAU RATE','I/O CAPACITY COEF. (1 = .01)',
                'CPU PLATEAU RATE','CPU CAPACITY COEF. (1 = .01)'),
              2 PLOTIX(2) FIXED BIN(15,0) INIT(
                36,40,
                37,41,
                38,42,
                39,43),
              2 SUM(2) FIXED BIN(31,0);
         DCL MODTE FIXED DEC(5,0);
         DCL MAXIMA FIXED BIN(31,0),
             COEF BIN FLOAT(53);
         DO I = 1 TO 4;
              CALL PLOTIXS(MAXIMA,COEF,MODTE,PLIX(I));
              SUM(I,1) = MAXIMA;
              SUM(I,2) = COEF*10000;
              END;
         DCL OUT FILE ENV(F RECSIZE(181) REGIONAL(1)) RECORD KEYED;
         DCL 1 P2 UNALIGNED BASED(IPTR),
              2 ARRAY(0:23) FIXED BIN(31,0),
              2 INDX FIXED BIN(15,0),
              2 DTE FIXED DEC(5,0), /* YYMM */
              2 HDR CHAR(78) VAR;
         DCL DUMCK CHAR(1) BASED(IPTR);
         DCL (LOW,HIGH) BUILTIN;
         DCL (IREC,OREC,NREC) CHAR(181);
         DCL (IPTR,OPTR,NPTR) PTR;
         IPTR = ADDR(IREC);
         OPTR = ADDR(OREC);
         NPTR = ADDR(NREC);
         IF INDEX(PARM,'NEW')^=0
              THEN DO;
                   OPEN FILE(OUT) OUTPUT SEQUENTIAL;
                   CLOSE FILE(OUT);
                   END;
         OPEN FILE(OUT) UPDATE DIRECT;
         DO I = 1 TO 4;
           DO J = 1 TO 2;
             CALL PUTSUM(I,J);
             END;
           END;
 PUTSUM:  PROC(IX,JX);
         DCL (IX,JX) FIXED BIN(15,0);
         DCL (I,J,K,L,M) FIXED BIN(31,0);
         DCL ADJ FIXED DEC(5,0);
         NPTR->ARRAY(*) = 0;
         NPTR->INDX = PLOTAB.PLOTIX(IX,JX);
         NPTR->DTE = MODTE;
         NPTR->HDR = PLOTIT(IX,JX);
         READ FILE(OUT) INTO(OREC) KEY(NPTR->INDX);
         IF OPTR->DUMCK = HIGH(1) /* DUMMY RECORD? */
              THEN NPTR->ARRAY(0) = SUM(IX,JX);
              ELSE DO;
                   ADJ = DTEDIF(OPTR->DTE,NPTR->DTE);
                   IF (ADJ>=0) & (ADJ<=23)
                     THEN DO;
                       NPTR->DTE = OPTR->DTE;
                       NPTR->ARRAY = OPTR->ARRAY;
                       NPTR->ARRAY(ADJ) = SUM(IX,JX);
                       END;
                     ELSE DO;
                       IF ADJ > 23
                         THEN DO;
                           NPTR->ARRAY(23) = SUM(IX,JX);
                           L = 22;
                             /* L = INDEX TO LAST ELEMENT IN NEW ARRAY
                                TO WHICH ASSIGNMENT IS TO BE MADE. */
                           NPTR->DTE = DTEADJ(NPTR->DTE,-23);
                           J = ADJ-23;
                             /* J = INDEX TO FIRST ELEMENT IN OLD ARRAY
                                FROM WHICH ASSIGNMENT IS TO BE MADE. */
                           I = 0;
                             /* I = INDEX TO FIRST ELEMENT IN NEW ARRAY
                                TO WHICH ASSIGNMENT IS TO BE MADE. */
                           END;
                         ELSE DO;
                           NPTR->ARRAY(0) = SUM(IX,JX);
                           L = 23;
                           I = -ADJ;
                           J = 0;
                           END;
                       DO K = 0 TO 23 WHILE(((I+K)<=L) & ((J+K)<=23));
                         NPTR->ARRAY(I+K)=OPTR->ARRAY(J+K);
                         END;
                       END;
                       END;
         WRITE FILE(OUT) FROM(NREC) KEYFROM(NPTR->INDX);
         END PUTSUM;
 DTEDIF:  PROC(DTEA,DTEB) RETURNS(FIXED DEC(5,0));
         DCL (DTEA,DTEB,YYA,YYB,MMA,MMB,ADJ,ADJM) FIXED DEC(5,0);
         YYA = DTEA/100;
         MMA = DTEA - YYA*100;
         YYB = DTEB/100;
         MMB = DTEB - YYB*100;
         ADJ = (YYB-YYA)*12;
         ADJ = ADJ + MMB - MMA;
         RETURN(ADJ);
         END DTEDIF;
 DTEADJ:  PROC(PRMDTE,ADJ) RETURNS(FIXED DEC(5,0));
         DCL (PRMDTE,MM,YY,ADJ) FIXED DEC(5,0);
         YY = PRMDTE/100;
         MM = PRMDTE - YY*100;
         MM = MM + ADJ;
         DO WHILE(MM > 12);
              MM = MM - 12;
              YY = YY + 1;
              END;
         DO WHILE(MM < 1);
              MM = MM + 12;
              YY = YY - 1;
              END;
         RETURN(YY*100 + MM);
         END DTEADJ;
 PLOTIXS:  PROC(MAXIMA,PCT,MODTE,PLIX);
         DCL MAXIMA FIXED BIN(31,0);
         DCL PCT BIN FLOAT(53);
         DCL (MODTE,YY,MM) FIXED DEC(5,0);
         DCL PLIX FIXED BIN(15,0);
         DCL (I,J,K,L,M) FIXED BIN(31,0);
         DCL SAVEX BIN FLOAT(53);
         IX(1) = PLIX;
         DCL GREGDTE CHAR(6);
         DCL INITSW BIT(1) INIT('1'B);
         DCL (IN1,IN2) FILE RECORD INPUT;
         DCL INVAR(2) FILE;
         INVAR(1) = IN1;
         INVAR(2) = IN2;
         DCL 1 P2 UNALIGNED BASED(P2PTR),
              2 ARRAY(0:23) FIXED BIN(31,0),
              2 INDX FIXED BIN(15,0),
              2 DTE FIXED DEC(5,0),
              2 HDR CHAR(78) VAR;
         DCL JULGREG ENTRY(CHAR(6),FIXED DEC(5,0));
         DCL DOW ENTRY(FIXED DEC(5,0))
           RETURNS(FIXED BIN(15,0));
         DCL REGRESS ENTRY;
         DCL NULL BUILTIN;
         DCL 1 PLOTSTR UNALIGNED,
              2 MAT(0:23,0:23) FIXED BIN(15,0) INIT((576)0),
              2 MAXCNT FIXED BIN(31,0) INIT(0),
              2 MAXNUM FIXED BIN(31,0) INIT(0),
              2 YPLAT FIXED BIN(31,0) INIT(0),
              2 ARY(2),
               3 IX FIXED BIN(15,0) INIT(17,1),
               3 COEF FIXED BIN(31,0) INIT((2)0),
               3 CNT FIXED BIN(31,0) INIT((2)0),
               3 AVG FIXED BIN(31,0) INIT((2)0),
               3 OPCODE CHAR(4) VAR INIT('INIT','INIT'),
               3 PPTR PTR;
         DCL POLYARY(3) BIN FLOAT(53);
         DCL DERARY(2) BIN FLOAT(53);
         CALL RUNFI(SETAVG);
         DO I = 1 TO 2;
           IF CNT(I) ^= 0
             THEN AVG(I)=(AVG(I)+CNT(I)/2)/CNT(I);/*AVERAGE, ROUNDED */
           COEF(I) = AVG(I)/12;
           IF COEF(I) = 0
             THEN COEF(I) = 1;
           END;
         CALL RUNFI(SETPLOT);
         CALL REGRESS(MAT,POLYARY);
         /* NOW TAKE THE DERIVATIVE */
         DO I = 2 TO 1 BY -1;
           DERARY(I)=POLYARY(I+1)*I;
           END;
         IF DERARY(2) = 0
              THEN DO;
                   MAXIMA = MAXNUM;
                   PCT = 0;
                   END;
              ELSE DO;
         /* NOW SOLVE FOR X WHEN Y = .2 : X = (Y-B)/A FROM Y=AX+B. */
                   SAVEX = ((.2-DERARY(1))/DERARY(2));
                   PCT = SAVEX*COEF(1);
                   MAXIMA = PCT;
                   /* NOW SOLVE FOR YPLAT */
                   YPLAT=(POLYARY(3)*SAVEX**2+POLYARY(2)*SAVEX+
                     POLYARY(1))*COEF(2);
                   CALL RUNFI(SETPCT);
                   PCT = MAXCNT;
                   PCT = PCT/CNT(1);
                   END;
 SETPCT:  PROC;
         DCL (I,J,K) FIXED BIN(15,0);
         DO J = 8 TO 15;
           IF PPTR(1)->ARRAY(J) >= MAXIMA & PPTR(2)->ARRAY(J) >= YPLAT
             THEN MAXCNT = MAXCNT + 1;
           END;
         END SETPCT;
 SETPLOT:  PROC;
         DCL (I,J,K) FIXED BIN(15,0);
         DCL (X,Y,IX(2)) FIXED BIN(31,0);
         DO J = 8 TO 15;
           IF PPTR(1)->ARRAY(J) >= 0 & PPTR(2)->ARRAY(J) >= 0
             THEN DO;
               DO K = 1 TO 2;
                 IX(K) = PPTR(K)->ARRAY(J)/COEF(K);
                 IF IX(K) > 0
                   THEN IX(K) = IX(K)-1;
                 END;
               IF IX(1)<24 & IX(2)< 24
                 THEN DO;
                   X = IX(1);
                   Y = IX(2);
                   MAT(Y,X) = MAT(Y,X) + 1;
                   END;
               END;
           END;
         END SETPLOT;
 SETAVG:  PROC;
         DCL (I,J) FIXED BIN(15,0);
         DO I = 1 TO 2;
           DO J = 8 TO 15;
             IF PPTR(I)->ARRAY(J) >= 0
               THEN DO;
                 AVG(I) = AVG(I) + PPTR(I)->ARRAY(J);
                 CNT(I) = CNT(I) + 1;
                 IF I = 1
                   THEN IF PPTR(1)->ARRAY(J) > MAXNUM
                     THEN MAXNUM = PPTR(1)->ARRAY(J);
                 END;
             END;
           END;
         END SETAVG;
 RUNFI:  PROC(PARMEP);
         DCL PARMEP ENTRY;
         DCL I FIXED BIN(15,0);
         PPTR(*) = NULL;
         CALL READIN(1); /* GO PRIME BUFFERS */
         CALL READIN(2);
         DO WHILE(PPTR(1)^=NULL & PPTR(2)^=NULL);
              IF PPTR(1)->DTE = PPTR(2)->DTE
                   THEN DO;
                        CALL PARMEP; /* GO PROCESS MATCHED PAIR */
                        CALL READIN(1); /* GO REPRIME BUFFERS */
                        CALL READIN(2);
                        END;
                   ELSE IF PPTR(1)->DTE < PPTR(2)->DTE
                        THEN CALL READIN(1); /* GO REPRIME FILE(1) */
                        ELSE CALL READIN(2); /* GO REPRIME FILE(2) */
              END;
         DO I = 1 TO 2;
           IF PPTR(I) ^= NULL
             THEN DO;
               OPCODE(I) = 'EOF';
               CALL READIN(I);
               END;
           END;
         END RUNFI;
 READIN:  PROC(FILINDX) RETURNS(PTR);
         DCL FILINDX FIXED BIN(15,0);
         DCL MYPTR PTR;
         ON ENDFILE(INVAR(FILINDX)) GO TO EOF;
         IF OPCODE(FILINDX) = 'INIT'
           THEN DO;
              OPCODE(FILINDX) = 'NXT';
              CLOSE FILE(INVAR(FILINDX));
              OPEN FILE(INVAR(FILINDX)) TITLE('IN');
              END;
         IF OPCODE(FILINDX) ^= 'EOF' /* IT MUST BE NXT */
           THEN DO UNTIL(DOW(MYPTR->DTE) > 1 & DOW(MYPTR->DTE) < 7 &
             IX(FILINDX) = MYPTR->INDX);
              READ FILE(INVAR(FILINDX)) SET(MYPTR);
              IF INITSW
                   THEN DO;
                        INITSW = '0'B;
                        YY = MYPTR->DTE/1000;
                        CALL JULGREG(GREGDTE,MYPTR->DTE);
                        MM = SUBSTR(GREGDTE,1,2);
                        MODTE = YY*100 + MM;
                        END;
              END;
           ELSE DO; /* IT MUST BE EOF */
 EOF:
             OPCODE(FILINDX) = 'INIT';
             CLOSE FILE(INVAR(FILINDX));
             MYPTR=NULL;
             END;
 ENDREAD:
         PPTR(FILINDX) = MYPTR;
         END READIN;
         END PLOTIXS;
         END PLOTIX;
