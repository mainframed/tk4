   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT001 - SAVE,S,SF,SB,SE,SX,REFRESH,ES */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RENT';
   % @RENTNAME ='DENT001';
   % INCLUDE DENTSUB;
   DCL SETCAPS ENTRY;
   DCL SAVNON BIT(1);
   DCL ALCODE CHAR(3) VAR INIT('OUT');
   DCL L FIXED BIN(31,0);
   DCL SDDN CHAR(44) VAR;
   DCL LAST FIXED BIN(31,0);
   DCL (MYPTR,DUMPTR) PTR;
   DCL NOPROMPT BIT(1);
   DCL MYP CHAR(3) VAR;
   DCL KEYTABLE(2) CHAR(80) VAR STATIC INIT('NOPROMPT','TEMP');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL TEMPSW BIT(1) INIT('0'B);
   DCL TEMPDDN PTR;
   DCL DBDSW BIT(1) INIT('0'B);
   TEMPDDN=NULL;
   CALL SETCAPS(PARY(1));
   IF PARY(1) ='REFRESH'
     THEN DO;
       IF PARY(2)=''
         THEN FLINE=1;
         ELSE FLINE=PARY(2);
       IF PARY(3)=''
         THEN COUNT=99999999;
         ELSE COUNT=PARY(3);
       CALL #REFRESH(RHPTR,SUBENT,RHHDRPT,FLINE,COUNT);
       /* CALL REFRESH */
       RHTRANSW ='0'B;
       RHRC = 0;
       RETURN;
       END;
   IF RHTRANSW
     THEN IF PARY(1) ^='ST'
       THEN DO;
         MSGDATA=
         'TRANSLATED DATA CAN ONLY BE SAVED WITH THE ST SUBCOMMAND';
         RHRC = 8;
         RETURN;
         END;

   IF RHUSEHD^=NULL
     THEN DO; /* MAYBE WANT TO SAVE DBD */
       IF INDDN^=NULL
         THEN DO; /* CHECK FOR .DB QUALIFIER */
           DO I=LENGTH(INDDN->ALCDSN) TO 1 BY -1
             WHILE(SUBSTR(INDDN->ALCDSN,I,1)^='.');
             END;
           IF SUBSTR(INDDN->ALCDSN,I+1)='DB'
             THEN DBDSW='1'B;
           END;
       IF ^DBDSW
         THEN DO; /* PROMPT USER */
           DO UNTIL(MYP='Y'×MYP='YES'×MYP='NO'×MYP='');
             MYP= #PROMPTL('ENTER A NULL LINE OR ''YES'' TO '××
               'SAVE THE DBD, OR OTHERWISE ''NO''');
             CALL SETCAPS(MYP);
             END;
           IF MYP='YES' × MYP='Y' × MYP=''
             THEN DBDSW='1'B;
           END;
       IF DBDSW
         THEN I=#CMD('USE OUT',RHPTR,SUBENT,RHHDRPT);
       END;

   IF RHFAMSW
     THEN DO;
       DUMPTR=RHFAMEP(RHHDRPT,RHPTR,SUBENT,NULL,3);
       RETURN;
       END;

   IF PARY(3)^=''
     THEN IF VERIFY(PARY(3),'0123456789')^=0
       THEN DO;
         DO I=15 TO 3 BY -1;
           PARY(I+1)=PARY(I);
           END;
         PARY(3)='0';
         END;
   IF PARY(4)^=''
     THEN IF VERIFY(PARY(4),'0123456789')^=0
       THEN DO;
         DO I=15 TO 4 BY -1;
           PARY(I+1)=PARY(I);
           END;
         PARY(4)='99999999';
         END;
   DO I=5 TO 16 WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
     SELECT(INDX);
       WHEN(0)DO; /* INVALID OPERAND */
         RHRC=8;
         MSGDATA='INVALID OPERAND = '××PARY(I);
         RETURN;
         END;
       WHEN(1) /* NOPROMPT */
       ALCODE='NPR';
       WHEN(2)DO; /* TEMP */
         TEMPSW='1'B;
         TEMPDDN=OUTDDN;
         END;
       OTHERWISE;
       END;
     END;
   IF PARY(2) ^=''
     THEN DO;
       SDDN = PARY(2);
       CALL SETCAPS(SDDN);
       IF SUBSTR(PARQCK,2,1) /* QUOTED? */
         THEN IF SUBSTR(SDDN,1,1)^=''''
           THEN SDDN=''''××SDDN××'''';
           ELSE;
         ELSE IF SUBSTR(SDDN,1,1)='('
           THEN IF OUTDDN=NULL
             THEN DO;
               MSGDATA='SAVE WHERE?';
               RHRC=8;
               RETURN;
               END;
             ELSE IF OUTDDN->ALCMEM=''
               THEN DO;
                 MSGDATA='DATA SET IS NOT PARTITIONED';
                 RHRC=8;
                 RETURN;
                 END;
               ELSE SDDN=''''××OUTDDN->ALCDSN××SDDN××'''';
       IF OUTDDN^=NULL
         THEN DO;
           L = OUTDDN->ALCRECL;
           IF ^TEMPSW
             THEN DO;
               CALL #DOFRE(OUTDDN); /* CALL DOFRE */
               IF INDDN=OUTDDN
                 THEN INDDN=NULL;
               END;
           OUTDDN=NULL;
           ALLOCATE BUFSTR SET(BUFPTR);
           END;
       CALL #DOALC(SDDN,ALCODE,OUTDDN,RHPTR); /* CALL DOALC*/
       IF ^TEMPSW
         THEN INDDN = OUTDDN;
       IF OUTDDN = NULL
         THEN DO;
           MSGDATA='SAVE UNSUCCESSFUL';
           RHRC = 8;
           OUTDDN=TEMPDDN; /* RESTORE OUTDDN */
           RETURN;
           END;
       IF ^SUBSTR(OUTDDN->ALCFLAG,7,1) &
         ALCODE^='NPR'&OUTDDN->ALCMEM^=''
         THEN DO; /* MEMBER ALREADY EXISTS */
           CALL #TERM('MEMBER '××OUTDDN->ALCMEM××' EXISTS');
           DO UNTIL(MYP='Y'×MYP='YES'×MYP='NO'×MYP='');
             MYP= #PROMPTL('ENTER A NULL LINE OR ''YES'' TO '××
               'SAVE OVER EXISTING MEMBER, OR OTHERWISE ''NO''');
             CALL SETCAPS(MYP);
             END;
           IF MYP^='YES'& MYP^='Y'& MYP^=''
             THEN DO;
               CALL #DOFRE(OUTDDN);
               IF TEMPSW
                 THEN OUTDDN=TEMPDDN;
                 ELSE INDDN,OUTDDN=NULL;
               MSGDATA='SAVE UNSUCCESSFUL';
               RHRC=8;
               RETURN;
               END;
           END;
       SUBSTR(OUTDDN->ALCFLAG,6,1)=RHNONSW;
       IF ^TEMPSW
         THEN CALL SUBENT(36)(RHPTR,RHHDRPT); /* CALL DENTDFN */
       END;
   IF PARY(3) ^=''
     THEN DO;
       I = PARY(3);
       CALL #MD(RHPTR,SUBENT,I); /* CALL MDPROC */
       MYPTR = RECPTR->LSTPTR;
       IF PARY(4) ^=''
         THEN LAST = PARY(4);
         ELSE LAST = 99999999;
       END;
     ELSE DO;
       MYPTR = HDPTR;
       LAST = 99999999;
       END;
   IF OUTDDN=NULL
     THEN DO;
       MSGDATA='SAVE WHERE?';
       RHRC = 8;
       OUTDDN=TEMPDDN;
       RETURN;
       END;
   CALL #RESEQ(RHPTR,SUBENT,MYPTR,'SAVE','NORENUM',LAST,RHPPTR);
   /* CALL RESEQ */
   IF TEMPSW
     THEN DO;
       CALL #DOFRE(OUTDDN);
       OUTDDN=TEMPDDN;
       END;
   IF PARY(1) ='SE'× PARY(1) ='ES'
     THEN CMDDATA ='END';
     ELSE DO;
       IF DBDSW
         THEN I=#CMD('USE IN',RHPTR,SUBENT,RHHDRPT);
       IF PARY(1) ='SX'
         THEN CMDDATA ='X';
       END;
   MSGDATA='SAVED';
   SAVEFLAG ='0'B;
   RHRC = 0;
   END;
