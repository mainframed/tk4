 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE032 - RUN,AID,$,ASSIST,GO,G */
   %INCLUDE ABESUB;
 ABESUB(ABE032) PARS(00000000000000000) RECURS(YES) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABERHPNL;

   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL 1 SAVEP(HBOUND(PARY,1)-1) CHAR(256) VAR;
   DCL 1 SAVEQ(HBOUND(PARY,1)-1) CHAR(256) VAR;
   DCL 1 RUNDATA BASED(RUNPTR),
       /* RUN STACK ELEMENT - EACH ELEMENT REPRESENTS
          A RUN CURRENTLY IN PROGRESS. */
     2 RUNPOP PTR,
       /* PTR TO NEXT RUN STACK ELEMENT */
     2 RUNPRE PTR,
       /* PTR TO PRIOR RUN STACK ELEMENT */
     2 RUNRHP PTR,
       /* PTR TO RECHDR FOR DATA SET TO WHICH ARUN IS DONE */
     2 RUNRHEL PTR,
       /* PTR TO RECHDR ASSOCIATED WITH THIS RUN */
     2 RUNCUR PTR,
       /* PTR TO CURRENT REC STRUCTURE */
     2 LABI FIXED BIN(31,0),
       /* INDEX TO THE HIGHEST ELEMENT USED IN RHAIDLBT */
     2 LABTAB(256),
      3 $KEY FIXED BIN(31,0),
      3 $LAB CHAR(8),
     2 RUN_CURKEY FIXED BIN(31,0);
       /* KEY OF CURRENT RECORD POINTED TO BY RUNCUR */
   DCL (SETCAPS,SYSDCBP) ENTRY;
   DCL I FIXED BIN(15,0);
   DCL SEQCNT FIXED BIN(15,0) STATIC INIT(8);
   DCL L FIXED BIN(15,0);
   DCL KEY FIXED BIN(31,0);
   DCL RUNNAME CHAR(8) INIT('');
   DCL DDNAME CHAR(8);
   DCL (TRH,RUNCK,RPT) PTR;
   DCL (PKEY,QKEY) CHAR(8);
   DCL SYMVAL CHAR(256) VAR;
   DCL GBLSW BIT(1) STATIC INIT('0'B);
   DCL CTLSW FIXED BIN(15,0);
   DCL MYDCB PTR;
   DCL 1 DCB BASED(MYDCB),
        2 DCBPAD1 CHAR(36),
        2 DCBRECFM BIT(8),
        2 DCBPAD2 CHAR(11),
        2 DCBOFLG BIT(8),
        2 DCBPAD3 CHAR(33),
        2 DCBLRECL FIXED BIN(15,0);
   DCL FIRST FIXED BIN(31,0) INIT(1);
   DCL LAST FIXED BIN(31,0) INIT(99999999);

   IF ^LRN_DFT
     THEN DO;
       FIRST=RH_L1;
       LAST=RH_L2;
       END;
   IF CMDINDX=3 × CMDINDX=4 × CMDINDX=5
     THEN DO;
       DDNAME='SYSAID';
       CTLSW=1; /* CONTROL WRITE */
       END;
     ELSE DO;
       DDNAME='SYSRUN';
       CTLSW=0; /* CONTROL CMD */
       END;
   DO IX = 2 TO HBOUND(PARY,1);
     P=IX-1; /* P=POSITION PARAMETER NUMBER */
     PKEY='P'××#BARENUM(P);
     QKEY='Q'××#BARENUM(P);
     SAVEP(P)=#SYMC(RHHDRPT,RH_SYMTREE,PKEY); /* SAVE CURRENT VALUE */
     SAVEQ(P)=#SYMC(RHHDRPT,RH_SYMTREE,QKEY); /* SAVE CURRENT VALUE */
     IF PARQCK(IX)
       THEN CALL #SETA(RHHDRPT,RH_SYMTREE,QKEY,1);
       ELSE CALL #SETA(RHHDRPT,RH_SYMTREE,QKEY,0);
     CALL #SETC(RHHDRPT,RH_SYMTREE,PKEY,PARY(IX)); /* SET POSITIONAL */
     I = INDEX(PARY(IX),'(');
     IF ^(I < 2 × I > 8)
       THEN DO; /* IT IS KEYWORD */
         PKEY = SUBSTR(PARY(IX),1,I-1);
         CALL SETCAPS(PKEY);
         SYMVAL = SUBSTR(PARY(IX),I+1,LENGTH(PARY(IX))-I-1);
         CALL #SETC(RHHDRPT,RH_SYMTREE,PKEY,SYMVAL); /* SET KEYWORD */
         END;
     END;
   CALL SETCAPS(PARY(1));
   IF PARY(1)='*'
     THEN PARY(1)=RHNAME;
   IF PARY(1)=''
     THEN IF DDNAME='SYSAID'
       THEN PARY(1)='GENERAL';
       ELSE PARY(1)=RHNAME;
   DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
     UNTIL(TRH->RHNAME=PARY(1));
     END;
   IF TRH^=NULL
     THEN DO RPT=TRH->NXTHDR REPEAT RPT->NXTPTR WHILE(RPT^=TRH)
       UNTIL(RPT->RECSEQ>=FIRST);
       END;
     ELSE DO;
       RUNNAME=PARY(1);
       IF DDNAME='SYSRUN'
         THEN DO;
           IF RHRUNDCB=NULL
             THEN CALL SYSDCBP(RHRUNDCB,DDNAME);
           MYDCB=RHRUNDCB;
           END;
         ELSE DO;
           IF RHAIDDCB=NULL
             THEN CALL SYSDCBP(RHAIDDCB,DDNAME);
           MYDCB=RHAIDDCB;
           END;
       I=0;
       CALL #ABEPIB(MYDCB,RUNNAME,ALCEP,I,SEQCNT);
       IF I ^= 0
         THEN DO;
           IF I=4
             THEN MSGDATA=RUNNAME××' NOT FOUND';
             ELSE MSGDATA=DDNAME××' FILE INVALID OR MISSING';
           RHRC = 8;
           RETURN;
           END;
       RPT=TRH->NXTHDR;
       END;
   ALLOCATE RUNDATA;
   RUNPOP=RHRUNSTK;
   RHRUNSTK=RUNPTR;
   RUNPRE=NULL;
   IF RUNPOP^=NULL
     THEN RUNPOP->RUNPRE=RUNPTR;
   RUNRHP=RHPTR;
   RUNRHEL=TRH;
   RUNCUR=RPT;
   IF RUNCUR=RUNRHEL
     THEN RUN_CURKEY=0;
     ELSE RUN_CURKEY=1;
   LABI = 0;
   KEY = 0;
   RHRC = 0;
   CALL #ABEPI(GET,PUT,#PROMPTL,DOCMD,
     #REP,#SETC,STAK,KEY,LABI,LABTAB,CTLSW,
       #DOCMD,RHHDRPT,RHPTR); /* CALL ABEPI */

   /* NOW RESTORE PARAMETER VALUES */
   DO P = 1 TO HBOUND(PARY,1)-1;
     IF P<10
       THEN PUT STRING(PKEY) EDIT('P',P)(A(1),P'9');
       ELSE PUT STRING(PKEY) EDIT('P',P)(A(1),P'99');
     SYMVAL=SAVEP(P);
     CALL #SETC(RHHDRPT,RH_SYMTREE,PKEY,SYMVAL); /* CALL SET@ */
     SUBSTR(PKEY,1,1)='Q';
     SYMVAL=SAVEQ(P);
     CALL #SETC(RHHDRPT,RH_SYMTREE,PKEY,SYMVAL); /* CALL SET@ */
     END;

   /* IF THERE WAS AN ERROR, RUN STACK ELEMENT MAY BE DELETED */
 ERRLAB:
   DO RUNCK=RHRUNSTK REPEAT RUNCK->RUNPOP WHILE(RUNCK^=NULL)
     UNTIL(RUNCK=RUNPTR);
     END;
   IF RUNCK^=NULL
     THEN DO;
       /* NOW DEQUEUE AND FREE CURRENT RUN STACK ELEMENT */
       IF RUNPRE=NULL
         THEN RHRUNSTK=RUNPOP;
         ELSE RUNPRE->RUNPOP=RUNPOP;
       IF RUNPOP^=NULL
         THEN RUNPOP->RUNPRE=RUNPRE;
       FREE RUNDATA;
       END;
   IF RUNNAME^=''
     THEN I=#CMD('END N',TRH,RHHDRPT);


 ALCEP:  PROC(INREC);
   DCL INREC CHAR(256) VAR;
   DCL SAVPTR PTR;
   DCL I FIXED BIN;
   IF TRH=NULL
     THEN DO;
       SAVPTR = RHPTR;
       I=#CMD('SSE '''' SUPPORT NAME('××PARY(1)××')',RHPTR,RHHDRPT);
       IF I^=0
         THEN SIGNAL ERROR;
       L=5;
       FREE BUFSTR;
       L = DCBLRECL;
       ALLOCATE BUFSTR;
       TRH = RHPTR;
       RHPTR = SAVPTR;
       END;
   IF TRH->RECPTR=TRH
     THEN SEQ=1;
     ELSE SEQ=TRH->RECPTR->RECSEQ+1;
   TRH->BUFPTR->BUF = INREC;
   CALL #ADD(TRH,RHHDRPT,TRH->RECPTR,TRH->RECPTR,SEQ,
     TRH->BUFPTR->BUF,0);
   END ALCEP;

 DOCMD: PROC(TEMP,HELPSTR) RECURSIVE;
   DCL (TEMP,HELPSTR) CHAR(*) VAR;
   DCL I FIXED BIN(31,0);
   DCL SAVRH PTR;
   SAVRH=RHPTR;
   I=#CMD(TEMP,SAVRH,RHHDRPT);
   IF I>RHRCLIM
     THEN DO; /* EXCEEDS MAXIMUM ERROR LIMIT */
       RHRC=I;
       GOTO ERRLAB;
       END;
   END DOCMD;

 GET:  PROC(KEY,TXT);
   DCL (KEY) FIXED BIN(31,0) UNALIGNED;
   DCL TXT CHAR(*) VAR;

   IF RHFLUSH
     THEN GOTO ENDRUN; /* GET OUT IMMEDIATELY */
   IF KEY^=RUN_CURKEY
     THEN IF KEY < RUN_CURKEY
       THEN DO WHILE(RUNCUR^=RUNRHEL)
         UNTIL(KEY=RUN_CURKEY × RUNCUR->RECSEQ<FIRST);
         RUNCUR=RUNCUR->LSTPTR;
         IF RUNCUR=RUNRHEL
           THEN LEAVE;
         RUN_CURKEY=RUN_CURKEY-1;
         END;
       ELSE DO WHILE(RUNCUR^=RUNRHEL)
         UNTIL(KEY=RUN_CURKEY × RUNCUR->RECSEQ>LAST);
         RUNCUR=RUNCUR->NXTPTR;
         IF RUNCUR=RUNRHEL
           THEN LEAVE;
         RUN_CURKEY=RUN_CURKEY+1;
         END;
   SELECT;
     WHEN(RUNCUR=RUNRHEL) TXT='';     /* INDICATE EOJ */
     WHEN(RUNCUR->RECSEQ<FIRST) TXT=''; /* INDICATE EOJ */
     WHEN(RUNCUR->RECSEQ>LAST)  TXT=''; /* INDICATE EOJ */
     WHEN(LENGTH(RUNCUR->RECSTR)=0) TXT=' '; /* INDICATE BLANKS */
     OTHERWISE TXT=RUNCUR->RECSTR;
     END; /* SELECT */
   IF LENGTH(TXT)=0
     THEN DO; /* IT IS EOJ - RESET TO START OF FILE */
       RUNCUR=RPT;
       IF RUNCUR=RUNRHEL
         THEN RUN_CURKEY=0;
         ELSE RUN_CURKEY=1;
       END;
   END GET;

 PUT: PROC(TEMP);
   DCL TEMP CHAR(*) VAR;

   IF @CURPNL^=0
     THEN CALL #CRTZAP(RHPPTR); /* CALL CRTZAPS - CLEAR SCREEN */
   CALL #TERM(TEMP);
   END PUT;

 STAK: PROC(TEMP);
   DCL TEMP CHAR(*) VAR;

   CALL #PUSHLIFO(RHPTR,RH_STACK,RH_QUEUE,TEMP);
   END STAK;

 ENDRUN:
   END ABE032;
