  /*ABELSPP - COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * CALLED TO PARSE AN <LSP> UNIT, WHICH IS OF THE FORM                 *
 *                                                                     *
 *   <LSP> # (<NAME> (':')) <LSU>                                      *
 *                                                                     *
 * <NAME> IS THE SYMBOLIC NAME OF AN EDITED DATA SET.  IF THE NAME IS  *
 * NOT CURRENTLY IN USE, ONE WILL BE CREATED. <LSU> IS AS DEFINED IN   *
 * THE DOCUMENTATION AT THE FRONT OF THE ABEPOS SUBROUTINE.            *
 *                                                                     *
 * ':' IS OPTIONAL, AND CAN BE USED TO SPECIFY A NAME THAT WOULD       *
 * OTHERWISE BE RECOGNIZED AS PART OF THE LSU, E.G. 'T' OR 'B'.        *
 *                                                                     *
 * LRNPTR SHOULD POINT TO THE LRN_STRUCTURE TO BE FILLED IN AS A       *
 *        RESULT OF THE PARSE.                                         *
 * CMDBUF SHOULD CONTAIN THE TEXT TO BE PARSED.                        *
 * NSAVE  WILL BE SET TO THE OFFSET WITHIN CMDBUF WHERE AN ERROR WAS   *
 *        ENCOUNTERED.  IF N>LENGTH(CMDBUF) ON RETURN, THE CALLER MAY  *
 *        ASSUME NO ERROR OCCURED.                                     *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABELSPP) PARMS(RHHDRPT,RHPTR,LRNPTR,CMDBUF,NSAVE) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL SETCAPS ENTRY;
   DCL CMDBUF CHAR(*) VAR;
   DCL NSAVE FIXED BIN(15,0);
   DCL (M,N,OL) FIXED BIN(15,0);
   DCL (MS,NS,OLS) FIXED BIN(15,0);
   DCL (OP,OPS) CHAR(256) VAR;
   DCL TRH PTR;
   DCL COLONSW BIT(1) INIT('0'B);

   CALL SETCAPS(CMDBUF);
   N=0;
   CALL #ABEGOP(CMDBUF,M,N,OL,OP); /* GET NEXT OPERAND */

   /* NOW DETERMINE TO-DATASET */
   LRN_RHP=RHPTR; /* DEFAULT TO CURRENT DATA SET */
   IF OP^=''
     THEN DO;
       OPS=OP; MS=M; NS=N; OLS=OL;
       CALL #ABEGOP(CMDBUF,M,N,OL,OP); /* GET NEXT OPERAND */
       COLONSW=(OP=':');
       DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
         UNTIL(TRH->RHNAME=OPS);
         END;
       IF TRH=NULL
         THEN IF COLONSW × NAME_SYNTAX(OPS)
           THEN DO;
             TRH=RHPTR;
             I=#CMD('SSE '''' NAME('××OPS××') RECSIZE('××BUFLN××') ',
               TRH,RHHDRPT);
             TRH->HEXMODE=HEXMODE; TRH->RHTRANSW=RHTRANSW;
             TRH->LOFLAG=LOFLAG;
             TRH->RH_OFF_DFT=RH_OFF_DFT; TRH->RH_LEN_DFT=RH_LEN_DFT;
             TRH->RH_NCOLS_DFT=RH_NCOLS_DFT;
             END;
       IF TRH^=NULL
         THEN DO;
           LRN_RHP=TRH; /* TO-DATASET */
           IF COLONSW='1'B
             THEN CALL #ABEGOP(CMDBUF,M,N,OL,OP); /* NEXT OPERAND */
           END;
         ELSE DO; OP=OPS; M=MS; N=NS; OL=OLS; END;
       END;

   /* NOW PARSE TO-POSITIONAL OPERANDS */
   CALL #ABEPOS(RHHDRPT,CMDBUF,M,N,OL,OP,LRNPTR);
   NSAVE=N;

 NAME_SYNTAX: PROC(NAME) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE WHETHER A GIVEN NAME CONFORMS TO NORMAL         *
 * NAMING CONVENTIONS.                                                 *
 *                                                                     *
 **********************************************************************/
   DCL ALPHA CHAR(29) STATIC INIT('$#@ABCDEFGHIJKLMNOPQRSTUVWXYZ');
   DCL NUMBERS CHAR(10) STATIC INIT('0123456789');
   DCL NAME CHAR(*) VAR;
   IF LENGTH(NAME)=0 × LENGTH(NAME)>8
     THEN RETURN('0'B);
   IF VERIFY(SUBSTR(NAME,1,1),ALPHA)^=0
     THEN RETURN('0'B);
   IF VERIFY(NAME,ALPHA××NUMBERS)^=0
     THEN RETURN('0'B);
   IF NAME='T' × NAME='B' × NAME='N' × NAME='P'
     THEN RETURN('0'B);
   RETURN('1'B);
   END NAME_SYNTAX;

   END ABELSPP;
