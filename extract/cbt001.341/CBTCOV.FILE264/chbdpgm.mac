 CHBDPGM:  PROC(DA08DDN,PARMBIT,OPPONENTS,UID,CONCEDE,TERMRD,TERMWR)
           RETURNS(CHAR(8) VAR);
         DCL DA08DDN CHAR(8);
         DCL PARMBIT BIT(8);
              /* SUBSTR(1,1) = OLD DATA SET
                        2,1  = NOSAVE
                        3,1  = CONTINUOUS
                        4,1  = DISPLAY ONLY
                        5,1  = HARDCOPY ONLY */
         DCL OPPONENTS(0:1) CHAR(8) VAR;
         DCL UID CHAR(8) VAR;
         DCL CONCEDE ENTRY;
         DCL TERMRD ENTRY(CHAR(*) VAR);
         DCL TERMWR ENTRY(CHAR(*) VAR);
         % INCLUDE @FULLSCR;
         % INCLUDE CHBD;
         DCL 1 PCNAM(0:31) CHAR(4) STATIC INIT(
              'WQR', 'WQH', 'WQB', 'WQ',  'WK',  'WKB', 'WKH', 'WKR',
              'WQRP','WQHP','WQBP','WQP', 'WKP', 'WKBP','WKHP','WKRP',
              'BQR', 'BQH', 'BQB', 'BQ',  'BK',  'BKB', 'BKH', 'BKR',
              'BQRP','BQHP','BQBP','BQP', 'BKP', 'BKBP','BKHP','BKRP');
         DCL 1 PCPOS(0:31) FIXED BIN(15,0) STATIC INIT(
               56,    57,    58,    59,    60,    61,    62,    63,
               48,    49,    50,    51,    52,    53,    54,    55,
               0,     1,     2,     3,     4,     5,     6,     7,
               8,     9,     10,    11,    12,    13,    14,    15);
         DCL TURNSTR(0:1) CHAR(5) STATIC INIT('WHITE','BLACK');
         DCL LRT(0:1) CHAR(1) INIT('L','R');
         DCL 1 CSLMV(0:1,0:1),  /* CASTLE MOVES */
                  /* W B L R */
              2 KMV FIXED BIN(15,0) INIT(57,62,6,1),
              2 CMV FIXED BIN(15,0) INIT(58,61,5,2),
              2 CPC FIXED BIN(15,0) INIT(0,7,23,16),
              2 KPC FIXED BIN(15,0) INIT(4,4,20,20),
              2 MVNM FIXED BIN(15,0) INIT(32,33,34,35);
         DCL 1 CHBDREC,
              2 MEN(0:31) FIXED BIN(15,0),
              2 TURN FIXED BIN(15,0),
              2 COMBATANTS(0:1) CHAR(8) VAR,
              2 MTIND FIXED BIN(15,0),
              2 MTAB(200),
               3 MTPC FIXED BIN(15,0),
               3 MTMV FIXED BIN(15,0),
               3 MTX FIXED BIN(15,0),
               3 MTXM FIXED BIN(15,0),
              2 DATELOST CHAR(6);
         DCL CHBDFI FILE RECORD ENV(F RECSIZE(1694) BLKSIZE(1694));
         ON TRANSMIT(CHBDFI) BEGIN;
              CLOSE FILE(CHBDFI);
              SUBSTR(PARMBIT,1,1) = '0'B;
              GO TO REREAD;
              END;
 REREAD:
         IF SUBSTR(PARMBIT,1,1) /* OLD? */
              THEN DO;
                   OPEN FILE(CHBDFI) RECORD INPUT TITLE(DA08DDN);
                   READ FILE(CHBDFI) INTO(CHBDREC);
                   CLOSE FILE(CHBDFI);
                   END;
              ELSE DO; /* IT MUST BE NEW */
                   MEN = PCPOS;
                   TURN = 0;
                   COMBATANTS  = OPPONENTS;
                   MTIND = 0;
                   MTPC(*) = 0;
                   MTMV(*) = 0;
                   MTX(*) = 0;
                   MTXM(*) = 0;
                   DATELOST = 0;
                   END;
         DCL LINENUM(0:7) FIXED BIN(15,0) INIT(2,4,6,8,10,12,14,16);
         DCL BIGDISP(20) PTR;
         BIGDISP(1) = ADDR(SCREEN1_OUT.FIELD1LEN);
         BIGDISP(2) = ADDR(SCREEN1_OUT.FIELD2LEN);
         BIGDISP(3) = ADDR(SCREEN1_OUT.FIELD3LEN);
         BIGDISP(4) = ADDR(SCREEN1_OUT.FIELD4LEN);
         BIGDISP(5) = ADDR(SCREEN1_OUT.FIELD5LEN);
         BIGDISP(6) = ADDR(SCREEN1_OUT.FIELD6LEN);
         BIGDISP(7) = ADDR(SCREEN1_OUT.FIELD7LEN);
         BIGDISP(8) = ADDR(SCREEN1_OUT.FIELD8LEN);
         BIGDISP(9) = ADDR(SCREEN1_OUT.FIELD9LEN);
         BIGDISP(10) = ADDR(SCREEN1_OUT.FIELD10LEN);
         BIGDISP(11) = ADDR(SCREEN1_OUT.FIELD11LEN);
         BIGDISP(12) = ADDR(SCREEN1_OUT.FIELD12LEN);
         BIGDISP(13) = ADDR(SCREEN1_OUT.FIELD13LEN);
         BIGDISP(14) = ADDR(SCREEN1_OUT.FIELD14LEN);
         BIGDISP(15) = ADDR(SCREEN1_OUT.FIELD15LEN);
         BIGDISP(16) = ADDR(SCREEN1_OUT.FIELD16LEN);
         BIGDISP(17) = ADDR(SCREEN1_OUT.FIELD17LEN);
         BIGDISP(18) = ADDR(SCREEN1_OUT.FIELD18LEN);
         BIGDISP(19) = ADDR(SCREEN1_OUT.FIELD19LEN);
         BIGDISP(20) = ADDR(SCREEN1_OUT.FIELD20LEN);
         DCL 1 BIGDEF(0:7) DEF BIGDISP,
              2 BIGPAD PTR,
              2 DISPARY PTR;
         DCL 1 FIELD UNALIGNED BASED(DFLDPTR),
              2 LEN FIXED BIN(15,0),
              2 DATA CHAR(L REFER (LEN)) VAR;
         DCL DFLDPTR PTR,
             DFLDADJ FIXED BIN(31,0) DEF DFLDPTR;
         DCL MOVSTR CHAR(80) VAR;
         DCL TMPNAM CHAR(4);
         IF (COMBATANTS(TURN) ^= UID) & (SUBSTR(PARMBIT,2,2)='00'B)
              THEN DO;
                   SUBSTR(PARMBIT,4,1) = '1'B;/* MAKE IT DISPLAY ONLY */
                   @FLDMOD(SCREEN1.FIELD19='SORRY, NOT YOUR TURN');
                   END;
 NXT:
         @CHGCURS=SCREEN1.FIELD20.@FLDSBAB+1;
         DO I = 0 TO 7;
              DFLDPTR = DISPARY(I);
              SCREEN1_OUTFLAG(LINENUM(I)) = '1'B;
              DO J = 0 TO 7;
                   SUBSTR(DATA,((J*6)+2),4)='';
                   END;
              END;
         DO I = 0 TO 31;
              IF MEN(I) ^= -1  /* NOT CAPTURED? */
                   THEN DO;
                        J = MEN(I)/8;
                        DFLDPTR = DISPARY(J);
                        SUBSTR(DATA,(MOD(MEN(I),8)*6)+2,4)=PCNAM(I);
                        END;
              END;
         SCREEN1_OUTFLAG(18) = '1'B;
         SCREEN1_OUT.FIELD18 = 'WHITE='××COMBATANTS(0)××'  BLACK='××
           COMBATANTS(1)××'  '××TURNSTR(TURN)××' MOVES NEXT';
         IF SUBSTR(PARMBIT,5,1) /* HARDCOPY? */ ×
           SUBSTR(PARMBIT,4,1) /* DISPLAY ONLY? */
              THEN DO;
                   DO I = 1 TO 20;
                        CALL TERMWR(BIGDISP(I)->DATA);
                        END;
                   IF SUBSTR(PARMBIT,4,1) /* DISPLAY ONLY?*/
                        THEN GO TO RETNUL;
                   CALL TERMRD(SCREEN1_IN.FIELD20);
                   END;
              ELSE DO;
                   @DOPNL(1);
                   END;
         MOVSTR = SCREEN1_IN.FIELD20;
         IF MOVSTR = 'CONCEDE'
              THEN DO;
                   CALL CONCEDE(OPPONENTS,TURN);
                   IF SUBSTR(PARMBIT,5,1) /* HARDCOPY */
                     × SUBSTR(PARMBIT,4,1) /* DISPLAY ONLY? */
                        THEN GO TO RETNUL;
                        ELSE GO TO CLRSCR;
                   END;
         IF MOVSTR = 'STOP'
              THEN GO TO STOP;
         IF MOVSTR = 'RESCIND'
              THEN DO;
                   IF MTIND = 0
                        THEN GO TO BADCMD;
                   IF MTPC(MTIND) > 31 /* CASTLE? */
                        THEN DO;
                             IF TURN = 0
                                  THEN I = 1;
                                  ELSE I = 0;
                             J = MOD((MTPC(MTIND)-30),2);
                                  /* J = 0 IF LEFT, 1 IF RIGHT */
                             MEN(CPC(I,J))=PCPOS(CPC(I,J));
                             MEN(KPC(I,J))=PCPOS(KPC(I,J));
                             END;
                        ELSE DO;
                             MEN(MTPC(MTIND)) = MTMV(MTIND);
                             IF MTX(MTIND) ^= -1
                                  THEN MEN(MTX(MTIND))=MTXM(MTIND);
                             END;
                   MTPC(MTIND) = 0;
                   MTMV(MTIND) = 0;
                   MTX(MTIND) = 0;
                   MTXM(MTIND) = 0;
                   MTIND = MTIND - 1;
                   GO TO CKEOJ;
                   END;
         IF LENGTH(MOVSTR) >= 8
              THEN IF SUBSTR(MOVSTR,1,7) = 'CASTLE '
                   THEN DO;
                        DO I=0 TO 1 WHILE(SUBSTR(MOVSTR,8,1)^=LRT(I));
                             END;
                        IF I > 1
                             THEN GO TO BADCMD;
                        MEN(CPC(TURN,I))=CMV(TURN,I);
                        MEN(KPC(TURN,I))=KMV(TURN,I);
                        IF MTIND = 200
                             THEN MTIND = 1;
                             ELSE MTIND = MTIND + 1;
                        MTPC(MTIND) = MVNM(TURN,I);
                        GO TO CKEOJ;
                        END;
         I = INDEX(MOVSTR,'-');
         IF I = 0
              THEN GO TO BADCMD;
         TMPNAM=SUBSTR(TURNSTR(TURN),1,1)××SUBSTR(MOVSTR,1,I-1);
         DO J = 0 TO 31 WHILE(TMPNAM^=PCNAM(J));
              END;
         IF J > 31
              THEN GO TO BADCMD;
         K = INDEX(MOVSTR,' ');
         IF K = 0
              THEN K = LENGTH(MOVSTR) + 1;
         L = K - I - 1;
         IF L < 2
              THEN GO TO BADCMD;
         IF VERIFY(SUBSTR(MOVSTR,K-1,1),'12345678')^=0
              THEN GO TO BADCMD;
         M = SUBSTR(MOVSTR,K-1,1);
         TMPNAM = SUBSTR(TURNSTR(TURN),1,1)××SUBSTR(MOVSTR,I+1,L-1);
         N = TURN*16;
         DO P = N TO N+7 WHILE(TMPNAM ^= PCNAM(P));
              END;
         IF P > N+7
              THEN GO TO BADCMD;
         IF TURN = 0 /* WHITE TO MOVE? */
              THEN K = -8;
              ELSE K = 8;
         M = ((M-1)*K) + PCPOS(P);
              /* M NOW EQUALS SQUARE TO MOVE TO, AND J = NUMBER
                 OF PIECE TO BE MOVED */
         IF MTIND = 200
              THEN MTIND = 1;
              ELSE MTIND = MTIND + 1;
         MTPC(MTIND) = J;
         MTMV(MTIND) = MEN(J);
         DO I = 0 TO 31 WHILE(MEN(I) ^= M);
              END;
         IF I <= 31
              THEN DO;
                   MEN(I) = -1;
                   MTX(MTIND) = I;
                   MTXM(MTIND) = M;
                   END;
              ELSE DO;
                   MTX(MTIND) = -1;
                   MTXM(MTIND) = 0;
                   END;
         MEN(J) = M;
 CKEOJ:
         IF TURN = 0
              THEN TURN = 1;
              ELSE TURN = 0;
         @FLDMOD(SCREEN1.FIELD19='');
         IF SUBSTR(PARMBIT,3,1) /* NOSTOP? */
              THEN GO TO NXT;
 STOP:
         IF ^SUBSTR(PARMBIT,2,1) /* NOSAVE? */
              THEN DO;
                   OPEN FILE(CHBDFI) RECORD OUTPUT TITLE(DA08DDN);
                   WRITE FILE(CHBDFI) FROM(CHBDREC);
                   RETURN(COMBATANTS(TURN));
                   END;
 CLRSCR:
         @CALLFLGS = '01'B;
         CALL SCRWRIT(@PNLCALL);
 RETNUL:
         RETURN('');
 BADCMD:
         @FLDMOD(SCREEN1.FIELD19='INVALID INPUT - TRY AGAIN');
         GO TO NXT;
         END;
