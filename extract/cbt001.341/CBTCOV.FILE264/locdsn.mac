 /* LOCDSN
*$.HE GENERALIZED SUBROUTINES - LOCDSN
*$.HE GENERIC LOCATE FUNCTION
*$.PL 55
*$.PN 0
*$.PA
*$.SS
*$.NF
*$12/15/76
*$AUTHOR:  T. SMITH
*$SOURCE MODULE NAME:  LOCDSN
*$DOCUMENTATION ID:  *$
*$.FI L
*$.SP 5
*$THIS SUBROUTINE CAN BE CALLED TO PERFORM A GENERIC LOCATE FUNCTION.
*$THAT IS, YOU PASS THE SUBROUTINE A CHARACTER STRING CONTAINING ONE OR
*$MORE INDEX LEVELS SEPARATED BY PERIODS, AND THE SUBROUTINE WILL RETURN
*$ALL OF THE CATALOGED DSNAMES HAVING THE SPECIFIED HIGH LEVEL INDICES.
*$THE CATALOGED DSNAMES ARE RETURNED TO THE CALLER IN ALPHABETIC
*$COLLATING SEQUENCE, ONE FOR EACH INVOCATION OF THE SUBROUTINE.
*$NOTE THAT THE FIRST NAME RETURNED WILL NOTE BE THE DSNAME, BUT
*$THE NAME OF THE CATALOG FROM WHICH THE NAMES WERE EXTRACTED.
*$NOTE THAT THIS SUBROUTINE WILL NOT BE ABLE TO SUCCESSFULLY RETRIEVE
*$IF MORE THAT 728 DATA SETS WITH THE SPECIFIED HIGH LEVEL QUALIFIERS
*$RESIDE IN THE CATALOG.
*$CALL FORMAT IS AS FOLLOWS:
*$.SP 1
*$.IN 5
*$CALL LOCDSN(PTR,RET,INDX,DSN,TYPE);
*$.IN 0
*$.SP 1
*$WHERE -
*$.SP 1
*$PTR PTR;
*$.IN 5
*$THIS IS A POINTER VARIABLE THAT CAN BE USED BY THIS SUBROUTINE.  AT
*$INITIAL INVOCATION, THIS POINTER VARIABLE SHOULD BE SET TO NULL VALUE.
*$THE SUBROUTINE WILL STORE THE ADDRESS OF SOME DYNAMICALLY ALLOCATED
*$TABLES IN THIS POINTER.  WHEN THE SUBROUTINE HAS BEEN CALLED TO RETURN
*$THE LAST GENERIC DSNAME, IT WILL FREE THESE TABLES AND SET THE POINTER
*$VARIABLE BACK TO NULL.
*$.IN 0
*$RET FIXED BIN(31,0);
*$.IN 5
*$SET TO ZERO BY THIS SUBROUTINE IF THE OPERATION CAN PROCEED
*$SUCCESSFULLY.  OTHERWISE, WILL BE SET TO THE RETURN CODE FROM CATALOG
*$MANAGEMENT (SVC 26).
*$.IN 0
*$INDX CHAR(44) VARYING;
*$.IN 5
*$THE CALLER SHOULD SET THIS VARIABLE TO THE APPROPRIATE HIGH LEVEL
*$INDEX OR INDICES.  FOR EXAMPLE, IF YOU WANTED TO OBTAIN ALL THE
*$CATALOGED DSNAMES BEGINNING WITH EUP027, YOU WOULD SET INDX EQUAL
*$TO EUP027, FOLLOWED BY A PERIOD.
*$.IN 0
*$DSN CHAR(44) VARYING;
*$.IN 5
*$AT EACH INVOCATION, LOCDSN WILL SET THIS VARIABLE TO THE NEXT GENERIC
*$DSNAME.
*$.IN 0
*$TYPE CHAR(1)
*$.IN 5
*$WILL BE SET BY THIS SUBROUTINE AS FOLLOWS:
*$.IN 10
*$.NF
*$A - NONVSAM DATA SET
*$B - GENERATION DATA GROUP(GDG) BASE
*$C - CLUSTER
*$D - DATA SET
*$F - FREE
*$G - ALTERNATE INDEX
*$I - INDEX
*$M - MASTER CATALOG
*$P - PAGE SPACE
*$R - PATH
*$U - USER CATALOG
*$V - VOLUME
*$X - ALIAS NAME
*$Y - UPGRADE
 */
 LOCDSN:  PROC(PARMPTR,RET,INDX,DSN,TYPE);
         DCL PARMPTR PTR;
         DCL TYPE CHAR(1);
         DCL RET FIXED BIN(31,0);
         DCL (INDX,DSN) CHAR(44) VARYING;
         DCL NULL BUILTIN;
         % INCLUDE CTGPL;
         DCL WRKPTR PTR,
             WRKADJ FIXED BIN(31,0) DEF WRKPTR;
         DCL NULLPTR PTR,
             NULLADJ FIXED BIN(31,0) DEF NULLPTR;
         DCL CTGDSN CHAR(44);
         DCL XREF FIXED BIN(31,0);
         DCL MYCTGFL(5) CHAR(24);
         DCL 1 MYWKA BASED(PARMPTR),
              2 NXTDSNPT PTR,
              2 MYWKLEN FIXED BIN(15,0),
              2 USELEN FIXED BIN(15,0),
              2 MYWKSTR CHAR(XREF REFER (MYWKLEN));
         DCL 1 NXTDSN BASED(NXTDSNPT),
              2 NXTTYPE CHAR(1),
              2 DSNSTR CHAR(44);
         IF PARMPTR = NULL
              THEN DO;
                   NULLADJ=0;
                   CTGOPTN1='00000101'B;
                   CTGOPTN2='00100000'B;
                   CTGOPTN3='00010001'B;
                   CTGOPTN4='00000000'B;
                   WRKPTR=ADDR(INDX);
                   WRKADJ=WRKADJ+1;
                   CTGENT=WRKPTR;
                   CTGCAT=NULLPTR;
                   CTGOPTNS='00000000'B;
                   CTGRES1=LOW(1);
                   CTGTYPE=LOW(1);
                   CTGNOFLD=0;
                   CTGFDBK=0;
                   CTGFBFLG='0'B;
                   CTGRES2=LOW(1);
                   CTGJSCB=NULLPTR;
                   XREF=32760;           /* WAS 8190 #######*/
                   RET=40;
                   DO WHILE(RET=40);
                        ALLOCATE MYWKA SET(PARMPTR);
                        CTGWKA=ADDR(MYWKLEN);
                        USELEN=4;
                        CALL SYSSV26(CTGPL,RET);
                        IF RET=40
                             THEN DO;
                                  XREF=USELEN;
                                  FREE MYWKA;
                                  END;
                        END;
                   IF RET^=0 × USELEN=4
                        THEN DO;
                             FREE MYWKA;
                             PARMPTR=NULL;
                             RETURN;
                             END;
                   NXTDSNPT=ADDR(MYWKSTR);
                   END;
         TYPE=NXTTYPE;
         CALL SUFFIX(DSNSTR,' ',I);
         DSN=SUBSTR(DSNSTR,1,I);
         WRKPTR=NXTDSNPT;
         WRKADJ=WRKADJ+45;
         NXTDSNPT=WRKPTR;
         USELEN=USELEN-45;
         RET=0;
         IF USELEN=4
              THEN DO;
                   FREE MYWKA;
                   PARMPTR=NULL;
                   END;
         END;
