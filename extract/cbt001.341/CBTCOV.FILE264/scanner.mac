 /* SCANNER */
 /*
0*$.HE GENERALIZED SUBROUTINES - SCANNER
0*$.HE PARSING SCANNER
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$06/26/82
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  SCANNER
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS SUBROUTINE MAY BE USED TO TOKENIZE A LINE OF TEXT.
0*$SEE ALL DOCUMENTATION FOR THE POLISH AND EVAL SUBROUTINES.
0*$FOR AN EXAMPLE OF USE, SEE THE SOURCE PROGRAM FOR THE CALC
0*$TSO COMMAND PROCESSOR.
0*$CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
0*$.SP 1
0*$SCANPARM IS A STRUCTURE OF THE FOLLOWING FORMAT:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL 1 SCANPARM,
0*$ 2 TOKHDR PTR,
0*$   ** THIS WILL BE SET TO THE ADDR OF THE FIRST TOKEN **
0*$   ** DESCRIPTOR (SEE STRUCTURE TOKEN BELOW) IN       **
0*$   ** CMDDATA, AND SHOULD BE SET TO NULL BY THE       **
0*$   ** CALLER BEFORE CALLING SCANNER THE FIRST TIME.   **
0*$ 2 CURTOK PTR,
0*$   ** THIS WILL BE SET TO THE ADDR OF THE CURRENT     **
0*$   ** TOKEN DESCRIPTOR (SEE STRUCTURE TOKEN BELOW).   **
0*$   ** NOTE THAT AT ENTRY, SCANNER WILL CHECK TO SEE   **
0*$   ** CURTOK POINTS AT THE MOST RECENTLY CREATED      **
0*$   ** TOKEN DESCRIPTOR.  IF NOT, CURTOK WILL BE SET   **
0*$   ** VALUE OF CURTOK->NEXT_TOKEN.  THIS ALLOWS THE   **
0*$   ** CALLER TO 'BACK UP' DURING A PARSING SCAN.      **
0*$ 2 SCANIX FIXED BIN(15,0);
0*$   ** SHOULD BE SET BY THE CALLER TO 1 BEFORE CALLING **
0*$   ** SCANNER THE FIRST TIME.  SCANNER WILL UPDATE    **
0*$   ** THIS FIELD TO POINT TO THE NEXT AVAILABLE       **
0*$   ** AFTER THE TOKEN RETURNED ON A GIVEN INVOCATION. **
0*$.IN 0
0*$.SP 1
0*$FOLLOWING IS THE DESCRIPTION OF THE TOKEN DESCRIPTOR BUILT
0*$BY SCANNER:
0*$.IN 5
0*$.SP 1
0*$DCL 1 TOKEN BASED(TOKPTR),
0*$  2 PRIOR_TOKEN PTR,
0*$    ** PTR TO THE PREVIOUS TOKEN IN THE QUEUE POINTED TO BY **
0*$    ** TOKHDR.                                              **
0*$  2 NEXT_TOKEN PTR,
0*$    ** PTR TO THE NEXT TOKEN IN THE QUEUE POINTED TO BY     **
0*$    ** TOKHDR.                                              **
0*$  2 ELIX FIXED BIN(15,0);
0*$    ** SCANIX VALUE AFTER THIS TOKEN WAS ENCOUNTERED **
0*$  2 TYPE FIXED BIN(15,0),
0*$    ** 0=OPERAND, 1=OPERATOR, 2=KEYWORD, 3=SPCHAR **
0*$    ** 4=QUOTED STRING, 5=NUMERIC CONSTANT        **
0*$    ** 6=NO MORE TOKENS, 7=OTHER, 8=HEX CONSTANT  **
0*$  2 SUBTYPE FIXED BIN(15,0),
0*$    ** IF TYPE=OPERATOR,KEYWORD,SPCHAR, SUBTYPE WILL CONTAIN **
0*$    ** THE INDEX TO OPERATORS,KEYWORDS,OR SPCHARS TO THE     **
0*$    ** APPROPRIATE ENTRY.
0*$  2 TOKSTR CHAR(256) VAR;
0*$    ** CONTAINS TOKEN STRING FROM CMDDATA.  IN THE CASE OF A **
0*$    ** QUOTED STRING, THE SURROUNDING QUOTES WILL HAVE BEEN  **
0*$    ** REMOVED, AND ANY CONTAINED DOUBLE QUOTES WILL HAVE    **
0*$    ** BEEN REDUCED TO A SINGLE QUOTE.  IN THE CASE OF A     **
0*$    ** HEX CONSTANT, TOKSTR WILL BE EIGHT BYTES IN LENGTH,   **
0*$    ** AND WILL CONTAIN A FLOAT DEC(16) VALUE EQUIVALENT TO  **
0*$    ** THE HEX CONSTANC.                                     **
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$IF A TOKEN IS IDENTIFIED TO BE AN OPERAND, TOKSTR WILL BEGIN WITH
0*$AN ALPHABETIC CHARACTER 'A' TO 'Z', AND WILL BE FOLLOWED BY FROM
0*$1 TO 255 CHARACTERS WHICH MAY BE ANY COMBINATION OF THE CHARACTERS
0*$'A' TO 'Z', '0' TO '9', AND THE UNDERSCORE CHARACTER, '_'.
0*$.SP 1
0*$CMDDATA IS CHAR(*) VAR, AND SHOULD BE SET BY THE CALLER TO THE
0*$STRING OF TEXT TO BE TOKENIZED.
0*$.SP 1
0*$OPERATORS IS AN ARRAY OF CHAR(*) VAR, AND SHOULD BE SET BY THE
0*$CALLER TO THE STRINGS THAT ARE TO BE RECOGNIZED AS OPERATORS.
0*$NOTE THAT IN THE CASE OF OPERATORS '>' AND '>=', FOR EXAMPLE,
0*$THE OPERAND '>=' SHOULD APPEAR IN THE TABLE FIRST.  THIS IS SO
0*$THE OPERAND '>' WON'T BE SCANNED FOR BEFORE '>=' IS TRIED.
0*$.SP 1
0*$KEYWORDS IS AN ARRAY OF CHAR(*) VAR, AND SHOULD BE SET BY THE
0*$CALLER TO THE STRINGS THAT ARE TO BE RECOGNIZED AS KEYWORDS.
0*$.SP 1
0*$SPCHARS IS CHAR(*) VAR, AND SHOULD BE SET BY THE CALLER TO THE
0*$STRING OF CHARACTERS THAT ARE TO BE RECOGNIZED AS SPECIAL
0*$CHARACTERS, E.G. '(),;.'
0*$.SP 1
0*$A WORD SHOULD BE SAID ABOUT PERIODS AND NUMERIC CONSTANTS.  IN
0*$GENERAL, A PERIOD WHICH HAS A NUMERIC DIGIT 0-9 IMMEDIATELY BEFORE
0*$AND/OR IMMEDIATELY AFTER WILL BE CONSIDERED TO BE PART OF A NUMERIC
0*$CONSTANT.  THIS RULE WILL TAKE PRECEDENCE IF, FOR EXAMPLE, YOU HAVE
0*$DESIGNATED THE PERIOD AS A SPECIAL CHARACTER OR AN OPERATOR.
 */
 SCANNER: PROC(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS)
   RECURSIVE OPTIONS(REENTRANT);
   DCL NULL BUILTIN;
   DFT RANGE(*) VALUE(FIXED BIN(31,0));
   DCL CMDDATA CHAR(*) VAR;
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0);
   DCL OPERATORS(*) CHAR(*) VAR;
   DCL KEYWORDS(*) CHAR(*) VAR;
   DCL SPCHARS CHAR(*) VAR;
   DCL 1 TOKEN BASED(TOKPTR),
       /* THIS IS THE STRUCTURE DESCRIBING A TOKEN. */
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
       /* SCANIX VALUE AFTER THIS TOKEN WAS ENCOUNTERED */
     2 TYPE FIXED BIN(15,0),
       /*(0=OPERAND, 1=OPERATOR, 2=KEYWORD, 3=SPCHAR **
       ** 4=QUOTED STRING, 5=NUMERIC CONSTANT        **
       ** 6=NO MORE TOKENS, 7=OTHER                  */
     2 SUBTYPE FIXED BIN(15,0),
       /* IF TYPE=OPERATOR,KEYWORD,SPCHAR, SUBTYPE WILL CONTAIN **
       ** THE INDEX TO OPERATORS,KEYWORDS,OR SPCHARS TO THE     **
       ** APPROPRIATE ENTRY.                                    */
     2 TOKSTR CHAR(256) VAR;
   DCL OPERAND          INIT(0) FIXED STATIC;
   DCL OPERATOR         INIT(1) FIXED STATIC;
   DCL KEYWORD          INIT(2) FIXED STATIC;
   DCL TYPE_SPCHAR      INIT(3) FIXED STATIC;
   DCL QUOTED_STRING    INIT(4) FIXED STATIC;
   DCL NUMERIC_CONSTANT INIT(5) FIXED STATIC;
   DCL NO_MORE_TOKENS   INIT(6) FIXED STATIC;
   DCL OTHER            INIT(7) FIXED STATIC;
   DCL HEX_STRING       INIT(11) FIXED STATIC;
   DCL SETCAPS ENTRY;
   DCL PREFIX ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SCANLN FIXED BIN(15,0);
     /* LENGTH OF CMDDATA */
   DCL ALPHATAB CHAR(55) VAR STATIC
     INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
     /* ALPHATAB CONTAINS ALL ACCEPTABLE ALPHABETIC CHARACTERS */
   DCL NUMTAB CHAR(10) VAR STATIC INIT('0123456789');
     /* NUMTAB CONTAINS ALL ACCEPTABLE NUMERIC CHARACTERS */
   IF TOKHDR=NULL
     THEN CURTOK=NULL;
     ELSE DO;
       IF CURTOK=NULL
         THEN CURTOK=TOKHDR;
         ELSE IF CURTOK->NEXT_TOKEN=NULL
           THEN LEAVE;
           ELSE CURTOK=CURTOK->NEXT_TOKEN;
       RETURN;
       END;
   ALLOCATE TOKEN;
   IF TOKHDR=NULL
     THEN DO;
       CURTOK,TOKHDR=TOKPTR;
       NEXT_TOKEN,PRIOR_TOKEN=NULL;
       END;
     ELSE DO;
       CURTOK->NEXT_TOKEN=TOKPTR;
       PRIOR_TOKEN=CURTOK;
       NEXT_TOKEN=NULL;
       CURTOK=TOKPTR;
       END;
   SCANLN=LENGTH(CMDDATA);
   IF SCANIX <= SCANLN
     THEN DO SCANIX=SCANIX TO SCANLN
       UNTIL(SUBSTR(CMDDATA,SCANIX,1)^=' '); /* SKIP OVER BLANKS */
       END;
   TOKEN.TYPE,TOKEN.SUBTYPE=0;
   IF SCANIX > SCANLN
     THEN TOKSTR='';
     ELSE DO;
       TOKSTR=SUBSTR(CMDDATA,SCANIX,1);
       SCANIX=SCANIX+1;
       END;
   SELECT;
     WHEN(TOKSTR='.') CALL DOPERIOD; /* HANDLE PERIOD SPECIAL */
     WHEN(TOKSTR='') TOKEN.TYPE=NO_MORE_TOKENS; /* ALL DONE */
     WHEN(HEX); /* CHECK FOR HEXADECIMAL CONSTANT */
     WHEN(INDEX(ALPHATAB,TOKSTR)^=0) CALL DOALPHA; /* ALPHABETIC */
     WHEN(INDEX(NUMTAB,TOKSTR)^=0) CALL DONUMBER; /* NUMERIC */
     WHEN(TOKSTR='''') CALL DOQUOTE; /* QUOTED STRING */
     WHEN(INDEX(SPCHARS,TOKSTR)^=0) CALL DOSPCHAR; /* SPCHAR */
     OTHERWISE CALL DOOPER; /* CHECK FOR OPERATOR */
     END;
   ELIX=SCANIX;
   RETURN; /* END OF MAINLINE SCAN CODE */
 DOSPCHAR: PROC;
 /**********************************************************************
 * CALLED TO PROCESS SPECIAL CHARACTER.                                *
 **********************************************************************/
   TOKEN.TYPE=TYPE_SPCHAR;
   TOKEN.SUBTYPE=INDEX(SPCHARS,TOKSTR);
   END DOSPCHAR;
 DOPERIOD: PROC;
 /**********************************************************************
 * DOPERIOD IS CALLED WHENEVER THE FIRST CHARACTER OF THE NEXT TOKEN IS*
 * RECOGNIZED TO BE A PERIOD.  IF IT IS IMMEDIATELY FOLLOWED BY A      *
 * NUMERIC DIGIT 0-9, IT WILL BE RECOGNIZED AS A NUMERIC CONSTANT.     *
 * OTHERWISE, FURTHER CHECKING WILL BE DONE.                           *
 **********************************************************************/
   IF SCANIX<=SCANLN
     THEN IF INDEX(NUMTAB,SUBSTR(CMDDATA,SCANIX,1))^=0
       THEN DO;
         CALL DONUMBER; /* IT IS A NUMBER */
         RETURN;
         END;
   IF INDEX(SPCHARS,TOKSTR)^=0
     THEN CALL DOSPCHAR;
     ELSE DO;
       CALL DOOPER; /* CHECK FOR OPERATOR */
       IF TOKEN.TYPE=OTHER
         THEN TOKEN.TYPE=NUMERIC_CONSTANT; /* MISSING VALUE */
       END;
   END DOPERIOD;
 DOALPHA: PROC;
 /**********************************************************************
 * DOALPHA IS CALLED WHENEVER THE FIRST CHARACTER OF THE NEXT TOKEN IS *
 * RECOGNIZED TO BE ALPHABETIC.                                        *
 **********************************************************************/
   DCL CH CHAR(1);
   DCL I FIXED BIN(31,0);
   TOKEN.TYPE=OPERAND; /* DEFAULT TOKEN TYPE TO OPERAND */
   DO SCANIX=SCANIX TO SCANLN;
     CH=SUBSTR(CMDDATA,SCANIX,1); /* CH=CURRENT CHARACTER */
     IF INDEX(ALPHATAB,CH)=0 & INDEX(NUMTAB,CH)=0 & CH^='_'
       THEN LEAVE; /* END OF NAME STRING */
     TOKSTR=TOKSTR××CH; /* NAMES LONGER THAN 80 WILL GET TRUNCATED */
     END;
   CALL SETCAPS(TOKSTR);
   /* NOW FIND OUT IF THE OPERAND IS A KEYWORD */
   DO I=1 TO HBOUND(KEYWORDS,1) WHILE(KEYWORDS(I)^=TOKSTR);
     END;
   IF I<=HBOUND(KEYWORDS,1) /* IS IT A KEYWORD? */
     THEN DO; /* IT IS A KEYWORD */
       TOKEN.TYPE=KEYWORD;
       TOKEN.SUBTYPE=I;
       END;
   END DOALPHA;
 DONUMBER: PROC;
 /**********************************************************************
 * DONUMBER IS CALLED WHEN THE NEXT CHARACTER SCANNED IS RECOGNIZED TO *
 * BE A DIGIT 0 THRU 9, OR PERHAPS A PERIOD.                           *
 **********************************************************************/
   DCL CH CHAR(1);
   TOKEN.TYPE=NUMERIC_CONSTANT;
   DO SCANIX=SCANIX TO SCANLN;
     CH=SUBSTR(CMDDATA,SCANIX,1); /* CH=CURRENT CHARACTER */
     IF INDEX(NUMTAB,CH)=0 & CH^='.'
       THEN LEAVE; /* END OF NUMERIC CONSTANT */
     TOKSTR=TOKSTR××CH;
     END;
   END DONUMBER;
 DOOPER: PROC;
 /**********************************************************************
 * DOOPER IS CALLED WHEN IT IS RECOGNIZED THAT THE NEXT TOKEN IS       *
 * EITHER AN OPERATOR OR AN UNKNOWN.                                   *
 **********************************************************************/
   DCL I FIXED BIN(15,0);
   TOKEN.TYPE=OPERATOR;
 OPLUP:
   DO I = 1 TO HBOUND(OPERATORS,1);
     IF TOKSTR=SUBSTR(OPERATORS(I),1,1)
       THEN IF LENGTH(OPERATORS(I))=1
         THEN LEAVE OPLUP;
         ELSE IF SCANIX<=SCANLN
           THEN IF SUBSTR(CMDDATA,SCANIX,1)=SUBSTR(OPERATORS(I),2,1)
             THEN DO;
               TOKSTR=TOKSTR××SUBSTR(CMDDATA,SCANIX,1);
               SCANIX=SCANIX+1;
               LEAVE OPLUP;
               END;
     END;
   IF I>HBOUND(OPERATORS,1)
     THEN DO;
       TOKEN.TYPE=OTHER;
       RETURN;
       END;
   TOKEN.SUBTYPE=I;
   END DOOPER;
 DOQUOTE: PROC;
 /**********************************************************************
 * DOQUOTE IS CALLED TO PROCESS QUOTED STRINGS.                        *
 **********************************************************************/
   DCL I FIXED BIN(15,0);
   DCL QSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),
     CHAR(*) VAR, FIXED BIN(15,0));
   TOKEN.TYPE=QUOTED_STRING;
   CALL QSTR(CMDDATA,SCANIX-1,TOKEN.TOKSTR,I);
   SCANIX=I;
   IF SCANIX=0
     THEN DO; /* MISSING QUOTE AT END OF STRING */
       TOKEN.TYPE=OTHER;
       SCANIX=LENGTH(CMDDATA)+1;
       END;
   END DOQUOTE;
 HEX: PROC RETURNS(BIT(1));
 /**********************************************************************
 * HEX IS CALLED TO TEST FOR A HEXADECIMAL CONSTANT IN THE STREAM.     *
 **********************************************************************/
   DCL TRIN ENTRY;
   DCL I FIXED BIN(15,0);
   DCL C CHAR(1);
   DCL INSTR CHAR(80) VAR;
   DCL ZEROS CHAR(8) STATIC INIT((8)'0');
   DCL TRINBIN FIXED BIN(31,0),
       TRINSTR CHAR(4) BASED(ADDR(TRINBIN));
   DCL RETFLOAT DEC FLOAT(16),
       RET CHAR(8) BASED(ADDR(RETFLOAT));

   IF SCANIX>=SCANLN
     THEN RETURN('0'B); /* NOT HEX */
   C=TOKSTR;
   CALL SETCAPS(C);
   IF C^='X'
     THEN RETURN('0'B); /* NOT HEX */
   IF SUBSTR(CMDDATA,SCANIX,1)^=''''
     THEN RETURN('0'B); /* NOT HEX */
   SCANIX=SCANIX+1;
   CALL DOQUOTE;
   IF TOKEN.TYPE=OTHER
     THEN RETURN('0'B); /* NOT HEX */
   TOKEN.TYPE=OTHER; /* DEFAULT */
   CALL SETCAPS(TOKSTR);
   IF VERIFY(TOKSTR,'ABCDEF0123456789')^=0
     THEN RETURN('0'B); /* NOT HEX */
   IF LENGTH(TOKSTR)>8
     THEN RETURN('0'B); /* NOT HEX */
   IF LENGTH(TOKSTR)<8
     THEN INSTR=SUBSTR(ZEROS,1,8-LENGTH(TOKSTR))××TOKSTR;
     ELSE INSTR=TOKSTR;
   CALL TRIN(INSTR,TRINSTR);
   RETFLOAT=TRINBIN;
   TOKSTR=RET;
   TOKEN.TYPE=HEX_STRING;
   RETURN('1'B);
   END HEX;
   END SCANNER;
