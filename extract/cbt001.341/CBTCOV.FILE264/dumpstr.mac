 /* DUMPSTR/DUMPSTT */
 /*
0*#.HE GENERALIZED SUBROUTINES - DUMPSTT
0*$.HE GENERALIZED SUBROUTINES - DUMPSTR
0*$.HE HEX DUMP A CHAR STRING TO SYSPRINT
0*#.HE HEX DUMP A CHAR STRING TO SYSPRINT
0*$.PL 55
0*#.PL 55
0*$.PN 0
0*#.PN 0
0*$.PA
0*#.PA
0*$.SS
0*#.SS
0*$.NF
0*#.NF
0*$10/28/75
0*#1/6/77
0*$AUTHOR: T. SMITH
0*#AUTHOR: T. SMITH
0*$SOURCE MODULE NAME:  DUMPSTR
0*#SOURCE MODULE NAME:  DUMPSTR
0*$DOCUMENTATION ID:  0*$
0*#DOCUMENTATION ID:  0*3
0*$.FI L
0*#.FI L
0*$.SP 5
0*#.SP 5
0*$.FI L
0*#.FI L
0*$.SP 5
0*#.SP 5
0*$THIS SUBROUTINE PROVIDES THE PLI PROGRAMMER WITH THE CAPABILITY
0*$OF PRINTING A HEXADECIMAL DUMP ON SYSPRINT OF A SPECIFIED CHARACTER
0*$STRING.
0*#THIS SUBROUTINE PROVIDES THE PLI PROGRAMMER WITH THE CAPABILITY
0*#OF PRINTING A HEXADECIMAL DUMP ON SYSPRINT OF A SPECIFIED CHARACTER
0*#STRING.  THE DIFFERENCE BETWEEN THIS SUBROUTINE AND DUMPSTR IS THAT
0*#THIS SUBROUTINE PRINTS 16 HEXADECIMAL BYTES PER LINE INSTEAD OF 32.
0*$.SP 1
0*$CALL DUMPSTR (STRING);
0*$.SP 1
0*#.SP 1
0*#CALL DUMPSTT (STRING);
0*#.SP 1
0*#STRING MUST BE DEFINED AS A CHARACTER AND CAN BE UP TO 32,767 BYTES
0*#IN LENGTH.
0*$STRING MUST BE DEFINED AS A CHARACTER AND CAN BE UP TO 32,767 BYTES
0*$IN LENGTH.  THE FIRST TIME DUMPSTR IS INVOKED, IT WILL ATTEMPT TO
0*$OPEN SYSPRINT WITH A LINESIZE OF 132.  IF SYSPRINT IS ALREADY
0*$OPEN, THIS BECOMES A NULL OPERATION.  DUMPSTR EXPECTS SYSPRINT TO
0*$HAVE A LINESIZE OF 132.  IF IT DOES NOT, THE HEXADECIMAL
0*$DUMP OF THE SPECIFIED CHARACTER STRING WILL STILL BE DONE, BUT THE
0*$FORMAT MIGHT NOT BE AS EASILY READ.
 */
 % DCL @COL FIXED;
   /* @COL = COLUMN FOR PRINTED TEXT = 83 FOR B, 44 FOR T */
 % DCL @STR FIXED;
   /* @STR IS LEN OF HEX DATA PER LINE = 32 FOR B, 16 FOR T */
 % DCL @PATH CHAR;
   /* @PATH IS SET TO T FOR DUMPSTT, AND B FOR DUMPSTR */
 % @PATH = 'T';
 % IF @PATH = 'B'
      % THEN % DO;
           % @STR = 32;
           % @COL = 83;
 DUMPSTR: PROC (STRPTR);
         DCL OPENSW BIT(1) STATIC INIT('1'B);
         IF OPENSW
              THEN DO;
                   OPEN FILE(SYSPRINT) LINESIZE(132);
                   OPENSW = '0'B;
                   END;
           % END;
      % ELSE % DO;
 DUMPSTT: PROC (STRPTR);
           % @STR = 16;
           % @COL = 44;
           % END;
         DCL STRPTR PTR;
         %DCL COMPILER CHAR;
         %COMPILER = 'O';
         %IF COMPILER = 'O'
              %THEN %DO;
         DCL 1 SDV BASED(SDVPTR),
              2 SDVSTRPT PTR,
              2 MAXLEN FIXED BIN(15,0),
              2 VFLAG BIT(1);
         DCL CURLEN FIXED BIN(15,0) BASED(CURLPTR);
         SDVPTR = ADDR(STRPTR);
         WORDPTR = STRPTR;
         IF VFLAG
              THEN DO;
                   CURLPTR = WORDPTR;
                   PTRFIX = PTRFIX + 2;
                   END;
              ELSE CURLPTR = ADDR(MAXLEN);
                   %END;
              %ELSE %DO;
         DCL 1 SDV BASED (SDVPTR),
              2 PAD CHAR(4),
              2 MAXLEN FIXED BIN(15,0),
              2 CURLEN FIXED BIN(15,0);
         SDVPTR = ADDR(STRPTR);
         WORDPTR = STRPTR;
              %END;
         DCL OFFSET FIXED BIN(15,0) INIT(0),
              OFFSETD CHAR(2) DEF OFFSET,
              OFFSETP CHAR(4);
         CARCTL = 2;
         DCL WORD CHAR(4) BASED(WORDPTR);
         DCL PTRFIX FIXED BIN(31,0) DEF WORDPTR;
         DCL WORDP CHAR(8);
         DCL TRSTR CHAR(@STR);
         DCL STR32 CHAR(@STR) BASED(WORDPTRA);
 %IF @PATH = 'T'
   % THEN % DO;
         DCL 1 TRTAB STATIC,
 /*  0 */     2 PAD1A CHAR(64) INIT((64)'.'),
 /* 40 */     2 PAD1B CHAR(1) INIT(' '),
 /* 41 */     2 PAD1C CHAR(10) INIT((10)'.'),
 /* 4B */     2 PAD1D CHAR(6) INIT('.<(+×&'),
 /* 51 */     2 PAD1E CHAR(10) INIT((10)'.'),
 /* 5B */     2 PAD1F CHAR(7) INIT('$*);^-/'),
 /* 62 */     2 PAD1G CHAR(9) INIT((9)'.'),
 /* 6B */     2 PAD1H CHAR(5) INIT(',%_>?'),
 /* 70 */     2 PAD1J CHAR(10) INIT((10)'.'),
 /* 7A */     2 PAD1K CHAR(7) INIT(':#@''=".'),
 /* 81 */     2 LOCHA CHAR(9) INIT('abcdefghi'),
 /* 8a */     2 PAD1L CHAR(7) INIT((7)'.'),
 /* 91 */     2 LOCHB CHAR(9) INIT('jklmnopqr'),
 /* 9a */     2 PAD2L CHAR(8) INIT((8)'.'),
 /* A2 */     2 LOCHC CHAR(8) INIT('stuvwxyz'),
 /* AA */     2 PAD3L CHAR(23) INIT((23)'.'),
 /* C1 */     2 PAD2 CHAR(9) INIT('ABCDEFGHI'),
 /* CA */     2 PAD3 CHAR(7) INIT ((7)'.'),
 /* D1 */     2 PAD4 CHAR(9) INIT('JKLMNOPQR'),
 /* DA */     2 PAD4A CHAR(8) INIT((8)'.'),
 /* E2 */     2 PAD5 CHAR(8) INIT('STUVWXYZ'),
 /* EA */     2 PAD6 CHAR(6) INIT((6)'.'),
 /* F0 */     2 PAD7 CHAR(10) INIT('0123456789'),
 /* FA */     2 PAD8 CHAR(6) INIT((6)'.');
    % END;
  % ELSE % DO;
         DCL 1 TRTAB STATIC,
 /*  0 */     2 PAD1A CHAR(64) INIT((64)'.'),
 /* 40 */     2 PAD1B CHAR(1) INIT(' '),
 /* 41 */     2 PAD1C CHAR(10) INIT((10)'.'),
 /* 4B */     2 PAD1D CHAR(6) INIT('.<(+×&'),
 /* 51 */     2 PAD1E CHAR(10) INIT((10)'.'),
 /* 5B */     2 PAD1F CHAR(7) INIT('$*);^-/'),
 /* 62 */     2 PAD1G CHAR(9) INIT((9)'.'),
 /* 6B */     2 PAD1H CHAR(5) INIT(',%_>?'),
 /* 70 */     2 PAD1J CHAR(10) INIT((10)'.'),
 /* 7A */     2 PAD1K CHAR(5) INIT(':#@''='),
 /* 7F */     2 PAD1I CHAR(66) INIT((66)'.'),
 /* C1 */     2 PAD2 CHAR(9) INIT('ABCDEFGHI'),
 /* CA */     2 PAD3 CHAR(7) INIT ((7)'.'),
 /* D1 */     2 PAD4 CHAR(9) INIT('JKLMNOPQR'),
 /* DA */     2 PAD4A CHAR(8) INIT((8)'.'),
 /* E2 */     2 PAD5 CHAR(8) INIT('STUVWXYZ'),
 /* EA */     2 PAD6 CHAR(6) INIT((6)'.'),
 /* F0 */     2 PAD7 CHAR(10) INIT('0123456789'),
 /* FA */     2 PAD8 CHAR(6) INIT((6)'.');
    %END;
         GO TO NXTA;
 NXT:
         OFFSET = OFFSET + @STR;
 NXTA:
         WORDPTRA = WORDPTR;
         IF OFFSET >= CURLEN
              THEN RETURN;
         L = CURLEN - OFFSET;
         IF L > @STR
              THEN L = @STR;
         CALL TROUT(OFFSETD,OFFSETP);
         PUT EDIT(OFFSETP)(A) SKIP(CARCTL);
         CARCTL = 1;
         % IF @PATH = 'B'
              % THEN % DO;
         DO K = 0 TO 16 BY 16;
              % END;
              % ELSE % DO;
         DO K = 0;
              % END;
              DO I = 0 TO 12 BY 4;
                   J = L - I - K;
                   IF J <= 0
                             THEN GO TO TR;
                   IF J > 4
                             THEN J = 4;
                   CALL TROUT(SUBSTR(WORD,1,J),WORDP);
              PUT EDIT(SUBSTR(WORDP,1,2*J))(X(1),A);
                   PTRFIX = PTRFIX + 4;
                   END;
              PUT EDIT('   ')(A);
              END;
 TR:
         TRSTR = SUBSTR(STR32,1,L);
         CALL XLATE(TRSTR,TRTAB);
         PUT EDIT('*',TRSTR,'*')(COL(@COL),A,A,A);
         GO TO NXT;
         END;
