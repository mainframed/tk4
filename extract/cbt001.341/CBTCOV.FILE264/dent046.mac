 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT046 - CLIST,,CLISTEND,DATAENT,ENTER */
   % DCL @PROCNAME CHAR;
   % @PROCNAME = 'DENT046';
   % INCLUDE DENTSUB;
   /* CLIST <NAME> <OPERANDS> */
   % INCLUDE IKJECT;
   % INCLUDE DENTPFD;
   DCL (STRHD,SAVELPT) PTR;
   DCL PSTR CHAR(6000) VAR;
   DCL DENTPDF ENTRY(CHAR(32767) VAR, FIXED BIN(15,0))
     RETURNS(PTR);
   DCL MCURLOC FIXED BIN(15,0);
   DCL STELP PTR BASED(STPTR);
   DCL STEL BIT(1) BASED(STELP);
   DCL TERMSW BIT(1);
   DCL PREFIX ENTRY(CHAR(*),CHAR(*)) RETURNS(FIXED BIN(15,0));
   DCL (MYCMD,STORE_CMD,FULLSCR_CMD) CHAR(256) VAR;
   DCL HELPSTR CHAR(4) VAR STATIC INIT('');
   DCL ORGPTR PTR;
   DCL SUFFIX ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   ORGPTR=RECPTR;
   SELECT(CMDINDX);
     WHEN(1,2) CALL CLIST; /* IT IS CLIST */
     WHEN(3) CALL CLISTEND; /* IT IS CLISTEND */
     WHEN(4) CALL DATAENT; /* IT IS DATAENT */
     OTHERWISE CALL ENTER; /* IT IS ENTER */
     END; /* SELECT */

 CLIST: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A CLIST SUBCOMMAND.                               *
 *                                                                     *
 **********************************************************************/
   RHRC=8;
   I=INDEX(LASTCMD,' ');
   IF I=0
     THEN RETURN;
   J=PREFIX(SUBSTR(LASTCMD,I+1),' ')+I;
   IF I=J
     THEN RETURN;
   IF RHECT->ECTIOWA->STELP->STEL /* '1'B IF NOT IN CLIST */
     THEN IF HARDCOPY
       THEN CALL #STACK('CLISTEND HARDCOPY');
       ELSE CALL #STACK('CLISTEND FULLSCR');
   I=#CMD('HARDCOPY',RHPTR,SUBENT,RHHDRPT);
   IF I^=0
     THEN SIGNAL ERROR;
   SUBENT(23)=SUBENT(45); /* SET FOR CLIST SYMC */
   SUBENT(24)=SUBENT(46); /* SET FOR CLIST REP@ */
   SUBENT(28)=SUBENT(47); /* SET FOR CLIST SET@ */
   CALL #DOCMD('%'××SUBSTR(LASTCMD,J),HELPSTR);
   CMDDATA='HARDCOPY';
   RHRC=0;
   END CLIST;

 CLISTEND: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A CLISTEND SUBCOMMAND.                            *
 *                                                                     *
 **********************************************************************/
   SUBENT(23)=SUBENT(42); /* RESTORE SSE SYMC */
   SUBENT(24)=SUBENT(43); /* RESTORE SSE REP@ */
   SUBENT(28)=SUBENT(44); /* RESTORE SSE SET@ */
   CMDDATA=PARY(2);
   RHRC=0;
   END CLISTEND;

 DATAENT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A DATAENT SUBCOMMAND.                             *
 *                                                                     *
 **********************************************************************/
   ON CONDITION(BADENT) BEGIN;
     MSGDATA='ERROR DURING DATAENT PROCESSING';
     RHRC=16;
     GO TO EOJ;
     END;
   RHRC=0;
   FULLSCR_CMD='$FULLSCR '××PARY(2);
   STORE_CMD='$STORE'××SUBSTR(LASTCMD,8);
   DO UNTIL(#SYMC('&'××'PFK')^='00000');
     I=#CMD(FULLSCR_CMD,RHPTR,SUBENT,RHHDRPT);
     IF I^=0
       THEN SIGNAL CONDITION(BADENT);
     I=#CMD(STORE_CMD,RHPTR,SUBENT,RHHDRPT);
     IF I^=0
       THEN SIGNAL CONDITION(BADENT);
     END;
   IF ORGPTR=HDPTR
     THEN ORGPTR=NXTHDR;
   CALL #NC(RHPTR,SUBENT,ORGPTR);
   END DATAENT;

 ENTER: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS AN ENTER SUBCOMMAND.                              *
 *                                                                     *
 **********************************************************************/
   DCL (TITLINE,DATALINE) CHAR(256) VAR INIT('');
   DCL SEP CHAR(1) INIT('@');
   DCL (I,J,K,L,M,N,R) FIXED BIN(31,0);
   DCL SAVLST PTR;
   DCL CMD CHAR(256) VAR;
   DCL 1 SREL BASED(SRELPTR),
     2 SRELNXT PTR,
     2 SRELPOS FIXED BIN(15,0),
     2 SRELLNG FIXED BIN(15,0);
   DCL SRELHDR PTR;
   SAVLST=LSTHDR;
   SRELHDR=NULL;
   IF RHUSEHD=NULL
     THEN DO;
       MSGDATA='NO VIEW DEFINED OVER THIS DATASET';
       RHRC=8;
       RETURN;
       END;
   K=1; /* K=POSITION OF DATA BEFORE SHIFTS */
   M=0; /* # POSITIONS ALREADY SHIFTED */
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     IF RHNLNG=0
       THEN DO;
         MSGDATA='ENTER DOES NOT ALLOW FREE-FORM FIELDS';
         RHRC=8;
         RETURN;
         END;
     IF RHNTYPE^=2 & RHNTYPE^=3
       THEN DO;
         MSGDATA='ENTER ALLOWS ONLY ZONED AND CHAR FIELD TYPES';
         RHRC=8;
         RETURN;
         END;
     N=SUFFIX(RHNNAME,' '); /* FIND LAST NON-BLANK */
     L=MAX(N,RHNLNG); /* SCREEN LENGTH REQUIRED */
     IF LENGTH(TITLINE)+L+1 > PLINESIZE
       THEN DO;
         MSGDATA='FIELDS WON''T FIT ON A SINGLE SCREEN LINE';
         RHRC=8;
         RETURN;
         END;
     TITLINE=TITLINE××SEP××SUBSTR(RHNNAME,1,N);
     SEP=' ';
     R=RHNLNG-N-1; /* REPEAT ARGUMENT */
     IF R>=0
       THEN TITLINE=TITLINE××REPEAT(' ',R);
     DATALINE=DATALINE××'&'××REPEAT('X',RHNLNG-1);
     IF RHNLNG<N
       THEN DATALINE=DATALINE××'@'××REPEAT(' ',N-RHNLNG-1);
     IF RHNPOS-K-M>0
       THEN DO; /* PADDING POINT */
         ALLOCATE SREL;
         SRELNXT=SRELHDR;
         SRELHDR=SRELPTR;
         SRELPOS=K;
         SRELLNG=RHNPOS-K-M;
         M=M+SRELLNG;
         END;
     K=K+RHNLNG; /* NEXT POTENTIAL PADDING POINT */
     END;
   IF LENGTH(TITLINE)<PLINESIZE
     THEN DO;
       TITLINE=TITLINE××' ';
       DATALINE=DATALINE××'@';
       R=PLINESIZE-LENGTH(TITLINE)-1;
       IF R>=0
         THEN DO;
           TITLINE=TITLINE××REPEAT(' ',R);
           DATALINE=DATALINE××REPEAT(' ',R);
           END;
       END;
   PSTR=TITLINE××REPEAT(DATALINE,PSCREENLEN-2);
   MCURLOC=PLINESIZE+1;
   CALL PDFQ;
   PARY(2)=RHNAME;
   LASTCMD='DATAENT '××RHNAME××' BR(1) ';
   CALL DATAENT;
   IF SAVLST^=LSTHDR
     THEN DO; /* RECORDS WERE ADDED */
       IF SAVLST=HDPTR
         THEN I=NXTHDR->RECSEQ; /* I=STARTING SEQUENCE # */
         ELSE I=SAVLST->NXTPTR->RECSEQ;
       J=LSTHDR->RECSEQ; /* J=ENDING SEQUENCE # */
       DO SRELPTR=SRELHDR REPEAT SRELHDR WHILE(SRELPTR^=NULL);
         PUT STRING(CMD) EDIT('SR ',I,J,SRELLNG,SRELPOS)
           (A,4 (X(1),P'ZZZZZZZ9'));
         SRELHDR=SRELNXT;
         FREE SREL;
         K=#CMD(CMD,RHPTR,SUBENT,RHHDRPT);
         END;
       END;
   END ENTER;

 PDFQ: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO QUEUE DISPLAY PANEL.                                      *
 *                                                                     *
 **********************************************************************/
   DCL QN CHAR(8);
   MCURLOC=INDEX(PSTR,'&');
   STRHD=DENTPDF(PSTR,MCURLOC); /* CONVERT TO CONTROL BLOCKS */
   QN=RHNAME;
   SAVELPT=NULL;
   DO PNLELPT=RHPNLHDR REPEAT ELNXT WHILE(PNLELPT^=NULL);
     IF ELCNT>0
       THEN IF SUBSTR(ELARY(1),7,8)=QN
         THEN LEAVE;
         ELSE;
       ELSE IF SUBSTR(ELLSTA,7,8)=QN
         THEN LEAVE;
     SAVELPT=PNLELPT;
     END;
   IF PNLELPT^=NULL
     THEN DO; /* MUST DELETE OLD VERSION */
       IF SAVELPT=NULL
         THEN RHPNLHDR=ELNXT;
         ELSE SAVELPT->ELNXT=ELNXT;
       IF ELCNT=0
         THEN FREE PNLELA;
         ELSE FREE PNLEL;
       END;
   PNLELPT=#PFO(STRHD);
   ELNXT=RHPNLHDR;
   RHPNLHDR=PNLELPT;
   IF ELCNT=0
     THEN SUBSTR(ELLSTA,7,8)=QN;
     ELSE SUBSTR(ELARY(1),7,8)=QN;
   END PDFQ;

 EOJ:;
   END DENT046;
