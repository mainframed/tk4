 /* GETWORD */
 /*
0*$.HE GENERALIZED SUBROUTINES - GETWORD/GETTOKN
0*$.HE GENERAL PL/I PARSE SUBROUTINE
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$08/20/81
0*$AUTHOR:  HOWARD GILBERT, YALE COMPUTER CENTER
0*$         MODIFIED BY T. SMITH, KIM
0*$SOURCE MODULE NAME:  GETWORD
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$GETWORD RETURNS THE NEXT WORD OR SUBSTRING IN THE SPECIFIED
0*$CHARACTER STRING.  CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL GETWORD ENTRY(CHAR(*) VAR,
0*$  FIXED BIN(15,0),FIXED BIN(15,0))
0*$  RETURNS(CHAR(1024) VAR);
0*$POSITION=0;
0*$STRING='HOW NOW BROWN COW';
0*$DO WHILE(POSITION<LENGTH(STRING));
0*$  PUT SKIP LIST(GETWORD(STRING,POSITION,RETCODE),
0*$    POSITION,RETCODE);
0*$  END;
0*$.FI L
0*$.IN 0
0*$.SP 1
0*$STRING IS A CHARACTER STRING CONTAINING THE DATA TO BE PARSED.
0*$POSITION IS THE CHARACTER OFFSET IN STRING TO BEGIN THE SYNTAX
0*$SCAN.  IT SHOULD BE INITIALIZED TO 0.  GETWORD WILL UPDATE
0*$POSITION AT EACH INVOCATION.  RETCODE WILL BE SET TO A RETURN
0*$CODE ACCORDING TO THE FOLLOWING TABLE, INDICATING THE TYPE OF
0*$ITEM RETURNED:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$0 = OBJECT, MEANING VARIABLE NAME, OR A NUMBER.
0*$            SEE ALSO ENTRY POINT GETTOKN BELOW.
0*$1 = OPERATOR, SEE ENTRY POINT GETTOKN BELOW.
0*$2 = PSTRING, MEANING (STRING) OR "STRING" WAS FOUND
0*$3 = QSTRING, MEANING 'STRING' WAS FOUND
0*$4 = KEYWORD, MEANING STRING( WAS FOUND
0*$5 = COMMA, MEANING (,) WAS FOUND
0*$6 = SEMICOLON, MEANING (;) WAS FOUND
0*$7 = EOS, MEANING POSITION POINTS BEYOND THE END OF STRING
0*$8 = GIBBERISH, USUALLY UNCLOSED QUOTE × COMMENT
0*$.SP 1
0*$.IN 0
0*$.FI L
0*$IF A COMMENT (SLASH-ASTERISK . . . ASTERISK-SLASH) IS FOUND, DURING
0*$THE SCAN, IT WILL BE BYPASSED, AND WILL NOT BE PART OF THE RETURNED
0*$VALUE.  IF THE COMMENT IS FOUND INSIDE A PARENTHESIZED STRING, IT
0*$WILL BE REPLACED WITH A SINGLE BLANK.
0*$.SP 1
0*$THE STRING RETURNED IS DELIMITED BY THE FOLLOWING:
0*$.SP 1
0*$1) IF THE FIRST NON-BLANK CHARACTER STARTING WITH THE OFFSET
0*$INDICATED BY POSITION IS '(', THEN
0*$THE WORD ENDS WHEN A BALANCING ')' IS FOUND.
0*$.SP 1
0*$2) IF IT STARTS WITH DOUBLE QUOTE '"', THEN THE
0*$WORD ENDS WHEN ANOTHER DOUBLE QUOTE IS FOUND
0*$WHICH IS NOT IMMEDIATELY FOLLOWED BY A SECOND
0*$DOUBLE QUOTE. TWO ADJACENT DOUBLE QUOTES
0*$PRODUCE ONE DOUBLE QUOTE IN THE RETURNED
0*$STRING.
0*$.SP 1
0*$3) IF IT STARTS WITH A SINGLE QUOTE ('), THE WORD
0*$IS SCANNED THE SAME AS WITH DOUBLE QUOTE, BUT
0*$ALL QUOTES IN THE WORD (INCLUDING THE STARTING
0*$AND ENDING QUOTE) ARE RETAINED.
0*$.SP 1
0*$4) IF EITHER QUOTE IS FOUND IN PARENTHESES,
0*$THEN THE SCAN PROCEEDS AS IN RULE 3) UNTIL
0*$THE QUOTE ENDS, AND PARENTHESES IN THE QUOTE
0*$ARE IGNORED, BUT AFTER THE QUOTE ENDS, THE
0*$SCAN CONTINUES TILL THE PARENTHESES ARE MATCHED.
0*$.SP 1
0*$5) OTHERWISE (IE, THE FIRST CHAR IS A LETTER OR
0*$DIGIT, ETC), THE SCAN PROCEEDS UNTIL ONE OF
0*$FOUR CHARACTERS ARE FOUND: BLANK, COLON,
0*$OPEN PARENTHESES, OR SEMICOLON.
0*$.SP 1
0*$AN ALTERNATE ENTRY POINT, GETTOKN, DIFFERS FROM GETWORD ONLY WHEN
0*$POSITION IDENTIFIES AN ITEM OTHER THAN A SEMICOLON, LEFT
0*$PARENTHESIS, SINGLE QUOTE ('), OR DOUBLE QUOTE (").  IN THAT CASE,
0*$IF THE CHARACTER IS A PERIOD, GETTOKN RETURNS THE "OPERATOR"
0*$RETURN CODE.  IF THE FIRST CHARACTER IS NOT A PERIOD, GETTOKN
0*$CHECKS TO SEE IF IT IS ALPHAMERIC (A TO Z, @, #, $, _, 0 TO 9), OR
0*$IF IT IS ONE OF THE SPECIAL CHARACTERS (ANYTHING OTHER THAN
0*$ALPHAMERIC OR ONE OF THE DELIMITERS ' ', ':', '(', ';', ',', '''',
0*$OR '"').  IF IT IS ALPHAMERIC, THE "WORD" TO BE RETURNED IS
0*$CONSIDERED TO BE DELIMITED EITHER BY ONE OF THE STANDARD DELIMITERS
0*$JUST MENTIONED, OR BY ONE OF THE SPECIAL CHARACTERS JUST MENTIONED,
0*$OR, OF COURSE, BY THE END OF THE PARAMETER STRING.  CONVERSELY, IF
0*$THE FIRST CHARACTER IS A SPECIAL CHARACTER, THE "WORD" TO BE
0*$RETURNED IS CONSIDERED TO BE DELIMITED EITHER BY ONE OF THE
0*$STANDARD DELIMITERS, OR BY AN ALPHAMERIC CHARACTER, OR THE END OF
0*$THE PARAMETER STRING.  IF THE WORD RETURNED CONSISTS OF ALPHAMERIC
0*$CHARACTERS, GETTOKN WILL RETURN THE CODE INDICATING THE WORD IS AN
0*$OBJECT.  IF THE WORD TO BE RETURNED CONSISTS OF SPECIAL CHARACTERS,
0*$GETTOKN RETURNS THE CODE INDICATING THE WORD IS AN OPERATOR.
0*$.SP 1
0*$ONE ADDITIONAL NOTE ABOUT THE OPERATION OF GETTOKN.
0*$BECAUSE OF DIFFERENT USAGE OF THE PERIOD (.) IN STRUCTURE
0*$EXPRESSIONS AND NUMERIC CONSTANTS, IT MUST BE CONSIDERED ON
0*$THE BORDER BETWEEN ALPHAMERIC AND OPERATOR. THE RULES ARE:
0*$.SP 1
0*$1) AN INITIAL PERIOD IS AN OPERATOR.
0*$.SP 1
0*$2) A PERIOD AFTER A OPERATOR CHARACTER TERMINATES THE
0*$OPERATOR.
0*$.SP 1
0*$3) A PERIOD WITHIN AN ALPHAMERIC WORD IS JUST FINE.
0*$.SP 1
0*$4) A PERIOD AT THE END OF A WORD THAT STARTS NUMERICALLY
0*$IS JUST FINE.
0*$.SP 1
0*$5) A PERIOD AT THE END OF A WORD STARTING ALPHABETICALLY
0*$IS EXCLUDED, AND WILL BE PICKED UP AS AN OPERATOR NEXT
0*$TIME.
 */
 GETWORD: PROC(STRING,POSITION,RETCODE) RETURNS(CHAR(1024) VAR);
 DCL STRING CHAR(*) VAR;
 DCL POSITION FIXED BIN;
 DCL RETCODE FIXED BIN;
 DCL OBJECT                       /* RETURN CODES FROM GETWORD/      */
         FIXED BIN STATIC INIT(0);/* GETTOKEN (VARIABLE OR NUMBER)   */
 DCL OPERATOR                     /* OPERATOR (OR SPECIALCHAR STRING)*/
         FIXED BIN STATIC INIT(1);/*                                 */
 DCL PSTRING                      /* (STRING) OR "STRING"            */
         FIXED BIN STATIC INIT(2);/*                                 */
 DCL QSTRING                      /* 'STRING'                        */
         FIXED BIN STATIC INIT(3);/*                                 */
 DCL KEYWORD                      /* STRING(                         */
         FIXED BIN STATIC INIT(4);/*                                 */
 DCL COMMA                        /* LONE COMMA (,)                  */
         FIXED BIN STATIC INIT(5);/*                                 */
 DCL SEMICOLON                    /* LONE SEMICOLON (;)              */
         FIXED BIN STATIC INIT(6);/*                                 */
 DCL EOS                          /* END OF STRING                   */
         FIXED BIN STATIC INIT(7);/*                                 */
 DCL GIBBERISH                    /* USUALLY UNCLOSED QUOTE × COMMENT*/
         FIXED BIN STATIC INIT(8);/*                                 */
 DCL STRLEN FIXED BIN;
 DCL RETSTR CHAR(1024) VAR INIT('');
 DCL PAREN FIXED BIN INIT(0);
 DCL CH CHAR(1);
 DCL QMARK CHAR(1);
 DCL ALPHANUM FIXED BIN INIT(0);
 DCL I FIXED BIN;
 DCL (LENGTH,SUBSTR) BUILTIN;
 DCL TOKEN BIT;
         TOKEN='0'B;
         GO TO JOIN;
 % SKIP(3);
 /* ENTRY        GETTOKN                                            */
 /* FUNCTION     RETURNS THE NEXT PL/I TOKEN OF THE CURRENT MACRO    */
 /*              STATEMENT.                                          */
 /* LINKAGE      SAME AS GETWORD                                     */
 /* SYNTAX       A TOKEN IS DEFINED AS A WORD, EXCEPT THAT           */
 /*              A TOKEN CAN CONTAIN ONLY ALPANUMERIC (PLUS NATIONAL */
 /*              CHARACTERS AND UNDERSCORE), OR ONLY SPECIAL         */
 /*              CHARACTERS.                                         */
 /*              THIS IS GOOD FOR PARSING NATIVE PL/I STATEMENTS.    */
 /* RETURN       SEE DECLARATIONS OF OBJECT...GIBBERISH RETURN CODES */
 /*              ABOVE. GETTOKN DOES NOT RETURN THE 'KEYWORD'       */
 /*              RETURN CODE.                                        */
 GETTOKN: ENTRY(STRING,POSITION,RETCODE) RETURNS(CHAR(1024) VAR);
         TOKEN='1'B;
 JOIN:
         STRLEN=LENGTH(STRING);
 % PAGE;
 /* BLOCK: PREWORD                                                   */
 /* FUNCTION: SKIPS BLANKS AND COMMENTS BEFORE A WORD. DETECTS A     */
 /*           COMMA AND RETURNS.                                     */
 /* ENTRY:                                                           */
 /*    POSITION POINTS TO NEXT CHAR OR PAST END OF STRING            */
 /* EXIT:                                                            */
 /*    FALLS THROUGH TO NEXTSCAN WITH UPDATED POSITION               */
 %SKIP;
 PREWORD:
         IF POSITION>0 & POSITION<STRLEN
              THEN
                   IF SUBSTR(STRING,POSITION,1)='('
                        THEN
                             POSITION=POSITION-1;
              DO POSITION=POSITION+1 TO STRLEN;
              CH=SUBSTR(STRING,POSITION,1);
              IF CH=','
                   THEN DO;
                                  RETCODE=COMMA;
                                  RETURN('');
                                  END;
                   ELSE
                        IF CH^=' '
                             THEN
                                  LEAVE;
              END;
         IF POSITION < STRLEN THEN
            IF CH='/' & SUBSTR(STRING,POSITION+1,1)='*'
               THEN DO;
                 DO POSITION=POSITION+2 TO STRLEN-1
                    WHILE(SUBSTR(STRING,POSITION,2)^='*/');
                 END;
                 IF POSITION=STRLEN THEN DO;
                    POSITION=STRLEN+1;
                    RETCODE=GIBBERISH;
                    RETURN('');
                 END;
                 POSITION=POSITION+1;
                 GO TO PREWORD;
         END;
 % PAGE;
 /* BLOCK: NEXTSCAN                                                  */
 /* FUNCTION: DETERMINE WHAT IS NEXT                                 */
 /* ENTRY:                                                           */
 /*   POSITION POINTS TO NEXT NON-BLANK, OR PAST END OF STRING       */
 /* EXIT:                                                            */
 /*   GO THE THE RIGHT BLOCK DEPENDING ON THE NEXT CHAR              */
 /*   CHAR   MEANING                                                 */
 /*   ;      END OF STATEMENT                                        */
 /*   (      PARENTHESIS VALUE                                       */
 /*   ",'    QUOTED VALUE                                            */
 /*   OTHER  KEYWORD OR POSITIONAL                                   */
 /*   POSITION IS INCREMENTED FOR '(' OR QUOTE                       */
 /*   IF WE ARE PAST END OF STRING ON ENTRY, RETURN '' RC=EOS        */
 %SKIP;
         RETCODE=EOS;
         IF POSITION>STRLEN THEN RETURN('');
 %SKIP;
         RETCODE=GIBBERISH;
         CH=SUBSTR(STRING,POSITION,1);
         IF CH=';'
              THEN
                   DO;
                   RETCODE=SEMICOLON;
                   RETURN('');
                   END;
         IF CH='('
              THEN
                   DO;
                   PAREN=1;
                   POSITION=POSITION+1;
                   GO TO PARENTHESES;
                   END;
         IF CH='''' × CH='"'
              THEN
                   DO;
                   POSITION=POSITION+1;
                   QMARK=CH;
                   GO TO QUOTE;
                   END;
 % PAGE;
 /* BLOCK: WORD                                                      */
 /* FUNCTION: TO ANALYZE A KEYWORD OR POSITIONAL PARM NOT            */
 /*     IN QUOTES                                                    */
 /* ENTRY:                                                           */
 /*     POSITION POINTS TO FIRST CHARACTER                           */
 /* EXIT:                                                            */
 /*     WHEN NEXT CHAR IS A DELIMITER (GETWORD), OR DIFFERS IN       */
 /*     ALPHAMERIC STATUS FROM THE START, RETURN INTERVENING         */
 /*     CHARACTERS. FOR GETWORD, IF NEXT CHAR IS '(', SET RC TO      */
 /*     KEYWORD. FOR GETTOKN, SET RC TO OBJECT IF ALPHANUMERIC,     */
 /*     ELSE TO OPERATOR.                                            */
 /* NOTE:                                                            */
 /*     BECAUSE OF DIFFERENT USAGE OF THE PERIOD (.) IN STRUCTURE    */
 /*     EXPRESSIONS AND NUMERIC CONSTANTS, IT MUST BE CONSIDERED ON  */
 /*     THE BORDER BETWEEN ALPHAMERIC AND OPERATOR. THE RULES ARE:   */
 /*     1) AN INITIAL PERIOD IS AN OPERATOR.                         */
 /*     2) A PERIOD AFTER A OPERATOR CHARACTER TERMINATES THE        */
 /*        OPERATOR.                                                 */
 /*     3) A PERIOD WITHIN AN ALPHAMERIC WORD IS JUST FINE.          */
 /*     4) A PERIOD AT THE END OF A WORD THAT STARTS NUMERICALLY     */
 /*        IS JUST FINE.                                             */
 /*     5) A PERIOD AT THE END OF A WORD STARTING ALPHABETICALLY     */
 /*        IS EXCLUDED, AND WILL BE PICKED UP AS AN OPERATOR NEXT    */
 /*        TIME.                                                     */
 %SKIP;
 WORD:
         RETSTR=CH;
         IF TOKEN & CH='.' THEN DO;
            RETCODE=OPERATOR;
            RETURN('.');
         END;
         IF TOKEN THEN
            ALPHANUM=VERIFY(CH,
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$_0123456789.');
              DO POSITION=POSITION+1 TO STRLEN;
              CH=SUBSTR(STRING,POSITION,1);
              IF POSITION<STRLEN THEN
                 IF CH='/' & SUBSTR(STRING,POSITION+1,1)='*'
                    THEN GO TO ENDWORD;
              IF CH=' ' × CH=':' × CH='(' × CH=';' × CH=',' ×
                 CH='''' × CH='"'
                   THEN
                        GO TO ENDWORD;
                   ELSE
                        IF TOKEN & ALPHANUM^=VERIFY(CH,
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$_0123456789.')
                           THEN GO TO ENDWORD;
                   ELSE
                        RETSTR=RETSTR××CH;
              END;
 ENDWORD:
         IF TOKEN THEN DO;
            RETCODE=ALPHANUM;
            IF CH='.' & ALPHANUM=0 & SUBSTR(RETSTR,1,1)<'0'
               THEN DO;
                  POSITION=POSITION-1;
                  RETSTR=SUBSTR(RETSTR,1,LENGTH(RETSTR)-1);
            END;
         END;
            ELSE
               IF POSITION<=STRLEN & CH='('
                  THEN
                             RETCODE=KEYWORD;
                  ELSE RETCODE=OBJECT;
         POSITION=POSITION-1;
         RETURN(RETSTR);
 % PAGE;
 /* BLOCK: PARENTHESES                                               */
 /* FUNCTION: PROCESS A VALUE STRING TILL PARENS MATCH.              */
 /* ENTRY:                                                           */
 /*   POSITION POINTS PAST FIRST PAREN                               */
 /*   PAREN=1                                                        */
 /* ENTRY ALSO FROM QUOTE WITH                                       */
 /*   POSITION PAST " OR '                                           */
 /*   PAREN UNCHANGED                                                */
 /* EXIT:                                                            */
 /*   IF A " IS HIT, GO TO QUOTE WITH PAREN>0                        */
 /* NOTE:                                                            */
 /*   MULTIPLE BLANKS AND/OR COMMENTS WITHIN PARENTHESES ARE REPLACED*/
 /*   BY A SINGLE BLANK                                              */
 %SKIP;
 PARENTHESES:
              RETSTR='(';
 PARETURN:
              DO POSITION=POSITION TO STRLEN;
              CH=SUBSTR(STRING,POSITION,1);
              IF CH=';'
                   THEN
                        DO;
                        RETCODE=GIBBERISH;
                        RETURN('');
                        END;
              ELSE IF CH='('
                   THEN
                        PAREN=PAREN+1;
              ELSE IF CH=')'
                   THEN
                        DO;
                        PAREN=PAREN-1;
                        IF PAREN=0 THEN GO TO PAREND;
                        END;
              ELSE IF CH='''' × CH='"'
                   THEN
                        DO;
                        POSITION=POSITION+1;
                        QMARK=CH;
                        GO TO QUOTE;
                        END;
              ELSE IF CH=' ' THEN DO;
                 IF SUBSTR(RETSTR,LENGTH(RETSTR),1)=' '
                    THEN GO TO PARLOOP;
                 END;
              ELSE IF POSITION<STRLEN THEN
                 IF CH='/' & SUBSTR(STRING,POSITION+1,1)='*'
                    THEN GO TO SUBCOM;
              RETSTR=RETSTR××CH;
 PARLOOP:
              END;
 PAREND:
         RETCODE=PSTRING;
         RETURN(RETSTR××')');
 SUBCOM:
         DO POSITION=POSITION+2 TO STRLEN-1
            WHILE(SUBSTR(STRING,POSITION,2)^='*/');
         END;
         IF POSITION=STRLEN THEN DO;
            POSITION=POSITION+1;
            RETCODE=GIBBERISH;
            RETURN('');
         END;
         IF SUBSTR(RETSTR,LENGTH(RETSTR),1)^=' ' THEN
            RETSTR=RETSTR××' ';
         POSITION=POSITION+2;
         GO TO PARETURN;
 % PAGE;
 /* BLOCK: QUOTE                                                     */
 /* FUNCTION: TO PROCESS QUOTED BLOCK                                */
 /* ENTRY:                                                           */
 /*   POSITION POINTS PAST OPENING QUOTE MARK                        */
 /* EXIT:                                                            */
 /*   COMPRESS "" TO A SINGLE " (IF WITHIN " BUT NOT PARENTHESES     */
 /*   TERMINATE WHEN SINGLE MATCHING QUOTE ENCOUNTERED               */
 %SKIP;
 QUOTE:
         IF PAREN>0 × QMARK='''' THEN
          RETSTR=RETSTR××QMARK;
         DO POSITION=POSITION TO STRLEN;
         CH=SUBSTR(STRING,POSITION,1);
         IF CH=QMARK
              THEN
                   DO;
                   IF PAREN>0 × QMARK='''' THEN
                        RETSTR=RETSTR××QMARK;
                   IF POSITION=STRLEN
                        THEN
                             GOTO ENDQUOTE;
                        ELSE
                             IF SUBSTR(STRING,POSITION+1,1)=QMARK
                              THEN
                               DO;
                               RETSTR=RETSTR××QMARK;
                               POSITION=POSITION+1;
                               END;
                              ELSE
                               GOTO ENDQUOTE;
                   END;
              ELSE
                   RETSTR=RETSTR××CH;
         END;
 ENDQUOTE:
         IF POSITION>STRLEN
              THEN
                   DO;
                   RETCODE=GIBBERISH;
                   RETURN('');
                   END;
         IF PAREN>0 THEN DO;
             POSITION=POSITION+1;
             GO TO PARETURN;
         END;
         IF QMARK='''' THEN
            RETCODE=QSTRING;
            ELSE
               RETCODE=PSTRING;
         RETURN(RETSTR);
 %SKIP;
 END GETWORD;
