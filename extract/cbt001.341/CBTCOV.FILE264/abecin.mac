 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABECIN IS CALLED BY ABEC TO PROCESS A LINE OF DATA ENTERED ON THE   *
 * DISPLAY.                                                            *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABECIN) PARMS(PREC,PDATA,RHPTR,RHHDRPT,DATACNT) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABERHPNL;

   DCL ABEDBDI ENTRY;
   DCL PDATA CHAR(*) VAR;
   DCL PREC PTR;
   DCL DATACNT FIXED BIN;
   DCL 1 SKEL BASED(SKELPTR),
     2 SKNXT PTR,
     2 STC FIXED BIN(15,0),
     2 ENC FIXED BIN(15,0);
   DCL (I,J) FIXED BIN(15,0);

   IF HEXMODE & RH_DISPLAY_HDR=NULL
     THEN LM=LENGTH(PDATA);
     ELSE LM=SCANLEN;
   /* LM = MAXIMUM LENGTH OF DATA ACCEPTED FROM DISPLAY */
   PDATA=SUBSTR(PDATA,1,MIN(LENGTH(PDATA),LM));
   OD=1; /* NEXT AVAILABLE BYTE OF DISPLAY DATA */
   LO=LENGTH(PREC->BUF); /* SAVE ORIGINAL LENGTH OF DATA RECORD */
   LD=LENGTH(PDATA); /* GET LENGTH OF DISPLAY DATA */
   IF RHPSKHD=NULL
     THEN CALL NSEG(COLUMN,TRUNCATE);
     ELSE DO SKELPTR=RHPSKHD REPEAT SKNXT WHILE(SKELPTR^=NULL);
       I=STC;
       J=ENC;
       CALL NSEG(I,J);
       END;

 NSEG:  PROC(ST,EN) OPTIONS(REENTRANT);
 /**********************************************************************
 *                                                                     *
 * NSEG IS CALLED TO PROCESS A SEGMENT OF INPUT DATA.  IF              *
 * RH_DISPLAY_HDR=NULL, ST AND EN INDICATE THE COLUMNS IN THE DATA     *
 * RECORD (PREC) WHERE THE DATA FROM THE DISPLAY (PDATA) IS TO BE      *
 * STORED.  IF RH_DISPLAY_HDR^=NULL, ST AND EN INDICATE THE COLUMNS    *
 * OF THE CONCEPTUAL DISPLAY LINE DEFINED BY THE LIST POINTED TO BY    *
 * RH_DISPLAY_HDR FROM WHICH DATA IS TO BE EXTRACTED.                  *
 *                                                                     *
 * GLOBAL VARIABLE LO INDICATES THE CURRENT LENGTH OF THE DATA RECORD  *
 * (PDATA).                                                            *
 * GLOBAL VARIABLE DATACNT=1 IF DECIMAL LINE, =2 IF HEX LINE WHEN      *
 * HEXMODE.                                                            *
 *                                                                     *
 **********************************************************************/
   DCL (ST,EN) FIXED BIN(15,0);
   DCL (I,J,K,LS,LA) FIXED BIN(15,0);
   DCL DATA CHAR(4000) VAR;

   IF OD > LD
     THEN RETURN; /* NO MORE DATA FROM DISPLAY TO PROCESS */
   LS=EN-ST+1; /* LS=LENGTH OF THIS RECORD SEGMENT */
   IF LS+OD-1 > LM
     THEN LS=LM-OD+1; /* DON'T TRUNCATE AT RIGHT EDGE OF DISPLAY */
   LA=LD-OD+1; /* LA=LENGTH OF DATA AVAILABLE FROM DISPLAY */
   IF LA<LS
     THEN DATA=SUBSTR(PDATA,OD,LA)××REPEAT(' ',LS-LA-1);
     ELSE DATA=SUBSTR(PDATA,OD,LS);
   SELECT;
     WHEN(RH_DISPLAY_HDR^=NULL)
       CALL ABEDBDI(DATA,PREC,ST,EN,RHPTR,RHHDRPT);
     WHEN(DATACNT=1 & HEXMODE)
       CALL NSEG_HEX(ST,LS,DATA);
     OTHERWISE DO;
       /* DATA = DATA FROM DISPLAY, PADDED WITH BLANKS TO LENGTH(SEG) */
       IF ST+LS-1 > LO /* IS NEW SEGMENT AT THE END OF THE RECORD */
         THEN DO;
           IF LO<ST-1 /* NEW SEG IS BEYOND CURRENT END OF RECORD */
             THEN PREC->BUF=
               SUBSTR(PREC->BUF,1,LO)××REPEAT(' ',ST-LO-2)××DATA;
             ELSE PREC->BUF=SUBSTR(PREC->BUF,1,ST-1)××DATA;
           END;
         ELSE SUBSTR(PREC->BUF,ST,LS)=DATA; /* NOT AT END OF RECORD */
       END; /* OTHERWISE */
     END; /* SELECT */
   LO=LENGTH(PREC->BUF); /* UPDATE LENGTH(DATA RECORD) */
   OD=OD+LS;
   END NSEG;

 NSEG_HEX:  PROC(ST,LS,DATA) OPTIONS(REENTRANT);
 /**********************************************************************
 *                                                                     *
 * NSEG_HEX IS CALLED TO PROCESS A SEGMENT OF INPUT DATA WHEN HEXMODE  *
 * AND DATACNT=1, INDICATING IT IS THE DECIMAL LINE.  DATA IN THE      *
 * OUTPUT BUFFER WILL BE REPLACED EXCEPT WHERE THE INPUT CHARACTER     *
 * IS A PERIOD.                                                        *
 *                                                                     *
 * ST IS THE STARTING POINT IN THE OUTPUT BUFFER WHERE THE INPUT DATA  *
 *   IS TO BE STORED.                                                  *
 * LS IS THE LENGTH OF THE DATA TO BE STORED.                          *
 * DATA IS THE INPUT DATA.                                             *
 *                                                                     *
 * GLOBAL VARIABLE LO INDICATES THE CURRENT LENGTH OF THE DATA RECORD  *
 *   (PDATA).                                                          *
 * GLOBAL VARIABLE DATACNT=1 IF DECIMAL LINE, =2 IF HEX LINE WHEN      *
 *   HEXMODE.                                                          *
 *                                                                     *
 **********************************************************************/
   DCL (ST,LS) FIXED BIN(15,0);
   DCL DATA CHAR(*) VAR;
   DCL (I,J) FIXED BIN(15,0);

   IF LO<ST-1 /* NEW SEG IS BEYOND CURRENT END OF RECORD */
     THEN PREC->BUF=SUBSTR(PREC->BUF,1,LO)××REPEAT(' ',ST-LO-2);
   J=ST;
   DO I=1 TO LS;
     IF LENGTH(PREC->BUF)<J
       THEN DO;
         PREC->BUF=PREC->BUF××SUBSTR(DATA,I);
         RETURN;
         END;
     IF SUBSTR(DATA,I,1)^='.'
       THEN SUBSTR(PREC->BUF,J,1)=SUBSTR(DATA,I,1);
     J=J+1;
     END;
   END NSEG_HEX;

   END ABECIN;
