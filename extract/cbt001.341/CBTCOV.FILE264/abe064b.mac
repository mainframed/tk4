 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE064B - GED SUBCOMMAND */
   %INCLUDE ABESUB;
 ABESUB(ABE064B) RENT(NO)
   PARMS(RHPTR,RHHDRPT,DTYPE);
   %INCLUDE ABESUBA;
   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;
   DCL 1 SET07 BASED(RHPLOT79_SET07),
   %INCLUDE ABE063J;
   %INCLUDE ABE064I;
   %INCLUDE ABERHPNL;
   %INCLUDE ABEPNL;

   DCL DTYPE CHAR(*) VAR;

   DCL SETCAPS ENTRY;
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL STFSMOD ENTRY(CHAR(*),CHAR(*),FIXED BIN(15,0))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);

   DCL 1 AIDTAB(24) BIT(8) STATIC INIT('11110001'B,
   /*  F1 = PF  1 KEY */'11110010'B, /*  F2 = PF  2 KEY */'11110011'B,
   /*  F3 = PF  3 KEY */'11110100'B, /*  F4 = PF  4 KEY */'11110101'B,
   /*  F5 = PF  5 KEY */'11110110'B, /*  F6 = PF  6 KEY */'11110111'B,
   /*  F7 = PF  7 KEY */'11111000'B, /*  F8 = PF  8 KEY */'11111001'B,
   /*  F9 = PF  9 KEY */'01111010'B, /*  7A = PF  0 KEY */'01111011'B,
   /*  7B = PF 11 KEY */'01111100'B, /*  7C = PF 12 KEY */'11000001'B,
   /*  C1 = PF 13 KEY */'11000010'B, /*  C2 = PF 14 KEY */'11000011'B,
   /*  C3 = PF 15 KEY */'11000100'B, /*  C4 = PF 16 KEY */'11000101'B,
   /*  C5 = PF 17 KEY */'11000110'B, /*  C6 = PF 18 KEY */'11000111'B,
   /*  C7 = PF 19 KEY */'11001000'B, /*  C8 = PF 20 KEY */'11001001'B,
   /*  C9 = PF 21 KEY */'01001010'B, /*  4A = PF 22 KEY */'01001011'B,
   /*  4B = PF 23 KEY */'01001100'B); /*  4C = PF 24 KEY */
   DCL ENTER_KEY BIT(8) STATIC INIT('01111101'B);

   DCL (XBIT,YBIT) FIXED BIN STATIC INIT(1);
     /* BIT FROM BITMAP TO APPEAR IN LOWER LEFT CORNER OF DISPLAY */
   DCL SIZE FIXED BIN(31,0) STATIC INIT(24);
     /* BITMAP TO DISPLAY PIXEL MAPPING FACTOR, E.G. 1 = 1 BITMAP
     PIXEL TO 1 DISPLAY PIXEL, 2 = 4 BITMAP PIXELS TO 1 DISPLAY
     PIXEL, 3 = 9 BITMAP PIXELS TO 1 DISPLAY PIXEL */
   DCL DIRECTION FIXED BIN(31,0) STATIC INIT(-1);
   DCL MYCMD CHAR(256) VAR;

   DYNPTR = RHPDYNPT;
   PNLPTR = RHPSTAPT;
   HPGSIZE=LINESIZE-RHPMAXLN-2; /* LENGTH OF HEADER LINE */
   VPGSIZE=(INCNT-1)/2; /* VERTICAL PAGE SIZE DATA ROWS */
   MAXSIZE,SIZE=MAX(MAXBTX/HPGSIZE,MAXBTY/VPGSIZE)+1;
   DO FOREVER=1 REPEAT FOREVER;
     CALL DO_DISPLAY;
     CURPNL = @CURPNL;
     NXTPNL = @NXTPNL;
     SELECT(@AID);
       WHEN(ENTER_KEY) IF DATA^=''  /* 7D=ENTER KEY */
         THEN DO;
           MYCMD=DATA;
           CALL SETCAPS(MYCMD);
           SELECT(MYCMD);
             WHEN('PFK','PFKS','KEYS','HELP') DO;
               CALL #TERM('PFK  1 - ZOOM IN');
               CALL #TERM('PFK  2 - ZOOM OUT');
               CALL #TERM('PFK  3 - END');
               CALL #TERM('PFK  4 - NOT USED');
               CALL #TERM('PFK  5 - LEFT MAX');
               CALL #TERM('PFK  6 - RIGHT MAX');
               CALL #TERM('PFK  7 - UP');
               CALL #TERM('PFK  8 - DOWN');
               CALL #TERM('PFK  9 - TOP');
               CALL #TERM('PFK 10 - LEFT');
               CALL #TERM('PFK 11 - RIGHT');
               CALL #TERM('PFK 12 - BOTTOM');
               END;
             OTHERWISE I=#CMD(DATA,RHPTR,RHHDRPT);
             END;
           END;
       WHEN(AIDTAB(1)) /* PFK 1 */
         SIZE=MAX(1,SIZE-1);
       WHEN(AIDTAB(2)) DO; /* PFK 2 */
         CURLINE=@CURLOC/LINESIZE;
           /* CURLINE=RELATIVE SCREEN LINE # CONTAINING CURSOR*/
         IF CURLINE>=5
           THEN DO; /* HE MAY WANT SCREEN RELOCATION */
             NEWYBIT=MIN(MAXBTY,
               MAX(1,YBIT+(VPGSIZE-CURLINE+4)*SIZE));
             NEWXBIT=MIN(MAXBTX,
               MAX(1,XBIT+(@CURLOC-CURLINE*LINESIZE-RHPMAXLN-2)*SIZE));
             END;
           ELSE DO;
             NEWYBIT=YBIT;
             NEWXBIT=XBIT;
             END;
         IF ^(NEWYBIT=YBIT & NEWXBIT=XBIT)
           THEN DO; /* HE WANTS SCREEN RELOCATION */
             YBIT=NEWYBIT;
             XBIT=NEWXBIT;
             END;
           ELSE SIZE=MIN(MAXSIZE,MAX(1,SIZE+1)); /* DEFAULT SCALING */
         IF DATA^=''
           THEN SIZE=DATA; /* USER WANTS SCALING */
         END;
       WHEN(AIDTAB(3)) DO;
         GRLPIX='1'B;
         RETURN; /* PFK 3 - GET OUT */
         END;
       WHEN(AIDTAB(5)) /* PFK 5 */
         XBIT=1;
       WHEN(AIDTAB(6)) /* PFK 6 */
         XBIT=MAXBTX-SIZE*(HPGSIZE-1);
       WHEN(AIDTAB(7)) /* PFK 7 */
         YBIT=MIN(MAXBTY-SIZE*(VPGSIZE-1),YBIT+SIZE*VPGSIZE);
       WHEN(AIDTAB(8)) /* PFK 8 */
         YBIT=MAX(1,YBIT-SIZE*VPGSIZE);
       WHEN(AIDTAB(9)) /* PFK 9 */
         YBIT=MAXBTY-SIZE*(VPGSIZE-1);
       WHEN(AIDTAB(10)) /* PFK 10 */
         XBIT=MAX(1,XBIT-SIZE*HPGSIZE);
       WHEN(AIDTAB(11)) /* PFK 11 */
         XBIT=MIN(MAXBTX-SIZE*(HPGSIZE-1),XBIT+SIZE*HPGSIZE);
       WHEN(AIDTAB(12)) /* PFK 12 */
         YBIT=1;
       WHEN(AIDTAB(13)) /* PFK 13 */
         GRLPIX=^GRLPIX; /* TOGGLE PIXEL/INCHES DISPLAY */
       OTHERWISE MSGDATA='UNDEFINED PFK';
       END; /* SELECT */
     END;

 DO_DISPLAY: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO FORMAT THE PANEL AND DISPLAY IT.          *
 *                                                                     *
 **********************************************************************/

   IF ^STFSMODE
     THEN DO;
       J=STFSMOD('ON','INITIAL=YES',0);
       STFSMODE='1'B;
       CURPNL=0;
       END;
   @CURPNL=CURPNL;
   CURPNL,@NXTPNL = NXTPNL;
   @CHGCURS = CMDSPTR->FLDSBAB+1; /* SET DEFAULT */
   OUTFLAG(TABNUM)='1'B;
   SUBSTR(CMDSPTR->FLAGS,9,1)='0'B; /* COMMAND IN LOWER CASE */
   IF MSGDATA ^= ''
     THEN DO;
       MSGPTR->DATA=MSGDATA;
       MSGDATA='';
       END;
     ELSE MSGPTR->DATA='';
   OUTFLAG(MSGNUM)='1'B;
   IF CMDDISPLAY ^= ''
       THEN DO;
         CMDOPTR->DATA = CMDDISPLAY;
         CMDDISPLAY='';
         END;
       ELSE CMDOPTR->DATA='';
   CALL SET_HORIZ; /* SET HORIZONTAL AXES RULE */
   CALL SET_VERT; /* SET VERTICAL AXES RULE */
   CALL #ABECD(RHPPTR); /* GO WRITE BODY ON SCREEN */
   CALL DO_UPDATE; /* PROCESS ANY PIXEL CHANGES FROM THE SCREEN */
   DFLDPTR=CMDPTR;
   CMDOPTR->DATA='';
   END DO_DISPLAY;

 DO_UPDATE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED FROM DO_DISPLAY AFTER PANEL HAS BEEN DISPLAYED TO STORE ANY  *
 * PIXEL CHANGES IN BITMAP.                                            *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L,M,N,P,R,XBASE,YBASE) FIXED BIN;
   DCL CH CHAR(1);

   SFLDPTR = INPTR; /* SFLDPTR POINTS AT 1ST  SEQ DISPLAY FLD */
   DFLDPTR=DYNPTR;
   DFLDADJ=DFLDADJ+DINOF+INOFF;
   DO YBASE=YBIT+(VPGSIZE-1)*SIZE TO YBIT BY -SIZE;
     CALL NXTFLD('IN'); /* SKIP SEQ FLD, GET DATA PART OF LINE */
     IF DATA^=''
       THEN DO K=1 TO HPGSIZE;
         IF K>LENGTH(DATA)
           THEN CH=' ';
           ELSE CH=SUBSTR(DATA,K,1);
         IF VERIFY(CH,'123456789')^=0
           THEN CH=' ';
         XBASE=XBIT+(K-1)*SIZE;
         DO L=XBASE REPEAT L+1 WHILE(L<=XBASE+SIZE-1);
           DO M=YBASE REPEAT M+1 WHILE(M<=YBASE+SIZE-1);
             IF L<=MAXBTX & M<=MAXBTY
               THEN CALL #PIXPUT(L,M,CH,RHPLOT79); /* STORE PIXEL */
             END;
           END;
         END;
     CALL NXTFLD('IN'); /* POINT TO NEXT SEQUENCE FIELD */
     END;
   END DO_UPDATE;

 NXTFLD: PROC(IO);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE THE NEXT FIELD ON THE DISPLAY.                     *
 *                                                                     *
 **********************************************************************/
   DCL IO CHAR(*);

   IF FLDNUM ^= FLDCNT
     THEN DO;
       SFLDADJ=SFLDADJ+FLDLEN;
       DFLDPTR = DYNPTR;
       IF IO='IN'
         THEN DFLDADJ = DFLDADJ + DINOF + INOFF;
         ELSE DFLDADJ = DFLDADJ + DOUTOF + OUTOFF;
         /* DLFDPTR NOW POINTS AT I/O DATA FOR CURRENT DISPLAY FLD */
       END;
   END NXTFLD;

 SET_HORIZ: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO SET THE HORIZONTAL RULE FOR DISPLAY.      *
 *                                                                     *
 **********************************************************************/
   DCL (HD1,HD2) CHAR(1024) VAR;
   DCL (I,J,K,L,M,N) FIXED BIN;
   DCL DIGIT PIC'9';
   DCL BASE PIC'ZZZZZZZZ9';
   DCL (IPP,WRK) DEC FLOAT(6);
   DCL STR CHAR(10) VAR;

   HD1,HD2='';
   IF GRLPIX
     THEN DO; /* PIXEL NUMBERS ARE TO BE DISPLAYED */
       DO I=XBIT REPEAT I+10*SIZE WHILE(LENGTH(HD1)<HPGSIZE);
         BASE=I;
         J=PREFIX(BASE,' ');
         HD1=HD1××SUBSTR(BASE,J)××REPEAT(' ',J-1);
         END;
       DO I=XBIT REPEAT I+SIZE WHILE(LENGTH(HD2)<HPGSIZE);
         J=MOD(I,10);
         DIGIT=J;
         HD2=HD2××DIGIT;
         END;
       END;
     ELSE DO; /* INCHES ARE TO BE DISPLAYED */
       DO FOREVER=1 REPEAT FOREVER;
         I=LENGTH(HD1);
         STR=CALCPRT(FLOAT(I*SIZE+XBIT-1)/FLOAT(PLXDPI));
         IF I+LENGTH(STR)>HPGSIZE
           THEN LEAVE;
         HD1=HD1××STR××' ';
         END;
       END;
   SFLDPTR = ADDR(FLDLOC); /*GET FIELD DESCR FOR HEADING */
   DFLDPTR = PTROUT(PTRIN(DYNPTR)+DOUTOF+OUTOFF);
   DATA=REPEAT(' ',RHPMAXLN)××HD1;
   SFLDPTR=PTROUT(PTRIN(SFLDPTR)+FLDLEN);
   DFLDPTR=PTROUT(PTRIN(DYNPTR)+DOUTOF+OUTOFF);
   DATA=REPEAT(' ',RHPMAXLN)××HD2;
   OUTFLAG(1) = '1'B;
   OUTFLAG(2) = '1'B;
   END SET_HORIZ;

 SET_VERT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO SET THE VERTICAL RULE FOR DISPLAY.        *
 *                                                                     *
 **********************************************************************/
   DCL SEQPIC PIC'(8)9';
   DCL (I,J,K,L,M,N,P,R,XBASE,XCURS,YBASE,YCURS) FIXED BIN;
   DCL CH CHAR(1);

   XCURS=FIXED(CPWCX*MAXBTX+.5)+1; /*X PIXEL INDEX FOR PEN LOCATION*/
   YCURS=FIXED(CPWCY*MAXBTY+.5)+1; /*Y PIXEL INDEX FOR PEN LOCATION*/
   SFLDPTR = INPTR; /* SFLDPTR POINTS AT 1ST  SEQ DISPLAY FLD */
   DFLDPTR=DYNPTR;
   DFLDADJ=DFLDADJ+DOUTOF+OUTOFF;
   DO YBASE=YBIT+(VPGSIZE-1)*SIZE TO YBIT BY -SIZE;
     SUBSTR(FLAGS,3,2)='11'B; /* PROTECT FIELD */
     OUTFLAG(FLDNUM)='1'B; /* FORCE WRITE */
     IF GRLPIX
       THEN DO; /* SHOW PIXEL NUMBERS */
         SEQPIC=YBASE;
         DATA=SUBSTR(SEQPIC,9-RHPMAXLN);
         END;
       ELSE DATA=CALCPRT(FLOAT((YBASE-1))/FLOAT(PLYDPI));
     CALL NXTFLD('OUT');
     DATA='';
     DO K=1 TO HPGSIZE;
       XBASE=XBIT+(K-1)*SIZE;
       IF SIZE<4
         THEN CALL SET_VERT_DETAIL;
         ELSE CALL SET_VERT_BROAD;
    /* IF XCURS>=XBASE & XCURS<=XBASE+SIZE-1 &
          YCURS>=YBASE & YCURS<=YBASE+SIZE-1
         THEN @CHGCURS=FLDSBAB+LENGTH(DATA); */
           /* PUT CURSOR AT PEN LOC */
       END;
     CALL NXTFLD('OUT');
     END;

 SET_VERT_BROAD: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PREPARE A DISPLAY LINE WHEN SIZE>=4. THIS PROCEDURE       *
 * IS NESTED WITHIN PROCEDURE SET_VERT.                                *
 *                                                                     *
 **********************************************************************/
   DCL M FIXED BIN(31,0);
   DCL WRK CHAR(256) VAR;

   DO M=YBASE TO YBASE+SIZE-1;
     WRK=#PIXGETL(XBASE,M,SIZE,RHPLOT79);
     IF WRK^='' & WRK^=LOW(LENGTH(WRK))
       THEN LEAVE;
     END;
   IF M>YBASE+SIZE-1
     THEN DATA=DATA××' ';
     ELSE DATA=DATA××'X';
   END SET_VERT_BROAD;

 SET_VERT_DETAIL: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PREPARE A DISPLAY LINE WHEN SIZE<4.  THIS PROCEDURE IS    *
 * IS NESTED WITHIN PROCEDURE SET_VERT.                                *
 *                                                                     *
 **********************************************************************/
   DCL CNT(10) DEC FLOAT(6);
   DCL (I,J,K,L,M) FIXED BIN(31,0);
   DCL CH CHAR(1);

   CNT(*)=0;
   DO L=XBASE REPEAT L+1 WHILE(L<=XBASE+SIZE-1);
     DO M=YBASE REPEAT M+1 WHILE(M<=YBASE+SIZE-1);
       IF L<=MAXBTX & M<=MAXBTY
         THEN DO;
           CH=#PIXGET(L,M,RHPLOT79); /* GET PIXEL */
           DO I=1 TO 8 WHILE(CH^=PENARY(I));
             END;
           CNT(I)=CNT(I)+1;
           END;
       END;
     END;
   J=1;
   DO I=1 TO 8 ;
     IF CNT(I)>CNT(J)
       THEN J=I;
     END;
   IF CNT(J)=0
     THEN DATA=DATA××' ';
     ELSE DATA=DATA××PENARY(J);
   END SET_VERT_DETAIL;

   END SET_VERT;

   END ABE064B;
