   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE033 - SORTQ,SORTQL,SORTX,SORTXL,SORTNX,SORTNXL */
   /* 1        2     3      4     5      6      7       */
   %INCLUDE ABESUB;
 ABESUB(ABE033) PARS(0000000000000000) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   /*            1    2    3                       */
   /*      SORT  OFF1 LEN1 SEQ1 ... OFFN LENN SEQN */
   /*            1    2    3                       */
   /*      SORTL OFF1 LEN1 SEQ1 ... OFFN LENN SEQN */
   DCL SETCAPS ENTRY;
   DCL (T,U,TMPPTR,SAVCUR,SAVNXT,FPTR,LPTR) PTR;
   DCL 1 SARYSTR BASED(SARYPTR),
     2 SARYBND FIXED BIN(15,0),
     2 SARY(N REFER (SARYBND)) PTR;
   DCL 1 QARYSTR BASED(QARYPTR),
     2 QARYBND FIXED BIN(15,0),
     2 QARA(P REFER (QARYBND)),
      3 QARY PTR,
      3 SORTCNT FIXED BIN(15,0), /* PRIOR RECORDS TO SORT */
      3 OMITCNT FIXED BIN(15,0); /* RECORDS TO OMIT IN THIS GROUP */
   DCL LAST FIXED BIN(31,0) INIT(99999999);
   DCL (OF(2),LE(2)) FIXED BIN(15,0);
   DCL 1 SCTL(5),
     2 OFF FIXED BIN(15,0),
     2 LEN FIXED BIN(15,0),
     2 SEQ CHAR(1);

   IF CMDINDX=3 /* IS IT SORTQL? */
     THEN DO;
       L1=RH_L1;
       L2=RH_L2;
       IF L1>L2
         THEN DO; /* PROCESS FRONT TO BACK ONLY */
           I=L1;
           L1=L2;
           L2=I;
           END;
       CALL #MD(RHPTR,RHHDRPT,L1); /* CALL MDPROC */
       IF RECPTR^=HDPTR
         THEN FPTR=LSTPTR;
       CALL #MD(RHPTR,RHHDRPT,L2); /* CALL MDPROC */
       IF RECPTR^=HDPTR
         THEN LPTR=NXTPTR;
       IF CURSEQ >= L1 & CURSEQ <= L2
         THEN IF FPTR^=HDPTR
           THEN SAVCUR=FPTR->LSTPTR;
           ELSE SAVCUR=HDPTR;
       END;
     ELSE DO;
       FPTR,LPTR=HDPTR;
       SAVCUR=HDPTR;
       END;
   DO IX = 0 TO 4 WHILE(PARY(IX*3+1)^='');
     OFF(IX+1) = PARY(IX*3+1);
     LEN(IX+1) = PARY(IX*3+2);
     SEQ(IX+1) = PARY(IX*3+3);
     CALL SETCAPS(SEQ(IX+1));
     END;
   N,P,Q=0;
   DO RECPTR=FPTR->NXTPTR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
     I=0;
     SELECT(CMDINDX);
       WHEN(1,2,3) I=1; /* ABE033,SORTQ,SORTQL */
       WHEN(4,5) IF SUBSTR(RECFLGS,2,1)
         THEN I=1;
       OTHERWISE IF ^SUBSTR(RECFLGS,2,1)
         THEN I=1;
       END; /* SELECT */
     IF I=1
       THEN DO;
         N=N+1; /* RECORDS TO BE SORTED */
         Q=0;  /* RESET TOGGLE */
         END;
       ELSE DO;
         IF Q=0
           THEN P=P+1; /* ADD ONE FOR FIRST IN GROUP */
         Q=1;  /* RESET TOGGLE */
         END;
     END;
   IF N<2
     THEN DO;
       RHRC=0;
       RETURN;
       END;
   ALLOCATE SARYSTR;
   IF Q=0
     THEN P=P+1; /* ADD ONE FOR FINAL GROUP */
   ALLOCATE QARYSTR;
   J,K,Q,S=0;
   DO RECPTR=FPTR->NXTPTR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
     I=0;
     SELECT(CMDINDX);
       WHEN(1,2,3) I=1; /* ABE033,SORTQ,SORTQL */
       WHEN(4,5) IF SUBSTR(RECFLGS,2,1)
         THEN I=1;
       OTHERWISE IF ^SUBSTR(RECFLGS,2,1)
         THEN I=1;
       END; /* SELECT */
     IF I=1
       THEN DO;
         J=J+1;
         SARY(J)=RECPTR;
         S=S+1; /* NUMBER IN GROUP TO BE SORTED */
         Q=0; /* RESET TOGGLE */
         END;
       ELSE DO;
         IF Q=0
           THEN DO;
             K=K+1;
             QARY(K)=RECPTR;
             OMITCNT(K)=0;
             SORTCNT(K)=S;
             S=0;
             Q=1;
             END;
         OMITCNT(K)=OMITCNT(K)+1;
         END;
     END;
   IF S>0
     THEN DO; /* SORTED GROUP AT END OF RANGE */
       K=K+1;
       QARY(K)=NULL;
       OMITCNT(K)=0;
       SORTCNT(K)=S;
       END;
   M=N;
   DO M=M/2 REPEAT M/2 WHILE(M^=0);
     K=N-M;
     DO J=1 REPEAT J+1 WHILE(J <= K);
       I = J;
       DO L=I+M REPEAT I+M WHILE(^SORTED) UNTIL(I<1);
         T=SARY(I);
         SARY(I)=SARY(L);
         SARY(L)=T;
         I=I-M;
         END;
       END;
     END;
   J,K=1;
   T=FPTR;
   DO K=1 TO P;
     IF SORTCNT(K)^=0
       THEN DO;
         I=J+SORTCNT(K)-1;
         DO J=J TO I;
           T->NXTPTR=SARY(J);
           SARY(J)->LSTPTR=T;
           T=SARY(J);
           END;
         END;
     IF OMITCNT(K)^=0
       THEN DO;
         T->NXTPTR=QARY(K);
         QARY(K)->LSTPTR=T;
         DO I=1 TO OMITCNT(K);
           T=T->NXTPTR;
           END;
         END;
     END;
   T->NXTPTR=LPTR;
   LPTR->LSTPTR=T;
   FREE SARYSTR;
   FREE QARYSTR;
   IF SAVCUR=HDPTR
     THEN SAVCUR=NXTHDR;
   CALL #NC(RHPTR,SAVCUR);
   CALL #RESEQ(RHPTR,RHHDRPT,HDPTR,'NOSAVE','RENUM',LAST);
   SAVEFLAG = '1'B;
   RHRC = 0;

 SORTED:  PROC RETURNS(BIT(1));
   DCL (IS,IT,XX) FIXED BIN(15,0);
   DO XX=1 TO IX;
     DO IS = 1 TO 2;
       IF IS=1
         THEN IT=I;
         ELSE IT=L;
       IF OFF(XX)+LEN(XX)-1 > LENGTH(SARY(IT)->RECSTR)
         THEN IF OFF(XX) > LENGTH(SARY(IT)->RECSTR)
           THEN DO;
             OF(IS)=1;
             LE(IS)=0;
             END;
           ELSE DO;
             OF(IS)=OFF(XX);
             LE(IS)=LENGTH(SARY(IT)->RECSTR)-OFF(XX)+1;
             END;
         ELSE DO;
           OF(IS)=OFF(XX);
           LE(IS)=LEN(XX);
           END;
       END;
     SELECT(SEQ(XX));
       WHEN('A') IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
         SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
         THEN RETURN('0'B);
         ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) <
           SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
           THEN RETURN('1'B);
       WHEN('D') IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(2)) <
         SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
         THEN RETURN('0'B);
         ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
           SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
           THEN RETURN('1'B);
       OTHERWISE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
         SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
         THEN RETURN('0'B);
         ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) <
           SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
           THEN RETURN('1'B);
       END;
     END;
   RETURN('1'B);
   END SORTED;
   END ABE033;
