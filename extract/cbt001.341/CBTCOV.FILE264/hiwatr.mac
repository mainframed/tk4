*PROCESS CS(60);
 /* HIWATR */
 /*
0*$.HE GENERALIZED UTILITIES - HIWATR
0*$.HE DETERMINE SPACE USED IN BPAM OR
0*$.HE SEQUENTIAL DATA SET
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$09/16/79
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  HIWATR
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS UTILITY CAN BE USED TO SET A RETURN CODE INDICATING WHAT
0*$PERCENTAGE OF THE TOTAL SPACE, AND ALSO OF THE DIRECTORY SPACE,
0*$IS CURRENTLY IN USE IN A PARTITIONED OR SEQUENTIAL DATA SET.
0*$IT MIGHT BE USED TO CONDITIONALLY EXECUTE A COMPRESS OF THE
0*$DATA SET IF THE PERCENT OF SPACE USED EXCEEDS A CERTAIN
0*$THRESHOLD.  CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$.NF
0*$.IN 5
0*$// EXEC PGM=HIWATR,PARM='/P1 ... PN X PD'
0*$//STEPLIB DD DSN=U.SD.U000.TGSLOAD,DISP=SHR
0*$//IN DD DSN=DATASET.NAME,DISP=SHR
0*$.FI L
0*$.HI 4
0*$.SP 1
0*$WHERE -
0*$.SP 1
0*$"P1 ... PN" ARE A SERIES OF INCREMENTAL INTEGERS SEPARATED BY
0*$BLANKS.  IF THE PERCENT OF TOTAL SPACE USED IN THE
0*$DATA SET EXCEEDS P1, THEN THE RETURN CODE WILL BE SET TO
0*$2.  IF IT EXCEEDS P2, THE RETURN CODE WILL BE SET TO 4, AND
0*$SO ON UP TO PN WHICH WILL SET A RETURN CODE OF N*2.
0*$UP TO 14 INTEGERS CAN BE SPECIFIED.
0*$.SP 1
0*$"X PD" IS AN OPTIONAL SPECIFICATION FOR PARTITIONED DATA SETS,
0*$AND IS IGNORED FOR SEQUENTIAL DATA SETS.  IT IS USED TO INDICATE
0*$A THRESHOLD VALUE FOR PERCENTAGE OF DIRECTORY SPACE IN USE.
0*$THE X IS LITERALLY THE CHARACTER "X", AND IS FOLLOWED BY AT
0*$LEAST ONE BLANK, AND THE "PD" SPECIFICATION, WHICH IS AN INTEGER
0*$INDICATING THE THRESHOLD PERCENTAGE FOR THE DIRECTORY SPACE.
0*$IF THE THRESHOLD VALUE IS EXCEEDED, THE RETURN CODE IS
0*$INCREMENTED BY 1.  THUS, IF PARM='80 X 75' WERE SPECIFIED,
0*$THE POSSIBLE RETURN CODE SETTINGS ARE 0, 1, 2, AND 3.
0*$.SP 1
0*$"DATASET.NAME" CAN BE REPLACED WITH THE DSNAME OF THE
0*$PARTITIONED OR SEQUENTIAL DATA SET WHICH IS TO BE TESTED.
0*$.HI 0
0*$.IN 0
0*$.SP 1
0*$EXAMPLE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$//TEST1 EXEC PGM=HIWATR,PARM='/80'
0*$//STEPLIB DD DSN=U.SD.U000.TGSLOAD,DISP=SHR
0*$//IN DD DSN=SYS2.PROCLIB,DISP=SHR
0*$//COMPRESS EXEC PGM=IEBCOPY,COND=(0,EQ,TEST1)
0*$//* JCL FOR COMPRESS GOES HERE
0*$//TEST2 EXEC PGM=HIWATR,PARM='/75 X 90'
0*$//STEPLIB DD DSN=U.SD.U000.TGSLOAD,DISP=SHR
0*$//IN DD DSN=SYS2.PROCLIB,DISP=SHR
0*$//WARN1 EXEC .......,COND=(2,GT,TEST2)
0*$//* JCL TO GENERATE A REPORT WARNING THAT
0*$//* THE TOTAL SPACE USED IN SYS2.PROCLIB
0*$//* AFTER COMPRESSION EXCEEDS 75 PERCENT.
0*$//WARN2 EXEC .......,COND=((0,EQ,TEST2),(2,EQ,TEST2))
0*$//* JCL TO GENERATE A REPORT WARNING THAT
0*$//* THE DIRECTORY SPACE USED IN SYS2.PROCLIB
0*$//* EXCEEDS 90 PERCENT.
 */
 HIWATR:  PROC(PARM) OPTIONS(MAIN);
         DCL PARM CHAR(100) VAR;
         DCL 1 PARSTR UNALIGNED STATIC,
           2 CMDINDX FIXED BIN(15,0),
           2 OPERCK BIT(16),
           2 PARY(16) CHAR(80) VAR,
           2 NUMCKA(1) BIT(16) INIT((1)(16)'1'B),
           2 CMDTAB(1) CHAR(8) VAR INIT('X');
         DCL RET BIT(32);
         DCL WKAREA CHAR(148);
         DCL DSCB1PTR PTR,
             DSCB1ADJ FIXED BIN(31,0) DEF DSCB1PTR;
         DCL JFCBCOR CHAR(176);
         DCL DEVRET FIXED BIN(31,0);
         DCL AREA CHAR(24);
         DCL (TOTRK,TOTPCT,DIRPCT,BLKCNT) FIXED BIN(15,0);
         DCL (A,B,C,D) FIXED DEC(15,0);
         DCL MAINRET FIXED BIN(31,0) INIT(0);
         DCL PLIRETC BUILTIN;
         DCL PARS ENTRY(CHAR(*) VAR,);
         DCL DIRSIZ ENTRY(CHAR(8),FIXED BIN(15,0),FIXED BIN(15,0));
         DCL DSIZESB ENTRY(PTR,FIXED BIN(15,0),CHAR(6),FIXED BIN(15,0));
         DCL DEVTYPE ENTRY(FIXED BIN(31,0),CHAR(8),CHAR(24),CHAR(6),
           CHAR(3));
         DCL SYSVTOC ENTRY;
         DCL SYSJFCB ENTRY(CHAR(8),PTR);
         DSCB1PTR = ADDR(WKAREA);
         DSCB1ADJ = DSCB1ADJ - 44;
         DEVDPTR = ADDR(AREA);
         JFCBPTR = ADDR(JFCBCOR);
         CALL PARS(PARM,PARSTR);
         CALL DEVTYPE(DEVRET,'IN',AREA,'DEVTAB','RPS');
         IF DEVRET ^= 0
           THEN SIGNAL ERROR;
         CALL SYSJFCB('IN',JFCBPTR);
         CALL SYSVTOC('SEARCH',RET,JFCBDSNM,JFCBVOLS(1),WKAREA);
         IF RET ^= '0'B
           THEN SIGNAL ERROR;
         CALL DSIZESB(DSCB1PTR,DEVDNTRK,JFCBVOLS(1),TOTRK);
         IF BOOL(DS1DSORG,'01000010'B,'0001'B) = '0'B
           THEN SIGNAL ERROR; /* IT ISN'T DSORG=PS OR PO */
         A = DEVDEVTK; /* A = BYTES PER TRK */
         B = DS1TRBAL; /* B = BYTES FREE ON LAST TRACK USED */
         C = SUBSTR(DS1LSTAR,1,16); /* C = TT FROM TTR OF LAST
                                       BLOCK USED */
         D = TOTRK; /* D = TRKS ALLOCATED */
         D = D * A; /* D = SPACE ALLOC IN BYTES */
         C = C * A * 100 + (A - B) * 100; /* C = BYTES USED * 100 */
         IF D ^= 0
           THEN DO;
             D = C/D; /* D = % USED */
             TOTPCT = D;
             END;
           ELSE TOTPCT = 0; /* PROTECT FOR 0 DIV */
         DO N = 1 TO 16 WHILE(PARY(N)^='' &
           VERIFY(PARY(N),' 0123456789')=0);
           /* DO WHILE PARY(N) NOT BLANK BUT IS NUMERIC */
           IF TOTPCT > PARY(N)
             THEN MAINRET = 2*N;
           END;
         IF SUBSTR(DS1DSORG,7,1) /* DSORG = PO? */ & N < 16
          THEN IF PARY(N) ^= ''
           THEN DO;
             CALL DIRSIZ('IN',BLKCNT,DIRPCT);
             IF DIRPCT > PARY(N+1)
               THEN MAINRET = MAINRET + 1;
             END;
         CALL PLIRETC(MAINRET);
         % INCLUDE DEVDATA;
         % INCLUDE JFCB;
         % INCLUDE DSCB1;
         END;
