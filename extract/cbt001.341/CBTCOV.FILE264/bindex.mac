 /* BINDEX */
 /*
0*$.HE GENERALIZED SUBROUTINES - BINDEX
0*$.HE INDEX FOR PREFIX, SUFFIX, OR WORD KEY
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$08/17/79
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  BINDEX
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$BINDEX CAN BE USED TO FIND A CHARACTER STRING WHICH
0*$IS EITHER A PREFIX, SUFFIX, OR A WORD IN ANOTHER
0*$STRING.  A MATCH IS DETERMINED BY WHETHER OR NOT THE
0*$SPECIFIED STRING BEGINS AND/OR ENDS WITH A NON-
0*$ALPHAMERIC CHARACTER.  ALPHAMERIC CHARACTERS ARE CONSIDERED
0*$TO BE 0 TO 9, UPPER AND LOWER CASE A TO Z, AND $, @, #.  THE
0*$FOLLOWING ILLUSTRATES THE RESULTS OF CALLING BINDEX
0*$USING THE DIFFERENT OPTIONS:
0*$.NF
0*$.IN 5
0*$.SP 1
0*$DCL BINDEX ENTRY(CHAR(*) VAR,
0*$  CHAR(*) VAR, CHAR(*) VAR,
0*$  FIXED BIN(15,0))
0*$  RETURNS(FIXED BIN(15,0));
0*$I=BINDEX('DO DONT ADO ADOPT','XX','CHARS',1);
0*$  ** I = 0 **
0*$I=BINDEX('DO DONT ADO ADOPT','DO','CHARS',1);
0*$  ** I = 1 **
0*$I=BINDEX('DO DONT ADO ADOPT','DO','CHARS',2);
0*$  ** I = 4 **
0*$I=BINDEX('DO DONT ADO ADOPT','DO','PREFIX',1);
0*$  ** I = 4 **
0*$I=BINDEX('DO DONT ADO ADOPT','DO','SUFFIX',1);
0*$  ** I = 10 **
0*$I=BINDEX('DO DONT ADO ADOPT','DO','WORD',1);
0*$  ** I = 1 **
0*$.SP 1
0*$.FI L
0*$NOTE THAT THE FOURTH PARAMETER TELLS WHAT OFFSET IN THE
0*$INPUT STRING TO START LOOKING FOR THE SEARCH ARGUMENT.
   */
 BINDEX:  PROC(STR,KEY,FUN,PN) RETURNS(FIXED BIN(15,0))
          OPTIONS(REENTRANT);
         DCL (STR,KEY,FUN) CHAR(*) VAR;
         DCL (N,PN) FIXED BIN(15,0);
         DCL KEYTAB(4) CHAR(6) STATIC INIT(
           'CHARS','PREFIX','SUFFIX','WORD');
         DCL (DF,DL) BIT(1);
         DCL AM CHAR(65) STATIC INIT(
 '$@$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
         DO K = 1 TO 4 WHILE(SUBSTR(KEYTAB(K),1,LENGTH(FUN))^=FUN);
           END;
         IF K>4
           THEN SIGNAL ERROR;
         N = PN-1;
         DO WHILE(N<LENGTH(STR));
           I = INDEX(SUBSTR(STR,N+1),KEY);
           IF I=0
             THEN RETURN(I);
           N,I=N+I;
           IF K=1 /* CHARS? */
             THEN RETURN(I);
           /* NOW FIND OUT IF IT IS A WORD */
           DF,DL = '0'B;
           IF I=1
             THEN DF='1'B; /* IT MAY BE PREFIX OR WORD */
             ELSE IF VERIFY(SUBSTR(STR,I-1,1),AM)^=0
               THEN DF='1'B; /* IT MAY BE PREFIX OR WORD */
           IF I+LENGTH(KEY)-1 = LENGTH(STR)
             THEN DL='1'B; /* IT MAY BE SUFFIX OR WORD */
             ELSE IF VERIFY(SUBSTR(STR,I+LENGTH(KEY),1),AM)^=0
               THEN DL='1'B;
           IF DF&DL
             THEN IF K=4 /* WORD?*/
               THEN RETURN(I);
           IF DF&^DL
             THEN IF K=2 /* PREFIX?*/
               THEN RETURN(I);
           IF DL&^DF
             THEN IF K=3 /* SUFFIX? */
               THEN RETURN(I);
           END;
         RETURN(0);  /* JUST IN CASE */
         END;
