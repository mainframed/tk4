ASM2       TITLE 'TSO ASSEMBLER(G) PROMPTER MODULE 1 - ASMG'
*STATUS- CHANGE LEVEL NIH-4  01/04/74  A.C. CURTIS                    *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*   MODULE ASMG IS THE FIRST OF TWO MODULES WHICH CONSTITUTE THE TSO  *
*   ASSEMBLER PROMPTER. IT PERFORMS MOST OF THE FUNCTIONS REQUIRED    *
*   FOR USING ASSEMBLER G, WHILE THE SECOND MODULE, ASMG2, SERVES     *
*   ONLY AS A SMALL, RESIDENT ROUTINE WHICH REMAINS IN CORE ALONG WITH*
*   THE ASSEMBLER. ASMG RECEIVES CONTROL FROM THE TMP AND USES THE    *
*   POINTER IN REGISTER 1 TO LOCATE APPLICABLE CONTROL BLOCKS AND THE *
*   INPUT COMMAND LINE FROM THE TERMINAL USER OR IN-CORE COMMAND LIST.*
*   THE PARSE ROUTINE (IKJPARS) IS THEN INVOKED TO SCAN THE INPUT LINE*
*   AND ISOLATE THE OPTIONS SPECIFIED; ANY PROMPTING MESSAGES ARE SENT*
*   TO THE TERMINAL USING IKJPUTL. SOME ERROR CHECKING IS DONE BY THE *
*   PARSE ROUTINE ITSELF AND WITHIN VALIDITY EXITS TAKEN FROM PARSE.  *
*   WHEN PARSING IS COMPLETE, IKJDAIR IS USED TO ALLOCATE THE REQUIRED*
*   DATASETS; WHEN THIS HAS BEEN SUCCESSFULLY DONE, ASMG SETS UP  THE *
*   STANDARD PARAMETER LIST USED WHEN INVOKING AN OS/360 PROCESSOR &  *
*   XCTLS TO ASMG2, MAKING THE CORE IT OCCUPIED AVAILABLE DURING THE  *
*   ASSEMBLY. WHEN THE ASSEMBLER RETURNS CONTROL TO ASMG2, THE MODULE *
*   IS RESPONSIBLE FOR DEALLOCATION AND RETURN OF CONTROL TO THE TMP. *
*                                                                     *
*ENTRY POINTS-                                                        *
*        PROMPTER - THIS IS THE ONLY ENTRY POINT TO ASMG.  IT IS      *
*   THROUGH THIS ENTRY POINT THAT THE TMP GIVES CONTROL TO THE        *
*   PROMPTER.                                                         *
*                                                                     *
*INPUT-                                                               *
*   THE INPUT TO THE PROMPTER CONSISTS OF A POINTER IN REGISTER 1 TO  *
*   THE COMMAND PROCESSOR PARAMETER LIST (CPPL) WHICH IS PASSED BY    *
*   THE TMP. THE CPPL CONSISTS OF FOUR FULL WORD POINTERS AS FOLLOWS: *
*     CMDPTR - POINTER TO THE INPUT COMMAND BUFFER                    *
*     UPT - POINTER TO THE UPT                                        *
*     USCB - POINTER TO THE USCB                                      *
*     ECT - POINTER TO THE ECT                                        *
*                                                                     *
*OUTPUT-                                                              *
*   THE OUTPUT FROM THE MODULE ASMG CONSISTS OF A POINTER IN REGISTER *
*   1 TO THE STANDARD OS/360 PROCESSOR PARAMETER LIST, WHICH CONSISTS *
*   OF TWO WORDS. THE FIRST IS A POINTER TO THE ASSEMBLER OPTION LIST *
*   AND THE SECOND IS A POINTER TO THE DDNAME LIST FOR THE ASSEMBLER. *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        IKJPARS - SCAN THE INPUT COMMAND LINE                        *
*        IKJDAIR - ALLOCATE THE NECESSARY DATA SETS                   *
*        IKJSTCK - FREE THE INPUT MESSAGE STACK IN CASE OF ERRORS     *
*        IKJPUTL - PUT OUT LINES TO THE TERMINAL                      *
         EJECT
*EXITS-NORMAL-                                                        *
*   RC#0EXIT - PRODUCES A RETURN CODE OF 0 AND PASSES CONTROL TO      *
*   THE LABEL 'EXIT' FOR ANY ADDITIONAL CLEAN-UP PROCESSING.          *
*                                                                     *
*EXITS-ERROR-                                                         *
*   RC#4EXIT, RC#8EXIT, RC#12EXT - THESE EXITS RETURN THE CODE IMPLIED*
*   BY THE LABEL NAME, AND THEN PASS CONTROL TO 'EXIT' FOR ANY ADDI-  *
*   TIONAL CLEAN-UP NECESSARY.                                        *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   ALL CONSTANTS USED BY THE MODULE ASMG APPEAR IN THE CSECTS       *
*   "PROMPTER" AND "PROMPT2".  THE WORK AREA IS DEFINED BY THE DSECT  *
*   "STORAGE".                                                        *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REENTRANT, READ-ONLY, REUSABLE.                                   *
*                                                                     *
*NOTES-                                                               *
*   FEATURES ADDED TO THE IBM VERSION OF THE ASSEMBLER(F) PROMPTER:
*        CONCATENATED INPUT DATASETS (MAX. 20)
*        INCREASED UTILITY DS ALLOCATIONS (100,25 INSTEAD OF 10,5)
*        COMMON ENTRY CODE FOR ALL VALIDITY CHECK ROUTINES
*        FIXED BUG IN STORAGE DSECT AND USE OF DEBUG2 FIELD
*        FIXED BUG IN PRINTVC (PRINT DSN VALIDITY EXIT) NOPRINT CHECK
*        TRIES TO GIVE SYSPRINT DATASET BLOCKSIZE OF 1210 (LRECL=121)
*        PROMPTER NOW ALLOWS TERMINAL INPUT
*        LOAD,NOLIST NOW DEFAULTS
*        NOLIST => NOXREF,NOESD,NORLD,NOUPLIST,NOLREF (NO SYSPRINT)
*        NOW CALLS MODULE ASMG2, WHICH INVOKES ASSEMBLER(G)
*        THE DDNAME LIST PASSED TO ASSEMBLER(G) DIFFERS FROM THAT FOR
*          ASSEMBLER(F): SYSUP HAS BEEN ADDED AND THE ORDER HAS CHANGED
*        OBJECT OUTPUT WILL GO TO SYSLIN INSTEAD OF SYSGO
*        LINECNT=0 (NO PAGEING) NOW LEGAL
*        FOLLOWING ASSEMBLER OPTIONS ADDED:
*              LREF,ESD,RLD,EXECUTE,EXTIME,UPDATE,BATCH,
*              EXTEN,UTBUFF,INSTSET,LSETC,SYSPARM,COL
         EJECT
         MACRO
         IKJPTPL
PTPL     DSECT
         SPACE
PTPLUPT  DS    A             PTR TO UPT
PTPLECT  DS    A             PTR TO ECT
PTPLECB  DS    A             PTR TO CP'S ECB
PTPLPTPB DS    A             PTR TO PUTLINE PARM BLOCK
         MEND
         SPACE 3
* MACRO TO GENERATE CODE FOR ADDING AN OPTION TO THE OPTION LIST
         MACRO
         OPTADD
         LCLA  &I
         LCLC  &N
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&SYSLIST).OUT
&N       SETC  '&SYSLIST(&I)'
         LA    R2,&N.X
         LA    R6,&N
         BALR  R14,R15
         AGO   .LOOP
.OUT     MEND
         SPACE 3
* MACRO TO GENERATE OPTION TEXT AND LENGTH FOR ADDING TO LIST
         MACRO
         OPTSYM
         LCLA  &I,&LNA
         LCLC  &N,&LN
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&SYSLIST).OUT
&N       SETC  '&SYSLIST(&I)'
&LNA     SETA  K'&SYSLIST(&I)-1
&LN      SETC  '&LNA'
&N       DC    X'&LN'
         DC    C'&N'
         AGO   .LOOP
.OUT     MEND
         EJECT
PROMPTER START
*
*                  ASSEMBLER G PROMPTER
*
         USING *,R15          ESTABLISH TEMPORARY ADDRESSABILITY
         B     PSTID          BRANCH PAST IDENTITY DC
         DC    C'NIH ASSEMBLER G PROMPTER'  IDENTIFIER CONSTANT
PSTID    DS    0H             DEFINE LABEL, INSURE HALFWORD ALIGNMENT
         DROP  R15            DROP TEMPORARY REGISTER
         SPACE 2
         STM   R14,R12,C12(R13) SAVE REGISTERS
         LR    R12,R15        ESTABLISH ADDRESSABILITY
         USING PROMPTER,R12   FOR PROMPTER
         USING PROMPT2,R3     ADDRESSABILITY FOR SECOND CSECT
         L     R3,APROMPT2    SET UP BASE REGISTER
         LR    R10,R1         SAVE POINTER TO CP PARAMETER LIST(CPPL)
         SPACE 2
         GETMAIN R,LV=MAIN,SP=C0 ISSUE UNCONDITIONAL GETMAIN
         LR    R11,R1         ESTABLISH ADDRESSABILITY
         USING STORAGE,R11    FOR GETMAIN STORAGE
         SPACE 2
         XC    ABENDC(C4),ABENDC ZERO ABEND CODE
         LA    R1,STAEBLK     PTR TO STAE PARM BLOCK
         XC    0(4,1),0(1) *******************************************
         STAE  STAEXIT,CT,PARAM=(R11),XCTL=YES,MF=(E,(1)) ACTIVATE STAE
         SPACE 2
         ST    R12,AP1        SAVE BASE REGISTER 1
         ST    R3,AP2         SAVE BASE REGISTER 2
         LA    R15,MAIN1      LENGTH OF MAIN PART OF STORAGE
         ST    R15,STLEN      SAVE FOR LATER RELEASE
         USING CPPL,R10       ESTABLISH ADDDRESSABILITY
*                             FOR CPPL DSECT
         MVI   DEBUG2+C4,CBLANK BLANK OUT 1ST BYTE OF DEBUG2 FIELD
         MVC   DEBUG2+C5(C47),DEBUG2+C4 BLANK OUT REST
         MVC   DEBUG2+C17(L'DEBUG),DEBUG MOVE IN 'LOCATE...' CHAR STR
         ST    R11,DEBUG2     SAVE PTR TO WORK AREA BEGIN
         ST    R13,SAVEAREA+C4 BACKWARD CHAIN SAVE AREAS
         LA    R1,SAVEAREA    PTR TO MY SAVE AREA
         ST    R1,C8(R13)     FORWARD CHAIN SAVE AREAS
         LR    R13,R1         SET UP SAVE AREA PTR
         ST    R12,PROGBASE   SAVE FOR RESTORING BASE IN VALIDITY EXITS
         ST    R10,CPPLPTR    SAVE PTR TO THE CPPL
         LA    R6,PARSEPL     ESTABLISH ADDRESSABILITY FOR
         USING PPL,R6         PARSE PARAMETER LIST
         LA    R7,DAIRPL      ESTABLISH ADDRESSABILITY FOR
         USING DAPL,R7        DAIR PARAMETER LIST
         LA    R8,PUTLPL      ESTABLISH ADDRESSABILITY FOR
         USING PTPL,R8        PUTLINE PARAMETER LIST
         LA    R9,STACKPL     ESTABLISH ADDRESSABILITY FOR
         USING STPL,R9        STACK PARAMETER LIST
*                             PARAMETER BLOCK
         MVC   PPLUPT(C4),CPPLUPT SET UP PTR TO UPT FOR PARSE
         MVC   PPLECT(C4),CPPLECT SET UP PTR TO ECT FOR PARSE
         MVC   PPLCBUF(C4),CPPLCBUF SET UP PTR TO CMMD BUFFER FOR
*                             PARSE
         MVC   DAPL(C8),PPL   SET UP PTRS TO UPT AND ECT
*                             FOR DAIR
         MVC   DAPLPSCB(C4),CPPLPSCB SET UP PTR TO PSCB FOR DAIR
         MVC   PTPL(C8),PPL   SET UP PTRS TO UPT AND ECT
*                             FOR PUTLINE
         MVC   STPL(C8),PPL   SET UP PTRS TO UPT AND ECT
*                             FOR STACK
         LA    R1,PARSEECB    SET UP PTR TO CP'S ECB
         ST    R1,PPLECB      FOR PARSE
         LA    R1,DAIRECB     SET UP PTR TO CP'S ECB
         ST    R1,DAPLECB     FOR DAIR
         LA    R1,PUTLECB     SET UP PTR TO CP'S ECB
         ST    R1,PTPLECB     FOR PUTLINE
         LA    R1,STACKECB    SET UP PTR TO CP'S ECB
         ST    R1,STPLECB     FOR STACK
         XC    ECB(C16),ECB   ZERO OUT ALL FOUR ECB'S
         MVI   FLAG,C0        ZERO OUT FLAGS
         MVI   FLAG2,C0       ZERO OUT FLAGS
         LA    R15,C1         NUMBER OF SEGMENTS FOR MESSAGES
         ST    R15,NMSGSEGS   STORE IN MESSAGE SEGMENT COUNT
         LA    R15,MSGLTH     POINTER TO MESSAGE
         ST    R15,MSGSGPTR   STORE IN MESSAGE SEGMENT POINTER
         LA    R15,DUM2ND     DUMMY ADDRESS FOR 2NDARY MESSAGE
         ST    R15,PTR2NDMS   SAVE FOR USE IN VALIDITY ROUTINES
*
         XC    LIBDSNA(C172),LIBDSNA  CLEAR LIB DSN AREA
         XC    SRCDSNA(C172),SRCDSNA  CLEAR SOURCE DSN AREA
         EJECT
         LOAD  EP=IKJDAIR     LOAD DAIR SERVICE ROUTINE
         ST    R0,ENTRDAIR    SAVE ADDR OF ENTRY PT OF DAIR
         SPACE 3
         LOAD  EP=IKJPUTL     LOAD PUTLINE SERVICE ROUTINE
         ST    R0,ENTRPUTL    SAVE ADDR OF ENTRY PT OF PUTLINE
         SPACE 3
         MVI   SWITCH,X00     INITIALIZE ALL SWITCHES TO ZERO
         XC    DDNLIST(L'DDNLIST),DDNLIST ZERO OUT DDNAME LIST
         LA    R9,DAIRPB      ESTABLISH ADDRESSABILITY FOR DAIR PB
         USING DAPB08,R9      TELL ASSEMBLER ABOUT IT
         EJECT
* PARSE SETUP/INVOCATION
PRSEINVK EQU   *              PARSE INVOKING SECTION
         L     R1,ADDRPCL     SET UP PTR TO PCL
         ST    R1,PPLPCL      FOR PARSE
         LA    R1,ANSPLACE    SET UP PTR TO ANSWER PLACE
         ST    R1,PPLANS      FOR PARSE
         ST    R11,PPLUWA     SET UP PTR TO USER WORK AREA FOR PARSE
*                             THIS IS THE REGISTER SAVE AREA WHERE
*                             PARSE WILL SAVE THE PROMPTER'S REGISTERS
*                             THE CONTENTS OF THESE REGISTERS
*                             ARE REQUIRED DURING THE VALIDITY EXITS
*                             FOR ADDRESSABILITY
         LA    R1,PARSEPL     SET UP PTR TO PARSE PARAMETER LIST
         LINK  EP=IKJPARS     LINK TO PARSE
         LTR   R15,R15        TEST RETURN CODE FROM PARSE
         BZ    PARSEOK        CONTINUE IF RETURN CODE=0
         CH    R15,H12        WAS RETURN CODE EQUAL 12
         BE    PRSEERR        BRANCH IF YES
         CH    R15,H16        WAS RETURN CODE EQUAL 16
         BNE   RC#12EXT       BRANCH IF NO
PRSEERR  EQU   *              DEFINE LABEL
         LA    R14,MSGNXT+C12 PTR TO 2NDARY MESSAGE
         ST    R14,MSGNXT     STORE IN 1ST LEVEL
         LA    R14,CMDERR     PTR TO MESSAGE
         ST    R14,MSGSGPTR   STORE IN PARM LIST
         XC    MSGLTH(C8),MSGLTH ZERO PTR TO NEXT, NUM SEGS
         MVI   MSGLTH+C7,C1   MAKE NUM SEGS ONE
         LA    R5,MSGLTH+C12  MOVE-TO ADDRESS
         ST    R5,MSGLTH+C8   SAVE PTR TO MESSAGE
         MVC   C0(LSTKMSG+C5,R5),STKMSGLN MOVE MESSAGE
         CVD   R15,TEMP       CONVERT RET CODE TO DECIMAL
         UNPK  LSTKMSG+C4(C6,R5),TEMP+C5(C4) UNPACK RETURN CODE
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTI-LEVEL MSG
         LA    R15,MSGLTH     PTR TO USUAL SEGMENT
         ST    R15,MSGSGPTR   RESTORE USUAL POINTER
         B     RC#12EXT       TERMINATE PROMPTING
         EJECT
* PARSE SUCCESSFULLY COMPLETED
PARSEOK  L     R7,ANSPLACE    GET ADDRESS OF PARAMETER DESCRIPTOR LIST
         USING IKJPARMD,R7    ESTABLISH ADDRESSABILITY FOR PDL
         LA    R15,DUM2ND     DUMMY ADDRESS FOR 2NDARY MESSAGES
         ST    R15,PTR2NDMS   SAVE FOR USE IN VALIDITY ROUTINES
         LA    R4,DAPB0CS     ESTABLISH BASE REGISTER
         USING DAPB0C,R4      INFORM ASSEMBLER OF ADDRESSABILITY
         LA    R1,XC          STORE DAIR ENTRY CODE
         STH   R1,DA0CCD       IN DAIR PARAMETER BLOCK
* MACRO/COPY-CODE LIBRARY PROCESSING
         XC    DA0CFLG(C6),DA0CFLG ZERO FLAGS, RC'S
         MVC   DA0CNUMB(C172),LIBDSNA  MOVE LIB DSN AREA INTO DAIR BLK
         CLI   MACLIBOP+C1,X01 WAS NOMACLIB SPECIFIED
         BNE   MACLIB02       BRANCH IF NO
         SR    R1,R1          ZERO REGISTER 1
         CH    R1,DA0CNUMB    WERE THERE ANY LIB DATA SETS
         BNE   MACLIB05       BRANCH IF YES
* SINCE THE ASSEMBLER ALWAYS OPENS A LIBRARY DATA SET, MACLIB MUST BE
* FORCED.
         MVI   MACLIBOP+C1,X02 SIMULATE MACLIB SPECIFICATION
         B     MACLIB02       GO PROCESS MACRO LIBRARY
MACLIB02 LA    R2,LOADDSN     FOR IRREVELANT TEST IN DAIR STND
         BAL   R10,DAIRSTND   CALL PRE-DAIR STANDARD SETUP ROUTINE
         MVI   DA08CTL,X00    INDICATE DO NOT PREFIX USER ID
         BAL   R10,DAIRSHR    CALL PRE-DAIR OLD ROUTINE
         L     R1,ASYSMC      PTR TO SYS1.MACLIB CONSTANT
         ST    R1,DA08PDSN    STORE IN DAIR CONTROL BLOCK
         MVI   DA08MNM,CBLANK BLANK OUT
         MVC   DA08MNM+C1(L'DA08MNM-1),DA08MNM MEMBER NAME
         MVI   DA08PSWD,CBLANK BLANK OUT PASSWORD
         MVC   DA08PSWD+C1(L'DA08PSWD-1),DA08PSWD       FIELD
         OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         BAL   R10,GODAIR     BRANCH AND LINK TO DAIR INVOKING ROUTINE
         BZ    MACLIB03       BRANCH IF SYS1.MACLIB FOUND
         LA    R1,DSSYS1      PTR TO 'SYS1.MACLIB' CHAR STRING
         BAL   R10,DSERR      GO PUT OUT ERROR MESSAGE
         B     RC#12EXT       GO EXIT
MACLIB03 SR    R1,R1          ZERO REGISTER 1
         LA    R4,DAPB0CS     INSURE DSECT BASE
         CH    R1,DA0CNUMB    WERE THERE ANY LIB DATA SETS
         BNE   MACLIB04       BRANCH IF YES
         MVC   SYSLIB(L'SYSLIB),DA08DDN MOVE SYS1.MACLIB DDNAME
         B     SRCLIB         GO CONTINUE PROCESSING
MACLIB04 CLI   MACLIBOP+C1,X01 WAS NOMACLIB SPECIFIED
         BE    MACLIB05       BRANCH IF YES
* ADD SYS1.MACLIB TO END OF LIST OF MACRO LIBRARIES
         LH    R5,DA0CNUMB    NUMBER OF LIB DDNAMES
         SLL   R5,C3          MULTIPLY BY EIGHT
         LA    R5,DA0CCD+C12(R5) POINT TO NEXT AVAIL DDNAME SLOT
         LA    R1,DA08DDN     MOVE-FROM ADDRESS
         LA    R15,C7         DDNAME MOVE LENGTH
         EX    R15,MOVE       MOVE SYS1.MACLIB DDNAME TO CONCAT LIST
         LH    R1,DA0CNUMB    NUMBER LIB DDNAMES
         LA    R1,C1(R0,R1)   INCREASE BY ONE
         STH   R1,DA0CNUMB    SAVE NEW COUNT
         EJECT
* CONCATENATE MACRO LIBRARIES WHEN MORE THAN ONE WAS SUPPLIED
*  NOTE: LIBRARY DDNAMES WERE SET UP BY ALLOCATION WITHIN THE
*  LIBRARY DSN VALIDITY CHECK EXIT TAKEN DURING PARSE.
MACLIB05 LR    R9,R4          SET UP GODAIR
         BAL   R10,GODAIR     CALL DAIR
         BZ    MACLIB06       BRANCH IF CONCATENATION SUCCESSFUL
         MVC   MSGNXT(LBADCAT+C8),BDCATNXT MOVE BAD CONCAT MESSAGE
         LA    R5,MSGNXT+LBADCAT+C8 POINT PAST 1ST MESSAGE
         B     SCNDARY        GO FINISH MESSAGE
MACLIB06 LA    R9,DAIRPB      RESTORE DAIRPB ADDRESSIBILITY
         OI    FLAG2,LIBCAT   INDICATE LIB CONCATENATION TOOK PLACE
         LA    R4,DAPB0CS     INSURE ADDRESSABILITY TO 0C DSECT
         MVC   SYSLIB(L'SYSLIB),DA0CCD+C12 USE 1ST DDNAME OF CAT LIST
         EJECT
* CONCATENATE SYSIN DATASETS IF REQUIRED
SRCLIB   CLI   SRCDSNA+1,C1   MORE THAN ONE INPUT DATASET?
         BNE   SRCLIB01       BR IF SO
         MVC   SYSIN(L'SYSIN),SRCDSNA+4  USE ONLY DDNAME PRESENT
         B     TSTPRNT        CONTINUE PROCESSING
* SYSIN CONCATENATION REQUIRED
SRCLIB01 LA    R4,DAPB0CS     INSURE ADDRESSABILITY TO 0C DSECT
         XC    DA0CFLG(C6),DA0CFLG ZERO FLAGS, RC'S
         MVC   DA0CNUMB(C172),SRCDSNA MOVE SRC DSN AREA INTO DAIR BLK
         LR    R9,R4          SETUP GODAIR
         BAL   R10,GODAIR     CALL DAIR
         BZ    SRCLIB02       BR IF CONCATENATION SUCCESSFUL
         MVC   MSGNXT(LBADCAT+C8),BDCATNXT MOVE BAD CONCAT MSG
         MVC   MSGNXT+C8+C10(C7),SRCM  MOVE IN 'SOURCE '
         LA    R5,MSGNXT+LBADCAT+C8 POINT PAST 1ST MESSAGE
         B     SCNDARY        GO FINISH MESSAGE
SRCLIB02 OI    FLAG2,SRCCAT   MARK SYSIN CONCATENATED
         LA    R4,DAPB0CS     RESTORE DAIRPB ADDRESSABILITY
         MVC   SYSIN(L'SYSIN),DA0CCD+C12  USE 1ST DDNAME IN CONCAT LIST
         EJECT
* PROCESS INTERACTING KEYWORDS: TERM/PRINT/LIST/XREF/STMT/NUM
TSTPRNT  EQU   *              DEFINE LABEL
         CLI   PRINTX+C1,X01 TEST IF NOPRINT WAS SPECIFIED
         BNE   TSTLIST        BR IF NOT
         MVI   LISTX+C1,X01 ELSE FORCE NOLIST
         B     NOLST          SKIP REDUNDANT LIST OPTION CHECK
TSTLIST  CLI   LISTX+C1,X02 TEST IF LIST WAS SPECIFIED
         BE    GO$ON          IF YES CONTINUE PROCESSING
         MVI   PRINTX+C1,X01  FORCE NOPRINT
NOLST    MVI   XREFX+C1,X01  ELSE FORCE NOXREF
         MVI   UPLISTX+C1,X01  AND NOUPLIST
         MVI   RLDX+C1,X01     AND NORLD
         MVI   ESDX+C1,X01     AND NOESD
         MVI   LREFX+C1,X01    AND NOLREF
GO$ON    EQU   *              DEFINE LABEL
         L     R4,PRINTDSN    GET ADDR OF PRINT DSNAME
         LTR   R4,R4          TEST IF DSNAME WAS OMITTED
         BZ    TSTTERM        IF OMITTED DO NOT FORCE NOTERM OPTION
         CLI   C0(R4),CASTERSK TEST IF PRINT(*) WAS SPECIFIED
         BNE   TSTTERM        IF NOT DO NOT FORCE NOTERM OPTION
         MVI   TERMX+C1,X01 ELSE FORCE NOTERM OPTION
         B     UTILALOC       SKIP REDUNDANT TERM OPTION CHECK
         SPACE 2
TSTTERM  CLI   TERMX+C1,X01 TEST IF NOTERM WAS SPECIFIED
         BE    UTILALOC       IF SO BYPASS ALLOCATION OF TERMINAL
         LA    R8,SYSTERM     PLACE ADDR OF SYSTERM SLOT IN REG 8
         BAL   R10,ALOCTERM   ALLOCATE TERMINAL
         EJECT
* ALLOCATE UTILITY DATASETS
UTILALOC LA    R4,C3          ALLOCATE THREE UTILITY DATA SETS
         LA    R8,SYSUT1      PTR TO SYSUT1 SLOT IN DDNAME LIST
BACK     LA    R2,LOADDSN     USE LOAD'S DSN FOR IRRELEVENT TEST IN STD
         BAL   R10,DAIRSTND   BRANCH AND LINK TO DAIR STANDARD SECTION
         MVI   DA08CTL,X00    INDICATE DO NOT PREFIX USER ID
         OI    FLAG,ALCUTIL   TURN ON UTILITY ALLOCATION FLAG
         BAL   R10,DAIRNEW    BRANCH AND LINK TO DAIR OLD SECTION
         NI    FLAG,X'FF'-ALCUTIL TURN OFF UTILITY ALLOCATION FLAG
         SR    R1,R1          ZERO REGISTER 1
         ST    R1,DA08DQTY    ALLOCATE NO DIRECTORY SPACE
         LR    R15,R4         LOOP CONTROL COUNTER
         SLL   R15,C2         MULTIPLY BY FOUR
         LA    R14,ASYSUT3-C4 PTR TO SYSUTX ADCONS
         L     R1,C0(R14,R15) INDEX FOR PROPER ADCON
         ST    R1,DA08PDSN    STORE IN DAIR CONTROL BLOCK
         OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         BAL   R10,GODAIR     BRANCH AND LINK TO INVOKE DAIR ROUTINE
         BZ    GOODUTIL       BRANCH IF GOOD UTILITY ALLOCATION
         LA    R1,DSUTIL      PTR TO CHAR STRING FOR MSG
         BAL   R10,DSERR      GO PUT OUT MESSAGE
         B     RC#12EXT       GO TAKE ERROR EXIT
GOODUTIL MVC   C0(C8,R8),DA08DDN MOVE DDNAME TO DDNAME LIST
         LA    R8,C8(R0,R8)   POINT TO NEXT DDNAME IN DDNAME LIST
         BCT   R4,BACK        LOOP
         EJECT
* LIST/PRINT DATASET PROCESSING
         CLI   LISTX+C1,X01 WAS NOLIST SPECIFIED
         BE    TRYLOAD        BRANCH IF YES
         TM    FLAG,LISTALCD  HAS A PRINT DATA SET BEEN ALLOCATED
         BO    TRYLOAD        BRANCH IF YES
         LA    R1,PRINTDSN    PTR TO PRINT PDE
         ST    R1,VCPARMS     SAVE PTR TO PDE
         ST    R11,VCPARMS+C4 SAVE WORK AREA BASE REGISTER
         LA    R1,VCPARMS     PTR TO VALID CHK RTN PARMS
         LA    R15,PRINTVC    GET ADDRESS OF PRINT DSN ALLOC
         BALR  R14,R15        GO ALLOCATE DATA SET
         LTR   R15,R15        WAS ALLOCATION SUCCESSFUL
         BNZ   RC#12EXT       BRANCH IF NO
         SPACE 5
* LOAD DATASET PROCESSING
TRYLOAD  CLI   LOADX+C1,X01 WAS NOLOAD SPECIFIED
         BE    SKIPLOAD       BRANCH IF YES
         TM    FLAG,LOADALCD  HAS A LOAD DATA SET BEEN ALLOCATED
         BO    SKIPLOAD       BRANCH IF YES
         LA    R1,LOADDSN     PTR TO LOAD PDE
         ST    R1,VCPARMS     SAVE PTR TO PDE
         ST    R11,VCPARMS+C4 SAVE WORK AREA BASE REGISTER
         LA    R1,VCPARMS     PTR TO VALID CHK RTN PARMS
         LA    R15,LOADVC     GET ADDRESS OF LOAD DSN ALLOC
         BALR  R14,R15        GO ALLOCATE DATA SET
         LTR   R15,R15        WAS ALLOCATION SUCCESSFUL
         BNZ   RC#12EXT       BRANCH IF NO
SKIPLOAD EQU   *              DEFINE LABEL
         CLI   TERMX+C1,X01 WAS NOTERM SPECIFIED
         BNE   OPTRTN         BRANCH IF NO
         MVI   NUMX+C1,X01  FORCE NONUM
         MVI   STMTX+C1,X01 FORCE NOSTMT
         EJECT
*                  OPTION LIST BUILDING ROUTINE
*
OPTRTN   EQU   *              OPTION LIST BUILDING ROUTINE
         SR    R4,R4          ZERO REG 4 FOR USE BY IC INSN
         LA    R8,OPTNLIST    GET ADDR OF AREA TO BUILD OPTION LIST
         MVC   OPTNLIST(C6),NODECK MOVE NODECK INTO OPTION LIST
         LA    R1,C6(R8)      GET PTR TO NEXT AVAILABLE SPACE ON OPTION
         LA    R15,INSRTOPT   GET ADDRESS OF INSRTOPT FOR BALR INSN
         SPACE
* ADD KEYWORD OPTIONS TO ASSEMBLER OPTION LIST
         OPTADD LOAD,LIST,TERM,XREF,RENT,TEST,ALGN,NUM,STMT
         SPACE
         L     R2,CPPLPTR
         L     R2,0(R2)                R2=A(CBUF)
         CLI   6(R2),C'X'              IF IT FOR IFOX?
         BC    7,NOTIFOX1              BR IF NOT
         LA    R15,INSRTSTR
         B     SYSPROPT
NOTIFOX1 DS    0H
* ADD SPECIAL ASSEMBLER-G OPTIONS
         OPTADD LREF,ESD,RLD,EXECUTE,BATCH,EXTEN,UPDATE,UPLIST
         SPACE 2
         LA    R15,INSRTSTR   SET UP ADDRESS OF STRING INSERT RTN
         CLI   LINECTOP+C1,X00 SEE IF "LINECNT" KEYWORD WAS SPECIFIED
         BE    EXTOPT         BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'LINECNT,R1),LINECNT MOVE ',LINECNT=' INTO LIST
         LA    R1,L'LINECNT-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,LINECNTT    GET ADDRESS OF LINECOUNT PDE
         BALR  R14,R15        BRANCH AND LINK TO INSERT STRING RTN
         SPACE
EXTOPT   CLI   EXECTOP+C1,X00 SEE IF "EXECUTE" KEYWORD WAS SPECIFIED
         BE    UTBOPT         BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'EXTIME,R1),EXTIME MOVE ',EXTIME=' INTO LIST
         LA    R1,L'EXTIME-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,EXECTV      GET ADDRESS OF EXTIME PDE
         BALR  R14,R15        BRANCH AND LINK TO INSERT STRING RTN
         SPACE
UTBOPT   CLI   UTBUFOP+C1,X00 SEE IF "UTBUFF" KEYWORD WAS SPECIFIED
         BE    INSTOPT        BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'UTBUFF,R1),UTBUFF MOVE ',UTBUFF=' INTO LIST
         LA    R1,L'UTBUFF-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,UTBUFV      GET ADDRESS OF UTBUFF PDE
         BALR  R14,R15        BRANCH AND LINK TO INSERT STRING RTN
         SPACE
INSTOPT  CLI   INSTOP+C1,X00  SEE IF "INSTSET" KEYWORD WAS SPECIFIED
         BE    LSETOPT        BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'INSTSET,R1),INSTSET MOVE ',INSTSET=' INTO LIST
         LA    R1,L'INSTSET-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,INSTSETV    GET ADDRESS OF INSTSET PDE
         BALR  R14,R15        BRANCH AND LINK TO STRING INSERT RTN
         SPACE
LSETOPT  CLI   LSETOP+C1,X00  SEE IF "LSETC" KEYWORD WAS SPECIFIED
         BE    COLOPT         BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'LSETC,R1),LSETC MOVE ',LSETC=' INTO LIST
         LA    R1,L'LSETC-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,LSETCV      GET ADDRESS OF LSETC PDE
         BALR  R14,R15        BRANCH AND LINK TO STRING INSERT ROUTINE
         SPACE
SYSPROPT CLI   SYSPROP+C1,X00 SEE IF "SYSPARM" KEYWORD WAS SPECIFIED
         BE    GETLTH         BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'SYSPARM,R1),SYSPARM MOVE ',SYSPARM=' INTO LIST
         LA    R1,L'SYSPARM-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,SYSPARMV    GET ADDRESS OF SYSPARM PDE
         BALR  R14,R15        BRANCH AND LINK TO STRING INSERT RTN
         EJECT
COLOPT   CLI   COLOP+C1,X00 SEE IF "COL" KEYWORD WAS SPECIFIED
         BE    GETLTH         BRANCH AROUND OPTION INSERTION IF NOT
         MVC   C0(L'COL,R1),COL MOVE ',COL=' INTO LIST
         LA    R1,L'COL-1(R1) UPDATE PTR TO NEXT AVAILABLE SPACE-1
         LA    R6,COLV        GET ADDRESS OF COL PDE
         BALR  R14,R15        BRANCH AND LINK TO INSERT STRING RTN
         SPACE
GETLTH   SR    R1,R8          CALCULATE LTH OF OPTION LIST
         STH   R1,OPTNLTH     STORE LENGTH IN OPTNLTH FIELD
         LA    R1,L'DDNLIST   PLACE LTH OF DDNAME LIST
         STH   R1,DDNLTH       IN DDNAME LTH FIELD
         LA    R1,OPTNLTH     PLACE PTR TO OPTION LIST
         ST    R1,OPTNPTR      IN ASSEMBLER PARAMETER LIST
         LA    R1,DDNLTH      PLACE PTR TO DDNAME LIST
         ST    R1,DDNPTR       IN ASSEMBLER PARAMETER LIST
         MVI   DDNPTR,X80     SET HIGH ORDER BIT OF LAST WORD IN
*                             PARAMETER LIST TO 1
         BAL   R10,DELETER    DELETE DAIR AND PUTLINE LOAD MODULES
         BAL   R10,RLSA       AND RELEASE PDL STORAGE
         LA    R4,MAIN1       LENGTH OF STORAGE TO BE RELEASED AFTR ASM
         LA    R1,PARMLIST    PLACE ADDR OF ASSEMBLER PARAMETER LIST
*                             IN REGISTER 1
         SPACE
         L     R15,CPPLPTR
         L     R15,0(R15)              R15=A(CBUF)
         CLI   6(R15),C'X'             IS IT IFOX?
         BC    7,NOTIFOX2              BR IF NOT
         MVC   SYSGO(16),SYSLIN
         XCTL  EP=ASMX2,MF=(E,(1))
NOTIFOX2 DS    0H
         XCTL  EP=ASMG2,MF=(E,(1))  XCTL TO ASSEMBLER INVOCATION RTN
         B     EXIT           BRANCH TO EXIT RTN
         EJECT
* EXITS
RC#0EXIT SR    R15,R15        ISSUE RETURN CODE OF ZERO
         ST    R15,ABENDC     SAVE TERMINATION CODE
         B     EXIT           BRANCH TO EXIT RTN
RC#4EXIT LA    R15,C4         ISSUE RETURN CODE OF FOUR
         ST    R15,ABENDC     SAVE TERMINATION CODE
         B     EXIT           BRANCH TO EXIT ROUTINE
RC#8EXIT LA    R15,C8         ISSUE RETURN CODE OF EIGHT
         ST    R15,ABENDC     SAVE TERMINATION CODE
         B     EXIT           BRANCH TO EXIT ROUTINE
RC#12EXT LA    R15,C12        ISSUE RETURN CODE OF TWELVE
         ST    R15,ABENDC     SAVE TERMINATION CODE
         B     EXIT           BRANCH TO EXIT ROUTINE
EXIT     EQU   *              STANDARD EXIT ROUTINE
         LR    R4,R13         SAVE ADDR OF PRESENT SAVE AREA
         L     R13,C4(R0,R13) GET ADDR OF HIGHER SAVE AREA
         LA    R10,SAVEAREA   LOAD ADDRESS OF MAIN SAVE AREA
         CR    R4,R10         TEST IF PRESENT SAVE AREA IS MAIN SAVE
*                             AREA OR VALIDITY EXIT SAVE AREA
         BNE   VCHKSAVE       IF NOT MAIN SAVE AREA DO NOT FREEMAIN
         BAL   R10,STACK      FLUSH THE STACK
         BAL   R10,RLSA       RELEASE PDL STORAGE
         L     R0,#MAIN       GET LTH AND SUBPOOL # FOR FREEMAIN
         LR    R4,R11         GET ADDRESS OF AREA TO BE FREED
         BAL   R6,FREE        BRANCH AND LINK TO FREEMAIN RTN
* NOTE: "DELETER" IS NOT CALLED TO DELETE DAIR AND PUTLINE ON THE ASS
*       UMPTION THAT THE USER WILL ATTEMPT TO CORRECT THE CONDITION
*       THAT PREVENTED CONTINUING THE ASSEMBLY AND THEN TRY AGAIN. IF
*       THE MODULES ARE LEFT RESIDENT, THE RE-TRY WILL TAKE LESS TIME.
VCHKSAVE L     R15,ABENDC     LOAD TERMINATION CODE
         L     R14,C12(R13)   RESTORE
         LM    R0,R12,C20(R13) REGISTERS
         BR    R14            RETURN TO CALLER
         EJECT
STACK    EQU   *              STACK DELETE=ALL RTN
         MVC   STACKPB(C8),STACKBLK MOVE STACK PB INTO GETMAIN STOR
         LA    R1,STACKPL     PLACE ADDR OF STACK PL IN REG 1
         XC    STACKECB(C4),STACKECB ZERO OUT ECB FOR STACK
         STACK PARM=STACKPB,DELETE=ALL,MF=(E,(1))
         TCLEARQ INPUT
         BR    R10            RETURN TO CALLER
STACKBLK STACK MF=L           GENERATE STACK PARAMETER BLOCK
         DS    0H             INSURE ALIGNMENT
         SPACE 5
DELETER  EQU   *              LOAD MODULE DELETING RTN
         DELETE  EP=IKJDAIR   DELETE DAIR SERVICE ROUTINE
         DELETE  EP=IKJPUTL   DELETE PUTLINE SERVICE ROUTINE
         LA    R4,ENDMAIN     GET ADDR OF STORAGE TO BE FREED
         L     R0,#MAIN2      GET LTH AND SUBPOOL # FOR FREEMAIN
         BAL   R6,FREE        BRANCH AND LINK TO FREEMAIN RTN
         BR    R10            RETURN TO CALLER
         EJECT
RLSA     EQU   *              PDL STORAGE RELEASING RTN
         L     R2,ANSPLACE    GET ADDR OF PDL
         CL    R2,FF000000    TEST IF PDL STORAGE WAS ALREADY FREED
         BE    NORLSA         IF YES BRANCH AROUND IKJRLSA
         LR    R5,R15         SAVE RETURN CODE
         IKJRLSA (2)          RELEASE PDL STORAGE
         LR    R15,R5         RESTORE RETURN CODE
         MVC   ANSPLACE(C4),FF000000 INDICATE THAT PDL HAS
*                             BEEN FREED
NORLSA   EQU   *              DEFINE LABEL
         BR    R10            RETURN TO CALLER
         SPACE 5
FREE     EQU   *              FREEMAIN ROUTINE
         LR    R5,R15         SAVE RETURN CODE
         FREEMAIN R,LV=(0),A=(4)
         LR    R15,R5         RESTORE RETURN CODE
         BR    R6             RETURN TO CALLER
         EJECT
* ROUTINE TO ADD STRING VALUE TO OPTION LIST
INSRTSTR LH    R4,C4(R6)      GET LENGTH OF OPTION
         BCTR  R4,R0           FOR MOVE
         L     R6,C0(R6)      GET ADDRESS OF OPTION VALUE
         BCTR  R6,R0           FOR MOVE
         B     INSERTOR       BRANCH INTO INSERTION
         SPACE
* ROUTINE TO ADD OPTION TO PARM LIST
INSRTOPT MVI   C0(R1),CCOM    MOVE SEPARATOR ',' INTO OPTION LIST
         LH    R4,C0(R2)      GET PDE ENTRY FOR KEYWORD
         SLL   R4,C2          GET WORD INDEX
         B     *(R4)          ALL OPTIONS HAVE DEFAULTS, SO NO LOOP
         B     #ONE           NO
         B     #TWO           YES
         B     #ONE           NO - ABBREVIATION
         B     #TWO           YES - ABBREVIATION
         B     LCHK           FULL
         B     LCHK
LCHK     MVC   C1(L'FULL,R1),FULL MOVE "FULL" INTO LIST
         LA    R1,L'FULL(R1)  ADVANCE PTR TO NEXT AVAILABLE SPACE-1
         B     #TWO
         SPACE
#ONE     MVC   C1(C2,R1),NO   MOVE 'NO' INTO OPTION LIST
         LA    R1,C2(R0,R1)   UPDATE PTR TO NEXT AVAILABLE SPACE ON
*                             OPTION LIST-1
#TWO     SR    R4,R4          ZERO REGISTER 4
         IC    R4,C0(R6)      GET LENGTH-1 OF POSITIVE OPTION
INSERTOR EX    R4,MOVER       MOVE POSITIVE OPTION INTO OPTION LIST
         LA    R1,C2(R4,R1)   UPDATE PTR TO NEXT AVAILABLE SPACE ON
*                             OPTION LIST
         BR    R14            RETURN TO CALLER
MOVER    MVC   C1(C0,R1),C1(R6) MVC INSN USED AS SUBJECT OF EX INSN
         EJECT
OPTIONS  EQU   *              ASSEMBLER OPTIONS
NODECK   DC    C'NODECK'      NODECK OPTION
NO       DC    C'NO'          TEXT USED TO NEGATE OPTIONS
* GENERATE TEXT FOR REGULAR ASSEMBLER OPTIONS
         OPTSYM LOAD,TERM,LIST,XREF,RENT,TEST,ALGN,NUM,STMT
* GENERATE TEXT FOR NEW ASSEMBLER-G OPTIONS
         OPTSYM LREF,ESD,RLD,EXECUTE,BATCH,EXTEN,UPDATE,UPLIST
         SPACE
LINECNT  DC    C',LINECNT='   LINECOUNT OPTION
EXTIME   DC    C',EXTIME='    EXECUTE TIME OPTION
UTBUFF   DC    C',UTBUFF='    UTILITY BUFFERING OPTION
INSTSET  DC    C',INSTSET='   INSTRUCTION SET OPTION
LSETC    DC    C',LSETC='     LSETC OPTION
SYSPARM  DC    C',SYSPARM='   SYSPARM OPTION
COL      DC    C',COL='       COL OPTION
APROMPT2 DC    A(PROMPT2)     ADDRESS CONSTANT FOR SECOND CSECT
         DROP  R3             DROP REGISTER 3
         DROP  R12            DROP REGISTER 12
         EJECT
* ABEND PROCESSING ROUTINE
         USING STAEXIT,R15    ESTABLISH ADDRESSABILITY
STAEXIT  CH    R0,STAE12      WAS STORAGE AVAILABLE
         BNE   STAE01         BRANCH IF YES
         DROP  R11            DROP REGISTER 11
         USING STORAGE,R2     ESTABLISH DSEC\ ADDRESSABILITY
         STM   R14,R12,NOSTST+C12 SAVE REGISTERS
         LA    R13,NOSTST     PHONY SAVE AREA
         ST    R13,STSA+C4    SAVE THIS SAVE AREA PTR
         LA    R1,STSA        PTR TO MY SAVE AREA
         ST    R1,C8(R13)     SAVE PTR TO NEW IN OLD
FULL     DC    C'FULL'        TEXT TO CREATE "FULL" OPTIONS
         LR    R13,R1         SET UP SAVE AREA PTR
         DROP  R2             DROP REGISTER 2
         USING STORAGE,R11    ESTABLISH DSECT ADDRESSABILITY
         LR    R11,R2         RESTORE WORK AREA BASE
         ST    R1,ABENDC           SAVE ABEND CODE
         B     STAE02         BRANCH AROUND OTHER RESTORATION
STAE01   STM   R14,R12,C12(R13) SAVE REGISTERS
         L     R11,C0(R1)     LOAD STORAGE AREA BASE
         ST    R13,STSA+C4    SAVE PTR TO OLD SAVE AREA
         LA    R3,STSA        PTR TO MY SAVE AREA
         ST    R3,C8(R13)     SAVE PTR TO MY SAVE AREA
         LR    R13,R3         SET UP MY SAVE AREA PTR
         L     R10,C4(R1)          ABEND CODE
         ST    R10,ABENDC          SAVE IT
STAE02   L     R12,AP1        RESTORE BASE REGISTER 1
         L     R3,AP2         RESTORE BASE REGISTER 2
         USING PROMPTER,R12   SET UP 1ST BASE REGISTER
         USING PROMPT2,R3     SET UP 2ND BASE REGISTER
         DROP  R15            DROP TEMPORARY REGISTER
         EJECT
* DECONCATENATION OF LIBRARY/SOURCE => SYSLIB/SYSIN
         TM    FLAG2,LIBCAT+SRCCAT WERE LIB OR SOURCE CONCATENATED?
         BZ    NODECAT        BRANCH IF NO
         USING DAPB10,R4      ESTABLISH ADDRESSABILITY
         LA    R4,DAPB0CS     USE SAME PARM BLOCK AS FOR 0C ENTRY
         LA    R1,X10         DAIR DECONCAT ENTRY CODE
         STH   R1,DA10CD      STORE IN DAIR PARM BLOCK
         OI    FLAG2,OLDALC   MARK OLD DS BEING ALLOCATED
         SPACE 2
* DECONCATENATE LIBRARIES
         TM    FLAG2,LIBCAT   WERE LIB DATASETS CONCATENATED
         BZ    NODECAT1       BR IF NOT
         MVI   DA10FLG,C0     ZERO OUT 1ST BYTE OF FLAG AREA
         MVC   DA10FLG+C1(C5),DA10FLG BLANK OUT FLAGS,DARC,RESERVED
         MVC   DA10DDN(C8),LIBDSNA+C4 MOVE DECONCAT DDNAME
         BAL   R10,GODAIR     GO DECONCATENATE LIB DATA SETS
         SPACE 2
* DECONCATENATE SOURCE
NODECAT1 TM    FLAG2,SRCCAT   WAS SOURCE CONCATENATED
         BZ    NODECAT        BR IF NOT
         MVI   DA10FLG,C0     CLEAR 1ST BYTE OF FLAG AREA
         MVC   DA10FLG+C1(C5),DA10FLG BLANK OUT FLAGS,DARC,RESERVED
         MVC   DA10DDN(C8),SRCDSNA+C4 MOVE DECONCAT DDNAME
         BAL   R10,GODAIR     GO DECONCATENATE SOURCE DATASETS
*
NODECAT  L     R13,C4(R0,R13) RESTORE ORIGINAL SAVE AREA POINTER
         L     R14,C12(R13)   RESTORE REGISTER 14
         LM    R0,R12,C20(R13) RESTORE REST OF REGISTERS
         SR    R15,R15        ZERO RETURN CODE
         BR    R14            RETURN
STAE12   DC    H'12'          LOCAL HALF-WORD 12 (BASE R15)
         EJECT
DSNCHECK EQU   *              INPUT DATA SET NAME VALIDITY EXIT
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         OI    FLAG,ALCSRC    TURN ON SOURCE DATASET ALLOCATION FLAG
         L     R4,C0(R2)      GET ADDRESS OF DSNAME
         LTR   R4,R4          SEE IF DSNAME IS OMITTED
         BZ    NOBASIC        BRANCH TO NOBASIC DSN IF OMITTED
         LH    R5,C4(R2)      GET LENGTH OF DSNAME
         LR    R1,R5          SAVE IT FOR FINAL LENGTH OF DSN
         TM    C6(R2),X40     DSN QUOTED?
         BO    BASIC          BR IF SO
         CLI   C0(R4),CASTERSK SYSIN=TERMINAL?
         BNE   DSNCHK2        BR IF NOT
         LA    R1,L'TEMPNAME  IF SO, SUBSTITUTE
         LA    R4,TEMPNAME     "TEMPNAME" FOR BASIC DSN
         B     BASIC            & CONTINUE
DSNCHK2  CH    R5,FOUR        TEST LENGTH OF DSN
         BNH   BASIC          BR IF FOUR OR LESS
         AR    R5,R4          GET POINTER
         SH    R5,FOUR        TO LAST 4 CHARACTERS OF DSN
         CLC   C0(C4,R5),ASM+C1 CHECK IF '.ASM'
         BNE   BASIC          BR IF NOT
         SH    R1,FOUR        ELSE GET LENGTH OF BASIC DSN
         B     BASIC          CONTINUE PROCESSING
NOBASIC  SR    R1,R1          ZERO OUT A REGISTER
BASIC    CLI   SRCDSNA+1,C0   FIRST DSN SUPPLIED?
         BNE   NOBASIC2       BR IF NOT
         ST    R4,BSDSNPTR    STORE BASIC DSN PTR FIELD
         STH   R1,BSDSNLTH    STORE BASIC DSN LTH FIELD
         MVC   BSMEMPTR(C6),C8(R2) SAVE ADDR AND LTH OF INPUT MEMBER
NOBASIC2 LH    R1,SRCDSNA     NUM OF SOURCE DATASETS ALREADY
         LR    R8,R1          SAVE FOR LATER
         CH    R8,TWENTY      MAXIMUM ALREADY?
         BL    DSNVC01        BR IF NOT
         LA    1,EXSRC        ELSE POINT TO ERROR MESSAGE
         BAL   R10,PUTLIFCE    & PUT OUT "TOO MANY SOURCE DS"
         B     RC#0EXIT       EXIT
DSNVC01  SLL   R8,C3          MULTIPLY COUNT BY 8
         LA    R9,DAIRPB      POINTER TO DAIR PARAMETER BLOCK
         LA    R8,SRCDSNA+C4(R8) GET PROPER DD SLOT FOR NEW NAME
         LA    R1,C1(R1)      INCREMENT COUNT
         STH   R1,SRCDSNA      & SAVE IT
         LA    R1,ASM         PLACE ADDR OF QUALIFIER '.ASM' IN REG 1
         OI    SWITCH,ALCOLD  SET OLD SWITCH ON
         B     VCHKRTN        BRANCH TO VALIDITY EXIT SIMULATING RTN
         EJECT
EXTIMCHK EQU   *              EXECUTION TIME VALIDITY CHECK EXIT
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         L     R4,C0(R2)      GET ADDRESS
         LH    R5,C4(R2)        AND ADDRESS OF TIME STRING
CHECKNUM CLI   C0(R4),CC0     CHECK IF DIGIT IS ZERO
         BNE   RC#0EXIT       IF NOT ZERO RETURN TO PARSE WITH RC=0
         LA    R4,C1(R0,R4)   UPDATE PTR TO NEXT DIGIT
         BCT   R5,CHECKNUM    GO CHECK DIGIT
         MVC   MSGTEXT(LBADTIME),BDETMSG MOVE IN 1ST PART BAD TIME MSG
         LA    R5,MSGTEXT+LBADTIME POINT PAST 1ST PART OF MESSAGE
         LH    R10,C4(R2)     GET LENGTH OF TIME VALUE
         BCTR  R10,R0         GET MOVE LENGTH
         L     R1,C0(R2)      GET ADDRESS OF TIME VALUE
         EX    R10,MOVE       MOVE IT INTO MESSAGE
         LA    R15,LBADTIME+C1+C4(R0,R10) GET TOTAL LENGTH OF LINE
         STH   R15,MSGLTH     STORE IN PARM COUNT
         SR    R10,R10        ZERO REGISTER 10
         STH   R10,MSGOFF     STORE IN MESSAGE OFF-SET
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     RC#8EXIT       GIVE RETURN CODE OF EIGHT
         EJECT
* VALIDITY CHECKING FOR LIBRARY DSN
LIBVC    EQU   *              DEFINE LABEL
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         LH    R8,LIBDSNA     NUM OF LIB DATA SETS ALREADY HAVE
         CH    R8,TWENTY      DO WE HAVE TWENTY ALREADY
         BL    LIBVC01        BRANCH IF NO
         LA    R1,EXLIB       TOO MANY LIBRARY DATA SETS MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT LINE
         B     RC#0EXIT       TAKE RETURN CODE 0 EXIT TO PARSE
LIBVC01  SLL   R8,C3          MULTIPLY COUNT BY 8
         LA    R9,DAIRPB      POINTER TO DAIR PARAMETER BLOCK
         LA    R8,LIBDSNA+C4(R8) GET PROPER DDNAME SLOT FOR NEW NAME
         BAL   R10,DAIRSTND   GO TO DAIR STANDARD SECTION
         BAL   R10,DAIRSHR    GO TO DAIR SHR SET-UP
         MVI   DA08MNM,CBLANK BLANK OUT MEMBER NAME
         MVC   DA08MNM+C1(C7),DA08MNM BLANK OUT REST OF MEMBER NAME
         L     R1,C16(R0,R2)  PTR TO PASSWORD
         LTR   R1,R1          WAS A PASSWORD SPECIFIED
         BNZ   LIBVC02        BRANCH IF YES
         LA    R1,BLANKS      GET LOC OF BLANKS
LIBVC02  MVC   DA08PSWD(C8),C0(R1) MOVE TO PASSWORD AREA
         LA    R5,DSNAME      MOVE-TO ADDRESS FOR EXECUTED MOVE
         L     R1,C0(R0,R2)   PTR TO DSNAME
         LH    R7,C4(R0,R2)   DSNAME LENGTH
         STH   R7,DSLNGTH     PUT DSNAME LENGTH IN PARM BLOCK
         BCTR  R7,R0          GET LENGTH FOR MOVE
         EX    R7,MOVE        MOVE DSNAME TO PARM BLOCK
         MVI   DA08CTL,X00    INDICATE NO USER ID TO BE APPENDED
         TM    C6(R2),X40     WAS NAME QUOTED
         BO    LIBVC06        BRANCH IF YES
         MVI   DA08CTL,DA08UID HAVE USERID PREFIXED
         CH    R7,FOUR        IS NAME LONG ENOUGH TO CONTAIN '.ASM'
         BL    LIBVC05        BRANCH IF NO
         SH    R7,THREE       ADJUST LENGTH
         LA    R1,C0(R1,R7)   POINT TO POSSIBLE '.ASM'
         CLC   0(C4,R1),ASM+C1  IS '.ASM' ON END
         BE    LIBVC06        BRANCH IF YES
LIBVC05  LH    R7,C4(R0,R2)   LENGTH OF DSNAME
         LA    R5,DSNAME(R7)  POINT PAST DSNAME IN DSNAME AREA
         MVC   0(C4,R5),ASM+C1  APPEND '.ASM' TO DSN
         LA    R7,C4(R0,R7)   UPDATE LENGTH TO INCLUDE '.ASM'
         STH   R7,DSLNGTH     SAVE NEW LENGTH
LIBVC06  OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         BAL   R10,GODAIR     GO ALLOCATE DATA SET
         BZ    LIBVC07        BRANCH IF GOOD ALLOCATION
         BAL   R10,SETUPDSN    ELSE SET UP 1ST PART OF MESSAGE
         LA    R1,WORK        PTR TO DSNAME PART OF MSG
         BAL   R10,DSERR      GO PUT OUT ERROR
         B     RC#8EXIT       EXIT TO PARSE WITH RC=8
         EJECT
* LIBRARY DATASET NOW ALLOCATED
LIBVC07  CLI   DA08DSO,X02    WAS DATA SET PARTITIONED
         BE    LIBVC08        BRANCH IF YES
* NOTE: LIBRARIES MUST BE PDS
         MVC   MSGTEXT(BADLIB1L),BADLIB1 MOVE 1ST PART OF MESSAGE
         LA    R5,MSGTEXT+BADLIB1L POINT PAST 1ST PART
         LA    R1,DSNAME      POINT TO DSNAME
         LH    R10,DSLNGTH    DSNAME LENGTH
         EX    R10,MOVE       MOVE DSNAME
         LA    R5,MSGTEXT+BADLIB1L(R10) POINT PAST DSNAME
         MVC   C0(BADLIB2L,R5),BADLIB2 MOVE REST OF MESSAGE
         LA    R10,BADLIB1L+BADLIB2L+C4(R0,R10) GET TOTAL MSG LENGTH
         STH   R10,MSGLTH     SAVE IN MESSAGE PARM LIST
         SR    R10,R10        ZERO REGISTER 10
         STH   R10,MSGOFF     STORE IN OFF-SET
         XC    MSGNXT(C4),MSGNXT ZERO PTR TO NEXT MSG
         LA    R1,MSGTEXT     POINT TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     RC#8EXIT       EXIT TO PARSE WITH RC=8
LIBVC08  LH    R1,LIBDSNA     UPDATE DDNAME COUNT
         LA    R1,C1(R0,R1)   BY ONE
         STH   R1,LIBDSNA     SAVE NEW COUNT
         B     GOODEXIT       GO MOVE DDNAME & RETURN TO PARSE
         EJECT
* VALIDITY CHECKING FOR UPDATE DSN
UPDVC    EQU   *              DEFINE LABEL
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         LA    R1,ASM         PTR TO QUAL 'ASM'
         LA    R8,SYSUP       PTR TO SYSUP DDNAME SLOT
         OI    SWITCH,ALCOLD  TURN ON "OLD" SWITCH
         B     VCHKRTN        BRANCH TO VALIDITY ROUTINE
         EJECT
* VALIDITY CHECKING FOR LOAD MODULE
LOADVC   EQU   *
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         LA    R1,OBJ         PTR TO QUAL 'OBJ'
         LA    R8,SYSLIN      PTR TO SYSLIN DDNAME SLOT
         NI    SWITCH,X'FF'-ALCOLD TURN "OLD" SWITCH OFF
         OI    FLAG,ALCLOAD   INDICATE LOAD IS BEING ALLOCATED
         NI    FLAG,X'FF'-ALCLIST-ALCSRC  CLEAR LIST/SOURCE-IN-ALLOC
         B     VCHKRTN        BRANCH TO VALIDITY ROUTINE
         SPACE 2
* VALIDITY CHECKING FOR PRINT DATASET
PRINTVC  EQU   *              DEFINE LABEL
         USING *,15           ## SPECIAL
         B     VCCOMM         DO ENTRY CODE
         DROP  15             ##
         LA    R1,LISTT       PTR TO QUAL 'LIST'
         LA    R8,SYSPRINT    PTR TO SYSPRINT DDNAME SLOT
         NI    SWITCH,X'FF'-ALCOLD TURN "OLD" SWITCH OFF
         OI    FLAG,ALCLIST   INDICATE LIST IS BEING ALLOCATED
         NI    FLAG,X'FF'-ALCLOAD-ALCSRC  CLEAR LOAD/SOURCE-IN-ALLOC
         B     VCHKRTN        BRANCH TO VALIDITY ROUTINE
         EJECT
* COMMON ENTRY CODE FOR VALIDITY-CHECK ROUTINES
VCCOMM   STM   R14,R12,C12(R13) SAVE CALLER'S REGISTERS
         L     R11,C4(R0,R1)  RESTORE WORK AREA BASE
         L     R12,PROGBASE   RESTORE PROGRAM BASE
         L     R3,APROMPT2    SET UP SECOND BASE REGISTER
         LA    R2,C8(R1)      PTR TO 2NDARY MSG POINTER
         ST    R2,PTR2NDMS    SAVE FOR VALIDITY EXITS
         ST    R13,VALSAVE+C4 SAVE POINTER TO CALLER'S SAVE AREA
         LA    R2,VALSAVE     POINTER TO VALIDITY SAVE AREA
         ST    R2,C8(R0,R13)  CHAIN SAVE AREAS
         LR    R13,R2         COMPLETE CHAINING
         L     R2,C0(R0,R1)   RETURN POINTER TO PDE
         B     4(R15)         RETURN TO ROUTINE
         SPACE 5
VCHKRTN  EQU   *              VALIDITY EXIT SIMULATING RTN
         L     R4,C0(R0,R2)   GET ADDR OF DSNAME
         LTR   R4,R4          TEST IF DSNAME WAS OMITTED
         BZ    DRLSTBLD       IF OMITTED BRANCH TO DAIR PLIST BUILD RTN
         CLI   C0(R4),CASTERSK ELSE TEST IF DSNAME IS AN *
         BNE   DRLSTBLD       IF NOT GO BUILD DAIR PARAMETER LIST
         BAL   R10,ALOCTERM   IF '*' ALLOCATE THE TERMINAL
         B     GOODEX00       EXIT
         SPACE 5
DRLSTBLD EQU   *              DAIR PLIST BUILDING ROUTINE  STANDARD SEC
         USING DAPB08,R9      ESTABLISH ADDRESSABILITY FOR DAIR
         LA    R9,DAIRPB      LOAD BASE REGISTER
         L     R4,C0(R0,R2)   GET ADDRESS OF DSNAME
         LH    R5,C4(R0,R2)   GET LENGTH OF DSNAME
         LR    R7,R5          SAVE LENGTH OF DSNAME
         LR    R15,R5         SAVE LENGTH OF DSNAME
         SR    R6,R6          GET LENGTH OF
         IC    R6,C0(R1)      DESCRIPTIVE QUALIFIER
         LA    R1,C1(R0,R1)   HAVE POINTER TO ACTUAL QUALIFIER
         LTR   R4,R4          SEE IF DSNAME IS OMITTED
         BZ    GETBASIC       BRANCH IF OMITTED TO GET BASIC DSNAME RTN
         TM    R6(C2),X40     SEE IF DSNAME IS IN QUOTES
         BO    NOINSRT        BRANCH AROUND TESTS AND INSERTION IF QUOT
         CR    R5,R6          COMPARE LTH OF DSNAME WITH LTH OF QUALIFI
         BL    INSRT          BRANCH TO INSERTION RTN IF LTH IF DSN IS
         BE    MORETEST       BRANCH FOR FURTHER TESTING IF LENGTHS ARE
         AR    R5,R4          ADD LTH OF DSNAME TO ADDRESS OF DSNAME
         SR    R5,R6          SUBTRACT LTH OF QUALIFIER FROM THIS SUM
         BCTR  R6,R0          SUBTRACT 1 FROM LTH OF QUAL. FOR EX INSN.
         EX    R6,COMPARE     SEE IF DSNAME ENDS IN DESCRIPTIVE QUALIFI
         LA    R6,C1(R0,R6)   RESTORE LTH OF QUALIFIER
         BE    NOINSRT        BRANCH AROUND INSERTION IF EQUAL
INSRT    LA    R5,DSNAME      GET LOCATION ON DSNAME FIELD FOR
         AR    R5,R7          INSERTION OF DESCRIPTIVE QUALIFIER
         AR    R15,R6         ADD LTH OF QUALIFIER TO LTH OF NAME
         BCTR  R6,R0          SUBTRACT 1 FROM LTH OF QUAL. FOR EX INSN.
         EX    R6,MOVE        MOVE DESCRIPTIVE QUALIFIER INTO DSNAME FI
NOINSRT  BCTR  R7,R0          SUBTRACT 1 FROM LTH OF DSN FOR EX INSN.
         LR    R1,R4          SET UP ADDRESS OF DSNAME FOR EX INSN.
         LA    R5,DSNAME      GET LOCATION OF DSNAME FIELD
         EX    R7,MOVE        MOVE DSNAME INTO DSNAME FIELD
         STH   R15,DSLNGTH    MOVE LTH OF DSNAME INTO DSLNGTH FIELD
         B     TESTMEMB       BRANCH TO MEMBER NAME SECTION
MORETEST LR    R5,R4          SET UP ADDRESS OF DSNAME FOR EX INSN.
         BCTR  R6,R0          SUBTRACT 1 FROM LTH OF QUAL FOR EX INSN.
         EX    R6,COMPARE     SEE IF DSNAME EQUALS DESCRIPTIVE QUALIFIE
         BE    NOINSRT        BRANCH AROUND INSERTION IF EQUAL
         LA    R6,C1(R0,R6)   RESTORE LTH OF FULL QUALIFIER
         B     INSRT          BRANCH TO INSERTION ROUTINE
GETBASIC L     R4,C8(R0,R2)   GET ADDR OF MEMBER NAME
         LTR   R4,R4          TEST IF MEMBER NAME WAS OMITTED
         BNZ   NOBSDSN        IF NOT OMITTED DO NOT USE BASIC DSNAME
         L     R4,BSDSNPTR    GET ADDR OF BASIC DSNAME
         LH    R5,BSDSNLTH    GET LTH OF BASIC DSNAME
         LTR   R4,R4          SEE IF BASIC DSNAME EXISTS
         BZ    NOBSDSN        BRANCH TO NOBASIC RTN IF IT DOES NOT
         LR    R7,R5          SAVE LENGTH OF BASIC DSNAME
         LR    R15,R5         SAVE LENGTH OF BASIC DSNAME
         B     INSRT          BRANCH TO INSERTION ROUTINE
NOBSDSN  LA    R1,C1(R0,R1)   GET POINTER TO QUALIFIER MINUS LEADING'.'
         BCTR  R6,R0          GET LTH OF QUALIFIER MINUS LEADING'.'
         LR    R15,R6         SAVE THIS LENGTH
         BCTR  R6,R0          SUBTRACT 1 FROM LTH OF QUAL FOR EX. INSN.
         LA    R5,DSNAME      GET LOCATION OF DSNAME FIELD
         EX    R6,MOVE        MOVE QUAL.MINUS LEADING'.'INTO DSNAME FIE
         STH   R15,DSLNGTH    STORE LTH OF QUAL LESS '.' INTO DSNAME FI
TESTMEMB MVI   DA08MNM,CBLANK BLANK OUT MEMBER NAME FIELD
         MVC   DA08MNM+C1(R7),DA08MNM IN DAIR PARAMETER LIST
         MVC   MEMBSAVE(C8),DA08MNM BLANK OUT MEMBSAVE FIELD
         L     R1,C8(R0,R2)   GET ADDRESS OF MEMBER NAME
         LTR   R1,R1          SEE IF MEMBER NAME IS OMITTED
         BNZ   INSRMEMB       IF NOT OMITTED INSERT MEMBER
         L     R1,C0(R0,R2)   GET ADDR OF DSNAME SPECIFIED
         LTR   R1,R1          TEST IF DSNAME WAS OMITTED
         BNZ   TESTPASS       IF OMITTED BRANCH TO PSWD TESTING
         L     R1,BSMEMPTR    GET ADDR OF BASIC MEMBER NAME
         LTR   R1,R1          TEST IF BASIC MEMBER NAME EXISTS
         BZ    TESTPASS       IF NONE EXISTS BRANCH TO PSWD TESTING
         LH    R7,BSMEMLTH    ELSE GET LTH OF BASIC MEMBER NAME
         B     SUB1           BRANCH TO SUBTRACT 1 FOR EX INSN.
INSRMEMB LH    R7,C12(R0,R2)  GET LENGTH OF MEMBER NAME
SUB1     BCTR  R7,R0          SUBTRACT 1 FROM MEMBER LTH FOR EX INSN.
         LA    R5,MEMBSAVE    PTR TO MEMBER NAME
MOVEMEMB EX    R7,MOVE        MOVE MEMBER NAME INTO PROPER FIELD
TESTPASS MVI   DA08PSWD,CBLANK BLANK OUT PASSWORD FIELD
         MVC   DA08PSWD+C1(R7),DA08PSWD IN DAIR PARAMETER LIST
         L     R1,C16(R0,R2)  GET ADDRESS OF PASSWORD
         LTR   R1,R1          SEE IF PASSWORD IS OMITTED
         BZ    CALLDAIR       BRANCH IF YES
         LH    R7,C20(R0,R2)  GET LENGTH OF PASSWORD
         BCTR  R7,R0          SUBTRACT 1 FROM LTH FOR EX INSN.
         LA    R5,DA08PSWD    SET UP ADDRESS OF PASSWORD FIELD FOR EX I
         EX    R7,MOVE        MOVE PASSWORD INTO PASSWORD FIELD
CALLDAIR BAL   R10,DAIRSTND   BRANCH AND LINK TO DAIR STANDARD SECTION
         TM    FLAG,ALCSRC    IS IT SOURCE DATA SET ALLOCATION
         BZ    CALLD02        BRANCH IF NO
         BAL   R10,DAIRSHR    GO SET UP DAIR SHR SLOTS
         B     CALLD03        BRANCH AROUND OLD SET-UP
CALLD02  BAL   R10,DAIROLD    BRANCH AND LINK TO DAIR OLD SECTION
CALLD03  BAL   R10,GODAIR     BRANCH AND LINK TO DAIR INVOKING ROUTINE
         B     OLDRCTST       BRANCH TO OLD RC TESTING RTN
         SPACE 5
COMPARE  CLC   C0(C0,R5),C0(R1) FOR EXECUTED COMPARE
MOVE     MVC   C0(C0,R5),C0(R1) FOR EXECUTED MOVE
         SPACE 5
ASM      DC    X'04'          LENGTH OF '.ASM' STRING
         DC    C'.ASM'        '.ASM' CHARACTER STRING
OBJ      DC    X'04'          LENGTH OF '.OBJ' STRING
         DC    C'.OBJ'        '.OBJ' CHARACTER STRING
LISTT    DC    X'05'          LENGTH OF '.LIST' STRING
         DC    C'.LIST'       '.LIST' CHARACTER STRING
         EJECT
DAIRSTND LA    R1,C8          PLACE DAIR ENTRY CODE 08
         STH   R1,DA08CD      INTO DAIR PARAMETER BLOCK
         XC    DA08FLG(C6),DA08FLG ZERO OUT FLAG,DARC,CTRC FIELDS
         LA    R1,DSLTHDSN    PLACE PTR TO DSLNGTH/DSNAME FIELD
         ST    R1,DA08PDSN    INTO DAIR PARAMETER BLOCK
         MVI   DA08DDN,CBLANK BLANK OUT DDNAME,UNITNAME,AND
         MVC   DA08DDN+C1(C23),DA08DDN SERIAL NO. FIELDS IN PARM BLOCK
         XC    DA08BLK(C16),DA08BLK ZERO OUT BLKSIZE,PRIMARY SPACE,
*                             SECONDARY SPACE,AND DIRECTORY QUANTITY
*                             FIELDS IN DAIR PARAMETER BLOCK
         MVI   DA08CTL,X00    SET CONTROL FIELD TO ZERO
         TM    C6(R2),X40     SEE IF DSNAME IS IN QUOTES
         BO    NOUID          DO NOT PREFIX USERID IF IN QUOTES
         MVI   DA08CTL,DA08UID ELSE HAVE USERID PREFIXED
NOUID    XC    DA08CTL+C1(C4),DA08CTL+C1 ZERO OUT RESERVED AND DSORG
*                             FIELDS IN DAIR PARAMETER BLOCK
         BR    R10            RETURN TO CALLER
         SPACE 4
DAIROLD  MVI   DA08DSP1,DA08OLD SET STATUS OF DATA SET TO OLD
         B     DAIRSHR+4
DAIRSHR  MVI   DA08DSP1,DA08SHR SET STATUS OF DATA SET TO SHR
         MVI   DA08DPS2,DA08KEEP SET NORMAL DISPOSITION TO KEEP
         MVI   DA08DPS3,DA08KEP SET CONDITIONAL DISPOSITION TO KEEP
         OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         BR   R10             RETURN TO CALLER
         SPACE 4
DAIRNEW  EQU   *              DAIR NEW DATA SET PLIST BUILDING SECTION
* SET UP DEFAULT SPACE ALLOCATION
         LA    R1,C10         PLACE 10 IN PRIMARY SPACE
         ST    R1,DA08PQTY    QUANTITY FIELD
         LA    R1,C5          PLACE 5 IN SECONDARY SPACE
         ST    R1,DA08SQTY    QUANTITY FIELD
         MVI   DA08DSP1,DA08NEW SET STATUS OF DATA SET TO NEW
         TM    FLAG,ALCUTIL   IS IT UTILITY ALLOCATION
         BZ    NODIRCT1       BRANCH IF NO
         MVI   DA08DPS2,DA08DEL MAKE NORMAL DISPOSITION DELETE
         MVI   DA08DPS3,DA08DELE MAKE CONDITIONAL DISPOSITION DELETE
         LA    R1,C100        MAKE ALLOCATION BIG FOR UTILS
         ST    R1,DA08PQTY    PRIMARY
         LA    R1,C25
         ST    R1,DA08SQTY    SECONDARY
         B     NODIRCT2       BRANCH AROUND OTHER DISP SETTING
NODIRCT1 MVI   DA08DPS2,DA08CAT SET NORMAL DISPOSITION TO CATLG
         MVI   DA08DPS3,DA08CATL SET CONDITIONAL DISP TO CATLG
NODIRCT2 OI    DA08CTL,DA08TRKS+DA08RLSE MARK TRACKS,RELEASE
*                             LEAVE USERID PART OF FIELD AS IT WAS FROM
*                             DAIR STANDARD SECTION
         TM    FLAG,ALCLIST   LIST DS BEING ALLOCATED?
         BNO   NODIRCT3       BR IF NOT
         LA    R1,1210        MAKE BLOCKSIZE=1210
         ST    R1,DA08BLK      FOR SYSPRINT (LRECL=121)
NODIRCT3 NI    FLAG2,X'FF'-OLDALC INDICATE NEW DATASET BEING ALLOCATED
         BR    R10            RETURN TO CALLER
         SPACE 5
GODAIR   LA    R15,DAIRPL     ESTABLISH ADDRESSABILITY
         USING DAPL,R15       DAIR PARAMETER LIST
         ST    R9,DAPLDAPB    STORE PTR TO DAIR PARAMETER BLOCK
         LA    R1,DAPL        PLACE ADDR OF DAIR PARM LIST IN REG1
         L     R15,ENTRDAIR   PLACE ADDR OF DAIR ENTRY PT IN REG15
         XC    DAIRECB(C4),DAIRECB ZERO OUT DAIR ECB
         CALL  (15)           CALL DAIR SERVICE ROUTINE
         LTR   R15,R15        TEST RETURN CODE FROM DAIR
         BR    R10            RETURN TO CALLER
         SPACE 5
OLDRCTST EQU   *              DAIR OLD RC TESTING ROUTINE
         BNZ   TESTOLD        BRANCH TO SEE IF DATA SET MUST BE OLD;
*                             DAIR RETURN CODE WAS NOT ZERO
         CLI   DA08MNM,CBLANK TEST IF ALLOCATION WAS WITH MEMBER NAME
         BNE   GOODEXIT       BRANCH IF WITH MEMBER
         CLI   DA08DSO,X02    TEST IF DSORG IS PARTITIONED ORGANIZATION
         BE    TSTMSAVE       IF PARTITIONED BRANCH TO TEST
*                             IF A MEMBER WAS SPECIFIED
         CLI   MEMBSAVE,CBLANK ELSE TEST MEMBSAVE FIELD FOR
*                             POSSIBLE ERROR
         BE    GOODEXIT       IF BLANKS EXIT WITH RC=0
         B     NOTPDS         ELSE BRANCH TO ISSUE NOT A PDS MSG
TSTMSAVE CLI   MEMBSAVE,CBLANK TEST IF MEMBER WAS SPECIFIED
         BNE   DOMEMB         BRANCH IF MEMBER WAS SPECIFIED
INSRTEMP LA    R1,TEMPNAME    PLACE ADDR OF TEMPNAME INTO
         ST    R1,BSMEMPTR    BASIC MEMBER NAME FIELD
         LA    R1,C8          STORE LENGTH OF 8 INTO
         STH   R1,BSMEMLTH    BASIC MEMBER NAME LTH FIELD
         MVC   DA08MNM(C8),TEMPNAME USE TEMPNAME AS MEMBER NAME
         MVC   MSGTEXT(PDS1L),PDS1 MOVE IN 1ST PART OF MESSAGE
         LA    R5,MSGTEXT+PDS1L POINT PAST 1ST PART OF MESSAGE
         LA    R1,DSNAME      POINT TO DSNAME
         LH    R10,DSLNGTH    DSNAME LENGTH
         EX    R10,MOVE       MOVE DSNAME
         LA    R5,MSGTEXT+PDS1L(R10) POINT PAST DSNAME
         MVC   C0(PDS2L,R5),PDS2 MOVE REST OF MESSAGE
         LA    R10,PDS2L+C4+PDS1L(R0,R10) GET TOTAL MESSAGE LENGTH
         STH   R10,MSGLTH     SAVE IN MSG PARM LIST
         SR    R10,R10        ZERO REGISTER 10
         STH   R10,MSGOFF     ZERO MESSAGE OFF-SET
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT REST OF MESSAGE
         LA    R1,TEMPNMSG    PTR TO TEMPNAME MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     DOMEMB2        SKIP TO BLDL
TEMPNAME DC    C'TEMPNAME'    TEMPNAME DC
DOMEMB   MVC   DA08MNM(C8),MEMBSAVE USE MEMBER SPECIFIED
DOMEMB2  BAL   R10,OPENBLDL   GO DO BLDL ON MEMBER
         LTR   R15,R15        TEST RETURN CODE FROM BLDL RTN
         BZ    REALLOC        IF RC=0 BRANCH TO DAIR REALLOCATION RTN
         TM    FLAG,ALCSRC    IS IT A SOURCE DATA SET
         BZ    REALLOC        BRANCH TO DAIR REALLOCATION ROUTINE
         MVC   MSGTEXT(NOMEM2L),NOMEM MOVE IN BASIC MESSAGE
         MVC   MSGTEXT+NOMEM1L(C8),MEMBNAME MOVE MEMBER NAME
         LA    R5,MSGTEXT+NOMEM2L MOVE-TO ADDRESS
         LA    R1,DSNAME      PTR TO DSNAME
         LH    R10,DSLNGTH    DSNAME LENGTH
         BCTR  R10,R0         GET MOVE LENGTH
         EX    R10,MOVE       MOVE DSNAME
         LA    R10,NOMEM2L+C1+C4(R0,R10) GET ENTIRE MSG LENGTH
         STH   R10,MSGLTH     PUT MSG LENGTH IN PARM LIST
         SR    R10,R10        ZERO REGISTER 10
         STH   R10,MSGOFF     STORE IN MESSAGE OFF SET
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     RC#8EXIT       RETURN TO PARSE WITH RC=8
         EJECT
OPENBLDL MVC   DCBG(LTHDCB),DCB MOVE COPY OF DCB INTO GETMAIN STORAGE
         MVC   DCBG+C40(R8),DA08DDN MOVE DDNAME INTO DCB
         LA    R4,DCBG        PLACE ADDR OF GETMAIN DCB IN A REGISTER
         MVC   OPENPL(C4),OPENBLK MOVE PARAMETER LIST
         LA    R1,OPENPL      GET ADDR FOR OPEN PARAMETER LIST
         OPEN  ((4)),MF=(E,(1)) OPEN DATA SET
         MVC   MEMBNAME(C8),DA08MNM MOVE MEMBER NAME INTO BLDL LIST
         MVC   FFLLG(C4),FFLL MOVE FFLL INFORMATION INTO FIELD IN
*                             GETMAIN STORAGE
         BLDL  (4),BLDLLIST   ISSUE A BLDL ON THE MEMBER NAME
         LR    R5,R15         SAVE RETURN CODE FROM BLDL ROUTINE
         MVC   CLOSEPL(C4),CLOSEBLK MOVE PARAMETER LIST
         LA    R1,CLOSEPL     GET ADDR FOR CLOSE PARAMETER LIST
         CLOSE ((4)),MF=(E,(1)) CLOSE DATA SET
         LR    R15,R5         RESTORE RETURN CODE IN REGISTER 15
         BR    R10            RETURN TO CALLER
OPENBLK  OPEN  (0),MF=L       LIST FORM OF OPEN
CLOSEBLK CLOSE (0),MF=L       LIST FORM OF CLOSE
DCB      DCB   DDNAME=DDNAME,DSORG=PO,MACRF=R
LTHDCB   EQU   *-DCB          LENGTH OF DCB
         EJECT
TESTOLD  TM    SWITCH,ALCOLD  TEST IF DATA SET MUST BE OLD
         BNO   ALLOCNEW       IF NOT BRANCH TO ALLOCATE A NEW DATA SET
         BAL   R10,SETUPDSN   SET UP 1ST PART OF MESSAGE
         LA    R1,WORK        PTR TO DSNAME PART OF MSG
         BAL   R10,DSERR      GO PUT OUT ERROR
         B     RC#8EXIT       GO EXIT
         SPACE 2
NOTPDS   MVC   MSGTEXT(NOTPDS1L),NOTPDS1 MOVE 1ST PART OF MESSAGE
         MVC   MSGTEXT+C17(C8),MEMBSAVE MOVE IN MEMBER NAME
         LA    R5,MSGTEXT+NOTPDS1L MOVE-TO ADDRESS
         LA    R1,DSNAME      MOVE-FROM ADDRESS
         LH    R10,DSLNGTH    DSNAME LENGTH
         EX    R10,MOVE       MOVE DSNAME
         LA    R5,C0(R10,R5)  UPDATE MOVE-TO ADDRESS
         LA    R1,NOTPDS2     MOVE-FROM ADDRESS
         LA    R10,NOTPDS2L   MESSAGE LENGTH
         EX    R10,MOVE       MOVE IN REST OF MESSAGE
         LA    R15,MSGTEXT    BEGINNING OF BUFFER
         SR    R5,R15         GET LENGTH OF PART OF MESSAGE
         LA    R5,NOTPDS2L+C4(R0,R5) GET TOTAL LENGTH OF MSH
         STH   R5,MSGLTH      STORE MESSAGE LENGTH
         XC    MSGOFF(C2),MSGOFF ZERO MESSAGE OFFSET
         LA    R1,MSGTEXT     PTR TO MSG TEXT
         BAL   R10,PUTLIFCE
         B     RC#8EXIT       GO EXIT
         SPACE 2
PROMPT2  CSECT
GOODEXIT MVC   C0(C8,R8),DA08DDN MOVE DATA SET DDNAME INTO PROPER SLOT
*                             ON DDNAME LIST
GOODEX00 TM    FLAG,ALCLIST   IS A LIST DATA SET BEING ALLOCATED
         BZ    GOODEX01       BRANCH IF NO
         OI    FLAG,LISTALCD  TURN ON LIST ALLOCATED FLAG
         B     GOODEX02       SKIP AROUND LOAD TEST
GOODEX01 TM    FLAG,ALCLOAD   IS A LOAD DATASET BEING ALLOCATED
         BZ    GOODEX02       BRANCH IF NO
         OI    FLAG,LOADALCD  TURN ON LOAD ALLOCATED FLAG
GOODEX02 EQU   *              DEFINE LABEL
         B     RC#0EXIT       RETURN TO PARSE WITH RC=0
         SPACE 2
ALLOCNEW EQU   *              ALLOCATION OF A NEW DATA SET SECTION
         BAL   R10,DAIRSTND   BRANCH AND LINK TO DAIR STANDARD SECTION
         BAL   R10,DAIRNEW    BRANCH AND LINK TO DAIR NEW SECTION
         CLI   MEMBSAVE,CBLANK WAS A MEMBER SPECIFIED
         BE    ALLOCN01       BRANCH IF NO
         MVC   DA08MNM(C8),MEMBSAVE MOVE MEMBER NAME TO DAIR PARM BLK
         MVI   DA08DQTY+C3,C5 DIRECTORY QUANTITY
ALLOCN01 BAL   R10,GODAIR     BRANCH AND LINK TO DAIR INVOKING ROTINE
         BZ    GOODEXIT       EXIT WITH RC=0 IF DAIR RC=0
         BAL   R10,SETUPDSN   SET UP 1ST PART OG MESSAGE
         LA    R1,WORK        PTR TO DSNAME PART OF MSG
         BAL   R10,DSERR      GO PUT OUT ERROR
         B     RC#8EXIT       GO EXIT
         EJECT
ALOCTERM EQU   *              TERMINAL ALLOCATION RTN
         USING DAPB1C,R9      SET UP ADDRESSABILITY FOR DAIR 1C PB
         LA    R9,DAIRPB      POINTER TO DAIR PARAMETER BLOCK
         LA    R1,X1C         PLACE DAIR ENTRY CODE INTO
         STH   R1,DA1CCD      DAIR PARAMETER BLOCK
         XC    DA1CFLG(C6),DA1CFLG  ZERO OUT FLAGS,DARC, AND RSVD
         MVI   DA1CDDN,CBLANK BLANK DDNAME FIELD IN PARAMETER
         MVC   DA1CDDN+C1(C7),DA1CDDN  BLOCK
         OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         ST    R10,TEMP       SAVE RETURN
         BAL   R10,GODAIR     BRANCH AND LINK TO DAIR INVOKING RTN
         BZ    TRMRC00        BRANCH IF GOOD ALLOCATION
         LA    R1,TERMDS      PTR TO 'TERMINAL DATA SET' CHAR STRING
         BAL   R10,DSERR      GO PUT OUT ERROR MESSAGE
         B     RC#12EXT       EXIT
TRMRC00  MVC   C0(C8,R8),DA1CDDN MOVE DDNAME TO DDLIST
         L     R10,TEMP       RESTORE RETURN
         BR    R10            RETURN TO CALLER
         SPACE 5
         USING DAPB18,R9      ESTABLISH ADDRESSABILITY FOR DAIR 18 PB
REALLOC  EQU   *              DAIR REALLOCATION ROUTINE
         BAL   R10,UNALLOC    BRANCH TO UNALLOCATION RTN
         OI    FLAG2,OLDALC   INDICATE OLD DATA SET BEING ALLOCATED
         BAL   R10,GODAIR     CALL DAIR TO UNALLOCATE DATA SET
         BZ    CALLDAIR       IF DAIR RC=0, REALLOCATE PDS WITH MEMBER
         B     DERET          BRANCH TO DAIR ERROR HANDLING
DCMDERR  MVC   MSGLTH(LCMDERR+C4),CMDERR MOVE MESSAGE
         LA    R5,MSGLTH+LCMDERR+C4 UPDATE MOVE TO ADDRESS
SCNDARY  LA    R5,C3(R0,R5)   NEED WORD ALIGNMENT
         SRA   R5,C2          SHIFT OFF NON WORD ALIGNMENT
         SLA   R5,C2          RETURN TO NORMAL
         ST    R5,MSGNXT      STORE PTR TO SECONDARY MESSAGE
         XC    C0(C8,R5),C0(R5) ZERO PTR TO NEXT, NUM SEGS
         MVI   C7(R5),C1      MAKE NUM SEGS ONE
         LA    R15,C12(R5)    PTR TO MSG SEG
         ST    R15,C8(R5)     STORE IN PARM BLOCK
         LR    R5,R15         MOVE-TO ADDRESS
         LA    R1,DERMSG      MOVE-FROM ADDRESS
         LA    R10,LDNXTMSG+C4-C1 MOVE-LENGTH
         EX    R10,MOVE       MOVE MESSAGE
         MVC   C4(C9,R5),MSGTEXT MAKE 2ND MEG ID SAME AS 1ST
         UNPK  LDNXTMSG+C4(C5,R5),DA18DARC(C3) UNPACK DAIR RET CODE
         TR    LDNXTMSG+C4(C4,R5),TRTBL-CC0 TRANS TO HEX
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTI LEVEL MSG
         B     RC#12EXT       TERMINATE PROMPTING
         SPACE 5
UNALLOC  EQU   *              DATA SET UNALLOCATION RTN
         LA    R1,C24         PLACE DAIR ENTRY CODE X'18'
         STH   R1,DA18CD      INTO DAIR PARAMETER BLOCK
         XC    DA18FLG(C10),DA18FLG ZERO OUT FLAGS,DARC,CTRC,
*                             AND DSNAME PTR FIELDS IN PB
*                             LEAVE DDNAME FIELD ALONE SINCE IT
*                             ALREADY CONTAINS THE DDNAME RETURNED FOR
*                             THE DATA SET USING DAIR ENTRY CODE X'08'
         MVI   DA18MNM,CBLANK BLANK OUT
         MVC   DA18MNM+C1(C7),DA18MNM MEMBER NAME FIELD
         XC    DA18SCLS(C4),DA18SCLS ZERO OUT SYSOUT,DISP, AND
*                             CONTROL FIELDS  UNALLOCATION IS ON
*                             DDNAME
         BR    R10            RETURN TO CALLER
*  SPECIAL COMMENT
*  EVEN THOUGH THE DAIR 18 PB AND THE DAIR 08 PB OCCUPY THE SAME
*  LOCATION IN STORAGE THE DAIR 18 PB IS SMALL ENOUGH SO AS NOT TO
*  DESTROY THE DA08MNM OR DA08PSWD FIELDS OF THE DAIR 08 PB
         EJECT
PUTLIFCE EQU   *              PUTLINE INTERFACE ROUTINE
         MVC   PUTLPB(C20),PUTLBLK MOVE PB INTO GETMAIN STORAGE
         LR    R4,R1          PLACE ADDR OF MESSAGE IN REG 3
         SH    R4,TWELVE      GET ADDR OF MESSAGE HEADER FIELD
         L     R15,ENTRPUTL   PLACE ENTRY POINT OF PUTLINE IN REG 15
         LA    R1,PUTLPL      PLACE ADDR OF PUTLINE PARM LIST IN REG 1
         XC    PUTLECB(C4),PUTLECB ZERO OUT ECB FOR PUTLINE
         PUTLINE PARM=PUTLPB,OUTPUT=((4),TERM,SINGLE,INFOR),ENTRY=(15),*
               MF=(E,(1))     PUT OUT LINE OF TEXT
         LTR   R15,R15        TEST RETURN CODE FROM PUTLINE
         BCR   C8,R10         IF RC=0 RETURN TO CALLER
         B     RC#12EXT       ELSE TAKE ERROR EXIT
         SPACE 5
PUTMULT  EQU   *              DEFINE LABEL
         L    R15,MSGNXT      GET PTR TO 1ST OF 2NDARY MSG
         LA    R15,C12(R0,R15) PTR TO 2ND LEVEL MESSAGE
         L     R14,PTR2NDMS   PTR TO 2NDARY MSG FOR PARSE VALID EXIT
         ST    R15,C0(R14)    SAVE PTR TO 2NDARY MSG
         MVC   PUTLPB(C20),PUTLBLK MOVE INTO GETMAIN STORAGE
         LR    R4,R1          PLACE ADDR OF MESSAGE IN REG 3
         SH    R4,SIXTEEN     GET ADDR OF MSG HEADER FIELD
         L     R15,ENTRPUTL   PLACE ENTRY POINT OF PUTLINE IN REG 15
         LA    R1,PUTLPL      PLACE ADDR OF PUTLINE PARM LIST IN REG 1
         XC    PUTLECB(C4),PUTLECB ZERO OUT ECB FOR PUTLINE
         PUTLINE PARM=PUTLPB,OUTPUT=((4),TERM,MULTLVL,INFOR),ENTRY=(15)*
               ,MF=(E,(1))    PUT OUT LINE(S) OF TEXT
         LTR   R15,R15        TEST RETURN CODE FROM PUTLINE
         BCR   C8,R10         BRANCH IF ZERO
         B     RC#12EXT       ELSE GO TAKE ERROR EXIT
         EJECT
SETUPDSN MVC   WORK+C2(C9),DATASET MOVE IN 'DATA SET' STRING
         LA    R5,WORK+C11    MOVE-TO ADDRESS
         LA    R1,DSNAME      MOVE-FROM ADDRESS
         LH    R14,DSLNGTH    MOVE-LENGTH
         EX    R14,MOVE       MOVE DSNAME
         LA    R14,C9(R0,R14) GET TOTAL LENGTH OF STRING
         STH   R14,WORK       SAVE STRING LENGTH AT BEGINNING
         BR    R10            RETURN
         SPACE 5
* DATASET ALLOCATION ERROR DIAGNOSIS
DSERR    ST    R10,DSERRSAV   SAVE RETURN ADDRESS
DERET    CH    R15,H4         WAS RETURN CODE = 4
         BE    DCMDERR        BRANCH IF YES
         CH    R15,H8         WAS RETURN CODE = 8
         BE    DARC08         BRANCH IF YES
         CH    R15,H12        WAS RETURN CODE = 12
         BE    DARC12         BRANCH IF YES
         CH    R15,H16        WAS RETURN CODE = 16
         BE    EMSG08         BRANCH IF YES
         B     EMSG11         BRANCH TO GENERAL ERROR
*
DARC08   CLC   DA18CTRC(C2),XH004 WAS RETURN CODE = 4
         BE    EMSG10         BRANCH IF YES
         CLC   DA18CTRC(C2),XH020 WAS RETURN CODE = 20
         BE    EMSG15         BRANCH IF YES
         CLC   DA18CTRC(C2),XH024 WAS RETURN CODE = 24
         BE    EMSG15         BEANCH IF YES
         CLC   DA18CTRC(C2),XH028 WAS RETURN CODE = 28
         BE    EMSG13         BRANCH IF YES
         TM    FLAG2,OLDALC   WAS AN OLD DATA SET BEING ALLOCATED
         BO    RC08OLD        BRANCH IF YES
         CLC   DA18CTRC(C2),XH008 WAS RETURN CODE = 8
         BE    EMSG14         BRANCH IF YES
         CLC   DA18CTRC(C2),XH016 WAS RETURN CODE = 16
         BE    EMSG14         BRANCH IF YES
         B     EMSG15         BRANCH TO GENERAL ERROR ROUTINE
RC08OLD  CLC   DA18CTRC(C2),XH008 WAS RETURN CODE = 8
         BE    EMSG01         BRANCH IF YES
         CLC   DA18CTRC(C2),XH012 WAS RETURN CODE = 12
         BE    EMSG01         BRANCH IF YES
         CLC   DA18CTRC(C2),XH016 WAS RETURN CODE = 16
         BE    EMSG01         BRANCH IF YES
         B     EMSG15         BRANCH TO GENERAL ERROR ROUTINE
*
DARC12   CLC   DA18DARC(C2),XH004 WAS RETURN CODE = 4
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH008 WAS RETURN CODE = 8
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH104 WAS RETURN CODE = 104
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH108 WAS RETURN CODE = 108
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH10C WAS RETURN CODE = 10"
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH208 WAS RETURN CODE = 208
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH268 WAS RETURN CODE = 268
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH304 WAS RETURN CODE = 304
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH308 WAS RETURN CODE = 308
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH30C WAS RETURN CODE = 30C
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH310 WAS RETURN CODE = 310
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH314 WAS RETURN CODE = 314
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH318 WAS RETURN CODE = 318
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH31C WAS RETURN CODE = 31C
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH320 WAS RETURN CODE = 320
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH324 WAS RETURN CODE = 324
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH328 WAS RETURN CODE = 328
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH338 WAS RETURN CODE = 338
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH33C WAS RETURN CODE = 33C
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH340 WAS RETURN CODE = 340
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH344 WAS RETURN CODE = 344
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH350 WAS RETURN CODE = 350
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH358 WAS RETURN CODE = 358
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH40C WAS RETURN CODE = 40C
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH408 WAS RETURN CODE = 408
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH414 WAS RETURN CODE = 414
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH410 WAS RETURN CODE = 410
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH418 WAS RETURN CODE = 418
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH420 WAS RETURN CODE = 420
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH424 WAS RETURN CODE = 424
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH504 WAS RETURN CODE = 504
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH6708 WAS RETURN CODE = 6708
         BE    EMSG11         BRANCH IF YES
         CLC   DA18DARC(C2),XH210 WAS RETURN CODE = 210
         BE    EMSG12         BRANCH IF YES
         CLC   DA18DARC(C2),XH21C WAS RETURN CODE = 21C
         BE    EMSG16         BRANCH IF YES
         CLC   DA18DARC(C2),XH214 WAS RETURN CODE = 214
         BE    EMSG17         BRANCH IF YES
         CLC   DA18DARC(C2),XH218 WAS RETURN CODE = 218
         BE    EMSG10         BRANCH IF YES
         CLC   DA18DARC(C2),XH330 WAS RETURN CODE = 330
         BE    NOTPDS         BRANCH IF YES
         CLC   DA18DARC(C2),XH334 WAS RETURN CODE = 334
         BE    EMSG07         BRANCH IF YES
         CLC   DA18DARC(C2),XH404 WAS RETURN CODE = 404
         BE    EMSG18         BRANCH IF YES
         CLC   DA18DARC(C2),XH4714 WAS RETURN CODE = 4714
         BE    EMSG19         BRANCH IF YES
         LH    R10,DA18DARC   DAIR RETURN CODE
         SRA   R10,C8         CLEAR ONE BYTE
         SLA   R10,C8         RETURN TO NORMAL
         STH   R10,TEMP       STORE IN TEMPORARY
         CLC   TEMP(C2),XH4700 WAS RETURN CODE 47XX
         BE    EMSG20         BRANCH IF YES
         B     EMSG11         BRANCH TO GENERAL ERROR
         EJECT
* DATASET ALLOCATION ERRORS -- ACTION ROUTINES
DSERR01  L     R10,DSERRSAV   RESTORE RETURN ADDRESS
         BR    R10            RETURN
EMSG01   LA    R15,MSG011     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R1,MSGTEXT     PTR TO 'DS NOT IN CTLG' MSG
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     DSERR01        GO RETURN FROM ERROR ROUTINE
EMSG07   CLC   C2(C8,R1),DATASET IS 'DATA SET' PREFIXED
         BNE   EMSG071        BRANCH IF NO
         LH    R15,C0(R1)     GET DSNAME LENGTH
         SH    R15,NINE       SUBRACT LENGTH OF DSNAME CONSTANT
         STH   R15,WORK       SAVE IN WORK AREA
         BCTR  R15,R0         GET MOVE LENGTH
         LA    R1,C11(R0,R1)  MOVE FROM ADREESS
         LA    R5,WORK+C2     MOVE-TO ADDRESS
         EX    R15,MOVE       MOVE DSNAME
         LA    R1,WORK        PTR TO MOVED DSNAME
EMSG071  LA    R15,MSG071     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT MESSAGE
         B     DSERR01        GO RETURN FROM ERROR ROUTINE
EMSG08   LA    R15,MSG081     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG08S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LECEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE LEVEL MESSAGE
         B     RC#12EXT       GO GIVE RETURN CODE OF 12
EMSG10   LA    R15,MSG101     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG10S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     STORE IN 1ST LEVEL MESSAGE
         LA    R1,MSGTEXT     PTR TO MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE LEVEL MESSAGE
         B     DSERR01        GO RETURN FROM ERROR ROUTINE
EMSG11   LA    R15,MSG111     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LH    R5,MSGLTH      LEVGTH OF 1ST LEVEL MESSAGE
         LA    R5,MSGLTH(R5)  POINT PAST 1ST LEVEL MESSAGE
         LA    R5,C3(R0,R5)   NEED WORD ALIGNMENT
         SRA   R5,C2          SHIFT OFF NON WORD ALIGNMENT
         SLA   R5,C2          RETURN TO NORMAL
         ST    R5,MSGNXT      SAVE PTR IN 1ST LEVEL MESSAGE
         LA    R1,MSG11S      MOVE-FROM ADDRESS
         LA    R15,MSG11SL+C8+C7 GET MOVE LENGTH
         EX    R15,MOVE       MOVE SECONDARY MESSAGE
         LA    R15,C12(R0,R5) PTR TO MSG BEGIN
         ST    R15,C8(R0,R5)  SAVE IN MSG POINTER AREA
         UNPK  MSG11SL+C8+C8(C5,R5),DA18DARC(C3) UNPACK DAIR RET CODE
         TR    MSG11SL+C8+C8(C4,R5),TRTBL-CC0 TRANS TO HEX
         LA    R1,MSGTEXT     POINTER TO MEDSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE LEVEL MESSAGE
         B     RC#12EXT       GIVE RETURN CODE OF 12
EMSG12   LA    R15,MSG121     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG12S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN 1ST MESSAGE
         LA    R1,MSGTEXT     PTR TO PRIMARY MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE LEVEL MESSAGE
         B     DSERR01        GO RETURN FROM ERROR ROUTINE
EMSG13   LA    R15,MSG111     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG13S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RETURN CODE OF 12
EMSG14   LA    R15,MSG141     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG14S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     DSERR01        GIVE RETURN CODE OF 12
EMSG15   LA    R15,MSG111     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LH    R5,MSGLTH      MESSAGE LENGTH
         LA    R5,MSGLTH(R5)  POINT PAST 1ST PART OF MESSAGE
         LA    R5,C3(R0,R5)   NEED WORD ALIGNMENT
         SRA   R5,C2          SHIFT OFF NON WORD ALIGNMENT
         SLA   R5,C2          RETURN TO NORMAL
         ST    R5,MSGNXT      SAVE PTR IN 1ST LEVEL MSG
         LA    R1,MSG15S      MOVE-FROM ADDRESS
         LA    R15,MSG15SL+C8+C7 GET MOVE LENGTH
         EX    R15,MOVE       MOVE SECONDARY MESSAGE
         LA    R15,C12(R0,R5) PTR TO MSG BEGIN
         ST    R15,C8(R0,R5)  SAVE IN MSG POINTER AREA
         UNPK  MSG15SL+C8+C8(C5,R5),DA18CTRC(C3) UNPK CATALOG RET CODE
         TR    MSG15SL+C8+C8(C4,R5),TRTBL-CC0 TRANS TO HEX
         LA    R1,MSGTEXT     POINTER TO MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RC=12 EXIT
EMSG16   LA    R15,MSG161     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG16S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RETURN CODE OF 12
EMSG17   LA    R15,MSG161     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG17S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RETURN CODE OF 12
EMSG18   LA    R15,MSG181     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R1,MSGTEXT     POINTER TO MESSAGE
         BAL   R10,PUTLIFCE   GO PUT OUT SINGLE LINE
         B     DSERR01        GO RETURN TO CALLER
EMSG19   LA    R15,MSG191     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LA    R15,MSG19S     PTR TO SECONDARY MESSAGE
         ST    R15,MSGNXT     SAVE IN PRIMARY MESSAGE
         LA    R1,MSGTEXT     PTR TO 1ST LEVEL MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RETURN CODE OF 12
EMSG20   LA    R15,MSG111     PTR TO 1ST PART OF MESSAGE
         BAL   R10,BLDMSG     GO BUILD MESSAGE
         LH    R5,MSGLTH      MESSAGE LENGTH
         LA    R5,MSGLTH(R5)  POINT PAST 1ST PART OF MESSAGE
         LA    R5,C3(R0,R5)   NEED WORD ALIGNMENT
         SRA   R5,C2          SHIFT OFF NON WORD ALIGNMENT
         SLA   R5,C2          RETURN TO NORMAL
         ST    R5,MSGNXT      SAVE PTR IN 1ST LEVEL MSG
         LA    R1,MSG20S      MOVE-FROM ADDRESS
         LA    R15,MSG20SL+C8+C7 GET MOVE LENGTH
         EX    R15,MOVE       MOVE SECONDARY MESSAGE
         LA    R15,C12(R0,R5) PTR TO MSG BEGIN
         ST    R15,C8(R0,R5)  SAVE IN MSG POINTER AREA
         UNPK  MSG20SL+C8+C8(C5,R5),DA18DARC(C3) UNPK DADSM RET CODE
         TR    MSG20SL+C8+C8(C4,R5),TRTBL-CC0 TRANS TO HEX
         LA    R1,MSGTEXT     POINTER TO MESSAGE
         BAL   R10,PUTMULT    GO PUT OUT MULTIPLE MESSAGE
         B     RC#12EXT       GIVE RC=12 EXIT
         SPACE 5
BLDMSG   LR    R7,R1          SAVE PTR TO DSNAME
         LA    R5,MSGTEXT     MOVE-TO ADDRESS
         LA    R1,C2(R0,R15)  PTR TO 1ST PART OF MESSAGE
         LH    R14,C0(R15)    1ST PART MOVE LENGTH
         EX    R14,MOVE       MOVE 1ST PART OF MESSAGE
         LA    R5,C0(R14,R5)  NEW MOVE-TO ADDRESS
         LA    R1,C2(R0,R7)   DSNAME MOVE-FROM ADDRESS
         LH    R14,C0(R7)     DSNAME MOVE LENGTH
         EX    R14,MOVE       MOVE DSNAME
         LA    R5,C0(R14,R5)  NEW MOVE-TO ADDRESS
         LH    R1,C0(R15)     LENGTH OF 1ST PART
         LA    R1,C2(R1,R15)  POINT PAST 1ST PART
         LH    R14,C0(R1)     LENGTH OF 2ND PART
         LA    R1,C2(R0,R1)   PTR TO 2ND PART
         EX    R14,MOVE       MOVE 2ND PART
         LA    R15,MSGTEXT    BEGINNING OF MESSAGE
         LA    R5,C4(R5,R14)  LENGTH OF WHOLE MESSAGE
         SR    R5,R15         LENGTH OF 1ST PART AND DSNAME
         STH   R5,MSGLTH      SAVE IN MESSAGE LENGTH
         XC    MSGOFF(C2),MSGOFF ZERO MESSAGE OFF-SET
         BR    R10            RETURN
         EJECT
* MISCELLANEOUS CONTROL INFORMATION
PUTLBLK  PUTLINE MF=L         GENERATE PUTLINE PARAMETER BLOCK
ADDRPCL  DC    A(PARSEPCL)    ADDRESS OF PARSE PARAMETER LIST
FF000000 DC    X'FF000000'    MASK
#MAIN    DC    X'00'          CONTROL BYTE FOR FREEMAIN
         DC    AL3(MAIN)      LENGTH OF ENTIRE STORAGE AREA
#MAIN1   DC    X'00'          CONTROL BYTE FOR FREEMAIN
         DC    AL3(MAIN1)     LENGTH OF PROMPTER DSECT STORAGE AREA
#MAIN2   DC    X'00'          CONTROL BYTE FOR FREEMAIN
         DC    AL3(MAIN2)     LENGTH OF FIRST PART OF DSECT STORAGE ARE
         EJECT
* CONSTANTS
THREE    DC    H'3'           HALF WORD THREE
FOUR     DC    H'4'           HALF WORD FOUR
NINE     DC    H'9'           HALF WORD NINE
TWELVE   DC    H'12'          HALF WORD TWELVE
SIXTEEN  DC    H'16'          HALF WORD SIXTEEN
TWENTY   DC    H'20'          HALF WORD TWENTY
H4       DC    H'4'           HEX 4
H8       DC    H'8'           HEX 8
H12      DC    H'12'          HALF WORD 12
H16      DC    H'16'          HALF WORD 16
XH004    DC    XL2'004'       HEX CONSTANT
XH020    DC    XL2'020'       HEX CONSTANT
XH024    DC    XL2'024'       HEX CONSTANT
XH028    DC    XL2'028'       HEX CONSTANT
XH008    DC    XL2'008'       HEX CONSTANT
XH016    DC    XL2'016'       HEX CONSTANT
XH012    DC    XL2'012'       HEX CONSTANT
XH104    DC    XL2'104'       HEX CONSTANT
XH108    DC    XL2'108'       HEX CONSTANT
XH10C    DC    XL2'10C'       HEX CONSTANT
XH208    DC    XL2'208'       HEX CONSTANT
XH268    DC    XL2'268'       HEX CONSTANT
XH304    DC    XL2'304'       HEX CONSTANT
XH308    DC    XL2'308'       HEX CONSTANT
XH30C    DC    XL2'30C'       HEX CONSTANT
XH310    DC    XL2'310'       HEX CONSTANT
XH314    DC    XL2'314'       HEX CONSTANT
XH318    DC    XL2'318'       HEX CONSTANT
XH31C    DC    XL2'31C'       HEX CONSTANT
XH320    DC    XL2'320'       HEX CONSTANT
XH324    DC    XL2'324'       HEX CONSTANT
XH328    DC    XL2'328'       HEX CONSTANT
XH338    DC    XL2'338'       HEX CONSTANT
XH33C    DC    XL2'33C'       HEX CONSTANT
XH340    DC    XL2'340'       HEX CONSTANT
XH344    DC    XL2'344'       HEX CONSTANT
XH350    DC    XL2'350'       HEX CONSTANT
XH358    DC    XL2'358'       HEX CONSTANT
XH40C    DC    XL2'40C'       HEX CONSTANT
XH408    DC    XL2'408'       HEX CONSTANT
XH414    DC    XL2'414'       HEX CONSTANT
XH410    DC    XL2'410'       HEX CONSTANT
XH418    DC    XL2'418'       HEX CONSTANT
XH420    DC    XL2'420'       HEX CONSTANT
XH424    DC    XL2'424'       HEX CONSTANT
XH504    DC    XL2'504'       HEX CONSTANT
XH6708   DC    XL2'6708'      HEX CONSTANT
XH210    DC    XL2'210'       HEX CONSTANT
XH21C    DC    XL2'21C'       HEX CONSTANT
XH214    DC    XL2'214'       HEX CONSTANT
XH218    DC    XL2'218'       HEX CONSTANT
XH330    DC    XL2'330'       HEX CONSTANT
XH334    DC    XL2'334'       HEX CONSTANT
XH404    DC    XL2'404'       HEX CONSTANT
XH4714   DC    XL2'4714'      HEX CONSTANT
XH4700   DC    XL2'4700'      HEX CONSTANT
         EJECT
* DATASET NAMES AND MISCELLANEOUS
ASYSUT3  DC    A(UT3CON)      POINTER TO SYSUT3 DSNAME
ASYSUT2  DC    A(UT2CON)      POINTER TO SYSUT2 DSNAME
ASYSUT1  DC    A(UT1CON)      POINTER TO SYSUT1 DSNAME
UT1CON   DC    H'7'           LENGTH OF SYSUT1 DSNAME
         DC    C'&&SYSUT1'    SYSUT1 DSNAME
UT2CON   DC    H'7'           LENGTH OF SYSUT2 DSNAME
         DC    C'&&SYSUT2'    SYSUT2 DSNAME
UT3CON   DC    H'7'           LENGTH OF SYSUT3 DSNAME
         DC    C'&&SYSUT3'    SYSUT3 DSNAME
ASYSMC   DC    A(MACDSN)      POINTER TO SYS1.MACLIB DSNAME
MACDSN   DC    H'11'          LENGTH OF SYS1.MACLIB DSNAME
         DC    C'SYS1.MACLIB' SYS1.MACLIB DSNAME
TRTBL    DC    C'0123456789ABCDEF' TABLE TO TRANS TO HEX
BLANKS   DC    CL8' '
SRCM     DC    C'SOURCE '
DEBUG    DC    C'ASM PROMPTER WORK AREA'
FFLL     DS    0H             FFLL INFORMATION FOR BLDL LIST
         DC    H'1'           FF INFORMATION
         DC    H'14'          LL INFORMATION
         EJECT
* ERROR MESSAGES
LBADTIME EQU   25             MESSAGE LENGTH
BDETMSG  DC    C'NIHASM02I INVALID EXTIME ' MSG TEXT
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(NOSLEN)      POINTER TO MESSAGE
NOSLEN   DC    H'56'          MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
NOSTOR   DC    C'IKJ74012I NOT ENOUGH MAIN STORAGE TO EXECUTE COMMAND'
BDCATNXT DS    F              PTR TO SECOND LEVEL MESSAGE
LBADCAT  EQU   59             MESSAGE LENGTH
         DC    Y(LBADCAT+C4)  MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
BADCAT   DC    C'IKJ74036I LIBRARY DATA SETS NOT CONCATENATED, SYSTEM E*
               RROR+'         MESSAGE TEXT
         DC    F'1'           NUM MSG SEGMENTS
         DC    A(EXLIBLEN)    PTR TO MESSAGE
EXLIBLEN DC    H'56'          MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
EXLIB    DC    C'IKJ74040I A MAXIMUM OF 20 LIB DATA SETS WILL BE USED'
BADLIB1L EQU   23             1ST PART MESSAGE LENGTH
BADLIB1  DC    C'IKJ74044I LIB DATA SET ' 1ST PART OF MESSAGE
BADLIB2L EQU   30             2ND PART MESSAGE TEXT
BADLIB2  DC    C' IS NOT A PARTITIONED DATA SET'
NOMEM1L  EQU   17             1ST PART MESSAGE LENGTH
NOMEM2L  EQU   42             ENTIRE MESSAGE LENGTH
NOMEM    DC    C'IKJ74008I MEMBER          NOT IN DATA SET '
PDS1L    EQU   10             1ST PART MESSAGE LENGTH
PDS1     DC    C'IKJ74048I '  1ST PART MESSAGE TEXT
PDS2L    EQU   26             2ND PART MESSAGE LENGTH
PDS2     DC    C' IS A PARTITIONED DATA SET'
         SPACE
         DC    F'1'           NUM MSG SEGMENTS
         DC    A(EXSRCLEN)    PTR TO MESSAGE
EXSRCLEN DC    H'59'          MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
EXSRC    DC    C'IKJ74040I A MAXIMUM OF 20 SOURCE DATA SETS WILL BE USE*
               D'             MESSAGE TEXT
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(TMPNMLEN)    POINTER TO SEGMENT
TMPNMLEN DC    H'45'          MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
TEMPNMSG DC    C'IKJ74048I TEMPNAME ASSUMED AS MEMBER NAME'
LCMDERR  EQU   31             LENGTH OF MESSAGE
CMDERR   DC    Y(LCMDERR+C4)  LENGTH OF MESSAGE
         DC    H'0'           MESSAGE OFF-SET
CMDERRMS DC    C'IKJ74013I COMMAND SYSTEM ERROR+'
LSTKMSG  EQU   27             LENGTH OF MESSAGE
STKMSGLN DC    Y(LSTKMSG+C4+C4) MESSAGE LENGTH
         DC    H'0'           MESSAGE OFFSET
STKMSG   DC    C'IKJ74013I PARSE ERROR CODE '
DATASET  DC    C'DATA SET '   'DATA SET' CHARACTER STRING
DSSYS1   DC    H'11'          STRING LENGTH
         DC    C'SYS1.MACLIB' CHARACTER STRING FOR ERROR MESSAGE
DSUTIL   DC    H'16'          STRING LENGTH
         DC    C'UTILITY DATA SET'
TERMDS   DC    H'17'          CHAR STRING LENGTH
         DC    C'TERMINAL DATA SET' CHAR STRING
         SPACE
NOTPDS1L EQU   40             CHAR STRING LENGTH
NOTPDS1  DC    C'IKJ74011I MEMBER          SPECIFIED BUT '
NOTPDS2L EQU   27             CHAR STRING LENGTH
NOTPDS2  DC    C' NOT A PARTITIONED DATA SET'
LDNXTMSG EQU   40             LENGTH OF MESSAGE
DERMSG   DC    Y(LDNXTMSG+C4+C4) LENGTH OF MESSAGE
         DC    H'0'           MESSAGE OFFSET
DNXTMSG  DC    C'IKJ74013I DYNAMIC ALLOCATION ERROR CODE ' MSG TEXT
         SPACE
MSG011L  EQU   10             LENGTH OF MESSAGE
MSG011   DC    Y(MSG011L)     MESSAGE LENGTH
         DC    C'IKJ74007I '  1ST PART OF MESSAGE
MSG012L  EQU   15             LENGTH OF MESSAGE
MSG012   DC    Y(MSG012L)     MESSAGE LENGTH
         DC    C' NOT IN CATALOG' 2ND PART OF MESSAGE
         SPACE
MSG071L  EQU   34             LENGTH OF MESSAGE
MSG071   DC    Y(MSG071L)     MESSAGE LENGTH
         DC    C'IKJ74010I INVALID DATA SET NAME, '''
MSG072L  EQU   22             MESSAGE LENGTH
MSG072   DC    Y(MSG072L)     MESSAGE LENGTH
         DC    C''' EXCEEDS 44 CHARACTERS' MESSAGE TEXT
         SPACE
MSG081L  EQU   10             MESSAGE LENGTH
MSG081   DC    Y(MSG081L)     MESSAGE LENGTH
         DC    C'IKJ74021I '  1ST PART OF MESSAGE
MSG082L  EQU   35             LENGTH OF MESSAGE
MSG082   DC    Y(MSG082L)     MESSAGE LENGTH
         DC    C' NOT ALLOCATED, TOO MANY DATA SETS+'
         SPACE
MSG101L  EQU   10             MESSAGE LENGTH
MSG101   DC    Y(MSG101L)     MESSAGE LENGTH
         DC    C'IKJ74023I '  1ST PART OF MESSAGE
MSG102L  EQU   44             MESSAGE LENTTH
MSG102   DC    Y(MSG102L)     MESSAGE LENGTH
         DC    C' NOT ALLOCATED, REQUIRED VOLUME NOT MOUNTED+' MSG TEXT
         SPACE
MSG111L  EQU   10             MESSAGE LENGTH
MSG111   DC    Y(MSG111L)     MESSAGE LENGTH
         DC    C'IKJ74033I ' 1ST PART OF MESSAGE
MSG112L  EQU   45             MESSAGE LENGTH
MSG112   DC    Y(MSG112L)     MESSAGE LENGTH
         DC    C' NOT ALLOCATED, SYSTEM OR INSTALLATION ERROR+' MSG TXT
         SPACE
MSG121L  EQU   10             MESSAGE LENGTH
MSG121   DC    Y(MSG121L)     MESSAGE LENGTH
         DC    C'IKJ74026I '  1ST PART OF MESSAGE
MSG122L  EQU   27             MESSAGE LENGTH
MSG122   DC    Y(MSG122L)     MESSAGE LENGTH
         DC    C' ALREADY IN USE, TRY LATER+' MSG TEXT
         SPACE
MSG141L  EQU   10             MESSAGE LENGTH
MSG141   DC    Y(MSG141L)     MESSAGE LENGTH
         DC    C'IKJ74016I '  1ST PART OF MESSAGE
MSG142L  EQU   39             MESSAGE LENGTH
MSG142   DC    Y(MSG142L)     MESSAGE LENGTH
         DC    C' WILL CREATE INVALID CATALOG STRUCTURE+' 2ND PART
         SPACE
MSG161L  EQU   10             LENGTH OF 1ST PART OF MESSAGE
MSG161   DC    Y(MSG161L)     LENGTH OF 1ST PART OF MESSAGE
         DC    C'IKJ74054I '  1ST PART OF MESSAGE
MSG162L  EQU   15             LENGTH OF 2ND PART OF MESSAGE
MSG162   DC    Y(MSG162L)     LENGTH OF 2ND PART OF MESSAGE
         DC    C' NOT ALLOCATED+' 2ND PART OF MESSAGE
         SPACE
MSG181L  EQU   10             MESSAGE LENGTH
MSG181   DC    Y(MSG181L)     MESSAGE LENGTH
         DC    C'IKJ74056I '  1ST PART OF MESSAGE
MSG182L  EQU   45             MESSAGE LENGTH
MSG182   DC    Y(MSG182L)     MESSAGE LENGTH
         DC    C' NOT ON A DIRECT ACCESS DEVICE, NOT SUPPORTED' MSG
         SPACE
MSG191L  EQU   10             LENGTH OF MESSAGE
MSG191   DC    Y(MSG191L)     LENGTH OF MESSAGE
         DC    C'25474058I '  1ST PART OF MESSAGE
MSG192L  EQU   44             LENGTH OF MESSAGE
MSG192   DC    Y(MSG192L)     LENGTH OF MESSAGE
         DC    C' NOT ALLOCATED, NOT ENOUGH SPACE ON VOLUMES+' MESSAGE
         SPACE
MSG08S   DC    A(0)           NO NEXT LEVEL
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG08SM)     POINTER TO MESSAGE
MSG08SL  EQU   51             MESSAGE LENGTH
MSG08SM  DC    Y(MSG08SL+C4)  MESSAGE LENGTH
         DC    Y(0)           ZERO OFFSET
         DC    C'IKJ74021I USE FREE COMMAND TO FREE UNUSED DATA SETS'
         SPACE
MSG10S   DC    A(0)           NO NEXT LEVEL POINTER
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG10SM)     POINTER TO MESSAGE
MSG10SL  EQU   61            MESSAGE LENGTH
MSG10SM  DC    Y(MSG10SL+C4)  MESSAGE LENGTH
         DC    Y(0)           ZERO OFFSET
         DC    C'IKJ74023I VOLUME OR CVOL NOT ON SYSTEM AND CANNOT BE A*
               CCESSED'
         SPACE
MSG11S   DC    A(0)           NO NEXT LEVEL MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG11SM)     POINTER TO MESSAGE
MSG11SL  EQU   40             MESSAGE LENGTH
MSG11SM  DC    Y(MSG11SL+C4+C4) MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74033I DYNAMIC ALLOCATION ERROR CODE '
         SPACE
MSG12S   DC    A(0)           NO NEXT LEVEL MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG12SM)     POINTER TO MESSAGE
MSG12SL  EQU   54             MESSAGE LENGTH
MSG12SM  DC    Y(MSG12SL+C4)  MESSAGE LENGTH
         DC    Y(0)           ZERO OFFSET
         DC    C'IKJ74026I DATA SET IS ALLOCATED TO ANOTHER USER OR JOB*
               '              MESSAGE TEXT
         SPACE
MSG13S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER SEGMENTS
         DC    A(MSG13SM)     POINTER TO MESSAGE
MSG13SL  EQU   27             MESSAGE LENGTH
MSG13SM  DC    Y(MSG13SL+C4)  MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74033I CATALOG I/O ERROR' MESSAGE
         SPACE
MSG14S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG14SM)     POINTER TO MESSAGE
MSG14SL  EQU   87             MESSAGE LENGTH
MSG14SM  DC    Y(MSG14SL+C4)  MESSAGE LENGTH
         DC    Y(0)           OFFSET
         DC    C'IKJ74016I A QUALIFIER CANNOT BE BOTH AN INDEX AND THE *
               LAST QUALIFIER OF A DATA SET NAME'
         SPACE
MSG15S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG15SM)     POINTER TO MESSAGE
MSG15SL  EQU   29             MESSAGE LENGTH
MSG15SM  DC    Y(MSG15SL+C4+C4) MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74033I CATALOG ERROR CODE ' MESSAGE
         SPACE
MSG16S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG16SM)     POINTER TO MESSAGE
MSG16SL  EQU   50             LENGTH OF MESSAGE
MSG16SM  DC    Y(MSG16SL+C4)  MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFF SET
         DC    C'IKJ74054I INVALID INPUT IN USER ATTRIBUTE DATA SET'
         SPACE
MSG17S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG17SM)     POINTER TO MESSAGE
MSG17SL  EQU   27             MESSAGE LENGTH
MSG17SM  DC    Y(MSG17SL+C4)  MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74054I NO UNIT AVAILABLE' MESSAGE
         SPACE
MSG19S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG19SM)     POINTER TO MESSAGE
MSG19SL  EQU   55             LENGTH OF MESSAGE
MSG19SM  DC    Y(MSG19SL+C4)  MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74058I USE DELETE COMMAND TO DELETE UNUSED DATA SET*
               S'             MESSAGE
         SPACE
MSG20S   DC    A(0)           NO NEXT MESSAGE
         DC    F'1'           NUMBER OF SEGMENTS
         DC    A(MSG20SM)     POINTER TO MESSAGE
MSG20SL  EQU   27             MESSAGE LENGTH
MSG20SM  DC    Y(MSG20SL+C4+C4) MESSAGE LENGTH
         DC    Y(0)           MESSAGE OFFSET
         DC    C'IKJ74033I DADSM ERROR CODE ' MESSAGE
         EJECT
*               PARSE PARAMETER CONTROL LIST                          *
         PRINT NOGEN
PARSEPCL IKJPARM DSECT=IKJPARMD INITIATE PARSE PARAMETER LIST
         SPACE
INPUTDSN IKJPOSIT DSTHING,LIST,PROMPT='INPUT DATA SET NAME',HELP=('NAME*
                OF THE SOURCE DATASET(S) TO ASSEMBLE'),VALIDCK=DSNCHECK
         SPACE
LOADX    IKJKEYWD DEFAULT='LOAD' DEFINE LOAD/NOLOAD DEFAULT
         IKJNAME 'NOLOAD'     DEFINE NOLOAD OPTION
         IKJNAME 'LOAD',SUBFLD=LOADNAME DEFINE LOAD OPTION
         IKJNAME 'NLD'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'LD'
         SPACE
LREFX    IKJKEYWD DEFAULT='LREF' DEFINE LITERAL CROSS-REFERENCE DEFAULT
         IKJNAME 'NOLREF'     DEFINE NOLREF OPTION
         IKJNAME 'LREF'       DEFINE LREF OPTION
         IKJNAME 'NLR'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'LR'
         SPACE
PRINTX   IKJKEYWD DEFAULT='PRINT' DEFINE PRINT/NOPRINT DEFAULT
         IKJNAME 'NOPRINT'    DEFINE NOPRINT OPTION
         IKJNAME 'PRINT',SUBFLD=PRINTNME DEFINE PRINT OPTION
         SPACE
TERMX    IKJKEYWD DEFAULT='TERM' DEFINE TERM/NOTERM DEFAULT
         IKJNAME 'NOTERM'     DEFINE NOTERM OPTION
         IKJNAME 'TERM'       DEFINE TERM OPTION
         SPACE
MACLIBOP IKJKEYWD DEFAULT='MACLIB' DEFINE MACLIB/NOMACLIB DEFAULT
         IKJNAME 'NOMACLIB'   DEFINE NOMACLIB OPTION
         IKJNAME 'MACLIB'     DEFINE MACLIB OPTION
         SPACE
TESTX    IKJKEYWD DEFAULT='NOTEST' DEFINE TEST/NOTEST DEFAULT
         IKJNAME 'NOTEST'     DEFINE NOTEST OPTION
         IKJNAME 'TEST'       DEFINE TEST OPTION
         IKJNAME 'NT'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'T'
         SPACE
RENTX    IKJKEYWD DEFAULT='NORENT' DEFINE RENT/NORENT DEFAULT
         IKJNAME 'NORENT'     DEFINE NORENT OPTION
         IKJNAME 'RENT'       DEFINE RENT OPTION
         IKJNAME 'NR'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'R'
         SPACE
ALGNX    IKJKEYWD DEFAULT='ALGN' DEFINE ALGN/NOALGN DEFAULT
         IKJNAME 'NOALGN'     DEFINE NOALGN OPTION
         IKJNAME 'ALGN'       DEFINE ALGN OPTION
         EJECT
LISTX    IKJKEYWD DEFAULT='NOLIST' DEFINE LIST/NOLIST DEFAULT
         IKJNAME 'NOLIST'     DEFINE NOLIST OPTION
         IKJNAME 'LIST'       DEFINE LIST OPTION
         IKJNAME 'NL'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'L'
         IKJNAME 'FULLIST'    DEFINE FULLIST OPTION
         IKJNAME 'FL'
         SPACE
XREFX    IKJKEYWD DEFAULT='XREF' DEFINE XREF/NOXREF DEFAULT
         IKJNAME 'NOXREF'     DEFINE NOXREF OPTION
         IKJNAME 'XREF'       DEFINE XREF OPTION
         IKJNAME 'NX'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'X'
         IKJNAME 'FULLXREF'   DEFINE FULLXREF OPTION
         IKJNAME 'FX'
         SPACE
NUMX     IKJKEYWD DEFAULT='NUM' DEFINE NUM/NONUM DEFAULT
         IKJNAME 'NONUM'      DEFINE NONUM OPTION
         IKJNAME 'NUM'        DEFINE NUM OPTION
         IKJNAME 'NN'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'N'
         SPACE
STMTX    IKJKEYWD DEFAULT='STMT' DEFINE STMT/NOSTMT DEFAULT
         IKJNAME 'NOSTMT'     DEFINE NOSTMT OPTION
         IKJNAME 'STMT'       DEFINE STMT OPTION
         IKJNAME 'NST'        DEFINE ABBREVIATED SYNOYMS
         IKJNAME 'ST'
         SPACE
LIBX     IKJKEYWD
         IKJNAME 'LIB',SUBFLD=LIBNAME ESTABLISH LIB SUBFIELD
         SPACE
LINECTOP IKJKEYWD
         IKJNAME 'LINECNT',SUBFLD=LINCT ESTABLISH LINECNT SUBFIELD
         SPACE
EXECTOP  IKJKEYWD
         IKJNAME 'EXTIME',SUBFLD=EXECTF
         SPACE
UTBUFOP  IKJKEYWD
         IKJNAME 'UTBUFF',SUBFLD=UTBF
         SPACE
INSTOP   IKJKEYWD
         IKJNAME 'INSTSET',SUBFLD=INSTF
         SPACE
LSETOP   IKJKEYWD
         IKJNAME 'LSETC',SUBFLD=LSETF
         SPACE
SYSPROP  IKJKEYWD
         IKJNAME 'SYSPARM',SUBFLD=SYSPF
         SPACE
COLOP    IKJKEYWD
         IKJNAME 'COL',SUBFLD=COLF
         EJECT
ESDX     IKJKEYWD DEFAULT='ESD' DEFINE EXTERNAL SYMBOL DICT. DEFAULT
         IKJNAME 'NOESD'      DEFINE NOESD OPTION
         IKJNAME 'ESD'        DEFINE ESD OPTION
         IKJNAME 'NED'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'ED'
         SPACE
RLDX     IKJKEYWD DEFAULT='NORLD' DEFINE RELOCATION DICT. DEFAULT
         IKJNAME 'NORLD'      DEFINE NORLD OPTION
         IKJNAME 'RLD'        DEFINE RLD OPTION
         IKJNAME 'NRD'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'RD'
         SPACE
EXECUTEX IKJKEYWD DEFAULT='NOEXEC' DEFINE EXECUTE DEFAULT
         IKJNAME 'NOEXEC'     DEFINE NOEXECECUTE OPTION
         IKJNAME 'EXEC'       DEFINE EXECUTE OPTION
         IKJNAME 'NE'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'E'
         SPACE
BATCHX   IKJKEYWD DEFAULT='BATCH' DEFINE BATCH DEFAULT
         IKJNAME 'NOBATCH'    DEFINE NOBATCH OPTION
         IKJNAME 'BATCH'      DEFINE BATCH OPTION
         IKJNAME 'NB'         DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'B'
         SPACE
EXTENX   IKJKEYWD DEFAULT='EXTEN' DEFINE EXTEND DEFAULT
         IKJNAME 'NOEXTEN'    DEFINE NOEXTEN OPTION
         IKJNAME 'EXTEN'      DEFINE EXTEN OPTION
         IKJNAME 'NEX'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'EX'
         SPACE
UPDATEX  IKJKEYWD DEFAULT='NOUPDATE' DEFINE UPDATE DEFAULT
         IKJNAME 'NOUPDATE'   DEFINE NO UPDATE OPTION
         IKJNAME 'UPDATE',SUBFLD=UPDNAME DEFINE UPDATE OPTION
         IKJNAME 'NUP'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'UP'
         SPACE
UPLISTX  IKJKEYWD DEFAULT='NOUPLIST' DEFINE UPLIST/NOUPLIST DEFAULT
         IKJNAME 'NOUPLIST'   DEFINE NOUPLIST OPTION
         IKJNAME 'UPLIST'     DEFINE UPLIST OPTION
         IKJNAME 'NUL'        DEFINE ABBREVIATED SYNONYMS
         IKJNAME 'UL'
         IKJNAME 'FULLUPLIST'
         IKJNAME 'FUL'
         EJECT
* SUBFIELDS FOR PREVIOUSLY-SPECIFIED KEYWORD PARAMETERS
         SPACE
LOADNAME IKJSUBF
LOADDSN  IKJPOSIT DSNAME,HELP=('OBJECT MODULE DATA SET NAME'),VALIDCK=L*
               OADVC
         SPACE
PRINTNME IKJSUBF
PRINTDSN IKJPOSIT DSTHING,HELP=('NAME OF THE DATA SET TO CONTAIN THE AS*
               SEMBLY LISTING'),VALIDCK=PRINTVC
         SPACE
LIBNAME  IKJSUBF
LIBDSN   IKJPOSIT DSNAME,LIST,PROMPT='LIBRARY DATA SET NAME',HELP=('NAM*
               E OF A DATA SET CONTAINING MACRO DEFINITIONS OR ''COPY '*
               ' CODE'),VALIDCK=LIBVC
         SPACE
UPDNAME  IKJSUBF
UPDSN    IKJPOSIT DSNAME,PROMPT='UPDATE DATA SET NAME',HELP=('NAME OF D*
               ATA SET CONTAINING UPDATES'),VALIDCK=UPDVC
         SPACE
LINCT    IKJSUBF
LINECNTT IKJIDENT 'INTEGER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,PROMP*
               T='LINE COUNT BETWEEN 0 AND 254',HELP=('NUMBER OF LINES *
               PER PAGE FOR THE ASSEMBLY LISTING')
         SPACE
EXECTF   IKJSUBF
EXECTV   IKJIDENT  'INTEGER',MAXLNTH=4,FIRST=NUMERIC,OTHER=NUMERIC,PROM*
               PT='EXECUTION TIME IN SECONDS (1-9999)',HELP=('AMOUNT OF*
                TIME ALLOWED TO EXECUTE ASSEMBLED PROGRAM'),VALIDCK=EXT*
               IMCHK
         SPACE
UTBF     IKJSUBF
UTBUFV   IKJIDENT 'INTEGER',MAXLNTH=1,FIRST=NUMERIC,PROMPT='NUMBER OF U*
               TILITIES TO BE BUFFERED IN CORE',HELP=('0=NONE,1=SYSUT1,*
               2=SYSUT1-2,3=SYSUT1-3')
         SPACE
COLF     IKJSUBF
COLV     IKJIDENT 'INTEGER',MAXLNTH=1,FIRST=NUMERIC,PROMPT='OPTION FOR *
               CONTROL OF XREF AND RLD FORMATS',HELP=('1=NO CHANGE,2=SQ*
               UISH XREF,3=SQUISH XREF AND RLD')
         SPACE
INSTF    IKJSUBF
INSTSETV IKJIDENT 'INTEGER',MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC,PROMP*
               T='INSTRUCTION SET TO BE USED',HELP=('0=ASM F COMPATIBLE*
               ,1=ASM F + EXTENDED BRANCH CODES,9=DOS COMPATIBLE, 20-44*
               -67 = INSTRUCTION SETS OF THOSE SYSTEMS')
         SPACE
LSETF    IKJSUBF
LSETCV   IKJIDENT 'INTEGER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,PROMP*
               T='LENGTH OF SETC SYMBOLS',HELP=('MAXIMUM SETC SYMBOL LE*
               NGTH IS 255, DEFAULT IS 8')
         SPACE
SYSPF    IKJSUBF
SYSPARMV IKJPOSIT QSTRING,PROMPT='SYSPARM STRING',HELP=('STRING TO BE P*
               ASSED AS &&SYSPARM IN MACROS')
         IKJENDP
         PRINT GEN
         EJECT
         IKJCPPL
         SPACE 4
         IKJPPL
         SPACE 4
         IKJDAPL
         EJECT
         IKJPTPL
         SPACE 4
         IKJSTPL
         EJECT
         IKJDAP08
         EJECT
***********************************************************************
* THIS OPERATION CODE CAUSES DDNAMES TO BE CONCATENATED               *
***********************************************************************
         IKJDAP0C
         SPACE 4
         IKJDAP10
         SPACE 4
         IKJDAP18
         SPACE 4
         IKJDAP1C
         EJECT
* WORKING AREAS
STORAGE  DSECT
AP1      DS    A              PROGRAM BASE 1
AP2      DS    A              PROGRAM BASE 2
STLEN    DS    F              LENGTH OF STORAGE
ABENDC   DS    F              ABEND CODE
DAPB0CS  DS    6H,21CL8       DAIR 0C ENTRY CODE BLOCK
LIBDSNA  DS    2H,21CL8       LIB DSN LIST-BUILD AREA
SRCDSNA  DS    2H,21CL8       SOURCE DSN LIST-BUILD AREA
ENTRDAIR DS    A              DAIR SERVICE ROUTINE ENTRY POINT
DAIRPL   DS    5F             DAIR PARAMETER LIST
DAIRECB  DS    F              ECB FOR DAIR
FLAG2    DS    X              SECOND FLAGS
LIBCAT   EQU   X'80'          LIB CONCATENATED
SRCCAT   EQU   X'20'          SOURCE CONCATENATED
OLDALC   EQU   X'40'          OLD DSN BEING ALLOCATED
STAEBLK  STAE  MF=L           LIST FORMAT OF STAE
NOSTST   DS    18F            PHONY SAVE AREA
STSA     DS    18F            STAE SAVE AREA
PARSEPL  DS    7F             PARSE PARAMETER LIST
* END OF PART PASSED ON TO IKJEUP01
         SPACE 2
SAVEAREA DS    18F            PROMPTER SAVE AREA
         SPACE 3
* ASSEMBLER PARAMETER LIST AREA
PARMLIST DS    0F             PARAMETER LIST TO ASSEMBLER
OPTNPTR  DS    F              POINTER TO OPTION LIST
DDNPTR   DS    F              PTR TO DDNAME LIST
OPTNLTH  DS    H              LENGTH OF OPTION LIST FOR ASSEMBLER
OPTNLIST DS    160C           OPTION LIST FOR ASSEMBLER
DDNLTH   DS    H              DDNAME LENGTH FIELD
DDNLIST  DS    0CL104         DDNAME LIST
SYSLIN   DS    CL8            SYSLIN DDNAME SLOT
SYSTERM  DS    CL8            SYSTERM DDNAME SLOT
SYSUP    DS    CL8            UPDATE DDNAME SLOT
SYSLIB   DS    CL8            SYSLIB DDNAME SLOT
SYSIN    DS    CL8            SYSIN DDNAME SLOT
SYSPRINT DS    CL8            SYSPRINT DDNAME SLOT
SYSPUNCH DS    CL8            SYSPUNCH DDNAME SLOT
SYSUT1   DS    CL8            SYSUT1 DDNAME SLOT
SYSUT2   DS    CL8            SYSUT2 DDNAME SLOT
SYSUT3   DS    CL8            SYSUT3 DDNAME SLOT
SYSGO    DS    CL8            SYSGO DDNAME SLOT
SPACE    DS    2CL8           UNUSED DDNAME SLOTS
         EJECT
STACKPL  DS    4F             STACK PARAMETER LIST
STACKPB  DS    2F             STACK PARAMETER BLOCK
ECB      DS    0F             CP'S ECBS
PARSEECB DS    F              ECB FOR PARSE
PUTLECB  DS    F              ECB FOR PUTLINE
STACKECB DS    F              ECB FOR STACK
ANSPLACE DS    F              PARSE ANSWER PLACE
CPPLPTR  DS    F              PTR TO THE CPPL
VALSAVE  DS    18F            REGISTER SAVE AREA FOR VALIDITY EXITS
         CNOP  4,8            INSURE ALIGNMENT FOR DAPB0CS
ENDMAIN  DS    0D             END OF FIRST PART OF GETMAIN STORAGE
PROGBASE DS    F              FOR RESTORING BASE IN VALIDITY EXITS
VCPARMS  DS    3A             VALID CHK RTN PARMS FOR LOAD AND PRINT
DSERRSAV DS    A              TO SAVE RETURN REGISTER
BSDSNLTH DS    H              LENGTH OF BASIC DSNAME
BSDSNPTR DS    F              PTR TO BASIC DSNAME
BSMEMPTR DS    F              PTR TO BASIC MEMBER NAME
BSMEMLTH DS    H              LENGTH OF BASIC MEMBER NAME
DAIRPB   DS    19F            DAIR PARAMETER BLOCK
DSLTHDSN DS    0H             DSLENGTH/DSNAME FIELDS
DSLNGTH  DS    H              DSLENGTH FIELD
DSNAME   DS    50C            DSNAME FIELD
OPENPL   DS    F              OPEN PARAMETER LIST
CLOSEPL  DS    F              CLOSE PARAMETER LIST
DCBG     DS    22F            DCB FOR PDS
BLDLLIST DS    0H             BLDL LIST FOR MEMBER OF PDS
FFLLG    DS    2H             FFLL FIELD OF BLDL LIST
MEMBNAME DS    8C             MEMBER NAME FIELD OF BLDL LIST
TTR      DS    6C             REST OF BLDL LIST
SWITCH   DS    C              OLD-DATASET-REQUIRED SWITCH
ALCOLD   EQU   X'01'           OLD DATASET REQUIRED
ENTRPUTL DS    F              ENTRY POINT OF PUTLINE SERVICE ROUTINE
PUTLPL   DS    4F             PUTLINE PARAMETER LIST
PUTLPB   DS    5F             PUTLINE PARAMETER BLOCK
MEMBSAVE DS    8C             MEMBSAVE FIELD
TEMP     DS    D              TEMPORARY STORAGE
DUM2ND   DS    A              DUMMY STORAGE FOR 2NDARY MSG
PTR2NDMS DS    A              TO SAVE PTR FOR 2NDARY MESSAGE
MSGNXT   DS    A              POINTER TO NEXT MESSAGE
NMSGSEGS DS    F              NUMBER OF MESSAGE SEGMENTS
MSGSGPTR DS    F              POINTER TO NEXT MESSAGE SEGMENT
MSGLTH   DS    H              LENGTH OF FOLLOWING MESSAGE
MSGOFF   DS    H              MESSAGE OFFSET
MSGTEXT  DS    250C           MESSAGE TEXT BUFFER
WORK     DS    31H            WORK AREA
FLAG     DS    X              FLAG FOR SETTING SWITCHES
ALCSRC   EQU   X'04'          SOURCE ALLOCATION IN PROGRESS
ALCLOAD  EQU   X'20'          LOAD DS ALLOCATION IN PROGRESS
ALCLIST  EQU   X'40'          LIST DS ALLOCATION IN PROGRESS
ALCUTIL  EQU   X'80'          UTILITY DS ALLOCATION IN PROGRESS
LISTALCD EQU   X'10'          LIST DS ALLOCATED
LOADALCD EQU   X'08'          LOAD DS ALLOCATED
DEBUG2   DS    F,48C          FOR FINDING PROMPTER WORK AREA
ENDSTOR  DS    0D             END OF SECOND HALF OF GETMAIN STORAGE
         EJECT
MAIN     EQU   ENDSTOR-STORAGE LENGTH OF ENTIRE GETMAIN AREA
MAIN1    EQU   ENDMAIN-STORAGE LENGTH OF FIRST HALF OF GETMAIN AREA
MAIN2    EQU   ENDSTOR-ENDMAIN LENGTH OF SECOND HALF OF GETMAIN AREA
         SPACE 3
R0       EQU   0              DEFINE REGISTER 0 SYMBOLICALLY
R1       EQU   1              DEFINE REGISTER 1 SYMBOLICALLY
R2       EQU   2              DEFINE REGISTER 2 SYMBOLICALLY
R3       EQU   3              DEFINE REGISTER 3 SYMBOLICALLY
R4       EQU   4              DEFINE REGISTER 4 SYMBOLICALLY
R5       EQU   5              DEFINE REGISTER 5 SYMBOLICALLY
R6       EQU   6              DEFINE REGISTER 6 SYMBOLICALLY
R7       EQU   7              DEFINE REGISTER 7 SYMBOLICALLY
R8       EQU   8              DEFINE REGISTER 8 SYMBOLICALLY
R9       EQU   9              DEFINE REGISTER 9 SYMBOLICALLY
R10      EQU   10             DEFINE REGISTER 10 SYMBOLICALLY
R11      EQU   11             DEFINE REGISTER 11 SYMBOLICALLY
R12      EQU   12             DEFINE REGISTER 12 SYMBOLICALLY
R13      EQU   13             DEFINE REGISTER 13 SYMBOLICALLY
R14      EQU   14             DEFINE REGISTER 14 SYMBOLICALLY
R15      EQU   15             DEFINE REGISTER 15 SYMBOLICALLY
         SPACE 5
C0       EQU   0              SYMBOLIC 0
C1       EQU   1              SYMBOLIC 1
C2       EQU   2              SYMBOLIC 2
C3       EQU   3              SYMBOLIC 3
C4       EQU   4              SYMBOLIC 4
C5       EQU   5              SYMBOLIC 5
C6       EQU   6              SYMBOLIC 6
C7       EQU   7              SYMBOLIC 7
C8       EQU   8              SYMBOLIC 8
C9       EQU   9              SYMBOLIC 9
C10      EQU   10             SYMBOLIC 10
C11      EQU   11             CONSTANT 11
C12      EQU   12             SYMBOLIC 12
C16      EQU   16             SYMBOLIC 16
C17      EQU   17             CONSTANT 17
C20      EQU   20             SYMBOLIC 20
C23      EQU   23             SYMBOLIC 23
C24      EQU   24             SYMBOLIC 24
C25      EQU   25             SYMBOLIC 25
C40      EQU   40             SYMBOLIC 40
C47      EQU   47             SYMBOLIC 47
C100     EQU   100            SYMBOLIC 100
C172     EQU   172            SYMBOLIC 172
         SPACE 5
X00      EQU   X'00'          SYMBOLIC X'00'
X01      EQU   X'01'          SYMBOLIC X'01'
X02      EQU   X'02'          SYMBOLIC X'02'
XC       EQU   X'C'           SYMBOLIC X'C'
X10      EQU   X'10'          SYMBOLIC X'10'
X1C      EQU   X'1C'          SYMBOLIC X'1C'
X40      EQU   X'40'          SYMBOLIC X'40'
X80      EQU   X'80'          SYMBOLIC X'80'
         SPACE 5
CBLANK   EQU   C' '           SYMBOLIC C' '
CASTERSK EQU   C'*'           SYMBOLIC C'*'
CCOM     EQU   C','           SYMBOLIC C','
CC0      EQU   C'0'           SYMBOLIC C'0'
         END
