 /* @NULL */
 %NOPRINT;
         % DCL @NULLCNT FIXED;
         % @NULLCNT = 0;
         % DCL @NULL ENTRY;
 % @NULL:  PROC RETURNS(CHAR);
 /*
0*$.HE GENERALIZED SUBROUTINES - @NULL
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE GENERATES A UNIQUE LABEL
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$08/26/76
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  @NULL
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS PLI PREPROCESSOR TEXT, WHICH CONTAINS A PREPROCESSOR
0*$PROCEDURE CALLED @NULL, PROVIDES THE PLI PROGRAMMER WITH THE
0*$FACILITY TO GENERATE UNIQUE LABELS.  AT EACH INVOCATION, @NULL
0*$WILL RETURN A STRING OF THE FORM NULLDDD, WHEN DDD IS A NUMBER
0*$WHICH IS INCREMENTED AT EACH INVOCATION.  AN EXAMPLE OF
0*$USAGE IS THE GENERATION OF FILLERS IN THE DECLARATION OF A
0*$STRUCTURE AS FOLLOWS -
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL 1 STRUCTURE,
0*$     2 ITEM1 FIXED DEC(5,0),
0*$     2 @NULL CHAR(5),
0*$     2 ITEM2 FIXED DEC(6,0),
0*$     2 @NULL CHAR(6),
0*$     2 ITEM3 FIXED DEC(7,0);
0*$.FI L
0*$.IN 0
0*$.SP 1
0*$THE RESULT OF THE ABOVE USAGE OF @NULL WILL BE THAT THE SECOND
0*$ELEMENT OF THE STRUCTURE WILL BE NAME NULL1, AND THE FOURTH
0*$WILL BE NAMED NULL2.
0*$.SP 1
 */
         DCL STR CHAR, (I,J) FIXED;
         @NULLCNT = @NULLCNT + 1;
         STR = @NULLCNT;
         DO I = 1 TO 8;
              IF SUBSTR(STR,I,1) ^= ' '
                   THEN GO TO FRNT;
              END;
 FRNT:
         RETURN('NULL' ×× SUBSTR(STR,I,9-I));
         % END @NULL;
 %PRINT;
