*          DATA SET TGSPGMTM   AT LEVEL 001 AS OF 06/18/71
         TITLE  'TIMER PROGRAM  WITH PROG OUTPUT'
PROGTIME START
*                             NOTE
*
*              THIS PROGRAM SHOULD BE RE-LINKEDITED  UNDER
*              EACH NEW RELEASE OF OS INCASE THERE IS A
*              CHANGE IN OVERLAY SUPERVISOR MODULES.
*
*
*
*        PROGTIME - WRITTEN BY T.Y. JOHNSTON AND R.H. JOHNSON
*                   AT THE STANFORD LINEAR ACCELERATOR CENTER
*                   COMPUTATION CENTER.
*                   VERSION 2 - JUNE 9,1970
*
         EJECT
**********************************************************************
*   THIS PROGRAM IS  TO TIME A TASK AND CREATE INPUT FOR
*       ANOTHER PROCESS TO CREATE HISTOGRAMS.
*
*   THE  RECORD WILL CONTAIN  THE FOLLOWING INFORMATION:
*
*     WORD 1 WILL CONTAIN IN THE FIRST BYTE A HEX CODE OF 00
*            TO INDICATE THAT THE TASK WAS ACTIVE AND A HEX
*            01 TO INDICATE THE TASK WAS WAITING.
*      WORD 1 BYTES 2 TO 4 WILL CONTAIN THE ADDRESS FROM THE
*            RESUME PSW STORED IN EITHER THE PRB OR IRB.
*
*      WORDS 2 AND 3 WILL CONTAIN THE PROGRAM NAME
*
*      WORD 4 WILL CONTAIN THE TCB ADDRESS
*
*      WORD 5 WILL CONTAIN IN BYTE ONE THE OVERLAY SEGMENT
*            NUMBER FROM 1 TO 255.
*      WORD 5 BYTES 2 TO 4 WILL CONTAIN THE MODULE LOAD ADDRESS
*
*
*   INPUT TO THE PROGRAM WILL CONSIST OF ONE CARD CODED AS FOLLOWS:
*
*
*     PROGNAME(,TIMEUNIT)
*
*
*     PROGNAME:   THE NAME USED TO CALL THE PROGRAM TO BE TIMED.
*              THIS MUST CONFORM TO OS/360 PROGRAM NAMING RULES.
*
*     TIMEUNIT:  INTEGER 0 TO 9999. NUMBER OF  1/60 SECOND REAL
*                TIME UNITS BETWEEN  SAMPLES.
*
*     BOTH PARAMETERS ARE POSITIONAL AND ONLY PROGNAME IS MANDATORY.
*     NORMAL  360/0S RULES FOR POSITIONAL PARAMETERS APPLY WITH  THE
*     FURTHER CONSTRAINT THAT THEY MUST BOTH BE ON 1 CARD.
*
*          DD CARDS ARE AS FOLLOWS
*              PROGTME1 INPUT SINGLE CARD (1 CARD ONLY FILE)
*              PROGTME2 INPUT FILE TO BRING PROGRAM IN.
*              PROGTME3 OUTPUT FOR PLOTTING      ×  ×
*    REGISTER UTILIZATION
*
*        R3 = BASE
*        R12 = INTERNAL LINK   REGISTER
*        R5  = SECOND  LEVEL LINK REGISTER AND WORK REGISTER
*        R13 = SAVEAREA
*        R14 = WORK REGISTER
*        R15 = WORK REGISTER
*   IF PROGTME1 IS DUMMY THE DEFAULT VALUE IS MAIN,1
*
*    INCLUDED IN THIS MODULE IS A PSUEDO IEWSZOVR WHICH IS ACTIVED
*        IN CASE OVERLAY IS CALLED FOR.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
*  ESTABLISH ADDRESSABILITY SAVE REGISTERS AND OPEN FILES.
         SPACE 2
         SPACE
         SAVE  (14,12)
         LR    R3,R15
         USING PROGTIME,R3
         LA    R14,OWNSAVE
         ST    R14,8(R13)
         ST    R13,4(R14)
         LR    R13,R14
         ST    R1,PARM   SAVE PARAMETER REGISTER  TO PASS ON
         OPEN  (CONTROL,,PROG,(OUTPUT),LIB)
         SPACE
          TM    CONTROL+48,X'10' HAS OPEN SUCCESSFULL
          BZ    EODIN            BRANCH NOT OK
PG1PT3   READ  DECB1,SF,CONTROL,WORK,'S'  READ CONTROL CARD
         CHECK DECB1
         LA    R11,80    R11 IS NUMBER OF BYTES LEFT TO SCAN
         LA    R1,WORK   R1 WILL BE USED TO POINT AT DATA AND
*                        IN TRT INSTRUCTION
         B     PG2PT1
          EJECT
EODIN     RDJFCB  (LIB)
          OC    WORK+44(8),WORK+44
          BZ   NONAME              NAME IS BINARY ZERO
          CLC     NAME,WORK+44 IS NAME BLANK IN JFCB
          BE      NONAME         YES USE NAME MAIN
          MVC     NAME,WORK+44   MOVE IN MEMBER NAME
          B      PG4PT4
         SPACE
NONAME   MVC   NAME,=C'MAIN'
        B    PG4PT4
PG1PT6   LA    R9,4092                  CONTROL CARD ERROR
*
*                                       COMPLETION CODE
*
*                                           4092
*
*
PG1PT5   CLOSE (CONTROL,,PROG)
          L    R13,4(R13)
          LR   R15,R9
          RETURN (14,12),RC=(15)
PG2PT1   SR    R2,R2     R2 WILL CONTAIN FUNCTION CODE AFTER
*                        TRT  THESE WILL BE USED AGAINST  BRANCH
*                        TABLE  TO  INDICATE SUCCESS
         BAL   R12,TRT   LINK TO TRANSLATE AND FIND PROGNAME
         B     *(R2)
         B     PG2PT3    ALPHA OK
         B     PG1PT6   FIRST CHARACTER COMMA
PG2PT3   MVI   TRTABLE+91,X'00'    RESET $
         MVI   TRTABLE+123,X'00'   RESET #
         MVC   TR2(57),TR3         RESET ALPHA NUMERIC
         MVI   TRTABLE+64,X'04'    RESET BLANK
         BAL   R12,TRT             FIND END OF NAME
         CH    R9,=H'8'            NAME 8 CHARACTERS OR LESS?
         BH    PG1PT6
         BCTR  R9,0
         EX    R9,MVNAME           SAVE NAME
PG3PT1   B     *(2)                CHECK ALL THROUGH
         B     PG4PT4              ALL THROUGH
         LA    R1,1(R1)            BYPASS COMMA
         BCTR  R11,0               DECREMENT COUNT
*        SET UP TO FIND  TIMER UNITS
         MVC   TR2(41),TR2-1        ALPHA NOT VALID ONLY NUMERIC
         MVI   TRTABLE+91,X'0C'     $
         MVI   TRTABLE+123,X'0C'    #
         BAL   R12,TRT
PG3PT3   CH    R9,=H'4'            4 OR LESS VALID
         BH    PG1PT6
         LTR   R9,R9          DEFAULT = 1 IF NO VALUE
         BZ    PG4PT4
         BCTR  R9,0
         EX    9,PACKIT
         CVB   R15,PACK1      CONVERT NUMBER UNITS TO BINARY
         LTR   R15,R15
         BZ    PG4PT4         BRANCH IF ZERO
         MH    R15,TIME+2     MULTIPLY BY TIME UNIT
         ST    R15,TIME       AND SAVE
PG4PT4    BAL   R12,PG25PT7
*        IDENTIFY EP=IEWSZOVR,ENTRY=OVERENT  IDENTIFY OVERLAY ENTRY
*        LTR   R15,R15
*        LA    9,4084  NOTE ERROR IN IDENTIFY
*        BNZ   PG1PT5 RETURN WITH COMPLETION CODE
          FIND  LIB,NAME,D    IS THE NAME PASSED OK
          LTR   R15,R15
         LA    R9,4080  INDICATE MEMBER NOT IN LIBRARY
          BNZ   PG1PT5     BRANCH IF IO ERROR OR NOT FOUND
PG5PT2   L     R1,PARM        RESTORE PARM FOR SUB PROG
         ATTACH  EPLOC=NAME,LPMOD=1,ECB=ECBS,DCB=LIB
*        ATTACH SUB TASK WITH LOWERED PRIORITY
*                                             LIMIT PRIORITY
         ST    R1,SUBTASK     SAVE TCB ADDRESS FOR DETACH
         L     R15,16         CVT POINTER
         L     R15,0(R15)     TCB POINTER
         L     R11,4(R15)     R11= OWN TCB
         L     R15,152(R11)  PICK UP DPQE POINTER
         L     R15,8(R15)     PICK UP PQE
         L     R14,24(R15)   PICK UP LOW ADDRESS OF REGION
         ST    R14,LOREGION   SAVE ADDRESS
         A     R14,20(R15)   PICK UP REGION SIZE
         ST    R14,HIREGION  SAVE ADDRESS OF END OF REGION
         EJECT
*                   MAIN  TIMER LOOP
*
*              THIS IS PRIMARY TIMER LOOP FOR  TIMING SUBTASK
*
PG5PT4   STIMER REAL,TIMEPOST,TUINTVL=TIME
*                                            USE REAL TIME TO TIME
*                                            PROCESS AND WAIT FOR END
*                                            END MAY BE CAUSED BY
*                                            END OF TIMER PERIOD OR
*                                            POSTING OF SUB TASK
         WAIT  1,ECBLIST=ECB2                COMPLETE
*                             CLEAR TIMER INTERVAL IN CASE
         TTIMER CANCEL        POST WAS FROM SUBTASK COMPLETION
         TM    ECBS,X'40'     SUBTASK ENDED
         BO    EOJ            BRANCH YES
         MVI   ECBS+4,X'00'   CLEAR TIMER ECB
*
*       SEE DSECT AT END OF PROGRAM FOR
*           FOR THE STRUCTURE OF THE TABLE.
*
         L     R10,136(R11)   GO DOWN TCB CHAIN
PG5PT5   CLC   136(4,R10),=X'00000000'
         BE    PG6PT1
         L     R10,136(R10)  PICK UP NEXT LOWER TCB
         B     PG5PT5
PG6PT1    TM    29(R10),X'C0' TEST FOR COMPLETE
          BNZ   PG7PT4  GO PROCESS NEXT TASK
          TM    33(R10),X'C0' TEST  FOR COMPLETE
          BNZ   PG7PT4
          SR    R15,R15
          USING   PGTBL,R7
         LA    R7,PROGTBLE   POINT R7 TO FIRST ENTRY OF TABLE
PG6PT8   C     R10,TTCB       TCB = PROG TCB
         BE    PG6PT4
         C     R15,TTCB       TCB = ZERO (NONE)
         BE    PG6PT2
         LA    R7,16(R7)      POINT TO NEXT TABLE ENTRY
         B     PG6PT8
PG6PT2   BAL   R12,NEWTCB
PG6PT4   L    R14,0(R10)      POINT TO RB
*
*        TEST FOR RUN/WAIT STATUS OF THIS TASK
*
         MVI   WAIT,X'00'  SET RUN ON
         CLI   28(R14),X'00'  IS WAIT COUNT ZERO?
         BE    NEXTTEST
WAITON   MVI   WAIT,X'01'  SET WAIT ON
         B     CLEARIT
NEXTTEST TM    32(R10),X'FF'  SEE IF TASK NONDISPATCHABLE
         BNZ   WAITON
         TM    33(R10),X'FF'
         BNZ   WAITON
CLEARIT  MVC   DICKR15,DKZERO  CLEAR MINOR CDE ADDRESS
PG6PT5   TM    10(R14),X'80'  IRB OR PRB  IS ZERO
         BNZ   PG6PT7         BRANCH TO GO DOWN CHAIN
PG6PT12  MVC   PSW,21(R14)    PICK UP ADDRESS FROM IRB OR PRB
         BAL R5,PG6PT6
         L     R15,12(R14)    SAVE CDE ADDRESS
         LA    R15,0(R15)
         ST    R15,DICKR15    FOR LATER USE
         B     PG7PT3E       GO SEARCH JOB PACK CDE CHAIN
PG6PT6   TM    10(R14),X'C0'  MUST FIND PRB TO GET CDE AND NAME
         LA    R4,0  CLEAR INDEX REGISTER
         BZ    PG7PT1         PRB
PG6PT9   L     R8,28(R14)  PICK UP NEXT RB
          L     R15,12(R14)  POINT TO CDE
          CR    R8,R10      POINTING AT TCB
          BE    CHKNAME  YES GO TO CHECK NAME
          TM    10(R14),X'C0' IF CURRENT RB NOT PRB BRANCH
          BNZ   PG6PT11
          TM    10(R8),X'80'  PRIOR RB IRB OR PRB
PG6PT10   BZ    SETR14        IF IT IS BRANCH TO CHECK NAME
PG6PT13   L     R14,28(R8)    PICK UP GRANDFATHER RB AND CHECK
         B     PG6PT6
PG6PT7   C     R10,28(R14) CHECK IF FIRST RB OFF TCB
         BE    PG6PT12  BRANCH YES
         L     R14,28(R14)   NEXT RB
         B     PG6PT5
PG6PT11   L    R15,12(R8)  PICK UP CDE POINTER FROM POSS RB
         LA    R4,4  PUT INDEX VALUE IN TO INDICATE PARENT
          TM   10(R8),X'C0'    MAKE SURE THAT IT IS PRB
          B    PG6PT10         GO BACK TO MAKE CHECK
PG7PT1   L     R15,12(R14)   POINT TO CDE
*         CLI   9(R14),X'04'  CHECK FOR PROPER RB LENGTH
*         BNE   PG6PT9       BRANCH IF PSUEDO PRB
CHKNAME   CLC   TNAME,8(R15)
          BCR   8,R5         RETURN IF NAME IS THE SAME
          CLC   8(8,R15),=C'IEWSZOVR' CHECK FOR OVERLAY
          BE    PG7PT2(R4) INDEXED IF IEWSZOVR IS PARENT
          MVC   TNAME,8(R15)  MOVE NAME FROM CDE
          MVI   TSEG,1  SET SEGMENT NUMBER TO 1
         BR    R5
SETR14   LR    R14,R8    POINT R14 AT CURRENT RB
         B     CHKNAME   GO CHECK NAME
PG7PT2    B     PG6PT9  IEWSZOVR IS CURRENT RB NOT PRIOR
         SR     R4,R4   CLEAR INDEX POINTER
         B     PG6PT13 GO BACK AND GET GRANDFATHER
          EJECT
*THESE ROUTINES GO DOWN THE CDE CHAIN TO FIND THE MODULE
* THAT IS IN CONTROL OR IF THE CONTROL IS OUTSIDE THE REGION.
          SPACE
PG7PT3E   L     R12,WAIT   PICK UP PSW ADDRESS
          LA    R12,0(R12) CLEAR HIGH ORDER BYTE
          C     R12,LOREGION  FIND IF IN REGION
          BL    LOWCORE       BRANCH IF BELOW
          C     R12,HIREGION
          BH    HICORE        BRANCH TO INDICATE IN LINK PACK AREA
          L     R15,44(R11)   PICK UP JPA CDE POINTER
*OFFSET IN NEXT INSTRUCTION CHANGED FROM 0 TO 28
PG7PT3F  TM    28(R15),X'C4'  DISCARD CDE IF IN LINK PACK,FETCH,MINOR
         BNZ   NEXTCDE
AOKCDE   L     R14,20(R15)   PICK UP XL POINTER FROM CDE
          L    R0,4(R14)     PICK UP NBR OF BLOCKS IN EXTENT LIST
          LR   R1,R0
          SLL  R1,2         MAKE INTO AN INDEX
          LA   R8,8(R1,R14) POINT TO BOTTOM OF AREA
          LA   R9,8(R14)    POINT TO FIRST SIZE
LOOP3     C    R12,0(R8)    BELOW EXTENT
          BL   LOOP2        BRANCH YES
          L    R1,0(R8)     PICK UP BOTTOM TO CALCULATE TOP
          AL   R1,0(R9)     ADD SIZE OF AREA
         LA    R1,0(R1)     CLEAR HEX 80 OUT OF LAST ENTRY
         CR    R12,R1       WITHIN THIS EXTENT
         BL    FOUND
LOOP2    TM    0(R9),X'80'   LAST EXTENT
         BO    NEXTCDE
         LA    R8,4(R8)
         LA    R9,4(R9)
         BCTR  R0,0
         B     LOOP3
NEXTCDE  L     R15,0(R15)  PICK UP NEXT CDE OFF OF CHAIN
         LA    R15,0(R15)  CLEAR HIGH ORDER BYTE
         LTR   R15,R15     CHAINING FIELD ZERO (LAST ONE PROCESSED)
         BZ    GETMAIN
         B     PG7PT3F
MARKOVLY MVC   NAMEHOLD,=C' OVERLAY' SHOW IN OVERLAY SUPERVISOR
         B     FOUND2
LOWCORE  MVC   NAMEHOLD,=C' LOWSYS '
         B     FOUND2
HICORE   MVC   NAMEHOLD,=C' HIGHSYS'
         B    FOUND2
GETMAIN  MVC   NAMEHOLD,=C' GETMAIN'
FOUND2   MVI   NEWSEQ,X'00'
         MVC   TLOADADR,=X'000000'   ZERO LOAD ADDRESS
         B     FOUND3
FOUND    MVC   NAMEHOLD,8(R15)   MOVE IN MODULE NAME
         ST    R8,DJR8
         ST    R9,DJR9
         L     R8,DICKR15  GET POSSIBLE MINOR CDE POINTER
         TM    0(R8),X'04' SEE IF MINOR
         BZ    NOTMIN      BRANCH IF NOT
         L     R9,20(R8)    SEE IF MINOR POINTS TO
         LA    R9,0(R9)    THIS CDE
         CR    R9,R15
         BNE   NOTMIN
         MVC   NAMEHOLD,8(R8)  MOVE IN MODULE NAME
NOTMIN   L     R8,DJR8
         L     R9,DJR9
FOUND4   CLC   NAMEHOLD,=C'IEWSZOVR'  SEE IF WE ARE IN OVERLAY SUP.
         BE    MARKOVLY
         CLC   NAMEHOLD,=C'PROGTIME'  SEE IF WE ARE IN OVERLAY
         BE    MARKOVLY
         BCTR  R0,0  DECREMENT COUNT BY ONE
         LCR   R0,R0   COMPELEMENT NUMBER
         A     R0,4(R14)  CALCULATE EXTENT NUMBER FOUND IN
        MVC   TLOADADR,1(R8)
         STC   R0,NEWSEQ
FOUND3   BAL   R12,WRPROG
PG7PT4   CLC 128(4,R10),=X'00000000'  OTHER TASK ON SUBTASK QUEUE?
         BE    PG7PT5  BRANCH NO
         L     R10,128(R10)  PICK UP NEXT TASK ON QUEUE
         B     PG5PT5
PG7PT5   L     R10,132(R10)  BACK UP ONE LEVEL TO ORIGINATING TCB
         CR    R10,R11   IS THIS MY TCB?
         BE    PG5PT4  BRANCH YES ALL THROUGH
         B     PG6PT1  PROCESS PARENT TCB
DICKNAME  DC  C'DICKDICK'  NAME OF ACTIVE MODULE
DICKR15   DS  1F    ADDRESS OF MINOR CDE
DKZERO    DC  1F'0'
DJR8     DS    1F
DJR9     DS    1F
         EJECT
*  THIS IS INTERFACE FOR OVERLAY WE WILL FIND OR CREATE AN ENTRY
*  IN THE PROGRAM TABLE AND RECORD THE SEGMENT NUMBER. IF A NEW
*  ENTRY IS FOUND WE WILL ADD THE ENTRY TO THE BUFFER AND WRITE
*  IT OUT IF THE BUFFER IS FULL. SSM DISABLE IS USED TO SERIALIZE THE
*  RESOURCE.
OVERENT  STM   R7,R1,96(R6)   STORE REGS IN SVRB
         ST    R3,140(R6)
         BALR  R11,0          ESTABLISH TEMPORARY ADDRESSABILITY
         USING *,R11
         SSM  *+1      DISABLE SYSTEM TO PREVENT REENTRY
         L     R3,BASEAD      ESTABLISH  NORMAL  ADDRESSABILITY
         DROP  R11
         LA    R7,PROGTBLE    POINT TO TABLE
         L     R8,16          CVT
         L     R8,0(R8)       TCBPOINT
         L     R10,4(R8)      TCB
         SR    R15,R15        CLEAR WORK
PG8PT2   C     R10,TTCB     TCB =
         BE    PG8PT3
         C     R15,TTCB     END OF TABLE
         BE    PG8PT2A        YES
         LA    R7,16(R7)      NEXT ENTRY
         B     PG8PT2         LOOP
         SPACE
PG8PT2A  BAL   R12,NEWTCB       CREATE NEW TABLE ENTRY
PG8PT3   L     R14,0(R10)       R14 = RB
         LA    R13,OWNSAVE      PICK UP SAVE AREA IN CASE OF I/O.
         STM   R2,R6,SAVE5      SAVE REST OF REGISTERS
          BAL   R5,PG6PT6
         LM    R2,R6,SAVE5
PG8PT7   STC   R9,TSEG          STORE SEGMENT NUMBER IN TABLE
         DC   X'80FF',S(*-1) RE-ENABLE SYSTEM
         LM    R7,R1,96(R6)     PICK UP REGISTERS
*        L     R15,VOVY         PICK UP ADDRESS OF TRUE OVERLAY SUP
         L     R3,140(R6)       RESET  R3
         BR    R15       BRANCH TO TRUE OVERLAY SUP
*
*    WE  LINKEDIT OVERLAY SUPERVISOR TRANSIENT MODULE  ONTO HERE
*    TO BE ABLE TO PASS CONTROL.
*
         EJECT
TIMEPOST SAVE  (0,1)          POST TIMER ECB AND RETURN
         USING TIMEPOST,R15
         POST  ECBS+4
         RETURN (0,1)
         DROP  15
         SPACE
         SPACE
TRT      LR    R10,R1         SAVE BEGINNING POINTER
         EX    R11,TRT1       TRANSLATE
         BC    6,TRT2         BRANCH SOMETHING FOUND
         B     PG1PT6
TRT2     LR    R9,R1             R9 NOW = END
         SR    R9,R10            R9 = NUMBER OF BYTES SCANNED
         SR    R11,R9            REDUCE  RESIDUAL BYTES
         SPACE
*                        R2 CONTAINS THE FUNCTION BYTE  04 AND 08
         CH    R2,=H'8'  ARE VALID BYTES 0C INDICATES INVALID
         BCR   13,R12    CHARACTER FOR THIS TRT
         B     PG1PT6
         SPACE
         SPACE
         SPACE
         SPACE
NEWTCB   MVI   0(R7),X'40'         BLANK NAME
         MVC   1(7,R7),0(R7)
          MVI   TSEG,1   SET SEGMENT NUMBER TO 1
          MVC   TLOADADR,=X'00000000'
          ST    R10,TTCB     SAVE TCB ADDRESS IN TABLE
         BR    R12                 RETURN
         EJECT
         SPACE
EOJ      L     R10,SUBTASK
*                        DETACH  SUBTASK AND SAVE COMPLETION CODE
*        L     R9,TCBCMP
         L     R9,16(R10)
         DETACH SUBTASK
         SPACE
*                        FORCE WRITING OF LAST PROG BUFFER
          SR    R14,R14
          LH    R15,BLKSIZE  PUT IN MAX NUMBER OF RECORDS
          SH    R15,NBRRECS  SUBTRACT RESIDUAL
*               R15 CONTAINS NUMBER OF RECS IN LAST BLOCK
          BZ    EOJ2   BRANCH IF NO RECORDS TO BE WRITTEN
          M     R14,=F'20'
          STH   R15,MBLKSIZE  STORE LAST BLOCKSIZE IN DCB
         BAL   R12,WRPROG2
EOJ2     CLI   PG25PT6+1,X'F0'  WHAT WRITE OUTSTANDING
         BNE   PG24PT2          BRANCH  WRITE 2
         CHECK PROGWR1
         B     PG24PT3
PG24PT2  CHECK PROGWR2
PG24PT3   CL     R9,=F'4095'   CHECK FOR COMPLETION CODE >4095
          BNH   PG24PT4        BRANCH IF OK
         LR    R14,R9 SAVE COMPLETION CODE
         SR    R15,R15
        SRDL  R14,11
         LTR    R15,R15
         BNZ    PG24PT4
         LA    R9,4088 INDICATE ABEND
         B     PG1PT5
PG24PT4   SR   R9,R9
          B PG1PT5
         EJECT
*              PROG WRITE ROUTINE AND BLOCKER BSAM 2 BUFFERS
         SPACE
WRPROG   L     R5,OUTSUM
         MVC   0(4,R5),PROGREC MOVE IN WAIT AND PSW ADR
          MVC   4(8,R5),NAMEHOLD  MOVE IN NAME
          MVC   12(8,R5),8(R7)  MOVE IN REST OF RECORD
         CLI   NEWSEQ,X'01'
         BE    PG25PT3
         MVC   16(1,R5),NEWSEQ  MOVE IN EXTENT NUMBER
PG25PT3   LH    R14,NBRRECS   PICK UP NBR OF RECORDS LEFT
          BCT   R14,PG25PT2
          B     WRPROG2       BRANCH TO WRITE RECORD
PG25PT2   STH   R14,NBRRECS   STORED DECREMENTED RECORD COUNT
          LA    R5,20(R5)   POINT TO NEXT POSITION IN BUFFER
          ST    R5,OUTSUM   SAVE NEXT AVAILABLE BUFFER POSIT
          BR    R12
         SPACE
WRPROG2   MVC   NBRRECS,BLKSIZE RESET NBR OF RECORDS
WRPROG3  B     PG25PT9             FIRST TIME SWITCH
PG25PT6  B     PG25PT5             FLIP FLOP
         MVI   *-3,X'F0'           CHANGE FLIP FLOP
         CHECK PROGWR2
PG25PT8  MVC   OUTSUM,PROGWR2+12  MOVE IN OTHER BUFFER ADD
         WRITE PROGWR1,SF,MF=E
         BR    R12
         SPACE
PG25PT5  MVI   PG25PT6+1,X'00'     FLIP FLOP
         CHECK PROGWR1
          MVC   OUTSUM,PROGWR1+12  MOVE IN OTHER BUFFER ADD
         WRITE PROGWR2,SF,MF=E
          BR    R12
         SPACE
*                             INITIALIZATION ROUTINE AND FORCE
PG25PT7  GETBUF PROG,R15      1ST RECORD
         ST    R15,PROGWR1+12
         ST    R15,OUTSUM
         GETBUF PROG,R15
         ST    R15,PROGWR2+12
          BR    R12
         SPACE
PG25PT9  MVI   WRPROG3+1,0    TURN OFF FIRST WRITE SWITCH
         B     PG25PT8
         EJECT
*    THIS IS THE DCB EXIT ROUTINE TO DETERMINE IF THE USER HAS PUT
*    IN BLOCKSIZE OVERRIDE PARAMETERS, AND IF NOT FILL IN THE
*    BLOCK SIZE.  NOTE WE DO NOT CHECK TO SEE IF THE BLOCKSIZE
*    IS VALID FOR FIXED LENGTH RECORDS.
*
DCBEXIT  CLC   62(2,R1),=X'0000'    BLKSIZE FILLED IN
          BE    PG26PT1   INSERT DEFAULT BLOCKSIZE
          STM   R8,R9,SAVE5  SAVE WORK REGS
          SR    R8,R8
          LH    R9,62(R1)  PICK UP SPECIFIED BLOCKSIZE
          D     R8,=F'20'  DIVIDE BY RECORD LENGTH.
          LTR   R9,R9      QUOTIENT LESS THAN 1
          BNP   PG26PT2    BRANCH YES
         STH   R9,BLKSIZE  PUT NUMBER OF RECS IN SAVE AREA
          SR    R8,R8
         STH   R9,NBRRECS  INITIALIZE WORKING COUNT
          M     R8,=F'20'
          STH   R9,62(R1)  PUT PROPER RECORD LENGTH IN DCB
          LM    R8,R9,SAVE5
          BR    R14         RETURN TO OPEN ROUTINE.
PG26PT1  MVC   62(2,R1),=H'3520'
         BR    R14
PG26PT2  LM   R8,R9,SAVE5  RESTORE WORK REGS
          B    PG26PT1   GO TO SET DEFAULT VALUE
         EJECT
        CNOP 0,4
*                     CONSTANTS AND WORK AREAS
WORK      DC    CL176' '
NAME     DC    CL8' '
TR3      DC    XL9'00',7X'0C',9XL1'00',8X'0C'     ALPHANUMERIC OK
         DC    XL8'0',6XL1'0C',XL10'0'
TRTABLE  DC     64X'0C',X'00'      BLANK OK OTHERS INVALID
         DC     26X'0C',X'04'      $
         DC     15X'0C',X'08'      ,
         DC     15X'0C',X'04'      #
         DC     69X'0C'
TR2      DC    9X'04',7X'0C'   A TO I
         DC    9X'04',8X'0C'   J TO R
         DC    8X'04',22X'0C'   S TO Z
Q1       DC    C'TIMEPROG'
R1A      DC    C'R1'
NEWSEQ    DC    X'01'
NBRRECS   DC   H'176'
BLKSIZE   DC    H'176' DEFAULT RECORDS PER BLOCK
MVNAME   MVC   NAME(0),0(R10)
PACKIT   PACK  PACK1,0(0,R10)
TRT1     TRT   0(0,R1),TRTABLE
NAMEHOLD  DC  CL8' '
LOREGION  DC  F'0'
HIREGION  DC  F'0'
OWNSAVE  DC    18F'0'
PARM     DC    F'0'
CONTROL  DCB   DSORG=PS,MACRF=R,DDNAME=PROGTME1,RECFM=F,LRECL=80,      X
               BLKSIZE=80,NCP=1,EODAD=EODIN
PROG     DCB   DSORG=PS,MACRF=W,DDNAME=PROGTME3,RECFM=FB,LRECL=20,     X
               EXLST=XLIST,NCP=2,BUFNO=2
LIB       DCB   DSORG=PO,DDNAME=PROGTME2,MACRF=R,EXLST=XLIST2
PACK1    DC    D'0'
XLIST    DC    X'85',AL3(DCBEXIT)
XLIST2     DC    X'87',AL3(WORK)
TIME     DC    F'640'
PROGREC  DS    0F
MBLKSIZE  EQU   PROG+62
WAIT      DC    X'0'
PSW      DC    XL3'0'
ECBS     DC    F'0,0'
SUBTASK  DC    F'0'
ECB2     DC    A(ECBS),AL1(128),AL3(ECBS+4)
BASEAD   DC    A(PROGTIME)
SAVE5    DC    5F'0'
*VOVY     DC    V(IEWSWOVR)
         WRITE PROGWR1,SF,PROG,,'S',MF=L
         WRITE PROGWR2,SF,PROG,,'S',MF=L
OUTSUM   DC    F'0'
         LTORG *
PROGTBLE DC    1024F'0'
PGTBL    DSECT
TNAME    DS    CL8
TTCB     DS     F
TSEG     DS     X
TLOADADR DS   CL3
         END
