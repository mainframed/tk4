 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE055 - SAS,DB2 */
   %INCLUDE ABESUB;
 ABESUB(ABE055) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL SETCAPS ENTRY;
   DCL CONVERT ENTRY(PTR,CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0),
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0))
     RETURNS(CHAR(256) VAR);
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL SYSCTLG ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL BINDEX ENTRY(CHAR(*) VAR, CHAR(*) VAR, CHAR(*) VAR,
     FIXED BIN(15,0))
     RETURNS(FIXED BIN(15,0));
   DCL HELPSTR CHAR(4) VAR INIT('');
   DCL SASCMD CHAR(240) VAR;
   DCL MYPTR PTR;
   DCL LAST PTR;
   DCL ALCODE CHAR(3) VAR STATIC INIT('OUT');
   DCL SUBDSN CHAR(44) VAR STATIC INIT('LASTJCL.CNTL');
   DCL (LPTR,SAVRH,LJPTR) PTR;
   DCL EXPNO DEC FLOAT(16) INIT(0);

   CALL SETCAPS(CMDBUF);
   SAVRH=RHPTR;
   LAST,LJPTR=NULL;
   IF CMDINDX=1 × CMDINDX=2
     THEN CALL DO_SAS;
     ELSE CALL DO_DB2;

 DO_DB2: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A DB2 SUBCOMMAND.                                 *
 *                                                                     *
 **********************************************************************/

   ON CONDITION(BADSSE) BEGIN;
     RHRC=8;
     IF MSGDATA=''
       THEN MSGDATA='ERROR DURING DB2 PROCESSING';
     GOTO END_DO_DB2;
     END;
   IF CMDBUF=''
     THEN RETURN; /* NOTHING TO DO */
   CMDBUF=SUBSTR(CMDBUF,PREFIX(CMDBUF,' '));
   SELECT;
     WHEN(INDEX(CMDBUF,'SELECT ')=1)
       CALL DO_DB2_SELECT;
     WHEN(INDEX(CMDBUF,'CONTENT ')=1 × INDEX(CMDBUF,'CONTENTS ')=1)
       CALL DO_DB2_CONTENT;
     OTHERWISE DO;
       RHRC=#DB2COM(CMDBUF,#TERM);
       IF RHRC^=0
         THEN MSGDATA='DB2 RETURN CODE='××RHRC;
       RHRC=#DB2COM('COMMIT',#TERM);
       END;
     END; /* SELECT */
 END_DO_DB2:;
   END DO_DB2;

 DO_DB2_CONTENT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A DB2 CONTENT SUBCOMMAND.                         *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;

   IF LENGTH(CMDBUF)<9
     THEN RETURN;
   CMDBUF=SUBSTR(CMDBUF,9); /* ELIMINATE 'CONTENT(S)' */
   IF CMDBUF=''
     THEN RETURN;
   CMDBUF=SUBSTR(CMDBUF,PREFIX(CMDBUF,' '));
   RHRC=#CMD('DEL',RHPTR,RHHDRPT);   /* DELETE ANY CURRENT RECORDS */
   RHRC=#CMD('USE ×',RHPTR,RHHDRPT); /* REMOVE ANY CURRENT DBD */
   RHRC=#CMD('0 BL 1',RHPTR,RHHDRPT); /* RECORD FOR TABLE NAME */
   RECSTR='TABLE='××CMDBUF;
   RHRC=#DB2GET('SELECT * FROM '××CMDBUF,
     DO_DB2_CONTENT_SUBRTNE,#TERM); /* GO DO SELECT */
   IF RHRC^=0
     THEN DO;
       MSGDATA='ERROR ACCESSING DB2 TABLE, RC='××I;
       RETURN;
       END;
   RECPTR=NXTHDR;
   IF RECPTR=HDPTR
     THEN CURSEQ=0;
     ELSE CURSEQ=RECSEQ;
   END DO_DB2_CONTENT;

 DO_DB2_CONTENT_SUBRTNE: PROC(SQLDAPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * SUBRTNE IS CALLED BY DB2GET TO PROCESS FIRST ROW AFTER CONTENT      *
 * SUBCOMMAND.                                                         *
 *                                                                     *
 **********************************************************************/
   DCL SQLDAPTR PTR;
   DCL 1 SQLDA BASED(SQLDAPTR),
     2 SQLDAID CHAR(8),
     2 SQLDABC BIN FIXED(31),
     2 SQLN BIN FIXED(15,0),
     2 SQLD BIN FIXED(15,0),
     2 SQLVAR(SQLSIZE REFER(SQLN)),
      3 SQLTYPE FIXED BIN(15,0),
      3 SQLLEN FIXED BIN(15,0),
      3 SQLDATA PTR,
      3 SQLIND PTR,
      3 SQLNAME CHAR(30) VAR;
   DCL 1 COLDATA BASED(COLPTR),
     2 COLIND FIXED BIN(15,0),
     2 COLLEN FIXED BIN(15,0),
     2 COLSTR CHAR(L REFER(COLLEN));
   DCL (I,J,K,M,N,PR,SC) FIXED BIN(15,0);

   DO I=1 TO SQLD;
     BUF='  '××SQLNAME(I);
     COLPTR=SQLIND(I);
     SELECT(SQLTYPE(I));
       WHEN(448,449) BUF=BUF××' VARCHAR('××CALCPRT(COLLEN)××')';
       WHEN(452,453) BUF=BUF××' CHAR('××CALCPRT(COLLEN)××')';
       WHEN(480,481) BUF=BUF××' FLOAT('××CALCPRT(SQLLEN(I))××')';
       WHEN(484,485) BUF=BUF××' DECIMAL('××
         CALCPRT(SQLLEN(I)/256)××','××
         CALCPRT(MOD(SQLLEN(I),256))××
         ')';
       WHEN(496,497) BUF=BUF××' INTEGER('××CALCPRT(SQLLEN(I))××')';
       WHEN(500,501) BUF=BUF××' SMALLINT('××CALCPRT(SQLLEN(I))××')';
       OTHERWISE BUF=BUF××' UNKNOWN';
       END; /* SELECT */
     IF MOD(SQLTYPE(I),2)=0
       THEN BUF=BUF××' NOT NULL';
     CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,-1,BUF,0);
     END;
   RETURN('0'B);
   END DO_DB2_CONTENT_SUBRTNE;

 DO_DB2_SELECT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A DB2 SELECT SUBCOMMAND.                          *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;

   RHRC=#CMD('DEL',RHPTR,RHHDRPT);   /* DELETE ANY CURRENT RECORDS */
   RHRC=#CMD('USE ×',RHPTR,RHHDRPT); /* REMOVE ANY CURRENT DBD */
   RHRC=#DB2GET(CMDBUF,DO_DB2_SUBRTNE,#TERM); /* GO DO SELECT */
   IF RHRC^=0
     THEN DO;
       MSGDATA='ERROR GETTING DB2 TABLE, RC='××I;
       RETURN;
       END;
   RECPTR=NXTHDR;
   IF RECPTR=HDPTR
     THEN CURSEQ=0;
     ELSE CURSEQ=RECSEQ;
   END DO_DB2_SELECT;

 DO_DB2_SUBRTNE: PROC(SQLDAPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * SUBRTNE IS CALLED BY DB2GET TO PROCESS EACH ROW AS IT IS RETRIEVED. *
 *                                                                     *
 **********************************************************************/
   DCL SQLDAPTR PTR;
   DCL 1 SQLDA BASED(SQLDAPTR),
     2 SQLDAID CHAR(8),
     2 SQLDABC BIN FIXED(31),
     2 SQLN BIN FIXED(15,0),
     2 SQLD BIN FIXED(15,0),
     2 SQLVAR(SQLSIZE REFER(SQLN)),
      3 SQLTYPE FIXED BIN(15,0),
      3 SQLLEN FIXED BIN(15,0),
      3 SQLDATA PTR,
      3 SQLIND PTR,
      3 SQLNAME CHAR(30) VAR;
   DCL 1 COLDATA BASED(COLPTR),
     2 COLIND FIXED BIN(15,0),
     2 COLLEN FIXED BIN(15,0),
     2 COLSTR CHAR(L REFER(COLLEN));
   DCL SMALLINT FIXED BIN(15,0) BASED(SMALLINT_PTR);
   DCL INTEGER FIXED BIN(31,0) BASED(INTEGER_PTR);
   DCL FLOAT BIN FLOAT(53) BASED(FLOAT_PTR);
   DCL BIGFLOAT FLOAT DEC(16),
       BIGFLOATCH CHAR(8) BASED(ADDR(BIGFLOAT));
   DCL (I,J,K,M,N,PR,SC) FIXED BIN(15,0);
   DCL NODEPTR PTR;

   IF RHUSEHD=NULL
     THEN DO; /* IT IS TIME TO SET DBD */
       L=0;
       DO I=1 TO SQLD;
         COLPTR=SQLIND(I);
         SELECT(SQLTYPE(I));
           WHEN(448,449,452,453) DO; /* IT IS CHAR OR VARCHAR */
             J=2; /* TYPE=CHAR */
             K=COLLEN; /* LENGTH */
             END;
           WHEN(480,481) DO; /* IT IS FLOAT */
             J=3; /* TYPE=ZONED */
             K=20; /* LENGTH */
             END;
           WHEN(484,485) DO; /* IT IS DECIMAL */
             J=3; /* TYPE=ZONED */
             K=SQLLEN(I)/256+1; /* LENGTH */
             END;
           WHEN(496,497) DO; /* IT IS INTEGER */
             J=3; /* TYPE=ZONED */
             K=10; /* LENGTH */
             END;
           WHEN(500,501) DO; /* IT IS SMALL INTEGER */
             J=3; /* TYPE=ZONED */
             K=5; /* LENGTH */
             END;
           OTHERWISE DO; /* UNKNOWN DATA TYPE */
             ERRMSG='UNKNOWN DB2 DATA TYPE='××SQLTYPE(I);
             SIGNAL CONDITION(BADSSE);
             END;
           END; /* SELECT */
         CALL DO_DB2_SUBRTNE_GETRHN; /* GO GET RHNAMESTR ELEMENT */
         RHNTYPE=J;
         RHNLNG,RHNCLNG=K;
         RHNPOS,RHNCPOS=L+1;
         RHNVAR0=I;
         RHNNAME=DO_DB2_SUBRTNE_NAMECK(SQLNAME(I)); /* COLUMN NAME */
         L=L+RHNLNG; /* BUMP TOTAL LENGTH OF BUFFER */
         IF L>BUFLN
           THEN DO;
             MSGDATA='SELECT RESULT TOO LONG FOR RECORD LENGTH';
             SIGNAL CONDITION(BADSSE);
             END;
         END;
       RHUSETR=NULL; /* INITIALIZE ROOT TO NULL */
       DO NODEPTR=RHUSEHD REPEAT NODEPTR->RHNLINK WHILE(NODEPTR^=NULL);
         CALL #ABE053A(RHUSETR,NODEPTR);
         END;
       END;

   /* NOW SET UP THE NEW RECORD IN BUF */
   BUF='';
   RHNAMPTR=RHUSEHD;
   DO I=1 TO SQLD;
     COLPTR=SQLIND(I);
     IF COLIND^=0
       THEN CALL #ABEINS('.',BUFPTR,RHNPOS,RHNLNG);
       ELSE SELECT(SQLTYPE(I));
         WHEN(448,449,452,453) /* IT IS CHAR OR VARCHAR */
           CALL #ABEINS(COLSTR,BUFPTR,RHNPOS,RHNLNG);
         WHEN(480,481) DO; /* IT IS FLOAT */
           FLOAT_PTR=ADDR(COLSTR);
           CALL #ABEINS(CALCPRT(FLOAT),BUFPTR,RHNPOS,RHNLNG);
           END;
         WHEN(484,485) DO; /* IT IS DECIMAL */
           SC=MOD(SQLLEN(I),256); /* SC=SCALE */
           BIGFLOATCH=CONVERT(ADDR(COLSTR),'DECIMAL',COLLEN,SC,'FLOAT',
             8,SC);
           CALL #ABEINS(CALCPRT(BIGFLOAT),BUFPTR,RHNPOS,RHNLNG);
           END;
         WHEN(496,497) DO; /* IT IS INTEGER */
           INTEGER_PTR=ADDR(COLSTR);
           CALL #ABEINS(CALCPRT(INTEGER),BUFPTR,RHNPOS,RHNLNG);
           END;
         WHEN(500,501) DO; /* IT IS SMALL INTEGER */
           SMALLINT_PTR=ADDR(COLSTR);
           CALL #ABEINS(CALCPRT(SMALLINT),BUFPTR,RHNPOS,RHNLNG);
           END;
         OTHERWISE DO; /* UNKNOWN DATA TYPE */
           ERRMSG='UNKNOWN DB2 DATA TYPE='××SQLTYPE(I);
           SIGNAL CONDITION(BADSSE);
           END;
         END; /* SELECT */
     RHNAMPTR=RHNLINK;
     END;

   /* NOW ADD A RECORD TO THE EDITED DATA SET */
   CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,-1,BUF,0);
   RETURN('1'B);
   END DO_DB2_SUBRTNE;

 DO_DB2_SUBRTNE_GETRHN: PROC;
 /**********************************************************************
 *                                                                     *
 * THE SUBROUTINE, WHICH IS NESTED IN SETDB2IN, IS CALLED WHEN         *
 * A NEW RHNAMESTR STRUCTURE IS TO BE ALLOCATED.                       *
 *                                                                     *
 **********************************************************************/
   ALLOCATE RHNAMESTR SET(RHNAMPTR);
   /* NOW QUEUE AT END OF QUEUE */
   RHNLINK=NULL;
   IF RHUSEHD=NULL
     THEN RHUSEHD=RHNAMPTR;
     ELSE LAST->RHNLINK=RHNAMPTR;
   LAST=RHNAMPTR;
   RHNTYPE,RHNPOS,RHNLNG,RHNVAR0,RHNFL,RHNFD,RHNF,RHNJUST=0;
   RHNCPOS,RHNCLNG=0;
   RHNLABEL,RHNFORM,RHNIFORM='';
   END DO_DB2_SUBRTNE_GETRHN;

 DO_DB2_SUBRTNE_NAMECK: PROC(NAME) RETURNS(CHAR(8));
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE WHETHER A GIVEN COLUMN NAME IS VALID.           *
 *                                                                     *
 **********************************************************************/
   DCL NAME CHAR(30) VAR;
   DCL RET CHAR(8);
   DCL ALPHA CHAR(26) STATIC INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
   DCL NUMERIC CHAR(10) STATIC INIT('0123456789');

   RET=NAME;
   IF VERIFY(SUBSTR(RET,1,1),ALPHA)=0
     THEN IF INDEX(RET,' ')=0 × (SUFFIX(RET,' ')+1=INDEX(RET,' '))
       THEN IF VERIFY(SUBSTR(RET,2),ALPHA××NUMERIC××' ')=0
         THEN RETURN(RET);
   EXPNO=EXPNO+1;
   RETURN('EXP'××CALCPRT(EXPNO));
   END DO_DB2_SUBRTNE_NAMECK;

 DO_SAS: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A SAS SUBCOMMAND.                                 *
 *                                                                     *
 **********************************************************************/

   SASCMD='%SAS '××CMDBUF;
   GO=BINDEX(SASCMD,'GO','WORD',1);
   NOGO=BINDEX(SASCMD,'NOGO','WORD',1);
   IF NOGO^=0
     THEN SUBSTR(SASCMD,NOGO,4)='';
   IF RHSASGO & (NOGO=0) & (GO=0)
     THEN DO;
       GO=LENGTH(SASCMD)+2;
       SASCMD=SASCMD××' GO ';
       END;
   PREALC=BINDEX(SASCMD,'PREALC','WORD',1);
   IF PREALC^=0
     THEN DO;
       SUBSTR(SASCMD,PREALC,6)='';
       IF BINDEX(CMDBUF,'DA','WORD',1)=0
         THEN CALL SETLJ('SYSIN'); /* GO SET UP SAS SOURCE INPUT */
       END;
     ELSE DO;
       RHRC=SETUP('LIST','SAS.LIST'); /* GO SET UP LIST DATASET */
       IF RHRC^=0
         THEN RETURN;
       RHRC=SETUP('LOG','SAS.LOG'); /* GO SET UP LOG DATASET */
       IF RHRC^=0
         THEN RETURN;
       SASCMD=SASCMD××' OUTPUT(SAS.LIST) LOG(SAS.LOG)';
       IF BINDEX(CMDBUF,'DA','WORD',1)=0
         THEN DO;
           SASCMD=SASCMD××' DA(LASTJCL.CNTL)';
           CALL SETLJ('LASTJCL'); /* GO SET UP LASTJCL.CNTL */
           IF RHRC^=0
             THEN RETURN;
           END;
       END;
   CALL #STACK(''); /* STACK UP A NULL LINE */
   CALL #DOCMD(SASCMD,HELPSTR);
   I=#CMD('X',RHPTR,RHHDRPT);
   IF LJPTR^=NULL
     THEN I=#CMD('END N',LJPTR,RHHDRPT);
   RHSASGO='1'B; /* SPECIFY GO KEYWORD NEXT TIME */
   IF PREALC=0
     THEN DO;
       LPTR=#RHPLOC('LIST',RHHDRPT);
       I=#CMD('REFRESH',LPTR,RHHDRPT);
       LPTR=#RHPLOC('LOG',RHHDRPT);
       I=#CMD('REFRESH',LPTR,RHHDRPT);
       CALL DOLINES('LIST'); /* GO DO A LINES ON ALL BUT LIST */
       END;
   RHRC=0;
   RETURN;
   END DO_SAS;

 ALC: PROC(NAME,DSNAME);
 /**********************************************************************
 *                                                                     *
 * CALLED TO CHECK FOR THE EXISTENCE OF A DATA SET (SAS.LIST OR        *
 * SAS.LOG) AND TO ALLOCATE A NEW DATA SET IF NECESSARY.               *
 *                                                                     *
 **********************************************************************/
   DCL (NAME,DSNAME) CHAR(*);
   DCL RET BIT(32);
   DCL CTLGDSN CHAR(44);
   DCL CVOL CHAR(6) INIT('SYSRES');
   DCL AREA CHAR(265);
   DCL PREF CHAR(8) VAR;

   PREF=#SYMC(RHHDRPT,RH_SYMTREE,'SYSPREF');
   IF PREF=''
     THEN PREF=#SYMC(RHHDRPT,RH_SYMTREE,'SYSUID');
   CTLGDSN=PREF××'.'××DSNAME;
   CALL SYSCTLG('NAME',RET,CTLGDSN,CVOL,AREA);
   IF RET='0'B
     THEN IF NAME='LIST'
       THEN CALL #DOCMD('FREE DA(SAS.LIST)',HELPSTR);
       ELSE;
     ELSE DO; /* DATA SET DOES NOT EXIST */
       CALL #DOCMD('FREE ATTR(ABEATR)',HELPSTR);
       CALL #DOCMD('ATTRIB ABEATR LR(169) BL(19000) RECFM(V B A)',
         HELPSTR);
       CALL #DOCMD('ALLOC DA('××DSNAME××') NEW US(ABEATR) TR SP(5 1)',
         HELPSTR);
       END;
   END ALC;

 DOLINES: PROC(LIST);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A LINES ON EVERYBODY BUT LIST.                         *
 *                                                                     *
 **********************************************************************/
   DCL LIST CHAR(*);
   DCL (TRH,SAVRH) PTR;
   DCL I FIXED BIN(15,0);
   TRH=NULL;
   DO FOREVER=1 REPEAT FOREVER;
     IF TRH=NULL
       THEN TRH=NXTRHEL;
       ELSE TRH=TRH->RHNXT;
     IF TRH=NULL
       THEN LEAVE;
     IF TRH->RHNAME^=LIST
       THEN IF TRH->RHCST^=0
         THEN DO;
           SAVRH=TRH->RHLST;
           I=#CMD('LINES '××LIST,TRH,RHHDRPT);
           TRH=SAVRH;
           END;
     END;
   END DOLINES;

 SETLJ: PROC(SYSIN);
 /**********************************************************************
 *                                                                     *
 * CALLED IF THE CURRENT DATASET IS TO BE STORED IN LASTJCL.CNTL TO    *
 * BE PASSED TO THE %SAS COMMAND AS THE SOURCE INPUT, E.G.             *
 * "%SAS DA(LASTJCL.CNTL)", OR TO THE DSN/DSNTIAD PROGRAM.             *
 *                                                                     *
 **********************************************************************/
   DCL SYSIN CHAR(*);
   DCL I FIXED BIN(15,0);
   DCL TRH PTR;
   IF SYSIN='SYSIN'
     THEN I=#CMD('ABE '''' OUTFI(SYSIN) NON NAME(@@@LAST)',RHPTR,
       RHHDRPT);
     ELSE I=#CMD('SSE LASTJCL.CNTL NON NAME(@@@LAST)',RHPTR,RHHDRPT);
   IF I^=0 × RHNAME^='@@@LAST'
     THEN DO;
       MSGDATA='ERROR IN ALLOCATE OF LASTJCL.CNTL';
       RHRC = 8;
       RETURN;
       END;
   LJPTR=RHPTR;
   RHPTR=SAVRH; /* RESTORE ORIGINAL RHPTR */
   I=#CMD('DEL',LJPTR,RHHDRPT);
   I=#CMD('COPY @@@LAST',RHPTR,RHHDRPT);

   /* NOW COPY ALL DATABASES OVER IF SAS SUBCOMMAND */
   IF CMDINDX=1 × CMDINDX=2
     THEN DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL);
       IF TRH^=SAVRH & TRH->RHUSEHD^=NULL
         THEN DO;
           IF ^(RHSASGO & (NOGO=0)) × TRH->SAVEFLAG
             THEN DO; /* DATABASE MUST BE COPIED */
               I=#CMD('USE OUT',TRH,RHHDRPT);
               I=#CMD('B V',TRH,RHHDRPT);
               I=#CMD('NL ;;;;',TRH,RHHDRPT);
               I=#CMD('COPY (@@@LAST 0)',TRH,RHHDRPT);
               I=#CMD('B DEL',TRH,RHHDRPT);
               I=#CMD('USE IN',TRH,RHHDRPT);
               END;
           TRH->RHDBSAVE=TRH->SAVEFLAG;
           TRH->SAVEFLAG='0'B;
           END;
       END;

   LJPTR->RHNAME='@@@LAST';
   I=#CMD('SAVE',LJPTR,RHHDRPT);
   END SETLJ;

 SETUP: PROC(NAME,DSNAME) RETURNS(FIXED BIN(15,0));
 /**********************************************************************
 *                                                                     *
 * CALLED TO FIND IF THE SPECIFIED SYMBOLIC NAME IS CURRENTLY BEING    *
 * EDITED.                                                             *
 *                                                                     *
 **********************************************************************/
   DCL (NAME,DSNAME) CHAR(*);
   DCL LPTR PTR;
   DCL I FIXED BIN(15,0);
   LPTR=#RHPLOC(NAME,RHHDRPT);
   IF LPTR=NULL
     THEN DO;
       CALL ALC(NAME,DSNAME); /* GO ALLOCATE IF NECESSARY */
       I=#CMD('SSE '××DSNAME××' NON SUPPORT NAME('××NAME××')',
         RHPTR,RHHDRPT);
       RHPTR=SAVRH; /* RESTORE ORIGINAL RHPTR */
       LPTR=#RHPLOC(NAME,RHHDRPT);
       IF LPTR=NULL
         THEN DO;
           MSGDATA='PROBLEM IN EDITING '××DSNAME;
           RETURN(8);
           END;
       IF CMDINDX=1 × CMDINDX=2
         THEN IF GO^=0 & NAME='LIST'
           THEN CALL #DOCMD('ALLOC FI(FT12F001) DA(SAS.LIST) MOD REUSE',
             HELPSTR);
           ELSE;
         ELSE CALL #DOCMD('ALLOC FI(SYSPRINT) DA(DSN.LIST) REUSE',
             HELPSTR);
       END;
   I=#CMD('DEL',LPTR,RHHDRPT);
   I=#CMD('SAVE',LPTR,RHHDRPT); /* CLEAN OUT DATA SET */
   RETURN(0);
   END SETUP;


   END ABE055;
