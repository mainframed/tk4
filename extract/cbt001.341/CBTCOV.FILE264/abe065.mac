 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE065 - COLADJ SUBCOMMAND */
 /* 1        2 */
   %INCLUDE ABESUB;
 ABESUB(ABE065) PARS(00000) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL SETCAPS ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));

   DCL KEYTABLE(5) CHAR(80) VAR STATIC INIT(
     'LEFT','RIGHT','DECIMAL','UNIFORM','TRUNC');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL (UNIFORMSW,TRUNCSW) FIXED BIN(15,0) INIT(0);
   DCL LRDEC FIXED BIN INIT(1); /* 1=LEFT, 2=RIGHT, 3=DECIMAL */
   DCL LEFT    FIXED BIN STATIC INIT(1);
   DCL RIGHT   FIXED BIN STATIC INIT(2);
   DCL DECIMAL FIXED BIN STATIC INIT(3);

   DO I=1 TO HBOUND(PARY,1) WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
     SELECT(INDX);
       WHEN(1,2,3) LRDEC=INDX; /* LEFT,RIGHT,DECIMAL */
       WHEN(4) UNIFORMSW=1; /* UNIFORM */
       WHEN(5) TRUNCSW=1; /* TRUNC */
       OTHERWISE DO;
         MSGDATA='INVALID OPERAND = '××PARY(I);
         RHRC=8;
         RETURN;
         END;
       END; /* SELECT */
     END;

   /* FIRST FIND OUT HOW MANY COLUMNS THERE WILL BE */
   NCOLS=0;
   LEFT_LEN=0;
   RIGHT_LEN,TOTAL_LEN,DECIMAL_FOUND=0;
   DO FOREVER=1 REPEAT FOREVER;
     CALL #ABELSP(RHHDRPT,LRNPTR);
     IF LRN_STRUCTURE.LRN_BUFP=NULL
       THEN LEAVE;
     NCOLS=MAX(NCOLS,COUNT_COLS(LEFT_LEN,RIGHT_LEN,TOTAL_LEN,
       DECIMAL_FOUND));
     END;
   IF NCOLS=0 × TOTAL_LEN=0
     THEN DO;
       MSGDATA='NO COLUMNS TO FORMAT';
       RHRC=4;
       RETURN;
       END;
   IF LRDEC=DECIMAL
     THEN USE_LEN=LEFT_LEN+RIGHT_LEN;
     ELSE USE_LEN=TOTAL_LEN;

 BEGIN;
   DCL 1 COLS(NCOLS),
     2 COL_LEFT_LEN FIXED BIN,
     2 COL_RIGHT_LEN FIXED BIN,
     2 COL_TOTAL_LEN FIXED BIN,
     2 COL_USE_LEN FIXED BIN,
     2 COL_DECIMAL_FOUND FIXED BIN;

   IF UNIFORMSW=1
     THEN DO;
       COL_LEFT_LEN(*)=LEFT_LEN;
       COL_RIGHT_LEN(*)=RIGHT_LEN;
       COL_TOTAL_LEN(*)=TOTAL_LEN;
       COL_USE_LEN(*)=USE_LEN;
       COL_DECIMAL_FOUND=DECIMAL_FOUND;
       END;
     ELSE DO;
       COL_LEFT_LEN(*),COL_RIGHT_LEN(*),COL_TOTAL_LEN(*),COL_USE_LEN(*),
         COL_DECIMAL_FOUND(*)=0;
       DO FOREVER=1 REPEAT FOREVER;
         CALL #ABELSP(RHHDRPT,LRNPTR);
         IF LRN_STRUCTURE.LRN_BUFP=NULL
           THEN LEAVE;
         CALL COUNT_COLS_SUB(COLS);
         END;
       DO I=1 TO NCOLS;
         IF LRDEC=DECIMAL
           THEN IF COL_DECIMAL_FOUND(I)=1
             THEN COL_USE_LEN(I)=COL_LEFT_LEN(I)+COL_RIGHT_LEN(I);
             ELSE COL_USE_LEN(I)=COL_LEFT_LEN(I);
           ELSE COL_USE_LEN(I)=COL_TOTAL_LEN(I);
         END;
       END;
   LENGTH_NEEDED=0;
   DO I=1 TO NCOLS;
     LENGTH_NEEDED=LENGTH_NEEDED+COL_USE_LEN(I)+1;
     END;
   IF LENGTH_NEEDED>BUFLN-RH_OFF+1 & TRUNCSW=0
     THEN DO;
       MSGDATA='COLADJ WILL CAUSE TRUNCATION';
       RHRC=8;
       END;
     ELSE DO FOREVER=1 REPEAT FOREVER;
       CALL #ABELSP(RHHDRPT,LRNPTR);
       IF LRN_STRUCTURE.LRN_BUFP=NULL
         THEN LEAVE;
       CALL FORMAT_COLS(COLS);
       END;
   END; /* BEGIN */

 COUNT_COLS: PROC(LEFT_LEN,RIGHT_LEN,TOTAL_LEN,DECIMAL_FOUND)
   RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * CALLED TO FIND OUT HOW MANY ENTITIES THERE ARE IN THE CURRENT       *
 * LSPBUF.  AN ENTITY IS A NONBLANK STRING SEPARATED FROM ITS          *
 * NEIGHBORING ENTITIES BY ONE OR MORE BLANKS.                         *
 *                                                                     *
 * LEFT_LEN WILL BE SET TO THE MAXIMUM OF LEFT_LEN AT ENTRY AND THE    *
 * MAXIMUM NUMBER OF POSITIONS TO THE RIGHT OF THE DECIMAL POINT IN    *
 * ANY ENTITY ENCOUNTERED (IF NO DECIMAL IS FOUND, IT WILL BE ASSUMED  *
 * TO THE RIGHT OF THE ENTITY).                                        *
 *                                                                     *
 * RIGHT_LEN WILL BE SET TO THE MAXIMUM OF RIGHT_LEN AT ENTRY AND THE  *
 * MAXIMUM NUMBER OF POSITIONS TO THE RIGHT OF THE DECIMAL POINT IN    *
 * ANY ENTITY ENCOUNTERED, PLUS ONE FOR THE DECIMAL POINT ITSELF.      *
 *                                                                     *
 * TOTAL_LEN WILL BE SET TO THE MAXIMUM OF TOTAL_LEN AT ENTRY AND THE  *
 * MAXIMUM NUMBER OF POSITIONS IN ANY ENTITY ENCOUNTERED.              *
 *                                                                     *
 * DECIMAL_FOUND WILL BE SET TO 1 IF A DECIMAL IS LOCATED.             *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT_LEN,RIGHT_LEN,TOTAL_LEN,DECIMAL_FOUND) FIXED BIN;
   DCL (I,J,K,RET) FIXED BIN;

   IF LSPBUF=''
     THEN RETURN(0);
   I,RET=0;
   DO FOREVER=1 REPEAT FOREVER;
     IF I>=LENGTH(LSPBUF)
       THEN LEAVE;
     DO I=I+1 REPEAT I+1;
       IF I>LENGTH(LSPBUF)
         THEN LEAVE;
       IF SUBSTR(LSPBUF,I,1)^=' '
         THEN LEAVE;
       END;
     IF I>LENGTH(LSPBUF)
       THEN LEAVE;
     RET=RET+1;
     J=I; /* SAVE START OF ENTITY */
     K=0; /* K WILL MARK DECIMAL POINT POSITION */
     DO I=I+1 REPEAT I+1;
       IF I>LENGTH(LSPBUF)
         THEN LEAVE;
       IF SUBSTR(LSPBUF,I,1)='.'
         THEN DO;
           K=I;
           DECIMAL_FOUND=1;
           END;
         ELSE IF SUBSTR(LSPBUF,I,1)=' '
           THEN LEAVE;
       END;
     IF K=0
       THEN K=I;
     LEFT_LEN=MAX(LEFT_LEN,K-J);
     RIGHT_LEN=MAX(RIGHT_LEN,I-K+1);
     TOTAL_LEN=MAX(TOTAL_LEN,I-J+1);
     END;
   RETURN(RET);
   END COUNT_COLS;

 COUNT_COLS_SUB: PROC(COLS);
 /**********************************************************************
 *                                                                     *
 * CALLED DURING NON-UNIFORM FORMATTING TO DETERMINE THE FORMATTING    *
 * PARAMETERS FOR EACH COLUMN.                                         *
 *                                                                     *
 * LEFT_LEN WILL BE SET TO THE MAXIMUM OF LEFT_LEN AT ENTRY AND THE    *
 * MAXIMUM NUMBER OF POSITIONS TO THE RIGHT OF THE DECIMAL POINT IN    *
 * ANY ENTITY ENCOUNTERED (IF NO DECIMAL IS FOUND, IT WILL BE ASSUMED  *
 * TO THE RIGHT OF THE ENTITY).                                        *
 *                                                                     *
 * RIGHT_LEN WILL BE SET TO THE MAXIMUM OF RIGHT_LEN AT ENTRY AND THE  *
 * MAXIMUM NUMBER OF POSITIONS TO THE RIGHT OF THE DECIMAL POINT IN    *
 * ANY ENTITY ENCOUNTERED, PLUS ONE FOR THE DECIMAL POINT ITSELF.      *
 *                                                                     *
 * TOTAL_LEN WILL BE SET TO THE MAXIMUM OF TOTAL_LEN AT ENTRY AND THE  *
 * MAXIMUM NUMBER OF POSITIONS IN ANY ENTITY ENCOUNTERED.              *
 *                                                                     *
 * DECIMAL_FOUND WILL BE SET TO 1 IF A DECIMAL IS LOCATED.             *
 *                                                                     *
 **********************************************************************/
   DCL 1 COLS(*),
     2 COL_LEFT_LEN FIXED BIN,
     2 COL_RIGHT_LEN FIXED BIN,
     2 COL_TOTAL_LEN FIXED BIN,
     2 COL_USE_LEN FIXED BIN,
     2 COL_DECIMAL_FOUND FIXED BIN;
   DCL (COL,I,J,K,RET) FIXED BIN;

   IF LSPBUF=''
     THEN RETURN;
   I,COL=0;
   DO FOREVER=1 REPEAT FOREVER;
     IF I>=LENGTH(LSPBUF)
       THEN LEAVE;
     DO I=I+1 REPEAT I+1;
       IF I>LENGTH(LSPBUF)
         THEN LEAVE;
       IF SUBSTR(LSPBUF,I,1)^=' '
         THEN LEAVE;
       END;
     IF I>LENGTH(LSPBUF)
       THEN LEAVE;
     COL=COL+1;
     J=I; /* SAVE START OF ENTITY */
     K=0; /* K WILL MARK DECIMAL POINT POSITION */
     DO I=I+1 REPEAT I+1;
       IF I>LENGTH(LSPBUF)
         THEN LEAVE;
       IF SUBSTR(LSPBUF,I,1)='.'
         THEN DO;
           K=I;
           COL_DECIMAL_FOUND(COL)=1;
           END;
       IF SUBSTR(LSPBUF,I,1)=' '
         THEN LEAVE;
       END;
     IF K=0
       THEN K=I;
     COL_LEFT_LEN(COL)=MAX(COL_LEFT_LEN(COL),K-J);
     COL_RIGHT_LEN(COL)=MAX(COL_RIGHT_LEN(COL),I-K);
     COL_TOTAL_LEN(COL)=MAX(COL_TOTAL_LEN(COL),I-J);
     END;
   END COUNT_COLS_SUB;

 FORMAT_COLS: PROC(COLS);
 /**********************************************************************
 *                                                                     *
 * CALLED TO FORMAT THE NEW COLUMNS WITHIN LSPBUF.                     *
 *                                                                     *
 **********************************************************************/
   DCL 1 COLS(*),
     2 COL_LEFT_LEN FIXED BIN,
     2 COL_RIGHT_LEN FIXED BIN,
     2 COL_TOTAL_LEN FIXED BIN,
     2 COL_USE_LEN FIXED BIN,
     2 COL_DECIMAL_FOUND FIXED BIN;
   DCL (COL,I,J,K,L) FIXED BIN;

   IF LSPBUF=''
     THEN RETURN;
   I,COL=0;
   BUF='';
   DO FOREVER=1 REPEAT FOREVER;
     IF LSPBUF=''
       THEN LEAVE;
     L=LENGTH(BUF); /* SAVE OLD LENGTH(BUF) */
     COL=COL+1;
     IF COL>NCOLS
       THEN SIGNAL ERROR; /* SOMEBODY GOOFED */
     LSPBUF=SUBSTR(LSPBUF,PREFIX(LSPBUF,' ')); /* LEADING BLANKS */
     I=INDEX(LSPBUF,' '); /* FIND END OF ENTITY */
     IF I=0
       THEN I=LENGTH(LSPBUF)+1;
     SELECT(LRDEC);
       WHEN(LEFT)
         BUF=BUF××SUBSTR(LSPBUF,1,I-1);
       WHEN(RIGHT) DO;
         K=COL_USE_LEN(COL)-I+1; /* NUMBER OF BLANKS TO FILL */
         IF K>0
           THEN BUF=BUF××REPEAT(' ',K-1);
         BUF=BUF××SUBSTR(LSPBUF,1,I-1);
         END;
       OTHERWISE DO; /* DECIMAL */
         J=INDEX(LSPBUF,'.'); /* FIX DECIMAL POINT LOCATION */
         IF J=0 × J>I
           THEN J=I;
         K=COL_LEFT_LEN(COL)-J+1; /* NUMBER BLANKS TO FILL */
         IF K>0
           THEN BUF=BUF××REPEAT(' ',K-1);
         BUF=BUF××SUBSTR(LSPBUF,1,I-1);
         END;
       END; /* SELECT */
     IF I>LENGTH(LSPBUF)
       THEN LSPBUF='';
       ELSE LSPBUF=SUBSTR(LSPBUF,I);
     K=COL_USE_LEN(COL)-(LENGTH(BUF)-L)+1; /* NUMBER BLANKS TO FILL */
     IF K>0
       THEN BUF=BUF××REPEAT(' ',K-1);
     END;
   LSPBUF=BUF;
   END FORMAT_COLS;

   END ABE065;
