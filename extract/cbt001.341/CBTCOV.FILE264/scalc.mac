 GDDMSAM: PROC OPTIONS(MAIN);
 /**********************************************************************
 *                                                                     *
 * GDDMSAM USES GDDM TO IMPLEMENT A CALCULATOR FUNCTION WHICH TAKES    *
 * ADVANTAGE OF THE FULL-SCREEN CAPABILITIES OF THE 3270 TERMINAL.     *
 *                                                                     *
 **********************************************************************/

   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));

   /* FOLLOWING ARE DCLS FOR GDDM AND SCREEN MGT */
   %INCLUDE ADMUPLNB;
   DCL N_FIELDS FIXED BIN(31,0) STATIC INIT(62); /* # DISPLAY FIELDS */
   DCL COUNT FIXED BIN(31,0) STATIC INIT(13); /* # ATTRIBUTES/FIELD */
   DCL FLDARY(806) FIXED BIN(31,0) INIT((806)0);

   /* FOLLOWING ARE DCLS FOR CALC FUNCTION */
   % INCLUDE @DCL;
   @DCL (OPERANDS,A) TYPE(CHARACTER) MAX(8);
   DCL PLIXOPT CHAR(80) VAR INIT('ISA(300K) ') STATIC EXT;
   DCL NAMECON CHAR(26) VAR STATIC INIT('ABCDEFGHIJKLMNOPQRST');
   DCL CMDDATA CHAR(256) VAR;
   DCL CALCEVA ENTRY;
   DCL SETCAPS ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL 1 TOKEN BASED(TOKPTR),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL FTABLE(20) DEC FLOAT(16) INIT((20)0); /* EVALUATION RESULTS */
   DCL ETABLE(20) CHAR(80) VAR INIT((20)(1)' '); /* EXPRESSIONS */
   DCL RESULT(20) CHAR(23) VAR INIT((20)(1)' '); /* CHAR RESULTS */
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) BASED(ADDR(VALUE));

   /* HOUSEKEEPING */
   VALUE=1;
   CALL OPERANDS_ASSIGN('STOP',VALCH); /* INITIALIZE STOP=1 */
   VCNT=HBOUND(ETABLE,1); /* USED IN PROMPT */
   CALL FSINIT;       /* INITIALIZE GDDM */
   CALL SETATR; /* GO SET FIELD ATTRIBUTES IN FIELD ARRAY */

   /* MAINLINE */
   CMDDATA='CALC';
   CALL CALCEVA(PROMPT,WRITE,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);

   /* CLEANUP */
   CALL FSTERM;  /* TERMINATE GDDM */
   RETURN;

 GET_OPERAND: PROC(PRMPTR) RETURNS(FLOAT DEC(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) BASED(ADDR(VALUE));
   IF OPERANDS_NULL(PRMPTR->TOKSTR)
     THEN VALUE=0;
     ELSE VALCH=OPERANDS_REFER(PRMPTR->TOKSTR);
   RETURN(VALUE);
   END GET_OPERAND;

 GET_OPERAND_CHAR: PROC(PRMPTR) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) BASED(ADDR(VALUE));
   IF OPERANDS_NULL(PRMPTR->TOKSTR)
     THEN VALUE=0;
     ELSE VALCH=OPERANDS_REFER(PRMPTR->TOKSTR);
   RETURN(CALCPRT(VALUE));
   END GET_OPERAND_CHAR;

 ODD_FUNCTION: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 *                                                                     *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   MSG='UNIDENTIFIED FUNCTION = '××PRMSTR;
   SIGNAL CONDITION(BADEXP);
   RETURN(0);
   END ODD_FUNCTION;

 PROMPT: PROC RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROMPT FOR INPUT FROM THE TERMINAL.                       *
 *                                                                     *
 **********************************************************************/
   IF VCNT=HBOUND(ETABLE,1)
     THEN CALL PROMPT_DISPLAY; /* TIME TO DISPLAY RESULTS */
   VCNT=VCNT+1;
   IF ETABLE(VCNT)=''
     THEN RETURN(SUBSTR(NAMECON,VCNT,1)××'#0');
     ELSE RETURN(SUBSTR(NAMECON,VCNT,1)××'#'××ETABLE(VCNT));
   END PROMPT;

 PROMPT_DISPLAY: PROC RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DISPLAY RESULTS AT THE TERMINAL                           *
 *                                                                     *
 **********************************************************************/
   DCL (ATTYPE,ATTVAL,COUNT,I,ID) FIXED BIN(31,0) INIT(0);
   DCL VAL DEC FLOAT(16),
       VALCH CHAR(8) BASED(ADDR(VAL));
   DCL CUREXP CHAR(52);
   DCL CURVAL CHAR(23);
   DCL SUM DEC FLOAT(16) INIT(0);

   VCNT=0;
   VALCH=OPERANDS_REFER('STOP');
   IF VAL^=1
     THEN RETURN; /* LOOP UNTIL STOP=1 */

   /* FIRST SET EXPRESSIONS ON SCREEN */
   LEN=LENGTH(CUREXP);
   DO ID=3 TO 60 BY 3;
     CUREXP=ETABLE(ID/3);
     CALL ASCPUT(ID,LEN,CUREXP);
     END;

   /* NOW SET RESULTS ON SCREEN */
   LEN=LENGTH(CURVAL);
   DO ID=4 TO 61 BY 3;
     CURVAL='='××RESULT(ID/3);
     RESULT(ID/3)='**********';
     CALL ASCPUT(ID,LEN,CURVAL);
     END;

   /* NOW SET SUM ON SCREEN */
   DO I=1 TO HBOUND(FTABLE,1);
     SUM=SUM+FTABLE(I);
     END;
   CURVAL='SUM='××CALCPRT(SUM);
   CALL ASCPUT(62,LEN,CURVAL);

   /* NOW SET CURSOR AND READ FROM SCREEN */
   ID=3;
   CALL ASFCUR(ID,FLDARY((ID-1)*COUNT+2),FLDARY((ID-1)*COUNT+3));
   CALL ASREAD(ATTYPE,ATTVAL,COUNT);
   IF ATTYPE^=0
     THEN SIGNAL FINISH; /* OTHER THAN ENTER KEY USED. */

   /* NOW READ IN ALL EXPRESSIONS FROM SCREEN */
   LEN=LENGTH(CUREXP);
   DO ID=3 TO 60 BY 3;
     CALL ASCGET(ID,LEN,CUREXP);
     CALL SETCAPS(CUREXP);
     ETABLE(ID/3)=CUREXP;
     END;
   VAL=1;
   CALL OPERANDS_ASSIGN('STOP',VALCH); /* RESET STOP=1 */
   END PROMPT_DISPLAY;

 PUT_OPERAND: PROC(PRMPTR,VALUE,MSG);
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET THE VALUE FOR AN OPERAND.                             *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) BASED(ADDR(VALUE));
   DCL MSG CHAR(80) VAR;
   DCL I FIXED BIN;
   CALL OPERANDS_ASSIGN(PRMPTR->TOKSTR,VALCH);
   IF LENGTH(PRMPTR->TOKSTR)=1
     THEN DO;
       I=INDEX(NAMECON,PRMPTR->TOKSTR);
       IF I^=0
         THEN DO;
           FTABLE(I)=VALUE;
           RESULT(I)=CALCPRT(VALUE);
           END;
       END;
   END PUT_OPERAND;

 SETATR: PROC;
 /**********************************************************************
 *                                                                     *
 * SETATR IS CALLED AT STARTUP TIME TO SET THE PROPER ATTRIBUTES IN    *
 * FLDARY FOR ALL FIELDS ON THE DISPLAY. ASDFMT WILL BE CALLED TO      *
 * DEFINE ALL FIELDS.                                                  *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,ROW) FIXED BIN(31,0);

   /* SET FIELD IDS */
   DO I=1 TO N_FIELDS;
     FLDARY((I-1)*COUNT+1)=I;
     END;

   /* SET NUMBER OF ROWS (DEPTH) TO 1 FOR ALL FIELDS */
   /* ALSO SET OUTPUT BLANK-TO-NULL CONVERSION FOR ALL FIELDS */
   /* ALSO SET INPUT  NULL-TO-BLANK CONVERSION FOR ALL FIELDS */
   /* ALSO SET INTENSITY */
   DO I=1 TO N_FIELDS;
     FLDARY((I-1)*COUNT+4)=1;  /* DEPTH=1              */
     FLDARY((I-1)*COUNT+7)=1;  /* INTENSITY=NORMAL     */
     FLDARY((I-1)*COUNT+12)=1; /* OUTPUT BLANK-TO-NULL */
     FLDARY((I-1)*COUNT+13)=1; /* INPUT  NULL-TO-BLANK */
     END;

   /* SET FIELD ATTRIBUTES FOR TITLE LINE */
   FLDARY(2)=1;  /* ROW OF TITLE */
   FLDARY(3)=1;  /* COL OF TITLE */
   FLDARY(5)=79; /* NUMBER OF COLS (WIDTH) OF TITLE */
   FLDARY(6)=2;  /* TYPE=PROTECTED ALPHANUMERIC */

   /* SET FIELD ATTRIBUTES FOR MAIN BODY */
   DO I=2 TO 59 BY 3;
     ROW=FIXED((I+1)/3)+2;
     FLDARY((I-1)*COUNT+2)=ROW;/* SET ROW FIRST FIELD */
     FLDARY((I-1)*COUNT+3)=1;  /* COL=  1 FIRST FIELD */
     FLDARY((I-1)*COUNT+5)=3;  /* COLS= 3 FIRST FIELD */
     FLDARY((I-1)*COUNT+6)=2;  /* TYPE=PROTECTED ALPHANUMERIC */
     FLDARY((I  )*COUNT+2)=ROW;/* SET ROW SECOND FIELD */
     FLDARY((I  )*COUNT+3)=4;  /* COL=  4 SECOND FIELD */
     FLDARY((I  )*COUNT+5)=53; /* COLS=53 SECOND FIELD */
     FLDARY((I  )*COUNT+6)=0;  /* TYPE=UNPROTECTED ALPHANUMERIC */
     FLDARY((I+1)*COUNT+2)=ROW;/* SET ROW THIRD FIELD */
     FLDARY((I+1)*COUNT+3)=57; /* COL= 57 THIRD FIELD */
     FLDARY((I+1)*COUNT+5)=24; /* COLS=24 THIRD FIELD */
     FLDARY((I+1)*COUNT+6)=2;  /* TYPE=PROTECTED ALPHANUMERIC */
     END;

   /* SET FIELD ATTRIBUTES FOR SUM LINE */
   FLDARY((62-1)*COUNT+2)=24; /* ROW  OF SUM TITLE */
   FLDARY((62-1)*COUNT+3)=54; /* COL  OF SUM TITLE */
   FLDARY((62-1)*COUNT+5)=27; /* COLS OF SUM TITLE */
   FLDARY((62-1)*COUNT+6)= 2; /* TYPE=PROTECTED ALPHANUMERIC */

   /* NOW CALL ASDFMT TO DEFINE THE FIELDS TO GDDM */
   CALL ASDFMT(N_FIELDS,COUNT,FLDARY);

   /* NOW SET THE TITLE CONTENTS */
   ID=1;
   LEN=LENGTH(TITLE);
   DCL TITLE CHAR(30) STATIC INIT('FULL-SCREEN DESK CALCULATOR');
   CALL ASCPUT(ID,LEN,TITLE);

   /* NOW SET THE MAIN BODY HEADERS */
   DCL MBHDR CHAR(2);
   LEN=2;
   DO ID=2 TO 59 BY 3;
     MBHDR=SUBSTR(NAMECON,ID/3+1,1)××'#';
     CALL ASCPUT(ID,LEN,MBHDR);
     END;
   END SETATR;

 WRITE:PROC(TMSG);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PRINT OUTPUT AT THE TERMINAL - NULL PROGRAM.              *
 *                                                                     *
 **********************************************************************/
   DCL TMSG CHAR(*) VAR;
   RESULT(VCNT)=TMSG;
   END WRITE;

   END GDDMSAM;
