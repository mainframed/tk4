 BTREE: PROC OPTIONS(MAIN);
 /**********************************************************************
 *                                                                     *
 * THIS SAMPLE PROGRAM WILL DEVELOP A BINARY TREE IN WHICH EACH NODE   *
 * CONTAINS A SINGLE CHARACTER READ IN FROM SYSIN.  ONCE THE TREE      *
 * HAS BEEN BUILT, IT WILL BE FORMATTED AND PRINTED ON SYSPRINT.       *
 *                                                                     *
 **********************************************************************/
   DCL NULL BUILTIN;
   DCL BST PTR;                        /* POINTS TO ROOT OF TREE */
   DCL 1 NODE BASED(NODEPTR),          /* NODE OF TREE */
     2 LCHILD PTR,                     /* LEFT CHILD POINTER */
     2 RCHILD PTR,                     /* RIGHT CHILD POINTER */
     2 DATA CHAR(1);                   /* DATA FOR NODE */
   DCL EOF BIT(1) INIT('0'B);          /* INDICATES ENDFILE ON SYSIN */
   DCL NEXT CHAR(1);                   /* STORES NEXT INPUT CHARACTER */
   DCL DEPTH FIXED BIN INIT(0);       /* DEPTH OF TREE */
   DCL MATRIX(*,*) CHAR(1) CONTROLLED; /* FACILITATES PRINTING */

   /* INITIALIZATION */
   BST=NULL;
   ON ENDFILE(SYSIN) EOF='1'B;
   GET SKIP EDIT(NEXT)(A(1)); /* GET THE FIRST INPUT CHARACTER */

   /* MAIN LOOP */
   DO WHILE(^EOF); /* DO WHILE NOT ENDFILE ON SYSIN */
     ALLOCATE NODE; /* ALLOCATE AND INITIALIZE THE NEW NODE */
     LCHILD,RCHILD=NULL;
     DATA=NEXT;
     CALL INSERT(BST,1); /* NOW INSERT THE NEW NODE IN THE TREE */
     GET SKIP EDIT(NEXT)(A(1)); /* GET THE NEXT CHARACTER */
     END;

   /* NOW FORMAT AND PRINT THE TREE */
   ALLOCATE MATRIX(DEPTH,2**DEPTH); /* ALLOCATE PRINT MATRIX */
   MATRIX(*,*)=' '; /* INITIALIZE PRINT MATRIX TO ZEROS */
   CALL TREE_PRINT(BST,1,HBOUND(MATRIX,2),1); /* FILL IN MATRIX */
   DO I=1 TO HBOUND(MATRIX,1); /* NOW PRINT MATRIX */
     PUT SKIP LIST(STRING(MATRIX(I,*))); /* PRINT ROW */
     END;

   /* NOW PRINT SEARCH COMPARISON STATISTICS */
   CALL STATS(BST);

 INSERT: PROC(PRMPTR,LEVEL) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * INSERT IS CALLED TO INSERT THE NODE POINTED TO BY GLOBAL VARIABLE   *
 * NODEPTR INTO THE TREE POINTED TO BY PARAMETER PRMPTR.               *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL LEVEL FIXED BIN;

   DEPTH=MAX(DEPTH,LEVEL); /* BUMP DEPTH OF TREE IF NECESSARY */
   SELECT;
     WHEN(PRMPTR=NULL)       PRMPTR=NODEPTR; /* TREE IS EMPTY */
     WHEN(DATA=PRMPTR->DATA) FREE NODE; /* ALREADY IN TREE */
     WHEN(DATA>PRMPTR->DATA) CALL INSERT(PRMPTR->RCHILD,LEVEL+1);
     OTHERWISE               CALL INSERT(PRMPTR->LCHILD,LEVEL+1);
     END; /* SELECT */
   END INSERT;

 SEARCH_TREE: PROC(CH,ROOTPTR) RETURNS(FIXED BIN(15,0));
 /**********************************************************************
 *                                                                     *
 * THIS SAMPLE PROGRAM WAS BUILT TO FIND THE NUMBER OF COMPARISONS     *
 * NECESSARY TO SEARCH A BINARY TREE.  IF THE SEARCH IS SUCCESSFUL,    *
 * THE COUNT RETURNED WILL BE POSITIVE, AND IF THE SEARCH IS           *
 * UNSUCCESSFUL, THE COUNT RETURNED WILL BE NEGATIVE.                  *
 *                                                                     *
 **********************************************************************/
   DCL CH CHAR(1);
   DCL ROOTPTR PTR;
   DCL (I,J) FIXED BIN(15,0);

   NODEPTR=ROOTPTR;
   DO I=1 REPEAT I+1 WHILE(NODEPTR^=NULL);
     /* NOTE THAT ALTHOUGH TWO COMPARISONS ARE SHOWN BELOW, I AM ONLY
     COUNTING IT ONCE, SINCE SOME LANGUAGES WOULD ALLOW A SINGLE
     COMPARISON, WITH SUBSEQUENCE FLOW OF CONTROL BASED ON THE
     RESULTING CONDITION CODE */
     IF CH=DATA
       THEN RETURN(I);
     IF CH<DATA
       THEN NODEPTR=LCHILD;
       ELSE NODEPTR=RCHILD;
     END;
   RETURN(-I); /* IT IS UNSUCCESSFUL SEARCH */
   END SEARCH_TREE;

 STATS: PROC(ROOTPTR);
 /**********************************************************************
 *                                                                     *
 * THIS SAMPLE PROGRAM WAS BUILT TO FIND THE AVERAGE COMPARISON        *
 * COUNTS FOR SUCCESSFUL AND UNSUCCESSFUL SEARCHES OF A BINARY TREE.   *
 *                                                                     *
 **********************************************************************/
   DCL ROOTPTR PTR;
   DCL (NULL,ABS) BUILTIN;
   DCL CH CHAR(1);
   DCL (I,J,K) FIXED BIN(15,0);
   DCL 1 COUNTS(2), /* COUNTS FOR SUCCESSES AND FAILURES */
     2 N FIXED BIN(15,0) INIT((2)0),
     2 COMPARISONS FIXED BIN(15,0) INIT((2)0);

   DO I=0 TO 255;
     UNSPEC(CH)=SUBSTR(UNSPEC(I),9,8);
     J=SEARCH_TREE(CH,ROOTPTR); /* GO SEARCH TREE */
     IF J>0
       THEN K=1; /* IT WAS A SUCCESSFUL SEARCH */
       ELSE K=2; /* IS WAS AN UNSUCCESSFUL SEARCH */
     N(K)=N(K)+1;
     COMPARISONS(K)=COMPARISONS(K)+ABS(J);
     END;

   PUT SKIP LIST('AVERAGE NUMBER OF SUCCESSES=',
     FLOAT(COMPARISONS(1))/N(1));
   PUT SKIP LIST('AVERAGE NUMBER OF FAILUES=',
     FLOAT(COMPARISONS(2))/N(2));
   END STATS;

 TREE_PRINT: PROC(PRMPTR,LPOS,RPOS,LEVEL) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PRINT THE BINARY TREE AFTER IT HAS BEEN BUILT.            *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL (LPOS,RPOS,LEVEL,CENTER) FIXED BIN;

   CENTER=LPOS+(RPOS-LPOS)/2; /* POSITION IN PRINT MATRIX */
   IF PRMPTR^=NULL
     THEN DO;
       CALL TREE_PRINT(PRMPTR->LCHILD,LPOS,CENTER,LEVEL+1);
       CALL TREE_PRINT(PRMPTR->RCHILD,CENTER,RPOS,LEVEL+1);
       MATRIX(LEVEL,CENTER)=PRMPTR->DATA; /* STORE CHAR IN MATRIX */
       END;
   END TREE_PRINT;

   END BTREE;
