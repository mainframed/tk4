 /* FAMPLOT */
 /**********************************************************************
 *                                                                     *
 * USED TO PROCESS A DATA SET CONTAINING A GRAPHICS BIT MAP.  THIS     *
 * MODULE WILL BE USED WHENEVER THE ABE (SUB)COMMAND IS ENTERED        *
 * CONTAINING THE KEYWORD PLOT, OR THE KEYWORD SPECIFICATION           *
 * FAM(FAMPLOT).                                                       *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(FAMPLOT) PARMS(RHHDRPT,RHPTR,PASSPTR,CODE) RETURNS(PTR)
   RENT(NO) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;
   DCL 1 SAVE_STRUCTURE BASED(SAVEPTR),
   /********************************************************************
   *                                                                   *
   * THIS STRUCTURE DESCRIBES THE CONTENTS OF THE FIRST RECORD         *
   * WRITTEN TO THE SAVE FILE WHEN THE SAVE OPCODE IS RECEIVED.        *
   *                                                                   *
   ********************************************************************/
     2 DSSIZE DEC FLOAT(6),
     2 HORZNT BIT(32),
     2 IMAGE BIT(32),
     2 LINEWT FIXED BIN(31,0),
     2 PLSTPX DEC FLOAT(6),
     2 PLSTPY DEC FLOAT(6),
     2 SX DEC FLOAT(6),
     2 SY DEC FLOAT(6),
     2 TIMAGE(4,4) DEC FLOAT(6),
     2 XMAX DEC FLOAT(6),
     2 YMAX DEC FLOAT(6),
     2 ZMAX DEC FLOAT(6),
     2 PLXDPI FIXED BIN(31,0),
     2 PLYDPI FIXED BIN(31,0),
     2 PLMAXX FIXED BIN(31,0),
     2 PLMAXY FIXED BIN(31,0),
     2 MAXBTX FIXED BIN(31,0),
     2 MAXBTY FIXED BIN(31,0),
     2 CURPEN CHAR(1),
     2 PENARY(9) CHAR(1),
     2 BITMAP_ELSIZE FIXED BIN(15,0);

   DCL PASSPTR PTR;
   DCL CODE FIXED BIN(15,0);
   DFT RANGE(*) STATIC;
   DCL 1 PARSSTR BASED(PASSPTR),
   %INCLUDE ABEFAM;

   DCL (DIM,PLIRETV,STORAGE) BUILTIN;
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL INITSW BIT(1) INIT('0'B);
   DCL ELCNT FIXED BIN(15,0);

   ELCNT=HBOUND(BITMAP_OVERLAY,1); /* #RECORDS TO PROCESS */
   IF CODE^=0
     THEN IF ^INITSW
       THEN CALL DO_INIT;
   SELECT(CODE);
     WHEN(0,6) RETURN(DO_INIT);        /* INITIALIZATION TIME,REFRESH */
     WHEN(1) RETURN(DO_SUCC(PASSPTR)); /* GET NEXT (#SUCC)    */
     WHEN(2) RETURN(DO_PRED(PASSPTR)); /* GET PRIOR (#PRED)   */
     WHEN(3) RETURN(DO_SAVE);          /* DO A SAVE           */
     WHEN(4) RETURN(DO_END);           /* DO END PROCESSING   */
     WHEN(5) RETURN(NULL);             /* DO DISPLAY          */
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */

 DO_END: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=4, I.E. END TIME.                                  *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;

   RETURN(NULL);
   END DO_END;

 DO_INIT: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=0, I.E. INITIALIZATION TIME.                       *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (I,X,Y) FIXED BIN(31,0);
   DCL EOFSW BIT(1) INIT('0'B);
   DCL OPCODE CHAR(4) VAR INIT('INIT');
   DCL SAVRH PTR;

   INITSW='1'B;
   IF RHPLOT79=NULL
     THEN DO;
       SAVRH=RHPTR;
       I=#CMD('GR',SAVRH,RHHDRPT);
       END;
   DO WHILE(NXTHDR^=HDPTR);
     CALL #PUTSLOT(RHPTR,RHHDRPT,NXTHDR);
     END;
   BUF='';
   CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,1,BUF,0);
   IF INDDN^=NULL
     THEN DO;
       INDDN->ALCBUF='';
       CALL #READ(RHPTR,RHHDRPT,INDDN,OPCODE,EOFSW);
       IF ^EOFSW
         THEN DO;
           SAVEPTR=PTROUT(PTRIN(ADDR(INDDN->ALCBUF))+2);
           DDI01=SAVE_STRUCTURE, BY NAME;
           DO Y=1 TO ELCNT;
             CALL #READ(RHPTR,RHHDRPT,INDDN,OPCODE,EOFSW);
             IF EOFSW
               THEN LEAVE;
             BITMAP_OVERLAY(Y)=INDDN->ALCBUF;
             END;
           RECSEQ=Y-1;
           RECSTR=INDDN->ALCBUF;
           END;
       END;
     ELSE RECSTR='';
   CURSEQ=RECSEQ;
   RETURN(RECPTR);
   END DO_INIT;

 DO_PRED: PROC(CUR) RETURNS(PTR) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=2, I.E. GET-PRIOR-SEQUENTIAL RECORD.               *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL CUR PTR;
   DCL (X,Y) FIXED BIN;

   CALL PUT_LINE(CUR); /* GO STORE LINE BACK IN PIXEL MAP */
   CALL GET_BUFFER; /* CHECK FOR SINGLE RECORD */
   SELECT;
     WHEN(RECPTR=HDPTR)  Y=ELCNT;
     WHEN(RECSEQ>ELCNT) Y=ELCNT;
     OTHERWISE DO;
       Y=RECSEQ-1;
       IF Y<1
         THEN Y=ELCNT;
       END;
     END; /* SELECT */
   RECSEQ=Y;
   CALL GET_LINE; /* GO GET NEXT LINE FROM PIXEL MAP */
   RETURN(NXTHDR);
   END DO_PRED;

 DO_SAVE: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=3, I.E. SAVE TIME.                                 *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL OPCODE CHAR(8) VAR INIT('INIT');
   DCL (X,Y) FIXED BIN;

   CALL PUT_LINE(RECPTR); /* GO STORE LINE BACK IN PIXEL MAP */
   RECSTR=REPEAT(' ',STORAGE(SAVE_STRUCTURE)-1);
   SAVEPTR=PTROUT(PTRIN(ADDR(RECPTR->RECSTR))+2);
   SAVE_STRUCTURE=DDI01, BY NAME;
   CALL #WRITE(RHPTR,RHHDRPT,OUTDDN,OPCODE,RECPTR);
   OPCODE='NXT';
   DO RECSEQ=1 TO ELCNT;
     CALL GET_LINE; /* GET NEXT LINE OF PIXELS */
     CALL #WRITE(RHPTR,RHHDRPT,OUTDDN,OPCODE,RECPTR);
     END;
   OPCODE='LAST';
   CALL #WRITE(RHPTR,RHHDRPT,OUTDDN,OPCODE,NULL);
   RETURN(NULL);
   END DO_SAVE;

 DO_SUCC: PROC(CUR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=1, I.E. GET-NEXT-SEQUENTIAL RECORD.                *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL CUR PTR;
   DCL (X,Y) FIXED BIN;

   CALL PUT_LINE(CUR); /* GO STORE LINE BACK IN PIXEL MAP */
   CALL GET_BUFFER; /* CHECK FOR AND SET UP RECPTR, IF NECESSARY */
   SELECT;
     WHEN(RECPTR=HDPTR)  Y=1;
     WHEN(RECSEQ>ELCNT) Y=1;
     OTHERWISE DO;
       Y=RECSEQ+1;
       IF Y>ELCNT × Y<1
         THEN Y=1;
       END;
     END; /* SELECT */
   RECSEQ=Y;
   CALL GET_LINE; /* GO GET NEXT LINE FROM PIXEL MAP */
   RETURN(NXTHDR);
   END DO_SUCC;

 GET_BUFFER: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO CHECK FOR A SINGLE RECORD POINTED TO BY RECHDR.  IF NONE, *
 * ONE WILL BE ALLOCATED.                                              *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (X,Y) FIXED BIN(31,0);

   DO WHILE(NXTHDR^=LSTHDR);
     CALL #PUTSLOT(RHPTR,RHHDRPT,NXTHDR);
     END;
   IF NXTHDR=HDPTR
     THEN DO;
       BUF='';
       CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,1,BUF,0);
       RECSEQ=ELCNT+1;
       END;
   END GET_BUFFER;

 GET_LINE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO GET A NEW LINE FROM THE PIXEL MAP.        *
 * RECSEQ SHOULD HAVE BEEN SET TO THE Y INDEX VALUE DESIRED.           *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (X,Y) FIXED BIN(31,0);

   RECSTR=BITMAP_OVERLAY(RECSEQ);
   END GET_LINE;

 PUT_LINE: PROC(CUR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO STORE THE CURRENT LINE BACK IN THE PIXEL MAP.             *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL CUR PTR;
   DCL (I,X,Y) FIXED BIN(31,0);

   IF CUR^=HDPTR
     THEN IF CUR->RECSEQ>=1 & CUR->RECSEQ<=ELCNT
       THEN DO;
         Y=CUR->RECSEQ;
         BITMAP_OVERLAY(CUR->RECSEQ)=CUR->RECSTR;
         END;
   END PUT_LINE;

   END FAMPLOT;
