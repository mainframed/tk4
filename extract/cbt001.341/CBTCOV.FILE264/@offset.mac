 DO;
    DCL @OFFSET#(0:32767) CHARACTER BASED;
    %@OFFSET: PROCEDURE(POINTER,OFFSET) RETURNS(CHARACTER);
 /*
0*$.HE GENERALIZED SUBROUTINES - @OFFSET
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE GENERATE A POINTER TO AN OFFSET FROM A LOCATION
0*$.PL 58
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$12/07/78
0*$AUTHOR:  P. DIXON
0*$SOURCE MODULE NAME:  @OFFSET
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$IT IS SOMETIMES USEFUL IN PL/I TO INCREMENT POINTER VARIABLES.
0*$THIS CANNOT BE DONE DIRECTLY, SINCE ARITHMETIC ON POINTERS
0*$IS NOT SUPPORTED.  @OFFSET CAN BE USED FOR THIS PURPOSE.  THE
0*$VALUE RETURNED BY @OFFSET(POINTER,INCREMENT) IS A POINTER WITH
0*$THE VALUE POINTER+INCREMENT.
0*$THE INCREMENT CAN BE A NONNEGATIVE INTEGER OR AN INTEGER
0*$VARIABLE.  AS AN EXAMPLE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$P = @OFFSET(P,4);     (P = P + 4)
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$SINCE THE VALUE RETURNED BY @OFFSET CAN BE USED AS THE BASE
0*$FOR A BASED VARIABLE, @OFFSET PROVIDES AN EASY WAY TO ACCESS
0*$INFORMATION LOCATED AT KNOWN OFFSETS IN CONTROL BLOCKS.  TO
0*$DETERMINE, FOR EXAMPLE, THE RECORD LENGTH AND BLOCK SIZE OF
0*$A FILE:
0*$.IN 5
0*$.SP 1
0*$.NF
0*$DCL DCB_POINTER POINTER;
0*$DCL F FILE RECORD;
0*$DCL FINDDCB EXTERNAL ENTRY(CHAR(8)) RETURNS(POINTER);
0*$DCL DCBLRECL FIXED BINARY(15)
0*$             BASED( @OFFSET(DCB_POINTER,82) );
0*$DCL DCBBLKSI FIXED BINARY(15)
0*$             BASED( @OFFSET(DCB_POINTER,62) );
0*$OPEN FILE(F);
0*$DCB_POINTER = FINDDCB('F');
0*$PUT LIST(DCBLRECL,DCBBLKSI);
 */
    DCL (POINTER,OFFSET) CHARACTER;
    RETURN('ADDR(' ×× POINTER ×× '->@OFFSET#(' ×× OFFSET ×× '))' );
    %END @OFFSET;
    %DCL @OFFSET ENTRY;
 END;
