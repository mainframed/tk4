 /* RPT251 */
 /* THIS PROGRAM CREATES AN ACTIVITY REPORT BY TERMINAL ID
    BASED ON THE INFORMATION IN THE SMF TYPE 251 RECORDS. */
 RPT251:  PROC(PARM) OPTIONS(MAIN);
         DCL PARM CHAR(100) VAR;
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         % INCLUDE @DCL;
         @DCL (TMARY,A) TYPE(PTR);
         @DCL (LOCATE,A) TYPE(CHARACTER);
         @DCL(ELARY,A,A) TYPE(PTR);
         DCL (ELAPKEY,ELAPKEY2) PIC'999999999';
         DCL LOCCK CHAR(30);
         DCL TABREC CHAR(80);
         UNSPEC(DUMVAL)=UNSPEC(ADDR(LOCATE));
         ON ENDFILE(TABFI) GO TO TABEOJ;
         DO FOREVER=1 REPEAT FOREVER;
           READ FILE(TABFI) INTO(TABREC);
           IF SUBSTR(TABREC,9,4)=' DC ' & SUBSTR(TABREC,26,4)^='FFFF'
             THEN DO;
               ELPTR=ALCEL(SUBSTR(TABREC,26,4));
               LOCATION=SUBSTR(TABREC,42,30);
               CALL LOCATE_ASSIGN(LOCATION,LOCATION);
               END;
           END;
 TABEOJ:
         CLOSE FILE(TABFI);
         DCL TRACE CHAR(8) STATIC INIT('');
         DCL LOTMEK FIXED BIN(31,0) INIT(0);
         DCL HITMEK FIXED BIN(31,0) INIT(8640000);
         DCL LODTEK FIXED DEC(5,0) INIT(0);
         DCL HIDTEK FIXED DEC(5,0) INIT(99999);
         DCL 1 PARSTR UNALIGNED STATIC,
              2 CMDINDX FIXED BIN(15,0),
              2 OPERCK BIT(16),
              2 PARY(16) CHAR(80) VAR,
              2 NUMCKA(1) BIT(16) INIT('0'B),
              2 CMDTAB(1) CHAR(8) VAR INIT('NULL');
         DCL DATEOFF ENTRY(FIXED DEC(5,0),FIXED BIN(15,0))
           RETURNS(FIXED DEC(5,0));
         DCL DUMPSTR ENTRY;
         DCL PARS ENTRY(CHAR(*) VAR,);
         DCL SPARS ENTRY;
         DCL DOW ENTRY(FIXED DEC(5,0))
           RETURNS(FIXED BIN(15,0));
         DCL DOWSTR BIT(7) INIT('0'B);
         DCL KEYVAL CHAR(80) VAR;
         DCL KEYTAB(13) CHAR(20) VAR STATIC INIT(
           'TRACE','HITME','LOTME','HIDTE','LODTE',
           'PRIME','SUN','MON','TUE','WED','THU','FRI','SAT');
         DCL KEYINDX FIXED BIN(15,0);
         DCL KEYLAB(0:13) LABEL;
         IF PARM ^= ''
           THEN DO;
             CALL PARS(PARM,PARSTR);
             DO I = 1 TO 16 WHILE(PARY(I) ^= '');
              CALL SPARS(PARY(I),KEYTAB,KEYVAL,KEYINDX);
              IF I > 1 & I < 6
                   THEN IF VERIFY(KEYVAL,' 0123456789')^=0
                        THEN I = 0;
              GO TO KEYLAB(KEYINDX);
 KEYLAB(0):  /* BAD KEYWORD */
              PUT EDIT('BAD OPERAND IN PARM FIELD = ',PARY(I))
                (A,A) SKIP(1);
              SIGNAL ERROR;
              GO TO ENDCASE;
 KEYLAB(1):  /* TRACE */
              TRACE = KEYVAL;
              GO TO ENDCASE;
 KEYLAB(2):  /* HITME */
              HITMEK = KEYVAL;
              IF HITMEK < 0 × HITMEK > 24
                THEN GO TO KEYLAB(0);
              HITMEK = HITMEK * 360000;
              GO TO ENDCASE;
 KEYLAB(3):  /* LOTME */
              LOTMEK = KEYVAL;
              IF LOTMEK < 0 × LOTMEK > 24
                THEN GO TO KEYLAB(0);
              LOTMEK = LOTMEK * 360000;
              GO TO ENDCASE;
 KEYLAB(4):  /* HIDTE */
              HIDTEK = KEYVAL;
              GO TO ENDCASE;
 KEYLAB(5):  /* LODTE */
              LODTEK = KEYVAL;
              GO TO ENDCASE;
 KEYLAB(6):  /* PRIME */
              DOWSTR = '0111110'B;
              LOTMEK = 8*360000;
              HITMEK = 16*360000;
              GO TO ENDCASE;
 KEYLAB(7):  /* SUN */
 KEYLAB(8):  /* MON */
 KEYLAB(9):  /* TUE */
 KEYLAB(10): /* WED */
 KEYLAB(11): /* THU */
 KEYLAB(12): /* FRI */
 KEYLAB(13): /* SAT */
              SUBSTR(DOWSTR,KEYINDX-6,1) = '1'B;
              GO TO ENDCASE;
 ENDCASE:
              END;
             END;
         IF DOWSTR = '0'B
              THEN DOWSTR = '1111111'B;
         % INCLUDE SMFDEFI;
         % INCLUDE SMFHDR;
         % DCL @APLCNT FIXED;
         % @APLCNT = 4;
              /* @APLCNT = NUMBER OF APPLICATIONS */
         % DCL @APLTOT FIXED;
         % @APLTOT = @APLCNT + 1;
              /* @APLCNT = # APPLICATIONS PLUS OTHER */
         % DCL @APLTOP FIXED;
         % @APLTOP = @APLTOT + 1;
              /* @APLTOP = # APPLICATIONS PLUS OTHER PLUS TOTAL */
         DCL APLTIT(@APLTOT) CHAR(8) VAR STATIC INIT(
           'TSO','VSPC','CICS','IMS','OTHER');
         DCL APLTOT(@APLTOT) FIXED BIN(31,0) STATIC INIT((@APLTOT)0);
         DCL JULGREG ENTRY(CHAR(6),FIXED DEC(5,0));
         DCL SPELDTE ENTRY(CHAR(6))
           RETURNS(CHAR(40) VAR);
         DCL CTOHMC ENTRY(FIXED BIN(31,0))
           RETURNS(CHAR(8));
         DCL LODTE FIXED DEC(5,0) INIT(99999);
         DCL HIDTE FIXED DEC(5,0) INIT(0);
         DCL LOTME FIXED BIN(31,0) INIT(8640001);
         DCL HITME FIXED BIN(31,0) INIT(0);
         DCL 1 SMFT251 BASED(SMFPTR) UNALIGNED,
              2 PAD CHAR(14),
                   /* PAD FOR STANDARD RECORD HEADER */
              2 OCID CHAR(1),
                   /* 'O' IF TERMINAL CONNECT
                      'C' IF TERMINAL DISCONNECT */
              2 APID CHAR(8),
                   /* APPLICATION NAME */
              2 TMID CHAR(8);
                   /* TERMINAL NAME */
         DCL 1 TMEL BASED(ELPTR),
              2 ID CHAR(8),
              2 LOCATION CHAR(30),
              2 ELAP FIXED BIN(31,0),
              2 OC CHAR(1),
              2 TME FIXED BIN(31,0),
              2 DTE FIXED DEC(5,0),
              2 CURAP FIXED BIN(15,0),
              2 APELAP(@APLTOT) FIXED BIN(31,0),
              2 TERMID CHAR(8);
         DCL 1 APARY(@APLTOT),
              2 ID FIXED BIN(15,0) INIT((@APLTOT)0),
              2 ELAP BIN FLOAT(53) INIT((@APLTOT)0);
         ON ENDPAGE(SYSPRINT) BEGIN;
              PUT EDIT('TRACE FOR TERMINAL ID ',TRACE)(A,A) PAGE;
              PUT SKIP(2);
              END;
         IF TRACE ^= ''
              THEN SIGNAL ENDPAGE(SYSPRINT);
         DCL ERRCNT FIXED BIN(31,0) INIT(0);
         ON ERROR BEGIN;
           ERRCNT=ERRCNT+1;
           IF ERRCNT > 256
             THEN GO TO GETOUT;
           CALL DUMPSTR(SMFREC);
           GO TO RETRY;
           END;
         ON ENDFILE(SMFDATA) GO TO EOJ;
 RETRY:
         DO FOREVER=1 REPEAT FOREVER;
              DO UNTIL((I=251) & (WRITDTE>=LODTEK) & (WRITDTE<=HIDTEK)
                & SUBSTR(DOWSTR,DOW(WRITDTE),1));
                   READ FILE(SMFDATA) INTO(SMFREC);
                   I = TYPE;
                   END;
              IF WRITDTE < LODTE
                   THEN DO;
                        LODTE = WRITDTE;
                        LOTME = WRITME;
                        END;
              IF WRITDTE > HIDTE
                   THEN DO;
                        HIDTE = WRITDTE;
                        HITME = WRITME;
                        END;
              IF WRITDTE = LODTE
                   THEN IF WRITME < LOTME
                        THEN LOTME = WRITME;
              IF WRITDTE = HIDTE
                   THEN IF WRITME > HITME
                        THEN HITME = WRITME;
              ELPTR=ALCEL(TMID);
              IF TMID = TRACE
                THEN DO;
                  IF OCID = 'O'
                    THEN PUT EDIT('ON  ')(A) SKIP(1);
                    ELSE PUT EDIT('OFF ')(A) SKIP(1);
                  PUT EDIT(APID,CTOHMC(WRITME),SPDTE(WRITDTE))
                    (A,X(1),A,X(1),A);
                  END;
              IF OCID = 'O'
                THEN DO;
                  TME = WRITME;
                  DTE = WRITDTE;
                  OC = 'O';
                  CURAP = WHICHAP(APID);
                  END;
                ELSE DO;
                  IF OC = 'O'
                    THEN DO;
                      J = MYELAP(DTE,TME,WRITDTE,WRITME);
                      TMEL.ELAP = TMEL.ELAP + J;
                      DO K = 1 TO @APLTOT UNTIL(APARY.ID(K)=CURAP);
                        IF APARY.ID(K) = 0
                          THEN APARY.ID(K) = CURAP;
                        END;
                      APARY.ELAP(K) = APARY.ELAP(K) + J;
                      APELAP(CURAP)=APELAP(CURAP) + J;
                      END;
                  OC = '';
                  END;
              END;
 EOJ:
         ON ERROR SYSTEM;
         TMARY.ASARDPT(*)=NULL;
         CALL PRTRPT('SEQUENCE BY TERMINAL ID',IDSEQ,'1'B);
         TMARY.ASARDPT(*)=NULL;
         ON CONDITION(ASAREOF) GO TO ELAPEOJ;
         I=0;
         DO ELPTR=TMARY_NEXT REPEAT TMARY_NEXT;
           ELAPKEY=TMEL.ELAP;
           I=I+1;
           ELAPKEY2=I;
           CALL ELARY_ASSIGN(ELAPKEY,ELAPKEY2,ELPTR);
           END;
 ELAPEOJ:
         ELARY.ASARDPT(*)=NULL;
         CALL PRTRPT('SEQUENCE BY ELAPSED TIME',ELSEQ,'1'B);
         LOCATE.ASARDPT(*)=NULL;
         DO FOREVER=1 REPEAT FOREVER;
           ON CONDITION(ASAREOF) GO TO TMPEOF;
           LOCCK = LOCATE_NEXT;
           TMARY.ASARDPT(*)=NULL;
           CALL PRTRPT(LOCCK,LOCSEQ,'0'B);
           END;
 TMPEOF:
         ON ENDPAGE(SYSPRINT) BEGIN;
              PUT EDIT('TERMINAL USAGE REPORT')(A) PAGE;
              PUT EDIT('APPLICATION ELAPTME')(A) SKIP(1);
              PUT EDIT('    ID      (HOURS)')(A) SKIP(1);
              PUT SKIP(1);
              END;
         SIGNAL ENDPAGE(SYSPRINT);
         DO I = 1 TO @APLTOT;
              CALL PRTAPL(I);
              END;
 PRTAPL:  PROC(APLIX);
         DCL APLIX FIXED BIN(31,0);
         DCL I FIXED;
         DCL TOT BIN FLOAT(53);
         TOT = 0;
         ON CONDITION(ASAREOF) GO TO APLEOF;
         TMARY.ASARDPT(*)=NULL;
         DO ELPTR=TMARY_NEXT REPEAT TMARY_NEXT;
           TOT = TOT + APELAP(APLIX);
           END;
 APLEOF:
         TOT = (TOT+180000)/360000; /* J = HOURS, ROUNDED */
         PUT EDIT(APLTIT(APLIX),TOT)
           (COL(3),A,COL(13),P'ZZ,ZZZ,ZZ9') SKIP(1);
         END PRTAPL;
 PRTRPT:  PROC(PTIT,PNXT,PSW);
         DCL PTIT CHAR(*);
         DCL PNXT ENTRY RETURNS(PTR);
         DCL PSW BIT(1);
         DCL (I,J,K,L) FIXED;
         DCL TOT BIN FLOAT(53) INIT(0);
         DCL CTARY(@APLTOP) CHAR(8);
         ON ENDPAGE(SYSPRINT) BEGIN;
              PUT EDIT('TERMINAL USAGE REPORT - ',PTIT)(A,A) PAGE;
              PUT EDIT('FROM',CTOHMC(LOTME),SPDTE(LODTE),
                'TO  ',CTOHMC(HITME),SPDTE(HIDTE))
                (A,X(1),A,X(1),A,X(1),A,X(1),A,X(1),A) SKIP(2);
              IF DOWSTR ^= '1111111'B
                THEN DO;
                  PUT EDIT('REPORT RESTRICTED TO THE DAYS ')(A) SKIP(1);
                  DO IE = 1 TO 7;
                    IF SUBSTR(DOWSTR,IE,1)
                      THEN PUT EDIT(KEYTAB(IE+6))(X(1),A);
                    END;
                  END;
              IF LOTMEK^=0 × HITMEK^=8640000
                THEN PUT EDIT('REPORT RESTRICTED TO THE HOURS FROM ',
                  CTOHMC(LOTMEK),' TO ',CTOHMC(HITMEK))
                  (A,A,A,A) SKIP(1);
              PUT EDIT('TERMINAL','LOCATION','TOTAL',
                (APLTIT(IE) DO IE = 1 TO @APLTOT))
                (A,X(1),A,X(5),@APLTOT A(9)) SKIP(2);
              PUT EDIT(('HH:MM:SS' DO IE = 1 TO @APLTOP))
                (X(22),@APLTOP A(9)) SKIP(1);
              PUT SKIP(2);
              END;
         SIGNAL ENDPAGE(SYSPRINT);
         ON CONDITION(ASAREOF) GO TO EOJ;
         DO ELPTR=PNXT REPEAT PNXT;
              IF PSW × LOCATION=PTIT
                  THEN DO;
                       TOT = TOT + TMEL.ELAP;
                       CTARY(1) = CTOHMC(TMEL.ELAP);
                       DO J = 2 TO @APLTOP;
                         CTARY(J) = CTOHMC(APELAP(J-1));
                         IF CTARY(J) = '00:00:00'
                           THEN CTARY(J) = '';
                         END;
                       PUT EDIT(TMEL.TERMID,LOCATION,
                         (CTARY(J) DO J = 1 TO @APLTOP))
                         (A(8),X(1),A(12),X(1),@APLTOP A(9)) SKIP(1);
                       END;
              END;
 EOJ:
         TOT = (TOT+180000)/360000; /* TOT=HOURS, ROUNDED */
         PUT EDIT('TOTAL = ',TOT,' HOURS')
           (A,P'ZZ,ZZZ,ZZ9',A) SKIP(2);
         END PRTRPT;
 IDSEQ:  PROC RETURNS(PTR);
         RETURN(TMARY_NEXT);
         END;
 ELSEQ:  PROC RETURNS(PTR);
         RETURN(ELARY_NEXT);
         END;
 LOCSEQ:  PROC RETURNS(PTR);
         DCL T PTR;
         DO T = TMARY_NEXT REPEAT TMARY_NEXT
           UNTIL(T->LOCATION=LOCCK);
           END;
         RETURN(T);
         END;
 SPDTE:  PROC(JULDTE) RETURNS(CHAR(40) VAR);
         DCL JULDTE FIXED DEC(5,0);
         DCL GREGDTE CHAR(6);
         CALL JULGREG(GREGDTE,JULDTE);
         RETURN(SPELDTE(SUBSTR(GREGDTE,5,2)××SUBSTR(GREGDTE,1,4)));
         END SPDTE;
 WHICHAP:  PROC(APID) RETURNS(FIXED BIN(15,0));
         DCL APID CHAR(8);
         DCL I FIXED BIN(15,0);
         IF SUBSTR(APID,1,2)='TS'
           THEN IF SUBSTR(APID,3,2)='76' × SUBSTR(APID,3,2)='80'
             THEN RETURN(1); /* IT IS TSO */
         DO I = 1 TO @APLCNT WHILE(SUBSTR(APID,1,LENGTH(APLTIT(I))) ^=
           APLTIT(I));
             END;
         RETURN(I);
         END WHICHAP;
 MYELAP:  PROC(SDTE,STME,EDTE,ETME) RETURNS(FIXED BIN(31,0));
         DCL (SDTE,EDTE) FIXED DEC(5,0);
         DCL (STME,ETME) FIXED BIN(31,0);
         DCL TDTE FIXED DEC(5,0);
         DCL RETELAP FIXED BIN(31,0);
         IF SDTE = EDTE
           THEN RETELAP = MYELA(STME,ETME,LOTMEK,HITMEK);
           ELSE DO;
             RETELAP = MYELA(STME,8640000,LOTMEK,HITMEK);
             DO TDTE = DATEOFF(SDTE,1) REPEAT DATEOFF(TDTE,1)
               WHILE(TDTE ^= EDTE);
               RETELAP = RETELAP + MYELA(0,8640000,LOTMEK,HITMEK);
               END;
             RETELAP = RETELAP + MYELA(0,ETME,LOTMEK,HITMEK);
             END;
         RETURN(RETELAP);
 MYELA:  PROC(STME,ETME,LO,HI) RETURNS(FIXED BIN(31,0)) RECURSIVE;
         DCL (STME,ETME,LO,HI) FIXED BIN(31,0);
         DCL RTME FIXED BIN(31,0) INIT(0);
         IF LO > HI /* DOES RANGE SPAN MIDNIGHT? */
           THEN RTME=MYELA(STME,ETME,LO,8640000)+MYELA(STME,ETME,0,HI);
           ELSE DO;
             IF ^(LO >= ETME × HI <= STME)
               THEN DO;
                 RTME = ETME - STME;
                 IF LO > STME
                   THEN RTME = RTME - (LO - STME);
                 IF HI < ETME
                   THEN RTME = RTME - (ETME - HI);
                 END;
             END;
         RETURN(RTME);
         END MYELA;
         END MYELAP;
 ALCEL:  PROC(PID) RETURNS(PTR);
         DCL PID CHAR(8);
         ELPTR=TMARY_REFER(PID);
         IF ELPTR=NULL
           THEN DO;
             ALLOCATE TMEL;
             CALL TMARY_ASSIGN(PID,ELPTR);
             TERMID=PID;
             LOCATION='OTHER';
             TMEL.ID,TMEL.OC='';
             TMEL.ELAP,TMEL.TME,TMEL.CURAP=0;
             TMEL.DTE=0;
             TMEL.APELAP(*)=0;
             END;
         RETURN(ELPTR);
         END ALCEL;
 GETOUT:
         END;
