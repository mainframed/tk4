* PROCESS CS(60),F(I),NUMBER,GONUMBER,MACRO,INTERRUPT,OFFSET,OPT(TIME);
 /*
0*$.HE GENERALIZED TSO COMMANDS - CATLIST
0*$.HE ENHANCED LISTCAT COMMAND
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$06/29/78
0*$AUTHOR:  DICK RETTKE
0*$SHARE CODE:  KIM
0*$SOURCE MODULE NAME:  CATLIST
0*$DOCUMENTATION ID:  0*$
0*$HELP ID:  0*#
0*$.FI L
0*$.SP 5
0*$THIS COMMAND IS USED TO LIST DATA SETS CATALOGED WITH SPECIFIED
0*$HIGH-LEVEL QUALIFIERS, AND IS FASTER THAN THE LISTC COMMAND.
0*$IT IS WRITTEN IN PLI, AND THE FOLLOWING SEQUENCE OF COMMANDS
0*$SHOULD BE USED TO COMPILE/LINKEDIT THE COMMAND:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$PLI CATLIST M LIB('SYS2.MACLIB') OBJ
0*$LINK (CATLIST *) LOAD('SYS3.COMLIB(CATLIST)') -
0*$  LIB('SYS2.PLIBASE') PLIBASE PRINT(*)
0*$ENTER LINK EDIT CONTROL STATEMENTS -
0*$ ENTRY PLICALLA
0*$ ALIAS CL
0*$ NAME CATLIST(R)
0*#)F FUNCTION -
0*#         'CATLIST' WILL PRINT/DISPLAY A LISTING OF THE DATASETS THAT
0*#                   EXIST FOR A SPECIFIED INDEX LEVEL.
0*#)X SYNTAX -
0*#         CATLIST LEVEL() DATASET() DISP() QUAL() PREFIX NOPREFIX
0*#                 VLIST NOVLIST EDIT NOEDIT
0*#             EXAMPLE1: CATLIST
0*#                       CATALOG LIST FOR DEFAULTS
0*#             EXAMPLE2: CATLIST LEVEL(EUP366,EUP027,BDP346)
0*#                       CATALOG LIST FOR THE 3 SPECIFIED INDEXES
0*#             EXAMPLE3: CATLIST DATASET(15)
0*#                       CATALOG LIST FOR DEFAULTS PRINTED AT RMT15
0*#)O OPERANDS -
0*#             THERE ARE NO REQUIRED OPERANDS.
0*#))LEVEL    - THIS IS THE LEVEL OF ENTRY NAMES TO BE LISTED. THE
0*#             DEFAULT IS THE TSO LOGON USERID (&SYSUID).
0*#             EXAMPLE 1:
0*#                 TO LIST ALL OF THE CONSUMER DATASETS PREFIXED BY
0*#                 A.NT YOU WOULD ENTER LEVEL(A.NT)
0*#             EXAMPLE 2:
0*#                 TO LIST ALL DATASET UNDER SOMEONE ELSES USER ID
0*#                 ENTER LEVEL(USERID).
0*#             NOTE THAT YOU MAY SPECIFY A LIST OF INDEXES DELIMITED
0*#             BY BLANKS OR COMMAS. A MAXIMUM OF 100 IS ALLOWED.
0*#             NOTE THAT ASTERISK NOTATION IS VALID, FOR EXAMPLE
0*#             LEVEL(BAP346.*.PLI).
0*#))DATASET  - THIS IS THE DESTINATION OF WHERE THE OUTPUT WILL
0*#             BE SENT. IF THE DATASET PARAMETER IS NOT SPECIFIED THE
0*#             OUTPUT WILL BE PRINTED ON THE CRT.
0*#             VALID VALUES FOR DATASET ARE:
0*#             A) * -OUTPUT TO TUBE (THE DEFAULT)
0*#                FOR EXAMPLE: DATASET(*)
0*#             B) DSN NAME  - OUTPUT TO DATASET (USE THE DISP
0*#                            PARAMETER TO SPECIFY NEW OLD MOD ETC.
0*#                FOR EXAMPLE: DATASET(PRINT.DATA)
0*#             C) REMOTE ID - THE DIGIT PORTION OF A VALID REMOTE
0*#                            ID, THE OUTPUT WILL PRINT AT THAT REMOTE.
0*#                FOR EXAMPLE: DATASET(15) (SEND PRINT TO REMOTE15)
0*#))DISP     - USED TO SPECIFY THE DISPOSITION OF THE DATASET
0*#             SPECIFIED IN THE DATASET PARAMETER. DEFAULT IS NEW.
0*#))QUAL     - IF YOU DESIRE TO LIST ONLY DATASETS WITH A SPECIFIC
0*#             LAST QUALIFIER ENTER IT WITH THE QUAL OPERAND. FOR
0*#             EXAMPLE: TO LIST ALL THE DATASETS UNDER THE DEFAULT
0*#             USER ID THAT HAVE A LAST QUALIFIER OF "CNTL" ENTER
0*#             QUAL(CNTL).
0*#))PREFIX   - THIS KEYWORD SPECIFIES THAT THE INDEX SPECIFIED IN THE
0*#             LEVEL OPERAND IS TO BE PREFIXED TO THE NAME OF EACH
0*#             DATASET LISTED. USE OF THIS KEYWORD WILL RESULT IN
0*#             FEWER ENTRIES LISTED ACROSS THE SCREEN.
0*#))VLIST    - THIS KEYWORD SPECIFIES THAT INSTEAD OF LISTING ACROSS
0*#             THE LINE, CATLIST IS TO VERTICALLY LIST THE DATASET.
0*#))EDIT   - SPECIFIES THAT CATLIST IS TO PREFIX EACH DATASET LISTED
0*#             WITH AN '<' AND SUFFIX IT WITH A '>' TO FACLITATE
0*#             EDITING THE DATASET NAMES INTO COMMANDS. THE LIST WILL
0*#             BE IN VERTICAL FORMAT. OUTPUT SHOULD BE TO A DATASET.
 */
 %INCLUDE CPINIT1;
 %@CP = 'CATLIST'; /* ALIAS = 'CL' */
 %INCLUDE CPINIT2;
         @PROC(0,LEVEL(#(LIST)),
                 DATASET(*),
                 DISP(NEW),
                 QUAL(),
                 PREFIX#(DEFAULT=NOPREFIX,NOPREFIX,PREFIX),
                 EDIT#(DEFAULT=NOEDIT,NOEDIT,EDIT),
                 VLIST#(DEFAULT=NOVLIST,NOVLIST,VLIST));
         %INCLUDE JFCB;
         DCL (SYSGETM,SYSPARS,PUTLINE,REP@,SYSCMD,SYSDAIR,REPLACE,
              LOCDSN,SYSJFCB) EXTERNAL ENTRY;
         DCL (ONCODE,DATE,TIME,ADDR,LENGTH,PLIRETC,INDEX,SUBSTR)
             BUILTIN;
         DCL DDN     FILE VARIABLE,
             OLDFILE FILE RECORD OUTPUT,
             NEWFILE FILE RECORD OUTPUT SEQUENTIAL
                     ENV(FB RECSIZE(80) BLKSIZE(3600)),
             SYSFILE FILE RECORD OUTPUT
                     ENV(FB RECSIZE(133) BLKSIZE(13300) CTLASA);
         DCL PREC            CHAR(*)        CONTROLLED,
             (RDATE,RTIME)   CHAR(10)       VARYING   INIT(''),
             (CC,DTASETTYPE) CHAR(1)                  INIT(' '),
             (QUALIFIER,SOURCE,REP,TBLHOLD)
                             CHAR(100)      VARYING   INIT(''),
             (INDEXX,INDX,CATALOG,DTASET)
                             CHAR(44)       VARYING   INIT(''),
             (PFXSW,@WSW,GNRCSW,QHIT,NOHDSW,QSW,EDSW,VSW)
                             BIT(1)                   INIT('0'B),
             REPCODE         BIT(2)                   INIT('00'B),
             (RETCODE,QLEN,MAXLEN,SUB,IPOS,I,J,L,ASTPOS,TBLLEN,EQEND,
              EQPOS,RLEN,SLEN,NCOLS,LIST#,LRECL#,LRECMIN)
                             FIXED BIN(31,0)          INIT(0);
         DCL 1 POINTER_AND_TABLE BASED(POINTER_TO_CURRENT_TABLE),
               3 POINTER_TO_NEXT_TABLE POINTER INIT(NULL),
               3 TABLE (100) VARYING CHAR(44) INIT((100)'');
         DCL (POINTER_TO_CURRENT_TABLE,POINTER_TO_FIRST_TABLE,PPLPTR,
              INPTR@,PDEPTR,LPTR,PDLPTR,JFCBPTR,JFCBXPTR) POINTER;
         DCL TABLE_INDEX     FIXED BIN(15)            INIT(0);
         DCL MYJFCB          CHAR(176)                INIT('');
1@OUTPUT:PROC (NOHDSW);
         DCL PARMSTRING      CHAR(100)      VARYING,
             NOHDSW          BIT(1);
         IF @WSW THEN
           DO;
             IF ^NOHDSW THEN
               DO;
                 PARMSTRING = PREC;
                 CALL SET@('0'B,'&PREC',PARMSTRING);
                 @WRITE('&PREC');
               END;
             RETURN;
           END;
                 ELSE
           DO;
             IF SUBSTR(PREC,1,1) ^= '1' THEN PREC = ' '××PREC;
             WRITE FILE(DDN) FROM(PREC);
           END;
         END @OUTPUT;
1        ON ERROR SYSTEM;
         ON UNDEFINEDFILE(OLDFILE) STOP;
         ON UNDEFINEDFILE(NEWFILE) STOP;
         ON UNDEFINEDFILE(SYSFILE) STOP;
         RDATE = DATE;
         RDATE = SUBSTR(RDATE,3,2)××'/'××
                 SUBSTR(RDATE,5,2)××'/'××SUBSTR(RDATE,1,2);
         RTIME = TIME;
         RTIME = SUBSTR(RTIME,1,2)××':'××
                 SUBSTR(RTIME,3,2)××':'××SUBSTR(RTIME,5,2);
         QUALIFIER = SYMC('&QUAL');
         QLEN = LENGTH(QUALIFIER);
         IF QLEN > 0 THEN QSW = '1'B;
         PDEPTR = ADDR(LEVELSUB);
         IF LEVEL = 0 THEN NOHDSW = '1'B;
         IF PREFIX ^= 1 THEN PFXSW = '1'B;
         IF EDIT ^= 1 THEN EDSW = '1'B;
         IF VLIST ^= 1 THEN VSW = '1'B;
0        SELECT ;
           WHEN (SYMC('&DATASET') = '*')
             DO;
               @WSW = '1'B;
               LRECL# = 79;
             END;
           WHEN (SYMC('&DATASET') >= '0')
             DO;
               DDN = SYSFILE;
               CC = '1';
               LRECL# = 133;
               @CMD('ALLOCATE FILE(SYSFILE) SYSOUT(A) REUSE
                     DEST(RMT&DATASET.)');
             END;
           OTHERWISE
             DO;
               IF SYMC('&DISP') = 'NEW' THEN
                 DO;
                   DDN = NEWFILE;
                   LRECL# = 80;
                   @CMD('ALLOCATE FILE(NEWFILE) DATASET(&DATASET.)
                         &DISP REUSE');
                 END;
                                        ELSE
                 DO;
                   DDN = OLDFILE;
                   @CMD('ALLOCATE FILE(OLDFILE) DATASET(&DATASET.)
                         &DISP REUSE');
                 END;
             END;
         END; /* END OF SELECT */
1        IF ^@WSW THEN OPEN FILE(DDN);
         IF LRECL# = 0 THEN
           DO;
             JFCBPTR = ADDR(MYJFCB);
             CALL SYSJFCB('OLDFILE ',JFCBPTR);
             IF SUBSTR(JFCRECFM,1,2) ^= '10'B THEN
               DO;
                 @WSW = '1'B;
                 ALLOCATE PREC CHAR(79) INIT('');
                 PREC = SUBSTR(JFCBDSNM,1,INDEX(JFCBDSNM,' ') - 1)××
                        ' HAS AN INCOMPATIBLE RECFM, RECFM MUST BE'××
                        ' F/FB';
                 CALL @OUTPUT('0'B);
                 STOP;
               END;
             LRECL# = JFCLRECL;
             IF EDSW THEN LRECMIN = 50;
                     ELSE LRECMIN = 45;
             IF LRECL# < LRECMIN THEN
               DO;
                 @WSW = '1'B;
                 ALLOCATE PREC CHAR(79) INIT('');
                 PUT STRING(PREC) EDIT
                    (SUBSTR(JFCBDSNM,1,INDEX(JFCBDSNM,' ') - 1)) (A)
                    (' HAS A LRECL LESS THAN ')                  (A)
                    (LRECMIN)                                (P'Z9')
                    (' LRECL MUST BE ')                          (A)
                    (LRECMIN)                                (P'Z9')
                    (' OR LARGER.')                              (A);
                 CALL @OUTPUT('0'B);
                 STOP;
               END;
           END;
         ALLOCATE PREC CHAR(LRECL#) INIT('');
1        ON ATTENTION
           BEGIN;
             IF ^@WSW THEN
               DO;
                 CLOSE FILE(DDN);
                 SELECT (DDN);
                   WHEN (OLDFILE) @FREE(FILE(OLDFILE));
                   WHEN (NEWFILE) @FREE(FILE(NEWFILE));
                   OTHERWISE @FREE(FILE(SYSFILE));
                 END; /* END OF SELECT */
               END;
             CALL PLIRETC(RETCODE);
             STOP;
           END; /* END OF ATTENTION BEGIN UNIT */
1        ON ERROR
           BEGIN;
             ON ERROR SYSTEM;
             IF LRECL# ^= 79 THEN ALLOCATE PREC CHAR(79) INIT('');
             IF RETCODE = 44 THEN PREC =
                'TOO MANY ENTRIES TO BE PROCESSED USING A LEVEL OF '
                ××INDX;
             @WSW = '1'B;
             CALL @OUTPUT('0'B);
             PUT STRING(PREC) EDIT
                 (' CATLIST ERROR, RC=') (A)
                 (RETCODE)               (P'ZZZZ9')
                 (' ONCODE=')            (A)
                 (ONCODE)                (P'ZZZZ9');
             CALL @OUTPUT('0'B);
             SIGNAL ATTENTION;
          END; /* END OF ON ERROR BEGIN UNIT */
1/*********************************************************************/
 /* MAIN PROGRAM CONTROL LOOP FOLLOWS. IF NO LEVEL WAS SPECIFIED      */
 /* THEN THE LEVEL IS SET TO SYSUID AND WE FALL THRU THE LOOP TO      */
 /* THE END, OTHERWISE WE LOOP THRU UNTIL ALL ENTERED LEVELS HAVE     */
 /* BEEN USED.                                                        */
 /*********************************************************************/
0        DO UNTIL(PDEPTR = NULL); /* PROGRAM CONTROL LOOP */
0SECONDARY_LOOP:
           DO;
             IF LEVEL = 0 THEN
               DO;
                 INDEXX = SYMC('&SYSPREF');
                 PDEPTR = NULL;
               END;
                           ELSE
               DO;
                 WRKPTR = PDEIKPT;
                 INDEXX = SUBSTR(WRKSTR,1,PDEIKL);
                 PDEPTR = PDEIKLP;
               END;
             MAXLEN,SUB,IPOS,I = 1;
             LIST#,TABLE_INDEX = 0;
             CATALOG = '';
             POINTER_TO_CURRENT_TABLE,POINTER_TO_FIRST_TABLE,
               LPTR = NULL;
             SLEN = LENGTH(INDEXX);
             GNRCSW = '0'B;
             IF INDEX(INDEXX,'*') ^= 0 THEN
               DO;
                 IF (INDEX(INDEXX,'*') ^> 2) ×
                    (SUBSTR(INDEXX,LENGTH(INDEXX),1) = '*') THEN
                   DO;
                     PREC = '* CANNOT BE SPECIFIED AS FIRST/LAST'
                        ××' QUALIFIER';
                     RETCODE = 16;
                     SIGNAL ERROR;
                   END;
                 INDX = SUBSTR(INDEXX,1,INDEX(INDEXX,'*') - 1);
                 SLEN = LENGTH(INDX) - 1;
                 GNRCSW = '1'B;
               END;
                                       ELSE
               INDX = INDEXX××'.';
1/*********************************************************************/
 /* THE LOCDSN LOOP IS EXECUTED ONCE FOR EACH LEVEL SPECIFIED         */
 /* AND FINDS ALL DATASETS FOR THAT LEVEL.                            */
 /*********************************************************************/
 LOCDSN_LOOP:
             DO;
 /*********************************************************************/
 /* GET THE NAME OF THE CATALOG FROM IN WHICH THE LEVEL RESIDES       */
 /*********************************************************************/
               CALL LOCDSN(LPTR,RETCODE,INDX,DTASET,DTASETTYPE);
               IF RETCODE ^= 0 THEN SIGNAL ERROR;
               IF LPTR = NULL THEN LEAVE LOCDSN_LOOP;
               CATALOG = DTASET;
               ALLOCATE POINTER_AND_TABLE SET(POINTER_TO_FIRST_TABLE);
               POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
               DO UNTIL('0'B); /* FOREVER , EXIT WITH LEAVE STMT */
                 IF TABLE_INDEX >= 100 THEN
                   DO;
                     ALLOCATE POINTER_AND_TABLE
                       SET(POINTER_TO_NEXT_TABLE);
                     POINTER_TO_CURRENT_TABLE = POINTER_TO_NEXT_TABLE;
                     TABLE_INDEX = 0;
                   END;
                 QHIT = '0'B;
 /*********************************************************************/
 /* GET ALL DATASET NAMES FOR THE SPECIFIED LEVEL                     */
 /*********************************************************************/
                 CALL LOCDSN(LPTR,RETCODE,INDX,DTASET,DTASETTYPE);
                 IF RETCODE ^= 0 THEN SIGNAL ERROR;
                 QHIT = '1'B;
 /*********************************************************************/
 /* THE GENERIC TEST AND ASSOCIATED CODE IS FOR WHEN LEVELS USING     */
 /* ASTERIK NOTATION ARE SPECIFIED, OTHERWISE IT IS BYPASSED.         */
 /*********************************************************************/
                 RLEN = LENGTH(DTASET);
                 IF GNRCSW THEN
                   DO;
                     SOURCE = INDEXX;
                     TBLHOLD = DTASET;
 GENERIC_SEARCH:
                     DO WHILE(INDEX(SOURCE,'*') ^= 0);
                       ASTPOS = INDEX(SOURCE,'*');
                       TBLLEN = LENGTH(TBLHOLD);
                       EQEND = TBLLEN - ASTPOS + 1;
                       IF EQEND ^> 0 THEN
                         DO;
                           QHIT = '0'B;
                           LEAVE GENERIC_SEARCH;
                         END;
                       EQPOS =
                        INDEX(SUBSTR(TBLHOLD,ASTPOS,EQEND),'.')-1;
                       IF EQPOS ^> 0 THEN
                         DO;
                           QHIT = '0'B;
                           LEAVE GENERIC_SEARCH;
                         END;
                       REP = SUBSTR(TBLHOLD,ASTPOS,EQPOS);
                       CALL REPLACE(SOURCE,'*',REP,REPCODE);
                       IF REPCODE ^= '01'B THEN
                         DO;
                           RETCODE = REPCODE;
                           SIGNAL ERROR;
                         END;
                     END GENERIC_SEARCH;
 /*********************************************************************/
 /* QUALIFIER TESTING IS DONE ONLY IF A QUALIFIER WAS SPECIFIED       */
 /*********************************************************************/
                     IF SOURCE = TBLHOLD THEN
                       DO;
                         IF QSW THEN
                           DO;
                             IF QLEN > RLEN
                               THEN QHIT = '0'B;
                               ELSE IF SUBSTR(DTASET,(RLEN-QLEN)+1,QLEN)
                                       ^= QUALIFIER THEN QHIT = '0'B;
                           END;
                       END;
                                         ELSE QHIT = '0'B;
                   END; /* IF GNRCSW THEN DO */
                           ELSE
 /*********************************************************************/
 /* QUALIFIER TESTING IS DONE ONLY IF A QUALIFIER WAS SPECIFIED       */
 /*********************************************************************/
                   DO;
                     IF QSW THEN
                       DO;
                         IF QLEN > RLEN
                           THEN QHIT = '0'B;
                           ELSE IF SUBSTR(DTASET,(RLEN-QLEN)+1,QLEN)
                                   ^= QUALIFIER THEN QHIT = '0'B;
                       END;
                   END;
 /*********************************************************************/
 /* MOVE THE DATASET NAME FROM THE WORK VARIABLE TO THE TABLE ONLY    */
 /* IF IT IS ONE THAT WE WANT. (IE, QHIT='1'B)                        */
 /*********************************************************************/
                 IF QHIT THEN
                   DO;
                     TABLE_INDEX = TABLE_INDEX + 1;
                     IF ^EDSW THEN
                       DO;
                         IF ^PFXSW
                           THEN TABLE(TABLE_INDEX) =
                                SUBSTR(DTASET,SLEN + 2);
                           ELSE TABLE(TABLE_INDEX) = DTASET;
                       END;
                              ELSE
                       TABLE(TABLE_INDEX) =
                         '<'××DTASET××'>';
                     I = LENGTH(TABLE(TABLE_INDEX));
                     IF I > MAXLEN THEN MAXLEN = I;
                     LIST# = LIST# + 1;
                   END;
               IF LPTR = NULL THEN LEAVE LOCDSN_LOOP;
               END; /* END FOREVER LOOP */
             END LOCDSN_LOOP;
             IF LENGTH(CATALOG) > 0
               THEN POINTER_TO_NEXT_TABLE = NULL;
               ELSE DO;
                      PREC = '';
                      CALL @OUTPUT('0'B);
                      PREC = ' NO ENTRIES FOUND FOR INDEX ='××INDEXX;
                      CALL @OUTPUT('0'B);
                      PREC = '';
                      CALL @OUTPUT(NOHDSW);
                      LEAVE SECONDARY_LOOP;
                    END;
1/*********************************************************************/
 /*  OUTPUT THE HEADINGS                                              */
 /*********************************************************************/
             IF ^EDSW THEN
               DO;
                 PREC = CC××'CATALOG LIST ON '××RDATE××' @ '××RTIME;
                 CALL @OUTPUT(NOHDSW);
                 PREC = ' INDEX='××INDEXX××', CATALOG='××CATALOG;
                 CALL @OUTPUT(NOHDSW);
                 PREC = ' ';
                 CALL @OUTPUT(NOHDSW);
               END;
             MAXLEN = MAXLEN + 1;
             IF (EDSW×VSW) THEN NCOLS = 1;
                           ELSE NCOLS = LRECL# / MAXLEN;
             I = 1;
1/*********************************************************************/
 /* OUTPUT THE DATASET NAMES                                          */
 /*********************************************************************/
             DO POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE
                REPEAT POINTER_TO_NEXT_TABLE
                WHILE(POINTER_TO_CURRENT_TABLE ^= NULL);
               IF POINTER_TO_NEXT_TABLE = NULL
                 THEN L = TABLE_INDEX; /* LAST TABLE IN CHAIN */
                 ELSE L = 100;         /* FULL TABLE / NOT LAST */
               DO J = 1 TO L;
                 RLEN = LENGTH(TABLE(J));
                 IF I <= NCOLS THEN
                   DO;
                     SUBSTR(PREC,IPOS,RLEN) = TABLE(J);
                     IPOS = (MAXLEN * I) + 1;
                     I = I + 1;
                   END;
                              ELSE
                   DO;
                     CALL @OUTPUT('0'B);
                     PREC = ' ';
                     IPOS = 1;
                     I = 1;
                     SUBSTR(PREC,IPOS,RLEN) = TABLE(J);
                     IPOS = (MAXLEN * I) + 1;
                     I = I + 1;
                   END;
               END;  /* DO J  */
             END; /* DO POINTER  */
1/*********************************************************************/
 /* OUTPUT THE SUMMARY LINE                                           */
 /*********************************************************************/
             IF PREC ^= ' ' THEN CALL @OUTPUT('0'B);
             IF ^EDSW THEN
               DO;
                 PUT STRING(PREC) EDIT
                     (' NUMBER OF DATASETS LISTED =') (A)
                     (LIST#)                          (P'ZZZ9');
                 CALL @OUTPUT('0'B);
                 PREC = '';
                 CALL @OUTPUT(NOHDSW);
               END;
             POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
             DO WHILE(POINTER_TO_CURRENT_TABLE ^= NULL)
                UNTIL(POINTER_TO_CURRENT_TABLE = NULL);
               POINTER_TO_FIRST_TABLE = POINTER_TO_NEXT_TABLE;
               FREE POINTER_TO_CURRENT_TABLE -> POINTER_AND_TABLE;
               POINTER_TO_CURRENT_TABLE = POINTER_TO_FIRST_TABLE;
             END;
           END SECONDARY_LOOP;
         END;  /* PROGRAM CONTROL LOOP */
1/*********************************************************************/
 /* NO MORE ENTRIES IN LIST, CLEAN UP AND END                         */
 /*********************************************************************/
         IF ^@WSW THEN
           DO;
             CLOSE FILE(DDN);
             SELECT (DDN);
               WHEN (OLDFILE) @FREE(FILE(OLDFILE));
               WHEN (NEWFILE) @FREE(FILE(NEWFILE));
               OTHERWISE @FREE(FILE(SYSFILE));
             END; /* END OF SELECT */
           END;
         END CATLIST;
