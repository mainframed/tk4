 /* PNL
 THIS SUBROUTINE IS USED BY THE SCRDEF COMMAND PROCESSOR.
 */
 PNL:  PROC(MYSTR,OUTSTR);
     DFT RANGE(*) FIXED DEC VALUE(FIXED DEC(5,0),
      CHAR(32000));
         DCL (@ROWS,@COLS) FIXED BIN(31,0) EXT;
         DCL SBASAV CHAR(256) VAR;
         DCL DIM BUILTIN;
           @TRTAB='064,193,194,195,196,'××
                  '197,198,199,200,201,'××
                  '074,075,076,077,078,'××
                  '079,080,209,210,211,'××
                  '212,213,214,215,216,'××
                  '217,090,091,092,093,'××
                  '094,095,096,097,226,'××
                  '227,228,229,230,231,'××
                  '232,233,106,107,108,'××
                  '109,110,111,240,241,'××
                  '242,243,244,245,246,'××
                  '247,248,249,122,123,'××
                  '124,125,126,127';
 /* @FULLSCP */
 /*CHANGED - TEXT DELETED*/
 /* @@PNLSTR WILL CONTAIN THE DECLARES FOR THE STATIC PORTION OF
    THE PANEL DESCRIPTIONS. */
         /*%*/ DCL @@PNLSTR CHAR VAR;
         /*%*/ DCL @@PNLSTRA CHAR VAR; /*CHANGED - ADDED*/
         /*%*/ DCL @@PNLSTRB CHAR VAR; /*CHANGED - ADDED*/
 /* @@PNLSTA WILL CONTAIN THE DECLARES FOR THE STATIC PORTION OF
    THE PANEL DESCRIPTIONS */
         /*%*/ DCL @@PNLSTA CHAR VAR;
         /*%*/ @@PNLSTA = '';
 /* @@PNLNUM IS A NUMBER USED TO UNIQUELY IDENTIFY EACH PANEL.
    ITS VALUE IS INCREMENTED AND ASSIGNED TO THE VARIABLE @PNLNUM
    EACH TIME THE @PANEL MACRO IS ISSUED. */
         /*%*/ DCL @@PNLNUM FIXED;
         /*%*/ @@PNLNUM = 0;
 /* @@DYNOFF IS USED TO RECORD THE CURRENT OFFSET IN @PNL_DYN */
         /*%*/ DCL @@DYNOFF FIXED;
         /*%*/ @@DYNOFF = 0;
 /* @@PNLNAME IS USED TO RECORD THE CURRENT PANEL NAME */
         /*%*/ DCL @@PNLNAME CHAR VAR;
 /* @@INOFF IS USED TO RECORD THE CURRENT OFFSET IN PANEL_IN */
         /*%*/ DCL @@INOFF FIXED;
         /*%*/ @@INOFF = 0;
 /* @@OUTOFF IS USED TO RECORD THE CURRENT OFFSET IN PANEL_OUT */
         /*%*/ DCL @@OUTOFF FIXED;
         /*%*/ @@OUTOFF = 0;
 /* @@FLDNUM IS A NUMBER USED TO UNIQUELY IDENTIFY EACH FIELD IN A
    PANEL.  ITS VALUE IS INCREMENTED AND ASSIGNED TO THE VARIABLE
    @FLDNUM. */
         /*%*/ DCL @@FLDNUM FIXED;
         /*%*/ @@FLDNUM = 0;
 /* @@INCNT IS A COUNTER OF UNPROTECTED FIELDS IN A PANEL */
         /*%*/ DCL @@INCNT FIXED;
 /* @@INDYN WILL CONTAIN THE DECLARES FOR THE PANEL_IN SUBSTRUCTURE */
         /*%*/ DCL @@INDYN CHAR VAR;
 /* @@OUTDYN WILL CONTAIN THE DECLARES FOR THE PANEL_OUT SUBSTRUCTURE*/
         /*%*/ DCL @@OUTDYN CHAR VAR;
 /* @@PNLARY WILL CONTAIN THE INITIALIZATION VALUES FOR ARRAY @PNLARY.*/
         /*%*/ DCL @@PNLARY CHAR VAR;
         /*%*/ @@PNLARY = '';
 /* @@STATOFF IS USED TO RECORD THE CURRENT OFFSET IN @PNLSTR.  IT
    IS USED TO DETERMINE THE OFFSET TO THE START OF A PANEL
    DEFINITION */
         /*%*/ DCL @@STATOFF FIXED;
         /*%*/ @@STATOFF = 0;
 /* @@PNLLEN IS USED TO RECORD THE LENGTH OF EACH PANEL DEFINITION IN
    @PNLSTR */
         /*%*/ DCL @@PNLLEN FIXED;
 /* @@PNLDYN WILL CONTAIN THE DECLARES FOR THE @PNL_DYN STRUCTURE */
         /*%*/ DCL @@PNLDYN CHAR VAR;
         /*%*/ @@PNLDYN = 'DCL 1 @PNL_DYN UNALIGNED';
 /*CHANGED      % INCLUDE @SBACON;
         % INCLUDE @PANEL;
         % INCLUDE @FIELD;
         % INCLUDE @ENDPNL;
         % INCLUDE @SCREEN;
         % INCLUDE @FLDMOD;
         % INCLUDE @DOPNL;*/
         /*CHANGED % PRINT; */
     DCL (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)
       FIXED BIN(15,0);
     DCL PARM(30) CHAR(3000) VAR;
     DCL MYSTR CHAR(32767) VAR;
     DCL ENDSTR CHAR VAR;
     DCL OUTSTR(*) CHAR(32767) VAR;
     DCL OUTDIM FIXED;
     OUTDIM = DIM(OUTSTR,1);
     OUTSTR(*)='';
     OUTSTR(2)=@PANEL('SCREEN1','CURSOR(4,2)'); /*RETURNS NULL*/
     PARM(*)='';
     L=LENGTH(MYSTR);
     J=0;
 FOREVER:  DO FOREVR=1 REPEAT FOREVR;
       I = INDEX(SUBSTR(MYSTR,J+1),'@FIELD(')+J;
       IF I=J
         THEN LEAVE FOREVER;
       J = I+6; /* J POINTS AT PARM-1 */
       PARM(*)='';
       DO M=1 REPEAT M+1 UNTIL(SUBSTR(MYSTR,J,1)=')');
           A=J;
           N=INDEX(SUBSTR(MYSTR,J+1),',')+J;
           P=INDEX(SUBSTR(MYSTR,J+1),'(')+J;
           S=INDEX(SUBSTR(MYSTR,J+1),')')+J;
           IF N=J
             THEN N=S;
           IF P < N
             THEN DO;
               K = 0;
               DO UNTIL(K=0);
                 IF SUBSTR(MYSTR,P,1)='('
                   THEN K = K+1;
                   ELSE K = K-1;
                 IF K > 0
                   THEN DO;
                     R = INDEX(SUBSTR(MYSTR,P+1),'(')+P;
                     S = INDEX(SUBSTR(MYSTR,P+1),')')+P;
                     IF R = P
                       THEN P = S;
                       ELSE IF R < S
                        THEN P = R;
                        ELSE P = S;
                     END;
                 END;
               N = P+1;
               END;
         J = N;
         PARM(M) = SUBSTR(MYSTR,A+1,J-A-1);
         END;
       OUTSTR(1)=@FIELD(PARM(1),PARM(2),PARM(3),PARM(4),PARM(5),
         PARM(6),PARM(7),PARM(8),PARM(9),PARM(10),PARM(11),PARM(12),
         PARM(13),PARM(14),PARM(15));
       END;
     ENDSTR=@ENDPNL('LAST');
     CALL CATSTR(@@PNLSTA);
     CALL CATSTR(@@PNLSTRB);
     CALL CATSTR(@@PNLSTRA);
     CALL CATSTR(@@PNLSTR);
     CALL CATSTR(';');
     CALL CATSTR(@@PNLDYN);
     CALL CATSTR(';');
     CALL CATSTR(ENDSTR);
     RETURN;
 CATSTR:  PROC(PARMSTR);
     DCL PARMSTR CHAR(32000) VAR;
     DCL (I,J,K,L,Q) FIXED;
     DO Q = 1 TO OUTDIM UNTIL(L < 32767);
          L = LENGTH(OUTSTR(Q));
          END;
     OUTSTR(Q)=OUTSTR(Q)××PARMSTR;
     K = 32767-L;
     IF K < LENGTH(PARMSTR)
          THEN OUTSTR(Q+1)=OUTSTR(Q+1)××SUBSTR(PARMSTR,K+1);
     END CATSTR;
 /* @NUMSTR */
 /*CHANGED - THE USE OF @NUMSTR IMPLEMENTED TO REDUCE THE SIZE OF
   THE RETURNED STRING. */
 /*CHANGED - COMMENTS DELETED */
         /*% DCL @NUMSTR ENTRY; */
 /*%*/ @NUMSTR:  PROC(P1) RETURNS(CHAR(8) VAR);
         /* THIS PROCEDURE TAKES A NUMBER, CONVERTS IT TO CHAR
            AND STRIPS BLANKS */
         DCL (P1,I,J) FIXED;
         DCL STR CHAR(8); /*CHANGED*/
         STR = P1;
         DO I = 1 TO 8;
              IF SUBSTR(STR,I,1) ^= ' '
                   THEN RETURN(SUBSTR(STR,I,9-I));
              END;
         /*%*/ END @NUMSTR;
 /*CHANGED % NOPRINT; */
 /* @BIT */
 /*CHANGED - COMMENTS DELETED*/
         /*% DCL @BIT ENTRY; */
 /*%*/@BIT:  PROC(N,L) RETURNS(CHAR(80) VAR);
         DCL (N,L,I,J) FIXED;
         DCL RET CHAR(80) VAR;
         RET='';
         I=N;
 NXT:
         J=I/2;
         IF I=J*2
              THEN RET='0'××RET;
              ELSE RET='1'××RET;
         I=J;
         IF I>0
              THEN GO TO NXT;
         I=LENGTH(RET);
         IF I>=L
              THEN RET=SUBSTR(RET,I-L+1,L);
              ELSE DO I=I TO L-1;
                   RET='0'××RET;
                   END;
         RETURN(''''××RET××'''B');
         /*%*/ END @BIT;
 /* @NULL */
 /*CHANGED - COMMENTS DELETED */
         /*%*/ DCL @NULLCNT FIXED /*CHANGED*/ INIT(0);
         /*CHANGED % @NULLCNT = 0; */
         /*% DCL @NULL ENTRY; */
 /*%*/ @NULL:  PROC RETURNS(CHAR(16) VAR);
         DCL STR CHAR(16) VAR, (I,J) FIXED;
         @NULLCNT = @NULLCNT + 1;
         STR = @NULLCNT;
         DO I = 1 TO 8;
              IF SUBSTR(STR,I,1) ^= ' '
                   THEN GO TO FRNT;
              END;
 FRNT:
         RETURN('NULL' ×× SUBSTR(STR,I,9-I));
         /*%*/ END @NULL;
 /* @STRIP */
 /*CHANGED - COMMENTS DELETED */
         /*% DCL @STRIP ENTRY; */
 /*%*/ @STRIP:  PROC(PARM) RETURNS(CHAR VAR);
         DCL PARM CHAR VAR;
         DCL (J,K,L) FIXED;
         IF PARM ^= ''
              THEN DO;
                   L=LENGTH(PARM);
                   DO J = 1 TO L;
                        IF SUBSTR(PARM,J,1)^=' '
                             THEN GO TO BYBL;
                        END;
              BYBL: IF J > 1
                        THEN DO;
                             L=L-J+1;
                             PARM=SUBSTR(PARM,J,L);
                             END;
                   END;
         RETURN(PARM);
         /*%*/ END @STRIP;
 /* @SPARS */
 /*CHANGED - COMMENTS DELETED */
         /*% DCL @SPARS ENTRY; */
 /*%*/ @SPARS:  PROC(PARM,KEYTAB,INDX) RETURNS(CHAR VAR);
         DCL PARM CHAR VAR, KEYTAB CHAR VAR, INDX FIXED;
         DCL (I,IL,S,E,TABLEN,LK) FIXED;
         IL = LENGTH(PARM);
         IF IL = 0
              THEN DO;
                   INDX=0;
                   RETURN('');
                   END;
         I = INDEX(PARM,'(');
         IF I = 0
              THEN I = IL;
              ELSE I = I - 1;
         TABLEN = LENGTH(KEYTAB);
         INDX = 1;
         S = 1;
 KEYLP:
         E = INDEX(SUBSTR(KEYTAB,S,TABLEN-S+1),',');
         IF E = 0
              THEN E = (TABLEN+2)-S;
         LK = E-1;
         IF LK > I
              THEN LK = I;
         IF SUBSTR(PARM,1,I) = SUBSTR(KEYTAB,S,LK)
              THEN IF I ^= IL
                   THEN RETURN(SUBSTR(PARM,I+2,IL-I-2));
                   ELSE RETURN('');
         S = S + E;
         IF S > TABLEN
              THEN DO;
                  INDX = 0;
                  RETURN(PARM);
                  END;
         INDX = INDX + 1;
         GO TO KEYLP;
         /*%*/ END @SPARS;
 /* @SBACON */
 /*CHANGED - COMMENTS DELETED */
 /* @TRTAB IS A TABLE USED TO CONVERT AN SBA ADDRESS FROM BINARY TO
    3270 CODE */
         /*%*/ DCL @TRTAB CHAR VAR;
 /*CHANGED - COPY OF @TRTAB INITIALIZATION STATEMENT MOVED TO
   FRONT OF PROGRAM
         /*% DCL @CONSBA ENTRY; */
 /*%*/ @CONSBA:  PROC(P1) RETURNS(CHAR(80) VAR);
         DCL P1 FIXED;
         DCL (A,B,S1,S2) FIXED;
         A = P1/64;
         B = A/256;
         S1 = A-B*256;
         S2 = P1-A*64;
         S1 = SUBSTR(@TRTAB,S1*4+1,3);
         S2 = SUBSTR(@TRTAB,S2*4+1,3);
         RETURN(@BIT(S1*256+S2,16));
         /*%*/ END @CONSBA;
         /*% DCL @SBACON ENTRY; */
 /*%*/ @SBACON: PROC(P1) RETURNS(CHAR(80) VAR);
         DCL P1 FIXED;
         DCL (A,B,S1,S2) FIXED;
         A = P1/256;          /* A = 1ST BYTE */
         S1 = A-(A/64)*64;    /* S1 = LO 6 BITS OF 1ST BYTE */
         B = P1-A*256;        /* B = 2D BYTE */
         S2 = B-(B/64)*64;    /* S2 = LO 6 BITS OF 2D BYTE */
         RETURN(@BIT(S1*64+S2,16));
         /*%*/ END @SBACON;
 /* @PANEL */
 /*CHANGED - COMMENTS DELETED */
         /*% DCL @PANEL ENTRY; */
 /*%*/ @PANEL:  PROC(P1,P2) /*STATEMENT*/ RETURNS(CHAR VAR);
         DCL (P1,P2) CHAR VAR;
         DCL (ROW,COL,L,I,SBA) FIXED;
         DCL STR CHAR VAR;
         DCL SBAC CHAR(80) VAR;
         @@PNLNAME = P1;
         @@INOFF = 0;
         @@OUTOFF = 0;
         @@FLDNUM = 0;
         @@INCNT = 0;
         @@INDYN = '';
         @@OUTDYN = '';
         @@PNLLEN = 24;
         IF P2 = ''
              THEN SBA = 0;
              ELSE DO;
                   L = LENGTH(P2)-8;
                   STR = SUBSTR(P2,8,L);
                   I = INDEX(STR,',');
                   ROW = SUBSTR(STR,1,I-1);
                   COL = SUBSTR(STR,I+1);
                   SBA = (ROW-1)*@COLS + COL-1;
                   END;
         SBAC = @CONSBA(SBA);
         @@PNLNUM = @@PNLNUM + 1;
         @@PNLDYN = '';
         @@PNLSTA = '';
         @@PNLSTRA=''; /*CHANGED - ADDED*/
         @@PNLSTRB=''; /*CHANGED - ADDED*/
         @@PNLSTR='';
         SBASAV=
          ', 3 @CURSBA BIT(16) '××
          'INIT('××SBAC××'), 3 @CURSBAB FIXED BIN(15,0) INIT('××SBA;
         RETURN('');
         /*%*/ END @PANEL;
 /* @FIELD */
 /*CHANGED - COMMENTS DELETED */
         /*% DCL @FIELD ENTRY; */
 /*%*/ @FIELD:  PROC(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)
           /*STATEMENT*/ RETURNS(CHAR VAR);
         DCL (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15)
           CHAR(3000) VAR; /*CHANGED*/
         DCL KEYTAB CHAR VAR;
         KEYTAB='NAME,POSITION,LITERAL,LENGTH,PICTURE,PREMOD,HIGH,'××
                'NODISPLAY,VERIFY,AUTODUP,NOSKIP';
         DCL INDX FIXED;
         DCL (I,J,K,L,LNTH,INLEN,M,N,ROW,COL,P,FLDSBAB) FIXED;
         DCL (PARM,TEXT,FLAGS,PMASK,FLDN,FLDSBA,PICTST,PICFLG) CHAR VAR;
         DCL (LIT,PIC) CHAR VAR;
         DCL (PICOFF,PICLEN,INOFF,LITLEN,FLDLEN) FIXED;
         FLAGS = '00000000'××'10000000';
         PMASK = '00000'××'00000'××'00000';
         LIT='';
         LNTH=0;
         @@FLDNUM = @@FLDNUM + 1;
         PICLEN = 0;
         INLEN = 0;
         DO I = 1 TO 15;
              IF I =  1 THEN PARM =  P1; ELSE
              IF I =  2 THEN PARM =  P2; ELSE
              IF I =  3 THEN PARM =  P3; ELSE
              IF I =  4 THEN PARM =  P4; ELSE
              IF I =  5 THEN PARM =  P5; ELSE
              IF I =  6 THEN PARM =  P6; ELSE
              IF I =  7 THEN PARM =  P7; ELSE
              IF I =  8 THEN PARM =  P8; ELSE
              IF I =  9 THEN PARM =  P9; ELSE
              IF I = 10 THEN PARM = P10; ELSE
              IF I = 11 THEN PARM = P11; ELSE
              IF I = 12 THEN PARM = P12; ELSE
              IF I = 13 THEN PARM = P13; ELSE
              IF I = 14 THEN PARM = P14; ELSE
              IF I = 15 THEN PARM = P15;
         IF PARM = ''
              THEN GO TO ENDLP;
         PARM = @STRIP(PARM);
         TEXT = @SPARS(PARM,KEYTAB,INDX);
         IF INDX = 0
              THEN RETURN(' FIELD MACRO - PARAMETER # '××I××
                ' IS IN ERROR');
         L = LENGTH(TEXT);
         PMASK = SUBSTR(PMASK,1,INDX-1)××'1'××
          SUBSTR(PMASK,INDX+1,15-INDX);
         IF INDX = 1 /* TEST FOR NAME KEYWORD */
              THEN FLDN = TEXT;
              ELSE
         IF INDX = 2 /* TEST FOR POSITION KEYWORD */
              THEN DO;
                   J = INDEX(TEXT,',');
                   IF J = 0
                        THEN DO;
                             COL = 1;
                             J = L+1;
                             END;
                        ELSE COL = SUBSTR(TEXT,J+1);
                   ROW = SUBSTR(TEXT,1,J-1);
                   FLDSBAB = (ROW-1)*@COLS+COL-1;
                   FLDSBA = @CONSBA(FLDSBAB);
                   END;
              ELSE
         IF INDX = 3 /* TEST FOR LITERAL */
              THEN LIT = TEXT;
              ELSE
         IF INDX = 4 /* TEST FOR LENGTH */
              THEN LNTH = TEXT;
              ELSE
         IF INDX = 5 /* TEST FOR PICTURE */
              THEN DO;
                   PIC = TEXT;
                   PICTST = SUBSTR(PIC,1,1);
                   INLEN = 0;
                   M = 1;
                   DO K = 1 TO L;
                        N = INDEX(SUBSTR(PIC,M),'(')+M-1;
                        IF N < M
                             THEN N = L+1;
                        INLEN=INLEN+N-M;
                        IF N > L
                             THEN K = L;
                             ELSE DO;
                                  M=INDEX(SUBSTR(PIC,N+1),')')+N+1;
                                  PICTST = SUBSTR(PIC,M,1);
                                  IF M = L
                                       THEN K = L;
                                  P = SUBSTR(PIC,N+1,M-N-2);
                                  INLEN = INLEN + P;
                                  END;
                        END;
                   IF PICTST = 'X'
                        THEN PICFLG = '00';/* ALPHAMERIC (ANY CHAR) */
                        ELSE IF PICTST = '.' × PICTST = '9'
                             THEN PICFLG = '01'; /* NUMERIC */
                             ELSE IF PICTST = 'A'
                                  THEN PICFLG = '10';/*ALPHABETIC*/
                                  ELSE PICFLG = '11';/* HEXADECIMAL */
                   FLAGS=SUBSTR(FLAGS,1,9)××PICFLG××SUBSTR(FLAGS,12,5);
                   END;
              ELSE
         IF INDX = 6 /* TEST FOR PREMOD */
              THEN FLAGS=SUBSTR(FLAGS,1,7)××'1'××SUBSTR(FLAGS,9,8);
              ELSE
         IF INDX = 7 /* TEST FOR HIGH INTENSITY */
              THEN FLAGS=SUBSTR(FLAGS,1,4)××'10'××SUBSTR(FLAGS,7,10);
              ELSE
         IF INDX = 8 /* TEST FOR NODISPLAY */
              THEN FLAGS=SUBSTR(FLAGS,1,4)××'11'××SUBSTR(FLAGS,7,10);
              ELSE
         IF INDX = 9 /* TEST FOR VERIFY */
              THEN FLAGS='1'××SUBSTR(FLAGS,2,15);
              ELSE
         IF INDX = 10 /* TEST FOR AUTODUP */
              THEN FLAGS=SUBSTR(FLAGS,1,1)××'1'××SUBSTR(FLAGS,3,14);
              ELSE
         IF INDX = 11 /* TEST FOR NOSKIP */
              THEN FLAGS=SUBSTR(FLAGS,1,6)××'1'××SUBSTR(FLAGS,8,9);
              ELSE
         IF INDX = 12 /* TEST FOR LOCASE */
              THEN FLAGS=SUBSTR(FLAGS,1,8)××'0'××SUBSTR(FLAGS,10,7);
              END;
 ENDLP:
         IF SUBSTR(PMASK,1,1)='0' /* TEST FOR NO NAME KEYWORD */
              THEN FLDN = @NULL;
         IF SUBSTR(PMASK,2,1)='0' /* TEST FOR NO POSITION KEYWORD */
              THEN RETURN('ERROR IN FIELD MACRO, NO POSITION KEYWORD');
         LITLEN = LENGTH(LIT);
         PICOFF = 36 + LNTH;
         IF SUBSTR(PMASK,5,1)='0' /* TEST FOR NO PICTURE KEYWORD */
              THEN DO;
                   FLAGS=SUBSTR(FLAGS,1,2)××'11'××SUBSTR(FLAGS,5,12);
                   PIC = '';
                   END;
         PICLEN = LENGTH(PIC);
         IF SUBSTR(PMASK,4,1)='0' /*TEST FOR NO LENGTH KEYWORD*/
              THEN IF SUBSTR(PMASK,3,1)='1' /*TEST FOR LITERAL KEY*/
                   THEN LNTH = LITLEN;
                   ELSE LNTH = INLEN;
         IF LNTH < LITLEN
              THEN LNTH = LITLEN;
         IF LNTH < INLEN
              THEN LNTH = INLEN;
         IF SUBSTR(FLAGS,3,1)='0'
              THEN INOFF = @@INOFF;
              ELSE INOFF = 0;
         FLDLEN=38+LITLEN+PICLEN;
         @@PNLLEN=@@PNLLEN+FLDLEN;
         IF INLEN ^= 0
              THEN DO;
                   @@INCNT=@@INCNT+1;
                   @@INDYN=@@INDYN××', 4 '××FLDN××'LEN FIXED BIN(15,0)'
                    ××' INIT('××@NUMSTR(INLEN)××')'××
                    ', 4 '××FLDN××' CHAR('××@NUMSTR(INLEN)××
                    ') VARYING';
                   @@INOFF=@@INOFF+4+INLEN;
                   END;
         @@PNLSTR=@@PNLSTR××', 4 '××FLDN××', 5 @FLDLEN FIXED BIN(15,0)'
           ××' INIT('××@NUMSTR(FLDLEN)××'), 5 @FLDNAME CHAR(8) '××
           'INIT('''××FLDN××'''), 5 @FLDNUM FIXED BIN(15,0) INIT('××
 @NUMSTR(@@FLDNUM)××'), 5 @FLDINUM FIXED BIN(15,0) INIT('××
 @NUMSTR(@@INCNT)××
 '), 5 @INLEN FIXED BIN(15,0) INIT('××@NUMSTR(INLEN)××'), 5 '
 ××' @INOFF FIXED BIN(31,0) INIT('××@NUMSTR(INOFF)××'), 5 @OUTOFF '××
 'FIXED BIN(31,0) INIT('××@NUMSTR(@@OUTOFF)××'), '××
 '5 @PICOFF FIXED BIN(31,0) INIT('××@NUMSTR(PICOFF)××'), 5 '××
           ' @FLAGS BIT(16) INIT('''××FLAGS××'''B), '××
           '5 @FLDSBA BIT(16) INIT('××FLDSBA××
           '), 5 @FLDSBAB FIXED BIN(15,0) INIT('××@NUMSTR(FLDSBAB)××
           '), 5 @LITLEN FIXED BIN(15,0) '××
           'INIT('××@NUMSTR(LITLEN)××'), 5 ';
         IF LITLEN ^= 0
              THEN @@PNLSTR=@@PNLSTR××'@LITERAL CHAR('××
                @NUMSTR(LITLEN)××
                ') INIT('''××LIT××'''), 5 ';
         @@PNLSTR=@@PNLSTR××'@PICLEN FIXED BIN(15,0) INIT('××
           @NUMSTR(PICLEN)××')';
         IF PICLEN ^= 0
              THEN @@PNLSTR=@@PNLSTR××', 5 @PICTURE CHAR('
                   ××@NUMSTR(PICLEN)××') INIT('''××PIC××''')';
         @@OUTDYN=@@OUTDYN××', 4 '××FLDN××'LEN FIXED BIN(15,0) INIT('××
 @NUMSTR(LNTH)××'), 4 '××FLDN××' CHAR('××@NUMSTR(LNTH)××') '××
           'VARYING INIT('''××LIT××''')';
         @@OUTOFF=@@OUTOFF+4+LNTH;
         IF LENGTH(@@PNLSTR) > 28000 /*CHANGED - ADDED*/
              THEN DO; /*CHANGED - ADDED*/
                   IF LENGTH(@@PNLSTRB) = 0 /*CHANGED - ADDED*/
                        THEN @@PNLSTRB=@@PNLSTR; /*CHANGED - ADDED*/
                        ELSE @@PNLSTRA=@@PNLSTR; /*CHANGED - ADDED*/
                   @@PNLSTR=''; /*CHANGED - ADDED*/
                   END; /*CHANGED - ADDED*/
         RETURN('');
         /*%*/ END @FIELD;
 /* @ENDPNL */
 /*CHANGED - COMMENTS DELETED*/
         /*% DCL @ENDPNL ENTRY; */
 /*%*/ @ENDPNL: PROC(P1) RETURNS(CHAR VAR);
         DCL (RET,P1) CHAR VAR;
         DCL (I,INOFF,OUTOFF) FIXED;
         @@PNLSTA='DCL 1 '××@@PNLNAME××' STATIC UNALIGNED,'
          ××' 3 @PNLLEN FIXED BIN'
 ××'(15,0) INIT(-'××@NUMSTR(@ROWS*@COLS)
 ××'), 3 @PNLNAME CHAR(8) INIT('''××
 @@PNLNAME××'''), 3 @PNLNUM FIXED BIN(15,0) INIT('××@NUMSTR(@@PNLNUM)××
 '), 3 @INCNT FIXED BIN(15,0) INIT('××@NUMSTR(@@INCNT)××'), 3 @FLDCNT '
 ××' FIXED BIN(15,0) INIT('××@NUMSTR(@@FLDNUM)××')'
 ××SBASAV××'), 3 @NEWLEN FIXED BIN(31,0) INIT('××@NUMSTR(@@PNLLEN)××
 '), 3 @FLDDESCR';
 @@PNLARY=@@PNLARY××'@PNLSTAPT('××@NUMSTR(@@PNLNUM)××')=ADDR('××
 @@PNLNAME××'); @PNLDYNPT('××@NUMSTR(@@PNLNUM)××
 ')=ADDR('××@@PNLNAME××'_DYNAM);';
         I = @@FLDNUM/8;
         IF I*8 < @@FLDNUM
              THEN I = I + 1;
         /* I NOW EQUALS THE LENGTH IN BYTES OF @OUTFLAG */
         OUTOFF = I + 10;
         INOFF = OUTOFF + @@OUTOFF;
         @@PNLDYN='DCL 1 '××@@PNLNAME××'_DYNAM UNALIGNED, 3 @INOFF '××
 'FIXED BIN(31,0) INIT('××@NUMSTR(INOFF)××'), 3 @OUTOFF FIXED '××
 'BIN(31,0) INIT('××@NUMSTR(OUTOFF)××
 '), 3 @DYNCNT FIXED BIN(15,0) INIT('××@NUMSTR(@@FLDNUM)××
           '), 3 '××@@PNLNAME××'_OUTFLAG('××
           @@FLDNUM××') BIT(1) INIT(('××@NUMSTR(@@FLDNUM)××
 ')(1)''0''B), 3 '××@@PNLNAME××'_OUT '××@@OUTDYN××', 3 '××
 /*CHANGED - @@OUTDYN */
           @@PNLNAME××'_IN '××@@INDYN;
 /*CHANGED - @@INDYN */
 /*CHANGED RET=@@PNLSTA××'; '××@@PNLDYN××';';*/ RET = '';
         IF P1 = 'LAST'
              THEN RET=RET××
                'DCL 1 @PNLARYS UNALIGNED, 2 @ARYCNT FIXED '××
           'BIN(31,0)'××
 ' INIT('××@NUMSTR(@@PNLNUM)××'), 2 @PNLARY('××@NUMSTR(@@PNLNUM)××'),'××
           ' 3 @PNLSTAPT PTR, 3 @PNLDYNPT PTR;'××
           @@PNLARY××
           'DCL @PNLCNT FIXED BIN(15,0)'
           ××' INIT('××@NUMSTR(@@PNLNUM)××');';
         RETURN(RET);
         /*%*/ END @ENDPNL;
         END PNL;
