   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT027,AC,MARK,MK,BOUNDS,BNDS */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RENT';
   % @RENTNAME ='DENT027';
   % INCLUDE DENTSUB;
   DCL SETCAPS ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL LASTCON CHAR(4) STATIC INIT('LAST');
   DCL FIRSTCON CHAR(5) STATIC INIT('FIRST');
   DCL STR CHAR(80) VAR;
   DCL (SAVPTR,ORGPTR) PTR;
   RHRC=0;
   SELECT(CMDINDX);
     WHEN(3,4) CALL MK; /* IT IS MARK, MK SUBCOMMANDS */
     WHEN(1,2) CALL AC; /* IT IS AC SUBCOMMAND */
     WHEN(5,6) CALL BNDS; /* IT IS BOUNDS,BNDS SUBCOMMAND */
     OTHERWISE;
     END; /* SELECT */

 AC: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS AC SUBCOMMAND                                 *
 *                                                                 *
 ******************************************************************/
   /* 1  2     3     4    5    6    7    */
   /* AC <STR> <COL> <L1> <L2> <LM> <RM> */
   STR = PARY(2);
   IF PARY(3)=''
     THEN DO;
       MSGDATA ='REQUIRED OPERAND MISSING';
       RHRC = 8;
       RETURN;
       END;
   LM=1; /* SET DEFAULTS */
   RM=99999999;
   COL=PARY(3);
   IF PARY(4)=''
     THEN DO;
       L1=0;
       L2=99999999;
       END;
     ELSE DO;
       L1 = PARY(4);
       IF PARY(5) =''
         THEN L2=99999999;
         ELSE DO;
           L2=PARY(5);
           IF PARY(7)=''
             THEN IF PARY(6)^=''
               THEN RM=PARY(6);
               ELSE;
             ELSE DO;
               LM=PARY(6);
               RM=PARY(7);
               END;
           END;
       END;
   TCOL=COL-LM+1; /* TCOL=OFFSET, RELATIVE TO START OF BUF */
   ORGPTR = RECPTR;
   CALL #MD(RHPTR,SUBENT,L1); /* CALL MDPROC */
   SAVPTR = RECPTR;
   DO RECPTR=RECPTR REPEAT NXTPTR WHILE(RECSEQ<=L2)
     UNTIL(NXTPTR=HDPTR);
     IF LENGTH(RECSTR)>=LM
       THEN DO;
         I=INDEX(SUBSTR(RECSTR,LM),STR);
         IF I^=0
           THEN DO;
             I=I+LM-1;
             IF I^=COL & I>=LM & I<=RM
               THEN CALL ADJUST; /* GO SHIFT DATA */
             END;
         END;
     END;
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
   SAVEFLAG ='1'B;
   RHRC = 0;
   END AC;

 BNDS: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS BNDS SUBCOMMAND                               *
 *                                                                 *
 ******************************************************************/
   DCL KEYTAB(3) CHAR(5) VAR STATIC INIT('LEFT','RIGHT','LIST');
   DCL (I,J,K,L) FIXED BIN(15,0);
   I=RH_LB;
   J=RH_RB;
   IF PARY(2)=''
     THEN PARY(2)='LIST';
   IF VERIFY(PARY(2),'0123456789')=0
     THEN DO; /* IT IS OF FORM "BNDS N1 N2 */
       I=PARY(2);
       IF PARY(3)^=''
         THEN J=PARY(3);
       CALL SETLBRB(I,J);
       RETURN;
       END;
   CALL SETCAPS(PARY(2));
   DO L = 1 TO HBOUND(KEYTAB,1)
     UNTIL(PARY(2)=SUBSTR(KEYTAB(L),1,MIN(5,LENGTH(PARY(2)))));
     END;
   K=MOD(@CURLOC,LINESIZE)-RHPMAXLN-1;
   SELECT(L);
     WHEN(1) I=K; /* LEFT */
     WHEN(2) J=K; /* RIGHT */
     WHEN(3) DO;  /* LIST */
       PUT STRING(MSGDATA) EDIT(RH_LB,RH_RB)(2 P'ZZZZZ9');
       RETURN;
       END;
     OTHERWISE DO;
       MSGDATA='INVALID KEYWORD';
       RHRC=8;
       RETURN;
       END;
     END; /* SELECT */
   CALL SETLBRB(I,J);
   RETURN;
 SETLBRB: PROC(I,J); /* NESTED SUBROUTINE TO SET BOUNDS */
   DCL (I,J) FIXED BIN(15,0);
   IF I>J
     THEN DO;
       MSGDATA='LOWER BOUND MUST BE <= UPPER BOUND';
       RHRC=8;
       RETURN;
       END;
   RH_LB=I;
   RH_RB=J;
   CALL #TABDISP(RHPPTR); /* GO CHANGE DISPLAY */
   END SETLBRB;

   END BNDS;

 MK: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS MK SUBCOMMAND                                 *
 *                                                                 *
 ******************************************************************/
   IF PARY(2)='' /* IS IT LIST REQUEST? */
     THEN DO;
       PUT STRING(MSGDATA) EDIT(MARKARY(1),MARKARY(2),MARKARY(3),
       MARKARY(4),MARKARY(5),MARKARY(6))(X(1),P'ZZZZZZZ9');
       RHRC = 0;
       RETURN;
       END;
   I = PARY(2);
   IF I>6 × I<1
     THEN DO;
       MSGDATA='MARK INDEX OUT OF RANGE';
       RHRC = 8;
       RETURN;
       END;
   IF VERIFY(PARY(3),'0123456789')=0
     THEN J=PARY(3);
     ELSE DO;
       IF PARY(3) ='*'
         THEN IF NXTHDR=HDPTR
           THEN J=0;
           ELSE J=RECSEQ;
         ELSE DO;
           CALL SETCAPS(PARY(3));
           IF PARY(3)=SUBSTR(LASTCON,1,MIN(4,LENGTH(PARY(3))))
             THEN IF LSTHDR=HDPTR
               THEN J=0;
               ELSE J=LSTHDR->RECSEQ;
             ELSE IF PARY(3)=SUBSTR(FIRSTCON,1,MIN(5,LENGTH(PARY(3))
             ))
               THEN IF NXTHDR=HDPTR
                 THEN J=0;
                 ELSE J=NXTHDR->RECSEQ;
               ELSE DO;
                 MSGDATA='INVALID OPERAND='××PARY(3);
                 RETURN;
                 END;
           END;
       END;
   MARKARY(I)=J;
   RHRC = 0;
   END MK;

   ADJUST:PROC;
     /******************************************************************
     * THIS SUBRTNE IS CALLED WHEN THE DATA IN THE CURRENT RECORD MUST *
     * SHIFTED SO THAT THE CHARACTER IN COLUMN I IS IN COLUMN COL      *
     ******************************************************************/
     DCL (J,K,L,M,TRM,N) FIXED;
     L=LENGTH(RECSTR); /* CURRENT LENGTH OF CURRENT RECORD */
     M=MAXLEN(RECSTR); /* MAXIMUM LENGTH OF CURRENT RECORD */
     TRM=MIN(RM,M); /* TEMPORARY RIGHT MARGIN */
     BUF=SUBSTR(RECSTR,LM,MIN(L,TRM)-LM+1);
     J=I-LM+1; /* NEW INDEX VALUE */
     K=J-TCOL+1; /* K=INDEX TO CHAR TO BE SHIFTED TO COL 1 IN BUF */
     SELECT;
       WHEN(K=1) RETURN; /* NO SHIFT NECESSARY */
       WHEN(K>1) /* DATA MUST BE SHIFTED LEFT */
         IF K > LENGTH(BUF)
           THEN BUF=''; /* DATA SHIFTED TOTALLY OUT OF BUF ON LEFT */
           ELSE BUF=SUBSTR(BUF,K);
       OTHERWISE /* DATA MUST BE SHIFTED RIGHT */
         BUF=REPEAT(' ',ABS(K))××BUF;
       END; /* SELECT */
     N=TRM-LM+1;
     IF LENGTH(BUF)>N
       THEN BUF=SUBSTR(BUF,1,N); /* TRUNCATE ON RIGHT IF NECESSARY */
     IF TRM>=L
       THEN IF LM=1
         THEN RECSTR=BUF;
         ELSE RECSTR=SUBSTR(RECSTR,1,LM-1)××BUF;
       ELSE DO;
         IF LENGTH(BUF)<N
           THEN BUF=BUF××REPEAT(' ',N-LENGTH(BUF)-1);
         IF LM=1
           THEN RECSTR=BUF××SUBSTR(RECSTR,TRM+1);
           ELSE
             RECSTR=SUBSTR(RECSTR,1,LM-1)××BUF××SUBSTR(RECSTR,TRM+1);
         END;
     END ADJUST;
   END;
