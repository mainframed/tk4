 /* @SBACON */
 %NOPRINT;
 /* @TRTAB IS A TABLE USED TO CONVERT AN SBA ADDRESS FROM BINARY TO
    3270 CODE */
         % DCL @TRTAB CHAR;
         % @TRTAB='064,193,194,195,196,'××
                  '197,198,199,200,201,'××
                  '074,075,076,077,078,'××
                  '079,080,209,210,211,'××
                  '212,213,214,215,216,'××
                  '217,090,091,092,093,'××
                  '094,095,096,097,226,'××
                  '227,228,229,230,231,'××
                  '232,233,106,107,108,'××
                  '109,110,111,240,241,'××
                  '242,243,244,245,246,'××
                  '247,248,249,122,123,'××
                  '124,125,126,127';
         % DCL @CONSBA ENTRY;
 % @CONSBA:  PROC(P1) RETURNS(CHAR);
 /*
0*$.HE GENERALIZED SUBROUTINES - @SBACON/@CONSBA
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE CONVERT 3277 SET BUFFER ADDRESS
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$09/17/76
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  @SBACON
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$INVOKE THE @SBACON/@CONSBA PLI PREPROCESSOR PROCEDURES TO
0*$CONVERT THE ADDRESS PORTION OF A 3277 SET BUFFER ADDRESS ORDER
0*$TO OR FROM TRANSMISSION CODE.  @CONSBA, GIVEN A DECIMAL INTEGER
0*$FROM 0 TO 1919, WILL RETURN A BIT STRING CONSTANT ('DDDDD'B)
0*$EQUALING A TRANSMISSION CODE FOR THE SAME ADDRESS.  @SBACON,
0*$GIVEN A DECIMAL INTEGER REPRESENTING AN ADDRESS IN TRANSMISSION
0*$CODE, WILL RETURN A BIT STRING CONSTANT EQUALING THE ADDRESS
0*$IN THE FORM OF A NUMBER FROM 0 TO 1919.
0*$CALL FORMAT IS AS FOLLOWS -
0*$.SP 1
0*$.IN 5
0*$@SBACON(NUMBER);
0*$.IN 0
0*$.SP 1
0*$WHERE NUMBER IS THE DECIMAL CONSTANT TO BE CONVERTED.
0*$.SP 1
0*$NOTE THAT @SBACON AND @CONSBA REQUIRE PREPROCESSOR PROCEDURE
0*$@BIT.  IF YOU ARE WRITING A COMMAND PROCESSOR AND HAVE INCLUDED
0*$CPINIT, @BIT IS AUTOMATICALLY INCLUDED IN YOUR PROGRAM.
0*$OTHERWISE, YOU MUST INCLUDE @BIT YOURSELF.
 */
         DCL P1 FIXED;
         DCL (A,B,S1,S2) FIXED;
         A = P1/64;
         B = A/256;
         S1 = A-B*256;
         S2 = P1-A*64;
         S1 = SUBSTR(@TRTAB,S1*4+1,3);
         S2 = SUBSTR(@TRTAB,S2*4+1,3);
         RETURN(@BIT(S1*256+S2,16));
         % END @CONSBA;
         % DCL @SBACON ENTRY;
 % @SBACON: PROC(P1) RETURNS(CHAR);
         DCL P1 FIXED;
         DCL (A,B,S1,S2) FIXED;
         A = P1/256;          /* A = 1ST BYTE */
         S1 = A-(A/64)*64;    /* S1 = LO 6 BITS OF 1ST BYTE */
         B = P1-A*256;        /* B = 2D BYTE */
         S2 = B-(B/64)*64;    /* S2 = LO 6 BITS OF 2D BYTE */
         RETURN(@BIT(S1*64+S2,16));
         % END @SBACON;
 %PRINT;
