   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE057 - SNO,SNOT */
   %INCLUDE ABESUB;
 ABESUB(ABE057) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL (SCANNER,SETCAPS) ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)
     RETURNS(FIXED BIN(15,0));
   DCL SNOBOL ENTRY(CHAR(*) VAR,CHAR(*) VAR,CHAR(80) VAR,ENTRY,ENTRY,
     CHAR(*) VAR,CHAR(*) VAR,CHAR(*) VAR,CHAR(*) VAR,PTR,
     FIXED BIN(15,0),PTR,PTR)
     RETURNS(BIT(1));
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL (LISTHDR,LISTEND,LISTWORK) PTR;
   DCL 1 LISTELEM BASED(LISTPTR),
     2 LISTNXT PTR,
     2 LISTLEN FIXED BIN(15,0),
     2 LISTSTR CHAR(L REFER(LISTLEN)) VAR;
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0);
   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL KEYWORDS(9) CHAR(8) VAR STATIC
     INIT('RESCAN','ANCHOR','FIND','TRIM','PAD','ALL','STACK','EXEC',
       'LOCATE');
   DCL OPERATORS(1) CHAR(1) VAR STATIC INIT(';');
   DCL SPCHARS CHAR(2) VAR STATIC INIT('()');
   DCL STMT CHAR(1024) VAR;
   DCL (RESCANKEY,ANCHORKEY,ALLKEY) CHAR(10) VAR INIT('');
   DCL (FINDSW,LOCSW,REPSW,MATCH,TRIMSW,PADSW,STACKSW,ADDSW,EXECSW)
     BIT(1) INIT('0'B);
   DCL (ADDPTR,DELPTR,MYRHP,ORGPTR,SAVPTR) PTR;
   DCL CURSOR FIXED BIN(15,0);
   DCL MSG CHAR(80) VAR INIT('');
   DCL OPERAND FIXED BIN(15,0)        STATIC INIT(0);
   DCL KEYWORD FIXED BIN(15,0)        STATIC INIT(2);
   DCL QUOTED_STRING FIXED BIN(15,0)  STATIC INIT(4);
   DCL NO_MORE_TOKENS FIXED BIN(15,0) STATIC INIT(6);
   DCL PATPTR PTR;
   DCL SEQPIC PIC 'ZZZZZZZ9';
   DCL MYBUF CHAR(32767) VAR;

   IF CMDINDX=3 /* IS IT SNOT SUBCOMMAND */
     THEN MYBUF='ANCHOR TRIM RTAB(0) $ A = '××CMDBUF;
     ELSE MYBUF=CMDBUF;
   LISTHDR,LISTEND,PATPTR=NULL;
   RHRC=0;
   TOKHDR,CURTOK=NULL;
   I,SCANIX=1;
   CALL SCANNER(MYBUF,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
   IF TYPE=NO_MORE_TOKENS
     THEN RETURN;
   DO WHILE(TYPE=KEYWORD);
     SELECT(TOKSTR);
       WHEN('ALL') ALLKEY='ALL';
       WHEN('ANCHOR') ANCHORKEY=TOKSTR;
       WHEN('EXEC') EXECSW='1'B;
       WHEN('FIND') FINDSW='1'B;
       WHEN('LOCATE') LOCSW='1'B;
       WHEN('PAD') PADSW='1'B;
       WHEN('RESCAN') RESCANKEY=TOKSTR;
       WHEN('STACK') STACKSW='1'B;
       WHEN('TRIM') TRIMSW='1'B;
       OTHERWISE;
       END; /* SELECT */
     I=SCANIX;
     CALL SCANNER(MYBUF,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
     END;
   IF TYPE^=QUOTED_STRING & TOKSTR=':'
     THEN DO;
       I=SCANIX;
       CALL SCANNER(MYBUF,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
       END;
   IF I>LENGTH(MYBUF)
     THEN RETURN; /* NO STMT TO PROCESS */
   STMT=SUBSTR(MYBUF,I);
   MYRHP=RHPTR;
   IF FINDSW
     THEN DO;  /* IT IS FINDALL */
       IF NXTHDR=HDPTR
         THEN DO;
           RHRC = 4;
           RETURN;
           END;
       L = MAXLEN(NXTHDR->RECSTR);
       I=#CMD('SSE',RHPTR,RHHDRPT);
       FREE BUFSTR;
       ALLOCATE BUFSTR;
       END;
   RHRC=4;
   SEQ=0;
   DO FOREVER=1 REPEAT FOREVER;
     ADDPTR=LRN_RHP->RECPTR;
     CALL #ABELSP(RHHDRPT,LRNPTR); /* GET NEXT FROM-SEGMENT */
     IF LISTHDR^=NULL
       THEN CALL ADDONS;
     IF LRN_STRUCTURE.LRN_BUFP=NULL
       THEN LEAVE; /* ALL DONE */
     CALL DOBUF(LSPBUF); /* DOBUF WILL SET REPSW */
     IF LOCSW & REPSW
       THEN LEAVE;
     END;

   I=SNOBOL('','','',GET_OPERAND_CHAR,PUT_OPERAND_CHAR,'','','FREEONLY',
     '',PATPTR,CURSOR,LISTHDR,LISTEND);
   IF MSG^=''
     THEN DO;
       MSGDATA=MSG;
       RHRC=8;
       END;
     ELSE IF ^REPSW
       THEN IF MSGDATA=''
         THEN MSGDATA='TEXT NOT FOUND';
         ELSE;
       ELSE DO;
         MYRHP->SAVEFLAG='1'B;
         RHRC=0;
         END;
   IF ADDSW
     THEN CALL #RESEQ(RHPTR,RHHDRPT,NXTHDR,'NOSAVE','NORENUM',99999999);
   IF FINDSW
     THEN DO;
       HEXMODE=MYRHP->HEXMODE;
       RHTRANSW=MYRHP->RHTRANSW;
       LOFLAG=MYRHP->LOFLAG;
       SAVEFLAG='0'B;
       IF NXTHDR^=NULL
         THEN CALL #NC(RHPTR,NXTHDR); /* POINT TO TOP */
       END;
   RHPTR=MYRHP;
   DO CURTOK=TOKHDR REPEAT DELPTR WHILE(CURTOK^=NULL);
     DELPTR=NEXT_TOKEN;
     FREE TOKEN;
     END;

 ADDONS: PROC;
 /**********************************************************************
 *                                                                     *
 * ADDONS IS CALLED AFTER PATTERN RECOGNITION/REPLACEMENT HAS BEEN     *
 * DONE TO ADD ANY NEW ELEMENTS AFTER THE CURRENT RECORD.              *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L,LEN,OFF) FIXED BIN;

   ADDSW='1'B;
   DO WHILE(LISTHDR^=NULL);
     LISTPTR=LISTHDR;
     LISTHDR=LISTNXT;
     SELECT;
       WHEN(EXECSW) CALL DOEXEC(LISTSTR);
       WHEN(STACKSW) CALL DOSTACK(LISTSTR);
       OTHERWISE CALL #ADD(RHPTR,RHHDRPT,ADDPTR,ADDPTR,-1,LISTSTR,0);
       END; /* SELECT */
     FREE LISTELEM;
     END;
   END ADDONS;

 DOBUF: PROC(LSPBUF);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN LSPBUF CONTAINS A COLUMN TO BE PROCESSED.               *
 *                                                                     *
 **********************************************************************/
   DCL LSPBUF CHAR(*) VAR;
   DCL FNDPTR PTR;

   BUF=LSPBUF;
   SEQPIC=LRN_RHP->RECPTR->RECSEQ;
   CALL PUT_OPERAND_CHAR('SEQ',SUBSTR(SEQPIC,PREFIX(SEQPIC,' ')));
   IF TRIMSW & LENGTH(BUF)>0
     THEN BUF=SUBSTR(BUF,1,SUFFIX(BUF,' '));
   IF PADSW
     THEN BUF=BUF××' ';
   CURSOR=1;
   MATCH=SNOBOL(BUF,STMT,MSG,GET_OPERAND_CHAR,
     PUT_OPERAND_CHAR,RESCANKEY,ANCHORKEY,'',ALLKEY,PATPTR,CURSOR,
     LISTHDR,LISTEND);
   IF MSG^=''
     THEN RETURN;
   IF MATCH
     THEN DO;
       REPSW=MATCH;
       SELECT;
         WHEN(FINDSW) DO;
           SEQ=LRN_RHP->RECPTR->RECSEQ;
           FNDPTR=RHPTR->LSTHDR; /* ADD AT END */
           CALL #ADD(RHPTR,RHHDRPT,FNDPTR,FNDPTR,SEQ,BUF,0);
           END;
         WHEN(STACKSW) CALL DOSTACK(BUF);
         OTHERWISE LSPBUF=BUF;
         END; /* SELECT */
       END;
   END DOBUF;

 DOEXEC: PROC(BUF);
 /**********************************************************************
 *                                                                     *
 * CALLED ON A MATCH IF THE STACK KEYWORD WAS SPECIFIED.               *
 *                                                                     *
 **********************************************************************/
   DCL BUF CHAR(*) VAR;
   DCL I FIXED BIN;

   I=#CMD(BUF,RHPTR,RHHDRPT);
   END DOEXEC;

 DOSTACK: PROC(BUF);
 /**********************************************************************
 *                                                                     *
 * CALLED ON A MATCH IF THE STACK KEYWORD WAS SPECIFIED.               *
 *                                                                     *
 **********************************************************************/
   DCL BUF CHAR(*) VAR;

   CALL #PUSHLIFO(RHPTR,RH_STACK,RH_QUEUE,BUF);
   END DOSTACK;

 GET_OPERAND_CHAR: PROC(PRM,RET);
   DCL (PRM,RET) CHAR(*) VAR;
   CALL #SYMCL(RHHDRPT,RH_SYMTREE,PRM,RET);
   END;

 PUT_OPERAND_CHAR: PROC(PRM,DAT);
   DCL (PRM,DAT) CHAR(*) VAR;
   CALL #SETC(RHHDRPT,RH_SYMTREE,PRM,DAT);
   END;

   END ABE057;
