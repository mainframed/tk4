 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE066 - GDDM,GDDMSASR,GD,GU,XSCALE,XOFFSET,YSCALE,YOFFSET */
   %INCLUDE ABESUB;
 ABESUB(ABE066) PARS(00000000000000000000000000000000000)
   RENT(NO) RECURS(YES);
   %INCLUDE ABESUBA;
   %INCLUDE APLCB;
   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;

   DCL (ABE066C,ABE066G) ENTRY;
   DCL ABE066J ENTRY(PTR,PTR,CHAR(8),DEC FLOAT(6),DEC FLOAT(6));
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL DUM1PTR PTR;
   DCL (VSIZE,HSIZE) DEC FLOAT(6);

   DCL PRY(20) PTR;
   DCL BRY(20) FIXED BIN(31,0);
   DCL FRY(20) DEC FLOAT(6);
   DCL SUBRTNE ENTRY VARIABLE;
   DCL PARM_COUNT FIXED BIN(15,0);
   DCL BFLOAT DEC FLOAT(6) BASED(FLOATPTR),
       BFIXED FIXED BIN(31,0) BASED(FIXEDPTR);
   DCL (CHAR_STACK,FIXED_STACK,FLOAT_STACK) PTR;
   DCL 1 STACK_ELEMENT BASED(ELPTR),
     2 NEL PTR,
     2 SNAME CHAR(8) VAR,
     2 NUM PTR;
   DCL STACKSTR CHAR(256) BASED(STRPTR);

   SELECT(CMDINDX);
     WHEN(1,2) CALL DO_GDDM;
     WHEN(3) DO; /* GDDMSASR DDNAME HSIZE VSIZE */
       IF PARY(1)=''
         THEN PARY(1)='FT14F001';
       IF PARY(2)^=''
         THEN HSIZE=PARY(2);
         ELSE HSIZE=10;
       IF PARY(3)^=''
         THEN VSIZE=PARY(3);
         ELSE VSIZE=10;
       CALL ABE066J(RHPTR,RHHDRPT,PARY(1),HSIZE,VSIZE);
       RETURN;
       END;
     WHEN(4) /* GD X1 Y1 X2 Y2 . . . */
       DO I=1 TO HBOUND(PARY,1)-1 BY 2 WHILE(PARY(I)^='');
         CALL GSLINE(RH_XSCALE*FLOAT(PARY(I))-RH_XOFFSET,
           RH_YSCALE*FLOAT(PARY(I+1))-RH_YOFFSET);
         END;
     WHEN(5) /* GU X Y */
       CALL GSMOVE(RH_XSCALE*FLOAT(PARY(1))-RH_XOFFSET,
         RH_YSCALE*FLOAT(PARY(2))-RH_YOFFSET);
     WHEN(6) RH_XSCALE=FLOAT(PARY(1));
     WHEN(7) RH_XOFFSET=FLOAT(PARY(1));
     WHEN(8) RH_YSCALE=FLOAT(PARY(1));
     WHEN(9) RH_YOFFSET=FLOAT(PARY(1));
     OTHERWISE;
     END; /* SELECT */

 DO_GDDM: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT SUBCOMMAND IS GDDM                          *
 *                                                                     *
 **********************************************************************/

   ON CONDITION(BADPLOT) GO TO BADEXIT;
   CHAR_STACK,FIXED_STACK,FLOAT_STACK=NULL;
   CALL SETCAPS(PARY(1));
   PARM_COUNT=0; /* INITIALIZE GLOBAL */
   RHRC=ABE066C(PARY(1),SUBRTNE,SETPARM);
   IF RHRC=0
     THEN CALL ABE066G(PARM_COUNT,SUBRTNE,PRY);
     ELSE DO;
       MSGDATA=PARY(1)××' NOT FOUND';
       SIGNAL CONDITION(BADPLOT);
       END;

   DO WHILE(CHAR_STACK^=NULL);
     ELPTR=CHAR_STACK;
     CHAR_STACK=NEL;
     CALL #SETC(RHHDRPT,RH_SYMTREE,SNAME,SUBSTR(NUM->STACKSTR,1,
       MAX(1,SUFFIX(NUM->STACKSTR,' '))));
     FREE NUM->STACKSTR;
     FREE STACK_ELEMENT;
     END;
   DO WHILE(FIXED_STACK^=NULL);
     ELPTR=FIXED_STACK;
     FIXED_STACK=NEL;
     CALL #SETA(RHHDRPT,RH_SYMTREE,SNAME,NUM->BFIXED);
     FREE STACK_ELEMENT;
     END;
   DO WHILE(FLOAT_STACK^=NULL);
     ELPTR=FLOAT_STACK;
     FLOAT_STACK=NEL;
     CALL #SETA(RHHDRPT,RH_SYMTREE,SNAME,NUM->BFLOAT);
     FREE STACK_ELEMENT;
     END;
   RETURN;
 BADEXIT:
   IF MSGDATA=''
     THEN MSGDATA='INVALID GDDM SUBCOMMAND';
   IF RHRC=0
     THEN RHRC=8;
   RETURN;
   END DO_GDDM;

 FIND_ARRAY: PROC(NAME) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE THE MATRIX TO BE PASSED TO A MATRIX UTILITY.       *
 *                                                                     *
 **********************************************************************/
   DCL NAME CHAR(*) VAR;
   DCL RHP PTR;
   DCL I FIXED BIN;

   CALL SETCAPS(NAME);
   RHP=LOCRHP(NAME);
   IF RHP=NULL
     THEN DO;
       IF NAME='BITMAP'
         THEN DO;
           IF RHPLOT79=NULL
             THEN I=#CMD('GR DEVICE 100 100 720 384 1',RHPTR,RHHDRPT);
           RETURN(BITMAPA);
           END;
       MSGDATA='ARRAY NAMED '××NAME××' NOT FOUND';
       SIGNAL CONDITION(BADPLOT);
       END;
   RETURN(PTROUT(PTRIN(ADDR(RHP->NXTHDR->RECSTR))+2));
   END FIND_ARRAY;

 LOCRHP: PROC(PRM) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE A DATASET WITH SPECIFIED SYMBOLIC NAME (RHNAME).   *
 *                                                                     *
 **********************************************************************/
   DCL PRM CHAR(*) VAR;
   DCL TRH PTR;

   CALL SETCAPS(PRM);
   DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
     UNTIL(TRH->RHNAME=PRM);
     END;
   RETURN(TRH);
   END LOCRHP;

 PUSH: PROC(STACK,NAME,NUMPTR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PUSH ELEMENTS ON THE SPECIFIED STACK                      *
 *                                                                     *
 **********************************************************************/
   DCL (STACK,NUMPTR,NEWEL) PTR;
   DCL NAME CHAR(*);

   ALLOCATE STACK_ELEMENT SET(NEWEL);
   NEWEL->NEL=STACK;
   STACK=NEWEL;
   NEWEL->SNAME=NAME;
   NEWEL->NUM=NUMPTR;
   END PUSH;

 SETPARM: PROC(PARM_TYPE);
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET UP A PARAMETER TO A GDDM SUBROUTINE.                  *
 *                                                                     *
 **********************************************************************/
   DCL PARM_TYPE CHAR(*);
   DCL IX FIXED BIN(15,0);
   DCL I FIXED BIN;
   DCL HDR PTR;

   PARM_COUNT=PARM_COUNT+1; /* INCREMENT PARAMETER COUNT */
   IX=PARM_COUNT+1;
   IF LENGTH(PARY(IX))=0
     THEN DO;
       PUT STRING(MSGDATA) EDIT('MISSING PARAMETER #',IX)
         (A,P'99');
       SIGNAL CONDITION(BADPLOT);
       END;
   SELECT(PARM_TYPE);
     WHEN('BIN FIXED(31)','DEC FLOAT(6)') DO;
       IF PARM_TYPE='DEC FLOAT(6)'
         THEN PRY(PARM_COUNT)=ADDR(FRY(PARM_COUNT));
         ELSE PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
       IF SUBSTR(PARY(IX),1,1)='('
         THEN DO;
           I=#CMD('CALC '××PARY(IX),RHPTR,RHHDRPT);
           IF I^=0 × MSGDATA=''
             THEN SIGNAL CONDITION(BADPLOT);
           PARY(IX)=SUBSTR(MSGDATA,1,SUFFIX(MSGDATA,' '));
           PARY(IX)=SUBSTR(PARY(IX),PREFIX(MSGDATA,' '));
           MSGDATA='';
           END;
       CALL SETCAPS(PARY(IX));
       SELECT;
         WHEN(VERIFY(PARY(IX),'.+-0123456789E')=0)
           IF PARM_TYPE='DEC FLOAT(6)'
             THEN FRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             ELSE BRY(PARM_COUNT)=PARY(IX); /* NUM CON */
         WHEN(SUBSTR(PARY(IX),1,1)='&') DO; /* SYMBOLIC VAR */
           IF PARM_TYPE='DEC FLOAT(6)'
             THEN FRY(PARM_COUNT)=
               #SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(PARY(IX),2));
             ELSE BRY(PARM_COUNT)=
               #SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(PARY(IX),2));
           END;
         WHEN(SUBSTR(PARY(IX),1,1)='%') DO; /* SYMBOLIC OUTPUT VAR */
           IF PARM_TYPE='DEC FLOAT(6)'
             THEN CALL PUSH(FLOAT_STACK,SUBSTR(PARY(IX),2),
               PRY(PARM_COUNT));
             ELSE CALL PUSH(FIXED_STACK,SUBSTR(PARY(IX),2),
               PRY(PARM_COUNT));
           END;
         OTHERWISE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
         END; /* SELECT */
       END;
     WHEN('ARRAY') SELECT;
       WHEN(PARQCK(IX)) /* QUOTED STRING? */
         PRY(PARM_COUNT)=PTROUT(PTRIN(ADDR(PARY(IX)))+2);
       WHEN(VERIFY(PARY(IX),'.+-0123456789')=0)
         IF INDEX(PARY(IX),'.')=0
           THEN DO;
             PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
             BRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
           ELSE DO;
             PRY(PARM_COUNT)=ADDR(FRY(PARM_COUNT));
             FRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
       OTHERWISE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
       END; /* SELECT */
     WHEN('CHAR') SELECT;
       WHEN(PARQCK(IX)) /* QUOTED STRING? */
         PRY(PARM_COUNT)=PTROUT(PTRIN(ADDR(PARY(IX)))+2);
       WHEN(SUBSTR(PARY(IX),1,1)='%') DO; /* SYMBOLIC OUTPUT VAR */
         CALL SETCAPS(PARY(IX));
         ALLOCATE STACKSTR SET(STRPTR);
         STRPTR->STACKSTR='';
         CALL PUSH(CHAR_STACK,SUBSTR(PARY(IX),2),STRPTR);
         PRY(PARM_COUNT)=ADDR(STRPTR->STACKSTR);
         END; /* WHEN DO */
       OTHERWISE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
       END; /* WHEN SELECT */
     WHEN('ANYTHING') DO;
       IF VERIFY(PARY(IX),'.+-0123456789')=0
         THEN IF INDEX(PARY(IX),'.')=0
           THEN DO;
             PRY(PARM_COUNT)=ADDR(BRY(PARM_COUNT));
             BRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
           ELSE DO;
             PRY(PARM_COUNT)=ADDR(FRY(PARM_COUNT));
             FRY(PARM_COUNT)=PARY(IX); /* NUM CON */
             END;
         ELSE IF PARQCK(IX) /* QUOTED STRING? */
           THEN PRY(PARM_COUNT)=PTROUT(PTRIN(ADDR(PARY(IX)))+2);
           ELSE PRY(PARM_COUNT)=FIND_ARRAY(PARY(IX));
       END;
     OTHERWISE DO;
       MSGDATA='INVALID PARAMETER TYPE='××PARM_TYPE;
       SIGNAL CONDITION(BADPLOT);
       END;
     END; /* SELECT */
   END SETPARM;

   %INCLUDE SYSLIB(ADMUPING);
   END ABE066;
