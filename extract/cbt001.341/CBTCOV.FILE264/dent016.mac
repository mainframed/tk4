 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT016 - DENT */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RECURSIVE';
   % @RENTNAME ='DENT016';
   % INCLUDE DENTSUB;
   % INCLUDE JFCB;
   % INCLUDE DCB;
   % INCLUDE DCBQSAM;
   DCL 1 PARSSTR,
       /* THIS STRUCTURE CONSOLIDATES ALL OF THE INFORMATION PARSED
       FROM THE CURRENT SSE SUBCOMMAND. A POINTER TO IT IS PASSED TO
       THE FAM MODULE. */
     2 RECTMP   PTR,                   /* PTR TO RECHDR FOR NEW DS */
     2 FAMNAME  CHAR(8) INIT(''),      /* NAME IN FAM(NAME DATA) */
     2 FAMBUF   CHAR(256) VAR INIT(''),/* DATA IN FAM(NAME DATA) */
     2 INFI     CHAR(8) INIT(''),      /* INFI KEYWORD OPERAND */
     2 OUTFI    CHAR(8) INIT(''),      /* OUTFI KEYWORD OPERAND */
     2 INDSN    CHAR(44) VAR INIT(''), /* POSITIONAL PARAMETER */
     2 OUTDSN   CHAR(44) VAR INIT(''), /* OUTDA KEYWORD OPERAND */
     2 PARSEFLAGS,                     /* WILL ALWAYS BE 16 BITS LONG */
      3 HISW      BIT(1) INIT('0'B),   /* ON IF HI KEYWORD SPECIFIED */
      3 LOSW      BIT(1) INIT('0'B),   /* ON IF LO KEYWORD SPECIFIED */
      3 NOFSW     BIT(1) INIT('0'B),   /* ON IF NOFREE SPECIFIED */
      3 NOPRSW    BIT(1) INIT('0'B),   /* ON IF NOPREFIX SPECIFIED */
      3 PROFSW    BIT(1) INIT('0'B),   /* ON IF PROFILE SPECIFIED */
      3 SYSSW     BIT(1) INIT('0'B),   /* ON IF SYSOUT SPECIFIED */
      3 DBDSW     BIT(1) INIT('0'B),   /* ON IF DBD SPECIFIED */
      3 NODBDSW   BIT(1) INIT('0'B),   /* ON IF NODBD SPECIFIED */
      3 COBOLSW   BIT(1) INIT('0'B),   /* ON IF COBOL SWITCH SPEC */
      3 NOSHOWSW  BIT(1) INIT('0'B),   /* ON IF NOSHOW SWITCH SPEC */
      3 PAD       BIT(6) INIT('0'B),   /* PAD TO FILL OUT 16 BITS */
     2 PRI      CHAR(8) VAR INIT('1'), /* PRI KEYWORD OPERAND */
     2 SECY     CHAR(8) VAR INIT('5'), /* SECY KEYWORD OPERAND */
     2 FLINE    FIXED BIN(31,0) INIT(1), /* LINE KEYWORD */
     2 COUNT    FIXED BIN(31,0) INIT(9999999), /* COUNT KEYWORD OPER */
     2 INPBUF   CHAR(256) VAR INIT(''),/* INPUT KEYWORD */
     2 ALCODE CHAR(3) VAR INIT('INO'); /* CODE PASSED TO #DOALC */
   DCL SAVECMDDATA CHAR(256) VAR;
   DCL SAVEMSGDATA CHAR(80) VAR;
   DCL SYSJFCB ENTRY(CHAR(8),PTR);
   DCL JFCBCOR CHAR(176);
   JFCBPTR=ADDR(JFCBCOR);
   DCL FINDDCB ENTRY(CHAR(8))RETURNS(PTR);
   DCL SAVRFM BIT(8);
   DCL PLILOAD ENTRY(CHAR(8),ENTRY,FIXED BIN(15,0));
   DCL LOADRET FIXED BIN(15,0);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL SYSLOAD ENTRY;
   DCL SYSCTLG ENTRY;
   DCL STLINEN ENTRY(FIXED BIN(15,0),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL ERRMSG CHAR(130) VAR;
   DCL RET BIT(32);
   DCL CTLGDSN CHAR(44);
   DCL CVOL CHAR(6) INIT('SYSRES');
   DCL AREA CHAR(265);
   DCL PGMNAME CHAR(8) STATIC INIT('VTAMIO');
   DCL KEYTABLE(34) CHAR(80) VAR STATIC INIT('OUTDA','NONUM','LOCASE',
     'SUBCALL','NAME','HICASE','SYSOUT','VTERM','TRANSLAT','NOPREFIX',
     'HEX','PRI','SECY','LINE','COUNT','HARDCOPY','INFILE','NOFREE',
     'PDF','PDFC','PDFE','INPUT','SUPPORT','PROFILE','NOPROMPT',
     'CLIST','RECSIZE','OUTFI','FAM','DBD','NODBD','COBOL','YECH',
     'NOSHOW');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL CL CHAR(80) VAR INIT('');
   DCL CLOP CHAR(80) VAR;
   DCL KEYLAB(0:34) LABEL;
   DCL (RECLUP,DUMPTR) PTR;
   DCL L FIXED BIN(15,0) INIT(256);
   DCL SYSODSN CHAR(44) VAR;
   DCL OCMD CHAR(240) VAR;
   DCL HELPSTR CHAR(4) VAR STATIC INIT('');
   DCL PRESYM CHAR(8) STATIC INIT('&SYSPREF');
   DCL TSOPREF CHAR(100) VAR;
   DCL JOBPREF CHAR(100) VAR INIT('');
   DCL DSNLIST CHAR(256) VAR;
   RHRC=0;
   IF PARY(2)^=''
     THEN IF SUBSTR(PARY(2),1,1)='(' &
       SUBSTR(PARY(2),LENGTH(PARY(2)),1)=')'
       THEN DO; /* IT IS DSNLIST */
         DSNLIST=SUBSTR(PARY(2),2,LENGTH(PARY(2))-2);
         DO FOREVER=1 REPEAT FOREVER;
           I=INDEX(DSNLIST,' '); /* FIND FIRST BLANK */
           IF I=0
             THEN I=LENGTH(DSNLIST)+1;
           IF I=1
             THEN RETURN;
           PARY(2)=SUBSTR(DSNLIST,1,I-1);
           IF I>LENGTH(DSNLIST)
             THEN DSNLIST='';
             ELSE DO;
               DSNLIST=SUBSTR(DSNLIST,I);
               I=PREFIX(DSNLIST,' '); /* FIND FIRST NONBLANK */
               IF I=0
                 THEN DSNLIST='';
                 ELSE DSNLIST=SUBSTR(DSNLIST,I);
               END;
           CALL #DENT(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT);
           END;
         END;
   ON ERROR BEGIN;
     ON ERROR SYSTEM;
     ERRMSG='INVALID PARAMETER CAUSED PROGRAM INTERRUPT';
     SIGNAL CONDITION(BADSSE);
     END;
   ON CONDITION(BADSSE)BEGIN;
     IF RHPTR=NULL
       THEN CALL #TERM(ERRMSG);
       ELSE MSGDATA=ERRMSG;
     IF RECTMP->INDDN^=NULL
       THEN FREE RECTMP->INDDN->ALCSTR;
     IF RECTMP->OUTDDN^=NULL
       THEN FREE RECTMP->OUTDDN->ALCSTR;
     IF RECTMP^=NULL
       THEN FREE RECTMP->RECHDR;
     RHRC=8;
     GOTO FINIS;
     END;
   ON UNDEFINEDFILE(RH_SEQ_INTERNAL)BEGIN;
     ERRMSG='CAN''T OPEN FILE '××INFI;
     SIGNAL CONDITION(BADSSE);
     END;
   ALLOCATE RECHDR SET(RECTMP);
   STRING(RECTMP->RHFLAGS)='0'B;
   STRING(RECTMP->RHFLAGS2)='0'B;
   RECTMP->RHNAME='====>';
   RECTMP->INDDN,RECTMP->OUTDDN=NULL;
   RECTMP->TERMID ='';
   RECTMP->TERMECB = 0;
   RECTMP->TERMEP = NULL;
   RECTMP->MARKARY(*)=0;
   RECTMP->SEQSTRT = 10;
   RECTMP->SEQINCR = 10;
   RECTMP->CURSEQ = 0;
   RECTMP->PFPB ='PF';
   RECTMP->CMDDATA ='';
   RECTMP->MSGDATA ='';
   RECTMP->CMDDISPLAY='';
   RECTMP->CURSOR_SEQ=0;
   RECTMP->RHSPFFLST='';
   RECTMP->RHSPFCLST='';
   RECTMP->BLHDR = NULL;
   RECTMP->FINDTEXT ='';
   RECTMP->RHLST,RECTMP->RHNXT = NULL;
   RECTMP->HDPTR,RECTMP->RECPTR = RECTMP;
   RECTMP->LSTHDR,RECTMP->NXTHDR = RECTMP->HDPTR;
   RECTMP->RHFAMCB,RECTMP->RHSPCPT=NULL;
   RECTMP->RHUSENM='';
   RECTMP->RHUSEHD=NULL;
   RECTMP->RHELSIZE=1;
   RECTMP->RHCOUNT=0;
   DO I = 3 TO 16;
     IF PARY(I)^=''
       THEN DO;
         CALL SETCAPS(PARY(I));
         CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX); /* CALL SPARS */
         GO TO KEYLAB(INDX);
       KEYLAB(0): /* INVALID OPERAND */
         ERRMSG='INVALID OPERAND='××PARY(I);
         SIGNAL CONDITION(BADSSE);
         RETURN; /* NOT NECESSARY, BUT NICE FOR CLARITY */
       KEYLAB(1): /* OUTDA */
         IF OUTDSN^=''
           THEN DO;
             ERRMSG='DUPLICATE OUT- KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         OUTDSN = OPER;
         GO TO ENDCASE;
       KEYLAB(2): /* NONUM */
         RECTMP->RHNONSW ='1'B;
         GO TO ENDCASE;
       KEYLAB(3): /* LOCASE */
         LOSW ='1'B;
         GO TO ENDCASE;
       KEYLAB(4): /* SUBCALL */
         GO TO ENDCASE;
       KEYLAB(5): /* NAME */
         RECTMP->RHNAME = OPER;
         GO TO ENDCASE;
       KEYLAB(6): /* HICASE */
         HISW ='1'B;
         GO TO ENDCASE;
       KEYLAB(7): /* SYSOUT */
         SYSSW ='1'B;
         IF RECTMP->CMDDATA^=''
           THEN DO;
             ERRMSG='SYSOUT KEYWORD CONFLICTS WITH OTHER KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         RECTMP->CMDDATA='TRANSLAT';
         IF OPER^=''
           THEN CL=OPER;
         /* SAVE THE CLASS LIST, IF THERE IS ONE */
         J=INDEX(PARY(2),'(')-1;
         IF J<1
           THEN J=LENGTH(PARY(2));
         IF J>2
           THEN DO;
             JOBPREF=SUBSTR(PARY(2),1,J-2);
             CALL SETCAPS(JOBPREF);
             PARY(2)=SUBSTR(PARY(2),J-1);
             END;
         GO TO ENDCASE;
       KEYLAB(8): /* VTERM */
         RECTMP->TERMID = OPER;
         IF RECTMP->TERMID=''
           THEN RECTMP->TERMID='TSO';
         RECTMP->TERMFLAG ='1'B;
         GO TO ENDCASE;
       KEYLAB(9): /* TRANSLAT */
         IF RECTMP->CMDDATA^=''
           THEN DO;
             ERRMSG='TRANSLAT KEYWORD CONFLICTS WITH OTHER KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         RECTMP->CMDDATA='TRANSLAT';
         GO TO ENDCASE;
       KEYLAB(10): /* NOPREFIX */
         NOPRSW ='1'B;
         GO TO ENDCASE;
       KEYLAB(11): /* HEX */
         RECTMP->HEXMODE ='1'B;
         GO TO ENDCASE;
       KEYLAB(12): /* PRI */
         PRI = OPER;
         GO TO ENDCASE;
       KEYLAB(13): /* SECY */
         SECY = OPER;
         GO TO ENDCASE;
       KEYLAB(14): /* LINE */
         FLINE = OPER;
         GO TO ENDCASE;
       KEYLAB(15): /* COUNT */
         COUNT = OPER;
         GO TO ENDCASE;
       KEYLAB(16): /* HARDCOPY */
         HARDCOPY ='1'B;
         R = STLINEN(1,'MODE=OFF');
         GO TO ENDCASE;
       KEYLAB(17): /* INFILE   */
         INFI = OPER;
         GO TO ENDCASE;
       KEYLAB(18): /* NOFREE   */
         NOFSW='1'B;
         GO TO ENDCASE;
       KEYLAB(19): /* PDF   */
         IF RECTMP->CMDDATA^=''
           THEN DO;
             ERRMSG='PDFC KEYWORD CONFLICTS WITH OTHER KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         RECTMP->CMDDATA='PDF';
         RECTMP->HEXMODE,RECTMP->RHNONSW,NOFSW='1'B;
         GO TO ENDCASE;
       KEYLAB(20): /* PDFC   */
         IF RECTMP->CMDDATA^=''
           THEN DO;
             ERRMSG='PDFC KEYWORD CONFLICTS WITH OTHER KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         RECTMP->CMDDATA='PDFC';
         RECTMP->HEXMODE,RECTMP->RHNONSW,NOFSW='1'B;
         GO TO ENDCASE;
       KEYLAB(21): /* PDFE   */
         IF RECTMP->CMDDATA^=''
           THEN DO;
             ERRMSG='PDFE KEYWORD CONFLICTS WITH OTHER KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         RECTMP->CMDDATA='PDFE';
         RECTMP->RHNONSW,NOFSW,LOSW='1'B;
         GO TO ENDCASE;
       KEYLAB(22): /* INPUT  */
         INPBUF=OPER;
         GO TO ENDCASE;
       KEYLAB(23): /* SUPPORT */
         RECTMP->RHSUPSW='1'B;
         GO TO ENDCASE;
       KEYLAB(24): /* PROFILE */
         PROFSW='1'B;
         GO TO ENDCASE;
       KEYLAB(25): /* NOPROMPT */
         ALCODE='NPR';
         GO TO ENDCASE;
       KEYLAB(26): /* CLIST */
         SUBENT(23)=SUBENT(45); /* SET FOR CLIST SYMC */
         SUBENT(24)=SUBENT(46); /* SET FOR CLIST REP@ */
         SUBENT(28)=SUBENT(47); /* SET FOR CLIST SET@ */
         SUBENT(42)=SUBENT(45); /* SET FOR CLIST SYMC */
         SUBENT(43)=SUBENT(46); /* SET FOR CLIST REP@ */
         SUBENT(44)=SUBENT(47); /* SET FOR CLIST SET@ */
         GO TO ENDCASE;
       KEYLAB(27): /* RECSIZE */
         L=OPER;
         GO TO ENDCASE;
       KEYLAB(28): /* OUTFI */
         IF OUTDSN^='' × OUTFI^=''
           THEN DO;
             ERRMSG='DUPLICATE OUT- KEYWORDS';
             SIGNAL CONDITION(BADSSE);
             END;
         OUTFI = OPER;
         GO TO ENDCASE;
       KEYLAB(29): /* FAM */
         IF OPER=''
           THEN DO;
             ERRMSG='FAM KEYWORD MUST HAVE PARENTHESIZED VALUE';
             SIGNAL CONDITION(BADSSE);
             END;
         OPER=SUBSTR(OPER,PREFIX(OPER,' '));
         OPER=SUBSTR(OPER,1,SUFFIX(OPER,' '));
         J=INDEX(OPER,' ');
         IF J=0
           THEN J=LENGTH(OPER)+1;
         FAMNAME=SUBSTR(OPER,1,J-1);
         CALL SETCAPS(FAMNAME);
         IF J<=LENGTH(OPER)
           THEN DO;
             OPER=SUBSTR(OPER,J);
             FAMBUF=SUBSTR(OPER,PREFIX(OPER,' '));
             END;
         RECTMP->RHFAMSW='1'B;
         FAMNAME=OPER;
         GO TO ENDCASE;
       KEYLAB(30): /* DBD */
         DBDSW='1'B;
         GO TO ENDCASE;
       KEYLAB(31): /* NODBD */
         NODBDSW='1'B;
         GO TO ENDCASE;
       KEYLAB(32): /* COBOL */
       KEYLAB(33): /* YECH  */
         COBOLSW='1'B;
         GO TO ENDCASE;
       KEYLAB(34): /* NOSHOW */
         RECTMP->RHNOSHOWSW,NOSHOWSW='1'B;
         GO TO ENDCASE;
       ENDCASE:
         END;
     END;
   IF FAMNAME^='' & SYSSW
     THEN DO;
       ERRMSG='FAM AND SYSOUT KEYWORDS ARE INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF DBDSW & NODBDSW
     THEN DO;
       ERRMSG='DBD AND NODBD KEYWORDS ARE INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF SYSSW & (OUTFI^='' × INFI^='')
     THEN DO;
       ERRMSG='SYSOUT, OUTFI, AND INFI ARE MUTUALLY EXCLUSIVE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF INFI=''
     THEN DO;
       CALL SETCAPS(PARY(2));
       INDSN = PARY(2);
       END;
   IF NOPRSW
     THEN DO;
       IF INDSN^=''& INFI=''
         THEN IF SUBSTR(INDSN,1,1)^=''''
           THEN INDSN=''''××INDSN××'''';
       IF OUTDSN^=''
         THEN IF SUBSTR(OUTDSN,1,1)^=''''
           THEN OUTDSN=''''××OUTDSN××'''';
       END;
   IF SUBSTR(PARQCK,2,1)
     THEN IF INDSN^=''
       THEN IF SUBSTR(INDSN,1,1)^=''''
         THEN INDSN=''''××INDSN××'''';

   /* NOW ALLOCATE THE INPUT AND OUTPUT FILES AND INITIALIZE */
   IF FAMNAME^=''
     THEN DO;
       CALL PLILOAD(FAMNAME,RECTMP->RHFAMEP,LOADRET);
       IF LOADRET^=0
         THEN DO;
           ERRMSG='FAM MODULE='××FAMNAME××' NOT FOUND';
           SIGNAL CONDITION(BADSSE);
           END;
       DUMPTR=RHFAMEP(RHHDRPT,RECTMP,SUBENT,ADDR(PARSSTR),0);
       END;
     ELSE DO;
       IF SYSSW /* SYSOUT? */
         THEN CALL SETSYSOUT;

       /* FIRST ESTABLISH THE INPUT FILE */

       IF INFI^=''
         THEN CALL SETINFI;
         ELSE IF INDSN^=''
           THEN CALL SETINDSN;

       /* NOW SET UP THE OUTPUT FILE */

       IF OUTDSN='' & OUTFI=''
         THEN RECTMP->OUTDDN=RECTMP->INDDN;
         ELSE IF OUTFI^=''
           THEN CALL SETOUTFI;
           ELSE CALL SETOUTDSN;

       IF RECTMP->OUTDDN ^= NULL
         THEN RECTMP->BUFPTR=ADDR(RECTMP->OUTDDN->ALCRECL);
         ELSE ALLOCATE BUFSTR SET(RECTMP->BUFPTR);
       END;

   IF RHPTR = NULL
     THEN DO;
       RECTMP->RHLST,RECTMP->RHNXT = NULL;
       LSTRHEL,NXTRHEL = RECTMP;
       RECTMP->RHCST = 1;
       RECTMP->RHCEN = SCREENLEN-4;
       END;
     ELSE DO;
       IF RECTMP->RHSUPSW
         THEN I=0;
         ELSE I=((RHCEN-RHCST)+1);
       IF I < 4
         THEN DO; /* PUT IT AT END OF Q */
           RECTMP->RHCEN,RECTMP->RHCST = 0;
           DO RECLUP=NXTRHEL REPEAT RECLUP->RHNXT
             WHILE(RECLUP->RHNXT ^= NULL);
             END;
           RECLUP->RHNXT,LSTRHEL = RECTMP;
           RECTMP->RHLST = RECLUP;
           RECTMP->RHNXT = NULL;
           END;
         ELSE DO;
           I = I/2;
           RECTMP->RHCST = RHPTR->RHCST+I;
           RECTMP->RHCEN = RHPTR->RHCEN;
           RHPTR->RHCEN = RECTMP->RHCST-1;
           RECTMP->RHLST = RHPTR;
           RECTMP->RHNXT = RHPTR->RHNXT;
           RHPTR->RHNXT = RECTMP;
           IF RECTMP->RHNXT = NULL
             THEN LSTRHEL = RECTMP;
             ELSE RECTMP->RHNXT->RHLST = RECTMP;
           END;
       END;
   IF RECTMP->RHNAME='====>'
     THEN CALL SUBENT(36)(RECTMP,RHHDRPT); /* CALL DENTDFN */
   IF RECTMP->INDDN^=NULL
     THEN RECTMP->LOFLAG=SUBSTR(RECTMP->INDDN->ALCFLAG,8,1);
     ELSE RECTMP->LOFLAG='0'B;
   IF LOSW
     THEN RECTMP->LOFLAG='1'B;
   IF HISW
     THEN RECTMP->LOFLAG='0'B;
   ALCPTR=RECTMP->OUTDDN;
   IF ALCPTR=NULL
     THEN ALCPTR=RECTMP->INDDN;
   IF ALCPTR=NULL
     THEN IF RHPTR^=NULL
       THEN DO;
         ALCPTR=RHPTR->OUTDDN;
         IF ALCPTR=NULL
           THEN ALCPTR=RHPTR->INDDN;
         IF ALCPTR=NULL
           THEN DO;
             RECTMP->RHLRECL=RHPTR->RHLRECL;
             RECTMP->RHBLKL=RHPTR->RHBLKL;
             RECTMP->RHRECFM=RHPTR->RHRECFM;
             RECTMP->RHNONSW=RECTMP->RHNONSW × RHPTR->RHNONSW;
             END;
           ELSE DO;
             RECTMP->RHLRECL=ALCRECL;
             RECTMP->RHBLKL=ALCBLKL;
             RECTMP->RHRECFM=ALCRECFM;
             RECTMP->RHNONSW=RECTMP->RHNONSW × SUBSTR(ALCFLAG,6,1);
             END;
         END;
       ELSE DO; /* SET MY OWN DEFAULTS */
         RECTMP->RHLRECL=80;
         RECTMP->RHBLKL=1680;
         RECTMP->RHRECFM='10010000'B;
         END;
     ELSE DO;
       RECTMP->RHLRECL=ALCRECL;
       RECTMP->RHBLKL=ALCBLKL;
       RECTMP->RHRECFM=ALCRECFM;
       RECTMP->RHNONSW=RECTMP->RHNONSW × SUBSTR(ALCFLAG,6,1);
       END;
   RHPTR = RECTMP;
   IF RHNONSW
     THEN DO;
       IF INDDN^=NULL
         THEN SUBSTR(INDDN->ALCFLAG,6,1)='1'B;
       IF OUTDDN^=NULL
         THEN SUBSTR(OUTDDN->ALCFLAG,6,1)='1'B;
       END;
   IF NOFSW
     THEN DO;
       IF INDDN^=NULL
         THEN SUBSTR(INDDN->ALCFLAG,5,1)='1'B;
       IF OUTDDN^=NULL
         THEN SUBSTR(OUTDDN->ALCFLAG,5,1)='1'B;
       END;
   IF INDDN^=NULL & ^RHFAMSW
     THEN DO;
       CALL #REFRESH(RHPTR,SUBENT,RHHDRPT,FLINE,COUNT);
       RHNONSW=RHNONSW × SUBSTR(INDDN->ALCFLAG,6,1);
       /*TURN ON RHNONSW IF IT WAS DISCOVERED IN REFRESH */
       END;
   IF RECTMP->TERMFLAG
     THEN DO;
       RHVVTSW='1'B;
       CALL SYSLOAD(PGMNAME,TERMEP);
       CMODEFLAG ='1'B;
       END;
   IF ^NODBDSW
     THEN IF DBDSW
       THEN CMDDATA='USE IN';
       ELSE IF INDDN^=NULL
         THEN DO; /* CHECK FOR .DB QUALIFIER */
           DO I=LENGTH(INDDN->ALCDSN) TO 1 BY -1
             WHILE(SUBSTR(INDDN->ALCDSN,I,1)^='.');
             END;
           IF SUBSTR(INDDN->ALCDSN,I+1)='DB'
             THEN CMDDATA='USE IN';
           END;
   IF CMDDATA='TRANSLAT'
     THEN HEXMODE='0'B;
   IF CMDDATA='PDFE'
     THEN DO;
       RECTMP->HEXMODE='0'B;
       RECTMP->MSGDATA='';
       END;
   IF INPBUF^=''
     THEN CALL #DENTCP(RHPTR,SUBENT,RHHDRPT,INPBUF);
   /* CALL DENTCP */
   IF PROFSW
     THEN IF RHLST=NULL & RHNXT=NULL
       THEN DO;
         I=#CMD('ARUN $PROFILE',RHPTR,SUBENT,RHHDRPT);
         MSGDATA='';
         END;
   RHRC = 0;
   SETINDSN:PROC;
     CALL #DOALC(INDSN,ALCODE,RECTMP->INDDN,NULL);
     IF RECTMP->INDDN=NULL
       THEN DO;
         ERRMSG='UNABLE TO USE IN DATA SET';
         SIGNAL CONDITION(BADSSE);
         END;
     IF COBOLSW
       THEN DO;
         RECTMP->INDDN->ALCSEQOFF=0;
         RECTMP->INDDN->ALCSEQLEN=6;
         END;
     RECTMP->RHLRECL=RECTMP->INDDN->ALCRECL;
     RECTMP->RHBLKL=RECTMP->INDDN->ALCBLKL;
     RECTMP->RHRECFM=RECTMP->INDDN->ALCRECFM;
     RECTMP->RHNONSW=RECTMP->RHNONSW ×
       SUBSTR(RECTMP->INDDN->ALCFLAG,6,1);
     END SETINDSN;
   SETOUTDSN:PROC;
     CALL #DOALC(OUTDSN,ALCODE,RECTMP->OUTDDN,RECTMP);
     IF RECTMP->OUTDDN=NULL
       THEN DO;
         ERRMSG='UNABLE TO USE OUT DATA SET';
         SIGNAL CONDITION(BADSSE);
         END;
     IF COBOLSW
       THEN DO;
         RECTMP->OUTDDN->ALCSEQOFF=0;
         RECTMP->OUTDDN->ALCSEQLEN=6;
         END;
     END SETOUTDSN;
   SETINFI:PROC;
     CALL SYSJFCB(INFI,JFCBPTR);
     IF SUBSTR(JFCBTSDM,3,1) /* IS IT DD *? */
       THEN DO;
         L=80;
         B=80;
         SAVRFM='10000000'B; /* FIXED LENGTH RECORDS */
         END;
       ELSE DO;
         OPEN FILE(RH_SEQ_INTERNAL) TITLE(INFI) RECORD INPUT;
         DCBPTR=FINDDCB(INFI);
         L=DCBLRECL;
         B=DCBBLKSI;
         SAVRFM=DCBRECFM;
         CLOSE FILE(RH_SEQ_INTERNAL);
         END;
     ALLOCATE ALCSTR SET(ALCPTR);
     RECTMP->INDDN=ALCPTR;
     IF OUTDSN='' & OUTFI=''
       THEN RECTMP->OUTDDN=RECTMP->INDDN;
     ALCDDN=INFI;
     ALCDSN=SUBSTR(JFCBDSNM,1,SUFFIX(JFCBDSNM,' '));
     ALCMEM=JFCBELNM;
     ALCFLAG='0'B;
     ALCSEQLEN=8;
     IF SUBSTR(SAVRFM,1,2)^='10'B
       THEN SUBSTR(ALCFLAG,3,1)='1'B; /* VARYING RECORDS */
     IF COBOLSW
       THEN DO;
         ALCSEQOFF=0;
         ALCSEQLEN=6;
         END;
       ELSE IF SUBSTR(ALCFLAG,3,1)
         THEN ALCSEQOFF=0;
         ELSE ALCSEQOFF=ALCRECL-8;
     SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
     ALCBLKL=B;
     ALCRECFM=SAVRFM;
     END SETINFI;
   SETOUTFI:PROC;
     DCL OUTDFT FILE RECORD OUTPUT ENV(FB RECSIZE(80) BLKSIZE(6400));
     CALL SYSJFCB(OUTFI,JFCBPTR);
     ON UNDEFINEDFILE(RH_SEQ_INTERNAL)BEGIN;
       ON UNDEFINEDFILE(OUTDFT) BEGIN;
         ERRMSG='CAN''T OPEN FILE '××OUTFI;
         SIGNAL CONDITION(BADSSE);
         END;
       OPEN FILE(OUTDFT) TITLE(OUTFI);
       DCBPTR=FINDDCB(OUTFI);
       L=DCBLRECL;
       B=DCBBLKSI;
       SAVRFM=DCBRECFM;
       CLOSE FILE(OUTDFT);
       GOTO BYCLOS;
       END;
     OPEN FILE(RH_SEQ_INTERNAL) TITLE(OUTFI) RECORD OUTPUT;
     IF SUBSTR(JFCBTSDM,3,1) /* IS IT SYSOUT? */
       THEN DO;
         L=80;
         B=80;
         SAVRFM='10000000'B; /* FIXED LENGTH RECORDS */
         END;
       ELSE DO;
         DCBPTR=FINDDCB(OUTFI);
         L=DCBLRECL;
         B=DCBBLKSI;
         SAVRFM=DCBRECFM;
         END;
     CLOSE FILE(RH_SEQ_INTERNAL);
 BYCLOS:;
     ALLOCATE ALCSTR SET(ALCPTR);
     RECTMP->OUTDDN=ALCPTR;
     ALCDDN=OUTFI;
     ALCDSN=SUBSTR(JFCBDSNM,1,SUFFIX(JFCBDSNM,' '));
     ALCMEM=JFCBELNM;
     ALCFLAG='0'B;
     ALCSEQLEN=8;
     IF SUBSTR(SAVRFM,1,2)^='10'B
       THEN SUBSTR(ALCFLAG,3,1)='1'B; /* VARYING RECORDS */
     IF COBOLSW
       THEN DO;
         ALCSEQOFF=0;
         ALCSEQLEN=6;
         END;
       ELSE IF SUBSTR(ALCFLAG,3,1)
         THEN ALCSEQOFF=0;
         ELSE ALCSEQOFF=ALCRECL-8;
     SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
     ALCBLKL=B;
     ALCRECFM=SAVRFM;
     END SETOUTFI;
   SETSYSOUT: PROC;
     CLOP='';
     RECTMP->CMDDATA='TRANSLAT';
     TSOPREF=#SYMC(PRESYM); /* CALL SYMC */
     IF JOBPREF=''
       THEN JOBPREF=TSOPREF;
       ELSE IF CL=''
         THEN CL='2';
     IF OUTDSN^=''
       THEN SYSODSN=OUTDSN;
       ELSE DO;
         I = INDEX(INDSN,'(');
         IF I=0
           THEN I=LENGTH(INDSN)+1;
         SYSODSN=JOBPREF××SUBSTR(INDSN,1,I-1);
         IF CL^=''
           THEN DO;
             CALL SETCAPS(CL);
             CLOP=' CLASS('××CL××') ';
             SYSODSN=SYSODSN××'.CL';
             DO I=1 TO LENGTH(CL);
               IF VERIFY(SUBSTR(CL,I,1),
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')=0
                 THEN SYSODSN=SYSODSN××SUBSTR(CL,I,1);
               END;
             END;
         END;
     CTLGDSN=TSOPREF××'.'××SYSODSN××'.OUTLIST';
     CALL SYSCTLG('NAME',RET,CTLGDSN,CVOL,AREA);
     IF RET^='0'B
       THEN DO; /* DATA SET DOES NOT EXIST */
         OCMD ='FREE ATTR(DENTATR)';
         CALL #DOCMD(OCMD,HELPSTR);
         OCMD ='ATTRIB DENTATR LR(169) BL(19000) RECFM(V B A)';
         CALL #DOCMD(OCMD,HELPSTR);
         OCMD ='ALLOC DA('××SYSODSN××
         '.OUTLIST) NEW US(DENTATR) TR SP('
         ××PRI××' '××SECY××')';
         CALL #DOCMD(OCMD,HELPSTR);
         END;
     OCMD='OUTPUT '××JOBPREF××INDSN××' PRINT('××SYSODSN××') '××CLOP;
     CALL #DOCMD(OCMD,HELPSTR); /* CALL DOCMD */
     INDSN=SYSODSN;
     END SETSYSOUT;
   FINIS:
   END;
