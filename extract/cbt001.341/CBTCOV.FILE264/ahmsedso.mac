   /* AHMSEDS - HARDWARE MANAGEMENT SYSTEM EDIT SAVE - OLDER VERSION  */
   %INCLUDE ABESUB;
 ABESUB(AHMSEDS) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE AHMSEDI;

   EXEC SQL INCLUDE SQLCA;
   DCL MISSING DEC FLOAT(16);
   DCL (FDESPTR,FEATPTR,LOCPTR,THINGPTR,VENDPTR) PTR;
   DCL DSNTIAR ENTRY OPTIONS(ASM,INTER,RETCODE);
   DCL DATA_LEN FIXED BIN(31) STATIC INIT(120);
   DCL DATA_DIM FIXED BIN(31) STATIC INIT(8);
   DCL 1 ERROR_MESSAGE,
     2 ERROR_LEN FIXED BIN(15,0) UNAL INIT((DATA_LEN*DATA_DIM)),
     2 ERROR_TEXT(DATA_DIM) CHAR(DATA_LEN);
   DCL (PLIRETV,DIM) BUILTIN;
   DCL MSG CHAR(130) VAR;

   UNSPEC(MISSING)='1'B; /* SET MISSING VALUE */
   EXEC SQL WHENEVER SQLWARNING CONTINUE;
   EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
   ON CONDITION(BADSAVE) GOTO SQLERROR;
   GOTO BY_SQLERROR;
 SQLERROR:
   IF MSGDATA=''
     THEN DO;
       PUT STRING(MSG) EDIT('SQL ERROR, RETCODE=',SQLCODE)(A,F(10));
       CALL #TERM(MSG);
       FETCH DSNTIAR;
       CALL DSNTIAR(SQLCA,ERROR_MESSAGE,DATA_LEN);
       IF PLIRETV=0
         THEN DO I=1 TO DIM(ERROR_TEXT,1);
           CALL #TERM(ERROR_TEXT(I));
           END;
       MSGDATA='SQLERROR ENCOUNTERED';
       END;
   RHRC=16;
   RETURN;
 BY_SQLERROR:;

   FDESPTR=LOCDB('FEATDESC');
   CALL GENL_SAVE(FDESPTR,FEATDESC_DELETE,FEATDESC_INSERT);
   FEATPTR=LOCDB('FEATURES');
   CALL GENL_SAVE(FEATPTR,FEATURES_DELETE,FEATURES_INSERT);
   LOCPTR=LOCDB('LOCNAMES');
   CALL GENL_SAVE(LOCPTR,LOCNAMES_DELETE,LOCNAMES_INSERT);
   THINGPTR=LOCDB('THINGTAB');
   CALL GENL_SAVE(THINGPTR,THINGTAB_DELETE,THINGTAB_INSERT);
   VENDPTR=LOCDB('VENDORS');
   CALL GENL_SAVE(VENDPTR,VENDORS_DELETE,VENDORS_INSERT);

 FEATDESC_DELETE: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A SQL DELETE OF ALL ROWS IN FEATDESC TABLE.            *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   EXEC SQL DELETE FROM SYNFEATD; /* DELETE ALL ROWS */
   END FEATDESC_DELETE;

 FEATDESC_INSERT: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INSERT THE CURRENT RECORD INTO THE FEATDESC TABLE.        *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   FEATDESC_STRUCTURE;

   ROA_IND=0; /* SET DEFAULTS FOR INDICATOR VARIABLES */
   FID     =GETDATA_FIXED('FID'     ,TABPTR);
   VENDOR  =GETDATA      ('VENDOR'  ,TABPTR);
   DEVICE  =GETDATA      ('DEVICE'  ,TABPTR);
   FEATURE =GETDATA      ('FEATURE' ,TABPTR);
   FEATDESC=GETDATA      ('FEATDESC',TABPTR);
   IF UNSPEC(FID)='1'B
     THEN ROA_IND(FIDIX)     =-1;
   IF VENDOR=''
     THEN ROA_IND(VENDORIX)  =-1; /* INDICATE MISSING */
   IF DEVICE=''
     THEN ROA_IND(DEVICEIX)  =-1;
   IF FEATURE=''
     THEN ROA_IND(FEATUREIX) =-1;
   IF FEATDESC=''
     THEN ROA_IND(FEATDESCIX)=-1;
   EXEC SQL INSERT INTO SYNFEATD
     (FID, VENDOR, DEVICE, FEATURE, FEATDESC)
     VALUES(:ROA:ROA_IND);
   END FEATDESC_INSERT;

 FEATURES_DELETE: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A SQL DELETE OF ALL ROWS IN FEATURES TABLE.            *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   EXEC SQL DELETE FROM SYNFEATU; /* DELETE ALL ROWS */
   END FEATURES_DELETE;

 FEATURES_INSERT: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INSERT THE CURRENT RECORD INTO THE FEATURES TABLE.        *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   FEATURES_STRUCTURE;

   ROB_IND=0; /* SET DEFAULTS FOR INDICATOR VARIABLES */
   ID      =GETDATA_FIXED('ID'      ,TABPTR);
   FID     =GETDATA_FIXED('FID'     ,TABPTR);
   COST    =GETDATA      ('COST'    ,TABPTR);
   QTY     =GETDATA_FIXED('QTY'     ,TABPTR);
   IF UNSPEC(ID)='1'B
     THEN ROB_IND(IDIX)    =-1; /* INDICATE MISSING */
   IF UNSPEC(FID)='1'B
     THEN ROB_IND(FIDIX)   =-1; /* INDICATE MISSING */
   IF COST=''
     THEN ROB_IND(COSTIX)  =-1; /* INDICATE MISSING */
   IF UNSPEC(QTY)='1'B
     THEN ROB_IND(QTYIX)   =-1; /* INDICATE MISSING */
   EXEC SQL INSERT INTO SYNFEATU
     (ID, FID, COST, QTY)
     VALUES(:ROB:ROB_IND);
   END FEATURES_INSERT;

 GENL_SAVE: PROC(TABPTR,DELETE,INSERT);
 /**********************************************************************
 *                                                                     *
 * CALLED TO SAVE THE FEATDESC TABLE BACK INTO DB2 DATABASE.           *
 *                                                                     *
 **********************************************************************/
   DCL (TABPTR,SAVPTR) PTR;
   DCL (DELETE,INSERT) ENTRY;

   SAVPTR=TABPTR->RECPTR;
   CALL DELETE(TABPTR); /* DELETE ALL ROWS */
   TABPTR->RECPTR=NULL;
   DO FOREVER=1 REPEAT FOREVER;
     TABPTR->RECPTR=#SUCC(RHHDRPT,TABPTR,
       TABPTR->RECPTR);
     IF TABPTR->RECPTR=TABPTR
       THEN LEAVE;
     CALL INSERT(TABPTR); /* GO ADD RECORD TO DB2 TABLE */
     END;
   CALL #NC(TABPTR,SAVPTR); /* RESTORE ORIGINAL RECORD PTR */
   END GENL_SAVE;

 LOCNAMES_DELETE: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A SQL DELETE OF ALL ROWS IN LOCNAMES TABLE.            *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   EXEC SQL DELETE FROM SYNLOCNA; /* DELETE ALL ROWS */
   END LOCNAMES_DELETE;

 LOCNAMES_INSERT: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INSERT THE CURRENT RECORD INTO THE LOCNAMES TABLE.        *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   LOCNAMES_STRUCTURE;

   ROC_IND=0; /* SET DEFAULTS FOR INDICATOR VARIABLES */
   LOCATION=GETDATA      ('LOCATION',TABPTR);
   LOCNO   =GETDATA_FIXED('LOCNO'   ,TABPTR);
   SPEED   =GETDATA_FIXED('SPEED'   ,TABPTR);
   IF LOCATION=''
     THEN ROC_IND(LOCATIONIX)  =-1; /* INDICATE MISSING */
   IF UNSPEC(LOCNO)='1'B
     THEN ROC_IND(LOCNOIX)     =-1; /* INDICATE MISSING */
   IF UNSPEC(SPEED)='1'B
     THEN ROC_IND(SPEEDIX)     =-1; /* INDICATE MISSING */
   EXEC SQL INSERT INTO SYNLOCNA
     (LOCATION, LOCNO, SPEED)
     VALUES(:ROC:ROC_IND);
   END LOCNAMES_INSERT;

 THINGTAB_DELETE: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A SQL DELETE OF ALL ROWS IN THINGTAB TABLE.            *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   EXEC SQL DELETE FROM SYNTHING; /* DELETE ALL ROWS */
   END THINGTAB_DELETE;

 THINGTAB_INSERT: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INSERT THE CURRENT RECORD INTO THE THINGTAB TABLE.        *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   THINGTAB_STRUCTURE;

   ROD_IND=0; /* SET DEFAULTS FOR INDICATOR VARIABLES */
   ID      =GETDATA_FIXED('ID'      ,TABPTR);
   CID     =GETDATA_FIXED('CID'     ,TABPTR);
   NODE    =GETDATA      ('NODE'    ,TABPTR);
   LTERM   =GETDATA      ('LTERM'   ,TABPTR);
   LOCNO   =GETDATA_FIXED('LOCNO'   ,TABPTR);
   EXT     =GETDATA_FIXED('EXT'     ,TABPTR);
   ROOM    =GETDATA      ('ROOM'    ,TABPTR);
   VENDOR  =GETDATA      ('VENDOR'  ,TABPTR);
   DEVICE  =GETDATA      ('DEVICE'  ,TABPTR);
   SERIAL  =GETDATA      ('SERIAL'  ,TABPTR);
   IF UNSPEC(ID)='1'B
     THEN ROD_IND(IDIX)      =-1; /* INDICATE MISSING */
   IF UNSPEC(CID)='1'B
     THEN ROD_IND(CIDIX)     =-1; /* INDICATE MISSING */
   IF NODE=''
     THEN ROD_IND(NODEIX)    =-1; /* INDICATE MISSING */
   IF LTERM=''
     THEN ROD_IND(LTERMIX)   =-1; /* INDICATE MISSING */
   IF UNSPEC(LOCNO)='1'B
     THEN ROD_IND(LOCNOIX)   =-1; /* INDICATE MISSING */
   IF UNSPEC(EXT)='1'B
     THEN ROD_IND(EXTIX)     =-1; /* INDICATE MISSING */
   IF ROOM=''
     THEN ROD_IND(ROOMIX)    =-1; /* INDICATE MISSING */
   IF VENDOR=''
     THEN ROD_IND(VENDORIX)  =-1; /* INDICATE MISSING */
   IF DEVICE=''
     THEN ROD_IND(DEVICEIX)  =-1; /* INDICATE MISSING */
   IF SERIAL=''
     THEN ROD_IND(SERIALIX)  =-1; /* INDICATE MISSING */
   EXEC SQL INSERT INTO SYNTHING
     (ID, CID, NODE, LTERM, LOCNO, EXT, ROOM, VENDOR, DEVICE, SERIAL)
     VALUES(:ROD:ROD_IND);
   END THINGTAB_INSERT;

 VENDORS_DELETE: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO A SQL DELETE OF ALL ROWS IN VENDORS TABLE.            *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   EXEC SQL DELETE FROM SYNVENDO; /* DELETE ALL ROWS */
   END VENDORS_DELETE;

 VENDORS_INSERT: PROC(TABPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INSERT THE CURRENT RECORD INTO THE VENDORS TABLE.        *
 *                                                                     *
 **********************************************************************/
   DCL TABPTR PTR;
   VENDORS_STRUCTURE;

   ROE_IND=0; /* SET DEFAULTS FOR INDICATOR VARIABLES */
   VENDOR  =GETDATA      ('VENDOR'  ,TABPTR);
   VENDNAME=GETDATA      ('VENDNAME',TABPTR);
   VENDADDR=GETDATA      ('VENDADDR',TABPTR);
   VENDCITY=GETDATA      ('VENDCITY',TABPTR);
   VENDSTAT=GETDATA      ('VENDSTAT',TABPTR);
   VENDZIP =GETDATA_FIXED('VENDZIP' ,TABPTR);
   VENDTELE=GETDATA      ('VENDTELE',TABPTR);
   IF VENDOR=''
     THEN ROE_IND(VENDORIX)   =-1; /* INDICATE MISSING */
   IF VENDNAME=''
     THEN ROE_IND(VENDNAMEIX) =-1; /* INDICATE MISSING */
   IF VENDADDR=''
     THEN ROE_IND(VENDADDRIX) =-1; /* INDICATE MISSING */
   IF VENDCITY=''
     THEN ROE_IND(VENDCITYIX) =-1; /* INDICATE MISSING */
   IF VENDSTAT=''
     THEN ROE_IND(VENDSTATIX) =-1; /* INDICATE MISSING */
   IF UNSPEC(VENDZIP)='1'B
     THEN ROE_IND(VENDZIPIX)  =-1; /* INDICATE MISSING */
   IF VENDTELE=''
     THEN ROE_IND(VENDTELEIX) =-1; /* INDICATE MISSING */
   EXEC SQL INSERT INTO SYNVENDO
     (VENDOR, VENDNAME, VENDADDR, VENDCITY, VENDSTAT, VENDZIP, VENDTELE)
     VALUES(:ROE:ROE_IND);
   END VENDORS_INSERT;

   END AHMSEDS;
