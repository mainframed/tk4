 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /*DENTA*/
 DENTA:  PROC(SUBENT,RHHDRPT,CPPLECT) OPTIONS(REENTRANT);
   % DCL @PROCNAME CHAR;
   % @PROCNAME = '';
   % INCLUDE DENTSUB;
   DCL TRET FIXED BIN(31,0);
   DCL (TLEN,TSIZE) FIXED BIN(15,0);
   DCL CPPLECT PTR;
   DCL ECTRC FIXED BIN(31,0) BASED(CPPLECT);
   DCL 1 BLSTR BASED(BLPTR),
     2 NBLPTR PTR,
     2 BLCMDLEN FIXED BIN(15,0),
     2 BLCMD CHAR(L REFER(BLCMDLEN)) VAR;
   DCL X15B BIT(8) STATIC INIT('00010101'B),
       X15 CHAR(1) DEF X15B;
   DCL (SETCAPS,SYSDETA,DENTAP) ENTRY;
   DCL CMCK CHAR(5) VAR;
   DCL IMSW BIT(1);
   DCL HILAST CHAR(4) STATIC INIT('LAST');
   DCL LOLAST CHAR(4) STATIC INIT('last');
   DCL IN FILE RECORD INPUT;
   DCL (TERMCTL,CRTZAP) ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY RETURNS(FIXED BIN(15,0));
   DCL DENTB ENTRY RETURNS(FIXED BIN(15,0));
   DCL DENTC ENTRY RETURNS(CHAR(1024) VAR);
   DCL NEWCMD CHAR(1024) VAR;
   DCL NOLAST(14) CHAR(8) VAR STATIC INIT(
     'BOTTOM',
     'CLISTEND',
     'COL',
     'DOWN',
     'FULLSCR',
     'LINES',
     'MD',
     'P',
     'PB',
     'PF',
     'RUNCONT',
     'TOP',
     'UP',
     'V');
   DCL NOLCMD CHAR(8) VAR;
   DCL ERRSW BIT(1) INIT('0'B);
 /* ON ERROR BLOCK FOR OPTIMIZER ONLY
  */
   ON ERROR BEGIN;
     IF ERRSW
       THEN SIGNAL FINISH;
     ERRSW = '1'B;
     CURPNL = 0;
     GO TO LUP;
     END;
   ON ATTENTION BEGIN;
     CURPNL = 0;
     GO TO LUP;
     END;
   ON CONDITION(MYATTN) BEGIN;
     CURPNL = 0;
     GO TO LUP;
     END;
  LUP:
   ERRSW = '0'B;
   RHPTR = NXTRHEL;
   DO WHILE(NXTRHEL^=NULL);
     CMDDISPLAY ='';
     DO UNTIL(^IMSW);
       IF CMDDATA^=''
         THEN NEWCMD=CMDDATA;
         ELSE NEWCMD=DENTC(RHPTR,SUBENT,RHHDRPT);
       /* DENTC UPDATES RHPTR */
       CMDDISPLAY ='';
       IMSW='0'B;
       IF LENGTH(NEWCMD)<=5
         THEN DO;
           IF NEWCMD='='× NEWCMD='=F'× NEWCMD='=B'
             THEN NEWCMD=LASTCMD;
           CMCK = NEWCMD;
           CALL SETCAPS(CMCK);
           IF CMCK ='LAST'
             THEN DO;
               IMSW ='1'B;
               CMDDATA ='';
               CMDDISPLAY = LASTCMD;
               END;
             ELSE IF CMCK ='CMODE'× CMCK ='CM'
               THEN DO;
                 IMSW ='1'B;
                 CMODEFLAG = TERMFLAG;
                 END;
               ELSE IF CMCK ='EMODE'× CMCK ='EM'
                 THEN DO;
                   CMODEFLAG ='0'B;
                   IMSW ='1'B;
                   END;
                 ELSE IF CMCK ='NEWL'
                   THEN NEWCMD = X15;
           END;
       END;
     DO WHILE((NEWCMD^='') & (NXTRHEL^=NULL));
       CMDDATA ='';
       BLI=INDEX(NEWCMD,' ');
       IF BLI=0
         THEN BLI=LENGTH(NEWCMD);
       IF BLI>8
         THEN BLI=8;
       NOLCMD=SUBSTR(NEWCMD,1,BLI);
       CALL SETCAPS(NOLCMD);
       DO NOL=1 TO HBOUND(NOLAST,1) WHILE(NOLAST(NOL)^=NOLCMD);
         END;
       IF NOL>HBOUND(NOLAST,1)
         THEN LASTCMD = NEWCMD;
       IF CMODEFLAG & TERMFLAG
         THEN DO; /* CALL DENTVTC(NEWCMD,RHPTR,SUBENT,RHHDRPT); */
           PUT SKIP LIST('ERROR-VIRTUAL TERMINAL NOT SUPPORTED');
           SIGNAL ERROR;
           END;
         ELSE IF ATEST(NEWCMD)
           THEN CALL APPLY(NEWCMD,RHPTR);
           ELSE CALL RCTEST(NEWCMD,RHPTR);
       IF RHPTR=NULL
         THEN NEWCMD='';
         ELSE DO;
           NEWCMD = CMDDATA;
           CMDDATA='';
           END;
       END;
     END;
   /*      IF RHCVTSW
   THEN CALL SYSDETA(RHSUBTCB);
   */
   CALL TERMCTL('GTSIZE',TRET,TLEN,TSIZE);
   IF TLEN^=0
     THEN CALL CRTZAP;

 ATEST: PROC(NEWCMD) RETURNS(BIT(1)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO TEST IF THE CURRENT COMMAND IS AN APPLY.                  *
 *                                                                     *
 **********************************************************************/
   DCL NEWCMD CHAR(*) VAR;
   IF LENGTH(NEWCMD) > 2
     THEN IF SUBSTR(NEWCMD,1,2)='A '×SUBSTR(NEWCMD,1,2)='a '
       THEN RETURN('1'B);
   RETURN('0'B);
   END ATEST;

 APPLY: PROC(NEWCMD,PRHPTR) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT COMMAND IS APPLY (A PREFIX).                *
 *                                                                     *
 **********************************************************************/
   DCL (NEWCMD,TRHCMD) CHAR(1024) VAR;
   DCL (PRHPTR,SAVTRH,TRH) PTR;
   DCL TRHN CHAR(8);
   DCL (I,J,K,L,M,N) FIXED BIN(31,0);
   J=INDEX(SUBSTR(NEWCMD,3),' ');
   I=0;
   IF J=0
     THEN I=4;
     ELSE DO;
       TRHN=SUBSTR(NEWCMD,3,J-1);
       CALL SETCAPS(TRHN);
       K=PREFIX(SUBSTR(NEWCMD,J+2),' ');
       IF K=0
         THEN I=0;
         ELSE DO;
           TRHCMD=SUBSTR(NEWCMD,1+J+K);
           IF SUBSTR(TRHN,1,1)='*'&(SUBSTR(TRHN,2,1)='+'×
            SUBSTR(TRHN,2,1)='-')&VERIFY(SUBSTR(TRHN,3),' 0123456789')=0
             THEN DO;
               S=SUBSTR(TRHN,3);
               TRH=PRHPTR;
               DO T=1 TO S WHILE(TRH^=NULL);
                 IF SUBSTR(TRHN,2,1)='+'
                   THEN TRH=TRH->RHNXT;
                   ELSE TRH=TRH->RHLST;
                 END;
               END;
             ELSE DO TRH=NXTRHEL REPEAT TRH->RHNXT
               WHILE(TRH^=NULL)UNTIL(TRH->RHNAME=TRHN);
               END;
           IF TRH=NULL
             THEN I=4;
             ELSE DO UNTIL(TRHCMD='');
               TRH->CMDDATA='';
               TRH->LASTCMD=TRHCMD;
               SAVTRH=TRH;
               IF ATEST(TRHCMD)
                 THEN CALL APPLY(TRHCMD,TRH); /* GO APPLY */
                 ELSE CALL RCTEST(TRHCMD,TRH); /* GO EXEC */
               IF TRH ^= SAVTRH
                 THEN DO;
                   RHPTR=NXTRHEL;
                   TRHCMD='';
                   END;
                 ELSE IF TRH->CMDDATA^=''
                   THEN TRHCMD=TRH->CMDDATA;
                   ELSE DO;
                     TRHCMD='';
                     IF TRH->BLHDR ^= NULL
                       THEN DO;
                         BLPTR = TRH->BLHDR;
                         TRHCMD = BLCMD;
                         TRH->BLHDR = NBLPTR;
                         FREE BLSTR;
                         END;
                     END;
               END;
           END;
       END;
   IF I^=0
     THEN RHRC=I;
   END APPLY;

 RCTEST: PROC(PRMCMD,TRH) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO EXECUTE A COMMAND VIA INVOCATION OF DENTB, AND TO TEST    *
 * AND SET RETURN CODES.                                               *
 *                                                                     *
 **********************************************************************/
   DCL PRMCMD CHAR(*) VAR;
   DCL TRH PTR;
   DCL I FIXED BIN(15,0);
   I=DENTB(PRMCMD,TRH,SUBENT,RHHDRPT);
   IF I ^= 0
     THEN RHRC = I;
   IF I = 4
     THEN TRH->MSGDATA ='INVALID OPERAND';
     ELSE IF I = 8
       THEN TRH->MSGDATA ='COMMAND NOT FOUND';
       ELSE IF I = 16
         THEN DO;
           TRH->MSGDATA ='INVALID OPERAND';
           SIGNAL ERROR; /* OPTIMIZER ONLY */
           END;
   ECTRC=RHRC;
   IF RHRC>RHRCLIM
     THEN CALL DENTAP(SUBENT,RHHDRPT); /* PURGE STACKS */
   IF RHECOSW
     THEN IF PRMCMD^='RUNCONT'
       THEN CALL #TERM(TRH->RHNAME××': '××PRMCMD);
   END RCTEST;

   END DENTA;
