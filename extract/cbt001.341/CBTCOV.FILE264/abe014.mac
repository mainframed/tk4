   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE014 - DUMP,PEEK SUBCOMMANDS */
   /* 1        2    3                */
   %INCLUDE ABESUB;
 ABESUB(ABE014) PARS(00000) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL PLIDUMP BUILTIN;
   DCL SETCAPS ENTRY;
   DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0)) RETURNS(PTR);
   DCL MVCLXA ENTRY(FIXED BIN(31,0),FIXED BIN(31,0),FIXED BIN(31,0),
     FIXED BIN(31,0));
   DCL PREFIX ENTRY RETURNS(FIXED BIN(15,0));
   DCL (TRIN,TROUT) ENTRY;

   DCL BASE CHAR(3) INIT('');
   DCL DUMPTR PTR;
   DCL CHW CHAR(80) VAR;

   ON CONDITION(BADDUMP) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='INVALID OPERATION IN DUMP SUBCOMMAND';
     RHRC=8;
     GOTO EOJ;
     END;
   ON ERROR SIGNAL CONDITION(BADDUMP);
   RHRC = 0;
   IF PARY(1)='' & CMDINDX<3
     THEN DO;
       CALL PLIDUMP('TFCHNB');
       RETURN;
       END;

   IF CMDINDX=3
     THEN LEN=4; /* DEFAULT PEEK LENGTH */
     ELSE LEN=1024; /* DEFAULT DUMP LENGTH */
   CALL SETCAPS(PARY(1));
   CHW=PARY(1);
   SELECT(CHW);
     WHEN('RHPTR') DO;
       IF CMDINDX=3
         THEN CALL #SETA(RHHDRPT,RH_SYMTREE,'RHPTR',PTRIN(RHPTR));
         ELSE MSGDATA=DO_CONVERT_PTR(RHPTR);
       RETURN;
       END;
     WHEN('RHHDRPT') DO;
       IF CMDINDX=3
         THEN CALL #SETA(RHHDRPT,RH_SYMTREE,'RHHDRPT',PTRIN(RHHDRPT));
         ELSE MSGDATA=DO_CONVERT_PTR(RHHDRPT);
       RETURN;
       END;
     OTHERWISE DO;
       IF CMDINDX=3 /* PEEK? */
         THEN CALL DO_PEEK;
         ELSE DO;
           CALL SETCAPS(PARY(2));
           SELECT(PARY(2));
             WHEN('') LEN=1024;
             WHEN('HEX','HE','H') BASE='HEX';
             WHEN('DEC','DE','D') BASE='DEC';
             WHEN('CHAR','CHA','CH','C') BASE='CHA';
             OTHERWISE LEN=PTRIN(DO_PARSE(PARY(2))); /* LEN TO DUMP */
             END; /* SELECT */
           IF BASE^=''
             THEN IF PARY(2)=''
               THEN MSGDATA=DO_CONVERT(BASE,PARY(1));
               ELSE CALL DO_FIND;
             ELSE CALL DO_DUMP;
           END;
       END; /* OTHERWISE */
     END; /* SELECT */
 EOJ:
   RETURN;

 DO_CONVERT: PROC(BASE,INSTR) RETURNS(CHAR(80) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO CONVERT HEX/DEC/CHA CONSTANT.                             *
 *                                                                     *
 **********************************************************************/
   DCL BASE CHAR(3);
   DCL INSTR CHAR(*) VARYING;
   DCL OUTSTR CHAR(70) VARYING;
   DCL (I,J,K,L) FIXED BIN;
   DCL ZEROS CHAR(8) INIT((8)'0');
   DCL TRINBIN FIXED BIN(31,0),
       TRINSTR CHAR(4) BASED(ADDR(TRINBIN));
   DCL TRINOUT PIC'ZZZZZZZZZ9';
   DCL TRINOUTS CHAR(13);
   DCL TROUTSTR CHAR(8);

   SELECT(BASE);
     WHEN('HEX') DO;
       TRINOUT=DO_TRIN(INSTR);
       RETURN(TRINOUT);
       END;
     WHEN('DEC') DO;
      IF SUBSTR(INSTR,1,1)='-'
         THEN I=VERIFY(SUBSTR(INSTR,2),'0123456789');
         ELSE I=VERIFY(INSTR,'0123456789');
       IF I ^= 0
         THEN DO;
           MSGDATA='ERROR - INPUT NOT ALL DECIMAL DIGITS';
           SIGNAL CONDITION(BADDUMP);
           END;
       TRINBIN = INSTR;
       CALL TROUT(TRINSTR,TROUTSTR);
       RETURN(SUBSTR(TROUTSTR,PREFIX(TROUTSTR,'0')));
       END;
     OTHERWISE DO; /* DEFAULT TO CHA */
       INSTR=SUBSTR(INSTR,1,MIN(35,LENGTH(INSTR)));
       OUTSTR=REPEAT(' ',2*LENGTH(INSTR)-1);
       CALL TROUT(INSTR,OUTSTR);
       RETURN(OUTSTR);
       END;
     END; /* SELECT */
   END DO_CONVERT;

 DO_CONVERT_PTR: PROC(PTR) RETURNS(CHAR(8));
 /**********************************************************************
 *                                                                     *
 * CALLED TO CONVERT PTR TO DISPLAYABLE HEX.                           *
 *                                                                     *
 **********************************************************************/
   DCL PTR PTR;
   DCL INSTR PIC'9999999999';

   INSTR=PTRIN(PTR);
   RETURN(DO_CONVERT('DEC',INSTR));
   END DO_CONVERT_PTR;

 DO_DUMP: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DISPLAY MEMORY.                                           *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;
   DCL (BASEPTR,NOWPTR) PTR;
   DCL (FROMADDR,TOADDR,FROMLENGTH,TOLENGTH) FIXED BIN(31,0);

   BASEPTR=DO_PARSE(PARY(1)); /* CONVERT ADDRESS */
   IF BASEPTR=NULL
     THEN RETURN; /* SOMETHING WRONG, OR REGISTER REFERENCE */
   CALL #DOCMD('ALLOC FI(SYSPRINT) DA(''NULLFILE'') REUSE','');
     /* ELIMINATE PROTECTION EXCEPTION MESSAGES, IF POSSIBLE */
   CALL DO_DUMP_MAIN(BASEPTR);
   END DO_DUMP;

 DO_DUMP_MAIN: PROC(BASEPTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DISPLAY MEMORY AT SPECIFIED STARTING LOCATION.            *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;
   DCL (BASEPTR,NOWPTR) PTR;

   I=#CMD('DEL',RHPTR,RHHDRPT); /* DELETE ALL RECORDS */
   HEXMODE='1'B;
   DO I=0 REPEAT I+32 WHILE(I<LEN);
     NOWPTR=PTROUT(PTRIN(BASEPTR)+I);
     CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,PTRIN(NOWPTR),
       DO_DUMP_SUB(NOWPTR),0);
     END;
   I=#CMD('TOP',RHPTR,RHHDRPT);
   END DO_DUMP_MAIN;

 DO_DUMP_SUB: PROC(PTR) RETURNS(CHAR(41) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DISPLAY MEMORY POINTED TO BY PTR.                         *
 *                                                                     *
 **********************************************************************/
   DCL PTR PTR,
       FROMADDR FIXED BIN(31,0) BASED(ADDR(PTR));
   DCL MEMORY CHAR(32);
   DCL (FROMLENGTH,TOLENGTH) FIXED BIN(31,0) STATIC INIT(32);
   DCL TOADDR FIXED BIN(31,0);

   ON ERROR GOTO END_DO_DUMP_SUB;
   TOADDR=PTRIN(ADDR(MEMORY));
   CALL MVCLXA(TOADDR,TOLENGTH,FROMADDR,FROMLENGTH);
   RETURN(MEMORY);
 END_DO_DUMP_SUB:
   RETURN('PROTECTED STORAGE');
   END DO_DUMP_SUB;

 DO_FIND: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN PARY(2) IS NONBLANK.  BASE WILL CONTAIN EITHER 'HEX',   *
 * 'DEC', OR 'CHA' TO INDICATE THE TYPE OF CONSTANT IN PARY(1), WHICH  *
 * IS THE ITEM TO BE FOUND.  PARY(2) WILL BE CHECKED TO SEE IF IT      *
 * CONTAINS SOME PART OF THE KEYWORD 'FIND'. IF NOT, AN ERROR IS       *
 * INDICATED.  IF PARY(4) IS NONBLANK, IT MUST CONTAIN THE ADDRESS AT  *
 * WHICH THE START OF THE SEARCH IS TO BEGIN.  IF PARY(5) IS NONBLANK, *
 * IT MUST CONTAIN THE ADDRESS AT WHICH THE SEARCH IS TO END.          *
 * OTHERWISE THE SEARCH ENDS AT 16777215.                              *
 *                                                                     *
 **********************************************************************/
   DCL (START,STOP) PTR;
   DCL STR CHAR(80) VAR;
   DCL I FIXED BIN(31,0),
       IC CHAR(4) BASED(ADDR(I));
   DCL ENDCON FIXED BIN(31,0) STATIC INIT(16777215);
   DCL CH CHAR(1) BASED(CHP);

   CALL SETCAPS(PARY(2));
   SELECT(PARY(2));
     WHEN('FIND','FIN','FI','F');
     OTHERWISE DO;
       MSGDATA='INVALID KEYWORD='××PARY(2);
       SIGNAL CONDITION(BADDUMP);
       END;
     END; /* SELECT */
   SELECT(BASE);
     WHEN('HEX') DO;
       I=DO_TRIN(PARY(1));
       STR=IC;
       END;
     WHEN('DEC') DO;
       I=PARY(1);
       STR=IC;
       END;
     OTHERWISE /* IT IS 'CHA' */
       STR=PARY(1);
     END; /* SELECT */
   IF PARY(4)=''
     THEN START=PTROUT(0);
     ELSE DO;
       START=DO_PARSE(PARY(4));
       IF START=NULL
         THEN SIGNAL CONDITION(BADDUMP);
       END;
   IF PARY(5)=''
     THEN STOP=PTROUT(ENDCON);
     ELSE DO;
       STOP=DO_PARSE(PARY(5));
       IF STOP=NULL
         THEN SIGNAL CONDITION(BADDUMP);
       STOP=PTROUT(PTRIN(STOP)+PTRIN(START));
       END;
   IF PTRIN(START)>=PTRIN(STOP)
     THEN DO;
       MSGDATA='START M/B < STOP';
       SIGNAL CONDITION(BADDUMP);
       END;
   CALL #DOCMD('ALLOC FI(SYSPRINT) DA(''NULLFILE'') REUSE','');
     /* ELIMINATE PROTECTION EXCEPTION MESSAGES, IF POSSIBLE */
   ON ERROR BEGIN;
     I=PTRIN(START)+4096;
     START=PTROUT(I-MOD(I,4096));
     GOTO DO_FIND_CONTINUE;
     END;
 DO_FIND_CONTINUE:;
   DO WHILE(PTRIN(START)<PTRIN(STOP));
     CHP=START;
     DO I=1 TO LENGTH(STR) WHILE(CH=SUBSTR(STR,I,1));
        CHP=PTROUT(PTRIN(CHP)+1);
        END;
     IF I>LENGTH(STR)
       THEN LEAVE;
     START=PTROUT(PTRIN(START)+1);
     END;
   ON ERROR SYSTEM;
   IF PTRIN(START)>=PTRIN(STOP)
     THEN DO;
       MSGDATA='NOT FOUND';
       SIGNAL CONDITION(BADDUMP);
       END;
     ELSE CALL DO_DUMP_MAIN(START);
   END DO_FIND;

 DO_PARSE: PROC(ADDCON) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PARSE ADDRESS REFERENCE.                                  *
 *                                                                     *
 **********************************************************************/
   DCL ADDCON CHAR(*) VAR;
   DCL (I,J,K) FIXED BIN;
   DCL RET PTR;
   DCL GETREG ENTRY(FIXED BIN(15,0)) RETURNS(FIXED BIN(31,0));
   DCL CH CHAR(1);
   DCL ALPHA CHAR(26) VAR STATIC INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
   DCL NUMBERS CHAR(10) VAR STATIC INIT('0123456789');

   IF VERIFY(SUBSTR(ADDCON,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ')=0
     THEN DO; /* IT IS SYMBOLIC LABEL REFERENCE */
       I=VERIFY(ADDCON,ALPHA××NUMBERS);
       IF I=0
         THEN I=LENGTH(ADDCON)+1;
       RET=PTROUT(#SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(ADDCON,1,I-1)));
       END;
     ELSE DO;
       I=VERIFY(ADDCON,NUMBERS);
       IF I=0
         THEN I=LENGTH(ADDCON)+1; /* IT IS DECIMAL ADDRESS */
         ELSE DO;
           I=VERIFY(ADDCON,'0123456789ABCDEF'); /* BASIC ADDRESS */
           IF I<2
             THEN DO;
               MSGDATA='INVALID ADDRESS='××ADDCON;
               RHRC=8;
               RETURN(NULL);
               END;
           END;
       RET=PTROUT(SUBSTR(ADDCON,1,I-1));
       END;
   IF I<=LENGTH(ADDCON)
     THEN SELECT(SUBSTR(ADDCON,I,1));
       WHEN('R') DO; /* IT IS REGISTER REFERENCE */
         J=SUBSTR(ADDCON,1,I-1);
         IF J<0 × J>15
           THEN DO;
             MSGDATA='INVALID REGISTER REFERENCE';
             SIGNAL CONDITION(BADDUMP);
             END;
         RET=PTROUT(GETREG(J)); /* GET REGISTER CONTENTS */
         IF I=LENGTH(ADDCON)
           THEN DO;
             MSGDATA=DO_CONVERT_PTR(RET); /* DISPLAY REGISTER */
             RETURN(NULL);
             END;
         IF SUBSTR(ADDCON,I+1,1)^='%'
           THEN DO;
             MSGDATA='INVALID ADDRESS='××ADDCON;
             SIGNAL CONDITION(BADDUMP);
             END;
         I=I+1;
         END;
       WHEN('.')  /* IT IS MEMORY REFERENCE */
         RET=PTROUT(DO_CONVERT('HEX',SUBSTR(ADDCON,1,I-1)));
       WHEN('+','-','%')  /* IT IS MEMORY REFERENCE */
         I=I-1;
       OTHERWISE DO;
         MSGDATA='INVALID ADDRESS='××ADDCON;
         SIGNAL CONDITION(BADDUMP);
         END;
       END; /* SELECT */
   IF I<LENGTH(ADDCON)
     THEN RET=DO_PARSE_SUB(RET,SUBSTR(ADDCON,I+1));
   RETURN(RET);
   END DO_PARSE;

 DO_PARSE_SUB: PROC(PTR,ADDCON) RETURNS(PTR) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE ADDRESS CONSTANT.                                 *
 *                                                                     *
 **********************************************************************/
   DCL (PTR,RET) PTR,
       FROMADDR FIXED BIN(31,0) BASED(ADDR(PTR));
   DCL PTRPTR PTR;
   DCL ADDCON CHAR(*) VAR;
   DCL (I,J) FIXED BIN;
   DCL (FROMLENGTH,TOLENGTH) FIXED BIN(31,0) STATIC INIT(4);
   DCL TOADDR FIXED BIN(31,0);

   IF LENGTH(ADDCON)=0
     THEN RETURN(PTR);
   SELECT(SUBSTR(ADDCON,1,1));
     WHEN('%') DO;
       TOADDR=PTRIN(ADDR(PTRPTR));
       CALL MVCLXA(TOADDR,TOLENGTH,FROMADDR,FROMLENGTH);
       RETURN(DO_PARSE_SUB(PTRPTR,SUBSTR(ADDCON,2)));
       END;
     WHEN('+','-') DO;
       I=VERIFY(SUBSTR(ADDCON,2),'0123456789ABCDEF');
       IF I=0
         THEN I=LENGTH(ADDCON)+1;
         ELSE I=I+1;
       IF I<3
         THEN DO;
           MSGDATA='INVALID OFFSET='××ADDCON;
           SIGNAL CONDITION(BADDUMP);
           END;
       J=DO_CONVERT('HEX',SUBSTR(ADDCON,2,I-2));
       IF SUBSTR(ADDCON,1,1)='+'
         THEN RET=PTROUT(PTRIN(PTR)+J);
         ELSE RET=PTROUT(PTRIN(PTR)-J);
       IF I>LENGTH(ADDCON)
         THEN RETURN(RET);
         ELSE RETURN(DO_PARSE_SUB(RET,SUBSTR(ADDCON,I)));
       END;
     OTHERWISE DO;
       MSGDATA='INVALID ADDRESS='××ADDCON;
       SIGNAL CONDITION(BADDUMP);
       END;
     END; /* SELECT */
   END DO_PARSE_SUB;

 DO_PEEK: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET SYMBOLIC VARIABLE TO MEMORY                           *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN(31,0),
       ICH CHAR(4) BASED(ADDR(I));
   DCL (BASEPTR,NOWPTR) PTR;
   DCL (MYSTR,TROUTSTR) CHAR(256) VAR;
   DCL NUMSW FIXED BIN;
   DCL (FROMADDR,TOADDR,FROMLENGTH,TOLENGTH) FIXED BIN(31,0);

   IF PARY(4)=''
     THEN NUMSW=0; /* IF MSG, DEFAULT IS CHAR */
     ELSE NUMSW=1; /* OTHERWISE, DEFAULT IS NUM */
   IF PARY(2)^=''
     THEN DO;
       CALL SETCAPS(PARY(2));
       SELECT;
         WHEN(PARY(2)=SUBSTR('CHAR',1,MIN(4,LENGTH(PARY(2))))) NUMSW=0;
         WHEN(PARY(2)=SUBSTR('NUMB',1,MIN(4,LENGTH(PARY(2))))) NUMSW=1;
         WHEN(PARY(2)=SUBSTR('HEX',1,MIN(3,LENGTH(PARY(2)))))  NUMSW=2;
         OTHERWISE DO;
           MSGDATA='INVALID KEYWORD = '××PARY(2);
           RHRC=8;
           RETURN;
           END;
         END; /* SELECT */
       END;
   IF PARY(3)=''
     THEN LEN=4;
     ELSE LEN=PTRIN(DO_PARSE(PARY(3))); /* LEN */
   IF NUMSW=1 & LEN>4
     THEN DO;
       MSGDATA='LENGTH CAN''T BE MORE THAN 4';
       RHRC=8;
       RETURN;
       END;
   BASEPTR=DO_PARSE(PARY(1)); /* CONVERT ADDRESS */
   IF BASEPTR=NULL
     THEN RETURN; /* SOMETHING WRONG, OR REGISTER REFERENCE */
   MYSTR=REPEAT(' ',LEN-1); /* FILL IN BLANKS FOR MVCL */
   FROMLENGTH,TOLENGTH=LENGTH(MYSTR);
   FROMADDR=PTRIN(BASEPTR);
   TOADDR=PTRIN(ADDR(MYSTR))+2;
   CALL MVCLXA(TOADDR,TOLENGTH,FROMADDR,FROMLENGTH);
   SELECT;
     WHEN(NUMSW=0 & PARY(4)='') DO; /* IT IS CHAR MSG */
       CALL #ABETR(MYSTR);
       MSGDATA=MYSTR;
       END;
     WHEN(NUMSW=0 & PARY(4)^='') DO; /* IT IS CHAR ASSIGNMENT */
       CALL SETCAPS(PARY(4));
       CALL #SETC(RHHDRPT,RH_SYMTREE,PARY(4),MYSTR);
       END;
     WHEN(NUMSW=1 & PARY(4)='') DO; /* IT IS NUMERIC MSG */
       I=0;
       SUBSTR(ICH,5-LEN)=MYSTR;
       MSGDATA=#BARENUM(I);
       END;
     WHEN(NUMSW=1 & PARY(4)^='') DO; /* IT IS NUMERIC ASSIGNMENT */
       I=0;
       SUBSTR(ICH,5-LEN)=MYSTR;
       CALL SETCAPS(PARY(4));
       CALL #SETA(RHHDRPT,RH_SYMTREE,PARY(4),I);
       END;
     OTHERWISE DO; /* IT IS HEX */
       TROUTSTR=REPEAT(' ',LENGTH(MYSTR)*2-1);
       CALL TROUT(MYSTR,TROUTSTR);
       MSGDATA=TROUTSTR;
       END;
     END; /* SELECT */
   END DO_PEEK;

 DO_TRIN: PROC(PRMSTR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE ADDRESS CONSTANT.                                 *
 *                                                                     *
 **********************************************************************/
   DCL PRMSTR CHAR(*) VARYING;
   DCL INSTR CHAR(80) VARYING;
   DCL OUTSTR CHAR(70) VARYING;
   DCL (I,J,K,L) FIXED BIN;
   DCL ZEROS CHAR(8) INIT((8)'0');
   DCL TRINBIN FIXED BIN(31,0),
       TRINSTR CHAR(4) BASED(ADDR(TRINBIN));
   DCL TRINOUT PIC'ZZZZZZZZZ9';
   DCL TRINOUTS CHAR(13);
   DCL TROUTSTR CHAR(8);
   DCL PREFIX ENTRY RETURNS(FIXED BIN(15,0));
   DCL (TRIN,TROUT) ENTRY;

   INSTR=PRMSTR;
   DO I = INDEX(INSTR,',') REPEAT INDEX(INSTR,',') WHILE(I ^= 0);
     INSTR=SUBSTR(INSTR,1,I-1)××SUBSTR(INSTR,I+1);
     END;
   L = LENGTH(INSTR);
   IF L > 8
     THEN DO;
       MSGDATA='ERROR - ONLY 8 HEX DIGITS (4 BTYES) AT A TIME';
       SIGNAL CONDITION(BADDUMP);
       END;
     ELSE IF L < 8
       THEN INSTR=SUBSTR(ZEROS,1,8-L)××INSTR;
   CALL SETCAPS(INSTR);
   CALL TRIN(INSTR,TRINSTR);
   RETURN(TRINBIN);
   END DO_TRIN;

   END ABE014;
