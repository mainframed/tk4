 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE050 - CALC,FS,MCALC,PLOT,ZCALC SUBCOMMAND */
   %INCLUDE ABESUB;
 ABESUB(ABE050) PARS(0) RECURS(YES) PARSEVAL(NO) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   % INCLUDE ABESCAN;
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL SETCAPS ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL ZGLOBAL FIXED BIN(31,0);
   DCL KEYWORDS(1) CHAR(12) VAR STATIC INIT('');
   DCL GLOBUF CHAR(256) VAR;

   ON CONDITION(BADSTMT) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='INVALID OPERAND';
     RHRC=8;
     GOTO EOJ;
     END;
   IF CMDBUF=''
     THEN GLOBUF='';
     ELSE GLOBUF=SUBSTR(CMDBUF,PREFIX(CMDBUF,' '));
   TOKHDR=NULL;
   SUPPRESS=0;
   SELECT(CMDINDX);
     WHEN(1,2) DO;
       SUPPRESS=0;
       CALL CALC;
       END;
     WHEN(3) CALL FS;
     WHEN(4) CALL MCALC;
     WHEN(6) DO;
       SUPPRESS=1;
       CALL CALC;
       END;
     OTHERWISE CALL PLOT;
     END; /* SELECT */

 EOJ:
   CALL CLEANUP;
   RETURN;

 CALC: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT SUBCOMMAND IS CALC.                         *
 *                                                                     *
 **********************************************************************/

   MSGDATA='';
   IF GLOBUF=''
     THEN
      CALL #CALCEVA(PROMPT,#TERM,GET_OPERAND,GET_OPERAND_CHAR,
        PUT_OPERAND,ODD_FUNCTION);
     ELSE
      CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
        PUT_OPERAND,ODD_FUNCTION);
   IF MSGDATA^=''
     THEN CALL #SETC(RHHDRPT,RH_SYMTREE,'MSG',MSGDATA);
   END CALC;

 CLEANUP: PROC;
 /**********************************************************************
 * CLEANUP IS CALLED TO CLEAN UP MEMORY AT END OF PROCESSING IN THIS   *
 * SUBCOMMAND.                                                         *
 **********************************************************************/
   DCL DELPTR PTR;
   DO DELPTR=TOKHDR REPEAT TOKHDR WHILE(DELPTR^=NULL);
     TOKHDR=DELPTR->NEXT_TOKEN;
     FREE DELPTR->TOKEN;
     END;
   TOKHDR=NULL;
   SCANIX=1;
   END CLEANUP;

 FS: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT SUBCOMMAND IS FS.                           *
 *                                                                     *
 **********************************************************************/
   DCL R PTR;
   DCL I FIXED BIN(15,0);
   DO R=NXTHDR REPEAT R->NXTPTR WHILE(R^=HDPTR);
     I=INDEX(R->RECSTR,':');
     IF I=0
       THEN I=LENGTH(R->RECSTR)+1;
     END;
   END FS;

 GET_OPERAND: PROC(PRMPTR) RETURNS(FLOAT DEC(16));
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8) VAR;
   NAME=PRMPTR->TOKSTR;
   NAME=SUBSTR(NAME,1,SUFFIX(NAME,' '));
   RETURN(#SYMA(RHHDRPT,RH_SYMTREE,NAME));
   END GET_OPERAND;

 GET_OPERAND_CHAR: PROC(PRMPTR) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8);
   NAME=PRMPTR->TOKSTR;
   NAME=SUBSTR(NAME,1,SUFFIX(NAME,' '));
   RETURN(#SYMC(RHHDRPT,RH_SYMTREE,NAME));
   END GET_OPERAND_CHAR;

 MCALC: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURRENT SUBCOMMAND IS MCALC.                            *
 *                                                                     *
 * MCALC <EXPRESSION>                                                  *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN(31,0);
   DCL EXPRESSION CHAR(256) VAR;

   IF GLOBUF=''
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=GLOBUF;

   /* NOW PROCESS */
   R=0;
   DO FOREVER=1 REPEAT FOREVER;
     CALL #ABELSP(RHHDRPT,LRNPTR); /* GET NEXT FROM-SEGMENT */
     IF LRN_STRUCTURE.LRN_BUFP=NULL
       THEN LEAVE;
     N=LRN_CURCOL; /* CURRENT COLUMN NUMBER */
     IF RH_L1<RH_L2
       THEN IF N=1
         THEN R=R+1;
         ELSE;
       ELSE IF N=RH_NCOLS
         THEN R=R+1;
     LSPBUF=MCALCSUB(LSPBUF,EXPRESSION,R,N);
     END;

   RHRC=0;
   END MCALC;

 MCALCSUB: PROC(ESTR,EXPR,R,C) RETURNS(CHAR(80) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO EVALUATE EXPRESSION EXPR WITH VARIABLE E SET TO THE       *
 * CONTENTS OF ESTR.                                                   *
 *                                                                     *
 **********************************************************************/
   DCL ESTR CHAR(*);
   DCL EXPR CHAR(256) VAR;
    DCL (R,C) FIXED BIN(31,0);
   DCL RET CHAR(80) VAR;
   DCL VAL CHAR(256) VAR;
   ON CONVERSION BEGIN;
     RET='.';
     GOTO MRET;
     END;
   IF ESTR=' '
     THEN VAL='0';
     ELSE VAL=SUBSTR(ESTR,PREFIX(ESTR,' '));
   VAL=SUBSTR(VAL,1,SUFFIX(ESTR,' '));
   CALL #SETA(RHHDRPT,RH_SYMTREE,'R',R); /* SET VARIABLE R */
   CALL #SETA(RHHDRPT,RH_SYMTREE,'C',C); /* SET VARIABLE C */
   CALL #SETA(RHHDRPT,RH_SYMTREE,'E',VAL); /* SET VARIABLE E */
   GLOBUF=EXPR; /* SET UP GLOBUF FOR PROMPT SUBRTNE */
   CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);
   RET=MSGDATA;
 MRET:
   MSGDATA='';
   RETURN(RET);
   END MCALCSUB;

 MYTERM: PROC(MSG);
 /**********************************************************************
 * CALLED TO PRINT MESSAGE AT THE TERMINAL.                            *
 **********************************************************************/
   DCL MSG CHAR(*) VAR;
   IF MSGDATA=''
     THEN MSGDATA=MSG;
   END MYTERM;

 %INCLUDE ABE050A;

 PLOT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURRENT SUBCOMMAND IS PLOT.                             *
 *                                                                     *
 * PLOT <EXPRESSION>                                                   *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,X,Y) FIXED BIN(31,0);
   DCL EXPRESSION CHAR(256) VAR;

   IF GLOBUF=''
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=GLOBUF;

   /* NOW PROCESS */
   X=-1;
   DO FOREVER=1 REPEAT FOREVER;
     CALL #ABELSP(RHHDRPT,LRNPTR); /* GET NEXT FROM-SEGMENT */
     IF LRN_STRUCTURE.LRN_BUFP=NULL
       THEN LEAVE;
     Y=LRN_CURCOL; /* CURRENT COLUMN NUMBER */
     IF RH_L1<RH_L2
       THEN IF Y=1
         THEN X=X+1;
         ELSE;
       ELSE IF Y=RH_NCOLS
         THEN X=X+1;
     CALL PLOTSUB(EXPRESSION,X,Y-1);
     END;
   RHRC=0;
   END PLOT;

 PLOTSUB: PROC(EXPR,X,Y);
 /**********************************************************************
 *                                                                     *
 * CALLED TO EVALUATE EXPRESSION EXPR WITH VARIABLE X.                 *
 *                                                                     *
 **********************************************************************/
   DCL EXPR CHAR(256) VAR;
   DCL (L,X,Y,Z) FIXED BIN(31,0);
   DCL RET CHAR(80) VAR;
   DCL VAL CHAR(256) VAR;
   CALL #SETA(RHHDRPT,RH_SYMTREE,'X',X); /* SET VARIABLE X */
   CALL #SETA(RHHDRPT,RH_SYMTREE,'Y',Y); /* SET VARIABLE Y */
   GLOBUF='Z#'××EXPR; /* SET UP GLOBUF FOR PROMPT SUBRTNE */
   UNSPEC(ZGLOBAL)=UNSPEC(HIGH(4));
   CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);
   IF UNSPEC(ZGLOBAL)=UNSPEC(HIGH(4))
     THEN LSPBUF='';
     ELSE IF ZGLOBAL^=0
       THEN LSPBUF='1';
   MSGDATA='';
   END PLOTSUB;

 PROMPT: PROC RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO PROMPT FOR INPUT FROM THE TERMINAL.                       *
 **********************************************************************/
   DCL PRMPT CHAR(80) VAR STATIC INIT('CALC:');
   DCL INP CHAR(256) VAR;
   DCL SETCAPS ENTRY;
   IF GLOBUF=''
     THEN INP = #PROMPT(PRMPT);
     ELSE DO;
       INP=GLOBUF;
       GLOBUF='END';
       END;
 /*CALL SETCAPS(INP);
 */RETURN(INP);
   END PROMPT;

 PUT_OPERAND: PROC(PRMPTR,VALUE,MSG);
 /**********************************************************************
 * CALLED TO ASSIGN A VALUE TO A VARIABLE.                             *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL VALUE FLOAT DEC(16);
   DCL (MSG,TXT) CHAR(80) VAR;

   CALL #SETA(RHHDRPT,RH_SYMTREE,PRMPTR->TOKSTR,VALUE);
   IF PRMPTR->TOKSTR='Z'
     THEN ZGLOBAL=VALUE;
   END PUT_OPERAND;

   END ABE050;
