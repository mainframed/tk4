GETV     TITLE 'GETVBS -- READ THE NEXT LOGICAL RECORD ON V-LGTH FIL'
GETVBS   CSECT
         SPACE 1
*        THIS SUBROUTINE WILL READ THE NEXT LOGICAL RECORD ON A DATASET
*        WITH RECORD   TYPE "V", "VS", "VBS", OR "VB".
         SPACE 1
*        PARAMETERS
*
*              A STRUCTURE IS PASSED TO THE SUBROUTINE VIA NORMAL
*              LINKAGE, AND LOOKS AS FOLLOWS:
*
*              RETCD    DS    F
*              DCBPTR   DS    A
*              RECPTR   DS    A
*              RECLEN   DS    F
*              ERRCOUNT DS    9F
*
*              RETCD     RETURN CODE, SET BY THE SUBROUTINE.
*
*              DCBPTR    ADDRESS OF THE DCB FROM WHICH THE RECORD IS
*                        TO BE READ.
*
*              RECPTR    ADDRESS OF THE AREA INTO WHICH THE RECORD IS
*                        PLACED.
*              RECLEN    LENGTH OF THE AREA.
*
*              ERRCOUNT  COUNTERS OF TYPES OF ERRORS WHICH OCCUR WHILE
*                        READING THE FILE.
         SPACE 1
*        NOTES
*
*           1) THE RETURN CODE IS ALSO RETURNED IN GENERAL PURPOSE
*              REGISTER 15.
*
*           2) THE POSSIBLE RETURN CODES AND THEIR MEANINGS ARE:
*
*                  0     RECORD RETURNED SUCCESSFULLY
*
*                  4     END OF FILE
*
*                  8     UNRECOVERABLE INPUT ERROR
*
*           3) BEFORE THE FIRST CALL TO THE ROUTINE, THE FILE MUST BE
*              OPENED.  THE DCB SHOULD NOT BE MODIFIED IN ANY WAY
*              AFTER BEING OPENED.  WHEN A RETURN CODE OF 4 (END OF
*              FILE) IS RETURNED, THE FILE HAS BEEN CLOSED.
*
*           4) THE FILE'S DCB ATTRIBUTES SHOULD BE AS FOLLOWS:
*
*                   RECFM=U
*                   BLKSIZE=  AT LEAST AS LARGE AS THE LARGEST BLOCK
*                             IN THE FILE
*                   MACRF=RC
*                   DSORG=PS
*                   BUFNO=1
*
*           5) THE ERROR COUNT FIELDS ARE ZEROED BY THE SUBROUTINE
*              UPON THE FIRST CALL TO IT.  WHEN AN ERROR IS
*              ENCOUNTERED, THE SUBROUTINE WILL INCREMENT THE COUNT
*              FOR THE PARTICULAR RECORD, AND THEN CONTINUE UNTIL A
*              GOOD RECORD RECORD IS FOUND.  WHEN A RETURN CODE OF 4
*              (END OF FILE) IS RETURNED, THE ERROR COUNT FIELDS WILL
*              CONTAIN THE TOTAL COUNTS OF ERRORS.
*
*           6) THE MEANING OF EACH ERROR FIELD IS AS FOLLOWS:
*
*                      ERROR TYPE           MEANING
*
*                          1          BAD BLOCK COUNT.
*                          2          SHORT BLOCK.
*                          3          SDW (SEGMENT DESCRIPTOR WORD)
*                                     LENGTH NEGATIVE OR LESS THAN 4.
*                          4          SDW LENGTH LARGER THAN ACTUAL
*                                     SEGMENT.
*                          5          MISSING TRAILER SEGMENT.
*                          6          CONTINUATION OR FIRST SEGMENT
*                                     NOT AT END OF BLOCK.
*                          7          MISSING FIRST SEGMENT.
*                          8          LOGICAL RECORD TOO LARGE FOR
*                                     AREA.
*                          9          INPUT ERROR OCCURRED.
*
*           7) THE SUBROUTINE SHOULD BE CALLED FOR ONE FILE AT A TIME.
*              IF MORE THAN ONE FILE IS TO BE USED, THE SECOND SHOULD
*              NOT BE USED UNTIL YOU ARE FINISHED WITH THE FIRST.
*
*           8) A RETURN CODE OF 8 INDICATES THAT A "SYNAD" EXIT WAS
*              TAKEN SUCCESSIVELY TWICE.  THE FILE IS LEFT OPENED,
*              AND THEREFORE IF THE CALLING ROUTINE DOES NOT WANT TO
*              USE THE REMAINING RECORDS ON THE FILE, IT SHOULD BE
*              CLOSED.
*
*            9) "RECPTR" MUST POINT TO A FULLWORD ADDRESS.
         SPACE 1
*        PROGRAM BY DON LOOMIS     JANUARY 11, 1973
         SPACE 2
         SAVE  (14,12),T,*
         USING GETVBS,R12
         LR    R12,R15
         LA    R14,SAVE1
         ST    R14,8(,R13)
         ST    R13,SAVE1+4
         LR    R13,R14
         L     R11,0(,R1)          R11 = A..PARM STRUCTURE
         USING GETVBSP,R11
         L     RA,DCBPTR           RA = A..DCB
         C     RA,LDCB             SAME DCB ?
         BE    GETV10              YES, CONTINUE
*------        A NEW FILE IS TO BE USED.  PERFORM INITIALIZATION.
         ST    RA,LDCB             SAVE DCB ADDRESS
         XC    ERRCOUNT(9*4),ERRCOUNT   ERRCOUNT = 0
         OI    INDICAT,INDNBLK     INDNBLK = 1
         MVC   DCBEODAD-IHADCB+1(3,RA),=AL3(GETVEOF)  EOF EXIT ADDR
         MVC   DCBSYNAD-IHADCB+1(3,RA),=AL3(GETVSYN)  SYNAD EXIT ADDR
         L     RB,WRK              RB = A.. WORKAREA
         LTR   RB,RB               ZERO?
         BZ    GETV04                   YES, GO AND GET A WORKAREA
         L     I,LWRK              GET ITS LENGTH
         CH    I,DCBBLKSI-IHADCB(,RA)   IS IT THE SAME LENGTH?
         BE    GETV06                        YES, GO AND USE IT
         LR    R0,I                          NO, FREE IT
         LR    R1,RB               R0 = LENGTH;  R1 = ADDRESS;
         FREEMAIN   R,LV=(0),A=(1)
GETV04   DS    0H                  ACQUIRE A WORKAREA
         LH    R0,DCBBLKSI-IHADCB(,RA)  R0 = LENGTH;
         GETMAIN    R,LV=(0)
         ST    R1,WRK              SAVE ADDRESS
         ST    R0,LWRK             AND LENGTH
GETV06   DS    0H                  WORKAREA HAS BEEN GOTTEN
         SPACE 2
GETV10   DS    0H                  BEGIN PROCESSING
         OI    INDICAT,INDNEW      INDNEW = 1
         NI    INDICAT,255-INDERR-INDSYNAD-INDSYNF
*                                  INDERR, INDSYNAD, INDSYNF = 0
         TM    INDICAT,INDNBLK     INDNBLK = 1?
         BO    PREREAD
         L     LBLK,PREVLBLK                LBLK = PREVLBLK
         L     IBLK,PREVIBLK       IBLK = PREVIBLK
         L     IREC,RECPTR         IREC = RECPTR
         L     LREC,RECLEN         LREC = RECLEN
         B     CKSDW                        GOTO CKSDW
PREREAD  DS    0H                  GET SET TO FIND NEW LOGICAL RECORD
         L     IREC,RECPTR         IREC = RECPTR
         L     LREC,RECLEN         LREC = RECLEN
READ     DS    0H                  GET SET TO READ
         NI    INDICAT,255-INDSYNAD  INDSYNAD = 0
         L     RA,DCBPTR                RA = A..DCB
         L     IBLK,WRK                 IBLK = A..AREA
         READ  DECB1,SF,(RA),(IBLK),'S'      READ A BLOCK
         CHECK DECB1               AND CHECK IT
         TM    INDICAT,INDSYNAD    INDSYNAD=1? (SYNAD EXIT TAKEN)
         BNO   GETV11
         LA    I,9                      YES, ERROR TYPE 9
         B     GETVERR
GETV11   DS    0H
         NI    INDICAT,255-INDSYNF-INDSYNAD
*                                  INDSYNAD, INDSYNF = 0
         L     LBLK,LWRK           LBLK = BLKSIZE
         L     RA,DCBIOBA-IHADCB(,RA)   RA = A.. IOB PREFIX
         SH    LBLK,CSWD(,RA)      LBLK = BLKSIZE - RESIDUAL
         CH    LBLK,DLEN(,IBLK)    RECORD SIZE = LENGTH?
         BE    GETV12
         LA    I,1                      NO, ERROR TYPE 1
         B     GETVERR
GETV12   DS    0H
         C     LBLK,=F'9'          RECORD SIZE > 9?
         BH    GETV14
         LA    I,2                      NO, ERROR TYPE 2
         B     GETVERR
GETV14   DS    0H
         S     LBLK,=F'4'          LBLK = LBLK - 4
         LA    IBLK,4(,IBLK)       IBLK = A.. FIRST SEGMENT
         SPACE 1
CKSDW    DS    0H                  CHECK SDW
         MVC   HALF,DLEN(IBLK)
         LH    LSEG,HALF           LSEG = LENGTH OF SEGMENT
         C     LSEG,=F'4'          LENGTH < 4?
         BNL   GETV16
         LA    I,3                      YES, ERROR TYPE 3
         B     GETVERR
GETV16   DS    0H
         CR    LSEG,LBLK           SEGMENT WITHIN RECORD?
         BNH   GETV18
         LA    I,4                      NO, ERROR TYPE 4
         B     GETVERR
GETV18   DS    0H
         TM    INDICAT,INDNEW      INDNEW = 1?
         BNO   CONREC                   NO, GOTO CONREC
         SPACE 3
NEWREC   DS    0H                  NEW RECORD EXPECTED
         CLI   DSEGT(IBLK),SEGC    COMPLETE LOGICAL RECORD?
         BE    MOVELAST                 YES, GOTO MOVELAST
         CLI   DSEGT(IBLK),SEGF    FIRST SEGMENT OF MULTISEG?
         BE    MOVESEG                  YES, GOTO MOVE LAST
         LA    I,7                 ELSE ERROR TYPE 7
         B     GETVERR
         SPACE 3
CONREC   DS    0H                  CONTINUATION EXPECTED
         CLI   DSEGT(IBLK),SEGL    LAST SEGMENT?
         BE    MOVELAST                 YES, GOTO MOVELAST
         CLI   DSEGT(IBLK),SEGI    INTERMEDIATE SEGMENT?
         BE    MOVESEG                  YES, GOTO MOVESEG
         LA    I,5                 ELSE ERROR TYPE 5
         B     GETVERR
         SPACE 3
MOVESEG  DS    0H                  MOVE SEGMENT
         CR    LBLK,LSEG           LAST SEG IN BLOCK?
         BE    GETV20
         LA    I,6                      NO, THEN ERROR TYPE 6
         B     GETVERR
GETV20   DS    0H
         C     IREC,RECPTR         FIRST PART OF LOGICAL RECORD?
         BNE   GETV22
         XC    0(4,IREC),0(IREC)        YES, THEN CLEAR SDW
         LA    IREC,4(,IREC)                 AND GET PAST IT
         S     LREC,=F'4'
GETV22   DS    0H
         CR    LSEG,LREC           WILL IT FIT IN AREA?
         BNH   GETV24
         LA    I,8                      NO, THEN ERROR TYPE 8
         B     GETVERR
GETV24   DS    0H
*------        MOVE RECORD
         LR    R15,LSEG
         S     R15,=F'5'           R15 = LENGTH-1 TO MOVE
         LA    R14,4(,IBLK)        R14 = A..AREA TO MOVE
         LR    R1,IREC             R1  = A..AREA TO MOVE INTO
GETV26   DS    0H
         C     R15,=F'256'         BLOCK OF 256 BYTES TO MOVE?
         BL    GETV30              NO, GO AND MOVE LAST PART
         MVC   0(256,R1),0(R14)    MOVE 256-BYTE BLOCK
         LA    R1,256(,R1)         R1 = A..NEXT TARGET LOC
         LA    R14,256(,R14)       R14 = A..NEXT AREA TO MOVE
         S     R15,=F'256'         DECREMENT COUNT
         B     GETV26              AND LOOP BACK
GETV28   MVC   0(0,R1),0(R14)      EXECUTED MOVE
GETV30   DS    0H
         EX    R15,GETV28          MOVE LAST 256 OR LESS BYTES
         AR    IREC,LSEG
         S     IREC,=F'4'          IREC = A..FOR NEXT SEG
         SR    LREC,LSEG
         LA    LREC,4(,LREC)       LREC = NEW LENGTH LEFT IN AREA
         NI    INDICAT,255-INDNEW  INDNEW = 0
         B     READ                AND GO READ
         SPACE 3
MOVELAST DS    0H                  MOVE LAST SEGMENT
         C     IREC,RECPTR         FIRST PART OF LOGICAL RECORD?
         BNE   GETV34
         XC    0(4,IREC),0(IREC)        YES, THEN CLEAR SDW
         LA    IREC,4(,IREC)                 AND GET PAST IT
         S     LREC,=F'4'
GETV34   DS    0H
         CR    LSEG,LREC           WILL IT FIT IN AREA?
         BNH   GETV36
         LA    I,8                      NO, THEN ERROR TYPE 8
         B     GETVERR
GETV36   DS    0H
*------        MOVE RECORD
         LR    R15,LSEG
         S     R15,=F'5'           R15 = LENGTH-1 TO MOVE
         LA    R14,4(,IBLK)        R14 = A..AREA TO MOVE
         LR    R1,IREC             R1  = A..TARGET AREA
GETV38   DS    0H
         C     R15,=F'256'         BLOCK OF 256 BYTES TO MOVE?
         BL    GETV42                   NO, GO AND MOVE LAST PART
         MVC   0(256,R1),0(R14)    MOVE 256-BYTE BLOCK
         LA    R1,256(,R1)         R1 = A..NEXT TARGET LOC
         LA    R14,256(,R14)       R14 = A..NEXT AREA TO MOVE
         S     R15,=F'256'         DECREMENT COUNT
         B     GETV38              AND LOOP BACK
GETV40   MVC   0(0,R1),0(R14)      EXECUTED MOVE
GETV42   DS    0H
         EX    R15,GETV40          MOVE LAST 256 OR LESS BYTES
         SR    LREC,LSEG
         LA    LREC,4(,LREC)       LREC = NEW LENGTH LEFT IN AREA
         S     LREC,RECLEN
         LCR   R0,LREC             R0 = LENGTH OF LOGICAL RECORD
         L     R1,RECPTR
         STH   R0,DLEN(,R1)        STORE IN LL OF RECORD
         CR    LBLK,LSEG           LAST SEGMENT ON THE BLOCK
         BNE   GETV48
         OI    INDICAT,INDNBLK     YES, INDNBLK = 1
         B     RET0                     AND RETURN
GETV48   DS    0H
         NI    INDICAT,255-INDNBLK NO,  INDNBLK = 0
         SR    LBLK,LSEG
         ST    LBLK,PREVLBLK            PREVLBLK = NEW LENGTH
         AR    IBLK,LSEG
         ST    IBLK,PREVIBLK            PREVIBLK = NEW ADDR
         B     RET0                     AND RETURN
         SPACE 3
GETVERR  DS    0H                  COMMON ERROR HANDLER
*                                       I CONTAINS ERROR TYPE
         SLL   I,2                 I = I * 4 (INDEX)
         TM    INDICAT,INDERR      INDERR = 1?
         BO    GETV44                   YES, THEN DONT INCREMENT COUNT
         L     R15,ERRCOUNT-4(I)   ERRCOUNT(I)
         LA    R15,1(,R15)                     = ERRCOUNT(I)
         ST    R15,ERRCOUNT-4(I)                 + 1
         OI    INDICAT,INDERR      INDERR = 1
GETV44   B     *(I)                GOTO APPROPRIATE ROUTINE
         B     PREREAD                  ERROR TYPE 1
         B     PREREAD                  ERROR TYPE 2
         B     RESET                    ERROR TYPE 3
         B     RESET                    ERROR TYPE 4
         B     RESETUSE                 ERROR TYPE 5
         B     RESET                    ERROR TYPE 6
         B     RESETNXT                 ERROR TYPE 7
         B     RESETNXT                 ERROR TYPE 8
         B     SYNCK                    ERROR TYPE 9
         SPACE 2
RESET    DS    0H                  START LOOKING FOR NEW
*                                  RECORD BEGINNING WITH
*                                  THE NEXT BLOCK
         SPACE 1
         OI    INDICAT,INDNEW      INDNEW = 1
         B     PREREAD             GOTO PREREAD
         SPACE 2
RESETUSE DS    0H                  START LOOKING FOR NEW RECORD
*                                  BEGINNING WITH THE CURRENT
*                                  SEGMENT
         SPACE 1
         OI    INDICAT,INDNEW      INDNEW = 1
         L     IREC,RECPTR         IREC = RECPTR
         L     LREC,RECLEN         LREC = RECLEN
         B     NEWREC              GOTO NEWREC
         SPACE 2
RESETNXT DS    0H                  START LOOKING FOR NEW RECORD
*                                  BEGINNING WITH THE NEXT
*                                  SEGMENT
         SPACE 1
         OI    INDICAT,INDNEW      INDNEW = 1
         L     IREC,RECPTR         IREC = RECPTR
         L     LREC,RECLEN         LREC = RECLEN
         CR    LBLK,LSEG           LAST SEG IN BLOCK?
         BE    READ                     YES, GOTO READ NEXT
         SR    LBLK,LSEG                NO,  LBLK = NEW LENGTH
         AR    IBLK,LSEG                     IBLK = NEW SEGMENT
         B     CKSDW                         AND GOTO CKSDW
         SPACE 2
SYNCK    DS    0H
         TM    INDICAT,INDSYNF     HAS SYNAD EXIT BEEN TAKEN TWICE
*                                  CONSECUTIVELY?
         BO    RET8                     YES, THEN RETURN WITH RC=8.
         OI    INDICAT,INDNEW+INDSYNF  INDNEW, INDSYNF = 1
         B     PREREAD             GOTO PREREAD
         SPACE 2
GETVEOF  DS    0H                  END-OF-FILE ROUTINE
         TM    INDICAT,INDNEW      INDNEW = 1?  (LOOKING FOR NEW REC)
         BO    GETV52                   YES, THEN NO ERR
         TM    INDICAT,INDERR      ERROR OCCUR?
         BO    GETV52                   YES, THEN DONT COUNT ANOTHER
         L     R15,ERRCOUNT-4+5*4       NO, THEN ADD 1 TO
         LA    R15,1(,R15)                   ERROR COUNT FOR
         ST    R15,ERRCOUNT-4+5*4            TYPE 5 ERROR.
GETV52   DS    0H
*              TERMINATION PROCEDURES
         L     RA,DCBPTR
         CLOSE ((RA))              CLOSE FILE
         L     R0,LWRK
         L     R1,WRK
         FREEMAIN   R,LV=(0),A=(1) FREE WORKAREA
         XC    LWRK,LWRK           ZERO FIELDS
         XC    LDCB,LDCB           ZERO FIELDS
         B     RET4                GO AND RETURN WITH RC = 4
         SPACE 2
GETVSYN  DS    0H                  SYNAD EXIT ROUTINE
         SYNADAF    ACSMETH=BSAM   GET I/O ERROR MSG
         MVC   44(4,R1),=H'84,0'   MSG LENGTH FOR WTO
         LA    R1,44(R1)
         WTO   ,MF=(E,(1))         WRITE MSG
         SYNADRLS                  RELEASE AREA
         OI    INDICAT,INDSYNAD    INDSYNAD = 1
         BR    R14                 RETURN FROM EXIT
         SPACE 2
RET8     DS    0H                  RETURN WITH RC=8
         LA    R15,8
         B     RET
RET4     DS    0H                  RETURN WITH RC=4
         LA    R15,4
         B     RET
RET0     DS    0H                  RETURN WITH RC=0
         SR    R15,R15
RET      DS    0H                  RETURN
         ST    R15,RETCD
         L     R13,4(,R13)
         RETURN     (14,12),RC=(15)
         EJECT
SAVE1    DC    18F'0'              SAVE AREA
LDCB     DC    A(0)                DCB LAST USED  (0 = NONE)
WRK      DC    A(0)                WORKAREA ADDRESS
LWRK     DC    F'0'                LENGTH OF WORKAREA  (0 = NONE)
PREVIBLK DC    A(0)                A..LOCATION ON PREVIOUS BLOCK
PREVLBLK DC    F'0'                LENGTH OF PREVIOUS BLOCK LEFT
         SPACE 1
HALF     DS    H                   WORK AREA
INDICAT  DC    X'00'               INDICATORS (FLAGS)
INDNEW   EQU   B'10000000'         1=EXPECTING NEW RECORD;
*                                  0 = CONTINUATION OR LAST EXPECTED.
INDNBLK  EQU   B'01000000'         1=NEW BLOCK NEEDED
INDERR   EQU   B'00100000'         1 = ERROR DETECTED
INDSYNAD EQU   B'00010000'         1 = SYNAD EXIT TAKEN
INDSYNF  EQU   B'00001000'         1 = SYNAD TAKEN IN PREVIOUS READ
         SPACE 1
*        DISPLACEMENTS
CSWD     EQU   X'16'               DISPLACEMENT FROM IOB PREFIX TO
*                                  LOW-ORDER HALFWORD OF CSW.
DLEN     EQU   0                   DISPLACEMENT FOR SEG, BLOCK LENGTH
DSEGT    EQU   2                   DISPLACEMENT FOR SEGMENT TYPE
*                                  INDICATOR
         SPACE 1
SEGC     EQU   0                   COMPLETE LOGICAL RECORD
SEGF     EQU   1                   FIRST SEG OF A MULTISEG RECORD
SEGL     EQU   2                   LAST SEG OF A MULTISEG RECORD
SEGI     EQU   3                   SEG OF A MULTISEG RECORD OTHER THAN
*                                  THE FIRST
         SPACE 1
*        REGISTERS
R0       EQU   0
R1       EQU   1
R2       EQU   2
I        EQU   3                   WORK
RA       EQU   4                   WORK
RB       EQU   5                   WORK
IBLK     EQU   6                   POINTER TO RECORD SEGMENT
LBLK     EQU   7                   LENGTH OF RECORD LEFT
IREC     EQU   8                   POINTER TO LOGICAL RECORD
LREC     EQU   9                   LENGTH OF LOGICAL RECORD LEFT
LSEG     EQU   10                  LENGTH OF CURRENT SEGMENT
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
*        PARAMETER STRUCTURE
GETVBSP  DSECT
RETCD    DS    F                   RETURN CODE
DCBPTR   DS    A                   DCB ADDRESS
RECPTR   DS    A                   POINTER TO AREA INTO WHICH RECORD
*                                  IS PLACED
RECLEN   DS    F                   LENGTH OF THE AREA
ERRCOUNT DS    9F                  COUNT OF ERRORS
*        DSECT FOR ACCESSING DCB
         DCBD  DSORG=BS,DEVD=DA
         END
