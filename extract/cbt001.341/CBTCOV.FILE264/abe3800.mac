   %INCLUDE ABESUB;
 ABESUB(ABE3800) PARS(111110) CHECK(YES);
   %INCLUDE ABESUBA;
 /**********************************************************************
 *                                                                     *
 * THIS MODULE SHOULD BE INVOKED VIA THE PGM SUBCOMMAND OF ABE.  IT IS *
 * DESIGNED TO PRINT THE TEXT ON THE IBM 3800 MODEL 3 LASER            *
 * PRINTER.  THE FOLLOWING POINTS SHOULD BE NOTED.                     *
 *                                                                     *
 * 1.  TEXT IS READ FROM DDNAME DOCIN, AND OUTPUT                      *
 *     FOR THE IBM 3800 IS WRITTEN TO THE DDNAME DOCOUT.               *
 * 2.  OUTPUT WILL BE IN THE FORM OF A COMPOSED-TEXT PRINT DATA SET.   *
 * 3.  THE SPECIAL PRINT FONTS XNLG10 AND XNLOGO, WHICH ARE 10- AND    *
 *     20-PITCH RESPECTIVELY, ARE USED BASED ON THE VALUE OF THE       *
 *     FIRST ARGUMENT ACCEPTED BY THIS PROGRAM (ACCEPTABLE ARGUMENT    *
 *     VALUES ARE 10 AND 20, 20 BEING THE DEFAULT).  THE CHARACTER N   *
 *     IN EACH FONT NAME IS REPLACED WITH EITHER 1 OR 2 DEPENDING ON   *
 *     WHICH ORIENTATION IS BEING USED.                                *
 * 4.  THE SECOND ARGUMENT SPECIFIES THE LINESIZE, OR NUMBER OF        *
 *     CHARACTERS PER PRINT LINE.  THE DEFAULT IS 71.                  *
 * 5.  THE THIRD ARGUMENT SPECIFIES THE ANGLE RELATIVE TO THE NORMAL   *
 *     PRINT LINE DIRECTION AT WHICH LINES ARE TO BE PRINTED.  THE     *
 *     DEFAULT IS -90.                                                 *
 * 6.  THE FOURTH ARGUMENT SPECIFIES THE NUMBER OF LOGICAL PAGES TO BE *
 *     PRINTED PER PHYSICAL PAGE.  THE DEFAULT IS 4 IF PITCH=20 AND    *
 *     LINESIZE<=71.                                                   *
 * 7.  THE FIFTH ARGUMENT MUST BE EITHER 1 OR 0 TO INDICATE WHETHER A  *
 *     LINE BORDER IS TO BE WRITTEN AROUND EACH LOGICAL PAGE.          *
 * 8.  THE FOLLOWING TABLE GIVES ACCEPTABLE VALUES FOR THE VARIOUS     *
 *     ARGUMENTS:                                                      *
 *                                                                     *
 *                        LOGICAL PAGES                                *
 *                        PER PHYSICAL  LINE      LINES PER            *
 *         PITCH LINESIZE PAGE          DIRECTION LOGICAL PAGE FORM    *
 *                                                                     *
 *         20    1-71     4             -90       60           STD     *
 *         20    1-106    4             0         39           STD     *
 *         20    1-148    1             -90       123          STD     *
 *         20    1-218    1             0         81           STD     *
 *         10    1-71     1             -90       60           STD     *
 *         10    1-106    1             0         39           STD     *
 *                                                                     *
 *         20    1-100    4             -90       51           009X    *
 *         20    1-85     4             0         60           009X    *
 *         20    1-200    1             -90       102          009X    *
 *         20    1-170    1             0         120          009X    *
 *         10    1-50     4             -90       25           009X    *
 *         10    1-42     4             0         30           009X    *
 *         10    1-100    1             -90       51           009X    *
 *         10    1-85     1             0         60           009X    *
 *                                                                     *
 *     NOTE:  THE X IN FORM 009X CAN BE EITHER 4 OR 5.                 *
 *                                                                     *
 * 9.  PAGES CONTAINING GRAPHICS DRAWINGS ARE INCLUDED IN DOCIN.  A    *
 *     GRAPHICS DRAWING IS IDENTIFIED BY A CONTROL STATEMENT OF THE    *
 *     FOLLOWING FORMS:                                                *
 *                                                                     *
 *       .GR <NNN> <SYSRUN MEMBER NAME> <OPERANDS>                     *
 *                                                                     *
 *     OR                                                              *
 *                                                                     *
 *       .GG <START LINE> <START CHARACTER POSITION>                   *
 *           <END LINE> <END CHARACTER POSITION>                       *
 *           <SYSRUN MEMBER NAME> <OPERANDS>                           *
 *                                                                     *
 **********************************************************************/
   %INCLUDE @HEXCHAR;

   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL PSFCODE ENTRY(CHAR(3)) RETURNS(CHAR(3));
   DCL INREC CHAR(4000) VAR;
   DCL PIC PIC'99999';
   DCL ESCAPE CHAR(2) STATIC INIT(@HEXCHAR(2BD3)); /* CTX ESCAPE SEQ */
   DCL CK CHAR(2);
   DCL FONT CHAR(8);
   DCL STO CHAR(4); /* SET TO PROPER TEXT ORIENTATION CODE */
   DCL SEQUENCE FIXED BIN(15,0) INIT(0);
   DCL FORM CHAR(4) VAR;

   YES=1;
   NO=0;
   BLOCK_NUMBER,IMAGE_NUMBER,PAGE_NUMBER=0;

   /* NOW VALIDATE ARGUMENT VALUES */
   IF PARMOK=NO /* GO CHECK TO SEE IF ARGUMENTS ARE OK */
     THEN DO;
       IF MSGDATA=''
         THEN MSGDATA='INVALID ARGUMENT COMBINATION.';
       RHRC=8;
       I=#CMD('CALC RC#8',RHPTR,RHHDRPT);
       RETURN;
       END;

   /* NOW DETERMINE LOGICAL PAGE DIMENSIONS */
   IF PRINT_DIRECTION=0
     THEN DO;
       PHYSICAL_PAGE_HEIGHT=HEIGHT;
       PHYSICAL_PAGE_WIDTH=WIDTH;
       END;
     ELSE DO;
       PHYSICAL_PAGE_HEIGHT=WIDTH;
       PHYSICAL_PAGE_WIDTH=HEIGHT;
       END;
   IF LPPPP=1
     THEN DO;
       LOGICAL_PAGE_HEIGHT=PHYSICAL_PAGE_HEIGHT;
       LOGICAL_PAGE_WIDTH=PHYSICAL_PAGE_WIDTH;
       END;
     ELSE DO; /* IT MUST BE 4 LOGICAL PAGES PER PHYSICAL PAGE */
       LOGICAL_PAGE_HEIGHT=PHYSICAL_PAGE_HEIGHT/2;
       LOGICAL_PAGE_WIDTH=PHYSICAL_PAGE_WIDTH/2;
       END;
   BOTTOM_MARGIN,TOP_MARGIN=
     (LOGICAL_PAGE_HEIGHT-LINES_PER_PAGE*BASELINE_INCR)/2;
   LEFT_MARGIN=(LOGICAL_PAGE_WIDTH-LINESIZE*MARGIN_INCR)/2;
   GRAPHICS_LEFT_MARGIN=LEFT_MARGIN*3;

   OPEN FILE(RH_SEQ_1) TITLE('DOCIN') RECORD INPUT;
   OPEN FILE(RH_SEQ_2) TITLE('DOCOUT') RECORD OUTPUT;

   CALL WRITEOUT(INTRO('BDT')××'DOC00000'); /* BEGIN DOCUMENT */

   ON ENDFILE(RH_SEQ_1) GOTO EOJ;
   EPGSW,ECTSW=0;
   DO UNTIL(SUBSTR(INREC,1,1)='1');
     CALL READREC;
     END;
   DO FOREVER=1 REPEAT FOREVER;
     DO QUADRANT=1 TO LPPPP;
       CALL NEWPAGE(QUADRANT,EPGSW,ECTSW,BASELINE,MARGIN);
       DO UNTIL(SUBSTR(INREC,1,1)='1');
         IF ECTSW=0
           THEN CALL NEWBLOCK(ECTSW,QUADRANT,BASELINE,MARGIN);
         IF SUBSTR(INREC,1,1)^='.'
           THEN CALL NEWLINE(SUBSTR(INREC,2),
             BASELINE,SUBSTR(INREC,1,1));
           ELSE DO; /* IT M/B .IM, .GG, OR .GR */
             IF ECTSW=1
               THEN DO;
                 SAVE=BASELINE;
                 CALL ENDBLOCK(ECTSW,BASELINE);
                   /* END COMPOSED TEXT BLOCK */
                 BASELINE=SAVE;
                 END;
             CK=SUBSTR(INREC,2,2);
             CALL SETCAPS(CK);
             SELECT(CK);
               WHEN('CM')
                 CALL DO_CM(SUBSTR(INREC,5));
               WHEN('IM')
                 CALL DO_IMAGE_GET(SUBSTR(INREC,5));
               WHEN('GG')
                 CALL DO_GG_GRAPHICS(QUADRANT,BASELINE,MARGIN);
               WHEN('GR')
                 CALL DO_GR_GRAPHICS(QUADRANT,BASELINE,MARGIN);
               WHEN('IN')  /* IT IS INCLUDE */
                 I=#CMD('INCLUDE '××SUBSTR(INREC,5),RHPTR,RHHDRPT);
               OTHERWISE;
               END;
             END;
         IF NXTHDR=HDPTR
           THEN CALL READREC;
           ELSE DO;
             INREC=NXTHDR->RECSTR;
             I=#CMD('T DELETE',RHPTR,RHHDRPT);
             END;
         END;
       END;
     IF ECTSW=1
       THEN CALL ENDBLOCK(ECTSW,BASELINE); /* END COMPOSED TEXT BLOCK */
     CALL ENDPAGE(EPGSW);
     END;
 EOJ:;
   IF ECTSW=1
     THEN CALL ENDBLOCK(ECTSW,BASELINE); /* END COMPOSED TEXT BLOCK  */
   IF EPGSW=1
     THEN CALL ENDPAGE(EPGSW); /* COMPLETE CURRENT PAGE */
   CALL WRITEOUT(INTRO('EDT')××'DOC00000'); /* END DOCUMENT */
   CLOSE FILE(RH_SEQ_1);
   CLOSE FILE(RH_SEQ_2);

 BARENUM: PROC(PRM) RETURNS(CHAR(20) VAR);
   DCL PRM FIXED BIN;
   DCL PIC PIC'ZZZZZZZZZZZZZZ9';
   DCL RET CHAR(20) VAR;

   PIC=PRM;
   RET=SUBSTR(PIC,PREFIX(PIC,' '));
   RET=SUBSTR(RET,1,SUFFIX(RET,' '));
   RETURN(RET);
   END BARENUM;

 CHFIV: PROC(PRM) RETURNS(CHAR(5));
   DCL PRM FIXED BIN;
   DCL PIC PIC'99999';

   PIC=PRM;
   RETURN(PIC);
   END CHFIV;

 DO_CM: PROC(INCMD);
   DCL INCMD CHAR(*);
   DCL I FIXED BIN;

   I=#CMD('RUN '××INCMD,RHPTR,RHHDRPT);
   END DO_CM;

 DO_GG_GRAPHICS: PROC(QUADRANT,BASELINE,MARGIN);
   DCL (QUADRANT,BASELINE,MARGIN) FIXED BIN;
   DCL (I,J) FIXED BIN;
   DCL MYBUF CHAR(100) VAR;
   DCL SYMARY(4) CHAR(5) STATIC INIT('LINE1','CHAR1','LINE2','CHAR2');

   MYBUF=SUBSTR(INREC,4)××' ';
   DO I=1 TO HBOUND(SYMARY,1);
     MYBUF=SUBSTR(MYBUF,PREFIX(MYBUF,' '));
     J=INDEX(MYBUF,' ');
     CALL #SETC(RHHDRPT,RH_SYMTREE,SYMARY(I),SUBSTR(MYBUF,1,J-1));
     MYBUF=SUBSTR(MYBUF,J);
     END;
   MYBUF=SUBSTR(MYBUF,PREFIX(MYBUF,' '));
   CALL #SETC(RHHDRPT,RH_SYMTREE,'CMD',MYBUF);
   CALL DO_GG_LINETEST('LINE1');
   CALL DO_GG_LINETEST('LINE2');
   I=#CMD('SETL BASE '××BARENUM(START_BASELINE),RHPTR,RHHDRPT);
   I=#CMD('SETL HEIGHT '××BARENUM(PHYSICAL_PAGE_HEIGHT),
     RHPTR,RHHDRPT);
   I=#CMD('SETL WIDTH '××BARENUM(PHYSICAL_PAGE_WIDTH),
     RHPTR,RHHDRPT);
   I=#CMD('SETL MARGIN '××BARENUM(MARGIN),RHPTR,RHHDRPT);
   I=#CMD('SETL BASEINC '××BARENUM(BASELINE_INCR),RHPTR,RHHDRPT);
   I=#CMD('SETL MARGINC '××BARENUM(MARGIN_INCR),RHPTR,RHHDRPT);
   IF PRINT_DIRECTION=0
     THEN DO;
       I=#CMD('CALC A#MIN(.999,MAX(0,(MARGIN+CHAR1*MARGINC)/WIDTH))',
         RHPTR,RHHDRPT);
       I=#CMD(
         'CALC B#MIN(.999,MAX(0,(HEIGHT-(BASE+LINE2*BASEINC))/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD('CALC C#MIN(.999,MAX(A,(MARGIN+CHAR2*MARGINC)/WIDTH))',
         RHPTR,RHHDRPT);
       I=#CMD(
         'CALC D#MIN(.999,MAX(B,(HEIGHT-(BASE+LINE1*BASEINC))/HEIGHT))',
         RHPTR,RHHDRPT);
       END;
     ELSE DO; /* PRINT DIRECTION=-90 */
       I=#CMD(
         'CALC A#MIN(.999,MAX(0,(HEIGHT-(BASE+LINE2*BASEINC))/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD(
         'CALC B#MIN(.999,MAX(0,(WIDTH-(MARGIN+CHAR2*MARGINC))/WIDTH))',
         RHPTR,RHHDRPT);
       I=#CMD(
         'CALC C#MIN(.999,MAX(A,(HEIGHT-(BASE+LINE1*BASEINC))/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD(
         'CALC D#MIN(.999,MAX(B,(WIDTH-(MARGIN+CHAR1*MARGINC))/WIDTH))',
         RHPTR,RHHDRPT);
       END;
   CALL DO_IMAGE;
   END DO_GG_GRAPHICS;

 DO_GG_LINETEST: PROC(LINESPEC);
 /**********************************************************************
 * CALLED TO TEST THE SPECIFIED LINE SPECIFICATION VARIABLE FOR ONE OF *
 * THE FORMS N, *, *+N, *-N.  FOR A FORM INVOLVING *, THE EXPRESSION   *
 * IS CONVERTED FROM RELATIVE TO ABSOLUE LINE NUMBER.                  *
 **********************************************************************/
   DCL LINESPEC CHAR(*);
   DCL SPEC CHAR(80) VAR;
   DCL (I,J,K) FIXED BIN;

   SPEC=#SYMC(RHHDRPT,RH_SYMTREE,LINESPEC);
   I=INDEX(SPEC,'*');
   IF I=0 × I>1
     THEN RETURN; /* FIRST FORM - ALREADY IN ABSOLUTE */
   IF SPEC='*'
     THEN J=0; /* J W/B THE RELATIVE LINE NUMBER */
     ELSE DO;
       IF LENGTH(SPEC)<3
         THEN RETURN; /* DON'T MESS WITH GARBAGE FOR NOW */
       IF VERIFY(SUBSTR(SPEC,3),'0123456789')^=0
         THEN RETURN; /* DITTO */
       J=SUBSTR(SPEC,3);
       IF SUBSTR(SPEC,2,1)='-'
         THEN J=-J;
       END;
   K=(BASELINE-START_BASELINE)/BASELINE_INCR+J+1; /* ABSOLUTE LINE # */
   I=#CMD('SETL '××LINESPEC××' '××BARENUM(K),RHPTR,RHHDRPT);
   END DO_GG_LINETEST;

 DO_GR_GRAPHICS: PROC(QUADRANT,BASELINE,MARGIN);
   DCL (QUADRANT,BASELINE,MARGIN) FIXED BIN;
   DCL (I,J) FIXED BIN;
   DCL MYBUF CHAR(100) VAR;

   MYBUF=SUBSTR(INREC,4)××' ';
   MYBUF=SUBSTR(MYBUF,PREFIX(MYBUF,' '));
   J=INDEX(MYBUF,' ');
   CALL #SETC(RHHDRPT,RH_SYMTREE,'LINES',SUBSTR(MYBUF,1,J-1));
   MYBUF=SUBSTR(MYBUF,J);
   MYBUF=SUBSTR(MYBUF,PREFIX(MYBUF,' '));
   CALL #SETC(RHHDRPT,RH_SYMTREE,'CMD',MYBUF);
   I=#CMD('SETL BASE '××BARENUM(BASELINE),RHPTR,RHHDRPT);
   I=#CMD('SETL ENDBASE '××BARENUM(END_BASELINE),RHPTR,RHHDRPT);
   I=#CMD('SETL HEIGHT '××BARENUM(PHYSICAL_PAGE_HEIGHT),RHPTR,RHHDRPT);
   I=#CMD('SETL WIDTH '××BARENUM(PHYSICAL_PAGE_WIDTH),RHPTR,RHHDRPT);
   I=#CMD('SETL MARGIN '××BARENUM(MARGIN),RHPTR,RHHDRPT);
   I=#CMD('SETL ENDMARG '××BARENUM(END_MARGIN),RHPTR,RHHDRPT);
   I=#CMD('SETL BASEINC '××BARENUM(BASELINE_INCR),RHPTR,RHHDRPT);
   I=#CMD('SETL GRLMARG '
     ××BARENUM(MARGIN-LEFT_MARGIN+GRAPHICS_LEFT_MARGIN),
     RHPTR,RHHDRPT);
   IF PRINT_DIRECTION=0
     THEN DO;
       I=#CMD('CALC A#MIN(.999,MAX(0,GRLMARG/WIDTH))',
         RHPTR,RHHDRPT);
       I=#CMD(
        'CALC B#MIN(.999,MAX(0,'××
        '(HEIGHT-(NEWBASE#MIN(ENDBASE,(BASE+LINES*BASEINC))))/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD('CALC C#MIN(.999,MAX(A,ENDMARG/WIDTH))',RHPTR,RHHDRPT);
       I=#CMD('CALC D#MIN(.999,MAX(B,(HEIGHT-BASE)/HEIGHT))',
       RHPTR,RHHDRPT);
       END;
     ELSE DO; /* PRINT DIRECTION=-90 */
       I=#CMD(
        'CALC A#MIN(.999,MAX(0,'××
        '(HEIGHT-(NEWBASE#MIN(ENDBASE,(BASE+LINES*BASEINC))))/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD('CALC B#MIN(.999,MAX(0,(WIDTH-ENDMARG)/WIDTH))',
         RHPTR,RHHDRPT);
       I=#CMD('CALC C#MIN(.999,MAX(A,(HEIGHT-BASE)/HEIGHT))',
         RHPTR,RHHDRPT);
       I=#CMD('CALC D#MIN(.999,MAX(B,(WIDTH-GRLMARG)/WIDTH))',
         RHPTR,RHHDRPT);
       END;
   CALL DO_IMAGE;
   BASELINE=#SYMA(RHHDRPT,RH_SYMTREE,'NEWBASE'); /* CALCULATED ABOVE */
   END DO_GR_GRAPHICS;

 DO_IMAGE: PROC;
   DCL I FIXED BIN;
   DCL CMD CHAR(256) VAR;

   OPEN FILE(RH_SEQ_3) TITLE('IBM3800') RECORD OUTPUT;
   CLOSE FILE(RH_SEQ_3);
   IF PRINT_DIRECTION=0
     THEN I=#CMD('SETL E 1',RHPTR,RHHDRPT);
     ELSE I=#CMD('SETL E 0',RHPTR,RHHDRPT);
   CMD='R %%GDDM3800 ABEQTR 5 &A &B &C &D &E CMD(&CMD)';
   I=#CMD(CMD,RHPTR,RHHDRPT);
   CALL DO_IMAGE_GET('IBM3800 ');
   END DO_IMAGE;

 DO_IMAGE_GET: PROC(IMDDN);
   DCL IMDDN CHAR(8);
   DCL CODE CHAR(3);
   DCL REC CHAR(32000) VAR;

   CALL SETCAPS(IMDDN);
   OPEN FILE(RH_SEQ_3) TITLE(IMDDN) RECORD INPUT;
   ON ENDFILE(RH_SEQ_3) BEGIN;
     PUT SKIP EDIT('ENDFILE ON RH_SEQ_3')(A);
     SIGNAL ERROR;
     END;
   CODE=PSFCODE('BIM'); /* SEARCH FOR BEGIN IMAGE */
   DO UNTIL(SUBSTR(REC,4,3)=CODE);
     READ FILE(RH_SEQ_3) INTO(REC);
     END;
   SUBSTR(REC,13,5)=CHFIV(IMAGE_NUMBER);
   CODE=PSFCODE('EIM'); /* SEARCH FOR END IMAGE */
   DO UNTIL(SUBSTR(REC,4,3)=CODE);
     WRITE FILE(RH_SEQ_2) FROM(REC);
     READ FILE(RH_SEQ_3) INTO(REC);
     END;
   SUBSTR(REC,13,5)=CHFIV(IMAGE_NUMBER);
   WRITE FILE(RH_SEQ_2) FROM(REC);
   CLOSE FILE(RH_SEQ_3);
   IMAGE_NUMBER=IMAGE_NUMBER+1;
   END DO_IMAGE_GET;

 ENDBLOCK: PROC(ECTSW,BASELINE);
   DCL (ECTSW,BASELINE) FIXED BIN;

   ECTSW=0; /* INDICATE BLOCK COMPLETE */
   BASELINE=-1; /* INDICATE RECOMPUTE OF BASELINE IN NEWBLOCK */
   /* END COMPOSED-TEXT BLOCK */
   CALL WRITEOUT(INTRO('ECT')××'BCT'××CHFIV(BLOCK_NUMBER));
   BLOCK_NUMBER=BLOCK_NUMBER+1;
   END ENDBLOCK;

 ENDPAGE: PROC(EPGSW);
   DCL EPGSW FIXED BIN;

   EPGSW=0; /* INDICATE PAGE COMPLETE */
   /* END PAGE (EPG) */
   CALL WRITEOUT(INTRO('EPG')××'PAG'××CHFIV(PAGE_NUMBER));
   PAGE_NUMBER=PAGE_NUMBER+1;
   END ENDPAGE;

 GETHALF: PROC(I) RETURNS(CHAR(2));
   DCL I FIXED BIN(15,0),
       IC CHAR(2) BASED(ADDR(I));
   RETURN(IC);
   END GETHALF;

 INTRO: PROC(CODE) RETURNS(CHAR(9));
   DCL CODE CHAR(3);

   IF SEQUENCE=32767
     THEN SEQUENCE=1;
     ELSE SEQUENCE=SEQUENCE+1;
   RETURN(@HEXCHAR(5A0000)××PSFCODE(CODE)××LOW(1)××GETHALF(SEQUENCE));
   END INTRO;

 NEWBASELINE: PROC(BASELINE,QTR);
   DCL (BASELINE,QTR) FIXED BIN;

   IF BASELINE=-1
     THEN DO;
       BASELINE=MAX(0,TOP_MARGIN-BASELINE_INCR);
       END_BASELINE=LOGICAL_PAGE_HEIGHT;
       IF QTR>2
         THEN DO;
           BASELINE=BASELINE+LOGICAL_PAGE_HEIGHT;
           END_BASELINE=END_BASELINE+LOGICAL_PAGE_HEIGHT;
           END;
       START_BASELINE=BASELINE;
       END_BASELINE=END_BASELINE-BOTTOM_MARGIN;
       END;

   /* COMPOSED TEXT DATA (CTX) */
   CALL WRITEOUT(INTRO('CTX')××ESCAPE
     ××@HEXCHAR(04D2)                   /* ABS. MOVE BASELINE - AMB   */
       ××GETHALF(BASELINE)
     );
   END NEWBASELINE;

 NEWBLOCK: PROC(ECTSW,QTR,BASELINE,MARGIN);
   DCL (ECTSW,QTR,BASELINE,MARGIN) FIXED BIN;
   DCL I FIXED BIN;

   ECTSW=1; /* INDICATE BLOCK MUST BE COMPLETED */
   /* BEGIN COMPOSED-TEXT BLOCK (BCT) */
   CALL WRITEOUT(INTRO('BCT')××'BCT'××CHFIV(BLOCK_NUMBER));

   /* COMPOSED TEXT DATA (CTX) */
   CALL WRITEOUT(INTRO('CTX')××ESCAPE
     ××@HEXCHAR(06F7)××STO              /* SET TEXT ORIENTATION - STO */
     ××@HEXCHAR(03F101)                 /* SET CODED FONT LOCAL - SCFL*/
     ××@HEXCHAR(04C30000)               /* SET INTERCHAR. INCR. - SII */
     ××@HEXCHAR(04D0)                   /* SET BASLINE INCR. - SBI    */
       ××GETHALF(BASELINE_INCR));       /*                            */

   CALL NEWMARGIN(MARGIN,QTR);
   CALL NEWBASELINE(BASELINE,QTR);
   END NEWBLOCK;

 NEWLINE: PROC(LINE,BASELINE,CC) RECURSIVE;
   DCL LINE CHAR(*) VAR;
   DCL BASELINE FIXED BIN;
   DCL CC CHAR(1);

   SELECT(CC);
     WHEN('0')
       CALL NEWLINE(' ',BASELINE,' ');
     WHEN('-') DO;
       CALL NEWLINE(' ',BASELINE,' ');
       CALL NEWLINE(' ',BASELINE,' ');
       END;
     OTHERWISE;
     END; /* SELECT */
   IF CC='+'
     THEN CALL WRITEOUT(INTRO('CTX')××ESCAPE
       /* COMPOSED TEXT DATA (CTX) */
       ××@HEXCHAR(04D4) /* RELATIVE MOVE BASELINE - RMB   */
         ××GETHALF(-BASELINE_INCR)
       );
     ELSE BASELINE=BASELINE+BASELINE_INCR;
   /* COMPOSED TEXT DATA(BEGIN LINE) */
   CALL WRITEOUT(INTRO('CTX')××ESCAPE
     ××@HEXCHAR(02D9) /* BEGIN LINE (BLN) */
     ××SUBSTR(GETHALF(LENGTH(LINE)+2),2)××@HEXCHAR(DA)××LINE);
   END NEWLINE;

 NEWMARGIN: PROC(MARGIN,QTR);
   DCL (MARGIN,QTR) FIXED BIN;

   SELECT(QTR);
     WHEN(1,3) MARGIN=LEFT_MARGIN;
     OTHERWISE MARGIN=LEFT_MARGIN+LOGICAL_PAGE_WIDTH;
     END; /* SELECT */
   END_MARGIN=MARGIN+LINESIZE*MARGIN_INCR;

   /* COMPOSED TEXT DATA (CTX) */
   CALL WRITEOUT(INTRO('CTX')××ESCAPE
       ××@HEXCHAR(04C0) /* SET INLINE MARGIN-SIM */
         ××GETHALF(MARGIN));
   END NEWMARGIN;

 NEWPAGE: PROC(QUADRANT,EPGSW,ECTSW,BASELINE,MARGIN);
   DCL (EPGSW,ECTSW,BASELINE,MARGIN,QUADRANT) FIXED BIN;

   BASELINE=-1; /* BASELINE MUST BE RECOMPUTED */
   IF QUADRANT=1
     THEN CALL NEWREALPAGE(EPGSW,ECTSW,BASELINE,MARGIN);
         /* NEWPAGE CALLS NEWBASELINE AND NEWMARGIN */
     ELSE DO;
       IF ECTSW=0
         THEN CALL NEWBLOCK(ECTSW,QUADRANT,BASELINE,MARGIN);
           /* NEWBLOCK CALLS NEWBASELINE AND NEWMARGIN */
         ELSE DO;
           CALL NEWBASELINE(BASELINE,QUADRANT);
           CALL NEWMARGIN(MARGIN,QUADRANT);
           END;
       END;
   END NEWPAGE;

 NEWREALPAGE: PROC(EPGSW,ECTSW,BASELINE,MARGIN);
   DCL (EPGSW,ECTSW,BASELINE,MARGIN) FIXED BIN;

   EPGSW=1; /* INDICATE STARTED PAGE MUST BE COMPLETED */
   /* BEGIN PAGE (BPG) */
   CALL WRITEOUT(INTRO('BPG')××'PAG'××CHFIV(PAGE_NUMBER));

   /* BEGIN ACTIVE ENVIRONMENT GROUP (BAG) */
   CALL WRITEOUT(INTRO('BAG')××'AEG00000');

   /* MAP CODED FONT (MCF) */
   CALL WRITEOUT(
     INTRO('MCF')
     ××@HEXCHAR(1C000000)
     ××@HEXCHAR(01000000) /* CODED FONT LOCAL ID=01 */
     ××FONT    /* CODED FONT NAME */
     ××HIGH(8) /* CODE PAGE NAME */
     ××HIGH(8) /* FONT CHARACTER SET NAME */
     );

   /* PAGE DESCRIPTOR (PGD) */
   CALL WRITEOUT(
     INTRO('PGD')
       ××@HEXCHAR(000009600960)
       ××@HEXCHAR(00)××GETHALF(WIDTH) /* HORIZONTAL PAGE SIZE IN PELS */
       ××@HEXCHAR(00)××GETHALF(HEIGHT) /* VERTICAL PAGE SIZE IN PELS */
       ××@HEXCHAR(0004A0));

   /* COMPOSED TEXT CONTROL (CTC) */
   CALL WRITEOUT(INTRO('CTC')××@HEXCHAR(00000000000000002D00));

   /* COMPOSED TEXT DESCRIPTOR (CTD) */
   CALL WRITEOUT(
     INTRO('CTD')××@HEXCHAR(000009600960)××
       GETHALF(WIDTH)×× /* WIDTH IN PELS OF COMPOSED TEXT BLOCK. MUST */
                        /* MATCH BYTES 6-8 OF THE PGD.                */
       GETHALF(HEIGHT)×× /* HEIGHT IN PELS OF COMPOSED TEXT BLOCK     */
                         /* MUST MATCH BYTES 9-11 OF THE PGD.         */
     @HEXCHAR(00000004A0000000));

   /* END ACTIVE ENVIRONMENT GROUP - (EAG) */
   CALL WRITEOUT(INTRO('EAG')××'AEG00000');

   CALL NEWBLOCK(ECTSW,1,BASELINE,MARGIN);

   IF BORDER=YES
     THEN IF LPPPP=1
       THEN DO;
         /* NOW WRITE BORDER FOR SINGLE PAGE */
         CALL WRITEOUT(INTRO('CTX')××ESCAPE
           ××@HEXCHAR(04D3)××GETHALF(PHYSICAL_PAGE_HEIGHT-1)
                                            /*ABS. MOVE BASELINE - AMB*/
           ××@HEXCHAR(04C7)××GETHALF(PHYSICAL_PAGE_WIDTH-1)
                                            /*ABS. MOVE INLINE - AMI  */
           ××@HEXCHAR(07E7)××GETHALF(-PHYSICAL_PAGE_HEIGHT)
                                            /*DRAW BASELINE RULE      */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(07E5)××GETHALF(-PHYSICAL_PAGE_WIDTH)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(04D30000)             /*ABS. MOVE BASELINE      */
           ××@HEXCHAR(04C70000)             /*ABS. MOVE INLINE        */
           ××@HEXCHAR(07E7)××GETHALF(PHYSICAL_PAGE_HEIGHT)
                                            /*DRAW BASELINE RULE      */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(07E4)××GETHALF(PHYSICAL_PAGE_WIDTH)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           );
         END;
       ELSE DO;
         /* NOW WRITE BORDER FOR ALL FOUR PAGES */
         CALL WRITEOUT(INTRO('CTX')××ESCAPE
           ××@HEXCHAR(04D3)××GETHALF(PHYSICAL_PAGE_HEIGHT-1)
                                            /*ABS. MOVE BASELINE - AMB*/
           ××@HEXCHAR(04C7)××GETHALF(PHYSICAL_PAGE_WIDTH-1)
                                            /*ABS. MOVE INLINE - AMI  */
           ××@HEXCHAR(07E7)××GETHALF(-PHYSICAL_PAGE_HEIGHT)
                                            /*DRAW BASELINE RULE      */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(07E5)××GETHALF(-PHYSICAL_PAGE_WIDTH)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(04D3)××GETHALF(PHYSICAL_PAGE_HEIGHT/2-1)
                                            /*ABS. MOVE BASELINE      */
           ××@HEXCHAR(07E5)××GETHALF(-PHYSICAL_PAGE_WIDTH)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(04D30000)             /*ABS. MOVE BASELINE      */
           ××@HEXCHAR(07E5)××GETHALF(-PHYSICAL_PAGE_WIDTH)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(04C7)××GETHALF(PHYSICAL_PAGE_WIDTH/2-1)
                                            /*ABS. MOVE INLINE        */
           ××@HEXCHAR(07E7)××GETHALF(PHYSICAL_PAGE_HEIGHT)
                                            /*DRAW BASELINE RULE      */
             ××GETHALF(1)××@HEXCHAR(00)
           ××@HEXCHAR(04C70000)             /*ABS. MOVE INLINE        */
           ××@HEXCHAR(07E6)××GETHALF(PHYSICAL_PAGE_HEIGHT)
                                            /*DRAW INLINE RULE        */
             ××GETHALF(1)××@HEXCHAR(00)
           );
         END;
   CALL NEWBASELINE(BASELINE,1);
   END NEWREALPAGE;

 PARMOK: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * FIRST OBTAINS PITCH, LINESIZE, LPPPP (LOGICAL PAGES PER PHYSICAL    *
 * PAGE), PRINT_DIRECTION, BORDER AND FORM FROM PARY, SETTING DEFAULTS *
 * WHERE NECESSARY, THEN CHECKS FOR REASONABLE VALUES.                 *
 *                                                                     *
 * LINES_PER_PAGE, FONT, BASELINE_INCR, MARGIN_INCR, AND STO ARE ALSO  *
 * SET.                                                                *
 *                                                                     *
 **********************************************************************/
   DCL OK FIXED BIN;

   OK=YES;
   /* PICK UP ARGUMENTS OR SET DEFAULTS */
   IF PARY(1)^=''
     THEN PITCH=PARY(1);
     ELSE PITCH=20; /* DEFAULT PITCH IS 20 CHARACTERS */
   IF PARY(2)^=''
     THEN LINESIZE=PARY(2);
     ELSE LINESIZE=71; /* DEFAULT LINESIZE IS 71 CHARACTERS */
   IF PARY(3)^=''
     THEN PRINT_DIRECTION=PARY(3);
     ELSE IF (PITCH=20 & LINESIZE<149) × (PITCH=10 & LINESIZE<72)
       THEN PRINT_DIRECTION=-90; /* DEFAULT PRINT DIRECTION IS DOWN */
       ELSE PRINT_DIRECTION=0;   /* DEFAULT PRINT DIRECTION IS DOWN */
   IF PARY(4)^=''
     THEN LPPPP=PARY(4);
     ELSE IF PITCH=20 & LINESIZE<=71
       THEN LPPPP=4; /* LOGICAL PAGES PER PHYSICAL PAGE */
       ELSE LPPPP=1;
   IF PARY(5)^=''
     THEN BORDER=PARY(5);
     ELSE BORDER=YES;
   IF PARY(6)^=''
     THEN DO;
       FORM=PARY(6);
       CALL SETCAPS(FORM);
       END;
     ELSE FORM='STD';
   IF LENGTH(FORM)<3
     THEN OK=NO;
     ELSE SELECT(SUBSTR(FORM,1,3));
       WHEN('STD') DO;
         WIDTH=2640; /* HORIZONTAL PEL WIDTH */
         HEIGHT=1800; /* VERTICAL PEL WIDTH */
         END;
       WHEN('009') DO;
         IF LENGTH(FORM)^=4
           THEN OK=NO;
           ELSE SELECT(SUBSTR(FORM,4,1));
             WHEN('4','5') DO;
               WIDTH=2040; /* HORIZONTAL PEL WIDTH */
               HEIGHT=2400; /* VERTICAL PEL WIDTH */
               END;
             OTHERWISE OK=NO;
             END; /* SELECT */
         END;
       OTHERWISE OK=NO;
       END; /* SELECT */
   IF ^(BORDER=YES × BORDER=NO)
     THEN OK=NO;
   IF OK=YES
     THEN SELECT(PITCH);
       WHEN(10) DO;
         BASELINE_INCR=40; /* NUMBER OF PELS PER PRINT LINE */
         MARGIN_INCR=24; /* NUMBER OF PELS PER PRINTED CHARACTER */
         FONT='XXLG10'; /* PRINT FONT NAME */
         END;
       WHEN(20) DO;
         BASELINE_INCR=20; /* NUMBER OF PELS PER PRINT LINE */
         MARGIN_INCR=12; /* NUMBER OF PELS PER PRINTED CHARACTER */
         FONT='XXLOGO'; /* PRINT FONT NAME */
         END;
       OTHERWISE OK=NO;
       END; /* SELECT */
   IF OK=YES
     THEN SELECT(PRINT_DIRECTION);
       WHEN(0) DO;
         STO=@HEXCHAR(00002D00);
         SUBSTR(FONT,2,1)='1';
         END;
       WHEN(-90) DO;
         STO=@HEXCHAR(2D005A00);
         SUBSTR(FONT,2,1)='2';
         END;
       OTHERWISE OK=NO;
       END; /* SELECT */
   IF OK=YES
     THEN SELECT(LPPPP);
       WHEN(1,4);
       OTHERWISE OK=NO;
       END; /* SELECT */
   IF OK=YES
     THEN IF FORM='STD'
       THEN OK=PARMSTD;
       ELSE OK=PARMPRT;
   RETURN(OK);
   END PARMOK;

 PARMPRT: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * USED TO CHECK PARAMETERS WHEN THE FORM IS NOT STD.                  *
 *                                                                     *
 **********************************************************************/
   DCL (OK,MYH,MYW) FIXED BIN;

   OK=YES;
   MYW=WIDTH;
   MYH=HEIGHT;
   IF LPPPP=4
     THEN DO;
       MYW=MYW/2;
       MYH=MYH/2;
       END;
   SELECT(PRINT_DIRECTION);
     WHEN(0)
       IF LINESIZE<=MYW/MARGIN_INCR
         THEN LINES_PER_PAGE=MYH/BASELINE_INCR;
         ELSE OK=NO;
     WHEN(-90)
       IF LINESIZE<=MYH/MARGIN_INCR
         THEN LINES_PER_PAGE=MYW/BASELINE_INCR;
         ELSE OK=NO;
     OTHERWISE;
     END; /* SELECT */
   RETURN(OK);
   END PARMPRT;

 PARMSTD: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * USED TO CHECK PARAMETERS WHEN THE FORM IS STD.                      *
 *                                                                     *
 **********************************************************************/
   DCL OK FIXED BIN;

   OK=YES;
   SELECT(PITCH);
     WHEN(10) /* PITCH=10 */
       SELECT(LPPPP);
         WHEN(1) /* PITCH=10, LPPPP=1 */
           SELECT(PRINT_DIRECTION);
             WHEN(0) /* PITCH=10 LPPPP=1 PRINT_DIRECTION=0 */
               IF LINESIZE<=106
                 THEN LINES_PER_PAGE=39;
                 ELSE OK=NO;
             WHEN(-90) /* PITCH=10, LPPPP=1, PRINT_DIRECTION=-90 */
               IF LINESIZE<=71
                 THEN LINES_PER_PAGE=60;
                 ELSE OK=NO;
             OTHERWISE;
             END; /* SELECT */
         WHEN(4) /* PITCH=10, LPPPP=4 */
           OK=NO;
         OTHERWISE;
         END; /* SELECT */
     WHEN(20) /* PITCH=20 */
       SELECT(LPPPP);
         WHEN(1) /* PITCH=20, LPPPP=1 */
           SELECT(PRINT_DIRECTION);
             WHEN(0) /* PITCH=20, LPPPP=1, PRINT_DIRECTION=0 */
               IF LINESIZE<=218
                 THEN LINES_PER_PAGE=81;
                 ELSE OK=NO;
             WHEN(-90) /* PITCH=20, LPPPP=1, PRINT_DIRECTION=-90 */
               IF LINESIZE<=148
                 THEN LINES_PER_PAGE=123;
                 ELSE OK=NO;
             OTHERWISE;
             END; /* SELECT */
         WHEN(4) /* PITCH=20, LPPPP=4 */
           SELECT(PRINT_DIRECTION);
             WHEN(0) /* PITCH=20, LPPPP=4, PRINT_DIRECTION=0 */
               IF LINESIZE<=106
                 THEN LINES_PER_PAGE=39;
                 ELSE OK=NO;
             WHEN(-90) /* PITCH=20, LPPPP=4, PRINT_DIRECTION=-90 */
               IF LINESIZE<=71
                 THEN LINES_PER_PAGE=60;
                 ELSE OK=NO;
             OTHERWISE;
             END; /* SELECT */
         OTHERWISE;
         END; /* SELECT */
     OTHERWISE;
     END; /* SELECT */
   RETURN(OK);
   END PARMSTD;

 READREC: PROC;

   READ FILE(RH_SEQ_1) INTO(INREC);
   INREC=SUBSTR(INREC,1,MIN(LENGTH(INREC),LINESIZE+1));
   END READREC;

 WRITEOUT: PROC(OUTREC);
   DCL OUTREC CHAR(*) VAR;

   SUBSTR(OUTREC,2,2)=GETHALF(LENGTH(OUTREC)-1);
   WRITE FILE(RH_SEQ_2) FROM(OUTREC);
   END WRITEOUT;

   END ABE3800;
