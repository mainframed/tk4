 BROT: PROC(PARM) OPTIONS(MAIN);
  DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL PARM CHAR(100) VARYING;
   DCL (M,N,IT,IT_COUNT) FIXED BIN(31,0);
   DCL (S,AC,BC) DEC FLOAT(16);
   DCL 1 PICSTR BASED(PICPTR),
     2 XCORNER DEC FLOAT(16), /* REAL PART OF THE IMAGINARY NUMBER IN
         THE LOWER LEFT CORNER OF THE AREA IN THE COMPLEX NUMBER PLANE
         TO BE EXAMINED. */
     2 YCORNER DEC FLOAT(16), /* IMAGINARY PART OF THE IMAGINARY NUMBER
         IN THE LOWER LEFT CORNER OF THE AREA IN THE COMPLEX NUMBER
         PLANE TO BE EXAMINED. */
     2 GAP DEC FLOAT(16), /* DISTANCE IN COMPLEX PLANE BETWEEN PIXELS */
     2 XDONE FIXED BIN(15,0), /* NUMBER OF ROWS PROCESSED */
     2 YDONE FIXED BIN(15,0), /* NUMBER OF COLUMNS PROCESSED */
     2 XDIM FIXED BIN(15,0),
     2 YDIM FIXED BIN(15,0),
     2 PIC(M REFER(XDIM),N REFER(YDIM)) FIXED BIN(15,0);
   DCL (INSW,OUTSW,CONTOURSW,GDDMSW,EOJSW) BIT(1) INIT('1'B);
   DCL (BDRY,GRAF) FIXED BIN INIT(0);
   DCL GRAFIT ENTRY RETURNS(BIT(1));

   IT=-1;
   GET STRING(PARM) DATA(M,N,S,AC,BC,IT,GRAF,BDRY);
   ON UNDF(IN) INSW='0'B;
   OPEN FILE(IN) RECORD INPUT;
   IF INSW
     THEN DO;
       CALL READIT;
       CLOSE FILE(IN);
       END;
     ELSE DO;
       ALLOCATE PICSTR;
       XCORNER=AC;
       YCORNER=BC;
       GAP=S/M; /* DISTANCE BETWEEN ADJACENT PIXELS */
       XDONE,YDONE=0;
       END;
   IF IT=-1
     THEN IT=M*N;
   DO UNTIL(EOJSW);
     IF (XDONE<XDIM) × (YDONE<YDIM)
       THEN DO;
         IT_COUNT=0;
         CALL MANDELBROT;
         PUT SKIP LIST('XDONE=',XDONE,'YDONE=',YDONE);
         PUT SKIP LIST('XDIM= ',XDIM, 'YDIM= ',YDIM );
         END;
     ON UNDF(OUT) OUTSW='0'B;
     OPEN FILE(OUT) RECORD OUTPUT;
     IF OUTSW
       THEN CALL FILEIT;
     ON UNDF(CONTOUR) CONTOURSW='0'B;
     OPEN FILE(CONTOUR) RECORD OUTPUT;
     IF CONTOURSW
       THEN CALL CONTPROC;
     ON UNDF(GDDM) GDDMSW='0'B;
     OPEN FILE(GDDM) RECORD OUTPUT;
     IF GDDMSW
       THEN CALL GDDMPROC;
     IF GRAF^=0
       THEN EOJSW=GRAFIT(PICPTR,BDRY);
     END;

 FILEIT: PROC;
 /**********************************************************************
 * FILEIT WRITES OUT THE PIXEL STRUCTURE.                              *
 **********************************************************************/
   DCL OUTREC CHAR(1000) VAR;
   DCL L FIXED BIN(31,0);
   DCL 1 INSTR BASED(INPTR),
     2 INREC CHAR(1000),
     2 BUMP CHAR(1);
   DCL 1 INSTR2 BASED(INPTR),
     2 INCH CHAR(1),
     2 BUMP2 CHAR(1);
   L=32+M*N*2; /* L=LENGTH TO WRITE */
   INPTR=PICPTR;
   DO WHILE(L>=1000);
     OUTREC=INREC;
     WRITE FILE(OUT) FROM(OUTREC);
     L=L-1000;
     INPTR=ADDR(BUMP);
     END;
   IF L>0
     THEN DO;
       OUTREC='';
       DO WHILE(L>0);
         OUTREC=OUTREC××INCH;
         INPTR=ADDR(BUMP2);
         L=L-1;
         END;
       WRITE FILE(OUT) FROM(OUTREC);
       END;
   CLOSE FILE(OUT);
   END FILEIT;

 CONTPROC: PROC;
 /**********************************************************************
 * CONTPROC WRITES OUT THE INPUT FOR PROC GCONTOUR.
 **********************************************************************/
   DCL 1 OUTREC,
     2 XF DEC FLOAT(16),
     2 YF DEC FLOAT(16),
     2 Z FIXED BIN(15,0);
   DCL (X,Y) FIXED BIN(15,0);

   DO X=1 TO XDIM;
     XF=(X-1)*GAP+XCORNER;
     DO Y=1 TO YDIM;
       YF=(Y-1)*GAP+YCORNER;
       Z=PIC(X,Y);
       WRITE FILE(CONTOUR) FROM(OUTREC);
       END;
     END;
   CLOSE FILE(CONTOUR);
   END CONTPROC;

 GDDMPROC: PROC;
 /**********************************************************************
 *
 **********************************************************************/
   DCL 1 OUTREC,
     2 X FIXED BIN(15,0),
     2 Y FIXED BIN(15,0),
     2 Z FIXED BIN(15,0),
     2 COLOR FIXED BIN(15,0);
   DCL (I,J,K) FIXED BIN;
   DCL (COLOR_INTERVAL,MAX_COUNT,MIN_COUNT) FIXED BIN(15,0);

   MAX_COUNT=0;
   MIN_COUNT=1001;
   DO I=1 TO XDIM;
     DO J=1 TO YDIM;
       IF PIC(I,J)<1000
         THEN DO;
           MAX_COUNT=MAX(MAX_COUNT,PIC(I,J));
           MIN_COUNT=MIN(MIN_COUNT,PIC(I,J));
           END;
       END;
     END;
   COLOR_INTERVAL=MAX(1,(MAX_COUNT-MIN_COUNT+1)/8);
   DO X=1 TO XDIM;
     DO Y=1 TO YDIM;
       IF PIC(X,Y)<1000
         THEN DO;
           Z=PIC(X,Y);
           COLOR=(PIC(X,Y
                     )-MIN_COUNT+1
                 )/COLOR_INTERVAL-1;
           WRITE FILE(GDDM) FROM(OUTREC);
           END;
       END;
     END;
   CLOSE FILE(GDDM);
   END GDDMPROC;

 MANDELBROT: PROC;
 /**********************************************************************
 * MANDELBROT PERFORMS THE ACTUAL CALCULATIONS.                        *
 **********************************************************************/
   DCL (COUNT,I,J) FIXED BIN(15,0);
   DCL (AC,AZ,BC,BZ,TMP) DEC FLOAT(16);

   DO I=XDONE+1 TO XDIM;
     AC=XCORNER+(I-1)*GAP;
     DO J=YDONE+1 TO YDIM;
       BC=YCORNER+(J-1)*GAP;
       AZ,BZ=0.0;
       DO COUNT=1 TO 1000 UNTIL(AZ**2+BZ**2>4.0);
         TMP=AZ;
         AZ=AZ**2-BZ**2+AC;
         BZ=2*TMP*BZ+BC;
         END;
       PIC(I,J)=COUNT;
       YDONE=YDONE+1;
       IT_COUNT=IT_COUNT+1;
       IF IT_COUNT>IT
         THEN RETURN;
       END;
     XDONE=XDONE+1;
     YDONE=0;
     END;
   XDONE=XDIM;
   YDONE=YDIM;
   END MANDELBROT;

 READIT: PROC;
 /**********************************************************************
 * READIT READS IN THE PIXEL STRUCTURE.                                *
 **********************************************************************/
   DCL INREC CHAR(1000) VAR;
   DCL 1 BUMPSTR BASED(PICPTR),
     2 PAD CHAR(2),
     2 BUMPSTART CHAR(1);
   DCL 1 INSTR BASED(INPTR),
     2 INCH CHAR(1),
     2 BUMP CHAR(1);
   DCL OUTPTR PTR;
   DCL EOFSW BIT(1) INIT('0'B);

   ON ENDFILE(IN) EOFSW='1'B;
   READ FILE(IN) INTO(INREC);
   PICPTR=ADDR(ADDR(INREC)->BUMPSTART);
   M=XDIM;
   N=YDIM;
   ALLOCATE PICSTR;
   OUTPTR=PICPTR;
   DO UNTIL(EOFSW);
     INPTR=ADDR(ADDR(INREC)->BUMPSTART);
     DO I=1 TO LENGTH(INREC);
       OUTPTR->INCH=INPTR->INCH;
       OUTPTR=ADDR(OUTPTR->BUMP);
       INPTR=ADDR(INPTR->BUMP);
       END;
     READ FILE(IN) INTO(INREC);
     END;
   END READIT;

   END BROT;
