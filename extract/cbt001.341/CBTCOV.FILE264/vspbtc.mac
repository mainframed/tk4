 /* VSPBTCH */
 /*
0*$.HE GENERALIZED UTILITIES - VSPBTCH
0*$.HE RUN A VSPC SESSION IN BATCH
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$11/12/79
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  VSPBTCH
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS UTILITY WILL ALLOW YOU TO RUN A VSPC SESSION IN BATCH.
0*$A SAMPLE JOB FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$//JOBNAME JOB .....
0*$// EXEC PGM=VSPBTCH
0*$//STEPLIB DD DSN=U.SD.U000.CMDLIB.LOAD,DISP=SHR
0*$//SYSPRINT DD SYSOUT=*
0*$VSPC ID=1033827
0*$XXXXXX
0*$TABSET OFF
0*$Q WORKSPACE
0*$Q LIB
0*$.IN 0
0*$.FI L
0*$.SP 1
0*$THE FIRST RECORD IN THE SYSIN DATA SET MUST BE A VSPC LOGON
0*$COMMAND.  THE SECOND RECORD MUST CONTAIN YOUR PASSWORD.
0*$SUBSEQUENT LINES MAY CONTAIN ANY VSPC COMMAND (AND
0*$APPROPRIATE RESPONSES) THAT CAN BE ENTERED ON AN IBM 3767
0*$TERMINAL.  SINCE VSPBTCH WILL NOT RECOGNIZE ANY TABS
0*$TRANSMITTED DURING THE SESSION, IT IS RECOMMENDED THAT THE
0*$FIRST COMMAND AFTER THE PASSWORD SHOULD BE A "TABSET OFF"
0*$COMMAND.  WHEN VSPBTCH RECOGNIZES END-OF-FILE ON SYSIN, IT
0*$WILL AUTOMATICALLY TRANSMIT AN "OFF" COMMAND FOR YOU.
0*$.SP 1
0*$IF PARM='/TEST' IS SPECIFIED ON THE EXEC STATEMENT,
0*$THEN THE OUTPUT WILL BE PRINTED IN HEX AS WELL AS
0*$EBCDIC.
 */
 VSPBTCH:  PROC(PARM) OPTIONS(MAIN);
         DCL PARM CHAR(100) VAR;
         OPEN FILE(SYSPRINT) LINESIZE(132);
         DCL ERRCNT FIXED BIN(15,0) INIT(0);
         DCL PGMNAME CHAR(8) INIT('VTAMIO');
         DCL SYSLOAD ENTRY;
         DCL TERMEP FIXED BIN(31,0);
         CALL SYSLOAD(PGMNAME,TERMEP);
         DCL SYSCALL ENTRY;
         DCL VTAMECB FIXED BIN(31,0),
             VTAMBIT BIT(32) DEF VTAMECB;
         DCL X24DF BIT(8) STATIC INIT('00100100'B), /* X'24' */
             X24 CHAR(1) DEF X24DF;
         DCL NLCHARDF BIT(8) STATIC INIT('00010101'B), /* X'15' */
             NLCHAR CHAR(1) DEF NLCHARDF;
         DCL STRPARS ENTRY(CHAR(*) VAR, FIXED BIN(15,0),
           CHAR(1),CHAR(*) VAR);
         DCL (OFF,LOFF) FIXED BIN(15,0);
         ON ENDFILE(SYSIN) EOFSW = '1'B;
         DCL (EOFSW,LOGGED_ON,GETSW) BIT(1) INIT('0'B);
         DCL SYSWAIT ENTRY;
         DCL WAITCNT FIXED BIN(15,0) INIT(1);
         DCL DUMPSTT ENTRY;
         DCL SUFFIX ENTRY(CHAR(*) VAR, CHAR(*) VAR)
           RETURNS(FIXED BIN(15,0));
         DCL TROUT ENTRY(CHAR(8))
               RETURNS(CHAR(16));
         DCL PLIXOPT CHAR(15) VAR STATIC EXT INIT('NOSTAE,NOSPIE');
         DCL MSGB CHAR(80) VAR INIT('');
         DCL (DATA,SAVEDATA) CHAR(2000) VAR INIT('');
         DCL (OPCODE,OLDOP,SAVOP) FIXED BIN(15,0) INIT(0);
         DCL RETC FIXED BIN(31,0);
         DCL RECORD CHAR(256) VAR INIT('');
         DCL PROMPT CHAR(80) VAR INIT('VTAMIO');
         DCL PROMPI CHAR(80) VAR INIT(
           'ENTER LOGON MESSAGE');
         DCL PROMPP CHAR(80) VAR INIT(
           'ENTER PASSWORD');
         DCL (NEWCID,OLDCID) FIXED BIN(31,0) INIT(0);
         DCL CMDSTR CHAR(256) VAR;
         DCL PASSWD CHAR(80) VAR;
         MSGB = 'VSPC';
         CMDSTR=GETCMD(PROMPI);
         PASSWD=GETCMD(PROMPP);
         DATA=CMDSTR;
         DO FOREVER=1 REPEAT FOREVER;
           OLDCID = NEWCID;
           CALL DOVTAM; /* MAY SET OPCODE = 24 */
           IF OLDCID = 0
             THEN OLDCID = NEWCID;
           IF OPCODE = 12 /* WAS IT STOP? */
             THEN LEAVE;
           IF OPCODE=24 /* WAS IT ERROR? */
             THEN DO;
               ERRCNT = ERRCNT + 1;
               IF ERRCNT > 1 /* × OLDOP ^= 16 × LOGGED_ON */
                 THEN OPCODE=12;
               END;
           IF OPCODE^=12
             THEN DO;
               IF OPCODE = 16 /* WAS IT GET-POST? */
                 THEN CALL DODATA; /* PRINT DATA - MAY SET
                                    OPCODE=28 - SEND PASSWORD
                                    OPCODE=30 - SEND OFF */
                 ELSE IF OPCODE=4
                   THEN DO;
                     IF OLDCID=NEWCID
                       THEN CALL SYSWAIT(WAITCNT,VTAMECB);
                     GSW = '1'B;
                     END;
               IF OLDCID^=NEWCID
                 THEN DO;
                   LOGGED_ON = '1'B;
                   SAVOP = OPCODE;
                   END;
               IF LOGGED_ON
                 THEN IF EOFSW
                   THEN IF GSW
                     THEN OPCODE = 16; /* DO A GET-POST */
                     ELSE OPCODE = 4;  /* READ UNTIL EOJ */
                   ELSE DO;         /* ELSE PASS SCRIPT */
                     DATA=GETCMD(PROMPT);
                     OPCODE=8;  /* DO A PUT */
                     END;
                 ELSE IF OPCODE=28
                   THEN DO;
                     OPCODE = 8; /* DO A PUT OF PASSWORD */
                     DATA = PASSWD;
                     END;
                   ELSE IF OPCODE = 4
                     THEN OPCODE = 16;
                     ELSE OPCODE = 4;
               END;
           END;
         IF SAVEDATA^=''
           THEN DO;
             DATA=SAVEDATA××NLCHAR;
             CALL DODATA;
             END;
 DODATA:  PROC;
         GSW = '0'B;
         IF PARM='TEST'
           THEN DO;
             PUT SKIP LIST('SAVEDATA=');
             CALL DUMPSTT(SAVEDATA);
             PUT SKIP LIST('DATA=');
             CALL DUMPSTT(DATA);
             END;
         DATA=SAVEDATA××DATA;
         SAVEDATA='';
         IF SUBSTR(DATA,1,1)=NLCHAR
           THEN OFF=1;
           ELSE OFF=0;
 DATALUP:
         DO UNTIL(OFF>LENGTH(DATA));
           CALL STRPARS(DATA,OFF,NLCHAR,RECORD);
           IF ^LOGGED_ON
             THEN IF RECORD='ENTER PASSWORD' /* X24 */
               THEN DO;
                 OPCODE = 28; /* DO SPECIAL PUT */
                 OFF = LENGTH(DATA)+1;
                 END;
               ELSE;
             ELSE IF OFF>LENGTH(DATA)
               THEN DO;
                 IF SUBSTR(DATA,LENGTH(DATA),1)=NLCHAR
                   THEN SAVEDATA=NLCHAR;
                   ELSE SAVEDATA=RECORD;
                 LEAVE DATALUP;
                 END;
           IF PARM='TEST'
             THEN DO;
               PUT SKIP LIST('RECORD UNTRANSLATED=');
               CALL DUMPSTT(RECORD);
               END;
           RECORD=TRDATA(RECORD);
           IF PARM='TEST'
             THEN DO;
               PUT SKIP LIST('RECORD TRANSLATED');
               CALL DUMPSTT(RECORD);
               END;
           PUT SKIP LIST(RECORD);
           END;
         END DODATA;
 TRDATA:  PROC(RECORD) RETURNS(CHAR(256) VAR);
         DCL (RECORD,RETSTR) CHAR(256) VAR;
         DCL (I,J) FIXED;
         DCL HEX16DF BIT(8) STATIC INIT('00010110'B),
             HEX16 CHAR(1) DEF HEX16DF;
         DCL HEX1625DF BIT(16) STATIC INIT('0001011000100101'B),
             HEX1625 CHAR(2) DEF HEX1625DF;
         DCL TRDEF CHAR(256) STATIC;
         DCL INITSW BIT(1) STATIC INIT('1'B);
         DCL BIN FIXED BIN(15,0),
             BINDF CHAR(2) DEF BIN;
         IF INITSW
           THEN DO;
             INITSW = '0'B;
             DO BIN = 0 TO 255;
               SUBSTR(TRDEF,BIN+1,1)=SUBSTR(BINDF,2,1);
               END;
             SUBSTR(TRDEF,1,64)=REPEAT('.',63);
             SUBSTR(TRDEF,113,1)='.';
             SUBSTR(TRDEF,115,6)=REPEAT('.',5);
             SUBSTR(TRDEF,157,1)='.';
             SUBSTR(TRDEF,159,1)='.';
             SUBSTR(TRDEF,161,2)='..';
             SUBSTR(TRDEF,182,1)='.';
             SUBSTR(TRDEF,186,1)='.';
             SUBSTR(TRDEF,226,1)='.';
             SUBSTR(TRDEF,253,1)='.';
             SUBSTR(TRDEF,256,1)='.';
             END;
         DCL APLBIT(45) BIT(24) STATIC INIT(
         /* ----××××----××××----×××× */
           '110000010001011001101101', /*  1 - C1166D */
           '110000100001011001101101', /*  2 - C2166D */
           '110000110001011001101101', /*  3 - C3166D */
           '110001000001011001101101', /*  4 - C4166D */
           '110001010001011001101101', /*  5 - C5166D */
           '110001100001011001101101', /*  6 - C6166D */
           '110001110001011001101101', /*  7 - C7166D */
           '110010000001011001101101', /*  8 - C8166D */
           '110010010001011001101101', /*  9 - C9166D */
           '110100010001011001101101', /* 10 - D1166D */
           '110100100001011001101101', /* 11 - D2166D */
           '110100110001011001101101', /* 12 - D3166D */
           '110101000001011001101101', /* 13 - D4166D */
           '110101010001011001101101', /* 14 - D5166D */
           '110101100001011001101101', /* 15 - D6166D */
           '110101110001011001101101', /* 16 - D7166D */
           '110110000001011001101101', /* 17 - D8166D */
           '110110010001011001101101', /* 18 - D9166D */
           '111000100001011001101101', /* 19 - E2166D */
           '111000110001011001101101', /* 20 - E3166D */
           '111001000001011001101101', /* 21 - E4166D */
           '111001010001011001101101', /* 22 - E5166D */
           '111001100001011001101101', /* 23 - E6166D */
           '111001110001011001101101', /* 24 - E7166D */
           '111010000001011001101101', /* 25 - E8166D */
           '111010010001011001101101', /* 26 - E9166D */
           '101110110001011001101101', /* 27 - BB166D */
           '100000000001011010111010', /* 28 - 8016BA */
           '101011000001011010111100', /* 29 - AC16BC */
           '010111000001011010011101', /* 30 - 5C169D */
           '100000000001011001110001', /* 31 - 801671 */
           '100000000001011001111000', /* 32 - 801678 */
           '010010110001011001111101', /* 33 - 4B167D */
           '101111110001011010011101', /* 34 - BF169D */
           '101101110001011010011101', /* 35 - B7169D */
           '011000000001011010011101', /* 36 - 60169D */
           '011000000001011001100001', /* 37 - 601661 */
           '011000000001011010110111', /* 38 - 6016B7 */
           '100100000001011010111000', /* 39 - 9016B8 */
           '101111110001011010111011', /* 40 - BF16BB */
           '101111110001011010111010', /* 41 - BF16BA */
           '100100000001011001111101', /* 42 - 90167D */
           '101011110001011010101100', /* 43 - AF16AC */
           '101011110001011010111100', /* 44 - AF16BC */
           '101011110001011010101010');/* 45 - AF16AA */
         DCL APLTAB CHAR(135) DEF APLBIT;
         DCL APLREPD(46) FIXED BIN(15,0) STATIC INIT(
           65,       /*  1 - C1166D -> X'41'  */
           66,       /*  2 - C2166D -> X'42'  */
           67,       /*  3 - C3166D -> X'43'  */
           68,       /*  4 - C4166D -> X'44'  */
           69,       /*  5 - C5166D -> X'45'  */
           70,       /*  6 - C6166D -> X'46'  */
           71,       /*  7 - C7166D -> X'47'  */
           72,       /*  8 - C8166D -> X'48'  */
           73,       /*  9 - C9166D -> X'49'  */
           81,       /* 10 - D1166D -> X'51'  */
           82,       /* 11 - D2166D -> X'52'  */
           83,       /* 12 - D3166D -> X'53'  */
           84,       /* 13 - D4166D -> X'54'  */
           85,       /* 14 - D5166D -> X'55'  */
           86,       /* 15 - D6166D -> X'56'  */
           87,       /* 16 - D7166D -> X'57'  */
           88,       /* 17 - D8166D -> X'58'  */
           89,       /* 18 - D9166D -> X'59'  */
           98,       /* 19 - E2166D -> X'62'  */
           99,       /* 20 - E3166D -> X'63'  */
           100,      /* 21 - E4166D -> X'64'  */
           101,      /* 22 - E5166D -> X'65'  */
           102,      /* 23 - E6166D -> X'66'  */
           103,      /* 24 - E7166D -> X'67'  */
           104,      /* 25 - E8166D -> X'68'  */
           105,      /* 26 - E9166D -> X'69'  */
           75,       /* 27 - BB166D -> X'4B'? */
           202,      /* 28 - 8016BA -> X'CA'  */
           203,      /* 29 - AC16BC -> X'CB'  */
           205,      /* 30 - 5C169D -> X'BD'  */
           207,      /* 31 - 801671 -> X'CF'  */
           223,      /* 32 - 801678 -> X'DF'  */
           90,       /* 33 - 4B167D -> X'5A'  */
           221,      /* 34 - BF169D -> X'DD'  */
           237,      /* 35 - B7169D -> X'ED'  */
           253,      /* 36 - 60169D -> X'FD'  */
           218,      /* 37 - 601661 -> X'DA'  */
           234,      /* 38 - 6016B7 -> X'EA'  */
           219,      /* 39 - 9016B8 -> X'DB'  */
           235,      /* 40 - BF16BB -> X'EB'  */
           251,      /* 41 - BF16BA -> X'FB'  */
           220,      /* 42 - 90167D -> X'DC'  */
           222,      /* 43 - AF16AC -> X'DE'  */
           238,      /* 44 - AF16BC -> X'EE'  */
           239,      /* 45 - AF16AA -> X'EF'  */
           75);      /* 46 - DEFAULT-> X'4B'  */
         DCL 1 APLREPS(46) UNALIGNED DEF APLREPD,
           2 APLRPAD CHAR(1),
           2 APLREP CHAR(1);
         RETSTR=RECORD;
         DO I=INDEX(RETSTR,HEX16) REPEAT(INDEX(RETSTR,HEX16))
           WHILE(I^=0);
           IF I=1
             THEN SUBSTR(RETSTR,1,1)=' ';
             ELSE DO;
               I=I-1;
               IF LENGTH(RETSTR)<I+2
                 THEN SUBSTR(RETSTR,I,2)='  ';
                 ELSE IF SUBSTR(RETSTR,I+1,2)=HEX1625
                   THEN SUBSTR(RETSTR,I+1,2)=' ';
                   ELSE DO;
                     J=INDEX(APLTAB,SUBSTR(RETSTR,I,3));
                     IF J=0
                       THEN J=46; /* DEFAULT */
                       ELSE J=(J/3)+1; /* J=INDEX TO PRINT CHAR */
                     RETSTR=SUBSTR(RETSTR,1,I-1)××APLREP(J)××
                         SUBSTR(RETSTR,I+3);
                     END;
               END;
           END;
         RETURN(RETSTR);
         END TRDATA;
 DOVTAM:  PROC;
           CALL SYSCALL(TERMEP,OPCODE,DATA,MSGB,RETC,VTAMECB,NEWCID);
           OLDOP = OPCODE;
           IF MSGB^=''
             THEN DO;
               IF ERRCNT > 0 & MSGB^='EOF'
                 THEN PUT EDIT(MSGB,DATA)(A,A) SKIP(1);
               IF MSGB^='EOF'
                 THEN IF OPCODE^=12 /* WAS IT NOT STOP? */
                   THEN OPCODE = 24; /* INDICATE ERROR OCCURRED */
               END;
           IF RETC^=0
             THEN DO;
               IF ERRCNT > 0
                 THEN PUT EDIT('BAD RETURN CODE=',RETC)
                    (A,P'ZZ,ZZZ,ZZZ') SKIP(1);
               IF OPCODE^=12 /* WAS IT NOT STOP? */
                 THEN OPCODE = 24; /* INDICATE ERROR OCCURRED */
               END;
         END DOVTAM;
 GETCMD:  PROC(PR) RETURNS(CHAR(72) VAR);
         DCL PR CHAR(80) VAR;
         DCL 1 INREC,
           2 INDATA CHAR(72),
           2 INSEQ CHAR(8);
         DCL RETSTR CHAR(72) VAR;
         IF EOFSW THEN SIGNAL FINISH;
         READ FILE(SYSIN) INTO(INREC);
         IF EOFSW
           THEN INDATA = 'OFF';
         RETSTR=SUBSTR(INDATA,1,MAX(1,SUFFIX(INDATA,' ')));
         PUT EDIT(RETSTR)(A) SKIP(1);
         RETURN(RETSTR);
         END GETCMD;
         END;
