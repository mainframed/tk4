 /* AVLTREE */
 /**********************************************************************
 *
0*$.HE GENERALIZED SUBROUTINES - AVLTREE
0*$.HE GENERATE A HEIGHT BALANCED TREE
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$02/16/84
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME: AVLTREE
0*$DOCUMENTATION ID: 0*$
0*$.FI L
0*$.SP 5
0*$THIS SUBROUTINE CAN BE USED TO GENERATE A HEIGHT-BALANCED AVL
0*$BINARY TREE.  DECLARATION AND CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$DCL AVLTREE ENTRY(CHAR(256) VAR,PTR,PTR);
0*$.SP 1
0*$CALL AVLTREE(X,T,Y);
0*$.SP 1
0*$WHERE -
0*$.SP 1
0*$X IS CHAR(256) VAR, AND SHOULD CONTAIN THE KEY.
0*$.SP 1
0*$T IS A POINTER VARIABLE THAT SHOULD BE SET TO NULL BEFORE INVOKING
0*$AVLTREE THE FIRST TIME.  IT WILL POINT TO THE ROOT OF THE
0*$GENERATED TREE.
0*$.SP 1
0*$Y IS A POINTER VARIABLE THAT WILL BE SET BY AVLTREE TO THE NODE
0*$FOR THE KEY SPECIFIED IN X.  NODES WILL HAVE THE FOLLOWING FORMAT:
0*$.SP 1
0*$.NF
0*$DCL 1 NODE BASED(Y),
0*$  2 LCHILD PTR,
0*$  2 RCHILD PTR,
0*$  2 BF FIXED BIN(15,0),
0*$  2 IDENT CHAR(256) VAR,
0*$  2 NODEPTR PTR;
0*$.FI L
0*$.SP 1
0*$WHERE -
0*$.SP 1
0*$LCHILD AND RCHILD ARE THE LEFT AND RIGHT CHILD POINTERS OF THE
0*$BINARY TREE STRUCTURE.
0*$.SP 1
0*$BF IS USED INTERNALLY IN AVLTREE TO MAINTAIN THE HEIGHT BALANCE
0*$OF THE TREE.
0*$.SP 1
0*$IDENT WILL CONTAIN THE KEY OF THE NODE.
0*$.SP 1
0*$NODEPTR WILL BE SET TO NULL BY AVLTREE WHENEVER IT ALLOCATES A
0*$NEW NODE.  THE USER IS THEN FREE TO STORE IN THIS FIELD.
 *
 **********************************************************************/
 AVLTREE: PROC(X,T,Y)  OPTIONS(REENTRANT);
   DCL X CHAR(256) VAR;
   DCL (T,Y) PTR;

   DCL NULL BUILTIN;
   DCL 1 NODE BASED(Y),                /* NODE OF TREE */
     2 LCHILD PTR,                     /* LEFT CHILD POINTER */
     2 RCHILD PTR,                     /* RIGHT CHILD POINTER */
     2 BF FIXED BIN(15,0),             /* BALANCE FACTOR */
     2 IDENT CHAR(256) VAR,            /* IDENT FOR NODE */
     2 NODEPTR PTR;                    /* INITIALIZED TO NULL */
   DCL (F,A,B,C,CL,CR,P,Q) PTR;
   DCL D FIXED BIN;

   IF T=NULL
     THEN DO; /* SPECIAL CASE: EMPTY TREE */
       ALLOCATE NODE;
       IDENT=X;
       T=Y;
       BF=0;
       LCHILD,RCHILD,NODEPTR=NULL;
       RETURN;
       END;

   /* PHASE 1: LOCATE INSERTION POINT FOR X.  A KEEPS TRACK OF MOST
   RECENT NODE WITH BALANCE FACTOR +-1 AND F IS THE PARENT OF A.
   Q FOLLOWS P THROUGH THE TREE. */

   F,Q=NULL;
   A,P=T;
   DO WHILE(P^=NULL); /* SEARCH T FOR INSERTION POINT FOR X */
     IF P->BF^=0
       THEN DO;
         A=P;
         F=Q;
         END;
     SELECT;
       WHEN(X<P->IDENT) DO; /* TAKE LEFT BRANCH */
         Q=P;
         P=P->LCHILD;
         END;
       WHEN(X>P->IDENT) DO; /* TAKE RIGHT BRANCH */
         Q=P;
         P=P->RCHILD;
         END;
       OTHERWISE DO; /* X IS IN T */
         Y=P;
         RETURN;
         END;
       END; /* SELECT */
     END;

   /* PHASE 2: INSERT AND REBALANCE. X IS NOT IN T AND MAY BE INSERTED
   AS THE APPROPIATE CHILD OF Q. */

   ALLOCATE NODE;
   Y->IDENT=X;
   Y->LCHILD,Y->RCHILD,Y->NODEPTR=NULL;
   Y->BF=0;
   IF X<Q->IDENT
     THEN Q->LCHILD=Y; /* INSERT AS LEFT CHILD */
     ELSE Q->RCHILD=Y; /* INSERT AS RIGHT CHILD */

   /* ADJUST BALANCE FACTORS OF NODES ON PATH FROM A TO Q.  NOTE THAT
   BY THE DEFINITION OF A, ALL NODES ON THIS PATH MUST HAVE BALANCE
   FACTORS OF 0 AND SO WILL CHANGE TO +-1.  D=+1 IMPLIES X IS
   INSERTED IN LEFT SUBTREE OF A. D=-1 IMPLIES X IS INSERTED IN
   RIGHT SUBTREE OF A. */

   IF X>A->IDENT
     THEN DO;
       P=A->RCHILD;
       B=P;
       D=-1;
       END;
     ELSE DO;
       P=A->LCHILD;
       B=P;
       D=+1;
       END;
   DO WHILE(P^=Y);
     IF X>P->IDENT
       THEN DO;
         P->BF=-1;
         P=P->RCHILD;
         END;
       ELSE DO;
         P->BF=+1;
         P=P->LCHILD;
         END;
     END;

   /* IS TREE UNBALANCED? */
   IF A->BF=0
     THEN DO; /* TREE STILL BALANCED */
       A->BF=D;
       RETURN;
       END;
   IF A->BF+D=0
     THEN DO; /* TREE IS BALANCED */
       A->BF=0;
       RETURN;
       END;
   /* TREE UNBALANCED, DETERMINE ROTATION TYPE */
   IF D=+1
     THEN SELECT; /* LEFT IMBALANCE */
       WHEN(B->BF=+1) DO; /* ROTATION TYPE LL */
         A->LCHILD=B->RCHILD;
         B->RCHILD=A;
         A->BF,B->BF=0;
         END;
       OTHERWISE DO; /* TYPE LR */
         C=B->RCHILD;
         IF C=NULL
           THEN CL,CR=NULL;
           ELSE DO;
             CL=C->LCHILD;
             CR=C->RCHILD;
             END;
         B->RCHILD=CL;
         A->LCHILD=CR;
         C->LCHILD=B;
         C->RCHILD=A;
         SELECT;
           WHEN(C->BF=+1) DO; /* LR(B) */
             A->BF=-1;
             B->BF=0;
             END;
           WHEN(C->BF=-1) DO; /* LR(C) */
             B->BF=+1;
             A->BF=0;
             END;
           OTHERWISE B->BF,A->BF=0;
           END; /* SELECT */
         C->BF=0;
         B=C;
         END;
       END; /* SELECT */
     ELSE SELECT; /* RIGHT IMBALANCE; SYMMETRIC TO LEFT IMBALANCE */
       WHEN(B->BF=-1) DO; /* ROTATION TYPE RR */
         A->RCHILD=B->LCHILD;
         B->LCHILD=A;
         A->BF,B->BF=0;
         END;
       OTHERWISE DO; /* TYPE RL */
         C=B->LCHILD;
         IF C=NULL
           THEN CL,CR=NULL;
           ELSE DO;
             CL=C->LCHILD;
             CR=C->RCHILD;
             END;
         B->LCHILD=CR;
         A->RCHILD=CL;
         C->RCHILD=B;
         C->LCHILD=A;
         SELECT;
           WHEN(C->BF=-1) DO; /* RR(B) */
             A->BF=+1;
             B->BF=0;
             END;
           WHEN(C->BF=+1) DO; /* RR(C) */
             B->BF=-1;
             A->BF=0;
             END;
           OTHERWISE B->BF,A->BF=0;
           END; /* SELECT */
         C->BF=0;
         B=C;
         END;
       END; /* SELECT */
   /* SUBTREE WITH ROOT B HAS BEEN REBALANCED AND IS THE NEW SUBTREE
   OF F.  THE ORIGINAL SUBTREE OF F HAD ROOT A */
   SELECT;
     WHEN(F=NULL) T=B;
     WHEN(A=F->LCHILD) F->LCHILD=B;
     WHEN(A=F->RCHILD) F->RCHILD=B;
     OTHERWISE;
     END;
   END AVLTREE;
