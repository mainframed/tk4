   RETRIEV:  PROC(CPPL1,CPPL2,CPPL3,CPPL4) OPTIONS(MAIN);
 /*TEST:  PROC OPTIONS(MAIN);FOR USE WITH CHECKER*/
 /* THIS IS THE RETRIEVE TSO COMMAND PROCESSOR.  IT IS ISSUED TO
    RESTORE A DATA SET TO DISK FROM THE ARCHIVES TAPE.  FORMAT FOR
    THE COMMAND IS 'RETRIEVE 'DSNAME' JOBCARD() AT() TEMPNAME()
    SPACE()'.
    THE COMMAND WILL GENERATE JCL FOR A BATCH JOB TO DO THE RETRIEVAL
    AND WILL CAUSE THE BGD COMMAND TO BE EXECUTED TO SUBMIT IT TO
    BATCH.
    DSNAME IS THE NAME OF THE DATA SET TO BE RETRIEVED FROM TAPE.
    JOBCARD IS A KEYWORD PARAMETER THAT DEFAULTS TO JOBCARD.CNTL,
    WHICH IS A DATA SET CONTAINING A VALID OS
    JOB STATEMENT.  IF THE DSNAME IS NOT IN APOSTROPHES AND THE
    DESCRIPTIVE QUALIFIER IS NOT CNTL, CNTL WILL BE APPENDED.
    THE AT KEYWORD PARAMETER, WHICH DEFAULTS TO 'LOCAL', CAN BE USED
    TO ROUTE THE PRINTED OUTPUT FROM THE BATCH JOB TO A PARTICULAR
    HASP REMOTE LOCATION.
    THE TEMPNAME KEYWORD PARAMETER, WHICH DEFAULTS TO 'BPRT.CNTL',
    IS THE NAME THAT THE COMMAND CAN USE FOR THE DATA SET TO
    CONTAIN THE GENERATED JCL BEFORE IT IS SUBMITTED.  IF THE
    NAME IS NOT SPECIFIED IN APOSTROPHES, AND THE DESCRIPTIVE
    QUALIFIER IS NOT 'CNTL', THE COMMAND WILL APPEND 'CNTL' AS
    THE DESCRIPTIVE QUALIFIER.
    SPACE() SPECIFIES THE NUMBER OF TRACKS TO BE ALLOCATED TO THE
    NEW DATA SET.  THE DEFAULT IS 1.
 */
         % INCLUDE IKJCPPL;
 /*CALL TESTCP(CPPLCBUF,CPPLUPT,CPPLPSCB,CPPLECT);*/
         % INCLUDE PDEDCL;
         % INCLUDE IKJPPL;
         % INCLUDE PPLINIT;
         % INCLUDE IKJPDECM;
         % INCLUDE IKJPDEDS;
         % INCLUDE IKJPDEIK;
         % INCLUDE IKJPSCB;
         % INCLUDE DAIR08;
         % INCLUDE DAIR14;
         % INCLUDE DAIR18;
         % INCLUDE CTLGDEF;
         DCL 1 QUALMSG1 STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(76),
              2 OFFSET FIXED BIN(15,0) INIT(0),
              2 CON1 CHAR(24) INIT('QUALIFIERS FOR DATA SET '),
              2 OUTQUAL CHAR(48);
         DCL 1 QUALMSG2 STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(84),
              2 OFFSET FIXED BIN(15,0) INIT(0),
              2 QUALEN FIXED BIN(15,0) INIT(80),
              2 QUALZRO FIXED BIN(15,0) INIT(0),
              2 QUALSTR CHAR(76) INIT(' ');
         DCL 1 QUALMSG2D DEF QUALMSG2,
              2 PAD CHAR(4),
              2 QUALARY(10) CHAR(8);
         DCL 1 QUALMSG3 STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(26),
              2 OFFSET FIXED BIN(15,0) INIT(0),
              2 CON1 CHAR(22) INIT('      ENTER QUALIFIER-');
         DCL 1 OLD STATIC,
              2 OLDCNT FIXED BIN(31,0) INIT(1),
              2 OUTPTR PTR;
         OUTPTR = ADDR(QUALMSG3);
         DCL 1 INSTR BASED(INPTR),
              2 INLEN FIXED BIN(15,0),
              2 PAD CHAR(2),
              2 INQUAL CHAR(8);
         DCL QUAL CHAR(8) VARYING;
         DCL (D08PTR,D18PTR) PTR;
         D08PTR = ADDR(DAIR08);
         D18PTR = ADDR(DAIR18);
         DCL RETCODE FIXED BIN(31,0);
         DCL RETCHAR CHAR(4) DEF RETCODE;
         DCL RET BIT(32) DEF RETCODE;
         DCL 1 ABND,
              2 DUM BIN FLOAT(50),
              2 AREA,
               3 BLK CHAR(256),
               3 ATTR CHAR(3),
               3 ACVOL CHAR(6);
         DCL PTRFIX FIXED BIN(31,0) DEF CTLGPTR;
         CTLGPTR = ADDR(BLK);
         DCL IOECB FIXED BIN(31,0);
         DCL 1 CTLGMSG STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(90),
              2 OFFSET FIXED BIN(15,0) INIT(0B),
              2 CON1 CHAR(8) INIT('ERROR = '),
              2 CTLGRET CHAR(8),
              2 CON2 CHAR(26) INIT(' ACCESSING CATALOG, DSN = '),
              2 CTLGDSN CHAR(44);
         DCL 1 MSGREC STATIC,
              2 CON1 CHAR(15) INIT('/*MESSAGE'),
              2 CON2 CHAR(10) INIT((10)'*'),
              2 TAPECNT PIC'Z9',
              2 CON3 CHAR(6) INIT(' 9TRK '),
              2 CON4 CHAR(47) INIT((10)'*');
         DCL 1 SETUP STATIC,
              2 CON1 CHAR(15) INIT('/*SETUP'),
              2 SERARY(8),
               3 OUTSER CHAR(6) INIT((8)(6)' '),
               3 OUTCOMMA CHAR(1) INIT((8)(1)' '),
              2 CON2 CHAR(9) INIT(' ');
         DCL WRKPTR PTR,
             WRKSTR CHAR(100) BASED(WRKPTR);
         DCL 1 JOBDSN,
              2 DSNLEN FIXED BIN(15,0),
              2 DSNSTR CHAR(44);
         DCL 1 TMPDSN,
              2 DSNLEN FIXED BIN(15,0),
              2 DSNSTR CHAR(44);
         DCL ALLOCSW BIT(1) STATIC INIT('1'B);
         DCL JCLREC CHAR(80);
         DCL (FULLDSN,FULLDSNA) CHAR(44) VARYING;
         DCL 1 LSD BASED(LSDPTR),
              2 LSDADATA PTR,
                   /* PTR OT IN-STORAGE LIST */
              2 LSDRCLEN FIXED BIN(15,0),
                   /* RECORD LENGTH OF THE IN-STORAGE LIST */
              2 LSDTOTLN FIXED BIN(15,0),
                   /* TOTAL LENGTH OF THE IN-STORAGE LIST */
              2 LSDANEXT PTR,
                   /* PTR TO THE NEXT RECORD TO BE PROCESSED */
              2 LDSRSVRD CHAR(4),
                   /* RESERVED */
              2 ISCMD1L FIXED BIN(15,0),
              2 ISCMD1P FIXED BIN(15,0),
              2 ISCMD1 CHAR(80),
              2 ISCMD2L FIXED BIN(15,0),
              2 ISCMD2P FIXED BIN(15,0),
              2 ISCMD2 CHAR(80);
         DCL LV FIXED BIN(31,0) STATIC INIT(184);
         DCL SP FIXED BIN(15,0) STATIC INIT(78);
         CALL SYSPARS(PPLPTR,RETCODE);
         IF RETCODE ^= 0
              THEN SIGNAL ERROR;
         PDEPTR = ADDR(DSN);
         WRKPTR = PDEDSPT;
         IF ^SUBSTR(PDEDSF1,2,1)
              THEN DO;
                   DO I = 1 TO 7 WHILE(SUBSTR(PSCBUSER,I,1) ^= ' ');
                        END;
                   FULLDSN = SUBSTR(PSCBUSER,1,I-1) ×× '.';
                   END;
              ELSE FULLDSN = '';
         FULLDSN = FULLDSN ×× SUBSTR(WRKSTR,1,PDEDSL1);
         FULLDSNA='';
 CALLCTLG:
         CALL SYSCTLG('NAME',RET,FULLDSN,'SYSRES',BLK);
         IF RETCODE ^= 0
              THEN DO;
                   IF ^SUBSTR(PDEDSF1,2,1) & (FULLDSNA='')
                        THEN DO;
                             FULLDSNA=SUBSTR(WRKSTR,1,PDEDSL1);
                             DA14PDSN=ADDR(FULLDSNA);
                             DA14PRET=ADDR(QUALEN);
                             DA14CTL='00100000'B;
                             CALL SYSDAIR(CPPLUPT,CPPLECT,IOECB,
                               CPPLPSCB,DAIR14,RETCODE);
                             IF RETCODE = 0
                                  THEN DO;
                                       IF QUALARY(2)=LOW(8)
                                            THEN DO;
                                                 DO I=1 TO 8 WHILE(
                                                     SUBSTR(QUALARY(1),
                                                     I,1) ^= ' ');
                                                      END;
                                                 FULLDSN = FULLDSN
                                                   ×× '.' ××
                                                   SUBSTR(QUALARY(1),
                                                   1,I-1);
                                                 GO TO CALLCTLG;
                                                 END;
                                       OUTQUAL=FULLDSN;
                                       CALL PUTLINE(CPPLUPT,CPPLECT,
                                        CPECB,QUALMSG1,RETCODE,'DATA');
                                       CALL PUTLINE(CPPLUPT,CPPLECT,
                                        CPECB,QUALMSG2,RETCODE,'DATA');
                                       IOECB = 0;
                                       CALL PUTGET(CPPLUPT,CPPLECT,
                                        IOECB,OLD,RETCODE,INPTR,
                                        'HOLD','GWAIT');
                                       IF RETCODE^=0 THEN SIGNAL ERROR;
                                       QUAL=SUBSTR(INQUAL,1,INLEN-4);
                                       CALL SETCAPS(QUAL);
                                       FULLDSN=FULLDSN ×× '.' ×× QUAL;
                                       GO TO CALLCTLG;
                                       END;
                                  END;
                   CALL TROUT(RETCHAR,CTLGRET);
                   CTLGDSN = FULLDSN;
                   CALL PUTLINE(CPPLUPT,CPPLECT,CPECB,CTLGMSG,RETCODE,
                     'DATA');
                   RETURN;
                   END;
         PDEPTR = ADDR(JOBCARD);
         WRKPTR = PDEDSPT;
         JOBDSN.DSNSTR = SUBSTR(WRKSTR,1,PDEDSL1);
         JOBDSN.DSNLEN = PDEDSL1;
         IF SUBSTR(PDEDSF1,2,1)
              THEN GO TO BYJCNTL;
         IF JOBDSN.DSNLEN < 5
              THEN GO TO SETJCNTL;
         IF SUBSTR(JOBDSN.DSNSTR,JOBDSN.DSNLEN-4,5)='.CNTL'
              THEN GO TO BYJCNTL;
 SETJCNTL:
         SUBSTR(JOBDSN.DSNSTR,JOBDSN.DSNLEN+1,5)='.CNTL';
         JOBDSN.DSNLEN=JOBDSN.DSNLEN+5;
 BYJCNTL:
         SUBSTR(DA18CTL,3,1),SUBSTR(DA08CTL,3,1)=^SUBSTR(PDEDSF1,2,1);
         DA18PDSN,DA08PDSN = ADDR(JOBDSN);
         DA08DDN = '';
         DA08UNIT = '';
         DA08SER = '';
         IF SUBSTR(PDEDSF2,1,1) /*CHECK FOR MEMBER NAME*/
              THEN DO;
                   WRKPTR = PDEDSMP;
                   DA08MNM = SUBSTR(WRKSTR,1,PDEDSL2);
                   END;
              ELSE DA08MNM = '';
         DA08PSWD = '';
         DA08DSP1 = '00001000'B; /* SET DISP=SHR */
         DA08DPS2 = '00001000'B; /* SET DISP=KEEP */
         DA08DPS3 = '00001000'; /*SET ABDISP=KEEP*/
         DA08ALN = '';
         SUBSTR(DA08CTL,5,1) = '1'B;
         CALL SYSDAIR(CPPLUPT,CPPLECT,IOECB,CPPLPSCB,DAIR08,RETCODE);
         IF RETCODE ^= 0
              THEN CALL DAIRERR(D08PTR);
         OPEN FILE(JOBFILE) TITLE(DA08DDN) RECORD INPUT;
         ON ENDFILE(JOBFILE) GO TO EOF;
         DA18DDN = DA08DDN;
         PDEPTR = ADDR(TEMPNAME);
         WRKPTR = PDEDSPT;
         TMPDSN.DSNSTR = SUBSTR(WRKSTR,1,PDEDSL1);
         TMPDSN.DSNLEN = PDEDSL1;
         IF SUBSTR(PDEDSF1,2,1)
              THEN GO TO BYCNTL;
         IF TMPDSN.DSNLEN < 5
              THEN GO TO SETCNTL;
         IF SUBSTR(TMPDSN.DSNSTR,TMPDSN.DSNLEN-4,5) = '.CNTL'
              THEN GO TO BYCNTL;
 SETCNTL:
         SUBSTR(TMPDSN.DSNSTR,TMPDSN.DSNLEN+1,5)='.CNTL';
         TMPDSN.DSNLEN=TMPDSN.DSNLEN+5;
 BYCNTL:
         SUBSTR(DA08CTL,3,1) = ^SUBSTR(PDEDSF1,2,1);
         DA08PDSN = ADDR(TMPDSN);
         DA08DDN = '';
         DA08UNIT = '';
         DA08SER = '';
         DA08BLK = 400;
         DA08PQTY = 1;
         DA08SQTY = 1;
         DA08MNM = '';
         DA08DSP1 = '00000100'B; /* TRY FOR NEW */
         DA08DPS2 = '00000010'B; /* SET DISP=CATLG */
         DA08DPS3 = '00000000'B; /* ABDISP=DELETE*/
         SUBSTR(DA08CTL,1,2) = '01'B;
 REALLOC:
         CALL SYSDAIR(CPPLUPT,CPPLECT,IOECB,CPPLPSCB,DAIR08,RETCODE);
         IF RETCODE ^= 0
              THEN IF ALLOCSW
                   THEN DO;
                        ALLOCSW = '0'B;
                        DA08DSP1 = '00000001'B; /* TRY FOR OLD */
                        DA08DPS2 = '00001000'B;
                        GO TO REALLOC;
                        END;
                   ELSE CALL DAIRERR(D08PTR);
         DCL TMPFILE FILE RECORD OUTPUT ENV(FB RECSIZE(80)
           BLKSIZE(400));
         OPEN FILE(TMPFILE) TITLE(DA08DDN);
 NXTJOB:
         READ FILE(JOBFILE) INTO(JCLREC);
         WRITE FILE(TMPFILE) FROM(JCLREC);
         GO TO NXTJOB;
 EOF:
         CLOSE FILE(JOBFILE);
         DA18DPS2 = '00001000'B;
         CALL SYSDAIR(CPPLUPT,CPPLECT,IOECB,CPPLPSCB,DAIR18,RETCODE);
         IF RETCODE ^= 0
              THEN CALL DAIRERR(D18PTR);
         PDEPTR = ADDR(AT);
         WRKPTR = PDEIKPT;
         JCLREC = '/*ROUTE  PRINT ' ×× SUBSTR(WRKSTR,1,PDEIKL);
         WRITE FILE(TMPFILE) FROM(JCLREC);
         IF VLSTBLK.VOLCNT > 8
              THEN I = 8;
              ELSE I = VLSTBLK.VOLCNT;
         TAPECNT = I;
         WRITE FILE(TMPFILE) FROM(MSGREC);
         DO J = 1 TO I;
              OUTSER(J) = VLSTBLK.VOLID.VOLSER(J);
              IF J > 1
                   THEN OUTCOMMA(J-1) = ',';
              END;
         WRITE FILE(TMPFILE) FROM(SETUP);
         JCLREC = '//REST EXEC TSOREST,';
         WRITE FILE(TMPFILE) FROM(JCLREC);
         JCLREC = '// DSN=' ×× '''' ×× FULLDSN ×× '''' ×× ',';
         WRITE FILE(TMPFILE) FROM(JCLREC);
         IF VOL = LOW(2)
              THEN JCLREC = '// VOL=' ×× SUBSTR(DA08SER,1,6) ×× ',';
              ELSE DO;
                   PDEPTR = ADDR(VOLSUBF);
                   WRKPTR = PDEIKPT;
                   JCLREC = '// VOL=' ×× SUBSTR(WRKSTR,1,PDEIKL) ×× ',';
                   END;
         WRITE FILE(TMPFILE) FROM(JCLREC);
         PDEPTR = ADDR(SPACE);
         WRKPTR = PDEIKPT;
         JCLREC = '// SPACE=' ×× SUBSTR(WRKSTR,1,PDEIKL);
         WRITE FILE(TMPFILE) FROM(JCLREC);
         JCLREC = ' RESTORE DSN=' ×× FULLDSN;
         WRITE FILE(TMPFILE) FROM(JCLREC);
         CLOSE FILE(TMPFILE);
         CALL SYSGETM('EU',LV,LSDPTR,SP,RETCODE);
         LSDADATA,LSDANEXT = ADDR(ISCMD1L);
         LSDRCLEN = 0;
         LSDTOTLN = 168;
         ISCMD1L,ISCMD2L=84;
         ISCMD1P,ISCMD2P=0;
         PDEPTR = ADDR(TEMPNAME);
         IF SUBSTR(PDEDSF1,2,1)
              THEN FULLDSN = '''' ×× SUBSTR(TMPDSN.DSNSTR,1,
                TMPDSN.DSNLEN) ×× '''';
              ELSE FULLDSN = TMPDSN.DSNSTR;
         ISCMD1 = 'BGD ' ×× FULLDSN;
         IF ALLOCSW
              THEN ISCMD2 = 'D ' ×× FULLDSN;
              ELSE LSDTOTLN = 84;
         CALL STACK(CPPLUPT,CPPLECT,IOECB,RETCODE,'PROCN',LSDPTR);
         IF RETCODE ^= 0
              THEN SIGNAL ERROR;
 DAIRERR:  PROC(DAIRPM);
         DCL DAIRPM PTR;
         DCL 1 DAIRBLK BASED(DAIRPM),
              2 CD FIXED BIN(15,0),
              2 FLG BIT(16),
              2 DARC CHAR(2),
              2 CTRC CHAR(2),
              2 PDSN PTR;
         DCL PDSNA CHAR(44) VARYING BASED(PDSN);
         DCL 1 ERRMSG1 STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(82),
              2 OFFSET FIXED BIN(15,0) INIT(0B),
              2 CON1 CHAR(11) INIT('ERROR WHEN '),
              2 ACOD CHAR(3),
              2 CON2 CHAR(20) INIT('ALLOCATING DATA SET '),
              2 OUTDSN CHAR(44);
         DCL 1 ERRMSG2 STATIC,
              2 OUTLEN FIXED BIN(15,0) INIT(46),
              2 OFFSET FIXED BIN(15,0) INIT(0),
              2 CON1 CHAR(7) INIT('DARC = '),
              2 OUTDARC CHAR(4),
              2 CON2 CHAR(8) INIT(' CTRC = '),
              2 OUTCTRC CHAR(4),
              2 CON3 CHAR(11) INIT(' RETCODE = '),
              2 OUTRC CHAR(8);
         IF CD = 8
              THEN ACOD = '';
              ELSE ACOD = 'DE-';
         OUTDSN = PDSNA;
         CALL PUTLINE(CPPLUPT,CPPLECT,CPECB,ERRMSG1,RETCODE,'DATA');
         CALL TROUT(DARC,OUTDARC);
         CALL TROUT(CTRC,OUTCTRC);
         CALL TROUT(RETCHAR,OUTRC);
         CALL PUTLINE(CPPLUPT,CPPLECT,CPECB,ERRMSG2,RETCODE,'DATA');
         SIGNAL ERROR;
         END;
         END;
