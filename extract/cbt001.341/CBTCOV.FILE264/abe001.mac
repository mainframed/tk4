   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE001 - SAVE,S,SF,SB,SE,SX,REFRESH,ST,ES */
   /* 1        2    3 4  5  6  7  8       9  10 */
   %INCLUDE ABESUB;
 ABESUB(ABE001) PARS(0000000000000000) PARSEVAL(NO) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL SETCAPS ENTRY;
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL SUFFIX ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SAVNON BIT(1);
   DCL ALCODE CHAR(3) VAR INIT('OUT');
   DCL L FIXED BIN(31,0);
   DCL SDDN CHAR(44) VAR;
   DCL LAST FIXED BIN(31,0);
   DCL (MYPTR,DUMPTR,ORGPTR) PTR;
   DCL NOPROMPT BIT(1);
   DCL MYP CHAR(3) VAR;
   DCL KEYTABLE(5) CHAR(80) VAR STATIC
     INIT('NOPROMPT','TEMP','DB2','SAS','IN');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL TEMPSW BIT(1) INIT('0'B);
   DCL TEMPDDN PTR;
   DCL (DBDSW,DB2SW,SASSW) BIT(1) INIT('0'B);
   DCL DBNAME CHAR(44) VAR INIT('');
   DCL MISSING DEC FLOAT(16),
       MISSINGCH CHAR(8) BASED(ADDR(MISSING));
   DCL MISSING_PACKED FIXED DEC(15,0) STATIC INIT(-999999999999999),
       MISSING_PACKED_CH CHAR(8) BASED(ADDR(MISSING_PACKED));
   DCL MISSING_INTEGER FIXED BIN(31,0) STATIC INIT(-2147483648),
       MISSING_INTEGER_CH CHAR(4) BASED(ADDR(MISSING_INTEGER));
   DCL MISSING_SMALLINT FIXED BIN(15,0) STATIC INIT(-32768),
       MISSING_SMALLINT_CH CHAR(2) BASED(ADDR(MISSING_INTEGER));

   UNSPEC(MISSING)='1'B; /* SET MISSING VALUE */
   RHRC = 0;
   ORGPTR=RECPTR;
   TEMPDDN=NULL;
   IF CMDINDX=8  /* REFRESH */
     THEN DO;
       SELECT;
         WHEN(INDDN=NULL) DO;
           MSGDATA='REFRESH FROM WHERE?';
           RHRC=8;
           END;
         WHEN(SUBSTR(INDDN->ALCFLAG,9,1)) DO;
           MSGDATA='REFRESH FROM DB2 DATA SET NOT YET IMPLEMENTED';
           RHRC=8;
           END;
         WHEN(SUBSTR(INDDN->ALCFLAG,10,1)) DO;
           MSGDATA='REFRESH FROM SAS DATA SET NOT YET IMPLEMENTED';
           RHRC=8;
           END;
         WHEN(RHPLOTSW)
           DUMPTR=RHFAMEP(RHHDRPT,RHPTR,NULL,6);
         OTHERWISE DO;
           IF PARY(1)=''
             THEN FLINE=1;
             ELSE FLINE=PARY(1);
           IF PARY(2)=''
             THEN COUNT=99999999;
             ELSE COUNT=PARY(2);
           CALL #REFRESH(RHPTR,RHHDRPT,FLINE,COUNT);
           RHTRANSW ='0'B;
           END;
         END; /* SELECT */
       RETURN;
       END;

   /* IT IS TIME TO DO A SAVE */
   IF RHFAMSW & ^RHPLOTSW
     THEN DO;
       DUMPTR=RHFAMEP(RHHDRPT,RHPTR,NULL,3);
       RETURN;
       END;

   IF RHTRANSW
     THEN IF CMDINDX^=9 /* CMD^=ST */
       THEN DO;
         MSGDATA=
         'TRANSLATED DATA CAN ONLY BE SAVED WITH THE ST SUBCOMMAND';
         RHRC = 8;
         RETURN;
         END;

   IF PARY(2)^=''
     THEN IF VERIFY(PARY(2),'0123456789')^=0
       THEN DO;
         DO I=15 TO 2 BY -1;
           PARY(I+1)=PARY(I);
           END;
         PARY(2)='0';
         END;
   IF PARY(3)^=''
     THEN IF VERIFY(PARY(3),'0123456789')^=0
       THEN DO;
         DO I=15 TO 3 BY -1;
           PARY(I+1)=PARY(I);
           END;
         PARY(3)='99999999';
         END;
   DO I=4 TO HBOUND(PARY,1) WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
     SELECT(INDX);
       WHEN(0)DO; /* INVALID OPERAND */
         RHRC=8;
         MSGDATA='INVALID OPERAND = '××PARY(I);
         RETURN;
         END;
       WHEN(1) /* NOPROMPT */
         ALCODE='NPR';
       WHEN(2)DO; /* TEMP */
         TEMPSW='1'B;
         TEMPDDN=OUTDDN;
         END;
       WHEN(3) /* DB2 */
         DB2SW='1'B;
       WHEN(4) /* SAS */
         SASSW='1'B;
       WHEN(5) DO; /* IN */
         DB2SW='1'B;
         DBNAME=OPER;
         CALL SETCAPS(DBNAME);
         END;
       OTHERWISE;
       END;
     END;
   IF DB2SW × SASSW
     THEN IF RHUSEHD=NULL
       THEN DO;
         MSGDATA='CAN''T SAVE WITHOUT A DBD LINE';
         RHRC=8;
         RETURN;
         END;
   IF PARY(1) ^=''
     THEN DO;
       SDDN = PARY(1);
       CALL SETCAPS(SDDN);
       IF PARQCK(1) /* QUOTED? */
         THEN IF SUBSTR(SDDN,1,1)^=''''
           THEN SDDN=''''××SDDN××'''';
           ELSE;
         ELSE IF SUBSTR(SDDN,1,1)='(' × SUBSTR(SDDN,1,1)='{'
           THEN DO;
             SELECT;
               WHEN(OUTDDN=NULL) DO;
                 MSGDATA='SAVE WHERE?';
                 RHRC=8;
                 RETURN;
                 END;
               WHEN(OUTDDN->ALCMEM='') DO;
                 MSGDATA='DATA SET IS NOT PARTITIONED';
                 RHRC=8;
                 RETURN;
                 END;
               WHEN(SUBSTR(SDDN,2,1)='(')
                 SDDN=SUBSTR(SDDN,3,LENGTH(SDDN)-4);
               OTHERWISE
                 SDDN=SUBSTR(SDDN,2,LENGTH(SDDN)-2);
               END; /* SELECT */
             SDDN=''''××OUTDDN->ALCDSN××'('××SDDN××')''';
             END;
       IF OUTDDN^=NULL
         THEN DO;
           L = OUTDDN->ALCRECL;
           IF ^TEMPSW
             THEN DO;
               IF ^SUBSTR(OUTDDN->ALCFLAG,5,1)
                 THEN CALL #DOFRE(OUTDDN); /* CALL DOFRE */
               IF INDDN=OUTDDN
                 THEN INDDN=NULL;
               END;
           OUTDDN=NULL;
           ALLOCATE BUFSTR SET(BUFPTR);
           END;
       SELECT;
         WHEN(DB2SW) CALL DB2ALC;
         WHEN(SASSW) CALL SASALC;
         OTHERWISE CALL #DOALC(SDDN,ALCODE,OUTDDN,RHPTR,'');
         END; /* SELECT */
       IF ^TEMPSW
         THEN INDDN = OUTDDN;
       IF OUTDDN = NULL
         THEN DO;
           IF MSGDATA=''
             THEN MSGDATA='SAVE UNSUCCESSFUL';
           RHRC = 8;
           OUTDDN=TEMPDDN; /* RESTORE OUTDDN */
           RETURN;
           END;
       IF ^SUBSTR(OUTDDN->ALCFLAG,7,1) &
         ALCODE^='NPR'&OUTDDN->ALCMEM^=''&^SASSW
         THEN DO; /* MEMBER ALREADY EXISTS */
           CALL #TERM('MEMBER '××OUTDDN->ALCMEM××' EXISTS');
           DO UNTIL(MYP='Y'×MYP='YES'×MYP='NO'×MYP='');
             MYP= #PROMPTL('ENTER A NULL LINE OR ''YES'' TO '××
               'SAVE OVER EXISTING MEMBER, OR OTHERWISE ''NO''');
             CALL SETCAPS(MYP);
             END;
           IF MYP^='YES'& MYP^='Y'& MYP^=''
             THEN DO;
               IF ^SUBSTR(OUTDDN->ALCFLAG,5,1)
                 THEN CALL #DOFRE(OUTDDN);
               IF TEMPSW
                 THEN OUTDDN=TEMPDDN;
                 ELSE INDDN,OUTDDN=NULL;
               MSGDATA='SAVE UNSUCCESSFUL';
               RHRC=8;
               RETURN;
               END;
           END;
       IF ^SUBSTR(OUTDDN->ALCFLAG,9,1)
         THEN SUBSTR(OUTDDN->ALCFLAG,6,1)=RHNONSW;
       IF ^TEMPSW
         THEN CALL #ABEDFN(RHPTR,RHHDRPT); /* SET SYMBOLIC NAME */
       END;
   IF OUTDDN=NULL
     THEN DO;
       MSGDATA='SAVE WHERE?';
       RHRC = 8;
       OUTDDN=TEMPDDN;
       RETURN;
       END;
   SELECT;
     WHEN(SUBSTR(OUTDDN->ALCFLAG, 9,1)) DB2SW,DBDSW='1'B; /* DB2 */
     WHEN(SUBSTR(OUTDDN->ALCFLAG,10,1)) SASSW,DBDSW='1'B; /* SAS */
     OTHERWISE IF RHUSEHD^=NULL
       THEN DO; /* MAYBE WANT TO SAVE DBD */
         IF INDDN^=NULL
           THEN DO; /* CHECK FOR .DB QUALIFIER */
             DO I=LENGTH(INDDN->ALCDSN) TO 1 BY -1
               WHILE(SUBSTR(INDDN->ALCDSN,I,1)^='.');
               END;
             IF SUBSTR(INDDN->ALCDSN,I+1)='DB'
               THEN DBDSW='1'B;
             END;
         IF ^DBDSW
           THEN DO; /* PROMPT USER */
             IF ALCODE='NPR'
               THEN DBDSW='1'B; /* DEFAULT TO SAVING DBD */
               ELSE DO;
                 DO UNTIL(MYP='Y'×MYP='YES'×MYP='NO'×MYP='');
                   MYP= #PROMPTL('ENTER A NULL LINE OR ''YES'' TO '××
                     'SAVE THE DBD, OR OTHERWISE ''NO''');
                   CALL SETCAPS(MYP);
                   END;
                 IF MYP='YES' × MYP='Y' × MYP=''
                   THEN DBDSW='1'B;
                 END;
             END;
         IF DBDSW
           THEN DO;
             I=#CMD('USE OUT',RHPTR,RHHDRPT);
             IF NXTHDR^=HDPTR
               THEN DO;
                 RH_L1=NXTHDR->RECSEQ;
                 RH_L2=LSTHDR->RECSEQ;
                 END;
             END;
         END;
     END; /* SELECT */

   IF RHPLOTSW
     THEN DUMPTR=RHFAMEP(RHHDRPT,RHPTR,NULL,3); /* CODE=3=SAVE */
     ELSE DO;
       CALL #MD(RHPTR,RHHDRPT,RH_L1); /* CALL MDPROC */
       MYPTR = RECPTR->LSTPTR;
       LAST = RH_L2;
       SELECT;
         WHEN(DB2SW) CALL DB2OUT;
         WHEN(SASSW) CALL SASOUT;
         OTHERWISE CALL #RESEQ(RHPTR,RHHDRPT,MYPTR,'SAVE','NORENUM',
           LAST);
         END; /* SELECT */
       END;
   IF TEMPSW
     THEN DO;
       IF ^SUBSTR(OUTDDN->ALCFLAG,5,1)
         THEN CALL #DOFRE(OUTDDN);
       OUTDDN=TEMPDDN;
       END;
   IF RHRC=0
     THEN DO;
       IF CMDINDX=6 /* SE */ × CMDINDX=10 /* ES */
         THEN CMDDATA ='END';
         ELSE DO;
           IF DBDSW & ^DB2SW & ^SASSW
             THEN I=#CMD('USE IN',RHPTR,RHHDRPT);
           IF CMDINDX=7 /* SX */
             THEN CMDDATA ='X';
           END;
       MSGDATA='SAVED';
       SAVEFLAG ='0'B;
       END;
   CALL #NC(RHPTR,ORGPTR);

 DB2ALC: PROC;
 /**********************************************************************
 *                                                                     *
 * DB2ALC IS CALLED WHEN IT IS TIME TO ALLOCATE AN ALCSTR FOR A SAVE   *
 * TO A DB2 TABLE.  OUTDDN WILL BE SET TO POINT TO THE NEW ALCSTR.     *
 * SDDN SHOULD CONTAIN THE TABLE NAME.                                 *
 *                                                                     *
 **********************************************************************/

   IF INDDN=NULL
     THEN L=256; /* INPUT IS NOT SPECIFIED - TAKE DEFAULTS */
     ELSE L=INDDN->ALCRECL;
   ALLOCATE ALCSTR;
   OUTDDN=ALCPTR;
   BUFPTR=ADDR(ALCRECL);
   ALCDDN='';
   ALCDSN=SDDN;
   ALCMEM='';
   ALCFLAG='0'B;
   SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
   SUBSTR(ALCFLAG,6,1)='1'B; /* NONUM */
   SUBSTR(ALCFLAG,9,1)='1'B; /* INDICATE DB2 TABLE */
   ALCSEQOFF,ALCSEQLEN=0;
   ALCBUF='';
   ALCBLKL=ALCRECL;
   ALCRECFM='0'B;
   END DB2ALC;

 DB2OUT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO SAVE INTO A DB2 TABLE.  MYPTR SHOULD      *
 * POINT TO THE FIRST RECORD TO BE SAVED, AND LAST SHOULD CONTAIN THE  *
 * SEQUENCE NUMBER OF THE LAST RECORD TO BE SAVED.                     *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN(31,0);

   I=#DB2PUT(OUTDDN->ALCDSN,SUBRTNE,#TERM);
   IF I^=0
     THEN DO;
       MSGDATA='ERROR FROM DB2PUT='××I;
       RHRC=8;
       RETURN;
       END;
   END DB2OUT;

 SASALC: PROC;
 /**********************************************************************
 *                                                                     *
 * SASALC IS CALLED WHEN IT IS TIME TO ALLOCATE AN ALCSTR FOR A SAVE   *
 * TO A SAS LIBRARY.  OUTDDN WILL BE SET TO POINT TO THE NEW ALCSTR.   *
 * SDDN SHOULD CONTAIN THE TABLE NAME.                                 *
 *                                                                     *
 **********************************************************************/
   DCL (I,J) FIXED BIN;
   DCL MEM CHAR(8) VAR;

   I=INDEX(SDDN,'(');
   J=INDEX(SDDN,')');
   IF I=0 × J=0
     THEN DO;
       MSGDATA='FOR SAS OUTPUT, THE DSNAME MUST BE LIBRARY(MEMBER)';
       OUTDDN=NULL;
       RETURN;
       END;
   MEM=SUBSTR(SDDN,I+1,LENGTH(SDDN)-I-1);
   SDDN=SUBSTR(SDDN,1,I-1);
   ALCODE='SAS';
   CALL #DOALC(SDDN,ALCODE,OUTDDN,RHPTR,'');
   IF OUTDDN=NULL
     THEN RETURN;
   ALCPTR=OUTDDN;
   ALCMEM=MEM;
   SUBSTR(ALCFLAG,6,1)='1'B; /* NONUM */
   SUBSTR(ALCFLAG,10,1)='1'B; /* INDICATE IT IS SAS TABLE */
   ALCSEQOFF,ALCSEQLEN=0;
   END SASALC;

 SASOUT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO SAVE INTO A SAS LIBRARY.                  *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN(31,0);
   DCL REC CHAR(80);

   ALCPTR=OUTDDN;
   CALL #DOCMD('ALLOC FI(SASIN) NEW TR SP(1 1) LR(80) BL(400) RECFM(F)
     REUSE','');
   RHRC=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   IF RHRC^=0
     THEN RETURN;
   OPEN FILE(RH_SEQ_INTERNAL) TITLE('SASIN') RECORD OUTPUT;
   I=#CMD('USE OUT',RHPTR,RHHDRPT);
   I=#CMD('TOP',RHPTR,RHHDRPT);
   REC='DATA '××SUBSTR(ALCDDN,1,SUFFIX(ALCDDN,' '))××'.'××ALCMEM××';';
   WRITE FILE(RH_SEQ_INTERNAL) FROM(REC);
   DO RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR)
     REPEAT #SUCC(RHHDRPT,RHPTR,RECPTR) WHILE(RECPTR^=HDPTR);
     REC=RECSTR;
     WRITE FILE(RH_SEQ_INTERNAL) FROM(REC);
     END;
   CLOSE FILE(RH_SEQ_INTERNAL);
   CALL #STACK(''); /* STACK A NULL LINE */
   CALL #DOCMD('%SAS OPTIONS(''SYSIN=SASIN'') LOG(10)','');
   RHRC=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   I=#CMD('X',RHPTR,RHHDRPT);
   IF I^=0
     THEN RHRC=I;
   I=#CMD('USE IN',RHPTR,RHHDRPT);
   IF I^=0
     THEN RHRC=I;
   IF RHRC^=0
     THEN MSGDATA='SAVE UNSUCCESSFUL';
   CALL #DOCMD('FREE FI(SASIN)','');
   END SASOUT;

 SUBRTNE: PROC(ACTION) RETURNS(CHAR(32767) VAR);
 /**********************************************************************
 *                                                                     *
 * THIS SUBRTNE IS PASSED AS A PARAMETER TO THE #DB2PUT ROUTINE.       *
 *                                                                     *
 **********************************************************************/
   DCL ACTION CHAR(*);
   DCL RET CHAR(32767) VAR;
   DCL (STR,CK,TMP) CHAR(256) VAR;
   DCL COMMA CHAR(1) VAR INIT('');
   DCL I FIXED BIN;
   DCL DB2VAL ENTRY(CHAR(*),PTR,PTR,PTR) RETURNS(CHAR(32767) VAR);

   IF ACTION='CREATE'
     THEN RETURN(SUBRTNE_CREATE);
   IF ACTION='NAMES'
     THEN RETURN(SUBRTNE_NAMES);
   IF ACTION='IN'
     THEN RETURN(DBNAME);

   /* CONTROL REACHES HERE ONLY IF ACTION='VALUES' */
   IF RECPTR=RHPTR
     THEN RETURN(''); /* ALL DONE */
   IF RECSEQ>LAST
     THEN RETURN(''); /* ALL DONE */
   I=#CMD('USE NOSYM',RHPTR,RHHDRPT); /* RESOLVE FREE-FORM */
   RET=DB2VAL('',RHHDRPT,RHPTR,RECPTR);
  RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET NEXT RECORD */
  RETURN(RET);
  END SUBRTNE;

 SUBRTNE_CREATE: PROC RETURNS(CHAR(32767) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED FROM SUBRTNE WHEN ACTION='CREATE' FROM #DB2PUT.              *
 *                                                                     *
 **********************************************************************/
   DCL RET CHAR(32767) VAR INIT('');
   DCL COMMA CHAR(1) VAR INIT('');

   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     RET=RET××COMMA××RHNNAME;
     COMMA=',';
     IF RHNTYPE=2 /* TYPE=CHAR? */
       THEN RET=RET××' CHAR('××CALCPRT(RHNLNG)××')';
       ELSE RET=RET××' FLOAT';
     END;
   RETURN(RET);
   END SUBRTNE_CREATE;

 SUBRTNE_NAMES: PROC RETURNS(CHAR(32767) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED FROM SUBRTNE WHEN ACTION='NAMES' FROM #DB2PUT.               *
 *                                                                     *
 **********************************************************************/
   DCL RET CHAR(32767) VAR INIT('');
   DCL COMMA CHAR(1) VAR INIT('');

   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     RET=RET××COMMA××RHNNAME;
     COMMA=',';
     END;
   RETURN(RET);
   END SUBRTNE_NAMES;

  END ABE001;
