 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENTPI */
 /* DENTPI IS DESIGNED TO PROCESS PROGRAMMED INSTRUCTION TEXT.
 THIS IS TEXT INTERSPERSED WITH PROGRAMMED INSTRUCTION LANGUAGE
 (PIL).

 THE DENTPI SUBROUTINE EXPECTS SIX ENTRY POINTS TO BE PASSED TO
 IT WHEN IT IS INVOKED:

 GET(KEY,TXT)
 KEY IS FIXED BIN(31,0), AND WILL BE SET BY DENTPI TO THE LINE
 NUMBER (RELATIVE 1) OF THE LINE IT WANTS RETREIVED.  TXT IS
 CHAR(*) VAR, AND WILL BE SET BY GET TO THE DESIRED LINE.

 PUT(TXT)
 TXT IS CHAR(*) VAR, AND IS THE CHARACTER STRING TO BE WRITTEN
 AT THE TERMINAL BY THE PUT SUBROUTINE.

 DOPRM(PROMPT,ANSWER)
 PROMPT IS CHARACTER(80) VAR, AND IS SET BY DENTPI TO THE TEXT
 TO BE WRITTEN AT THE TERMINAL AS A PROMPTING MESSAGE.
 ANSWER IS CHAR(240) VAR, AND IS SET BY DOPRM TO THE RESPONSE
 FROM THE TERMINAL

 DOCMD(MYCMD,HELPSTR);
 MYCMD IS CHAR(1000) VAR, AND WILL BE SET BY DENTPI TO THE COMMAND
 THAT IS TO BE EXECUTED.  HELPSTR IS CHAR(4) VAR, AND WILL BE SET
 BY DENTPI TO NULL.

 SETL(GBLSW,SYMBOLPM,ANSWER);
 GBLSW IS BIT(1), AND WILL BE SET BY DENTPI TO '1'B.  SYMBOLPM
 IS CHAR(8), AND WILL BE SET TO THE SYMBOLIC VARIABLE NAME
 (INCLUDING THE PRECEDING AMPERSAND) FOR WHICH THE REPLACEMENT
 VALUE IS TO BE SET.  ANSWER IS THE REPLACEMENT VALUE TO BE
 ASSOCIATED WITH THE SYMBOLIC VARIABLE.

 REP(REPBUF)
 REPBUF IS A STRUCTURE AS FOLLOWS:

      DCL 1 REPBUF,
           2 BUFLEN FIXED BIN(15,0),
           2 OFFSET FIXED BIN(15,0),
           2 BF CHAR(1024);

 BUFLEN IS SET TO THE LENGTH OF THE TEXT IN BF PLUS 4.  OFFSET
 IS SET TO 0, AND BF CONTAINS THE TEXT IN WHICH REPLACEMENTS
 FOR SYMBOLIC VARIABLES IS TO BE MADE.

 STAK(CMD)
 CMD IS CHAR(*) VAR, AND CONTAINS A COMMAND TO BE STACKED ON THE
 COMMAND STACK.
 */
 DENTPI:  PROC(GET,PUT,DOPRM,DOCMD,REP,SETL,STAK,KEY,LABI,LABTAB,CTLSW,
               TSOCMD,RHHDRPT,SUBENT,RHPTR) OPTIONS(REENTRANT);
         DCL (GET,PUT,DOPRM,DOCMD,REP,SETL,STAK,TSOCMD) ENTRY;
         % DCL @PROCNAME CHAR;
         % @PROCNAME='';
         % INCLUDE DENTSUB;
         DCL SUFFIX ENTRY(CHAR(*),CHAR(*))
           RETURNS(FIXED BIN(15,0));
         DCL (KEY,LABI) FIXED BIN(31,0) UNALIGNED;
         DCL CTLSW BIT(1);
         DCL GBLSW BIT(1) STATIC INIT('0'B);
         DCL SYMBOLPM CHAR(8);
         DCL GOTOSW BIT(1) INIT('0'B);
         DCL $LABSAV CHAR(80) VAR;
         DCL PROMPT CHAR(80) VAR STATIC INIT(':');
         DCL ANSWER CHAR(240) VAR;
         DCL MYCMD CHAR(1024) VAR;
         DCL SETTXT CHAR(256) VAR;
         DCL HELPSTR CHAR(4) VAR INIT('');
         DCL (TXT,SAVTXT) CHAR(1024) VAR;
         DCL TRUE BIT(1);
         DCL 1 REPBUF,
           2 BUFLEN FIXED BIN(15,0),
           2 OFFSET FIXED BIN(15,0),
           2 BF CHAR(1024);
         DCL 1 MARSTR UNALIGNED,
           2 MMDINDX FIXED BIN(15,0) INIT(0),
           2 MPERCK BIT(16),
           2 MUOTCK BIT(16),
           2 MARY(16) CHAR(256) VAR,
           2 MUMCKA(24) BIT(16) INIT((24)(1)'0'B),
           2 CMDTAB(24) CHAR(8) VAR INIT(
             '$LI','$','$GOTO','$ANS','$SETL','$CMD','$IF','$STACK',
             '$SETQUOT','$*','$INCR','$DECR','$CONTROL','$WRITE',
             '$XLATE','$TSO','$FULLSCR','$SETO','$SETD','$CURSOR',
             '$GETMK','$STORE','$DISPLAY','$CLEAR');
         DCL DENTPRS ENTRY(CHAR(*) VAR,);
         DCL SETCAPS ENTRY;
         DCL 1 LABTAB(256) UNALIGNED,
           2 $KEY FIXED BIN,
           2 $LAB CHAR(8);
         DCL (TRH,TR) PTR;
         DCL 1 PICLED CONTROLLED,
           2 (PLUSSW,NLSW) BIT(1) INIT('0'B);
         IF ALLOCATION(PICLED)=0
           THEN ALLOCATE PICLED;
         ON CONDITION(EOF) GO TO EOJ;
         $CNT = 0;
         DO FOREVER=1 REPEAT FOREVER;
           IF $CNT>0
             THEN DO $CNT=$CNT TO 1 BY -1;
               TXT = MYGET;
               IF ^GOTOSW
                 THEN CALL PUT(TXT);
               END;
           TXT = MYGET;
           IF SUBSTR(TXT,1,1)^='$'
             THEN IF NLSW
               THEN TXT='$CMD NL '××TXT;
               ELSE IF CTLSW
                 THEN TXT='$CMD '××TXT;
                 ELSE TXT='$WRITE '××TXT;
           SAVOP = MMDINDX;
           SAVTXT=TXT;
           CALL DENTPRS(TXT,MARSTR);
           IF ^GOTOSW × (GOTOSW & (MMDINDX=2 × MMDINDX=1))
             THEN SELECT(MMDINDX);
               WHEN(0) SIGNAL ERROR;
               WHEN(1) $CNT=MARY(2); /* $LI */
               WHEN(2) DO; /* $ */
                 IF LABI = 0
                   THEN I = 1;
                   ELSE DO I = 1 TO LABI WHILE($LAB(I)^=MARY(2));
                       END;
                 IF I <= LABI
                   THEN LEAVE; /* ALREADY GOT THIS LABEL */
                 LABI = LABI + 1;
                 IF LABI > 256
                   THEN SIGNAL ERROR;
                 $KEY(LABI) = KEY;
                 $LAB(LABI)=MARY(2);
                 IF GOTOSW
                   THEN IF MARY(2)=$LABSAV
                     THEN GOTOSW = '0'B;
                 END;
               WHEN(3) CALL GOTO(MARY(2)); /* $GOTO */
               WHEN(4) DO; /* $ANS */
                 IF SAVOP ^= 4 /* WAS LAST STMT OTHER THAN $ANS? */
                   THEN DO;
                     CALL DOPRM(PROMPT,ANSWER);
                     IF ANSWER='??' × ANSWER='$$'
                       THEN RETURN;
                     SETTXT=ANSWER;
                     SYMBOLPM='&'××'ANSWER';
                     CALL SETL(GBLSW,SYMBOLPM,SETTXT);
                     END;
                 IF MARY(2) = ANSWER
                   THEN CALL GOTO(MARY(3));
                 END;
               WHEN(5) DO; /* $SETL */
                 CALL SETCAPS(MARY(2));
                 SYMBOLPM='&'××MARY(2);
                 A=INDEX(SAVTXT,' '); /* FINDS BLANK AFTER $SETL */
                 B=INDEX(SUBSTR(SAVTXT,A+1),' ')+A; /*FINDS BLANK
                   AFTER <LABEL> */
                 IF B=A
                   THEN SETTXT='';
                   ELSE DO;
                     C=MAX(B,SUFFIX(SAVTXT,' ')); /* FINDS LAST
                       NONBLANK */
                     SETTXT=SUBSTR(SAVTXT,B+1,C-B);
                     END;
                 CALL SETL(GBLSW,SYMBOLPM,SETTXT);
                 END;
               WHEN(6) DO; /* $CMD */
                 MYCMD = SUBSTR(SAVTXT,6);
                 CALL DOCMD(MYCMD,HELPSTR);
                 END;
               WHEN(16) DO; /* $TSO */
                 MYCMD = SUBSTR(SAVTXT,6);
                 CALL TSOCMD(MYCMD,HELPSTR);
                 END;
               WHEN(7) DO; /* $IF */
                 TRUE = '0'B;
                 SELECT(MARY(3));
                   WHEN('=')  IF MARY(2) =  MARY(4) THEN TRUE='1'B;
                   WHEN('^=') IF MARY(2) ^= MARY(4) THEN TRUE='1'B;
                   WHEN('<')  IF MARY(2) <  MARY(4) THEN TRUE='1'B;
                   WHEN('>')  IF MARY(2) >  MARY(4) THEN TRUE='1'B;
                   WHEN('<=') IF MARY(2) <= MARY(4) THEN TRUE='1'B;
                   WHEN('>=') IF MARY(2) >= MARY(4) THEN TRUE='1'B;
                   OTHERWISE DO;
                     TXT='ERROR IN $IF STATEMENT - MISSING OPERAND';
                     CALL PUT(TXT);
                     TXT='PROCESSING CONTINUES AFTER $IF STATEMENT';
                     CALL PUT(TXT);
                     END;
                   END;
                 IF TRUE
                   THEN CALL GOTO(MARY(5));
                 END;
               WHEN(8) DO; /* $STACK */
                 MYCMD=SUBSTR(SAVTXT,8);
                 CALL STAK(MYCMD);
                 END;
               WHEN(9) /* $SETQUOT */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(10); /* $* */
               WHEN(11,12) /* $INCR,$DECR */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(13) DO;  /* $CONTROL */
                 DO I=2 TO 16 WHILE(MARY(I)^='');
                   CALL SETCAPS(MARY(I));
                   SELECT(MARY(I));
                     WHEN('WRITE')  DO;
                       CTLSW = '0'B;
                       NLSW='0'B;
                       END;
                     WHEN('COMMAND') DO;
                       CTLSW = '1'B;
                       NLSW='0'B;
                       END;
                     WHEN('PLUS')   PLUSSW = '1'B;
                     WHEN('NOPLUS') PLUSSW = '0'B;
                     WHEN('NL') DO;
                       CTLSW='0'B;
                       NLSW='1'B;
                       END;
                     OTHERWISE SIGNAL ERROR;
                     END;
                   END;
                 END;
               WHEN(14) DO;  /* $WRITE */
                 TXT = SUBSTR(SAVTXT,8);
                 IF ^GOTOSW
                   THEN CALL PUT(TXT);
                 END;
               WHEN(15) /* $XLATE */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(17)  /* $FULLSCR */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(18) /* $SETO <PANEL> <FLDNO> <VALUE> */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(19) /* $SETD */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(20) /* $CURSOR <PANEL> <POS> */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(21) /* $GETMK <NUMBER> <LABEL> <NAME> */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(22) /* $STORE <PANEL> DUP() LIST LINE() MASK*/
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(23) /* $DISPLAY <PANEL> DUP() LIST LINE() */
                 CALL DOCMD(SAVTXT,HELPSTR);
               WHEN(24) /* $CLEAR <PANEL> */
                 CALL DOCMD(SAVTXT,HELPSTR);
               OTHERWISE;
               END;
           END;
 GOTO:  PROC(PRM);
        DCL PRM CHAR(256) VAR;
         $LABSAV = PRM;
         DO I=1 REPEAT I+1 WHILE(I<=LABI)
           UNTIL($LAB(I)=$LABSAV);
           END;
         IF I <= LABI
           THEN KEY = $KEY(I);
           ELSE GOTOSW = '1'B;
         END GOTO;
 MYGET: PROC RETURNS(CHAR(1024) VAR) RECURSIVE;
         DCL TXT CHAR(1024) VAR;
         KEY = KEY + 1;
         CALL GET(KEY,TXT);
         IF LENGTH(TXT)=0
           THEN SIGNAL CONDITION(EOF);
         IF INDEX(TXT,'&')^=0
           THEN DO;
             BUFLEN = LENGTH(TXT)+4;
             OFFSET = 0;
             BF=TXT;
             CALL REP(REPBUF);
             TXT = SUBSTR(BF,1,BUFLEN-4);
             END;
         IF LENGTH(TXT)>0
           THEN TXT=SUBSTR(TXT,1,SUFFIX(TXT,' '));
         IF (LENGTH(TXT)>0) & PLUSSW
           THEN IF SUBSTR(TXT,LENGTH(TXT),1)='+'
             THEN TXT=SUBSTR(TXT,1,LENGTH(TXT)-1)××' '××MYGET;
         IF LENGTH(TXT)=0
           THEN TXT=' ';
         RETURN(TXT);
         END MYGET;
 EOJ:
         END;
