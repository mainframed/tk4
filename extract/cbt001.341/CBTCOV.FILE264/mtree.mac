 MTREE: PROC(PARM) OPTIONS(MAIN);
 /**********************************************************************
 *                                                                     *
 * THIS PROGRAM WAS WRITTEN TO ILLUSTRATE THE CORRECTNESS OF           *
 * ALGORITHMS USED TO MAINTAIN AN M-WAY B TREE.                        *
 *                                                                     *
 **********************************************************************/
   DCL PARM CHAR(100) VAR;
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL NULL BUILTIN;
   DCL 1 NODE BASED(NODEPTR),
     2 PARENT PTR,
     2 NODECNT FIXED BIN,
     2 CHILDMAX FIXED BIN,
     2 NODEARY(0:M REFER(CHILDMAX)),
      3 ADRS PTR,
      3 KEYS FIXED BIN;
   DCL TREEROOT PTR;
   DCL NEGINF FIXED BIN(31,0) STATIC INIT(-2147483648),
       POSINF FIXED BIN(31,0) STATIC INIT(+2147483647);
   DCL TRACE FILE STREAM OUTPUT PRINT;

   OPEN FILE(TRACE) LINESIZE(70);
   TREEROOT=NULL;
   IF PARM=''
     THEN M=5; /* DEFAULT TO 5-WAY TREE */
     ELSE M=PARM;

   ON ENDFILE(IN) GOTO EOJ;
   DO FOREVER=1 REPEAT FOREVER;
     ADD,DEL,SHO=NEGINF;
     GET FILE(IN) DATA(ADD,DEL,SHO);
     PUT FILE(TRACE) SKIP DATA(ADD,DEL,SHO);
     SELECT;
       WHEN(ADD^=NEGINF) CALL INSERTB(TREEROOT,ADD);
       WHEN(DEL^=NEGINF) CALL DELETEB(TREEROOT,DEL);
       WHEN(SHO^=NEGINF) DO;
         PUT FILE(TRACE) PAGE;
         CALL DISPLAY(TREEROOT,TRACE);
         PUT FILE(TRACE) PAGE;
         END;
       OTHERWISE;
       END; /* SELECT */
     END;
 EOJ:;

1DELETEB: PROC(T,X);
 /**********************************************************************
 *                                                                     *
 * DELETE X FROM THE B-TREE T, OF ORDER M.                             *
 *                                                                     *
 **********************************************************************/
   DCL (P,Q,T,Y,Z) PTR;
   DCL (I,J,K,R,W,X) FIXED BIN;

   CALL MSEARCH(T,X,P,I,J); /* P IS NODE FOR DELETION */
   IF J^=1
     THEN RETURN; /* X NOT IN T */
   IF P->ADRS(0)^=NULL
     THEN DO; /* DELETION FROM NON LEAF, FIND KEY AND MOVE UP */
       Q=P->ADRS(1);
       DO FOREVER=1 REPEAT FOREVER;
         IF Q->ADRS(0)=NULL
           THEN LEAVE; /* Q IS A LEAF NODE */
         Q=Q->ADRS(0);
         END;
       P->KEYS(1)=Q->KEYS(1);
       /* WRITE ALTERED NODE P ONTO DISK */
       P=Q;
       I=1;
       END;
   /* DELETE KEYS(1) FROM NODE P, WHICH IS A LEAF */
   /* FROM P, DELETE (KEYS(I),ADRS(I)) AND REPLACE N BY N-1 */
   DO J=I TO P->NODECNT-1;
     P->KEYS(J)=P->KEYS(J+1);
     P->ADRS(J)=P->ADRS(J+1);
     END;
   P->NODECNT=P->NODECNT-1;
   P->KEYS(P->NODECNT+1)=POSINF;
1  DO WHILE(P^=T & P->NODECNT<FIXED(CEIL(FLOAT(M)/2.0))-1);
     /* NOW CHECK FOR THE NEAREST RIGHT SIBLING OF P */
     J=SIBLING(T,P,'RIGHT'); /* GET RIGHT SIBLING, IF ANY */
     IF J>=0
       THEN DO; /* THERE IS A RIGHT SIBLING */
         Z=P->PARENT;  /* Z POINTS TO PARENT */
         Y=Z->ADRS(J); /* Y POINTS TO RIGHT SIBLING */
         IF Y->NODECNT>=FIXED(CEIL(FLOAT(M)/2.0))
           THEN DO; /* REDISTRIBUTE KEY VALUES */
             /* UPDATE P */
             P->KEYS(P->NODECNT+1)=Z->KEYS(J);
             P->ADRS(P->NODECNT+1)=Y->ADRS(0);
             CALL RESOLVE_PARENT(P,P->ADRS(P->NODECNT+1));
             P->NODECNT=P->NODECNT+1;
             P->KEYS(P->NODECNT+1)=POSINF;
             /* UPDATE Z */
             Z->KEYS(J)=Y->KEYS(1);
             /* UPDATE Y */
             Y->NODECNT=Y->NODECNT-1;
             DO W=0 TO Y->NODECNT;
               Y->ADRS(W)=Y->ADRS(W+1);
               IF W>0
                 THEN Y->KEYS(W)=Y->KEYS(W+1);
               END;
             Y->KEYS(Y->NODECNT+1)=POSINF;
             /* WRITE NODES P, Z AND Y ONTO DISK */
             RETURN;
             END;
         /* COMBINE P, Z->KEYS(J), AND Y */
         R=2*FIXED(CEIL(FLOAT(M)/2.0))-2;
         P->KEYS(P->NODECNT+1)=Z->KEYS(J);
         P->ADRS(P->NODECNT+1)=Y->ADRS(0);
         CALL RESOLVE_PARENT(P,P->ADRS(P->NODECNT+1));
         DO W=1 TO Y->NODECNT;
           P->KEYS(P->NODECNT+1+W)=Y->KEYS(W);
           P->ADRS(P->NODECNT+1+W)=Y->ADRS(W);
           CALL RESOLVE_PARENT(P,P->ADRS(P->NODECNT+1+W));
           END;
         P->NODECNT=R;
         P->KEYS(P->NODECNT+1)=POSINF;
         FREE Y->NODE;
         /* UPDATE PARENT */
         IF J<Z->NODECNT-1
           THEN DO W=J TO Z->NODECNT-1;
             Z->KEYS(W)=Z->KEYS(W+1);
             Z->ADRS(W)=Z->ADRS(W+1);
             END;
         Z->NODECNT=Z->NODECNT-1;
         Z->KEYS(Z->NODECNT+1)=POSINF;
         P=Z;
         END;
1      ELSE DO; /* THERE IS A LEFT SIBLING */
         J=SIBLING(T,P,'LEFT'); /* GET INDEX TO LEFT SIBLING */
         IF J<0
           THEN SIGNAL ERROR; /* SHOULDN'T HAPPEN */
         Z=P->PARENT;  /* Z POINTS TO PARENT */
         Y=Z->ADRS(J); /* Y POINTS TO LEFT SIBLING */
         IF Y->NODECNT>=FIXED(CEIL(FLOAT(M)/2.0))
           THEN DO; /* REDISTRIBUTE KEY VALUES */
             /* UPDATE P */
             IF NODECNT>0
               THEN DO W=P->NODECNT+1 TO 2 BY -1;
                 P->KEYS(W)=P->KEYS(W-1);
                 P->ADRS(W)=P->ADRS(W-1);
                 END;
             P->KEYS(1)=Z->KEYS(J);
             P->ADRS(1)=P->ADRS(0);
             P->ADRS(0)=Y->ADRS(NODECNT);
             CALL RESOLVE_PARENT(P,P->ADRS(0));
             P->NODECNT=P->NODECNT+1;
             P->KEYS(P->NODECNT+1)=POSINF;
             /* UPDATE Z */
             Z->KEYS(J)=Y->KEYS(Y->NODECNT);
             /* UPDATE Y */
             Y->NODECNT=Y->NODECNT-1;
             Y->KEYS(Y->NODECNT+1)=POSINF;
             /* WRITE NODES P, Z AND Y ONTO DISK */
             RETURN;
             END;
         /* COMBINE P, Z->KEYS(J), AND Y */
         R=2*FIXED(CEIL(FLOAT(M)/2.0))-2;
         DO W=R TO P->NODECNT BY -1;
           P->KEYS(W)=P->KEYS(W-1);
           P->ADRS(W)=P->ADRS(W-1);
           END;
         P->KEYS(P->NODECNT)=Z->KEYS(J);
         P->ADRS(P->NODECNT)=P->ADRS(0);
         DO W=0 TO Y->NODECNT;
           P->KEYS(W)=Y->KEYS(W);
           P->ADRS(W)=Y->ADRS(W);
           CALL RESOLVE_PARENT(P,P->ADRS(W));
           END;
         P->NODECNT=R;
         P->KEYS(P->NODECNT+1)=POSINF;
         FREE Y->NODE;
         /* UPDATE PARENT */
         IF J<Z->NODECNT-1
           THEN DO W=J TO Z->NODECNT-1;
             Z->KEYS(W)=Z->KEYS(W+1);
             Z->ADRS(W)=Z->ADRS(W+1);
             END;
         Z->NODECNT=Z->NODECNT-1;
         Z->KEYS(Z->NODECNT+1)=POSINF;
         P=Z;
         END;
     END;
1  /* IF P->NODECNT^=0 THEN OUTPUT TO DISK */
   IF P->NODECNT=0
     THEN DO;
       T=P->ADRS(0);
       IF T^=NULL
         THEN T->PARENT=NULL;
       FREE P->NODE;
       END;
   END DELETEB;

1DISPLAY: PROC(T,TRACE) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DISPLAY THE B-TREE.                                       *
 *                                                                     *
 **********************************************************************/
   DCL T PTR;
   DCL TRACE FILE;
   DCL I FIXED BIN;

   NODEPTR=T;
   PUT FILE(TRACE) SKIP DATA(NODEPTR,PARENT,NODECNT);
   PUT FILE(TRACE) SKIP DATA(ADRS);
   PUT FILE(TRACE) SKIP DATA(KEYS);
   DO I=0 TO NODECNT;
     IF ADRS(I)^=NULL
       THEN DO;
         CALL DISPLAY(ADRS(I),TRACE);
         NODEPTR=T; /* RESTORE ADDRESSIBILITY */
         END;
     END;
   END DISPLAY;

1INSERTB: PROC(T,X);
 /**********************************************************************
 *                                                                     *
 * KEY VALUE X IS INSERTED INTO THE B-TREE, T, OF ORDER M.             *
 *                                                                     *
 **********************************************************************/
   DCL (A,P,PP,R,S,T,Z) PTR;
   DCL (I,J,K,W,X,Y) FIXED BIN;

   A=NULL;
   K=X; /* (K,A) IS TUPLE TO BE INSERTED */
   CALL MSEARCH(T,K,P,I,J); /* P IS NODE FOR INSERTION */
   IF J^=0
     THEN RETURN; /* X ALREADY IN T */
   DO WHILE(P^=NULL);
     /* INSERT (K,A) INTO APPROPRIATE POSITION IN P */
     DO W=P->NODECNT+1 TO I+2 BY -1;
       P->ADRS(W)=P->ADRS(W-1);
       P->KEYS(W)=P->KEYS(W-1);
       END;
     P->ADRS(I+1)=A;
     CALL RESOLVE_PARENT(P,A);
     P->KEYS(I+1)=K;
     P->NODECNT=P->NODECNT+1;
     IF P->NODECNT<=M-1
       THEN DO; /* GET OUT, RESULTING NODE IS NOT TOO LARGE */
         P->KEYS(P->NODECNT+1)=POSINF;
         RETURN;
         END;
1    /* P IS TOO LARGE - ROTATION OR SPLIT IS NECESSARY */
     J=SIBLING(T,P,'RIGHT'); /* GET RIGHT SIBLING INDEX */
     IF J>=0
       THEN DO; /* THERE IS A RIGHT SIBLING */
         Z=P->PARENT; /* Z=PTR TO PARENT */
         S=Z->ADRS(J); /* S=PTR TO RIGHT SIBLING */
         IF S->NODECNT<M-1
           THEN DO; /* A ROTATION IS POSSIBLE */
             DO W=S->NODECNT TO 1 BY -1;
               S->KEYS(W+1)=S->KEYS(W);
               S->ADRS(W+1)=S->ADRS(W);
               END;
             S->ADRS(1)=S->ADRS(0);
             S->KEYS(1)=Z->KEYS(J);
             S->ADRS(0)=P->ADRS(P->NODECNT);
             CALL RESOLVE_PARENT(S,S->ADRS(0));
             Z->KEYS(J)=P->KEYS(P->NODECNT);
             S->NODECNT=S->NODECNT+1;
             S->KEYS(S->NODECNT+1)=POSINF;
             P->NODECNT=P->NODECNT-1;
             P->KEYS(P->NODECNT+1)=POSINF;
             RETURN;
             END;
         END;
       ELSE DO; /* THERE MAY BE A LEFT SIBLING */
         J=SIBLING(T,P,'LEFT'); /* GET LEFT SIBLING INDEX */
         IF J<0
           THEN LEAVE; /* NO SIBLING - DO A SPLIT */
         Z=P->PARENT; /* Z=PTR TO PARENT */
         S=Z->ADRS(J); /* S=PTR TO LEFT SIBLING */
         IF S->NODECNT<M-1
           THEN DO; /* A ROTATION IS POSSIBLE */
             S->ADRS(S->NODECNT+1)=P->ADRS(0);
             CALL RESOLVE_PARENT(S,S->ADRS(S->NODECNT+1));
             S->KEYS(S->NODECNT+1)=Z->KEYS(J);
             Z->KEYS(J)=P->KEYS(1);
             P->ADRS(0)=P->ADRS(1);
             DO W=1 TO P->NODECNT-1;
               P->KEYS(W)=P->KEYS(W+1);
               P->ADRS(W)=P->ADRS(W+1);
               END;
             S->NODECNT=S->NODECNT+1;
             S->KEYS(S->NODECNT+1)=POSINF;
             P->NODECNT=P->NODECNT-1;
             P->KEYS(P->NODECNT+1)=POSINF;
             RETURN;
             END;
         END;
1    Y=P->KEYS(FIXED(CEIL(FLOAT(M)/2.0))); /* SAVE MIDDLE KEY */
     ALLOCATE NODE SET(PP);
     PP->PARENT=P->PARENT;
     PP->NODECNT=M-FIXED(CEIL(FLOAT(M)/2.0));
     PP->KEYS(0)=NEGINF;
     PP->ADRS(0)=P->ADRS(FIXED(CEIL(FLOAT(M)/2.0)));
     DO W=1 TO PP->NODECNT;
       PP->KEYS(W)=P->KEYS(FIXED(CEIL(FLOAT(M)/2.0))+W);
       PP->ADRS(W)=P->ADRS(FIXED(CEIL(FLOAT(M)/2.0))+W);
       END;
     DO W=0 TO PP->NODECNT;
       CALL RESOLVE_PARENT(PP,PP->ADRS(W));
       END;
     P->NODECNT=FIXED(CEIL(FLOAT(M)/2.0))-1;
     PP->KEYS(PP->NODECNT+1)=POSINF;
     P->KEYS(P->NODECNT+1)=POSINF;
     K=Y; /* RESET K */
     A=PP;
     P=P->PARENT;
     /* NOW RESET I, WHICH IS THE INSERTION POINT IN CURRENT NODE */
     IF P^=NULL
       THEN DO I=0 REPEAT I+1 UNTIL(P->KEYS(I)<K & K<P->KEYS(I+1));
         END;
     END;
   /* NEW ROOT IS TO BE CREATED */
   ALLOCATE NODE SET(R);
   R->PARENT=NULL;
   R->NODECNT=1;
   R->ADRS(0)=T;
   R->KEYS(0)=NEGINF;
   R->ADRS(1)=A;
   R->KEYS(1)=K;
   R->KEYS(2)=POSINF;
   T=R;
   DO I=0 TO T->NODECNT;
     CALL RESOLVE_PARENT(T,T->ADRS(I));
     END;
   END INSERTB;

1MSEARCH: PROC(T,X,P,I,J);
 /**********************************************************************
 *                                                                     *
 * SEARCH THE M-WAY SEARCH TREE T FOR THE KEY VALUE X.  INDIVIDUAL     *
 * NODE FORMAT IS N,A0,(K1,A1),...(KN,AN), N<M.  A TRIPLE (P,I,J) IS   *
 * RETURNED.  J=1 IMPLIES X IS FOUND AT NODE P, KEY K(I).  ELSE J=0    *
 * AND P IS THE NODE INTO WHICH X CAN BE INSERTED.                     *
 *                                                                     *
 **********************************************************************/
   DCL (A,P,Q,T) PTR;
   DCL (I,J,K,X) FIXED BIN;

   P=T;
   Q=NULL; /* Q IS PARENT OF P */
   J=1; /* DEFAULT TO X FOUND */
   DO WHILE(P^=NULL);
     DO I=0 REPEAT I+1 UNTIL(P->KEYS(I)<=X & X<P->KEYS(I+1));
       END;
     IF X=P->KEYS(I)
       THEN RETURN; /* X HAS BEEN FOUND */
     Q=P;
     P=P->ADRS(I);
     END;
   /* X NOT IN T; RETURN NODE INTO WHICH INSERTION CAN TAKE PLACE */
   P=Q;
   J=0; /* INDICATE X NOT FOUND */
   END MSEARCH;

1RESOLVE_PARENT: PROC(T,A);
 /**********************************************************************
 *                                                                     *
 * CALLED TO ENSURE CORRECT PARENT LINKAGE BETWEEN PARENT T AND CHILD  *
 * A.                                                                  *
 *                                                                     *
 **********************************************************************/
   DCL (A,T) PTR;

   IF A^=NULL
     THEN A->PARENT=T;
   END RESOLVE_PARENT;

 SIBLING: PROC(T,P,BRANCH) RETURNS(FIXED BIN);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE EITHER THE RIGHT OR LEFT SIBLING OF A GIVEN NODE P.*
 *                                                                     *
 **********************************************************************/
   DCL (P,T) PTR;
   DCL I FIXED BIN;
   DCL BRANCH CHAR(*);

   IF P=NULL
     THEN SIGNAL ERROR; /* SHOULDN'T HAPPEN */
   IF P->PARENT=NULL
     THEN RETURN(-1); /* IT IS ROOT, WHICH CAN'T HAVE A SIBLING */
   DO I=0 TO P->PARENT->NODECNT WHILE(P->PARENT->ADRS(I)^=P);
     END;
   IF I>P->PARENT->NODECNT
     THEN SIGNAL ERROR; /* SHOULDN'T HAPPEN */
   IF BRANCH='LEFT'
     THEN IF I=0
       THEN RETURN(-1); /* THERE IS NO LEFT SIBLING */
       ELSE RETURN(I-1);/* RETURN INDEX TO LEFT SIBLING */
     ELSE IF I=P->PARENT->NODECNT
       THEN RETURN(-1); /* THERE IS NO RIGHT SIBLING */
       ELSE RETURN(I+1);/* RETURN INDEX TO RIGHT SIBLING */
   END SIBLING;

   END MTREE;
