 DENT49S: PROC(RHPTR,SUBENT,RHHDRPT,SUBRTNES,D)
   OPTIONS(REENTRANT);
 /**********************************************************************
 *                                                                     *
 * CALLED TO EXECUTE THE ORDER-BY CLAUSE. D POINTS TO SELECT_HTEXT     *
 * CONTROL BLOCK.                                                      *
 *                                                                     *
 **********************************************************************/
   % DCL @PROCNAME CHAR;
   % @PROCNAME='';
   % INCLUDE DENTSUB;
   % INCLUDE DENTSEL;
   HALT;
   DCL (C,D) PTR;
   DCL (T,TMPPTR,SAVCUR,SAVNXT,FPTR,LPTR) PTR;
   DCL 1 SARYSTR BASED(SARYPTR),
     2 SARYBND FIXED BIN(15,0),
     2 SARY(N REFER (SARYBND)) PTR;
   DCL LAST FIXED BIN(31,0) INIT(99999999);
   DCL FREESW BIT(1) INIT('0'B);
   FPTR,LPTR=HDPTR;
   SAVCUR=HDPTR;
   N=0;
   DO RECPTR=FPTR->NXTHDR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
     N=N+1;
     END;
   IF N<2
     THEN DO;
       RHRC=0;
       RETURN;
       END;
   ALLOCATE SARYSTR;
   DO C=RHUSEHD REPEAT C->RHNLINK WHILE(C^=NULL);
     IF C->RHNPOS=0
       THEN FREESW='1'B; /* THESE ARE FREE-FORM FIELDS */
     C->RHNCPOS=C->RHNPOS;
     C->RHNCLNG=C->RHNLNG;
     END;
   J=0;
   DO RECPTR=FPTR->NXTPTR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
     J=J+1;
     SARY(J)=RECPTR;
     END;
   M=N;
   DO M=M/2 REPEAT M/2 WHILE(M^=0);
     K=N-M;
     DO J=1 REPEAT J+1 WHILE(J <= K);
       I = J;
       DO L=I+M REPEAT I+M WHILE(^SORTED) UNTIL(I<1);
         T=SARY(I);
         SARY(I)=SARY(L);
         SARY(L)=T;
         I=I-M;
         END;
       END;
     END;
   SARY(1)->LSTPTR=FPTR;
   FPTR->NXTPTR=SARY(1);
   SARY(N)->NXTPTR=LPTR;
   LPTR->LSTPTR=SARY(N);
   SARY(1)->NXTPTR=SARY(2);
   SARY(N)->LSTPTR=SARY(N-1);
   DO J = 2 TO N-1;
     SARY(J)->LSTPTR=SARY(J-1);
     SARY(J)->NXTPTR=SARY(J+1);
     END;
   FREE SARYSTR;
   IF SAVCUR=HDPTR
     THEN SAVCUR=NXTHDR;
   CALL #NC(RHPTR,SUBENT,SAVCUR); /* CALL DENTNC */
   CALL #RESEQ(RHPTR,SUBENT,HDPTR,'NOSAVE','RENUM',LAST,RHPPTR   )
     ;  /* CALL RESEQ */
   SAVEFLAG = '1'B;
   RHRC = 0;
 SORTED:  PROC RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE RECORDS POINTED TO BY SARY(I) AND        *
 * SARY(L) ARE IN COLLATING SEQUENCE.  RETURNS '0'B IF NOT.            *
 *                                                                     *
 **********************************************************************/
   DCL (A,B,C,E) PTR;
   DCL (J,K) FIXED BIN(15,0);
   DCL (CA,CB) CHAR(256) VAR;
   A=ADDR(SARY(I)->RECLEN);
   B=ADDR(SARY(L)->RECLEN);
   DO E=D->ORDER_BY_PTR REPEAT E->ORDER_LIST_PTR WHILE(E^=NULL);
     DO C=RHUSEHD REPEAT C->RHNLINK WHILE(C^=NULL)
       UNTIL(C->RHNNAME=E->ORDER_NAME->TOKSTR);
       END;
     IF C=NULL
       THEN J=0; /* MATCH ON MISSING VALUES */
       ELSE IF ^FREESW
         THEN J=SIGNUM(C,A,B); /* COMPARE FIXED-FORMAT FIELDS */
         ELSE DO; /* COMPARE FREE-FORM FIELDS */
           RECPTR=SARY(I);
           K=#CMD('USE NOSYM',RHPTR,SUBENT,RHHDRPT);
             /* GO SET VARIABLE OFFSETS AND LENGTHS FOR RECORD */
           CA=GETFIELD(C,A);
           RECPTR=SARY(L);
           K=#CMD('USE NOSYM',RHPTR,SUBENT,RHHDRPT);
             /* GO SET VARIABLE OFFSETS AND LENGTHS FOR RECORD */
           CB=GETFIELD(C,B);
           J=SIGNUM_COMMON(CA,CB,C,C);
           END;
     IF J^=0
       THEN IF E->ORDER_ASCENDING
         THEN IF J>0
           THEN RETURN('0'B); /* OUT OF SEQUENCE */
           ELSE RETURN('1'B); /* SEQUENCE OK */
         ELSE IF J<0
           THEN RETURN('0'B); /* OUT OF SEQUENCE */
           ELSE RETURN('1'B); /* SEQUENCE OK */
     END;
   RETURN('1'B);
   END SORTED;
   END DENT49S;
