 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABEDIS IS CALLED WHENEVER THE DISPLAY IS TO BE REFORMATTED.         *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABEDIS) PARMS(RHPPTR);
   %INCLUDE ABESUBA;
   % INCLUDE ABEPNL;
   DCL L FIXED BIN(31,0);
   DCL 1 RHPASTR BASED(RHPAREAP),
     2 RHPALEN FIXED BIN(31,0),
     2 RHPAREA(L REFER(RHPALEN)) CHAR(256);
   DCL TERMCTL ENTRY;
   DCL STFSMOD ENTRY(CHAR(*),CHAR(*),FIXED BIN(15,0))
     RETURNS(FIXED BIN(15,0));
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL SBACONV ENTRY;
   DCL WRKSBAB FIXED BIN(15,0),
       WRKSBA CHAR(2) DEF WRKSBAB;
   DCL (IP,OP,SAVEPTR) PTR;
   DCL (IOFF,OOFF,SBA) FIXED BIN(31,0) INIT(0);

   IF RHPAREAP^=NULL
     THEN FREE RHPASTR;

   CALL TERMCTL('GTSIZE',TRET,PSCREENLEN,PLINESIZE);
   IF PSCREENLEN=0
     THEN HARDCOPY='1'B;
   IF HARDCOPY
     THEN DO;
       PSCREENLEN=24;
       PLINESIZE=80;
       END;
     ELSE DO;
       J=STFSMOD('ON','INITIAL=YES',0);
       STFSMODE='1'B;
       END;
   I=ABS(RHPFRACT)+1;
   SELECT;
     WHEN(RHPFRACT=0) DO; /* LOGICAL = PHYSICAL LINESIZE */
       SCREENLEN=PSCREENLEN;
       LINESIZE=PLINESIZE;
       END;
     WHEN(RHPFRACT<0) DO; /* LOGICAL < PHYSICAL LINESIZE */
       LINESIZE=PLINESIZE/I;
       IF LINESIZE<(RHPMAXLN+3)
         THEN DO;
           LINESIZE=RHPMAXLN+3;
           I=PLINESIZE/LINESIZE;
           RHPFRACT=1-I;
           END;
       SCREENLEN=PSCREENLEN*I;
       END;
     OTHERWISE DO;        /* LOGICAL > PHYSICAL LINESIZE */
       DO UNTIL(SCREENLEN>5);
         SCREENLEN=PSCREENLEN/I-(MOD(PSCREENLEN,I)^=0);
         IF SCREENLEN<6
           THEN DO;
             I=PSCREENLEN/6;
             IF MOD(PSCREENLEN,I)^=0
               THEN I=PSCREENLEN/7;
             RHPFRACT=I-1;
             END;
         END;
       LINESIZE=PLINESIZE*I;
       END;
     END; /* SELECT */
   SCRSIZE=PSCREENLEN*PLINESIZE;

   D=SCREENLEN-5;       /* NUMBER LOGICAL DATA LINES */
   LL=LINESIZE-1+4;     /* HEADER AND DATA LINE LENGTHS */
   F=5+2*D;             /* NUMBER OF FIELDS ON SCREEN */
   I=F-3;               /* NUMBER OF INPUT FIELDS */
   P=26+F*38; /* P=LENGTH OF STATIC PORTION */
   OL=(F/8)+(0^=MOD(F,8));            /* LEN OUTFLAG */
   Q=10                               /* DYNAMIC HEADER */
     +OL                              /* OUTFLAG */
     +LL                              /* RULE1, OUTPUT ONLY */
     +LL                              /* RULE2, OUTPUT ONLY */
     +LL                              /* MESSAGE, OUTPUT ONLY */
     +2*LL                            /* COMMAND I/O AREAS */
     +LL                              /* TAB FLD, OUTPUT ONLY */
     +2*D*(RHPMAXLN+4)                /* SEQ FIELD I/O AREAS */
     +2*D*((LINESIZE-RHPMAXLN-2)+4)   /* DATA FIELD I/O AREAS */
     ;        /* Q=LENGTH DYNAMIC AREA */
   L=5+(P+Q)/256; /* LENGTH TO ALLOCATE */
   ALLOCATE RHPASTR;
   PNLPTR,RHPSTAPT=PTROUT(PTRIN(RHPAREAP)+4);
   DYNPTR,RHPDYNPT=PTROUT(PTRIN(PNLPTR)+P);
   DINOF=10+OL;
   DOUTOF=DINOF
     +LL                          /* COMMAND INPUT AREA */
     +D*(RHPMAXLN+4)              /* SEQ FIELD INPUT AREAS */
     +D*((LINESIZE-RHPMAXLN-2)+4) /* DATA FIELD INPUT AREAS */
     ;
   DYNCNT=F;
   OUTFLAG(*)='0'B;

   PNLLEN=0-SCRSIZE;
   PNLNAME='SSE';
   PNLNUM=1;
   INCNT=0; /* WILL BE SET BELOW */
   FLDCNT=F;
   IF LINESIZE<PLINESIZE
     THEN CURSBAB,WRKSBAB=3*PLINESIZE+1;
     ELSE CURSBAB,WRKSBAB=3*LINESIZE+1;
   CALL SBACONV(WRKSBAB,'1'B); /* CONVERT CURSOR LOC TO TRANS CODE */
   CURSBA=WRKSBA;
   NEWLEN=P;

   SFLDPTR=NULL;
   LS=LINESIZE-1;
   SBA=0;
   CALL SETFLD(0,LS,SBA); /* SET UP RULE1 */
   CALL SBABUMP;
   CALL SETFLD(0,LS,SBA); /* SET UP RULE2 */
   CALL SBABUMP;
   CALL SETFLD(0,LS,SBA); /* SET UP MSG FIELD */
   MSGNUM=FLDNUM;
   MSGPTR=OP;
   CALL SBABUMP;
   CALL SETFLD(LS,LS,SBA); /* CMD FIELD */
   CMDSPTR=SFLDPTR;
   CMDPTR=IP;
   CMDOPTR=OP;
   CALL SBABUMP;
   CALL SETFLD(0,LS,SBA); /* TAB DISPLAY */
   TABNUM=FLDNUM;
   TABPTR=OP;
   L=LINESIZE-RHPMAXLN-2;
   DO I=1 TO D; /* LOOP ONCE FOR EACH LOGICAL DISPLAY LINE */
     CALL SBABUMP;
     CALL SETFLD(RHPMAXLN,RHPMAXLN,SBA); /* SEQUENCE FIELD */
     IF I=1
       THEN INPTR=SFLDPTR;
     CALL SETFLD(L,L,SBA+RHPMAXLN+1); /* DATA FIELD */
     END;
   TRUNCATE=LINESIZE-RHPMAXLN-2;
   RHPFILL=MIN(RHPFILL,TRUNCATE);
   COLUMN=1;
   @CURPNL=0;
   @NXTPNL=1;
   @CHGCURS=-1;
   @CALLFLGS='0'B;
   NXTPNL,CURPNL=@NXTPNL;

 SBABUMP: PROC;
   IF RHPFRACT<=0
     THEN SBA=SBA+PLINESIZE; /* >=1 RECORDS PER ROW */
     ELSE SBA=SBA+PLINESIZE*(RHPFRACT+1); /* >1 ROWS PER RECORD */
   IF SBA>=SCRSIZE
     THEN SBA=SBA-SCRSIZE+LINESIZE; /* STARTING A NEW COLUMN */
   END SBABUMP;

 SETFLD: PROC(LIN,LOUT,SBA);
   DCL (LIN,LOUT,SBA) FIXED BIN(15,0);
   SAVEPTR=SFLDPTR;
   IF SAVEPTR=NULL
     THEN DO; /* FIRST TIME ONLY */
       SFLDPTR=ADDR(FLDLOC);
       FLDNUM=1;
       END;
     ELSE DO;
       SFLDPTR=PTROUT(PTRIN(SFLDPTR)+FLDLEN);
       FLDNUM=SAVEPTR->FLDNUM+1;
       END;
   FLDLEN=38;
   FLDNAME='';
   PICOFF=0;
   LITLEN=0;
   PICLEN=0;
   FLDSBAB,WRKSBAB=SBA;
   CALL SBACONV(WRKSBAB,'1'B);
   FLDSBA=WRKSBA;
   OUTOFF=OOFF;
   OOFF=OOFF+LOUT+4;
   OP,DFLDPTR=PTROUT(PTRIN(DYNPTR)+DOUTOF+OUTOFF);
   LEN=LOUT;
   DATA='';
   IF LIN=0
     THEN DO; /* PROTECTED FIELD */
       FLAGS='001110'B;
       FLDINUM,INLEN,INOFF=0;
       END;
     ELSE DO; /* UNPROTECTED FIELD */
       FLAGS='000010'B;
       FLDINUM,INCNT=INCNT+1;
       INOFF=IOFF;
       IOFF=IOFF+LIN+4; /* SET IOFF FOR NEXT INPUT FIELD */
       INLEN=LIN;
       IP,DFLDPTR=PTROUT(PTRIN(DYNPTR)+DINOF+INOFF);
       LEN=LIN;
       DATA='';
       END;
   END SETFLD;
   END ABEDIS;
