 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* OBSOLETE - NO LONGER USED.  SEE ABE.PLI(ABEBRUN) */
 /* ABECMDA */
 /**********************************************************************
 * ABECMDA, IN CONJUNCTION WITH ABECMDB, PROVIDES THE INTERFACE        *
 * BETWEEN THE ABE MAINLINE COMMAND PROCESSOR AND THE SUBCOMMANDS.     *
 * FORMAT FOR THE ABECMD MACRO IS AS AS FOLLOWS:                       *
 *                                                                     *
 * ABECMD(SUBNAME1,SUBNAME2,...SUBNAMEN);                              *
 *                                                                     *
 * 'SUBNAME1' IS THE PRIMARY SUBCOMMAND NAME, AND WHEN THE SUBCOMMAND  *
 * IS LINKEDITED OUT AS A SEPARATE MODULE TO BE FETCHED IN AT          *
 * EXECUTION TIME, THE MODULE NAME MUST BE                             *
 * EQUAL TO 'SUBNAME1'.  'SUBNAME2' THRU 'SUBNAMEN' ARE ALL ALIASES    *
 * OF THE SAME SUBCOMMAND, AND WHICH ONE IS BEING CURRENTLY INVOKED    *
 * IS INDICATED BY SETTING OF PARAMETER CMDINDX.                       *
 *                                                                     *
 * THE GENERATED CALL STATEMENT FOR EACH SUBCOMMAND MODULE WILL BE:    *
 *                                                                     *
 * CALL ABE001(CMDINDX,CMDBUF,                                         *
 *                                                                     *
 * CMDINDX IS DECLARED FIXED BIN(15,0), AND IS SET TO                  *
 * A NUMBER CORRESPONDING TO THE PARTICULAR NAME BY WHICH THE          *
 * SUBCOMMAND IS BEING INVOKED.                                        *
 *                                                                     *
 * CMDBUF IS DECLARED CHAR(*) VARYING, AND IS THE COMMAND BUFFER       *
 * CONTAINING THE OPERANDS TO THE RIGHT OF THE SUBCOMMAND NAME IN      *
 * THE ORIGINAL BUFFER (SSE SUBROUTINE ABECMD).                        *
 *                                                                     *
 **********************************************************************/
   % DCL @RHADDON CHAR;
   % @RHADDON = ' ';
 /* @DEBUG WILL BE SET BY THE USER TO 'Y' IF HE WANTS TO HANDLE
    ERROR CONDITIONS ON HIS OWN. */
   % DCL @DEBUG CHAR;
   % @DEBUG = 'N';
 /* @ENTDCL WILL CONTAIN ALL FETCH AND DCL STMTS FOR ENTRY POINTS */
   % DCL @ENTDCL CHAR;
   % @ENTDCL = '';
 /* @CALCOD WILL CONTAIN THE GENERATED CALL STATEMENTS */
   % DCL @CALCOD CHAR;
   % @CALCOD = '';
   % DCL ABECMD ENTRY;
 /* @ENTREL WILL CONTAIN ALL RELEASE STATEMENTS */
   % DCL @ENTREL CHAR;
   % @ENTREL = '';
 % ABECMD:  PROC(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,
   P16,P17,P18,P19,P20,P21,P22,P23,P24,P25)
   STATEMENT RETURNS(CHAR);
   DCL (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,
     P17,P18,P19,P20,P21,P22,P23,P24,P25) CHAR;
   DCL (I,J,NOFETCH,NORELEASE) FIXED;
   NOFETCH=0;
   NORELEASE=0;
   DCL CURRENT CHAR;
   IF      P25 ^= '' THEN I = 25;
   ELSE IF P24 ^= '' THEN I = 24;
   ELSE IF P23 ^= '' THEN I = 23;
   ELSE IF P22 ^= '' THEN I = 22;
   ELSE IF P21 ^= '' THEN I = 21;
   ELSE IF P20 ^= '' THEN I = 20;
   ELSE IF P19 ^= '' THEN I = 19;
   ELSE IF P18 ^= '' THEN I = 18;
   ELSE IF P17 ^= '' THEN I = 17;
   ELSE IF P16 ^= '' THEN I = 16;
   ELSE IF P15 ^= '' THEN I = 15;
   ELSE IF P14 ^= '' THEN I = 14;
   ELSE IF P13 ^= '' THEN I = 13;
   ELSE IF P12 ^= '' THEN I = 12;
   ELSE IF P11 ^= '' THEN I = 11;
   ELSE IF P10 ^= '' THEN I = 10;
   ELSE IF P9  ^= '' THEN I =  9;
   ELSE IF P8  ^= '' THEN I =  8;
   ELSE IF P7  ^= '' THEN I =  7;
   ELSE IF P6  ^= '' THEN I =  6;
   ELSE IF P5  ^= '' THEN I =  5;
   ELSE IF P4  ^= '' THEN I =  4;
   ELSE IF P3  ^= '' THEN I =  3;
   ELSE IF P2  ^= '' THEN I =  2;
   ELSE                   I =  1;
   DO J = 1 TO I;
     IF        J =  1 THEN CURRENT =  P1;
       ELSE IF J =  2 THEN CURRENT =  P2;
       ELSE IF J =  3 THEN CURRENT =  P3;
       ELSE IF J =  4 THEN CURRENT =  P4;
       ELSE IF J =  5 THEN CURRENT =  P5;
       ELSE IF J =  6 THEN CURRENT =  P6;
       ELSE IF J =  7 THEN CURRENT =  P7;
       ELSE IF J =  8 THEN CURRENT =  P8;
       ELSE IF J =  9 THEN CURRENT =  P9;
       ELSE IF J = 10 THEN CURRENT = P10;
       ELSE IF J = 11 THEN CURRENT = P11;
       ELSE IF J = 12 THEN CURRENT = P12;
       ELSE IF J = 13 THEN CURRENT = P13;
       ELSE IF J = 14 THEN CURRENT = P14;
       ELSE IF J = 15 THEN CURRENT = P15;
       ELSE IF J = 16 THEN CURRENT = P16;
       ELSE IF J = 17 THEN CURRENT = P17;
       ELSE IF J = 18 THEN CURRENT = P18;
       ELSE IF J = 19 THEN CURRENT = P19;
       ELSE IF J = 20 THEN CURRENT = P20;
       ELSE IF J = 21 THEN CURRENT = P21;
       ELSE IF J = 22 THEN CURRENT = P22;
       ELSE IF J = 23 THEN CURRENT = P23;
       ELSE IF J = 24 THEN CURRENT = P24;
       ELSE IF J = 25 THEN CURRENT = P25;
     IF CURRENT='NOFETCH'
       THEN NOFETCH=1;
       ELSE IF CURRENT='NORELEASE'
         THEN NORELEASE=1;
         ELSE @CALCOD=@CALCOD××'WHEN('''××CURRENT××''') CALL '××P1××
           '('××J××',CMDBUF,RHPTR,RHHDRPT,LRNPTR);';
     END;
   @ENTDCL=@ENTDCL××' DCL '××P1××
     ' ENTRY(FIXED BIN(15,0),CHAR(*) VAR,PTR,PTR,PTR);';
   IF NOFETCH^=1
     THEN DO;
       @ENTDCL=@ENTDCL××' FETCH '××P1××';';
       IF NORELEASE^=1
         THEN @ENTREL=@ENTREL××' RELEASE '××P1××';';
       END;
   RETURN('');
   % END ABECMD;
