 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT041 (WAS DENTFSD), $DISPLAY */
 /* CALLED TO PROCESS -
    $DISPLAY <PANEL> DUP(<N>) LIST LINE(<L>) NOBREAK NAME() BREAK() -
                     SKIP(N1:N2 ...) */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME='RENT';
   % @RENTNAME='DENT041';
   % INCLUDE DENTSUB;
   % INCLUDE DENTPNL;
   DCL SETCAPS ENTRY;
   DCL PREFIX ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL NAME CHAR(8);
   DCL MYCMD CHAR(80) VAR;
   DCL AD(0:32766) CHAR(1) UNALIGNED BASED(T);
   DCL HWD UNALIGNED FIXED BIN(15,0) BASED(DUMPTR);
   DCL 1 MPNLCALL,
     2 MCURPNL FIXED BIN(15,0) INIT(0),
     2 MNXTPNL FIXED BIN(15,0) INIT(1),
     2 MARYPTR PTR,
     2 MAID BIT(8),
     2 MCURLOC FIXED BIN(15,0),
     2 MCHGCURS FIXED BIN(15,0) INIT(-1),
     2 MCALLFLGS BIT(8) INIT('0'B);
   DCL 1 @PNLARYS,
     2 @ARYCNT FIXED BIN(31,0) INIT(1),
     2 @PNLARY(1),
      3 @PNLSTAPT PTR,
       /* PTR TO STATIC PORTION OF DEFINITION */
      3 @PNLDYNPT PTR;
       /* PTR TO DYNAMIC PORTION OF DEFINITION */
   DCL KEYTABLE(11) CHAR(80) VAR STATIC
     INIT('DUP','LIST','LINE','NOBREAK','BREAK','NAME','SKIP',
          'PREMOD','NOPREMOD','HIGH','LOW');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL KEYLAB(0:11) LABEL;
   DCL (NOBRSW,LINESW,PREMODSW,NOPREMODSW,HIGHSW,LOWSW)
     BIT(1) INIT('0'B);
   DCL LISTLN FIXED BIN(15,0) INIT(0);
   DCL DUPNO FIXED BIN(15,0) INIT(0);
   DCL DUPLEN FIXED BIN(15,0) INIT(0);
   DCL (SKHD,RHP,SAVPTR,ORGPTR,RHOPTR) PTR;
   DCL 1 SKEL BASED(SKELPTR),
     2 SKNXT PTR, /* SINGLY-LINKED LIST */
     2 STC FIXED BIN(15,0), /* STARTING COLUMN TO SKIP */
     2 ENC FIXED BIN(15,0); /* ENDING COLUMN TO SKIP */
   RHRC=0;
   SKHD=NULL; /* EMPTY SKIP LIST - HDPTR = NULL */
   RHOPTR=RHPTR; /* SAVE IN CASE NAME KEYWORD IS SPECIFIED */
   BREAK=1;
   DO I=3 TO 16 WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
       /* CALL SPARS */
     GO TO KEYLAB(INDX);
 KEYLAB(0): /* INVALID OPERAND */
     PUT SKIP LIST('ERROR ON $DISPLAY, INVALID OPERAND = ',PARY(I));
     SIGNAL ERROR;
 KEYLAB(1): /* DUP */
     DUPNO=OPER;
     GO TO ENDCASE;
 KEYLAB(2): /* LIST */
     LISTLN=1;
     GO TO ENDCASE;
 KEYLAB(3): /* LINE */
     LINESW='1'B;
     LINE=OPER;
     GO TO ENDCASE;
 KEYLAB(4): /* NOBREAK */
     NOBRSW='1'B;
     GO TO ENDCASE;
 KEYLAB(5): /* BREAK */
     BREAK=OPER;
     GO TO ENDCASE;
 KEYLAB(6): /* NAME */
     DO RHP=NXTRHEL REPEAT RHP->RHNXT WHILE(RHP^=NULL)
       UNTIL(RHP->RHNAME=OPER);
       END;
     IF RHP^=NULL
       THEN RHPTR=RHP;
       ELSE DO;
         MSGDATA='UNABLE TO FIND NAMED DATA SET';
         RHRC=8;
         RETURN;
         END;
     GO TO ENDCASE;
 KEYLAB(7): /* SKIP */
     SKHD=#SKIP(OPER); /* GO SET UP SKIP LIST */
     IF SKHD=NULL
       THEN DO;
         RHRC=8;
         MSGDATA='INVALID SKIP SPECIFICATION';
         RETURN; /* GET OUT IF SETSKIP FOUND AN ERROR */
         END;
     GO TO ENDCASE;
 KEYLAB(8): /* PREMOD */
     PREMODSW='1'B;
     GO TO ENDCASE;
 KEYLAB(9): /* NOPREMOD */
     NOPREMODSW='1'B;
     GO TO ENDCASE;
 KEYLAB(10): /* HIGH */
     HIGHSW = '1'B;
     GO TO ENDCASE;
 KEYLAB(11): /* LOW */
     LOWSW = '1'B;
     GO TO ENDCASE;
 ENDCASE:
     END;
   ORGPTR=RECPTR;
   IF LINESW
     THEN DO ORGPTR=NXTHDR REPEAT ORGPTR->NXTPTR WHILE(ORGPTR^=HDPTR)
       UNTIL(ORGPTR->RECSEQ >= LINE);
       END;
   L=BUFLN;
   IF OUTDDN^=NULL
     THEN IF SUBSTR(OUTDDN->ALCFLAG,6,1)='0'B /* IS IT NUMBERED? */
       THEN L=L-OUTDDN->ALCSEQLEN;
   /* L NOW EQUALS LENGTH TO STORE IN EACH RECORD. */
   OLINE=-1;
   BRCNT=1; /*BRCNT IS THE LINE# WITHIN THE CURRENT LINE GROUP
     ON WHICH DATA IS TO BE DISPLAYED. */
   NAME=PARY(2);
   CALL SETCAPS(NAME);
   T=#PFN(RHHDRPT,SUBENT,NAME); /* GO GET PANEL */
   WRKPTR,PNLPTR=ADDR(AD(4));
   IF WRKPTR->PNLLEN<0
     THEN DO;
       WRKADJ=WRKADJ+WRKPTR->NEWLEN;
       SFLDPTR=ADDR(FLDLOC); /* POINT TO FIRST FIELD DESCR */
       END;
     ELSE DO;
       WRKADJ=WRKADJ+WRKPTR->PNLLEN;
       SFLDPTR=ADDR(NEWLEN); /* POINT TO FIRST FIELD DESCR */
       END;
   DYNPTR=WRKPTR;
   WRKADJ=WRKADJ+DOUTOF; /* WRKPTR POINTS AT PANEL_OUT SUBSTRUCTURE */
   D=0; /* D = LENGTH(DATA PROCESSED IN CURRENT LINE) */
   DO SFLDADJ=SFLDADJ REPEAT SFLDADJ+FLDLEN UNTIL(FLDNUM=FLDCNT);
     IF ^SUBSTR(FLAGS,3,1) /* UNPROTECTED? */
       THEN DO; /* IT IS INPUT FIELD */
         IF PREMODSW
           THEN SUBSTR(FLAGS,8,1)='1'B;
         IF NOPREMODSW
           THEN SUBSTR(FLAGS,8,1)='0'B;
         IF HIGHSW
           THEN SUBSTR(FLAGS,5,2)='10'B;
         IF LOWSW
           THEN SUBSTR(FLAGS,5,2)='00'B;
         NLINE=FLDSBAB/LINESIZE;
         IF OLINE=-1
           THEN OLINE=NLINE; /* IT IS FIRST INPUT LINE TO PROCESS */
         DFLDADJ=WRKADJ+OUTOFF; /* DFLDPTR POINTS AT OUTPUT DATA */
         D=CKD(D); /* GO CHECK SKIP RANGES */
         IF INLEN+D+LISTLN > L /* >= ? */
           THEN DO; /* TIME TO GET A NEW RECORD */
             IF ORGPTR^=HDPTR
               THEN ORGPTR=ORGPTR->NXTPTR;
             IF NOBRSW
               THEN D=0;
               ELSE D=DUPLEN;
             D=CKD(D); /* GO CHECK SKIP RANGES */
             IF OLINE^=NLINE
               THEN DO;
                 BRCNT=BRCNT+1;
                 IF BRCNT>BREAK
                   THEN BRCNT=1;
                 OLINE=NLINE;
                 END;
             END;
         IF FLDINUM<=DUPNO
           THEN DUPLEN=DUPLEN+INLEN+LISTLN;
           ELSE DO;
             IF ^NOBRSW
               THEN IF OLINE^=NLINE
                 THEN DO;
                   BRCNT=BRCNT+1;
                   IF BRCNT>BREAK
                     THEN DO; /* TIME TO GET A NEW LINE */
                       BRCNT=1;
                       IF ORGPTR^=HDPTR & D>DUPLEN
                         THEN ORGPTR=ORGPTR->NXTPTR;
                       D=DUPLEN;
                       D=CKD(D); /* GO CHECK SKIP RANGES */
                       END;
                   OLINE=NLINE;
                   END;
             END;
         IF ORGPTR=HDPTR
           THEN CL=0;
           ELSE CL=LENGTH(ORGPTR->RECSTR);
         IF CL > D
           THEN DO;
             OFF=D+1;
             IF OFF+INLEN > CL+1
               THEN LEN=CL-OFF+1;
               ELSE LEN=INLEN;
             DATA=SUBSTR(ORGPTR->RECSTR,OFF,LEN);
             END;
           ELSE DATA='';
         D=D+INLEN+LISTLN;
         END;
     END;
   MYCMD='$FULLSCR '××PARY(2);
   RHPTR=RHOPTR; /* RESTORE ORIGINAL RHPTR */
   RHRC=#CMD(MYCMD,RHPTR,SUBENT,RHHDRPT);
   DO SKELPTR=SKHD REPEAT SKHD WHILE(SKHD^=NULL);
     SKHD=SKNXT;
     FREE SKEL;
     END;
 CKD: PROC(D) RETURNS(FIXED BIN(31,0));
   DCL D FIXED BIN(31,0);
   DO SKELPTR=SKHD REPEAT SKNXT WHILE(SKELPTR^=NULL)
     UNTIL((D+1>=STC)&(D+1<=ENC));
     END;
   IF SKELPTR^=NULL
     THEN RETURN(ENC);
     ELSE RETURN(D);
   END CKD;
   END DENT041;
