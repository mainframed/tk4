 /* SNOFUN */
 /**********************************************************************
 *                                                                     *
 * GIVEN A SET OF CONTROL BLOCKS PRODUCED BY SNOPRS REPRESENTING A     *
 * PARSED SNOBOL STATEMENT (SEE SUBRTNE SNOBOL FOR BNF), THIS          *
 * SUBROUTINE WILL PERFORM THE INDICATED ACTIONS ON THE SPECIFIED      *
 * DATA STRING.  PARAMETER CURSOR WILL BE SET TO THE CHARACTER IN      *
 * THE GIVEN DATA STRING JUST BEYOND WHERE SUCCESSFUL PATTERN          *
 * MATCHING/REPLACEMENT TOOK PLACE.                                    *
 *                                                                     *
 **********************************************************************/
 SNOFUN: PROC(DATA,PATPTR,SNOEP,CURSOR,ALLKEY,LISTHDR,LISTEND)
   RETURNS(BIT(1)) OPTIONS(REENTRANT) RECURSIVE;
   DCL DATA CHAR(*) VAR;
   DCL (PATPTR,LISTHDR,LISTEND) PTR;
   DCL CURSOR FIXED BIN(15,0);
   DCL ALLKEY CHAR(*) VAR;
   % INCLUDE ABESNO;
   DCL 1 LISTELEM BASED(LISTPTR),
     2 LISTNXT PTR,
     2 LISTLEN FIXED BIN(15,0),
     2 LISTSTR CHAR(L REFER(LISTLEN)) VAR;
   DCL P PTR;
   DCL NULL BUILTIN;
   DCL MATCH BIT(1);
   DCL OLDCURSOR FIXED BIN(15,0);
   DCL MSG CHAR(80) VAR;

   OLDCURSOR=CURSOR;
   MATCH=F_PATTERN(PATPTR);
   IF MATCH
     THEN CALL DEO(DATA,PATPTR,OLDCURSOR,CURSOR,PATPTR); /* REPLACE */
   RETURN(MATCH);

 ARG: PROC(T,ARGSTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS THE ARGUMENT POINTED TO BY T.  IF T POINTS AT     *
 * TOKEN STRUCTURE FOR LITERAL, THE LITERAL WILL BE RETURNED.  IF      *
 * T POINTS AT OPERAND, CURRENT VALUE FOR OPERAND WILL BE RETURNED.    *
 *                                                                     *
 **********************************************************************/
   DCL T PTR;
   DCL ARGSTR CHAR(*) VAR;
   IF T=NULL
     THEN RETURN('');
   IF T->TYPE=QUOTED_STRING
     THEN ARGSTR=T->TOKSTR;
     ELSE CALL SNOGOP(T->TOKSTR,ARGSTR);
   END ARG;

 DEO: PROC(DATA,HLP,POS1,POS2,TOPHLP) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE REPLACEMENTS.  HLP POINTS TO PAT CONTROL           *
 * BLOCK, POS1 CONTAINS INDEX TO FIRST BYTE OF STRING MATCHING         *
 * PATTERN, AND POS2 CONTAINS INDEX TO FIRST BYTE BEYOND STRING        *
 * MATCHING PATTERN. TOPHLP POINTS TO TOPMOST PAT CONTROL BLOCK.       *
 *                                                                     *
 **********************************************************************/
   DCL DATA CHAR(*) VAR;
   DCL (HLP,P,T,TOPHLP) PTR;
   DCL (I,J,K,POS1,POS2) FIXED BIN(15,0);
   CALL DEOREP(DATA,HLP,POS1,POS2,TOPHLP);
   DO P=HLP->NEEDLENXTHDR REPEAT P->NEEDLENXT WHILE(P^=NULL);
     IF P->PATTYP=-1
       THEN CALL DEO(DATA,P->PATEFH,P->PATOFF,P->PATOFF+P->PATLEN,
         TOPHLP);
     END;
   END DEO;

 DEOADJ: PROC(POS1,I,TOPHLP) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN REPLACEMENT HAS EXPANDED/CONTRACTED THE SUBJECT STRING, *
 * AND OFFSETS FOR ALL SUBSEQUENT REPLACEMENTS MUST BE ADJUSTED.       *
 *                                                                     *
 **********************************************************************/
   DCL (TOPHLP,P,T) PTR;
   DCL (I,J,K,L,POS1) FIXED BIN(15,0);
   DO P=TOPHLP->NEEDLENXTHDR REPEAT P->NEEDLENXT WHILE(P^=NULL);
     IF P->PATOFF>POS1
       THEN P->PATOFF=TOPHLP->PATOFF+I;
     IF P->PATTYP=-1
       THEN CALL DEOADJ(POS1,I,P);
     END;
   END DEOADJ;

 DEOREP: PROC(DATA,HLP,POS1,POS2,TOPHLP);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO REPLACEMENT (= OPERATOR).                              *
 *                                                                     *
 **********************************************************************/
   DCL DATA CHAR(*) VAR;
   DCL (HLP,P,T,TOPHLP) PTR;
   DCL (I,J,K,L,POS1,POS2) FIXED BIN(15,0);
   IF HLP->PATASHD=NULL
     THEN RETURN;
   I=HLP->PATASCT;
   J=0;
   T=HLP->PATASHD;
   CALL DEOSUB(DATA,HLP,POS1,POS2,TOPHLP,I,T);
   END DEOREP;

 DEOSUB: PROC(DATA,HLP,POS1,POS2,TOPHLP,I,T) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED FROM DEOREP TO DO REPLACEMENT PROCESSING.                    *
 *                                                                     *
 **********************************************************************/
   DCL DATA CHAR(*) VAR;
   DCL (I,J,K,M,N,POS1,POS2) FIXED BIN(15,0);
   DCL (HLP,T,TOPHLP,U) PTR;
   DCL (REP,NEW) CHAR(32767) VAR INIT('');

   J=0;
   LUP:DO T=T REPEAT T->NEXT_TOKEN WHILE(T^=NULL) UNTIL(I=0);
     IF T->TYPE=QUOTED_STRING
       THEN NEW=T->TOKSTR;
       ELSE IF T->TYPE=NUMERIC_CONSTANT
         THEN DO;
           K=T->TOKSTR; /* K=DESIRED CURSOR LOCATION */
           J=K-(POS1+LENGTH(REP)); /* J=OFFSET FROM CURRENT CURSOR */
           SELECT;
             WHEN(J>0)
               NEW=REPEAT(' ',J-1);
             WHEN(J<0)
               LEAVE LUP; /* TIME TO GO TO A NEW LINE */
             OTHERWISE NEW=''; /* CURSOR AT SPECIFIED SPOT */
             END; /* SELECT */
           END;
         ELSE CALL SNOGOP(T->TOKSTR,NEW);
     REP=REP××NEW;
     I=I-1;
     END LUP;
   IF J<0
     THEN DO; /* TIME TO GO TO A NEW LINE */
       L=STORAGE(DATA)-2; /* LENGTH TO ALLOCATE */
       ALLOCATE LISTELEM;
       LISTNXT=NULL;
       IF LISTHDR=NULL
         THEN LISTHDR,LISTEND=LISTPTR; /* FIRST IN CHAIN */
         ELSE DO; /* ADD TO END OF CHAIN */
           LISTEND->LISTNXT=LISTPTR;
           LISTEND=LISTPTR;
           END;
       IF K<=1
         THEN LISTSTR='';
         ELSE LISTSTR=REPEAT(' ',K-2);
       M=LENGTH(LISTSTR)+1; /* M=NEW POS1,POS2 VALUE */
       IF POS2<=LENGTH(DATA)
         THEN LISTSTR=LISTSTR××SUBSTR(DATA,POS2);
       DATA=SUBSTR(DATA,1,POS1-1)××REP;
       N=M-POS2; /* AMOUNT TO ADJUST PATTERNS */
       IF N^=0
         THEN CALL DEOADJ(POS1,N,TOPHLP);
       POS1,POS2=M; /* SET NEW POS1,POS2 */
       U=T->NEXT_TOKEN;
       CALL DEOSUB(LISTSTR,HLP,POS1,POS2,TOPHLP,I,U);
       END;
     ELSE DO;
       IF POS2>LENGTH(DATA)
         THEN DATA=SUBSTR(DATA,1,POS1-1)××REP;
         ELSE DATA=SUBSTR(DATA,1,POS1-1)××REP××SUBSTR(DATA,POS2);
       /* NOW ADJUST POSITIONS OF ALL SUBSEQUENCE REPLACEMENTS */
       I=LENGTH(REP)-(POS2-POS1);
       IF I^=0
         THEN CALL DEOADJ(POS1,I,TOPHLP);
       END;
   END DEOSUB;

 DO_ASSIGN: PROC(ELP);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO IMMEDIATE ASSIGNMENT ($ OPERATOR).                     *
 *                                                                     *
 **********************************************************************/
   DCL ELP PTR;
   CALL SNOPOP(ELP->PATASS->TOKSTR,
     SUBSTR(DATA,ELP->PATOFF,ELP->PATLEN));
   END DO_ASSIGN;

 F_ANY: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * ANY BUILTIN FUNCTION.                                               *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (I,J,K,L) FIXED BIN(15,0);
   DCL CH CHAR(1);
   DCL ARGSTR CHAR(32767) VAR;
   CALL ARG(ARGPTR,ARGSTR);
   L=LENGTH(ARGSTR);
   IF L>0
     THEN DO;
       CH=SUBSTR(DATA,CURSOR,1);
       DO I=1 TO L;
         IF SUBSTR(ARGSTR,I,1)=CH
           THEN DO;
             CURSOR=CURSOR+1;
             RETURN('1'B); /* FOUND MATCH */
             END;
         END;
       END;
   RETURN('0'B); /* NO MATCH */
   END F_ANY;

 F_ARB: PROC(CLP,HLP) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * ARB BUILTIN FUNCTION.                                               *
 *                                                                     *
 **********************************************************************/
   DCL (CLP,HLP,SAV) PTR;
   DCL I FIXED BIN(15,0);
   DCL MATCH BIT(1);
   I=CURSOR;
   SAV=HLP->NEEDLELSTHDR;
   CALL THREAD(CLP,HLP,I);
   DO FOREVER=1 REPEAT FOREVER;
     IF CLP->PATCAT=NULL
       THEN MATCH='1'B;
       ELSE MATCH=F_PATEL(CLP->PATCAT,HLP);
     IF MATCH
       THEN LEAVE;
     CURSOR=CURSOR+1;
     IF CURSOR>LENGTH(DATA)
       THEN LEAVE;
     CALL F_ARB_Q(HLP,SAV);
     CALL THREAD(CLP,HLP,I);
     END;
   IF ^MATCH
     THEN CALL F_ARB_Q(HLP,SAV); /* RE-ESTABLISH ORIGINAL LAST */
   RETURN(MATCH);
   END F_ARB;

 F_ARB_Q: PROC(HLP,SAV);
 /**********************************************************************
 *                                                                     *
 * CALLED TO RE-ESTABLISH ORIGINAL LAST AFTER ARB FAILURE TO MATCH     *
 *                                                                     *
 **********************************************************************/
   DCL (HLP,SAV) PTR;
   HLP->NEEDLELSTHDR=SAV;
   IF SAV=NULL
     THEN HLP->NEEDLENXTHDR=NULL;
   END F_ARB_Q;

 F_BREAK: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * BREAK BUILTIN FUNCTION.                                             *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (I,J,K,L) FIXED BIN(15,0);
   DCL ARGSTR CHAR(32767) VAR;
   CALL ARG(ARGPTR,ARGSTR);
   L=LENGTH(ARGSTR);
   IF L=0
     THEN DO; /* MATCH REST OF STRING */
       CURSOR=LENGTH(DATA)+1;
       RETURN('1'B);
       END;
   DO I=1 TO L;
     J=INDEX(SUBSTR(DATA,CURSOR),SUBSTR(ARGSTR,I,1));
     IF J>0
       THEN DO; /* MATCH */
         CURSOR=CURSOR+J-1;
         RETURN('1'B);
         END;
     END;
   RETURN('0'B); /* NO MATCH */
   END F_BREAK;

 F_CHARACTER_COMPARE: PROC(ARGPTR,TYP) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * DIFFER,IDENT,LGT BUILTIN FUNCTIONS.                                 *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (TYP,I,J,K,L) FIXED BIN(15,0);
   DCL (ARG1,ARG2) CHAR(32767) VAR;
   IF ARGPTR=NULL
     THEN RETURN('0'B); /* DUMB */
   IF ARGPTR->NEXT_TOKEN=NULL
     THEN RETURN('0'B); /* DUMB */
   CALL ARG(ARGPTR,ARG1);
   CALL ARG(ARGPTR->NEXT_TOKEN,ARG2);
   SELECT;
     WHEN(ARG1=ARG2) I=0;
     WHEN(ARG1>ARG2) I=1;
     OTHERWISE       I=-1;
     END; /* SELECT */
   SELECT(TYP);
     WHEN(3) /* DIFFER */
       IF I=0
         THEN RETURN('0'B);
         ELSE RETURN('1'B);
     WHEN(8) /* IDENT */
       IF I=0
         THEN RETURN('1'B);
         ELSE RETURN('0'B);
     OTHERWISE /* LGT */
       IF I=1
         THEN RETURN('1'B);
         ELSE RETURN('0'B);
     END; /* SELECT */
   END F_CHARACTER_COMPARE;

 F_EVAL: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * EVAL BUILTIN FUNCTION.                                              *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL ARGSTR CHAR(32767) VAR;
   DCL MATCH BIT(1);
   DCL SNOBOL ENTRY(CHAR(*) VAR,CHAR(*) VAR,CHAR(80) VAR,ENTRY,ENTRY,
     CHAR(*) VAR,FIXED BIN(15,0))
     RETURNS(BIT(1));
   CALL ARG(ARGPTR,ARGSTR);
   RETURN(SNOBOL(DATA,ARGSTR,MSG,SNOGOP,SNOPOP,'',CURSOR));
   END F_EVAL;

 F_INDEX: PROC(ELP) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * INDEX BUILTIN FUNCTION.                                             *
 *                                                                     *
 **********************************************************************/
   DCL ELP PTR;
   DCL ARGSTR CHAR(32767) VAR;
   DCL I FIXED BIN(15,0);
   IF ELP->PATEFH^=NULL
     THEN CALL ARG(ELP->PATEFH,ARGSTR);
     ELSE IF ELP->PATCAT^=NULL
       THEN CALL ARG(ELP->PATCAT->PATEFH,ARGSTR);
       ELSE ARGSTR='';
   IF LENGTH(ARGSTR)>LENGTH(DATA)-CURSOR+1
     THEN RETURN('0'B); /* NO MATCH */
   I=INDEX(SUBSTR(DATA,CURSOR),ARGSTR);
   IF I=0
     THEN RETURN('0'B); /* NO MATCH */
   CURSOR=CURSOR+I-1;
   RETURN('1'B);
   END F_INDEX;

 F_LEN: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * LEN BUILTIN FUNCTION.                                               *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL STR CHAR(256) VAR;
   DCL L FIXED BIN(15,0);
   ON CONVERSION
     GOTO F_LEN_LAB;
   CALL ARG(ARGPTR,STR);
   L=STR;
   IF LENGTH(DATA)-CURSOR+1<L
     THEN RETURN('0'B); /* NO MATCH */
   CURSOR=CURSOR+L;
   RETURN('1'B);
   F_LEN_LAB: RETURN('0'B);
   END F_LEN;

 F_LITERAL: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED TO MATCH A LITERAL.                                          *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL L FIXED BIN(15,0);
   DCL ARGSTR CHAR(32767) VAR;
   CALL ARG(ARGPTR,ARGSTR);
   L=LENGTH(ARGSTR);
   IF LENGTH(DATA)-CURSOR+1<L
     THEN RETURN('0'B); /* NO MATCH */
   IF SUBSTR(DATA,CURSOR,L)=ARGSTR
     THEN DO;
       CURSOR=CURSOR+L;
       RETURN('1'B);
       END;
     ELSE RETURN('0'B);
   END F_LITERAL;

 F_NOTANY: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * NOTANY BUILTIN FUNCTION.                                            *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (I,J,K,L) FIXED BIN(15,0);
   DCL CH CHAR(1);
   DCL ARGSTR CHAR(32767) VAR;
   CALL ARG(ARGPTR,ARGSTR);
   L=LENGTH(ARGSTR);
   IF L>0
     THEN DO;
       CH=SUBSTR(DATA,CURSOR,1);
       DO I=1 TO L;
         IF SUBSTR(ARGSTR,I,1)=CH
           THEN RETURN('0'B); /* FOUND MATCH */
         END;
       END;
   CURSOR=CURSOR+1;
   RETURN('1'B); /* NO MATCH */
   END F_NOTANY;

 F_NUMERIC_COMPARE: PROC(ARGPTR,TYP) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * EQ,GE,GT,LE,LT,NE NUMERIC PREDICATE FUNCTIONS.                      *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (TYP,I,J,K,L) FIXED BIN(15,0);
   DCL (A,B) DEC FLOAT(16);
   DCL (AMISSING,BMISSING) BIT(1) INIT('1'B);
   DCL STR CHAR(256) VAR;

   IF ARGPTR=NULL
     THEN RETURN('0'B); /* DUMB */
   IF ARGPTR->NEXT_TOKEN=NULL
     THEN RETURN('0'B); /* DUMB */
   ON CONVERSION GOTO DOB;
   CALL ARG(ARGPTR,STR);
   A=STR;
   AMISSING='0'B;
 DOB:
   ON CONVERSION GOTO DOC;
   CALL ARG(ARGPTR->NEXT_TOKEN,STR);
   B=STR;
   BMISSING='0'B;
 DOC:
   IF AMISSING × BMISSING
     THEN SELECT;
       WHEN(AMISSING & BMISSING) I=0;
       WHEN(BMISSING)            I=1;
       OTHERWISE                 I=-1;
       END; /* SELECT */
     ELSE SELECT;
       WHEN(A=B) I=0;
       WHEN(A>B) I=1;
       OTHERWISE I=-1;
       END; /* SELECT */
   SELECT(TYP);
     WHEN(4) /* EQ */
       IF I=0
         THEN RETURN('1'B);
         ELSE RETURN('0'B);
     WHEN(6) /* GE */
       IF I=-1
         THEN RETURN('0'B);
         ELSE RETURN('1'B);
     WHEN(7) /* GT */
       IF I=1
         THEN RETURN('1'B);
         ELSE RETURN('0'B);
     WHEN(9) /* LE */
       IF I=1
         THEN RETURN('0'B);
         ELSE RETURN('1'B);
     WHEN(12) /* LT */
       IF I=-1
         THEN RETURN('1'B);
         ELSE RETURN('0'B);
     OTHERWISE /* NE */
       IF I=0
         THEN RETURN('0'B);
         ELSE RETURN('1'B);
     END; /* SELECT */
   END F_NUMERIC_COMPARE;

 F_PATEL: PROC(ELP,HLP) RETURNS(BIT(1)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE CURRENT PATTERN ELEMENT OR ONE OF ITS    *
 * ALTERNATIVES MATCHES.  IF A MATCH IS FOUND, F_PATEL WILL BE CALLED  *
 * RECURSIVELY TO DETERMINE IF THE NEXT CONCATENATION ELEMENT MATCHES. *
 *                                                                     *
 **********************************************************************/
   DCL (CLP,ELP,HLP) PTR;
   DCL MATCH BIT(1) INIT('0'B);
   IF ELP=NULL
     THEN RETURN('1'B);
   DO CLP=ELP REPEAT CLP->PATALT WHILE(CLP^=NULL) UNTIL(MATCH);
     CLP->THREADED=0;
     IF CLP->PATTYP=20 /* ARB? */
       THEN MATCH=F_ARB(CLP,HLP);
       ELSE DO;
         MATCH=F_PATEL_SUB(CLP,HLP);
         IF MATCH & (CLP->PATCAT^=NULL) & ALLKEY^='ALL'
           THEN MATCH=F_PATEL(CLP->PATCAT,HLP);
         END;
     IF ALLKEY='ALL'
       THEN IF MATCH
         THEN DO;
           IF CLP->PATCAT^=NULL
             THEN IF CLP->PATCAT->THREADED=0
               THEN MATCH=F_PATEL(CLP->PATCAT,HLP);
               ELSE LEAVE;
             ELSE IF HLP->PATELOWN^=NULL
               THEN MATCH=F_PATEL(HLP->PATELOWN->PATCAT,
                 HLP->PATELOWN->PATOWN);
           IF ^MATCH
             THEN CALL UNTHREAD(HLP); /* UNTHREAD LAST ELEMENT */
           END;
     END;
   RETURN(MATCH);
   END F_PATEL;

 F_PATEL_SUB: PROC(ELP,HLP) RETURNS(BIT(1)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE CURRENT PATTERN ELEMENT MATCHES.         *
 *                                                                     *
 **********************************************************************/
   DCL (ELP,HLP) PTR;
   DCL I FIXED BIN(15,0);
   DCL MATCH BIT(1) INIT('0'B);
   IF ELP=NULL
     THEN RETURN('1'B);
   I=CURSOR; /* SAVE FOR LATER COMPARISON */
   SELECT(ELP->PATTYP);
     WHEN(-1) MATCH=F_PATTERN(ELP->PATEFH);
     WHEN(0)  MATCH=F_LITERAL(ELP->PATEFH);
     WHEN(1)  MATCH=F_ANY(ELP->PATEFH);
     WHEN(2)  MATCH=F_BREAK(ELP->PATEFH);
     WHEN(3,8,11) /* DIFFER,IDENT,LGT */
       MATCH=F_CHARACTER_COMPARE(ELP->PATEFH,ELP->PATTYP);
     WHEN(4,6,7,9,12,13) /* EQ,GE,GT,LE,LT,NE */
       MATCH=F_NUMERIC_COMPARE(ELP->PATEFH,ELP->PATTYP);
     WHEN(5)  MATCH=F_EVAL(ELP->PATEFH);
     WHEN(10) MATCH=F_LEN(ELP->PATEFH);
     WHEN(14) MATCH=F_NOTANY(ELP->PATEFH);
     WHEN(15) MATCH=F_POS(ELP->PATEFH);
     WHEN(16) MATCH=F_RPOS(ELP->PATEFH);
     WHEN(17) MATCH=F_RTAB(ELP->PATEFH);
     WHEN(18) MATCH=F_SPAN(ELP->PATEFH);
     WHEN(19) MATCH=F_TAB(ELP->PATEFH);
     WHEN(21) MATCH=F_INDEX(ELP);
     WHEN(22)     /* IT IS FENCE */
       IF HLP->PATFENCE=1
         THEN MATCH='0'B;
         ELSE DO;
           HLP->PATFENCE=1;
           MATCH='1'B;
           END;
     OTHERWISE; /* ELIMINATES COMPILER ERROR MESSAGE */
     END; /* SELECT */
   IF MATCH
     THEN CALL THREAD(ELP,HLP,I);
   RETURN(MATCH);
   END F_PATEL_SUB;

 F_PATTERN: PROC(ELP) RETURNS(BIT(1)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE CURRENT PATTERN MATCHES.                 *
 *                                                                     *
 **********************************************************************/
   DCL ELP PTR;
   DCL MATCH BIT(1);
   ELP->NEEDLENXTHDR,ELP->NEEDLELSTHDR=NULL;
   ELP->PATFENCE=0;
   RETURN(F_PATEL(ELP->PATELHD,ELP));
   END F_PATTERN;

 F_POS: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * POS BUILTIN FUNCTION.                                               *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL N FIXED BIN(15,0);
   DCL STR CHAR(256) VAR;

   ON CONVERSION
     GOTO F_POS_LAB;
   CALL ARG(ARGPTR,STR);
   N=STR;
   IF CURSOR-1^=N
     THEN RETURN('0'B); /* NO MATCH */
   RETURN('1'B);
   F_POS_LAB: RETURN('0'B);
   END F_POS;

 F_RPOS: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * RPOS BUILTIN FUNCTION.                                              *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL N FIXED BIN(15,0);
   DCL STR CHAR(256) VAR;

   ON CONVERSION
     GOTO F_RPOS_LAB;
   CALL ARG(ARGPTR,STR);
   N=STR;
   IF LENGTH(DATA)-N+1^=CURSOR
     THEN RETURN('0'B); /* NO MATCH */
   RETURN('1'B);
   F_RPOS_LAB: RETURN('0'B);
   END F_RPOS;

 F_RTAB: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * RTAB BUILTIN FUNCTION.                                              *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (I,N) FIXED BIN(15,0);
   DCL STR CHAR(256) VAR;

   ON CONVERSION
     GOTO F_RTAB_LAB;
   CALL ARG(ARGPTR,STR);
   N=STR;
   I=LENGTH(DATA)-N+1; /* NEW CURSOR POSITION */
   IF CURSOR>I
     THEN RETURN('0'B);
   CURSOR=I;
   RETURN('1'B);
   F_RTAB_LAB: RETURN('0'B);
   END F_RTAB;

 F_SPAN: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * SPAN BUILTIN FUNCTION.                                              *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL I FIXED BIN(15,0);
   DCL ARGSTR CHAR(32767) VAR;

   CALL ARG(ARGPTR,ARGSTR);
   DO I=CURSOR TO LENGTH(DATA)
     WHILE(INDEX(ARGSTR,SUBSTR(DATA,I,1))^=0);
     END;
   IF I>CURSOR
     THEN DO;
       CURSOR=I;
       RETURN('1'B);
       END;
     ELSE RETURN('0'B);
   END F_SPAN;

 F_TAB: PROC(ARGPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * TAB BUILTIN FUNCTION.                                               *
 *                                                                     *
 **********************************************************************/
   DCL ARGPTR PTR;
   DCL (I,N) FIXED BIN(15,0);
   DCL STR CHAR(256) VAR;

   ON CONVERSION
     GOTO F_TAB_LAB;
   CALL ARG(ARGPTR,STR);
   N=STR;
   IF N>LENGTH(DATA)
     THEN RETURN('0'B);
   CURSOR=N+1;
   RETURN('1'B);
   F_TAB_LAB: RETURN('0'B);
   END F_TAB;

 THREAD: PROC(ELP,HLP,I);
 /**********************************************************************
 *                                                                     *
 * CALLED TO THREAD THE NEEDLE.                                        *
 *                                                                     *
 **********************************************************************/
   DCL (ELP,HLP) PTR;
   DCL I FIXED BIN(15,0);
   ELP->THREADED=1; /* INDICATE ELEMENT IS THREADED */
   ELP->PATOFF=I;
   ELP->PATLEN=CURSOR-I;
   ELP->NEEDLECUR=I; /* CURSOR BEFORE MATCH IN CASE OF RESTORE */
   IF ELP->PATASS^=NULL
     THEN CALL DO_ASSIGN(ELP); /* GO DO IMMEDIATE ASSIGNMENTS */
   ELP->NEEDLENXT,ELP->NEEDLELST=NULL;
   IF HLP->NEEDLELSTHDR=NULL
     THEN HLP->NEEDLENXTHDR=ELP;
     ELSE DO;
       HLP->NEEDLELSTHDR->NEEDLENXT=ELP;
       ELP->NEEDLELST=HLP->NEEDLELSTHDR;
       END;
   ELP->NEEDLENXT=NULL;
   HLP->NEEDLELSTHDR=ELP;
   END THREAD;

 UNTHREAD: PROC(HLP);
 /**********************************************************************
 *                                                                     *
 * CALLED TO THREAD THE NEEDLE.                                        *
 *                                                                     *
 **********************************************************************/
   DCL (ELP,HLP) PTR;
   DCL I FIXED BIN(15,0);
   IF HLP->NEEDLELSTHDR=NULL
     THEN SIGNAL ERROR; /* IN CASE THE IMPOSSIBLE HAPPENS */
   HLP->NEEDLELSTHDR->THREADED=0; /* INDICATE ELEMENT IS UNTHREADED */
   CURSOR=HLP->NEEDLELSTHDR->NEEDLECUR; /* RESTORE CURSOR */
   HLP->NEEDLELSTHDR=HLP->NEEDLELSTHDR->NEEDLELST;
   IF HLP->NEEDLELSTHDR=NULL
     THEN HLP->NEEDLENXTHDR=NULL;
     ELSE HLP->NEEDLELSTHDR->NEEDLENXT=NULL;
   END UNTHREAD;

   END SNOFUN;
