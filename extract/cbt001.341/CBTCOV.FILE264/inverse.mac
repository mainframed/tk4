 /* INVERSE*/
 /*
0*$.HE GENERALIZED SUBROUTINES - INVERSE
0*$.HE COMPUTE THE INVERSE OF A MATRIX
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$07/10/78
0*$AUTHOR:  P. DIXON
0*$SOURCE MODULE NAME:  INVERSE
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THE INVERSE SUBROUTINE CAN BE USED TO COMPUTE THE INVERSE OF A
0*$SQUARE MATRIX.  CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$CALL INVERSE(A,B,DETERMINANT);
0*$.IN 0
0*$.SP 1
0*$WHERE "A" AND "B" ARE BOTH TWO-DIMENSIONAL ARRAYS DECLARED
0*$FLOAT BINARY(53).  NOTE THAT THE BOUNDS OF ARRAYS "A" AND "B" DO
0*$NOT HAVE TO BE THE SAME, BUT THEIR EXTENTS MUST BE EQUAL.
0*$"A" IS THE SQUARE MATRIX FOR WHICH THE INVERSE IS TO BE
0*$COMPUTED.  ON RETURN FROM THE INVERSE SUBROUTINE, ARRAY "B" WILL
0*$BE SET TO THE COMPUTED INVERSE.
0*$.SP 1
0*$"DETERMINANT" IS ALSO DECLARED FLOAT BINARY(53).  IT WILL BE
0*$SET BY THE INVERSE SUBROUTINE TO THE DETERMINANT OF THE INVERTED
0*$MATRIX "A", OR WILL BE SET TO ZERO IF MATRIX A CANNOT BE INVERTED.
 */
 INVERSE: /* COMPUTE THE INVERSE OF A MATRIX */
          /* WRITTEN 07/05/78 BY PAUL DIXON  */
 PROCEDURE(A,B,DETERMINANT) REORDER;
 DEFAULT RANGE(*) FLOAT BINARY VALUE(BINARY FLOAT(53),
                                     BINARY FIXED(15));
 DCL A(*,*)        /* MATRIX TO BE INVERTED */;
 DCL B(*,*)        /* INVERSE OF A IF DETERMINANT ^= 0 */;
 DCL DETERMINANT   /* DETERMINANT OF A */;
 DCL (ABS,DIM,LBOUND) BUILTIN;
 DCL (LA1,LA2,LB1,LB2) FIXED             /* LOWER BOUNDS OF A & B */;
 DCL (N,N2)            FIXED             /* SIZE OF MATRICES */;
 DCL (I,J,L)           FIXED             /* LOOP INDICES */;
 DCL (ROW,COLUMN)      FIXED             /* CURRENT ROW & COLUMN */;
 DCL (MAXIMUM,PRODUCT)                   /* TEMPORARY STORAGE */;
 DCL (QUOTIENT,SUM) DEFINED(PRODUCT)     /* TEMPORARY STORAGE */;
 DCL EVEN_PERMUTATION ALIGNED BIT  /* VALUE OF "IS P EVEN?" */;
 DETERMINANT = 0;
 N = DIM(A,1);   N2 = N+N;
 IF N^=DIM(A,2) × N^=DIM(B,1) × N^=DIM(B,2) THEN RETURN;
 LA1 = LBOUND(A,1) - 1;   LA2 = LBOUND(A,2) - 1;
 LB1 = LBOUND(B,1) - 1;   LB2 = LBOUND(B,2) - 1 - N;
 BEGIN;
    DCL W(N,N2)                    /* WORK MATRIX */;
    DCL SCALE(N)                   /* ROW SCALING ARRAY */;
    DCL P(N)     FIXED             /* ROW PERMUATAION ARRAY */;
    DCL Q(N)     FIXED             /* INVERSE PERMUTATION OF P */;
    DO I = 1 TO N;
       MAXIMUM = 0;
       DO J = 1 TO N;
          W(I,J) = A(I+LA1,J+LA2);
          IF ABS(W(I,J)) > MAXIMUM THEN MAXIMUM = ABS(W(I,J));
          W(I,J+N) = 0;
       END /* DO J */;
       IF MAXIMUM = 0 THEN RETURN;
       SCALE(I) = 1 / MAXIMUM;
       W(I,I+N) = 1;
       P(I),Q(I) = I;
    END /* DO I */;
    DO COLUMN = 1 TO N-1;
       MAXIMUM = 0;
       DO J = 1 TO N;
          PRODUCT = SCALE(J) * W(J,COLUMN);
          IF PRODUCT > MAXIMUM THEN
             DO;
                MAXIMUM = PRODUCT;
                ROW = J;
             END /* PRODUCT > MAXIMUM */;
       END;
       IF P(COLUMN) ^= ROW THEN
          DO;
             P(Q(ROW)) = P(COLUMN);
             Q(P(COLUMN)) = Q(ROW);
             P(COLUMN) = ROW;
             Q(ROW) = COLUMN;
             EVEN_PERMUTATION = ^ EVEN_PERMUTATION;
          END /* P(COLUMN) ^= ROW */;
       IF W(ROW,COLUMN) = 0 THEN RETURN;
       DO I = COLUMN+1 TO N;
          L = P(I);
          QUOTIENT = W(L,COLUMN) / W(ROW,COLUMN);
          DO J = COLUMN+1 TO N2;
             W(L,J) = W(L,J) - QUOTIENT * W(ROW,J);
          END /* DO J */;
       END /* DO I */;
       SCALE(ROW) = -1;
    END /* DO COLUMN*/;
    DETERMINANT = W(P(N),N);
    IF DETERMINANT = 0 THEN RETURN;
    DO J = N+1 TO N2;
       W(P(N),J) = W(P(N),J) / DETERMINANT;
    END /* DO J */;
    DO COLUMN = N-1 TO 1 BY -1;
       ROW = P(COLUMN);
       MAXIMUM = W(ROW,COLUMN);
       DO J = N+1 TO N2;
          SUM = 0;
          DO L = COLUMN+1 TO N;
             SUM = SUM + W(ROW,L) * W(P(L),J);
          END /* DO L */;
          W(ROW,J) = (W(ROW,J) - SUM) / MAXIMUM;
       END /* DO J */;
       DETERMINANT = DETERMINANT * MAXIMUM;
    END /* DO COLUMN*/;
    IF ^ EVEN_PERMUTATION THEN DETERMINANT = - DETERMINANT;
    DO I = 1 TO N;
       DO J = N+1 TO N2;
          B(I+LB1,J+LB2) = W(P(I),J);
       END /* DO J */;
    END /* DO I */;
 END /* BEGIN */;
 END INVERSE;
