 /* VSUBSTR */
 /*
0*$.HE GENERALIZED SUBROUTINES - VSUBSTR
0*$.HE FACILITATES SUBSTR FOR VARYING STRINGS
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$02/26/79
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  VSUBSTR
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS SUBSTR SIMPLIFIES THE USE OF SUBSTR WHEN DEALING WITH
0*$VARYING CHARACTER STRINGS.  CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL VSUBSTR ENTRY(CHAR(*) VAR,
0*$  FIXED BIN(15,0), FIXED BIN(15,0),
0*$  CHAR(*));
0*$DCL OUTSTR CHAR(80) VAR INIT(
0*$  'HI THERE,');
0*$CALL VSUBSTR(OUTSTR,11,4,'TOM.');
0*$** OUTSTR NOW = 'HI THERE, TOM.' **
0*$** NOTE THAT OUTSTR WAS PADDED  **
0*$** WITH A BLANK BEFORE APPENDING **
0*$** 'TOM.'. **
 */
 VSUBSTR:  PROC(OUTSTR,OFF,LEN,INSTR) OPTIONS(REENTRANT);
         DCL OUTSTR CHAR(*) VAR;
         DCL (OFF,LEN,A,B,C,D,E,F,L) FIXED BIN(15,0);
         DCL INSTR CHAR(*);
         DCL (BLSTRA,BLSTRB) CHAR(1) VAR;
         L = LENGTH(OUTSTR);
         IF OFF <= L+1
           THEN DO;
             A = OFF-1;
             B = 0;
             BLSTRA = '';
             C = OFF+LENGTH(INSTR);
             IF C <= L
               THEN D = L-C+1;
               ELSE DO;
                 C = 1;
                 D = 0;
                 END;
             END;
           ELSE DO;
             A = L;
             B = OFF-L-2;
             BLSTRA = ' ';
             C = 1;
             D = 0;
             END;
         IF LENGTH(INSTR) < LEN
           THEN DO;
             E = LENGTH(INSTR);
             BLSTRB = ' ';
             F = LEN-LENGTH(INSTR)-1;
             END;
           ELSE DO;
             E = LEN;
             BLSTRB = '';
             F = 0;
             END;
         OUTSTR=SUBSTR(OUTSTR,1,A)××REPEAT(BLSTRA,B)××
           SUBSTR(INSTR,1,E)××REPEAT(BLSTRB,F)××SUBSTR(OUTSTR,C,D);
         END;
