   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE027,AC,MARK,MK,BOUNDS,BNDS */
   /* 1      2  3    4  5      6    */
   %INCLUDE ABESUB;
 ABESUB(ABE027) PARS(0000000000000000) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   %INCLUDE ABERHPNL;

   DCL SETCAPS ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL PREFIX ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL LASTCON CHAR(4) STATIC INIT('LAST');
   DCL FIRSTCON CHAR(5) STATIC INIT('FIRST');
   DCL STR CHAR(80) VAR;
   DCL (SAVPTR,ORGPTR) PTR;
   RHRC=0;
   SELECT(CMDINDX);
     WHEN(3,4) CALL MK; /* IT IS MARK, MK SUBCOMMANDS */
     WHEN(1,2) CALL AC; /* IT IS AC SUBCOMMAND */
     WHEN(5,6) CALL BNDS; /* IT IS BOUNDS,BNDS SUBCOMMAND */
     OTHERWISE;
     END; /* SELECT */

 AC: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS AC SUBCOMMAND                                 *
 *                                                                 *
 ******************************************************************/
   /*    1     2     3    4    */
   /* AC <STR> <COL> <LM> <RM> */
   STR = PARY(1);
   IF PARY(2)=''
     THEN DO;
       MSGDATA ='REQUIRED OPERAND MISSING';
       RHRC = 8;
       RETURN;
       END;
   LM=1; /* SET DEFAULTS */
   RM=99999999;
   IF PARY(2)=''
     THEN COL=1;
     ELSE DO;
       COL=PARY(2);
       IF PARY(4)=''
         THEN IF PARY(3)^=''
           THEN RM=PARY(3);
           ELSE;
         ELSE DO;
           LM=PARY(3);
           RM=PARY(4);
           END;
       END;
   TCOL=COL-LM+1; /* TCOL=OFFSET, RELATIVE TO START OF BUF */
   DO FOREVER=1 REPEAT FOREVER;
     CALL #ABELSP(RHHDRPT,LRNPTR); /* RECPTR ALSO W/B ALTERED */
     IF LRN_BUFP=NULL
       THEN LEAVE; /* ALL DONE */
     IF LENGTH(LSPBUF)>=LM
       THEN DO;
         I=INDEX(SUBSTR(LSPBUF,LM),STR);
         IF I^=0
           THEN DO;
             I=I+LM-1;
             IF I^=COL & I>=LM & I<=RM
               THEN CALL ADJUST; /* GO SHIFT DATA */
             END;
         END;
     END;
   SAVEFLAG ='1'B;
   RHRC = 0;
   END AC;

 BNDS: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS BNDS SUBCOMMAND                               *
 *                                                                 *
 ******************************************************************/
   DCL KEYTAB(3) CHAR(5) VAR STATIC INIT('LEFT','RIGHT','LIST');
   DCL (I,J,K,L) FIXED BIN(15,0);
   I=RH_LB;
   J=RH_RB;
   IF PARY(1)=''
     THEN PARY(1)='LIST';
   IF VERIFY(PARY(1),'0123456789')=0
     THEN DO; /* IT IS OF FORM "BNDS N1 N2 */
       I=PARY(1);
       IF PARY(2)^=''
         THEN J=PARY(2);
       CALL SETLBRB(I,J);
       RETURN;
       END;
   CALL SETCAPS(PARY(1));
   DO L = 1 TO HBOUND(KEYTAB,1)
     UNTIL(PARY(1)=SUBSTR(KEYTAB(L),1,MIN(5,LENGTH(PARY(1)))));
     END;
   K=MOD(@CURLOC,LINESIZE)-RHPMAXLN-1;
   SELECT(L);
     WHEN(1) I=K; /* LEFT */
     WHEN(2) J=K; /* RIGHT */
     WHEN(3) DO;  /* LIST */
       PUT STRING(MSGDATA) EDIT(RH_LB,RH_RB)(2 P'ZZZZZ9');
       RETURN;
       END;
     OTHERWISE DO;
       MSGDATA='INVALID KEYWORD';
       RHRC=8;
       RETURN;
       END;
     END; /* SELECT */
   CALL SETLBRB(I,J);
   RETURN;
 SETLBRB: PROC(I,J); /* NESTED SUBROUTINE TO SET BOUNDS */
   DCL (I,J) FIXED BIN(15,0);
   IF I>J
     THEN DO;
       MSGDATA='LOWER BOUND MUST BE <= UPPER BOUND';
       RHRC=8;
       RETURN;
       END;
   RH_LB=I;
   RH_RB=J;
   CALL #TABDISP(RHPPTR); /* GO CHANGE DISPLAY */
   END SETLBRB;

   END BNDS;

 MK: PROC;
 /******************************************************************
 *                                                                 *
 * CALLED TO PROCESS MK SUBCOMMAND                                 *
 *                                                                 *
 ******************************************************************/
   DCL SEQPIC PIC'ZZZZZZZ9';
   DCL IP PIC'9';
   DCL I FIXED BIN(15,0);

   IF PARY(1)='' /* IS IT LIST REQUEST? */
     THEN DO;
       DO I=1 TO 9;
         SEQPIC=MARKARY(I);
         IP=I;
         MSGDATA=MSGDATA××IP××'M='××
           SUBSTR(SEQPIC,PREFIX(SEQPIC,' '))××' ';
         END;
       RHRC = 0;
       RETURN;
       END;
   I = PARY(1);
   IF I>9 × I<1
     THEN DO;
       MSGDATA='MARK INDEX OUT OF RANGE';
       RHRC = 8;
       RETURN;
       END;
   MARKARY(I)=RH_L1;
   RHRC = 0;
   END MK;

   ADJUST:PROC;
     /******************************************************************
     * THIS SUBRTNE IS CALLED WHEN THE DATA IN THE CURRENT RECORD MUST *
     * SHIFTED SO THAT THE CHARACTER IN COLUMN I IS IN COLUMN COL      *
     ******************************************************************/
     DCL (J,K,L,M,TRM,N) FIXED;
     L=LENGTH(LSPBUF); /* CURRENT LENGTH OF CURRENT RECORD */
     M=MAXLEN(LSPBUF); /* MAXIMUM LENGTH OF CURRENT RECORD */
     TRM=MIN(RM,M); /* TEMPORARY RIGHT MARGIN */
     BUF=SUBSTR(LSPBUF,LM,MIN(L,TRM)-LM+1);
     J=I-LM+1; /* NEW INDEX VALUE */
     K=J-TCOL+1; /* K=INDEX TO CHAR TO BE SHIFTED TO COL 1 IN BUF */
     SELECT;
       WHEN(K=1) RETURN; /* NO SHIFT NECESSARY */
       WHEN(K>1) /* DATA MUST BE SHIFTED LEFT */
         IF K > LENGTH(BUF)
           THEN BUF=''; /* DATA SHIFTED TOTALLY OUT OF BUF ON LEFT */
           ELSE BUF=SUBSTR(BUF,K);
       OTHERWISE /* DATA MUST BE SHIFTED RIGHT */
         BUF=REPEAT(' ',ABS(K))××BUF;
       END; /* SELECT */
     N=TRM-LM+1;
     IF LENGTH(BUF)>N
       THEN BUF=SUBSTR(BUF,1,N); /* TRUNCATE ON RIGHT IF NECESSARY */
     IF TRM>=L
       THEN IF LM=1
         THEN LSPBUF=BUF;
         ELSE LSPBUF=SUBSTR(LSPBUF,1,LM-1)××BUF;
       ELSE DO;
         IF LENGTH(BUF)<N
           THEN BUF=BUF××REPEAT(' ',N-LENGTH(BUF)-1);
         IF LM=1
           THEN LSPBUF=BUF××SUBSTR(LSPBUF,TRM+1);
           ELSE
             LSPBUF=SUBSTR(LSPBUF,1,LM-1)××BUF××SUBSTR(LSPBUF,TRM+1);
         END;
     END ADJUST;
   END ABE027;
