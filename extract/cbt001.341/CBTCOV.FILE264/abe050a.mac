 ODD_DATESAS: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE SASDATE FROM THE SPECIFIED DATE, WHERE SASDATE *
 * IS THE NUMBER OF DAYS BETWEEN JANUARY 1, 1960, AND THAT DATE.       *
 *                                                                     *
 **********************************************************************/
   DCL (SASDATE,YYMMDD,YY,DDD,WORK,JUL) DEC FLOAT(16);

   YY=FIXED(YYMMDD/10000);
   JUL=ODD_GREGJUL(YYMMDD);

   SASDATE=0;
   SELECT;
     WHEN(YY>60) DO;
       DO WORK=60 REPEAT WORK+1 UNTIL(WORK=YY);
         IF MOD(WORK,4)=0
           THEN DDD=366;
           ELSE DDD=365;
         SASDATE=SASDATE+DDD;
         END;
       SASDATE=SASDATE-DDD; /* SASDATE FOR JANUARY OF CORRECT YEAR */
       END;
     WHEN(YY<60) DO;
       DO WORK=59 REPEAT WORK-1 UNTIL(WORK=YY);
         IF MOD(WORK,4)=0
           THEN DDD=366;
           ELSE DDD=365;
         SASDATE=SASDATE-DDD;
         END;
       /* SASDATE FOR JANUARY OF CORRECT YEAR */
       END;
     OTHERWISE; /* YY=60 */
     END; /* SELECT */

   RETURN(SASDATE+ODD_GREGJUL(YYMMDD)-YY*1000-1);
   END ODD_DATESAS;

 ODD_DOM: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DAY OF MONTH FOR THE SPECIFIED DATE (YYMMDD).  *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);
   RETURN(MOD(YYMMDD,100));
   END ODD_DOM;

 ODD_DOW: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DAY OF WEEK FOR THE SPECIFIED DATE (YYMMDD).   *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);
   DCL DOW ENTRY(FIXED DEC(5,0))
     RETURNS(FIXED BIN(15,0));

   RETURN(DOW(ODD_GREGJUL(YYMMDD)));
   END ODD_DOW;

 ODD_DOY: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DAY OF YEAR FOR THE SPECIFIED DATE (YYMMDD).   *
 *                                                                     *
 **********************************************************************/
   DCL (YYMMDD,YY) DEC FLOAT(16);

   YY=FIXED(YYMMDD/10000);
   RETURN(ODD_GREGJUL(YYMMDD)-YY*1000);
   END ODD_DOY;

 ODD_ENTRY: PROC(PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO HANDLE ENTRY FUNCTION.                                    *
 *                                                                     *
 **********************************************************************/
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL BOP(PARMCNT) FIXED BIN(31,0);
   DCL SYSENTR ENTRY(FIXED BIN(31,0),PTR) RETURNS(FIXED BIN(31,0));

   BOP=OP;
   UNSPEC(BOP(HBOUND(BOP,1)))=UNSPEC(BOP(HBOUND(BOP,1)))×'1'B;
   RETURN(SYSENTR(BOP(1),ADDR(BOP(2))));
   END ODD_ENTRY;

 ODD_FUNCTION: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL VALUE DEC FLOAT(16);
   DCL I FIXED BIN;

   SELECT(PRMPTR->TOKSTR);
     WHEN('DATESAS')  RETURN(ODD_DATESAS(OP(1)));
     WHEN('DOM')      RETURN(ODD_DOM(OP(1)));
     WHEN('DOW')      RETURN(ODD_DOW(OP(1)));
     WHEN('DOY')      RETURN(ODD_DOY(OP(1)));
     WHEN('ENTRY')    RETURN(ODD_ENTRY(PARMCNT,OP));
     WHEN('GREGJUL','DATEJUL')  RETURN(ODD_GREGJUL(OP(1)));
     WHEN('HEX')      RETURN(ODD_HEX(OP(1)));
     WHEN('HOLIDAY')  RETURN(ODD_HOLIDAY(OP(1)));
     WHEN('JULGREG','JULDATE')  RETURN(ODD_JULGREG(OP(1)));
     WHEN('MONTH')    RETURN(ODD_MONTH(OP(1)));
     WHEN('MONTHEND') RETURN(ODD_MONTHEND(OP(1)));
     WHEN('PEEK')     RETURN(ODD_PEEK(OP(1),OP(2)));
     WHEN('QTR')      RETURN(ODD_QTR(OP(1)));
     WHEN('SASDATE')  RETURN(ODD_SASDATE(OP(1)));
     WHEN('SBA')      RETURN(ODD_SBA(OP(1)));
     WHEN('SBADEC')   RETURN(ODD_SBADEC(OP(1)));
     WHEN('WORK')     RETURN(ODD_WORK(OP(1)));
     WHEN('WORKDAY')  RETURN(ODD_WORKDAY(OP(1)));
     WHEN('WORKDOM')  RETURN(ODD_WORKDOM(OP(1)));
     WHEN('WORKDOW')  RETURN(ODD_WORKDOW(OP(1)));
     WHEN('WORKOFF')  RETURN(ODD_WORKOFF(OP(1),OP(2)));
     WHEN('YEAR')     RETURN(ODD_YEAR(OP(1)));
     OTHERWISE RETURN(ODD_FUNCTION_RUN(MSG,PRMPTR,PARMCNT,OP));
     END; /* SELECT */
   RETURN(0);
   END ODD_FUNCTION;

 ODD_FUNCTION_RUN: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16))
  RECURSIVE;
 /**********************************************************************
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL VALUE DEC FLOAT(16);
   DCL I FIXED BIN;
   DCL CMD CHAR(1024) VAR;
   DCL NAME CHAR(8) VAR;

   CMD='RUN '××PRMPTR->TOKSTR;
   DO I=1 TO PARMCNT;
     CMD=CMD××' '××CALCPRT(OP(I));
     END;
   I=#CMD(CMD,RHPTR,RHHDRPT);
   IF I^=0
     THEN DO;
       MSG='UNIDENTIFIED FUNCTION = '××PRMPTR->TOKSTR;
       SIGNAL CONDITION(BADEXP);
       END;
   NAME=PRMPTR->TOKSTR;
   NAME=SUBSTR(NAME,1,SUFFIX(NAME,' '));
   RETURN(#SYMA(RHHDRPT,RH_SYMTREE,NAME));
   END ODD_FUNCTION_RUN;

 ODD_GREGJUL: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE EQUIVALENT JULIAN DATE (YYDDD).                *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);
   DCL GREGPIC PIC'999999',
       GREGORIAN CHAR(6) BASED(ADDR(GREGPIC));
   DCL GREGJUL ENTRY(CHAR(6)) RETURNS(FIXED DEC(5,0));

   GREGPIC=YYMMDD;
   RETURN(GREGJUL(SUBSTR(GREGORIAN,3,4)××SUBSTR(GREGORIAN,1,2)));
   END ODD_GREGJUL;

 ODD_HEX: PROC(OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO SET MSGDATA TO THE PRINTABLE HEX EQUIVALENT.              *
 *                                                                     *
 **********************************************************************/
   DCL OP DEC FLOAT(16);
   DCL PREFIX ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));

   DCL TROUT ENTRY;
   DCL BIN FIXED BIN(31,0),
       INSTR CHAR(4) BASED(ADDR(BIN));
   DCL OUTSTR CHAR(8);

   BIN=OP;
   CALL TROUT(INSTR,OUTSTR);
   IF SUPPRESS=1
     THEN MSGDATA=SUBSTR(OUTSTR,PREFIX(OUTSTR,'0'));
     ELSE MSGDATA=OUTSTR;
   RETURN(OP);
   END ODD_HEX;

 ODD_HOLIDAY: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE EQUIVALENT JULIAN DATE (YYDDD).                *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);
   DCL GREGPIC PIC'999999';

   GREGPIC=YYMMDD;
   RETURN(#HOLIDAY(GREGPIC));
   END ODD_HOLIDAY;

 ODD_JULGREG: PROC(YYDDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE EQUIVALENT GREGORIAN DATE (YYMMDD).            *
 *                                                                     *
 **********************************************************************/
   DCL (YYDDD,YY) DEC FLOAT(16);
   DCL JULIAN FIXED DEC(5,0);
   DCL GREGPIC PIC'999999',
       GREGORIAN CHAR(6) BASED(ADDR(GREGPIC));
   DCL JULGREG ENTRY(CHAR(6), FIXED DEC(5,0));

   JULIAN=YYDDD;
   CALL JULGREG(GREGORIAN,JULIAN);
   RETURN(SUBSTR(GREGORIAN,5,2)××SUBSTR(GREGORIAN,1,4));
   END ODD_JULGREG;

 ODD_MONTH: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE MONTH (1-12) FOR THE SPECIFIED DATE (YYMMDD).  *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   RETURN((MOD(YYMMDD,10000)-MOD(YYMMDD,100))/100);
   END ODD_MONTH;

 ODD_MONTHEND: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DATE OF THE LAST DAY OF THE SPECIFIED DATE.    *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);
   DCL MONTHEN ENTRY(FIXED DEC(5,0),FIXED BIN(15,0))
     RETURNS(FIXED DEC(5,0));

   RETURN(ODD_JULGREG(MONTHEN(ODD_GREGJUL(YYMMDD),0)));
   END ODD_MONTHEND;

 ODD_PEEK: PROC(OP1,OP2) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE VALUE FROM MEMORY POINTED TO BY OP1 FOR A      *
 * LENGTH OF OP2                                                       *
 *                                                                     *
 **********************************************************************/
   DCL (OP1,OP2) DEC FLOAT(16);

   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL MVCLXA ENTRY(FIXED BIN(31,0),FIXED BIN(31,0),FIXED BIN(31,0),
     FIXED BIN(31,0));

   DCL CH CHAR(1) BASED(CHP);
   DCL I FIXED BIN(31,0) INIT(0),
       ICH(4) CHAR(1) BASED(ADDR(I));
   DCL (J,K) FIXED BIN(31,0);
   DCL (FROMADDR,TOADDR,FROMLENGTH,TOLENGTH) FIXED BIN(31,0);

   J=MIN(OP2,4);
   IF J<=0
     THEN J=4;
   FROMLENGTH,TOLENGTH=J;
   FROMADDR=OP1;
   TOADDR=PTRIN(ADDR(I))+(4-J);
   CALL MVCLXA(TOADDR,TOLENGTH,FROMADDR,FROMLENGTH);
   RETURN(I);
   END ODD_PEEK;

 ODD_QTR: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE QTR (1-4) FOR THE SPECIFIED DATE (YYMMDD).     *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   SELECT(ODD_MONTH(YYMMDD));
     WHEN(1,2,3) RETURN(1);
     WHEN(4,5,6) RETURN(2);
     WHEN(7,8,9) RETURN(3);
     OTHERWISE   RETURN(4);
     END; /* SELECT */
   END ODD_QTR;

 ODD_SASDATE: PROC(SASDATE) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DATE (YYMMDD) FROM THE SPECIFIED SASDATE,      *
 * WHICH IS THE NUMBER OF DAYS BETWEEN JANUARY 1, 1960, AND THAT DATE. *
 *                                                                     *
 **********************************************************************/
   DCL (SASDATE,YYMMDD,YY,DDD,WORK) DEC FLOAT(16);

   IF SASDATE>=0
     THEN DO;
       WORK=0;
       DO YY=60  REPEAT YY+1 UNTIL(WORK>SASDATE);
         IF MOD(YY,4)=0
           THEN DDD=366;
           ELSE DDD=365;
         WORK=WORK+DDD;
         END;
       /* YY CONTAINS THE CORRECT YEAR */
       DDD=SASDATE-(WORK-DDD)+1; /* DDD CONTAINS THE CORRECT DAY */
       END;
     ELSE DO; /* SASDATE<0 */
       WORK=0;
       DO YY=59 REPEAT YY-1 UNTIL(WORK<SASDATE);
         IF MOD(YY,4)=0
           THEN DDD=366;
           ELSE DDD=365;
         WORK=WORK-DDD;
         END;
       /* YY CONTAINS THE CORRECT YEAR */
       DDD=SASDATE-WORK+1;   /* DDD CONTAINS THE CORRECT DAY */
       END;
   RETURN(ODD_JULGREG(YY*1000+DDD));
   END ODD_SASDATE;

 ODD_SBA: PROC(DEC) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO CALCULATE THE SBA ADDRESS VALUE TO BE PASSED TO A 3270    *
 * TERMINAL GIVEN THE RELATIVE POSITION ON THE SCREEN.                 *
 *                                                                     *
 **********************************************************************/
   DCL DEC DEC FLOAT(16);
   DCL SBACONV ENTRY;
   DCL SBADDR FIXED BIN(15,0);
   DCL SWITCH BIT(1) INIT('1'B);

   SBADDR=DEC;
   CALL SBACONV(SBADDR,SWITCH);
   RETURN(SBADDR);
   END ODD_SBA;

 ODD_SBADEC: PROC(DEC) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO CALCULATE THE RELATIVE POSITION ON THE SCREEN BASED ON    *
 * THE SBA ADDRESS ARGUMENT.                                           *
 *                                                                     *
 **********************************************************************/
   DCL DEC DEC FLOAT(16);
   DCL SBACONV ENTRY;
   DCL SBADDR FIXED BIN(15,0);
   DCL SWITCH BIT(1) INIT('0'B);

   SBADDR=DEC;
   CALL SBACONV(SBADDR,SWITCH);
   RETURN(SBADDR);
   END ODD_SBADEC;

 ODD_WORKCOM: PROC(START,END) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE NUMBER OF WORKDAYS IN THE SPECIFIED RANGE OF   *
 * SAS DATES.                                                          *
 *                                                                     *
 **********************************************************************/
   DCL (START,END,WORK,WORKDAYS,DOW,YYMMDD)  DEC FLOAT(16);
   DCL PIC PIC'999999';

   WORKDAYS=0;
   DO WORK=START REPEAT WORK+1 UNTIL(WORK>=END);
     YYMMDD=ODD_SASDATE(WORK); /* CONVERT TO YYMMDD FORMAT */
     DOW=ODD_DOW(YYMMDD);
     PIC=YYMMDD;
     IF ^#HOLIDAY(PIC) & DOW^=1 & DOW^=7
       THEN WORKDAYS=WORKDAYS+1;
     END;
   RETURN(WORKDAYS);
   END ODD_WORKCOM;

 ODD_WORK: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF YYMMDD IS A WORK DAY.                        *
 *                                                                     *
 **********************************************************************/
   DCL (YYMMDD,DOW) DEC FLOAT(16);

   DOW=ODD_DOW(YYMMDD);
   IF DOW^=1 & DOW^=7 & ODD_HOLIDAY(YYMMDD)=0
     THEN RETURN(1);  /* IT IS WORKDAY */
     ELSE RETURN(0);  /* IT IS NOT WORKDAY */
   END ODD_WORK;

 ODD_WORKDAY: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE WORKDAY FROM THE BEGINNING OF THE YEAR TO THE  *
 * SPECIFIED DATE.                                                     *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   RETURN(ODD_WORKCOM(ODD_DATESAS(YYMMDD-MOD(YYMMDD,10000)+0101),
     ODD_DATESAS(YYMMDD)));
   END ODD_WORKDAY;

 ODD_WORKDOM: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE WORKDAY FROM THE BEGINNING OF THE MONTH TO THE *
 * SPECIFIED DATE.                                                     *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   RETURN(ODD_WORKCOM(ODD_DATESAS(YYMMDD-MOD(YYMMDD,100)+1),
     ODD_DATESAS(YYMMDD)));
   END ODD_WORKDOM;

 ODD_WORKDOW: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE WORKDAY FROM THE BEGINNING OF THE YEAR TO THE  *
 * SPECIFIED DATE.                                                     *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   RETURN(ODD_WORKCOM(ODD_DATESAS(YYMMDD)-ODD_DOW(YYMMDD)+1,
     ODD_DATESAS(YYMMDD)));
   END ODD_WORKDOW;

 ODD_WORKOFF: PROC(YYMMDD,OFF) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DATE OFF WORKDAYS FROM YYMMDD.                 *
 *                                                                     *
 **********************************************************************/
   DCL (YYMMDD,OFF) DEC FLOAT(16);
   DCL (DOW,INCR,WORK)  DEC FLOAT(16);
   DCL PIC PIC'999999';

   IF OFF>=0
     THEN INCR=1;
     ELSE INCR=-1;
   OFF=ABS(OFF);
   IF ODD_WORK(YYMMDD)=0
     THEN OFF=OFF-1;
   WOL: DO WORK=ODD_DATESAS(YYMMDD) REPEAT WORK+INCR;
     YYMMDD=ODD_SASDATE(WORK); /* CONVERT TO YYMMDD FORMAT */
     IF ODD_WORK(YYMMDD)=1
       THEN DO;
         OFF=OFF-1;
         IF OFF<0
           THEN LEAVE WOL;
         END;
     END;
   RETURN(YYMMDD);
   END ODD_WORKOFF;

 ODD_YEAR: PROC(YYMMDD) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE YEAR FROM THE SPECIFIED DATE (YYMMDD).         *
 *                                                                     *
 **********************************************************************/
   DCL YYMMDD DEC FLOAT(16);

   RETURN(FIXED(YYMMDD/10000));
   END ODD_YEAR;

