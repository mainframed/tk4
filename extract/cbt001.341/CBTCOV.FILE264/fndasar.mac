 FNDASAR:  PROC(STARTPTR,CONTROL,CSELPTR) RETURNS(BIT(1));
    DCL (STARTPTR,CSELPTR) PTR;
    DCL CONTROL CHAR(2) VAR;
    /* THIS SUBROUTINE IS CALLED TO SCAN A CHAIN OF ASARELS.
       STARTPTR WILL POINT TO THE FIRST ASARELS TO BE SCANNED.
       CSELPTR WILL POINT TO THE ASSOCIATIVE ADDRESS TO BE FOUND.
       CONTROL WILL BE EITHER '=' OR '>=' TO INDICATE THE CONDITION
       THAT SHOULD BE CONSIDERED A MATCH.  IF '>=' IS SPECIFIED,
       THE ASSOCIATIVE ADDRESS IN THE ASARELS MUST BE GREATER THAN OR
       EQUAL TO THE ASSOCIATIVE ADDRESS POINTED TO BY CSELPTR.
       IF A MATCH IS FOUND, STARTPTR WILL BE SET TO THE ADDRESS OF THE
       MATCHING ASARELS, AND FNDASAR WILL RETURN '1'B.  IF A MATCH IS
       NOT FOUND, STARTPTR WILL BE SET TO THE ADDRESS OF THE NEXT
       LOWER ASARELS, AND FNDASAR WILL RETURN '0'B.  IF A NONMATCH
       CONDITION IS DETECTED ON THE ASARELS POINTED TO BY STARTPTR,
       STARTPTR WILL BE SET TO STARTPTR->ASARLP.
       SETTING CONTROL='XX' GETS YOU THE LAST ELEMENT IN CHAIN.
       */
    % INCLUDE ASARDCL;
    DCL (TPT,SPT) PTR;
    DCL RET BIT(1);
    IF STARTPTR=NULL
      THEN RETURN('0'B);
    RET='0'B;
    DO TPT=STARTPTR REPEAT TPT->ASARNP WHILE(TPT^=NULL) UNTIL(RET);
      SPT=TPT;
      SELECT(CONTROL);
        WHEN('XX');
        WHEN('>=') IF TPT->ASARELIX->CSESTR >= CSELPTR->CSESTR
          THEN RET='1'B;
        WHEN('=') IF TPT->ASARELIX->CSESTR = CSELPTR->CSESTR
          THEN RET='1'B;
        END;
      END;
    IF RET
      THEN STARTPTR=TPT;
      ELSE IF TPT=NULL
        THEN STARTPTR=SPT;
        ELSE STARTPTR=TPT->ASARLP;
    RETURN(RET);
    END FNDASAR;
