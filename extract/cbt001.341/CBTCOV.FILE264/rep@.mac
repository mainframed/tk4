 /* REP@ */
 /*
 *$.HE GENERALIZED SUBROUTINES - REP@
 *$.HE REPLACEMENT FUNCTION FOR TEXT VARIABLES
 *$.PL 55
 *$.PN 0
 *$.PA
 *$.SS
 *$.NF
 *$09/10/76
 *$AUTHOR:  T. SMITH
 *$SOURCE MODULE NAME:  REP@
 *$DOCUMENTATION ID:  0*$
 *$.FI L
 *$.SP 5
 *$THIS PROCEDURE CAN BE INVOKED TO PERFORM REPLACEMENT OF
 *$VARIABLES IN A CHARACTER STRING WITH VALUES THEY HAVE BEEN
 *$PREVIOUSLY BEEN ASSIGNED.  SEE ALSO DOCUMENTATION FOR THE SYM@
 *$AND SET@ SUBROUTINES.  CALL FORMAT IS AS FOLLOWS -
 *$.SP 1
 *$.IN 5
 *$CALL REP@(BUFFER);
 *$.IN 0
 *$.SP 1
 *$WHERE BUFFER IS DECLARED AS FOLLOWS -
 *$.SP 1
 *$.IN 5
 *$.NF
 *$DCL 1 BUFFER,
 *$     2 BUFLEN FIXED BIN(15,0),
 *$     2 OFFSET FIXED BIN(15,0),
 *$     2 BUF CHAR(*);
 *$.FI L
 *$.IN 0
 *$.SP 1
 *$BUFLEN MUST CONTAIN THE LENGTH OF TEXT IN BUF PLUS 4, NOT
 *$COUNTING BLANKS PADDED ON THE RIGHT.  NOTE THAT SUFFICIENT SPACE
 *$SHOULD BE ALLOWED FOR EXPANSION AS THE VARIABLES IN BUF
 *$ARE REPLACED WITH THEIR ASSIGNED VALUES.  AS REPLACEMENT OCCURS,
 *$REP@ WILL UPDATE BUFLEN TO REFLECT EXPANSION OR CONTRACTION OF THE
 *$TEXT.
 */
 REP@:  PROC(BUF) OPTIONS(REENTRANT);
         DCL 1 BUF,
              2 BUFLEN FIXED BIN(15,0),
              2 OFFSET FIXED BIN(15,0),
              2 BUFFER CHAR(*);
         DCL (LCLC,SYMC) ENTRY RETURNS(CHAR(256) VARYING);
         DCL TXT CHAR(256) VARYING;
         IL = LENGTH(BUFFER);
         INDX = 0;
 NXT:
         IF INDX >= BUFLEN-4
              THEN RETURN;
         I = INDEX(SUBSTR(BUFFER,INDX+1,BUFLEN-4-INDX),'&');
         IF I = 0
              THEN RETURN;
         INDX = INDX+I;
         IF SUBSTR(BUFFER,INDX+1,1) = '&'
              THEN DO;
                   BUFLEN = BUFLEN-1;
                   SUBSTR(BUFFER,INDX+1,IL-INDX) =
                     SUBSTR(BUFFER,INDX+2,IL-INDX-1);
                   GO TO NXT;
                   END;
         CALL PREFIX(SUBSTR(BUFFER,INDX+1,7),
           'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',I);
         IF I = 0
              THEN I = 8;
         TXT = SYMC(SUBSTR(BUFFER,INDX,I));
         L = LENGTH(TXT);
         IF SUBSTR(BUFFER,INDX+I,1) = '.'
              THEN I = I + 1;
         BUFLEN = BUFLEN-I+L;
         IF BUFLEN > IL
              THEN BUFLEN = IL;
         J = INDX+I;
         IF IL > J
              THEN SUBSTR(BUFFER,INDX,IL-INDX) = TXT ××
                SUBSTR(BUFFER,J,IL-J);
              ELSE SUBSTR(BUFFER,INDX,IL-INDX) = TXT;
         INDX = INDX - 1;
         GO TO NXT;
         END;
