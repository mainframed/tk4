 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE064,GEDIT,GED,GPRINT,GPR,MOVEPEN,MOVEP,DRAW,DR,NEWPEN,TEXT, */
 /* 1      2     3   4      5   6       7     8    9  10     11    */
 /* LINEWT,GTEST,GSAS,CITPIC,GSASR PD PU GFILL GR79 */
 /* 12     13    14   15     16    17 18 19    20   */
   %INCLUDE ABESUB;
 ABESUB(ABE064) RENT(NO)
   PARS(00000000000000000000) RECURS(YES) CHECK(YES);
   %INCLUDE ABESUBA;
   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;
   DCL 1 SET07 BASED(RHPLOT79_SET07),
   %INCLUDE ABE063J;
   %INCLUDE ABE064I;
   %INCLUDE ABE79ENT;

   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL SETCAPS ENTRY;
   DCL ABE064A ENTRY(PTR,PTR,CHAR(*) VAR,CHAR(*) VAR);
   DCL ABE064B ENTRY;
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);

   DCL HELPSTR CHAR(4) VAR INIT('');
   DCL DUM1 FIXED BIN(31,0) BASED(DUM1PTR),
       DUM2 FIXED BIN(31,0) BASED(DUM2PTR),
       DUM3 FIXED BIN(31,0) BASED(DUM3PTR),
       DUM4 FIXED BIN(31,0) BASED(DUM4PTR),
       DUM5 FIXED BIN(31,0) BASED(DUM5PTR),
       DUM6 FIXED BIN(31,0) BASED(DUM6PTR),
       DUM7 FIXED BIN(31,0) BASED(DUM7PTR);
   DCL (F1,F2,F3,F4) DEC FLOAT(6);
   DCL PIXELS BIT(1) STATIC INIT('1'B);
   DCL INCHES BIT(1) STATIC INIT('0'B);
   DCL TXT CHAR(256) VAR;
   DCL FILLSTACK PTR;
   DCL 1 FILLSTR BASED(FILLPTR),
     2 PRIOR_FILL PTR,
     2 X FIXED BIN(31,0),
     2 Y FIXED BIN(31,0);

   IF CMDINDX=20 /* GR79? */
     THEN DO;
       IF RHPLOT79^=NULL & RHGRSW='0'B
         THEN DO;
           MSGDATA='ERROR - SHORT FORM OF GR SUBCOMMAND ALREADY IN USE';
           RHRC=16;
           END;
         ELSE RHGRSW='1'B;
       RETURN;
       END;
   IF CMDINDX^=14 /* DO ONLY IF NOT GSAS SUBCOMMAND */
     THEN IF RHPLOT79=NULL
       THEN I=#CMD('GR',RHPTR,RHHDRPT);
   IF RHGRP=NULL
     THEN ALLOC ABE064I SET(RHGRP);
   SELECT(CMDINDX);
     WHEN(1) /* ABE064 */
       RETURN; /* INITIALIZATION */
     WHEN(2,3) /* ABE064,GEDIT,GED */
       CALL ABE064B(RHPTR,RHHDRPT,PARY(1)); /* DISPLAY */
     WHEN(4,5) DO; /* GPRINT,GPR */
       IF PARY(1)=''
         THEN PARY(1)=GRLDEST;
       GRLDEST=PARY(1);
       IF PARY(2)=''
         THEN PARY(2)=GRLTYPE;
       GRLTYPE=PARY(2);
       CALL ABE064A(RHPTR,RHHDRPT,PARY(1),PARY(2)); /* PRINT */
       END;
     WHEN(6,7)  /* MOVEPEN,MOVEP */
       CALL DMCALL(DO_MOVE);
     WHEN(8,9)  /* DRAW,DR */
       CALL DMCALL(DO_DRAW);
     WHEN(10) DO; /* NEWPEN */
       IF VERIFY(PARY(1),'123456789')^=0 × LENGTH(PARY(1))>1
         THEN DO;
           MSGDATA='INVALID PEN SPECIFICATION='××PARY(1);
           RHRC=8;
           RETURN;
           END;
       CURPEN=PARY(1);
       END;
     WHEN(11) DO; /* TEXT <TEXT> <HEIGHT> <FONT> <WSCALE> <SWCHAR> */
                  /*      1      2        3      4        5        */
       IF ^RHGRSW
         THEN DO;
           MSGDATA='TEXT SUBCOMMAND NOT USEABLE - SEE GR79 SUBCOMMAND';
           RHRC=16;
           RETURN;
           END;
       IF PARY(3)=''
         THEN IF GRLFONT=''
           THEN PARY(3)='TR'; /* DEFAULT TO TRIPLEX ROMAN */
           ELSE PARY(3)=GRLFONT; /* OR LAST FONT USED */
         ELSE DO;
           CALL SETCAPS(PARY(3));
           SELECT(PARY(3));
             WHEN('KR','KG','IR','II','IG','SR','SS','SG','CR','CI',
               'CG','CS','DR','TR','GE','GI','GG','CC');
             OTHERWISE DO;
               MSGDATA='INVALID FONT ID='××PARY(3);
               RHRC=8;
               RETURN;
               END;
             END; /* SELECT */
           GRLFONT=PARY(3);
           END;
       SELECT(PARY(5));
         WHEN('') PARY(5)='''=''';
         WHEN('0');
         OTHERWISE DO;
           CALL SETCAPS(PARY(5));
           PARY(5)=''''××PARY(5)××'''';
           END;
         END; /* SELECT */
       I=#CMD('GR SYMSF ''UC'××PARY(3)××'1'' '××PARY(5),RHPTR,RHHDRPT);
       /* FIRST SET WSCALE */
       IF PARY(4)=''
         THEN PARY(4)='1.0';
       /* NOW SET HEIGHT */
       IF PARY(2)=''
         THEN PARY(2)='.1';
       I=#CMD('GR SYMSZ '××CALCPRT(PARY(4))××' '××
         CALCPRT(CONVERT('Y',PARY(2),INCHES)),RHPTR,RHHDRPT);
       TXT='';
       DO I=1 TO LENGTH(PARY(1));
         IF SUBSTR(PARY(1),I,1)=''''
           THEN TXT=TXT××'''';
         TXT=TXT××SUBSTR(PARY(1),I,1);
         END;
       I=#CMD('GR SYMTX '''××TXT××''' 1 '××CALCPRT(LENGTH(PARY(1))),
         RHPTR,RHHDRPT);
       END;
     WHEN(12) /* LINEWT */
       LINEWT=PARY(1);
     WHEN(13); /* GTEST */
     WHEN(14) /* GSAS */
       CALL GSAS;
     WHEN(15) /* CITPIC */
       CALL ABE064A(RHPTR,RHHDRPT,'PIC','');
     WHEN(16) DO; /* GSASR X Y DEST TYPE DDNAME */
       IF PARY(4)=''
         THEN PARY(4)=GRLTYPE;
       CALL GSAS_READ(PARY(1),PARY(2),PARY(3),PARY(4),PARY(5));
       END;
     WHEN(17) /* PD X1 Y1 X2 Y2 . . . */
       DO I=1 TO HBOUND(PARY,1)-1 BY 2 WHILE(PARY(I)^='');
         CALL #LINA2(FLOAT(PARY(I)),FLOAT(PARY(I+1)));
         END;
     WHEN(18)  /* PU X Y */
       CALL #MOVA2(FLOAT(PARY(1)),FLOAT(PARY(2)));
     WHEN(19)  /* GFILL X Y */
       CALL DMCALL(DO_FILL);
     OTHERWISE DO;
       MSGDATA='INVALID CMDINDX='××CALCPRT(CMDINDX);
       RHRC=8;
       END;
     END; /* SELECT */

 CONVERT: PROC(COORD,VALUE,PIXEL) RETURNS(DEC FLOAT(6));
 /**********************************************************************
 *                                                                     *
 * CALLED TO CONVERT A COORDINATE VALUE IN INCHES OR PIXELS TO A VALUE *
 * IN NDS COORDINATES.                                                 *
 *                                                                     *
 **********************************************************************/
   DCL COORD CHAR(1);
   DCL (VALUE,WRK) DEC FLOAT(6);
   DCL PIXEL BIT(1);

   IF COORD='X'
     THEN IF PIXEL
       THEN RETURN((VALUE-1)/PLMAXX);
       ELSE RETURN(PLXDPI*VALUE/PLMAXX);
     ELSE IF PIXEL
       THEN RETURN((VALUE-1)/PLMAXY);
       ELSE RETURN(PLYDPI*VALUE/PLMAXY);
   END CONVERT;

 DMCALL: PROC(EP);
 /**********************************************************************
 *                                                                     *
 * CALLED TO INTERFACE TO MOVEP AND DRAW.                              *
 *                                                                     *
 **********************************************************************/
   DCL EP ENTRY(DEC FLOAT(6),DEC FLOAT(6),DEC FLOAT(6));

   DO I=1 TO 3;
     IF PARY(I)=''
       THEN PARY(I)='+0';
     END;
   IF PARY(4)=''
     THEN PARY(4)='INCHES';
     ELSE CALL SETCAPS(PARY(4)); /* S/B INCHES PIXELS, OR NDC */
   I=LENGTH(PARY(4));
   SELECT;
     WHEN(I>6) DO; /* INVALID KEYWORD */
       MSGDATA='INVALID KEYWORD='××PARY(4);
       RHRC=8;
       RETURN;
       END;
     WHEN(SUBSTR('INCHES',1,I)=PARY(4))
       CALL EP(
         PARSE('X',PARY(1),INCHES),
         PARSE('Y',PARY(2),INCHES),
         PARSE('Z',PARY(3),INCHES)
         );
     WHEN(SUBSTR('PIXELS',1,I)=PARY(4))
       CALL EP(
         PARSE('X',PARY(1),PIXELS),
         PARSE('Y',PARY(2),PIXELS),
         PARSE('Z',PARY(3),PIXELS)
         );
     WHEN(SUBSTR('NDC',1,I)=PARY(4))
       CALL EP(
         FLOAT(PARY(1)),
         FLOAT(PARY(2)),
         FLOAT(PARY(3))
         );
     OTHERWISE DO; /* INVALID KEYWORD */
       MSGDATA='INVALID KEYWORD='××PARY(4);
       RHRC=8;
       RETURN;
       END;
     END; /* SELECT */
   END DMCALL;

 DO_DRAW: PROC(NEWX,NEWY,NEWZ);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DRAW FROM CURRENT TO NEW LOCATION.                        *
 *                                                                     *
 **********************************************************************/
   DCL (NEWX,NEWY,NEWZ) DEC FLOAT(6);
   DCL (MEWX,MEWY,MEWZ) DEC FLOAT(6);

   MEWX=NEWX;
   MEWY=NEWY;
   MEWZ=NEWZ;
   CALL #LINA3(MEWX,MEWY,MEWZ);
   CPWCX=NEWX;
   CPWCY=NEWY;
   CPWCZ=NEWZ;
   END DO_DRAW;

 DO_FILL: PROC(PX,PY,PZ);
 /**********************************************************************
 *                                                                     *
 * CALLED TO FILL FROM CURRENT LOCATION.                               *
 *                                                                     *
 **********************************************************************/
   DCL (PX,PY,PZ) DEC FLOAT(6);
   DCL (I,J) FIXED BIN(31,0);
   DCL CH CHAR(1);

   I=FIXED(PX*MAXBTX+.5)+1;
   J=FIXED(PY*MAXBTY+.5)+1;
   IF DO_FILL_OK(I,J)=0
     THEN RETURN;
   FILLSTACK,FILLPTR=NULL;
   CALL DO_FILL_PUSH(I,J);
   DO UNTIL(FILLSTACK=NULL);
     CALL #PIXPUT(X,Y,CURPEN,RHPLOT79);
     I=X; J=Y; /* SAVE X,Y */
     CALL DO_FILL_POP;
     IF DO_FILL_OK(I-1,J)=1
       THEN CALL DO_FILL_PUSH(I-1,J);
     IF DO_FILL_OK(I+1,J)=1
       THEN CALL DO_FILL_PUSH(I+1,J);
     IF DO_FILL_OK(I,J-1)=1
       THEN CALL DO_FILL_PUSH(I,J-1);
     IF DO_FILL_OK(I,J+1)=1
       THEN CALL DO_FILL_PUSH(I,J+1);
     END;
   END DO_FILL;

 DO_FILL_OK: PROC(PX,PY) RETURNS(FIXED BIN(15,0));
 /**********************************************************************
 *                                                                     *
 * CALLED TO CHECK IF A FILL LOCATION IS OK.  RETURNS 1 IF OK          *
 *                                                                     *
 **********************************************************************/
   DCL (PX,PY) DEC FLOAT(6);
   DCL CH CHAR(1);

   IF PX<1 × PX>MAXBTX
     THEN RETURN(0);
   IF PY<1 × PY>MAXBTY
     THEN RETURN(0);
   CH=#PIXGET(PX,PY,RHPLOT79);
   IF CH^='0' & CH^=' ' & CH^=LOW(1)
     THEN RETURN(0);
   RETURN(1);
   END DO_FILL_OK;

 DO_FILL_POP: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO REMOVE ELEMENT FROM FILL STACK.                           *
 *                                                                     *
 **********************************************************************/

   FILLSTACK=PRIOR_FILL;
   FREE FILLSTR;
   FILLPTR=FILLSTACK;
   END DO_FILL_POP;

 DO_FILL_PUSH: PROC(PX,PY);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PUSH ELEMENT ON FILL STACK.                               *
 *                                                                     *
 **********************************************************************/
   DCL (PX,PY) FIXED BIN(31,0);

   ALLOCATE FILLSTR;
   PRIOR_FILL=FILLSTACK;
   FILLSTACK=FILLPTR;
   X=PX;
   Y=PY;
   END DO_FILL_PUSH;

 DO_MOVE: PROC(NEWX,NEWY,NEWZ);
 /**********************************************************************
 *                                                                     *
 * CALLED TO MOVE PEN.                                                 *
 *                                                                     *
 **********************************************************************/
   DCL (NEWX,NEWY,NEWZ) DEC FLOAT(6);
   DCL (MEWX,MEWY,MEWZ) DEC FLOAT(6);

   MEWX=NEWX;
   MEWY=NEWY;
   MEWZ=NEWZ;
   CALL #MOVA3(MEWX,MEWY,MEWZ);
   CPWCX=NEWX;
   CPWCY=NEWY;
   CPWCZ=NEWZ;
   END DO_MOVE;

 DOPLOT: PROC(XN,YN,IPEN);
 /**********************************************************************
 *                                                                     *
 * CALLED TO MOVE THE PEN, AND PERHAPS DRAW AT THE SAME TIME.          *
 *                                                                     *
 **********************************************************************/
   DCL (XN,YN) DEC FLOAT(6);
   DCL (I,IPEN) FIXED BIN;

   SELECT(IPEN);
     WHEN(3) CALL DO_MOVE(
       CONVERT('X',XN,INCHES),
       CONVERT('Y',YN,INCHES),
       0);   /*MOVE*/
     WHEN(-3) CALL DO_MOVE(
       CONVERT('X',XN,INCHES),
       CONVERT('Y',YN,INCHES),
       0);  /*MOVE AND RESET ORIGIN?*/
     WHEN(999) CALL DO_MOVE(
       CONVERT('X',XN,INCHES),
       CONVERT('Y',YN,INCHES),
       0); /*MOVE AND TERMINATE PLOT*/
     WHEN(2) CALL DO_DRAW(
       CONVERT('X',XN,INCHES),
       CONVERT('Y',YN,INCHES),
       0);   /*DRAW*/
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */
   END DOPLOT;

 DOSYMBOL: PROC(XN,YN,HEIGHT,ANGLE,TEXT);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PLACE A STRING OF TEXT ON THE PLOT. NULL PROGRAM FOR NOW. *
 *                                                                     *
 **********************************************************************/
   DCL (ANGLE,HEIGHT,RADIUS,XN,YN,XO,YO) DEC FLOAT(6);
   DCL NCHAR FIXED BIN;
   DCL TEXT CHAR(*) VAR;
   DCL NAM CHAR(8);
   DCL I FIXED BIN;

   RETURN;
   END DOSYMBOL;

 GSAS: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A GSAS SUBCOMMAND.                                *
 *                                                                     *
 **********************************************************************/
   DCL (HSIZE,X1,Y1,X2,Y2,VSIZE) DEC FLOAT(6);
   DCL I FIXED BIN;
   DCL (GSASPTR,SAVRH,TRH) PTR;

   IF PARY(1)=''
     THEN X1=0;
     ELSE X1=PARY(1);
   IF PARY(2)=''
     THEN Y1=0;
     ELSE Y1=PARY(2);
   IF PARY(3)=''
     THEN X2=10.2;
     ELSE X2=PARY(3);
   IF PARY(4)=''
     THEN Y2=7;
     ELSE Y2=PARY(4);
   HSIZE=X2-X1;
   VSIZE=Y2-Y1;
   IF HSIZE<=0 × VSIZE<=0
     THEN DO;
       MSGDATA='ERROR - (X1,Y1) MUST BE LOW AND LEFT OF (X2,Y2)';
       RHRC=8;
       RETURN;
       END;
   SAVRH=RHPTR;
   I=#CMD('ABE '' NON NAME(GSAS@@@)',RHPTR,RHHDRPT);
   IF I^=0 × RHNAME^='GSAS@@@'
     THEN DO;
       MSGDATA='ERROR IN ALLOCATE OF GAS@@@';
       RHRC = 8;
       RETURN;
       END;
   GSASPTR=RHPTR;
   RHPTR=SAVRH; /* RESTORE ORIGINAL RHPTR */
   I=#CMD('COPY GSAS@@@',RHPTR,RHHDRPT);
   I=#CMD('0 BL 1',GSASPTR,RHHDRPT);
   I=#CMD('TOP',GSASPTR,RHHDRPT);
   I=#CMD('* SUBSTR ''GOPTIONS DEVICE=COMPLOT NOCHARACTERS NOCELL '××
     'VPOS=40 HPOS=75 HSIZE='××
     CALCPRT(HSIZE)××
     ' VSIZE='××CALCPRT(VSIZE)××';''',GSASPTR,RHHDRPT);
   IF GRLALC14
     THEN DO; /* TIME TO ALLOCATE FT14F001 */
       CALL #DOCMD(
       'ALLOC FI(FT14F001) NEW TR SP(20 20) LR(84) BL(18960)
       RECFM(V B S) REUSE','');
       GRLALC14='0'B;
       END;
   OPEN FILE(RH_SEQ_1) TITLE('FT14F001') RECORD OUTPUT;
   CLOSE FILE(RH_SEQ_1);
   IF PARY(5)^=''
     THEN CALL SETCAPS(PARY(5));
   I=#CMD('SAS '××PARY(5),GSASPTR,RHHDRPT);
   IF I^=0
     THEN DO; /* FOR TESTING */
       MSGDATA='RETURN CODE FROM SAS SUBCMD='××CALCPRT(I);
       RHRC=8;
       RETURN;
       END;
   I=#CMD('END N',GSASPTR,RHHDRPT);
   IF PARY(7)^=''
     THEN CALL SETCAPS(PARY(7));
   SELECT(PARY(7));
     WHEN('CI3500') I=#CMD('GR DEVICE 72',RHPTR,RHHDRPT);
     WHEN('','CI600')  I=#CMD('GR DEVICE 80',RHPTR,RHHDRPT);
     WHEN('IBM3800') I=#CMD('GR DEVICE 240 240 2624 1792 1',
       RHPTR,RHHDRPT);
     OTHERWISE;
     END; /* SELECT */
   CALL GSAS_READ(X1,Y1,PARY(6),PARY(7),PARY(8));
   END GSAS;

 GSAS_READ: PROC(X1,Y1,DEST,TYPE,PARMDDN);
 /**********************************************************************
 *                                                                     *
 * CALLED AFTER SAS/GRAPH PROCESSING TO READ AND PROCESS FT14F001.     *
 *                                                                     *
 **********************************************************************/
   DCL (X1,Y1) DEC FLOAT(6);
   DCL (DEST,TYPE,PARMDDN) CHAR(*) VAR;
   DCL DDN CHAR(8) INIT('FT14F001');

   DCL TEXT CHAR(256) VAR;
   DCL INREC CHAR(256) VAR;
   DCL 1 SYMBREC UNALIGNED BASED(ADDR(INREC)),
     2 PAD FIXED BIN(15,0),
     2 KEY CHAR(4),
     2 XN DEC FLOAT(6),
     2 YN DEC FLOAT(6),
     2 HEIGHT DEC FLOAT(6),
     2 ANGLE DEC FLOAT(6),
     2 NCHAR FIXED BIN(31,0),
     2 INTEXT CHAR(56);
   DCL 1 PLOTREC UNALIGNED BASED(ADDR(INREC)),
     2 PAD CHAR(14),
     2 IPEN FIXED BIN(31,0);
   DCL (I,J,K) FIXED BIN;

   IF PARMDDN^=''
     THEN DDN=PARMDDN;
   OPEN FILE(RH_SEQ_1) TITLE(DDN) RECORD INPUT;
   ON ENDFILE(RH_SEQ_1) GO TO EOFIN;
   I=0;
   DO FOREVER=1 REPEAT FOREVER;
     /* FIRST FIND THE START OF NEXT GRAPH */
     DO UNTIL(I=1);
       READ FILE(RH_SEQ_1) INTO(INREC);
       IF KEY='PLOT'
         THEN IF IPEN>0 & IPEN^=999
           THEN I=1;
       END;
     DO UNTIL(I=0);
       SELECT(KEY);
         WHEN('SYMB')
           CALL DOSYMBOL(XN+X1,YN+Y1,HEIGHT,ANGLE,
             SUBSTR(INTEXT,1,MIN(56,NCHAR)));
         WHEN('PLOT')
           IF IPEN<0 × IPEN=999
             THEN DO; /* DONE WITH THIS GRAPH */
               I=0;
               IF DEST^=''
                 THEN DO;
                   CALL ABE064A(RHPTR,RHHDRPT,DEST,TYPE);/*PRINT*/
                   K=#CMD('GR PLT00',RHPTR,RHHDRPT); /* CLEAR MAP */
                   END;
               END;
             ELSE CALL DOPLOT(XN+X1,YN+Y1,IPEN);
         OTHERWISE;
         END; /* SELECT */
       IF I=1
         THEN READ FILE(RH_SEQ_1) INTO(INREC);
       END;
     END;
 EOFIN:;
   CLOSE FILE(RH_SEQ_1);
   IF DEST^='' & I=1
     THEN DO;
       CALL ABE064A(RHPTR,RHHDRPT,DEST,TYPE);/*PRINT*/
       K=#CMD('GR PLT00',RHPTR,RHHDRPT); /* CLEAR MAP */
       END;
   END GSAS_READ;

 PARSE: PROC(AXIS,STR,PIXSW) RETURNS(DEC FLOAT(6));
 /**********************************************************************
 *                                                                     *
 * CALLED TO PARSE COORDINATE VALUE OPERAND.                           *
 *                                                                     *
 **********************************************************************/
   DCL AXIS CHAR(1);
   DCL STR CHAR(*) VAR;
   DCL PIXSW BIT(1);
   DCL VAL DEC FLOAT(6);

   IF LENGTH(STR)=0
     THEN RETURN(0);
   SELECT(SUBSTR(STR,1,1));
     WHEN('+','-')
       SELECT(AXIS);
         WHEN('X') VAL=CPWCX;
         WHEN('Y') VAL=CPWCY;
         WHEN('Z') VAL=CPWCZ;
         OTHERWISE SIGNAL ERROR;
         END; /* SELECT */
     OTHERWISE VAL=0;
     END; /* SELECT */
   RETURN(VAL+CONVERT(AXIS,STR,PIXSW));
   END PARSE;

   END ABE064;
