 /* FAMPDSR */
 /**********************************************************************
 *                                                                     *
 * USE BY THE SCANPDS SUBCOMMAND TO PROCESS A PARTITIONED DATASET AS   *
 * A SINGLE CONTINUOUS SEQUENTIAL DATASET.                             *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(FAMPDSR) PARMS(RHHDRPT,RHPTR,PASSPTR,CODE) RETURNS(PTR)
   RENT(NO) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL PASSPTR PTR;
   DCL CODE FIXED BIN(15,0);
   DFT RANGE(*) STATIC;
   DCL 1 PARSSTR BASED(PASSPTR),
   %INCLUDE ABEFAM;

   DCL ABEPDS ENTRY(CHAR(8),PTR,CHAR(32767) VAR,PTR);
   DCL MEM CHAR(8) BASED(MEMPTR);
   DCL INITSW BIT(1) STATIC INIT('0'B);

   IF CODE^=0 & CODE^=4
     THEN IF ^INITSW
       THEN CALL DO_INIT;
   SELECT(CODE);
     WHEN(0,6) RETURN(DO_INIT);        /* INITIALIZATION TIME,REFRESH */
     WHEN(1) RETURN(DO_SUCC(PASSPTR)); /* GET NEXT (#SUCC)    */
     WHEN(2) SIGNAL ERROR;             /* GET PRIOR (#PRED)   */
     WHEN(3) SIGNAL ERROR;             /* DO A SAVE           */
     WHEN(4) RETURN(DO_END);           /* DO END PROCESSING   */
     WHEN(5) RETURN(NULL);             /* DO DISPLAY          */
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */

 DO_END: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=4, I.E. END TIME.                                  *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;

   RETURN(NULL);
   END DO_END;

 DO_INIT: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=0, I.E. INITIALIZATION TIME.                       *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL PDSREC CHAR(32767) VAR;

   INITSW='1'B;
   IF INDDN=NULL × INDDN^=OUTDDN
     THEN SIGNAL ERROR;
   DO WHILE(NXTHDR^=HDPTR);
     CALL #PUTSLOT(RHPTR,RHHDRPT,NXTHDR);
     END;
   IF ^RECSIZSW
     THEN DO; /* BUFFER MUST BE REALLOCATED. */
       L=INDDN->ALCRECL+9;
       ALLOCATE ALCSTR;
       ALCDDN=INDDN->ALCDDN;
       ALCDSN=INDDN->ALCDSN;
       ALCMEM=INDDN->ALCMEM;
       ALCFLAG=INDDN->ALCFLAG;
       ALCSEQOFF=INDDN->ALCSEQOFF;
       ALCSEQLEN=INDDN->ALCSEQLEN;
       ALCBLKL=INDDN->ALCBLKL;
       ALCRECFM=INDDN->ALCRECFM;
       FREE INDDN->ALCSTR;
       INDDN,OUTDDN=ALCPTR;
       BUFPTR=ADDR(OUTDDN->ALCRECL);
       END;
   BUF='';
   CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,1,BUF,0);
   CURSEQ,RECSEQ=1;
   CALL ABEPDS(INDDN->ALCDDN,MEMPTR,PDSREC,RHHDRPT);
   IF MEMPTR=NULL
     THEN DO;
       RECSTR='';
       INITSW='0'B;
       RETURN(RHPTR);
       END;
   RECSTR=MEM××' '××PDSREC;
   RETURN(RECPTR);
   END DO_INIT;

 DO_SUCC: PROC(CUR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CODE=1, I.E. GET-NEXT-SEQUENTIAL RECORD.                *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL CUR PTR;
   DCL PDSREC CHAR(32767) VAR;

   CALL ABEPDS(INDDN->ALCDDN,MEMPTR,PDSREC,RHHDRPT);
   IF MEMPTR=NULL
     THEN DO;
       RECSTR='';
       INITSW='0'B;
       RETURN(RHPTR);
       END;
   RECSTR=MEM××' '××PDSREC;
   RETURN(RECPTR);
   END DO_SUCC;

   END FAMPDSR;
