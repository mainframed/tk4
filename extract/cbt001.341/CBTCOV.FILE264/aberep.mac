 /* COPYRIGHT 1988 BY THOMAS GLEN SMITH */
 /**********************************************************************
 * ABEREP - ALIAS  #REP.                                               *
 * THIS PROCEDURE CAN BE INVOKED TO PERFORM REPLACEMENT OF             *
 * VARIABLES IN A CHARACTER STRING WITH VALUES THEY HAVE BEEN          *
 * PREVIOUSLY BEEN ASSIGNED.  SEE ALSO DOCUMENTATION FOR THE SYMC      *
 * AND SET@ SUBROUTINES.  CALL FORMAT IS AS FOLLOWS -                  *
 *                                                                     *
 * CALL REP@(RHHDRPT,BUFFER);                                          *
 *                                                                     *
 * WHERE BUFFER IS DECLARED AS FOLLOWS -                               *
 *                                                                     *
 * DCL 1 BUFFER,                                                       *
 *      2 BUFLEN FIXED BIN(15,0),                                      *
 *      2 OFFSET FIXED BIN(15,0),                                      *
 *      2 BUF CHAR(*);                                                 *
 *                                                                     *
 * BUFLEN MUST CONTAIN THE LENGTH OF TEXT IN BUF PLUS 4, NOT           *
 * COUNTING BLANKS PADDED ON THE RIGHT.  NOTE THAT SUFFICIENT SPACE    *
 * SHOULD BE ALLOWED FOR EXPANSION AS THE VARIABLES IN BUF             *
 * ARE REPLACED WITH THEIR ASSIGNED VALUES.  AS REPLACEMENT OCCURS,    *
 * REP@ WILL UPDATE BUFLEN TO REFLECT EXPANSION OR CONTRACTION OF THE  *
 * TEXT.                                                               *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABEREP)  PARMS(RHHDRPT,TREEHDR,BUF) RECURS(YES) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABEREC;

   DCL TREEHDR PTR;

   DCL (PREFIX,SUFFIX) ENTRY RETURNS(FIXED BIN(15,0));
   DCL PSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0))
     RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;

   DCL 1 BUF,
     2 BUFLEN FIXED BIN(15,0),
     2 OFFSET FIXED BIN(15,0),
     2 BUFFER CHAR(*);
   DCL TXT CHAR(256) VARYING;
   DCL (I,J,K,L,IL,INDX) FIXED BIN(15,0);
   DCL SYMNAME CHAR(8);

   IL = LENGTH(BUFFER);
   DO INDX=0 REPEAT INDX-1 WHILE(INDX < BUFLEN-4);
     I = INDEX(SUBSTR(BUFFER,INDX+1,BUFLEN-4-INDX),'&');
     IF I = 0
       THEN RETURN;
     INDX = INDX+I;
     IF SUBSTR(BUFFER,INDX+1,1) = '&'
       THEN DO;
         BUFLEN = BUFLEN-1;
         SUBSTR(BUFFER,INDX+1,IL-INDX) =
           SUBSTR(BUFFER,INDX+2,IL-INDX-1);
         INDX=INDX+1;
         END;
       ELSE DO;
         I = PREFIX(SUBSTR(BUFFER,INDX+1,8),
           'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
         IF I = 0
           THEN I = 9;
         SYMNAME=SUBSTR(BUFFER,INDX+1,I-1);
         SELECT(SYMNAME);
           WHEN('SYSEVAL','SYSAPL','SUBSTR') DO;
             IF SUBSTR(BUFFER,INDX+I,1)^='('
               THEN LEAVE; /* NOT VALID FORM */
             J=PSTR(BUFFER,INDX+I); /* J=INDEX TO CLOSING PAREN */
             IF J=0
               THEN LEAVE; /* NOT VALID FORM */
             K=INDX+I; /* INDEX TO LEFT PAREN */
             I=J-INDX+1; /* NEW LENGTH */
             SELECT(SYMNAME);
               WHEN('SYSEVAL')
                 TXT=SYSEVAL(REP_RECURS(SUBSTR(BUFFER,K,J-K+1)));
               WHEN('SYSAPL')
                 TXT=SYSAPL(REP_RECURS(SUBSTR(BUFFER,K,J-K+1)));
               WHEN('SUBSTR')
                 TXT=SYSSUBSTR(REP_RECURS(SUBSTR(BUFFER,K,J-K+1)));
               OTHERWISE;
               END; /* SELECT */
             IF TXT=''
               THEN TXT='';
               ELSE TXT=SUBSTR(TXT,1,SUFFIX(TXT,' '));
             SYMNAME='';
             END;
           OTHERWISE;
           END; /* SELECT */
         IF SYMNAME^=''
           THEN TXT = #SYMC(RHHDRPT,TREEHDR,SYMNAME);
         L = LENGTH(TXT);
         IF SUBSTR(BUFFER,INDX+I,1) = '.'
           THEN I = I + 1;
         BUFLEN = BUFLEN-I+L;
         IF BUFLEN > IL
           THEN BUFLEN = IL;
         J = INDX+I;
         IF IL > J
           THEN SUBSTR(BUFFER,INDX,IL-INDX) = TXT ××
             SUBSTR(BUFFER,J,IL-J);
           ELSE SUBSTR(BUFFER,INDX,IL-INDX) = TXT;
         END;
     END;

 REP_RECURS:  PROC(STR) OPTIONS(REENTRANT) RETURNS(CHAR(256) VAR)
   RECURSIVE;
 /**********************************************************************
 * REP_RECURS IS CALLED TO RECURSE THROUGH REP.                        *
 **********************************************************************/
   DCL STR CHAR(*);
   DCL 1 BUF,
     2 BUFLEN FIXED BIN(15,0),
     2 OFFSET FIXED BIN(15,0),
     2 BUFFER CHAR(256);
   BUFFER=STR;
   BUFLEN=256;
   OFFSET=0;
   CALL ABEREP(RHHDRPT,TREEHDR,BUF);
   IF BUFFER=''
     THEN RETURN('');
     ELSE RETURN(SUBSTR(BUFFER,1,SUFFIX(BUFFER,' ')));
   END REP_RECURS;

 SYSAPL:  PROC(STR) OPTIONS(REENTRANT) RETURNS(CHAR(256) VAR)
   RECURSIVE;
 /**********************************************************************
 * SYSAPL IS CALLED TO PROCESS A SYSAPL VARIABLE DURING REP            *
 * PROCESSING.                                                         *
 **********************************************************************/
   DCL STR CHAR(*);
   DCL RET CHAR(256) VAR;
   %INCLUDE APLCB;
   DCL 1 INUSE,
   %INCLUDE ABERHN;
   DCL 1 OTUSE,
   %INCLUDE ABERHN;
   DCL (ILP,OLP) PTR;
   DCL BEST FIXED BIN(15,0) STATIC INIT(8); /* BEST TYPE */
   DCL I FIXED BIN;

   RET=SYSCALL('API '××STR);
   IF RH_APLPTR=NULL
     THEN RETURN(RET); /* NO APL VARIABLE CREATED */
   IF RH_APLPTR->RECPTR=RH_APLPTR
     THEN RETURN(RET); /* NULL DATA SET */
   IF RH_APLPTR->RH_APL=NULL
     THEN RETURN(RH_APLPTR->RECPTR->RECSTR); /* NO APLCB */
   IF RH_APLPTR->RH_APL->RH_APL_TYPE=2
     THEN RETURN(RH_APLPTR->RECPTR->RECSTR); /* CHAR VAR */
   INUSE.RHNNAME='IN';
   OTUSE.RHNNAME='OUT';
   INUSE.RHNTYPE=RH_APLPTR->RH_APL->RH_APL_TYPE;
   OTUSE.RHNTYPE=BEST;
   INUSE.RHNPOS=1;
   OTUSE.RHNPOS=1;
   INUSE.RHNLNG=RH_APLPTR->RH_APL->RH_APL_ELEN;
   OTUSE.RHNLNG=256;
   ILP=ADDR(INUSE);
   OLP=ADDR(OTUSE);
   RET=#CONVERT(#GETFIELD(ILP,ADDR(RH_APLPTR->RECPTR->RECLEN)),ILP,OLP);
   IF LENGTH(RET)=0
     THEN RET=#GET_MISSING(OLP);
   IF RH_APLPTR->RH_APL->RH_APL_TEMP
     THEN DO;
       I=#CMD('END I',RH_APLPTR,RHHDRPT);
       RH_APLPTR=NULL;
       END;
   RETURN(RET);
   END SYSAPL;

 SYSCALL:  PROC(STR) OPTIONS(REENTRANT) RETURNS(CHAR(256) VAR)
   RECURSIVE;
 /**********************************************************************
 * SYSCALL IS CALLED BY SYSAPL AND SYSEVAL TO ISSUE AN ABE             *
 * SUBCOMMAND DURING REP PROCESSING.                                   *
 **********************************************************************/
   DCL STR CHAR(*);
   DCL SAVE_RHRC FIXED BIN;
   DCL SAVE_MSGDATA CHAR(80) VAR;
   DCL SAVE_LASTCMD CHAR(1024) VAR;
   DCL TRH PTR;
   DCL I FIXED BIN;
   DCL RET CHAR(256) VAR;

   TRH=NXTRHEL;
   IF TRH=NULL
     THEN RETURN('');
   SAVE_RHRC=TRH->RHRC;
   SAVE_MSGDATA=TRH->MSGDATA;
   SAVE_LASTCMD=TRH->LASTCMD;
   I=#CMD(STR,TRH,RHHDRPT);
   RET=TRH->MSGDATA;
   TRH->RHRC=SAVE_RHRC;
   TRH->MSGDATA=SAVE_MSGDATA;
   TRH->LASTCMD=SAVE_LASTCMD;
   RETURN(RET);
   END SYSCALL;

 SYSEVAL:  PROC(STR) OPTIONS(REENTRANT) RETURNS(CHAR(256) VAR)
   RECURSIVE;
 /**********************************************************************
 * SYSEVAL IS CALLED TO PROCESS A SYSEVAL VARIABLE DURING REP          *
 * PROCESSING.                                                         *
 **********************************************************************/
   DCL STR CHAR(*);

   RETURN(SYSCALL('CALC '××STR));
   END SYSEVAL;

 SYSSUBSTR:  PROC(PRMSTR) OPTIONS(REENTRANT) RETURNS(CHAR(256) VAR)
   RECURSIVE;
 /**********************************************************************
 * SYSSUBSTR IS CALLED TO PROCESS A &SUBSTR VARIABLE DURING REP        *
 * PROCESSING.                                                         *
 **********************************************************************/
   DCL PRMSTR CHAR(*);
   DCL (STR,OFFSTR,LENSTR) CHAR(256) VAR;
   DCL (I,J,LEN,OFF) FIXED BIN;
   DCL 1 REPBUF,
     2 BUFLEN FIXED BIN(15,0),
     2 OFFSET FIXED BIN(15,0),
     2 BF CHAR(250);
   DCL SYMNAME CHAR(8);

   IF LENGTH(PRMSTR)<3
     THEN RETURN('');
   PRMSTR=SUBSTR(PRMSTR,2,LENGTH(PRMSTR)-2);
   IF INDEX(PRMSTR,'&')^=0
     THEN DO;
       BUFLEN=254;
       OFFSET=0;
       BF=PRMSTR;
       CALL #REP(RHHDRPT,TREEHDR,REPBUF);
       PRMSTR=SUBSTR(BF,1,SUFFIX(BF,' '));
       END;
   I=INDEX(PRMSTR,',');
   IF I=0
     THEN I=LENGTH(PRMSTR)+1;
   SYMNAME=SUBSTR(PRMSTR,1,I-1);
   CALL SETCAPS(SYMNAME);
   STR=#SYMC(RHHDRPT,TREEHDR,SYMNAME);
   IF I>=LENGTH(PRMSTR)
     THEN RETURN(STR);
   OFFSTR=SUBSTR(PRMSTR,I+1);
   IF OFFSTR=''
     THEN RETURN(STR);
   I=INDEX(OFFSTR,',');
   IF I=0
     THEN LENSTR='';
     ELSE DO;
       IF I=LENGTH(OFFSTR)
         THEN LENSTR='';
         ELSE LENSTR=SUBSTR(OFFSTR,I+1);
       OFFSTR=SUBSTR(OFFSTR,1,I-1);
       END;
   OFF=SYSSUBSTR_SUB(OFFSTR);
   IF OFF<=0 × OFF>LENGTH(STR)
     THEN RETURN('');
   IF LENSTR=''
     THEN RETURN(SUBSTR(STR,OFF));
   LEN=SYSSUBSTR_SUB(LENSTR);
   IF LEN<0
     THEN RETURN('');
     ELSE RETURN(SUBSTR(STR,OFF,MIN(LEN,LENGTH(STR)-OFF+1)));
   END SYSSUBSTR;

 SYSSUBSTR_SUB: PROC(PRMSTR) RETURNS(FIXED BIN);
   DCL PRMSTR CHAR(256) VAR;

   IF PRMSTR=''
     THEN RETURN(0);
   PRMSTR=SUBSTR(PRMSTR,PREFIX(PRMSTR,' '));
   PRMSTR=SUBSTR(PRMSTR,1,SUFFIX(PRMSTR,' '));
   IF VERIFY(PRMSTR,'0123456789')^=0
     THEN RETURN(-1);
     ELSE RETURN(PRMSTR);
   END SYSSUBSTR_SUB;
   END ABEREP;
