*$.GENERALIZED SUBROUTINES - GPSSGP
*$.HE GPSSGP - SPECIAL GPSS STORAGE FACILITY
*$.PL 55
*$.PN 0
*$.PA
*$.SS
*$.NF
*$04/23/76
*$AUTHOR:  T. SMITH
*$DOCUMENTATION ID:  *$
*$.FI L
*$.SP 5
*$THIS SUBROUTINE IS DESIGNED TO OPERATE AS A HELP BLOCK UNDER GPSS
*$TO SIMULATE A STORAGE ENTITY IN WHICH MULTIPLE STORAGE UNITS MAY
*$BE ACQUIRED FOR A TRANSACTION ONLY IN A SINGLE CONTIGUOUS BLOCK.
*$AN EXAMPLE OF SUCH A STORAGE ENTITY IS THE ALLOCATION OF REGIONS
*$FROM DYNAMIC MAIN STORAGE UNDER MVT.
*$.SP 1
*$PARAMETER B SHOULD BE THE NUMBER OF CONTIGUOUS STORAGE UNITS
*$DESIRED WHERE 1 = 2048 UNITS.  PARAMETER C SHOULD BE -1 IF STORAGE
*$UNITS ARE TO BE ACQUIRED, AND SHOULD BE SET TO THE NUMBER OF THE
*$FIRST STORAGE UNIT IN THE CONTIGUOUS BLOCK IF STORAGE UNITS ARE
*$TO BE FREED.
*$BEFORE RETURNING CONTROL, THIS ROUTINE WILL SET FULLWORD PARAMETER
*$1 TO -1 IF THE STORAGE UNITS WERE SUCCESSFULLY FREED, AND WILL
*$SET IT TO THE NUMBER OF THE FIRST STORAGE UNIT IN THE CONTIGUOUS
*$BLOCK IF STORAGE UNITS WERE SUCCESSFULLY ACQUIRED.
         MACRO
         FBQETAB &CNT
         LCLA  &A
FBQETAB  DC    A(*+4)
.LUP     ANOP
         DC    A(*+16),A(0),2A(0)
&A       SETA  &A+1
         AIF   (&A LT &CNT).LUP
         MEND
         MACRO
         GETFBQE
         L     R1,FBQETAB
         MVC   FBQETAB(4),0(R1)
         MEND
GPSSGP   CSECT
         SAVES RETCTL
         TGSREQU
         USING HELPTAB,RA
         TM    INITSW,X'80'            IS IT FIRST TIME?
         BC    1,NOTFST                BR IF NOT
         OI    INITSW,X'80'
         L     R9,CTLADR               R9=A(CONTROL WORDS)
         L     R8,HSAV(R9)             R8=A(HALFWORD SAVEVALUES)
         LH    R7,2(R8)                R7=STORAGE SIZE IN 2K CHUNKS
         SLL   R7,11                   R7=STORAGE SIZE IN BYTES
         GETFBQE
         ST    R1,GOVRFLB
         XC    0(8,R1),0(R1)           CLEAR NEXT & LAST PTRS
         ST    R7,8(R1)                SET FBQE SIZE
NOTFST   DS    0H
         LM    R2,R3,BOPND             R2=REGION SIZE (1=2K)
*                                      R3=REGION ADDR OR -1
         SLL   R2,11                   R2=REGION SIZE IN BYTES
         LTR   R3,R3                   IS IT GET OR FREE
         BC    10,FREEREG              BR IF FREE
*
* NOW FIND THE FIRST FBQE BIG ENOUGH TO CONTAIN THE REGION
*
         L     R1,GOVRFLB              R1 = A(1ST FBQE)
         LTR   R1,R1                   IS ANY CORE FREE?
         BC    8,RETCTL                BR IF NOT
GETLP    DS    0H
         C     R2,8(R1)                IS IT BIG ENOUGH
         BC    8,GOTCORX                BR IF YES
         BC    4,GOTCOR                BR IF YES
         L     R1,0(R1)                R1 = A(NEXT LOWER FBQE)
         LTR   R1,R1                   IS IT END OF Q?
         BC    7,GETLP                 BR IF NOT
         B     RETCTL                  ELSE, FINISH
GOTCOR   DS    0H
         L     R3,8(R1)                R3 = OLD SIZE FBQE
         SR    R3,R2                   R3 = NEW SIZE FBQE
         ST    R3,8(R1)                SET FBQE
         L     R3,12(R1)               R3 = A(FREE BLOCK)
         A     R3,8(R1)                R3 = A(NEW REGION)
         B     SETPARM
GOTCORX  DS    0H
         L     R3,12(R1)               R3=A(NEW REGION)
         BAL   RE,PUTFBQE
SETPARM  DS    0H
         LA    R6,1                    R6 = PARM #
         LA    R5,X'0C'                X'0C' = FULLWORD TYPE IND
         SLL   R5,24                   SHIFT TO HI-BYTE
         OR    R6,R5                   OR INTO R6
         LR    R7,R3                   R7 = REGION ADDR
         L     RF,STPVAL               RF = A(STPVAL ROUTINE)
         L     RE,4(RD)                GET A(OSA)
         LM    R2,R3,28(RE)            RESTORE R2, R3
         L     RB,64(RE)               RESTORE RB
         LR    RE,R2
         A     RE,K4096
         BALR  R5,RF                   GO SET PF1 W/A(REGION) OR -1
         B     RETCTL
FREEREG  DS    0H
         LA    R4,0(R2,R3)             R4 = A(END REGION)
         L     R1,GOVRFLB
         LTR   R1,R1                   IS ANY CORE CURRENTLY FREE?
         BC    7,FRELP                 BR IF YES
         GETFBQE
         ST    R1,GOVRFLB              RESET GOVRFLB
         XC    0(8,R1),0(R1)           RESET NXT & LST PTRS
         STM   R2,R3,8(R1)             SET SIZE, ADDR
         B     SETR3
FRELP    DS    0H
         C     R4,12(R1)               IS REGION CONTIG IN FRON?
         BC    8,CONTIGL               BR IF YES
         BC    4,BUMPLP                BR IF LOW
         L     R5,12(R1)               R5 = A(FREE BLOCK)
         A     R5,8(R1)                R5 = A(END FREE BLOCK)
         CR    R3,R5                   IS REGION CONTIG AT END?
         BC    8,CONTIGH               BR IF YES
         BC    2,NCONTIGH              BR IF HIGH
BUMPLP   DS    0H
         L     R5,0(R1)                R5 = A(NEXT LOWER FBQE)
         LTR   R5,R5                   IS IT END Q?
         BC    8,NCONTIGL              BR IF YES
         LR    R1,R5                   LOAD R1
         B     FRELP                   GO TRY AGAIN
NCONTIGH DS    0H
* #1   *********   #2   *********
*      *REG    *        *FBQE #1*
*      *********        *********
*
*    R1*********        *********
*      *FBQE #1*        *REG    *
*      *********        *********
*
*                     R1*********
*                       *FBQE #2*
*                       *********
*
         LR    R5,R1
         GETFBQE
         STM   R2,R3,8(R1)             SET FREE BLOCK SIZE AND ADDR
         MVC   4(4,R1),4(R5)           SET LSTPTR IN NEW FBQE
         ST    R5,0(R1)                SET NXTPTR IN NEW FBQE
         ST    R1,4(R5)                SET LSTPTR IN LOWER FBQE
         L     R5,4(R1)                R5=A(FBQE ABOVE NEW FBQE)
         LTR   R5,R5                   IS IT TOP OF Q?
         BC    7,NOTOPH                BR IF NOT
         ST    R1,GOVRFLB              RESET GOVRFLB
SETR3    DS    0H
         LA    R3,1
         LNR   R3,R3                   R3 = -1
         B     SETPARM
NOTOPH   DS    0H
         ST    R1,0(R5)                SET NXTPTR IN HIGHER FBQE
         B     SETR3
CONTIGH  DS    0H
* #1   *********  #2   *********
*      *REG    *       *FBQE #1*
*    R1*********       *********
*      *FBQE #1*
*      *********       *********
*                      *REG    *
*      *********     R1*********
*      *FBQE #2*       *FBQE #2*
*      *********       *********
*
         A     R2,8(R1)
         ST    R2,8(R1)                RESET FREE BLOCK SIZE
         B     SETR3
CONTIGL  DS    0H
* #1 R1*********  #2 R1*********  #3 R1*********
*      *FBQE #1*       *FBQE #1*       *FBQE   *
*      *********       *********       *********
*      *REG    *       *REG    *       *REG    *
*      *********       *********       *********
*                      *FBQE #2*
*      *********       *********
*      *FBQE #2*
*      *********
*
         ST    R3,12(R1)               RESET FREE BLOCK ADDR
         A     R2,8(R1)
         ST    R2,8(R1)                RESET FREE BLOCK SIZE
         L     R5,0(R1)                R5 = A(NXT LOWER FBQE)
         LTR   R5,R5                   IS THERE A LOWER FBQE?
         BC    8,SETR3                 BR IF NOT
         L     R6,8(R5)
         A     R6,12(R5)               R6=A(TOP NXT LOWER FREE BLOCK)
         CR    R3,R6                   IS LOWER FREE BLOCK CONTIG?
         BC    4,SETR3                 BR IF NOT
         MVC   12(4,R1),12(R5)         RESET FREE BLOCK ADDR IN FBQE
         A     R2,8(R5)
         ST    R2,8(R1)                RESET FREE BLOCK SIZE
         LR    R1,R5
         BAL   RE,PUTFBQE
         B     SETR3
NCONTIGL DS    0H
* #1 R1*********
*      *FBQE #N*
*      *********
*
*      *********
*      *REG    *
*      *********
*
         LR    R5,R1
         GETFBQE
         STM   R2,R3,8(R1)             SET FREE BLOCK SIZE AND ADDR
         MVC   0(4,R1),0(R5)           SET NXTPTR (=0) IN NEW FBQE
         ST    R5,4(R1)                SET LST PTR IN NEW FBQE
         ST    R1,0(R5)                SET NXTPTR IN HIGHER FBQE
         B     SETR3
PUTFBQE  DS    0H
         L     R9,0(R1)                R2=A(NXT LOWER FBQE)
         LTR   R9,R9                   IS IT BOTTOM?
         BC    8,BOTMX                 BR IF YES
         MVC   4(4,R9),4(R1)           SET LAST PTR IN LOWER FBQE
BOTMX    DS    0H
         L     R8,4(R1)                R8=A(NXT HIGHER FBQE)
         LTR   R8,R8                   IS IT TOP OF Q?
         BC    7,NOTOPX                BR IF NOT
         ST    R9,GOVRFLB              RESET GOVRFLB
         B     BYTOPX
NOTOPX   DS    0H
         ST    R9,0(R8)                SET NXT PTR IN HIGHER FBQE
BYTOPX   DS    0H
         MVC   0(4,R1),FBQETAB
         ST    R1,FBQETAB
         BR    RE
K4096    DC    F'4096'
FBQETAB  FBQETAB 50   FBQE=A(NXT FBQE),A(LST FBQE),SIZE,ADDR
INITSW   DC    X'0'
GOVRFLB  DC    F'0'
HSAV     EQU   1072   OFFSET TO A(HALFWORD SAVEVALUES)
         LTORG
HELPTAB  DSECT
BOPND    DS    F
COPND    DS    F
DOPND    DS    F
EOPND    DS    F
FOPND    DS    F
GOPND    DS    F
CTLADR   DS    F
STPVAL   EQU   HELPTAB+52
         END
