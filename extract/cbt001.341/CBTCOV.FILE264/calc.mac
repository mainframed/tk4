 /* CALC */
   % INCLUDE CPINIT1;
   % @CMP = 'O';
   % @STRIPSW='N';
   % @STRIPI='Y';
   % @NULLBSW='N';
   % INCLUDE CPINIT2;
   % INCLUDE @DCL;
   @DCL (OPERANDS,A) TYPE(CHARACTER) MAX(8);
   DCL PLIXOPT CHAR(80) VAR INIT('ISA(300K) ') STATIC EXT;
   DCL CMDDATA CHAR(256) VAR;
   DCL (PUTLINE,CALCEVA) ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL 1 CBUF UNALIGNED BASED(CPPLCBUF),
     2 LEN FIXED BIN(15,0),
     2 OFF FIXED BIN(15,0),
     2 DATA CHAR(256);
   DCL 1 TOKEN BASED(TOKPTR),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   CMDDATA=SUBSTR(CBUF.DATA,CBUF.OFF+1,CBUF.LEN-4-CBUF.OFF);
   CALL CALCEVA(PROMPT,WRITE,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);
 ODD_FUNCTION: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL VALUE DEC FLOAT(16),
       VALCH CHAR(8) DEF VALUE;
   DCL PRTVAL CHAR(80) VAR;
   IF PRMPTR->TOKSTR^='LIST'
     THEN DO;
       MSG='UNIDENTIFIED FUNCTION = '××PRMSTR;
       SIGNAL CONDITION(BADEXP);
       END;
   ON CONDITION(ASAREOF) GO TO ENDVAR;
   DO VALCH=OPERANDS_FIRST REPEAT OPERANDS_NEXT;
     PUT STRING(PRTVAL) EDIT(@INDEX(OPERANDS,1,A),'=',CALCPRT(VALUE))
       (A,A,A);
     CALL WRITE(PRTVAL);
     END;
 ENDVAR:;
   RETURN(0);
   END ODD_FUNCTION;
 PUT_OPERAND: PROC(PRMPTR,VALUE,MSG);
 /**********************************************************************
 * CALLED TO SET THE VALUE FOR AN OPERAND.                             *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) DEF VALUE;
   DCL MSG CHAR(80) VAR;
   CALL OPERANDS_ASSIGN(PRMPTR->TOKSTR,VALCH);
   END PUT_OPERAND;
 GET_OPERAND: PROC(PRMPTR) RETURNS(FLOAT DEC(16));
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) DEF VALUE;
   IF OPERANDS_NULL(PRMPTR->TOKSTR)
     THEN VALUE=0;
     ELSE VALCH=OPERANDS_REFER(PRMPTR->TOKSTR);
   RETURN(VALUE);
   END GET_OPERAND;
 GET_OPERAND_CHAR: PROC(PRMPTR) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16),
       VALCH CHAR(8) DEF VALUE;
   IF OPERANDS_NULL(PRMPTR->TOKSTR)
     THEN VALUE=0;
     ELSE VALCH=OPERANDS_REFER(PRMPTR->TOKSTR);
   RETURN(CALCPRT(VALUE));
   END GET_OPERAND_CHAR;
 PROMPT: PROC RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO PROMPT FOR INPUT FROM THE TERMINAL.                       *
 **********************************************************************/
   DCL PRMPT CHAR(80) VAR STATIC INIT('CALC:');
   DCL INP CHAR(256) VAR;
   DCL SETCAPS ENTRY;
   DCL GETCMD ENTRY(PTR,PTR,CHAR(80) VAR, FIXED BIN(31,0))RETURNS(
     CHAR(256) VAR);
   IF CMDDATA=''
     THEN INP = GETCMD(CPPLUPT,CPPLECT,PRMPT,IKJRET);
     ELSE DO;
       INP=CMDDATA;
       CMDDATA='END';
       END;
   CALL SETCAPS(INP);
   RETURN(INP);
   END PROMPT;
 WRITE:PROC(TMSG);
 /**********************************************************************
 * CALLED TO PRINT OUTPUT AT THE TERMINAL.                             *
 **********************************************************************/
   DCL TMSG CHAR(*) VAR;
   BUFLEN@=LENGTH(TMSG)+4;
   BUFSTR@=TMSG;
   CALL PUTLINE(CPPLUPT,CPPLECT,CPECB,BUFFER@,IKJRET,'DATA');
   IF IKJRET^=0
     THEN SIGNAL ERROR;
   END WRITE;
   END;
