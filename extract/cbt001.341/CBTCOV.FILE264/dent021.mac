  /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /*DENT021,SL,SR,SUBSTR,OL,AL,AR,SEQ,CLEAR,TRANSLAT,FLIP,RESEQ,LIST,L,*/
 /*1       2  3  4      5  6  7  8   9     10       11   12    13   14*/
 /*PBSL,PBSR,SETSEQ,SUFFIX,SLC,SRC,SLB,SRB */
 /*15   16   17     18     19  20  21  22  */
 /* NOTE - CODE HAS BEEN CHANGED TO ACCOMMODATE BUG WHEN USING
    REFER */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RENT';
   % @RENTNAME ='DENT021';
   % INCLUDE DENTSUB;
   DCL NOTRSW BIT(1) INIT('0'B);
   DCL NOTRUNC CHAR(7) STATIC INIT('NOTRUNC');
   DCL RNDSW BIT(1) INIT('0'B);
   DCL RNDCH CHAR(7) STATIC INIT('RND');
   DCL COLLIT CHAR(3) STATIC INIT('COL');
   DCL SAMELIT CHAR(7) STATIC INIT('SAMECOL');
   DCL SEQBL CHAR(8),SEQPIC PIC'(8)9'DEF SEQBL;
   DCL SETCAPS ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL VSUBSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),FIXED BIN(15,0),CHAR(
   *));
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL CMDLAB(22) LABEL;
   DCL (DUMSTR,FLIPSTR,STR) CHAR(256) VAR;
   DCL (SAVPTR,ORGPTR,L3PTR,L3PTRS,OLPTR) PTR;
   DCL (REPEAT,TIME) BUILTIN;
   DCL SEED FLOAT DEC(16);
   DCL INT FIXED BIN(31,0);
   DCL PI DEC FLOAT(16) STATIC INIT(3.141592654);
   DCL SUPCNT FIXED BIN(31,0) INIT(0);
   ORGPTR = RECPTR;
   OLPTR=RHPTR;
   IF CMDINDX=13 × CMDINDX=14 × CMDINDX=18
     THEN DO; /* IT IS LIST,L,SUFFIX */
       IF PARY(2)=''
         THEN DO;
           L1 = 0;
           L2 = 99999999;
           CNT = 0;
           END;
         ELSE IF PARY(2)='*'
           THEN DO;
             L1 = CURSEQ;
             L2 = 99999999;
             IF PARY(3)=''
               THEN CNT=1;
               ELSE CNT=PARY(3);
             END;
           ELSE DO;
             L1 = PARY(2);
             IF PARY(3)=''
               THEN L2 = L1;
               ELSE L2 = PARY(3);
             CNT = 0;
             END;
       GO TO COMMON;
       END;
   SAVEFLAG='1'B;
   L3 = 0;
   L3PTR = ADDR(DUMSTR);
   IF PARY(2)^='*'
     THEN L1=PARY(2);
     ELSE DO;
       L1=CURSEQ;
       SEQPIC=L1;
       PARY(2)=SEQBL;
       END;
   IF PARY(3)='*'
     THEN DO;
       SEQPIC=CURSEQ;
       PARY(3)=SEQBL;
       END;
   GO TO CMDLAB(CMDINDX);
  CMDLAB(19): /* SLC */
   CMDINDX=2; /* CONVERT TO SL */
   GOTO SLCSRC; /* GO TO COMMON CODE */
  CMDLAB(20): /* SRC */
   CMDINDX=3; /* CONVERT TO SR */
  SLCSRC:
   PUT STRING(PARY(5))
     EDIT(MOD(@CURLOC,LINESIZE)-RHPMAXLN-1)(P'999');
   GOTO CMDLAB(1);
  CMDLAB(21): /* SLB */
   CMDINDX=2; /* CONVERT TO SL */
   GOTO SLBSRB; /* GO TO COMMON CODE */
  CMDLAB(22): /* SRB */
   CMDINDX=3; /* CONVERT TO SR */
  SLBSRB:
   IF PARY(5)^=''
     THEN PARY(7)=PARY(5); /* MOVE KEYWORD */
   PUT STRING(PARY(5)) EDIT(RH_LB)(P'ZZZZZZZ9');
   PUT STRING(PARY(6)) EDIT(RH_RB)(P'ZZZZZZZ9');
  CMDLAB(1): /* DENT021 */
  CMDLAB(2): /* SL      */
  CMDLAB(3): /* SR      */
  CMDLAB(15): /* PBSL    */
  CMDLAB(16): /* PBSR    */
   /* 1     2    3    4     5      6     7       */
   /* SL   <L1> <L2> <AMT> <SCOL> <ECOL> NOTRUNC */
   /* SR   <L1> <L2> <AMT> <SCOL> <ECOL> NOTRUNC */
   /* PBSL <L1> <L2> <AMT> <SCOL> <ECOL> R       */
   /* PBSR <L1> <L2> <AMT> <SCOL> <ECOL> <R × <MAXLEN>> */
   IF PARY(4)^=''
     THEN DO;
       AMT = PARY(4);
       L2 = PARY(3);
       IF PARY(5)=''
         THEN DO;
           S=1;
           E=9999;
           END;
         ELSE DO;
           S=PARY(5);
           IF PARY(6)=''
             THEN E=9999;
             ELSE E=PARY(6);
           END;
       END;
     ELSE DO;
       AMT = PARY(3);
       L2 = L1;
       END;
   IF PARY(7) ^=''
     THEN CALL SETCAPS(PARY(7));
   IF VERIFY(PARY(7),'0123456789')=0 & (LENGTH(PARY(7)) > 0)
     THEN L7=PARY(7);
     ELSE DO;
       L7=0;
       IF PARY(7)^=''
         THEN IF PARY(7)=SUBSTR(NOTRUNC,1,MIN(7,LENGTH(PARY(7))))
           THEN NOTRSW='1'B;
       END;
   GO TO COMMON;
  CMDLAB(4): /* SUBSTR */
   /* 1        2    3    4     5    6     7        */
   /* SUBSTR  <L1> <L2> <OFF> <LEN> <STR>          */
   /* SUBSTR  <L1> <L2> <OFF> <LEN> <STR> RND      */
   /*                               <L3>  COL      */
   /*                               <L3>  SAMECOL  */
   IF PARY(7)^=''
     THEN DO;
       CALL SETCAPS(PARY(7));
       IF PARY(7)=SUBSTR(COLLIT,1,MIN(3,LENGTH(PARY(7))))
         THEN PARY(7)=COLLIT;
         ELSE IF PARY(7)=SUBSTR(SAMELIT,1,MIN(7,LENGTH(PARY(7))))
           THEN PARY(7)=SAMELIT;
           ELSE IF PARY(7)=SUBSTR(RNDCH,1,MIN(3,LENGTH(PARY(7))))
             THEN DO;
               PARY(7)=RNDCH;
               SEED=SUBSTR(TIME,5);
               SEED=SEED/1E6;
               END;
             ELSE DO;
               MSGDATA='INVALID OPERAND';
               RHRC = 8;
               RETURN;
               END;
       END;
   IF LENGTH(PARY(6))=0 & ^SUBSTR(PARQCK,6,1)
     THEN IX = 2; /* L2 WAS OMITTED */
     ELSE IX = 3; /* L2 WAS SUPPLIED */
   L2 = PARY(IX);
   OFF = PARY(IX+1);
   LEN = PARY(IX+2);
   IF VERIFY(PARY(IX+3),'0123456789')=0 & ^SUBSTR(PARQCK,IX+3,1)
     THEN DO;
       L3 = PARY(IX+3);
       IF PARY(7)='COL'
         THEN GO TO COMMON;
       GO TO L3COM; /* <L3> SUPPLIED */
       END;
     ELSE STR = PARY(IX+3);
   GO TO COMMON;
  CMDLAB(5): /* OL */
   /* 1        2    3    4     5     6             */
   /* OL      <L1> <L2> <L3>  <L4>  <NAME>         */
   IF PARY(4) =''
     THEN IX = 2; /* L2 OMITTED */
     ELSE IX = 3;
   L2 = PARY(IX);
   L3 = PARY(IX+1);
   IF PARY(IX+2)=''
     THEN L4 = L3;
     ELSE L4 = PARY(IX+2);
   IF PARY(6)=''
     THEN OLPTR=RHPTR;
     ELSE DO;
       CALL SETCAPS(PARY(6));
       DO OLPTR=NXTRHEL REPEAT OLPTR->RHNXT WHILE(OLPTR^=NULL)UNTIL(
       OLPTR->RHNAME=PARY(6));
         END;
       IF OLPTR=NULL
         THEN DO;
           MSGDATA='NAME NOT FOUND';
           RHRC=8;
           RETURN;
           END;
       END;
   GO TO L3COM;
  L3COM:CALL #MD(OLPTR,SUBENT,L3); /* CALL MDPROC */
   IF OLPTR->RECPTR->RECSEQ ^= L3
     THEN DO;
       MSGDATA ='L3 NOT FOUND';
       RHRC = 8;
       RETURN;
       END;
   IF PARY(7)^=SAMELIT
     THEN STR = OLPTR->RECPTR->RECSTR;
     ELSE STR = SUBSTR(OLPTR->RECPTR->RECSTR,MIN(OFF,LENGTH(OLPTR->
     RECPTR->RECSTR)+1));
   L3PTRS,L3PTR=OLPTR->RECPTR;
   GO TO COMMON; /* 1  2  3  4  5  */
  CMDLAB(6):     /* AL L1 L2 L3 L4 */
  CMDLAB(7): /* AR */
   IF PARY(2) =''
     THEN DO;
       L1 = 0;
       L2 = 99999999;
       END;
     ELSE DO;
       L1 = PARY(2);
       IF PARY(3) =''
         THEN L2 = L1;
         ELSE L2 = PARY(3);
       END;
   IF CMDINDX=7 /* AR? */
     THEN IF PARY(4) =''
       THEN DO;
         L3=BUFLN;
         L4=1;
         END;
       ELSE DO;
         L3=PARY(4);
         IF PARY(5)=''
           THEN L4=0;
           ELSE DO;
             L4=PARY(5);
             IF L4>=L3
               THEN DO;
                 MSGDATA='STARTING COLUMN TOO BIG';
                 RHRC=16;
                 RETURN;
                 END;
             END;
         END;
     ELSE IF PARY(4)='' /* IT IS AL */
       THEN DO;
         L3=1;
         L4=BUFLN;
         END;
       ELSE DO;
         L3=PARY(4);
         IF PARY(5)=''
           THEN L4=0;
           ELSE DO;
             L4=PARY(5);
             IF L4<=L3
               THEN DO;
                 MSGDATA='ENDING COLUMN TOO SMALL';
                 RHRC=16;
                 RETURN;
                 END;
             END;
         END;
   IF L3<L4
     THEN DO;
       S=L3;
       E=L4;
       END;
     ELSE DO;
       S=L4;
       E=L3;
       END;
   GO TO COMMON;
  CMDLAB(8): /* SEQ */
   IF PARY(2)=''
     THEN L3=BUFLN-7;
     ELSE L3=PARY(2);
   L1=0;
   L2=99999999;
   GO TO COMMON;
  CMDLAB(12): /* RESEQ */
   L1=0;
   L2=99999999;
   IF PARY(2)=''
     THEN L3=BUFLN-7;
     ELSE L3=PARY(2);
   ROF=L3;
   IF ROF=0
     THEN ROF=1;
   IF PARY(3)=''
     THEN L4=8;
     ELSE L4=PARY(3);
   GO TO COMMON;
  CMDLAB(9): /* CLEAR */
   IF PARY(2)=''
     THEN DO;
       L1 = 0;
       L2 = 99999999;
       L3 = 1;
       END;
     ELSE DO;
       L1 = PARY(2);
       IF PARY(3)=''
         THEN DO;
           L2 = L1;
           L3 = 1;
           END;
         ELSE DO;
           L2 = PARY(3);
           IF PARY(4)=''
             THEN L3 = 1;
             ELSE DO;
               L3 = PARY(4);
               IF L3 < 1
                 THEN L3=1;
               END;
           END;
       END;
   GO TO COMMON;
  CMDLAB(10): /* TRANSLAT */
   RHTRANSW ='1'B;
   L1 = 0;
   L2 = 99999999;
   GO TO COMMON;
  CMDLAB(11): /* FLIP */
   /* 1     2    3    4      5     6     */
   /* FLIP <L1> <L2> <COL1> <LEN> <COL2> */
   L1 = PARY(2);
   L2 = PARY(3);
   COL1 = PARY(4);
   LEN = PARY(5);
   COL2 = PARY(6);
   GO TO COMMON;
  CMDLAB(17): /* SETSEQ */
   L1 = PARY(2);
   CALL #MD(RHPTR,SUBENT,L1); /* CALL MDPROC */
   IF RECPTR=HDPTR
     THEN DO;
       MSGDATA='RECORD NOT FOUND';
       RHRC = 8;
       RETURN;
       END;
   L2 = PARY(3);
   L3 = 1;
   IF LSTPTR^=HDPTR
     THEN IF LSTPTR->RECSEQ>=L2
       THEN L3=0;
   IF NXTPTR^=HDPTR
     THEN IF NXTPTR->RECSEQ<=L2
       THEN L3=0;
   IF L3=0
     THEN PUT STRING(CMDDATA) EDIT('MO ',L1,L2)(A,P'ZZZZZZZ9',X(1),P
     'ZZZZZZZ9');
     ELSE RECSEQ = L2;
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
   RHRC = 0;
   RETURN;
  COMMON:
   CALL #MD(RHPTR,SUBENT,L1); /* CALL MDPROC */
   IF RECPTR=HDPTR
     THEN DO;
       MSGDATA='RECORD NOT FOUND';
       RHRC=8;
       RETURN;
       END;
   SAVPTR = RECPTR;
   DO RECPTR=RECPTR REPEAT NXTPTR WHILE(RECSEQ<=L2)UNTIL(NXTPTR=HDPTR);
     SELECT(CMDINDX);
       WHEN(1,2,3) /* IT IS SL, SR */
       IF RECSTR^=''& S<=LENGTH(RECSTR)
         THEN DO;
           EN=MIN(MAXLEN(RECSTR),E);
           IF EN>LENGTH(RECSTR)
             THEN RECSTR=RECSTR××REPEAT(' ',EN-LENGTH(RECSTR)-1);
           L=MAX(0,EN-S+1);
           BUF=SUBSTR(RECSTR,S,L);
           IF BUF^=''
             THEN DO;
               IF CMDINDX=3 /* IS IT SR? */
                 THEN IF ^NOTRSW
                   THEN SUBSTR(RECSTR,S,L)=REPEAT(' ',AMT-1)××BUF;
                   ELSE DO;
                     I=L-SUFFIX(BUF,' '); /* NUMBER OF BLANKS AT END */
                     IF I<AMT
                       THEN IF I>0
                         THEN SUBSTR(RECSTR,S,L)=REPEAT(' ',I-1)××BUF;
                         ELSE;
                       ELSE SUBSTR(RECSTR,S,L)=REPEAT(' ',AMT-1)××BUF;
                     END;
                 ELSE IF ^NOTRSW
                   THEN SUBSTR(RECSTR,S,L)=SUBSTR(RECSTR,
                     MIN(LENGTH(RECSTR),S+AMT),MAX(0,L-AMT));
                   ELSE SUBSTR(RECSTR,S,L)=
                     SUBSTR(BUF,MIN(AMT+1,PREFIX(BUF,' ')));
               END;
           END;
       WHEN(15) /* IT IS PBSL */
       IF RECSTR^=''& S<=LENGTH(RECSTR)
         THEN DO;
           TL=MIN(LENGTH(RECSTR),E)-S+1;
           STR=SUBSTR(RECSTR,S,TL);
           SUBSTR(RECSTR,S,TL)='';
           IF AMT>S-1
             THEN IF PARY(7)='R'
               THEN MAMT=AMT;
               ELSE MAMT=MIN(AMT,S-1+PREFIX(STR,' ')-1);
             ELSE MAMT=AMT;
           IF S > 1 THEN BLCK:DO SL=S-1 TO MIN(1,S-MAMT) BY -1;IF
           SUBSTR(RECSTR,SL,1)^=' '
             THEN IF PARY(7)^='R'
               THEN DO;
                 MAMT=S-SL-1;
                 LEAVE BLCK;
                 END;
               ELSE SUBSTR(RECSTR,SL,1)=' ';
           END BLCK;
       IF MAMT>S-1
         THEN DO;
           SL=MAX(0,TL-(MAMT-S+1));
           STR=SUBSTR(STR,TL-SL+1,SL);
           MAMT=S-1;
           END;
       SUBSTR(RECSTR,S-MAMT,LENGTH(STR))=STR;
       END;
     WHEN(16) /* IT IS PBSR */
     IF RECSTR^=''& S<=LENGTH(RECSTR)
       THEN DO;
         TL=MIN(LENGTH(RECSTR),E)-S+1;
         STR=SUBSTR(RECSTR,S,TL);
         STR=SUBSTR(STR,1,SUFFIX(STR,' '));
         SUBSTR(RECSTR,S,TL)='';
         MAMT=AMT;
         IF L7=0
           THEN ML=MAXLEN(RECSTR);
           ELSE ML=MIN(L7,MAXLEN(RECSTR));
         SRCK:DO SR=S+TL TO E+AMT;
           IF SR > ML
             THEN LEAVE SRCK;
           IF LENGTH(RECSTR)>=SR
             THEN IF PARY(7)^='R'
               THEN IF SUBSTR(RECSTR,SR,1)^=' '
                 THEN DO;
                   MAMT=MIN(AMT,SR-S-LENGTH(STR));
                   LEAVE SRCK;
                   END;
                 ELSE;
               ELSE SUBSTR(RECSTR,SR,1)=' ';
             ELSE RECSTR=RECSTR××' ';
           END;
         TL = LENGTH(RECSTR)-(S+LENGTH(STR)-1);
         IF MAMT > TL
           THEN IF PARY(7) ^='R'
             THEN MAMT = TL;
             ELSE STR=SUBSTR(STR,1,MAX(0,LENGTH(STR)-MAMT+TL));
         SUBSTR(RECSTR,MIN(LENGTH(RECSTR),S+MAMT),LENGTH(STR))=STR;
         END;
     WHEN(4) /* IT IS SUBSTR */
     DO;
       IF PARY(7)=COLLIT
         THEN STR=SUBSTR(RECSTR,MIN(L3,LENGTH(RECSTR)+1));
         ELSE IF PARY(7)=RNDCH
           THEN DO; /* DATA IS TO BE GENERATED RANDOMLY */
             STR='';
             DO I=1 TO LEN;
               SEED,INT=(PI+SEED)**8;
               SEED=SEED-INT;
               INT=LENGTH(PARY(6))*SEED+1;
               STR=STR××SUBSTR(PARY(6),INT,1);
               END;
             END;
       IF LEN=0
         THEN TTL=LENGTH(STR);
         ELSE TTL=LEN;
       L=(OFF+TTL-1)-LENGTH(RECSTR)-1;
       IF L>=0
         THEN RECSTR=RECSTR××REPEAT(' ',L);
       TLEN=MIN(TTL,LENGTH(RECSTR)-OFF+1);
       IF TLEN>0
         THEN SUBSTR(RECSTR,OFF,TLEN)=STR;
       END;
     WHEN(6,7) /* IT AL,AR */
     IF RECSTR^=''
       THEN DO;
         IF L4=0
           THEN DO;
             RECSTR=SUBSTR(RECSTR,PREFIX(RECSTR,' '));
             RECSTR=SUBSTR(RECSTR,1,SUFFIX(RECSTR,' '));
             IF CMDINDX=6 /* IS IT AL? */
               THEN IF L3 > 1
                 THEN RECSTR=REPEAT(' ',L3-2)××RECSTR;
                 ELSE;
               ELSE IF LENGTH(RECSTR)<L3
                 THEN RECSTR=REPEAT(' ',L3-LENGTH(RECSTR)-1)××RECSTR;
             END;
           ELSE DO;
             IF LENGTH(RECSTR)<S
               THEN BUF='';
               ELSE BUF=SUBSTR(RECSTR,S,MIN(LENGTH(RECSTR)-S+1,E-S+1));
             IF BUF^=''
               THEN DO;
                 BUF=SUBSTR(BUF,PREFIX(BUF,' '));
                 BUF=SUBSTR(BUF,1,SUFFIX(BUF,' '));
                 IF CMDINDX=7 /* IS IT AR? */
                   THEN IF LENGTH(BUF)<E-S+1
                     THEN BUF=REPEAT(' ',E-S-LENGTH(BUF))××BUF;
                 IF LENGTH(RECSTR)<E
                   THEN RECSTR=SUBSTR(RECSTR,1,S-1)××BUF;
                   ELSE SUBSTR(RECSTR,S,E-S+1)=BUF;
                 END;
             END;
         END;
     WHEN(8) /* IT IS SEQ */
     DO;
       SEQPIC=RECSEQ;
       IF L3=0
         THEN RECSTR=SEQBL××RECSTR;
         ELSE CALL VSUBSTR(RECSTR,L3,8,SEQBL);
       END;
     WHEN(12) /* IT IS RESEQ */
     DO;
       RECSEQ=SUBSTR(RECSTR,ROF,L4);
       IF L3=0
         THEN RECSTR=SUBSTR(RECSTR,L4+1);
       END;
     WHEN(9) /* IT IS CLEAR */
     IF LENGTH(RECSTR)>=L3
       THEN RECSTR=SUBSTR(RECSTR,1,L3-1);
     WHEN(10) /* IT IS TRANSLAT */
     CALL #DENTTR(RECSTR); /* CALL DENTTR */
     WHEN(11) /* IT IS FLIP */
     DO;
       T = MAX(COL1,COL2)+LEN-1;
       IF T > LENGTH(RECSTR)
         THEN RECSTR=RECSTR××REPEAT(' ',T-1);
       IF LENGTH(RECSTR) < COL1
         THEN BUF='';
         ELSE BUF=SUBSTR(RECSTR,COL1,MIN(LEN,LENGTH(RECSTR)+1-COL1));
       IF LENGTH(RECSTR) < COL2
         THEN FLIPSTR='';
         ELSE FLIPSTR=SUBSTR(RECSTR,COL2,MIN(LEN,LENGTH(RECSTR)+1-COL2))
         ;
       T3=MIN(MAXLEN(RECSTR)-COL1+1,LEN);
       IF T3<0
         THEN T3=0;
       SUBSTR(RECSTR,COL1,T3)=FLIPSTR;
       T3=MIN(MAXLEN(RECSTR)-COL2+1,LEN);
       IF T3<0
         THEN T3=0;
       SUBSTR(RECSTR,COL2,T3)=BUF;
       END;
     WHEN(13,14,18) /* IT IS LIST,L,SUFFIX */
     DO;
       IF CMDINDX=18
         THEN DO; /* IT IS SUFFIX */
           IF RECSTR=''
             THEN RECSTR='';
             ELSE DO; /* GYRATIONS TO BYPASS BUG IN COMPILER*/
               BUF=RECSTR;
               RECSTR=SUBSTR(RECSTR,1,SUFFIX(BUF,' '));
               END;
           END;
         ELSE DO;
            IF SUBSTR(RECFLGS,2,1)
              THEN SUPCNT=SUPCNT+1;
              ELSE DO;
                IF SUPCNT^=0
                  THEN DO;
                    SEQPIC=SUPCNT;
                    SUPCNT=0;
                    CALL #TERM('LINES SUPPRESSED = '
                      ××SEQPIC);
                    END;
                SEQPIC=RECSEQ;
                CALL #TERM(SUBSTR(SEQBL,4,5)
                  ××' '××RECSTR); /*CALL TERMWRT*/
                END;
           END;
       IF CNT > 0
         THEN DO;
           CNT = CNT - 1;
           IF CNT = 0
             THEN L2 = RECSEQ;
           END;
       END;
     OTHERWISE /* IT IS OL */
     DO;
       I=0;
       L3LEN=LENGTH(L3PTR->RECSTR);
       DO WHILE(I<L3LEN);
         J=PREFIX(SUBSTR(L3PTR->RECSTR,I+1),' ');
         /* FIND NEXT NONBLANK */
         IF J=0
           THEN LEAVE; /* NO MORE TO OVERLAY */
         J=J+I;
         I=INDEX(SUBSTR(L3PTR->RECSTR,J),' '); /* FIND NEXT BLANK */
         IF I=0
           THEN I=LENGTH(L3PTR->RECSTR)-J+1;
           ELSE I=I-1;
         CALL VSUBSTR(RECSTR,J,I,SUBSTR(L3PTR->RECSTR,J,I));
         I=J+I;
         END;
       IF L3PTR->NXTPTR=OLPTR->HDPTR
         THEN L3PTR=L3PTRS;
         ELSE IF L3PTR->NXTPTR->RECSEQ>L4
           THEN L3PTR=L3PTRS;
           ELSE L3PTR=L3PTR->NXTPTR;
       END;
     END;
   END;
   IF SUPCNT^=0
     THEN DO;
       SEQPIC=SUPCNT;
       SUPCNT=0;
       CALL #TERM('LINES SUPPRESSED = '
         ××SEQPIC);
       END;
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
   RHRC = 0;
   END;
