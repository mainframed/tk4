 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABESEL - INCLUDED TEXT DESCRIBING SELECT/UPDATE PARSING CONTROL    *
 *           BLOCKS                                                    *
 *                                                                     *
 **********************************************************************/

   DCL 1 MAINPARM,
     2 MTOKHDR PTR,
     2 MCURTOK PTR,
     2 MSCANIX FIXED BIN(15,0);

   DCL 1 SUBRTNES,
       /* THIS IS A STRUCTURE OF ENTRY VARIABLES USED IN COMMON BY
       ALL THE PROCEDURES CALLED FROM ABE049 */
     2 CHAR_CHECK ENTRY(PTR),
     2 CLEAN_HTEXT ENTRY,
     2 CONVERT_INTFC ENTRY(CHAR(*) VAR,PTR,PTR) RETURNS(CHAR(256) VAR),
     2 COPYTOK ENTRY(PTR) RETURNS(PTR),
     2 DEL_LIST ENTRY(PTR),
     2 DELTOK ENTRY(PTR),
     2 DUM_ODD_FUNCTION ENTRY RETURNS(CHAR(256) VAR),
     2 DUM_PUT_OPERAND ENTRY(PTR,FLOAT DEC(16),CHAR(80) VAR),
     2 DO_SELECT ENTRY(PTR,PTR,PTR,,,PTR) RETURNS(PTR),
     2 END_CLAUSE ENTRY(PTR) RETURNS(BIT(1)),
     2 EVAL_COMMON ENTRY(PTR,PTR,PTR,) RETURNS(CHAR(256) VAR),
     2 EXPNEXT ENTRY(PTR,FIXED BIN(31,0)) RETURNS(CHAR(8)),
     2 FIND_FIELD ENTRY(PTR,CHAR(8),CHAR(8),PTR) RETURNS(PTR),
     2 GET_OPERAND ENTRY(PTR,PTR) RETURNS(DEC FLOAT(16)),
     2 GET_SET ENTRY(PTR,PTR,CHAR(8),CHAR(8),PTR),
     2 GETDATA ENTRY(PTR,PTR,PTR) RETURNS(CHAR(256) VAR),
     2 GETDATC ENTRY(PTR,CHAR(8),CHAR(8),PTR,PTR)
         RETURNS(CHAR(256) VAR),
     2 GETDATC_SUB ENTRY(PTR,PTR,CHAR(8)) RETURNS(CHAR(256) VAR),
     2 GETFIELD ENTRY(PTR,PTR) RETURNS(CHAR(256) VAR),
     2 LIST_QUERY_TYPE ENTRY(PTR) RETURNS(PTR),
     2 LOC_DB ENTRY(PTR),
     2 LOC_DBD ENTRY(PTR),
     2 MYSCAN ENTRY,
     2 ODD_FUNCTION_COMMON ENTRY RETURNS(DEC FLOAT(16)),
     2 PARSE_SELECT ENTRY(CHAR(*) VAR, CHAR(*) VAR,
       FIXED BIN(31,0),,,,,,,),
     2 QNUM ENTRY(CHAR(8),CHAR(1)) RETURNS(FIXED BIN(31,0)),
     2 QNUMSTR ENTRY RETURNS(CHAR(8)),
     2 QUEUE ENTRY(PTR,PTR) RETURNS(PTR),
     2 RUN_BUF ENTRY(PTR,FIXED BIN(15,0),FIXED BIN(15,0),CHAR(*) VAR,
       PTR),
     2 RUN_SORT ENTRY,
     2 SELECT_LIST ENTRY,
     2 SET_FIELD ENTRY(PTR,PTR,PTR,CHAR(*),PTR),
     2 SIGNUM ENTRY(PTR,PTR,PTR) RETURNS(FIXED BIN(15,0)),
     2 SIGNUM_COMMON ENTRY(CHAR(256) VAR, CHAR(256) VAR, PTR, PTR)
       RETURNS(FIXED BIN(15,0)),
     2 SINGLE_QUEUE ENTRY,
     2 SUBQUERY_TYPE ENTRY(PTR) RETURNS(BIT(1)),
     2 SUBQUERY_TYPE_SUB ENTRY(CHAR(*) VAR) RETURNS(BIT(1)),
     2 WHERE_EVAL ENTRY(PTR) RETURNS(BIT(1));

   % DCL SCAN CHAR;
   % SCAN = 'DO; CALL MYSCAN(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,
     SPCHARS); END';
   /* THE ABOVE PREPROCESSOR STATEMENTS ALLOW SHORTHAND NOTATION FOR
   INVOKING SCANNER */

   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL 1 TOKEN2 BASED(CURTOK),
     2 PAD CHAR(12),
     2 TEMPVALUE FLOAT DEC(6);

   DCL OPERAND          INIT(0) FIXED STATIC;
   DCL OPERATOR         INIT(1) FIXED STATIC;
   DCL KEYWORD          INIT(2) FIXED STATIC;
   DCL TYPE_SPCHAR      INIT(3) FIXED STATIC;
   DCL QUOTED_STRING    INIT(4) FIXED STATIC;
   DCL NUMERIC_CONSTANT INIT(5) FIXED STATIC;
   DCL NO_MORE_TOKENS   INIT(6) FIXED STATIC;
   DCL OTHER            INIT(7) FIXED STATIC;
   DCL FUNCTION_A       INIT(8) FIXED STATIC;
   DCL TEMPORARY        INIT(9) FIXED STATIC;
   DCL FUNCTION_B       INIT(10) FIXED STATIC;
   DCL ASSIGNMENT       INIT(17) FIXED STATIC;

   DCL 1 SUBQ_HDR,
       /* THIS IS THE TOP-OF-QUEUE STRUCTURE FOR THE SUBQUERY LIST. */
     2 SUBQ_FIRST PTR,
       /* PTR TO THE FIRST SELECT_HTEXT BLOCK ON THE SUBQUERY LIST. */
     2 SUBQ_LAST PTR,
       /* PTR TO THE LAST SELECT_HTEXT BLOCK ON THE SUBQUERY LIST. */
     2 SUBQ_CNT FIXED BIN(15,0);
       /* THIS IS A COUNT OF THE SUBQUERIES IN THE LIST.  IT ALSO
       IS USED AS THE SEED TO CREATE A UNIQUE VALUE FOR SUBQ_NUM
       EACH TIME A SUBQUERY IS ADDED TO THE LIST. */

   DCL 1 SELECT_HTEXT BASED(SELPTR),
       /* THIS STRUCTURE CONTAINS THE SYNTACTICAL DESCRIPTION
       PRODUCED BY PARSING A SELECT STATEMENT. */
     2 SUBQ_NEXT PTR,
       /* IF THIS CONTROL BLOCK IS PRODUCED DURING PARSE, THIS FIELD
       WILL BE A PTR TO THE NEXT SUBQUERY ON THE PARSE QUEUE, OR NULL
       IF LAST.  IF THIS CONTROL BLOCK IS PRODUCED BY THE EXECUTOR
       (ABE49B), THIS FIELD WILL BE THE PTR TO THE NEXT LOWER
       SELECT_HTEXT BLOCK ON THE PUSH/POP EXECUTION STACK. */
     2 SUBQ_PREV PTR,
       /* PTR TO THE PRIOR SUBQUERY OR NULL IF FIRST */
     2 SUBQ_NUM FIXED BIN(15,0),
       /* NUMBER WHICH UNIQUELY IABEIFIES THIS SUBQUERY. */
     2 SCANPARM,
       /* THIS SUBSTRUCTURE DESCRIBES THE QUEUE OF TOKENS SCANNED
       FOR THIS SELECT STATEMENT. */
      3 TOKHDR PTR,
       /* POINTER TO THE FIRST TOKEN IN THE QUEUE */
      3 CURTOK PTR,
       /* POINTER TO THE TOKEN MOST RECENTLY SCANNED. */
      3 SCANIX FIXED BIN(15,0),
       /* OFFSET, RELATIVE 1, IN THE COMMAND LINE JUST BEYOND THE
       TOKEN MOST RECENTLY SCANNED. */
     2 SELECT_FLAGS,
      3 SELECT_ALL_FIELDS BIT(1),
       /* ON IF SELECT * WAS SPECIFIED - IN THE CASE OF THE LOCATE
       SUBCOMMAND, ON IF NEXT KEYWORD WAS SPECIFIED. */
      3 SELECT_DISTINCT BIT(1),
       /* ON IF SELECT DISTINCT WAS SPECIFIED */
      3 SELECT_DBD BIT(1),
       /* ON IF DBD WAS SPECIFIED */
      3 MERGE_FLAG BIT(1),
       /* ON IF MERGE SPECIFIED */
      3 SET_FLAG BIT(1),
       /* ON IF SET SPECIFIED */
      3 UPDATE_FLAG BIT(1),
       /* ON IF UPDATE SPECIFIED */
      3 SELECT_SUMMARY BIT(1),
       /* SELECT-LIST CONTAINS ONE OR MORE SUMMARY STAT REQUESTS */
      3 SELECT_DISPLAY BIT(1),
       /* ON IF DISPLAY KEYWORD SPECIFIED */
     2 SELECT_LIST_PTR PTR,
       /* POINTER TO THE LIST OF FIELDS TO BE SELECTED. SEE
       STRUCTURE SELECT_LIST_ELEMENT. */
     2 FROM_LIST_PTR PTR,
       /* POINTER TO THE LIST OF FROM SPECIFICATIONS.  SEE
       STRUCTURE FROM_FIELD. */
     2 WHERE_PTR PTR,
       /* POINTER TO THE WHERE-CLAUSE SPECIFICATIONS. SEE STRUCTURE
       SEARCH_CONDITION BLOCK */
     2 GROUP_BY_PTR PTR,
       /* POINTER TO THE GROUP-BY-CLAUSE SPECIFICATIONS. */
     2 ORDER_BY_PTR PTR,
       /* POINTER TO THE ORDER-BY-CLAUSE SPECIFICATIONS. */
     2 TO_PTR PTR,
       /* POINTER TO THE TOKEN STRUCTURE FOR THE TO_CLAUSE */
     2 TO_RHP PTR,
       /* POINTER TO THE RECHDR FOR THE TO DATA SET */
     2 SELECT_SUMMARY_TYPE CHAR(8) VAR,
       /* IF THIS IS A BLANKET SUMMARY REQUEST, THIS FIELD WILL
       CONTAIN THE TYPE (SUM, AVG, ETC.). */
     2 DROP_LIST_PTR PTR,
       /* POINTS TO SELECT LIST OF FIELD NAMES TO BE DROPPED */
     2 RENAME_LIST_PTR PTR;
       /* POINTS TO LIST OF FIELD RENAME STRUCTURES (SEE RENAME_ITEM) */

   DCL 1 RENAME_ITEM BASED(RENPTR),
       /* DESCRIBES THE RENAME SPECIFICATIONS */
     2 RENAME_NEXT_PTR PTR,
       /* SINGLY-LINKED LIST POINTER */
     2 RENAME_OLD PTR,
       /* PTR TO THE TOKEN DESCRIPTOR FOR THE OLD NAME */
     2 RENAME_NEW PTR;
       /* PTR TO THE TOKEN DESCRIPTOR FOR THE NEW NAME */

   DCL 1 ORDER_BY_SPEC BASED(OSPPTR),
       /* DESCRIBES THE ORDER-BY SPECIFICATIONS */
     2 ORDER_LIST_PTR PTR,
       /* SINGLY-LINKED LIST POINTER */
     2 ORDER_NAME PTR,
       /* PTR TO THE TOKEN DESCRIPTOR FOR THE ORDER-BY NAME */
     2 ORDER_ASCENDING BIT(1);
       /* ON IF ASCENDING SEQUENCE IS SPECIFIED. */

   DCL 1 GROUP_BY_BLOCK BASED(GROUP_BY_PTR),
       /* DESCRIBES THE GROUP-BY SPECIFICATIONS */
     2 GROUP_SPEC_PTR PTR,
       /* PTR TO LIST OF ORDER_BY_SPEC CONTROL BLOCKS */
     2 GROUP_SEARCH_CONDITION PTR,
       /* PTR TO THE SEARCH_CONDITION BLOCK IF A HAVING CLAUSE WAS
       SPECIFIED. */
     2 GROUP_BUFPTR PTR;
       /* PTR TO RECORD BUFFER USED FOR SEQUENCE CHECKING */

   DCL 1 SEARCH_CONDITION_BLOCK BASED(SRCH_PTR),
       /* THIS STRUCTURE DESCRIBES THE CONTROL BLOCK USED FOR WHERE-
       AND HAVING-CLAUSES */
     2 SEARCH_FLAGS,
      3 NOT BIT(1),     /* 'NOT' SPECIFIED */
      3 SIMPLE BIT(1),  /* SIMPLE EXPRESSION EVALUATION */
      3 BETWEEN BIT(1), /* (NOT) BETWEEN OPTION */
      3 IN BIT(1),      /* (NOT) IN OPTION */
      3 IS BIT(1),      /* IS (NOT) NULL OPTION */
      3 LIKE BIT(1),    /* (NOT) LIKE OPTION */
     2 SEARCH_EXP(3) PTR;
       /* POINTS TO QUEUE OF TOKENS DEFINING POLISH EXPRESSIONS.
       IF SEARCH TYPE IS -
         SIMPLE
           SEARCH_EXP(1) WILL POINT TO SIMPLE EXPRESSION.
           SEARCH_EXP(2) WILL BE NULL.
           SEARCH_EXP(3) WILL BE NULL.
         BETWEEN
           SEARCH_EXP(1) WILL POINT TO AN
             EXPRESSION CONSISTING OF A SINGLE NAME-REFERENCE.
           SEARCH_EXP(2) WILL POINT TO EXPRESSION DESCRIBING
             THE LOW END OF THE RANGE.
           SEARCH_EXP(3) WILL POINT TO AN
             EXPRESSION DESCRIBING THE HIGH END OF THE RANGE.
         IN
           SEARCH_EXP(1) WILL POINT TO AN EXPRESSION
             CONSISTING OF A SINGLE NAME-REFERENCE.
           SEARCH_EXP(2) WILL BE THE HEADER POINTER FOR A
             SINGLY-LINKED LIST OF EXPRESSION POINTERS (SEE
             STRUCTURE SELECT_LIST_ELEMENT)
             DESCRIBING THE POSSIBLE VALUE.
           SEARCH_EXP(3) WILL BE NULL.
         IS
           SEARCH_EXP(1) WILL POINT TO AN EXPRESSION
             CONSISTING OF A SINGLE NAME-REFERENCE.
           SEARCH_EXP(2) WILL BE NULL.
           SEARCH_EXP(3) WILL BE NULL.
         LIKE
           SEARCH_EXP(1) WILL POINT TO AN EXPRESSION CONSISTING
             OF A SINGLE NAME-REFERENCE.
           SEARCH_EXP(2) WILL POINT TO AN EXPRESSION CONSISTING
             OF A SINGLE QUOTED STRING.
           SEARCH_EXP(3) WILL BE NULL. */

   DCL 1 SELECT_LIST_ELEMENT BASED(SELFPTR),
       /* ELEMENT OF A SINGLY-LINKED LIST QUEUED DESCRIBING A
       SELECT LIST.  USED IN 'IN' AND 'SELECT' CLAUSES */
     2 SELECT_NEXT_FIELD PTR,
       /* PTR TO NEXT SEARCH_LIST_ELEMENT OR NULL. */
     2 FIELD_EXP_HDR PTR,
       /* POINTER TO QUEUE OF TOKENS DEFINING THE POLISH EXPRESSION. */
     2 SELECT_NAME CHAR(8),
       /* THE FIELD NAME IN THE TO- DATA SET WILL BE DERIVED AND STORED
       HERE WHEN THE SELECT CLAUSE IS EXECUTED. */
     2 SELECT_ELEMENT_FLAGS,
      3 SELECT_EXP BIT(1),
       /* ON IF THIS ELEMENT IS AN EXPRESSION, OFF IF THIS ELEMENT IS
       A SIMPLE VARIABLE REFERENCE. */
      3 SELECT_SUM BIT(1),
       /* ON IF THIS ELEMENT IS A SUMMARY STAT FUNCTION REFERENCE */
      3 PAD BIT(14),
     2 SELECT_ID FIXED BIN(15,0),
       /* INCREMENTAL NUMBER WHICH UNIQUELY IABEIFIES THIS ELEMENT
       OF THE SELECT LIST. */
     2 SELECT_BUCKET1 DEC FLOAT(16),
       /* USED FOR SUMMARY STATS (AVG, SUM, ETC.). */
     2 SELECT_BUCKET2 DEC FLOAT(16),
       /* USED FOR SUMMARY STATS (AVG, SUM, ETC.). */
     2 SELECT_COUNT DEC FLOAT(16);
       /* COUNT OF ELIGIBLE RECORDS FOR SUMMARY STATS */

   DCL 1 FROM_FIELD BASED(FROFPTR),
       /* THIS STRUCTURE DESCRIBES A FROM SPECIFICATION IN THE
       FROM-CLAUSE.  IT IS AN ELEMENT OF A SINGLY-LINKED LIST
       POINTER TO BY FROM_LIST_PTR. */
     2 FROM_NEXT_FIELD PTR,
       /* PTR NEXT FROM_FIELD STRUCTURE */
     2 FROM_NAME CHAR(20) VAR,
       /* FULL NAME OF DATA BASE FROM WHICH DATA IS TO BE SELECTED */
     2 SHORT_FROM_NAME CHAR(20) VAR,
       /* SHORT-HAND TEMPORARY NAME OF DATA BASE */
     2 FROM_RHP PTR,
       /* POINTER TO RECHDR FOR THE FROM DATA SET */
     2 FROM_FLAGS,
      3 FROM_EOF BIT(1),
       /* USED DURING SELECT PROCESSING TO INDICATE ENTIRE FILE HAS
       BEEN PROCESSED. */
      3 FROM_SKIP BIT(1),
       /* USED DURING SELECT PROCESSING TO INDICATE WHETHER THE CURRENT
       RECORD IN THIS FROM-DATASET IS TO PARTICIPATE IN THE GENERATION
       OF THE CURRENT TO-DATASET RECORD. */
      3 FROM_RES BIT(6),
       /* RESERVED */
     2 FROM_RES2 CHAR(3),
       /* RESERVED */
     2 FROM_RECPTR PTR;
       /* PTR TO CURRENT RECORD IN FROM DATA SET. */
