   /* COPYRIGHT 1988 BY THOMAS GLEN SMITH */
   /* ABE074 - PEL <PEL> <X> <Y> */
   %INCLUDE ABESUB;
 ABESUB(ABE074) PARS(000) CHECK(YES) APL(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABESREC;
   DCL 1 DDI01 BASED(RHPLOT79),
   %INCLUDE ABE063I;
   %INCLUDE APLCB;

   DCL SETCAPS ENTRY;
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);

   DCL PEL CHAR(1);
   DCL (X,XCOUNT,Y,YCOUNT) FIXED BIN(31,0);
   DCL (XENT,YENT) ENTRY VARIABLE;
   DCL (XRHP,YRHP) PTR;

   DCL 1 OUTRHN,
     %INCLUDE ABERHN;
   DCL (XPTR,YPTR) PTR;
   DCL 1 FREESTR BASED(CPTR), /* STRUCTURE FOR FREE STATEMENTS */
     2 PAD FIXED BIN(15,0),
     2 FLEN FIXED BIN(15,0),
     2 FSTR CHAR(L REFER(FLEN));
   DCL 1 SCASTR BASED(CPTR), /* STRUCTURE FOR SCALAR */
     2 PAD FIXED BIN(15,0),
     2 SLEN FIXED BIN(15,0) INIT(4),
     2 SCALAR FIXED BIN(31,0);
   DCL 1 APLSTR BASED(CPTR), /* STRUCTURE FOR APL VARIABLE */
     2 PAD FIXED BIN(15,0),
     2 ALEN FIXED BIN(15,0),
     2 ARHP PTR, /* PTR TO RECHDR FOR APL VARIABLE */
     2 ARPT PTR, /* ARGUMENT FOR GET_EL */
     2 ACIX FIXED BIN(31,0), /* ARGUMENT FOR GET_EL */
     2 AMIX FIXED BIN(31,0), /* ARGUMENT FOR GET_EL */
     2 INRHN LIKE OUTRHN;
   DCL 1 RQLSTR BASED(CPTR), /* STRUCTURE FOR RQL VARIABLE */
     2 PAD FIXED BIN(15,0),
     2 RLEN FIXED BIN(15,0) INIT(12),
     2 RRHP PTR, /* PTR TO RECHDR FOR RQL VARIABLE */
     2 RRPT PTR, /* CURRENT RECORD PTR */
     2 INRHNP PTR; /* PTR TO RHNAMESTR FOR INPUT FIELD */

   XPTR,YPTR=NULL;
   ON CONDITION(BADPIX) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='ERROR IN PIX SUBCOMMAND';
     GOTO EOJ;
     END;
   ON CONDITION(BADAPL) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='ERROR IN PIX SUBCOMMAND';
     GOTO EOJ;
     END;
   IF RHPLOT79=NULL
     THEN I=#CMD('GS',RHPTR,RHHDRPT); /* INITIALIZE BITMAP */
   PEL=PARY(1);
   OUTRHN.RHNTYPE=7; /* CONVERT TO FIXED BINARY */
   OUTRHN.RHNPOS=1;
   OUTRHN.RHNLNG=4;
   OUTRHN.RHNFD=0;
   CALL SETUP('X',PARY(2),XENT,XPTR,XCOUNT);
   CALL SETUP('Y',PARY(3),YENT,YPTR,YCOUNT);

   /* MAINLINE PROCESSING HERE */
   DO I=1 TO MAX(XCOUNT,YCOUNT);
     IF I<=XCOUNT
       THEN X=XENT(XPTR);
     IF I<=YCOUNT
       THEN Y=YENT(YPTR);
     CALL #PIXPUT(X,Y,PEL,RHPLOT79);
     END;
 EOJ:;
   IF XPTR^=NULL
     THEN FREE XPTR->FREESTR;
   IF YPTR^=NULL
     THEN FREE YPTR->FREESTR;

 APLPROC:  PROC(PPTR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 * CALLED FROM MAINLINE WHEN X OR Y IS AN APL VARIABLE.                *
 **********************************************************************/
   DCL PPTR PTR;
   DCL INSTR CHAR(256) VAR;
   DCL RET FIXED BIN(31,0),
       RETCH CHAR(4) BASED(ADDR(RET));

   INSTR=GET_EL_REAL('FORWARD',PPTR->ARHP,PPTR->ARPT,PPTR->ACIX,
     PPTR->AMIX);
   RETCH=#CONVERT(INSTR,ADDR(PPTR->INRHN),ADDR(OUTRHN));
   RETURN(RET);
   END APLPROC;

 CONSTANT:  PROC(PPTR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 * CALLED FROM MAINLINE WHEN X OR Y IS A CONSTANT.                     *
 **********************************************************************/
   DCL PPTR PTR;
   RETURN(PPTR->SCALAR);
   END CONSTANT;

   %INCLUDE ABE061F; /* INCLUDE SOURCE FOR GET_EL_REAL, GET_EL_SUB */

 INCREMENT:  PROC(PPTR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 * CALLED FROM MAINLINE WHEN X OR Y IS AN INCREMENTING VALUE.          *
 **********************************************************************/
   DCL PPTR PTR;
   PPTR->SCALAR=PPTR->SCALAR+1;
   RETURN(PPTR->SCALAR);
   END INCREMENT;

 RQLPROC:  PROC(PPTR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 * CALLED FROM MAINLINE WHEN X OR Y IS AN RQL VARIABLE.                *
 **********************************************************************/
   DCL PPTR PTR;
   DCL RET FIXED BIN(31,0),
       RETCH CHAR(4) BASED(ADDR(RET));

   PPTR->RRPT=#SUCC(RHHDRPT,PPTR->RRHP,PPTR->RRPT); /* NEXT RECORD */
   RETCH=#CONVERT(#GETFIELD(PPTR->INRHNP,ADDR(PPTR->RRPT->RECLEN)),
     PPTR->INRHNP,ADDR(OUTRHN));
   RETURN(RET);
   END RQLPROC;

 SETUP: PROC(OPCH,OPSTR,PENT,PPTR,PCOUNT);
 /**********************************************************************
 * CALLED TO SET UP PROCESSING FOR EITHER THE X OR Y OPERAND, DEPENDING*
 * ON THE VALUE IN OPCH.  THE OPERAND MAY BE EITHER A CONSTANT, AN     *
 * APL VARIABLE, A SYMBOLIC VARIABLE REFERENCE (E.G. &XYZ), A          *
 * NAME.FIELD REFERENCE, OR AND *.                                     *
 **********************************************************************/
   DCL OPCH CHAR(1);
   DCL OPSTR CHAR(*) VAR;
   DCL PENT ENTRY VARIABLE;
   DCL PPTR PTR;
   DCL PCOUNT FIXED BIN(31,0);

   DCL RHP PTR;
   DCL (DATANAM,FIELDNAM) CHAR(8);
   DCL I FIXED BIN;

   IF OPSTR=''
     THEN DO;
       MSGDATA=OPCH××' PARAMETER IS REQUIRED';
       SIGNAL CONDITION(BADPIX);
       RETURN;
       END;
   IF OPSTR='*'
     THEN DO; /* ALL POSSIBLE VALUES */
       ALLOC SCASTR SET(PPTR);
       PPTR->SCALAR=0;
       PENT=INCREMENT;
       IF OPCH='X'
         THEN PCOUNT=PLMAXX;
         ELSE PCOUNT=PLMAXY;
       RETURN;
       END;
   IF VERIFY(OPSTR,'0123456789')=0
     THEN DO; /* IT IS CONSTANT */
       ALLOC SCASTR SET(PPTR);
       PPTR->SCALAR=OPSTR;
       PENT=CONSTANT;
       PCOUNT=1;
       RETURN;
       END;
   CALL SETCAPS(OPSTR);
   IF SUBSTR(OPSTR,1,1)='&'
     THEN DO; /* IT IS SYMBOLIC NAME */
       ALLOC SCASTR SET(PPTR);
       PPTR->SCALAR=#SYMA(RHHDRPT,RH_SYMTREE,SUBSTR(OPSTR,2));
       PENT=CONSTANT;
       PCOUNT=1;
       RETURN;
       END;
   I=INDEX(OPSTR,'.');
   IF I=0
     THEN DO;
       DATANAM=OPSTR;
       FIELDNAM=OPCH;
       END;
     ELSE DO;
       IF I=1
         THEN DATANAM=RHNAME;
         ELSE DATANAM=SUBSTR(OPSTR,1,I-1);
       FIELDNAM=SUBSTR(OPSTR,I+1);
       END;
   RHP=#RHPLOC(DATANAM,RHHDRPT);
   IF RHP=NULL
     THEN DO;
       MSGDATA='DATASET = '××DATANAME××' NOT FOUND';
       SIGNAL CONDITION(BADPIX);
       RETURN;
       END;
   SELECT;
     WHEN(RHP->RHUSETR^=NULL)
       CALL SETUP_RQL(OPCH,OPSTR,PENT,PPTR,PCOUNT,RHP,DATANAM,FIELDNAM);
     WHEN(RHP->RH_APL^=NULL)
       CALL SETUP_APL(OPCH,OPSTR,PENT,PPTR,PCOUNT,RHP);
     OTHERWISE DO;
       MSGDATA='INVALID NAME='××OPSTR;
       SIGNAL CONDITION(BADPIX);
       RETURN;
       END;
     END; /* SELECT */
   END SETUP;

 SETUP_APL: PROC(OPCH,OPSTR,PENT,PPTR,PCOUNT,RHP);
 /**********************************************************************
 * CALLED TO SET UP PROCESSING FOR AN OPERAND WHEN THE INDICATION IS   *
 * THE NAME REPRESENTS AN APL VARIABLE.                                *
 **********************************************************************/
   DCL OPCH CHAR(1);
   DCL OPSTR CHAR(*) VAR;
   DCL PENT ENTRY VARIABLE;
   DCL PCOUNT FIXED BIN(31,0);
   DCL (PPTR,RHP) PTR;
   DCL (I,J) FIXED BIN;

   PENT=APLPROC;
   ALLOCATE APLSTR SET(PPTR);
   PPTR->ALEN=16+STORAGE(OUTRHN);
   PPTR->ARHP=RHP;
   PPTR->ARPT=NULL;
   PPTR->INRHN.RHNTYPE=RHP->RH_APL->RH_APL_TYPE;
   PPTR->INRHN.RHNPOS=1;
   PPTR->INRHN.RHNLNG=RHP->RH_APL->RH_APL_ELEN;
   PPTR->INRHN.RHNFD=0;
   I=RHP->RH_APL->RH_APL_RANK;
   IF I=0
     THEN PCOUNT=1; /* IT IS SCALAR APL VARIABLE */
     ELSE DO;
       PCOUNT=RHP->RH_APL->RH_APL_DIM(1);
       IF I>1
         THEN DO J=2 TO I;
           PCOUNT=PCOUNT*RHP->RH_APL->RH_APL_DIM(J);
           END;
       END;
   END SETUP_APL;

 SETUP_RQL: PROC(OPCH,OPSTR,PENT,PPTR,PCOUNT,RHP,DATANAM,FIELDNAM);
 /**********************************************************************
 * CALLED TO SET UP PROCESSING FOR AN OPERAND WHEN THE INDICATION IS   *
 * THE NAME REPRESENTS AN RQL TABLE.                                   *
 **********************************************************************/
   DCL OPCH CHAR(1);
   DCL OPSTR CHAR(*) VAR;
   DCL PENT ENTRY VARIABLE;
   DCL PCOUNT FIXED BIN(31,0);
   DCL (PPTR,RHP) PTR;
   DCL (DATANAM,FIELDNAM) CHAR(8);

   PENT=RQLPROC;
   ALLOCATE RQLSTR SET(PPTR);
   PPTR->RRHP=RHP;
   PPTR->RRPT=NULL;
   DO PPTR->INRHNP=RHP->RHUSEHD REPEAT PPTR->INRHNP->RHNAMESTR.RHNLINK
     UNTIL(PPTR->INRHNP->RHNAMESTR.RHNNAME=FIELDNAM);
     END;
   IF PPTR->INRHNP=NULL
     THEN DO;
       MSGDATA='FIELD NAMED '××FIELDNAM××' NOT FOUND IN '××DATANAM;
       SIGNAL CONDITION(BADPIX);
       RETURN;
       END;
   PCOUNT=RHP->RHCOUNT;
   END SETUP_RQL;

   END ABE074;
