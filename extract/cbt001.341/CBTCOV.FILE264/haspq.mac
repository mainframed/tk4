*PROCESS CS(60),M;
 /* HASPQ - $ COMMAND
0*$.HE GENERALIZED TSO COMMANDS - $
0*$.HE ENHANCED STATUS COMMAND
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$01/05/78
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  HASPQ
0*$DOCUMENTATION ID:  0*$
0*$HELP ID:  0*#
0*$.FI L
0*$.SP 5
0*$THIS COMMAND GIVES STATUS INFORMATION ON JOBS IN THE JES2
0*$INPUT, SETUP, AND OUTPUT QUEUES.  IT DOES THIS BY ACCESSING THE
0*$SYS1.HASPCKPT DATA SET AS A REGIONAL(1) FILE.
0*$IT IS WRITTEN IN PL/I,
0*$AND THE FOLLOWING SEQUENCE OF COMMANDS SHOULD BE USED TO
0*$COMPILE/LINKEDIT THE COMMAND:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$PLI HASPQ M LIB('SYS2.MACLIB') OBJ CS(60)
0*$LINK (HASPQ *) LOAD('SYS3.COMLIB($)') -
0*$  LIB('SYS2.PLIBASE') PLIBASE PRINT(*)
0*$ENTER LINK EDIT CONTROL STATEMENTS -
0*$ ENTRY PLICALLA
0*$.IN 0
0*$.FI L
0*$.SP 1
0*$NOTE THAT THERE IS AN OLDER VERSION OF JES IN WHICH THE
0*$HASP JOB QUEUE WAS CONTAINED IN A SINGLE CHECKPOINT RECORD.
0*$IF YOU ARE USING THIS OLDER VERSION, CHANGE THE VALUE OF
0*$PREPROCESSOR VARIABLE JESLVL FROM 'NEW' TO 'OLD'.
0*#)F FUNCTION -
0*#  THE $ COMMAND IS USED TO FIND THE STATUS
0*#  OF JOBS PREVIOUSLY SUBMITTED TO THE BACKGROUND.
0*#  IT HAS SEVERAL ADVANTAGES OVER THE STANDARD IBM
0*#  STATUS COMMAND:  (1)  IT DISPLAYS ALL JOBS WITH NAMES
0*#  PREFIXED WITH YOUR USERID, NOT JUST THOSE WITH NAMES
0*#  CONSISTING OF YOUR USERID PREFIXED TO ONE CHARACTER;
0*#  (2)  IT SHOWS YOU THE POSITION OF YOUR JOB IN THE
0*#  INPUT QUEUE.  YOU MUST BE AUTHORIZED TO USE THE STATUS COMMAND
0*#  IN ORDER TO USE THE $ COMMAND.  ALSO, CERTAIN OPTIONS ARE
0*#  RESTRICTED SO THAT YOU MUST ALSO BE AUTHORIZED TO USE THE OPER
0*#  COMMAND TO USE THEM.
0*#)X SYNTAX  -
0*#  FORMAT 1:
0*#  CAN BE USED ONLY IF YOU ARE AUTHORIZED TO USE THE STATUS COMMAND.
0*#         $ DN('NAME-PART')
0*#  FORMAT 2:
0*#  (CAN BE USED ONLY IF YOU ARE AUTHORIZED TO USE THE
0*#  STATUS AND OPER COMMANDS).
0*#         $ DN('NAME-PART')
0*#  OR
0*#         $ DQ('Q-SPEC')
0*#  OR
0*#         $ DA 'DA-SPEC'
0*#  REQUIRED - NONE
0*#  DEFAULTS - IF NO OPERANDS ARE GIVEN, $ WILL DISPLAY
0*#             THE STATUS OF ALL JOBS WITH NAMES PREFIXED WITH
0*#             YOUR USERID.
0*#)O OPERANDS
0*#))DN('NAME-PART')
0*#  THIS OPERAND IS USED TO SPECIFY A DISPLAY OTHER THAN FOR
0*#  JOBS WITH NAMES PREFIXED WITH YOUR USERID.  IF YOU ARE NOT
0*#  AUTHORIZED TO USE THE OPER COMMAND, YOU MAY ENTER TWO OR MORE
0*#  CHARACTERS, AND $ WILL DISPLAY THE STATUS OF ALL JOBS WITH
0*#  NAMES BEGINNING WITH THAT PREFIX.  IF YOU ARE AUTHORIZED TO USE
0*#  OPER, YOU MAY ALSO ENTER ONLY ONE CHARACTER, AND THE $ COMMAND
0*#  WILL DISPLAY ALL JOBS IN THAT JOB CLASS.
0*#))DQ('Q-SPEC')
0*#  YOU MAY USE THIS OPERAND ONLY IF YOU ARE AUTHORIZED TO USE THE
0*#  OPER COMMAND IN ADDITION TO THE STATUS COMMAND.  THIS OPERAND
0*#  CAN BE USED TO DISPLAY THE NUMBER OF JOBS IN THE INPUT QUEUE
0*#  IN EACH JOB CLASS BROKEN DOWN BY SELECTION PRIORITY.  IF DQ(ALL)
0*#  IS SPECIFIED, INFORMATION ON ALL JOB CLASSES WILL BE DISPLAYED.
0*#  IF DQ(C) IS SPECIFIED, INFORMATION ON ALL CLASS C JOBS WILL BE
0*#))DA 'DA-SPEC'
0*#  YOU MAY USE THESE OPERANDS ONLY IF YOU ARE AUTHORIZED TO USE THE
0*#  OPER COMMAND IN ADDITION TO THE STATUS COMMAND.  NOTE THAT
0*#  PARENTHESES ARE NOT REQUIRED AROUND THE 'DA-SPEC' VALUE.
0*#  '$ DA T' GIVES A LIST OF ALL CURRENTLY LOGGED-ON TSO USERS,
0*#  '$ DA J' GIVES A LIST OF ALL CURRENTLY EXECUTING BATCH JOBS,
0*#  AND '$ DA S' GIVES A LIST OF ALL CURRENTLY STARTED SYSTEM
0*#  TASKS.
 */
 /* NOTE - IF YOU'RE USING AN EARLY VERSION OF JES, YOU MAY HAVE
    TO CHANGE JESLVL TO 'OLD' TO GENERATE THE CODE TO HANDLE
    THE EARLIER CHECKPOINT RECORD FORMAT. */
 % DCL JESLVL CHAR;
 % JESLVL = 'NEWEST';
         % INCLUDE CPINIT1;
         % @CMP = 'O';
         % INCLUDE CPINIT2;
         % INCLUDE IKJPSCB;
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         DCL PLIXOPT CHAR(15) VAR EXT STATIC INIT('ISA(100K)');
         DCL DUMPSTT ENTRY;
         DCL JOBCK ENTRY(CHAR(8))
           RETURNS(FIXED BIN(31,0));
         DCL CPUP PIC'ZZ,ZZ9.99';
         DCL CPU FIXED BIN(31,0);
         DCL JQESTR CHAR(28) BASED(JQEPTR);
         DCL 1 HASPJQE UNALIGNED BASED(JQEPTR),
              2 JQEPRIO BIT(8),
                   /* JOB PRIORITY */
              2 JQETYPE BIT(8),
                   /* X'7F' - CLASS OF JOB QUEUED FOR EXECUTION(?)
                      X'80' - RESERVED QUEUE
                      X'40' - OS EXECUTION QUEUE
                      X'20' - INPUT QUEUE
                      X'10' - TRANSMISSION QUEUE
                      X'08' - SETUP QUEUE
                      X'04' - SYSOUT RECEIVER QUEUE
                      X'02' - OUTPUT QUEUE
                      X'01' - OUTPUT IN-PROGRESS QUEUE
                      X'00' - PURGE QUEUE */
              2 JQEJOBNO FIXED BIN(15,0),
                   /* HASP JOB NUMBER */
              2 JQEFLAGS BIT(8),
                   /* X'80' HOLD ALL JOBS
                      X'40' HOLD SINGLE JOB
                      X'20' HOLD FOR DUPLICATE JOB NAME
                      X'10' JOB IS TO BE PURGED
                      X'08' OPERATOR ISSUED $C OR $P JOB
                      X'07' JQE BUSY SYSTEM ID */
              2 JQEFLAG2 BIT(8),
                   /* X'80' JOB IS INITIATOR OR SYSTEM LOG
                      X'80' JOB HAS INDEPENDENT MODE AFFINITY
                      X'7F' SYSTEM AFFINITY OF JOB */
              2 JQECHAIN BIT(16),
                   /* OFFSET/4 NEXT JQE */
              2 JQETRAK CHAR(4),
                   /* TRACK ADDR OF JCT */
              2 JQEDEVID,
                   /* DEVICE ID */
               3 JQEPRTRT FIXED BIN(15,0),
                   /* PRINT ROUTE */
               3 JQEPUNRT FIXED BIN(15,0),
                   /* PUNCH ROUTE */
              2 JQEJOECT FIXED BIN(15,0),
                   /* JOB OUTPUT ELEMENT COUNT */
              2 JQEHLDCT BIT(8),
                   /* HELD DATA SET COUNT (BITS 0-11) */
              2 JQEHQLOK BIT(8),
                   /* HOLD QUEUE LOCK (BITS 4-7) */
              2 JQEJNAME CHAR(8);
                   /* JOB NAME FROM JOB CARD */
 % DCL JESSTR CHAR;
 %IF JESLVL = 'NEW'
    % THEN % JESSTR = '2 $UNKNOWN CHAR(8),
                        /* RESERVED FOR FUTURE USE */
                     2 $CKPUSER CHAR(8)
                        /* CHECKPOINTED USER FIELD */';
    % ELSE %IF JESLVL = 'NEWEST'
              %THEN % JESSTR = '2 $UNKNOWN CHAR(24)
                                /* HAVEN''T FIGURED IT OUT YET */';
    % ELSE % JESSTR = '2 $UNKNOWN CHAR(24)
                        /* HAVEN''T FIGURED OUT WHAT IT IS YET */';
         DCL 1 HASPCKPT1 UNALIGNED BASED(CKPTR),
                   /* HASP CHECKPOINT RECORD #1 */
              JESSTR,
              2 $UNSPUNQ CHAR(4),
                   /* MTTR OF SPIN IOTS WAITING FOR JOT */
              2 $NEWSIOT CHAR(4),
                   /* MTTR OF JES2-NEWS IOT, OR ZERO */
              2 $NEWSTTR CHAR(4),
                   /* MTTR OF JES2-NEWS DS, OR ZERO */
              2 $JQFREE FIXED BIN(15,0),
                   /* OFFSET/4 FIRST FREE JQE */
              2 $JQHEADS(47) BIT(16),
                   /* HEADS OF ACTIVE JOB QUEUE CHAINS
                      1   ?
                      2   OUTPUT
                      3 - 6   ?
                      7   OUTPUT
                      8 - 9   ?
                      10   STC EXECUTING
                      11   TSO EXECUTING
                      12 - 45 WAITING EXECUTION AND CONVERSION,
                              CLASSES A-Z, 0-9 */
              2 $DATAKEY FIXED BIN(31,0),
                   /* MASTER PERIPHERAL DATA SET KEY */
              2 $JOBNO FIXED BIN(15,0),
                   /* HASP JOB NUMBER */
              2 $STCNO FIXED BIN(15,0),
                   /* STARTED TASK NUMBER */
              2 $TSUNO FIXED BIN(15,0),
                   /* TIME-SHARING USER NUMBER */
              2 $RESERVED CHAR(12),
                   /* RESERVED */
              2 $HASPID CHAR(4),
                   /* CKPT RECORD ID = 'JES2' */
              2 $CHKPT CHAR(6),
                   /* CKPT VOLSER */
              2 $SPOOL CHAR(6),
                   /* PRIMARY SPOOL VOLUME = 'SPOOL1' */
              2 $BUFSIZE FIXED BIN(15,0),
                   /* HASP BUFFER SIZE */
              2 $MAXJOBS FIXED BIN(15,0),
                   /* MAX NUMBER OF JOBS IN SYSTEM */
              2 $NUMJOES FIXED BIN(15,0),
                   /* NUMBER OF JOB OUTPUT ELEMENTS */
              2 $MINJOES FIXED BIN(15,0),
                   /* MIN NUMBER OF FREE JOES */
              2 $NUMRJE FIXED BIN(15,0),
                   /* NUMBER OF REMOTE TERMINALS */
              2 $NUMTGV FIXED BIN(15,0),
                   /* NUMBER TRACK GROUPS/VOL */
              2 $QSENO BIT(8),
                   /* NUMBER MEMBERS IN THIS NODE */
              2 $NUMDA BIT(8),
                   /* NUMBER OF DIRECT ACCESS MODULES */
              2 $SPOLMSG BIT(8),
                   /* MSG SPOOL BUFFERS/REMOTE */
              2 $RESERVED2 CHAR(2),
                   /* RESERVED */
              2 $RECINCR BIT(8),
                   /* RECORD ALTERNATION PARAMETER */
              2 $TCELSIZ BIT(8),
                   /* # BUFFERS IN TRAKCELL */
              2 $RESERVED3 CHAR(2);
         DCL CKPTR PTR,
             CKADJ FIXED BIN(31,0) DEF CKPTR;
         % IF JESLVL = 'NEW' × JESLVL = 'NEWEST'
              % THEN % DO;
              DCL CKREC CHAR(2000) VAR;
              DCL NEWBUF CHAR(4096) BASED(NEWPTR);
              DCL NEWPTR PTR,
                  NEWADJ FIXED BIN(31,0) DEF NEWPTR;
                   % END;
         DCL JQEPTR PTR,
             JQEADJ FIXED BIN(31,0) DEF JQEPTR;
         DCL JESPTR PTR,
             JESADJ FIXED BIN(31,0) DEF JESPTR;
         DCL 1 BUF,
              2 BUFDUM FIXED BIN(15,0),
              2 (BUFSTR1,BUFSTR2) CHAR(32767);
         DCL INITSW BIT(1) INIT('1'B);
         @PROC(0,DN(),DQ(),DA,JOB,STC,TSU,DEBUG);
         DCL (INQ,XEQ,TOTXEQ,TOTINQ) FIXED INIT(0);
         DCL INQP(0:16) FIXED INIT((17)0);
         DCL JBNCK CHAR(8) VARYING;
         DCL DTYPE CHAR(2);
         DCL CLTAB CHAR(36) STATIC INIT(
           'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
         IF (DEBUG ^= 0)
              THEN DO;
                   IF ^AUTH('OPER')
                        THEN RETURN;
                   JBNCK = SYMC('&DQ');
                   IF JBNCK = ''
                        THEN DO;
                           I = 1;
                           J = 47;
                           END;
                         ELSE DO;
                           IF VERIFY(JBNCK,'0123456789') = 0
                             THEN I = JBNCK;
                             ELSE I = INDEX(CLTAB,JBNCK)+11;
                           J = I;
                           END;
                   JBNCK = SYMC('&DN');
                   DO I = I TO J;
                        CALL SHOWQ('DB',JBNCK,I);
                        END;
                   RETURN;
                   END;
         IF (DN+DQ+DA) = 0
              THEN DO;
                   DN = 1;
                   @SETL(&DN = 'MINE');
                   END;
         IF DA ^= 0
              THEN DO;
                   IF ^AUTH('OPER')
                        THEN RETURN;
                   IF ((JOB+STC+TSU)=0) × (JOB ^= 0)
                        THEN DO I = 12 TO 45;
                             CALL SHOWQ('DA','',I);
                             END;
                   IF STC ^= 0
                        THEN CALL SHOWQ('DA','',10);
                   IF TSU ^= 0
                        THEN DO;
                             CALL SHOWQ('DA','',11);
                             @WRITE('TOTAL TSO USERS = &XEQ');
                             END;
                   END;
         IF (DN + DQ) ^= 0
              THEN DO;
                   IF DN ^= 0
                        THEN DO;
                             JBNCK = SETJCK(SYMC('&DN'));
                             IF LENGTH(JBNCK) < 2
                                  THEN IF ^AUTH('OPER')
                                       THEN RETURN;
                             DTYPE = 'DN';
                             END;
                        ELSE DO;
                             IF ^AUTH('OPER')
                                  THEN RETURN;
                             JBNCK = SETJCK(SYMC('&DQ'));
                             DTYPE = 'DQ';
                             END;
                   IF LENGTH(JBNCK) = 1
                        THEN CALL SHOWQ(DTYPE,'',
                          INDEX(CLTAB,JBNCK)+11);
                        ELSE DO;
                          IF (DTYPE='DN') & (LENGTH(JBNCK)>1)
                            THEN CALL SHOWQ(DTYPE,JBNCK,2);
                          IF (LENGTH(JBNCK)>1) × JBNCK=''
                            THEN CALL SHOWQ(DTYPE,JBNCK,8);
                          DO I = 12 TO 45;
                             CALL SHOWQ(DTYPE,JBNCK,I);
                             END;
                         END;
                   END;
         IF (TOTINQ+TOTXEQ) = 0
              THEN DO;
                   @WRITE('NO JOBS FOUND');
                   END;
 SHOWQ:  PROC(DTYPE,JBNCK,QNUM);
         DCL DTYPE CHAR(2);
              /* 'DA'/'DN'/'DQ' */
         DCL JBNCK CHAR(8) VARYING;
              /* JOB NAME / NULL STRING */
         DCL QNUM FIXED;
              /* NUMBER OF Q TO BE SCANNED */
         DCL PRIPIC PIC'Z9';
         DCL (INQPIC,XEQPIC,PRICNT) PIC'ZZZ9';
         DCL (I,J,K) FIXED;
         QPOS = 0;
         INQ,XEQ = 0;
         INQP(*) = 0;
         IF QNUM = 10
              THEN DO;
                   @SETL(&SHOWCL = 'STC');
                   END;
              ELSE IF QNUM = 11
                   THEN DO;
                        @SETL(&SHOWCL = 'TSU');
                        END;
                   ELSE IF QNUM = 2
                        THEN DO;
                             @SETL(&SHOWCL = 'OUTPUT');
                             END;
                        ELSE IF QNUM = 8
                          THEN DO;
                            @SETL(&SHOWCL = 'SETUP ');
                            END;
                          ELSE DO;
                             @SETL(&SHOWCL = SUBSTR(CLTAB,QNUM-11,1));
                             END;
         CALL GETQ(DTYPE,JBNCK,QNUM);
         INQPIC = INQ;
         @SETL(&INQ = INQPIC);
         XEQPIC = XEQ;
         @SETL(&XEQ = XEQPIC);
         IF (INQ+XEQ) ^= 0
              THEN IF DTYPE = 'DQ'
                   THEN DO;
                        @WRITE('CLASS=&SHOWCL, INQ=&INQ, XEQ=&XEQ');
                        DO I = 16 TO 0 BY -1;
                             IF INQP(I) ^= 0
                                  THEN DO;
                                       PRIPIC = I;
                                       @SETL(&PRI = PRIPIC);
                                       PRICNT = INQP(I);
                                       @SETL(&CNT = PRICNT);
                        @WRITE('         INQ=&CNT, PRTY=&PRI');
                                       END;
                             END;
                        END;
         TOTXEQ = TOTXEQ + XEQ;
         TOTINQ = TOTINQ + INQ;
         END SHOWQ;
 PRNTQ:  PROC(DTYPE,JBNCK,QNUM);
         DCL DTYPE CHAR(2);
         DCL JBNCK CHAR(8) VARYING;
         DCL QNUM FIXED;
         DCL RPTSTR CHAR(40) VARYING INIT('');
         DCL NPRI PIC'Z9';
         DCL QPOS PIC'ZZZ9';
         IF DTYPE = 'DB'
           THEN DO;
             IF SUBSTR(JQEJNAME,1,LENGTH(JBNCK)) = JBNCK
               THEN DO;
                 PUT EDIT('Q=',QNUM)(A,P'99') SKIP(2);
                 CALL DUMPSTT(JQESTR);
                 END;
             GO TO ENDP;
             END;
         NPRI = SUBSTR(JQEPRIO,1,4);
         IF QNUM ^= 2
           THEN DO;
            IF ^SUBSTR(JQETYPE,2,1) /* EXECUTION OR CONVERT Q? */
              THEN GO TO ENDP;
            IF JQETYPE ^= '01000000'B
              THEN IF JQEFLAGS & '00000111'B
                   THEN DO;
                        RPTSTR = 'EXECUTING';
                        XEQ = XEQ + 1;
                        @SETL(&POSIT = '');
                        END;
                   ELSE DO;
                        INQ = INQ + 1;
                        IF QNUM ^= 8
                          THEN DO;
                            INQP(NPRI)=INQP(NPRI)+1;
                            QPOS = INQ;
                            @SETL(&POSIT = 'QPOS='××QPOS);
                            IF SUBSTR(JQEFLAGS,1,1)
                              THEN RPTSTR = 'HOLD ALL';
                            IF SUBSTR(JQEFLAGS,2,1)
                              THEN RPTSTR = 'HOLD';
                            IF SUBSTR(JQEFLAGS,3,1)
                              THEN RPTSTR = 'HOLD - DUPLICATE JOB';
                            END;
                        END;
           END;
         IF SUBSTR(JQEJNAME,1,LENGTH(JBNCK)) ^= JBNCK
              THEN GO TO ENDP;
         IF DTYPE = 'DA'
              THEN IF RPTSTR ^= 'EXECUTING'
                   THEN GO TO ENDP;
         IF DTYPE = 'DQ'
              THEN GO TO ENDP;
         @SETL(&JOBNO = JQEJOBNO);
         @SETL(&JOBNM = JQEJNAME);
         IF QNUM < 12   /*STC OR TSU OR OUTPUT*/
              THEN DO;
                   @WRITE('&SHOWCL  &JOBNO &JOBNM');
                   END;
              ELSE DO;
                   @SETL(&NPRI = NPRI);
                   @SETL(&RPTSTR = RPTSTR);
                   @SETL(&CPUL = '');
                   @SETL(&CPUP = '');
                   IF RPTSTR='EXECUTING'
                     THEN DO;
                       CPU=JOBCK(JQEJNAME);
                       IF CPU >= 0
                         THEN DO;
                           CPUP = CPU;
                           @SETL(&CPUP = CPUP);
                           @SETL(&CPUL = 'JSCPU=');
                           END;
                       END;
 @WRITE('CLASS=&SHOWCL &JOBNO &JOBNM PRIORITY=&NPRI &POSIT &RPTSTR &CPUL
 &CPUP');
                   END;
 ENDP:
         END PRNTQ;
 SETJCK:  PROC(DN) RETURNS(CHAR(8) VARYING);
         DCL (DN,JBNCK) CHAR(8) VARYING;
         IF DN='MINE'
              THEN JBNCK = SYMC('&SYSPREF');
              ELSE IF DN = 'ALL'
                   THEN JBNCK = '';
                   ELSE IF LENGTH(DN) > 1
                        THEN RETURN(DN);
                        ELSE IF (((DN >= 'A') & (DN <= 'Z')) ×
                          ((DN >= '0') & (DN <= '9')))
                             THEN JBNCK = DN;
                             ELSE DO;
                                  @WRITE('INVALID CLASS');
                                  SIGNAL ERROR;
                                  END;
         RETURN(JBNCK);
         END SETJCK;
 GETQ:  PROC(DTYPE,JBNCK,QNUM);
         DCL DTYPE CHAR(2);
         DCL JBNCK CHAR(8) VARYING;
         DCL QNUM FIXED;
         DCL (I,J,K,L) FIXED;
         DCL HASPCKF FILE RECORD INPUT
           ENV(U BLKSIZE(20000));
         IF INITSW
              THEN DO;
                   INITSW = '0'B;
                   @ALLOC(DA('SYS1.HASPCKPT'),SHR);
                   OPEN FILE(HASPCKF) TITLE(DA08DDN);
                   JESPTR = ADDR(BUF);
                   JESADJ = JESADJ + 2;
                   % IF JESLVL = 'NEWEST'
                        %THEN %DO;
                              READ FILE(HASPCKF) IGNORE(2);
                              %END;
                   % IF JESLVL='NEW' × JESLVL='NEWEST'
                        %THEN %DO;
                   READ FILE(HASPCKF) INTO(CKREC);
                   CKPTR = ADDR(CKREC);
                   CKADJ = CKADJ + 2;
                   NEWPTR = ADDR(BUF);
                   NEWADJ = NEWADJ + 2;
                   DO I = 1 TO 10;
                        READ FILE(HASPCKF) INTO(NEWBUF);
                        NEWADJ = NEWADJ + 4096;
                        END;
                             %END;
                        %ELSE %DO;
                   READ FILE(HASPCKF) INTO(BUF);
                   CKPTR = JESPTR;
                             %END;
                   CLOSE FILE(HASPCKF);
                   END;
         IF $JQHEADS(QNUM) ^= 0
             THEN DO;
               I = $JQHEADS(QNUM);
               I = I*4;
               JQEADJ = JESADJ + I;
 CHLUP:        DO FOREVER=1 REPEAT FOREVER;
                 CALL PRNTQ(DTYPE,JBNCK,QNUM);
                 I = JQECHAIN;
                 IF I = 0
                   THEN LEAVE CHLUP;
                 I = I*4;
                 JQEADJ = JESADJ + I;
                 END;
               END;
         END GETQ;
 AUTH: PROC(UTYPE) RETURNS(BIT(1));
         DCL UTYPE CHAR(8) VARYING;
 RETURN('1'B);
   /* REMOVE THE ABOVE STATEMENT TO IMPLEMENT AUTHORIZATION CHECK */
         IF UTYPE = 'STATUS'
              THEN IF PSCBJCL
                   THEN RETURN('1'B);
         IF UTYPE = 'OPER'
              THEN IF PSCBCTRL
                   THEN RETURN('1'B);
         @WRITE('SORRY, YOU ARE NOT AUTHORIZED');
         RETURN('0'B);
         END AUTH;
         END;
