   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL CONVERT ENTRY(PTR,
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0),
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0))
     RETURNS(CHAR(256) VAR);
   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);
   DCL TYPETAB(7) CHAR(8) VAR STATIC INIT(
     'FLOAT','CHAR','CHAR','PACKED','HEX','BIT','FIXED');
   DCL MISSING DEC FLOAT(16),
       MISSINGCH CHAR(8) BASED(ADDR(MISSING));
   DCL MISSING_PACKED FIXED DEC(15,0) STATIC INIT(-999999999999999),
       MISSING_PACKED_CH CHAR(8) BASED(ADDR(MISSING_PACKED));
   DCL MISSING_INTEGER FIXED BIN(31,0) STATIC INIT(-2147483648),
       MISSING_INTEGER_CH CHAR(4) BASED(ADDR(MISSING_INTEGER));
   DCL MISSING_SMALLINT FIXED BIN(15,0) STATIC INIT(-32768),
       MISSING_SMALLINT_CH CHAR(2) BASED(ADDR(MISSING_INTEGER));

 CONVERT_INTFC: PROC(STR,R) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * INTERFACE TO CONVERT SUBROUTINE.  STR IS STRING CONTAINING DATA TO  *
 * BE CONVERTED.  R POINTS TO THE FROM-RHNAMESTR.                      *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL STR CHAR(*) VAR;
   DCL R PTR;

   IF LENGTH(STR)=0
     THEN RETURN('NULL'); /* MISSING VALUE */
   RETURN(CALCPRT(GET_OPERAND_CONVERT(STR,R)));
   END CONVERT_INTFC;

 FINDFLD: PROC(DSPTR,KEY);
 /**********************************************************************
 *                                                                     *
 * CALLED TO LOCATE A FIELD IN THE CURRENT RECORD.                     *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL DSPTR PTR;
   DCL KEY CHAR(*);
   DO RHNAMPTR=DSPTR->RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL)
     UNTIL(RHNNAME=KEY);
     END;
   IF RHNAMPTR=NULL
     THEN SIGNAL ERROR;
   END FINDFLD;

 GET_OPERAND_CONVERT: PROC(STR,R) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE NUMERIC VALUE FOR A GIVEN FIELD NAME.          *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (D,R,S) PTR;
   DCL STR CHAR(*) VAR;
   DCL CON CHAR(8) VAR;
   DCL RET DEC FLOAT(16),
       RETCH CHAR(8) DEF RET;
   DCL INTYPE CHAR(8) VAR;
   IF R=NULL
     THEN INTYPE='CHAR'; /* IF R IS NULL, ASSUME CHARACTER */
     ELSE INTYPE=TYPETAB(R->RHNTYPE);
   CON=CONVERT(PTROUT(PTRIN(ADDR(STR))+2),
     INTYPE,LENGTH(STR),0,
     'FLOAT',8,0);
   IF LENGTH(CON)=0
     THEN RET=MISSING;
     ELSE RETCH=CON;
   RETURN(RET);
   END GET_OPERAND_CONVERT;

 GETDATA: PROC(KEY,TRH) RETURNS(CHAR(50) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN A VALUE FROM THE CURRENT RECORD.                   *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL KEY CHAR(*);
   DCL TRH PTR;
   CALL FINDFLD(TRH,KEY);
   RETURN(GETDATA_SUB(TRH->RECPTR,RHNAMPTR));
   END GETDATA;

 GETDATA_NULLCK: PROC(STR,R) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED BY CONVERT_INTFC TO CHECK FOR MISSING VALUE.  IF SO, '1'B    *
 * WILL BE RETURNED.                                                   *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL STR CHAR(*) VAR;
   DCL CK CHAR(256) VAR;
   DCL (R,WRKPTR) PTR;
   DCL INTEGER FIXED BIN(31,0) BASED(WRKPTR),
       SMALLINT FIXED BIN(15,0) BASED(WRKPTR);

   IF LENGTH(STR)=0
     THEN RETURN('1'B); /* MISSING VALUE */
   SELECT(R->RHNTYPE);
     WHEN(2,3) DO; /* CHAR,ZONED */
       IF STR=''
         THEN RETURN('1'B); /* MISSING VALUE */
       CK=SUBSTR(STR,PREFIX(STR,' ')); /* ELIMINATE LEADING BLANKS */
       CK=SUBSTR(STR,1,SUFFIX(STR,' ')); /* ELIMINATE TRAILING BLANKS */
       IF CK='.'
         THEN RETURN('1'B); /* MISSING VALUE */
         ELSE RETURN('0'B); /* NOT MISSING VALUE */
       END;
     OTHERWISE DO;
       WRKPTR=PTROUT(PTRIN(ADDR(STR))+2);
       SELECT(R->RHNTYPE);
         WHEN(1) /* FLOAT */
           IF STR=MISSINGCH
             THEN RETURN('1'B);
             ELSE RETURN('0'B);
         WHEN(4) /* PACKED */
           IF STR=SUBSTR(MISSING_PACKED_CH,8-LENGTH(STR)+1)
             THEN RETURN('1'B);
             ELSE RETURN('0'B);
         WHEN(7) /* FIXED */
           IF LENGTH(STR)=4
             THEN IF STR=MISSING_INTEGER_CH
               THEN RETURN('1'B);
               ELSE RETURN('0'B);
             ELSE IF STR=MISSING_SMALLINT_CH
               THEN RETURN('1'B);
               ELSE RETURN('0'B);
         OTHERWISE DO; /* UNSUPPORTED DATA TYPE */
           MSGDATA='WARNING - UNSUPPORTED DATA TYPE SET TO MISSING';
           RETURN('1'B);
           END; /* OTHERWISE */
         END; /* SELECT */
       END; /* OTHERWISE */
     END; /* SELECT */
   END GETDATA_NULLCK;

 GETDATA_SUB: PROC(RPT,RHN) RETURNS(CHAR(50) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN A VALUE FROM THE CURRENT RECORD AND FIELD.         *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (RPT,RHN) PTR;
   DCL STR CHAR(50) VAR;
   IF RHN->RHNPOS>LENGTH(RPT->RECSTR)
     THEN RETURN('');
   IF RHN->RHNPOS+RHN->RHNLNG-1>LENGTH(RPT->RECSTR)
     THEN STR=SUBSTR(RPT->RECSTR,RHN->RHNPOS);
     ELSE STR=SUBSTR(RPT->RECSTR,RHN->RHNPOS,RHN->RHNLNG);
   IF GETDATA_NULLCK(STR,RHN)
     THEN RETURN('.'); /* MISSING VALUE */
     ELSE DO;
       SELECT(RHN->RHNTYPE);
         WHEN(2,3);    /* ZONED OR CHAR */
         OTHERWISE STR=CONVERT_INTFC(STR,RHN);
         END; /* SELECT */
       RETURN(STR);
       END;
   END GETDATA_SUB;

 GETDATA_FIXED: PROC(KEY,TRH) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN A NUMERIC VALUE IN FIXED BINARY FROM THE CURRENT   *
 * RECORD.                                                             *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL KEY CHAR(*);
   DCL TRH PTR;
   DCL RET FIXED BIN(31,0);
   CALL FINDFLD(TRH,KEY);
   ON CONVERSION BEGIN;
     RET=MISSING_INTEGER; /* RETURN MISSING VALUE */
     GOTO END_GETDATA_FIXED;
     END;
   RET=GETDATA_SUB(TRH->RECPTR,RHNAMPTR);
  END_GETDATA_FIXED:
   RETURN(RET);
   END GETDATA_FIXED;

 GETDATA_FLOAT: PROC(KEY,TRH) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN A NUMERIC VALUE IN DECIMAL FLOAT FROM THE CURRENT  *
 * RECORD.                                                             *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL KEY CHAR(*);
   DCL TRH PTR;
   CALL FINDFLD(TRH,KEY);
   RETURN(GETDATA_FLOAT_SUB(TRH->RECPTR,RHNAMPTR));
   END GETDATA_FLOAT;

 GETDATA_FLOAT_SUB: PROC(RPT,RHN) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN A NUMERIC VALUE IN DECIMAL FLOAT FROM THE CURRENT  *
 * RECORD.                                                             *
 *                                                                     *
 **********************************************************************/
   DFT RANGE(*) AUTO;
   DCL (RPT,RHN) PTR;
   DCL RET DEC FLOAT(16);
   ON CONVERSION BEGIN;
     UNSPEC(RET)=UNSPEC(MISSING);
     GOTO END_GETDATA_FLOAT_SUB;
     END;
   RET=GETDATA_SUB(RPT,RHN);
  END_GETDATA_FLOAT_SUB:
   RETURN(RET);
   END GETDATA_FLOAT_SUB;

