 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT022 - MB,VERIFY,VER */
 /* MERGES BACK GROUP OF RECORDS SPLIT OFF BY FINDALL */
         % DCL @PROCNAME CHAR;
         % DCL @RENTNAME CHAR;
         % @PROCNAME = 'RENT';
         % @RENTNAME = 'DENT022';
         % INCLUDE DENTSUB;
         DCL PREFIX ENTRY(CHAR(*),CHAR(*))
           RETURNS(FIXED BIN(15,0));
         DCL VSUBSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),
           FIXED BIN(15,0),CHAR(*));
         DCL KEYTABLE(3) CHAR(80) VAR STATIC
           INIT('NODEL','OVERLAY','MASK');
         DCL INDX FIXED BIN(15,0);
         DCL OPER CHAR(80) VAR;
         DCL KEYLAB(0:3) LABEL;
         DCL (NODELSW,MASKSW) BIT(1) INIT('0'B);
         DCL P(2) PTR;
         DCL (SC(2),LN(2)) FIXED BIN(15,0);
         DCL L FIXED BIN(15,0);
         DCL 1 BLSTR BASED(BLPTR),
           2 NBLPTR PTR,
           2 BLCMDLEN FIXED BIN(15,0),
           2 BLCMD CHAR(L REFER(BLCMDLEN)) VAR;
         DCL LAST FIXED BIN(31,0) INIT(99999999);
         DCL RENSW BIT(1) INIT('0'B);
         DCL SETCAPS ENTRY;
         DCL (MPTR,NPTR,TRH,ORGPTR) PTR;
         DCL CMDLAB(4) LABEL;
         GO TO CMDLAB(CMDINDX);
 CMDLAB(1):  /* DENT022 */
 CMDLAB(2):  /* MB */
         IF PARY(2)=''
           THEN TRH=RHNXT;
           ELSE DO;
             CALL SETCAPS(PARY(2));
             DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
               UNTIL(TRH->RHNAME=PARY(2));
               END;
             END;
         IF TRH = NULL
           THEN DO;
             MSGDATA='NO DATA TO MERGE BACK';
             RHRC = 8;
             RETURN;
             END;
         DO I = 3 TO 16;
           IF PARY(I)^=''
             THEN DO;
               CALL SETCAPS(PARY(I));
               CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX);
                 /* CALL SPARS */
               GO TO KEYLAB(INDX);
 KEYLAB(0): /* INVALID OPERAND */
               MSGDATA='INVALID OPERAND='××PARY(I);
               RHRC=8;
               RETURN;
 KEYLAB(1): /* NODEL */
               NODELSW='1'B;
               GO TO ENDCASE;
 KEYLAB(2): /* OVERLAY */
 KEYLAB(3): /* MASK */
               MASKSW='1'B;
               GO TO ENDCASE;
 ENDCASE:
               END;
           END;
         ORGPTR = RECPTR;
         NPTR = NXTHDR;
         IF TRH->NXTHDR ^= TRH->HDPTR THEN SAVEFLAG='1'B;
         DO MPTR=TRH->NXTHDR REPEAT MPTR->NXTPTR
           WHILE(MPTR^=TRH->HDPTR);
           DO NPTR=NPTR REPEAT NPTR->NXTPTR WHILE(NPTR^=HDPTR)
             UNTIL(NPTR->RECSEQ >= MPTR->RECSEQ);
             END;
           SETSTR: DO;
             IF NPTR^=HDPTR
               THEN IF NPTR->RECSEQ = MPTR->RECSEQ
                 THEN DO;
                   IF ^MASKSW
                     THEN NPTR->RECSTR = MPTR->RECSTR;
                     ELSE DO;
                       I=0;
                       MLEN=LENGTH(MPTR->RECSTR);
                       DO WHILE(I<=MLEN);
                         J=PREFIX(SUBSTR(MPTR->RECSTR,I+1),' ');
                           /* FIND NEXT NONBLANK */
                         IF J=0
                           THEN LEAVE;
                             /* NO MORE TO OVERLAY */
                         J=J+I;
                         I=INDEX(SUBSTR(MPTR->RECSTR,J),' ');
                           /* FIND NEXT BLANK */
                         IF I=0
                           THEN I=LENGTH(MPTR->RECSTR)-J+1;
                           ELSE I=I-1;
                         CALL VSUBSTR(NPTR->RECSTR,J,I,
                           SUBSTR(MPTR->RECSTR,J,I));
                         I=J+I;
                         END;
                       END;
                   LEAVE SETSTR;
                   END;
             IF NPTR=HDPTR
               THEN NPTR=LSTHDR;
               ELSE NPTR=NPTR->LSTPTR;
             CALL #ADD(RHPTR,SUBENT,NPTR,NPTR,MPTR->RECSEQ,
               MPTR->RECSTR,RHPPTR);  /* CALL ADDREC */
             IF NPTR->NXTPTR^=HDPTR
               THEN IF NPTR->NXTPTR->RECSEQ<=NPTR->RECSEQ
                 THEN DO;
                   RENSW='1'B;
                   NPTR=NPTR->NXTPTR;
                   END;
             END SETSTR;
           END;
         IF RENSW
           THEN DO;
             CALL #RESEQ(RHPTR,SUBENT,NXTHDR,'NOSAVE','NORENUM',
               LAST,RHPPTR);  /* CALL RESEQ */
             IF RECPTR^=HDPTR
               THEN CURSEQ=RECSEQ;
             END;
         IF ^NODELSW
           THEN DO;
           /*NOW SCHEDULE AN END SUBCOMMAND FOR 2D STRING OF RECORDS*/
             L=10;
             ALLOCATE BLSTR;
             NBLPTR = MPTR->BLHDR;
             MPTR->BLHDR = BLPTR;
             BLCMD = 'END NOS';
             END;
         CALL #NC(RHPTR,SUBENT,ORGPTR);/* CALL NEWCUR */
         RHRC = 0;
         RETURN;
 CMDLAB(3):  /* VERIFY */
 CMDLAB(4):  /* VER */
         IF PARY(3)=''
           THEN DO;
             ECOL=32760;
             IF PARY(2)=''
               THEN SCOL=1;
               ELSE SCOL=PARY(2);
             END;
           ELSE DO;
             ECOL=PARY(3);
             SCOL=PARY(2);
             END;
         LEN=ECOL-SCOL+1;
         DO S=1 REPEAT 1 UNTIL(S=0);
           DO MPTR=NXTRHEL REPEAT MPTR->RHNXT
             WHILE(MPTR->RHCEN^=0)
             UNTIL(MPTR->RHNXT=NULL);
             MPTR->RECPTR=MPTR->RECPTR->NXTPTR;
             IF MPTR->RECPTR=MPTR->HDPTR
               THEN DO;
                 MPTR->CURSEQ=0;
                 S=0;
                 END;
               ELSE DO;
                 MPTR->CURSEQ=MPTR->RECPTR->RECSEQ;
                 IF S=1
                   THEN IF MPTR->RHLST^=NULL
                     THEN DO;
                       P(1)=MPTR->RHLST->RECPTR;
                       P(2)=MPTR->RECPTR;
                       DO I=1 TO 2;
                         IF LENGTH(P(I)->RECSTR)<SCOL
                           THEN DO;
                             SC(I)=1;
                             LN(I)=0;
                             END;
                           ELSE DO;
                             SC(I)=SCOL;
                             LN(I)=MIN(LEN,LENGTH(P(I)->RECSTR)-
                               SCOL+1);
                             END;
                         END;
                       IF SUBSTR(P(1)->RECSTR,SC(1),LN(1)) ^=
                          SUBSTR(P(2)->RECSTR,SC(2),LN(2))
                         THEN S=0;
                       END;
                 END;
             END;
           END;
         DO MPTR=NXTRHEL REPEAT MPTR->RHNXT
           WHILE(MPTR->RHCEN^=0 & MPTR->RECPTR=MPTR->HDPTR)
           UNTIL(MPTR->RHNXT=NULL);
           END;
         IF MPTR->RECPTR = MPTR->HDPTR × MPTR->RHCEN=0
           THEN DO;
             RHRC = 0;
             MSGDATA='VERIFIED';
             END;
           ELSE DO;
             RHRC = 8;
             MSGDATA='NOT VERIFIED';
             END;
         END;
