 /* DAIRERR */
 /*
0*$.HE GENERALIZED SUBROUTINES - DAIRERR
0*$.HE HANDLES DAIR ERRORS
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$09/10/76
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  DAIRERR
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS PROCEDURE CAN BE INVOKED AFTER SYSDAIR (SEE DOCUMENTATION) HAS
0*$BEEN INVOKED, A NON-ZERO RETURN CODE HAS BEEN GENERATED.
0*$THIS SUBROUTINE WILL GENERATE THE APPROPRIATE ERROR MESSAGES, AND
0*$THEN WILL SIGNAL ERROR.  CALL FORMAT IS AS FOLLOWS -
0*$.SP 1
0*$CALL DAIRERR(BLKPTR);
0*$.IN 0
0*$.SP 1
0*$WHERE BLKPTR IS POINTER VARIABLE SET TO THE ADDRESS OF THE
0*$DAIR CONTROL BLOCK (DAIR04, DAIR08, ETC.) THAT WAS PASSED TO
0*$SYSDAIR WHEN THE ERROR OCCURRED.
 */
         % DCL (@SPARSI,@SETBUFI,@WRITEI) CHAR;
         % @SPARSI = 'N';
         % @SETBUFI = 'N';
         % INCLUDE @NULL;
         % INCLUDE @STRIP;
         % INCLUDE @WRITE;
 DAIRERR:  PROC(DPTR) OPTIONS(REENTRANT);
         DCL SET@ ENTRY(BIT(1),CHAR(8),CHAR(100) VARYING);
         DCL 1 BUFFER@,
              2 BUFLEN@ FIXED BIN(15,0),
              2 BUFOFF@ FIXED BIN(15,0) INIT(0),
              2 BUFSTR@ CHAR(256);
         DCL 1 CPPL EXT,
              2 CPPLCBUF PTR,
              2 CPPLUPT PTR,
              2 CPPLPSCB PTR,
              2 CPPLECT PTR;
         DCL DPTR PTR;
         DCL IKJRET FIXED BIN(31,0) EXT;
         DCL RETPM CHAR(4) BASED(RETPTR);
         RETPTR=ADDR(IKJRET);
         DCL 1 DAIRBLK BASED(DPTR),
              2 CD FIXED BIN(15,0),
              2 FLG BIT(16),
              2 DARC CHAR(2),
              2 CTRC CHAR(2),
              2 PDSN PTR;
         DCL PDSNA CHAR(44) VARYING BASED(PDSN);
         DCL (OUTDARC,OUTCTRC) CHAR(4);
         DCL OUTRC CHAR(8);
         IF CD ^= 8 & CD ^= 24
              THEN SIGNAL ERROR;
         CALL TROUT(DARC,OUTDARC);
         CALL TROUT(CTRC,OUTCTRC);
         CALL TROUT(RETPM,OUTRC);
         CALL SET@('0'B,'&SYS0001',OUTDARC);
         CALL SET@('0'B,'&SYS0002',OUTCTRC);
         CALL SET@('0'B,'&SYS0003',OUTRC);
         IF CD = 8
              THEN CALL SET@('0'B,'&SYS0004','ALLOCATING');
              ELSE CALL SET@('0'B,'&SYS0004','FREEING');
         CALL SET@('0'B,'&SYS0005',PDSNA);
         @WRITE('ERROR WHEN &SYS0004 DATA SET &SYS0005');
         @WRITE('DARC=&SYS0001, CTRC=&SYS0002, RETURN CODE=&SYS0003');
         SIGNAL ERROR;
         END;
