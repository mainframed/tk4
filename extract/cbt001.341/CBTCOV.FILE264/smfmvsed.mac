 /* SMFMVSED */
 SMFMVSE:  PROC OPTIONS(MAIN);
         DFT RANGE(*) FIXED BIN;
         % DCL @IBM FIXED;
              /* @IBM = # VALID IBM SMF RECORD TYPES.   NOTE THAT
                 THE ASSUMPTION IS MADE THAT IBM WILL ASSIGN
                 NEW SMF RECORD TYPES CONSECUTIVELY. */
         % @IBM = 91;
         % DCL @USER FIXED;
              /* @USER = # VALID USER SMF RECORD TYPES. */
         % @USER = 10;
         % DCL @IBMUSER FIXED;
              /* @IBMUSER = # VALID SMF RECORD TYPES, INCLUDING BOTH
                 BOTH IBM AND USER. */
         % @IBMUSER = @IBM + @USER;
         % DCL @TMETST ENTRY;
 % @TMETST: PROC(OFF,FIELD) RETURNS(CHAR);
         DCL FIELD CHAR, OFF FIXED;
         RETURN('OFFSET=' ×× OFF ××'; IF ' ×× FIELD ×× ' < 0 × ' ××
            FIELD ×× ' > MAXTME THEN SIGNAL ERROR');
         % END @TMETST;
         % DCL @DTETST ENTRY;
 % @DTETST: PROC(OFF,DTE) RETURNS(CHAR);
         DCL DTE CHAR, OFF FIXED;
         RETURN('OFFSET=' ×× OFF ××'; PDCK=' ×× DTE ×× '+1; IF ' ×× DTE
           ×× ' < MINDTE × ' ×× DTE ×× '> MAXDTE THEN SIGNAL ERROR');
         % END @DTETST;
         % DCL @NEGTST ENTRY;
 % @NEGTST: PROC(OFF,FIELD) RETURNS(CHAR);
         DCL FIELD CHAR, OFF CHAR, RETCHAR CHAR;
         IF OFF = '-1'
              THEN RETCHAR = '';
              ELSE RETCHAR = 'OFFSET =' ×× OFF ×× ';';
         RETCHAR = RETCHAR ××
           'IF ' ×× FIELD ××
           '< 0 THEN SIGNAL ERROR';
         RETURN(RETCHAR);
         % END @NEGTST;
         % DCL @MAXMIN ENTRY;
 % @MAXMIN:  PROC(OFF,FIELD,MAX,MIN) RETURNS(CHAR);
         DCL FIELD CHAR, MAX CHAR, MIN CHAR, OFF FIXED;
         RETURN('OFFSET=' ×× OFF ×× '; IF ' ×× FIELD ×× '<' ×× MIN
           ×× ' × ' ×× FIELD ×× '>' ×× MAX ×× ' THEN SIGNAL ERROR');
         % END @MAXMIN;
         % DCL @GTTST ENTRY;
 % @GTTST:  PROC(OFF,FIELD,COMP) RETURNS(CHAR);
         DCL FIELD CHAR, COMP CHAR, OFF FIXED, RETCHAR CHAR;
         IF OFF = -1
              THEN RETCHAR = '';
              ELSE RETCHAR = 'OFFSET=' ×× OFF ×× ';';
         RETCHAR = RETCHAR ××
           'IF ' ×× FIELD ×× ' > '
           ×× COMP ×× ' THEN SIGNAL ERROR';
         RETURN(RETCHAR);
         % END @GTTST;
         % DCL @LTTST ENTRY;
 % @LTTST:  PROC(OFF,FIELD,COMP) RETURNS(CHAR);
         DCL FIELD CHAR, COMP CHAR, OFF FIXED;
         RETURN('OFFSET=' ×× OFF ×× '; IF ' ×× FIELD ×× ' < '
           ×× COMP ×× ' THEN SIGNAL ERROR');
         % END @LTTST;
         % DCL @ANTST ENTRY;
 % @ANTST:  PROC(OFF,FIELD) RETURNS(CHAR);
         DCL FIELD CHAR, OFF FIXED, RETCHAR CHAR;
         IF OFF = -1
              THEN RETCHAR = '';
              ELSE RETCHAR = 'OFFSET=' ×× OFF ×× ';';
         RETCHAR = RETCHAR ××
           'I=VERIFY(' ×× FIELD ×× ',VERTAB);
           IF I^=0 THEN DO; OFFSET = OFFSET+I-1;  SIGNAL ERROR; END;';
         RETURN(RETCHAR);
         % END @ANTST;
         DCL VERIFY BUILTIN;
         DCL PLIRETC BUILTIN;
         DCL VERTAB CHAR(64) INIT(' .<(+×&!$*);^-/,%_>?:#@''="ABCDEFGHIJ
 KLMNOPQRSTUVWXYZ0123456789');
         % INCLUDE SMFMVS;
         % INCLUDE SMFDEFI;
         ON ENDFILE(SMFDATA) GO TO EOJ;
         DCL (SMFOUT,BADSMF) FILE RECORD OUTPUT
           ENV(VBS BLKSIZE(13030) RECSIZE(32760) CONSECUTIVE);
         DCL BADSW BIT(1) INIT('1'B);
         ON UNDF(BADSMF) BADSW = '0'B;
         OPEN FILE(BADSMF);
         OPEN FILE(SMFOUT);
         DCL T4PTR PTR,
             T4ADJ FIXED BIN(31,0) DEF T4PTR;
         DCL T4PTRA PTR,
             T4ADJA FIXED BIN(31,0) DEF T4PTRA;
         DCL ACTPTR PTR,
             ACTADJ FIXED BIN(31,0) DEF ACTPTR;
         DCL 1 ACTFLDS BASED(ACTPTR),
              2 MYACTLEN BIT(8),
              2 MYACTFLD CHAR(144);
         DCL RECOUT FIXED BIN(31,0) STATIC INIT(0);
         DCL DATE BUILTIN;
         DCL ROMAN ENTRY(FIXED BIN) RETURNS(CHAR(15) VARYING);
         DCL PAGE FIXED BIN(15,0) STATIC INIT(0);
         DCL (RECIN,ERRCK) FIXED BIN(31,0) STATIC INIT(0);
         DCL (LODTE,HIDTE) FIXED DEC(5,0) STATIC INIT(0);
         LODTE = 99999;
         DCL WRKFLD FIXED BIN(31,0);
         DCL SAVDTE FIXED DEC(7,0);
         DCL SAVTME FIXED BIN(31,0);
 ON ENDPAGE(SYSPRINT) BEGIN;
         PUT PAGE;
         PAGE = PAGE + 1;
         PUT EDIT('PAGE ', ROMAN(PAGE),
           'KIMBERLY CLARK SMF EDIT UTILITY','DATE = ',DATE)
           (A,A,X(10),A,X(10),A,A);
         PUT SKIP(2);
         END;
         OPEN FILE(SYSPRINT) LINESIZE(132);
         SIGNAL ENDPAGE(SYSPRINT);
 ON ERROR BEGIN;
         IF ERRCK = RECIN
              THEN DO;
                   CALL PLIRETC(16);
                   CALL PLIDUMP('SHB');
                   END;
         ERRCK = RECIN;
         REJCNT(JTYPE) = REJCNT(JTYPE) + 1;
         IF REJCNT(JTYPE) < 10
              THEN DO;
                   PUT EDIT('ERROR AT OFFSET ',OFFSET)(A,P'ZZZ9')
                     SKIP(1);
                   PUT SKIP;
                   CALL DUMPSTR(SMFREC);
                   PUT SKIP(2);
                   END;
         IF BADSW
              THEN WRITE FILE(BADSMF) FROM(SMFREC);
         GO TO NXT;
         END;
         DCL ACCCNT(0:255) FIXED BIN(31,0) STATIC INIT((256)0);
              /* COUNT OF ACCEPTED RECORDS FOR EACH TYPE */
         DCL REJCNT(0:255) FIXED BIN(31,0) STATIC INIT((256)0);
              /* COUNT OF REJECTED RECORDS FOR EACH TYPE */
         DCL SMFTYPE(0:(@IBMUSER-1)) LABEL;
         % DCL @TYPL FIXED;
         % @TYPL = @IBM;
         DCL 1 USERTYPEA(@USER) STATIC,
              2 UTYPE FIXED BIN(15,0) INIT(251,252,220,221,222,223,
                                           224,225,226,227),
              2 UITYPE FIXED BIN(15,0) INIT(@TYPL,(@TYPL+1),
              (@TYPL+2),(@TYPL+3),(@TYPL+4),(@TYPL+5),(@TYPL+6),
              (@TYPL+7),(@TYPL+8),(@TYPL+9));
         DCL PDCK FIXED DEC(15,0);
         % DCL @RECL FIXED;
         % @RECL = @IBMUSER-1;
         DCL RECLEN(0:@RECL) FIXED BIN(15,0) STATIC INIT(
              31,  /* TYPE  0 */
              0,   /*       1 */
              14,  /*       2 */
              14,  /*       3 */
              147, /*       4 */
              117, /*       5 */
              84,  /*       6 */
              24,  /*       7 */
              16,  /*       8 */
              16,  /*       9 */
              40,  /*      10 */
              16,  /*      11 */
              0,   /*      12 */
              0,   /*      13 */
              288, /*      14 */
              288, /*      15 */
              0,   /*      16 */
              96,  /*      17 */
              140, /*      18 */
              64,  /*      19 */
              61,  /*      20 */
              44,  /*      21 */
              18,  /*      22 */
              0,   /*      23 */
              0,   /*      24 */
              88,  /*      25 */
              232, /*      26 */
              0,   /*      27 */
              0,   /*      28 */
              0,   /*      29 */
              0,   /*      30 */
              54,  /*      31 */
              0,   /*      32 */
              0,   /*      33 */
              147, /*      34 */
              117, /*      35 */
              0,   /*      36 */
              0,   /*      37 */
              0,   /*      38 */
              0,   /*      39 */
              62,  /*      40 */
              0,   /*      41 */
              0,   /*      42 */
              28,  /*      43 */
              0,   /*      44 */
              24,  /*      45 */
              0,   /*      46 */
              26,  /*      47 */
              48,  /*      48 */
              48,  /*      49 */
              0,   /*      50 */
              0,   /*      51 */
              0,   /*      52 */
              0,   /*      53 */
              0,   /*      54 */
              0,   /*      55 */
              0,   /*      56 */
              0,   /*      57 */
              0,   /*      58 */
              0,   /*      59 */
              0,   /*      60 */
              0,   /*      61 */
              138, /*      62 */
              132, /*      63 */
              250, /*      64 */
              0,   /*      65 */
              0,   /*      66 */
              130, /*      67 */
              170, /*      68 */
              102, /*      69 */
              52,  /*      70 */
              132, /*      71 */
              60,  /*      72 */
              52,  /*      73 */
              52,  /*      74 */
              134, /*      75 */
              108, /*      76 */
              0,   /*      77 */
              0,   /*      78 */
              0,   /*      79 */
              0,   /*      80      */
              0,   /*      81      */
              0,   /*      82      */
              0,   /*      83      */
              0,   /*      84      */
              0,   /*      85      */
              0,   /*      86      */
              0,   /*      87      */
              0,   /*      88      */
              0,   /*      89      */
              0,   /*      90      */
              0,   /*      91(251) */
              0,   /*      92(252) */
              0,   /*      93(220) */
              0,   /*      94(221) */
              0,   /*      95(222) */
              0,   /*      96(223) */
              0,   /*      97(224) */
              0,   /*      98(225) */
              0,   /*      99(226) */
              0);  /*      100(227) */
         DCL MAXDTE FIXED DEC(5,0) STATIC INIT(99365);
              /* MAXIMUM ACCEPTABLE DATE */
         DCL MINDTE FIXED DEC(5,0) STATIC INIT(69001);
              /* MINIMUM ACCEPTABLE DATE */
         DCL MAXTME FIXED BIN(31,0) STATIC INIT(8640000);
 NXT:
         READ FILE(SMFDATA) INTO(SMFREC);
         RECIN = RECIN + 1;
         ITYPE,JTYPE = TYPE;
         OFFSET = 0;
         IF SYSIND = '0'B
              THEN SIGNAL ERROR;
         OFFSET = 1;
         IF ITYPE > @IBM
              THEN DO;
                   DO I = 1 TO @USER WHILE(UTYPE(I) ^= ITYPE);
                        END;
                   IF I > @USER
                        THEN SIGNAL ERROR;
                   ITYPE = UITYPE(I);
                   END;
         @TMETST(2,WRITME);
         @DTETST(6,WRITDTE);
         IF WRITDTE < LODTE
              THEN LODTE = WRITDTE;
         IF WRITDTE > HIDTE
              THEN HIDTE = WRITDTE;
         IF ITYPE < @IBM
              THEN DO;
                   @ANTST(10,SYSID);
                   @ANTST(12,MODELNO);
                   END;
         L = LENGTH(SMFREC);
         @LTTST(0,L,RECLEN(ITYPE));
         OFFSET = 14;
         GO TO SMFTYPE(ITYPE);
 SMFTYPE(0):
         @MAXMIN(14,SMF0JWT,1440,0);
         @NEGTST(18,SMF0BUF);
         @NEGTST(22,SMF0VST);
         @NEGTST(27,SMF0RST);
         GO TO WRITREC;
 SMFTYPE(4):
 SMFTYPE(5):
 SMFTYPE(34):
 SMFTYPE(35):
         @ANTST(14,SMF4JBN);
         @TMETST(22,SMF4RST);
         @DTETST(26,SMF4RSD);
         IF SMF4UIF=LOW(8)
           THEN SMF4UIF='';
         @ANTST(30,SMF4UIF);
         @TMETST(39,SMF4SIT);
         IF ITYPE < 34
              THEN DO;
                   @DTETST(43,SMF4STID);
                   END;
              ELSE DO;
                   @NEGTST(43,TIVOUTCT);
                   END;
         @NEGTST(47,SMF4NCI);
         IF ITYPE = 4 × ITYPE = 34
              THEN DO;
                   @ANTST(54,SMF4PGMN);
                   IF SMF4STMN=LOW(8)
                     THEN SMF4STMN='';
                   @ANTST(62,SMF4STMN);
                   @NEGTST(70,SMF4RSH0);
                   @NEGTST(72,SMF4SYST);
                   @NEGTST(74,SMF4H0ST);
                   @TMETST(86,SMF4AST);
                   @TMETST(90,SMF4PPST);
                   @NEGTST(95,SMF4SRBT);
                   T4PTRA = SMFPTR;
                   T4ADJA = T4ADJA + SMF4RLCT;
                   OFFSET=SMF4RLCT;
                   @NEGTST(OFFSET,SMF4PGIN);
                   @NEGTST(OFFSET+4,SMF4PGOT);
                   @NEGTST(OFFSET+4,SMF4NSW);
                   @NEGTST(OFFSET+4,SMF4PSI);
                   @NEGTST(OFFSET+4,SMF4PSO);
                   @NEGTST(OFFSET+4,SMF4VPI);
                   @NEGTST(OFFSET+4,SMF4VPO);
                   /* THE FOLLOWING HAS BEEN INSERTED TO HANDLE
                      A BUG IN SMF IN WHICH NEGATIVE SERVICE UNITS
                      ARE FOUND IN FIELD SMF4SST */
                   IF SMF4SST < 0
                        THEN SMF4SST = 0;
                   /* END OF PATCH */
                   @NEGTST(OFFSET+4,SMF4SST);
                   @NEGTST(OFFSET+4,SMF4ACT);
                   @NEGTST(OFFSET+4,SMF4PGNO);
                   @NEGTST(OFFSET+2,SMF4TRAN);
                   @NEGTST(OFFSET+4,SMF4RECL);
                   @NEGTST(OFFSET+4,SMF4RCLM);
                   @NEGTST(OFFSET+4,SMF4CPGN);
                   @NEGTST(OFFSET+4,SMF4CRCL);
                   @NEGTST(OFFSET+4,SMF4PGST);
                   T4PTR = SMFPTR;
                   T4ADJ = T4ADJ + SMF4LENN + 102;
                   @LTTST(102,L,147+SMF4LNTH+SMF4LENN);
                   OFFSET = 104;
                   IDLEN = SMF4LENN;
                   DO I = 1 TO 1000 WHILE(IDLEN > 2);
                        @NEGTST(-1,SMF4EXCP(I));
                        OFFSET = OFFSET + 8;
                        IDLEN = IDLEN - 8;
                        END;
                   @NEGTST(-1,SMF4SETM);
                   OFFSET = OFFSET + 4;
                   ACTLEN = SMF4NAF;
                   ACTPTR = ADDR(SMF4ACTF);
                   END;
              ELSE DO;
                   @TMETST(54,SMF5RSTT);
                   @DTETST(58,SMF5RSTD);
                   @NEGTST(64,SMF5TRAN);
                   IF ITYPE = 5
                        THEN DO;
                             @ANTST(71,SMF5JICL);
                             END;
                   @NEGTST(73,SMF5SRBT);
                   /* THE FOLLOWING STATEMENTS ARE INSERTED BECAUSE
                   OF A BUG IN SMF CAUSING SMF5TJS FIELDS TO BE
                   NEGATIVE */
                   IF SMF5TJS < 0
                        THEN SMF5TJS = 0;
                   @NEGTST(76,SMF5TJS);
                   @NEGTST(80,SMF5TTAT);
                   @NEGTST(88,SMF5PGNO);
                   IL=SMF5TLEN;
                   @LTTST(92,L,93+IL);
                   @NEGTST(113,SMF5JCPU);
                   ACTLEN = SMF5ACTF;
                   OFFSET = 117;
                   ACTPTR = ADDR(SMF5JSAF);
                   END;
         IF ACTLEN ^= 0
              THEN DO IA = 1 TO ACTLEN;
                   IF MYACTLEN ^= 0
                        THEN DO;
                             @ANTST(-1,SUBSTR(MYACTFLD,1,MYACTLEN));
                             END;
                   IL = MYACTLEN;
                   ACTADJ = ACTADJ + IL + 1;
                   OFFSET = OFFSET + IL + 1;
                   END;
         @GTTST(-1,OFFSET,L);
         GO TO WRITREC;
 SMFTYPE(6):
         @ANTST(14,SMF6JBN);
         @TMETST(22,SMF6RST);
         @DTETST(26,SMF6RSD);
         @TMETST(39,SMF6WST);
         @DTETST(43,SMF6WSD);
         @NEGTST(47,SMF6NLR);
         @ANTST(53,SMF6FMN);
         GO TO WRITREC;
 SMFTYPE(30):
 SMFTYPE(1):
 SMFTYPE(2):
 SMFTYPE(3):
 SMFTYPE(7):
 SMFTYPE(8):
 SMFTYPE(9):
 SMFTYPE(10):
 SMFTYPE(11): ;
 SMFTYPE(12):
 SMFTYPE(13):
 SMFTYPE(14):
 SMFTYPE(15):
 SMFTYPE(16):
 SMFTYPE(17):
 SMFTYPE(18):
 SMFTYPE(19):
 SMFTYPE(20): ;
 SMFTYPE(21):
 SMFTYPE(22):
 SMFTYPE(23):
 SMFTYPE(24):
 SMFTYPE(25):
 SMFTYPE(26):
 SMFTYPE(27):
 SMFTYPE(28):
 SMFTYPE(29):
 SMFTYPE(31):
 SMFTYPE(32):
 SMFTYPE(33):
 SMFTYPE(36): ;
 SMFTYPE(37):
 SMFTYPE(38):
 SMFTYPE(39):
 SMFTYPE(40):
 SMFTYPE(41):
 SMFTYPE(42):
 SMFTYPE(43):
 SMFTYPE(44):
 SMFTYPE(45):
 SMFTYPE(46): ;
 SMFTYPE(47):
 SMFTYPE(48):
 SMFTYPE(49):
 SMFTYPE(50):
 SMFTYPE(51):
 SMFTYPE(52):
 SMFTYPE(53):
 SMFTYPE(54):
 SMFTYPE(55):
 SMFTYPE(56): ;
 SMFTYPE(57):
 SMFTYPE(58):
 SMFTYPE(59):
 SMFTYPE(60):
 SMFTYPE(61):
 SMFTYPE(62):
 SMFTYPE(63):
 SMFTYPE(64):
 SMFTYPE(65):
 SMFTYPE(66): ;
 SMFTYPE(67):
 SMFTYPE(68):
 SMFTYPE(69):
 SMFTYPE(70):
 SMFTYPE(71):
 SMFTYPE(72):
 SMFTYPE(73):
 SMFTYPE(74):
 SMFTYPE(75): ;
 SMFTYPE(76):
 SMFTYPE(77):
 SMFTYPE(78):
 SMFTYPE(79):
 SMFTYPE(80):
 SMFTYPE(81):
 SMFTYPE(82):
 SMFTYPE(83):
 SMFTYPE(84):
 SMFTYPE(85): ;
 SMFTYPE(86):
 SMFTYPE(87):
 SMFTYPE(88):
 SMFTYPE(89):
 SMFTYPE(90): ;
 SMFTYPE(91): /* TYPE 252 */
 SMFTYPE(92): /* TYPE 253 */
 SMFTYPE(93): /* TYPE 220 */
 SMFTYPE(94): /* TYPE 221 */
 SMFTYPE(95): /* TYPE 222 */
 SMFTYPE(96): /* TYPE 223 */
 SMFTYPE(97): /* TYPE 224 */
 SMFTYPE(98): /* TYPE 225 */
 SMFTYPE(99): /* TYPE 226 */
 SMFTYPE(100): ; /* TYPE 227 */
 WRITREC:
         ACCCNT(JTYPE) = ACCCNT(JTYPE) + 1;
         RECOUT = RECOUT + 1;
         WRITE FILE(SMFOUT) FROM(SMFREC);
         IF ITYPE=26
           THEN DO;
             SMF26ADJ1=SMFADJ+46;
             SMF26ADJ2=SMF26ADJ1+SMF26LN1;
             IF UNSPEC(SMF26XSD)^='0'B
               THEN DO;
                 TYPE='11100010'B; /* TYPE 226 */
                 SAVDTE = WRITDTE;
                 SAVTME = WRITME;
                 WRITDTE = SMF26XSD;
                 WRITME = SMF26XST;
                 SMF26XSD = SAVDTE;
                 SMF26XST = SAVTME;
                 WRITE FILE(SMFOUT) FROM(SMFREC);
                 END;
             END;
         GO TO NXT;
 EOJ:
         PUT PAGE;
         DO I = 0 TO 255;
              IF REJCNT(I) ^= 0 × ACCCNT(I) ^= 0
                   THEN PUT EDIT('RECORD TYPE = ',I,' ACCEPTED = ',
                     ACCCNT(I),' REJECTED = ',REJCNT(I))
                     (A,P'Z,ZZZ,ZZ9',A,P'Z,ZZZ,ZZ9',A,P'Z,ZZZ,ZZ9')
                     SKIP(1);
              END;
         PUT EDIT('TOTAL RECORDS IN = ',RECIN,' TOTAL RECORDS OUT = ',
           RECOUT,' TOTAL RECORDS REJECTED = ',(RECOUT-RECIN))
           (A,P'Z,ZZZ,ZZ9',A,P'Z,ZZZ,ZZ9',A,P'Z,ZZZ,ZZ9') SKIP(2);
         PUT EDIT('LOWEST DATE ENCOUNTERED = ',LODTE)(A,P'99999')
           SKIP(1);
         PUT EDIT('HIGHEST DATE ENCOUNTERED = ',HIDTE)(A,P'99999')
           SKIP(1);
         CALL PLIRETC(0);
         END;
