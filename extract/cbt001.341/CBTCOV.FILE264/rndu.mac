* RNDU
*$.HE GENERALIZED SUBROUTINES - RNDU
*$.HE RANDOM NUMBERS FROM A UNIFORM DISTRIBUTION
*$.PL 55
*$.PN 0
*$.PA
*$.SS
*$.NF
*$09/17/76
*$AUTHOR:  HAROLD WRIGHT, HUGHES AIRCRAFT
*$SOURCE MODULE NAME:  RNDU
*$DOCUMENTATION ID:  *$
*$.FI L
*$.SP 5
*$THIS SUBROUTINE GENERATES RANDOM NUMBERS FROM A POPULATION
*$UNIFORMLY DISTRIBUTED BETWEEN 0. AND 1.
*$CALL FORMAT IS AS FOLLOWS:
*$.IN 5
*$.SP 1
*$.NF
*$Y = RNDU(I)
*$.SP 1
*$WHERE:
*$.FI L
*$.HI 5
*$Y IS A RANDOM NUMBER DRAWN FROM A UNIFORM DISTRIBUTION.
*$ALL NUMBERS GENERATED WILL BE IN THE RANGE (0.,1.).
*$NOTE THAT RNDG MUST BE DECLARED SUCH THAT IT RETURNS
*$A DOUBLE PRECISION FLOATING POINT NUMBER
*$.SP 1
*$I IS AN INTEGER VARIABLE (FIXED BIN(31,0)) INITIALIZED BY
*$THE USER TO A POSITIVE VALUE AND USED BY THE ROUTINE
*$ROUTINE TO GENERATE THE RANDOM NUMBER.  I IS CHANGED BY THE
*$ROUTINE PREPARATORY TO GENERATING A SUBSEQUENT RANDOM NUMBER.
*$.HI 0
*$.IN 0
*$.SP 1
*$NOTE:  UPON RETURN FROM RNDU, THE VARIABLE I WILL HAVE BEEN SET
*$EQUAL TO AN INTEGER BETWEEN 1 AND (2**31)-2 INCLUSIVE, AND
*$EACH INTEGER IN THIS INTERVAL WILL OCCUR WITH EQUAL PROBABILITY.
*$ACCORDINGLY, RNDU CAN ALSO BE USED TO GENERATE 'RANDOM'
*$POSITIVE INTEGERS.
*$.SP 1
*$TO GENERATE ONE SEQUENCE OF RANDOM NUMBERS USING THE FUNCTION
*$RNDU, INITIALIZE I AND GENERATE THE FIRST NUMBER IN THE SEQUENCE
*$BY A STATEMENT OF THE FORM Y = RNDU(I).  THEN, WITHOUT REVISING
*$I, GENERATE SUBSEQUENT NUMBERS IN THE SEQUENCE BY REPEATED
*$FUNCTIONAL REFERENCES TO RNDU(I).  SEE EXAMPLE(1).
*$.SP 1
*$TO GENERATE SEVERAL SEQUENCES OF RANDOM NUMBERS USING THE FUNCTION
*$RNDU:  BY USING DISTINCTLY NAMED VARIABLES FOR THE ARGUMENT AND
*$DISTINCTLY INITIALIZING EACH, THE USER MAY GENERATE SEVERAL
*$DISTINCT SEQUENCES OF RANDOM NUMBERS, EACH SEQUENCE INITIALIZED
*$AND GENERATED AS DESCRIBED IMMEDIATELY PRECEDING.  AS BEFORE,
*$THE VARIABLES MUST NOT BE CHANGED WHILE A SEQUENCE IS BEING
*$GENERATED.
*$.SP 1
*$RESTRICTION:  I MUST BE IN INTEGER VARIABLE INITIALIZED TO A
*$VALUE GREATER THAN ZERO.
*$.SP 1
*$EXAMPLES:
*$.SP 1
*$TWO DISTINCT SEQUENCES OF 4000 UNIFORM RANDOM NUMBERS EACH ARE
*$TO BE GENERATED AND USED IN A MONTE CARLO ANALYSIS.  ONE SEQUENCE
*$IS TO BE FROM THE RANGE (0.,1.), AND THE OTHER SEQUENCE FROM THE
*$RANGE (-2.,2.).  THERE IS INSUFFICIENT CORE STORAGE AVAILABLE
*$FOR THE PRESERVATION OF ALL 8000 NUMBERS.  HOWEVER, ONLY ONE
*$NUMBER FROM EACH SEQUENCE IS REQUIRED DURING EACH PASS THROUGH
*$THE ANALYSIS LOOP; AND THERE IS NO NEED TO RETAIN THOSE NUMBERS
*$AFTER THE PASS HAS BEEN COMPLETED.
*$.SP 1
*$.IN 5
*$.NF
*$I1 = 5;
*$I2 = 77;
*$DO J = 1 TO 4000;
*$ Y = RNDU(I1);
*$ Z = RNDU(I2) - 0.5)*4.0;
*$ END;
*$.FI L
*$.IN 0
*$.SP 1
*$TO GENERATE A SEQUENCE OF 500 EQUALLY PROBABLE INTEGERS BETWEEN
*$1 AND (2**31)-2 INCLUSIVE:
*$.SP 1
*$.IN 5
*$  DCL L(500) FIXED BIN(31,0);
*$  I = 123456;
*$  DO J = 1 TO 500;
*$    Y = RNDU(I);
*$    L(J) = I;
*$    END;
*$.FI L
*$.IN 0
*$.SP 1
*$METHOD:
*$.SP 1
*$.NF
*$M(N) = I
*$M(N+1) = K*M(N) MOD(2**31-1), WHERE K = 7**5
*$I = M(N+1)
*$.FI L
*$.SP 1
*$THE FIRST 24 BITS OF M(N+1) ARE FLOATED TO YIELD A PSEUDO-RANDOM
*$NUMBER BETWEEN 0. AND 1.
*           RNDU - RANDOM NUMBERS FROM A UNIFORM DISTRIBUTION
RNDU     CSECT CONTROL SECTION FOR FLOATING-POINT NUMBER.
         USING RNDU,15 ESTABLISH BASE REGISTER FOR NEW SECTION.
         STM   0,3,20(13)    SAVE REG. 0-2
         L     3,4(1)
         L     1,0(,1) GET ADDRESS OF NO (PL/I) IN REGISTER
         LR    2,1
         L     1,0(2)    X(N)
         M     0,=F'16807'  X(N+1)=K*X(N) MOD(2**31-1)  K=7**5=16807
         SLDA  0,1 ISOLATE HIGH ORDER 31 BITS (R).
         SRL   1,1 ISOLATE LOW ORDER 31 BITS. SIGN +.
         AR    0,1 X'(N+1) = K*X(N) + R (LOW ORDER 31 BITS).
         BO    OVF X'(N+1) OVERFLOW.
CONT     ST    0,0(,2)   X'(N+1) STORE X'(N+1) IN ADDRESS FROM PL/I
         SR    1,1 ZERO LOW ORDER DOUBLEWORD.
         SRDA  0,7 MAKE PCOM FOR MASK.
         A     0,=X'40000000' MASK IN FLOATING-POINT EXPONENT.
         STM   0,1,TEMP STORE UNNORMALIZED DOUBLEWORD TEMPORARILY.
         SDR   0,0 CLEAR LOW-ORDER DOUBLE FLOATING-POINT REG.
         AD    0,TEMP PLACE NORMALIZED DOUBLEWORD FLOATING-POINT       X
               NUMBER IN FLOATING-POINT REGISTER 0.
         STD   0,0(3) SET RETURNED VALUE
         LM    0,3,20(13)    RESTORE   R0-R2
         MVI   12(13),X'FF'   SET RETURN INDICATOR
         BR    14 RETURN TO PL/I
OVF      SLL   0,1 SIGN BIT +.
         SRL   0,1 SIGN BIT +.
         A     0,=F'1' ADD 1 TO GET X'(N+1) + 1.
         B     CONT RETURN TO MAIN CODING TO FINISH.
TEMP     DS    D TEMPORARY STORAGE ON DOUBLEWORD BOUNDARY FOR SPEED.
         LTORG FORCE LITERAL ASSEMBLY INTO THIS CONTROL SECTION.
         END
