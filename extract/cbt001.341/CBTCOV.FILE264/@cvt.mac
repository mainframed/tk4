 DO;
 DCL (@#16,@#0) POINTER;
 DCL @CVT#(0:32767) POINTER BASED;
 UNSPEC(@#16) = UNSPEC(BINARY(16,31));
 UNSPEC(@#0) = UNSPEC(BINARY(0,31));
 %@CVT: PROCEDURE(P1,P2,P3,P4,P5,P6,P7,P8,P9,
                  P10,P11,P12,P13,P14,P15,P16) RETURNS(CHARACTER);
 /*
0*$.HE GENERALIZED SUBROUTINES - @CVT
0*$.HE PLI PREPROCESSOR TEXT
0*$.HE GENERATE POINTERS TO SYSTEM CONTROL BLOCKS ADDRESSED
0*$.HE FROM THE CVT
0*$.PL 58
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$12/06/78
0*$AUTHOR:  P. DIXON
0*$SOURCE MODULE NAME:  @CVT
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$@CVT RETURNS POINTERS TO SYSTEM CONTROL BLOCKS ADDRESSED FROM
0*$THE COMMUNICATIONS VECTOR TABLE (CVT).   THE VALUE RETURNED BY
0*$@CVT IS RECURSIVELY DEFINED AS FOLLOWS:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$@CVT(0)                   = POINTER TO THE CVT,
0*$@CVT(I1,I2,...,IX,IY)     = POINTER AT OFFSET 4*IY IN
0*$                            THE TABLE ADDRESSED BY
0*$                            @CVT(I1,I2,...,IX).
0*$.SP 1
0*$.FI L
0*$.IN 0
0*$SOME COMMON VALUES ARE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$@CVT(0,49)           = POINTER TO SMCA
0*$@CVT(0,139)          = POINTER TO ASVT
0*$@CVT(0,140)          = POINTER TO GDA
0*$@CVT(131)            = POINTER TO TCB
0*$@CVT(131,3)          = POINTER TO TIOT
0*$@CVT(131,45)         = POINTER TO JSCB
0*$@CVT(131,45,79,8,27) = POINTER TO JCT
0*$@CVT(133)            = POINTER TO ASCB
0*$                       (IN PSA, (548-16)/4 = 133)
0*$.FI L
0*$.IN 0
0*$.SP 1
0*$THE STATEMENT "%INCLUDE @CVT;" IS NEEDED BEFORE THE FIRST
0*$USE OF @CVT.  @CVT WILL ACCEPT UP TO 16 ARGUMENTS.  IF LESS
0*$THAN 16 ARE USED, THE WARNING "TOO FEW ARGUMENTS FOR @CVT"
0*$WILL BE ISSUED.  TWO POSSIBLE USES OF @CVT ARE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL 1 XXXCB BASED      OR    DCL XXXPTR POINTER;
0*$      ( @CVT(...) ),         XXXPTR = @CVT(...);
0*$                             DCL 1 XXXCB BASED(XXXPTR),
0*$.SP 1
0*$.IN 0
0*$.FI L
0*$THE FIRST FORMAT SHOULD NOT BE USED IF THE FIELDS IN
0*$XXXCB WILL BE USED SEVERAL TIMES, SINCE THE PROGRAM
0*$WILL CHAIN THROUGH THE CONTROL BLOCKS FOR EACH USE.
0*$.SP 1
0*$.NF
0*$WARNING: USE OF @CVT MAKES YOUR PROGRAM DEPENDENT ON
0*$         THE FORMAT OF MVS CONTROL BLOCKS WHICH MAY
0*$         CHANGE WITHOUT WARNING.
 */
 DCL (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16) CHARACTER;
 DCL VALUE CHARACTER;
 VALUE = '@#16';
 IF ^PARMSET(P1) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P1 ×× ')';
 IF ^PARMSET(P2) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P2 ×× ')';
 IF ^PARMSET(P3) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P3 ×× ')';
 IF ^PARMSET(P4) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P4 ×× ')';
 IF ^PARMSET(P5) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P5 ×× ')';
 IF ^PARMSET(P6) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P6 ×× ')';
 IF ^PARMSET(P7) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P7 ×× ')';
 IF ^PARMSET(P8) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P8 ×× ')';
 IF ^PARMSET(P9) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P9 ×× ')';
 IF ^PARMSET(P10) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P10 ×× ')';
 IF ^PARMSET(P11) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P11 ×× ')';
 IF ^PARMSET(P12) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P12 ×× ')';
 IF ^PARMSET(P13) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P13 ×× ')';
 IF ^PARMSET(P14) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P14 ×× ')';
 IF ^PARMSET(P15) THEN RETURN(VALUE);
 VALUE = VALUE ×× '->@CVT#(' ×× P15 ×× ')';
 IF ^PARMSET(P16) THEN RETURN(VALUE);
 RETURN(VALUE ×× '->@CVT#(' ×× P16 ×× ')');
 %END @CVT;
 %DCL @CVT ENTRY;
 END;
