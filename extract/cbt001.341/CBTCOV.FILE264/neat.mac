 /* NEAT - TSO INTERFACE TO THE NEATER PROGRAM
0*$.HE GENERALIZED TSO COMMAND - NEAT
0*$.HE TSO INTERFACE TO THE NEATER UTILITY
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$1/17/78
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  NEAT
0*$DOCUMENTATION ID:  0*$
0*$HELP ID:  0*#
0*$.FI L
0*$.SP 5
0*$THIS COMMAND GIVES THE TSO USER AN INTERFACE TO THE NEATER
0*$UTILITY PROGRAM.  IT IS WRITTEN IN PLI.
0*#)F FUNCTION -
0*#  THE NEAT COMMAND PROVIDES AN INTERFACE TO THE
0*#  NEATER UTILITY PROGRAM.
0*#)X SYNTAX  -
0*#         'DSNAME' PRINT(),SYSOUT(),NOPRINT,
0*#           OUTDA(),COMPRESS,INSET(),RESET,
0*#           SPACE()
0*#  REQUIRED - 'DSNAME'
0*#  DEFAULTS - PRINT(*) INSET(3) SPACE(1)
0*#)O OPERANDS
0*#))'DSNAME'
0*#  THIS IS THE NAME OF THE SOURCE DECK TO BE FORMATTED OR
0*#  COMPRESSED.  IF THE NAME IS NOT SPECIFIED IN QUOTES, AND
0*#  IT IS NOT QUALIFIED, THE QUALIFIER ".PLI" WILL BE APPENDED.
0*#))PRINT()
0*#  CAN BE USED TO SPECIFY A DATA SET IN WHICH THE PRINTED OUTPUT
0*#  FROM THE NEATER UTILITY IS TO BE PRINTED.  THE DEFAULT IS
0*#  PRINT(*).  IF A NAME IS SPECIFIED WITHOUT QUOTES, AND IT IS
0*#  NOT QUALIFIED, THE QUALIFIER ".LIST" WILL BE APPENDED.
0*#))NOPRINT
0*#  SPECIFIED TO PREVENT THE PRINTED OUTPUT FROM THE NEATER
0*#  UTILITY FROM BEING GENERATED.
0*#))SYSOUT()
0*#  CAN BE USED TO SPECIFY THAT THE PRINTED OUTPUT FROM THE NEATER
0*#  UTILITY IS TO BE PRINTED ON SYSOUT.  SYSOUT(A), FOR EXAMPLE,
0*#  SPECIFIES SYSOUT CLASS A.  NOTE THAT THIS KEYWORD IS MUTUALLY
0*#  EXCLUSIVE WITH THE PRINT KEYWORD.
0*#))OUTDA()
0*#  CAN BE USED TO SPECIFY A DATA SET TO CONTAIN THE FORMATTED OR
0*#  COMPRESSED OUTPUT FROM THE NEATER UTILITY.  IF A NAME IS
0*#  SPECIFIED WITHOUT QUOTES, AND IT IS NOT QUALIFIED, THE
0*#  QUALIFIER ".PLI" WILL BE APPENDED.
0*#))COMPRESS
0*#  SPECIFIES THAT EXTRANEOUS BLANKS ARE TO BE REMOVED FROM THE
0*#  INPUT SOURCE.  THIS IS THE OPPOSITE OF FORMATTED OUTPUT.
0*#))INSET()
0*#  THIS KEYWORD APPLIES TO FORMATTED OUTPUT ONLY, AND SPECIFIES THE
0*#  NUMBER OF SPACES TO BE INDENTED FOR EACH LEVEL OF LOGICAL CONTROL
0*#  OR NESTING IN THE PROGRAM.  THE DEFAULT IS 3.
0*#))RESET
0*#  USED TO INDICATE THAT ANY SEQUENCE NUMBERS IN 73-80 ARE TO BE
0*#  RESET.
 */
         % INCLUDE CPINIT;
         @PROC(1,SORC,PRINT(PRNTSUB#(DSNAME)),SYSOUT(),NOPRINT,
           OUTDA(OUTSUB#(DSNAME)),COMPRESS,INSET(3#(NUMERIC)),
           RESET,SPACE(1#(NUMERIC)));
         DCL (PRNTNAM,SORCNAM,OUTNAM) CHAR(44) VAR;
         DCL (CODE,INST) PIC'9' INIT(0);
         SORCNAM = SETDSN@(SORC);
         @SETL(&SORCNAM = SORCNAM);
         @CMD('ALLOC FI(SYSIN) DA(''&SORCNAM'') SHR REUSE');
         PRNTNAM = SETDSN@(PRNTSUB);
         IF (PRNTNAM^='') & (SYSOUT^=0)
              THEN DO;
        @WRITE('ERROR - PRINT AND SYSOUT PARMS ARE MUTUALLY EXCLUSIVE');
                   SIGNAL ERROR;
                   END;
         IF NOPRINT > 0
              THEN DO;
                   @CMD('ALLOC FI(SYSPRINT) DA(''NULLFILE'') REUSE');
                   END;
              ELSE IF PRNTNAM^=''
                   THEN DO;
                        @SETL(&PRNTNAM = PRNTNAM);
                        CALL MYALC(ADDR(PRNTSUB),'SYSPRINT',PRNTNAM,
                          'SYSOUT=YES');
                        END;
                   ELSE IF SYSOUT > 0
                        THEN DO;
                     @CMD('ALLOC FI(SYSPRINT) SYSOUT(&SYSOUT.) REUSE');
                             END;
                        ELSE DO;
                             @CMD('ALLOC FI(SYSPRINT) DA(*) REUSE');
                             END;
         OUTNAM = SETDSN@(OUTSUB);
         IF OUTNAM ^= ''
              THEN DO;
                   CODE = CODE + 1; /* SET PUNCH OPTION */
                   CALL MYALC(ADDR(OUTSUB),'SYSPNCH',OUTNAM,
                     'SYSOUT=NO');
                   END;
         IF RESET ^= 0
              THEN CODE = CODE + 4; /* SET RESET SEQNO */
         IF COMPRESS ^= 0
              THEN CODE = CODE + 2; /* SET COMPRESS */
         @SETL(&CODE = '$' ×× CODE ×× ',' ×× SYMC('&INSET') ×× '$');
         @CMD('XCTL NEATER ''/&CODE''');
         @CMD('FREE FI(SYSIN SYSPRINT SYSPNCH)');
         @CMD('ALLOC FI(SYSIN) DA(*) REUSE');
         @CMD('ALLOC FI(SYSPRINT) DA(*) REUSE');
 MYALC:  PROC(PTR,DDN,DSN,SYSOUT);
         DCL RET BIT(32),
             AREA CHAR(265);
         DCL PTR PTR;  /* PTR TO PDE */
         DCL DDN CHAR(8) VAR; /* DDNAME TO BE ALLOCATED */
         DCL DSN CHAR(44) VAR; /* DSNAME TO BE ALLOCATED */
         DCL SYSOUT CHAR(10) VAR;
         @SETL(&DDN = DDN);
         CALL SYSCTLG('NAME',RET,DSN,'SYSRES',AREA);
         IF RET = '0'B
              THEN DO;
                   @SETL(&OUTNAM = DSN);
                   @CMD('ALLOC FI(&DDN.) DA(''&OUTNAM'') OLD REUSE');
                   END;
              ELSE DO;
                   @CMD('FREE ATTR(NEAT)');
                   IF SYSOUT='SYSOUT=YES'
                     THEN DO;
                    @CMD('ATTRIB NEAT LR(125) BL(1290) RECFM(V B A)');
                          END;
                     ELSE DO;
                   @CMD('ATTRIB NEAT LR(80) BL(6400) RECFM(F B)');
                          END;
                   PDEPTR = PTR;
                   IF ^SUBSTR(PDEDSF1,2,1) /* NOT QUOTES? */
                        THEN DO;
                             I = INDEX(DSN,'.');
                             J = INDEX(SUBSTR(DSN,I+1),'.') + I;
                             IF J = I
                                 THEN IF SYSOUT='SYSOUT=YES'
                                     THEN DSN=DSN××'.LIST';
                                     ELSE DSN=DSN××'.PLI';
                             END;
                   @SETL(&OUTNAM = DSN);
 @CMD('ALLOC FI(&DDN.) DA(''&OUTNAM'') USING(NEAT) TR SP(&SPACE,1) NEW
 REUSE');
                   END;
         END MYALC;
         END;
