 /* DENTFSD */
 DENTFSD:  PROC(PARPTR,RHHDRPT,SUBENT,RHPTR);
 /* CALLED TO PROCESS -
    $DISPLAY <PANEL> DUP(<N>) LIST LINE(<L>) NOBREAK */
   % DCL @PROCNAME CHAR;
   % @PROCNAME='';
   % INCLUDE DENTSUB;
   % INCLUDE DENTPNL;
   HALT;
   DCL (DENTFSC,SETCAPS) ENTRY;
   DCL DENTPFN ENTRY RETURNS(PTR);
   DCL NAME CHAR(8);
   DCL AD(0:32766) CHAR(1) UNALIGNED BASED(T);
   DCL HWD UNALIGNED FIXED BIN(15,0) BASED(DUMPTR);
   DCL 1 MPNLCALL,
     2 MCURPNL FIXED BIN(15,0) INIT(0),
     2 MNXTPNL FIXED BIN(15,0) INIT(1),
     2 MARYPTR PTR,
     2 MAID BIT(8),
     2 MCURLOC FIXED BIN(15,0),
     2 MCHGCURS FIXED BIN(15,0) INIT(-1),
     2 MCALLFLGS BIT(8) INIT('0'B);
   DCL 1 @PNLARYS,
     2 @ARYCNT FIXED BIN(31,0) INIT(1),
     2 @PNLARY(1),
      3 @PNLSTAPT PTR,
       /* PTR TO STATIC PORTION OF DEFINITION */
      3 @PNLDYNPT PTR;
       /* PTR TO DYNAMIC PORTION OF DEFINITION */
   DCL KEYTABLE(4) CHAR(80) VAR STATIC
     INIT('DUP','LIST','LINE','NOBREAK');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL KEYLAB(0:4) LABEL;
   DCL NOBRSW BIT(1) INIT('0'B);
   DCL LISTLN FIXED BIN(15,0) INIT(0);
   DCL DUPNO FIXED BIN(15,0) INIT(0);
   DCL DUPLEN FIXED BIN(15,0) INIT(0);
   DCL (SAVPTR,ORGPTR) PTR;
   ORGPTR=RECPTR;
   DO I=3 TO 16 WHILE(PARY(I)^='');
     CALL SETCAPS(PARY(I));
     CALL SUBENT(21)(PARY(I),KEYTABLE,OPER,INDX);
       /* CALL SPARS */
     GO TO KEYLAB(INDX);
 KEYLAB(0): /* INVALID OPERAND */
     PUT SKIP LIST('ERROR ON $DISPLAY, INVALID OPERAND = ',PARY(I));
     SIGNAL ERROR;
 KEYLAB(1): /* DUP */
     DUPNO=OPER;
     GO TO ENDCASE;
 KEYLAB(2): /* LIST */
     LISTLN=1;
     GO TO ENDCASE;
 KEYLAB(3): /* LINE */
     J=OPER;
     DO ORGPTR=NXTHDR REPEAT ORGPTR->NXTPTR WHILE(ORGPTR^=HDPTR)
       UNTIL(ORGPTR->RECSEQ >= J);
       END;
     GO TO ENDCASE;
 KEYLAB(4): /* NOBREAK */
     NOBRSW='1'B;
     GO TO ENDCASE;
 ENDCASE:
     END;
   L=BUFLN;
   IF OUTDDN^=NULL
     THEN IF SUBSTR(OUTDDN->ALCFLAG,6,1)='0'B /* IS IT NUMBERED? */
       THEN L=L-OUTDDN->ALCSEQLEN;
   /* L NOW EQUALS LENGTH TO STORE IN EACH RECORD. */
   OLINE=-1;
   NAME=PARY(2);
   CALL SETCAPS(NAME);
   T=DENTPFN(RHHDRPT,SUBENT,NAME); /* GO GET PANEL */
   WRKPTR,PNLPTR=ADDR(AD(4));
   IF WRKPTR->PNLLEN<0
     THEN DO;
       WRKADJ=WRKADJ+WRKPTR->NEWLEN;
       SFLDPTR=ADDR(FLDLOC); /* POINT TO FIRST FIELD DESCR */
       END;
     ELSE DO;
       WRKADJ=WRKADJ+WRKPTR->PNLLEN;
       SFLDPTR=ADDR(NEWLEN); /* POINT TO FIRST FIELD DESCR */
       END;
   DYNPTR=WRKPTR;
   WRKADJ=WRKADJ+DOUTOF; /* WRKPTR POINTS AT PANEL_OUT SUBSTRUCTURE */
   D=0; /* D = LENGTH(DATA PROCESSED IN CURRENT LINE) */
   DO SFLDADJ=SFLDADJ REPEAT SFLDADJ+FLDLEN UNTIL(FLDNUM=FLDCNT);
     IF ^SUBSTR(FLAGS,3,1) /* UNPROTECTED? */
       THEN DO; /* IT IS INPUT FIELD */
         NLINE=FLDSBAB/LINESIZE;
         DFLDADJ=WRKADJ+OUTOFF; /* DFLDPTR POINTS AT OUTPUT DATA */
         IF INLEN+D+LISTLN > L
           THEN DO; /* TIME TO GET A NEW RECORD */
             IF ORGPTR^=HDPTR
               THEN ORGPTR=ORGPTR->NXTPTR;
             IF NOBRSW
               THEN D=0;
               ELSE D=DUPLEN; /*D=LENGTH(DATA IN CURRENT LINE)*/
             OLINE=NLINE;
             END;
         IF FLDINUM<=DUPNO
           THEN DUPLEN=DUPLEN+INLEN+LISTLN;
           ELSE DO;
             IF NLINE^=OLINE & OLINE^=-1 & ^NOBRSW
               THEN DO; /* TIME TO GET A NEW LINE */
                 IF ORGPTR^=HDPTR
                   THEN ORGPTR=ORGPTR->NXTPTR;
                 D=DUPLEN;
                 END;
             OLINE=NLINE;
             END;
         IF ORGPTR=HDPTR
           THEN CL=0;
           ELSE CL=LENGTH(ORGPTR->RECSTR);
         IF CL > D
           THEN DO;
             OFF=D+1;
             IF OFF+INLEN > CL+1
               THEN LEN=CL-OFF+1;
               ELSE LEN=INLEN;
             DATA=SUBSTR(ORGPTR->RECSTR,OFF,LEN);
             END;
           ELSE DATA='';
         D=D+INLEN+LISTLN;
         END;
     END;
   DO I=3 TO 16;
     PARY(I)='';
     END;
   CALL DENTFSC(PARPTR,RHHDRPT,SUBENT);
   END DENTFSD;
