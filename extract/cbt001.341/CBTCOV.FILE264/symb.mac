*PROCESS CS(60);
 X0075: /* COPY PARAMETER TO OUT */
 PROCEDURE(PARM) OPTIONS(MAIN) REORDER;
  /*
0*$.HE GENERALIZED UTILITIES - SYMB
0*$.HE REPLACE SYMBOLIC PARAMETERS IN CONTROL CARDS
0*$.PL 58
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$06/11/79
0*$AUTHOR:  P. DIXON (MODIFIED BY T. SMITH)
0*$SOURCE MODULE NAME:  SYMB
0*$DOCUMENTATION ID:  0*$
0*$.SP 5
0*$.FI L
0*$SYMB IS USED AS A PREPROCESSOR FOR UTILITY CONTROL
0*$STATEMENTS THAT CONTAIN SYMBOLIC PARAMETERS.  SYMB
0*$CREATES A DATASET CONTAINING THE CONTROL STATEMENTS WITH
0*$THE SYMBOLIC PARAMETERS REPLACED BY THEIR VALUES.
0*$.SP 1
0*$FOR EXAMPLE, CONTROL CARDS FOR SORT MIGHT LOOK LIKE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$SORT FIELDS=(&BEGIN,&LENGTH,A),
0*$     FORMAT=&FORMAT
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$WITH "BEGIN" SET TO "12", "LENGTH" SET TO "5", AND "FORMAT"
0*$SET TO "CH", THE CONTROL STATEMENTS CREATED BY SYMB WOULD BE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$SORT FIELDS=(12,5,A),
0*$     FORMAT=CH
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$SYSPRINT IS ONLY USED FOR ERROR MESSAGES.
0*$THE CONTROL CARDS CONTAINING THE SYMBOLIC PARAMETERS ARE READ FROM
0*$IN.  THE CONTROL CARDS AFTER REPLACEMENT ARE WRITTEN TO OUT.
0*$BOTH IN AND OUT SHOULD HAVE LRECL=80 AND RECFM=F OR FB.
0*$THE VALUES FOR THE SYMBOLIC PARAMETERS ARE READ AS A STRING OF
0*$SPECIFICATIONS FROM THE PARM FIELD PASSSED ON THE EXEC STATEMENT
0*$INVOKING SYMB, AND/OR FROM THE SYSIN DATA SET.  IF A VALUE FOR
0*$A SYMBOLIC PARAMETER IS SPECIFIED BOTH ON THE PARM FIELD AND
0*$IN THE SYSIN DATA SET, THE PARM FIELD SPECIFICATION TAKES
0*$PRECEDENCE.  COLUMNS 73-80 ON SYSIN ARE IGNORED.
0*$THE SPECIFICATIONS SHOULD HAVE THE FORM:
0*$.SP 1
0*$.IN 5
0*$'/<SPEC1><DELIMITERS><SPEC2><DELIMITERS> ... <SPECN>'
0*$.SP 1
0*$.IN 0
0*$WHERE <DELIMITERS> IS A SEQUENCE OF COMMAS AND BLANKS, AND <SPEC>
0*$HAS THE FORM:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$SYMBOL=<VALUE>   OR   SYMBOL(<VALUE>)
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$A <VALUE> MAY BE A SEQUENCE OF LETTERS AND NUMBERS OR A SEQUENCE
0*$OF ANY CHARACTERS DELIMITED BY SPECIAL CHARACTERS.  THE
0*$DELIMITER MAY NOT BE USED WITHIN <VALUE>.
0*$.PA
0*$JCL TO USE THE SORT CONTROL CARD IN THE EXAMPLE ABOVE MIGHT BE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$//SYM    EXEC PGM=SYMB,
0*$//            PARM='/BEGIN(12) LENGTH(5) FORMAT(CH)'
0*$//IN       DD *
0*$  SORT FIELDS=(&BEGIN,&LENGTH,A),
0*$       FORMAT=&FORMAT
0*$//OUT      DD SPACE=(TRK,1),DISP=(NEW,PASS),UNIT=SYSVIO,
0*$//            DCB=(RECFM=FB,BLKSIZE=3600,LRECL=80)
0*$//SYSPRINT DD SYSOUT=*
0*$//SORT   EXEC PGM=SORT
0*$//SYSIN    DD DSN=*.SYM.OUT,DISP=(OLD,DELETE)
0*$//      <<OTHER DD STATEMENTS FOR SORT>>
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$SINCE INFORMATION IN THE PARM FIELD CAN CONTAIN JCL SYMBOLIC
0*$PARAMETERS, SYMB CAN PASS INFORMATION CONTAINED ON AN
0*$EXEC STATEMENT TO A UTILITY PROGRAM.  THIS TECHNIQUE IS
0*$ILLUSTRATED BY THE FOLLOWING EXAMPLE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$//SORTER  PROC BEGIN=1,     NO DEFAULT FOR LENGTH
0*$//             FORMAT=CH,SORTIN=,SORTOUT=
0*$//SYM     EXEC PGM=SYMB,PARM=('/BEGIN=&BEGIN',
0*$//             'LENGTH=&LENGTH,FORMAT=&FORMAT')
0*$//     << DD STATEMENTS SHOWN ABOVE FOR SYMB >>
0*$//SORT    EXEC PGM=SORT
0*$//SYSIN     DD DSN=*.SYM.OUT,DISP=(OLD,DELETE)
0*$//SORTIN    DD DSN=&SORTIN,DISP=SHR
0*$//SORTOUT   DD DSN=&SORTOUT,DISP=SHR
0*$//     << OTHER DD STATEMENTS FOR SORT >>
0*$//SORTER  PEND
0*$//TEST    EXEC SORTER,
0*$//             BEGIN=12,LENGTH=5,  USE DEFAULT FORMAT
0*$//             SORTIN='YOUR.INPUT.DATASET',
0*$//             SORTOUT='YOUR.OUTPUT.DATASET'
0*$.SP 1
0*$.FI L
0*$.IN 0
0*$POSITIONS 1 THROUGH 71 OF THE CONTROL STATEMENTS READ FROM
0*$IN ARE SCANNED FOR SYMBOLIC PARAMETERS.  POSITION 72 IS
0*$TREATED AS A CONTINUATION COLUMN.  POSITIONS 73 THROUGH 80
0*$ARE IGNORED.  IF REPLACING SYMBOLIC PARAMETERS CAUSES THE
0*$CONTROL STATEMENT TO EXTEND PAST COLUMN 71, THE STATEMENT
0*$IS CONTINUED BY BREAKING IT AT COLUMN 71, ADDING A PLUS
0*$SIGN IN COLUMN 72, AND CREATING A CONTINUATION CARD WITH
0*$THE REMAINDER OF THE STATEMENT BEGINNING IN COLUMN 16.
0*$.PA
0*$A SPECIFICATION (IN THE PARAMETER OR SYSIN) MAY ALSO BE
0*$OF THE FORM
0*$.NF
0*$.IN 5
0*$.SP 1
0*$LINE#=<VALUE>   OR   LINE#(<VALUE>)
0*$.SP 1
0*$.IN 0
0*$.FI L
0*$WHERE LINE# IS A POSITIVE INTEGER (NO LEADING ZEROS) THAT
0*$SPECIFIES A LINE FROM "IN" TO BE REPLACED BY <VALUE>.
0*$ADDITIONAL LINES MAY BE ADDED TO THE DATA FROM "IN" BY
0*$USING LINE NUMBERS LARGER THAN THE NUMBER OF LINES IN "IN".
0*$THAT IS, IF THE NUMBER OF LINES IN "IN" IS "N", THEN
0*$LINE NUMBERS "N+1", "N+2", "N+3", ETC. MAY BE USED TO
0*$ADD LINES.  IF ALL LINES WILL BE SUPPLIED THROUGH
0*$SYSIN AND/OR THE PARAMETER, A DD STATEMENT FOR "IN"
0*$IS NOT NEEDED.  AN EXAMPLE OF THIS USE IS:
0*$.NF
0*$.IN 5
0*$.SP 1
0*$//#1    EXEC PGM=SYMB,
0*$//           PARM='/1=* ALIAS &ALIAS*,2=* NAME &NAME*'
0*$//OUT     DD SPACE=(TRK,1),DISP=(NEW,PASS),UNIT=SYSVIO,
0*$//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3600)
 */
1DEFAULT RANGE(*) STATIC FIXED;
 DCL (ADDR,CHAR,DIVIDE,INDEX,
      LENGTH,MIN,MOD,NULL,SUBSTR,VERIFY) BUILTIN;
 DCL REP@ EXTERNAL ENTRY
          (01, 05 FIXED BINARY(15), 05 FIXED BINARY(15), 05 CHAR(*));
 DCL SET@ EXTERNAL ENTRY(BIT,CHAR(8),VARYING CHAR(100));
 DCL SYMC EXTERNAL ENTRY(CHAR(*)) RETURNS(VARYING CHAR(100));
 DCL (CPPL(4),SYMHD@) EXTERNAL POINTER;
 DCL PARM VARYING CHARACTER(100);
 DCL (SYSIN,IN) FILE RECORD INPUT ENV(FB RECSIZE(80) TOTAL);
 DCL OUT FILE RECORD OUTPUT ENV(FB RECSIZE(80) TOTAL);
 DCL SYSPRINT PRINT;
 DCL CNTL_POINTER POINTER INIT(NULL());
 DCL 01 CNTL_IN BASED(CNTL_POINTER),
        05 CC1_72     CHAR(72),
        05 CNTL_IN_PAS     CHAR(8);
 DCL 01 CARD_IN BASED(INPUT_POINTER),
        05 CC1_71          CHAR(71),
        05 CONTINUATION    CHAR(1);
 DCL 01 CARD_OUT,
        05 CC1_71          CHAR(71)   INIT(''),
        05 CONTINUATION    CHAR(1)    INIT(''),
        05 FILL#00         CHAR(8)    INIT('');
 DCL 01 REP@_BUFFER,
        05 BUFFER_LENGTH   BINARY(15) INIT(0),
        05 FILL#01         BINARY(15) INIT(0),
        05 BUFFER_CONTENTS CHAR(255)  INIT('');
 DCL DUMMY_ECT(10) POINTER INIT((10)NULL());
 DCL INPUT_POINTER POINTER INIT(NULL());
 DCL (MORE_VALUES,MORE_CNTL,MORE_INPUT) BIT INIT('1'B);
 DCL (#,P,P0,K1,K2,K3,K4,K5,K6) BINARY INIT(1);
 DCL SYMBOL CHAR(8) INIT('');
 DCL #_NAME VARYING CHAR(8) INIT('');
 DCL VALUE VARYING CHAR(100) INIT('');
-ON UNDEFINEDFILE(SYSIN) MORE_CNTL  = '0'B;
 ON ENDFILE(SYSIN)       MORE_CNTL  = '0'B;
 ON UNDEFINEDFILE(IN)    MORE_INPUT = '0'B;
 ON ENDFILE(IN)          MORE_INPUT = '0'B;
-CPPL(1),CPPL(2),CPPL(3),SYMHD@ = NULL() /* INITIALIZE EXTERNALS */;
 CPPL(4) = ADDR(DUMMY_ECT)               /* FOR SET@ AND REP@    */;
1ERROR:          /* CALLED WHEN PARSE DETECTS AN ERROR */
 PROCEDURE(TEXT) /* DOES NOT RETURN - SETS RC=1000     */;
 DCL TEXT CHAR(*);
 OPEN FILE(SYSPRINT);
 PUT FILE(SYSPRINT) EDIT (TEXT,': ',SUBSTR(PARM,P0,K5)) (A,A,A);
 CLOSE FILE(SYSPRINT);
 STOP;
 END ERROR;
1DOPARM:  PROC(PARM);
 DCL PARM CHAR(100) VAR;
 P = 1;
 DO K1 = VERIFY(PARM,' ,') REPEAT VERIFY(SUBSTR(PARM,P),' ,')
         WHILE (K1^=0);
    P0,P = P + K1 - 1  /* SKIP PAST SEPARATORS */;
    K3 = INDEX(SUBSTR(PARM,P),'=');
    K4 = INDEX(SUBSTR(PARM,P),'(');
    IF K3 = 0 THEN K3 = 101;
    IF K4 = 0 THEN K4 = 101;
    K5 = MIN(K3,K4) - 1 /* LENGTH OF PARAMETER */;
    IF K5 >= 100 THEN
       DO;
          K5 = LENGTH(PARM) - P0 + 1;
          CALL ERROR('"=" OR "(" EXPECTED');
       END;
    IF K5 > 7 THEN CALL ERROR('SYMBOLIC PARAMETER TOO LONG');
    IF VERIFY(SUBSTR(PARM,P,K5),
    'abcdefghijklmnopqrstuvwxyz@#$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
                                ) ^= 0 THEN
       CALL ERROR('INVALID CHARACTER IN SYMBOLIC PARAMETER');
    SYMBOL = '&' ×× SUBSTR(PARM,P,K5);
    P = P + K5  /* POINT AT "=" OR "(" */;
    IF (SUBSTR(PARM,P+1,1) >= 'a' & SUBSTR(PARM,P+1,1) <= 'z') ×
       (SUBSTR(PARM,P+1,1) >= 'A' & SUBSTR(PARM,P+1,1) <= 'Z') ×
       (SUBSTR(PARM,P+1,1) >= '0' & SUBSTR(PARM,P+1,1) <= '9')
       THEN
          DO;
             K6 = VERIFY(SUBSTR(PARM,P+1),
   'abcdefghijklmnopqrstuvwxyz@#$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
             IF K6 = 0 THEN K6 = LENGTH(PARM) - P + 1;
             VALUE = SUBSTR(PARM,P+1,K6-1);
          END;
       ELSE
          DO;
             K6 = INDEX(SUBSTR(PARM,P+2),SUBSTR(PARM,P+1,1)) + 2;
             IF K6 = 2 THEN K6 = LENGTH(PARM) - P + 2;
             VALUE = SUBSTR(PARM,P+2,K6-3);
          END;
    P = P + K6  /* POINT PAST VALUE */;
    CALL SET@('0'B,SYMBOL,VALUE);
    IF P <= LENGTH(PARM) &
       SUBSTR(PARM,P-K6,1) = '(' & SUBSTR(PARM,P,1) = ')'
       THEN P = P + 1  /* SKIP CLOSING ")" */;
    IF P > LENGTH(PARM) THEN LEAVE;
 END /* DO K1 */;
 END DOPARM;
1OPEN FILE(SYSIN), FILE(IN), FILE(OUT);
 IF MORE_CNTL THEN READ FILE(SYSIN) SET(CNTL_POINTER);
 DO WHILE(MORE_CNTL);
    CALL DOPARM(CHAR(CNTL_IN.CC1_72,100));
    READ FILE(SYSIN) SET(CNTL_POINTER);
 END /* DO WHILE */;
 CALL DOPARM(PARM);
 IF MORE_INPUT THEN READ FILE(IN) SET(INPUT_POINTER);
 VALUE = SYMC('&1');
 MORE_VALUES = LENGTH(VALUE) ^= 0;
 DO # = 2 BY 1 WHILE (MORE_INPUT × MORE_VALUES);
    IF MORE_VALUES
       THEN
          DO;
             BUFFER_CONTENTS = VALUE;
             BUFFER_LENGTH = LENGTH(VALUE) + 4;
          END;
       ELSE
          DO;
             BUFFER_CONTENTS = CARD_IN.CC1_71;
             DO BUFFER_LENGTH = 71 TO 1 BY -1
                WHILE(SUBSTR(BUFFER_CONTENTS,BUFFER_LENGTH,1)=' ');
             END;
             BUFFER_LENGTH = BUFFER_LENGTH + 4;
          END;
    CALL REP@(REP@_BUFFER);
    CARD_OUT.CC1_71 = SUBSTR(BUFFER_CONTENTS,1,MIN(BUFFER_LENGTH,71));
    DO BUFFER_LENGTH = BUFFER_LENGTH TO 71 BY -1
       WHILE (SUBSTR(BUFFER_CONTENTS,BUFFER_LENGTH,1)=' ');
    END /* DO BUFFER_LENGTH */;
    IF BUFFER_LENGTH > 71 THEN
       DO;
          CARD_OUT.CONTINUATION = '+';
          WRITE FILE(OUT) FROM(CARD_OUT);
          SUBSTR(CARD_OUT.CC1_71,1,15) = (15)' ';
          DO K3 = 72 BY 56;
             SUBSTR(CARD_OUT.CC1_71,16,56) =
                SUBSTR(BUFFER_CONTENTS,K3,MIN(BUFFER_LENGTH-K3+1,56));
             IF BUFFER_LENGTH - K3 < 56 THEN LEAVE  /* LAST CARD */;
             WRITE FILE(OUT) FROM(CARD_OUT);
          END /* DO K3 */;
       END /* BUFFER LENGTH > 71 */;
    IF ^MORE_VALUES THEN CARD_OUT.CONTINUATION = CARD_IN.CONTINUATION;
    WRITE FILE(OUT) FROM(CARD_OUT);
    IF MORE_INPUT THEN READ FILE(IN) SET(INPUT_POINTER);
    IF # < 10
       THEN #_NAME = '&' ×× SUBSTR('123456789',#,1);
       ELSE #_NAME = '&' ×× SUBSTR('123456789',DIVIDE(#,10,15),1)
                         ×× SUBSTR('0123456789',MOD(#,10)+1,1);
    VALUE = SYMC(CHAR(#_NAME));
    MORE_VALUES = LENGTH(VALUE) ^= 0;
 END /* DO WHILE MORE INPUT */;
 CLOSE FILE(OUT), FILE(IN), FILE(SYSIN);
 END;
