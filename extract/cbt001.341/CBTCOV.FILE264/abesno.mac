 /* ABESNO - INCLUDED TEXT FOR SNOBOL PATTERN CONTROL BLOCKS  */

 DCL 1 SNOEP,
       /* THIS STRUCTURE CONTAINS A SERIES OF COMMON ENTRY POINTS */
     2 SNOGOP ENTRY(CHAR(*) VAR,CHAR(*) VAR),
       /* RETURNS CURRENT VALUE OF A GIVEN VARIABLE GIVEN ITS NAME */
     2 SNOPOP ENTRY(CHAR(*) VAR,CHAR(*) VAR),
       /* CALLED TO ASSIGN A VALUE TO A VARIABLE */
     2 FREE_PAT ENTRY(PTR),
       /* CALLED TO FREE STORAGE FOR PAT STRUCTURE */
     2 FREE_PATEL ENTRY(PTR),
       /* CALLED TO FREE STORAGE FOR PATEL STRUCTURE */
     2 FREE_TOKENS ENTRY(PTR);
       /* CALLED TO FREE STORAGE FOR LIST OF TOKENS */

   DCL 1 PAT BASED(PATPTR),
     2 PATELHD PTR,
       /* POINTER TO LIST OF PATEL STRUCTURES FOR THIS PATTERN */
     2 NEEDLENXTHDR PTR,
       /* POINTER TO TOP OF NEEDLE LIST, WHICH IS BUILT DURING
       PATTERN EXECUTION PROCESSING. */
     2 NEEDLELSTHDR PTR,
       /* POINTER TO END OF NEEDLE LIST */
     2 PATASHD PTR,
       /* POINTER TO LIST OF TOKEN STRUCTURES FOR NAMES AND LITERALS
       DESCRIBING REPLACEMENT TEXT. */
     2 PATASCT FIXED BIN(15,0),
       /* COUNT OF TOKEN STRUCTURES POINTED TO BY PATASHD - LIST MAY
       NOT END WITH NO_MORE_TOKENS STRUCTURE */
     2 PATFENCE FIXED BIN(15,0),
       /* SET TO ZERO WHEN PATTERN MATCHING BEGINS. SET TO ONE WHEN
       FENCE IS ENCOUNTERED IN THE PATTERN. */
     2 PATELOWN PTR;
       /* PTR TO PATEL THAT OWNS THIS PAT, OR NULL IF TOP-LEVEL */

   DCL 1 PATEL BASED(PATELPTR),
     2 PATCAT PTR,
       /* POINTER TO THE NEXT CONCATENATION ELEMENT IN THE PATTERN */
     2 PATALT PTR,
       /* POINTER TO THE NEXT ALTERNATIVE ELEMENT IN THE PATTERN */
     2 PATOWN PTR,
       /* PTR TO PAT THAT OWNS THIS PATEL */
     2 THREADED FIXED BIN(15,0),
       /* =1 IF THIS ELEMENT HAS BEEN MATCHED AND THREADED. */
     2 NEEDLENXT PTR,
       /* POINTER TO THE NEXT PATTERN ELEMENT OR NULL.  AT THE END
       OF PATTERN MATCHING, ON A SUCCESSFUL MATCH, FOLLOWING THIS
       DOUBLY-LINKED LIST GETS YOU TO ALL THE PATTERN ELEMENTS THAT
       MATCHED. */
     2 NEEDLELST PTR,
       /* POINTER TO THE PRIOR PATTERN ELEMENT OR NULL. USED TO BACK
       OUT THE THREAD TO TRY A DIFFERENCE ALTERNATIVE IF THE ALL
       KEYWORD HAS BEEN SPECIFIED. */
     2 NEEDLECUR FIXED BIN(15,0),
       /* CURSOR VALUE JUST PRIOR TO THE TIME THIS ELEMENT WAS MATCHED
       AND THREADED. USED WHEN BACKING OUT THE NEEDLE AFTER A FAILURE
       WHEN 'ALL' KEYWORD IS USED. */
     2 PATASS PTR,
       /* POINTER TO THE TOKEN STRUCTURE (SEE BELOW) CONTAINING THE
       NAME OF THE VARIABLE TO WHICH THE STRING MATCHED BY THIS PATTERN
       IS TO BE ASSIGNED IMMEDIATELY WHEN THIS PATTERN ELEMENT IS
       SUCCESSFULLY MATCHED. */
     2 PATEFH PTR,
       /* IF PATTYP=-1, POINTS TO PAT STRUCTURE FOR SUB-PATTERN.
       OTHERWISE, POINTS TO LIST OF TOKEN ELEMENTS. IF PATTYP=0,
       LIST WILL BE ONE ELEMENT LONG, AND CONTAINS EITHER A LITERAL,
       OR A NAME REFERENCE IN THE CASE OF DEFERRED REFERENCES.
       IF PATTYP>=1, LIST MAY BE 0 OR MORE ELEMENTS LONG, WITH
       EACH ELEMENT CONTAINING A LITERAL (OR A NAME REFERENCE IN THE
       CASE OF DEFERRED REFERENCES) THAT IS AN ARGUMENT TO THE
       SPECIFIED FUNCTION. */
     2 PATTYP FIXED BIN(15,0),
       /* -1 - SUB-PATTERN
           0 - LITERAL(NAMES ARE RESOLVED DURING PARSING)
         >=1 - FUNCTION
           1   ANY
           2   BREAK
           3   DIFFER
           4   EQ
           5   EVAL
           6   GE
           7   GT
           8   IDENT
           9   LE
          10   LEN
          11   LGT
          12   LT
          13   NE
          14   NOTANY
          15   POS
          16   RPOS
          17   RTAB
          18   SPAN
          19   TAB
          20   ARB
          21   INDEX
          22   FENCE
       */
     2 PATOFF FIXED BIN(15,0),
       /* OFFSET WHERE THIS PATTERN ELEMENT MATCHED */
     2 PATLEN FIXED BIN(15,0);
       /* LENGTH THAT MATCHES THIS ELEMENT */

 /* FOLLOWING ARE PARSING CONTROL BLOCKS USED BY SCANNER */
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0);
   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL OPERAND          INIT(0) FIXED STATIC;
   DCL OPERATOR         INIT(1) FIXED STATIC;
   DCL KEYWORD          INIT(2) FIXED STATIC;
   DCL TYPE_SPCHAR      INIT(3) FIXED STATIC;
   DCL QUOTED_STRING    INIT(4) FIXED STATIC;
   DCL NUMERIC_CONSTANT INIT(5) FIXED STATIC;
   DCL NO_MORE_TOKENS   INIT(6) FIXED STATIC;
   DCL OTHER            INIT(7) FIXED STATIC;
   DCL FUNCTION_A       INIT(8) FIXED STATIC;
   DCL TEMPORARY        INIT(9) FIXED STATIC;
   DCL FUNCTION_B       INIT(10) FIXED STATIC;
   DCL KEYWORDS(22) CHAR(8) VAR STATIC INIT(
       /*  1 */ 'ANY',
       /*  2 */ 'BREAK',
       /*  3 */ 'DIFFER',
       /*  4 */ 'EQ',
       /*  5 */ 'EVAL',
       /*  6 */ 'GE',
       /*  7 */ 'GT',
       /*  8 */ 'IDENT',
       /*  9 */ 'LE',
       /* 10 */ 'LEN',
       /* 11 */ 'LGT',
       /* 12 */ 'LT',
       /* 13 */ 'NE',
       /* 14 */ 'NOTANY',
       /* 15 */ 'POS',
       /* 16 */ 'RPOS',
       /* 17 */ 'RTAB',
       /* 18 */ 'SPAN',
       /* 19 */ 'TAB',
       /* 20 */ 'ARB',
       /* 21 */ 'INDEX',
       /* 22 */ 'FENCE');
   DCL OPERATORS(4) CHAR(1) VAR STATIC INIT('×','$','=','*');
   DCL SPCHARS CHAR(2) VAR STATIC INIT('()');
