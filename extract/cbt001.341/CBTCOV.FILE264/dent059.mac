 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT059 - TRANSPOSE SUBCOMMAND */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME = 'RENT';
   % @RENTNAME = 'DENT059';
   % INCLUDE DENTSUB;
   DCL MAXLEN ENTRY(CHAR(*) VAR)
     RETURNS(FIXED BIN(15,0));
   DCL AXIS CHAR(1) INIT('\');
   DCL COLSIZE FIXED BIN INIT(1);
   DCL NCOLS FIXED BIN INIT(0);
   DCL 1 STR BASED(STRP),
     2 (DIM1,DIM2,CHARLEN) FIXED BIN(15,0),
     2 ARY(I REFER(DIM1),J REFER(DIM2)) CHAR(COLSIZE REFER(CHARLEN));
   DCL (SAVPTR,DELPTR,ADDPTR) PTR;

 /* 1         2    3    4      5         6       */
 /* TRANSPOSE <L1> <L2> <AXIS> <COLSIZE> <NCOLS> */
   SAVSEQ=CURSEQ; /* SAVE ORIGINAL POINTER */
   ADDPTR=NULL;
   L1=PARY(2);
   L2=PARY(3);
   IF PARY(4)^=''
     THEN AXIS=PARY(4);
   IF AXIS^='/'&AXIS^='\'&AXIS^='-'&AXIS^='×'
     THEN DO;
       MSGDATA='AXIS MUST BE /, \, -, OR ×';
       RHRC=8;
       RETURN;
       END;
   IF PARY(5)^=''
     THEN COLSIZE=PARY(5);
   IF PARY(6)^=''
     THEN N,NCOLS=PARY(6);
     ELSE DO;
       /* NOW SET N,NCOLS TO THE NUMBER OF COLUMNS IN ORIGINAL MATRIX */
       L=MAXLEN(BUF); /* MAXIMUM RECORD SIZE */
       N=L/COLSIZE;
       IF N*COLSIZE<L
         THEN N=N+1;
       END;

   /* NOW SET M TO THE NUMBER OF ROWS(RECORDS) IN ORIGINAL MATRIX */
   M=0;
   CALL #MD(RHPTR,SUBENT,L1);
   ADDPTR=LSTPTR; /* SAVE POINT TO ADD NEW RECORDS */
   DO SAVPTR=RECPTR REPEAT SAVPTR->NXTPTR WHILE(SAVPTR^=HDPTR);
     IF SAVPTR->RECSEQ>L2
     THEN LEAVE;
     M=M+1;
     END;
   IF M=0
     THEN DO;
       MSGDATA='AT LEAST ONE ROW(RECORD) MUST BE IN LINE RANGE';
       RHRC=8;
       RETURN;
       END;

   /* NOW CHECK TO ENSURE WORK NEEDS TO BE DONE */
   SELECT(AXIS);
     WHEN('×') IF N=1
       THEN RETURN;
     WHEN('-') IF M=1
       THEN RETURN;
     OTHERWISE IF M=1 & N=1
       THEN DO;
         RHRC=0;
         RETURN;
         END;
     END; /* SELECT */

   /* NOW ALLOCATE WORKING MATRIX */
   SELECT(AXIS);
     WHEN('×','-') DO;  /* OUTPUT MATRIX WILL BE MXN */
       I=M;
       J=N;
       END;
     OTHERWISE DO; /* FOR '/' '\', OUTPUT MATRIX WILL BE NXM */
       I=N;
       J=M;
       END;
     END; /* SELECT */
   ALLOCATE STR;

   /* NOW COPY RECORDS TO WORKING MATRIX AND DELETE THEM */
   CALL #MD(RHPTR,SUBENT,L1);
   I=0;
   DO SAVPTR=RECPTR REPEAT SAVPTR->NXTPTR WHILE(SAVPTR^=HDPTR);
     IF SAVPTR->RECSEQ>L2
       THEN LEAVE;
     I=I+1;
     L=LENGTH(SAVPTR->RECSTR);
     DO J=1 TO N;
       SELECT(AXIS);
         WHEN('-') CALL ASSIGN(J,M-I+1,J,L);
         WHEN('×') CALL ASSIGN(J,I,N-J+1,L);
         WHEN('\') CALL ASSIGN(J,J,I,L);
         WHEN('/') CALL ASSIGN(J,N-J+1,M-I+1,L);
         OTHERWISE;
         END; /* SELECT */
       END;
     DELPTR=SAVPTR;
     SAVPTR=SAVPTR->LSTPTR;
     CALL #PUTSLOT(RHPTR,SUBENT,DELPTR);
     END;

   /* NOW ADD REARRANGED DATA */
   CALL #NC(RHPTR,SUBENT,ADDPTR);
   DO I=1 TO DIM1;
     BUF='';
     DO J=1 TO DIM2;
       BUF=BUF××ARY(I,J);
       END;
     SEQ=-1;
     CALL #ADD(RHPTR,SUBENT,ADDPTR,ADDPTR,SEQ,BUF,RHPPTR);
     END;
   LAST=99999999;
   CALL #RESEQ(RHPTR,SUBENT,ADDPTR->LSTPTR,'NOSAVE','NORENUM',LAST,
     RHPPTR);
   CALL #MD(RHPTR,SUBENT,SAVSEQ);
   RHRC = 0;
   FREE STR;

 ASSIGN: PROC(I,J,K,L);
 /**********************************************************************
 *                                                                     *
 * CALLED TO COPY STRING FROM BUFFER TO APPROPRIATE ARRAY ELEMENT.     *
 * I INDICATES NUMBER OF ELEMENT IN CURRENT RECORD.                    *
 * J INDICATES INDEX FOR FIRST DIMENSION OF ARRAY.                     *
 * K INDICATES INDEX FOR SECOND DIMENSION OF ARRAY.                    *
 * L INDICATES LENGTH OF CURRENT RECORD.                               *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L,OFF) FIXED BIN(31,0);
   OFF=(I-1)*COLSIZE+1;
   IF OFF>L
     THEN ARY(J,K)='';
     ELSE ARY(J,K)=SUBSTR(SAVPTR->RECSTR,OFF,COLSIZE);
   END ASSIGN;

   END DENT059;
