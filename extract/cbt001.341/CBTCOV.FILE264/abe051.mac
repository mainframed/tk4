   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE051 - NL,MSG,R,MEMORY,SETN SUBCOMMANDS */
   %INCLUDE ABESUB;
 ABESUB(ABE051) CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE APLCB;

   DCL SETCAPS ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));

   DCL L FIXED BIN(15,0);
   DCL 1 BLSTR BASED(BLPTR),
     2 NBLPTR PTR,
     2 BLCMDLEN FIXED BIN(15,0),
     2 BLCMD CHAR(L REFER(BLCMDLEN)) VAR;
   DCL 1 REPBUF,
     2 BUFLEN FIXED BIN(15,0),
     2 OFFSET FIXED BIN(15,0),
     2 BF CHAR(1024);
   DCL SAVPTR PTR;
   DCL LAST FIXED BIN(31,0) INIT(99999999);
   DCL APLMEM FIXED BIN(15,0);
   DCL MYBUF CHAR(1024) VAR;

   RHRC=0;
   SELECT(CMDINDX);
     WHEN(1,2) DO; /* IT IS NL SUBCOMMAND */
       IF RH_APL=NULL
         THEN APLMEM=0;
         ELSE DO; /* EXTRA MEMORY REQUIRED FOR APL VARIABLE */
           I=RH_APL_RHCOUNT*RH_APL_ELCOUNT*RH_APL_ELEN-BUFLN;
           DO APLMEM=1 REPEAT APLMEM+1 WHILE(APLMEM**2<I);
             END;
           END;
       IF LENGTH(CMDBUF)<2
         THEN BUF='';
         ELSE BUF=SUBSTR(CMDBUF,2);
       SAVPTR=RECPTR;
       SEQ=-1;
       CALL #ADD(RHPTR,RHHDRPT,SAVPTR,SAVPTR,SEQ,BUF,APLMEM);
       CALL #RESEQ(RHPTR,RHHDRPT,SAVPTR->LSTPTR,'NOSAVE','NORENUM',
         LAST);
       CALL #NC(RHPTR,SAVPTR); /* CALL NEWCUR */
       END;
     WHEN(3) /* IT IS MSG SUBCOMMAND */ IF LENGTH(CMDBUF)>=2
       THEN MSGDATA=SUBSTR(CMDBUF,2);
       ELSE MSGDATA='';
     WHEN(4) DO; /* IT IS R SUBCOMMAND */
       IF LENGTH(CMDBUF)<2
         THEN RETURN;
       BF=SUBSTR(CMDBUF,2);
       BUFLEN=MIN(1028,LENGTH(CMDBUF)+3);
       OFFSET=0;
       CALL #REP(RHHDRPT,RH_SYMTREE,REPBUF); /* GO DO SYMBOLIC REPL */
       MYBUF=SUBSTR(BF,1,BUFLEN-4);
       IF MYBUF^=''
         THEN RHRC=#CMD(MYBUF,RHPTR,RHHDRPT);
       END;
     WHEN(5) CALL MEMORY; /* IT IS MEMORY SUBCOMMAND */
     WHEN(6) CALL SETN; /* SETN SUBCOMMAND */
     OTHERWISE;
     END; /* SELECT */

 MEMORY: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS THE MEMORY SUBCOMMAND. SYMBOLIC VARIABLE MEMORY   *
 * WILL BE SET, AND MSGDATA WILL BE SET.                               *
 *                                                                     *
 **********************************************************************/
   DCL (SYSFREM,SYSGETM) ENTRY;
   DCL 1 LA STATIC,
     LAMIN FIXED BIN(31,0) INIT(0),
     LAMAX FIXED BIN(31,0) INIT(16777215);
   DCL 1 ASTR,
     A PTR,
     LV FIXED BIN(31,0);
   DCL SP FIXED BIN(15,0) STATIC INIT(0);
   DCL RETCODE FIXED BIN(15,0);

   CALL SYSGETM('VU',LAMIN,A,SP,RETCODE);
   IF RETCODE^=0
     THEN MSGDATA='RETURN CODE ='××#BARENUM(RETCODE);
     ELSE DO;
       CALL SYSFREM(LV,A,SP);
       MSGDATA=#BARENUM(LV);
       CALL #SETA(RHHDRPT,RH_SYMTREE,'MEMORY',LV);
       MSGDATA=MSGDATA××' BYTES AVAILABLE';
       END;
   END MEMORY;

 SETN: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS THE SETN SUBCOMMAND.                              *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN;
   DCL SYMBOLPM CHAR(8);
   DCL SETTXT CHAR(256) VAR;
   DCL GBLSW BIT(1) STATIC INIT('0'B);

   ON CONDITION(BADSETN) BEGIN;
     MSGDATA='INVALID SYNTAX FOR SETN SUBCOMMAND';
     RHRC=16;
     GOTO SETN_END;
     END;

   IF CMDBUF=''
     THEN SIGNAL CONDITION(BADSETN);
   CMDBUF=SUBSTR(CMDBUF,PREFIX(CMDBUF,' ')); /* NO LEADING BLANKS*/
   I=INDEX(CMDBUF,' ');
   IF I=0
     THEN DO;
       I=LENGTH(CMDBUF)+1;
       SETTXT='';
       END;
     ELSE IF I=LENGTH(CMDBUF)
       THEN SETTXT='';
       ELSE SETTXT=SUBSTR(CMDBUF,I+1);
   IF I>8
     THEN SIGNAL CONDITION(BADSETN);
   SYMBOLPM=SUBSTR(CMDBUF,1,I-1);
   CALL SETCAPS(SYMBOLPM);
   CALL #SETC(RHHDRPT,RH_SYMTREE,SYMBOLPM,SETTXT);
 SETN_END:;
   END SETN;

   END ABE051;
