 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * FUNCTION ABEUD IS INVOKED TO GENERATE THE CHARACTER STRING          *
 * DESCRIBING THE DATABASE DEFINITION EXISTENT FOR THE DATA SET        *
 * IDENTIFIED BY RHPTR.  THE CHARACTER STRING GENERATED WILL BE        *
 * PROPER SYNTAX FOR INPUT TO THE USE SUBCOMMAND, E.G.                 *
 *                                                                     *
 *   × NAME1 × (NAME2 NAME3) × NAME4 ×                                 *
 *                                                                     *
 * IF A NAME IS TOO LONG TO FIT BETWEEN VERTICAL BARS, VARIABLE NAME   *
 * 'Z' WILL BE SUBSTITUTED IN THE GENERATED STRING.                    *
 *                                                                     *
 * THE PORTION RETURNED WILL START WITH THE COLUMN AT OFFSET PCOL.     *
 *                                                                     *
 * ENTRY POINT ABEUDB IS CALLED TO PROCESS THE DATABASE DESCRIPTION    *
 * LINE FROM THE DISPLAY, WHENEVER THAT LINE IS MODIFIED BY THE        *
 * TERMINAL USER.  IT WILL CONVERT THAT LINE INTO A USE SUBCOMMAND,    *
 * AND WILL STACK THE GENERATED SUBCOMMAND FOR LATER EXECUTION.        *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABEUD) PARMS(RHPTR,RHHDRPT,PCOL) RETURNS(CHAR(256) VAR)
   RECURS(YES);
   %INCLUDE ABESUBA;

   DCL PCOL FIXED BIN(15,0);
   DCL REPEAT BUILTIN;
   DCL (SUFFIX,PREFIX) ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL LPSW BIT(1) INIT('0'B);
   DCL RET CHAR(1024) VAR;
   DCL DIS CHAR(256) VAR;
   DCL (I,NAB,BAN) FIXED BIN(15,0);
   DCL TNAME CHAR(10) VAR;
   DCL HDR PTR;

   IF PCOL>1024
     THEN RETURN('');
   RET='×'××REPEAT(' ',1022); /* FILL TO START */
   /* FIRST GO THRU AND ESTABLISH FIXED FIELD BOUNDARIES */
   IF RH_DISPLAY_HDR^=NULL
     THEN HDR=RH_DISPLAY_HDR;
     ELSE HDR=RHUSEHD;
   DO RHNAMPTR=HDR REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     IF RHNPOS^=0 & RHNPOS<=1024
       THEN DO;
         SUBSTR(RET,RHNPOS,1)='×';
         IF RHNPOS+RHNLNG<=1024
           THEN SUBSTR(RET,RHNPOS+RHNLNG,1)='×';
         IF RHNLNG>1 & RHNPOS<1024
           THEN DO; /* THERE IS ROOM FOR SOME KIND OF NAME */
             TNAME=SUBSTR(RHNNAME,1,SUFFIX(RHNNAME,' '));
             IF RHNTYPE=2 /* IS IT CHAR? */
               THEN TNAME=TNAME××' $';
             I=LENGTH(TNAME);
             IF I>RHNLNG-1
               THEN SUBSTR(RET,RHNPOS+1,1)='Z'; /* SHORTHAND NAME */
               ELSE IF RHNPOS+I<=1024
                 THEN SUBSTR(RET,RHNPOS+1,I)=TNAME; /* LONG NAME */
             END;
         END;
     END;

   /* NOW GO THRU AND ESTABLISH FREE FORM NAMES */
   NAB=2; /* NEXT AVAILABLE POSITION FOR A FREE-FORM NAME */
   IF RH_DISPLAY_HDR=NULL
     THEN FLUP: DO RHNAMPTR=RHUSEHD REPEAT RHNLINK
       WHILE(RHNAMPTR^=NULL);
       IF RHNPOS^=0
         THEN DO;
           NAB=RHNPOS+RHNLNG+1;
           IF NAB>=1024
             THEN LEAVE FLUP;
           END;
         ELSE DO; /* HAVE A FREE-FORM FIELD */
           I=INDEX(SUBSTR(RET,NAB),'×');
           IF I=0
             THEN BAN=LENGTH(RET)+1;
             ELSE BAN=BAN+I-1;
           IF BAN-NAB>=3
             THEN DO;
               SUBSTR(RET,NAB,1)='(';
               DO FOREVER=1 REPEAT FOREVER;
                 TNAME=SUBSTR(RHNNAME,1,SUFFIX(RHNNAME,' '));
                 IF RHNTYPE=2 /* IS IT CHAR? */
                   THEN TNAME=TNAME××' $';
                 I=LENGTH(TNAME);
                 IF I<=BAN-NAB-2
                   THEN DO; /* LONG NAME WILL FIT */
                     SUBSTR(RET,NAB+1,I)=TNAME;
                     NAB=NAB+I+1;
                     END;
                   ELSE DO;
                     SUBSTR(RET,NAB+1,1)='Z';
                     NAB=NAB+2;
                     END;
                 IF RHNLINK=NULL
                   THEN LEAVE; /* NO MORE FREE-FORM HERE */
                 IF RHNLINK->RHNPOS^=0
                   THEN LEAVE; /* NO MORE FREE-FORM HERE */
                 IF BAN-NAB<2
                   THEN LEAVE; /* NO MORE ROOM */
                 RHNAMPTR=RHNLINK;
                 END;
               SUBSTR(RET,NAB,1)=')';
               DO FOREVER=1 REPEAT FOREVER;
                 IF RHNLINK=NULL
                   THEN LEAVE; /* NO MORE FREE-FORM HERE */
                 IF RHNLINK->RHNPOS^=0
                   THEN LEAVE; /* NO MORE FREE-FORM HERE */
                 RHNAMPTR=RHNLINK;
                 END;
               END;
           END;
       END FLUP;
   IF PCOL>LENGTH(RET)
     THEN RETURN('');
   RET=SUBSTR(RET,PCOL);
   IF HEXMODE & RH_DISPLAY_HDR=NULL
     THEN DO;
       DIS='';
       DO I=1 TO LENGTH(RET);
         DIS=DIS××SUBSTR(RET,I,1)××' ';
         END;
       RETURN(DIS);
       END;
   RETURN(RET);

 ABEUDB: ENTRY(RHPTR,RHHDRPT,PCOL,DATA);
   DCL DATA CHAR(*) VAR;
   DCL USE CHAR(1024) VAR;
   IF HEXMODE & RH_DISPLAY_HDR=NULL
     THEN DO;
       USE='';
       DO I=1 REPEAT I+2 WHILE(I<=LENGTH(DATA));
         USE=USE××SUBSTR(DATA,I,1);
         END;
       DATA=USE;
       END;
   USE='';
   SELECT;
     WHEN(PCOL=LENGTH(USE)+1)
       USE=USE××DATA;
     WHEN(PCOL>LENGTH(USE)+1)
       USE=USE××REPEAT(' ',PCOL-(LENGTH(USE)+1)-1)××DATA;
     WHEN(PCOL+LENGTH(DATA)-1>LENGTH(USE))
       USE=SUBSTR(USE,PCOL-1)××DATA;
     OTHERWISE
       SUBSTR(USE,PCOL,LENGTH(DATA))=DATA;
     END; /* SELECT */
   IF RH_DISPLAY_HDR=NULL
     THEN CALL #PUSHLIFO(RHPTR,RH_STACK,RH_QUEUE,'USE '××USE);
     ELSE CALL #PUSHLIFO(RHPTR,RH_STACK,RH_QUEUE,'USE DISPLAY '××USE);
   END ABEUD;
