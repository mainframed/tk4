   %INCLUDE ABESUB;
 ABESUB(ABERGB) PARS(00000000) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL PTRIN ENTRY(PTR)
     RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0))
     RETURNS(PTR);

   DCL CH CHAR(1);
   DCL 1 MAPSTR BASED(MAPTR),
     2 MAP_ENTRY_COUNT FIXED BIN(15,0),
     2 COLOR_MAP(COLOR_MAP_LENGTH REFER (MAP_ENTRY_COUNT))
       FIXED BIN(15,0);

   /* GLOBAL DECLARES FOR I/O */
   DCL INBUF CHAR(32767) VAR INIT('');
   DCL INCH CHAR(1) BASED(INPTR);
   DCL (INPTR,INBLK,ENDBUF) PTR;
   DCL INDSN CHAR(44) VAR;
   DCL INCODE CHAR(3) VAR STATIC INIT('INP');
   DCL INEOF BIT(1) INIT('0'B);
   DCL PIXEL_CHAR CHAR(2),
       PIXEL_INDEX FIXED BIN(15,0) BASED(ADDR(PIXEL_CHAR));
   DCL PIXEL_COUNT FIXED BIN INIT(0);
   DCL RAW FIXED BIN;

   /* INITIALIZATION */
   MAPTR=NULL;
   ON CONDITION(RGBEOJ) GOTO CLOSE_FILE;
   ON CONDITION(RGBERR) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='ERROR IN RGB PROCESSING';
     RHRC=16;
     SIGNAL CONDITION(RGBEOJ);
     END;
   INDSN=PARY(1);
   IF PARQCK(1) /* QUOTED STRING */
     THEN INDSN=''''××INDSN××'''';
   CALL #DOALC(INDSN,INCODE,INBLK,RHPTR,'');
   IF INBLK=NULL
     THEN DO;
       MSGDATA='UNABLE TO ALLOCATE FILE';
       SIGNAL CONDITION(RGBERR);
       END;
   INEOF='0'B;
   ON ENDFILE(RH_SEQ_1) BEGIN;
     INEOF='1'B;
     END;
   OPEN FILE(RH_SEQ_1) TITLE(INBLK->ALCDDN) RECORD INPUT;
   READ FILE(RH_SEQ_1) INTO(INBUF);
   IF INEOF × LENGTH(INBUF)=0
     THEN DO;
       MSGDATA='FILE IS EMPTY';
       SIGNAL CONDITION(RGBERR);
       END;
   INPTR=PTROUT(PTRIN(ADDR(INBUF))+2);
   ENDBUF=PTROUT(PTRIN(INPTR)+LENGTH(INBUF));

   /* READ INITIAL FIELDS */
   FIELD1=IN_BYTE; /* NUMBER OF CHARACTERS IN ID FIELD */
   FIELD2=IN_BYTE; /* COLOR MAP TYPE */
   FIELD3=IN_BYTE; /* IMAGE TYPE CODE */
   SELECT(FIELD3);
     WHEN(2)  CALL COMMON_PROCESS(NEXT_PIXEL_TYPE2);
     WHEN(10) CALL COMMON_PROCESS(NEXT_PIXEL_TYPE10);
     OTHERWISE DO;
       MSGDATA='INVALID IMAGE TYPE CODE';
       SIGNAL CONDITION(RGBERR);
       END;
     END; /* SELECT */
 CLOSE_FILE:
   CLOSE FILE(RH_SEQ_1);
   IF INBLK^=NULL
     THEN FREE INBLK->ALCSTR;
   IF MAPTR^=NULL
     THEN FREE MAPTR->MAPSTR;
   RETURN;

 COMMON_PROCESS: PROC(NEXT_PIXEL);
   DCL NEXT_PIXEL ENTRY RETURNS(FIXED BIN(31,0));

   IF FIELD2=0
     THEN DO I=1 TO 5; /* SKIP OVER FIELD 4 */
       CH=IN_CHAR;
       END;
     ELSE DO; /* SETUP COLOR MAP */
       COLOR_MAP_ORIGIN=IN_HALFWORD;
       COLOR_MAP_LENGTH=IN_HALFWORD;
       I=IN_BYTE; /* COLOR MAP ENTRY SIZE */
       IF I^=16
         THEN DO;
           MSGDATA='INVALID COLOR MAP ENTRY SIZE';
           SIGNAL CONDITION(RGBERR);
           END;
       ALLOC MAPSTR;
       END;
   XORIGIN=IN_HALFWORD; /* X ORIGIN LOWER LEFT CORNER OF IMAGE */
   YORIGIN=IN_HALFWORD; /* Y ORIGIN LOWER LEFT CORNER OF IMAGE */
   IMAGE_WIDTH=IN_HALFWORD; /* WIDTH IN PIXELS */
   IMAGE_HEIGHT=IN_HALFWORD; /* HEIGHT IN PIXELS */
   PIXEL_SIZE=IN_BYTE; /* NUMBER OF BITS IN A PIXEL */
   IF PIXEL_SIZE^=16
     THEN DO;
       MSGDATA='INVALID IMAGE PIXEL SIZE';
       SIGNAL CONDITION(RGBERR);
       END;
   IMAGE_DESCRIPTOR_BYTE=IN_BYTE;
   IF IMAGE_DESCRIPTOR_BYTE^=0
     THEN DO;
       MSGDATA='IMAGE DESCRIPTOR BYTE MUST BE 0';
       SIGNAL CONDITION(RGBERR);
       END;
   IF FIELD1^=0
     THEN DO I=1 TO FIELD1; /* SKIP OVER IMAGE IDENTIFICATION FIELD */
       CH=IN_CHAR;
       END;
   IF FIELD2^=0
     THEN DO I=1 TO MAP_ENTRY_COUNT; /* FILL IN COLOR MAP */
       COLOR_MAP(I)=NEXT_PIXEL_COLOR(IN_CHAR2);
       END;
   /* NOW PROCESS THE IMAGE DATA FIELD, ONCE FOR EACH COLOR */
   I=#CMD('GDDM FSINIT ',RHPTR,RHHDRPT);
   I=#CMD('GDDM GSSEG 0',RHPTR,RHHDRPT);
   SELECT(PARY(2));
     WHEN('','0','2') START=1; /* COLOR DRAWING */
     OTHERWISE START=7; /* LINES DRAWING ONLY */
     END; /* SELECT */
   DO COLOR=START TO 7;
     CALL DO_IMAGE(COLOR,NEXT_PIXEL);
     IF COLOR<7
       THEN CALL RESET_FILE;
     END;
   I=#CMD('GDDM ASREAD 0 0 0',RHPTR,RHHDRPT);
   I=#CMD('GDDM FSTERM',RHPTR,RHHDRPT);
   END COMMON_PROCESS;

 DO_IMAGE: PROC(COLOR,NEXT_PIXEL);
   DCL COLOR FIXED BIN;
   DCL NEXT_PIXEL ENTRY RETURNS(FIXED BIN(31,0));
   DCL (I,J,K,X,Y) FIXED BIN;
   DCL CMD CHAR(100) VAR;
   DCL PEL CHAR(1) STATIC INIT('1');
   DCL LAST_PIXEL CHAR(2);
   DCL LAST_COLOR FIXED BIN;

   LAST_PIXEL=PIXEL_CHAR;
   LAST_COLOR=0;
   PUT STRING(CMD) EDIT('GDDM GSCOL ',COLOR)(A,P'Z9');
   I=#CMD(CMD,RHPTR,RHHDRPT);
   I=#CMD('GR DEVICE 100 100 720 384 1',RHPTR,RHHDRPT);
   K=0;
   DO Y=1 TO IMAGE_HEIGHT;
     DO X=1 TO IMAGE_WIDTH;
       SELECT(PARY(2));
         WHEN('','0') DO; /* COLOR DRAWING */
           IF COLOR=NEXT_PIXEL
             THEN IF X<=720 & Y<=384
               THEN DO;
                 CALL #PIXPUT(X,Y,PEL,RHPLOT79);
                 K=K+1;
                 END;
           END;
         WHEN('1') DO; /* LINES DRAWING */
           I=NEXT_PIXEL; /* GLOBAL PIXEL_CHAR W/B FILLED IN */
           IF PIXEL_CHAR^=LAST_PIXEL
             THEN IF X<=720 & Y<=384
               THEN DO;
                 LAST_PIXEL=PIXEL_CHAR;
                 CALL #PIXPUT(X,Y,PEL,RHPLOT79);
                 K=K+1;
                 END;
           END;
         WHEN('2') DO; /* CYCLE COLORS */
           I=NEXT_PIXEL; /* GLOBAL PIXEL_CHAR W/B FILLED IN */
           IF PIXEL_CHAR^=LAST_PIXEL
             THEN IF X<=720 & Y<=384
               THEN DO;
                 LAST_PIXEL=PIXEL_CHAR;
                 LAST_COLOR=MOD(LAST_COLOR+1,8);
                 IF COLOR=LAST_COLOR
                   THEN DO;
                     CALL #PIXPUT(X,Y,PEL,RHPLOT79);
                     K=K+1;
                     END;
                 END;
           END;
         OTHERWISE;
         END; /*SELECT */
       END;
     END;
   IF K>0
     THEN DO;
       I=#CMD('GDDM GSMOVE 0 100',RHPTR,RHHDRPT);
       I=#CMD('GDDM GSIMG 0 720 384 34560 BITMAP',RHPTR,RHHDRPT);
       END;
   END DO_IMAGE;

 IN_BYTE: PROC RETURNS(FIXED BIN(31,0));
   DCL RET FIXED BIN(31,0),
       RETCH CHAR(4) BASED(ADDR(RET));

   RET=0;
   SUBSTR(RETCH,4,1)=IN_CHAR;
   RETURN(RET);
   END IN_BYTE;

 IN_CHAR: PROC RETURNS(CHAR(1));
   DCL BYTE CHAR(1);

   IF INPTR=ENDBUF
     THEN DO;
       READ FILE(RH_SEQ_1) INTO(INBUF);
       IF INEOF
         THEN DO;
           INEOF='0'B;
           CLOSE FILE(RH_SEQ_1);
           OPEN FILE(RH_SEQ_1) TITLE(INBLK->ALCDDN) RECORD INPUT;
           READ FILE(RH_SEQ_1) INTO(INBUF);
           END;
       INPTR=PTROUT(PTRIN(ADDR(INBUF))+2);
       ENDBUF=PTROUT(PTRIN(INPTR)+LENGTH(INBUF));
       END;
   BYTE=INPTR->INCH;
   INPTR=PTROUT(PTRIN(INPTR)+1);
   RETURN(BYTE);
   END IN_CHAR;

 IN_CHAR2: PROC RETURNS(CHAR(2));
   DCL RET CHAR(2);

   SUBSTR(RET,2,1)=IN_CHAR;
   SUBSTR(RET,1,1)=IN_CHAR;
   RETURN(RET);
   END IN_CHAR2;

 IN_HALFWORD: PROC RETURNS(FIXED BIN(31,0));
   DCL RET FIXED BIN(31,0),
       RETCH CHAR(4) BASED(ADDR(RET));

   SUBSTR(RETCH,3,2)=IN_CHAR2;
   SUBSTR(RETCH,1,2)=LOW(2);
   RETURN(RET);
   END IN_HALFWORD;

 NEXT_PIXEL_COLOR: PROC(PIXEL_CHAR) RETURNS(FIXED BIN(15,0));
 /**********************************************************************
 * NEXT_PIXEL_COLOR IS CALLED TO OBTAIN THE NEXT PIXEL, AND DETERMINE  *
 * ITS COLOR.                                                          *
 **********************************************************************/
   DCL PIXEL_CHAR CHAR(2),
       PIXEL BIT(16) BASED(ADDR(PIXEL_CHAR));
   DCL (RED,GREEN,BLUE,SUM) DEC FLOAT;
   DCL 1 CODES_STR STATIC,
     2 CODE_VIOLET FIXED BIN(15,0) INIT(7), /* WHITE */
     2 CODE_INDIGO FIXED BIN(15,0) INIT(5), /* TURQUOISE */
     2 CODE_BLUE   FIXED BIN(15,0) INIT(1), /* BLUE */
     2 CODE_GREEN  FIXED BIN(15,0) INIT(4), /* GREEN */
     2 CODE_YELLOW FIXED BIN(15,0) INIT(6), /* YELLOW */
     2 CODE_ORANGE FIXED BIN(15,0) INIT(3), /* PINK */
     2 CODE_RED    FIXED BIN(15,0) INIT(2), /* RED */
     2 CODE_BLACK  FIXED BIN(15,0) INIT(8); /* BLACK */
   DCL CODES(8) FIXED BIN(15,0) BASED(ADDR(CODES_STR));

   RED  =SUBSTR(PIXEL,2,5);
   GREEN=SUBSTR(PIXEL,7,5);
   BLUE =SUBSTR(PIXEL,12,5);
   SUM=RED+GREEN+BLUE;
   IF SUM=0
     THEN RETURN(CODE_BLACK);
   RED=RED/SUM;
   GREEN=GREEN/SUM;
   BLUE=BLUE/SUM;
   SELECT;
     WHEN(RED>MAX(BLUE,GREEN)) SELECT; /* RED PREDOMINATES */
       WHEN(RED>(BLUE+GREEN)) RETURN(CODE_RED);
       WHEN(BLUE>GREEN)       RETURN(CODE_ORANGE);
       OTHERWISE              RETURN(CODE_YELLOW);
       END; /* SELECT */
     WHEN(BLUE>MAX(RED,GREEN)) SELECT; /* BLUE PREDOMINATES */
       WHEN(BLUE>(RED+GREEN)) RETURN(CODE_BLUE);
       WHEN(RED>GREEN)        RETURN(CODE_INDIGO);
       OTHERWISE              RETURN(CODE_VIOLET);
       END; /* SELECT */
     OTHERWISE SELECT;                 /* GREEN PREDOMINATES */
       WHEN(GREEN>(RED+BLUE)) RETURN(CODE_GREEN);
       WHEN(RED>BLUE)         RETURN(CODE_YELLOW);
       OTHERWISE              RETURN(CODE_ORANGE);
       END; /* SELECT */
     END; /* SELECT */
   END NEXT_PIXEL_COLOR;

 NEXT_PIXEL_TYPE10: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 * NEXT_PIXEL IS CALLED TO OBTAIN THE NEXT PIXEL, AND DETERMINE ITS    *
 * COLOR, WHEN TYPE 10 IMAGE RECORDS ARE BEING PROCESSED.              *
 **********************************************************************/

   IF PIXEL_COUNT=0
     THEN DO; /* GET A NEW PACKET */
       PIXEL_COUNT=IN_BYTE;
       IF PIXEL_COUNT>127
         THEN DO;
           RAW=0; /* IT IS A RUN-LENGTH PACKET */
           PIXEL_COUNT=PIXEL_COUNT-127;
           PIXEL_CHAR=IN_CHAR2;
           END;
         ELSE DO;
           RAW=1; /* IT IS A RAW PACKET */
           PIXEL_COUNT=PIXEL_COUNT+1;
           END;
       END;
   IF RAW=1
     THEN PIXEL_CHAR=IN_CHAR2;
   PIXEL_COUNT=PIXEL_COUNT-1;
   IF MAPTR=NULL
     THEN RETURN(NEXT_PIXEL_COLOR(PIXEL_CHAR));
     ELSE RETURN(COLOR_MAP(PIXEL_INDEX-COLOR_MAP_ORIGIN+1));
   END NEXT_PIXEL_TYPE10;

 NEXT_PIXEL_TYPE2: PROC RETURNS(FIXED BIN);
 /**********************************************************************
 * NEXT_PIXEL IS CALLED TO OBTAIN THE NEXT PIXEL, AND DETERMINE ITS    *
 * COLOR, WHEN TYPE 2 IMAGE RECORDS ARE BEING PROCESSED.               *
 **********************************************************************/
   DCL PIXEL_CHAR CHAR(2);
   DCL PIXEL_INDEX FIXED BIN(15,0) BASED(ADDR(PIXEL_CHAR));

   PIXEL_CHAR=IN_CHAR2;
   IF MAPTR=NULL
     THEN RETURN(NEXT_PIXEL_COLOR(PIXEL_CHAR));
     ELSE RETURN(COLOR_MAP(PIXEL_INDEX-COLOR_MAP_ORIGIN+1));
   END NEXT_PIXEL_TYPE2;

 RESET_FILE: PROC; /* CALLED TO SET UP ANOTHER PASS OF IMAGE DATA */
   DCL I FIXED BIN;
   DCL CH2 CHAR(2);

   CLOSE FILE(RH_SEQ_1);
   OPEN FILE(RH_SEQ_1) TITLE(INBLK->ALCDDN) RECORD INPUT;
   INPTR=ENDBUF;
   DO I=1 TO 18; /* SKIP OVER HEAD FIELDS */
     CH=IN_CHAR;
     END;
   IF FIELD1^=0
     THEN DO I=1 TO FIELD1; /* SKIP OVER IMAGE IDENTIFICATION FIELD */
       CH=IN_CHAR;
       END;
   IF FIELD2^=0
     THEN DO I=1 TO MAP_ENTRY_COUNT; /* SKIP OVER COLOR MAP */
       CH2=IN_CHAR2;
       END;
   PIXEL_COUNT=0;
   END RESET_FILE;

   END ABERGB;
