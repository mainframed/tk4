 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT050 - CALC,FS,MCALC,PLOT SUBCOMMAND */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME = 'RENT';
   % @RENTNAME = 'DENT050';
   % INCLUDE DENTSUBA;
   % DCL SCAN CHAR;
   % SCAN = 'CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS)';
   HALT;
   DCL SCANNER ENTRY;
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0) INIT(1);
   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL KEYWORD FIXED BIN(15,0) STATIC INIT(2);
   DCL OPERAND FIXED BIN(15,0) STATIC INIT(0);
   DCL NO_MORE_TOKENS FIXED BIN(15,0) STATIC INIT(6);
   DCL NUMBER FIXED BIN(15,0) STATIC INIT(5);
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL (SETCAPS,CALCEVA) ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL YGLOBAL FIXED BIN(31,0);
   DCL KEYWORDS(1) CHAR(12) VAR STATIC INIT('');

   ON CONDITION(BADSTMT) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='INVALID OPERAND';
     RHRC=8;
     GOTO EOJ;
     END;
   CALL SETCAPS(CMDDATA);
   CMDDATA=SUBSTR(CMDDATA,PREFIX(CMDDATA,' ')); /* CHOP LEADING BLANKS*/
   TOKHDR=NULL;
   SELECT(CMDINDX);
     WHEN(1,2) CALL CALC;
     WHEN(3) CALL FS;
     WHEN(4) CALL MCALC;
     OTHERWISE CALL PLOT;
     END; /* SELECT */

 EOJ:
   CALL CLEANUP;
   RETURN;

 CALC: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT SUBCOMMAND IS CALC.                         *
 *                                                                     *
 **********************************************************************/
   I=INDEX(CMDDATA,' '); /* INDEX PAST COMMAND NAME */
   IF I=0
     THEN CMDDATA='';
     ELSE CMDDATA=SUBSTR(CMDDATA,I); /* CHOP COMMAND NAME */
   I=PREFIX(CMDDATA,' ');
   IF I^=0
     THEN CMDDATA=SUBSTR(CMDDATA,I); /* CHOP LEADING BLANKS */
   IF CMDDATA=''
     THEN
      CALL #CALCEVA(PROMPT,#TERM,GET_OPERAND,GET_OPERAND_CHAR,
        PUT_OPERAND,ODD_FUNCTION);
     ELSE
      CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
        PUT_OPERAND,ODD_FUNCTION);
   END CALC;

 CLEANUP: PROC;
 /**********************************************************************
 * CLEANUP IS CALLED TO CLEAN UP MEMORY AT END OF PROCESSING IN THIS   *
 * SUBCOMMAND.                                                         *
 **********************************************************************/
   DCL DELPTR PTR;
   DO DELPTR=TOKHDR REPEAT TOKHDR WHILE(DELPTR^=NULL);
     TOKHDR=DELPTR->NEXT_TOKEN;
     FREE DELPTR->TOKEN;
     END;
   TOKHDR=NULL;
   SCANIX=1;
   END CLEANUP;

 FS: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT SUBCOMMAND IS FS.                           *
 *                                                                     *
 **********************************************************************/
   DCL R PTR;
   DCL I FIXED BIN(15,0);
   DO R=NXTHDR REPEAT R->NXTPTR WHILE(R^=HDPTR);
     I=INDEX(R->RECSTR,':');
     IF I=0
       THEN I=LENGTH(R->RECSTR)+1;
     END;
   END FS;

 GET_OPERAND: PROC(PRMPTR) RETURNS(FLOAT DEC(16));
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8);
   NAME='&'××PRMPTR->TOKSTR;
   RETURN(#SYMC(NAME));
   END GET_OPERAND;

 GET_OPERAND_CHAR: PROC(PRMPTR) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8);
   NAME='&'××PRMPTR->TOKSTR;
   RETURN(#SYMC(NAME));
   END GET_OPERAND_CHAR;

 MCALC: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURRENT SUBCOMMAND IS MCALC.                            *
 *                                                                     *
 * MCALC <L1> <L2> <OFF> <LEN> <NCOLS> <EXPRESSION>                    *
 *                                                                     *
 **********************************************************************/
   DCL 1 STR, 2 (L1,L2,OFF,LEN,NCOLS) FIXED BIN(31,0) INIT(0),
         ARY(5) FIXED BIN(31,0) DEF STR;
   DCL I FIXED BIN(31,0);
   DCL EXPRESSION CHAR(256) VAR;
   DCL ORGPTR PTR;

   /* FIRST PARSE */
   SCAN; /* SCAN COMMAND NAME */
   DO I=1 TO HBOUND(ARY,1);
     SCAN; /* SCAN FOR L1,L2,OFF,LEN,NCOLS */
     IF TYPE^=NUMBER
       THEN IF TOKSTR='ALL' & I=1
         THEN DO;
           L1=0;
           L2=99999999;
           I=2;
           END;
         ELSE SIGNAL CONDITION(BADSTMT);
       ELSE ARY(I)=TOKSTR;
     END;
   IF SCANIX>LENGTH(CMDDATA)
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=SUBSTR(CMDDATA,SCANIX);
   IF EXPRESSION=' '
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=SUBSTR(EXPRESSION,PREFIX(EXPRESSION,' '));

   /* NOW PROCESS */
   ORGPTR=RECPTR;
   CALL #MD(RHPTR,SUBENT,L1);
   R=0;
   DO RECPTR=RECPTR REPEAT NXTPTR WHILE(RECPTR^=HDPTR);
     IF RECSEQ>L2
       THEN LEAVE;
     N=NCOLS;
     LREC=LENGTH(RECSTR);
     DO I=OFF REPEAT I+LEN WHILE(I<=LREC) UNTIL(N=0);
       L=MIN(LEN,LENGTH(RECSTR)-I+1);
       SUBSTR(RECSTR,I,L)=MCALCSUB(SUBSTR(RECSTR,I,L),EXPRESSION,
         R,NCOLS-N);
       N=N-1;
       END;
     R=R+1;
     END;
   RHRC=0;
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* RESTORE ORIGINAL RECPTR */
   END MCALC;

 MCALCSUB: PROC(ESTR,EXPR,R,C) RETURNS(CHAR(80) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO EVALUATE EXPRESSION EXPR WITH VARIABLE E SET TO THE       *
 * CONTENTS OF ESTR.                                                   *
 *                                                                     *
 **********************************************************************/
   DCL ESTR CHAR(*);
   DCL EXPR CHAR(256) VAR;
    DCL (R,C) FIXED BIN(31,0);
   DCL RET CHAR(80) VAR;
   DCL VAL CHAR(256) VAR;
   ON CONVERSION BEGIN;
     RET='.';
     GOTO MRET;
     END;
   IF ESTR=' '
     THEN VAL='0';
     ELSE VAL=SUBSTR(ESTR,PREFIX(ESTR,' '));
   VAL=SUBSTR(VAL,1,SUFFIX(ESTR,' '));
   CALL #SET('0'B,'&R',R); /* SET VARIABLE R */
   CALL #SET('0'B,'&C',C); /* SET VARIABLE C */
   CALL #SET('0'B,'&E',VAL); /* SET VARIABLE E */
   CMDDATA=EXPR; /* SET UP CMDDATA FOR PROMPT SUBRTNE */
   CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);
   RET=MSGDATA;
 MRET:
   MSGDATA='';
   RETURN(RET);
   END MCALCSUB;

 MYTERM: PROC(MSG);
 /**********************************************************************
 * CALLED TO PRINT MESSAGE AT THE TERMINAL.                            *
 **********************************************************************/
   DCL MSG CHAR(*) VAR;
   MSGDATA=MSG;
   END MYTERM;

 ODD_FUNCTION: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL VALUE DEC FLOAT(16);
   MSG='UNIDENTIFIED FUNCTION = '××PRMSTR;
   SIGNAL CONDITION(BADEXP);
   RETURN(0);
   END ODD_FUNCTION;

 PLOT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURRENT SUBCOMMAND IS PLOT.                             *
 *                                                                     *
 * PLOT <L1> <L2> <EXPRESSION>                                         *
 *                                                                     *
 **********************************************************************/
   DCL 1 STR, 2 (L1,L2) FIXED BIN(31,0) INIT(0),
         ARY(2) FIXED BIN(31,0) DEF STR;
   DCL (I,J,X) FIXED BIN(31,0);
   DCL EXPRESSION CHAR(256) VAR;
   DCL ORGPTR PTR;

   /* FIRST PARSE */
   SCAN; /* SCAN COMMAND NAME */
   DO I=1 TO HBOUND(ARY,1);
     SCAN; /* SCAN FOR L1,L2,OFF,LEN,NCOLS */
     IF TYPE^=NUMBER
       THEN IF TOKSTR='ALL' & I=1
         THEN DO;
           L1=0;
           L2=99999999;
           I=2;
           END;
         ELSE SIGNAL CONDITION(BADSTMT);
       ELSE ARY(I)=TOKSTR;
     END;
   IF SCANIX>LENGTH(CMDDATA)
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=SUBSTR(CMDDATA,SCANIX);
   IF EXPRESSION=' '
     THEN SIGNAL CONDITION(BADSTMT);
   EXPRESSION=SUBSTR(EXPRESSION,PREFIX(EXPRESSION,' '));

   /* NOW PROCESS */
   ORGPTR=RECPTR;
   CALL #MD(RHPTR,SUBENT,L1);
   X=0;
   DO RECPTR=RECPTR REPEAT NXTPTR WHILE(RECPTR^=HDPTR);
     IF RECSEQ>L2
       THEN LEAVE;
     CALL PLOTSUB(EXPRESSION,X);
     X=X+1;
     END;
   RHRC=0;
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* RESTORE ORIGINAL RECPTR */
   END PLOT;

 PLOTSUB: PROC(EXPR,X);
 /**********************************************************************
 *                                                                     *
 * CALLED TO EVALUATE EXPRESSION EXPR WITH VARIABLE X.                 *
 *                                                                     *
 **********************************************************************/
   DCL EXPR CHAR(256) VAR;
   DCL (L,X,Y) FIXED BIN(31,0);
   DCL RET CHAR(80) VAR;
   DCL VAL CHAR(256) VAR;
   CALL #SET('0'B,'&X',X); /* SET VARIABLE X */
   CMDDATA='Y#'××EXPR; /* SET UP CMDDATA FOR PROMPT SUBRTNE */
   UNSPEC(YGLOBAL)=UNSPEC(HIGH(4));
   CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
     PUT_OPERAND,ODD_FUNCTION);
   IF UNSPEC(YGLOBAL)^=UNSPEC(HIGH(4))
     THEN DO;
       Y=YGLOBAL+1;
       L=Y-LENGTH(RECSTR)-1;
       IF L>=0
         THEN RECSTR=RECSTR××REPEAT(' ',L);
       IF LENGTH(RECSTR)>=Y
         THEN SUBSTR(RECSTR,Y,1)='1';
       END;
   MSGDATA='';
   END PLOTSUB;

 PROMPT: PROC RETURNS(CHAR(256) VAR);
 /**********************************************************************
 * CALLED TO PROMPT FOR INPUT FROM THE TERMINAL.                       *
 **********************************************************************/
   DCL PRMPT CHAR(80) VAR STATIC INIT('CALC:');
   DCL INP CHAR(256) VAR;
   DCL SETCAPS ENTRY;
   IF CMDDATA=''
     THEN INP = #PROMPT(PRMPT);
     ELSE DO;
       INP=CMDDATA;
       CMDDATA='END';
       END;
   CALL SETCAPS(INP);
   RETURN(INP);
   END PROMPT;

 PUT_OPERAND: PROC(PRMPTR,VALUE,MSG);
 /**********************************************************************
 * CALLED TO ASSIGN A VALUE TO A VARIABLE.                             *
 **********************************************************************/
   DCL PRMPTR PTR CONTROLLED;
   DCL VALUE FLOAT DEC(16);
   DCL (MSG,TXT) CHAR(80) VAR;
   TXT=CALCPRT(VALUE);
   IF LENGTH(TXT)<5 & INDEX(TXT,'-')=0
     THEN TXT=SUBSTR('00000',1,5-LENGTH(TXT))××TXT;
   CALL #SET('0'B,'&'××PRMPTR->TOKSTR,TXT);
   IF PRMPTR->TOKSTR='Y'
     THEN YGLOBAL=VALUE;
   END PUT_OPERAND;

   END DENT050;
