 TITLE: PROC OPTIONS(MAIN);
 /**********************************************************************
 *                                                                     *
 * TITLE IS A UTILITY PROGRAM STORED IN X.IS.X000.LOADLIB. IT SCANS    *
 * A STREAM OF INPUT DATA IN ORDER TO INSERT SINGLE APOSTROPHES (')    *
 * AROUND THE DATA IN EACH TITLE STATEMENT ENCOUNTERED.  SEVERAL       *
 * DIFFERENT TYPES OF PROCESSING MAY BE INVOKED, DEPENDING ON WHICH    *
 * FILES ARE SUPPLIED:                                                 *
 *                                                                     *
 * 1.  // EXEC PGM=TITLE                                               *
 *     //STEPLIB DD DSN=X.IS.X000.LOADLIB,DISP=SHR                     *
 *     //SYSPRINT DD SYSOUT=*                                          *
 *     //IN DD DSN=SAS.SOURCE,DISP=SHR                                 *
 *                                                                     *
 *     THE ABOVE STEP WILL SCAN DATASET SAS.SOURCE, AND WILL REPORT    *
 *     ON FILE SYSPRINT ANY TITLE STATEMENTS WHICH NEED TO BE          *
 *     CHANGED.  NO CHANGES WILL ACTUALLY BE MADE.                     *
 *                                                                     *
 * 2.  // EXEC PGM=TITLE                                               *
 *     //STEPLIB DD DSN=X.IS.X000.LOADLIB,DISP=SHR                     *
 *     //SYSPRINT DD SYSOUT=*                                          *
 *     //IN DD DSN=OLD.SOURCE,DISP=SHR                                 *
 *     //OUT DD DSN=NEW.SOURCE,DISP=SHR                                *
 *                                                                     *
 *     THE ABOVE STEP WILL SCAN DATASET OLD.SOURCE, AND WILL REPORT    *
 *     ON FILE SYSPRINT ANY TITLE STATEMENTS WHICH NEED TO BE          *
 *     CHANGED.  THE ENTIRE FILE UNDER DD STATEMENT IN WILL BE COPIED  *
 *     TO THE FILE UNDER DD STATEMENT OUT, AND ALL TITLE STATEMENTS    *
 *     WILL BE CHANGED ON FILE OUT.                                    *
 *                                                                     *
 * 3.  // EXEC PGM=TITLE                                               *
 *     //STEPLIB DD DSN=X.IS.X000.LOADLIB,DISP=SHR                     *
 *     //SYSPRINT DD SYSOUT=*                                          *
 *     //OUT DD DSN=SAS.SOURCE,DISP=SHR                                *
 *                                                                     *
 *     THE ABOVE STEP WILL SCAN DATASET SAS.SOURCE, AND WILL REPORT    *
 *     ON FILE SYSPRINT ANY TITLE STATEMENTS WHICH NEED TO BE          *
 *     CHANGED.  THE FILE UNDER THE DDNAME OUT WILL BE OPENED FOR      *
 *     UPDATE PROCESSING, AND ALL TITLE STATEMENTS THAT NEED TO BE     *
 *     WILL BE UPDATED IN THE FILE.                                    *
 *                                                                     *
 * NOTE THAT ONLY FIXED LENGTH 80-COLUMN RECORDS WILL BE CORRECTLY     *
 * PROCESSED.  THE PROGRAM IS SET UP TO CHECK FOR AND CORRECTLY        *
 * PROCESS EITHER NUMBERED OR UNNUMBERED DATA SETS; A NUMBERED DATA    *
 * SET IS ONE WITH SEQUENCE NUMBERS IN COLUMNS 73-80.                  *
 *                                                                     *
 **********************************************************************/
   DCL CH CHAR(1) INIT(''); /* GLOBAL CONTAINING CURRENT STREAM CHAR */
   DCL (IN,OUT) FILE RECORD;
   DCL MODE FIXED BIN INIT(3);
     /* 3=READ FILE IN, WRITE FILE OUT */
     /* 2=READ FILE OUT, UPDATE FILE OUT */
     /* 1=READ FILE IN, REPORT ON SYSPRINT */
   DCL QUOTE FIXED BIN INIT(0); /* 1=QUOTED STRING BEING PROCESSED */
   DCL INSERT FIXED BIN INIT(0); /* CHARACTERS ADDED TO STREAM */
   DCL SEQ CHAR(8) INIT(''); /* SEQUENCE FIELD */
   DCL SEQSW FIXED BIN INIT(0); /* 1=SEQUENCE NUMBERS IN 73-80 */
   DCL RECORD_COUNT FIXED BIN INIT(0); /* RECORD COUNT */
   DCL LOWARY(1) CHAR(1) VAR;
   LOWARY(1)=LOW(1);
   DCL SEMIARY(1) CHAR(1) VAR STATIC INIT(';');
   DCL TITARY(2) CHAR(8) VAR STATIC INIT('TITLE','FOOTNOTE');
   DCL STACK PTR;
   DCL 1 STACKEL BASED(STACK),
     2 NEXT PTR,
     2 STACK_CH CHAR(1);
   DCL NULL BUILTIN;

   /* HOUSEKEEPING */
   STACK=NULL;
   PUT SKIP EDIT('SAS TITLE FIX-IT PROGRAM')(A);
   PUT SKIP EDIT('  AN ASTERISK WILL BE PRINTED TO THE LEFT OF ANY')(A);
   PUT SKIP EDIT('  STATEMENT WHICH HAS BEEN CHANGED.')(A);
   PUT SKIP(2);
   ON UNDF(IN) MODE=MODE-1;
   OPEN FILE(IN) INPUT;
   ON UNDF(OUT) MODE=MODE-2;
   IF MODE=3
     THEN OPEN FILE(OUT) OUTPUT;
     ELSE OPEN FILE(OUT) UPDATE;
   SELECT(MODE);
     WHEN(1) PUT SKIP EDIT(
      'PROCESSING MODE IS TO REPORT POTENTIAL CHANGES FOR FILE IN')(A);
     WHEN(2) PUT SKIP EDIT(
      'PROCESSING MODE IS TO READ AND UPDATE FILE OUT')(A);
     WHEN(3) PUT SKIP EDIT(
      'PROCESSING MODE IS TO READ FILE IN, WRITE FILE OUT WITH CHANGES')
      (A);
     OTHERWISE DO;
       PUT SKIP EDIT(
         'ERROR - UNABLE TO PROCESS EITHER FILE IN OR FILE OUT')(A);
       SIGNAL ERROR;
       END;
     END; /* SELECT */
   PUT SKIP(2);

   /* FIRST SKIP OVER ANY JCL AT THE FRONT */
   CH=NEXTCH;
   DO WHILE(CH=LOW(1)) UNTIL(CH=HIGH(1));
     CALL PUTCH(CH);
     CH=NEXTCH;
     IF CH^='/'
       THEN LEAVE;
     DO UNTIL(CH=LOW(1) × CH=HIGH(1));
       CALL PUTCH(CH);
       CH=NEXTCH;
       END;
     END;
   /* MAINLINE */
   MAINLINE: DO UNTIL(CH=HIGH(1));
     CALL SKIP_BLANKS;
     DO WHILE(CH='*');
       DO UNTIL(CH=';');
         CALL PUTCH(CH);
         CH=NEXTCH;
         IF CH=HIGH(1)
           THEN LEAVE MAINLINE;
         END;
       CALL PUTCH(CH);
       CH=NEXTCH;
       CALL SKIP_BLANKS;
       END;
     IF CH=HIGH(1)
       THEN LEAVE MAINLINE;
     IF HIT(TITARY)
       THEN CALL DO_TITLE;
       ELSE DO; /* SKIP OVER OTHER STATEMENTS */
         IF CH=HIGH(1)
           THEN LEAVE MAINLINE;
         CALL PUTCH(CH);
         IF CH^=';'
           THEN DO;
             CALL SCAN(SEMIARY); /* LOOK FOR SEMICOLON */
             IF CH=HIGH(1)
               THEN LEAVE MAINLINE;
             CALL PUTCH(CH);
             END;
         CH=NEXTCH;
         END;
     END;
   CALL PUTCH(HIGH(1)); /* DO OUTPUT EOF PROCESSING */

 DO_TITLE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT STATEMENT IS A TITLE OR FOOTNOTE.           *
 *                                                                     *
 **********************************************************************/

   CALL PUTCH(CH); /* PUT E IN TITLE/FOOTNOTE */
   CH=NEXTCH; /* GET NEXT STREAM CHAR */
   IF VERIFY(CH,'123456789')=0
     THEN DO; /* IT IS TITLEN, WHERE N IS NUMERIC */
       CALL PUTCH(CH);
       CH=NEXTCH;
       END;
   CALL SKIP_BLANKS; /* SKIP OVER ANY BLANKS */
   SELECT(CH);
     WHEN('''') DO;
       CALL SKIP_QUOTE; /* SKIP OVER QUOTED TITLE STMT */
       IF CH=HIGH(1)
         THEN RETURN;
       IF CH^=';'
         THEN DO;
           CALL SCAN(SEMIARY); /* FIND SEMICOLON */
           IF CH=HIGH(1)
             THEN RETURN;
           END;
       END;
     WHEN(';') ; /* IT IS NULL TITLE STMT */
     OTHERWISE DO;
       CALL PUTCH(''''); /* INSERT A QUOTE */
       QUOTE=1; /* INDICATE PROCESSING QUOTED STRING */
       INSERT=INSERT+2; /* INDICATE 2 CHARACTERS ADDED TO STREAM */
       DO UNTIL(CH=';');
         CALL PUTCH(CH); /* PUT OUT FIRST TITLE DATA CHAR */
         CH=NEXTCH;
         IF CH=HIGH(1)
           THEN RETURN;
         IF CH=''''
           THEN DO;
             CALL PUTCH(''''); /* DOUBLE UP QUOTES */
             INSERT=INSERT+1;
             END;
         END;
       CALL PUTCH(''''); /* INSERT A QUOTE */
       QUOTE=0; /* NO LONGER PROCESSING QUOTED STRING */
       END;
     END; /* SELECT */
   CALL PUTCH(CH); /* PUT OUT THE SEMICOLON */
   CH=NEXTCH;
   END DO_TITLE;

 HIT: PROC(STR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * HIT IS CALLED TO SEE IF AN OCCURRENCE OF ONE OF THE STRINGS IN      *
 * ARRAY STR STARTS AT THE CURRENT LOCATION.  NEXTCH/PUTCH WILL BE     *
 * UNTIL IT CAN BE IDENTIFIED WHETHER A MATCH HAS BEEN FOUND.          *
 * UPON RETURN, GLOBAL CH WILL CONTAIN THE FINAL CHARACTER IN STR,     *
 * AND PUTCH WILL NOT HAVE BEEN CALLED TO PUT OUT THAT FINAL           *
 * CHARACTER.                                                          *
 *                                                                     *
 * NOTE THAT THE STRINGS IN ARRAY STR MAY NOT HAVE ANY PREFIX WHICH    *
 * MATCHES, E.G. STRINGS 'ABD' AND 'ABE' WOULD NOT WORK CORRECTLY.     *
 *                                                                     *
 **********************************************************************/
   DCL STR(*) CHAR(*) VAR;
   DCL (I,J) FIXED BIN;

   I=1; /* I=INDEX TO CURRENT STR CHAR */
   DO J=1 TO HBOUND(STR,1) UNTIL(I>1);
     IF CH=SUBSTR(STR(J),1,1)
       THEN IF LENGTH(STR(J))=1
         THEN RETURN('1'B); /* FOUND STR */
         ELSE I=2;
     END;
   IF I=1
     THEN RETURN('0'B); /* NO MATCH */
   DO FOREVER=1 REPEAT FOREVER;
     CALL PUTCH(CH);
     CH=NEXTCH;
     IF CH=SUBSTR(STR(J),I,1)
       THEN IF I=LENGTH(STR(J))
         THEN RETURN('1'B); /* FOUND STR */
         ELSE I=I+1;
       ELSE RETURN('0'B); /* NO MATCH */
     END;
   END HIT;

 NEXTCH: PROC RETURNS(CHAR(1));
 /**********************************************************************
 *                                                                     *
 * THIS SUBROUTINE IS CALLED TO GET THE NEXT INPUT CHARACTER.  TWO     *
 * SPECIAL CHARACTERS, LOW(1) AND HIGH(1) ARE ALSO RETURNED TO         *
 * RESPECTIVELY INDICATE THE START OF THE NEW LINE, AND END-OF-FILE.   *
 * THE INPUT FILE MAY BE EITHER "IN" OR "OUT" DEPENDING ON WHAT JCL    *
 * WAS SUPPLIED BY THE USER.                                           *
 *                                                                     *
 **********************************************************************/
   DCL RETCH CHAR(1);
   DCL EOFSW FIXED BIN STATIC INIT(0); /* 1=EOF ON FILE IN */
   DCL INREC CHAR(80) VAR STATIC INIT(''); /* I/O BUFFER */
   DCL POPTR PTR;

   IF STACK^=NULL
     THEN DO;
       RETCH=STACK_CH;
       POPTR=STACK;
       STACK=NEXT;
       FREE POPTR->STACKEL;
       RETURN(RETCH);
       END;
   IF EOFSW=1
     THEN RETURN(HIGH(1)); /* END OF FILE */
   IF LENGTH(INREC)>0
     THEN DO;
       RETCH=SUBSTR(INREC,1,1);
       IF LENGTH(INREC)=1
         THEN INREC='';
         ELSE INREC=SUBSTR(INREC,2);
       RETURN(RETCH);
       END;
   IF MODE=2
     THEN DO; /* IT IS UPDATE PROCESSING OF FILE OUT */
       ON ENDFILE(OUT) GO TO EOF;
       READ FILE(OUT) INTO(INREC);
       END;
     ELSE DO;
       ON ENDFILE(IN) GO TO EOF;
       READ FILE(IN) INTO(INREC);
       END;
   IF LENGTH(INREC)<80
     THEN INREC=INREC××REPEAT(' ',79-LENGTH(INREC));
   RECORD_COUNT=RECORD_COUNT+1;
   IF RECORD_COUNT=1
     THEN IF VERIFY(SUBSTR(INREC,73,8),'0123456789')=0
       THEN SEQSW=1;
   IF SEQSW=1
     THEN DO;
       SEQ=SUBSTR(INREC,73,8);
       INREC=SUBSTR(INREC,1,72);
       END;
   RETURN(LOW(1)); /* INDICATE A NEW LINE */
  EOF:
   EOFSW=1;
   RETURN(HIGH(1)); /* INDICATE END OF FILE */
   END NEXTCH;

 PUSH: PROC(PCH);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PUSH A CHARACTER ON STACK.                                *
 *                                                                     *
 **********************************************************************/
   DCL PCH CHAR;
   DCL PUSHPTR PTR;

   ALLOC STACKEL SET(PUSHPTR);
   PUSHPTR->STACK_CH=PCH;
   PUSHPTR->NEXT=STACK;
   STACK=PUSHPTR;
   END PUSH;

 PUTCH: PROC(PCH);
 /**********************************************************************
 *                                                                     *
 * THIS SUBROUTINE IS CALLED TO PUT OUT THE NEXT OUTPUT CHARACTER,     *
 * PCH.  A REPORT OF CHANGES IS WRITTEN TO FILE SYSPRINT, AND IF THE   *
 * OUT DD STATEMENT WAS SUPPLIED BY THE USER, 80-COLUMN RECORDS WILL   *
 * BE WRITTEN TO THAT FILE.                                            *
 *                                                                     *
 **********************************************************************/
   DCL PCH CHAR(1);
   DCL BLANKS FIXED BIN STATIC INIT(0); /* CONSECUTIVE BLANKS */
   DCL OUTREC CHAR(80) VAR STATIC INIT(''); /* I/O BUFFER */
   DCL ASTERISK CHAR(1) STATIC INIT(' ');

   IF INSERT>0
     THEN ASTERISK='*'; /* LINE IS MODIFIED */
   SELECT;
     WHEN(PCH=' ')
       IF QUOTE=0 & INSERT>0 & BLANKS>0
         THEN DO;
           INSERT=INSERT-1;
           RETURN;
           END;
         ELSE DO;
           BLANKS=BLANKS+1;
           OUTREC=OUTREC××PCH;
           END;
     WHEN(PCH=LOW(1)); /* IT IS NEW LINE */
     WHEN(PCH=HIGH(1)) /* IT IS EOF */
       IF LENGTH(OUTREC)>0
         THEN CALL PUTREC(ASTERISK,OUTREC,BLANKS);
     OTHERWISE DO;
       BLANKS=0;
       OUTREC=OUTREC××PCH;
       END;
     END; /* SELECT */
   IF LENGTH(OUTREC)=80 × (LENGTH(OUTREC)=72 & SEQSW=1)
     THEN CALL PUTREC(ASTERISK,OUTREC,BLANKS);
   END PUTCH;

 PUTREC: PROC(ASTERISK,OUTREC,BLANKS);
 /**********************************************************************
 *                                                                     *
 * PUTREC IS CALLED FROM PUTCH WHICH IT IS TIME TO WRITE A COMPLETED   *
 * OUTPUT RECORD.                                                      *
 *                                                                     *
 **********************************************************************/
   DCL ASTERISK CHAR(1);
   DCL OUTREC CHAR(80) VAR;
   DCL BLANKS FIXED BIN;

   IF QUOTE=0
     THEN BLANKS=1;
   IF LENGTH(OUTREC)<72
     THEN OUTREC=OUTREC××REPEAT(' ',71-LENGTH(OUTREC));
   OUTREC=OUTREC××SEQ;
   PUT SKIP EDIT(ASTERISK,OUTREC)(A,A);
   IF INSERT=0
     THEN ASTERISK=' ';
   SELECT(MODE);
     WHEN(2) REWRITE FILE(OUT) FROM(OUTREC);
     WHEN(3) WRITE FILE(OUT) FROM(OUTREC);
     OTHERWISE;
     END; /* SELECT */
   OUTREC='';
   END PUTREC;

 SCAN: PROC(STR);
 /**********************************************************************
 *                                                                     *
 * SCAN IS CALLED TO LOCATE THE NEXT OCCURRENCE OF ONE OF THE STRINGS  *
 * IN ARRAY STR.  NEXTCH/PUTCH WILL BE INVOKED UNTIL THE SPECIFIED     *
 * STRING IS LOCATED.  QUOTED STRINGS IN THE INPUT STREAM WILL BE      *
 * SKIPPED OVER.  UPON RETURN, GLOBAL CH WILL CONTAIN THE FINAL        *
 * CHARACTER IN STR, AND PUTCH WILL NOT HAVE BEEN CALLED TO PUT OUT    *
 * THAT FINAL CHARACTER.                                               *
 *                                                                     *
 * NOTE THAT THE STRINGS IN ARRAY STR MAY NOT HAVE ANY PREFIX WHICH    *
 * MATCHES, E.G. STRINGS 'ABD' AND 'ABE' WOULD NOT WORK CORRECTLY.     *
 *                                                                     *
 **********************************************************************/
   DCL STR(*) CHAR(*) VAR;
   DCL (I,J) FIXED BIN;

   I=1; /* I=INDEX TO CURRENT STR CHAR */
   DO FOREVER=1 REPEAT FOREVER;
     CH=NEXTCH; /* GET NEXT INPUT STREAM CHAR */
     IF CH=''''
       THEN CALL SKIP_QUOTE;
     IF CH=HIGH(1)
       THEN RETURN; /* END OF FILE */
     IF I=1
       THEN DO J=1 TO HBOUND(STR,1) UNTIL(I>1);
         IF CH=SUBSTR(STR(J),1,1)
           THEN IF LENGTH(STR(J))=1
             THEN RETURN; /* FOUND STR */
             ELSE I=2;
         END;
       ELSE IF CH=SUBSTR(STR(J),I,1)
         THEN IF I=LENGTH(STR(J))
           THEN RETURN; /* FOUND STR */
           ELSE I=I+1;
         ELSE I=1;
     CALL PUTCH(CH);
     END;
   END SCAN;

 SKIP_BLANKS: PROC;
 /**********************************************************************
 *                                                                     *
 * SKIPS OVER A STRING OF BLANKS IN THE INPUT STREAM.                  *
 *                                                                     *
 **********************************************************************/
   DCL LASTCH CHAR(1);

   DO FOREVER=1 REPEAT FOREVER;
     DO WHILE(CH=' ' × CH=LOW(1));
       CALL PUTCH(CH);
       CH=NEXTCH;
       END;
     IF CH='/'
       THEN DO;
         CH=NEXTCH;
         IF CH='*'
           THEN DO; /* IT IS COMMENT */
             CALL PUTCH('/');
             CALL SKIP_COMMENT;
             END;
           ELSE DO;
             CALL PUSH(CH);
             CH='/';
             RETURN;
             END;
         END;
       ELSE RETURN;
     END;
   END SKIP_BLANKS;

 SKIP_COMMENT: PROC;
 /**********************************************************************
 *                                                                     *
 * SKIPS OVER A COMMENT OF FORM SLASH-ASTERISK ASTERISK-SLASH          *
 *                                                                     *
 **********************************************************************/
   DCL LASTCH CHAR(1);

   DO UNTIL(CH=HIGH(1));
     LASTCH=CH;
     CALL PUTCH(CH);
     CH=NEXTCH;
     IF CH='/' & LASTCH='*'
       THEN DO;
         CALL PUTCH(CH);
         CH=NEXTCH;
         RETURN;
         END;
     END;
   END SKIP_COMMENT;

 SKIP_QUOTE: PROC;
 /**********************************************************************
 *                                                                     *
 * SKIPS OVER A QUOTED STRING ENCOUNTERED IN THE INPUT STREAM.         *
 *                                                                     *
 **********************************************************************/

   QUOTE=1;
   CALL PUTCH(CH); /* PUT OUT INITIAL QUOTE */
   LUP: DO FOREVER=1 REPEAT FOREVER;
     CH=NEXTCH;
     IF CH=HIGH(1)
       THEN LEAVE; /* END OF FILE */
     CALL PUTCH(CH);
     IF CH=''''
       THEN DO;
         CH=NEXTCH;
         IF CH^=''''
           THEN LEAVE LUP;
         CALL PUTCH(CH);
         END;
     END;
   QUOTE=0;
   END SKIP_QUOTE;

   END TITLE;
