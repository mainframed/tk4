  /*ABEPOS - COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABEPOS IS CALLED TO PROCESS A SYNTACTICAL UNIT OF THE FORM -        *
 *                                                                     *
 * <LSU> # (<LRANGE>) (<COLSPEC>)                                      *
 *                                                                     *
 * <LRANGE> # (<L1>)(',')(<L2>)(',')(<INCR>)                           *
 *                                                                     *
 * <COLSPEC> # <OFFLEN> × <OFFOFF>                                     *
 *                                                                     *
 * <OFFLEN> # (<OFF>)('.')(<LEN>)('.')(<NCOLS>)                        *
 *                                                                     *
 * <OFFOFF> # (<OFF>)(':')(<OFF>)('.')(<NCOLS>)                        *
 *                                                                     *
 * <L1>,<L2> # <LSPEC> (<SIGN> <COUNT>)                                *
 *                                                                     *
 * <LSPEC> # 'T' × 'B' × 'N' × 'P' × '*' × <LINENO>                    *
 *                                                                     *
 * <SIGN> # '+' × '-'                                                  *
 *                                                                     *
 * <OFF>,<LEN>,<NCOLS>,<COUNT>,<INCR>,<LINENO> # <SPEC>                *
 *                                                                     *
 * <SPEC> # '(' <EXPRESSION> ')' × <INTEGER> × <MARKARY-REF>           *
 *                                                                     *
 * <NAME-REF> # <NAME> × '*' <SIGN> <SPEC>                             *
 *                                                                     *
 * <MARKARY-REF> # <IX> 'M'                                            *
 *                                                                     *
 * <IX> # '0' × '1' × '2' × '3' × '4' × '5' × '6' × '7' × '8' × '9'    *
 *                                                                     *
 * SINCE <SYNTAX> IS NOT LR1, THE ABOVE BNF ISN'T AS DESCRIPTIVE AS    *
 * IT OTHERWISE MIGHT BE.  FOR EXAMPLE, "5. C ABC DEF"                 *
 * MEANS CHANGE ABC TO DEF IN COLUMNS 5 THRU THE END OF EACH RECORD    *
 * IN ALL RECORDS.  THIS IS BECAUSE OF THE CONTEXT IN WHICH THE "5"    *
 * IS FOUND; NAMELY, TO THE LEFT OF THE FIRST COMMA.                   *
 *                                                                     *
 * PARAMETERS SHOULD BE AS FOLLOWS -                                   *
 *                                                                     *
 * CBUF CHAR(*) VAR CONTAINING THE BUFFER FROM WHICH THE SYNTACTICAL   *
 *     UNIT IS TO BE PARSED.                                           *
 * M FIXED BIN(15,0) CONTAINING THE OFFSET OF THE FIRST PARAMETER      *
 *     IN THE SYNTACTICAL UNIT.                                        *
 * N FIXED BIN(15,0) CONTAINING THE OFFSET OF THE FIRST CHARACTER      *
 *     BEYOND THE FIRST CHARACTER.  IF N=0, ABEPOS WILL ASSUME THE     *
 *     FIRST PARAMETER HASN'T BEEN PARSED YET, I.E. PARAMETER OP WILL  *
 *     NOT BE INITIALIZED.                                             *
 * OP CHAR(256) VAR CONTAINING THE FIRST PARAMETER IN THE SYNTACTICAL  *
 *     UNIT, EXTRACTED FROM CBUF AT OFFSET M FOR A LENGTH OF M-N.      *
 * OL FIXED BIN(15,0) CONTAINING THE LENGTH OF OP.                     *
 * LRNPTR PTR CONTAINING THE ADDRESS OF A STRUCTURE DESCRIBED IN       *
 *     MEMBER ABELRN.  THE POSITIONAL PARAMETERS WILL BE STORED IN     *
 *     THIS STRUCTURE AS THEY ARE PARSED OUT.                          *
 *                                                                     *
 * UPON RETURN OF CONTROL, PARAMETER OP WILL CONTAIN THE FIRST OPERAND *
 * FOLLOWING <SYNTACTICAL_UNIT> IN CBUF, OL WILL CONTAIN ITS LENGTH,   *
 * AND M WILL CONTAIN THE OFFSET IN CBUF WHERE IT WAS EXTRACTED, AND   *
 * M-N WILL EQUAL OL.                                                  *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABEPOS) RECURS(YES) PARMS(RHHDRPT,CBUF,M,N,OL,OP,LRNPTR)
   CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABESCAN;
   %INCLUDE ABEREC;
   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   DCL CBUF CHAR(*) VAR;
   DCL (M,N,L,OL,SAVEM,SAVEN,SAVEOL) FIXED BIN(15,0);
   DCL (OP,SAVEOP) CHAR(256) VAR;

   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL CALCEVA ENTRY;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL PSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0))
     RETURNS(FIXED BIN(15,0));

   IF N=0
     THEN CALL #ABEGOP(CBUF,M,N,OL,OP); /* GO GET FIRST TOKEN */

   /* SAVE IN CASE AN ERROR IS ENCOUNTERED */
   CALL SETSAVE;
   RC=0;
   /* GO PROCESS POSITIONALS */
   CALL LRANGE;
   IF RC^=0
     THEN DO;  /* INVALID SYNTAX - RESTORE FROM SAVED VALUES */
       OP=SAVEOP;
       SAVEOL=OL;
       SAVEM=M;
       SAVEN=N;
       END;
   RETURN;

 GET_OPERAND: PROC(PRMPTR) RETURNS(FLOAT DEC(16)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8);
   NAME=PRMPTR->TOKSTR;
   RETURN(#SYMA(RHHDRPT,RH_SYMTREE,NAME));
   END GET_OPERAND;

 GET_OPERAND_CHAR: PROC(PRMPTR) RETURNS(CHAR(256) VAR) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE THE VALUE FOR AN OPERAND REFERENCE.               *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL NAME CHAR(8);
   NAME=PRMPTR->TOKSTR;
   RETURN(#SYMC(RHHDRPT,RH_SYMTREE,NAME));
   END GET_OPERAND_CHAR;

 GETSEQ: PROC(LOFF,PRHPTR,CURPTR) RETURNS(FIXED BIN(31,0)) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE LINE NUMBER OF A LINE OFFSET LOFF LINES FROM   *
 * THE LINE POINTED TO BY CURPTR;                                      *
 *                                                                     *
 **********************************************************************/
   DCL (LOFF,I) FIXED BIN(31,0);
   DCL (PRHPTR,CURPTR) PTR;
   IF PRHPTR=NULL
     THEN RETURN(-1); /* THERE IS NO CURRENT DATA SET */
   IF CURPTR=PRHPTR
     THEN RETURN(-1); /* THERE IS NO CURRENT RECORD */
   SELECT(LOFF);
     WHEN(0); /* NO MOVEMENT */
     WHEN(99999999) CURPTR=PRHPTR->LSTHDR;
     OTHERWISE DO;
       I=LOFF;
       DO UNTIL(CURPTR=PRHPTR);
         SELECT;
           WHEN(I=0) LEAVE;
           WHEN(I>0) DO;
             I=I-1;
             CURPTR=#SUCC(RHHDRPT,PRHPTR,CURPTR);
             END;
           OTHERWISE DO;
             I=I+1;
             CURPTR=#PRED(RHHDRPT,PRHPTR,CURPTR);
             END;
           END; /* SELECT */
         END;
       END;
     END; /* SELECT */
   SELECT;
     WHEN(CURPTR^=PRHPTR) RETURN(CURPTR->RECSEQ);
     WHEN(LOFF>0) RETURN(PRHPTR->LSTHDR->RECSEQ);
     OTHERWISE    RETURN(PRHPTR->NXTHDR->RECSEQ);
     END; /* SELECT */
   END GETSEQ;

 LRANGE: PROC RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO PROCESS <LRANGE> <COLSPEC>.               *
 *                                                                     *
 **********************************************************************/
   DCL ID(11) FIXED BIN(31,0) STATIC
     INIT(0,-2,0,-2,0,   0, -3,0, -3,0,    -1);
       /* L1 , L2 , INCR OFF . LEN . NCOLS EMPTY */
       /*                    :                   */
   DCL DF(7) FIXED BIN(31,0) INIT(0,99999999,1,1,32767,1,-1);
   DCL (IDTOS,DFTTOS,OUTTOS,INTOS) FIXED BIN(15,0) INIT(1);
   DCL (COMMAS,OUT_COUNT) FIXED BIN(15,0) INIT(0);
   DCL IN(2) FIXED BIN(31,0);
   DCL COLON  FIXED BIN(31,0) INIT(-4);
   DCL PERIOD FIXED BIN(31,0) INIT(-3);
   DCL COMMA  FIXED BIN(31,0) INIT(-2);
   DCL EMPTY  FIXED BIN(31,0) INIT(-1);
   DCL OFFOFFSW FIXED BIN INIT(0);

   IF LRN_RHP^=NULL
     THEN DO; /* CHANGE DEFAULTS TO DATASET DEFAULTS */
       IF LRN_RHP->NXTHDR^=LRN_RHP
         THEN DO;
           DF(1)=LRN_RHP->NXTHDR->RECSEQ;
           DF(2)=LRN_RHP->LSTHDR->RECSEQ;
           END;
       DF(4)=LRN_RHP->RH_OFF_DFT;
       DF(5)=LRN_RHP->RH_LEN_DFT;
       DF(6)=LRN_RHP->RH_NCOLS_DFT;
       END;

   ON CONDITION(BADLNGE) BEGIN;
     RC=1; /* INDICATE INVALID LINE RANGE OR COLUMN SPEC */
     GOTO END_LRANGE;
     END;
   IN(1)=GET_IN;
   IF IN(1)=EMPTY
     THEN DO;
       IN(2)=EMPTY;
       LRN_DFT='1'B; /* INDICATE A DEFAULT LSU */
       END;
     ELSE IN(2)=GET_IN;
   DO UNTIL(IN(1)=EMPTY); /* DO UNTIL IN STACK IS EMPTY */
     IF DLM(IN(1)) × IN(1)=EMPTY
       THEN DO; /* IN(1) IS A DELIMITER OR EMPTY */
         DO WHILE(ID(IDTOS)^=IN(1));
           CALL PROC_ID;
           END;
         IF ID(IDTOS)=COMMA
           THEN COMMAS=COMMAS+1;
         CALL POP('IN');
         CALL POP('ID');
         END;
       ELSE DO; /* IN IS A NUMBER */
         IF ^DLM(IN(2))
           THEN CALL PROC_IN;
           ELSE DO; /* IN(1) IS A NUMBER, IN(2) IS A DELIMITER */
             DO WHILE(IN(2)^=ID(IDTOS+1));
               CALL PROC_ID;
               END;
             CALL PROC_IN;
             END;
         END;
     END;
   DO WHILE(DF(DFTTOS)^=EMPTY);
     CALL PROC_ID;
     END;
   IF OFFOFFSW=1
     THEN DO; /* COLUMN RANGE IS SPECIFIED AS COL1:COL2 */
       POSITIONALS(5)=POSITIONALS(5)-POSITIONALS(4)+1;
       IF POSITIONALS(5)<=0
         THEN SIGNAL CONDITION(BADLNGE);
       END;
 END_LRANGE:
   RETURN;

   DLM: PROC(VAL) RETURNS(BIT(1));
   /********************************************************************
   *                                                                   *
   * DLM IS NESTED IN LRANGE, AND IS CALLED TO DETERMINE WHETHER A     *
   * TOKEN IS A DELIMITER, E.G. PERIOD (.), COLON (:), OR COMMA (,).   *
   *                                                                   *
   ********************************************************************/
     DCL VAL FIXED BIN(31,0);
     IF VAL=COLON × VAL=PERIOD × VAL=COMMA
       THEN RETURN('1'B);
       ELSE RETURN('0'B);
     END DLM;

   GET_IN: PROC RETURNS(FIXED BIN(31,0)) RECURSIVE;
   /********************************************************************
   *                                                                   *
   * GET_IN IS NESTED IN LRANGE, AND IS CALLED TO OBTAIN THE NEXT      *
   * VALUE FROM THE INPUT STREAM. THE VALUE RETURNED WILL EITHER BE A  *
   * NUMBER GREATER THAN -1, OR ONE OF THE FOLLOWING:                  *
   *                                                                   *
   *   -3 IF NEXT TOKEN IS A PERIOD (.).                               *
   *   -2 IF NEXT TOKEN IS A COMMA (,).                                *
   *   -1 IF NEXT TOKEN IS <COMMAND-NAME>, I.E. EMPTY.                 *
   *                                                                   *
   * IF THE TOKEN IS A COLON, OFFOFFSW WILL BE TURNED ON, AND A        *
   * -3 (PERIOD) WILL BE RETURNED.                                     *
   *                                                                   *
   ********************************************************************/
     DCL (I,J,SAVESEQ) FIXED BIN(31,0);
     DCL (CURPTR,TPTR) PTR;
     IF OL=0
       THEN RETURN(EMPTY);
     IF OP=':'
       THEN DO;
         CALL #ABEGOP(CBUF,M,N,OL,OP);
         OFFOFFSW=1;
         RETURN(PERIOD);
         END;
     IF OP='.'
       THEN DO;
         CALL #ABEGOP(CBUF,M,N,OL,OP);
         RETURN(PERIOD);
         END;
     IF OP=','
       THEN DO;
         CALL #ABEGOP(CBUF,M,N,OL,OP);
         RETURN(COMMA);
         END;
     IF LRN_RHP=NULL
       THEN CURPTR,TPTR=NULL;
       ELSE CURPTR,TPTR=LRN_RHP->RECPTR;
     /* FIRST TRY FOR NUMBER OR EXPRESSION OR MARK ARRAY REFERENCE */
     CALL SPEC(OP,I,J); /* TRY FOR IN=NUMBER */
     IF I>=0
       THEN DO; /* IT IS NUMBER */
         IF J<=OL
           THEN IF LRN_RHP=NULL
             THEN I=-1;
             ELSE DO;
               SAVESEQ=LRN_RHP->CURSEQ;
               CALL #MD(LRN_RHP,RHHDRPT,I);
               TPTR=LRN_RHP->RECPTR;
               I=LRN_RHP->CURSEQ;
               CALL #MD(LRN_RHP,RHHDRPT,SAVESEQ);
               IF J^=OL
                 THEN CALL GET_IN_TEST(I,J,TPTR);
               END;
         END;
       ELSE DO; /* IT IS NOT NUMBER */
         CALL GET_IN_NON(I,CURPTR,TPTR);
         IF OL>1 & I>=0
           THEN CALL GET_IN_TEST(I,2,TPTR);
         END;
     IF I>=0
       THEN CALL #ABEGOP(CBUF,M,N,OL,OP);
     RETURN(I);
     END GET_IN;

   GET_IN_NON: PROC(I,CURPTR,TPTR) RECURSIVE;
   /********************************************************************
   *                                                                   *
   * GET_IN_NON IS NESTED IN PROC LRANGE, AND IS CALLED FROM GET_IN    *
   * WHEN IT IS DETERMINED THAT THE <LSPEC> IN OP IS NOT NUMERIC.      *
   * IF <LSPEC> CAN BE PROCESSED, VARIABLE I WILL BE                   *
   * SET TO THE APPROPRIATE LINE NUMBER.  OTHERWISE, I WILL BE SET     *
   * NEGATIVE.  IF VARIABLE I IS SET NON-NEGATIVE, TPTR WILL BE SET    *
   * TO THE RECPTR CORRESPONDING TO THE SEQUENCE NUMBER SET IN         *
   * VARIABLE I.                                                       *
   *                                                                   *
   ********************************************************************/
     DCL (I,J) FIXED BIN(31,0);
     DCL (CURPTR,TPTR) PTR;

     SELECT(SUBSTR(OP,1,1));
       WHEN('*') I=GETSEQ(0,LRN_RHP,CURPTR);
       WHEN('T') IF LRN_RHP=NULL
         THEN I=0;
         ELSE IF LRN_RHP->NXTHDR=LRN_RHP
           THEN I=0;
           ELSE DO;
             TPTR=LRN_RHP->NXTHDR;
             I=TPTR->RECSEQ;
             END;
       WHEN('B') IF LRN_RHP=NULL
         THEN I=0;
         ELSE IF LRN_RHP->LSTHDR=LRN_RHP
           THEN I=0;
           ELSE DO;
             TPTR=LRN_RHP->LSTHDR;
             I=TPTR->RECSEQ;
             END;
       WHEN('N') IF CURPTR=NULL
         THEN I=0;
         ELSE IF CURPTR->NXTPTR=LRN_RHP
           THEN I=0;
           ELSE DO;
             TPTR=CURPTR->NXTPTR;
             I=TPTR->RECSEQ;
             END;
       WHEN('P') IF CURPTR=NULL
         THEN I=0;
         ELSE IF CURPTR->LSTPTR=LRN_RHP
           THEN I=0;
           ELSE DO;
             TPTR=CURPTR->LSTPTR;
             I=TPTR->RECSEQ;
             END;
       OTHERWISE I=-1;
       END; /* SELECT */
   END GET_IN_NON;

   GET_IN_TEST: PROC(I,OF,TPTR) RECURSIVE;
   /********************************************************************
   *                                                                   *
   * GET_IN_TEST IS CALLED WHEN OP IS TO BE TESTED FOR THE FORM        *
   * <LSPEC> (<SIGN> <COUNT>).  OF WILL CONTAIN THE OFFSET WITHIN OP   *
   * OF THE FIRST CHARACTER BEYOND <LSPEC>.  IF THE FORM DOESN'T       *
   * MATCH, I WILL BE SET TO -1.  OTHERWISE, I WILL BE SET TO THE      *
   * SEQUENCE NUMBER OF THE RECORD <COUNT> RECORDS FROM THE RECORD     *
   * POINTED TO BY TPTR, OR LEFT ALONE DEPENDING ON OPTIONAL PART.     *
   *                                                                   *
   ********************************************************************/
     DCL (I,J,OF) FIXED BIN(31,0);
     DCL TPTR PTR;

     IF OF<=LENGTH(OP)
       THEN SELECT(SUBSTR(OP,OF,1));
         WHEN('+','-') DO;
           IF I>=0
             THEN IF OL>1
               THEN DO;
                 IF VERIFY(SUBSTR(OP,OF+1),'0123456789')^=0
                   THEN I=-1;
                   ELSE DO;
                     J=SUBSTR(OP,OF+1);
                     SELECT(SUBSTR(OP,OF,1));
                       WHEN('+') I=GETSEQ(J,LRN_RHP,TPTR);
                       WHEN('-') I=GETSEQ(-J,LRN_RHP,TPTR);
                       OTHERWISE I=-1;
                       END; /* SELECT */
                     END;
                 END;
           END;
         OTHERWISE I=-1; /* NO POSITIONAL */
         END; /* SELECT */
     END GET_IN_TEST;

   POP: PROC(STK);
   /********************************************************************
   *                                                                   *
   * POP IS NESTED IN LRANGE, AND IS CALLED TO POP THE TOP ELEMENT     *
   * FROM THE SPECIFIED STACK.                                         *
   *                                                                   *
   ********************************************************************/
     DCL STK CHAR(2);
     SELECT(STK);
       WHEN('DF') DFTTOS=DFTTOS+1;
       WHEN('ID') IDTOS=IDTOS+1;
       OTHERWISE DO; /* IT MUST BE IN */
         IN(1)=IN(2);
         IN(2)=GET_IN;
         END;
       END; /* SELECT */
     END POP;

   POPPUSH: PROC(STK);
   /********************************************************************
   *                                                                   *
   * POPPUSH IS NESTED IN LRANGE, AND IS CALLED TO POP AN ELEMENT OFF  *
   * A GIVEN STACK, AND TO PUSH THE POPPED VALUE ONTO THE OUTPUT       *
   * STACK.                                                            *
   *                                                                   *
   ********************************************************************/
     DCL STK CHAR(2);
     IF OUTTOS>HBOUND(POSITIONALS,1)
       THEN SIGNAL CONDITION(BADLNGE);
     SELECT(STK);
       WHEN('DF') POSITIONALS(OUTTOS)=DF(DFTTOS);
       WHEN('ID') POSITIONALS(OUTTOS)=ID(IDTOS);
       OTHERWISE POSITIONALS(OUTTOS)=IN(1);
       END; /* SELECT */
     CALL POP(STK);
     OUT_COUNT=OUT_COUNT+1;
     OUTTOS=OUTTOS+1;
     CALL SETSAVE; /* SAVE VALID PARAMETER POINT */
     END POPPUSH;

   PROC_ID: PROC;
   /********************************************************************
   *                                                                   *
   * PROC_ID IS NESTED IN LRANGE, AND IS CALLED WHEN A VALUE IS        *
   * OMITTED FROM THE INPUT STREAM, AND THE DEFAULT MUST BE PUSHED ON  *
   * TO THE OUTPUT STACK.                                              *
   *                                                                   *
   ********************************************************************/
     IF ^DLM(ID(IDTOS))
       THEN CALL POPPUSH('DF');
     CALL POP('ID');
     RETURN;
     END PROC_ID;

   PROC_IN: PROC;
   /********************************************************************
   *                                                                   *
   * PROC_IN IS NESTED IN LRANGE, AND IS CALLED WHEN A VALUE ON TOP    *
   * OF THE INPUT STACK IS TO BE PUSHED ON TO THE OUTPUT STACK.        *
   *                                                                   *
   ********************************************************************/
     IF OUT_COUNT=2 & COMMAS<2
       THEN DO;
         IF DLM(ID(IDTOS))
           THEN CALL POP('ID');
         CALL PROC_ID;
         END;
     CALL POPPUSH('IN');
     IF DLM(ID(IDTOS))
       THEN CALL POP('ID');
     CALL POP('DF');
     CALL POP('ID');
     IF OUT_COUNT=1
       THEN DF(DFTTOS)=POSITIONALS(OUTTOS-1);
     RETURN;
     END PROC_IN;

   END LRANGE;

 MYTERM: PROC(MSG);
 /**********************************************************************
 *                                                                     *
 * CALLED BY CALCEVA WITH A MESSAGE IS AN EXPRESSION IS IN ERROR.      *
 *                                                                     *
 **********************************************************************/
   DCL MSG CHAR(*) VAR;
   RC=1; /* INDICATE SYNTACTICAL ERROR */
   END MYTERM;

 ODD_FUNCTION: PROC(MSG,PRMPTR,PARMCNT,OP) RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO RESOLVE UNIDENTIFIED FUNCTIONS.                           *
 *                                                                     *
 **********************************************************************/
   DCL MSG CHAR(80) VAR;
   DCL PRMPTR PTR;
   DCL PARMCNT FIXED BIN(15,0);
   DCL OP(*) DEC FLOAT(16);
   DCL VALUE DEC FLOAT(16);
   MSG='UNIDENTIFIED FUNCTION = '××PRMSTR;
   SIGNAL CONDITION(BADEXP);
   RETURN(0);
   END ODD_FUNCTION;

 PUT_OPERAND: PROC(PRMPTR,VALUE,MSG);
 /**********************************************************************
 *                                                                     *
 * CALLED TO ASSIGN A VALUE TO A VARIABLE.                             *
 *                                                                     *
 **********************************************************************/
   DCL PRMPTR PTR;
   DCL VALUE FLOAT DEC(16);
   DCL (MSG,TXT) CHAR(80) VAR;
   CALL #SETA(RHHDRPT,RH_SYMTREE,PRMPTR->TOKSTR,VALUE);
   IF PRMPTR->TOKSTR='RESULT'
     THEN RET=VALUE;
   END PUT_OPERAND;

 SPEC: PROC(OP,I,J);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A POSITIONAL OPERAND.  MUST BE ONE OF THE         *
 * FOLLOWING:  '(' <EXPRESSION> ')' × <INTEGER> × <MARKARY-REF> ...    *
 * I WILL BE SET TO -1 IF NO MATCH, AND OTHERWISE WILL BE SET TO       *
 * THE EVALUATION OF <EXPRESSION> OR <INTEGER> OR <MARKARY_REF>.       *
 * J WILL BE SET TO THE OFFSET IN OP TO THE FIRST BYTE BEYOND WHAT IS  *
 * MATCHED.                                                            *
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(*) VAR;
   DCL (I,J) FIXED BIN(31,0);
   SELECT;
     WHEN(LENGTH(OP)=0)
       I=-1;
     WHEN(SUBSTR(OP,1,1)='(')
       CALL SPEC_EXPR(OP,I,J); /* IT IS '(' <EXPRESSION> ')' */
     WHEN(SPEC_MARK(OP,I,J));
     WHEN(SPEC_INTEGER(OP,I,J));
     OTHERWISE I=-1;
     END; /* SELECT */
   END SPEC;

 SPEC_EXPR: PROC(OP,I,J);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A POSITIONAL OPERAND OF THE FORM                  *
 * '(' <EXPRESSION> ')'                                                *
 *                                                                     *
 **********************************************************************/
   DCL (OP,MYOP) CHAR(256) VAR;
   DCL (I,J,K,L) FIXED BIN(31,0);
   DCL KEYWORDS(1) CHAR(12) VAR STATIC INIT('');

   J=PSTR(OP,1); /* FIND CLOSING PAREN */
   IF J=0
     THEN I=-1;
     ELSE DO;
       MYOP=SUBSTR(OP,J);
       J=J+1;
       TOKHDR=NULL;
       CALL #CALCEVA(PROMPT,MYTERM,GET_OPERAND,GET_OPERAND_CHAR,
         PUT_OPERAND,ODD_FUNCTION);
       IF RC^=0
         THEN I=-1; /* THERE WAS AN ERROR IN THE EXPRESSION */
       RC=0;
       END;
   PROMPT: PROC RETURNS(CHAR(256) VAR);
   /********************************************************************
   *                                                                   *
   * NESTED WITHIN SPEC_EXPR.                                          *
   * CALLED BY #CALCEVA TO OBTAIN THE EXPRESSION TO BE EVALUATED.      *
   *                                                                   *
   ********************************************************************/
     DCL PRMPT CHAR(80) VAR STATIC INIT('CALC:');
     DCL INP CHAR(256) VAR;
     IF MYOP='END'
       THEN INP=MYOP;
       ELSE INP='RESULT#'××MYOP;
     MYOP='END';
     RETURN(INP);
     END PROMPT;
   END SPEC_EXPR;

 SPEC_INTEGER: PROC(OP,I,J) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED TO TEST FOR <INTEGER>.                                       *
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(256) VAR;
   DCL (I,J) FIXED BIN(31,0);

   J=VERIFY(OP,'0123456789');
   IF J=0
     THEN J=LENGTH(OP)+1;
   IF J=1
     THEN I=-1;
     ELSE I=SUBSTR(OP,1,J-1);
   RETURN(J^=1);
   END SPEC_INTEGER;

 SPEC_MARK: PROC(OP,I,J) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A POSITIONAL OPERAND.  MUST BE ONE OF THE         *
 * FOLLOWING:  '(' <EXPRESSION> ')' × <INTEGER> × <MARKARY-REF>        *
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(256) VAR;
   DCL (I,J) FIXED BIN(31,0);
   SELECT;
     WHEN(LENGTH(OP)<2) I=-1;
     WHEN(SUBSTR(OP,2,1)^='M') I=-1;
     WHEN(VERIFY(SUBSTR(OP,1,1),'0123456789')^=0) I=-1;
     WHEN(LRN_RHP=NULL) I=-1; /* NO MARKARY AVAILABLE */
     OTHERWISE DO;
       I=SUBSTR(OP,1,1);
       IF I=0
         THEN I=LRN_RHP->CURSOR_SEQ;
         ELSE I=LRN_RHP->MARKARY(I);
       J=3;
       END;
     END; /* SELECT */
   RETURN(I^=-1);
   END SPEC_MARK;

 SETSAVE: PROC;
 /**********************************************************************
 *                                                                     *
 * SETSAVE IS CALLED TO UPDATE THE SAVE POINT - THE POINT AT WHICH A   *
 * TOKEN IS ENCOUNTERED THAT IS NOT A VALID POSITIONAL PARAMETER.      *
 *                                                                     *
 **********************************************************************/
   SAVEOP=OP;
   SAVEOL=OL;
   SAVEM=M;
   SAVEN=N;
   END SETSAVE;

   END ABEPOS;
