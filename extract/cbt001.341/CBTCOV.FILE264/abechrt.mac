   %INCLUDE ABESUB;
 ABESUB(ABECHRT) PARS(1) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;

   DCL (PREFIX,SUFFIX) ENTRY RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL (DATE,REPEAT,TIME) BUILTIN;
   DCL SPELDTE ENTRY(CHAR(6)) RETURNS(CHAR(40) VARYING);
   DCL DATESTR CHAR(45);

   DCL (ORGPTR,TRH) PTR;
   DCL 1 SPARY BASED(SPTR),
     2 SPCNT FIXED BIN,
     2 SPSUB(ROWS REFER(SPCNT)),
      3 LEFT  DEC FLOAT(16),
      3 RIGHT DEC FLOAT(16);
   DCL (AVA,BOX_HALF_WIDTH,BOX_HEIGHT,BOX_WIDTH,CB_HEIGHT,CB_WIDTH,
     GRID_HEIGHT,GRID_WIDTH,MARGIN_HEIGHT,MARGIN_WIDTH)
     DEC FLOAT(16);

   YES=1;
   NO=0;
   AVA=100;
   SPTR=NULL;
   ON CONDITION(BADCHRT) GO TO CHARTERR;
   GOTO BYERR;
 CHARTERR:;
   IF MSGDATA=''
     THEN MSGDATA='PGM ABECHRT FAILED';
   RHRC=8;
   RETURN;
 BYERR:;

   I=#CMD('GDDM GSLSS 2 ''ADMUVCRP'' 194',RHPTR,RHHDRPT);
   I=#CMD('GDDM GSCS 194',RHPTR,RHHDRPT);
   I=#CMD('GDDM GSCM 3',RHPTR,RHHDRPT);
   IF PARY(1)^=''
     THEN DO; /* DATE/TIME STAMP BEING REQUESTED */
       I=#CMD('GDDM GSCHAR 0 95 45 '××'''DATE='××SPELDTE(DATE)××
         REPEAT(' ',45)××'''',RHPTR,RHHDRPT);
       I=#CMD('R GDDM GSCHAR 0 92 20 ''TIME=&SYSTIME              ''',
         RHPTR,RHHDRPT);
       END;

   /* ROWS WILL BE NUMBER OF ROWS ON DISPLAY */
   /* COLUMNS WILL BE NUMBER OF COLUMNS ON DISPLAY */
   /* MAXSTR WILL BE MAXIUMUM SIZE STRING ON DISPLAY */
   ROWS,COLUMNS,MAXSTR=0;
   CALL #ABELSP(RHHDRPT,LRNPTR);
   IF LRN_BUFP=NULL
     THEN SIGNAL CONDITION(BADCHRT);
   IF PREFIX(LSPBUF,' ')^=1
     THEN SIGNAL CONDITION(BADCHRT);
   LSPBUF=SUBSTR(LSPBUF,1,MIN(LENGTH(LSPBUF),72));
   TRH=RHPTR;
   I=#CMD('ABE '''' LO SUPPORT RECSIZE(80)',TRH,RHHDRPT);
   CALL RECURS(1);
   IF SPTR^=NULL
     THEN FREE SPTR->SPARY;
   I=#CMD('%%'××TRH->RHNAME,RHPTR,RHHDRPT);
   I=#CMD('END N',TRH,RHHDRPT);

 BOX: PROC(LEVEL,TEXT,POS,TERMINAL);
   DCL LEVEL FIXED BIN;
   DCL TEXT CHAR(*) VAR;
   DCL POS DEC FLOAT(16);
   DCL TERMINAL FIXED BIN;
   DCL (X1,X2,X3,Y1,Y2,Y3) DEC FLOAT(16);
   DCL (CX1,CX2,CX3,CY1,CY2,CY3) CHAR(80) VAR;

   /* FIRST DRAW BOX */
   X1=POS+MARGIN_WIDTH; CX1=' '××CALCPRT(X1);
   Y1=100-LEVEL*GRID_HEIGHT+MARGIN_HEIGHT; CY1=' '××CALCPRT(Y1);
   X2=X1+BOX_WIDTH; CX2=' '××CALCPRT(X2);
   Y2=Y1+BOX_HEIGHT; CY2=' '××CALCPRT(Y2);
   I=#CMD('NL GDDM GSMOVE'××CX1××CY1,TRH,RHHDRPT);
   I=#CMD('NL GDDM GSLINE'××CX2××CY1,TRH,RHHDRPT);
   I=#CMD('NL GDDM GSLINE'××CX2××CY2,TRH,RHHDRPT);
   I=#CMD('NL GDDM GSLINE'××CX1××CY2,TRH,RHHDRPT);
   I=#CMD('NL GDDM GSLINE'××CX1××CY1,TRH,RHHDRPT);
   X3=X1+(X2-X1)/2; CX3=' '××CALCPRT(X3);
   IF LEVEL^=1
     THEN DO;  /* NOW DRAW STEM ON TOP */
       I=#CMD('NL GDDM GSMOVE'××CX3××CY2,TRH,RHHDRPT);
       Y3=Y2+MARGIN_HEIGHT; CY3=' '××CALCPRT(Y3);
       I=#CMD('NL GDDM GSLINE'××CX3××CY3,TRH,RHHDRPT);
       END;
   IF RIGHT(LEVEL)=-1
     THEN RIGHT(LEVEL)=X3;
   LEFT(LEVEL)=X3;
   IF TERMINAL^=1
     THEN DO; /* NOW DRAW STEM ON BOTTOM */
       I=#CMD('NL GDDM GSMOVE'××CX3××CY1,TRH,RHHDRPT);
       Y3=Y1-MARGIN_HEIGHT; CY3=' '××CALCPRT(Y3);
       I=#CMD('NL GDDM GSLINE'××CX3××CY3,TRH,RHHDRPT);
       I=#CMD('NL GDDM GSMOVE '××CALCPRT(LEFT(LEVEL+1))
         ××CY3,TRH,RHHDRPT);
       I=#CMD('NL GDDM GSLINE '××CALCPRT(RIGHT(LEVEL+1))
         ××CY3,TRH,RHHDRPT);
       END;
   /* NOW PUT TEXT IN BOX */
   IF VERTICAL_TEXT=YES
     THEN DO;
       X3=X1+(BOX_WIDTH-CB_WIDTH)/2; CX3=' '××CALCPRT(X3);
       Y3=Y2-(BOX_HEIGHT-CB_HEIGHT*LENGTH(TEXT))/2;
         CY3=' '××CALCPRT(Y3);
       END;
     ELSE DO;
       X3=X1+(BOX_WIDTH-CB_WIDTH*LENGTH(TEXT))/2; CX3=' '××CALCPRT(X3);
       Y3=Y1+(BOX_HEIGHT-CB_HEIGHT)/2; CY3=' '××CALCPRT(Y3);
       END;
   I=#CMD('NL GDDM GSCHAR'××CX3××CY3××' '××CALCPRT(LENGTH(TEXT))××
     ' '''××TEXT××'''',TRH,RHHDRPT);
   END BOX;

 RECURS: PROC(LEVEL) RECURSIVE;
   DCL LEVEL FIXED BIN;
   DCL (I,J,K,TERMINAL) FIXED BIN;
   DCL TEXT CHAR(80) VAR;

   TERMINAL=1; /* ASSUME CURRENT IS TERMINAL */
   ROWS=MAX(ROWS,LEVEL);
   J=SUFFIX(LSPBUF,' ');
   K=J-LEVEL+1;
   MAXSTR=MAX(MAXSTR,K);
   TEXT=SUBSTR(LSPBUF,LEVEL,K);
   CALL #ABELSP(RHHDRPT,LRNPTR); /* GET NEXT NODE */
   IF LRN_BUFP=NULL
     THEN CALL SET;
     ELSE DO;
       LSPBUF=SUBSTR(LSPBUF,1,MIN(LENGTH(LSPBUF),72));
       I=PREFIX(LSPBUF,' '); /* GET LEVEL FOR NEXT NODE */
       IF I<=LEVEL
         THEN COLUMNS=COLUMNS+1; /* CURRENT IS A TERMINAL NODE */
         ELSE TERMINAL=0;
       CALL RECURS(I);
       END;
   /* TIME TO PRINT OUT THIS NODE */
   IF TERMINAL=1
     THEN DO;
       AVA=AVA-GRID_WIDTH;
       CALL BOX(LEVEL,TEXT,AVA,TERMINAL);
       END;
     ELSE DO;
       CALL BOX(LEVEL,TEXT,
         LEFT(LEVEL+1)+(RIGHT(LEVEL+1)-LEFT(LEVEL+1)-GRID_WIDTH)/2,
         TERMINAL);
       RIGHT(LEVEL+1)=-1;
       END;
   END RECURS;

 SET: PROC;
   DCL I FIXED BIN;
   DCL FACTOR DEC FLOAT(16) STATIC INIT(.95);
   DCL CHAR_FACTOR DEC FLOAT(16) STATIC INIT(.9);

   COLUMNS=COLUMNS+1;
   ALLOCATE SPARY;
   DO I=1 TO ROWS;
     RIGHT(I)=-1.0;
     END;
   GRID_WIDTH=100.0/FLOAT(COLUMNS);
   GRID_HEIGHT=100.0/FLOAT(ROWS);
   BOX_WIDTH=FACTOR*GRID_WIDTH;
   CB_WIDTH=CHAR_FACTOR*BOX_WIDTH/MAXSTR; /* CHAR BOX WIDTH */
   IF CB_WIDTH<=1 & (GRID_HEIGHT>GRID_WIDTH)
     THEN DO;
       VERTICAL_TEXT=YES; /* PRINT VERTICALLY */
       BOX_HEIGHT=FACTOR*GRID_HEIGHT;
       CB_HEIGHT=CHAR_FACTOR*BOX_HEIGHT/MAXSTR;
       CB_WIDTH=CB_HEIGHT/2;
       BOX_WIDTH=MIN(FACTOR*GRID_WIDTH,CB_WIDTH/CHAR_FACTOR);
       END;
     ELSE DO;
       VERTICAL_TEXT=NO; /* PRINT HORIZONTALLY */
       BOX_HEIGHT=MIN(FACTOR*GRID_HEIGHT,2*CB_WIDTH/FACTOR);
       CB_HEIGHT=CHAR_FACTOR*BOX_HEIGHT; /* CHAR BOX HEIGHT */
       END;
   MARGIN_HEIGHT=(GRID_HEIGHT-BOX_HEIGHT)/2;
   MARGIN_WIDTH=(GRID_WIDTH-BOX_WIDTH)/2;
   BOX_HALF_WIDTH=BOX_WIDTH/2;
   I=#CMD('NL GDDM GSCB '××CALCPRT(CB_WIDTH)××' '××CALCPRT(CB_HEIGHT)
     ,TRH,RHHDRPT);
   IF VERTICAL_TEXT=YES
     THEN I=#CMD('NL GDDM GSCD 2',TRH,RHHDRPT);
   END SET;

   END ABECHRT;
