  /*ABECMD - COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /**********************************************************************
 *                                                                     *
 * ABECMD IS CALLED TO PROCESS A COMMAND BUFFER.  THE SYNTAX OF THIS   *
 * BUFFER IS DEFINED AS FOLLOWS:                                       *
 *                                                                     *
 * <SYNTAX> # <COMMAND> ×                                              *
 *            <SPCHAR> <1, <COMMAND> / <SPCHAR>>                       *
 *                                                                     *
 * <COMMAND> # (<PREFIX>) (<LSU>) <COMMAND-NAME> ETC.                  *
 *                                                                     *
 * <PREFIX> # 'A' <NAME-REF> × 'ALL'                                   *
 *                                                                     *
 * <LSU> # SEE SOURCE FOR ABEPOS.                                      *
 *                                                                     *
 * <NAME-REF> # <NAME> × '*' <SIGN> <INTEGER>                          *
 *                                                                     *
 * ABECMD WILL PARSE THE COMMAND BUFFER, AND WILL INVOKE THE           *
 * APPROPRIATE SUBCOMMAND.  THE RETURN CODE FROM THE SUBCOMMAND WILL   *
 * BE RETURNED.                                                        *
 *                                                                     *
 * FOR <COMMAND-NAME> -                                                *
 *   - IF FIRST CHARACTER IS A SINGLE QUOTE, MAKE IT AN LSP SUBCOMMAND *
 *   - IF FIRST CHARACTER IS A SINGLE PERCENT (%) MAKE IT A CLIST SUB  *
 *   - IF FIRST TWO CHARACTERS ARE PERCENTS (%%) MAKE IT A RUN SUBCMD  *
 *                                                                     *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABECMD) RECURS(YES) PARMS(CBUF,RHPTR,RHHDRPT)
     RETURNS(FIXED BIN(15,0))  CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABESCAN;
   DCL 1 LRN_STRUCTURE,
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   %INCLUDE ABERHPNL;

   DCL CBUF CHAR(*) VAR;
   DCL ABEB ENTRY(CHAR(8),CHAR(*) VAR,PTR,PTR,PTR)
     RETURNS(FIXED BIN(15,0));
   DCL ABEAP ENTRY(PTR);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL DLMNEXT ENTRY(CHAR(*) VAR, FIXED BIN(15,0), FIXED BIN(15,0));
   DCL STR CHAR(1024) VAR;
   DCL (SAVE_RH_STACK,SAVE_RH_QUEUE) PTR;

   DCL (M,N,L,OL) FIXED BIN(15,0);
   DCL (DUM,SAVENXT) PTR;
   DCL OP CHAR(256) VAR;
   DCL AM CHAR(80) VAR STATIC INIT(
 '.($*,%?''=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567
 89'
   );
   DCL SPCHAR CHAR(1);
   DCL RET FIXED BIN(31,0); /* USED GLOBALLY IN THIS PROCEDURE */
   DCL TRH PTR;

   IF LENGTH(CBUF)=0 × CBUF=''
     THEN RETURN(0);
   CBUF=SUBSTR(CBUF,PREFIX(CBUF,' ')); /* GET RID OF LEADING BLANKS */
   IF LENGTH(CBUF)=0 × CBUF=''
     THEN RETURN(0);
   /* NOW CONFIRM DATASET STILL EXISTS */
   IF RHPTR^=NULL
     THEN DO;
       DO TRH=NXTRHEL REPEAT TRH->RHNXT
         WHILE(TRH^=NULL) UNTIL(TRH=RHPTR);
         END;
       IF TRH=NULL
         THEN RETURN(0);
       END;
   IF CBUF='=' × CBUF='=F' × CBUF='=B'
     THEN IF RHPTR^=NULL
       THEN RETURN(#CMD(SUBSTR(RHPTR->LASTCMD,1),RHPTR,RHHDRPT));

   LRN_BUFP,LRN_ORGPTR=NULL;
   RC=0; /* RC WILL CONTAIN RETURN CODE */
   LRN_RHP,RHPTR=RHP_LOC(RHPTR);
   L=LENGTH(CBUF);

   SAVE_RH_STACK=RH_STACK;
   SAVE_RH_QUEUE=RH_QUEUE;
   RH_STACK,RH_QUEUE=NULL;
   /* DETERMINE IF IT IS A STRING OF COMMANDS AND PROCESS IF SO */
   SPCHAR=SUBSTR(CBUF,1,1);
   IF VERIFY(SPCHAR,AM)^=0
     THEN DO; /* IT IS STRING OF COMMANDS */
       I=LENGTH(CBUF);
       IF SUBSTR(CBUF,I,1)^=SPCHAR
         THEN I=I+1;
       DO WHILE(I>1);
         DO J=I-1 TO 1 BY -1
           UNTIL(SUBSTR(CBUF,J,1)=SPCHAR);
           END;
         CALL #PUSHLIFO(RHPTR,RH_STACK,RH_QUEUE,SUBSTR(CBUF,J+1,I-J-1));
         I=J;
         END;
       END;
     ELSE DO; /* IT IS SINGLE COMMAND TO BE PROCESSED DIRECTLY */
       IF ^DO_PREFIX  /* GO PROCESS PREFIX - CHECK FOR A OR ALL */
         THEN DO;
           IF RC>RHRCLIM
             THEN LEAVE; /* SOMETHING BAD HAPPENED */
           CALL DO_POSIT; /* GO PROCESS POSITIONAL PARAMETERS */
           IF RC>RHRCLIM
             THEN LEAVE; /* SOMETHING BAD HAPPENED */
           CALL DO_SUBCMD; /* GO EXECUTE SUBCOMMAND */
           IF RC>RHRCLIM
             THEN LEAVE; /* SOMETHING BAD HAPPENED */
           CALL DO_CMDDATA(RHPTR); /* PROCESS CMDDATA */
           IF RHPTR^=LRN_RHP
             THEN CALL DO_CMDDATA(LRN_RHP);
           END;
       CALL SETLAST; /* GO PROCESS LASTCMD */
       CALL RCTEST;
       END;
   DO WHILE(RH_STACK^=NULL);
     CALL #POP(RHPTR,RH_STACK,RH_QUEUE,STR);
     IF RHPTR^=NULL
       THEN RC=ABECMD(STR,RHPTR,RHHDRPT); /* PROCESS SUBCOMMAND */
     END;
   RH_STACK=SAVE_RH_STACK;
   RH_QUEUE=SAVE_RH_QUEUE;
   RETURN(RC);

 DO_CMDDATA: PROC(PRH) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS THE CMDDATA FIELD.                                *
 *                                                                     *
 **********************************************************************/
   DCL (PRH,IRH) PTR;
   DCL CMD CHAR(1024) VAR;

   PRH=RHP_LOC(PRH);
   IF PRH=NULL
     THEN RETURN;
   IF PRH->CMDDATA=''
     THEN RETURN;
   CMD=PRH->CMDDATA;
   PRH->CMDDATA='';
   IRH=PRH;
   RC=#CMD(CMD,PRH,RHHDRPT);
   IF IRH^=PRH
     THEN CALL DO_CMDDATA(PRH);
   END DO_CMDDATA;

 DO_POSIT: PROC RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * DO_POSIT IS CALLED TO PROCESS THE POSITIONAL PARAMETERS             *
 * <LRANGE> AND <COLSPEC>.                                             *
 *                                                                     *
 **********************************************************************/
   RH_L1=0; /* <L1> DEFAULT */
   RH_L2=99999999; /* <L2> DEFAULT */
   RH_INCR=1; /* <INCR> DEFAULT */
   IF LRN_RHP=NULL
     THEN DO; /* SET VERY FIRST INITIAL DEFAULTS */
       RH_OFF=1;     /* DEFAULT <OFF> */
       RH_LEN=32767; /* DEFAULT <LEN> */
       RH_NCOLS=1;     /* DEFAULT <NCOLS> */
       END;
     ELSE DO;
       RH_OFF=RH_OFF_DFT;
       RH_LEN=RH_LEN_DFT;
       RH_NCOLS=RH_NCOLS_DFT;
       END;

   /* NOW PROCESS <LRANGE> <COLSPEC> */
   CALL #ABEPOS(RHHDRPT,CBUF,M,N,OL,OP,ADDR(LRN_STRUCTURE));
   END DO_POSIT;

 DO_PREFIX: PROC RECURSIVE RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * DO_PREFIX IS CALLED TO PROCESS <PREFIX>.                            *
 *                                                                     *
 **********************************************************************/
   DCL (WRK,SAVENXT,ALLSTACK) PTR;
   DCL 1 STACK_ELEM BASED(SELPTR),
     2 NEL PTR,
     2 RHEL PTR;

   N=0; /* INDEX TO NEXT AVAILABLE CHARACTER - USED GLOBALLY */
   CALL #ABEGOP(CBUF,M,N,OL,OP); /* GET NEXT OPERAND IN GLOBAL OP */
   IF OP='ALL'
     THEN DO; /* APPLY COMMAND TO ALL DATA SETS */
       DO WRK=NXTRHEL REPEAT WRK->RHNXT WHILE(WRK^=NULL);
         CALL #PUSHLIFO(WRK,RH_STACK,RH_QUEUE,SUBSTR(CBUF,N));
         END;
       RC=0;
       RETURN('1'B); /* LEAVE ABECMD */
       END;
   IF OP='A'
     THEN DO; /* IT IS APPLY FUNCTION */
       CALL #ABEGOP(CBUF,M,N,OL,OP); /* GET <NAME> */
       LRN_RHP=DO_PREFIX_FIND; /* GO FIND DATA SET */
       IF LRN_RHP=NULL
         THEN CALL SETMSG(8,'DATA SET '××OP××' NOT FOUND');
         ELSE RC=#CMD(SUBSTR(CBUF,N),LRN_RHP,RHHDRPT);
       RETURN('1'B);
       END;
   RETURN('0'B);
   END DO_PREFIX;

 DO_PREFIX_FIND: PROC RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO LOCATE THE DATA SET TO WHICH THE CURRENT  *
 * COMMAND IS TO BE APPLIED.  OP WILL CONTAIN <NAME-REF>, WHICH IS     *
 * EITHER <NAME> OR '*' <SIGN> <INTEGER>.                              *
 *                                                                     *
 **********************************************************************/
   DCL SIGN CHAR(1);
   DCL TRH PTR;
   DCL (I,J) FIXED BIN(15,0);

   IF OP=''
     THEN RETURN(NULL);
   IF SUBSTR(OP,1,1)^='*'
     THEN DO; /* IT MUST BE <NAME> */
       DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
         UNTIL(TRH->RHNAME=OP);
         END;
       RETURN(TRH);
       END;
   /* AT THIS POINT IT MUST BE '*' <SIGN> <SPEC>. */
   IF OL<3
     THEN RETURN(NULL); /* INVALID SPECIFICATION */
   SIGN=SUBSTR(OP,2,1);
   IF SIGN^='+' & SIGN^='-'
     THEN RETURN(NULL); /* INVALID SPECIFICATION */
   IF VERIFY(SUBSTR(OP,3),'0123456789')^=0
     THEN RETURN(NULL); /* INVALID SPECIFICATION */
   I=SUBSTR(OP,3); /* I=<INTEGER> IN BINARY */
   TRH=RHPTR;
   DO J=1 TO I WHILE(TRH^=NULL);
     IF SIGN='+'
       THEN TRH=TRH->RHNXT;
       ELSE TRH=TRH->RHLST;
     END;
   RETURN(TRH);
   END DO_PREFIX_FIND;

 DO_SUBCMD: PROC RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * DO_SUBCMD IS CALLED WHEN THE POSITIONAL PARAMETERS HAVE BEEN PARSED *
 * OP SHOULD NORMALLY NOW CONTAIN THE SUBCOMMAND NAME.                 *
 *                                                                     *
 **********************************************************************/
   DCL TPTR PTR;
   DCL (I,J) FIXED BIN(15,0);

   IF SUBSTR(OP,1,1)=''''
     THEN DO; /* MAKE IT LSP SUBCOMMAND */
       OP='LSP';
       N=M;
       END;
     ELSE IF SUBSTR(OP,1,1)='%'
       THEN IF SUBSTR(OP,2,1)='%'
         THEN DO; /* MAKE IT A RUN SUBCOMMAND */
           OP='RUN';
           N=M+2;
           END;
         ELSE DO; /* MAKE IT A CLIST SUBCOMMAND */
           OP='CLIST';
           N=M+1;
           END;
   RHRC=0;
   IF RHPTR^=NULL
     THEN RHPTR->CMDDATA='';
   IF N>LENGTH(CBUF)
     THEN DO; /* NO OPERANDS LEFT IN CBUF */
       I=1;
       J=0;
       END;
     ELSE DO; /* SET OFFSET AND LENGTH FOR OPERANDS IN CBUF */
       I=N;
       J=LENGTH(CBUF)-N+1;
       END;
   IF RHECOSW
     THEN IF RHPTR=NULL
       THEN CALL #TERM(CBUF);
       ELSE CALL #TERM(RHPTR->RHNAME××': '××CBUF);
   RC=ABEB(OP,SUBSTR(CBUF,I,J),RHPTR,RHHDRPT,ADDR(LRN_STRUCTURE));
   IF RC ^= 0
     THEN DO; /* DO ONLY FOR RETURN CODE FROM ABEB */
       SELECT(RC);
         WHEN(8) CALL SETMSG(8,'COMMAND NOT FOUND="'××CBUF××'"');
         OTHERWISE CALL SETMSG(16,'ERROR IN "'××CBUF××'"');
         END; /* SELECT */
       END;
     ELSE IF RHECOSW
       THEN IF RHPTR^=NULL
         THEN IF MSGDATA^=''
           THEN CALL #TERM(RHPTR->RHNAME××': '××MSGDATA);

   CALL RCTEST;
   IF LRN_RHP^=NULL
     THEN DO;
       SELECT(OP);
         WHEN('C','CHANGE')
           IF CBUF^='C'
             THEN LRN_RHP->RHSPFCLST=CBUF;
         WHEN('F','FIND')
          IF CBUF^='F'
            THEN IF M=1
              THEN LRN_RHP->RHSPFFLST='N B '××CBUF;
              ELSE LRN_RHP->RHSPFFLST=CBUF;
         OTHERWISE;
         END; /* SELECT */
       IF LRNSTRT
         THEN DO;
           LRN_EOF='1'B; /* INDICATE END OF PROCESSING */
           CALL #ABELSP(RHHDRPT,ADDR(LRN_STRUCTURE));
             /* LET HIM PROCESS LAST BUFFER */
           END;
       END;
   IF LRN_BUFP^=NULL
     THEN FREE LSPBUFSTR; /* FREE IF ALLOCATED IN #ABELSP */
   END DO_SUBCMD;

 RCTEST: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO TEST THE RETURN CODE (RC), AND TO TAKE APPROPRIATE        *
 * APPROPRIATE ACTION BASED IN ITS VALUE.                              *
 *                                                                     *
 **********************************************************************/
   %INCLUDE IKJECT;
   DCL RCWORD FIXED BIN(31,0);
   DCL 1 RCOL BASED(ADDR(RCWORD)),
     2 PAD BIT(8),
     2 RCBIT BIT(24);
   IF RC^=0
     THEN RHRC=RC;
   RC=RHRC;
   RCWORD=RHRC;
   RHECT->ECTRTCD=RCBIT;
   IF RHRC>RHRCLIM
     THEN DO;
       CALL ABEAP(RHHDRPT); /* PURGE STACKS */
       CBUF=''; /* DON'T EXECUTE FURTHER */
       IF LRN_RHP^=NULL
         THEN LRN_RHP->CMDDATA='';
       END;
   END RCTEST;

 RHP_LOC: PROC(PPTR) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF THE DATA SET POINTED TO BY PPTR STILL IS     *
 * BEING EDITED.  IF SO, PPTR WILL BE RETURNED.  OTHERWISE, NULL WILL  *
 * BE RETURNED.                                                        *
 *                                                                     *
 **********************************************************************/
   DCL (PPTR,TPTR) PTR;
   IF PPTR=NULL
     THEN RETURN(NULL);
   DO TPTR=NXTRHEL REPEAT TPTR->RHNXT WHILE(TPTR^=NULL & TPTR^=PPTR);
     END;
   RETURN(TPTR);
   END RHP_LOC;

 SETLAST: PROC;
 /**********************************************************************
 *                                                                     *
 * SETLAST IS CALLED AFTER THE CURRENT SUBCOMMAND HAS BEEN PROCESSED   *
 * TO SET LRN_RHP->LASTCMD.                                            *
 *                                                                     *
 **********************************************************************/
   DCL I FIXED BIN(31,0);
   DCL NOLAST(18) CHAR(8) VAR STATIC INIT(
     'BOTTOM',
     'CLISTEND',
     'COL',
     'DOWN',
     'FULLSCR',
     'LAST',
     'LINES',
     'MARK',
     'MD',
     'MK',
     'P',
     'PB',
     'PF',
     'PFK',
     'RUNCONT',
     'TOP',
     'UP',
     'V');
   IF LRN_RHP=NULL
     THEN RETURN;
   DO I=1 TO HBOUND(NOLAST,1) WHILE(NOLAST(I)^=OP);
     END;
   IF I>HBOUND(NOLAST,1)
     THEN LRN_RHP->LASTCMD=CBUF;
   END SETLAST;

 SETMSG: PROC(R,MSG);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN AN ERROR IS ENCOUNTERED TO SET A RETURN CODE AND ISSUE  *
 * A MESSAGE.                                                          *
 *                                                                     *
 **********************************************************************/
   DCL R FIXED BIN(15,0);
   DCL MSG CHAR(*);
   RC=R; /* SET RETURN CODE */
   IF RHPTR=NULL
     THEN CALL #TERM(MSG);
     ELSE MSGDATA=MSG;
   IF R>=16
     THEN SIGNAL ERROR; /* BAD NEWS */
   CALL RCTEST;
   END SETMSG;

   END ABECMD;
