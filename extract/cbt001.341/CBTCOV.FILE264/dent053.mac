 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT053 - USE */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME = 'RENT';
   % @RENTNAME = 'DENT053';
   % INCLUDE DENTSUBA;
   % DCL SCAN CHAR;
   % SCAN = 'CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS)';
   HALT;
   DCL SCANNER ENTRY;
   DCL SETCAPS ENTRY;
   DCL PREFIX ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL TYPETAB(7) CHAR(8) VAR STATIC INIT(
     'RB','$CHAR','ZD','PD','HEX','PIB','IB');
   DCL KEYWORDS(9)  CHAR(12) VAR STATIC
     INIT('*','INPUT','LIST','NAME','SET','FIXED','NOSYM','IN','OUT');
   DCL OPERATORS(1) CHAR(2) VAR STATIC INIT('');
   DCL PRECEDENCE(2,1) FIXED BIN(15,0) STATIC INIT(0,0);
   DCL SPCHARS CHAR(1) VAR STATIC INIT('');
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0) INIT(1);
   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL KEYWORD FIXED BIN(15,0) STATIC INIT(2);
   DCL OPERAND FIXED BIN(15,0) STATIC INIT(0);
   DCL NO_MORE_TOKENS FIXED BIN(15,0) STATIC INIT(6);
   DCL NUMBER FIXED BIN(15,0) STATIC INIT(5);
   DCL (NEWHDR,LAST) PTR;
   CALL SETCAPS(CMDDATA);
   TOKHDR,NEWHDR=NULL;
   RHRC=0;
   ON CONDITION(BADUSE) BEGIN;
     IF MSGDATA=''
       THEN MSGDATA='INVALID SYNTAX';
     RHRC=8;
     GO TO EOJ;
     END; /* BEGIN */
   SCAN; /* GO GET COMMAND NAME */
   SCAN; /* GO GET KEYWORD, E.G.  *, INPUT, LIST, NAME. ETC. */
   IF TOKSTR='×'
     THEN CALL USEFORM; /* IT IS 'USE × NAME1 ×   × NAME2 × ... ' */
   IF TYPE^=KEYWORD
     THEN CALL USECOPY;
     ELSE SELECT(TOKSTR);
       WHEN('FIXED') CALL INPUT('1'B);
       WHEN('IN')    CALL IN;
       WHEN('INPUT') CALL INPUT('0'B);
       WHEN('LIST')  CALL LIST;
       WHEN('NOSYM') CALL SET('0'B);
       WHEN('OUT')   CALL OUT;
       WHEN('SET')   CALL SET('1'B);
       OTHERWISE DO;
         MSGDATA=
           'ONLY INPUT, LIST, AND SET  ARE CURRENTLY IMPLEMENTED';
         SIGNAL CONDITION(BADUSE);
         END;
       END; /* SELECT */
 EOJ:;
   CALL CLEANUP;

 CLEANUP: PROC;
 /**********************************************************************
 * CLEANUP IS CALLED TO CLEAN UP MEMORY AT END OF PROCESSING IN THIS   *
 * SUBCOMMAND.  ALSO CALLED BY USEFORM.                                *
 **********************************************************************/
   DCL DELPTR PTR;
   DO DELPTR=TOKHDR REPEAT TOKHDR WHILE(DELPTR^=NULL);
     TOKHDR=DELPTR->NEXT_TOKEN;
     FREE DELPTR->TOKEN;
     END;
   DO DELPTR=NEWHDR REPEAT NEWHDR WHILE(DELPTR^=NULL);
     NEWHDR=DELPTR->RHNLINK;
     FREE DELPTR->RHNAMESTR;
     END;
   TOKHDR,NEWHDR=NULL;
   SCANIX=1;
   END CLEANUP;

 DOCOL: PROC;
 /**********************************************************************
 * DOCOL IS CALLED WHEN THE CURRENT TOKEN IS THE FIRST OR ONLY NUMBER  *
 * OF A COLUMN RANGE SPECIFICATION.  DOCOL WILL SET FIELDS RHNPOS AND  *
 * RHNLNG IN THE STRUCTURE POINTED TO BY GLOBAL RHNAMPTR, AND WILL     *
 * ADVANCE THE CURRENT TOKEN POINTER TO THE NEXT TOKEN BEYOND THE      *
 * CURRENT COLUMN RANGE SPECIFICATION.                                 *
 **********************************************************************/
   DCL I FIXED BIN;
   RHNPOS=TOKSTR; /* GET START OF FIELD */
   SCAN; /* GET NEXT TOKEN */
   IF TOKSTR^='-'
     THEN RHNLNG=1;
     ELSE DO;
       SCAN; /* GET NEXT TOKEN */
       IF TYPE^=NUMBER
         THEN DO;
           MSGDATA='NUMBER EXPECTED THIS FOUND - '××TOKSTR;
           SIGNAL CONDITION(BADUSE);
           END;
       I=TOKSTR;
       RHNLNG=I-RHNPOS+1;
       IF RHNLNG<1
         THEN DO;
           MSGDATA='FIELD LENGTH MUST BE 1 OR MORE';
           SIGNAL CONDITION(BADUSE);
           END;
       IF RHNLNG>256
         THEN DO;
           MSGDATA='FIELD LENGTH MUST BE NO MORE THAN 256';
           SIGNAL CONDITION(BADUSE);
           END;
       SCAN; /* GET NEXT TOKEN */
       END;
   CURSOR=RHNPOS+RHNLNG;
   END DOCOL;

 FINDCOL: PROC(RHNPOS,RHNLNG,TRIM);
 /**********************************************************************
 * FINDCOL IS CALLED WHEN THE POSITION AND LENGTH OF THE CURRENT FIELD *
 * IS TO BE CALCULATED ACCORDING TO THE FORMAT OF THE CURRENT RECORD   *
 * IN THE DATA SET.  FINDCOL WILL SET FIELDS RHNPOS AND RHNLNG.        *
 * GLOBAL VARIABLE CURSOR POINTS AT THE START OF THE CURRENT FIELD IN  *
 * THE CURRENT RECORD, AND GLOBAL VARIABLE L CONTAINS THE LENGTH OF    *
 * THE CURRENT RECORD.                                                 *
 **********************************************************************/
   DCL (RHNPOS,RHNLNG) FIXED BIN(15,0);
   DCL TRIM BIT(1);
   DCL I FIXED BIN;
   IF TRIM & ^(CURSOR=0 × CURSOR>L)
     THEN DO;
       I=PREFIX(SUBSTR(RECSTR,CURSOR),' '); /* FIND NON-BLANK */
       IF I=0
         THEN CURSOR=L+1;
         ELSE CURSOR=CURSOR+I-1;
       END;
   IF CURSOR=0 × CURSOR>L
     THEN DO; /* MISSING FIELD */
       RHNPOS=1;
       RHNLNG=0;
       RETURN;
       END;
   RHNPOS=CURSOR;
   I=INDEX(SUBSTR(RECSTR,CURSOR),' '); /* FIND NEXT BLANK */
   IF I>0
     THEN CURSOR=CURSOR+I-1;
     ELSE CURSOR=L+1;
   IF ^TRIM & CURSOR<=L
     THEN DO;
       I=PREFIX(SUBSTR(RECSTR,CURSOR),' '); /* FIND NEXT NON-BLANK */
       IF I=0
         THEN CURSOR=L+1;
         ELSE CURSOR=CURSOR+I-1;
       END;
   RHNLNG=CURSOR-RHNPOS;
   END FINDCOL;

 FUNCK: PROC(PRM);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE IF A NAME IS RESERVED.                          *
 *                                                                     *
 **********************************************************************/
   DCL PRM CHAR(*) VAR;
   DCL RESERVED(33) CHAR(12) VAR STATIC INIT(
   /* NILADIC FUNCTIONS */
   /*  1 */ 'DATE',         /*  2 */ 'ECHO',      /*  3 */ 'LIST',
   /*  4 */ 'TIME',
   /* MONADIC FUNCTIONS */
   /*  5 */ 'ABS',          /*  6 */ 'ACOS',      /*  7 */ 'ASIN',
   /*  8 */ 'ATAN',         /*  9 */ 'ATAND',     /* 10 */ 'ATANH',
   /* 11 */ 'CEIL',         /* 12 */ 'COS',       /* 13 */ 'COSD',
   /* 14 */ 'COSH',         /* 15 */ 'ERF',       /* 16 */ 'ERFC',
   /* 17 */ 'EXP',          /* 18 */ 'FIXED',     /* 19 */ 'FLOOR',
   /* 20 */ 'LOG',          /* 21 */ 'LOG2',      /* 22 */ 'LOG10',
   /* 23 */ 'SIGN',         /* 24 */ 'SIN',       /* 25 */ 'SIND',
   /* 26 */ 'SINH',         /* 27 */ 'SQRT',      /* 28 */ 'TAN',
   /* 29 */ 'TAND',         /* 30 */ 'TANH',      /* 31 */ 'TRUNC',
   /* DYADIC FUNCTIONS */
   /* 32 */ 'MOD',          /* 33 */ 'ROUND');
   DCL I FIXED BIN(15,0);
   DO I=1 TO HBOUND(RESERVED,1) WHILE(RESERVED(I)^=PRM);
     END;
   IF I<=HBOUND(RESERVED,1)
     THEN DO;
       MSGDATA=PRM××' IS A RESERVED WORD';
       SIGNAL CONDITION(BADUSE);
       END;
   END FUNCK;

 IN: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE DBD FROM THE FRONT OF THE CURRENTLY EDITED     *
 * DATASET.  AFTER THE DBD HAS BEEN OBTAINED, THE RECORDS DEFINING     *
 * THE DBD WILL BE DELETED FROM THE FRONT OF THE DATA SET.             *
 *                                                                     *
 **********************************************************************/
   DCL CMD CHAR(256) VAR INIT('USE ');
   DCL (I,SAVSEQ) FIXED BIN(31,0);
   DCL (ORGPTR,SAVPTR,DELPTR) PTR;

   ORGPTR=RECPTR;
   ON CONDITION(BADIN) BEGIN;
     IF ORGPTR=HDPTR
       THEN CALL #NC(RHPTR,SUBENT,NXTHDR); /* CALL NEWCUR */
       ELSE CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
     MSGDATA='THERE IS NO VALID DBD AT THE FRONT OF THIS DATASET';
     SIGNAL CONDITION(BADUSE);
     END;
   /* GET SET TO READ FIRST RECORD IN DATA SET */
   RECPTR=RHPTR;
   CURSEQ=0;
   RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET FIRST RECORD */
   IF RECPTR=RHPTR
     THEN SIGNAL CONDITION(BADIN); /* EMPTY DATA SET */
   IF LENGTH(RECSTR)<5
     THEN SIGNAL CONDITION(BADIN);
   IF SUBSTR(RECSTR,1,5)^='DATA '
     THEN SIGNAL CONDITION(BADIN); /* FIRST RECORD M/B DATA STMT */
   RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET NEXT RECORD */
   IF RECPTR=RHPTR
     THEN SIGNAL CONDITION(BADIN); /* NOT ENOUGH RECORDS */
   IF LENGTH(RECSTR)<5
     THEN SIGNAL CONDITION(BADIN);
   IF SUBSTR(RECSTR,1,5)^='INPUT'
     THEN SIGNAL CONDITION(BADIN); /* SECOND RECORD M/B INPUT STMT */
   DO FOREVER=1 REPEAT FOREVER;
     I=INDEX(RECSTR,';'); /* END OF INPUT STMT? */
     IF I=0
       THEN I=LENGTH(RECSTR)+1;
     IF I>1
       THEN CMD=CMD××' '××SUBSTR(RECSTR,1,I-1);
     IF I<=LENGTH(RECSTR)
       THEN LEAVE; /* WE ARE AT END OF INPUT STMT */
     RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET NEXT RECORD */
     IF RECPTR=RHPTR
       THEN SIGNAL CONDITION(BADIN); /* NOT ENOUGH RECORDS */
     END;
   RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET NEXT RECORD */
   IF RECSTR^='CARDS;'
     THEN SIGNAL CONDITION(BADIN); /* THIRD STMT M/B CARDS STMT */
   RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR); /* GET NEXT RECORD */
   IF RECPTR=RHPTR
     THEN SAVSEQ=0;
     ELSE SAVSEQ=RECSEQ;
   /* NOW DELETE RECORDS TO THIS POINT */
   /* GET SET TO READ FIRST RECORD IN DATA SET */
   RECPTR=RHPTR;
   CURSEQ=0;
   /* NOW DELETE THE DBD FROM THE FRONT OF THE DATA SET */
   DO RECPTR=#SUCC(RHHDRPT,RHPTR,RECPTR) REPEAT NXTPTR
     WHILE(RECPTR^=HDPTR);
     IF RECSEQ>=SAVSEQ
       THEN LEAVE;
     IF RECPTR=ORGPTR
       THEN ORGPTR=RHPTR;
     DELPTR=RECPTR;
     RECPTR=LSTPTR;
     CALL #PUTSLOT(RHPTR,SUBENT,DELPTR);
     END;
   IF ORGPTR=HDPTR
     THEN CALL #NC(RHPTR,SUBENT,NXTHDR); /* CALL NEWCUR */
     ELSE CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
   RECHDR.CMDDATA=CMD; /* SCHEDULE USE SUBCOMMAND FOR EXECUTION NEXT */
   END IN;

 INPUT: PROC(FIXED);
 /**********************************************************************
 * INPUT IS CALLED TO PROCESS A USE SUBCOMMAND IN WHICH THE FIRST      *
 * OPERAND IS THE INPUT OR FIXED KEYWORDS.  PARAMETER FIXED WILL BE    *
 * '1'B IF THE KEYWORD IS FIXED.  IF FIXED IS SPECIFIED, IF COLUMN     *
 * SPECIFICATIONS ARE OMITTED FOR A FIELD ON THE SUBCOMMAND (E.G.      *
 * INPUT X Y Z) THE COLUMN SPECIFICATIONS WILL BE DERIVED FROM THE     *
 * DATA IN THE CURRENT RECORD, AND WILL APPLY UNTIL THE NEXT USE       *
 * SUBCOMMAND IS ISSUED TO CHANGE FIELD SPECIFICATIONS.  IF FIXED IS   *
 * NOT SPECIFIED AND COLUMN SPECIFICATIONS ARE OMITTED FOR A FIELD ON  *
 * THE SUBCOMMAND THE COLUMN SPECIFICATIONS WILL BE DERIVED FROM THE   *
 * DATA IN THE CURRENT RECORD WHEN THE 'USE SET' SUBCOMMAND IS ISSUED. *
 *                                                                     *
 * SOME SAMPLE SUBCOMMANDS FOLLOW -                                    *
 *                                                                     *
 *   USE INPUT X Y Z                                                   *
 *     THE ABOVE STATEMENT INDICATES THREE FIELDS ARE TO BE DEFINED    *
 *     AND THE OFFSETS AND LENGTHS ARE TO BE BASED ON THE DATA IN THE  *
 *     FIRST RECORD IN THE DATA SET.  FIELD NAMED X WILL START AT      *
 *     THE POSITION OF THE FIRST NON-BLANK CHARACTER IN THE FIRST      *
 *     RECORD.  ALL FIELDS WILL TERMINATE ONE COLUMN PREVIOUS TO       *
 *     THE STARTING COLUMN OF THE NEXT FIELD, E.G. IF FIELD Y STARTS   *
 *     IN COLUMN 10, FIELD X WILL STOP IN COLUMN 9.  THE START OF      *
 *     FIELD Y WILL BE DETERMINED BY FINDING THE FIRST BLANK           *
 *     CHARACTER IN X. FIELD Y WILL START WITH THE FIRST NON-BLANK     *
 *     CHARACTER AFTER THAT.                                           *
 *   USE INPUT A 1 B 5-10 C D                                          *
 *     FIELD A WILL BEGIN IN COLUMN 1, AND WILL BE 1 COLUMN LONG.      *
 *     FIELD B WILL BEGIN IN COLUMN 5, AND WILL BE 6 COLUMNS LONG.     *
 *     FIELD C WILL BEGIN IN THE FIRST NON-BLANK COLUMN BEYOND         *
 *     COLUMN 10 IN THE FIRST RECORD IN THE DATA SET.  THE LENGTH OF   *
 *     C, AND THE OFFSET AND LENGTH OF D WILL BE CALCULATED AS IN      *
 *     THE FIRST EXAMPLE ABOVE.                                        *
 *   USE INPUT                                                         *
 *     USE INPUT FOLLOWED BY NO OPERANDS SIGNIFIES THAT THE CURRENT    *
 *     DATABASE DEFINITION, IF ANY, IS TO BE DELETED, AND THE DATA SET *
 *     IS NOT TO BE ASSOCIATED WITH A DATABASE DEFINITION.             *
 *   USE INPUT @ 23 XYZ PIB1. @ 47 ABC PD5.;                           *
 *     FIELD XYZ IS POSITIVE INTEGER BINARY (PIB) OF LENGTH 1, AND     *
 *     STARTS IN COLUMN 23.  FIELD ABC IS PACKED DECIMAL OF LENGTH 5,  *
 *     AND STARTS IN COLUMN 47.  OTHER ACCEPTABLE FORMATS ARE          *
 *                                                                     *
 *          $CHAR  - CHARACTER - LENGTH <= 256.                        *
 *          HEX    - HEXADECIMAL - LENGTH <= 256.                      *
 *          IB     - INTEGER BINARY (FIXED POINT) LENGTH = 2 OR 4.     *
 *          PACKED - PACKED DECIMAL - LENGTH <= 8.                     *
 *          RB     - REAL BINARY (FLOATING POINT) - LENGTH = 4, 8, 16. *
 *                                                                     *
 *   NOTE THAT THE SECOND AND FOURTH FORMATS SHOWN ABOVE MAY BE        *
 *   INTERMIXED.                                                       *
 *                                                                     *
 **********************************************************************/
   DCL FIXED BIT(1);
   DCL I FIXED BIN(31,0) INIT(0);
   IF RECPTR^=HDPTR
     THEN DO;
       L=LENGTH(RECSTR);
       CURSOR=PREFIX(RECSTR,' '); /* FIND FIRST NONBLANK */
       END;
     ELSE CURSOR,L=0;
   SCAN; /* GET NEXT TOKEN */
   DO FOREVER=1 REPEAT FOREVER;
     DO WHILE(TYPE=OPERAND × TYPE=KEYWORD);
       CALL INPSUB1; /* GO PROCESS COLUMNAR INPUT */
       END;
     IF TOKSTR^='@'
       THEN LEAVE; /* IT MAY BE INVALID */
     CALL INPSUB2; /* GO PROCESS FORMATTED INPUT */
     END;
   IF TYPE^=NO_MORE_TOKENS
     THEN DO;
       MSGDATA='INVALID SYNTAX = '××TOKSTR;
       SIGNAL CONDITION(BADUSE);
       END;
   DO DELPTR=RHUSEHD REPEAT RHUSEHD WHILE(DELPTR^=NULL);
     RHUSEHD=DELPTR->RHNLINK;
     FREE DELPTR->RHNAMESTR;
     END;
   RHUSEHD=NEWHDR;
   NEWHDR=NULL;

 INPSUB1: PROC;
 /**********************************************************************
 * THIS SUBRTNE, WHICH IS NESTED IN SUBROUTINE INPUT, IS CALLED WHEN   *
 * COLUMNAR INPUT IS RECOGNIZED;                                       *
 **********************************************************************/
   CALL FUNCK(TOKSTR);
   CALL INPSUB3; /* GO ALLOCATE AND QUEUE RHNAMESTR */
   RHNNAME=TOKSTR;
   SCAN; /* GET NEXT TOKEN */
   SELECT;
     WHEN(TYPE=NUMBER) DO;
       RHNTYPE=3; /* IT IS ZONED DECIMAL FIELD */
       CALL DOCOL; /* GO PROCESS COLUMN RANGE */
       END;
     WHEN(TOKSTR='$') DO;
       RHNTYPE=2; /* IT IS CHARACTER FIELD */
       SCAN; /* GET NEXT TOKEN */
       IF TYPE=NUMBER
         THEN CALL DOCOL;
         ELSE IF FIXED
           THEN CALL FINDCOL(RHNPOS,RHNLNG,'0'B);
             /* GO FIGURE RHNPOS,RHNLNG FROM DATA */
       END;
     OTHERWISE DO;
       RHNTYPE=3; /* IT IS ZONED DECIMAL FIELD */
       IF FIXED
        THEN CALL FINDCOL(RHNPOS,RHNLNG,'0'B);
          /* GO FIGURE RHNPOS,RHNLNG FROM DATA */
       END;
     END; /* SELECT */
   END INPSUB1;
 INPSUB2: PROC;
 /**********************************************************************
 * THIS SUBRTNE, WHICH IS NESTED IN SUBROUTINE INPUT, IS CALLED WHEN   *
 * FORMATTED INPUT IS RECOGNIZED;                                      *
 **********************************************************************/
   DCL (I,J,K,L) FIXED BIN(15,0);
   CALL INPSUB3; /* GO ALLOCATE AND QUEUE RHNAMESTR */
   SCAN; /* GET NEXT TOKEN */
   IF TYPE^=NUMBER
     THEN SIGNAL CONDITION(BADUSE);
   RHNPOS=TOKSTR; /* STORE FIELD OFFSET */
   SCAN;
   IF ^(TYPE=OPERAND × TYPE=KEYWORD)
     THEN SIGNAL CONDITION(BADUSE); /* MISSING FIELD NAME */
   CALL FUNCK(TOKSTR);
   RHNNAME=TOKSTR; /* STORE FIELD NAME */
   SCAN;
   IF TOKSTR='$'
     THEN DO;
       SCAN;
       IF INDEX(TOKSTR,'CHAR')=1
         THEN TOKSTR='$'××TOKSTR;
         ELSE SIGNAL CONDITION(BADUSE); /* S/B $CHAR */
       END;
   J=LENGTH(TOKSTR);
   DO I=1 TO HBOUND(TYPETAB,1);
     L=LENGTH(TYPETAB(I));
     IF J>L
       THEN IF SUBSTR(TOKSTR,1,L)=TYPETAB(I)
         THEN LEAVE; /* GOT INPUT FORMAT */
     END;
   IF I>HBOUND(TYPETAB,1)
     THEN SIGNAL CONDITION(BADUSE); /* INVALID DATA TYPE */
   RHNTYPE=I; /* SET FIELD TYPE */
   IF VERIFY(SUBSTR(TOKSTR,L+1),'0123456789')^=0
     THEN SIGNAL CONDITION(BADUSE); /* INVALID LENGTH */
   RHNLNG=SUBSTR(TOKSTR,L+1); /* SET FIELD LENGTH */
   SELECT(RHNTYPE);
     WHEN(2,5,6) /* CHAR, HEX, BIT */
       IF RHNLNG>256
         THEN SIGNAL CONDITION(BADUSE); /* BAD LENGTH */
     WHEN(7) /* FIXED */
       IF RHNLNG^=2 & RHNLNG^=4
         THEN SIGNAL CONDITION(BADUSE); /* BAD LENGTH */
     WHEN(4) /* PACKED */
       IF RHNLNG>8
         THEN SIGNAL CONDITION(BADUSE); /* BAD LENGTH */
     WHEN(3) /* ZONED */
       IF RHNLNG>15
         THEN SIGNAL CONDITION(BADUSE); /* BAD LENGTH */
     OTHERWISE /* FLOAT */
       IF RHNLNG^=4 & RHNLNG^=8 & RHNLNG^=16
         THEN SIGNAL CONDITION(BADUSE); /* BAD LENGTH */
     END; /* SELECT */
   SELECT(RHNTYPE);
     WHEN(2,3,5);
     OTHERWISE HEXMODE='1'B; /* MUST BE DISPLAYED IN HEX */
     END; /* SELECT */
   SCAN; /* GET PERIOD */
   IF TOKSTR^='.'
     THEN SIGNAL CONDITION(BADUSE);
   /* FOR NOW, WE WON'T HANDLE SCALE */
   SCAN; /* GET START OF NEXT FORMAT, MAYBE */
   END INPSUB2;
 INPSUB3: PROC;
 /**********************************************************************
 * THE SUBROUTINE, WHICH IS NESTED IN SUBROUTINE INPUT, IS CALLED WHEN *
 * A NEW RHNAMESTR STRUCTURE IS TO BE ALLOCATED.                       *
 **********************************************************************/
   ALLOCATE RHNAMESTR SET(RHNAMPTR);
   /* NOW QUEUE AT END OF QUEUE */
   RHNLINK=NULL;
   IF NEWHDR=NULL
     THEN NEWHDR=RHNAMPTR;
     ELSE LAST->RHNLINK=RHNAMPTR;
   LAST=RHNAMPTR;
   RHNTYPE,RHNPOS,RHNLNG,RHNVAR0,RHNFL,RHNFD,RHNF,RHNJUST=0;
   RHNCPOS,RHNCLNG=0;
   RHNLABEL,RHNFORM,RHNIFORM='';
   END INPSUB3;
   END INPUT;
 LIST: PROC;
 /**********************************************************************
 * LIST IS CALLED TO PROCESS A USE SUBCOMMAND IN WHICH THE FIRST       *
 * OPERAND IS THE LIST KEYWORD.                                        *
 **********************************************************************/
   DCL STR CHAR(80) VAR;
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     PUT STRING(STR) EDIT
       (' NAME=',RHNNAME)(A,A)
       (' OFF=',RHNPOS)(A,P'ZZZ9')
       (' LEN=',RHNLNG)(A,P'ZZZ9')
       (' TYPE=',TYPETAB(RHNTYPE))(A,A)
       (' CURR. OFF=',RHNCPOS)(A,P'ZZZ9')
       (' CURR. LEN=',RHNCLNG)(A,P'ZZZ9');
     CALL #TERM(STR);
     END;
   CALL #TERM('END-OF-LIST');
   END LIST;

 OUT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO ADD THE DBD ON THE FRONT OF THE CURRENTLY EDITED DATASET. *
 *                                                                     *
 **********************************************************************/
   DCL LAST FIXED BIN(31,0) INIT(99999999);
   DCL (SAVPTR,ORGPTR,CURPTR) PTR;
   DCL DOLLAR CHAR(3) VAR;
   DCL (I,SEQ) FIXED BIN(31,0);

   ORGPTR=RECPTR;
   IF RECPTR^=HDPTR
     THEN IF LSTPTR=HDPTR
       THEN ORGPTR=HDPTR;
   ON CONDITION(BADOUT) BEGIN;
     IF ORGPTR=HDPTR
       THEN CALL #NC(RHPTR,SUBENT,NXTHDR); /* CALL NEWCUR */
       ELSE CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
     MSGDATA='NO VALID DBD TO STORE AT THE FRONT OF THIS DATASET';
     SIGNAL CONDITION(BADUSE);
     END;
   IF RHUSEHD=NULL
     THEN SIGNAL CONDITION(BADOUT);
   CALL #NC(RHPTR,SUBENT,HDPTR); /* POSITION TO START OF DATA SET */
   BUF='DATA '××RHNAME××';';
   SAVPTR,CURPTR=RECPTR;
   SEQ=-1;
   CALL #ADD(RHPTR,SUBENT,SAVPTR,SAVPTR,SEQ,BUF,RHPPTR); /* ADD REC */
   BUF='INPUT ';
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     IF LENGTH(BUF)>53
       THEN DO;
         SEQ=-1;
         CALL #ADD(RHPTR,SUBENT,SAVPTR,SAVPTR,SEQ,BUF,RHPPTR);
         BUF='';
         END;
     IF RHNTYPE=2 × RHNTYPE=3
       THEN DO; /* CHAR, ZONED */
         IF RHNTYPE=2
           THEN DOLLAR=' $ ';
           ELSE DOLLAR=' ';
         PUT STRING(BUF) EDIT(BUF,' ',RHNNAME,DOLLAR)(A,A,A,A);
         IF RHNPOS^=0
           THEN PUT STRING(BUF) EDIT(BUF,OUTSUB(RHNPOS),'-',
             OUTSUB(RHNPOS+RHNLNG-1))(A,A,A,A);
         END;
       ELSE PUT STRING(BUF) EDIT(BUF,' @',OUTSUB(RHNPOS),RHNNAME,
         TYPETAB(RHNTYPE),OUTSUB(RHNLNG),'.')
         (A,A,A,X(1),A,X(1),A,A,A);
     END;
   BUF=BUF××';';
   SEQ=-1;
   CALL #ADD(RHPTR,SUBENT,SAVPTR,SAVPTR,SEQ,BUF,RHPPTR); /* ADD REC */
   BUF='CARDS;';
   SEQ=-1;
   CALL #ADD(RHPTR,SUBENT,SAVPTR,SAVPTR,SEQ,BUF,RHPPTR); /* ADD REC */
   CALL #RESEQ(RHPTR,SUBENT,SAVPTR->LSTPTR,'NOSAVE','NORENUM',
     LAST,RHPPTR);
   IF ORGPTR = HDPTR
     THEN CALL #NC(RHPTR,SUBENT,NXTHDR);/*CALL NEWCUR*/
     ELSE CALL #NC(RHPTR,SUBENT,ORGPTR);/*CALL NEWCUR*/
   RECHDR.CMDDATA='USE ×'; /* ELIMINATE DBD */
 OUTSUB: PROC(NUM) RETURNS(CHAR(3) VAR);
 /**********************************************************************
 *                                                                     *
 * OUTSUB WILL RETURN THE PRINTABLE EQUIVALENT OF NUM WITH LEADING     *
 * ZEROS REMOVED.                                                      *
 *                                                                     *
 **********************************************************************/
   DCL NUM FIXED BIN(15,0);
   DCL PIC PIC'ZZ9';
   PIC=NUM;
   RETURN(SUBSTR(PIC,PREFIX(PIC,' ')));
   END OUTSUB;
   END OUT;

 SET: PROC(SYMSW);
 /**********************************************************************
 * SET IS CALLED TO PROCESS A USE SUBCOMMAND IN WHICH THE FIRST        *
 * OPERAND IS THE SET OR NOSYM KEYWORDS.  IN BOTH CASES, THE AIM IS TO *
 * LOCATE THE DATA IN THE CURRENT RECORD FOR EACH FIELD DEFINED.  THE  *
 * NOSYM KEYWORD IMPLIES THE SET KEYWORD, BUT IT INDICATES THAT THE    *
 * REPLACEMENT VALUE FOR THE SYMBOLIC VARIABLE ASSOCIATED WITH EACH    *
 * FIELD IS NOT TO BE SET.  THE NOSYM KEYWORD IS NORMALLY USED BY THE  *
 * SELECT SUBCOMMAND.                                                  *
 **********************************************************************/
   DCL SYMSW BIT(1);
   DCL GBLSW BIT(1) STATIC INIT('0'B);
   DCL SYMBOLPM CHAR(8);
   DCL TXT CHAR(256) VAR;
   DCL (POS,LNG) FIXED BIN(15,0);
   IF RECPTR=HDPTR
     THEN CURSOR,L=0;
     ELSE DO;
       CURSOR=1;
       L=LENGTH(RECSTR);
       END;
   DO RHNAMPTR=RHUSEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     SYMBOLPM='&'××RHNNAME;
     IF RECPTR=HDPTR
       THEN TXT='';
       ELSE DO;
         IF RHNPOS=0
           THEN DO;
             CALL FINDCOL(RHNCPOS,RHNCLNG,'1'B);
             IF RHNCLNG=0
               THEN TXT='';
               ELSE TXT=SUBSTR(RECSTR,RHNCPOS,RHNCLNG);
             END;
           ELSE DO;
             RHNCPOS=RHNPOS;
             RHNCLNG=RHNLNG;
             IF RHNLNG=0 × L<RHNPOS
               THEN TXT='';
               ELSE IF L<RHNPOS+RHNLNG-1
                 THEN TXT=SUBSTR(RECSTR,RHNPOS);
                 ELSE TXT=SUBSTR(RECSTR,RHNPOS,RHNLNG);
             END;
         END;
     IF SYMSW
       THEN CALL #SET(GBLSW,SYMBOLPM,TXT);
     END;
   END SET;

 USECOPY: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS A USE SUBCOMMAND OF THE FORM "USE <NAME>" WHERE   *
 * <NAME> IS THE SYMBOLIC NAME OF A DATA SET WHOSE DBD IS TO BE        *
 * COPIED.                                                             *
 *                                                                     *
 **********************************************************************/
   DCL (TRH,DELPTR,NEWPTR,LAST) PTR;
   DO TRH=NXTRHEL REPEAT TRH->RHNXT WHILE(TRH^=NULL)
     UNTIL(TRH->RHNAME=TOKSTR);
     END;
   IF TRH=NULL
     THEN DO;
       MSGDATA='INVALID KEYWORD = '××TOKSTR;
       SIGNAL CONDITION(BADUSE);
       END;
   DO DELPTR=RHUSEHD REPEAT RHUSEHD WHILE(DELPTR^=NULL);
     RHUSEHD=DELPTR->RHNLINK;
     FREE DELPTR->RHNAMESTR;
     END;
   DO DELPTR=TRH->RHUSEHD REPEAT DELPTR->RHNLINK WHILE(DELPTR^=NULL);
     ALLOCATE RHNAMESTR SET(NEWPTR);
     NEWPTR->RHNAMESTR=DELPTR->RHNAMESTR;
     NEWPTR->RHNLINK=NULL;
     IF RHUSEHD=NULL
       THEN RHUSEHD=NEWPTR;
       ELSE LAST->RHNLINK=NEWPTR;
     LAST=NEWPTR;
     END;
   END USECOPY;

 USEFORM: PROC;
 /**********************************************************************
 *                                                                     *
 * THIS SUBROUTINE IS CALLED TO PROCESS A USE SUBCOMMAND OF THE FORM   *
 * 'USE × NAME1 ×   × NAME2 × ...' THE SUBROUTINE WILL REWRITE THE     *
 * COMMAND BUFFER TO LOOK LIKE E.G. 'USE INPUT NAME1 1-23 NAME2 25-27' *
 * BASED ON THE RELATIVE OFFSETS OF THE VERTICAL BARS.  THE FIRST      *
 * VERTICAL BAR IS ASSUMED TO BE IN POSITION 1 OF THE ACTUAL RECORD.   *
 *                                                                     *
 * ONE CAN ALSO SPECIFY E.G. 'USE × NAME1 × (NAME2 NAME3) × ...'.      *
 * NAMES 'NAME2' AND 'NAME3' WILL HAVE FREE FORMAT.  THAT IS, THE      *
 * USE SUBCOMMAND GENERATED WILL BE 'USE INPUT NAME1 1-8 NAME2 NAME3', *
 * AND FIELDS NAME2 AND NAME3 WILL HAVE THEIR FIELD POSITIONS AND      *
 * LENGTHS DERIVED DYNAMICALLY FROM THE DATA FORMAT OF THE CURRENT     *
 * RECORD WHEN THE USE SUBCOMMAND IS ISSUED WITHOUT AND OPERANDS.      *
 *                                                                     *
 **********************************************************************/
   DCL NEWCMD CHAR(256) VAR INIT('USE INPUT');
   DCL (ORG,LEFT,RIGHT,ZCNT) FIXED BIN(15,0);
   DCL NNAME CHAR(10) VAR;
   DCL PRMSG CHAR(80) VAR;
   ZCNT=0; /* COUNT OF Z NAMES IN DEFINITION */
   ORG,LEFT=SCANIX-1; /* SAVE POSITION OF FIRST × */
   RIGHT=0;
   NNAME='';
   DO UNTIL(TYPE=NO_MORE_TOKENS);
     SCAN; /* GET NEXT TOKEN */
     IF TOKSTR='('
       THEN DO; /* IT IS A STRING OF FREE-FORM FIELDS */
         IF NNAME^=''
           THEN DO;
             MSGDATA='INVALID OPERAND='''××TOKSTR××'''';
             SIGNAL CONDITION(BADUSE);
             END;
         DO UNTIL(TOKSTR=')' × TYPE=NO_MORE_TOKENS);
           SCAN;
           IF TYPE=OPERAND × TYPE=KEYWORD
             THEN IF TOKSTR='Z'
               THEN DO;
                 ZCNT=ZCNT+1;
                 PUT STRING(PRMSG)
                   EDIT('ENTER FULL NAME FOR Z VARIABLE #',ZCNT)
                   (A,P'ZZ9');
                 NEWCMD=NEWCMD××' '××#PROMPT(PRMSG);
                 END;
               ELSE NEWCMD=NEWCMD××' '××TOKSTR;
             ELSE IF TOKSTR='$'
               THEN NEWCMD=NEWCMD××' '××TOKSTR;
           END;
         IF TOKSTR=')'
           THEN SCAN;
         END;
     IF TYPE=NO_MORE_TOKENS
       THEN RIGHT=BUFLN; /* DEFAULT TO A × AT END */
       ELSE IF TOKSTR='×'
         THEN RIGHT=SCANIX-2;
         ELSE IF TOKSTR='$' & NNAME^=''
           THEN NNAME=NNAME××' '××TOKSTR;
           ELSE IF (TYPE^=OPERAND & TYPE^=KEYWORD) × NNAME^=''
             THEN DO;
               MSGDATA='INVALID OPERAND='''××TOKSTR××'''';
               SIGNAL CONDITION(BADUSE);
               END;
             ELSE NNAME=TOKSTR;
     IF RIGHT^=0
       THEN DO;
         IF NNAME^=''
           THEN DO;
             IF NNAME='Z'
               THEN DO;
                 ZCNT=ZCNT+1;
                 PUT STRING(PRMSG)
                   EDIT('ENTER FULL NAME FOR Z VARIABLE #',ZCNT)
                   (A,P'ZZ9');
                 NNAME=#PROMPT(PRMSG);
                 END;
             PUT STRING(NEWCMD)
               EDIT(NEWCMD,' ',NNAME,LEFT-ORG+1,'-',RIGHT-ORG+1)
               (A,A,X(1),A,X(1),P'9999',A,P'9999');
             END;
         LEFT=RIGHT+1;
         RIGHT=0;
         NNAME='';
         END;
     END;
   CMDDATA=NEWCMD;
   CALL CLEANUP;
   SCAN;
   SCAN;
   END USEFORM;

   END DENT053;
