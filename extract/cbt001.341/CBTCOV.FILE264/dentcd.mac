 /* DENTCD - INTERFACE TO FULL-SCREEN SYSTPUT */
  DENTCD:  PROC(RHPPTR) OPTIONS(REENTRANT);
   % DCL @PROCNAME CHAR;
   % @PROCNAME='MAIN';
   % INCLUDE DENTSUB;
   % INCLUDE DENTPNL;
   % INCLUDE @BIT;
   % INCLUDE @SBACON;
   DCL RHPPTR PTR;
   DCL 1 @PNLARYS BASED(@ARYPTR),
     2 @ARYCNT FIXED BIN(31,0),
     2 @PNLARY(L REFER (@ARYCNT)),
      3 @PNLSTAPT PTR,
      3 @PNLDYNPT PTR;
   DCL SBACODB BIT(8) INIT('00010001'B),
       SBACODE CHAR(1) DEF SBACODB;
   DCL WCCB BIT(8) INIT('11110001'B),
                     /*    11.....SPECIFIES 80 CHAR LINE
                             0....DON'T START PRINTER
                              0...DON'T SOUND ALARM
                               0..DON'T RESET INPUT INHIBITED
                                1.RESET MDT BITS */
       WCC CHAR(1) DEF WCCB;
   DCL SFCCODB BIT(8) INIT('00011101'B),
       SFCCODE CHAR(1) DEF SFCCODB;
   DCL ICORDEB BIT(8) INIT('00010011'B),
       ICORDER CHAR(1) DEF ICORDEB;
   DCL BUF CHAR(32000) VARYING;
   DCL ATRWRKB BIT(8),
       ATRWRKC CHAR(1) DEF ATRWRKB;
   DCL (SAVPTR,LASTFLD) PTR;
   DCL MYATRB BIT(8) STATIC INIT('11110000'B),
       MYATRC CHAR(1) DEF MYATRB;
   DCL SBAWRKB FIXED BIN(15,0),
       SBAWRKC CHAR(2) DEF SBAWRKB;
   DCL AIDWRKB BIT(8),
       AIDWRKC CHAR(1) DEF AIDWRKB;
   DCL SBAZERB BIT(16) STATIC INIT(@CONSBA(0)),
       SBAZERO CHAR(2) DEF SBAZERB;
   DCL SBAONEB BIT(16) STATIC INIT(@CONSBA(1)),
       SBAONE CHAR(2) DEF SBAONEB;
   DCL RAORDEB BIT(8) INIT('00111100'B),
       RAORDER CHAR(1) DEF RAORDEB;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL RETCODE FIXED BIN(31,0);
   DCL INBUF CHAR(6000) VARYING;
   DCL SIGN CHAR(1) VAR;
   DCL REPEAT BUILTIN;
   IF SUBSTR(@CALLFLGS,2,1) /* CLEAR SCREEN? */
     THEN DO;
       BUF=WCC××SBACODE××SBAZERO××RAORDER××SBAZERO××LOW(1)××
         SBACODE××SBAONE××ICORDER;
       CALL SYSTPUT(BUF,RETCODE,'FULLSCR','WAIT','NOHOLD');
       @CALLFLGS = '0'B;
       RETURN;
       END;
   PNLPTR = @PNLSTAPT(@NXTPNL);
   DYNPTR = @PNLDYNPT(@NXTPNL);
 WRITSCR:
   BUF=WCC××SBACODE××SBAZERO××RAORDER××SBAZERO××LOW(1);
   SFLDPTR = ADDR(FLDLOC);
   SCRSIZE=0-PNLLEN;
   DO I = 1 TO FLDCNT;
     IF ^SUBSTR(FLAGS,3,1) /*IS FIELD UNPROTECTED*/
       THEN DO;
         DFLDPTR=DYNPTR;
         DFLDADJ=DFLDADJ+DINOF+INOFF;
         SAVPTR = DFLDPTR;
         DATA=''; /* CLEAR OUT INPUT FIELD */
         END;
     DFLDPTR = DYNPTR;
     DFLDADJ = DFLDADJ+DOUTOF+OUTOFF;
     ATRWRKB = FLAGS & '00111101'B × '01000000'B;
     J = ATRWRKB;
     IF (J>0 & J<10) × (J>16 & J<27) × (J>33 & J<42)
       THEN SUBSTR(ATRWRKB,1,1) = '1'B;
     BUF=BUF××SBACODE××FLDSBA××SFCCODE××ATRWRKC××DATA;
     LASTFLD,WRKPTR=SFLDPTR; /* SAVE FOR END-OF-LOOP */
     WRKADJ = WRKADJ + FLDLEN;
     SFLDPTR = WRKPTR;
     END;
   SFLDPTR=LASTFLD; /* RESTORE POINTER TO LAST FIELD DESCR */
   J = FLDSBAB+1+LEN; /* J NOW EQUALS 1ST BYTE (REL 0) BEYOND FIELD */
   IF J<SCRSIZE
     THEN CALL SET_DUMMY(J,SCRSIZE); /* SET UP DUMMY FIELD AT END */

 SET_DUMMY: PROC(J,K);
 /**********************************************************************
 *                                                                     *
 * SET UP A DUMMY FIELD TO COVER AN AREA OF THE SCREEN NOT COVERED BY  *
 * THE CALLER.                                                         *
 *                                                                     *
 **********************************************************************/
   DCL (J,K) FIXED BIN;
   SBAWRKB=J;
   CALL SBACONV(SBAWRKB,'1'B);
   BUF=BUF××SBACODE××SBAWRKC××SFCCODE××MYATRC;
   IF K-J > 1
     THEN DO;
       IF K=SCRSIZE
         THEN SBAWRKB=0;
         ELSE SBAWRKB=K;
       CALL SBACONV(SBAWRKB,'1'B);
       BUF=BUF××RAORDER××SBAWRKC××LOW(1);
       END;
   END SET_DUMMY;

   IF @CHGCURS < 0
     THEN SBAWRKC=CURSBA;
     ELSE DO;
       SBAWRKB=@CHGCURS;
       CALL SBACONV(SBAWRKB,'1'B);
       END;
   BUF=BUF××SBACODE××SBAWRKC××ICORDER;
 TPUT:
   @CURPNL = @NXTPNL;
     /* INDICATE THE CURRENT PANEL ON THE SCREEN */
   CALL SYSTPUT(BUF,RETCODE,'FULLSCR','WAIT','NOHOLD');
   IF RETCODE ^= 0
     THEN DO;
       PUT EDIT('BAD RETURN CODE FROM SYSTPUT')(A) SKIP(1);
       PUT DATA(RETCODE);
       SIGNAL ERROR;
       END;
   CALL SYSTGET(INBUF,RETCODE,'ASIS','WAIT');
   IF RETCODE ^= 0
     THEN DO;
       PUT EDIT('BAD RETURN CODE FROM SYSTGET')(A) SKIP(1);
       PUT DATA(RETCODE);
       SIGNAL ERROR;
       END;
   AIDWRKC = SUBSTR(INBUF,1,1); /* GET AID BYTE */
   @AID = AIDWRKB;
   IF @AID = '01101110'B /* IS IT PA2? */
     THEN DO; /* IF SO, OPER WANTS SCREEN RE-WRITTEN */
       OUTFLAG(*) = '1'B;
       GO TO WRITSCR;
       END;
   @CHGCURS = -1;
   L = LENGTH(INBUF);
   IF L = 1
     THEN DO;
       @CURLOC = 0;
       RETURN; /* ACCEPT ALL CURRENT INPUT FIELD VALUES */
       END;
   SBAWRKC = SUBSTR(INBUF,2,2); /* GET CURSOR ADDR */
   @CURLOC = SBAWRKB;
   CALL SBACONV(@CURLOC,'0'B); /* CONVERT FROM TRANS CODE */
   IF L ^= 3
     THEN DO;
       I = 4;
       DO WHILE(I<L);
         J=INDEX(SUBSTR(INBUF,I+3),SBACODE);
         IF J=0
           THEN J=L+1;
           ELSE J=J+I+2;
         IF J-I > 3 /* DOES FIELD CONTAIN DATA? */
           THEN DO;
             SFLDPTR = ADDR(FLDLOC);
             DO X = 1 TO FLDCNT;
               SBAWRKB=FLDSBAB+1;
               CALL SBACONV(SBAWRKB,'1'B);
               IF SUBSTR(INBUF,I+1,2)=SBAWRKC
                 THEN LEAVE;
               WRKPTR = SFLDPTR;
               WRKADJ = WRKADJ + FLDLEN;
               SFLDPTR = WRKPTR;
               END;
             /* SFLDPTR POINTS AT THE CORRECT FIELD DEFINITION */
             DFLDPTR=DYNPTR;
             DFLDADJ=DFLDADJ+DINOF+INOFF;
             DATA=SUBSTR(INBUF,I+3,SUFFIX(SUBSTR(
               INBUF,I+3,J-I-3),' '));
             IF SUBSTR(FLAGS,9,1)
               THEN CALL SETCAPS(DATA);
             END;
         I = J;
         END;
       END;

   END DENTCD;
