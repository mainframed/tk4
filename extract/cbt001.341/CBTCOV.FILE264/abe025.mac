 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* ABE025,F,FIND,C,CHANGE */
   %INCLUDE ABESUB;
 ABESUB(ABE025) PARS(0000000000000000) CHECK(YES);
   %INCLUDE ABESUBA;

   DCL 1 LRN_STRUCTURE BASED(LRNPTR),
   %INCLUDE ABELRN;
   %INCLUDE ABELRNA;
   %INCLUDE ABERHPNL;

   DCL SETCAPS ENTRY;
   DCL KEYTABLE(29) CHAR(10) VAR STATIC INIT(
     'ALL',      /*  1 */
     'NALL',     /*  2 */
     'CHARS',    /*  3 */
     'PREFIX',   /*  4 */
     'SUFFIX',   /*  5 */
     'WORD',     /*  6 */
     'X',        /*  7 */
     'NX',       /*  8 */
     'NOT',      /*  9 */
     'COL',      /* 10 */
     'ENDCOL',   /* 11 */
     'NAME',     /* 12 */
     'MASK',     /* 13 */
     'OPER',     /* 14 */
     'STCOL',    /* 15 */
     'HEX',      /* 16 */
     'TEXT',     /* 17 */
     'PICTURE',  /* 18 */
     'ANY',      /* 19 */
     'SUPPRESS', /* 20 */
     'RESET',    /* 21 */
     'NOSHIFT',  /* 22 */
     'SETRC',    /* 23 */
     'MARK',     /* 24 */
     'MK',       /* 25 */
     'RESCAN',   /* 26 */
     'BNDS',     /* 27 */
     'BOUNDS',   /* 28 */
     'OPICTURE');/* 29 */

   DCL HICON CHAR(26) STATIC INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
   DCL LOCON CHAR(26) STATIC INIT('abcdefghijklmnopqrstuvwxyz');
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL KEYLAB(0:29) LABEL;
   DCL REL CHAR(2) VAR INIT('');
   DCL MARKIX FIXED BIN(15,0) INIT(0);
   DCL OCC FIXED BIN(31,0) INIT(1);
   DCL (TEXTSW,PICSW,MASKSW,ENDCOLSW,ANYSW,SUSW,RESW,NOSHSW,SETRCSW,
     ALLSW,FIRSTSW,RESCANSW,OPICSW) BIT(1) INIT('0'B);
   DCL MASKCH CHAR(1) INIT('.');
   DCL MYNAME CHAR(8) INIT('');
   DCL (VER,REP,ANYSTR,WORKSTR) CHAR(80) VAR INIT('');
   DCL (MYHD,S,T,SAVPTR,ORGPTR) PTR;
   DCL TRIN ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL BINDEX ENTRY(CHAR(*) VAR, CHAR(*) VAR, CHAR(*) VAR,FIXED BIN(15,
   0)) RETURNS(FIXED BIN(15,0));
   DCL (CSW,NOT) BIT(1);
   DCL GBLSW BIT(1) STATIC INIT('0'B);
   DCL SYMBOLPM CHAR(8);
   DCL SETTXT CHAR(256) VAR;

   SELECT(CMDINDX);
     WHEN(1,2,3) DO;
       CMDINDX=2; /* IT IS FIND OPERATION */
       FIRSTSW='1'B; /* DEFAULT TO FINDING THE FIRST */
       END;
     OTHERWISE DO;
       CMDINDX=3; /* IT IS CHANGE OPERATION */
       ALLSW='1'B; /* DEFAULT TO CHANGING ALL OCCURRENCES */
       END;
     END; /* SELECT */
   SAVPTR=RHPTR;
   ORGPTR=RECPTR;
   RHRC=0;
   CSW ='0'B;
   NOT ='0'B; /* DEFAULT */
   ENDCOL = 9999; /* DEFAULT */
   COL = 1; /* DEFAULT */
   X = 0; /* DEFAULT IS ALL LINES */
   CHARS = 1; /* DEFAULT IS 1 */
   VER = PARY(1);
   IF CMDINDX = 3 /* IS IT SPFC? */
     THEN DO;
       IF LENGTH(PARY(1))=0
         THEN DO;
           CMDDATA=RHSPFCLST;
           RHRC=0;
           RETURN;
           END;
       I = 3;
       REP = PARY(2);
       END;
     ELSE DO;
       IF LENGTH(PARY(1))=0
         THEN DO;
           CMDDATA=RHSPFFLST;
           RHRC=0;
           RETURN;
           END;
       I = 2;
       END;
   J=I;
   DO I = I TO 16 WHILE(PARY(I) ^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX); /* CALL SPARS */
     GO TO KEYLAB(INDX);
    KEYLAB(0): /* INVALID OPERAND */
     OPER=PARY(I);
     IF VERIFY(OPER,'0123456789')=0 & J=I
       THEN GOTO KEYLAB(15); /* DEFAULT TO STC KEYWORD */
     MSGDATA='INVALID OPERAND';
     RHRC = 8;
     RETURN;
    KEYLAB(1): /* ALL   */
     ALLSW='1'B;
     FIRSTSW='0'B;
     GOTO ENDCASE;
    KEYLAB(2): /* NALL */
     ALLSW='0'B;
     FIRSTSW='1'B;
     IF OPER=''
       THEN OCC=1;
       ELSE OCC=OPER;
     IF OCC<1
       THEN DO;
         MSGDATA='OCC M/B AT LEAST 1';
         RHRC=8;
         RETURN;
         END;
     GO TO ENDCASE;
    KEYLAB(3): /* CHARS  */
    KEYLAB(4): /* PREFIX */
    KEYLAB(5): /* SUFFIX */
    KEYLAB(6): /* WORD   */
     CHARS=INDX-2;
     GO TO ENDCASE;
    KEYLAB(7): /* X */
    KEYLAB(8): /* NX */
     X=INDX-7;
     GO TO ENDCASE;
    KEYLAB(9): /* NOT */
     NOT ='1'B;
     GO TO ENDCASE;
    KEYLAB(10): /* COL */
     COL = OPER;
     GO TO ENDCASE;
    KEYLAB(11): /* ENDCOL */
     ENDCOLSW='1'B;
     ENDCOL = OPER;
     GO TO ENDCASE;
    KEYLAB(12): /* NAME */
     MYNAME = OPER;
     GO TO ENDCASE;
    KEYLAB(13): /* MASK */
     MASKSW ='1'B;
     IF OPER^=''
       THEN MASKCH=OPER;
     GO TO ENDCASE;
    KEYLAB(14): /* OPER */
     REL=OPER;
     SELECT(REL);
       WHEN('=');
       WHEN('^=');
       WHEN('<=');
       WHEN('>=');
       WHEN('<');
       WHEN('>');
       OTHERWISE DO;
         MSGDATA='INVALID OPER='××REL;
         RHRC=8;
         RETURN;
         END;
       END;
     GO TO ENDCASE;
    KEYLAB(15): /* STCOL */
     COL=OPER;
     ENDCOL=LENGTH(PARY(1))+COL-1;
     GO TO ENDCASE;
    KEYLAB(16): /* HEX */
     CALL TRHEX(VER); /* GO TRANSLATE VER */
     IF LENGTH(REP)^=''
       THEN CALL TRHEX(REP); /* GO TRANSLATE REP */
     IF RHRC^=0
       THEN RETURN;
     GO TO ENDCASE;
    KEYLAB(17): /* TEXT */
     TEXTSW='1'B;
     CALL SETCAPS(VER);
     GO TO ENDCASE;
    KEYLAB(18): /* PICTURE */
     PICSW='1'B;
     GO TO ENDCASE;
    KEYLAB(19): /* ANY */
     ANYSW='1'B;
     ANYSTR=VER;
     VER='#';
     GO TO ENDCASE;
    KEYLAB(20): /* SUPPRESS */
     SUSW='1'B;
     GOTO ENDCASE;
    KEYLAB(21): /* RESET */
     RESW='1'B;
     GOTO ENDCASE;
    KEYLAB(22): /* NOSHIFT */
     NOSHSW='1'B;
     GOTO ENDCASE;
    KEYLAB(23): /* SETRC */
     SETRCSW='1'B;
     GOTO ENDCASE;
    KEYLAB(24): /* MARK  */
    KEYLAB(25): /* MK */
     IF OPER=''
       THEN MARKIX=1;
       ELSE MARKIX=OPER;
     IF MARKIX<1 × MARKIX>9
       THEN DO;
         MSGDATA='INVALID MARK ARRAY INDEX';
         RHRC=8;
         RETURN;
         END;
     GOTO ENDCASE;
    KEYLAB(26): /* RESCAN */
     RESCANSW='1'B;
     GOTO ENDCASE;
    KEYLAB(27): /* BNDS */
    KEYLAB(28): /* BOUNDS */
     RH_NCOLS=1;
     RH_OFF=RH_LB;
     RH_LEN=RH_RB-RH_LB+1;
     GOTO ENDCASE;
    KEYLAB(29): /* OPICTURE */
     OPICSW,PICSW='1'B;
     IF LENGTH(REP)^=LENGTH(VER)
       THEN DO;
         MSGDATA='OPICTURE REQUIRES LENGTHS BOTH STRINGS TO BE EQUAL';
         RHRC=8;
         RETURN;
         END;
     DO K=1 TO LENGTH(REP);
       SELECT(SUBSTR(REP,K,1));
         WHEN('<','>','=');
         OTHERWISE DO;
           MSGDATA='OPICTURE REQUIRES STRING-2 CONTAIN ONLY <, >, =';
           RHRC=8;
           RETURN;
           END;
         END; /* SELECT */
       END;
     GOTO ENDCASE;
    ENDCASE:
     END;
   MYHD = HDPTR;
   FINDTEXT = VER;
   IF CMDINDX=2 & ALLSW & ^(SUSW × RESW) /* FIND ALL? */
     THEN DO;
       RHPTR=NULL;
       IF MYNAME^=''
         THEN DO RHPTR=NXTRHEL REPEAT RHPTR->RHNXT WHILE(RHPTR^=NULL)
           UNTIL(RHPTR->RHNAME=MYNAME);
           END;
       IF RHPTR=NULL
         THEN DO;
           RHPTR=SAVPTR;
           I=#CMD('SSE',RHPTR,RHHDRPT); /* DEFINE VIRTUAL DATA SET */
           IF MYNAME^=''
             THEN RHNAME = MYNAME;
           HEXMODE = SAVPTR->HEXMODE;
           RHTRANSW = SAVPTR->RHTRANSW;
           LOFLAG = SAVPTR->LOFLAG;
           END;
       FINDTEXT = VER;
       END;

   /* MAIN LOOP */
   DO UNTIL(HIT=2);
     CALL #ABELSP(RHHDRPT,LRNPTR); /* RECPTR ALSO W/B ALTERED */
     IF LRN_BUFP=NULL
       THEN LEAVE; /* ALL DONE */
     TC=COL; /* IN WHICH SCAN FOR REPLACEMENT STARTS */
     DO HIT=DO_RECORD REPEAT DO_RECORD UNTIL(HIT^=0);
       END;
     END;

   IF ^CSW
     THEN DO;
       RHRC = 4;
       MYHD->MSGDATA='TEXT NOT FOUND';
       END;
     ELSE DO;
       RHRC = 0;
       IF CMDINDX=2 & ALLSW  & ^(SUSW × RESW)  /* FIND ALL */
         THEN DO;
           RECPTR = NXTHDR;
           IF RECPTR = HDPTR
             THEN CURSEQ = 0;
             ELSE CURSEQ = RECSEQ;
           END;
       END;
   CALL SETRCSUB;

 DO_RECORD: PROC RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * DO_RECORD IS CALLED TO DO FIND AND CHANGE PROCESSING, STARTING AT   *
 * GLOBAL VARIABLE TC.  RETURN CODES FROM DO_RECORD HAVE THE           *
 * FOLLOWING SIGNIFICANCE:                                             *
 *                                                                     *
 * 0 - CALL ME AGAIN TO PROCESS THIS RECORD FURTHER.                   *
 * 1 - GET THE NEXT RECORD TO PROCESS.                                 *
 * 2 - TERMINATE PROCESSING OF RECORDS.                                *
 *                                                                     *
 **********************************************************************/
   IF X^=0
     THEN IF X=1 /* DONT DO SUPPRESSED */
       THEN IF SUBSTR(RECFLGS,2,1)
         THEN RETURN(1); /* GET NEXT RECORD */
         ELSE;
       ELSE IF ^SUBSTR(RECFLGS,2,1)
         THEN RETURN(1); /* GET NEXT RECORD */
   BUF=LSPBUF;
   IF TEXTSW
     THEN CALL SETCAPS(BUF); /* TRANSLATE TO HI CASE */
   E=MIN(LENGTH(BUF),ENDCOL)-TC+1;
   /* E=LENGTH AREA TO BE SCANNED FOR REPLACEMENT */
   SELECT;
     WHEN(E <= 0) I=0;
     WHEN(MASKSW) I=DOMASK(SUBSTR(BUF,TC,E),VER,MASKCH);
     WHEN(PICSW) I=DOPIC(SUBSTR(BUF,TC,E),VER);
     WHEN(ANYSW) I=DOANY(SUBSTR(BUF,TC,E),VER);
     WHEN(REL='') I=BINDEX(SUBSTR(BUF,TC,E),VER,KEYTABLE(CHARS+2),
     1);
     OTHERWISE DO;
       I=0;
       SELECT(REL);
         WHEN('=')IF SUBSTR(BUF,TC,E)=VER
           THEN I=TC;
         WHEN('^=')IF SUBSTR(BUF,TC,E)^=VER
           THEN I=TC;
         WHEN('<=')IF SUBSTR(BUF,TC,E)<=VER
           THEN I=TC;
         WHEN('>=')IF SUBSTR(BUF,TC,E)>=VER
           THEN I=TC;
         WHEN('<')IF SUBSTR(BUF,TC,E)<VER
           THEN I=TC;
         WHEN('>')IF SUBSTR(BUF,TC,E)>VER
           THEN I=TC;
         OTHERWISE; /* GETS RID OF COMPILER MESSAGE */
         END;
       END;
     END; /* SELECT */
   IF ((I^=0)&CMDINDX=3) × ((I^=0)&(^NOT)&CMDINDX=2) ×((I=0)&NOT&
   CMDINDX=2)
     THEN DO;
       /* IT IS EITHER:
       CHANGE & STRING FOUND IN LINE.
       FIND & STRING FOUND & 'NOT' KEYWORD NOT USED.
       FIND & STRING NOT FOUND & 'NOT' KEYWORD USED.
       */
       OCC=OCC-1;
       IF  OCC>0
         THEN RETURN(1); /* NOT PROPER OCCURRENCE YET */
       CSW ='1'B;
       IF CMDINDX=2 /* FIND? */
         THEN RETURN(DO_RECORD_FIND);
         ELSE RETURN(DO_RECORD_CHANGE);
       END;
   RETURN(1); /* GET NEXT RECORD */
   END DO_RECORD;

 DO_RECORD_CHANGE: PROC RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * CALLED ON A HIT TO DO CHANGE PROCESSING.                            *
 *                                                                     *
 **********************************************************************/
   DCL OLDL FIXED BIN(15,0);

   OLDL=LENGTH(LSPBUF); /* SAVE OLD LENGTH OF LSPBUF */
   SAVEFLAG ='1'B;
   IF ^ENDCOLSW
     THEN E=LENGTH(BUF)-TC+1;
   BUF=SUBSTR(LSPBUF,TC,E);
   IF NOSHSW & LENGTH(VER)^=LENGTH(REP)
     THEN DO;
       IF LENGTH(REP) > LENGTH(VER)
         THEN DO;
           IF LENGTH(BUF)>=I+LENGTH(VER)
             THEN DO;
               IF SUBSTR(BUF,I+LENGTH(VER),1)=' '
                 THEN B=1;
                 ELSE B=0;
               DO FOREVER=1 REPEAT FOREVER;
                 IF SUBSTR(BUF,I+LENGTH(VER),
                   MIN(LENGTH(REP)-LENGTH(VER)+B,
                   LENGTH(BUF)-(I+LENGTH(VER))+1))=''
                   THEN LEAVE;
                 J=I+LENGTH(REP);
                 IF J<=LENGTH(BUF)
                   THEN DO;
                     K=INDEX(SUBSTR(BUF,J),'  ');
                     IF K=0
                       THEN J=LENGTH(BUF)+1;
                       ELSE DO;
                         M=K+LENGTH(REP)-LENGTH(VER);
                         SUBSTR(BUF,I+LENGTH(VER),M)
                           =' '××
                           SUBSTR(BUF,I+LENGTH(VER),M-1);
                         END;
                     END;
                 IF J>LENGTH(BUF)
                   THEN DO;
                     MSGDATA=
                       'CHANGE WOULD CAUSE TRUNCATION';
                     RHRC=8;
                     CALL SETRCSUB;
                     RETURN(2); /* ALL DONE PROCESSING */
                     END;
                 END;
               END;
           BUF=SUBSTR(BUF,1,I-1)××REP××
             SUBSTR(BUF,I+LENGTH(REP));
           END;
         ELSE     /* LENGTH(REP) < LENGTH(VER) */
           BUF=SUBSTR(BUF,1,I-1)××REP××
             REPEAT(' ',LENGTH(VER)-LENGTH(REP)-1)××
             SUBSTR(BUF,I+LENGTH(VER));
       END;
     ELSE DO;
       IF ^OPICSW
         THEN WORKSTR=REP;
         ELSE DO; /* OPICTURE SPECIFIED */
           WORKSTR=SUBSTR(BUF,I,LENGTH(VER));
           DO IC=1 TO LENGTH(WORKSTR);
             SELECT(SUBSTR(REP,IC,1));
               WHEN('>') SUBSTR(WORKSTR,IC,1)=
                 TRANSLATE(SUBSTR(WORKSTR,IC,1),HICON,LOCON);
               WHEN('<') SUBSTR(WORKSTR,IC,1)=
                 TRANSLATE(SUBSTR(WORKSTR,IC,1),LOCON,HICON);
               OTHERWISE;
               END; /* SELECT */
             END;
           END;
       BUF=SUBSTR(BUF,1,I-1)××WORKSTR××
         SUBSTR(BUF,I+LENGTH(VER));
       END;
   IF ^ENDCOLSW
     THEN TE=MAXLEN(LSPBUF)-TC+1;
     ELSE TE=MIN(MAXLEN(LSPBUF),ENDCOL)-TC+1;
   /* TE=MAX LENGTH THAT CAN BE INSERTED */
   IF TE > E × ENDCOL>LENGTH(LSPBUF)
     THEN LSPBUF=SUBSTR(LSPBUF,1,TC-1)××BUF;
     ELSE SUBSTR(LSPBUF,TC,E)=BUF;
   IF ^RESCANSW
     THEN TC=TC+I+LENGTH(REP)-1;/* -1 ADDED 8/17/84 */
     ELSE IF OLDL=LENGTH(LSPBUF)
       THEN TC=TC+1;
   IF ^ALLSW  /* ALL? */
     THEN DO;
       CALL LSP_FINISH; /* FINISH LSP PROCESSING */
       RHRC = 0;
       CALL SETRCSUB;
       RETURN(2); /* ALL DONE PROCESSING */
       END;
    IF TC>LENGTH(LSPBUF)
      THEN RETURN(1); /* GET NEXT RECORD */
      ELSE RETURN(0); /* LOOK FOR ANOTHER IN THIS RECORD */
   END DO_RECORD_CHANGE;

 DO_RECORD_FIND: PROC RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * CALLED ON A HIT TO DO FIND PROCESSING.                              *
 *                                                                     *
 **********************************************************************/
   DCL ORGPTR PTR;
   IF ALLSW /* ALL? */
     THEN DO;
       SELECT;
         WHEN(SUSW) /* SUPPRESS */
           SUBSTR(RECFLGS,2,1)='1'B;
         WHEN(RESW) /*  RESET */
           SUBSTR(RECFLGS,2,1)='0'B;
         OTHERWISE DO;
           SEQ=LRN_RHP->RECPTR->RECSEQ;
           IF RECPTR^=RHPTR
             THEN IF RECSEQ>=SEQ
               THEN SEQ=RECSEQ+1;
           CALL #ADD(RHPTR,RHHDRPT,RECPTR,RECPTR,SEQ,LSPBUF,0);
           END;
         END; /* SELECT */
       RETURN(1); /* GET NEXT RECORD */
       END;
     ELSE DO;
       SELECT;
         WHEN(SUSW)
           SUBSTR(RECFLGS,2,1)='1'B;
         WHEN(RESW)
           SUBSTR(RECFLGS,2,1)='0'B;
         OTHERWISE
           SUBSTR(RECFLGS,2,1)='0'B;
         END; /* SELECT */
       IF MARKIX^=0
         THEN DO;
           MARKARY(MARKIX)=RECSEQ;
           PUT STRING(MSGDATA) EDIT(RECSEQ)(P'ZZZZZZZ9');
           CALL LSP_FINISH; /* FINISH LSP PROCESSING */
           END;
       RHRC = 0;
       CALL SETRCSUB;
       RETURN(2); /* ALL DONE FIND PROCESSING */
       END;
   END DO_RECORD_FIND;

 DOANY:PROC(STR,VER) RETURNS(FIXED BIN(15,0));
   DCL (STR,VER) CHAR(*) VAR;
   DCL (I,J,K) FIXED BIN(15,0);
   IF LENGTH(STR)=0 × LENGTH(ANYSTR)=0
     THEN RETURN(0);
   K=0;
   DO I=1 TO LENGTH(ANYSTR);
     J=INDEX(STR,SUBSTR(ANYSTR,I,1));
     IF J^=0
       THEN IF K=0
         THEN K=J;
         ELSE K=MIN(K,J);
     END;
   RETURN(K);
   END DOANY;

 DOMASK:PROC(STR,VER,CH) RETURNS(FIXED BIN(15,0));
   DCL (STR,VER) CHAR(*) VAR;
   DCL CH CHAR(1);
   DCL (I,J,K,L,M) FIXED BIN(15,0); /* M,I=INDEX TO STR */
   /* J=INDEX TO VER */
   /* K=INDEX IN VER TO FIRST MASK CHAR */
   K=INDEX(VER,CH);
   IF K=0
     THEN K=LENGTH(VER)+1;
   M=0;
   DO UNTIL((I>LENGTH(STR)) × (J>LENGTH(VER)));
     IF K=1
       THEN DO;
         L,I,M=M+1;
         J=1;
         END;
       ELSE DO;
         IF M=LENGTH(STR)
           THEN RETURN(0);
         J=INDEX(SUBSTR(STR,M+1),SUBSTR(VER,1,K-1));
         IF J=0
           THEN RETURN(0);
         M=M+J;
         L,I=M+K-1;
         J=K;
         END;
     DO WHILE(J<=LENGTH(VER) & I<=LENGTH(STR));
       IF SUBSTR(VER,J,1)=CH× SUBSTR(VER,J,1)=SUBSTR(STR,I,1)
         THEN DO;
           J=J+1;
           I=I+1;
           END;
         ELSE I=LENGTH(STR)+1;
       END;
     END;
   IF J<=LENGTH(VER)
     THEN RETURN(0);
     ELSE RETURN(L);
   END DOMASK;

 DOPIC:PROC(STR,VER) RETURNS(FIXED BIN(15,0));
   DCL (STR,VER) CHAR(*) VAR;
   DCL (I,J,K,L,M) FIXED BIN(15,0);
   DCL HITSW BIT(1);
   DCL TRC CHAR(1) VAR;
   DCL TC CHAR(1); /* I=INDEX IN STR TO CURRENT CHAR TO BE EXAMINED */
   /* J=INDEX IN VER TO CURRENT CHAR TO BE EXAMINED */
   I,J=1;
   K=I;
   DO UNTIL((K>LENGTH(STR))×(J>LENGTH(VER))×(I>LENGTH(STR)));
     HITSW='0'B;
     TC=SUBSTR(STR,K,1);
     SELECT(SUBSTR(VER,J,1));
       WHEN('=') HITSW='1'B; /* DON'T CARE */
       WHEN('^') /* ANY NON-BLANK CHAR */
       IF TC^=' '
         THEN HITSW='1'B; /* GOOD - TEST NEXT CHAR */
       WHEN('.')DO; /* ANY NON-DISPLAYABLE CHARACTER */
         TRC=TC;
         CALL #ABETR(TRC);
         IF TRC^=TC
           THEN HITSW='1'B; /* GOT NON-DISPLAYABLE CHAR */
         END;
       WHEN('#') /* ANY NUMERIC CHARACTER */
       IF VERIFY(TC,'0123456789')=0
         THEN HITSW='1'B; /* GOT NUMERIC */
       WHEN('_') /* ANY NON-NUMERIC CHARACTER */
       IF VERIFY(TC,'0123456789')^=0
         THEN HITSW='1'B; /* GOT NON-NUMERIC */
       WHEN('@')DO; /* ANY ALPHABETIC CHARACTER */
         CALL SETCAPS(TC);
         IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#')=0
           THEN HITSW='1'B;
         END;
       WHEN('<') /* ANY LOWERCASE CHARACTER */
       IF VERIFY(TC,'abcdefghijklmnopqrstuvwxyz')=0
         THEN HITSW='1'B;
       WHEN('>') /* ANY UPPERCASE CHARACTER */
       IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#')=0
         THEN HITSW='1'B;
       WHEN('$')DO; /* ANY SPECIAL CHARACTER */
         CALL SETCAPS(TC);
         IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#0123456789')^=0
           THEN HITSW='1'B;
         END;
       OTHERWISE /* CHECK SPECIFIED CHARACTER */
       IF TC=SUBSTR(VER,J,1) /* OK */
         THEN HITSW='1'B;
       END;
     IF HITSW
       THEN DO; /* OK - TEST NEXT CHAR */
         K=K+1;
         J=J+1;
         END;
       ELSE DO; /* BAD - START OVER ON PICTURE */
         J=1;
         I=I+1;
         K=I;
         END;
     END;
   IF J>LENGTH(VER)
     THEN RETURN(I);
     ELSE RETURN(0);
   END DOPIC;

 LSP_FINISH: PROC;
   /********************************************************************
   *                                                                   *
   * TIME TO FINISH UP ABELSP PROCESSING.                              *
   *                                                                   *
   ********************************************************************/
   DCL ORGPTR PTR;

   ORGPTR=LRN_ORGPTR; /* SAVE ORIGINAL POINTER */
   LRN_EOF='1'B;
   CALL #ABELSP(RHHDRPT,LRNPTR); /* FINISH LSP PROCESSING */
   IF ^(RESW × SUSW)
     THEN IF ORGPTR=RHPTR
       THEN CALL #MD(RHPTR,RHHDRPT,0);
       ELSE CALL #NC(RHPTR,ORGPTR);
   END LSP_FINISH;

 SETRCSUB: PROC;
 /********************************************************************
 *                                                                   *
 * MUST BE THE LAST THING CALLED PRIOR TO TERMINATING THE SUBCOMMAND.*
 * IT WILL BE VARIABLE &RC IF NECESSARY, AND WILL RESTORE RHPTR TO   *
 * ITS ORIGINAL VALUE.                                               *
 *                                                                   *
 ********************************************************************/
   DCL FRC DEC FLOAT(16);
   IF SETRCSW
     THEN DO;
       SYMBOLPM='RC';
       IF RHRC=0
         THEN FRC=0;
         ELSE FRC=4;
       CALL #SETA(RHHDRPT,RH_SYMTREE,SYMBOLPM,FRC);
       END;
   RHPTR=SAVPTR;
   END SETRCSUB;

 TRHEX:PROC(STR);
   DCL (STR,OUTSTR) CHAR(80) VAR;
   IF MOD(LENGTH(STR),2)^=0
     THEN DO;
       MSGDATA='HEX TEXT MUST BE AN EVEN NUMBER OF CHARACTERS';
       RHRC=8;
       RETURN;
       END;
   CALL SETCAPS(STR);
   IF VERIFY(STR,'ABCDEF0123456789')^=0
     THEN DO;
       MSGDATA='INVALID HEX CHARACTERS SPECIFIED';
       RHRC=8;
       RETURN;
       END;
   OUTSTR=REPEAT(' ',LENGTH(STR)/2-1);
   CALL TRIN(STR,OUTSTR);
   STR=OUTSTR;
   END TRHEX;

   END ABE025;
