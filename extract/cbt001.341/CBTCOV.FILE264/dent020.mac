   /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT020 - LL */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RENT';
   % @RENTNAME ='DENT020';
   % INCLUDE DENTSUB; /*PARY(1) (2)  (3)  (4)   (5)  (6)  */
                      /*     LL <L1> <L2> <LEN> <LM> <RM> */
   DCL LAST FIXED BIN(31,0) INIT(99999999);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL (SAVPTR,TMPPTR,ORGPTR) PTR;
   RHRC=0;
   IF PARY(2) =''
     THEN DO;
       MSGDATA ='NEW LINE LENGTH MUST BE SPECIFIED';
       RHRC = 8;
       RETURN;
       END;
   L1=PARY(2);
   L2=PARY(3);
   LEN=PARY(4);
   LM=1; /* DEFAULT TO LEFT-MARGIN=1 */
   RM=0; /* DEFAULT TO NOT TEXT-ENTRY */
   IF PARY(5)^=''
     THEN DO;
       LM=PARY(5);
       IF PARY(6)^=''
         THEN RM=PARY(6);
       END;
   IF LEN <= 0
     THEN DO;
       MSGDATA ='LINE LENGTH MUST BE GREATER THAN 0';
       RHRC = 8;
       RETURN;
       END; /* L1 AND L2 NOW EQUAL RANGE OF LINES TO ADJUST */
   IF RM>0 & LM^=1
     THEN DO;
       MSGDATA ='LEFT-MARGIN M/B 1 IF RIGHT-MARGIN SPECIFIED';
       RHRC = 8;
       RETURN;
       END; /* L1 AND L2 NOW EQUAL RANGE OF LINES TO ADJUST */
   ORGPTR = RECPTR;
   CALL #MD(RHPTR,SUBENT,L1); /* CALL MDPROC */
   SAVPTR = RECPTR;
   IF RECSEQ < L1
     THEN DO;
       MSGDATA ='NO LINES IN RANGE';
       RHRC = 8;
       RETURN;
       END;
   ON CONDITION(STOP)BEGIN;
     CALL #RESEQ(RHPTR,SUBENT,SAVPTR,'NOSAVE','NORENUM',LAST,RHPPTR);
     /* CALL RESEQ */
     CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL NEWCUR */
     GO TO QUIT;
     END;
   PRECK:PROC(PT) RETURNS(FIXED BIN(15,0));
     /* RETURNS THE # OF BLANKS IN FRONT OF RECSTR - ALSO STRIPS
     TRAILING BLANKS. */
     DCL PT PTR;
     DCL P FIXED BIN(15,0);
     T=SUFFIX(PT->RECSTR,' '); /* TO BYPASS COMPILER BUG */
     PT->RECSTR=SUBSTR(PT->RECSTR,1,T); /* TO BYPASS COMPILER BUG */
     P = PREFIX(PT->RECSTR,' ');
     IF P^=0
       THEN P = P-1; /* P = # BLNKS AT FRONT */
     P=MAX(P,LM-1);
     IF P>=LEN
       THEN DO;
         MSGDATA='INDENTATION EXCEEDS NEW LINE LENGTH';
         SIGNAL CONDITION(STOP);
         END;
     RETURN(P);
     END PRECK;
   IF RM>0
     THEN CALL TEPROC;
   DO RECPTR=SAVPTR REPEAT NXTPTR WHILE(RECSEQ<=L2) UNTIL(NXTPTR=HDPTR);
     /* FIRST DETERMINE # BLANKS AT FRONT.  ALL RECORDS WITH
     SAME # PRECEDING BLANKS WILL BE TREATED AS A UNIT. */
     P = PRECK(RECPTR); /* NEXT SPLIT LINE, IF NECESSARY */
     LSTR = LENGTH(RECSTR); /* TO BYPASS COMPILER BUG */
     DO WHILE(LSTR>LEN); /* TO BYPASS COMPILER BUG */
       DO I = LEN TO P BY -1;
         IF SUBSTR(RECSTR,I,1)=' '
           THEN LEAVE;
         END; /* I = INDEX TO LAST BLANK AN RECSTR */
       IF I<= P
         THEN DO;
           MSGDATA='WORD LONGER THAN NEW LINE LENGTH';
           SIGNAL CONDITION(STOP);
           END;
       BUF=SUBSTR(RECSTR,1,P)××SUBSTR(RECSTR,I+1);
       SUBSTR(BUF,1,P)='';
       RECSTR=SUBSTR(RECSTR,1,I);
       T=SUFFIX(RECSTR,' '); /* TO BYPASS COMPILER BUG */
       RECSTR=SUBSTR(RECSTR,1,T); /* TO BYPASS COMPILER BUG */
       SEQ = -1;
       CALL #ADD(RHPTR,SUBENT,RECPTR,RECPTR,SEQ,BUF,RHPPTR);
       /* CALL ADDREC - RECPTR IS BUMPED */
       LSTR = LENGTH(RECSTR); /* TO BYPASS BUG */
       END; /* NEXT COMBINE LINES, IF NECESSARY */
     DO WHILE(NXTPTR^=HDPTR);
       IF NXTPTR->RECSEQ > L2
         THEN LEAVE; /* GET OUT IF END OF LINE # RANGE */
       PN = PRECK(NXTPTR);
       IF PN ^= P
         THEN LEAVE; /* GET OUT IF PREFIXED BLANK COUNT CHANGES*/
       LA = LEN - LENGTH(RECSTR);
       IF LA < 2
         THEN LEAVE; /* MUST BE ROOM FOR 1 BLANK & 1 CHAR */
       IF NXTPTR->RECSTR=''
         THEN LEAVE; /* LEAVE IF NEXT LINE IS ALL BLANK */
       IF LENGTH(NXTPTR->RECSTR)>=LM-1
         THEN IF SUBSTR(NXTPTR->RECSTR,1,LM-1)^=''
           THEN LEAVE;
           ELSE;
         ELSE IF NXTPTR->RECSTR^=''
           THEN LEAVE;
       LP = LENGTH(NXTPTR->RECSTR)-P;
       IF LP >= LA
         THEN DO LP=LA-1 TO 1 BY -1;
           IF SUBSTR(NXTPTR->RECSTR,LP+P+1,1)=' '
             THEN LEAVE;
           END;
       IF LP=0
         THEN LEAVE; /* GET OUT IF NO CHARS TO MOVE */
       RECSTR=RECSTR××' '××SUBSTR(NXTPTR->RECSTR,P+1,LP);
       T=SUFFIX(RECSTR,' '); /* TO BYPASS BUG IN COMPILER */
       RECSTR=SUBSTR(RECSTR,1,T); /* TO BYPASS BUG IN COMPILER */
       IF P+LP >= LENGTH(NXTPTR->RECSTR)
         THEN NXTPTR->RECSTR='';
         ELSE SUBSTR(NXTPTR->RECSTR,P+1)=SUBSTR(NXTPTR->RECSTR,P+LP+
         PREFIX(SUBSTR(NXTPTR->RECSTR,P+1+LP),' '));
       IF NXTPTR->RECSTR=' '
         THEN DO;
           IF ORGPTR=NXTPTR
             THEN ORGPTR=RECPTR;
           CALL #PUTSLOT(RHPTR,SUBENT,NXTPTR); /* CALL PUTSLOT */
           END;
         ELSE LEAVE;
       END;
     END;
   CALL #RESEQ(RHPTR,SUBENT,SAVPTR,'NOSAVE','NORENUM',LAST,RHPPTR);
   /* CALL RESEQ */
   CALL #NC(RHPTR,SUBENT,ORGPTR); /* CALL DENTNC */
   QUIT:RHRC = 0;
   SAVEFLAG='1'B;
 TEPROC:PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO DO TEXT-ENTRY PROCESSING.                                 *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,L,M) FIXED BIN(15,0);
   CALL #MD(RHPTR,SUBENT,L2);
   DO RECPTR=RECPTR REPEAT LSTPTR WHILE(RECSEQ>=L1) UNTIL(LSTPTR=HDPTR);
     I=PREFIX(RECSTR,' ');
     IF I>1
       THEN RECSTR=SUBSTR(RECSTR,I);
       ELSE IF LSTPTR^=HDPTR
         THEN IF LSTPTR->RECSEQ>=L1
           THEN IF LSTPTR->RECSTR^=''
             THEN IF LENGTH(LSTPTR->RECSTR)>=RM
               THEN DO;
                 I=SUFFIX(LSTPTR->RECSTR,' ');
                 IF I=RM
                   THEN DO; /* WORD IS SPLIT BETWEEN TWO LINES */
                     DO J=RM TO 1 BY -1;
                       IF ^(SUBSTR(LSTPTR->RECSTR,J,1)^=' ')
                         THEN LEAVE;
                       END;
                     M=LENGTH(RECSTR);
                     DO K=1 TO M;
                       IF ^(SUBSTR(RECSTR,K,1)^=' ')
                         THEN LEAVE;
                       END;
                     BUF=SUBSTR(LSTPTR->RECSTR,J+1,RM-J)××
                       SUBSTR(RECSTR,1,K-1); /* BUF=WORD */
                     LSTPTR->RECSTR=SUBSTR(LSTPTR->RECSTR,1,J);
                     M=LENGTH(RECSTR);
                     DO K=K TO M;
                       IF ^(SUBSTR(RECSTR,K,1)=' ')
                         THEN LEAVE;
                       END;
                     IF K>LENGTH(RECSTR)
                       THEN RECSTR='';
                       ELSE RECSTR=SUBSTR(RECSTR,K);
                     SEQ = -1;
                     CALL #ADD(RHPTR,SUBENT,LSTPTR,RECPTR,SEQ,
                       BUF,RHPPTR);
                     END;
                 END;
     END;
   END TEPROC;

   END DENT020;
