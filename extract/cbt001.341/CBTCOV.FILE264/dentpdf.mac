 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENTPDF */
 DENTPDF:  PROC(PSTR,PCUR) RETURNS(PTR) OPTIONS(REENTRANT);
 /**********************************************************************
 * THIS SUBROUTINE ACCEPTS A CHARACTER STRING WHICH CONTAINS A PANEL
 * DEFINITION, AND RETURNS A POINTER TO A LIST OF STRUCTURES
 * CONTAINING CHARACTER STRINGS CONTAINING THE STRUCTURES
 * AS DEFINED IN @PANELDS (SEE TGS SUBROUTINES MANUAL), AND ALSO
 * CONTAINING THE ORIGINAL PANEL DEFINITION FOR LATER POSSIBLE
 * UPDATING.  THE ORIGINAL PANEL DEFINITION SHOULD BE IN THE FORM OF
 * THE CHARACTER STRING PASSED TO THE @SCREEN MACRO (SEE TGS SUBROUTINES
 * MANUAL).  THAT IS, LITERAL FIELDS SHOULD BEGIN WITH AN '@', AND
 * INPUT FIELDS SHOULD BEGIN WITH AN '&'.  HOWEVER, ONLY THE 'X'
 * PICTURE SPECIFICATION CAN BE USED TO DEFINE INPUT FIELDS, AND THE
 * '#' CHARACTER IS NOT USED TO DEFINE THE START OF NEW LINES.
 * INSTEAD, BLANKS SHOULD BE USED TO FILL OUT EACH LINE TO 80 BYTES.
 *
 * PCUR IS THE LOCATION OF THE CURSOR.
 **********************************************************************/
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(15,0));
   DCL PSTR CHAR(32767) VAR;
   DCL (PCUR,TCUR) FIXED BIN(15,0);
   DCL NULL BUILTIN;
   DCL DEFOFF FIXED BIN(31,0) INIT(0);
     /* OFFSET IN CONSTRUCTED CONTROL BLOCK TO ORIGINAL
     CHARACTER STRING CONTAINING PANEL DEFINITION. */
   DCL 1 @PANEL UNALIGNED,
     3 @OLDLEN FIXED BIN(15,0) INIT(-1),
       /* OLD LENGTH FIELD */
     3 @PNLNAME CHAR(8) INIT('SCREEN1'),
       /* NAME OF THIS PANEL */
     3 @PNLNUM FIXED BIN(15,0) INIT(1),
       /* PANEL NUMBER */
     3 @INCNT FIXED BIN(15,0) INIT(0),
       /* NUMBER OF UNPROTECTED FIELDS IN PANEL */
     3 @FLDCNT FIXED BIN(15,0) INIT(0),
       /* NUMBER OF FIELDS IN PANEL */
     3 @CURSBA FIXED BIN(15,0) INIT(0),
       /* LOCATION ON THE SCREEN WHERE THE CURSOR IS TO BE
       POSITIONED.  LOCATION IS IN THE FORM ACCEPTABLE
       TO THE SBA ORDER */
     3 @CURSBAB FIXED BIN(15,0),
       /* LOCATION ON THE SCREEN WHERE THE CURSOR IS TO
       BE POSITIONED.  LOCATION IS IN THE FORM OF A NUMBER
       FROM 0 TO 1919 */
     3 @PNLLEN FIXED BIN(31,0) INIT(24);
       /* LENGTH OF THIS PANEL DESCRIPTION */
   DCL 1 @FLDDESCR UNALIGNED BASED(@FLDPTR),
       /* THIS SUBSTRUCTURE IS REPEATED FOR EVERY FIELD IN THE PANEL */
     2 DESCNXT PTR,
       /* PTR TO NEXT FIELD (NULL IF LAST) */
     2 @FLDLEN FIXED BIN(15,0),
       /* LENGTH OF THIS FIELD DESCRIPTION */
     2 @FLDNAME CHAR(8),
       /* NAME OF THIS FIELD */
     2 @FLDNUM FIXED BIN(15,0),
       /* NUMBER OF FIELD WITHIN PANEL */
     2 @FLDINUM FIXED BIN(15,0),
       /* NUMBER OF INPUT FIELD WITHIN PANEL */
     2 @INLEN FIXED BIN(15,0),
       /* LENGTH OF INPUT FIELD */
     2 @INOFF FIXED BIN(31,0),
       /* OFFSET IN THE SCREEN1_IN SUBSTRUCTURE TO THE
       ASSOCIATED INPUT FIELD */
     2 @OUTOFF FIXED BIN(31,0),
       /* OFFSET IN THE SCREEN1_OUT SUBSTRUCTURE TO THE
       ASSOCIATED OUTPUT FIELD */
     2 @PICOFF FIXED BIN(31,0),
       /* OFFSET IN FIELD DESCRIPTION TO PICLEN */
     2 @FLAGS BIT(16),
       /* SEE @PANELDS IN SUBRTNES MANUAL */
     2 @FLDSBA FIXED BIN(15,0),
       /* LOCATION ON THE SCREEN OF THE ATTRIBUTE BYTE
       FOR THIS FIELD.  THE LOCATION IS IN THE FORM
       ACCEPTABLE TO THE SBA ORDER */
     2 @FLDSBAB FIXED BIN(15,0),
       /* LOCATION ON THE SCREEN OF THE ATTRIBUTE BYTE
       FOR THIS FIELD.  THE LOCATION IS IN THE FORM
       OF A NUMBER FROM 0 TO 1919. */
     2 @LITLEN FIXED BIN(15,0),
       /* LENGTH OF LITERAL, OR ZERO IF NOT LITERAL */
     2 @LITERAL CHAR(L REFER (@LITLEN)),
       /* LITERAL TO BE DISPLAYED */
     2 @PICLEN FIXED BIN(15,0),
       /* LENGTH OF PICTURE, OR ZERO */
     2 @PICTURE CHAR(M REFER (@PICLEN));
       /* PICTURE (XXX...XX) */
   DCL 1 SCREEN1_DYNAM UNALIGNED BASED(DYNPTR),
     /* THIS SUBSTRUCTURE CONTAINS ALL OF THE DYNAMICALLY
     MODIFIED VARIABLES ASSOCIATED WITH A PANEL. */
     2 @DINOFF FIXED BIN(31,0),
       /* OFFSET IN SCREEN1_DYNAM TO THE SCREEN1_IN SUBSTRUCTURE */
     2 @DOUTOFF FIXED BIN(31,0),
       /* OFFSET IN SCREEN1_DYNAM TO THE SCREEN1_OUT SUBSTRUCTURE */
     2 @DYNCNT FIXED BIN(15,0),
       /* NUMBER OF FIELDS IN THIS PANEL */
     2 SCREEN1_OUTFLAG(L REFER(@DYNCNT)) BIT(1);
       /* ONE BIT IN THIS ARRAY FOR EVERY FIELD ON A PANEL.
       EVERYTIME YOU WANT A FIELD RE-WRITTEN ON THE SCREEN,
       YOU SHOULD TURN THIS BIT ON. */
   DCL 1 ELEMENT UNALIGNED BASED(FLDPTR),
       /* ONE ELEMENT SUCH AS THIS IS APPENDED TO SCREEN1_DYNAM FOR
       EACH FIELD ON THE PANEL.  THE SUM TOTAL OF THESE ELEMENTS
       CONSTITUTE THE SUBSTRUCTURE SCREEN1_OUT (SEE @PANELDS).
       THEN, ONE ELEMENT SUCH AS THIS IS APPENDED TO SCREEN1_DYNAM
       FOR EACH INPUT FIELD ON THE PANEL.  THE SUM TOTAL OF THESE
       ELEMENTS CONSITITUTE THE SUBSTRUCTURE SCREEN1_IN (SEE @PANELDS).
       BEFORE CALLING SCRWRIT TO WRITE A SCREEN, EACH FIELD IN
       SCREEN1_OUT SHOULD BE SET TO THE VALUE YOU WANT TO APPEAR
       ON THE SCREEN.  ALL ELEMENTS ARE INITIALIZED TO THE
       LITERAL VALUE ASSOCIATED WITH THE CORRESPONDING FIELD IN
       THE PANEL. */
     2 ELNXT PTR,
       /* PTR TO NEXT ELEMENT (NULL IF LAST). */
     2 FIELDLEN FIXED BIN(15,0),
       /* LENGTH OF FIELD */
     2 FIELD CHAR(FL REFER(FIELDLEN)) VAR;
   DCL (INELHEAD,INELFOOT) PTR;
   INELHEAD,INELFOOT=NULL;
     /* INELHEAD POINTS TO TOP OF CHAIN OF ELEMENTS FOR SCREEN1_IN */
     /* INELFOOT POINTS TO BOT OF CHAIN OF ELEMENTS FOR SCREEN1_IN */
   DCL (OTELHEAD,OTELFOOT) PTR;
   OTELHEAD,OTELFOOT=NULL;
     /* OTELHEAD POINTS TO TOP OF CHAIN OF ELEMENTS FOR SCREEN1_OUT */
     /* OTELFOOT POINTS TO BOT OF CHAIN OF ELEMENTS FOR SCREEN1_OUT */
   DCL (FLDHEAD,FLDFOOT) PTR;
   FLDHEAD,FLDFOOT=NULL;
     /* FLDHEAD POINTS TO TOP OF CHAIN OF FIELD DESCRIPTOR STRUCTURES */
     /* FLDFOOT POINTS TO BOT OF CHAIN OF FIELD DESCRIPTOR STRUCTURES */
   DCL INOFFCTL FIXED BIN(31,0) INIT(0);
     /* CURRENT OFFSET IN SCREEN1_IN SUBSTRUCTURE */
   DCL OUTOFFCTL FIXED BIN(31,0) INIT(0);
     /* CURRENT OFFSET IN SCREEN1_OUT SUBSTRUCTURE */
   DCL PREFIX ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SBACONV ENTRY(FIXED BIN(15,0),BIT(1));
   DCL 1 STREL BASED(STRPTR),
     2 STRNXT PTR,
     2 STR CHAR(32767) VAR;
   DCL STRHD PTR;
   STRHD,STRPTR=NULL;
   TCUR=PCUR;
   CALL SBACONV(TCUR,'1'B);
   @CURSBA=TCUR;
   @CURSBAB=PCUR;
   DCL NUMPIC PIC'99999';
   NXTF=NXTFLD(0);
   DO WHILE(NXTF<=LENGTH(PSTR));
     CURF=NXTF;
     NXTF=NXTFLD(CURF);
     FL=NXTF-CURF-1; /* FL = LENGTH OF FIELD */
     L,M=0;
     IF SUBSTR(PSTR,CURF,1)='@'
       THEN L=FL;
       ELSE DO;
         M=FL;
         @INCNT=@INCNT+1;
         END;
     ALLOCATE @FLDDESCR SET(@FLDPTR);
     CALL ADDQ(FLDHEAD,FLDFOOT,@FLDPTR); /* GO ADD TO LINKED LIST */
     @FLDLEN=38+L+M;
     @PNLLEN=@PNLLEN+@FLDLEN;
     @FLDCNT=@FLDCNT+1;
     NUMPIC=@FLDCNT;
     @FLDNAME='F'××NUMPIC;
     @FLDNUM=@FLDCNT;
     @OUTOFF=OUTOFFCTL;
     OUTOFFCTL=OUTOFFCTL+FL+4;
     ALLOCATE ELEMENT SET(FLDPTR);
     CALL ADDQ(OTELHEAD,OTELFOOT,FLDPTR);
     FIELD='';
     IF SUBSTR(PSTR,CURF,1)='@'
       THEN DO;
         @FLDINUM=0;
         @INLEN=0;
         @INOFF=0;
         @PICOFF=0;
         @FLAGS='0011100010000000'B;
         @LITLEN=FL;
         @LITERAL=SUBSTR(PSTR,CURF+1,FL);
         FIELD=@LITERAL;
         @PICLEN=0;
         END;
       ELSE DO;
         @FLDINUM=@INCNT;
         @INLEN=FL;
         @INOFF=INOFFCTL;
         INOFFCTL=INOFFCTL+FL+4;
         ALLOCATE ELEMENT SET(FLDPTR);
         CALL ADDQ(INELHEAD,INELFOOT,FLDPTR);
         FIELD='';
         @PICOFF=36;
         @FLAGS='0000000010000000'B;
         @LITLEN=0;
         @PICLEN=FL;
         @PICTURE=REPEAT('X',FL-1);
         IF FL>0
           THEN IF SUBSTR(PSTR,CURF+1,1)^='X'
             THEN @FLDNAME=SUBSTR(PSTR,CURF+1,FL); /* USER FIELD NAME */
         END;
     TCUR,@FLDSBAB=CURF-1;
     CALL SBACONV(TCUR,'1'B);
     @FLDSBA=TCUR;
     END;
   L=@FLDCNT;
   ALLOCATE SCREEN1_DYNAM;
   I=@FLDCNT/8;
   IF I*8<@FLDCNT
     THEN I=I+1;
   /* I NOW EQUALS NUMBER OF BYTES OCCUPIED BY SCREEN1_OUTFLAG. */
   @DOUTOFF=10+I;
   @DINOFF=@DOUTOFF+OUTOFFCTL;
   @DYNCNT=@FLDCNT;
   CALL ADDSTR(SETSTR(ADDR(DEFOFF),4),'ADD');
   CALL ADDSTR(SETSTR(ADDR(@PANEL),24),'ADD');
   DO @FLDPTR=FLDHEAD REPEAT DESCNXT WHILE(@FLDPTR^=NULL);
     CALL ADDSTR(SETSTR(ADDR(@FLDLEN),@FLDLEN),'ADD');
     END;
   CALL ADDSTR(SETSTR(DYNPTR,@DOUTOFF),'ADD');
   DO FLDPTR=OTELHEAD REPEAT ELNXT WHILE(FLDPTR^=NULL);
     CALL ADDSTR(SETSTR(ADDR(FIELDLEN),FIELDLEN+4),'ADD');
     END;
   DO FLDPTR=INELHEAD REPEAT ELNXT WHILE(FLDPTR^=NULL);
     CALL ADDSTR(SETSTR(ADDR(FIELDLEN),FIELDLEN+4),'ADD');
     END;
   CALL ADDSTR(SUBSTR(PSTR,2),'');
   SUBSTR(STRHD->STR,1,4)=SETSTR(ADDR(DEFOFF),4);
   RETURN(STRHD);
 SETSTR:  PROC(SPTR,SLEN) RETURNS(CHAR(32767) VAR);
   DCL SPTR PTR;
   DCL SLEN FIXED BIN(15,0);
   DCL WRKSTR CHAR(32767) BASED(DUMPTR);
   RETURN(SUBSTR(SPTR->WRKSTR,1,SLEN));
   END SETSTR;
 ADDQ:  PROC(HEAD,FOOT,ELPTR);
 /* ADD NEW ELEMENT TO SINGLY-LINKED LIST */
   DCL (HEAD,FOOT,ELPTR) PTR;
   DCL ELNXT PTR BASED(DUMPTR);
   IF FOOT=NULL
     THEN FOOT,HEAD=ELPTR;
     ELSE DO;
       FOOT->ELNXT=ELPTR;
       FOOT=ELPTR;
       END;
   ELPTR->ELNXT=NULL;
   END ADDQ;
 NXTFLD:  PROC(CURF) RETURNS(FIXED BIN(15,0));
 /* FINDS START OF NEXT FIELD ON PANEL. */
   DCL (CURF,NXT@,NXTA) FIXED BIN(15,0);
   NXT@=INDEX(SUBSTR(PSTR,CURF+1),'@')+CURF;
   IF NXT@=CURF
     THEN NXT@=LENGTH(PSTR)+1;
   NXTA=INDEX(SUBSTR(PSTR,CURF+1),'&')+CURF;
   IF NXTA=CURF
     THEN NXTA=LENGTH(PSTR)+1;
   IF NXT@<NXTA
     THEN RETURN(NXT@);
     ELSE RETURN(NXTA);
   END NXTFLD;
 ADDSTR:  PROC(PSTR,ADDPRM);
   DCL PSTR CHAR(32767) VAR;
   DCL ADDPRM CHAR(*);
   DCL (I,J) FIXED BIN(31,0);
   I=LENGTH(STR);
   J=LENGTH(PSTR);
   IF ADDPRM='ADD'
     THEN DEFOFF=DEFOFF+J;
   IF STRPTR=NULL
     THEN DO;
       ALLOCATE STREL;
       STRHD=STRPTR;
       STRNXT=NULL;
       STR=PSTR;
       END;
     ELSE IF I+J<=32767
       THEN STR=STR××PSTR;
       ELSE DO;
         ALLOCATE STREL SET(STRNXT);
         STRPTR=STRNXT;
         STRNXT=NULL;
         STR=PSTR;
         END;
   END ADDSTR;
   END DENTPDF;
