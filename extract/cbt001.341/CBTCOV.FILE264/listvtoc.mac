 /* LISTVTOC
0*$.HE GENERALIZED UTILITIES - LISTVTOC
0*$.HE LIST DISK VOLUME DATA SETS
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$6/6/74
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  LISTVTOC
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS UTILITY PROGRAM WILL PROVIDE THE USER WITH DETAILED
0*$INFORMATION FROM THE VTOC OF A DASD DEVICE.
0*$.SP 1
0*$// EXEC LISTVTOC,SER=VOLSER,UNIT=UNIT,CODE=CODE
0*$.SP 1
0*$WHERE:
0*$.SP 1
0*$VOLSER
0*$.IN 5
0*$THE VOLUME SERIAL NUMBER OF THE DISK PACK
0*$TO BE LISTED.
0*$.IN 0
0*$UNIT
0*$.IN 5
0*$THE KIND OF DEVICE THE SPECIFIED VOLUME IS TO BE MOUNTED ON.
0*$THIS PARAMETER MAY BE CODED EXACTLY AS IT WOULD BE IN ORDINARY
0*$JOB CONTROL.  IF UNIT IS NOT SPECIFIED, THE DEFAULT IS
0*$UNIT=3330.
0*$.IN 0
0*$CODE
0*$.IN 5
0*$EITHER A NUMBER OR A DATA SET NAME.  THE LISTVTOC UTILITY
0*$LISTS INFORMATION FROM THE VTOC IN THREE DIFFERENT FORMATS:
0*$.IN 10
0*$(1) -1- DUMP FORMAT - ALL OF THE DSCB'S FROM THE VTOC ARE PRINTED
0*$IN HEXADECIMAL DUMP FORMAT.
0*$.SP 1
0*$(2) -2- GRAPH FORMAT - THE SIZE AND LOCATION OF ALL EXTENTS FOR
0*$ALL DATA SETS ALLOCATED ON THE SPECIFIED VOLUME ARE GRAPHICALLY
0*$PORTRAYED.
0*$.SP 1
0*$(3) -4- JCL FORMAT - INFORMATION ABOUT EACH DATA SET IS PRINTED
0*$AS PARAMETERS OF A JCL DD STATEMENT.
0*$.SP 1
0*$.IN 5
0*$THE FOLLOWING TABLE INDICATES WHAT FORMAT THE LISTVTOC WILL USE,
0*$DEPENDING ON WHAT NUMBER IS DESIGNATED:
0*$.IN 10
0*$.NF
0*$     DUMP   GRAPH  JCL
0*$     FORMAT FORMAT FORMAT
0*$ 1   X
0*$ 2          X
0*$ 3   X      X
0*$ 4                 X
0*$ 5   X             X
0*$ 6          X      X
0*$ 7   X      X      X
0*$.IN 5
0*$.FI L
0*$.SP 1
0*$IF YOU DESIRE ONLY INFORMATION ON ONE DATA SET, CODE "CODE='DSNAME'"
0*$WHERE DSNAME IS THE DATA SET NAME OF THE DESIRED DATA SET.
0*$.SP 1
0*$IF CODE IS NOT SPECIFIED, THE DEFAULT IS CODE=2.
0*$.SP 1
0*$NOTE:  MODEL DSCB'S ARE NOT NORMALLY PRINTED IN THE JCL FORMAT AND
0*$ARE NEVER PRINTED IN THE GRAPH FORMAT.  TO GET MODEL DSCB'S TO PRINT
0*$IN JCL FORMAT, ENTER CODE=8.
0*$.SP 1
0*$.CE 1
0*$PUNCHING JCL
0*$.SP 1
0*$A NEW OPTION HAS BEEN ADDED TO ALLOW THE USER TO PUNCH OUT JCL
0*$STATEMENTS FOR THE PURPOSE OF REALLOCATING DATA SETS.  TO DO SO,
0*$ENTER CODE=9.  THE SYSPRINT DATA SET WILL THEN CONTAIN ONLY JCL
0*$STATEMENTS, AND WILL NOT INCLUDE ANY //* COMMENT STATEMENTS.
0*$FILE ATTRIBUTES FOR SYSPRINT WILL BE
0*$DCB=(LRECL=76,BLKSIZE=80,RECFM=VA).
0*$.SP 1
0*$.CE 1
0*$PRINTING FDR TAPES
0*$.SP 1
0*$A NEW OPTION HAS BEEN ADDED TO ALLOW THE USER TO PRINT THE CONTENTS
0*$OF A TAPE CREATED BY THE FDR UTILITY PROGRAM MARKETED BY
0*$INNOVATION DATA PROCESSING.  A PROCEDURE CALLED LISTFDR CAN BE
0*$USED IN THIS CASE.  THE OPTIONS ARE:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$// EXEC LISTFDR SER=,UNIT=,CYCLE=,SOUT=,GDG=
0*$.FI L
0*$.SP 1
0*$WHERE:
0*$.SP 1
0*$SER= SPECIFIES THE DISK VOLUME SERIAL FOR
0*$WHICH YOU WANT A LISTING FROM THE FDR
0*$BACKUP TAPE.
0*$.SP 1
0*$UNIT= SPECIFIES THE DISK UNIT OF THE VOLUME
0*$FOR WHICH YOU WANT A LISTING FROM THE FDR
0*$BACKUP TAPE.
0*$.SP 1
0*$CYCLE= SPECIFIES THE BACKUP CYCLE FROM
0*$WHICH YOU WANT A LISTING.  CURRENT OPTIONS
0*$ARE DAILY, SWKLY, WEEKLY, MNTHLY, QTRLY,
0*$AND YEARLY.
0*$.SP 1
0*$SOUT= MEANS THE SAME AS IN THE LISTVTOC
0*$PROC.
0*$.SP 1
0*$GDG= INDICATES THE GENERATION DATA GROUP
0*$NUMBER OF THE BACKUP TAPE FROM WHICH
0*$YOU WANT A LISTING.  GDG(-1), FOR EXAMPLE.
 *******************/
 TEST:  PROC(INPARM) OPTIONS(MAIN);
         %  INCLUDE DSCB1;
         %  INCLUDE DSCB2;
         %  INCLUDE DSCB3;
         %  INCLUDE DSCB4;
         %  INCLUDE DSCB5;
         DSCB1PTR = ADDR(MYWKAREA);
         DSCB5PTR = DSCB1PTR;
         DCL RET BIT(32);
 DCL (CI,CYLPERPCK,DSCBPER,DTOT,DTOTA,FCNT,OVFTRK,S,SPRED,SPREDNUM,
      TOTRK,TRKPERCYL,X,Y,I,INDCNT,INDTRK,J,K,L,M,N,NOTRX)
      FIXED BIN(31,0);
         DCL SPTR PTR;
         DCL 1 ELEMENT BASED(EPTR),
              2 NPTR PTR,
              2 CH1 CHAR(4),
              2 CH2 CHAR(4),
              2 NOTRK FIXED BIN,
              2 EXTSQ BIT(8),
              2 EFLG BIT(8);
         DCL (CEFLG,MEFLG) BIT(8) INIT('11111111'B);
         DCL (SEPTR,FEPTR,FPTR,DPTR) PTR;
         DCL (GRETURN,HRETURN,LRETURN) LABEL;
         DCL 1 ELEM2 BASED(EPTR),
              2 PAD CHAR(4),
              2 CB1 FIXED BIN(15,0),
              2 HB1 FIXED BIN(15,0),
              2 CB2 FIXED BIN(15,0),
              2 HB2 FIXED BIN(15,0);
         DCL IDEF CHAR(4) DEF J;
         DCL IDEFC CHAR(8);
         DCL SARRAY(5) INIT(1,2,4,8,16) FIXED BIN;
         DCL GRPH CHAR(52);
         DCL GRPHA (52) CHAR(1) DEF GRPH;
         DCL (CHA,CHB) CHAR(8);
         DCL INPARM CHAR(40) VARYING;
         DCL (PNMSW,PNMSWA) BIT(1) INIT('0'B);
         DCL PUNSW BIT(1) STATIC INIT('0'B);
         DCL PARM CHAR(1) INIT('4');
         IF INPARM = '9'
              THEN DO;
                   PUNSW = '1'B;
                   GO TO BYMOVE;
                   END;
         IF LENGTH(INPARM) <= 1
              THEN PARM = INPARM;
              ELSE PNMSW = YES;
 BYMOVE:
         IF PUNSW
              THEN MAXLEN = 69;
              ELSE MAXLEN = 130;
         IF PARM < '1' × PARM >  '8' THEN PARM = '7';
         DCL PARMA(8) BIT(1) DEF PARM;
  /* PARMA(8) = DUMP, PARMA(7) = GRAPH, PARMA(6) = JCL */
         DCL NULL BUILTIN;
         DDNAME = '';
         DCL SPACECNTL BIT(1) INIT('0'B);
         NXFIRST = '1'B;
         NXLAST = '0'B;
         DO WHILE(^NXLAST);
              IF DDNAME = 'EXCEPTS'
                   THEN EXCEPSW = '1'B;
              IF DDNAME = 'EXCDL'
                   THEN EXCDLSW = '1'B;
              IF DDNAME = 'EXCRQ'
                   THEN EXCRQSW = '1'B;
              IF DDNAME = 'ISAMFLE'
                   THEN SPACECNTL = '1'B;
              IF DDNAME='FDR'
                   THEN FDRSW='1'B;
              CALL NEXTDD;
              END;
         DCL FDRSUB ENTRY(CHAR(5))
           RETURNS(CHAR(148));
         IF FDRSW
           THEN PARM='4';
         DCL 1 CNTLFLG EXT,
              2 EXCEPSW BIT(1) INIT('0'B),
              2 EXCDLSW BIT(1) INIT('0'B),
              2 EXCRQSW BIT(1) INIT('0'B);
         DCL FDRSW BIT(1) INIT('0'B);
         NXFIRST = '1'B;
         NXLAST = '0'B;
         DO WHILE (DDNAME ^= 'VTOC') UNTIL(NXLAST);
              CALL NEXTDD;
              END;
         IF DDNAME^='VTOC'
           THEN VOLUME='XXXXXX';
         DCL 1 WK4AREA,
              2 KEY CHAR(44),
              2 DATA CHAR(96),
              2 WADR CHAR(5),
              2 PAD CHAR(3);
         DCL DSN CHAR(44);
         DCL WK4STR CHAR(148) DEF WK4AREA;
         DCL MYWKAREA CHAR(148);
         DCL PRNTSTR CHAR(148) DEF MYWKAREA;
         DCL WKD CHAR(96) DEF MYWKAREA POS(45);
         DCL BKEY BIT(352) DEF KEY;
         BKEY = (44)'00000100'B;
         DSCB4PTR = ADDR(WK4AREA);
         DCL DUMDATA CHAR(148);
         IF FDRSW
           THEN WK4STR=FDRSUB(CCHHR);
           ELSE DO;
             CALL SYSVTOC('SEARCH',RET,WK4AREA.KEY,VOLUME,DUMDATA);
             DATA = DUMDATA;
             END;
         MYWKAREA = WK4STR;
         DSCBPER = DS4DEVDT;
         TRKPERCYL = DS4DEVTC;
         CYLPERPCK = DS4DEVCN;
         DCL ENDCCHH CHAR(4);
         ENDCCHH = DS4CCHHU;
         DCL 1 DADR,
              2 CC FIXED BIN(15,0),
              2 HH FIXED BIN(15,0),
              2 R FIXED BIN(15,0);
         DCL CCHHR CHAR(5) DEF DADR;
         CCHHR = DS4CCHHL;
         FCNT = 0;
         DCL (FSW,EOFSW) BIT(1) INIT('0'B);
         DCL SAVCCHHR CHAR(5);
         SAVCCHHR = DS4CCHHL;
         DCL (RETURN,PROCESS) LABEL;
         R = 256;
         DCL ((NXFIRST,NXLAST) BIT(1),
              VOLUME CHAR(6),
              TYPE BIT(32),
              DDNAME CHAR(8)) EXT;
         DCL (DDCNT,DDCNTA) PIC '999' INIT(0);
         DCL DDCARD CHAR(132) VARYING INIT('');
         DCL DDPARM CHAR(132) VARYING;
         DCL (PJRET,SBRET,SPRET,UVRET) LABEL;
         DCL DSNJCL CHAR(44) VARYING;
         DCL YY PIC '99';
         DCL DDD PIC '999';
         DCL (LRECL,BLKSIZE,KEYLEN,RKP) PIC '99999';
         DCL WK2AREA CHAR(148);
         DSCB2PTR = ADDR(WK2AREA);
         DCL WK3AREA CHAR(148);
         DSCB3PTR = ADDR(WK3AREA);
         DCL (NTM,CYLOFL) PIC '99999';
         DCL OPTCD CHAR(40) VARYING;
         DCL BLNKS CHAR(16) STATIC INIT(' ');
         DCL PJSW BIT(1);
         DCL UTARY (9) BIT(8) INIT(
              '00000001'B,   /* 2311 */
              '00000010'B,   /* 2301 */
              '00000011'B,   /* 2303 */
              '00000100'B,   /* 2302 */
              '00000101'B,   /* 2321 */
              '00000110'B,   /* 2305 */
              '00000111'B,   /* 2305 */
              '00001000'B,   /* 2314 */
              '00001001'B);  /* 3330 */
         DCL UTNME (10) CHAR(4) INIT(
              '2311',
              '2301',
              '2303',
              '2302',
              '2321',
              '2305',
              '2305',
              '2314',
              '3330',
              'DISK');
         DCL (INDPTR,PRIPTR,OVFPTR) PTR;
         DCL ISCNT BIT(6);  /* 1=IND,2=PRI,4=OVF,8=IMB IND,16=INDCEND*/
         DCL 1 ISBITS UNALIGNED DEFINED ISCNT,
              2 INDEND BIT(1),
              2 IMBIND BIT(1),
              2 OVF BIT(1),
              2 PRI BIT(1),
              2 IND BIT(1);
         DCL F2SW BIT(1);
         DCL JCLFLGS (8) BIT(1) INIT((8)(1)'0'B);
              /* BIT 0 = SPACE ORIGINALLY ALLOCATED IN BLOCKS, BUT
                         DS1BLKL IS ZERO.  A DEFAULT BLKSIZE
                         VALUE IS USED SUCH THAT ONE BLOCK WILL
                         JUST FIT ON A TRACK */
              /* BIT 1 = PUTCOM FIRST TIME SWITCH */
              /* BIT 2 = PUTCOM TOTAL SWITCH */
         DCL INDPTYP CHAR(6);
         DCL YES BIT(1) INIT('1'B);
         DCL NO BIT(1) INIT('0'B);
         DCL COMMENT CHAR(78) VARYING;
         DCL PCRET LABEL;
         DCL PCCONV CHAR(4);
         DCL 1 PCCV DEF PCCONV,
              2 PFLG CHAR(2),
              2 ESQ CHAR(2);
         DCL PCCBIT CHAR(2);
         DCL 1 PCCB DEF PCCBIT,
              2 PFLGA BIT(8),
              2 ESQA BIT(8);
         DCL PCPTR PTR;
         DCL OTRKS PIC '99999.99';
         DCL WPTR PTR;
         DCL 1 DS2CH,
              2 DS2CC FIXED BIN(15,0),
              2 DS2HH FIXED BIN(15,0);
         DCL DS2CCHH CHAR(4) DEF DS2CH;
         DCL LABALL LABEL;
         DCL C16 CHAR(16);
         DCL 1 SCH,
              2 SCC FIXED BIN(15,0),
              2 SHH FIXED BIN(15,0);
         DCL SCCHH CHAR(4) DEF SCH;
         DCL 1 ECH,
              2 ECC FIXED BIN(15,0),
              2 EHH FIXED BIN(15,0);
         DCL ECCHH CHAR(4) DEF ECH;
         DCL 1 SCHA,
              2 SCCA FIXED BIN(15,0),
              2 SHHA FIXED BIN(15,0);
         DCL SCCHHA CHAR(4) DEF SCHA;
         DCL 1 ECHA,
              2 ECCA FIXED BIN(15,0),
              2 EHHA FIXED BIN(15,0);
         DCL ECCHHA CHAR(4) DEF ECHA;
         DCL GSW BIT(1) INIT('0'B);
         ON ERROR CALL PLIDUMP('HBS');
         IF PUNSW
              THEN GO TO BYHEAD;
  ON ENDPAGE(SYSPRINT) BEGIN;
         PUT PAGE;
         PAGE = PAGE + 1;
         PUT EDIT('PAGE ',ROMAN(PAGE),'KIMBERLY CLARK SUPERLST',
           'DATE=',DAY)(A,A,COL(43),A,COL(100),A,A);
         PUT DATA(VOLUME) SKIP(2);
         PUT SKIP(3);
         END;
         OPEN FILE(SYSPRINT) LINESIZE(132);
 BYHEAD:
         IF PUNSW
              THEN OPEN FILE(SYSPRINT) LINESIZE(71);
         DCL ROMAN ENTRY (FIXED BIN) RETURNS (CHAR(15) VARYING);
         DCL DAY CHAR(8) EXT;
         DAY = DATE;
         PAGE =0;
         DTOT,DTOTA = 0;
         IF PARMA(8) = '1'B
              THEN DO;
         SIGNAL ENDPAGE(SYSPRINT);
               PROCESS = DUMP;
                   RETURN = CKGRPH;
                   GO TO DUMP;
                   END;
 CKGRPH:
         IF PARMA(7) = '1'B
              THEN DO;
                   PROCESS = GRAPH;
                   RETURN = CKJCL;
                   GO TO REINIT;
                   END;
  CKJCL:
         IF PARMA(6) = '1'B × PARMA(5) = '1'B
              THEN DO;
                   PROCESS = JCL;
                   RETURN = DONE;
                   GO TO REINIT;
                   END;
 DONE:
         RETURN;
 REINIT:
         PNMSWA = NO;
         CCHHR = SAVCCHHR;
         R = 256;
         EOFSW = '0'B;
         DTOT, DTOTA = 0;
         SIGNAL ENDPAGE(SYSPRINT);
 NXT:
         IF PNMSW = YES
              THEN IF PNMSWA = NO
                   THEN DO;
                        PARMA(5) = YES;
                        PARMA(7) = NO;
                        SUBSTR(MYWKAREA,1,44) = INPARM;
                        CALL SYSVTOC('SEARCH',RET,INPARM,VOLUME,WKD);
                        PNMSWA = YES;
                        IF RET ^= 0
                             THEN DO;
                                  PUT EDIT('DATA SET ',INPARM,' DOES NOT
  EXIST ON VOLUME ',VOLUME)(A,A,A,A) SKIP(1);
                                  RETURN;
                                  END;
                             ELSE GO TO PROCESS;
                        END;
                   ELSE GO TO NXTL;
         R = R + 256;
         IF R >  DSCBPER * 256
              THEN DO;
                   R = 256;
                   HH = HH + 1;
                   IF HH = TRKPERCYL
                        THEN DO;
                             HH = 0;
                             CC = CC + 1;
                             END;
                   IF SUBSTR(CCHHR,1,4) >  ENDCCHH
                   THEN DO;
 NXTL:
                        EOFSW = '1'B;
                        GO TO PROCESS;
                        END;
                   END;
         IF FDRSW
           THEN MYWKAREA=FDRSUB(CCHHR);
           ELSE CALL SYSVTOC('SEEK',RET,CCHHR,VOLUME,MYWKAREA);
         IF RET ^= 0
              THEN CALL PLIDUMP('HBS');
         GO TO PROCESS;
 DUMP:
         IF DS1FMTID = LOW(1) &   EOFSW ^= '1'B
              THEN DO;
                   FSW = '1'B;
                   FCNT = FCNT + 1;
                   GO TO NXT;
                   END;
         IF FSW = '1'B
              THEN DO;
                   FSW = '0'B;
                   PUT EDIT(FCNT,' FORMAT ZERO DSCBS LOCATED HERE')
                     (P'Z,ZZ9',A) SKIP(2);
                   PUT SKIP(2);
                   FCNT = 0;
                   END;
         IF EOFSW = '1'B
              THEN GO TO RETURN;
 DUMPA:
         CALL DUMPSTR(PRNTSTR);
         IF PNMSW = NO
              THEN GO TO NXT;
         IF DS1PTRDS = LOW(5)
              THEN GO TO NXT;
         IF FDRSW
           THEN MYWKAREA=FDRSUB(DS1PTRDS);
           ELSE CALL SYSVTOC('SEEK',RET,DS1PTRDS,VOLUME,MYWKAREA);
         IF RET ^= 0
              THEN CALL PLIDUMP('HBS');
         GO TO DUMPA;
 GRAPH:
         SPRED = CYLPERPCK / 52;
         IF MOD(CYLPERPCK,52) ^= 0
              THEN SPRED = SPRED + 1;
         DO I = 1 TO 5;
              IF SARRAY(I) >= SPRED
                   THEN DO;
                        SPRED = SARRAY(I);
                        GO TO GOTSPRED;
                        END;
              END;
 GOTSPRED:
         SPREDNUM = (16 / SPRED) - 1;
         DO I = 5 TO 8;
              PUT SKIP;
              DO J = 0 TO 32756 BY 16 WHILE(J < CYLPERPCK);
                   CALL TROUT(IDEF,IDEFC);
                   PUT EDIT(SUBSTR(IDEFC,I,1),
                     SUBSTR(BLNKS,1,SPREDNUM))(A,A);
                   END;
              END;
         ALLOCATE ELEMENT SET(EPTR);
         FEPTR = EPTR;
         NPTR = NULL;
         CH1 = SAVCCHHR;
         CH2 = ENDCCHH;
         GRETURN = VGRPH;
         EFLG = '0'B;
         DS1DSORG = '0'B;
         SBRET = DGRPH;
         GO TO SB3;
 VGRPH:
         DSN = 'VTOC';
         PROCESS = GRAPH5;
         GRETURN = GRAPH5;
         GO TO PGRPH;
 GRAPH5:
         PROCESS = GRAPH1;
         IF DS5FMTID ^= '5'
              THEN GO TO GRAPH1;
 GRAPH51:
         N = 8;
         HRETURN = GRAPH52;
         LRETURN = GRAPH53;
         GO TO GRAPH57;
 GRAPH52:
         J = DS5AVEXT.DS5TTR1(I);
         K = DS5AVEXT.DS5CCO(I);
         L = DS5AVEXT.DS5TTO(I);
         GO TO GRAPH58;
 GRAPH53:
         N = 18;
         HRETURN = GRAPH54;
         LRETURN = GRAPH55;
         GO TO GRAPH57;
 GRAPH54:
         J = DS5MAVET.DS5TTR1(I);
         K = DS5MAVET.DS5CCO(I);
         L = DS5MAVET.DS5TTO(I);
         GO TO GRAPH58;
 GRAPH55:
         IF DS5PTRDS = LOW(5)
              THEN DO;
                   GRETURN = GRAPH56;
                   SBRET = DGRPH;
                   GO TO SB3;
 GRAPH56:
                   DSN = 'FREE SPACE';
                   GRETURN = NXT;
                   GO TO PGRPH;
                   END;
         CALL SYSVTOC('SEEK',RET,DS5PTRDS,VOLUME,MYWKAREA);
         IF RET ^= 0
              THEN CALL PLIDUMP('HBS');
         GO TO GRAPH51;
 GRAPH57:
         I = 0;
 GRAPH571:
         I = I + 1;
         IF I >  N
              THEN GO TO LRETURN;
              GO TO HRETURN;
 GRAPH58:
              IF J = 0
                   THEN GO TO GRAPH55;
              ALLOCATE ELEMENT SET(EPTR);
              IF FEPTR = NULL
                   THEN FEPTR  = EPTR;
                   ELSE SEPTR -> NPTR = EPTR;
              SEPTR = EPTR;
              NPTR = NULL;
              CB1 = J / TRKPERCYL;
              HB1 = J - (CB1 * TRKPERCYL);
              M = ((K * TRKPERCYL) + L) + J;
              CB2 = M / TRKPERCYL;
              HB2 = M - (CB2 * TRKPERCYL);
              EFLG = '0'B;
              GO TO GRAPH571;
 GRAPH1:
         IF EOFSW = '1'B
              THEN GO TO PTOT;
         IF DS1FMTID ^= '1'
              THEN GO TO NXT;
         IF DS1EXTFL(1) = '0'B
              THEN GO TO NXT;
         DSN = DS1DSNAM;
         SBRET = GRAPH3;
 SUBGRPH:
         F2SW = NO;
         TOTRK,PRITRK,INDTRK,OVFTRK = 0;
         EPTR,FEPTR,PRIPTR,INDPTR,OVFPTR = NULL;
         DO I = 1 TO 3;
              IF DS1EXTFL(I) = '0'B
                   THEN GO TO SB2;
              SEPTR = EPTR;
              ALLOCATE ELEMENT SET(EPTR);
              IF SEPTR = NULL
                   THEN FEPTR = EPTR;
                   ELSE SEPTR -> NPTR = EPTR;
              NPTR = NULL;
              CH1 = DS1CCHHL(I);
              CH2 = DS1CCHHU(I);
              EFLG = DS1EXTFL(I);
              EXTSQ = DS1EXTSQ(I);
              END;
 SB2:
         IF DS1PTRDS = LOW(5)
              THEN GO TO SB3;
         IF FDRSW
           THEN WK3AREA=FDRSUB(DS1PTRDS);
           ELSE CALL SYSVTOC('SEEK',RET,DS1PTRDS,VOLUME,WK3AREA);
         IF RET ^= 0
              THEN CALL PLIDUMP('HBS');
         IF DS3FMTID = '2'
              THEN DO;
              F2SW = YES;
                   WK2AREA = WK3AREA;
                   DS1PTRDS = DS2PTRDS;
                   GO TO SB2;
                   END;
         DO I = 1 TO 4;
              IF DS3EXT.DS3EXTFL(I) = '0'B
                   THEN GO TO SB3;
              SEPTR = EPTR;
              ALLOCATE ELEMENT SET(EPTR);
              SEPTR -> NPTR = EPTR;
              NPTR = NULL;
              CH1 = DS3EXT.DS3CCHHL(I);
              CH2 = DS3EXT.DS3CCHHU(I);
              EFLG = DS3EXT.DS3EXTFL(I);
              EXTSQ = DS3EXT.DS3EXTSQ(I);
              END;
         DO I = 1 TO 9;
              IF DS3ADEXT.DS3EXTFL(I) = '0'B
                   THEN GO TO SB3;
              SEPTR = EPTR;
              ALLOCATE ELEMENT SET(EPTR);
              SEPTR -> NPTR = EPTR;
              NPTR = NULL;
              CH1 = DS3ADEXT.DS3CCHHL(I);
              CH2 = DS3ADEXT.DS3CCHHU(I);
              EFLG = DS3ADEXT.DS3EXTFL(I);
              EXTSQ = DS3ADEXT.DS3EXTSQ(I);
              END;
 SB3:
         TOTRK = 0;
         EPTR = FEPTR;
         DO WHILE(EPTR ^= NULL);
              NOTRK=(CB2-CB1-1)*TRKPERCYL+TRKPERCYL-HB1+HB2+1;
              TOTRK = TOTRK + NOTRK;
              IF SUBSTR(DS1DSORG,1,1) = '1'B &   DS1FMTID = '1'
                   THEN IF EFLG = '00000100'B
                        THEN DO;
                             INDTRK = INDTRK + NOTRK;
                             IF INDPTR = NULL
                                  THEN INDPTR = EPTR;
                             END;
                        ELSE IF EFLG = '00000010'B
                             THEN DO;
                                  OVFTRK = OVFTRK + NOTRK;
                                  IF OVFPTR = NULL
                                       THEN OVFPTR = EPTR;
                                  END;
                             ELSE DO;
                                  PRITRK = PRITRK + NOTRK;
                                  IF PRIPTR = NULL
                                       THEN PRIPTR = EPTR;
                                  END;
              EPTR = NPTR;
              END;
         IF DS5FMTID ^= '5'
              THEN DTOTA = DTOTA + TOTRK;
         GO TO SBRET;
 GRAPH3:
         GRETURN = GRAPH4;
         GO TO DGRPH;
 GRAPH4:
         GRETURN = NXT;
         GO TO PGRPH;
 DGRPH:
         GRPH = ' ';
         EPTR = FEPTR;
 DG:
         IF EPTR = NULL
              THEN GO TO GRETURN;
         I = (CB1/SPRED) + 1;
         J = (CB2/SPRED) + 2;
         DO I = I TO 52 WHILE(I < J);
              SUBSTR(GRPH,I,1) = 'X';
              END;
         EPTR = NPTR;
         GO TO DG;
 PGRPH:
         PUT EDIT(GRPH,DSN)(A,A) SKIP(1);
         EPTR = FEPTR;
 PG1:
         PUT EDIT(GRPH)(A) SKIP(1);
         FPTR = EPTR;
         XINDX = 4;
         DO I = 1 TO 4;
              IF EPTR = NULL
                   THEN GO TO LINE2;
              PUT EDIT(NOTRK)(X(XINDX),P'ZZZ9');
              XINDX = 14;
              IF SUBSTR(DS1DSORG,1,1) = '1'B
                   THEN DO;
                        IF EFLG = '00000010'B
                             THEN INDPTYP = 'OVFLOW';
                             ELSE IF EFLG = '00000100'B
                                  THEN INDPTYP = ' INDEX';
                                  ELSE INDPTYP = ' PRIME';
                        PUT EDIT(INDPTYP)(X(7),A);
                        XINDX = 1;
                        END;
              EPTR = NPTR;
              END;
 LINE2:
         PUT EDIT(GRPH,'    ')(A,A) SKIP(1);
         EPTR = FPTR;
         DO I = 1 TO 4;
              IF EPTR = NULL
                   THEN GO TO PUTTOT;
              CALL TROUT(CH1,CHA);
              CALL TROUT(CH2,CHB);
              PUT EDIT(CHA,'-',CHB,' ')(A,A,A,A);
              EPTR = NPTR;
              END;
         IF EPTR ^= NULL THEN GO TO PG1;
 PUTTOT:
         PUT EDIT(TOTRK)(COL(129),P'ZZZ9');
         GRPH = ' ';
         J = 1;
         DO I = 0 TO 32756 BY 16 WHILE(I < CYLPERPCK);
              GRPHA(J) = '+';
              J = J + SPREDNUM + 1;
              END;
         COMMENT = ' ';
         IF BOOL(DS1DSORG,'01000010'B,'0001'B)
              THEN DO;
                   LABALL = PT109;
                   GO TO ALLCOM;
                   END;
         IF SUBSTR(DS1DSORG,1,1) = YES
              THEN DO;
                   GSW = YES;
                   GO TO LPRPR;
                   END;
         COMMENT = 'DSORG = DA';
 PT109:
         PUT EDIT(GRPH,COMMENT)(A,X(4),A) SKIP(1);
         EPTR = FEPTR;
         DO WHILE(EPTR ^= NULL);
              DPTR = EPTR;
              EPTR = NPTR;
              FREE DPTR -> ELEMENT;
              END;
         FEPTR = NULL;
         GO TO GRETURN;
 PUTJCLN:
         IF DDCARD ^= ''
              THEN PUT EDIT(DDCARD)(A) SKIP(1);
         DDCARD='//DD' ××  DDCNT ××  ' DD ' ××  DDPARM ××  ',';
         DDCNT = DDCNT + 1;
         PJSW = '1'B;
         GO TO PUTJCLC;
 PUTJCL:
         IF PJSW = '1'B
              THEN DO;
                   PJSW = '0'B;
                   GO TO PUTJCLA;
                   END;
         DDCARD = DDCARD ××  ',';
         IF LENGTH(DDPARM) <= (MAXLEN - LENGTH(DDCARD))
              THEN GO TO PUTJCLB;
 PUTJCLA:
         PUT EDIT(DDCARD)(A) SKIP(1);
         IF PUNSW
              THEN DDCARD = '// ';
              ELSE
         DDCARD = '//             ';
 PUTJCLB:
         DDCARD = DDCARD ××  DDPARM;
 PUTJCLC:
         DDPARM = '';
         GO TO PJRET;
 PUTLAST:
         IF PARMA(5) = YES
              THEN PJRET = RETURN;
              ELSE PJRET = PTOT;
         GO TO PUTJCLN;
 JCL:
         PROCESS = JCLA;
         IF PUNSW
              THEN GO TO JCLA;
         PUT EDIT('DS1EXTFL')(COL(105),A) SKIP(1);
         PUT EDIT('DS1EXTSQ')(COL(108),A) SKIP(1);
         PUT EDIT('DS1CCHHL DS1CCHHU')(COL(111),A) SKIP(1);
 JCLA:
         IF EOFSW = '1'B
              THEN DO;
                   IF SPACECNTL
                        THEN IF ^PNMSW
                        THEN CALL CNTLPRC(TOTRK,DS1DSNAM,VOLUME,EOFSW);
                   GO TO PUTLAST;
                   END;
         IF DS1FMTID ^= '1'
              THEN GO TO NXT;
         IF DS1EXTFL(1) = '0'B
              THEN IF PARMA(5) = '0'B
                   THEN GO TO NXT;
                   ELSE;
              ELSE IF PARMA(6) = '0'B
                   THEN GO TO NXT;
         DO I = 1 TO 44 WHILE(SUBSTR(DS1DSNAM,I,1) ^= ' ');
              END;
         DSNJCL = SUBSTR(DS1DSNAM,1,I-1);
         DDPARM= 'DSN=' ××  DSNJCL;
         SBRET = ISCK;
         GO TO SUBGRPH;
 ISCK:
         IF SUBSTR(DS1DSORG,1,1) = '1'B
              THEN DO;
                   ISCNT = 0;
                   IF INDTRK ^= 0
                        THEN IND = YES;
                   IF PRITRK ^= 0
                        THEN PRI = YES;
                   IF OVFTRK ^= 0
                        THEN OVF = YES;
                   IF IND = YES &   PRI = YES
                        THEN DO;
                             I = ((PRITRK/TRKPERCYL)/2)*TRKPERCYL;
                             EPTR = PRIPTR;
                             J = NOTRK;
                             DO WHILE(J < I);
                                  EPTR = NPTR;
                                  J = J + NOTRK;
                                  END;
                             SPTR = NPTR;
                             IF INDPTR -> CH1 >  EPTR -> CH2
                                  THEN IF INDPTR -> CH2 < SPTR -> CH1
                                       THEN IMBIND = YES;
                             END;
                        ELSE IF IND = NO &   PRI = YES
                             THEN IF F2SW = YES
                                  THEN INDEND = YES;
 ISDSNCK:
                   IF SUBSTR(ISCNT,4,1) = '1'B
                        THEN DDPARM = DDPARM ××  '(PRIME)';
                        ELSE IF SUBSTR(ISCNT,5,1) = '1'B
                             THEN DDPARM = DDPARM ××  '(INDEX)';
                             ELSE DDPARM = DDPARM ××  '(OVFLOW)';
                   END;
         PJRET = JCL1;
         GO TO PUTJCLN;
 JCL1:
         IF PUNSW
              THEN DO;
                   DDPARM='DISP=(NEW,KEEP)';
                   PJRET = JCL1A;
                   GO TO PUTJCL;
                   END;
 JCL1A:
         IF DS1EXPDT ^= '0'B × SUBSTR(DS1DSIND,4,1) = '1'B ×
           DS1EXTFL(1) = '01000000'B
              THEN DO;
                   DDPARM = 'LABEL=';
                   IF SUBSTR(DS1DSIND,4,1) = '1'B × DS1EXTFL(1) =
                     '01000000'B
                        THEN DO;
                             DDPARM = DDPARM ××  '(';
                             IF DS1EXTFL(1) = '01000000'B
                                  THEN DDPARM = DDPARM ××  'SUL';
                             IF SUBSTR(DS1DSIND,4,1) = '1'B
                                  THEN IF SUBSTR(DS1DSIND,6,1) = '1'B
                                       THEN DDPARM = DDPARM ××
                                         'NOPWREAD';
                                       ELSE DDPARM = DDPARM ××
                                         'PASSWORD';
                                  ELSE DDPARM = DDPARM ××  ',';
                             END;
                   IF DS1EXPDT ^= '0'B
                        THEN DO;
                             YY = SUBSTR(DS1EXPDT,1,8);
                        DDD = SUBSTR(DS1EXPDT,9,16);
                             DDPARM = DDPARM ××  'EXPDT=' ××  YY ××
                               DDD;
                             END;
                   IF SUBSTR(DS1DSIND,4,1) = '1'B × DS1EXTFL(1) =
                     '01000000'B
                        THEN DDPARM = DDPARM ××  ')';
                   PJRET = JCL2;
                   GO TO PUTJCL;
                   END;
 JCL2:
         DDPARM = 'DCB=(';
         IF BOOL(DS1DSORG,'11100011'B,'0001'B)
              THEN DDPARM = DDPARM ××  'DSORG=';
              ELSE GO TO JCL3;
         IF SUBSTR(DS1DSORG,1,1) = '1'B
              THEN DDPARM = DDPARM ××  'IS';
              ELSE IF SUBSTR(DS1DSORG,2,1) = '1'B
                   THEN DDPARM = DDPARM ××  'PS';
                   ELSE IF SUBSTR(DS1DSORG,3,1)
                        THEN DDPARM=DDPARM ××  'DA';
                        ELSE DDPARM = DDPARM ××  'PO';
         IF SUBSTR(DS1DSORG,8,1) = YES
              THEN DDPARM = DDPARM ××  'U';
         PJRET = JCL3;
         GO TO PUTJCL;
 JCL3:
         IF SUBSTR(DS1RECFM,1,2) ^= '00'B
              THEN DDPARM = DDPARM ××  'RECFM=';
              ELSE GO TO JCL4;
         IF SUBSTR(DS1RECFM,1,2) = '10'B
              THEN DDPARM = DDPARM ××  'F';
              ELSE IF SUBSTR(DS1RECFM,1,2) = '11'B
                   THEN DDPARM = DDPARM ××  'U';
                   ELSE DDPARM = DDPARM ××  'V';
         IF SUBSTR(DS1RECFM,4,1) = '1'B
              THEN DDPARM = DDPARM ××  'B';
         IF SUBSTR(DS1RECFM,5,1) = '1'B
              THEN DDPARM = DDPARM ××  'S';
         IF SUBSTR(DS1RECFM,3,1) = '1'B
              THEN DDPARM = DDPARM ××  'T';
         IF SUBSTR(DS1RECFM,6,2) = '10'B
              THEN DDPARM = DDPARM ××  'A';
              ELSE IF SUBSTR(DS1RECFM,6,2) = '01'B
                   THEN DDPARM = DDPARM ××  'M';
         PJRET = JCL4;
         GO TO PUTJCL;
 JCL4:
         OPTCD = '';
         IF SUBSTR(DS1OPTCD,1,1) = '1'B
              THEN OPTCD = OPTCD ××  'W';
         IF SUBSTR(DS1OPTCD,2,1) = '1'B
              THEN OPTCD = OPTCD ××  'U';
         IF SUBSTR(DS1OPTCD,3,1) = '1'B
              THEN IF SUBSTR(DS1DSORG,3,1) = '1'B
                   THEN OPTCD = OPTCD ××  'E';
                   ELSE IF SUBSTR(DS1DSORG,1,1) = '1'B
                        THEN OPTCD = OPTCD ××  'M';
                        ELSE OPTCD = OPTCD ××  'C';
         IF SUBSTR(DS1OPTCD,4,1) = '1'B
              THEN IF SUBSTR(DS1DSORG,3,1) = '1'B
                   THEN OPTCD = OPTCD ××  'F';
                   ELSE IF SUBSTR(DS1DSORG,1,1) = '1'B
                        THEN OPTCD = OPTCD ××  'I';
                        ELSE OPTCD = OPTCD ××  'O';
         IF SUBSTR(DS1OPTCD,5,1) = '1'B
              THEN IF SUBSTR(DS1DSORG,3,1) = '1'B
                   THEN OPTCD = OPTCD ××  'A';
                   ELSE IF SUBSTR(DS1DSORG,1,1) = '1'B
                        THEN OPTCD = OPTCD ××  'Y';
                        ELSE OPTCD = OPTCD ××  'Q';
         IF SUBSTR(DS1OPTCD,6,1) = '1'B
              THEN OPTCD = OPTCD ××  'Z';
         IF SUBSTR(DS1OPTCD,7,1) = '1'B
              THEN IF SUBSTR(DS1DSORG,1,1) = '1'B
                   THEN OPTCD = OPTCD ××  'L';
                   ELSE OPTCD = OPTCD ××  'T';
         IF SUBSTR(DS1OPTCD,8,1) = '1'B
              THEN OPTCD = OPTCD ××  'R';
         IF OPTCD = ''
              THEN GO TO JCL5;
         DDPARM = DDPARM ××  'OPTCD=' ××  OPTCD;
         PJRET = JCL5;
         GO TO PUTJCL;
 JCL5:
         BLKSIZE = DS1BLKL;
         DDPARM = DDPARM ××  'BLKSIZE=';
         IF BLKSIZE=0
              THEN DDPARM = DDPARM ××  '0';
              ELSE DDPARM = DDPARM ××  SUBSTR(BLKSIZE,
                6-LOG10(BLKSIZE+1));
         PJRET = JCL6;
         GO TO PUTJCL;
 JCL6:
         IF SUBSTR(DS1RECFM,1,2) ^= '11'B
              THEN DO;
                   LRECL = DS1LRECL;
                   DDPARM = 'LRECL=';
                   IF LRECL = 0
                        THEN DDPARM = DDPARM ××  '0';
                        ELSE DDPARM = DDPARM ××
                          SUBSTR(LRECL,6-LOG10(LRECL+1));
                   PJRET = JCL7;
                   GO TO PUTJCL;
 JCL7:
                   END;
         IF DS1KEYL ^= '0'B
              THEN DO;
                   KEYLEN = DS1KEYL;
                   RKP = DS1RKP;
                   DDPARM = 'KEYLEN=' ××
                     SUBSTR(KEYLEN,6-LOG10(KEYLEN+1));
                   PJRET = JCL8;
                   GO TO PUTJCL;
 JCL8:
                   DDPARM = 'RKP=';
                   IF RKP = 0
                        THEN DDPARM = DDPARM ××  '0';
                        ELSE DDPARM = DDPARM ××
                          SUBSTR(RKP,6-LOG10(RKP+1));
                   PJRET = JCL9;
                   GO TO PUTJCL;
 JCL9:
                   END;
         IF SUBSTR(DS1DSORG,1,1) = '1'B &   F2SW = YES
              THEN DO;
                IF DS2DVIND ^= '0'B
                   THEN DO;
                        NTM = DS2DVIND;
                        DDPARM = 'NTM=' ××
                          SUBSTR(NTM,6-LOG10(NTM+1));
                        PJRET = JCL10;
                        GO TO PUTJCL;
 JCL10:
                        END;
                IF DS2CYLOV ^= '0'B
                   THEN DO;
                        CYLOFL = DS2CYLOV;
                        DDPARM = 'CYLOFL=' ××
                          SUBSTR(CYLOFL,6-LOG10(CYLOFL+1));
                        PJRET = JCL11;
                        GO TO PUTJCL;
 JCL11:
                        END;
              END;
         DDCARD = DDCARD ××  ')';
         UVRET = JCL14;
 PUTUV:
         DO I = 1 TO 9;
              IF UTARY(I) = SUBSTR(TYPE,25,8)
                   THEN GO TO JCL12;
              END;
 JCL12:
         DDPARM = 'UNIT=' ××  UTNME(I);
         PJRET = JCL13;
         GO TO PUTJCL;
 JCL13:
         DDPARM = 'VOL=SER=' ××  VOLUME;
         PJRET = UVRET;
         GO TO PUTJCL;
 JCL14:
         INDCNT = 0;
         IF SUBSTR(DS1DSORG,1,1) = '1'B
              THEN DO;
 ISPCA:
                   IF INDEND = YES
                        THEN DO;
                             ISCNT = ISCNT &   '00100'B;
                             J = PRITRK;
                             GO TO ISPCALL;
                             END;
                   IF IMBIND = YES
                        THEN DO;
                             ISCNT = ISCNT &   '00100'B;
                             J = PRITRK;
                             INDCNT = INDTRK;
                             GO TO ISPCALL;
                             END;
                   IF PRI = YES
                        THEN DO;
                             ISCNT = ISCNT &   '11101'B;
                             J = PRITRK;
                             GO TO ISPCALL;
                             END;
                   IF IND = YES
                        THEN DO;
                             ISCNT = ISCNT &   '11110'B;
                             J = INDTRK;
                             GO TO ISPCALL;
                             END;
                   IF OVF = YES
                        THEN DO;
                             ISCNT = 0;
                             J = OVFTRK;
                             END;
 ISPCALL:
                   SPRET = ISPC;
                   GO TO SPACE;
 ISPC:
                   IF ISCNT = 0
              THEN GO TO DOCOM;
                   IF DDCARD ^= ''
              THEN PUT EDIT(DDCARD)(A) SKIP(1);
         DDCARD ='//      DD DSN=' ××  DSNJCL;
                   IF IND = YES
                        THEN DDCARD = DDCARD ××  '(INDEX),';
                        ELSE DDCARD = DDCARD ××  '(OVFLOW),';
                   DDCNTA = DDCNT-1;
                   DDPARM = 'DCB=*.DD' ××  DDCNTA;
                   PJRET = ISPCB;
                   GO TO PUTJCLA;
 ISPCB:
                   UVRET = ISPCA;
                   GO TO PUTUV;
                   END;
         EPTR = FEPTR;
         J = NOTRK;
         IF SUBSTR(DS1SCALF,7,1) = '1'B
              THEN DO K = 1 TO 5 WHILE(EPTR ^= NULL);
                   IF J < NOTRK
                        THEN J = NOTRK;
                   EPTR = NPTR;
                   END;
              ELSE IF SUBSTR(DS1SCALF,5,2) ^= '0'B
                   THEN J = TOTRK;
         SPRET = DOCOM;
 SPACE:
         DDPARM = 'SPACE=(';
         IF DS1EXTFL(1) = '0'B
              THEN DO;
                   DDPARM = DDPARM ××  'CYL,(0))';
                   GO TO SPCALL;
                   END;
         IF SUBSTR(DS1SCALF,1,2) = '01'B
              THEN DO;
                   IF DS1BLKL = 0
                        THEN DO;
                             I = DS4DEVTK - DS4DEVL;
                             IF DS1KEYL = 0
                                  THEN I = I + DS4DEVK;
                             IF SUBSTR(DS4DEVFG,7,1) = '1'B
                                  THEN I = I * (512 / DS4DEVTL);
                             BLKSIZE = I;
                             JCLFLGS(1) = '1'B;
                             END;
                   ELSE DO;
                        BLKSIZE,I = DS1BLKL;
                        I = I + DS1KEYL;
                        IF SUBSTR(DS4DEVFG,8,1) = YES
                             THEN I = I * DS4DEVTL / 512;
                        IF DS1KEYL = 0
                             THEN I = I - DS4DEVK;
                        L = I;
                        I = I + DS4DEVI;
                        L = L + DS4DEVL;
                        M = DS4DEVTK;
                        M = M - L;
                        M = (M/I) + 1;
                        J = J * M;
                        END;
                   DDPARM=DDPARM ××  SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1))
                     ××  ',(';
                   END;
              ELSE IF SUBSTR(DS1SCALF,1,2) = '10'B
                   THEN DDPARM = DDPARM ××  'TRK,(';
                   ELSE IF SUBSTR(DS1SCALF,1,2) = '11'B
                        THEN DO;
                             J = J / TRKPERCYL;
                             DDPARM = DDPARM ××  'CYL,(';
                             END;
                        ELSE DDPARM = DDPARM ××  'ABSTR,(';
         BLKSIZE = J;
         DDPARM=DDPARM ××  SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
         IF SUBSTR(DS1SCALF,1,2) = '00'B
              THEN DO;
                   EPTR = FEPTR;
                   BLKSIZE = CB1*TRKPERCYL + HB1;
                   DDPARM = DDPARM ××  ',' ××
                     SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   GO TO CKDIR;
                   END;
         IF DS1SCALO ^= 0
              THEN DO;
                   BLKSIZE = DS1SCALO;
                   DDPARM = DDPARM ××  ',' ××
                     SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   GO TO CKDIR;
                  END;
         IF SUBSTR(DS1DSORG,7,1) = '1'B × INDCNT ^= 0
              THEN DDPARM = DDPARM ××  ',';
 CKDIR:
         IF SUBSTR(DS1DSORG,7,1) = '1'B
              THEN DO;
         IF PUNSW
              THEN DO;
                   CALL DIRCNT(DS1DSNAM,J);
                   BLKSIZE = J;
                   DDPARM = DDPARM ×× ',' ××
                     SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   END;
              ELSE DDPARM = DDPARM ×× ',?';
                   GO TO EPAREN1;
                   END;
         IF INDCNT ^= 0
              THEN DO;
                   BLKSIZE = INDCNT;
                   DDPARM = DDPARM ××  ',' ××
                     SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   END;
 EPAREN1:
         DDPARM = DDPARM ××  ')';
         IF SUBSTR(DS1SCALF,1,2) = '00'B
              THEN GO TO CKROUNDA;
         IF SUBSTR(DS1SCALF,5,1) = '1'B
              THEN DO;
                   DDPARM = DDPARM ××  ',,CONTIG';
                   GO TO CKROUND;
                   END;
         IF SUBSTR(DS1SCALF,6,1) = '1'B
              THEN DO;
                   DDPARM = DDPARM ××  ',,MXIG';
                   GO TO CKROUND;
                   END;
         IF SUBSTR(DS1SCALF,7,1) = '1'B
              THEN DO;
                   DDPARM = DDPARM ××  ',,ALX';
                   GO TO CKROUND;
                   END;
         IF SUBSTR(DS1SCALF,8,1) = '1'B
              THEN DDPARM = DDPARM ××  ',,';
 CKROUND:
         IF SUBSTR(DS1SCALF,8,1) = '1'B
              THEN DDPARM = DDPARM ××  ',ROUND';
 CKROUNDA:
         DDPARM = DDPARM ××  ')';
 SPCALL:
         PJRET = SPRET;
         GO TO PUTJCL;
 DOCOM:
         IF PUNSW
              THEN GO TO DC17;
         JCLFLGS(2) = '1'B;
         IF JCLFLGS(1) = '1'B
              THEN DO;
                   COMMENT = 'CAUTION, SPACE ORIGINALLY ALLOCATED IN BLO
 CKS, BUT DS1BLKL IS NOW ZERO.';
                   PCRET = DC1;
                   GO TO PUTCOM;
                   END;
 DC1:
         COMMENT = 'DATA SET SERIAL NUMBER = ' ××  DS1DSSN;
         PCRET = DC2;
         GO TO PUTCOM;
 DC2:
         BLKSIZE = DS1VOLSQ;
         COMMENT = 'VOLUME SEQUENCE NUMBER = ' ××
           SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
         PCRET = DC3;
         GO TO PUTCOM;
 DC3:
         YY = SUBSTR(DS1CREDT,1,8);
         DDD = SUBSTR(DS1CREDT,9,16);
         COMMENT = 'CREATION DATE = ' ××  YY ××  DDD;
         PCRET = DC4;
         GO TO PUTCOM;
 DC4:
         IF TOTRK = 0
              THEN GO TO PCLAST;
         IF SUBSTR(DS1DSORG,7,1) = '1'B
              THEN IF DS1NOBDB ^= 0
                   THEN DO;
                        BLKSIZE = DS1NOBDB;
                        COMMENT = 'NUMBER OF BYTES USED IN THE LAST PDS
 DIRECTORY BLOCK = ' ××  SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                        PCRET = DC5;
                        GO TO PUTCOM;
                        END;
                   ELSE DO;
                        COMMENT = 'THE LAST PDS DIRECTORY BLOCK IS NOT Y
 ET IN USE.';
                        PCRET = DC5;
                        GO TO PUTCOM;
                        END;
 DC5:
         IF SUBSTR(DS1DSIND,3,1) = '1'B
              THEN DO;
                   COMMENT = 'BLOCK LENGTH MUST ALWAYS BE A MULTIPLE OF
 8 BYTES.';
                   PCRET = DC7;
                   GO TO PUTCOM;
                   END;
 DC7:
         LABALL = DC7A;
         IF BOOL(DS1DSORG,'01000010'B,'0001'B)
              THEN DO;
 ALLCOM:
         J = TOTRK * 100 -
           (SUBSTR(DS1LSTAR,1,16)*100+(100-(DS1TRBAL*100)/DS4DEVTK));
         DTOT = DTOT + (J / 100);
         OTRKS = J;
         IF J < 100
              THEN I = 2;
              ELSE I = LOG10(J);
         BLKSIZE = J / TOTRK;
         IF BLKSIZE < 10
              THEN J = 1;
              ELSE J = LOG10(BLKSIZE);
         COMMENT = SUBSTR(OTRKS,7-I) ××
           ' TRACKS ARE UNUSED = ' ××
           SUBSTR(BLKSIZE,5-J) ××
           ' PERCENT OF TOTAL ALLOCATION.';
         GO TO LABALL;
 DC7A:
         PCRET = DC8;
         GO TO PUTCOM;
                   END;
 DC8:
         IF SUBSTR(DS1DSORG,1,1) = YES
              THEN IF F2SW = NO
                   THEN DO;
                        COMMENT = 'THE FORMAT 2 DSCB IS NOT LOCATED ON T
 HIS PACK.';
                        PCRET = PCLAST;
                        GO TO PUTCOM;
                        END;
              ELSE DO;
                   BLKSIZE = DS2NOLEV;
                   COMMENT = 'THIS FILE CONTAINS ';
                   IF DS2NOLEV = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××
                     ' INDEX LEVELS.';
                   PCRET = DC9;
                   GO TO PUTCOM;
 DC9:
                   BLKSIZE = DS2TAGDT;
                   COMMENT = 'USER SUPPLIED NUMBER OF RECORDS TAGGED FOR
  DELETION = ';
                   IF DS2TAGDT = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   PCRET = DC10;
                   GO TO PUTCOM;
 DC10:
                   BLKSIZE = DS2RORG3;
                   IF DS2RORG3 = 0
                        THEN COMMENT = '0';
                        ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE))
                          ;
                   COMMENT  = COMMENT ××
                    ' READ AND WRITE ACCESSES WERE MADE DURING THE LAST
 USE OF THE DATA SET';
                   PCRET = DC10A;
                   GO TO PUTCOM;
 DC10A:
                   COMMENT = '     TO AN OVERFLOW RECORD THAT IS NOT FIR
 ST IN A CHAIN OF SUCH RECORDS.';
                   PCRET = DC11;
                   GO TO PUTCOM;
 DC11:
                   BLKSIZE = DS2NOBYT;
                   IF DS2NOBYT ^= 0
                        THEN DO;
                             COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1)
                          );
                   COMMENT = COMMENT ××
                     ' BYTES ARE NEEDED TO HOLD THE HIGHEST LEVEL INDEX
 IN MAIN STORAGE.';
                   PCRET = DC12;
                   GO TO PUTCOM;
 DC12:
                             CALL TROUT(DS2ADHIN,C16);
                             COMMENT = 'MBBCCHH OF FIRST TRACK OF HIGHES
 T LEVEL INDEX = ' ××  C16;
                             PCRET = ADHPR;
                             GO TO PUTCOM;
 ADHPR:
                             END;
                   BLKSIZE = DS2PRCTR;
                   IF DS2PRCTR = 0
                        THEN COMMENT = '0';
                        ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1)
                          );
                   COMMENT = COMMENT ××  ' RECORDS ARE WRITTEN IN THE PR
 IME DATA AREA.';
                   PCRET = DC13A;
                   GO TO PUTCOM;
 DC13A:
                   CALL TROUT(DS2LPRAD,C16);
                   COMMENT = 'MBBCCHHR OF LAST RECORD IN PRIME DATA AREA
  = ' ××  C16;
                   GSW=NO;
                   PCRET = LPRPR;
                   GO TO PUTCOM;
 LPRPR:
                   X = 0;
                   IF DS2PRCTR = 0
                        THEN SCCHH = PRIPTR -> CH1;
                        ELSE DO;
                             SCCHH = SUBSTR(DS2LPRAD,4,4);
                             SHH = SHH + 1;
                             IF SHH = TRKPERCYL
                                  THEN DO;
                                       SHH = 0;
                                       SCC = SCC + 1;
                                       END;
                             END;
                   IF INDTRK = 0 &   OVFTRK = 0
                        THEN DO;
                             ECCHH = SUBSTR(DS2ADHIN,4,4);
                             ECC = ECC - 1;
                             EHH = TRKPERCYL - 1;
                             END;
                        ELSE DO;
                             WPTR = PRIPTR;
                             DO WHILE(WPTR -> EFLG = '00000001'B × WPTR
                               -> EFLG = '10000001'B);
                                  ECCHH = WPTR -> CH2;
                                  WPTR = WPTR -> NPTR;
                                  END;
                             END;
                   CEFLG = '00000001'B;
                   PCRET = SOMTHIN;
                   GO TO CALCTRK;
 SOMTHIN:
                   BLKSIZE,S  = X;
                   IF X = 0
                        THEN COMMENT = '0';
                        ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1)
                          );
                   COMMENT = COMMENT ××  ' TRACKS IN THE PRIME DATA AREA
  ARE UNUSED = ';
                   IF PRITRK = 0
                        THEN COMMENT = COMMENT ××  '0 PERCENT';
                        ELSE DO;
                   BLKSIZE = (X * 100) / PRITRK;
                             COMMENT = COMMENT ××
                               SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1)) ××
                               ' PERCENT';
                             END;
                             PCRET = DC13B;
                             IF GSW = NO
                                  THEN GO TO PUTCOM;
 DC13B:
                   Y = X;
                   X = 0;
                   IF INDTRK ^= 0 &   OVFTRK ^= 0
                        THEN DO;
                             SCCHH = INDPTR -> CH1;
                             ECCHH = SUBSTR(DS2ADHIN,4,4);
                             EHH = EHH - 1;
                             IF EHH < 0
                                  THEN DO;
                                       ECC = ECC - 1;
                                       EHH = TRKPERCYL - 1;
                                       END;
                             CEFLG = '00000100'B;
                             PCRET = DC13AA;
                             GO TO CALCTRK;
 DC13AA:
                             BLKSIZE = X;
                             IF X = 0
                                  THEN COMMENT = '0';
                                  ELSE COMMENT =
                                    SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                             COMMENT = COMMENT ××  ' TRACKS IN THE INDEX
  AREA ARE UNUSED = ';
                             BLKSIZE = (X*100)/INDTRK;
                             IF BLKSIZE = 0
                                  THEN COMMENT = COMMENT ××  '0';
                                  ELSE COMMENT = COMMENT ××
                                    SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                             COMMENT = COMMENT ××  ' PERCENT.';
                             PCRET = DC13AB;
                             IF GSW = NO
                                  THEN GO TO PUTCOM;
 DC13AB:
                             Y = Y + X;
                             X = 0;
                             N = OVFTRK;
                             GO TO DOOVF;
                             END;
                   IF OVFTRK ^= 0
                        THEN DO;
                             N = OVFTRK;
                             GO TO DOOVF;
                             END;
                   IF DS2LOVAD = LOW(8)
                        THEN GO TO CKCYLOF;
                   IF INDTRK ^= 0
                        THEN CEFLG = '00000100'B;
                        ELSE IF OVFTRK ^= 0
                             THEN CEFLG = '00000010'B;
                             ELSE CEFLG = '00000001'B;
                   IF INDTRK ^= 0
                        THEN SCCHH = INDPTR -> CH1;
                        ELSE SCCHH = SUBSTR(DS2ADHIN,4,2) ××  LOW(2);
                   ECCHH = SUBSTR(DS2ADHIN,4,4);
                   PCRET = DC13AC;
                   GO TO CALCTRK;
 DC13AC:
                   N = X;
                   X = 0;
 DOOVF:
                   Y = Y + DS2RORG2;
                   BLKSIZE = DS2RORG2;
                   IF DS2RORG2 = 0
                        THEN COMMENT = '0';
                        ELSE COMMENT =
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××  ' TRACKS REMAIN IN THE INDEPEND
 ENT OVERFLOW AREA = ';
                   BLKSIZE =(DS2RORG2*100)/N;
                   IF BLKSIZE = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××  ' PERCENT.';
                   PCRET = CKCYLOF;
                   IF GSW = NO
                        THEN GO TO PUTCOM;
 CKCYLOF:
                   IF DS2OVRCT = 0 &   DS2PRCTR ^= 0
                        THEN DO;
                             SCCHH = PRIPTR -> CH1;
                             ECCHH = SUBSTR(DS2LPRAD,4,4);
                             CEFLG = '00000001'B;
                             PCRET = DC13AD;
                             GO TO CALCTRK;
 DC13AD:
                             X =(X / TRKPERCYL) * DS2CYLOV;
                             Y = Y + X;
                             END;
                   BLKSIZE = DS2OVRCT;
                   COMMENT = 'THERE ARE ';
                   IF DS2OVRCT = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××
                     ' RECORDS IN THE OVERFLOW AREA.';
                   PCRET = DC14;
                   IF GSW = NO
                        THEN GO TO PUTCOM;
 DC14:
                   BLKSIZE = DS2RORG1;
                   IF DS2CYLOV = 0
                        THEN GO TO DC15;
                   IF DS2RORG1 = 0
                        THEN COMMENT = '0';
                        ELSE COMMENT =
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××
                     ' CYLINDER OVERFLOW AREAS ARE FULL.';
                   PCRET = DC15;
                   IF GSW = NO
                        THEN GO TO PUTCOM;
 DC15:
                   COMMENT = 'AN INITIAL LOAD HAS ';
                   IF SUBSTR(DS2STIND,3,1) = NO
                        THEN COMMENT = COMMENT ××  'NOT ';
                   COMMENT = COMMENT ××  'BEEN COMPLETED.';
                   PCRET = DC16;
                   IF GSW = NO
                        THEN GO TO PUTCOM;
 DC16:
         DTOT = DTOT + Y;
                   COMMENT = 'AT LEAST ';
                   BLKSIZE = Y;
                   IF BLKSIZE = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××  ' OF THE ';
                   BLKSIZE = TOTRK;
                   COMMENT = COMMENT ××
                     SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××  ' TRACKS ALLOCATED ARE UNUSED =
  ';
                   BLKSIZE = (Y*100) / TOTRK;
                   IF BLKSIZE = 0
                        THEN COMMENT = COMMENT ××  '0';
                        ELSE COMMENT = COMMENT ××
                          SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
                   COMMENT = COMMENT ××  ' PERCENT.';
                   PCRET = DC16A;
                   IF GSW = NO
                        THEN GO TO PUTCOM;
                        ELSE GO TO PT109;
 CALCTRK:
         WPTR = FEPTR;
         DO WHILE(WPTR ^= NULL);
              DO CI = 1 TO 8;
                   IF SUBSTR(MEFLG,CI,1) = '1'B
                        THEN IF SUBSTR(CEFLG,CI,1) ^=
                          SUBSTR(WPTR -> EFLG,CI,1)
                             THEN GO TO CTCALCA;
                   END;
              IF SCCHH < WPTR -> CH1
                   THEN IF ECCHH < WPTR -> CH1
                        THEN GO TO CTCALCA;
                        ELSE SCCHHA = WPTR -> CH1;
                   ELSE IF SCCHH >  WPTR -> CH2
                        THEN GO TO CTCALCA;
                        ELSE SCCHHA = SCCHH;
              IF ECCHH >  WPTR -> CH2
                   THEN ECCHHA = WPTR -> CH2;
                   ELSE ECCHHA = ECCHH;
 CTCALC:
              X=X+(ECCA-SCCA-1)*TRKPERCYL+TRKPERCYL-SHHA+EHHA+1;
 CTCALCA:
              WPTR = WPTR -> NPTR;
              END;
         GO TO PCRET;
 DC16A:
                   END;
 PCLAST:
         PCRET = DC17;
         GO TO PUTCOM;
 DC17:
         NXFIRST = '0'B;
         IF SPACECNTL
              THEN CALL CNTLPRC(TOTRK,DS1DSNAM,VOLUME,EOFSW);
         EPTR = FEPTR;
         DO WHILE(EPTR ^= NULL);
              DPTR = EPTR;
              EPTR = NPTR;
              FREE DPTR -> ELEMENT;
              END;
         GO TO NXT;
 PUTCOM:
         IF JCLFLGS(2) = YES
              THEN DO;
                   JCLFLGS(2) = NO;
                   JCLFLGS(3) = NO;
                   IF DDCARD ^= ''
                        THEN DO;
                             PUT EDIT(DDCARD)(A) SKIP(1);
                             DDCARD = '';
                             END;
                   EPTR = FEPTR;
                   END;
 PCADR:
         PUT EDIT('//*',COMMENT)(A,X(26),A) SKIP(1);
         IF TOTRK = 0
              THEN GO TO PCRA;
         IF EPTR = NULL
              THEN DO;
                   IF JCLFLGS(3) = NO
                        THEN DO;
                             JCLFLGS(3) = YES;
                             PUT EDIT('TOTAL =',TOTRK)(COL(122),A,
                               P'ZZZ9');
                             END;
                   COMMENT = '';
                   GO TO PCRET;
                   END;
         PFLGA = EFLG;
         ESQA = EXTSQ;
         CALL TROUT(PCCBIT,PCCONV);
         CALL TROUT(CH1,CHA);
         CALL TROUT(CH2,CHB);
         PUT EDIT(PFLG,ESQ,CHA,'-',CHB,NOTRK)(COL(105),A,X(1),A,X(1),A,
           A,A,X(1),P'ZZZ9');
         EPTR = NPTR;
         IF COMMENT = ''
              THEN GO TO PCADR;
 PCRA:
         COMMENT = '';
         GO TO PCRET;
 PTOT:
         IF PUNSW
              THEN GO TO RETURN;
         IF PNMSW = YES
              THEN GO TO RETURN;
         PUT EDIT('AT LEAST ')(A) SKIP(3);
         BLKSIZE=DTOT;
         IF DTOT = 0
              THEN COMMENT = '0';
              ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
         PUT EDIT(COMMENT,' OF THE ')(A,A);
         BLKSIZE = DTOTA;
         IF DTOTA = 0
              THEN COMMENT = '0';
              ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
         PUT EDIT(COMMENT,' TRACKS ALLOCATED ON THIS VOLUME ARE UNUSED =
  ')(A,A);
         IF DTOTA = 0
              THEN BLKSIZE = 0;
              ELSE BLKSIZE = (DTOT*100)/DTOTA;
         IF BLKSIZE = 0
              THEN COMMENT = '0';
              ELSE COMMENT = SUBSTR(BLKSIZE,6-LOG10(BLKSIZE+1));
         PUT EDIT(COMMENT,' PERCENT.')(A,A);
         GO TO RETURN;
         END;
