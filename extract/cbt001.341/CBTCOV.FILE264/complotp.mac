 COMPLOT: PROC(PARM) OPTIONS(MAIN);
 /**********************************************************************
 *                                                                     *
 * THIS PROGRAM IS DESIGNED TO MANIPULATE GRAPHICS DATA.  A NUMBER OF  *
 * KEYWORDS CAN BE SPECIFIED IN THE PARM FIELD TO CONTROL THE PROCESS. *
 * THESE KEYWORDS ARE OF TWO TYPES, DEPENDING ON WHETHER THEY ARE      *
 * IMMEDIATELY FOLLOWED BY A PARENTHESIZE VALUE, E.G. 'CITOH' IS OF    *
 * THE FIRST TYPE, AND 'XSCALE(60)' IS OF THE SECOND TYPE.  AN ENTIRE  *
 * LISTING OF THE KEYWORDS FOLLOWS, ALONG WITH ANY DEFAULT VALUES      *
 * THAT WILL BE TAKEN BY THIS PROGRAM IF NO KEYWORD IS SPECIFIED:      *
 *                                                                     *
 * XSCALE(60)                                                          *
 * YSCALE(72)                                                          *
 * XFACTOR(1)                                                          *
 * YFACTOR(1)                                                          *
 * GRIDEDGE(792)                                                       *
 * GSCALE(1)                                                           *
 * STRIPLEN(124)                                                       *
 *                                                                     *
 * IN         ×                                                        *
 * IMATRIX    ×THESE THREE ARE MUTUALLY EXCLUSIVE. DEFAULT IS 'IN'.    *
 * CMDS       ×                                                        *
 *                                                                     *
 * IGP        ×                                                        *
 * CITOH      ×THESE THREE ARE MUTUALLY EXCLUSIVE. DEFAULT IS 'CITOH'. *
 * OMATRIX    ×                                                        *
 *                                                                     *
 * NOTE THAT ANY KEYWORD MAY BE ABBREVIATED TO THE POINT OF            *
 * AMBIGUITY, E.G. XSC(5) IS EQUIVALENT TO XSCALE(5), BUT X(60) MAY    *
 * TURN OUT TO BE XSCALE(60) OR XFACTOR(1), DEPENDING ON THE ORDER IN  *
 * WHICH KEYWORDS ARE CHECKED BY THE PROGRAM.                          *
 *                                                                     *
 * INPUT:                                                              *
 *   THREE MUTUALLY EXCLUSIVE KEYWORDS DETERMINE THE KIND OF INPUT:    *
 *                                                                     *
 *   IN (THIS IS THE DEFAULT IS NO KEYWORD IS SPECIFIED)               *
 *     WHEN THIS KEYWORD IS SPECIFIED, INPUT IS EXPECTED UNDER THE     *
 *     DDNAME FT14F001.  EACH RECORD IN THIS DATA SET IS EXPECTED      *
 *     TO BEGIN WITH A 4-BYTE KEYWORD.  THIS KEYWORD DETERMINES THE    *
 *     LAYOUT OF THE REST OF THE RECORD.  THIS FILE WAS WRITTEN BY A   *
 *     FORTRAN PROGRAM USING UNFORMATTED WRITES.                       *
 *                                                                     *
 *     'PLOT'                                                          *
 *       THE REST OF THE RECORD SHOULD CONSIST OF REAL VALUE (FLOATING *
 *       POINT X AND Y VALUES, FOLLOWED BY A FULLWORD INTEGER VALUE TO *
 *       BE EITHER OF THE INTEGERS 2 OR 3.  THE X AND Y VALUES (INCHES)*
 *       INDICATE WHERE THE PEN IS TO BE MOVED TO NEXT.  IF THE THIRD  *
 *       VALUE IS A 2, THE PEN WILL BE LOWERED DURING THE MOVE, AND    *
 *       IF THE THIRD VALUE IS A 3, THE PEN WILL BE RAISED DURING THE  *
 *       MOVE.  NOTE THAT THE MOVEMENT IS SIMULATED IN THIS PROGRAM BY *
 *       A CHARACTER MATRIX, IN WHICH EACH ELEMENT IS ONE CHARACTER    *
 *       LONG, AND REPRESENTS A PIXEL.  IF A PIXEL IS TO BE COVERED    *
 *       WITH INK, THAT POSITION IN THE MATRIX WILL BE '1', AND        *
 *       OTHERWISE WILL BE ZERO.  OTHER KEYWORDS DESCRIBED BELOW ARE   *
 *       USED TO SPECIFY THE SIZE IN INCHES OF EACH PIXEL.             *
 *     'SYMB'                                                          *
 *       THE REST OF THE RECORD SHOULD CONSIST OF FIVE NUMBERS, THE    *
 *       FIRST FOUR OF WHICH ARE REAL (FLOATING POINT), AND THE LAST   *
 *       IS INTEGER; AN X VALUE, A Y VALUE, A HEIGHT (ALL IN           *
 *       INCHES), FOLLOWED BY AN ANGLE, FOLLOWED BY THE NUMBER OF      *
 *       CHARACTERS OF TEXT TO BE READ FROM THE REST OF THE RECORD.    *
 *       THIS PROGRAM WILL "PRINT" THE SPECIFIED                       *
 *       TEXT BEGINNING AT THE SPECIFIED X AND Y VALUES, WITH THE      *
 *       CHARACTERS AT THE SPECIFIED HEIGHT AND ANGLE (CURRENTLY,      *
 *       ONLY ANGLES 0 AND -90 DEGREES ARE ACCEPTED).                  *
 *                                                                     *
 *   CMDS                                                              *
 *     WHEN THIS KEYWORD IS SPECIFIED, INPUT IS EXPECTED UNDER THE     *
 *     DDNAME CMDS.  EACH RECORD IN THIS DATA SET IS EXPECTED TO       *
 *     CONTAIN A FREE-FORM LIST BEGINNING WITH A KEYWORD.  THE         *
 *     KEYWORD DETERMINES THE CONTENT OF THE REST OF EACH LIST:        *
 *                                                                     *
 *     MOVE <X> <Y>                                                    *
 *       THE REST OF THE LIST CONSISTS OF AN X VALUE AND Y VALUE       *
 *       (IN INCHES) SPECIFYING THE POINT TO WHICH THE PEN IS TO BE    *
 *       MOVED.  THE PEN WILL BE RAISED DURING THE MOVE, I.E. NO INK   *
 *       WILL BE PUT ON THE OUTPUT.                                    *
 *     DRAW <X> <Y>                                                    *
 *       THE REST OF THE LIST CONSISTS OF AN X VALUE AND Y VALUE       *
 *       (IN INCHES) SPECIFYING THE POINT TO WHICH THE PEN IS TO BE    *
 *       MOVED.  THE PEN WILL BE LOWERED DURING THE MOVE, I.E. INK     *
 *       WILL BE PUT ON THE OUTPUT AND A LINE WILL BE DRAWN.           *
 *     TEXT <X> <Y> <HEIGHT> <ANGLE> '<TEXT>'                          *
 *       FIVE ITEMS ARE EXPECTED FOLLOWING THE TEXT KEYWORD - AN       *
 *       X VALUE, A Y VALUE, A HEIGHT VALUE (ALL IN INCHES), FOLLOWED  *
 *       BY AN ANGLE (IN DEGREES), FOLLOWED BY TEXT SURROUNDED IN      *
 *       SINGLE APOSTROPHES.  THE SPECIFIED TEXT WILL BE PRINTED       *
 *       AS THE SPECIFIED X,Y COORDINATES WITH THE SPECIFIED HEIGHT    *
 *       AND ANGLE.                                                    *
 *                                                                     *
 *   IMATRIX                                                           *
 *     WHEN THIS KEYWORD IS SPECIFIED, INPUT IS EXPECTED UNDER THE     *
 *     DDNAME IMATRIX.  RECORDS IN THIS DATA SET COMPRISE A CHARACTER  *
 *     MATRIX OF 1'S AND 0'S, AND ARE READ DIRECTLY INTO THE           *
 *     CHARACTER MATRIX IN THE PROGRAM USED TO SIMULATE A PEN PLOT.    *
 *     THE FIRST CHARACTER POSITION IN THE FIRST RECORD HAVE IS GRID   *
 *     ELEMENT (1,1).  THE POSITIVE X AXIS EXTENDS ALONG THE           *
 *     CHARACTERS IN EACH RECORD, AND THE POSITIVE Y AXIS EXTENDS      *
 *     ALONG THE RECORDS FROM THE FIRST READ THRU THE LAST.            *
 *                                                                     *
 * OUTPUT:                                                             *
 *   THREE MUTUALLY EXCLUSIVE KEYWORDS DETERMINE THE KIND OF OUTPUT.   *
 *                                                                     *
 *   IGP                                                               *
 *     THE SIMULATED PEN PLOT IS CONVERTED TO A DATA STREAM SUITABLE   *
 *     FOR PRINTING ON A PRINTRONIX PRINTER EQUIPPED WITH AN IGP       *
 *     GRAPHICS CIRCUIT BOARD.  THE OUTPUT IS WRITTEN TO DDNAME OUT    *
 *     WITH ASA CARRIAGE CONTROL IN COLUMN 1.                          *
 *   CITOH (THIS IS THE DEFAULT IF NO KEYWORD IS SPECIFIED)            *
 *     THE SIMULATED PEN PLOT IS CONVERTED TO A DATA STREAM SUITABLE   *
 *     FOR PRINTING ON A CITOH PRINTER EQUIPPED WITH A QMS GRAPHICS    *
 *     CIRCUIT BOARD.  THE OUTPUT IS WRITTEN TO DDNAME OUT WITH ASA    *
 *     CARRIAGE CONTROL IN COLUMN 1.                                   *
 *   OMATRIX                                                           *
 *     THE SIMULATED PEN PLOT IS WRITTEN AS A CHARACTER MATRIX OF      *
 *     1'S AND 0'S TO FILE OMATRIX.  THIS FILE WOULD BE SUITABLE FOR   *
 *     FOR INPUT TO THIS PROGRAM IF THE IMATRIX KEYWORD WERE SPECIFIED *
 *     (SEE ABOVE).                                                    *
 *                                                                     *
 * OTHER KEYWORD PARAMETERS ARE USED TO CONTROL PLOT SIMULATION        *
 * ITSELF:                                                             *
 *                                                                     *
 * XSCALE(60)                                                          *
 *   NUMBER OF GRID ELEMENTS PER INCH ALONG X AXIS.  NOTE THAT FOR THE *
 *   CITOH PRINTER, CURRENTLY THE ONLY ACCEPTABLE VALUE IS 60.  FOR    *
 *   THE PRINTRONIX, A VALUE OF 120 IS ALSO ACCEPTABLE, IN WHICH CASE  *
 *   THE PLOT WILL BE PRINTED AT DOUBLE DENSITY (HALF-DOT PLOTTING).   *
 * YSCALE(72)                                                          *
 *   NUMBER OF GRID ELEMENTS PER INCH ALONG Y AXIS.                    *
 * XFACTOR(1)                                                          *
 *   FACTOR TO APPLY TO INCOMING X VALUES BEFORE PLOTTING ON THE GRID. *
 * YFACTOR(1)                                                          *
 *   FACTOR TO APPLY TO INCOMING Y VALUES BEFORE PLOTTING ON THE GRID. *
 * GRIDEDGE(792)                                                       *
 *   NUMBER OF GRID ELEMENTS ON ONE EDGE OF THE SQUARE MATRIX OF       *
 *   ELEMENTS USED TO SIMULATE PEN PLOTTING.                           *
 * GSCALE(1)                                                           *
 *   FACTOR TO APPLY TO BOTH X AND Y VALUES BEFORE PLOTTING ON THE     *
 *   GRID.  THIS IS JUST A CONVENIENCE IN CASES WHERE YOU WANT TO      *
 *   APPLY THE SAME FACTOR TO BOTH THE X AND Y VALUES, E.G.            *
 *   SPECIFYING 'GSCALE(1.5)' IS EQUIVALENT TO SPECIFYING              *
 *   'XFACTOR(1.5) YFACTOR(1.5)'.                                      *
 * STRIPLEN(124)                                                       *
 *   THIS APPLIES ONLY IF ONE OF THE KEYWORDS IGP IS USED,             *
 *   AND LETS THE PLOT BE PRINTED IN STRIPS, WHICH CAN SUBSEQUENTLY    *
 *   BE PASTED TOGETHER TO PRODUCE A LARGE SCALE PLOT.                 *
 *                                                                     *
 * NOTE THAT THE PROGRAM USES INPUT FROM A PARTITIONED DATA SET        *
 * ALLOCATED UNDER THE DDNAME IMAGELIB TO PRINT TEXT ON THE PLOT.      *
 * THIS PDS MUST CONTAIN FIXED LENGTH, 20-BYTE RECORDS.  EACH MEMBER   *
 * CONTAINS THE NECESSARY PEN MOVEMENT INFORMATION TO PRINT ONE OF THE *
 * 256 POSSIBLE EBCDIC CHARACTERS.  EACH RECORD CONTAINS AN X-Y VALUE  *
 * PAIR, INDICATING WHERE THE PEN IS TO BE MOVED, RELATIVE 0, AND      *
 * EITHER A 2 OR 3 TO INDICATE WHERE THE PEN IS TO BE LOWERED OR NOT   *
 * DURING THE MOVE.  THE SET OF INSTRUCTIONS WILL PRINT A CHARACTER    *
 * .1 INCH WIDE BY .2 HIGH.  THIS PROGRAM WILL ALTER THE INSTRUCTIONS  *
 * EACH TIME A CHARACTER IS PRINTED FOR THE SPECIFIED HEIGHT.          *
 *                                                                     *
 * MEMBER NAMES IN IMAGELIB MUST CONSIST OF THE CHARACTERS 'HEX'       *
 * FOLLOWED BY THE PRINTABLE HEX REPRESENTATION OF THE CHARACTER       *
 * REPRESENTED BY THAT MEMBER, E.G. HEXC1 IS THE MEMBER NAME FOR THE   *
 * CHARACTER 'A'.                                                      *
 *                                                                     *
 **********************************************************************/

   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL (PARM,OPERBUF,PARMBUF) CHAR(100) VAR;
   DCL SPARS ENTRY(CHAR(100) VAR,,CHAR(80) VAR,FIXED BIN(15,0));
   DCL KEYVAL CHAR(80) VAR;
   DCL KEYINDX FIXED BIN(15,0);
   DCL KEYTAB(13) CHAR(20) VAR STATIC INIT(
     'XSCALE',   /* NUMBER OF GRID ELEMENTS PER INCH ALONG X AXIS */
     'YSCALE',   /* NUMBER OF GRID ELEMENTS PER INCH ALONG Y AXIS */
     'XFACTOR',  /* FACTOR TO APPLY TO X VALUES */
     'YFACTOR',  /* FACTOR TO APPLY TO Y VALUES */
     'GRIDEDGE', /* NUMBER OF ELEMENTS ON A SIDE OF THE GRID USED TO
                    BUILD THE OUTPUT IMAGE.  ALL ELEMENTS ARE
                    INITIALIZED TO 0, AND ARE SET TO 1 TO INDICATE
                    WHERE INK IS TO BE PRINTED */
     'GSCALE',   /* SCALING FACTOR TO APPLY TO X,Y VALUES JUST BEFORE
                    ADDRESSING GRID ELEMENTS */
     'STRIPLEN', /* NUMBER OF PERMISSIBLE OUTPUT CHARACTERS IN EACH
                    PRINT LINE */
     'IGP',      /* INDICATES OUTPUT IS TO BE PRINTED ON A PRINTRONIX
                    PRINTER. */
     'CITOH',    /* INDICATES OUTPUT IS TO BE PRINTED ON A CITOH */
     'IN',       /* INDICATES IN FILE IN CONTAINS COMPLOT INPUT */
     'IMATRIX',  /* INDICATES IN FILE IMATRIX CONTAINS MATRIX */
     'CMDS',     /* INDICATES IN FILE CMDS CONTAINS COMMAND INPUT */
     'OMATRIX'); /* INDICATES OUTPUT IS TO BE CHARACTER MATRIX */
   DCL XSCALE DEC FLOAT(16) INIT(60); /* GRID ELS PER HORIZ. INCH */
   DCL YSCALE DEC FLOAT(16) INIT(72); /* GRID ELS PER VERT. INCH */
   DCL XFACTOR DEC FLOAT(16) INIT(1);
   DCL YFACTOR DEC FLOAT(16) INIT(1);
   DCL GRIDEDGE FIXED BIN INIT(792); /* HBOUND OF SQUARE GRID */
   DCL GSCALE DEC FLOAT(16) INIT(1);
   DCL STRIPLEN FIXED BIN INIT(124);
   DCL IGP FIXED BIN STATIC INIT(8);
   DCL CITOH FIXED BIN STATIC INIT(9);
   DCL OMATRIX FIXED BIN STATIC INIT(13);
   DCL PRINTER FIXED BIN INIT(CITOH);
   DCL IN FIXED BIN STATIC INIT(10);
   DCL IMATRIX FIXED BIN STATIC INIT(11);
   DCL CMDS FIXED BIN STATIC INIT(12);
   DCL INTYPE FIXED BIN INIT(IN);
   /*
   ******** END OF PARM-DRIVEN VARIABLES
   */
   DCL GRID(*,*) CHAR(1) CONTROLLED;
   DCL (IXSCALE,IYSCALE,X,XC,XO,Y,YC,YO) FLOAT DEC(16);
   DCL INF FILE RECORD;
   DCL OUT FILE RECORD;
   DCL IMATFIL FILE RECORD;
   DCL OMATFIL FILE RECORD;
   DCL CMDSF FILE RECORD;
   DCL KEY CHAR(8) VAR;
   DCL TROUT ENTRY(CHAR(1)) RETURNS(CHAR(2));
   DCL NULL BUILTIN;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   /*
   *********** FOLLOWING ARE DECLARES FOR BPAM INTERFACE.
   */
   DCL MEMPTR PTR;
   DCL 1 MYMEMORY BASED(MEMPTR),
     2 MYMEMLEN FIXED BIN(15,0) INIT(30016),
       /* ALLOWS INVOKER TO FREE MEMORY IF HE CHOOSES */
     2 DCBPTR PTR,
     2 BUFPTR PTR,
     2 BUFPTRPTR PTR,
     2 BCNTSAV FIXED BIN(15,0) INIT(0),
     2 BUFFER CHAR(30000) VARYING;
   DCL 1 DCB2 BASED(DCBPTR),
     2 DCBPAD1 CHAR(36),
     2 DCBRECFM BIT(8),
     2 DCBPAD2 CHAR(11),
     2 DCBOFLG BIT(8),
     2 DCBPAD3 CHAR(33),
     2 DCBLRECL FIXED BIN(15,0);
   DCL CURREC CHAR(20) BASED(CURPTR);

   MEMPTR=NULL;
   PARMBUF=PARM;
   DO WHILE(PARMBUF^='');
     PARMBUF=SUBSTR(PARMBUF,PREFIX(PARMBUF,' '));
     I=INDEX(PARMBUF,' ');
     IF I=0
       THEN DO;
         OPERBUF=PARMBUF;
         PARMBUF='';
         END;
       ELSE DO;
         OPERBUF=SUBSTR(PARMBUF,1,I-1);
         PARMBUF=SUBSTR(PARMBUF,I);
         END;
     CALL SPARS(OPERBUF,KEYTAB,KEYVAL,KEYINDX);
     SELECT(KEYINDX);
       WHEN(0) DO; /* INVALID KEYWORD */
         PUT SKIP EDIT('INVALID KEYWORD='××OPERBUF)(A);
         SIGNAL ERROR;
         END;
       WHEN(1) XSCALE=KEYVAL;
       WHEN(2) YSCALE=KEYVAL;
       WHEN(3) XFACTOR=KEYVAL;
       WHEN(4) YFACTOR=KEYVAL;
       WHEN(5) GRIDEDGE=KEYVAL;
       WHEN(6) GSCALE=KEYVAL;
       WHEN(7) STRIPLEN=KEYVAL;
       WHEN(8,9,13) PRINTER=KEYINDX; /* IGP, CITOH, OR OMAT KEYWORD */
       WHEN(10,11,12) INTYPE=KEYINDX; /* TYPE OF FILE INPUT */
       OTHERWISE;
       END; /* SELECT */
     END;

   IF XSCALE^=60 & PRINTER=CITOH
     THEN DO;
       PUT SKIP LIST('ERROR - XSCALE FOR CITOH M/B 60');
       SIGNAL ERROR;
       END;
   IXSCALE=1/XSCALE; /* # INCHES PER DOT ALONG X AXIS */
   IYSCALE=1/YSCALE; /* # INCHES PER DOT ALONG Y AXIS */
   STRIPLEN=STRIPLEN-MOD(STRIPLEN,2); /* MUST BE EVEN */
   IF STRIPLEN>246
     THEN DO;
       PUT SKIP LIST('ERROR - MAXIMUM STRIPLEN IS 246');
       SIGNAL ERROR;
       END;
   GRIDEDGE=FIXED(GRIDEDGE/6)*6; /* M/B DIVISIBLE BY 6 */
   ALLOCATE GRID(GRIDEDGE,GRIDEDGE);
   GRID(*,*)='0';
   XC,XO,YC,YO=0;
   SELECT(INTYPE);
     WHEN(IN) CALL IN_FILE;
     WHEN(IMATRIX) CALL IMATRIX_FILE;
     WHEN(CMDS) CALL CMDS_FILE;
     OTHERWISE;
     END; /* SELECT */

   SELECT(PRINTER);
     WHEN(CITOH) CALL PUTOUT_CITOH;
     WHEN(IGP) CALL PUTOUT_IGP;
     WHEN(OMATRIX) CALL PUTOUT_MATRIX;
     OTHERWISE;
     END; /* SELECT */
   CLOSE FILE(OUT);

 CMDS_FILE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN INPUT IS IN FILE CMDS. FORMAT IS ONE OF THE FOLLOWING   *
 * THREE:                                                              *
 *                                                                     *
 * MOVE <X> <Y>                                                        *
 *                                                                     *
 * DRAW <X> <Y>                                                        *
 *                                                                     *
 * TEXT <X> <Y> <HEIGHT> <ANGLE> '<TEXT>'                              *
 *                                                                     *
 **********************************************************************/
   DCL (ANGLE,HEIGHT,XN,YN) DEC FLOAT(16);
   DCL (I,IPEN) FIXED BIN;
   DCL (INREC,TEXT) CHAR(256) VAR;
   DCL KEY CHAR(4);

   OPEN FILE(CMDSF) RECORD INPUT TITLE('CMDS');
   ON ENDFILE(CMDSF) GO TO EOFCMDS;
   DO FOREVER=1 REPEAT FOREVER;
     READ FILE(CMDSF) INTO(INREC);
     IF INREC^=''
       THEN DO;
         INREC=SUBSTR(INREC,PREFIX(INREC,' '));
         I=INDEX(INREC,' ');
         IF I=0
           THEN I=LENGTH(INREC)+1;
         KEY=SUBSTR(INREC,1,I-1);
         IF I>LENGTH(INREC)
           THEN INREC='';
           ELSE INREC=SUBSTR(INREC,I);
         SELECT(KEY);
           WHEN('TEXT') DO;
             GET STRING(INREC) LIST(XN,YN,HEIGHT,ANGLE,TEXT);
             CALL DOSYMBOL(XN,YN,HEIGHT,ANGLE,TEXT);
             END;
           WHEN('MOVE','DRAW') DO;
             GET STRING(INREC) LIST(XN,YN);
             IF KEY='MOVE'
               THEN IPEN=3;
               ELSE IPEN=2;
             CALL DOPLOT(XN,YN,IPEN);
             END;
           OTHERWISE SIGNAL ERROR;
           END; /* SELECT */
         END;
     END;
 EOFCMDS:;
   CLOSE FILE(CMDSF);
   END CMDS_FILE;

 DO_DRAW: PROC(XN,YN);
   DCL (DEN,INCR,NUM,SLOPE,XN,YN) DEC FLOAT(16);
   NUM=YN-YC;
   DEN=XN-XC;
   SELECT;
     WHEN(NUM=0 & DEN=0)  /* HE WANTS A DOT */
       CALL DOT(XC,YC); /* GO PUT A DOT ON THE PLOT */
     WHEN(DEN=0) DO; /* IT IS A VERTICAL LINE */
       INCR=IYSCALE;
       IF YN<YC
         THEN INCR=-INCR; /* LINE IS TO BE DRAWN DOWN */
       DO YC=YC REPEAT YC+INCR UNTIL(YC=YN);
         IF (INCR>0 & YC>YN) × (INCR<0 & YC<YN)
           THEN YC=YN;
         CALL DOT(XC,YC); /* GO PUT DOT ON THE PLOT */
         END;
       END;
     WHEN(NUM=0) DO; /* IT IS A HORIZONTAL LINE */
       INCR=IXSCALE;
       IF XN<XC
         THEN INCR=-INCR; /* LINE IS TO BE DRAWN LEFT */
       DO XC=XC REPEAT XC+INCR UNTIL(XC=XN);
         IF (INCR>0 & XC>XN) × (INCR<0 & XC<XN)
           THEN XC=XN;
         CALL DOT(XC,YC); /* GO PUT DOT ON THE PLOT */
         END;
       END;
     OTHERWISE DO; /* IT IS SOME SORT OF DIAGONAL LINE */
       SLOPE=NUM/DEN;
       IF ABS(SLOPE)>1.0
         THEN CALL DOPLOT_DIAG(IYSCALE,1.0/SLOPE,YC,XC,YN,XN,'Y');
         ELSE CALL DOPLOT_DIAG(IXSCALE,SLOPE,    XC,YC,XN,YN,'X');
       XC=XN;
       YC=YN;
       END;
     END; /* SELECT */
   END DO_DRAW;

 DO_MOVE: PROC(XN,YN);
   DCL (XN,YN) DEC FLOAT(16);

   XC=XN;
   YC=YN;
   END DO_MOVE;

 DOPLOT: PROC(XN,YN,IPEN);
 /**********************************************************************
 *                                                                     *
 * CALLED TO MOVE THE PEN, AND PERHAPS DRAW AT THE SAME TIME.          *
 *                                                                     *
 **********************************************************************/
   DCL (XN,YN) DEC FLOAT(16);
   DCL (I,IPEN) FIXED BIN;

   SELECT(IPEN);
     WHEN(3) CALL DO_MOVE(XN,YN); /* MOVE */
     WHEN(-3) CALL DO_MOVE(XN,YN); /* MOVE AND RESET ORIGIN? */
     WHEN(999) CALL DO_MOVE(XN,YN); /* MOVE AND TERMINATE PLOT */
     WHEN(2) CALL DO_DRAW(XN,YN); /* DRAW */
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */
   END DOPLOT;

 DOPLOT_DIAG: PROC(INCRPRM,SLOPE,X,Y,TOX,TOY,TRANSPOSE);
   DCL (B,INCR,INCRPRM,SLOPE,TOX,TOY,X,Y) DEC FLOAT(16);
   DCL TRANSPOSE CHAR(1);

   B=Y-SLOPE*X; /* SOLVE FOR B IN Y=AX+B */
   IF TOX<X
     THEN INCR=-INCRPRM; /* LINE IS DRAWN TO LEFT */
     ELSE INCR=INCRPRM;  /* LINE IS DRAWN TO RIGHT */
   DO X=X REPEAT X+INCR
     WHILE((INCR>0 & X<TOX) × (INCR<0 & X>TOX));
     Y=SLOPE*X+B; /* WAS Y=Y+SLOPE*INCR */
     IF TRANSPOSE='Y'
       THEN CALL DOT(Y,X);
       ELSE CALL DOT(X,Y);
     END;
   END DOPLOT_DIAG;

 DOSYMBOL: PROC(XN,YN,HEIGHT,ANGLE,TEXT);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PLACE A STRING OF TEXT ON THE PLOT.                       *
 *                                                                     *
 **********************************************************************/
   DCL (ANGLE,HEIGHT,RADIUS,XN,YN,XO,YO) DEC FLOAT(16);
   DCL NCHAR FIXED BIN;
   DCL TEXT CHAR(*) VAR;
   DCL NAM CHAR(8);
   DCL I FIXED BIN;

   DO I=1 TO LENGTH(TEXT);
     NAM='HEX'××TROUT(SUBSTR(TEXT,I,1));
     CALL IMAGE(NAM,XN,YN,HEIGHT,ANGLE);
     XO=HEIGHT/2;
     YO=0;
     CALL ROTATE(XO,YO,ANGLE);
     XN=XN+XO;
     YN=YN+YO;
     END;
   END DOSYMBOL;

 DOT: PROC(XF,YF); /* CALLED TO PUT A DOT ON THE PLOT */
 /**********************************************************************
 *                                                                     *
 * CALLED TO PUT A DOT ON THE PLOT.                                    *
 *                                                                     *
 **********************************************************************/
   DCL (XF,YF) DEC FLOAT(16);
   DCL (X,Y) FIXED BIN;

   IF XF<0 × YF<0
     THEN RETURN;
   X=FIXED(XF*XFACTOR*GSCALE/IXSCALE+.5)+1;
   Y=FIXED(YF*YFACTOR*GSCALE/IYSCALE+.5)+1;
   IF X<1 × X>HBOUND(GRID,1) × Y<1 × Y>HBOUND(GRID,2)
     THEN RETURN;
   GRID(X,Y)='1';
   END DOT;

 IMAGE: PROC(MEMNAM,XN,YN,HEIGHT,ANGLE);
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
   DCL MEMNAM CHAR(8);
   DCL (XN,YN,HEIGHT,ANGLE) DEC FLOAT(16);
   DCL (SYSDCBP,SYSOPEN,SYSFIND,SYSREAD) ENTRY;
   DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0)) RETURNS(PTR);
   DCL RETCODE FIXED BIN(31,0);
   DCL DDNAME CHAR(8) STATIC INIT('IMAGELIB');

   IF MEMPTR=NULL
     THEN DO;
       ALLOC MYMEMORY SET(MEMPTR);
       CALL SYSDCBP(DCBPTR,DDNAME);
       CALL SYSOPEN(DCBPTR,'INPUT');
       IF ^SUBSTR(DCBOFLG,4,1)
         THEN SIGNAL ERROR;
       IF SUBSTR(DCBRECFM,1,2) = '01' /* RECFM=V */
         THEN SIGNAL ERROR;
       IF DCBLRECL^=20
         THEN SIGNAL ERROR;
       BUFPTRPTR=ADDR(BUFPTR);
       END;
   CALL SYSFIND(DCBPTR,MEMNAM,'D',RETCODE);
   IF RETCODE^=0
     THEN RETURN;
   BCNTSAV=0;
   ON CONDITION(SYSEOD) GOTO EOD;
   DO FOREVER=1 REPEAT FOREVER;
     IF BCNTSAV = 0
       THEN DO;
         CALL SYSREAD(DCBPTR,BUFFER);
         BCNTSAV = LENGTH(BUFFER);
         BUFPTR = PTROUT(PTRIN(ADDR(BUFFER))+2);
         END;
     CURPTR = BUFPTR;
     BCNTSAV = BCNTSAV - DCBLRECL;
     BUFPTR = PTROUT(PTRIN(BUFPTR) + DCBLRECL);
     CALL IMAGE_PROC(XN,YN,HEIGHT,ANGLE,CURREC);
     END;
 EOD:;
   END IMAGE;

 IMAGE_PROC: PROC(XN,YN,HEIGHT,ANGLE,CURREC);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN CURREC CONTAINS THE INFORMATION FOR A PLOT OPERATION.   *
 *                                                                     *
 **********************************************************************/
   DCL (ANGLE,HEIGHT,XI,XN,XO,YI,YN,YO) DEC FLOAT(16);
   DCL IPEN FIXED BIN;
   DCL CURREC CHAR(*);

   GET STRING(CURREC) LIST(XI,YI,IPEN);
   XI=XI*HEIGHT/.2;
   YI=YI*HEIGHT/.1;
   CALL ROTATE(XI,YI,ANGLE);
   XO=XI+XN;
   YO=YI+YN;
   SELECT(IPEN);
     WHEN(2) CALL DO_DRAW(XO,YO);
     WHEN(3) CALL DO_MOVE(XO,YO);
     OTHERWISE SIGNAL ERROR;
     END; /* SELECT */
   END IMAGE_PROC;

 IN_FILE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN INPUT IS IN FILE IN.  SEE PROGRAM COMPLOT.FORT FOR THE  *
 * FORMAT OF THIS FILE.                                                *
 *                                                                     *
 **********************************************************************/
   DCL TEXT CHAR(256) VAR;
   DCL INREC CHAR(256) VAR;
   DCL 1 SYMBREC UNALIGNED BASED(ADDR(INREC)),
     2 PAD FIXED BIN(15,0),
     2 KEY CHAR(4),
     2 XN DEC FLOAT(6),
     2 YN DEC FLOAT(6),
     2 HEIGHT DEC FLOAT(6),
     2 ANGLE DEC FLOAT(6),
     2 NCHAR FIXED BIN(31,0),
     2 INTEXT CHAR(56);
   DCL 1 PLOTREC UNALIGNED BASED(ADDR(INREC)),
     2 PAD CHAR(14),
     2 IPEN FIXED BIN(31,0);

   OPEN FILE(INF) TITLE('FT14F001');
   ON ENDFILE(INF) GO TO EOFIN;
   DO FOREVER=1 REPEAT FOREVER;
     READ FILE(INF) INTO(INREC);
     SELECT(KEY);
       WHEN('SYMB')
         CALL DOSYMBOL(XN,YN,HEIGHT,ANGLE,
           SUBSTR(INTEXT,1,MIN(56,NCHAR)));
       WHEN('PLOT')
         CALL DOPLOT(XN,YN,IPEN);
       OTHERWISE;
       END; /* SELECT */
     END;
 EOFIN:;
   CLOSE FILE(INF);
   END IN_FILE;

 IMATRIX_FILE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN INPUT IS IN FILE IMATRIX.  INPUT SHOULD BE A IMATRIX OF
 * 1'S AND 0'S.                                                        *
 *                                                                     *
 **********************************************************************/
   DCL (ANGLE,HEIGHT,XN,YN) DEC FLOAT(16);
   DCL (I,IPEN,J,NCHAR) FIXED BIN;
   DCL INREC CHAR(1024) VAR;
   DCL CH CHAR(1);


   OPEN FILE(IMATFIL) RECORD INPUT TITLE('IMATRIX');
   ON ENDFILE(IMATFIL) GO TO EOFMATRIX;
   DO I=1 REPEAT I+1 WHILE(I<HBOUND(GRID,1));
     READ FILE(IMATFIL) INTO(INREC);
     DO J=1 TO MIN(LENGTH(INREC),HBOUND(GRID,2));
       IF SUBSTR(INREC,J,1)='0'
         THEN CH='0';
         ELSE CH='1';
       GRID(I,J)=CH;
       END;
     END;
 EOFMATRIX:;
   CLOSE FILE(IMATFIL);
   END IMATRIX_FILE;

 PUTOUT_IGP: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO GENERATE OUTPUT FOR A PRINTRONIX.         *
 *                                                                     *
 **********************************************************************/
   DCL CHARSTR CHAR(8);
   DCL BITSTR BIT(8),
       BITDEF CHAR(1) BASED(ADDR(BITSTR));
   DCL RPTLINE CHAR(254) VAR;
   DCL (H,I,J,K,L,M,N,PPC,R) FIXED BIN;
   DCL SKIP CHAR(10) VAR;

   IF XSCALE=120
     THEN PPC=6; /* GRID POINTS PER PRINT CHARACTER */
     ELSE PPC=3;
   N=PPC*2; /* GRID POINTS PER HORIZONTAL PRINT POSITION */
   SKIP=' ';
   DO H=0 REPEAT H+STRIPLEN*PPC WHILE(H<HBOUND(GRID,1));
     RPTLINE='1';
     DO J=HBOUND(GRID,2) TO 1 BY -1;
       DO M=3 REPEAT M+3 WHILE(M<=PPC);
         IF M=3 & PPC=6
           THEN RPTLINE=RPTLINE××'^'××'^'××'04';
           ELSE DO;
             IF M=6
               THEN DO;
                 RPTLINE=RPTLINE××'0A';
                 WRITE FILE(OUT) FROM(RPTLINE);
                 RPTLINE=SKIP;
                 END;
             RPTLINE=RPTLINE××'^'××'^'××'05';
             END;
         DO I=1 TO STRIPLEN/2;
           L=H+(I-1)*N;
           IF L>=HBOUND(GRID,1)
             THEN LEAVE;
           DO K=1 TO 6;
             IF PPC=3
               THEN R=K;
               ELSE IF M=3
                 THEN R=(K-1)*2+1;
                 ELSE R=K*2;
             SUBSTR(CHARSTR,8+(1-K),1)=GRID(H+(I-1)*N+R,J);
             END;
           IF SUBSTR(CHARSTR,3,1)='0'
             THEN SUBSTR(CHARSTR,2,1)='1';
             ELSE SUBSTR(CHARSTR,2,1)='0';
           SUBSTR(CHARSTR,1,1)='0';
           BITSTR=CHARSTR;
           RPTLINE=RPTLINE××TROUT(BITDEF);
           END;
         END;
       RPTLINE=RPTLINE××'$';
       WRITE FILE(OUT) FROM(RPTLINE);
       RPTLINE=SKIP;
       END;
     END;
   END PUTOUT_IGP;

 PUTOUT_CITOH: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO GENERATE OUTPUT FOR A CITOH PRINTER.      *
 *                                                                     *
 **********************************************************************/
   DCL CHARSTR CHAR(8);
   DCL BITSTR BIT(8),
       BITDEF CHAR(1) BASED(ADDR(BITSTR));
   DCL RPTLINE CHAR(254) VAR;
   DCL (H,I,J,K,L,M,N,PPC,R) FIXED BIN;

   RPTLINE='1';
   WRITE FILE(OUT) FROM(RPTLINE);
   RPTLINE=' ^PY^-';
   WRITE FILE(OUT) FROM(RPTLINE);
   RPTLINE=' ^F^-';
   WRITE FILE(OUT) FROM(RPTLINE);
   RPTLINE=' ^Q';
   DO J=HBOUND(GRID,2) TO 1 BY -1;
     DO H=0 REPEAT H+STRIPLEN*3 WHILE(H<HBOUND(GRID,1));
       DO I=1 TO STRIPLEN/2;
         L=H+(I-1)*6;
         IF L>=HBOUND(GRID,1)
           THEN LEAVE;
         DO K=1 TO 6;
           SUBSTR(CHARSTR,2+K,1)=GRID(H+(I-1)*6+K,J);
           END;
         SUBSTR(CHARSTR,1,2)='11';
         BITSTR=CHARSTR;
         RPTLINE=RPTLINE××TROUT(BITDEF);
         END;
       RPTLINE=RPTLINE××'^X';
       WRITE FILE(OUT) FROM(RPTLINE);
       RPTLINE=' ^A';
       END;
     RPTLINE=RPTLINE××'^*';
     WRITE FILE(OUT) FROM(RPTLINE);
     RPTLINE=' ^Q';
     END;
   RPTLINE=' ^PN^-';
   WRITE FILE(OUT) FROM(RPTLINE);
   END PUTOUT_CITOH;

 PUTOUT_MATRIX: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN IT IS TIME TO GENERATE OUTPUT FOR OMATFIL.              *
 *                                                                     *
 **********************************************************************/
   DCL REC CHAR(*) VAR CONTROLLED;
   DCL I FIXED BIN;

   OPEN FILE(OMATFIL) OUTPUT TITLE('OMATRIX');
   ALLOCATE REC CHAR(HBOUND(GRID,2));
   DO I=1 TO HBOUND(GRID,2);
     REC=STRING(GRID(*,I));
     WRITE FILE(OMATFIL) FROM(REC);
     END;
   FREE REC;
   END PUTOUT_MATRIX;

 ROTATE: PROC(X,Y,ANGLE);
 /**********************************************************************
 *                                                                     *
 * CALLED TO ROTATE A POINT ABOUT AN ANGLE.                            *
 *                                                                     *
 **********************************************************************/
   DCL (X,Y,ANGLE,RADIUS,OLDANGLE) DEC FLOAT(16);

   RADIUS=SQRT(X**2+Y**2);
   IF X=0
     THEN IF Y>=0
       THEN OLDANGLE=90;
       ELSE OLDANGLE=270;
     ELSE OLDANGLE=ATAND(Y/X);
   X=RADIUS*COSD(OLDANGLE+ANGLE);
   Y=RADIUS*SIND(OLDANGLE+ANGLE);
   END ROTATE;

   END COMPLOT;
