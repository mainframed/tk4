 /* COPYRIGHT 1988 BY THOMAS GLEN SMITH */
 /* THIS TEXT INCLUDED IN ABE061 AND ABE074 */

 GET_EL_REAL: PROC(FB,RHP,RPT,CIX,MIX) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO OBTAIN THE NEXT ELEMENT IN VARIABLE POINTED TO BY RHP.    *
 * RPT SHOULD BE INITIALIZED TO NULL BEFORE THE FIRST INVOCATION OF    *
 * THIS ROUTINE.  CIX AND MIX DO NOT HAVE TO BE INITIALIZED.           *
 * YOU SHOULD NOT CHANGE THE VALUES IN RPT, CIX, AND MIX BETWEEN       *
 * INVOCATIONS OF THIS SUBROUTINE.  A NULL STRING WILL BE RETURNED     *
 * WHEN THERE ARE NO MORE ELEMENTS TO PROCESS.                         *
 *                                                                     *
 * FB SHOULD BE SET TO 'FORWARD' OR 'BACKWARD' TO INDICATE THE         *
 * DIRECTION OF SEQUENTIAL PROCESSING.                                 *
 *                                                                     *
 **********************************************************************/
   DCL FB CHAR(*);
   DCL (RHP,RPT) PTR;
   DCL (CIX,MIX) FIXED BIN;
   DCL (I,J,LEN,OFF) FIXED BIN;

   IF RPT=NULL
     THEN DO; /* IT IS INITIALIZATION TIME */
       IF RHP->RH_APL->RH_APL_RHCOUNT^=RHP->RHCOUNT
         THEN DO;
           MSGDATA='NUMBER OF RECORDS AND DIMENSIONS DON''T MATCH';
           SIGNAL CONDITION(BADAPL);
           END;
       MIX=RHP->RH_APL->RH_APL_ELCOUNT;
       /* MIX = MAXIMUM NUMBER ELEMENTS IN EACH RECORD */
       IF MIX=0
         THEN RETURN(''); /* ALL DONE */
       IF FB='FORWARD'
         THEN CIX=MIX; /* CAUSE BUMP TO NEW RECORD */
         ELSE CIX=1;   /* CAUSE BUMP TO NEW RECORD */
       END;
   IF FB='FORWARD'
     THEN CIX=CIX+1; /* GET INDEX TO NEXT ELEMENT */
     ELSE CIX=CIX-1; /* GET INDEX TO NEXT ELEMENT */
   IF CIX>MIX × CIX=0
     THEN DO; /* TIME TO GET A NEW RECORD */
       IF FB='FORWARD'
         THEN RPT=#SUCC(RHHDRPT,RHP,RPT); /* GET NEXT RECORD */
         ELSE RPT=#PRED(RHHDRPT,RHP,RPT); /* GET NEXT RECORD */
       IF RPT=RHP
         THEN DO; /* ALL DONE */
           RPT=NULL;
           RETURN('');
           END;
       IF FB='FORWARD'
         THEN CIX=1;
         ELSE CIX=MIX;
       END;
   LEN=RHP->RH_APL->RH_APL_ELEN; /* LENGTH OF ELEMENT */
   OFF=(CIX-1)*LEN; /* OFFSET TO ELEMENT */
   RETURN(GET_EL_SUB(RHP,RPT,OFF,LEN));
   END GET_EL_REAL;

 GET_EL_SUB: PROC(RHP,RPT,OFF,LEN) RETURNS(CHAR(256) VAR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO GET AN ELEMENT FROM A VARIABLE.                           *
 *                                                                     *
 **********************************************************************/
   DCL (RHP,RPT) PTR;
   DCL (OFF,LEN) FIXED BIN;
   DCL WRKSTR CHAR(32767) BASED(WRKPTR);

   SELECT;
     WHEN(OFF+LEN>RPT->RECLEN)
       IF OFF+LEN <= RPT->RECLEN+RHP->RECPNLN**2
         THEN RETURN(
           SUBSTR(PTROUT(PTRIN(ADDR(RPT->RECSTR))+2+OFF)->WRKSTR,
           OFF-RPT->RECLEN+1,LEN));
         ELSE RETURN(REPEAT(' ',LEN-1));
     WHEN(OFF>=LENGTH(RPT->RECSTR))
       RETURN(REPEAT(' ',LEN-1));
     WHEN(OFF+LEN>=LENGTH(RPT->RECSTR))
       RETURN(SUBSTR(RPT->RECSTR,OFF+1));
     OTHERWISE RETURN(SUBSTR(RPT->RECSTR,OFF+1,LEN));
     END; /* SELECT */
   END GET_EL_SUB;
