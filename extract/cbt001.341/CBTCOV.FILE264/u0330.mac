$ 330.00
THIS PI COURSE WILL PROVIDE THE STUDENT WITH SUFFICIENT KNOWLEDGE
SO THAT HE CAN BEGIN TO USE TSO EFFECTIVELY.  THE FOLLOWING TOPICS
WILL BE COVERED:

     4.  HOW TO CREATE AND MODIFY PROGRAM SOURCE AND OS JCL.
         A.  EDIT COMMAND.
         B.  PAN COMMAND.
     5.  HOW TO SUBMIT JOBS FOR BACKGROUND EXECUTION.
         A.  BGD COMMAND.
         B.  $ COMMAND.

THIS PI WILL INTRODUCE YOU TO A SUBSET OF THE COMMAND LANGUAGE.
THE COMMANDS PRESENTED WILL ENABLE YOU TO USE TSO AS SORT OF A
SUPER KEYPUNCH AND CARD FILE.  CURRENTLY, IF YOU ARE NOT USING TSO,
YOU PROBABLY MAINTAIN A NUMBER OF CARD DECKS WHICH YOU ENTER INTO THE
SYSTEM THROUGH A CARD READER TO PERFORM FUNCTIONS SUCH AS UPDATES TO
THE PANVALET LIBRARY, COMPILES, AND TEST RUNS.  THIS COURSE WILL SHOW
YOU HOW TO USE TSO TO CREATE AND MAINTAIN SETS OF CARD IMAGES ON DISK
EQUIVALENT TO THE PHYSICAL CARD DECKS YOU NOW MAINTAIN, AND WILL SHOW
YOU HOW TO GET THEM SUBMITTED TO THE SYSTEM FOR EXECUTION.

ALL OF THE NECESSARY COMMANDS WILL BE COVERED IN DETAIL, BUT FIRST,
TAKE A LOOK AT A SAMPLE TERMINAL SESSION IN WHICH A SET OF JCL
STATEMENTS IS CREATED AND SUBMITTED TO THE SYSTEM FOR EXECUTION.
THIS WILL ILLUSTRATE THE SIMPLICITY WITH WHICH THESE FUNCTIONS ARE DONE.

     EDIT TESTJCL CNTL NEW
      INPUT
      00010 //EUP027LS JOB (10-096-MISC-027-B4,1),
      00020 // 'SMITH-NORTH BLDG',CLASS=E
      00030 /*ROUTE  PRINT REMOTE15
      00040 // EXEC LISTVTOC,SER=OSR280
      00050
      EDIT
     S
      SAVED
     END
      READY
     BGD TESTJCL.CNTL
      READY

$ EDIT
********** CREATING A DATA SET - THE EDIT COMMAND

ONCE YOU HAVE LOGGED ON FOR THE FIRST TIME, YOU NEED TO TELL
THE SYSTEM THAT YOU WISH TO CREATE A DATA SET.  YOU DO SO BY
ENTERING THE COMMAND EDIT, TOGETHER WITH AN APPROPRIATE SET OF
OPERANDS.

THE OPERANDS YOU SHOULD USE INDICATE TO THE SYSTEM FIRSTLY THAT YOU
ARE GOING TO CREATE A NEW DATA SET (RATHER THAN AMEND AN EXISTING
ONE), AND SECONDLY THAT IT WILL CONTAIN A JOB STREAM THAT IS
SUBSEQUENTLY TO BE READ INTO THE HASP INPUT QUEUE FOR EXECUTION.
THUS, AS IN THE SAMPLE:

     EDIT TESTJCL CNTL NEW

THE NAME TESTJCL IS AN ARBITRARY NAME SELECTED BY YOU TO REPRESENT
THIS PARTICULAR SET OF JCL.  YOU MIGHT ALSO HAVE USED MYJCL, TEESHA,
OR WHATEVER.  THIS SPECIFIES THE "USER-SUPPLIED NAME," OR THE MIDDLE
QUALIFIER OF THE NAME OF THE NEW DATA SET AS DISCUSSED IN THE PREVIOUS
PI COURSE, U0329.

THE KEYWORD CNTL IS SPECIFIED TO INDICATE THE TYPE OF DATA THAT IS
TO BE CONTAINED IN THE NEW DATA SET.  THIS WILL BE APPENDED AS THE
"DESCRIPTIVE QUALIFIER" (SEE PI COURSE U0329) ON THE NEW DATA SET NAME.
IF THE DATA SET WERE TO CONTAIN PL/I SOURCE STATEMENTS, FOR EXAMPLE,
THEN YOU WOULD HAVE SPECIFIED PLI INSTEAD OF CNTL.  IF YOUR USERID
WERE EUP027, AND ASSUMING YOU SPECIFIED THE CNTL KEYWORD, THEN THE
FINAL DATA SET NAME WOULD BE EUP027.TESTJCL.CNTL.

$ Q1
YOU CAN ALSO CREATE AND EDIT MEMBERS OF PARTITIONED DATA SETS.
IN THIS CASE, THE DATA SET NAME SHOULD HAVE THE MEMBER NAME APPENDED.
FOR INSTANCE, SUPPOSE YOU WANT TO CREATE A NEW MEMBER CALLED TEST1
IN PARTITIONED DATA SET EUP027.TESTSET.PLI.  WHAT WOULD THE EDIT
COMMAND LOOK LIKE?  ASSUME YOUR USERID IS EUP027.

A.  EDIT TESTSET(TEST1) CNTL NEW
B.  EDIT EUP027.TESTSET(TEST1) PLI NEW
C.  EDIT TESTSET(TEST1) PLI NEW
$ANS A Q1A
$ANS B Q1B
$ANS C Q1C
ENTER "A" "B" OR "C"
$GOTO Q1
$ Q1A
NO, THE DATA SET TYPE SHOULD BE PLI, NOT CNTL.  TRY READING THE
TEXT AGAIN.
$GOTO EDIT
$ Q1B
NO, YOU DON'T NEED TO SPECIFY YOUR USERID.  IN FACT, THIS COMMAND
WOULD CREATE A DATA SET NAMED EUP027.EUP027.TESTSET.PLI.  YOU
WILL NOW BE SENT BACK TO THIS SAME QUESTION.  IF YOU ARE STILL
CONFUSED ON DATA SET NAMING CONVENTIONS, KEY ATTN AND TAKE PI COURSE
U0329 OVER AGAIN, OR TRY READING THE SUPPLEMENTAL MATERIAL LISTED IN
PI COURSE U0329.
$GOTO Q1
$ Q1C
RIGHT.  THE DATA SET HAS THE NAME TESTSET, AND THE MEMBER BEING
CREATED IS TO BE CALLED TEST1.  IF A PARTITIONED DATA SET CALLED
TESTSET ALREADY EXISTS, THE MEMBER TEST1 WILL BE ADDED TO IT.
IF NOT, A NEW DATA SET WILL BE CREATED WITH THE NAME TESTSET, AND
THE SINGLE MEMBER TEST1.  THE "NEW" OPERAND MUST BE SPECIFIED FOR
A NEW MEMBER WHETHER OR NOT THE DATA SET ALREADY EXISTS.

$ RECFM
****** RECORD FORMAT AND SEQUENCE NUMBERS

           EDIT TESTSET(TEST1) PLI NEW

WHEN YOU SPECIFY THE DATA SET TYPE PLI AS IN THE ABOVE COMMAND,
YOUR PL/I PROGRAM WILL BE HELD IN THE DATA SET IN V-FORMAT RECORDS
WITH A MAXIMUM LENGTH OF 104 BYTES.  THE FIRST EIGHT BYTES HOLD THE
SEQUENCE NUMBER OF THE RECORD.

           EDIT TESTSET(TEST1) CNTL NEW

WHEN YOU SPECIFY THE DATA SET TYPE CNTL AS IN THE ABOVE COMMAND,
YOUR JCL STATEMENTS WILL BE HELD IN THE DATA SET IN F-FORMAT RECORDS
WITH A LENGTH OF 80 BYTES, AND A BLKSIZE OF 1680.  THE LAST EIGHT
BYTES, 73 TO 80, HOLD THE SEQUENCE NUMBER OF THE RECORD.

AS YOU CAN SEE,  SPECIFYING DIFFERENT DATA SET TYPES ON THE EDIT
COMMAND WILL INDICATE NOT ONLY WHAT KIND OF DATA WILL BE STORED
IN THE NEW DATA SET, BUT ALSO WILL INDICATE THE RECORD FORMAT
AND BLOCK SIZE OF THE NEW DATA SET.  TAKE A LOOK IN THE TSO
COMMAND LANGUAGE REFERENCE MANUAL UNDER THE EDIT COMMAND, AND YOU
WILL FIND A TABLE INDICATING THE CHARACTERISTICS THAT WILL BE
USED FOR A NEW DATA SET DEPENDING ON WHICH DATA SET TYPE YOU SPECIFY.
IT IS IMPORTANT THAT YOU KEEP THIS IN MIND WHEN CREATING A NEW DATA
SET BECAUSE SOME COMMANDS WILL ACCEPT DATA ONLY IN ONE SPECIFIC
FORMAT.  FOR EXAMPLE, THE BGD COMMAND WILL ACCEPT ONLY F-FORMAT,
80-BYTE RECORDS.

$ Q2
WHEN YOU ARE CREATING YOUR DATA SET, THE TSO SYSTEM ADDS A SEQUENCE
NUMBER TO EACH RECORD, STARTING WITH 00000010 IN THE FIRST RECORD AND
INCREASING BY 10 FOR EACH SUCCEEDING RECORD.  IN GENERAL, IF THE
DATA SET IS TO CONTAIN V-FORMAT RECORDS, THE SEQUENCE NUMBER WILL
BE PLACED IN THE FIRST EIGHT BYTES OF EACH RECORD, AND IF THE DATA
SET IS TO CONTAIN F-FORMAT RECORDS, THE SEQUENCE NUMBER WILL BE
PLACED IN THE LAST EIGHT BYTES OF EACH RECORD.
WHERE WILL TSO PUT THE SEQUENCE NUMBERS IF YOU ENTER THE COMMAND
"EDIT TESTJCL CNTL NEW?"

A.  ONE THRU EIGHT.
B.  97 THRU 104.
C.  73 THRU 80.
$ANS A Q2A
$ANS B Q2A
$ANS C Q2C
ENTER "A" "B" OR "C"
$GOTO Q2
$ Q2A
WRONG.  TRY READING THE TEXT AGAIN.
$GOTO RECFM
$ Q2C
RIGHT.  CNTL INDICATES F-FORMAT, 80-BYTE RECORDS, AND THE SEQUENCE
NUMBER WILL GO IN 73-80.

IF, FOR SOME REASON, YOU WANTED TO CREATE A DATA SET WITH THE
DESCRIPTIVE QUALIFIER "PLI," BUT YOU WANT IT TO HAVE F-FORMAT, 80-BYTE
RECORDS,  THEN YOU WOULD ENTER THE EDIT COMMAND AS FOLLOWS:

     EDIT TESTPGM PLI NEW LINE(80)

NOTE THAT YOU CAN HAVE THE LINE NUMBER OMITTED FROM THE RECORDS BY
SPECIFYING THE ADDITIONAL KEYWORD OPERAND "NONUM" ON THE EDIT COMMAND.
HOWEVER, FOR THE PURPOSES OF THIS PI COURSE, ALL DATA SETS TO BE
EDITED WILL BE SEQUENCE NUMBERED.

UNDER THE EDIT COMMAND, THERE ARE TWO MODES OF OPERATION:  INPUT MODE,
IN WHICH YOU ENTER TEXT WHICH IS TO BE STORED AS PART OF YOUR DATA SET,
AND EDIT MODE, IN WHICH YOU ENTER SUBCOMMANDS.  IN INPUT MODE, THE
SYSTEM ASSUMES THAT EVERYTHING YOU TYPE IS TO BE STORED IN YOUR DATA
SET.  IN EDIT MODE, THE SYSTEM WILL ACCEPT ONLY SUBCOMMANDS OF EDIT,
WHICH, IN GENERAL, ARE INSTRUCTIONS TO MANIPULATE TEXT PREVIOUSLY
ENTERED IN INPUT MODE.

WHEN YOU ENTER THE EDIT COMMAND WITH THE "NEW" OPERAND, THE COMMAND
PROCESSOR GOES INTO INPUT MODE IMMEDIATELY, SO WHATEVER YOU TYPE NEXT
BECOMES PART OF YOUR DATA SET.  YOU DO SO BY TYPING THE TEXT, THEN
PRESSING THE ENTER KEY.  EACH LINE YOU ENTER BECOMES ONE RECORD
IN THE DATA SET.

THE SEQUENCE NUMBER THAT IS AUTOMATICALLY INSERTED IN THE RECORD BY
THE TSO SYSTEM (UNLESS YOU SPECIFY NONUM) IS INTERPRETED IN INPUT AND
EDIT MODES AS A LINE NUMBER.  WHEN THE SYSTEM IS READY FOR YOU TO ENTER
A NEW LINE, IT PROMPTS YOU BY DISPLAYING
THE NEXT NUMBER AT THE TERMINAL.  THE FOLLOWING IS AN EXAMPLE OF
ENTERING THE FIRST TWO LINES FOLLOWING THE START OF INPUT MODE:

     1.  INPUT MODE STARTS:

     INPUT
     00010

     2.  FIRST LINE OF JCL IS TYPED:

     INPUT
     00010 //EUP027LS JOB (10-096-MISC-027-B4,1),

     3.  PRESS ENTER KEY.

     INPUT
     00010 //EUP027LS JOB (10-096-MISC-027-B4,1),
     00020

     4.  SECOND LINE OF JCL IS TYPED:

     INPUT
     00010 //EUP027LS JOB (10-096-MISC-027-B4,1),
     00020 // 'SMITH-NORTH BLDG',CLASS=E

     5.  PRESS ENTER KEY.

     INPUT
     00010 //EUP027LS JOB (10-096-MISC-027-B4,1),
     00020 // 'SMITH-NORTH BLDG',CLASS=E
     00030

WHEN YOU HAVE FINISHED ENTERING THE PROGRAM OR JCL, YOU WILL NEED TO END
INPUT MODE, SO THAT YOU CAN STORE THE PROGRAM AND THEN END THE EDIT
COMMAND.  THESE OPERATIONS ARE CARRIED OUT BY THE SAVE AND END
SUBCOMMANDS DESCRIBED LATER ON IN THIS COURSE.  YOU WILL ALSO NEED
TO END INPUT MODE WHEN YOU WISH TO AMEND TEXT ALREADY ENTERED.

TO END INPUT MODE, ENTER A NULL LINE, THAT IS, PRESS THE ENTER KEY
WITHOUT TYPING ANYTHING ON THE LINE.  THE EDIT COMMAND RETAINS CONTROL,
BUT ITS MODE CHANGES FROM INPUT TO EDIT MODE.  FOR EXAMPLE:

     00040 // EXEC LISTVTOC,SER=OSR280
     00050
     EDIT

IN INPUT MODE, A NULL LINE ALWAYS CAUSES A SWITCH TO EDIT MODE.
CONSEQUENTLY, IF YOU REQUIRE A BLANK LINE IN YOUR DATA SET,
YOU MUST TYPE AT LEAST ON BLANK SPACE ON THE LINE BEFORE PRESSING
THE ENTER KEY.

TO RETURN TO INPUT MODE FROM EDIT MODE, ENTER ANOTHER NULL LINE.

$ EDITMODE
********** EDIT MODE

THE PURPOSE OF EDIT MODE IS TO ALLOW YOU TO AMEND YOUR DATA
SET USING SUBCOMMANDS OF THE EDIT COMMAND.  AMONGST THE
SUBCOMMANDS YOU CAN ENTER IN EDIT MODE IS HELP.  IT ENABLES
YOU TO FIND OUT HOW TO USE THE OTHER SUBCOMMANDS OF EDIT.  NOTE
THAT IT IS A SUBCOMMAND OF EDIT, AND MUST BE DISTINGUISHED FROM
THE HELP COMMAND.  ITS OPERANDS AND SYNTAX ARE SIMILAR TO THOSE
OF THE COMMAND, EXCEPT THAT YOU SHOULD USE THE NAME OF A SUBCOMMAND
OF EDIT IN PLACE OF THE NAME OF A COMMAND.

THE FOLLOWING TABLE
SHOWS SOME OF THE MOST FREQUENTLY USED SUBCOMMANDS:

     LIST     DISPLAY AT TERMINAL SOME OR ALL OF LINES ON DATA SET
     CHANGE   CHANGE CHARACTERS IN A LINE OR LINES
     INSERT/REPLACE/DELETE FUNCTION
              INSERT LINE INTO DATA SET, OR REPLACE OR DELETE AN
              EXISTING LINE.
     DELETE   DELETE GROUP OF LINES FROM DATA SET.
     INSERT   INSERT LINE OR GROUP OF LINES INTO DATA SET.
     VERIFY   DISPLAY LINE AT TERMINAL AFTER MODIFICATION.
     RENUMBER RENUMBER SOME OR ALL LINES IN DATA SET.
     SAVE     STORE DATA SET IN PERMANENT STORAGE.
     END      END EDIT FUNCTION

MANY SUBCOMMANDS HAVE LINE NUMBERS AS OPERANDS.  YOU CAN OMIT LEADING
ZEROES FROM THESE NUMBERS.  IN SOME CASES YOU CAN USE AN ASTERISK IN
PLACE OF A NUMBER, THE ASTERISK MEANING "THE CURRENT LINE."  THIS
TERM IS EXPLAINED LATER, IN THE SECTION "THE LINE POINTER."

$ LIST
******** LIST SUBCOMMAND

USE THIS SUBCOMMAND TO DISPLAY LINES THAT YOU MAY WISH TO AMEND.
THE FOLLOWING FORMS ARE VALID:

     SUBCOMMAND                     LINES LISTED

     L                              ENTIRE DATA SET
     L LINE-NUMBER-1                SPECIFIED LINE
     L LINE-NUMBER-1 LINE-NUMBER-2  LINE-NUMBER-1 THROUGH
                                    LINE-NUMBER-2
     L *                            CURRENT LINE
     L * NUMBER                     FROM THE CURRENT LINE FOR
                                    THE SPECIFIED NUMBER OF LINES

$ Q4
FOR EXAMPLE, WHICH OF THE FOLLOWING COMMANDS WOULD LIST LINES 10 AND
20?

A.  L 10
    L 20
B.  L 10 20
C.  L 10
    L * 2
D.  ALL OF THE ABOVE.
$ANS A Q4A
$ANS B Q4A
$ANS C Q4A
$ANS D Q4D
ENTER "A" "B" "C" OR "D"
$GOTO Q4
$ Q4A
YOU ARE RIGHT, BUT ACTUALLY D IS THE CORRECT CHOICE.
TAKE A LOOK AT THE TEXT ON THE LIST SUBCOMMAND AGAIN.
$GOTO LIST
$ Q4D
RIGHT;  ALL OF THEM WOULD WORK.

$ CHANGE
********* CHANGE SUBCOMMAND

USE THIS SUBCOMMAND TO CHANGE PART OF A LINE OR LINES.
THIS IS A VERY VERSATILE COMMAND.  THE FOLLOWING LIST DEMONSTRATES
SOME OF THE USES TO WHICH IT CAN BE PUT:

     SUBCOMMAND                     MEANING
     C LINE-NUMBER-1 STRING1 STRING2
                                    REPLACE 1ST OCCURRENCE OF
                                    STRING1 IN SPECIFIED LINE
                                    WITH STRING2
     C * STRING1 STRING2
        OR
     C STRING1 STRING2
                                    REPLACE 1ST OCCURRENCE OF
                                    STRING1 IN CURRENT LINE
                                    WITH STRING2
     C * COUNT STRING1 STRING2
                                    REPLACE 1ST OCCURRENCE OF
                                    STRING1 WITH STRING2 FROM THE
                                    CURRENT LINE FOR THE NEXT
                                    "COUNT" LINES
     C * COUNT STRING1 STRING2 A
                                    SAME AS THE PREVIOUS EXAMPLE,
                                    EXCEPT ALL OCCURRENCES ARE
                                    REPLACED
     C LINE-NUMBER-1 LINE-NUMBER-2 STRING1 STRING2
                                    REPLACE 1ST OCCURRENCE OF
                                    STRING1 WITHIN SPECIFIED
                                    RANGE OF LINES WITH STRING2
     C LINE-NUMBER-1 LINE-NUMBER-2 STRING1 STRING2 ALL
                                    REPLACE EVERY OCCURRENCE OF
                                    STRING1 WITHIN SPECIFIED
                                    RANGE OF LINES WITH STRING2
     C LINE-NUMBER-1 STRING1
                                    DISPLAY FOR EDITING AT THE
                                    TERMINAL ALL CHARACTERS IN
                                    THE SPECIFIED LINE UP TO BUT
                                    NOT INCLUDING THE SPECIFIED
                                    STRING.
     C * STRING1
        OR
     C STRING1
                                    DISPLAY FOR EDITING AT THE
                                    TERMINAL ALL CHARACTERS IN THE
                                    CURRENT LINE UP TO BUT NOT
                                    INCLUDING THE SPECIFIED STRING

IN THE LAST TWO CASES, YOU CAN EDIT THE LINE AS IF YOU HAD JUST TYPED
THE DISPLAYED TEXT IN INPUT MODE.  YOU CAN, FOR INSTANCE, TYPE
ADDITIONAL CHARACTERS FOLLOWING THOSE DISPLAYED, OR BACKSPACE TO
DELETE AND REPLACE SOME OR ALL OF THE DISPLAYED CHARACTERS.  WHEN
YOU PRESS THE ENTER KEY, THE NEW TEXT REPLACES THE ORIGINAL LINE IN
YOUR DATA SET.

THE CHARACTERS IN THE STRINGS MUST BE ENCLOSED IN EITHER SINGLE
QUOTATION MARKS OR SPECIAL CHARACTERS.  IN THIS BOOK, THE SINGLE QUOTE
METHOD IS FOLLOWED.  BOTH METHODS ARE EXPLAINED IN THE TSO TERMINAL
USER'S GUIDE.  IF IT IS INTENDED THAT THE QUOTED STRING ITSELF SHOULD
CONTAIN A SINGLE QUOTATION MARK, TYPE TWO SINGLE QUOTES.  FOR EXAMPLE

     'PILGRIM''S PROGRESS'

WOULD BE RECOGNIZED AS MEANING

     PILGRIM'S PROGRESS

CONSIDER, AS AN EXAMPLE, A DATA SET CONTAINING THE FOLLOWING LINES:
NOTE THAT YOU SHOULD COPY THESE LINES ON A SHEET OF PAPER,
BECAUSE THEY WILL BE REFERENCED IN THE SERIES OF QUESTIONS THAT
FOLLOW:

     01010 IF A>B GO TO L1;
     01020 IF A=B GO TO L2;
     01030 IF A<B GO TO L3;
     01040 L1:  PUT SKIP LIST('DIFFERENCE=',A-B;

$ Q10
TO INSERT "THEN" INTO LINE 01010, WHICH OF THE FOLLOWING WOULD BE
ENTERED?

A.  C 1010 'GO THEN GO'
B.  C 1010 GO  THEN GO
C.  C 1010 'GO' 'THEN GO'
$ANS A Q10B
$ANS B Q10B
$ANS C Q10C
ENTER "A" "B" OR "C"
$GOTO Q10
$ Q10B
NO, REMEMBER THAT YOU MUST SPECIFY TWO STRINGS, EACH ENCLOSED IN A
SET OF APOSTROPHES.  THE FIRST STRING, WHICH IS THE STRING TO BE
CHANGED, IS FOLLOWED BY THE SECOND STRING, WHICH WILL REPLACE THE
FIRST STRING IN THE SPECIFIED LINE.
TRY READING THE TEXT ON THE CHANGE SUBCOMMAND AGAIN.
$GOTO CHANGE
$ Q10C
RIGHT.  TO INSERT "THEN" INTO LINES 01010 TO 01040, WHICH OF THE
FOLLOWING WOULD BE ENTERED?

A.  C 1010 'GO' 'THEN GO'
    C 1020 'GO' 'THEN GO'
    C 1030 'GO' 'THEN GO'
    C 1040 'GO' 'THEN GO'
B.  C 1010 1040 'GO' 'THEN GO'
C.  BOTH OF THE ABOVE.
$ANS A Q11A
$ANS B Q11B
$ANS C Q11C
ENTER "A" "B" OR "C"
$GOTO Q10C
$ Q11A
RIGHT, THIS WOULD WORK, BUT IT CERTAINLY IS NOT THE SIMPLEST WAY
OF DOING IT.  WHAT KEYWORD COULD BE ADDED TO THE COMMAND IN CHOICE
B TO MAKE IT DO THE JOB?
$ANS ALL Q12A
NO, THE CORRECT ANSWER IS "ALL."  TRY READING THE TEXT ON CHANGE
AGAIN.
$GOTO CHANGE
$ Q11B
NO, THIS COMMAND WOULD ONLY CHANGE THE FIRST OCCURRENCE OF STRING1.
TRY READING THE TEXT ON THE CHANGE SUBCOMMAND AGAIN.
$GOTO CHANGE
$ Q11C
YOU ARE PARTLY RIGHT, BUT THERE IS A KEYWORD MISSING IN THE
COMMAND LABELLED "B."  TRY READING THE TEXT ON THE CHANGE SUBCOMMAND
AGAIN.
$GOTO CHANGE
$ Q12A
RIGHT. THE "ALL" KEYWORD TELLS THE CHANGE SUBCOMMAND TO REPLACE EVERY
OCCURRENCE OF STRING1 WITHIN THE SPECIFIED RANGE OF LINES.  WITHOUT
THIS KEYWORD, THE CHANGE SUBCOMMAND WOULD CHANGE ONLY THE FIRST
OCCURRENCE.

TO INSERT THE MISSING CLOSING BRACKET IN LINE 01040, THE FOLLOWING
WOULD BE ENTERED:

     C 1040 'B' 'B)'

AN ALTERNATIVE METHOD WOULD BE TO FIRST DISPLAY THE LINE UP TO THE
MISSING CHARACTER BY ENTERING THE FOLLOWING:

     C 1040 ';'

THIS WOULD CAUSE THE SYSTEM TO DISPLAY:

     01040  L1:  PUT SKIP LIST('DIFFERENCE=',A-B

THE REMAINDER OF THE LINE, NAMELY THE CHARACTERS ); CAN THEN BE TYPED,
AND THE NEW LINE ENTERED IN THE DATA SET BY PRESSING THE ENTER KEY.

$ Q13
EITHER STRING OPERAND CAN BE A NULL STRING, REPRESENTED BY A PAIR OF
SINGLE QUOTES.  THE NULL STRING IS USED EITHER TO DELETE CHARACTERS
(SECOND STRING NULL) OR TO INSERT CHARACTERS AT THE START OF A LINE
(FIRST STRING NULL).  THE TECHNIQUES ARE ILLUSTRATED BY THE FOLLOWING
EXAMPLES.

     C 1040 ' SKIP' ''

CAUSES THE CHARACTERS "SKIP" (TOGETHER WITH THE PRECEDING BLANK) TO BE
DELETED FROM LINE 01040.

     C 1040 '' '-'

CAUSES THE CHARACTER '-' TO BE ADDED IN LINE 01040 BEFORE THE EXISTING
FIRST CHARACTER.

IF ALL CHANGES SHOWN WERE MADE IN LINE 01040, THE LINE WOULD BE AS
FOLLOWS:

     01040- L1:  PUT LIST('DIFFERENCE=',A-B;

$ IRDF
*********** INSERT/REPLACE/DELETE FUNCTION

USE THIS FUNCTION (FOR WHICH THERE IS NO SUBCOMMAND KEYWORD) TO
REPLACE OR DELETE A COMPLETE LINE OR TO INSERT A NEW COMPLETE LINE.
THE FOLLOWING LIST SHOWS THE MEANINGS OF EACH OF THE POSSIBLE FORMS
OF THE COMMAND:

     SUBCOMMAND                       MEANING

     LINE-NUMBER                      DELETE SPECIFIED LINE
     *                                DELETE CURRENT LINE
     LINE-NUMBER STRING               IF THERE IS A LINE WITH THE
                                      SPECIFIED NUMBER, REPLACE IT
                                      WITH THE STRING; IF THERE IS
                                      NOT, INSERT A NEW LINE WITH
                                      THE SPECIFIED NUMBER BETWEEN
                                      NEXT LOWEST AND NEXT HIGHEST
                                      NUMBERED LINES.
     * STRING                         REPLACE CURRENT LINE WITH
                                      STRING

THE STRING MUST NOT BE ENCLOSED IN QUOTES OR SPECIAL CHARACTERS.
TYPE A SINGLE BLANK BETWEEN THE LINE-NUMBER OR ASTERISK AND THE FIRST
CHARACTER OF THE STRING.

CONSIDER, AS AN EXAMPLE, A DATA SET CONTAINING THE FOLLOWING LINES.
YOU SHOULD COPY THEM DOWN, SINCE THE FOLLOWING PARAGRAPHS WILL USE
THEM FOR ILLUSTRATION:

     001500 I=N(N-1);
     001510 J=N;
     001520 DO WHILE(I>J);
     001530   IF A(I,J)=0 THEN GO TO ZFOUND;
     001540   J=J+M;
     001550   M=M+1;
     001560 END;

THE FOLLOWING SUBCOMMAND:

     1515  M=MIN(P,Q);

WOULD INSERT THE NEW LINE BETWEEN LINES 1510 AND 1520, SO THAT THIS
PART OF THE DATA SET WOULD NOW CONTAIN:

     001510 J=N;
     001515 M=MIN(P,Q);
     001520 DO WHILE (I>J);

ALTERNATIVELY, THE FOLLOWING SUBCOMMAND:

     1520  DO M=MIN(P,Q) BY 1 WHILE(I>J);

WOULD REPLACE THE EXISTING LINE 1520 WITH THE NEW TEXT, SO THAT THIS
PART OF THE DATA SET WOULD READ:

     001510 J=N;
     001520 DO M=MIN(P,Q) BY 1 WHILE(I>J);
     001530   IF A(I,J)=0 THEN GO TO ZFOUND;

$ IRDFQ1
WHAT SUBCOMMAND WOULD YOU ENTER TO DELETE LINE 1550?
$ANS 1550 IRDFQ1A
NO, THE CORRECT ANSWER WOULD HAVE BEEN "1550."  TRY READING THE
TEXT AGAIN.
$GOTO IRDF
$ IRDFQ1A
RIGHT, THIS SUBCOMMAND WOULD DELETE LINE 1550, SO THAT THIS PART OF
THE DATA SET WOULD NOW READ:

     J=J+M;
    END;

$ DELETE
************ DELETE SUBCOMMAND

USE THIS SUBCOMMAND TO DELETE A LINE OR GROUP OF LINES FROM YOUR
DATA SET.  THE FOLLOWING LIST SHOWS THE MEANINGS OF THE MORE COMMON
FORMS OF THE SUBCOMMAND:

     SUBCOMMAND                         LINE(S) DELETED

     DEL                                CURRENT LINE
     DEL *                              CURRENT LINE
     DEL LINE-NUMBER-1                  SPECIFIED LINE
     DEL LINE-NUMBER-1 LINE-NUMBER-2    LINE-NUMBER-1 THROUGH
                                        LINE-NUMBER-2

$ DELQ1
FOR EXAMPLE, WHICH OF THE FOLLOWING SUBCOMMANDS WOULD DELETE LINES
100 THROUGH 200?

A.  D 100 200
B.  DEL 100 200
C.  100 200
$ANS A DELQ1A
$ANS B DELQ1B
$ANS C DELQ1C
ENTER "A" "B" OR "C"
$GOTO DELQ1
$ DELQ1A
NO, THIS SUBCOMMAND WOULD HAVE WORKED UNDER EARLIER VERSIONS OF TSO,
BUT NOT ANY MORE.  READ THE TEXT AGAIN.
$GOTO DELQ1
$ DELQ1C
NO, THIS SUBCOMMAND WOULD INSERT OR REPLACE LINE 100 IN THE DATA
SET WITH A LINE CONTAINING THE CHARACTERS "200" IN THE FIRST
THREE POSITIONS.  YOU NEED A REVIEW ON INSERT/REPLACE.
$GOTO IRDF
$ DELQ1B
RIGHT.

$ LINEPT
************ THE LINE POINTER

IN EDIT MODE, AN INDICATOR CALLED THE CURRENT LINE POINTER IS
MAINTAINED.  OPERATIONS INITIATED BY SUBCOMMANDS COMMENCE AT THE LINE
INDICATED BY THIS POINTER.  THE LINE TO WHICH THE POINTER IS SET IS
CALLED THE CURRENT LINE.

WHEN YOU ENTER A SUBCOMMAND SPECIFYING A LINE NUMBER, THE POINTER IS
RESET TO THIS LINE BEFORE THE OPERATION IS CARRIED OUT.  FOR EXAMPLE,
IF YOU ENTER THE FOLLOWING SUBCOMMAND

     C 100 'A' 'B'

THE POINTER IS FIRST SET TO LINE 00100.  THE CHANGE OPERATION IS
THEN PERFORMED ON THIS NEW CURRENT LINE.

IF YOU KNOW THAT THE LINE POINTER IS ALREADY SET TO THE LINE ON WHICH
YOU WISH TO OPERATE, THEN YOU CAN SPECIFY IN THE SUBCOMMAND THAT
THE LINE POINTER IS NOT TO BE RESET.  YOU DO THIS BY USING AN
ASTERISK IN PLACE OF THE LINE NUMBER, OR BY JUST OMITTING THE LINE
NUMBER.
$ LPQ1

FOR INSTANCE, SUPPOSE YOU HAVE JUST LISTED LINE 100 AT YOUR TERMINAL
USING THE LIST SUBCOMMAND.  WHICH OF THE FOLLOWING CHOICES WOULD
BE CORRECT TO CHANGE THE FIRST OCCURRENCE OF THE CHARACTER "A" IN
LINE 100 TO THE CHARACTER "B?"

A.  C 100 'A' 'B'
B.  C * 'A' 'B'
C.  C 'A' 'B'
D.  CHOICES A AND B ABOVE
E.  CHOICES A, B, AND C ABOVE
$ANS A LPQ1A
$ANS B LPQ1A
$ANS C LPQ1A
$ANS D LPQ1A
$ANS E LPQ1E
ENTER "A" "B" "C" "D" OR "E"
$GOTO LPQ1
$ LPQ1A
RIGHT, THIS WOULD WORK, BUT SO WOULD THE OTHERS.  REREAD THE TEXT
AGAIN.
$GOTO LINEPT
$ LPQ1E
RIGHT, THEY ALL WOULD WORK.

THERE ARE A NUMBER OF SUBCOMMANDS WHOSE PRIMARY PURPOSE IS TO RESET
THE LINE POINTER.  THEY ARE DESCRIBED BRIEFLY BELOW.  FULL DESCRIPTIONS
ARE GIVEN IN THE TSO COMMAND LANGUAGE REFERENCE MANUAL.  THAT MANUAL
DESCRIBES THE EFFECT OF EVERY SUBCOMMAND ON THE LINE POINTER.

$ TBDU
THE TOP SUBCOMMAND SETS THE LINE POINTER TO ZERO.  IN A DATA SET WITH
STANDARD LINE NUMBERS, THIS MEANS THAT IT IS SET TO A POSITION
IMMEDIATELY PRECEDING THE FIRST LINE.  TO USE THE SUBCOMMAND, SIMPLY
ENTER THE KEYWORD TOP.

THE BOTTOM SUBCOMMAND SETS THE LINE POINTER TO THE LAST LINE OF THE
DATA ST.  TO USE IT, ENTER THE KEYWORD BOTTOM.

THE DOWN SUBCOMMAND MOVES THE POINTER DOWN BY THE SPECIFIED NUMBER
OF LINES.  A SIMPLIFIED GENERAL FORM IS:

     DOWN COUNT

WHERE THE WORD "COUNT" IS REPLACED BY THE NUMBER OF LINES BY WHICH THE
POINTER IS TO BE MOVED DOWN.

THE UP SUBCOMMAND MOVES THE POINTER UP BY THE SPECIFIED NUMBER OF
LINES.  A GENERAL FORM IS:

     UP COUNT

$ TBDUQ1
WHICH OF THE FOLLOWING COMMANDS WOULD YOU USE TO FIND OUT WHICH
LINE THE CURRENT LINE POINTER IS SET TO?

A.  L
B.  WHERE
C.  L *
D.  C
$ANS A TBDUQ1A
$ANS B TBDUQ1A
$ANS C TBDUQ1C
$ANS D TBDUQ1A
ENTER "A" "B" "C" OR "D"
$GOTO TBDUQ1
$ TBDUQ1A
NO, THIS WOULDN'T WORK.  YOU NEED AN EXTENSIVE REVIEW.
$GOTO EDITMODE
$ TBDUQ1C
RIGHT, THIS WOULD LIST THE CURRENT LINE AND LINE NUMBER AT THE
TERMINAL.
$ INSERT
*********** INSERT SUBCOMMAND

USE THIS SUBCOMMAND TO INSERT A GROUP OF LINES INTO YOUR DATA SET.
THERE ARE TWO FORMS FOR THIS SUBCOMMMAND.

$ INSQ1
THE FOLLOWING FORM OF THE SUBCOMMAND:

     IN INSERT-DATA

CAUSES THE DATA TO BE INSERTED AS A LINE FOLLOWING THE CURRENT LINE.
IT IS GIVEN A LINE NUMBER ONE GREATER THAN THE CURRENT LINE.
IF THE CURRENT LINE IS NUMBERED 00020, THE NEW DATA WILL BE ON WHAT
LINE?
$ANS 00021 INSQ1R
$ANS 21 INSQ1R
NO, THE CORRECT ANSWER SHOULD HAVE BEEN "21" OR "00021".  TRY READING
THE TEXT AGAIN.
$GOTO INSERT
$ INSQ1R
RIGHT.

THE FOLLOWING FORM OF THE SUBCOMMAND:

     IN

CAUSES A SWITCH FROM EDIT MODE TO INPUT MODE.  YOU WILL BE PROMPTED
FOR INPUT BY LINE NUMBERS, STARTING WITH A NUMBER ONE GREATER THAN THE
CURRENT LINE NUMBER, AND YOU SHOULD ENTER LINES IN THE SAME WAY AS
WHEN YOU FIRST USED INPUT MODE TO CREATE THE DATA SET.  THE LINE
NUMBER IS INCREASED BY ONE FOR EACH NEW LINE.  IF YOUR DATA SET HAS
THE STANDARD LINE NUMBER INCREMENT OF 10, YOU CAN ADD UP TO NINE NEW
LINES AT A TIME WITH THIS SUBCOMMAND.  TO SWITCH BACK TO EDIT MODE,
ENTER A NULL LINE.  YOU WILL AUTOMATICALLY BE SWITCHED TO EDIT MODE
IF YOU TRY TO ENTER MORE LINES THEN THE ORIGINAL DATA SET LINE
NUMBERS WILL ALLOW.
$ INP
*********** INPUT SUBCOMMAND

USE THE INPUT SUBCOMMAND (ABBREVIATED I) TO PUT THE SYSTEM INTO
INPUT MODE SO THAT YOU CAN ADD OR REPLACE DATA IN THE DATA SET BEING
EDITED.
SOME OF THE MORE COMMON FORMS OF THIS SUBCOMMAND ARE:

     SUBCOMMAND                  FUNCTION

     I LINE-NUMBER INCREMENT
                                 SPECIFIES INPUT MODE WITH LINE-NUMBER
                                 AS THE LINE NUMBER FOR THE FIRST
                                 NEW LINE OF INPUT.  INCREMENT
                                 SPECIFIES THE AMOUNT THAT YOU WANT
                                 EACH SUCCEEDING LINE NUMBER TO BE
                                 INCREASED.  IF A LINE NUMBER IS
                                 ENCOUNTERED WHICH MATCHES AN EXISTING
                                 LINE NUMBER IN THE DATA SET, INPUT
                                 MODE WILL BE TERMINATED.
     I LINE-NUMBER INCREMENT R
                                 SAME AS THE PREVIOUS FORMAT, EXCEPT
                                 IF A LINE NUMBER IS ENCOUNTERED WHICH
                                 MATCHES AN EXISTING LINE NUMBER IN
                                 THE DATA SET, INPUT MODE WILL NOT
                                 BE TERMINATED, AN THE EXISTING LINE
                                 WILL BE OVERLAYED WITH THE NEW LINE
                                 OF INPUT.

FOR INSTANCE, TO INSERT THREE LINES BETWEEN LINES 20 AND 30, TO
HAVE THE FIRST LINE NUMBERED 22, AND TO INCREMENT THIS NUMBER BY
TWO IN THE FOLLOWING LINES, YOUR LISTING WOULD LOOK AS FOLLOWS:

     EDIT
     INPUT 22 2
     00022     2795     $0.79
     00024     3241     $2.81
     00026     4152     $1.79
     00028     (NULL LINE)
     EDIT

THE UPDATED DATA SET MIGHT LOOK LIKE THIS:

     00020     2579     $1.39
     00022     2795     $0.79
     00024     3241     $2.81
     00026     4152     $1.79
     00030     4798     $1.75

$ VER
*********** VERIFY SUBCOMMAND

USE THIS SUBCOMMAND TO DISPLAY EACH LINE YOU CHANGE IMMEDIATELY

     V

SPECIFIES THAT EVERY TIME YOU CHANGE A LINE, THE SYSTEM IS TO DISPLAY
THE NEW TEXT AT YOUR TERMINAL.  THE SYSTEM ALSO DISPLAYS THE NEW
CURRENT LINE EVERY TIME YOU SET THE LINE POINTER TO A NEW LINE, EVEN
IF YOU MAKE NO CHANGE TO THE LINE.

     V OFF

SPECIFIES THAT THE VERIFICATION SERVICE IS TO BE DISCONTINUED.

$ RENUM
************ RENUMBER SUBCOMMAND

USE THIS SUBCOMMAND TO RENUMBER LINES IN YOUR DATA SET.  THE FOLLOWING
SHOWS THE MEANING OF THE VARIOUS FORMS OF THE SUBCOMMAND.

     SUBCOMMAND                  LINES        FIRST LINE NUMBER/
                                 RENUMBERED   INCREMENT

     REN                         ALL          10/10
     REN NEW-LINE-NUMBER         ALL          NEW-LINE-NUMBER/
                                              10
     REN NEW-LINE-NUMBER INCREMENT
                                 ALL          NEW-LINE-NUMBER/
                                              INCREMENT
     REN NEW-LINE-NUMBER INCREMENT OLD-LINE-NUMBER
                                 OLD-LINE-NUMBER TO END OF DATA SET
                                              NEW-LINE-NUMBER/
                                              INCREMENT

$ RENQ1
CONSIDER, AS AN EXAMPLE, A DATA SET CONTAINING LINES NUMBERED
10, 20, 25, 30, 40, 50, 55, 56, 60.  WHICH OF THE FOLLOWING
SUBCOMMANDS WILL RENUMBER THE DATA SET WITH LINE NUMBERS
10, 20, 30, 40, 50, 60, 70, 80, 90?

A.  REN
B.  REN 30 10 25
C.  REN 10 10
D.  ALL OF THE ABOVE
E.  NONE OF THE ABOVE
$ANS A RENQ1A
$ANS B RENQ1A
$ANS C RENQ1A
$ANS D RENQ1D
$ANS E RENQ1E
ENTER "A" "B" "C" "D" OR "E"
$GOTO RENQ1
$ RENQ1A
RIGHT, BUT ACTUALLY, MORE THAN ONE CHOICE WAS CORRECT. TRY READING
THE TEXT AGAIN.
$GOTO RENUM
$ RENQ1E
WRONG.  READ THE TEXT AGAIN.
$GOTO RENUM
$ RENQ1D
RIGHT, ANY ONE SUBCOMMAND WOULD WORK; ITS A MATTER OF PERSONAL
PREFERENCE.
$ FIND
*********** FIND SUBCOMMAND

USE THIS SUBCOMMAND TO SEARCH THE DATA SET FOR A SPECIFIED STRING
OF CHARACTERS.  THE LINE POINTER IS SET TO THE FIRST LINE
CONTAINING THE STRING.  THE FOLLOWING IS A SIMPLIFIED GENERAL FORM
OF THE SUBCOMMAND:

     FIND STRING

THE "STRING" MUST BE ENCLOSED IN SINGLE QUOTES OR SPECIAL CHARACTERS,
IN THE SAME WAY AS THE CHANGE SUBCOMMAND.  (THE SINGLE QUOTES
METHOD IS USED HERE.)

THE SEARCH IS COMMENCED AT THE CURRENT LINE.  TO SEARCH THE
WHOLE DATA SET FOR A STRING, THE LINE POINTER MUST FIRST BE SET
TO THE START OF THE DATA SET.  FOR EXAMPLE, TO SEARCH THE WHOLE
DATA SET FOR THE STRING "JACK", THE FOLLOWING SUBCOMMANDS SHOULD BE
ENTERED:

     TOP
     FIND 'JACK'

THE POINTER WILL THEN BE SET TO THE FIRST LINE IN WHICH JACK OCCURS.
$ BIGQ
NOW COMES A QUESTION THAT IS A LITTLE MORE COMPLICATED.  IF YOU CAN
ANSWER THIS ONE, YOU UNDERSTAND WHAT HAS BEEN PRESENTED SO FAR FAIRLY
WELL.
SUPPOSE YOU ARE EDITING A DATA SET OF 500 LINES, AND YOU WANT TO
LIST AT YOUR TERMINAL EVERY LINE CONTAINING THE CHARACTER STRING
"JACK."  WHAT THREE SUBCOMMANDS, EACH ENTERED ONE TIME, WILL CAUSE
THIS TO HAPPEN?

A.  LIST, INPUT, AND VERIFY.
B.  TOP, VERIFY, AND CHANGE.
C.  UP, LIST, AND INSERT.
$ANS A BQ1A
$ANS B BQ1B
$ANS C BQ1A
ENTER "A" "B" OR "C"
$GOTO BIGQ
$ BQ1A
WRONG.  TRY READING THE TEXT AGAIN.
$GOTO EDITMODE
$ BQ1B
RIGHT, THE THREE SUBCOMMANDS ARE TOP, VERIFY, AND CHANGE.  THE
FIRST COMMAND ISSUED WOULD BE TOP, THE SECOND VERIFY, AND THE
THIRD WOULD BE CHANGE.  WHICH OF THE FOLLOWING WOULD BE THE CORRECT
FORMAT FOR THE CHANGE SUBCOMMAND?

A.  C 'JACK' 'JACK' A
B.  C * 500 'JACK' 'JACK' A
C.  C 500 'JACK 'JACK'
$ANS A BQ1BA
$ANS B BQ1BB
$ANS C BQ1BC
ENTER "A" "B" OR "C"
$GOTO BQ1B
$ BQ1BA
NO, THIS WOULD ONLY LIST THE CURRENT LINE IF IT HAD THE CHARACTER
STRING "JACK" IN IT.  YOU NEED TO SPECIFY THE RANGE OF LINES.
GO BACK FOR A REVIEW.
$GOTO CHANGE
$ BQ1BC
NO, THIS WOULD ONLY LIST LINE 500 IF IT CONTAINS THE CHARACTER STRING
"JACK".  GO BACK AND REVIEW.
$GOTO CHANGE
$ BQ1BB
RIGHT, THIS COMMAND WOULD LIST OUT EVERY LINE CONTAINING THE STRING
"JACK" FROM THE CURRENT LINE POINTER, WHICH POINTS AT THE TOP OF THE
DATA SET AS A RESULT OF THE PREVIOUS TOP SUBCOMMAND, FOR THE NEXT
500 LINES, WHICH INCLUDES THE ENTIRE DATA SET.

$ SAVE
********** SAVE SUBCOMMAND

USE THE SAVE SUBCOMMAND TO STORE YOUR DATA SET IN PERMANENT STORAGE
WHEN YOU HAVE FINISHED CREATING OR UPDATING IT.  YOU WILL RECALL THAT
THE TEXT EXPLAINING THE EDIT COMMAND STATED THAT IT WAS USED TO
CREATE A NEW DATA SET, OR ALTER AN OLD ONE?  WELL, THIS IS NOT QUITE
TRUE.  THE EDIT COMMAND CREATES A TEMPORARY DATA SET THAT YOU CAN THINK
OF AS A "SCRATCH PAD."  IF YOU DID NOT SPECIFY THE OPERAND "NEW" ON
THE EDIT COMMAND, THEN IT WILL LOOK FOR AN ALREADY EXISTING DATA SET,
AND WILL COPY IT TO THE "SCRATCH PAD" DATA SET.  ANY CHANGES YOU
MAKE TO THE DATA WILL BE MADE ONLY ON THE "SCRATCH PAD" DATA SET.
THE ORIGINAL DATA SET WILL NOT BE CHANGED UNTIL YOU ENTER THE SAVE
SUBCOMMAND.  THE GENERAL FORM OF THE SUBCOMMAND IS AS FOLLOWS:

     S DATA-SET-NAME

THE "DATA-SET-NAME" IS OPTIONAL.  IF YOU OMIT IT, THE DATA SET WILL BE
STORED WITH THE NAME SPECIFIED IN THE EDIT COMMAND.  IF YOU HAVE
BEEN EDITING AN EXISTING DATA SET (THAT IS, IF THE OPERAND NEW WAS NOT
SPECIFIED IN THE EDIT COMMAND), THE EARLIER VERSION WILL BE REPLACED BY
THE EDITED VERSION.

IF YOU DO SPECIFY A "DATA-SET-NAME", YOUR DATA SET WILL BE STORED WITH
THAT NAME.  IF A DATA SET WITH THE SPECIFIED NAME ALREADY EXISTS, IT
WILL BE REPLACED BY THE EDITED DATA SET.  THE "DATA-SET-NAME"
SHOULD FOLLOW THE RULES GIVEN FOR THE "DATA-SET-NAME" OPERAND OF
THE EDIT COMMAND.  APPROPRIATE QUALIFIERS WILL BE ADDED TO THE NAME
YOU SPECIFY BY THE TSO SYSTEM.
$ SQ1
FOR EXAMPLE, IF YOUR EDIT COMMAND WAS

     EDIT TEMPJCL CNTL NEW

AND YOU NOW ENTER THE SAVE SUBCOMMAND, WHICH OF THE FOLLOWING CHOICES
IS CORRECT FOR THE DATA SET NAME THAT THE SAVE SUBCOMMAND WILL STORE
INTO?  ASSUME YOUR USERID IS EUP027.

A.  EUP027.TEMPJCL.CNTL
B.  EUP027.TEMPJCL.CNTL.NEW
$ANS A SQ1A
$ANS B SQ1B
ENTER "A" OR "B"
$GOTO SQ1
$ SQ1B
WRONG.  READ THE TEXT AGAIN.
$GOTO SAVE
$ SQ1A
RIGHT.
$ SQ2
IF YOU ENTERED THE FOLLOWING EDIT COMMAND

     EDIT MYJCL CNTL NEW

AND SUBSEQUENTLY ENTERED THE FOLLOWING SUBCOMMAND

     S TEMPJCL.CNTL

WHICH OF THE FOLLOWING CHOICES WOULD BE CORRECT FOR THE DATA
SET NAME INTO WHICH THE SAVE SUBCOMMAND WOULD STORE?
AGAIN, ASSUME YOUR USERID IS EUP027.

A.  EUP027.TEMPJCL.CNTL.CNTL
B.  EUP027.TEMPJCL.CNTL
$ANS A SQ2A
$ANS B SQ2B
ENTER "A" OR "B"
$GOTO SQ2
$ SQ2A
RIGHT, THE EDIT COMMAND ISN'T SMART ENOUGH TO RECOGNIZE THE DESCRIPTIVE
QUALIFIER YOU SUPPLIED ON THE SAVE SUBCOMMAND, SO IT ADDS ONE OF ITS
OWN.
$GOTO ENDSUB
$ SQ2B
WRONG, THE EDIT COMMAND ISN'T SMART ENOUGHT TO RECOGNIZE THE DESCRIPTIVE
QUALIFIER YOU SUPPLIED ON THE SAVE SUBCOMMAND, SO IT ADDS ONE OF ITS
OWN, BASED ON THE DATA SET TYPE KEYWORD YOU SPECIFIED ON THE EDIT
COMMAND.
$GOTO SAVE
$ ENDSUB

WHEN YOU CREATE OR UPDATE A DATA SET, THE EDIT COMMAND ROUTINES
MAINTAIN THEIR OWN COPY OF THAT DATA SET.  UPDATES AND ADDITIONS ARE
MADE TO THIS COPY, NOT TO THE PERMANENT COPY ON EXTERNAL STORAGE.  ONLY
WHEN A SAVE SUBCOMMAND IS ENTERED DOES THE SYSTEM CREATE A NEW OR
REPLACEMENT PERMANENT DATA SET.  IT IS ADVISABLE TO SAVE A COPY OF YOUR
DATA SET AT REGULAR INTERVALS WHILE YOU ARE CREATING OR UPDATING IT.
THIS WILL SAFEGUARD YOU FROM LOSING A LARGE NUMBER OF NEWLY-CREATED OR
UPDATED LINES SHOULD YOU INADVERTENTLY MISUSE A SUBCOMMAND FOR CHANGING
OR DELETING LINES, OR SHOULD THERE BE A FAILURE OF SOME PART OF THE
SYSTEM THAT CAUSES YOU TO BE AUTOMATICALLY LOGGED OFF.

$ END
************ END SUBCOMMAND

AFTER COMPLETING WORK ON YOUR DATA SET AND SAVING IT, USE THE END
SUBCOMMAND TO END THE EDIT COMMAND.  SIMPLY ENTER THE KEYWORD END.

IF YOU TRY TO END EDIT WITHOUT SAVING YOUR DATA SET, THE TSO SYSTEM
WILL WARN YOU IN THE FOLLOWING MANNER:

     EDIT                      (SYSTEM MODE MESSAGE)
     END                       (END SUBCOMMAND)
     NOTHING SAVED             (WARNING MESSAGE)
     ENTER SAVE OR END-        (PROMPT)

IF YOU WANT TO END EDIT WITHOUT SAVING THE DATA SET, REENTER THE END
SUBCOMMAND.  OTHERWISE, ENTER A SAVE SUBCOMMAND FOLLOWED BY AN END.
THIS CONCLUDES THE TEXT ON EDIT.

$ EDITOLD
*********** UPDATING AN EXISTING DATA SET

TO UPDATE AN EXISTING PL/I DATA SET, OR TO CONTINUE ADDING LINES TO A
DATA SET THAT WAS PARTIALLY COMPLETED DURING AN EARLIER TERMINAL
SESSION, ENTER AN EDIT COMMAND AS FOLLOWS:

     EDIT DATA-SET-NAME PLI
       OR
     EDIT DATA-SET-NAME CNTL

THE "DATA-SET-NAME" WILL GENERALLY BE THE ONE UNDER WHICH THE DATA SET
WAS SAVED.  IF NO DATA SET NAME WAS SPECIFIED IN THE MOST RECENT
SAVE SUBCOMMAND, THEN USE THE NAME YOU USED IN THE LAST EDIT
COMMAND.  ASSUMING THAT YOU DID NOT SOTRE THE DATA SET WITH A
NON-CONVENTIONAL NAME, THE "DATA-SET-NAME" SHOULD NOT BE IN QUOTES,
AND YOU SHOULD NOT ADD ANY QUALIFIERS.  TO UPDATE A MEMBER OF A
PARTITIONED DATA SET, SPECIFY, IN THE EDIT COMMAND, THE DATA SET
NAME WITH THE MEMBER NAME IN PARENTHESES AFTER IT.

THE COMMAND WILL START IN EDIT MODE.  FOR EXAMPLE:

     READY                           (SYSTEM MESSAGE)
     EDIT ALBA PLI                   (EDIT COMMAND)
     EDIT                            (SYSTEM MODE MESSAGE)

IF YOU WISH TO SIMPLY ADD LINES TO YOUR DATA SET, PRESS THE ENTER KEY
TO ENTER A NULL LINE.  THE COMMAND WILL THEN SWITCH TO INPUT MODE, AND
PROMPT YOU WITH THE LINE NUMBER FOLLOWING THE LAST ONE ON YOUR DATA SET.

IF YOU WISH TO AMEND EXISTING LINES, YOU CAN USE ANY OF THE SUBCOMMANDS
DESCRIBED EARLIER UNDER "EDIT MODE."

WHEN YOU HAVE FINISHED UPDATING, RE-STORE YOUR DATA SET USING A SAVE
SUBCOMMAND (EITHER WITH OR WITHOUT A "DATA-SET-NAME" OPERAND)
THEN ENTER AN END SUBCOMMAND TO END EDIT.

IF YOU ARE NOT SURE OF THE NAME OF AN EXISTING DATA SET, YOU CAN HAVE
ALL YOUR TSO DATA SET LISTED BY ENTERING THE LISTCAT COMMAND.  FOR
FURTHER INFORMATION, USE THE HELP COMMAND.

THIS CONCLUDES THE TEXT ON THE EDIT COMMAND.

$ BGD
************ BGD COMMAND

ONCE YOU HAVE CREATED A DATA SET CONTAINING JCL STATEMENTS, YOU WILL
WANT TO GET IT SUBMITTED TO THE OPERATING SYSTEM FOR EXECUTION.
TO DO THIS, YOU WOULD USE THE BGD COMMAND.  GENERAL FORMAT FOR THIS
COMMAND IS:

     BGD DATA-SET-NAME

NOTE THAT THE BGD COMMAND DOES NOT ATTEMPT TO ADD ANY KIND OF
DESCRIPTIVE QUALIFIER.  IF YOUR DATA SET IS NAMED EUP027.MYJCL.CNTL,
THEN ASSUMING YOUR USERID IS EUP027, THE BGD COMMAND FOR THIS DATA
SET WOULD BE:

     BGD MYJCL.CNTL

IF THE JCL TO BE SUBMITTED IS CONTAINED AS A MEMBER OF A PARTITIONED
DATA SET, THEN THE COMMAND WOULD APPEAR AS FOLLOWS:

     BGD JCL.CNTL(MYJCL)

WHERE JCL.CNTL IS THE PARTITIONED DATA SET NAME, AND MYJCL IS THE
MEMBER NAME.

NOTE THAT THE BGD COMMAND WILL ACCEPT ONLY 80 BYTE, FIXED LENGTH
RECORDS.

$ DOLLAR
*************** $ COMMAND

USE THE $ COMMAND TO FIND OUT THE STATUS OF JOBS YOU HAVE SUBMITTED
TO THE OPERATING SYSTEM FOR EXECUTION.  THE COMMAND HAS MANY FORMATS,
ONLY A FEW OF WHICH ARE EXPLAINED HERE.

FOR A COMPLETE LIST OF ALL THE OPTIONS OF THE $ COMMAND, YOU CAN
ENTER THE FOLLOWING:

     $ HELP

THIS COMMAND IS SIMILAR TO THE TSO HELP COMMAND, AND WILL PROVIDE
WITH INFORMATION ON USING THE $ COMMAND.

$ D'
ONE OF THE MORE USEFUL FORMATS OF THE $ COMMAND IS THE FOLLOWING:

     $ D'JOBNAME-SPECIFICATION

WHERE "JOBNAME-SPECIFICATION" IS A CHARACTER STRING OF UP TO EIGHT
CHARACTERS.  IT WOULD BE EASIEST TO SHOW HOW IT WORKS BY ILLUSTRATION:

     $ D'EUP027..

BY ENTERING THE ABOVE COMMAND, I WOULD OBTAIN THE STATUS OF EVERY
JOB IN THE SYSTEM WITH A JOBNAME BEGINNING WITH THE CHARACTERS
"EUP027".  IF JOBS NAMED EUP027AA, EUP02723, AND EUP02733 WERE ALL
CURRENTLY IN THE SYSTEM, FOR EXAMPLE, THIS COMMAND WOULD TELL ME IF
THEY WERE AWAITING EXECUTION, IN EXECUTION, AWAITING PRINT, OR
PRINTING.
$ D'Q1
WHICH OF THE FOLLOWING COMMANDS WOULD TELL MY ABOUT ANY JOBS IN
THE SYSTEM WITH NAMES BEGINNING WITH "DZ00"?

A.  $ D'DZ00
B.  $ D'DZ00....
$ANS A D'Q1A
$ANS B D'Q1B
ENTER "A" OR "B"
$GOTO D'Q1
$ D'Q1A
WRONG.  THIS COMMAND WOULD ONLY TELL ME ABOUT THE JOB NAMED "DZ00".
TRY READING THE TEXT AGAIN.
$GOTO D'
$ D'Q1B
RIGHT.
$ DJ
YOU MIGHT ALSO FIND THE FOLLOWING FORMAT USEFUL:

     $ DJ

THIS COMMAND WOULD LIST THE STATUS OF ALL JOBS IN THE SYSTEM
WITH JOBNAMES BEGINNING WITH YOUR USERID.  IF YOUR USERID WERE
EUP027, THEN THE FOLLOWING TWO COMMANDS WOULD PERFORM THE SAME
SERVICE:

     $ D'EUP027..
       OR
     $ DJ

THIS CONCLUDES THIS TUTORIAL.  BY NOW, YOU SHOULD HAVE ENOUGH KNOWLEDGE
TO USE TSO EFFECTIVELY TO MAINTAIN SOURCE DECKS AND JOB CONTROL, AND
TO SUBMIT JOBS FOR BACKGROUND EXECUTION.

NOTE THAT YOU SHOULD NOW BE ABLE TO USE THE PRINT COMMAND TO PRINT THE
TEXT FOR THESE TUTORIALS AS MENTIONED IN A PREVIOUS PI COURSE.  TRY
USING THE HELP COMMAND TO FIND OUT HOW TO DO THIS.
