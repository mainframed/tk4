 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE061C - APL */
   %INCLUDE ABESUB;
 ABESUB(ABE061C) CHECK(YES) RECURS(YES)
   PARMS(RHPTR,RHHDRPT,PARMSPTR,SYMBOLS,SYMBOL_NAMES);
   %INCLUDE ABESUBA;

   DCL PARMSPTR PTR;
   DCL SYMBOLS(72) CHAR(3);
   DCL SYMBOL_NAMES(72) CHAR(14);
   DCL 1 PARMS_STRUCTURE BASED(PARMSPTR),
   %INCLUDE ABE061A;
   DCL ABE061D ENTRY;

   DO_AXIS=DO_AXIS_REAL;
   DYADIC_SCALAR_IDENTITY=DYADIC_SCALAR_IDENTITY_REAL;
   MAIN_LOOP=MAIN_LOOP_REAL;
   CALL ABE061D(RHPTR,RHHDRPT,PARMSPTR,SYMBOLS,SYMBOL_NAMES);

 DO_AXIS_DEFAULT: PROC(AXIS_NAME);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT OPERATOR IS ONE TO WHICH THE AXIS OPERATOR  *
 * APPLIES, AND THE DEFAULT AXIS IS TO BE USED.                        *
 *                                                                     *
 **********************************************************************/
   DCL AXIS_NAME CHAR(*);
   DCL AXIS DEC FLOAT(16);
   DCL OPENTRY ENTRY(PTR,PTR,DEC FLOAT(16)) RETURNS(PTR) VARIABLE;
   DCL (LEFT,RIGHT,TMP) PTR;

   RIGHT=POP_OPERAND(OPERAND_STACK,OPERAND_COUNT);
   IF RIGHT=NULL
     THEN DO;
       MSGDATA=SYMBOL_NAMES(TYPE)××
         ' OPERATOR MUST HAVE A RIGHT OPERAND';
       SIGNAL CONDITION(BADAPL);
       END;
   CALL DO_AXIS_GETENTRY(OPENTRY); /* GO GET ENTRY POINT */
   LEFT=GET_LEFT;
   IF AXIS_NAME='FIRST'
     THEN AXIS=1;
     ELSE IF LEFT=NULL
       THEN AXIS=RIGHT->RH_APL->RH_APL_RANK;
       ELSE IF LEFT->RH_APL->RH_APL_RANK>RIGHT->RH_APL->RH_APL_RANK
         THEN AXIS=LEFT->RH_APL->RH_APL_RANK;
         ELSE AXIS=RIGHT->RH_APL->RH_APL_RANK;
   TMP=OPENTRY(LEFT,RIGHT,AXIS);
   CALL END_OPER(LEFT,RIGHT,TMP);
   END DO_AXIS_DEFAULT;

 DO_AXIS_GETENTRY: PROC(OPENTRY);
 /**********************************************************************
 *                                                                     *
 * CALLED TO DETERMINE WHICH OF THE OPERATORS INFLUENCED BY AXIS IS    *
 * CURRENTLY POINTED TO BY CURTOK.                                     *
 *                                                                     *
 **********************************************************************/
   DCL OPENTRY ENTRY VARIABLE;

   IF TYPE<=0
     THEN OPENTRY=DO_AXIS_INVALID;
     ELSE SELECT(SYMBOL_NAMES(TYPE));
       WHEN('COMMA')        OPENTRY=DO_COMMA;
       WHEN('SLASH')        OPENTRY=DO_SLASH;
       WHEN('SLASH BAR')    OPENTRY=DO_SLASH;
       WHEN('SLOPE')        OPENTRY=DO_SLOPE;
       WHEN('SLOPE BAR')    OPENTRY=DO_SLOPE;
       WHEN('CIRCLE BAR')   OPENTRY=DO_CIRCLE_STILE;
       WHEN('CIRCLE STILE') OPENTRY=DO_CIRCLE_STILE;
       OTHERWISE            OPENTRY=DO_AXIS_INVALID;
       END;
   END DO_AXIS_GETENTRY;

 DO_AXIS_INVALID: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN A BRACKETED AXIS VALUE IS NOT PRECEDED BY A VALID       *
 * OPERATOR.                                                           *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT,RIGHT) PTR;
   DCL AXIS DEC FLOAT(16);

   MSGDATA='INVALID AXIS OPERATOR';
   SIGNAL CONDITION(BADAPL);
   RETURN(NULL);
   END DO_AXIS_INVALID;

 DO_AXIS_REAL: PROC(SOC) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE AXIS OPERATOR HAS BEEN RECOGNIZED.  THE AXIS NUMBER *
 * SHOULD BE ON THE OPERAND STACK.  PARAMETER SOC IS THE OPERAND_COUNT *
 * PRIOR TO STACKING THE BRACKETED AXIS VALUE.  THE CURRENT TOKEN IS   *
 * THE LEFT BRACKET.                                                   *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K,SOC) FIXED BIN(31,0);
   DCL (IXP,LEFT,RIGHT,SAVTOK,TMP) PTR;
   DCL OPENTRY ENTRY(PTR,PTR,DEC FLOAT(16)) RETURNS(PTR) VARIABLE;
   DCL AXIS DEC FLOAT(16);

   MSGDATA='';
   IF OPERAND_COUNT-SOC^=1
     THEN DO;
       MSGDATA='BRACKETED AXIS VALUE MUST BE A SINGLE NUMBER';
       SIGNAL CONDITION(BADAPL);
       END;
   IXP=POP_OPERAND(OPERAND_STACK,OPERAND_COUNT);
   I=EL_CNT(IXP->RH_APL);
   IF I>0
     THEN AXIS=GET_SCALAR_SEQ('FORWARD',IXP,NULL,0,0);
     ELSE MSGDATA='INVALID NULL AXIS VALUE';
   CALL END_OPER_SUB(IXP);
   IF MSGDATA^=''
     THEN SIGNAL CONDITION(BADAPL);
   IF I^=1
     THEN DO;
       MSGDATA='BRACKETED AXIS VALUE MUST BE A SINGLE NUMBER';
       SIGNAL CONDITION(BADAPL);
       END;
   IF PRIOR_TOKEN=NULL
     THEN DO;
       MSGDATA='NO OPERATOR TO THE LEFT OF BRACKETED AXIS VALUE';
       SIGNAL CONDITION(BADAPL);
       END;
   RIGHT=POP_OPERAND(OPERAND_STACK,OPERAND_COUNT);
   IF RIGHT=NULL
     THEN DO;
       MSGDATA='AXIS OPERATOR MUST HAVE A RIGHT OPERAND';
       SIGNAL CONDITION(BADAPL);
       END;
   CURTOK=PRIOR_TOKEN;
   CALL DO_AXIS_GETENTRY(OPENTRY); /* GO GET ENTRY POINT */
   SAVTOK=CURTOK; /* SAVE POINTER TO OPERATOR */
   LEFT=GET_LEFT;
   I=RIGHT->RH_APL->RH_APL_RANK;
   IF LEFT^=NULL
     THEN I=MAX(I,LEFT->RH_APL->RH_APL_RANK);
   IF AXIS<=0 × AXIS>I
     THEN IF SYMBOL_NAMES(SAVTOK->TYPE)='COMMA'
       THEN IF AXIS<=0 × AXIS>=I+1
         THEN DO;
           MSGDATA='LAMINATE VALUE NOT IN ACCEPTABLE RANGE';
           SIGNAL CONDITION(BADAPL);
           END;
         ELSE;
       ELSE DO;
         MSGDATA='AXIS OPERATOR NOT IN ACCEPTABLE RANGE';
         SIGNAL CONDITION(BADAPL);
         END;
   TMP=OPENTRY(LEFT,RIGHT,AXIS);
   CALL END_OPER_SUB(RIGHT);
   CALL END_OPER_SUB(LEFT);
   RETURN(TMP);
   END DO_AXIS_REAL;

 DO_CIRCLE_STILE: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS CIRCLE-STILE AND CIRCLE-BAR OPERATORS.            *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT,RIGHT) PTR;
   DCL AXIS DEC FLOAT(16);

   IF LEFT=NULL
     THEN RETURN(DO_REVERSE(RIGHT,AXIS));
     ELSE RETURN(DO_ROTATE(LEFT,RIGHT,AXIS));
   END DO_CIRCLE_STILE;

 DO_COMMA: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT OPERATOR IS A COMMA, WHICH IS EITHER        *
 * DYADIC CATENATE/LAMINATE, OR MONADIC RAVEL.                         *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT,RIGHT,TMP) PTR;
   DCL AXIS DEC FLOAT(16);

   IF LEFT=NULL
     THEN RETURN(DO_COMMA_MONADIC(RIGHT,AXIS));
     ELSE IF MOD(AXIS,1)=0
       THEN RETURN(DO_COMMA_CATENATE(LEFT,RIGHT,AXIS));
       ELSE RETURN(DO_COMMA_LAMINATE(LEFT,RIGHT,AXIS));
   END DO_COMMA;

 DO_COMMA_CATENATE: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED WHEN THE CURRENT OPERATOR IS CATENATE.                       *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,LEFT,RIGHT,SMP,TMP,WRK) PTR;
   DCL AXIS DEC FLOAT(16);
   DCL (I,J,K,M,N,P,R) FIXED BIN;

   /* FIRST CHECK FOR CONFORMABILITY */
   K=LEFT->RH_APL->RH_APL_RANK - RIGHT->RH_APL->RH_APL_RANK;
   IF ABS(K)>1
     THEN IF ^(LEFT->RH_APL->RH_APL_SCALAR×RIGHT->RH_APL->RH_APL_SCALAR)
       THEN DO;
         MSGDATA='ARGUMENTS TO CATENATE ARE NOT CONFORMABLE';
         SIGNAL CONDITION(BADAPL);
         END;
   CBP=CREATE_APLCB(MAX(LEFT->RH_APL->RH_APL_RANK,
     RIGHT->RH_APL->RH_APL_RANK));
   IF LEFT->RH_APL->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE
     THEN DO;
       CBP->RH_APL_TYPE=LEFT->RH_APL->RH_APL_TYPE;
       CBP->RH_APL_ELEN=MAX(LEFT->RH_APL->RH_APL_ELEN,
         RIGHT->RH_APL->RH_APL_ELEN);
       END;
     ELSE DO;
       CBP->RH_APL_TYPE=FLOAT_TYPE;
       CBP->RH_APL_ELEN=8;
       END;
   I,J=0;
   N,R=1; /* N WILL EQUAL #ELS/REC, R WILL EQUAL #RECS */
   DO M=1 TO CBP->RH_APL_RANK;
     IF M=AXIS
       THEN DO;
         SELECT;
           WHEN(K=0) DO;
             I=I+1;
             J=J+1;
             P=LEFT->RH_APL->RH_APL_DIM(I); /* CATENATE POINT */
             CBP->RH_APL_DIM(M)=P+RIGHT->RH_APL->RH_APL_DIM(J);
             END;
           WHEN(K<0) DO;
             J=J+1;
             P=1; /* CATENATE POINT */
             CBP->RH_APL_DIM(M)=P+RIGHT->RH_APL->RH_APL_DIM(J);
             END;
           WHEN(K>0) DO;
             I=I+1;
             P=LEFT->RH_APL->RH_APL_DIM(I); /* CATENATE POINT */
             CBP->RH_APL_DIM(M)=P+1;
             END;
           OTHERWISE;
           END; /* SELECT */
         END;
       ELSE DO;
         IF I<LEFT->RH_APL->RH_APL_RANK
           THEN I=I+1;
         IF J<RIGHT->RH_APL->RH_APL_RANK
           THEN J=J+1;
         SELECT;
           WHEN(LEFT->RH_APL->RH_APL_SCALAR &
             RIGHT->RH_APL->RH_APL_SCALAR)
             CBP->RH_APL_DIM(M)=2;
           WHEN(LEFT->RH_APL->RH_APL_SCALAR)
             CBP->RH_APL_DIM(M)=RIGHT->RH_APL->RH_APL_DIM(J);
           WHEN(RIGHT->RH_APL->RH_APL_SCALAR)
             CBP->RH_APL_DIM(M)=LEFT->RH_APL->RH_APL_DIM(I);
           OTHERWISE DO; /* NEITHER IS SCALAR */
             IF LEFT->RH_APL->RH_APL_DIM(I)^=
               RIGHT->RH_APL->RH_APL_DIM(J)
               THEN DO;
                 FREE CBP->APLCB;
                 MSGDATA='ARGUMENTS TO CATENATE ARE NOT CONFORMABLE';
                 SIGNAL CONDITION(BADAPL);
                 END;
             CBP->RH_APL_DIM(M)=LEFT->RH_APL->RH_APL_DIM(I);
             END;
           END; /* SELECT */
         END;
     IF M>CBP->RH_APL_DEMARC
       THEN N=N*CBP->RH_APL_DIM(M);
       ELSE R=R*CBP->RH_APL_DIM(M);
     END;
   CBP->RH_APL_RHCOUNT=R;
   CBP->RH_APL_ELCOUNT=N;
   TMP=CREATE_VAR(N*CBP->RH_APL_ELEN,CBP,'');
   TMP->HEXMODE=LEFT->HEXMODE × RIGHT->HEXMODE;
   CALL DO_COMMA_CATENATE_SUB(LEFT,RIGHT,AXIS,TMP,CBP,P);
   RETURN(TMP);
   END DO_COMMA_CATENATE;

 DO_COMMA_CATENATE_SUB: PROC(LEFT,RIGHT,AXBN,TMP,CBP,P);
 /**********************************************************************
 *                                                                     *
 * CALLED FROM DO_COMMA_CATENATE AND DO_COMMA_LAMINATE TO PERFORM      *
 * CATENATE AND LAMINATE OPERATIONS AFTER INITIAL SETUP.               *
 *   LEFT - POINTS TO LEFT OPERAND.                                    *
 *   RIGHT - POINTS TO RIGHT OPERAND.                                  *
 *   AXBN - NUMBER OF AXIS ALONG WHICH CATENATE IS TO TAKE PLACE.      *
 *   TMP - POINTS TO OUTPUT DATA SET.                                  *
 *   CBP - POINTS TO APLCB FOR OUTPUT DATA SET.                        *
 *   P - CATENATE POINT                                                *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,LEFT,LRPT,RIGHT,RRPT,TMP,TOIXW) PTR;
   DCL AXBN FIXED BIN(31,0);
   DCL (I,J,LCIX,LMIX,K,M,N,OCIX,OMIX,P,RCIX,RMIX,TYP) FIXED BIN;
   DCL (EL,LEL,REL,ELK) CHAR(256) VAR;

   LRPT,RRPT=NULL;
   IF LEFT->RH_APL->RH_APL_SCALAR
     THEN LEL=GET_EL('FORWARD',LEFT, LRPT,LCIX,LMIX); /*LEFT SCALAR*/
   IF RIGHT->RH_APL->RH_APL_SCALAR
     THEN REL=GET_EL('FORWARD',RIGHT,RRPT,RCIX,RMIX); /*RIGHT SCALAR*/
   L=CBP->RH_APL_RANK;
   ALLOCATE IXW SET(TOIXW);
   TOIXW->IXWRHP=TMP;
   TOIXW->IX(1)=0;
   I=1;
   DO UNTIL(I=0);
     TOIXW->IX(I)=TOIXW->IX(I)+1;
     IF TOIXW->IX(I)>CBP->RH_APL_DIM(I)
       THEN I=I-1;
       ELSE IF I=L
         THEN DO;
           IF TOIXW->IX(AXBN)>P
             THEN DO;
               TYP=RIGHT->RH_APL->RH_APL_TYPE;
               IF RIGHT->RH_APL->RH_APL_SCALAR
                 THEN EL=REL;
                 ELSE EL=GET_EL('FORWARD',RIGHT,RRPT,RCIX,RMIX);
               END;
             ELSE DO;
               TYP=LEFT->RH_APL->RH_APL_TYPE;
               IF LEFT->RH_APL->RH_APL_SCALAR
                 THEN EL=LEL;
                 ELSE EL=GET_EL('FORWARD',LEFT, LRPT,LCIX,LMIX);
               END;
           CALL PUT_EL(
             CONVERT(PTROUT(PTRIN(ADDR(EL))+2),
               TYPETAB(TYP),LENGTH(EL),0,
               TYPETAB(TMP->RH_APL->RH_APL_TYPE),
               TMP->RH_APL->RH_APL_ELEN,0),
             TMP,OCIX,OMIX);
           END;
         ELSE DO;
           I=I+1;
           TOIXW->IX(I)=0;
           END;
     END;
   FREE TOIXW->IXW;
   I=#CMD('TOP',TMP,RHHDRPT);
   END DO_COMMA_CATENATE_SUB;

 DO_COMMA_LAMINATE: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS LAMINATE OPERATOR.                                *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,LEFT,RIGHT,TMP) PTR;
   DCL AXIS DEC FLOAT(16);
   DCL (I,J,K,M,N,R) FIXED BIN;

   IF ^(LEFT->RH_APL->RH_APL_SCALAR × RIGHT->RH_APL->RH_APL_SCALAR)
     THEN DO; /* CHECK FOR CONFORMABILITY */
       IF LEFT->RH_APL->RH_APL_RANK^=RIGHT->RH_APL->RH_APL_RANK
         THEN DO;
           MSGDATA='ARGUMENTS TO LAMINATE MUST HAVE EQUAL RANK';
           SIGNAL CONDITION(BADAPL);
           END;
       DO I=1 TO LEFT->RH_APL->RH_APL_RANK WHILE(
         LEFT->RH_APL->RH_APL_DIM(I)=RIGHT->RH_APL->RH_APL_DIM(I));
         END;
       IF I<=LEFT->RH_APL->RH_APL_RANK
         THEN DO;
           MSGDATA='ARGUMENTS TO LAMINATE MUST HAVE EQUAL SHAPES';
           SIGNAL CONDITION(BADAPL);
           END;
       END;
   K=MAX(LEFT->RH_APL->RH_APL_RANK,RIGHT->RH_APL->RH_APL_RANK)+1;
   IF AXIS<0 × AXIS>K
     THEN DO;
       MSGDATA='AXIS VALUE TO LAMINATE OUT OF BOUNDS';
       SIGNAL CONDITION(BADAPL);
       END;
   CBP=CREATE_APLCB(K);
   IF LEFT->RH_APL->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE
     THEN DO;
       CBP->RH_APL_TYPE=LEFT->RH_APL->RH_APL_TYPE;
       CBP->RH_APL_ELEN=MAX(LEFT->RH_APL->RH_APL_ELEN,
         RIGHT->RH_APL->RH_APL_ELEN);
       END;
     ELSE DO;
       CBP->RH_APL_TYPE=FLOAT_TYPE;
       CBP->RH_APL_ELEN=8;
       END;
   /* NOW SET NEW DIMENSIONS */
   M=CEIL(AXIS);
   J=0;
   N,R=1; /* N WILL EQUAL #ELS/REC, R WILL EQUAL #RECS */
   DO I=1 TO K;
     IF I=M
       THEN CBP->RH_APL_DIM(I)=2;
       ELSE DO;
         J=J+1;
         CBP->RH_APL_DIM(I)=LEFT->RH_APL->RH_APL_DIM(J);
         END;
     IF I>CBP->RH_APL_DEMARC
       THEN N=N*CBP->RH_APL_DIM(I);
       ELSE R=R*CBP->RH_APL_DIM(I);
     END;
   CBP->RH_APL_RHCOUNT=R;
   CBP->RH_APL_ELCOUNT=N;
   TMP=CREATE_VAR(N*CBP->RH_APL_ELEN,CBP,'');
   TMP->HEXMODE=LEFT->HEXMODE × RIGHT->HEXMODE;
   CALL DO_COMMA_CATENATE_SUB(LEFT,RIGHT,M,TMP,CBP,1);
   RETURN(TMP);
   END DO_COMMA_LAMINATE;

 DO_COMMA_MONADIC: PROC(RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS RAVEL OPERATOR.                                   *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,TMP,RIGHT,RPT) PTR;
   DCL AXIS DEC FLOAT(16);
   DCL (I,ICIX,IMIX,J,OCIX,OMIX) FIXED BIN;
   DCL OTYPE CHAR(8);

   I=EL_CNT(RIGHT->RH_APL); /* COUNT OF ELEMENTS TO RAVEL */
   CBP=CREATE_APLCB(1); /* OUTPUT WILL BE A VECTOR */
   CBP->RH_APL_DIM(1)=I;
   CBP->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE;
   OTYPE=TYPETAB(CBP->RH_APL_TYPE);
   CBP->RH_APL_ELEN=RIGHT->RH_APL->RH_APL_ELEN;
   CBP->RH_APL_RHCOUNT=1;
   CBP->RH_APL_ELCOUNT=I;
   TMP=CREATE_VAR(I*CBP->RH_APL_ELEN,CBP,''); /* OUTPUT DATASET */
   TMP->HEXMODE=RIGHT->HEXMODE;
   IF I>0
     THEN DO;
       RPT=NULL;
       DO J=1 TO I;
         CALL PUT_EL(GET_EL('FORWARD',RIGHT,RPT,ICIX,IMIX),TMP,OCIX,
           OMIX);
         END;
       END;
   RETURN(TMP);
   END DO_COMMA_MONADIC;

 DO_COMPRESS_EXPAND: PROC(OP,LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS COMPRESS AND EXPAND OPERATORS.                    *
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(*);
   DCL (CBP,LEFT,RHT,RIGHT,RPT,TMP) PTR;
   DCL (AXIS,CIX,I,J,K,LCNT,M,MIX,N,OCIX,OMIX,P,Q,R,RCNT)
     FIXED BIN(31,0);
   DCL (LSC,RSC) BIT(1);
   DCL (DFT,NXT,SEL) CHAR(256) VAR;
   DCL ZEROCON CHAR(1) STATIC INIT('0');

   /* FIRST CHECK FOR SCALAR OR 1-ELEMENT VECTORS */
   LCNT=EL_CNT(LEFT->RH_APL);
   RCNT=EL_CNT(RIGHT->RH_APL);
   LSC=LCNT=1 & LEFT->RH_APL->RH_APL_RANK=1;
   RSC=RCNT=1 & RIGHT->RH_APL->RH_APL_RANK=1;
   IF ^LSC
     THEN DO;
       CALL VECTOR_CHECK(LEFT); /* IS LEFT VECTOR OR SCALAR? */
       IF OP='COMPRESS'
         THEN IF LEFT->RH_APL->RH_APL_DIM(1)^=
           RIGHT->RH_APL->RH_APL_DIM(AXIS)
           THEN DO;
             MSGDATA='ARGUMENTS TO COMPRESS ARE NOT CONFORMABLE';
             SIGNAL CONDITION(BADAPL);
             END;
       END;
   J=0;
   IF LCNT>0
     THEN DO;
       RPT=NULL;
       DO I=1 TO LEFT->RH_APL->RH_APL_DIM(1);
         IF GET_SCALAR_SEQ('FORWARD',LEFT,RPT,CIX,MIX)^=0
           THEN J=J+1;
         END;
       END;
   IF OP='EXPAND'
     THEN DO;
       IF J^=RIGHT->RH_APL->RH_APL_DIM(AXIS)
         THEN DO;
           MSGDATA='ARGUMENTS TO COMPRESS ARE NOT CONFORMABLE';
           SIGNAL CONDITION(BADAPL);
           END;
         ELSE J=LEFT->RH_APL->RH_APL_DIM(1);
       IF RIGHT->RH_APL->RH_APL_TYPE=CHAR_TYPE
         THEN DFT=' ';
         ELSE DFT=CONVERT(ADDR(ZEROCON),'CHAR',1,0,
           TYPETAB(RIGHT->RH_APL->RH_APL_TYPE),
           RIGHT->RH_APL->RH_APL_ELEN,0);
       END;
     ELSE IF LSC
       THEN J=J*RIGHT->RH_APL->RH_APL_DIM(AXIS);
   /* J NOW EQUALS NEW AXIS DIMENSION */
   CBP=CREATE_APLCB(RIGHT->RH_APL->RH_APL_RANK);
   CBP->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE;
   CBP->RH_APL_ELEN=RIGHT->RH_APL->RH_APL_ELEN;
   K,M=1; /* K=ELEMENTS/RECORD, M=ELEMENTS BELOW AXIS */
   DO I=1 TO CBP->RH_APL_RANK;
     IF I=AXIS
       THEN CBP->RH_APL_DIM(I)=J;
       ELSE CBP->RH_APL_DIM(I)=RIGHT->RH_APL->RH_APL_DIM(I);
     K=K*CBP->RH_APL_DIM(I);
     IF I>AXIS
       THEN M=M*CBP->RH_APL_DIM(I);
     END;
   CBP->RH_APL_RHCOUNT=1;
   CBP->RH_APL_ELCOUNT=K;
   TMP=CREATE_VAR(K*CBP->RH_APL_ELEN,CBP,'');
   TMP->HEXMODE=RIGHT->HEXMODE;
   P=K; /* NUMBER OF OUTPUT ELEMENTS */
   IF P=0
     THEN RETURN(TMP); /* EMPTY VECTOR, ALL DONE */
   IF RSC
     THEN DO; /* RIGHT SCALAR MUST BE PROPAGATED */
       SEL=GET_EL('FORWARD',RIGHT,NULL,0,0);
       RPT=NULL;
       DO I=1 TO CBP->RH_APL_DIM(1);
         IF OP='EXPAND'
           THEN IF GET_SCALAR_SEQ('FORWARD',LEFT,RPT,CIX,MIX)=0
             THEN NXT=DFT;
             ELSE NXT=SEL;
           ELSE NXT=SEL;
         CALL PUT_EL(NXT,TMP,OCIX,OMIX);
         END;
       END;
     ELSE DO;
       L=RIGHT->RH_APL->RH_APL_RANK;
       ALLOCATE IXW SET(RHT);
       RHT->IXWRHP=RIGHT;
       RHT->IXWROW=MISSING_INTEGER;
       I,J=1;
       RHT->IX(I)=0;
       RPT=NULL;
       Q=0; /* NUMBER OF OUTPUT ELEMENTS PROCESSED */
       DO UNTIL(I=0);
         DO UNTIL(J^=0 × OP='COMPRESS');
           RHT->IX(I)=RHT->IX(I)+1;
           IF I=AXIS & RHT->IX(I)<=RIGHT->RH_APL->RH_APL_DIM(I)
             THEN DO;
               IF LSC
                 THEN J=1;
                 ELSE J=GET_SCALAR_SEQ('FORWARD',LEFT,RPT,CIX,MIX);
               IF OP='EXPAND' & J=0
                 THEN DO UNTIL(J^=0);
                   DO N=1 TO M;
                     CALL PUT_EL(DFT,TMP,OCIX,OMIX);
                     Q=Q+1;
                     END;
                   J=GET_SCALAR_SEQ('FORWARD',LEFT,RPT,CIX,MIX);
                   END;
               END;
           END;
         IF RHT->IX(I)>RIGHT->RH_APL->RH_APL_DIM(I)
           THEN I=I-1;
           ELSE IF I=L
             THEN IF J=1
               THEN DO;
                 CALL PUT_EL(GET_ELEMENT(RHT),TMP,OCIX,OMIX);
                 Q=Q+1;
                 END;
               ELSE;
             ELSE DO;
               I=I+1;
               RHT->IX(I)=0;
               IF I=AXIS
                 THEN RPT=NULL;
               END;
         END;
       IF Q<P
         THEN DO Q=Q+1 TO P;
           CALL PUT_EL(DFT,TMP,OCIX,OMIX);
           END;
       FREE RHT->IXW;
       END;
   RETURN(TMP);
   END DO_COMPRESS_EXPAND;

 DO_REDUCE: PROC(OP,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS REDUCE AND SCAN OPERATORS.
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(5); /* EITHER SLASH OR SLOPE */
   DCL (CBP,RIGHT,TMP) PTR;
   DCL AXIS FIXED BIN(31,0);
   DCL FUNCTION VARIABLE ENTRY(DEC FLOAT(16), DEC FLOAT(16))
     RETURNS(DEC FLOAT(16));
   DCL SEL DEC FLOAT(16);
   DCL IDC CHAR(1);
   DCL OTYPE CHAR(8);
   DCL (I,J,K,N,R) FIXED BIN;

   IF PRIOR_TOKEN=NULL
     THEN DO;
       MSGDATA='INVALID '××OP××' AT BEGINNING OF STATEMENT';
       SIGNAL CONDITION(BADAPL);
       END;
   CURTOK=PRIOR_TOKEN;
   IF TYPE>0 /* NOW GET DYADIC SCALAR FUNCTION ENTRY */
     THEN CALL DO_PRIMITIVE_DYADIC_ENT(SYMBOL_NAMES(TYPE),FUNCTION);
     ELSE CALL DO_PRIMITIVE_DYADIC_ENT('',FUNCTION); /* BADAPL */
   N=EL_CNT(RIGHT->RH_APL); /* NUMBER OF ELEMENTS IN VARIABLE */
   SELECT(N);
     WHEN(0) SEL=DYADIC_SCALAR_IDENTITY(SYMBOL_NAMES(TYPE));
     WHEN(1) SEL=GET_SCALAR_SEQ('FORWARD',RIGHT,NULL,0,0);
     OTHERWISE;
     END; /* SELECT */
   I=RIGHT->RH_APL->RH_APL_RANK;
   IF OP='SLASH'
     THEN I=I-1;
   CBP=CREATE_APLCB(MAX(1,I));
   CBP->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE;
   OTYPE=TYPETAB(CBP->RH_APL_TYPE);
   IF OTYPE='CHAR'
     THEN DO;
       OTYPE='BEST';
       CBP->RH_APL_ELEN=MAX(25,RIGHT->RH_APL->RH_APL_ELEN);
       END;
     ELSE CBP->RH_APL_ELEN=RIGHT->RH_APL->RH_APL_ELEN;
   J,R=1; /* WILL BE # ELEMENTS/RECORD, R=#RECS */
   IF RIGHT->RH_APL->RH_APL_RANK=1 & OP='SLASH'
     THEN DO;
       CBP->RH_APL_SCALAR='1'B;
       CBP->RH_APL_DIM(1)=1;
       END;
     ELSE DO;
       CBP->RH_APL_SCALAR=RIGHT->RH_APL->RH_APL_SCALAR;
       K=0; /* K IS INDEX TO INPUT DIMENSIONS */
       DO I=1 TO CBP->RH_APL_RANK;
         K=K+1;
         IF K=AXIS & OP='SLASH'
           THEN K=K+1;
         CBP->RH_APL_DIM(I)=RIGHT->RH_APL->RH_APL_DIM(K);
         IF I>CBP->RH_APL_DEMARC
           THEN J=J*CBP->RH_APL_DIM(I);
           ELSE R=R*CBP->RH_APL_DIM(I);
         END;
       END;
   CBP->RH_APL_RHCOUNT=R;
   CBP->RH_APL_ELCOUNT=J;
   J=J*CBP->RH_APL_ELEN;
   TMP=CREATE_VAR(J,CBP,''); /* OUTPUT DATASET */
   TMP->HEXMODE=RIGHT->HEXMODE;
   CALL DO_REDUCE_SUB(OP,RIGHT,AXIS,N,CBP,TMP,OTYPE,SEL,FUNCTION);
   RETURN(TMP);
   END DO_REDUCE;

 DO_REDUCE_SUB: PROC(OP,RIGHT,AXIS,N,CBP,TMP,OTYPE,SEL,FUNCTION);
 /**********************************************************************
 *                                                                     *
 * CALLED TO COMPLETE REDUCTION AND SCAN PROCESSING.                   *
 * OP - 'SLASH' OR 'SLOPE'                                             *
 * RIGHT - POINTS TO ARRAY TO REDUCE.                                  *
 * AXIS - DIMENSION OVER WHICH REDUCTION IS TO TAKE PLACE.             *
 * N - # ELEMENTS IN ARRAY POINTED TO BY RIGHT.                        *
 * CBP - POINTER TO APLCB FOR OUTPUT DATASET.                          *
 * TMP - POINTER TO OUTPUT DATASET.                                    *
 * OTYPE - CHARACTER STRING PASSED TO CONVERT ROUTINE INDICATING DATA  *
 *         TYPE OF OUTPUT.                                             *
 * SEL - IF N=1, CONTAINS THE VALUE OF THE SINGLE INPUT ELEMENT.       *
 * FUNCTION - ENTRY TO PERFORM THE SPECIFIED SCALAR DYADIC FUNCTION.   *
 *                                                                     *
 **********************************************************************/
   DCL OP CHAR(5);
   DCL (CBP,RIGHT,TMP,FROMIXW) PTR;
   DCL (AXIS,I,N,OCIX,OMIX) FIXED BIN(31,0);
   DCL FUNCTION VARIABLE ENTRY(DEC FLOAT(16), DEC FLOAT(16))
     RETURNS(DEC FLOAT(16));
   DCL OTYPE CHAR(8);
   DCL (NEXT,SEL) DEC FLOAT(16),
     NEXTDF CHAR(8) BASED(ADDR(NEXT));

   L=RIGHT->RH_APL->RH_APL_RANK;
   ALLOCATE IXW SET(FROMIXW);
   FROMIXW->IXWRHP=RIGHT;
   FROMIXW->IXWROW=MISSING_INTEGER;
   I=0;
   CALL AXIS_INCR;
   IF L=1
     THEN IF OP='SLASH'
       THEN CALL DO_REDUCE_SUB_DO;
       ELSE IF N>0
         THEN DO FROMIXW->IX(1)=1 TO N;
           CALL DO_REDUCE_SUB_DO;
           END;
         ELSE;
     ELSE DO UNTIL(I=0);
       FROMIXW->IX(I)=FROMIXW->IX(I)+1;
       IF FROMIXW->IX(I)=RIGHT->RH_APL->RH_APL_DIM(I)+1
         THEN CALL AXIS_DECR;
         ELSE DO;
           CALL AXIS_INCR;
           IF I>L
             THEN DO;
               CALL DO_REDUCE_SUB_DO;
               CALL AXIS_DECR;
               END;
           END;
       END;
   FREE FROMIXW->IXW;
   I=#CMD('TOP',TMP,RHHDRPT);

   AXIS_DECR: PROC; /* NESTED */
     I=I-1;
     IF I=AXIS & OP='SLASH'
       THEN I=I-1;
     END AXIS_DECR;

   AXIS_INCR: PROC; /* NESTED */
     I=I+1;
     IF I=AXIS & OP='SLASH'
       THEN I=I+1;
     IF I<=L
       THEN FROMIXW->IX(I)=0;
     END AXIS_INCR;

   DO_REDUCE_SUB_DO: PROC; /* NESTED */
     DCL (I,J) FIXED BIN;
     DCL WRK CHAR(256) VAR;

     IF OP='SLOPE'
       THEN J=FROMIXW->IX(AXIS); /* SAVE AXIS VALUE */
     IF N>1
       THEN DO;
         IF OP='SLASH'
           THEN I=RIGHT->RH_APL->RH_APL_DIM(AXIS);
           ELSE I=J; /* IT MUST BE SLOPE */
         DO FROMIXW->IX(AXIS)=I TO 1 BY -1;
           WRK=GET_ELEMENT(FROMIXW);
           NEXTDF=CONVERT(PTROUT(PTRIN(ADDR(WRK))+2),
            TYPETAB(FROMIXW->IXWRHP->RH_APL->RH_APL_TYPE),LENGTH(WRK),0,
            'FLOAT',8,0);
           IF FROMIXW->IX(AXIS)=I
             THEN SEL=NEXT;
             ELSE SEL=FUNCTION(NEXT,SEL);
           END;
         END;
     CALL PUT_EL(
       CONVERT(ADDR(SEL),'FLOAT',8,0,OTYPE,CBP->RH_APL_ELEN,0),
       TMP,OCIX,OMIX);
     IF OP='SLOPE'
       THEN FROMIXW->IX(AXIS)=J; /* RESTORE AXIS VALUE */
     END DO_REDUCE_SUB_DO;

   END DO_REDUCE_SUB;

 DO_REVERSE: PROC(RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS REVERSE OPERATOR.                                 *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,RIGHT,TMP,W) PTR;
   DCL AXIS FIXED BIN(31,0);
   DCL (I,J,K,N,OCIX,OMIX,R) FIXED BIN;

   CBP=CREATE_APLCB(RIGHT->RH_APL->RH_APL_RANK);
   CBP->RH_APL_TYPE=RIGHT->RH_APL->RH_APL_TYPE;
   CBP->RH_APL_ELEN=RIGHT->RH_APL->RH_APL_ELEN;
   CBP->RH_APL_SCALAR=RIGHT->RH_APL->RH_APL_SCALAR;
   J,R=1; /* WILL BE # ELEMENTS/RECORD, R=#RECS */
   DO I=1 TO CBP->RH_APL_RANK;
     CBP->RH_APL_DIM(I)=RIGHT->RH_APL->RH_APL_DIM(I);
     IF I>CBP->RH_APL_DEMARC
       THEN J=J*CBP->RH_APL_DIM(I);
     END;
   CBP->RH_APL_RHCOUNT=R;
   CBP->RH_APL_ELCOUNT=J;
   J=J*CBP->RH_APL_ELEN;
   TMP=CREATE_VAR(J,CBP,''); /* OUTPUT DATASET */
   TMP->HEXMODE=RIGHT->HEXMODE;
   IF J>0
     THEN DO; /* PROCESS ONLY NONEMPTY DATASET */
       L=RIGHT->RH_APL->RH_APL_RANK;
       ALLOCATE IXW SET(W);
       W->IXWRHP=RIGHT;
       W->IXWROW=MISSING_INTEGER;
       N=EL_CNT(RIGHT->RH_APL); /* NUMBER OF ELEMENTS IN VARIABLE */
       DO I=1 TO N;
         CALL GET_ELEMENT_AXIS(W,AXIS,-1,RIGHT->RH_APL->RH_APL_RANK,1);
         CALL PUT_EL(GET_ELEMENT(W),TMP,OCIX,OMIX);
         END;
       FREE W->IXW;
       END;
   RETURN(TMP);
   END DO_REVERSE;

 DO_ROTATE: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS DYADIC ROTATE OPERATION.                          *
 *                                                                     *
 **********************************************************************/
   DCL (CBP,LEFT,LFT,RIGHT,TMP,RHT) PTR;
   DCL (AXIS,I,J,K,LCNT,M,OCIX,OMIX,P,R,RCNT,S) FIXED BIN(31,0),
     RCH CHAR(4) BASED(ADDR(R));
   DCL STR CHAR(256) VAR;

   LCNT=EL_CNT(LEFT->RH_APL);
   IF LCNT^=1
     THEN DO;
       IF RIGHT->RH_APL->RH_APL_RANK-LEFT->RH_APL->RH_APL_RANK^=1
         THEN DO;
           MSGDATA='ARGUMENTS TO ROTATE ARE INCOMPATIBLE';
           SIGNAL CONDITION(BADAPL);
           END;
       J=0; /* J WILL BE INDEX TO DIMENSIONS OF RIGHT ARG */
       DO I=1 TO LEFT->RH_APL->RH_APL_RANK;
         J=J+1;
         IF J=AXIS
           THEN J=J+1;
         IF LEFT->RH_APL->RH_APL_DIM(I)^=RIGHT->RH_APL->RH_APL_DIM(J)
           THEN DO;
             MSGDATA='ARGUMENTS TO ROTATE ARE INCOMPATIBLE';
             SIGNAL CONDITION(BADAPL);
             END;
         END;
       END;
   CBP=COPY_RH_APL(RIGHT->RH_APL); /* COPY APLCB */
   TMP=CREATE_VAR(RIGHT->BUFPTR->BUFLN,CBP,'');
   TMP->HEXMODE=RIGHT->HEXMODE;
   RCNT=EL_CNT(RIGHT->RH_APL);
   IF RCNT<2
     THEN RETURN(TMP); /* ROTATE COMPLETE IF 0 OR 1 ELEMENTS */
   L=RIGHT->RH_APL->RH_APL_RANK;
   ALLOCATE IXW SET(RHT);
   RHT->IXWRHP=RIGHT;
   RHT->IXWROW=MISSING_INTEGER;
   IF LCNT=1
     THEN DO;
       LFT=NULL;
       R=GET_SCALAR_SEQ('FORWARD',LEFT,NULL,0,0);
       END;
     ELSE DO;
       L=LEFT->RH_APL->RH_APL_RANK;
       ALLOCATE IXW SET(LFT);
       LFT->IXWRHP=LEFT;
       LFT->IXWROW=MISSING_INTEGER;
       END;
   J=CBP->RH_APL_RANK; /* AXIS/QDIM VALUE */
   DO I=1 TO RCNT; /* ONE ITERATION PER OUTPUT ELEMENT */
     CALL GET_ELEMENT_AXIS(RHT,J,1,J,1); /* INDEX NEXT OUT EL */
     IF LCNT^=1
       THEN DO;
         M=0;
         DO K=1 TO LFT->IXL;
           M=M+1;
           IF M=AXIS
             THEN M=M+1;
           LFT->IX(K)=RHT->IX(M);
           END;
         STR=GET_ELEMENT(LFT); /* R = AMOUNT TO ROTATE THIS VECTOR */
         RCH=CONVERT(PTROUT(PTRIN(ADDR(STR))+2),
          TYPETAB(LFT->IXWRHP->RH_APL->RH_APL_TYPE),LENGTH(STR),0,
          'FIXED',4,0);
         END;
     S=RHT->IX(AXIS); /* SAVE AXIS VALUE */
     RHT->IX(AXIS)=MOD(RHT->IX(AXIS)+R-1,CBP->RH_APL_DIM(AXIS))+1;
     CALL PUT_EL(GET_ELEMENT(RHT),TMP,OCIX,OMIX);
     RHT->IX(AXIS)=S; /* RESTORE AXIS VALUE */
     END;
   IF LFT^=NULL
     THEN FREE LFT->IXW;
   FREE RHT->IXW;
   RETURN(TMP);
   END DO_ROTATE;

 DO_SLASH: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS SLASH OPERATOR.                                   *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT,RIGHT) PTR;
   DCL AXIS DEC FLOAT(16);

   IF LEFT=NULL
     THEN RETURN(DO_REDUCE('SLASH',RIGHT,AXIS));
     ELSE RETURN(DO_COMPRESS_EXPAND('COMPRESS',LEFT,RIGHT,AXIS));
   END DO_SLASH;

 DO_SLOPE: PROC(LEFT,RIGHT,AXIS) RETURNS(PTR);
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS SLOPE OPERATOR.                                   *
 *                                                                     *
 **********************************************************************/
   DCL (LEFT,RIGHT) PTR;
   DCL AXIS DEC FLOAT(16);

   IF LEFT=NULL
     THEN RETURN(DO_REDUCE('SLOPE',RIGHT,AXIS));
     ELSE RETURN(DO_COMPRESS_EXPAND('EXPAND',LEFT,RIGHT,AXIS));
   END DO_SLOPE;

 DYADIC_SCALAR_IDENTITY_REAL: PROC(FUNCTION_NAME)
   RETURNS(DEC FLOAT(16));
 /**********************************************************************
 *                                                                     *
 * CALLED TO PROCESS SLOPE OPERATOR.                                   *
 *                                                                     *
 **********************************************************************/
   DCL FUNCTION_NAME CHAR(*);
   DCL RET DEC FLOAT(16);

   SELECT(FUNCTION_NAME);
     WHEN('PLUS')        RET=0;
     WHEN('BAR')         RET=0;
     WHEN('TIMES')       RET=1;
     WHEN('DIVIDE')      RET=1;
     WHEN('STILE')       RET=0;
     WHEN('DOWNSTILE')   UNSPEC(RET)=REPEAT('1'B,63); /*BIG MINUS */
     WHEN('UPSTILE')     UNSPEC(RET)='0'B××REPEAT('1'B,62); /*BIG*/
     WHEN('STAR')        RET=1;
     WHEN('QUOTE DOT')   RET=1;
     WHEN('AND')         RET=1;
     WHEN('OR')          RET=0;
     WHEN('LESS')        RET=0;
     WHEN('NOT GREATER') RET=1;
     WHEN('EQUAL')       RET=1;
     WHEN('NOT LESS')    RET=1;
     WHEN('GREATER')     RET=0;
     WHEN('NOT EQUAL')   RET=0;
     OTHERWISE DO;
       MSGDATA='DOMAIN ERROR';
       SIGNAL CONDITION(BADAPL);
       END;
     END; /* SELECT */
   RETURN(RET);
   END DYADIC_SCALAR_IDENTITY_REAL;

 MAIN_LOOP_REAL: PROC(PAREN_COUNT) RECURSIVE;
 /**********************************************************************
 *                                                                     *
 * THIS IS THE MAIN LOOP USED TO EVALUATE AN APL STATEMENT.            *
 *                                                                     *
 **********************************************************************/
   DCL PAREN_COUNT FIXED BIN;
   DCL SOC FIXED BIN;

   SOC=OPERAND_COUNT; /* SAVE OPERAND COUNT */
   DO CURTOK=CURTOK REPEAT PRIOR_TOKEN
     WHILE(CURTOK^=NULL) UNTIL(CURTOK=NULL);
     SELECT;
       WHEN(TYPE>0) SELECT(SYMBOL_NAMES(TYPE));
         WHEN('PLUS','BAR','TIMES','DIVIDE','STILE','DOWNSTILE',
           'UPSTILE','QUERY','STAR','LOG','CIRCLE','QUOTE DOT','TILDE',
           'AND','OR','NAND','NOR','LESS','NOT GREATER','EQUAL',
           'NOT LESS','GREATER','NOT EQUAL')
           CALL DO_PRIMITIVE(SYMBOL_NAMES(TYPE));
         WHEN('ACCENT BASE') CALL DO_ACCENT_BASE;
         WHEN('ACCENT RHO') CALL DO_ACCENT_RHO;
         WHEN('BASE') CALL DO_BASE;
         WHEN('BASE NULL') CALL DO_BASE_NULL;
         WHEN('CIRCLE BAR') CALL DO_AXIS_DEFAULT('FIRST');
         WHEN('CIRCLE SLOPE') CALL DO_TRANSPOSE;
         WHEN('CIRCLE STILE') CALL DO_AXIS_DEFAULT('LAST');
         WHEN('COMMA') CALL DO_AXIS_DEFAULT('LAST');
         WHEN('DEL STILE') CALL DO_GRADE('GRADE DOWN');
         WHEN('DELTA STILE') CALL DO_GRADE('GRADE UP');
         WHEN('DOMINO') CALL DO_DOMINO;
         WHEN('DOWN ARROW') CALL TAKE_DROP_COMMON('DROP');
         WHEN('EPSILON') CALL DO_MEMBERSHIP;
         WHEN('IOTA') CALL DO_IOTA;
         WHEN('LEFT ARROW') CALL DO_ASSIGNMENT;
         WHEN('LEFT BRACKET') RETURN;
         WHEN('LEFT PAREN') RETURN;
         WHEN('RHO') CALL DO_RHO;
         WHEN('RIGHT BRACKET') CALL DO_BRACKET;
         WHEN('RIGHT PAREN') DO;
           CURTOK=PRIOR_TOKEN;
           CALL MAIN_LOOP(PAREN_COUNT+1);
           CALL PAREN_CHECK;
           END;
         WHEN('SEMICOLON') RETURN;
         WHEN('SLASH') CALL DO_AXIS_DEFAULT('LAST');
         WHEN('SLASH BAR') CALL DO_AXIS_DEFAULT('FIRST');
         WHEN('SLOPE') CALL DO_AXIS_DEFAULT('LAST');
         WHEN('SLOPE BAR') CALL DO_AXIS_DEFAULT('FIRST');
         WHEN('UP ARROW') CALL TAKE_DROP_COMMON('TAKE');
         WHEN('TOP') CALL DO_TOP;
         WHEN('TOP NULL') CALL DO_TOP_NULL;
         OTHERWISE DO;
           MSGDATA=SYMBOL_NAMES(TYPE)××' OPERATOR NOT YET IMPLEMENTED';
           SIGNAL CONDITION(BADAPL);
           END;
         END;
       WHEN(TYPE=NUMERIC_CONSTANT) CALL DO_CONSTANT_OPERAND;
       WHEN(TYPE=OPERAND) CALL DO_OPERAND;
       WHEN(TYPE=QUOTED_STRING) CALL DO_LITERAL_OPERAND;
       OTHERWISE DO;
         MSGDATA='INVALID SYNTAX='××TOKSTR;
         CALL CLEANUP;
         RHRC=8;
         RETURN;
         END;
       END; /* SELECT */
     END;
   IF PAREN_COUNT^=0
     THEN DO;
       MSGDATA='UNMATCHED PARENTHESES';
       RHRC=8;
       SIGNAL CONDITION(BADAPL);
       END;
   END MAIN_LOOP_REAL;

   END ABE061C;
