 /* COPYRIGHT 1988 BY THOMAS GLEN SMITH */
 /**********************************************************************
 * ABESYMC - ALIAS #SYMC,#SYMCL, #SYMC_CLIST, AND #SYMCL_CLIST         *
 * CALLED TO OBTAIN THE CHARACTER VALUE OF A SYMBOLIC VARIABLE.        *
 * PARAMETERS ARE -                                                    *
 *   RHHDRPT - ABE CVT.                                                *
 *   TREEHDR - HEAD OF TREE.  NORMALLY POINTS TO RH_SYMTREE.           *
 *   SYMBOL - NAME OF SYMBOLIC VARIABLE.                               *
 **********************************************************************/
   %INCLUDE ABESUB;
 ABESUB(ABESYMC) PARMS(RHHDRPT,TREEHDR,SYMBOL) RETURNS(CHAR(256) VAR)
   CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABESREC;
   DCL 1 RHNAMESTR BASED(RHNAMPTR),
   %INCLUDE ABERHN;
   % INCLUDE IKJECT;
   % INCLUDE IKJPSCB;
   % INCLUDE IKJUPT;
   % INCLUDE @CVT;

   DCL SYMBOL CHAR(8);
   DCL X DEC FLOAT(16);
   DCL TREEHDR PTR;

   DCL (DATE,TIME) BUILTIN;
   DCL (PREFIX,SUFFIX) ENTRY RETURNS(FIXED BIN(15,0));
   DCL ABESETN ENTRY(PTR,PTR,PTR,CHAR(*) VAR) RETURNS(PTR);

   DCL 1 JCT BASED(JCTPTR),
     2 PAD CHAR(56),
     2 ACTP BIT(24);
   DCL 1 ACT BASED(ACTPTR),
     2 PAD1 CHAR(24),
     2 NAME CHAR(20),
     2 PAD2 CHAR(3),
     2 FLDCNT BIT(8),
     2 LEN BIT(8),
     2 ACCOUNT CHAR(200);
   DCL DUMPTR PTR,
       DUMADJ FIXED BIN(31,0) DEF DUMPTR;
   DCL (P,Q) PTR;
   DCL VALUE CHAR(256) VAR;
   DCL TXT CHAR(256) VAR;
   DCL DTSTR CHAR(8);
   DCL PRMPT CHAR(80) VAR STATIC INIT('INPUT:');
   DCL (IN,OUT) PTR;
   DCL STR CHAR(8) BASED(STRPTR);
   DCL CCC CHAR(256) VAR;

   RETURN(SUBRTNE(SYMBOL));

 SUBRTNE: PROC(SYMBOL) RETURNS(CHAR(256) VAR);
   DCL TXT CHAR(256) VAR;
   DCL SYMBOL CHAR(8);
   IF SYMBOL='LASTCC'
     THEN DO;
       I=RHECT->ECTRTCD;
       TXT=I;
       RETURN(TXT);
       END;
   IF SYMBOL='INPUT'
     THEN DO;
       TXT = #PROMPTL(PRMPT); /* GO GET LOWERCASE INPUT */
       CALL #SETC(RHHDRPT,TREEHDR,SYMBOL,TXT);
       RETURN(TXT);
       END;
   IF SYMBOL='INPUTC'
     THEN DO;
       TXT = #PROMPT(PRMPT);
       CALL #SETC(RHHDRPT,TREEHDR,SYMBOL,TXT);
       RETURN(TXT);
       END;
   IF SUBSTR(SYMBOL,1,3)='SYS'
     THEN SELECT(SYMBOL);
       WHEN('SYSACCT') DO;
         JCTPTR=@CVT(0,0,1,45,65);
         DUMADJ=BIN(ACTP);
         ACTPTR=DUMPTR;
         I=BIN(LEN);
         RETURN(SUBSTR(ACCOUNT,1,I));
         END;
       WHEN('SYSATTN') DO;
         CALL #ABEATN; /* GO UPDATE RH_ATNCNT, MAYBE */
         TXT=#BARENUM(RH_ATNCNT);
         RH_ATNCNT=0;
         RETURN(TXT);
         END;
       WHEN('SYSDATE') DO;
         DTSTR=DATE;
         RETURN(SUBSTR(DTSTR,3,4)××SUBSTR(DTSTR,1,2));
         END;
       WHEN('SYSDATF') DO;
         DTSTR=DATE;
         RETURN(SUBSTR(DTSTR,3,2)××'/'××SUBSTR(DTSTR,5,2)××'/'××
           SUBSTR(DTSTR,1,2));
         END;
       WHEN('SYSNAME') DO;
         JCTPTR=@CVT(0,0,1,45,65);
         DUMADJ=BIN(ACTP);
         ACTPTR=DUMPTR;
         RETURN(SUBSTR(NAME,1,SUFFIX(NAME,' ')));
         END;
       WHEN('SYSPREF') DO;
         I = RHUPT->UPTPREFL;
         TXT=SUBSTR(RHUPT->UPTPREFX,1,I);
         IF TXT=''
           THEN DO;
             DO I = 1 TO 7 WHILE(SUBSTR(RHPSCB->PSCBUSER,I,1) ^= ' ');
               END;
             TXT=SUBSTR(RHPSCB->PSCBUSER,1,I-1);
             END;
         RETURN(TXT);
         END;
       WHEN('SYSTIME') DO;
         TXT = TIME;
         TXT=SUBSTR(TXT,1,2)××':'××SUBSTR(TXT,3,2)××':'××
           SUBSTR(TXT,5,2);
         RETURN(TXT);
         END;
       WHEN('SYSUID')  DO;
         DO I = 1 TO 7 WHILE(SUBSTR(RHPSCB->PSCBUSER,I,1) ^= ' ');
           END;
         RETURN(SUBSTR(RHPSCB->PSCBUSER,1,I-1));
         END;
       WHEN('SYSUNQ') DO;
         TXT=#BARENUM(RHUNQNO);
         RHUNQNO=RHUNQNO+1;
         RETURN(TXT);
         END;
       OTHERWISE;
       END; /* SELECT */
   P=#SRCH(TREEHDR,SYMBOL,Q);
   IF P=NULL
     THEN TXT='';
     ELSE IF P->SRTYPE=2 × P->SRTYPE=3
       THEN TXT=SUBSTR(P->SRCH,1,P->SRCURL);
       ELSE DO;
         CCC=ADDR(P->SRFL)->STR;
         ALLOC RHNAMESTR SET(IN);
         IN->RHNTYPE=1; /* FLOAT */
         IN->RHNPOS=1;
         IN->RHNLNG=8;
         IN->RHNFD=0;
         ALLOC RHNAMESTR SET(OUT);
         OUT->RHNTYPE=8; /* BEST */
         OUT->RHNPOS=1;
         OUT->RHNLNG=200;
         OUT->RHNFD=0;
         TXT=#CONVERT(CCC,IN,OUT);
         IF TXT^=''
           THEN DO;
             TXT=SUBSTR(TXT,PREFIX(TXT,' '));
             TXT=SUBSTR(TXT,1,SUFFIX(TXT,' '));
             END;
         FREE IN->RHNAMESTR;
         FREE OUT->RHNAMESTR;
         P->SRTYPE=3;
         IF LENGTH(TXT)>P->SRMAXL
           THEN P=ABESETN(RHHDRPT,P,Q,TXT); /* BIGGER ELEMENT */
           ELSE DO;
             P->SRCH=TXT;
             P->SRCURL=LENGTH(TXT);
             END;
         END;
   RETURN(TXT);
   END SUBRTNE;

 ABESYCL: ENTRY (RHHDRPT,TREEHDR,SYMBOL,PARMTXT);
   /* ALIAS #SYMCL */
   DCL PARMTXT CHAR(*) VAR;
   /* ENTRY FOR UNSPECIFIED STRING LENGTH*/
   PARMTXT=SUBRTNE(SYMBOL);
   RETURN;

 ABESYCP: ENTRY (RHHDRPT,TREEHDR,SYMBOL,PARMTXT);
   /* ALIAS #SYMCL_CLIST */
   PARMTXT=#ABESYP(SYMBOL);
   RETURN;

 ABESYMZ: ENTRY (RHHDRPT,TREEHDR,SYMBOL) RETURNS(CHAR(256) VAR);
   /* ALIAS #SYMC_CLIST - ENTRY FOR CLIST PROCESSING */
   TXT=#ABESYP(SYMBOL);
   RETURN(TXT);

   END ABESYMC;
