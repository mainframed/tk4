 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT057 - SNO */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME = 'RENT';
   % @RENTNAME = 'DENT057';
   % INCLUDE DENTSUBA;
   DCL (SCANNER,SETCAPS) ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)
     RETURNS(FIXED BIN(15,0));
   DCL SNOBOL ENTRY(CHAR(*) VAR,CHAR(*) VAR,CHAR(80) VAR,ENTRY,ENTRY,
     CHAR(*) VAR,CHAR(*) VAR,CHAR(*) VAR,CHAR(*) VAR,PTR,
     FIXED BIN(15,0))
     RETURNS(BIT(1));
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0);
   DCL 1 TOKEN BASED(CURTOK),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(15,0),
     2 SUBTYPE FIXED BIN(15,0),
     2 TOKSTR CHAR(256) VAR;
   DCL KEYWORDS(7) CHAR(8) VAR STATIC
     INIT('RESCAN','ANCHOR','FIND','TRIM','PAD','ALL','STACK');
   DCL OPERATORS(1) CHAR(1) VAR STATIC INIT(';');
   DCL SPCHARS CHAR(2) VAR STATIC INIT('()');
   DCL STMT CHAR(256) VAR;
   DCL (RESCANKEY,ANCHORKEY,ALLKEY) CHAR(10) VAR INIT('');
   DCL (FINDSW,REPSW,MATCH,TRIMSW,PADSW,STACKSW) BIT(1) INIT('0'B);
   DCL (MYRHP,ORGPTR,SAVPTR) PTR;
   DCL CURSOR FIXED BIN(15,0);
   DCL MSG CHAR(80) VAR INIT('');
   DCL OPERAND FIXED BIN(15,0)        STATIC INIT(0);
   DCL KEYWORD FIXED BIN(15,0)        STATIC INIT(2);
   DCL QUOTED_STRING FIXED BIN(15,0)  STATIC INIT(4);
   DCL NO_MORE_TOKENS FIXED BIN(15,0) STATIC INIT(6);
   DCL PATPTR PTR;
   DCL SEQPIC PIC 'ZZZZZZZ9';
   PATPTR=NULL;
   RHRC=0;
   TOKHDR,CURTOK=NULL;
   SCANIX=1;
   CALL SETCAPS(CMDDATA);
   CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
     /* GET COMMAND NAME */
   IF TYPE=NO_MORE_TOKENS
     THEN RETURN;
   I=SCANIX;
   CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
     /* GET FIRST OPERAND */
   IF (TYPE=OPERAND × TYPE=KEYWORD) & TOKSTR='ALL'
     THEN DO;
       L1=0;
       L2=99999999;
       I=SCANIX;
       CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
       END;
     ELSE DO;
       IF TYPE=NO_MORE_TOKENS
         THEN RETURN;
       IF VERIFY(TOKSTR,'0123456789')=0
         THEN DO;
           L1=TOKSTR;
           I=SCANIX;
           CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
           END;
         ELSE DO;
           L1=MARKGET(TOKSTR);
           IF L1>=0
             THEN DO;
               I=SCANIX;
               CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,
                 SPCHARS);
               END;
             ELSE DO;
               L1=0;
               L2=99999999;
               END;
           END;
       IF VERIFY(TOKSTR,'0123456789')=0
         THEN DO;
           L2=TOKSTR;
           I=SCANIX;
           CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
           IF TYPE=NO_MORE_TOKENS
             THEN RETURN;
           END;
         ELSE DO;
           L2=MARKGET(TOKSTR);
           IF L2>=0
             THEN DO;
               I=SCANIX;
               CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,
                 SPCHARS);
               END;
             ELSE L2=L1;
           END;
       END;
   IF TYPE=NO_MORE_TOKENS
     THEN RETURN;
   DO WHILE(TYPE=KEYWORD);
     SELECT(TOKSTR);
       WHEN('ANCHOR') ANCHORKEY=TOKSTR;
       WHEN('RESCAN') RESCANKEY=TOKSTR;
       WHEN('FIND') FINDSW='1'B;
       WHEN('TRIM') TRIMSW='1'B;
       WHEN('PAD') PADSW='1'B;
       WHEN('ALL') ALLKEY='ALL';
       WHEN('STACK') STACKSW='1'B;
       OTHERWISE;
       END; /* SELECT */
     I=SCANIX;
     CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
     END;
   IF TYPE^=QUOTED_STRING & TOKSTR=':'
     THEN DO;
       I=SCANIX;
       CALL SCANNER(CMDDATA,SCANPARM,OPERATORS,KEYWORDS,SPCHARS);
       END;
   IF I>LENGTH(CMDDATA)
     THEN RETURN; /* NO STMT TO PROCESS */
   STMT=SUBSTR(CMDDATA,I);
   MYRHP=RHPTR;
   IF FINDSW
     THEN DO;  /* IT IS FINDALL */
       IF NXTHDR=HDPTR
         THEN DO;
           RHRC = 4;
           RETURN;
           END;
       L = MAXLEN(NXTHDR->RECSTR);
       CALL NEWFILE;
       FREE BUFSTR;
       ALLOCATE BUFSTR;
       END;
   RHRC=4;
   ORGPTR=MYRHP->RECPTR;
   CALL #MD(MYRHP,SUBENT,L1);
   DO SAVPTR=MYRHP->RECPTR REPEAT SAVPTR->NXTPTR WHILE(SAVPTR^=MYRHP);
     IF SAVPTR->RECSEQ>L2
       THEN LEAVE;
     SEQPIC=SAVPTR->RECSEQ;
     CALL PUT_OPERAND_CHAR('SEQ',SUBSTR(SEQPIC,PREFIX(SEQPIC,' ')));
     BUF=SAVPTR->RECSTR;
     IF TRIMSW & LENGTH(BUF)>0
       THEN BUF=SUBSTR(BUF,1,
         SUFFIX(BUF,' '));
     IF PADSW
       THEN BUF=BUF××' ';
     CURSOR=1;
     MATCH=SNOBOL(BUF,STMT,MSG,GET_OPERAND_CHAR,
       PUT_OPERAND_CHAR,RESCANKEY,ANCHORKEY,'',ALLKEY,PATPTR,CURSOR);
     IF MSG^=''
       THEN LEAVE;
     IF MATCH
       THEN DO;
         REPSW=MATCH;
         IF FINDSW
           THEN DO;
             SEQ=SAVPTR->RECSEQ;
             CALL #ADD(RHPTR,SUBENT,RECPTR,RECPTR,SEQ,BUF,
               RHPPTR);
             END;
           ELSE IF STACKSW
             THEN CALL DOSTACK;
             ELSE SAVPTR->RECSTR=BUF;
         END;
     END;
   I=SNOBOL('','','',GET_OPERAND_CHAR,PUT_OPERAND_CHAR,'','','FREEONLY',
     '',PATPTR,CURSOR);
   IF MSG^=''
     THEN DO;
       MSGDATA=MSG;
       RHRC=16;
       END;
     ELSE IF ^REPSW
       THEN IF MSGDATA=''
         THEN MSGDATA='TEXT NOT FOUND';
         ELSE;
       ELSE DO;
         MYRHP->SAVEFLAG='1'B;
         RHRC=0;
         END;
   CALL #NC(MYRHP,SUBENT,ORGPTR); /* RESTORE CURRENT LINE */
   IF FINDSW
     THEN DO;
       HEXMODE=MYRHP->HEXMODE;
       RHTRANSW=MYRHP->RHTRANSW;
       LOFLAG=MYRHP->LOFLAG;
       SAVEFLAG='0'B;
       IF NXTHDR^=NULL
         THEN CALL #NC(RHPTR,SUBENT,NXTHDR); /* POINT TO TOP */
       END;

 DOSTACK: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED ON A MATCH IF THE STACK KEYWORD WAS SPECIFIED.               *
 *                                                                     *
 **********************************************************************/
   DCL 1 BLSTR BASED(BLPTR),
     2 NBLPTR PTR,
     2 BLCMDLEN FIXED BIN(15,0),
     2 BLCMD CHAR(M REFER(BLCMDLEN)) VAR;
   DCL M FIXED BIN(15,0);
   M=LENGTH(BUF);
   ALLOCATE BLSTR;
   BLCMD=BUF;
   NBLPTR=BLHDR;
   BLHDR=BLPTR;
   END DOSTACK;

 MARKGET: PROC(STR) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 *                                                                     *
 * CALLED TO TEST STR FOR A MARK ARRAY REFERENCE.                      *
 *                                                                     *
 **********************************************************************/
   DCL STR CHAR(*) VAR;
   DCL I FIXED BIN(15,0);
   IF LENGTH(STR)^=2
     THEN RETURN(-1);
   IF SUBSTR(STR,1,1)^='M'
     THEN RETURN(-1);
   IF VERIFY(SUBSTR(STR,2,1),'123456')^=0
     THEN RETURN(-1);
   RETURN(MARKARY(SUBSTR(STR,2,1)));
   END MARKGET;

 NEWFILE: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED TO ALLOCATE A NEW VIRTUAL DATA SET FOR A FINDALL OPERATION.  *
 *                                                                     *
 **********************************************************************/
   DCL PARPTR PTR;
   DCL 1 PARSTR UNALIGNED,
     2 PARIX FIXED BIN(15,0),
     2 PAROCK BIT(16),
     2 PARQCK BIT(16),
     2 PARY(16) CHAR(256) VAR;
   DCL CMDINDX FIXED BIN(15,0) INIT(1);
   PARPTR=ADDR(PARSTR);
   PARY(*)='';
   PARY(4)='SUBCALL';
   IF LOFLAG
     THEN PARY(5) = 'LOCASE';
   CALL #DENT(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT);
   END NEWFILE;

 GET_OPERAND_CHAR: PROC(PRM) RETURNS(CHAR(256) VAR);
   DCL PRM CHAR(*) VAR;
   RETURN(#SYMC('&'××PRM));
   END;

 PUT_OPERAND_CHAR: PROC(PRM,DAT);
   DCL (PRM,DAT) CHAR(*) VAR;
   CALL #SET('0'B,'&'××PRM,DAT);
   END;

   END DENT057;
