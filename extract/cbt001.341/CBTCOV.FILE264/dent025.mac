 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
   /* DENT025,SPFF,SPFC */
   % DCL @PROCNAME CHAR;
   % DCL @RENTNAME CHAR;
   % @PROCNAME ='RENT';
   % @RENTNAME ='DENT025';
   % INCLUDE DENTSUB;
   DCL SETCAPS ENTRY;
   DCL KEYTABLE(30) CHAR(10) VAR STATIC INIT(
     'NEXT',     /*  1 */
     'ALL',      /*  2 */
     'FIRST',    /*  3 */
     'LAST',     /*  4 */
     'PREV',     /*  5 */
     'CHARS',    /*  6 */
     'PREFIX',   /*  7 */
     'SUFFIX',   /*  8 */
     'WORD',     /*  9 */
     'X',        /* 10 */
     'NX',       /* 11 */
     'NOT',      /* 12 */
     'COL',      /* 13 */
     'ENDCOL',   /* 14 */
     'NAME',     /* 15 */
     'MASK',     /* 16 */
     'OPER',     /* 17 */
     'STCOL',    /* 18 */
     'HEX',      /* 19 */
     'TEXT',     /* 20 */
     'PICTURE',  /* 21 */
     'ANY',      /* 22 */
     'SUPPRESS', /* 23 */
     'RESET',    /* 24 */
     'NOSHIFT',  /* 25 */
     'SETRC',    /* 26 */
     'MARK',     /* 27 */
     'MK',       /* 28 */
     'BOUNDS',   /* 29 */
     'BNDS');    /* 30 */
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL KEYLAB(0:30) LABEL;
   DCL REL CHAR(2) VAR INIT('');
   DCL MARKIX FIXED BIN(15,0) INIT(0);
   DCL OCC FIXED BIN(31,0) INIT(1);
   DCL (TEXTSW,PICSW,MASKSW,ENDCOLSW,ANYSW,SUSW,RESW,NOSHSW,SETRCSW)
     BIT(1) INIT('0'B);
   DCL MASKCH CHAR(1) INIT('.');
   DCL MYNAME CHAR(8) INIT('');
   DCL (VER,REP,ANYSTR) CHAR(80) VAR INIT('');
   DCL (MYHD,S,SAVPTR,ORGPTR) PTR;
   DCL TRIN ENTRY;
   DCL MAXLEN ENTRY(CHAR(*) VAR)RETURNS(FIXED BIN(15,0));
   DCL BINDEX ENTRY(CHAR(*) VAR, CHAR(*) VAR, CHAR(*) VAR,FIXED BIN(15,
   0)) RETURNS(FIXED BIN(15,0));
   DCL (CSW,NOT) BIT(1);
   DCL GBLSW BIT(1) STATIC INIT('0'B);
   DCL SYMBOLPM CHAR(8);
   DCL SETTXT CHAR(256) VAR;
   SAVPTR=RHPTR;
   RHRC=0;
   CSW ='0'B;
   NOT ='0'B; /* DEFAULT */
   ENDCOL = 9999; /* DEFAULT */
   COL = 1; /* DEFAULT */
   X = 0; /* DEFAULT IS ALL LINES */
   CHARS = 1; /* DEFAULT IS 1 */
   NEXT = 1; /* DEFAULT IS 1 */
   VER = PARY(2);
   IF CMDINDX = 3 /* IS IT SPFC? */
     THEN DO;
       IF LENGTH(PARY(2))=0
         THEN DO;
           CMDDATA=RHSPFCLST;
           RHRC=0;
           RETURN;
           END;
       RHSPFCLST=LASTCMD;
       I = 4;
       REP = PARY(3);
       ORGPTR=RECPTR;
       END;
     ELSE DO;
       IF LENGTH(PARY(2))=0
         THEN DO;
           CMDDATA=RHSPFFLST;
           RHRC=0;
           RETURN;
           END;
       RHSPFFLST=LASTCMD;
       I = 3;
       END;
   DO I = I TO 16 WHILE(PARY(I) ^='');
     CALL SETCAPS(PARY(I));
     CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX); /* CALL SPARS */
     GO TO KEYLAB(INDX);
    KEYLAB(0): /* INVALID OPERAND */
     MSGDATA='INVALID OPERAND';
     RHRC = 8;
     RETURN;
    KEYLAB(1): /* NEXT  */
    KEYLAB(2): /* ALL   */
    KEYLAB(3): /* FIRST */
    KEYLAB(4): /* LAST  */
    KEYLAB(5): /* PREV  */
     NEXT = INDX;
     IF OPER^=''
       THEN OCC=OPER;
     GO TO ENDCASE;
    KEYLAB(6): /* CHARS  */
    KEYLAB(7): /* PREFIX */
    KEYLAB(8): /* SUFFIX */
    KEYLAB(9): /* WORD   */
     CHARS=INDX-5;
     GO TO ENDCASE;
    KEYLAB(10): /* X */
    KEYLAB(11): /* NX */
     X=INDX-9;
     GO TO ENDCASE;
    KEYLAB(12): /* NOT */
     NOT ='1'B;
     GO TO ENDCASE;
    KEYLAB(13): /* COL */
     COL = OPER;
     GO TO ENDCASE;
    KEYLAB(14): /* ENDCOL */
     ENDCOLSW='1'B;
     ENDCOL = OPER;
     GO TO ENDCASE;
    KEYLAB(15): /* NAME */
     MYNAME = OPER;
     GO TO ENDCASE;
    KEYLAB(16): /* MASK */
     MASKSW ='1'B;
     IF OPER^=''
       THEN MASKCH=OPER;
     GO TO ENDCASE;
    KEYLAB(17): /* OPER */
     REL=OPER;
     SELECT(REL);
       WHEN('=');
       WHEN('^=');
       WHEN('<=');
       WHEN('>=');
       WHEN('<');
       WHEN('>');
       OTHERWISE DO;
         MSGDATA='INVALID OPER='××REL;
         RHRC=8;
         RETURN;
         END;
       END;
     GO TO ENDCASE;
    KEYLAB(18): /* STCOL */
     COL=OPER;
     ENDCOL=LENGTH(PARY(2))+COL-1;
     GO TO ENDCASE;
    KEYLAB(19): /* HEX */
     CALL TRHEX(VER); /* GO TRANSLATE VER */
     IF LENGTH(REP)^=''
       THEN CALL TRHEX(REP); /* GO TRANSLATE REP */
     IF RHRC^=0
       THEN RETURN;
     GO TO ENDCASE;
    KEYLAB(20): /* TEXT */
     TEXTSW='1'B;
     CALL SETCAPS(VER);
     GO TO ENDCASE;
    KEYLAB(21): /* PICTURE */
     PICSW='1'B;
     GO TO ENDCASE;
    KEYLAB(22): /* ANY */
     ANYSW='1'B;
     ANYSTR=VER;
     VER='#';
     GO TO ENDCASE;
    KEYLAB(23): /* SUPPRESS */
     SUSW='1'B;
     GOTO ENDCASE;
    KEYLAB(24): /* SUPPRESS */
     RESW='1'B;
     GOTO ENDCASE;
    KEYLAB(25): /* NOSHIFT */
     NOSHSW='1'B;
     GOTO ENDCASE;
    KEYLAB(26): /* SETRC */
     SETRCSW='1'B;
     GOTO ENDCASE;
    KEYLAB(27): /* MARK  */
    KEYLAB(28): /* MK */
     IF OPER=''
       THEN MARKIX=1;
       ELSE MARKIX=OPER;
     IF MARKIX<0 × MARKIX>6
       THEN DO;
         MSGDATA='INVALID MARK ARRAY INDEX';
         RHRC=8;
         RETURN;
         END;
     GOTO ENDCASE;
    KEYLAB(29): /* BOUNDS */
    KEYLAB(30): /* BNDS */
      COL=RH_LB;
      ENDCOLSW='1'B;
      ENDCOL=RH_RB;
      GOTO ENDCASE;
    ENDCASE:
     END;
   SELECT(NEXT);
     WHEN(1) S=NXTPTR; /* NEXT */
     WHEN(5) S=LSTPTR; /* PREV */
     WHEN(2,3) S=NXTHDR; /* ALL OR FIRST */
     WHEN(4) S=LSTHDR; /* LAST */
     END;
   MYHD = HDPTR;
   FINDTEXT = VER;
   IF NEXT=2 & CMDINDX=2 & ^(SUSW × RESW) /* FINDALL */
     THEN DO;
       PARY(*) ='';
       PARY(4) ='SUBCALL';
       CALL #DENT(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT); /* CALL DENTSI*/
       IF MYNAME^=''
         THEN RHNAME = MYNAME;
       HEXMODE = SAVPTR->HEXMODE;
       RHTRANSW = SAVPTR->RHTRANSW;
       LOFLAG = SAVPTR->LOFLAG;
       FINDTEXT = VER;
       END;
   TC=COL; /* TC=COL IN WHICH SCAN FOR REPLACEMENT STARTS */
   DO WHILE(S^=MYHD);
     IF LENGTH(S->RECSTR)<TC
       THEN TC = COL;
       ELSE DO;
         IF X^=0
           THEN IF X=1 /* DONT DO SUPPRESSED */
             THEN IF SUBSTR(S->RECFLGS,2,1)
               THEN LEAVE;
               ELSE;
             ELSE IF ^SUBSTR(S->RECFLGS,2,1)
               THEN LEAVE;
         BUF=S->RECSTR;
         IF TEXTSW
           THEN CALL SETCAPS(BUF); /* TRANSLATE TO HI CASE */
         E=MIN(LENGTH(BUF),ENDCOL)-TC+1;
         /* E=LENGTH AREA TO BE SCANNED FOR REPLACEMENT */
         SELECT;
           WHEN(E <= 0) I=0;
           WHEN(MASKSW) I=DOMASK(SUBSTR(BUF,TC,E),VER,MASKCH);
           WHEN(PICSW) I=DOPIC(SUBSTR(BUF,TC,E),VER);
           WHEN(ANYSW) I=DOANY(SUBSTR(BUF,TC,E),VER);
           WHEN(REL='') I=BINDEX(SUBSTR(BUF,TC,E),VER,KEYTABLE(CHARS+5),
           1);
           OTHERWISE DO;
             I=0;
             SELECT(REL);
               WHEN('=')IF SUBSTR(BUF,TC,E)=VER
                 THEN I=TC;
               WHEN('^=')IF SUBSTR(BUF,TC,E)^=VER
                 THEN I=TC;
               WHEN('<=')IF SUBSTR(BUF,TC,E)<=VER
                 THEN I=TC;
               WHEN('>=')IF SUBSTR(BUF,TC,E)>=VER
                 THEN I=TC;
               WHEN('<')IF SUBSTR(BUF,TC,E)<VER
                 THEN I=TC;
               WHEN('>')IF SUBSTR(BUF,TC,E)>VER
                 THEN I=TC;
               END;
             END;
           END; /* SELECT */
         IF I=0
           THEN TC=COL;
         IF ((I^=0)&CMDINDX=3) × ((I^=0)&(^NOT)&CMDINDX=2) ×((I=0)&NOT&
         CMDINDX=2)
           THEN DO;
             /* IT IS EITHER:
             SPFC & STRING FOUND IN LINE.
             SPFF & STRING FOUND & 'NOT' KEYWORD NOT USED.
             SPFF & STRING NOT FOUND & 'NOT' KEYWORD USED.
             */
             OCC=OCC-1;
             IF ^(CMDINDX=2 & NEXT=2) /* FIND ALL? */ & OCC>0
               THEN LEAVE; /* NOT PROPER OCCURRENCE YET */
             CSW ='1'B;
             IF CMDINDX=2 /* FIND? */
               THEN IF NEXT=2 /* ALL? */
                 THEN DO;
                   SELECT;
                     WHEN(^(SUSW × RESW)) DO;
                       SEQ=S->RECSEQ;
                       CALL #ADD(RHPTR,SUBENT,RECPTR,RECPTR,SEQ,
                         S->RECSTR,RHPPTR); /* CALL ADDREC */
                       END;
                     WHEN(SUSW)
                       SUBSTR(S->RECFLGS,2,1)='1'B;
                     OTHERWISE /* IT MUST BE RESET */
                       SUBSTR(S->RECFLGS,2,1)='0'B;
                     END; /* SELECT */
                   END;
                 ELSE DO;
                   IF SUSW
                     THEN SUBSTR(S->RECFLGS,2,1)='1'B;
                   IF RESW
                     THEN SUBSTR(S->RECFLGS,2,1)='0'B;
                   IF MARKIX=0
                     THEN CALL #NC(RHPTR,SUBENT,S); /* CALL NEWCUR */
                     ELSE DO;
                       MARKARY(MARKIX)=S->RECSEQ;
                       PUT STRING(MSGDATA) EDIT(S->RECSEQ)(P'ZZZZZZZ9');
                       END;
                   RHRC = 0;
                   CALL SETRCSUB;
                   RETURN;
                   END;
               ELSE DO; /* IT IS CHANGE */
                 SAVEFLAG ='1'B;
                 IF ^ENDCOLSW
                   THEN E=LENGTH(BUF)-TC+1;
                 BUF=SUBSTR(S->RECSTR,TC,E);
                 IF NOSHSW & LENGTH(VER)^=LENGTH(REP)
                   THEN DO;
                     IF LENGTH(REP) > LENGTH(VER)
                       THEN DO;
                         IF LENGTH(BUF)>=I+LENGTH(VER)
                           THEN DO;
                             IF SUBSTR(BUF,I+LENGTH(VER),1)=' '
                               THEN B=1;
                               ELSE B=0;
                             DO FOREVER=1 REPEAT FOREVER;
                               IF SUBSTR(BUF,I+LENGTH(VER),
                                 MIN(LENGTH(REP)-LENGTH(VER)+B,
                                 LENGTH(BUF)-(I+LENGTH(VER))+1))=''
                                 THEN LEAVE;
                               J=I+LENGTH(REP);
                               IF J<=LENGTH(BUF)
                                 THEN DO;
                                   K=INDEX(SUBSTR(BUF,J),'  ');
                                   IF K=0
                                     THEN J=LENGTH(BUF)+1;
                                     ELSE DO;
                                       M=K+LENGTH(REP)-LENGTH(VER);
                                       SUBSTR(BUF,I+LENGTH(VER),M)
                                         =' '××
                                         SUBSTR(BUF,I+LENGTH(VER),M-1);
                                       END;
                                   END;
                               IF J>LENGTH(BUF)
                                 THEN DO;
                                   CALL #NC(RHPTR,SUBENT,S);
                                   MSGDATA=
                                     'CHANGE WOULD CAUSE TRUNCATION';
                                   RHRC=8;
                                   CALL SETRCSUB;
                                   RETURN;
                                   END;
                               END;
                             END;
                         BUF=SUBSTR(BUF,1,I-1)××REP××
                           SUBSTR(BUF,I+LENGTH(REP));
                         END;
                       ELSE     /* LENGTH(REP) < LENGTH(VER) */
                         BUF=SUBSTR(BUF,1,I-1)××REP××
                           REPEAT(' ',LENGTH(VER)-LENGTH(REP)-1)××
                           SUBSTR(BUF,I+LENGTH(VER));
                     END;
                   ELSE
                     BUF=SUBSTR(BUF,1,I-1)××REP××
                       SUBSTR(BUF,I+LENGTH(VER));
                 IF ^ENDCOLSW
                   THEN TE=MAXLEN(S->RECSTR)-TC+1;
                   ELSE TE=MIN(MAXLEN(S->RECSTR),ENDCOL)-TC+1;
                 /* TE=MAX LENGTH THAT CAN BE INSERTED */
                 IF TE > E × ENDCOL>LENGTH(S->RECSTR)
                   THEN S->RECSTR=SUBSTR(S->RECSTR,1,TC-1)××BUF;
                   ELSE SUBSTR(S->RECSTR,TC,E)=BUF;
                 TC=TC+I+LENGTH(REP)-1;
                 IF NEXT=2 /* ALL? */
                   THEN S=S->LSTPTR;
                   ELSE DO;
                     RHRC = 0;
                     CALL SETRCSUB;
                     RETURN;
                     END;
                 END;
             END;
         END;
     SELECT(NEXT);
       WHEN(1,2,3) S=S->NXTPTR; /* NEXT, ALL, FIRST */
       OTHERWISE S=S->LSTPTR;
       END;
     END;
   IF ^CSW
     THEN DO;
       RHRC = 4;
       MYHD->MSGDATA='TEXT NOT FOUND';
       END;
     ELSE DO;
       RHRC = 0;
       IF NEXT=2 /* ALL */
         THEN DO;
           RECPTR = NXTHDR;
           IF RECPTR = HDPTR
             THEN CURSEQ = 0;
             ELSE CURSEQ = RECSEQ;
           END;
       END;
   IF CMDINDX=3 /* SPFC? */
     THEN CALL #NC(RHPTR,SUBENT,ORGPTR);
   CALL SETRCSUB;
   SETRCSUB: PROC;
   /********************************************************************
   *                                                                   *
   * MUST BE THE LAST THING CALLED PRIOR TO TERMINATING THE SUBCOMMAND.*
   * IT WILL BE VARIABLE &RC IF NECESSARY, AND WILL RESTORE RHPTR TO   *
   * ITS ORIGINAL VALUE.                                               *
   *                                                                   *
   ********************************************************************/
     IF SETRCSW
       THEN DO;
         SYMBOLPM='&RC';
         IF RHRC=0
           THEN SETTXT='0';
           ELSE SETTXT='4';
         CALL #SET(GBLSW,SYMBOLPM,SETTXT);
         END;
     RHPTR=SAVPTR;
     END SETRCSUB;
   DOANY:PROC(STR,VER) RETURNS(FIXED BIN(15,0));
     DCL (STR,VER) CHAR(*) VAR;
     DCL (I,J,K) FIXED BIN(15,0);
     IF LENGTH(STR)=0 × LENGTH(ANYSTR)=0
       THEN RETURN(0);
     K=0;
     DO I=1 TO LENGTH(ANYSTR);
       J=INDEX(STR,SUBSTR(ANYSTR,I,1));
       IF J^=0
         THEN IF K=0
           THEN K=J;
           ELSE K=MIN(K,J);
       END;
     RETURN(K);
     END DOANY;
   DOMASK:PROC(STR,VER,CH) RETURNS(FIXED BIN(15,0));
     DCL (STR,VER) CHAR(*) VAR;
     DCL CH CHAR(1);
     DCL (I,J,K,L,M) FIXED BIN(15,0); /* M,I=INDEX TO STR */
     /* J=INDEX TO VER */
     /* K=INDEX IN VER TO FIRST MASK CHAR */
     K=INDEX(VER,CH);
     IF K=0
       THEN K=LENGTH(VER)+1;
     M=0;
     DO UNTIL((I>LENGTH(STR)) × (J>LENGTH(VER)));
       IF K=1
         THEN DO;
           L,I,M=M+1;
           J=1;
           END;
         ELSE DO;
           IF M=LENGTH(STR)
             THEN RETURN(0);
           J=INDEX(SUBSTR(STR,M+1),SUBSTR(VER,1,K-1));
           IF J=0
             THEN RETURN(0);
           M=M+J;
           L,I=M+K-1;
           J=K;
           END;
       DO WHILE(J<=LENGTH(VER) & I<=LENGTH(STR));
         IF SUBSTR(VER,J,1)=CH× SUBSTR(VER,J,1)=SUBSTR(STR,I,1)
           THEN DO;
             J=J+1;
             I=I+1;
             END;
           ELSE I=LENGTH(STR)+1;
         END;
       END;
     IF J<=LENGTH(VER)
       THEN RETURN(0);
       ELSE RETURN(L);
     END DOMASK;
   DOPIC:PROC(STR,VER) RETURNS(FIXED BIN(15,0));
     DCL (STR,VER) CHAR(*) VAR;
     DCL (I,J,K,L,M) FIXED BIN(15,0);
     DCL HITSW BIT(1);
     DCL TRC CHAR(1) VAR;
     DCL TC CHAR(1); /* I=INDEX IN STR TO CURRENT CHAR TO BE EXAMINED */
     /* J=INDEX IN VER TO CURRENT CHAR TO BE EXAMINED */
     I,J=1;
     K=I;
     DO UNTIL((K>LENGTH(STR))×(J>LENGTH(VER))×(I>LENGTH(STR)));
       HITSW='0'B;
       TC=SUBSTR(STR,K,1);
       SELECT(SUBSTR(VER,J,1));
         WHEN('=') HITSW='1'B; /* DON'T CARE */
         WHEN('^') /* ANY NON-BLANK CHAR */
         IF TC^=' '
           THEN HITSW='1'B; /* GOOD - TEST NEXT CHAR */
         WHEN('.')DO; /* ANY NON-DISPLAYABLE CHARACTER */
           TRC=TC;
           CALL #DENTTR(TRC);
           IF TRC^=TC
             THEN HITSW='1'B; /* GOT NON-DISPLAYABLE CHAR */
           END;
         WHEN('#') /* ANY NUMERIC CHARACTER */
         IF VERIFY(TC,'0123456789')=0
           THEN HITSW='1'B; /* GOT NUMERIC */
         WHEN('_') /* ANY NON-NUMERIC CHARACTER */
         IF VERIFY(TC,'0123456789')^=0
           THEN HITSW='1'B; /* GOT NON-NUMERIC */
         WHEN('@')DO; /* ANY ALPHABETIC CHARACTER */
           CALL SETCAPS(TC);
           IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#')=0
             THEN HITSW='1'B;
           END;
         WHEN('<') /* ANY LOWERCASE CHARACTER */
         IF VERIFY(TC,'abcdefghijklmnopqrstuvwxyz')=0
           THEN HITSW='1'B;
         WHEN('>') /* ANY UPPERCASE CHARACTER */
         IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#')=0
           THEN HITSW='1'B;
         WHEN('$')DO; /* ANY SPECIAL CHARACTER */
           CALL SETCAPS(TC);
           IF VERIFY(TC,'ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#0123456789')^=0
             THEN HITSW='1'B;
           END;
         OTHERWISE /* CHECK SPECIFIED CHARACTER */
         IF TC=SUBSTR(VER,J,1) /* OK */
           THEN HITSW='1'B;
         END;
       IF HITSW
         THEN DO; /* OK - TEST NEXT CHAR */
           K=K+1;
           J=J+1;
           END;
         ELSE DO; /* BAD - START OVER ON PICTURE */
           J=1;
           I=I+1;
           K=I;
           END;
       END;
     IF J>LENGTH(VER)
       THEN RETURN(I);
       ELSE RETURN(0);
     END DOPIC;
   TRHEX:PROC(STR);
     DCL (STR,OUTSTR) CHAR(80) VAR;
     IF MOD(LENGTH(STR),2)^=0
       THEN DO;
         MSGDATA='HEX TEXT MUST BE AN EVEN NUMBER OF CHARACTERS';
         RHRC=8;
         RETURN;
         END;
     CALL SETCAPS(STR);
     IF VERIFY(STR,'ABCDEF0123456789')^=0
       THEN DO;
         MSGDATA='INVALID HEX CHARACTERS SPECIFIED';
         RHRC=8;
         RETURN;
         END;
     OUTSTR=REPEAT(' ',LENGTH(STR)/2-1);
     CALL TRIN(STR,OUTSTR);
     STR=OUTSTR;
     END TRHEX;
   END;
