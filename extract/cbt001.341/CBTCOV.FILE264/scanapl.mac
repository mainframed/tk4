 /* SCANAPL */
 /*
0*$.HE GENERALIZED SUBROUTINES - SCANAPL
0*$.HE PARSING SCANNER FOR SPECIAL APL
0*$.PL 55
0*$.PN 0
0*$.PA
0*$.SS
0*$.NF
0*$04/05/84
0*$AUTHOR:  T. SMITH
0*$SOURCE MODULE NAME:  SCANAPL
0*$DOCUMENTATION ID:  0*$
0*$.FI L
0*$.SP 5
0*$THIS SUBROUTINE IS USED TO TOKENIZE AN APL STATEMENT WRITTEN IN A
0*$SPECIAL CHARACTER SET DESIGNED TO LET YOU USE APL FROM A KEYBOARD
0*$WHICH DOESN'T HAVE APL CHARACTERS.
0*$CALL FORMAT IS AS FOLLOWS:
0*$.SP 1
0*$CALL SCANAPL(CMDDATA,SCANPARM,SYMBOLS);
0*$.SP 1
0*$SYMBOLS IS AN ARRAY OF CHAR(*), AND CONTAINS ALL OF THE VALID
0*$TOKENS, OTHER THAN NAMES, WHICH ARE TO BE RECOGNIZED IN THE
0*$STATEMENT DURING THE SCAN PROCESS.
0*$.SP 1
0*$SCANPARM IS A STRUCTURE OF THE FOLLOWING FORMAT:
0*$.SP 1
0*$.IN 5
0*$.NF
0*$DCL 1 SCANPARM,
0*$ 2 TOKHDR PTR,
0*$   ** THIS WILL BE SET TO THE ADDR OF THE FIRST TOKEN **
0*$   ** DESCRIPTOR (SEE STRUCTURE TOKEN BELOW) IN       **
0*$   ** CMDDATA, AND SHOULD BE SET TO NULL BY THE       **
0*$   ** CALLER BEFORE CALLING SCANNER THE FIRST TIME.   **
0*$ 2 CURTOK PTR,
0*$   ** THIS WILL BE SET TO THE ADDR OF THE CURRENT     **
0*$   ** TOKEN DESCRIPTOR (SEE STRUCTURE TOKEN BELOW).   **
0*$   ** NOTE THAT AT ENTRY, SCANNER WILL CHECK TO SEE   **
0*$   ** CURTOK POINTS AT THE MOST RECENTLY CREATED      **
0*$   ** TOKEN DESCRIPTOR.  IF NOT, CURTOK WILL BE SET   **
0*$   ** VALUE OF CURTOK->NEXT_TOKEN.  THIS ALLOWS THE   **
0*$   ** CALLER TO 'BACK UP' DURING A PARSING SCAN.      **
0*$ 2 SCANIX FIXED BIN(15,0);
0*$   ** SHOULD BE SET BY THE CALLER TO 1 BEFORE CALLING **
0*$   ** SCANNER THE FIRST TIME.  SCANNER WILL UPDATE    **
0*$   ** THIS FIELD TO POINT TO THE NEXT AVAILABLE       **
0*$   ** AFTER THE TOKEN RETURNED ON A GIVEN INVOCATION. **
0*$.IN 0
0*$.SP 1
0*$FOLLOWING IS THE DESCRIPTION OF THE TOKEN DESCRIPTOR BUILT
0*$BY SCANAPL:
0*$.IN 5
0*$.SP 1
0*$DCL 1 TOKEN BASED(TOKPTR),
0*$  2 PRIOR_TOKEN PTR,
0*$    ** PTR TO THE PREVIOUS TOKEN IN THE QUEUE POINTED TO BY **
0*$    ** TOKHDR.                                              **
0*$  2 NEXT_TOKEN PTR,
0*$    ** PTR TO THE NEXT TOKEN IN THE QUEUE POINTED TO BY     **
0*$    ** TOKHDR.                                              **
0*$  2 ELIX FIXED BIN(15,0);
0*$    ** SCANIX VALUE AFTER THIS TOKEN WAS ENCOUNTERED **
0*$  2 TYPE FIXED BIN(31,0),
0*$    ** >0=INDEX TO SYMBOLS TABLE.
0*$    **  0=OPERAND,
0*$    ** -1=QUOTED STRING
0*$    ** -2=NUMERIC CONSTANT
0*$    ** -3=NO MORE TOKENS
0*$    ** -4=OTHER
0*$  2 TOKSTR CHAR(256) VAR;
0*$    ** CONTAINS TOKEN STRING FROM CMDDATA.  IN THE CASE OF A
0*$    ** QUOTED STRING, THE SURROUNDING QUOTES WILL HAVE BEEN
0*$    ** REMOVED, AND ANY CONTAINED DOUBLE QUOTES WILL HAVE
0*$    ** BEEN REDUCED TO A SINGLE QUOTE.  IN THE CASE OF AN OPERAND
0*$    ** NAME, TOKSTR WILL HAVE BEEN TRANSLATED TO UPPER CASE.
0*$.FI L
0*$.SP 1
0*$.IN 0
0*$IF A TOKEN IS IDENTIFIED TO BE AN OPERAND, TOKSTR WILL BEGIN WITH A
0*$LOWER CASE ALPHABETIC CHARACTER 'a' TO 'z', AND WILL BE FOLLOWED BY
0*$FROM 1 TO 255 CHARACTERS WHICH MAY BE ANY COMBINATION OF THE
0*$CHARACTERS 'a' TO 'z', '0' TO '9'.
0*$.SP 1
0*$CMDDATA IS CHAR(*) VAR, AND SHOULD BE SET BY THE CALLER TO THE
0*$STRING OF TEXT TO BE TOKENIZED.
0*$.SP 1
 */
 SCANAPL: PROC(CMDDATA,SCANPARM,SYMBOLS) OPTIONS(REENTRANT);
   DCL NULL BUILTIN;
   DFT RANGE(*) VALUE(FIXED BIN(31,0));
   DCL CMDDATA CHAR(*) VAR;
   DCL SYMBOLS(*) CHAR(*);
   DCL 1 SCANPARM,
     2 TOKHDR PTR,
     2 CURTOK PTR,
     2 SCANIX FIXED BIN(15,0);
   DCL 1 TOKEN BASED(TOKPTR),
     2 PRIOR_TOKEN PTR,
     2 NEXT_TOKEN PTR,
     2 ELIX FIXED BIN(15,0),
     2 TYPE FIXED BIN(31,0),
     2 TOKSTR CHAR(256) VAR;
   DCL OPERAND          INIT( 0) FIXED STATIC;
   DCL QUOTED_STRING    INIT(-1) FIXED STATIC;
   DCL NUMERIC_CONSTANT INIT(-2) FIXED STATIC;
   DCL NO_MORE_TOKENS   INIT(-3) FIXED STATIC;
   DCL OTHER            INIT(-4) FIXED STATIC;
   DCL SETCAPS ENTRY;
   DCL PREFIX ENTRY(CHAR(*), CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL SCANLN FIXED BIN(15,0);
     /* LENGTH OF CMDDATA */
   DCL ALPHATAB CHAR(55) VAR STATIC
     INIT('abcdefghijklmnopqrstuvwxyz');
     /* ALPHATAB CONTAINS ALL ACCEPTABLE ALPHABETIC CHARACTERS */
   DCL NUMTAB CHAR(10) VAR STATIC INIT('0123456789');
     /* NUMTAB CONTAINS ALL ACCEPTABLE NUMERIC CHARACTERS */
   IF TOKHDR=NULL
     THEN CURTOK=NULL;
     ELSE DO;
       IF CURTOK=NULL
         THEN CURTOK=TOKHDR;
         ELSE IF CURTOK->NEXT_TOKEN=NULL
           THEN LEAVE;
           ELSE CURTOK=CURTOK->NEXT_TOKEN;
       RETURN;
       END;
   ALLOCATE TOKEN;
   IF TOKHDR=NULL
     THEN DO;
       CURTOK,TOKHDR=TOKPTR;
       NEXT_TOKEN,PRIOR_TOKEN=NULL;
       END;
     ELSE DO;
       CURTOK->NEXT_TOKEN=TOKPTR;
       PRIOR_TOKEN=CURTOK;
       NEXT_TOKEN=NULL;
       CURTOK=TOKPTR;
       END;
   SCANLN=LENGTH(CMDDATA);
   IF SCANIX <= SCANLN
     THEN DO SCANIX=SCANIX TO SCANLN
       UNTIL(SUBSTR(CMDDATA,SCANIX,1)^=' '); /* SKIP OVER BLANKS */
       END;
   TOKEN.TYPE=0;
   IF SCANIX > SCANLN
     THEN TOKSTR='';
     ELSE DO;
       TOKSTR=SUBSTR(CMDDATA,SCANIX,1);
       SCANIX=SCANIX+1;
       END;
   SELECT;
     WHEN(TOKSTR='') TOKEN.TYPE=NO_MORE_TOKENS; /* ALL DONE */
     WHEN(INDEX(ALPHATAB,TOKSTR)^=0) CALL DOALPHA; /* ALPHABETIC */
     WHEN(TOKSTR='.' × INDEX(NUMTAB,TOKSTR)^=0)
       CALL DONUMBER; /* NUMERIC */
     WHEN(SYMBOLIX(OTHER,TOKSTR)=23) DO; /* OVERBAR? */
       TOKSTR='-';
       CALL DONUMBER; /* NUMERIC */
       END;
     WHEN(TOKSTR='''') CALL DOQUOTE; /* QUOTED STRING */
     OTHERWISE CALL DOOPER; /* CHECK FOR OPERATOR */
     END;
   ELIX=SCANIX;
   RETURN; /* END OF MAINLINE SCAN CODE */

 DOALPHA: PROC;
 /**********************************************************************
 * DOALPHA IS CALLED WHENEVER THE FIRST CHARACTER OF THE NEXT TOKEN IS *
 * RECOGNIZED TO BE ALPHABETIC.                                        *
 **********************************************************************/
   DCL CH CHAR(1);
   DCL I FIXED BIN(31,0);
   TOKEN.TYPE=OPERAND; /* DEFAULT TOKEN TYPE TO OPERAND */
   DO SCANIX=SCANIX TO SCANLN;
     CH=SUBSTR(CMDDATA,SCANIX,1); /* CH=CURRENT CHARACTER */
     IF INDEX(ALPHATAB,CH)=0 & INDEX(NUMTAB,CH)=0
       THEN LEAVE; /* END OF NAME STRING */
     TOKSTR=TOKSTR××CH; /* NAMES LONGER THAN 256 WILL GET TRUNCATED */
     END;
   CALL SETCAPS(TOKSTR);
   END DOALPHA;

 DONUMBER: PROC;
 /**********************************************************************
 * DONUMBER IS CALLED WHEN THE NEXT CHARACTER SCANNED IS RECOGNIZED TO *
 * BE A DIGIT 0 THRU 9, OR PERHAPS A PERIOD, OR AN OVERBAR.            *
 **********************************************************************/
   DCL CH CHAR(1);
   TOKEN.TYPE=NUMERIC_CONSTANT;
   DO SCANIX=SCANIX TO SCANLN;
     CH=SUBSTR(CMDDATA,SCANIX,1); /* CH=CURRENT CHARACTER */
     IF INDEX(NUMTAB,CH)=0 & CH^='.'
       THEN LEAVE; /* END OF NUMERIC CONSTANT */
     TOKSTR=TOKSTR××CH;
     END;
   IF TOKSTR='.'
     THEN TOKEN.TYPE=SYMBOLIX(0,TOKSTR);
   END DONUMBER;

 DOOPER: PROC;
 /**********************************************************************
 * DOOPER IS CALLED WHEN IT IS RECOGNIZED THAT THE NEXT TOKEN IS       *
 * EITHER AN OPERATOR OR AN UNKNOWN (TYPE=OTHER).                      *
 **********************************************************************/
   DCL (I,J,K) FIXED BIN(31,0);

   DO I=MIN(SCANLN+1,SCANIX+LENGTH(SYMBOLS(1))) TO SCANIX BY -1
     UNTIL(K^=OTHER);
     K=SYMBOLIX(OTHER,TOKSTR××SUBSTR(CMDDATA,SCANIX,I-SCANIX));
     END;
   TOKEN.TYPE=K;
   IF I>SCANIX
     THEN DO;
       TOKSTR=TOKSTR××SUBSTR(CMDDATA,SCANIX,I-SCANIX);
       SCANIX=I;
       END;
   END DOOPER;

 DOQUOTE: PROC;
 /**********************************************************************
 * DOQUOTE IS CALLED TO PROCESS QUOTED STRINGS.                        *
 **********************************************************************/
   DCL I FIXED BIN(15,0);
   DCL QSTR ENTRY(CHAR(*) VAR, FIXED BIN(15,0),
     CHAR(*) VAR, FIXED BIN(15,0));
   TOKEN.TYPE=QUOTED_STRING;
   CALL QSTR(CMDDATA,SCANIX-1,TOKEN.TOKSTR,I);
   SCANIX=I;
   END DOQUOTE;

 SYMBOLIX: PROC(J,OP) RETURNS(FIXED BIN(31,0));
 /**********************************************************************
 * CALLED TO SEARCH SYMBOLS TABLE FOR A MATCH.                         *
 **********************************************************************/
   DCL (I,J) FIXED BIN(31,0);
   DCL OP CHAR(*);

   IF J=OTHER
     THEN I=1; /* START AT FRONT */
     ELSE I=J+1;
   DO I=I TO HBOUND(SYMBOLS,1) UNTIL(SYMBOLS(I)=OP);
     END;
   IF I>HBOUND(SYMBOLS,1)
     THEN I=OTHER;
   RETURN(I);
   END SYMBOLIX;

   END SCANAPL;
