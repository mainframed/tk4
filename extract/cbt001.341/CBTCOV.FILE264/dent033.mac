 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT033 - SORTQ,SORTQL */
         % DCL @PROCNAME CHAR;
         % DCL @RENTNAME CHAR;
         % @PROCNAME = 'RENT';
         % @RENTNAME = 'DENT033';
         % INCLUDE DENTSUB;
         /* PARY(1)    2    3    4 */
         /*      SORT  OFF1 LEN1 SEQ1 ... OFFN LENN SEQN */
         /* PARY(1)    2    3    4    5    6 */
         /*      SORTL L1   L2   OFF1 LEN1 SEQ1 ... OFFN LENN SEQN */
         DCL (T,TMPPTR,SAVCUR,SAVNXT,FPTR,LPTR) PTR;
         DCL 1 SARYSTR BASED(SARYPTR),
           2 SARYBND FIXED BIN(15,0),
           2 SARY(N REFER (SARYBND)) PTR;
         DCL LAST FIXED BIN(31,0) INIT(99999999);
         DCL (OF(2),LE(2)) FIXED BIN(15,0);
         DCL 1 SCTL(5),
           2 OFF FIXED BIN(15,0),
           2 LEN FIXED BIN(15,0),
           2 SEQ CHAR(1);
         IF CMDINDX=3 /* IS IT SORTQL? */
           THEN DO;
             BASE=2;
             L1=PARY(2);
             L2=PARY(3);
             CALL #MD(RHPTR,SUBENT,L1); /* CALL MDPROC */
             IF RECPTR^=HDPTR
               THEN FPTR=LSTPTR;
             CALL #MD(RHPTR,SUBENT,L2); /* CALL MDPROC */
             IF RECPTR^=HDPTR
               THEN LPTR=NXTPTR;
             IF CURSEQ >= L1 & CURSEQ <= L2
               THEN IF FPTR^=HDPTR
                 THEN SAVCUR=FPTR->LSTPTR;
                 ELSE SAVCUR=HDPTR;
             END;
           ELSE DO;
             BASE=0;
             FPTR,LPTR=HDPTR;
             SAVCUR=HDPTR;
             END;
         DO IX = 1 TO 5 WHILE(PARY(IX*3-1+BASE)^='');
           OFF(IX) = PARY(IX*3-1+BASE);
           LEN(IX) = PARY(IX*3+BASE);
           SEQ(IX) = PARY(IX*3+1+BASE);
           CALL SETCAPS(SEQ(IX));
           END;
         N=0;
         DO RECPTR=FPTR->NXTHDR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
           N=N+1;
           END;
         IF N<2
           THEN DO;
             RHRC=0;
             RETURN;
             END;
         ALLOCATE SARYSTR;
         J=0;
         DO RECPTR=FPTR->NXTPTR REPEAT NXTPTR WHILE(RECPTR^=LPTR);
           J=J+1;
           SARY(J)=RECPTR;
           END;
         M=N;
         DO M=M/2 REPEAT M/2 WHILE(M^=0);
           K=N-M;
           DO J=1 REPEAT J+1 WHILE(J <= K);
             I = J;
             DO L=I+M REPEAT I+M WHILE(^SORTED) UNTIL(I<1);
               T=SARY(I);
               SARY(I)=SARY(L);
               SARY(L)=T;
               I=I-M;
               END;
             END;
           END;
         SARY(1)->LSTPTR=FPTR;
         FPTR->NXTPTR=SARY(1);
         SARY(N)->NXTPTR=LPTR;
         LPTR->LSTPTR=SARY(N);
         SARY(1)->NXTPTR=SARY(2);
         SARY(N)->LSTPTR=SARY(N-1);
         DO J = 2 TO N-1;
           SARY(J)->LSTPTR=SARY(J-1);
           SARY(J)->NXTPTR=SARY(J+1);
           END;
         FREE SARYSTR;
         IF SAVCUR=HDPTR
           THEN SAVCUR=NXTHDR;
         CALL #NC(RHPTR,SUBENT,SAVCUR); /* CALL DENTNC */
         CALL #RESEQ(RHPTR,SUBENT,HDPTR,'NOSAVE','RENUM',LAST,RHPPTR   )
           ;  /* CALL RESEQ */
         SAVEFLAG = '1'B;
         RHRC = 0;
 SORTED:  PROC RETURNS(BIT(1));
         DCL (IS,IT,XX) FIXED BIN(15,0);
         DO XX=1 TO IX-1;
           DO IS = 1 TO 2;
             IF IS=1
               THEN IT=I;
               ELSE IT=L;
             IF OFF(XX)+LEN(XX)-1 > LENGTH(SARY(IT)->RECSTR)
               THEN IF OFF(XX) > LENGTH(SARY(IT)->RECSTR)
                 THEN DO;
                   OF(IS)=1;
                   LE(IS)=0;
                   END;
                 ELSE DO;
                   OF(IS)=OFF(XX);
                   LE(IS)=LENGTH(SARY(IT)->RECSTR)-OFF(XX)+1;
                   END;
               ELSE DO;
                 OF(IS)=OFF(XX);
                 LE(IS)=LEN(XX);
                 END;
             END;
           SELECT(SEQ(XX));
             WHEN('A') IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
               SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
               THEN RETURN('0'B);
               ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) <
                 SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
                 THEN RETURN('1'B);
             WHEN('D') IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(2)) <
               SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
               THEN RETURN('0'B);
               ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
                 SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
                 THEN RETURN('1'B);
             OTHERWISE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) >
               SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
               THEN RETURN('0'B);
               ELSE IF SUBSTR(SARY(I)->RECSTR,OF(1),LE(1)) <
                 SUBSTR(SARY(L)->RECSTR,OF(2),LE(2))
                 THEN RETURN('1'B);
             END;
           END;
         RETURN('1'B);
         END SORTED;
         END;
