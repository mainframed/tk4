 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* ABE016 - ABE */
   %INCLUDE ABESUB;
 ABESUB(ABE016) RECURS(YES) PARS(0000000000000000) PARSEVAL(NO)
   CHECK(YES);
   %INCLUDE ABESUBA;
   %INCLUDE ABERHPNL;
   %INCLUDE JFCB;
   %INCLUDE DCB;
   %INCLUDE DCBQSAM;
   DCL 1 PARSSTR,
   %INCLUDE ABEFAM;
   DCL CMD CHAR(256) VAR;
   DCL SAVECMDDATA CHAR(256) VAR;
   DCL SAVEMSGDATA CHAR(80) VAR;
   DCL SYSJFCB ENTRY(CHAR(8),PTR);
   DCL JFCBCOR CHAR(176);
   JFCBPTR=ADDR(JFCBCOR);
   DCL FINDDCB ENTRY(CHAR(8))RETURNS(PTR);
   DCL SAVRFM BIT(8);
   DCL PLILOAD ENTRY(CHAR(8),ENTRY,FIXED BIN(15,0));
   DCL LOADRET FIXED BIN(15,0);
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL SETCAPS ENTRY;
   DCL SYSLOAD ENTRY;
   DCL SYSCTLG ENTRY;
   DCL STLINEN ENTRY(FIXED BIN(15,0),CHAR(*))RETURNS(FIXED BIN(15,0));
   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL CONVERT ENTRY(PTR,CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0),
     CHAR(*),FIXED BIN(15,0),FIXED BIN(15,0))
     RETURNS(CHAR(256) VAR);
   DCL ERRMSG CHAR(130) VAR INIT('');
   DCL RET BIT(32);
   DCL CTLGDSN CHAR(44);
   DCL CVOL CHAR(6) INIT('SYSRES');
   DCL AREA CHAR(265);
   DCL PGMNAME CHAR(8) STATIC INIT('VTAMIO');
   DCL KEYTABLE(46) CHAR(80) VAR STATIC INIT('OUTDA','NONUM','LOCASE',
     'SUBCALL','NAME','HICASE','SYSOUT','VTERM','TRANSLAT','NOPREFIX',
     'HEX','PRI','SECY','LINE','COUNT','HARDCOPY','INFILE','NOFREE',
     'PDF','PDFC','PDFE','INPUT','SUPPORT','PROFILE','NOPROMPT',
     'CLIST','RECSIZE','OUTFI','FAM','DBD','NODBD','COBOL','YECH',
     'NOSHOW','DB2','DB2IN','DB2OUT','SAS','SASIN','SASOUT','INTERNAL',
     '@@@@','BPAM','VOL','OVOL','DEBUG'
     );
   DCL INDX FIXED BIN(15,0);
   DCL OPER CHAR(80) VAR;
   DCL CL CHAR(80) VAR INIT('');
   DCL CLOP CHAR(80) VAR;
   DCL (RECLUP,DUMPTR,SAVPTR) PTR;
   DCL SYSODSN CHAR(44) VAR;
   DCL OCMD CHAR(240) VAR;
   DCL HELPSTR CHAR(4) VAR STATIC INIT('');
   DCL PRESYM CHAR(8) STATIC INIT('SYSPREF');
   DCL PREUID CHAR(8) STATIC INIT('SYSUID');
   DCL TSOPREF CHAR(100) VAR;
   DCL JOBPREF CHAR(100) VAR INIT('');
   DCL DSNLIST CHAR(256) VAR;
   DCL MISSING DEC FLOAT(16),
       MISSINGCH CHAR(8) BASED(ADDR(MISSING));
   DCL MISSING_PACKED FIXED DEC(15,0) STATIC INIT(-999999999999999),
       MISSING_PACKED_CH CHAR(8) BASED(ADDR(MISSING_PACKED));
   DCL MISSING_INTEGER FIXED BIN(31,0) STATIC INIT(-2147483648),
       MISSING_INTEGER_CH CHAR(4) BASED(ADDR(MISSING_INTEGER));
   DCL MISSING_SMALLINT FIXED BIN(15,0) STATIC INIT(-32768),
       MISSING_SMALLINT_CH CHAR(2) BASED(ADDR(MISSING_INTEGER));

   UNSPEC(MISSING)='1'B; /* SET MISSING VALUE */
   RHRC=0;
   IF PARY(1)^=''
     THEN IF SUBSTR(PARY(1),1,1)='(' /* LEFT PAREN? */
       & SUBSTR(PARY(1),LENGTH(PARY(1)),1)=')' /* RIGHT PAREN? */
       THEN DO; /* IT IS DSNLIST */
         DSNLIST=SUBSTR(PARY(1),2,LENGTH(PARY(1))-2);
         DO UNTIL(I^=0);
           I=INDEX(DSNLIST,' '); /* FIND FIRST BLANK */
           IF I=0
             THEN I=LENGTH(DSNLIST)+1;
           IF I=1
             THEN RETURN;
           PARY(1)=SUBSTR(DSNLIST,1,I-1);
           IF SUBSTR(PARY(1),1,1)='('
             THEN IF SUBSTR(PARY(1),LENGTH(PARY(1)),1)=')'
               THEN PARY(1)='{'××SUBSTR(PARY(1),2,LENGTH(PARY(1))-2)××
                 '}';
           IF I>LENGTH(DSNLIST)
             THEN DSNLIST='';
             ELSE DO;
               DSNLIST=SUBSTR(DSNLIST,I);
               I=PREFIX(DSNLIST,' '); /* FIND FIRST NONBLANK */
               IF I=0
                 THEN DSNLIST='';
                 ELSE DSNLIST=SUBSTR(DSNLIST,I);
               END;
           I=0;
           DO CMD='ABE' REPEAT CMD××' '××PARY(I)
             UNTIL(I>HBOUND(PARY,1));
             I=I+1;
             END;
           I=#CMD(CMD,RHPTR,RHHDRPT);
           END;
         RETURN;
         END;
   ON ERROR BEGIN;
     ON ERROR SYSTEM;
     IF ERRMSG=''
       THEN ERRMSG='INVALID PARAMETER CAUSED PROGRAM INTERRUPT';
     SIGNAL CONDITION(BADSSE);
     END;
   ON CONDITION(BADSSE)BEGIN;
     IF RHPTR=NULL
       THEN CALL #TERM(ERRMSG);
       ELSE MSGDATA=ERRMSG;
     IF RECTMP->INDDN=RECTMP->OUTDDN
       THEN RECTMP->OUTDDN=NULL;
     IF RECTMP->INDDN^=NULL
       THEN FREE RECTMP->INDDN->ALCSTR;
     IF RECTMP->OUTDDN^=NULL
       THEN FREE RECTMP->OUTDDN->ALCSTR;
     IF RECTMP^=NULL
       THEN DO;
         /* NOW FREE LIST OF RECORDS */
         RECTMP->RECPTR = RECTMP->NXTHDR;
         DO WHILE(RECTMP->RECPTR^=RECTMP->HDPTR);
           SAVPTR=RECTMP->RECPTR->NXTPTR;
           FREE RECTMP->RECPTR->REC;
           RECTMP->RECPTR = SAVPTR;
           END;
         FREE RECTMP->RECHDR;
         END;
     RHRC=8;
     GOTO FINIS;
     END;
   ON UNDEFINEDFILE(RH_SEQ_INTERNAL)BEGIN;
     ERRMSG='CAN''T OPEN FILE '××INFI;
     SIGNAL CONDITION(BADSSE);
     END;
   ALLOCATE RECHDR SET(RECTMP);
   STRING(RECTMP->RHFLAGS)='0'B;
   STRING(RECTMP->RHFLAGS2)='0'B;
   RECTMP->RHNAME='====>';
   RECTMP->INDDN,RECTMP->OUTDDN=NULL;
   RECTMP->TERMID ='';
   RECTMP->TERMECB = 0;
   RECTMP->TERMEP = NULL;
   RECTMP->MARKARY(*)=0;
   RECTMP->SEQSTRT = 10;
   RECTMP->SEQINCR = 10;
   RECTMP->CURSEQ = 0;
   RECTMP->PFPB ='PF';
   RECTMP->CMDDATA ='';
   RECTMP->MSGDATA ='';
   RECTMP->CMDDISPLAY='';
   RECTMP->CURSOR_SEQ=0;
   RECTMP->RHSPFFLST='';
   RECTMP->RHSPFCLST='';
   RECTMP->RH_DISPLAY_HDR = NULL;
   RECTMP->FINDTEXT ='';
   RECTMP->RHLST,RECTMP->RHNXT = NULL;
   RECTMP->HDPTR,RECTMP->RECPTR = RECTMP;
   RECTMP->LSTHDR,RECTMP->NXTHDR = RECTMP->HDPTR;
   RECTMP->RHFAMCB,RECTMP->RHSPCPT=NULL;
   RECTMP->RHUSENM='';
   RECTMP->RHUSEHD=NULL;
   RECTMP->RHUSETR=NULL;
   RECTMP->RH_OFF_DFT=1;
   RECTMP->RH_LEN_DFT=32767;
   RECTMP->RH_NCOLS_DFT=1;
   RECTMP->RHCOUNT=0;
   RECTMP->RH_APL=NULL;
   RECTMP->RHLRECL=80;
   RECTMP->RHBLKL=1680;
   RECTMP->RHRECFM='10010000'B;
   DO I = 2 TO HBOUND(PARY,1);
     IF PARY(I)^=''
       THEN DO;
         CALL SETCAPS(PARY(I));
         CALL #SPARS(PARY(I),KEYTABLE,OPER,INDX); /* CALL SPARS */
         SELECT(INDX);
           WHEN(0) DO; /* INVALID OPERAND */
             ERRMSG='INVALID OPERAND='××PARY(I);
             SIGNAL CONDITION(BADSSE);
             RETURN; /* NOT NECESSARY, BUT NICE FOR CLARITY */
             END;
           WHEN(1) DO; /* OUTDA */
             IF OUTDSN^=''
               THEN DO;
                 ERRMSG='DUPLICATE OUT- KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             OUTDSN = OPER;
             END;
           WHEN(2)  /* NONUM */
             RECTMP->RHNONSW ='1'B;
           WHEN(3)  /* LOCASE */
             LOSW ='1'B;
           WHEN(4); /* SUBCALL */
           WHEN(5)  /* NAME */
             RECTMP->RHNAME = OPER;
           WHEN(6) /* HICASE */
             HISW ='1'B;
           WHEN(7) DO; /* SYSOUT */
             SYSSW ='1'B;
             IF RECTMP->CMDDATA^=''
               THEN DO;
                 ERRMSG='SYSOUT KEYWORD CONFLICTS WITH OTHER KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             RECTMP->CMDDATA='TRANSLAT';
             IF OPER^=''
               THEN CL=OPER;
             /* SAVE THE CLASS LIST, IF THERE IS ONE */
             J=INDEX(PARY(1),'(')-1;
             IF J<1
               THEN J=LENGTH(PARY(1));
             IF J>2
               THEN DO;
                 JOBPREF=SUBSTR(PARY(1),1,J-2);
                 CALL SETCAPS(JOBPREF);
                 PARY(1)=SUBSTR(PARY(1),J-1);
                 END;
             END;
           WHEN(8) DO; /* VTERM */
             RECTMP->TERMID = OPER;
             IF RECTMP->TERMID=''
               THEN RECTMP->TERMID='TSO';
             RECTMP->TERMFLAG ='1'B;
             END;
           WHEN(9) DO; /* TRANSLAT */
             IF RECTMP->CMDDATA^=''
               THEN DO;
                 ERRMSG=
                   'TRANSLAT KEYWORD CONFLICTS WITH OTHER KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             RECTMP->CMDDATA='TRANSLAT';
             END;
           WHEN(10) /* NOPREFIX */
             NOPRSW ='1'B;
           WHEN(11) /* HEX */
             RECTMP->HEXMODE ='1'B;
           WHEN(12) /* PRI */
             PRI = OPER;
           WHEN(13) /* SECY */
             SECY = OPER;
           WHEN(14) /* LINE */
             FLINE = OPER;
           WHEN(15) /* COUNT */
             COUNT = OPER;
           WHEN(16) DO; /* HARDCOPY */
             HARDCOPY ='1'B;
             R = STLINEN(1,'MODE=OFF');
             END;
           WHEN(17) /* INFILE   */
             INFI = OPER;
           WHEN(18) /* NOFREE   */
             NOFSW='1'B;
           WHEN(19) DO; /* PDF   */
             IF RECTMP->CMDDATA^=''
               THEN DO;
                 ERRMSG='PDFC KEYWORD CONFLICTS WITH OTHER KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             RECTMP->CMDDATA='PDF';
             RECTMP->HEXMODE,RECTMP->RHNONSW,NOFSW='1'B;
             END;
           WHEN(20) DO; /* PDFC   */
             IF RECTMP->CMDDATA^=''
               THEN DO;
                 ERRMSG='PDFC KEYWORD CONFLICTS WITH OTHER KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             RECTMP->CMDDATA='PDFC';
             RECTMP->HEXMODE,RECTMP->RHNONSW,NOFSW='1'B;
             END;
           WHEN(21) DO; /* PDFE   */
             IF RECTMP->CMDDATA^=''
               THEN DO;
                 ERRMSG='PDFE KEYWORD CONFLICTS WITH OTHER KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             RECTMP->CMDDATA='PDFE';
             RECTMP->RHNONSW,NOFSW,LOSW='1'B;
             END;
           WHEN(22) /* INPUT  */
             INPBUF=OPER;
           WHEN(23) /* SUPPORT */
             RECTMP->RHSUPSW='1'B;
           WHEN(24) /* PROFILE */
             PROFSW='1'B;
           WHEN(25) /* NOPROMPT */
             ALCODE='NPR';
           WHEN(26) DO; /* CLIST */
             #SYMC  =#SYMC_CLIST;  /* SET FOR CLIST SYMC */
             #SYMCL =#SYMCL_CLIST; /* SET FOR CLIST SYMC */
             #SETA  =#SETA_CLIST;  /* SET FOR CLIST SET@ */
             #SETC  =#SETC_CLIST;  /* SET FOR CLIST SET@ */
             END;
           WHEN(27) DO; /* RECSIZE */
             RECSIZSW='1'B;
             L=OPER;
             END;
           WHEN(28) DO; /* OUTFI */
             IF OUTDSN^='' × OUTFI^=''
               THEN DO;
                 ERRMSG='DUPLICATE OUT- KEYWORDS';
                 SIGNAL CONDITION(BADSSE);
                 END;
             OUTFI = OPER;
             END;
           WHEN(29) DO; /* FAM */
             IF OPER=''
               THEN DO;
                 ERRMSG='FAM KEYWORD MUST HAVE PARENTHESIZED VALUE';
                 SIGNAL CONDITION(BADSSE);
                 END;
             OPER=SUBSTR(OPER,PREFIX(OPER,' '));
             OPER=SUBSTR(OPER,1,SUFFIX(OPER,' '));
             J=INDEX(OPER,' ');
             IF J=0
               THEN J=LENGTH(OPER)+1;
             FAMNAME=SUBSTR(OPER,1,J-1);
             CALL SETCAPS(FAMNAME);
             IF J<=LENGTH(OPER)
               THEN DO;
                 OPER=SUBSTR(OPER,J);
                 FAMBUF=SUBSTR(OPER,PREFIX(OPER,' '));
                 END;
             RECTMP->RHFAMSW='1'B;
             FAMNAME=OPER;
             END;
           WHEN(30) /* DBD */
             DBDSW='1'B;
           WHEN(31) /* NODBD */
             NODBDSW='1'B;
           WHEN(32,33)  /* COBOL,YECH  */
             COBOLSW='1'B;
           WHEN(34) /* NOSHOW */
             RECTMP->RHNOSHOWSW,NOSHOWSW='1'B;
           WHEN(35) /* DB2 */
             DB2INSW,DB2OUTSW='1'B;
           WHEN(36) /* DB2IN */
             DB2INSW='1'B;
           WHEN(37) /* DB2OUT */
             DB2OUTSW='1'B;
           WHEN(38) /* SAS */
             DBDSW,SASINSW,SASOUTSW='1'B;
           WHEN(39) /* SASIN */
             DBDSW,SASINSW='1'B;
           WHEN(40) /* SASOUT */
             SASOUTSW='1'B;
           WHEN(41) /* INTERNAL */
             INTERNALSW,RECTMP->HEXMODE='1'B;
           WHEN(42) DO; /* @@@@ */
             J=0; /* DUMMY OPERATION */
             END;
           WHEN(43) /* BPAM */
             ALCODE='BPA';
           WHEN(44) DO; /* VOL */
             FAMVOL=OPER;
             CALL SETCAPS(FAMVOL);
             END;
           WHEN(45) DO; /* OVOL */
             FAMOVOL=OPER;
             CALL SETCAPS(FAMOVOL);
             END;
           WHEN(46) RHDEBUGSW='1'B;  /* DEBUG */
           OTHERWISE;
           END; /* SELECT */
         END;
     END;
   CALL SETCAPS(CMDBUF);
   IF CMDBUF='ABS' & RH_XCOMPTR^=NULL & RHPTR=NULL
     THEN FAMNAME='ABESFAM'; /* IT IS PROC ABES INVOKED FROM SAS */
   IF FAMNAME^='' & SYSSW
     THEN DO;
       ERRMSG='FAM AND SYSOUT KEYWORDS ARE INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF DBDSW & NODBDSW
     THEN DO;
       ERRMSG='DBD AND NODBD KEYWORDS ARE INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF SYSSW & (OUTFI^='' × INFI^='')
     THEN DO;
       ERRMSG='SYSOUT, OUTFI, AND INFI ARE MUTUALLY EXCLUSIVE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF INFI^='' & FAMVOL^=''
     THEN DO;
       ERRMSG='VOL AND INFI ARE MUTUALLY EXCLUSIVE';
       SIGNAL CONDITION(BADSSE);
       END;
   IF OUTFI^='' & FAMOVOL^=''
     THEN DO;
       ERRMSG='OVOL AND OUTFI ARE MUTUALLY EXCLUSIVE';
       SIGNAL CONDITION(BADSSE);
       END;
   SELECT;
     WHEN(INFI='') DO;
       CALL SETCAPS(PARY(1));
       INDSN = PARY(1);
       END;
     WHEN(DB2INSW) DO;
       ERRMSG='DB2IN AND INFI KEYWORDS INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
     WHEN(SASINSW) DO;
       ERRMSG='SASIN AND INFI KEYWORDS INCOMPATIBLE';
       SIGNAL CONDITION(BADSSE);
       END;
     OTHERWISE;
     END; /* SELECT */
   IF INDSN^=''
     THEN IF SUBSTR(INDSN,1,1)='{' & SUBSTR(INDSN,LENGTH(INDSN),1)='}'
       THEN DO;
         IF RHPTR^=NULL
           THEN IF INDDN^=NULL
             THEN IF INDDN->ALCMEM^=''
               THEN INDSN=''''××INDDN->ALCDSN××'('××
                 SUBSTR(INDSN,2,LENGTH(INDSN)-2)××')''';
         IF SUBSTR(INDSN,1,1)='{'
           THEN DO;
             ERRMSG=INDSN××' CAN''T BE ALLOCATED';
             SIGNAL CONDITION(BADSSE);
             END;
         END;
   IF NOPRSW
     THEN DO;
       IF INDSN^='' & INFI=''
         THEN IF SUBSTR(INDSN,1,1)^=''''
           THEN INDSN=''''××INDSN××'''';
       IF OUTDSN^=''
         THEN IF SUBSTR(OUTDSN,1,1)^=''''
           THEN OUTDSN=''''××OUTDSN××'''';
       END;
   IF PARQCK(1)
     THEN IF INDSN^=''
       THEN IF SUBSTR(INDSN,1,1)^=''''
         THEN INDSN=''''××INDSN××'''';

   /* NOW ALLOCATE THE INPUT AND OUTPUT FILES AND INITIALIZE */
   IF FAMNAME='' × FAMNAME='FAMPDSR'
     THEN DO;
       IF SYSSW /* SYSOUT? */
         THEN CALL SETSYSOUT;

       /* FIRST ESTABLISH THE INPUT FILE */

       IF INFI^=''
         THEN CALL SETINFI;
         ELSE IF INDSN^=''
           THEN SELECT;
             WHEN(DB2INSW) CALL SETDB2IN;
             WHEN(SASINSW) CALL SETSASIN;
             OTHERWISE     CALL SETINDSN;
             END; /* SELECT */

       /* NOW SET UP THE OUTPUT FILE */

       IF OUTDSN='' & OUTFI=''
         THEN RECTMP->OUTDDN=RECTMP->INDDN;
         ELSE IF OUTFI^=''
           THEN CALL SETOUTFI;
           ELSE SELECT;
             WHEN(DB2OUTSW) CALL SETDB2OUT;
             WHEN(SASOUTSW) CALL SETSASOUT;
             OTHERWISE      CALL SETOUTDSN;
             END; /* SELECT */

       IF RECTMP->OUTDDN ^= NULL & ^RECSIZSW
         THEN RECTMP->BUFPTR=ADDR(RECTMP->OUTDDN->ALCRECL);
         ELSE ALLOCATE BUFSTR SET(RECTMP->BUFPTR);
       END;

   IF RHPTR = NULL
     THEN DO;
       RECTMP->RHLST,RECTMP->RHNXT = NULL;
       LSTRHEL,NXTRHEL = RECTMP;
       RECTMP->RHCST = 1;
       RECTMP->RHCEN = SCREENLEN-4;
       END;
     ELSE DO;
       IF RECTMP->RHSUPSW × RECTMP->RHNOSHOWSW
         THEN I=0;
         ELSE I=((RHCEN-RHCST)+1);
       IF I < 4
         THEN DO; /* PUT IT AT END OF Q */
           RECTMP->RHCEN,RECTMP->RHCST = 0;
           DO RECLUP=NXTRHEL REPEAT RECLUP->RHNXT
             WHILE(RECLUP->RHNXT ^= NULL);
             END;
           RECLUP->RHNXT,LSTRHEL = RECTMP;
           RECTMP->RHLST = RECLUP;
           RECTMP->RHNXT = NULL;
           END;
         ELSE DO;
           I = I/2;
           RECTMP->RHCST = RHPTR->RHCST+I;
           RECTMP->RHCEN = RHPTR->RHCEN;
           RHPTR->RHCEN = RECTMP->RHCST-1;
           RECTMP->RHLST = RHPTR;
           RECTMP->RHNXT = RHPTR->RHNXT;
           RHPTR->RHNXT = RECTMP;
           IF RECTMP->RHNXT = NULL
             THEN LSTRHEL = RECTMP;
             ELSE RECTMP->RHNXT->RHLST = RECTMP;
           END;
       END;
   IF RECTMP->RHNAME='====>'
     THEN CALL #ABEDFN(RECTMP,RHHDRPT); /* CALL ABEDFN */
   IF RECTMP->INDDN^=NULL
     THEN RECTMP->LOFLAG=SUBSTR(RECTMP->INDDN->ALCFLAG,8,1);
     ELSE RECTMP->LOFLAG='0'B;
   IF LOSW
     THEN RECTMP->LOFLAG='1'B;
   IF HISW
     THEN RECTMP->LOFLAG='0'B;
   IF FAMNAME^=''
     THEN DO;
       CALL PLILOAD(FAMNAME,RECTMP->RHFAMEP,LOADRET);
       IF LOADRET^=0
         THEN DO;
           ERRMSG='FAM MODULE='××FAMNAME××' NOT FOUND';
           SIGNAL CONDITION(BADSSE);
           END;
       DUMPTR=RECTMP->RHFAMEP(RHHDRPT,RECTMP,ADDR(PARSSTR),0);
       END;
   ALCPTR=RECTMP->OUTDDN;
   IF ALCPTR=NULL
     THEN ALCPTR=RECTMP->INDDN;
   IF ALCPTR=NULL
     THEN IF RHPTR^=NULL
       THEN DO;
         ALCPTR=RHPTR->OUTDDN;
         IF ALCPTR=NULL
           THEN ALCPTR=RHPTR->INDDN;
         IF ALCPTR=NULL
           THEN DO;
             RECTMP->RHLRECL=RHPTR->RHLRECL;
             RECTMP->RHBLKL=RHPTR->RHBLKL;
             RECTMP->RHRECFM=RHPTR->RHRECFM;
             RECTMP->RHNONSW=RECTMP->RHNONSW × RHPTR->RHNONSW;
             END;
           ELSE DO;
             RECTMP->RHLRECL=ALCRECL;
             RECTMP->RHBLKL=ALCBLKL;
             RECTMP->RHRECFM=ALCRECFM;
             RECTMP->RHNONSW=RECTMP->RHNONSW × SUBSTR(ALCFLAG,6,1);
             END;
         END;
       ELSE DO; /* SET MY OWN DEFAULTS */
         RECTMP->RHLRECL=80;
         RECTMP->RHBLKL=1680;
         RECTMP->RHRECFM='10010000'B;
         END;
     ELSE DO;
       RECTMP->RHLRECL=ALCRECL;
       RECTMP->RHBLKL=ALCBLKL;
       RECTMP->RHRECFM=ALCRECFM;
       RECTMP->RHNONSW=RECTMP->RHNONSW × SUBSTR(ALCFLAG,6,1);
       END;
   RHPTR = RECTMP;
   IF RHNONSW
     THEN DO;
       IF INDDN^=NULL
         THEN SUBSTR(INDDN->ALCFLAG,6,1)='1'B;
       IF OUTDDN^=NULL
         THEN SUBSTR(OUTDDN->ALCFLAG,6,1)='1'B;
       END;
   IF NOFSW
     THEN DO;
       IF INDDN^=NULL
         THEN SUBSTR(INDDN->ALCFLAG,5,1)='1'B;
       IF OUTDDN^=NULL
         THEN SUBSTR(OUTDDN->ALCFLAG,5,1)='1'B;
       END;
   IF INDDN^=NULL & ^RHFAMSW & ^DB2INSW & ALCODE^='BPA'
     THEN DO;
       IF SASINSW
         THEN INDDN->ALCDDN='SASOUT';
       CALL #REFRESH(RHPTR,RHHDRPT,FLINE,COUNT);
       RHNONSW=RHNONSW × SUBSTR(INDDN->ALCFLAG,6,1);
         /* TURN ON RHNONSW IF IT WAS DISCOVERED IN REFRESH */
       IF SASINSW
         THEN INDDN->ALCDDN=SASINDDN;
       END;
   IF RECTMP->TERMFLAG
     THEN DO;
       RHVVTSW='1'B;
       CALL SYSLOAD(PGMNAME,TERMEP);
       CMODEFLAG ='1'B;
       END;
   IF ^NODBDSW & ^DB2INSW
     THEN IF DBDSW
       THEN I=#CMD('USE IN',RHPTR,RHHDRPT);
       ELSE IF INDDN^=NULL
         THEN DO; /* CHECK FOR .DB QUALIFIER */
           DO I=LENGTH(INDDN->ALCDSN) TO 1 BY -1
             WHILE(SUBSTR(INDDN->ALCDSN,I,1)^='.');
             END;
           IF SUBSTR(INDDN->ALCDSN,I+1)='DB'
             THEN I=#CMD('USE IN',RHPTR,RHHDRPT);
           END;
   IF CMDDATA='TRANSLAT'
     THEN HEXMODE='0'B;
   IF CMDDATA='PDFE'
     THEN DO;
       RECTMP->HEXMODE='0'B;
       RECTMP->MSGDATA='';
       END;
   IF INPBUF^=''
     THEN CALL #PUSHLILO(RHPTR,RH_STACK,RH_QUEUE,INPBUF);
   /* CALL ABECP */
   IF PROFSW
     THEN IF RHLST=NULL & RHNXT=NULL
       THEN DO;
         I=#CMD('RUN $PROFILE',RHPTR,RHHDRPT);
         MSGDATA='';
         END;
   RHRC = 0;

 SETDB2IN: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED IF THE DB2IN KEYWORD WAS SPECIFIED TO OBTAIN THE TABLE FROM  *
 * DB2.                                                                *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K) FIXED BIN;
   DCL LAST PTR;

   LAST,RHNAMPTR,ALCPTR=NULL;
   I=#DB2GET('SELECT * FROM '××INDSN,SUBRTNE,#TERM); /* GO GET TABLE */
   IF I^=0
     THEN DO;
       ERRMSG='ERROR GETTING DB2 TABLE, RC='××I;
       SIGNAL CONDITION(BADSSE);
       END;
   ALCPTR=RECTMP->INDDN;
   RECTMP->RECPTR=RECTMP->NXTHDR;
   IF RECTMP->RECPTR=RECTMP
     THEN RECTMP->CURSEQ=0;
     ELSE RECTMP->CURSEQ=RECTMP->RECPTR->RECSEQ;
   RECTMP->SAVEFLAG='0'B;

 SUBRTNE: PROC(SQLDAPTR) RETURNS(BIT(1));
 /**********************************************************************
 *                                                                     *
 * SUBRTNE IS NESTED IN SETDB2IN, AND IS CALLED BY DB2GET TO PROCESS   *
 * EACH ROW AS IT IS RETRIEVED FROM DB2.                               *
 *                                                                     *
 **********************************************************************/
   DCL SQLDAPTR PTR;

   CALL #ABESUBR(RECTMP,RHHDRPT,SQLDAPTR,ADDR(PARSSTR),ERRMSG,LAST);
   RETURN('1'B);
   END SUBRTNE;

   END SETDB2IN;

 SETDB2OUT: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED IF THE DB2OUT KEYWORD WAS SPECIFIED TO SET UP THE OUTPUT     *
 * ALCSTR.                                                             *
 *                                                                     *
 **********************************************************************/

   IF ^RECSIZSW
     THEN IF RECTMP->INDDN=NULL
       THEN L=256; /* INPUT IS NOT SPECIFIED - TAKE DEFAULTS */
       ELSE L=RECTMP->INDDN->ALCRECL;
   ALLOCATE ALCSTR;
   RECTMP->OUTDDN=ALCPTR;
   RECTMP->BUFPTR=ADDR(ALCRECL);
   ALCDDN='';
   ALCDSN=OUTDSN;
   ALCMEM='';
   ALCFLAG='0'B;
   SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
   SUBSTR(ALCFLAG,9,1)='1'B; /* INDICATE DB2 TABLE */
   ALCSEQOFF,ALCSEQLEN=0;
   ALCBUF='';
   ALCBLKL=ALCRECL;
   ALCRECFM='0'B;
   END SETDB2OUT;

 SETINDSN:PROC;
     CALL #DOALC(INDSN,ALCODE,RECTMP->INDDN,RECTMP,FAMVOL);
     IF RECTMP->INDDN=NULL
       THEN DO;
         ERRMSG='UNABLE TO USE IN DATA SET';
         SIGNAL CONDITION(BADSSE);
         END;
     IF COBOLSW
       THEN DO;
         RECTMP->INDDN->ALCSEQOFF=0;
         RECTMP->INDDN->ALCSEQLEN=6;
         END;
     RECTMP->RHLRECL=RECTMP->INDDN->ALCRECL;
     RECTMP->RHBLKL=RECTMP->INDDN->ALCBLKL;
     RECTMP->RHRECFM=RECTMP->INDDN->ALCRECFM;
     RECTMP->RHNONSW=RECTMP->RHNONSW ×
       SUBSTR(RECTMP->INDDN->ALCFLAG,6,1);
     END SETINDSN;
 SETOUTDSN:PROC;
     CALL #DOALC(OUTDSN,ALCODE,RECTMP->OUTDDN,RECTMP,FAMOVOL);
     IF RECTMP->OUTDDN=NULL
       THEN DO;
         ERRMSG='UNABLE TO USE OUT DATA SET';
         SIGNAL CONDITION(BADSSE);
         END;
     IF COBOLSW
       THEN DO;
         RECTMP->OUTDDN->ALCSEQOFF=0;
         RECTMP->OUTDDN->ALCSEQLEN=6;
         END;
     END SETOUTDSN;
 SETINFI:PROC;
     JFCBCOR=LOW(LENGTH(JFCBCOR));
     CALL SYSJFCB(INFI,JFCBPTR);
     IF SUBSTR(JFCBTSDM,3,1) /* IS IT DD *? */
       THEN DO;
         IF ^RECSIZSW
           THEN L=80;
         B=80;
         SAVRFM='10000000'B; /* FIXED LENGTH RECORDS */
         END;
       ELSE DO;
         OPEN FILE(RH_SEQ_INTERNAL) TITLE(INFI) RECORD INPUT;
         DCBPTR=FINDDCB(INFI);
         IF ^RECSIZSW
           THEN L=DCBLRECL;
         B=DCBBLKSI;
         SAVRFM=DCBRECFM;
         CLOSE FILE(RH_SEQ_INTERNAL);
         END;
     ALLOCATE ALCSTR SET(ALCPTR);
     RECTMP->INDDN=ALCPTR;
     IF OUTDSN='' & OUTFI=''
       THEN RECTMP->OUTDDN=RECTMP->INDDN;
     ALCDDN=INFI;
     ALCDSN=SUBSTR(JFCBDSNM,1,SUFFIX(JFCBDSNM,' '));
     ALCMEM=JFCBELNM;
     ALCFLAG='0'B;
     ALCSEQLEN=8;
     IF SUBSTR(SAVRFM,1,2)^='10'B
       THEN SUBSTR(ALCFLAG,3,1)='1'B; /* VARYING RECORDS */
     IF COBOLSW
       THEN DO;
         ALCSEQOFF=0;
         ALCSEQLEN=6;
         END;
       ELSE IF SUBSTR(ALCFLAG,3,1)
         THEN ALCSEQOFF=0;
         ELSE ALCSEQOFF=ALCRECL-8;
     SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
     ALCBLKL=B;
     ALCRECFM=SAVRFM;
     END SETINFI;
   SETOUTFI:PROC;
     DCL OUTDFT FILE RECORD OUTPUT ENV(FB RECSIZE(80) BLKSIZE(6400));
     CALL SYSJFCB(OUTFI,JFCBPTR);
     ON UNDEFINEDFILE(RH_SEQ_INTERNAL)BEGIN;
       ON UNDEFINEDFILE(OUTDFT) BEGIN;
         ERRMSG='CAN''T OPEN FILE '××OUTFI;
         SIGNAL CONDITION(BADSSE);
         END;
       OPEN FILE(OUTDFT) TITLE(OUTFI);
       DCBPTR=FINDDCB(OUTFI);
       IF ^RECSIZSW
         THEN L=DCBLRECL;
       B=DCBBLKSI;
       SAVRFM=DCBRECFM;
       CLOSE FILE(OUTDFT);
       GOTO BYCLOS;
       END;
     OPEN FILE(RH_SEQ_INTERNAL) TITLE(OUTFI) RECORD OUTPUT;
     IF SUBSTR(JFCBTSDM,3,1) /* IS IT SYSOUT? */
       THEN DO;
         IF RECTMP->INDDN^=NULL
           THEN DO;
             IF ^RECSIZSW
               THEN L=RECTMP->INDDN->ALCRECL;
             B=RECTMP->INDDN->ALCBLKL;
             IF SUBSTR(RECTMP->INDDN->ALCFLAG,3,1)
               THEN SAVRFM='01000000'B; /* VARYING LENGTH RECORDS */
               ELSE SAVRFM='10000000'B; /* FIXED LENGTH RECORDS */
             END;
           ELSE DO;
             IF ^RECSIZSW
               THEN L=80;
             B=80;
             SAVRFM='10000000'B; /* FIXED LENGTH RECORDS */
             END;
         END;
       ELSE DO;
         DCBPTR=FINDDCB(OUTFI);
         IF ^RECSIZSW
           THEN L=DCBLRECL;
         B=DCBBLKSI;
         SAVRFM=DCBRECFM;
         END;
     CLOSE FILE(RH_SEQ_INTERNAL);
 BYCLOS:;
     ALLOCATE ALCSTR SET(ALCPTR);
     RECTMP->OUTDDN=ALCPTR;
     ALCDDN=OUTFI;
     ALCDSN=SUBSTR(JFCBDSNM,1,SUFFIX(JFCBDSNM,' '));
     ALCMEM=JFCBELNM;
     ALCFLAG='0'B;
     ALCSEQLEN=8;
     IF SUBSTR(SAVRFM,1,2)^='10'B
       THEN SUBSTR(ALCFLAG,3,1)='1'B; /* VARYING RECORDS */
     IF COBOLSW
       THEN DO;
         ALCSEQOFF=0;
         ALCSEQLEN=6;
         END;
       ELSE IF SUBSTR(ALCFLAG,3,1)
         THEN ALCSEQOFF=0;
         ELSE ALCSEQOFF=ALCRECL-8;
     SUBSTR(ALCFLAG,5,1)='1'B; /* DON'T FREE AT END */
     ALCBLKL=B;
     ALCRECFM=SAVRFM;
     END SETOUTFI;

 SETSASIN: PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED IF THE SASIN KEYWORD WAS SPECIFIED TO OBTAIN THE TABLE FROM  *
 * SAS.                                                                *
 *                                                                     *
 **********************************************************************/
   DCL (I,J,K) FIXED BIN;
   DCL LAST PTR;
   DCL REC CHAR(80);
   DCL MEM CHAR(8) VAR;
   DCL RHP PTR;

   I=INDEX(INDSN,'(');
   J=INDEX(INDSN,')');
   IF I=0 × J=0
     THEN DO;
       ERRMSG='FOR SAS INPUT, THE DSNAME MUST BE LIBRARY(MEMBER)';
       SIGNAL CONDITION(BADSSE);
       END;
   MEM=SUBSTR(INDSN,I+1,J-I-1);
   IF J=LENGTH(OUTDSN)
     THEN INDSN=SUBSTR(INDSN,1,I-1);
     ELSE INDSN=SUBSTR(INDSN,1,I-1)××SUBSTR(INDSN,J+1);
   ALCODE='SAS';
   CALL #DOALC(INDSN,ALCODE,RECTMP->INDDN,NULL,'');
   IF RECTMP->INDDN=NULL
     THEN DO;
       ERRMSG='ERROR ALLOCATING SAS LIBRARY='××INDSN;
       SIGNAL CONDITION(BADSSE);
       END;
   ALCPTR=RECTMP->INDDN;
   RECTMP->BUFPTR=ADDR(ALCRECL);
   SASINDDN=ALCDDN; /* SAVE DDNAME FOR REFRESH */
   ALCMEM=MEM;
   SUBSTR(ALCFLAG,6,1)='1'B; /* NONUM */
   SUBSTR(ALCFLAG,10,1)='1'B; /* INDICATE IT IS SAS TABLE */
   ALCSEQOFF,ALCSEQLEN=0;
   CALL #DOCMD('ALLOC FI(SASIN) NEW TR SP(1 1) LR(80) BL(400) RECFM(F)
     REUSE','');
   RHRC=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   IF RHRC=0
     THEN DO;
       CALL #DOCMD('ALLOC FI(SASOUT) NEW TR SP(100 10) LR(80) BL(8000)
         RECFM(F B) REUSE','');
       RHRC=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
       END;
   IF RHRC^=0
     THEN DO;
       ERRMSG='ERROR DURING ALLOCATION';
       SIGNAL CONDITION(BADSSE);
       END;
   OPEN FILE(RH_SEQ_INTERNAL) TITLE('SASIN') RECORD OUTPUT;
   REC='PROC SASTOPS OUTDD=SASOUT DATA='××
     SUBSTR(ALCDDN,1,SUFFIX(ALCDDN,' '))××'.'××
     SUBSTR(ALCMEM,1,SUFFIX(ALCMEM,' '))××';';
   WRITE FILE(RH_SEQ_INTERNAL) FROM(REC);
   CLOSE FILE(RH_SEQ_INTERNAL);
   CALL #STACK(''); /* STACK UP A NULL LINE */
   CALL #DOCMD('%SAS OPTIONS(''SYSIN=SASIN'') LOG(10)','');
   RHRC=#SYMA(RHHDRPT,RH_SYMTREE,'LASTCC');
   RHP=RECTMP;
   I=#CMD('X',RHP,RHHDRPT);
   IF I^=0
     THEN RHRC=I;
   IF RHRC^=0
     THEN DO;
       ERRMSG='ERROR DURING INVOCATION OF SAS';
       SIGNAL CONDITION(BADSSE);
       END;
   CALL #DOCMD('FREE FI(SASIN)','');
   END SETSASIN;

 SETSASOUT:PROC;
 /**********************************************************************
 *                                                                     *
 * CALLED IF THE SASOUT KEYWORD WAS SPECIFIED.                         *
 *                                                                     *
 **********************************************************************/
   DCL MEM CHAR(8) VAR;
   DCL (I,J) FIXED BIN;

   I=INDEX(OUTDSN,'(');
   J=INDEX(OUTDSN,')');
   IF I=0 × J=0
     THEN DO;
       ERRMSG='FOR SAS OUTPUT, THE DSNAME MUST BE LIBRARY(MEMBER)';
       SIGNAL CONDITION(BADSSE);
       END;
   MEM=SUBSTR(OUTDSN,I+1,J-I-1);
   IF J=LENGTH(OUTDSN)
     THEN OUTDSN=SUBSTR(OUTDSN,1,I-1);
     ELSE OUTDSN=SUBSTR(OUTDSN,1,I-1)××SUBSTR(OUTDSN,J+1);
   ALCODE='SAS';
   CALL #DOALC(OUTDSN,ALCODE,RECTMP->OUTDDN,RECTMP,FAMOVOL);
   IF RECTMP->OUTDDN=NULL
     THEN DO;
       ERRMSG='UNABLE TO USE OUT DATA SET';
       SIGNAL CONDITION(BADSSE);
       END;
   ALCPTR=RECTMP->OUTDDN;
   SASOUTDDN=ALCDDN; /* SAVE DDNAME FOR REFRESH */
   ALCMEM=MEM;
   SUBSTR(ALCFLAG,6,1)='1'B; /* NONUM */
   SUBSTR(ALCFLAG,10,1)='1'B; /* INDICATE IT IS SAS TABLE */
   ALCSEQOFF,ALCSEQLEN=0;
   END SETSASOUT;

 SETSYSOUT: PROC;
     CLOP='';
     RECTMP->CMDDATA='TRANSLAT';
     TSOPREF=#SYMC(RHHDRPT,RH_SYMTREE,PRESYM); /* CALL SYMC */
     IF TSOPREF=''
       THEN TSOPREF=#SYMC(RHHDRPT,RH_SYMTREE,PREUID);
     IF JOBPREF=''
       THEN JOBPREF=TSOPREF;
       ELSE IF CL=''
         THEN CL='2';
     IF OUTDSN^=''
       THEN SYSODSN=OUTDSN;
       ELSE DO;
         I = INDEX(INDSN,'(');
         IF I=0
           THEN I=LENGTH(INDSN)+1;
         SYSODSN=JOBPREF××SUBSTR(INDSN,1,I-1);
         IF CL^=''
           THEN DO;
             CALL SETCAPS(CL);
             CLOP=' CLASS('××CL××') ';
             SYSODSN=SYSODSN××'.CL';
             DO I=1 TO LENGTH(CL);
               IF VERIFY(SUBSTR(CL,I,1),
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')=0
                 THEN SYSODSN=SYSODSN××SUBSTR(CL,I,1);
               END;
             END;
         END;
     CTLGDSN=TSOPREF××'.'××SYSODSN××'.OUTLIST';
     CALL SYSCTLG('NAME',RET,CTLGDSN,CVOL,AREA);
     IF RET^='0'B
       THEN DO; /* DATA SET DOES NOT EXIST */
         OCMD ='FREE ATTR(ABEATR)';
         CALL #DOCMD(OCMD,HELPSTR);
         OCMD ='ATTRIB ABEATR LR(169) BL(19000) RECFM(V B A)';
         CALL #DOCMD(OCMD,HELPSTR);
         OCMD ='ALLOC DA('××SYSODSN××
         '.OUTLIST) NEW US(ABEATR) TR SP('
         ××PRI××' '××SECY××')';
         CALL #DOCMD(OCMD,HELPSTR);
         END;
     OCMD='OUTPUT '××JOBPREF××INDSN××' PRINT('××SYSODSN××') '××CLOP;
     CALL #DOCMD(OCMD,HELPSTR); /* CALL DOCMD */
     INDSN=SYSODSN;
     END SETSYSOUT;
   FINIS:
   END;
