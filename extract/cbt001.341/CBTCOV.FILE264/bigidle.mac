* PROCESS MACRO,CS(60),INTERRUPT;
 /* BIGIDLE */
         % INCLUDE CPINIT1;
         % @CMP = 'O';
         % INCLUDE CPINIT2;
         DCL PSAPTR PTR,
             PSAPTA FIXED BIN(31,0) DEF PSAPTR;
         PSAPTA = 0;
         DCL 1 PSA BASED(PSAPTR),
              2 PSAPAD CHAR(544),
              2 PSAAOLD PTR;
         DCL 1 ASCB BASED(PSAAOLD),
              2 ASCBPAD CHAR(64),
              2 ASCBEJST BIT(64);
         DCL CVTPTR PTR BASED(CVTPTRPTR);
         DCL CVTPTRPTR PTR,
             CVTADJ FIXED BIN(31,0) DEF CVTPTRPTR;
         CVTADJ = 16;
         DCL 1 CVT BASED(CVTPTR),
              2 IEATCBPTR PTR;
         DCL 1 IEATCBP BASED(IEATCBPTR),
              2 PAD CHAR(4),
              2 TCBPTR PTR;
         DCL 1 TCB BASED(TCBPTR),
              2 PAD CHAR(164),
              2 TCBTCTPT PTR;
         TCBTCT = TCBTCTPT; /* FOR EFFICIENCY */
         % INCLUDE TCT;
         @PROC(0,MONITOR,SYSOUT(A),PRINT,RECORD,CC,KEEPL,
           PROMPT(YES_MASTER?),DEBUG);
         DCL PRMPT CHAR(80) VAR;
         PRMPT = SYMC('&PROMPT');
         ECTPCMD = '';
         DCL GETCMD ENTRY(PTR,PTR,CHAR(80) VAR,FIXED BIN(31,0))
           RETURNS(CHAR(256) VAR);
         DCL TIMEDL ENTRY(CHAR(*) VAR)
           RETURNS(FIXED BIN(31,0));
         DCL TDL FIXED BIN(31,0);
         DCL OUTFI RECORD OUTPUT
           ENV(VB RECSIZE(120) BLKSIZE(1200));
         DCL JCLFI RECORD OUTPUT
           ENV(FB RECSIZE(80) BLKSIZE(6400));
         DCL JCLA(7) CHAR(80) STATIC INIT(
      '//S1 EXEC PGM=IEBGENER',
      '//SYSPRINT DD SYSOUT=*',
      '//SYSIN DD DUMMY',
      '//SYSUT2 DD DSN=EUP027.TSOMON.DATA(+1),DISP=(NEW,CATLG,DELETE),',
      '// VOL=REF=EUP027.JOBCARD.CNTL,SPACE=(TRK,(1,1)),',
      '// DCB=(MODLDSCB,LRECL=80,BLKSIZE=6400,RECFM=FB)',
      '//SYSUT1 DD *');
         DCL 1 JCLREC,
              2 CMDNAME CHAR(8),                              /* 1(8) */
                   /* NAME OF COMMAND */
              2 CMDCNT FIXED BIN(31,0),                       /* 9(4) */
                   /* COUNT OF COMMANDS ISSUED - LIST WILL BE IN
                      DESCENDING SEQUENCE ON THIS FIELD */
              2 CMDSRT FIXED BIN(31,0),                      /* 13(4) */
                   /* TOTAL SYSTEM RESPONSE TIME IN .01 SEC */
              2 CMDLSTURT FIXED BIN(31,0),                   /* 17(4) */
                   /* TOTAL USER RESPONSE TIME PRIOR TO COMMAND */
              2 CMDNXTURT FIXED BIN(31,0),                   /* 21(4) */
                   /* TOTAL USER RESPONSE TIME AFTER COMMAND */
              2 CMDEJST FIXED BIN(31,0),                     /* 25(4) */
                   /* TOTAL CPU TIME USED */
              2 CMDLIN FIXED BIN(31,0),                      /* 29(4) */
                   /* # LINES TERMINAL INPUT */
              2 CMDLOUT FIXED BIN(31,0),                     /* 33(4) */
                   /* # LINES TERMINAL OUTPUT */
              2 CMDSRV FIXED BIN(31,0),                      /* 37(4) */
                   /* SERVICE UNITS USED */
              2 CMDEXCP FIXED BIN(31,0),                     /* 41(4) */
                   /* SERVICE UNITS USED */
              2 CMDMSO FIXED BIN(31,0),                      /* 45(4) */
                   /* SERVICE UNITS USED */
              2 CMDIO FIXED BIN(31,0),                       /* 49(4) */
                   /* SERVICE UNITS USED */
              2 CMDCPU FIXED BIN(31,0),                      /* 53(4) */
                   /* SERVICE UNITS USED */
              2 CMDUID CHAR(8),                              /* 57(8) */
                   /* USERID */
              2 SESSTIME FIXED BIN(31,0),                    /* 65(4) */
                   /* TIME AT WHICH SESSION STARTED */
              2 SESSDATE FIXED DEC(7,0),                     /* 69(4) */
                   /* DATE ON WHICH SESSION STARTED */
              2 SESSTSTP FIXED BIN(31,0),                    /* 73(4) */
                   /* TIME AT WHICH SESSION STOPPED */
              2 SESSDSTP FIXED DEC(7,0);                     /* 77(4) */
                   /* DATE ON WHICH SESSION STOPPED */
         DCL OUTREC(12) CHAR(120) VAR STATIC INIT(
           '&CMDNAM EXECUTED &CNT TIMES',
           '   &LSTURT = AVERAGE USER PRE-THINK TIME (.01 SEC)',
           '   &NXTURT = AVERAGE USER POST-THINK TIME (.01 SEC)',
           '   &LIN = AVERAGE TERMINAL LINES IN',
           '   &LOUT = AVERAGE TERMINAL LINES OUT',
           '   &SRT = AVERAGE SYSTEM RESPONSE (.01 SEC)',
           '   &EJST = AVERAGE CPU TIME (.01 SEC)',
           '   &EXCP = AVERAGE EXCP COUNT',
           '   &MSO = AVERAGE MSO SERVICE UNITS',
           '   &IO = AVERAGE IO SERVICE UNITS',
           '   &CPU = AVERAGE CPU SERVICE UNITS',
           '   &SRV = AVERAGE SERVICE UNITS');
         DCL OUTEND(7) CHAR(120) VAR STATIC INIT(
          '',
          'START TIME = &STME, END TIME = &ETME',
          '&TOTCNT TOTAL COMMANDS EXECUTED',
          '&TOTSRT = AVERAGE SYSTEM RESPONSE TIME (.01 SEC)',
          '&TOTURT = AVERAGE USER THINK TIME (.01 SEC)',
          '&BIGTME = IDLE TIME (.01 SEC)',
          '&BIGCNT = # OF THINK TIMES GREATER THAN 10 MIN.');
         DCL (BIGCNT,BIGTME) FIXED BIN(31,0) INIT(0);
         DCL REPREC CHAR(120) VAR;
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         DCL PREFIX ENTRY(CHAR(*),CHAR(*)) RETURNS(FIXED BIN(15,0));
 /*      DCL BIGIDLB ENTRY(FIXED BIN(31,0), FIXED BIN(31,0),
           FIXED BIN(31,0), FIXED BIN(31,0));
 BIGIDLB NO LONGER WORKS WITH MVS/XA */
         DCL SPELDTE ENTRY(CHAR(6)) RETURNS(CHAR(40) VAR);
         DCL (CMDSTR,CMDSTRA) CHAR(256) VAR INIT('');
         CALL IDLESUB('START');
         DCL (DATE,TIME) BUILTIN;
         DCL (TIMESTRT,TIMEEND) FIXED BIN(31,0);
         DCL TEATIME CHAR(9) VAR;
         DCL CURPTR PTR;
         DCL 1 REC BASED(RECPTR),
              2 CMDNAME CHAR(8),                            /* 0(8) */
                   /* NAME OF COMMAND */
              2 SUBTCBP PTR,                                /* 8(4) */
                   /* ADDR OF ASYNCH CMD SUBTASK TCB.
                      WILL BE SET BY SYSCMD.  SHOULD BE
                      SET TO NULL BY ME IF COMMAND IS
                      NOT BEING EXECUTED ASYNCHRONOUSLY */
              2 SUBECB BIT(32),                            /* 12(4) */
                   /* SUBTASK ECB - POSTED ON COMPLETION OF
                      SUBTASK */
              2 STAIECB BIT(32),                           /* 16(4) */
                   /* POSTED ON STAI EXIT FROM SUBTASK.  NOTE
                      THAT THE POSTING OF EITHER SUBECB OR
                      STAIECB SHOULD BE TAKEN TO MEAN THAT THE
                      SUBTASK IS FINISHED. */
              2 STAIECB2 BIT(32),                         /* 20(4) */
                   /* ECB USED IN STAI EXIT */
              2 STAICMPL FIXED BIN(31,0),                 /* 24(4) */
                   /* COMPLETION CODE SET BY STAI EXIT */
              2 STAIPGM CHAR(8),                          /* 28(8) */
                   /* PGM NAME SET BY STAI EXIT */
              2 LSTPTR PTR,                               /* 36(4) */
                   /* PTR TO LAST CMD STRUCTURE */
              2 NXTPTR PTR,                               /* 40(4) */
                   /* PTR TO NEXT CMD STRUCTURE */
              2 CMDCNT FIXED BIN(31,0),
                   /* COUNT OF COMMANDS ISSUED - LIST WILL BE IN
                      DESCENDING SEQUENCE ON THIS FIELD */
              2 CMDSRT FIXED BIN(31,0),
                   /* TOTAL SYSTEM RESPONSE TIME IN .01 SEC */
              2 CMDLSTURT FIXED BIN(31,0),
                   /* TOTAL USER RESPONSE TIME PRIOR TO COMMAND */
              2 CMDNXTURT FIXED BIN(31,0),
                   /* TOTAL USER RESPONSE TIME AFTER COMMAND */
              2 CMDEJST FIXED BIN(31,0),
                   /* TOTAL CPU TIME USED */
              2 CMDLIN FIXED BIN(31,0),
                   /* # LINES TERMINAL INPUT */
              2 CMDLOUT FIXED BIN(31,0),
                   /* # LINES TERMINAL OUTPUT */
              2 CMDSRV FIXED BIN(31,0),
                   /* SERVICE UNITS USED */
              2 CMDEXCP FIXED BIN(31,0),
                   /* TOTAL EXCPS USED */
              2 CMDMSO FIXED BIN(31,0),
                   /* TOTAL MSO SERVICE USED */
              2 CMDIO FIXED BIN(31,0),
                   /* TOTAL IO SERVICE USED */
              2 CMDCPU FIXED BIN(31,0);
                   /* TOTAL CPU SERVICE USED */
         DCL 1 SAVTCT,
                   /* SAVED VALUES FROM LAST COMMAND */
              2 SAVEJST FIXED BIN(31,0),
                   /* JOB TIME REMAINING */
              2 TCTLIN FIXED BIN(31,0),
                   /* # LINES TERMINAL INPUT */
              2 TCTLOUT FIXED BIN(31,0),
                   /* # LINES TERMINAL OUTPUT */
              2 SAVSRV FIXED BIN(31,0),
                   /* SERVICE UNITS USED */
              2 TCTEXCP FIXED BIN(31,0),
                   /* TOTAL EXCPS USED */
              2 SAVEMSO FIXED BIN(31,0),
                   /* MSO SERVICE UNITS */
              2 SAVEIO FIXED BIN(31,0),
                   /* IO SERVICE UNITS */
              2 SAVECPU FIXED BIN(31,0);
         DCL 1 RECHDR,
              2 HDRNAM CHAR(8) INIT(''),
              2 PAD CHAR(28),
              2 LSTHDR PTR,
              2 NXTHDR PTR;
         DCL HDPTR PTR;
         HDPTR = ADDR(RECHDR);
         LSTHDR = HDPTR;
         NXTHDR = HDPTR;
         RECPTR = HDPTR;
         CURPTR = HDPTR;
         DCL # BIT(1);
         DCL TMPNAME CHAR(8);
         DCL BINFLOT BIN FLOAT(53);
         @CMD(CMDBUF,'&CMD',MF=L);
         DCL GREGJUL ENTRY(CHAR(6),FIXED DEC(5,0));
         DCL GREG CHAR(6),
             JUL FIXED DEC(5,0);
 /*      CMDUID = SYMC('&SYSUID');
         IF CMDUID='EUP011' × SYMC('&SYSPREF')='EUP011'
           THEN @WRITE('AHA, I SEE OLD MR. FINICK IS USING BIGIDLE.');
 */      SESSTIME = TOD;
         GREG = DATE;
         GREG = SUBSTR(GREG,3,4) ×× SUBSTR(GREG,1,2);
         CALL GREGJUL(GREG,JUL);
         SESSDATE = JUL;
         ON ATTENTION GO TO LOOP;
         TIMEEND = TOD;
              /* SET INITIAL TIMEEND FOR PREVIOUS COMMAND */
         TEATIME = TIME;
         TEATIME = SUBSTR(TEATIME,1,2)××':'××SUBSTR(TEATIME,3,2)
           ××':'××SUBSTR(TEATIME,5,2);
         @SETL(&STME = TEATIME);
 LOOP:   DO FOREVER=1 REPEAT FOREVER;
              IF CC ^= 0
                   THEN DO;
                        @WRITE('CC = &LASTCC');
                        END;
              CMDSTRA = GETCMD(CPPLUPT,CPPLECT,PRMPT,IKJRET);
              CALL SETCAPS(CMDSTRA);
              IF DEBUG ^= 0
                THEN DO;
                  @SETL(&CMDSTR = CMDSTRA);
                  @WRITE('NEXT COMMAND = &CMDSTR');
                  END;
              IF CMDSTRA = ''
                   THEN IF KEEPL ^= 0
                        THEN CMDSTRA = CMDSTR;
              DO WHILE(LENGTH(CMDSTRA) > 0);
              IC = INDEX(CMDSTRA,'!');
              IF IC = 0
                THEN IC = LENGTH(CMDSTRA)+1;
              CMDSTR = SUBSTR(CMDSTRA,1,IC-1);
              IF IC >= LENGTH(CMDSTRA)
                   THEN CMDSTRA = '';
                   ELSE CMDSTRA = SUBSTR(CMDSTRA,IC+1);
              DO RECPTR=NXTHDR REPEAT NXTPTR WHILE(RECPTR^=HDPTR);
                   IF SUBTCBP ^= NULL
                        THEN IF (SUBSTR(SUBECB,2,1) ×
                          SUBSTR(STAIECB,2,1))
                             THEN DO;
                                  @CMD('',,,STOP,RECPTR);
                                  @SETL(&CMDCNT=REC.CMDCNT);
                                  @SETL(&CMDNAM=REC.CMDNAME);
                @WRITE('ASYNCH COMMAND &CMDNAM NUMBER &CMDCNT ENDED');
                                  CALL CMDEND;
                                  END;
                   END;
              IF CMDSTR ^= ''
                   THEN DO;
                        IF CMDSTR = 'END IDLE'
                             THEN LEAVE LOOP;
                        IF LENGTH(CMDSTR)>=6
                         THEN IF SUBSTR(CMDSTR,1,6)='LOGOFF'
                          THEN DO;
                           IF LENGTH(CMDSTR)>6
                             THEN DO;
                               TDL = TIMEDL(SUBSTR(CMDSTR,8));
                               IF TDL >= 0
                                 THEN DELAY(TDL);
                                 ELSE DO;
                                   @WRITE('ERROR ON LOGOFF CMD');
                                   LEAVE LOOP;
                                   END;
                               END;
                           @CMD('LOGOFF');
                           LEAVE LOOP;
                           END;
                        # = '0'B;
                        TMPNAME = '';
                        DO UNTIL(TMPNAME ^= '#');
                             IF SUBSTR(CMDSTR,1,1) = ' '
                                  THEN DO;
                                       CMDSTR = SUBSTR(CMDSTR,
                                         PREFIX(CMDSTR,' '));
                                       END;
                             I = INDEX(CMDSTR,' ');
                             IF I = 0
                                  THEN I = LENGTH(CMDSTR)+1;
                             TMPNAME = SUBSTR(CMDSTR,1,I-1);
                             IF TMPNAME = '#'
                                  THEN DO;
                                       # = '1'B;
                                       CMDSTR=SUBSTR(CMDSTR,I+1);
                                       END;
                             END;
                        @SETL(&CMD=CMDSTR);
                        IF MONITOR × #
                             THEN CALL CMDSTRT('CMD');
                        IF #
                             THEN DO;
                                  @CMD(CMDBUF,,,START,RECPTR);
                                  @SETL(&CMDCNT = REC.CMDCNT);
                                  @SETL(&CMDNAM = REC.CMDNAME);
               @WRITE('ASYNCH COMMAND &CMDNAM NUMBER &CMDCNT STARTED');
                                  END;
                             ELSE DO;
                                  @CMD(CMDBUF);
                                  IF MONITOR
                                      THEN CALL CMDEND;
                                  END;
                        END;
              END;
              END;
 ATTN:
         IF MONITOR
              THEN CALL CMDSTRT('EOJ');
         CALL IDLESUB('END');
         IF MONITOR
              THEN DO;
                   OUTEND(1) = SPELDTE(DATE);
                   TEATIME = TIME;
                   TEATIME = SUBSTR(TEATIME,1,2)××':'××
                     SUBSTR(TEATIME,3,2)××':'××SUBSTR(TEATIME,5,2);
                   @SETL(&ETME = TEATIME);
                   IF PRINT^=0
                        THEN DO;
                             @CMD('FREE FI(OUTFI)');
                             @CMD('ALLOC FI(OUTFI) SYSOUT(&SYSOUT)');
                             END;
                   IF RECORD^=0
                        THEN DO;
                             @ALLOC(DA(BPRT.CNTL),WORK);
                             OPEN FILE(JCLFI) TITLE(DA08DDN);
                             DO I = 1 TO 7;
                                  WRITE FILE(JCLFI) FROM(JCLA(I));
                                  END;
                             SESSTSTP = TOD;
                             GREG = DATE;
                             GREG = SUBSTR(GREG,3,4)××SUBSTR(GREG,1,2);
                             CALL GREGJUL(GREG,JUL);
                             SESSDSTP = JUL;
                             END;
                   TOTCNT,TOTSRT,TOTURT = 0;
                   DO RECPTR=NXTHDR REPEAT NXTPTR WHILE(RECPTR^=HDPTR);
                        TOTCNT=TOTCNT+REC.CMDCNT;
                        TOTSRT=TOTSRT+REC.CMDSRT;
                        TOTURT=TOTURT+REC.CMDLSTURT;
                        REC.CMDSRT=REC.CMDSRT/REC.CMDCNT;
                        REC.CMDLSTURT=REC.CMDLSTURT/REC.CMDCNT;
                        REC.CMDNXTURT=REC.CMDNXTURT/REC.CMDCNT;
                        REC.CMDEJST=REC.CMDEJST/REC.CMDCNT;
                        REC.CMDLIN=REC.CMDLIN/REC.CMDCNT;
                        REC.CMDLOUT=REC.CMDLOUT/REC.CMDCNT;
                        REC.CMDSRV=REC.CMDSRV/REC.CMDCNT;
                        REC.CMDEXCP=REC.CMDEXCP/REC.CMDCNT;
                        REC.CMDMSO = REC.CMDMSO/REC.CMDCNT;
                        REC.CMDIO = REC.CMDIO/REC.CMDCNT;
                        REC.CMDCPU = REC.CMDCPU/REC.CMDCNT;
                        IF RECORD ^= 0
                             THEN DO;
                                  JCLREC = REC, BYNAME;
                                  WRITE FILE(JCLFI) FROM(JCLREC);
                                  END;
                        @SETL(&EJST=REC.CMDEJST);
                        @SETL(&LIN=REC.CMDLIN);
                        @SETL(&LOUT=REC.CMDLOUT);
                        @SETL(&SRV=REC.CMDSRV);
                        @SETL(&EXCP=REC.CMDEXCP);
                        @SETL(&MSO=REC.CMDMSO);
                        @SETL(&IO=REC.CMDIO);
                        @SETL(&CPU=REC.CMDCPU);
                        @SETL(&CMDNAM=REC.CMDNAME);
                        @SETL(&CNT=REC.CMDCNT);
                        @SETL(&SRT=REC.CMDSRT);
                        @SETL(&LSTURT=REC.CMDLSTURT);
                        @SETL(&NXTURT=REC.CMDNXTURT);
                        DO I = 1 TO 12;
                             @REP(REPREC=OUTREC(I));
                             @WRITE(REPREC,MF=S);
                             IF PRINT^=0
                                  THEN WRITE FILE(OUTFI) FROM(REPREC);
                             END;
                        END;
                   TOTSRT=TOTSRT/TOTCNT;
                   TOTURT=TOTURT/TOTCNT;
                   @SETL(&TOTCNT=TOTCNT);
                   @SETL(&TOTSRT=TOTSRT);
                   @SETL(&TOTURT=TOTURT);
                   @SETL(&BIGTME = BIGTME);
                   @SETL(&BIGCNT = BIGCNT);
                   DO I = 1 TO 7;
                        @REP(REPREC=OUTEND(I));
                        @WRITE(REPREC,MF=S);
                        IF PRINT^=0
                             THEN WRITE FILE(OUTFI) FROM(REPREC);
                        END;
                   IF PRINT^=0
                        THEN DO;
                             CLOSE FILE(OUTFI);
                             @CMD('FREE FI(OUTFI) SYSOUT(&SYSOUT)');
                             END;
                   IF RECORD^=0
                        THEN DO;
                             CLOSE FILE(JCLFI);
                             @CMD('SUB (''EUP027.JOBCARD.CNTL'' BPRT');
                             @CMD('DELETE BPRT.CNTL');
                             END;
                   END;
 /* CMDSTRT - GIVEN CONTROL JUST BEFORE COMMAND IS STARTED */
 CMDSTRT:  PROC(EOJSTR);
         DCL EOJSTR CHAR(3);
         DCL (I,J,ETME,NEWCNT,NEWSRV) FIXED BIN(31,0);
         DCL (NEWMSO,NEWIO,NEWCPU) FIXED BIN(31,0);
         DCL SAVPTR PTR;
         IF EOJSTR ^= 'EOJ'
           THEN DO;
             DO RECPTR=NXTHDR REPEAT NXTPTR WHILE(RECPTR^=HDPTR)
               UNTIL((NXTPTR=HDPTR) × (TMPNAME=REC.CMDNAME));
                  END;
             IF (RECPTR^=HDPTR) & (TMPNAME=REC.CMDNAME)
                 THEN DO;
                   REC.CMDCNT = REC.CMDCNT + 1;
                   IF LSTPTR^=HDPTR
                     THEN DO WHILE(REC.CMDCNT>LSTPTR->REC.CMDCNT)
                       UNTIL(LSTPTR=HDPTR);
                       RECPTR->NXTPTR->LSTPTR=RECPTR->LSTPTR;
                       RECPTR->LSTPTR->NXTPTR=RECPTR->NXTPTR;
                       RECPTR->NXTPTR=RECPTR->LSTPTR;
                       RECPTR->LSTPTR=RECPTR->NXTPTR->LSTPTR;
                       RECPTR->LSTPTR->NXTPTR=RECPTR;
                       RECPTR->NXTPTR->LSTPTR=RECPTR;
                           END;
                   END;
                 ELSE RECPTR = ADDREC(RECPTR,TMPNAME);
             SUBTCBP = NULL;
             END;
         TIMESTRT = TOD;
         ETME = TIMESTRT-TIMEEND;
         IF ETME > 60000 /* THINK TIME > 10 MIN? */
              THEN DO;
                   BIGTME = BIGTME + ETME;
                   BIGCNT = BIGCNT + 1;
                   ETME = 6000;
                   END;
 /*      CALL BIGIDLB(NEWMSO,NEWIO,NEWCPU,NEWCNT);
 BIGIDLB NO LONGER WORKS WITH MVS/XA */
 NEWMSO,NEWIO,NEWCPU,NEWCNT=0;
         NEWSRV = NEWMSO + NEWIO + NEWCPU;
         BINFLOT = SUBSTR(ASCBEJST,1,52); /* SRDL R2,12 */
         BINFLOT = (BINFLOT/10000.0) + .5;
         I = BINFLOT; /* I = CPU TIME, ROUNDED TO .01 SEC */
         IF CURPTR ^= HDPTR
              THEN DO;
                   CURPTR->REC.CMDNXTURT=CURPTR->REC.CMDNXTURT+ETME;
                   CURPTR->REC.CMDEJST=CURPTR->REC.CMDEJST+
                     I-SAVEJST;
                   CURPTR->REC.CMDLIN=CURPTR->REC.CMDLIN+
                     TCT.TCTLIN-SAVTCT.TCTLIN;
                   CURPTR->REC.CMDLOUT=CURPTR->REC.CMDLOUT+
                     TCT.TCTLOUT-SAVTCT.TCTLOUT;
                   CURPTR->REC.CMDSRV=CURPTR->REC.CMDSRV+
                     NEWSRV-SAVSRV;
                   CURPTR->REC.CMDEXCP=CURPTR->REC.CMDEXCP+
                     NEWCNT-SAVTCT.TCTEXCP;
                   CURPTR->REC.CMDMSO=CURPTR->REC.CMDMSO+
                     NEWMSO-SAVEMSO;
                   CURPTR->REC.CMDIO=CURPTR->REC.CMDIO+
                     NEWIO-SAVEIO;
                   CURPTR->REC.CMDCPU=CURPTR->REC.CMDCPU+
                     NEWCPU-SAVECPU;
                   END;
         IF EOJSTR ^= 'EOJ'
              THEN DO;
                   SAVTCT=TCT, BY NAME;
                   SAVEJST = I;
                   SAVTCT.TCTEXCP = NEWCNT;
                   SAVEMSO = NEWMSO;
                   SAVEIO = NEWIO;
                   SAVECPU = NEWCPU;
                   SAVSRV = NEWSRV;
                   CURPTR = RECPTR;
                   REC.CMDLSTURT=REC.CMDLSTURT+ETME;
                   END;
         END CMDSTRT;
 /* CMDEND - RECEIVES CONTROL JUST AFTER END OF COMMAND */
 CMDEND:  PROC;
         IF MONITOR
              THEN DO;
                   TIMEEND = TOD;
                   REC.CMDSRT=REC.CMDSRT+(TIMEEND-TIMESTRT);
                   END;
         IF (SUBTCBP^=NULL) & ^MONITOR
              THEN DO;
                   LSTPTR->NXTPTR = NXTPTR;
                   NXTPTR->LSTPTR = LSTPTR;
                   FREE REC;
                   END;
         END CMDEND;
 /* ADDREC - SUBROUTINE TO CREATE A NEW COMMAND BUCKET */
 ADDREC: PROC(RECPTR,NAME) RETURNS(PTR);
         DCL NAME CHAR(8);
         DCL (RECPTR,TMPPTR) PTR;
         ALLOCATE REC SET(TMPPTR);
         TMPPTR->LSTPTR = RECPTR;
         TMPPTR->NXTPTR = RECPTR->NXTPTR;
         TMPPTR->LSTPTR->NXTPTR = TMPPTR;
         TMPPTR->NXTPTR->LSTPTR = TMPPTR;
         TMPPTR->REC.CMDCNT = 1;
         TMPPTR->REC.CMDNAME = NAME;
         TMPPTR->REC.CMDSRT,TMPPTR->REC.CMDLSTURT,
           TMPPTR->REC.CMDNXTURT = 0;
         TMPPTR->REC.CMDEJST,TMPPTR->REC.CMDLIN,
           TMPPTR->REC.CMDLOUT = 0;
         TMPPTR->REC.CMDSRV,TMPPTR->REC.CMDEXCP = 0;
         TMPPTR->REC.CMDMSO,TMPPTR->REC.CMDIO,TMPPTR->REC.CMDCPU = 0;
         RETURN(TMPPTR);
         END ADDREC;
 /* TOD
 THIS SUBROUTINE WILL RETURN THE CURRENT TIME-OF-DAY IN .01 SECONDS
 AS FIXED BIN(31,0). */
 TOD:  PROC RETURNS(FIXED BIN(31,0));
         DCL TMSTR CHAR(8);
         TMSTR = TIME;
         DCL (HH,MM,SS) FIXED BIN(31,0);
         HH = SUBSTR(TMSTR,1,2);
         MM = SUBSTR(TMSTR,3,2);
         SS = SUBSTR(TMSTR,5,4);
         RETURN(HH*360000+MM*6000+SS);
         END TOD;
         END;
