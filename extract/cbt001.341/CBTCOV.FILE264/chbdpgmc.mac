 /* CHBDPGMC */
         % INCLUDE CPINIT1;
         % @CMP = 'O';
         % INCLUDE CPINIT2;
         @PROC(1,PLAYER,MYUIDC(),WHITE(),NOSTOP,DISPLAY,NEWGAME);
         DCL CHBDPGM ENTRY RETURNS(CHAR(8) VAR);
         DCL SUFFIX ENTRY(CHAR(*),CHAR(*))
           RETURNS(FIXED BIN(15,0));
         DCL PARMBIT BIT(8) INIT('0'B);
              /* SUBSTR(1,1 = OLD DATA SET
                        2,1 = NOSAVE
                        3,1 = CONTINUOUS PLAY(NOSTOP)
                        4,1 = DISPLAY ONLY
                        5,1 = HARDCOPY DISPLAY */
         DCL SENDNM CHAR(8) VAR;
         DCL UID CHAR(8) VAR;
         DCL WHPARM CHAR(8);
         DCL (OPPONENT(0:1),SAVOPP) CHAR(8) VAR;
         DCL DSNAME CHAR(44) VARYING;
         DCL VSAMFLE RECORD SEQUENTIAL UPDATE KEYED
           ENV(VSAM RECSIZE(20) KEYLENGTH(8) KEYLOC(1));
         DCL VSAMDDN CHAR(8);
         DCL OPTAB(5) CHAR(8) STATIC INIT(
           'NEWGAME',
           'RANKLIST',
           'IDLE',
           'DELETE',
           'NOSAVE');
         DCL RET BIT(32);
         DCL AREA CHAR(265);
         DCL 1 REC BASED(RECPTR) UNALIGNED,
                   /* THIS IS THE DEFINITION OF THE ELEMENTS OF THE
                      MAIN STORAGE CHAIN OF RECORDS */
              2 LSTPTR PTR,
                   /* POINTER TO PREVIOUS RECORD OR NULL */
              2 NXTPTR PTR,
                   /* POINTER TO NEXT RECORD OR NULL */
              2 RECMYUID CHAR(8),
              2 RECOPUID CHAR(8),
              2 RECRANK FIXED BIN(31,0);
         DCL 1 RECHDR,
              2 LSTHDR PTR,
                   /* POINTER TO THE LAST RECORD */
              2 NXTHDR PTR;
                   /* POINTER TO THE FIRST RECORD */
         DCL HDPTR PTR;
         HDPTR = ADDR(RECHDR);
         LSTHDR = HDPTR;
         NXTHDR = HDPTR;
         RECPTR = HDPTR;
         DCL 1 INREC,
              2 MYUID CHAR(8),
              2 OPUID CHAR(8),
              2 RANK FIXED BIN(31,0);
         DCL TMPPTR PTR;
         DCL OPLAB(6) LABEL;
         DCL QNAME CHAR(8) INIT('CHBD') STATIC;
         DCL RNAME CHAR(8) INIT('CHBDCHBD') STATIC;
         DCL ENQRET CHAR(2);
         DCL TRET FIXED BIN(31,0);
         DCL SCREENLEN FIXED BIN(15,0);
         DCL LINESIZE FIXED BIN(15,0);
         CALL TERMCTL('GTSIZE',TRET,SCREENLEN,LINESIZE);
         IF TRET ^= 0
              THEN SIGNAL ERROR;
         IF SCREENLEN = 0
              THEN SUBSTR(PARMBIT,5,1) = '1'B;
         IF DISPLAY ^= 0
              THEN SUBSTR(PARMBIT,4,1) = '1'B;
         WHPARM = SYMC('&WHITE');
         OPPONENT(0),SENDNM = SYMC('&PLAYER');
         IF MYUIDC ^= 0
              THEN UID = SYMC('&MYUIDC');
              ELSE UID = SYMC('&SYSUID');
         IF NOSTOP > 0
              THEN SUBSTR(PARMBIT,3,1) = '1'B;
         DO OPINDX = 1 TO 5 WHILE(SUBSTR(OPTAB(OPINDX),1,
           LENGTH(SENDNM)) ^= SENDNM);
              END;
         IF OPINDX < 5
              THEN CALL VSAMOPEN;
 VSAMOPEN:  PROC;
         CALL SYSENQ(QNAME,RNAME,'SYSTEM','E','HAVE',ENQRET);
         IF ENQRET ^= 'OK'
              THEN SIGNAL ERROR;
         @ALLOC(DA('VSAM.CHBD'),SHR);
         VSAMDDN = DA08DDN;
         OPEN FILE(VSAMFLE) TITLE(VSAMDDN);
         END VSAMOPEN;
         GO TO OPLAB(OPINDX);
 OPLAB(1):  /* NEWGAME */
         NEWGAME = 1;
         CALL CHBDRNK(VSAMFLE,RECHDR);
         ON KEY(VSAMFLE) BEGIN;
              ON KEY(VSAMFLE) SIGNAL ERROR;
              MYUID = UID;
              OPUID = '';
              RANK = 0;
              WRITE FILE(VSAMFLE) FROM(INREC) KEYFROM(UID);
              READ FILE(VSAMFLE) INTO(INREC) KEY(UID);
              END;
         READ FILE(VSAMFLE) INTO(INREC) KEY(UID);
         IF OPUID = 'IDLE'
              THEN OPUID = '';
         IF OPUID ^= ''
              THEN DO;
                   @WRITE('YOU ALREADY HAVE AN OPPONENT');
                   RETURN;
                   END;
         DO RECPTR = LSTHDR REPEAT LSTPTR WHILE(RECPTR ^= HDPTR)
           UNTIL((RECRANK >= RANK) & (RECMYUID ^= UID) &
           (RECOPUID = ''));
              END;
         IF RECPTR = HDPTR
              THEN DO RECPTR = NXTHDR REPEAT NXTPTR WHILE(RECPTR ^=
                HDPTR) UNTIL((RECRANK < RANK) & (RECMYUID ^= UID) &
                (RECOPUID = ''));
                   END;
         IF RECPTR = HDPTR
              THEN DO;
                   @WRITE('SORRY, NO ONE AVAILABLE');
                   END;
              ELSE OPUID = RECMYUID;
         REWRITE FILE(VSAMFLE) FROM(INREC) KEY(MYUID);
         IF OPUID ^= ''
              THEN DO;
                   READ FILE(VSAMFLE) INTO(INREC) KEY(OPUID);
                   OPUID = UID;
                   REWRITE FILE(VSAMFLE) FROM(INREC) KEY(MYUID);
                   CALL VSAMCLOS;
                   IF RECRANK > RANK
                        THEN WHPARM = MYUID;
                        ELSE WHPARM = RECMYUID;
                   OPPONENT(0) = SUBSTR(RECMYUID,1,SUFFIX(RECMYUID,
                     ' '));
                   GO TO OPLAB(6);
                   END;
              ELSE DO;
                   CALL VSAMCLOS;
                   RETURN;
                   END;
 VSAMCLOS:  PROC;
         CLOSE FILE(VSAMFLE);
         @FREE(DA('VSAM.CHBD'),KEEP);
         CALL SYSDEQ(QNAME,RNAME,'SYSTEM',ENQRET);
         IF ENQRET ^= 'OK'
              THEN SIGNAL ERROR;
         END VSAMCLOS;
 OPLAB(2):  /* RANKLIST */
         CALL CHBDRNK(VSAMFLE,RECHDR);
         DO RECPTR = NXTHDR REPEAT NXTPTR WHILE(RECPTR ^= HDPTR);
              @SETL(&DUID = RECMYUID);
              @SETL(&DOPP = RECOPUID);
              @SETL(&DRNK = RECRANK);
      @WRITE('PLAYER = &DUID, RANK = &DRNK, CURRENT OPPONENT = &DOPP');
              END;
         CALL VSAMCLOS;
         RETURN;
 OPLAB(3): /* IDLE */
         READ FILE(VSAMFLE) INTO(INREC) KEY(UID);
         OPUID = 'IDLE';
         REWRITE FILE(VSAMFLE) FROM(INREC) KEY(UID);
         CALL VSAMCLOS;
         RETURN;
 OPLAB(4):  /* DELETE */
         READ FILE(VSAMFLE) INTO(INREC) KEY(UID);
         DELETE FILE(VSAMFLE) KEY(UID);
         CALL VSAMCLOS;
         RETURN;
 OPLAB(5):  /* NOSAVE */
         SUBSTR(PARMBIT,1,3) = '011'B;
         OPPONENT(0) = 'A';
         OPPONENT(1) = 'B';
         GO TO CALLCHBD;
 OPLAB(6):  /* USERID */
         OPPONENT(1) = UID;
         IF OPPONENT(0) > OPPONENT(1)
              THEN DO;
                   SAVOPP = OPPONENT(0);
                   OPPONENT(0) = OPPONENT(1);
                   OPPONENT(1) = SAVOPP;
                   END;
         DSNAME=OPPONENT(0)××'.'××OPPONENT(1)××
           '.CHBD'××(44)' ';
         IF WHPARM ^= ''
              THEN IF WHPARM ^= OPPONENT(0)
                   THEN DO;
                        SAVOPP = OPPONENT(0);
                        OPPONENT(0) = OPPONENT(1);
                        OPPONENT(1) = SAVOPP;
                        END;
         DA08DDN = '';
         DA08PDSN = ADDR(DSNAME);
         CALL SYSCTLG('NAME',RET,DSNAME,'SYSRES',AREA);
         IF RET = '0'B
              THEN DO;
                   @ALLOC(SHR);
                   SUBSTR(PARMBIT,1,1) = '1'B; /* OLD GAME */
                   END;
              ELSE DO;
                   IF NEWGAME=0
                        THEN DO;
                             @SETL(&OPA = OPPONENT(0));
                             @SETL(&OPB = OPPONENT(1));
                             @WRITE('&OPA AND &OPB AREN''T PLAYING');
                             RETURN;
                             END;
                   @ALLOC(NEW,BL(400),SP(1));
                   SUBSTR(PARMBIT,1,1) = '0'B; /* NEW GAME */
                   END;
         IF NEWGAME
              THEN SUBSTR(PARMBIT,1,1) = '0'B;
 CALLCHBD:
         SENDNM = CHBDPGM(DA08DDN,PARMBIT,OPPONENT,UID,CONCEDE,
           TERMRD,TERMWR);
         IF (SENDNM^=UID) & (SENDNM^='')
           & (SUBSTR(PARMBIT,2,2)='00'B)
              THEN DO;
                   @SETL(&SENDNM = SENDNM);
                   @CMD('SEND ''YOUR MOVE'' U(&SENDNM) LOGON');
                   END;
 CONCEDE:  PROC(COMBATANTS,TURN);
         DCL UID CHAR(8) VAR;
         DCL COMBATANTS(0:1) CHAR(8) VAR;
         DCL TURN FIXED BIN(15,0);
         DCL 1 WINNER,
              2 MYUID CHAR(8),
              2 OPUID CHAR(8),
              2 RANK FIXED BIN(31,0);
         DCL 1 LOSER,
              2 MYUID CHAR(8),
              2 OPUID CHAR(8),
              2 RANK FIXED BIN(31,0);
         DCL TMPREC CHAR(20);
         CALL VSAMOPEN;
         ON KEY(VSAMFLE) BEGIN;
              ON KEY(VSAMFLE) SIGNAL ERROR;
              LOSER.MYUID = UID;
              LOSER.OPUID = '';
              LOSER.RANK = 0;
              WRITE FILE(VSAMFLE) FROM(LOSER) KEYFROM(UID);
              READ FILE(VSAMFLE) INTO(LOSER) KEY(UID);
              END;
         UID = COMBATANTS(TURN);
         READ FILE(VSAMFLE) INTO(LOSER) KEY(UID);
         IF LOSER.OPUID ^='IDLE'
           THEN DO;
             LOSER.OPUID = '';
             REWRITE FILE(VSAMFLE) FROM(LOSER) KEY(UID);
             END;
         IF TURN = 0
              THEN I = 1;
              ELSE I = 0;
         ON KEY(VSAMFLE) BEGIN;
              ON KEY(VSAMFLE) SIGNAL ERROR;
              WINNER.MYUID = UID;
              WINNER.OPUID = '';
              WINNER.RANK = 0;
              WRITE FILE(VSAMFLE) FROM(WINNER) KEYFROM(UID);
              READ FILE(VSAMFLE) INTO(WINNER) KEY(UID);
              END;
         UID = COMBATANTS(I);
         READ FILE(VSAMFLE) INTO(WINNER) KEY(UID);
         J = (LOSER.RANK*100)/10;
         J = J/100;
         WINNER.RANK = WINNER.RANK + 100 + J;
         IF WINNER.OPUID^='IDLE'
              THEN WINNER.OPUID = '';
         REWRITE FILE(VSAMFLE) FROM(WINNER) KEY(UID);
         CALL VSAMCLOS;
         END CONCEDE;
 TERMRD:  PROC(RETSTR);
         DCL RETSTR CHAR(*) VAR;
         @READ(RETSTR);
         END TERMRD;
 TERMWR:  PROC(WRSTR);
         DCL WRSTR CHAR(*) VAR;
         @WRITE(WRSTR,MF=S);
         END TERMWR;
         END;
