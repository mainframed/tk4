 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 % NOPRINT;
 /* DENTSUB */
 /* THIS BLOCK OF CODE CAN BE INCLUDED AT THE START OF THE SOURCE
    PROGRAM FOR ANY DENT SUBCOMMAND.  IT WILL SET UP THE PROC STMT
    AND WILL DECLARE ALL OF THE PARAMETERS. */
         %IF @PROCNAME = 'RENT' × @PROCNAME = 'RECURSIVE'
           %THEN %DO;
             %@PROCNAME = @RENTNAME;
             %IF @PROCNAME = 'RENT'
               %THEN %DO;
 @PROCNAME:  PROC(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT)
   OPTIONS(REENTRANT);
   HALT;
                 %END;
               %ELSE %DO;
 @PROCNAME:  PROC(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT)
   OPTIONS(REENTRANT) RECURSIVE;
   HALT;
                 %END;
             %END;
           %ELSE %DO;
             %IF (@PROCNAME ^= '') & (@PROCNAME ^= 'MAIN')
               %THEN %DO;
 @PROCNAME:  PROC(CMDINDX,PARPTR,RHPTR,SUBENT,RHHDRPT);
         HALT;
                 %END;
               %END;
         %IF @PROCNAME ^= 'MAIN'
              % THEN % DO;
         DCL NULL BUILTIN;
         DCL SUBENT(*) ENTRY;
              /* SUBENT(1) =  DOFRE */
              /* SUBENT(2) =  DOALC */
              /* SUBENT(3) =  DENTRS - RESEQ */
              /* SUBENT(4) =  DENTMD - MDPROC */
              /* SUBENT(5) =  DENTNC - NEWCUR */
              /* SUBENT(6) =  CRTZAP */
              /* SUBENT(7) =  DOCMD */
              /* SUBENT(8) =  DOPRM */
              /* SUBENT(9) =  COLTR */
              /* SUBENT(10) = DENTDL - DELPROC */
              /* SUBENT(11) = DENTAR - ADDREC */
              /* SUBENT(12) = DENTRF - REFRESH */
              /* SUBENT(13) = DENTR - READIN */
              /* SUBENT(14) = TABSET */
              /* SUBENT(15) =         */
              /* SUBENT(16) = DENTPS - PUTSLOT */
              /* SUBENT(17) = DENTGS - GETSLOT */
              /* SUBENT(18) = TABDISP */
              /* SUBENT(19) = DENTW - WRITEOUT */
              /* SUBENT(20) = DENT016 - DENT SUBCOMMAND */
              /* SUBENT(21) = SPARS */
              /* SUBENT(22) = DENTCP - CMD BREAKDOWN & STACK */
              /* SUBENT(23) = SYMC OR DENTSY */
              /* SUBENT(24) = REP@ OR DENTRP */
              /* SUBENT(25) = SCRWRIT */
              /* SUBENT(26) = DENTSCI */
              /* SUBENT(27) = DENTTR */
              /* SUBENT(28) = SET@ OR DENTST */
              /* SUBENT(29) = TERMWRT */
              /* SUBENT(30) = DOPRMLO */
              /* SUBENT(31) = DENTAID */
              /* SUBENT(32) = DENTPIB */
              /* SUBENT(33) = DENTPI */
              /* SUBENT(34) = DENTDIS */
              /* SUBENT(35) = DENTSQ - SETS DISPLAY SEQ FIELDS */
              /* SUBENT(36) = DENTDFN - SETS DEFAULT SYMBOLIC NAME */
              /* SUBENT(37) = DENTPRE - GETS SUCCEEDING RECORD */
              /* SUBENT(38) = DENTSUC - GETS PRIOR RECORD */
              /* SUBENT(39) = DENTB - INVOKE SSE SUBCOMMANDS */
              /* SUBENT(40) = DENTPFN - LOCATE PANEL DEFINITIONS */
              /* SUBENT(41) = DOSTK - TSO STACK INTERFACE */
              /* SUBENT(42) = SYMC - PERMANENT */
              /* SUBENT(43) = REP@ - PERMANENT */
              /* SUBENT(44) = SET@ - PERMANENT */
              /* SUBENT(45) = DENTSY - PERMANENT */
              /* SUBENT(46) = DENTRP - PERMANENT */
              /* SUBENT(47) = DENTST - PERMANENT */
              /* SUBENT(48) = DENTSK - PERMANENT */
              /* SUBENT(49) = SYSCLO - CLOSE AND REOPEN SYSPRINT */
              /* SUBENT(50) = ISPLINK - ISPF SERVICES */
              /* SUBENT(51) = CALCEVA - USES CONTROLLED STORAGE */
              /* SUBENT(52) = CALCEVB - USES CONTROLLED STORAGE */
              /* SUBENT(53) = EVAL    - USES CONTROLLED STORAGE */
              /* SUBENT(54) = DENTPFO - PANEL CONSTRUCTION SUBRTNE */

         DCL #DOFRE ENTRY(PTR)
                   DEF SUBENT(1);
         DCL #DOALC ENTRY(CHAR(44) VAR, CHAR(3) VAR, PTR, PTR)
                   DEF SUBENT(2);
         DCL #RESEQ ENTRY
                   DEF SUBENT(3);
         DCL #MD ENTRY
                   DEF SUBENT(4);
         DCL #NC ENTRY
                   DEF SUBENT(5);
         DCL #CRTZAP ENTRY
                   DEF SUBENT(6);
         DCL #DOCMD ENTRY(CHAR(240) VAR, CHAR(4) VAR)
                   DEF SUBENT(7);
         DCL #PROMPT ENTRY(CHAR(80) VAR)
                   RETURNS(CHAR(240) VAR)
                   DEF SUBENT(8);
         DCL #COLTR ENTRY
                   DEF SUBENT(9);
         DCL #DEL ENTRY(PTR,,FIXED BIN(31,0),FIXED BIN(31,0),PTR)
                   DEF SUBENT(10);
         DCL #ADD ENTRY(PTR,,PTR,PTR,FIXED BIN(31,0),CHAR(*) VAR,PTR)
                   DEF SUBENT(11);
         DCL #REFRESH ENTRY(PTR,,PTR,FIXED BIN(31,0),FIXED BIN(31,0))
                   DEF SUBENT(12);
         DCL #READ ENTRY(PTR,,PTR,CHAR(*) VAR,BIT(1))
                   DEF SUBENT(13);
         DCL #TABSET ENTRY
                   DEF SUBENT(14);
         DCL #PUTSLOT ENTRY(PTR,,PTR UNALIGNED)
                   DEF SUBENT(16);
         DCL #GETSLOT ENTRY(PTR,,PTR UNALIGNED,PTR UNALIGNED,
                   FIXED BIN(15,0))
                   DEF SUBENT(17);
         DCL #TABDISP ENTRY(PTR)
                   DEF SUBENT(18);
         DCL #WRITE ENTRY(PTR,,PTR,CHAR(*) VAR,PTR UNALIGNED)
                   DEF SUBENT(19);
         DCL #DENT ENTRY(FIXED BIN(15,0),PTR,PTR,,PTR)
                   DEF SUBENT(20);
         DCL #SPARS ENTRY(CHAR(*) VAR,,CHAR(80) VAR,FIXED BIN(15,0))
                   DEF SUBENT(21);
         DCL #DENTCP ENTRY(PTR,,PTR,CHAR(*) VAR)
                   DEF SUBENT(22);
         DCL #SYMC ENTRY(CHAR(*)) RETURNS(CHAR(256) VAR)
                   DEF SUBENT(23);
         DCL #REP ENTRY
                   DEF SUBENT(24);
         DCL #SCRWR ENTRY
                   DEF SUBENT(26);
         DCL #DENTTR ENTRY
                   DEF SUBENT(27);
         DCL #SET ENTRY(BIT(1),CHAR(8),CHAR(256) VAR)
                   DEF SUBENT(28);
         DCL #TERM ENTRY(CHAR(*) VAR)
                   DEF SUBENT(29);
         DCL #PROMPTL ENTRY(CHAR(80) VAR)
                   RETURNS(CHAR(240) VAR)
                   DEF SUBENT(30);
         DCL #PRED ENTRY(PTR,PTR,PTR UNALIGNED) RETURNS(PTR UNALIGNED)
                   DEF SUBENT(37);
         DCL #SUCC ENTRY(PTR,PTR,PTR UNALIGNED) RETURNS(PTR UNALIGNED)
                   DEF SUBENT(38);
         DCL #CMD ENTRY(CHAR(*) VAR,PTR,,PTR)
                   RETURNS(FIXED BIN(15,0))
                   DEF SUBENT(39);
         DCL #PFN ENTRY(PTR,,CHAR(8)) RETURNS(PTR)
                   DEF SUBENT(40);
         DCL #STACK ENTRY(CHAR(*) VAR)
                   DEF SUBENT(41);
         DCL #SKIP ENTRY(CHAR(*) VAR) RETURNS(PTR)
                   DEF SUBENT(48);
         DCL #ISPLINK ENTRY OPTIONS(ASM,INTER,RETCODE)
                   DEF SUBENT(50);
         DCL #CALCEVA ENTRY
                   DEF SUBENT(51);
         DCL #CALCEVB ENTRY(,,,,BIT(1),PTR,CHAR(80) VAR)
           RETURNS(FLOAT DEC(16))
                   DEF SUBENT(52);
         DCL #EVAL ENTRY(PTR,CHAR(80) VAR,,,) RETURNS(FLOAT DEC(16))
                   DEF SUBENT(53);
         DCL #PFO ENTRY(PTR) RETURNS(PTR)
                   DEF SUBENT(54);
              % END;
              DCL RHPTR PTR;
         DCL CMDINDX FIXED BIN(15,0);
              /* CONTAINS AN INDEX VALUE FOR THE SUBCOMMAND.  IF
                 @SUBCMD(PLOT005,SAVE,SE,SF,SB,SX,S) WERE
                 ISSUED IN PLOTB, FOR EXAMPLE, AND THE CURRENT
                 SUBCOMMAND WERE SE, THEN CMDINDX WOULD CONTAIN
                 THE VALUE 3. */
         DCL PARPTR PTR;
         DCL 1 PARSTR UNALIGNED BASED(PARPTR),
           2 PARIX FIXED BIN(15,0),
           2 PAROCK BIT(16),
             /* EACH BIT = '0'B IF CORRESPONDING OPERAND IS VALID. */
           2 PARQCK BIT(16),
             /* EACH BIT SET TO '1'B IF CORRESPONDING OPERAND IS A
                QUOTED STRING */
           2 PARY(16) CHAR(256) VAR;
              /* THIS WILL CONTAIN THE PARSED TOKENS OF THE
                 ENTERED SUBCOMMAND.  PARY(1) WILL CONTAIN THE
                 SUBCOMMAND NAME.  PARY(2) WILL CONTAIN THE FIRST
                 OPERAND, ETC. */
         DCL HIGH BUILTIN;
         DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));
         DCL 1 REC BASED(RECPTR) UNALIGNED,
                   /* THIS IS THE DEFINITION OF THE ELEMENTS OF THE
                      MAIN STORAGE CHAIN OF RECORDS */
              2 LSTPTR PTR,
                   /* POINTER TO PREVIOUS RECORD OR NULL */
              2 NXTPTR PTR,
                   /* POINTER TO NEXT RECORD OR NULL */
              2 RECPNLN FIXED BIN(15,0),
                   /* PANEL # FOR THIS RECORD - NO LONGER USED */
              2 RECFLGS BIT(8),
                   /* BIT 1 = 1 IF RECORD IS VERIFIED */
                   /* BIT 2 = 1 IF RECORD IS NOT TO BE DISPLAYED */
                   /* BIT 3 = 1 IF CURSOR IS TO BE SET TO THIS RECORD */
                   /* BIT 4 = IS USED DURING SELECT PROCESSING TO
                              INDICATE WHETHER THIS RECORD HAS BEEN
                              PROCESSED */
              2 RECRES BIT(8),
                   /* IF BIT 2 OF RECFLGS IS SET, THIS WILL BE THE
                      OFFSET, RELATIVE 0, WHERE THE CURSOR IS TO BE
                      PLACED ON THIS LINE. */
              2 RECSEQ FIXED BIN(31,0),
                   /* SEQ # FOR THIS REC */
              2 RECLEN FIXED BIN(15,0),
                   /* MAXIMUM LENGTH OF RECORD */
              2 RECSTR CHAR(L REFER (RECLEN)) VAR;
                   /* CARD IMAGE */
         DCL 1 RECHDR BASED(RHPTR),
              2 LSTHDR PTR,
                   /* POINTER TO THE LAST RECORD */
              2 NXTHDR PTR,
                   /* POINTER TO THE FIRST RECORD */
              2 HDPTR PTR,
                   /* ADDR(RECHDR) */
              2 RHLST PTR,
                   /* PTR TO PREVIOUS RECHDR */
              2 RHNXT PTR,
                   /* PTR TO NEXT RECHDR */
              2 RHNAME CHAR(8),
                   /* NAME ASSOCIATED WITH THIS ARRAY OF RECORDS */
              2 RHCST FIXED BIN(15,0),
                   /* NUMBER OF FIRST LINE IN DISPLAY ALLOCATED TO
                      THIS ARRAY OF RECORDS.  THE QUEUE OF RHELS
                      IS ORDERED BY THIS FIELD, EXCEPT THAT RHELS
                      IN WHICH THIS FIELD IS ZERO ARE STORED AT THE
                      END OF THE Q */
              2 RHCEN FIXED BIN(15,0),
                   /* NUMBER OF LAST LINE IN DISPLAY ALLOCATED TO
                      THIS ARRAY OF RECORDS. */
              2 BLHDR PTR,
                   /* PTR TO THE STACK OF COMMANDS FROM THE
                      SECTION OF DISPLAY FOR THIS ARRAY OF RECORDS.
                      EXAMPLES ARE DELETE AND REPLICATE COMMANDS. */
              2 RECPTR PTR,
                   /* PTR TO CURRENT REOCRD OR PTR
                      TO RECHDR IF NO RECORDS IN
                      IN-CORE LIST */
              2 FINDTEXT CHAR(80) VAR,
                   /* DEFAULT TEXT FOR FIND SUBCOMMAND */
              2 INDDN PTR,
                   /* DDNAME FOR REFRESH SUBCOMMAND (SEE ALCSTR) */
              2 OUTDDN PTR,
                   /* DDNAME FOR SAVE SUBCOMMAND (SEE ALCSTR) */
              2 BUFPTR PTR,
                   /* ADDR OF WORK BUFFER */
              2 SEQSTRT FIXED BIN(31,0),
                   /* STARTING SEQUENCE FOR RESEQ SUBCOMMAND */
              2 SEQINCR FIXED BIN(31,0),
                   /* INCREMENT FOR RESEQ SUBCOMMAND */
              2 CURSEQ FIXED BIN(31,0),
                   /* SEQUENCE CONTROL FIELD.  IN SCAN MODE, THIS FIELD
                      WILL BE SET TO THE SEQUENCE NUMBER OF THE RECORD
                      LISTED ON THE TOPMOST LINE OF THE DISPLAY.  IN
                      INSERT MODE, THIS FIELD IS INCREMENTED TO OBTAIN
                      THE NEW SEQUENCE NUMBERS */
              2 PFPB CHAR(2),
                   /* SET TO EITHER 'PF' OR 'PB' TO INDICATE THE
                      DEFAULT DIRECTION TO SCROLL. */
              2 RHFLAGS,
               3 LOFLAG BIT(1),
                   /* ON IF DATA IS TO REMAIN IN LOWER CASE */
               3 SAVEFLAG BIT(1),
                   /* ON IF SAVE HAS NOT BEEN DONE SINCE LAST CHANGE */
               3 TERMFLAG BIT(1),
                 /* ON IF THIS IS FOR VIRTUAL TERMINAL */
               3 LOGNFLAG BIT(1),
                 /* ON IF LOGON COMMAND YET TO BE ENTERED */
               3 CMODEFLAG BIT(1),
                 /* ON IF IN COMMAND MODE, OFF IF EDIT MODE */
               3 HEXMODE BIT(1),
                 /* ON IF DATA IS TO BE DISPLAYED IN HEX */
               3 RHTRANSW BIT(1),
                 /* ON IF TRANSLAT SUBCOMMAND HAS BEEN DONE */
               3 RHSUPSW BIT(1),
                 /* ON IF THIS DATA SET IS DEFINED AS A SUPPORT DATA
                    SET (SUPPORT KEYWORD ON SSE SUBCOMMAND, OR
                    SUPPORT SUBCOMMAND).  IT WILL NOT BE DISPLAYED
                    UNLESS A SPECIFIC SHOW SUBCOMMAND IS ISSUED FOR
                    IT.  IF THE ONLY DATA SETS CURRENTLY BEING EDITED
                    ARE SUPPORT DATA SETS, AND "END N" WILL BE
                    ISSUED AUTOMATICALLY FOR ALL OF THEM. */
              2 CMDDATA CHAR(256) VAR,
                   /* SET TO NULL STRING BEFORE CALLING DENTB.
                      SUBCOMMANDS MAY STORE NEXT COMMAND TO BE
                      EXECUTED HERE. */
              2 MSGDATA CHAR(80) VAR,
                   /* SET TO NULL STRING BEFORE CALLING DENTC.
                      SUBCOMMANDS MAY STORE MESSAGES TO BE
                      DISPLAYED IN THE MESSAGE FIELD HERE. */
              2 TERMECB FIXED BIN(31,0),
                /* ECB FOR OUTSTANDING RECEIVE IF THIS IS FOR
                   A VIRTUAL TERMINAL SESSION */
              2 TERMEP PTR,
                /* ENTRY TO VTAMIO SUBRTNE */
              2 TERMID CHAR(8) VAR,
                /* APPLID - TSO VSPC,ETC. */
              2 MARKARY(6) FIXED BIN(31,0),
                /* ARRAY OF MARKED LINES */
              2 LASTCMD CHAR(256) VAR,
                /* LAST SSE SUBCOMMAND EXECUTED, OR LAST
                   LINE TRANSMITTED TO ALTERNATE SESSION */
              2 CMDDISPLAY CHAR(256) VAR,
                /* DATA TO BE DISPLAYED IN THE COMMAND AREA
                   OF THE DISPLAY */
              2 CURSOR_SEQ FIXED BIN(31,0),
                /* LINE # OF LINE CONTAINING CURSOR.  IF DATA SET IS
                NOT ON THE DISPLAY, THIS FIELD IS MEANINGLESS.  IF
                CURSOR IS NOT ON ANY DATA LINE OF THE DISPLAY,
                CURSOR_SEQ WILL BE 0. */
              2 RHSPFFLST CHAR(256) VAR,
                /* LAST SPFF SUBCOMMAND ISSUED */
              2 RHSPFCLST CHAR(256) VAR,
                /* LAST SPFC SUBCOMMAND ISSUED */
              2 RHLRECL FIXED BIN(15,0),
                /* DEFAULT LRECL ASSOCIATED WITH THIS DATA SET */
              2 RHBLKL FIXED BIN(15,0),
                /* DEFAULT BLKSIZE ASSOCIATED WITH THIS DATA SET */
              2 RHRECFM BIT(8),
                /* DEFAULT DCBRECFM FIELD */
              2 RHFLAGS2,
               3 RHNONSW BIT(1),
                /* ON IF DEFAULT NONUM SETTING IS NONUM */
               3 RHFAMSW BIT(1),
                /* ON IF RHFAMEP CONTAINS THE ENTRY POINT OF A FILE
                   ACCESS MODULE (FAM) FOR THIS DATA SET. */
               3 RHFAMDS BIT(1),
                /* THE FAM MODULE SHOULD TURN THIS FLAG ON IF IT IS
                TO RECEIVE CONTROL TO DISPLAY DATA AND ACCEPT INPUT
                SUBCOMMANDS (CODE=5). */
               3 RHDBSAVE BIT(1),
                /* IF EITHER THIS FLAG OR SAVEFLAG IS ON, DATA HAS
                BEEN MODIFIED SINCE THE LAST SAVE.  THIS FLAG IS
                USED BY THE SAS SUBCOMMAND TO DETERMINE WHETHER
                DATASETS WITH DATABASE DEFINITIONS SHOULD BE WRITTEN
                TO LASTJCL. */
               3 RHNOSHOWSW BIT(1),
                /* ON IF NOSHOW IS IN EFFECT FOR THIS DATA SET */
               3 RHF2RES BIT(3),
                /* RESERVED */
              2 RHFAMEP ENTRY(PTR,PTR,,PTR,FIXED BIN(15,0))
                RETURNS(PTR),
                /* CONTAINS THE ENTRY TO A FILE-ACCESS MODULE (FAM)
                IF THE FAM KEYWORD WAS SPECIFIED ON THE SSE SUBCOMMAND
                FOR THIS DATA SET. */
              2 RHFAMCB PTR,
                /* RESERVED FOR THE USE OF THE FILE ACCESS MODULE. */
              2 RHSPCPT PTR,
                /* POINTS TO THE SELECT PROCESSING CONTROL BLOCK
                (SPCB) DURING SELECT PROCESSING. */
              2 RHUSENM CHAR(8),
                /* CONTAINS THE USE NAME IF ONE WAS SPECIFIED VIA
                EITHER THE USE KEYWORD OR THE USE SUBCOMMAND */
              2 RHUSEHD PTR,
                /* IF THE USE KEYWORD HAS BEEN GIVEN, OR THE USE
                SUBCOMMAND HAS BEEN ISSUED, THIS FIELD WILL BE THE
                HEAD OF A SINGLY-LINKED LIST OF ELEMENTS DESCRIBING
                THE FIELDS OF THE RECORDS IN THIS DATA SET.  SEE
                STRUCTURE RHNAMESTR FOR A DESCRIPTION OF THESE
                ELEMENTS.  EACH TIME THE USE SUBCOMMAND IS
                SUCCESSFULLY ISSUED, THIS QUEUE WILL BE DELETED AND
                REBUILT. */
              2 RHELSIZE FIXED BIN(31,0),
                /* ELEMENT SIZE - USED IN APL SUBCOMMAND - DEFAULT=1 */
              2 RHCOUNT FIXED BIN(31,0);
                /* NUMBER OF RECORDS IN THIS DATA SET. */

         DCL 1 RHNAMESTR BASED(RHNAMPTR),
           /* THIS IS A DESCRIPTION OF ELEMENTS ON A SINGLY-LINKED
           LIST POINTED TO BY FIELD RHUSEHD IN STRUCTURE RECHDR.
           EACH ELEMENT DESCRIBES A FIELD IN THE RECORDS OF THAT
           DATA SET. */
              2 RHNTYPE FIXED BIN(15), /* 1=FLOAT, 2=CHAR, 3=ZONED
                                          4=PACKED, 5=HEX, 6=BIT
                                          7=FIXED */
              2 RHNPOS FIXED BIN(15), /* OFFSET WITHIN RECORD */
              2 RHNLNG FIXED BIN(15), /* LENGTH WITHIN RECORD */
              2 RHNVAR0 FIXED BIN(15), /* # OF VAR IN LIST 0 (SAS) */
              2 RHNNAME CHAR(8), /* NAME OF VARIABLE */
              2 RHNLABEL CHAR(40), /* LABEL (SAS) */
              2 RHNFORM CHAR(8), /* FORMAT SUBRTNE (SAS) */
              2 RHNIFORM CHAR(8), /* INPUT FORMAT SUBRTNE (SAS) */
              2 RHNFL FIXED BIN(15), /* FORMAT FIELD LENGTH (SAS) */
              2 RHNFD FIXED BIN(15), /* FORMAT NO. DECIMALS (SAS) */
              2 RHNF FIXED BIN(15), /* LEN RETURNED BY FORMAT CALL */
              2 RHNJUST FIXED BIN(15), /* 0=LEFT, 1=RIGHT */
              2 RHNLINK PTR, /* LINK FIELD TO NEXT ELEMENT */
              2 RHNCPOS FIXED BIN(15), /* CURRENT OFFSET IN RECORD */
              2 RHNCLNG FIXED BIN(15); /* CURRENT LENGTH IN RECORD */
         DCL 1 RHPNL ALIGNED BASED(RHPPTR),
                    /* COMMON PANEL INFORMATION */
              2 CURPNL FIXED BIN(15,0),
                   /* SET TO @CURPNL BEFORE CALLING DENTB.
                      ASSIGNED TO @CURPNL ON RETURN FROM DENTB. */
              2 NXTPNL FIXED BIN(15,0),
                   /* SET TO @NXTPNL BEFORE CALLING DENTB.
                      ASSIGNED TO @NXTPNL ON RETURN FROM DENTB. */
              2 COLUMN FIXED BIN(15,0),
                   /* FOR SCAN PANEL, COLUMN INDICATES THE STARTING
                      POSITION IN THE OUTPUT CARD IMAGE WHERE THE
                      FIRST POSITION FROM INPUT FIELD IS TO BE
                      STORED. */
              2 TRUNCATE FIXED BIN(15,0),
                   /* FOR SCAN PANEL, TRUNCATE INDICATES THE TRUNCATION
                      POSITION.  COL(3) AND TRUNC(71) WOULD INDICATE
                      THAT INPUT DATA WILL BE ASSIGNED TO POSITIONS
                      3 THRU 71 */
              2 SCANLEN FIXED BIN(15,0),
                   /* WILL BE SET TO THE AMOUNT OF DATA TO BE ACCEPTED
                      AS INPUT FROM THE SCAN DISPLAY */
              2 PNLFLAGS,
               3 SCANFLAG BIT(1),
                   /* THIS FLAG IS TURNED ON IF IN SCAN MODE, AND OFF
                      IF IN INSERT MODE */
               3 CURSMODE BIT(1),
                   /* ON IF CURSOR IS TO REMAIN WHERE IT'S AT
                      RATHER THAN BEING RETURNED TO HOMEBASE */
               3 TRUNCMODE BIT(1),
                   /* ON IF DATA TO THE RIGHT OF DISPLAY IS TO BE
                      TRUNCATED IF LINE IS ALTERED DIRECTLY ON THE
                      DISPLAY */
               3 STFSMODE BIT(1),
                   /* ON IF VTAM HAS BEEN NOTIFIED VIA STFSMOD
                      THAT FULL SCREEN MODE IS IN EFFECT. */
               3 HARDCOPY BIT(1),
                   /* ON IF THE TERMINAL IS NOT A 3270 DEVICE */
               3 RHPPRINT BIT(1),
                   /* ON IF SCREEN DISPLAYS ARE TO BE PRINTED
                      IN FILE PRTSCR */
               3 RHPHEX BIT(1),
                   /* ON IF TOP DATA SET ON DISPLAY IS IN HEXMODE */
               3 PNLFPAD BIT(1),
                    /* PAD TO FILL OUT BYTE */
              2 PNLNAM CHAR(8) INIT('DENTDSP'),
                    /* PANEL NAME */
              2 DESPTR PTR,
                    /*POINTER TO THE DATA ENTRY DEFINITION STRUCTURE*/
              2 EPPTR PTR,
                    /* POINTER RETURNED BY SYSLOAD */
              2 CMDPTR PTR,
                    /* POINTER TO INPUT FIELD FOR COMMAND INPUT AREA */
              2 CMDOPTR PTR,
                    /*POINTER TO OUTPUT FIELD FOR COMMAND OUTPUT AREA*/
              2 CMDSPTR PTR,
                    /* POINTER TO COMMAND FIELD DEFINITION */
              2 MSGPTR PTR,
                    /* POINTER TO THE MSG OUTPUT FIELD */
              2 MSGNUM FIXED BIN(15,0),
                   /* FLDNUM FOR MSG FIELD */
              2 INPTR PTR,
                   /* POINTER TO FIRST RECORD INPUT FIELD DESCRIPTOR */
              2 CURSBASE FIXED BIN(15,0),
                   /* HOMEBASE FOR CURSOR */
              2 RHPFILL FIXED BIN(15,0),
                   /* # BLANKS TO FILL ON SCREEN */
              2 SCREENLEN FIXED BIN(15,0),
                   /* # LOGICAL ROWS ON CURRENT SCREEN */
              2 LINESIZE FIXED BIN(15,0),
                   /* # LOGICAL COLS ON CURRENT SCREEN */
              2 RHPNLQ PTR,
                   /* POINTER TO SINGLY LINKED LIST OF PNLSTR
                   STRUCTURES BEFORE CALLING SCRWRIT. */
              2 RHPNLARYS,
                   /* @ARYPTR IN @PNLCALL SHOULD POINT TO THIS
                   STRUCTURE BEFORE CALLING SCRWRIT */
               3 RHPARYCNT FIXED BIN(31,0),
                   /* ALWAYS SHOULD EQUAL 1 */
               3 RHPSTAPT PTR,
                   /* POINTER TO STATIC PORTION OF CURRENT PANEL DEF */
               3 RHPDYNPT PTR,
                   /* POINTER TO DYNAMIC PART OF CURRENT PANEL DEF */
              2 @PNLCALL,
                   /* PARAMETER STRUCTURE PASSED TO SCRWRIT */
               3 @CURPNL FIXED BIN(15,0),
               3 @NXTPNL FIXED BIN(15,0),
               3 @ARYPTR PTR,
               3 @AID BIT(8),
               3 @CURLOC FIXED BIN(15,0),
               3 @CHGCURS FIXED BIN(15,0),
               3 @CALLFLGS BIT(8),
              2 TABPTR PTR,
                   /* PTR TO DATA FIELD FOR TAB DISPLAY */
              2 TABNUM FIXED BIN(15,0),
                   /* FIELD INDEX TO TAB DISPLAY FIELD */
              2 TABA(16) FIXED BIN(15,0) INIT(
                05,10,15,20,25,30,35,40,45,50,55,60,65,0,0,0),
              2 TABK CHAR(1) INIT('Ö'),
                   /* CURRENT TAB CHARACTER */
              2 RHPMAXSQ FIXED BIN(31,0),
                   /* MAX SEQ # TO BE DISPLAYED */
              2 RHPMAXLN FIXED BIN(15,0),
                   /* LEN OF SEQ FIELDS ON DISPLAY */
              2 RHPSKHD PTR,
                   /* LINKED LIST OF COLUMN RANGES TO BE DISPLAYED.
                      FORMAT OF ELEMENTS ON LIST IS -
                        1 SKEL,
                         2 SKNXT PTR, POINTER TO NEXT ELEMENT
                         2 STC FIXED BIN(15,0), STARTING COLUMN
                         2 ENC FIXED BIN(15,0)  ENDING COLUMN
                      IF THIS FIELD IS NOT NULL, COLUMN AND TRUNCATE
                      WILL BE IGNORED, AND THESE SPECS WILL BE USED
                      INSTEAD. */
              2 PSCREENLEN FIXED BIN(15,0),
                   /* # PHYSICAL ROWS ON DISPLAY */
              2 PLINESIZE FIXED BIN(15,0),
                   /* # PHYSICAL COLS ON DISPLAY */
              2 RHPFRACT FIXED BIN(15,0),
                   /* CODE INDICATING HOW DISPLAY IS FORMATTED */
              2 RHPAREAP PTR,
                   /* POINTER TO SCRWRIT INTERFACE CONTROL BLOCKS */
              2 RH_LB FIXED BIN(15,0),
                /* LEFT BOUNDARY FOR THOSE SUBCOMMANDS WHICH HONOR
                THE BOUND KEYWORD */
              2 RH_RB FIXED BIN(15,0);
                /* RIGHT BOUNDARY FOR THOSE SUBCOMMANDS WHICH HONOR
                THE BOUND KEYWORD */

         DCL 1 ALCSTR BASED(ALCPTR),
              2 ALCDDN CHAR(8),
              2 ALCDSN CHAR(44) VAR,
              2 ALCMEM CHAR(8),
              2 ALCFLAG BIT(16),
                   /* ..1. .... RECFM=V OR U
                      .... 1... WON'T BE FREED AT END
                      .... .1.. NONUM
                      .... ..1. IMMEDIATE EOF W/B INDICATED
                      .... ...1 LOWERCASE */
              2 ALCSEQOFF FIXED BIN(15,0),
                   /* OFFSET (REL 0) TO SEQUENCE FIELD */
              2 ALCSEQLEN FIXED BIN(15,0),
                   /* LEN SEQUENCE FIELD */
              2 ALCRECL FIXED BIN(15,0),
                   /* MAXIMUM LRECL */
              2 ALCBUF CHAR(L REFER(ALCRECL)) VAR,
                   /* BUFFER FOR READS AND WRITES */
              2 ALCBLKL FIXED BIN(15,0),
                   /* BLKSIZE */
              2 ALCRECFM BIT(8);
                   /* DS1RECFM OR DCBRECFM */
         DCL 1 BUFSTR BASED(BUFPTR),
             /* THIS BUFFER IS USED BY VARIOUS SUBCOMMANDS WHEN
                MANIPULATING DATA.  THE BUFFER ITSELF MAY BE
                ALCBUF IF A FILE IS INVOLVED, OR IT MAY BE
                SEPARATELY ALLOCATED IF THE RECORDS INVOLVED
                ARE FROM AN IN-CORE SPINOFF. */
           2 BUFLN FIXED BIN(15,0),
             /* LENGTH BUFFER */
           2 BUF CHAR(L REFER(BUFLN)) VAR;
             /* WORK BUFFER */
         DCL RHHDRPT PTR;
         DCL 1 RHHDR BASED(RHHDRPT),
              2 LSTRHEL PTR,
                /* PTR TO PREV RECHDR OR NULL */
              2 NXTRHEL PTR,
                /* PTR TO NEXT RECHDR OR NULL */
              2 RHPPTR PTR,
                /* PTR TO COMMON PANEL INFORMATION */
              2 RHCPPL,
               3 RHUPT PTR,  /* ADDR USER PROFILE TABLE */
               3 RHPSCB PTR, /* ADDR PROTECTED STEP CONTROL BLOCK */
               3 RHECT PTR,  /* ADDR ENVIRONMENT CONTROL TABLE */
              2 RHRC FIXED BIN(31,0),
                 /* RETURN CODE FROM LAST SUBCOMMAND */
              2 RHCFL,
               3 RHCVTSW BIT(1),
                 /* BIT 1 = ON IF VIRTUAL TERMINAL INIT IS DONE */
               3 RHSYNSW BIT(1),
                 /* ON IF SYNCH MODE, OFF IF ASYNCH MODE */
               3 RHTYNSW BIT(1),
                 /* ON IF TEMPORARY SYNCH MODE */
               3 RHVVTSW BIT(1),
                 /* ON IF VIRTUAL TERMINAL IS BEING USED */
               3 RHECOSW BIT(1),
                 /* ON IF COMMANDS ARE TO BE ECHOED TO TERMINAL */
               3 RHCTLSW BIT(1),
                 /* USED BY ARUN (DENT032) */
               3 RHSASGO BIT(1),
                 /* SET TO 1 IF THE GO KEYWORD S/B USED INVOKING SAS */
               3 RHCFLPAD BIT(1),
                 /* RESERVED */
              2 RHRSV CHAR(3),
               /* PAD TO PRESERVE BOUNDARY ALIGNMENT */
              2 RHECBP FIXED BIN(31,0),
                /* ECB POSTED BY MOTHER */
              2 RHECBW FIXED BIN(31,0),
                /* ECB POSTED BY DENTSCR SUBTASK */
              2 RHSUBECB FIXED BIN(31,0),
                /* ECB POSTED WHEN DENTSCR SUBTASK ENDS */
              2 RHSUBTCB FIXED BIN(31,0),
                /* ADDR OF DENTSCR SUBTASK TCB */
              2 RHRUNSTK PTR,
                /* PTR TO RUN STACK */
              2 RHRUNDCB PTR,
                /* PTR TO BPAM DCB FOR SYSRUN OR NULL */
              2 RHPNLDCB PTR,
                /* PTR TO BPAM DCB FOR SYSPNL OR NULL */
              2 RHPNLHDR PTR,
                /* PTR TO LIST OF IN-MEMORY PANELS */
              /* THE FOLLOWING FILE VARIABLES ARE PROVIDED FOR USE IN
              PROGRAMS WRITTEN FOR USE WITH THE PGM SUBCOMMAND OF SSE.
              NOTE THAT YOU MUST OBSERVE THE PL/I RULES FOR FILE
              PROCESSING IN A FETCHED PROCEDURE WHEN USING THESE
              FILES.  NOTE THAT OTHER FILES CAN BE ADDED TO THIS LIST
              AS REQUIRED. */
              2 RH_VSAM_1 FILE,
                /* ASSIGNED FILE CONSTANT DCL VSAM1 FILE ENV(VSAM) */
              2 RH_VSAM_2 FILE,
                /* ASSIGNED FILE CONSTANT DCL VSAM2 FILE ENV(VSAM) */
              2 RH_VSAM_3 FILE,
                /* ASSIGNED FILE CONSTANT DCL VSAM3 FILE ENV(VSAM) */
              2 RH_VSAM_GENKEY_1 FILE,
                /* DCL VSAMGK1 FILE ENV(VSAM GENKEY) */
              2 RH_REGIONAL_ONE_1 FILE,
                /* DCL REGONE1 FILE ENV(REGIONAL(1)) */
              2 RH_VSAM_GENKEY_2 FILE,
                /* DCL VSAMGK2 FILE ENV(VSAM GENKEY) */
              2 RH_VSAM_GENKEY_3 FILE,
                /* DCL VSAMGK3 FILE ENV(VSAM GENKEY) */
              2 RH_VSAM_GENKEY_4 FILE,
                /* DCL VSAMGK4 FILE ENV(VSAM GENKEY) */
              2 RH_VSAM_GENKEY_5 FILE,
                /* DCL VSAMGK5 FILE ENV(VSAM GENKEY) */
              2 RH_VSAM_GENKEY_6 FILE,
                /* DCL VSAMGK6 FILE ENV(VSAM GENKEY) */
              2 RH_ISAM_1 FILE,
                /* DCL ISAM_1 FILE ENV(INDEXED) */
              2 RH_SEQ_1 FILE,
                /* DCL SEQ_1 FILE ENV(CONSECUTIVE) */
              2 RH_SEQ_2 FILE,
                /* DCL SEQ_2 FILE ENV(CONSECUTIVE) */
              2 RH_SEQ_3 FILE,
                /* DCL SEQ_3 FILE ENV(CONSECUTIVE) */
              2 RH_SEQ_INTERNAL FILE,
                /* DCL SEQ_INTERNAL FILE ENV(CONSECUTIVE) - USED
                INTERNALLY BY SSE - USER SHOULD NOT USE. */
              2 RHRCLIM FIXED BIN(31,0),
                /* IF RHRC>RHRCLIM, SUBCOMMAND STACK WILL BE PURGED */
              2 RHPDSDCB PTR,
                /* POINTER TO BPAM DCB OR NULL - USED, FOR EXAMPLE,
                IN THE INCLUDE SUBCOMMAND. */
              2 RHUNQNO FIXED BIN(31,0),
                /* UNIQUE NUMBER - WHOEVER REFERENCES THIS FIELD SHOULD
                INCREMENT IT. */
              2 RH_SEQ_INTERNAL_RDR FILE,
                /* DCL INTRDR FILE ENV(F BLKSIZE(80)) - USED
                INTERNALLY BY SSE - USER SHOULD NOT USE. */
              2 RH201 CHAR(16);
                /* PAD TO PREVENT 201 ABENDS */
 /* END DENTSUB */
 % PRINT;
