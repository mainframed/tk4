 /* SCRWRIT */
 /* THIS SUBROUTINE IS PART OF THE 3277 FULL SCREEN SUPPORT PACKAGE
    FOR PLI UNDER TSO.  SEE THE DOCUMENTATION FOR THE @SCREEN,
    @PANEL, @ENDPNL, @FLDMOD, AND @DOPNL MACROS. */
  SCRWRIT:  PROC(@PNLCALL) OPTIONS(REENTRANT);
         % INCLUDE @BIT;
         % INCLUDE @SBACON;
         DCL 1 @PNLCALL,
           2 @CURPNL FIXED BIN(15,0),
           2 @NXTPNL FIXED BIN(15,0),
           2 @ARYPTR PTR,
           2 @AID BIT(8),
           2 @CURLOC FIXED BIN(15,0),
           2 @CHGCURS FIXED BIN(15,0),
           2 @CALLFLGS BIT(8);
             /* 1000 0000 - WRITE ONLY
                0100 0000 - CLEAR SCREEN ONLY
                0000 0010 - RE-WRITE ALL PROTECTED FIELDS
                0000 0001 - WRITE COPY OF DISPLAY TO FILE PRTSCR */
         DCL 1 @PNLARYS BASED(@ARYPTR),
           2 @ARYCNT FIXED BIN(31,0),
           2 @PNLARY(L REFER (@ARYCNT)),
               3 @PNLSTAPT PTR,
               3 @PNLDYNPT PTR;
         DCL 1 PANEL UNALIGNED BASED(PNLPTR),
           2 @PNLLEN FIXED BIN(15,0),
           2 @PNLNAME CHAR(8),
           2 @PNLNUM FIXED BIN(15,0),
           2 @INCNT FIXED BIN(15,0),
           2 @FLDCNT FIXED BIN(15,0),
           2 @CURSBA CHAR(2),
           2 @CURSBAB FIXED BIN(15,0),
           2 @NEWLEN FIXED BIN(31,0),
           2 @FLDLOC FIXED BIN(15,0);
         DCL 1 @FLDDESCR UNALIGNED BASED(SFLDPTR),
           2 @FLDLEN FIXED BIN(15,0),
           2 @FLDNAME CHAR(8),
           2 @FLDNUM FIXED BIN(15,0),
           2 @FLDINUM FIXED BIN(15,0),
           2 @INLEN FIXED BIN(15,0),
           2 @INOFF FIXED BIN(31,0),
           2 @OUTOFF FIXED BIN(31,0),
           2 @PICOFF FIXED BIN(31,0),
           2 @FLAGS BIT(16),
           2 @FLDSBA CHAR(2),
           2 @FLDSBAB FIXED BIN(15,0),
           2 @LITLEN FIXED BIN(15,0),
           2 @LITERAL CHAR(L REFER (@LITLEN)),
           2 @PICLEN FIXED BIN(15,0),
           2 @PICTURE CHAR(L REFER (@PICLEN));
         DCL 1 @PNL_DYNAM UNALIGNED BASED(DYNPTR),
           2 @DINOF FIXED BIN(31,0),
           2 @DOUTOF FIXED BIN(31,0),
           2 @DYNCNT FIXED BIN(15,0),
           2 OUTFLAG(L REFER (@DYNCNT)) BIT(1);
         DCL 1 FIELD UNALIGNED BASED(DFLDPTR),
           2 LEN FIXED BIN(15,0),
           2 DATA CHAR(L REFER (LEN)) VARYING;
         DCL WRKPTR PTR,
             WRKADJ FIXED BIN(31,0) DEF WRKPTR;
         DCL SFLDPTR PTR,
             SFLDADJ FIXED BIN(31,0) DEF SFLDPTR;
         DCL DFLDPTR PTR,
             DFLDADJ FIXED BIN(31,0) DEF DFLDPTR;
         DCL SBACODB BIT(8) INIT('00010001'B),
             SBACODE CHAR(1) DEF SBACODB;
         DCL WCCB BIT(8) INIT('11110001'B),
                           /*    11.....SPECIFIES 80 CHAR LINE
                                   0....DON'T START PRINTER
                                    0...DON'T SOUND ALARM
                                     0..DON'T RESET INPUT INHIBITED
                                      1.RESET MDT BITS */
             WCC CHAR(1) DEF WCCB;
         DCL SFCCODB BIT(8) INIT('00011101'B),
             SFCCODE CHAR(1) DEF SFCCODB;
         DCL ICORDEB BIT(8) INIT('00010011'B),
             ICORDER CHAR(1) DEF ICORDEB;
         DCL BUF CHAR(32000) VARYING;
         DCL ATRWRKB BIT(8),
             ATRWRKC CHAR(1) DEF ATRWRKB;
         DCL SAVPTR PTR;
         DCL MYATRB BIT(8) STATIC INIT('11110000'B),
             MYATRC CHAR(1) DEF MYATRB;
         DCL SBAWRKB FIXED BIN(15,0),
             SBAWRKC CHAR(2) DEF SBAWRKB;
         DCL AIDWRKB BIT(8),
             AIDWRKC CHAR(1) DEF AIDWRKB;
         DCL SBAZERB BIT(16) STATIC INIT(@CONSBA(0)),
             SBAZERO CHAR(2) DEF SBAZERB;
         DCL SBAONEB BIT(16) STATIC INIT(@CONSBA(1)),
             SBAONE CHAR(2) DEF SBAONEB;
         DCL RAORDEB BIT(8) INIT('00111100'B),
             RAORDER CHAR(1) DEF RAORDEB;
         DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
           RETURNS(FIXED BIN(15,0));
         DCL SCRBUF CHAR(1920) INIT('');
         DCL MYSCR(24) CHAR(80) DEF SCRBUF;
         DCL PRTSCR FILE RECORD OUTPUT ENV(F RECSIZE(81) CTLASA);
         DCL PSW BIT(1);
         DCL (RETCODE,SCRSIZE) FIXED BIN(31,0);
         DCL INBUF CHAR(6000) VARYING;
         DCL SIGN CHAR(1) VAR;
         DCL REPEAT BUILTIN;
         PSW = SUBSTR(@CALLFLGS,8,1);
         IF SUBSTR(@CALLFLGS,2,1) /* CLEAR SCREEN? */
           THEN DO;
             BUF=WCC××SBACODE××SBAZERO××RAORDER××SBAZERO××LOW(1)××
               SBACODE××SBAONE××ICORDER;
             CALL SYSTPUT(BUF,RETCODE,'FULLSCR','WAIT','NOHOLD');
             @CALLFLGS = '0'B;
             RETURN;
             END;
         PNLPTR = @PNLSTAPT(@NXTPNL);
         DYNPTR = @PNLDYNPT(@NXTPNL);
 WRITSCR:
         IF @CURPNL ^= @NXTPNL     /* IF THIS IS A NEW PANEL */
           THEN DO;
             OUTFLAG(*) = '1'B;  /* THEN RE=WRITE ALL FIELDS */
             BUF=WCC××SBACODE××SBAZERO××RAORDER××SBAZERO××LOW(1);
             END;
           ELSE BUF = WCC;
         IF @PNLLEN<0
           THEN DO;
             SFLDPTR = ADDR(@FLDLOC);
             SCRSIZE=0-@PNLLEN;
             IF SCRSIZE=1
               THEN SCRSIZE=1920;
             END;
           ELSE DO;
             SFLDPTR = ADDR(@NEWLEN);
             SCRSIZE=1920;
             END;

         /* IF THE 1ST FIELD DOES NOT START SCREEN LOCATION ZERO,
            THEN PLACE NULLS IN FRONT */
         IF @FLDSBAB ^= 0
           THEN DO;
             BUF=BUF××SBACODE××SBAZERO××RAORDER××@FLDSBA××LOW(1);
             IF PSW
               THEN SUBSTR(SCRBUF,1,@FLDSBAB)='';
             END;
         DO I = 1 TO @FLDCNT;
           IF ^SUBSTR(@FLAGS,3,1) /* IF FIELD UNPROTECTED */
                × OUTFLAG(I) /* OR IS FIELD TO BE RE-WRITTEN */
                × SUBSTR(@CALLFLGS,7,1) /* ALL FIELDS TO BE RE-WRITTEN*/
                × PSW /* ALL FIELDS IF TRACE IS ON */
             THEN DO;
               IF ^SUBSTR(@FLAGS,3,1) /*IS FIELD UNPROTECTED*/
                 THEN DO;
                   DFLDPTR=DYNPTR;
                   DFLDADJ=DFLDADJ+@DINOF+@INOFF;
                   SAVPTR = DFLDPTR;
                   DATA=''; /* CLEAR OUT INPUT FIELD */
                   END;
               DFLDPTR = DYNPTR;
               DFLDADJ = DFLDADJ+@DOUTOF+@OUTOFF;
               ATRWRKB = @FLAGS & '00111101'B × '01000000'B;
               J = ATRWRKB;
               IF (J>0 & J<10) × (J>16 & J<27) × (J>33 & J<42)
                 THEN SUBSTR(ATRWRKB,1,1) = '1'B;
               BUF=BUF××SBACODE××@FLDSBA××SFCCODE××ATRWRKC××DATA;
               IF PSW
                 THEN SUBSTR(SCRBUF,@FLDSBAB+2,LENGTH(DATA))=DATA;
               J = @FLDSBAB+1+LENGTH(DATA);
               /* J NOW EQUALS 1ST BYTE (REL 0) IN FIELD
                  BEYOND LITERAL TO BE PRINTED (LITERAL MAY BE
                  SHORTER THAN FIELD. */
               IF I = @FLDCNT
                 THEN K = SCRSIZE;
                 ELSE DO;
                   WRKPTR = SFLDPTR;
                   WRKADJ = WRKADJ + @FLDLEN;
                   /*WRKPTR NOW EQUALS A(NXT FIELD
                   DESCR)*/
                   K = WRKPTR->@FLDSBAB;
                   END;
               /* K NOW EQUALS SCREEN ADDR OF 1ST BYTE OF NEXT FIELD */
               IF (K-J > 0)        /* SHOULD WE PAD WITH NULLS? */
                 THEN DO;
                   IF PSW
                     THEN SUBSTR(SCRBUF,J+1,K-J)='';
                   IF ^SUBSTR(@FLAGS,3,1) & K > 0
                     THEN N = @FLDSBAB+1+SAVPTR->LEN;
                       /*N=1ST BYTE BEYOND INPUT FIELD*/
                     ELSE N = K;
                   IF N > K
                     THEN N = K;
                   IF N = SCRSIZE
                     THEN SBAWRKB = 0;
                     ELSE SBAWRKB = N;
                   CALL SBACONV(SBAWRKB,'1'B);
                   IF N > J
                     THEN BUF=BUF××RAORDER××SBAWRKC××
                   LOW(1);
                   IF K-N > 0
                     THEN DO;
                       BUF=BUF××SBACODE××SBAWRKC××
                       SFCCODE××MYATRC;
                       IF K-N > 1
                         THEN DO;
                           IF K=SCRSIZE
                             THEN SBAWRKB=0;
                             ELSE SBAWRKB=K;
                           CALL SBACONV(SBAWRKB,'1'B);
                           BUF=BUF××RAORDER××SBAWRKC××LOW(1);
                           END;
                       END;
                   END;
               END;
           WRKPTR = SFLDPTR;
           WRKADJ = WRKADJ + @FLDLEN;
             /*WRKPTR NOW EQUALS A(NXT FIELD
                     DESCR)*/
           SFLDPTR = WRKPTR;
           END;
         IF @CHGCURS < 0
           THEN SBAWRKC=@CURSBA;
           ELSE DO;
             SBAWRKB=@CHGCURS;
             CALL SBACONV(SBAWRKB,'1'B);
             END;
         BUF=BUF××SBACODE××SBAWRKC××ICORDER;
 TPUT:
         OUTFLAG(*) = '0'B;
           /* RESET ALL OUT MODIFY FLAGS */
         @CURPNL = @NXTPNL;
           /* INDICATE THE CURRENT PANEL ON THE SCREEN */
         CALL SYSTPUT(BUF,RETCODE,'FULLSCR','WAIT','NOHOLD');
         IF PSW
           THEN CALL WRITARY;
         IF RETCODE ^= 0
           THEN DO;
             PUT EDIT('BAD RETURN CODE FROM SYSTPUT')(A) SKIP(1);
             PUT DATA(RETCODE);
             SIGNAL ERROR;
             END;
         IF SUBSTR(@CALLFLGS,1,1)
           THEN DO;
             SUBSTR(@CALLFLGS,1,1) = '0'B;
             RETURN;
             END;
         CALL SYSTGET(INBUF,RETCODE,'ASIS','WAIT');
         IF RETCODE ^= 0
           THEN DO;
             PUT EDIT('BAD RETURN CODE FROM SYSTGET')(A) SKIP(1);
             PUT DATA(RETCODE);
             SIGNAL ERROR;
             END;
         AIDWRKC = SUBSTR(INBUF,1,1); /* GET AID BYTE */
         @AID = AIDWRKB;
         IF @AID = '01101110'B /* IS IT PA2? */
           THEN DO; /* IF SO, OPER WANTS SCREEN RE-WRITTEN */
             OUTFLAG(*) = '1'B;
             GO TO WRITSCR;
             END;
         @CHGCURS = -1;
         L = LENGTH(INBUF);
         IF L = 1
           THEN DO;
             @CURLOC = 0;
             RETURN; /* ACCEPT ALL CURRENT INPUT FIELD VALUES */
             END;
         SBAWRKC = SUBSTR(INBUF,2,2); /* GET CURSOR ADDR */
         @CURLOC = SBAWRKB;
         CALL SBACONV(@CURLOC,'0'B); /* CONVERT FROM TRANS CODE */
         IF @PNLLEN<0
           THEN SFLDPTR = ADDR(@FLDLOC);
           ELSE SFLDPTR = ADDR(@NEWLEN);
           /* NOTE - THERE IS THE RESTRICTION THAT THE USER MUST
                 HAVE DEFINED HIS FIELDS IN ASCENDING SCREEN
                 LOCATION. */
         IF L = 3
           THEN RETURN; /* IF HE JUST HIT ENTER, ACCEPT ALL
                              INPUT FIELDS AS IS. */
           ELSE DO;
             I = 4;
             DO UNTIL(I>L);
               J=INDEX(SUBSTR(INBUF,I+3),SBACODE)+I+2;
               IF J <= L
                 THEN IF SUBSTR(INBUF,J,1) ^= SBACODE
                   THEN J = L + 1;
               IF J-I > 3 /* DOES FIELD CONTAIN DATA? */
                 THEN DO;
                   SBALP: DO X = 1 TO @FLDCNT;
                     SBAWRKB=@FLDSBAB+1;
                     CALL SBACONV(SBAWRKB,'1'B);
                     IF SUBSTR(INBUF,I+1,2)=SBAWRKC
                       THEN LEAVE SBALP;
                     WRKPTR = SFLDPTR;
                     WRKADJ = WRKADJ + @FLDLEN;
                     SFLDPTR = WRKPTR;
                     END;
                   /* SFLDPTR NOW POINTS AT THE
                      CORRECT FIELD DEFINITION */
                   DFLDPTR=DYNPTR;
                   DFLDADJ=DFLDADJ+@DINOF+@INOFF;
                   DATA=SUBSTR(INBUF,I+3,SUFFIX(SUBSTR(
                     INBUF,I+3,J-I-3),' '));
                   IF SUBSTR(@FLAGS,9,1)
                        THEN CALL SETCAPS(DATA);
                   IF PSW
                     THEN SUBSTR(SCRBUF,@FLDSBAB+2,@INLEN)=DATA;
                   END;
               I = J;
               END;
             END;
         IF PSW
           THEN CALL WRITARY;
         /*
         NOW TO EDIT ALL OF THE INPUT FIELDS
         */
         DCL WCCWRKB BIT(8),
             WCCWRKC CHAR(1) DEF WCCWRKB;
         DCL 1 VER(3) CHAR(40) VARYING STATIC INIT(
           ' .0123456789-', /* NUMERIC */
           ' ABCDEFGHIJKLMNOPQRSTUVWXYZ', /* ALPHABETIC */
           ' ABCDEF0123456789');/* HEXADECIMAL */
         DCL BADSW BIT(1);
         WCCWRKB = '11110101'B;
           /* DON'T RESET INPUT INHIBITED AND SOUND ALARM. */
         BUF = WCCWRKC;
         BADSW = '0'B;
         IF @PNLLEN<0
           THEN SFLDPTR = ADDR(@FLDLOC);
           ELSE SFLDPTR = ADDR(@NEWLEN);
         DO I = 1 TO @FLDCNT;
           IF ^SUBSTR(@FLAGS,3,1) /* IS FIELD UNPROTECTED */
             THEN DO;
               DFLDPTR=DYNPTR;
               DFLDADJ=DFLDADJ+@DINOF+@INOFF;
               J = SUBSTR(@FLAGS,10,2);
               IF J > 0 & DATA ^= ''
                 THEN K = VERIFY(DATA,VER(J));
                 ELSE K = 0;
               IF K=0 & J=1 & LENGTH(DATA) > 0
                 THEN NUMCK:  DO;
                   L = LENGTH(DATA);
                   K = 1;
                   IF SUBSTR(@PICTURE,1,1) = '-' ×
                     SUBSTR(@PICTURE,LENGTH(@PICTURE),1) = '-'
                     THEN S = 1;
                     ELSE S = 0;
                   M = INDEX(DATA,'-');
                   IF M = 0
                     THEN SIGN = '';
                     ELSE DO;
                       IF S = 0
                         THEN LEAVE NUMCK;
                       SIGN = '-';
                       IF M = L
                         THEN DATA=SUBSTR(DATA,1,L-1);
                         ELSE IF M = 1
                           THEN DATA=SUBSTR(DATA,2);
                           ELSE LEAVE NUMCK;
                       END;
                   DATA = SUBSTR(DATA,PREFIX(DATA,' '));
                   L = LENGTH(DATA);
                   M = INDEX(@PICTURE,'.');
                   N = INDEX(DATA,'.');
                   IF N = 0
                     THEN DO;
                       N = L+1;
                       IF M > 0
                         THEN DATA = DATA××'.';
                       END;
                     ELSE DO;
                       IF M = 0
                         THEN LEAVE NUMCK;
                       IF N < L
                         THEN IF INDEX(SUBSTR(DATA,N+1),'.')>0
                           THEN LEAVE NUMCK;
                       END;
                   IF M = 0
                     THEN M = LEN+1-LENGTH(SIGN);
                   IF N<M
                     THEN DATA=REPEAT('0',M-N-1)××DATA;
                   DATA=SIGN××DATA;
                   L=LENGTH(DATA);
                   IF L<LEN
                     THEN DATA=DATA××REPEAT('0',LEN-L-1);
                   K = 0;
                   END;
               IF K ^= 0
                 THEN DO;
                     ATRWRKB=@FLAGS&'00010000'B
                       × '01001000'B;
                     BADSW = '1'B;
                     END;
                 ELSE ATRWRKB='01100000'B;
               J = ATRWRKB;
               IF (J>0 & J<10) × (J>16 & J<27) × (J>33 & J<42)
                 THEN SUBSTR(ATRWRKB,1,1)='1'B;
               BUF=BUF××SBACODE××@FLDSBA××SFCCODE××ATRWRKC;
               END;
           WRKPTR = SFLDPTR;
           WRKADJ = WRKADJ + @FLDLEN;
           SFLDPTR = WRKPTR;
           END;
         IF BADSW
           THEN DO;
             GO TO TPUT;
             END;
 WRITARY:  PROC;
         DCL OREC CHAR(81);
         DCL I FIXED BIN(15,0);
         DO I = 1 TO 24;
           IF I=1
             THEN OREC='1'××MYSCR(I);
             ELSE OREC=' '××MYSCR(I);
           WRITE FILE(PRTSCR) FROM(OREC);
           END;
         END WRITARY;
         END;
