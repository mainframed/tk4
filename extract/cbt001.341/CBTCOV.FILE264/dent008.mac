 /* COPYRIGHT 1983 BY THOMAS GLEN SMITH */
 /* DENT008 - MOVE,MO,COPY,CO,MM,MC SUBCOMMANDS */
 /* 1         2    3  4    5  6  7 */
         % DCL @PROCNAME CHAR;
         % DCL @RENTNAME CHAR;
         % @PROCNAME = 'RENT';
         % @RENTNAME = 'DENT008';
         % INCLUDE DENTSUB;
         DCL PREFIX ENTRY(CHAR(*),CHAR(*))
           RETURNS(FIXED BIN(15,0));
         DCL CURBIN FIXED BIN(15,0),
             CURBIT BIT(16) DEF CURBIN;
         DCL LAST FIXED BIN(31,0) INIT(99999999);
         DCL MPTR(3) PTR;
         DCL MSEQ(3) FIXED BIN(31,0);
         DCL (COPTR,DELPTR,SAVPTR,ORGPTR) PTR;
         ORGPTR = RECPTR;
         IF PARY(4) = ''
           THEN DO;
             PARY(4)=PARY(3);
             PARY(3)=PARY(2);
             END;
         DO M = 1 TO 3;
           I = PARY(M+1);
           IF I = 0
             THEN DO;
               RECPTR=HDPTR;
               CURSEQ=0;
               END;
             ELSE DO;
               IF CMDINDX>=6 /* IS IT MM OR MC */
                 THEN DO;
                   IF I>6 × I<1
                     THEN DO;
                       MSGDATA='MARK INDEX OUT OF RANGE';
                       RHRC = 8;
                       RETURN;
                       END;
                   I = MARKARY(I);
                   END;
               CALL #MD(RHPTR,SUBENT,I);/*CALL MDPROC*/
               END;
           IF M=3
             THEN IF CURSEQ>I
               THEN DO;
                 RECPTR=HDPTR;
                 CURSEQ=0;
                 END;
           MPTR(M) = RECPTR;
           MSEQ(M) = CURSEQ;
           END;
         TOSEQ = I;
         IF MSEQ(2) < MSEQ(1)
           THEN DO;
             MSGDATA='INVALID LINE RANGE';
             RETURN;
             END;
         IF MSEQ(3) >= MSEQ(1) & MSEQ(3) < MSEQ(2)
           THEN DO;
             MSGDATA='INVALID THIRD OPERAND';
             RHRC = 8;
             RETURN;
             END;
         IF CMDINDX < 4 × CMDINDX = 6
           THEN DO; /* IT IS MOVE */
             IF MPTR(1)=MPTR(3)
               THEN DO;
                 /* CAN'T MOVE TO ITSELF */
                 MSGDATA='INVALID THIRD OPERAND';
                 RHRC = 8;
                 RETURN;
                 END;
             IF MPTR(2)^=MPTR(3)
               THEN DO;
                 /* FIRST DEQUEUE RECORDS TO BE MOVE */
                 MPTR(1)->LSTPTR->NXTPTR=MPTR(2)->NXTPTR;
                 MPTR(2)->NXTPTR->LSTPTR=MPTR(1)->LSTPTR;
                 /* NOW ENQUEUE AT NEW LOCATION */
                 MPTR(1)->LSTPTR=MPTR(3);
                 MPTR(2)->NXTPTR=MPTR(3)->NXTPTR;
                 MPTR(1)->LSTPTR->NXTPTR=MPTR(1);
                 MPTR(2)->NXTPTR->LSTPTR=MPTR(2);
                 DO SAVPTR=MPTR(1) REPEAT SAVPTR->NXTPTR
                   UNTIL(SAVPTR=MPTR(2));
                   SAVPTR->RECSEQ=0;
                   END;
                 END;
             MPTR(1)->RECSEQ=TOSEQ;
             DELPTR = MPTR(1);
             END;
           ELSE DO;
             COPTR = RECPTR;
             IF PARY(5) = ''
               THEN I = 1;
               ELSE I = PARY(5);
             DO J = 1 TO I;
               DO SAVPTR=MPTR(1) REPEAT
                 SAVPTR->NXTPTR UNTIL(SAVPTR=MPTR(2));
                 BUF = SAVPTR->RECSTR;
                 SEQ = -1;
                 CALL #ADD(RHPTR,SUBENT,COPTR,COPTR,
                   SEQ,BUF,RHPPTR); /* CALL ADDREC */
                 END;
               END;
             IF RECPTR->NXTPTR^=HDPTR
               THEN DO;
                 SUBSTR(RECPTR->NXTPTR->RECFLGS,3,1)='1'B;
                     /* SET CURSOR TO 1ST COPIED RECORD */
                 CURBIN=PREFIX(RECPTR->NXTPTR->RECSTR,' ')-1;
                 RECPTR->NXTPTR->RECRES=SUBSTR(CURBIT,9,8);
                 RECPTR->NXTPTR->RECSEQ=TOSEQ;
                 END;
             DELPTR = RECPTR;
             END;
         IF DELPTR^=HDPTR
           THEN DELPTR=DELPTR->LSTPTR;
         CALL #RESEQ(RHPTR,SUBENT,
           DELPTR,'NOSAVE','NORENUM',LAST,RHPPTR); /* CALL RESEQ */
         CALL #NC(RHPTR,SUBENT,ORGPTR);/*CALL NEWCUR*/
         RHRC = 0;
         END;
