***********************************************************************
*                                                                     *
* THIS ASSEMBLER SOURCE PROGRAM WILL BE LINKEDITED INTO THE MAIN ABE  *
* MODULE.  IT PROVIDES AN INTERFACE TO THE PIXEL MAP IN WHICH         *
* SUBROUTINES OF THE PLOT79 GRAPHICS PACKAGE MAKE THEIR MANIPULATIONS.*
* FOUR ENTRY POINTS ARE DECLARED IN THIS MODULE:                      *
*                                                                     *
* 1.  ABE064C - KNOWN IN ABE AS ENTRY #PIXGET.  EXPECTS A 4-WORD      *
*     PARAMETER LIST CONTAINING THE X AND Y PIXEL INDICES, THE        *
*     ADDRESS OF THE STRUCTURE CONTAINING THE PIXEL MAP (THIS         *
*     STRUCTURE IS MAPPED IN ABE.PLI(ABE063I)), AND THE ADDRESS OF    *
*     THE SDV FOR A 1-BYTE CHARACTER STRING INTO WHICH THE BITS       *
*     REPRESENTING THE REQUESTED PIXEL WILL BE STORED.  IF THE X/Y    *
*     VALUES ARE OUT OF RANGE, A X'40' WILL BE RETURNED.              *
*                                                                     *
* 2.  ABE064D - KNOWN IN ABE AS ENTRY #PIXPUT.  EXPECTS A 4-WORD      *
*     PARAMETER LIST CONTAINING THE X AND Y PIXEL INDICES, THE        *
*     ADDRESS OF THE SDV FOR A 1-BYTE CHARACTER STRING CONTAINING,    *
*     RIGHT JUSTIFIED, THE BITS REPRESENTING THE PIXEL TO BE STORED,  *
*     AND THE ADDRESS OF THE STRUCTURE CONTAINING THE PIXEL MAP       *
*     (SEE DSECT DDI01),                                              *
*                                                                     *
* 3.  ABE064F - KNOWN IN ABE AS ENTRY #PIXGETL.  EXPECTS A 5-WORD     *
*     PARAMETER LIST CONTAINING THE X AND Y PIXEL INDICES, A WORD     *
*     CONTAINING A COUNT OF PIXELS DESIRED, THE ADDRESS OF THE        *
*     STRUCTURE CONTAINING THE PIXEL MAP (SEE DSECT DDI01), AND       *
*     FINALLY THE ADDRESS OF THE SDV FOR A VARYING CHARACTER STRING   *
*     (MAXIMUM LENGTH 3000) INTO WHICH THE STRING OF PIXELS WILL BE   *
*     PLACED, LEFT JUSTIFIED.                                         *
*                                                                     *
* 4.  ABE064G - KNOWN IN ABE AS ENTRY #PIXPUTL.  EXPECTS A 5-WORD     *
*     PARAMETER LIST CONTAINING THE X AND Y PIXEL INDICES, A WORD     *
*     CONTAINING A COUNT OF PIXELS DESIRED, THE                       *
*     ADDRESS OF THE SDV FOR A VARYING CHARACTER STRING CONTAINING    *
*     THE STRING OF PIXELS TO BE STORED, AND FINALLY THE ADDRESS OF   *
*     THE STRUCTURE CONTAINING THE PIXEL MAP (SEE DSECT DDI01).       *
*                                                                     *
* 5.  ABE064K - KNOWN IN ABE AS ENTRY #PIXZERO.  EXPECTS A 1-WORD     *
*     PARAMETER LIST CONTAINING THE ADDRESS OF THE STRUCTURE          *
*     DESCRIBING THE PIXEL MAP.                                       *
*                                                                     *
***********************************************************************
         MACRO
         SETUP
         DROP  RC
         USING *,RF
         STM   RE,RC,12(RD)
         L     RC,=A(BASE)
         DROP  RF
         USING BASE,RC
         L     RF,DOA&SYSNDX
         BSM   RE,RF SAVE RETURN AND CALLER'S ADDRESSING MODE
         DS    0F
DOA&SYSNDX DC AL1(128),AL3(DO&SYSNDX)
DO&SYSNDX DS 0H
         ST    RE,12(RD)
         MEND
ABE064C  CSECT
         TGSREQU
         USING ABE063I,RB
***********************************************************************
*ABE064C: PROC(X,Y,RHPLOT79) RETURNS(CHAR(1));
***********************************************************************
BASE     DS    0H
         USING *,RC
         SETUP
         B     PIXGET
RETCTL   DS    0H
         LM    RE,RC,12(RD)
         SR    RF,RF
         BSM   0,RE
PIXGET   DS    0H
         LM    R8,RB,0(R1) R8=A(X) R9=A(Y) RA=A(A(DDI01)) RB=A(A(CH))
         L     R2,0(R8)           R2=X
         L     R4,0(R9)           R4=Y
         L     R3,0(RB)           R3=A(CH)
         L     RB,0(RA)           RB=A(DDI01)
         BAL   RE,VERIFY
         B     BADGET             BR ONLY IF X,Y OUT OF RANGE
         L     R0,=X'FFFFFFFF'
         XR    R7,R0              FLIP BITS IN MASK
         L     R1,0(R8)           LOAD 4 BYTES OF PIXELS
         NR    R1,R7              CLEAR ALL EXCEPT DESIRED PIXEL
         AR    R4,RF              R4=BIT OFFSET+ELSIZE
         SR    R0,R0
         SLDL  R0,0(R4)           R0=DESIRED PIXEL
         STC   R0,0(R3)
         CH    RF,=H'4'
         BC    2,RETCTL           BR IF ELSIZE>4
         OI    0(R3),X'F0'        TURN ON HIGH BITS
         B     RETCTL
BADGET   DS    0H
         MVI   0(R3),X'40'        DEFAULT IS X'40'=BLANK
         B     RETCTL
*
* END PIXGET
*
***********************************************************************
*ABE064D: PROC(IX,IY,CH,RHPLOT79); /* #PIXPUT */
***********************************************************************
         ENTRY ABE064D
ABE064D  DS    0H
         SETUP
PIXPUT   DS    0H
         LM    R8,RB,0(R1) R8=A(X) R9=A(Y) RA=A(A(CH)) RB=A(A(DDI01))
         L     R2,0(R8)           R2=X
         L     R4,0(R9)           R4=Y
         L     RB,0(RB)           RB=A(DDI01)
         BAL   RE,VERIFY
         B     RETCTL             BR ONLY IF X,Y OUT OF RANGE
         SR    R2,R2
         SR    R3,R3
         L     RA,0(RA)           RA=A(CH)
         IC    R2,0(RA)           R3=CH
         SRDL  R2,0(RF)           SHIFT NEW PIXEL BITS INTO R3
         SRL   R3,0(R4)           R3=NEW PIXEL BITS PROPERLY OFFSET
         L     R0,0(R8)           LOAD 4 BYTES
         NR    R0,R7              TURN OFF OLD ELEMENT BITS
         OR    R0,R3              TURN ON NEW ELEMENT BITS
         ST    R0,0(R8)           STORE 4 BYTES
         B     RETCTL
*
* END PIXPUT
*
***********************************************************************
*ABE064F: PROC(X,Y,L,RHPLOT79) RETURNS(CHAR(3000) VAR); /*PIXGETL*/
***********************************************************************
         ENTRY ABE064F
ABE064F  DS    0H
         SETUP
         LM    R8,RB,0(R1) R8=A(X) R9=A(Y) RA=A(L) RB=A(A(DDI01))
         L     R2,0(R8)           R2=X
         L     R4,0(R9)           R4=Y
         L     RB,0(RB)           RB=A(DDI01)
         L     RA,0(RA)           RA=L
         L     R9,16(R1)          R9=A(A(CURLEN(STRING)))
         L     R9,0(R9)           R9=A(CURLEN(STRING))
         SR    R0,R0
         STH   R0,0(R9)           DEFAULT LENGTH IS ZERO
         LTR   RA,RA              L=0?
         BC    8,RETCTL           BR YES - ALL DONE
         BAL   RE,VERIFY
         B     RETCTL             BAD INDEX - ALL DONE
* NOW CALCULATE LENGTH TO RETURN
         LR    R2,RA
         SRDA  R2,32              R3=#PIXELS TO RETURN, R2=0
         C     RF,=F'8'           ELSIZE=1 BYTE?
         BC    8,ABE064F1
         MR    R2,RF              MULTIPLY BY ELSIZE=BITS/PIXEL
         D     R2,=F'8'           DIVIDE BY 8
*                                 R2=REMAINDER, R3=QUOTIENT
         LTR   R2,R2              REMAINDER=0?
         BC    8,ABE064F1         BR YES
         A     R3,=F'1'
ABE064F1 DS    0H                 R3=#BYTES TO RETURN
         C     R3,=F'3000'
         BC    12,ABE064F2
         L     R3,=F'3000'        MAX LENGTH TO MOVE IS 3000
ABE064F2 DS    0H
         SR    R0,R0
         L     R1,BMD1
         M     R0,BMD2            R1=#BYTES IN BIT MAP
         L     R0,BITMAPA
         AR    R0,R1              R0=ADDR(END OF BITMAP)+1
         LR    R1,R8
         AR    R1,R3              R1=ADDR(LAST BYTE TO GET)+1
         CR    R1,R0              IS LENGTH TOO LONG
         BC    12,ABE064F3        BR IF LENGTH OK
         LR    R3,R0              COMPUTE NEW
         SR    R3,R8                TRUNCATED LENGTH
ABE064F3 DS    0H
         STH   R3,0(R9)           STORE LENGTH IN RETURN STRING
         LTR   R4,R4              IS BIT OFFSET 0?
         BC    7,ABE064F4         BR IF NOT
         LA    R0,2(R9)           R0=ADDR(TO)
         LR    R1,R3              R1=LEN(TO)=R3=LEN(FROM)
         LR    R2,R8              R2=ADDR(FROM)
         MVCL  R0,R2              MOVE PIXELS
         B     RETCTL             ALL DONE
ABE064F4 DS    0H
***********************************************************************
*
* CONTROL REACHES HERE IF PIXELS TO BE COPIED AREN'T BYTE ALIGNED
*
* REGISTER USAGE IN THE FOLLOWING CODE WILL BE AS FOLLOWS:
*
* R0 - PIXEL BITS, RIGHT ALIGNED, TO BE STORED IN THE OUTPUT STRING
* R1 - PIXEL BITS LOADED FROM THE BITMAP.  PIXEL BITS ARE LOADED INTO
*      THIS REGISTER AND ALIGNED LEFT FOR SHIFTING INTO R0.
* R2 -
* R3 - #BITS REMAINING TO COPY FROM BITMAP TO OUTPUT STRING
* R4 - BIT OFFSET WITHIN EACH WORD LOADED INTO R1 TO FIRST USEABLE
*      PIXEL.  IMMEDIATELY AFTER LOADING WORD FROM BITMAP, AN SLL
*      INSTRUCTION WILL BE DONE TO SHIFT LEFT THIS AMOUNT, THEREBY
*      LEFT-ALIGNING THE DESIRED PIXELS IN THE REGISTER.
* R5 - USED IN LOOP TO CONTAIN # PIXEL BITS IN R1 THAT HAVE NOT YET
*      BEEN SHIFTED TO R0.
* R6 - CONTAINS REMAINDER(#BITS TO COPY/#BITS AVAILABLE IN R1 AFTER
*      LOAD FROM BITMAP).  THIS WILL BE THE NUMBER OF BITS LEFT TO
*      COPY AFTER THE LOOP IS COMPLETED FOR THE LAST TIME.
* R7 - CONTAINS QUOTIENT(#BITS TO COPY/#BITS AVAILABLE IN R1 AFTER
*      LOAD FROM BITMAP).  THIS VALUE IS USED TO CONTROL THE FIRST
*      LOOP.
* R8 - ADDRESS IN BITMAP FROM WHICH NEXT WORD OF PIXEL BITS IS TO BE
*      LOADED.  THIS ADDRESS WILL BE INCREMENTED BY 3 AFTER EACH LOAD
*      OF PIXEL BITS INTO R1.
* R9 - ADDRESS, LESS 2, IN THE OUTPUT STRING WHERE THE NEXT WORD OF
*      PIXEL BITS ARE TO BE STORED.
* RA - CONTAINS THE MAXIMUM NUMBER OF PIXEL BITS AVAILABLE IN R1 AFTER
*      LOADING A WORD FROM BITMAP AND DOING THE SLL TO LEFT-ALIGN
* RB -
* RC - BASE REGISTER
* RE - 32-#PIXEL BITS CURRENTLY STORED IN R0=#BITS AVAILABLE IN R0
* RF -
*
***********************************************************************
         SR    R2,R2
         M     R2,=F'8'           R3=#BITS TO COPY
         L     RE,=F'32'          RE=#BITS AVAILABLE IN R0
         LR    RA,RE              RA=MAX #BITS TO SHIFT FROM
         SR    RA,R4                R1 INTO R0 ON EACH ITERATION
         LR    R7,R3
         SR    R6,R6
         DR    R6,RA              R7=LOOP CONTROL
         LTR   R7,R7
         BC    8,ABE064F8         BYPASS LOOP
ABE064F5 DS    0H
         L     R1,0(R8)           LOAD 4 BYTES OF PIXELS
         LA    R8,3(R8)           BUMP R8
         SLL   R1,0(R4)           LEFT-ALIGN 1ST PIXEL AT BIT 0 IN R1
         LR    R5,RA              R5=MAX # BITS TO SHIFT FROM R1 TO R0
         LR    R2,R5              R2=# BITS TO SHIFT THIS TIME
         CR    R2,RE              #BITS TO SHIFT IN R1<=AVLBLE IN R0?
         BC    12,ABE064F6        BR IF YES
         LR    R2,RE
ABE064F6 DS    0H
         SLDL  R0,0(R2)           SHIFT BITS FROM R1 TO R0
         SR    RE,R2              REDUCE #BITS AVLBLE IN R0
         BC    2,ABE064F7         BR IF MORE BITS AVLBLE IN R0
         ST    R0,2(R9)
         LA    R9,4(R9)
         L     RE,=F'32'          RESET # BITS AVAILABLE IN R0 TO 32
ABE064F7 DS    0H
         SR    R5,R2              REDUCE #BITS TO SHIFT TO R0 FROM R1
         LR    R2,R5
         BC    2,ABE064F6         BR MORE BITS TO SHIFT
         SR    R3,RA              REDUCE COUNT #BITS TO COPY
         BC    8,ABE064F9         GET OUT IF NO MORE TO DO
         BCT   R7,ABE064F5        LOOP
ABE064F8 DS    0H                 BEYOND LOOP
         CR    R3,R6              R3 AND R6 SHOULD BE EQUAL
         BC    8,*+6                IF NOT,
         DC    X'0000'              CAUSE AND 0C1 ABEND
         LTR   RA,R3
         BC    2,ABE064F5         LOOP JUST ONCE MORE
ABE064F9 DS    0H                 R0 CONTAINS REMAINING BITS TO STORE
         L     R3,=F'32'
         SR    R3,RE              ANY BITS TO STORE IN R0?
         BC    8,RETCTL           BR IF NOT
* ALMOST DONE, LESS THAN 4 BYTES TO STORE
         SR    R2,R2
         D     R2,=F'8'           R2=REMAINDER, R3=QUOTIENT
         LTR   R2,R2
         BC    7,*+6
         BCTR  R3,R0              R3=R3-1
         SLL   R3,3                 TIMES 8
         LA    RF,ABE064FA
         B     0(R3,RF)
ABE064FA DS    0H
         STC   R0,2(R9)           STORE 1 BYTE
         B     RETCTL
         STH   R0,2(R9)           STORE 2 BYTES
         B     RETCTL
         STCM  R0,B'0111',2(R9)   STORE 3 BYTES
         B     RETCTL
         ST    R0,2(R9)           STORE 4 BYTES
         B     RETCTL
*
* END PIXGETL
*
***********************************************************************
*ABE064G: PROC(X,Y,L,CH,RHPLOT79); /* PIXPUTL */
***********************************************************************
         ENTRY ABE064G
ABE064G  DS    0H
         SETUP
         LM    R7,RB,0(R1) R7=A(X) R8=A(Y) R9=A(L) RA=A(A(CURLEN(CH)))
*                          RB=A(A(DDI01))
         L     R2,0(R7)           R2=X
         L     R4,0(R8)           R4=Y
         L     RB,0(RB)           RB=A(DDI01)
         L     RA,0(RA)           RA=A(CURLEN(CH))
         L     R9,0(R9)           R9=L=#PIXELS TO PUT
         LH    R7,0(RA)           R7=CURLEN
         LTR   R7,R7
         BC    8,RETCTL           DONE IF CURLEN=0
         BAL   RE,VERIFY
         B     RETCTL             BAD INDEX - ALL DONE
         SR    R0,R0
         L     R1,BMD1
         M     R0,BMD2            R1=#BYTES IN BIT MAP
         L     R0,BITMAPA
         AR    R0,R1              R0=ADDR(END OF BITMAP)+1
         LH    R7,0(RA)           R7=CURLEN
         LA    R1,0(R7,R8)        R1=ADDR(LAST BYTE TO PUT IN BITMAP)+1
         CR    R1,R0              IS LENGTH TOO LONG?
         BC    12,ABE064G1        BR IF NOT
         LR    R7,R0              COMPUTE NEW
         SR    R7,R8                TRUNCATED LENGTH
ABE064G1 DS    0H
         LR    R1,R7
         SLA   R1,3               R1=MAX #BITS TO PUT BASED ON
*                                   MIN(CURLEN,A(END BITMAP)+1-
*                                   A(1ST SPECIFIED PIXEL IN BITMAP))
         SR    R2,R2
         LR    R3,R9
         MH    R2,ELSIZE          R3=#BITS TO PUT BASED ON #PIXELS
*                                   SPECIFIED AS L PARAMETER VALUE
         CR    R3,R1
         BC    12,*+6
         LR    R3,R1              R3=#BITS TO PUT
         LTR   R4,R4              IS BIT OFFSET 0?
         BC    7,ABE064G2         BR IF NOT
         LR    R0,R3
         SR    R1,R1
         SRDL  R0,3               R0=INT(#BITS TO PUT/8)
         LTR   R1,R1              IS #BITS TO PUT EVENLY DIVIDED BY 8?
         BC    7,ABE064G2         BR IF NOT
         LR    R1,R0              R1=#BYTES TO PUT
         LR    R3,R0              R3=#BYTES TO PUT
         LR    R0,R8              R0=A(TO)
         LA    R2,2(RA)           R2=A(FROM)
         MVCL  R0,R2              MOVE PIXELS
         B     RETCTL             ALL DONE
ABE064G2 DS    0H
         L     R5,=F'8'
         SR    R5,R4
         SR    R2,R2
         D     R2,=F'24'
         LTR   R3,R3              LESS THAN 24 BITS TO COPY?
         BC    8,ABE064G4         BR YES
         S     R3,=F'1'           LESS 1
***********************************************************************
*                                                                     *
* CONTROL REACHES HERE IF PIXELS TO BE PUT AREN'T BYTE ALIGNED.       *
*                                                                     *
* REGISTER USAGE IN THE FOLLOWING CODE WILL BE AS FOLLOWS:            *
*                                                                     *
* R0 - USED IN CONJUNCTION WITH R1 TO REALIGN PIXEL BITS FROM         *
* R1 -   INPUT STRING TO BITMAP BYTES.                                *
* R2 - REMAINDER(#BITS TO PUT/24)                                     *
* R3 - QUOTIENT(#BITS TO PUT/24)-1 = LOOP CONTROL                     *
* R4 - BIT OFFSET WITHIN BITMAP BYTE ADDRESSED BY R8 TO LOCATION      *
*      WHERE FIRST PIXEL IS TO BE PUT.                                *
* R5 - F'8'-R4                                                        *
* R6 - WORK REGISTER                                                  *
* R7 - WORK REGISTER                                                  *
* R8 - ADDRESS WITHIN BITMAP OF THE BYTE WHERE THE FIRST PIXEL IS TO  *
*      BE STORED.                                                     *
* R9 -                                                                *
* RA - ADDRESS, LESS 2, IN THE INPUT STRING WHERE THE NEXT BYTE OF    *
*      PIXEL BITS IS TO BE MOVED FROM.                                *
* RB - A(DDI01)                                                       *
* RC - BASE REGISTER                                                  *
* RD - A(SAVE AREA)                                                   *
* RE -                                                                *
* RF - WORK REGISTER                                                  *
*                                                                     *
***********************************************************************
ABE064G3 DS    0H
         L     R1,2(RA)           PICK UP NEXT 3 BYTES TO COPY
         LA    RA,3(RA)           BUMP RA
         SLL   R1,0(R4)           ALIGN BITS AT LEFT END OF R1
         IC    R0,0(R8)
         SRL   R0,0(R5)           ALIGN BITS AT RIGHT END OF R0
         SRDL  R0,0(R4)           SHIFT BITS INTO R1
         ST    R1,0(R8)           STORE PIXEL BITS IN BITMAP
         LA    R8,3(R8)
         BCT   R3,ABE064G3
ABE064G4 DS    0H                 <= 24 BITS LEFT TO MOVE
         LTR   R2,R2              #BITS LEFT=0?
         BC    8,RETCTL           BR YES
         LA    RF,32
         SR    RF,R4
         SR    RF,R2              RF=32-R4-R2=#BITS TO SAVE ON RIGHT
         L     R0,0(R8)
         SRDL  R0,0(RF)           R1=BITS TO SAVE ON RIGHT
         LR    R7,R1              SAVE IN R7
         SRL   R0,0(R2)           R0=BITS TO SAVE ON LEFT
         L     R1,2(RA)           PICK UP REMAINING BITS TO COPY
         SLL   R1,0(R4)           ALIGN BITS AT LEFT END OF R1
         SLDL  R0,0(R2)           SHIFT BITS INTO R0
         LR    R1,R7              R1=BITS TO SAVE ON RIGHT
         SLDL  R0,0(RF)
         ST    R0,0(R8)
         B     RETCTL
*
* END PIXPUTL
*
VERIFY   DS    0H
***********************************************************************
*                                                                     *
* VERIFY IS CALLED TO GENERATE THE ADDRESS AND BIT OFFSET TO THE      *
* PIXEL INDEXED BY THE SPECIFIED X AND Y VALUES, AFTER VERIFYING      *
* THEY INDEX WITHIN THE BOUNDS OF THE PIXEL MATRIX.                   *
*                                                                     *
* REGISTERS AT ENTRY SHOULD BE AS FOLLOWS -                           *
*                                                                     *
* R2 - X INDEX VALUE                                                  *
* R4 - Y INDEX VALUE                                                  *
* RE - RETURN ADDRESS.  IF THE INDEX VALUES ARE OUT OF RANGE, RETURN  *
*      WILL BE TO THIS ADDRESS.  IF INDEX VALUES ARE ACCEPTABLE,      *
*      RETURN WILL BE TO THIS ADDRESS+4.                              *
*                                                                     *
* REGISTERS AT EXIT WILL BE AS FOLLOWS -                              *
*                                                                     *
* R0,R2,R3,R9,RA,RB,RC,RD,RE - UNCHANGED                              *
* R1 = 32-ELSIZE-BIT_OFFSET - ELSIZE IS THE NUMBER OF BITS PER PIXEL  *
*      (SEE DSECT ABE063I).  BIT_OFFSET IS STORED IN R4 (SEE BELOW).  *
* R4 = BIT OFFSET (RELATIVE 0) WITHIN THE BYTE POINTED TO BY R8 TO    *
*      THE FIRST BIT OF THE PIXEL INDEXED BY X AND Y.                 *
* R5 = BYTE OFFSET (RELATIVE 0) WITHIN THE PIXEL MAP TO THE BYTE      *
*      CONTAINING THE INDEXED PIXEL.                                  *
* R6 = IF ELSIZE IS 8, R6 WOULD CONTAIN X'000000FF'                   *
* R7 = IF ELSIZE IS 3, AND BIT OFFSET IN R4 IS 5, THEN R7 CONTAINS    *
*      '11111000111111111111111111111111'B.                           *
* R8 = ADDRESS WITHIN BITMAP (SEE DSECT ABE063I) TO THE BYTE          *
*      CONTAINING THE INDEXED PIXEL.                                  *
* RF = ELSIZE (SEE DSECT ABE063I).                                    *
*                                                                     *
***********************************************************************
         C     R2,=F'1'
         BCR   4,RE               BR X<1
         C     R2,MAXBTX
         BCR   2,RE               BR X>MAXBTX
         C     R4,=F'1'
         BCR   4,RE               BR Y<1
         L     R5,MAXBTY                         NEW
         SR    R5,R4              R5=MAXBTY-Y    NEW
         BCR   4,RE               BR Y>MAXBTY    NEW
         SR    R4,R4              R4=0           NEW
*        C     R4,MAXBTY                         OLD
*        BCR   2,RE               BR Y>MAXBTY    OLD
*        BCTR  R4,R0              Y=Y-1          OLD
*        SRDA  R4,32              SHIFT INTO R5  OLD
* *-1 THRU *-4 MADE COMMENTS, *-5 THRU *-8 ADDED
         M     R4,MAXBTX          R5=(Y-1)*MAXBTX
         AR    R5,R2              R5=(Y-1)*MAXBTX+X
         BCTR  R5,R0              LESS 1 FOR RELATIVE 0
         SR    R4,R4
         LH    RF,ELSIZE          RF=ELSIZE
         MR    R4,RF              R4,R5=#BITS TO ELEMENT
         D     R4,=F'8'           R4=REM=BIT OFF, R5=QUOT=BYTE OFF
         L     R6,=X'FFFFFFFF'
         SR    R7,R7
         L     R1,=F'32'          #BITS IN 4 BYTES
         SR    R1,RF              LESS ELSIZE
         SR    R1,R4              LESS BIT OFFSET
         SRDL  R6,0(R1)           SHIFT RIGHT PART OF MASK
         SRL   R7,0(RF)           MAKE ELSIZE BITS 0
         SRDL  R6,0(R4)           R7=BIT MASK TO TURN OFF OLD BITS
         L     R8,BITMAPA         R5=A(BYTE CONTAINING PIXEL)
         AR    R8,R5              R8=A(BYTE TO MODIFY)
         B     4(RE)              ALL DONE
*
* END OF VERIFY SUBROUTINE
*
***********************************************************************
*ABE064K: PROC(RHPLOT79); /* #PIXZERO */
***********************************************************************
         ENTRY ABE064K
ABE064K  DS    0H
         SETUP
PIXZERO  DS    0H
         L     RB,0(R1)           RB=A(A(DDI01))
         L     RB,0(RB)           RB=A(DDI01)
         L     R2,BITMAPA         R2=A(BITMAP)
         L     R3,=F'810000'      R3=LEN(BITMAP)
         SR    R4,R4              R4=DUMMY ADDRESS
         SR    R5,R5              R5=0
         MVCL  R2,R4              CLEAR BITMAP
         B     RETCTL
*
* END OF PIXZERO SUBROUTINE
*
         LTORG
ABE063I  DSECT
DSSIZE   DS    F
HORZNT   DS    F
IMAGE    DS    F
LINEWT   DS    F
PLSTPX   DS    F
PLSTPY   DS    F
SX       DS    F
SY       DS    F
TIMAGE   DS    16F
XMAX     DS    F
YMAX     DS    F
ZMAX     DS    F
PLXDPI   DS    F
PLYDPI   DS    F
PLMAXX   DS    F
PLMAXY   DS    F
MAXBTX   DS    F
MAXBTY   DS    F
BMD1     DS    F
BMD2     DS    F
CURPEN   DS    CL1
PENARY   DS    CL9
ELSIZE   DS    H
BITMAPA  DS    F
         END
