/*IWT 5
//X75826AB JOB (10-337-MISC-027-B4,1),
// 'SMITH-TCC',CLASS=E,MSGCLASS=1,NOTIFY=X75826
// EXEC PLIXC,PARM.PLI=M
//PLI.SYSLIB DD DSN=SYS2.SAS516.MACLIB,DISP=SHR
 /*-----------SASTOPS----------*/
 %INCLUDE MACUSER;
 SASTOPS: PROC PORTMAIN;
   DFT RANGE(*) FIXED BIN VALUE(FIXED BIN(31,0));

   DCL SASTOPG ENTRY RETURNS(PTR); /* PARSING INFORMATION */
   %INCLUDE XCOM; /* COMMUNICATIONS AREA */
   %INCLUDE XLINK; /* ALL X-ROUTINES EXCEPT XINIT,XCOMGET */
   %INCLUDE STMTSTR; /* STORAGE FOR PARSED INFORMATION */
   DCL (INFILEID,STMTPTR,VLISTPTR,XVGETPTR) PTR;
   %INCLUDE PROCPRS; /* GENERAL PARSING INFORMATION */
   %INCLUDE XINIT; /* INITIALIZES XCOM, XLINK, ETC. */
   DCL $MISS ENTRY(FLOAT BIN(FL_DBL))
     RETURNS(FIXED BIN(FX_DBL));
   DCL $NULL ENTRY RETURNS(PTR);
   %INCLUDE NAMESTR;
   DCL NAMESTRPTR PTR;
   DCL (NCHAR,NNUM,NVAR) FIXED BIN(FX_DBL);
   DCL CHARBUF CHAR(200);

   DCL CALCPRT ENTRY(DEC FLOAT(16))
     RETURNS(CHAR(80) VAR);
   DCL (ADDR,NULL) BUILTIN;
   DCL (PREFIX,SUFFIX) ENTRY(CHAR(*),CHAR(*))
     RETURNS(FIXED BIN(15,0));
   DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31,0));
   DCL PTROUT ENTRY(FIXED BIN(31,0)) RETURNS(PTR);
   DCL INFLOAT DEC FLOAT(16) BASED(INFLOAT_PTR);
   DCL DOLLAR CHAR(3) VAR;
   DCL REC CHAR(80);
   DCL BUF CHAR(80) VAR;
   DCL OUTDD CHAR(8);
   DCL OUT RECORD OUTPUT;
   DCL (USEHD,LAST) PTR;
   DCL 1 RHNAMESTR BASED(RHNAMPTR),
        2 RHNTYPE FIXED BIN(15),/* 1=FLOAT, 2=CHAR, 3=ZONED    */
        2 RHNPOS FIXED BIN(15), /* OFFSET WITHIN RECORD        */
        2 RHNLNG FIXED BIN(15), /* LENGTH WITHIN RECORD        */
        2 RHNVAR0 FIXED BIN(15),/* # OF VAR IN LIST 0 (SAS)    */
        2 RHNNAME CHAR(8),      /* NAME OF VARIABLE            */
        2 RHNLABEL CHAR(40),    /* LABEL (SAS)                 */
        2 RHNFORM CHAR(8),      /* FORMAT SUBRTNE (SAS)        */
        2 RHNIFORM CHAR(8),     /* INPUT FORMAT SUBRTNE (SAS)  */
        2 RHNFL FIXED BIN(15),  /* FORMAT FIELD LENGTH (SAS)   */
        2 RHNFD FIXED BIN(15),  /* FORMAT NO. DECIMALS (SAS)   */
        2 RHNF FIXED BIN(15),   /* LEN RETURNED BY FORMAT CALL */
        2 RHNJUST FIXED BIN(15),/* 0=LEFT, 1=RIGHT             */
        2 RHNLINK PTR,           /* LINK FIELD TO NEXT ELEMENT  */
        2 RHNCPOS FIXED BIN(15), /* OFFSET WITHIN SAS BUFFER    */
        2 RHNCLNG FIXED BIN(15), /* LENGTH WITHIN SAS BUFFER    */
        2 RHNFCODE FXL, /* FORMAT ENTRYPOINT CODE */
        2 RHNICODE FXL, /* INFORMATION ENTRYPOINT CODE */
        2 RHNVARADDR PTR,
        2 RHNCODE CHAR(1), /* 'C'=CHAR, 'F'=FLOAT */
        2 RHN_REFER_LENGTH FIXED BIN(FX_DBL),
        2 RHN_VAR_STORE CHAR(L REFER (RHN_REFER_LENGTH));

   CALL XINIT; /* FIRST TWO STATEMENTS */
   XCOMPTR=XCOMGET(); /* IN ALMOST EVERY PROC */
   CALL XSPARSE(SASTOPG()); /* PARSING */
   CALL XTOKE; /* PARSING */
   IF PROCERROR^=0
     THEN CALL XEXIT(PROCERROR,0);
   STMTPTR=PROCPTR;
   FIELDPTR=ADDR(STMTFLD(11));
   INFILEID=FIELDFILE; /* GO GET DATA= NAME */
   IF INFILEID=$NULL()
     THEN DO; /* DATA= IS MISSING */
       CALL XLOG1('ERROR - DATA= MUST BE SPECIFIED'); /* WRITE LOG */
       CALL XEXIT(XEXITSEMANTIC,0); /* EXIT - SEMANTIC ERROR */
       RETURN;
       END;
   STMTPTR=PROCPTR;
   IF STMTFLDTYPE(12)=0
     THEN DO; /* DDNAME IS MISSING */
       CALL XLOG1('ERROR - OUTDD MUST BE SPECIFIED'); /* WRITE LOG */
       CALL XEXIT(XEXITSEMANTIC,0); /* EXIT - SEMANTIC ERROR */
       RETURN;
       END;
   FIELDPTR=ADDR(STMTFLD(12));
   OUTDD=FIELDCHAR;
   OPEN FILE(OUT) TITLE(OUTDD);
   REC='DATA     ;';
   WRITE FILE(OUT) FROM(REC);

   FIELDPTR=ADDR(STMTFLD(1)); /* SET UP VAR STMT LIST */
   NVAR=FIELDN;
   IF NVAR>0
     THEN CALL XVLIST(INFILEID,1,FIELDADDR,NVAR);
     ELSE CALL XVDFLST(INFILEID,1,3); /* SET UP DEFAULT VAR LIST */
   NVAR=XVCOUNT(INFILEID,1); /* COUNT VARIABLES IN VAR LIST */
   IF NVAR=0
     THEN DO; /* DDNAME IS MISSING */
       CALL XLOG1('ERROR - NO VARIABLES TO PROCESS'); /* WRITE LOG */
       CALL XEXIT(XEXITSEMANTIC,0); /* EXIT - SEMANTIC ERROR */
       RETURN;
       END;

   /* DETERMINE CHARACTERISTICS OF VARIABLES */
   USEHD,LAST=NULL;
   NP=1; /* NEXT AVAILABLE RHNPOS VALUE */
   NCHAR=0;
   DO J=1 TO NVAR;
     CALL XVNAME(INFILEID,1,J,NAMESTRPTR);
     IF NTYPE=2
       THEN NCHAR=NCHAR+1;
     IF NTYPE=1 /* IS IT A NUMBER? */
       THEN L=8;
       ELSE L=NLNG;
     ALLOCATE RHNAMESTR;
     RHNLINK=NULL;
     IF LAST=NULL
       THEN USEHD=RHNAMPTR;
       ELSE LAST->RHNLINK=RHNAMPTR;
     LAST=RHNAMPTR;
     RHNTYPE=NTYPE;
     RHNPOS,RHNCPOS=NP;
     IF RHNTYPE=1
       THEN DO;
         RHNLNG=15; /* FOR NOW NUMBERS GET FIFTEEN POSITIONS */
         RHNCODE='F';
         END;
       ELSE DO; /* IT IS CHARACTER */
         RHNLNG,RHNCLNG=NLNG;
         RHNCODE='C';
         END;
     RHNVAR0=NVAR0;
     RHNNAME=NNAME;
     RHNLABEL=NLABEL;
     RHNIFORM=NIFORM;
     RHNFL=NFL;
     RHNFD=NFD;
     RHNF=NFL; /* ? */
     RHNJUST=NFJ;
     RHNFCODE=NFCODE;
     RHNICODE=NICODE;
     RHNVARADDR=NAMESTRPTR;
     NP=RHNPOS+RHNLNG; /* UPDATE NP */
     END;
   NNUM=NVAR-NCHAR;

   /********************************************************************
   * NOW ADJUST ALL RHNPOS VALUES TO STAY WITHIN 72 CHARACTERS, AND    *
   * WRITE OUT THE SAS CONTROL STATEMENTS DESCRIBING THE DATA SET.     *
   * NOTE THAT THE FOLLOWING CODE IS LIFTED ALMOST VERBATIM FROM       *
   * ABE053.                                                           *
   ********************************************************************/
   M=0;
   DO RHNAMPTR=USEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     P=RHNPOS; /* SAVE ORIGINAL RHNPOS */
     RHNPOS=RHNPOS-M;
     RHNLNG=MIN(72,RHNLNG);
     K=RHNPOS+RHNLNG-1; /* MAXIMUM OFFSET THIS FIELD */
     IF K>72
       THEN DO; /* TIME TO SPLIT */
         M=P-1; /* NEW OFFSET DIFFERENTIAL */
         RHNPOS=1;
         END;
     END;
   BUF='INPUT ';
   J=0; /* RHNPOS FROM PREVIOUS FIELD */
   DO RHNAMPTR=USEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     IF LENGTH(BUF)>53
       THEN DO;
         REC=BUF;
         WRITE FILE(OUT) FROM(REC);
         BUF='';
         END;
     IF RHNPOS^=0
       THEN IF RHNPOS<=J
         THEN BUF=BUF××' /'; /* SPLIT HERE TO NEW CARD */
     J=RHNPOS;
     IF RHNTYPE=2
       THEN DOLLAR=' $ ';
       ELSE DOLLAR=' ';
     PUT STRING(BUF) EDIT(BUF,' ',RHNNAME,DOLLAR)(A,A,A,A);
     PUT STRING(BUF) EDIT(BUF,OUTSUB(RHNPOS),'-',
       OUTSUB(RHNPOS+RHNLNG-1))(A,A,A,A);
     END;
   BUF=BUF××';';
   REC=BUF;
   WRITE FILE(OUT) FROM(REC);
   REC='CARDS;';
   WRITE FILE(OUT) FROM(REC);

   /* NOW TELL SAS WHERE TO STORE INPUT DATA */
   CALL XVGETI(INFILEID,NVAR,XVGETPTR); /* INITIALIZE */
   J=0;
   DO RHNAMPTR=USEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
     J=J+1; /* BUMP VARIABLE NUMBER */
     CALL XVGETD(XVGETPTR,1,J,ADDR(RHN_VAR_STORE),RHN_REFER_LENGTH,
       RHNCODE);
     END;

   /* NOW READ/WRITE THE DATA */
   DO WHILE(XOGET(INFILEID)=0);
     CALL XVGET(XVGETPTR);
     REC=''; /* CLEAR RECORD */
     P=0;
     DO RHNAMPTR=USEHD REPEAT RHNLINK WHILE(RHNAMPTR^=NULL);
       IF P>=RHNPOS
         THEN DO;
           WRITE FILE(OUT) FROM(REC);
           REC='';
           P=0;
           END;
       IF RHNTYPE=1 /* FLOAT? */
         THEN SUBSTR(REC,RHNPOS,RHNLNG)=
           CALCPRT(ADDR(RHN_VAR_STORE)->INFLOAT);
         ELSE SUBSTR(REC,RHNPOS,RHNLNG)=RHN_VAR_STORE;
       P=RHNPOS; /* SAVE LAST RHNPOS VALUE */
       END;
     WRITE FILE(OUT) FROM(REC);
     END;
   CLOSE FILE(OUT);

   CALL XEXIT(XEXITNORMAL,0);

 OUTSUB: PROC(NUM) RETURNS(CHAR(5) VAR);
 /**********************************************************************
 *                                                                     *
 * OUTSUB WILL RETURN THE PRINTABLE EQUIVALENT OF NUM WITH LEADING     *
 * ZEROS REMOVED.                                                      *
 *                                                                     *
 **********************************************************************/
   DCL NUM FIXED BIN(15,0);
   DCL PIC PIC'ZZZZ9';
   PIC=NUM;
   RETURN(SUBSTR(PIC,PREFIX(PIC,' ')));
   END OUTSUB;

   END SASTOPS;
// EXEC GRAMMAR,FUNCNAM=SASTOPG,OUTSRC=PDS
//GRAMMAR.SYSUT1 DD *
#----------OLD GRAMMER FOR PROC SASTOPS--------------------------------#
#PROC SASPROC NAME=SASTOPS,LOADMOD=SASTOPS2,DEFLIST=1,DEFMODE=ALPHANUM #
#PARMS SASLIST OUTDD,1,MODE=ALPHA,LENGTH=8                             #
#LISTS SASLIST VARIABLES,1,VAR,1,MODE=ALPHANUM                         #
# SASEND                                                               #
# END                                                                  #
#----------NEW GRAMMER FOR PROC SASTOPS-----------------#
%INCLUDE STUBGRM.
PROGRAM = ANYSTMT ENDJB,
ANYSTMT = TOPSTMT ×
          VARSTMT ,
#--------------STATEMENT DEFINITION---------------------#
TOPSTMT=                            @PROCINIT
                                    @STMTINIT(12)
             "SASTOPS" TOPOPT*      @DSDFLT(11,1)
                                    @STMTEND ,
VARSTMT=                            @STMTPROC
                                    @STMTLIST(1,3)
             ("VAR"×"VARIABLES") VARLIST ,
#--------------PROC OPTIONS-----------------------------#
TOPOPT =    "DATA"  "=" DSFIELD     @DS(11,1,1)
          × "OUTDD" "="             @PARM(12,2) NAME .
//DOIT.OBJSET DD DSN=&&SORC,DISP=(NEW,PASS),
// UNIT=DISK,SPACE=(TRK,(10,10)),
// DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
// EXEC PLIXC,PARM.PLI=M
//PLI.SYSLIB DD DSN=SYS2.SAS516.MACLIB,DISP=SHR
//PLI.SYSIN DD DSN=&&SORC,DISP=(OLD,DELETE)
// EXEC LKED,PARM.LKED='LIST,LET'
//SYSLIN DD DSN=&&LOADSET,DISP=(OLD,DELETE)
// DD DDNAME=SYSIN
//SYSLMOD DD DSN=SYS2.SAS516.LIBRARY,DISP=SHR
//SYSLIB DD DSN=SYS1.PLIBASE,DISP=SHR
// DD DSN=SYS2.PLIBASE,DISP=SHR
// DD DSN=SYS2.SAS516.SUBLIB,DISP=SHR
 ENTRY ENTRY
 SETSSI AA000000
 NAME SASTOPS(R)
