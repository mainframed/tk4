*PROCESS GN,SEQ(73,77),A,AG;
0/*--------------------------------------------------------------------
0  THIS PROGRAM MAY BE USED TO READ AN OS FORMAT DATASET (ON DD NAME
   SYSUT1) AND WRITE THE DATASET IN CMS DISK DUMP (ON DD NAME SYSUT2).
0  THE CMS FILE NAME IS GENERATED AS FOLLOWS (FILE MODE WILL ALWAYS BE
   "A1"):
0  IF THE PARM FIELD IS NON-BLANK, THEN IT IS ASSUMED TO CONTAIN THE CMS
   FILE NAME AS 'FILENAME.FILETYPE', WHERE "FILENAME" AND "FILETYPE" MAY
   EACH BE FROM 1 TO 8 CHARACTERS IN LENGTH, AND ARE SEPARATED BY A
   PERIOD (.).
0  IF THE PARM FIELD IS BLANK, THE CMS FILE NAME IS GENERATED FROM THE
   DSNAME OF THE INPUT DATA SET.  "DSN=XXXXXXXX" GIVES A CMS FILE NAME
   OF "XXXXXXXX DATA A1".  "DSN=XXXXXXXX.YYYYYYYY" GIVES "XXXXXXXX
   YYYYYYYY A1".  DATASET NAMES WITH MORE THAN 2 QUALIFIERS RESULT IN
   A CMS FILE NAME CONSISTING OF THE LAST TWO QUALIFIERS, E.G.,
   "TAPE.YEARLY.MASTER.FILE" WOULD BE "MASTER FILE A1".
0--------------------------------------------------------------------*/
-VMDUMP: PROC(PARM) REORDER OPTIONS(MAIN);
         DCL PARM CHAR(100) VARYING,
             SYSUT1 FILE RECORD INPUT SEQUENTIAL,
             SYSUT2 FILE RECORD OUTPUT SEQUENTIAL
                    ENV(FB RECSIZE(80) BLKSIZE(6000) TOTAL),
             TEXTV CHAR(32767) VARYING STATIC,
             1 INRECF BASED(P),
               2 TEXTF CHAR(32767),
             OUTREC CHAR(32767) BASED(PS),
             (P,PS) POINTER STATIC,
             BUFFER CHAR(32767) STATIC,
             EOF CHAR(1) STATIC INIT('N'),
             (#IN,#OUT,#BLOCKS,BSTART,I,SEQ#,#PER,LREC)
             FIXED BIN(31) STATIC INIT(0),
             DSNV CHAR(44) VARYING STATIC,
             PER(10) FIXED BIN(15) STATIC INIT((10) 0),
             (DATE,TIME) BUILTIN,
             DATEX PIC '999999',
             TIMEX PIC '999999999',
             1 DATETIME_STRUCT STATIC,
               2 DATEPX CHAR(3),
               2 TIMEPX CHAR(5),
             DATEP FIXED DEC(7) BASED(X),
             TIMEP FIXED DEC(9) BASED(X),
             DATETIME CHAR(6) BASED(X),
             X POINTER STATIC,
             DSINFO ENTRY EXTERNAL,
             DDN CHAR(8) STATIC INIT('SYSUT1  '),
             1 DSINF_STRUCT STATIC,
               2 DSN CHAR(44),
               2 VOLSER CHAR(6),
               2 UNIT   BIT(32),
               2 DSTYPE CHAR(1),
               2 DSORG  BIT(16),
               2 RECFM  BIT(8),
               2 BLKSIZE FIXED BIN(15),
               2 LRECL   FIXED BIN(15);
 DCL 1 CARD1 STATIC,                       /* DISK DUMP CARD 1       */
       2 HEX1     BIT(8) INIT('00000010'B),/* X'02'                  */
       2 CMS1     CHAR(3) INIT('CMS'),     /* C'CMS'                 */
       2 TYPE     CHAR(1),                 /* F OR V (FIXED OR VAR)  */
       2 DATA     CHAR(50),                /* 50 BYTES OF DATA       */
       2 BLOCK#1  FIXED BIN(15),           /* PHYSICAL BLOCK NUMBER  */
       2 FNAME1   CHAR(8),                 /* FILE NAME              */
       2 FTYPE1   CHAR(8),                 /* FILE TYPE              */
       2 FMODE    CHAR(3) INIT('A1 '),     /* FILE MODE              */
       2 SEQ#1    PIC '9999';              /* CARD SEQUENCE NUMBER   */
 DCL 1 CARD2 STATIC,                       /* DISK DUMP END CARD     */
       2 HEX2     BIT(8) INIT('00000010'B),/* X'02'                  */
       2 CMS2     CHAR(4) INIT('CMSN'),    /* C'CMSN'                */
       2 FSTWP    FIXED BIN(15) INIT(0),   /* WRITE POINTER          */
       2 FSTRP    FIXED BIN(15) INIT(0),   /* READ POINTER           */
       2 FSTM     CHAR(2) INIT('A1'),      /* FILE MODE              */
       2 FSTIC    FIXED BIN(15),           /* ITEM COUNT             */
       2 FSTFCL   FIXED BIN(15) INIT(0),   /* FIRST CHAIN BLOCK      */
       2 FSTFV    CHAR(1),                 /* F OR V (FIXED OR V)    */
       2 FSTFB    BIT(8) INIT('00000000'B),/* FLAG BYTE              */
       2 FSTIL    FIXED BIN(31),           /* (MAX) ITEM LENGTH      */
       2 FSTDBC   FIXED BIN(15),           /* NUMBER OF DATA BLOCKS  */
       2 FSTYR    FIXED BIN(15) INIT(0),   /* YEAR                   */
       2 FSTFOP   FIXED BIN(31) INIT(0),   /* ALT FILE ORIGIN POINTER*/
       2 FSTADBC  FIXED BIN(31) INIT(0),   /* ALT NUMBER DATA BLOCKS */
       2 FSTAIC   FIXED BIN(31),           /* ALT ITEM COUNT         */
       2 FSTNLVL  BIT(8) INIT('00000000'B),/* # BLOCK POINTER LEVELS */
       2 FSTPTRSZ BIT(8) INIT('00000000'B),/* LENGTH OF PTR ELEMENT  */
       2 FSTADATI CHAR(6),                 /* ALT DATE TIME          */
       2 FILLER   CHAR(4),                 /*                        */
       2 FSTDATI  CHAR(6),                 /* DATE AND TIME          */
       2 BLOCK#2  FIXED BIN(15),           /* PHYSICAL BLOCK NUMBER  */
       2 FNAME2   CHAR(8),                 /* FILE NAME              */
       2 FTYPE2   CHAR(8),                 /* FILE TYPE              */
       2 FMODE    CHAR(3) INIT('A1 '),     /* FILE MODE              */
       2 SEQ#2    PIC '9999';              /*                        */
         ON ENDFILE(SYSUT1) EOF = 'Y';
         BSTART = 1;
         PS = ADDR(TEXTV);
0/*      GET TIME AND DATE IN CMS FILE STATUS TABLE FORMAT */
0        DATEX = DATE;
         TIMEX = TIME;
         X = ADDR(DATEPX);
         DATEP = DATEX*10;
         X = ADDR(TIMEPX);
         TIMEP = TIMEX;
         X = ADDR(DATEPX);
0/*      GET INFO ABOUT DATASET TO BE DUMPED */
0        CALL DSINFO(DDN,DSINF_STRUCT);
         I = INDEX(DSN,' ');
         IF I = 0
         THEN DSNV = DSN;
         ELSE DSNV = SUBSTR(DSN,1,I-1);
         IF DSTYPE = 'S' /* SEQUENTIAL DATA SET */
          × DSTYPE = 'M' /* PARTITIONED DATA SET MEMBER */
          × DSTYPE = 'T' /* TAPE */
          × DSTYPE = 'J' /* JES DATA SET */
         THEN;
         ELSE DO;
           IF DSTYPE = 'U' THEN DO;
             PUT LIST('//SYSUT1 DD STATEMENT MISSING.');
             CALL PLIRETC(12);
             RETURN;
             END;
           ELSE DO;
             PUT EDIT(DSNV,' IS AN INVALID DATASET TYPE.')(A);
             CALL PLIRETC(12);
             RETURN;
             END;
           END;
         IF SUBSTR(RECFM,1,2) = '10'B THEN TYPE,FSTFV = 'F';
         ELSE TYPE,FSTFV = 'V';
 /*      ELSE IF SUBSTR(RECFM,1,2) = '01'B THEN TYPE,FSTFV = 'V';
         ELSE DO;
           CALL PLIRETC(12);
           PUT LIST('INVALID RECFM.');
           RETURN;
           END; */
         PUT EDIT('DATASET TO BE DUMPED IS ',DSNV,
         ' ON VOLUME ',VOLSER,'.')(A);
0/*      GET FILE NAME, FILE TYPE FROM PARM FIELD IF PRESENT */
0        IF LENGTH(PARM) > 0 THEN DO;
           I = INDEX(PARM,'.');
           IF I = 0 × I > 9 × LENGTH(PARM) > 19 THEN DO;
             PUT SKIP(2)EDIT('PARM  FIELD VALUE "',PARM,'" IS INVALID.')
                 (A);
             CALL PLIRETC(12);
             RETURN;
             END;
           ELSE DO;
             FNAME1,FNAME2 = SUBSTR(PARM,1,I-1);
             FTYPE1,FTYPE2 = SUBSTR(PARM,I+1,LENGTH(PARM)-I);
             END;
           PUT SKIP(2) EDIT ('CMS FILE NAME (FROM PARM FIELD) IS: ',
           FNAME1,' ',FTYPE1,' A1.')(A);
           END;
0/*      OTHERWISE, GET FILE NAME FROM INPUT DATASET NAME */
0        ELSE DO;
           DO I = 1 TO LENGTH(DSNV);
             IF SUBSTR(DSNV,I,1) = '.' THEN DO;
               #PER = #PER + 1;
               PER(#PER) = I;
               END;
             END;
           IF #PER = 0 THEN DO;
             FNAME1,FNAME2 = DSNV;
             FTYPE1,FTYPE2 = 'DATA     ';
             END;
           ELSE IF #PER = 1 THEN DO;
             FNAME1,FNAME2 = SUBSTR(DSNV,1,PER(1)-1);
             FTYPE1,FTYPE2 = SUBSTR(DSNV,PER(1)+1,LENGTH(DSNV)-PER(1));
             END;
           ELSE DO;
             FNAME1,FNAME2 =
             SUBSTR(DSNV,PER(#PER-1)+1,PER(#PER)-PER(#PER-1)-1);
             FTYPE1,FTYPE2 =
             SUBSTR(DSNV,PER(#PER)+1,LENGTH(DSNV)-PER(#PER));
             END;
           PUT SKIP(2) EDIT ('CMS FILE NAME (FROM INPUT DSNAME) IS: ',
           FNAME1,' ',FTYPE2,' A1.')(A);
           END;
0/*      GET FIRST DATA RECORD */
0        IF TYPE = 'F'
         THEN READ FILE(SYSUT1) SET(P);
         ELSE DO;
           READ FILE(SYSUT1) INTO(TEXTV);
           LREC = LENGTH(TEXTV);
           END;
         IF EOF = 'Y' THEN DO;
           PUT LIST('UNEXPECTED END OF FILE.');
           CALL PLIRETC(12);
           RETURN;
           END;
0/*      LOOP, PROCESSING INFORMATION IN BUFFER AND READING RECORDS */
0        DO WHILE (EOF = 'N');
           #IN = #IN + 1;
0/*        WRITE OUT BUFFER IF LARGER THAN CMS BLOCKSIZE (800) */
0          DO WHILE (BSTART > 800);
             BLOCK#1 = #BLOCKS + 1;
             DO I = 1 TO 16;
               DATA = SUBSTR(BUFFER,1+(I-1)*50,50);
               SEQ# = SEQ# + 1;
               SEQ#1 = SEQ#;
               WRITE FILE(SYSUT2) FROM(CARD1);
               #OUT = #OUT + 1;
               END;
             #BLOCKS = #BLOCKS + 1;
             IF BSTART > 801 THEN
             SUBSTR(BUFFER,1,BSTART-800-1) =
             SUBSTR(BUFFER,801,BSTART-800-1);
             BSTART = BSTART - 800;
             END;
0/*        ADD NEW RECORD TO BUFFER */
0          IF TYPE = 'F' THEN DO;
             SUBSTR(BUFFER,BSTART,LRECL) = SUBSTR(TEXTF,1,LRECL);
             BSTART = BSTART + LRECL;
             END;
           ELSE DO;
             SUBSTR(BUFFER,BSTART,LREC+2) = SUBSTR(OUTREC,1,LREC+2);
             BSTART = BSTART + LREC + 2;
             END;
0/*        READ NEXT RECORD */
0          IF TYPE = 'F'
           THEN READ FILE(SYSUT1) SET(P);
           ELSE DO;
             READ FILE(SYSUT1) INTO(TEXTV);
             LREC = LENGTH(TEXTV);
             END;
           END;
0/*      ALL DATA HAS BEEN READ.  FLUSH BUFFER OF REMAINING DATA. */
0        IF BSTART > 1 THEN DO;
           I = 1;
           BLOCK#1 = #BLOCKS + 1;
           DO WHILE (BSTART - I >= 50);
             DATA = SUBSTR(BUFFER,I,50);
             SEQ# = SEQ# + 1;
             SEQ#1 = SEQ#;
             WRITE FILE(SYSUT2) FROM(CARD1);
             #OUT = #OUT + 1;
             I = I + 50;
             END;
           IF BSTART - I > 1 THEN DO;
             DATA = SUBSTR(BUFFER,I,BSTART-I);
             SEQ# = SEQ# + 1;
             SEQ#1 = SEQ#;
             WRITE FILE(SYSUT2) FROM(CARD1);
             #OUT = #OUT + 1;
             END;
           #BLOCKS = #BLOCKS + 1;
           END;
0/*      WRITE OUT "N" CARD CONTAINING DATA ABOUT THE FILE */
0        IF TYPE = 'F'
         THEN FSTIL    = LRECL;
         ELSE FSTIL    = LRECL - 4;
         FSTIC    = #IN;
         FSTDBC   = #BLOCKS;
         BLOCK#2  = #BLOCKS;
         FSTADBC  = #BLOCKS;
         FSTDATI  = DATETIME;
         FSTADATI = DATETIME;
         FSTAIC   = #IN;
         SEQ# = SEQ# + 1;
         SEQ#2 = SEQ#;
         WRITE FILE(SYSUT2) FROM(CARD2);
         #OUT = #OUT + 1;
0/*      PRINT STATISTICS */
0        PUT SKIP(2) EDIT(#IN,' DATA RECORDS IN.',
         #OUT,' DATA RECORDS OUT.',
         #BLOCKS,' DATA BLOCKS OUT.')
         (SKIP,P 'ZZ,ZZZ,ZZ9',A);
         RETURN;
         END VMDUMP;
