*PROCESS GN,SEQ(73,77),A,OF;
 INFOSMP: PROC REORDER OPTIONS(MAIN);
-/*---------------------------------------------------------------------
   THIS PROGRAM READS THE OUTPUT OF SMP4 "LISTCDS XREF" AND PRODUCES
   INPUT FOR INFO/MVS BLGOZB PROGRAM.  BLGOZB MAY BE USED TO CREATE
   AN INFO/MVS-SEARCHABLE DATA BASE.
 ---------------------------------------------------------------------*/
-        DCL INREC CHAR(255) VARYING STATIC,
             SYSUT1 FILE RECORD SEQUENTIAL INPUT,
             SYSUT2 FILE RECORD SEQUENTIAL OUTPUT
                    ENV(VB RECSIZE(255) BLKSIZE(3120) TOTAL),
             1 OUT1 STATIC,     /* HEADER LINE */
               2 SEQ#1   PIC '99999999' INIT(0),
               2 ID      CHAR(2)      INIT('H '),
               2 ENTRYL  CHAR(1)      INIT('V'),
               2 ENTRYN  PIC '999999' INIT(0),
               2 FIL102  CHAR(15)     INIT(' S=SMP C=GX6 L='),
               2 NPIC    PIC '9999'   INIT(0),
             1 OUT2 STATIC,     /* TITLE LINE 1 */
               2 SEQ#2   PIC '99999999' INIT(0),
               2 ID      CHAR(2) INIT('T '),
               2 FIL201  CHAR(6)  INIT('TIME: '),
               2 TIMEX   CHAR(09) INIT((09)' '),
               2 DATET   CHAR(06) INIT((06)' '),
               2 DSN     CHAR(30) INIT((30)' '),
             1 OUT3 STATIC,     /* TITLE LINE 2 */
               2 SEQ#3   PIC '99999999' INIT(0),
               2 ID      CHAR(2)  INIT('T '),
               2 FIL301  CHAR(7)  INIT('ENTRY: '),
               2 TYPEX   CHAR(12) INIT((12)' '),
               2 ENTRY   CHAR(08) INIT((08)' '),
             1 OUT4 STATIC,     /* KEYWORD LINE */
               2 SEQ#4   PIC '99999999' INIT(0),
               2 ID      CHAR(2) INIT('K '),
               2 TEXT4   CHAR(70) INIT((70)' '),
             1 OUT5 STATIC,     /* BLANK LINE BETWEEN KEYWORD / TEXT */
               2 SEQ#5   PIC '99999999' INIT(0),
               2 TEXT5   CHAR(1) INIT(' '),
             1 OUT6 STATIC,     /* TEXT LINE */
               2 SEQ#6   PIC '99999999' INIT(0),
               2 TEXT6   CHAR(72) INIT((70)' '),
             1 OUT7 STATIC,     /* END LINE */
               2 SEQ#7   PIC '99999999' INIT(0),
               2 ID      CHAR(4) INIT('$EOM'),
             (EOF1,HISTORY,LIST,SHIFT) CHAR(1) STATIC INIT('N'),
             KEY(8192)  CHAR(12) VARYING STATIC,
             LINE(1024) CHAR(72) VARYING STATIC,
             TYPE CHAR(19) INIT((19)' ') STATIC,
             (SEQ#,ENT#,NK,P,I,NT,LX,#IN,ID,#TRUNC,EN)
             FIXED BIN(31) STATIC INIT(0);
         ON ENDFILE(SYSUT1) EOF1 = 'Y';
0/*      READ FIRST RECORD */
0        READ FILE(SYSUT1) INTO(INREC);
         #IN = 1;
0/*      CREATE FIRST ENTRY */
0        CALL KEYWORD('TITLE');
         CALL ADD('THIS FILE (V) IS THE OUTPUT FROM SMP4 "LISTCDS XREF".
 ');
         CALL WRITE;
0/*      LOOP WHILE READING INPUT */
0        DO WHILE (EOF1 = 'N');
0/*        PAGE HEADING */
0          IF SUBSTR(INREC,1,11) = '1     DATE ' THEN DO;
             IF TIMEX = ' ' THEN DO;
               TIMEX = SUBSTR(INREC,25,9);
               DATET = SUBSTR(INREC,12,6);
               END;
             GO TO READ;
             END;
0/*        PAGE SUB-HEADING */
0          IF SUBSTR(INREC,1,9) = ' SMPCDS  ' THEN DO;
             IF SUBSTR(INREC,10,19) ^= TYPE THEN DO;
               TYPE = SUBSTR(INREC,10,19);
               EN = INDEX(TYPE,'ENTR');
               END;
             GO TO READ;
             END;
0/*        CONTROL CARD */
0          IF INDEX(INREC,'LIST CDS XREF') > 0 THEN DO;
             DSN = SUBSTR(INREC,1,30);
             CALL WRITE;
             GO TO READ;
             END;
0          IF SUBSTR(INREC,1,8) = '   NAME ' THEN GO TO READ;
0          /*-------------------------*/
           /*        NEW ENTRY        */
           /*-------------------------*/
0          IF SUBSTR(INREC,12,18) = 'OPTIONS         = ' THEN DO;
             CALL WRITE;
             CALL KEYWORD(SUBSTR(TYPEX,1,INDEX(TYPEX,' ')-1));
             CALL KEYWORD(SUBSTR(INREC,2,
             INDEX(SUBSTR(INREC,2,20),' ')-1));
             ENTRY = SUBSTR(INREC,2,INDEX(SUBSTR(INREC,2,20),' ')-1);
             END;
0          IF SUBSTR(INREC,12,18) = 'LASTUPD         = ' THEN DO;
             CALL WRITE;
             IF TYPEX = 'LOAD MODULE '
             THEN CALL KEYWORD('LMOD');
             ELSE CALL KEYWORD(SUBSTR(TYPEX,1,INDEX(TYPEX,' ')-1));
             CALL KEYWORD(SUBSTR(INREC,2,
             INDEX(SUBSTR(INREC,2,20),' ')-1));
             ENTRY = SUBSTR(INREC,2,INDEX(SUBSTR(INREC,2,20),' ')-1);
             IF SUBSTR(INREC,30,5) ^= 'JCLIN'
              & SUBSTR(INREC,30,5) ^= 'UCLIN' THEN
             CALL KEYWORD(SUBSTR(INREC,30,
             INDEX(SUBSTR(INREC,30,9),' ')-1));
             END;
0          ELSE IF SUBSTR(INREC,12,18) = 'TYPE            = ' THEN DO;
             CALL WRITE;
             CALL KEYWORD(SUBSTR(TYPEX,1,INDEX(TYPEX,' ')-1));
             CALL KEYWORD(SUBSTR(INREC,2,
             INDEX(SUBSTR(INREC,2,20),' ')-1));
             ENTRY = SUBSTR(INREC,2,INDEX(SUBSTR(INREC,2,20),' ')-1);
             IF SUBSTR(INREC,30,10) = 'SUPERSEDED' THEN
             CALL KEYWORD('SUP');
             END;
0          /*-------------------------*/
           /*         SAME ENTRY      */
           /*-------------------------*/
0          ELSE IF SUBSTR(INREC,12,18) = 'FMID            = '
                 × SUBSTR(INREC,12,18) = 'GENASM          = '
                 × SUBSTR(INREC,12,18) = 'IFREQ           = '
                 × SUBSTR(INREC,12,18) = 'IFREQBY  (XREF) = '
                 × SUBSTR(INREC,12,18) = 'LASTSUP         = '
                 × SUBSTR(INREC,12,18) = 'LMOD            = '
                 × SUBSTR(INREC,12,18) = 'MAC             = '
                 × SUBSTR(INREC,12,18) = 'MACROS          = '
                 × SUBSTR(INREC,12,18) = 'MACROS USED     = '
                 × SUBSTR(INREC,12,18) = 'MACUPD          = '
                 × SUBSTR(INREC,12,18) = 'MODULES         = '
                 × SUBSTR(INREC,12,11) = 'PRE    VER('
                 × SUBSTR(INREC,12,18) = 'PREBY    (XREF) = '
                 × SUBSTR(INREC,12,18) = 'RMID            = '
                 × SUBSTR(INREC,12,18) = 'SRCUPD          = '
                 × SUBSTR(INREC,12,18) = 'STATUS          = '
                 × SUBSTR(INREC,12,18) = 'SUPBY    (XREF) = '
                 × SUBSTR(INREC,12,18) = 'SUPBY(IN SYSMD) = '
                 × SUBSTR(INREC,12,11) = 'SUPING VER('
                 × SUBSTR(INREC,12,18) = 'SYSTEM LIBRARY  = '
                 × SUBSTR(INREC,12,18) = 'SZAP            = '
                 × SUBSTR(INREC,12,18) = 'UMID            = '
                 × SUBSTR(INREC,12,18) = 'VERSIONBY(XREF) = '
                 × SUBSTR(INREC,12,18) = 'XZAP            = ' THEN DO;
             CALL KEYLIST(SUBSTR(INREC,30));
             SHIFT,HISTORY = 'N';
             LIST = 'Y';
             END;
0          ELSE IF SUBSTR(INREC,12,18) = 'LIBRARIES       = ' THEN DO;
             CALL KEYEQU(SUBSTR(INREC,30));
             SHIFT,HISTORY,LIST = 'N';
             END;
0          ELSE IF SUBSTR(INREC,12,18) = 'DATE/TIME REC   = '
                 × SUBSTR(INREC,12,18) = 'LKED ATTRIBUTES = '
                 × SUBSTR(INREC,12,18) = 'JCLIN           = ' THEN DO;
             SHIFT,HISTORY,LIST = 'N';
             END;
0          ELSE IF SUBSTR(INREC,12,18) = 'SYSMOD HISTORY  = '
                 × SUBSTR(INREC,12,18) = 'LKED CONTROL    = '
                 × SUBSTR(INREC,12,18) = 'ASSEMBLER INPUT = ' THEN DO;
             CALL ADD('== '××SUBSTR(INREC,12,16)××' ==');
             LIST = 'N';
             SHIFT= 'Y';
             IF SUBSTR(INREC,12,1) = 'S' THEN HISTORY = 'Y';
             END;
0          ELSE IF VERIFY(INREC,' ') = 0 THEN GO TO READ;
0          ELSE IF LIST = 'Y' THEN CALL KEYLIST(SUBSTR(INREC,30));
0          IF SHIFT = 'Y' THEN DO;
             CALL ADD(SUBSTR(INREC,30,71));
             IF HISTORY = 'Y' THEN IF SUBSTR(INREC,30,7) ^= 'SYSMOD'
             THEN CALL KEYWORD(SUBSTR(INREC,30,INDEX(SUBSTR(INREC,30,9),
             ' ')-1));
             END;
0          ELSE DO;
             IF VERIFY(SUBSTR(INREC,72),' ') > 0 THEN DO;
               CALL ADD(SUBSTR(INREC,1,71));
               CALL ADD(SUBSTR(INREC,72));
               END;
             ELSE DO;
               CALL ADD(INREC);
               END;
             END;
 READ:     READ FILE(SYSUT1) INTO(INREC);
           #IN = #IN + 1;
           END;
         CALL WRITE;
         RETURN;
1/*      ADD EACH MEMBER OF A LIST AS A KEYWORD */
0KEYLIST: PROC(X);
         DCL X CHAR(*),
             Y CHAR(133) VARYING STATIC INIT(''),
             (IB,IN) FIXED BIN(15) STATIC INIT(0);
         Y = X;
         IB = INDEX(Y,' ');
         IN = VERIFY(Y,' ');
      /* PUT SKIP(2) DATA(IB,IN,Y); */
         IF IN > 1 THEN DO;
           Y = SUBSTR(Y,IN);
           IB = INDEX(Y,' ');
           END;
         DO WHILE (IN > 0);
           CALL KEYWORD(SUBSTR(Y,1,IB-1));
           Y = SUBSTR(Y,IB+1);
           IB = INDEX(Y,' ');
           IN = VERIFY(Y,' ');
           IF IN > 1 THEN DO;
             Y = SUBSTR(Y,IN);
             IB = INDEX(Y,' ');
             END;
           END;
         RETURN;
         END KEYLIST;
1/*      ADD EACH MEMBER AFTER "=" AS A KEYWORD */
0KEYEQU:  PROC(X);
         DCL X CHAR(*),
             Y CHAR(72) VARYING STATIC INIT(''),
             (I,J) FIXED BIN(15) STATIC INIT(0);
         Y = X;
         I = INDEX(Y,'=');
         DO WHILE (I > 0);
           J = INDEX(SUBSTR(Y,I+1),' ');
           IF J > 0
           THEN CALL KEYWORD(SUBSTR(Y,I+1,J-1));
           ELSE CALL KEYWORD(SUBSTR(Y,I+1));
           Y = SUBSTR(Y,I+J+1);
           I = INDEX(Y,'=');
           END;
         RETURN;
         END KEYEQU;
1/*      ADD A LINE OF TEXT TO THE CURRENT ENTRY */
0ADD:    PROC(X);
         DCL X CHAR(*);
         IF NT < 1024 THEN DO;
           NT = NT + 1;
           LINE(NT) = ' '××X;
           END;
         ELSE #TRUNC = #TRUNC + 1;
         RETURN;
         END ADD;
1/*      WRITE OUT THE CURRENT ENTRY */
0WRITE:  PROC;
         SHIFT,HISTORY,LIST = 'N';
         IF NK = 0 THEN RETURN;
         ENT# = ENT# + 1;
         ENTRYN = ENT#;
         SEQ# = SEQ# + 1;
         SEQ#1 = SEQ#;
         NPIC = NT + 5;
         WRITE FILE(SYSUT2) FROM(OUT1);
         SEQ# = SEQ# + 1;
         SEQ#2 = SEQ#;
         WRITE FILE(SYSUT2) FROM(OUT2);
         SEQ# = SEQ# + 1;
         SEQ#3 = SEQ#;
         WRITE FILE(SYSUT2) FROM(OUT3);
         P = 1;
         TEXT4 = (70)' ';
         DO I = 1 TO NK;
           IF P + LENGTH(KEY(I)) > 70 THEN
             DO;
             SEQ# = SEQ# + 1;
             SEQ#4 = SEQ#;
             WRITE FILE(SYSUT2) FROM(OUT4);
             P = 1;
             TEXT4 = (70)' ';
             END;
           SUBSTR(TEXT4,P,LENGTH(KEY(I))) = KEY(I);
           P = P + LENGTH(KEY(I)) + 1;
           END;
         SEQ# = SEQ# + 1;
         SEQ#4 = SEQ#;
         WRITE FILE(SYSUT2) FROM(OUT4);
         SEQ# = SEQ# + 1;
         SEQ#5 = SEQ#;
         WRITE FILE(SYSUT2) FROM(OUT5);
         IF #TRUNC > 0 THEN DO;
           SEQ# = SEQ# + 1;
           SEQ#6 = SEQ#;
           PUT STRING(TEXT6) EDIT
           (' ** ENTRY TRUNCATED. ',#TRUNC,' LINES LOST **')
           (A,P 'ZZ,ZZ9',A);
           WRITE FILE(SYSUT2) FROM(OUT6);
           #TRUNC = 0;
           END;
         DO I = 1 TO NT;
           SEQ# = SEQ# + 1;
           SEQ#6 = SEQ#;
           TEXT6 = LINE(I);
           WRITE FILE(SYSUT2) FROM(OUT6);
           END;
         SEQ# = SEQ# + 1;
         SEQ#7 = SEQ#;
         WRITE FILE(SYSUT2) FROM(OUT7);
         NK,NT = 0;
         IF EN > 0 THEN DO;
           TYPEX = SUBSTR(TYPE,1,EN-2);
           I = VERIFY(TYPEX,' ');
           IF I > 1 THEN TYPEX = SUBSTR(TYPEX,I,13-I);
           END;
         RETURN;
         END;
1/*      ADD A KEYWORD TO THE CURRENT ENTRY */
0KEYWORD: PROC(X);
         DCL X CHAR(*);
      /* PUT DATA(X); */
         IF NK = 0 THEN DO;
           NK = 1;
           KEY(1) = X;
           RETURN;
           END;
         ELSE IF NK < 8192 THEN DO;
           DO I = 1 TO NK;
             IF X = KEY(I) THEN RETURN;
             END;
           NK = NK + 1;
           KEY(NK) = X;
           END;
         ELSE DO;
           PUT SKIP(2) EDIT ('MAXIMUM KEYWORDS EXECEEDED.  ',
           'INPUT RECORD NUMBER ',#IN,'.',
           'KEYWORD IGNORED: "',X,'".')(2 A,P 'ZZ,ZZZ,ZZ9',A,SKIP,3 A);
           END;
         RETURN;
         END KEYWORD;
         END;
