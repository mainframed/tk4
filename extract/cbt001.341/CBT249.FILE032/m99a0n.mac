         SPACE 3
***********************************************************************
*                                                                     *
*                          M 9 9 A 0 N                                *
*                                                                     *
*      A C F 2   S E C U R I T Y   F O R   N C C F   L O G O N        *
*                                                                     *
*                                                                     *
*                 J . G . K I N K E R   -   0 3 / 8 2                 *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS MODULE IS A FRONTEND TO NCCF NORMAL LOGON PROCESSING    *
*        MODULE DSILAN.  IT VALIDATES THE LOGONID, PASSWORD AND       *
*        PROFILE NAME ENTRIES FROM THE NCCF LOGON SCREEN AGAINST      *
*        THE ACF2 DATA BASE.  IT ALSO ASSURES THAT PERSONS TRYING     *
*        TO LOGON TO NCCF ARE AUTHORIZED TO DO SO.  ONCE M99A0N       *
*        HAS COMPLETED ITS LOGON VALIDATION, CONTROL IS PASSED TO     *
*        DSILAN WHICH PERFORMS THE NCCF VALIDATION AND CONSTRUCTS     *
*        TABLES REQUIRED BY NCCF.                                     *
*                                                                     *
*        ASSEMBLY OF THIS MODULE REQUIRES THAT NCCF MACRO DSIPSS      *
*        BE PATCHED TO RECOGNIZE THE 'RESTORE' PARAMETER OF THE       *
*        'OPTIONS' KEYWORD.  'RESTORE' IS USED INTERNALLY BY NCCF     *
*        LOGON BUT IS NOT DOCUMENTED IN THE CUSTOMIZATION MANUAL      *
*        AND IS NOT VALID IN THE ASSEMBLER VERSION OF THE DSIPSS      *
*        MACRO DISTRIBUTED WITH THE PRODUCT.  ROHM AND HAAS           *
*        USERMOD RH00026 PROVIDES THE REQUIRED PATCH.                 *
*                                                                     *
*        THIS MODULE IS STORED IN RH.SYSPROG AND IS INSTALLED         *
*        INTO THE RUNNING SYSTEM BY ROHM AND HAAS USERMOD RH00027.    *
*        WHEN INSTALLED, IT FRONTENDS MODULE DSILAN WHICH RESIDES     *
*        IN SYS1.LPALIB.                                              *
*                                                                     *
*   INPUT TO THIS MODULE IS:                                          *
*        A POINTER TO THE NCCF COMMAND PROCESSOR PARAMETER LIST,      *
*        DSICWB (THE COMMAND WORK BLOCK), IN REGISTER ONE.  THE       *
*        CWB IN TURN CONTAINS POINTERS TO:                            *
*          * THE LOGON COMMAND BUFFER;                                *
*          * THE PARSE DESCRIPTOR BLOCK FOR THE LOGON COMMAND;        *
*          * A SERVICE WORK BLOCK (SWB) FOR OUR USE.                  *
*        THE CWB ALSO CONTAINS A STANDARD SAVE AREA SO WE DON'T       *
*        HAVE TO GETMAIN ONE OF OUR OWN.                              *
*                                                                     *
*   OUTPUT OF THIS MODULE IS:                                         *
*        VALIDATED LOGON PARAMETERS WHICH WILL PASS NCCF'S OWN        *
*        LOGON VALIDATION PROCESSING AND/OR MESSAGES AND PROMPTS      *
*        IDENTIFYING ERRONEOUS LOGON PARAMETERS TO BE CORRECTED       *
*        BEFORE THE LOGON CAN PROCEED.                                *
*                                                                     *
*        THE PASSWORD ACTUALLY PASSED TO NCCF'S LOGON PROCESSING      *
*        IS A FIXED VALUE WHICH IS THE SAME FOR ALL USERS.  THIS      *
*        ELIMINATES THE NEED TO MAINTAIN NCCF'S COPY OF PASSWORDS     *
*        WHEN THEY CHANGE IN ACF2.                                    *
*                                                                     *
*        IF THE USER SPECIFIES NO PROFILE PARAMETER WHEN HE LOGS      *
*        ON, A DEFAULT PROFILE PARAMETER OBTAINED FROM THE ACF2       *
*        LOGONID RECORD IS INSERTED INTO THE LOGON COMMAND BUFFER     *
*        FOR NCCF TO PROCESS.                                         *
*                                                                     *
*   OPERATION:                                                        *
*        THIS MODULE GETMAINS A PRIVATE WORK AREA WHICH IS CHAINED    *
*        OFF THE NCCF TASK VECTOR BLOCK (TVB) AND POINTED TO BY THE   *
*        TVB USER FIELD (TVBUFLD).  IF THIS MODULE REJECTS THE        *
*        LOGON ATTEMPT, THE WORK AREA IS FREED, OTHERWISE IT          *
*        REMAINS ALLOCATED FOR USE BY OTHER USER FUNCTION WHICH MAY   *
*        BE ADDED IN THE FUTURE.  THE NCCF LOGOFF EXIT MODULE,        *
*        DSIEX14, IS RESPONSIBLE FOR FREEING THE WORK AREA WHEN THE   *
*        OWNING SESSION ENDS NORMALLY.  IF THE OWNING SESSION ENDS    *
*        ABNORMALLY, THE WORK AREA IS FREED AUTOMATICALLY BY NCCF     *
*        BECAUSE IT IS CHAINED OFF THE TVB.                           *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        ZERO - SUCCESSFULL EXECUTION                                 *
*          1  - THE LOGONID SPECIFIED IS NOT VALID                    *
*          2  - THE PASSWORD SPECIFIED IS NOT VALID                   *
*          3  - THE PROFILE NAME SPECIFIED IS NOT VALID               *
*          4  - THE HARDCOPY NAME SPECIFIED IS NOT VALID              *
*         16  - A TERMINAL ERROR HAS OCCURRED.                        *
*                                                                     *
*   EXTERNAL REFERENCES:                                              *
*        NONE.                                                        *
*                                                                     *
*   RELATED MODULES:                                                  *
*        DSIEX14 - NCCF LOGOFF EXIT, FREES THE PRIVATE WORK AREA      *
*                  ALLOCATED BY THIS MODULE.  REVIEW FOR IMPACT       *
*                  OF CHANGES TO THIS MODULE.  SOURCE LOCATED IN      *
*                  MAD.SYS.VTAM.MSOURCE(DSIEX14).                     *
*                                                                     *
*   PARAMETERS TO ASSEMBLE AND LINK:                                  *
*      ASSEMBLE:                                                      *
*         MACRO LIBRARIES:                                            *
*              RHMAC, SYS1.MACLIB, MAD.SYS.ACF.ACFMAC                 *
*         OPTIONS:                                                    *
*              RENT        (TEST,SYSPARM(TEST))                       *
*      LINK:                                                          *
*         ALIASES:                                                    *
*              NONE                                                   *
*         CALL LIBRARIES:                                             *
*              STANDARD                                               *
*         OPTIONS:                                                    *
*              RENT,REFR   (TEST)                                     *
*         ADDITIONAL CONTROL STATEMENTS:                              *
*              NONE                                                   *
*                                                                     *
*   THIS MODULE RESIDES IN RH.SYSPROG AND IS FULLY INSTALLED BY       *
*   APPLYING ROHM AND HAAS USERMOD RH00027.                           *
*                                                                     *
*   MAINTENANCE ACTIVITY:                                             *
*        SP0050 10/83 JGK - ADD ACF2 3.1.4 MESSAGE ACF01137 TO        *
*             MESSAGE TABLE WITH RETURN CODE ZERO.                    *
*                                                                     *
*        07/84 BWS - MAKE CORRECTIONS TO INSTALL VERSION 2            *
*             OF NCCF                                                 *
*                                                                     *
*        06/85 JGK - CORRECT CLOBBERED TASK VECTOR BLOCK PTR NEEDED   *
*             BY NCCF 2.2 VERSION OF DSIFRE                           *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
&LABEL   ERROR &MSG,&EXIT
.*
.*       VERSION 01.00             J.G.KINKER
.*
.*       THIS MACRO IS USED TO INVOKE THE ERROR ROUTINE STORED IN
.*       MACLIB.ASM(ERRRTN).
.*
         GBLC  &ERT,&REGNMPX
         LCLC  &R
&R       SETC  '&REGNMPX'          GET REGISTER NAME PREFIX FROM ENTER
&LABEL   LA    &R.15,&MSG          POINT TO ERROR MESSAGE
         BAL   &R.14,&ERT.010      PERFORM ERROR PROCESSING
         AIF   (T'&EXIT EQ 'O').Z010
         B     &EXIT
.Z010    ANOP
         MEND
         EJECT
         MACRO
&LABEL   MSG   &TEXT,&RC=,&REPLY=,&ROUTCDE=(2,8,11)
.*
.*       VERSION 01.01             J.G.KINKER
.*
.*       MSG GENERATES MESSAGES IN A FORMAT ACCEPTABLE TO THE ERROR
.*       PROCESSING SUBROUTINE STORED IN MACLIB.ASM(ERRRTN).  IT IS
.*       CODED:
.*                              --     -- --     -- --    -- --     --
.*             LABEL MSG 'TEXT' ×,OPTION× ×,OPTION× ×......× ×,OPTION×
.*                              --     -- --     -- --    -- --     --
.*                       --               -- --          --
.*                       ×,REPLY=REPLY-CHAR× ×,RC=RET-CODE×
.*                       --               -- --          --
.*
.*       LABEL IS REQUIRED AND IS REPLACED WITH A VALID ASSEMBLER
.*             LABEL.
.*
.*       TEXT IS REPLACED BY THE TEXT OF THE MESSAGE.
.*
.*       OPTION IS REPLACED BY ONE OR MORE OF THE FOLLOWING OPTION
.*             KEYWORDS IN ANY SEQUENCE:
.*                  ABEND TO CAUSE THE ERROR ROUTINE TO ABEND AFTER
.*                        ALL MESSAGE PROCESSING IS PERFORMED.
.*                  WTO TO CAUSE THE MESSAGE TO BE WTO'ED.
.*
.*                  TERM TO CAUSE THE MESSAGE TO BE TPUT'ED.
.*
.*                  WTL TO CAUSE THE MESSAGE TO BE WRITTEN TO THE
.*                        LOG.
.*                  REPORT TO CAUSE THE MESSAGE TO BE DISPLAYED ON
.*                        A REPORT.
.*                  SEND TO CAUSE THE MESSAGE TO BE SENT TO A TSO
.*                        USER VIA THE OPERATOR SEND COMMAND AND
.*                        SVC 34 INTERFACE.  NOTE THE MODULE MUST
.*                        BE APF AUTHORIZED FOR THIS OPTION.
.*                  NOCB BYPASS GENERATION OF THE MESSAGE CONTROL
.*                        BLOCK.
.*
.*       REPLY-CHAR IS REPLACED BY THE SINGLE CHARACTER EXPECTED IN
.*             REPLY TO THIS MESSAGE AFTER IT IS DISPLAYED WITH A WTOR.
.*
.*       RET-COD IS REPLACED WITH THE NUMBER TO BE SET IN REGISTER 15
.*             AT EXIT FROM THE ERROR ROUTINE OR TO BE USED AS AN ABEND
.*             CODE IF ABEND IS ONE OF THE OPTIONS SELECTED.
.*
.*
         LCLA  &CNT,&LIM
         LCLB  &ABND,&WTO,&RPT,&TERM,&NOCB,&WTOR,&WTL,&SEND
&CNT     SETA  1
.A010    ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT GT N'&SYSLIST).B010
         AIF   ('&SYSLIST(&CNT)' NE 'ABEND').A020
&ABND    SETB  1
         AGO   .A010
.A020    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'WTO').A030
&WTO     SETB  1
         AGO   .A010
.A030    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'REPORT').A040
&RPT     SETB  1
         AGO   .A010
.A040    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'TERM').A050
&TERM    SETB  1
         AGO   .A010
.A050    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'WTL').A060
&WTL     SETB  1
         AGO   .A010
.A060    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'NOCB').A070
&NOCB    SETB  1
         AGO   .C010
.A070    ANOP
         AIF   ('&SYSLIST(&CNT)' NE 'SEND').A010
&SEND    SETB  1
         AGO   .A010
.B010    ANOP
         AIF   (T'&REPLY EQ 'O').B020
&WTOR    SETB  1
.B020    ANOP
&LABEL   DC    F'0'           REMOTE MESSAGE ADDRESS
         DC    B'0&SEND&WTL&TERM&RPT&WTO&WTOR&ABND' OPTIONS
         AIF   (T'&REPLY EQ 'O').B040
         DC    C'&REPLY'      WTOR REPLY EXPECTED
         AGO   .B050
.B040    ANOP
         DC    C' '           WTOR REPLY EXPECTED
.B050    ANOP
         AIF   (T'&RC EQ 'O').B060
         DC    AL2(&RC)       RETURN OR COMPLETION CODE
         AGO   .B070
.B060    ANOP
         DC    H'0'           RETURN OR COMPLETION CODE
.B070    ANOP
.C010    ANOP
         AIF   (T'&TEXT EQ 'O').Z010
         AIF   (&NOCB EQ 1).C020
         WTO   &TEXT,ROUTCDE=&ROUTCDE,MF=L
         AGO   .C030
.C020    ANOP
&LABEL   WTO   &TEXT,ROUTCDE=&ROUTCDE,MF=L
.C030    ANOP
.Z010    ANOP
         SPACE 3
         MEND
         EJECT
M99A0N   ENTER BASEREG=(12),SAVAREA=NONE,                              *
               VERSION=01,LEVEL=00,                                    *
               TITLE='ACF2 SECURITY FRONTEND FOR NCCF LOGON PROCESSING *
               - J.G.KINKER - 03/82'
         SPACE 6
*
* G L O B A L   A S S E M B L Y   V A R I A B L E S
*
         GBLB  &TEST
         GBLC  &SCN,&RSVPFX,&ERT,&EST,&CSECT,&SCNDLM
         AIF   (T'&SYSPARM EQ 'O').$900
         AIF   (K'&SYSPARM LT 4).$010
&TEST    SETB  ('&SYSPARM'(1,4) EQ 'TEST')
.$010    ANOP
.$900    ANOP
&SCN     SETC  'S'       SCAN SUBROUTINE IDENTIFIER - 1 OR 2 CHARS
&SCNDLM  SETC  'VODLMCHK' SCAN SUBRTN DELIMITER STORAGE FIELD, OPTIONAL
&RSVPFX  SETC  'W2'      REGISTER SAVE AREA PREFIX - 2 CHARS
&EST     SETC  'W2'      ERROR ROUTINE STORAGE AREA PREFIX - 2 CHARS
&ERT     SETC  'Z'       ERROR ROUTINE IDENTIFIER - 1 OR 2 CHARS
         SPACE 6
*
* G L O B A L   R E G I S T E R   U S E   A S S I G N M E N T S
*
         USING W2WORK,R6      ADDR'G CWB WORK AREA
         USING W1WORK,R7      ADDR'G R&H DATA AREA
         USING DSIMVT,R8      ADDR'G NCCF MAIN VECTOR TABLE
         USING PDBENTRY,R9    ADDR'G LOGON COMMAND PARSE ELEMENTS
         USING DSITIB,R10     ADDR'G NCCF TASK INFORMATION BLOCK
         USING DSICWB,R11     ADDR'G NCCF COMMAND WORK BLOCK
*              R12            MODULE BASE REGISTER
*              R13            SAVE AREA ADDRESS
*              R14            SUBROUTINE LINKAGE
*              R15            WORK AND RETURN CODES
         EJECT
***********************************************************************
*                                                                     *
* A   -   M A I N L I N E   C O N T R O L   L O G I C                 *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE IS THE MAINLINE CONTROL LOGIC FOR THE MODULE.   *
*        IT COMPLETES THE ENTRY LINKAGE ACCORDING TO NCCF CONVEN-     *
*        TIONS, ALLOCATES STORAGE FOR ACF2 CONTROL BLOCKS AND A       *
*        COPY OF THE ACF2 LOGONID RECORD, THEN PERFORMS ROUTINES      *
*        WHICH VALIDATE THE LOGON PARAMETERS.  IF THE LOGON COMMAND   *
*        PARAMETERS ARE VALID, IT PASSES CONTROL TO DSILAN.  IF THE   *
*        LOGON COMMAND PARAMETERS ARE INVALID, IT RETURNS CONTROL     *
*        TO THE CALLER.                                               *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        AS DESCRIBED IN THE MODULE PROLOGUE.                         *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        AS DESCRIBED IN THE MODULE PROLOGUE.                         *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE.                                              *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING DSITVB,R5      ADDR'G NCCF TASK VECTOR BLOCK           *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        NONE, THOSE SET BY CALLED ROUTINES ARE PASSED UNCHANGED.     *
*                                                                     *
***********************************************************************
         SPACE 6
A010     TAG
***********************************************************************
*                                                                     *
*   COMPLETE ENTRY LINKAGE ACCORDING TO NCCF CONVENTIONS              *
*                                                                     *
***********************************************************************
         LR    R11,R1         SET PTR TO COMMAND WORK BLOCK (CWB)
         LA    R13,CWBSAVEA   SET PTR TO CWB SAVE AREA FOR OUR USE
         ST    R14,4(R13)     SAVE PTR TO CALLER'S SAVE AREA
         ST    R13,8(R14)     SAVE PTR TO OUR SAVE AREA IN CALLER'S
         L     R10,CWBTIB     SET PTR TO TASK INFORMATION BLOCK (TIB)
         L     R5,TIBTVB      SET PTR TO TASK VECTOR BLOCK (TVB)
         ST    R5,0(R13)      SAVE TVB PTR IN OUR SAVE AREA
         L     R8,TVBMVT      SET PTR TO MVT
***********************************************************************
*                                                                     *
*   ESTABLISH GLOBAL REGISTER VALUES AND GET ACF2 CTL BLK STORAGE     *
*                                                                     *
***********************************************************************
*
*        THE FOLLOWING FOUR INSTRUCTIONS ARE INCLUDED BECAUSE DSILAN
*        DOES THE SAME THING AT ENTRY.  REASON IS UNKNOWN SO I PLAYED
*        IT SAFE.
*
         SLR   R0,R0          MAKE A ZERO
         ST    R0,TIBSCTSK    INDICATE NO SCOPE CHECKING
         L     R14,TIBNCBFR   SET PTR TO NORMAL COMMAND BUFFER
         STH   R0,HDRMLENG-BUFHDR(R14) INDICATE ZERO LENGTH COMMAND
*
         LA    R6,CWBADATD    SET PTR TO CWB AUTOMATIC WORK AREA
         MVC   W2MSGCB,CMREMOTE MOVE REMOTE MSG CTL BLK TO WORKING STOR
         LA    R2,W1WRKSIZ    LOAD R2 WITH W1WRKSIZ          BWS 07/84
         DSIGET LV=(R2),      GET SPACE FOR OUR PRIVATE DATA BWS 07/84 *
               A=TVBUFLD,REENT=YES,LISTA=W2GETWRK,Q=YES,               *
               TASKA=(R5),EXIT=NO
         LTR   R15,R15        WAS GETMAIN SUCCESSFULL
         BZ    A020           B IF YES
         ERROR CMNOSTOR,A910  INDICATE NO MEMORY AVAILABLE
A020     TAG
         L     R7,TVBUFLD     SET PTR TO OUR PRIVATE DATA AREA
         CLEAR W1WORK,X'00',W1WRKSIZ CLEAR THE PRIVATE DATA AREA
         LA    R1,W1WRKSIZ    SET SIZE AND SUBPOOL OF AREA GOTTEN
         ST    R1,W1SIZE      AND STORE IN AREA FOR USE IN FREEMAIN
         MVC   W1IDENT,=C'NCVT' SET CONTROL BLOCK ID IN AREA
         LA    R5,W1ACF2      SET PTR TO ACF2 CONTROL BLOCK AREA
         ST    R5,W1AACF2     AND SAVE IT IN THE CVT PART OF THE AREA
***********************************************************************
*                                                                     *
*   VALIDATE LOGON COMMAND DATA                                       *
*                                                                     *
***********************************************************************
         PERF  C010,,A800     VALIDATE LOGONID/PASSWORD
         PERF  F010,,A800     VALIDATE PROFILE NAME
         PERF  G010,,A800     VALIDATE HARDCOPY DEVICE NAME
***********************************************************************
*                                                                     *
*   LOGON COMMAND IS VALID, TRANSFER CONTROL TO DSILAN                *
*                                                                     *
*        NOTE THAT CONTROL IS TRANSFERED WITH NO EVIDENCE OF THIS     *
*        MODULE'S EXISTENCE EXCEPT THE ACF2 CONTROL BLOCK POINTER     *
*        IN THE TVB USER FIELD.  CONTROL PASSES DIRECTLY FROM         *
*        DSILAN TO OUR CALLER; IT DOES NOT COME BACK HERE.            *
*                                                                     *
***********************************************************************
         XC    W2WORK,W2WORK  CLEAR CWB WORK AREA FOR DSILAN
         CLEAR CWBLAUSR       SET FIELDS DSILAN EXPECTS TO BE BLANKS
         CLEAR CWBLAPRF          (THIS IS A CLASSIC CASE OF UNNECESSARY
         CLEAR CWBLAHCY           DATA COUPLING IN A SYSTEM OF MODULES)
         L     R13,4(R13)     SET PTR TO ORIGINAL CALLER'S SAVE AREA
         L     R14,12(R13)    SET ORIGINAL CALLER'S RETURN POINT
         L     R15,=V(DSILAN) SET DSILAN ENTRY POINT ADDRESS
         LM    R0,R12,20(R13) RESTORE ORIGINAL CALLER'S REGISTERS
         BR    R15            TRANSFER CONTROL TO DSILAN
***********************************************************************
*                                                                     *
*   LOGON COMMAND IS INVALID, RETURN TO CALLER IGNORING DSILAN        *
*                                                                     *
***********************************************************************
A800     TAG
         LR    R3,R15         SAVE RETURN CODE FROM VALIDATION ROUTINE
         ICM   R1,B'1111',W1AACMCB DO WE HAVE ACF2 RESOURCES QUEUED
         BZ    A810           B IF NOT
         PERF  X010           RELEASE THE ACF2 RESOURCES
A810     TAG
         L     R5,TIBTVB      SET PTR TO TVB                 JGK 06/85
         LA    R2,W1WRKSIZ    LOAD R2 WITH W1WRKSIZ          BWS 07/84
         DSIFRE LV=(R2),      FREE PRIVATE DATA STORAGE      BWS 07/84 *
               A=TVBUFLD,LISTA=W2GETWRK,Q=YES,                         *
               TASKA=(R5),EXIT=NO
         SLR   R0,R0          MAKE A ZERO
         ST    R0,TVBUFLD     CLEAR PTR TO PRIVATE DATA STORAGE
         LR    R15,R3         RESTORE VALIDATION RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
A910     TAG
         XC    W2WORK,W2WORK  CLEAR CWB WORK AREA
         L     R13,4(R13)     SET PTR TO ORIGINAL CALLER'S SAVE AREA
         EXIT  RETCODE=(15)
         SPACE 3
         DROP  R5
         EJECT
***********************************************************************
*                                                                     *
* C   -   V A L I D A T E   L O G O N I D / P A S S W O R D           *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE INITIALIZES THE ACF2 REQUEST CONTROL BLOCK,     *
*        PRE-VALIDATES THE LOGONID AND PASSWORD FOR PRESENCE AND      *
*        VALID LENGTH, THEN CALLS ACF2 TO VALIDATE THE LOGONID AND    *
*        PASSWORD COMBINATION.                                        *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        *  THE PRIVATE DATA AREA ALLOCATED AND INITIALIZED           *
*                                                                     *
*        *  THE PARSE DESCRIPTOR BLOCK FOR THE LOGON COMMAND          *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        *  IF THE LOGON IS VALID, A POINTER TO THE ACF2 ACMCB        *
*           CONTROL BLOCK IN THE ACF2 CONTROL BLOCK AREA.             *
*        *  IF THE LOGON IS INVALID, A MESSAGE WRITTEN TO THE         *
*           USER'S TERMINAL DESCRIBING THE ERROR AND A RETURN         *
*           CODE.                                                     *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE.                                              *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING LIDREC,R3      ADDR'G ACF2 LOGONID RECORD              *
         USING ACCVT,R4       ADDR'G ACF2 CVT                         *
         USING W1ACF2,R5      ADDR'G ACF2 CONTROL BLOCK AREA          *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        ZERO - THE LOGON IS VALID                                    *
*         1   - THE LOGONID SPECIFIED IS NOT VALID                    *
*         2   - THE PASSWORD SPECIFIED IS NOT VALID                   *
*                                                                     *
***********************************************************************
         SPACE 6
C010     SUBIN ,(3,4,5)
***********************************************************************
*                                                                     *
*   INITIALIZE THE ACF2 REQUEST CONTROL BLOCK                         *
*                                                                     *
***********************************************************************
         L     R5,W1AACF2     SET PTR TO ACF2 CONTROL BLOCK AREA
         CLEAR ACVLID,,ACVRECB-ACVLID CLEAR THE ACVALD CHARACTER AREAS
         MVI   ACVFCN,X'01'   SET VALIDATION REQUEST CODE
         OI    ACVSFCN,ACVSMVAL INDICATE MUSASS VALIDATION REQUEST
         OI    ACVCNTL,ACVCIPSD+ACVCPROC SET CONTROL BITS
         MVC   ACVSLID,=C'NCCF' SET OUR PROC NAME
         LA    R14,W1MSGBUF   SET PTR TO BUFFER FOR ACF2 MESSAGES
         ST    R14,ACVMSG     AND STORE IT IN ACVALD
         ST    R14,W2MSGCB+W3MSGADR-W3MSGCB AND IN REMOTE MSG CTL BLK
         L     R2,TIBTVB      SET PTR TO NCCF TASK VECTOR BLOCK
         MVC   ACVSRCE,TVBLUNAM-DSITVB(R2) MOVE TERMINAL NAME TO SOURCE
***********************************************************************
*                                                                     *
*   PRE-VALIDATE LOGONID                                              *
*                                                                     *
***********************************************************************
         L     R2,CWBPDB      SET PTR TO PARSE DESCRIPTOR BLOCK
*                             SET PTR TO PDB FOR LOGONID
         LA    R9,0*(PDBENTND-PDBENTRY)+CFPDBFIX(R2)
         CLI   PDBLENG,X'00'  IS LOGONID SPECIFIED
         BH    C020           B IF YES
         ERROR CMNOID,C910    INDICATE NO LOGONID
C020     TAG
         CLI   PDBLENG,X'08'  IS LOGONID TOO LONG
         BL    C030           B IF NOT
         ERROR CMIDLEN,C910   INDICATE LOGONID TOO LONG
C030     TAG
         L     R2,CWBBUF      SET PTR TO START OF BUFFER
         AH    R2,PDBDISP     ADD OFFSET TO START OF LOGONID
         IC    R15,PDBLENG    GET LOGONID LENGTH
         BCTR  R15,0          DECREMENT FOR MOVE
         EX    R15,C920       MVC  ACVLID(0),0(R2)
***********************************************************************
*                                                                     *
*   PRE-VALIDATE PASSWORD                                             *
*                                                                     *
***********************************************************************
         L     R2,CWBPDB      SET PTR TO PARSE DESCRIPTOR BLOCK
*                             SET PTR TO PDB FOR PASSWORD
         LA    R9,1*(PDBENTND-PDBENTRY)+CFPDBFIX(R2)
         CLI   PDBLENG,X'00'  IS PASSWORD SPECIFIED
         BNE   C110           B IF YES
         ERROR CMNOPASS,C910  INDICATE NO PASSWORD
C110     TAG
         CLI   PDBLENG,X'09'  IS PASSWORD TOO LONG
         BL    C120           B IF NOT
         ERROR CMPASLEN,C910  INDICATE PASSWORD TOO LONG
C120     TAG
         L     R2,CWBBUF      SET PTR TO START OF BUFFER
         AH    R2,PDBDISP     ADD OFFSET TO START OF PASSWORD
         IC    R15,PDBLENG    GET PASSWORD LENGTH
         BCTR  R15,0          DECREMENT FOR MOVE
         EX    R15,C930       MVC  ACVPSWD(0),0(R2)
***********************************************************************
*                                                                     *
*   CALL ACF2 TO VALIDATE THE LOGONID/PASSWORD COMBINATION            *
*                                                                     *
***********************************************************************
         ACFINCVT R4,NONE=C700 GET PTR TO ACF2 CVT
         ACFSVC ACVALD,TYPE=A,NONE=C710,CVT=HAVE CALL ACF2 TO VALIDATE
         LTR   R15,R15        WAS EVERYTHING OK
         BNZ   C300           B IF NOT
         L     R2,ACVUCB      GET PTR TO ACMCB FROM REQUEST BLOCK
         ST    R2,W1AACMCB    AND SAVE IT IN THE ACF2 CTL BLK AREA
         L     R3,ACMLIDAD-ACMCB(R2) SET PTR TO ACF2 LOGONID RECORD
         ST    R3,W1ALID      AND SAVE IT IN THE ACF2 CTL BLK AREA
***********************************************************************
*                                                                     *
*   LOGONID AND PASSWORD VALID - ARE THEY AUTHORIZED FOR NCCF USE     *
*                                                                     *
***********************************************************************
         TM    LIDRHFL1,LIDRH1NA IS USER AUTHORIZED TO USE NCCF
         BO    C230           B IF YES
         ERROR CMNONCCF,C910  INDICATE NOT AUTHORIZED FOR NCCF
C230     TAG
         L     R2,CWBBUF      SET PTR TO START OF BUFFER
         AH    R2,PDBDISP     ADD OFFSET TO START OF PASSWORD
         MVI   0(R2),C'A'     FORCE PASSWORD TO CONSTANT 'A'
         MVI   PDBLENG,X'01'  FORCE PASSWORD LENGTH TO 1
         TM    ACVRFLG,ACVRMSG WAS A MESSAGE RETURNED BY ACF2
         BNZ   C305           B IF YES
         B     C900           EXIT
***********************************************************************
*                                                                     *
*   HANDLE ERROR RETURNED BY ACF2 VALIDATION                          *
*                                                                     *
***********************************************************************
C300     TAG
         CH    R15,=H'4'      IS ACF2 RETURN CODE FOUR OR LESS
         BH    C320           B IF NOT
C305     TAG
         LA    R14,CFMSGTBL   SET PTR TO ACF2 MESSAGE ID TABLE
         LA    R3,CFMSGTBE-1  SET PTR TO END OF TABLE
         LA    R2,CFMSGLEN    SET LENGTH OF A TABLE ENTRY
C310     CLC   0(8,R14),W1MSGBUF+4 LOCATE MSG ID IN TABLE
         BE    C330           B IF MATCH
         BXLE  R14,R2,C310    LOOP TILL MATCH OR END OF TABLE
C320     TAG
         LA    R15,16         SET TERMINAL ERROR RETURN CODE
         B     C340           GO ISSUE MESSAGE
C330     TAG
         LH    R15,8(R14)     GET APPROPRIATE RETURN CODE FROM MSG TAB
C340     TAG
         STH   R15,W2MSGCB+W3RETCOD-W3MSGCB AND STORE IN MSG CTL BLK
         ERROR W2MSGCB,C910   ISSUE ERROR MESSAGE AND EXIT
***********************************************************************
*                                                                     *
*   HANDLE ACF2 NOT AVAILABLE CONDITIONS                              *
*                                                                     *
***********************************************************************
C700     TAG
         ERROR CMACFCVT,C910  INDICATE CAN'T FIND ACF2 CVT
C710     TAG
         ERROR CMNOACF,C910   INDICATE ACF2 NEVER STARTED
***********************************************************************
*                                                                     *
*   EXIT WITH ZERO RETURN CODE                                        *
*                                                                     *
***********************************************************************
C900     TAG
         SR    R15,R15             CLEAR RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
C910     TAG
         SUBOUT
         SPACE 3
***********************************************************************
*                                                                     *
*   EXECUTED INSTRUCTIONS                                             *
*                                                                     *
***********************************************************************
C920     MVC   ACVLID(0),0(R2)     MOVE LOGONID TO ACF2 REQUEST BLOCK
C930     MVC   ACVPSWD(0),0(R2)    MOVE PASSWORD TO ACF2 REQUEST BLOCK
         SPACE 3
         DROP  R3
         DROP  R4
         DROP  R5
         EJECT
***********************************************************************
*                                                                     *
* F   -   V A L I D A T E   P R O F I L E   N A M E                   *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE VALIDATES THE PROFILE NAME, IF ANY, ENTERED     *
*        ON THE LOGON COMMAND.  IF NONE IS ENTERED, IT SUPPLIES A     *
*        DEFAULT FROM THE ACF2 LOGONID RECORD.                        *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        *  THE PARSE DESCRIPTOR BLOCK FOR THE LOGON COMMAND          *
*                                                                     *
*        *  THE USER'S LOGONID RECORD                                 *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        *  IF THE PROFILE NAME IS VALID, A RETURN CODE INDICATING    *
*           SAME.                                                     *
*        *  IF THE PROFILE NAME IS NOT ENTERED, THE PROFILE NAME      *
*           PARSE DESCRIPTOR ELEMENT AND COMMAND BUFFER ALTERED TO    *
*           CONTAIN THE DEFAULT PROFILE NAME, IF ANY.                 *
*        *  IF THE PROFILE NAME IS INVALID, A MESSAGE AND RETURN      *
*           CODE INDICATING SAME.                                     *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE.                                              *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING LIDREC,R3      ADDR'G ACF2 LOGONID RECORD              *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        ZERO - THE PROFILE NAME SPECIFIED IS VALID                   *
*         3   - THE PROFILE NAME SPECIFIED IS NOT VALID               *
*                                                                     *
***********************************************************************
         SPACE 6
F010     SUBIN ,(3)
         L     R3,W1ALID      SET PTR TO ACF2 LOGONID RECORD
         L     R2,CWBPDB      SET PTR TO PARSE DESCRIPTOR BLOCK
*                             SET PTR TO PDB FOR PROFILE NAME
         LA    R9,2*(PDBENTND-PDBENTRY)+CFPDBFIX(R2)
         CLI   PDBLENG,X'00'  IS PROFILE NAME SPECIFIED
         BE    F020           B IF NOT
***********************************************************************
*                                                                     *
*   MAKE SURE USER IS ALLOWED TO SPECIFY A PROFILE NAME               *
*                                                                     *
***********************************************************************
         TM    LIDRHFL1,LIDRH1NP IS PROF NAME SPECIFICATION ALLOWED
         BO    F900           B IF YES
         ERROR CMNOPROF,F910  INDICATE MAY NOT SPECIFY PROFILE NAME
***********************************************************************
*                                                                     *
*   NO PROFILE SPECIFIED - SUPPLY USER'S DEFAULT, IF ANY              *
*                                                                     *
***********************************************************************
F020     TAG
         SLR   R14,R14        MAKE A ZERO
         BCTR  R14,0          THEN A -1
         LA    R15,LIDRHNDP   SET PTR TO DEFAULT PROFILE NAME
         LA    R1,L'LIDRHNDP-1(R15) SET PTR TO END OF DEFAULT PROF NAME
F030     TAG                  DETERMINE LENGTH OF DEFAULT PROFILE NAME
         CLI   0(R1),C' '     IS THIS BYTE A BLANK
         BE    F040           B IF YES
         CLI   0(R1),X'00'    OR A ZERO
         BNE   F050           B IF NOT
F040     TAG
         BXH   R1,R14,F030    LOOP TILL FIND END OF PROFILE NAME
         B     F900           EXIT IF DEFAULT PROFILE NAME IS NULL
F050     TAG
         SR    R1,R15         COMPUTE LENGTH OF PROFILE NAME
         LA    R1,1(R1)
         PERF  J010,F910      GET SPOT IN COMMAND BUFFER FOR PROF NAME
         STCM  R0,B'0011',PDBDISP STORE OFFSET TO SPOT IN PDB
         STC   R1,PDBLENG     STORE LENGTH IN PDB
         BCTR  R1,0           REDUCE LENGTH FOR MOVE
         EX    R1,F990        MVC  0(0,R15),LIDRHNDP
***********************************************************************
*                                                                     *
*   EXIT WITH ZERO RETURN CODE                                        *
*                                                                     *
***********************************************************************
F900     TAG
         SR    R15,R15             CLEAR RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
F910     TAG
         SUBOUT
         SPACE 3
***********************************************************************
*                                                                     *
*   EXECUTED INSTRUCTIONS                                             *
*                                                                     *
***********************************************************************
F990     MVC   0(0,R15),LIDRHNDP   MOVE PROFILE NAME TO COMMAND BUFFER
         SPACE 3
         DROP  R3
         EJECT
***********************************************************************
*                                                                     *
* G   -   V A L I D A T E   H A R D C O P Y   D E V I C E   N A M E   *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE VALIDATES THE HARDCOPY OPTION, IF ANY, ENTERED  *
*        ON THE LOGON COMMAND.  IF 'NO' IS ENTERED, THE PARAMETER IS  *
*        NULLIFIED.  IF 'YES' IS ENTERED AND THE DEFAULT HARDCOPY     *
*        DEVICE NAME IN THE LOGONID RECORD IS SUPPLIED, THE COMMAND   *
*        BUFFER IS ALTERED TO CONTAIN THE NAME; IF 'YES' AND NO       *
*        HARDCOPY NAME IN THE LOGONID RECORD, AN ERROR MESSAGE IS     *
*        ISSUED.  IF NEITHER 'YES' OR 'NO', THE ENTRY IS ASSUMED TO   *
*        BE THE NAME OF THE DESIRED HARDCOPY DEVICE AND IS NOT        *
*        ALTERED BUT THE 'OK TO SPECIFY HARDCOPY NAME' FLAG IN THE    *
*        LOGONID RECORD MUST BE ON OR AN ERROR MESSAGE IS ISSUED.     *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        *  THE PARSE DESCRIPTOR BLOCK FOR THE LOGON COMMAND          *
*                                                                     *
*        *  THE USER'S LOGONID RECORD                                 *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        *  IF THE HARDCOPY NAME IS NO, THE PARAMETER NULLIFIED.      *
*                                                                     *
*        *  IF THE HARDCOPY NAME IS YES, THE COMMAND BUFFER ALTERED   *
*           TO CONTAIN THE DEFAULT HARDCOPY NAME, IF ANY, FROM THE    *
*           LOGONID RECORD.                                           *
*        *  IF THE HARDCOPY NAME IS INVALID, A MESSAGE AND RETURN     *
*           CODE INDICATING SAME.                                     *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE.                                              *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING LIDREC,R3      ADDR'G ACF2 LOGONID RECORD              *
*              R4             ADDR'G HARDCOPY NAME IN COMMAND BUFFER  *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        ZERO - THE HARDCOPY NAME SPECIFIED IS VALID                  *
*         4   - THE HARDCOPY NAME SPECIFIED IS NOT VALID              *
*                                                                     *
***********************************************************************
         SPACE 6
G010     SUBIN ,(3,4)
         L     R2,CWBPDB      SET PTR TO PARSE DESCRIPTOR BLOCK
*                             SET PTR TO PDB FOR HARDCOPY NAME
         LA    R9,3*(PDBENTND-PDBENTRY)+CFPDBFIX(R2)
         CLI   PDBLENG,X'00'  IS HARDCOPY NAME SPECIFIED
         BE    G900           B IF NOT TO EXIT
         L     R3,W1ALID      SET PTR TO ACF2 LOGONID RECORD
         L     R4,CWBBUF      SET PTR TO START OF BUFFER
         AH    R4,PDBDISP     ADD OFFSET TO START OF HARDCOPY NAME
         CLI   PDBLENG,X'02'  COULD DATA BE 'NO'
         BNE   G100           B IF NOT
         CLC   =C'NO',0(R4)   IS IT 'NO'
         BNE   G100           B IF NOT
         MVI   PDBLENG,X'00'  NULLIFY HARDCOPY NAME PARAMETER
         B     G900           AND EXIT
***********************************************************************
*                                                                     *
*   HANDLE HARDCOPY 'YES' BY SUPPLYING DEFAULT DEVICE NAME, IF ANY    *
*                                                                     *
***********************************************************************
G100     TAG
         CLI   PDBLENG,X'03'  COULD DATA BE 'YES'
         BNE   G200           B IF NOT
         CLC   =C'YES',0(R4)
         BNE   G200           B IF NOT
         SLR   R14,R14        MAKE A ZERO
         BCTR  R14,0          THEN A -1
         LA    R15,LIDRHNHY   SET PTR TO DEFAULT HARDCOPY NAME
         LA    R1,L'LIDRHNHY-1(R15) SET PTR TO END OF DEFAULT HCPY NAME
G110     TAG                  DETERMINE LENGTH OF DEFAULT HARDCOPY NAME
         CLI   0(R1),C' '     IS THIS BYTE A BLANK
         BE    G120           B IF YES
         CLI   0(R1),X'00'    OR A ZERO
         BNE   G130           B IF NOT
G120     TAG
         BXH   R1,R14,G110    LOOP TILL FIND END OF HARDCOPY NAME
         ERROR CMNOHARD,G910  INDICATE HCPY NOT ALLOWED IF NAME NULL
G130     TAG
         SR    R1,R15         COMPUTE LENGTH OF HARDCOPY NAME
         LA    R1,1(R1)
         PERF  J010,G910      GET SPOT IN COMMAND BUFFER FOR HCPY NAME
         STCM  R0,B'0011',PDBDISP STORE OFFSET TO SPOT IN PDB
         STC   R1,PDBLENG     STORE LENGTH IN PDB
         BCTR  R1,0           REDUCE LENGTH FOR MOVE
         EX    R1,G990        MVC  0(0,R15),LIDRHNHY
         B     G900           EXIT
***********************************************************************
*                                                                     *
*   NOT 'YES' OR 'NO' - MUST BE A DEVICE NAME; IS IT ALLOWED          *
*                                                                     *
***********************************************************************
G200     TAG
         TM    LIDRHFL1,LIDRH1NH IS HCPY NAME SPECIFICATION ALLOWED
         BO    G900           B IF YES
         ERROR CMNOHCPY,G910  INDICATE MAY NOT SPECIFY HARDCOPY NAME
***********************************************************************
*                                                                     *
*   EXIT WITH ZERO RETURN CODE                                        *
*                                                                     *
***********************************************************************
G900     TAG
         SR    R15,R15             CLEAR RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
G910     TAG
         SUBOUT
         SPACE 3
***********************************************************************
*                                                                     *
*   EXECUTED INSTRUCTIONS                                             *
*                                                                     *
***********************************************************************
G990     MVC   0(0,R15),LIDRHNHY   MOVE HCPY NAME TO COMMAND BUFFER
         SPACE 3
         DROP  R3
         EJECT
***********************************************************************
*                                                                     *
* J   -   A L L O C A T E   C O M M A N D   B U F F E R   S P A C E   *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE ALLOCATES SPACE IN THE INPUT COMMAND BUFFER     *
*        FOR PARAMETERS WHICH ARE TO BE INSERTED FOR LATER            *
*        PROCESSING BY THE REGULAR NCCF LOGON MODULE.                 *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        R1 - THE LENGTH OF THE AREA NEEDED                           *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        R0  - THE OFFSET INTO THE BUFFER OF THE ALLOCATED AREA       *
*        R1  - THE LENGTH OF THE AREA NEEDED                          *
*        R15 - THE ADDRESS OF THE ALLOCATED AREA                      *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE.                                              *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING BUFHDR,R3      ADDR'G COMMAND BUFFER HEADER            *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        ZERO - INSUFFICIENT SPACE IN BUFFER FOR REQUEST.             *
*      > ZERO - THE AREA HAS BEEN ALLOCATED.                          *
*                                                                     *
***********************************************************************
         SPACE 6
J010     SUBIN ,(2,3)
         L     R2,CWBPDB      SET PTR TO PARSE DESCRIPTOR BLOCK
         L     R3,PDBBUFA-DSIPDB(R2) SET PTR TO COMMAND BUFFER
***********************************************************************
*                                                                     *
*   IS BUFFER LARGE ENOUGH TO CONTAIN REQUESTED NEW AREA              *
*                                                                     *
***********************************************************************
         LH    R14,HDRBLENG   GET TOTAL LENGTH OF COMMAND BUFFER
         LH    R15,HDRMLENG   GET EXISTING MESSAGE LENGTH
         LA    R15,BUFHDRND-BUFHDR(R15) ADD LENGTH OF BUFFER HEADER
         SR    R14,R15        COMPUTE AVAILABLE BUFFER LENGTH
         CR    R1,R14         IS THERE ROOM FOR AMOUNT REQUESTED
         BNH   J020           B IF YES
         ERROR CMNOBUFF,J900  INDICATE BUFFER TOO SMALL FOR ADDITION
***********************************************************************
*                                                                     *
*   UPDATE BUFFER HEADER TO REFLECT ADDED PARAMETER AREA              *
*                                                                     *
***********************************************************************
J020     TAG
         LR    R0,R15         OFFSET TO NEW AREA IS LENGTH OF USED AREA
         LR    R14,R3         GET PTR TO START OF BUFFER
         AR    R14,R15        AREA ADDR = BUFF START + USED LENGTH
         AR    R15,R1         OLD USED LENGTH + LENGTH OF NEW AREA
         LA    R2,BUFHDRND-BUFHDR SET LENGTH OF BUFFER HEADER
         SR    R15,R2         SUBTRACT OUT LENGTH OF BUFFER HEADER
         STH   R15,HDRMLENG   UPDATE MESSAGE LENGTH IN BUFFER HEADER
         LR    R15,R14        SET AREA PTR IN RETURN REG
         B     J910           EXIT
***********************************************************************
*                                                                     *
*   EXIT WITH ZERO RETURN CODE                                        *
*                                                                     *
***********************************************************************
J900     TAG
         SR    R15,R15             CLEAR RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
J910     TAG
         SUBOUT
         SPACE 3
         DROP  R3
         EJECT
***********************************************************************
*                                                                     *
* X   -   R E L E A S E   A C F 2   R E S O U R C E S                 *
*                                                                     *
***********************************************************************
*                                                                     *
*   FUNCTION:                                                         *
*        THIS ROUTINE CALLS ACF2 TO RELEASE RESOURCES ACQUIRED BY     *
*        LOGON VALIDATION.                                            *
*                                                                     *
*   INPUT TO THIS ROUTINE IS:                                         *
*        NONE                                                         *
*                                                                     *
*   OUTPUT OF THIS ROUTINE IS:                                        *
*        NONE                                                         *
*                                                                     *
*   OPERATION:                                                        *
*        NOT APPLICABLE                                               *
*                                                                     *
*   LOCAL REGISTER USAGE:                                             *
         USING ACCVT,R4       ADDR'G ACF2 CVT                         *
         USING ACTRM,R5       ADDR'G ACF2 CONTROL BLOCK AREA          *
*                                                                     *
*   RETURN CODES ISSUED:                                              *
*        NONE                                                         *
*                                                                     *
***********************************************************************
         SPACE 6
X010     SUBIN ,(4,5)
         L     R5,W1AACF2     SET PTR TO ACF2 CONTROL BLOCK AREA
         MVI   ACTFCN,X'05'   SET FREE RESOURCES FUNCTION CODE
         MVI   ACTSFCN,ACTSMINI SET SUB FUNCTION CODE
         LA    R14,W1MSGBUF   SET PTR TO MESSAGE BUFFER
         ST    R14,ACTMSG
         L     R14,W1AACMCB   SET PTR TO ACMCB
         ST    R14,ACTUCB
         ACFINCVT R4,NONE=X900 GET PTR TO ACF2 CVT
         ACFSVC ACVALD,TYPE=A,NONE=X900,CVT=HAVE CALL ACF2 TO FREE
***********************************************************************
*                                                                     *
*   EXIT WITH ZERO RETURN CODE                                        *
*                                                                     *
***********************************************************************
X900     TAG
         SR    R15,R15             CLEAR RETURN CODE
***********************************************************************
*                                                                     *
*   EXIT WITH PRESET RETURN CODE                                      *
*                                                                     *
***********************************************************************
X910     TAG
         SUBOUT
         SPACE 3
         DROP  R4
         DROP  R5
         EJECT
***********************************************************************
*                   P R O C E S S   E R R O R S                       *
***********************************************************************
*        THIS ROUTINE ISSUES MODULE ERROR MESSAGES AND ABENDS.  IF    *
*        ABEND IS NOT SELECTED, IT RETURNS TO THE CALLER WITH THE     *
*        MESSAGE RETURN CODE IN REG 15.                               *
*                                                                     *
*        NOTE THAT CODE TO DISPLAY A MESSAGE ON A REPORT MUST BE      *
*        ADDED BY THE USER AFTER COPYING THIS CODE INTO HIS PROGRAM.  *
*                                                                     *
*                                                                     *
*                                                                     *
*        LOCAL REGISTER USE:                                          *
         USING W3MSGCB,R2     ADDRESSING MESSAGE CONTROL BLOCK        *
         USING W4MSG,R3       ADDRESSING MESSAGE                      *
         USING BUFHDR,R7      ADDR'G NCCF MESSAGE BUFFER HEADER       *
         SPACE 3
*
*        DSECT FOR MESSAGE CONTROL BLOCK
*
W3       DSECT
W3MSGCB  DS    0F
W3MSGADR DS    F              ADDRESS OF MESSAGE IF REMOTE
W3MSGOPT DS    X              OPTION FLAGS
*
W3OPWTL  EQU   B'00100000'    WRITE MESSAGE TO SYSTEM LOG
W3OPTPUT EQU   B'00010000'    TPUT MESSAGE TO TERMINAL
W3OPRPT  EQU   B'00001000'    PRINT MESSAGE ON REPORT
W3OPWTO  EQU   B'00000100'    WTO
W3OPWTOR EQU   B'00000010'    WTOR
W3OPABND EQU   B'00000001'    ABEND
*
W3REPLY  DS    C              REPLY EXPECTED FROM WTOR
W3RETCOD DS    H              RETURN CODE OR COMPLETION CODE
W3MSGCBL EQU   *-W3MSGCB      CONTROL BLOCK LENGTH
*                        NON-REMOTE MESSAGE FOLLOWS IMMEDIATELY
         SPACE 3
*
*        DSECT FOR MESSAGES
*
W4       DSECT
W4MSG    DS    0H
W4MSGLEN DS    H              LENGTH OF MESSAGE TEXT + 4
W4MCSFLG DS    XL2            MCS FLAGS
W4MSGTXT DS    C              MESSAGE TEXT
W4DESC   DS    XL2            DESCRIPTOR CODES
W4ROUT   DS    XL2            ROUTING CODES
&CSECT   CSECT
         SPACE 3
&ERT.010 SUBIN ,(3,4,5,7)
         LR    R2,R15              SAVE MESSAGE BLOCK PTR
         ICM   R3,B'1111',W3MSGADR GET REMOTE MESSAGE PTR
         BNZ   &ERT.020            B IF MESSAGE IS REMOTE
         LA    R3,W3MSGCBL(R2)     PNT PAST BLOCK TO MESSAGE
&ERT.020 EQU   *
         LH    R4,W4MSGLEN         GET MESSAGE LENGTH
         BCTR  R4,R0               DECREMENT FOR MOVE
*
* WRITE MESSAGE TO OPERATOR WITH REPLY
*
         TM    W3MSGOPT,W3OPWTOR   IS MESSAGE TO BE WTOR'ED
         BZ    &ERT.100            B IF NO
         AIF   (NOT &TEST).ZERR010
         WTO   MF=(E,(3))
         AGO   .ZERR020
.ZERR010 ANOP
         MVC   &EST.WTOR(CFWTORL),CFWTOR MOVE WTOR LIST TO DYN AREA
         EX    R4,&ERT.990         MOVE MESSAGE TO WTOR PARM LIST
&ERT.050 XC    &EST.WTOECB,&EST.WTOECB CLEAR WTOR ECB FOR WAIT
         WTOR  ,&EST.REPLY,1,&EST.WTOECB,MF=(E,&EST.WTOR)
         WAIT  ECB=&EST.WTOECB     WAIT FOR OPERATOR REPLY
         CLC   W3REPLY,&EST.REPLY  CHECK FOR CORRECT OPERATOR REPLY
         BNE   &ERT.050            B IF INCORRECT TO REISSUE MSG
.ZERR020 ANOP
*
* WRITE MESSAGE TO OPERATOR
*
&ERT.100 TM    W3MSGOPT,W3OPWTO    IS MESSAGE TO BE WTO'ED
         BZ    &ERT.110            B IF NO
         WTO   MF=(E,(3))
*
* WRITE MESSAGE TO SYSTEM LOG
*
&ERT.110 EQU   *
         TM    W3MSGOPT,W3OPWTL    IS MESSAGE TO BE WTL'ED
         BZ    &ERT.130            B IF NO
         AIF   (NOT &TEST).ZERR030
         WTO   MF=(E,(3))
         AGO   .ZERR040
.ZERR030 ANOP
         XC    W4MCSFLG,W4MCSFLG   CLEAR MCS FLAGS
         WTL   MF=(E,(3))
.ZERR040 ANOP
*
* WRITE MESSAGE TO TERMINAL
*
&ERT.130 EQU   *
         TM    W3MSGOPT,W3OPTPUT   IS MESSAGE TO BE TPUT'ED
         BZ    &ERT.150            B IF NO
         LA    R7,W2BUFHDR         SET PTR TO NCCF MSG BUF HEADER AREA
         XC    W2BUFHDR,W2BUFHDR   CLEAR THE HEADER
         LA    R14,W2BUFLEN        GET LENGTH OF MSG BUFFER
         STH   R14,HDRBLENG        AND STORE IT IN THE HEADER
         LA    R14,L'W2MSGTXT      SET LENGTH OF BUFFER TEXT AREA
         LH    R15,W4MSGLEN        GET LENGTH OF MESSAGE TEXT
         SH    R15,=H'4'           SUBTRACT LENGTH OF LENGTH FIELD
         CR    R15,R14             IS MESSAGE LONGER THAN BUFFER
         BNH   &ERT.140            B IF NOT
         LR    R15,R14             TRUNCATE MESSAGE TO BUFFER LENGTH
&ERT.140 EQU   *
         STH   R15,HDRMLENG        STORE TEXT LENGTH IN BUFFER HEADER
         BCTR  R15,0               REDUCE MESSAGE LENGTH FOR MOVE
         EX    R15,&ERT.980        MVC  W2MSGTXT(0),W4MSGTXT
         LA    R14,W2MSGTXT-W2MSGBUF SET OFFSET TO TEXT FROM BUFF START
         STH   R14,HDRTDISP        AND STORE IT IN THE HEADER
         MVI   HDRMTYPE,HDRTYPEU   INDICATE USER GENERATED MESSAGE
         CLC   W3RETCOD,=H'0'      IS RETURN CODE ZERO
         BE    &ERT.145            B IF YES
         DSIPSS SWB=CWBSWB,        ISSUE MESSAGE TO USER               *
               TYPE=IMMED,OPTIONS=MSG,BFR=(R7)               BWS 07/84
         B     &ERT.150
&ERT.145 EQU   *
         DSIPSS SWB=CWBSWB,        ISSUE MESSAGE TO USER               *
               TYPE=IMMED,OPTIONS=MSG,BFR=(R7)
&ERT.150 EQU   *
*
* WRITE MESSAGE ON CURRENT REPORT
*
&ERT.200 EQU   *
         TM    W3MSGOPT,W3OPRPT    IS MESSAGE TO BE PRINTED
         BZ    &ERT.300            B IF NO
*
* ABEND IF REQUESTED
*
&ERT.300 EQU   *
         TM    W3MSGOPT,W3OPABND   IS ABEND REQUESTED
         BZ    &ERT.400            B IF NO
         LH    R4,W3RETCOD         SET COMPLETION CODE
         ABEND (4),DUMP
*
* EXIT
*
&ERT.400 EQU   *
         LH    R15,W3RETCOD        SET RETURN CODE
         SUBOUT
         SPACE 3
*
* EXECUTED INSTRUCTIONS
*
&ERT.980 MVC   W2MSGTXT(0),W4MSGTXT MOVE MESSAGE TO NCCF MSG BUFFER
&ERT.990 MVC   &EST.WTOR+8(0),0(R3) MOVE MESSAGE TEXT TO WTOR LIST
         SPACE 3
         DROP  R2
         DROP  R3
         DROP  R7
         EJECT
***********************************************************************
*                                                                     *
*   M O D U L E   C O N S T A N T S                                   *
*                                                                     *
*        TABLE OF ACF2 MESSAGE ID'S AND ASSOCIATED RETURN CODES       *
*                                                                     *
***********************************************************************
CFMSGTBL DS    0H        CL8 MESSAGE ID, H RETURN CODE
         DC    C'ACF01137',H'0'    LAST LOGON SOURCE         JGK SP0050
CFMSGLEN EQU   *-CFMSGTBL LENGTH OF AN ENTRY IN THE TABLE
         DC    C'ACF01004',H'1'    LOGONID NOT FOUND
         DC    C'ACF01010',H'1'    LOGONID CANCELLED
         DC    C'ACF01011',H'1'    LOGONID SUSPENDED
         DC    C'ACF01012',H'2'    PASSWORD NOT MATCHED
         DC    C'ACF01013',H'1'    LOGONID SUSPENDED FOR PASSWORD TRIES
         DC    C'ACF01015',H'2'    INVALID PASSWORD SYNTAX
         DC    C'ACF01017',H'2'    PASSWORD EXPIRED
         DC    C'ACF01019',H'2'    PASSWORD TOO SHORT
         DC    C'ACF01134',H'0'    PASSWORD WILL EXPIRE
CFMSGTBE EQU   *         END OF MESSAGE ID TABLE
         SPACE 6
***********************************************************************
*                                                                     *
*        MISCELLANEOUS STUFF                                          *
*                                                                     *
***********************************************************************
CFWTOR   WTOR  '                                                       *
                                                                       *
                         ',MF=L
CFWTORL  EQU   *-CFWTOR       LENGTH OF WTOR LIST
         EJECT
***********************************************************************
*                                                                     *
*   M O D U L E   M E S S A G E S                                     *
*                                                                     *
***********************************************************************
CMREMOTE MSG   ,TERM,RC=0     MESSAGE CONTROL BLOCK FOR ACF2 MESSAGES
CMNOID   MSG   'M99A0N.010 - LOGONID MUST BE SPECIFIED; ENTER LOGONID',*
               TERM,RC=1
CMIDLEN  MSG   'M99A0N.020 - LOGONID MUST BE 1 TO 7 CHARACTERS; ENTER V*
               ALID LOGONID',TERM,RC=1
CMNOPASS MSG   'M99A0N.030 - PASSWORD MUST BE SPECIFIED; ENTER PASSWORD*
               ',TERM,RC=2
CMPASLEN MSG   'M99A0N.040 - PASSWORD MUST BE 1 TO 8 CHARACTERS; ENTER *
               VALID PASSWORD',TERM,RC=2
CMNONCCF MSG   'M99A0N.050 - LOGONID IS NOT AUTHORIZED TO USE NCCF',   *
               TERM,RC=1
CMNOPROF MSG   'M99A0N.060 - LOGONID IS NOT AUTHORIZED TO OVERIDE DEFAU*
               LT PROFILE',TERM,RC=3
CMNOHARD MSG   'M99A0N.070 - LOGONID IS NOT AUTHORIZED TO PRODUCE HARDC*
               OPY LOG',TERM,RC=4
CMNOHCPY MSG   'M99A0N.080 - LOGONID IS NOT AUTHORIZED TO SPECIFY HARDC*
               OPY DEVICE NAME',TERM,RC=4
CMNOSTOR MSG   'M99A0N.900 - UNABLE TO OBTAIN STORAGE FOR ACF2 CONTROL *
               BLOCKS; NOTIFY SYSTEMS PROGRAMMING, T',TERM,            *
               REPLY=T,RC=16
CMACFCVT MSG   'M99A0N.910 - UNABLE TO LOCATE ACF2 CVT; NOTIFY SYSTEMS *
               PROGRAMMING, T',TERM,REPLY=T,RC=16
CMNOACF  MSG   'M99A0N.920 - ACF2 HAS NOT BEEN INITIALIZED; NOTIFY SYST*
               EMS PROGRAMMING, T',TERM,REPLY=T,RC=16
CMNOBUFF MSG   'M99A0N.930 - INSUFFICIENT ROOM TO ALTER BUFFER; NOTIFY *
               SYSTEMS PROGRAMMING, T',TERM,ABEND,REPLY=T,RC=93
         EJECT
***********************************************************************
*                                                                     *
*   V E N D O R   S U P P L I E D   D S E C T S                       *
*                                                                     *
***********************************************************************
         ACCVT
         LIDREC
         ACMCB
         ACTRM
&CSECT   CSECT
         DSICBS DSICWB,DSIPDB,DSISWB,DSITIB,DSITVB,DSIMVT,DSISVL,      *
               EJECT=YES,DEFER=NO,PRINT=YES
&CSECT   CSECT
CFPDBFIX EQU   PDBEND-DSIPDB     LENGTH OF PDB FIXED PORTION
         EJECT
***********************************************************************
*                                                                     *
*   D S E C T   F O R   P R I V A T E   W O R K   A R E A             *
*                                                                     *
***********************************************************************
W1       DSECT
W1WORK   DS    0D
W1IDENT  DS    CL4       'NCVT' AREA IDENTIFIER
W1SIZE   DS    F         SIZE OF THIS AREA - USED TO FREE IT AT LOGOFF
W1CVT    DS    0D        PRIVATE COMMUNICATIONS VECTOR TABLE
W1AACF2  DS    F              PTR TO ACF2 CONTROL BLOCK AREA
W1AACMCB DS    F              PTR TO ACF2 ACMCB CONTROL BLOCK
W1ALID   DS    F              PTR TO ACF2 LOGONID RECORD
W1CVTEND DS    0D             END OF PRIVATE CVT
W1CVTSIZ EQU   *-W1CVT        SIZE OF CVT AREA
W1ACF2   DS    0D        ACF2 CONTROL BLOCK AREA
         ACVALD DSECT=NO      ACF2 VALIDATION SVC PARAMETER LIST
W1MSGBUF DS    CL132          BUFFER FOR ACF2 MESSAGES
W1ACFEND DS    0D             END OF ACF2 CONTROL BLOCK AREA
W1ACFSIZ EQU   *-W1ACF2       SIZE OF ACF2 CONTROL BLOCK AREA
W1WRKSIZ EQU   *-W1WORK  LENGTH OF THE PRIVATE WORK AREA
&CSECT   CSECT
         EJECT
***********************************************************************
*                                                                     *
*   D S E C T   F O R   C W B A D A T D   W O R K   A R E A           *
*                                                                     *
***********************************************************************
W2       DSECT
W2WORK   DS    0CL256
         SUBIN MF=L
W2GETWRK DS    0F        WORK AREA FOR DSIGET MACRO INSTRUCTION
         DS    CL14           THE WORK AREA ITSELF
         DS    0F        AREA FOR REMOTE MESSAGE CONTROL BLOCK
W2MSGCB  DS    CL(W3MSGCBL)   THE AREA ITSELF
W2ERRMSG DS    0F        AREA FOR WTO/WTOR/WTL MESSAGE PROCESSING
W2WTOECB DS    F              WTOR ECB
W2WTOR   DS    CL(CFWTORL)    WTOR PARAMETER LIST
W2REPLY  DS    C              OPERATOR REPLY FIELD
         ORG   W2ERRMSG
W2MSGBUF DS    0F        AREA FOR BUILDING AN NCCF MESSAGE BUFFER
W2BUFHDR DS    CL(BUFHDRND-BUFHDR) AREA FOR NCCF BUFFER HEADER
W2MSGTXT DS    CL70           AREA FOR MESSAGE TEXT
W2BUFLEN EQU   *-W2MSGBUF     LENGTH OF NCCF MESSAGE BUFFER
         ORG   ,         RESET TO HIGHEST USED ADDRESS
&CSECT   CSECT
         END   &CSECT
