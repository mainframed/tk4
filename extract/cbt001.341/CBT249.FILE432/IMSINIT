00010001PROC     0 TEST NOTEST
00020001IF       &TEST = TEST +
00030001THEN     CONTROL PROMPT   LIST   CONLIST   SYMLIST MSG
00040001ELSE     CONTROL PROMPT NOLIST NOCONLIST NOSYMLIST
00050000           GLOBAL &HEXVALUE &VALUE &RELCODE
00060000/**********************************************************************/
00070000/*     H     H   EEEEEEE    AAAAA    DDDDDD    EEEEEEE   RRRRRR       */
00080000/*     H     H   E         A     A   D     D   E         R     R      */
00090000/*     HHHHHHH   EEEEEEE   AAAAAAA   D     D   EEEEEEE   RRRRRR       */
00100000/*     H     H   E         A     A   D     D   E         R   R        */
00110000/*     H     H   EEEEEEE   A     A   DDDDDD    EEEEEEE   R     R      */
00120000/*                                                                    */
00130000/**********************************************************************/
00140000/*  CLIST NAME: IMSINIT           REL/DATE: 1.0/03.21.79              */
00150000/*                                                                    */
00160000/*  DOC: THIS CLIST WILL INITIALIZE THE IMS ADDRESS SPACE FOR AN      */
00170000/*       IMS DUMP. IT WILL FIND THE IMS NUCLEUS, AND THE IMS SCD.     */
00180000/*                                                                    */
00190000/*  SYMBOLS EQUATED: ASVTADDR=ASVT ADDRESS, ASCBADDR=ASCB ADDRESS,    */
00200000/*       ASXBADDR=ASXB ADDRESS, TCBADDR=TCB ADDRESS, DFSXNUC =        */
00210000/*       DFSVNUC ADDRESS OR DFSBNUC ADDRESS, SCD = SCD ADDRESS,       */
00220000/*       MAINZIB = MAIN ZIB ADDRESS, SAPSTART = START OF SAPS,        */
00230000/*       CLBSTRT/CLBEND = START AND END OF CLB POOL,                  */
00240000/*       CTBSTRT/CTBEND = START AND END OF CTB POOL,                  */
00250000/*       CNTSTRT/CNTEND = START AND END OF CNT POOL.                  */
00260000/*                                                                    */
00270000/*  SYMBOLS FOUND: SAME AS ABOVE                                      */
00280000/*                                                                    */
00290000/*  RETURN: NONE                                                      */
00300000/*                                                                    */
00310000/*  DEPENDENCIES: 1) THIS CLIST REQUIRES THAT TSO COMMAND             */
00320000/*                   CLRSCRN BE INSTALLED IN YOUR ENVIRONMENT.        */
00330000/*                                                                    */
00340000/*  USE: WHEN EXECUTING, THIS CLIST WILL TRY TO FIND THE IMS          */
00350000/*       NUCLEUS. IF IT CANNOT, IT WILL ASK THE USER TO SUPPLY        */
00360000/*       THE JOBNAME OF IMS, AND IT WILL THEN DO A SUMMARY OF THAT    */
00370000/*       JOBNAME. THE USER MUST THEN SUPPLY THE ASID AND TCB OF THE   */
00380000/*       IMS REGION. THE CLIST WILL THEN TRY TO FIND THE IMS NUCLEUS. */
00390000/*       AFTER THE NUCLEUS, THE SCD IS FOUND AND EQUATED.             */
00400000/*                                                                    */
00410000/*RGM******************************************************************/
00420000    BEGIN: /* CLRSCRN */ /* CLEAR THE SCREEN */ +
00430000           WRITE IMS INITIALIZATION NEEDS TO FIND THE IMS SCD, VIA
00440000           WRITE THE NUCLEUS, TO EQUATE THEM FOR IPCS. IF THIS IS A
00450000           WRITE STAND-ALONE DUMP, YOU CAN SAVE A LOT OF PROCESSING
00460000           WRITE BY KNOWING THE IMS JOBNAME. IF YOU DON'T KNOW IT,
00470000           WRITE WE NEED TO RUN THRU EVERY ASID LOOKING FOR A TCB
00480000           WRITE WITH A CDENAME OF DFSVNUC OR DFSBNUC. IF THIS IS NOT
00490000           WRITE A STAND-ALONE DUMP, WE WILL USE THE CURRENT ASID.
00500000                    /* TRY TO GET IMS NAME FROM USER IF KNOWN*/
00510000           WRITE
00520000 NOTE 'SYMBOLS EQUATED:    ASVTADDR=ASVT ADDRESS, ASCBADDR=ASCB ADDRESS'
00530000 NOTE '                    ASXBADDR=ASXB ADDRESS, TCBADDR=TCB ADDRESS'
00540000 NOTE '                    SCD = SCD ADDRESS                          '
00550000 NOTE '                    DFSXNUC = ADDR OF DFSBNUC/DFSVNUC (ONLY IF '
00560000 NOTE '                              YOU DON''T SUPPLY THE SCD ADDRESS)'
00570000 NOTE '                    MAINZIB = ADDRESS OF MAIN ZIB              '
00580000 NOTE '                    SAPSTART = ADDRESS OF THE START OF THE SAPS'
00590000 NOTE '                    CLBSTRT/CLBEND = START AND END OF CLB POOL'
00600000 NOTE '                    CTBSTRT/CTBEND = START AND END OF CTB POOL'
00610000 NOTE '                    CNTSTRT/CNTEND = START AND END OF CNT POOL'
00620000           WRITE
00630000           WRITENR DO YOU WANT THE PRINT OPTION ? (Y)/N ===>
00640000           READ &ANS
00650000           IF &ANS^= N THEN SETD PRINT
00660000    REASK: /* CLRSCRN */ +
00670000           WRITE ++++ OPTIONS ARE:  (Y) IF YOU KNOW THE IMS JOBNAME
00680000           WRITE                        (SAVES TIME AND EFFORT)
00690000           WRITE                    (N) IF YOU DON'T KNOW IMS' JOBNAME
00700000           WRITE                        (LONGEST RUNNING OPTION)
00710000           WRITE                    (S) TO ENTER SCD ADDRESS DIRECTLY
00720000           WRITE                        (YOU MUST ALSO ENTER THE IMS
00730000           WRITE                          ASID NUMBER IN DECIMAL)
00740000           WRITE                    (X) EXIT
00750000           WRITE
00760000           WRITENR          ENTER ===>
00770000           READ &OPT
00780000           WRITE
00790000           IF &OPT=Y THEN GOTO ASK        /* GO TO FIND NUC OR EXIT*/
00800000           IF &OPT=S THEN GOTO GETSCDAD   /* DEPENDING UPON WHAT   */
00810000           IF &OPT=X THEN EXIT            /* THE USER REPLY TO THE */
00820000           IF &OPT^=N THEN GOTO REASK     /* PREVIOUS QUESTION WAS */
00830000           SET &ASIDMAX = 150    /*  FIND IMS WITHOUT ANY CLUES */
00840000    START: EVAL 2. HEADER LE(2) /*PICK UP THE CURRENT ASID # FROM */
00850000           SET &ASID=&LASTCC   /* LOCATION 2 AND SET IT TO DEFAULT*/
00860000           IF &ASID=0 THEN DO    /* MORE WORK FOR A S/A DUMP. */
00870000    WRITE THIS IS A STAND-ALONE DUMP. DO YOU WISH TO ALTER OUR DEFAULT
00880000    WRITENR ASID SEARCH RANGE (2 THRU 150 DECIMAL)?  Y/(N) ===>
00890000              READ &ANS /* GIVE USER A CHANCE TO NARROW THE SEARCH */
00900000              SET &ASID = 2   /* A LITTLE. SET DEFAULT TO 2. */
00910000              EQ ASVTADDR CVT+22C% PTR LE(4) ASID(1) /*ASVT ADDRESS*/
00920000              EVAL ASVTADDR+204 LE(4)     /* GET SYSTEM MAX USERS */
00930000              SET &ASVTMAXU=&LASTCC    /* SET TO &ASVTMAXU FOR FUTURE*/
00940000              WRITE
00950000              IF &ANS=Y THEN DO  /* START: MODIFY DEFAULTS. */
00960000   ENTERMIN:  WRITENR ENTER NEW STARTING ASID, OR DEPRESS ENTER ===>
00970000              READ &ANS
00980000              WRITE
00990000              IF &ANS= THEN GOTO SKIPSETS  /* NULL, SKIP MINIMUM. */
01000000              SET &LEN = &LENGTH(&ANS)  /* ELSE, GET LENGTH OF INPUT.*/
01010000              SET &ASID = &SUBSTR(1:&LEN,&ANS.) /* SET MIN ASID# */
01020000              IF &ASID=0 THEN SET &ASID=1   /* STILL WON'T ALLOW 00. */
01030000   SKIPSETS:  WRITE THE ASVT SHOWS THAT THE MAX NUMBER OF ASCB'S IN +
01040000              THIS DUMP IS &ASVTMAXU..
01050000   ENTERMAX:  WRITENR ENTER NEW ENDING ASID, OR DEPRESS ENTER ===>
01060000              READ &ANS
01070000              WRITE
01080000              IF &ANS= THEN GOTO CHECKMAX /* NULL, CHECK MAX VS. MIN */
01090000              SET &LEN = &LENGTH(&ANS)   /* GOT INPUT, DO SAME AS    */
01100000              SET &ASIDMAX = &SUBSTR(1:&LEN,&ANS.) /* ABOVE.  */
01110000   CHECKMAX:  IF &ASIDMAX LT &ASID THEN DO /* CAN'T HAVE MIN GT MAX! */
01120000              WRITE COME ON... ASIDMAX IS LESS THAN ASIDMIN. TRY AGAIN.
01130000                 GOTO ENTERMAX  /* TELL'EM LIKE IT IS. */
01140000              END
01150000           END
01160000           IF &ASVTMAXU LT &ASID THEN DO  /* DITTO FOR SYSTEM MAX. */
01170000  WRITE STARTING ASID NUMBER IS LOWER THAN MAX IN SYSTEM (&ASVTMAXU).
01180000              GOTO ENTERMIN              /* GO GET NEW MINIMUM. */
01190000              END
01200000           IF &ASVTMAXU LT &ASIDMAX THEN DO  /* IF SYSTEM MAX IS LOWER*/
01210000           WRITE
01220000  WRITE MAX ASID NUMBER IN THIS DUMP IS LOWER THAN THE DEFAULT. WILL
01230000  WRITE RESET THE DEFAULT TO MAX IN THE SYSTEM (&ASVTMAXU).
01240000              SET &ASIDMAX = &ASVTMAXU  /* THAN DEFAULT, TAKE THE */
01250000           END                         /* INTELLIGENT NUMBER.  */
01260000           END
01270000           ELSE DO
01280000           /* CLRSCRN */
01290000  WRITE THIS IS AN SVCDUMP AND ASID(&ASID) IS THE CURRENT
01300000  WRITE ASID. WILL DO AN IPCS SUMMARY OF ASID(&ASID).
01310000           GOTO ASK2
01320000           END
01330000 BGINDIAG: /* CLRSCRN */ +
01340000 NEXTASID: WRITE START ASID(&ASID)
01350000           SET &ASVTOFFS=&ASID*4       /* NEED TO KNOW IF WE'RE LEGAL.*/
01360000           SET &MEM=&STR(ASID(&ASID))  /* &MEM IS EASIER TO TYPE. */
01370000     COMPARE ADDR(ASVTADDR+20C+&ASVTOFFS.N) LE(1) WITH(VALUE(X'80'))
01380000           IF &LASTCC EQ 0 THEN DO     /* THIS ASID NOT ASSIGNED. */
01390000            WRITE MEMORY FOR &MEM NOT ASSIGNED. CONTINUE WITH NEXT ASID.
01400000              GOTO BUMPASID          /* THAT WAS EASY, GET NEXT ONE. */
01410000           END
01420000           IF &LASTCC EQ 12 THEN DO  /* IF ASVT IS N/G, BIG HURT. */
01430000  WRITE ERROR: ASVT IS UNAVAILABLE. WE CANNOT CONTINUE. CHECK VALIDITY
01440000  WRITENR OF LOW STORAGE IN THE DUMP. DEPRESS ENTER TO RETURN.
01450000              READ         /* WE CANNOT CONTINUE AT ALL. I'M NOT EVEN */
01460000              EXIT         /* SURE WE COULD GET THIS FAR IN THE FIRST */
01470000           END             /* PLACE, BUT WE GOTTA EXIT. */
01480000           SETD ASID(&ASID)   /* LOOKS GOOD - DO SETDEF, AND AN EQU- */
01490000           EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N% STR(ASCB) &MEM /*ATE.*/
01500000           EVAL ASCBADDR+6C% LE(4) &MEM /* CHECK FOR STORAGE AVAILABLE*/
01510000           IF &LASTCC=12 THEN DO        /* NOPE. */
01520000          WRITE ASXB FOR &MEM IS NOT AVAILABLE. CONTINUE WITH NEXT ASID.
01530000              GOTO BUMPASID        /* NEXT !!! */
01540000           END
01550000           EQ ASXBADDR ASCBADDR+6C% &MEM PTR LE(4) /* ASXB */
01560000           EVAL ASXBADDR+4%+74%+74%+74% &MEM  /* STORAGE AVAILABLE ?? */
01570000             IF &LASTCC=12 THEN DO     /* NOPE. */
01580000        WRITE TCB4 FOR &MEM IS NOT AVAILABLE. CONTINUE WITH NEXT ASID.
01590000             GOTO BUMPASID            /* NEXT !! */
01600000           END
01610000           EQ TCBADDR ASXBADDR+4%+74%+74%+74% PTR &MEM LEN(4) /*TCB*/
01620000           SET &TCB=004        /* KEEP TRACK OF TCBNUM. */
01630000           EVAL ASXBADDR+4%+74%+74%+74 ASID(&ASID) /* SKIP FIRST THREE*/
01640000           %HEX &LASTCC             /* TCB'S IN EACH ASID.  */
01650000           SET &TCBADDR=&HEXVALUE /* CAUSE WE ALL KNOW WHAT THEY ARE. */
01660000           SETD NODISPLAY      /* TURN OFF DISPLAY */
01670000    TCBAD: WRITE CHECKING ASID&ASID  TCB&TCB
01680000           EVAL &TCBADDR..+2D LE(3) /* ANY CDE'S ON THIS TCB? */
01690000           IF &LASTCC=0 THEN GOTO NEXT  /* NOPE, NO CDE'S ON THIS GUY.*/
01700000           EVAL &TCBADDR..+2C% &MEM  /* YUP, CHECK IF THEY'RE IN CORE.*/
01710000           IF &LASTCC=12 THEN DO     /* NOPE. */
01720000   WRITE CDE CHAIN NOT AVAILABLE FOR TCB&TCB. CONTINUE WITH NEXT TCB.
01730000              GOTO NEXT       /* BUT NOW ONLY GO TO NEXT TCB. */
01740000           END
01750000           EQU CDE&ASID.001 &TCBADDR..+2C% PTR ASID(&ASID) /* IN-CORE */
01760000   MYCDLP: COMPARE ADDR(CDE&ASID.001+8) LE(7) +
01770000           WITH(VALUE(C'DFSVNUC')) LEN(7) ASID(&ASID) /* CHARACTER  */
01780000            IF &LASTCC = 0 THEN GOTO FOUNDIT          /*  COMPARE   */
01790000           COMPARE ADDR(CDE&ASID.001+8) LE(7) +
01800000           WITH(VALUE(C'DFSBNUC')) LEN(7) ASID(&ASID) /*  DFSVNUC/  */
01810000            IF &LASTCC = 0 THEN GOTO FOUNDIT          /*  DFSBNUC.  */
01820000            EVALUATE CDE&ASID.001     /* IF NO MATCH, GET NEXT CDE. */
01830000            SET &PTR = &LASTCC            /* IF THERE IS ONE.       */
01840000            IF &PTR LE 0 THEN GOTO NEXT   /* OTHERWISE, GET NEXT TCB*/
01850000            EVAL CDE&ASID.001% &MEM       /* GOTTA CHECK FOR IN-CORE*/
01860000            IF &LASTCC=12 THEN DO         /* NOPE, JUST CAN'T WIN.  */
01870000   WRITE CDE CHAIN NOT AVAILABLE FOR TCB&TCB. CONTINUE WITH NEXT TCB.
01880000               GOTO NEXT                  /* TRY NEXT TCB. */
01890000            END
01900000            EQU CDE&ASID.001 CDE&ASID.001% PTR ASID(&ASID) /* IN-CORE */
01910000            GOTO MYCDLP       /* DO EQUATE, THEN START FROM TOP.  */
01920000    NEXT:  EVAL &TCBADDR..+74 &MEM LE(4) /* GET NEXT TCB.  */
01930000           %HEX &LASTCC              /* GET HEX ADDRESS FROM DECIMAL. */
01940000           IF &HEXVALUE=0 THEN DO    /* IMS NUC NOT FOUND IN THIS DUMP*/
01950000 BUMPASID: SET &ASID=&ASID+1  /* NO MORE TCB'S. TRY NEXT ASID. */
01960000           IF &ASID LE &ASIDMAX THEN GOTO NEXTASID /* OVER MAX YET?  */
01970000           /* CLRSCRN */    /* IF SO, DONE. ASK USER FOR NEXT ACTION */
01980000           WRITE COULD NOT FIND THE IMS NUCLEUS, AND WILL NEED YOUR HELP
01990000           WRITENR ENTER Y TO CONTINUE. OTHERWISE WE EXIT ===>
02000000           READ &OPT
02010000           IF &OPT=Y THEN GOTO ASK    /* ASK USER AGAIN IF HE KNOWS   */
02020000           EXIT                       /* WHAT IMS'S NAME IS.          */
02030000           END                        /* IF NOT, EXIT.  */
02040000           SET &TCBADDR=&HEXVALUE     /* GET NEXT TCB IN CHAIN.       */
02050000           EVAL &TCBADDR..% &MEM      /* MAKE SURE ITS IN STORAGE.   */
02060000           IF &LASTCC=12 THEN DO      /* IF NOT, TROUBLE. */
02070000    WRITE TCB&TCB FOR &MEM IS NOT AVAILABLE. CONTINUE WITH NEXT ASID.
02080000              GOTO BUMPASID           /* GO TO NEXT ASID. */
02090000           END                                          /* OTHERWISE, */
02100000           EQ TCBADDR &TCBADDR..% PTR ASID(&ASID) LE(4) /* DO EQUATE. */
02110000           SET &TCB=&TCB+1                        /* BUMP TCB COUNTER.*/
02120000           GOTO TCBAD                 /* PROCESS NEXT TCB...          */
02130000    ASK:   WRITENR ENTER JOBNAME FOR IMS CONTROL REGION ===>
02140000           READ &IMSCNT                /* START JOBNAME SUMMARY. */
02150000           /* CLRSCRN */               /* USER KNOWS JOBNAME, FIND IT */
02160000           NOTE 'WILL DO AN IPCS SUMMARY OF JOBNAME &IMSCNT..'
02170000 ASK2:     NOTE 'REMEMBER THE IPCS TCB NAME OF THE FIRST TCB WITH '
02180000           NOTE 'AN RB FOR MODULE DFSIDSP0 OR DFSXDSP0.'
02190000           NOTE ' '                    /* AND GIVE AN IMS SUMMARY     */
02200000           IF &OPT=N THEN SUMM ASID(&ASID)
02210000           ELSE SUMM JOB(&IMSCNT)
02220000     EP01: WRITE
02230000           WRITE ENTER IPCS SYMBOL FOR IMS DISPATCHER'S TCB (ENTER
02240000           WRITENR 'NONE' IF YOU MISSED IT, OR IPCS DIDN'T FIND IT) ===>
02250000           READ &TCBNAME              /* WE SHOWED THE USER ALL THE   */
02260000                                      /* TCB'S, NOW HE TELLS US THE   */
02270000                                      /* DISPATCHER'S TCB.            */
02280000           WRITE
02290000   EP01AA: IF &LENGTH(&TCBNAME.) EQ 8 THEN GOTO GOTIT /* IF 8 CHARS, */
02300000           IF &TCBNAME = &STR(NONE) THEN GOTO REASK   /* TAKE IT.    */
02310000   BADTCB: WRITE RE-ENTER THE IPCS TCB NAME FOR THE IMS DISPATCHER,
02320000           WRITE USING THE FORMAT TCBXXXYY, WHERE XXX = ASID IN DECIMAL,
02330000           WRITE INCLUDING LEADING ZEROES, AND YY = TCB DESIGNATION
02340000           WRITE IN ALPHA CHARACTERS AS ASSIGNED BY IPCS.
02350000           GOTO EP01
02360002    GOTIT: L &TCBNAME NODISPLAY STRUCTURE(TCB)
02370002                                        /* DO IPCS LIST TO SEE IF HE  */
02380000           IF &LASTCC^=0 THEN GOTO BADTCB /* REALLY LISTED IT. IF CC=0*/
02390000           SET &ASID = &SUBSTR(4:6,&TCBNAME.) /*ACCEPT VALIDITY CHECK.*/
02400000           SETD ASID(&ASID) /* GET ASID NUMBER FROM MIDDLE OF TCBNAME.*/
02410000            NOTE 'USING ASID&ASID AND TCB &TCBNAME' /* FROM HERE ON,  */
02420000            SETD NODISPLAY      /* THAT TCB IS GOSPEL.  */
02430000                                      /* EVALUATE THE TCB GIVEN US    */
02440000            WRITE
02450000            WRITE ****************************************************
02460000            WRITE *** THIS MAY TAKE A WHILE, SO RELAX ****************
02470000            WRITE ****************************************************
02480000            EVAL &TCBNAME.+2D LE(3) /* THIS IS ALL THE SAME LOGIC AS */
02490000            IF &LASTCC=0 THEN GOTO QUIT /* ABOVE AT LABEL MYCDLP,    */
02500000            EQU CDE&ASID.001 &TCBNAME.+2C% STRUCTURE(CDE) /* EXCEPT  */
02510000            WRITE
02520000     CDLP: COMPARE ADDR(CDE&ASID.001+8) LE(7) +
02530000           WITH(VALUE(C'DFSVNUC')) LEN(7) ASID(&ASID) /*FOR THE CHECKS*/
02540000            IF &LASTCC = 0 THEN GOTO FOUNDIT /* FOR STORAGE AVAILABLE.*/
02550000           COMPARE ADDR(CDE&ASID.001+8) LE(7) +
02560000           WITH(VALUE(C'DFSBNUC')) LEN(7) ASID(&ASID) /* UP THERE, WE */
02570000            IF &LASTCC = 0 THEN GOTO FOUNDIT     /*CAN'T AFFORD TO BE */
02580000            EVALUATE CDE&ASID.001 /* BLOWN OUT OF THE CLIST BECAUSE A */
02590000            SET &PTR = &LASTCC /*POINTER WE USE IS PAGED OUT. BUT DOWN*/
02600000            IF &PTR LE 0 THEN GOTO QUIT    /* HERE, WE'VE ALREADY GOT */
02610000            EQU CDE&ASID.001 CDE&ASID.001% STRUCTURE(CDE) /* THE TCB  */
02620000            GOTO CDLP /* FOR IMS. ANY POINTER MISSING HERE IS THE END.*/
02630000      QUIT: WRITE
02640000        NOTE '*** JPAQ SEARCHED FOR DFSBNUC/DFSVNUC. NO CDE FOUND. ***'
02650000    WRITENR YOU MAY HAVE GIVEN US THE WRONG TCB NAME. DEPRESS ENTER TO +
02660000            CONTINUE.
02670000            READ
02680000            GOTO REASK                   /* USER..NO IMS WAS FOUND    */
02690000   FOUNDIT: /* CLRSCRN */                               /* BUT LO !! */+
02700000            NOTE 'CDE FOR MODULE DFSXNUC IS NAMED CDE&ASID.001'
02710000            L CDE&ASID.001 LE(32)
02720000            WRITE
02730000            SET &CDENAM = &STR(CDE&ASID.001)  /* EQU THE WINNING CDE. */
02740000      DONE: EQ XL&CDENAM &CDENAM.+14% LE(X'10') STR(PRIVATEXTLST)
02750000            NOTE 'EXTENT LIST FOR &CDENAM :' /* LIST THE EXTENT LIST. */
02760000            L XL&CDENAM
02770000            EVALUATE XL&CDENAM.+8          /* GET DFSXNUC MODULE LEN. */
02780000            SET &MODLEN = &LASTCC          /* EQUATE THE NUCLEUS. */
02790000            EQ DFSXNUC  &CDENAM.+10% LE(&MODLEN.) STR(MODULE)
02800003            F C'SCD' AD(DFSXNUC:DFSXNUC+200) NOBREAK NODISPLAY
02810000            EQ SCDCHARS X
02820000    SCDEQU: EQU SCD SCDCHARS+4%+C% LEN(X'7E8') STR(SCD/*USE 114 AS */
02830000   SCDEVAL: EVAL SCD+14 LE(2)                        /* DEFAULT    */
02840000            SET &RELCODE=&LASTCC
02850000            IF &RELCODE=276 THEN DO   /* IF THIS IS IMS114 THEN... */
02860000            SET &RELCODE=4               /* INDICATE 114 */
02870000            EQ SAPSTART SCD+378% LE(4)     /* DO EQU FOR START OF SAPS*/
02880000            EQ MAINZIB SCD+280% LE(X'2C') STR(ZIB) /* EQU MAINZIB */
02890000            EQ CLBSTRT SCD+4A8%
02900000            EVAL SCD+4AC LE(2)
02910000            SET &CLBLEN=&LASTCC
02920000            EVAL SCD+4AE LE(2)
02930000            SET &CLBNUM=&LASTCC
02940000            SET &POOLEN=&STR(&CLBLEN*&CLBNUM)
02950000            %HEX &POOLEN
02960000            EQ CLBEND CLBSTRT+&HEXVALUE
02970000            EQ CTBSTRT SCD+4CC%
02980000            EVAL SCD+4D0 LE(2)
02990000            SET &CTBLEN=&LASTCC
03000000            EVAL SCD+4D2 LE(2)
03010000            SET &CTBNUM=&LASTCC
03020000            SET &POOLEN=&STR(&CTBLEN*&CTBNUM)
03030000            %HEX &POOLEN
03040000            EQ CTBEND CTBSTRT+&HEXVALUE
03050000            EQ CNTSTRT SCD+4EC%
03060000            EVAL SCD+4F0 LE(2)
03070000            SET &CNTLEN=&LASTCC
03080000            EVAL SCD+4F2 LE(2)
03090000            SET &CNTNUM=&LASTCC
03100000            SET &POOLEN=&STR(&CNTLEN*&CNTNUM)
03110000            %HEX &POOLEN
03120000            EQ CNTEND CNTSTRT+&HEXVALUE
03130000            END
03140000            ELSE IF &RELCODE=277 THEN DO   /* IF THIS IS IMS 115... */
03150000                 SET &RELCODE=5            /* INDICATE 115. */
03160000                 EQU SCD SCDCHARS+4%+C% LEN(X'8B8') STR(SCD)
03170000            EQ SAPSTART SCD+3B4% LE(4)     /* DO EQU FOR START OF SAPS*/
03180000            EQ MAINZIB SCD+2BC% LE(X'2C') STR(ZIB) /* EQU MAINZIB */
03190000            EQ CLBSTRT SCD+4FC%
03200000            EVAL SCD+500 LE(2)
03210000            SET &CLBLEN=&LASTCC
03220000            EVAL SCD+502 LE(2)
03230000            SET &CLBNUM=&LASTCC
03240000            SET &POOLEN=&STR(&CLBLEN*&CLBNUM)
03250000            %HEX &POOLEN
03260000            EQ CLBEND CLBSTRT+&HEXVALUE
03270000            EQ CTBSTRT SCD+520%
03280000            EVAL SCD+524 LE(2)
03290000            SET &CTBLEN=&LASTCC
03300000            EVAL SCD+526 LE(2)
03310000            SET &CTBNUM=&LASTCC
03320000            SET &POOLEN=&STR(&CTBLEN*&CTBNUM)
03330000            %HEX &POOLEN
03340000            EQ CTBEND CTBSTRT+&HEXVALUE
03350000            EQ CNTSTRT SCD+540%
03360000            EVAL SCD+544 LE(2)
03370000            SET &CNTLEN=&LASTCC
03380000            EVAL SCD+546 LE(2)
03390000            SET &CNTNUM=&LASTCC
03400000            SET &POOLEN=&STR(&CNTLEN*&CNTNUM)
03410000            %HEX &POOLEN
03420000            EQ CNTEND CNTSTRT+&HEXVALUE
03430000                 END
03440000                 ELSE DO
03450000  WRITE INITIALIZATION HAS FAILED DUE TO THE IMS RELEASE FIELD AT
03460000  WRITE SCD+X''14'' BEING INVALID OR NOT IN STORAGE. IF THERE IS MORE
03470000  WRITE THAN ONE IMS IN THE DUMP WE MAY HAVE FOUND THE WRONG ONE.
03480000            DROPSYM SCD    /* DROP THE BAD SCD BEFORE WE FORGET */
03490000            IF &OPT=N THEN DO  /* IF WE HAD CLIST DOING EVERYTHING */
03500000  WRITE THIS CLIST WILL CONTINUE SEARCHING WITH THE NEXT ASID IF YOU
03510000  WRITENR WISH. ENTER Y(DEFAULT) TO CONTINUE, OR N TO RETURN ===>
03520000            READ &ANS
03530000            IF &ANS=N THEN GOTO REASK /* ASK IF USER WANTS OUT. */
03540000            GOTO BUMPASID /*OTHERWISE, NOT A PROBLEM. GET BACK IN LOOP*/
03550000            END   /* IF USER SUPPLIED IMS NAME, HOWEVER, ITS TROUBLE. */
03560000  WRITE IF THIS IS THE RIGHT IMS, BUT THE SCD IS NOT IN STORAGE, THERE
03570000  WRITENR IS NOTHING MORE WE CAN DO. DEPRESS ENTER TO CONTINUE...
03580000            READ
03590000            GOTO REASK    /* BACK TO THE BEGINNING....... */
03600000  GETSCDAD: WRITENR ENTER 6 DIGIT HEXIDECIMAL SCD ADDRESS, +
03610000              OR DEPRESS ENTER TO RETURN ===>
03620000            READ &DIGITS
03630000            IF &DIGITS=   THEN GOTO REASK    /* IF NULL, RETURN. */
03640000            SET &DIGITLEN=&LENGTH(&DIGITS)   /* ELSE, FORM A NUMBER */
03650000            IF &DIGITLEN^=6 THEN GOTO GETSCDAD /* GOTTA BE 6 DIGITS,*/
03660000            WRITENR ENTER IMS ASID NUMBER IN DECIMAL ===>
03670000            READ &ASID1
03680000            SETD ASID(&ASID1)
03690000            EQ SCD &DIGITS.. LEN(X'7E8') STR(SCD)
03700000            GOTO SCDEVAL   /* ITS OK AS A NUMBER, BUT IS IT AN SCD ?  */
03710000            END
03720000            LSYM (SCD,DFSXNUC)
03730000            WRITE
03740000            NOTE 'THE SCD RELEASE FIELD, SCD+X''14'', INDICATES THAT'
03750000   NOTE 'THIS IS AN IMS11&RELCODE DUMP. WILL USE IMS11&RELCODE CLISTS.'
03760000            WRITE SCD
03770000            L SCD LE(40)
03780000            WRITE
03790000            WRITE END OF IMS INITIALIZATION. DEPRESS ENTER TO CONTINUE.
03800000            READ            /* GOODNIGHT DICK. */
