//CSYSMASC JOB CSYSMAS,MSGCLASS=A,COND=(0,NE)
/*ROUTE PRINT WYLBUR
//ASM EXEC ASMHCL
//ASM.SYSLIB DD
//           DD
//           DD DISP=SHR,DSN=SYS5.MSSMAC
*---------------------------------------------------------------------*
*                                                                     *
* CMSLOAD - RE-LOAD TO MVS FORMAT FILES DUMPED WITH CMS "DISK DUMP"   *
*                                                                     *
*  INPUT:  IN  - "DISK DUMP" FORMAT FILE FROM CMS                     *
*                                                                     *
*  OUTPUT: OUT  - MVS FORMAT OUTPUT FILE                              *
*                                                                     *
*   USES OUTPUT LRECL AS INPUT LRECL IF SUPPLIED;                     *
*   ELSE DEFAULTS INPUT LRECL TO 80 IF RECFM F, 137 IF RECFM V.       *
*                                                                     *
*   UPDATED FOR 'SPARSE' SUPPORT, MARKED '*S*'.                       *
*                                                                     *
* 07/15/82 - JCJ1 - RECORD BUFFER AREA INCREASED TO 32K (AFTER FIX JCJ1
*                   OF OACENTER MACRO.                             JCJ1
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         OACWORK &DUMMY
W#CLR    DC    0D'0'              START OF ZEROED AREA
W#FLAG   DC    F'0'               FLAGS
WF#EOF    EQU   X'80'              EOF ON IN
W#CNTIN  DC    F'0'               RECORDS READ
W#CNTOUT DC    F'0'               RECORDS WRITTEN
W#PARMN  DC    F'0'               PARM VALUE (NUMBER OF RECORDS)
W#LRECL  DC    F'0'               OUTPUT RECORD LENGTH FOR F
W#SEGPT  DC    A(0)               CURRENT SEGMENT POINTER
W#SEGLN  DC    F'0'               CURRENT SEGMENT LENGTH LEFT
W#WTO    DC    CL140' '           WTO WORK AREA
W#LINE   DC    CL133' '           LINE WORK AREA
W#FCARD  DC    CL80' '            FIRST INPUT CARD WITH CMS ID
W#OUTESV DC    16F'0'             DCB EXIT REG SAVEAREA
W#DWD    DC    D'0'
         SPACE 1
W#REC    DC    0D'0'              RECORD BUILD AREA
         ORG   *+(32*1024)                                         JCJ1
W#RECL   EQU   *-W#REC            MAX RECORD LENGTH
W#CLRL   EQU   *-W#CLR            END OF ZEROED AREA
         MEND
         SPACE 1
CMSLOAD  OACENTER EXIT=(EXIT,(R15)),PARM=(R9,LR),                      X
               WORK=(0,MPARM),DSECT=W#,                                X
               STACK=(2048,W#STACK,E$OFLOW,ABEND),ROUND=YES
         SPACE 1
         LA    R0,W#CLR
         L     R1,=A(W#CLRL)
         SR    R15,R15
         MVCL  R0,R14
         MVI   W#LINE,C' '
         MVC   W#LINE+1(L'W#LINE-1),W#LINE
         SPACE 1
         L     R3,0(,R9)          @ PARM STRING
         LH    R4,0(,R3)          LENGTH OF PARM STRING
         LTR   R4,R4              ANY PARM?
         BZ    IT$OPN             BIF NO PARM
         TM    2(R3),X'F0'        LOOK LIKE NUMBER?
         BNO   IT$OPN
         BCTR  R4,0
         EX    R4,IT$PACK         PACK W#DWD(8),2(0,R3)
         OI    W#DWD+7,X'0F'
         CVB   R0,W#DWD
         ST    R0,W#PARMN         SAVE PARM NUMBER OF RECORDS
         SPACE 1
IT$OPN   OPEN  MF=(E,OPENIN)      OPEN ALL DATASETS
         TM    DCBOFLGS-IHADCB+DCBIN,DCBOFOPN
         BZ    ABND99
         SPACE 1
*---           INIT GETSEG / GET WITH A NULL CALL                  ---*
         SR    R0,R0              OUTPUT ADDR ZERO
         SR    R1,R1              REQUEST ZERO BYTES
         OACCALL GETSEG           INIT GETSEG / GET
         BNZ   I$INVINP           BIF EOF (THIS IS INVALID)
         OPEN  MF=(E,OPENOUT)     NOW OPEN / SET DEFAULTS IF REQUIRED
         TM    DCBOFLGS-IHADCB+DCBOUT,DCBOFOPN
         BZ    ABND99
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  BUILD UP RECORD FROM SEGMENTS ---                                  *
*  - IF RECFM IS                                                      *
*       V       - ASK FOR 2 BYTES                                     *
*               - ASK FOR LENGTH SUPPLIED IN 1ST TWO BYTES            *
*       F       - ASK FOR LRECL                                       *
*       S       - ASK FOR LRECL                                   *S* *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
IV$FILE  CLI   CC#RECFM-CMSCARD+W#FCARD,C'F' RECFM F?
         BE    IF$LOOP            BIF RECFM F
         CLI   CC#RECFM-CMSCARD+W#FCARD,C'S' RECFM S (SPARSE F)?    *S*
         BE    IF$LOOP            BIF RECFM S                       *S*
         CLI   CC#RECFM-CMSCARD+W#FCARD,C'V' RECFM V?
         BNE   I$INVRFM           BIF INVALID RECFM
         SPACE 1
*---                    RECFM V PROCESSING                         ---*
IV$LOOP  LA    R0,W#REC           PLACE FOR RECORD LENGTH (RECFM V)
         LA    R1,2               ASK FOR 2 BYTES (RECORD LENGTH)
         OACCALL GETSEG,ERROR=DONE GET SEGMENT
         LH    R2,W#REC           GET RECORD LENGTH
         LTR   R2,R2              ANY RECORD (PADDING AT END?)
         BZ    DONE
         CL    R2,=A(W#RECL-16)   RECORD TOO LONG?
         BNH   *+8                BIF RECORD TOO LONG
         EX    0,*                * INVALID RECFM V RECORD
         LR    R1,R2              RECORD LENGTH
         LA    R0,W#REC           RECORD AREA
         OACCALL GETSEG,ERROR=DONE GET RECORD
         LA    R0,W#REC           ADDR OF RECORD FOR OUTPUT
         LR    R1,R2              LENGTH OF RECORD FOR OUTPUT
         OACCALL PUT              OUTPUT THE RECORD
         B     IV$LOOP
         SPACE 1
*---                    RECFM F PROCESSING                         ---*
IF$LOOP  LA    R0,W#REC           PLACE FOR RECORD LENGTH (RECFM V)
         L     R2,W#LRECL         ASK FOR ONE RECORD
         CL    R2,=A(W#RECL)
         BNH   *+8
         L     R2,=A(W#RECL)
         LR    R1,R2
         OACCALL GETSEG,ERROR=DONE GET RECORD
         CLI   W#REC,0            HEX ZERO TYPE RECORD?
         BNE   IF$PUT             BIF NOT GARBAGE AT END
         CLC   W#CNTOUT,W#PARMN   HAVE REQUESTED RECORDS YET?
         BE    DONE               BIF HAVE ALL RECORDS; DONE
IF$PUT   LA    R0,W#REC           ADDR OF RECORD FOR OUTPUT
         LR    R1,R2              LENGTH OF RECORD FOR OUTPUT
         OACCALL PUT              OUTPUT THE RECORD
         B     IF$LOOP
         SPACE 1
IT$PACK  PACK  W#DWD(8),2(0,R3)   * EXECUTED *
         EJECT ,
DONE     LA    R2,MSG1
         LA    R3,W#CNTIN
         LA    R4,2
EOF1     L     R0,0(,R3)
         CVD   R0,W#DWD
         MVC   W#LINE+1(10),=X'40202020202020202120'
         ED    W#LINE+1(10),W#DWD+3
         MVC   W#LINE+15(30),0(R2)
         OACCALL PRINT
         LA    R2,30(,R2)
         LA    R3,4(,R3)
         BCT   R4,EOF1
         SPACE 1
         CLOSE MF=(E,OPENIN)
         CLOSE MF=(E,OPENOUT)
         SR    R15,R15
         B     EXIT
         SPACE 1
ABND99   ABEND 99,DUMP
         SPACE 1
I$INVINP MVC   W#LINE(40),=C'INVALID INPUT, NO CMS DISK RECORDS FOUND'
         B     I$INVMSG
I$INVRFM MVC   W#LINE(32),=C'INVALID RECFM IN CMS DISK RECORD'
         MVC   W#LINE+34(1),CC#RECFM-CMSCARD+W#FCARD
I$INVMSG OACCALL PRINT
         CLOSE MF=(E,OPENIN)
         CLOSE MF=(E,OPENOUT)
         ABEND 97,DUMP
         OACDROP R10
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  GETSEG: GET NEXT LOGICAL INPUT INPUT DATA SEGMENT                  *
*                                                                     *
*   ENTRY: R0  - ADDR FOR SEGMENT REQUESTED                           *
*          R1  - LENGTH OF SEGMENT REQUESTED                          *
*          R14 - RETURN ADDRESS                                       *
*          R15 - @ GET                                                *
*                                                                     *
*   EXIT:  R15 - RETURN CODE (0 - OK, 4 - EOF, 8 - ERROR)             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
GETSEG   OACSUB INUSE=NO
         LR    R6,R0              SAVE ADDR TO PLACE SEGMENT
         LR    R9,R1              SAVE MAXIMUM LENGTH REQUESTED
         SPACE 1
GS$LOOP  LM    R2,R3,W#SEGPT      ADDR, LENGTH OF SEGMENT LEFT
         LTR   R3,R3              ANY SEGMENT LEFT?
         BNZ   GS$MOV             BIF HAVE PREVOUS DATA, MOVE IT
GS$GET   OACCALL GET,ERROR=GS$RET GET NEXT INPUT SEGMENT, RIF EOF
         B     GS$LOOP            AND RETRY WITH NEW SEGMENT
         SPACE 1
GS$MOV   LR    R0,R2              FROM ADDR
         LR    R1,R3              FROM LEN, ASSUME ENTIRE SEGMENT
         CR    R1,R9              THIS MORE THAN REQUESTED?
         BNH   *+6                BIF NOT MORE THAN REQUESTED
         LR    R1,R9              ELSE ONLY RETURN REQUESTED LENGTH
         AR    R2,R1              BUMP INPUT SEGMENT PTR
         SR    R3,R1              DCR INPUT SEGMENT LENGTH LEFT
         LR    R7,R1              SET TO LENGTH
         SR    R9,R1              DCR REQUESTED LENGTH
         MVCL  R6,R0              MOVE SEGMENT TO REQUESTERS BUFFER
         LTR   R9,R9              ANY MORE REQUESTED?
         BNZ   GS$GET             BIF MORE NEEDED, GET MORE
         STM   R2,R3,W#SEGPT      SAVE SEGMENT LEFT ADDR,LEN
         SR    R15,R15            RETURN CODE ZERO
GS$RET   OACRET (R15)             AND RETURN
         OACDROP R10
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  GET: LOCATE NEXT INPUT CARD                                        *
*                                                                     *
*   ENTRY: R14 - RETURN ADDRESS                                       *
*          R15 - @ GET                                                *
*                                                                     *
*   EXIT:  R1  - @ OF NEXT CARD                                       *
*          R15 - RETURN CODE (0 - OK, 4 - EOF)                        *
*     W#SEGPT, W#SEGLN SET IF INPUT CARD STARTS WITH X'02',C'CMS'.    *
*     W#FCARD SET IF THIS IS FIRST X'02',C'CMS' CARD IN INPUT.        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
GET      OACSUB INUSE=NO
         SR    R2,R2              NO SEGMENT YET
         SR    R3,R3
         L     R8,=A(DCBIN)       @ INPUT DCB
         GET   (R8)               LOCATE NEXT INPUT RECORD (OR EOF)
         LA    R0,1               COUNT RECORD
         AL    R0,W#CNTIN
         ST    R0,W#CNTIN
         OACUSING CMSCARD,R1
         CLI   CC#ID,X'02'        CMS DISK CARD?
         BNE   G$NSAV
         CLC   CC#CMS,=C'CMS'     REALLY DISK CARD?
         BNE   G$NSAV
         CLI   CC#RECFM,C'F'      ONLY HAS DATA IF
         BE    G$SEG
         CLI   CC#RECFM,C'S'      ONLY HAS DATA IF                  *S*
         BE    G$SEG                                                *S*
         CLI   CC#RECFM,C'V'       SAYS RECFM V OR F
         BNE   G$CKEND            BIF NOT RECFM V OR F DATA CARD
G$SEG    LA    R2,CC#DATA         ADDR OF DATA
         LA    R3,L'CC#DATA       LENGTH OF DATA
         STM   R2,R3,W#SEGPT      SAVE THIS SEGMENT INFO
         CLI   W#FCARD,0          HAVE FIRST CARD ALREADY?
         BNE   G$NSAV
         MVC   W#FCARD,CMSCARD    SAVE CARD
G$NSAV   SR    R15,R15            RETURN CODE ZERO
G$RET    STM   R2,R3,W#SEGPT      RETURN SEGMENT IF ANY FOUND
         OACRET RC=(R15)
         SPACE 1
G$CKEND  CLI   CC#RECFM,C'N'      END CARD?
         BNE   G$NSAV             BIF UNKNOWN CARD, JUST SKIP
         XC    W#FCARD,W#FCARD    NEW LOGICAL FILE, NO FIRST CARD LEFT
         LA    R15,4              LOGICAL EOF
         B     G$RET               AND RETURN
         SPACE 1
GET$EOF  OI    W#FLAG,WF#EOF      SET EOF FLAG
         LA    R15,4              EOF
         LCR   R15,R15            -4 FOR EOF
         B     G$RET
         OACDROP R10,R1
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  RECPUT - PUT RECORD                                                *
*                                                                     *
*   ENTRY: R0  - ADDR OF RECORD                                       *
*          R1  - LENGTH OF RECORD                                     *
*                                                                     *
*   (IGNORE CALL IF OUTPUT DCB NOT OPEN)                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
PUT      OACSUB INUSE=NO
         LR    R2,R0              ADDR OF RECORD
         LR    R3,R1              LENGTH OF RECORD
         L     R8,=A(DCBOUT)      @ OUTPUT DCB
         OACUSING IHADCB,R8
         LA    R0,1               COUNT OUTPUT RECORD
         AL    R0,W#CNTOUT
         ST    R0,W#CNTOUT
         LH    R5,DCBLRECL        ASSUME RECFM=F
         TM    DCBRECFM,DCBRECV
         BZ    P$PUT2             BIF RECFM=F
         LA    R5,4(,R3)          ASSUME RECFM=V
         TM    DCBRECFM,DCBRECF
         BZ    P$PUT1             BIF RECFM=V
         LR    R5,R3              ELSE RECFM=U
P$PUT1   STH   R5,DCBLRECL        SET LRECL FOR PUT LOCATE
P$PUT2   PUT   (R8)
         LA    R4,0(,R1)          @ OUTPUT AREA
         SPACE 1
         TM    DCBRECFM,DCBRECF   RECFM=V?
         BNZ   P$PUT3             BIF NOT RECFM=V
         LA    R4,4(,R4)          BUMP OUTPUT PTR OVER RDW
         SH    R5,=H'4'           DCR OUTPUT DATA LENGTH
         SPACE 1
P$PUT3   CR    R3,R5              INPUT LEN > OUTPUT LEN?
         BNH   P$PUT4
         LR    R3,R5              TRUNCATE LONG INPUT RECORD
P$PUT4   TM    DCBRECFM,DCBRECF   RECFM=V?
         BO    P$PUT5             BIF NOT RECFM=V
         LA    R0,4(,R5)          LENGTH OF RECORD INCLUDING RDW
         SLL   R0,16
         ST    R0,0(,R13)
         MVC   0(4,R1),0(R13)     INIT RDW
P$PUT5   MVCL  R4,R2              MOVE RECORD DATA TO OUTPUT AREA
P$RET    OACRET ,
         OACDROP R10,R8
         EJECT ,
PRINT    OACSUB INUSE=NO
         MVC   W#WTO(P#WTOL),P#WTO
         MVC   W#WTO+P#MSG(P#WTOL-P#MSG-4),W#LINE
         WTO   MF=(E,W#WTO)
         MVI   W#LINE,C' '
         MVC   W#LINE+1(L'W#LINE-1),W#LINE
         OACRET ,
         OACDROP R10
         SPACE 1
P#WTO    WTO   'OAC999I (CMSLOAD) -                                    X
                                         ',MF=L,ROUTCDE=(11)
P#WTOL   EQU   *-P#WTO
P#MSG    EQU   4+20
         SPACE 1
         OACUSING OUTEXIT,R15
         OACUSING IHADCB,R1
OUTEXIT  STM   R0,R15,W#OUTESV    SAVE ALL REGS
*S*      LA    R2,80              ASSUME 80 FOR RECFM F
*S*      CLI   CC#RECFM-CMSCARD+W#FCARD,C'F' IS THIS F?
*S*      BE    *+8
         LA    R2,137             ASSUME 137 FOR V
         CLI   CC#RECFM-CMSCARD+W#FCARD,C'V' IS THIS V?             *S*
         BE    *+8                                                  *S*
         LA    R2,80              ASSUME 80 FOR RECFM F/S           *S*
         LH    R3,DCBLRECL        OUTPUT LRECL IF ANY SUPPLIED
         LTR   R3,R3              ANY OUTPUT LRECL?
         BZ    OE$LRECL           BIF NO OUTPUT LRECL, USE DEFAULT
         LR    R2,R3              USE USER SUPPLIED LRECL IF F
         CLI   CC#RECFM-CMSCARD+W#FCARD,C'V' IS THIS V?
         BNE   OE$LRECL           BIF NOT RECFM V
         LA    R2,4(,R3)          USE USER SUPPLIED LRECL + 4 IF V
OE$LRECL STH   R2,DCBLRECL        SET LRECL IN OUTPUT DCB
         ST    R2,W#LRECL         SET DEFAULT LRECL
         TM    DCBRECFM,DCBRECU   RECFM F OR V ALREADY?
         BM    OE$BLKSI           BIF RECFM F OR V
         NI    DCBRECFM,255-DCBRECV ASSUME RECFM F
*S*      CLI   CC#RECFM-CMSCARD+W#FCARD,C'F' IS THIS F?
*S*      BE    OE$BLKSI           BIF IS RECFM F
         CLI   CC#RECFM-CMSCARD+W#FCARD,C'V' IS THIS V?             *S*
         BNE   OE$BLKSI           BIF NOT RECFM V                   *S*
         OI    DCBRECFM,DCBRECV+DCBRECCM SET RECFM V + MACH CTL
         NI    DCBRECFM,255-DCBRECF NOT RECFM F
OE$BLKSI LH    R2,DCBLRECL        GET LRECL
         LH    R5,DCBBLKSI        GET BLKSIZE
         LTR   R5,R5              ANY BLKSIZE?
         BNZ   OE$BLK1            BIF HAVE BLKSIZE, JUST ROUND IF RFM F
         L     R5,=F'6160'        TRY 6160 FOR ALL CASES
         OI    DCBRECFM,DCBRECBR  SET BLOCKED RECORDS
OE$BLK1  TM    DCBRECFM,DCBRECV   RECFM F?
         BO    OE$BLK2            BIF NOT RECFM F
         SR    R4,R4              CLEAR FOR DIVIDE
         DR    R4,R2              6160 / LRECL
         MR    R4,R2              BLKSIZE WHICH IS MULTIPLE OF LRECL
OE$BLK2  STH   R5,DCBBLKSI        SET BLKSIZE
         SPACE 1
OE$RET   LM    R0,R15,W#OUTESV    RESTORE REGS
         BR    R14
         OACDROP R15,R1
         SPACE 1
OPENIN   OPEN  (DCBIN,(INPUT)),MF=L
OPENOUT  OPEN  (DCBOUT,(OUTPUT)),MF=L
         SPACE 1
MSG1     DC    CL30'RECORDS READ               '
         DC    CL30'RECORDS WRITTEN           '
         SPACE 1
         PRINT NOGEN
DCBIN    DCB   DDNAME=IN,DSORG=PS,MACRF=GL,EODAD=GET$EOF,              X
               LRECL=80,RECFM=FB
DCBOUT   DCB   DDNAME=OUT,DSORG=PS,MACRF=PL,EXLST=OUTEX
         PRINT GEN
         SPACE 1
OUTEX    DC    0F'0',X'85',AL3(OUTEXIT)  OUTPUT FILE DCB EXIT
         SPACE 1
CMSCARD  DSECT ,
CC#ID    DC    X'02'
CC#CMS   DC    C'CMS'
CC#RECFM DC    C'F'               'V', 'F', OR 'S'
CC#DATA  DC    CL50' '            ACTUAL DATA
CC#BLKNO DC    XL2'0000'
CC#FN    DC    CL8' '             FILE NAME
CC#FT    DC    CL8' '             FILE TYPE
CC#FM    DC    CL3' '             FILE MODE
CC#SEQNO DC    CL4' '
CC#L     EQU   *-CMSCARD          LENGTH OF INPUT CARDS
         SPACE 1
         PRINT NOGEN
         DCBD  DSORG=PS
         END
//**ED.SYSLMOD DD DISP=OLD,DSN=SYS1.OACLINK,SPACE=,UNIT=
//LKED.SYSIN   DD *
     ENTRY    CMSLOAD
     IDENTIFY CMSLOAD('CS01464')
     NAME     CMSLOAD$(R)
//*
//C   EXEC PGM=COMPARE,
//  PARM='CMSLOAD$,CMSLOAD'
//STEPLIB  DD DISP=SHR,DSN=SYS5.MSSLOAD
//SYSPRINT DD SYSOUT=*
//I1       DD DISP=(SHR,PASS),DSN=&&GOSET
//I2       DD DISP=SHR,DSN=SYS1.OACLINK
