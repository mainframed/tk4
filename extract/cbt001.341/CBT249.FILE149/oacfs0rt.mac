//CSYSMASP JOB NAS,MSGCLASS=A,COND=(0,NE),TIME=(,5)
/*ROUTE PRINT WYLBUR
//*** I RENAMED THIS FROM OACFSORT TO OACFS0RT SO EVERYTHING WOULD
//*** FIT INTO ONE PDS
//ASM EXEC ASMHCL
//ASM.SYSLIB DD
//           DD
//           DD DISP=SHR,DSN=SYS5.MSSMAC
//ASM.SYSIN    DD *
OACFSORT CSECT ,
*---------------------------------------------------------------------*
*                                                                     *
*   FSORT - FIXED LENGTH RECORD SORT (IN STORAGE)                     *
*                                                                     *
* ENTRY: R1 = @ P# LIST                                               *
*                                                                     *
* EXIT:  R15 = RETURN CODE (CC SET)                                   *
*               0 - RECORDS SORTED (INPLACE)                          *
*               4 - WORK AREA TOO SMALL                               *
*                                                                     *
*  THE WORK AREA LENGTH IS:                                           *
*   W#L + LENGTH OF ONE RECORD + STACK SPACE                          *
*                                                                     *
*     COMPARE ROUTINE CALLED WITH:  R15 - ENTRY POINT                 *
*                                   R14 - RETURN ADDRESS              *
*                                   R13 - @ 72 BYTE SAVE AREA         *
*                                   R1  - @ ELEMENT                   *
*                                   R2  - @ ELEMENT                   *
*                                   R3  - COMPARE ROUTINE PARM        *
*                                                                     *
*  CONDITION CODE RETURNED FROM COMPARE ROUTINE DETERMINES ORDER,     *
*    IF HIGH THEN ELEMENT (R1) WILL APPEAR AFTER (R2),                *
*    IF LOW  THEN ELEMENT (R1) WILL APPEAR BEFORE (R2),               *
*    ELSE ORDER OF RECORDS IS UNDEFINED.                              *
*                                                                     *
*   THE COMPARE ROUTINE MUST RESTORE *ALL* THE REGISTERS R0-R15.      *
*                                                                     *
*   OACFSORT CURRENTLY USES PARTITION EXCHANGE.                       *
*                                                                     *
*   NOTE THAT THE RECORDS OUTSIDE OF THE AREA TO SORT ARE *NOT*       *
*   REFERENCED AT ALL.                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         OACFSORT PREFIX=P#
         SPACE 1
W#       DSECT ,
W#SAVE   DC    18F'0'
W#STKPT  DC    A(0)               @ STACK
W#STKLM  DC    A(0)               STACK LIMIT PTR
W#RECLS  DC    A(0)               @ LAST RECORD IN RECORD AREA
W#REC    DC    0D'0'              TEMP RECORD AREA
W#L      EQU   *-W#               MINIMUM WORK LENGTH
         EJECT ,
OACFSORT CSECT ,
         STM   R14,R12,12(R13)
         LR    R12,R15
         OACUSING OACFSORT,R12
         LR    R11,R1
         OACUSING P#,R11
         SPACE 1
         L     R8,P#RECLN         RECORD LENGTH
         LM    R1,R2,P#WRKPT      ADDR, LENGTH OF WORK AREA
         LA    R0,W#L+4*8(R8)     W# LEN + RECORD LEN + ALIGN/MIN STACK
         CR    R2,R0              WORK AREA TOO SHORT?
         BL    ERR1               BIF WORK AREA TOO SHORT
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         OACUSING W#,R13
         LA    R0,0(R1,R2)        @ PAST END OF W# AREA SUPPLIED
         SH    R0,=Y(8+7)         ALLOW 1 ENTRY + ALIGN FOR STACK
         ST    R0,W#STKLM         INIT STACK LIMIT PTR
         SPACE 1
         L     R5,P#RECNM         NUMBER OF RECORDS
         MR    R4,R8              # RECORDS * LENGTH RECORD
         L     R2,P#RECPT         @ 1ST RECORD            (A)
         LA    R5,0(R2,R5)        @ PAST LAST RECORD
         SR    R5,R8              @ LAST RECORD           (B)
         ST    R5,W#RECLS         SAVE @ LAST RECORD
         SPACE 1
         L     R3,P#CMPPM         PARM FOR COMPARE ROUTINE
         L     R10,P#CMPEP        @ OF COMPARE ROUTINE
         LA    R9,7(,R8)          RECORD LENGTH + 7
         N     R9,=X'00FFFFF8'    RECORD LEN ROUNDED UP TO MUL OF 8
         LA    R9,W#REC(R9)       @ OF START OF STACK
         ST    R9,W#STKPT         SAVE @ OF STACK
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  REGISTER USAGE --                                                  *
* R0  - WORK                                                          *
* R1  - @ RECORD (FOR COMPARE ROUTINE)  / WORK                        *
* R2  - A   (@ LEFTMOST RECORD IN CURRENT GROUP)                      *
* R3  - COMPARE ROUTINE PARM            / WORK                        *
* R4  -                                                               *
* R5  - B   (@ RIGHTMOST RECORD IN CURRENT GROUP)                     *
* R6  - I   (LEFT TO RIGHT SCAN PTR)                                  *
* R7  - J   (RIGHT TO LEFT SCAN PTR)                                  *
* R8  - RECORD LENGTH                                                 *
* R9  - STACK POINTER                                                 *
* R10 - @ COMPARE ROUTINE                                             *
* R11 - @ P#                                                          *
* R12 - PGM BASE                                                      *
* R13 - @ W#                                                          *
* R14 - WORK                                                          *
* R15 - WORK                                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
* CHECK FOR ONLY ONE RECORD TO SORT
SORT     CR    R2,R5              A :: B
         BNL   SORTUS             BIF A >= B (ONLY ONE RECORD)
* I = A
         LR    R6,R2              I = A
* J = B + RECLN (@ PAST LAST RECORD IN GROUP)
         LR    R7,R5              B
         AR    R7,R8              + RECLN
* PICK MEDIAN RECORD HERE AND SWAP WITH K(A)
* SO THAT ORDERED INPUT IS NOT WORST CASE...
*             (((B - A)/RECLN)/2)*RECLN
         LR    R1,R5              B
         SR    R1,R2              B - A
         SR    R0,R0
         DR    R0,R8              B-A/RECLN
         SRL   R1,1               HALF THE RECORDS
         CH    R1,=H'4'           < 4 RECORDS
         BL    SORTL1             BIF < 4 RECORDS; SKIP MID SWAP
         MR    R0,R8              OFFSET OF THE RECORD
         AR    R1,R2              @ OF K(MID)
         LR    R4,R1              SAVE @ K(MID)
* SWAP K(A) & K(MID)
         LR    R0,R4              @ K(MID)                (SOURCE)
         LR    R1,R8              RECLN
         LA    R14,W#REC          @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(MID) TO TEMP AREA
         LR    R0,R2              @ K(A)                  (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R4             @ K(MID)                (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(A) TO K(MID)
         LA    R0,W#REC           @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R2             @ K(A)                  (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(MID) TO K(A) FROM TEMP AREA
* FIND K(I) > K(A)
SORTL1   AR    R6,R8              I = I + RECLN
         CR    R6,R7              I :: J
         BNL   SORTF              BIF I >= J
         LR    R1,R6              K(I)
         LR    R15,R10            @ COMPARE ROUTINE
         BALR  R14,R15            COMPARE K(I) :: K(A)  <R2>
         BNH   SORTL1             BIF K(I) <= K(A)
         SPACE 1
* FIND K(J) <= K(A)
SORTL2   SR    R7,R8              J = J - RECLN
         CR    R7,R6              J :: I
         BNH   SORTF              BIF J <= I
         LR    R1,R7              K(J)
         LR    R15,R10            @ COMPARE ROUTINE
         BALR  R14,R15            COMPARE K(J) :: K(A)  <R2>
         BH    SORTL2             BIF K(J) > K(A)
* HAVE K(I) > K(A) & K(J) <= K(A)
* ALSO I < J SO ARE DIFFERENT RECORDS
* SWAP K(I) AND K(J)
         LR    R0,R6              @ K(I)                  (SOURCE)
         LR    R1,R8              RECLN
         LA    R14,W#REC          @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(I) TO TEMP AREA
         LR    R0,R7              @ K(J)                  (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R6             @ K(I)                  (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(J) TO K(I)
         LA    R0,W#REC           @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R7             @ K(J)                  (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(I) TO K(J) FROM TEMP AREA
         B     SORTL1              AND CONTINUE
         SPACE 1
* UNABLE TO FIND K(I) > K(A) AND K(J) <= K(A) FOR I < J
*     (I = J HERE AND I = J MAY BE > B)
* SO SWAP K(A) WITH K(J-1)
SORTF    LR    R4,R7              @ K(J)
         SR    R4,R8              @ K(J-1)
         LR    R0,R4              @ K(J-1)                (SOURCE)
         LR    R1,R8              RECLN
         LA    R14,W#REC          @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(J-1) TO TEMP AREA
         LR    R0,R2              @ K(A)                  (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R4             @ K(J-1)                (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(A) TO K(J-1)
         LA    R0,W#REC           @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8              RECLN
         LR    R14,R2             @ K(A)                  (TARGET)
         LR    R15,R8             RECLN
         MVCL  R14,R0             K(J-1) TO K(A) FROM TEMP AREA
* NOW SORT (A, J-2) AND (J, B)
*          (R2, R4-R8) AND (R7, R5)
*  (SOME MIGHT BE NULL - SORT SHORTEST FIRST, STACK OTHER)
         SR    R4,R8              END ADDR OF GRP 1
         LR    R0,R4
         SR    R0,R2              LENGTH OF GRP 1
         LR    R1,R5
         SR    R1,R7              LENGTH OF GRP 2
         CR    R0,R1              COMPARE GRP LENGTHS
         BH    SORTGRP            BIF GRP 1 > GRP 2 (DO GRP 2 FIRST)
         XR    R2,R7              SWAP GRP'S 1 AND 2
         XR    R7,R2
         XR    R2,R7
         XR    R4,R5
         XR    R5,R4
         XR    R4,R5
* STACK GROUP 1 TO BE SORTED LATER
SORTGRP  C     R9,W#STKLM         ROOM FOR ANOTHER STACK ENTRY
         BH    ERR2               BIF WORKAREA TOO SMALL
         ST    R2,0(,R9)          @ 1ST RECORD IN GROUP
         ST    R4,4(,R9)          @ LAST RECORD IN GROUP
         LA    R9,8(,R9)          PUSH STACK
* SET UP TO SORT GROUP 2 NOW
         LR    R2,R7              @ 1ST REC IN GRP 2 (R5 ALREADY SET)
         B     SORT
         SPACE 1
* REMOVE STACK ENTRY
SORTUS   SH    R9,=H'8'
         C     R9,W#STKPT
         BL    SRTCK              BIF STACK EMPTY; DONE
         L     R2,0(,R9)          @ 1ST RECORD OF GROUP
         L     R5,4(,R9)            @ LAST RECORD IN GROUP
         B     SORT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  SRTCK -- CHECK THAT RESULTS IS ACTUALLY SORTED.                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
SRTCK    L     R2,P#RECPT         @ 1ST RECORD
         L     R5,W#RECLS         @ LAST RECORD
         SR    R2,R8              @ RECORD - 1
SRTCKL   AR    R2,R8              @ NEXT RECORD
         LR    R1,R2
         AR    R1,R8              @ NEXT RECORD (IF ANY)
         CR    R1,R5              ANY NEXT RECORD?
         BH    RET0               BIF NO NEXT; ALL DONE
         LR    R15,R10            @ COMPARE ROUTINE
         BALR  R14,R15            COMPARE TWO RECORDS; CHECK SEQ
         BNL   SRTCKL             BIF NOT SEQ ERROR
         EX    0,*      *** SORT LOGIC ERROR ***
         SPACE 1
RET0     SR    R15,R15            RETURN CODE ZERO
RET      L     R13,4(,R13)
RETX     L     R14,12(,R13)
         LM    R0,R12,12+8(R13)
         LTR   R15,R15
         BR    R14
         SPACE 1
ERR1     LA    R15,4              RETURN CODE 4; WRKAREA TOO SMALL
         B     RETX
ERR2     LA    R15,4              RETURN CODE 4; WRKAREA TOO SMALL
         B     RET
         SPACE 1
         DC    0D'0'
         LTORG ,
         OACREGS ,
         END
//LKED.SYSLMOD DD DISP=SHR,DSN=SYS5.MSSLOAD,UNIT=,SPACE=
//LKED.SYSIN   DD *
    ENTRY OACFSORT
    IDENTIFY OACFSORT('CS01462')
    NAME OACFSORT(R)
//
