//CSYSMASA JOB MAS,MSGCLASS=A,COND=(0,NE)
/*ROUTE PRINT WYLBUR
//ASM EXEC ASMHCL,
//    PARM.LKED='NCAL,LIST,LET,XREF,RENT,REUS'
//ASM.SYSLIB DD
//           DD
//           DD DISP=SHR,DSN=SYS5.MSSMAC
OACMOVE  CSECT
*---------------------------------------------------------------------*
*                                                                     *
*   OACMOVE  - LOAD IEHMOVE MODULES & LINK TO IEHMOVE                 *
*   OACMOVEL - LOAD/DELETE IEHMOVE MODULES                            *
*                                                                     *
*     ENTRY:  AS AT ENTRY TO IEHMOVE                                  *
*                                                                     *
*     EXIT:   AS AT EXIT TO IEHMOVE                                   *
*                                                                     *
* WHEN USING IEHMOVE ON SMALL DATASETS, IEHMOVE CAN DO AS MUCH        *
* I/O LOADING IT'S MODULES AS COPYING DATA.  THIS PROGRAM             *
* PRE-LOADS ALL RENT OR REUS IEHMOVE MODULES TO AVOID THE             *
* PROGRAM LOAD I/O.                                                   *
*                                                                     *
* SINCE THE NORMAL IEHMOVE REQUIRES APF AUTHORIZATION TO RUN,         *
* THIS MODULE WOULD HAVE TO BE LINKED AC=1 TO RUN IT.                 *
*                                                                     *
* (NOTE THAT THERE ARE ZAP'S WHICH ALLOW IEHMOVE TO RUN WITHOUT       *
*  APF AUTHORIZATION FOR A MAJOR SUBSET OF FUNCTIONS.                 *
*  THERE ARE ALSO ZAP'S WHICH ALLOW VIO WORK FILES FOR IEHMOVE).      *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
OACMOVE  CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         LR    R11,R13            SAVE @ ORIG SAVEAREA
         USING OACMOVE,R12
         GETMAIN R,LV=72
         LR    R13,R1             @ NEW SAVEAREA
         ST    R11,4(,R13)
         ST    R13,8(,R11)
         SPACE 1
         LA    R1,PARML
         L     R15,=A(OACMOVEL)
         BALR  R14,R15            LOAD THE MODULES
         SPACE 1
         L     R1,12+8+4*R1(,R11) ORIG R1 VALUE
         LINK  EPLOC=MODS          GO TO MODULE
         ST    R15,8+4+4(,R11)    RETURN RETURN TO CALLERS R15 SLOT
         SPACE 1
         LA    R1,PARMD
         L     R15,=A(OACMOVEL)
         BALR  R14,R15            DELETE THE MODULES
         SPACE 1
         FREEMAIN R,LV=72,A=(R13) FREE MY SAVEAREA
         LR    R13,R11            RESTORE CALLERS R13
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         BR    R14                 AND RETURN
         DROP  R12               OACMOVE
         SPACE 1
PARML    DC    A(*+4),Y(1),C'L'     LOAD PARM FOR OACMOVEL
PARMD    DC    A(*+4),Y(1),C'D'     DELETE PARM FOR OACMOVEL
         EJECT ,
W#       DSECT
W#SAVE   DC    18F'0'
W#BXH    DC    3F'0'              @ FIRST-1, LEN, @ LAST BLDL ENTRIES
W#MOD    DC    CL8' '
W#WTO    DC    CL140' '
         DC    0D'0'
W#BLDL   DC    Y(MODS#,BLDLLEN)
W#BLDL1  EQU   *
W#L      EQU   *-W#
         SPACE 1
         ENTRY OACMOVEL
OACMOVE  CSECT ,
OACMOVEL STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15
         L     R11,0(,R1)         GET PARM ADDRESS
         USING OACMOVEL,R12
         L     R2,=A(W#L+(MODS#*BLDLLEN))
         GETMAIN R,LV=(R2)
         LA    R9,0(,R1)          @ W#
         LR    R0,R9              @ W# FOR CLEAR
         LR    R1,R2              LENGTH OF AREA
         SR    R15,R15            CLEAR TO ZERO
         MVCL  R0,R14
         USING W#,R9
         SPACE 1
         ST    R13,W#SAVE+4
         ST    R9,8(,R13)
         LR    R13,R9
         SPACE 1
         CLI   2(R11),C'D'         DELETE REQUEST?
         BE    DLT                 BIF DELETE REQUEST
         SPACE 1
         BAL   R10,MSGI           INIT WTO AREA
         LA    R3,W#BLDL1         @ FIRST BLDL ENTRY
         LA    R4,BLDLLEN         LENGTH OF EACH BLDL ENTRY
         LA    R6,MODS#           NUMBER OF BLDL ENTRIES
         STH   R6,W#BLDL           NUMBER OF BLDL ENTRIES TO BLDL PFX
         STH   R4,W#BLDL+2          AND LENGTH OF EACH ENTRY
         BCTR  R6,0               NUMBER OF ENTRIES - 1
         MH    R6,W#BLDL+2        OFFSET OF LAST ENTRY
         LA    R6,W#BLDL1(R6)     @ OF LAST ENTRY (BXH LIMIT)
         SR    R3,R4              @ FIRST ENTRY - 1 FOR BXH
         LR    R5,R3              INIT EMPTY BLDL LIST
         STM   R3,R4,W#BXH         SAVE BXH REGS
         ST    R6,W#BXH+8
         SPACE 1
         LA    R7,MODS            @ MODULE LIST
ADD1     MVC   W#MOD(8),0(R7)     NAME TO ADD TO BLDL LIST
         L     R3,W#BXH           @ FIRST BLDL ENTRY - 1 ENTRY
ADD2     BXH   R3,R4,ADD3         BIF NO MORE PREV NAMES TO CHECK
         CLC   0(8,R3),W#MOD      THIS MODULE GO HERE?
         BL    ADD2
         BE    ADD4               BIF DUPLICATE MODULE (SKIP?)
         XC    W#MOD(8),0(R3)        TO BLDL LIST
         XC    0(8,R3),W#MOD
         XC    W#MOD(8),0(R3)        TO BLDL LIST
         B     ADD2
         SPACE 1
ADD3     AR    R5,R4              BUMP TO NEW ENTRY
         CR    R5,R6              ROOM LEFT IN BLDL TABLE?
         BNH   *+8                BIF NOT OUT OF ROOM
         EX    0,*                ** LOGIC ERROR IF OUT OF ROOM **
         MVC   0(8,R5),W#MOD      NAME TO BLDL LIST
         SPACE 1
ADD4     LA    R7,8(,R7)          TO NEXT MODULE NAME
         CL    R7,=A(MODSE)
         BNH   ADD1
         SPACE 1
         BLDL  0,W#BLDL
         CH    R15,=H'4'
         BNH   *+8                BIF BLDL OK
         EX    0,*
         SPACE 1
         LM    R3,R5,W#BXH        SCAN FOR BLDL STATS
LOAD1    BXH   R3,R4,RET          BIF ALL MODULES PROCESSED
         USING PDS2,R3
         CLI   PDS2TTRP+2,0       RECORD NUMBER ZERO?
         BE    LOADER1            BIF BLDL FAILED FOR MODULE
         TM    PDS2ATR,PDS2REUS+PDS2RENT  RENT OR REUS
         BZ    LOADER2            BIF NOT REUS OR RENT
         LOAD  EPLOC=PDS2         LOAD THE MODULE
         B     LOAD1               AND CONTINUE
LOADER1  MVC   W#WTO+WTO#M+9(11),=C'BLDL FAILED'
         B     LOADERR
LOADER2  MVC   W#WTO+WTO#M+9(16),=C'NOT RENT OR REUS'
LOADERR  MVC   W#WTO+WTO#M(8),PDS2    MODULE NAME TO MSG
         BAL   R10,MSG
         B     LOAD1
         DROP  R3
         SPACE 1
RET      L     R13,4(,R13)        @ CALLERS SAVEAREA
         L     R2,=A(W#L+(MODS#*BLDLLEN))
         FREEMAIN R,LV=(R2),A=(R9) FREE W# AREA / BLDL LIST
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         BR    R14
         SPACE 1
DLT      LA    R3,MODS            @ MODULE NAME LIST
DLT1     DELETE EPLOC=(R3)         DELETE EACH MODULE
         LA    R3,8(,R3)           @ NEXT MODULE
         CL    R3,=A(MODSE)       ALL MODULES DELETED
         BNH   DLT1               BIF MORE TO DO
         B     RET
         SPACE 1
MSG      WTO   MF=(E,W#WTO)
MSGI     MVC   W#WTO(WTOL),WTO
         BR    R10
         SPACE 1
         DROP  R12                OACMOVEL
         DROP  R9                 W#
         EJECT ,
BLDLLEN  EQU   80                 LENGTH OF EACH BLDL ENTRY
WTO      WTO   'OAC9999I (OACMOVE) -                                   X
                      ',ROUTCDE=(11),MF=L
WTOL     EQU   *-WTO
WTO#M    EQU   4+21
         SPACE 1
MODS     DC    CL8'IEHMOVE '
         DC    CL8'IEHMVERA'
         DC    CL8'IEHMVERD'
         DC    CL8'IEHMVESA'
         DC    CL8'IEHMVESC'
         DC    CL8'IEHMVESE'
         DC    CL8'IEHMVESH'
         DC    CL8'IEHMVESI'
         DC    CL8'IEHMVESJ'
         DC    CL8'IEHMVESK'
         DC    CL8'IEHMVESL'
         DC    CL8'IEHMVESM'
         DC    CL8'IEHMVESN'
         DC    CL8'IEHMVESO'
         DC    CL8'IEHMVESP'
         DC    CL8'IEHMVESQ'
         DC    CL8'IEHMVESR'
         DC    CL8'IEHMVESS'
         DC    CL8'IEHMVEST'
         DC    CL8'IEHMVESU'
         DC    CL8'IEHMVESV'
         DC    CL8'IEHMVESX'
         DC    CL8'IEHMVESY'
         DC    CL8'IEHMVESZ'
         DC    CL8'IEHMVETA'
         DC    CL8'IEHMVETG'
         DC    CL8'IEHMVETJ'
         DC    CL8'IEHMVETL'
         DC    CL8'IEHMVXSE'
MODSE    DC    CL8'IEHMVXSF'
MODS#    EQU   (*-MODS)/8
         SPACE 1
         OACREGS ,
         SPACE 1
         IHAPDS ,
         END
//*KED.SYSLMOD DD DISP=SHR,DSN=CSYSMAS.UTMAS.LOAD,SPACE=
//LKED.SYSIN   DD *
   ENTRY OACMOVE
   ALIAS OACMOVEL
   NAME OACMOVE(R)
//*
//C   EXEC PGM=COMPARE,
//  PARM='OACMOVE,OACMOVE'
//STEPLIB  DD DISP=SHR,DSN=SYS5.MSSLOAD
//SYSPRINT DD SYSOUT=*
//I1       DD DISP=(SHR,PASS),DSN=&&GOSET
//I2       DD DISP=SHR,DSN=CSYSMAS.UTMAS.LOAD
//
