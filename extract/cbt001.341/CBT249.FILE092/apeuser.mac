MAIN     TITLE 'APEUSER - USER MONITOR ROUTINE'
*   THIS PROGRAM PERMITS AN APPLICATION PROGRAM TO BE RUN UNDER
* APEMAN.  THIS AVOIDS THE NEED FOR THE USER TO REQUEST THAT APEMAN
* BE RUN ALONGSIDE HIS JOB.
*
*   THIS ROUTINE INTEGRATES THE FUNCTIONS OF THE MAIN MONITOR PROGRAM
* AND THE MONRUN ROUTINE TO PROVIDE AN APEMAN ENVIRONMENT. IT ALSO
* ATTACHES THE CALLER'S PROGRAM AS A SUBTASK.
*
*   MODIFICATIONS TO REGULAR APEMAN ROUTINES ARE INCLUDED IN THIS
* ROUTINE WHERE APPROPRIATE.
*
* MODIFICATION CW003 16/07/80 ISSUES WTO & SNAP ON MONITOR ABEND  CW003
* MODIFICATION CW004 16/07/80 PERMITS ALTERNATE PRIMARY PARAMS    CW004
* MODIFICATION CW005 30/09/80 FORCES STANDARD SECONDARY PARAMS    CW005
* MODIFICATION CW008 15/08/80 CALLS SUBROUTINE FOR TIME SERVICES  CW008
*
APEUSER  CSECT
         B     ENTRY-APEUSER(15)
         DC    X'07',CL7'APEUSER'
         ENTRY MONEND
ENTRY    EQU   *
*
**  MAIN MONITOR ROUTINE
*
**  INTVAL CONTAINS THE DEFAULT SAMPLING INTERVAL
**  ITYPE CONTAINS THE DEFAULT TYPE OF INTERVAL (SECS)
**  MAXTIM CONTAINS THE DEFAULT SAMPLING INTERVAL IN MINS (60)
**  THE MONITORS MUST BE OF THE FORM MON. WHERE . IS
**  ALPHABETIC (A-Z)
**  THE UNITS OF THE SAMPLING INTERVAL MAY BE CHANGED
**  WITH THE KEYWORDS MILLI,SECS,MINS
*
**  ALL INPUT TO THIS FORM OF THE APEMAN MONITOR IS OBTAINED FROM
**  THE PARMLIB.  REGISTER 1 (THE PARM FIELD REGISTER) IS PASSED TO
**  THE USER'S PROGRAM VIA THE ATTACH MACRO.
*
**  A LIBRARY CONTAINING APEMAN LOAD MODULES (E.G. W015.GDSMODS.LOAD)
**  MUST BE CONCATENATED WITH THE USER'S STEPLIB.  THIS MAY PREVENT
**  THE USE OF STANDARD COMPILE-LOAD-GO JCL PROCEDURES. IN ADDITION,
**  THE FOLLOWING DDNAMES ARE RESERVED FOR APEMAN:
*
**    MONPRINT  (A SYSOUT DATA SET)
**    MONPARM   (A PDS CONTAINING APEMAN CONTROL CARDS)
**    MONLOG    (THE APEMAN LOG DATA SET, TAPE OR LARGE DISK AREA)
*
**  THE FOLLOWING DDNAMES SHOULD BE PROVIDED, BUT MAY BE USED FOR
**  APPLICATIONS PURPOSES AS WELL AS FOR APEMAN:
*
**    SYSUDUMP  (A SYSOUT DATA SET)
**    SNAPDD    (A SYSOUT DATA SET USED FOR SNAP DUMPS)
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW7      EQU   7
RW8      EQU   8
RW9      EQU   9
RW10     EQU   10
RW11     EQU   11
RW12     EQU   12
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2
ENTER    EQU   *
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
         ST    RW1,SAVEREG1            SAVE REG 1 TO PASS TO USER
*
**  READ DATA FROM INPUT STREAM MONITORS
*
READMON  EQU   *
         LA    RW1,ARGL3               POINT AT PARAM LIST
         L     RW15,=V(INPUT)          INPUT
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,FLAG                LOAD RETURN FLAG
         LTR   RW3,RW3                 TEST FOR END OF FILE
         BNZ   ENDATA                  YES, BRANCH
*
**  LOCATE PROGRAM NAME TO ATTACH
*
         LA    RW3,80                  LOAD DATA LENGTH
         ST    RW3,LENBUF
         LA    RW1,PGMARG
         L     RW15,=V(FNDTXT)
         BALR  14,15
*
*
*
GETMONS  LA    RW1,ARGL2               POINT AT PARAM LIST
         L     RW15,=V(PARAMS)         PARAMS
         BALR  14,15                   LINK TO ROUTINE
         B     READMON
*
**  PRINT SELECTED MONITORS
*
ENDATA   EQU   *
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG1                POINT AT FIRST MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         POINT AT OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG2                POINT AT SECOND MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO ROUTINE
*
         LA    RW3,MSG3                POINT AT THIRD MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
*
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
         L     RW3,ITYPE               LOAD TYPE OF INTERVAL
         SLL   RW3,3                   SHIFT FOR INDEX
         LA    RW4,UNITS(RW3)          POINT AT SELECTED UNITS
         MVC   MSG4+21(8),0(RW4)       MOVE UNITS INTO MESSGAE
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG4                POINT AT FOURTH MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
*
         LA    RW3,MSG5                POINT AT FIFTH MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
**  CYCLE THRU MONITORS
*
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG6                POINT AT MESSAGE SIX
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW3,26                  COUNTER
         LA    RW4,ALPHABET            POINT AT LETTERS
         LA    RW5,MINT                POINT AT FREQUENCIES
         LA    RW8,MONAD               POINT AT ADDRESS TABLE
WRITMON  EQU   *
         L     RW7,0(RW5)              PICK UP FREQUENCIES
         LTR   RW7,RW7                 ZERO?
         BNP   INCMON                  YES, BRANCH
         MVC   MON+3(1),0(RW4)         CREATE MONITOR NAME
         MVC   MSG6+2(4),MON           MOVE INTO BUFFER
         SR    RW6,RW6
         M     RW6,INTVAL              GET MONITOR CALLING INTERVAL
         CVD   RW7,DBWD                CONVERT TO DECIMAL
         L     RW7,DBWD+4              REMOVE SIGN
         SRL   RW7,4
         ST    RW7,DBWD+4
         MVC   MSG6+8(9),PATTERN       MOVE EDIT PATTERN INTO MSG
         ED    MSG6+8(9),DBWD+4        EDIT INTERVAL
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         POINT AT OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
**  DO NOT EXCLUDE ANOTHER APEMAN RUNNING THE SAME MONITOR
**  JUST LOAD THE DESIRED MONITOR
*
LOADMON  MVI   ANY,X'FF'               SET ANY FLAG
         LOAD  EPLOC=MON               LOAD MONITOR
         ST    RW0,0(RW8)              STORE ADDRESS IN TABLE
         MVI   0(RW8),C' '             FORCE STANDARD PARAMETERS  CW005
*
**  INCREMENT COUNTERS
*
INCMON   EQU   *
         LA    RW8,4(RW8)              INCREMENT TABLE ADDRESS
         LA    RW4,1(RW4)              POINT AT NEXT LETTER
         LA    RW5,4(RW5)              POINT AT NEXT FREQUENCY
         BCT   RW3,WRITMON             LOOP BACK
*
**  ANY ACTIVE MONITORS
*
         TM    ANY,X'FF'               TEST FLAG
         BZ    ENDMON                  NO,BRANCH
*
**  CONVERT PARAMETERS TO CORRECT UNITS
*
         SR    RW6,RW6
         L     RW7,=F'6000'            CONVERT MAXTIM TO
         M     RW6,MAXTIM              HUNDREDTHS OF A SCEOND
         ST    RW7,MAXTIM
         L     RW3,ITYPE               LOAD UNIT TYPE
         SLL   RW3,2                   SHIFT FOR INDEX
         B     TABLE(RW3)
TABLE    EQU   *
         B     TYPE0
         B     TYPE1
TYPE2    EQU   *
*
**  UNITS = MINS
**  CONVERT TO MICROSECONDS
*
         L     RW7,MINS                LOAD MULT FACTOR
         B     MULT
TYPE1    EQU   *
*
**  UNITS V SECS
**  CONVERT TO MICROSECONDC
*
         L     RW7,SECS                LOAD MULT FACTOR
         B     MULT
TYPE0    EQU   *
*
**  UNITS= MILLI
**  CONVERT TO MICROSECONDS
*
         L     RW7,MILLI               LOAD MULT FACTOR
*
**  PERFORM MULTIPLICATION
*
MULT     EQU   *
         SR    RW6,RW6
         M     RW6,INTVAL
         ST    RW7,INTVAL              STORE INTERVAL
*
**  WRITE ACTIVE MONITORS TO LOG
*
         SR    RW3,RW3
         ST    RW3,FLAG                ZERO FLAG
         LA    RW1,ARGL5               POINT AT PARAM LIST
         L     RW15,=V(MONRT)          MONRT
         BALR  14,15                   LINK TO ROUTINE
*
**  WRITE DATE TO LOG
*
         LA    RW1,ARGL6               POINT AT PARAM LIST
         L     RW15,=V(GETDAT)         GETDAT
         BALR  14,15                   LINK TO ROUTINE
         LA    RW1,NAME                POINT AT 'DATE'
         ST    RW1,ARGL5               STORE IN PARAM LIST
         LA    RW1,2                   LOAD NEW DATA LENGTH
         ST    RW1,LENGTH
         LA    RW1,DATE                POINT AT DATA
         ST    RW1,DATAD               STORE IN PARAM LIST
         LA    RW1,ARGL5               POINT AT PARAM LIST
         L     RW15,=V(MONRT)          MONRT
         BALR  14,15                   LINK TO ROUTINE
*
         ST    RW3,MSGLEN              SET ZERO LENGTH
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
**  START MONITORING
*
         TIME  DEC                     GET TOD
         SR    RW1,RW1                 ZERO BOTTOM
         SRDL  RW0,28                  SHIFT TO PENULTIMATE NIBBLE
         O     RW1,=F'12'              OR IN SIGN
         STM   RW0,RW1,TIME            STORE
         UNPK  DBWD(8),TIME+3(5)       UNPACK
         OI    DBWD+7,X'F0'            REMOVE SIGN
         MVC   MSG7+1(2),DBWD
         MVC   MSG7+4(2),DBWD+2
         MVC   MSG7+7(2),DBWD+4
         MVC   MSG7+10(2),DBWD+6
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG7                POINT AT MESSGAE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
**  ROUTINE RUNS REQUIRED MONITORS
**  MINT - ARRAY CONTAINING CALLING FREQUENCIES
**  INTVAL - MONITORING INTERVAL IN MICROSECONDS
**  MAXTIM - MAXIMUM MONITORING TIME IN HUNDREDTHS OF A SECOND
*
         ENTRY OC4
*
**  SET UP SPIE FOR ABENDS
*
         BAL   RW8,DOSPIE              CATCH PROGRAM INTERRUPTS
         MVI   FLG3,X'FF'               ***** SET FLAG 3 *****
*
**  ATTACH USER PROGRAM AS SUBTASK
*
         L     RW1,SAVEREG1            RESTORE ORIGINAL REG 1
         ATTACH EPLOC=PROGNAME,ECB=TASKECB,LPMOD=17 START HIM UP
         ST    RW1,USERTCB             SAVE SUBTASK TCB ADDRESS
*
**  CALL ACTIVE MONITORS
*
**  REGISTER USAGE -
**  RW3 - COUNTER OF NO OF CALLS
**  RW4 - COUNTER OF NO OF MONITORS
**  RW5 - ADDRESS OF FREQUENCIES
**  RW6 - POINTER FOR MONITOR ADDRESS
**  RW7 - POINTER FOR ABEND COUNTER
*
         SR    RW3,RW3                 SET TO ZERO FOR START
MONITOR  EQU   *
         LA    RW4,26                  NO OF MONITORS
         LA    RW5,MINT                POINTER TO FREQUENCIES
         SR    RW6,RW6                 SET INDEX TO ZERO
         LA    RW7,ABCNT               POINTER TO COUNTERS
*                                                                 CW008
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  MIC,START                                          CW008
*                                                                 CW008
         MVI   TIMECODE,3              INDICATE MIC OPTION        CW008
         LA    RW1,START               LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
AGAIN    EQU   *
         L     RW10,0(RW5)             LOAD FREQUENCY
         LTR   RW10,RW10               LOADED?
         BZ    NXTMON                  NO,IGNORE
         TM    FIRST,X'FF'             FIRST?
         BZ    THIS                    YES THEN WANTED
         SR    RW8,RW8
         LR    RW9,RW3                 TRANSFER COUNTS
         DR    RW8,RW10
         LTR   RW8,RW8                 REMAINDER?
         BNZ   NXTMON                  YES,NOT WANTED
THIS     EQU   *
*
**  CALL MONITOR
*
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  DEC                                                CW008
*        ST    RW0,TIME                                           CW008
*                                                                 CW008
         MVI   TIMECODE,2              INDICATE DEC OPTION        CW008
         LA    RW1,TIME                LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
         LA    RW1,ADARGS              POINT AT ARGUMENTS
         L     RW15,MONAD(RW6)         PICK UP MONITOR ADDRESS
         BALR  14,15                   LINK TO MONITOR
*
**  CALL ENDPDS AFTER FIRST TIME TO RESET MEMBERNAME
*
         LA    RW1,MONAD(RW6)          HI BYTE OF MON ADDR IS FLG CW005
         CLI   0(RW1),0                RESTART WITH NEW PARAMS?   CW005
         BNE   *+12                    CLOSE PARMLIB MEMBER IF SO CW005
         TM    FIRST,X'FF'             FIRST TIME?
         BNZ   NXTMON                  NO,BRANCH
         L     RW15,=V(ENDPDS)
         BALR  14,15                   LINK TO ROUTINE
         SR    14,14                   REMOVE NEW PARAMETER ID    CW005
         STC   14,MONAD(RW6)             FROM HI BYTE OF MON ADDR CW005
*
**  INCREMENT FOR NEXT MONITOR
*
NXTMON   EQU   *
         LA    RW5,4(RW5)              NEXT FREQUENCY
         LA    RW6,4(RW6)              NEXT ADDRESS
         LA    RW7,2(RW7)              NEXT ABEND COUNTER
         BCT   RW4,AGAIN
*
**  MONITOR CYCLE ENDED
*
         LA    RW3,1(RW3)              INCREMENT COUNTER
         MVI   FIRST,X'FF'             SET FLAG
*                                                                 CW008
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  MIC,END                                            CW008
*                                                                 CW008
         MVI   TIMECODE,3              INDICATE MIC OPTION        CW008
         LA    RW1,END                 LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
         LM    RW0,RW1,END             LOAD END TIME
         SRDL  RW0,12                  SHIFT DOWN
         LR    RW4,RW1                 LOAD BOTTOM HALF
         LM    RW0,RW1,START           LOAD START TIME
         SRDL  RW0,12                  SHIFT DOWN
         SR    RW1,RW4                 SUBTRACT END FROM START
         A     RW1,INTVAL              ADD CALLING INTERVAL
         LTR   RW1,RW1                 TEST WAIT TIME > 0
         BM    NOWAIT                  NO,BRANCH
         SR    RW0,RW0                 ZERO TOP HALF
         SLDL  RW0,12                  SHIFT UP
         STM   RW0,RW1,WAIT            STORE WAIT INTERVAL
*                                                                 CW002
**  THE FOLLOWING CODE WAITS ON AN STIMER AND ALSO ON THE STOP/   CW002
**   MODIFY ECB.  AS A SIDE BENEFIT, IT AVOIDS LONG WAIT SWAPS    CW002
**    AND PLAYS YE OLDE 'BEAT THE DETECTED WAIT' GAME IF APEMAN   CW002
**     RUNS SWAPPABLE.  FOR THIS YOU MUST MAKE THE TIME INTERVAL  CW002
**      SHORT ENOUGH (E.G. 1 SECOND ON A 3033).                   CW002
*                                                                 CW002
         STIMER REAL,TIMEXIT,MICVL=WAIT  SET UP TIME INTERVAL     CW002
         WAIT  ECBLIST=ECBLST,LONG=NO  WAIT ON STIMER AND TASKECB CW002
         TM    TASKECB,X'40'           WAS IT POSTED?             CW002
         BO    STOP                    STOP APEMAN IF SO          CW005
*                                      IF NOT, MUST BE TIMER      CW002
WAITED   XC    TIMECB,TIMECB           CLEAR ECB FOR REUSE        CW002
NOWAIT   EQU   *
         B     MONITOR                 GO BACK FOR MORE
STOP     LA    RW1,ADARGS2             POINT AT PARAM LIST FOR MONRT
         L     RW15,ADMONRT            MONRT
         BALR  14,15                   LINK TO MONRT
         B     MONEND                  BRANCH TO END
*                                                                 CW002
**  EXIT TO POST STIMER ECB FOR WAIT INTERVAL                     CW002
*                                                                 CW002
TIMEXIT  EQU   *                                                  CW002
         USING TIMEXIT,15              TEMPORARY ADDRESSABILITY   CW002
         STM   14,12,12(13)            SYSTEM PROVIDED SAVE AREA  CW002
         POST  TIMECB                  JUST POST OUR ECB          CW002
         LM    14,12,12(13)            RESTORE THE REGISTERS      CW002
         BR    14                      EXIT RETURNS TO SYSTEM     CW002
         DROP  15                      END OF STIMER WAIT CODE    CW002
*
**  SPIE EXIT
*
OC4      EQU   *
         USING OC4,RW15                TEMP ADDRESSABILITY        CW003
         ST    RW1,ADPIE               SAVE ADDRESS OF ACTUAL PIE CW003
         MVC   MYPIE,0(RW1)            COPY THE PIE               CW003
         STM   3,13,STASH              SAVE REGS AT TIME OF ERROR CW003
         MVC   8(4,RW1),ADRETRY        SET UP RETRY ADDRESS
         MVI   FLG1,X'FF'              ***** SET FLAG 1 *****     CW003
         DROP  RW15                                               CW003
         BR    14
ADRETRY  DC    A(RETRY)
*
**  EXIT FROM SPIE EXIT
*
RETRY    EQU   *
         BALR  RW3,0                   ESTABLISH TEMP ADDRESSABILITY
         USING *,RW3
         L     RB2,ADBASE
         B     EOD1
ADBASE   DC    A(ENTER)                SETTING FOR BASE REGISTER
EOD1     EQU   *
         DROP  RW3
         MVI   FLG2,X'FF'              ***** SET FLAG 2 *****
         LA    13,SAVE                  RECHAIN SAVE AREAS
         LM    3,7,32(13)              RELOAD REGISTERS           CW003
         LR    RW1,RW6                 COPY R6 (MONITOR NUMBER)   CW003
         SRL   RW1,2                   ONE BYTE INDEXING          CW003
         IC    RW0,ALPHABET(RW1)       LETTER OF CURRENT MONITOR  CW003
         STC   RW0,MONID               STORE IN MONITOR NAME      CW003
         STC   RW0,ABMSG+24            STORE IN WTO MESSAGE       CW003
         IC    RW1,MYPIE+7             CONVERT LOW PART OF        CW003
         IC    RW0,HEX(RW1)             INTERRUPT CODE TO HEX     CW003
         STC   RW0,ABCODE              PLACE AFTER '0C' IN MSG    CW003
         LH    RW8,0(RW7)              LOAD ABEND COUNTER
         LTR   RW8,RW8                 TEST FOR SNAP REQUESTED    CW003
         BM    DOSNAP                  BRANCH IF SO - 1 TIME ONLY CW003
         BCT   RW8,ABOK                REDUCE
         B     TERMMON                 ABEND COUNT USED UP, KILL  CW003
DOSNAP   TM    FLG4,1                  IS SNAP DCB OPEN YET?      CW003
         BO    SNOPENED                IF SO, DON'T DO IT AGAIN   CW003
         OPEN  (SNAPDCB,(OUTPUT))      OPEN DCB FOR SNAP          CW003
         OI    FLG4,1                  INDICATE OPEN DCB          CW003
SNOPENED SNAP  DCB=SNAPDCB,SDATA=(NUC,LSQA,CB),                   CW003*
               PDATA=(SA,ALLPA,SPLS)                              CW003
TERMMON  SR    RW8,RW8                 TURN OFF FAILED MONITOR    CW003
         ST    RW8,0(RW5)              ZERO FREQUENCY
         ST    RW8,MONAD(RW6)          CLEAR MONITOR ADDRESS      CW003
         OC    MONAD(104),MONAD        ANY MONITOR STILL RUNNING? CW003
         BZ    STOP                    STOP APEMAN IF NOT         CW003
         DELETE EPLOC=MONNAME          DELETE BAD MODULE          CW003
*                                                                 CW003
ABMSG    WTO   'ABEND 0C. IN MON. - MONITOR TERMINATED',          CW003*
               ROUTCDE=(2,11)          ISSUE ERROR MESSAGE        CW003
ABCODE   EQU   ABMSG+16                                           CW003
ABOK     EQU   *                                                  CW003
         STH   RW8,0(RW7)              RESTORE ABEND COUNTER      CW003
         LA    RW8,NXTMON              LOAD RETRY ADDRESS         CW003
DOSPIE   SPIE  OC4,((1,15))            HANDLE ANY PGM INTERRUPT   CW003
*                                      THE ABOVE ALLOWS THEM ALL  CW003
* NOW MASK OFF THE SILLY SIGNIFICANCE INTERRUPT                   CW003
*                                                                 CW003
         IC    RW1,PGMMASK             LOAD DESIRED PROGRAM MASK  CW003
         SLL   RW1,24                  SET UP FOR SPM             CW003
         SPM   RW1                     STOP UNWANTED INTERRUPTS   CW003
         BR    RW8                     RETURN TO INLINE CODE      CW003
*
**  RETURN
*
RETURN   EQU   *
         L     13,4(13)
         LM    14,12,12(13)            RESTORE REGISTERS
         BR    14
*
**  ERROR EXIT
*
ENDMON   EQU   *
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE MESSAGE LENGTH
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE MESSAGE LENGTH
         LA    RW3,MSG8                POINT AT MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         B     RETURN
*
**  NORMAL END - BRANCH ENTRY
*
MONEND   EQU   *
         BALR  RW3,0
         USING *,RW3                   TEMP ADDRESSABILITY
         L     RB2,ADENTER
         B     EOD2
ADENTER  DC    A(ENTER)
EOD2     EQU   *
         DROP  RW3
         LA    13,SAVE                 RECHAIN SAVE AREAS
*
**  OBTAIN TOD
*
         TIME  DEC
         SR    RW1,RW1                 ZERO BOTTOM
         SRDL  RW0,28                  SHIFT TO LAST NIBBLE
         O     RW1,=F'12'              INSERT SIGN
         STM   RW0,RW1,TIME            STORE
*
**  UNPACK TIME
*
         UNPK  DBWD(8),TIME+3(5)
         OI    DBWD+7,X'F0'            REMOVE SIGN
         MVC   MSG9+1(2),DBWD
         MVC   MSG9+4(2),DBWD+2
         MVC   MSG9+7(2),DBWD+4
         MVC   MSG9+10(2),DBWD+6
*
**  WRITE OUT MESSAGE
*
         LA    RW3,MSG9
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1
         L     RW15,=V(OUTPUT)
         BALR  14,15                   LINK TO ROUTINE
*
**  BLANK BUFFER
*
         SR    RW3,RW3
         ST    RW3,MSGLEN               ZERO MESSAGE LENGTH
         BALR  14,15
*
**  DETACH USER SUBTASK
*
         DETACH USERTCB
*
**  CLOSE DCB'S
*
         L     RW3,=V(INDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   OPEN1                   NO,BRANCH
         CLOSE ((RW3))                 CLOSE INDCB
OPEN1    EQU   *
         L     RW3,=V(OUTDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   OPEN2                   NO,BRANCH
         CLOSE ((RW3))                 CLOSE OUTDCB
OPEN2    EQU   *
         L     RW3,=V(MONDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   RETURN
         CLOSE ((RW3))
         B     RETURN
HEX      DC    C'0123456789'                                      CW003
ALPHABET DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'                      CW003
*
**  SAVE AREAS AND STORAGE
*
FIXOFLOW EQU   8                                                  CW003
DECOFLOW EQU   4                                                  CW003
EXPUFLOW EQU   2                                                  CW003
SIGNIFEX EQU   1                       MASK OFF SIGNIFICANCE      CW003
PGMMASK  DC    AL1(FIXOFLOW+DECOFLOW+EXPUFLOW)                    CW003
FLG4     DC    X'00'                   ADDITIONAL FLAGS           CW003
ADPIE    DS    F                       ADDR OF PGM INTERRUPT ELT  CW003
MYPIE    DS    CL32                    COPY THE PIE HERE FOR DUMP CW003
STASH    DS    11F                     SAVE REGS 3-13 FOR DUMP    CW003
FIRST    DC    X'00'
FLG1     DC    X'00'
FLG2     DC    X'00'
FLG3     DC    X'00'
FLAG1    DC    F'1'                    DUMMY ARGUMENT FOR ???
ADARGS   DC    A(ADINPUT)
         DC    A(ADMONRT)
         DC    A(TIME)
         DC    A(ADFNDVAL)
         DC    A(ADFNDPRS)
         DC    A(ADFNDTXT)
ADINPUT  DC    V(INPUT)
ADMONRT  DC    V(MONRT)
ADFNDVAL DC    V(FNDVAL)
ADFNDPRS DC    V(FNDPRS)
ADFNDTXT DC    V(FNDTXT)
TIMECB   DC    F'0'                    ECB FOR STIMER INTERVAL    CW002
ECBLST   DC    A(TASKECB)              ADDRESS OF SUBTASK ECB     CW002
         DC    X'80',AL3(TIMECB)                                  CW002
*********************************** ABEND COUNTERS ************** CW003
*  ONE ABEND COUNTER IS PROVIDED FOR EACH MONITOR.  IT IS         CW003
*  INITIALIZED TO THE NUMBER OF PROGRAM INTERRUPTS WHICH WILL     CW003
*  BE TOLERATED BEFORE THE MONITOR IS SHUT DOWN.  A NEGATIVE      CW003
*  VALUE REQUESTS A SNAP DUMP IF A PROGRAM INTERRUPT OCCURS.      CW003
*  IN THIS CASE THE MONITOR IS SHUT DOWN AFTER ONE INTERRUPT      CW003
*  AND THE RESULTING SNAP DUMP.  ORIGINALLY APEMAN SPECIFIED      CW003
*  A LIMIT OF 10 INTERRUPTS FOR EACH MONITOR.                     CW003
***************************************************************** CW003
ABCNT    DC    26H'-1'          FORCE SNAP DUMP ON ANY PROG INT   CW003
START    DS    D
END      DS    D
WAIT     DS    D
MONNAME  DC    CL8'MON'                                           CW003
MONID    EQU   MONNAME+3                                          CW003
TIMEARGS DC    A(TCODE)                ARGUMENT LIST FOR TIMER    CW008
         DC    A(DATEDMY)              DATE NOT CURRENTLY USED    CW008
TIMETARG DC    A(0)                    LOCATION TO STORE TIME     CW008
TCODE    DC    F'0'                    TYPE OF MACRO CALL         CW008
TIMECODE EQU   TCODE+3                 USE ONLY LOW ORDER BYTE    CW008
DATEDMY  DC    F'0'                    *** NOT CURRENTLY USED *** CW008
ADARGS2  DC    A(FLAG1)
         DC    A(FLAG1)
         DC    A(FLAG1)
         DC    A(FLAG1)
MONAD    DC    26F'0'
SNAPDCB  DCB   DDNAME=SNAPDD,DSORG=PS,RECFM=VBA,MACRF=(W),        CW003*
               LRECL=125,BLKSIZE=1632     FOR STANDARD DUMP       CW003
*              LRECL=209,BLKSIZE=2724     FOR DUMP CHARACTERS     CW003
*
**  DEFAULT APEMAN PARAMETERS -
**  MAXTIM - MONITORING PERIOD (30 MINS)
**  INTVAL - MONITOR SAMPLE INTERVAL (10 UNITS)
**  ITYPE  - SAMPLE INTERVAL UNITS (1=SECS)   (0=MILLI;2=MINS)
*
MAXTIM   DC    F'30'
INTVAL   DC    F'10'
ITYPE    DC    F'1'
*
**  SAVE AREAS AND STORAGE
*
SAVE     DS    18F
SAVEREG1 DS    F
USERTCB  DS    F                  ADDRESS OF SUBTASK TCB
TASKECB  DC    F'0'
LENBUF   DC    F'80'
BUFFER   DS    20F
INSTR    DC    CL8'APEMAN'        DEFAULT PARMLIB MEMBER          CW004
FLAG     DC    F'0'
MINT     DC    26F'0'
OUTSTR   DC    C'MONPRINT'
TIME     DS    2F
MSGLEN   DC    F'32'
PROGNAME DC    CL8'GO'            DEFAULT TO 'GO' FOR STD PROCS
DBWD     DS    D
DATE     DS    D
MINS     DC    F'60000000'
SECS     DC    F'1000000'
MILLI    DC    F'1000'
LENGTH   DC    F'26'
MON      DC    CL8'MON'           MONITOR NAME IS RNAME           CW006
KEYLEN   DC    F'5'               LENGTH OF 'PROG=' KEYWORD       CW004
ARGL2    DC    A(ITYPE)
ARGL7    DC    A(MINT)
         DC    A(INTVAL)
         DC    A(MAXTIM)
PGMARG   DC    A(LENBUF)
         DC    A(BUFFER)
         DC    A(KEYLEN)          KEY LENGTH FOR 'PROG=' SEARCH   CW004
         DC    A(MEMBER)          KEY TO SEARCH FOR LIB MEMB NAME CW004
         DC    A(FLAG)            (NOT USED)                      CW004
         DC    A(PROGNAME)
ARGL3    DC    A(INSTR)           LIB MEMBER FOR PRIMARY PARAMS   CW004
         DC    A(BUFFER)
         DC    A(FLAG)
ARGL5    DC    A(MAIN)
         DC    A(LENGTH)
DATAD    DC    A(MINT)
         DC    A(FLAG)
ARGL6    DC    A(DATE)
ARGLIST1 DC    A(OUTSTR)
         DC    A(MSGLEN)
MSGAD    DS    F
NAME     DC    C'DATE'
MAIN     DC    C'MAIN'
MSG1     DC    CL32' APEMAN - RELEASE 3'                          CW***
MSG2     DC    CL32' MONITORS SELECTED -'
MSG3     DC    CL32' -----------------'
MSG4     DC    CL32' MONITOR    INTERVAL'
MSG5     DC    CL32' -------    --------'
MSG6     DC    CL32' '
MSG7     DC    CL32'   .  .  .    MONITORING STARTED'
MSG8     DC    CL32' NO MONITORS SELECTED'
MSG9     DC    CL32'   .  .  .    MONITORING ENDED'
UNITS    DC    CL8'(MILLI)'
         DC    CL8'(SECS)'
         DC    CL8'(MINS)'
MEMBER   DC    C'PROG='                                           CW004
ANY      DC    X'00'
PATTERN  DC    X'402020202020202120'
*
**  LITERAL CONSTANTS
*
         LTORG
         END
