         TITLE 'FNDVAL,FNDTXT,FNDPRS - OBTAIN KEYWORDS FROM A BUFFER'
*                            ARGUMENTS
**  BUFFER LENGTH, BUFFER, KEY LENGTH, KEY, FOUND FLAG, VALUE
*
**  THE ORIGINAL VERSION OF THIS ROUTINE OMITTED THE FIRST TWO
**   ARGUMENTS AND COULD SEARCH ONLY THE PARM FIELD.  THE ENTRY
**   POINTS WERE ZA06AS (FNDVAL) AND ZA06CS (FNDPRS).
**   SOME COMMENTS IN THIS ROUTINE REFER TO THESE ENTRY POINTS
**   OR REFER TO THE THIRD ARGUMENT AS FIRST, ETC.
*
* MODIFICATION CW007 80/07/31 ADDS ENTRY POINT FNDHEX             CW007
* MODIFICATION CW017 80/12/08 SUPPORTS SPECIAL CASE 'JOB=*THIS'   CW017
*
FNDVAL   CSECT
         BC    15,12(15)     BRANCH AROUND IDENTIFIER
         DC    X'06'
         DC    CL7'FNDVAL'
         MVI   FLAG-FNDVAL(15),X'00'   NUMERIC FIELD
         B     MENTRY-FNDVAL(15)
*
*         THIS WILL RETURN THE INTEGER VALUE OF ENTRIES IN THE
*      PARMLIST OF THE FORM ....,KEYWORD=VALUE,.... N AND KEY ARE
*      SET BY THE USER. KEY WILL CONTAIN THE KEYWORD ( INCLUDING
*      THE '=' SIGN ) AND N WILL GIVE THE NUMBER OF CHARACTERS
*      IN KEY.
*         THE ROUTINE WILL RETURN IN M THE NUMBER OF DIGITS IN
*      THE VALUE ( NOT INCLUDING THE SIGN ) AND IF M > 0 THE
*      BINARY VALUE IN VALUE.
*
         ENTRY FNDTXT
FNDTXT   EQU   *
         BC    15,12(15)
         DC    X'06',CL7'FNDTXT'
         MVI   FLAG-FNDTXT(15),X'01'   TEXT
         B     MENTRY-FNDTXT(15)
*
*         THIS WILL RETURN THE TEXT VALUE OF ENTRIES
*      OF THE FORM ....,KEYWORD=TEXT,....
*
         ENTRY FNDPRS
FNDPRS   BC    15,12(15)
         DC    X'06'
         DC    CL7'FNDPRS'
         MVI   FLAG-FNDPRS(15),X'02'   KEYWORD
         B     MENTRY-FNDPRS(15)                         GO MERGE CW007
*
*         THIS WILL INDICATE THE PRESENCE OF AN ENTRY OF THE FORM
*      ....,KEYWORD,.... N AND KEY ARE AS ZA06AS EXCEPT THAT
*      IN GENERAL KEY WILL CONTAIN NO '=' CHARACTER. IF THE
*      KEYWORD IN KEY IS FOUND IN THE PARMLIST THE 3RD ARGUMENT
*      L IS SET TO 1 (.TRUE.) AND IF IT IS NOT FOUND IT IS SET TO
*      ZERO (.FALSE.).
*
         ENTRY FNDHEX                                             CW007
FNDHEX   B     12(15)                SKIP OVER ENTRY POINT LABEL  CW007
         DC    X'06',CL7'FNDHEX'     LABEL THE ENTRY POINT        CW007
         MVI   FLAG-FNDHEX(15),X'03' INDICATE ROUTINE ENTERED     CW007
         B     MENTRY-FNDHEX(15)     BRANCH TO COMMON CODE        CW007
*                                                                 CW007
*         THIS IS THE SAME AS FNDVAL EXCEPT THE PARAMETER VALUE   CW007
*      IS EXPECTED IN HEXADECIMAL.  THE RESULTING VALUE IS A      CW007
*      FULL WORD, PADDED WITH ZEROES ON THE LEFT.                 CW007
*                                                                 CW007
MENTRY   STM   14,7,12(13)        SAVE REGISTERS
         LM    3,6,8(1)                PICK UP ARGUMENTS
         BALR  R7,0               ESTABLISH .....
         USING *,R7               ..... BASE REGISTER
         SR    R0,0               PICK UP LENGTH ......
         IC    R0,3(R3)           .... OF KEYWORD
         LTR   R3,R0              TEST FOR ......
         BNZ   BR8                .... ZERO LENGTH
         LR    R2,R3              EXIT .....
         B     BR5                .... IF ZERO
*
*      INITIALIZE AND SET UP FOR SEARCH.
*
BR8      EQU   *
         LM    R1,R2,0(1)              LOAD PARAM ADDRESSES
         L     R0,0(R1)                LOAD BUFFER LENGTH
         LA    R1,0(R2)                LOAD BUFFER ADDRESS
*
**  LOOK FOR LAST NON-BLANK CHARACTER IN BUFFER
*
         LR    R2,R1                   LOAD ADDRESS OF BUFFER
         AR    R2,R0                   ADD BUFFER LENGTH
         BCTR  R2,R0                   REDUCE BY ONE
NEXT     EQU   *
         CLI   0(R2),C' '              BLANK?
         BNE   LSTBLNK                 NO,STOP
         BCTR  R2,0                    REDUCE ADDRESS BY ONE
         BCT   R0,NEXT                 REDUCE BUFFER LENGTH
LSTBLNK  EQU   *
         SR    R2,2
         MVI   FLAG2,X'00'        PUT FOUND FLAG OFF
         BCTR  R3,0               MODIFY .......
         STC   R3,KEYTEST+1       .... COMPARE INSTRUCTION .....
         STC   R3,INCR+3          ... AND INCREMENT INSTRUCTION
         LA    R3,1(3)            RESTORE TO PROPER VALUE
         AR    R0,R1              POINT AT END OF PARMLIST
         BCTR  R1,0               REDUCE TO ENTER LOOP
         B     KEYTEST            GO AND TEST FOR KEYWORD
*
*      KEYWORD SEARCH
*
COMMA    CLI   FLAG2,X'00'        HAS KEYWORD BEEN FOUND ?
         BNE   ENDSRCH            YES: GO AND FINISH OFF
KEYTEST  CLC   0(0,R4),1(R1)      IS IT THE KEYWORD ?
         BNE   NXTCOMA            NO: GO AND LOOK FOR NEXT COMMA
         LA    R1,1(1)            YES: POINT AT KEYWORD
         ST    R1,KEYWORD         SAVE POINTER TO KEYWORD
         MVI   FLAG2,X'FF'        MARK AS FOUND
INCR     LA    R1,0(1)            MOVE POINTER TO END OF KEYWORD
         B     NXTCOMA            GO AND LOOK FOR NEXT COMMA
COMATEST CLI   0(R1),C','         IS IT A COMMA ?
         BE    COMMA              YES: BRANCH THEN
NXTCOMA  LA    R1,1(1)            UPDATE PARMLIST POINTER
         CR    R1,R0              LOOP TILL .....
         BL    COMATEST           ..... END OF PARMLIST
         CLI   FLAG2,X'00'        HAS KEYWORD BEEN FOUND ?
         BE    BR5                NO: FINISH THEN
*
*      END OF SEARCH
*
ENDSRCH  S     R1,KEYWORD         LENGTH OF KEYWORD FIELD
         SR    R1,R3              LENGTH OF KEYWORD VALUE
         CLI   FLAG,X'02'         DID WE COME .....
         BNE   BR1                .... IN AT ZA06CS ?
         LTR   R1,1               YES: ARE THE LENGTHS .....
         BZ    BR7                .... THE SAME ?
         MVI   FLAG2,X'00'        NO: SET NOT FOUND
         L     R1,KEYWORD         PICK UP POSITION IN PARMLIST ....
         B     INCR               ... AND GO AND HAVE ANOTHER TRY
BR7      LA    R2,1               SET THIRD ARGUMENT TRUE
BR5      ST    R2,0(R5)           SET THIRD ARGUMENT
         B     FINISH
BR1      LTR   R2,R1
         BZ    BR5
         L     R14,KEYWORD        POINT AT ....
         LA    R14,0(14,R3)       .... VALUE FIELD
         CLI   FLAG,X'01'         DID WE COME IN .....            CW007
         BE    BR6                .... AT FNDTXT ?                CW007
         CLI   FLAG,X'03'         DID WE COME IN .....            CW007
         BE    HEX                .... AT FNDHEX ?                CW007
         BCTR  R1,0               NO: ONE OFF FOR PACK
         CLI   0(R14),C'-'        IS THE NUMBER .....
         BNE   BR2                .... NEGATIVE
         LA    R14,1(14)          YES: MOVE POINTER UP ONE
         BCTR  R1,0               REDUCE LENGTH AGAIN
         EX    R1,PACK            PACK AND CONVERT ......
         CVB   R4,BUF             .... VALUE TO BINARY
         LNR   R4,4               MAKE VALUE NEGATIVE
         B     BR3
BR2      EX    R1,PACK            PACK AND CONVERT .....
         CVB   R4,BUF             .... VALUE TO BINARY
BR3      ST    R4,0(R6)           SET FOURTH ARGUMENT
         LA    R2,1(R1)           NO. OF DIGITS
         B     BR5                GO AND FINISH OFF
HEX      EQU   *                                                  CW007
         LR    R2,R1              SAVE NUMBER OF DIGITS           CW007
         SR    R4,4               CLEAR RESULT REGISTER           CW007
HEXSHIFT SLL   R4,4               SHIFT LEFT HALF A BYTE          CW007
         IC    R0,0(R14)          PICK UP NEXT HEX DIGIT          CW007
         CLI   0(R14),C'0'        IS IT A NUMERIC DIGIT?          CW007
         BNL   DIGIT              SKIP ADJUSTMENT IF NOT          CW007
         AH    R0,NINE            CORRECT THE VALUE               CW007
DIGIT    N     R0,FIFTEEN         GET RID OF ZONE & GARBAGE       CW007
         AR    R4,R0              ACCUMULATE THE VALUE            CW007
         LA    R14,1(14)          ADVANCE INPUT POINTER           CW007
         BCT   R1,HEXSHIFT        CONTINUE FOR NEXT HEX DIGIT     CW007
         ST    R4,0(R6)           SET FOURTH (SIXTH) ARGUMENT     CW007
         B     BR5                JOIN COMMON EXIT CODE           CW007
*
BR6      EQU   *                                                  CW017
         CLC   JOB,0(R4)          CHECK FOR KEYWORD 'JOB='        CW017
         BNE   MOVETXT            IF NOT, JUST RETURN VALUE       CW017
         CLC   THIS,0(R14)        IS IT 'JOB=*THIS' ?             CW017
         BNE   MOVETXT            IF NOT, RETURN STRING AS FOUND  CW017
         L     R4,16              LOAD ADDRESS OF CVT             CW017
         L     R4,0(4)            LOAD ADDRESS OF TCB/ASCB WORDS  CW017
         L     R4,12(4)           LOAD ADDRESS OF CURRENT ASCB    CW017
         L     R14,172(R4)        LOAD ASCBJBNI                   CW017
         LTR   R14,14             IS THIS AN INITIATED JOB?       CW017
         BNZ   *+8                GOT POINTER TO VALID NAME IF SO CW017
         L     R14,176(R4)        ELSE LOAD ASCBJBNS              CW017
         LA    R1,8               FORCE TEXT LENGTH TO 8          CW017
MOVETXT  EQU   *                                                  CW017
         LR    R2,R1              LENGTH OF TEXT
         BCTR  R1,0               ONE OFF FOR MOVE
         EX    R1,MOVE
         ST    R2,0(R5)           SET THIRD ARGUMENT
*
*      RETURN TO CALLER
*
FINISH   LM    14,7,12(13)        RESTORE REGISTERS
         MVI   12(13),X'FF'       SET TRACE RETURN
         BR    14
*
*      WORK AREA.
*
JOB      DC    C'JOB='                                            CW017
THIS     DC    C'*THIS'                                           CW017
NINE     DC    H'9'               CONVERT X'C1' TO X'FA' ETC.     CW007
BUF      DC    D'0'               CVB WORKSPACE
KEYWORD  DC    A(0)               ADDRESS OF KEY WORD IN PARMLIST
PACK     PACK  BUF(8),0(0,14)
MOVE     MVC   0(0,6),0(14)
FIFTEEN  DC    F'15'              MASK TO GET ONE HEX DIGIT       CW007
FLAG     DC    X'00'              ENTRY INDICATOR
FLAG2    DC    X'00'              KEYWORD FOUND INDICATOR
HZERO    DC    H'0'
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R14      EQU   14
R15      EQU   15
         END
