         TITLE 'MONRUN - RUN SELECTED MONITORS'
MONRUN   CSECT
* MODIFICATION CW002 19/07/80 PERMITS P APEMAN                    CW002
* MODIFICATION CW003 16/07/80 ISSUES WTO & SNAP ON MONITOR ABEND  CW003
* MODIFICATION CW005 23/07/80 F APEMAN TO DO THE FOLLOWING        CW005
*                             MON.=0 TO STOP A PARTICULAR MONITOR CW005
*                             MON.X=N TO RESTART MONITOR .        CW005
*                               CALLED EVERY N BASIC INTERVALS    CW005
*                               USING PARMLIB MEMBER MON.X        CW005
* MODIFICATION CW006 17/07/80 USES ENQ TO AVOID MULTIPLE MONITORS CW006
* MODIFICATION CW008 15/08/80 CALLS SUBROUTINE FOR TIME SERVICES  CW008
         B     ENTRY-MONRUN(,15)
         DC    X'06',CL7'MONRUN'
ENTRY    EQU   *
         ENTRY MONAD
         ENTRY OC4
*
**  ROUTINE RUNS REQUIRED MONITORS
**  LINKAGE IS MONRUN(MINT,INTVAL,MAXTIM)
**  MINT - ARRAY CONTAINING CALLING FREQUENCIES
**  INTVAL - MONITORING INTERVAL IN MICROSECONDS
**  MAXTIM - MAXIMUM MONITORING TIME IN HUNDREDTHS OF A SECOND
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW7      EQU   7
RW8      EQU   8
RW9      EQU   9
RW10     EQU   10
RW11     EQU   11
RW12     EQU   12
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2                   ESTABLISH ADDRESSABILITY
BASE     EQU   *
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
         LM    RW3,RW5,0(1)            LOAD PARAM ADDRESSES
         ST    RW3,ADMINT              STORE ADDRESS OF FREQUENCIES
         MVC   INTVAL(4),0(RW4)        MOVE INTERVAL
         MVC   MAXTIM(4),0(RW5)        MONITORING PERIOD
*                                                                 CW002
**  LOCATE STOP/MODIFY ECB AND CIB POINTER                        CW002
*                                                                 CW002
         EXTRACT CSLIST,FIELDS=(COMM)  LOCATE FIELDS IN CSCB      CW002
         L     RW1,CSLIST              LOAD ADDRESS OF CSCB FLDS  CW002
         L     RW0,0(,RW1)             ADDR OF STOP/MODIFY ECB    CW002
         ST    RW0,ECBLST              STORE FOR LATER WAITS      CW002
         LA    RW8,4(RW1)              ADDRESS OF CIB POINTER     CW005
         L     RW9,0(,RW8)             ADDRESS OF POSIBLE CIB     CW005
         LTR   RW9,RW9                 IS START CIB PRESENT?      CW005
         BZ    SETCSCB                 IF NOT, NEEDN'T DELETE IT  CW005
         QEDIT ORIGIN=(RW8),BLOCK=(RW9) DELETE CIB FROM START CMD CW005
SETCSCB  QEDIT ORIGIN=(RW8),CIBCTR=1   PROVIDE FOR MODIFY         CW005
*
**  SET UP SPIE FOR ABENDS
*
         BAL   RW8,DOSPIE              CATCH PROGRAM INTERRUPTS
         MVI   FLG3,X'FF'               ***** SET FLAG 3 *****
*
**  OBTAIN START TIME IN HUNDREDTHS OF A SECOND
*
         TIME  BIN                     OBTAIN TIME
         ST    RW0,BEGTIM              STORE START TIME
*
**  CALL ACTIVE MONITORS
*
*
**  REGISTER USAGE -
**  RW3 - COUNTER OF NO OF CALLS
**  RW4 - COUNTER OF NO OF MONITORS
**  RW5 - ADDRESS OF FREQUENCIES
**  RW6 - POINTER FOR MONITOR ADDRESS
**  RW7 - POINTER FOR ABEND COUNTER
*
         SR    RW3,RW3                 SET TO ZERO FOR START
MONITOR  EQU   *
         LA    RW4,26                  NO OF MONITORS
         L     RW5,ADMINT              POINTER TO FREQUENCIES
         SR    RW6,RW6                 SET INDEX TO ZERO
         LA    RW7,ABCNT               POINTER TO COUNTERS
*                                                                 CW008
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  MIC,START                                          CW008
*                                                                 CW008
         MVI   TIMECODE,3              INDICATE MIC OPTION        CW008
         LA    RW1,START               LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
AGAIN    EQU   *
         L     RW10,0(RW5)             LOAD FREQUENCY
         LTR   RW10,RW10               LOADED?
         BZ    NXTMON                  NO,IGNORE
         TM    FIRST,X'FF'             FIRST?
         BZ    THIS                    YES THEN WANTED
         SR    RW8,RW8
         LR    RW9,RW3                 TRANSFER COUNTS
         DR    RW8,RW10
         LTR   RW8,RW8                 REMAINDER?
         BNZ   NXTMON                  YES,NOT WANTED
THIS     EQU   *
*
**  CALL MONITOR
*
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  DEC                                                CW008
*        ST    RW0,TIME                                           CW008
*                                                                 CW008
         MVI   TIMECODE,2              INDICATE DEC OPTION        CW008
         LA    RW1,TIME                LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
         LA    RW1,ADARGS              POINT AT ARGUMENTS
         L     RW15,MONAD(RW6)         PICK UP MONITOR ADDRESS
         BALR  14,15                   LINK TO MONITOR
*
**  CALL ENDPDS AFTER FIRST TIME TO RESET MEMBERNAME
*
         LA    RW1,MONAD(RW6)          HI BYTE OF MON ADDR IS FLG CW005
         CLI   0(RW1),0                RESTART WITH NEW PARAMS?   CW005
         BNE   *+12                    CLOSE PARMLIB MEMBER IF SO CW005
         TM    FIRST,X'FF'             FIRST TIME?
         BNZ   NXTMON                  NO,BRANCH
         L     RW15,=V(ENDPDS)
         BALR  14,15                   LINK TO ROUTINE
         SR    14,14                   REMOVE NEW PARAMETER ID    CW005
         STC   14,MONAD(RW6)             FROM HI BYTE OF MON ADDR CW005
*
**  INCREMENT FOR NEXT MONITOR
*
NXTMON   EQU   *
         LA    RW5,4(RW5)              NEXT FREQUENCY
         LA    RW6,4(RW6)              NEXT ADDRESS
         LA    RW7,2(RW7)              NEXT ABEND COUNTER
         BCT   RW4,AGAIN
*
**  MONITOR CYCLE ENDED
*
         LA    RW3,1(RW3)              INCREMENT COUNTER
         MVI   FIRST,X'FF'             SET FLAG
*                                                                 CW008
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  MIC,END                                            CW008
*                                                                 CW008
         MVI   TIMECODE,3              INDICATE MIC OPTION        CW008
         LA    RW1,END                 LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
***                                    END OF MACRO REPLACEMENT   CW008
         LM    RW0,RW1,END             LOAD END TIME
         SRDL  RW0,12                  SHIFT DOWN
         LR    RW4,RW1                 LOAD BOTTOM HALF
         LM    RW0,RW1,START           LOAD START TIME
         SRDL  RW0,12                  SHIFT DOWN
         SR    RW1,RW4                 SUBTRACT END FROM START
         A     RW1,INTVAL              ADD CALLING INTERVAL
         LTR   RW1,RW1                 TEST WAIT TIME > 0
         BM    NOWAIT                  NO,BRANCH
         SR    RW0,RW0                 ZERO TOP HALF
         SLDL  RW0,12                  SHIFT UP
         STM   RW0,RW1,WAIT            STORE WAIT INTERVAL
*                                                                 CW002
**  THE FOLLOWING CODE WAITS ON AN STIMER AND ALSO ON THE STOP/   CW002
**   MODIFY ECB.  AS A SIDE BENEFIT, IT AVOIDS LONG WAIT SWAPS    CW002
**    AND PLAYS YE OLDE 'BEAT THE DETECTED WAIT' GAME IF APEMAN   CW002
**     RUNS SWAPPABLE.  FOR THIS YOU MUST MAKE THE TIME INTERVAL  CW002
**      SHORT ENOUGH (E.G. 1 SECOND ON A 3033).                   CW002
*                                                                 CW002
         STIMER REAL,TIMEXIT,MICVL=WAIT  SET UP TIME INTERVAL     CW002
         WAIT  ECB=TIMECB,LONG=NO      WAIT ON STIMER AND P/F ECB CW002
         L     RW1,ECBLST              LOAD ADDR OF P/F ECB       CW002
         TM    0(RW1),X'40'            WAS IT POSTED?             CW002
         BZ    WAITED                  IF NOT, MUST BE TIMER      CW002
*                                      QEDIT WILL CLEAR P/F ECB   CW002
TESTCSCB L     RW8,CSLIST              LOAD PTR TO CSCB FIELDS    CW002
         L     RW9,4(,RW8)             LOAD ADDR OF (FIRST) CIB   CW002
         LA    RW8,4(,RW8)             LOAD ADDR OF CIB POINTER   CW002
         LTR   RW9,RW9                 IS THERE ANY CIB?          CW002
         BZ    WAITED                  DONE, ASSUME TIMER INT     CW002
         USING CIBNEXT,RW9             ADDRESSABILITY FOR CIB     CW002
         CLI   CIBVERB,CIBSTOP         HAVE WE BEEN STOPPED?      CW002
         BNE   MODIFY                  IF NOT, TRY MODIFY         CW002
         MVI   TESTEND+1,0             FAKE RUN TIME EXPIRATION   CW002
         B     QEDIT                   AND GET RID OF THE CIB     CW002
MODIFY   CLI   CIBVERB,CIBMODFY        IS THIS A MODIFY COMMAND?  CW005
         BNE   QEDIT                   IGNORE START, OR WHAT???   CW005
         CLC   CIBDATA(3),MONNAME      CHECK FOR F APEMAN,MON.... CW005
         BNE   QEDIT                   IGNORE MODIFY IF NOT       CW005
         MVC   MONCLI+1(1),CIBDATA+3   SETUP COMPARE FOR NEXT CHR CW005
         LA    RW6,26                                             CW005
         LA    RW1,ALPHABET+25         START AT END OF ALPHABET   CW005
MONCLI   CLI   0(RW1),*-*              CHECK COMMAND FOR LETTER   CW005
         BE    GOTMON                  BRANCH IF FOUND            CW005
         BCTR  RW1,0                   ELSE BACK UP ONE LETTER    CW005
         BCT   RW6,MONCLI              AND GO SEARCH THE ALPHABET CW005
         B     QEDIT                   IGNORE INVALID MODIFY      CW005
GOTMON   MVC   MONID(1),CIBDATA+3      COMPLETE MONITOR NAME      CW005
         LH    RW1,CIBDATLN            LOAD COMMAND DATA LENGTH   CW005
         LA    RW1,CIBDATA(RW1)        POINT TO END OF COMMAND    CW005
         BCTR  RW6,0                   FOR ZERO ORIGIN INDEXING   CW005
         SLL   RW6,2                   INDEX TO MONITOR TABLES    CW005
         LA    RW7,C' '                END OF PARM MEMBER NAME    CW005
         L     RW5,ADMINT              POINT TO FREQUENCY TABLE   CW005
         LA    RW10,10                 DEFAULT FREQUENCY          CW005
         LA    RW4,CIBDATA+4                                      CW005
CMDSCAN  CR    RW4,RW1                 REACHED END OF COMMAND?    CW005
         BNL   STARTIT                 IF SO, GO START MONITOR    CW005
         CLI   0(RW4),C'='             CHECK FOR EQUAL SIGN       CW005
         LA    RW4,1(RW4)              NEXT BYTE OF COMMAND       CW005
         BE    GETINT                  IF EQUAL, GO GET INTERVAL  CW005
         IC    RW7,0(RW4)              GET MEMBER NAME APPENDAGE  CW005
         B     CMDSCAN                                            CW005
TEN      DC    H'10'                                              CW005
GETINT   SR    RW10,RW10               BEGIN FORMING NUMBER       CW005
         SR    RW1,RW4                 LENGTH OF NUMBER           CW005
         BNP   STOPIT                  TREAT MON.= LIKE MON.=0    CW005
GETNUM   MH    RW10,TEN                                           CW005
         IC    RW0,0(RW4)              GET NEXT BYTE OF NUMBER    CW005
         N     RW0,=F'15'              GET RID OF ZONE BIT        CW005
         AR    RW10,RW0                                           CW005
         LA    RW4,1(RW4)              ADVANCE TO NEXT BYTE       CW005
         BCT   RW1,GETNUM              CONTINUE FORMING NUMBER    CW005
         LTR   RW10,RW10               CHECK FOR MON.=0           CW005
         BZ    STOPIT                  GO STOP THE MONITOR        CW005
STARTIT  EQU   *                                                  CW005
         SR    0,0                     NEED ZERO FOR COMPARE      CW005
         C     0,0(RW6,RW5)            WAS MONITOR STOPPED?       CW005
         BNE   STARTED                 ALREADY STARTED, REJECT    CW005
         ENQ   (APEMAN,MONNAME,E,4,SYSTEM),RET=USE                CW005
         LTR   15,15                   ANOTHER MONITOR RUNNING?   CW005
         BZ    LOADMON                 NO, START IT UP            CW005
         MVC   ENQFAIL+8(4),MONNAME    MONITOR NAME TO MESSAGE    CW005
ENQFAIL  WTO   'MON. FAILED ON ENQ',ROUTCDE=(2,11) TELL OPERATOR  CW005
         B     QEDIT                   AND QUIT ON THIS CIB       CW005
STARTED  MVC   STARFAIL+8(4),MONNAME   MONITOR NAME TO MESSAGE    CW005
STARFAIL WTO   'MON. ALREADY STARTED',ROUTCDE=(2,11) TELL OPER    CW005
         B     QEDIT                   AND QUIT ON THIS CIB       CW005
LOADMON  LOAD  EPLOC=MONNAME           LOAD FRESH COPY OF MONITOR CW005
         ST    RW0,MONAD(RW6)          SAVE ADDRESS OF MONITOR    CW005
         STC   RW7,MONAD(RW6)          INDICATE PARAM MEMBER      CW005
         ST    RW10,0(RW6,RW5)         STORE CALLING INTERVAL     CW005
         MVC   INFOWTO+15(3),=C'ART'   INDICATE MONITOR STARTED   CW005
         B     INFORM                    AND PUT OUT A MESSAGE    CW005
STOPIT   EQU   *                                                  CW005
         C     RW10,0(RW6,RW5)         FREQUENCY ALREADY ZERO?    CW005
         BE    QEDIT                   ALREADY STOPPED, DO NOTHIN CW005
         DEQ   (APEMAN,MONNAME,4,SYSTEM)  PERMIT ANOTHER MONITOR  CW005
         ST    RW10,MONAD(RW6)         CLEAR MONITOR ADDRESS      CW005
         ST    RW10,0(RW6,RW5)         SET FREQUENCY TO ZERO      CW005
         OC    MONAD(104),MONAD        ANY MONITOR STILL RUNNING? CW005
         BZ    STOP                    STOP APEMAN IF NOT         CW005
         DELETE EPLOC=MONNAME          DELETE OLD MONITOR CODE    CW005
         MVC   INFOWTO+15(3),=C'OPP'   INDICATE MONITOR STOPPED   CW005
INFORM   MVC   INFOWTO+8(4),MONNAME    MOVE IN MONITOR NAME       CW005
INFOWTO  WTO   'MON. ST...ED',ROUTCDE=(2,11)  MAKE OPER FEEL SAFE CW005
*                                                                 CW002
**  RELEASE THE COMMAND INPUT BUFFER                              CW002
*                                                                 CW002
QEDIT    QEDIT ORIGIN=(RW8),BLOCK=(RW9)  DELETE HANDLED CIB       CW002
         B     TESTCSCB                SEE IF ANOTHER CIB EXISTS  CW002
WAITED   XC    TIMECB,TIMECB           CLEAR ECB FOR REUSE        CW002
NOWAIT   EQU   *
*
**  FIND IF MONITORING PERIOD IS OVER
*
** TO ALLOW FOR RECODING THE TIME FUNCTION, REPLACE THE FOLLOWING CW008
** TIME MACRO WITH A SUBROUTINE CALL                              CW008
*                                                                 CW008
*        TIME  BIN                     OBTAIN TIME                CW008
*                                                                 CW008
         MVI   TIMECODE,1              INDICATE BIN OPTION        CW008
         LA    RW1,TIME                LOAD TARGET ADDRESS        CW008
         ST    RW1,TIMETARG            STORE IN ARGUMENT LIST     CW008
         LA    RW1,TIMEARGS            LOAD ARGUMENT LIST POINTER CW008
         L     RW15,=V(TIMER)          LOAD SUBROUTINE ADDRESS    CW008
         BALR  14,15                   CALL TIME ROUTINE          CW008
         L     RW0,TIME                LOAD TIME BACK INTO REG 0  CW008
***                                    END OF MACRO REPLACEMENT   CW008
         S     RW0,BEGTIM              SUBTRACT START TIME
         C     RW0,MAXTIM              COMPARE WITH MONITOR PERIOD
TESTEND  BL    MONITOR                 GO BACK FOR MORE
STOP     LA    RW1,ADARGS2             POINT AT PARAM LIST FOR MONRT
         L     RW15,ADMONRT            MONRT
         BALR  14,15                   LINK TO MONRT
         L     14,=V(MONEND)
         BR    14                      BRANCH TO END
*                                                                 CW002
**  EXIT TO POST STIMER ECB FOR WAIT INTERVAL                     CW002
*                                                                 CW002
TIMEXIT  EQU   *                                                  CW002
         USING TIMEXIT,15              TEMPORARY ADDRESSABILITY   CW002
         STM   14,12,12(13)            SYSTEM PROVIDED SAVE AREA  CW002
         POST  TIMECB                  JUST POST OUR ECB          CW002
         LM    14,12,12(13)            RESTORE THE REGISTERS      CW002
         BR    14                      EXIT RETURNS TO SYSTEM     CW002
         DROP  15                      END OF STIMER WAIT CODE    CW002
*
**  SPIE EXIT
*
OC4      EQU   *
         USING OC4,RW15                TEMP ADDRESSABILITY        CW003
         ST    RW1,ADPIE               SAVE ADDRESS OF ACTUAL PIE CW003
         MVC   MYPIE,0(RW1)            COPY THE PIE               CW003
         STM   3,13,STASH              SAVE REGS AT TIME OF ERROR CW003
         MVC   8(4,RW1),ADRETRY        SET UP RETRY ADDRESS
         MVI   FLG1,X'FF'              ***** SET FLAG 1 *****     CW003
         DROP  RW15                                               CW003
         BR    14
ADRETRY  DC    A(RETRY)
*
**  EXIT FROM SPIE EXIT
*
RETRY    EQU   *
         BALR  RW3,0                   ESTABLISH TEMP ADDRESSABILITY
         USING *,RW3
         L     RB2,ADBASE
         B     EOD1
ADBASE   DC    A(BASE)
EOD1     EQU   *
         DROP  RW3
         MVI   FLG2,X'FF'              ***** SET FLAG 2 *****
         LA    13,SAVE                  RECHAIN SAVE AREAS
         LM    3,7,32(13)              RELOAD REGISTERS           CW003
         LR    RW1,RW6                 COPY R6 (MONITOR NUMBER)   CW003
         SRL   RW1,2                   ONE BYTE INDEXING          CW003
         IC    RW0,ALPHABET(RW1)       LETTER OF CURRENT MONITOR  CW003
         STC   RW0,MONID               STORE IN MONITOR NAME      CW003
         STC   RW0,ABMSG+24            STORE IN WTO MESSAGE       CW003
         IC    RW1,MYPIE+7             CONVERT LOW PART OF        CW003
         IC    RW0,HEX(RW1)             INTERRUPT CODE TO HEX     CW003
         STC   RW0,ABCODE              PLACE AFTER '0C' IN MSG    CW003
         LH    RW8,0(RW7)              LOAD ABEND COUNTER
         LTR   RW8,RW8                 TEST FOR SNAP REQUESTED    CW003
         BM    DOSNAP                  BRANCH IF SO - 1 TIME ONLY CW003
         BCT   RW8,ABOK                REDUCE
         B     TERMMON                 ABEND COUNT USED UP, KILL  CW003
DOSNAP   TM    FLG4,1                  IS SNAP DCB OPEN YET?      CW003
         BO    SNOPENED                IF SO, DON'T DO IT AGAIN   CW003
         OPEN  (SNAPDCB,(OUTPUT))      OPEN DCB FOR SNAP          CW003
         OI    FLG4,1                  INDICATE OPEN DCB          CW003
SNOPENED SNAP  DCB=SNAPDCB,SDATA=(NUC,LSQA,CB),                   CW003*
               PDATA=(SA,ALLPA,SPLS)                              CW003
*SNOPENED SNAP DCB=SNAPDCB,SDATA=(LSQA,CB),                       CW003*
*              PDATA=(SA,ALLPA,SPLS)                              CW003
TERMMON  SR    RW8,RW8                 TURN OFF FAILED MONITOR    CW003
         ST    RW8,0(RW5)              ZERO FREQUENCY
         ST    RW8,MONAD(RW6)          CLEAR MONITOR ADDRESS      CW003
         OC    MONAD(104),MONAD        ANY MONITOR STILL RUNNING? CW003
         BZ    STOP                    STOP APEMAN IF NOT         CW003
         DELETE EPLOC=MONNAME          DELETE BAD MODULE          CW003
         DEQ   (APEMAN,MONNAME,4,SYSTEM)  DEQ FAILED MONITOR      CW003
*                                                                 CW003
ABMSG    WTO   'ABEND 0C. IN MON. - MONITOR TERMINATED',          CW003*
               ROUTCDE=(2,11)          ISSUE ERROR MESSAGE        CW003
ABCODE   EQU   ABMSG+16                                           CW003
ABOK     EQU   *                                                  CW003
         STH   RW8,0(RW7)              RESTORE ABEND COUNTER      CW003
         LA    RW8,NXTMON              LOAD RETRY ADDRESS         CW003
DOSPIE   SPIE  OC4,((1,15))            HANDLE ANY PGM INTERRUPT   CW003
*                                      THE ABOVE ALLOWS THEM ALL  CW003
* NOW MASK OFF THE SILLY SIGNIFICANCE INTERRUPT                   CW003
*                                                                 CW003
         IC    RW1,PGMMASK             LOAD DESIRED PROGRAM MASK  CW003
         SLL   RW1,24                  SET UP FOR SPM             CW003
         SPM   RW1                     STOP UNWANTED INTERRUPTS   CW003
         BR    RW8                     RETURN TO INLINE CODE      CW003
HEX      DC    C'0123456789'                                      CW003
ALPHABET DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'                      CW003
*
**  SAVE AREAS AND STORAGE
*
FIXOFLOW EQU   8                                                  CW003
DECOFLOW EQU   4                                                  CW003
EXPUFLOW EQU   2                                                  CW003
SIGNIFEX EQU   1                       MASK OFF SIGNIFICANCE      CW003
PGMMASK  DC    AL1(FIXOFLOW+DECOFLOW+EXPUFLOW)                    CW003
FLG4     DC    X'00'                   ADDITIONAL FLAGS           CW003
ADPIE    DS    F                       ADDR OF PGM INTERRUPT ELT  CW003
MYPIE    DS    CL32                    COPY THE PIE HERE FOR DUMP CW003
STASH    DS    11F                     SAVE REGS 3-13 FOR DUMP    CW003
SAVE     DS    18F
FIRST    DC    X'00'
FLG1     DC    X'00'
FLG2     DC    X'00'
FLG3     DC    X'00'
FLAG     DC    F'1'
ADARGS   DC    A(ADINPUT)
         DC    A(ADMONRT)
         DC    A(TIME)
         DC    A(ADFNDVAL)
         DC    A(ADFNDPRS)
         DC    A(ADFNDTXT)
ADINPUT  DC    V(INPUT)
ADMONRT  DC    V(MONRT)
ADFNDVAL DC    V(FNDVAL)
ADFNDPRS DC    V(FNDPRS)
ADFNDTXT DC    V(FNDTXT)
CSLIST   DC    A(0)                    ADDR OF PTR FIELDS IN CSCB CW002
TIMECB   DC    F'0'                    ECB FOR STIMER INTERVAL    CW002
ECBLST   DC    A(0)                    ADDRESS OF STOP/MODIFY ECB CW002
         DC    X'80',AL3(TIMECB)                                  CW002
*********************************** ABEND COUNTERS ************** CW003
*  ONE ABEND COUNTER IS PROVIDED FOR EACH MONITOR.  IT IS         CW003
*  INITIALIZED TO THE NUMBER OF PROGRAM INTERRUPTS WHICH WILL     CW003
*  BE TOLERATED BEFORE THE MONITOR IS SHUT DOWN.  A NEGATIVE      CW003
*  VALUE REQUESTS A SNAP DUMP IF A PROGRAM INTERRUPT OCCURS.      CW003
*  IN THIS CASE THE MONITOR IS SHUT DOWN AFTER ONE INTERRUPT      CW003
*  AND THE RESULTING SNAP DUMP.  ORIGINALLY APEMAN SPECIFIED      CW003
*  A LIMIT OF 10 INTERRUPTS FOR EACH MONITOR.                     CW003
***************************************************************** CW003
ABCNT    DC    26H'-1'          FORCE SNAP DUMP ON ANY PROG INT   CW003
TIME     DS    F
ADMINT   DS    F
INTVAL   DS    F
MAXTIM   DS    F
BEGTIM   DS    F
START    DS    D
END      DS    D
WAIT     DS    D
APEMAN   DC    CL8'APEMAN'                                        CW006
MONNAME  DC    CL8'MON'                                           CW003
MONID    EQU   MONNAME+3                                          CW003
TIMEARGS DC    A(TCODE)                ARGUMENT LIST FOR TIMER    CW008
         DC    A(DATEDMY)              DATE NOT CURRENTLY USED    CW008
TIMETARG DC    A(0)                    LOCATION TO STORE TIME     CW008
TCODE    DC    F'0'                    TYPE OF MACRO CALL         CW008
TIMECODE EQU   TCODE+3                 USE ONLY LOW ORDER BYTE    CW008
DATEDMY  DC    F'0'                    *** NOT CURRENTLY USED *** CW008
ADARGS2  DC    A(FLAG)
         DC    A(FLAG)
         DC    A(FLAG)
         DC    A(FLAG)
MONAD    DC    26F'0'
SNAPDCB  DCB   DDNAME=SNAPDD,DSORG=PS,RECFM=VBA,MACRF=(W),        CW003*
               LRECL=125,BLKSIZE=1632     FOR STANDARD DUMP       CW003
*              LRECL=209,BLKSIZE=2724     FOR DUMP CHARACTERS     CW003
*
**  LITERAL CONSTANTS
*
         LTORG
         TITLE 'MONRUN - COMMAND INPUT BUFFER DSECT'              CW005
CIB      DSECT                                                    CW005
         IEZCIB ,                                                 CW005
         END
