*PROCESS;
 LSPYSMO:
   PROC ( F, DX, NUMBER_OF_SAMPLES, NPTS_PER_FIT, NORDER,NPTS_PER_JUMP);
    % SKIP(001);
   /********************************************************************
   *                                                                   *
   *   THIS ROUTINE SMOOTHES THE INPUT FUNCTION F BY FITTING A LEAST   *
   *   SQUARES POLYNOMIAL THROUGH SUCCESSIVE SETS OF POINTS OF F AND   *
   *   RESAMPLES F AT THESE POINTS USING THE POLYNOMIALS FOUND.        *
   *                                                                   *
   *    INPUT PARAMETERS:                                              *
   *                                                                   *
   *         F(*)            THE FLOATING POINT ARRAY OF VALUES TO BE  *
   *                         SMOOTHED.                                 *
   *         DX              THE SAMPLE INTERVAL BETWEEN THE SAMPLES   *
   *                         IN F.                                     *
   *         NUMBER_OF_SAMPLES   THE NUMBER OF SAMPLES IN THE ARRAY F. *
   *         NPTS_PER_FIT    THE NUMBER OF SAMPLE POINTS TO BE USED    *
   *                         AT ONE TIME TO FIT F.                     *
   *         NORDER          THE ORDER OF THE POLYNOMIAL TO FIT F.     *
   *         NPTS_PER_JUMP   THE NUMER OF SAMPLE POINTS TO MOVE FORWARD*
   *                         FOR THE NEXT POLYNOMIAL FIT OF F.         *
   *                                                                   *
   *    OUTPUT:                                                        *
   *                                                                   *
   *         F(*)            THE SMOOTHED VALUES OF F ARE RETURNED     *
   *                         IN F.                                     *
   *    BY:                                                            *
   *         L. DAVID JONES                                            *
   *         SEPT. 1977                                                *
   ********************************************************************/
    % SKIP(001);
    DCL F(*) FLOAT BIN;
    DCL (A(*,*), B(*,*)) CONTROLLED FLOAT BIN;
    DCL X FLOAT BIN;
    DCL ( NUMBER_OF_SAMPLES, NPTS_PER_FIT, NORDER, NPTS_PER_JUMP,
       IPTS_PER_FIT, NTERMS, NUM1, NTERMSM2, IS
                                       ) FIXED BIN(31);
     DECLARE INDEX FIXED BIN;
    % SKIP(001);
     /*            FIT THE FIRST SERIES OF POINTS OF THE VECTOR
                   ARRAY F TO AN NTH ORDER CURVE (TWO EXCESS POINTS
                   ARE INCLUDED IN THIS FIT).
                                                                      */
    % SKIP(001);
    ALLOCATE A(NPTS_PER_FIT+2,NORDER+1), B(NPTS_PER_FIT+2,1);
       NUM1 = 1;
       IPTS_PER_FIT = NPTS_PER_FIT + 2;
       NTERMS = NORDER + 1;
       NTERMSM2 = NTERMS - 2;
       INDEX = 1;
       CALL  POINT_LSTSQRS_FITTER;
       DO I=1 TO 4;
         X = (I-1)*DX;
         DUM = B(1,1);
         DO J=2 TO NTERMS;
           DUM = DUM + B(J,1)*X**(J-1);
         END;
         F(I) = DUM;
       END;
       F2 = F(4);
    % SKIP(001);
     /*            GO THROUGH REST OF F FITTING NPTS_PER_FIT AT A TIME
                   TO AN NORDER(TH) ORDER CURVE UP TO JUST BEFORE LAST
                   SET OF POINTS.  THIS LAST SET OF POINTS IS HANDLED
                   AS A SPECIAL CASE SO THAT ONE DOESN'T RUN OFF THE
                   END OF THE VECTOR ARRAY F.
                                                                      */
    % SKIP(001);
       IPTS_PER_FIT = NPTS_PER_FIT;
       DO INDEX=3 TO NUMBER_OF_SAMPLES-NPTS_PER_FIT+1 BY NPTS_PER_JUMP;
         CALL SPLINE_LSTSQRS_FITTER;
         DO I=INDEX+2 TO INDEX + NPTS_PER_JUMP +1;
           X = (I-INDEX  )*DX;
           DUM = B(1,1);
           DO J=2 TO NTERMS;
             DUM = DUM + B(J,1)*X**(J-1);
           END;
           F(I) = DUM;
         END;
         F2 = DUM;
       END;
   I = IS;
    % SKIP(001);
     /*            LAST SET OF POINTS TREATED AS A SPECIAL CASE
                                                                      */
    % SKIP(001);
   IF INDEX - NPTS_PER_JUMP ^= NUMBER_OF_SAMPLES - NPTS_PER_FIT + 1
      THEN
      DO INDEX = NUMBER_OF_SAMPLES - NPTS_PER_FIT + 1;
         CALL SPLINE_LSTSQRS_FITTER;
         DO I = IS TO NUMBER_OF_SAMPLES;
            X = (I-IS)*DX;
            DUM = B(1,1);
            DO J = 2 TO NTERMS;
               DUM = DUM + B(J,1)*X**(J-1);
            END;
            F(I) = DUM;
         END;
      END;
      ELSE
         DO I=IS TO NUMBER_OF_SAMPLES;
           X = (I-IS) * DX;
           DUM = B(1,1);
           DO J=2 TO NTERMS;
             DUM = DUM + B(J,1)*X**(J-1);
           END;
           F(I) = DUM;
         END;
    % PAGE;
     POINT_LSTSQRS_FITTER: PROC;
    % SKIP(001);
       /****************************************************************
       *                                                               *
       *   THIS ROUTINE FITS A LEAST SQUARES POLYNOMIAL OF ORDER       *
       *   NORDER, THROUGH 'IPTS_PER_FIT' NUMBER OF POINTS.  IT THEN   *
       *   SAVES F, X, AND F' AT THE LAST TWO OF THOSE POINTS FOR      *
       *   SUBSEQUENT USE IN FITS USING THE PROC SPLINE_LSTSQRS_FITTER *
       *                                                               *
       ****************************************************************/
    % SKIP(001);
       DO I=1 TO IPTS_PER_FIT;
         X = (I-1)*DX;
         B(I,1) = F(I);
         A(I,1) = 1.E0;
         DO J=2 TO NTERMS;
           A(I,J) = X**(J-1);
         END;
       END;
       CALL  MLSQ ( A, B, IPTS_PER_FIT, NTERMS, NUM1 );
       XD1 = 2*DX;
       XD2 = 3*DX;
       F1 = F(3);
       F2S = F(4);
       FP1 = 0.0;
       FP2 = 0.0;
       DO J=2 TO NTERMS;
         FP1 = FP1 + (J-1)*B(J,1)*XD1**(J-2);
         FP2 = FP2 + (J-1)*B(J,1)*XD2**(J-2);
       END;
     END POINT_LSTSQRS_FITTER;
    % PAGE;
    SPLINE_LSTSQRS_FITTER: PROC;
    % SKIP(001);
       /****************************************************************
       *                                                               *
       *   THIS ROUTINE FITS A LEAST SQUARES POLYNOMIAL THROUGH        *
       *   'IPTS_PER_FIT' NUMBER OF POINTS PLUS A SLOPE CONDITION      *
       *   FROM THE LAST FIT AT THE FIRST OF THE CURRENT GROUP OF      *
       *   POINTS. IN ADDITION THE SLOPE AT THE SECOND SAMPLE          *
       *   POINT OF THE CURRENT GROUP IS FORCED TO BE THE SAME         *
       *   AS THE SLOPE AT THIS POINT CALCULATED USING THE FIT         *
       *   OBTAINED ON THE PREVIOUS GROUP OF POINTS.                   *
       *                                                               *
       ****************************************************************/
    % SKIP(001);
         /*        PUT IN CONDITIONS FOR SATISFYING POINT CONDITIONS
                                                                      */
    % SKIP(001);
       M = 0;
       DO I = INDEX TO INDEX - 1 + NPTS_PER_FIT;
         IF I = INDEX + 1 THEN GO TO PT_CDN_LP;
         M = M + 1;
         X = (I - INDEX)*DX;
         IF M=1
         THEN  B(M,1) = F1 - F2 + FP2*DX;
         ELSE  B(M,1) = F(I) - F2 - FP2*(X - DX);
          DO J = 1 TO NTERMS - 2;
            A(M,J) = J*DX**(J+1) - (J+1)*DX**J*X + X**(J+1);
          END;
   PT_CDN_LP:
       END;
    % SKIP(001);
         /*  NOW PUT IN LEAST SQUARES SLOPE CONDITION.
                                                                      */
    % SKIP(001);
       M = M + 1;
       B(M,1) = FP1 - FP2;
       DO J = 1 TO NTERMS - 2;
         A(M,J) = -(J+1)*DX**J;
       END;
       CALL MLSQ (A,B,IPTS_PER_FIT,NTERMSM2 ,NUM1);
    % SKIP(001);
         /*        RESHUFFLE B TO INCLUDE A1 WHICH HAS BEEN LEFT OUT
                   IN ORDER TO FORCE THE SLOPE CONDITION AT X = SECOND
                   SAMPLE POINT.
                                                                      */
    % SKIP(001);
       DUM0 = F2 - FP2*DX;
       DUM = FP2;
       DO J = 1 TO NTERMS - 2;
           B(J+2,1) = B(J,1);
         DUM0 = DUM0 + J*B(J+2,1)*DX**(J+1);
         DUM = DUM-(J+1)* B(J+2,1) * DX **J;
       END;
       B(1,1) = DUM0;
       B(2,1) = DUM;
    % SKIP(001);
         /*        STORE NEEDED VALUES FOR NEXT FIT
                                                                      */
    % SKIP(001);
       F1 = F(INDEX + NPTS_PER_JUMP);
       IF NPTS_PER_JUMP=1 THEN  F1 = F2S;
       F2S= F(INDEX + NPTS_PER_JUMP+1);
        XD1 = NPTS_PER_JUMP * DX;
         XD2 = XD1 + DX;
       FP1 = 0.0;
       FP2 = 0.0;
       DO J = 2 TO NTERMS;
         FP1 = FP1 + (J-1)*B(J,1)*XD1**(J-2);
         FP2 = FP2 + (J-1)* B(J,1) * XD2 ** (J-2);
       END;
       END SPLINE_LSTSQRS_FITTER;
    % SKIP(002);
    FREE A, B;
   END  LSPYSMO;
    % PAGE;
 MLSQ:
    PROCEDURE (A,B,M,N,K);
    % SKIP(002);
 /*************************************************/
 /* MLSQ CALCULATES  "X"  SATISFYING  "AX = B",   */
 /* THAT IS, THE SOLUTION OF A SYSTEM OF LINEAR   */
 /* EQUATIONS USING HOUSEHOLDER TRANSFORMATIONS.  */
 /* THE LEAST-SQUARES SOLUTION IS OBTAINED IN     */
 /* CASE OF AN OVERDETERMINED SYSTEM OF EQUATIONS.*/
 /*************************************************/
    % SKIP(001);
    DECLARE
       ( A(*,*), B(*,*), PIVR, MAXA)
         BINARY FLOAT,                 /* SINGLE PRECISION VERSION  */
       (AUX(N),H,SIG,BETA)
         BINARY FLOAT(53),
       (TOL, PIV(N))
         BINARY FLOAT,
       (I,J,K,L,M,N,PIVI,LM,LN,LK)
         BINARY FIXED;
    LM = M;
    LN = N;
    LK = K;
    SIG = 0;
    IF LM  >= LN  THEN                 /* IF M LESS THAN  N         */
      IF LN  >= 0  THEN                /* OR IF N NOT POSITIVE      */
        IF LK  > 0  THEN DO;           /* OR IF K NOT POSITIVE      */
                                       /* THEN BYPASS OPERATION     */
           DO L = 1 TO LN;             /* CALCULATE SCALARPRODUCTS OF*/
           H=0;                        /* COLUMNS.                  */
             DO  I = 1 TO LM;
             H = H + MULTIPLY(A(I,L),A(I,L),53);
            END;
           IF H >= SIG THEN  DO;
              SIG = H;                 /* SAVE MAX SCALARPRODUCT    */
              PIVI = L;                /* SAVE SUBSCRIPT OF PIVOT   */
              END;
           AUX(L),PIV(L) = H;
           END;
    % SKIP(002);
 /*  DECOMPOSITION LOOP                */
    % SKIP(001);
           DO  L = 1 TO LN;
           TOL = PIV(PIVI);            /* ORIGINAL LENGTH OF PIVOT   */
           IF PIVI  > L  THEN DO;      /* SHOULD INTERCHANGE COLUMN  */
             H = AUX(L);               /* INTERCHANGE SCALARPRODUCTS */
             AUX(L) = AUX(PIVI);
             PIV(PIVI) = PIV(L);
             AUX(PIVI) = H;
               DO J = L TO LM;         /* INTERCHANGE LOWER PART OF  */
               PIVR = A(J,L);          /* COLUMNS OF A               */
               A(J,L) = A(J,PIVI);
               A(J,PIVI) = PIVR;
               END;
             END;
           IF  L  > 1  THEN DO ;       /* RECALCULATE COLUMN LENGTH  */
             SIG = 0;                  /* TO AVOID ROUND-OFF ERRORS  */
              DO I = L TO LM ;
              SIG = SIG + MULTIPLY(A(I,L),A(I,L),53);
              END;
             END;
          IF TOL = 0  THEN DO;
             TOL = 1;
           END;
          BETA = TOL * 1E-10;
          IF SIG  <= BETA THEN DO;     /* INDICATE LOSS OF SIGNIFI.  */
            IF SIG <= 0  THEN SIG =BETA;
            END;
          SIG = SQRT(SIG);
          H = A(L,L);
          IF H  <  0 THEN SIG = -SIG ; /* FORCE SIGN(SIG) TO SIGN(H)*/
          PIV(L) = PIVI ;              /* SAVE INTERCHANG INFO.     */
          A(L,L),BETA = H + SIG;       /* TRANSFORM DIAGONIAL       */
          AUX(L) = -SIG;               /* SAVE  DIAGONIAL  ELEMENT  */
          BETA = SIG * BETA;
                                       /* TRANSFORM OF SUBMATRIX A  */
          PIVR = 0;
            DO J = L+1 TO LN;
            H =0;
              DO  I = L TO   LM;
              H = H + MULTIPLY(A(I,L),A(I,J),53);
              END;
           SIG = H/BETA;
              DO  I = LM  TO L BY -1;
              H = A(I,J);
              A(I,J) = H - A(I,L)*SIG;
              END;
           H = A(L,J);
         H,AUX(J) = AUX(J) - H*H;
           IF  H >= PIVR THEN DO;
              PIVR = H;
              PIVI = J;
              END;
           END;
         DO J = 1 TO K;
          H = 0;
            DO  I = L  TO LM;
            H = H + MULTIPLY(A(I,L),B(I,J),53);
            END;
          MAXA = H/BETA;
              DO I = L TO LM;
                B(I,J) = B(I,J) - A(I,L)*MAXA;
              END;
             END;
            END;
            DO J = LN  TO 1 BY -1;
              DO I = 1 TO LK;
               H = B(J,I);
                DO L = J+1 TO LN;
                H = H- MULTIPLY(A(J,L),B(L,I),53);
                END;
              PIVI = PIV(J);
              B(J,I) = B(PIVI,I);
              B(PIVI,I) = H/AUX(J);
              END;
            END;
          IF LN < LM  THEN DO J = 1 TO LK;
            H=0;
            DO I = LN + 1 TO LM ;
              H = H + MULTIPLY(B(I,J),B(I,J),53);
              END;
            B(LM,J) = H;
            END;
          END;
        END  MLSQ;
