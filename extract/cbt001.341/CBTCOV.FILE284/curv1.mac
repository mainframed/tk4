*PROCESS;
 /* TITLE:  CURV1  A SPLINE FITTER              */
 /*                                             */
 /* FUNCTION/OPERATION: CURV1 DETERMINES THE    */
 /*    PARAMETERS NECESSARY TO COMPUTE A SPLINE */
 /*    UNDER TENSION THROUGH A SEQUENCE OF      */
 /*    SINGLE VALUED X,Y POINTS. THE SLOPES AT  */
 /*    THE TWO ENDS OF THE CURVE MAY BE GIVEN   */
 /*    OR OMITTED.                              */
 /*                                             */
 /* INPUT:                                      */
 /*    X     - THE ARRAY OF N INCREASING        */
 /*            ABSCISSAE VALUES.                */
 /*                FLOAT BIN                    */
 /*    Y     - THE ARRAY OF N ORDINATE          */
 /*            VALUES ( Y(I) GOES WITH X(I))    */
 /*                FLOAT BIN                    */
 /*    SLP1  - THE DESIRED VALUES FOR THE FIRST */
 /*    SLPN    DERIVATIVE OF THE COMPUTED CURVE */
 /*            AT THE BEGINNING AND END OF THE  */
 /*            X VALUES RESPECTIVELY. IF THE    */
 /*            VALUE OF SIGMA (SEE BELOW) IS    */
 /*            NEGATIVE, THESE VALUES ARE       */
 /*            DETERMINED INTERNALLY.           */
 /*                FLOAT BIN                    */
 /*                                             */
 /*    SIGMA - THE DESIRED TENSION FACTOR       */
 /*                FLOAT BIN                    */
 /* OUTPUT:                                     */
 /*    YP    - AN ARRAY OF DIMENSION (LB_X:HB_X)*/
 /*            CONTAING VALUES PROPORTIONAL TO  */
 /*            THE 2ND DERIVATIVE OF THE CURVE  */
 /*                                             */
 /* NOTES:                                      */
 /*    THE FUNCTIONS CURV2,CURVD, AND CURVI     */
 /*    ALLOW THE USER TO INTERPOLATE, COMPUTE   */
 /*    THE 1ST DERIVATIVE AT A POINT, AND       */
 /*    COMPUTE THE INTEGRAL, RESPECTIVELY,      */
 /*    USING INFORMATION CONTAINED IN THE YP    */
 /*    ARRAY. THE VALUE OF SIGMA INDICATES      */
 /*    THE CURINESS DESIRED. IF ABS(SIGMA) IS   */
 /*    NEARLY ZERO (E.G., .001) THEN THE CURVE  */
 /*    IS ALMOST A CUBIC SPLINE. IF ABS(SIGMA)  */
 /*    IS LARGE (E.G., 50.) THEN THE CURVE IS   */
 /*    NEARLY A POLYGONAL LINE. IF SIGMA IS     */
 /*    NEGATIVE, THE ENDPOINT DERIVATIVES WILL  */
 /*    BE DETERMINED INTERNALLY, OTHERWISE  THE */
 /*    VALUES GIVEN IN SLP1 AND SLPN WILL BE    */
 /*    USED. THE ALGORITHM IS BASED ON A METHOD */
 /*    BY A.K.CLINE OF NCAR. IT REQUIRES A      */
 /*    SCRATCH ARRAY WHICH IS OBTAINED AND      */
 /*    FREED DYNAMICALLY. IT IS VERY IMPORTANT  */
 /*    TO NOTE THAT THE LENGTHS AND BOUNDS OF   */
 /*    THE X, Y, AND YP ARRAYS MUST BE THE SAME */
 /*                                             */
 /* BY:                                         */
 /*    L. DAVID JONES                           */
 /*    TELEDYNE EXPLORATION                     */
 /*    HOUSTON, TX                              */
 /*    JAN. 1980                                */
 /*                                             */
 CURV1:
    PROCEDURE (X,Y,SLP1,SLPN,YP,SIGMA);
    DCL (X,Y,YP) (*) FLOAT BIN;
    DCL (SLP1,SLPN,SIGMA) FLOAT BIN;
    DCL TEMP(LB_X:HB_X) FLOAT BIN     CONTROLLED;
    DCL (C1,
         C2,
         C3,
         DELX1,
         DX1,
         DELX2,
         DX2,
         DELS,
         DIAG1,
         DIAG2,
         DIAGIN,
         DELX12,
         DELN,
         DELNM1,
         DELNN,  EXPS,
         SIGMAP,
         SINHS, SINHIN, SPDIAG) FLOAT BIN;
    DCL (I,IBAK,N,LB_X,HB_X) FIXED BIN;
    LB_X = LBOUND(X,1);  /* FIND THE LOWER  */
    HB_X = HBOUND(X,1);  /* AND UPPER BOUNDS ON X */
    N    = HB_X - LB_X + 1;  /* LENGTH OF X AND Y */
    IF N < 2 THEN DO;  /* NOT ENOUGH POINTS IN  X */
       PUT SKIP(2) LIST('ERROR IN CURV1 - N < 2',N);
       RETURN;   /* DO NOTHING */
       END;      /* AND RETURN TO CALLER */
 /*
    START OF ALGORITHM */
    DELX1 = X(LB_X+1)-X(LB_X);
    DX1   = (Y(LB_X+1)- Y(LB_X))/DELX1;
 /*
    DETERMINE SLOPES IF NECESSARY
                                 */
    IF SIGMA < 0.0 THEN GO TO L_105;
 L_101:    /* DE-NORMALIZE TENSION FACTOR */
    SIGMAP = ABS(SIGMA)*(N-1)/(X(HB_X)-X(LB_X));
    ALLOCATE TEMP;
 /*
    SET UP R.H.S. AND TRI-DIAGONAL SYSTEM FOR
    YP AND PERFORM FORWARD ELIMINATION.
                                       */
    DELS = SIGMAP*DELX1;
    EXPS = EXP(DELS);
    SINHS = 0.5*(EXPS-1.0/EXPS);
    SINHIN = 1.0/(DELX1*SINHS);
    DIAG1  = SINHIN*(DELS*0.5*(EXPS+1.0/EXPS)-SINHS);
    DIAGIN = 1.0/DIAG1;
    YP(LB_X) = DIAGIN*(DX1-SLP1);
    SPDIAG = SINHIN*(SINHS - DELS);
    TEMP(LB_X) = DIAGIN*SPDIAG;
    IF N = 2 THEN GO TO L_103;
    DO I = LB_X+1 TO HB_X-1;
       DELX2 = X(I+1) - X(I);
       DX2   = (Y(I+1) - Y(I))/DELX2;
       DELS  = SIGMAP*DELX2;
       EXPS  = EXP(DELS);
       SINHS = 0.5*(EXPS-1.0/EXPS);
       SINHIN = 1.0/(DELX2 * SINHS);
       DIAG2  = SINHIN*(DELS*(0.5*(EXPS+1.0/EXPS))-SINHS);
       DIAGIN = 1.0/(DIAG1+DIAG2-SPDIAG*TEMP(I-1));
       YP(I)  = DIAGIN*(DX2-DX1-SPDIAG*YP(I-1));
    SPDIAG = SINHIN*(SINHS-DELS);
    TEMP(I) = DIAGIN*SPDIAG;
    DX1 = DX2;
    DIAG1 = DIAG2;
    END;
 L_103:
    DIAGIN = 1.0/(DIAG1-SPDIAG*TEMP(HB_X-1));
    YP(HB_X) = DIAGIN*(SLPN - DX2 - SPDIAG*YP(HB_X-1));
 /*
    NOW PERFORM BACK SUBSTITUTION.
                                   */
    DO I = 2 TO N;
       IBAK = HB_X + 1 - I ;
       YP(IBAK) = YP(IBAK)-TEMP(IBAK)*YP(IBAK+1);
    END;
    FREE TEMP;
    RETURN;
 L_105:
    IF N = 2 THEN GO TO L_106;
 /*
    IF NO DERIVATIVES ARE GIVEN, USE SECOND
    ORDER POLYNOMIAL INTERPOLATION FOR
    VALUES AT ENDPOINTS
                                       */
    DELX2  =  X(LB_X+2) - X(LB_X+1);
    DELX12 =  X(LB_X+2) - X(LB_X);
    C1     = -(DELX12+DELX1)/DELX12/DELX1;
    C2     =  DELX12/DELX1/DELX2;
    C3     = -DELX1/DELX12/DELX2;
    SLP1   =  C1*Y(LB_X)+C2*Y(LB_X+1) + C3 * Y(LB_X + 2);
    DELN   =  X(HB_X) - X(HB_X-1);
    DELNM1 =  X(HB_X-1) - X(HB_X-2);
    DELNN  =  X(HB_X) - X(HB_X-2);
    C1     =  (DELNN + DELN)/ DELNN / DELN;
    C2     =  - DELNN / DELN / DELNM1;
    C3     =  DELN / DELNN / DELNM1;
    SLPN   =  C3*Y(HB_X-2) + C2*Y(HB_X-1) + C1*Y(HB_X);
    GO TO L_101;
 /*
    IF ONLY TWO POINTS ARE GIVEN ON INPUT WITH
    NO DERIVATIVE INFORMATION, USE A STRAIGHT
    LINE APPROXIMATION.
                                           */
 L_106:
    YP(LB_X) = 0.0;
    YP(LB_X+1) = 0.0;
    RETURN;
    END CURV1;
