*PROCESS;
 /* TITLE: CURV2 AN INTERPOLATION ROUTINE.      */
 /*                                             */
 /* FUNCTION/OPERATION: THIS ROUTINE INTERPOLATES*/
 /*    A CURVE AT A GIVEN POINT USING A SPLINE  */
 /*    UNDER TENSION. THE ROUTINE CURV1 SHOULD  */
 /*    BE CALLED EARLIER TO DETERMINE CERTAIN   */
 /*    NECESSARY PARAMETERS.                    */
 /*                                             */
 /* INPUT:                                      */
 /*    T    - THE X VALUE OF THE POINT TO BE    */
 /*           INTERPOLATED.                     */
 /*                FLOAT BIN                    */
 /*                                             */
 /*    X    - THE ARRAYS CONTAINING THE         */
 /*    Y      ABSCISSAE AND ORDINATES OF THE    */
 /*           KNOWN INPUT POINTS.               */
 /*                                             */
 /*    YP   - AN ARRAY RETURNED BY CURV1        */
 /*           CONTAINING VALUES PROPORTIONAL    */
 /*           TO THE 2ND DERIVATIVE OF THE      */
 /*           CURVE AT THE GIVEN (X,Y) NODES    */
 /*                FLOAT BIN                    */
 /*    SIGMA- THE CURVE TENSION FACTOR USED     */
 /*           BY CURV1.                         */
 /*                FLOAT BIN                    */
 /*                                             */
 /* OUTPUT:                                     */
 /*    ON OUTPUT, CURV2 CONTAINS THE            */
 /*    INTERPOLATED VALUE AT T.                 */
 /*                                             */
 /* NOTES:                                      */
 /*    SINCE CURV1 MUST BE CALLED FIRST AND     */
 /*    DOES ITS OWN CHECKING OF THE INPUT       */
 /*    PARAMETERS, CURV2 DOES NO CHECKING       */
 /*    ITSELF. X,Y,YP, AND SIGMA MUST BE        */
 /*    UNCHANGED FROM THE CALL TO CURV1 OR THE  */
 /*    RESULTS WILL BE UNPREDICTABLE.           */
 /*    FOR T < X(START), CURV2 = Y(START);      */
 /*    FOR T > X(END), CURV2 = Y(END);          */
 /*                                             */
 /* BY:                                         */
 /*    L. DAVID JONES                           */
 /*    TELEDYNE EXPLORATION                     */
 /*    JAN 1980                                 */
 CURV2:
    PROCEDURE (T,X,Y,YP,SIGMA) RETURNS(FLOAT BIN);
    DCL (X,Y,YP) (*) FLOAT BIN;
    DCL (T,SIGMA) FLOAT BIN;
    DCL (DEL1,DEL2,DELS,EXPS1,EXPS,SINHD1,SINHD2,SINHS,ANS) FLOAT BIN;
    DCL (N,I,LB_X,HB_X) FIXED BIN;
    LB_X = LBOUND(X,1); HB_X = HBOUND(X,1); /* FIND THE  */
    N = HB_X - LB_X +1;                 /* LENGTH OF X & Y */
    S = X(HB_X) - X(LB_X);
 /*  DENORMALIZE SIGMA */
    SIGMAP = ABS(SIGMA)*(N-1)/S;
    IF T < X(LB_X) THEN RETURN(Y(LB_X));
    IF T > X(HB_X) THEN RETURN(Y(HB_X));
 /*
     SEARCH FOR CORRECT INTERVAL IN
     WHICH T LIES.
                        */
    I = LB_X + 1;
    DO WHILE (T>= X(I) & I <  HB_X);
       /*  NOTE THAT MOST OF THE WORK IS DONE BY THE DO */
       I = I + 1;
    END;
 /*
    SET UP AND PERFORM INTERPOLATION.
                                      */
    DEL1 = T - X(I-1);
    DEL2 = X(I) - T;
    DELS = X(I) - X(I-1);
    EXPS1 = EXP(SIGMAP*DEL1);
    SINHD1 = 0.5*(EXPS1 - 1.0/EXPS1);
    EXPS  =  EXP(SIGMAP*DEL2);
    SINHD2 = 0.5*(EXPS - 1.0/EXPS);
    EXPS   = EXPS1*EXPS;
    SINHS  = 0.5*(EXPS- 1.0/EXPS);
    ANS = (YP(I)*SINHD1+YP(I-1)*
             SINHD2) / SINHS +
           ((Y(I) - YP(I))*DEL1 +
             (Y(I-1) - YP(I-1))*DEL2) / DELS;
    RETURN(ANS);
    END CURV2;
