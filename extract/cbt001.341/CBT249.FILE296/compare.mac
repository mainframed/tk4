//*
//*  ASM1 -- ASSEMBLES COMPARE  (IFOX00 CAN BE USED INSTEAD OF IEV90)
//*  LNK1 -- LINKS COMPARE  INTO 'SYS1.CMDLIB(COMPARE)'
//*
//*  ASM2 -- ASSEMBLES COMPAREB (IFOX00 CAN BE USED INSTEAD OF IEV90)
//*  LNK2 -- LINKS COMPAREB INTO 'SYS1.CMDLIB(COMPAREB)'
//*
//*  COPY -- COPIES COMPARE HELP TO 'SYS2.HELP(COMPARE)'
//*          USING IEBGENER AND SHARED ALLOCATION
//*
//ASM1  EXEC  PGM=IEV90,REGION=2048K,
//             PARM=(DECK,NOOBJECT,NORLD,TERM,'XREF(SHORT)')
//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,
//         DCB=BLKSIZE=3120
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSIN    DD  *
         TITLE '   C O M P A R E  '
***********************************************************************
*                                                                     *
*        'COMPARE' TSO COMMAND                                        *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. MAY 12 1981.
*        DATE UPDATED. SEPTEMBER 17 1981.
*        ATTRIBUTES. RE-ENTRANT.
*        DESCRIPTION.
*         THIS TSO COMMAND INVOKES A COMPARE UTILITY PROGRAM
*         TO COMPARE TWO SEQUENTIAL DATA SETS (OR MEMBERS).
*
*         THE INVOKED UTILITY PROGRAM 'COMPAREB' IS A MODIFIED
*         VERSION OF THE YALE COMPARE PROGRAM FROM THE CBT TAPE.
*
*         THE COMMAND CAN OPTIONALLY INVOKE THE IBM UTILITY
*         'IEBCOMPR' OR A ZAPPED IEBCOMPR NAMED 'ZEBCOMPR'.
*         ZEBCOMPR DISPLAYS UNMATCHED RECORDS IN EBCDIC INSTEAD OF HEX.
*
*         THE COMMAND ALLOCATES THE TWO DATA SETS AND PASSES
*         THEIR DDNAMES TO THE UTILITY PROGRAM.
*
*        LOG OF CHANGES.
*         14MAY81 - COMPARE MEMBERNAMES BEFORE ISSUING MSG03.
*         15JUN81 - ZEBCOMPR KEYWORD ADDED.
*         16JUN81 - FULL KEYWORD ADDED.
*         16JUN81 - USERS CAN NOW USE THE NAME 'COMPARE' FOR BOTH
*                   THE TSO COMMAND AND THE BATCH PROGRAM (COMPAREB).
*                   IF A USER EXECUTES COMPARE AS A BATCH PROGRAM
*                   (EXEC PGM=COMPARE) OR FROM THE CALL COMMAND,
*                   THE COMMAND SIMPLY PASSES CONTROL DIRECTLY TO
*                   THE COMPAREB PROGRAM, AS IF THE USER HAD SPECIFIED
*                   EXEC PGM=COMPAREB.  THIS IS USEFUL AT INSTALLATIONS
*                   THAT INSTALLED THE BATCH PROGRAM AS 'COMPARE'
*                   BEFORE THEY HAD THE COMPARE COMMAND, AND DONT WANT
*                   TO MAKE THE USERS CHANGE THEIR EXISTING JCL.
*         17SEP81 - ASM/NOASM KEYWORD ADDED.
*         08NOV84 - MODIFIED TO USE PDS PROGRAM PUTLINE             ABL
*         12MAY85 - MVS USES UNIT(SYSALLDA) INSTEAD OF UCB SEARCH   ABL
*         12JUN85 - FOR PARTITIONED NEW AND OLD DATA SETS, AN OPEN, ABL
*                   A BLDL AND A CLOSE IS PERFORMED TO AVOID ABEND  ABL
*                   013-18 SITUATIONS FOR MISSING MEMBERS.          ABL
*
*
***********************************************************************
         EJECT
***********************************************************************
*
*        SYNTAX.
*               COMPARE 'OLDDSNAME' 'NEWDSNAME'
*
*            OPTIONAL KEYWORDS ARE:
*               FULL     - INCLUDE THE SEQUENCE NUMBERS (YALE PGM).
*               ASM      - COMPARING ASSEMBLER SOURCE CODE (YALE PGM).
*               IEBCOMPR - THE IEBCOMPR UTILITY IS TO BE USED.
*               ZEBCOMPR - THE MODIFIED IEBCOMPR IS TO BE USED.
*               OVOL(VOLUME) - VOLUME CONTAINING THE OLD DATA SET.
*                          NOT NEEDED IF CATALOGED.
*               NVOL(VOLUME) - VOLUME CONTAINING THE NEW DATA SET.
*                          NOT NEEDED IF CATALOGED.
*               OUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE OLD
*                          DATA SET. NOT NEEDED IF CATALOGED.
*               NUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE NEW
*                          DATA SET. NOT NEEDED IF CATALOGED.
*               SYSOUT   - MESSAGES TO A SYSOUT DATA SET.
*               PRINT    - MESSAGES TO TERMINAL (DEFAULT).
*               NOPRINT  - MESSAGES TO DUMMY FILE.
*               OUTFILE(FILENAME) - MESSAGES TO SPECIFIED DDNAME.
*
*            WHEN THE OVOL OR NVOL KEYWORDS ARE USED TO INDICATE
*            TWO IDENTICALLY NAMED DATASETS ON DIFFERENT VOLUMES
*            ARE BEING USED, UNEXPECTED RESULTS CAN OCCUR UNLESS
*            BOTH OVOL AND NVOL ARE SPECIFIED.  FOR EXAMPLE, IF
*            OVOL IS SPECIFIED AND NVOL IS NOT, THE ALLOCATION
*            OF 'NEWDSNAME' WITH NO VOLUME SPECIFIED MAY PICK UP
*            THE ALREADY ALLOCATED 'OLDDSNAME' INSTEAD OF THE
*            'NEWDSNAME' IN THE CATALOG.
*
***********************************************************************
         EJECT
         GBLB  &MVS
&MVS     SETB  1                   1 - MVS    0 - SVS,MVT
         SPACE
COMPARE  START
         USING *,R10,R11
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'COMPARE '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH
@PROLOG  STM   14,12,12(R13)
         LR    R10,R15             FIRST BASE REGISTER
         LA    R15,1
         LA    R11,4095(R15,R10)   SECOND BASE REGISTER
         LR    R2,R1               PARM POINTER
         TM    0(R2),X'80'         IS THIS A CPPL
         BO    PGM                 NO, GO INVOKE COMPAREB
         TM    4(R2),X'80'         IS THIS A CPPL
         BZ    CP                  YES, BRANCH
         SPACE
PGM      LA    R0,80
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)          CHAIN FORWARD
         ST    R1,8(,R13)          CHAIN BACK
         LR    R13,R1              UPDATE SAVEAREA POINTER
         LA    R3,72(,R13)         POINT TO LINK MF=L
         XC    0(8,R3),0(R3)       CLEAR LINK MF=L
         LR    R1,R2
         LINK  EP=COMPAREB,SF=(E,(R3))
         LR    R2,R15              SAVE RETURN CODE
         LR    R1,R13              FOR FREEMAIN
         LA    R0,80               FOR FREEMAIN
         L     R13,4(,R13)         BACK TO OLD SAVEAREA
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2              RETURN CODE
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
         USING CPPL,R2
CP       L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               INITIALIZE WORKAREA POINTER
         USING @DATA,R9
         SPACE 1
         LR    R15,R1              AREA TO BE CLEARED
         L     R1,@SIZE            LENGTH TO BE CLEARED
         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE
         SRDL  R0,8                DIVIDE BY 256
         SRL   R1,24               ISOLATE REMAINDER
         LTR   R0,R0               IS QUOTIENT ZERO
         BZ    CLEARR              YES, GO CLEAR REMAINDER
CLEARQ   XC    0(256,R15),0(R15)   CLEAR 256 BYTES
         LA    R15,256(,R15)
         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH
CLEARR   LTR   R1,R1               IS REMAINDER ZERO
         BZ    CLEARX              YES, BRANCH TO FINISH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BYPASS EXECUTED INSTR
         XC    0(0,R15),0(R15)     (EXECUTED)
         EX    R1,*-6              DO THE ABOVE XC
CLEARX   EQU   *
         SPACE 1
         ST    R13,4(,R9)          CHAIN FORWARD
         ST    R9,8(,R13)          CHAIN BACK
         LR    R13,R9              UPDATE SAVEAREA POINTER
         SPACE 1
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
         ST    R2,VECTOR
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         AIF   (NOT &MVS).SKIP1
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLODED            BRANCH AROUND LOAD
.SKIP1   ANOP
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*        SET UP DAPL FOR IKJDAIR                           *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYDAPL
         USING DAPL,R15
         MVC   DAPLUPT(12),MYIOPL  UPT,ECT,ECB
         MVC   DAPLPSCB,CPPLPSCB
         LA    R0,MYDAPB
         ST    R0,DAPLDAPB
         DROP  R15                 DAPL
         SPACE
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(COMPRPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP2
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
.SKIP2   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15             PARSE SUCCESSFUL?
         BZ    PARSEOK             YES, BRANCH
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG
         B     EXIT12
PARSEOK  EQU   *
         L     R3,MYANS
         USING IKJPARMD,R3
         MVI   DSNAME+2,C' '
         MVC   DSNAME+3(43),DSNAME+2
         MVC   DSNAM2+2(44),DSNAME+2
         MVC   MEMBER1,DSNAME+2
         MVC   MEMBER2,MEMBER1
         SPACE
************************************************************
*                                                          *
*         PROCESS 'OLD' DSNAME                             *
*                                                          *
************************************************************
         SPACE
         LA    R4,DSN
         TM    6(R4),X'80'         DSNAME PRESENT
         BZ    ERRNODSN            NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF DSNAME
         STH   R1,DSNAME           DSN LENGTH IN DAIR BUFFER
         L     R15,0(,R4)          GET ADDRESS OF DSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DSNAME+2(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER
         SPACE
         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK
         USING DAPB08,R5
         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB
         LA    R0,DSNAME
         ST    R0,DA08PDSN
         SPACE
         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?
         BZ    MEMDS1X             NO, BRANCH
         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER NAME
         L     R15,08(,R4)         GET ADDRESS OF MEMBER NAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INST
         MVC   DA08MNM(0),0(R15)   (EXECUTED)
         EX    R1,*-6              MOVE MEMBER NAME TO DAPB
         MVC   MEMBER1,DA08MNM
MEMDS1X  EQU   *
         SPACE
         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?
         BZ    NOPASS              NO, BRANCH
         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD
         L     R15,16(,R4)         GET ADDRESS OF PASSWORD
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INST
         MVC   DA08PSWD(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE PASSWORD TO DAPB
NOPASS   EQU   *
         SPACE
         OI    DA08DSP1,X'08'      DISP=SHR
         AIF   (&MVS).SKIP3        DAIR TO PREFIX DSNAME
         TM    6(R4),X'40'         IS DSNAME IN QUOTES
         BO    *+8                 YES, BRANCH
         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME
.SKIP3   ANOP
         SPACE
************************************************************
*                                                          *
*        'OLD' UNIT AND VOLUME                             *
*                                                          *
************************************************************
         SPACE
         LA    R4,OVOL
         TM    6(R4),X'80'         VOLUME SPECIFIED
         BZ    NOOVOL              NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF VOLUME
         LTR   R1,R1               IS LENGTH ZERO
         BZ    NOOVOL              YES, BRANCH
         L     R15,0(,R4)          GET ADDRESS OF VOLUME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DA08SER(0),0(R15)   (EXECUTED)
         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM
         SPACE
         LA    R4,OUNI
         TM    6(R4),X'80'         UNIT SPECIFIED
         BZ    OUNIT2              NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF UNIT
         LTR   R1,R1               IS LENGTH ZERO
         BZ    OUNIT2              YES, BRANCH
         L     R15,0(,R4)          GET ADDRESS OF UNIT
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DA08UNIT(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM
         B     OUNITX
         SPACE
OUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH
         AIF   (NOT &MVS).SKIP11
         MVC   DA08UNIT(8),=C'SYSALLDA'
         AGO   .SKIP12
.SKIP11  ANOP
         BAL   R14,CUU             FIND UCB FOR VOLUME
         LTR   R15,R15             DASD UCB FOUND?
         BZ    OUNITX              NO, LEAVE UNIT TO SESSION DEFAULT
         CLI   19(R15),X'0B'       3350?
         BNE   *+10                NO
         MVC   DA08UNIT(4),=C'3350'
         CLI   19(R15),X'0D'       3330-1?
         BNE   *+10                NO
         MVC   DA08UNIT(6),=C'3330-1'
         CLI   19(R15),X'09'       3330?
         BNE   OUNITX              NO
         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.
         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)
         BZ    *+8
         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V
.SKIP12  ANOP
OUNITX   EQU   *
NOOVOL   EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE 'OLD' DATA SET                       *
*                                                          *
************************************************************
         SPACE
         BAL   R14,CALLDAIR
         SPACE
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDUT1(8),DA08DDN    SAVE DDNAME
         SPACE
************************************************************
*                                                          *
*         MEMBER MUST BE SPECIFIED IF DSORG IS PDS         *
*                                                          *
************************************************************
         SPACE
         MVC   DSORG1,DA08DSO
         TM    DA08DSO,X'02'
         BZ    OKSEQ1
         CLI   DA08MNM,C' '
         BE    ERRPDS
*
         MVC   MSGWK(8),DA08MNM
         LA    R6,VERDCBW
         MVC   0(VERDCBL,R6),VERDCB
         MVC   DDNAM(8,R6),DA08DDN
         LA    R1,OPEN
         XC    0(4,R1),0(R1)
         MVI   0(R1),X'80'
         OPEN  ((R6),INPUT),MF=(E,(1))
         TM    OFLGS(R6),X'10'
         BNO   EXIT12
         MVC   VERBLDL(4),=X'00010010'
         MVC   VERBLDL+4(8),MSGWK
         BLDL  (R6),VERBLDL
         LR    R4,R15
         LA    R1,OPEN
         XC    0(4,R1),0(R1)
         MVI   0(R1),X'80'
         CLOSE ((R6)),MF=(E,(1))
         LTR   R4,R4
         BNZ   MEMERROR
*
OKSEQ1   EQU   *
         SPACE
************************************************************
*                                                          *
*         PROCESS 'NEW' DATA SET NAME                      *
*                                                          *
************************************************************
         SPACE
         LA    R4,DS2
         TM    6(R4),X'80'         DSNAME PRESENT
         BZ    ERRNODSN            NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF DSNAME
         LTR   R1,R1               IS LENGTH ZERO
         BZ    EXIT12              YES, BRANCH
         STH   R1,DSNAM2           DSN LENGTH IN DAIR BUFFER
         L     R15,0(,R4)          GET ADDRESS OF DSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DSNAM2+2(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER
         SPACE
         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK
         USING DAPB08,R5
         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB
         LA    R0,DSNAM2
         ST    R0,DA08PDSN
         SPACE
         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?
         BZ    MEMDS2X             NO, BRANCH
         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER NAME
         L     R15,08(,R4)         GET ADDRESS OF MEMBER NAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INST
         MVC   DA08MNM(0),0(R15)   (EXECUTED)
         EX    R1,*-6              MOVE MEMBER NAME TO DAPB
         MVC   MEMBER2,DA08MNM
MEMDS2X  EQU   *
         SPACE
         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?
         BZ    NOPAS2              NO, BRANCH
         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD
         LTR   R1,R1               LENGTH ZERO
         BZ    NOPAS2              YES, BRANCH
         L     R15,16(,R4)         GET ADDRESS OF PASSWORD
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INST
         MVC   DA08PSWD(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE PASSWORD TO DAPB
NOPAS2   EQU   *
         SPACE
         OI    DA08DSP1,X'08'      DISP=SHR
         AIF   (&MVS).SKIP4        DAIR TO PREFIX DSNAME
         TM    6(R4),X'40'         IS DSNAME IN QUOTES
         BO    *+8                 YES, BRANCH
         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME
.SKIP4   ANOP
         SPACE
************************************************************
*                                                          *
*         'NEW' UNIT AND VOLUME                            *
*                                                          *
************************************************************
         SPACE
         LA    R4,NVOL
         TM    6(R4),X'80'         VOLUME SPECIFIED
         BZ    NONVOL              NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF VOLUME
         LTR   R1,R1               IS LENGTH ZERO
         BZ    NONVOL              YES, BRANCH
         L     R15,0(,R4)          GET ADDRESS OF VOLUME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DA08SER(0),0(R15)   (EXECUTED)
         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM
         LA    R4,NUNI
         TM    6(R4),X'80'         UNIT SPECIFIED
         BZ    NUNIT2              NO, BRANCH
         LH    R1,4(,R4)           GET LENGTH OF UNIT
         LTR   R1,R1               IS LENGTH ZERO
         BZ    NUNIT2              YES, BRANCH
         L     R15,0(,R4)          GET ADDRESS OF UNIT
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED INS
         MVC   DA08UNIT(0),0(R15)  (EXECUTED)
         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM
         B     NUNITX
         SPACE
NUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH
         AIF   (NOT &MVS).SKIP21
         MVC   DA08UNIT(8),=C'SYSALLDA'
         AGO   .SKIP22
.SKIP21  ANOP
         BAL   R14,CUU             FIND UCB FOR VOLUME
         LTR   R15,R15             DASD UCB FOUND?
         BZ    NUNITX              NO, LEAVE UNIT TO SESSION DEFAULT
         CLI   19(R15),X'0B'       3350?
         BNE   *+10                NO
         MVC   DA08UNIT(4),=C'3350'
         CLI   19(R15),X'0D'       3330-1?
         BNE   *+10                NO
         MVC   DA08UNIT(6),=C'3330-1'
         CLI   19(R15),X'09'       3330?
         BNE   NUNITX              NO
         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.
         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)
         BZ    *+8
         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V
.SKIP22  ANOP
NUNITX   EQU   *
NONVOL   EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE 'NEW' DATA SET                       *
*                                                          *
************************************************************
         SPACE
         BAL   R14,CALLDAIR
         SPACE
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDUT2(8),DA08DDN    SAVE DDNAME
         SPACE
************************************************************
*                                                          *
*         MEMBER NAME REQUIRED IF DSORG IS PARTITIONED     *
*                                                          *
************************************************************
         SPACE
         MVC   DSORG2,DA08DSO
         TM    DA08DSO,X'02'
         BZ    OKSEQ2
         CLI   DA08MNM,C' '
         BE    ERRPD2
*
         MVC   MSGWK(8),DA08MNM
         LA    R6,VERDCBW
         MVC   0(VERDCBL,R6),VERDCB
         MVC   DDNAM(8,R6),DA08DDN
         LA    R1,OPEN
         XC    0(4,R1),0(R1)
         MVI   0(R1),X'80'
         OPEN  ((R6),INPUT),MF=(E,(1))
         TM    OFLGS(R6),X'10'
         BNO   EXIT12
         MVC   VERBLDL(4),=X'00010010'
         MVC   VERBLDL+4(8),MSGWK
         BLDL  (R6),VERBLDL
         LR    R4,R15
         LA    R1,OPEN
         XC    0(4,R1),0(R1)
         MVI   0(R1),X'80'
         CLOSE ((R6)),MF=(E,(1))
         LTR   R4,R4
         BNZ   MEMERROR
*
OKSEQ2   EQU   *
         SPACE
************************************************************
*                                                          *
*        CHECK FOR IDENTICAL DSNAMES AND VOLUMES           *
*                                                          *
************************************************************
         SPACE
         CLC   DSNAME+2(44),DSNAM2+2
         BNE   OKDIFF
         CLC   MEMBER1,MEMBER2
         BNE   OKDIFF
         LA    R4,DDUT1            POINT TO INPUT DDNAME
         BAL   R14,TIOTSCAN
         MVC   DOUBLE(6),28(R1)    HOLD VOL FROM UCB
         LA    R4,DDUT2            POINT TO OUTPUT DDNAME
         BAL   R14,TIOTSCAN
         CLC   DOUBLE(6),28(R1)    IS IT SAME VOLUME
         BNE   OKDIFF              NO, BRANCH
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG
         B     OKDIFF
*        B     EXIT12
         SPACE
TIOTSCAN L     R15,16              CVTPTR
         L     R15,0(,R15)         TCB WORDS
         L     R15,4(,R15)         CURRENT TCB
         L     R15,12(,R15)        TCBTIOT
         LA    R15,24(,R15)        TIOENTRY
         USING TIOENTRY,R15
TIOTLOOP CLI   TIOENTRY,X'00'      END OF TIOT?
         BER   R14                 YES - RETURN
         CLC   TIOEDDNM,0(R4)      DOES DDNAME MATCH?
         BE    TIOTEXIT            YES - RETURN
         SR    R1,R1
         IC    R1,TIOELNGH         GET LENGTH OF ENTRY
         LA    R15,0(R1,R15)       POINT TO NEXT ENTRY
         B     TIOTLOOP
TIOTEXIT L     R1,TIOEFSRT-1       GET UCB ADDRESS
         BR    R14
         SPACE
OKDIFF   EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE SYSIN FILE                           *
*                                                          *
************************************************************
         SPACE
         CLI   IEBKW+1,0           IEBCOMPR REQUESTED
         BE    NOIN                NO, SKIP SYSIN
         MVC   DA08CD(84),MODEL08
         MVC   DA08UNIT,@UNITVIO
         MVI   DA08PQTY+3,1        1 TRACK
         MVI   DA08DSP1,DA08NEW
         OI    DA08CTL,DA08TRKS
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDIN,DA08DDN
         SPACE
************************************************************
*                                                          *
*        WRITE SYSIN CONTROL STATEMENTS                    *
*                                                          *
************************************************************
         SPACE
         LA    R6,CTLDCBW
         MVC   0(CTLDCBL,R6),CTLDCB
         MVC   DDNAM(8,R6),DDIN
         LA    R1,OPEN
         MVI   0(R1),X'80'
         OPEN  ((R6),OUTPUT),MF=(E,(1))
         TM    OFLGS(R6),X'10'
         BNO   EXIT12
         MVI   CARD,C' '
         MVC   CARD+1(79),CARD
         MVC   CARD+1(17),=C'COMPARE TYPORG=PS'
         PUT   (R6),CARD
         SPACE
MEMX     MVI   CLOSE,X'80'
         CLOSE ((R6)),MF=(E,CLOSE)
NOIN     EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE SYSPRINT FILE (DUMMY)                *
*                                                          *
************************************************************
         SPACE
         CLI   PRINTKW+1,4         'NOPRINT' SPECIFIED?
         BNE   PRINTERM            NO
         MVC   DA08CD(84),MODEL08
         OI    DA08CTL,DA08DMMY
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDPRINT,DA08DDN
         B     PRINTX
         DROP  R5                  DAPB08
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE SYSPRINT FILE TO THE TERMINAL        *
*                                                          *
************************************************************
         SPACE
PRINTERM CLI   PRINTKW+1,1         PRINT
         BH    PRINTSYS
         USING DAPB1C,R5
PRINTU   MVC   DA1CCD(MODEL1CL),MODEL1C
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDPRINT,DA1CDDN
         DROP  R5                  DAPB1C
         B     PRINTX
         SPACE
PRINTSYS CLI   PRINTKW+1,2         SYSOUT
         BNE   PRINTOUT
         USING DAPB30,R5
         MVC   DA30CD(MODEL30L),MODEL30
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BNZ   ERRDAIR
         MVC   DDPRINT,DA30DDN
         MVI   FREEOPT,1           FREE DDPRINT WITH CLASS
         DROP  R5                  DAPB30
         B     PRINTX
         SPACE
PRINTOUT CLI   PRINTKW+1,3         OUTFILE
         BNE   PRINTX              NO, USE SYSPRINT
         LA    R4,OUT
         TM    6(R4),X'80'         OUTFILE PRESENT?
         BZ    PRINTX              NO, USE SYSPRINT
         LH    R1,4(,R4)           GET LENGTH
         L     R15,0(,R4)
         MVC   DDPRINT,=CL8' '
         BCTR  R1,0
         B     *+10
         MVC   DDPRINT(0),0(R15)
         EX    R1,*-6
         MVI   FREEOPT,2           DO NOT FREE DDPRINT
         B     PRINTX
         SPACE
PRINTX   EQU   *
         SPACE
************************************************************
*                                                          *
*        BUILD PARM FIELD AND DDNAME POINTERS              *
*                                                          *
************************************************************
         SPACE
         LA    R1,PARMPTR
         LA    R15,PARMLEN
         ST    R15,0(,R1)
         LA    R15,DDNAMES
         ST    R15,4(,R1)
         OI    4(R1),X'80'
         LA    R14,88
         STH   R14,0(,R15)
         MVC   LINKEP,=CL8'IEBCOMPR'
         CLI   IEBKW+1,1           IEBCOMPR REQUESTED
         BE    OKCOMPR             YES
         MVI   LINKEP,C'Z'         NO, TRY ZEBCOMPR
         CLI   IEBKW+1,2           ZEBCOMPR REQUESTED
         BE    OKCOMPR             YES
         MVC   LINKEP,=CL8'COMPAREB' NO, USE DEFAULT YALE COMPARE
         XC    DDIN,DDIN
         L     R14,VECTOR
         L     R14,0(,R14)
         CLI   PRINTKW+1,0         PRINT, DUMMY, SYSOUT OR FILE?
         BNE   PRINTZ              YES, BRANCH
         CLI   4(R14),C'*'         CALLED FOR PDS INTERNAL PUTLINE?
         BNE   PRINTZ              NO, BRANCH
         MVC   DDRETURN(4),8(R14)  YES, COPY REENTRY VECTOR ADDRESS
         MVI   DDRETURN,C'*'       YES, MARK FOR COMPAREB
PRINTZ   DS    0H
         SPACE 1
         CLI   FULLKW+1,1          FULL SPECIFIED
         BNE   NOTFULL             NO, BRANCH
         MVI   PARMLEN+1,4
         MVC   PARM(4),=C'FULL'
         CLI   ASMKW+1,1           ASM SPECIFIED
         BNE   OKCOMPR             NO, BRANCH
         MVI   PARMLEN+1,8
         MVC   PARM+4(4),=C',ASM'
         B     OKCOMPR
NOTFULL  CLI   ASMKW+1,1           ASM SPECIFIED
         BNE   OKCOMPR             NO, BRANCH
         MVI   PARMLEN+1,3
         MVC   PARM(3),=C'ASM'
OKCOMPR  EQU   *
         SPACE
         LINK  EPLOC=LINKEP,SF=(E,LINKAREA)
         SPACE
         LTR   R15,R15
         BZ    EXIT0
         B     ERRCOPY
         SPACE
************************************************************
*                                                          *
*         CALL DYNAMIC ALLOCATION                          *
*                                                          *
************************************************************
         SPACE
CALLDAIR LR    R8,R14
         LA    R1,MYDAPL
         AIF   (NOT &MVS).SKIP5
         L     R15,16              CVTPTR
         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON
         BNO   DAIRLINK               THEN DO LINK, NOT CALL
         L     R15,X'02DC'(,R15)   CVTDAIR
         BALR  R14,R15             CALL IKJDAIR
         B     DAIREXIT            SKIP AROUND LINK
DAIRLINK EQU   *
.SKIP5   ANOP
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
DAIREXIT EQU   *
         LR    R14,R8
         BR    R14
         SPACE
************************************************************
*                                                          *
*        DYNAMIC ALLOCATION FAILURE ROUTINE                *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         AIF   (NOT &MVS).SKIP6
         LA    R1,MYDFPARM
         USING DFDSECTD,R1
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         LA    R15,DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,DFIDP
         ST    R2,DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
         DROP  R1                  DFDSECTD
.SKIP6   AIF   (&MVS).SKIP7
         LA    R1,MSGDAIR
         LA    R0,L'MSGDAIR
         BAL   R14,PUTMSG
.SKIP7   ANOP
         L     R14,MYDFREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        CUU - GET UCB ADDRESS FOR A GIVEN VOLUME          *
*                                                          *
************************************************************
         SPACE
CUU      LR    0,14                SAVE RETURN ADDRESS
         L     14,16               CVTPTR
         L     14,X'28'(,14)       CVTILK2
CUU1     LH    15,0(,14)           LOAD UCB ADDRESS
         LTR   15,15               VALID ADDRESS?
         BZ    CUU2                NULL - TRY NEXT
         BM    CUU3                END OF LIST
         CLI   18(15),X'20'        DASD?
         BNE   CUU2                NO - TRY NEXT
         TM    3(15),X'80'         ONLINE?
         BZ    CUU2                NO - TRY NEXT
         CLC   28(6,15),0(1)       DOES VOLUME SERIAL MATCH?
         BNE   CUU2                NO - TRY NEXT
         LR    14,0                RESTORE RETURN ADDRESS
         BR    14                  RETURN
CUU2     LA    14,2(,14)           INCREMENT UCB POINTER
         B     CUU1                CONTINUE
CUU3     SLR   15,15               CLEAR UCB POINTER
         LR    14,0                RESTORE RETURN ADDRESS
         BR    14                  RETURN
         SPACE
************************************************************
*                                                          *
*        ERROR HANDLERS                                    *
*                                                          *
************************************************************
         SPACE
ERRNODSN LA    R1,MSG06
         LA    R0,L'MSG06
         BAL   R14,PUTMSG
         B     EXIT12
         SPACE
ERRDAIR  BAL   R14,DAIRFAIL
         B     EXIT12
         SPACE
ERRPDS   LA    R15,MSGWK
         BAL   R14,DSNOUT
ERRPDSC  MVC   0(30,R15),=CL30' IS A PARTITIONED DATA SET'
         LA    R15,30(,R15)
         LA    R1,MSGWK
         LR    R0,R15
         SR    R0,R1
         BAL   R14,PUTMSG
         B     EXIT12
ERRPD2   LA    R15,MSGWK
         BAL   R14,DSNOU2
         B     ERRPDSC
         SPACE
MEMERROR LA    R15,MSGWK+8
         MVC   0(30,R15),=CL30' IS NOT IN THE DATA SET'
         LA    R15,30(,R15)
         LA    R1,MSGWK
         LR    R0,R15
         SR    R0,R1
         BAL   R14,PUTMSG
         B     EXIT12
         SPACE
ERRCOPY  CVD   R15,DOUBLE
         LA    R15,MSGWK
         BAL   R14,DSNOUT
         MVC   0(21,R15),=CL21' COMPARE RETURN CODE'
         LA    R15,21(,R15)
         MVI   0(R15),C' '
         UNPK  1(3,R15),DOUBLE+6(2)
         OI    3(R15),X'F0'
         CLI   1(R15),C'0'
         BNE   *+14
         MVC   1(2,R15),2(R15)
         MVI   3(R15),C' '
         CLI   1(R15),C'0'
         BNE   *+14
         MVC   1(2,R15),2(R15)
         MVI   3(R15),C' '
         LA    R15,4(,R15)
         LA    R1,MSGWK
         LR    R0,R15
         SR    R0,R1
         CLI   DDRETURN,C'*'       INVOKED BY PDS INTERNAL CALL?
         BE    EXIT12              YES, BRANCH
         BAL   R14,PUTLINE
         B     EXIT12
         SPACE
DSNOUT   LH    R1,DSNAME
         BCTR  R1,0
         B     *+10
         MVC   0(0,R15),DSNAME+2
         EX    R1,*-6
         LA    R15,1(R1,R15)
         BR    R14
         SPACE
DSNOU2   LH    R1,DSNAM2
         BCTR  R1,0
         B     *+10
         MVC   0(0,R15),DSNAM2+2
         EX    R1,*-6
         LA    R15,1(R1,R15)
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,MYREGS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,MYREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,MYREGS
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,MYREGS
         BR    R14
         SPACE
EXIT12   LA    R15,12
         B     EXIT
         SPACE 1
EXIT0    SR    R15,R15             RETURN CODE ZERO
EXIT     LR    R2,R15              HOLD RETURN CODE
         IKJRLSA MYANS
         DROP  R3
         SPACE
         USING DAPB18,R5
         CLI   DDUT1,0
         BE    FFUT1
         MVC   DA18CD(MODEL18L),MODEL18
         MVC   DA18DDN,DDUT1
         BAL   R14,CALLDAIR
FFUT1    EQU   *
         CLI   DDUT2,0
         BE    FFUT2
         MVC   DA18CD(MODEL18L),MODEL18
         MVC   DA18DDN,DDUT2
         BAL   R14,CALLDAIR
FFUT2    EQU   *
         CLI   DDIN,0
         BE    FFIN
         MVC   DA18CD(MODEL18L),MODEL18
         MVC   DA18DDN,DDIN
         BAL   R14,CALLDAIR
FFIN     EQU   *
         CLI   DDPRINT,0
         BE    FFPRINT
         CLI   FREEOPT,2           OUTFILE
         BE    FFPRINT             YES, LEAVE ALLOCATED
         MVC   DA18CD(MODEL18L),MODEL18
         MVC   DA18DDN,DDPRINT
         CLI   FREEOPT,1           SYSOUT?
         BNE   *+8                 NO
         MVI   DA18SCLS,C'A'       YES
         BAL   R14,CALLDAIR
FFPRINT  EQU   *
         DROP  R5                  DAPB18
         TM    MYPUTLEP,X'80'      WAS PUTLINE LOADED
         BO    DELPUTLX            NO, BRANCH
         LA    R0,=CL8'IKJPUTL'    YES, DELETE IT
         DELETE EPLOC=(0)
DELPUTLX EQU   *
         LTR   R2,R2               IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
EXITX    LR    R15,R2              RESTORE RETURN CODE
         LR    1,R13               SET UP FREE ADDRESS
         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA
         ST    R15,16(,R13)        STORE RETURN CODE FOR LM
         L     R0,@SIZE
         FREEMAIN R,A=(1),LV=(0)
         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC
         BR    14                  RETURN
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
@UNITVIO DC    CL8'SYSDA'
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '
MODEL08L EQU   *-MODEL08
MODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '
MODEL18L EQU   *-MODEL18
MODEL1C  DC    X'001C',XL6'0',CL16' '
MODEL1CL EQU   *-MODEL1C
MODEL30  DC    X'0030',XL10'0',CL24' ',XL12'0',CL14' ',XL2'0',CL8' '
MODEL30L EQU   *-MODEL30
         SPACE
MSG01    DC    C'PARSE ERROR'
MSG03    DC    C'YOU ARE COMPARING A DATA SET TO ITSELF'
MSG06    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
MSGDAIR  DC    C'UNABLE TO ALLOCATE'
         LTORG
         PRINT NOGEN
CTLDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=PM,BUFNO=2,                 +
               RECFM=FB,LRECL=80,BLKSIZE=800
CTLDCBL  EQU   *-CTLDCB
VERDCB   DCB   DDNAME=DYNAM,DEVD=DA,MACRF=E
VERDCBL  EQU   *-VERDCB
         PRINT GEN
DDNAM    EQU   40
OFLGS    EQU   48
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
************************************************************
*                                                          *
*        PARSE PCL                                         *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
COMPRPCL IKJPARM
DSN      IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME',                  +
               HELP='FIRST (OR OLD) DATA SET NAME'
DS2      IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME',                  +
               HELP='SECOND (OR NEW) DATA SET NAME'
OUNIKW   IKJKEYWD
         IKJNAME 'OUNIT',SUBFLD=OUNISF
NUNIKW   IKJKEYWD
         IKJNAME 'NUNIT',SUBFLD=NUNISF
OVOLKW   IKJKEYWD
         IKJNAME 'OVOLUME',SUBFLD=OVOLSF
NVOLKW   IKJKEYWD
         IKJNAME 'NVOLUME',SUBFLD=NVOLSF
PRINTKW  IKJKEYWD
         IKJNAME 'PRINT'
         IKJNAME 'SYSOUT'
         IKJNAME 'OUTFILE',SUBFLD=OUTSF
         IKJNAME 'NOPRINT'
IEBKW    IKJKEYWD
         IKJNAME 'IEBCOMPR'
         IKJNAME 'ZEBCOMPR'
FULLKW   IKJKEYWD
         IKJNAME 'FULL'
ASMKW    IKJKEYWD DEFAULT='ASM'
         IKJNAME 'ASM'
         IKJNAME 'NOASM'
OUNISF   IKJSUBF
OUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +
               PROMPT='UNIT NAME FOR OLD DATA SET'
NUNISF   IKJSUBF
NUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +
               PROMPT='UNIT NAME FOR NEW DATA SET'
OVOLSF   IKJSUBF
OVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +
               PROMPT='VOLUME SERIAL FOR OLD DATA SET'
NVOLSF   IKJSUBF
NVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +
               PROMPT='VOLUME SERIAL FOR NEW DATA SET'
OUTSF    IKJSUBF
OUT      IKJIDENT 'OUTFILE FILENAME',                                  +
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +
               PROMPT='OUTFILE FILENAME'
         IKJENDP
         PRINT GEN
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
TIOT     DSECT
         DS    CL24                JOBNAME, ETC
TIOENTRY DS    0C
TIOELNGH DS    AL1                 LENGTH OF THIS ENTRY
         DS    XL3
TIOEDDNM DS    CL8                 DD NAME
TIOEJFCB DS    CL3                 TTR OF JFCB
         DS    XL2
TIOEFSRT DS    AL3                 ADDRESS OF UCB
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
DOUBLE   DS    D
LINKAREA DS    2F
LINKEP   DS    0CL8
MYPPL    DS    7F
VECTOR   DS    F
MYANS    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                  USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE
MYREGS   DS    4F                 USED BY PUTLINE ROUTINE
MYDFREGS DS    F
MYSTPB   DS    0F                 USED BY STACK DELETE (5F)
MYDAPL   DS    5F
MYDAPB   DS    21F
DSNAME   DS    H,CL44
DSNAM2   DS    H,CL44
MEMBER1  DS    CL8
MEMBER2  DS    CL8
MEMDSPDE DS    5F                 FAKE SELECT PDE
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
*
FREEOPT  DS    H
*
PARMPTR  DS    2F,H
PARMLEN  DS    H
PARM     DS    0F,CL4
DDNAMES  DS    H,CL32
DDIN     DS    CL8
DDPRINT  DS    CL8
DDRETURN DS    CL8
DDUT1    DS    CL8
DDUT2    DS    CL8
DDUT3    DS    CL8
DDUT4    DS    CL8
*
MSGWK    DS    CL72
OPEN     DS    0F
CLOSE    DS    F
CTLDCBW  DS    0D,(CTLDCBL)X
VERDCBW  DS    0D,(VERDCBL)X
VERREGS  DS    F
VERBLDL  DS    2H,CL8,CL4
DSORG1   DS    C
DSORG2   DS    C
OBTVOL   DS    CL6
OBTAINW  DS    4F
DSCB     DS    CL140
         DS    0D
CARD     DS    CL80
@DATAL   EQU   *-@DATA
         SPACE
         IKJCPPL
         SPACE
         IKJIOPL
         SPACE
         IKJPPL
         SPACE
         IKJDAPL
         SPACE
         IKJDAP08
         SPACE
         IKJDAP18
         SPACE
         IKJDAP1C
         SPACE
         IKJDAP30
         SPACE
         AIF   (NOT &MVS).SKIP8
         IKJEFFDF DFDSECT=YES
.SKIP8   ANOP
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//*
//LNK1   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)
//SYSLMOD  DD  DISP=OLD,DSN=SYS1.CMDLIB(COMPARE)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))
//*
//ASM2  EXEC  PGM=IEV90,REGION=2048K,
//             PARM=(DECK,NOOBJECT,NORLD,TERM,
//             'XREF(SHORT)')
//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,
//         DCB=BLKSIZE=3120
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSIN    DD  *
 TITLE '     C O M P A R E B   -   Y A L E   C O M P A R E   P L U S '
***********************************************************************
*                                                                     *
* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *
*                                                                     *
* MODIFICATIONS AT AFDSC/PENTAGON:                                    *
*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *
*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *
*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *
*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *
*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *
*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *
*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *
*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *
*   .  CONVERT PARM TO CAPS.                                          *
*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *
*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *
*  09JUN81 - BILL GODFREY                                             *
*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *
*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *
*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *
*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *
*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *
*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *
*   .  PUT THE RECORD LENGTH IN R10.                                  *
*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *
*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *
*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *
*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *
*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *
*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *
*      RECFM IS UNBLOCKED.                                            *
*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *
*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *
*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *
*      RECOGNIZED AFTER THAT CHANGE.                                  *
*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *
*      BYTES.                                                         *
*  16JUN81 - BILL GODFREY                                             *
*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *
*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *
*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *
*  08NOV84 - BRUCE LELAND                                             *
*   .  CHANGED TO RETURN DATA LINES TO THE PDS PUTLINE ROUTINE        *
*   .  CHANGED TO GETMAIN AND FREEMAIN BETWEEN 20K AND 200K           *
*                                                                     *
*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *
*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *
*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *
*   256 OR VARIABLE LENGTH.                                           *
*                                                                     *
*   THE ORIGINAL DOCUMENTATION FOLLOWS. SOME OF IT IS NOW INACCURATE. *
*                                                                     *
*$DOC$*****************************************************************
         EJECT
***********************************************************************
*
*   THIS COMPARE PROGRAM ORIGINATED AT YALE UNIVERSITY AND WAS OBTAINED
*     FROM THE CONNECTICUT BANK AND TRUST COMPANY MODS TAPE (FILE 226)
*
*   THIS COMPARE PROGRAM USES ONLY COLUMNS ONE THROUGH 72; THUS, ANY
*     TWO VERSIONS OF A PROGRAM MAY BE EASILY COMPARED EVEN IF ONE
*     (OR BOTH) OF THE FILES HAS BEEN RESEQUENCED.  IF NEITHER FILE
*     HAS BEEN RESEQUENCED, A PARM OF "FULL" MAY BE CODED TO REQUEST
*     THAT ALL EIGHTY COLUMNS BE USED IN THE COMPARISON.  A FACILITY
*     IS ALSO PROVIDED TO IGNORE TRIVIAL CARD IMAGES (SUCH AS " EJECT "
*     OR " SPACE 3 " IN AN ASSEMBLER SOURCE PROGRAM).
*
*   THIS PROGRAM USES ALL AVAILABLE CORE IN ITS REGION AFTER OPENING
*     ITS INPUT/OUTPUT FILES (EXCEPT FOR 4K WHICH IS RELEASED).  THE
*     OBTAINED CORE AREA IS USED AS A COMPARE BUFFER WHICH IS ONLY
*     DUMPED (WRITTEN TO SYSPRINT) WHEN IDENTICAL RECORDS (BASED ON
*     THE FIRST 72 BYTES) ARE FOUND IN THE OLD AND NEW DATA SETS.  IF
*     THE COMPARE BUFFER OVERFLOWS, THE PROGRAM TERMINATES.  THEREFORE,
*     IF IT IS SUSPECTED THAT THE TWO DATA SETS MAY BE VERY FAR OUT OF
*     SYNC, A LARGE REGION SHOULD BE USED.  THE NUMBER OF UNMATCHED
*     RECORDS THAT CAN BE BUFFERED AT ONE TIME CAN BE CALCULATED FROM
*     THE EXPRESSION:  (REGION SIZE - 8K - BUFFERS) / 160
*     AS A GENERAL RULE, 30K IS SUFFICIENT FOR ABOUT 100 UNMATCHED
*     RECORDS AT A TIME, AND 100K IS SUFFICIENT FOR ABOUT 500 UNMATCHED
*     RECORDS AT A TIME.
*
*   CARD IMAGES OF THE TRIVAL DATA IS INPUT FROM THE IGNORE DDNAME;
*     IF THE DDCARD IS MISSING, A TABLE OF TRIVIAL DATA FOR ASSEMBLER
*     SOURCE CODE WILL BE ASSUMED (THIS INCLUDES " EJECT ", " SPACE   "
*     " SPACE 1 ", " SPACE 2 ", " SPACE 3 " AND BLANK COMMENT CARDS).
*
*   THE PROGRAM FORMAT ON THE CBT MODS TAPE WAS DISASSEMBLED SOURCE; IT
*     WAS RECOMMENTED, RESYMBOLIZED, REDOCUMENTED AND SLIGHTLY MODIFIED
*     BY  A. BRUCE LELAND (ABL)  OCTOBER, 1978
*
*   CHANGE: IF OUTPUT IS DIRECTED TO A TSO TERMINAL, ONLY THE FIRST
*           78 CHARACTERS OF EACH LINE ARE WRITTEN.  THIS MAY NOT BE
*           DESIRABLE IF YOU HAVE HARD-COPY TERMINALS.
*
*   JCL:
*   //STEPNAME   EXEC  PGM=COMPAREB,REGION=100K
*   //SYSPRINT   DD    SYSOUT=A
*   //OLD        DD    DSN=OLD.SEQ.DSN ....
*   //NEW        DD    DSN=NEW.SEQ.DSN ....
*   //IGNORE     DD    *      (OR DUMMY  --  OR OMITTED)
*     TRIVIAL CARD IMAGES THAT ARE TO BE IGNORED IN THE COMPARISON
*   /*
         EJECT
COMPAREB CSECT
         USING *,R11
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'COMPAREB'
         DC    CL16' &SYSDATE &SYSTIME '
@PROLOG  STM   14,12,12(R13)
         LR    R11,R15             BASE REGISTER
         LR    R15,R13
         LA    R13,SAVE
         ST    R13,8(,R15)         PUT NEW ADDRESS IN OLD SAVE AREA
         ST    R15,4(,R13)         PUT OLD ADDRESS IN NEW SAVE AREA
         SPACE
         L     R2,0(,R1)           POINT TO PARM
         LH    R3,0(,R2)           GET LENGTH OF PARM
         LTR   R3,R3
         BZ    PARMX
         CH    R3,=H'16'           IS LENGTH EXCESSIVE
         BNH   *+8                 NO
         LH    R3,=H'16'           YES, TRUNCATE IT
         BCTR  R3,0                LENGTH MINUS 1 FOR EX
         B     *+10                SKIP MVC
         MVC   PARM(0),2(R2)       EXECUTED
         EX    R3,*-6              COPY PARM
         OC    PARM(16),BLANKS     CAPS
         LA    R4,PARM
         LA    R0,13               LOOK AT BYTES 1-13
PARMFUL  CLC   0(4,R4),=C'FULL'    PARM=FULL (COMPARE SEQUENCE NUMBERS)
         BNE   NOTFULL             NO
*        MVI   MLENGTH,79          (REPLACED BY NEXT INSTRUCTION)
         MVI   MLENGTH+1,0         YES, CHANGE 8 TO ZERO
         B     PARM2
NOTFULL  LA    R4,1(,R4)
         BCT   R0,PARMFUL
PARM2    LA    R4,PARM
         LA    R0,14               LOOK AT BYTES 1-14
PARMASM  CLC   0(3,R4),=C'ASM'     PARM=ASM (USE DEFAULT IGNORE DATA)
         BNE   NOTASM              NO
         LA    R2,ENDDFTIG         YES, POINT TO END OF DEFAULT DATA
         ST    R2,IGASMS+4         STORE ENDING ADDRESS
         B     PARMX
NOTASM   LA    R4,1(,R4)
         BCT   R0,PARMASM
PARMX    EQU   *
         SPACE
         TM    0(R1),X'80'         ONLY 1 PARAMETER
         BO    NODD                YES, BYPASS DD ROUTINE
         L     R2,4(,R1)           POINT TO DDNAME LIST
         LH    R1,0(,R2)           GET LENGTH OF DDNAME LIST
         LA    R2,2(,R2)           POINT PAST LENGTH
         SPACE
         CH    R1,=H'40'           LONG ENOUGH FOR SYSIN
         BL    NODD                NO, BRANCH
         CLI   32(R2),0            SYSIN OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   IGNORE+DDNAM(8),32(R2)
         SPACE
         CH    R1,=H'48'           LONG ENOUGH FOR SYSPRINT
         BL    NODD                NO, BRANCH
         CLI   40(R2),0            SYSPRINT OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   SYSPRINT+DDNAM(8),40(R2)
         SPACE
         CH    R1,=H'56'           LONG ENOUGH FOR ECHO
         BL    NODD                NO, BRANCH
         CLI   48(R2),0            REENTRY OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   PVECTOR(4),48(R2)   YES, SAVE THE REENTRY VECTOR
         SPACE
         CH    R1,=H'64'           LONG ENOUGH FOR SYSUT1
         BL    NODD                NO, BRANCH
         CLI   56(R2),0            SYSUT1 OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   OLD+DDNAM(8),56(R2)
         SPACE
         CH    R1,=H'72'           LONG ENOUGH FOR SYSUT2
         BL    NODD                NO, BRANCH
         CLI   64(R2),0            SYSUT2 OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   NEW+DDNAM(8),64(R2)
NODD     EQU   *
         SPACE
         OPEN  (NEW,,OLD,,SYSPRINT,OUTPUT)
         LA    R2,SYSPRINT
         TM    OFLGS(R2),X'10'     DID SYSPRINT OPEN
         BNO   EXIT12              NO, BRANCH
         LA    R2,OLD
         TM    OFLGS(R2),X'10'     DID OLD DCB OPEN
         BNO   EXIT12              NO, BRANCH
         LA    R2,NEW
         TM    OFLGS(R2),X'10'     DID NEW DCB OPEN
         BNO   EXIT12              NO, BRANCH
         LA    R2,IGNORE+DDNAM
         DEVTYPE (R2),DEVAREA
         LTR   R15,R15             IS IGNORE DD PRESENT
         BNZ   IGNAB               NO, SKIP OPEN
         OPEN  (IGNORE)
IGNAB    EQU   *
         SPACE
         LA    R2,OLD
         LH    R10,LRECL(,R2)      GET LRECL
         TM    RECFM(R2),X'10'     IS IT BLOCKED
         BO    *+8                 YES, BRANCH
         LH    R10,BLKSI(,R2)      NO, BLKSIZE IS RECORD LENGTH
         SPACE
         LA    R2,NEW
         LH    R1,LRECL(,R2)       GET LRECL
         TM    RECFM(R2),X'10'     IS IT BLOCKED
         BO    *+8                 YES, BRANCH
         LH    R1,BLKSI(,R2)       NO, BLKSIZE IS RECORD LENGTH
         SPACE
         CR    R10,R1              IS OLD LONGER THAN NEW
         BNH   *+6                 NO, BRANCH
         LR    R10,R1              YES, USE THE SHORTER OF THE TWO
         LA    R1,256              MAX RECORD SIZE
         CR    R10,R1              IS LRECL TOO LONG
         BNH   *+6                 NO, BRANCH
         LR    R10,R1              YES, USE 256
         SPACE
         GETMAIN VU,LA=MIN,A=STARTADD      GET ALL AVAILABLE CORE
         LM    R0,R2,FOURK         LOAD 4K, START, SIZE
*        SR    R2,R0               SUBTRACT OFF 4K
         ST    R2,SIZE             UPDATE REGION SIZE
         AR    R1,R2               LAST USEABLE BYTE
         ST    R1,HIGHCORE         SAVE FOR LATER
         SPACE
         L     R2,STARTADD
         ST    R2,FIRSTIG
         TM    IGNORE+OFLGS,X'10'  IGNORE OPEN?
         BO    GETIG               YES, BRANCH                      ABL
         MVC   FIRSTIG(8),IGASMS   FIRST AND LAST IGNORES           ABL
         B     NOIG
         SPACE
GETIG    GET   IGNORE,(2)
         LA    R2,80(,R2)
         B     GETIG
         SPACE
ENDIG    CLOSE (IGNORE)
         ST    R2,LASTIG                                            ABL
NOIG     ST    R2,LOWOLD                                            ABL
         ST    R2,HIGHOLD
         ST    R2,CURROLD
*        LA    R2,80(,R2)          (REPLACED BY NEXT 1)
         AR    R2,R10
         ST    R2,LOWNEW
         ST    R2,HIGHNEW
         ST    R2,CURRNEW
         LA    R8,OLD
         LA    R9,NEW
*
*    THIS COMPLETES THE PROGRAM INITIALIZATION
         EJECT
SWAP     XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         L     R3,CURR(,R9)
         C     R3,HIGH(,R9)
         BL    NOINPUT
         TM    OFLGS(R9),X'10'         CURRENT DCB OPEN?
         BZ    SWAP                    NO, BRANCH (AND SWAP)
         LA    R1,0(,R9)
         GET   (1)
         SPACE
*        LA    R0,80(,R3)              (REPLACED BY NEXT 1)
         LA    R0,0(R10,R3)
         SPACE
         C     R0,HIGHCORE             FIT IN CORE?
         BH    NOTCORE                 NO, BRANCH
         SPACE
*        MVC   0(80,R3),0(R1)          (REPLACED BY NEXT 5)
         LR    R15,R10                 GET LENGTH
         BCTR  R15,0                   LENGTH MINUS 1 FOR EX
         B     *+10                    SKIP MVC
         MVC   0(0,R3),0(R1)           EXECUTED
         EX    R15,*-6                 MOVE THE RECORD
         SPACE
*        LA    R0,160(,R3)             (REPLACED BY NEXT 3)
         LR    R0,R10                  GET LENGTH
         AR    R0,R0                   DOUBLE IT
         AR    R0,R3                   ADD R3
         SPACE
         ST    R0,HIGH(,R9)
         SPACE 2
*  SEE IF THIS RECORD (R3) IS ANYWHERE IN THE OTHER BUFFER
*
NOINPUT  L     R2,LOW(,R8)
*        IC    R1,MLENGTH          (REPLACED BY NEXT 3)
         LR    R1,R10              GET LENGTH TO COMPARE
         BCTR  R1,0                MINUS 1 FOR EX
         SH    R1,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS
NEXT8    C     R2,CURR(,R8)
         BNL   NO8
         B     *+10                SKIP CLC
         CLC   0(1,R3),0(R2)
         EX    R1,*-6              EXECUTE CLC
         BE    FOUND8
*        LA    R2,160(,R2)         (REPLACED BY NEXT 2)
         AR    R2,R10
         AR    R2,R10
         B     NEXT8
NO8      EQU   *                   NOT IN THE BUFFER
*        LA    R3,160(,R3)         (REPLACED BY NEXT 2)
         AR    R3,R10
         AR    R3,R10
         ST    R3,CURR(,R9)        UPDATE THE CURRENT POINTER
         B     SWAP
         SPACE 2
*    DOES NOT FIT IN THE ALLOCATED CORE
*
NOTCORE  BAL   R14,NOTEQUAL               OUTPUT NOT EQUAL MESSAGE
         CLOSE (NEW,,OLD)
         MVI   RETCODE+1,8                RETURN CODE 8
         MVC   BUFFER(35),CORE            CORE OVERFLOW MESSAGE
         MVC   BUFFER+35(86),BUFFER+34    CLEAR THE REMAINDER
         BAL   R14,PUTLINE                INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,X'40'
         B     CORETERM
         SPACE 2
PUTLINE  ST    R14,R14SAVE
         CLI   PVECTOR,C'*'               PDS REENTRY?
         BE    PUTL10                     YES, BRANCH
         PUT   SYSPRINT,BUFFER            NO, OUTPUT THE LINE
         L     R14,R14SAVE
         BR    R14
PUTL10   LA    R1,BUFFER                  ADDRESS OF OUTPUT DATA
         L     R15,PVECTOR                REENTRY VECTOR ADDRESS
         BALR  R14,R15                    RETURN TO PDS
         LTR   R15,R15                    SUCCESSFUL OUTPUT?
         BNZ   EXIT12                     NO - ATTENTION, BRANCH
         L     R14,R14SAVE
         BR    R14
         EJECT
*   RECORD WAS FOUND -- SEE IF IT IS TO BE IGNORED
*
FOUND8   CLC   CURR(4,R9),LOW(R9)           RECORDS IN ACTIVE BUFFER?
         BNE   CHKIG                        YES, CHECK IGNORES
         ST    R2,CURR(,R8)
         B     IGEQUAL
CHKIG    L     R15,FIRSTIG                FIRST IGNORE
         LA    R0,79
         CR    R1,R0                      IS LENGTH GREATER THAN 80
         BNH   *+6                        NO
         LR    R1,R0                      YES, REDUCE TO 80
LOOPIG   C     R15,LASTIG                 LAST IGNORE?
         BNL   NOTIG                      YES, BRANCH
         EX    R1,CLCIG                   AN IGNORE RECORD?
         BE    NO8                        YES, BRANCH
         LA    R15,80(,R15)
         B     LOOPIG                     CHECK ALL IGNORES
CLCIG    CLC   0(1,R3),0(R15)
*
NOTIG    ST    R2,CURR(,R8)               NOT AN IGNORE RECORD
         BAL   R14,NOTEQUAL               OUTPUT "NOT EQUAL"
IGEQUAL  BAL   R14,INBUFF                 ADD TO COMPARE BUFFER
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         BAL   R14,INBUFF                 ADD TO OTHER BUFFER
         B     SWAP
         SPACE 2
*  END OF FILE (OLD OR NEW)
*
EOLDNEW  CLOSE ((9))                      CLOSE THE CURRENT FILE
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         TM    OFLGS(R9),X'10'            OTHER FILE STILL OPEN?
         BNZ   SWAP                       YES, BRANCH
         CLC   LOWOLD(4),HIGHOLD          BUFFER EMPTY?
         BNE   *+14                       NO, BRANCH
         CLC   LOWNEW(4),HIGHNEW          OTHER BUFFER EMPTY TOO?
         BE    TRIPLE                     YES, QUIT
         BAL   R14,NOTEQUAL               FLUSH THE CURRENT BUFFERS
         B     TRIPLE
         EJECT
*  TERMINATE -- LIST NUMBER OF UNEQUAL COMPARES
*
TRIPLE   MVI   BUFFER,C'-'
CORETERM MVC   BUFFER+1(6),EDCOUNT          EDIT MASK
         MVC   BUFFER+7(35),BLOCKS          UNEQUAL BLOCKS MESSAGE
         MVC   BUFFER+42(79),BUFFER+41      BLANK REMAINDER
         LH    R1,COUNT
         CVD   R1,DOUBLE
         ED    BUFFER+1(6),DOUBLE+5
         BAL   R14,PUTLINE                INVOKE THE PUTLINE ROUTINE
         B     EXIT
         SPACE 3
EXIT12   MVI   RETCODE+1,12
EXIT     LA    R2,NEW
         L     R0,SIZE             SIZE OF DYNAMIC AREA
         L     R1,STARTADD
         FREEMAIN R,LV=(0),A=(1)   FREE THE DYNAMIC AREA
         LA    R2,NEW
         TM    OFLGS(R2),X'10'     IS DCB OPN
         BNO   EXITNEWC
         CLOSE (NEW)
EXITNEWC EQU   *
         LA    R2,OLD
         TM    OFLGS(R2),X'10'     IS DCB OPN
         BNO   EXITOLDC
         CLOSE (OLD)
EXITOLDC EQU   *
         LA    R2,SYSPRINT
         TM    OFLGS(R2),X'10'     IS DCB OPN
         BNO   EXITPRTC
         CLOSE (SYSPRINT)
EXITPRTC EQU   *
         LH   R15,RETCODE
         L    R13,4(,R13)                                           ABL
         RETURN (14,12),RC=(15)                                     ABL
         SPACE
*  RE-INITIALIZE THE ACTIVE BUFFER -- SLIDE UNUSED RECORDS DOWN
*
INBUFF   L     R1,LOW(,R9)
         L     R2,CURR(,R9)
         ST    R1,CURR(,R9)
         LR    R15,R10             GET LENGTH FOR EX
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
NXTREC   EQU   *
*        LA    R2,160(,R2)         (REPLACED BY NEXT 2)
         AR    R2,R10
         AR    R2,R10
         C     R2,HIGH(,R9)        FINISHED REINITIALIZING?
         BNL   REINIT              YES, BRANCH
         SPACE
*        MVC   0(80,R1),0(R2)      (REPLACED BY NEXT 1)
         EX    R15,SLIDEMVC        MOVE THE RECORD
         SPACE
*        LA    R1,160(,R1)         (REPLACED BY NEXT 2)
         AR    R1,R10
         AR    R1,R10
         B     NXTREC
SLIDEMVC MVC   0(0,R1),0(R2)       EXECUTED
REINIT   ST    R1,HIGH(,R9)        RESET MAXIMUM POINTER
         BR    R14
         EJECT
*     FLUSH OUT THE NON-EQUAL RECORDS
*
NOTEQUAL ST    R14,NOTEQR14
         MVI   RETCODE+1,4             RETURN CODE 4
         LH    R1,COUNT
         LA    R1,1(,R1)
         STH   R1,COUNT
         MVI   BUFFER,C'-'
         LA    R3,OLD
         TM    SYSPRINT+17,X'4F'        DCBDEVT TERM=TS             ABL
         BNO   MOVES                    NO, BRANCH                  ABL
         MVC   BUFFER+1(120),BLANKS     BLANK PAST THE SCREEN WIDTH ABL
         BAL   R14,PUTLINE              INVOKE THE PUTLINE ROUTINE
MOVES    MVI   BUFFER+9,C'-'
         MVC   BUFFER+10(91),BUFFER+9
         MVC   BUFFER+9(3),OLDNEW(R3)
         MVC   BUFFER+98(3),OLDNEW(R3)
         MVI   BUFFER+7,C'-'
         MVI   BUFFER+102,C'-'
         ZAP   NUMBER(3),=P'0'
         L     R5,LOW(,R3)
FLUSHED  C     R5,CURR(,R3)               IS THIS BUFFER FLUSHED?
         BNL   GETNEW                     YES, BRANCH
         MVI   BUFFER+7,C'-'
         MVI   BUFFER+102,C'-'
         MVC   BUFFER+15(80),0(R5)        ALWAY SHOW 80 BYTES
         AP    NUMBER(3),=P'1'
         MVC   DOUBLE(6),EDMKPAT
         EDMK  DOUBLE(6),NUMBER           POINT R1 TO FIRST NONBLANK
         LA    R14,DOUBLE+5               POINT TO LAST DIGIT
         SR    R14,R1                     GET LENGTH MINUS 1
         STC   R14,MOVEA+1                ALTER MVC LENGTH CODE
MOVEA    MVC   BUFFER+103(1),0(R1)        MOVE NUMBER
         LA    R15,BUFFER+104(R14)
         MVI   0(R15),C'-'
         LA    R14,1(,R14)
         STC   R14,MOVEB+1
         LA    R1,BUFFER+6
         SR    R1,R14
MOVEB    MVC   0(1,R1),BUFFER+102
         TM    SYSPRINT+17,X'4F'        TSO OUTPUT "DA(*)"?         ABL
         BNO   *+10                     NO, BRANCH                  ABL
         MVC   BUFFER+78(43),BLANKS     BLANK PAST SCREEN WIDTH     ABL
         BAL   R14,PUTLINE              INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,X'40'
*        LA    R5,160(,R5)         (REPLACED BY NEXT 2)
         AR    R5,R10
         AR    R5,R10
         B     FLUSHED
*
GETNEW   LA    R1,NEW
         CR    R3,R1                      NEW DONE?
         BE    NOTEQRET                   YES, RETURN
         LR    R3,R1                      NOW SETUP THE NEW BUFFER
         MVC   BUFFER+1(7),BLANKS
         MVI   BUFFER+9,C'-'
         MVC   BUFFER+10(91),BUFFER+9
         MVC   BUFFER+102(19),BLANKS
         TM    SYSPRINT+17,X'4F'          TSO OUTPUT "DA(*)"?       ABL
         BNO   *+10                       NO, BRANCH                ABL
         MVC   BUFFER+78(43),BLANKS       BLANK PAST SCREEN WIDTH   ABL
         BAL   R14,PUTLINE              INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,X'40'
         B     MOVES
         SPACE
NOTEQRET L     R14,NOTEQR14
         BR    R14
         EJECT
*
*        DCB EXIT ROUTINE (USED BY ALL FILES)
*
DCBEXIT  LH    R3,BLKSI(,R1)              BLKSIZE
         LR    R4,R3                      BLKSIZE        FIX-0C9
         TM    RECFM(R1),X'10'            IS IT BLOCKED  FIX-0C9
         BZ    *+8                        NO             FIX-0C9
         LH    R4,LRECL(,R1)              BLOCKED, GET LRECL
         SR    R2,R2
         DR    R2,R4                      BLOCKSIZE/LRECL
         MR    R2,R4                      BLOCKING*LRECL
         CR    R3,R4                      BLOCKSIZE >  LRECL?
         BH    *+10                       YES, BRANCH
         LR    R3,R4                      MAKE BLKSIZE=LRECL
         NI    RECFM(R1),255-X'10'        TURN OFF BLOCKING
         STH   R3,BLKSI(,R1)              NEW BLOCKSIZE
         STH   R3,24(,R1)                 BUFLEN PARAMETER
         CLI   20(R1),X'00'               BUFNO=0?
         BNER  R14                        NO, QUIT
         MVI   20(R1),X'03'               DEFAULT TO 3 BUFFERS
         BR    R14                        EXIT
         SPACE 1
SAVE     DC    18F'0'
         SPACE 1
SYSPRINT DCB  LRECL=121,RECFM=FBA,EXLST=EXITDCB,DDNAME=SYSPRINT,       X
               MACRF=(PM),DSORG=PS
         SPACE 1
IGNORE   DCB  LRECL=80,RECFM=FB,EXLST=EXITDCB,DDNAME=IGNORE,           X
               EODAD=ENDIG,MACRF=(GM),DSORG=PS
FIRSTIG  DC    F'0'                     POINTER TO FIRST IGNORE RECORD
LASTIG   DC    F'0'                     POINTER TO LAST IGNORE RECORD
         SPACE 1
OLD      DCB   EXLST=EXITDCB,DDNAME=OLD,                               X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
LOWOLD   DC    F'0'                     FIRST OLD RECORD
HIGHOLD  DC    F'0'                     HIGHEST USED OLD RECORD
CURROLD  DC    F'0'                     CURRENT OLD RECORD
OLDLIT   DC    C'OLD'
         SPACE 1
NEW      DCB  EXLST=EXITDCB,DDNAME=NEW,                                X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
LOWNEW   DC    F'0'                     FIRST NEW RECORD
HIGHNEW  DC    F'0'                     HIGHEST USED NEW RECORD
CURRNEW  DC    F'0'                     CURRENT NEW RECORD
NEWLIT   DC    C'NEW'
LOW      EQU   LOWNEW-NEW         DISPLACEMENT TO LOWOLD AND LOWNEW
HIGH     EQU   HIGHNEW-NEW        DISPLACEMENT TO HIGHOLD AND HIGHNEW
CURR     EQU   CURRNEW-NEW        DISPLACEMENT TO CURROLD AND CURRNEW
OLDNEW   EQU   NEWLIT-NEW         DISPLACEMENT TO OLD OR NEW LITERAL
         EJECT
DOUBLE   DC    D'0'
EXITDCB  DC    X'85',AL3(DCBEXIT)
RETCODE  DC    H'0'
COUNT    DC    H'0'
NUMBER   DC    XL3'0'
*MLENGTH DC    AL1(71)             COMPARE LENGTH FOR EACH RECORD
MLENGTH  DC    H'8'                ADJUSTMENT TO COMPARE LENGTH
MIN      DC    F'20480'             MINIMUM CORE TO GETMAIN
MAX      DC    F'204800'            MAXIMUM CORE TO GETMAIN
FOURK    DC    F'4096'              AMOUNT OF CORE TO RELEASE
STARTADD DC    F'0'                 BUFFER START ADDRESS
SIZE     DC    F'0'                 SIZE OF THE BUFFER AREA
HIGHCORE DC    F'0'                 MAXIMUM BUFFER ADDRESS
BUFFER   DC    X'004040404040406040000000606060'
         DC    80X'00',X'606060000000',X'4060404040404040'
         DC    12C' '
BLANKS   DC    CL121' '
EDCOUNT  DC    X'402020202120'
EDMKPAT  DC    X'402020202020'
CORE     DC    C'-CORE OVERFLOW - COMPARE ABANDONED '
BLOCKS   DC    C' BLOCKS OF COMPARE ERRORS DETECTED '
DEVAREA  DC    2F'0'
PARM     DC    CL16' '
NOTEQR14 DC    F'0'
PVECTOR  DC    F'0'
R14SAVE  DC    F'0'
IGASMS   DC    A(DFTIG,DFTIG)           DEFAULT IGNORE TABLE        ABL
DFTIG    DC    CL80'         EJECT   '                              ABL
         DC    CL80'         SPACE   '                              ABL
         DC    CL80'         SPACE 1 '                              ABL
         DC    CL80'         SPACE 2 '                              ABL
         DC    CL80'         SPACE 3 '                              ABL
         DC    CL80'*                '                              ABL
ENDDFTIG EQU   *                                                    ABL
         LTORG
         DC    0D'0'
         SPACE
RECFM    EQU   36
DDNAM    EQU   40
OFLGS    EQU   48
LRECL    EQU   82
BLKSI    EQU   62
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   COMPAREB
//*
//LNK2   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)
//SYSLMOD  DD  DISP=OLD,DSN=SYS1.CMDLIB(COMPAREB)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))
//*
//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  DSN=SYS2.HELP(COMPARE),DISP=SHR
//SYSIN    DD  *
//SYSUT1   DD  *
)F FUNCTION -
  THE COMPARE COMMAND COMPARES TWO SEQUENTIAL DATA SETS OR MEMBERS.

  THE COMPARE IS DONE BY EITHER THE YALE COMPARE PROGRAM (COMPAREB)
  OR BY THE IBM COMPARE UTILITY PROGRAM (IEBCOMPR).

  THE 'SYSPRINT' MESSAGES ARE WRITTEN TO WHEREVER FILENAME(SYSPRINT)
  IS ALLOCATED - USUALLY TO THE TERMINAL.

)X SYNTAX  -
         COMPARE  'OLD-DSNAME'  'NEW-DSNAME'

             OPTIONAL KEYWORDS ARE:
                FULL     - INCLUDE THE SEQUENCE NUMBERS (YALE PGM).
                ASM      - COMPARING ASSEMBLER SOURCE CODE (YALE PGM).
                IEBCOMPR - THE IEBCOMPR UTILITY IS TO BE USED.
                ZEBCOMPR - THE MODIFIED IEBCOMPR IS TO BE USED.
                OVOL(VOLUME) - VOLUME CONTAINING THE OLD DATA SET.
                           NOT NEEDED IF CATALOGED.
                NVOL(VOLUME) - VOLUME CONTAINING THE NEW DATA SET.
                           NOT NEEDED IF CATALOGED.
                OUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE OLD
                           DATA SET. NOT NEEDED IF CATALOGED.
                NUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE NEW
                           DATA SET. NOT NEEDED IF CATALOGED.
                SYSOUT   - MESSAGES TO A SYSOUT DATA SET.
                PRINT    - MESSAGES TO TERMINAL (DEFAULT).
                NOPRINT  - MESSAGES TO DUMMY FILE.
                OUTFILE(FILENAME) - MESSAGES TO SPECIFIED DDNAME.

             WHEN THE OVOL OR NVOL KEYWORDS ARE USED TO INDICATE
             TWO IDENTICALLY NAMED DATASETS ON DIFFERENT VOLUMES
             ARE BEING USED, UNEXPECTED RESULTS CAN OCCUR UNLESS
             BOTH OVOL AND NVOL ARE SPECIFIED.  FOR EXAMPLE, IF
             OVOL IS SPECIFIED AND NVOL IS NOT, THE ALLOCATION
             OF 'NEWDSNAME' WITH NO VOLUME SPECIFIED MAY PICK UP
             THE ALREADY ALLOCATED 'OLDDSNAME' INSTEAD OF THE
             'NEWDSNAME' IN THE CATALOG.
  REQUIRED - 'OLD DSNAME'   'NEW DSNAME'
  DEFAULTS - THE YALE COMPARE PROGRAM (COMPAREB) IS USED.
  ALIAS    - NONE
)O OPERANDS -
  'DSNAME1' -  THE NAME OF THE SYSUT1 OR OLD DATA SET.
             A MEMBER NAME MUST BE SPECIFIED IF IT IS PARTITIONED.
  'DSNAME2' -  THE NAME OF THE SYSUT2 OR NEW DATA SET.
             A MEMBER NAME MUST BE SPECIFIED IF IT IS PARTITIONED.
))IEBCOMPR - THE IBM UTILITY PROGRAM 'IEBCOMPR' IS TO BE USED.
