***********************************************************************
*$ANY                                                                 *
*$DEL B001210                                                         *
*H B001210 S=INFO C=* D=FEB83 L=030                                   *
*T   IMS210 - TIME INITIATED FACILITY                                 *
*K IMS210 TIME INITIATED FACILITY AUTOMATIC COMMANDS TIMED            *
*                                                                     *
*                 CHANGES  COPYRIGHT: 1983 RAINIER NATIONAL BANK      *
*                                     SEATTLE WASHINGTON              *
*                                     (206) 433-7467                  *
* MEMBER: IMS210                                                      *
* SMP USERMOD: N/A                                                    *
* OBTAINED FROM: CBT199.FILE332   (IF CBT/SHARE TAPE GIVE VERSION #)  *
*                                                                     *
* SOURCE LIB: SLICK.PROD.SOURCE                                       *
* MACRO LIBS NEEDED: TEC.RNB.MACLIB                                   *
*                    TEC.SYSTEM.MACLIB                                *
*                    SYS1.AMODGEN                                     *
*                    SYS1.MACLIB                                      *
*                                                                     *
* LOAD LIB:   SYS1.OPS.DAUTHLIB                                       *
* LINKAGE EDITOR ATTRIBUTES: AC=1                                     *
*                                                                     *
* PURPOSE:                                                            *
*        TO ENTER COMMANDS/TRANS ON A TIMED BASIS.                    *
*                                                                     *
* RETURN CODES:                                                       *
*        NONE                                                         *
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
* 02/14/83 TIM A  INITIAL VERSION FROM CBT199.FILE332                 *
*                                                                 001 *
* 03/29/83 TIM A  ADDED WAIT COMMAND FOR TIMING IN BATCH MODE     001 *
*                 ADDED BATCH MODE WILL READ COMMANDS AS PS FILE  001 *
*                 AND WILL TERMINATE WHEN INPUT IS ALL READ       001 *
*$EOM                                                                 *
***********************************************************************
         EJECT
*----------------------------------------------------------------------
*
*        THIS ROUTINE PROVIDES FOR AUTOMATIC COMMANDS IN AN MVS/IMS
*        SP1.3 ENVIRONMENT.
*
*        WHEN RUNNING AS A STARTED TASK IT WILL PROCESS USER DEFINED
*        COMMANDS BY DAY OF WEEK (USER DEFINED). THESE USER DEFINED
*        COMMANDS CAN BE EITHER O/S OR IMS COMMANDS.
*
*        FOR THE AUTO-COMMAND FUNCTIONS A PARTITIONED DATASET IS USED
*        TO HOLD THE COMMANDS.
*
*        WHEN RUNNING AS A JOB IT WILL PROCESS USER DEFINED COMMANDS
*        BY DAY OF WEEK (USER DEFINED) AND THEN TERMINATE WHEN THE END
*        OF THE COMMANDS FILE IS REACHED.
*
***********************************************************************
         EJECT
***********************************************************************
*
*
*
*        DDNAME     USE AND FUNCTION
*        --------   -------------------------------------------------
*
*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE
*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND
*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS
*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE
*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.
*
*
*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO
*        BE ADDED TO SYS1.PROCLIB.
*
*        //IMS210   EXEC PGM=IMS210,TIME=1440
*        //COMMANDS DD DISP=SHR,DSN=IMS.X033.COMMANDS
*
*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF JCL TO USE
*        FOR A BATCH JOB.
*
*        //XXXXXXXX JOB .....
*        //IMS210   EXEC PGM=IMS210
*        //COMMANDS DD *      COMMANDS FOLLOW
*
***********************************************************************
         EJECT
***********************************************************************
*
*        THE AUTOMATIC COMMAND FUNCTION OPERATES ON A 1440 MINUTE CYCLE
*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK
*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY
*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)
*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.
*
*        COMMANDS TO BE EXECUTED ARE CONTAINED IN MEMBERS THAT
*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE
*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.
*
*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT
*                    1:00 IN THE MORNING.
*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.
*
*            @2400   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.
*
*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY
*        MUST BE PREFIXED WITH THE 'AT SIGN' (@).
*
*
*        COMMAND RECORD SYNTAX
*
*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW
*        THE SYNTAX DEFINED BELOW.
*
*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS
*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED
*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS
*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.
*
*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING
*        ON THAT DAY.
*
*        FORMAT:
*
*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)
*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)
*        15   ===>(BLANK)
*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)
*        15   ===>(BLANK)
*        16   ===>IMSI             (4 CHARACTER IMSID)
*        20   ===>(BLANK)
*        21   ===>COMMAND DATA     (THROUGH COLUMN 71)
*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)
*
*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS
*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH
*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA
*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO
*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN
*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,
*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED
*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.
*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY
*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A
*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,
*        SPECIFY THE DAY AS ASTERISKS ('09/**').
*
*        IF THE IMSID FIELD IS NON BLANK THEN THE COMMAND IS
*        CONSIDERED TO BE AN IMS COMMAND FOR THE IMS SYSTEM WITH
*        THAT IMSID. IF THE IMSID FIELD IS BLANK THE COMMAND IS
*        TREATED AS AN OS COMMAND. THE IMS COMMANDS ARE ISSUED BY
*        FINDING THE OUTSTANDING REPLY FOR THE GIVEN IMSID AND THEN
*        REPLYING TO IT.
*                                                                  001
*        IF THE IMSID FIELD HAS **** IN IT THE PROGRAM TERMINATES  001
*        AND IF THE IMSID FIELD HAS ++++ IN IT THE PROGRAM WILL    001
*        WAIT THE NUMBER OF SECONDS SPECIFIED IN THE COMMAND FIELD.001
*        (FORMAT SSSS)                                             001
*
*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD
*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 20 AND CONTINUED
*        DATA BEGINS IN COLUMN 21.
*
***********************************************************************
         EJECT
***********************************************************************
*
*        EXAMPLES OF AUTOMATIC COMMANDS:
*
*   COLUMNS:  1      8       16   21                              71
*             ..     .       .    .                               .
*   COL-1---->*MM/DD MTWTFSS IMSI COMMAND------------------------->72
*
* MEMBER=@0300
*   COL-1---->       XXXXXX       D J,L
*   COL-1---->             X      D A,L
*   COL-1----> **/01      *  PROD /STA REG REORG.     DO REORG ON
*   COL-1----> **/02      *  PROD /STA REG REORG.    1ST SATURDAY
*   COL-1----> **/03      *  PROD /STA REG REORG.    OF THE MONTH
*   COL-1----> **/04      *  PROD /STA REG REORG.        "
*   COL-1----> **/05      *  PROD /STA REG REORG.        "
*   COL-1----> **/06      *  PROD /STA REG REORG.        "
*   COL-1----> **/07      *  PROD /STA REG REORG.        "
* MEMBER=@0800
*   COL-1---->       MTWTF   PROD /CHE SNAPQ.
* MEMBER=@1000
*   COL-1---->       -----   PROD /STA REG IMSMONP.
* MEMBER=@1815
*   COL-1---->       MTWT    PROD /DIS A.
* MEMBER=@1830
*   COL-1---->           ?   PROD /CHE SNAPQ.
*
***********************************************************************
         EJECT
***********************************************************************
*
*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS
*        'AUTHORIZED'.
*
*        BOB BECKER MAY ,1979  ALLEN-BRADLEY COMPANY .. MILWAUKEE
*        TIM ASHMORE APRIL, 1983  RAINIER NATIONAL BANK .. SEATTLE
*
*        REGISTER USAGE
*
*        R0   - WORK
*        R1   - WORK
*        R2   - WORK
*        R3   - WORK
*        R4   - WORK
*        R5   - WORK
*        R6   - WORK
*        R7   - WORK
*        R8   - UNUSED
*        R9   - QEDIT ORIGIN BASE
*        R10  - COMMANDS DCB ADDRESS
*        R11  - BASE # 1
*        R12  - BASE # 2
*        R13  - SAVE AREA
*        R14  - BAL
*        R15  - WORK
*
*----------------------------------------------------------------------
         EJECT
         PRINT NOGEN
*----------------------------------------------------------------------
*
*        MAIN LINE SECTION
*
*----------------------------------------------------------------------
IMS210   BGNSECT RENT=NO,BASE=(12),PARM=(2),                           *
               C='TIME INITIATED FACILITY'
         LA    R11,2048(,R12)     CREATE
         LA    R11,2048(,R11)            SECOND
         USING IMS210+4096,R11                  BASE REG
         USING IHADCB,R10         DCB DSECT
         MVI   TERMSW,C'N'          INITIALIZE TERMINATION SWITCH
         CALLM INIT               INITIAL STUFF
         IF    (MEMBER,NE,BLANKS),THEN    IF COMMAND IN PARM
           CALLM PROCMD                     PROCESS IT
         ENDIF
         IF    (BATCHSW,EI,C'N'),THEN    IF NOT BATCH JOB          001
           CALLM TIMESEL              SELECT TIME TO WAIT FOR
         ENDIF                                                     001
         WHILE (TERMSW,EI,C'N'),DO
           CALLM WAIT               WAIT FOR SOMETHING
           IF    (TYPESW,EI,C'T'),THEN    IF TIMER POP
             CALLM PROINT                   PROCESS INTERVAL COMMANDS
             CALLM TIMESEL                  SELECT TIME TO WAIT FOR
           ELSE                           ELSE MUST BE MODIFY
             CALLM PROCIB                   SO PROCESS MODIFY/STOP CMD
           ENDIF
         ENDDO
         CALLM CLEANUP          CLEAN UP FOR TERMINATION
         EMOD  RC=0             TERMINATE
         EJECT
*----------------------------------------------------------------------
*
*        CHECK FOR OPERATOR REQUEST
*
*----------------------------------------------------------------------
PROCIB   BMOD
         L     R3,0(R9)           GET ADDRESS OF THE CIB
         USING CIBSECT,R3         ALLOW ADDRESSABILITY
         IF    (CIBVERB,EI,CIBSTOP),THEN  IS THIS A STOP COMMAND
           MVI   TERMSW,C'Y'                SHOW TO TERMINATE
         ELSE                             MUST BE MODIFY
           MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER
           IC    R15,CIBDATLN+1     GET SIZE OF MODIFY DATA
           BCTR  R15,R0             DECREMENT FOR EXECUTE
           EX    R15,MOVEDATA       MOVE TO COMMDATA
           QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB
           OC    COMMDATA,BLANKS    UPPER CASE
           CALLM PROMOD             CONTINUE PROCESSING MODIFY
         ENDIF
         EMOD  RC=(15)
         DROP  R3
         EJECT
*----------------------------------------------------------------------
*
*        PROCESS COMMAND EXECUTION REQUESTED BY OPERATOR
*
*----------------------------------------------------------------------
PROMOD   BMOD  (3,4)
         MVI   LOOPSW,C'Y'        INIT TO LOOPING
         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND
         SDO
           LR    R4,R3              SAVE BEGINNING ADDRESS FOR MOVE
           SR    R15,R15            CLEAR WORK REGISTER
           LA    R14,9              SET LOOP CONTROL
           WHILE AND,(0(R3),NEI,C' '),(0(R3),NEI,C','),                *
               ((R14),NE,0),DO
             LA    R3,1(R3)           BUMP TO NEXT CHARACTER
             LA    R15,1(R15)         BUMP CHAR COUNT REG
             BCTR  R14,0              DECRIMENT LOOP CONTROL
           ENDDO
           IF    ((R14),EQ,0),THEN     IF MEM NAME MORE THAN 9 CHARS
             MVI   LOOPSW,C'N'           STOP LOOPING
             MVC   MEMBER,0(R3)          SAVE OFFENDING DATA
             RNBMSG MSG=MSG1,CALL=MSGADDR,MF=(E,MSG1) PUT OUT MESSAGE
           ELSE
             BCTR  R15,R0             DECREMENT FOR MOVE
             MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA
             EX    R15,MOVEMEM        MOVE MEMBER NAME
             CALLM PROCMD             PROCESS COMMAND
           ENDIF
           IF    (0(R3),EI,C','),THEN    IF MORE TO DO
             LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER
           ENDIF
         UNTIL OR,(0(R3),EI,C' '),(LOOPSW,EI,C'N'),ENDDO
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION
*
*----------------------------------------------------------------------
INIT     BMOD
         LOAD  EP=TEC462          GET RNBMSG PROGRAM
         ST    R0,MSGADDR         SAVE ADDRESS OF IT
         CALLM CHKBATCH           CHECK TO SEE IF RUNNING AS BATCH 001
         IF    (BATCHSW,EI,C'Y'),THEN    IF BATCH JOB              001
           LA    R10,BCOMMAND           SET UP DCB ADDRESS         001
           OPEN  (BCOMMAND,)                                       001
           CALLM CHKOPEN                CHECK FOR VALID OPEN       001
         ELSE                            ELSE STARTED TASK         001
           L     R3,0(R2)           PARM POINTER
           LH    R2,0(R3)           GET LTH OF PARM
           IF    ((R2),GT,0),THEN   IF PARM WAS GIVEN
             IF    ((R2),GT,8),THEN   IF PARM TOO LONG
               RNBMSG MSG=MSG2,CALL=MSGADDR,MF=(E,MSG2) PUT OUT MESSAGE
             ELSE
               BCTR  R2,0               DECR FOR EXECUTE
               EX    R2,MVCPARM         MOVE PARM TO MEMBER
             ENDIF
           ENDIF
           XC    BUFFER,BUFFER          ZERO BUFFER ADDRESS
           LA    R10,COMMANDS           SET UP COMMANDS DCB ADDRESS
           OPEN  (COMMANDS,,DIR,)
           CALLM CHKOPEN                CHECK FOR VALID OPEN       001
         ENDIF                                                     001
         IF    (TERMSW,EI,C'N'),THEN   IF NOT TERMINATING
           CALLM GETCOMM                 GET COMM ECB
           CALLM INITXM                  INITIALIZE XM STUFF
           CALLM INITSUB                 INITIALIZE SUBTASK
         ENDIF
         MVC   IMSID,BLANKS               BLANK OUT IMSID INITIALLY
         EMOD  RC=(15)
         EJECT                                                     001
*------------------------------------------------------------------001
*                                                                  001
* CHECK TO SEE OPEN WAS OK                                         001
*                                                                  001
*------------------------------------------------------------------001
CHKOPEN  BMOD                                                      001
         IF    (DCBOFLGS,ON,DCBOFOPN),THEN   OPEN OK?
           CALLM DAYDATE            SET UP THE DATE/TIME/DAY FIELDS
           L     R0,BUFSIZE         MAX BLKSIZE
           GETMAIN R,LV=(0)
           ST    R1,BUFFER          STORE FOR USE AS READ BUFFER
         ELSE                                OPEN NOT OK
           RNBMSG MSG=MSG3,CALL=MSGADDR,MF=(E,MSG3) PUT OUT MESSAGE
           MVI   TERMSW,C'Y'        SHOW TO TERMINATE
         ENDIF
         EMOD  RC=(15)                                             001
         EJECT                                                     001
*------------------------------------------------------------------001
*                                                                  001
* CHECK TO SEE IF JOB IS RUNNING AS BATCH OR AS A STARTED TASK     001
*                                                                  001
*------------------------------------------------------------------001
CHKBATCH BMOD                                                      001
         USING PSA,R0                                              001
         L     R1,PSATOLD         GET ADDRESS OF TCB               001
         USING TCB,R1                                              001
         L     R1,TCBJSCB         GET ADDRESS OF JSCB              001
         USING IEZJSCB,R1                                          001
         L     R1,JSCBSSIB        GET JES SSIB                     001
         USING SSIB,R1                                             001
         IF    (SSIBJBID,EI,C'J'),THEN    IF JOB                   001
           MVI   BATCHSW,C'Y'         SHOW AS BATCH JOB            001
           MVC   MEMBER(8),=CL8'????????'   FORCE TO READ CMDS     001
         ELSE                                                      001
           MVI   BATCHSW,C'N'         SHOW AS NON-BATCH JOB        001
         ENDIF                                                     001
         EMOD  RC=(15)                                             001
         DROP  R1                                                  001
         DROP  R0                                                  001
         EJECT
*----------------------------------------------------------------------
*
*        GET COMM ECB AND ALLOW MODIFIES
*
*----------------------------------------------------------------------
GETCOMM  BMOD
         EXTRACT COMM,'S',FIELDS=(COMM)
         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS
         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS
         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST
         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT
         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING
         BZ    GETCOMMA           NO, MUST BE BATCH EXECUTION
         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB
GETCOMMA DS    0H
         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZE XM INTERFACES
*
*----------------------------------------------------------------------
INITXM   BMOD  (2)
         MODESET MODE=SUP,KEY=NZERO   GET INTO SUPER MODE
         EPAR  R1                     GET PRIMARY ASID
         STH   R1,PASID               SAVE IT FOR LATER
         L     R2,CVTPTR              GET CVT
         L     R2,CVTCUCB-CVT(R2)     GET UCM
         USING UCM,R2
         ST    R2,UCMADDR             SAVE ADDRESS FOR LATER
         MVC   SASID,UCMCTID          GET ASID OF CONSOLE TASK
         LA    R1,1
         AXSET AX=(R1)                GET X-MEM AUTHORITY
         STH   R0,AXSAVE              SAVE OLD AX VALUE
         EMOD  RC=(15)
         DROP  R2
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZE SUB TASK
*
*----------------------------------------------------------------------
INITSUB  BMOD  (2)
         L     R2,=V(IMS210$)         GET ADDRESS OF SUBTASK
         IDENTIFY EP=IMS210$,ENTRY=(R2)  CREATE ENTRY FOR IT
         ATTACH EP=IMS210$,ECB=TASKECB,ESTAI=(ESTAI,ABENDSW)
         IF    ((R15),EQ,0),THEN           IF ATTACH OK
           ST    R1,TASKTCB                   SAVE TCB ADDRESS
           WAIT  1,ECBLIST=RECBLIST            WAIT FOR IT
           IF    (SSARSW,EI,C'Y'),THEN        IF IN XM MODE
             LH    R1,PASID              GET PRIMARY ASID
             SSAR  R1                    AND RESET TO USE IT
           ENDIF
           IF    (RBECB,ON,X'40'),THEN         IF SUBTASK OK
             MVI   RBECB,X'00'                   CONTINUE
           ELSE                            ELSE SUBTASK TERMINATED
             MVI   TASKECB,X'00'
             MVI   TERMSW,C'Y'              TERMINATE RUN
             RNBMSG MSG=MSG10,CALL=MSGADDR,MF=(E,MSG10)
           ENDIF
         ELSE                          ELSE BAD ATTACH
           ST    R15,ATTRC                SAVE RC FOR MESSAGE
           MVI   TERMSW,C'Y'              TERMINATE RUN
           RNBMSG MSG=MSG11,CALL=MSGADDR,MF=(E,MSG11)
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        SET UP TIMER
*
*----------------------------------------------------------------------
TIMESEL  BMOD
         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY
         USING DIRDSECT,R3
         TIME  DEC
         STCM  R0,12,HHMM         STORE TIME HHMM
         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD
         MVC   @TIME+4(2),=2C'0'
TIMESELA EQU   *
         L     R3,BUFFER          ADDR OF BUFFER
         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY
         CHECK DIRDECB            AND OF COURSE WAIT
         XR    R1,R1              CLEAR A WORK REG
         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK
         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK
         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME
TIMSLA   EQU   *
         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?
         BE    TIMESELD           YES - CHECK FOR LO MEMBER
         CLI   DIRNAME,C'@'       TOD MEMBER ?
         BNE   TIMESELC           NO -SKIP IT
         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME
         LA    R15,4              LOOP CONTROL - HHMM
TIMSLB   EQU   *
         TM    0(R1),X'F0'        NUMERIC ?
         BNO   TIMESELC           NO - SKIP THIS MEMBER
         LA    R1,1(R1)           BUMP TO NEXT BYTE
         BCT   R15,TIMSLB
         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS
         BE    TIMESELB           YES - OK
         MVC   MEMBER,DIRNAME     NO - SAVE BAD NAME
         RNBMSG MSG=MSG4,CALL=MSGADDR,MF=(E,MSG4) AND PUT OUT MESSAGE
         B     TIMESELC
TIMESELB EQU   *
         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER
         BH    TIMESELG           PROCESS THIS MEMBER
TIMESELC EQU   *
         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS
         XR    R1,R1              CLEAR R1
         IC    R1,DIRC            NUMBER OF USER HALFWORDS
         SLL   R1,1               NUMBER OF USER BYTES
         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY
         CR    R3,R5              PAST END OF DIR BLOCK ?
         BL    TIMSLA             NO - CHECK THIS DIR ENTRY
         B     TIMESELA           YES - GET NEXT DIR BLOCK
TIMESELD EQU   *                  ALSO EODAD FOR DIR READS
         AP    HHMM,=P'1000'      ADD 1 HOUR
         MVI   HHMM+1,X'00'       CLEAR MM
         CP    HHMM,=P'24000'     MIDNITE ?
         BL    TIMESELE           NO - OK
         MVC   @TIME,=C'23595999' SET MIDNIGHT AS TIMER VALUE
         B     TIMESELI           GO TO IT
TIMESELE EQU   *
         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR
         B     TIMESELH
TIMESELG EQU   *
         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE
TIMESELH EQU   *
         MVC   @TIME+4(4),=4C'0'
TIMESELI EQU   *
         XC    TIMEECB,TIMEECB
         STIMER  REAL,TIMEPOP,TOD=@TIME
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        PROCESS COMMANDS
*
*----------------------------------------------------------------------
PROCMD   BMOD
         MVI   ISSUESW,C'Y'       INIT TO ISSUE SVC34
         CALLM DAYDATE            RE-ESTABLISH DATE, AND DAY
         IF    (BATCHSW,EI,C'Y'),THEN    IF BATCH JOB              001
           SR    R15,R15                   NO FIND NEEDED          001
         ELSE                            ELSE                      001
           FIND  COMMANDS,MEMBER,D         FIND MEMBER IN PDS
         ENDIF                                                     001
         IF    ((R15),EQ,0),THEN   IF MEMBER FOUND
           CALLM READCMD              READ AND PROCESS MEMBER
         ELSE
           RNBMSG MSG=MSG5,CALL=MSGADDR,MF=(E,MSG5) PUT OUT MESSAGE
           MVI   ISSUESW,C'N'          DO NOT ISSUE SVC34
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        READ COMMAND MEMBER IN COMMANDS PDS
*
*----------------------------------------------------------------------
READCMD  BMOD
         USING CARDSECT,R5
         SDO
           L     R5,BUFFER          ADDR OF BUFFER
           READ  CMDDECB,SF,(R10),(R5),'S'
           CHECK CMDDECB
           LH    R6,DCBLRECL        LRECL
           LH    R7,DCBBLKSI        BLOCK SIZE
           LA    R7,0(R7,R5)        END OF FULL BLOCK
           L     R1,CMDDECB+16      ADDR OF IOB
           LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK
           SR    R7,R1              ADJUSTED BLOCK LENGTH
           SR    R7,R6              DECR TO BEGINNING OF LAST RECORD
           SDO
             CALLM CHKCONT            CHECK FOR CONTINUATION
             IF    (ISSUESW,EI,C'Y'),THEN    IF OK SO FAR
               CALLM CHKCRIT                   CHECK DAY/DATE CRITERIA
               IF    (ISSUESW,EI,C'Y'),THEN   IF OK SO FAR
                 CALLM ISSUESVC                 ISSUE SVC34
               ENDIF
             ENDIF
             MVI   ISSUESW,C'Y'            OK FOR NEXT RECORD
             AR    R5,R6                   BUMP TO NEXT RECORD
           UNTIL ((R5),GT,(R7)),ENDDO      END OF THIS BLOCK?
         UNTIL ((R1),NE,(R1)),ENDDO        LOOP TILL EOF
CARDEOF  DS    0H
         IF    (BATCHSW,EI,C'Y'),THEN      IF BATCH JOB            001
           MVI   TERMSW,C'Y'                 TERMINATE RUN         001
         ENDIF                                                     001
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK FOR VALID CONTINUATION
*
*----------------------------------------------------------------------
CHKCONT  BMOD
         IF    (CONTFLAG,EI,X'FF'),THEN    IS CONTINUATION FLAG ON
           IF    (CARDCONB,NE,BLANKS),THEN   IF INVALID CONTINUE
             RNBMSG MSG=MSG6,CALL=MSGADDR,MF=(E,MSG6) PUT OUT MESSAGE
             MVI   CONTFLAG,X'00'     RESET CONT FLAG
             MVI   ISSUESW,C'N'       DO NOT ISSUE SVC34
           ELSE
             MVC   CMDBUF+59(51),CARDDATA MOVE COMMAND DATA TO BUFR
             IF    (CARDCONT,EI,C' '),THEN IS THIS RECORD CONTINUED
               MVI   ISSUESW,C'N'       DO NOT ISSUE SVC34
               MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG
               RNBMSG MSG=MSG7,CALL=MSGADDR,MF=(E,MSG7) PUT OUT MESSAGE
             ELSE
               MVI   ISSUESW,C'Y'     ISSUE NOW THAT CMD IS COMPLETE
               CALLM ISSUESVC         ISSUE CMD
               MVI   ISSUESW,C'N'     DONE WITH THIS RECORD
             ENDIF
           ENDIF
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK DAY/DATE CRITERIA
*
*----------------------------------------------------------------------
CHKCRIT  BMOD
         IF    (CARDAST,EI,C'*'),THEN      IS COMMENT CARD
           MVI   ISSUESW,C'N'                NO NOT PROCESS FURTHER
         ELSE
           IF    (CARDAST,EI,C' '),THEN    IF BLANK THERE CONTINUE CHK
             IF    (CARDDATE,EQ,BLANKS),THEN    PROCESS DAY ONLY
               CALLM CHKDAY
             ELSE                               CHECK DATE
               CALLM CHKDATE
               IF    (ISSUESW,EI,C'Y'),THEN     IF STILL OK
                 CALLM CHKDAY                     CHECK FOR DAY
               ENDIF
             ENDIF
           ELSE
             MVI   ISSUESW,C'N'           ELSE - BAD COMMENT CHAR
             RNBMSG MSG=MSG8,CALL=MSGADDR,MF=(E,MSG8) PUT OUT MESSAGE
           ENDIF
           IF    (ISSUESW,EI,C'Y'),THEN     IF STILL OK
             CALLM CHKIMS                     CHECK IMSID
           ENDIF
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK DATE CRITERIA
*
*----------------------------------------------------------------------
CHKDATE  BMOD
         IF    (CARDSL,EI,C'/'),THEN    IF VALID DATE
           IF    (CARDDATE,EQ,=C'**/**'),THEN   ANY MONTH/DAY
             EXIT                                 IS OK
           ELSE
             IF    (CARDDATE,EQ,MDATE),THEN   IS IT FOR TODAY
               EXIT                            IS OK
             ELSE
               IF    (CARDDD,EQ,=C'**'),THEN     IS IT FOR ANY DAY
                 IF    (CARDMM,EQ,MDATEMM),THEN       IS IT THIS MONTH
                   EXIT                              IS OK
                 ELSE
                   MVI   ISSUESW,C'N'         DO NOT WANT SVC34
                 ENDIF
               ELSE
                 IF    (CARDMM,EQ,=C'**'),THEN      FOR ANY MONTH
                   IF    (CARDDD,EQ,MDATEDD),THEN       TODAY'S DATE
                     EXIT                                IS OK
                   ELSE
                     MVI   ISSUESW,C'N'         DO NOT WANT SVC34
                   ENDIF
                 ENDIF
               ENDIF
             ENDIF
           ENDIF
         ELSE
           MVI   ISSUESW,C'N'             NOT VALID -
           RNBMSG MSG=MSG9,CALL=MSGADDR,MF=(E,MSG9) PUT OUT MESSAGE
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK DAY OF WEEK CRITERIA
*
*----------------------------------------------------------------------
CHKDAY   BMOD
         SR    R1,R1              CLEAR FOR DAY INDEX
         IC    R1,DAY             GET DAY INDEX
         LA    R1,CARDDAY(R1)     POINT TO TODAYS PROCESS FLAG
         IF    OR,(0(R1),NEI,C' '),(CARDDAY,EQ,BLANKS),THEN        001
*                      IF TODAY OR ALL DAYS                        001
           MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER
           MVC   CMDBUF+3(51),CARDDATA MOVE COMMAND DATA TO BUFR
         ELSE
           MVI   ISSUESW,C'N'       DO NOT ISSUE SVC34
         ENDIF
         IF    (CARDCONT,NEI,C' '),THEN     IS THERE A CONTINUATION
           MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG
           MVI   ISSUESW,C'N'       DO NOT ISSUE CMD YET
         ENDIF                    GET NEXT RECORD
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK FOR IMSID
*
*----------------------------------------------------------------------
CHKIMS   BMOD
         IFCASE (CARDIMSI,EQ,=C'****'),(CARDIMSI,EQ,=C'++++')      001
         CASE ITEM 1      TERMINATION REQUEST                      001
           MVI   TERMSW,C'Y'                    SHOW TO TERMINATE
           MVI   ISSUESW,C'N'                   DO NOT ISSUE CMD
         CASE ITEM 2      WAIT REQUEST                             001
           MVI   ISSUESW,C'N'                   DO NOT ISSUE CMD   001
           IF    (CARDWAIT,NUMERIC),THEN     IF GOOD NUMBER        001
             XC    CVTWORK,CVTWORK              ZERO WORK FIELD    001
             PACK  CVTWORK+4(4),CARDWAIT(4)     CONVERT TO PACKED  001
             CVB   R1,CVTWORK                   CONVERT TO BINARY  001
             MH    R1,=H'100'                   PUT INTO SECONDS   001
             ST    R1,INTERVAL                  AND SAVE IT        001
             STIMER WAIT,BINTVL=INTERVAL        WAIT THAT MANY SECS001
           ELSE                              ELSE BAD NUMBER       001
             RNBMSG MSG=MSG13,CALL=MSGADDR,                        001 *
               INSERTS=(CARDWAIT),MF=(E,MSG13)                     001
           ENDIF                                                   001
         ELSEC                        ELSE IS IMS COMMAND          001
           MVC   IMSID,CARDIMSI             SAVE IMSID GIVEN
         ENDCS                                                     001
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        ISSUE SVC 34 FOR COMMAND
*
*----------------------------------------------------------------------
ISSUESVC BMOD
         CALLM GETIMSRP             GET IMS REPLY ID
         IF    (ISSUESW,EI,C'Y'),THEN    IF FOUND IT OK
           MODESET KEY=ZERO         GET KEY ZERO
           LM    R0,R1,SVCREGS      GET SVC 34 REGS
           SVC   34                 SCHEDULE COMMAND
           MODESET KEY=NZERO        BACK INTO KEY 8
         ENDIF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        GET REPLY FOR PROPER IMSID
*
*----------------------------------------------------------------------
GETIMSRP BMOD
         IF    (IMSID,NE,BLANKS),THEN     IF HAVE AN IMSID TO USE
           MVI   ABENDSW,C'N'               INIT ABEND SWITCH
           MVI   FOUND,C'N'                 INIT FOUND SWITCH
           SR    R2,R2                      ZERO R2 (ABEND COUNTER)
           LA    R3,3                       MAX NUMBER OF ABENDS
           WHILE AND,(FOUND,EI,C'N'),((R2),LT,(R3)),DO
             POST  RECB                       TELL SUBTASK TO WORK
             WAIT  1,ECBLIST=RECBLIST         WAIT FOR IT
             IF    (SSARSW,EI,C'Y'),THEN        IF IN XM MODE
               LH    R1,PASID              GET PRIMARY ASID
               SSAR  R1                    AND RESET TO USE IT
             ENDIF
             IF    (RBECB,ON,X'40'),THEN      IF PROCESSED OK
               MVI   RBECB,X'00'
               LA    R2,10(,R3)                 GET OUT OF LOOP
             ELSE                             ELSE SUBTASK TERMINATED
               MVI   TASKECB,X'00'
               IF    (ABENDSW,EI,C'Y'),THEN     IF SUBTASK ABENDED
                 LA    R2,1(,R2)                  INCR COUNTER
                 DETACH TASKTCB                   DETACH IT
                 CALLM INITSUB                    AND REATTACH IT
                 IF    (TERMSW,EI,C'Y'),THEN      IF ATTACH FAILED
                   LA    R2,10(,R3)                 STOP LOOP
                 ENDIF
               ELSE                             ELSE - IT STOPPED
                 LA    R2,10(,R3)                 STOP LOOP
                 MVI   TERMSW,C'Y'                TERMINATE RUN
               ENDIF
             ENDIF
           ENDDO
           IF    (FOUND,EI,C'N'),THEN         IF NO REPLY FOUND
             MVI   ISSUESW,C'N'                 DO NOT ISSUE CMD
             RNBMSG MSG=MSG12,CALL=MSGADDR,MF=(E,MSG12)
           ENDIF
         ELSE                             ELSE - IS OS COMMAND
           MVC   CMDBUF(112),CMDBUF+3       SHIFT OFF RR, SPACES
           MVC   CMDBUF+112(3),BLANKS       BLANK END
         ENDIF
         MVC   IMSID,BLANKS               BLANK OUT FOR NEXT USE
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        TIMER EXIT
*
*----------------------------------------------------------------------
         BMOD  ,C
TIMEPOP  DS    0H
         USING *,R15
         STM   R14,R12,4(R13)     SAVE REGS
         L     R12,=A(IMS210)
         DROP  R15
         POST  TIMEECB
         LM    R14,R12,4(R13)     RESTORE REGS
         BR    R14
         EMOD
         EJECT
*----------------------------------------------------------------------
*
*        ESTAI EXIT
*
*----------------------------------------------------------------------
         BMOD  ,C
ESTAI    DS    0H
         USING *,R15
         C     R0,=F'12'       IS THERE AN SDWA
         BNE   ESTAI2          NOT = 12 - YES
         MVI   0(R2),C'Y'      SHOW THAT WE ABENDED
         SR    R15,R15           CONTINUE TERMINATION
         BR    R14               AND BRANCH BACK
ESTAI2   DS    0H
         L     R15,0(R1)       GET ADDRESS OF ABENDSW
         MVI   0(R15),C'Y'      AND SHOW THAT WE ABENDED
         SETRP RC=0,WKAREA=(1)   CONTINUE TERMINATION
         BR    R14                AND BRANCH BACK
         DROP  R15
         EMOD
         EJECT
*----------------------------------------------------------------------
*
*        WAIT FOR MODIFY OR TIMER POP
*
*----------------------------------------------------------------------
WAIT     BMOD
         MVI   TYPESW,C' '        INITIALIZE TYPE SWITCH
         SDO
           WAIT  1,ECBLIST=ECBLIST,LONG=YES    WAIT UNTIL ECB IS POSTED
           L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB
           IFCASE (0(R1),ON,X'40'),(TIMEECB,ON,X'40')
           CASE ITEM 1       COMM ECB POSTED
             MVI   TYPESW,C'C'           SHOW COMM ECB POSTED
           CASE ITEM 2       TIMER POP
             MVI   TYPESW,C'T'           SHOW TIMER POPPED
           ENDCS
         UNTIL   (TYPESW,NEI,C' '),ENDDO
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)
*
*----------------------------------------------------------------------
PROINT   BMOD
         MVC   MEMBER,BLANKS      CLEAR
         MVI   MEMBER,C'@'        PREFIX
         MVC   MEMBER+1(4),@TIME  BUILD NAME
         CALLM PROCMD             PROCESS COMMAND
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)
*
*----------------------------------------------------------------------
DAYDATE  BMOD
**********************************************************************
****                                                             *****
****    THIS ROUTINE WILL PROVIDE THE DAY, DATE, AND TIME FROM   *****
****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****
****                                                             *****
**********************************************************************
         STCK  8(13)              STORE THE TIME-OF-DAY CLOCK
         LM    0,1,8(13)          LOAD INTO WORK REGS
         L     15,16              GET CVT ADDRESS
         A     0,304(15)          ADD LOCAL TIME DEVIATION
         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS
         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)
         LR    15,0               COPY REMAINDER OF MICS TO GET SECS
         SR    14,14              CLEAR FOR DIVIDE
         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)
         LR    14,15              COPY TO WORK REG
DAYDATEB SL    14,=F'60'          DECREMENT BY 60 SECONDS
         BM    DAYDATES           LESS THAN SIXTY, CONTINUE
         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP
         AL    1,=F'1'            BUMP MINUTES
         B     DAYDATEB           CHECK AGAIN
DAYDATES CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT
         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+6(2),26(13)   MOVE THE SECONDS
         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT
         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES
         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+3(2),26(13)   MOVE THE MINUTES
         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS
         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME(2),26(13)     MOVE THE HOURS
         MVI   TIME+2,C':'        ADD COLIN
         MVI   TIME+5,C':'        ADD COLIN
         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK
         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER
         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY
         STC   0,DAY              SET RELATIVE DAY OF WEEK
         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS
         L     1,16               GET CVT ADDRESS
         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA
         ZAP   8(8,13),=P'0'      ZERO WORK AREA
         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION
         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA
         LA    15,MONTAB          LOAD ADDR OF TABLE
         CVB   1,8(13)            CONVERT TO BIN
         SLL   1,30               SHIFT ALL BUT LAST TWO
         LTR   1,1                TEST RESIDUAL
         BNZ   *+8                NOT 0, BRANCH
         LA    15,MONTABL         LEAP YEAR
         LR    14,15              SAVE TABLE IN USE
         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION
         CVB   0,8(13)            CONVERT TO BIN
         SR    1,1                CLEAR REG
         IC    1,0(15)            LOAD CHAR FROM TABLE
         LA    15,1(15)           INDEX TABLE POINTER
         SR    0,1                SUBTRACT FROM WORK VALUE
         BP    *-10               STILL POSITIVE, DO AGAIN
         AR    0,1                ELSE, ADD IT BACK
         CVD   0,8(13)            CONVERT TO DEC
         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT
         SR    15,14              FIND VALUE OF CURRENT INDEX
         CVD   15,8(13)           CONVERT TO DEC
         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT
         OI    DATE+1,C'0'        INSURE NUMERICS
         OI    DATE+4,C'0'        INSURE NUMERICS
         OI    DATE+7,C'0'        INSURE NUMERICS
         MVI   DATE+2,C'/'        ADD SLASH
         MVI   DATE+5,C'/'        ADD SLASH
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CLEANUP FOR TERMINATION
*
*----------------------------------------------------------------------
CLEANUP  BMOD
         DELETE EP=TEC462             DELETE MSG PROGRAM
         IF    (DCBOFLGS,ON,DCBOFOPN),THEN   IF COMMANDS OPEN
           IF    (BATCHSW,EI,C'Y'),THEN        IF BATCH RUN        001
             CLOSE (BCOMMAND)         CLOSE BATCH DCB              001
           ELSE                                                    001
             CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS
           ENDIF                                                   001
         ENDIF
         L     R1,BUFFER
         IF    ((R1),NEQ,0),THEN        IF GOT BUFFER
           L     R0,BUFSIZE                FREE IT
           FREEMAIN  R,LV=(0),A=(1)
         ENDIF
         POST  RECB                       TELL SUBTASK TO END
         WAIT  ECBLIST=RECBLIST           WAIT FOR IT
         DETACH TASKTCB                   DETACH IT
         CALLM CLEANXM             CLEAN UP XM STUFF
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CLEANUP FOR XM STUFF
*
*----------------------------------------------------------------------
CLEANXM  BMOD
         AXSET AX=AXSAVE             RESET AX AUTHORIZATION
         EMOD  RC=(15)
         EJECT
         BMOD  ,C
*----------------------------------------------------------------------
*
*        EXECUTED MOVE INSTRUCTIONS
*
*----------------------------------------------------------------------
MVCPARM  MVC   MEMBER(0),2(R3)
         USING CIBSECT,R3
MOVEDATA MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA
         DROP  R3
MOVEMEM  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME
*----------------------------------------------------------------------
*
*        STORAGE AREAS
*
*----------------------------------------------------------------------
TYPESW   DS    CL1                TYPE OF ECB POSTED
TERMSW   DS    CL1                TERMINATE SWITCH
ISSUESW  DS    CL1                ISSUE SVC34 SWITCH
LOOPSW   DS    CL1                PARM LOOP SWITCH
FOUND    DS    CL1                FOUND WQE WITH REPLY ID
ABENDSW  DS    CL1                SUBTASK ABEND SWITCH (SSAR)
SSARSW   DS    CL1                SSAR SWITCH
BATCHSW  DS    CL1                BATCH SWITCH                     001
IMSID    DS    CL4                IMSID TO USE
DAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)
PASID    DS    H                  PRIMARY ASID NUMBER
SASID    DS    H
AXSAVE   DS    H
DATE     DC    D'0'               DATE MM/DD/YY
         ORG   DATE
MDATE    DS    CL5
         ORG   DATE
MDATEMM  DS    CL2
         DS    CL1
MDATEDD  DS    CL2
         ORG   ,
TIME     DC    D'0'               TIME HH:MM:SS
MONTAB   DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE
MONTABL  DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR
HHMM     DC    PL3'0'
@TIME    DC    D'0'
MSGADDR  DC    F'0'                 ADDRESS OF TEC462 PGM
UCMADDR  DC    F'0'                 ADDRESS OF UCM
COMM     DC    F'0'
BUFSIZE  DC    F'32760'
TIMEECB  DC    F'0'
BUFFER   DC    F'0'
TASKECB  DC    F'0'
RECB     DC    F'0'
RBECB    DC    F'0'
ATTRC    DC    F'0'           ATTACH RETURN CODE
TASKTCB  DC    F'0'           ATTACH TCB ADDRESS
INTERVAL DC    F'0'           TIMER INTERVAL                       001
MEMBER   DC    CL8' '
CVTWORK  DC    CL8' '                                              001
OPENDCB  DC    CL2' '
HOLDCIB  DC    CL256' '
COMMDATA DC    CL256' '
BLANKS   DC    CL256' '
RECBLIST DS    0F
         DC    A(TASKECB)
         DC    AL1(128),AL3(RBECB)
ECBLIST  DS    0F
COMMECB  DC    A(0)
         DC    X'80',AL3(TIMEECB)
CONTFLAG DC    X'00'
SVCREGS  DC    F'0'               REG 0 FOR SVC 34
         DC    A(SVCCIB)          REG 1 FOR SVC 34
SVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND
         DC    H'0'               SVC 34 PADDING
CMDBUF   DC    CL120' '           COMMAND BUFFER
*
MSG1     RNBMSG MSG=('IMS21001 - MODIFY COMMAND ',,' AND ALL FOLLOWING *
               NOT PROCESSED, LENGTH EXCEEDED'),                       *
               INSERTS=(MEMBER),FLAGS=(JOBLOG),MF=L
MSG2     RNBMSG MSG=('IMS21002 - INVALID PARM LENGTH, PARM IGNORED'),  *
               FLAGS=(JOBLOG),MF=L
MSG3     RNBMSG MSG=('IMS21003 - COMMANDS DD CARD MISSING, CAN NOT CONT*
               INUE EXECUTION'),                                       *
               FLAGS=(JOBLOG),MF=L
MSG4     RNBMSG MSG=('IMS21004 - MEMBER ',,' INVALID FOR TOD PROCESSING*
               , MEMBER IGNORED'),                                     *
               INSERTS=(MEMBER),FLAGS=(JOBLOG),MF=L
MSG5     RNBMSG MSG=('IMS21005 - COMMAND ',,' NOT FOUND'),             *
               INSERTS=(MEMBER),FLAGS=(JOBLOG),MF=L
MSG6     RNBMSG MSG=('IMS21006 - COMMAND ',,' HAS INVALID CONTINUATION *
               IN MEMBER, SKIPPING CARD'),                             *
               INSERTS=(MEMBER),FLAGS=(JOBLOG),MF=L
MSG7     RNBMSG MSG=('IMS21007 - MORE THAN 1 CONTINUE CARDS IN CHAIN, S*
               KIPPING TO NEXT CARD'),                                 *
               FLAGS=(JOBLOG),MF=L
MSG8     RNBMSG MSG=('IMS21008 - INVALID CHARACTER FOUND IN COMMENT FIE*
               D, SKIPPING TO NEXT CARD'),                             *
               FLAGS=(JOBLOG),MF=L
MSG9     RNBMSG MSG=('IMS21009 - INVALID DATE FIELD ON CARD, SKIPPING T*
               O NEXT CARD'),                                          *
               FLAGS=(JOBLOG),MF=L
MSG10    RNBMSG MSG=('IMS21010 - SUBTASK TERMINATED DURING INITIALIZATI*
               ON, TERMINATING RUN'),                                  *
               FLAGS=(JOBLOG),MF=L
MSG11    RNBMSG MSG=('IMS21011 - NON-ZERO RETURN CODE FROM SUBTASK ATTA*
               CH ',,' TERMINATING RUN'),                              *
               INSERTS=(/ATTRC),FLAGS=(JOBLOG,HEX),MF=L
MSG12    RNBMSG MSG=('IMS21012 - REPLY FOR IMSID= ',,' NOT FOUND, SKIPP*
               ING CARD'),                                             *
               INSERTS=(IMSID),FLAGS=(JOBLOG),MF=L
MSG13    RNBMSG MSG=('IMS21013 - WAIT TIME ',,' IN NOT NUMERIC,   SKIPP*
               ING CARD'),                                         001 *
               INSERTS=1,FLAGS=(JOBLOG),MF=L                       001
         PUSH  PRINT
         PRINT NOGEN
COMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=CARDEOF
DIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=TIMESELD,       X
               LRECL=256,BLKSIZE=256,RECFM=FB
BCOMMAND DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=R,EODAD=CARDEOF      001
         POP   PRINT
         EMOD
         ENDSECT
         EJECT
*----------------------------------------------------------------------
*
*        SUBTASK TO RUN ORE CHAIN AND FIND REPLY NUMBER
*
*----------------------------------------------------------------------
IMS210$  BGNSECT RENT=NO,BASE=(12),PARM=(2),                           *
               C='RUN ORE CHAIN AND FIND REPLY NUMBER'
         L     R11,=V(IMS210)       GET PRIMARY BASE TO MOTHER
         USING IMS210,R11
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)       SET UP SECOND BASE
         USING IMS210+4096,R10
         MVI   SSARSW,C'N'          SHOW NO SSAR DONE
         MODESET MODE=SUP           GET INTO SUPER MODE
         POST  RBECB                TELL MOTHER I'M HERE
         WAIT  ECB=RECB             WAIT FOR SOMETHING TO DO
         WHILE (TERMSW,EI,C'N'),DO    LOOP UNTIL TERMINATION REQUESTED
           MVI   RECB,X'00'
           MVI   FOUND,C'N'           INIT TO NOT FOUND
           STIMER WAIT,BINTVL=$INTVAL       WAIT 3 SECONDS
           L     R2,UCMADDR           GET UCM ADDRESS
           USING UCM,R2
           L     R3,UCMRPYQ           GET FIRST ORE
           USING OREF,R3
           CALLM @XMSET               SET UP FOR XM MODE
           MODESET EXTKEY=ZERO,SAVEKEY=$KEY,WORKREG=1  INTO KEY ZERO
           WHILE AND,((R3),NE,0),(FOUND,EI,C'N'),DO     LOOP THRU ORE'S
             L     R4,ORERWQE         GET ADDRESS OF WQE FOR THIS ORE
             LA    R5,224             LENGTH OF WQE
             SR    R6,R6              SET KEY OF SOURCE
             MVCP  $MYWQE(R5),0(R4),R6  GET WQE INTO MY ASID
             MODESET KEYADDR=$KEY,SAVEKEY=$KEY2,WORKREG=1  INTO KEY 8
             CALLM @CHKWQE              CHECK WQE FOR MY IMSID
             MODESET EXTKEY=ZERO,SAVEKEY=$KEY2,WORKREG=1 INTO KEY ZERO
             L     R3,ORELKP            GET NEXT ORE IN CHAIN
           ENDDO
           MODESET KEYADDR=$KEY,SAVEKEY=$KEY2,WORKREG=1  INTO KEY 8
           CALLM @XMRESET             RESET FROM XM MODE
           POST  RBECB                TELL MOTHER I'M DONE
           WAIT  ECB=RECB             WAIT FOR MORE TO DO
         ENDDO
         EMOD  RC=0
         EJECT
*----------------------------------------------------------------------
*
*        SET UP FOR XM MODE
*
*----------------------------------------------------------------------
@XMSET   BMOD
         LH    R1,SASID               GET SECONDARY ASID (CONSOLE)
         SSAR  R1                     SETUP TO USE IT
         MVI   SSARSW,C'Y'         SHOW IN SECONDARY MODE
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        RESET FROM XM MODE
*
*----------------------------------------------------------------------
@XMRESET BMOD
         LH    R1,PASID              GET PRIMARY ASID
         SSAR  R1                    AND RESET TO USE IT
         MVI   SSARSW,C'N'         SHOW NOT IN SECONDARY MODE
         EMOD  RC=(15)
         EJECT
*----------------------------------------------------------------------
*
*        CHECK IF THIS WQE IS THE ONE WE WANT
*
*----------------------------------------------------------------------
@CHKWQE  BMOD
         LA    R7,$MYWQE           SET UP FOR DSECT USE
         USING WQE,R7
         IF    ($DFS,EQ,WQETXT+4),THEN  IF THIS IS A DFS MESSAGE
           IFCASE ($DFS3139,EQ,WQETXT+4),     IF DFS3139I MSG          *
               ($DFS996,EQ,WQETXT+4),           OR DFS996I MSG         *
               ($DFS810,EQ,WQETXT+4)            OR DFS810A MSG
           CASE ITEM 1      -    DFS3139I MESSAGE
             MVC   $IMSID,WQETXT+65            GET IMSID FROM IT
           CASE ITEM 1      -    DFS996I MESSAGE
             MVC   $IMSID,WQETXT+25            GET IMSID FROM IT
           CASE ITEM 3      -    DFS810A MESSAGE
             MVC   $IMSID,WQETXT+79            GET IMSID FROM IT
           ELSEC                        UNDEFINED DFS MESSAGE
             MVC   $DFSER,WQETXT+4         SAVE IT FOR MESSAGE
             RNBMSG MSG=$MSG1,CALL=MSGADDR,MF=(E,$MSG1) PUT OUT MSG
           ENDCS
           IF    ($IMSID,EQ,IMSID),THEN      IF PROPER IMSID
             MVI   FOUND,C'Y'                  SHOW IT
             MODESET EXTKEY=ZERO,SAVEKEY=$KEY,WORKREG=1  INTO KEY ZERO
             ICM   R9,3,OREID                  GET REPLY ID
             MODESET KEYADDR=$KEY,SAVEKEY=$KEY2,WORKREG=1  INTO KEY 8
             STCM  R9,3,CMDBUF                 PUT IN REPLY ID
             MVI   CMDBUF+2,C','               AND A COMMA
           ENDIF
         ENDIF
         EMOD  RC=(15)
         DROP  R7
         EJECT
*----------------------------------------------------------------------
*
*        DATA AREAS
*
*----------------------------------------------------------------------
$INTVAL  DC    A(3*100)        TIMER INTERVAL = 3 SECONDS
$IMSID   DS    CL4
$DFS     DC    CL3'DFS'
$DFS3139 DC    CL8'DFS3139I'
$DFS996  DC    CL7'DFS996I'
$DFS810  DC    CL7'DFS810A'
$DFSER   DS    CL10
$MSG1    RNBMSG MSG=('IMS210$1 - UNKNOWN DFS MESSAGE FOUND - ',,' -'), *
               INSERTS=($DFSER),FLAGS=(JOBLOG),MF=L
$KEY     DS    CL1
$KEY2    DS    CL1
$MYWQE   DS    CL224
         ENDSECT
         EJECT
*----------------------------------------------------------------------
*
*        DSECTS
*
*----------------------------------------------------------------------
*
CIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING
         IEZCIB
*
CARDSECT DSECT ,                  COMMAND CARD MAPPING
CARDAST  DS    CL1                COMMENT POSITION
CARDDATE DS    CL5                DATE MM/DD
         ORG   CARDDATE
CARDMM   DS    CL2                MM
CARDSL   DS    CL1                /
CARDDD   DS    CL2                DD
         DS    CL1                BLANK
CARDDAY  DS    CL7                MTWTFSS
         DS    CL1                BLANK
CARDIMSI DS    CL4                IMSID
         DS    CL1                BLANK
CARDDATA DS    CL51               COMMAND DATA
CARDCONT DS    CL1                CONTINUATION
         ORG   CARDAST
CARDCONB DS    CL19               SHOULD BE BLANK FOR CONTINUATION
         ORG   CARDDATA                                            001
CARDWAIT DS    CL4                SSSS WAIT TIME (IN SECONDS)      001
*
DIRDSECT DSECT
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
*
         RNBMSGD
*
         DCBD  DSORG=PO
*
         CVT   DSECT=YES
*
         IEECUCM FORMAT=NEW
*
         IHAORE
*
         IHAWQE
*
         IHASDWA
*                                                                  001
         IHAPSA                                                    001
*                                                                  001
         IKJTCB                                                    001
*                                                                  001
         IEZJSCB                                                   001
*                                                                  001
         IEFJSSIB                                                  001
         END
