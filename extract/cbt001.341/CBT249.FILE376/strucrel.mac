         MACRO
         STRUCREL &REL,&TF=,&TO=OOPS,&RW=
         GBLC  &STRUC$M(3)    SYMTAB-   MODE   A,F,P,X
         GBLC  &STRUC$T(3)    SYMTAB-   TYPE   A-F,H,=,R   P-P
.*                                             F-E,D,R     X-C,X,B
         GBLC  &STRUC$F(3)    SYMTAB-   FIELD NAME, SUCH AS A REG
         LCLA  &CC,&A,&B,&ROPNDX
         LCLA  &RNB,&RNBA            **** RNB 02/16/78 *** TGA ****
         LCLB  &BC,&CLI,&STR$,&REFLECT
         LCLC  &RNBL1                **** RNB 07/05/78 *** TGA ****
         LCLC  &RNBL2                **** RNB 07/05/78 *** TGA ****
         LCLC  &RNBL3                **** RNB 07/05/78 *** TGA ****
         LCLC  &ROP
.*   THIS MACRO IS PART OF A  BAL STRUCTURED PROGRAMMING PACKAGE
.*    WRITTEN BY  GARY S. NEMETH  OF THE CLEVELAND TRUST COMPANY
.*     DURING 1976.  ALL RIGHTS RESERVED.  ANY COMMERCIAL USE
.*      MUST BE APPROVED BY THE CLEVELAND TRUST COMPANY.
.* THIS MACRO MODIFIED AT RAINIER NATIONAL BANK
.*             ASSEMBLER F WILL NOT ALWAYS WORK, BECAUSE OF SETC LEN 8
&ROP     SETC  '&REL(2)'
         AIF   ('&ROP' EQ 'RCZ' OR '&ROP' EQ 'RCNZ').CALLM
         AIF   ('&ROP' EQ 'XRCZ' OR '&ROP' EQ 'XRCNZ').CALLX
         AIF   (N'&REL NE 3).NREL3
&A       SETA  1                        SUBSCRIPT FOR FIRST OPERAND
&B       SETA  3                        SUBSCRIPT FOR SECOND OPERAND
&ROPNDX  SETA  2
         AIF   ('&REL(2)'(K'&REL(2),1) NE 'I').NROPI
&CLI     SETB  1                             INDICATE FORCED CLI
&ROP     SETC  '&REL(2)'(1,K'&REL(2)-1)      REMOVE SUFFIX I
         AGO   .ROPGO
.NROPI   AIF   ('&REL(2)'(K'&REL(2),1) NE '$').ROPGO
&STR$    SETB  (1)                        INDICATE FORCED  CL$
&ROP     SETC  '&REL(2)'(1,K'&REL(2)-1)   REMOVE SUFFIX  -$
         AGO   .ROPGO
.NREL3   AIF   ('&REL(2)' NE 'NUMERIC').RNB1    **** RNB ****
.*   THIS IS A REQUEST FOR A NUMERIC TEST   **** RNB 02/16/78 ***
&RNB     SETA   0                               **** RNB ****
&ROP     SETC  '&REL(1)'                        **** RNB ****
&RNBA    SETA   L'&REL(1)                       **** RNB ****
.RNB2    AIF   (&RNBA LE &RNB).RNB3             **** RNB ****
         TM    &ROP+&RNB,X'F0'                  **** RNB ****
         BC    12,&TO                           **** RNB ****
         CLI   &ROP+&RNB,X'FA'                  **** RNB ****
         BNL   &TO                              **** RNB ****
&RNB     SETA  &RNB+1                           **** RNB ****
         AGO   .RNB2                            **** RNB ****
.RNB3    MEXIT                                  **** RNB ****
.RNB1    AIF   (N'&REL NE 4).RNB4               **** RNB ****
&RNBL1   SETC  '&REL(1)'                        **** RNB ****
&RNBL2   SETC  '&REL(4)'                        **** RNB ****
&RNBL3   SETC  '&REL(3)'                        **** RNB ****
         CLM   &RNBL1,&RNBL2,&RNBL3             **** RNB ****
         AGO   .ROPGO                           **** RNB ****
.*.NREL3   AIF   (N'&REL NE 1).NRELERR  OLD OF BELOW *** RNB 02/16/78
.RNB4    AIF   (N'&REL NE 1).NRELERR            **** RNB ****
&BC      SETB  1
&ROP     SETC  '&REL(1)'
&ROPNDX  SETA  1
.ROPGO   ANOP
.*
.*       THIS SEQUENCE ANALYZES ROP TO PRODUCE TWO RESULTS
.*             1. &CC IS SETA TO THE FALSE BRANCH VALUE
.*             2. CONTROL IS PASSED TO THE APPROPRIATE ROUTINE
.*
.*             ROP KEYWORDS       TO       CC                  AIF
.*
.*             ON ONE ONES        .TM   14 OR 12                4
.*             MIXED              .TM   11 OR  9                6
.*             ANY NZ             .TM   10 OR  8                1
.*             OFF ZERO Z         .TM    7 OR  5                2
.*
.*             EQ E      -I       .C     7 OR  6                2
.*             NE NEQ    -I       .C     9 OR  8                1
.*             LT L  M   -I       .C    11 OR 10                6
.*       NP NH LE NG NGT -I       .C     3 OR  2                3
.*             GT H  P   -I       .C    13 OR 12                4
.*          NM GE NL NLT -I       .C     5 OR  4                5
.*
&CC      SETA  8                                               AIF
         AIF   ('&ROP' EQ 'NE' OR '&ROP' EQ 'NEQ').C            1
         AIF   ('&ROP' EQ 'ANY' OR '&ROP' EQ 'NZ').TM           1
&CC      SETA  7
         AIF   ('&ROP' EQ 'EQ' OR '&ROP' EQ 'E').C              2
         AIF ('&ROP' EQ 'OFF' OR '&ROP' EQ 'ZERO' OR '&ROP' EQ 'Z').TM
&CC      SETA  3
         AIF   ('&ROP' EQ 'LE' OR '&ROP' EQ 'NG' OR '&ROP' EQ 'NGT').C
         AIF   ('&ROP' EQ 'NP' OR '&ROP' EQ 'NH').C
&CC      SETA  12
         AIF   ('&ROP' EQ 'GT' OR '&ROP' EQ 'H' OR '&ROP' EQ 'P').C
         AIF ('&ROP' EQ 'ON' OR '&ROP' EQ 'ONE' OR '&ROP' EQ 'ONES').TM
&CC      SETA  5
         AIF   ('&ROP' EQ 'GE' OR '&ROP' EQ 'NL' OR '&ROP' EQ 'NLT').C
         AIF   ('&ROP' EQ 'NM').C
&CC      SETA  11
         AIF   ('&ROP' EQ 'LT' OR '&ROP' EQ 'L' OR '&ROP' EQ 'M').C
         AIF   ('&ROP' EQ 'MIXED').TM                           6
.ROPERR  MNOTE  8,'THE RELATION OPERATOR  &REL(&ROPNDX)  IS INVALID'
         MEXIT
.*             T M       C O D E   G E N E R A T O R
.TM      AIF   (&BC).BC
         AIF   (&CLI OR &STR$).ROPERR   THEY TRIED ONI, OFFI, ON$  ETC
         TM    &REL(1),&REL(3)
         AGO   .BC
.CALLM   AIF   ('&REL(1)' EQ '' OR N'&REL GT 4).NRELERR
&CC      SETA  7                   SET FALSE VALUE FOR RCZ
         AIF   ('&ROP' EQ 'RCZ').CALLM2
&CC      SETA  8                   FALSE BRANCH VALUE FOR RCNZ
.CALLM2  ANOP  ,
         CALLM &REL(1),R1=&REL(3),R0=&REL(4)
         LTR   15,15               TEST RETURN CODE Z/NZ
         AGO   .BC
.CALLX   AIF   ('&REL(1)' EQ '' OR N'&REL GT 4).NRELERR
&CC      SETA  7                             FALSE FOR XRCZ
         AIF   ('&ROP' EQ 'XRCZ').CALLX2     OK
&CC      SETA  8                             FALSE FOR XRCNZ
.CALLX2  ANOP  ,
&ROP     SETC  T'&REL(1)                               CARRY DOWN TYPE
         CALLX &REL(1),R1=&REL(3),R0=&REL(4),TYPE=&ROP
         LTR   15,15               TEST RETURN CODE  XZ/XNZ
         AGO   .BC
.*             C L I     C O D E   G E N E R A T O R
.CLI     CLI   &REL(1),&REL(3)
         AGO   .BC
.*
.*             B C       C O D E   G E N E R A T O R
.*
.BC      AIF   (NOT &REFLECT).BC2       SHOULD WE  (ABCD) TO (ACBD)
.*             REFLECTED OPERANDS, REFLECT HI/LOW
&A       SETA  2*(&CC/2)                                 ABCD TO ABC0
         AIF   (&A LE 7).REFN8
&A       SETA  &A-8                REMOVE 8 BIT          1BC0 TO 0BC0
.REFN8   AIF   (&A NE 4).REFN4
&CC      SETA  &CC-2                                     A10D TO A01D
.REFN4   AIF   (&A NE 2).BC2  (DONE)
&CC      SETA  &CC+2                                     A01D TO A10D
.BC2     AIF   ('&TF' EQ 'F').BCGO      WE ARE ALL SET
&CC      SETA  15-&CC                   ASSUME T,  CC XOR 1111
.BCGO    BC    &CC,&TO
         MEXIT
.*             CONDITION GENERATOR
*.C      AIF   (&BC).BC            BC ONLY    **** OLD *** RNB ****
.C       AIF   (&BC OR N'&REL EQ 4).BC        **** REV *** RNB ****
         AIF   (&CLI).CLI          CLI SYNTAX
         AIF   (&STR$).CL$         CL$ SYNTAX   STRING COMPARE
         STRUCTYP &REL(&A),&A      MODE AND TYPE OF SECOND OPERAND
         STRUCTYP &REL(&B),&B      MODE AND TYPE OF SECOND OPERAND
         AIF   ('&STRUC$T(&A)' EQ 'R' OR '&STRUC$T(&B)' NE 'R').NINV
&A       SETA  &B
&B       SETA  4-&A
&REFLECT SETB  (NOT &REFLECT)      INVERT TO GET REGISTER FIRST
.NINV    AIF   ('&STRUC$M(&A)' EQ '&STRUC$M(&B)').MODEEQ    SAME MODE
         AIF   ('&STRUC$T(&A)' EQ 'R' AND '&STRUC$M(&B)' EQ 'F').MODERF
         AIF   ('&STRUC$M(&A)' EQ 'P' AND '&STRUC$T(&B)' EQ '=').MODEP1
         AIF   ('&STRUC$T(&A)' EQ '=' AND '&STRUC$M(&B)' EQ 'P').MODEP2
.MODEERR MNOTE 8,'OPERAND TYPES ARE NOT COMPATIBLE FOR COMPARISON'
         DC   2H'0'                * * *  C R A S H   * * *
         MEXIT
.MODERF  ANOP
&STRUC$M(&A) SETC 'F'    SET REGISTER TO MODE F -  FLOATING POINT
.MODEEQ  AIF   ('&STRUC$M(&A)' EQ 'A').MODEA
         AIF   ('&STRUC$M(&A)' EQ 'F').MODEF
         AIF   ('&STRUC$M(&A)' EQ 'P').MODEP
         AIF   ('&STRUC$M(&A)' EQ 'X').MODEX
         AGO   .MODEERR
.*
.*       M O D E    A    /ARITHMETIC
.*
.MODEA   AIF   ('&STRUC$T(&A)' NE 'F').MODEA1
         L     &RW(1),&STRUC$F(&A)
         AGO   .MODEAR
.MODEA1  AIF   ('&STRUC$T(&A)' NE 'H').MODEA2
         LH    &RW(1),&STRUC$F(&A)
         AGO   .MODEAR
.MODEA2  AIF   ('&STRUC$T(&A)' NE '=').MODEA3
         AIF   ('&STRUC$F(&A)' NE '0').MODEA22
         SR    &RW(1),&RW(1)
         AGO   .MODEAR
.MODEA22 L     &RW(1),=A(&STRUC$F(&A))
.MODEAR  ANOP
&STRUC$T(&A) SETC 'R'
&STRUC$F(&A) SETC '&RW(1)'
.MODEA3  AIF   ('&STRUC$T(&A)' NE 'R').MODEA9     ERROR IN STRUCTYP
.*                                                TEST SECOND OPERAND
         AIF   ('&STRUC$T(&B)' NE 'F').MODEAB
         C     &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEAB  AIF   ('&STRUC$T(&B)' NE 'H').MODEAC
         CH    &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEAC  AIF   ('&STRUC$T(&B)' NE '=').MODEAD
         AIF   ('&STRUC$F(&B)' NE '0').MODEAC2
         LTR   &STRUC$F(&A),&STRUC$F(&A)
         AGO   .BC
.MODEAC2 C     &STRUC$F(&A),=A(&STRUC$F(&B))
         AGO   .BC
.MODEAD  AIF   ('&STRUC$T(&B)' NE 'R').MODEA9
         CR    &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEA9  MNOTE 12,'STRUCREL MACRO ERROR, CALL SYSTEMS SUPPORT'
         DC   2H'0'
         MEXIT
.*
.*       M O D E    F    /FLOATING POINT
.*
.MODEF   AIF   ('&STRUC$T(&A)' NE 'E').MODEF1
         AIF   ('&STRUC$T(&B)' NE 'D').MODEF02
         SDR   &RW(1),&RW(1)
.MODEF02 LE    &RW(1),&STRUC$F(&A)
         AGO   .MODEFR
.MODEF1  AIF   ('&STRUC$T(&A)' NE 'D').MODEF2
         LD    &RW(1),&STRUC$F(&A)
         AIF   ('&STRUC$T(&B)' NE 'E').MODEFR
         LRER  &RW(1),&RW(1)
.MODEFR  ANOP
&STRUC$T(&A) SETC 'R'
&STRUC$F(&A) SETC '&RW(1)'
.MODEF2  AIF   ('&STRUC$T(&A)' NE 'R').MODEA9     MACRO LOGIC ERROR
.*                                                TEST SECOND OPERAND
         AIF   ('&STRUC$T(&B)' NE 'E').MODEFB
         CE    &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEFB  AIF   ('&STRUC$T(&B)' NE 'D').MODEFC
         CD    &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEFC  AIF   ('&STRUC$T(&B)' NE 'R').MODEA9     MACRO LOGIC ERROR
         CER   &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.*
.*       M O D E      P  /PACKED     X  /CHARACTER
.*
.MODEP   CP    &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.MODEP1  CP    &STRUC$F(&A),=P'&STRUC$F(&B)'
         AGO   .BC
.MODEP2  CP    =P'&STRUC$F(&A)',&STRUC$F(&B)
         AGO   .BC
.MODEX   CLC   &STRUC$F(&A),&STRUC$F(&B)
         AGO   .BC
.*
.*       M O D E      $  / S T R I N G
.*
.CL$     ANOP  ,
&STRUC$T(1)  SETC  T'&REL(1)       PICK UP TYPE TO PASS TO
&STRUC$T(3)  SETC  T'&REL(3)         INNER MACRO  CL$ IN  TYPE=(\1,T2
         CL$   &REL(1),&REL(3),         COMPARE THE STRINGS            X
               TYPE=(&STRUC$T(1),&STRUC$T(3))
         AGO   .BC
.NRELERR MNOTE 08,'''&REL'' IS UNRECOGNIZABLE'
         MEXIT
         MEND
