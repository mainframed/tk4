//***FILE 281 contains source code for PLEA, the Programming        *
//*           Language Execution Analyzer from David Doucette       *
//*           of Grumman Aerospace.                                 *
//*                                                                 *
//*    Summary:  This file contains the files necessary to          *
//*     implement PLEA, the Programming Language Execution          *
//*     Analyzer in either SVS or MVS. Included are members for     *
//*     the data gathering(PLEATRAP), data analysis(PLOTAB),        *
//*     and procedures for execution(PLEAPROC).                     *
//*                                                                 *
//*     This file also contains printable doc for the PLEA          *
//*     package (member $PLEADOC) and SCRIPT-format documentation   *
//*     (member #PLEADOC).                                          *
//*                                                                 *
//*     PLEA - Programming Language Execution Analyzer              *
//*                                                                 *
//*     1. INTRODUCTION                                             *
//*                                                                 *
//*          PLEA is a set of programs designed to provide          *
//*     information to a user about a program's performance         *
//*     and, for a  PL/I program, can be used as a debugging        *
//*     tool to show which parts of the program's procedures        *
//*     were executed.  It acts in a manner which is almost         *
//*     totally transparent to the user.                            *
//*                                                                 *
//*          PLEA provides a statistical analysis of where CPU      *
//*     time is being spent during the execution of a PL/I (for     *
//*     Optimizing Compiler) or FORTRAN program.  It operates       *
//*     under OS/VS2 in the 370/168.  It consists of two parts:     *
//*     a monitor and an analyzer.  The monitor samples             *
//*     execution of the program at regular preset intervals        *
//*     until the program terminates.  During the monitoring run    *
//*     (when the program is executing) Monitor Data is spooled     *
//*     off into a dataset which is used by the analyzer to         *
//*     provide an analysis of the program's execution.             *
//*                                                                 *
//*     The analyzer report provides the following data:            *
//*                                                                 *
//*      1. Statement number in the main routine with               *
//*          frequency count and percent of total samples           *
//*          (PL/I only).                                           *
//*      2. Statement number in subroutine with frequency           *
//*          count and percent of total samples (PL/I               *
//*          only).                                                 *
//*      3. Percentage of CPU time consumed on a procedure          *
//*          by procedure (subroutine by subroutine for             *
//*          FORTRAN) basis.                                        *
//*      4. Load module list with frequency count and               *
//*          percentage.                                            *
//*      5. Listing of interrupt codes from the PL/I load           *
//*          module PSW and a frequency count for each.             *
//*      6. The sampling interval.                                  *
//*      7. Total number of samples by the monitor.                 *
//*      8. Elapsed time of the monitoring run.                     *
//*                                                                 *
//*     2. USAGE                                                    *
//*                                                                 *
//*          PLEA can be used to monitor existing production        *
//*     programs or programs in a development stage.  For all       *
//*     program executions, the GO step of the appropriate          *
//*     catalogued procedure may have a parameter which is used     *
//*     to affect the monitoring environment and/or pass a          *
//*     character string to the user program.                       *
//*                                                                 *
//*          Normally the second function would be accomplished     *
//*     by coding:                                                  *
//*                                                                 *
//*               PARM.GO='program data'.                           *
//*                                                                 *
//*          In the JCL EXEC statement with PLEA, this has been     *
//*     expanded to:                                                *
//*                                                                 *
//*             PARM.GO='monitor data/program data'.                *
//*                                                                 *
