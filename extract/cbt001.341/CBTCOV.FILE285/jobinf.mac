***********************************************************************
*                                                                     *
* NAME - JOBINF.                                                      *
*                                                                     *
* DATE OF LAST MODIFICATION - 6.11.78.                                *
*                                                                     *
* AUTHORS - A. KNIGHT.                                                *
*                                                                     *
* FUNCTION.                                                           *
*            TO SUPPLY AN ASSEMBLER OR A PL1 PROGRAM WITH             *
*         EXECUTION-TIME JOB INFORMATION.                             *
*                                                                     *
* BASIC  FLOW.                                                        *
*            THE MODULE HAS TWO ENTRY POINTS TO HANDLE CALLS FROM     *
*         ASSEMBLER AND PL1 PROGRAMS; 'JOBINFA' BEING THE ONE USED BY *
*         ASSEMBLER PROGRAMS AND 'JOBINFP' THE ONE USED BY PL1        *
*         PROGRAMS.  FOLLOWING JOBINFA IS A SECTION TO INTERFACE WITH *
*         THE ASSEMBLER ENVIRONMENT AND SIMILARLY FOR JOBINFP AND THE *
*         PL1 ENVIRONMENT.                                            *
*                                                                     *
*         THE ASSEMBLER INTERFACE.                                    *
*         --- --------- ---------                                     *
*         REGISTERS ARE LOADED TO INDICATE:                           *
*            1) THAT THE ASSEMBLER ENTRY POINT WAS USED.              *
*            2) THE ADDRESS OF THE PARAMETER PASSED.                  *
*               (REG1 -> PARAMETER ADDRESS LIST -> PARAMETER.)        *
*            3) THAT NO CHARACTERS ARE TO BE MOVED FROM A TEMPORARY   *
*               WORK SPACE TO THE RETURN PARAMETER AT THE END OF THE  *
*               MODULE.                                               *
*                                                                     *
*         THE PL1 INTERFACE.                                          *
*         --- --- ---------                                           *
*         A) A SAVE AREA AND A TEMPORARY WORK SPACE ARE OBTAINED.     *
*         B) FLAGS ARE SET IN THE SAVE AREA TO PRESERVE PL1 ERROR-    *
*            HANDLING.                                                *
*         C) REGISTERS ARE LOADED TO INDICATE:                        *
*            1) THAT THE PL1 ENTRY POINT IS USED.                     *
*            2) THE ADDRESS OF THE TEMPORARY WORK SPACE.              *
*            3) THE ADDRESS OF THE PARAMETER PASSED.                  *
*               (REG1 -> PARAMETER LIST -> LOCATOR/DESCRIPTOR         *
*               -> PARAMETER).                                        *
*            4) THE NUMBER OF CHARACTERS TO BE MOVED FROM THE         *
*               TEMPORARY WORK SPACE TO THE RETURN PARAMETER AT THE   *
*               END OF THE MODULE (DEPENDANT UPON THE ATTRIBUTES OF   *
*               THE PARAMETER PASSED).                                *
*                                                                     *
*            THE MAIN PART OF THE MODULE IS EXECUTED TO OBTAIN        *
*         INFORMATION ABOUT THE JOB AND PLACE IT INTO EITHER THE      *
*         RETURN PARAMETER OR THE TEMPORARY WORKSPACE DEPENDANT UPON  *
*         WHICH ENTRY POINT WAS USED.                                 *
*            IF THE PL1 ENTRY POINT WAS USED THE REQUIRED NUMBER OF   *
*         CHARACTERS IS MOVED FROM THE TEMPORARY WORK SPACE TO THE    *
*         RETURN PARAMETER AND THE SAVE AREA AND TEMPORARY WORK SPACE *
*         ARE FREED.                                                  *
*            THE CALLERS REGISTERS ARE RESTORED AND A BRANCH IS MADE  *
*         BACK TO THE CALLING PROGRAM.                                *
*                                                                     *
* ATTRIBUTES - RE-ENTRANT.                                            *
*                                                                     *
* ENTERED  FROM - ASSEMBLER OR PL1 PROGRAMS (VIA 'JOBINFA' OR         *
*                 'JOBINFP' RESPECTIVELY).                            *
*                                                                     *
* INPUT.                                                              *
*         A 42-CHARACTER STRING IF CALLED BY AN ASSEMBLER PROGRAM.    *
*         ANY CHARACTER STRING IF CALLED BY A PL1 PROGRAM.            *
*                                                                     *
* OUTPUT.                                                             *
*         THE PASSED PARAMETER IS ALTERED TO CONTAIN THE INFORMATION  *
*         LISTED BELOW.  WHEN THE ASSEMBLER ENTRY POINT IS USED, 42   *
*         CHARACTERS ARE ALWAYS RETURNED; WHEN THE PL1 ENTRY POINT IS *
*         USED, THE SAME TYPE OF STRING IS RETURNED AS WAS PASSED     *
*         (THE INFORMATION BEING LEFT JUSTIFIED AND TRUNCATED OR      *
*         BLANK-PADDED IF NECESSARY), EXCEPT WHEN A VARYING CHARACTER *
*         STRING OF MORE THAN 42 CHARACTERS IS PASSED, IN WHICH CASE  *
*         THE VARYING STRING IS RETURNED WITH LENGTH 42.              *
*         THE INFORMATION RETURNED IS AS FOLLOWS:                     *
*               JOB NAME               - 8 CHARACTERS                 *
*               PROCEDURE-STEP NAME    - 8 CHARACTERS                 *
*               JOB-STEP NAME          - 8 CHARACTERS                 *
*               PROGRAM NAME           - 8 CHARACTERS                 *
*               JOB NUMBER             - 4 CHARACTERS                 *
*               CPU IDENTITY           - 4 CHARACTERS                 *
*               SYSTEM NAME            - 2 CHARACTERS                 *
*                                                                     *
* EXTERNAL  REFERENCES.                                               *
*         NONE                                                        *
*                                                                     *
* MACROS  REFERENCED - NONE.                                          *
*                                                                     *
* TABLES  REFERENCED - NONE.                                          *
*                                                                     *
* REGISTER  USAGE.                                                    *
*         REG 1   -   ADDRESS OF PASSED PARAMETER                     *
*                     (USED BY PL1 ENTRY)                             *
*         REG 2   -   NUMBER OF CHARS TO BE MOVED FROM WORK SPACE TO  *
*                     RETURN PARAMETER (USED BY PL1 ENTRY)            *
*         REG 9   -   INDICATES WHICH ENTRY POINT WAS USED            *
*         REG 10  -   BASE REGISTER                                   *
*         REG 11  -   ADDRESS OF RETURN STRING OR WORK AREA           *
*                     (FOR ASSEMBLER OR PL1 ENTRY RESPECTIVELY)       *
*                                                                     *
* EXITS.                                                              *
*         NORMAL EXIT TO CALLING MODULE.                              *
*                                                                     *
* MESSAGES.                                                           *
*         NONE.                                                       *
*                                                                     *
* ERROR  HANDLING.                                                    *
*            WHEN ENTERED FROM AN ASSEMBLER PROGRAM THE PROGRAM DOES  *
*         NOT TEST THE VALIDITY OF THE PARAMETER PASSED.  AN INVALID  *
*         ADDRESS MAY CAUSE AN ERROR.                                 *
*            WHEN ENTERED FROM A PL1 ENVIRONMENT, PL1 ERROR HANDLING  *
*         IS PRESERVED.  THE MODULE ASSUMES THAT A CHARACTER STRING   *
*         WILL BE PASSED.  FAILURE TO COMPLY WITH THIS MAY RESULT IN  *
*         AN ERROR BECAUSE OF THE DIFFERENT WAYS IN WHICH PL1 PASSES  *
*         OTHER TYPES OF PARAMETER.                                   *
*                                                                     *
* ENVIRONMENT - ASSEMBLER OR PL1 OPTIMISER PROGRAMS.                  *
*                                                                     *
* RESTRICTIONS.                                                       *
*         NONE.                                                       *
*                                                                     *
***********************************************************************
      EJECT
***********************************************************************
*
* 'JOBINF' - PREAMBLE
*
***********************************************************************
JOBINF CSECT
       ENTRY JOBINFP
       ENTRY JOBINFA
R0     EQU   0
R1     EQU   1
R2     EQU   2
R3     EQU   3
R4     EQU   4
R5     EQU   5
R6     EQU   6
R7     EQU   7
R8     EQU   8
R9     EQU   9
R10    EQU   10
R11    EQU   11
R12    EQU   12
R13    EQU   13
R14    EQU   14
R15    EQU   15
       DC    C'JOBINFP'
       DC    AL1(7)
       EJECT
***********************************************************************
*
* ENTRY POINT FROM PL1 MODULE.
*
***********************************************************************
JOBINFP EQU   *
       STM   R14,R11,12(R13) -STORE CALLER'S REGS IN CALLERS SAVE AREA.
       LA    R9,0            -STORE 0 TO INDICATE JOBINFP ENTRY POINT.
       USING JOBINFP,R15
       B     CONT            -BRANCH AROUND ASSEMBLER ENTRY POINT.
       SPACE 5
***********************************************************************
*
* ENTRY POINT FROM ASSEMBLER MODULE.
*
***********************************************************************
JOBINFA EQU   *
       STM   R14,R12,12(R13) -STORE CALLER'S REGS IN CALLERS SAVE AREA.
       LA    R9,1            -LOAD 1 TO INDICATE JOBINFA ENTRY POINT.
       SPACE 5
CONT   EQU   *
       BALR  R10,0           -ESTABLISH BASE REGISTER.
       USING *,R10
       LTR   R9,R9           -TEST WHERE ENTERED.
       BP    ASS             -BRANCH TO ASSEMBLER INTERFACE.
       EJECT
***********************************************************************
*
* PL1 INTERFACE.
*
***********************************************************************
       L     R1,0(R1)
       LR    R4,R1           -SAVE ANY PARAMETER LIST ADDRESS
*                             PASSED FROM CALLING ROUTINE.
       LA    R0,((DSAPRE+STRLEN+7)/8)*8
*                            -PUT THE LENGTH OF THE REQUIRED DSA IN
*                             REGISTER 0.
       L     R1,NAVBYT(R13)  -LOAD THE ADDRESS OF THE NEXT AVAILABLE
*                             BYTE OF STORAGE AFTER THE CURRENT DSA.
       ALR   R0,R1           -ADD ADDRESSES.
       CL    R0,LSTBYT(R12)  -COMPARE RESULT WITH ADDRESS OF LAST
*                             AVAILABLE BYTE IN STORAGE THAT CAN BE
*                             USED.
       BNH   ENOUGH
       L     R15,STORTN(R12) -LOAD AND BRANCH TO THE PL/I STORAGE
       BALR  R14,R15          OVERFLOW ROUTINE TO ATTEMPT TO OBTAIN
*                             MORE STORAGE.
ENOUGH EQU   *
       ST    R0,NAVBYT(R1)   -STORE THE ADDRESS OF THE NEXT AVAILABLE
*                             BYTE IN STORAGE AFTER THE NEW DSA.
       ST    R13,4(R1)       -STORE THE CHAIN-BACK ADDRESS OF THE
*                             PREVIOUS DSA IN THE CURRENT DSA.
       MVC   LIBWRK(4,R1),LIBWRK(R13)
*                            -COPY ADDRESS OF LIBRARY WORKSPACE.
       LR    R13,R1          -STORE THE ADDRESS OF THE NEW DSA IN
*                             REGISTER 13.
       MVI   PLIEH1(R13),X'80'   -SET FLAGS IN DSA TO
       MVI   PLIEH1+1(R13),X'00'  PRESERVE PL/I
       MVI   PLIEH2(R13),X'91'    ERROR-HANDLING
       MVI   PLIEH2+1(R13),X'C0'  IN THE ASSEMBLER ROUTINE.
       EJECT
***********************************************************************
*
* CHECK STRING PASSED FOR TYPE (VARYING OR FIXED) AND VALID LENGTH.
*
***********************************************************************
       LM    R1,R2,0(R4)     -R1 CONTAINS 1ST 1/2 OF LOCATOR/DESCRIPTOR
*                             (ADDRESS OF STRING),
*                             R2 CONTAINS 2ND 1/2.
       SRDL  R2,16           -R2 NOW CONTAINS LENGTH OF STRING PASSED,
*                             R3 BIT0 DENOTES TYPE OF STRING.
       LA    R4,0            -R4 CONTAINS 0.
       CR    R3,R4           -COMPARE R3 WITH 0 (R3 -VE => STRING IS
*                             VARYING, R3 +VE => STRING IS FIXED).
       BNL   FIXED           -BRANCH IF STRING IS FIXED.
       SPACE
* STRING IS VARYING...
**********************
       LA    R3,STRLEN       -LOAD R3 WITH EXPECTED STRING LENGTH.
       CR    R2,R3           -COMPARE ACTUAL WITH EXPECTED LENGTH.
       BNH   LAB1            -BRANCH IF STRING NOT TOO LONG.
       SPACE
* STRING IS TOO LONG...
***********************
       LR    R2,R3           -LENGTH OF RETURNED STRING WILL BE NORMAL.
LAB1   EQU   *
       STH   R2,0(R1)        -STORE LENGTH OF STRING TO BE RETURNED IN
*                             1ST TWO BYTES OF STRING.
       LA    R1,LENFLD(R1)   -MODIFY R1 TO POINT AFTER 1ST TWO BYTES
*                             OF STRING (LENGTH FIELD).
       B     LAB2            -BRANCH TO END OF PLI-ONLY SECTION.
       SPACE
* STRING IS FIXED...
********************
FIXED  EQU   *
       LA    R3,STRLEN       -LOAD R3 WITH STRING LENGTH.
       CR    R2,R3           -COMPARE ACTUAL WITH EXPECTED LENGTH.
       BNH   LAB2            -BRANCH IF STRING NOT TOO LONG.
       SPACE
* STRING TOO LONG, PAD WITH BLANKS...
*************************************
       MVI   STRLEN(R1),X'40'
*                            -MOVE A BLANK INTO FIRST POSITION TO BE
*                             PADDED.
       LA    R4,STRLEN+2     -LOAD R4 WITH STRING LENGTH + 2.
       SR    R2,R4           -SUBTRACT STRING LENGTH + 2 FROM R2.
       BM    ON              -BRANCH IF NO MORE BLANKS REQUIRED.
       SPACE
* MORE BLANKS REQUIRED...
*************************
       EX    R2,PROP         -PROPOGATE REQUIRED NO. OF BLANKS.
       B     ON              -BRANCH AROUND 'PROPOGATING INSTRUCTION'.
PROP   MVC   STRLEN+1(0,R1),STRLEN(R1)
*                            -'PROPOGATING INSTRUCTION'.
ON     EQU   *
       LR    R2,R3           -LENGTH OF RETURNED STRING WILL BE 42
*                             (PLUS BLANKS).
LAB2   EQU   *
       LA    R11,DSAPRE(R13)
       B     MAIN            -BRANCH TO MAIN PART OF PROGRAM.
***********************************************************************
* END OF PL1 INTERFACE.
***********************************************************************
       EJECT
***********************************************************************
*
* ASSEMBLER INTERFACE.
*
***********************************************************************
ASS    EQU   *
       L     R11,0(R1)       -GET ADDRESS OF RETURN STRING.
       LA    R2,0            -REG2 IS LOADED WITH THE NUMBER OF
*                             CHARACTERS TO BE MOVED FROM THE WORK
*                             SPACE TO THE RETURN STRING AT THE END OF
*                             THE PROGRAM.  IN THIS CASE NONE SINCE
*                             JOBINFA DOES NOT USE AN INTERMEDIATE WORK
*                             SPACE.
***********************************************************************
* END OF ASSEMBLER INTERFACE.
***********************************************************************
       EJECT
***********************************************************************
*
* MAIN PART OF PROGRAM.
*
***********************************************************************
       USING STRING,R11      -SET UP ADDRESSABILITY FOR RETURN STRING.
       SPACE
* 1 - JOB-NAME, 2 - PROCSTEP-NAME, 3 - JOBSTEP-NAME.
****************************************************
MAIN   EQU   *
       L     R3,CVTADR       -GET CVT ADDRESS.
       L     R4,OLDDWD(R3)   -GET 'OLD' OF OLD/NEW DOUBLEWORD FROM CVT.
       L     R4,TCBADR(R4)   -GET TCB ADDRESS.
       L     R5,TIOADR(R4)   -GET TIOT ADDRESS.
       MVC   JOBNAM(24),JOBETC(R5)
*                            -MOVE JOB-NAME, PROCSTEP-NAME,
*                             JOBSTEP-NAME TO WORK AREA.
       SPACE
* 4 - PROGRAM-NAME.
*******************
       L     R6,CRBADR(R4)   -GET CURRENT RB ADDRESS.
NEXT   EQU   *
       C     R4,CHBADR(R6)   -COMPARE TCB ADDRESS WITH CHAIN-BACK
*                             ADDRESS IN CURRENT RB.
       BE    PRB             -BRANCH IF CURRENT RB IS REQUIRED PRB.
       L     R6,CHBADR(R6)   -GET ADDRESS OF NEXT RB (POINTED TO BY
*                             CURRENT RB).
       B     NEXT            -TRY AGAIN WITH NEW CURRENT RB.
PRB    EQU   *
       L     R7,PRBADR(R6)   -GET ADDRESS OF CDE FOR CURRENT RB (=PRB).
       MVC   PROGNM(8),PROG(R7)
*                            -MOVE PROGRAM NAME TO WORK AREA.
       SPACE
* 5 - JOB-NUMBER.
*****************
       L     R8,TCTADR(R4)   -GET TCT ADDRESS.
       L     R8,JMRADR(R8)   -GET JMR ADDRESS.
       MVC   JOBNUM(4),JNUM(R8)
*                            -MOVE JOB-NUMBER TO WORK AREA.
       SPACE
* 6 - CPU-IDENTIFICATION.
*************************
       LA    R4,R6           -CALCULATE CPU-ID ADDRESS: 6 BYTES BEFORE
       SR    R3,R4            CVT (ADDRESS STILL IN REGISTER 3).
       UNPK  CPUID(5),CPU(3,R3)
*                            -MOVE CPU-ID TO WORK AREA.
       SPACE
* 7 - SYSTEM NAME.
******************
       MVC   SYSNAM(2),SYS(R8)
*                            -MOVE SYSTEM NAME TO WORK AREA.
       SPACE
* MOVE REQUIRED AMOUNT OF WORK AREA TO RETURN STRING.
*****************************************************
       LA    R3,1            -LOAD R3 WITH 1.
       SR    R2,R3           -SUBTRACT 1 FROM R2;  R2 NOW CONTAINS 1
*                             LESS THAN THE NO. OF CHARACTERS TO BE
*                             MOVED (READY FOR THE 'EXEC' INSTRUCTION).
       BM    END             -BRANCH IF NO CHARACTERS TO BE MOVED.
       EX    R2,MOVE         -MOVE REQUIRED NO. OF CHARACTERS.
***********************************************************************
* END OF MAIN PART OF PROGRAM.
***********************************************************************
       EJECT
***********************************************************************
*
* RETURN TO CALLING PROCEDURE.
*
***********************************************************************
END    EQU   *
       LTR   R9,R9           -TEST WHERE ENTERED.
       BP    LAB3            -BRANCH ROUND SAVE AREA RELEASE.
       L     R13,4(R13)      -RELEASE CURRENT PL1 DSA.
LAB3   EQU   *
       LM    R14,R11,12(R13) -RESTORE CALLER'S REGISTER'S.
       BR    R14
MOVE   MVC   0(0,R1),STRING  -'RETURN-REQUIRED-CHARACTERS INSTRUCTION'.
       EJECT
***********************************************************************
*
* DSECT FOR OUTPUT STRING.
*
***********************************************************************
STRING DSECT
JOBNAM DS    CL8             -JOB NAME.
PRSTNM DS    CL8             -PROCEDURE-STEP NAME.
JBSTNM DS    CL8             -JOB-STEP NAME.
PROGNM DS    CL8             -PROGRAM NAME.
JOBNUM DS    CL4             -JOB NUMBER.
CPUID  DS    CL4             -CPU IDENTITY.
SYSNAM DS    CL2             -SYSTEM NAME.
STRLEN EQU   *-STRING        -LENGTH OF DSECT.
       EJECT
***********************************************************************
*
* 'EQUATES'.
*
***********************************************************************
DSAPRE EQU   88              -LENGTH OF PLI'S PART OF DSA (DYNAMIC
*                             SAVE AREA).
NAVBYT EQU   76              -POSN OF ADDRESS OF NEXT AVAILABLE BYTE.
LSTBYT EQU   12              -POSN OF ADDRESS OF LAST AVAILABLE BYTE.
STORTN EQU   116             -POSN OF ADDRESS OF PLI STORAGE ROUTINE.
LIBWRK EQU   72              -POSN OF ADDRESS OF LIBRARY WORKSPACE.
PLIEH1 EQU   0               -POSN OF PLI ERROR-HANDLER FLAGS.
PLIEH2 EQU   86              -POSN OF PLI ERROR-HANDLER FLAGS.
LENFLD EQU   2               -VARYING STRING LENGTH-FIELD.
CVTADR EQU   16              -POSN OF CVT ADDRESS.
OLDDWD EQU   0               -POSN OF OLD DOUBLEWORD.
TCBADR EQU   0               -POSN OF TCB ADDRESS.
TIOADR EQU   12              -POSN OF TIOT ADDRESS.
JOBETC EQU   0               -POSN OF JOB, PROCSTEP, JOBSTEP NAMES.
CRBADR EQU   0               -POSN OF CURRENT REQUEST BLOCK ADDRESS.
CHBADR EQU   28              -POSN OF CHAIN-BACK ADDRESS.
PRBADR EQU   12              -POSN OF PROGRAM REQUEST BLOCK ADDRESS.
PROG   EQU   8               -POSN OF PROGRAM NAME.
TCTADR EQU   164             -POSN OF TCT ADDRESS.
JMRADR EQU   28              -POSN OF JMR ADDRESS.
JNUM   EQU   20              -POSN OF JOB NUMBER.
CPU    EQU   0               -POSN OF CPU IDENTITY.
SYS    EQU   18              -POSN OF SYSTEM IDENTITY
*                             ('EQUATE' CHANGED FROM 16 ON MVT).
       END
