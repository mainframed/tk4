1SYS1.OPWLIB.
+___________
0     THE ROUTINES IN THIS SECTION ARE FOR USE BY 'PL/1 OPTIMISER
 PROGRAMS AND RESIDE IN SYS1.OPWLIB.
1DATE ROUTINES.
+____ ________
0     THESE ROUTINES ARE FOR THE PURPOSE OF PERFORMING VARIOUS DATE
 CONVERSIONS AND CALCULATIONS FOR PL/1 PROGRAMS.
      THE FOLLOWING IDENTIFIERS AND ATTRIBUTES ARE USED THROUGHOUT
 THE DOCUMENTATION OF THIS SUB-SECTION:
 +------------+--------------+--------------------------------------+
 × IDENTIFIER ×  ATTRIBUTES  ×  MEANING                             ×
 +------------+--------------+--------------------------------------+
 ×   DD       × FIXED DEC(2) × DAY OF MONTH                         ×
 ×   DDD      × FIXED DEC(3) × IOCS DAY  (1 = 1ST JAN,...,365 = 31ST×
 ×            ×              × DEC), (366 = 31ST DEC FOR LEAP YEARS)×
 ×   D1       × FIXED DEC(1) × DAY OF WEEK TYPE 1                   ×
 ×            ×              ×              (1 = SUN,...,7 = SAT)   ×
 ×   D2       × FIXED DEC(1) × DAY OF WEEK TYPE 2                   ×
 ×            ×              ×              (1 = MON,...,7 = SUN)   ×
 ×   MM       × FIXED DEC(2) × MONTH OF YEAR  (1 = JAN,...,12 = DEC)×
 ×   PP1      × FIXED DEC(2) × ACCOUNTING PERIOD  (SEE NOTE 1 BELOW)×
 ×   PP2      × FIXED DEC(2) × MONTHLY ACCOUNTING PERIOD            ×
 ×            ×              × (1 = APR,...,9 = DEC,                ×
 ×            ×              ×  10 = JAN,...,12 = MAR)              ×
 ×   WW       × FIXED DEC(2) × ACCOUNTING WEEK  (SEE NOTE 2 BELOW)  ×
 ×   YYDDD    × FIXED DEC(5) × IOCS DATE  (E.G. 79034 = 3RD FEB '79)×
 ×   YYMMDD   × CHAR(6)      × PL/1 DATE                            ×
 ×   YY1      × FIXED DEC(2) × YEAR  (E.G. 79 RUNS FROM 1ST JAN 79  ×
 ×            ×              × TO 31ST DEC 79)                      ×
 ×   YY2      × FIXED DEC(2) × ACCOUNTING YEAR  (E.G. 78 RUNS FROM  ×
 ×            ×              × 1ST APR 78 TO 31ST MAR 79)           ×
 +------------+--------------+--------------------------------------+

 NOTE 1: ACCOUNTING PERIODS.
+__________________________
 THERE ARE TWELVE ACCOUNTING PERIODS IN THE YEAR:
     THE 1ST FINISHES ON THE LAST DAY OF THE 4TH ACCOUNTING WEEK,
     THE 2ND FINISHES ON THE LAST DAY OF THE 8TH ACCOUNTING WEEK
 AND THE 3RD FINISHES ON THE LAST DAY OF THE 13TH ACCOUNTING WEEK.
 THIS SEQUENCE OF 4 WEEKS, 4 WEEKS, 5 WEEKS IS REPEATED TO THE END
 OF THE ACCOUNTING YEAR, EXCEPT FOR ACCOUNTING PERIOD 12 WHICH
 FINISHES ON THE LAST DAY OF THE ACCOUNTING YEAR.

 NOTE 2: ACCOUNTING WEEKS.
+________________________
 AN ACCOUNTING WEEK RUNS FROM SUNDAY TO THE FOLLOWING SATURDAY WITH
 TWO EXCEPTIONS:
   1) WEEK 1 STARTS ON THE FIRST DAY OF THE ACCOUNTING YEAR, AND
      RUNS UNTIL THE FIRST SATURDAY IN APRIL IF THIS FALLS ON OR
      AFTER 5TH OF APRIL, OR UNTIL THE SECOND SATURDAY IN APRIL IF
      THE FIRST ONE FALLS BEFORE 5TH APRIL.
   2) WEEK 52 STARTS ON SUNDAY AND ENDS ON 31ST MARCH.
1  NAME - PLMACDY (SUBROUTINE).

   FUNCTION.
           TO RETURN THE DAY OF THE WEEK, TYPE 2 (1=MON, ETC.), DATE
           AND CALENDAR MONTH OF THE LAST DAY OF THE ACCOUNTING
           MONTH, WHEN SUPPLIED WITH AN ACCOUNTING MONTH AND AN
           ACCOUNTING YEAR.

   INPUT.
           PP2      (FIXED DEC(2)) - THE MONTHLY ACCOUNTING PERIOD,
           YY2      (FIXED DEC(2)) - THE ACCOUNTING YEAR.

   OUTPUT.
           D2       (FIXED DEC(1)) - THE DAY OF THE WEEK (1=MON),
           DD       (FIXED DEC(2)) - THE DATE OF THE LAST DAY OF THE
                                     MONTH,
           MM       (FIXED DEC(2)) - THE MONTH OF THE YEAR.

   EXAMPLE.
           DCL PP2 FIXED DEC(2);
           DCL YY2 FIXED DEC(2);
           DCL D2 FIXED DEC(1);
           DCL DD FIXED DEC(2);
           DCL MM FIXED DEC(2);
           CALL PLMACDY(PP2,YY2,D2,DD,MM);

           BEFORE CALL: PP2=11, YY2=78;
           AFTER CALL: D2=3,DD=28,MM=2.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID ACCOUNTING MONTH IS ENTERED THE VALUES
           (PP2,YY2,0,0) ARE RETURNED TO THE CALLING PROCEDURE.

1  NAME - PLMACPD (SUBROUTINE).

   FUNCTION.
           TO RETURN THE A/C PERIOD IN WHICH A GIVEN DAY FALLS WHEN
           SUPPLIED WITH AN 'IOCS' DATE (I.E. YY,DDD).

   INPUT.
           YY1 (FIXED DEC(2)) - THE YEAR,
           DDD (FIXED DEC(3)) - THE 'IOCS' DAY.

   OUTPUT.
           PP2 (FIXED DEC(2)) - THE A/C PERIOD.

   EXAMPLE.
           DCL YY1 FIXED DEC(2);
           DCL DDD FIXED DEC(3);
           DCL PP2 FIXED DEC(2);
           CALL PLMACPD(YY1,DDD,PP2);

           BEFORE CALL: YY1=79,DDD=37;
           AFTER CALL: PP2=11.


   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID NUMBER OF DAYS IS ENTERED THE VALUES
           (YY1,DDD,0) ARE RETURNED TO THE CALLING PROCEDURE.
1  NAME - PLMPLAC (SUBROUTINE).

   FUNCTION.
           TO RETURN THE ACCOUNTING DATE (D2,WW,YY), (WHERE D2 IS THE
           DAY OF THE WEEK (1=MON, ETC.), WW IS THE WEEK NUMBER - THE
           FIRST COMPLETE WEEK IN THE YEAR IS WEEK 1, YY IS THE YEAR)
           WHEN SUPPLIED WITH A PL/1 FORMAT DATE.

   INPUT.
           YYMMDD (CHAR(6)     - PL/1-FORMAT DATE.

   OUTPUT.
           D2   (FIXED DEC(1)) - DAY OF WEEK (1=MON),
           WW   (FIXED DEC(2)) - ACCOUNTING WEEK,
           YY2  (FIXED DEC(2)) - ACCOUNTING YEAR.

   EXAMPLE.
           DCL YYMMDD CHAR(6);
           DCL D2 FIXED DEC(1);
           DCL WW FIXED DEC(2);
           DCL YY2 FIXED DEC(2);
           CALL PLMPLAC(YYMMDD,D2,WW,YY2);

           BEFORE CALL: YYMMDD='790206';
           AFTER CALL: D2=2,WW=45,YY2=78.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID DATE IS ENTERED THE VALUES (YYMMDD,0,0,0)
           ARE RETURNED TO THE CALLING PROCEDURE.

1  NAME - PLWACDY (SUBROUTINE).

   FUNCTION.
           TO RETURN: DAY OF WEEK TYPE 1 (1=SUN), DAY OF MONTH AND
                      MONTH OF YEAR, OF LAST DAY OF A/C PERIOD;
           WHEN PROVIDED WITH: A/C PERIOD AND A/C YEAR.

   INPUT.
           PP1    - A/C PERIOD,
           YY2    - A/C YEAR.

   OUTPUT.
           D1     - DAY OF WEEK (1=SUN),
           DD     - DAY OF MONTH,
           MM     - MONTH OF YEAR.

   EXAMPLE.
           DCL PLWACDY
                 ENTRY(FIXED(2),FIXED(2),FIXED(1),FIXED(2),FIXED(2));
           CALL PLWACDY(PP1,YY2,D1,DD,MM);

           BEFORE CALL: PP1=5, YY2=64;
           AFTER CALL: D1=7, DD=29, MM=8.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE OUTPUT
           PARAMETERS ARE SET TO ZERO (FIXED DEC).

1  NAME - PLWACPD (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: A/C PERIOD;
           WHEN PROVIDED WITH: YEAR AND IOCS DAY.

   INPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   OUTPUT.
           PP1    - A/C PERIOD.

   EXAMPLE.
           DCL PLWACPD ENTRY(FIXED(2),FIXED(3),FIXED(2));
           CALL PLWACPD(YY1,DDD,PP1);

           BEFORE CALL: YY1=69, DDD=124;
           AFTER CALL: PP1=2.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE OUTPUT
           PARAMETER IS SET TO ZERO (FIXED DEC).

1  NAME - PLWIDAT (FUNCTION).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK, DAY OF MONTH, MONTH AND YEAR, IN
                       CHARACTER FORM;
           WHEN PROVIDED WITH: YEAR AND IOCS DAY.

   INPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   OUTPUT.
           A CHARACTER STRING WITH ATTRIBUTES: 'CHAR(29) VAR', WHICH
           CONTAINS DAY OF WEEK, DAY OF MONTH, CALENDER MONTH AND
           YEAR.

   EXAMPLE.
           DCL PLWIDAT ENTRY(FIXED(2),FIXED(3))
                       RETURNS(CHAR(29)VAR);
           DCL X CHAR(29)VAR;
           X=PLWIDAT(YY1,DDD);

           BEFORE CALL: YY1=67, DDD=123;
           AFTER CALL: X='WEDNESDAY 3RD MAY 1967'.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE VARYING
           CHARACTER STRING TO BE RETURNED IS SET TO 'X'.

1  NAME - PLWIDAY (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK TYPE 2 (1=MON), DAY OF MONTH AND
                       CALANDER MONTH;
           WHEN PROVIDED WITH: YEAR AND IOCS DAY.

   INPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   OUTPUT.
           D2     - DAY OF WEEK (1=MON),
           DD     - DAY OF MONTH,
           MM     - MONTH.

   EXAMPLE.
           DCL PLWIDAY
               ENTRY(FIXED(2),FIXED(3),FIXED(1),FIXED(2),FIXED(2));
           CALL PLWIDAY(YY1,DDD,D2,DD,MM);

           BEFORE CALL: YY1=67, DDD=123;
           AFTER CALL: D2=3,DD=3,MM=5.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE OUTPUT
           PARAMETERS ARE SET TO ZERO (FIXED DEC).

1  NAME - PLWIOCS (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: IOCS DATE.

   INPUT.
           NONE.

   OUTPUT.
           YYDDD  - IOCS DATE.

   EXAMPLE.
           DCL PLWIOCS ENTRY(FIXED(5));
           CALL PLWIOCS(YYDDD);

           AFTER CALL: YYDDD=78334.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - PLWIODY (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK TYPE 2 (1=MON);
           WHEN PROVIDED WITH: YEAR AND IOCS DAY.

   INPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   OUTPUT.
           D2     - DAY OF WEEK (1=MON).

   EXAMPLE.
           DCL PLWIODY ENTRY(FIXED(2),FIXED(3),FIXED(1));
           CALL PLWIODY(YY1,DDD,D2);

           BEFORE CALL: YY1=67,DDD=123;
           AFTER CALL: D2=3.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID INPUT PARAMETER IS DETECTED, THE RETURN
           PARAMETER IS SET TO ZERO (FIXED DEC).

1  NAME - PLWIOPL (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: PL1 FORMAT DATE;
           WHEN PROVIDED WITH: YEAR AND IOCS DATE.

   INPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   OUTPUT.
           YYMMDD - PL1 DATE.

   EXAMPLE.
           DCL PLWIOPL ENTRY(FIXED(2),FIXED(3),CHAR(6));
           CALL PLWIOPL(YY1,DDD,YYMMDD);

           BEFORE CALL: YY1=67, DDD=123;
           AFTER CALL: YYMMDD='670503'.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE OUTPUT
           PARAMETER IS SET TO: 'ERROR '.

1  NAME - PLWPDAT (FUNCTION).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK, DAY OF MONTH, MONTH AND YEAR
                       IN CHARACTER FORM;
           WHEN PROVIDED WITH: PL1 DATE.

   INPUT.
           YYMMDD - PL1 DATE.

   OUTPUT.
           DAY OF WEEK, DAY OF MONTH, MONTH AND YEAR (IN CHARACTER
           FORM).

   EXAMPLE.
           DCL PLWPDAT ENTRY(CHAR(6)) RETURNS(CHAR(29)VAR);
           DCL X CHAR(29)VAR;
           X=PLWPDAT(YYMMDD);

           BEFORE CALL: YYMMDD='781123';
           AFTER CALL: X='THURSDAY 23RD NOVEMBER 1978'.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID PARAMETER IS DETECTED, THE 29-BYTE CHARACTER
           STRING RETURNED IS SET TO 'X'.

1  NAME - PLWPDAY (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK, TYPE 2 (1=MON);
           WHEN PROVIDED WITH: PL/1 DATE.

   INPUT.
           YYMMDD - THE PL/1 DATE.

   OUTPUT.
           D2     - DAY OF WEEK (1=MON).

   EXAMPLE.
           DCL PLWPDAY ENTRY(CHAR(6),D2);
           CALL PLWPDAY(YYMMDD,D2);

           BEFORE CALL: YYMMDD='781214';
           AFTER CALL: P6=4.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF AN INVALID INPUT PARAMETER IS DETECTED, THE OUTPUT
           PARAMETER IS SET TO ZERO (FIXED DEC).

1  NAME - PLWPLAC (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: DAY OF WEEK TYPE 1 (1=SUN), A/C WEEK AND
                       A/C YEAR;
           WHEN PROVIDED WITH: PL/1 DATE.

   INPUT.
           YYMMDD - PL/1 DATE.

   OUTPUT.
           D1     - A/C DAY,
           WW     - A/C WEEK,
           YY2    - A/C YEAR.

   EXAMPLE.
           DCL PLWPLAC ENTRY(CHAR(6),FIXED(1),FIXED(2),FIXED(2));
           CALL PLWPLAC(YYMMDD,D1,WW,YY2);

           BEFORE CALL: YYMMDD='680331',
           AFTER CALL: D1=1, WW=52, YY2=67.

   MESSAGES - NONE.

   ERROR  HANDLING.
           IF AN INVALID INPUT PARAMETER IS DETECTED, THE OUTPUT
           PARAMETERS ARE SET TO ZERO (FIXED DEC).

1  NAME - PLWPLIO (SUBROUTINE).

   FUNCTION.
           TO PROVIDE: YEAR AND IOCS DAY;
           WHEN PROVIDED WITH: PL1 DATE.

   INPUT.
           YYMMDD - PL1 DATE.

   OUTPUT.
           YY1    - YEAR,
           DDD    - IOCS DAY.

   EXAMPLE.
           DCL PLWPLIO ENTRY(CHAR(6),FIXED(2),FIXED(3));
           CALL PLWPLIO(YYMMDD,YY1,DDD);

           BEFORE CALL: YYMMDD='670503';
           AFTER CALL: YY1=67, DDD=123.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           IF INVALID INPUT PARAMETERS ARE DETECTED, THE OUTPUT
           PARAMETERS ARE SET TO ZERO (FIXED DEC).
1STRING HANDLING ROUTINES.
+______ ________ ________
0     THESE ROUTINES WERE ORIGINALLY WRITTEN FOR USE BY 'PL/1 F'
 PROGRAMS (BECAUSE PL/1 F HAD LESS SOPHISTICATED BUILT-IN-FUNCTIONS
 THAN PL/1 OPTIMISER).
 THE DOCUMENTATION OF THE ROUTINES IN THIS SUB-SECTION IS INCLUDED
 FOR USE IN MAINTAINING PROGRAMS WHICH USE THESE ROUTINES.  NEW
 PROGRAMS SHOULD MAKE USE OF BUILT-IN-FUNCTIONS.
      FOR EACH OF THE EXAMPLES IN THE TEXT, THE EQUIVALENT USE OF
 BUILT-IN-FUNCTIONS IS PROVIDED.  NOTE THAT THE FORM:
                      X=(0=VERIFY(..,..));
 IS GIVEN IN SOME CASES.  THIS IS TO ENSURE AN IDENTICAL RESULT TO
 THAT GIVEN BY THE ROUTINE CONCERNED, SINCE 'VERIFY' RETURNS A BINARY
 NUMBER WHEREAS THE ROUTINE RETURNS A BIT STRING OF LENGTH 1.  NOTE
 ALSO THAT 'IF VERIFY(..,..)' WOULD BE 'TRUE' IF AN UNMATCHED
 CHARACTER IS FOUND WHEREAS 'IF BALPHA(..)', FOR EXAMPLE, WOULD BE
 'TRUE' IF NO UNMATCHED CHARACTERS ARE FOUND.
1  NAME - BALPHA (FUNCTION).

   FUNCTION.
           TO DETERMINE WHETHER A STRING CONTAINS ONLY ALPHABETIC
           CHARACTERS (BLANKS ARE COUNTED AS ALPHABETIC CHARACTERS).
      N.B. THIS ROUTINE SHOULD NOT BE USED IN FUTURE PROGRAMS,
           INSTEAD, THE BUILT-IN FUNCTION, 'VERIFY' SHOULD BE USED.

   INPUT.
           A STRING OF CHARACTERS.

   OUTPUT.
           A SINGLE BIT, SET TO ONE IF ALL THE CHARACTERS IN THE
           PASSED STRING ARE ALPHABETIC, OR ZERO IF THE STRING
           CONTAINS ANY NON-ALPHABETIC CHARACTER(S).

   EXAMPLE.
           DCL BALPHA ENTRY(CHAR(*)) RETURNS(BIT(1));
           DCL X BIT(1);
           X=BALPHA('ABCDEF+');

           AFTER CALL: X='0'B (BECAUSE '+' IS NON-ALPHABETIC).

      PL/1 OPTIMISER EQUIVALENT:
           X=(0=VERIFY('ABCDEF+','ABCDEFGHIJKLMNOPQRSTUVWXYZ '));

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - NUM (FUNCTION).

   FUNCTION.
           TO DETERMINE WHETHER A STRING CONTAINS ONLY NUMERIC
           CHARACTERS (0-9).
      N.B. THIS ROUTINE SHOULD NOT BE USED IN FUTURE PROGRAMS,
           INSTEAD, THE BUILT-IN FUNCTION, 'VERIFY' SHOULD BE USED.

   INPUT.
           A STRING OF CHARACTERS.

   OUTPUT.
           A SINGLE BIT, SET TO ONE IF ALL THE CHARACTERS IN THE
           PASSED STRING ARE NUMERIC, OR ZERO IF THE STRING CONTAINS
           ANY NON-NUMERIC CHARACTERS.

   EXAMPLE.
           DCL NUM ENTRY(CHAR(*)) RETURNS(BIT(1));
           DCL X BIT(1);
           X=BALPHA('012345!');

           AFTER CALL: X='0'B (BECAUSE A BLANK IS NON-NUMERIC).

      PL/1 OPTIMISER EQUIVALENT:
           X=(0=VERIFY('012345 ','0123456789'));

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - SPEC1 (FUNCTION).

   FUNCTION.
           TO CHECK WHETHER ALL THE CHARACTERS IN ONE CHARACTER
           STRING ARE PRESENT IN A SECOND CHARACTER STRING.

   INPUT.
           STR1   - CHARACTER STRING,
           STR2   - CHARACTER STRING.

   OUTPUT.
           A ONE BIT IS RETURNED TO INDICATE THAT ALL THE CHARACTERS
           IN THE FIRST STRING ARE ALSO IN THE SECOND, OTHERWISE A
           ZERO BIT IS RETURNED.

   EXAMPLE.
           DCL STR1 CHAR(5) INIT('ABCDE');
           DCL STR2 CHAR(12) INIT('BCDEFGHIJKLM');
           DCL X BIT(1);
           DCL SPEC1 RETURNS(BIT(1));
           X=SPEC1(STR1,STR2);

           AFTER CALL: X='0'B  (BECAUSE A LETTER IN THE FIRST STRING,
                       ('A'), IS NOT CONTAINED IN THE SECOND STRING).

      PL/1 OPTIMISER EQUIVALENT:
           X=(0=VERIFY(STR1,STR2));

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - TRANSL (FUNCTION).

   FUNCTION.
           TO SCAN A CHARACTER STRING AND TRANSLATE THE CHARACTERS OF
           THE STRING ACCORDING TO A TRANSLATION TABLE.  THE TABLE
           SPECIFIES WHICH CHARACTERS ARE TO BE REPLACED AND WHICH
           CHARACTERS THEY ARE TO BE REPLACED BY.

   INPUT.
           STRING - THE STRING TO BE SCANNED,
           TABLE  - THE TRANSLATION TABLE TO BE USED.

   OUTPUT.
           THE TRANSLATED FORM OF THE PASSED STRING IS RETURNED.

   EXAMPLE.
           DCL TRANSL RETURNS (CHAR(256) VAR);
           DCL STRING CHAR(6) INIT('FATHER');
           DCL 1 TABLE(2),
                 2 WAS CHAR(1) INIT('F','A'),
                 2 TOBE CHAR(1) INIT('M','O'),
           STRING=(TRANSL(STRING,TABLE));

           BEFORE CALL: STRING='FATHER';
           AFTER CALL: STRING='MOTHER'.

      PL/1 OPTIMISER EQUIVALENT:
           STRING=TRANSLATE(STRING,'MO','FA');

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           NONE.
1MISCELLANEOUS ROUTINES.
+_____________ ________
1  NAME - ABEND (SUBROUTINE).

   FUNCTION.
           TO ALLOW PL/I PROGRAMS TO ABEND AT WILL.

   INPUT.
           ONE PARAMETER - FIXED BINARY(31).

   OUTPUT.
           ABEND WITH DUMP.

   EXAMPLE.
           DCL ABEND ENTRY(FIXED BIN(31));
           CALL ABEND(999);

           THE CALL WILL CAUSE THE PROGRAM TO ABEND WITH A USER
           COMPLETION CODE OF 999.

   MESSAGES - NONE.

   ERROR  HANDLING.
           NIL.

  RESTRICTIONS.
          N.B. THE 'NOSTAE' COMPILER OPTION (WHICH IS THE BA
          INSTALLATION DEFAULT) IS REQUIRED TO PREVENT THE ERROR
          BLOCK FROM BEING ENTERED.

1  NAME - AREAD (SUBROUTINE).

   FUNCTION.
           TO READ TAPES FROM THE 1900 SERIES COMPUTERS AND ANALYZE
           THE VOL1 HEADER RECORD ON THOSE TAPES WHICH HAVE 81 BYTE
           HEADER LABELS.

   INPUT.
           FILE   - THE PL/1 FILE TO BE READ;
           LAB    - A LABEL TO WHICH THE ROUTINE WILL RETURN WHEN THE
                    END OF THE LAST REEL IS REACHED.

   OUTPUT.
           PTR    - A POINTER TO THE RECORD IN THE BUFFER;
           SERIAL - A VARYING LENGTH CHARACTER STRING SET BY THE
                    FIRST CALL TO THE SERIAL NUMBER OF THE FIRST
                    VOLUME OF THE DATA SET, AND BY THE LAST CALL TO
                    THE CONCATENATED SERIAL NUMBERS OF ALL THE
                    VOLUMES OF THE DATA SET;
           DSN    - A VARYING LENGTH CHARACTER STRING SET BY THE
                    FIRST CALL TO THE DATA SET NAME (WHICH IS LEFT-
                    -JUSTIFIED AND BLANK PADDED IF LESS THAN 17
                    CHARACTERS, OR RIGHT-JUSTIFIED AND TRUNCATED ON
                    LEFT IF MORE THAN 17 CHARACTERS).

   EXAMPLE.
           ...
           //AHDR1  DD DISP=OLD,UNIT=2400-3,LABEL=(1,BLP),VOL=SER=1
           //ADATA1 DD DISP=OLD,UNIT=2400-3,LABEL=(2,BLP),VOL=SER=1
           //ATRL1  DD DISP=OLD,UNIT=2400-3,LABEL=(3,BLP),VOL=SER=1
           //AHDR2  DD DISP=OLD,UNIT=2400-3,LABEL=(1,BLP),VOL=SER=2
           //ADATA2 DD DISP=OLD,UNIT=2400-3,LABEL=(2,BLP),VOL=SER=2
           //ATRL2  DD DISP=OLD,UNIT=2400-3,LABEL=(3,BLP),VOL=SER=2
           ...
           ...
            DCL FILE FILE RECORD INPUT;
            DCL PTR PTR;
            DCL LAB LABEL INIT(NOMORE);
            DCL SERIAL CHAR(2) VAR;
            DCL DSN CHAR(17) VAR;
            DCL AREAD ENTRY;
           ...
            CALL AREAD(FILE,PTR,LAB,SERIAL,DSN);
           ...
            NOMORE:
           ...

           N.B. THE AHDR AND ADATA DD CARDS MUST BE SUPPLIED, THE
           ATRL DD CARD NEED NOT BE.  THE DD NAMES MUST BE OF THE
           FORMAT:      AXXXN
                WHERE A   IS CONSTANT,
                      XXX IS EITHER 'HDR', 'DATA' OR 'TRL',
                      N   IS THE REEL NUMBER.

   EXITS.
           RETURNS TO STATEMENT FOLLOWING 'CALL' IN CALLING PROGRAM,
           EXCEPT FOR THE CASE IN WHICH THE END OF THE LAST REEL OF
           THE DATA SET IS REACHED, WHEN IT RETURNS TO THE LABEL
           PASSED AS A PARAMETER.

   MESSAGES.
           IF THE SERIAL NUMBER OF THE MOUNTED TAPE IS NOT THE SAME
           AS THE ONE SPECIFIED IN THE JCL, THE OPERATOR WILL BE
           REQUESTED TO MOUNT THE TAPE SPECIFIED IN THE JCL OR CANCEL
           THE JOB.

   ERROR  HANDLING.
           NONE.
1  NAME - ASD05 (FUNCTION).

   FUNCTION.
           TO RETURN THE FILENAME OF A PL/I FILE.

   INPUT.
           FILE - A PL/I FILE VARIABLE.

   OUTPUT.
           FILENAME - CHAR(20) VAR

   EXAMPLE.
           DCL ASD05 ENTRY(FILE) RETURNS(CHAR(20) VAR);
           DCL FILENAME CHAR(20) VAR;
           DCL INPUT FILE RECORD INPUT;
           .....................
           FILENAME = ASD05(INPUT);
           /* THIS IS THE SAME AS FILENAME = 'INPUT' */
           /* HOWEVER IF THE FILE HAD BEEN PASSED AS A PARAMETER
           TO THIS MODULE THE FILENAME MIGHT NOT BE THE SAME
           AS THE VARIABLE NAME */
1  NAME - BINSRCH (SUBROUTINE).

   FUNCTION.
           TO ALLOW PL/I PROGRAMS TO USE A BINARY SEARCH TECHNIQUE
           ON UNSORTED TABLES.
           ALSO IT SHOULD IMPROVE EXECUTION TIME ON SORTED TABLES
           BECAUSE THE SEARCH ROUTINE USES ASSIGNMENT STATEMENTS
           RATHER THAN DIVIDE STATEMENTS.

   INPUT.
           COMP - THE TABLE TO BE SEARCHED.

   OUTPUT.
           LEFT - AN ARRAY OF HALFWORD BINARY WHICH CONTAINS THE
           SUBSCRIPT OF THE NEXT FIELD IN THE TABLE TO BE COMPARED IF
           THE CURRENT COMPARE IS HIGH.
           RIGHT - CONTAINS THE SUBSCRIPTS OF THE NEXT FIELD IN THE
           TABLE TO BE COMPARED IF THE CURRENT COMPARE IS LOW.
           ROOT - CONTAINS THE SUBSCRIPT OF THE LOGICAL MIDDLE OF
           TABLE. I.E. WHERE THE BINARY SEARCH IS TO START.

   METHOD.
           THE BINSRCH ROUTINE SETS UP THREE VARIABLES:
           1. AN ARRAY OF HALF WORD BINARY FIELDS WITH THE SAME
              BOUNDS AS THE TABLE.  THIS ARRAY (CALLED LEFT IN THE
              EXAMPLE) CONTAINS THE SUBSCRIPT OF THE NEXT COMPARE IF
              THE CURRENT COMPARE IS HIGH.
           2. AN ARRAY OF HALF WORD BINARY FIELDS WITH THE SAME
              BOUNDS AS THE TABLE. THIS ARRAY (CALLED RIGHT IN THE
              EXAMPLE) CONTAINS THE SUBSCRIPT OF THE NEXT COMPARE
              IF THE CURRENT COMPARE IS LOW.
           3. A HALF WORD BINARY FIELD. (CALLED ROOT IN THE EXAMPLE).
              THIS CONTAINS THE SUBSCRIPT OF THE LOGICAL CENTRE OF
              THE TABLE. I.E. THE PLACE THE BINARY SEARCH WILL START.

   EXAMPLE.

            DCL     1 TABLE(-20:19),
                       2 ...,
                       2 ...,
                       2 KEY CHAR(9),
                       2 ...;
            DCL     LEFT(-20,19) FIXED BIN(15);
            DCL     RIGHT(-20,19) FIXED BIN(15);
            DCL     ROOT FIXED BIN(15);
            /* * * * * * * * * * * * * * * * * * * * * * * *
             *                                             *
             *  TABLE HAS BEEN CREATED OR INITIALISED BY   *
             *  THE PROGRAM.                               *
             *  NOW CALL BINSRCH TO SET UP SEARCH FIELDS.  *
             *                                             *
             * * * * * * * * * * * * * * * * * * * * * * * */
            DCL     BINSRCH ENTRY;
                    CALL BINSRCH(KEY,LEFT,RIGHT,ROOT);
            /* * * * * * * * * * * * * * * * * * * * * * * *
             *                                             *
             *  TO DISCOVER WHETHER AN ENTRY IS PRESENT IN *
             *  THE TABLE THE PROGRAMMER CODES A ROUTINE   *
             *  SIMILAR TO THE FOLLOWING, WHERE SEARCHFLD  *
             *  IS THE KEY TO BE FOUND.                    *
             *                                             *
             *  NOTE IF THE SEARCH IS NOT SATISFIED THE    *
             *  SUBSCRIPT IN LEFT OR RIGHT WILL EQUAL THE  *
             *  LOW BOUND -1 OF THE TABLE ARRAY            *
             *  AS TABLE WAS DECLARED TABLE(-20:19) IT     *
             *  WILL EQUAL -21 IN THIS EXAMPLE.            *
             *                                             *
             * * * * * * * * * * * * * * * * * * * * * * * */
                    I = ROOT;      /* START POSITION OF SEARCH */
                    DO WHILE(I ^= -21);
                       IF KEY(I) = SEARCHFLD THEN GO TO FOUND;
                       IF KEY(I) > SEARCHFLD
                          THEN I = LEFT(I);   /* ENTRY IN TABLE
                                                 HIGH. LOOK AT
                                                 LOWER ENTRY */
                          ELSE I = RIGHT(I);  /* ENTRY IN TABLE
                                                 LOW. LOOK AT
                                                 HIGHER ENTRY */
                    END;
                    GO TO NOT_FOUND;

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - DLITPLI (SUBROUTINE).

   FUNCTION.
           THIS IS NOW A DUMMY ROUTINE.  INSTEAD OF USING IT,
           'PLICALLA' MAY BE SPECIFIED AS THE ENTRY POINT OF THE LOAD
           MODULE.

   INPUT.
           NONE.

   OUTPUT.
           NONE.

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - IMSERR (SUBROUTINE).

   FUNCTION.
           TO PRINT THE PARAMETERS TO AN IMS CALL.

   INPUT.
           1. PARAMETERS ARE PASSED BY PL/I PROGRAM.
                THEY SHOULD BE IN THE SAME FORMAT AS IN THE IMS CALL.
           2. THE PCB POINTER PARAMETER SHOULD POINT TO A VALID PCB.

   OUTPUT.
           THE REPORT IS PRODUCED ON FILE IMSERRPT.

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - JOBINFP (SUBROUTINE).

   FUNCTION.
           TO SUPPLY A PL/1 PROGRAM WITH EXECUTION-TIME JOB
           INFORMATION.

   INPUT.
           A CHARACTER STRING (IF THIS IS NOT 42 CHARACTERS LONG, THE
           RETURNED INFORMATION WILL BE TRUNCATED, OR LEFT-JUSTIFIED
           AND BLANK-PADDED).

   OUTPUT.
           THE INFORMATION SHOWN BELOW IS ASSIGNED TO THE STRING BY
           JOBINFP.  TRUNCATION OR BLANK-PADDING WILL OCCUR AS
           MENTIONED ABOVE WITH ONE EXEPTION: IF THE PARAMETER IS A
           VARYING LENGTH CHARACTER STRING WITH A MAXIMUM LENGTH OF
           MORE THAN 42 CHARACTERS, ITS LENGTH WILL BE SET TO 42
           CHARACTERS BY JOBINFP.

           THE INFORMATION RETURNED IS AS FOLLOWS:

                 JOB NAME               - 8 CHARACTERS
                 PROCEDURE-STEP NAME    - 8 CHARACTERS
                 JOB-STEP NAME          - 8 CHARACTERS
                 PROGRAM NAME           - 8 CHARACTERS
                 JOB NUMBER             - 4 CHARACTERS
                 CPU IDENTITY           - 4 CHARACTERS
                 SYSTEM NAME            - 2 CHARACTERS

           THE CPU IDENTITY MAY TAKE THE VALUES:
             'X065','X168','X470',
           WHERE X IS CURRENTLY SET TO ZERO, BUT MAY NOT BE IN A
           FUTURE VERSION OF THE PROGRAM.

           THE SYSTEM NAME MAY TAKE THE VALUES:
             'S1','S2','S3','S4','S5','S6'.

   EXAMPLE.
           DCL INFO CHAR(42);
           DCL JOBINF ENTRY(CHAR(42));
           CALL JOBINF(INFO);

           AFTER CALL: INFO=
                     'JPWTEST1G       COPCLG  TEST    99990168S3'.

   MESSAGES.
           NONE.

   ERROR  HANDLING.
           NONE.
1 NAME - OPENJ (SUBROUTINE).

  FUNCTION.
          TO ALLOW PL/I PROGRAMS TO USE OS SVC 22 ( OPEN,TYPE=J ).

  INPUT.
          JFCB - 176 BYTE JFCB TO BE SUPPLIED TO OPEN.
          FILE - 8 CHARACTER FIELD, CONTAINING DDNAME TO BE OPENED.

  OUTPUT.
          OS SVC 22 MODIFIES THE JFCB ON THE OS JOB QUEUE.

          IF THE OPEN FAILS A RETURN CODE IS PLACED IN REG 15,
               AND THE SUPPLIED JFCB AMENDED TO HAVE A BLANK
               DATASETNAME FIELD.

  EXAMPLE.
          DCL OPENJ ENTRY(CHAR(176),CHAR(8)) OPTIONS(ASSEMBLER,
                                                           RETCODE);
          % INCLUDE PWRDJFCB; /* DECLARES 176-BYTE JFCB AND RDJFCB
                                                           ROUTINE*/
          JFCB = RDJFCB('DDNAME');
          .... CODE TO AMEND JFCB - EG CHANGE DSNAME OR DISP ....
          CALL OPENJ(JFCB,'DDNAME'); /* REWRITE JFCB TO JOB QUEUE */
          IF PLIRETV() ^= 0 THEN SIGNAL ERROR; /* DID OPENJ FAIL? */
          OPEN FILE(DDNAME); /* OPEN FILE (USING MODIFIED JFCB) */
          .... AND PROCEED TO PROCESS THE FILE ....

  MESSAGES.
          NO MESSAGES ARE ISSUED IN THIS MODULE.

  ERROR  HANDLING.
          AN ERROR FROM OPEN IS INDICATED BY A RETURN CODE OF 4,
               AND THE JFCB DATASETNAME FIELD IS SET TO BLANKS.
1  NAME - PLWPRE (SUBROUTINE).

   FUNCTION.
           TO PRINT THE BOADICEA TRAILER PAGE.  (STREAM I/O).

   INPUT.
           FILENAME    - THE NAME OF A PRINT FILE;
           REPORT-NAME - AN 8-CHARACTER REPORT NAME;
           RUN-NUMBER  - THE RUN NUMBER, IN A VARYING CHARACTER
                         STRING UP TO 40 CHARACTERS LONG.
           PAGES       - THE NUMBER OF PAGES IN THE REPORT, IN A
                         FIXED DEC(5) FIELD.

   OUTPUT.
           THE BOADICEA TRAILER PAGE.

   EXAMPLE.
           DCL FILE FILE PRINT;
           DCL RUNNUM CHAR(40) INIT('TEST RUN 1, PLWPRE');
           DCL PAGES FIXED DEC(5) INIT(1);
           CALL PLWPRE(FILE,'REPORT1',RUNNUM,PAGES);

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - PLWPRH (SUBROUTINE).

   FUNCTION.
           TO PRINT THE BOADICEA HEADER PAGE.  (STREAM I/O).

   INPUT.
           FILENAME    - THE NAME OF A PRINT FILE;
           REPORT-NAME - AN 8-CHARACTER REPORT NAME;
           RUN-NUMBER  - THE RUN NUMBER, IN A VARYING CHARACTER
                         STRING UP TO 40 CHARACTERS LONG.

   OUTPUT.
           THE BOADICEA HEADER PAGE.

   EXAMPLE.
           DCL FILE FILE PRINT;
           DCL RUNNUM CHAR(40) INIT('TEST RUN 2, PLWPRH');
           CALL PLWPRH(FILE,'REPORT2',RUNNUM);

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - PLWREE (SUBROUTINE).

   FUNCTION.
           TO PRINT THE BOADICEA DOUBLE TRAILER PAGE.  (RECORD I/O).

   INPUT.
           FILENAME    - THE NAME OF AN OPEN RECORD SEQUENTIAL OUTPUT
                         FILE;
           REPORT-NAME - AN 8-CHARACTER REPORT NAME;
           RUN-NUMBER  - THE RUN NUMBER, IN A VARYING CHARACTER
                         STRING UP TO 40 CHARACTERS LONG.
           PAGES       - THE NUMBER OF PAGES IN THE REPORT, IN A
                         FIXED DEC(5) FIELD.

   OUTPUT.
           THE BOADICEA DOUBLE TRAILER PAGES.

   EXAMPLE.
           DCL FILE FILE RECORD OUTPUT;
           DCL RUNNUM CHAR(40) INIT('TEST RUN 3, PLWREE');
           DCL PAGES FIXED DEC(5) INIT(1);
           CALL PLWREE(FILE,'REPORT2',RUNNUM,PAGES);

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - PLWREH (SUBROUTINE).

   FUNCTION.
           TO PRINT THE BOADICEA DOUBLE HEADER PAGE.  (RECORD I/O).

   INPUT.
           FILENAME    - THE NAME OF AN OPEN RECORD SEQUENTIAL OUTPUT
                         FILE;
           REPORT-NAME - AN 8-CHARACTER REPORT NAME;
           RUN-NUMBER  - THE RUN NUMBER, IN A VARYING CHARACTER
                         STRING UP TO 40 CHARACTERS LONG.

   OUTPUT.
           THE BOADICEA DOUBLE HEADER PAGES.

   EXAMPLE.
           DCL FILE FILE PRINT;
           DCL RUNNUM CHAR(40) INIT('TEST RUN 4, PLWREH');
           CALL PLWREH(FILE,'REPORT1',RUNNUM);

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1  NAME - PLWTSUB (FORTRAN SUBROUTINE).

   FUNCTION.
           TO PROVIDE: THE DIFFERENCE BETWEEN TWO TIMES;
           WHEN PROVIDED WITH: TWO TIMES, EACH IN THE FORM: HHMMSSTTT
           (TTT = THOUSANDTHS OF SECONDS).

   ENTERED  FROM - FORTRAN PROGRAMS.
                   PLWTSUB MAY ALSO BE USED BY PL1 PROGRAMS, IN WHICH
                   CASE THE TWO PARAMETERS PASSED SHOULD HAVE THE
                   ATTRIBUTE: CHAR(9).

   INPUT.
           T1,T2  - TWO ZONED DECIMAL NUMBERS, EACH IN THE FORM:
                    HHMMSSTTT.

   OUTPUT.
           T1     - THE DIFFERENCE T2-T1 (ALL NUMBERS BEING TREATED
                    AS TIMES IN THE AFOREMENTIONED FORMAT), WHICH
                    REPLACES THE FIRST PARAMETER PASSED.

   EXAMPLE.
           CALL PLWTSUB(T1,T2)

           BEFORE CALL: T1=163520687, T2=192143291;
           AFTER CALL: T1=024622604.

   MESSAGES - NONE.

   ERROR  HANDLING.
           NONE.

1 NAME - RDJFCB (FUNCTION).

  FUNCTION.
          TO ALLOW PL/I PROGRAMS TO USE OS SVC 64 ( READ JFCB ).

  INPUT.
          DDNAME - 8 CHARACTER FIELD, CONTAINING DDNAME TO BE
                   OPENED.

  OUTPUT.
          OS SVC 64 RETURNS A 176-BYTE JFCB FROM THE OS JOB QUEUE.

  EXAMPLE.
          % INCLUDE PWRDJFCB; /* DECLARES 176-BYTE JFCB AND RDJFCB
                                                           ROUTINE*/
          JFCB = RDJFCB('DDNAME');
          IF PLIRETV() ^= 0 THEN SIGNAL ERROR;
          .... THE JFCB MAY BE INSPECTED NOW.
                  THE PWRDJFCB MACRO DECLARES ALL THE JFCB FIELDS,
                  WITH PL/I ATTRIBUTES, USING THE IBM FIELD NAMES
                  WHICH CAN BE FOUND IN THE IBM SYSTEM CONTROL
                  BLOCKS MANUAL. ....

  MESSAGES.
          NO MESSAGES ARE ISSUED IN THIS MODULE.

  ERROR  HANDLING.
          THE RETURN CODE FROM SVC 64 IS PASSED TO THE PL/I PLIRETV
               BUILTIN FUNCTION.
  NAME - VSN(FUNCTION).

  FUNCTION.
          TO PROVIDE THE VOLUME SERIAL NUMBER OF THE FIRST VOLUME
             OCCUPIED BY A DATASET, TO A PROGRAM USING THAT DATASET.

  INPUT.
          DDNAME - CHAR(8).

  OUTPUT.
          VOLSER - CHAR(6).

  ERROR  HANDLING.
          HEX ZEROS ARE RETURNED IF THE READJFCB FAILS.

  EXAMPLE.
          DCL VSN ENTRY(CHAR(8)) RETURNS(CHAR(6));
          DCL VOLSER CHAR(6);
          .......................
          VOLSER = VSN('SYSUT1');
          /* VOLSER IS NOW THE SERIAL NUMBER OF THE FIRST
                VOLUME OF THE DATASET */
1NAME - VSNFIND(SUBROUTINE).

 FUNCTION.
      TO RETURN THE VOLUME SERIAL NUMBERS OCCUPIED BY A DATASET,
         TO THE PROGRAM USING THAT DATASET.

 ENTERED  FROM - PL/I CODE.

 INPUT.
      DDNAME - CHARACTER, THE FIRST 8 CHARACTERS ARE USED
         AS THE DDNAME, BEING PADDED WITH BLANKS IF THE PARAMETER IS
         LESS THAN 8 CHARACTERS LONG.

 OUTPUT.
      VOLSERS - CHARACTER, LONG ENOUGH TO HOLD ALL THE
         VOLUME SERIAL NUMBERS MOUNTED AT THE TIME.
      NOTE THAT THE OUTPUT IS PLACED IN THE INPUT FIELD,
         WHICH SHOULD BE LONG ENOUGH TO HOLD ALL THE OUTPUT.
      ALSO, THE VOLUME SERIAL NUMBERS RETURNED ARE THOSE OF
         THE CURRENTLY MOUNTED VOLUMES. FOR A MULTI-VOLUME TAPE
         FILE WHERE ALL THE TAPES ARE TO BE ON THE SAME UNIT,
         ONLY THE NUMBER OF THE CURRENTLY MOUNTED TAPE IS RETURNED.

 ERROR  HANDLING.
      IF THE OUTPUT FIELD IS NOT LONG ENOUGH DATA WILL BE WRAPPED
         AROUND, OVERWRITING EARLIER VOLUME SERIAL NUMBERS.
      IF THE DDNAME IS INVALID THE OUTPUT STRING IS SET TO 'NOSUCH'.

 EXAMPLE.
         DCL VOLSERS CHAR(24);
         DCL VSNFIND ENTRY(CHAR(24));
         .....................
         VOLSERS = 'SYSUT1';  /* SYSUT1 IS DDNAME TO BE EXAMINED */
         CALL VSNFIND(VOLSERS);
         /* VOLSERS WILL NOW CONTAIN THE VOLUME SERIAL NUMBER
               OF THE VOLUMES ALLOCATED TO SYSUT1 */
