* PROCESS NAME('BINSCAN') MARGINS(2,72,1) INCLUDE;
 BINSCAN:
 /****************************  BINSCAN   ******************************
 *                                                                     *
 * NAME - BINSCAN.                                                     *
 *                                                                     *
 * DATE OF LAST MODIFICATION - 3 OCT 79.                               *
 *                                                                     *
 * AUTHORS - M. ROBINSON.                                              *
 *                                                                     *
 * FUNCTION.                                                           *
 *         TO PERFORM A BINARY SEARCH ON A TABLE SET UP BY 'BINSRCH'.  *
 *                                                                     *
 * BASIC  FLOW.                                                        *
 *         STARTING AT THE ROOT IDENTIFIED BY 'BINSRCH', THE TABLE KEY *
 *         IS COMPARED WITH THE KEY ARGUMENT TO BE LOCATED. ON OF THE  *
 *         FOLLOWING OCCURRS:-                                         *
 *            COMPARE EQUAL - RETURN THE CURRENT INDEX IN THE TABLE.   *
 *            SEARCH KEY HIGH - LOAD INDEX FROM THE 'RIGHT' TABLE.     *
 *            SEARCH KEY LOW - LOAD INDEX FROM THE 'LEFT' TABLE.       *
 *         IF THE INDEX IS NOW LESS THAN THE LOWBOUND OF THE TABLE,    *
 *         RETURN THE VALUE OF THE INDEX. OTHERWISE REPEAT FROM THE    *
 *         COMPARISON.                                                 *
 *                                                                     *
 * ENTERED  FROM - PL/I CODE.                                          *
 *                                                                     *
 * INPUT.                                                              *
 *         FIVE ARGUMENTS ARE PASSED TO THIS PROCEDURE:-               *
 *            1) THE TABLE TO BE SEARCHED   ( (*) CHAR(*) ).           *
 *            2) THE ARRAY OF 'LEFT' INDICES SET UP BY BINSRCH         *
 *                                          ( (*) FIXED BIN(15) ).     *
 *            3) THE ARRAY OF 'RIGHT' INDICES SET UP BY BINSRCH        *
 *                                          ( (*) FIXED BIN(15) ).     *
 *            4) THE ROOT INDEX SET UP BY BINSRCH.                     *
 *                                          ( FIXED BIN(15) ).         *
 *            5) THE KEY TO BE FOUND        ( CHAR(*) ).               *
 *                                                                     *
 * OUTPUT.                                                             *
 *         A SINGLE FIXED BIN(15) INDEX IS RETURNED TO THE CALLER.     *
 *         IF THE SEARCH KEY IS MATCHED THE VALUE IS THE INDEX OF THE  *
 *         MATCHING TABLE KEY, OTHERWISE THE VALUE IS ONE LESS THAN    *
 *         LOW BOUND OF THE KEY TABLE.                                 *
 *                                                                     *
 * EXTERNAL  REFERENCES - NONE.                                        *
 *                                                                     *
 * MACROS  REFERENCED - NONE.                                          *
 *                                                                     *
 * TABLES  REFERENCED.                                                 *
 *         THE PASSED TABLES ARE THE ONLY TABLES USED.                 *
 *                                                                     *
 * EXITS.                                                              *
 *         NONE.                                                       *
 *                                                                     *
 * MESSAGES - NONE.                                                    *
 *                                                                     *
 * ERROR  HANDLING.                                                    *
 *         IF THE KEY IS NOT MATCHED THE VALUE RETURNED IS ONE LESS    *
 *         THAN THE LOW BOUND OF THE TABLE.                            *
 *                                                                     *
 * ENVIRONMENT - TESTED MVS 3.8 - PL/I 3.0 PTF69.                      *
 *                                                                     *
 * RESTRICTIONS.                                                       *
 *         THE FIRST FOUR ARGUMENTS MUST BE AS SET UP BY 'BINSRCH'.    *
 *         NO VALIDATION OF THE ARGUMENTS OCCURRS.                     *
 *                                                                     *
 *****************************  BINSCAN   *****************************/
1  PROC(KEY,LEFT,RIGHT,ROOT,SEARCH) RETURNS(FIXED BIN(15)) REORDER;
   DCL
      ROOT FIXED BIN(15);
   DCL
      (LEFT,
      RIGHT) (*) FIXED BIN(15);
   DCL
      KEY(*) CHAR(*);
   DCL
      SEARCH CHAR(*);
   DCL
      I FIXED BIN(15) INIT(ROOT);
   DCL
      J FIXED BIN(15) INIT((LBOUND(KEY,1)-1));
      DO WHILE(I ^= J);
         IF KEY(I) = SEARCH THEN
            RETURN(I);
         IF KEY(I) > SEARCH THEN
            I = LEFT(I);
         ELSE
            I = RIGHT(I);
      END;
      RETURN(J);
   END;
