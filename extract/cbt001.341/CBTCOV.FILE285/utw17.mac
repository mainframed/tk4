*PROCESS;
 /****************************   UTW17    ******************************
 *                                                                     *
 * NAME - UTW17.                                                       *
 *                                                                     *
 * DATE OF LAST MODIFICATION - 02 FEB 81.                              *
 *                                                                     *
 * AUTHORS - M. ROBINSON.                                              *
 *                                                                     *
 * MODULES.                                                            *
 *         UTW17                                                       *
 *                                                                     *
 * FUNCTION.                                                           *
 *         TO PRODUCE A CSECT CALL CROSS-REFERENCE REPORT FROM THE     *
 *         OUTPUT OF UTW16.                                            *
 *                                                                     *
 * BASIC  FLOW.                                                        *
 *         THE TABLE OF CSECT NAMES FROM UTW16 IS READ, IN PARALLEL    *
 *         WITH A TABLE OF CSECT FUNCTIONS.                            *
 *         THE CROSS-REFERENCE LIST FROM UTW16 IS THEN PROCESSED,      *
 *         REPORTING EACH CALL FROM ONE CSECT TO AN ENTRY POINT IN     *
 *         ANOTHER CSECT.                                              *
 *                                                                     *
 * ENTERED  FROM - JCL.                                                *
 *                                                                     *
 * INPUT.                                                              *
 *         THREE FILES ARE USED TO PROVIDE THE INPUT DATA.             *
 *              1) CSECTS - THE LIST OF CSECT DETAILS FROM UTW16,      *
 *              2) FUNCS  - A LIST OF CSECT FUNCTIONS,                 *
 *              3) XREFS  - THE LIST OF CALLS BETWEEN CSECTS,          *
 *                    FROM UTW16.                                      *
 *                                                                     *
 * OUTPUT.                                                             *
 *         FILE REPORT IS THE SUMMARY OF CALLS BETWEEN CSECTS.         *
 *                                                                     *
 * EXTERNAL  REFERENCES.                                               *
 *         NIL.                                                        *
 *                                                                     *
 * MACROS  REFERENCED.                                                 *
 *         NIL.                                                        *
 *                                                                     *
 * TABLES  REFERENCED.                                                 *
 *         NIL.                                                        *
 *                                                                     *
 * EXITS.                                                              *
 *         TO JCL.                                                     *
 *                                                                     *
 * MESSAGES.                                                           *
 *         NIL.                                                        *
 *                                                                     *
 * ERROR  HANDLING.                                                    *
 *         NIL.                                                        *
 *                                                                     *
 * ENVIRONMENT - TESTED MVT 21.8 PL/I 3.1..                            *
 *                                                                     *
 * RESTRICTIONS.                                                       *
 *         THE INPUT FILES 'CSECTS' AND 'FUNCS' MUST BE IN COLLATING   *
 *         SEQUENCE OF CSECT NAME.                                     *
 *                                                                     *
 *****************************    UTW17   *****************************/
 UTW17:
   PROC(PARM) OPTIONS(MAIN);
   DCL
      PARM CHAR(100) VARYING;
   DCL
      CSECTS FILE RECORD INPUT ENV(FB RECSIZE(80));
   DCL
      ENTRIES FILE RECORD INPUT ENV(FB RECSIZE(80));
   DCL
      FUNCS FILE RECORD INPUT ENV(FB RECSIZE(80));
   DCL
      1 INPUT,
         2 DSNAME CHAR(44),
         2 LOADMOD CHAR(8),
         2 CSECT CHAR(8),
         2 CALLS CHAR(8),
         2 ENTRY CHAR(8),
         2 SIZE FIXED BIN(31);
   DCL
      STRING_INPUT CHAR(80) BASED(ADDR(INPUT));
   DCL
      SAVE_INPUT CHAR(80) INIT('');
   DCL
      XREFS FILE RECORD INPUT ENV(FB RECSIZE(80));
   DCL
      1 FUNC,
         2 LIB_MOD CHAR(8),
         2 PURP CHAR(72);
   DCL
      1 FUNCTIONS(*) CTL,
         2 FUNC_TABLE,
            3 MOD_SIZE FIXED BIN(31),
            3 FUNCTION,
               4 LIBMOD CHAR(8),
               4 PURPOSE CHAR(72);
   DCL
      TABLE_SIZE FIXED BIN(31) INIT(512);
   DCL
      FUNCTIONS_PTR PTR;
   DCL
      LAST_SIZE FIXED BIN(31);
   DCL
      LAST_PTR PTR;
   DCL
      REPORT FILE RECORD OUTPUT ENV(FB TOTAL RECSIZE(121) CTLASA);
   DCL
      1 LINE0,
         2 ASA CHAR(1) INIT('-'),
         2 F1 CHAR(12) INIT('IN DATASET '),
         2 DSN0 CHAR(44),
         2 F2 CHAR(9) INIT(' MODULE '),
         2 MOD0 CHAR(8),
         2 F3 CHAR(59) INIT(',');
   DCL
      LINE0_CHAR CHAR(121);
   DCL
      1 LINE1,
         2 ASA CHAR(17) INIT('0'),
         2 F1 CHAR(6) INIT('CSECT '),
         2 MODULE_NAME CHAR(8),
         2 F2 CHAR(2) INIT(' ('),
         2 WHAT_IT_DOES CHAR(72),
         2 F3 CHAR(5) INIT(') IS '),
         2 MODULE_SIZE PIC'ZZZZZ',
         2 F4 CHAR(6) INIT(' BYTES.');
   DCL
      LINE1_CHAR CHAR(121);
   DCL
      1 LINE2,
         2 ASA CHAR(47) INIT(' '),
         2 F0 CHAR(30) INIT('   THIS CSECT IS CALLED BY :- '),
         2 F1 CHAR(6) INIT('CSECT '),
         2 CSECT_NAME CHAR(8),
         2 F2 CHAR(21) INIT(' CALLING ENTRY POINT '),
         2 ENTRY_NAME CHAR(8),
         2 F3 CHAR(1) INIT('.');
   DCL
      (I,
      J,
      K,
      L,
      WORK) FIXED BIN(31);
   DCL
      (ENDFILE_CARD,
      ENDFILE_CSECTS,
      ENDFILE_FUNCS,
      ENDFILE_XREFS) BIT(1) INIT('0'B);
   DCL
      SAVE_CSECT CHAR(8);
   DCL
      SAVE_LINE0 CHAR(121) INIT('');
 /********************************************************************/
 /*                                                                  */
 /*                    FILE      ON-UNITS                            */
 /*                                                                  */
 /********************************************************************/
      ON ENDFILE(CSECTS)
         ENDFILE_CSECTS = '1'B;
      ON ENDFILE(FUNCS)
         ENDFILE_FUNCS = '1'B;
      ON ENDFILE(XREFS)
         ENDFILE_XREFS = '1'B;
 /********************************************************************/
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /********************************************************************/
      IF PARM = 'MODULE' THEN LINE0.ASA = '1';
      IF PARM = 'CSECT' THEN LINE1.ASA = '1';
 START:
      ALLOCATE FUNCTIONS(TABLE_SIZE);
      READ FILE(CSECTS) INTO(INPUT);
      IF ENDFILE_CSECTS THEN
         INPUT.CSECT = HIGH(8);
      READ FILE(FUNCS) INTO(FUNC);
      IF ENDFILE_FUNCS THEN
         FUNC.LIB_MOD = HIGH(8);
      DO I = 1 BY 1 UNTIL(ENDFILE_CSECTS & ENDFILE_FUNCS);
         IF I > TABLE_SIZE THEN
            DO;
               FREE FUNCTIONS;
               TABLE_SIZE = 2*TABLE_SIZE;
               CLOSE FILE(CSECTS), FILE(FUNCS);
               ENDFILE_FUNCS = '0'B;
               ENDFILE_CSECTS = '0'B;
               GO TO START;
            END;
         SELECT( (CSECT<=LIB_MOD) ×× (LIB_MOD<=CSECT) );
            WHEN('01'B)
               DO;
                  FUNCTION(I) = FUNC;
                  MOD_SIZE(I) = 0;
                  READ FILE(FUNCS) INTO(FUNC);
               END;
            WHEN('10'B)
               DO;
                  LIBMOD(I) = CSECT;
                  MOD_SIZE(I) = SIZE;
                  PURPOSE(I) = '';
                  READ FILE(CSECTS) INTO(INPUT);
               END;
            WHEN('11'B)
               DO;
                  FUNCTION(I) = FUNC;
                  MOD_SIZE(I) = SIZE;
                  READ FILE(CSECTS) INTO(INPUT);
                  READ FILE(FUNCS) INTO(FUNC);
               END;
            OTHER
               ;
         END;
         IF ENDFILE_CSECTS THEN
            INPUT.CSECT = HIGH(8);
         IF ENDFILE_FUNCS THEN
            FUNC.LIB_MOD = HIGH(8);
      END;
      TABLE_SIZE = I;
 /********************************************************************/
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /********************************************************************/
      CLOSE FILE(CSECTS), FILE(FUNCS);
      DO UNTIL(SIZE <= 1);
         READ FILE(XREFS) INTO(INPUT);
         IF ENDFILE_XREFS THEN
            LEAVE;
      END;
      DO WHILE(^ENDFILE_XREFS);
         DSN0 = INPUT.DSNAME;
         MOD0 = INPUT.LOADMOD;
         LINE0_CHAR = STRING(LINE0);
         IF LINE0_CHAR ^= SAVE_LINE0 THEN
            DO;
               SAVE_LINE0 = LINE0_CHAR;
               WRITE FILE(REPORT) FROM(LINE0_CHAR);
               SAVE_CSECT = '';
            END;
         IF CALLS ^= SAVE_CSECT THEN
            DO;
               SAVE_CSECT = CALLS;
               DO I = 1 BY 1
               UNTIL(SAVE_CSECT = LIBMOD(I) × I = TABLE_SIZE);
               END;
               MODULE_NAME = LIBMOD(I);
               MODULE_SIZE = MOD_SIZE(I);
               WHAT_IT_DOES = PURPOSE(I);
               LINE1_CHAR = STRING(LINE1);
               I = INDEX(LINE1.WHAT_IT_DOES,'  ');
               J = INDEX(LINE1_CHAR,') IS ');
               SUBSTR(LINE1_CHAR,I+33) = SUBSTR(LINE1_CHAR,J);
               WRITE FILE(REPORT) FROM(LINE1_CHAR);
               F0 = '   THIS CSECT IS CALLED BY :- ';
            END;
         CSECT_NAME = CSECT;
         ENTRY_NAME = ENTRY;
         WRITE FILE(REPORT) FROM(LINE2);
         F0 = '';
         DO UNTIL(SIZE <= 1 & SAVE_INPUT ^= STRING_INPUT);
            SAVE_INPUT = STRING_INPUT;
            READ FILE(XREFS) INTO(INPUT);
            IF ENDFILE_XREFS THEN
               LEAVE;
         END;
      END;
   END;
