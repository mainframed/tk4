*PROCESS NAME('SCAN'),OPT(2) ;
 SCAN:     PROC OPTIONS(MAIN);
 /****************************    SCAN    ******************************
 *                                                                     *
 * NAME - SCAN.                                                        *
 *                                                                     *
 * DATE OF LAST MODIFICATION - 01/05/74.                               *
 *                                                                     *
 * AUTHORS - L. LEWIS.                                                 *
 *                                                                     *
 * MODULES.                                                            *
 *         SCAN.                                                       *
 *                                                                     *
 * FUNCTION.                                                           *
 *         TO CHECK A PL/I(F) SOURCE PROGRAM FOR POSSIBLE OPTIMIZER    *
 *         INCOMPATABILITIES AND TO CREATE UPDATES WHERE POSSIBLE.     *
 *                                                                     *
 * BASIC  FLOW.                                                        *
 *         THE SOURCE IS SCANNED IN ONE PASS.                          *
 *         A LIST OF KEYWORDS WHICH MIGHT GIVE RISE TO PROBLEMS        *
 *         IS USED TO DETERMINE WHETHER THE SOURCE IS A CANDIDATE      *
 *         FOR CHANGE, AND WHETHER A DEFINITE CHANGE CAN BE CREATED.   *
 *                                                                     *
 * ENTERED  FROM - JCL.                                                *
 *                                                                     *
 * INPUT.                                                              *
 *         FILE SYSIN IS THE SOURCE PROGRAM IN 80 BYTE RECORDS.        *
 *                                                                     *
 * OUTPUT.                                                             *
 *         FILE SYSOUT IS A REPORT ON THE INCONSISTANCIES FOUND.       *
 *         FILE PUNCH IS A FILE OF SUGGESTED UPDATES.                  *
 *                                                                     *
 * EXTERNAL  REFERENCES.                                               *
 *         NIL                                                         *
 *                                                                     *
 * MACROS  REFERENCED.                                                 *
 *         NIL                                                         *
 *                                                                     *
 * TABLES  REFERENCED.                                                 *
 *         THERE IS AN INTERNAL TABLE OF RELEVANT KEYWORDS.            *
 *                                                                     *
 * EXITS.                                                              *
 *         TO JCL AT END OF SOURCE.                                    *
 *                                                                     *
 * MESSAGES.                                                           *
 *         THE SYSOUT FILE IS A COPY OF THE SOURCE,                    *
 *         WITH MESSAGES INDICATING WHETHER A CHANGE HAS BEEN          *
 *         WRITTEN TO FILE PUNCH, OR WHETHER FURTHER USER ATTENTION    *
 *         IS NEEDED.                                                  *
 *                                                                     *
 * ERROR  HANDLING.                                                    *
 *         NIL                                                         *
 *                                                                     *
 * ENVIRONMENT - TESTED PL/I 2.2 ON MVT 21.8.                          *
 *                                                                     *
 * RESTRICTIONS.                                                       *
 *         NIL                                                         *
 *                                                                     *
 *****************************    SCAN    *****************************/
         DCL ARG ( 26 ) CHAR ( 12 ) VAR INIT ( ' IHESARC',' IHEDUM',
                                   ' VAR ',' VARYING ',' CALL ',' SUM',
                                   ' ENV',' ENVIRONMENT',' PROD',
                                   ' DEF ',' ROUND',' ALLOC ',' LABEL',
                                   ' ALLOCATION ',' DEFINED ',' IHE',
                                   'DATE','TIME','NULL','ONCHAR',
                                   'ONCODE','ONKEY','ONSOURCE',
                                   'ONFILE','ONCOUNT','ONLOC' ) STATIC;
        DCL SOURCE CHAR ( 80 ) STATIC ;
        DCL SYSIN FILE RECORD INPUT ENV ( TOTAL FB RECSIZE(80));
        DCL PUNCH FILE RECORD OUTPUT ENV ( TOTAL FB
                                          RECSIZE(80) BLKSIZE(480));
        DCL SYSOUT FILE RECORD OUTPUT ENV ( TOTAL FB RECSIZE(120)
                                            BLKSIZE(1200) ) ;
        DCL 1 OUT STATIC ,
            2 SORS CHAR ( 80 ) ,
            2 MSG  CHAR ( 40 ) INIT  ( ' ' ) ;
        DCL ( END_FILE , FLAGGED ) BIT ( 1 ) INIT ( '0'B ) STATIC ;
        DCL ( I , J ) FIXED BIN ( 31 ) INIT ( 0 ) STATIC ;
              ON ENDFILE ( SYSIN ) BEGIN ;
                END_FILE = '1'B ;
             END ;
            OPEN FILE ( SYSIN ) ,
                   FILE ( SYSOUT ) ,
                   FILE ( PUNCH ) ;
              READ FILE ( SYSIN ) INTO ( SOURCE ) ;
              DO WHILE ( ^ END_FILE ) ;
                DO I = 1 TO 26 WHILE ( ^ FLAGGED ) ;
                  J = INDEX ( SOURCE , ARG(I) ) ;
                  IF J ^= 0 THEN FLAGGED = '1'B ;
                END ;
                SORS = SOURCE ;
                MSG  = ' ' ;
                I     = I - 1 ;
                IF I = 26 THEN ;
                ELSE DO ;
                FLAGGED = '0'B ;
                IF I < 16 THEN
                  MSG = ' ** POSSIBLY CHECK/OPT INCOMPATIBLE ** ' ;
                IF   I < 16 ×
              /*OR*/ VERIFY(SUBSTR(SOURCE,J-1,1),'=,( ×') ×
              /*OR*/ VERIFY(SUBSTR(SOURCE,J+LENGTH(ARG(I)),1),', )×;' )
                THEN ;
                ELSE DO ;
                  MSG = ' ** UPDATE GENERATED - CHECK ** ' ;
                  IF I = 16 THEN DO ;
                    SUBSTR ( SORS , J , 4 ) = ' PLI' ;
                  END ;
                  ELSE DO ;
                    SUBSTR ( SORS , 73 , 8 )
                                       = SUBSTR ( SOURCE , 73 , 8 ) ;
                    J = J + LENGTH ( ARG ( I ) ) - 1 ;
                    SUBSTR ( SORS , 1 , J )
                                       = SUBSTR ( SOURCE , 1 , J ) ;
                    SUBSTR ( SORS , J + 1 , 2 ) = '()' ;
                    SUBSTR ( SORS , J + 3 , 73 - ( J + 3 ) )
                         = SUBSTR ( SOURCE , J + 1 , 73 - ( J + 1 ) ) ;
                    SOURCE = SORS ;
                  END ;
                  WRITE FILE ( PUNCH ) FROM ( SOURCE ) ;
                END ;
                END ;
            WRITE FILE ( SYSOUT ) FROM ( OUT ) ;
              READ FILE ( SYSIN ) INTO ( SOURCE ) ;
              END ;
              CLOSE FILE ( SYSIN ) ,
                    FILE ( SYSOUT ) ,
                    FILE ( PUNCH ) ;
        END SCAN ;
