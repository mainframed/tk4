                   QUANDARY DRAFT HANDOUT

                        Version 5.0

II.  Access keys and the READ statement.

1.  The basic READ statement.

     The READ statement is used to specify the references to
be read by QUANDARY.  The simplest form of the READ statement
specifies a single, complete access key:

     READ *SENTENCE STRUCTURE/

The word READ must be followed by exactly one blank.  This
statement will read only references with *SENTENCE STRUCTURE
as an access key.

2.  Access keys.

     ERIC references are designed to be retrieved using ERIC
descriptors and identifiers.  Abstractors assign descriptors
to each reference from a standardized list of keywords.
Descriptors of primary relevance to the reference are prefixed
with an asterisk and referred to as "major descriptors."
Descriptors of secondary relevance are left unprefixed and are
referred to as "minor descriptors."  ERIC identifiers are similar
to descriptors but are created by the abstractor in the absence
of a suitable descriptor.  References are typically assigned
several descriptors and, possibly, one or two identifiers.
     QUANDARY access keys are generalizations of ERIC descriptors.
There are three types of access keys:

          1)  Unstarred access keys are not prefixed with an
     asterisk.  A READ statement specifying an unstarred access
     key will cause the records containing that access key as a
     major or minor ERIC descriptor or identifier to be read.
          2)  Starred access keys are prefixed with an asterisk.
     A READ statement specifying a starred access key will cause
     only those records containing the access key as a major
     ERIC descriptor or identifier to be read.
          3)  Author access keys are prefixed with a dollar sign and
     the letter A, e. g., $A SMITH.  A READ statement specifying
     an author access key will cause the references by that author
     to be read.  Author access keys are not currently implemented.

A listing of access keys may be found in a QUANDARY access key
dictionary.

3.  Truncating access keys.

     Although a complete access key was used in the READ statement
above, access keys can be truncated to as few as four characters.
A QUANDARY dictionary lists the access keys

     SENSORY TRAINING

     SENTENCE DIAGRAMMING

     SENTENCE STRUCTURE

     SENTENCES

     SEQUENTIAL APPROACH

All of the following are equivalent:

     READ SENTENCE STRUCTURE/

     READ SENTENCE STRUCT/

     READ SENTENCE S/

Suppose we write

     READ SENT/

SENT is a truncation for SENTENCE DIAGRAMMING, SENTENCE STRUCTURE,
and SENTENCES.  The preceding statement will read references for
all of these access keys.  Ambiguous truncations can thus be used
to specify whole classes of related access keys.
     Care should be taken to insert blanks as needed.  The following
statement must be used to read only SENTENCE DIAGRAMMING and
SENTENCE STRUCTURE references:

     READ SENTENCE /

4.  OR:  Broadening the search request.

     Suppose we want to examine references on LINGUISTICS and on
SENTENCE DIAGRAMMING.  We can write

     READ LINGUISTICS×SENTENCE D/

The OR symbol ("×") specifies that any reference with LINGUISTICS,
SENTENCE D, or both as access keys will be read.  The OR symbol
broadens the search to cover an entire class of (usually related)
descriptors:

     READ LINGUISTICS×SENTENCE D×*GRAMMAR/

5.  AND:  Narrowing the search request.

     Access keys frequently encompass subject areas which are wider
than our actual area of interest.  If we were interested in all
references dealing with the grammatical aspects of linguistics, we
would not want to print all the LINGUISTICS references and pore
through them to select those which are also GRAMMAR references.  We
can write:

     READ GRAMMAR&LINGUISTICS/

The AND symbol ("&") specifies that every reference with both the
access key GRAMMAR and the access key LINGUISTICS will be read.
In casual conversational use, "and" and "or" are often used
interchangeably, but in QUANDARY statements, AND is always used
strictly in the sense of "both . . . and."
     The AND symbol narrows the scope of the search to cover
only references common to several access keys.  Occasionally
the search may be narrowed to the point where no reference
contains every access key specified.  This is less likely if
only one or two ANDS are used together.

III.  Continuing QUANDARY statements.

    Long statements with many ANDs and ORs may not fit on a single
line.  If this happens, interrrupt the statement after a convenient
AND or OR and resume it at the beginning of the next line.  Continue
in this manner until the statement is completed.  An example is

    READ *ROMANCE LANGUAGES×FRENCH  ×ITALIAN  ×
ROMANIAN/

The blanks at the end of the first line will be eliminated and the
statement will be interpreted as if on one long line:

     READ *ROMANCE LANGUAGES×FRENCH  ×ITALIAN  ×ROMANIAN/

Notice that FRENCH has been written with two trailing blanks so
that it will not be interpreted as a truncation for FRENCH and
FRENCH LITERATURE.

IV.  Running QUANDARY from TSO.

     QUANDARY is normally run from TSO terminals.  A terminal
session might begin

     logon xy123cd

     The LOGON command is used to initiate the terminal session.
Instead of "xy123cd" a userid assigned by an instructor or department
head should be used.  Upper and lower case letters may be used
interchangeably during a QUANDARY terminal session.  The terminal
will respond to the LOGON command with

     READY

     The next line to type is

     qndinit

     The terminal will respond with several initialization messages
followed by

     READY

     Then type

     qndrun

     The terminal will respond with a colon to request a QUANDARY
statement.

     :
     read *linguistics/go/

The GO statement causes up to 500 references to be read and
examined.  The first ten of these which satisfy the search request
will be printed at the terminal.  The listing can be stopped at any
time by hitting the attention key (marked ATTN or PA1).  Following
the references the terminal will print

     181 RECORDS SATISFIED THE READ STATEMENT
      10 RECORDS WERE PRINTED
     :

(These statistics can be printed without the accompanying references
by typing TALLY/ instead of GO/.)
     The colon requests another QUANDARY statement.  We can
enter another search request or type

     end/
     logoff

The END statement terminates the QUANDARY run.  The LOGOFF
command, which is not a QUANDARY statement and does not end
with a diagonal, terminates the TSO session.
    It's a good idea at this point to go to a terminal and
try a few simple searches before reading further.

V.  Field statements.

     The READ statement is sufficient for many searches, but it
can only specify access keys.  Field statements are used in
conjunction with READ statements to examine the ACCNUM, CHNUM,
TITLE, AUTHOR, DESCRIPTOR, IDENTIFIER, JOURNAL, and INSTITUTION
fields.  Only the references which satisfy every field statement
will be printed.  Field statements are similar to READ statements,
with the field name used in place of READ:

     AUTHOR SMITH&JONES/

     The NOT symbol ("^") can be used to require that a particular
character string not occur anywhere within a field:

     AUTHOR SMITH&^JONES/

Field statements are placed following a READ statement. Several
statements can be placed on the same line, if desired:

     READ GRAMMAR&LINGUISTICS/ DESCRIPTOR ^*GRAMMAR/
     JOURNAL PUBLICATIONS OF THE MODERN LANGUAGE ASSOCIATION/
     GO/

Only references which have both LINGUISTICS and GRAMMAR as
access keys will be read.  As each reference is read, it will
be rejected if the JOURNAL field does not contain PUBLICATIONS
OF THE MODERN LANGUAGE ASSOCIATION or if GRAMMAR occurs as a
major descriptor or identifier.  The only references printed
will be those in PMLA which have LINGUISTICS and GRAMMAR as
access keys and GRAMMAR as a minor descriptor or identifier.

VI.  More complex search requests.

1.  Combining AND and OR.

     When combinations of ANDs and ORs are used in an expression,
the ORs will be applied first to broaden the search.  The resulting
classes will then be narrowed by the ANDs so that only references
with an access key in each of the resulting broader classes will
be read:

     READ *LINGUISTICS×*GRAMMAR&
COLLEGE CURRICULUM×COLLEGE INSTRUCTION&GRADUATE STUDY/

Each reference read will pertain to either *LINGUISTICS or
*GRAMMAR, and also to COLLEGE CURRICULUM or COLLEGE INSTRUCTION,
and to GRADUATE STUDY.  This statement might be used to research
curricula and instruction for graduate level programs in grammar
and linguistics.

2.  The SEMICOLON operator.

     Several alternative specifications separated by semicolons
can be given in a single statement:

     READ LINGUISTICS&GRAMMAR;LANGUAGE PATTERNS/

SEMICOLONs, like ANDs and ORs, must not be followed within a READ
statement by a blank, since the blank would be assumed to begin
the following access key.  All references satisfying either
specification will be read -- all references dealing with LANGUAGE
PATTERNS and all references dealing with both LINGUISTICS and
GRAMMAR.  Although the SEMICOLON operator is similar to OR, the
above statement should not be confused with

     READ LINGUISTICS&GRAMMAR×LANGUAGE PATTERNS/

This statement will read GRAMMAR references which also deal with
either LINGUISTICS or LANGUAGE PATTERNS.

3.  Comparison operators.

     Several comparison operators may be used to examine the
ACCNUM and CHNUM fields.  These operators are EQUAL TO ("="),
NOT EQUAL TO ("^="), LESS THAN ("<"), NOT LESS THAN ("^<"),
GREATER THAN (">"),  and NOT GREATER THAN ("^>"). A simple
example is

     accnum =ej/

The first two characters of the accession number would be
compared against the characters EJ; only the CIJE references
(which begin EJ) would be printed.  Printing only the RIE
references (which begin with ED) could be done by including
the statement

      accnum =ed/

The search can similarly be restricted to one clearinghouse:

      chnum =ac/

     Comparison operators are particularly useful for rerunning
a search program whenever new references have been added.
Suppose that a previous run found references through EJ120000
(CIJE) and through ED090000 (RIE).  The new references could
be printed by adding the following statement to the search
request:

      accnum =ej&>ej120000;=ed&>ed090000/

Since every EJ accession number is alphabetically greater than
every ED accession number, it is necessary to specify =ED.

VII.  Running QUANDARY in the background.

     QUANDARY can also be run in the background, that is, without
a TSO terminal.  There is no limit to the number of references
which can be printed in the background.  The easiest way to run
in the background is to use the SUBMIT statement:

     READ *GRAMMAR/AUTHOR NIST/SUBMIT/

The SUBMIT statement builds a job to run the current search request
and print all references on the printer.  The printout normally
will be filed in bin 9O at the Computer Center.  The terminal
will respond with the jobname which will be used to identify the
printout:

     JOB XY123CDQ WILL BE SUBMITTED

     QUANDARY can also be run in the background from cards.  A
sample QUANDARY deck is

     //FRL JOB (XY123,9O),'SMITH'
     /*JOBPARM LINES=5000
     // EXEC QUANDARY
     //SYSIN DD *
     READ *FRENCH LITERATURE/GO/
     //

The JOB and JOBPARM cards at the beginning of the deck should
be modified as described in User Guide 50-2. QUANDARY statements
are placed following the SYSIN DD card, and are followed by a
null card (//) to end the deck.  All eighty columns of the deck
can be used, or sequence numbers can be punched in columns 73-80.

VIII.  The OPTIONS statement.

     Options can be specified to QUANDARY by means of an OPTIONS
statement:

     options pagesize(50),space(2)/

This statement requests fifty lines per page, double-spaced.
Options must be immediately followed by their values in
parentheses and must be separated by blanks or commas. OPTIONS
statements can be placed anywhere in a QUANDARY program.  If an
option is repeated, the last value specified will be used.
     The printing and formatting options, and their initial
values are

     LINESIZE(60)         Sixty characters per line.
     SPACE(1)             Single-spaced.
     PAGESIZE(59)         Fifty-nine lines per page.
     SKIP(3)              Triple-space between references.  If
                          SKIP is greater than PAGESIZE, one
                          reference will be printed per page.
     COLUMN(6)            Left margin in column six.
     SEARCH(1)            The number to be assigned to the next
                          search.  This normally begins at 1 and
                          is automatically incremented by 1 after
                          each search.
     PRINTLIM(10)         Up to ten references will be printed
                          on TSO.  The maximum value permitted
                          for TSO is PRINTLIM(40).

     Several options apply to programs submitted through TSO.
These are effective only when specified before the first SUBMIT
statement.

     DEST(LOCAL)          Submitted programs will print at the
                          Computer Center.  Other locations can
                          be specified as DEST(RMTn), for example,
                          DEST(RMT2) for Haley Center.
     BIN(9O)              Printouts will be filed in bin 9O.
     TIME(0100)           The submitted job will be allowed to
                          execute up to 1 minute.  The format
                          is TIME(mmss) in minutes and seconds:
                          TIME(0029) or TIME(29) both mean 29
                          seconds.
     LINES(30000)         The submitted job will be allowed to
      or LINES(30K)       print up to 30000 lines.
     FORMS(8101)          The submitted job will be printed on
                          8101 paper (standard green forms).
     JOBNAME(XXXXXXXX)    The jobname to be assigned to the
                          submitted job.


IX.  Miscellaneous statements.

     This section should probably be skimmed or skipped on the
first reading.

1.  The LISTDICT statement.

     The LISTDICT statement is used to list parts of the access
key dictionary:

     listdict fren/

This statement would list all access keys beginning FREN and give
the number of references for each.  The format of the access keys
is the same as for a READ statement.  When running QUANDARY from
cards, the statement

     listdict/

can be used to list the entire dictionary.

2.  The LISTTIME statement.

    The LISTTIME statement is used to list the date and time of
day:

     LISTTIME/

The date is printed as year, month, and day of the month in the
format YY.MM.DD.  The time is printed in hours, minutes, and
seconds in the format HH.MM.SS where hours are military time.

3.  The COMMENT statement.

     The COMMENT statement is used to print a line of text
as a part of the program listing:

     comment show this to Dr. Jones. /

COMMENT statements entered under TSO will be included in
the submitted search.  Each submitted comment will be
printed beginning on a new line.

4.  The PRINT and NOPRINT statements.

     The PRINT statement is used to restrict printing to
specified fields of references:

     print author,title/

This statement would limit printing to the AUTHOR and TITLE
fields (along with the ACCNUM, CHNUM, and DATE fields, which
are always printed).  The TITLE, AUTHOR, DESCRIPTOR, IDENTIFIER,
NOTE, ISSUE, ABSTRACT, AVAILABILITY, JOURNAL, INSTITUTION, and
SPONSOR fields can be specified, separated by blanks or commas.
(The ACCNUM, CHNUM, and DATE fields can also be specified, but
are always printed anyway.)  The fields which are printed when
a search is run are determined by the last PRINT statement entered.
To resume printing all fields, specify

     print all/

     The NOPRINT statement has the same format as the PRINT
statement but specifies the fields which are NOT to be
printed:

     noprint abstract,sponsor/

Printing is controlled by the last PRINT or NOPRINT statement
entered.
     PRINT and NOPRINT statements entered under TSO are not
normally included in submitted searches.  To include them, specify
SAVE among the fields and include the statement within a submitted
search:

     read .../
     ...
     print author,title,save/
     ...
     submit/

Saved PRINT and NOPRINT statements remain in effect for the submitted
job until the next saved PRINT or NOPRINT statement.  They remain
in effect for the terminal session until the next PRINT or NOPRINT
statement, whether or not it is saved.


X.  Editing statements.

1.  The program text.

     Most statements are saved as they are entered in a string
called the "program text."  The program text begins with the last
READ statement entered and includes any subsequent field statements.
PRINT and NOPRINT statements which specify SAVE are also placed in
the program text.  Statements with errors normally are not saved.
     It is the program text which is executed by a GO statement
and submitted by a SUBMIT statement.  Editing statements
manipulate the program text:  The LIST statement prints the
program text; DELETE and RETAIN statements remove statements
from the program text;  CHANGE and COMPLETE statements modify
individual statements in the program text.  Each of these will
be covered in detail.

2.  The LIST statement.

     The LIST statement prints all or part of the program text.
The simplest form

     list/

lists the entire program text:

     1 READ *LINGUISTICS/
     2 TITLE PHONETIC/
     3 AUTHOR XUELANG/
     4 AUTHOR LI/

(Recall the the two AUTHOR statements are equivalent to
AUTHOR XUELANG&LI/.)
     Each statement is numbered as it is printed.  Other editing
statements refer to statements in the program text either by
these statement numbers or by their type:  To list only the READ
and TITLE statements, any one of the following could be entered:

     list read,title/
     list read,2/
     list 1,title/
     list 1,2/
     list title,read/

To list statement 3 above, we must enter

     list 3/

since both AUTHOR statements (statements 3 and 4) would be listed
by

     list author/

3.  The DELETE and RETAIN statements.

     The DELETE statement is used to remove saved statements from
the program text.  New field statements can then be entered, if
desired, and the search rerun or submitted.  To delete statements
2 and 4 from the above example, either of the following could be
entered:

     delete title,4/
     delete 2,4/

(DELETE AUTHOR/ would delete both AUTHOR statements.)  Alternatively,
the statements to be retained can be specified:

     retain 1,3/

In either case, the READ statement cannot be deleted since the
program text must begin with a READ statement.
     One final caution:  DELETE and RETAIN statements cause the
program text to be renumbered.  In the current example, the new
text would be

     1 READ *LINGUISTICS/
     2 AUTHOR XUELANG/

4.  The CHANGE statement.

     Close examination of the preceding search reveals that the
author's name has been misspelled as XUELANG rather than XUELIANG.
One way to correct this is to delete the AUTHOR statement and
reenter it.  Another way is to enter a CHANGE statement:

     change 2 .lang.liang/

Let us examine this statement in detail.  The statement to be changed
is statement 2, the AUTHOR statement.  In fact, since only one AUTHOR
statement remains in the search, we could have entered

     change author .lang.liang/

     An old string ("lang") and a new string ("liang"), each prefixed
with a delimiting character ("."), are then specified.  The first
occurrence of the old string anywhere within the AUTHOR statement
will be replaced by the new string:

     AUTHOR XUELIANG/

Actually, any valid (nonblank) QUANDARY character which occurs in
neither the old string nor the new string can be used as a
delimiter:

     change author >lang>liang/
     change author qlangqliang/

The CHANGE statement is usually more readable if a nonalphabetic
delimiter is used.  Extra blanks in the strings must be avoided
since they will participate in the CHANGE operation.

5.  The CHANGE option.

     Before using a CHANGE statement or a COMPLETE statement
(described below), an OPTIONS statement specifying CHANGE must
be entered:

     options change/

The CHANGE option premits the use of CHANGE statements and modifies
the processing of incorrect READ and field statements.  Incorrect
statements are normally discarded and must be reentered in their
entirety.  When the CHANGE option is in effect, incorrect READ and
field statements are placed in the program text; they must be
deleted or corrected before the search is executed or submitted.
CHANGE statements can be used to modify the incorrect portions of
the statements.
     To revert to normal processing for incorrect statements
(and disallow the CHANGE and COMPLETE statements), enter NOCHANGE
in an OPTIONS statement:

     options nochange/

Standard error processing, without the CHANGE statement, is probably
better suited for simple searches and novice users.

6.  The COMPLETE statement.

     The COMPLETE statement has the same format as the CHANGE
statement and a similar function:

     complete read .*.chinese&phonetics/

That part of the READ statement beginning with the old string
("*") will be replaced with the new string:

     1 READ CHINESE&PHONETICS/
     2 AUTHOR XUELIANG/

COMPLETE provides no new functions;  it is just an easier way to
modify the last part of a statement than CHANGE:

     change read .*linguistics.chinese&phonetics/
