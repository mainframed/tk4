//ASMC1004  JOB
//JOBCAT DD DSN=MSTRCAT1,DISP=SHR
//STEP1  EXEC  ASMFCL,PARM.ASM='RENT,NOALGN',
//  PARM.LKED='RENT,REFR,LIST,LET,XREF,NCAL'
//ASM.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//           DD DSN=SYS1.AMODGEN,DISP=SHR
//           DD DSN=SYS1.PVTMACS,DISP=SHR
//           DD DSN=SYS1.PGMACLIB,DISP=SHR
//SYSPRINT  DD  SYSOUT=*
//ASM.SYSIN  DD  *
RECORDER CSECT
         TITLE 'MISCELLANEOUS EQUATES'
         REGEQU
         TITLE 'RECORDER MAIN ENTRY'
         USING *,15
*
*  ON ENTRY: R15 => RECORDER
*            R14 = RETURN ADDR
*
*  CURRENT LEVEL: MVS 3.7B WITH IPO SU'S
*
*                 SRM PTF'S HAVE BEEN RE-FIT ON THIS MODULE UP TO
*                 AND INCLUDING UZ15115 ON TAPE 7801. RS.RHOADS 3/78
*
*
*  THE RECORDER IS THE DATA GATHERING MODULE OF THE TSO PERFORMANCE
*  MEASUREMENT SYSTEM.  AS SUCH, IT IS RESPONSIBLE FOR COLLECTING
*  PERFORMANCE DATA IN EACH MEMORY ON A TRANSACTION-BY-TRANSACTION
*  BASIS AND WRITING THAT DATA TO THE SMF DATASET.  IT COLLECTS
*  THIS DATA BY MONITORING CERTAIN TSO EVENTS DOCUMENTED BELOW.  THESE
*  EVENTS ARE SIGNALLED WHEN MODIFICATIONS TO SVC 93 (TGET/TPUT)
*  BRANCH TO THIS MODULE.  THEY OBTAIN ADDRESSIBILITY TO THIS
*  ROUTINE FROM A POINTER STORED IN THE CVTUSER ADDRESS PACKET
*  AT IPL TIME.  IF THIS ADDRESS IS ZERO, THE MODIFICATIONS RECOGNIZE
*  THIS TO MEAN THAT THE RECORDER IS NOT ACTIVE AND ARE PREPARED TO
*  PERFORM THE APPROPRIATE PROCESSSING TO HANDLE THIS SITUATION.
*  THEREFORE, USING DSS ONE CAN TURN THE TSOPMS OFF AND ON BY
*  CHANGING THE ADDRESS IN THE CVTUSER ADDRESS PACKET AS
*  APPROPRIATE.  THE ABOVE PROCESS OF COLLECTING DATA IS ANALOGOUS TO
*  THE SYSEVENT/SRM PROCESS.
*
*  FOR THE PURPOSES OF THIS IMPLEMENTATION, A TRANSACTION IS
*  DEFINED AS THE PROCESSING PERFORMED BEGINNING AT ONE OF THE EVENTS
*    (1) TGET SATISFIED, OR
*    (2) EXITING A TERMINAL OUTPUT WAIT CONDITION
*  AND ENDING AT ANY OF THE EVENTS
*    (1) TGET SATISFIED,
*    (2) TERMINAL INPUT WAIT, OR
*    (3) TERMINAL OUTPUT WAIT.
*  ANY COMBINATION OF EVENTS IS POSSIBLE GIVEN BREAK CAPABILITY
*  ON THE PART OF THE USER.  IT IS PRECISELY THESE EVENTS IN
*  SVC 93 WHICH WERE MODIFIED TO LINK TO HERE AND WHICH ARE SIGNALLED
*  TO THE SRM VIA TGETTPUT AND TERMWAIT SYSEVENTS TO START AND
*  END TRANSACTIONS.
*
*  NOTE: THE USERRDY SYSEVENT ALSO SIGNALS THE SRM TO START A NEW
*        TRANSACTION.  HOWEVER, SINCE NO PRODUCTIVE PROCESSING IS
*        PERFORMED AFTER THE USERRDY SYSEVENT UNTIL ONE OF THE ABOVE
*        TWO START TRANSACTION EVENTS OCCUR, THE RECORDER NEED NOT
*        BE COGNIZANT OF THE USERRDY EVENT IN ORDER TO CALCULATE
*        THE SERVICE CONSUMED DURING THE TRANSACTION.  ON THE OTHER
*        HAND, THE RECORDER MUST BE AWARE OF THE USERRDY EVENT TO
*        PROPERLY COMPUTE THE TRANSACTION ELAPSED (RESPONSE) TIME.
*        HOWEVER, SINCE THE CALCULATIONS BELOW LET THE TRANSACTION
*        START TIME BE THAT WHICH THE SRM MAINTAINS (IE. THE USERRDY
*        SYSEVENT TIME), ALL IS COOL.  THEREFORE, IN THE FINAL ANALYSIS
*        THE RECORDER DOES COMPUTE THE ELAPSED TIME OF AND SERVICE
*        CONSUMED IN AN SRM DEFINED TRANSACTION (WHICH IS ALL ANYONE
*        COULD ASK OF A GOOD TSO PERFORMANCE MEASURE).
*
*  NOTE: THIS MODULE IS LINKED TO FROM SVC 93 INSTEAD OF FROM
*        MODIFICATIONS TO THE SRM SINCE
*         (1) THE SRM OWNS TWO ADDITIONAL LOCKS (CMS AND SRM)
*             WHICH MUST BE RELEASED AND REOBTAINED TO WRITE
*             SMF DATA, AND
*         (2) WE DESIRE TO KEEP THE PROCESSING WITH THE CMS
*             AND SRM LOCKS (IE GLOBAL LOCKS) TO A MINIMUM.
*             REMEMBER, THIS CODE MAY BE EXECUTED IN EXCESS
*             OF 100,000 TIMES PER DAY ON A LARGE TSO SYSTEM.
*
*  FOR WORK SPACE THE RECORDER USES STORAGE CALLED THE RECORDER WORK
*  AREA (RWA) WHICH IS PART OF AN AREA CALLED THE UCOMAREA OBTAINED
*  BY THE IEFUJI ACCOUNTING EXIT AT JOB INITIALIZATION.  THIS
*  AREA IS USED BY THE VARIOUS ACCOUNTING ROUTINES DURING THE
*  SESSION BUT CONTAINS SUFFICIENT RESERVED STORAGE FOR OUR USE.
*  THE IEFACTRT JOB TERMINATION ACCOUNTING EXIT MUST
*  ZERO THE JMR POINTER TO THE UCOMAREA WHEN IT FREES THE
*  AREA IN CASE THE USER IS RE-LOGGING ON.  THIS IS NECESSARY SINCE
*  DURING (RE) LOGON, NO UCOMAREA FOR THE NEW SESSION EXISTS AND
*  THEREFORE THE RECORDER MUST KNOW TO IGNORE THE EVENTS OF LOGON.
*
*  ADDRESSAIBILITY TO THE UCOMAREA IS OBTAINED AS FOLLOWS:
*   TCB(TCBTCT) => TCT(TCTJMR) => JMR(JMRUCOM) => UCOMAREA
*  THESE CONTROL BLOCKS ARE IN LSQA THEREBY PRECLUDING GLOBAL
*  ACCESS.
*
*  ON ENTRY TO THE RECORDER, THE LOCAL LOCK IS HELD EXCEPT FOR THE
*  END-OF-SESSION EVENT. THIS IS NECESSARY SINCE EVENTHOUGH THERE IS
*  ONE RWA PER ADDRESS SPACE, SERIALIZATION OF THE RWA IS
*  NECESSARY DUE TO MULTITASKING WITHIN THE ADDRESS SPACE.  THE
*  RECORDER EXITS HOLDING THE LOCAL LOCK UNLESS THE CURRENT EVENT
*  IS A START TRANSACTION EVENT IN WHICH CASE THE LOCK IS RELEASED.
*  FOR MORE INFORMATION ON THIS, SEE THE DOCUMENTATION WITH THE
*  WRITE-SMF-BUFFER ROUTINES (CHECKSMF AND WRITESMF) BELOW.
*
*  ON EXIT: EVENT HAS BEEN RECORDED
*           POSSIBLY AN SMF RECORD HAS BEEN WRITTEN
*           R10-R15 WILL BE DESTROYED AND LOCAL LOCK WILL BE RELEASED
*              FOR ALL START TRANSACTION EVENTS (FOR AN EXCEPTION SEE
*              THE NOTE ACCOMPANYING THE RWA INITIALIZATION CODE BELOW)
*           R15 ONLY WILL BE DESTROYED FOR ALL END TRANSACTION
*              EVENTS AND THE END-OF-SESSION EVENT.
*
*  ATTRIBUTES:  SUPERVISOR STATE
*               PROTECT KEY 0
*               LOCAL LOCK HELD
*
*
* STEVEN REHLING, PROCTER & GAMBLE, 2/77
*
         EJECT
*
*  THE FOLLOWING BRANCH TABLE IS ORGANIZED SO THAT EACH OF THE
*  SVC 93 MODIFICATIONS WHICH LINK TO THE RECORDER ENTER AT
*  DIFFERENT OFFSETS SO THAT THE ICM INSTRUCTION IN THE TABLE
*  CAN INDICATE IN REG 14 WHICH ENTRY POINT WAS USED.  THIS IS
*  DONE SINCE IT SEEMS TO BE THE MOST STRAIGHTFORWARD AND ECONOM-
*  ICAL WAY  OF REMEMBERING THE ENTRY POINT WITHOUT USING A REGISTER.
*
         ICM   R14,8,X0       TGET SATISFIED - END TRANSACTION
         B     RCDRINIT
         ICM   R14,8,X4       TGET SATISFIED - START TRANSACTION
         B     RCDRINIT
         ICM   R14,8,X8       TERMINAL INPUT WAIT - END TRANSACTION
         B     RCDRINIT
         ICM   R14,8,X12      TGET SATISFIED - START TRANSACTION
         B     RCDRINIT
         ICM   R14,8,X16      TERMINAL OUTPUT WAIT - END TRANSACTION
         B     RCDRINIT
         ICM   R14,8,X20      TERMINAL OUTPUT WAIT - START TRANSACTION
         B     RCDRINIT
         NOP   0              EXPANSION
         NOP   0              AREA
         ICM   R14,8,X28      END OF SESSION - END TRANSACTION
         B     RCDRINIT
         TITLE 'ADDRESS AND POSSIBLY INITIALIZE RWA'
RCDRINIT DS    0H
*
*  GET ADDRESSABILITY TO AND POSSIBLY INITIALIZE THE RECORDER WORK AREA
*
*  NOTE: THE CODE BELOW WHICH ATTEMPTS TO ACCESS THE RWA MUST
*  VARIFY THAT IT IS IN FACT ADDRESSABLE SINCE THE INITIAL
*  TRANSACTION EVENTS OF EACH SESSION OCCUR DURING LOGON, LONG
*  BEFORE IEFUJI ALLOCATES THE UCOMAREA.  IN THE EVENT THE RWA
*  IS NOT ACCESSABLE, CONTROL IS RETURNED TO SVC 93 AT OFFSET 0
*  FROM THE RETURN ADDRESS.  FOR START TRANSACTION EVENTS, THIS
*  HAS SIGNIFICANCE IN THAT IT INDICATES THE LOCAL LOCK WAS NOT
*  RELEASED, AS WOULD NORMALLY BE THE CASE.  THE SVC 93 MODS
*  WHICH LINK TO THE RECORDER FOR START TRANSACTION EVENTS USE
*  THIS FACT TO DECIDE TO RELEASE THE LOCAL LOCK THEMSELVES.
*
         L     R15,CVTPTR      R15 => CVT
         L     R15,(CVTTCBP-CVTTCBP)(R15)
         L     R15,0(R15)       R15 => OUR TCB
         ICM   R15,7,(TCBTCT-TCB)+1(R15)  R15 => TCT
         BZR   R14            MUST BAIL OUT SINCE CAN'T GET TO RWA
         ICM   R15,7,(TCTJMR-SMFTCT)+1(R15)  R15 => JMR
         BZR   R14            MUST BAIL OUT SINCE CAN'T GET TO RWA
         ICM   R15,7,(JMRUCOM-JMR)+1(R15) R15 => UCOMAREA
         BZR   R14            MUST BAIL OUT SINCE CAN'T GET TO RWA
         LA    R15,(TSORWA-UCOMAREA)(R15)  R15 => RWA
         STM   R0,R14,(RWASAVE-RWA)(R15)  SAVE THE REGS AT LAST
         DROP  R15
         BALR  R10,0
         USING *,R10
RCDRBASE DS    0H
         LR    R13,R15                R13 => RECORDER WORK AREA (RWA)
         USING RWA,R13
*
*  R9 WILL BE THE ENTRY POINT INDICATOR THROUGHOUT THE RECORDER.
*
         LR    R9,R14
         SRL   R9,24          ISOLATE THE INDICATOR
*
*  INITIALIZE THE WORK AREA IF NECESSARY
*
         CLC   RWAID,=CL4'RWA'   IS WORK AREA INITIALIZED?
         BE    INITDONE          YES,...
         MVC   RWAID,=CL4'RWA'   SET AREA ID
         LA    R15,U249TRAN
         ST    R15,RWATRANP    SET CURRENT TRANSACTION POINTER
         XC    RWA#TRAN,RWA#TRAN  SET # TRANSACTIONS IN BUFFER TO ZERO
         MVI   RWAIND1,X'00'   RESET ALL LOCAL INDICATORS
         MVI   U249SYS,X'02'   VS2 INDICATOR
         MVI   U249RT,X'F9'   RECORD TYPE (249)
         L     R15,CVTPTR      GET A PTR TO THE SMF CONTROL AREA
         L     R1,(CVTSMCA-CVTTCBP)(R15)  TO OBTAIN THE CPUID
         MVC   U249SYID,(SMCASID-SMCABASE)(R1)
         L     R15,(CVTTCBP-CVTTCBP)(R15)  R15 => OLD/NEW TCB/ASCB PTRS
         L     R1,0(R15)     R1 => OUR TCB
         L     R1,(TCBJSCB-TCB)(R1)   R1 => JSCB
         L     R1,(JSCBPSCB-IEZJSCB)(R1)   R1 => PSCB
         MVC   U249USER,(PSCBUSER-PSCB)(R1)   MOVE USERID INTO U249
         L     R15,12(R15)     R15 => OUR ASCB
         L     R1,(ASCBTSB-ASCB)(R15)   R1 => TSB
         MVC   U249LINE,(TSBLINE-TSB)(R1)    PUT LINE ADDR INTO U249
         L     R1,(ASCBOUCB-ASCB)(R15)   R1 => OUCB
         MVC   U249PGN,(OUCBNPG-OUCB)(R1) PUT PERFORM. GROUP INTO U249
         TITLE 'BRANCH TABLE TO PROCESS EACH EVENT SEPERATLY'
INITDONE DS    0H
*
*  ENTER THE APPROPRIATE EVENT HANDLER (R9 = ENTRYID)
*
         L     R8,RWATRANP   R8 => CURRENT TRANS IN RWA U249 RECORD
         USING U249TRAN,R8
*
*  R8 WILL REMAIN POINTING AT THE CURRENT RWA U249 TRANSACTION
*  THROUGHOUT THE RECORDER'S PROCESSING.
*
         B     *+4(R9)
         B     IGC009C1  TGET SATISFIED - END TRANSACTION
         B     IGC009C2  TGET SATISFIED - START TRANSACTION
         B     IGC009C3  TERMINAL INPUT WAIT - END TRANSACTION
         B     IGG93032  TGET SATISFIED - START TRANSACTION
         B     IGG93011  TERMINAL OUTPUT WAIT - END TRANSACTION
         B     IGG93012  TERMINAL OUTPUT WAIT - START TRANSACTION
         NOP   0         EXPANSION AREA
         B     IEFACTRT  END OF SESSION - END TRANSACTION
         TITLE 'GENERALIZED START TRANSACTION PROCESSING'
*
*            START TRANSACTION PROCESSING
*
*
*  ON ENTRY: NO PARAMETERS
*
*  THIS ROUTINE GETS CONTROL WHEN A TGET IS SATISFIED OR WHEN THE
*  SESSION EXITS TERMINAL OUTPUT WAIT (IGG93012) SO THAT A NEW
*  TRANSACTION CAN BE STARTED IN THE CURRENT U249 TRANS AREA.
*
*  ON EXIT: (WHICH IS THROUGH THE WRITESMF ROUTINE)
*           LOCAL LOCK IS RELEASED
*           RWATA IS ON => A TRANSACTION IS ACTIVE
*           RWAEJST = START TRANS. ELAPSED JOB STEP TIMING
*           RWAIOSM = START TRANS. IO SERVICE MEASURE
*           RWAPSS = START TRANS. PAGE-SECOND COUNT
*           CURRENT RWA U249 TRANSACTION IS STARTED
*           R10-R15 ARE DESTROYED
*           POSSIBLY:
*            SMF RECORD IS WRITTEN
*            RWA#TRAN = 0
*            RWATRANP => FIRST RWA U249 TRANSACTION AREA
*
         SPACE 3
IGC009C2 DS    0H             TGET SATISFIED - START TRANSACTION
IGG93032 DS    0H             TGET SATISFIED - START TRANSACTION
         BAL   R14,CHECKSMF  PERFORM INITIAL PROCESSING IN CASE THE
*                             CURRENT RWA U249 RECORD IS FULL AND
*                             THEREFORE AN SMF RECORD MUST BE SET UP.
         MVI   U249IND1,U249TGSS    REPORT TGET SATISFIED STARTED TRANS
*                             AND RESET OTHER IND1 VALUES
         B     IGC9C21
         SPACE 3
IGG93012 DS    0H             TERMINAL OUTPUT WAIT - START TRANSACTION
         BAL   R14,CHECKSMF  PERFORM INITIAL PROCESSING IN CASE THE
*                             CURRENT RWA U249 RECORD IS FULL AND
*                             THEREFORE AN SMF RECORD MUST BE SET UP.
         MVI   U249IND1,U249TOWS  REPORT TERM OUTPUT WAIT STARTED TRANS
*                             AND RESET OTHER IND1 VALUES
         SPACE 3
IGC9C21  DS    0H
         L     R1,CVTPTR      SAVE THE START TRANS.
         L     R1,(CVTTCBP-CVTTCBP)(R1)  SERVICE UNITS VARIABLES
         L     R1,12(R1)       FROM THE ASCB:
         MVC   RWAEJST,(ASCBEJST-ASCB)(R1)  ELAPSED JOB STEP TIMING
         L     R1,(ASCBOUCB-ASCB)(R1)  AND FROM THE OUCB:
         MVC   RWAPSS,(OUCBPSS-OUCB)(R1)  PAGE-SECOND COUNT
         OI    RWAIND1,RWATA INDICATE TRANS ACTIVE
*
*  WRITE AN SMF RECORD IF THE PREVIOUS TRANSACTION WAS THE MAX#TRAN-TH
*  SINCE THE LAST SMF RECORD WAS WRITTEN, FREE THE LOCAL
*  LOCK AND RETURN TO SVC 93.
*
         B     WRITESMF
         TITLE 'GENERALIZED END TRANSACTION PROCESSING'
*
*             END TRANSACTION PROCESSING
*
*
*  ON ENTRY: NO PARAMETERS
*
*  THIS ROUTINE GETS CONTROL WHEN A TGET IS SATISFIED, WHEN THE
*  SESSION ENTERS TERMINAL INPUT WAIT , WHEN THE
*  SESSION ENTERS TERMINAL OUTPUT WAIT, AND AT THE END-OF-SESSION SO
*  THAT THE CURRENT TRANSACTION CAN BE ENDED.  IT IS POSSIBLE THAT NO
*  PROCESSING WILL BE PERFORMED AS A PREVIOUS EVENT MAY HAVE ENDED
*  THE TRANSACTION ALREADY.
*
*  ON EXIT: RWA#TRAN IS INCREASED BY 1
*           RWATRANP => NEXT AVAILABLE TRANSACTION AREA IN RWA U249
*           RWATA IS OFF => NO TRANSACTION IS ACTIVE
*           CURRENT TRANSACTION IN U249 RECORD OF RWA IS ENDED.
*
         SPACE 3
IGC009C1 DS    0H             TGET SATISFIED - END TRANSACTION
         LA    R1,U249TGSE    PREPARE TO REPORT TGET SATISFIED ENDED
         B     IGC9C11        THE CURRENT TRANSACTION
         SPACE 3
IGG93011 DS    0H             TERMINAL OUTPUT WAIT - END TRANSACTION
         LA    R1,U249TOWE  PREPARE TO REPORT TERMINAL OUTPUT WAIT
         B     IGC9C11        ENDED CURRENT TRANSACTION
         SPACE 3
IGC009C3 DS    0H             TERMINAL INPUT WAIT - END TRANSACTION
         LA    R1,U249TIWE   PREPARE TO REPORT TERMINAL INPUT WAIT
         B     IGC9C11        ENDED CURRENT TRANSACTION.
         SPACE 3
IEFACTRT DS    0H             END OF SESSION - END TRANSACTION
         LA    R1,U249EOSE    PREPARE TO REPORT END-OF-SESSION
*                             ENDED CURRENT TRANSACTION.
         SPACE 3
IGC9C11  DS    0H
         TM    RWAIND1,RWATA   IS THERE AN ACTIVE TRANSACTION?
         BZ    IGC9C1X    NO, (MUST HAVE ENDED AT A PREVIOUS EVENT)
         O     R1,U249IND1-3  'OR' TRANS END REASON WITH INDICATORS
         STC   R1,U249IND1    AND REPORT REASON
         BAL   R14,GETTOD     GET CURRENT TIME
         ST    R1,U249END     REPORT TRANSACTION END TIME
*
*   COMPUTE THE TRANSACTION ELAPSED TIME BY USING THE SRM'S
*   VALUES AS FOUND IN THE OUCB AND THE RMCT.  THE SRM'S ALGORITHM IS
*   BASED ON THE SRM'S BASE TIME IN THE RMCTTBS FIELD.  THIS TIME
*   REPRESENTS ROUGHLY THE TIME OF THE LAST IPL AND IS USED TO
*   COMPUTE THE TRANSACTION START TIME (OUCBTMO FIELD) IN SRM TOD
*   FORMAT.  THEREFORE, BY COMPUTING THE CURRENT TIME IN SRM TOD FORMAT
*   AND SUBTRACTING THE TRANSACTION START TIME, WE OBTAIN THE ELAPSED
*   TIME OF THE TRANSACTION.
*   THUS, THE ALGORITHM IS:
*      ELAPSED TIME = TOD-CLOCK  -  RMCTTBS  - OUCBTMO
*   THE CALCULATION FOR THE TRANSACTION START TIME (OUCBTMO) APPEARS IN
*   IRARMINT AT THE POINT WHERE THE "TIME OF THE CURRENT SYSEVENT
*   IN SRM TOD FORMAT" IS COMPUTED.
*
         LM    R0,R1,RWATEMP1  COMPUTE TRANS ELAPSED TIME AS FAR
*                             AS THE SRM IS CONCERNED. (GOTTOD SET
*                             RWATEMP1 = CURRENT TOD CLOCK WHEN
*                             INVOKED ABOVE)
         SRDL  R0,22          TIME IN 1.024 MILLISECS
         L     R2,CVTPTR
         L     R3,(CVTTCBP-CVTTCBP)(R2)  R3 => TCB/ASCB NEW/OLD
         L     R3,12(R3)       R3 => ASCB
         L     R3,(ASCBOUCB-ASCB)(R3)  R3 => OUCB
         L     R2,(CVTOPCTP-CVTTCBP)(R2)   R2 => SRM'S RMCT
         AL    R1,(RMCTTBS-RMCT)(R2)  ADD SRM'S BASE TIME (ACTUALLY
*                             SUBTRACT SINCE RMCTTBS IS NEGATIVE).
         S     R1,(OUCBTMO-OUCB)(R3)  SUBTRACT TRANS START TIME
         XR    R0,R0
         D     R0,=F'10'   R1 = ELAPSED TIME IN .01 SECS
         ST    R1,U249ET    REPORT TRANS ELAPSED TIME
         SPACE 3
         BAL   R14,GETSU      GET CURRENT SERVICE UNITS
         ST    R1,U249SU      REPORT SERVICE UNITS
* SEE NOTE AT LABEL GETSU RE. FOLLOWING LINE                   *****
         ST    R0,U249RES3    REPORT OLD  SERVICE UNITS        *****
         TM    U249IND1,U249EOSE  IS THIS END OF SESSION?
         BO    PUTLOGOF           YES, GO PUT CMD=LOGOFF
         L     R1,CVTPTR      GET CURRENT COMMAND NAME THRU
         L     R1,(CVTTCBP-CVTTCBP)(R1)  TCB,
         L     R1,0(R1)
         L     R1,(TCBJSCB-TCB)(R1)       JSCB,
         L     R1,(JSCBPSCB-IEZJSCB)(R1)     PSCB,
         L     R1,(PSCBRLGB-PSCB)(R1)     RLGB,
         L     R1,(RLGBECT-RLGB)(R1)  AND ECT.
         MVC   U249CMD,(ECTSCMD-ECT)(R1)  REPORT CMD = SUBCOMMAND
         CLC   U249CMD,=CL8' '   IS THERE A SUBCOMMAND?
         BNE   IGC9C12        YES, DONE
         MVC   U249CMD,(ECTPCMD-ECT)(R1)  NO, REPORT CMD = COMMAND
         OI    U249IND1,U249PCMD   REPORT PRIMARY COMMAND
         B     IGC9C12            GO UP RECORD COUNT
PUTLOGOF MVC   U249CMD,LOGOFF     REPORT CMD = LOGOFF
         OI    U249IND1,U249PCMD  REPORT PRIMARY COMMAND
IGC9C12  DS    0H
         NI    RWAIND1,X'FF'-RWATA  INDICATE TRANSACTION INACTIVE
         LH    R1,RWA#TRAN    INCREASE NUMBER OF
         LA    R1,1(R1)       TRANSACTIONS BY 1
         STH   R1,RWA#TRAN
         L     R1,RWATRANP    POINT TO NEXT TRANSACTION
         LA    R1,U249TLEN(R1)    AREA IN RWA U249 RECORD
         ST    R1,RWATRANP
IGC9C1X  DS    0H
         LM    R0,R14,RWASAVE     RELOAD REGS AND
         BR    R14    RETURN TO SVC 93 OR IEFACTRT
         TITLE 'ROUTINE TO WRITE AN SMF RECORD AND RETURN TO SVC 93'
WRITESMF DS    0H
*
*  ON ENTRY: RWARCDP => GETMAIN AREA CONTAINING SMF RECORD TO WRITE
*                    = 0 IF NO RECORD TO WRITE
*
*  THIS ROUTINE IS RESPONSIBLE FOR FREEING THE LOCAL LOCK, POSSIBLY
*  WRITING AN SMF RECORD AFTER COMPLETEING ITS HEADER INFORMATION,
*  FREEING THE GETMAIN AREA IN WHICH THE SMF RECORD TO WRITE RESIDES,
*  AND RETURNING CONTROL TO THE SVC 93 MODIFICATION WHICH LINKED TO
*  THE RECORDER.  CONTROL TRANSFERS HERE AFTER THE PROCESSING OF EACH
*  START TRANSACTION EVENT IS ENDED.  START TRANSACTION EVENTS ARE
*  USED INSTEAD OF END TRANSACTION EVENTS BECAUSE ONE OF THE ENDS
*  OCCURS WHILE THE LOCAL AND CMS LOCKS ARE HELD AND CAN'T BE
*  RELEASED.
*
*  BECAUSE OF PROBLEMS ASSOCIATED WITH ISSUEING AN SVC WHILE HOLDING
*  THE LOCAL LOCK, IT IS NECESSARY THAT THIS ROUTINE RELEASE THE LOCAL
*  LOCK BEFORE ATTEMPTING TO WRITE AN SMF RECORD . HOWEVER, SINCE
*  RELEASING THE LOCAL LOCK IMPLICITLY RELEASES THE RWA, THE REGS
*  SAVED IN THE RWA MUST BE RESTORED BEFORE THE LOCK IS RELEASED.
*  PARADOXICALLY, THIS MEANS THAT NOT ALL THE REGS USED BY SETLOCK,
*  SMFWTM, AND FREEMAIN CAN BE RESTORED BEFORE CONTROL RETURNS TO
*  SVC 93.  TO MINIMIZE THIS PROBLEM TO AN ACCEPTABLE LEVEL, THE CODE
*  BELOW JUGGLES REGS SO AS TO DESTROY ONLY (GET HIM) R10-R15 AT
*  THE RETURN TO SVC 93.  THIS IS ACCEPTABLE SINCE IN ALL CASES
*  THESE REGS ARE AVAILABLE FOR DESTRUCTION AT THE POINT THE
*  RECORDER IS INVOKED ANYWAY.
*
*  NOTE:  RS.RHOADS  8/1/78
*         AN OVERLAY THAT WIPED OUT THE TSO SEND COMMAND WAS
*         TIED TO WIPING OUT R10 BELOW LABEL WSLBL1 (NO SMF
*         RECORD WRITTEN).  WE DETERMINED THAT R10 COULD BE
*         SAVED IN THIS CASE BY USING R15 INSTEAD (THIS TYPE
*         OF SETLOCK DOES NOT USE R15).  WE MAY, IN THE FUTURE
*         HAVE A PROBLEM DUE TO LOSING R10 IF AN SMF RECORD IS
*         WRITTEN, HOWEVER, WE HAVE NOT SEEN THIS YET.
*
*  ON EXIT: LOCAL LOCK IS RELEASED
*           POSSIBLY:
*            SMF RECORD IS WRITTEN
*            GETMAIN RECORD AREA IS FREED
*           R10-R15 ARE DESTROYED (R10 SAVED IF NO SMF WRITE)
*           RETURN TO SVC 93 IS AT OFFSET 4 FROM THE RETURN ADDR
*             TO INDICATE THAT THE LOCAL LOCK WAS RELEASED.
*
         L     R2,RWARCDP     R2 => GETMAIN AREA    OR   = 0
         LTR   R2,R2          IS THERE AN SMF RECORD TO WRITE?
         BZ    WSLBL1         NO, (JUST RELEASE LOCAL LOCK FOR
*                                 CONSISTENCY)...
         BAL   R14,GETTOD   GET CURRENT TIME
         ST    R1,(U249TIME-U249RDW1)(R2)  REPORT TIME RECORD WRITTEN
         L     R1,CVTPTR      REPORT DATE RECORD
         MVC   (U249DATE-U249RDW1)(4,R2),(CVTDATE-CVTTCBP)(R1) WRITTEN
         LR    R10,R2         SAVE GETMAIN AREA PTR
         LM    R0,R9,RWASAVE   RELOAD SVC 93 REGS
         XR    R15,R15        ZERO THE
         ST    R15,RWARCDP    RECORD POINTER
         L     R15,RWASAVE+56  R15 = RETURN ADDR TO SVC 93
*
*  AFTER THE LOCAL LOCK IS RELEASED, THE REGS WILL BE:
*    R0-R9 = SVC 93 REGS
*    R10  = PTR GETMAIN AREA
*    R11-R14 WILL BE DESTROYED BY SETLOCK
*    R15 = RETURN ADDR TO SVC 93
*
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(SVC93)
         LR    R11,R0         SAVE R0
         LR    R12,R1         SAVE R1
         LR    R13,R15        SAVE RETURN ADDR
*
*  AFTER THE SMF RECORD IS WRITTEN AND AFTER THE FREEMAIN, THE
*  REGS WILL BE:
*    R2-R9 = SVC 93 REGS
*    R10 = PTR TO GETMAIN AREA
*    R11 = SVC 93 REG 0
*    R12 = SVC 93 REG 1
*    R13 = RETURN ADDR
*    R14-R1 WILL BE DESTROYED BY SMFWTM AND FREEMAIN
*
         SMFWTM (R10)  WRITE THE SMF RECORD
         LH    R0,0(R10)   R0 = LENGTH OF GETMAIN AREA
         FREEMAIN R,LV=(R0),A=(R10)  FREE THE GETMAIN AREA
         LR    R0,R11         RESTORE SVC 93 R0
         LR    R1,R12         RESTORE SVC 93 R1
*
*  AT THE RETURN TO SVC 93 THE REGS ARE:
*    R0-R9 = SVC 93 REGS AT ENTRY TO THE RECORDER
*    R10-R12 = GARBAGE
*    R13 = RETURN ADDR
*    R14-R15 = GARBAGE
*
         B     4(R13)            RETURN TO SVC 93 AT OFFSET 4
         SPACE 5
WSLBL1   DS    0H
         LM    R0,R14,RWASAVE   RELOAD SVC 93 REGS
         LR    R15,R14        SAVE RETURN ADDR WHERE SETLOCK
*                             CAN'T GET AT IT
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(SVC93)
*
*  AT THE RETURN TO SVC 93 THE REGS ARE:
*    R0-R10= SVC 93 REGS AT ENTRY TO THE RECORDER
*    R15 = RETURN ADDR
*    R11-R14 = GARBAGE
*
         B     4(R15)         RETURN TO SVC 93 AT OFFSET 4
         TITLE 'ROUTINE TO BUILD AN SMF RECORD IN GETMAIN AREA'
CHECKSMF DS    0H
*
*  ON ENTRY: RWA#TRAN = NUMBER OF TRANSACTIONS IN CURRENT U249
*                       RWA RECORD
*
*  THIS ROUTINE IS RESPONSIBLE FOR DETERMINING ON START TRANSACTION
*  EVENTS WHETHER AN SMF RECORD SHOULD BE WRITTEN BECAUSE
*  MAX#TRAN COMPLETE TRANS ARE IN THE CURRENT RWA U249 RECORD.
*  IF SO, A GETMAIN AREA IS OBTAINED, THE CURRENT U249
*  RECORD IS COPIED TO IT, AND A NEW U249 RECORD IS INITIALIZED IN
*  THE RWA.  THIS IS DONE SO THAT THE WRITESMF ROUTINE CAN WRITE THE
*  CURRENT U249 RECORD AFTER THE PENDING START TRANSACTION PROCESSING
*  COMPLETES.
*  THE ABOVE IMPLEMENTATION IS USED SINCE TO COMPLETE THE START
*  TRANSACTION PROCESSING IN THE NEXT RWA U249 TRANSACTION AREA WE MUST
*  RETAIN THE LOCAL LOCK WHILE TO WRITE THE SMF RECORD WE MUST
*  RELEASE IT.  THEREFORE, WE SAVE THE SMF RECORD IN A GETMAIN
*  AREA, COMPLETE THE START TRANSACTION PROCESSING, RELEASE THE
*  LOCAL LOCK, WRITE THE SMF RECORD, AND FREE THE GETMAIN AREA.
*  IN THIS WAY, WE DO NOT INCUR THE OVERHEAD OF RELEASING,
*  OBTAINING, AND RELEASING AGAIN THE LOCAL LOCK WHILE GUARANTEEING
*  THE INTEGRITY OF THE SMF RECORD AFTER THE LOCK IS RELEASED
*  (GETMAIN).  START TRANSACTION EVENTS WERE CHOSEN AS THE CALLER OVER
*  END TRANSACTION EVENTS SINCE THE REQUIRED PLACEMENT OF THE SVC 93
*  MODS PERMITTED THE MOST REGS TO BE DESTROYED AT THE START EVENTS.
*
*  ON EXIT: RWA#TRAN = 0 IF SMF RECORD IS TO BE WRITTEN
*           RWARCDP => GETMAIN AREA IF OBTAINED
*                   = 0 OTHERWISE
*           RWATRANP, R8 => NEXT AVAILABLE TRANSACTION SLOT IN RWA U249
*
         STM   R14,R2,CSREGS
         LA    R1,MAX#TRAN   R1 = MAX # TRANSACTIONS/SMF RECORD
         CH    R1,RWA#TRAN    HAVE WE REACHED THE MAX?
         BE    CRLBL1         YES,...
         XR    R1,R1          NO, ZERO THE RECORD POINTER
         ST    R1,RWARCDP
         B     CRLBLX         AND EXIT
CRLBL1   DS    0H
*
*  SETUP THE SMF RECORD IN A GETMAIN AREA
*
         LH    R2,RWA#TRAN    R2 = # TRANSACTIONS IN RECORD
         MH    R2,CRTLEN      R2 = LENGTH OF TRANSACTION DATA IN RECORD
         LA    R2,U249HLEN+4(R2)  ADD HEADER LENGTH PLUS RDW LENGTH
         STH   R2,U249RDW1    FILL IN THE RECORD DESCRIPTOR
         XR    R1,R1          WORD (RDW)
         STH   R1,U249RDW2
         LH    R4,U249RCD#    INCREASE RECORD
         LA    R4,1(R4)       NUMBER BY
         STH   R4,U249RCD#    1
         LR    R0,R2          R0 = LENGTH OF GETMAIN AREA
         L     R4,CVTPTR      FOR BRANCH ENTRY TO GETMAIN,
         L     R4,(CVTTCBP-CVTTCBP)(R4)
         L     R7,12(R4)       R7 => OUR ASCB
         L     R4,0(R4)       R4 => OUR TCB
         GETMAIN R,LV=(0),BRANCH=YES  GET THE AREA
         LTR   R15,R15        WAS GETMAIN SUCCESSFUL?
         BZ    CRLBL2         YES,...
         OI    RWAIND1,RWALOST1  NO, INDICATE A RECORD WAS LOST DUE TO
         XR    R1,R1          A GETMAIN PROBLEM (THIS FACT IS NEVER
*                                REPORTED - STRANGE PROGRAM).
         ST    R1,RWARCDP     ZERO RECORD POINTER
         B     CRLBL3         START ON NEW RECORD
CRLBL2   DS    0H
         ST    R1,RWARCDP     SAVE PTR TO AREA
         BCTR  R2,0
         EX    R2,CRMVC1      MOVE RWA U249 RECORD INTO GETMAIN AREA
CRLBL3   DS    0H
*
*  DROP R8 (THE POINTER TO THE CURRENT RWA U249 TRANS) :
*   (1) SINCE IT IS NOT NEEDED FOR THE ROUTINES WHICH FOLLOW AND
*   (2) SO THAT THE LOAD ADDRESS INSTRUCTION BELOW WILL NOT
*       BE BASED ON R8 (IE WE REALLY WISH TO GET THE ADDR OF
*       THE FIRST TRANS AREA IN THE RWA, NOT THE CURRENT).
*
         DROP  R8
         LA    R8,U249TRAN  R8 => FIRST RWA U249 TRANS AREA
         ST    R8,RWATRANP    START A NEW RWA U249 RECORD
         XC    RWA#TRAN,RWA#TRAN
CRLBLX   DS    0H
         LM    R14,R2,CSREGS
         BR    R14
CRMVC1   MVC   0(0,R1),U249RDW1  MOVE RWA U249
CRTLEN   DC    AL2(U249TLEN)    LENGTH OF ONE U249 TRANSACTION
         TITLE 'ROUTINE TO COMPUTE CURRENT SERVICE UNITS'
GETSU    DS    0H
*
*  ON ENTRY: RWAEJST CONTAINS JOB STEP TIMING AT START OF TRANSACTION
*            RWAIOSM CONTAINS IO SERVICE MEASURE AT START TRANSACTION
*            RWAPSS CONTAINS PAGE-SECOND COUNT AT START TRANSACTION
*
*  THIS ROUTINE IS RESPONSIBLE FOR OBTAINING THE CURRENT SERVICE
*  UNITS.  THE CALCULATION IS IDENTICAL TO THAT PERFORMED BY THE
*  SRM (IRARMWLM LOAD MODULE, IRARMWM1 SUBROUTINE) FOR HIS WORKLOAD
*  CALCULATIONS EXCEPT THAT THE COEFFICIENTS FOR CPU, MSO, AND IOC ARE
*  CONSTANT TO ALLOW THE IPS TO BE CHANGED WITHOUT CHANGING THE TSO
*  MEASURE.  THE CODE TO USE THE REAL SRM COEFFICIENTS (FROM THE IPS)
*  IS COMMENTED OUT BELOW. THE START TRANSACTION PROCESSOR ABOVE SAVED
*  THE STARTING SERVICE MEASURE VARIABLES.  AN SMP UCLIN HAS PLACED
*  A 'PC' ID ON IRARMWLM SO THAT IF THE SRM EVER CHANGES THE WAY
*  IT COMPUTES SERVICE UNITS (AS HAPPENED GOING FROM MVS 3.0 TO 3.7
*  WITH SU 7), THIS ROUTINE CAN ALSO BE CHANGED.
*
*  ON EXIT: R1 = CURRENT SERVICE UNITS
*
*
******************************************************************
*
* 3/78 MODIFICATIONS -- RS.RHOADS
*
* PTF LEVEL UZ09952 AND UZ08826 ARE BEING INSTALLED ON THE SRM.
* THESE CHANGES HAVE MODIFIED THE SERVICE UNIT CALCULATION.
* THIS PGM WAS MODIFIED TO PASS BOTH THE OLD AND NEW SU VALUES
* IN THE 249 RECORD.
* AT NEXT UPDATE, LINES MARKED ***** SHOULD BE DELETED
* TO THROW AWAY THE "OLD" VALUES.
* THESE LINES OCCUR:
*  ABOVE LABEL PUTLOGOF
*  AROUND LABEL GSLBL4
*
*
* NOTE *** U249RES3 FILLER IS BEING TEMPORARILY USED TO STORE
*          THE OLD  SERVICE UNIT VALUE. **********
****************************************************************
*
         STM   R14,R5,GSREGS
         L     R2,CVTPTR      GET POINTERS
         L     R3,(CVTOPCTP-CVTTCBP)(R2)  TO  RMCT
         L     R4,(RMCTWMST-RMCT)(R3)         WMST
         L     R2,(CVTTCBP-CVTTCBP)(R2)
         L     R2,12(R2)                  ASCB
         L     R5,(ASCBOUCB-ASCB)(R2)  AND THE OUCB.
         LM    R0,R1,(ASCBEJST-ASCB)(R2)  CURRENT JOB STEP TIMING
         LM    R14,R15,RWAEJST  STARTING TRANS. JOB STEP TIMING
         SLR   R1,R15         SUBTRACT LO ORDER WORD
         BC    3,GSLBL1       BR ON CARRY
         BCTR  R0,0           DIMINISH MINUEND
GSLBL1   DS    0H
         SLR   R0,R14         SUBTRACT HI ORDER WORD
         SLDL  R0,1(0)        INCLUDE HI ORDER BIT IN COMPARE
         CL    R0,(RMCTADJC-RMCT)(R3)  DIVIDE EXCEPTION OCCUR?
         SRDL  R0,1(0)        RESTORE DIVIDEND
         BL    GSLBL2         DIVIDE WILL BE OK ...
         SR    R0,R0          TRUNCATE TIME FROM LEFT
GSLBL2   DS    0H
         D     R0,(RMCTADJC-RMCT)(R3)  OBTAIN RAW CPU MEASURE
         M     R0,CPUCOEFF    CPU * CPU COEFF
*        M     R0,(WMSTCPU-WMST)(R4)  CPU * CPU COEFF (IPS VALUE)
         SRDA  R0,20        R1 = CPU SERVICE
         LM    R14,R15,(OUCBPSS-OUCB)(R5)  GET PAGE-SEC COUNT
         SL    R15,RWAPSS+4  SUBTRACT START P-S RIGHT HALF
         BC    3,GSLBL3     BRANCH ON CARRY
         BCTR  R14,0        PROPOGATE A BORROW
GSLBL3   DS    0H
         SL    R14,RWAPSS   SUBTRACT LEFT HALF
         SLDL  R14,10
         D     R14,(RMCTADJC-RMCT)(R3)  DIVIDE BY RAW CPU MEASURE
         M     R14,MSOCOEFF MSO * MSO COEFF
*        M     R14,(WMSTMSO-WMST)(R4)  MSO * MSO COEFF (IPS VALUE)
         SRDA  R14,8        R15 = MSO SERVICE
         ALR   R1,R15       R1 = CPU + MSO SERVICE
         LH    R15,(ASCBIOSM-ASCB)(R2)  CURRENT IO REQUEST COUNT
         N     R15,GSHWORD              CLEAR UNUSED HALF WORD
         L     R4,(ASCBOUXB-ASCB)(R2)   R4 IS PTR TO OUXB
         LH    R14,(OUXBIOS-OUXB)(R4)   START JES EXCP CT.
         N     R14,GSHWORD              CLEAR UNUSED HALF WORD
         LR    R2,R14         SAVE FOR DUP. CALC            *****
         LR    R3,R15         SAVE FOR DUP. CALC            *****
         SLR   R15,R14        DELTA IO REQUEST COUNT
         BNM   GSLBL4         NO WRAPPING
         SR    R15,R15        CLEAR IF WRAP
GSLBL4   AL    R15,(OUCBIOSM-OUCB)(R5) ADD SMF EXCP COUNT
         SL    R15,(0)(R4)    (OUXBIOSM-OUXB)(R4) OLD SMF EXCP CT.
         M     R14,IOCCOEFF   IO * IOC COEFF
*        M     R14,(WMSTIOC-WMST)(R4) IO * IOC COEFF (IPS VALUE)
         SRDA  R14,12
         LR    R5,R1                               *****
         ALR   R1,R15         R1 = CPU + MSO + IO SERVICE UNITS
         ST    R1,GSREGS+12   RETURN NEW SU IN R1
* FOLLOWING BLOCK IS OLD CALC FOR SU               *****
* REMOVE WHEN STARRED CODE IS REMOVED              *****
         SLR   R3,R2                               *****
         N     R3,GSHWORD                          *****
         M     R2,IOCCOEFF                         *****
         SRDA  R2,12                               *****
         ALR   R5,R3                               *****
         ST    R5,GSREGS+8 OLD SU RETURNED IN R0   *****
         LM    R14,R5,GSREGS
         BR    R14
         DS    0F
GSHWORD  DC    X'0000FFFF'
         TITLE 'DATE AND TIME OF DAY ROUTINE'
GETTOD   DS    0H
*
*  ON ENTRY : NO PARAMETERS
*
*  THIS ROUTINE IS RESPONSIBLE FOR PERFORMING THE FUNCTIONS OF THE
*  TIME SVC (MODULE IEAVRT01) WITHOUT THE SVC AND GENERALIZED TIME
*  HANDLING OVERHEAD WHILE AT LEAST THE LOCAL LOCK IS HELD.  IT
*  COMPUTES THE TIME BY SUBTRACTING THE NEXT LOCAL MIDNIGHT TOD
*  CLOCK VALUE IN THE TPC LESS 24 HOURS FROM THE CURRENT LOCAL TOD
*  CLOCK VALUE.
*
*  MUCH OF THE CODE BELOW IS TAKEN DIRECTLY FROM IEAVRT01.
*
*  ON EXIT: R1 = TIME OF DAY IN .01 SECONDS
*                  OR
*           R1 = 0 IF AN ERROR IS DETECTED BELOW
*
*           RWATEMP1 CONTAINS CURRENT TIME IN TOD CLOCK FORMAT
*
         STM   R14,R4,TODREGS
TODAGAIN DS    0H
         L     R14,CVTPTR     R14 => CVT
         MVC   RWATEMP3,(CVTDATE-CVTTCBP)(R14)   SAVE THE CURRENT DATE
         STCK  RWATEMP1          STORE THE CURRENT TOD CLOCK
         BNZ   TODRET4        CLOCK DID NOT STORE, ERROR ...
         L     R15,(CVTTPC-CVTTCBP)(R14)    R15 => TPC
         MVC   RWATEMP2,(TPCMNTQE-TPC)+(TQEVAL-TQE)(R15) SAVE MIDN TOD
*
*  MAKE SURE THE DATE HASN'T CHANGED SINCE WE SAVED IT.  IF IT DID,
*  WE MUST START OVER AGAIN SINCE THE MIDNIGHT TQE WE
*  JUST SAVED IS NOW RELATIVE TO A DIFFERENT DATE THAN THE CURERENT
*  TOD WE STORED.
*
         CP    RWATEMP3,(CVTDATE-CVTTCBP)(4,R14)  ARE DATES EQUAL?
         BNE   TODAGAIN       NO,...
*
*  SEE IF THE MIDNIGHT VALUE OF THE TPC MIDNIGHT TQE IS ZERO.
*  IF SO, IT IS NOT INITIALIZED AND WE MUST EXIT WITH AN ERROR
*  CONDITION.
*
         XR    R15,R15
         CL    R15,RWATEMP2 LEFT HALF = 0?
         BNE   TODMNOK        NO, (MIDNIGHT TQE OK) ...
         CL    R15,RWATEMP2+4  RIGHT HALF = 0?
         BE    TODRET4        MIDNIGHT = 0 => ERROR
TODMNOK  DS    0H
*
*  AT THIS POINT WE KNOW THE MIDNIGHT TQE IS OK.  CONTINUE BY
*  COMPUTING:
*   TIME = CURRENT TOD - (MIDNIGHT TOD - 24 HOURS)
*
         L     R2,TODDAYLH   R2 = LEFT HALF OF 24 HOURS
         L     R3,TODDAYRH   R3 = RIGHT HALF OF 24 HOURS
         AL    R3,RWATEMP1+4  ADD CURRENT CLOCK RH
         BC    12,TODALEFT    BR IF NO CARRY
         AL    R2,=F'1'    ADD 1 TO LH FOR CARRY
TODALEFT DS    0H
         AL    R2,RWATEMP1    ADD CURRENT CLOCK LH
         SL    R3,RWATEMP2+4  SUBTRACT MIDNIGHT RIGHT HALF
         BC    11,TODSLEFT   BR CARRY
         BCTR  R2,0     SUBTRACT 1 IF NO CARRY
TODSLEFT DS    0H
         SL    R2,RWATEMP2  SUBTRACT MIDNIGHT LEFT HALF
*
*  WE NOW HAVE THE CURRENT TIME IN R2-R3 SINCE MIDNIGHT LAST
*  NIGHT IN TOD FORM.  CONVERT IT TO HHMMSSTH.
*
         SRDL  R2,12          GET TIME IN MICROSECONDS
         CL    R2,=X'00001387'  WILL DIVIDE EXCEPTION OCCUR?  THIS
*                             CAN HAPPEN WHEN THE REGISTER PAIR
*                             R2-R3 > X'00001387FFFFD8F0'.
         BL    TODDIV         NO, OK ...
         BH    TODRET4        YES, RETURN TIME OF 0 ...
         CL    R3,=X'FFFFD8F0'   WILL EXCEPTION OCCUR?
         BNL   TODRET4        YES, RETURN TIME OF 0
TODDIV   DS    0H             DIVIDE EXCEPTION WILL NOT OCCUR
         D     R2,TOD10000    CONVERT TO .01
         LR    R1,R3          TIME IN .01 SEC SINCE MIDNIGHT
         B     TODRET         RETURN
*
*  THE FOLLOWING CODE CONVERTS THE TIME OF DAY IN .01 SECS
*  TO HHMMSSTH.  IT WAS USED DURING DEBUGGING BUT WAS REMOVED
*  FROM INLINE FOR PERFORMANCE AND TO MAKE THE TIMESTAMP IN THE
*  SMF RECORD HEADER COMPATIBLE WITH THE OTHER SMF RECORDS.  IT
*  IS LEFT HERE SINCE IT COSTS LITTLE (MEMORY) AND MAY BE VALUABLE
*  AT SOME POINT IN THE FUTURE.
*
         LA    R14,32         SHIFT COUNT
         LA    R15,12         DIVISOR MASK
         LA    R4,10          INITIAL DIVISOR
TODLOOP  DS    0H
         SR    R2,R2          CLEAR REMAINDER
         DR    R2,R4          REMAINDER = DEC DIGIT
         LR    R0,R2          SAVE THE DIGIT
         SRDL  R0,4           IN REG1
         SH    R14,=H'4'      ADJUST SHIFT COUNT
         LTR   R3,R3          ARE WE DONE?
         BZ    TODTMEDN       YES,...
         CL    R14,TOD24      CHANGE DIVISOR IF
         BNL   TODLOOP        COUNT < 24 FROM
         XR    R4,R15         10 TO 6 TO 10 ETC
         B     TODLOOP
TODTMEDN DS    0H
         SRL   R1,0(R14)   R1 = HHMMSSTH
TODRET   DS    0H
         ST    R1,TODREGS+12  RETURN TIME IN R1
         LM    R14,R4,TODREGS
         BR    R14            RETURN
TODRET4  DS    0H
         XR    R1,R1          ERROR, RETURN TIME = 0
         B     TODRET
TOD10000 DC    F'10000'
TODDAYLH DC    X'000141DD'  LEFT HALF OF 24 HOURS IN TOD FORM
TODDAYRH DC    X'76000000'  RIGHT HALF OF 24 HOURS
TOD24    DC    F'24'
         TITLE 'LITERALS'
PATCH    DC    20F'0'
X0       DC    X'00'
X4       DC    X'04'
X8       DC    X'08'
X12      DC    X'0C'
X16      DC    X'10'
X20      DC    X'14'
X24      DC    X'18'
X28      DC    X'1C'
LOGOFF   DC    CL8'LOGOFF  '
         DS    0F
IOCCOEFF DC    X'00004667'  4.4 * 4096  (IOC = 4.4)
CPUCOEFF DC    X'00002E67'  2.9 * 4096  (CPU = 2.9)
MSOCOEFF DC    X'00000000'  0.0 * 4096  (CPU = 0.0)
         LTORG
         TITLE 'RECORDER WORK AREA'
         RWA
         TITLE 'ASCB'
         IHAASCB
         TITLE 'CVT'
         CVT   LIST=NO
         TITLE 'ECT'
         IKJECT
         TITLE 'JMR'
         IEFJMR
         TITLE 'JSCB'
         IEZJSCB
         TITLE 'OUCB'
         IRAOUCB
         TITLE 'OUXB'
         IHAOUXB
         TITLE 'PSA'
         IHAPSA
         TITLE 'PSCB'
         IKJPSCB
         TITLE 'RLGB'
         IKJRLGB
         TITLE 'RMCT  -  UNDEFINED SYMBOLS CANNOT BE ELIMINATED'
         IRARMCT
         TITLE 'SMCA'
         IEESMCA
         TITLE 'TCB'
         IKJTCB LIST=YES
         TITLE 'TCT'
         IEFTCT
         TITLE 'TPC'
         IEAVVTPC
         TITLE 'TQE'
         IHATQE
         TITLE 'TSB'
         IKJTSB LIST=YES
         TITLE 'UCOMAREA'
         UCOMAREA
         TITLE 'WMST'
         IRAWMST
         END
//LKED.SYSLMOD  DD  DSN=SYS1.PGMOD.LINKLIB(RECORDER),DISP=OLD
//LKED.SYSPRINT  DD  SYSOUT=*
