*          DATA SET CBT1082    AT LEVEL 001 AS OF 03/25/81
*          DATA SET CBT1082    AT LEVEL 001 AS OF 05/28/80
*          IEERDCM/IEETDCM PLACED BACK IN SPY AT KFHP 1/31/81
*          ---THEY ARE NOT COPYRIGHT.  FOUND IN APVTMACS FOR
*          7870 SYM1-1.
*        %GOTO DCMRBSL;                                              /*
         MACRO
         IEERDCM
*     01/15/73          LEVEL=05                              MB Y02958
DCMTSRT  DSECT DCMTSPTR
DCMADTRN DS    A                   POINTER TO PAGABLE DCM
         DS    CL1                 RESERVED
DCMRFLGS DS    BL1                 FLAGS
DCMDOM   EQU   X'10'               DOM MUST BE TRIED
DCMNIPP  EQU   X'08'               DCM WAS USED BY NIP
DCMLEN   DS    H                   LENGTH OF PAGABLE DCM
DCMADKP  DS    A                   ADDRESS OF ROUTED K COMMAND
*                                   PARAMETER LIST
DCMTOPAR DS    CL1                 TOP DISPLAY AREA DEFINED
DCMTOPDS DS    CL1                 TOP DISPLAY ON SCREEN
         DS    BL1                 RESERVED
DCMDEVTY DS    BL1                 DEVICE TYPE FLAGS
DCMTY60  EQU   X'80'               USABLE FOR SD
DCMTY50  EQU   X'40'               NOT USABLE FOR SD
DCMADSDS DS    A                   POINTER TO FIRST SDS SUPPORT AREA
DCMRMS   DS    CL1                 NUMBER OF CCWS TO WRITE
DCMADRMS DS    AL3                 POINTER TO RMS CCWS
DCMWLAST DS    A                   PT CON Q ENTRY LAST OUT (O-O-L)
DCMRMSAL DS    H                   NUMBER LINES IN MSG AREA
DCMDOMKY DS    H                   CONSOLE DOM ELEMENT        MC XM5812
DCMSUBAD DS    A                   POINTER TO SUB CONTROL BLOCK
DCMADPFK DS    A                   POINTER TO RESIDENT PFK AREA
DCMINTVL DS    H                   INTERVAL FOR THIS DCM
DCMTMCTR DS    H                   TIME COUNTER FOR THIS DCM
DCMR2FLG DS    BL1                 TIMER FLAGS
DCMRXSFL EQU   X'80'               FULL SCREEN FLAG
DCMRXUNV EQU   X'40'               UNVIEWABLE MESSAGE DISPLAYED
DCMRXTMR EQU   X'20'               TIMER FLAG
DCMRXRLL EQU   X'10'               READY TO ROLL
DCMRXDEL EQU   X'08'               PENDING DELETE REQUEST
DCMRXTIM EQU   X'02'               TIMER ELAPSED FOR THIS DISPLAY
DCMR3FLG DS    BL1                 MISC FLAGS
DCMSTSWT EQU   X'80'               CHANGING STATUS OF OUTPUT ONLY CON
DCMKVIP  EQU   X'40'               ENTRY FOR K VARY COMMAND
DCMCLPR  EQU   X'20'               CLOSE IN PROCESS
DCMRXSCN EQU   X'10'               ASY ERROR MESSAGE ON SCREEN
DCMR3PKA EQU   X'08'               DA I/O COMPLETE
DCMRXHMT EQU   X'04'               FULL SCREEN SIMULATED      MC YM4102
         DS    H                   RESERVED
DCMRQDEL DS    A                   DELETE REQUEST BUFFER
         DS    A                   DELETE REQUEST BUFFER
DCMMSGSV DS    A                   POINTER TO SAVED NIP MESSAGES
DCMPACB  EQU   *                   SACB PREFIX
DCMPLN   DS    FL2                 SYSGEN LENGTH OF AREA
DCMPLNPR DS    H                   LENGTH OF SACB PREFIX-IN BYTES
DCMPRSZ  EQU   *-DCMPACB           SIZE OF PREFIX
DCMACB   EQU   *                   SACB
DCMACBNX DS    A                   POINTER TO NEXT SACB
DCMAID   DS    CL1                 AREA ID
DCMASACB DS    BL1                 SACB FLAGS
DCMAUSE  EQU   X'80'               AREA PRESENTLY DEFINED     MB Y02958
*    IF DCMAUSE IS OFF, A SYSGEND AREA HAS BEEN FREED E.G. K A,NONE
DCMAGM   EQU   X'40'               GETMAINED SACB
DCMALN   DS    FL2                 LENGTH OF AREA
DCMATOP  DS    FL1                 TOP ROW OF AREA
DCMACLR  EQU   *                   REINITIALIZED PORTION      MB Y02958
DCMAROW  DS    FL1                 ROW TO BE WRITTEN NEXT
DCMAFR   DS    H                   FRAME ON SCREEN
DCMAMJWQ DS    A                   POINTER TO CON Q ENTRY FOR MAJOR
DCMAMIN  DS    A                   POINTER TO MINOR WQE
DCMATIME DS    F                   TIME CONTROL LINE WAS WRITTEN
DCMAMT   DS    XL2                 RESERVED                   MB Y02958
DCMAFLG1 DS    XL1                 AREA FLAGS1
DCMADISP EQU   X'40'               DISPLAY IN AREA
DCMADEND EQU   X'20'               END OF DISPLAY ON SCREEN
DCMAFRPR EQU   X'10'               FRAMING IN PROGRESS
DCMAFULL EQU   X'08'               FRAME FULL
DCMABL   EQU   X'04'               BLANKING TO BE DONE
DCMAFLG2 DS    XL1                 AREA FLAGS 2
DCMALMIN EQU   X'80'               SAVED POINTER TO LAST MINOR OUTPUT
DCMAWCON EQU   X'40'               WRITE CONTROL LINE
DCMARCON EQU   X'20'               REWRITE CONTROL LINE
DCMAMJFR EQU   X'10'               MAJOR WQE HAS BEEN FOUND
DCMADFLG DS    XL1                 DYNAMIC DISPLAY FLAGS      MB Y02958
DCMADD   EQU   X'80'               TRACK IN AREA              MB Y02958
DCMAHOLD EQU   X'40'               TRACK IN HOLD MODE         MB Y02958
DCMACSIB EQU   X'20'               TRACK WITH CONTINUATION LINE IN     *
                                   SCREEN IMAGE BUFFER        MB Y02958
DCMATRCK DS    X                   TRACK REQUEST INDICATORS   MB Y02958
DCMATJOB EQU   X'80'               TRACK JOBS                 MB Y02958
DCMATJBL EQU   X'40'               TRACK JOBS,LIST            MB Y02958
DCMATTS  EQU   X'08'               TRACK TS                   MB Y02958
DCMATTSL EQU   X'04'               TRACK TS,LIST              MB Y02958
DCMATA   EQU   X'88'               TRACK A                    MB Y02958
DCMATAL  EQU   X'44'               TRACK A,LIST               MB Y02958
DCMAUTME DS    XL2                 UTME=NNN VALUE             MB Y02958
DCMATECB DS    F                   TRACK CANCEL ECB ADDRESS   MB Y02958
DCMAPAD  DS    F                   RESERVED                   MB Y02958
DCMACBND EQU   *                   SACB END
DCMCLRLN EQU   *-DCMACLR           LENGTH FOR REINITIALIZING  MB Y02958
DCMACBSZ EQU   *-DCMACB            SACB SIZE
DCMREND  DS    0C                  END OF DCM
         MEND  , */
*%DCMRBSL  :  ;
*/*   01/15/73          LEVEL=05                                     */
*DECLARE
*  1 DCMTSRT  BASED(DCMTSPTR),
*   2 DCMADTRN    PTR(31),               /* POINTER TO PAGABLE DCM   */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCMRFLGS    CHAR(1),               /* FLAGS                    */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 DCMDOM   BIT(1),                  /* DOM MUST BE TRIED        */
*    3 DCMNIPP  BIT(1),                  /* DCM WAS USED BY NIP      */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*   2 DCMLEN      FIXED(15),             /* LENGTH OF PAGABLE DCM    */
*   2 DCMADKP     PTR(31),               /* ADDRESS OF ROUTED K
*                                           COMMAND  PARAMETER LIST  */
*   2 DCMTOPAR    CHAR(1),               /* TOP DISPLAY AREA DEFINED */
*   2 DCMTOPDS    CHAR(1),               /* TOP DISPLAY ON SCREEN    */
*   2 *           CHAR(1),               /* RESERVED                 */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*   2 DCMDEVTY    CHAR(1),               /* DEVICE TYPE FLAGS        */
*    3 DCMTY60  BIT(1),                  /* USABLE FOR SD            */
*    3 DCMTY50  BIT(1),                  /* UNUSABLE FOR SD          */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*   2 DCMADSDS    PTR(31),               /* POINTER TO FIRST SDS
*                                           SUPPORT AREA             */
*   2 DCMRMS      CHAR(1),               /* NUMBER OF CCWS TO WRITE  */
*   2 DCMADRMS    PTR(24)  BDY(BYTE),    /* POINTER TO RMS CCWS      */
*   2 DCMWLAST    PTR(31),               /* PT CON Q ENTRY LAST OUT
*                                           (O-O-L)                  */
*   2 DCMRMSAL    FIXED(15),             /* NUMBER LINES IN MSG AREA */
*   2 DCMDOMKY    FIXED(15),             /* CONSOLE DOM ELEMENT      */
*   2 DCMSUBAD    PTR(31),               /* POINTER TO SUB CONTROL
*                                           BLOCK                    */
*   2 DCMADPFK    PTR(31),               /* POINTER TO RESIDENT PFK
*                                           AREA                     */
*   2 DCMINTVL    FIXED(15),             /* INTERVAL FOR THIS DCM    */
*   2 DCMTMCTR    FIXED(15),             /* TIME COUNTER FOR THIS
*                                           DCM                      */
*   2 DCMR2FLG    CHAR(1),               /* TIMER FLAGS              */
*    3 DCMRXSFL BIT(1),                  /* FULL SCREEN FLAG         */
*    3 DCMRXUNV BIT(1),                  /* UNVIEWABLE MESSAGE
*                                           DISPLAYED                */
*    3 DCMRXTMR BIT(1),                  /* TIMER FLAG               */
*    3 DCMRXRLL BIT(1),                  /* READY TO ROLL            */
*    3 DCMRXDEL BIT(1),                  /* PENDING DELETE REQUEST   */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 DCMRXTIM BIT(1),                  /* TIMER ELAPSED FOR THIS
*                                           DISPLAY                  */
*    3 *        BIT(1),                  /* UNUSED                   */
*   2 DCMR3FLG    CHAR(1),               /* MISC FLAGS               */
*    3 DCMSTSWT BIT(1),                  /* CHANGING STATUS OF
*                                           OUTPUT ONLY CON          */
*    3 DCMKVIP  BIT(1),                  /* ENTRY FOR K VARY COMMAND */
*    3 DCMCLPR  BIT(1),                  /* CLOSE IN PROCESS         */
*    3 DCMRXSCN BIT(1),                  /* ASY ERROR MESSAGE ON
*                                           SCREEN                   */
*    3 DCMR3PKA BIT(1),                  /* DCM I/O COMPLETE         */
*    3 DCMRXHMT BIT(1),                  /* FULL SCREEN SIMULATED    */
*    3 *        BIT(1),                  /* UNUSED                   */
*    3 *        BIT(1),                  /* UNUSED                   */
*   2 *           FIXED(15),             /* RESERVED                 */
*   2 DCMRQDEL    PTR(31),               /* DELETE REQUEST BUFFER    */
*   2 *           PTR(31),               /* DELETE REQUEST BUFFER    */
*   2 DCMMSGSV    PTR(31),               /* POINTER TO NIPS MSGS.    */
*   2 DCMPACB              ,             /* SACB PREFIX              */
*    3 DCMPLN     FIXED(15),             /* SYSGEN LEN OF AREA.      */
*    3 DCMPLNPR   FIXED(15);             /* PREFIX LENGTH OF AREA.   */
* DECLARE                                /* SCREEN AREA CNTRL BLOCK  */
*  1 DCMACB  BASED(SACBPTR),             /* SACB                     */
*   2 DCMACBNX   PTR(31),                /* POINTER TO NEXT SACB.    */
*   2 DCMAID     CHAR(1),                /* AREA I.D.                */
*   2 DCMASACB   CHAR(1),                /* SACB FLAGS.              */
*    3 DCMAUSE BIT(1),                   /* AREA PRESENTLY DEFINED   */
*    3 DCMAGM  BIT(1),                   /* GETMAINED SACB.          */
*   2 DCMALN     FIXED(15),              /* LENGTH OF AREA.          */
*   2 DCMATOP    CHAR(1),                /* TOP ROW OF AREA.         */
*   2 DCMACLR    BDY(WORD,2),            /* REINITIALIZED PORTION.   */
*    3 DCMAROW    CHAR(1),               /* ROW FOR NEXT WRITE.      */
*    3 DCMAFR     FIXED(15),             /* FRAME ON SCREEN.         */
*    3 DCMAMJWQ   PTR(31),               /* PTR MAJOR CON Q ENTRY    */
*    3 DCMAMIN    PTR(31),               /* PTR TO MINOR WQE.        */
*    3 DCMATIME   FIXED(31),             /* TIME CONTROL LINE WRITN. */
*    3 DCMAMT     CHAR(2),               /* RESERVED                 */
*    3 DCMAFLG1   CHAR(1),               /* AREA FLAGS.              */
*     4 *        BIT(1),                 /* RESERVED.                */
*     4 DCMADISP BIT(1),                 /* DISPLAY IN AREA          */
*     4 DCMADEND BIT(1),                 /* END OF DISP. ON SCREEN   */
*     4 DCMAFRPR BIT(1),                 /* FRAMING IN PROGRESS      */
*     4 DCMAFULL BIT(1),                 /* FRAME FULL               */
*     4 DCMABL   BIT(1),                 /* BLANKING TO BE DONE      */
*     4 *        BIT(1),                 /* RESERVED.                */
*     4 *        BIT(1),                 /* RESERVED.                */
*    3 DCMAFLG2   CHAR(1),               /* AREA FLAGS 2.            */
*     4 DCMALMIN BIT(1),                 /* PTR TO LAST MINOR OUTPT. */
*     4 DCMAWCON BIT(1),                 /* WRITE CONTROL LINE       */
*     4 DCMARCON BIT(1),                 /* REWRITE CONTROL LINE     */
*     4 DCMAMJFR BIT(1),                 /* MAJOR WQE HAS BEEN FOUND */
*     4 *        BIT(1),                 /* RESERVED.                */
*     4 *        BIT(1),                 /* RESERVED.                */
*     4 *        BIT(1),                 /* RESERVED.                */
*     4 *        BIT(1),                 /* RESERVED.                */
*    3 DCMATFLG     CHAR(4) BDY(WORD),   /* FLAGS AND UTME VALUE     */
*     4 DCMADFLG    CHAR(1),             /* DYNAMIC DISPLAY FLAGS    */
*      5 DCMADD   BIT(1),                /* TRACK IN AREA            */
*      5 DCMAHOLD BIT(1),                /* TRACK IN HOLD MODE       */
*      5 DCMACSIB BIT(1),                /* TRACK WITH CONT LINE     */
*      5 *        BIT(1),                /* RESERVED.                */
*      5 *        BIT(1),                /* RESERVED.                */
*      5 *        BIT(1),                /* RESERVED.                */
*      5 *        BIT(1),                /* RESERVED.                */
*      5 *        BIT(1),                /* RESERVED.                */
*     4 DCMATRCK    CHAR(1),             /* TRACK REQUEST INDICATORS */
*      5 DCMATJOB    BIT(1),             /* TRACK JOBS               */
*      5 DCMATJBL    BIT(1),             /* TRACK JOBS,LIST          */
*      5 *           BIT(1),             /* RESERVED                 */
*      5 *           BIT(1),             /* RESERVED                 */
*      5 DCMATTS     BIT(1),             /* TRACK TS                 */
*      5 DCMATTSL    BIT(1),             /* TRACK TS,LIST            */
*      5 *           BIT(1),             /* RESERVED                 */
*      5 *           BIT(1),             /* RESERVED                 */
*                        /* TO REFERENCE AND CHANGE THE ABOVE BITS   */
*                        /* REFERENCE: IF DCMATJBL='1'B THEN ...     */
*                        /* CHANGE: DCMATJBL='1'B                    */
*%DCL DCMATA CHAR;       /* MASK FOR TRACK A                         */
*%DCMATA='''88''X';      /* REFERENCE: IF DCMATRCK=DCMATA THEN ...   */
*                        /* CHANGE: DCMATRCK=DCMATA                  */
*%DCL DCMATAL CHAR;      /* MASK FOR TRACK A,LIST                    */
*%DCMATAL='''44''X';     /* REFERENCE AND CHANGE AS FOR DCMATA       */
*     4 DCMAUTME    FIXED(15),           /* UTME=NNN VALUE           */
*    3 DCMATECB    PTR(31),              /* TRACK CANCEL ECB ADDRESS */
*    3 DCMAPAD     FIXED(31),            /* RESERVED                 */
*   2 DCMACBND    BDY(BYTE);             /* SACB END                 */
* %DCMCLRLN='LENGTH(DCMACLR)';
* %DCMPRSZ='LENGTH(DCMPACB)';
* %DCMACBSZ='LENGTH(DCMACB)';
*DECLARE DCMREND (*) CHAR(1)   BASED
*  (ADDR(DCMTSRT )+LENGTH(DCMTSRT ));
*                                        /* END OF DCM               */
*        %GOTO DCMPBSL;                                              /*
         MACRO
         IEETDCM
*     12/15/72          LEVEL=04
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                         WORK AND SAVE AREAS                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DCMSTRT  DSECT DCMSTPTR
         DS    0F                  FULL WORD ALIGNMENT
         DS    H                   DCM LENGTH
         DS    H                   PADDING
         SPACE 4
DCMFLG1  DS    BL1                 DCM AREA INDICATORS
         SPACE 2
DCMOUTPT EQU   X'02'               DCM UPDATED FOR OUTPUT ONLY
         SPACE 4
DCMATI   DC    X'00'               SAVED UCB ATTN INDEX      MC SA55058
         DC    AL2(0)              RESERVED                  MC SA55058
         SPACE 2
DCMWTINT DS    A                   DCMWTINT INITIAL VALUE
DCMLNCNT DS    H                   NUMBER OF LINES TO BLANK  MC SA53462
DCMLNNUM DC    X'00'               FIRST LINE TO BLANK       MC SA53462
         DC    X'00'               RESERVED                  MC SA53462
DCMPACK  DS    F                   AREA TO PLACE NUMBER FOR PACKING
DCMCVBIN DS    F                   AREA FOR CONVERSION TO BINARY
         SPACE 2
DCMTIMES DS    BL1                 TIME RTNS INDICATOR BYTE
         SPACE 2
DCMTIMER EQU   X'80'               TIME ELAPSED FOR THIS DISPLAY
DCMOPTTI EQU   X'40'               OPTIONS TO TI RTN
DCMOTTMM EQU   X'10'               OPTIONS OR TI RTNS TO MSG MODULE
DCMTASYN EQU   X'04'               TIMER SET FOR ASYNC ERROR MSG
DCMOCTTI EQU   X'02'               OPEN-CLOSE TO TI RTN
DCMRMTTI EQU   X'01'               ROLL MODE TO TIMER ROUTINE
         EJECT
         DS    XL1                 UNUSED
         SPACE 2
DCMELGN  DS    H                   ENTRY AREA LAST CHARACTER POINTER
         SPACE 2
DCMBUFAD DS    A                   POINTER TO BUFFER ADDRESS TABLE
DCMDOMPK DS    A                   ADDRESS OF FIRST DOM NUMBER
DCMAMTAB DS    A                   ADDRESS OF FIRST SCT ENTRY
DCMADSEC DS    A                   ADDRESS OF FIRST SSCT ENTRY
DCMADDRL DS    A                   ADDRESS OF LAST SCT ENTRY
DCMASCRN DS    A                   POINTER TO SCREEN IMAGE BUFFER
DCMLSCRN DS    A                   POINTER TO LAST BUFFER LINE
DCMWTBUF DS    A                   SCREEN LENGTH POINTER
DCMAINS  DS    A                   POINTER TO INSTRUCTION LINE
DCMAENTR DS    A                   POINTER TO ENTRY AREA
DCMAWARN DS    A                   POINTER TO WARNING LINE
DCMADCHP DS    A                   ADDRESS OF CHANNEL PROGRAM AREA
DCMPFKLN DS    A                   POINTER TO PFK LINE
DCMCXSVE DS    F                   CXSA SAVE AREA
DCMADOPN DS    A                   ADDRESS OF COMMAND OPERAND
DCMDSAV  DS    5F                  SAVE AND WORK AREA
         SPACE 2
*           INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35                *
*           FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER     *
DCMWQEXP DS    0F                  ENSURE FULL WORD BOUNDARY
DCMINLGN DS    H                   FIELD FOR INPUT LENGTH
DCMMCSFL DS    H                   MCS FLAGS FIELD
DCMINPUT DS    32F                 INPUT MESSAGE TEXT
         SPACE 2
DCMLGNTH DS    H                   LENGTH OF A LINE
DCMBAINC DS    H                   ADDRESS TO INSERT CURSOR
DCMIRCTR DS    H                   INTERVENTION REQ'D MSG COUNTER
DCMBADLN DS    H                   BUFFER ADDR TO BEGIN MSG WRITE
DCMBYTCT DS    H                   NUMBER OF BYTES TO WRITE
DCMADNUM DS    H                   NEXT LINE NUMBER
DCMAXLGN DS    H                   MAXIMUM LINE LENGTH
DCMMSGAL DS    H                   NUMBER OF LINES IN MESSAGE AREA
DCMRMINC DS    H                   INCREMENT INTO RMI
DCMSCTCN DS    H                   LENGTH OF ONE SCT ENTRY
DCMCORLN DS    H                   LENGTH OF DCM LINE IN CORE
         DS    H                   TIME COUNTER
DCMPFKNM DS    XL1                 NUMBER OF KEY BEING PROCESSED
DCMPFKKN DS    XL1                 LIST KEY NUMBER
         EJECT
DCMDEL   DS    CL2                 DEL VALUE
DCMCON   DS    CL1                 CON VALUE
DCMSEG   DS    FL1                 SEG VALUE
DCMDL    DS    FL1                 DISPLAY AREA OPTION
DCMRNUM  DS    FL1                 ROLL NUMBER VALUE
DCMRTME  DS    H                   ROLL TIME VALUE
         SPACE 2
*  DEFAULT VALUES FOR OPTIONS
DCMSEGDF DS    FL1                 SEG DEFAULT
DCMRNUMD DS    FL1                 RNUM DEFAULT
DCMRTMED DS    H                   RTME DEFAULT
         SPACE 2
DCMASKEN DS    XL1                 ENTER MASK
DCMASKCN DS    XL1                 CANCEL MASK
DCMASKCR DS    XL1                 CURSOR MASK
DCMASKLP DS    XL1                 LIGHT PEN MASK
DCMASKPF DS    XL1                 PFK MASK
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                         COMMUNICATIONS AREA                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
DCMOPTST DS    BL1                 STATUS OF SCREEN CONTROL OPTIONS
         SPACE 2
DCMOPTVR EQU   X'80'               DELETE VERIFICATION  CON=(Y=1,N=0)
DCMOPTAD EQU   X'40'               AUTOMATIC DELETION   DEL=(Y=1,N=0)
DCMOPTSG EQU   X'20'               DEFAULT SEGMENT SPECIFIED  SEG=(0=0)
DCMOPRLL EQU   X'10'               ROLL MODE  (Y=1,N=0)
         SPACE 4
DCMCS    DS    BL1                 OPEN/CLOSE REQUEST
         SPACE 2
DCMCSC   EQU   X'80'               CLOSE REQUEST
DCMCSO   EQU   X'40'               OPEN REQUEST
         SPACE 4
DCMUTILT DS    BL1                 RESERVED
         SPACE 2
DCMUTILA EQU   X'80'               THESE BITS ARE
DCMUTILB EQU   X'40'                 INITIALIZED AND USED
DCMUTILC EQU   X'20'                 SOLELY WITHIN
DCMUTILD EQU   X'10'                 EACH MODULE
DCMUTILE EQU   X'08'               THEY ARE NEVER
DCMUTILF EQU   X'04'               USED FOR INTERFACE
DCMTEST1 EQU   X'02'               FOR TESTING
DCMTEST2 EQU   X'01'               FOR TESTING
         SPACE 4
DCMDSTAT DS    BL1                 CURRENT DISPLAY STATUS
         SPACE 2
DCMDSTNM EQU   X'20'               MESSAGES ARE NUMBERED
DCMDSTNH EQU   X'10'               MSGS NUMBERED - HOLD OPTION
DCMDSINR EQU   X'08'               INTERVENTION REQ'D DELETION TRIED
DCMDSAUT EQU   X'04'               AUTOMATIC DELETION TRIED
         SPACE 4
DCMMCSST DS    BL1                 MCS INTERFACE BYTE
         SPACE 2
DCMDUSE  EQU   X'80'               OUR SUPPORT IN CONTROL
DCMOOMSS EQU   X'04'               MESSAGE STREAM ENTRY
DCMOOSDS EQU   X'01'               STATUS DISPLAY ENTRY
         SPACE 4
DCMIOUNQ DS    BL1                 UNIQUE IO BYTE
         SPACE 2
*  UNIQUE INTERFACE BITS FOR 2260
DCMIO226 EQU   X'80'               RMI PERFORMED
DCMRPCUR EQU   X'40'               ADVANCE CURSOR TO BLANKS
DCMFRSCN EQU   X'20'               PUT OUTPUT IN HOLD MODE
*  UNIQUE INTERFACE BITS FOR 2250
DCMRDARM EQU   X'10'               PERFORM READ AFTER RMI
DCMW2250 EQU   X'08'               DEVICE IS 2250
DCMINNOR EQU   X'04'               NORMAL INSTRUCTION LINE
DCMINERR EQU   X'02'               ERROR INSTRUCTION LINE
         SPACE 4
DCMIOCM1 DS    BL1                 IO COMMUNICATIONS BYTE 1
         SPACE 2
DCMDORMI EQU   X'80'               ISSUE RMI
DCMSOUND EQU   X'40'               SOUND ALARM
DCMWRWRN EQU   X'20'               WRITE WARNING LINE
DCMWRMSG EQU   X'10'               WRITE FULL MESSAGE AREA
DCMWRPAR EQU   X'08'               WRITE PARTIAL MESSAGE AREA
DCMWRINS EQU   X'04'               WRITE INSTRUCTION LINE
DCMWRENT EQU   X'02'               WRITE ENTRY AREA
DCMINSC  EQU   X'01'               INSERT CURSOR
         EJECT
DCMIOCM2 DS    BL1                 IO COMMUNICATIONS BYTE 2
         SPACE 2
DCMBLENT EQU   X'80'               BLANK ENTRY AREA
DCMBLWRL EQU   X'40'               BLANK LEFT HALF WARNING LINE
DCMBLWRR EQU   X'20'               BLANK RIGHT HALF WARNING LINE
DCMINSSH EQU   X'10'               INIT AND SHIFT INSTRUCTION LINE
DCMWINFD EQU   X'08'               WRITE INFORMATIONAL DISPLAY
DCMERASE EQU   X'04'               PERFORM ERASE
DCMIOCRD EQU   X'02'               PERFORM READ (2250,22DOC)
DCMWRASY EQU   X'01'               WRITE ASYNC ERROR MSG TO MID-SCREEN
         SPACE 4
DCMIOCM3 DS    BL1                 IO COMMUNICATIONS BYTE 3
         SPACE 2
DCMOPRMI EQU   X'80'               RMI AFTER OPEN TO UNLOCK KEYBOARD
DCMSSRG  EQU   X'40'               SUPPRESS START REGENERATION
DCMWRPFK EQU   X'10'               DCM WRITE PFK AREA
DCMPFKAT EQU   X'08'               PFK ATTENTION
DCMRDPFK EQU   X'04'               PFK AREA READ
DCMACPFK EQU   X'02'               TURN ACTIVE PFK LIGHTS ON
DCMLTPFK EQU   X'01'               TURN ALL PFK LIGHTS ON
         SPACE 4
DCMLINEN DS    XL1                 LINE NUMBER TO BEGIN WRITE
         SPACE 2
DCMCULNO DS    XL1                 LINE IN ENTRY AREA TO INSERT CURSOR
         SPACE 2
DCMPOSCU DS    XL1                 POSITION TO INSERT CURSOR
         SPACE 4
DCMASYNC DS    BL1                 ASYN ERROR COMMUNICATIONS/RETRY BYTE
         SPACE 2
DCMASDA  EQU   X'40'               RETRY BIT
DCMASIN  EQU   X'20'               RETRY BIT
DCMASBA  EQU   X'10'               RETRY BIT
DCMASLOG EQU   X'08'               LOG ASYNCHRONOUS ERROR
         EJECT
DCMCOM1  DS    BL1                 COMMUNICATIONS BYTE
         SPACE 2
DCMLPENT EQU   X'80'               ENTER BY LP OR CURSOR
DCMIOPRD EQU   X'40'               READ PERFORMED
DCMCOMRM EQU   X'20'               RMI PERFORMED
DCMCOMAU EQU   X'10'               PERFORM AUTO DELETE
DCMCOMRD EQU   X'08'               PERFORM REGULAR DELETE
DCMCOMNM EQU   X'04'               NUMBER MESSAGES
DCMCANCL EQU   X'01'               INDICATE CANCEL TO COMMAND ROUTINE
         SPACE 3
DCMCOM2  DS    BL1                 COMMUNICATIONS BYTE
         SPACE 2
DCMCM2I  EQU   X'80'               INPUT TO BE PROCESSED
DCMSPLIT EQU   X'40'               MSG TO BE SPLIT
DCMCOMAR EQU   X'20'               ACCEPTED REPLY
DCMERPF  EQU   X'08'               ERASE PERF-PROC CAN NOW CLOSE DEVICE
DCMCMIN5 EQU   X'04'               RETURN TO INTER. 5 FOR BLNK
DCMCBLNK EQU   X'02'               BLANKING REQUIRED
DCMAE    EQU   X'01'               CLEANUP FOR ASY ERROR
         SPACE 3
DCMCOM3  DS    BL1                 COMMUNICATIONS BYTE
         SPACE 2
DCMCDSP3 EQU   X'80'               DISPLAY 3 COMPLETED WORK
DCMRTPFK EQU   X'40'               RETURN TO PFK ROUTINE
DCMVLPFK EQU   X'20'               VERIFYING LAST COMMAND
DCMXINT1 EQU   X'10'               ENTRY FOR INTERFACE 1 ROUTINE
DCMOLUNV EQU   X'08'               O-O-L MSG CAUSED UNVIEW. MSG.
DCMPFKWR EQU   X'04'               WRITE PFK UPDATES TO LIB
DCMOLHLD EQU   X'02'               OUT OF LINE MESSAGES HELD  MB Y02958
DCMCMIN7 EQU   X'01'               RETURN TO INTER. 7 FOR BLANKING
         SPACE 3
DCMCMSG1 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 1
         SPACE 2
DCMMSGWT EQU   X'80'               MOVE IN MESSAGE WAITING
DCMUNMSG EQU   X'40'               MOVE IN UNVIEWABLE MESSAGE
DCMSTEX  EQU   X'20'               MOVE IN STATUS EXISTS
DCMCHOPT EQU   X'10'               MOVE IN CHANGE OPTIONS
DCMELONG EQU   X'08'               MOVE IN ENTRY TOO LONG
DCMWRCDL EQU   X'04'               MOVE IN CON=N,DEL=Y
DCMDELNT EQU   X'02'               MOVE IN DEL UNCHANGED, NO TIMER
         EJECT
DCMCMSG2 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 2
         SPACE 2
DCMDLREQ EQU   X'80'               MOVE IN DELETION REQUESTED
DCMRQINC EQU   X'40'               MOVE IN REQUEST INCONSISTENT
DCMMSGCR EQU   X'20'               MOVE IN INVALID CURSOR OPERATION
DCMINVOP EQU   X'10'               MOVE IN INVALID OPERAND
DCMCILLP EQU   X'08'               MOVE IN ILLEGAL LP OPERATION
DCMDELRI EQU   X'04'               MOVE IN DELETE REQUEST INCONSISTANT
DCMASYRT EQU   X'02'               MOVE IN ASYN ERROR RETRYABLE
DCMASYCD EQU   X'01'               MOVE IN ASYN ERROR MAYBE RETRYABLE
         SPACE 4
DCMCMSG3 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 3
         SPACE 2
DCMCMRLL EQU   X'80'               MOVE IN ROLL MODE MESSAGE
DCMCDLR1 EQU   X'40'               NO DELETABLE MESSAGES
DCMCDLR2 EQU   X'20'               INVALID RANGE
DCMCDLR3 EQU   X'10'               SEG EQU TO ZERO
DCMCDLR4 EQU   X'08'               DISPLAY NOT ON SCREEN
DCMCDLR5 EQU   X'04'               INVALID OPERAND
DCMDTBSY EQU   X'01'               COMMAND REJECTED - TASK BUSY
         SPACE 4
DCMCMSG4 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 4
         SPACE 2
DCMPFKNA EQU   X'80'               MOVE IN PFK NOT ALLOCATED FOR
DCMPFKND EQU   X'40'               MOVE IN PFK NOT DEFINED
DCMPFKNO EQU   X'20'               MOVE IN NO PFK ALLOCATION
DCMPFKIP EQU   X'10'               MOVE IN PFK IN PROCESS
         SPACE 4
DCMSVC34 DS    BL1                 SVC 34 COMMUNICATION BYTE
         SPACE 2
DCMMYCMD EQU   X'80'               COMMAND TO BE HANDLED BY THIS CONS
DCMINVLD EQU   X'40'               INVALID K COMMAND
DCMTYPE1 EQU   X'20'               K COMMAND IS NOT ROUTABLE
         SPACE 2
DCMPAD   DS    X                   RESERVED COMMUNICATION BYTE   Y02958
DCMIONDX DS    X                   INDEX FOR SELECTING THE    MB Y02958
*                                  APPROPRIATE I/O ROUTINE    MB Y02958
*                                  X'04' - M/165 CONSOLE      MB Y02958
*                                  X'08' - 2250               MB Y02958
*                                  X'0C' - 2260               MB Y02958
*                                  X'10' - 3277               MB Y02958
DCMTEST  DS    H                   RESERVED FOR TESTING       MB Y02958
         EJECT
**                                                                   **
*                        MODULE ADDRESSES                             *
**                                                                   **
         SPACE 1                                              MB Y02958
DCMIORTN DS    F                   APPROIATE I/O ROUTINE      MB Y02958
*                  NAME   TRACE ID   DESCRIPTION              MB Y02958
*                 IEECVETH    EH   3066(M/165) IO ROUTINE     MB Y02958
*                 IEECVETP    EP   2250 IO ROUTINE            MB Y02958
*                 IEECVETR    ER   2260 IO ROUTINE            MB Y02958
*                 IEECVETU    EU   3277 IO ROUTINE            MB Y02958
         SPACE 1                                              MB Y02958
*                  NAME   TRACE ID   DESCRIPTION              MB Y02958
DCMNPRZ  DS    F  IEECVFT1    F1   PROCESSOR 0 LOAD ONE       MB Y02958
DCMNPROC DS    F  IEECVET1    E1   PROCESSOR ROUTINE LOAD ONE MB Y02958
DCMNDSP1 DS    F  IEECVET2    E2   DISPLAY ROUTINE 1          MB Y02958
DCMNDSP2 DS    F  IEECVET3    E3   DISPLAY ROUTINE 2          MB Y02958
DCMNDSP3 DS    F  IEECVFT2    F2   DISPLAY ROUTINE 3          MB Y02958
DCMNCMD1 DS    F  IEECVET4    E4   COMMAND ROUTINE 1          MB Y02958
DCMNDEL1 DS    F  IEECVET6    E6   DELETE ROUTINE 1           MB Y02958
DCMNDEL2 DS    F  IEECVET7    E7   DELETE ROUTINE 2           MB Y02958
DCMNDEL3 DS    F  IEECVET8    E8   DELETE ROUTINE 3           MB Y02958
DCMNDEL4 DS    F  IEECVET9    E9   DELETE ROUTINE 4           MB Y02958
DCMNOPT1 DS    F  IEECVETA    EA   OPTIONS ROUTINE 1          MB Y02958
DCMNPFK1 DS    F  IEECVFTA    FA   PFK ROUTINE 1              MB Y02958
DCMNPFK2 DS    F  IEECVFTB    FB   PFK ROUTINE 2              MB Y02958
DCMNERRO DS    F  IEECVETC    EC   ASYNCHRONOUS ERROR ROUTINE MB Y02958
DCMNMSG1 DS    F  IEECVETD    ED   MESSAGE ROUTINE 1          MB Y02958
DCMNMSG2 DS    F  IEECVETE    EE   MESSAGE ROUTINE 2          MB Y02958
DCMNMSG3 DS    F  IEECVFTD    FD   MESSAGE ROUTINE 3          MB Y02958
DCMNLPCR DS    F  IEECVETF    EF   LIGHT PEN/CURSOR SERVICE   MB Y02958
DCMNOPCL DS    F  IEECVETG    EG   OPEN-CLOSE ROUTINE         MB Y02958
DCMNCLN  DS    F  IEECVFTG    FG   CLEANUP MODULE             MB Y02958
DCMNROLL DS    F  IEECVETJ    EJ   ROLL MODE ROUTINE          MB Y02958
DCMNTIMR DS    F  IEECVETK    EK   TIMER INTERPRETER ROUTINE  MB Y02958
DCMNINT1 DS    F  IEECVFTL    FL   INTERFACE 1 ROUTINE        MB Y02958
DCMNINT2 DS    F  IEECVFTM    FM   INTERFACE 2 ROUTINE        MB Y02958
DCMNINT3 DS    F  IEECVFTN    FN   INTERFACE 3 ROUTINE        MB Y02958
DCMNINT4 DS    F  IEECVFTO    FO   INTERFACE 4 ROUTINE        MB Y02958
DCMNINT5 DS    F  IEECVFTP    FP   INTERFACE 5 ROUTINE        MB Y02958
DCMNINT6 DS    F  IEECVFTQ    FQ   INTERFACE 6 ROUTINE        MB Y02958
DCMNINT7 DS    F  IEECVFTT    FT   INTERFACE 7 ROUTINE        MB Y02958
         SPACE 2
DCMTRACE DS    CL30                DIDOCS MODULE TRACE AREA   MB Y02958
DCMTRAC2 EQU   DCMTRACE+2          TRACE MOVE FROM-ADDRESS    MB Y02958
DCMTRLEN EQU   *-DCMTRACE          LENGTH FOR TRACE MOVE      MB Y02958
DCMTREN1 DS    C                   1ST BYTE OF TRACE ENTRY    MB Y02958
DCMTREN2 DS    C                   2ND BYTE OF TRACE ENTRY    MB Y02958
         EJECT
*  FIRST BYTE OF SCT ENTRIES
DCMMSGWR EQU   X'80'               WTOR MESSAGE DISPLAYED IN LINE
DCMMSGIN EQU   X'40'               MESSAGE DISPLAYED IN LINE
DCMMSGCN EQU   X'20'               MESSAGE CONTINUED ON NEXT LINE
DCMMSGJK EQU   X'10'               TO WRITE OUT-OF-LINE DISPLAY FROM
*                                  MAY CONTAIN JUNK (SDS INTERFACE 2)
DCMMSGAD EQU   X'08'               MESSAGE CAN BE DELETED AUTOMATICALLY
DCMMSGRD EQU   X'04'               REQUEST HAS SPECIFIED MSG BE REMOVED
DCMMSGIF EQU   X'02'               INFORMATIONAL MESSAGE IN LINE
DCMMSGST EQU   X'01'               END OF TABLE INDICATOR
         SPACE 2
*  SECOND BYTE OF SCT ENTRIES
DCMMSGAC EQU   X'80'               ACTION MESSAGE
DCMMSGC7 EQU   X'40'               DESCRIPTOR CODE 7 MESSAGE
DCMMSGDM EQU   X'20'               MESSAGE HAS BEEN DOMMED
DCMMSGAR EQU   X'10'               MESSAGE IS AN ACCEPTED REPLY
DCMMSGIR EQU   X'08'               INTERVENTION REQUIRED MESSAGE
DCMMSGCT EQU   X'04'               CONTINUATION LINE
DCMMSGPP EQU   X'02'               ISSUED BY PROBLEM PROGRAM
DCMMSGCL EQU   X'01'               CONTROL LINE OF IN LINE MLWTO
         SPACE 2
*  SECONDARY SCT ENTRIES
DCMSECCL EQU   X'80'               CONTROL LINE OF OUT OF LINE DISPLAY
DCMSECLL EQU   X'40'               LABEL LINE OF OUT OF LINE DISPLAY
DCMSECDL EQU   X'20'               DATA LINE OF OUT OF LINE DISPLAY
DCMSECBL EQU   X'10'               THIS LINE IS BLANKED
DCMSECDD EQU   X'02'               LINE RESERVED FOR DYNAMIC DISPLAY
DCMSECST EQU   X'01'               END OF TABLE INDICATOR
DCMEND   DS    0C                  END OF DCM
         MEND  , */
*%DCMPBSL  :  ;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*/*                                                                  */
*/*                       WORK AND SAVE AREAS                        */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*/*   12/15/72          LEVEL=04                                     */
*DECLARE
*  1 DCMSTRT  BASED(DCMSTPTR),
*
*   2 *           FIXED(15)  BDY(WORD),  /* DCM LENGTH               */
*   2 *           FIXED(15),             /* PADDING                  */
*
*
*
*
*   2 DCMFLG1     CHAR(1),               /* DCM AREA INDICATORS      */
*
*
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMOUTPT BIT(1),                  /* DCM UPDATED FOR OUTPUT
*                                           ONLY                     */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMATI      CHAR(1),               /* SAVED UCB ATTN INDEX     */
*   2 *           CHAR(2),               /* RESERVED                 */
*
*
*   2 DCMWTINT    PTR(31),               /* DCMWTINT INITIAL VALUE   */
*   2 DCMLNCNT    FIXED(15),             /* NUMBER OF LINES TO BLANK */
*   2 DCMLNNUM    CHAR(1),               /* FIRST LINE TO BLANK      */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCMPACK     FIXED(31),             /* AREA TO PLACE NUMBER FOR
*                                           PACKING                  */
*   2 DCMCVBIN    FIXED(31),             /* AREA FOR CONVERSION TO
*                                           BINARY                   */
*
*   2 DCMTIMES    CHAR(1),               /* TIME RTNS INDICATOR BYTE */
*
*
*    3 DCMTIMER BIT(1),                  /* TIME ELAPSED FOR THIS
*                                           DISPLAY                  */
*    3 DCMOPTTI BIT(1),                  /* OPTIONS TO TI RTN        */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMOTTMM BIT(1),                  /* OPTIONS OR TI RTNS TO
*                                           MSG MODULE               */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMTASYN BIT(1),                  /* TIMER SET FOR ASYNC
*                                           ERROR MSG                */
*    3 DCMOCTTI BIT(1),                  /* OPEN-CLOSE TO TI RTN     */
*    3 DCMRMTTI BIT(1),                  /* ROLL MODE TO TIMER
*                                           ROUTINE                  */
*@EJECT;
*   2 *           CHAR(1),               /* UNUSED                   */
*
*
*   2 DCMELGN     FIXED(15),             /* ENTRY AREA LAST
*                                           CHARACTER POINTER        */
*
*
*   2 DCMBUFAD    PTR(31),               /* POINTER TO BUFFER
*                                           ADDRESS TABLE            */
*   2 DCMDOMPK    PTR(31),               /* ADDRESS OF FIRST DOM
*                                           NUMBER                   */
*   2 DCMAMTAB    PTR(31),               /* ADDRESS OF FIRST SCT
*                                           ENTRY                    */
*   2 DCMADSEC    PTR(31),               /* ADDRESS OF FIRST SSCT
*                                           ENTRY                    */
*   2 DCMADDRL    PTR(31),               /* ADDRESS OF LAST SCT
*                                           ENTRY                    */
*   2 DCMASCRN    PTR(31),               /* POINTER TO SCREEN IMAGE
*                                           BUFFER                   */
*   2 DCMLSCRN    PTR(31),               /* POINTER TO LAST BUFFER
*                                           LINE                     */
*   2 DCMWTBUF    PTR(31),               /* SCREEN LENGTH POINTER    */
*   2 DCMAINS     PTR(31),               /* POINTER TO INSTRUCTION
*                                           LINE                     */
*   2 DCMAENTR    PTR(31),               /* POINTER TO ENTRY AREA    */
*   2 DCMAWARN    PTR(31),               /* POINTER TO WARNING LINE  */
*   2 DCMADCHP    PTR(31),               /* ADDRESS OF CHANNEL
*                                           PROGRAM AREA             */
*   2 DCMPFKLN    PTR(31),               /* POINTER TO PFK LINE      */
*   2 DCMCXSVE    FIXED(31),             /* CXSA SAVE AREA           */
*   2 DCMADOPN    PTR(31),               /* ADDRESS OF COMMAND
*                                           OPERAND                  */
*   2 DCMDSAV  (5) FIXED(31),            /* SAVE AND WORK AREA       */
*
*
*/*         INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35               */
*/*         FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER    */
*   2 DCMWQEXP    FIXED(31),             /* ENSURE FULL WORD
*                                           BOUNDARY                 */
*    3 DCMINLGN    FIXED(15),            /* FIELD FOR INPUT LENGTH   */
*    3 DCMMCSFL    FIXED(15),            /* MCS FLAGS FIELD          */
*   2 DCMINPUT (32) FIXED(31),           /* INPUT MESSAGE TEXT       */
*
*
*   2 DCMLGNTH    FIXED(15),             /* LENGTH OF A LINE         */
*   2 DCMBAINC    FIXED(15),             /* ADDRESS TO INSERT CURSOR */
*   2 DCMIRCTR    FIXED(15),             /* INTERVENTION REQ'D MSG
*                                           COUNTER                  */
*   2 DCMBADLN    FIXED(15),             /* BUFFER ADDR TO BEGIN MSG
*                                           WRITE                    */
*   2 DCMBYTCT    FIXED(15),             /* NUMBER OF BYTES TO WRITE */
*   2 DCMADNUM    FIXED(15),             /* NEXT LINE NUMBER         */
*   2 DCMAXLGN    FIXED(15),             /* MAXIMUM LINE LENGTH      */
*   2 DCMMSGAL    FIXED(15),             /* NUMBER OF LINES IN
*                                           MESSAGE AREA             */
*   2 DCMRMINC    FIXED(15),             /* INCREMENT INTO RMI       */
*   2 DCMSCTCN    FIXED(15),             /* LENGTH OF ONE SCT ENTRY  */
*   2 DCMCORLN    FIXED(15),             /* LENGTH OF DCM LINE IN
*                                           CORE                     */
*   2 *           FIXED(15),             /* TIME COUNTER             */
*   2 DCMPFKNM    CHAR(1),               /* NUMBER OF KEY BEING
*                                           PROCESSED                */
*   2 DCMPFKKN    CHAR(1),               /* LIST KEY NUMBER          */
*@EJECT;
*   2 DCMDEL      CHAR(2),               /* DEL VALUE                */
*   2 DCMCON      CHAR(1),               /* CON VALUE                */
*   2 DCMSEG      PTR(8),                /* SEG VALUE                */
*   2 DCMDL       PTR(8),                /* DISPLAY AREA OPTION      */
*   2 DCMRNUM     PTR(8),                /* ROLL NUMBER VALUE        */
*   2 DCMRTME     FIXED(15),             /* ROLL TIME VALUE          */
*
*
*/*DEFAULT VALUES FOR OPTIONS                                        */
*   2 DCMSEGDF    PTR(8),                /* SEG DEFAULT              */
*   2 DCMRNUMD    PTR(8),                /* RNUM DEFAULT             */
*   2 DCMRTMED    FIXED(15),             /* RTME DEFAULT             */
*
*
*   2 DCMASKEN    CHAR(1),               /* ENTER MASK               */
*   2 DCMASKCN    CHAR(1),               /* CANCEL MASK              */
*   2 DCMASKCR    CHAR(1),               /* CURSOR MASK              */
*   2 DCMASKLP    CHAR(1),               /* LIGHT PEN MASK           */
*   2 DCMASKPF    CHAR(1),               /* PFK MASK                 */
*@EJECT;
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*/*                                                                  */
*/*                       COMMUNICATIONS AREA                        */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*
*
*   2 DCMOPTST    CHAR(1),               /* STATUS OF SCREEN CONTROL
*                                           OPTIONS                  */
*
*
*    3 DCMOPTVR BIT(1),                  /* DELETE VERIFICATION
*                                           CON=(Y=1,N=0)            */
*    3 DCMOPTAD BIT(1),                  /* AUTOMATIC DELETION
*                                           DEL=(Y=1,N=0)            */
*    3 DCMOPTSG BIT(1),                  /* DEFAULT SEGMENT
*                                           SPECIFIED  SEG=(0=0)     */
*    3 DCMOPRLL BIT(1),                  /* ROLL MODE (Y=1,N=0)      */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMCS       CHAR(1),               /* OPEN/CLOSE REQUEST       */
*
*
*    3 DCMCSC   BIT(1),                  /* CLOSE REQUEST            */
*    3 DCMCSO   BIT(1),                  /* OPEN REQUEST             */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMUTILT    CHAR(1),               /* RESERVED                 */
*
*
*    3 DCMUTILA BIT(1),                  /* THESE BITS ARE           */
*    3 DCMUTILB BIT(1),                  /* INITIALIZED AND USED     */
*    3 DCMUTILC BIT(1),                  /* SOLELY WITHIN            */
*    3 DCMUTILD BIT(1),                  /* EACH MODULE              */
*    3 DCMUTILE BIT(1),                  /* THEY ARE NEVER           */
*    3 DCMUTILF BIT(1),                  /* USED FOR INTERFACE       */
*    3 DCMTEST1 BIT(1),                  /* FOR TESTING              */
*    3 DCMTEST2 BIT(1),                  /* FOR TESTING              */
*
*
*
*
*   2 DCMDSTAT    CHAR(1),               /* CURRENT DISPLAY STATUS   */
*
*
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMDSTNM BIT(1),                  /* MESSAGES ARE NUMBERED    */
*    3 DCMDSTNH BIT(1),                  /* MSGS NUMBERED - HOLD
*                                           OPTION                   */
*    3 DCMDSINR BIT(1),                  /* INTERVENTION REQ'D
*                                           DELETION TRIED           */
*    3 DCMDSAUT BIT(1),                  /* AUTOMATIC DELETION TRIED */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMMCSST    CHAR(1),               /* MCS INTERFACE BYTE       */
*
*
*    3 DCMDUSE  BIT(1),                  /* OUR SUPPORT IN CONTROL   */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMOOMSS BIT(1),                  /* MESSAGE STREAM ENTRY     */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMOOSDS BIT(1),                  /* STATUS DISPLAY ENTRY     */
*
*
*
*
*   2 DCMIOUNQ    CHAR(1),               /* UNIQUE IO BYTE           */
*
*
*/* NIQUE INTERFACE BITS FOR 2260                                    */
*    3 DCMIO226 BIT(1),                  /* RMI PERFORMED            */
*    3 DCMRPCUR BIT(1),                  /* ADVANCE CURSOR TO BLANKS */
*    3 DCMFRSCN BIT(1),                  /* PUT OUTPUT IN HOLD MODE
*                                           UNIQUE INTERFACE BITS
*                                           FOR 2250                 */
*    3 DCMRDARM BIT(1),                  /* PERFORM READ AFTER RMI   */
*    3 DCMW2250 BIT(1),                  /* DEVICE IS 2250           */
*    3 DCMINNOR BIT(1),                  /* NORMAL INSTRUCTION LINE  */
*    3 DCMINERR BIT(1),                  /* ERROR INSTRUCTION LINE   */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMIOCM1    CHAR(1),               /* IO COMMUNICATIONS BYTE 1 */
*
*
*    3 DCMDORMI BIT(1),                  /* ISSUE RMI                */
*    3 DCMSOUND BIT(1),                  /* SOUND ALARM              */
*    3 DCMWRWRN BIT(1),                  /* WRITE WARNING LINE       */
*    3 DCMWRMSG BIT(1),                  /* WRITE FULL MESSAGE AREA  */
*    3 DCMWRPAR BIT(1),                  /* WRITE PARTIAL MESSAGE
*                                           AREA                     */
*    3 DCMWRINS BIT(1),                  /* WRITE INSTRUCTION LINE   */
*    3 DCMWRENT BIT(1),                  /* WRITE ENTRY AREA         */
*    3 DCMINSC  BIT(1),                  /* INSERT CURSOR            */
*@EJECT;
*   2 DCMIOCM2    CHAR(1),               /* IO COMMUNICATIONS BYTE 2 */
*
*
*    3 DCMBLENT BIT(1),                  /* BLANK ENTRY AREA         */
*    3 DCMBLWRL BIT(1),                  /* BLANK LEFT HALF WARNING
*                                           LINE                     */
*    3 DCMBLWRR BIT(1),                  /* BLANK RIGHT HALF WARNING
*                                           LINE                     */
*    3 DCMINSSH BIT(1),                  /* INIT AND SHIFT
*                                           INSTRUCTION LINE         */
*    3 DCMWINFD BIT(1),                  /* WRITE INFORMATIONAL
*                                           DISPLAY                  */
*    3 DCMERASE BIT(1),                  /* PERFORM ERASE            */
*    3 DCMIOCRD BIT(1),                  /* PERFORM READ
*                                           (2250,22DOC)             */
*    3 DCMWRASY BIT(1),                  /* WRITE ASYNC ERROR MSG TO
*                                           MID-SCREEN               */
*
*
*
*
*   2 DCMIOCM3    CHAR(1),               /* IO COMMUNICATIONS BYTE 3 */
*
*
*    3 DCMOPRMI BIT(1),                  /* RMI AFTER OPEN TO UNLOCK
*                                           KEYBOARD                 */
*    3 DCMSSRG  BIT(1),                  /* SUPPRESS START
*                                           REGENERATION             */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMWRPFK BIT(1),                  /* DCM WRITE PFK AREA       */
*    3 DCMPFKAT BIT(1),                  /* PFK ATTENTION            */
*    3 DCMRDPFK BIT(1),                  /* PFK AREA READ            */
*    3 DCMACPFK BIT(1),                  /* TURN ACTIVE PFK LIGHTS
*                                           ON                       */
*    3 DCMLTPFK BIT(1),                  /* TURN ALL PFK LIGHTS ON   */
*
*
*
*
*   2 DCMLINEN    CHAR(1),               /* LINE NUMBER TO BEGIN
*                                           WRITE                    */
*
*
*   2 DCMCULNO    CHAR(1),               /* LINE IN ENTRY AREA TO
*                                           INSERT CURSOR            */
*
*
*   2 DCMPOSCU    CHAR(1),               /* POSITION TO INSERT
*                                           CURSOR                   */
*
*
*
*
*   2 DCMASYNC    CHAR(1),               /* ASYN ERROR
*                                           COMMUNICATIONS/RETRY
*                                           BYTE 09300000            */
*
*
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMASDA  BIT(1),                  /* RETRY BIT                */
*    3 DCMASIN  BIT(1),                  /* RETRY BIT                */
*    3 DCMASBA  BIT(1),                  /* RETRY BIT                */
*    3 DCMASLOG BIT(1),                  /* LOG ASYNCHRONOUS ERROR   */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*@EJECT;
*   2 DCMCOM1     CHAR(1),               /* COMMUNICATIONS BYTE      */
*
*
*    3 DCMLPENT BIT(1),                  /* ENTER BY LP OR CURSOR    */
*    3 DCMIOPRD BIT(1),                  /* READ PERFORMED           */
*    3 DCMCOMRM BIT(1),                  /* RMI PERFORMED            */
*    3 DCMCOMAU BIT(1),                  /* PERFORM AUTO DELETE      */
*    3 DCMCOMRD BIT(1),                  /* PERFORM REGULAR DELETE   */
*    3 DCMCOMNM BIT(1),                  /* NUMBER MESSAGES          */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMCANCL BIT(1),                  /* INDICATE CANCEL TO
*                                           COMMAND ROUTINE          */
*
*
*
*   2 DCMCOM2     CHAR(1),               /* COMMUNICATIONS BYTE      */
*
*
*    3 DCMCM2I  BIT(1),                  /* INPUT TO BE PROCESSED    */
*    3 DCMSPLIT BIT(1),                  /* MSG TO BE SPLIT          */
*    3 DCMCOMAR BIT(1),                  /* ACCEPTED REPLY           */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMERPF  BIT(1),                  /* ERASE PERF-PROC CAN NOW
*                                           CLOSE DEVICE             */
*    3 DCMCMIN5 BIT(1),                  /* RETURN TO INTER. 5 FOR
*                                           BLNK                     */
*    3 DCMCBLNK BIT(1),                  /* BLANKING REQUIRED        */
*    3 DCMAE    BIT(1),                  /* CLEANUP FOR ASY ERROR    */
*
*
*
*   2 DCMCOM3     CHAR(1),               /* COMMUNICATIONS BYTE      */
*
*
*    3 DCMCDSP3 BIT(1),                  /* DISPLAY 3 COMPLETED WORK */
*    3 DCMRTPFK BIT(1),                  /* RETURN TO PFK ROUTINE    */
*    3 DCMVLPFK BIT(1),                  /* VERIFYING LAST COMMAND   */
*    3 DCMXINT1 BIT(1),                  /* ENTRY FOR INTERFACE 1
*                                           ROUTINE                  */
*    3 DCMOLUNV BIT(1),                  /* O-O-L MSG CAUSED UNVIEW.
*                                           MSG.                     */
*    3 DCMPFKWR BIT(1),                  /* WRITE PFK UPDATES TO LIB */
*    3 DCMOLHLD BIT(1),                  /* OUT OF LINE MESSAGES HELD*/
*    3 DCMCMIN7 BIT(1),                  /* RETURN TO INTER. 7 FOR
*                                           BLANKING                 */
*
*
*
*   2 DCMCMSG1    CHAR(1),               /* MSG MODULE
*                                           COMMUNICATIONS BYTE 1    */
*
*
*    3 DCMMSGWT BIT(1),                  /* MOVE IN MESSAGE WAITING  */
*    3 DCMUNMSG BIT(1),                  /* MOVE IN UNVIEWABLE
*                                           MESSAGE                  */
*    3 DCMSTEX  BIT(1),                  /* MOVE IN STATUS EXISTS    */
*    3 DCMCHOPT BIT(1),                  /* MOVE IN CHANGE OPTIONS   */
*    3 DCMELONG BIT(1),                  /* MOVE IN ENTRY TOO LONG   */
*    3 DCMWRCDL BIT(1),                  /* MOVE IN CON=N,DEL=Y      */
*    3 DCMDELNT BIT(1),                  /* MOVE IN DEL UNCHANGED,
*                                           NO TIMER                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*@EJECT;
*   2 DCMCMSG2    CHAR(1),               /* MSG MODULE
*                                           COMMUNICATIONS BYTE 2    */
*
*
*    3 DCMDLREQ BIT(1),                  /* MOVE IN DELETION
*                                           REQUESTED                */
*    3 DCMRQINC BIT(1),                  /* MOVE IN REQUEST
*                                           INCONSISTENT             */
*    3 DCMMSGCR BIT(1),                  /* MOVE IN INVALID CURSOR
*                                           OPERATION                */
*    3 DCMINVOP BIT(1),                  /* MOVE IN INVALID OPERAND  */
*    3 DCMCILLP BIT(1),                  /* MOVE IN ILLEGAL LP
*                                           OPERATION                */
*    3 DCMDELRI BIT(1),                  /* MOVE IN DELETE REQUEST
*                                           INCONSISTANT             */
*    3 DCMASYRT BIT(1),                  /* MOVE IN ASYN ERROR
*                                           RETRYABLE                */
*    3 DCMASYCD BIT(1),                  /* MOVE IN ASYN ERROR MAYBE
*                                           RETRYABLE                */
*
*
*
*
*   2 DCMCMSG3    CHAR(1),               /* MSG MODULE
*                                           COMMUNICATIONS BYTE 3    */
*
*
*    3 DCMCMRLL BIT(1),                  /* MOVE IN ROLL MODE
*                                           MESSAGE                  */
*    3 DCMCDLR1 BIT(1),                  /* NO DELETABLE MESSAGES    */
*    3 DCMCDLR2 BIT(1),                  /* INVALID RANGE            */
*    3 DCMCDLR3 BIT(1),                  /* SEG EQU TO ZERO          */
*    3 DCMCDLR4 BIT(1),                  /* DISPLAY NOT ON SCREEN    */
*    3 DCMCDLR5 BIT(1),                  /* INVALID OPERAND          */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCMDTBSY BIT(1),                  /* COMMAND REJECTED - TASK
*                                           BUSY                     */
*
*
*
*
*   2 DCMCMSG4    CHAR(1),               /* MSG MODULE
*                                           COMMUNICATIONS BYTE 4    */
*
*
*    3 DCMPFKNA BIT(1),                  /* MOVE IN PFK NOT
*                                           ALLOCATED FOR            */
*    3 DCMPFKND BIT(1),                  /* MOVE IN PFK NOT DEFINED  */
*    3 DCMPFKNO BIT(1),                  /* MOVE IN NO PFK
*                                           ALLOCATION               */
*    3 DCMPFKIP BIT(1),                  /* MOVE IN PFK IN PROCESS   */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*
*
*   2 DCMSVC34    CHAR(1),               /* SVC 34 COMMUNICATION
*                                           BYTE                     */
*
*
*    3 DCMMYCMD BIT(1),                  /* COMMAND TO BE HANDLED BY
*                                           THIS CONS                */
*    3 DCMINVLD BIT(1),                  /* INVALID K COMMAND        */
*    3 DCMTYPE1 BIT(1),                  /* K COMMAND IS NOT
*                                           ROUTABLE                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*
*
*   2 DCMPAD      CHAR(1),               /* RESERVED COMMUNICATION
*                                           BYTES                    */
*   2 DCMIONDX    CHAR(1),               /* INDEX FOR SELECTING THE
*                                           APPROPRIATE IO ROUTINE   */
*/*              4=3066,IEECVETH          8=2250,IEECVETP
*               12=2260,IEECVETR         16=3277,IEECVETU            */
*   2 DCMTEST     FIXED(15),             /* RESERVED FOR TESTING     */
*@EJECT;
*/*                                                                  */
*/*                      MODULE ADDRESSES                            */
*/*                                                                  */
*
*
*   2 DCMIORTN    PTR(31),               /* APPROIATE I/O ROUTINE    */
*
*
*   2 DCMNPRZ     PTR(31),               /* PROCESSOR 0 LOAD ONE     */
*   2 DCMNPROC    PTR(31),               /* PROCESSOR ROUTINE LOAD
*                                           ONE                      */
*   2 DCMNDSP1    PTR(31),               /* DISPLAY ROUTINE 1        */
*   2 DCMNDSP2    PTR(31),               /* DISPLAY ROUTINE 2        */
*   2 DCMNDSP3    PTR(31),               /* DISPLAY ROUTINE 3        */
*   2 DCMNCMD1    PTR(31),               /* COMMAND ROUTINE 1        */
*   2 DCMNDEL1    PTR(31),               /* DELETE ROUTINE 1         */
*   2 DCMNDEL2    PTR(31),               /* DELETE ROUTINE 2         */
*   2 DCMNDEL3    PTR(31),               /* DELETE ROUTINE 3         */
*   2 DCMNDEL4    PTR(31),               /* DELETE ROUTINE 4         */
*   2 DCMNOPT1    PTR(31),               /* OPTIONS ROUTINE 1        */
*   2 DCMNPFK1    PTR(31),               /* PFK ROUTINE 1            */
*   2 DCMNPFK2    PTR(31),               /* PFK ROUTINE 2            */
*   2 DCMNERRO    PTR(31),               /* ASYNCHRONOUS ERROR
*                                           ROUTINE                  */
*   2 DCMNMSG1    PTR(31),               /* MESSAGE ROUTINE 1        */
*   2 DCMNMSG2    PTR(31),               /* MESSAGE ROUTINE 2        */
*   2 DCMNMSG3    PTR(31),               /* MESSAGE ROUTINE 3        */
*   2 DCMNLPCR    PTR(31),               /* LIGHT PEN/CURSOR SERVICE
*                                           ROUTINE                  */
*   2 DCMNOPCL    PTR(31),               /* OPEN/CLOSE ROUTINE       */
*   2 DCMNCLN     PTR(31),               /* CLEANUP MODULE           */
*   2 DCMNROLL    PTR(31),               /* ROLL MODE ROUTINE        */
*   2 DCMNTIMR    PTR(31),               /* TIMER INTERPRETER
*                                           ROUTINE                  */
*   2 DCMNINT1    PTR(31),               /* INTERFACE 1 ROUTINE      */
*   2 DCMNINT2    PTR(31),               /* INTERFACE 2 ROUTINE      */
*   2 DCMNINT3    PTR(31),               /* INTERFACE 3 ROUTINE      */
*   2 DCMNINT4    PTR(31),               /* INTERFACE 4 ROUTINE      */
*   2 DCMNINT5    PTR(31),               /* INTERFACE 5 ROUTINE      */
*   2 DCMNINT6    PTR(31),               /* INTERFACE 6 ROUTINE      */
*   2 DCMNINT7    PTR(31),               /* INTERFACE 7 ROUTINE      */
*                                        /* AREA FOR DIDOCS TRACE    */
*%DCL DCMTRLEN CHAR;                     /* TRACE MOVE LENGTH        */
*%DCMTRLEN='30';                         /* 2 LESS THAN WHOLE AREA   */
*   2 DCMTRACE CHAR(DCMTRLEN),           /* TO-AREA FOR TRACE MOVE   */
*    3 *        CHAR(2),                 /* OLDEST TRACE ENTRY       */
*    3 DCMTRAC2 CHAR(DCMTRLEN),          /* FROM-AREA FOR TRACE MOVE */
*   2 DCMTREN1 CHAR(1),                  /* 1ST BYTE OF NEW ENTRY    */
*   2 DCMTREN2 CHAR(1);                  /* 2ND BYTE OF NEW ENTRY    */
*
*
*
*
*@EJECT;
*/* FIRST BYTE OF SCT ENTRIES                                        */
*DECLARE
*  1 DCMSCTA CHAR(2) BASED(DCMSCTB),
*   2 DCMMSGWR BIT(1),             /* WTOR MESSAGE DISPLAYED IN LINE */
*   2 DCMMSGIN BIT(1),             /* MESSAGE DISPLAYED IN LINE      */
*   2 DCMMSGCN BIT(1),             /* MESSAGE CONTINUED ON NEXT LINE */
*   2 DCMMSGJK BIT(1),             /* TO WRITE O-O-L DISPLAY FROM    */
*/*                                   MAY CONTAIN JUNK (SDS INTFCE 2)*/
*   2 DCMMSGAD BIT(1),             /* MESSAGE CAN BE AUTO DELETED    */
*   2 DCMMSGRD BIT(1),             /* REQUEST HAS SPEC. MSG BE REMV. */
*   2 DCMMSGIF BIT(1),             /* INFORMATIONAL MESSAGE IN LINE  */
*   2 DCMMSGST BIT(1),             /* END OF TABLE INDICATOR         */
*/*                                                                  */
*/* SECOND BYTE OF SCT ENTRIES                                       */
*   2 DCMMSGAC BIT(1),             /* ACTION MESSAGE                 */
*   2 DCMMSGC7 BIT(1),             /* DESCRIPTOR CODE 7 MESSAGE      */
*   2 DCMMSGDM BIT(1),             /* MESSAGE HAS BEEN DOMMED        */
*   2 DCMMSGAR BIT(1),             /* MESSAGE IS AN ACCEPTED REPLY   */
*   2 DCMMSGIR BIT(1),             /* INTERVENTION REQUIRED MESSAGE  */
*   2 DCMMSGCT BIT(1),             /* CONTINUATION LINE              */
*   2 DCMMSGPP BIT(1),             /* ISSUED BY PROBLEM PROGRAM      */
*   2 DCMMSGCL BIT(1);             /* CONTROL LINE OF I-L MLWTO      */
*/*                                                                  */
*/* FIRST BYTE OF SSCT ENTRIES                                       */
*DECLARE
*  1 DCMSCTC CHAR(1) BASED(DCMSCTD),
*   2 DCMSECCL BIT(1),             /* CONTROL LINE OF O-O-L DISPLAY  */
*   2 DCMSECLL BIT(1),             /* LABEL LINE OF O-O-L DISPLAY    */
*   2 DCMSECDL BIT(1),             /* DATA LINE OF O-O-L DISPLAY     */
*   2 DCMSECBL BIT(1),             /* THIS LINE IS BLANKED           */
*   2 DCMSECXX BIT(1),             /* UNUSED                         */
*   2 DCMSECYY BIT(1),             /* UNUSED                         */
*   2 DCMSECDD BIT(1),             /* LINE RESERVED FOR DYNAMIC DISP.*/
*   2 DCMSECST BIT(1);             /* END OF TABLE INDICATOR         */
*DECLARE DCMEND  (*) CHAR(1)   BASED
*  (ADDR(DCMSTRT )+LENGTH(DCMSTRT ));
*                                        /* END OF DCM               */
         EJECT
         TITLE 'S P Y --  MVS Console Spy Program  --  Version 3.1'
***********************************************************************
*                                                                     *
*                                 S P Y                               *
*                                                                     *
*                               04/25/80                              *
*                                                                     *
*                       Operator Console Monitor                      *
*                                                                     *
*     This program displays the contents of all active graphic        *
*     operator's consoles on a TSO CRT. The Operator's screen can be  *
*     either a 327x or a 370-168 integrated console with 35 lines.    *
*     The TSO user can use any 327x terminal.                         *
*                                                                     *
*     SPY must, alas, be APF authorized. The Operator console buffers *
*     and control blocks are now in fetch protected storage. Be       *
*     sure to place the 'SPY' command in IKJEFTE2 and/or IKJEFTE8     *
*     so that it will retain APF authorization from TSO.              *
*                                                                     *
*     SPY gives a TSO user the capability to enter any                *
*     console operator command. This facility in protected by a       *
*     simple 3 character password (in VIPWORD) to prevent you         *
*     from entering an operator command by accident. The syntax is    *
*                                                                     *
*     JES Command:  $...  any JES command ...                         *
*     OS Command:   /...  Any OS command ...  (the / is stripped off) *
*                                                                     *
*     Typing the 3-letter VIP password 'toggles' the VIP flag.        *
*     This facility works by passing the command to the COMMAND       *
*     program as a parm, who in turn executes it using SVC 34.        *
*     SPY,COMMAND and LINK must all be APF authorized if they are     *
*     to work properly in concert. Note that the response to the      *
*     command appears only on the screen you are watching at the      *
*     time. Also, your commands have the same console authority       *
*     as the screen you are watching, including the master console!   *
*     The moral being don't watch the master console and accidentally *
*     enter '/q' or something like that...                            *
*                                                                     *
*     This program will probably require both the SYS1.AMODGEN and    *
*     SYS1.APVTMACS Macro libraries to assemble properly.             *
*     SPY was developed on A 370/168 MVS Release 3.7; it will work    *
*     on MVS 3.8 with or without SE/2.                                *
*                                                                     *
*                        Steve Langley                                *
*                        Southern Calif. Edison                       *
*                        Rosemead, Calif   91770                      *
*                        213-572-3435                                 *
*                                                                     *
*                                                                     *
***********************************************************************
      EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*  Command     Description                                            *
*                                                                     *
*     B        End SPY                                                *
*     C        Switch monitor to console 1                            *
*     CXX      Switch monitor to console XX                           *
*     DXX      Set delay to XX tenths seconds                         *
*     E        End SPY                                                *
*     F        Freeze display on current page                         *
*     L        Link to SWAP program (if available)                    *
*     R        Release Display                                        *
*     S        Status of all consoles                                 *
*     W        Start timer mode for 30 seconds                        *
*     WXX      Start timer mode for XX seconds                        *
*     W0       Start timer mode until interrupt                       *
*     ?        Display this page                                      *
*     1        Display mode 1                                         *
*     2        Display mode 2                                         *
*                                                                     *
*  Hitting INTERRUPT will stop the wait timer                         *
*                                                                     *
*     Display modes 1 and 2 are only useful when watching a large     *
*     35-line 3066 370-168 integrated console from a 24-line 327x-2   *
*     TSO terminal. These modes are:                                  *
*                                                                     *
*     Display Mode 1 - Page 1 = Top 22 lines                          *
*                      Page 2 = Bottom 12 lines                       *
*     Display Mode 2 - Page 1 = Top 22 lines                          *
*                      Page 2 = Bottom 22 lines                       *
*                                                                     *
***********************************************************************
         SPACE 4
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
SPY      CSECT
         B     112(R15)           branch around save areas
         DC    CL9'SPY'           identifier
         DC    CL9'&SYSDATE'
         DC    CL7'&SYSTIME'
         DC    CL11'VERSION 3.1'
SAVE     DC    18F'0'             save area
         STM   R14,R12,12(R13)    save registers
         LR    R12,R15            R12 = addr of entry point
         USING SPY,R12,R11        addresability to csect
         LA    R11,SAVE           R11 = addr of our save area
         ST    R13,SAVE+4         save pointer to callers save area
         ST    R11,8(R13)         save ptr to our save area in caller's
         LR    R13,R11            R13 = addr of our save area
         LA    R11,4095(R12)      R11 will be
         LA    R11,1(R11)         second base register
         EJECT
***********************************************************************
*                                                                     *
*                       Program Initialization                        *
*                                                                     *
***********************************************************************
         BAL   R14,INITSCAN       Initialize IKJSCAN parmlist
         GTSIZE ,                 get screen size
         LTR   R0,R0              R0 = number of lines per screen
         BZ    HARDCOPY           if nonzero assume a CRT is in use
***********************************************************************
*                                                                     *
*                       This terminal is a CRT                        *
*                                                                     *
***********************************************************************
CRT      STH   R0,LPSCREEN        R0 = lines per screen
         STH   R1,CPLINE          R1 = characters per line
         CH    R0,=H'24'          is user on a 3277?
         BE    FLSCREEN           yes, just continue
         MVI   MOD4FLG,X'FF'      set 3278-4 flag on
         MVC   CMDCTRL(3),R41C1   row 41, col 1
         MVC   PHEADING(3),R42C1  row 42, col 1
         MVC   R24C1(3),R43C1     row 43, col 1
FLSCREEN CLI   TESTFLAG,X'00'
         BNE   SKPTST3
         STFSMODE ON,INITIAL=YES  turn on VTAM full screen mode
         LA    R3,STAXLIST        R3 = address of STAX list macro
         STAX  ATTNEXIT,MF=(E,(3)) attn exit trap
SKPTST3  EQU   *
         B     BLDUCMS
***********************************************************************
*                                                                     *
*                    This terminal is a Hardcopy                      *
*                                                                     *
***********************************************************************
HARDCOPY STSIZE SIZE=80           otherwise, hardcopy; set lsize=80
         MVI   CRTFLAG,X'00'      we are using a hardcopy
         MVC   CMDCTRL(6),BLANKS  zap out 327x cntrl chars
         MVC   PHEADING(6),BLANKS zap out 327x cntrl chars
         MVC   HELP(14),BLANKS    zap out 327x cntrl chars
         SPACE 3
***********************************************************************
*                                                                     *
*          Build a table of UCM addresses (one per console)           *
*                                                                     *
***********************************************************************
BLDUCMS  L     R4,CVTPTR          R4 = addr of CVT
         USING CVT,R4
         L     R4,CVTCUCB         R4 = addr of 'CUCB' (UCM base)
         DROP  R4
         USING UCM,R4
         LR    R2,R4              R2 = R4
         S     R2,=F'4'           R2 = addr of addr of UCM prefix
         L     R2,0(R2)           R2 = addr of UCM prefix
         USING UCMPRFX,R2
         L     R5,UCMVEA          R5 = addr of first UCM entry
         L     R6,UCMVEZ          R6 = length of each UCM entry
         L     R7,UCMVEL          R7 = addr of last UCM entry
         LA    R8,UCMTAB+16       R8 = addr of UCMTAB
         L     R9,UCMTABE         R9 = addr of end of UCMTAB
         XR    R10,R10            R10 = 0 (number of valid UCMs)
UCMLOOP  ST    R5,0(R8)           save UCM address in UCMTAB
         LA    R10,1(R10)         R10 = R10 + 1  (one more UCM)
         C     R5,UCMMCENT        is this UCM the master console UCM?
         BNE   UCMNEXT            no;  go look at next UCM entry
         ST    R10,CONSOLE        yes; look at this one first
UCMNEXT  LA    R8,16(R8)          R8 = addr of next UCMTAB entry
         CR    R8,R9              does R8 point past end of UCMTAB?
         BNL   UCMFULL            yes; leave loop
         AR    R5,R6              R5 = addr of next UCM entry
         CR    R5,R7              does R5 point past UCM entries?
         BL    UCMLOOP            no; keep going
         B     UCMDONE            yes; table complete
UCMFULL  MVC   ERROR(26),ERRMSG5  UCM table too small
UCMDONE  STH   R10,NUMUCMS        save number of UCMs found
         MVC   CONSOLE(4),=F'5'   make default console = 5
         DROP  R2,R4
***********************************************************************
*                                                                     *
*         Here we go... Use MODESET to put us in Key 0                *
*                                                                     *
***********************************************************************
         CLI   TESTFLAG,X'00'
         BNE   SKPTST4
         MODESET KEY=ZERO
SKPTST4  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*                            Top of loop                              *
*              Locate screen buffer and prepare to TPUT               *
*                                                                     *
***********************************************************************
NEXTPAGE CLI   ATTNFLG,X'00'      was attn hit?
         BE    NOATTN             no
*                                 attention key hit; process it
         MVI   ATTNFLG,X'00'      yes, reset flag
         MVC   TIME(3),BLANKS     blank out timer field
         MVI   WAITFLG,X'00'      turn off wait flag
         XC    TIMER,TIMER        set timer to 0
NOATTN   EQU   *
         LA    R5,UCMTAB          R5 = addr of UCMTAB
         L     R4,CONSOLE         R4 = console to be displayed
         CH    R4,NUMUCMS         is number too high?
         BNH   GETUCM             no, continue
RESETCN  MVC   ERROR(26),ERRMSG1  console undefined
RESETCN1 L     R4,OLDCONS         reset to old console
         ST    R4,CONSOLE         and save it
GETUCM   SLL   R4,4               multiply by 16
         LA    R5,0(R5,R4)        R5 = addr of addr of UCM
         LR    R1,R5              R1 = addr of UCMTAB entry
         L     R5,0(R5)           R5 = addr of UCM
         USING UCMLIST,R5
         L     R6,UCMXB           R6 = addr of RDCM
         USING DCMTSRT,R6
         LTR   R6,R6              is this a graphics console?
         BP    GRAPHICS           yes
***********************************************************************
*                                                                     *
*       This is not an Operator graphic console - give ERRMSG4        *
*                                                                     *
***********************************************************************
         LA    R5,UCMTAB          R5 = addr of UCMTAB
         MVC   ERROR(26),ERRMSG4  non-graphic console
         B     RESETCN1           reset the console number
***********************************************************************
*                                                                     *
*   This is a graphic console - build trailer line with CONSDATA      *
*                                                                     *
***********************************************************************
GRAPHICS EQU   *
         BAL   R14,CONSDATA       call CONSDATA rtn
         L     R7,DCMADTRN        R7 = addr of TDCM
         USING DCMSTRT,R7
***********************************************************************
*                                                                     *
*    Fillin Operators command input buffer and set VIP flag indicator *
*                                                                     *
***********************************************************************
         MVC   LASTLINE(79),DCMINPUT move in input buffer line
         MVI   MODE+1,C' '        blank out VIP indicator
         CLI   VIPFLG,X'FF'       is the VIP flag on?
         BNE   CHKINTEG           nope
         MVI   MODE+1,C'*'        turn on VIP indicator
***********************************************************************
*                                                                     *
*                         Check Console type                          *
*                                                                     *
***********************************************************************
CHKINTEG MVI   INTEGFLG,X'FF'     turn on 3066 console flag
         CLC   DCMMSGAL(2),=H'30' is this really a 3066 console?
         BE    CHKMODEL           yes; chk if it will fit on our term
         MVI   INTEGFLG,X'00'     no; turn off 3066 console flag
         CLC   DCMMSGAL(2),=H'19' is this 327x-2 type operator console?
         BNE   NOTSUPRT           no;  not supported, so abend
         MVI   FREEZE,C'F'        yes; freeze display
         MVI   PAGE,C'1'               on page 1 of user's CRT
         MVC   TPUTLEN(4),MOD2TPUT set TPUT length for short screen
         B     MOD2               and treat user as mod2 for now
***********************************************************************
*                                                                     *
*        This operator's console is neither a 24-line 327x-2 nor      *
*        a 35-line 3066 270-168 integrated console, so ABEND.         *
*                                                                     *
***********************************************************************
NOTSUPRT LA    R1,ERRMSG6         R1 = addr of string to TPUT
         LA    R0,26              R0 = length of TPUT
         BAL   R14,TERMPUT        Do a TPUT
         ABEND 999                terminal not supported; abend
***********************************************************************
*                                                                     *
*     This is a 35-line 3066 operators console. If the user has a     *
*     43-line 3278-4 there is no problem, the whole thing can be      *
*     displayed at once. However, if the user has a 24-line 327x-2    *
*     we will have to break the display into 2 pages so it will fit.  *
*                                                                     *
***********************************************************************
CHKMODEL CLI   MOD4FLG,X'FF'      is this a 3278-4? (43 lines)
         BNE   MOD2               no - must be a mod2 (24 lines)
***********************************************************************
*                                                                     *
*                  User has a 43-line 3278-4 CRT                      *
*                                                                     *
*        We can just freeze his display on 'page 1' and continue      *
*                                                                     *
***********************************************************************
         MVI   FREEZE,C'F'        freeze display
         MVI   PAGE,C'1'          on page 1 initially
         MVC   TPUTLEN(4),MOD4TPUT set length for full 3278-4 screen
         L     R8,DCMASCRN        R8 = addr of screen buffer + 6
         LA    R4,BUF             R4 = addr of output buffer
         LA    R5,M4BUFLEN        R5 = 3278-4 buffer len (35 lines)
         LA    R9,M4BUFLEN        R9 = 3278-4 buffer len (35 lines)
         B     MOVEBUFF
***********************************************************************
*                                                                     *
*                  User has a 24-line 327x-2 CRT                      *
*                                                                     *
*        This oper console will have to be displayed in two segments  *
*        or 'pages' since 35 lines won't fit in this 24 line tube.    *
*                                                                     *
***********************************************************************
MOD2     CLI   PAGE,C'1'          are we on page 1?
         BNE   ONTWO              no, so we must be on 2
         CLI   FREEZE,C'F'        are we frozen on page 1?
         BNE   PAGE2              no, so display page 2
         B     PAGE1              yes, so display page 1
ONTWO    CLI   FREEZE,C'F'        are we frozen on page 2?
         BE    PAGE2              yes, so display page 2
PAGE1    MVI   PAGE,C'1'          page = 1
         L     R8,DCMASCRN        R8 = addr of screen image buffer + 6
         LA    R4,BUF             R4 = addr of output buffer
         LA    R5,M2BUFLEN        R5 = length of output buf (21 lines)
         LA    R9,M2BUFLEN        R9 = console buffer len   (21 lines)
         B     MVETRAIL           go move the buffer
PAGE2    MVI   PAGE,C'2'          page = 2
         L     R8,DCMASCRN        R8 = addr of screen image buffer + 6
         CLI   MODE,C'2'          are we in display mode 2?
         BE    DMODE2             yes, branch to dmode2
DMODE1   LA    R8,LEN22(R8)       move pointer down 23 lines
         LA    R9,LEN13           R9 = length of last 12 lines
         B     CONTINUE           jump around mode 2 display
DMODE2   LA    R8,LEN9(R8)        move pointer down 9 lines
         LA    R9,LEN21           R9 = length of source buffer
CONTINUE LA    R4,BUF             R4 = addr of output buffer
         LA    R5,M2BUFLEN        R5 = length of output buffer
MVETRAIL MVC   ENDMOD2(TRAILEN),CMDCTRL move in trailer
***********************************************************************
*                                                                     *
*               Move the screen image buffer into BUF                 *
*                                                                     *
***********************************************************************
MOVEBUFF ICM   R9,8,PAD           make blank the pad character
         S     R8,=F'6'           R8 = addr of screen buffer
         MVCL  R4,R8              move console buffer to output buffer
         DROP  R5,R6,R7
         CLI   CRTFLAG,X'FF'      is this a CRT?
         BE    TPUTCRT            yes
         EJECT
***********************************************************************
*                                                                     *
*             User has a line-at-a-time hardcopy terminal             *
*                                                                     *
***********************************************************************
         XR    R8,R8              R8 = counter = 0
         LA    R1,BUF             set pointer to first line of buffer
         ICM   R1,8,EDITFLG       edit mode
         L     R0,=F'78'          R0 length of output line
NEXTL    LR    R3,R1              save R1 since TPUT zaps it
         BAL   R14,TERMPUT        print one line on hardcopy
         LA    R8,1(R8)           add 1 to counter
         C     R8,=F'21'          have we printed last line?
         BE    DOLAST2            yes, continue
         LA    R1,80(R3)          nope, point to next line
         CLI   INTEGFLG,X'FF'     is this an integrated console?
         BE    NOT3270            yes
         MVC   0(5,R1),BLANKS     blank out 3270 ctrl chars
         LA    R1,4(R1)           add 4 extra bytes to skip ctrl chars
NOT3270  L     R0,=F'78'          load length of line
         ICM   R1,8,EDITFLG       edit mode
         B     NEXTL              print next line
DOLAST2  LA    R1,LASTLINE        R1 = addr of string to TPUT
         LA    R0,79              R0 = length of TPUT
         BAL   R14,TERMPUT        Do a TPUT
         LA    R1,HEADING         R1 = addr of string to TPUT
         LA    R0,79              R0 = length of TPUT
         BAL   R14,TERMPUT        Do a TPUT
         LA    R1,USERLINE        R1 = addr of string to TPUT
         LA    R0,79              R0 = length of TPUT
         BAL   R14,TERMPUT        Do a TPUT
         B     CHKWAIT            Go check the wait timer
         EJECT
***********************************************************************
*                                                                     *
*               Display the operator's screen on a 327x               *
*                                                                     *
***********************************************************************
TPUTCRT  LA    R1,CLEAR           R1 = addr of output stream
         L     R0,TPUTLEN         R0 = length of TPUT
         ICM   R1,8,FULLSCR       set ASIS type for TPUT
         BAL   R14,TERMPUT        Do a TPUT; display entire screen
         SPACE 3
***********************************************************************
*                                                                     *
*      If we are in wait mode so a STIMER for the necessary length    *
*      of time, then calculate and display the new timer count.       *
*      If count has hit zero, turn off wait flag.                     *
*                                                                     *
***********************************************************************
CHKWAIT  MVC   ERROR(66),BLANKS   blank out error field
         CLI   WAITFLG,X'FF'      is the wait flag on?
         BNE   READCHAR           no, so go get a command
         STIMER WAIT,BINTVL=DELAY wait for DELAY * .01 seconds
         L     R2,TIMER           R2 = current value of timer
         BCTR  R2,0               timer = timer - 1
         ST    R2,TIMER           store new value of timer
         CVD   R2,WORK            convert to decimal.
         MVC   SCRATCH(4),PATTERN move in edit pattern
         ED    SCRATCH(4),WORK+6  edit in console number
         MVC   TIME(3),SCRATCH+1  move time left into place
         LTR   R2,R2              has timer hit zero?
         BNZ   NEXTPAGE           no, continue to count
         MVC   TIME(3),BLANKS     clear counter field
         XI    WAITFLG,X'FF'      toggle wait flag off
         B     NEXTPAGE           and go on as if nothing happened..
         EJECT
***********************************************************************
*                                                                     *
*                       Read Command from user                        *
*                                                                     *
***********************************************************************
READCHAR MVC   REPLY(79),BLANKS   blank out reply field
         TGET  REPLY,79           get 79 characters from terminal
         CLI   REPLY,X'6E'        reshow code?
         BE    READCHAR           yes; ignore it
***********************************************************************
*                                                                     *
*               Check for System Operator commands                    *
*                                                                     *
***********************************************************************
         CLI   VIPFLG,X'FF'       are we in VIP mode?
         BNE   PARSECMD           no, so continue
OPER     CLI   REPLY,C'/'         is this an OS operator command?
         BNE   JES                no, check for JES cmd
         MVC   OPERCMD(79),REPLY+1 yes; quit and blank out reply field
         MVI   OPERCMD+79,C' '    blank out column 80
         B     DOCMD              branch to COMMAND and SVC34
JES      CLI   REPLY,C'$'         is this a jes command?
         BNE   PARSECMD           no, continue
         MVC   SCRATCH(3),REPLY   save 3 chars of REPLY
         OC    SCRATCH(3),BLANKS  convert to upper case
         CLC   SCRATCH(3),=CL3'$TA' is this a $TA command?
         BE    CMDOKAY              yes; command is okay
         CLC   SCRATCH(2),=CL2'$T'  is this a $TX command?
         BE    CMDRSTR              yes; command is restricted
         CLC   SCRATCH(3),=CL3'$VS' is this a $VS command?
         BNE   CMDOKAY            no;  command is okay
CMDRSTR  MVC   ERROR(26),ERRMSG7  yes; put in error message
         B     NEXTPAGE           and continue on
CMDOKAY  MVC   OPERCMD(80),REPLY  move cmd in from reply field
DOCMD    MVC   REPLY(80),BLANKS   blank out reply field
         LA    R3,OPERCMD+79      R3 = addr of last column
         LA    R1,OPERCMD         R1 = addr of first column
NXTCHAR  CLI   0(R3),C' '         is this a blank?
         BNE   LASTCHAR           no; this is last char in cmd
         BCTR  R3,0               R3 = R3 - 1
         CR    R3,R1              is whole thing blank?
         BL    NEXTPAGE           yes; something wrong, but cont anyway
         B     NXTCHAR            no;  go look at next char
LASTCHAR SR    R3,R1              R3 = R3- R1
         LA    R3,1(R3)           R3 = R3 + 1
         STH   R3,OPERCMDL        save cmd length
         L     R3,SAVEUPT         R3 = addr of UPT
         USING UPT,R3
         NI    UPTSWS,X'FF'-UPTWTP turn off 'wtp'
         MVC   OPERCN(4),CONSOLE  save console ID in COMMAND parms
         LA    R1,OPERPRM         R1 = addr of parmlist for 'command'
         LINK  EP=COMMAND         execute operator command
         OI    UPTSWS,UPTWTP      turn on  'WTP'
         B     NEXTPAGE
***********************************************************************
*                                                                     *
*          Convert command to upper case and call IKJSCAN             *
*                                                                     *
*    This call to IKJSCAN is completely unnecessary to the operation  *
*    of SPY. It is included solely to allow the 'X' feature of        *
*    PCF2 to operate. If you do not have PCF2, this could be removed. *
*                                                                     *
***********************************************************************
PARSECMD OC    REPLY(79),BLANKS   convert chars to upper case
         XC    CBUF+2(2),CBUF+2   clear offset
         MVC   CSPLBLOK(24),CSPLSAVE  copy in CSPL blok
         XC    CSOABLOK(8),CSOABLOK
         L     R2,SAVEJSCB        R2 = addr of our JSCB
         USING IEZJSCB,R2
         NI    JSCBOPTS,X'FF'-JSCBAUTH turn off APF bit to fool PCFSCAN
         LA    R1,CSPLBLOK        R1 = addr of cmd scan parm list
         L     R15,ADDRSCAN       R15 = addr of IKJSCAN
         BALR  R14,R15            invoke IKJSCAN
         OI    JSCBOPTS,JSCBAUTH  turn on APF bit again
         DROP  R2
         LA    R1,CSOABLOK        R1 = addr of cmd scan output area
         USING CSOA,R1
         TM    CSOAFLG,CSOANOC    is the buffer empty?
         BO    NEXTPAGE           yes; just go refresh
         DROP  R1
***********************************************************************
*                                                                     *
*                       W  --  Enter wait mode                        *
*                                                                     *
***********************************************************************
CWAIT    CLI   REPLY,C'W'         do we shift to wait mode?
         BNE   CDELAY             no, so continue
         XI    WAITFLG,X'FF'      turn on wait flag
         LA    R2,30              set default value = 30
         LA    R15,CONVBIN        branch to conversion rtn
         BALR  R14,R15            EBCDIC to binary
         MVC   SCRATCH(4),PATTERN move in edit pattern
         ED    SCRATCH(4),WORK+6  edit in console number
         MVC   TIME(3),SCRATCH+1  move time left into place
         ST    R2,TIMER           store starting timer value
         B     NEXTPAGE           all set - go display next page
***********************************************************************
*                                                                     *
*            D  --  Set timer delay in tenths of a second             *
*                                                                     *
***********************************************************************
CDELAY   CLI   REPLY,C'D'         are we changing the time delay?
         BNE   CCONSOLE           no, so continue
         LA    R2,10              set default value = 10 tenths second
         LA    R15,CONVBIN        branch to conversion rtn
         BALR  R14,R15            EBCDIC to binary
         MVC   SCRATCH(5),DPATTRN move in edit pattern
         ED    SCRATCH(5),WORK+6  edit in delay time
         MVC   PAUSE(3),SCRATCH+2 move time left into place
         MH    R2,=H'10'          convert to 100ths of a second
         ST    R2,DELAY           store wait delay value
         B     NEXTPAGE           all set - go display next page
***********************************************************************
*                                                                     *
*                    C  --  Set console number                        *
*                                                                     *
***********************************************************************
CCONSOLE CLI   REPLY,C'C'         do we change consoles?
         BNE   BYE                no, so continue
         L     R2,CONSOLE         set default console
         ST    R2,OLDCONS         save old console #
         LA    R15,CONVBIN        branch to
         BALR  R14,R15            EBCDIC->binary convertor
         ST    R2,CONSOLE         store R2 away as console number
         B     NEXTPAGE           continue
***********************************************************************
*                                                                     *
*                        B  --  Terminate spy                         *
*                                                                     *
***********************************************************************
BYE      CLI   REPLY,C'B'         is it a 'B'?
         BE    DONE               yes, so quit
***********************************************************************
*                                                                     *
*                        E  --  Terminate spy                         *
*                                                                     *
***********************************************************************
END      CLI   REPLY,C'E'         is it an 'E'?
         BE    DONE               yes, so quit
***********************************************************************
*                                                                     *
*               F  --  Freeze display on current page                 *
*                                                                     *
***********************************************************************
F        CLI   REPLY,C'F'         is it an 'F'?
         BNE   R                  no, so continue on
         MVI   FREEZE,C'F'        turn on freeze indicator
         B     NEXTPAGE           continue
***********************************************************************
*                                                                     *
*           R  --  Release freeze on current page display             *
*                                                                     *
***********************************************************************
R        CLI   REPLY,C'R'         is it an 'R'?
         BNE   MODE1              no, so continue on
         MVI   FREEZE,C'R'        turn off freeze indicator
         B     NEXTPAGE           continue
***********************************************************************
*                                                                     *
*                1  --  Shift to Mode 1 type display                  *
*                                                                     *
***********************************************************************
MODE1    CLI   REPLY,C'1'         do we shift to mode 1 display?
         BNE   MODE2              no, so continue
         MVI   MODE,C'1'          set mode indicator
         B     NEXTPAGE
***********************************************************************
*                                                                     *
*                2  --  Shift to Mode 2 type display                  *
*                                                                     *
***********************************************************************
MODE2    CLI   REPLY,C'2'         do we shift to mode 2 display?
         BNE   GETHELP            no, so continue
         MVI   MODE,C'2'          set mode indicator
         B     NEXTPAGE
***********************************************************************
*                                                                     *
*           ?  --  List help for SPY commands on terminal             *
*                                                                     *
***********************************************************************
GETHELP  CLI   REPLY,C'?'         is he asking for help?
         BNE   GETSTAT            no,so continue
         LA    R1,HELP            R1 = addr of help page
         LA    R0,HLENGTH         R0 = length of help page
         ICM   R1,8,FULLSCR       insert ASIS cntl chars
         BAL   R14,TERMPUT        Do a TPUT; display help
         B     READCHAR
***********************************************************************
*                                                                     *
*           S  --  List Status Page for all defined consoles          *
*                                                                     *
***********************************************************************
GETSTAT  CLI   REPLY,C'S'         is he asking for Status report?
         BNE   SWAPLINK           no; continue
         BAL   R14,CLRBUF         clear buffer
         LH    R10,NUMUCMS        R10 = number of consoles
         LA    R2,UCMTAB+16       R2 = addr of first console entry
         XR    R4,R4              clear R4
         LA    R4,BUF             R4 = addr of TPUT buffer
         LA    R3,23              R3 = number of lines on screen
STLOOP   LR    R1,R2              R1 = addr of UCMTAB entry
         BAL   R14,CONSDATA       call console data routine
         MVC   0(45,R4),CONNUM    save results in buffer
         LA    R4,80(R4)          R4 = addr of next line in buffer
         LA    R2,16(R2)          R2 = addr of next UCMTAB entry
         BCT   R3,NOTFULL         branch if the screen not full
FULL     LA    R1,HEADER          R1 = addr of TPUT buf
         LA    R0,STATLEN         R0 = length of TPUT buf
         ICM   R1,8,FULLSCR       insert ASIS cntl chars
         BAL   R14,TERMPUT        Do a TPUT; display status page
         BAL   R14,CLRBUF         clear buffer
         LA    R4,BUF             R4 = addr of TPUT buffer
         LA    R3,23              R3 = number of lines on screen
         BCT   R10,MORE           more entries?
         B     NEXTPAGE           no; continue
MORE     TGET  REPLY,1            pause for enter
         B     STLOOP             and loop
NOTFULL  BCT   R10,STLOOP         loop if more
         LA    R1,HEADER          R1 = addr of TPUT buf
         LA    R0,STATLEN         R0 = length of TPUT buf
         ICM   R1,8,FULLSCR       insert ASIS cntl chars
         BAL   R14,TERMPUT        Do a TPUT; display status page
         TGET  REPLY,1            pause for enter
         B     NEXTPAGE
***********************************************************************
*                                                                     *
*                    L  --  Link to SWAP program                      *
*                                                                     *
***********************************************************************
SWAPLINK CLI   REPLY,C'L'         should we XCTL to swap?
         BNE   VIP                no, so continue
         CLI   TESTFLAG,X'00'
         BNE   SKPTST5
         MODESET KEY=NZERO        don't need key0 anymore
SKPTST5  EQU   *
         L     R13,SAVE+4         callers save area pointer.
         XCTL  (2,12),EP=SWAP     XCTL to swap
***********************************************************************
*                                                                     *
*                       Check for VIP password                        *
*                                                                     *
***********************************************************************
VIP      CLC   REPLY(3),VIPWORD   was VIP password entered?
         BNE   BADCMD             no, continue
         XI    VIPFLG,X'FF'       toggle VIP flag
         B     NEXTPAGE
***********************************************************************
*                                                                     *
*                      Command was invalid                            *
*                                                                     *
***********************************************************************
BADCMD   MVC   ERROR(26),ERRMSG3  command was invalid
         MVC   ERROR+26(40),REPLY put bad cmd in display line
         B     NEXTPAGE
         EJECT
***********************************************************************
*                                                                     *
*                     All done - Prepare to end                       *
*                                                                     *
***********************************************************************
DONE     CLI   CRTFLAG,X'00'      is this a hardcopy?
         BE    ALLDONE            yes
         TPUT  CLR,CLRLEN,FULLSCR no, lets clear the screen first
         CLI   TESTFLAG,X'00'
         BNE   SKPTST6
         STFSMODE OFF             and turn off fullscreen mode
SKPTST6  EQU   *
ALLDONE  EQU   *
         CLI   TESTFLAG,X'00'
         BNE   SKPTST7
         MODESET KEY=NZERO        go back to nonauth key
SKPTST7  EQU   *
         L     R13,SAVE+4         restore pointer to caller's save area
         LM    R14,R12,12(R13)    restore registers
         LA    R15,0              set RC = 0
         BR    R14                return to system
         EJECT
***********************************************************************
*                                                                     *
*            Convert EBCDIC numbers from user into binary             *
*                                                                     *
***********************************************************************
CONVBIN  CVD   R2,WORK            convert to decimal.
         CLI   REPLY+1,C' '       did he enter a number?
         BE    RTRN               no, use the default
         CLI   REPLY+1,C'0'       is the hex code < 'f0' ?
         BL    BADCHAR            yes, error
         CLI   REPLY+1,C'9'       is the hex code > 'f9' ?
         BH    BADCHAR            yes, error
         PACK  WORK(8),REPLY+1(1) pack EBCDIC (assume 1 digit)
         CLI   REPLY+2,C' '       did he enter 2 digits?
         BE    CVB                no, dont do the 2 digit pack
         CLI   REPLY+2,C'0'       is the hex code < 'f0' ?
         BL    BADCHAR            yes, error
         CLI   REPLY+2,C'9'       is the hex code > 'f9' ?
         BH    BADCHAR            yes, error
         PACK  WORK(8),REPLY+1(2) pack again, with 2 digits this time
CVB      CVB   R2,WORK            get binary
RTRN     BR    R14                return to mainline
BADCHAR  MVC   ERROR(26),ERRMSG2  console number error
         B     RTRN
         SPACE 2
***********************************************************************
*                                                                     *
*                            C L R B U F                              *
*                                                                     *
*               Clear the entire BUF area to hex zeros                *
*                                                                     *
***********************************************************************
CLRBUF   STM   R2,R5,SAVE25       save regs 2 - 5
         LA    R2,BUF             R2 = addr of buffer
         LA    R3,M4BUFLEN        R3 = length of buffer (35 lines)
         LA    R4,BLANKS          R4 = addr of blanks
         LA    R5,1               R5 = length of blank
         ICM   R5,8,BLANKS        setup pad char = X'40'
         MVCL  R2,R4
         LM    R2,R5,SAVE25       restore regs
         BR    R14                return to caller
SAVE25   DS    4F
         SPACE 2
***********************************************************************
*                                                                     *
*                         T E R M P U T                               *
*                                                                     *
*          Do a TPUT to the terminal; R0 and R1 hold parms            *
*                                                                     *
***********************************************************************
TERMPUT  TPUT  (1),(0),R          print one line on hardcopy
         BR    R14                return to caller
         EJECT
***********************************************************************
*                                                                     *
*          Setup and Initialize Parameter list for IKJSCAN            *
*                                                                     *
***********************************************************************
INITSCAN STM   R15,R4,SAVE154     Save regs
         L     R3,CVTPTR          R3 = addr of CVT
         L     R3,0(R3)           R3 = addr of addr of TCB
         L     R3,4(R3)           R3 = addr of TCB
         USING TCB,R3
         ICM   R3,7,TCBJSCBB      R3 = addr of JSCB
         ST    R3,SAVEJSCB        save addr of JSCB
         DROP  R3
         USING IEZJSCB,R3
         L     R4,JSCBPSCB        R4 = addr of PSCB
         DROP  R3
         USING PSCB,R4
         L     R3,PSCBUPT         R3 = addr of UPT
         ST    R3,SAVEUPT         save addr of UPT
         LA    R2,CSPLSAVE        R2 = addr of cmd scan parm list
         USING CSPL,R2
         ST    R3,CSPLUPT         save UPT addr
         L     R3,PSCBRLGB        R3 = addr of relogon buffer
         L     R3,256(R3)         R3 = addr of ECT
         ST    R3,CSPLECT         save ECT addr
         LA    R3,CPECB           R3 = addr of fake ECB for this cp
         ST    R3,CSPLECB         save ECB addr
         LA    R3,FLAGWORD        R3 = addr of CSPL flag word
         ST    R3,CSPLFLG         save flag addr
         LA    R3,CSOABLOK        R3 = addr of cmd scan output area
         ST    R3,CSPLOA          save output area addr
         LA    R3,CBUF            R3 = addr of 'cmd buffer'
         ST    R3,CSPLCBUF        save cbuf addr
         DROP  R2,R4
         LOAD  EP=IKJSCAN
         ST    R0,ADDRSCAN
         LM    R15,R4,SAVE154     restore regs 15 - 4
         BR    R14
         SPACE 2
         DS    0F
SAVE154  DS    6F
         SPACE 1
SAVEUPT  DS    F                   save addr of UPT
SAVEJSCB DS    F                   save addr of JSCB
CSPLBLOK DS    6F                  Cmd Scan Parameter list
CSPLSAVE DS    6F
CPECB    DC    F'0'                fake ECB for this CP
FLAGWORD DC    F'0'
CSOABLOK DS    2F                  Cmd Scan Output area
CBUF     DC    AL2(84),AL2(0)
REPLY    DC    CL80' '             user's command input buffer
ADDRSCAN DS    A
         EJECT
***********************************************************************
*                                                                     *
*                          C O N S D A T A                            *
*                                                                     *
*         Fillin the data line for a given console                    *
*                                                                     *
***********************************************************************
CONSDATA STM   R0,R15,SAVECDAT    save regs
         L     R5,0(R1)           R5 = addr of UCM
         USING UCMLIST,R5
         L     R6,UCMXB           R6 = addr of RDCM
         USING DCMTSRT,R6
         MVC   CONNUM(48),BLANKS   blank out console type field
         XR    R3,R3              clear R3
         ICM   R3,1,UCMID         load the console number
         CVD   R3,WORK            convert to decimal in work
         MVC   SCRATCH(4),PATTERN    move in edit pattern
         ED    SCRATCH(4),WORK+6     edit in console number
         MVC   CONNUM(2),SCRATCH+2   move console number into place
         MVC   LOCATION(12),4(R1) move in console location description
         MVI   SLASH,C'/'
         MVC   STATUS(6),=CL6'Inactv' Set default = 'Inactv'
         TM    UCMATR,UCMUF       is this device active?
         BNO   NOTACT             no
         MVC   STATUS(6),=CL6'Active' Set status = 'Active'
NOTACT   EQU   *
         TM    UCMDISP1,UCMDISPA  is this a master console?
         BNO   AUTH               no
         MVC   STATUS(6),=CL6'Master' yes
AUTH     TM    UCMAUTHA,UCMAUTH1  is this console SYSTEM authorized?
         BNO   AUTH1              no
         MVC   SYS(3),=CL3'SYS '  yes
AUTH1    TM    UCMAUTHA,UCMAUTH2  is it I/O authozrized?
         BNO   AUTH2              no
         MVC   IO(3),=CL3'I/O'    yes
AUTH2    TM    UCMAUTHA,UCMAUTH3  is it CONS authorized?
         BNO   AUTHDONE           no
         MVC   CONS(3),=CL3'CON'  yes
AUTHDONE EQU   *
         LTR   R6,R6              is this a graphics console?
         BP    NOTHARD            yes
         MVC   STATUS(6),=CL6'Hrdcpy'
NOTHARD  EQU   *
         L     R7,UCMUCB          R7 = addr of UCB
         MVC   UNIT(3),13(R7)     move unit addr into line
         L     R5,UCMALTEN        R5 = addr of alternate UCM
         L     R7,UCMUCB          R7 = addr of UCB
         MVC   ALTUNIT(3),13(R7)  move unit addr into line
         SPACE
         LM    R0,R15,SAVECDAT    Restore regs
         BR    R14
         DROP  R5,R6
SAVECDAT DS    16F
         SPACE 2
         DROP  12
         EJECT
***********************************************************************
*                                                                     *
*                          A T T N E X I T                            *
*                                                                     *
*         Trap users attention interrupts and flag for reset          *
*                                                                     *
***********************************************************************
ATTNEXIT LR    R7,R15             establish
         USING ATTNEXIT,R7        addressability.
         MVI   ATTNFLG,X'FF'      set attn flag
         BR    R14                return to caller
         DROP  R7
         EJECT
***********************************************************************
*                                                                     *
*                         C O N S T A N T S                           *
*                                                                     *
***********************************************************************
         DS    0D
WORK     DS    D                   work area for packs
SCRATCH  DS    D                   scratch area for char. manip
OLDCONS  DC    F'1'                previous console number
CONSOLE  DC    F'1'                console to be looked at
TPUTLEN  DC    A(MOD2LEN)          length of mod 2 TPUT
MOD4TPUT DC    A(MOD4LEN)          length of mod4 TPUT
MOD2TPUT DC    A(MOD2LEN)          length of mod2 TPUT
LPSCREEN DC    H'0'                lines per screen
CPLINE   DC    H'0'                characters per line
TIMER    DC    F'30'               seconds left on timer
DELAY    DC    F'100'              delay for 100 hundredths of a second
*
MOD4FLG  DC    X'00'               X'FF' indicates 3278-4 in use
ATTNFLG  DC    X'00'               X'FF' indicates attn was trapped
TESTFLAG DC    X'00'               X'FF' indicates test mode
CRTFLAG  DC    X'FF'               X'FF' indicates CRT in use
WAITFLG  DC    X'00'               X'00' indicates not in wait mode
VIPFLG   DC    X'00'               X'FF' indicates VIP mode
INTEGFLG DC    X'00'               X'FF' indicates 35-line 3066 console
*
FULLSCR  DC    X'03'               TPUT Fulscreen flag
EDITFLG  DC    X'00'               TPUT Edit flag
VIPWORD  DC    C'VIP'              VIP password
NULLS    DC    80X'00'             just nulls
R41C1    DC    X'11F240'           3278-4  --  row 41, col 1
R42C1    DC    X'11F350'           3278-4  --  row 42, col 1
R43C1    DC    X'11F460'           3278-4  --  row 43, col 1
PATTERN  DC    X'40202020'         edit pattern field
DPATTRN  DC    X'4021204B20'       edit pattern field
PAD      DC    C' '                pad character for movebuff mvc
STAXLIST STAX  ATTNEXIT,MF=L       parm list for attention trap
BLANKS   DC    CL80' '
         SPACE 1
         DS    0F
OPERPRM  DC    A(OPERCMDL)         Parmlist for 'COMMAND'
OPERPRM1 DC    XL1'80',AL3(OPERCN) Second parm for 'COMMAND'
OPERCN   DC    F'0'                console authority
OPERCMDL DC    H'0'                command length
OPERCMD  DC    CL80' '             command text
***********************************************************************
*                                                                     *
*               327X Screen clear control characters                  *
*                                                                     *
***********************************************************************
CLR      DC    X'C1'              WCC - clear screen
         DC    X'115D7E'          SBA to row 24, col 80 (FSE 5.0)
         DC    X'114040'          SBA to row 1, col 1
         DC    X'3C404000'        fill screen with nulls
         DC    X'114040'          SBA to row 1, col 1
         DC    X'13'              insert cursor
CLRLEN   EQU   *-CLR
         SPACE 5
***********************************************************************
*                                                                     *
*                  Display screen - header section                    *
*                                                                     *
***********************************************************************
HEADER   EQU   *
CLEAR    DC    X'C1'              WCC
         DC    X'115D7F'          SBA to row 24, col 80 (fse 5.0)
         DC    X'114040'          SBA to row 1, col 1
         DC    X'3C404000'        fill screen with nulls
         DC    X'114040'          SBA to row 1, col 1 just in case
         DC    X'1D60'            attr byte - protected field
***********************************************************************
*                                                                     *
*                 Display Screen Image buffer section                 *
*                                                                     *
***********************************************************************
BUF      DC    21CL84' '          operators screen buffer
         DC    22CL84' '          plus extra for 3278-4
***********************************************************************
*                                                                     *
*               DISPLAY SCREEN - Trailer section                      *
*                                                                     *
***********************************************************************
TRAILER  EQU   *
CMDCTRL  DC    X'115A50'          SBA to row 22, col 1
         DC    X'1DE8'            attr byte - protected, high intensity
LASTLINE DC    CL79' '            operators command input line
PHEADING DC    X'115B60'          SBA to row 23, col 1
         DC    X'1DE8'            attr byte - protected, high intensity
HEADING  DC    CL8'Console '
CONNUM   DC    CL2' 1'            console number
         DC    CL1' '
LOCATION DC    CL12' '
         DC    CL2' '
UNIT     DC    CL3' '
SLASH    DC    CL1'/'
ALTUNIT  DC    CL3' '
         DC    CL2' '
STATUS   DC    CL6' '             master console
         DC    CL2' '
SYS      DC    CL4' '             SYS  authorization
IO       DC    CL4' '             I/O  authorization
CONS     DC    CL3' '             CONS authorization
         DC    CL3' '
TIME     DC    CL3' '             seconds remaining on timer
         DC    CL1'/'
PAUSE    DC    CL3'1.0'           delay in seconds
         DC    CL2' '
HEADING2 DC    CL5'Mode:'
FREEZE   DC    C'F'               freeze/release mode
MODE     DC    CL1'2'             display mode 2/1
         DC    CL1' '
         DC    CL5'Page '
PAGE     DC    CL1'2'             page number
R24C1    DC    X'115CF0'          SBA to row 24, col 1
         DC    X'1D40'            attr byte - unprotected, low intens.
         DC    X'13'              insert cursor
USERLINE DC    CL13' '            users command input line
ERROR    DC    CL66' '            error msg field
ENDTRAIL EQU   *
         SPACE 5
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*                     Error and Warning Messages                      *
*                                                                     *
***********************************************************************
ERRMSG1  DC    CL26'Error - Console undefined '
ERRMSG2  DC    CL26'Error - Non-Numeric value '
ERRMSG3  DC    CL26'Error - Invalid command   '
ERRMSG4  DC    CL26'Error - Non-CRT console   '
ERRMSG5  DC    CL26'Warning - UCM table full  '
ERRMSG6  DC    CL26'Error - Terminal invalid  '
ERRMSG7  DC    CL26'Error - Command Restricted'
         SPACE 5
***********************************************************************
*                                                                     *
*                           User Help page                            *
*                                                                     *
***********************************************************************
HELP     DC    X'C1'               WCC
         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)
         DC    X'114040'           SBA to row 1, col 1
         DC    X'3C404000'         Fill screen with nulls
         DC    X'114040',X'1DE8',C'S P Y   ---   Version 3.1'
         DC    X'11C260',C'Command  Description'
         DC    X'11C3F0'
         DC    X'11C540',C'  B     End SPY'
         DC    X'11C650',C'  C     Switch monitor to console 1'
         DC    X'11C760',C'  CXX   Switch monitor to console XX'
         DC    X'11C8F0',C'  DXX   Set delay to XX tenths seconds'
         DC    X'114A40',C'  E     End SPY'
         DC    X'114B50',C'  F     Freeze display on current page'
         DC    X'114C60',C'  L     Link to SWAP program (if available)'
         DC    X'114DF0',C'  R     Release Display'
         DC    X'114F40',C'  S     Status of all Consoles'
         DC    X'115050',C'  W     Start timer mode for 30 seconds'
         DC    X'11D160',C'  WXX   Start timer mode for XX seconds'
         DC    X'11D2F0',C'  W0    Start timer mode until ATTN'
         DC    X'11D440',C'  ?     Display this page'
         DC    X'11D550',C'  1     Display mode 1 (top 22, bottom 12)'
         DC    X'11D660',C'  2     Display mode 2 (top 22, bottom 22)'
         DC    X'11D7F0'
         DC    X'11D940',C'Hitting INTERRUPT will stop the wait timer'
         DC    X'115A50'
         DC    X'115B60'
         DC    X'115CF0'        Row 24, Col 1
         DC    C'Hit ENTER to continue'
         DC    X'115DC6'        Row 24, Col 23
         DC    X'1D40'
         DC    X'1340'
         DC    X'1DE8'
MARKER1  EQU   *
HLENGTH  EQU   MARKER1-HELP     Length of Help TPUT
         EJECT
***********************************************************************
*                                                                     *
*                            U C M T A B                              *
*                                                                     *
*        The UCMTAB table is built at SPY initialization time.        *
*        One entry is filled in for each console that has been        *
*        IOGENed into the system. The 12 byte description field       *
*        allows you to tag each console with some mnemonic that       *
*        is easier to remember than console numbers. If UCMTAB is     *
*        not defined large enough to hold all the consoles, a         *
*        warning is issued but SPY continues anyway.                  *
*                                                                     *
***********************************************************************
         DS    0F
UCMTABE  DC    A(TABEND)
NUMUCMS  DC    H'0'
         DS    0F
UCMTAB   DC    A(0),CL12' '
         DC    A(0),CL12'CPU C Main  '    Console 1
         DC    A(0),CL12'CPU C C.E.  '    Console 2
         DC    A(0),CL12'CPU A Main  '    Console 3
         DC    A(0),CL12'CPU A C.E.  '    Console 4
         DC    A(0),CL12'CPU B Main  '    Console 5
         DC    A(0),CL12'CPU B C.E.  '    Console 6
         DC    A(0),CL12'MP Librarian'    Console 7
         DC    A(0),CL12'            '    Console 8
         DC    A(0),CL12'            '    Console 9
         DC    A(0),CL12'            '    Console 10
         DC    A(0),CL12'MP NCC Main '    Console 11
         DC    A(0),CL12'            '    Console 12
         DC    A(0),CL12'            '    Console 13
         DC    A(0),CL12'            '    Console 14
         DC    A(0),CL12'MP Tape Cons'    Console 15
         DC    A(0),CL12'            '    Console 16
         DC    A(0),CL12'            '    Console 17
         DC    A(0),CL12'            '    Console 18
         DC    A(0),CL12'MP NCC West '    Console 19
         DC    A(0),CL12'            '    Console 20
         DC    A(0),CL12'            '    Console 21
         DC    A(0),CL12'            '    Console 22
         DC    A(0),CL12'            '    Console 23
         DC    A(0),CL12'            '    Console 24
         DC    A(0),CL12'            '    Console 25
         DC    A(0),CL12'            '    Console 26
         DC    A(0),CL12'UP NCC Main '    Console 27
         DC    A(0),CL12'            '    Console 28
         DC    A(0),CL12'UP NCC West '    Console 29
         DC    A(0),CL12'            '    Console 30
         DC    A(0),CL12'UP NCC Alt  '    Console 31
         DC    A(0),CL12'            '    Console 32
         DC    A(0),CL12'UP Tape Cons'    Console 33
         DC    A(0),CL12'            '    Console 34
         DC    A(0),CL12'UP Print Rm.'    Console 35
         DC    A(0),CL12'            '    Console 36
         DC    A(0),CL12'            '    Console 37
         DC    A(0),CL12'            '    Console 38
         DC    A(0),CL12'            '    Console 39
         DC    A(0),CL12'            '    Console 40
         DC    A(0),CL12'            '    Console 41
         DC    A(0),CL12'            '    Console 42
         DC    A(0),CL12'MP Syslog   '    Console 43
         DC    A(0),CL12'            '    Console 44
         DC    A(0),CL12'            '    Console 45
         DC    A(0),CL12'            '    Console 46
         DC    A(0),CL12'MP SMS      '    Console 47
         DC    A(0),CL12'            '    Console 48
         DC    A(0),CL12'            '    Console 49
         DC    A(0),CL12'            '    Console 50
         DC    A(0),CL12'            '    Console 51
         DC    A(0),CL12'            '    Console 52
         DC    A(0),CL12'MP Tplib Prt'    Console 53
         DC    A(0),CL12'            '    Console 54
         DC    A(0),CL12'            '    Console 55
         DC    A(0),CL12'            '    Console 56
         DC    A(0),CL12'UP Syslog   '    Console 57
         DC    A(0),CL12'            '    Console 58
         DC    A(0),CL12'UP SMS      '    Console 59
         DC    A(0),CL12'            '    Console 60
         DC    A(0),CL12'            '    Console 61
         DC    A(0),CL12'            '    Console 62
         DC    A(0),CL12'            '    Console 63
         DC    A(0),CL12'            '    Console 64
         DC    A(0),CL12'            '    Console 65
         DC    A(0),CL12'            '    Console 66
         DC    A(0),CL12'            '    Console 67
         DC    A(0),CL12'            '    Console 68
         DC    A(0),CL12'            '    Console 69
         DC    A(0),CL12'            '    Console 70
         DC    A(0),CL12'            '    Console 71
         DC    A(0),CL12'            '    Console 72
         DC    A(0),CL12'            '    Console 73
         DC    A(0),CL12'            '    Console 74
         DC    A(0),CL12'            '    Console 75
TABEND   EQU   *
         EJECT
***********************************************************************
*                                                                     *
*                           E Q U A T E S                             *
*                                                                     *
*     Note that a 'line' is defined as 84 bytes; this is because      *
*     DIDOCS builds the operator screen buffer lines as 79 bytes of   *
*     text + 5 control bytes. This consists of an SBA (X'11xxyy')     *
*     and an attribute byte (X'1Dxx').                                *
*                                                                     *
***********************************************************************
LEN9     EQU   9*84               number of bytes in  9 lines
LEN21    EQU   21*84              number of bytes in 21 lines
LEN22    EQU   22*84              number of bytes in 22 lines
LEN13    EQU   13*84              number of bytes in 13 lines
M2BUFLEN EQU   21*84              length of buffer 3278-2
M4BUFLEN EQU   35*84              length of buffer 3278-4
STATLEN  EQU   BUF-CLEAR+80*23    length of 'status' page buffer
HEADLEN  EQU   BUF-HEADER         length of header
TRAILEN  EQU   ENDTRAIL-TRAILER   length of trailer
MOD4LEN  EQU   ENDTRAIL-HEADER    length of TPUT for mod4
MOD2LEN  EQU   MOD4LEN-LEN22      length of TPUT for mod2
ENDMOD2  EQU   BUF+M2BUFLEN       addr of trailer for 3278-2
         PRINT NOGEN
         EJECT
***********************************************************************
*                                                                     *
*                System Control Block Mapping DSECTs                  *
*                                                                     *
*     All macros except for IEERDCM and IEETDCM can be found in       *
*     either 'SYS1.MACLIB' or 'SYS1.AMODGEN'. The two exceptions      *
*     are in 'SYS1.APVTMACS'; they are also distributed with the      *
*     source to 'SPY'.                                                *
*                                                                     *
***********************************************************************
         CVT   DSECT=YES          Communications Vector Table
         SPACE 2
         IEECUCM FORMAT=NEW       Unit Control Module
         SPACE 2
         IEERDCM ,                Resident Display Control Module
         SPACE 2
         IEETDCM ,                Pageable Display Control Module
         SPACE 2
         IEZJSCB ,                Job Step Control Block
         SPACE 2
         IKJCSOA ,                Command Scan Output Area
         SPACE 2
         IKJCSPL ,                Command Scan Parameter List
         SPACE 2
         IKJPSCB ,                Protected Step Control Block
         SPACE 2
         IKJTCB  ,                Task Control Block
         SPACE 2
         IKJUPT  ,                User Profile Table
         SPACE 2
         END   SPY
