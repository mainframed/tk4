*******************************************************************
*                                                                 *
*            D I S C L A I M E R    S E C T I O N                 *
*                                                                 *
*******************************************************************
*                                                                 *
* THE MATERIAL INCLUDED IN THIS LIBRARY HAS BEEN USED SUCCESS-    *
* FULLY AT CITICORP SERVICES INCORPORATED, HOWEVER  NO  WARRANTY  *
* IS MADE TO THE ACCURACY OF THE PROGRAMS OR RELATED MATERIAL AND *
* NO RESPONSIBILITY IS ASSUMED  FOR ANY MODIFICATION  DIRECTLY OR *
* INDIRECTLY  CAUSED BY  THE USE OF THESE MODS.  IT IS THE USER'S *
* RESPONSIBILITY  TO  EVALUATE THE  USEFULLNESS  OF THE  MATERIAL *
* SUPPLIED .                                                      *
*                                                                 *
* WE DO NOT GUARANTEE TO  KEEP ANY  MATERIAL PROVIDED  UP TO DATE *
* NOR DO WE GUARANTEE TO  PROVIDE ANY  CORRECTIONS OR  EXTENSIONS *
* DESCRIBED BY THE USER OR  CORRECTIONS OR EXTENSIONS MADE IN THE *
* FUTURE .                                                        *
*                                                                 *
*******************************************************************
*                                                                 *
* PROGRAM: DATETIME                                               *
*                                                                 *
*     PURPOSE: SUBROUTINE USED BY OTHER PROGRAMS(S) IN THIS FILE  *
*                                                                 *
*******************************************************************
*                                                                 *
* PROGRAM: IFOXXREF                                               *
*                                                                 *
*     PURPOSE: APPEND A MNEMONIC CROSS-REFERENCE TO THE PRINTED   *
*              OUTPUT OF AN ASSEMBLER-XF EXECUTION.               *
*                                                                 *
*     LOGIC: LINK TO THE ASSEMBLER (IFOX00).  IF FOXY'S RETURN-   *
*            CODE WAS ZERO, READ THE SYSPRINT LISTING TABLING     *
*            THE DATA IN ALL VALID OPERATION FIELDS ALONG WITH    *
*            THE LINE NUMBER.  AT END, SORT ASCENDING BY          *
*            MNEMONIC, MODIFY THE (INCORE) JFCB FOR SYSPRINT TO   *
*            "MOD", OPEN SYSPRINT FOR OUTPUT, THEN PRINT THE      *
*            CROSS REFERENCE.                                     *
*                                                                 *
*     NOTES: SYSPRINT MUST BE SOME SORT OF NON-JES DATASET, (VIO  *
*            WORKS NICELY).                                       *
*                                                                 *
*     SAMPLE JCL:                                                 *
*                                                                 *
* ASSEMBLE EXEC PGM=IFOXXREF,REGION=128K,                         *
*          PARM='TEST,MCALL,NOOBJ,DECK,XREF(FULL),RENT'           *
* SYSLIB    DD   DSN=YOUR.FAVORITE.MACROS,DISP=SHR                *
* SYSUT1    DD   DSN=&&SYSUT1,UNIT=VIO50,SPACE=(CYL,(3))          *
* SYSUT2    DD   DSN=&&SYSUT2,UNIT=VIO50,SPACE=(CYL,(3))          *
* SYSUT3    DD   DSN=&&SYSUT3,UNIT=VIO50,SPACE=(CYL,(3))          *
* SYSPRINT  DD   DSN=&&OUTPUT,UNIT=VIO50,                         *
*          SPACE=(CYL,(15)),DISP=(,PASS)                          *
* SYSPUNCH  DD   DSN=FOR.SAFE.KEEPING(MEMBER),DISP=SHR            *
* SYSIN     DD   DSN=YOUR.INFALLIBLE.CODE,DISP=SHR                *
* PRINTOUT EXEC  PGM=IEBGENER                                     *
* SYSUT1    DD   DSN=&&OUTPUT,DISP=(SHR,DELETE)                   *
* SYSUT2    DD   SYSOUT=*                                         *
* SYSIN     DD   DUMMY,DCB=(BLKSIZE=80,BUFNO=1)                   *
* SYSPRINT  DD   SYSOUT=Z                                         *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: LPAXTRCT/LPACOMPR                                      *
*                                                                 *
*     PURPOSE: TO COMPARE INFORMATION IN THE DIRECTORIES OF TWO   *
*              LOAD LIBRARIES.                                    *
*                                                                 *
*     LOGIC: LPAXTRCT GATHERS INFORMATION ABOUT A LOAD LIBRARY    *
*            FROM THE INCORE CONTROL BLOCKS, FORMATS THIS INFO-   *
*            RMATION INTO TWO 256-BYTE RECORDS, WRITES THOSE      *
*            RECORDS TO A DATASET, THEN COPIES THE LOAD LIBRARY   *
*            DIRECTORY IN BACK OF THE TWO CONTROL RECORDS.        *
*            LPACOMPR READS THE FILE CREATED BY LPAXTRCT AND      *
*            GATHERS THE SAME INFORMATION ABOUT THE OTHER LOAD    *
*            LIBRARY, THEN COMPARES THE TWO.  DIFFERENCES ARE     *
*            PRINTED IN AN EASY-TO-READ SIDE-BY-SIDE FORMAT.      *
*            THE DIFFERENCES NOTED ARE MODULE ADDS/DELETES,       *
*            TTR, ATTRIBUTES, AND LENGTH.  SINCE THE PROGRAM      *
*            WAS ORIGINALLY CODED FOR LPALIB COMPARES (YOU        *
*            COULDN'T GUESS FROM THE NAME, COULD YOU?), IT        *
*            ALSO FLAGS SUCH THINGS AS NON-REENTRANT MODULES.     *
*                                                                 *
*     SAMPLE JCL:                                                 *
*                                                                 *
* EXTRACT  EXEC  PGM=LPAXTRCT                                     *
* DIRIN     DD   DSN=SYS1.LPALIB,DISP=SHR,                        *
*          UNIT=3350,VOL=SER=MVSRES                               *
* DIROUT    DD   UNIT=3350,DISP=(,PASS),                          *
*          SPACE=(CYL,1),DSN=&&SYSTEMA                            *
* COMPARE  EXEC  PGM=LPACOMPR                                     *
* NEWLPA    DD   DSN=SYS1.LPALIB,DISP=SHR,                        *
*          UNIT=3350,VOL=SER=IPORES                               *
* OLDLPA    DD  DSN=&&SYSTEMA,DISP=(SHR,DELETE)                   *
* SYSPRINT  DD   SYSOUT=*                                         *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: SALVAGE                                                *
*                                                                 *
*     PURPOSE: TO RECOVER AS MUCH DATA AS POSSIBLE FROM (WHAT     *
*              USED TO BE) A PDS WITH AN LRECL OF 80, AFTER       *
*              CLOBBERING THE DIRECTORY AS WITH:                  *
*              //SYSUT2 DD DSN=GOOD.OLE.PDS  INSTEAD OF:          *
*              //SYSUT2 DD DSN=GOOD.OLE.PDS(MEMBER)               *
*                                                                 *
*                                                                 *
*     LOGIC: SALVAGE READS THE DATASET ONE BLOCK AT A TIME.       *
*            IF THE BLOCK READ WAS A MULTIPLE OF 80 BYTES IN      *
*            LENGTH, IT IS DEBLOCKED AND WRITTEN TO A QSAM PS     *
*            FILE.  AT END-OF-MEMBER (INDICATED BY A ZERO-LENGTH  *
*            RECORD - UNIT EXCEPTION), A DELIMITER IS WRITTEN TO  *
*            THE QSAM PS FILE. THIS DELIMETER IS IN THE FORM OF   *
*            A "./ ADD" IEBUPDTE CONTROL STATEMENT FOR MEMBER     *
*            "MEM#XXXX" WHERE "XXXX" STARTS AT "0001" AND         *
*            CONTINUES TO "9999".                                 *
*                                                                 *
*     NOTES: WORKS ONLY ON 3350'S IN NATIVE MODE.  HAS            *
*            ABSOLUTELY NO RESPECT FOR DS1LSTAR, SO READS         *
*            PAST THE LOGICAL END-OF-FILE.  CAN ALSO BE USED      *
*            ON AN INTACT PDS IN ORDER TO RECLAIM "GAS"           *
*            MEMBERS.                                             *
*                                                                 *
*     SAMPLE JCL:                                                 *
*                                                                 *
* SALVAGE  EXEC  PGM=SALVAGE                                      *
* EXCPDD    DD   DSN=WOE.IS.ME.I.USED.TO.BE.A.PDS,DISP=SHR        *
* QSAMDCB   DD   DSN=IEBUPDTE.FODDER,DISP=SHR                     *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: SWAPDDN  (COMMAND PROCESSOR)                           *
*                                                                 *
*     PURPOSE: TO CHANGE THE DDNAME OF AN ALREADY ALLOCATED       *
*              DATASET WITHOUT HAVING TO FREE AND RE-ALLOCATE     *
*              IT.  GREAT FOR LAZY PEOPLE SUCH AS ME AND/OR       *
*              SLOW SYSTEMS SUCH AS OURS.                         *
*                                                                 *
*     LOGIC: VERY STRAIGHTFORWARD.  COMMAND PARSES THE INPUT      *
*            STRING AND ISOLATES THE OLD AND NEW DDNAMES.  IT     *
*            THEN LOCATES THE TIOT ENTRY THAT CONTAINS THE        *
*            OLD DDNAME, GETS INTO KEY ZERO, AND THEN, WELL ...   *
*                                                                 *
*     NOTES: USE ONLY ON FILES THAT HAVE ARE CLOSED.              *
*            CHANGES THE FIRST OCCURRENCE OF THE OLD DDNAME       *
*            IN THE TIOT.                                         *
*                                                                 *
*     EXAMPLE OF USE:                                             *
*                                                                 *
*   THE COMMAND SET:                                              *
*                                                                 *
* ALLOC F(PDSLIB) DA(THAT.SAME.GOOD.OLE.PDS) SHR                  *
* SWAPDDN PDSLIB/SYSLIB/                                          *
*                                                                 *
*   IS EQUIVALENT TO:                                             *
*                                                                 *
* ALLOC F(PDSLIB) DA(THAT.SAME.GOOD.OLE.PDS) SHR                  *
* FREE F(PDSLIB)                                                  *
* ALLOC F(SYSLIB) DA(THAT.SAME.GOOD.OLE.PDS) SHR                  *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: SYSAFFIN                                               *
*                                                                 *
*     PURPOSE: TO INSURE THAT THE JOB IN WHICH THE PROGRAM        *
*              EXECUTES RUNS ON THE PROPER MACHINE.               *
*                                                                 *
*     LOGIC: SYSAFFIN TAKES A SIX CHARACTER PARM THAT IS THE      *
*            CPU SERIAL NUMBER OF THE MACHINE ON WHICH THE JOB    *
*            IS TO RUN.  IT THEN DOES AN STIDP (STORE CPU-ID),    *
*            AND COMPARES THE CPU SERIAL OF THE PROCESSOR WITH    *
*            THE PARM.  IF THE TWO MATCH, OR IF NO PARM WAS       *
*            SPECIFIED, THE PROGRAM ENDS (ALLOWING THE JOB TO     *
*            CONTINUE).  OTHERWISE, THE PROGRAM SCANS A TABLE     *
*            OF VALID CPU-IDS, SEARCHING FOR THE ONE THAT WAS     *
*            CODED ON THE PARM.  IF IT IS NOT FOUND, AN ABEND     *
*            U0311 IS ISSUED (WITH STEP, SO DON'T PLAY AROUND     *
*            WITH IT ON TSO!).  IF A MATCH IS FOUND, THE          *
*            PROPER JES2 SYSTEM-ID IS TAKEN FROM THE TABLE        *
*            AND THE FOLLOWING STRING OF JES2 COMMANDS IS         *
*            CONSTRUCTED AND EXECUTED:                            *
*            $HJXXXX;CJXXXX;TJXXXX,S=SSSS;EJXXXX;AJXXXX           *
*            (HERE XXXX IS THE 1-4 DIGIT JOB NUMBER AND           *
*            SSSS IS THE CORRECT JES2 SYSTEM-ID)                  *
*                                                                 *
*     NOTES: SEE NOTES AND CAUTIONS IN THE CODE.  WILL NOT        *
*            ASSEMBLE UNLESS YOU UPDATE THE CPUID/SYSID TABLE.    *
*                                                                 *
*     SAMPLE JCL:                                                 *
*                                                                 *
* SYSAFFIN EXEC  PGM=SYSAFFIN,PARM=XXXXXX  (XXXXXX=CPU SERIAL #)  *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: WAIT4END                                               *
*                                                                 *
*     PURPOSE: TO TEMPORARILY HALT THE PROGRESS OF A JOB OR       *
*              USER UNTIL A PARTICULIAR JOB TERMINATES.           *
*                                                                 *
*     LOGIC: THIS IS A CANNIBALIZED VERSION OF THE "IFENDED"      *
*            TSO COMMAND THAT RUNS IN BATCH OR AS A CALLED        *
*            PROGRAM.  IT TAKES A PARM OF THE NAME OF THE JOB     *
*            FOR WHICH IT IS TO WAIT.  IT TIMER-POPS EVERY 10     *
*            SECONDS AND CHECKS TO SEE IF THE JOB IS RUNNING.     *
*            IF IT IS NOT, THE PROGRAM ENDS, AND THE JOB (OR      *
*            USER) CONTINUES.                                     *
*                                                                 *
*     SAMPLE JCL:                                                 *
*                                                                 *
* WAIT4END EXEC  PGM=WAIT4END,PARM=CICS                           *
*                                                                 *
*     EXAMPLE OF USE FROM TSO (USUALLY IN A CLIST):               *
*                                                                 *
* CALL 'YOUR.INFALLIBLE.LOADLIB(WAIT4END)' 'CICS'                 *
*                                                                 *
*******************************************************************
*******************************************************************
*                                                                 *
* PROGRAM: PW1MATCH/PW2MATCH                                      *
*                                                                 *
*     PURPOSE:  TO REPORT ON THE TIMELINESS WITH WHICH OS         *
*               PASSWORD PROMPTS ARE ANSWERED BY OPERATORS.       *
*                                                                 *
*     LOGIC:  PW1MATCH READS A TAPE OR DISK VERSION OF THE        *
*             SYSLOG, AND STRIPS OFF ALL PASSWORD PROMPTS         *
*             (IEC301A MESSAGES), AND THEIR CORRESPONDING         *
*             REPLIES.  THE PROMPTS ARE WRITTEN TO THE            *
*             FILE WITH THE DDNAME "PROMPTS", AND THE             *
*             REPLIES ARE WRITTEN TO THE FILE WITH THE            *
*             DDNAME "REPLIES".  THESE TWO FILES ARE THEN         *
*             SORTED (INDEPENDENTLY) BY REPLY-ID IN STEPS         *
*             "SORTPROM" AND "SORTREPL".  (THE SORT USES          *
*             THE SYNCSORT OPTION "EQUALS" TO KEEP RECORDS        *
*             WITH EQUAL SORT CRITERIA IN THE SAME ORDER          *
*             THAT THEY WERE IN THE INPUT FILES).  THE            *
*             RECORDS IN THESE SORTED FILES ARE THEN              *
*             MATCHED BY REPLY-ID AND THE DATA MERGED INTO        *
*             ONE RECORD WHICH IS WRITTEN TO THE FILE WITH        *
*             THE DDNAME "MERGED".  THE FINAL STEP OF THE         *
*             JOB PRINTS A REPORT THAT DETAILS THE TIME           *
*             SPENT WAITING FOR REPLIES TO PASSWORD PROMPTS.      *
*                                                                 *
*     NOTES: REPORT STEP REQUIRES THE "SAS" PRODUCT (FROM         *
*            THE SAS INSTITUTE).  IF YOU DO NOT HAVE SAS,         *
*            IT SHOULD BE VERY EASY TO WRITE THE REPORT           *
*            PROGRAM IN THE LANGUAGE OF YOUR CHOICE.  AN          *
*            AN ALTERNATIVE TO USING SYNCSORT'S "EQUALS"          *
*            OPTION WOULD BE TO MODIFY PW1MATCH TO ADD A          *
*            SEQUENCE NUMBER TO EACH RECORD AS IT IS              *
*            PRODUCED, THEN USE THIS AS A SECONDARY SORT          *
*            FIELD.                                               *
*                                                                 *
*     SAMPLE JCL:  SEE THE MEMBER PWRPTJCL.  NOTE: THIS           *
*                  MEMBER CONTAINS ALL NECESSARY CONTROL          *
*                  STATEMENTS IN ADDITION TO THE JCL.             *
*                                                                 *
*******************************************************************
*                 $SAVE..........USER MACRO                       *
*                 FUDGEIT........USER MACRO                       *
*                 HEX............USER MACRO                       *
*                 IEFRELSE.......USER MACRO                       *
*                 IEFSAVER.......USER MACRO                       *
*                 REGS...........USER MACRO                       *
*                 SCANTIOT.......USER MACRO                       *
*                 VDATETIM.......USER MACRO                       *
*******************************************************************
