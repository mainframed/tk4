         MACRO
&LABEL   EPILOGUE  &COMMENT,&SAVE=4(13),&RETURN=NONE,&RC=,             X
               &TRACE=NO,&ID=*,&LEVEL=UP
.**********************************************************************
.*                                                                    *
.*       THE EPILOGUE MACRO GENERATES A STANDARD CODING SEQUENCE FOR  *
.*       RETURNING FROM A SUBROUTINE.  WHEN USED TO FULL CAPABILITY,  *
.*       IT WILL SET UP REGISTER 13, RETURN SPECIFIED REGISTERS       *
.*       INTACT TO THE CALLING PROGRAM, RESTORE THE OTHERS FROM THE   *
.*       SAVE AREA, LOAD REGISTER 15 WITH A SPECIFIED RETURN CODE,    *
.*       AND BRANCH ON REGITSER 14 TO RETURN.                         *
.*                                                                    *
.*       &COMMENT             THE POSITIONAL OPERAND &COMMENT INSURES *
.*                            THAT THE USE OF EPILOGUE IN THE FORM -- *
.*                                                                    *
.*                            LABEL EPILOGUE ERROR-GENERATING-COMMENT *
.*                                                                    *
.*                            DOES NOT GENERATE INVALID KEYWORD       *
.*                            ASSEMBLY ERRORS.                        *
.*                                                                    *
.*       &SAVE=4(13)          OR FREEMAIN OR NONE.                    *
.*                                                                    *
.*                            IF 4(13), EPILOGUE GENERATES            *
.*                                                                    *
.*                                      L    13,4(13)                 *
.*                                                                    *
.*                            TO LOAD REGISTER 13 FROM WORD 2 OF THE  *
.*                            SAVE AREA IN THE SUBROUTINE, WHICH      *
.*                            REGISTER 13 CURRENTLY POINTS TO.        *
.*                            AREA IN THE CALLING PROGRAM.            *
.*                                                                    *
.*                            IF NONE, EPILOGUE ASSUMES THAT          *
.*                            REGISTER 13 ALREADY CONTAINS THE        *
.*                            ADDRESS OF THE SAVE AREA IN THE CALLING *
.*                            PROGRAM.  THIS WOULD BE THE CASE, FOR   *
.*                            EXAMPLE, IF THE SUBROUTINE DID NOT HAVE *
.*                            A SAVE AREA.                            *
.*                                                                    *
.*                            IF FREEMAIN, &SAVE MAY HAVE TWO FORMS   *
.*                            SAVE=FREEMAIN, OR                       *
.*                            SAVE=(FREEMAIN,LENGTH,NOCHECK)          *
.*                            WHERE LENGTH OR THE WORD 'NOCHECK' MAY  *
.*                            OPTIONALLY BE OMITTED.                  *
.*                            IF LENGTH IS A NUMBER OR A SYMBOL, IT   *
.*                            IS ASSUMED TO BE THE SAVE AREA LENGTH   *
.*                            IN BYTES.                               *
.*                            LENGTH MAY ALSO BE A NUMBER IMMEDIATELY *
.*                            FOLLOWED (WITH NO INTERVENING BLANKS) BY*
.*                            ONE OF THE LETTERS D,F,H,C, OR X,       *
.*                            SIGNIFYING DOUBLEWORDS, FULLWORDS,      *
.*                            HALFWORDS, OR BYTES RESPECTIVELY.       *
.*                            SYMBOLIC LENGTHS MUST NOT END IN D, F,  *
.*                            H, C, OR X.                             *
.*                            SYMBOLIC LENGTHS MAY NOT EXCEED         *
.*                            EIGHT CHARACTERS.                       *
.*                            IF LENGTH IS OMITTED, THEN &SGBYTES IS  *
.*                            ASSUMED, WHERE &SGBYTES IS A GLOBAL     *
.*                            CHARACTER SYMBOLIC VARIABLE SET BY THE  *
.*                            PROLOGUE MACRO WHEN INVOKED WITH        *
.*                            SAVE=GETMAIN.  IF &SGBYTES HAS NOT      *
.*                            BEEN SET, 18F IS ASSUMED.               *
.*                            EPILOGUE RESETS &SGBYTES TO NULL IF     *
.*                            SAVE=FREEMAIN.                          *
.*                            NORMALLY, UNLESS THE WORD 'NOCHECK' IS  *
.*                            INCLUDED AS THE THIRD POSITIONAL SUB-   *
.*                            PARAMETER OF &SAVE, CODE IS GENERATED   *
.*                            TO TEST FOR A 'G' INTO THE HIGH ORDER   *
.*                            BYTE OF THE FORWARD CHAIN ADDRESS       *
.*                            (WORD 2) OF THE SAVE AREA, WHICH WOULD  *
.*                            INDICATE THAT THE SAVE AREA HAD BEEN    *
.*                            OBTAINED BY PROLOGUE WITH SAVE=GETMAIN. *
.*                            IF THE 'G' IS NOT FOUND, THE FREEMAIN   *
.*                            SVC IS BRANCHED AROUND AND NOT ISSUED.  *
.*                            IF EPILOGUE IS USED IN THE FORM         *
.*                                                                    *
.*                                  EPILOGUE SAVE=(FREEMAIN,,NOCHECK) *
.*                                                                    *
.*                            THEN EPILOGUE WILL NOT GENERATE CODE TO *
.*                            CHECK FOR A 'G' AND WILL ALWAYS DO THE  *
.*                            FREEMAIN.  THE NOMARK FORM OF PROLOGUE  *
.*                            AND THE NOCHECK FORM OF EPILOGUE SHOULD *
.*                            ONLY BE USED IN CASES WHERE THE         *
.*                            PROGRAMMER IS SURE THAT THE NUMBER OF   *
.*                            GETMAINS AND FREEMAINS WILL BE THE SAME.*
.*                                                                    *
.*                            IF NONE OF THESE, NONE IS ASSUMED, BUT  *
.*                            AN ERROR COMMENT IS GENERATED.          *
.*                                                                    *
.*       &RETURN=NONE         OR ALL OR ALLBUT14 OR A LIST OF         *
.*                            REGISTERS TO BE RETURNED INTACT TO THE  *
.*                            CALLING PROGRAM, IN OTHER WORDS,        *
.*                            NOT DESTROYED WHEN THE REGISTERS        *
.*                            ARE RESTORED TO THEIR ORIGINAL CONDITION*
.*                            UPON ENTRY TO THE SUBROUTINE.           *
.*                                                                    *
.*                            IF NONE, EPILOGUE GENERATES             *
.*                                                                    *
.*                                      LM   14,12,12(13)             *
.*                                      LA   15,&RC.(0,0) IF NECESSARY*
.*                                      BR   14                       *
.*                                                                    *
.*                            TO RESTORE THE REGISTERS, SET UP A      *
.*                            RETURN CODE, IF NECESSARY TO, AND       *
.*                            RETURN TO THE CALLING PROGRAM.          *
.*                                                                    *
.*                            IF ALL, EPILOGUE GENERATES              *
.*                                                                    *
.*                                      LA   15,&RC.(0,0) IF NECESSARY*
.*                                      BR   14                       *
.*                                                                    *
.*                            TO SET UP A RETURN CODE, IF NECESSARY   *
.*                            TO, AND RETURN TO THE CALLING PROGRAM.  *
.*                                                                    *
.*                            IF ALLBUT14, EPILOGUE GENERATES         *
.*                                                                    *
.*                                      LA   15,&RC.(0,0) IF NECESSARY*
.*                                      L    14,12(13)                *
.*                                      BR   14                       *
.*                                                                    *
.*                            TO SET UP A RETURN CODE, IF NECESSARY   *
.*                            TO, SET UP REGISTER 14 FROM THE SAVE    *
.*                            AREA IN THE CALLING PROGRAM, AND RETURN.*
.*                                                                    *
.*                            IF NEITHER NONE, ALL, OR ALLBUT14,      *
.*                            EPILOGUE GENERATES CODE WHICH WILL LOAD *
.*                            FROM THE SAVE AREA ONLY THOSE REGISTERS *
.*                            WHICH ARE NOT ON THE RETURN LIST.       *
.*                            IN OTHER WORDS, THE REGISTERS SPECIFIED *
.*                            IN THE RETURN LIST ARE RETURNED INTACT  *
.*                            TO THE CALLING PROGRAM.                 *
.*                                                                    *
.*                            A MULTI-ELEMENT RETURN LIST CONSISTS OF *
.*                            AN OPENING PARENTHESIS, FOLLOWED BY THE *
.*                            ELEMENTS OF THE LIST SEPARATED BY       *
.*                            COMMAS, FOLLOWED BY A CLOSING           *
.*                            PARENTHESIS.                            *
.*                                                                    *
.*                            AN ELEMENT OF THE RETURN LIST IS EITHER *
.*                            A NUMBER, FOR EXAMPLE, 10, OR ELSE THE  *
.*                            LETTER R FOLLOWED BY A NUMBER, FOR      *
.*                            EXAMPLE, R5.  THE TWO FORMS MAY BE      *
.*                            MIXED, FOR EXAMPLE, RETURN=(0,R3,2,R1)  *
.*                                                                    *
.*                            FOR A SINGLE ELEMENT RETURN LIST, THE   *
.*                            PARENTHESES MAY OPTIONALLY BE OMITTED,  *
.*                            FOR EXAMPLE, RETURN=R5 AND RETURN=(R5)  *
.*                            ARE BOTH VALID.                         *
.*                                                                    *
.*                            NULL AND DUPLICATE ELEMENTS IN THE      *
.*                            RETURN LIST, FOR EXAMPLE, RETURN=(5,,R5)*
.*                            HAVE NO EFFECT ON THE GENERATED CODE.   *
.*                                                                    *
.*                            REQUESTS TO RETURN REGISTERS NUMERICALLY*
.*                            LESS THAN 0 OR GREATER THAN 15 ARE      *
.*                            IGNORED AND AN ERROR COMMENT IS         *
.*                            GENERATED.                              *
.*                                                                    *
.*                            REQUESTS TO RETURN REGISTER 13 ARE      *
.*                            IGNORED AND AN ERROR COMMENT IS         *
.*                            GENERATED.                              *
.*                                                                    *
.*                            EPILOGUE GENERATES EFFICIENT CODE IN    *
.*                            THE SENSE THAT IT WILL GENERATE LOAD    *
.*                            MULTIPLE INSTRUCTIONS RATHER THAN       *
.*                            REPEATED LOADS WHENEVER POSSIBLE.       *
.*                                                                    *
.*       &TRACE=NO            OR YES.                                 *
.*                                                                    *
.*                            IF NO, NO TRACE CODE IS GENERATED.      *
.*                                                                    *
.*                            IF YES, A WRITE TO OPERATOR SVC IS      *
.*                            GENERATED WHOSE MESSAGE IS DETERMINED   *
.*                            BY &ID, THAT IS, IF ID=*, THEN THE      *
.*                            MESSAGE TEXT IS &LABEL UNLESS &LABEL IS *
.*                            NULL, IN WHICH CASE THE MESSAGE TEXT IS *
.*                            &SYSECT, THE CURRENT CSECT NAME, UNLESS *
.*                            &SYSECT IS NULL, IN WHICH CASE THE      *
.*                            MESSAGE TEXT IS 'ID ERROR'.             *
.*                            IF &ID IS NOT '*', THEN &ID ITSELF      *
.*                            IS THE MESSAGE TEXT, UP TO THE          *
.*                            FIRST 126 CHARACTERS, THE MAXIMUM LINE  *
.*                            LENGTH ON THE OPERATOR'S CONSOLE.       *
.*                                                                    *
.*                            IF THE BINARY GLOBAL &ETRACE IS SET TO  *
.*                            1, THEN TRACE=NO IS SUPERSEDED AND      *
.*                            CODE IS GENERATED AS IF TRACE=YES.      *
.*                                                                    *
.*                            IF NEITHER YES OR NO, YES IS ASSUMED,   *
.*                            BUT AN ERROR COMMENT IS GENERATED.      *
.*                                                                    *
.*       &ID=*                OR SYMBOL.  TRACE MESSAGE.              *
.*                                                                    *
.*       &LEVEL=UP            OR SAME.  IF UP, A HEX 'FF' IS MOVED    *
.*                            INTO THE HIGH ORDER BYTE OF WORD 4      *
.*                            (THE SLOT FOR REGISTER 14) OF THE       *
.*                            SAVE AREA.  THIS INDICATES TO IABEN     *
.*                            THAT THE SUBROUTINE HAS ALREADY         *
.*                            RETURNED AND ENDS THE SAVE AREA CHAIN.  *
.*                            IF SAME, NO HEX 'FF' IS MOVED INTO THE  *
.*                            SAVE AREA.                              *
.*                            IF NONE OF THESE, SAME IS ASSUMED, BUT  *
.*                            AN ERROR COMMENT IS GENERATED.          *
.*                                                                    *
.*       &RC=                 OR A NUMBER BETWEEN 0 AND 4095 INCLUSIVE*
.*                            OR A SYMBOL WHICH IS EQUATED TO A NUMBER*
.*                            BETWEEN 0 AND 4095 INCLUSIVE.           *
.*                            RETURN CODE TO BE PLACED IN REGISTER 15 *
.*                            BEFORE RETURNING TO THE CALLING PROGRAM.*
.*                            RC=N OVERRIDES THE FACT THAT 15 MAY     *
.*                            HAVE BEEN INCLUDED IN THE RETURN LIST.  *
.*                            IF &RC AND RETURN=(15) ARE BOTH         *
.*                            SPECIFIED, A COMMENT IS GENERATED TO    *
.*                            THE EFFECT THAT THE RETURN CODE (&RC)   *
.*                            TAKES PRECEDENCE.                       *
.*                                                                    *
.**********************************************************************
         GBLB  &ETRACE        IF SET, OVERRIDES TRACE=NO, CAUSING TRACE
         GBLB  &NLE4095       SET IF &SBYTES IS KNOWN TO BE LE 4096
         GBLC  &SGBYTES       GETMAIN SAVE AREA LENGTH -- FOR FREEMAIN
         LCLA  &#RETOPS       NUMBER OF SUB-OPERANDS OF &RETURN.
         LCLA  &I             TEMPORARY NUMERIC VARIABLE
         LCLA  &RN            MEMBER OF RETURN LIST -- NUMERIC.
         LCLC  &RSYMBOL       MEMBER OF RETURN LIST -- R + NUMERIC.
         LCLB  &RSW(17)       RECORD OF REGISTERS TO BE RETURNED
         LCLA  &RSERR         NUMBER OF INVALID REGISTER SPECIFICATIONS
         LCLB  &R15RET        SET IF R15 IS IN THE RETURN LIST
         LCLB  &RCLIT         SET IF &RC IS NOT NULL OR A REGISTER
         LCLA  &OFFSET        OFFSET TO SLOT IN SAVE AREA FOR &RLOW
         LCLA  &RLOW          FIRST OPERAND OF STORE INSTRUCTION
         LCLC  &OP2           SECOND OPERAND OF STM.
         LCLC  &M             M OF STM.
         LCLC  &S             SET TO 'S' FOR PLURAL IN ERROR MESSAGE
         LCLB  &NEWSPAN       SET AT THE BEGINNING OF EVERY
.*                            DISCONNECTED SET OF REGISTERS
         LCLA  &#IDCHRS       NUMBER OF CHRS IN &ID OR &IDSTAR
         LCLC  &IDSTAR        IF ID=* THEN LABEL UNLESS '' THEN &SYSECT
         LCLB  &SVCUSED       SET IF AN SVC IS USED IN PROGRAM
         LCLC  &SNUMBER       NUMERIC PART OF LENGTH
         LCLC  &SUNIT         UNIT    PART OF LENGTH
         LCLC  &MULT          NUMERIC EQUIVALENT OF &SUNIT
         LCLC  &SBYTES        NUMBER OF BYTES IN SAVE AREA -- SYMBOLIC
         SPACE 3
***********************************************************************
*        EPILOGUE GENERATES A STANDARD RETURN FROM A SUBROUTINE.      *
***********************************************************************
.*
.*
.*
.**********************************************************************
.*                                                                    *
.*       SET UP &#IDCHRS AND &IDSTAR                                  *
.*                                                                    *
.**********************************************************************
         AIF   ('&TRACE' EQ 'NO' AND NOT &ETRACE).KIDOK
&SVCUSED SETB  1
&#IDCHRS SETA  1
         AIF   ('&ID' NE '*').ID
         AIF   ('&LABEL' EQ '').USECS
&IDSTAR  SETC  '&LABEL'
         AGO   .GETKID
.USECS   AIF   ('&SYSECT' EQ '').IDERR
&IDSTAR  SETC  '&SYSECT'
         AGO   .GETKID
.IDERR   ANOP
&IDSTAR  SETC  'ID ERROR'
.GETKID  AIF   ('&IDSTAR'(1,&#IDCHRS) EQ '&IDSTAR').KIDOK
&#IDCHRS SETA  &#IDCHRS+1
         AGO   .GETKID
.ID      ANOP
&#IDCHRS SETA  K'&ID
.KIDOK   ANOP
.**********************************************************************
.*                                                                    *
.*       SET UP &SAVE SUB-PARAMETERS                                  *
.*                                                                    *
.**********************************************************************
         AIF   ('&SAVE(1)' NE 'FREEMAIN').SPARMOK
&SVCUSED SETB  1
&SBYTES  SETC   '&SAVE(2)'    GET SAVE AREA LENGTH
         AIF   ('&SBYTES' EQ '').DEFAULT
         AIF   (T'&SAVE(2) EQ 'N').BYTES  IF NUMERIC, ASSUME BYTES
&I       SETA  K'&SAVE(2)     GET NUMBER OF CHARACTERS IN LENGTH
&SNUMBER SETC  '&SBYTES'(1,&I-1)        GET PURE NUMERIC PART OF LENGTH
&SUNIT   SETC  '&SBYTES'(&I,1)          GET UNIT CHARACTER -- D,F,H,C,X
&I       SETA  1
.GETUNIT AIF   ('&SUNIT' EQ 'DFHCX'(&I,1)).MULT
&I       SETA  &I+1
         AIF   (&I LE 5).GETUNIT ELSE MUST BE SYMBOLIC SAVE AREA LENGTH
&SNUMBER SETC  '&SAVE(2)'     MUST BE SYMBOLIC
.BYTES   AGO   .LOK
.MULT    ANOP
&MULT    SETC  '84211'(&I,1)  GET MULTIPLIER CORRESPONDING TO UNIT
&I       SETA  &SNUMBER*&MULT
&NLE4095 SETB  (&I LE 4095)
&SBYTES  SETC  '&I'
         AGO   .LOK
.DEFAULT ANOP
         AIF   ('&SGBYTES' EQ '').SA18F
&SBYTES  SETC  '&SGBYTES'
         AGO   .LOK
.SA18F   ANOP
&SBYTES  SETC  '72'
&NLE4095 SETB  1
.LOK     ANOP
.SPARMOK ANOP
         AIF   ('&RC' EQ '').RCLITOK
&RCLIT   SETB  ('&RC'(1,1) NE '(' AND '&RC'(K'&RC,1) NE ')')
.RCLITOK ANOP
.**********************************************************************
.*                                                                    *
.*       SET UP R13                                                   *
.*                                                                    *
.**********************************************************************
&LABEL   DS    0H
         AIF   ('&SAVE'    EQ    '4(13)').LOADR13
         AIF   ('&SAVE(1)' EQ 'FREEMAIN').LOADR13
*        R13 CONTAINS ADDRESS OF CALLER'S SAVE AREA.
         AGO   .R13OK
.LOADR13 L     13,4(13) !      LOAD REGISTER 13 WITH ADDRESS
*                              CALLER'S SAVE AREA
.R13OK   ANOP
.**********************************************************************
.*                                                                    *
.*       SEE IF ANY REGISTERS ARE TO BE RETURNED.                     *
.*                                                                    *
.**********************************************************************
         AIF   ('&RETURN' EQ     'NONE').RETNONE
         AIF   ('&RETURN' EQ      'ALL').RETALL
         AIF   ('&RETURN' EQ 'ALLBUT14').RETAB14
.**********************************************************************
.*                                                                    *
.*       GET REGISTERS SPECIFIED BY &RETURN                           *
.*                                                                    *
.**********************************************************************
&#RETOPS SETA  N'&RETURN     GET LOOP LIMIT
.RLOOP   AIF   (&I GE &#RETOPS).RSWOK   IF COUNTER GE LOOP LIMIT, EXIT
&I       SETA  &I+1          INCREMENT COUNTER
&RSYMBOL SETC  '&RETURN(&I)'            GET ITH ELEMENT OF RETURN LIST
         AIF   ('&RSYMBOL' EQ '').RLOOP SKIP IF NULL
         AIF   (T'&RETURN(&I) EQ 'N').CHKSIZE  IF NUMERIC, CHECK SIZE.
         AIF   ('&RSYMBOL'(1,1) NE 'R').RSERR  IF NOT NUMERIC, MUST BE
.*       R + NUMERIC.  IF FIRST CHARACTER IS NOT R, MUST BE ERROR.
&RSYMBOL SETC  '&RSYMBOL'(2,K'&RETURN(&I)) STRIP OFF INITIAL R.
.CHKSIZE AIF   ('&RSYMBOL'(1,1) EQ '-' OR '&RSYMBOL' GE '16').RSERR
&RN      SETA  &RSYMBOL      GET NUMERIC REGISTER TO BE RETURNED.
         AIF   (&RN LT 0 OR &RN GE 16).RSERR
&RN      SETA  4+&RN-16*(&RN/13)       GET SUBSCRIPT FOR &RSW ARRAY
.*
.*       &RSW(1)  CORRESPONDS TO R13
.*       &RSW(2)  CORRESPONDS TO R14
.*       &RSW(3)  CORRESPONDS TO R15
.*       &RSW(4)  CORRESPONDS TO R0
.*       &RSW(5)  CORRESPONDS TO R1
.*        ...                   ...
.*       &RSW(16) CORRESPONDS TO R12
.*       &RSW(17) FORCES GENERATION OF A STORE INSTRUCTION FOR ANY SPAN
.*       ENDING IN R12.
.*
&RSW(&RN) SETB 1
         AGO   .RLOOP
.RSERR   ANOP
&RSERR   SETA  &RSERR+1
         AGO   .RLOOP
.RSWOK   ANOP
.**********************************************************************
.*                                                                    *
.*       OPTIMIZE REGISTER 15                                         *
.*                                                                    *
.**********************************************************************
&R15RET  SETB  (&RSW(3))      SET IF R15 IS IN RETURN LIST
.*       ON MEANS LEAVE THE REGISTER ALONE.
.*       OFF MEANS LOAD THE REGISTER FROM THE SAVE AREA.
&RSW(3)  SETB  ((NOT &RCLIT) AND        &RSW(3)             OR         X
               &RCLIT        AND (&RSW(2) OR &RSW(4))   )
.*       IF THERE IS NO CONDITION CODE, LEAVE THE STATUS OF R15 AS IS.
.*       IF THERE IS A CONDITION CODE, LOAD R15 IF R14 AND R0 ARE ALSO
.*       TO BE LOADED, ELSE DO NOT LOAD R15.
.**********************************************************************
.*                                                                    *
.*       SEE IF RETURN CODE IS A REGISTER                             *
.*                                                                    *
.**********************************************************************
         AIF   (&RCLIT OR '&RC' EQ '').RCREGOK
&RSW(3)  SETB  1              SET &RSW(3) TO LEAVE REGISTER 15 ALONE
&RSYMBOL SETC  '&RC(1)'
         AIF   ('&RC' EQ '(15)' OR '&RC' EQ '(R15)').RCREGOK
         LR    15,&RSYMBOL !         LOAD RETURN CODE INTO REGISTER 15
.RCREGOK ANOP
.**********************************************************************
.*                                                                    *
.*       GENERATE LOAD INSTRUCTIONS FOR &RSW(&I)=0                    *
.*                                                                    *
.**********************************************************************
&RSW(17) SETB  1
.*     SET &RSW(17) TO FORCE GENERATION OF LOAD FOR SPAN ENDING IN R12.
&I       SETA  1              INITIALIZE LOOP COUNTER
.*       START AT 1 TO SKIP RSW(1) WHICH CORRESPONDS TO R13.
.RESET   ANOP
&NEWSPAN SETB  1
&M       SETC  ''
&OP2     SETC  ''
.LLOOP   AIF   (&I GE 17).RETOK
&I       SETA  &I+1           INCREMENT LOOP COUNTER
         AIF   (NOT &NEWSPAN AND NOT &RSW(&I)).SETRHI
         AIF   (NOT &NEWSPAN AND     &RSW(&I)).LOAD
         AIF   (    &NEWSPAN AND NOT &RSW(&I)).SETRLOW
         AIF   (    &NEWSPAN AND     &RSW(&I)).LLOOP
.SETRLOW ANOP
&NEWSPAN SETB  0
&OFFSET  SETA  4+4*&I
&RN      SETA  &I-4
         AIF   (&RN GE 0).RNOK1
&RN      SETA  &I+12
.RNOK1   ANOP
&RLOW    SETA  &RN
         AGO   .LLOOP
.SETRHI  ANOP
&M       SETC  'M'
&RN      SETA  &I-4
         AIF   (&RN GE 0).RNOK2
&RN      SETA  &I+12
.RNOK2   ANOP
&OP2     SETC  ',&RN'
         AGO   .LLOOP
.LOAD    L&M   &RLOW&OP2,&OFFSET.(13) !  LOAD REGISTERS FROM SAVE AREA
         AGO   .RESET
.**********************************************************************
.RETNONE LM    14,12,12(13) !  RESTORE REGISTERS
         AGO   .RETOK
.RETAB14 L     14,12(13) !     SET UP REGISTER 14 FROM SAVE AREA
         AGO   .RETOK
.RETALL  ANOP
*        ALL REGISTERS RETURNED INTACT TO CALLING PROGRAM.
.RETOK   ANOP
.**********************************************************************
.*                                                                    *
.*       IF SVC IS USED, SAVE REGISTERS 0 AND 1                       *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &SVCUSED).NOSTM01
         STM   0,1,20(13) !    REGISTERS 0 AND 1 ARE DESTROYED BY SVC
.NOSTM01 ANOP
.**********************************************************************
.*                                                                    *
.*       GENERATE TRACE CODE                                          *
.*                                                                    *
.**********************************************************************
         AIF   ('&TRACE' NE 'YES' AND NOT &ETRACE).NOTRACE
&I       SETA  &#IDCHRS+8     GET OFFSET FROM BAL TO IWT SVC
&I       SETA  ((&I+1)/2)*2   ROUND UP TO HALFWORD ALIGNMENT
         CNOP  0,4 !           ALIGN PARAMETER LIST
         BAL   1,*+&I !        BRANCH AROUND PARAMETER LIST
         AIF   (&#IDCHRS LE 126).#CHRSOK
&#IDCHRS SETA  126
.#CHRSOK DC    AL2(&#IDCHRS) !        LENGTH OF MESSAGE
         DC    AL2(0)
         AIF   ('&ID' EQ '*').IDSTAR
         DC    CL&#IDCHRS'&ID' ! MESSAGE
         AGO   .MESSOK
.IDSTAR  DC    CL&#IDCHRS'&IDSTAR' ! MESSAGE
.MESSOK  SVC   35 !            ISSUE WRITE TO OPERATOR SVC
.NOTRACE ANOP
.**********************************************************************
.*                                                                    *
.*       DO FREEMAIN ON SAVE AREA                                     *
.*                                                                    *
.**********************************************************************
         AIF   ('&SAVE(1)' NE 'FREEMAIN').NOFREE
         AIF   ('&SAVE(3)' EQ 'NOCHECK').NOCHECK
         CLI   4(13),C'G' !    MAKE SURE SAVE AREA WAS GETMAINED
         BNE   FREE&SYSNDX !      DO NOT ISSUE FREEMAIN IF NO 'G'
.NOCHECK AIF   (&NLE4095).LAR0
         CNOP  0,4 !           ALIGN PARAMETER LIST
         BAL   1,*+8 !         BRANCH AROUND LENGTH
         DC    A(&SBYTES) !       SAVE AREA LENGTH
         L     0,0(1,0) !      LOAD SAVE AREA LENGTH INTO REGISTER 0
         AGO   .REG0OK
.LAR0    LA    0,&SBYTES.(0,0) !     LOAD SAVE AREA LENGTH INTO REG 0
.REG0OK  L     1,8(13) !       LOAD REGISTER 1 WITH SAVE AREA ADDRESS
         SVC   10              ISSUE FREEMAIN SVC                  6059
         AIF   ('&SAVE(3)' EQ 'NOCHECK').NOLABEL
FREE&SYSNDX EQU *
.NOLABEL ANOP
&NLE4095 SETB  0              RESET &NLE4095
&SGBYTES SETC  ''             RESET &SGBYTES
.NOFREE  ANOP
.**********************************************************************
.*                                                                    *
.*       IF SVC WAS USED, RESTORE REGISTERS 0 AND 1                   *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &SVCUSED).NOLM01
         LM    0,1,20(13) !    REGISTERS 0 AND 1 ARE DESTROYED BY SVC
.NOLM01  ANOP
.**********************************************************************
.*                                                                    *
.*       SET UP RETURN CODE, IF NECESSARY, AND RETURN                 *
.*                                                                    *
.**********************************************************************
         AIF   ('&LEVEL' NE 'UP').SAMELEV
         MVI   12(13),X'FF' !  INDICATE RETURN
.SAMELEV ANOP
         AIF   (NOT &RCLIT).RETURN
         LA    15,&RC.(0,0) !     SET UP RETURN CODE IN REGISTER 15
.RETURN  BR    14 !            RETURN
***********************************************************************
.*
.*
.**********************************************************************
.*                                                                    *
.*       GENERATE WARNING ERROR MESSAGES                              *
.*                                                                    *
.**********************************************************************
         AIF   ('&SAVE'    EQ    '4(13)').SAVEOK
         AIF   ('&SAVE'    EQ     'NONE').SAVEOK
         AIF   ('&SAVE(1)' EQ 'FREEMAIN').SAVEOK
         MNOTE *,'INVALID SAVE PARAMETER.  SAVE=NONE WAS ASSUMED.'
.SAVEOK  ANOP
         AIF   (NOT &RSW(1)).R13NRET
         MNOTE *,'13 WAS INCLUDED IN LIST OF REGISTERS TO BE RETURNED.'
         MNOTE *,'REQUEST IGNORED FOR 13.'
.R13NRET ANOP
         AIF   ('&RC' EQ '' OR NOT &R15RET).R15NRET
         MNOTE *,'RC=&RC OVERRIDES THE FACT THAT 15 WAS INCLUDED IN'
         MNOTE *,'THE LIST OF REGISTERS TO BE RETURNED.'
.R15NRET ANOP
         AIF   (&RSERR EQ 0).NORSERR
         AIF   (&RSERR EQ 1).RERRMSG
&S       SETC  'S'            SET UP &S FOR PLURAL IN ERROR MESSAGE.
.RERRMSG MNOTE *,'&RSERR INVALID REGISTER&S INCLUDED IN LIST OF'
         MNOTE *,'REGISTERS TO BE RETURNED.'
         MNOTE *,'REQUEST IGNORED FOR INVALID REGISTER&S..'
.NORSERR ANOP
         AIF   ('&LEVEL' EQ 'UP' OR '&LEVEL' EQ 'SAME').LEVELOK
         MNOTE *,'INVALID LEVEL PARAMETER.  LEVEL=SAME ASSUMED.'
.LEVELOK ANOP
         EJECT
         MEND
