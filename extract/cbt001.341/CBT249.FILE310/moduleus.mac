//BE008BBS  JOB (TSO,008),' PDS COMPARE ',CLASS=F,
//  TIME=(15),NOTIFY=OLEKSIW,MSGLEVEL=1,MSGCLASS=A
//*
//*   SVC ANALYSIS PROGRAM
//*   READ OUTPUT OF SVC TRACE AND IDENTIFY WHERE THE
//*   MODULES CAME FROM.
//*
//*  TO USE THIS TRACE FACILITY:
//*  S GTFSEEK,TAPE=TEMP01      (TAPE IS OVER TAPE DRIVE B70)
//*  REPLY  WITH: TRACE=SVCP
//*             : SVC=(6,7,8,9,18,42),END
//*               R XX,U
//*
//STEP1 EXEC SAS,OPTIONS='NONOTES'
//FT11F001 DD UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&LPA,
// DISP=(,PASS)
//FT12F001 DD SYSOUT=*
//PDS1 DD DSN=SYS1.LPALIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD *
     PROC PDS DDNAME=PDS1 ;
//* *
//* * IBM.LINKLIB
//* *
//STEP2 EXEC SAS,OPTIONS='NONOTES'
//FT11F001 DD UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&IBM,
// DISP=(,PASS)
//FT12F001 DD SYSOUT=*
//PDS2 DD DSN=SYS1.IBM.LINKLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD *
    PROC PDS DDNAME=PDS2 ;
//* *
//* * AUX.LINKLIB
//* *
//STEP2 EXEC SAS,OPTIONS='NONOTES'
//FT11F001 DD UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&AUX,
// DISP=(,PASS)
//FT12F001 DD SYSOUT=*
//PDS3 DD DSN=SYS1.AUX.LINKLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD *
  PROC PDS DDNAME=PDS3 ;
//* *
//* * NUSCO.LINKLIB
//* *
//STEP2 EXEC SAS,OPTIONS='NONOTES'
//FT11F001 DD UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&NUSCO,
// DISP=(,PASS)
//FT12F001 DD SYSOUT=*
//PDS3 DD DSN=SYS1.NUSCO.LINKLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD *
    PROC PDS DDNAME=PDS3 ;
//* *
//* * SYS1.CMDLIB
//* *
//STEP2 EXEC SAS,OPTIONS='NONOTES'
//FT11F001 DD UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&CMDS,
// DISP=(,PASS)
//FT12F001 DD SYSOUT=*
//PDS3 DD DSN=SYS1.CMDLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD *
    PROC PDS DDNAME=PDS3 ;
//*
//*   MOD.LINKLIB
//*
//STEP2   EXEC SAS,OPTIONS='NONOTES'
//FT11F001  DD  UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&MOD,
//   DISP=(,PASS)
//FT12F001  DD  SYSOUT=*
//PDS4  DD  DSN=SYS1.MOD.LINKLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD  *
 PROC PDS DDNAME=PDS4 ;
//*
//*   SYS1.SMLIB
//*
//STEP2   EXEC SAS,OPTIONS='NONOTES'
//FT11F001  DD  UNIT=SCRATCH,SPACE=(TRK,(10,1)),DSN=&&SM,
//   DISP=(,PASS)
//FT12F001  DD  SYSOUT=*
//PDS4  DD  DSN=SYS1.SMLIB,VOL=SER=RES01,UNIT=SYSDA,DISP=SHR
//SYSIN DD  *
 PROC PDS DDNAME=PDS4 ;
//*
//*   COMPARE PROGRAM
//*
//STEP3   EXEC SAS
//WORK      DD  UNIT=SCRATCHA,SPACE=(CYL,(50,50))
//LPA       DD  DSN=&&LPA,DISP=(OLD,DELETE)
//IBM       DD  DSN=&&IBM,DISP=(OLD,DELETE)
//MOD       DD  DSN=&&MOD,DISP=(OLD,DELETE)
//AUX       DD  DSN=&&AUX,DISP=(OLD,DELETE)
//CMD       DD  DSN=&&CMDS,DISP=(OLD,DELETE)
//SM        DD  DSN=&&SM,DISP=(OLD,DELETE)
//NUSCO     DD  DSN=&&NUSCO,DISP=(OLD,DELETE)
//*
//PACKLIST  DD  DSN=BE008BB.IEAPAK00.DATA,DISP=(,CATLG),
//          SPACE=(TRK,(3,1)),UNIT=TSOSAVE,VOL=SER=USTSO4
//IEABLD00  DD  DSN=BE008BB.IEABLD00.DATA,DISP=(,CATLG),
//          SPACE=(TRK,(3,1)),UNIT=TSOSAVE,VOL=SER=USTSO4
//*
//* ===>   GTF SVC LINK, LOAD, ATTACH, XCTL ANALYSIS PROGRAM
//*
//IN  DD  DSN=TEMP01,UNIT=TAPE,DISP=OLD,VOL=SER=TEMP01
//*
//SYSIN     DD  *
*
*  SAS PROGRAM TO COMPARE THE MEMBERS OF PDS'S
      ;
  *   OPTIONS SOURCE2 MACROGEN ;

    MACRO PDSQ
    LENGTH DSNAME $55 DUMMY $132 MEMBER $8 TEMP $7 ;
    RETAIN FIRST 1 DSNAME ; DROP FIRST ;
    /* IF YOU ATTEMPT TO FIGURE OUT WHAT THIS SECTION OF
       CODE DOES, YOU SHOULD LOOK AT THE OUTPUT OF A PROC PDS */
    IF FIRST THEN DO ;
      DO UNTIL (TEMP='MEMBERS'); /* LOOK FOR MEMBER LIST */
         INPUT @ ;
         IF LRECL GT 17 THEN  INPUT @12 TEMP $7. @ ;
         LENG = LRECL-18 ;
         IF LENG > 0 THEN
                     INPUT @12 TEMP1 $6. @19 TEMP2 $VARYING55. LENG ;
         ELSE DELETE ;
         TEMP2=SCAN(TEMP2,1,',') ;
         IF TEMP1 = 'DSNAME' THEN DSNAME=TEMP2 ;
      END ;
      FIRST=0 ;
    END ;
        LENG = LRECL - 1 ;  /* AVOID CARRIAGE CONTROL CHARACTER */
        INPUT @2  DUMMY $VARYING132. LENG   ;
        /*   LOOK FOR HEADINGS AND THE LIKE */
        IF INDEX(DUMMY,'S T A T I S T I C A L') THEN DELETE ;
        IF INDEX(DUMMY,'ALIASES ') THEN DELETE ;
        IF INDEX(DUMMY,'TRACKS ALLOCATED') THEN STOP ;
        /*   NOW READ AND OUTPUT THE MEMBERS*/
          DO I=1 TO 65 ;
             MEMBER = SCAN(DUMMY,I,' ') ;
             J = INDEX(MEMBER,'=') ;
             IF J NE 0 THEN MEMBER = SUBSTR(MEMBER,1,J-1) ;
             IF MEMBER NE ' ' THEN OUTPUT ;
                              ELSE I=66 ;
         END;
    RETURN ;
     %
DATA  MODLINK(KEEP=MEMBER DSNAME) ;
    INFILE MOD LENGTH=LRECL ;
    PDSQ ;

DATA  AUXLINK(KEEP=MEMBER DSNAME) ;
    INFILE AUX LENGTH=LRECL ;
    PDSQ

*PROC PRINT DATA=AUXLINK ;

DATA  LPALIB(KEEP=MEMBER DSNAME) ;
    INFILE LPA LENGTH=LRECL ;
    PDSQ

DATA  IBMLINK(KEEP=MEMBER DSNAME) ;
    INFILE IBM LENGTH=LRECL ;
    PDSQ

DATA  NUSCOLNK(KEEP=MEMBER DSNAME) ;
    INFILE NUSCO LENGTH=LRECL ;
    PDSQ

DATA  CMDLIB (KEEP=MEMBER DSNAME) ;
    INFILE CMD LENGTH=LRECL ;
    PDSQ

DATA  SMLIB (KEEP=MEMBER DSNAME) ;
    INFILE SM  LENGTH=LRECL ;
    PDSQ

PROC SORT DATA=LPALIB;   BY MEMBER DSNAME ;
PROC SORT DATA=IBMLINK;  BY MEMBER DSNAME ;
PROC SORT DATA=MODLINK;  BY MEMBER DSNAME ;
PROC SORT DATA=AUXLINK;  BY MEMBER DSNAME ;
PROC SORT DATA=NUSCOLNK; BY MEMBER DSNAME ;
PROC SORT DATA=CMDLIB; BY MEMBER DSNAME ;
PROC SORT DATA=SMLIB; BY MEMBER DSNAME ;

DATA BOTH
    CDORIGIN(RENAME=(MEMBER=CDENAME DSNAME=CDDSNAME))
    EPORIGIN(RENAME=(MEMBER=EP_NAME DSNAME=EPDSNAME)) ;
    SET LPALIB IBMLINK MODLINK AUXLINK NUSCOLNK CMDLIB SMLIB ;
    BY MEMBER ;
    IF ^(FIRST.MEMBER AND LAST.MEMBER) THEN OUTPUT BOTH;

    IF FIRST.MEMBER THEN DO ;
      OUTPUT EPORIGIN ;
      OUTPUT CDORIGIN ;
    END ;

 PROC PRINT UNIFORM DATA=BOTH ;
   TITLE PDS MEMBERS ON BOTH DATASETS ;
   VAR MEMBER DSNAME ;
*PROC PRINT UNIFORM DATA=ONLY ;
*   VAR MEMBER DSNAME ;
*   TITLE PDS MEMBERS ON ONLY ONE DATASET ;
  *
  *   SAS PROGRAM TO READ GTF SVC RECORDS AND TRY TO
  *   ANALYZE MODULES OFTEN USED AND WHERE THEY WERE
  *   ACCESSED FROM ;
  *
;     * RECORD FORMATS ARE
*     DOCUMENTED IN SY28-0643-4   PAGE 1-72 ;
*     ( OS/MVS SERVICE AIDS LOGIC ) ;
*     SVC ANALSYS RECORDS ARE DOCUMENTED IN DEBUGGING HANDBOOK
*         VOLUME 1, SECTION 5: SYSTEM SVC INSTRUCTIONS ;

     OPTIONS         LINESIZE=132 PAGESIZE=59 ;

DATA SVC ;
     INFILE IN MISSOVER CLOSE=FREE LENGTH=LRECL ;
     INPUT    @1   RECTYPE  PIB2. @ ;
     IF RECTYPE = '1111111100000001'B THEN DO ;*(SVC COMPREHENSIVE) ;
        INPUT @3   CLOCK    TODSTAMP8.
              @11  EVENT    PIB2.
              @13  ASCB     PIB4.
              @17  CPUID    PIB2.
              @19  JOBNAME  $CHAR8.
              @27  SVCOPSW  PIB8.
              @29  SVC_NO   PIB2.
              @35  TCB_OLD  PIB4.
              @39  CDENAME  $CHAR8.
              @47  REG15    PIB4.
              @51  REG0     PIB4.
              @55  REG1     PIB4.
              @                    ;
              TIME=TIMEPART(CLOCK) ;

        FORMAT RECTYPE HEX4. ASCB HEX8. CPUID HEX4.

        TIME TIME12. EVENT TCB_OLD SVCOPSW REG1 REG0 REG15 HEX4. ;


        IF SVC_NO = 6 THEN DO ;
           TYPE='LINK  ' ;
           INPUT @59 EP_NAME $CHAR8.;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO = 7 THEN DO ;
           TYPE='XCTL  ' ;
           INPUT @59 EP_NAME $CHAR8.;
           OUTPUT ;
           RETURN ;
        END ;


        IF SVC_NO = 8 THEN DO ;
           TYPE='LOAD  ' ;
           INPUT @59 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO = 9 THEN DO ;
           TYPE='DELETE' ;
           INPUT @59 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO =18 THEN DO ;
           TYPE='BLDL  ' ;
           INPUT @64 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO =42 THEN DO ;
           TYPE='ATTACH' ;
           INPUT +29 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        LIST   ;
     END ;
   ELSE DELETE;
   PROC FREQ ;
       TABLES EP_NAME CDENAME TYPE ;
    TITLE FREQUENCY COUNTS OF MODULES LINK,LOADED,DELETED,OR ATTACHED;

PROC SORT DATA=SVC ;
      BY EP_NAME ;

DATA SVC_CNT ;
     SET SVC ;
      BY EP_NAME ;
     IF FIRST.EP_NAME THEN EP_COUNT=0 ;
     EP_COUNT + 1 ;
     IF LAST.EP_NAME THEN OUTPUT ;


DATA EPORIGIN ;
     MERGE SVC_CNT EPORIGIN ;
     BY EP_NAME ;
     IF SVC_NO NE . ; /* KEEP ONLY NONZERO OBSERVATIONS */

PROC SORT DATA=CDORIGIN ;
      BY CDENAME;

PROC SORT DATA=SVC      ;
      BY CDENAME;

DATA CDE_CNT ;
     SET SVC      ;
     BY CDENAME ;
     IF FIRST.CDENAME THEN CDECOUNT=0 ;
     CDECOUNT + 1 ;
     IF LAST.CDENAME THEN OUTPUT ;

DATA CDE_CNT ;
     MERGE CDE_CNT CDORIGIN ;
     BY CDENAME ;
     IF SVC_NO NE .   ;

PROC SORT DATA=EPORIGIN OUT=EPOUT ;
     BY DESCENDING EP_COUNT ;

PROC SORT DATA=CDE_CNT  OUT=CDOUT ;
     BY DESCENDING CDECOUNT ;

PROC PRINT DATA=CDOUT ;
     VAR EP_NAME CDENAME CDECOUNT CDDSNAME ;
     TITLE DATA LISTED BY CDENAME REFERENCES ;

PROC PRINT DATA=EPOUT ;
     VAR EP_NAME EP_COUNT EPDSNAME CDENAME ;
     TITLE DATA LISTED BY EP NAME REFERENCES ;

DATA FINAL1 ;
     SET EPOUT    ;
     IF _N_ > 150 THEN STOP ;
        IF EPDSNAME = 'SYS1.LPALIB' THEN DO ;
           FILE PACKLIST ;
           PUT @1 '(' @2 EP_NAME $8. '),'
              /@1 '(' @2 CDENAME $8. '),'  ;
           END ;
        ELSE DO ;
           IF EPDSNAME = 'SYS1.IBM.LINKLIB' OR
              EPDSNAME = 'SYS1.AUX.LINKLIB' OR
              EPDSNAME = 'SYS1.MOD.LINKLIB' OR
              EPDSNAME = 'SYS1.NUSCO.LINKLIB' OR
              EPDSNAME = 'SYS1.CMDLIB'
              THEN DO ;
                FILE IEABLD00 ;
                PUT @1 EP_NAME $8. ','
                   /@1 CDENAME $8. ','  ;
              END ;
         END ;

DATA FINAL2 ;
     SET CDOUT    ;
     IF _N_ > 150 THEN STOP ;
        IF CDDSNAME = 'SYS1.LPALIB' THEN DO ;
           FILE PACKLIST  MOD ;
           PUT @1 '(' @2 EP_NAME $8. '),'
              /@1 '(' @2 CDENAME $8. '),'  ;
           END ;
        ELSE DO ;
           IF CDDSNAME = 'SYS1.IBM.LINKLIB' OR
              CDDSNAME = 'SYS1.AUX.LINKLIB' OR
              CDDSNAME = 'SYS1.MOD.LINKLIB' OR
              CDDSNAME = 'SYS1.NUSCO.LINKLIB' OR
              CDDSNAME = 'SYS1.CMDLIB'
              THEN DO ;
                FILE IEABLD00 MOD ;
                PUT @1 EP_NAME $8. ','
                   /@1 CDENAME $8. ','  ;
              END ;
         END ;
 PROC PRINT DATA=FINAL1; TITLE EP MEMBERS WRITTEN TO PACKLIST/IEABLD00;
 PROC PRINT DATA=FINAL2; TITLE CD MEMBERS WRITTEN TO PACKLIST/IEABLD00;
