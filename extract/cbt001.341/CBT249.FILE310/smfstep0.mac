  PROC FORMAT DDNAME=SASLIB ;
       VALUE SUBT_ID  1=JOB START
                      2=INTERVAL
                      3=STEP TERMINATION
                      4=STEP TOTAL
                      5=JOB TERMINATION  ;

         VALUE INOUT 0='UPDATE/WRITE'
                     1='INPUT/READ  ' ;

         VALUE VSPCUP 1=UP 0=DOWN ;

         VALUE TYPEC 0=START OF SMF DUMP
                     1=END   OF SMF DUMP ;

     VALUE CONFIGFM  1='IPL'
                   2='VARY ONLINE'
                   3=VARY OFFLINE
                   4=MSS AT IPL
                   5='VARY ONLINE,S'
                   6='VARY OFFLINE,S'  ;

    VALUE $ACTION 0=LOGOFF 9=LOGON ;

     VALUE  WKLOAD 1=SYSTEM LOAD
                   2=BATCH LOAD
                   3=TSO LOAD
                   4=VSPC
                   5='CICS/ADABAS' ;

     VALUE PERGRP  0=MASTER
                   1=NORMAL BATCH
                   2=NORMAL TSO
                   3=HOT BATCH
                   4=VTAM
                  5=SYSTEMS TSO
                  6=TCAM
                  7=JES2
                  8=STARTED TASKS
                  9=SYSTEM MONITORS
                 10=FREEZE
                 11=LOW BATCH
                 12=HP TSO
                 13=VSPC CONTROL
                 14=VSPC SECOND
                 15=APPLICATIONS TSO
                 16='CICS & ADABAS'
                 17=VERY SLOW BATCH
                 52=VSPC TRANSACTIONS;



RUN ;
*______________________________________________________________________*
*
*   READ THE DAILY SMF TAPES FOR ALL JOB / TSO ACCOUNTING RECORDS;
*
*______________________________________________________________________*
;
DATA

  WORK.TYPE0
          (KEEP=DATETIME  SYSTEMID MEMVIRTL MEMREAL)

  WORK.TYPE2
          (KEEP=DATETIME  SYSTEMID STRTSTOP)

  WORK.TYPE6
          (KEEP=TIME_RDR  SYSOUT   COUNT_DS JOB_NO    LINES   SYSTEMID
                DATETIME)

  WORK.TYPE7
          (KEEP=DATETIME  SYSTEMID TIMELOST LOST_REC )

  WORK.TYPE14
          (KEEP=ADDRESS TIME_RDR JOB_NAME DSNAME  EXCP
                TRACKS   SYSTEMID VOLSER  BLKSIZE IN DATETIME)

  WORK.TYPE19
          (KEEP=ADDRESS  DATETIME VOLSER  VTOCFLAG  FREE_ALT
                FREEDSCB FREE_CYL FREE_TRK SIZE_CYL SIZE_TRK)

  WORK.TYPE21
          (KEEP=DATETIME SYSTEMID VOLSER
               ADDRESS  WRITE_PM READ_PM START_IO
               NOISE_BL ERASEGAP CLEANERA DEN         )

  WORK.TYPE22
          (KEEP=DATETIME SYSTEMID SUBSYS    CHANTYPE  CHAN_ADR
                CHANNLID CPUMODEL CONFIG    LOW_PAGE  NUM_PAGE )

  WORK.TYPE26
          (KEEP=EXECSTRT  EXECSTOP  CARDSRED  CARDSPUN
                JOB_NAME  JOB_TYPE  JOB_FLAG  JOB_NO
                JOBCLASS  LINESOUT  OUT_STRT  OUT_STOP  TIME_RDR
                SYSTEMID  MSGCLASS  RDR_STRT  RDR_STOP  DATETIME)

  WORK.TYPE30
          (KEEP=BLOCKTOT  CARDS_IN STEPCODE COMPCODE
                CPU_SERV  EXCPDISK EXCPTAPE IO_SERV
                JOB_NAME  PROGRAM  STEPNAME JOB_NO    STEP_NO
                JOBCLASS  TIMEINIT TIME_RDR           CCC
                MSO_SERV  PAGE_TOT
                PAGECPU   PGR_NAME
                RESTART   SERVUNIT SMFSTAMP
                SUBTYPE   SYSTEMID SRB_STEP SRB_INIT  SRB_SERV
                TAPEMONT  TCB_INIT TCB_STEP TGETS     TPUTS
                TRANTIME  DATETIME)

   WORK.TYPE43
          (KEEP=DATETIME SYSTEMID FORMAT  COLD  WARM OPERATON COMPCODE)


   WORK.VSPC_UP
          (KEEP=DATETIME SYSTEMID OPTIONS  UP_DOWN  NO_USERS)


   WORK.JES2RJE  /* TYPE 47- TYPE 48  JES2 */
          (KEEP=DATETIME SYSTEMID REMOTE  LINE  PASSWORD  EXCP
                NACKS    LINE_ERR DATA_CHK  TIME_OUT )

   WORK.VSPC_ON  /* TYPE 47   VSPC */
          (KEEP=DATETIME SYSTEMID TERMINAL VSPC_ID)

   WORK.VSPC_OFF /* TYPE 48   VSPC */
          (KEEP=DATETIME SYSTEMID VSPC_ID  CPU_TIME  SESSTIME
                DASDEXCP TP_EXCP  CPU_CUMM SESSCUMM  TP_CUMM
                DASDCUMM          )

    WORK.TYPE50
      (KEEP=DATETIME SYSTEMID NCP_NAME DLR_NO
       WRITCAN READCHAN ATTENTON ATREADCH IN_PIU
       OUT_PIU READBUFF SLOWDOWN)

    WORK.TYPE62
      (KEEP=DATETIME SYSTEMID JOB_NAME
            DSNAME TIME_RDR)


    WORK.TYPE70
          (KEEP=CPU_BUSY  CPUWAIT  CPU_ID    CONFIG    SERIALNO
                DATETIME  DURATION RMF_TIME TSOMIN TSOMAX)
    WORK.TYPE72
          (KEEP=DATETIME  NO_TRANS IO_SERV  MSO_SERV  CPU_SERV
                SRB_SERV  PGN      WORKLOAD PERIOD    TRANTIME
                DURATION  ELAPTIME )

  WORK.TYPE200
          (KEEP=DATETIME  ACT_TYPE TERMINAL APPLCATN )

  WORK.CHECK
          (KEEP=TYPE)
     ;
     ;


*   KEEP A FORMAT FOR EACH VARIABLE FOR PRINTING ;

         FORMAT DATETIME RMF_TIME DATETIME16.
                TYPE 4. READ_TP WRITE_TP READ_PM WRITE_PM NOISE_BL 3.
                CHANNEL HEX1. UNIT HEX2.  ADDRESS HEX3.
                START_IO ERASEGAP CLEANERA DEN BLKSIZE 5. ;



    INFILE IN CLOSE=FREE  MISSOVER ;

    LENGTH DEFAULT=4 DATETIME TIMEINIT TIME_RDR 8 JOB_NO $8
           RDR_STRT RDR_STOP  EXECSTRT EXECSTOP OUT_STRT OUT_STOP 8
           PGR_NAME $20 TYPE COUNT_DS NUM_UCB CHANNEL UNIT VTOCFLAG
           READ_TP  WRITE_TP READ_PM   WRITE_PM  NOISE_BL
           CHAN_ADR  CPU_ADDR  JOB_TYPE  JOB_FLAG  DON
           STRTSTOP  RDRCLASS  FLAG      CONFIG    2  RMF_TIME 8;

    FORMAT DATETIME  TIMEINIT TIME_RDR DATETIME22.
           RDR_STRT  RDR_STOP EXECSTRT EXECSTOP DATETIME22.
           OUT_STRT  OUT_STOP DATETIME22.
           CARDS_IN  COMMPAGE COMMRCLM COMPCODE CPU_SERV
           EXCP      HIGHSTOR IO_SERV LOWSTOR LPAPAGE LPARCLM
           MSO_SERV  PAGE_TOT  PAGECPU   PAGEIN    PAGEOUT  PAGERCLM
           5.0       SUBTYPE   SUBT_ID. ;

    INPUT @2 TYPE PIB1. @ ;
*   OUTPUT WORK.CHECK;/*THIS DATASET KEEPS A COUNT OF SMF RECORDS READ*/
*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 0 :  IPL                                         *
*______________________________________________________________________;

    IF TYPE = 0 THEN DO ;
        INPUT @3   DATETIME   SMFSTAMP8.
                   SYSTEMID   $CHAR4.
              @23  MEMVIRTL   PIB4.
              @28  MEMREAL    PIB4. ;

      * LABEL MEMVIRTL=MEMORY SIZE OF VIRTUAL MEMORY
              MEMREAL =MEMORY SIZE OF THE REAL MEMORY ;

        FORMAT  MEMVIRTL MEMREAL 6. ;
        OUTPUT WORK.TYPE0 ;
        RETURN ;
    END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 2 :  SMF DUMP START TIME                         *
*______________________________________________________________________;

     IF TYPE EQ 2 THEN DO ;
        INPUT @3 DATETIME SMFSTAMP8. SYSTEMID $CHAR4. ;
        STRTSTOP = 0 ; /* SET FLAG FOR START OF DUMP */
      * LABEL DATETIME = DATE AND TIME OF SMF RECORD
        STRTSTOP=FLAG FOR START OR STOP OF DUMP ;
        OUTPUT WORK.TYPE2 ;
        FORMAT STRTSTOP TYPEC. ;
        RETURN ;
     END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 3 :  SMF DUMP ENDING TIME                        *
*______________________________________________________________________;

     IF TYPE EQ 3 THEN DO ;
        INPUT @3 DATETIME SMFSTAMP8. SYSTEMID $CHAR4. ;
        STRTSTOP = 1 ; /* SET FLAG FOR END OF DUMP */
        OUTPUT WORK.TYPE2 ;
        RETURN ;
     END ;
*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 6 :  JES2 SYSOUT                                 *
*______________________________________________________________________;

    IF TYPE = 6 THEN DO ;
        INPUT @3 DATETIME   SMFSTAMP8.
             @11 SYSTEMID   $CHAR4.
             @23 TIME_RDR   SMFSTAMP8.
             @39 SYSOUT     $CHAR1.
             @48 LINES      PIB4.
             @53 COUNT_DS   PIB1.
             @65 JOB_NO     $CHAR4.
         ;

       * LABEL
               COUNT_DS=COUNT OF DATASETS PRINTED
               JOB_NO  =JOBNUM  > JES2 JOB NUMBER
               LINES   =LOGRECS > NUMBER OF LINES PRINTED
               SYSOUT  =SYSOUT CLASS
               SYSTEMID=PROCESSOR ID FROM SMF PARMS
               TIME_RDR=READER START TIME
         ;

    FORMAT
          SYSTEMID $4.  TIME_RDR  DATETIME22.
          LINES    5.0  COUNT_DS  3.0
          SYSOUT   $1.  JOB_NO    $8.
        ;

       OUTPUT WORK.TYPE6 ;
       RETURN ;
    END ;


*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 7 :  SMF DATA LOST                               *
*______________________________________________________________________;

     IF TYPE = 7 THEN DO ;
        INPUT @3 DATETIME  SMFSTAMP8.
                 SYSTEMID  $CHAR4.
                 LOST_REC  PIB2.
                 TIMELOST  SMFSTAMP8. ;
        OUTPUT WORK.TYPE7 ;

      * LABEL LOST_REC = NUMBER OF SMF RECORDS LOST
              TIMELOST = STARTING TIME THAT SMF DATA WAS LOST ;

        FORMAT LOST_REC 5.  TIMELOST DATETIME22. ;
        RETURN ;
     END ;



*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 14/15  NON-VSAM DATASET ACTIVITY                 *
*______________________________________________________________________;

     IF TYPE EQ 14  OR TYPE EQ 15 THEN DO ;
        INPUT
        @3  DATETIME   SMFSTAMP8.
        @11 SYSTEMID   $4.
            JOB_NAME   $8.
        @23 TIME_RDR   SMFSTAMP8.
        @31 PGR_NAME   $8.
        @42 NUM_UCB    PIB1.
        @65 DSNAME     $44.
        @183  VOLSER   $6.
        @167  BLKSIZE  PIB2.  @ ;

       IF TYPE EQ 14 THEN IN=1 ; ELSE IN=0 ; /* FLAG FOR ACTIVITY */

      * LABEL IN      =FLAG FOR INPUT OR OUTPUT
              DSNAME  =DATASET NAME
              VOLSER  =VOLUME SERIAL OF DATASET
              BLKSIZE =DATASET BLOCKSIZE
              EXCP    =COUNT OF I/O
              ADDRESS =CHANNEL UNIT ADDRESS
              ;

        FORMAT BLKSIZE 5.  IN INOUT. VOLSER $6. DSNAME $44.     ;
        ADR = 265 ;

        DO I = 1 TO NUM_UCB ;
           INPUT @ADR   CHANNEL   PIB1.
                        UNIT      PIB1.
                        VOLSER    $6.
                   +7   EXCP      PIB4.
              @ ;

*     == ACCOUNT FOR ALTERNATE CHANNELS IN THE I/O SYSGEN ==;
           IF CHANNEL = 7 THEN CHANNEL = 1 ;
              ELSE IF CHANNEL = 8 THEN CHANNEL = 2 ;
                   ELSE IF CHANNEL = 9 THEN CHANNEL = 3 ;
                        ELSE IF CHANNEL =10 THEN CHANNEL = 4 ;

           ADDRESS = CHANNEL * 256  + UNIT ;
           ADR  = ADR + 24 ;
           IF EXCP GT 0 ;
           OUTPUT WORK.TYPE14 ;
       END ;
       RETURN ;
   END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 19:  DASD VOLUME INFO                            *
*______________________________________________________________________;


     IF TYPE EQ 19 THEN DO ;

        INPUT @3   DATETIME   SMFSTAMP8.
                   SYSTEMID   $CHAR4.
              @17  VOLSER     $6.
              @42  VTOCFLAG   PIB1.
                   DSCBS     PIB2.
                   FREEDSCB  PIB2.
                   FREE_ALT  PIB2.
                   FREE_CYL   PIB2.
                   FREE_TRK   PIB2.
                   SIZE_CYL   PIB2.
                   SIZE_TRK   PIB2.
              @61  CHANNEL    PIB1.
                   UNIT       PIB1.
               ;
               ADDRESS = CHANNEL * 256  + UNIT ;

         *  LABEL VTOCFLAG = FLAG FOR VTOC ERRORS
                  DSCBS    = COUNT OF DSCBS IN USE
                  FREEDSCB = COUNT OF UNUSED DSCBS
                  FREE_ALT = NUMBER OF UNUSED ALTERNATE TRACKS
                  FREE_CYL = NUMBER OF UNUSED CYLINDERS
                  FREE_TRK = NUMBER OF UNUSED TRACKS
                  SIZE_CYL = SIZE OF LARGEST UNUSED CYLINDER
                  SIZE_TRK = SIZE OF LARGEST CONTIGOUS TRACK SPACE
                 ;

                 FORMAT FREE_ALT FREE_CYL FREE_TRK FREEDSCB
                        SIZE_CYL SIZE_TRK DSCBS 5.
                        VTOCFLAG 1. ;

                 IF VTOCFLAG='.....1..'B THEN VTOCFLAG=1;
                    ELSE  IF  VTOCFLAG='......1.'B THEN VTOCFLAG=2 ;
                 * VTOCFLAG = 1:  VTOC ERROR EXISTS
                    "       = 2: VTOC ERROR HAS BEEN CORRECTED ;
           OUTPUT WORK.TYPE19 ;
           RETURN ;
     END ;


*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 21:  TAPE DISMOUNT ERROR STATISTICS              *
*______________________________________________________________________;


         IF TYPE = 21 THEN DO ;

         INPUT
         @3      DATETIME  SMFSTAMP8.
         @11     SYSTEMID     $CHAR4.
         @17     VOLSER    $CHAR6.
         @23     CHANNEL   PIB1.
         @24     UNIT      PIB1.
         @25     TYPE      PIB4.
         @29     READ_TP   PIB1.
         @30     WRITE_TP  PIB1.
         @31     START_IO  PIB2.
         @33     READ_PM   PIB1.
         @34     WRITE_PM  PIB1.
         @35     NOISE_BL  PIB1.
         @36     ERASEGAP  PIB2.
         @38     CLEANERA  PIB2.
         @40     DON       PIB1.
         @41     BLKSIZE   PIB2.
                                        ;  * END OF INPUT RECORD ;

       * LABEL READ_TP=TEMPORARY READ ERRORS
               WRITE_TP=TEMPORARY WRITE ERRORS
               READ_PM=PERMANENT READ ERRORS
               WRITE_PM=PERMANENT WRITE ERRORS
               DEN=TAPE DENSITY
               ERASEGAP=ERASE GAP COUNT
               CLEANERA=CLEANER ACTIONS
               NOISE_BL=NOISE BLOCKS
               ADDRESS =CHANNEL ADDRESS OF DRIVE
               NOISE_BL=NOISE BLOCKS
               START_IO=NUMBER OF START I/O ;
 ;
*      CONVERT CHANNEL AND UNIT ADDRESS TO ONE HEX VARIABLE ;
         ADDRESS = CHANNEL * 256 + UNIT ;

*      CONVERT DENSITY FLAG BITS TO A REAL NUMBER ;
         IF DON = '......11'B THEN DEN=200 ;
         IF DON = '.1....11'B THEN DEN=556 ;
         IF DON = '1.....11'B THEN DEN=800 ;
         IF DON = '11....11'B THEN DEN=1600 ;
         IF DON = '11.1..11'B THEN DEN=6250 ;
         OUTPUT WORK.TYPE21 ;
         RETURN ;
  END ;
*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 22:  CONFIGURATION  , CPU/CHANNEL/STORAGE VARIES *
*______________________________________________________________________;

     IF TYPE EQ 22 THEN DO ;
        INPUT @3   DATETIME   SMFSTAMP8.
                   SYSTEMID   $CHAR4.
                   CONFIG     PIB2.
                   NUM_SECT   PIB2. @ ;

        FORMAT CONFIG CONFIGFM. ;
        DO I = 1 TO NUM_SECT ;
           INPUT DUM PIB1.    FLAG PIB1. @ ;
           IF FLAG  = 1 THEN DO ;
              INPUT CPUMODEL PK2.
              +1    CPU_ADDR PIB1. @ ;
              OUTPUT WORK.TYPE22 ;
           END ;

           IF FLAG = 2 THEN DO ;   * CHANNEL SECTION ;
              INPUT  CHANTYPE PIB2.
                     CHAN_ADR PIB1.
                     CPU_ADDR PIB1.  @ ;
              CHANNLID = DUM ;
              OUTPUT WORK.TYPE22 ;
           END ;

           IF FLAG EQ 3 THEN DO ;* STORAGE SECTION ;
              INPUT LOW_PAGE PIB2.
                    NUM_PAGE PIB2.  @ ;
              OUTPUT WORK.TYPE22 ;
           END ;


           IF FLAG = 4 THEN DO ;
           PUT ' ===> MSS SECTION DETECTED IN RECORD TYPE22 ' /
               ' NUSCO ECS DOES NOT HAVE MSS .... WHAT GIVES? ' ;
               ABORT 22 ;
             END ;

           IF FLAG = 5 OR FLAG = 6 THEN DO ;
              INPUT +1 SUBSYS   PIB3. @ ;
              OUTPUT WORK.TYPE22 ;
           END ;
    END ;
       * LABEL CHANTYPE = CHANNEL TYPE AND MODEL NUMBER
               CHANNLID = CHANNEL SET ID
               CHAN_ADR = CHANNEL SET ADDRESS
               CPUMODEL = CPU MODEL NUMBER
               CONFIG   = VARY COMMAND ENTERED
               LOW_PAGE = ADDRESS OF LOWEST PAGE IN REAL STORAGE
               NUM_PAGE = NUMBER OF PAGES CONTIGUOUS STORAGE
               SUBSYS   = SUBSYSTEM ID OF DEVICE
        ;
        FORMAT CHANTYPE CHAN_ADR HEX2. LOW_PAGE NUM_PAGE 8.
               CHANNLID 6. CPUMODEL 5. CONFIG 1. ;
        RETURN ;
  END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 26:  JOB PURGE RECORD  ==> JES2                  *
*______________________________________________________________________;


   IF TYPE = 26 THEN DO ;
   INPUT     @3     DATETIME   SMFSTAMP8.
                    SYSTEMID   $4.
             @15    JOB_NAME   $8.
                    TIME_RDR   SMFSTAMP8.
              @51    JOB_TYPE    PIB1.
              @52    JOB_FLAG    PIB1.
              @53    JOB_ID      $4.
              @57    JOB_NO      $8.
              @85    MSGCLASS    $1.
              @86    JOBCLASS    $1.
              @101   CCC         $4.
                     ROOMNUM     $4.
              @145   RDR_STRT    SMFSTAMP8.
                     RDR_STOP    SMFSTAMP8.
              @169   EXECSTRT    SMFSTAMP8.
                     EXECSTOP    SMFSTAMP8.
                     OUT_STRT    SMFSTAMP8.
                     OUT_STOP    SMFSTAMP8.
              @205   CARDSRED    PIB4.
                     LINESOUT    PIB4.
                     CARDSPUN    PIB4.
               ;

        * LABEL JOB_NAME=JOBNAME  NAME OF THE JOB
                JOB_TYPE=JOB INFORMATION INDICATOR
                JOB_FLAG=PRIORITIES AND INFO INDICATOR
                JOB_NO  =JES2 STC/TSO/JOB NAME ID & NUMBER
                JOB_ID  =JES2 NUMBER ONLY
                JOBCLASS=JES2 JOB CLASS
                MSGCLASS=JES2 MSGCLASS FROM THE JOB CARD
                ROOMNUM =PROGRAMMERS ROOM NUMBER
                EXECSTRT=EXECUTION START TIME
                EXECSTOP=EXECUTION STOP TIME
                OUT_STRT=OUTPUT START TIME
                OUT_STOP=END OF JOB PURGE
                LINESOUT=NUMBER OF LINES TO THE SPOOL
                CARDSRED=NUMBER OF CARDS READ TOTAL
                CARDSPUN=NUMBER OF CARDS PUNCHED
                CCC=     COST CONTROL CENTER FOR BILLING ;

         FORMAT EXECSTRT EXECSTOP OUT_STRT OUT_STOP DATETIME22.
                RDR_STRT RDR_STOP DATETIME22.
                CARDSRED CARDSPUN LINESOUT 7. ;
         OUTPUT WORK.TYPE26 ;
         RETURN ;
    END ;
*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 30:  COMMON ADDRESS SPACE WORK RECORD            *
*______________________________________________________________________;

    IF TYPE = 30 THEN DO ;
      INPUT @3 DATETIME      SMFSTAMP8.
            @11 SYSTEMID     $CHAR4.
            @21 OFFSUBSY     PIB4.    /* SUBSYSTEM OFFSET */
            @25 LENSUBSY     PIB2.    /* SUBSYSTEM LENGTH */
            @27 NUMSUBSY     PIB2.    /* NUMBER OF SUBSYSTEM SECTIONS*/
            @29 OFFIDSEC     PIB4.    /* ID SECTION - OFFSET */
            @33 LENIDSEC     PIB2.    /*            - LENGTH */
            @35 NUMIDSEC     PIB2.    /*            - NUMBER OF */
            @37 OFFURSEC     PIB4.    /* UNIT RECORD SECTION    */
            @41 LENURSEC     PIB2.    /*            - LENGTH    */
            @43 NUMURSEC     PIB2.    /*             - NUMBER OF */
            @45 OFFCMSEC     PIB4.    /* COMPLETION SECTION      */
            @49 LENCMSEC     PIB2.    /*             - LENGTH    */
            @51 NUMCMSEC     PIB2.    /*             - NUMBER OF */
            @53 OFFPCSEC     PIB4.    /* PROCESSOR SECTION OFFSET*/
            @57 LENPCSEC     PIB2.    /*              - LENGTH   */
            @59 NUMPCSEC     PIB2.    /*              - NUMBER OF*/
            @61 OFFACSEC     PIB4.    /* ACCOUNTING SECTION OFFSET*/
            @65 LENACSEC     PIB2.    /*              - LENGTH    */
            @67 NUMACSEC     PIB2.    /*              - NUMBER OF */
            @69 OFFSTSEC     PIB4.    /* OFFSET TO STORAGE SECTION*/
            @73 LENSTSEC     PIB2.    /*                LENGTH    */
            @75 NUMSTSEC     PIB2.    /*              - NUMBER OF */
            @77 OFFPRSEC     PIB4.    /* PERFORMANCE SECTION OFFSET*/
            @81 LENPRSEC     PIB2.    /*                LENGTH    */
            @83 NUMPRSEC     PIB2.    /*                NUMBER OF */
            @85 OFFOPSEC     PIB4.    /* OPERATOR SECTION OFFSET  */
            @89 LENOPSEC     PIB2.    /*                LENGTH    */
            @91 NUMOPSEC     PIB2.    /*                NUMBER OF */
            @93 OFFEXSEC     PIB4.    /* EXCP SECTION OFFSET      */
            @97 LENEXSEC     PIB2.    /*                 LENGTH   */
            @99 NUMEXSEC     PIB2.    /* NUMBER OF - THIS RECORD  */
            @101 NUMEXOTH    PIB2. @/* NUMBER OF - OTHER RECORDS*/
       ;  /* END OF INPUT LENGTHS AND OFFSETS */

   * LABEL  BLOCKTOT=TOTAL BLOCKS TRANSFERRED
            CARDS_IN=CARDS READ IN DD DATA
            COMPCODE=JOB COMPLETION CODE
            CPU_SERV=CPU SERVICE UNITS
            EXCPDISK=DASD EXCPS
            EXCPTAPE=TAPE EXCPS
            IO_SERV =IO SERVICE UNITS
            MSO_SERV=MAIN STORAGE UNITS
            PAGE_TOT=TOTAL PAGES TRANSFERRED
            PAGECPU =CPU USED IN PAGING
            PGR_NAME=NAME OF USER
            PROGRAM =NAME OF PROGRAM EXECUTED
            RESTART =FLAG FOR RESTARTED JOBS
            SERVUNIT=SERVICE UNITS
            SRB_INIT=INITIATOR CPU UNDER SRB
            SRB_SERV=SRB SERVICE UNITS
            SRB_STEP=STEP TIME UNDER SRB IN HUNDREDTHS
            STEP_NO =STEP NUMBER
            STEPCODE=STEP COMPLETION CODE
            STEPNAME=STEP NAME
            SUBTYPE=TYPE OF ACCOUNTING RECORD
            TAPEMONT=NUMBER OF TAPE MOUNTS
            TCB_INIT=TCBS FROM INITIATOR
            TCB_STEP=STEP TCBS
            TGETS=TSO TERMINAL LINES READ
            TIMEINIT=TIME INITIATOR BEGAN EXECUTING JOB
            TPUTS   =TSO TERMINAL LINES WRITTEN
            TRANTIME=TRANSACTION TIME ;

     OFFSUBSY  = OFFSUBSY - 3 ;
     OFFPCSEC  = OFFPCSEC - 3 ;
     OFFIDSEC  = OFFIDSEC - 3 ;
     OFFURSEC  = OFFURSEC - 3 ;
     OFFCMSEC  = OFFCMSEC - 3 ;
     OFFACSEC  = OFFACSEC - 3 ;
     OFFSTSEC  = OFFSTSEC - 3 ;
     OFFPRSEC  = OFFPRSEC - 3 ;
     OFFOPSEC  = OFFOPSEC - 3 ;
     OFFEXSEC  = OFFEXSEC - 3 ;

              /* SUBSYSTEM SECTION */
     IF NUMSUBSY THEN INPUT @OFFSUBSY  SUBTYPE  PIB2.
           +12
           @;
     IF   NUMSUBSY  > 1 THEN DO      ;   * DIE IF MORE THAN 1 SECTION;
           LIST ;
           ABORT 1 ;
     END ;

     IF NUMIDSEC THEN INPUT                           /* ID SECTION */
                 @OFFIDSEC JOB_NAME   $8.
                           PROGRAM    $8.
                           STEPNAME   $8.
                   +8      JOB_NO     $8.
                           STEP_NO    PIB2.
                           JOBCLASS  $1.
                   +13     TIMEINIT   SMFSTAMP8.
                           TIME_RDR   SMFSTAMP8.
                   +8      PGR_NAME   $20.
                   @ ;
           ;     /* ACF2 - INPUT TERMINAL NAME HERE */
     IF NUMIDSEC > 1  THEN DO ;  * DIE IF MULTIPLE ID SECTIONS ;
           LIST ;
           ABORT  2;
     END ;


     IF NUMURSEC THEN DO ;    /* GET UNIT RECORD INFO */
        INPUT @OFFURSEC
               BLOCKTOT           PIB4.
               CARDS_IN           PIB4.
               TPUTS              PIB4.
               TGETS              PIB4.
               RDRCLASS           PIB1.
               @ ;
      END ;

     IF NUMCMSEC THEN DO ;    /* GET JOB STEP COMPLETION */
        INPUT @OFFCMSEC COMPCODE  PIB2.
              STEPCODE  PIB2.
        @ ;
        IF  STEPCODE='....1...........'B THEN  RESTART=1 ;
                                         ELSE  RESTART=0 ;
      END ;

      IF NUMPCSEC THEN DO ;    /* ACCOUNTING SECTION  */
         INPUT @OFFPCSEC   +4   TCB_STEP  PIB4.
                                SRB_STEP  PIB4.
                                TCB_INIT  PIB4.
                                SRB_INIT  PIB4.
               @;
         END ;

     IF NUMEXSEC GT 0 THEN DO ;   /* EXCP SECTION */
        INPUT @OFFEXSEC @ ;
        DO I = 1 TO NUMEXSEC ;
           INPUT DEVCLASS PIB1. +11   EXCP  PIB4.   +4  @ ;
           IF DEVCLASS = 128 THEN EXCPTAPE + EXCP ;
           ELSE                   EXCPDISK + EXCP ;
        END ;
     END ;

     IF NUMACSEC > 0 THEN DO ;    /* ACCOUNTING SECTION */
        INPUT @OFFACSEC @ ;
              DO I=1 TO NUMACSEC ;
                INPUT TEMPLENG PIB1. @ ;
                IF TEMPLENG GT 0 THEN
                          INPUT ACOUNTNG $VARYING8. TEMPLENG @ ;
                IF SUBSTR(ACOUNTNG,1,4) = 'SES#' THEN
                          CCC = SUBSTR(ACOUNTNG,5,3) ; /* GET CCC */
                IF I=2 AND SUBSTR(JOB_NO,1,3)='JOB'   /* 2ND POS = CCC*/
                          THEN CCC = ACOUNTNG ;
                /* ALL OTHER ACCOUNTING FIELDS ARE IGNORED FOR NOW  */
                /* BUT THE CAPABILITY EXISTS TO PROCESS THEM        */
              END ;
     END ;

     IF NUMSTSEC THEN DO ;  /* STORAGE SECTION */
        INPUT @OFFSTSEC  REGION  PIB2.
              +2         LOWSTOR PIB2.
                         HIGHSTOR PIB2.
                         PAGEIN  PIB4.
                         PAGEOUT PIB4.
                         PAGERCLM PIB4.
                         SWAPS    PIB4.
                         SWAPINS  PIB4.
                         SWAPOUT  PIB4.
                         VIOIN    PIB4.
                         VIOOUT   PIB4.
                         VIORCLM  PIB4.
                         COMMPAGE PIB4.
                         COMMRCLM PIB4.
                         LPAPAGE  PIB4.
                         LPARCLM  PIB4.
                   +4    PAGECPU  PIB4.
             @ ;
         PAGE_TOT = PAGEIN + PAGEOUT - PAGERCLM
                    +SWAPINS + SWAPOUT +VIOIN +VIOOUT - VIORCLM
                      +COMMPAGE - COMMRCLM +LPAPAGE - LPARCLM ;
         IF PAGETOT < 0 THEN PAGETOT = 0 ;
      END ;

      IF NUMPRSEC THEN DO ;   /* PERFORMANCE SECTION */
         INPUT @OFFPRSEC  SERVUNIT   PIB4.
                          CPU_SERV   PIB4.
                          SRB_SERV   PIB4.
                          IO_SERV    PIB4.
                          MSO_SERV   PIB4.
                          TRANTIME   PIB4.
                     @    ;

          TRANTIME = TRANTIME / 100 ;
          TRANTIME = TRANTIME/3.6E7*1024 ;
           *   (CHANGE TRANSACTTION TIME TO SAS TIME VALUE ;
          TRANTIME = HMS(TRANTIME, 0, 0) ;
       END ;
      IF NUMOPSEC THEN DO ;/* OPERATOR SECTION - TAPE MOUNTS*/
         INPUT @OFFOPSEC +8 TAPE1 PIB4. TAPE2 PIB4.
          @ ;
         TAPEMONT = TAPE1 + TAPE2 ;
      END ;
      OUTPUT WORK.TYPE30 ;
    * OUTPUT TEST   ;
      EXCPDISK = 0 ;
      EXCPTAPE = 0 ;

      RETURN ;
 END ;   /* END OF TYPE 30 RECORD */

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 43:  JES2 START  45: JES2 STOP                   *
*           ---- OR ----                                               *
*         RECORD TYPE 43:  VSPC START   45: VSPC STOP                  *
*______________________________________________________________________;

     IF TYPE EQ 43  OR TYPE EQ 45 THEN DO ;

        INPUT  @3   DATETIME  SMFSTAMP8.
                    SYSTEMID  $4.
                    FLAG      PIB2. @ ;

     IF FLAG EQ 2 THEN DO ; /* *** JES2 HAS FLAG = 2 *** */

        IF TYPE EQ 45 THEN DO ;   * JES2 WITHDRAWAL ;
           INPUT @21 FLAG  PIB2.  COMPCODE PIB2. ;
           IF FLAG='0...............'B THEN OPERATON =  'STOP ' ;
           IF FLAG='1...............'B  THEN OPERATON =  'ABEND' ;
           OUTPUT WORK.TYPE43 ;
           RETURN ;
        END ;

        INPUT @23 WARM PIB1.
                  OPTS PIB1. ;
        IF OPTS = '1.......'B THEN FORMAT = 'YES ' ;
                              ELSE FORMAT = 'NO  ' ;
        IF OPTS = '.1......'B THEN COLD   = 'YES ';
                              ELSE COLD   = 'NO  ';
       * LABEL WARM     = JES2 WARM START FLAG
               COLD     = JES2 COLD START FLAG
               FORMAT   = JES2 FORMAT SPOOL FLAG
               OPERATON = JES2 START/STOP INDICATOR ;
         ;
         IF TYPE = 43 THEN OPERATON = 'START' ;
        OUTPUT WORK.TYPE43 ;
        RETURN ;
        END ;
       /****** LOOK FOR VSPC FLAG OF X'6' ******/
       ELSE IF FLAG EQ 6 THEN DO ;
          IF TYPE EQ 43 THEN UP_DOWN = 1 ;
                          ELSE UP_DOWN = 0 ;
        * LABEL UP_DOWN = FLAG FOR VSPC UP OR DOWN ;
          FORMAT UP_DOWN  VSPCUP.;
          IF TYPE EQ 45 THEN INPUT @29 OPTIONS PIB1.
                                   @33 NO_USERS PIB2. ;
          OUTPUT WORK.VSPC_UP ;
         END ;
       ELSE ABORT 43 ;  /*** FLAG NOT 6 OR 2 ***/
    END ;


*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 47/48 JES2 SIGNON AND SIGNOFF                    *
*                           VSPC USER SIGNON / SIGNOFF                 *
*______________________________________________________________________;


     IF TYPE EQ 47 OR TYPE EQ 48 THEN DO ;
        INPUT   @3  DATETIME  SMFSTAMP8.
                    SYSTEMID  $4.
                    FLAG      PIB2. @ ;

       *   LOOK FOR THE JES2 RECORDS    ;
       IF FLAG EQ 2 THEN DO ;
 *============================ JES2  RJE ========================;
          INPUT @22 FLAG       PIB1.
                @25  REMOTE    $8.
                @33  LINE      $8.
                @40  PASSWORD  $8.
                @ ;
                IF FLAG NE  '.......1'B THEN DELETE ;
                * NOTE: IGNORE $PLINE AND $SLINE OPERATOR COMMANDS ;
           IF TYPE EQ 48 THEN
               INPUT @49  EXCP      PIB4.
                          NACKS     PIB4.
                          DATA_CHK  PIB4.
                          TIME_OUT  PIB4.
                          LINE_ERR  PIB4.
                          LIA       $3. ;
          OUTPUT WORK.JES2RJE ;
        * LABEL  REMOTE = JES2 REMOTE NAME
                 PASSWORD = JES2 REMOTE PASSWORD
                 LINE   = JES2 REMOTE LINE NAME
                 NACKS  = NUMBER OF NACKS
                 DATA_CHK=NUMBER OF DATA CHECKS ON THE LINE
                 LINE_ERR=NUMBER OF OTHER LINE ERRORS
                 TIME_OUT = NUMBER OF LINE TIMEOUTS
                 LIA      = LINE ADAPTER ADDRESS ;

          RETURN ;
        END ;


       ELSE IF FLAG EQ 6 THEN DO ;
  *========================== V S P C  RECORD ===================;
         IF TYPE EQ 47 THEN DO ;
            *   V S P C   USER LOGON ======;
            INPUT @22 VSPC_ID     PIB3.
                  @45 TERMINAL    $8.
                  @21 FLAG        PIB1. ;
            IF FLAG EQ '....1...'B THEN DELETE ; *ACCOUNT RECORD ;
            IF FLAG EQ '.....1..'B THEN DELETE ;
            OUTPUT WORK.VSPC_ON ;
            RETURN ;
         END ;


         IF TYPE EQ 48 THEN DO ;
            * V S P C  USER SIGNOFF ;
            INPUT @21 FLAG      PIB1.
                  @22 VSPC_ID   PIB3.
                      CPU_TIME  PIB4.2
                      SESSTIME  PIB4.
               +8     DASDEXCP PIB4.
                      TP_EXCP  PIB4.
              @57     CPU_CUMM PIB4.2
                      SESSCUMM PIB4.
               +8     DASDCUMM PIB4.
                      TP_CUMM  PIB4.  ;

           IF FLAG EQ '.....1..'B THEN DELETE ; *IGNORE ACCOUNT CMD;
           IF FLAG EQ '.......1'B THEN DELETE ; *IGNORE ACCOUNT CMD;


           OUTPUT WORK.VSPC_OFF ;

         * LABEL VSPC_ID=VSPC USER ID NUMBER
                 CPU_TIME=CPU TIME USED IN THIS SESSION(SECONDS)
                 SESSTIME=CONNECT TIME SECONDS
                 DASDEXCP=DASD I/O COUNT THIS SESSION
                 TP_EXCP =TP I/O COUNTS THIS SESSION
                 TERMINAL=VTAM TERMINAL ID
                 CPU_CUMM=CUMULATIVE CPU TIME TO DATE
                 SESSCUMM=CUMULATIVE CONNECT TIME TO DATE
                 TP_CUMM =CUMULATIVE TP I/O COUNTS TO DATE
                 DASDCUMM=CUMULATIVE DASD I/O COUNTS TO DATE
              ;
           FORMAT VSPC_ID 5.  CPU_CUMM SESSCUMM  CPU_TIME SESSTIME 8.2
                 TP_EXCP TP_CUMM DASDEXCP DASDCUMM 7. ;
           RETURN ;
        END ; * END TYPE 48, VSPC ;
    END ; * END OF VSPC SECTION ;
   END ; * END OF TYPE 48/47 RECORDS ;


*__________________________________________________________________*
*                                                                  *
*       RECORD TYPE 50 : ACF/VTAM TUNING STATISTICS                *
*__________________________________________________________________*
;

  IF TYPE=50 THEN DO;
    INPUT  @3   DATETIME  SMFSTAMP8.
                SYSTEMID  $CHAR4.
                NCP_NAME  $CHAR8.
                DLR_NO    PIB4.
                WRITCAN   PIB4.
                READCHAN  PIB4.
                ATTENTON  PIB4.
                ATREADCH  PIB4.
                IN_PIU    PIB4.
                OUT_PIU   PIB4.
                READBUFF  PIB4.
                SLOWDOWN  PIB4.
                ;
                OUTPUT WORK.TYPE50 ;


  * LABEL NCP_NAME=NCP OR PEP NAME
          DLR_NO=MAXIMUM DUMP-LOAD-RESTART REQUEST
          WRITCAN =COUNT OF WRITE CHANNEL PROGRAMS
          READCHAN=COUNT OF READ CHANNEL PROGRAMS
          ATTENTON=TOTAL NUM. OF ATTENTIONS RECEIVED
          ATREADCH=ATTENTIONS ON READ CHANNEL PROGRAMS
          IN_PIU=NUMBER OF INBOUND PIUS
          OUT_PIU=NUMBER OF OUTBOUND PIUS
          READBUFF=TOTAL NUMBER OF READ BUFFERS USED
          SLOWDOWN=NUMBER OF TIMES NCP ENTERED SLOWDOWN
         ;




    FORMAT NCP_NAME $8. DLR_NO SLOWDOWN 2. WRITCAN  READCHAN
       ATTENTON ATREADCH IN_PIU OUT_PIU READBUFF 4. ;
   END;


*---------------------------------------------------------------------*
*                                                                     *
*     RECORD TYPE 62  : VSAM COMPONENT OR CLUSTER OPENED              *
*---------------------------------------------------------------------*
 ;

   IF TYPE=62 THEN DO;
    INPUT @3  DATETIME  SMFSTAMP8.
              SYSTEMID  $CHAR4.
              JOB_NAME  $CHAR8.
              TIME_RDR  SMFSTAMP8.
          @93 DSNAME    $CHAR44.
          ;

    OUTPUT WORK.TYPE62;

    RETURN ;
   END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 70:  CPU WAIT TIME   CPU BUSY                    *
*______________________________________________________________________;

      FORMAT  DURATION MMSS10.3 CPUWAIT MMSS12.4 ;
  IF TYPE   = 70 THEN DO ;
      INPUT @3   DATETIME     SMFSTAMP8.
         @17     RMF_TIME     RMFSTAMP8.
                 DURATION    PD4.3
                 CPUMODEL    PK2.
         @33     NO_SAMPL    PIB4.
                 RMF_RELS    $2.
         @41     OSREL       $4.
         @51     NUMSECTS  PIB2.
                 SIZEDS    PIB2.
   @;
        FORMAT RMF_TIME DATETIME22. ;
        DURATION = 60 * FLOOR(DURATION / 100) + MOD(DURATION,100);
        NUM = 0;
        LOOP3:
           OFFSET = SIZEDS * NUM;
           NUM + 1;
           IF NUM <= NUMSECTS THEN GO TO BYPASS3;
           INPUT /*  ASID DATA AREA SECTIONS  */
            @73 + OFFSET + 352  TSOMIN   PIB2.
                                TSOMAX   PIB2. ;
           OUTPUT    WORK.TYPE70 ;
           RETURN ;
        BYPASS3: /*  CPU DATA SECTIONS        */
           INPUT @73 + OFFSET   CPUWAIT  PIB8.6
                                CPU_ID    PIB2.
                     + 1        CONFIG   PIB1.
                     + 1        SERIALNO   PK3.
                 @;
           CPUWAIT = CPUWAIT / 4096;
                                    *    THIS SHIFTS THE DOUBLE WORD
                                         RIGHT 12 BITS GIVING A
                                         TIME IN SECONDS. I USED
                                         A SCALING FACTOR OF 6 WHEN
                                         READING THIS FIELD;
                 CPU_BUSY = 100 * (1 - CPUWAIT / DURATION);
                 IF NUM < NUMSECTS THEN  OUTPUT  WORK.TYPE70 ;
                 GO TO LOOP3;
        RETURN ;
       END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 72:  WORKLOAD                                    *
*______________________________________________________________________;


        IF TYPE   = 72 THEN DO ;
                INPUT     @3  DATETIME    SMFSTAMP8.
                          @25 DURATION    PD4.
                          @31     PGN     PIB2. @;
           FORMAT WORKLOAD WKLOAD. PGN PERGRP. ;
           DURATION=FLOOR(DURATION/100000)*60+MOD(DURATION,100000)/1000;
           DATETIME=ROUND(DATETIME,1);
           IF PGN=0 OR PGN=4 OR PGN=6  OR PGN=7 OR
              PGN=8 OR PGN=9 THEN
                 WORKLOAD=1       ; /* SYSTEM PERFORMANCE GROUP */
           IF PGN=1 OR PGN=3 OR PGN=10 OR PGN=11 OR PGN=17 THEN
                 WORKLOAD=2      ;   /* BATCH PERFORMANCE GROUP   */
           IF PGN=2 OR PGN=5 OR PGN=12 OR PGN=15 THEN
                 WORKLOAD=3    ;     /*  TSO PERFORMANCE GROUP  */
             IF PGN=13 OR PGN=14  THEN  WORKLOAD=4     ; /* VSPC */
           IF PGN=16 THEN WORKLOAD=5     ;  /* CICS-ADABAS */

*  IF SMF ABORTS DUE TO THE FOLLOWING ABORT STATEMENT, IT IS
   BECAUSE A NEW PGN WAS ADDED TO THE SYS1.PARMLIB(IEAICS..) MEMBER
   YOU MUST FIGURE OUT WHAT THE WORKLOAD IS AND ADD IT TO THIS LOGIC.
   FOR EXAMPLE, PGN=17 WAS ADDED TO THE IPS. IT WAS A BATCH WORKLOAD.
   THUS, ADD 'OR PGN=17' INTO THE BATCH PERFORMANCE GROUP.
   REMEMBER, THE IPS AND THIS BIT OF LOGIC IS IN SYNCH.
   ALSO: ADD THE PGN INTO THE FORMAT PERGRP IN THE BEGINNING
   OF THE SMF PROGRAMS.
   THIS CHANGE COULD ALSO RESULT FROM ADDING 'RPGN=' INTO THE
   SYS1.PARMLIB(IEAICS..). IF YOU DO THIS, YOU BETTER DECIDE
   HOW TO ACCOUNT FOR IT.


           ;

           IF  PGN>17  AND PGN < 52 THEN ABORT 44 ;
           IF  PGN>56  THEN ABORT 45;/* MAINTAIN VSPC RESPONSE TIMES*/

           INPUT   @49 NUM PIB2. NUMBER PIB2. SIZE PIB2. @ ;

           /* NUMBER = NUMBER OF PG PERIOD DATA SECTIONS */
           /* SIZE   = SIZE   OF PG PERIOD DATA SECTIONS */
           /* NUM    = SIZE   OF WORKLOAD CONTROL SECTN  */

           I =  49+NUM ;

         * LABEL TRANTIME=TRANSACTION RESIDENCY TIME
                 NO_TRANS=NUMBER OF TRANSACTIONS COMPLETED
                 PERIOD  =PERFORMANCE PERIOD
                 DURATION=DURATION OF THE RMF INTERVAL
                 PGN     =PERFORMANCE GROUP NUMBER
                 ELAPTIME=ELAPSED TRANSACTION TIME
                 WORKLOAD=WORKLOAD GROUP ;

           FORMAT DURATION TIME8. ELAPTIME TIME8. ;
           DO PERIOD = 1 TO NUMBER ;
                INPUT            @I      NO_TRANS   PIB4.
                                 +8      ELAPTIME   PIB4.
                                 +4      MSO_SERV   PIB4.
                                         IO_SERV    PIB4.
                                         CPU_SERV   PIB4.
                                         TRANTIME   PIB4.
                                 +8      SRB_SERV   PIB4.    @ ;
                I = I + SIZE ;
                TRANTIME = TRANTIME * 1024 /1000000 ;
                ELAPTIME = ELAPTIME * 1024 /1000000 ;
              * (CONVERT TO SECONDS - SASTIME VALUES ) ;
**** COMPUTE THE AVERAGE RESPONSE TIME HERE ***** ;
                OUTPUT WORK.TYPE72 ;
            END ;
      END ;

*______________________________________________________________________*
*                                                                      *
*         RECORD TYPE 200: VTAM LOGON/LOGOFF FLAG                      *
*______________________________________________________________________;

    IF TYPE =200 THEN DO ;
        INPUT @3   DATETIME   SMFSTAMP8.
                   APPLCATN   $CHAR8.
                   TERMINAL   $CHAR8.
                   ACT_TYPE   $CHAR1. ;
        IF APPLCATN = 'TSO     ' THEN DELETE ;
        IF SUBSTR(APPLCATN,1,3) = 'TSO' THEN APPLCATN='TSO' ;
        FORMAT ACT_TYPE ACTION6. ;

      * LABEL APPLCATN=APPLICATION PROGRAM
              TERMINAL=SECONDARY LU
              ACT_TYPE=LOGON 9 LOGOFF 0 ;
        OUTPUT WORK.TYPE200 ;
        RETURN ;
    END ;
*===================================================================;

      TITLE FREQUENCY CHECKS OF RECORDS READ ;



PROC PRINT DATA=WORK.TYPE0 ;
    TITLE  IPL RECORDS ;

PROC PRINT DATA=WORK.TYPE7 ;
      TITLE SMF DATA LOST ;



*______________________________________________________________________*
*
*   UPDATE SECTION ---- TAKE THE CURRENT DATA AND ADD TO THE
*  MONTHLY UPDATE FILE
* ;

PROC SORT DATA=WORK.TYPE0 ;   /* IPL */
    BY DATETIME ;

DATA SAVE._TYPE0 ;
    UPDATE SAVE._TYPE0 WORK.TYPE0 ;
    BY DATETIME ; /* RETAIN FOR 2  YEARS*/
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE2 ; /* SMF DUMP */
    BY DATETIME ;

DATA SAVE._TYPE2 ;
    UPDATE SAVE._TYPE2 WORK.TYPE2 ;
    BY DATETIME ;          /* RETAIN FOR 2 YEARS */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE6 ;
     BY DATETIME TIME_RDR JOB_NO ;      /* JES2 SYSOUT */

DATA SAVE._TYPE6 ;
     UPDATE SAVE._TYPE6 WORK.TYPE6 ;
     BY DATETIME TIME_RDR JOB_NO ;       /* RETAIN FOR 6 MONTHS */
     IF TODAY() - DATEPART(DATETIME) > 45 THEN DELETE ;

*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE7 ;
     BY DATETIME TIMELOST ;       /* SMF DATA LOST */

DATA SAVE._TYPE7 ;
     UPDATE SAVE._TYPE7 WORK.TYPE7 ;
     BY DATETIME TIMELOST ;   /* RETAIN FOR 2 YEARS */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE14 ;
     BY TIME_RDR JOB_NAME DSNAME DATETIME ;

DATA SAVE._TYPE14 ;                  /* NON-VSAM DATASET ACTIVITY */
     UPDATE SAVE._TYPE14 WORK.TYPE14 ;
     BY TIME_RDR JOB_NAME DSNAME DATETIME ;

     IF TODAY() - DATEPART(TIME_RDR) > 7  THEN DELETE ;
     /**** GET RID OF DATA MORE THAN TWO WEEKS OLD *****/


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE19 ;
     BY DATETIME ADDRESS ;

DATA SAVE._TYPE19 ;
     UPDATE SAVE._TYPE19 WORK.TYPE19 ;          /* DASD VOLUME INFO */
     BY DATETIME ADDRESS ;            /* RETAIN FOR 2 YEARS */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;

*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE21 ;
     BY DATETIME ;

DATA  SAVE._TYPE21 ;
     UPDATE SAVE._TYPE21 WORK.TYPE21  ;      /* TAPE STATISTICS */
     BY DATETIME ;                 /* RETAIN FOR 2 YEARS */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;


PROC SORT DATA=WORK.TYPE22 ;
     BY DATETIME CONFIG ;

DATA SAVE._TYPE22 ;                     /*  CONFIGURATION CHANGES */
     UPDATE SAVE._TYPE22 WORK.TYPE22 ;
     BY DATETIME CONFIG ;          /*  RETAIN FOR 2 YEARS    */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE26 ;
    BY TIME_RDR JOB_NO ;

DATA SAVE._TYPE26 ;                    /*  JOB PURGE RECORDS */
    UPDATE SAVE._TYPE26 WORK.TYPE26 ;
    BY TIME_RDR JOB_NO ;         /*   RETAIN FOR 6 MONTHS */
     IF TODAY() - DATEPART(TIME_RDR) > 45 THEN DELETE ;



*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE30 ;
    BY TIME_RDR JOB_NO SUBTYPE STEP_NO ;

DATA SAVE._TYPE30 ;               /* UNIVERSAL JOB ACCOUNTING RECORDS */
     UPDATE SAVE._TYPE30 WORK.TYPE30 ;
     BY TIME_RDR JOB_NO SUBTYPE STEP_NO ; /* RETAIN FOR 6 MONTHS    */
     IF TODAY() - DATEPART(TIME_RDR) > 45 THEN DELETE ;

*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE43 ;
     BY DATETIME OPERATON ;

DATA SAVE._TYPE43 ;
     UPDATE SAVE._TYPE43 WORK.TYPE43 ; /*  JES2 START/STOP RECORDS  */
     BY DATETIME OPERATON ;       /*  RETAIN FOR 2 YEARS       */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.JES2RJE ;
     BY DATETIME REMOTE ;

DATA SAVE._JES2RJE ;
     UPDATE SAVE._JES2RJE WORK.JES2RJE ;/*  JES2 RJE SIGNON        */
     BY DATETIME REMOTE ;          /*  RETAIN FOR 1 YEAR      */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;

*_____________________________________________________________________*;


PROC SORT DATA=WORK.VSPC_UP ;
     BY DATETIME         ;

DATA SAVE._VSPC_UP ;
     UPDATE SAVE._VSPC_UP WORK.VSPC_UP ;     /*   VSPC STARTUP      */
     BY DATETIME         ;         /*   RETAIN FOR 2 YEARS */
     IF TODAY() - DATEPART(DATETIME) > 45  THEN DELETE ;


*_____________________________________________________________________*;


PROC SORT DATA=WORK.VSPC_ON ;
     BY DATETIME VSPC_ID ;

PROC SORT DATA=SAVE._VSPC_ON ;
     BY DATETIME VSPC_ID ;

DATA SAVE._VSPC_ON ;
     UPDATE SAVE._VSPC_ON WORK.VSPC_ON ;      /*   VSPC LOGON   */
     BY DATETIME VSPC_ID ;          /*   RETAIN FOR 6 MONTHS*/
     IF TODAY() - DATEPART(DATETIME) > 45 THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=SAVE._VSPC_OF;
     BY DATETIME VSPC_ID ;

PROC SORT DATA=WORK.VSPC_OFF ;
     BY DATETIME VSPC_ID ;

DATA SAVE._VSPC_OF ;
     UPDATE SAVE._VSPC_OF WORK.VSPC_OFF ;  /*  VSPC LOGOFF   */
     BY DATETIME VSPC_ID ;         /*  RETAIN FOR 6 MONTHS */
     IF TODAY() - DATEPART(DATETIME) > 45 THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE50   ;
     BY DATETIME NCP_NAME;

DATA SAVE._TYPE50  ;
     UPDATE SAVE._TYPE50 WORK.TYPE50;/* ACF / VTAM TUNING STATISTICS */
     BY DATETIME NCP_NAME;         /*  RETAIN FOR 1 YEAR */
     IF TODAY() - DATEPART(DATETIME) > 45 THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE62   ;
     BY DATETIME DSNAME  ;

DATA SAVE._TYPE62  ;
     UPDATE SAVE._TYPE62  WORK.TYPE62 ; /*   VSAM DATASET ACTIVITY  */
     BY DATETIME DSNAME  ;        /*   RETAIN FOR 1 WEEKS     */
     IF TODAY() - DATEPART(DATETIME) > 7   THEN DELETE ;


*_____________________________________________________________________*;


PROC SORT DATA=SAVE._TYPE70 ;
    BY DATETIME CPU_ID ;


PROC SORT DATA=WORK.TYPE70 ;
    BY DATETIME CPU_ID ;

DATA SAVE._TYPE70 ;
    UPDATE SAVE._TYPE70 WORK.TYPE70 ;  /*   CPU BUSY , TSO USE    */
    BY DATETIME CPU_ID ;          /*   RETAIN FOR  6 MONTHS  */
     IF TODAY() - DATEPART(DATETIME) > 45   THEN DELETE ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE72 ;
     BY DATETIME PGN PERIOD ;

 DATA SAVE._TYPE72 ;
     UPDATE SAVE._TYPE72 WORK.TYPE72 ; /*  WORKLOAD STATISTICS */
     BY DATETIME PGN PERIOD ;        /*   RETAIN FOR 2 MONTHS */
     IF TODAY() - DATEPART(DATETIME) > 45   THEN DELETE ;
     RUN ;


*_____________________________________________________________________*;

PROC SORT DATA=WORK.TYPE200;
     BY DATETIME APPLCATN DESCENDING ACT_TYPE ;

 DATA SAVE._TYPE200;
     UPDATE SAVE._TYPE200 WORK.TYPE200; /*  WORKLOAD STATISTICS */
     BY DATETIME APPLCATN DESCENDING ACT_TYPE; /*RETAIN FOR 2 MONTHS */
     IF TODAY() - DATEPART(DATETIME) > 45   THEN DELETE ;
     RUN ;


*_____________________________________________________________________*;
