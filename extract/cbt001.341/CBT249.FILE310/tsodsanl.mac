//OLEKSIW  JOB (TSO,008),' JIM OLEKSIW ',CLASS=F,MSGLEVEL=1,
//  NOTIFY=OLEKSIW,TIME=50,MSGCLASS=R
//*
//*   THIS IS A QUICKIE SAS PROGRAM TO LOOK AT AND SUMMARIZE THE
//*   AGES OF QSAM DATASETS IN CERTAIN VTOCS.
//*      LOOK AT THE AGES AND SUMMARIZE FOR MANAGEMENT PURPOSES.
//*    BASE CODE:  SAS.SAMPLE MEMBER
//*       JIM OLEKSIW, NORTHEAST UTILITIES SERVICE COMPANY
//*
//DASD  EXEC SAS79
//FT11F001  DD  SYSOUT=R
//FT12F001  DD  SYSOUT=R
//USER  DD DSN=OLEKSIW.SYSTEM.CATALOG,DISP=OLD
//USTSO4 DD  VOL=SER=USTSO4,UNIT=SYSDA,DISP=OLD
//USTSO2 DD  VOL=SER=USTSO2,UNIT=SYSDA,DISP=OLD
//USTSO3 DD  VOL=SER=USTSO3,UNIT=SYSDA,DISP=OLD
//USTSO1 DD  VOL=SER=USTSO1,UNIT=SYSDA,DISP=OLD
//SYSIN     DD  *
*-------------------------- MAPDISK -----------------------------*
×                                                                ×
× THIS CODE READS IN THE DSCBS OF THE VTOC AND PRODUCES A LISTING×
× OF ALL DATA SETS WITH THEIR ATTRIBUTES AND ALLOCATION DATA.    ×
×                                                                ×
× A VTOC DD STATEMENT SHOULD BE IN THE JCL LIKE:                 ×
×    //VTOC DD DSN=VTOC,VOL=SER=THISVOL,UNIT=DISK,DISP=SHR       ×
×                                                                ×
×                                                                ×
× FIELD AS WELL AS THE KEY AND DATA IN THE RECORD. THIS IS WHY   ×
× OFFSETS ARE 5 MORE THAN INDICATED IN THE SYSTEMS CONTROL BLOCKS×
×                                                                ×
× THE DATA SET SERIAL NUMBER AT TUCC IS USED TO STORE THE USAGE  ×
×                                                                ×
× DATA SETS WITH MORE THAN 3 EXTENTS HAVE EXTENSION DSCBS.       ×
× FORMAT 1 AND 2 DSCBS THAT POINT TO FORMAT 3 DSCBS ARE OUTPUT   ×
× TO SEPARATE DATASETS SO THAT THEY CAN BE MERGED TO FIND OUT    ×
× ALL THE ALLOCATION DATA.                                       ×
×                                                            JPS ×
*----------------------------------------------------------------*;
DATA LAST ; * THIS IS A DUMMY DATASET ;

 MACRO DISK1
DATA FIRST(KEEP=DSNAME CREATED EXPIRES  DS1DSSN
              EXTENTS DSORG RECFM UNUSED  ALOC BLKSIZE REFDATE
              LRECL SECALOC USED R TRACKS VOLSER) ;
    *FREE(KEEP=LOC CYL TRACK TOTAL RECN)
     FMT1(KEEP=DSNAME CREATED EXPIRES  DS1DSSN DS1VOLSQ
              EXTENTS DSORG RECFM1-RECFM4 ALOC BLKSIZE REFDATE
              LRECL SECALOC USED R TRACKS CCHHR VOLSER)
     FMT2(KEEP=CCHHR TOCCHHR)
     FMT3(KEEP=CCHHR ALLOC3);  LENGTH DEFAULT=4;

  *-------READ DSCB AND DETERMINE WHICH FORMAT------*;
  INFILE %


  MACRO DISK2       VTOC CCHHR COLUMN=COL;
  INPUT @50 DSCBTYPE ?1. @;
      IF DSCBTYPE=1 THEN GOTO FORMAT1;
      IF DSCBTYPE=2 THEN GOTO FORMAT2;
      IF DSCBTYPE=3 THEN GOTO FORMAT3;
      IF DSCBTYPE=5 THEN GOTO FORMAT5;
      IF DSCBTYPE=4 THEN INPUT @70 TRKCYL PIB2.; RETAIN TRKCYL;
      IF DSCBTYPE=. THEN NULL+1; _ERROR_=0;
      IF NULL>500 THEN STOP; RETURN;

FORMAT1:                                    *---REGULAR DSCB TYPE---*;
  INPUT DSNAME $6-49
      @51 DSS1DSSN  $6. @57 DS1VOLSQ PIB2.
      @59 YC PIB1. DAYC PIB2.
          YE PIB1. DAYE PIB2.
      EXTENTS PIB1. @88 DSORG1 PIB1. @90 RECFM0 PIB1.
        @81 YR PIB1. DAYR PIB2.
      @92 BLKSIZE PIB2. LRECL PIB2. KEYLENG PIB1.
      @100 ALO PIB1. SECALOC PIB3. USED PIB2. R PIB1.@;
   UNUSED = TRACKS - USED ;

         IF DAYC < 366 AND DAYC > 0 THEN
      IF YC>0 THEN CREATED=DATEJUL(1000*YC+DAYC);
         IF DAYE < 366 AND DAYE > 0 THEN
      IF YE>0 THEN EXPIRES=DATEJUL(1000*YE+DAYE);
         IF DAYR < 366 AND DAYR > 0 THEN
      IF YR>0 THEN REFDATE=DATEJUL(1000*YR+DAYR);
      FORMAT CREATED EXPIRES  DATE7.;

      *--------- DSORG RECODING--------; DSORG='  ';
      IF MOD(INT(DSORG1/2),2) THEN DSORG='PO';
      IF DSORG1>=32 THEN DSORG='DA';IF DSORG1>=64 THEN DSORG='PS';
      IF DSORG1>=128 THEN DSORG='IS';
      *-------- RECFM RECODING --------;
      RECFM1=' '; Z=INT(RECFM0/64);
      IF Z=1 THEN RECFM1='V'; IF Z=2 THEN RECFM1='F';
      IF Z=3 THEN RECFM1='U';
      RECFM2=' '; IF MOD(INT(RECFM0/16),2) THEN RECFM2='B';
      RECFM3=' '; IF MOD(INT(RECFM0/4),2) THEN RECFM3='A';
      RECFM4=' '; IF MOD(INT(RECFM0/8),2) THEN RECFM4='S';
         LENGTH RECFM $4 ;
         RECFM = RECFM1 ×× RECFM2 ××RECFM3 ×× RECFM4 ;

      *-------- ALLOC TYPE RECODING -------;
      ALOC='   '; Z=INT(ALO/64);       IF Z=1 THEN ALOC='BLK';
      IF Z=2 THEN ALOC='TRK';          IF Z=3 THEN ALOC='CYL';
      *-------- ALLOCATED SPACE --------;INPUT @111@;
      TRACKS=0; LINK EXL; LINK EXL; LINK EXL;
      IF EXTENTS<=3 THEN GOTO OUTD;
        INPUT CCHHR $5.;*OUTPUT FMT1; RETURN;
OUTD: OUTPUT FIRST; RETURN;

*-----ROUTINES TO COLLECT EXTENT INFORMATION-----*;
EXL4: LINK EXL; LINK EXL; LINK EXL;
EXL:  INPUT IND PIB1. +1 (CCLO HHLO CCHI HHHI)(PIB2.)@;
      IF IND=0 THEN RETURN;
      TRACKS+  TRKCYL  *(CCHI-CCLO)+HHHI-HHLO+1;
      RETURN;

FORMAT2:                                    *---ISAM DSCB---*;
      INPUT @1 CCHHR $CHAR5. @141 TOCCHHR $CHAR5.
                             @141 Z IB5.;
     *IF Z^=0 THEN OUTPUT FMT2; RETURN;

FORMAT3: TRACKS=0;                          *---CONTINUATION DSCB---*;
      INPUT @1 CCHHR $CHAR5. @10@;
      LINK EXL4; INPUT +1@;
      IF IND>0 THEN LINK EXL4;
      IF IND>0 THEN LINK EXL4;
      IF IND>0 THEN LINK EXL;
      ALLOC3=TRACKS;*OUTPUT FMT3; RETURN;
      FORMAT CCHHR $HEX10.;

FORMAT5:  INPUT @10@; RECN+1;               *---FREE SPACE EXTENTS---*;
EXT:  INPUT LOC PIB2. CYL PIB2. TRACK PIB1.@;
      IF LOC=0 THEN RETURN; IF COL=50 THEN INPUT +1@;
      TOTAL=20*CYL+TRACK;
     *OUTPUT FREE;
      IF COL<140 THEN GOTO EXT;
  RETURN;
DATA BOTH ; SET FIRST LAST ;
PROC DELETE DATA=LAST ;
PROC DATASETS  DDNAME=USER ;
  CHANGE BOTH=LAST ; DELETE FIRST ; %
;
DISK1 USTSO1 DISK2;
DISK1 USTSO2 DISK2 ;
DISK1 USTSO3 DISK2;
DISK1 USTSO4 DISK2 ;
*
*   SAS PROGRAM TO ANALYZE AGES OF TSO DATASETS
*    ;
PROC FORMAT DDNAME=SASLIB ;
     VALUE AGE(MAX=40 DEFAULT=20) 0-1 ='DATA 0-1 DAYS OLD'
               2-3 = 'DATA 2-3 DAYS OLD'
               4-7 = 'DATA 4-7 DAYS OLD'
               8-31= 'DATA 2-4 WEEKS OLD'
              32-63= 'DATA 1-2 MONTHS OLD'
              64-93= 'DATA 2-3 MONTHS OLD'
              94-183='DATA 3-6 MONTHS OLD'
             183-365= 'DATA 6-12 MONTHS OLD'
             366-999= 'DATA OVER 1 YEAR OLD' ;
DATA AGES ;
     SET LAST ;
     AGE_CRTN = TODAY() - CREATED ;
     AGE_REFD = TODAY() - REFDATE ;
   AGE_CR_I = INT(AGE_CRTN/14) * 14 ;
 IF AGE_CR_I < 0 THEN DELETE ;
  IF INDEX(DSNAME,'TSOLEAVE') NE 0 THEN DELETE ;
   AGE_RF_I = INT(AGE_REFD/14) * 14 ;
    LABEL AGE_CR_I = AGE OF CREATION IN 2 WEEK INTERVALS
          AGE_RF_I = AGE OF REFERENCE IN 2 WEEK INTERVALS ;
     FORMAT REFDATE DATE7. AGE_CRTN AGE_REFD AGE. ;
 LABEL AGE_CRTN = AGE FROM DATASET CREATION
       AGE_REFD = AGE SINCE DATASET WAS UPDATED;
PROC FREQ DATA=AGES ;
 TABLES AGE_CRTN AGE_REFD  AGE_CR_I AGE_RF_I ;
 TITLE AGES OF TSO DATASETS ;
 PROC MEANS DATA=AGES  MAXDEC=1 ;
  VARIABLES AGE_CRTN AGE_REFD AGE_CR_I AGE_RF_I ;
