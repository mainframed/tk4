//BE008BBA JOB (TSO,007),' JIM OLEKSIW ',CLASS=D,
//  MSGLEVEL=1,NOTIFY=OLEKSIW,MSGCLASS=A,TIME=3
//*
//*   ASSEMBLER AND FORTRAN PROGRAMS TO PLOT SAS
//*   OUTPUT ON A CALCOMP OR TEKTRONICS DEVICE.
//*    FOR A COMPLETE COPY OF THE USER'S GUIDE, WRITE TO:
//*          JAMES OLEKSIW  E-10
//*          NORTHEAST UTILITIES SERVICE COMPANY
//*          P.O. BOX 270
//*          HARTFORD, CONNECTICUT  06101     (203-666-6911)
//*
//*
//* THE FOLLOWING STEP DEFINES THE PARAMETERS AND OPTIONS
//STEP1 EXEC ASMFC,PARM.ASM='NODECK,OBJECT,NOXREF'
//SYSLIB  DD  DSN=USER.SAS.MACRO,DISP=SHR,DCB=BLKSIZE=1600
      PRINT   NOGEN
*  THE NAME SHOULD EITHER BE CALCOMP OR TEKPLOT
PROC  SASPROC NAME=CALCOMP,LOADMOD=CALCOMP2,DEFLIST=1,DEFMODE=NUMERIC
LISTS SASLIST GRAPH,1,VARIABLES,1,VAR,1,SIZE,3,ID,7,MODE=NUMERIC
OPTS  SASLIST NOPOUT,1,NOP,1,NOY0,2,NOBY,3
PARMS SASLIST XMIN,1,XMAX,2,YMIN,3,YMAX,4,XLEN,5,YLEN,6,MODE=NUMERIC
PARMS SASLIST SYMBOL,7,DEFSIZE,8,SIGDIG,9,MODE=NUMERIC
PARMS SASLIST TITLE,10,LENGTH=40,MODE=ALPHANUM
PARMS SASLIST DTX,15,DTY,16,NF1,17,NF2,18,NF,18,PU,19,MODE=NUMERIC
PARMS SASLIST XINC,20,YINC,21,DBY,22,HBY,23,MODE=NUMERIC
PARMS SASLIST XMARGIN,24,YMARGIN,25,MODE=NUMERIC
PARMS SASLIST XGRID,26,YGRID,27,MODE=NUMERIC
PARMS SASLIST SR,28,SYMRATIO,28,MODE=NUMERIC
      SASEND
      END
//* LINK-EDIT THE SAS MODULE INTO THE SAS LIBRARY
//STEP2 EXEC PGM=IEWL,PARM='NOMAP,LIST,RENT'
//SYSPRINT DD SYSOUT=A
//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(40,20))
//SYSLIB DD DSN=USER.SAS.LIBRARY,DISP=SHR
//SYSLIN DD DSN=&&LOADSET,DISP=(OLD,DELETE)
// DD *
 NAME CALCOMP(R)
//SYSLMOD DD DSN=USER.SAS.LIBRARY,DISP=SHR
//*
//*  FORTRAN H - EXTENDED OR FORTRAN H COMPILE   (NO LINK YET)
//*
//STEP3 EXEC FORTXC,PARM='NOXREF,NOMAP'
//SYSIN DD  *
C   NAME: CALCOMP
C   AUTHOR: FRANK HARRELL AND JAMES OLEKSIW
C   FUNCTION: PLOT CALCOMP/TEKTRONIX GRAPHICS
C***********************************************************************
C*
C* NAME     TEKPLOT AND PLOTTEK
C* TITLE    SAS PROCEDURES TEKPLOT AND PLOTTEK
C* FUNCTION ROUTINE FOR USING THE TEKPLOT, ONE PLOT PER CALL (UNLESS A B
C*          STATEMENT IS GIVEN).  ALLOWS THE USER
C*          TO SPECIFY ANY OR ALL 4 OF THE AXIS LIMITS, AXIS LENGTHS, DE
C*          PLOTTING SYMBOL OR A DIFFERENT  SYMBOL FOR EACH POINT, DEFAU
C*          SYMBOL SIZE OR A DIFFERENT SIZE FOR EACH POINT, AND TITLES F
C*          GRAPH. ALL PARAMETERS ARE OPTIONAL. NICE LIMITS WILL BE COMP
C*          FOR UNSPECIFIED LIMITS. OBSERVATIONS WITH MISSING X OR Y VAL
C*          WILL BE IGNORED.
C*          ANOTHER VERSION OF THIS PROCEDURE, PROC PLOTTEK, EXISTS FOR
C*          PUTTING TEKPLOT OUTPUT INTO A PERMANENT DATASET UNDER BATCH
C*          LATER PLOTTING WITH TSO. THE CALLING SEQUENCE FOR PLOTTEK IS
C*          IDENTICAL TO THAT OF TEKPLOT EXCEPT THAT THE USER SHOULD HAV
C*          TEKPLOT DD CARD INSTEAD OF THE UNCPLOT CARD.
C* ENTRY    PROC TEKPLOT <NOPOUT> <NOY0> <NOBY> XMIN= XMAX= YMIN= YMAX=
C*          XLEN= YLEN= SYMBOL= DEFSIZE= DTX= DTY= NF= PU= XINC= YINC=
C*          DBY= HBY= XMARGIN= YMARGIN=
C*          TITLE='ANY TITLE UP TO 40 CHARACTERS';
C*          GRAPH X Y; SIZE S; ID I;
C*          PARMCARDS;
C*          . . . TITLE CARDS . . .     FOR EXAMPLE:
C*          1.0 .25FIGURE 10
C*          .5  .20COMPARISON OF TIME AND VELOCITY
C* PARMS    NOPOUT   SPECIFIES THAT OUT OF RANGE POINTS ARE NOT TO BE PR
C*                   ON THE LOG FILE. 'NOP' MAY BE SUBSTITUTED FOR 'NOPO
C*          NOY0     SPECIFIES THAT NO TICK LABEL IS TO BE WRITTEN FOR T
C*                   LOWEST Y-AXIS TICK MARK. THIS IS USEFUL WHEN THE
C*                   Y-VARIABLE HAS A LONG WIDTH SO IT WON'T RUN INTO TH
C*                   LEFTMOST X TICK LABEL.
C*          NOBY     SPECIFIES THAT BY-GROUP LABELS ARE NOT TO BE PLOTTE
C*          XMIN,XMAX,YMIN,YMAX - AXIS LIMITS
C*          XLEN,YLEN           - AXIS LENGTHS IN INCHES
C*                   XLEN SET TO 10 IF UNSPECIFIED, YLEN TO 8 (6 AND 4 F
C*                   PLOTTEK). THE MAXIMUM PLOT SIZE FOR PLOTTEK IS XLEN
C*                   YLEN=4.9 NOT COUNTING ADDITIONAL TITLES USING PARMC
C*          SYMBOL   DEFAULT PLOTTING CHARACTER (1-95)WHEN ID VARIABLE I
C*                   MISSING. SEE TUCC MEMO #LSR048-3 FOR LIST OF SYMBOL
C*                   SET TO 4 ('X') IF UNSPECIFIED. SPECIFY A NEGATIVE N
C*                   IF POINTS ARE TO BE PLOTTED AS DOTS CONNECTED BY ST
C*                   LINES.
C JDO 8/78 IMPROVEMENTS TO ID AND SYMBOL
C        ID/SYMBOL MAY HAVE 5 DIGITS:
C        DIGIT 1 (    ONES PLACE): IF 0  PLOT IN BLACK
C        DIGIT 1 (    ONES PLACE): IF 1  PLOT IN RED, 2 BLACK, 3 BL
C        DIGIT 2 (    HUNDREDS  PLACE): IF 1, CONNECT POINTS TOGETHER
C        DIGIT 2 (    HUNDREDS  PLACE): IF 2-5, DOTTED LINES
C        DIGITS 3-4-5 (HUNDREDS,TENS,ONES)  IF NOT ZERO, PLOT THIS SYMBO
C
C
C*          DEFSIZE  DEFAULT CHARACTER SIZE IN INCHES WHEN THE SIZE VARI
C*                   MISSING, WHEN CONNECTED DOTS ARE NOT BEING PLOTTED.
C*                   TO .1 INCH WHEN UNSPECIFIED.
C*          DTX      DISTANCE IN INCHES BETWEEN  MINOR TICK MARKS ON X-A
C*          DTY      DISTANCE IN INCHES BETWEEN MINOR TICK MARKS ON Y-AX
C*                   DTX,DTY SET TO .5 IF UNSPECIFIED.
C*          NF       RATIO OF # MINOR TICK MARKS TO # MAJOR TICK MARKS (
C*                   ONES ARE LABELED)
C*                   NF SET TO 2 IF UNSPECIFIED.
C*                   NF APPLIES TO BOTH X AND Y AXES. IF A 2-DIGIT NUMBE
C*                   GIVEN, THE FIRST DIGIT IS FOR THE X-AXIS AND THE SE
C*                   FOR THE Y-AXIS.
C*          PU       IF THIS IS SPECIFIED, TITLE INFO WILL BE READ FROM
C*                   UNIT PU INSTEAD OF FROM PARMCARDS (DO NOT GIVE PARM
C*                   STATEMENT). THIS FACILITY CAN SAVE RECODING OF TITL
C*                   WHEN THEY ARE THE SAME FOR MANY PLOTS. ALSO, THE US
C*                   OUTPUT A TITLE FILE USING MACROS OR VARIABLES WHEN
C*                   A FEW FIELDS OF THE TITLES ARE THE SAME. PU CAN BE
C*                   SAME AS THE PARMCARDS UNIT (USUALLY 15), ALLOWING T
C*                   PARMCARDS SCRATCH FILE TO BE USED AS THE TITLE FILE
C*          XINC,YINC - INCREMENT BETWEEN MAJOR TICK MARKS IN DATA UNITS
C*                   XINC SHOULD BE USED EXCLUSIVELY FROM DTX AND SAME F
C*                   AND DTY.
C*          DBY      IF A BY-STATEMENT IS USED, DBY IS THE DISTANCE ABOV
C*                   Y-AXIS TO PUT THE TITLE FOR THE CURRENT BY-GROUP IN
C*                   INCHES. IT REFERS TO THE BOTTOM OF THE LETTERS.
C*                   DEFAULT IS .055.
C*          HBY      IF A BY STATEMENT IS USED, HBY IS THE HEIGHT OF THE
C*                   LETTERS FOR THE BY-TITLE IN INCHES. DEFAULT IS .085
C*          XMARGIN  DISTANCE BETWEEN BOTTOM OF PAPER AND X-AXIS IN INCH
C*                   DEFAULT IS .77.
C*          YMARGIN  DISTANCE BETWEEN LEFT OF PICTURE AND Y-AXIS IN INCH
C*                   DEFAULT IS .75.
C*          XGRID    IF XGRID=0, NO XGRID LINES: IF 1, LINES AT MAJOR
C*                   TICK MARKS; IF 2, LINES AT BOTH MAJOR AND MINORS.
C*          YGRID    IF YGRID=0, NO YGRID LINES: IF 1, LINES AT MAJOR
C*                   TICK MARKS; IF 2, LINES AT BOTH MAJOR AND MINORS.
C*  XGRID AND YGRID ADDED BY JDO 8/78
C*          TITLE    WILL APPEAR AT TOP OF GRAPH
C*          X,Y      NAME OF VARIABLES TO PLOT, X-AXIS VARIABLE FIRST. T
C*                   WORD 'GRAPH' MAY BE REPLACED BY 'VARIABLES' OR 'VAR
C*                   THERE MUST BE EXACTLY 2 VARIABLES SPECIFIED.
C*          S        NAME OF VARIABLE CONTAINING SIZE OF CHARACTERS TO P
C*                   APPLICABLE ONLY IF CONNECTED LINES ARE NOT BEING PL
C*                   S IS IN INCHES.
C*          I        NAME OF VARIABLE CONTAINING CHARACTER NUMBERS TO PL
C*                   (1-95), OR A NEGATIVE NUMBER TO PLOT CONNECTED LINE
C*
C*          PARAMETERS SIGDIG AND NF1 ARE OBSOLETE AND ARE IGNORED. PARA
C*          NF CAN ALSO BE CALLED NF2.
C*
C*          TICK MARK LABELS ARE WRITTEN WITH THE OUTPUT FORMAT OF THE X
C*          VARIABLES. THE FORMATS MAY BE DEFINED IN A FORMAT STATEMENT
C*          AFTER A DATA STATEMENT OR DIRECTLY AFTER THE PROC STATEMENT.
C*          16 CHARACTERS OF THE EXTERNAL FORMAT REPRESENTATION ARE USED
C*          WITH THESE FORMATS, THE USER CAN PLOT DATE VALUES,
C*          FRACTIONS, VALUE LABELS, ETC. WARNING: IF A MAJOR TICK MARK
C*          ON A NUMBER NOT ACCURATELY REPRESENTED BY THE OUTPUT FORMAT,
C*          TRUNCATION MAY OCCUR. FOR EXAMPLE, IF X HAD A FORMAT OF 4. A
C*          TICK NUMBER OF 7.2 WAS TO BE WRITTEN, IT WOULD BE WRITTEN AS
C*          IN THIS CASE THE USER SHOULD OVERRIDE THE FORMAT WITH ANOTHE
C*          SUCH AS "FORMAT X 4.1;" OR CHANGE THE PROC STATEMENT PARAMET
C*          XMIN,XMAX,YMIN,YMAX,XLEN,YLEN,DTX,DTY, OR NF.
C*          THE SAS "BEST 16 CHARACTER" FORMAT IS USED IF THE VARIABLE H
C*          FORMAT DEFINED.
C*
C*          ANY NUMBER OF TITLE CARDS CAN BE GIVEN IF PARMCARDS IS SPECI
C*          THE FORMAT OF THESE CARDS IS AS FOLLOWS:
C*                   COLUMNS   CONTENTS
C*                   -------   --------
C*                   1-4       DISTANCE ABOVE TOP OF Y-AXIS TO PUT TITLE
C*                             INCHES, MEASURED FROM BOTTOM OF LETTERS,
C*                             FORMAT. SPECIFY A DECIMAL POINT IF NOT IN
C*                   5-7       HEIGHT OF LETTERS IN TITLE IN INCHES IN F
C*                             FORMAT. IF LEFT BLANK, .1 WILL BE USED.
C*                   8-80      TITLE
C*
C*          THE TITLES WILL BE CENTERED WITH RESPECT TO THE X-AXIS AND C
C*          SPECIALLY PUNCHED CHARACTERS IN IT AS DESCRIBED IN THE TUCC
C*          PLOTTING GUIDE. THE TITLE PARAMETER AND PARMCARDS TITLES SHO
C*          MUTUALLY EXCLUSIVE. THE HEIGHT AND WIDTH OF CHARACTERS INCLU
C*          THE SURROUNDING SPACE IS 19/13*HEIGHT AND .85*HEIGHT, RESPEC
C*
C*          THE VARIABLE NAMES FOR X AND Y WILL BE USED AS AXIS LABELS U
C*          X OR Y HAVE BEEN GIVEN SAS LABELS WITH A LABEL STATEMENT, WH
C*          THEN WILL BE USED INSTEAD. NOTE THAT A LABEL STATEMENT CAN A
C*          AFTER THE PROC STATEMENT.
C*          WHEN S IS MISSING OR UNSPECIFIED, IT IS SET TO DEFSIZE. WHEN
C*          MISSING OR UNSPECIFIED, IT IS SET TO SYMBOL. IF I IS POSITIV
C*          THE PEN IS LIFTED AND MOVED TO THE NEW X,Y COORDINATES AND S
C*          IS DRAWN CENTERED AT THAT POINT. IF I IS NEGATIVE, THEN
C*                   (1) IF I IS THE SAME VALUE AS THE LAST OBSERVATION,
C*                       PEN IS KEPT DOWN AND A STRAIGHT LINE IS DRAWN F
C*                       THE LAST LOCATION TO THE NEW COORDINATES.
C*                   (2) IF I IS DIFFERENT FROM THE LAST OBSERVATION OR
C*                       IS THE VERY FIRST POINT PLOTTED, THE PEN IS LIF
C*                       MOVED TO (X,Y) AND NO DRAWING IS DONE.
C*          THESE FUNCTIONS ACCOMODATE DRAWING SEVERAL CURVES AND SETS O
C*          POINTS ON ONE PLOT.
C* EXIT     STOP
C* NOTE     TO COMPILE PLOTTEK, THE FOLLOWING CARDS SHOULD BE CHANGED:
C*          1. IN SASPROC STATEMENT IN LANGUAGE MODULE, CHANGE BOTH R'S
C*          2. IN BOTH LINKAGE EDITOR NAME CARDS CHANGE R TO K.
C*          3. IN THE SECOND SYSLIB CARD, INSERT THE STATEMENT:
C*                   "// DD DSN=USER.GRAPHICS,DISP=SHR" BEFORE THE
C*                   SYS1.SUBLIB CARD.
C*          4. CHANGE ".FALSE" TO ".TRUE." IN THE LOGICAL*1 TEK STATEMEN
C* JCL      // EXEC SAS
C*          //UNCPLOT DD SYSOUT=C (OR TEKPLOT DD DSN=... FOR PLOTTEK).
C*          SPECIFY PLOTS=K, WHERE K IS ROUGHLY 1000 PER PLOT, ON THE JO
C*          CARD. IT IS BETTER TO OVERESTIMATE K.
C* LANGUAGE FORTRAN
C* AUTHOR   FRANK HARRELL
C* DATE     1FEB76  MODIFIED 16OCT76  MODIFIED 14SEP77
C* SUBSTANTIAL CHANGES MADE BY JIM OLEKSIW, NORTHEAST UTILITES  S. CO.
C*   AUGUST 1978
C*
C***********************************************************************
C   END
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL*1 TEK/.FALSE./
CCCC ADDITIONS FOR TEKPLOT ADDITION  JDO 8/78
CCCC  JDO 8/78 CHANGES TO CALL PLOT AND CALL SYMBOL
CCCC   CALL PLOT(X,Y,1) => CALL PLOT(X,Y,3)
CCCC   CALL PLOT(X,Y,0) => CALL PLOT(X,Y,2)
CCCC   CALL SYMBOL(X,Y,HEIGHT,ALPHA,THETA) =>
C          CALL SYMBOL(X,Y,HEIGHT,ALPHA,THETA,NCHAR)
CCCC  NOTE THAT ALL SYMBOL CALLS HAD TO HAVE THE ALPHA END IN AN '_'
CCCC  SWITCHED TO BLANKS CAUSE IT DIDN'T MATTER  JDO 8/78
C     TEK SHOULD EQUAL .TRUE. IF USING TEKTRONIX PLOTTER PACKAGE (I.E. P
C     PLOTTEK.
      LOGICAL MISS,NOPOUT,PARMT,NOBY
      INTEGER*2 NDUM1(4),NDUM2(12)
      LOGICAL*1 NNAME(8),NLABEL(40),XLABEL(41),YLABEL(41)
      LOGICAL*1 TITLE(41),BL/' '/
      REAL*8 DTITLE(5),DBL/'        '/
      REAL*4 XL,YL,DX,DY,XINC,YINC,DBY,HBY,XMARG,YMARG
      REAL*8 BASE(1)
C  ADDED BY JDO 8/78
      REAL*4 XGRID, YGRID, SYMRAT
C
      COMMON/NAMECM/NDUM1,NNAME,NLABEL,NDUM2
      EQUIVALENCE (DTITLE(1),TITLE(1))
      CALL SASFT
C
CCCC SET UP LOGICAL UNIT 14 AS THE PLOT FILE    JDO 8/78
C
C     SEE THAT GRAPH LIST (LIST #1) HAS EXACTLY 2 VARIABLES
C
      IF(NOVAR(1).EQ.2)GO TO 10
C  JDO 1/79
      CALL SASLOG(' ERROR - THE ->GRAPH<- STATEMENT WAS MISSING',44)
      STOP
C
C     SEE IF SIZE VARIABLE PRESENT
C
   10 NSIZE=NOVAR(3)
C
C     SEE IF ID VARIABLE PRESENT
C
      NID=NOVAR(7)
C
C     GET PARAMETERS
C
      XMIN=PARM(1)
      XMAX=PARM(2)
      YMIN=PARM(3)
      YMAX=PARM(4)
      XLEN=PARM(5)
      YLEN=PARM(6)
      SYMBOL=PARM(7)
      DEFSIZ=PARM(8)
      DO 15 I=1,5
      DTITLE(I)=PARM(I+9)
      IF(MISS(DTITLE(I)))DTITLE(I)=DBL
   15 CONTINUE
      DTX=PARM(15)
      DTY=PARM(16)
      NF =PARM(18)
      XINC=PARM(20)
      YINC=PARM(21)
      DBY=PARM(22)
      HBY=PARM(23)
      XMARG=PARM(24)
      XGRID=PARM(26)
C     ADDED JDO 8/78
      YGRID=PARM(27)
      IF (MISS (PARM(26)) ) XGRID = 0.0
      IF (MISS (PARM(27)) ) YGRID = 0.0
      SYMRAT = PARM(28)
      IF (MISS (PARM(28)) ) SYMRAT = 1.0
      YMARG=PARM(25)
      IF(TEK.AND.MISS(XLEN))XLEN=6.
      IF(TEK.AND.MISS(YLEN))YLEN=4.
      IF(MISS(XLEN))XLEN=10.
      IF(MISS(YLEN))YLEN=8.
      XL=XLEN
      YL=YLEN
C     JDO 8/78 NEW DEFAULT
      IF(MISS(SYMBOL))SYMBOL=402
      IF(MISS(DEFSIZ))DEFSIZ=.1
      DX=DTX
      DY=DTY
      IF(MISS(PARM(18)))NF=2
      IF(DX.LE.0..AND.XINC.LE.0.)DX=.5
      IF(DY.LE.0..AND.YINC.LE.0.)DY=.5
      IF(DBY.EQ.0.)DBY=.055
      IF(HBY.LE.0.)HBY=.085
      IF(XMARG.LE.0.)XMARG=.77
      IF(YMARG.LE.0.)YMARG=.75
C     APPLY NF SAME TO BOTH AXES?
      IF(NF.LT.10)NF=11*NF
C
C     GET OPTIONS. PARMT=PARMCARDS SPECIFIED
C
      NOPOUT=IOPT(1).EQ.1
      NOBY=(IOPT(3).EQ.1).OR.(NOVAR(8).EQ.0)
C
C     ADDED BY JDO 8/78
C
      PARMT=IOPT(63).EQ.1
C
C     GET UNIT NUMBER FOR LOG OUTPUT AND PARMCARDS
C
      IF(.NOT.NOPOUT)CALL UNIT(1,LOG)
      IF(PARMT)CALL UNIT(5,IPT)
      IF(.NOT.MISS(PARM(19)))PARMT=.TRUE.
      IF(.NOT.MISS(PARM(19)))IPT=PARM(19)
C     OPEN PARMCARDS FILE BEFORE CALLING GETSTR
      IF(PARMT)READ(IPT,20)
   20 FORMAT(A1)
C
C     GET LABEL FOR X AND Y VARIABLES
C
      CALL NAMEV(1,1,NDUM1)
      CALL LABSET(XLABEL,NLABEL,NNAME)
      CALL NAMEV(1,2,NDUM1)
      CALL LABSET(YLABEL,NLABEL,NNAME)
C
C     ALLOCATE ALMOST ALL AVAILABLE CORE
C
      CALL GETSTR(-1,BASE,I1,ISW,6500)
      INEED=ISW
      CALL GETSTR(INEED,BASE,I1,IGOT,6500)
      ISW=ISW*8
C
C     SPLIT BASE ARRAY INTO AREAS FOR X AND Y ARRAYS (4 BYTES PER
C     ELEMENT), SIZE ARRAY IF PRESENT (4 BYTES PER ELEMENT) , AND ID
C     ARRAY IF PRESENT (2 BYTES PER ELEMENT).  LET N = # X-Y PAIRS.
C     SET  ISW=4*2*N+4*N*(NSIZE=1)+2*N*(NID=1)
C             =N*(8+4*(NSIZE=1)+2*(NID=1))
C
      NEED=8
      IF(NSIZE.EQ.1)NEED=NEED+4
      IF(NID.EQ.1)NEED=NEED+2
C     NMAX=MAX # X-Y PAIRS THAT CAN BE ALLOCATED
      NMAX=ISW/NEED-4
      I2=I1+(NMAX+1)/2
      I3=I2+(NMAX+1)/2
      I4=I3+(NMAX+1)/2
      IF(NSIZE.NE.1)I4=I3
      CALL DOPLOT(NSIZE,NID,XMIN,XMAX,YMIN,YMAX,XL,YL,
     &       XINC,YINC,DBY,HBY,XMARG,YMARG,
     &       SYMBOL,DEFSIZ,
     &            XLABEL,YLABEL,NTITLE,TITLE,NMAX,N,NOPOUT,NOBY,LOG,
     &       DX,DY,PARMT,IPT,NF,TEK, XGRID, YGRID,            SYMRAT,
     &            BASE(I1),BASE(I2),BASE(I3),BASE(I4))
C
C                    X        Y      SIZE      ID
C
C     TELL SAS HOW MUCH CORE WAS UNUSED
      CALL UNUSED(NEED*(NMAX+4-N))
      STOP
      END
      SUBROUTINE DOPLOT(NSIZE,NID,XMIN,XMAX,YMIN,YMAX,XLEN,YLEN,
     &             XINC,YINC,DBY,HBY,XMARG,YMARG,
     &             SYMB  ,DEFSIZ,     XLABEL,YLABEL,NTITLE,TITLE,NMAX,N,
     &             NOPOUT,NOBY,LOG,DX,DY,PARMT,IPT,NF,TEK, XGRID,YGRID,
     &             SYMR,X,Y,SIZ ,ID)
      REAL*8 VAR
C        JDO CHANGES 7/78
      LOGICAL   XMS,YMS
      EQUIVALENCE (DUM(1), TOTY) , (DUM(2), TOTX),
     .            (DUM(3),YMAXD) , (DUM(4),XMAXD)
      DIMENSION MYBUFF(1000), NPEN(12,4), ROOM(4) ,DUM(4)
      REAL*4 TOTY  , TOTX , XMAXD, YMAXD, PARMHT/0.0/
       DATA NPEN /2,3,2,3,  2,3,2,3,  2,3,2,3,
     . 2,2,2,3,  2,3,2,3,  2,2,2,3,
     . 2,2,2,3,  2,3,2,2,  2,3,2,3,
     . 2,2,2,3,  2,2,2,3,  2,2,2,3 /
      DATA  ROOM /.1, .6, .3, .2001/
C
      LOGICAL MISS,MS,NOPOUT,PARMT,NOBY
      LOGICAL*1 XLABEL(41),YLABEL(41),TITLE(41),TITL(65),TEK
      LOGICAL*1 BYDATA(133),BLANK/' '/,UND/' '/
      REAL*4 X(NMAX),Y(NMAX),SIZ (NMAX)
      INTEGER*2 ID(NMAX)
      REAL*8 XMIN,XMAX,YMIN,YMAX,DEFSIZ,SYMB  ,XX,YY,SS,DD
C     ESTABLISH ORIGIN, INITIALIZE PLOTTER
C     JDO 8/78
      NRATIO = IFIX(SYMR)
      IF (NRATIO .LT. 1 .OR. NRATIO .GT. 500) NRATIO = 1
C     CLAMP THE NRATION VALUES.
C     CONVERT SYMBOL RATIO INTO INTEGER
C
C        FIND OUT WHICH UNIT TO USE
         CALL UNIT (4,LUNIT)
    5    CALL PLOTS(MYBUFF,1000,LUNIT)
         IF (.NOT.TEK) CALL PLOT (1., -12., -3)
         IF (TEK) CALL PLOT (0., 0., -3)
      TOTY = 0.
      TOTX = 0.
      XMAXD = 0.
      YMAXD = 0.
C
      IF (.NOT. TEK) CALL  PLOT (XMARG,YMARG, -3)
CCCC
    1 LASTID=0
C     INITIALIZE COLOR                       JDO 8/78
      CALL NEWPEN(2)
      XLAST = 0.
      YLAST = 0.
      NPL=0
C
C     READ DATA, IGNORING OBSERVATIONS WITH MISSING X OR Y VALUES
C
      N=0
C        JDO 8/78
      XMS=MISS(XMIN).OR.MISS(XMAX)
      YMS= MISS(YMIN).OR.MISS(YMAX)
C
      XMN=1.E60
      XMX=-1.E60
      YMN=1.E60
      YMX=-1.E60
   10 CALL INPUT(IEND)
      IF(IEND.EQ.1)GO TO 60
      XX=VAR(1,1)
      YY=VAR(1,2)
      IF(MISS(XX).OR.MISS(YY))GO TO 10
      N=N+1
C     GET CURRENT BY-TITLE
      IF((.NOT.NOBY).AND.N.EQ.1)CALL BYLINE(BYDATA)
      IF(N.LE.NMAX)GO TO 20
      CALL SASLOG('0ERROR: INSUFFICIENT CORE FOR X-Y VALUES',40)
      STOP
   20 XXX=XX
      YYY=YY
      X(N)=XXX
      Y(N)=YYY
C        JDO 8/78
      IF(.NOT.XMS)GO TO 35
C
      XMN=AMIN1(XMN,XXX)
      XMX=AMAX1(XMX,XXX)
C        JDO 8/78
   35 IF(.NOT.YMS)GO TO 30
C
      YMN=AMIN1(YMN,YYY)
      YMX=AMAX1(YMX,YYY)
   30 IF(NSIZE.NE.1)GO TO 40
      SS=VAR(3,1)
      IF(MISS(SS))SS=DEFSIZ
      SIZ (N)=SS
   40 IF(NID.NE.1)GO TO 10
      DD=VAR(7,1)
      IF(MISS(DD))DD=SYMB
      ID(N)=DD
      GO TO 10
C
   60 IF(N.GT.1)GO TO 70
      CALL OBSERR
      STOP
C
C     COMPUTE OPTIMUM LIMITS FOR PLOTTING IF ANY LIMITS UNSPECIFIED
C
   70 CALL BYPASS(IB)
C        JDO 8/78
      IF(.NOT.XMS)GO TO 81
      IF(XMN.GE.XMX)GO TO 86
C
      CALL PAXIS(XMN,XMX)
   81 IF (.NOT. YMS) GO TO 80
      IF(YMN.GE.YMX)GO TO 88
      CALL PAXIS(YMN,YMX)
C
   80 IF(.NOT.MISS(XMIN))XMN=XMIN
      IF(.NOT.MISS(XMAX))XMX=XMAX
      IF(.NOT.MISS(YMIN))YMN=YMIN
      IF(.NOT.MISS(YMAX))YMX=YMAX
C
C     ADDITIONAL ERROR CHECKS INSERTED 1/79
      IF ( MISS(YMX) .OR. MISS(XMX) ) GO TO 87
      IF ( YMN .LT. YMX) GO TO 82
   88 CALL SASLOG('0ERROR: YMIN>=YMAX              ',32)
      GO TO 83
   82 IF(XMN.LT.XMX )GO TO 90
   86 CALL SASLOG('0ERROR: XMIN>=XMAX              ',32)
   83 STOP
   87 CALL SASLOG('0ERROR: THE XMAX OR YMAX VALUE WAS MISSING',42)
      GO TO 83
C
C     PLACE UNDERSCORE DELIMITERS IN XLABEL,YLABEL,TITLE
C
   90 CALL DELIM(XLABEL,40,LENX)
      CALL DELIM(YLABEL,40,LENY)
      CALL DELIM(TITLE,40,LENT)
C
C     SET UP GRAPH AND DRAW AXES AND LABELS
C
CCCC  IF(TEK)CALL PICSIZ(7.95,6.0) JDO
CCCC  IF(.NOT.TEK) JDO
CCCC &CALL PICSIZ(XLEN+YMARG+.55,AMIN1(AMAX1(YLEN+XMARG+3.23,11.),29.5))
C     LEAVE ROOM FOR MARGINS
CCCC  CALL ORIGIN(YMARG,XMARG) JDO
C     DETERMINE WHERE TO MOVE THE NEW ORIGIN: PERMIT MULTIPLE PLOTS
C     JDO 8/78                                                         P
      CALL PLOT(0.0, YMAXD, -3)
      IF (YMARG + YLEN +TOTY + PARMHT .LT. 33.) GO TO 905
C     PAPER IS FILLED TO TOP, START DOWN AT BOTTOM
      CALL PLOT(TOTX+XMARG,-TOTY, -3)
      TOTY = 0.0
      TOTX = 0.0
905   YMAXD = 0.0
      CALL  PLOT (0.,YMARG, -3)
CCCC NOTE THE MAXIMUM IS SEEN AS .1 ABOVE THE HIGHEST POINT
      YMAXD = AMAX1(YMAXD, YLEN+.4)
      XMAXD = AMAX1(XMAXD, XLEN+.1)
      IF(LENT.GT.0)CALL SYMBOL((XLEN-LENT*.85*.1)/2,YLEN+.2,.1,TITLE,0.,
     .   LENT )
C     WRITE CURRENT BY-TITLE
      IF(NOBY)GO TO 940
C     FIND FIRST AND LAST NON-BLANK CHARACTER
      DO 900 I=1,132
      IF(BYDATA(I).NE.BLANK)GO TO 910
  900 CONTINUE
      GO TO 940
  910 ISTART=I
      DO 920 I=1,132
      IF(BYDATA(133-I).NE.BLANK)GO TO 930
  920 CONTINUE
      GO TO 940
  930 IEND=133-I
      ILEN=IEND-ISTART+1
      BYDATA(IEND+1)=UND
      YMAXD= AMAX1( YLEN+DBY+HBY+.2,  YMAXD)
C     ABOVE ADDED IN 8/78, JDO
      CALL SYMBOL((XLEN-ILEN*.85*HBY)/2.,YLEN+DBY,HBY,BYDATA(ISTART),0.,
     . ILEN)
  940 IF(.NOT.PARMT)GO TO 95
      REWIND IPT
C        JDO 2/79  SPECIFY THE X COORDINATE
   91 READ(IPT,92,END=95)PLACE,HT,(TITL (I),I=1,61),XCOORD
C        JDO 2/79
   92 FORMAT(F4.0,F3.2,61A1,F4.1)
      IF(HT.EQ.0.)HT=.1
      CALL DELIM(TITL,61,LENTL)
C        JDO 2/79
      IF (XCOORD .EQ. 0.0)
     .XCOORD = (XLEN-LENTL*.85*HT)/2.
      XCOOL = XCOORD + FLOAT(LENTL) *  HT
      XMAXD = AMAX1(XMAXD,XCOOL )
      YMAXD = AMAX1(YMAXD, YLEN+PLACE+HT+.2)
      PARMHT= AMAX1(PARMHT,PLACE+HT)
      CALL SYMBOL(XCOORD,YLEN+PLACE,HT,TITL,0., LENTL)
      GO TO 91
   95 CONTINUE
      XF=XLEN/(XMX-XMN)
      YF=YLEN/(YMX-YMN)
C     SUBROUTINE FACTOR CANNOT BE USED BECAUSE OF A DOUBLY-DEFINED REFER
C     DRAW X-AXIS
      NG=NF/10
      XI=XINC
      IF(XINC.GT.0.)GO TO 96
      DMAJOR=DX*NG
      DMINOR=DX
      XI  =DMAJOR*(XMX-XMN)/XLEN
      GO TO 98
   96 DMAJOR=XINC*XLEN/(XMX-XMN)
      DMINOR=DMAJOR/NG
C     GRIDS ADDED 8/78, JDO
   98 CALL AXIS(0.,XLEN,XMN,XI  ,DMAJOR,DMINOR, XGRID, YLEN,XMAXD)
      CALL SYMBOL((XLEN-LENX*.85*.1)/2.,-.47,.1,XLABEL,0., LENX)
C     ENCLOSE GRAPH
      CALL PLOT(XLEN,0.,3)
      CALL PLOT(XLEN,YLEN,2)
      CALL PLOT(0.,YLEN,2)
C     DRAW Y-AXIS
      NG=MOD(NF,10)
      YI=YINC
      IF(YINC.GT.0.)GO TO 100
      DMAJOR=DY*NG
      DMINOR=DY
      YI  =DMAJOR*(YMX-YMN)/YLEN
      GO TO 102
  100 DMAJOR=YINC*YLEN/(YMX-YMN)
      DMINOR=DMAJOR/NG
C     ADDED 8/78, JDO
  102 CALL AXIS(90.,YLEN,YMN,YI  ,DMAJOR,DMINOR, YGRID, XLEN, YMAXD)
C     MAKE Y-AXIS LABEL SLANT 30 DEGREES TO THE RIGHT
CCCC  CALL FONT(30.,1.,1.) JDO 8/78
      CALL SYMBOL(-.47,(YLEN-LENY*.85*.1)/2.,.1,YLABEL,90., LENY)
CCCC  CALL FONT(0.,1.,1.) JDO 8/78
C
C     ADDED BY JDO 8/78
C     DRAW A BOX AROUND THE ENTIRE GRAPH
C
      CALL PLOT( -XMARG, -YMARG, 3)
      CALL PLOT(  XMAXD, -YMARG, 2)
      CALL PLOT(  XMAXD,  YMAXD, 2)
      CALL PLOT(-XMARG ,  YMAXD, 2)
      CALL PLOT(-XMARG , -YMARG, 2)
C
C     PLOT POINTS
C
      DEFS=DEFSIZ
      IS=SYMB
      DO 200 I=1,N
      IF(NSIZE.EQ.0)S=DEFS
      IF(NSIZE.EQ.1)S=SIZ (I)
      IF(NID.EQ.0)JD=IS
      IF(NID.EQ.1)JD=ID(I)
      XXX=X(I)
      YYY=Y(I)
C
C     PRINT OUT OF RANGE VALUES
C
      IF(XXX.GE.XMN.AND.XXX.LE.XMX.AND.YYY.GE.YMN.AND.YYY.LE.YMX)
     &      GO TO 130
      IF(.NOT.NOPOUT)WRITE(LOG,120)XXX,YYY
  120 FORMAT(' NOTE: OUT OF RANGE (',E13.6,',',E13.6,')')
C     JDO 1/79
      GO TO 200
  130 NPL=NPL+1
CCCC  IF(JD.LT.0)GO TO 150
C
C     PLOT INDIVIDUAL SYMBOL
C
CCCC   JDO 7/78
C        JCOLOR IS COLOR TO PLOT IN.
         JCOLOR = MOD (JD,10)
         IF ( JCOLOR .GT. 3) JCOLOR = 2
C        JSYM IS THE SYMBOL TO PLOT: IF 0, DO NOT PLOT SYMBOLS
         JSYM = IABS     (JD / 100)
C        JPLOT IS A FLAG TO CONNECT POINTS: IF 1, CONNECT
         JPLOT = MOD(JD,100) / 10
C        CHECK FLAG FOR PLOTTING
         IF (JD .NE. LASTID .AND. JCOLOR .NE. 0) CALL NEWPEN(JCOLOR)
C        NOW SEE IF THE LINES ARE TO BE DRAWN
         IF (JPLOT .EQ. 0) GO TO 195
         IF (JPLOT .GT. 1) GO TO 188
C     HANDLE A JPLOT OF 1: JUST A SIMPLE CONNECTED LINE
CCCC  CALL PLOT((XXX-XMN)*XF,(YYY-YMN)*YF,3) JDO 7/78
CCCC  CALL MARK(JD,S) JDO 8/78
CCCC  GO TO 180
C
C     PLOT CONNECTED POINTS
C
      IF(JD.NE.LASTID.OR.NPL.EQ.1)CALL PLOT((XXX-XMN)*XF,(YYY-YMN)*YF,3)
      IF (JSYM .EQ. 0) GO TO 160
      IF(JD.NE.LASTID.OR.NPL.EQ.1) GO TO 160
      CALL PLOT(XLAST, YLAST, 3)
  160 IF(JD.EQ.LASTID.AND.NPL.GT.1)
     &      CALL PLOT((XXX-XMN)*XF,(YYY-YMN)*YF,2)
      XLAST = (XXX-XMN)*XF
      YLAST = (YYY-YMN)*YF
      GO TO 195
C
C     THE FOLLOWING LOGIC WAS BASED UPON SKETCHIT
C LINETYPE: 2 _ _ _ _ _ _
C           3 ___ _ _ ___
C           4 ___ _ ___ _
C           5 ___ ___ ___
C
C     FOUR DIFFERENT LINE TYPES ARET PLOTTED (JPLOT-1 = LTYPE)
C     BASIC WIDTH IS .05 IN THE Z DIRECTION BETWEEN POINTS
C      MODULE 12 IS USED TO PROVIDE CONTINUITY FOR ANY LINE TYPE
C     FROM POINT 1 TO POINT NP. IF DZ BETWEEN POINTS IS LESS THAN .1,
C     OR REMAINING MOVE TO A POINT IS LESS THAN .1, THE PEN MOVES
C     TO THE POINT WITH THE LAST NPN USED.  DN = .1/SCALX IS USED
C     TO PROVIDE .1 INDEPENDENT OF SCALING.
C
C
C
C     FIRST DETERMINE IF THERE IS ENOUGH ROOM TO PLOT SYMBOL
  188 LTYPE = JPLOT - 1
C     CLAMP ON LTYPE
      IF (LTYPE .GT. 4) LTYPE = 1
      THISX = (XXX-XMN)*XF
      THISY = (YYY-YMN)*YF
      IF (JD .NE. LASTID .OR. NPL .EQ. 1) GO TO 191
      IF (JSYM .EQ. 0) GO TO 189
      CALL PLOT(XLAST , YLAST, 3)
 189  DX0 = THISX - XLAST
      DY0 = THISY - YLAST
      DZ = SQRT( DX0*DX0 + DY0*DY0 )
C     KNOWING THE DISTANCE, SEE IF IT IS ENOUGH TO PLOT
      IF (DZ .LT. ROOM(LTYPE) ) GO TO 195
      L$ = DZ / ROOM(LTYPE)
      SPACE =(DZ / ROOM(LTYPE) - FLOAT(L$) ) /20.
C     ONCE THE NUMBER OF TIMES FIGURE IS TO BE PLOTTED,
C     IS COMPUTED, AND THE EXTRA SPACING AT THE BEGINNING AND END,
C     PLOTTING MAY BE BEGUN
C
C     COMPUTE THE NO. OF TIMES TO GO THUR LOOP
      NTIMES = ROOM(LTYPE) / .05
      DX0 = DX0 /(L$ * NTIMES)
      DY0 = DY0 /(L$ * NTIMES)
      CALL PLOT(XLAST+SPACE*DX0, YLAST+SPACE*DY0, 3)
      JCNTR3 = 0
      DO 196 JCNTR1 = 1, L$
      DO 196 JCNTR2 = 1, NTIMES
      NPN = NPEN(JCNTR2,LTYPE)
      JCNTR3 = JCNTR3 + 1
      POINTX = XLAST  + JCNTR3*DX0
      POINTY = YLAST  + JCNTR3*DY0
      CALL PLOT(POINTX, POINTY, NPN)
  196 CONTINUE
  191 CALL PLOT(THISX, THISY, 3)
      XLAST=THISX
      YLAST=THISY
C
C
C        SEE IF WE PLOT A SYMBOL
  195 NRAT = MOD (I,NRATIO )
         IF (JSYM .NE. 0 .AND. NRAT .EQ. 0)
     &CALL SYMBOL((XXX-XMN)*XF,(YYY-YMN)*YF,S,JSYM,0.0,-1)
  180 LASTID=JD
  200 CONTINUE
C     COMPUTE NEW X AND Y MAXIMUM VALUES
      TOTY = TOTY + YMAXD + YMARG
      TOTX = AMAX1(XMAXD, TOTX)
C
C
C     SEE IF ANY MORE BY GROUPS NEED TO BE PROCESSED
C
      IF(IB.NE.0)GO TO 1
C
C     CLOSE TEKPLOT FILE
C
CCCC JDO 8/78
C
      CALL PLOT  (TOTX+XMARG,-TOTY,-3)
         IF (TEK) CALL PLOT(36,36,-3)
      CALL PLOT  (0.,0.,999)
C     CALL CLOSED
 999  RETURN
      END
      SUBROUTINE AXIS(ANGLE,LEN,MIN,INC,MAJOR,MINOR,GRID, GRIDL,ZMAX)
C     GRIDS ADDED 8/78
      REAL LEN,MIN,INC,MAJOR,MINOR
      LOGICAL*1 LABEL(17),BL/' '/,U/' '/
      REAL*8 DBLE
C  FIND OUT WHAT LENGTH THE TICK MARKS WILL BE
      TICKX = .015
      TICKY = .015
      IF (GRID .GT. 0.) TICKX = GRIDL
      IF (GRID .GT. 1.) TICKY = GRIDL
C
      X=MIN
      POS=0.
      IV=1
      IF(ANGLE.NE.0.)IV=2
      ID=MAJOR/MINOR+.001-1.
C     DO NOT WRITE LOWEST Y-AXIS TICK LABEL IF OPTION 2 SPECIFIED
   10 IF(IV.EQ.2.AND.POS.EQ.0..AND.IOPT(2).EQ.1)GO TO 55
      CALL FORMAT(1,IV,LABEL,16,DBLE(X))
C     DELETE LEADING AND TRAILING BLANKS
      DO 20 I=1,16
      IF(LABEL(I).NE.BL)GO TO 30
   20 CONTINUE
      GO TO 55
   30 ISTART=I
      DO 40 I=1,16
      IF(LABEL(17-I).NE.BL)GO TO 50
   40 CONTINUE
      GO TO 55
   50 IEND=17-I
      ILEN=IEND-ISTART+1
      LABEL(IEND+1)=U
      P=POS-ILEN*.85*.1/2.
      IF(IV.EQ.2) GO TO 53
                 ZMAX = AMAX1(ZMAX,P+FLOAT(ILEN)*.1+.3)
                 CALL SYMBOL(P,-.25,.1,LABEL(ISTART),0., ILEN )
                GO TO 55
   53            ZMAX = AMAX1(ZMAX,P+FLOAT(ILEN)*.1+.3)
                 CALL SYMBOL(-.125,P,.1,LABEL(ISTART),90., ILEN )
C     DRAW MAJOR TICK MARK
   55 IF(IV.EQ.2)GO TO 70
      CALL PLOT(POS,TICKX,3)
      CALL PLOT(POS,-.09,2)
      CALL PLOT(POS,0.,2)
      IF(POS.GT.(LEN-.05))RETURN
      IF(ID.EQ.0)GO TO 60
C     DRAW MINOR TICK MARK
      P=POS
      DO 58 I=1,ID
      P=P+ MINOR
      CALL PLOT(AMIN1(P,LEN),0.,2)
      IF(P.GT.(LEN-.05))RETURN
      CALL PLOT(P,TICKY,2)
      CALL PLOT(P,-.045,2)
   58 CALL PLOT(P,0.,2)
   60 CALL PLOT(AMIN1(POS+MAJOR,LEN),0.,2)
      GO TO  100
C     DRAW MAJOR TICK MARK
   70 CALL PLOT(TICKX,POS,3)
      CALL PLOT(-.09,POS,2)
      CALL PLOT(0.,POS,2)
      IF(POS.GT.(LEN-.05))RETURN
      IF(ID.EQ.0)GO TO 90
C     DRAW MINOR TICK MARK
      P=POS
      DO 80 I=1,ID
      P=P+ MINOR
      CALL PLOT(0.,AMIN1(P,LEN),2)
      IF(P.GT.(LEN-.05))RETURN
      CALL PLOT(TICKY,P,2)
      CALL PLOT(-.045,P,2)
   80 CALL PLOT(0.,P,2)
   90 CALL PLOT(0.,AMIN1(POS+MAJOR,LEN),2)
C
  100 POS=POS+ MAJOR
      IF(POS.GT.(LEN+.05))RETURN
      X=X+INC
      GO TO 10
      END
      SUBROUTINE LABSET(LABEL,NLABEL,NNAME)
C
C     PLACES NLABEL INTO LABEL UNLESS NLABEL IS ALL BLANK, IN WHICH
C     CASE IT PUTS NNAME INTO THE FIRST 8 BYTES OF LABEL
C
      LOGICAL*1 LABEL(40),NLABEL(40),NNAME(8),BL/' '/
C
      DO 10 I=1,40
   10 LABEL(I)=NLABEL(I)
      DO 20 I=1,40
      IF(NLABEL(I).NE.BL)RETURN
   20 CONTINUE
      DO 30 I=1,8
   30 LABEL(I)=NNAME(I)
      RETURN
      END
      SUBROUTINE DELIM(L,N,LEN)
C     PUT UNDERSCORE IN LAST BLANK CHARACTER FROM RIGHT OR AT N+1 IF NON
      LOGICAL*1 L( 2),U/' '/,B/' '/
      DO 10 I=1,N
      J=N+1-I
      IF(L(J).NE.B)GO TO 20
   10 CONTINUE
      L(1)=U
      LEN=0
      RETURN
   20 L(J+1)=U
      LEN=J
      RETURN
      END
      LOGICAL FUNCTION MISS(X)
      REAL*8 X,XMISS
      EQUIVALENCE (XMISS,MISSX)
      XMISS=X
      MISS=(XMISS.EQ.0.D0).AND.(MISSX.NE.0)
      RETURN
      END
      SUBROUTINE PAXIS(XMIN,XMAX)
C      ROUTINE TO REPLACE XMIN AND XMAX WITH ROUNDED LIMITS FOR PLOTTING
      IA=ALOG10((XMAX-XMIN)*2.)-1.
      ADIF=10.**IA
      MAXA=1.+XMAX/ADIF
      XMAX=MAXA
      XMAX=ADIF*XMAX
      MINA=XMIN/ADIF
      IF(XMIN.LT.(-ADIF/10.))MINA=XMIN/ADIF-1.
      XMIN=MINA
      XMIN=ADIF*XMIN
      RETURN
      END
//STEP4  EXEC PGM=IEWL,PARM='MAP,LIST'
//SYSPRINT DD SYSOUT=A
//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(40,20))
//*
//*  INCLUDE THE PROPER LINK EDIT STATEMENTS AS REQUIRED
//*
//DD1  DD  DSN=NEWCOMB.LOADMOD.LOAD,DISP=SHR
//SYSLIB DD DSN=SYS1.FORTXLIB,DISP=SHR
// DD DSN=USER.SAS.LIBRARY,DISP=SHR
//   DD DSN=USER.SUBLIB,DISP=SHR
//SYSLIN DD DSN=&&LOADSET,DISP=(OLD,DELETE)
// DD *
 ENTRY ENTRY
 SETSSI AD000000
 INCLUDE DD1(PLOTSUBS)
 NAME CALCOMP2(R)
//SYSLMOD DD DSN=USER.SAS.LIBRARY,DISP=SHR
