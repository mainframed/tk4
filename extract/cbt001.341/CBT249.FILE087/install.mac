UNIVERSITY OF MANITOBA
IMS COMPRESSION/EXPANSION EXIT - INSTALLATION AND USE

OVERVIEW:
    SIX SOURCE PROGRAMS ARE SUPPLIED. FOUR OF THESE ARE WRIITEN
IN IBM/370 ASSEMBLER LANGUAGE (COMP, COMPEXP, EXPD, TYPE),
AND 2 OF THEM ARE WRITTEN IN PL/1 (COUNT, TREE).
THE ROUTINE NAMED "COMP" DOES THE ACTUAL COMPRESSION BASED ON
INFORMATION YOU SUPPLY ABOUT THE DATA TO BE COMPRESSED AND
THE ROUTINE NAMED "EXPD" EXPANDS THE DATA BASED ON THE SAME
INFORMATION. THE ROUTINE "COMPEXP" IS A FRONT-END ROUTINE WHICH
DETERMINES WHETHER COMPRESSION OR EXPANSION IS TO BE PERFORMED
ON THIS INVOCATION. THE ROUTINES "TYPE", "COUNT", AND "TREE"
(ALONG WITH ANOTHER SET OF ASSEMBLER SOURCE GENERATED BY "TREE")
PROVIDE THE BIT MAPS USED BY THE COMPRESSION/EXPANSION ROUTINES
TO DO THE ACTUAL DATA COMPRESSION/EXPANSION.
THERE ARE SEVERAL STEPS WHICH YOU MUST PERFORM TO PRODUCE A
WORKING SET OF COMPRESSION ROUTINES. THESE STEPS FOLLOW:

     1. RUN THE FOLLOWING JCL TO COPY THE CONTENTS OF THE
DISTRIBUTION TAPE TO DISK. YOU MUST MODIFY THIS JCL TO SUIT
YOUR INSTALLATION"S REQUIREMENTS.
//COMPLIBS JOB    ETC.
//S1 EXEC PGM=IEBCOPY
//SYSPRINT DD SYSOUT=A
//ASMOUT DD DSN=IMSVS.COMPRESS.ASM,UNIT=DISK,VOL=SER=SYS003,
//   DISP=(NEW,CATLG),SPACE=(TRK,(1,1,3)),
//   DCB=(RECFM=FB,LRECL=80,BLKSIZE=6080,DSORG=PS)
//ASMIN DD DSN=ASM,UNIT=TAPE,LABEL=(2,SL),DISP=(SHR,PASS),
//   VOL=SER=UMCMPR,DCB=(RECFM=FB,LRECL=80,BLKSIZE=6080,DSORG=PS)
//PL1OUT DD DSN=IMSVS.COMPRESS.PLI,UNIT=DISK,VOL=SER=SYS003,
//   DISP=(NEW,CATLG),SPACE=(TRK,(1,1,3)),
//   DCB=(RECFM=VB,LRECL=104,BLKSIZE=6136,DSORG=PS)
//PL1IN DD DSN=PL1,UNIT=TAPE,LABEL=(3,SL),DISP=(SHR,PASS),
//   VOL=SER=UMCMPR,DCB=(RECFM=VB,LRECL=104,BLKSIZE=6136,DSORG=PS)
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT4 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSIN DD *
  COPY INDD=ASMIN,OUTDD=ASMOUT
  COPY INDD=PL1IN,OUTDD=PL1OUT

     2. IF YOU REQUIRE A SET OF CHARACTER TYPES DIFFERENT FROM THE
STANDARD SET YOU MUST MODIFY THE ASSEMBLER ROUTINE NAMED "TYPE"
TO REFLECT THESE DIFFERENCES. CTYPE IS A 256-BYTE CSECT WHICH
CONTAINS A BYTE INDICATING THE TYPE OF EACH CHARACTER. TYPES MUST
BE IN THE RANGE 0 TO N-1 WHERE N IS THE TOTAL NUMBER OF DATA
TYPES. THE STANDARD TABLE WHICH IS SUPPLIED ON THE TAPE CONTAINS
5 TYPES ROUGHLY CORRESPONDING TO THE FOLLOWING DATA TYPES:
PACKED, ZONED, ALPHABETIC, BLANK, AND MISCELLANEOUS. THE
USE OF TYPES IS DESCRIBED ON PAGE 3 OF THE ENCLOSED WRITE-UP
ENTITLED "EXAMPLE OF COMPRESSION ALGORITHM". IN THAT EXAMPLE,
3 TYPES ARE USED.

    3. COMPILE THE 4 ASSEMBLER ROUTINES USING THE FOLLOWING JCL:
//ASMGC JOB ETC.
// EXEC ASMGC,REGION=512K
//ASM.SYSLIN DD DSN=IMSVS.COMPRESS.OBJECT(COMPEXP),DISP=SHR
//ASM.SYSIN DD DSN=IMSVS.COMPRESS.ASM(COMPEXP),DISP=SHR
     THE ONLY MACRO LIBRARY REQUIRED IS SYS1.MACLIB

      4. COMPILE THE 2 PL/1 ROUTINES.
         THE PLI PROGRAMS MUST BE LINKED WITH THE OBJECT FROM
         ASSEMBLING THE "TYPE" ASSEMBLER ROUTINE. SAMPLE JCL FOLLOWS:
 ***** WARNING: *****
    IF YOU ALREADY HAVE ONE OR MORE COMPRESSION ROUTINES IN PRODUCTION
WHICH WERE DERIVED FROM A PREVIOUS RUN OF THESE PL/1 PROGRAMS, YOU
WILL MOST LIKELY NOT WANT TO RE-RUN STEPS 4 THROUGH 8 UNLESS YOU
ARE GOING TO DO A COMPLETE RELOAD OF THE EXPANDED SEGMENTS WITH
THE NEW BIT TREES WHICH ARE PRODUCED BY THE PROGRAMS COUNT AND TREE.
SIMILARLY YOU WILL NOT WANT TO CHANGE THE CSECT NAMED "TYPE"
DESCRIBED IN STEP 2 UNLESS YOU ARE DOING A SIMILAR OPERATION.
//PL1CL JOB ETC.
// EXEC PL1OCL
//PL1.SYSIN DD DSN=IMSVS.COMPRESS.PLI(TREE),DISP=SHR
//LKED.SYSLMOD DD DSN=IMSVS.COMPRESS.LOAD,DISP=SHR
//LKED.OBJ DD DSN=IMSVS.COMPRESS.OBJECT,DISP=SHR
//LKED.SYSIN DD *
  INCLUDE OBJ(TYPE)
  NAME TREE(R)

      5. CREATE A SEQUENTIAL DATASET CONTAINING A SAMPLE OF THE DATA TO
         BE COMPRESSED.

      6. CALL COUNT WITH THE FOLLOWING DATASETS:
         IN:  SAMPLE DATASET FROM (3)
         COUNT:  OUTPUT FROM COUNT PROGRAM
    SAMPLE JCL FOLLOWS. THE PL/1 RUN-TIME ROUTINES MUST
BE AVAILABLE IN A LINKLIB OR A STEPLIB MUST BE ADDED FOR THEM.
//COUNT JOB ETC.
// EXEC PGM=COUNT
//STEPLIB DD DSN=IMSVS.COMPRESS.LOAD,DISP=SHR
//IN DD DSN= SAMPLE OF DATA TO BE COMPRESSED
//COUNT DD DSN= COUNT DATA SET LRECL=80,BLKSIZE=80*X

      7. CALL TREE WITH THE FOLLOWING DATASETS:
         DATA: COUNT FROM 5.
         OBJECT: ASSEMBLER SOURCE OUTPUT FOR THE COMPRESS/EXPAND TABLE
                 THIS OBJECT MODULE IS CALLED TREEOBJ IN THIS EXAMPLE.
         SYSPRINT:  STATISTICS LISTING
         SYSTERM:  INPUT FILE; PROGRAM ISSUES A GET DATA(INCR); FOR EVER
                   TREE PROCESSED (1 FOR EVERY DATA TYPE).  INCR, IF
                   SPECIFIED, INDICATES THE CLOSENESS TO OPTIMUM
                   COMPRESSION REQUIRED.  EG. INCR=.99;  INDICATES THAT
                   THE OPTIMUM REPRESENTATION IS NO SMALLER THAN 99% OF
                  THE REPRESENTATION PRODUCED.   A SMALLER VALUE OF INC
                   WILL RESULT IN DECREASED EXECUTION TIME.   ENTER ;
                   TO USE THE DEFAULT VALUE OF .995
           A VALUE OF .95 IS ADEQUATE FOR MOST APPLICATIONS.
     SAMPLE JCL FOLLOWS:
//TREE JOB ETC.
// EXEC PGM=TREE
//STEPLIB DD DSN=IMSVS.COMPRESS.LOAD,DISP=SHR
//SYSPRINT DD SYSOUT=A
//DATA DD DSN= COUNT DATA SET FROM STEP5
//ASM DD DSN=IMSVS.COMPRESS.OBJECT(TREEOBJ),DISP=SHR
//SYSTERM DD *
INCR=.95;INCR=.95;INCR=.95;INCR=.95;INCR=.95;

      8. ASSEMBLE  OBJECT FROM (5)
   YOU CAN USE THE JCL USED FOR THE ASSEMBLIES IN STEP 3.

      9. LINK  COMPEXP, COMP, EXPD, TYPE, OBJECT FROM (6) AND MARK AS
         REENTRANT.  THE ENTRY POINT MUST BE COMPEXP.
       SAMPLE JCL FOLLOWS:
//UMWCMPRS JOB ETC.
//STEP1 EXEC PGM=IEWL,REGION=192K,
//        PARM='SIZE=(166K,45K),RENT,REUS,NCAL,LET,XREF,LIST'
//SYSPRINT DD  SYSOUT=A
//SYSOBJ  DD  DSN=IMSVS.COMPRESS.OBJECT,DISP=SHR
//SYSLMOD  DD  DSN=IMSVS.RESLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,1))
//SYSLIN   DD  *
  INCLUDE SYSOBJ(COMPEXP)
  INCLUDE SYSOBJ(COMP)
  INCLUDE SYSOBJ(EXPD)
  INCLUDE SYSOBJ(TYPE)
  INCLUDE SYSOBJ(TREEOBJ)
  ENTRY COMPEXP
  NAME UMWCMPRS(R)

 **** NOTE: ****
     SEE THE WARNING UNDER STEP 4 ABOVE IF THIS IS NOT THE
FIRST TIME YOU HAVE DONE THIS LINKEDIT. YOU MUST BE VERY CAREFUL
ABOUT WHICH CSECTS ARE UPDATED IN THIS LINKEDIT IF YOU ALREADY
HAVE A PREVIOUS VERSION OF THIS COMPRESSION ROUTINE IN PRODUCTION.

      10. SEE THE IMS/VS SYSTEMS PROGRAMMERS GUIDE FOR INFORMATION
         ON DBD MODIFICATION AND USE OF COMPRESSION ROUTINES.
