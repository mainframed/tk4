         TITLE 'PASSWORD - Change TSO Password Command Processor'
         PRINT NOGEN
***********************************************************************
*                                                                     *
*                                                                     *
*   PPPPPPPPPPPP          AA            SSSSSSSSSSSS   SSSSSSSSSSSS   *
*   PPPPPPPPPPPPP        AAAA           SSSSSSSSSSSS   SSSSSSSSSSSS   *
*   PP          PP      AA  AA          SS             SS             *
*   PP          PP     AA    AA         SS             SS             *
*   PPPPPPPPPPPPP     AA      AA        SSSSSSSSSSSS   SSSSSSSSSSSS   *
*   PPPPPPPPPPPP     AAAAAAAAAAAA       SSSSSSSSSSSS   SSSSSSSSSSSS   *
*   PP              AAAAAAAAAAAAAA                SS             SS   *
*   PP             AA            AA               SS             SS   *
*   PP            AA              AA    SSSSSSSSSSSS   SSSSSSSSSSSS   *
*   PP           AA                AA   SSSSSSSSSSSS   SSSSSSSSSSSS   *
*                                                                     *
*                                                                     *
*                                                                     *
*  WW          WW   OOOOOOOOOOOOOO  RRRRRRRRRRR     DDDDDDDDDDDD      *
*  WW          WW   OOOOOOOOOOOOOO  RRRRRRRRRRRR    DDDDDDDDDDDDD     *
*  WW          WW   OO          OO  RR         RR   DD          DD    *
*  WW          WW   OO          OO  RR         RR   DD           DD   *
*  WW    WW    WW   OO          OO  RRRRRRRRRRRR    DD           DD   *
*  WW   WWWW   WW   OO          OO  RRRRRRRRRRR     DD           DD   *
*  WW  WW  WW  WW   OO          OO  RR   RR         DD           DD   *
*  WW WW    WW WW   OO          OO  RR    RR        DD          DD    *
*  WWWW      WWWW   OOOOOOOOOOOOOO  RR     RR       DDDDDDDDDDDDD     *
*  WW          WW   OOOOOOOOOOOOOO  RR      RR      DDDDDDDDDDDD      *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  Author:                                                            *
*    Thomas J. Bigley                                                 *
*    Chicago Title and Trust Co.                                      *
*    37th Floor                                                       *
*    30 N. LaSalle St.                                                *
*    Chicago, Illinois 60602                                          *
*    (312) 630-2668                                                   *
*                                                                     *
*  Maintenance History:                                               *
*      1.   1 Mar 82     Initial writing                              *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  Abstract:                                                          *
*                                                                     *
*    PASSWORD is a TSO command processor providing the TSO user       *
*    with the ability change his password in SYS1.UADS.  Only         *
*    changes to passwords allowed, i.e. passwords may not be added    *
*    nor deleted from SYS1.UADS.  PASSWORD will handle UADS entries   *
*    with multiple passwords.  Along with SYS1.UADS the Time          *
*    Sharing Block (TSB) is also updated.  Optionally just the TSB    *
*    update can be specified.  Changing only the TSB allows the       *
*    user to set the logon password to the same as a data set         *
*    password, thus no prompting for the data set's password is       *
*    preformed.                                                       *
*                                                                     *
*    This command provides a simular function to RACF and the TSO     *
*    pre-prompt LOGON exit on file 167 of the Connecticut Bank &      *
*    Trust (CBT) tape.  These allow the changing of the LOGON         *
*    password when logging onto TSO.  File 302 of the CBT tape        *
*    contains a simular command, PSWDCHG.  PASSWORD is an extention   *
*    of PSWDCHG.  The author of PASSWORD wishes to thank the          *
*    authors of PSWDCHG for inspiring the writing of PASSWORD.        *
*                                                                     *
*    This command was written at Chicago Title & Trust Co. after      *
*    the TSO Command Package, 5740-XT6, was installed.  The author    *
*    knows of no reason why it should not run without this package    *
*    installed, i.e. base MVS 3.8 TSO.  However, it will be           *
*    necessary to modify this command to use the new format of        *
*    SYS1.UADS used with TSO Extensions, 5665-285.  The author        *
*    intends to install this package in 1983 and at that time         *
*    update PASSWORD for use with TSO Extensions.  It is intended     *
*    to make the new PASSWORD available on this tape, but no          *
*    promises.                                                        *
*                                                                     *
*    The PASSWORD TSO command processor, as of 12 Feb 83, is being    *
*    sucessfully used at Chicago Title & Trust Co.  However, no       *
*    warranty is made that it will work at another installation,      *
*    nor does Chicago Title & Trust Co or the author assume any       *
*    responsibility for the use of this command.  No guarantee to     *
*    keep this material is made.  The author is willing to answer     *
*    questions and offer advise to users on a time available basis.   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  Program Name: PASSWORD    Alias: SETPSWRD                          *
*                                                                     *
*  INPUT:                                                             *
*    1. The TSO CP's CPPL                                             *
*       a. current password - the first positional parameter is the   *
*                  current password in the TSB, and for updating      *
*                  UADS must be a password in the user's UADS         *
*                  member(s).                                         *
*       b. new password - the second positional parameter is the      *
*                  new password that the TSB and/or UADS is to be     *
*       c. UADS/NOUADS - specifies if UADS is to be updated.  The     *
*                  default is UADS.                                   *
*    2. The TSO user's TSB                                            *
*    3. The TSO user's SYS1.UADS member(s)                            *
*                                                                     *
*  PROCESSING:                                                        *
*    1. Parse the command's parameters to determine actions           *
*       requested by user.                                            *
*    2. Place the command in a protected environment and authorize    *
*       the command.                                                  *
*    3. Change the password in the TSB.                               *
*    4. If requested update the password in SYS1.UADS.                *
*    5. Remove autorization and the protected environment.            *
*                                                                     *
*  OUTPUT:                                                            *
*    1. The TSO user's TSB password field                             *
*    2. The TSO user's SYS1.UADS member (password field)              *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  Attributes:                                                        *
*    Reenterent                                                       *
*    Reusable                                                         *
*    Refreshable                                                      *
*    TSO Command Processor                                            *
*                                                                     *
*  Return Codes:                                                      *
*    1. 0 => Command executed sucessfully                             *
*    2. >0 => Command failed.  Value set by failing routine.          *
*                                                                     *
*  Enqueues:                                                          *
*    1. Major name - "SYSIKJUA"                                       *
*    2. Minor names                                                   *
*       a. "userid" - it is not necessary nor possible to enqueue on  *
*          the "userid" since the LOGON scheduler's TCB has already   *
*          done so.  The purpose of this enqueue is serialize the use *
*          of TSO userids, i.e. only one TSO session per userid.      *
*       b. "OPENUADS" - this resource serializes the use of SYS1.UADS *
*          one user at a time.  Be it LOGON, the ACCOUNT command or   *
*          the PASSWORD command.  Enqueue share for reading UADS and  *
*          exclusive for updating UADS.  PASSWORD does an exclusive   *
*          enque from just before the BLDL for the userid is done     *
*          until after the close of UADS.                             *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  User Abends:                                                       *
*    U0001 - Pivate area GETMAIN failed.  GETMAIN's return code is in *
*            register 3.                                              *
*    U0002 - GETMAIN error message TPUT failed.  TPUT's return code   *
*            is in register 15 and GETMAIN's return code is in        *
*            register 3.                                              *
*    U0003 - Attempt to execute this command as a batch job or        *
*            started task.  Command can only be executed in TSO       *
*            forground environment.                                   *
*    U0004 - Command failed the TSB address is invalid.  This should  *
*            not occur at this point.  Error found in UPDTTSB.        *
*    U0005 - TPUT message failed.  TPUT's return code is in register  *
*            15 and is stored in location TPUTRC.                     *
*    U0006 - Command failed to obtain the LOCAL lock.                 *
*    U0007 - Command failed to obtain the CMS lock.                   *
*    U0008 - FIND failed for a UADS member which was found via a      *
*            previous BLDL.  FIND issued while building tree area.    *
*    U0009 - FIND failed for a UADS member which was found via a      *
*            previous BLDL.  FIND issued while writing member block   *
*            to UADS.                                                 *
*    U0010 - Command failed the TSB address is invalid.  This should  *
*            not occur at this point.  Error found in RSTORTSB.       *
*    U0011 - Command failed to reset the TSB's password after it      *
*            determined that it could not update UADS.  This should   *
*            not occur unless the TSB has some how been changed.      *
*    U0012 - Command encountered an EOD condition after issuing       *
*            a CHECK macro for UADS.  This should not happen since    *
*            all members consist of a single block and the command    *
*            never reads or writes more than a single block.          *
*    U0013 - Command failed to establish an ESATE for JSCBPASS        *
*            switch protection.                                       *
*    U0014 - Command encountered an I/O error processing UADS         *
*            data set.                                                *
*    U0015 - ENQ on queue - SYSIKJUA and resource - OPENUADS failed.  *
*    U0016 - DEQ on queue - SYSIKJUA and resource - OPENUADS failed.  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  External References:                                               *
*                                                                     *
*    A. Data Sets:                                                    *
*       1. SYS1.UADS - TSO User Attribute Data Set                    *
*                                                                     *
*    B. System Routines:                                              *
*       1. IKJEFF02  - TSO Message Issuer                             *
*       2. IKJEFF18  - DAIRFAIL                                       *
*       3. IKJEFF19  - GNRFAIL                                        *
*       4. IKJPARS   - PARSE                                          *
*                                                                     *
*    C. Data Areas:                                                   *
*       1. CVT       - Communication Vector Table                     *
*       2. DCB       - Define Data Control Block                      *
*       3. DCBD      - Data Control Block Map                         *
*       4. IEFZB4D0  - SVC99 Request Block                            *
*       5. IEFZB4D2  - SVC99 Key Definitions                          *
*       6. IEZJSCB   - Job Step Control Block                         *
*       7. IHAASCB   - Address Space Control Block                    *
*       8. IHAPSA    - Prefix Storage Area                            *
*       9. IHASDWA   - System Diagnostic Work Area                    *
*      10. IKJCPPL   - Command Processor Parameter List               *
*      11. IKJECT    - Environment Control Table                      *
*      12. IKJEFFDF  - IKJEFF18 Parameter List                        *
*      13. IKJEFFGF  - IKJEFF19 Parameter List                        *
*      14. IKJEFFMT  - IKJEFF02 Parameter List                        *
*      15. IKJENDP   - End PCL                                        *
*      16. IKJIDENT  - Define a positional parameter                  *
*      17. IKJIOPL   - Input Output Parameter List                    *
*      18. IKJKEYWD  - Define a keyword parameter                     *
*      19. IKJPARM   - Begin PCL and PDL                              *
*      20. IKJPPL    - Parse Parameter List                           *
*      22. IKJPSCB   - Protected Step Control Block                   *
*      23. IKJTCB    - Task Control Block                             *
*      24. IKJTSB    - Time Sharing Block                             *
*      25. IKJTSMSG  - Define a message for IKJEFF02                  *
*      26. IKJUPT    - User Profile Table                             *
*    * 27. UADSMAP   - User Attribute Data Set Control Block          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*    D. Macros:                                                       *
*       1. ABEND     - Abnormal End                                   *
*    *  2. APFAUTH   - Set APF autorization on and off                *
*       3. BLDL      - Build a PDS directory entry list               *
*       4. CALLTSSR  - Call time sharing services                     *
*       5. CHECK     - Check completion of I/O                        *
*       6. CLOSE     - Close a data set                               *
*    !  7. Concept-14- Structured Programming Macros                  *
*       8. DYNALLOC  - Dynamiclly allocate a data set                 *
*       9. DEQ       - Dequeue a resource                             *
*      10. ESTAE     - Extended Specify Task Abnormal End             *
*      11. ENQ       - Enqueue on a resource                          *
*      12. GETMAIN   - Get main storage                               *
*      13. FIND      - Find a PDS member                              *
*      14. FREEMAIN  - Free main storage                              *
*      15. IKJRLSA   - Release main storage acquired by PARSE         *
*      16. LINK      - Link to an external routine                    *
*      17. MODESET   - Set system status                              *
*      18. OPEN      - Open a data set                                *
*      19. PUTLINE   - Put a line to a terminal                       *
*      20. READ      - Read a record from a data set                  *
*      21. RETURN    - Return to call                                 *
*      22. SAVE      - Save registers                                 *
*      23. SETLOCK   - Set a lock                                     *
*      24. STAX      - Set a terminal attention exit                  *
*      25. SYNADAF   - Perform permanent I/O error analysis           *
*      26. SYNADRLS  - Release SYNADAF buffer and save area           *
*      27. TPUT      - Put a message to a terminal                    *
*    * 28. TSOTPAM   - Return TSO / TP access method information      *
*      29. WRITE     - Write a record to a data set                   *
*                                                                     *
*    * These are locally writen macros and are supplied with          *
*      PASSWORD.                                                      *
*                                                                     *
*    ! Source unknown, but are used by PASSWORD, thus also supplied   *
*      with PASSWORD.                                                 *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
* GLOBALS                                                             *
*                                                                     *
*                Assembler Global Definitions                         *
*                                                                     *
* ASSEMBLER VARIABLES                                                 *
***********************************************************************
         SPACE 2
         GBLC  &TSO
         GBLC  &UADS
         GBLC  &UADSDSN
         GBLA  &MSGIDL
         GBLA  &BLDLEL
         GBLA  &BLDLNE
         GBLC  &LEVEL
         GBLC  &VERSION
         GBLC  &RELEASE
         GBLC  &MOD
         GBLC  &FIX
         GBLC  &NAME
         GBLC  &ENTRY
         SPACE 2
&TSO     SETC  'CHECK'    Determine if TSOTPAM is used          **TSO**
&UADS    SETC  'UADS'     Parameter default: UADS / NOUADS      **OPT**
&UADSDSN SETC  'SYS1.UADS' Name of UADS data set                **DSN**
&MSGIDL  SETA  9          Length of message ID for all TPUT messages
         AIF (&MSGIDL EQ 0).MSGIDL
&MSGIDL  SETA &MSGIDL+1
.MSGIDL  ANOP
         SPACE 2
&BLDLEL  SETA  14         Length of a single BLDL entry for BLDL list
&BLDLNE  SETA  10         Number of BLDL entries in BLDL list
         SPACE 2
&NAME    SETC  'PASSWORD' Program CSECT name (1:8)
&ENTRY   SETC  'SETPSWRD' Program ENTRY name (1:8)
         SPACE 2
&VERSION SETC  'V1'       Current version of program - V#
&RELEASE SETC  'R0'       Current release of program - R#
&MOD     SETC  'M0'       Current modification level - M#
&FIX     SETC  'F0'       Fix number for this modification level - F#
         SPACE 2
&LEVEL   SETC  '&VERSION'.'&RELEASE'.'&MOD'.'&FIX'
         EJECT
***********************************************************************
* PROLOG                                                              *
*                                                                     *
*                PASSWORD TSO Command Processor Prolog                *
*                                                                     *
* NOT EXECUTABLE                                                      *
***********************************************************************
         SPACE 2
         PRINT GEN
&NAME    START 0
         SPACE 1
         ENTRY &ENTRY
         SPACE 1
         DC    CL8'&NAME',CL2' '    Program name
         DC    CL8'&LEVEL',CL2' '   Program level
         SPACE 1
         DC    C'&SYSTIME',CL1' '   Time of assembly
         DC    C'&SYSDATE',CL2' '   Date of assembly
         SPACE 1
         DC    A(&NAME)             Beginning address of program
         DC    A(&ENTRY)            Entry address of program
         DC    A(ENDCMD-1)          Ending address of program
         DC    A(ENDCMD-&NAME)      Program length
         EJECT
***********************************************************************
* REGISTERS                                                           *
*                                                                     *
*               Register Definitions And Assignments                  *
*                                                                     *
* ASSEMBLER CONSTANTS                                                 *
***********************************************************************
         SPACE 2
         PRINT NOGEN
R0       EQU   0    Work / PSA
R1       EQU   1    Work
R2       EQU   2    Work
R3       EQU   3    Work
R4       EQU   4    CPPL
R5       EQU   5    IOPL / UPT / DCB
R6       EQU   6    ASCB / SDWA / S99RB / BLDL
R7       EQU   7    PPL / TSB / TCB / PSCB / UPDB
R8       EQU   8    Private Area Base
R9       EQU   9    Command Base #1
R10      EQU   10   Command Base #2 / Exit Base
R11      EQU   11   PDL / JSCB / ECT / UPOB
R12      EQU   12   CVT / UHDR
R13      EQU   13   SAVE
R14      EQU   14   Work / RETURN
R15      EQU   15   Work / RETURN CODE
         SPACE 2
PSABASE  EQU   R0   Prefix Save Area (PSA)
CPPLBASE EQU   R4   Command Processor Parameter List address (CPPL)
IOPLBASE EQU   R5   Input Output Parameter List (IOPL)
UPTBASE  EQU   R5   User Profile Table (UPT)
DCBBASE  EQU   R5   Data Control Block (DCB)
ASCBBASE EQU   R6   Address Space Control Block (ASCB)
SDWABASE EQU   R6   System Diagnostic Work Area (SDWA) - ESTAE Exit
S99RBASE EQU   R6   SVC99 Request Block (S99RB)
BLDLBASE EQU   R6   BLDL Entry Base
PPLBASE  EQU   R7   Parse Parameter List address (PPL)
TSBBASE  EQU   R7   Time Sharing Block (TSB)
TCBBASE  EQU   R7   Task Control Block (TCB)
PSCBBASE EQU   R7   Protected Step Control Block (PSCB)
UPDBBASE EQU   R7   UADS Password Data Block (PDB)
PVTBASE  EQU   R8   Program's private area
         USING PVTAREA,PVTBASE
CMDBASE1 EQU   R9   Command base register #1
CMDBASE2 EQU   R10  Command base register #2
EXITBASE EQU   R10  ESTAE exit base register
PDLBASE  EQU   R11  Parse Discriptor List address (PDL)
JSCBBASE EQU   R11  Job Step Control Block (JSCB)
ECTBASE  EQU   R11  Environment Control Table (ECT)
UPOBBASE EQU   R11  UADS Password Data Block (PDB)
CVTBASE  EQU   R12  Communications Vector Table (CVT)
UHDRBASE EQU   R12  UADS Header Block
SAVE     EQU   R13  Address of program save area
RETURN   EQU   R14  Program level return register
         EJECT
***********************************************************************
* EQUATES                                                             *
*                                                                     *
*                      Symbolic Definitions                           *
*                                                                     *
* ASSEMBLER CONSTANTS                                                 *
***********************************************************************
         SPACE 2
*  ENVRNSW1 Definitions
         SPACE 1
TSOFRGND EQU   B'10000000'      TSO user running in forground
PARSEOK  EQU   B'01000000'      IKJPARS completed sucessfully
STAXSET  EQU   B'00100000'      Command's STAX is in effect
ESTAESET EQU   B'00010000'      Command's ESTAE is in effect
AUTHSET  EQU   B'00001000'      JSCB has been set for APF
PWMATCH  EQU   B'00000100'      User specified old PW matches TSB's PW
INCLUADS EQU   B'00000010'      User requested UADS to be updated
NOPSWRD  EQU   B'00000001'      JSCB has been set to no password
         SPACE 1
ENVRNSET EQU   B'00111000'      STAX + ESTAE + APF environment
DOUADS   EQU   B'00000110'      Passwords match and UADS specified
         SPACE 2
*  ENVRNSW2 Definitions
         SPACE 1
LCLLKHLD EQU   B'10000000'      Command is holding the LOCAL lock
CMSLKHLD EQU   B'01000000'      Command is holding the CMS lock
ALLOCDDN EQU   B'00100000'      SYS1.UADS is allocated by DDNAME
ALLOCDSN EQU   B'00010000'      SYS1.UADS is allocated by DSNAME
UADSENQ  EQU   B'00001000'      SYS1.UADS ENQ set
OPENOK   EQU   B'00000100'      SYS1.UADS is open
UADSCHNG EQU   B'00000010'      Password was changed in SYS1.UADS
WASPASS  EQU   B'00000001'      Saves the original value of JSCBPASS
         SPACE 1
ALLOCOK  EQU   B'00110000'      SYS1.UADS is allocated
         SPACE 2
*  ENVRNSW3 Definitions
         SPACE 1
BLDLOK   EQU   B'10000000'      BLDL sucessfull
MEMBERS  EQU   B'01000000'      BLDL found at least one member
GOODREAD EQU   B'00100000'      Read of all UADS members sucessfull
GOTAREA  EQU   B'00010000'      Sucessfully got core for UADS tree
DEFINED  EQU   B'00001000'      Password's are defined in UADS
OLDMATCH EQU   B'00000100'      Old password matches a UADS entry
NEWDIFF  EQU   B'00000010'      New password not already in UADS
POBAVAIL EQU   B'00000001'      Password offset blocks available
         SPACE 1
PWFOUND  EQU   B'11111110'      Password eligble for update in UADS
GOODPW   EQU   B'00001110'      New PW is eligble to update UADS
         EJECT
***********************************************************************
* PASSWORD                                                            *
*                                                                     *
*                  PASSWORD TSO Command Processor                     *
*                                                                     *
* LEVEL-0                                                             *
***********************************************************************
         SPACE 2
         DS    0H
&ENTRY   EQU   *
         SPACE 1
         SAVE  (14,12)                 Initialize command
         LR    CMDBASE1,R15
         USING &ENTRY,CMDBASE1,CMDBASE2
         L     CMDBASE2,BASE4096
         BAL   RETURN,INITIAL
         SPACE 1
         BAL   RETURN,CHKTSOFG         Check type of TSO user
         IF (TM,ENVRNSW1,TSOFRGND,O)   IF User running in forground
            BAL   RETURN,PARSE            Parse command for parameters
            IF (TM,ENVRNSW1,PARSEOK,O)    IF Parse successfull
               BAL   RETURN,ENVRNON          Set APF environment on
               IF (TM,ENVRNSW1,ENVRNSET,O)   IF Environment set
                  BAL   RETURN,UPDTTSB          Update the TSB PW
                  IF (TM,ENVRNSW1,DOUADS,O)     IF UADS to be updated
                     BAL   RETURN,UPDTUADS         Update UADS PW
                     ENDIF                         ENDIF
                  ENDIF                         ENDIF
               ENDIF                         ENDIF
            ENDIF                         ENDIF
         SPACE 1
         BAL   RETURN,ENVRNOFF         Set APF environment off
         SPACE 1
         B     TERMNATE                Terminate the command
         SPACE 2
BASE4096 DC    A(&ENTRY+4096)
         EJECT
***********************************************************************
* INITIAL                                                             *
*                                                                     *
*                    Initialize The Command                           *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
         DS    0H
INITIAL  EQU   *
         SPACE 1
         LR    CPPLBASE,R1            Hold CPPL adr. durring GETMAIN
         L     R2,LPVTAREA            Get length of private area
         GETMAIN RC,LV=(2),SP=2       Aquire private area
         IF (LTR,R15,R15,NZ)          IF GETMAIN fails
            B     GTMNFAIL               Issue message and ABEND
            ENDIF                        ENDIF
         LR    PVTBASE,R1             Point to private area
         ST    R15,GMSP2RC            Save GETMAIN's return code
         ST    CPPLBASE,CPPLPTR       Save address of CPPL
         SPACE 1
         ST    SAVE,SAVEAREA+4        Chain save areas
         LR    R2,SAVE
         LA    SAVE,SAVEAREA
         ST    SAVE,8(R2)
         SPACE 1
         XC    LVLSTART(LENLVL),LVLSTART  Initialize return levels
         ST    RETURN,LEVEL1          Save return address
         SPACE 1
         XC    RCSTART(LENRC),RCSTART Initialize return levels
         SPACE 1
         MVI   ENVRNSW1,X'00'         Initialize environment switches
         MVI   ENVRNSW2,X'00'
         MVI   ENVRNSW3,X'00'
         SPACE 1
         BAL   RETURN,INITPPL         Initialize PPL for IKJPARS
         BAL   RETURN,INITMTPL        Initialize IKJEFF02's parm list
         BAL   RETURN,INITGFPL        Initialize IKJEFF19's parm list
         BAL   RETURN,INITIOPL        Initialize IOPL for terminal I/O
         BAL   RETURN,INIT99RB        Initialize SVC99 request block
         BAL   RETURN,INITDFPL        Initialize IKJEFF18's parm list
         BAL   RETURN,INITUADS        Initialize UADS control blocks
         SPACE 1
         ENDBLOCK LEVEL1              Return
         EJECT
***********************************************************************
* INITPPL                                                             *
*                                                                     *
*                 Initialize The PPL For IKJPARS                      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITPPL  BLOCK LEVEL2
         SPACE 1
         L     CPPLBASE,CPPLPTR        Establish addressability to CPPL
         USING CPPL,CPPLBASE
         LA    PPLBASE,PVTPPL          Addressability to PPL
         USING PPL,PPLBASE
         SPACE 1
*                                      Fill in PPL
         MVC   PPLUPT,CPPLUPT            UPT
         MVC   PPLECT,CPPLECT            ECT
         LA    R1,CPECB                  CP's ECB
         ST    R1,PPLECB
         LA    R1,PARSEANS               PDL answer place
         ST    R1,PPLANS
         ST    PVTBASE,PPLUWA            Set UWA to private area
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  CPPLBASE
         DROP  PPLBASE
         EJECT
***********************************************************************
* INITMTPL                                                            *
*                                                                     *
*              Initialize IKJEFF02's Parameter List                   *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITMTPL BLOCK LEVEL2
         SPACE 1
         XC    MTPARML(MTLENMT),MTPARML  Clear IKJEFF02 parameter list
         SPACE 1
*                                     Fill in header
         LA    R1,MTCSECTP               Point message description
         ST    R1,MTPLPTR
         MVC   MTCPPLP,CPPLPTR           Point to CPPL
         LA    R1,MTECB                  Point to ECB
         ST    R1,MTECBP
*                                     Fill in message section
         L     R1,=V(MESSAGES)           Point to messages
         ST    R1,MTCSECTP
         OI    MTSW1,MTPUTLSW+MTHEXSW    Set to PUTLINE and hex inserts
         OI    MTSW2,MTNOXQSW            Do not use X'#' around inserts
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* INITGFPL                                                            *
*                                                                     *
*              Initialize IKJEFF19's Parameter List                   *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITGFPL  BLOCK LEVEL2
         SPACE 1
*                                      Fill in parameter list
         XC    GFPARMS(GFLENGF),GFPARMS  Clear IKJEFF19 parameter list
         MVC   GFCPPLP,CPPLPTR           CPPL
         LA    R1,GFECB                  CP's ECB
         ST    R1,GFECBP
         LA    R1,GFPARMS                Point to parameter list
         ST    R1,GFPRMPTR
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* INITIOPL                                                            *
*                                                                     *
*                 Initialize The IOPL For Terminal I/O                *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITIOPL BLOCK LEVEL2
         SPACE 1
         L     CPPLBASE,CPPLPTR        Addressability to CPPL
         USING CPPL,CPPLBASE
         LA    IOPLBASE,PVTIOPL        Addressability to IOPL
         USING IOPL,IOPLBASE
         SPACE 1
*                                      Fill in IOPL
         MVC   IOPLECT,CPPLECT           Point to ECT
         MVC   IOPLUPT,CPPLUPT           Point to UPT
         LA    R1,TIOECB                 Point to Terminal I/O ECB
         ST    R1,IOPLECB
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  CPPLBASE
         DROP  IOPLBASE
         EJECT
***********************************************************************
* INIT99RB                                                            *
*                                                                     *
*                 Initialize SVC99 Request Block                      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INIT99RB  BLOCK LEVEL2
         SPACE 1
         LA    S99RBASE,PVTS99RB       Addressability to request block
         USING S99RB,S99RBASE
         SPACE 1
         ST    S99RBASE,PVTRBPTR       Point to request block
         MVI   PVTRBPTR,S99RBPND
         SPACE 1
         XC    PVTS99RB(L'PVTS99RB),PVTS99RB  Clear request block
         SPACE 1
*                                      Fill in request block
         MVI   S99RBLN,L'PVTS99RB        Length of request block
         SPACE 1
*                                      Fill in text unit pointer list
         LA    R2,UADSDDN                Point to DDNAME
         ST    R2,DDNTUP
         MVI   DDNTUP,S99TUPLN           Terminate DDNAME allocation
         LA    R2,UADSRDDN               Point to return DDNAME test
         ST    R2,RDDNTUP
         LA    R2,UADSDSN                Point to DSNAME
         ST    R2,DSNTUP
         LA    R2,UADSDISP               Point to DISP=SHR
         ST    R2,DISPTUP
         MVI   DISPTUP,S99TUPLN          Terminate DSNAME allocation
         SPACE 1
         MVC   PVTXTUNT(LNTXTUNT),TXTUNTST Text units to private area
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  S99RBASE
         EJECT
***********************************************************************
* INITDFPL                                                            *
*                                                                     *
*              Initialize IKJEFF18's Parameter List                   *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITDFPL  BLOCK LEVEL2
         SPACE 1
*                                      Fill in parameter list
         XC    DFPARMS(DFLEN),DFPARMS    Clear IKJEFF19 parameter list
         LA    R1,PVTS99RB               Point to SVC99's request block
         ST    R1,DFS99RBP
         MVC   EFF02PTR,=F'0'            Dummy pointer to IJKEFF02
         LA    R1,EFF02PTR               Point to dummy IKJEFF02
         ST    R1,DFJEFF02
         MVI   S99DFID,DFSVC99           Indicate SVC99 used
         LA    R1,S99DFSW                Point to switch and ID fields
         ST    R1,DFIDP
         MVC   DFCPPLP,CPPLPTR           Point to command's CPPL
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* INITUADS                                                            *
*                                                                     *
*              Initialize UADS Data Set Control Blocks                *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
INITUADS  BLOCK LEVEL2
         SPACE 1
         MVC   UADSDCB(SYSUADSL),SYSUADS  Move DCB to private area
         MVC   PVTOPEN(OPENMFLL),OPENMFL  Move OPEN MF=L to pvt area
         MVC   PVTCLOSE(CLOSMFLL),CLOSEMFL Move CLOSE MF=L to pvt area
         MVC   PVTENQ(ENQMFLL),ENQMFL     Move ENQ MF=L to pvt area
         MVC   PVTDEQ(DEQMFLL),DEQMFL     Move DEQ MF=L to pvt area
         SPACE 1
         MVC   PVTENTNO,=H'&BLDLNE'       Number of BLDL entries
         MVC   PVTENTL,=H'&BLDLEL'        Length of a BLDL entry
         LA    BLDLBASE,PVTENTRY          Addressability to BLDL list
         USING BLDLLIST,BLDLBASE
         DO FROM=(R2,=F'&BLDLNE')         DO For number of entries
            XC    BLDLENTY(&BLDLEL),BLDLENTY Clear an entry
            MVC   BLDLNAME,=CL8'        '    Set name field to blanks
            LA    BLDLBASE,&BLDLEL.(BLDLBASE) Incurment to next entry
            ENDDO                            ENDDO
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  BLDLBASE
         EJECT
***********************************************************************
* CHKTSOFG                                                            *
*                                                                     *
*              Check If The TSO User Is Running In Forground          *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
CHKTSOFG BLOCK LEVEL1
         SPACE 1
         AIF ('&TSO' EQ 'CHECK').CHECK
         MVC   TYPETSO,=C'TSOTPAM'     Force TSO forground
         AGO  .NOCHECK
.CHECK   ANOP
         TSOTPAM TSO,TYPETSO           Determine type of TSO
.NOCHECK ANOP
         SPACE 1
         IF (CLC,TYPETSO,EQ,=C'TSOTPAM ')  IF TSO forground
            OI    ENVRNSW1,TSOFRGND           Indicate forground
            ELSE                              ELSE
            NI    ENVRNSW1,X'FF'-TSOFRGND     Indicate not forground
            IF (CLC,TYPETSO,EQ,=C'TSOBATCH')  IF TSO background
               MVC   MTMSGID,=C'M005'            Identify message
               LA    R2,TYPETSO                  Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,L'TYPETSO           Set length of insert
               BAL   RETURN,TSOMSG               Issue error message
               ELSE                              ELSE
               ABEND 3,DUMP                      ABEND with a U0003
               ENDIF                             ENDIF
            ENDIF                             ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         EJECT
***********************************************************************
* PARSE                                                               *
*                                                                     *
*                    Parse The Command's Parameters                   *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
PARSE    BLOCK LEVEL1
         SPACE 1
         BAL   RETURN,BLDPPL           Build PASRE parameters
         SPACE 1
         USING PSA,PSABASE             Addressability to CVT
         L    CVTBASE,FLCCVT
         USING CVT,CVTBASE
         SPACE 1
         LA   R1,PVTPPL                PARSE command
         CALLTSSR EP=IKJPARS,MF=(E,(1))
         ST    R15,PARSRC              Save IKJPARS's return code
         IF (LTR,R15,R15,Z)            IF PASRE sucessfull
            OI    ENVRNSW1,PARSEOK        Indicate sucessfull parse
            BAL   RETURN,GETPARMS         Get command's parameters
            IKJRLSA PARSEANS              Release the PDL's storage
            ELSE                          ELSE
            NI    ENVRNSW1,X'FF'-PARSEOK  Indicate parse failed
            ST    R15,PSWRDRC             Set command's return code
            IF (C,R15,NE,=F'4'),          IF Promting allowed          X
               AND,                          AND                       X
               (C,R15,NE,=F'20')             Not VALIDCK requested
               L     R1,PARSRC               Failing RC for IKJEFF19
               LA    R2,GFPARSE              Indicate IKJPARS failure
               BAL   RETURN,GNRFAIL          Issue IKJPARS error msg
               ENDIF                         ENDIF
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         SPACE 2
         DROP PSABASE
         DROP CVTBASE
         EJECT
***********************************************************************
* BLDPPL                                                              *
*                                                                     *
*            Build IKJPARS's Parse Parameter List (PPL)               *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
BLDPPL   BLOCK LEVEL2
         SPACE 1
         L     CPPLBASE,CPPLPTR        Establish addressability to CPPL
         USING CPPL,CPPLBASE
         LA    PPLBASE,PVTPPL          Addressability to PPL
         USING PPL,PPLBASE
         SPACE 1
*                                      Fill in PPL
         MVC   CPECB,=F'0'               Clear CP's ECB
         L     R1,=V(SYNTAX)             CP's PCL
         ST    R1,PPLPCL
         MVC   PPLCBUF,CPPLCBUF          Command buffer
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  PPLBASE
         DROP  CPPLBASE
         EJECT
***********************************************************************
* GETPARMS                                                            *
*                                                                     *
*                   Get Command's Parameters From PDL                 *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
GETPARMS BLOCK LEVEL2
         SPACE 1
         L     PDLBASE,PARSEANS        Adderssability to PDL
         USING PSWRDPDL,PDLBASE
         SPACE 1
         MVC   OLDPSWRD,=CL8'        ' Blank out old password
         LA    R1,OLDPSWRD             Address of old password
         L     R14,PSWRD#1             Address of PSWRD#1 char string
         LH    R15,PSWRD#1+4           Length of PSWRD#1 char string
         BCTR  R15,0                   Length-1 for machine length
         EX    R15,VARMVC              Move to old password
         SPACE 1
         MVC   NEWPSWRD,=CL8'        ' Blank out new password
         LA    R1,NEWPSWRD             Address of new password
         L     R14,PSWRD#2             Address of PSWRD#2 char string
         LH    R15,PSWRD#2+4           Length of PSWRD#2 char string
         BCTR  R15,0                   Length-1 for machine length
         EX    R15,VARMVC              Move to new password
         SPACE 1
         IF (CLC,UADSOPT(2),EQ,=H'1')  IF UADS to be updated
            OI    ENVRNSW1,INCLUADS       Indicate update UADS
            ELSE                          ELSE
            NI    ENVRNSW1,X'FF'-INCLUADS Indicate don't update UADS
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  PDLBASE
         EJECT
***********************************************************************
* ENVRNON                                                             *
*                                                                     *
*                   Set APF Authorized Environment On                 *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
ENVRNON  BLOCK LEVEL1
         SPACE 1
         NI    ENVRNSW1,X'FF'-ENVRNSET Clear environment switches
         SPACE 1
         LA    R2,STAXLIST             Point to the list form of STAX
         STAX  DEFER=YES,MF=(E,(2))    Defer terminal attentions
         IF (C,R15,EQ,=F'0')           IF Attentions defered
            OI    ENVRNSW1,STAXSET        Indicate deferal
            ENDIF                         ENDIF
         SPACE 1
         IF (TM,ENVRNSW1,STAXSET,O)    IF STAX set
            L     R2,=V(ENVESTAE)         Point to ESTAE CSECT
            LA    R3,ESTAELST             Point to list form of ESTAE
            ESTAE (2),                    Establish ESTAE Exit         X
               CT,                        Create another ESTAE         X
               PARAM=(8),                 Point to the private aea     X
               MF=(E,(3))
            IF (C,R15,EQ,=F'0')           IF ESTAE established
               OI    ENVRNSW1,ESTAESET       Indicate ESTAE established
               ENDIF                         ENDIF
             ENDIF                        ENDIF
         SPACE 1
         IF (TM,ENVRNSW1,              IF STAX and ESTAE set           X
               STAXSET+ESTAESET,O)
            APFAUTH ON                    Set authority         **APF**
            IF (C,R15,EQ,=F'0')           IF Authorized
               OI    ENVRNSW1,AUTHSET        Indicate authorized
               ENDIF                         ENDIF
             ENDIF                        ENDIF
         SPACE 1
         IF (TM,ENVRNSW1,ENVRNSET,NO)  IF Not sucessfull
            MVC   MTMSGID,=C'M006'        Identify message
            LA    R2,ENVRNSW1             Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'82'           Convert HEX for a length of 1
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         EJECT
***********************************************************************
* UPDTTSB                                                             *
*                                                                     *
*                  Update The TSB With The New PAssword               *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
UPDTTSB  BLOCK LEVEL1
         SPACE 1
         BAL   RETURN,GETLCLLK         Allow access to TSB
         BAL   RETURN,GETCMSLK         Allow access to TSB
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         L     ASCBBASE,PSAANEW        Addressability to ASCB
         USING ASCB,ASCBBASE
         L     TSBBASE,ASCBTSB         Addressability to TSB
         USING TSB,TSBBASE
         SPACE 1
         ST    TSBBASE,TSBPTR          Save TSB address
         SPACE 1
         IF (LTR,TSBBASE,TSBBASE,P)    IF TSO user running forground
            BAL   RETURN,SETTSBPW         Set new password in TSB
            ELSE                          ELSE
            BAL   RETURN,FREELOCK         Disallow access to TSB
            MVC   MTMSGID,=C'M007'        Identify message
            LA    R2,TSBPTR               Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 4,DUMP                  ABEND with a U0004
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         SPACE 2
         DROP  PSABASE
         DROP  ASCBBASE
         DROP  TSBBASE
         EJECT
***********************************************************************
* SETTSBPW                                                            *
*                                                                     *
*                    Set The New Password In The TSB                  *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
SETTSBPW BLOCK LEVEL2
         SPACE 1
         L     TSBBASE,TSBPTR          Addressability to TSB
         USING TSB,TSBBASE
         SPACE 1
         LM    R0,R1,OLDPSWRD          Set up old password
         LM    R2,R3,NEWPSWRD          Set up new password
         SPACE 1
         IF (CDS,R0,R2,EQ,TSBPSWD)     IF Passwords are swaped
            BAL   RETURN,FREELOCK         Disallow access to TSB
            OI    ENVRNSW1,PWMATCH        Indicate a match
            IF (TM,ENVRNSW1,INCLUADS,Z)   IF UADS not to be updated
               MVC   MTMSGID,=C'M008'        Identify message
               LA    R2,OLDPSWRD             Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,L'OLDPSWRD      Set length of insert
               LA    R2,NEWPSWRD             Point to insert
               ST    R2,MTINSRT+4
               MVI   MTINSRT+4,L'NEWPSWRD    Set length of insert
               BAL   RETURN,TSOMSG           Issue error message
               ENDIF                         ENDIF
            ELSE                          ELSE
            BAL   RETURN,FREELOCK         Disallow access to TSB
            NI    ENVRNSW1,X'FF'-PWMATCH  Indicate not a match
            MVC   MTMSGID,=C'M009'        Identify message
            LA    R2,OLDPSWRD             Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,L'OLDPSWRD      Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  TSBBASE
         EJECT
***********************************************************************
* UPDTUADS                                                            *
*                                                                     *
*                Update SYS1.UADS With The New Password               *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
UPDTUADS BLOCK LEVEL1
         SPACE 1
         BAL   RETURN,ALOCUADS         Allocate SYS1.UADS
         IF (TM,ENVRNSW2,ALLOCOK,M)    IF Allocat sucessfull
            BAL   RETURN,OPENUADS         Open SYS1.UADS
            IF (TM,ENVRNSW2,OPENOK,O)     IF Open sucessfull
               BAL   RETURN,ENQUEUE          Enqueue on OPENUADS
               IF (TM,ENVRNSW2,UADSENQ,O)    IF ENQ sucessfull
                  BAL   RETURN,SRCHUADS         Search UADS members
                  IF (TM,ENVRNSW3,PWFOUND,O)    IF PW found in UADS
                     BAL   RETURN,SETUADS          Set new PW in UADS
                     IF (TM,ENVRNSW2,UADSCHNG,Z)   IF UADS not changed
                        BAL   RETURN,RSTORTSB         Restore TSB's PW
                        ENDIF                         ENDIF
                     ELSE                          ELSE
                     BAL   RETURN,RSTORTSB         Restore TSB's PW
                     ENDIF                         ENDIF
                  BAL   RETURN,CLOSUADS         Close SYS1.UADS
                  BAL   RETURN,DEQUEUE          Dequeue on OPENUADS
                  ELSE                          ELSE
                  BAL   RETURN,CLOSUADS         Close SYS1.UADS
                  BAL   RETURN,RSTORTSB         Restore TSB's PW
                  ENDIF                         ENDIF
               ELSE                          ELSE
               BAL   RETURN,RSTORTSB         Restore TSB's PW
               ENDIF                         ENDIF
            ELSE                          ELSE
            BAL   RETURN,RSTORTSB         Restore TSB's PW
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         EJECT
***********************************************************************
* ALOCUADS                                                            *
*                                                                     *
*                 Dynamically Allocate SYS1.UADS                      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
ALOCUADS BLOCK LEVEL2
         SPACE 1
         L     S99RBASE,PVTRBPTR       Addressability to request block
         USING S99RB,S99RBASE
         SPACE 1
         BAL   RETURN,AUADSDDN          Allocate UADS by DDNAME
         IF (CLC,S99DDNRC,EQ,=F'0')    IF Allocated by DDNAME
            OI    ENVRNSW2,ALLOCDDN       Indicate DDNAME sucess
            ELSE                          ELSE
            NI    ENVRNSW2,X'FF'-ALLOCDDN Indicate DDNAME failed
            IF (CLC,S99DDNRC,EQ,=F'4'),   IF DDNAME not found          X
               AND,                                                    X
               (CLC,S99ERROR,EQ,=X'0438')
               BAL   RETURN,AUADSDSN         Allocate UADS by DSNAME
               IF (CLC,S99DSNRC,EQ,=F'0')    IF Allocated by DSNAME
                  OI    ENVRNSW2,ALLOCDSN       Indicate DSNAME sucess
                  ELSE                          ELSE
                  NI    ENVRNSW2,X'FF'-ALLOCDSN Indicate DSNAME failed
                  LA    R1,S99DSNRC             Get return code address
                  BAL   RETURN,DAIRFAIL         Issue error message
                  MVC   PSWRDRC,S99DSNRC        Set command's RC
                  ENDIF                         ENDIF
               ELSE                          ELSE
               LA    R1,S99DDNRC             Get return code address
               BAL   RETURN,DAIRFAIL         Issue error message
               MVC   PSWRDRC,S99DDNRC        Set command's return code
               ENDIF                         ENDIF
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  S99RBASE
         EJECT
***********************************************************************
* AUADSDDN                                                            *
*                                                                     *
*              Allocate UADS With the DDNAME Of SYSUADS               *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
AUADSDDN BLOCK LEVEL3
         SPACE 1
         L     S99RBASE,PVTRBPTR       Addressability to request block
         USING S99RB,S99RBASE
         SPACE 1
         LA    R2,DDNTUP               Point to text unit list
         ST    R2,S99TXTPP
         MVI   S99VERB,S99VRBDN        Inicate DDNAME allocation
         LA    R1,PVTRBPTR             Point to request block
         DYNALLOC                      DDNAME allocation
         ST    R15,S99DDNRC            Save SVC99's return code
         IF (LTR,R15,R15,Z)            IF DDNAME Allocation suceeded
            MVC   DDNAME,=CL8'SYSUADS '   Save DDNAME for DCB
            ELSE                          ELSE
            MVC   DDNAME,=CL8'        '   Clear DDNAME
            ENDIF
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  S99RBASE
         EJECT
***********************************************************************
* AUADSDSN                                                            *
*                                                                     *
*                Allocate SYS1.UADS By DSNAME                         *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
AUADSDSN BLOCK LEVEL3
         SPACE 1
         L     S99RBASE,PVTRBPTR       Addressability to request block
         USING S99RB,S99RBASE
         SPACE 1
         LA    R2,RDDNTUP              Point to text unit list
         ST    R2,S99TXTPP
         MVI   S99VERB,S99VRBAL        Inicate DSNAME allocation
         LA    R1,PVTRBPTR             Point to request block
         DYNALLOC                      DSNAME allocation
         ST    R15,S99DSNRC            Save SVC99's return code
         MVC   DDNAME,=CL8'        '   Clear DDNAME
         IF (LTR,R15,R15,Z)            IF DDNAME Allocation suceeded
            LA    R1,DDNAME               Address of DDNAME
            LA    R14,RDDNTEXT            Address of DDNAME returned
            LH    R15,RDDNTXTL            Length of DDNAME returned
            BCTR  R15,0                   Length-1 for machine length
            EX    R15,VARMVC              Move to DDNAME
            ENDIF
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  S99RBASE
         EJECT
***********************************************************************
* OPENUADS                                                            *
*                                                                     *
*                   Open SYS1.UADS For Update                         *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
OPENUADS BLOCK LEVEL2
         SPACE 1
         LA    DCBBASE,UADSDCB         Addressability to DCB
         USING IHADCB,DCBBASE
         SPACE 1
         MVC   DCBDDNAM,DDNAME         Set the DDNAME for the DCB
         SPACE 1
         BAL   RETURN,BYPASSPW         Allow OPEN without password
         SPACE 1
         OPEN  (UADSDCB,(UPDAT)),      Open UADS                       X
               MF=(E,PVTOPEN)
         SPACE 1
         BAL   RETURN,RSTOREPW         Disallow OPEN without password
         SPACE 1
         LA    DCBBASE,UADSDCB         Addressability to DCB
         IF (TM,DCBOFLGS,DCBOFOPN,O)   IF UADS opened sucessfully
            OI    ENVRNSW2,OPENOK         Indicate opened
            ELSE                          ELSE
            NI    ENVRNSW2,X'FF'-OPENOK   Indicate not opened
            MVC   MTMSGID,=C'M014'        Identify message
            LA    R2,DCBOFLGS             Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'81'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  DCBBASE
         EJECT
***********************************************************************
* BYPASSPW                                                            *
*                                                                     *
*              Bypass Password Protection For Opening UADS            *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
BYPASSPW BLOCK LEVEL3
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         L     TCBBASE,PSATNEW         Addressability to TCB
         USING TCB,TCBBASE
         L     JSCBBASE,TCBJSCB        Addressability to TSB
         USING IEZJSCB,JSCBBASE
         SPACE 1
         OI    ENVRNSW1,NOPSWRD        Indicate in bypass PW state
         SPACE 1
         IF (TM,JSCBSWT1,JSCBPASS,Z)    IF DSN's being PW protected
            NI    ENVRNSW2,X'FF'-WASPASS  Save JSCBPASS setting
            L     R2,=V(JSBESTAE)         Point to ESTAE CSECT
            LA    R3,ESTAELST             Point to list form of ESTAE
            MODESET KEY=ZERO              Allow access to the JSCB
            ESTAE (2),                    Establish ESTAE Exit         X
               CT,                        Create another ESTAE         X
               PARAM=(8),                 Point to the private aea     X
               MF=(E,(3))
            ST    R15,ESTAERC             Save ESTAE's return code
            IF (C,R15,GT,=F'0')           IF ESTAE failed
               ST    R15,PSWRDRC             Set command's return code
               MODESET KEY=NZERO             Disallow access to JSCB
               MVC   MTMSGID,=C'M023'        Identify message
               LA    R2,ESTAERC              Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,X'84'           Set length of insert
               BAL   RETURN,TSOMSG           Issue error message
               ABEND 13,DUMP                 ABEND with a U0013
               ENDIF                         ENDIF
            OI    JSCBSWT1,JSCBPASS       Remove protection for UADS
            MODESET KEY=NZERO             Disallow access to the JSCB
            ELSE                          ELSE
            OI    ENVRNSW2,WASPASS        Save JSCBPASS setting
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  PSABASE
         DROP  TCBBASE
         DROP  JSCBBASE
         EJECT
***********************************************************************
* RSTOREPW                                                            *
*                                                                     *
*              Restore Password Protection To Original Setting        *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
RSTOREPW BLOCK LEVEL3
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         L     TCBBASE,PSATNEW         Addressability to TCB
         USING TCB,TCBBASE
         L     JSCBBASE,TCBJSCB        Addressability to TSB
         USING IEZJSCB,JSCBBASE
         SPACE 1
         IF (TM,ENVRNSW2,WASPASS,Z)    IF JSCBPASS was off
            MODESET KEY=ZERO              Allow access to the JSCB
            NI    JSCBSWT1,X'FF'-JSCBPASS Reset JSCBPASS to off
            MODESET KEY=NZERO             Disallow access to the JSCB
            LA    R2,ESTAELST             Point to list form of ESTAE
            ESTAE 0,MF=(E,(2))            Turn off ESTAE
            ENDIF                         ENDIF
         SPACE 1
         NI    ENVRNSW1,X'FF'-NOPSWRD  PW bypass state ended
         NI    ENVRNSW2,X'FF'-WASPASS  Clear JSCBPASS save bit
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  PSABASE
         DROP  TCBBASE
         DROP  JSCBBASE
         EJECT
***********************************************************************
* ENQUEUE                                                             *
*                                                                     *
*      Enqueue On The Queue: SYSIKJUA And The Resource: OPENUADS      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
ENQUEUE  BLOCK LEVEL2
         SPACE 1
         LA    R2,=CL8'SYSIKJUA'       Set queue name
         LA    R3,=CL8'OPENUADS'       Set resource name
         ENQ   ((2),(3),E,8,SYSTEM),   Exclusive control of UADS       X
               RET=USE,RELATED=UADS,MF=(E,PVTENQ)
         IF (LTR,R15,R15,Z)            IF ENQ sucessfull
            OI    ENVRNSW2,UADSENQ        Indicate enqueued on UADS
            ST    R15,DEQRC               Save ENQ return code
            ELSE                          ELSE
            NI    ENVRNSW2,X'FF'-UADSENQ  Indicate UADS released
            MVC   ENQRC,=F'0'             Clear ENQ return code
            MVC   ENQRC+3(1),3(R15)       Save ENQ return code
            IF (CLC,ENQRC,EQ,=F'4')       IF Resource not available
               MVC   MTMSGID,=C'M027'        Identify message
               BAL   RETURN,TSOMSG           Issue error message
               ELSE                          ELSE
               MVC   PSWRDRC,ENQRC           Set command's return code
               MVC   MTMSGID,=C'M025'        Identify message
               LA    R2,ENQRC                Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,X'84'           Set length of insert
               BAL   RETURN,TSOMSG           Issue error message
               ABEND 15,DUMP                 ABEND with a U0015
               ENDIF                         ENDIF
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* SRCHUADS                                                            *
*                                                                     *
*               Search SYS1.UADS For Current Password                 *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
SRCHUADS BLOCK LEVEL2
         SPACE 1
         BAL   RETURN,GETUSRID         Get user ID from PSCB
         SPACE 1
         LA    BLDLBASE,PVTENTRY       Addressability to BLDL list
         USING BLDLLIST,BLDLBASE
         SR    R1,R1                   First member is USERID0
         LH    R3,USERIDL              Get length of user ID
         DO FROM=(R2,=F'&BLDLNE')      DO For number of entries
            MVI   BLDLR,X'FF'             Indicate not searched
            MVC   BLDLNAME,USERID         Put in user ID
            IC    R0,=X'F0'               Get conversion mask
            OR    R0,R1                   Convert to character
            STC   R0,BLDLNAME(R3)         Insert it as suffix
            LA    R1,1(R1)                Incurment member number
            LA    BLDLBASE,&BLDLEL.(BLDLBASE) Incurment to next entry
            ENDDO                         ENDDO
         SPACE 1
         BLDL  UADSDCB,PVTBLDL         Determine UADS members
         ST    R15,BLDLRC              Save BLDL's return code
         ST    R0,BLDLRESC             Save BLDL's reason code
         IF (C,R15,LE,=F'4')           IF BLDL suceeded
            OI    ENVRNSW3,BLDLOK         BLDL found at least 1 mbr
            BAL   RETURN,GETUADS          Get members from UADS
            ELSE                          ELSE
            ST    R15,PSWRDRC             Set command's return code
            NI    ENVRNSW3,X'FF'-BLDLOK   BLDL found no members
            MVC   MTMSGID,=C'M015'        Identify message
            LA    R2,BLDLRC               Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            LA    R2,BLDLRESC             Point to insert
            ST    R2,MTINSRT+4
            MVI   MTINSRT+4,X'84'         Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         DROP  BLDLBASE
         SPACE 2
         EJECT
***********************************************************************
* GETUSRID                                                            *
*                                                                     *
*         Get The User ID From The Protected Step Control Block       *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
GETUSRID BLOCK LEVEL3
         SPACE 1
         L     CPPLBASE,CPPLPTR        Addressability to CPPL
         USING CPPL,CPPLBASE
         L     PSCBBASE,CPPLPSCB       Addressability to PSCB
         USING PSCB,PSCBBASE
         SPACE 1
         MVC   USERID,=CL8'        '   Clear user ID
         MVC   USERID(L'PSCBUSER),PSCBUSER  Get the user ID
         SPACE 1
         SR    R1,R1                   Get the length of the user ID
         IC    R1,PSCBUSRL
         STH   R1,USERIDL
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  CPPLBASE
         DROP  PSCBBASE
         EJECT
***********************************************************************
* GETUADS                                                             *
*                                                                     *
*         Get Members From UADS Data Set And Build UADS Tree          *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
GETUADS  BLOCK LEVEL3
         SPACE 1
         LA    BLDLBASE,PVTENTRY       Addressability to BLDL list
         USING BLDLLIST,BLDLBASE
         SR    R1,R1                   Initialize member count
         DO WHILE=(CLI,BLDLR,NE,X'00') DO WHILE Members available
            LA    R1,1(R1)                Incurment member count
            LA    BLDLBASE,&BLDLEL.(BLDLBASE) Incurment to next entry
            ENDDO                         ENDDO
         SPACE 1
         ST    R1,MBRCOUNT             Save member count
         IF (LTR,R1,R1,P)              IF The user ID members exist
            OI    ENVRNSW3,MEMBERS        Indicate members found
            BAL   RETURN,READUADS         Read UADS members into core
            IF (TM,ENVRNSW3,GOODREAD,O)   IF Sucessfull in reading UADS
               BAL   RETURN,CHCKTREE         Check UADS tree
               ENDIF                         ENDIF
            ELSE                          ELSE
            MVC   PSWRDRC,=F'4'           Set command's return code
            NI    ENVRNSW3,X'FF'-MEMBERS  Indicate no members found
            MVC   MTMSGID,=C'M016'        Identify message
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  BLDLBASE
         EJECT
***********************************************************************
* READUADS                                                            *
*                                                                     *
*           Read All Members From UADS For A Given User ID            *
*                                                                     *
* LEVEL-4                                                             *
***********************************************************************
         SPACE 2
READUADS BLOCK LEVEL4
         SPACE 1
         BAL   RETURN,GETAREA          Acquire storage for UADS tree
         IF (TM,ENVRNSW3,GOTAREA,O)    IF Sucessfull in getting core
            LA    BLDLBASE,PVTENTRY       Addressability to BLDL list
            USING BLDLLIST,BLDLBASE
            L     UHDRBASE,TREEPTR        Addressability to tree
            USING UADSHDR,UHDRBASE
            LA    DCBBASE,UADSDCB         Addresibility to UADS DCB
            USING IHADCB,DCBBASE
            LH    R3,DCBBLKSI             Get UADS BLKSIZE
            DO FROM=(R2,MBRCOUNT)         DO For All members found
               FIND  UADSDCB,BLDLTTR,C       Member from BLDL
               ST    R15,FINDRC              Save FIND's return code
               IF (LTR,R15,R15,NZ)           IF FIND failed
                  ST    R15,PSWRDRC             Set command's RC
                  MVC   MTMSGID,=C'M018'        Identify message
                  LA    R2,FINDRC               Point to insert
                  ST    R2,MTINSRT
                  MVI   MTINSRT,X'84'           Set length of insert
                  LA    R2,BLDLNAME             Point to insert
                  ST    R2,MTINSRT+4
                  MVI   MTINSRT+4,L'BLDLNAME    Set length of insert
                  BAL   RETURN,TSOMSG           Issue error message
                  ABEND 8,DUMP                  ABEND with a U0008
                  ENDIF
               READ  UADSDECB,SF,UADSDCB,UADSHDR,MF=E  Read a block
               CHECK UADSDECB                Check for read completion
               LA    UHDRBASE,0(R3,UHDRBASE) Incurement to next block
               LA    BLDLBASE,&BLDLEL.(BLDLBASE) Incurment BLDL list
               ENDDO                         ENDDO
            OI    ENVRNSW3,GOODREAD       Indicate read sucessfull
            ELSE                          ELSE
            NI    ENVRNSW3,X'FF'-GOODREAD  Indicate read failed
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL4               Return
         SPACE 2
         DROP  BLDLBASE
         DROP  UHDRBASE
         DROP  DCBBASE
         EJECT
***********************************************************************
* GETAREA                                                             *
*                                                                     *
*                 Acquire A Storage Area For UADS Tree                *
*                                                                     *
* LEVEL-5                                                             *
***********************************************************************
         SPACE 2
GETAREA  BLOCK LEVEL5
         SPACE 1
         LA    DCBBASE,UADSDCB         Addressability to DCB
         USING IHADCB,DCBBASE
         SPACE 1
         L     R2,MBRCOUNT            Get number of members
         MH    R2,DCBBLKSI            Multiply by BLKSIZE
         ST    R2,TREESIZE            Save size of the tree area
         SPACE 1
         GETMAIN RC,LV=(2),SP=3       Aquire UADS tree area
         ST    R15,GMSP3RC            Save the return code
         IF (LTR,R15,R15,Z)           IF GETMAIN succeeds
            ST    R1,TREEPTR             Issue message and ABEND
            OI    ENVRNSW3,GOTAREA       Indicate sucess
            ELSE                         ELSE
            ST    R15,PSWRDRC            Set the command's return code
            NI    ENVRNSW3,X'FF'-GOTAREA Indicate failure
            MVC   MTMSGID,=C'M017'       Identify message
            LA    R2,GMSP3RC             Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'          Set length of insert
            BAL   RETURN,TSOMSG          Issue error message
            ENDIF                        ENDIF
         SPACE 1
         ENDBLOCK LEVEL5               Return
         SPACE 2
         DROP  DCBBASE
         EJECT
***********************************************************************
* CHCKTREE                                                            *
*                                                                     *
*               Check UADS Tree For A Matching Password               *
*                                                                     *
* LEVEL-4                                                             *
***********************************************************************
         SPACE 2
CHCKTREE BLOCK LEVEL4
         SPACE 1
         L     UHDRBASE,TREEPTR        Addressability to tree header
         USING UADSHDR,UHDRBASE
         L     UPOBBASE,UADSPWOP       Addressability to 1st POB
         AR    UPOBBASE,UHDRBASE
         USING UADSPWOB,UPOBBASE
         SPACE 1
         IF (CLC,UADSPPWP,EQ,=F'0')         IF PDBs exist
            NI    ENVRNSW3,X'FF'-DEFINED       Indicate not defined
            NI    ENVRNSW3,X'FF'-POBAVAIL      Indicate bypass loop
            ELSE                               ELSE
            OI    ENVRNSW3,DEFINED             Indicate PWs defined
            OI    ENVRNSW3,POBAVAIL            Indicate perform loop
            OI    ENVRNSW3,NEWDIFF             Assume New PW different
            NI    ENVRNSW3,X'FF'-OLDMATCH      Old PW not yet matched
            ENDIF                              ENDIF
         SPACE 1
         STRTSRCH WHILE=(TM,ENVRNSW3,POBAVAIL,O) DO WHILE(POBs avail)
            IF (TM,UADSPFLG,UADSPEND,O)          IF Last POB
               NI    ENVRNSW3,X'FF'-POBAVAIL Indicate last
               ENDIF ENDIF
            L     UPDBBASE,UADSPPWP                 Point to POB's PDB
            AR    UPDBBASE,UHDRBASE
            USING UADSPWDB,UPDBBASE
            IF (CLC,OLDPSWRD,EQ,UADSPPWD)           IF Old PW matches
               OI    ENVRNSW3,OLDMATCH                 Old PW matches
               LA    R2,UADSPPWD                       Get PW tree adr
               ST    R2,PSWRDADR                       Save tree adr
               ENDIF                                   ENDIF
            EXITIF (CLC,NEWPSWRD,EQ,UADSPPWD)       EXITIF Duplicate PW
               NI    ENVRNSW3,X'FF'-NEWDIFF            New PW matches
            ORELSE                                  ORELSE
            L     UPOBBASE,UADSPNOP             Point to next POB
            LA    UPOBBASE,0(UPOBBASE)          Remove flag bits
            AR    UPOBBASE,UHDRBASE
            ENDLOOP                                 ENDLOOP
            ENDSRCH                                 ENDSRCH
         SPACE 1
         IF (TM,ENVRNSW3,GOODPW,NO)    IF Update to UADS not allowed
            BAL   RETURN,TELLUSER         Tell user why
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL4               Return
         SPACE 2
         DROP  UHDRBASE
         DROP  UPOBBASE
         DROP  UPDBBASE
         EJECT
***********************************************************************
* TELLUSER                                                            *
*                                                                     *
*            Inform User If UADS Password Can Not Be Updated          *
*                                                                     *
* LEVEL-5                                                             *
***********************************************************************
         SPACE 2
TELLUSER BLOCK LEVEL5
         SPACE 1
         IF (TM,ENVRNSW3,DEFINED,Z)    IF Password not defined
            MVC   MTMSGID,=C'M019'        Identify message
            LA    R2,USERID               Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,L'USERID        Set insert length
            BAL   RETURN,TSOMSG           Issue error message
            ELSE                          ELSE
            IF (TM,ENVRNSW3,OLDMATCH,Z)   IF Password not found
               MVC   MTMSGID,=C'M012'        Identify message
               LA    R2,OLDPSWRD             Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,L'OLDPSWRD      Set insert length
               BAL   RETURN,TSOMSG           Issue error message
               ELSE                          ELSE
               MVC   MTMSGID,=C'M020'        Identify message
               LA    R2,NEWPSWRD             Point to insert
               ST    R2,MTINSRT
               MVI   MTINSRT,L'NEWPSWRD      Set insert length
               BAL   RETURN,TSOMSG           Issue error message
               ENDIF                         ENDIF
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL5               Return
         EJECT
***********************************************************************
* SETUADS                                                             *
*                                                                     *
*                  Set New Password In UADS Tree                      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
SETUADS  BLOCK LEVEL2
         SPACE 1
         LA    DCBBASE,UADSDCB        Addressability to DCB
         USING IHADCB,DCBBASE
         SPACE 1
         LH    R1,DCBBLKSI             Get UADS block size
         L     R3,PSWRDADR             Get address of PW being changed
         S     R3,TREEPTR              Convert to offset in tree area
         SR    R2,R2                   Clear for divide
         DR    R2,R1                   Find member number
         ST    R3,WRITMBRN             Save member number for write
         LR    R1,R3                   Hold member number
         MH    R3,DCBBLKSI             Find member offset in tree area
         A     R3,TREEPTR              Calculate member address in tree
         ST    R3,WRITMBRA             Save member address for write
         MH    R1,=H'&BLDLEL'          Find BLDL entry offset
         LA    R2,PVTENTRY(R1)         Calculate BLDL entry address
         ST    R2,WRITBLDL             Save for write
         SPACE 1
         BAL   RETURN,WRITUADS
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 1
         DROP  DCBBASE
         EJECT
***********************************************************************
* WRITUADS                                                            *
*                                                                     *
*              Write Updated UADS Tree To UADS Data Set               *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
WRITUADS BLOCK LEVEL3
         L     BLDLBASE,WRITBLDL       Addressability to BLDL entry
         USING BLDLLIST,BLDLBASE
         L     UHDRBASE,WRITMBRA       Addressability to member block
         USING UADSHDR,UHDRBASE
         NI    ENVRNSW2,X'FF'-UADSCHNG Indicate UADS not yet changed
         FIND  UADSDCB,BLDLTTR,C       Member from BLDL
         ST    R15,FINDRC              Save FIND's return code
         IF (LTR,R15,R15,NZ)           IF FIND failed
            ST    R15,PSWRDRC             Set command's RC
            MVC   MTMSGID,=C'M018'        Identify message
            LA    R2,FINDRC               Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            LA    R2,BLDLNAME             Point to insert
            ST    R2,MTINSRT+4
            MVI   MTINSRT+4,L'BLDLNAME    Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 9,DUMP                  ABEND with a U0009
            ENDIF
         READ  UADSDECB,SF,UADSDCB,UADSHDR,MF=E  Read block
         CHECK UADSDECB                Check for read completion
         L     R2,PSWRDADR             Get adr in tree of changed PW
         MVC   0(8,R2),NEWPSWRD        Put new password in tree
         WRITE UADSDECB,SF,UADSDCB,UADSHDR,MF=E  Read block
         CHECK UADSDECB                Check for write completion
         SPACE 1
         OI    ENVRNSW2,UADSCHNG       Indicate UADS now changed
         MVC   MTMSGID,=C'M010'        Identify message
         LA    R2,OLDPSWRD             Point to insert
         ST    R2,MTINSRT
         MVI   MTINSRT,L'OLDPSWRD      Set length of insert
         LA    R2,NEWPSWRD             Point to insert
         ST    R2,MTINSRT+4
         MVI   MTINSRT+4,L'NEWPSWRD    Set length of insert
         BAL   RETURN,TSOMSG           Issue error message
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  UHDRBASE
         DROP  BLDLBASE
         EJECT
***********************************************************************
* CLOSUADS                                                            *
*                                                                     *
*                           Close SYS1.UADS                           *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
CLOSUADS BLOCK LEVEL2
         SPACE 1
         CLOSE (UADSDCB),MF=(E,PVTCLOSE)  Close UADS
         SPACE 1
         IF (TM,ENVRNSW3,GOTAREA,O)    IF UADS tree gotten
            FREEMAIN R,SP=3               Free accunting tree storage
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* DEQUEUE                                                             *
*                                                                     *
*          Dequeue On The Queue: SYSIKJUA And Resource: OPENUADS      *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
DEQUEUE  BLOCK LEVEL2
         SPACE 1
         LA    R2,=CL8'SYSIKJUA'       Set queue name
         LA    R3,=CL8'OPENUADS'       Set resource name
         DEQ   ((2),(3),8,SYSTEM),RET=HAVE,  Release UADS              X
               RELATED=UADS,MF=(E,PVTDEQ)
         IF (LTR,R15,R15,Z)            IF DEQ sucessfull
            NI    ENVRNSW2,X'FF'-UADSENQ  Indicate UADS released
            ST    R15,DEQRC               Save DEQ return code
            ELSE                          ELSE
            MVC   DEQRC,=F'0'             Clear DEQ return code
            MVC   DEQRC+3(1),3(R15)       Save DEQ return code
            MVC   PSWRDRC,DEQRC           Set command's return code
            MVC   MTMSGID,=C'M026'        Identify message
            LA    R2,DEQRC                Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 16,DUMP                 ABEND with a U0016
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         EJECT
***********************************************************************
* RSTORTSB                                                            *
*                                                                     *
*               Restore TSB Password Back To Old Password             *
*                                                                     *
* LEVEL-2                                                             *
***********************************************************************
         SPACE 2
RSTORTSB BLOCK LEVEL2
         SPACE 1
         BAL   RETURN,GETLCLLK         Allow access to TSB
         BAL   RETURN,GETCMSLK         Allow access to TSB
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         L     ASCBBASE,PSAANEW        Addressability to ASCB
         USING ASCB,ASCBBASE
         L     TSBBASE,ASCBTSB         Addressability to TSB
         USING TSB,TSBBASE
         SPACE 1
         ST    TSBBASE,TSBPTR          Save TSB address
         SPACE 1
         IF (LTR,TSBBASE,TSBBASE,P)    IF TSO user running forground
            BAL   RETURN,RESETTSB         Set old password in TSB
            ELSE                          ELSE
            BAL   RETURN,FREELOCK         Disallow access to TSB
            MVC   MTMSGID,=C'M007'        Identify message
            LA    R2,TSBPTR               Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 10,DUMP                 ABEND with a U0010
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL2               Return
         SPACE 2
         DROP  PSABASE
         DROP  ASCBBASE
         DROP  TSBBASE
         EJECT
***********************************************************************
* RESETTSB                                                            *
*                                                                     *
*                  Reset The Old Password In The TSB                  *
*                                                                     *
* LEVEL-3                                                             *
***********************************************************************
         SPACE 2
RESETTSB BLOCK LEVEL3
         SPACE 1
         L     TSBBASE,TSBPTR          Addressability to TSB
         USING TSB,TSBBASE
         SPACE 1
         LM    R0,R1,NEWPSWRD          Set up new password
         LM    R2,R3,OLDPSWRD          Set up old password
         SPACE 1
         IF (CDS,R0,R2,EQ,TSBPSWD)     IF Passwords are swaped
            BAL   RETURN,FREELOCK         Disallow access to TSB
            ELSE                          ELSE
            BAL   RETURN,FREELOCK         Disallow access to TSB
            MVC   MTMSGID,=C'M021'        Identify message
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 11,DUMP                 ABEND with a U0011
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL3               Return
         SPACE 2
         DROP  TSBBASE
         EJECT
***********************************************************************
* ENVRNOFF                                                            *
*                                                                     *
*                   Set APF Authorized Environment Off                *
*                                                                     *
* LEVEL-1                                                             *
***********************************************************************
         SPACE 2
ENVRNOFF BLOCK LEVEL1
         SPACE 1
         APFAUTH OFF                   Always remove authority  **APF**
         IF (TM,ENVRNSW1,STAXSET,O)    IF STAX Set
            LA    R2,STAXLIST             Point to list form of STAX
            STAX  DEFER=NO,MF=(E,(2))     Allow Terminal Attentions
            ENDIF                         ENDIF
         IF (TM,ENVRNSW1,ESTAESET,O)   IF ESTAE Set
            LA    R2,ESTAELST             Point to list form of ESTAE
            ESTAE 0,MF=(E,(2))            Turn off ESTAE
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK LEVEL1               Return
         EJECT
***********************************************************************
* TERMNATE                                                            *
*                                                                     *
*                   Terminate The Command Processor                   *
*                                                                     *
* NO-RETURN                                                           *
***********************************************************************
         SPACE 2
         DS    0H
TERMNATE EQU   *
         SPACE 1
         L     R2,PSWRDRC              Return to user
         L     SAVE,SAVEAREA+4
         FREEMAIN R,SP=2
         LR    R15,R2
         SPACE 1
         RETURN (14,12),RC=(15)
         EJECT
***********************************************************************
* GTMNFAIL                                                            *
*                                                                     *
*             Private Area GETMAIN Failed - ABEND                     *
*                                                                     *
* NO-RETURN                                                           *
***********************************************************************
         SPACE 2
         DS    0H
GTMNFAIL EQU   *
         SPACE 1
         LR    R3,R15                 Hold GETMAIN return code
         SPACE 1
         USING CPPL,CPPLBASE          Addressability to CPPL
         L     UPTBASE,CPPLUPT        Addressability to UPT
         USING UPT,UPTBASE
         SPACE 1
         L     R1,=V(MSG001E)         Get address of message structure
         LH    R0,0(R1)               Get length of the message
         LH    R2,2(R1)               Get length of the message ID
         LA    R1,4(R1)               Point to start of message text
         IF (TM,UPTSWS,UPTMID,Z)      IF Message IDs not wanted
            LA    R1,0(R2,R1)            Point past message ID
            SR    R0,R2                  Deincurment message length
            ENDIF                        ENDIF
         SPACE 1
         TPUT  (1),(0)                Issue the message to user
         IF (LTR,R15,R15,NZ)          If TPUT failed
            ABEND 2,DUMP                 ABEND with a U0002
            ENDIF                        ENDIF
         SPACE 1
         ABEND 1,DUMP                 ABEND with a U0001
         SPACE 2
         DROP  CPPLBASE
         DROP  UPTBASE
         EJECT
***********************************************************************
* UADSEOD                                                             *
*                                                                     *
*             CHECK Encountered An EOD For A UADS Member              *
*                                                                     *
* NO-RETURN                                                           *
***********************************************************************
         SPACE 2
         DS    0H
UADSEOD  EQU   *
         SPACE 1
         MVC   MTMSGID,=C'M022'        Identify message
         LA    R2,UADSDCB              Point to insert
         ST    R2,MTINSRT
         MVI   MTINSRT,X'84'           Set insert length
         LA    R2,UADSDECB             Point to insert
         ST    R2,MTINSRT+4
         MVI   MTINSRT+4,X'84'         Set insert length
         BAL   RETURN,TSOMSG           Issue error message
         SPACE 1
         ABEND 12,DUMP                ABEND with a U0012
         SPACE 1
         EJECT
***********************************************************************
* UADSERR                                                             *
*                                                                     *
*                   Error Encountered Processing UADS I/O             *
*                                                                     *
* NO-RETURN                                                           *
***********************************************************************
         SPACE 2
         DS    0H
UADSERR  EQU   *
         SPACE 1
         SYNADAF ACSMETH=BPAM         Create error message
MSGSYNAD EQU   *
         SAVE  (14,12)                Save registers
         SPACE 1
         MVC   MSG024E,=F'1'          Build PUTLINE message
         LA    R3,HDR024E
         ST    R3,ADR024E
         MVC   HDR024E,=AL2(L'TXT024E+4)
         MVC   HDR024E+2,=H'0'
         MVC   TXT024E(&MSGIDL),=CL&MSGIDL'PSWRD024E '
         MVC   TXT024E+&MSGIDL.(L'TXT024E-&MSGIDL),50(R1)
         LA    R1,MSG024E
         BAL   RETURN,PUTLINE         Issue message
         SPACE 1
         LM    R14,R12,12(R13)        Restore registers
         SYNADRLS                     Free message and save area
         SPACE 1
         ABEND 14,DUMP                ABEND with a U0012
         SPACE 1
         EJECT
***********************************************************************
* TSOMSG                                                              *
*                                                                     *
*                  Invoke IKJEFF02 To Issue A Message                 *
*                                                                     *
*                  No information is passed to TSOMSG, however        *
*                  MTMSGID and insert definitions must be completed   *
*                  prior to calling TSOMSG.                           *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
TSOMSG   BLOCK MTLVL
         SPACE 1
         USING PSA,PSABASE             Addressability to CVT
         L    CVTBASE,FLCCVT
         USING CVT,CVTBASE
         SPACE 1
         MVC   MTECB,=F'0'             Clear IKJEFF02's ECB
         SPACE 1
         LA   R1,MTPARML               Issue message
         CALLTSSR EP=IKJEFF02,MF=(E,(1))
         ST    R15,MTRC                Save IKJEFF02's return code
         IF (LTR,R15,R15,NZ)           IF IKJEFF02 failed
            ST    R15,PSWRDRC             Set command's return code
            L     R1,=V(MSG003E)          Point to message
            BAL   RETURN,PUTLINE          Issue IKJEFF02 error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK MTLVL                Return
         SPACE 2
         DROP PSABASE
         DROP CVTBASE
         EJECT
***********************************************************************
* GNRFAIL                                                             *
*                                                                     *
*               Invoke IKJEFF19 - Genreal Failure Routine             *
*                                                                     *
*                      Register-1: Failing return code                *
*                      Register-2: IKJEFF19's call ID                 *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
GNRFAIL  BLOCK GFLVL
*                                      Complete parameter list
         ST    R1,GFRCODE                Failing return code
         STH   R2,GFCALLID               Call ID
         MVC   GFECB,=F'0'               Clear CP's ECB
         SPACE 1
         LINK  EP=IKJEFF19,            Link to general failure service X
               MF=(E,GFPRMPTR)
         ST    R15,GFRC                Save IKJEFF19's return code
         IF (LTR,R15,R15,NZ)           If IKJEFF19 failed
            ST    R15,PSWRDRC             Set command's return code
            MVC   MTMSGID,=C'M004'        Identify message
            LA    R2,GFRC    '            Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK GFLVL                Return
         EJECT
***********************************************************************
* PUTLINE                                                             *
*                                                                     *
*                       Issue A PUTLINE Message                       *
*                                                                     *
*                      Register-1: Points to the message              *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
PUTLINE  BLOCK PTLNLVL
         SPACE 1
         MVC   TIOECB,=F'0'             Clear PUTLINE's ECB
         LR    R2,R1                    Point to message
         SPACE 1
         PUTLINE OUTPUT=((2),TERM,SINGLE,INFOR), Inform user           X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               PARM=PTPB,MF=(E,PVTIOPL)
         ST    R15,PTLNRC              Save PUTLINE's return code
         IF (LTR,R15,R15,NZ)          IF PUTLINE fails
            ST    R15,PSWRDRC            Set command's return code
            L     R1,=V(MSG002E)         Point to TPUT message
            BAL   RETURN,TPUT            Issue TPUT
            ENDIF                        ENDIF
         SPACE 1
         ENDBLOCK PTLNLVL              Return
         SPACE 2
         EJECT
***********************************************************************
* TPUT                                                                *
*                                                                     *
*                            Issue A TPUT Message                     *
*                                                                     *
*                      Register-1: Points to the message              *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
TPUT     BLOCK TPUTLVL
         SPACE 1
         L     CPPLBASE,CPPLPTR       Addressability to CPPL
         USING CPPL,CPPLBASE
         L     UPTBASE,CPPLUPT        Addressability to UPT
         USING UPT,UPTBASE
         L     ECTBASE,CPPLECT        Addressability to ECT
         USING ECT,ECTBASE
         SPACE 1
         OI    ECTMSGF,X'80'          Flush outstanding 2ed level msgs
         SPACE 1
         LH    R0,0(R1)               Get length of the message
         LH    R2,2(R1)               Get length of the message ID
         LA    R1,4(R1)               Point to start of message text
         IF (TM,UPTSWS,UPTMID,Z)      IF Message IDs not wanted
            LA    R1,0(R2,R1)            Point past message ID
            SR    R0,R2                  Deincurment message length
            ENDIF                        ENDIF
         TPUT  (1),(0)                Issue the message to user
         ST    R15,TPUTRC             Save TPUT's return code
         IF (LTR,R15,R15,NZ)          IF TPUT failed
            ST    R15,PSWRDRC            Set command's return code
            ABEND 5,DUMP                 ABEND with a U0005
            ENDIF                        ENDIF
         SPACE 1
         ENDBLOCK TPUTLVL              Return
         SPACE 2
         DROP  CPPLBASE
         DROP  UPTBASE
         EJECT
***********************************************************************
* GETLCLLK                                                            *
*                                                                     *
*                         Obtain The LOCAL Lock                       *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
GETLCLLK BLOCK GLCLLVL
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         SPACE 1
         MODESET KEY=ZERO,MODE=SUP     Enter SETLOCK environment
         SPACE 1
         SETLOCK OBTAIN,TYPE=LOCAL,    Obtain LOCAL lock               X
               MODE=UNCOND,REGS=USE,                                   X
               RELATED=(LOCAL)
         ST    R15,LCLLKRC             Save SETLOCK return code
         IF (C,R15,LE,=F'4')           IF Obtained LOCAL lock
            OI    ENVRNSW2,LCLLKHLD       Indicate holding LOCAL
            ELSE                          ELSE
            ST    R15,PSWRDRC             Set command's return code
            MODESET KEY=NZERO,MODE=PROB   Remove SETLOCK environment
            NI    ENVRNSW2,X'FF'-LCLLKHLD Indicate no LOCAL lock
            MVC   MTMSGID,=C'M011'        Identify message
            LA    R2,=C'LOCAL'            Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'05'           Set length of insert
            LA    R2,LCLLKRC              Point to insert
            ST    R2,MTINSRT+4
            MVI   MTINSRT+4,X'84'         Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 6,DUMP                  ABEND with a U0006
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK GLCLLVL              Return
         SPACE 2
         DROP  PSABASE
         EJECT
***********************************************************************
* GETCMSLK                                                            *
*                                                                     *
*             Obtain The Cross Memory Services (CMS) Lock             *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
GETCMSLK BLOCK GCMSLVL
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         SPACE 1
         SETLOCK OBTAIN,TYPE=CMS,      Obtain CMS lock                 X
               MODE=UNCOND,REGS=USE,                                   X
               RELATED=(CMS)
         ST    R15,CMSLKRC             Save SETLOCK return code
         IF (C,R15,LE,=F'4')           IF Obtained CMS lock
            OI    ENVRNSW2,CMSLKHLD       Indicate holding CMS
            ELSE                          ELSE
            SETLOCK RELEASE,TYPE=LOCAL,   Release the LOCAL lock       X
               REGS=USE,                                               X
               RELATED=(LOCAL)
            IF (C,R15,LE,=F'4')           IF LOCAL released
               NI    ENVRNSW2,X'FF'-LCLLKHLD Indicate no LOCAL lock
               ENDIF                         ENDIF
            ST    R15,PSWRDRC             Set command's return code
            MODESET KEY=NZERO,MODE=PROB   Remove SETLOCK environment
            NI    ENVRNSW2,X'FF'-CMSLKHLD Indicate no LOCAL lock
            MVC   MTMSGID,=C'M011'        Identify message
            LA    R2,=C'CMS'              Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'03'           Set length of insert
            LA    R2,CMSLKRC              Point to insert
            ST    R2,MTINSRT+4
            MVI   MTINSRT+4,X'84'         Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ABEND 7,DUMP                  ABEND with a U0007
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK GCMSLVL              Return
         SPACE 2
         DROP  PSABASE
         EJECT
***********************************************************************
* FREELOCK                                                            *
*                                                                     *
*                   Release The LOCAL And CMS Locks                   *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
FREELOCK BLOCK FLKLVL
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         SPACE 1
         SETLOCK RELEASE,TYPE=CMS,     Release the CMS lock            X
               REGS=USE,                                               X
               RELATED=(CMS)
         IF (C,R15,LE,=F'4')           IF CMS lock released
            NI    ENVRNSW2,X'FF'-CMSLKHLD Indicate released
            ENDIF                         ENDIF
         SPACE 1
         SETLOCK RELEASE,TYPE=LOCAL,   Release the LOCAL lock          X
               REGS=USE,                                               X
               RELATED=(LOCAL)
         IF (C,R15,LE,=F'4')           IF LOCAL lock released
            NI    ENVRNSW2,X'FF'-LCLLKHLD Indicate released
            ENDIF                         ENDIF
         SPACE 1
         MODESET KEY=NZERO,MODE=PROB   Remove SETLOCK environment
         SPACE 1
         ENDBLOCK FLKLVL               Return
         SPACE 2
         DROP  PSABASE
         EJECT
***********************************************************************
* DAIRFAIL                                                            *
*                                                                     *
*        Invoke IKJEFF18 - Dynamic Allocation Failure Routine         *
*                                                                     *
*        Register-1: Contains the address of SVC99 return code       *
*                                                                     *
*                                                                     *
* MULTI-LEVEL                                                         *
***********************************************************************
         SPACE 2
DAIRFAIL BLOCK DRFLVL
         SPACE 1
         ST    R1,DFRCP                Point to return code
         SPACE 1
         LINK  EP=IKJEFF18,            Link to general failure service X
               MF=(E,DFPARMS)
         ST    R15,DRFRC               Save IKJEFF18's return code
         IF (LTR,R15,R15,NZ)           If IKJEFF18 failed
            ST    R15,PSWRDRC             Set command's return code
            MVC   MTMSGID,=C'M013'        Identify message
            LA    R2,DRFRC   '            Point to insert
            ST    R2,MTINSRT
            MVI   MTINSRT,X'84'           Set length of insert
            BAL   RETURN,TSOMSG           Issue error message
            ENDIF                         ENDIF
         SPACE 1
         ENDBLOCK DRFLVL               Return
         EJECT
***********************************************************************
* CONSTANTS                                                           *
*                                                                     *
*                  Read Only Constants For The Command                *
*                                                                     *
* DATA AREA                                                           *
***********************************************************************
         SPACE 2
         PRINT NOGEN
DATAAREA EQU   *
         SPACE 1
LPVTAREA DC    A(PVTEND-PVTSTART)      Length of GETMAINed private area
         SPACE 1
VARMVC   MVC   0(*-*,R1),0(R14)        Executable MVC
         SPACE 2
         DS    0H
TXTUNTST EQU   *                       SVC99 text unit definitions
         DC    AL2(DALDDNAM)           Define DDNAME
         DC    AL2(1)
         DC    AL2(L'DDNTEXT)
         DC    C'SYSUADS'
         SPACE 1
         DS    0H
         DC    AL2(DALRTDDN)           Define returned DDNAME
         DC    AL2(1)
         DC    AL2(L'RDDNTEXT)
         DC    CL8'        '
         SPACE 1
         DS    0H
         DC    AL2(DALDSNAM)           Define DSNAME
         DC    AL2(1)
         DC    AL2(L'DSNTEXT)
         DC    C'&UADSDSN'             Data Set Name for UADS
         SPACE 1
         DS    0H
         DC    AL2(DALSTATS)           Define DISP=SHR
         DC    AL2(1)
         DC    AL2(L'DISPTEXT)
         DC    X'08'
TXTUNTND EQU   *
LNTXTUNT EQU   TXTUNTND-TXTUNTST
         SPACE 2
SYSUADS  DCB   DSORG=PO,               UADS DCB model                  X
               MACRF=(R,W),                                            X
               EODAD=UADSEOD,                                          X
               SYNAD=UADSERR
SYSUADSL EQU   *-SYSUADS
         SPACE 1
OPENMFL  OPEN  (,(UPDAT)),MF=L         UADS OPEN model
OPENMFLL EQU   *-OPENMFL
         SPACE 1
CLOSEMFL CLOSE (,),MF=L                UADS CLOSE model
CLOSMFLL EQU   *-CLOSEMFL
         SPACE 1
ENQMFL   ENQ   (,,,,),MF=L             UADS ENQ model
ENQMFLL  EQU   *-ENQMFL
         SPACE 1
DEQMFL   ENQ   (,,,),MF=L              UADS DEQ model
DEQMFLL  EQU   *-DEQMFL
         EJECT
         LTORG
         SPACE 2
         DS    0D
ENDCMD   EQU   *
         EJECT
***********************************************************************
* SYNTAX                                                              *
*                                                                     *
*              Commnad Syntax Definitions For IKJPARS                 *
*                                                                     *
* CSECT                                                               *
***********************************************************************
         SPACE 2
         PRINT NOGEN
SYNTAX   IKJPARM DSECT=PSWRDPDL
PSWRD#1  IKJIDENT 'YOUR CURRENT TSO PASSWORD',                         X
               MAXLNTH=8,                                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               PROMPT='YOUR CURRENT TSO PASSWORD',                     X
               HELP=('YOUR CURRENT TSO PASSWORD',                      X
               'THE PASSWORD THAT IS TO BE CHANGED')
PSWRD#2  IKJIDENT 'YOUR NEW TSO PASSWORD',                             X
               MAXLNTH=8,                                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               PROMPT='YOUR NEW TSO PASSWORD',                         X
               HELP=('YOUR NEW TSO PASSWORD')
UADSOPT  IKJKEYWD DEFAULT='&UADS'
         IKJNAME 'UADS'
         IKJNAME 'NOUADS'
         IKJENDP
         EJECT
***********************************************************************
* MESSAGES                                                            *
*                                                                     *
*              Commnad Message Definitions For IKJEFF02               *
*                                                                     *
* CSECT                                                               *
***********************************************************************
         SPACE 2
         PRINT NOGEN
MESSAGES CSECT
         SPACE 2
         IKJTSMSG ('PSWRD004E NOTIFY YOUR SYSTEM PROGRAMMER - IKJEFF19 X
               FAILED, RC=',),M004
         SPACE 1
         IKJTSMSG ('PSWRD005E PASSWORD COMMAND NOT ALLOWED FOR BACKGROUX
               ND TSO - TYPETSO=',),M005
         SPACE 1
         IKJTSMSG ('PSWRD006E NOTIFY YOUR SYSTEM PROGRAMMER - AUTHORIZAX
               TION FAILED, ENVRNSW=',),M006
         SPACE 1
         IKJTSMSG ('PSWRD007E NOTIFY YOUR SYSTEM PROGRAMMER - INVALID TX
               SB, ADR=',),M007
         SPACE 1
         IKJTSMSG ('PSWRD008I YOUR PASSWORD HAS BEEN CHANGED FOR THIS SX
               ESSION FROM ''',,''' TO ''',,''''),M008
         SPACE 1
         IKJTSMSG ('PSWRD009W ''',,''' IS NOT YOUR CURRENT PASSWORD - CX
               OMMAND TERMINATES'),M009
         SPACE 1
         IKJTSMSG ('PSWRD010I YOUR TSO LOGON PASSWORD CHANGED FROM ''',X
               ,''' TO ''',,''''),M010
         SPACE 1
         IKJTSMSG ('PSWRD011I NOTIFY YOUR SYSTEM PROGRAMMER - ',,' LOC,X
               K FAILED, RC=',),M011
         SPACE 1
         IKJTSMSG ('PSWRD012W ''',,''' NOT FOUND IN SYS1.UADS - PASSWORX
               D TERMINATES+'),F012
         IKJTSMSG ('PSWRD012W PREVIOUS USE OF ''NOUADS'' OPTION MAY HAVX
               E RESET YOUR PASSWORD'),M012,F012
         SPACE 1
         IKJTSMSG ('PSWRD013E NOTIFY YOUR SYSTEM PROGRAMMER - IKJEFF18 X
               FAILED, RC=',),M013
         SPACE 1
         IKJTSMSG ('PSWRD014E NOTIFY YOUR SYSTEM PROGRAMMER - OPEN FAILX
               ED FOR SYS1.UADS, DCBOFLGS=',),M014
         SPACE 1
         IKJTSMSG ('PSWRD015E NOTIFY YOUR SYSTEM PROGRAMMER - BLDL FAILX
               ED FOR SYS1.UADS, RC=',,' REASON=',),M015
         SPACE 1
         IKJTSMSG ('PSWRD016E NO SYS1.UADS ENTRIES FOR YOUR USER ID - IX
               MPOSSIBLE TO CHANGE YOUR PASSWORD'),M016
         SPACE 1
         IKJTSMSG ('PSWRD017W YOUR PASSWORD NOT CHANGED - COMMAND NEEDSX
                MORE STORAGE+'),F017
         IKJTSMSG ('PSWRD017W TRY LOGGING ON WITH A LARGER SIZE PARAMETX
               ER - GETMAIN FAILED, RC=',),M017,F017
         SPACE 1
         IKJTSMSG ('PSWRD018E NOTIFY YOUR SYSTEM PROGRAMMER - FIND FAILX
               ED FOR UADS, RC=',,' MEMBER=',),M018
         SPACE 1
         IKJTSMSG ('PSWRD019W ',,' HAS NO PASSWORDS DEFINED IN SYS1.UADX
               S - PASSWORD COMMAND TERMINATES'),M019
         SPACE 1
         IKJTSMSG ('PSWRD020W ''',,''' IS ALREADY DEFINED IN SYS1.UADS X
               FOR YOUR USER ID'),F020
         IKJTSMSG ('PSWRD020W ALL PASSWORDS IN SYS1.UADS MUST BE UNIQUEX
                FOR YOUR USER ID'),M020,F020
         SPACE 1
         IKJTSMSG ('PSWRD021E NOTIFY YOUR SYSTEM PROGRAMMER - COMMAND FX
               AILED TO RESET THE TSB'),M021
         SPACE 1
         IKJTSMSG ('PSWRD022E NOTIFY YOUR SYSTEM PROGRAMMER - EOD ENCOUX
               NTERED FOR SYS1.UADS, DCB=',,' DECB=',),M022
         SPACE 1
         IKJTSMSG ('PSWRD023E NOTIFY YOUR SYSTEM PROGRAMMER - ESTAE FAIX
               LED, RC=',),M023
         SPACE 1
         IKJTSMSG ('PSWRD025E NOTIFY YOUR SYSTEM PROGRAMMER - ENQ OF SYX
               SIKJUA OPENUADS FAILED, RC=',),M025
         SPACE 1
         IKJTSMSG ('PSWRD026E NOTIFY YOUR SYSTEM PROGRAMMER - DEQ OF SYX
               SIKJUA OPENUADS FAILED, RC=',),M026
         SPACE 1
         IKJTSMSG ('PSWRD027W YOUR PASSWORD NOT CHANGED - SOMEONE ELSE X
                IS USING SYS1.UADS, TRY LATER+'),F027
         IKJTSMSG ('PSWRD027W ONLY 1 USER MAY CHANGE HIS PASSWORD AT A X
               TIME, PLEASE TRY AGIAN'),M027,F027
         SPACE 1
         IKJTSMSG
         EJECT
         ENTRY MSG001E
         DS    0F
MSG001E  DC    AL2(L'TXT001E)
         DC    AL2(&MSGIDL)
TXT001E  DC    C'PSWRD001W TRY LOGGING ON WITH A LARGER SIZE PARAMETER X
               - GETMAIN FAILED'
         SPACE 1
         ENTRY MSG002E
         DS    0F
MSG002E  DC    AL2(L'TXT002E)
         DC    AL2(&MSGIDL)
TXT002E  DC    C'PSWRD002E NOTIFY YOUR SYSTEM PROGRAMMER - PUTLINE FAILX
               ED'
         SPACE 1
         ENTRY MSG003E
MSG003E  DC    F'1'
         DC    A(HDR003E)
         DS    0F
HDR003E  DC    AL2(L'TXT003E+4)
         DC    AL2(0)
TXT003E  DC    C'PSWRD003E NOTIFY YOUR SYSTEM PROGRAMMER - IKJEFF02 FAIX
               LED'
         EJECT
DSECTS   EQU   *
         PRINT GEN
         IKJCPPL
         EJECT
         IKJUPT
         EJECT
         IKJECT
         EJECT
         IKJPSCB
         EJECT
PPL      DSECT
STARTPPL EQU   *
         IKJPPL
ENDPPL   EQU   *
LENPPL   EQU   (ENDPPL-STARTPPL)
         EJECT
IOPL     DSECT
STRTIOPL EQU   *
         IKJIOPL
ENDIOPL  EQU   *
LENIOPL  EQU   (ENDIOPL-STRTIOPL)
         EJECT
         UADSMAP  DSPL,ALL
         EJECT
         IHAPSA
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         EJECT
         IKJTCB LIST=NO
         EJECT
         CVT   DSECT=YES,LIST=YES
         EJECT
         IHAASCB
         EJECT
         IEZJSCB
         EJECT
         IKJTSB LIST=YES
         EJECT
         IHASDWA
         EJECT
         DCBD  DSORG=(BS,PO),DEVD=(DA)
         EJECT
***********************************************************************
* BLDLLIST                                                            *
*                                                                     *
*                     BLDL List Mapping Definitions                   *
*                                                                     *
* DSECT                                                               *
***********************************************************************
         SPACE 2
BLDLLIST DSECT
         SPACE 1
BLDLENTY EQU   *              Start of a BLDL entry
BLDLNAME DS    CL8            Member name in PDS
BLDLTT   DS    XL2            Relative track number for member
BLDLR    DS    XL1            Relative block number for member
         ORG   BLDLTT
BLDLTTR  DS    XL3            Relative track and block for member
BLDLK    DS    XL1            Concatonation number
BLDLZ    DS    XL1            Source of directory entry
BLDLZPL  EQU   0                Member from private library
BLDLZLL  EQU   1                Member from link library
BLDLZSL  EQU   2                Member from job, step, or task lib
BLDLC    DS    XL1            User data field discriptor
BLDLCALS EQU   X'80'            Directory entry represents an alias
BLDLCMBR EQU   X'00'            Directory entry represents a member
BLDLUSRD DS    XL62           User data field
         ORG   BLDLUSRD
BLDLUTT1 DS    XL4            User TTRN field no. 1
BLDLUTT2 DS    XL4            User TTRN field no. 2
BLDLUTT3 DS    XL4            User TTRN field no. 3
         EJECT
***********************************************************************
* VARIABLES                                                           *
*                                                                     *
*                     Variables Used By The Command                   *
*                                                                     *
* DATA AREA                                                           *
***********************************************************************
         SPACE 2
         PRINT NOGEN
PVTAREA  DSECT
         SPACE 3
PVTSTART EQU   *
         DS    0D
         SPACE 2
         DS    0F
LVLSTART EQU   *                     Level return save areas
LEVEL1   DS    F                       Command's return save areas
LEVEL2   DS    F
LEVEL3   DS    F
LEVEL4   DS    F
LEVEL5   DS    F
GFLVL    DS    F                       IKJEFF19's return save area
MTLVL    DS    F                       IKJEFF02's return save area
PTLNLVL  DS    F                       PUTLINE's return save area
TPUTLVL  DS    F                       TPUT's return save area
GLCLLVL  DS    F                       Get LOCAL lock return save area
GCMSLVL  DS    F                       Get CMS lock return save area
FLKLVL   DS    F                       Free locks return save area
DRFLVL   DS    F                       IKJEFF18's return save area
LVLEND   EQU   *
LENLVL   EQU   LVLEND-LVLSTART
         SPACE 1
SAVEAREA DS    18F                   Command's save area
         SPACE 1
ESTAESAV DS    18F                   ESTAE exit's save area
         SPACE 1
         DS    0F
RCSTART  EQU   *                     Return codes
PSWRDRC  DS    F                       Command's return code
GMSP2RC  DS    F                       GETMAIN SP=2 return code
PARSRC   DS    F                       IKJPARS's return code
GFRC     DS    F                       IKJEFF19's return code
PTLNRC   DS    F                       PUTLINE's return code
MTRC     DS    F                       IKJEFF02's return code
TPUTRC   DS    F                       TPUT's return code
LCLLKRC  DS    F                       SETLOCK TYPE=LOCAL return code
CMSLKRC  DS    F                       SETLOCK TYPE=CMS return code
S99DDNRC DS    F                       DDNAME allocation return code
S99DSNRC DS    F                       DSNAME allocation return code
DRFRC    DS    F                       IKJEFF18's return code
BLDLRC   DS    F                       BLDL return code
BLDLRESC DS    F                       BLDL reason code
GMSP3RC  DS    F                       GETMAIN SP=3 return code
FINDRC   DS    F                       FIND return code
ESTAERC  DS    F                       ESTAE return code
ENQRC    DS    F                       ENQ return code
DEQRC    DS    F                       DEQ return code
RCEND    EQU   *
LENRC    EQU   RCEND-RCSTART
         SPACE 1
         DS    0D
TYPETSO  DS    CL8                   Type of TSO user is running
         SPACE 1
USERIDL  DS    H                     Length of user ID
USERID   DS    CL8                   User ID
         SPACE 1
         DS    0F
CPPLPTR  DS    A                     Address of CPPL
TSBPTR   DS    A                     Address of TSB
         SPACE 1
         DS    0F
PVTPPL   DS    XL(LENPPL)            Parse Parameter List
CPECB    DS    F                     Command Parse's ECB
PARSEANS DS    F                     Hold the address of the PDL
         SPACE 1
ENVRNSW1 DS    XL1                   Command's Enviornment Switches
ENVRNSW2 DS    XL1
ENVRNSW3 DS    XL1
         SPACE 1
         DS    0D
OLDPSWRD DS    CL8                   Old password
         DS    0D
NEWPSWRD DS    CL8                   New password
         SPACE 1
         DS    0F
GFECB    DS    F                     IKJEFF19' optional PUTLINE ECB
GFPRMPTR DS    A                     Pointer to IKJEFF19 parameter list
         SPACE 1
         DS    0F
PVTIOPL  DS    XL(LENIOPL)           PUTLINE's IOPL
         SPACE 1
TIOECB   DS    F                     Terminal I/O EBC
         SPACE 1
MTECB    DS    F                     IKJEFF02' optional PUTLINE ECB
         SPACE 1
         DS    0F
PVTRBPTR DS    A                     Pointer to SVC99's request block
PVTS99RB DS    XL(S99RBEND-S99RB)    SVC99 Request block
         DS    0F
TUPLSTRT EQU   *                     Text unit pointer list
DDNTUP   DC    AL4(UADSDDN)            Pointer to DDNAME
RDDNTUP  DC    AL4(UADSRDDN)           Pointer to returned DDNAME
DSNTUP   DC    AL4(UADSDSN)            Pointer to DSNAME
DISPTUP  DC    AL4(UADSDISP)           Pointer to DISP=SHR
TUPLEND  EQU   *
LENTUPL  EQU   TUPLEND-TUPLSTRT
         SPACE 1
         DS    0H
PVTXTUNT EQU   *                     Text units passed to SVC99
UADSDDN  DC    AL2(DALDDNAM)           DDNAME
         DC    AL2(1)
         DC    AL2(L'DDNTEXT)
DDNTEXT  DC    C'SYSUADS'
         SPACE 1
         DS    0H
UADSRDDN DC    AL2(DALRTDDN)           Returned DDNAME
         DC    AL2(1)
RDDNTXTL DC    AL2(L'RDDNTEXT)
RDDNTEXT DC    CL8'        '
         SPACE 1
         DS    0H
UADSDSN  DC    AL2(DALDSNAM)           DSNAME
         DC    AL2(1)
         DC    AL2(L'DSNTEXT)
DSNTEXT  DC    C'SYSTJB.TEST.UADS'
*        DC    C'SYS1.UADS'
         SPACE 1
         DS    0H
UADSDISP DC    AL2(DALSTATS)           DISP=SHR
         DC    AL2(1)
         DC    AL2(L'DISPTEXT)
DISPTEXT DC    X'08'
         SPACE 2
         DS    0F
EFF02PTR DS    A                     Pointer to IKJEFF02 entry address
S99DFSW  DS    XL1                   IKJEFF18 switch field parameter
S99DFID  DS    XL1                   IKJEFF18 ID flag parameter
         SPACE 2
         DS    0H
PVTBLDL  EQU   *                     BLDL List
PVTENTNO DS    H                       Number of entries in BLDL list
PVTENTL  DS    H                       Length of an entry in BLDL list
PVTENTRY DS    &BLDLNE.CL&BLDLEL       BLDL entries
PVTBLDLE EQU   *
PVTBLDLL EQU   PVTBLDLE-PVTBLDL
         SPACE 1
MBRCOUNT DS    F                     Count of UADS members found
TREESIZE DS    F                     Size of the UADS tree area
TREEPTR  DS    A                     Pointer to UADS tree area
PSWRDADR DS    A                     Adr PW match in UADS tree area
WRITMBRN DS    F                     Member number to be writen back
WRITMBRA DS    A                     Adr in tree area to be writen back
WRITBLDL DS    A                     Adr in BLDL list for write member
         SPACE 2
         DS    0D
DDNAME   DS    CL8                   DDNAME used to open UADS
         SPACE 1
MSG024E  DC    F'1'                  SYNAD PUTLINE Message
ADR024E  DC    A(HDR024E)
         DS    0F
HDR024E  DC    AL2(L'TXT024E+4)
         DC    AL2(0)
TXT024E  DC    CL88'PSWRD024E ... SYNAD message ...'
         SPACE 1
UADSDCB  DS    0F                    Define DCB area
         DS    XL(SYSUADSL)
         SPACE 1
PVTOPEN  DS    0F                    Define OPEN area
         DS    XL(OPENMFLL)
         SPACE 1
PVTCLOSE DS    0F                    Define CLOSE area
         DS    XL(CLOSMFLL)
         SPACE 1
PVTENQ   DS    0F                    Define ENQ area
         DS    XL(ENQMFLL)
         SPACE 1
PVTDEQ   DS    0F                    Define DEQ area
         DS    XL(DEQMFLL)
         SPACE 2
STAXLIST STAX  MF=L                  Define STAX area
         SPACE 1
ESTAELST ESTAE ENVEXIT,MF=L          Define ESTAE area
         SPACE 1
READLIST READ  UADSDECB,SF,UADSDCB,UADSHDR,MF=L  Define READ area
         SPACE 1
PTPB     PUTLINE MF=L                PUTLINE's PTPB
         EJECT
         PRINT GEN
         IKJEFFGF GFDSECT=NO         IKJEFF19 (GNRFAIL) parameter list
         EJECT
         IKJEFFMT MTDSECT=NO,        IKJEFF02 parameter list           X
               MTNINST=2
         EJECT
         IKJEFFDF DFDSECT=NO         IKJEFF18 (DAIRFAIL) parameter list
         SPACE 3
         DS    0D
PVTEND   EQU   *
         EJECT
***********************************************************************
* PROLOG                                                              *
*                                                                     *
*                   Environment ESTAE Exit Prolog                     *
*                                                                     *
* CSECT                                                               *
***********************************************************************
         SPACE 2
         PRINT GEN
ENVEXIT  CSECT
         SPACE 1
         PRINT GEN
         SPACE 1
         ENTRY ENVESTAE
         SPACE 1
         DC    CL8'ENVEXIT ',CL2' ' Program name
         DC    CL8'&LEVEL',CL2' '   Program level
         SPACE 1
         DC    C'&SYSTIME',CL2' '   Time of assembly
         DC    C'&SYSDATE',C' '     Date of assembly
         SPACE 1
         DC    A(ENVEXIT)           Beginning address of exit
         DC    A(ENVESTAE)          Entry address of exit
         DC    A(ENDENVEX-1)        Ending address of exit
         DC    A(ENDENVEX-ENVEXIT)  Exit length
         EJECT
***********************************************************************
* ENVESTAE                                                            *
*                                                                     *
*                 Environment ESTAE Exit Routine                      *
*                                                                     *
* ASYNCHRONOUS EXIT                                                   *
***********************************************************************
         SPACE 2
         PRINT NOGEN
         DS    0H
ENVESTAE EQU   *
         SPACE 1
         LR    EXITBASE,R15            Addressability to Exit
         USING ENVESTAE,EXITBASE
         SPACE 1
         IF (C,R0,EQ,=F'12')           IF SDWA not provided
            LR    PVTBASE,R2              Addressability to pvt area
            LA    R13,ESTAESAV            Point to private area save
            ELSE                          ELSE
            LR    SDWABASE,R1             Addressability to SDWA
            USING SDWA,SDWABASE
            L     PVTBASE,SDWAPARM        Addressability to pvt area
            ENDIF                         ENDIF
         STM   R14,R2,0(R13)           Save ESTAE registers
         SPACE 1
         APFAUTH OFF                   Turn off authoriy        **APF**
         SPACE 1
         IF (TM,ENVRNSW1,STAXSET,O)    IF STAX Exit Set
            LA    R2,STAXLIST             Point to list form of STAX
            STAX  DEFER=NO,MF=(E,(2))     Allow terminal attentions
            ENDIF                         ENDIF
         SPACE 1
         LM    R14,R2,0(R13)           Restore ESTAE registers
         SR    R15,R15                 Continue with ABEND
         BR    R14                     Return
         SPACE 2
         DROP  SDWABASE
         EJECT
***********************************************************************
* CONSTANTS                                                           *
*                                                                     *
*                  Read Only Constants For ENVEXIT                    *
*                                                                     *
* DATA AREA                                                           *
***********************************************************************
         SPACE 2
         PRINT GEN
         LTORG
         SPACE 2
         DS    0D
ENDENVEX EQU   *
         SPACE 2
         DROP  EXITBASE
         EJECT
***********************************************************************
* PROLOG                                                              *
*                                                                     *
*                          JSCB ESTAE Exit Prolog                     *
*                                                                     *
* CSECT                                                               *
***********************************************************************
         SPACE 2
         PRINT GEN
JSCBEXIT CSECT
         SPACE 1
         PRINT GEN
         SPACE 1
         ENTRY JSBESTAE
         SPACE 1
         DC    CL8'JSCBEXIT',CL2' ' Program name
         DC    CL8'&LEVEL',CL2' '   Program level
         SPACE 1
         DC    C'&SYSTIME',CL2' '   Time of assembly
         DC    C'&SYSDATE',C' '     Date of assembly
         SPACE 1
         DC    A(JSCBEXIT)          Beginning address of exit
         DC    A(JSBESTAE)          Entry address of exit
         DC    A(ENDJSBEX-1)        Ending address of exit
         DC    A(ENDJSBEX-JSCBEXIT) Exit length
         EJECT
***********************************************************************
* JSBESTAE                                                            *
*                                                                     *
*                        JSCB ESTAE Exit Routine                      *
*                                                                     *
* ASYNCHRONOUS EXIT                                                   *
***********************************************************************
         SPACE 2
         PRINT NOGEN
         DS    0H
JSBESTAE EQU   *
         SPACE 1
         LR    EXITBASE,R15            Addressiability to ESTAE exit
         USING JSBESTAE,EXITBASE
         SPACE 1
         IF (C,R0,EQ,=F'12')           IF SDWA not provided
            LR    PVTBASE,R2              Addressability to pvt area
            LA    R13,ESTAESAV            Point to private area save
            ELSE                          ELSE
            LR    SDWABASE,R1             Addressability to SDWA
            USING SDWA,SDWABASE
            L     PVTBASE,SDWAPARM        Addressability to pvt area
            ENDIF                         ENDIF
         STM   R14,R2,0(R13)           Save ESTAE registers
         SPACE 1
         USING PSA,PSABASE             Addressability to PSA
         L     TCBBASE,PSATNEW         Addressability to TCB
         USING TCB,TCBBASE
         L     JSCBBASE,TCBJSCB        Addressability to JSCB
         USING IEZJSCB,JSCBBASE
         SPACE 1
         NI    JSCBSWT1,X'FF'-JSCBPASS Reset JSCBPASS to off
         SPACE 1
         LM    R14,R2,0(R13)           Restore ESTAE registers
         SR    R15,R15                 Indicate continue with ABEND
         BR    R14                     Return
         SPACE 2
         DROP  SDWABASE
         DROP  PSABASE
         DROP  TCBBASE
         DROP  JSCBBASE
         EJECT
***********************************************************************
* CONSTANTS                                                           *
*                                                                     *
*                  Read Only Constants For ENVEXIT                    *
*                                                                     *
* DATA AREA                                                           *
***********************************************************************
         SPACE 2
         PRINT GEN
         LTORG
         SPACE 2
         DS    0D
ENDJSBEX EQU   *
         SPACE 2
         DROP  EXITBASE
         SPACE 3
         END
