         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  DOCUMENTATION '
***********************************************************************
*                                                                     *
*                 EXTENDED  ACTIVE  DISPLAY  MODULE                   *
*                                                                     *
*                           DOCUMENTATION                             *
*                                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS SUBSYSTEM FUNCTION PRODUCE'S TWO LINES OF JOB AND STEP STATUS  *
* INFORMATION.                                                        *
*                                                                     *
*   THE FIRST LINE ADDRESSES THE JOB AND CONTAINS THE FOLLOWING -     *
*       JOB #, JOB NAME, TOTAL # OF STEP'S IN THE JOB, START TIME,    *
*       ELAPSED TIME, TIME LIMIT, TIME USED (CPU+SRB), TIME REMAIN-   *
*       ING, DISPATCHING PRIORITY, ASID #, INITIATOR # (JES2), CLASS  *
*                                                                     *
*   THE SECOND LINE ADDRESSES THE STEP AND CONTAINS THE FOLLOWING -   *
*       STEP NAME, STEP #, START TIME, ELAPSED TIME, TIME LIMIT,      *
*       TIME USED (CPU+SRB), AND TIME REMAINING.                      *
*                                                                     *
* THE CONTROL BLOCKS USED AND THE PATH TAKEN FOLLOWS -                *
*                                                                     *
*          CVT                     - OFFSET  16 FROM 0.               *
*           *                                                         *
*          ASVT                    - OFFSET 556 FROM CVT.             *
*           *                                                         *
*     **** ASCB ****               - OFFSET 524 FROM ASVT.            *
*     *     *      *                                                  *
*   CSCB   ASXB  OUCB              - OFFSET  56,108,144 FROM ASCB.    *
*           *                                                         *
*     **** TCB  ****               - OFFSET   8 FROM ASXB. (LAST)     *
*     *            *                                                  *
*    TCT    **** JSCB ****         - OFFSET 164,180 FROM TCB.         *
*           *            *                                            *
*         SSIB     **** JCT ****   - OFFSET 316,260 FROM JSCB.        *
*           *      *   (O/S)   *                                      *
*           *     ACT         JMR  - OFFSET  56,45 FROM JCT.          *
*           *                                                         *
*          SJB                     - OFFSET  32 FROM SSIB.            *
*           *                                                         *
*          JCT (JES)               - OFFSET  96 FROM SJB.             *
*                                                                     *
*                                                                     *
* NOTES:                                                              *
*  AXC   THE CROSS MEMORY MOVE (SVC 248) WAS USED IN ORDER TO GAIN    *
*        ACCESS TO THE NEEDED CONTROL BLOCKS - FROM THE ASXB ON DOWN. *
*                                                                     *
*        USED THE LAST TCB FROM THE ASXB BECAUSE IT IS THE CURRENT.   *
*                                                                     *
*        CHAINED THRU THE CSCB'S UNTILL CORRECT ON FOUND.             *
*                                                                     *
***********************************************************************
         PRINT NOGEN
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  DSECT''S '
***********************************************************************
*                                                                     *
*                       O / S    -   C V T                            *
*                                                                     *
***********************************************************************
         SPACE 2
         CVT   DSECT=YES,LIST=YES
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   A S V T                          *
*                                                                     *
***********************************************************************
         SPACE 2
         IHAASVT
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   A S C B                          *
*                                                                     *
***********************************************************************
         SPACE 2
         IHAASCB
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   C S C B                          *
*                                                                     *
***********************************************************************
         SPACE 2
CSCB     DSECT
         IEECHAIN
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   A S X B                          *
*                                                                     *
***********************************************************************
         SPACE 2
         IHAASXB
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   T C B                            *
*                                                                     *
***********************************************************************
         SPACE 2
         IKJTCB LIST=YES
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   J S C B                          *
*                                                                     *
***********************************************************************
         SPACE 2
         IEZJSCB
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   J C T                            *
*                                                                     *
***********************************************************************
         SPACE 2
OSJCT    DSECT
JCTFIL1  DS    CL4
JCTADR   DS    CL4
JCTFIL2  DS    CL4
JCTIDNT  DS    CL4
         IEFAJCTB
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   J M R                            *
*                                                                     *
***********************************************************************
         SPACE 2
         IEFJMR
         EJECT
***********************************************************************
*                                                                     *
*                       O / S    -   S S I B                          *
*                                                                     *
***********************************************************************
         SPACE 2
         IEFJSSIB
         EJECT
***********************************************************************
*                                                                     *
*                       J E S    -   S J B                            *
*                                                                     *
***********************************************************************
         SPACE 2
SJB      DSECT
SJBSTRT  DS    0H
SJBJCT   EQU   SJBSTRT+96,4
SJBPATID EQU   SJBSTRT+188,2
         EJECT
***********************************************************************
*                                                                     *
*                       J E S   -   J C T                             *
*                                                                     *
***********************************************************************
         SPACE 2
JCT      DSECT
JCTSTRT  DS    0H
JCTETIME EQU   JCTSTRT+208,4
         EJECT
***********************************************************************
*                                                                     *
*                       O / S   -   A C T                             *
*                                                                     *
***********************************************************************
         SPACE 2
ACT      DSECT
ACTHDR   DS    0CL16
ACTFIL1  DS    CL4
ACTADR   DS    CL4
ACTFIL2  DS    CL4
ACTIDD   DS    CL4
AACTDKAD DS    CL3
AACTID   DS    CL1
AACTNEXT DS    CL4
AACTPRGN DS    CL20
AACTIME  DS    CL3
AACTJFLD DS    1C
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  INITIALIZATION '
***********************************************************************
*                                                                     *
*                   I N I T I A L I Z A T I O N                       *
*                                                                     *
***********************************************************************
         SPACE 2
*                                                                     *
*              ESTABLISH  BASE                                        *
*                                                                     *
IEESB04D CSECT
         LR    R12,R15             LOAD BASE
         USING IEESB04D,R12        ISSUE USING
         LR    R13,R1              LOAD ADDRESS
         USING XSA,R13             ISSUE USING
         XC    WA(255),WA          CLEAR STORAGE
         ST    R14,RETADDR         SAVE RETURN ADDRESS
*                                                                     *
*              ISSUE  STAE                                            *
*                                                                     *
         STAE  STAEXIT,CT
*                                                                     *
*              PROCESS  PARAMETERS IF ANY                             *
*                                                                     *
         L     R3,XAL              LOAD PARAMETER ADDRESS
         LA    R3,0(0,R3)          PURIFY
         LTR   R3,R3               ANY PARAMETERS ?
         BNZ   CHKPARAM            YES - CHECK WHAT TYPE
         OI    TYPE,ALL            NO  - SET DISPLAY FOR ALL
         B     DSPHDR              GO DISPLAY HEADING
*
CHKPARAM EQU   *
         CLC   0(2,R3),JOBONLY     JOB LINE ONLY ?
         BNE   CHKNAME             NO  - CONTINUE CHECK
         OI    TYPE,JOBSONLY+ALL   YES - SET JOB LINE ONLY SWITCH
         B     MOVEID              GO MOVE IN JOB LINE IDENTIFIER
*
CHKNAME  EQU   *
         TM    0(R3),NUMERIC       IS FIRST CHARACTER NUMERIC ?
         BO    BYNBR               YES - GO SET SEARCH BY JES2 #
         OI    TYPE,NAME           NO  - SET SEARCH BY JOB NAME
         B     MOVEID              GO MOVE IN SEARCH ARGUEMENT
*
BYNBR    EQU   *
         OI    TYPE,NBR            SET SEARCH BY JES2 JOB #
*
MOVEID   EQU   *
         LA    R4,ID               LOAD ARGUEMENT ADDRESS
         LA    R6,9                SET MAXIMUM LENGTH + 1
         MVC   ID,BLKS             CLEAR ARGUEMENT SAVE AREA
*
CHKNEXT  EQU   *
         CLI   0(R3),BLK           END OF PARAMETER ?
         BE    DSPHDR              YES - GO WRITE HEADER
         MVC   0(1,R4),0(R3)       NO  - MOVE CHARACTER TO ARGUEMENT
         LA    R3,1(R3)            INCREMENT TO NEXT PARAMETER POS.
         LA    R4,1(R4)            INCREMENT TO NEXT ARGUEMENT POS.
         BCT   R6,CHKNEXT          MAX REACHED ?
*                                                                     *
*              WRITE  HEADING                                         *
*                                                                     *
DSPHDR   EQU   *
         MVC   JOBMSG(TRLR-HDR1),HDR1 MOVE HEADING TO CONSOLE AREA
         MVC   JOBMSG+10(8),ID     MOVE PARAMETER TO CONSOLE AREA
         SR    R0,R0               CLEAR REG 0 FOR 'MLWTO'
         IC    R0,XAU              INSERT CONSOLE I.D.
         LA    R1,JOBMSG           LOAD HEADER ADDRESS
         BAL   R11,WTO1            GO WRITE HEADING
         SLDL  R0,40               SHIFT 'MLWTO' ID TO HI-ORDER REG 0
         IC    R0,XAU              INSERT CONSOLE I.D.
         ST    R0,YYAU             SAVE 'MLWTO' IDENTIFER
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  MAINLINE '
***********************************************************************
*                                                                     *
*                        M A I N L I N E                              *
*                                                                     *
***********************************************************************
         SPACE  2
*                                                                     *
*              GET  ASCB & CSCB                                       *
*                                                                     *
         L     R2,CVTADDR          LOAD CVT POINTER
         USING CVT,R2              'CVT' BASE
         L     R2,CVTASVT          LOAD ASVT ADDRESS
         USING ASVT,R2             'ASVT' BASE
*
CHKASCB  EQU   *
         CLC   ASVTENTY+1(3),ZERO  ASVT ENTERY ZERO ?
         BE    CHKTYPE             YES - END REACHED, GO CHECK STATUS
         ICM   R3,15,ASVTENTY      ASCB ACTIVE ?
         LA    R2,4(R2)                  INCREMENT TO NEXT ASCB
         BM    CHKASCB             NO  - GO CHECK NEXT ASCB
*                                                                     *
*              FOUND  ACTIVE  ASCB  -  PROCESS  INFORMATION           *
*                                                                     *
         USING ASCB,R3             'ASCB' BASE
         NI    TYPE,OFF            TURN OFF THE MASTER/JES2 SWITCH
         MVI   JOBMSG,BLK          ***************** CLEAR WTO
         MVC   JOBMSG+1(L'JOBMSG-1+L'STPMSG),JOBMSG  MESSAGE AREA'S ***
         MVC   JOBLIST,HDR         MOVE IN JOB WTO HEADER
         MVC   JOBTRLR,TRLR        MOVE IN 'MLWTO' TRAILER
         MVC   STPLIST,HDR         MOVE IN STEP WTO HEADER
         MVC   STPTRLR,TRLR        MOVE IN 'MLWTO' TRAILER
         SR    R11,R11             CLEAR WORK REG.
         IC    R11,ASCBDP          INSERT DISPATCHING PRIORITY
         CVD   R11,DBL             CONVERT TO DECIMAL
         UNPK  DPRTY,DBL+6(2)      UNPACK THE DISPATCHING PRIORITY
         OI    DPRTY+2,NUMERIC     SIGN IT
         UNPK  DBL(5),ASCBASID(3)  MOVE ASID #
         NC    DBL(4),SIGN         SIGN ASID #
         TR    DBL(4),TBL          TRANSLATE ASID #
         MVC   ASID,DBL+2          MOVE IN ASID #
         LM    R10,R11,ASCBEJST    LOAD STEP 'CPU' TIME
         SRDL  R10,12              SHIFT OUT LOW ORDER BIT'S
         D     R10,N10000          DIVIDE STEP 'CPU' TIME BY 10,000
         ST    R11,SAVSCPU         SAVE STEP 'CPU' TIME IN HUNDRETH'S
         LM    R10,R11,ASCBSRBT    LOAD STEP 'SRB' TIME
         SRDL  R10,12              SHIFT OUT LOW ORDER BIT'S
         D     R10,N10000          DIVIDE STEP 'SRB' TIME BY 10,000
         ST    R11,SAVSSRB         SAVE STEP 'SRB' TIME IN HUNDRETH'S
         CLC   ASID,TBL            IS THIS THE MASTER SCHEDULER ASID ?
         BNE   CONTIN              NO  - CONTINUE
         OI    TYPE,MSTRJES        SET GOT MASTER SWITCH
         MVC   JOBNAME,MASTER      MOVE IN MASTER SCHEDULER CONSTANT
         MVC   STEPNAME,BLKS            AND CLEAR OUT STEP NAME
         B     CONTIN1             SKIP CSCB PROCESSING
*                                                                     *
*              FIND  ACTIVE  CSCB                                     *
*                                                                     *
CONTIN   EQU   *
         L     R4,ASCBCSCB         LOAD CSCB CHAIN ADDRESS
         LA    R4,0(0,R4)          PURIFY HI-ORDER
         USING CSCB,R4             'CSCB' BASE
*
CHKCSCB  EQU   *
         LTR   R4,R4               END OF CSCB'S ?
         BZ    CHKASCB             YES - GO CHECK NEXT ASCB
         CLI   CHTRKID,TSO         TSO USER ?
         BE    NXTCSCB             YES - FOLLOW CHAIN
         CLI   CHTRKID,INIT        INITIATOR ?
         BE    NXTCSCB             YES - FOLLOW CHAIN
         CLC   ASCBASID,CHASID     CORRECT CSCB ?
         BE    FNDCSCB             YES - GO CHECK TYPE OF DISPLAY
*
NXTCSCB  EQU   *
         L     R5,CHPTR            LOAD NEXT CSCB ADDRESS
         LA    R5,0(0,R5)          PURIFY HI-ORDER
         CR    R4,R5               SAME CSCB ?
         LR    R4,R5                    LOAD CSCB ADDRESS
         BE    CHKASCB             YES - GO CHECK NEXT ASCB
         B     CHKCSCB             N0  - CHECK NEXT CSCB
*                                                                     *
*              FOUND  ACTIVE  CSCB                                    *
*                                                                     *
FNDCSCB  EQU   *
         MVC   JOBNAME,CSCBJOB     MOVE IN JOB NAME
         MVC   STEPNAME,CSCBSTEP   MOVE IN STEP NAME
         CLC   JOBNAME,ROSWTR      IS THIS ROSWTR ?
         BE    TURNON              YES - GO SET SWITCH
         CLC   JOBNAME,JES         IS THIS JES2 ?
         BNE   CONTIN1             NO  - CONTINUE
*
TURNON   EQU   *
         OI    TYPE,MSTRJES        SET GOT JES2 SWITCH
*
CONTIN1  EQU   *
         TM    TYPE,NAME           DISPLAY BY JOB NAME ?
         BZ    CONTIN2             NO  - CONTINUE
         CLC   ID,JOBNAME          CORRECT JOB ?
         BNE   CHKASCB             NO  - CHECK NEXT ASCB
         OI    TYPE,FNDNAME        YES - SET 'FND-BY-NAME' SWITCH
*
CONTIN2  EQU   *
*                                                                     *
*              ISSUE SYSEVENT BRINGIN IN CASE JOB IS SWAPPED OUT      *
*                                                                     *
         LH    R11,ASCBASID        LOAD 'FROM' ASID #
         LR    R1,R11              SAVE ASID
         SYSEVENT BRINGIN,ASID=(R1)  SWAP'M IN
*                                                                     *
*              GET  ASXB/TCB/JSCB  (XMM)                              *
*                                                                     *
         SLL   R11,HALF            SHIFT 'FROM' ASID # TO HIGH ORDER
         ST    R11,WAASID          MOVE 'FROM' ASID TO 'XMM' PARA. AREA
         LA    R11,WACB            LOAD 'TO' ADDRESS
         ST    R11,WATO            MOVE 'TO' ADDRESS TO 'XMM' PARA AREA
         MVC   WASIZE,CBSIZE       MOVE MAX. LENGTH TO 'XMM' PARA. AREA
         MVC   WAFROM,ASCBASXB     MOVE THE 'ASXB' ADDRESS
         LA    R4,WACB             LOAD CONTROL BLOCK ADDRESS
         BAL   R11,XMM             GO GET THE 'ASXB'
         B     CBERR               GO TO CONTROL BLOCK ERR ROUTINE
         USING ASXB,R4             'ASXB' BASE
         MVC   WAFROM,ASXBLTCB     MOVE THE 'TCB' ADDRESS  (LAST)
         BAL   R11,XMM             GO GET THE (LAST) 'TCB'
         B     CBERR               GO TO CONTROL BLOCK ERR ROUTINE
         USING TCB,R4              'TCB' BASE
         MVC   WAFROM,TCBJSCB      MOVE THE 'JSCB' ADDRESS
         BAL   R11,XMM             GO GET THE 'JSCB'
         B     CBERR               GO TO CONTROL BLOCK ERR ROUTINE
*                                                                     *
*              FOUND  JSCB  -  MOVE STEP # & 'SSIB' ADDRESS           *
*                                                                     *
         USING IEZJSCB,R4          'JSCB' BASE
         SR    R11,R11             CLEAR REG.
         IC    R11,JSCBSTEP        INSERT CURRENT STEP #
         CVD   R11,DBL             CONVERT IT
         UNPK  STEP#,DBL+6(2)      UNPACK THE STEP #
         OI    STEP#+1,NUMERIC     SIGN IT
         MVC   WAFROM,JSCBSSIB     MOVE THE 'SSIB' ADDRESS TO PARA AREA
         L     R10,JSCBJCT         SAVE THE O/S 'JCT' ADDRESS
         TM    TYPE,MSTRJES        THIS THE MSTR OR JES2 SUBSYSTEM ?
         SR    R6,R6               ZERO REG 6 FOR MSTR OR JES2
         BO    CONTIN4             YES - SKIP THE JES2 CONTROL BLOCKS
*                                                                     *
*              GET  SSIB  (XMM)                                       *
*                                                                     *
         BAL   R11,XMM             GO GET THE 'SSIB'
         B     SSIBERR             GO TO 'SSIB' ERROR ROUTINE
         USING SSIB,R4             'SSIB' BASE
         TM    TYPE,NBR            DISPLAY BY JOB NUMBER ?
         BZ    CONTIN3             NO  - CONTINUE
         SR    R7,R7               YES - SET UP FOR COMPARE
         LA    R8,4                LOAD MAX. LENGTH
         LA    R9,SSIBJBID+7       LOAD ENDING ADDRESS
*
CHKNBR   EQU   *
         CLI   0(R9),BLK           BLANK POSITION ?
         BE    FNDBLK              YES - GO EXECUTE COMPARE
         BCTR  R9,0                DECREMENT TO NEXT POSITION
         LA    R7,1(R7)            INCREMENT LENGTH FOR EXECUTE
         BCT   R8,CHKNBR           GO CHECK NEXT POSITION
*
FNDBLK   EQU   *
         LA    R9,1(R9)            INCREMENT TO FIRST POSITION
         BCTR  R7,0                REDUCE LENGTH FOR EXECUTE
         EX    R7,CMPNBR           IS THIS THE CORRECT ONE
         BNE   CHKASCB             NO  - CHK NEXT ASCB
         OI    TYPE,FNDNBR         YES - SET 'FND-BY-JOB#' SWITCH
*                                                                     *
*              MOVE  JOB  #                                           *
*                                                                     *
*
CONTIN3  EQU   *
         MVC   JOBNBR,SSIBJBID+4   MOVE IN JES2 JOB #
         MVC   WAFROM,SSIBSUSE     MOVE 'SJB' ADDRESS TO XMM PARA. AREA
*                                                                     *
*              GET  JES2  SJB                                         *
*                                                                     *
         BAL   R11,XMM             GO GET THE 'SJB'
         B     SJBERR              GO TO 'SJB' ERROR ROUTINE
         USING SJB,R4              'SJB' BASE
         MVC   INITATOR,SJBPATID   MOVE IN THE JES2 INITIATOR ID
         MVC   WAFROM,SJBJCT       MOVE THE JES2 'JCT' ADDRESS
*                                                                     *
*              GET  JES2  JCT                                         *
*                                                                     *
         BAL   R11,XMM             GO GET THE JES2 'JCT'
         B     JJCTERR             GO TO JES2 'JCT' ERROR ROUTINE
         USING JCT,R4              'JCT' BASE
         L     R7,JCTETIME         LOAD JOB TIME LIMIT
         SR    R6,R6               CLEAR REG.
         M     R6,SEC              MULTIPLY JOB TIME LIMIT BY 100
         ST    R7,SAVJLIM          SAVE JOB TIME LIMIT
         LR    R6,R7               LOAD JOB TIME LIMIT FOR CONVERSION
         BAL   R11,XTIME           CONVERT JOB TIME LIMIT
         MVC   JOBLIMIT,WORK+1     MOVE IN JOB TIME LIMIT
*
CONTERR1 EQU   *
         ST    R10,WAFROM          MOVE O/S 'JCT' ADDR TO XMM PARA AREA
*                                                                     *
*              GET  O/S  JCT                                          *
*                                                                     *
         BAL   R11,XMM             GO GET THE O/S 'JCT'
         B     OJCTERR             GO TO 0/S 'JCT' ERROR ROUTINE
         USING OSJCT,R4            'JCT' BASE
         MVC   CLASS,JCTJCSMF      MOVE IN THE JOB CLASS
         LA    R8,TBL09            ADDRESS OF 0-9 TABLE
         TM    CLASS,N09           IS THIS 0-9 ?
         BO   TRANS                YES - GO TRANSLATE IT
         LA    R8,TBLSZ            ADDRESS OF S-Z TABLE
         TM    CLASS,NSZ           IS THIS S-Z ?
         BO    TRANS               YES - GO TRANSLATE IT
         LA    R8,TBLJR            ADDRESS OF J-R TABLE
         TM    CLASS,NJR           IS THIS J-R ?
         BO    TRANS               YES - GO TRANSLATE IT
         LA    R8,TBLAI            ADDRESS OF A-I TABLE
*
TRANS    EQU   *
         NI    CLASS,HIORDER       ZERO HI-ORDER BITS
         TR    CLASS,0(R8)         TRANSLATE IT
         SR    R8,R8               CLEAR REG.
         ICM   R8,7,JCTJMRSS       LOAD STEP START TIME
         LR    R6,R8               SAVE STEP START TIME
         BAL   R11,XSTRT           CONVERT STEP START TIME
         MVC   STPSTRT,WORK        MOVE IN STEP START TIME
         TIME  BIN,ERRET=TIMER     GET CURRENT TIME
         LR    R1,R0               SAVE CURRENT TIME
         LR    R6,R0               LOAD CURRENT TIME FOR SUBTRACTION
         CR    R6,R8               CURRENT TIME LESS THAN START TIME ?U
         BH    *+8                 NO - SKIP ADDING 2400 HOURS        U
         AL    R6,N2400            ADD 2400 HOURS                     U
         SLR   R6,R8               CURRENT TIME MINUS STEP START TIME
         BAL   R11,XSTRT           CONVERT STEP ELAPSED TIME
         MVC   STPELAP,WORK        MOVE IN STEP ELAPSED TIME
         ICM   R8,7,JCTJMRJT       LOAD JOB START TIME
         LR    R6,R8               SAVE JOB START TIME
         BAL   R11,XSTRT           CONVERT JOB START TIME
         MVC   JOBSTRT,WORK        MOVE IN JOB START TIME
         LR    R6,R1               LOAD CURRENT TIME
         CR    R6,R8               CURRENT TIME LESS THAN START TIME ?U
         BH    *+8                 NO - SKIP ADDING 2400 HOURS        U
         AL    R6,N2400            ADD 2400 HOURS                     U
         SLR   R6,R8               CURRENT TIME MINUS JOB START TIME
         BAL   R11,XSTRT           CONVERT JOB ELAPSED TIME
         MVC   JOBELAP,WORK        MOVE IN JOB ELAPSED TIME
         MVC   SAVJSRB,JCTSRBT     SAVE JOB 'SRB' TIME
         MVC   WAFROM+1(3),JCTACTAD MOVE 'ACT' ADDR TO XMM PARA. AREA
         ICM   R8,7,JCTJMR         SAVE 'JMR' ADDRESS
         SR    R6,R6               CLEAR REG.
*                                                                     *
*              GET  O/S  ACT                                          *
*                                                                     *
         BAL   R11,XMM             GO GET THE 'ACT'
         B     CONTIN4             ERROR - BYPASS 'ACT' PROCESSING
         USING ACT,R4              'ACT' BASE
         ICM   R6,7,AACTIME        LOAD JOB 'CPU' TIME
*
CONTIN4  EQU   *
         A     R6,SAVSCPU          ADD CURRENT STEP 'CPU' TIME
         LR    R9,R6               SAVE TOTAL JOB 'CPU' TIME
         A     R6,SAVJSRB          ADD JOB 'SRB' TIME
         A     R6,SAVSSRB          ADD STEP 'SRB' TIME
         BAL   R11,XTIME           CONVERT TOTAL JOB 'CPU+SRB' TIME
         MVC   JOBCPU,WORK+1       MOVE JOB 'CPU+SRB' TIME
         TM    TYPE,MSTRJES        THIS THE MSTR OR JES2 SUBSYSTEM ?
         BO    MSTRJES2            YES - GO FILL OUT REST OF LINE
         L     R6,SAVJLIM          LOAD JOB TIME LIMIT
         SLR   R6,R9               JOB TIME LIMIT MINUS JOB 'CPU+SRB'
         BAL   R11,XTIME           CONVERT JOB TIME REMAINING
         MVC   JOBREM,WORK+1       MOVE IN JOB TIME REMAINING
         L     R6,SAVSCPU          LOAD STEP 'CPU' TIME
         A     R6,SAVSSRB          ADD STEP 'SRB' TIME
         BAL   R11,XTIME           CONVERT STEP 'CPU+SRB' TIME
         MVC   STEPCPU,WORK+1      MOVE IN STEP 'CPU+SRB' TIME
         L     R7,ASCBJSTL         LOAD STEP TIME LIMIT
         SR    R6,R6               CLEAR REG.
         SLDL  R6,20               INSERT LOW ORDER ZERO'S
         D     R6,N10000           DIVIDE STEP TIME LIMIT BY 10,000
         LR    R9,R7               SAVE STEP TIME LIMIT
         LR    R6,R7               LOAD STEP TIME LIMIT FOR CONVERSION
         BAL   R11,XTIME           CONVERT STEP TIME LIMIT
         MVC   STPLIMIT,WORK+1     MOVE IN STEP TIME LIMIT
         S     R9,SAVSCPU          STEP TIME LIMIT MINUS STEP 'CPU'
         LR    R6,R9               LOAD STEP TIME REMAINING FOR CONVER.
         BAL   R11,XTIME           CONVERT STEP TIME REMAINING
         MVC   STEPREM,WORK+1      MOVE IN STEP TIME REMAINING
         ST    R8,WAFROM           MOVE 'JMR' ADDRESS TO XMM PARA. AREA
*                                                                     *
*              GET  O/S  JMR                                          *
*                                                                     *
         BAL   R11,XMM             GO GET THE 'JMR'
         B     JMRERR              GO TO 'JMR' ERROR ROUTINE
         USING JMR,R5              'JMR' BASE
         LA    R5,16(R4)           BUMP FOR 'JMR' HEADER
         SR    R6,R6               CLEAR REG.
         IC    R6,JMRSTEP          INSERT TOTAL # OF STEP'S
         CVD   R6,DBL              CONVERT TOTAL # OF STEP'S
         UNPK  JOBSTEP,DBL+6(2)    UNPACK TOTAL # OF STEP'S
         OI    JOBSTEP+1,NUMERIC   SIGN IT
*
CONTIN5  EQU   *
         LA    R1,JOBMSG           LOAD JOB MESSAGE ADDRESS
         BAL   R11,WTO             GO WRITE JOB LINE
*
         TM    TYPE,JOBSONLY       JOB LINE ONLY ?
         BO    TESTIT              YES - GO CHECK TYPE
*
         LA    R1,STPMSG           LOAD STEP MESSAGE ADDRESS
*
TSTYPE   EQU   *
         BAL   R11,WTO             GO WRITE STEP OR ERROR LINE
*
TESTIT   EQU   *
         TM    TYPE,ALL            WAS DISPLAY FOR ALL ?
         BO    CHKASCB             YES - GO DO NEXT ASCB
*
RET      EQU   *
         LA    R1,WTOEND           SIGNAL END OF MLWTO
         BAL   R11,WTO             GO END MLWTO
*                                                                     *
*              CLEAN  UP  PROCESSING                                  *
*                                                                     *
RETURN   EQU   *
         L     R5,RETADDR          LOAD RETURN ADDRESS
         L     R0,XCORE            LOAD STORAGE XCOREFOR FREEMAIN
         LR    R1,R13              LOAD STORAGE ADDRESS
         FREEMAIN R,LV=0,A=(1)     RETURN STORAGE
         SR    R15,R15             SET RETURN CODE
         LR    R14,R5              LOAD RETURN ADDRESS
         BR    R14                 '' BYE-BYE ''
*                                                                     *
*              MASTER  AND  JES2  DISPLAY  FILL  IN  ROUTINE          *
*                                                                     *
MSTRJES2 EQU   *
         MVC   JOBNBR,ASTR         MOVE '*' FOR JOB #
         MVC   JOBSTEP,ASTR        MOVE '*' FOR TOTAL # OF STEP'S
         MVC   JOBSTRT,ASTR        MOVE '*' FOR JOB START TIME
         MVC   JOBELAP,ASTR        MOVE '*' FOR JOB ELAPSED TIME
         MVC   JOBLIMIT,ASTR       MOVE '*' FOR JOB TIME LIMIT
         MVC   JOBREM,ASTR         MOVE '*' FOR JOB TIME REMAINING
         MVC   INITATOR,ASTR       MOVE '*' FOR INITIATOR
         MVC   CLASS,ASTR          MOVE '*' FOR JOB CLASS
         LA    R1,JOBMSG           LOAD JOB LINE MESSAGE ADDRESS
         BAL   R11,WTO             GO WRITE JOB LINE
         B     TESTIT              GO TTEST TYPE SETTING
*                                                                     *
*              END  OF  ASVT  CHK  TYPE  STATUS                       *
*                                                                     *
CHKTYPE  EQU   *
         TM    TYPE,ALL            WAS DISPLAY FOR ALL ?
         BO    RET                 YES - DO CLEAN UP
         TM    TYPE,FOUND          WAS THE JOB FOUND ?
         BM    RET                 YES - GO DO CLEAN UP
*                                                                     *
*              JOB  NOT  FOUND                                        *
*                                                                     *
         LA    R1,NOTFOUND         LOAD 'JOB-NOT-FOUND' MESSAGE
         BAL   R11,WTO             GO WRITE ERROR MESSAGE
         B     RETURN              GO DO CLEAN UP
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  EXECUTED INSTRUCTION'
***********************************************************************
*                                                                     *
*               E X E C U T E D   I N S T R U C T I O N S             *
*                                                                     *
***********************************************************************
         SPACE 2
CMPNBR   CLC   0(0,R9),ID     COMPARE FOR JES2 JOB #
*
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  CROSS MEMORY MOVE'
***********************************************************************
*                                                                     *
*              X M M   ( S V C   2 5 1 )   R O U T I N E              *
*                                                                     *
***********************************************************************
         SPACE 2
XMM      EQU   *
         CLC   WAFROM+1(3),ZERO    CONTROL BLOCK ADDRESS ZERO ?
         BER   R11                 YES - RETURN TO ERROR PROCESSING
*
SVC      EQU   *
         LA    R1,WAPARM           LOAD 'XMM' PARAMETER ADDRESS
         SVC   248                 ISSUE 'XMM' SVC         AXC
         LTR   R15,R15             CONTROL BLOCK FOUND ?
         BZ    4(R11)              YES - RETURN
         BR    R11                 NO  - RETURN TO ERROR PROCESSING
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  CONTROL BLOCK ERROR'
***********************************************************************
*                                                                     *
*        C O N T R O L   B L O C K   E R R O R   R O U T I N E S      *
*                                                                     *
***********************************************************************
         SPACE 2
CBERR    EQU   *
         MVC   JOBERR,CBERRMSG     MOVE CONTROL BLOCK ERROR MESSAGE
*
ERRET    EQU   *
         LA    R1,JOBMSG           LOAD JOB LINE ADDRESS
         B     TSTYPE              GO WRITE ERROR MESSAGE
*
SSIBERR  EQU   *
         MVC   JOBNBR,ASTR         MOVE '*' FOR JOB NUMBER
*
SJBERR   EQU   *
         MVC   INITATOR,ASTR       MOVE '*' FOR INITIATOR
*
JJCTERR  EQU   *
         MVC   JOBLIMIT,ASTR       MOVE '*' FOR JOB TIME LIMIT
         B     CONTERR1            CONTINUE PROCESSING
*
OJCTERR  EQU   *
         MVC   CLASS,ASTR          MOVE '*' FOR CLASS
         MVC   STPSTRT,ASTR        MOVE '*' FOR STEP START TIME
         MVC   STPELAP,ASTR        MOVE '*' FOR STEP ELAPSED TIME
         MVC   JOBSTRT,ASTR        MOVE '*' FOR JOB START TIME
         MVC   JOBELAP,ASTR        MOVE '*' FOR JOB ELAPSED TIME
         SR    R6,R6               CLEAR REG. 6 FOR COMPUTATIONS
         SR    R8,R8               FORCE 'JMR' C/B ERROR
         B     CONTIN4             CONTINUE PROCESSING
*
JMRERR   EQU   *
         MVC   JOBSTEP,TBL         MOVE ONE FOR TOTAL # OF STEPS
         B     CONTIN5             CONTINUE PROCESSING
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  STAE EXIT ROUTINE'
***********************************************************************
*                                                                     *
*                   S T A E   E X I T   R O U T I N E                 *
*                                                                     *
***********************************************************************
         SPACE 2
STAEXIT  EQU   *
         MVC   JOBERR,STAEMSG      MOVE STAE ERROR MESSAGE
         B     ERRET               GO WRITE ERROR MESSAGE
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY - TIME MACRO ERROR '
***********************************************************************
*                                                                     *
*           T I M E   M A C R O   E R R O R   R O U T I N E           *
*                                                                     *
***********************************************************************
         SPACE 2
TIMER    EQU   *
         MVC   JOBERR,TIMERMSG     MOVE IN TIME ERROR MESSAGE
         B     ERRET               GO WRITE ERROR MESSAGE
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  STRT TIME CONVERSION'
***********************************************************************
*                                                                     *
*       S T A R T   T I M E   C O N V E R S I O N   R O U T I N E     *
*                                                                     *
***********************************************************************
         SPACE 2
XSTRT    EQU   *
         SRDA  R6,32               SHIFT TIME TO REG. 7
         D     R6,HOURS            DIVIDE TO GET THE NUMBER OF HOUR'S
         CVD   R7,DBL              CONVERT HOUR'S
         UNPK  WORK(2),DBL+6(2)    MOVE HOUR'S TO WORK AREA
         OI    WORK+1,NUMERIC      SIGN HOUR'S
         MVI   WORK+2,PERIOD       INSERT PERIOD
         SRDA  R6,32               SHIFT TIME TO REG. 7
         D     R6,MIN              DIVIDE TO GET MINUTE'S
         CVD   R7,DBL              CONVERT MINUTE'S
         UNPK  WORK+3(2),DBL+6(2)  MOVE IN MINUTE'S
         OI    WORK+4,NUMERIC      SIGN MINUTE'S
         MVI   WORK+5,PERIOD       MOVE IN PERIOD
         SRDA  R6,32               SHIFT TIME TO REG. 7
         D     R6,SEC              DIVIDE TO GET SECOND'S
         CVD   R7,DBL              CONVERT SECOND'S
         UNPK  WORK+6(2),DBL+6(2)  MOVE IN SECOND'S
         OI    WORK+7,NUMERIC      SIGN SECOND'S
         BR    R11                 RETURN
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  TIME CONVERSION'
***********************************************************************
*                                                                     *
*              T I M E   C O N V E R S I O N   R O U T I N E          *
*                                                                     *
***********************************************************************
         SPACE 2
XTIME    EQU   *
         A     R6,N50              ROUND UP
         SRDA  R6,32               SHIFT TIME TO REG. 7
         D     R6,MIN              DIVIDE TO GET MINUTE'S & SECOND'S
         CVD   R7,DBL              CONVERT MINUTE'S
         UNPK  WORK+1(4),DBL+5(3)  MOVE MINUTE'S TO WORK AREA
         OI    WORK+4,NUMERIC      SIGN MINUTE'S
         SRDL  R6,32               SHIFT FOR DIVIDE
         D     R6,SEC              DIVIDE BY '100'
         CVD   R7,DBL              CONVERT SECOND'S
         UNPK  WORK+6(2),DBL+6(2)  MOVE IN SECOND'S
         OI    WORK+7,NUMERIC      SIGN SECOND'S
         MVI   WORK+5,PERIOD       MOVE IN PERIOD
         LA    R6,3                LOAD LIMIT
         LA    R7,WORK+1           LOAD BEGIN ADDRESS
*
XLP1     EQU   *
         CLI   0(R7),NUMERIC       LEADING ZERO ?
         BNER  R11                 NO  - GO INCREMENT TO NEXT POS.
         MVI   0(R7),BLK           YES - BLANK OUT
         LA    R7,1(R7)            INCREMENT TO NEXT POSITION
         BCT   R6,XLP1             GO CHECK NEXT POSITION
         BR    R11                 RETURN
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  WTO ROUTINE'
***********************************************************************
*                                                                     *
*                        W T O   R O U T I N E                        *
*                                                                     *
***********************************************************************
         SPACE 2
WTO      EQU   *
         L     R0,YYAU             INSERT 'MLWTO' IDENTIFIER
*
WTO1     EQU   *
         SVC   35                  ISSUE WTO
         BR    R11                 RETURN
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  EQUATES '
***********************************************************************
*                                                                     *
*                          E Q U A T E S                              *
*                                                                     *
***********************************************************************
         SPACE 2
TSO      EQU   1
INIT     EQU   3
AVAL     EQU   128
NBR      EQU   2
NAME     EQU   4
FNDNBR   EQU   8
FNDNAME  EQU   16
NUMERIC  EQU   240
BLK      EQU   64
CVTADDR  EQU   16
CSCBJOB  EQU   CHCLS
CSCBSTEP EQU   CHSTEP
HALF     EQU   16
PERIOD   EQU   75
ALL      EQU   1
FOUND    EQU   24
ERROR    EQU   32
MSTRJES  EQU   64
N09      EQU   240
NSZ      EQU   224
NJR      EQU   208
NAI      EQU   192
OFF      EQU   191
HIORDER  EQU   15
JOBSONLY EQU   128
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  REGISTERS '
***********************************************************************
*                                                                     *
*                        R E G I S T E R S                            *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0                   WORK
R1       EQU   1                   TIME SAVE AREA
R2       EQU   2                   XSA/CVT/ASVT
R3       EQU   3                   ASCB
R4       EQU   4                   WORK/ALL XMM CONTROL BLOCKS
R5       EQU   5                   N/U
R6       EQU   6                   WORK
R7       EQU   7                   WORK
R8       EQU   8                   WORK/(OS)JMR SAVE
R9       EQU   9                   WORK
R10      EQU   10                  WORK/(OS)JCT SAVE
R11      EQU   11                  BAL/WORK
R12      EQU   12                  PROGRAM BASE
R13      EQU   13                  WORK AREA BASE
R14      EQU   14                  RETURN ADDRESS
R15      EQU   15                  RETURN CODE
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  CONSTANTS'
***********************************************************************
*                                                                     *
*                       C O N S T A N T S                             *
*                                                                     *
***********************************************************************
         SPACE 2
ASTR     DC    C'********'
MASTER   DC    C'MASTER  '
JES      DC    C'JES2'
BLKS     DC    CL8' '
ROSWTR   DC    C'ROSWTR  '
CBSIZE   DC    A(L'WACB)
SIGN     DC    4X'0F'
TBL      DC    C'0123456789ABCDEF'
TBL09    DC    C'0123456789******'
TBLAI    DC    C'*ABCDEFGHI******'
TBLJR    DC    C'*JKLMNOPQR******'
TBLSZ    DC    C'**STUVWXYZ******'
N10000   DC    F'10000'
MIN      DC    F'6000'
N50      DC    F'50'
N60      DC    F'60'
HOURS    DC    F'360000'
SEC      DC    F'100'
HDR1     DC    X'00160140'
         DC    C'--  #B          --'
         DC    X'80000002'
         DC    X'004A4000'
         DC    C'JOB# JOB/STEP S#  STARTED  ELAPSED   LIMIT CPU+SRB  REX
               MAIN DPR ID IN C'
TRLR     DC    X'20000001'
HDR      DC    X'004A0140'
WTOEND   DC    X'0004014010000001'
CBERRMSG DC    C'C/B--ERR'
STAEMSG  DC    C'P/C--ERR'
TIMERMSG DC    C'TIME ERR'
NOTFOUND DC    X'00110140'
         DC    C'JOB NOT FOUND'
         DC    X'30000001'
JOBONLY  DC    C'J '
N2400    DC    A(24*60*60*100)                                        U
         TITLE 'LOC - EXTENDED ACTIVE DISPLAY  -  WRK AREA AND CTL BLK'
***********************************************************************
*                                                                     *
*     W O R K   A R E A   &   C O N T R O L   B L K   D S E C T       *
*                                                                     *
***********************************************************************
         SPACE 2
*                                                                     *
*              PARAMETER  PASS  AREA                                  *
*                                                                     *
XSA      DSECT
XAP      DS    F
XAD      DS    F
XAX      DS    D
XAE      DS    0C
XAR      DS    F                   POINTER TO PARAMETER LENGTH
XAN      DS    0C
XAL      DS    F                   SUB-PARAMETER ADDRESS
XAV      DS    D
XAS      DS    D
XAU      DS    C                   CONSOLE UCM ID
         DS    C
XAJ      DS    H
         DS    F
XEND     EQU   *
*
XCORE    DS    F
*
XSIZE    EQU   XEND-XAP
RETADDR  DS    F
*                                                                     *
*              WORK  AREA                                             *
*                                                                     *
WA       EQU   *
WASTRT   DS    0D
DBL      DS    D
ZERO     DS    F
YYAU     DS    F
ID       DS    CL8
*
TYPE     DS    C                   TYPE BREAKDOWN:
*                                      .... ...1 = DISPLAY ALL
*                                      .... ..1. = DISPLAY BY JOB #
*                                      .... .1.. = DISPLAY BY JOB NAME
*                                      .... 1 .. = FOUND BY JOB #
*                                      ...1 .... = FOUND BY JOB NAME
*                                      ..1. .... = ERROR DETECTED
*                                      .1.. .... = MASTER/JES2/ROSWTR
*                                      1... .... = JOB LINE ONLY
WORK     DS    D
SAVJLIM  DS    F
SAVSCPU  DS    F
SAVSSRB  DS    F
SAVJSRB  DS    F
*                                                                     *
*              JOB  DISPLAY  AREA                                     *
*                                                                     *
         DS    0F
JOBMSG   DS    0CL78
JOBLIST  DS    CL4
JOBNBR   DS    CL4
         DS    C
*
JOBERR   DS    0CL8
*
JOBNAME  DS    CL8
         DS    C
JOBSTEP  DS    CL2
         DS    C
JOBSTRT  DS    CL8
         DS    C
JOBELAP  DS    CL8
         DS    C
JOBLIMIT DS    CL7
         DS    C
JOBCPU   DS    CL7
         DS    C
JOBREM   DS    CL7
         DS    C
DPRTY    DS    CL3
         DS    C
ASID     DS    CL2
         DS    C
INITATOR DS    CL2
         DS    C
CLASS    DS    C
JOBTRLR  DS    CL4
*                                                                     *
*              STEP  DISPLAY  AREA                                    *
*                                                                     *
         DS    0F
STPMSG   DS    0CL78
STPLIST  DS    CL4
         DS    CL5
STEPNAME DS    CL8
         DS    C
STEP#    DS    CL2
         DS    C
STPSTRT  DS    CL8
         DS    C
STPELAP  DS    CL8
         DS    C
STPLIMIT DS    CL7
         DS    C
STEPCPU  DS    CL7
         DS    C
STEPREM  DS    CL7
STPFILLR DS    CL12
STPTRLR  DS    CL4
*                                                                     *
*              XMM  PARAMETER   AREA                                  *
*                                                                     *
WAPARM   DS    0F
WAASID   DS    F
WAFROM   DS    A
WATO     DS    A
WASIZE   DS    A
*                                                                     *
*              CONTROL  BLK  AREA                                     *
*                                                                     *
WACB     DS    CL380
*
WAEND    DS    0H
*
*
*
         END
