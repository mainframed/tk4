         TITLE '*** SVC 248 - CROSS/MEMORY DATA XFER SVC'  AXC
*
*  THIS SVC IS USED TO SCHEDULE AN SRB THAT WILL TRANSFER THE
*  REQUESTED DATA (FROM 1 TO 4K BYTES) FROM ONE ADDRESS SPACE
*  TO ANOTHER.
*
*  INPUT TO THIS SVC IS REGISTER 1 POINTING TO A PARAMETER
*  LIST. THE FORMAT OF THE LIST IS AS FOLLOWS:
*
*        +0 (2) FROM ASID         (0 IF CURRENT)
*        +2 (2) TO ASID           (0 IF CURRENT)
*        +4 (4) FROM ADDRESS
*        +8 (4) TO ADDRESS
*        +12(4) LENGTH (MUST BE 4K OR LESS)
*
*        ON FINISHING REGISTER 15 WILL CONTAIN:
*          0  GOOD COMPLETION
*          4  UNASSIGNED ASID PARAMETER PASSED BY USER
*        GREATER THAN 4 -- SRB FAILED EXECUTION.  COMPLETION CODE
*          IS IN REGISTER 15.  COMPLETION CODE OF X'0000FFFF'
*          INDICATES PROBLEM UNKNOWN.  (CHECK LOGREC.)
         EJECT
IGC00248 CSECT
         REGS
         LR    R9,R7   SAVE CURENT ASCB ADDRESS
         LR    R8,R14             SAVE RETURN ADDRESS
         LR    R10,R4    SAVE USER TCB ADDRESS
         USING IGC00248,R6        ESTABLISH BASE REG
         LH    R2,0(R1)           LOAD FROM ASID
         LH    R3,2(R1)           LOAD TO ASID
         L     R4,4(R1)           LOAD FROM ADDRESS
         L     R5,8(R1)           LOAD TO ADDRESS
         L     R7,12(R1)          LOAD LENGTH
         BAL   R12,CKPRMS         GO VALIDATE PARMS
         LTR   R15,R15            ARE PARMS VALID
         BNZ   INVPRM             NO, REJECT
*
*
*  MUST NOW AQUIRE MEMORY IN SQA TO :
*     1 -- MOVE DATA INTO
*     2 -- WORK AREA FOR THIS SVC
*     3 -- BUILD AN SRB
*     4 -- ROOM FOR AN ESTAE PARMETER LIST
*
         LA    R12,WASZ(R7)       LENGTH + SIZE OF WORK AREA
         LA    R12,SRBSIZE(R12)    ADD FOR SRB
         LA    R12,16(R12)         AND FOR ESTAE PARM LIST
         GETMAIN R,LV=(R12),SP=245
         LR    R11,R1             LOAD BUFFER ADDRESS
         USING WA,R11
         STM   R2,R5,WAPRMS       SAVE PARMS
         ST    R7,WASIZE          SAVE DATA LENGTH
*
*
*      ESTABLISH SRB/ESTAE ADDRESSABILITY
*
         LA    R10,WASZ(R7,R11)    POINT INTO GETMAIN'ED AREA
         USING SRBSECT,R10  SRB ADDRESSABILITY
*
         MVI   SRB,X'00'   INITIALIZE SRB TO ZERO'S
         MVC   SRB+1(SRBSIZE-1),SRB
*
         MVC   SRBID,SRBIDENT
         LA    R1,SRBRTN    SRB ROUTINE THAT WILL BE SCHEDULED
         ST    R1,SRBEP     STORE IN SRB
         LA    R1,SRBCLEAN  CLEAN UP ROUTINE IF ADDRESS SPACES TRMNATE
         ST    R1,SRBRMTR
*
         L     R1,WAFRASID  USER SUPPLIED ASID FOR SRB TO BE RUN UNDER
         BAL   R14,FINDASCB  GO LOCATE TO ASCB
         ST    R1,SRBASCB   STORE IN ASCB
         ST    R1,WAFRASCB  STORE IN PARAMETER LIST
*
         L     R1,WATOASID  USER ASID
         BAL   R14,FINDASCB  GO LOCATE FROM ASCB
         ST    R1,WATOASCB  STORE USER ASCB ADDR IN PARAMETER LIST
*
         SR    R1,R1
         ST    R1,WAECB       ZERO ECB.
         ST    R1,WACC   ZERO CONDITION CODE FIELD.
*
         ST    R11,SRBPARM   PARAMETER LIST PASSED TO SERVICE ROUTINE
*
*     ISSUE ESTAE FOR CLEANUP PROCESSING IF (?).
*     NOTE: AT THIS TIME THIS ROUTINE AND EXITS ARE UNTESTED
*     IT DOES NOT APPEAR THESE EXITS WOULD BE USED AS THE SRB'S
*     ARE RUNNING IN TASK INDEPENDENT MODE. BUT THE CODE IS BEING
*     LEFT IN UNTIL FURTHER INFORMATION IS RECEIVED.
*
         LA    R2,EXIT    ESTAE EXIT ROUTINE
*STARSTAE ESTAE (2),CT,XCTL=NO,TERM=YES,RELEATED=(CANSTAE)
         MVC   SRBEND(16),ESTAELST
         ST    R2,SRBEND
         MVI   SRBEND,22
         SLR   0,0
         LA    R1,SRBEND
         SVC   60   ISSUE ESTAE
*
*
         SCHEDULE SRB=(R10),SCOPE=LOCAL
*
         WAIT  ECB=WAECB
*
*
         LA    R2,0   ZERO EXIT ADDRESS CANCELS ESTAE
*CANSTAE ESATE (2),RELEATED=(STARSTAE,'ISSUE')
         XC    SRBEND(16),SRBEND   CLEAR FOR ESTAE CANCEL
         MVI   SRBEND,22
         SLR   0,0
         LA    1,SRBEND
         SVC   60 CANCEL ESTAE
*
         CLC   WACC,CON0
         BE    GOON
         SR    R15,R15   ZERO REG 15
         LH    R15,WACC  LOAD 15 WITH CONDITION CODE
         B     SVCDONE
*
CON0     DC    F'0'
*
GOON     L     R2,WATOADDR        LOAD TO ADDRESS
         L     R3,WASIZE          LOAD ELNGTH
         LR    R15,R3             SAVE IT
         LA    R14,WABFR          LOAD BUFFER ADDRESS
         MVCL  R2,R14             MOVE DATA TO DESTINATION
         SR    R15,R15            SET RETURN CODE
         B     SVCDONE            ALL DONE
         EJECT
*
*  THIS IS THE VALIDITY CHECK ROUTINE
*
CKPRMS   EQU   *
         LR    R1,R2              LOAD FROM ASID
         BAL   R14,FINDASCB       GO LOCATE THIS ASCB
         LTR   R15,R15            WAS IT FOUND
         BNZ   BADPRM             REJECT IS NOT
         LR    R1,R3              LOAD TO ASID
         BAL   R14,FINDASCB       GO LOCATE TO ASCB
         LTR   R15,R15            WAS IT FOUND
         BNZ   BADPRM             REJECT IF NOT
*
*  ANY VALUE IS VALID FOR THE FROM AND TO ADDRESS
*
         LTR   R14,R7             LOAD LENGTH
         BZ    BADPRM             REJECT IF LENGTH IS ZERO
         S     R14,FOURK          SUBTRACT 4 K
         BP    BADPRM             REJECT IF GREATER THAN 4K
         SR    R15,R15            SET RETURN CODE
         B     PRMEX
*
*
*
BADPRM   EQU   *
         LA    R15,4              SET RETURN CODE
*
PRMEX    EQU   *
         BR    R12                RETURN TO CALLER
         EJECT
*
*  THIS ROUTINE IS USED TO LOCATE AN ASCB HAVING THE SAME
*  ASID AS CONTAINED IN REG 1.
*
FINDASCB EQU   *
         LTR   R1,R1              IS REQUEST FOR CURRENT ASCB
         BZ    USECRNT            BRANCH IF YES
         L     R15,16             LOAD CVT ADDRESS
         L     R15,556(R15)       POINT TO ASVT
         C     R1,516(R15)        GREATER THAN MAX
         BH    BADASID            REJECT IF YES
         SLL   R1,2               MULT ASID BY 4
         LA    R1,524(R1,R15)     POINT TO ASCB ADDRESS
         TM    0(R1),X'80'        IS ASCB ASSIGNED
         BO    BADASID            REJECT IF YES
         L     R1,0(R1)           LOAD ASCB ADDRESS
         SR    R15,R15            SET RETURN CODE
         B     ASCBEX             RETURN
*
*
USECRNT  EQU   *
         LR    R1,R9              LOAD CURRENT ASCB ADDRESS
         SR    R15,R15            RETURN CODE
         B     ASCBEX             RETURN
*
*
BADASID  EQU   *
         LA    R15,4              SET ERROR RETURN CODE
*
ASCBEX   EQU   *
         BR    R14                RETURN TO CALLER
         EJECT
*
*
INVPRM   EQU   *
         LA    R15,4              SET ERROR RETURN CODE
         B     SVCEXIT
*
SVCDONE  EQU   *
         LR    R2,R15             SAVE RETURN CODE
*
*
*
         L     R3,WASIZE          LOAD LENGTH OF MOVE
         LA    R3,WASZ(R3)        ADD WORK AREA SIZE
         LA    R3,SRBSIZE(R3)      ADD FOR SRB
         LA    R3,16(,R3)          AND ESTAE PARM LIST W/A
         FREEMAIN R,LV=(R3),A=(R11),SP=245  FREE WORK AREA
*
         LR    R15,R2             SAVE RETURN CODE
SVCEXIT  EQU   *
         BR    R8                 RETURN TO SVC ISSUER
*
*  PROGRAM CONSTANTS
*
ESTAELST DC    3A(0),X'40',AL3(0)
FOURK    DC    A(4096)
SRBIDENT DC    C'SRB '
         DROP  R10,R11
         EJECT
*        FROM THIS POINT ON THE CODE IS NOT PART OF THE SVC.
*        THE CODE IS A SERIES OF INDEPENDENT ROUTINES. THE
*        SRB ROUTINES, THE FRR ROUTINES, THE ESTAE EXIT ROUTINE
*        AND THE RESOURCE TERMINATION MODULE FOR THE SRB'S.
*
         EJECT
*
*        THIS ROUTINE EXECUTES IN SRB MODE UNDER THE
*        USER SPECIFIED ASCB ADDRESS.
*         THIS ALLOWS CONTROL BLOCK INFORMATION TO BE PASSED
*         BACK TO USER FOR DISPLAY OR USE.
*
*        ERROR RECOVERY IS ESTABLISHED FOR THIS ROUTINE THRU FRR
*        PROCESSING.   IT IS POSSIBLE FOR THE USER TO REQUEST
*        DATA FROM AN ADDRESS THAT IS NOT VALID FOR THIS ASCB,
*        WHICH WOULD CAUSE AN  0C4 IN THIS SRB LEAVING SVC 248 AXC
*        HUNG IN A WAIT.                SO IF
*        THIS SRB ABNORMALLY TERMINATES, AN FRR ROUTINE WILL
*        INDICATE A BAD COMPLETION AND SCHEDULE A POST, SO
*        THE WAITING REQUEST DOES NOT HANG.
*
         USING SRBRTN,R10
SRBRTN   EQU   *
         LR    R10,R15
         LR    R9,R0           SRB ADDRESS
         LR    R8,R14          SAVE RETURN REG
         USING SRBSECT,R9
*
         L     R2,SRBPARM      ADDR WORK AREA IN SQA
         USING WA,R2
*
*
         LA    R3,FRRTN   FRR ROUTINE ADDRESS
*
         SETFRR A,FRRAD=(3),WRKREGS=(4,5),PARMAD=(6)
*
         ST    R6,WAFRRPRM   24 BYTE WORK AREA ADDRESS
         ST    R2,0(R6)   WA ADDRESS
         ST    R9,4(R6)  SAVE SRB ADDRESS
*
         L     R4,WAFRADDR  MOVE REQUESTED DATA TO SQA AREA
         L     R5,WASIZE
         LR    R15,R5
         LA    R14,WABFR
         MVCL  R14,R4
*
         MVC   SRBASCB,WATOASCB
         LA    R1,SRBRETRN
         ST    R1,SRBEP
         LR    R1,R9
*
*        SCHEDULE AN SRB TO EXECUTE IN RECEIVING ASCB
*        TO POST THE ECB COMPLETE.
*
         SCHEDULE SRB=(1),SCOPE=LOCAL
*
         SETFRR D,WRKREGS=(4,5)  DELETE FRR FROM STACK.
*
         BR    R8
         DROP  R10,R9,R2
         EJECT
*        THIS ROUTINE IS ENTERED IF SRB ABNORMALLY TERMINATES FOR ANY
*        OF THE FOLLOWING REASONS:
*           1. PROGRAM CHECK IN SRB
*           2. MACHINE CHECK DURING SRB PROCESSING.
*           3. CONSOLE RESTART KEY DEPRESSED
*                (USUALLY BECAUSE SRB LOOPING)
*           4. UNRECOVERABLE TRANSLATION FAILURE WHILE SRB IN CONTROL.
*                (BECAUSE OF BAD ADDRESS PASSED BY USER (0C4))
*           5. UNRECOVERABLE I/0 ERROR ON PAGE DATA SET
*                SRB TRYING TO ACCESS.
*
*        WHATEVER CAUSES THIS ROUTINE TO BE ENTERED THE ONLY THING
*        IT NEEDS TO ACCOMPLISH IS TO SET THE CONDITION CODE IN THE
*        CONDITION CODE FIELD
*        AND POST THE RECEIVING ECB COMPLETE SO REQUESTING TASK
*        CAN CONTINUE PROCESSING.  THE FRR ROUTINE WILL INSTRUCT THE
*        SYSTEM TO CONTINUE TERMINATION PROCESSING AFTER IT IS THROUGH.
*        THIS WILL CAUSE A RECORD TO BE WRITTEN TO LOGREC FOR THE SRB
*        FAILURE, BUT PROGRAM RUNNING UNDER THIS ASCB IS NOT EFFECTED.
*
*              R1=SDWA ADDRESS
*              R15=ENTRY POINT ADDRESS
*              R14=RETURN ADDRESS.
*
         USING *,R12
         USING SRBSECT,R9
         USING WA,R3
FRRTN    EQU   *
         LR    R12,R15  ESTABLISH ADDRESSABILITY
         L     R2,0(R1)        FRR 24 BYTE PARM ADDRESS.
         L     R3,0(R2)        SVC 248 WORK AREA (WA) ADDRESS AXC
         L     R9,4(R2)        SRB ADDRESS.
*
         L     R4,4(R1)        COMPLETION CODE SET IN SDWA.
         SLL   R4,8            SHIFT OFF FLAG'S
         SRL   R4,20           SHIFT SYSTEM CC TO RIGHTMOST 2 BYTES
         STH   R4,WACC STORE IN COND CODE FLD FOR RECEIVING PROGRAM.
*
         CLI   WACC,X'00'      CHECK FOR ZEROS
         BNE   OK
         CLI   WACC+1,X'00'
         BNE   OK
         MVC   WACC(2),UNKN2      BE SURE COND CODE NOT ZERO
*
OK       LA    R5,SRBRETRN  SRB ROUTINE TO BE SCHEDULED
         ST    R5,SRBEP
*
         MVC   SRBASCB,WATOASCB  REQUESTING ASCB ADDRESS
         LR    R6,R1  SAVE SDWA ADDR
         SCHEDULE SRB=(9),SCOPE=LOCAL
*
         LR    R1,R6   RESTORE SDWA ADDR
         SETRP DUMP=YES,RC=0,RECORD=YES
*
*    ABOVE TO INSURE ERROR WRITTEN TO LOGREC AND INSTRUCTS
*    SYSTEM TO CONTINUE WITH TERMINATION.
*
         BR    R14   RETURN
UNKN2    DC    X'FFFF'
         DROP  R9,R3
         EJECT
         USING SRBRETRN,R6
SRBRETRN EQU   *
         LR    R6,R15    ESTABLISH ADDRESSABILITY
         LR    R9,R0           SRB ADDRESS
         LR    R8,R14  RETURN ADDRESS
         USING SRBSECT,R9
         L     R2,SRBPARM    BUFFER AND PARAMETER AREA
*
         USING WA,R2
*
         LA    R3,FRRTN2   ADDRESS OF FRR ROUTINE .
         SETFRR A,FRRAD=(3),WRKREGS=(4,5)
*
*********************************************************
*
*        CHECK ECB FOR WAIT BIT ON
*        IF NOT ON USE CS TO BYPASS POST ROUTINE
*
*        BRANCH ENTRY TO POST
*              R10=COMPLETION CODE
*              R11=ECB ADDRESS
*              R14=RETURN ADDRESS
*              R15=ENTRY ADDRESS
*              REG'S 0-9 AREA PRESERVED BY POST
*
*        BRANCH ENTRY OF POST REQUIRES THE LOCAL LOCK TO BE HELD
*
*        THE LOCK ROUTINE DESTROYS REGISTERS 11 THRU 14
*
****************************************
*
*
GETL2    SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(FREEL2)
         L     R3,WAECB     CONTENTS OF ECB
         L     R4,CON40     IMAGE OF POSTED ECB
         TM    WAECB,X'80'   HAS WAIT BEEN ISSUED?
         BO    DOPOST   IF SO,   ISSUE POST
         CS    R3,R4,WAECB  IF NOT, COMPARE AND SWAP
         BZ    POSTDONE  COMPARE AND SWAP WAS SUCCESSFUL.
*
DOPOST   EQU   *
*
         LA    R11,WAECB
         LA    R10,0
         L     R15,16   CVT ADDRESS
         L     R15,152(R15)   POST ENTRY POINT ADDRESS
         BALR  R14,R15   BRANCH TO POST ROUTINE
POSTDONE EQU *
*
FREEL2   SETLOCK RELEASE,TYPE=LOCAL,RELATED=(GETL2)
*
         SETFRR D,WRKREGS=(4,5)
*
         BR    R8   RETURN
         DS    0F
CON40    DC    X'40000000'
         DS    0F
         DROP  R6,R9,R2
         EJECT
*        THIS ROUTINE IS ENTERED IF 'SRBRETRN' SRB ROUTINE FAILS
*        HOWEVER, IF THIS ROUTINE FAILS THERE ISN'T ANYTHING CAN BE
*        DONE ABOUT IT.   SO THE FRR ROUTINE WILL INSURE THERE
*        IS A LOGREC RECORD WRITTEN FOR DEBUGGING PURPOSES.
*
         USING *,R12
FRRTN2   LR    R12,R15
         SETRP DUMP=YES,RC=0,RECORD=YES
         BR    R14
         EJECT
         USING *,R11
EXIT     EQU   *
*******************************************************************
*
*  ****NOTE:   AT THIS TIME THIS ROUTINE AND COMMENTS
*              DO NOT APPEAR TO BE VALID.  THE CODE IS
*              BEING LEFT IN UNTIL FURTHER INFORMATION
*              IS OBTAINED.
*
*    ESTAE EXIT ROUTINE GETS CONTROL IF AN ABNORMAL TERMINATION OCCURS
*    IN THE SERVICE REQUEST PROCESSING OR IN THE CURRENT ADDRESS SPACE
*    THE PURPOSE OF THE ESTAE ROUTINE IS TO ISSUE A 'PURGEDQ' TO
*    DEQUE ANY SRB'S THAT MIGHT BE WAITING TO BE DISPATCHED.
*
*    IF AN SRB IS PURGED, CONTROL WILL BE GIVEN TO THE RESOURCE
*    TERMINATION MODULE (RMTR) WHOSE ADDRESS IS IN THE SRB PURGED.
*    THIS MODULE ('SRBCLEAN' WITHIN THIS LISTING) WILL
*    SET THE COMPLETION CODE IN THE COND. CODE FLD AND POST THE ECB
*     COMPLETE TO KEEP THAT ADDRESS SPACE PROCESSING.
*
******************************************************************
*
*         PURGEDQ
*           WILL MATCH SRB RMTR PARAMETER TO
*           THE RMTR ADDRESS SUPPLIED WITH THE PURGEDQ
*           MACRO FOR UNIQUE IDENTIFICATION OF
*           SRB'S TO BE PURGED.
*
***********************************************************
*
         LR    R11,R15   BASE ADDRESSABILITY
         LR    R10,R14   SAVE RETURN ADDRESS
*
         LR    R2,R0   CODE INDICATING WHETHER SWDA OBTAINED
         L     R0,UNKN  SET UP WITH UNKNOWN CODE.
         SLL   R2,24  CLEAR HIGH ORDER BITS
         SRL   R2,24
         CL    R2,F12  CHECK FOR 12 COMPLETION CODE.
         BE    CONT  IF 12 LEAVE UNKN CODE IN REG.
         L     R0,4(R1)  OTHERWISE LOAD COMPLETION CODE FROM SDWA.
         SLL   R0,8  CLEAR HIGH ORDER BITS
         SRL   R0,20  SHIFT SYS COMP CODE TO RIGHT TWO BYTES.
*
CONT     LR    R3,R0   SAVE REGISTER WITH CODE.
         LTR   R3,R3  TEST FOR CC = ZERO
         BNZ   PURGEQ  IF NOT OK.
         L     R3,UNKN     INSURE ZERO CONDITION CODE NOT RETURNED
*
*
*
PURGEQ   LA    R2,SRBCLEAN   RESOURCE TERMINATION MODULE
         PURGEDQ RMTR=(R2)
*
         LR    R0,R3   LOAD RETURN CODE INTO REG FOR RMTR.
         LR    R14,R10   RETURN ADDRESS
         SR    R15,R15  INDICATEDS CONTINUE TERMINATION
         BR    R14   RETURN
*
F12      DC    F'12'
UNKN     DC    X'0000FFFF'
*
         DROP  R11
         EJECT
*********************************************************************
*
*     CONTROL RECEIVED IF ESTAE EXIT INVOKED (WHICH ISSUES PURGEDQ FOR
*        QUEUED SRB'S)  ISSUES POST TO MINIMIZE CHANCES OF SVC HANGING
*           IN WAIT.
*           R0=CONTENTS OF R0 OF CALLER CONTAINS COMP CODE.
*           R1=SRB ADDRESS
*        R2=CONTENTS OF SRB PARM (ADDRESS OF SQA AREA USED IN DATA XFER
*           R14=RETURN ADDRESS
*           R15=ENTRY POINT
*
***********************************************************************
         USING WA,R6    ADDRESSABILITY FOR PARAMETER LIST
         USING SRBSECT,R9   SRB ADDRESSABILITY
         USING *,R8         BASE ADDRESSABILITY
SRBCLEAN  EQU   *
*
         LR    R8,R15     LOAD BASE REG
         LR    R10,R14    SAVE RETURN ADDRESS
         LR    R9,R1    SAVE SRB ADDRESS
         L     R6,SRBPARM   PARAMETER LIST ADDRESS
*
         LR    R7,R0   SAVE CONDITION CODE
*
*
*         REGS 11-14 ARE DESTROYED BY SETLOCK
*             MUST HAVE THE LOCAL LOCK FOR BRANCH ENTRY TO POST
*
GETLOCK  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(FREELOCK)
         L     R3,WAECB  CONTENTS OF ECB
         L     R4,CNC40  IMAGE OF POSTED ECB
         TM    WAECB,X'80'  HAS WAIT BEEN ISSUED?
         BO    EXPOST  IF SO, ISSUE POST.
         CS    R3,R4,WAECB  IF NOT, COMPARE AND SWAP
         BZ    POSTFINI
*
EXPOST   EQU   *
         LA    R11,WAECB  ECB ADDRESS
         LA    R10,0    ZERO R10
         L     R15,16  CVT ADDRESS
         L     R15,152(R15)    BRANCH TO POST ROUTINE.
         BALR  R14,R15   DO POST
*
POSTFINI EQU   *
         STH   R7,WACC     SET COMPLETION CODE IN COND. CODE FLD.
*
FREELOCK SETLOCK RELEASE,TYPE=LOCAL,RELATED=(GETLOCK)
*
         LR    R14,R10   RESTORE RETURN ADDR
         BR    R14    RETURN
         DS    0F
CNC40    DC    X'40000000'
         DROP  R6,R8,R9
         EJECT
*
*  WORK AREA DSECT
*
*
WA       DSECT
WAPRMS   DS    0F
WAFRASID DS    A                  REQUESTED ASID
WATOASID DS    A                  USER ASID
WAFRADDR DS    A                  FROM ADDRESS
WATOADDR DS    A                  TO ADDRESS
WATOASCB DS    A                  FROM ASCB
WAFRASCB DS    A                  TO ASCB
WASIZE   DS    A                  MOVE LENGTH
WAECB    DS    A               ECB TO BE POSTED FOR SYNCH
WAFRRPRM DS    A  WILL CONTAIN THE ADDR OF 24 BYTE PARM AREA FOR FRR
WACC     DS    A   COMPLETION CODE.
WASZ     EQU   *-WA    PARM SECTION SIZE
WABFR    EQU   *       DATA AREA
         EJECT
         IHASRB
         EJECT
         CVT
         EJECT
         IHAPSA
         EJECT
         IHASDWA
         EJECT
         IHAFRRS
         END
