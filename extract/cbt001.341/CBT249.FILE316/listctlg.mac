LCAT     TITLE 'INTELLIGENT CATALOG LISTER'
**$DOC@** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*          L I S T C T L G  --  INTELLIGENT  CATALOG  LISTER          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*           RECODED, CORRECTED AND EXPANDED IN OPERATION AT           *
*                                                                     *
*                   U. S.  DEPARTMENT  OF  COMMERCE                   *
*           NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION           *
*                 GEORGETOWN COMPUTER SUPPORT PROJECT                 *
*                     WASHINGTON,  D. C.    20235                     *
*                                                                     *
*          PROGRAMMER:  ROBERT W. WHIPPLE      FEBRUARY 1976          *
*          AFDSC/SFI MODIFIED JUN 1978 CAPT P. SCHAFER                *
*          AFDSC/SFI MODIFIED FEB 1980 BY CAPT P SCHAFER             *
*               TO ADD MSS TRANSLATE TABLE ENTRY                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
*
*   NOTE-  LISTCTLG PREVIOUSLY EXISTED ONLY AS AN OBJECT DECK OUTSIDE
*          OF IBM FOR VARIOUS REASONS.  BOB WHIPPLE OF NOAA-GEORGETOWN
*          RETRIEVED IT FROM OUR GOODIE TAPE AND DID AN EXCELLENT JOB
*          OF CORRECTING AND ENHANCING THE PROGRAM AS HE REBUILT THE
*          SOURCE.  NOTE THAT THE OUTPUT FROM THIS PROGRAM, WHILE
*          VALUABLE FOR ITS OWN SAKE, ALLOWS YOU TO USE ARGONNE'S
*          'COPYCAT' PROGRAM TO BUILD AN EFFICIENT CATALOG STRUCTURE.
*          ANY FEEDBACK ON THIS PROGRAM WOULD BE APPRECIATED.
*          ... FRANK PAJERSKI  CODE 531  NASA-GSFC  GREENBELT MD 20771
*          ... (301) 982-6797       ...22MAR76
*
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
         SPACE 2
*  PROGRAM DESCRIPTION, CAPABILITIES AND LIMITATIONS
         SPACE
*      PROGRAM LISTCTLG IS AN IMPROVED SYSTEM CATALOG LISTING PROGRAM
*  THAT CAN PERFORM EITHER THE LISTCTLG OPERATION OF THE IBM UTILITY
*  IEHLIST (EXCEPT, AT PRESENT, FOR THE NODE OPTION) OR THE DUMP TO
*  SYSPRINT OPERATION OF THE IBM UTILITY IEHDASDR (AS FAR AS THE CATA-
*  LOG DATA SET IS CONCERNED).  IT CAN ALSO PROVIDE A FORMATED (THAT
*  IS, INTERPRETED) DUMP OF THE CATALOG--NOT OFFERED AT ALL BY THE
*  STANDARD IBM UTILITIES.
         SPACE
*      ADVANTAGES TO LISTING A CATALOG WITH LISTCTLG INSTEAD OF IEH-
*  LIST ARE THE FOLLOWING:  (1) A SINGLE ALPHABETICAL LISTING OF BOTH
*  SIMPLE AND QUALIFIED NAMES IS PRODUCED--YOU NEED LOOK IN ONLY ONE
*  PLACE TO FIND OUT WHETHER A PROPOSED NEW INDEX STRUCTURE CAN BE
*  BUILT.  (2) EMPTY INDEX LEVELS ARE LISTED--NO MORE SURPRISES FROM
*  INDEX NAMES BEING IN THE CATALOG BUT NOT IN THE CATALOG LISTING.
*  (3) DEVICE TYPES ARE INTERPRETED--A 3330 DISK, FOR EXAMPLE, IS
*  CALLED A 3330 AND NOT A 30502009.  (4) CATALOG ENTRIES ARE LISTED
*  TWO COLUMNS TO A PAGE--THEREBY CUTTING PAPER REQUIREMENTS NEARLY
*  IN HALF.  (5) QUALIFIED DATA SET NAMES THAT EXCEED 44 CHARACTERS
*  ARE FLAGGED AS ERRORS.  (6) INFORMATION IS INCLUDED ON THE SIZE
*  AND ALLOCATION OF THE CATALOG DATA SET AND ON HOW MUCH OF IT IS
*  PRESENTLY BEING USED--OF VALUE TO PERSONS MAINTAINING THE CATALOG.
         SPACE
*      ALSO PROVIDED BY LISTCTLG ARE TWO DUMP OPTIONS AND AN OPTION
*  TO LIST ONLY THE SIZE, ALLOCATION AND USAGE OF THE CATALOG.  THE
*  TWO DUMP OPTIONS ARE MORE FULLY DESCRIBED ON THE NEXT PAGE.
         SPACE 1
*      THE UNFORMATED DUMP OPTION GIVES A LISTING SIMILAR TO AN IEH-
*  DASDR DUMP TO SYSPRINT, BUT DOES NOT LIST BLOCKS THAT ARE UNUSED
*  AND DOES NOT REQUIRE THE USER TO HAVE PRIOR KNOWLEDGE OF HOW THE
*  CATALOG IS ALLOCATED.  THE FORMATED DUMP OPTION BREAKS THE CATALOG
*  BLOCKS DOWN INTO THEIR INDIVIDUAL ENTRIES, WHICH ARE LISTED WITH
*  INTERPRETATION.  ANOTHER SERVICE OF THE FORMATED DUMP ROUTINE IS
*  THAT CATALOG BLOCKS ARE CHECKED FOR INVALID STRUCTURING.  (NOTE:
*  ONE CHECK THAT IS NOT MADE IS FOR QUALIFIED DATA SET NAMES EXCEED-
*  ING 44 CHARACTERS; THIS ERROR IS CAUGHT INSTEAD BY THE STANDARD
*  CATALOG LISTING ROUTINE.  ALSO, NONE OF THE ROUTINES TESTS FOR
*  INVALID CHARACTERS IN DATA SET OR INDEX LEVEL NAMES.)
         SPACE 2
*  EXECUTING LISTCTLG
         SPACE
*      THE JCL FOR EXECUTING LISTCTLG HAS BEEN MADE AS CLOSE AS POSSI-
*  BLE TO THAT FOR IEHLIST, AND SO THIS EXPOSITION WILL MAINLY CONCERN
*  ITSELF WITH THOSE PLACES WHERE IT IS DIFFERENT.
         SPACE
*      IT IS RECOMMENDED THAT PROGRAM LISTCTLG BE EXECUTED WITH A CATA-
*  LOGED PROCEDURE (WHICH MAY ALSO BE CALLED LISTCTLG) THAT RESEMBLES
*  THE PROCEDURE LIST USED TO EXECUTE IEHLIST.  SUCH A PROCEDURE COULD
*  BE CODED AS FOLLOWS:
*
*        //LISTCTLG EXEC PGM=LISTCTLG
*        //STEPLIB  DD   DSN=............,DISP=SHR  (OPTIONAL CARD)
*        //SYSPRINT DD   SYSOUT=A,DCB=BLKSIZE=....
*        //DDSRV    DD   VOL=REF=SYS1.SVCLIB,DISP=SHR  (SYSRES VOLUME)
*
*  THE JCL TO USE THIS PROCEDURE IS SIMPLY
*
*        //STEPNAME EXEC LISTCTLG
*        (DD CARDS FOR VOLUMES OTHER THAN THE SYSTEM RESIDENCE)
*        (ONE OR MORE PROGRAM CONTROL CARDS)
         SPACE
*      AS WITH IEHLIST, THE EXEC CARD MAY CONTAIN THE PARAMETER
*  PARM='LINECNT=..' TO SPECIFY THE NUMBER OF LINES TO BE PRINTED
*  ON A PAGE.  IF THIS PARAMETER IS OMITTED OR IS NOT IN THIS FORMAT,
*  OR THE NUMBER OF LINES IS NOT BETWEEN 30 AND 99, A DEFAULT OF 60 PES
*  WILL BE USED.
         SPACE
*      THE FORMAT OF THE DD CARDS FOR SPECIFYING VOLUMES IS THE SAME
*  AS IS USED WITH IEHLIST.  (NOTE:  FOR FULL INFORMATION ON THE OTHER
*  DD CARDS IN THE SUGGESTED PROCEDURE AND ON POSSIBLE MODIFICATIONS
*  TO THEM, SEE THE SECTION TITLED ADDITIONAL JCL INFORMATION.)
         SPACE 1
*  PROGRAM CONTROL CARDS
         SPACE
*      THE PROGRAM CONTROL CARDS CONSIST BASICALLY OF AN OPERATION
*  FIELD OPTIONALLY FOLLOWED BY AN OPERAND FIELD.  AS WITH IEHLIST,
*  THESE FIELDS MAY BE PLACED ANYWHERE BETWEEN COLS. 2 AND 71, AS
*  LONG AS THEY ARE PRECEDED, FOLLOWED AND SEPARATED BY AT LEAST ONE
*  BLANK (WHICH MAY BE IN COL. 1 OR 72).  ALSO PERMITTED BUT HAVING
*  NO EFFECT ON PROGRAM EXECUTION ARE A LABEL FIELD (A MAXIMUM OF 8
*  CHARACTERS BEGINNING IN COL. 1 AND SEPARATED FROM THE OPERATION
*  FIELD BY AT LEAST ONE BLANK), COMMENTS (FOLLOWING THE OPERAND
*  FIELD AND SEPARATED FROM IT BY AT LEAST ONE BLANK) AND CARD IDENTI-
*  FICATION (IN COLS. 73 TO 80).
         SPACE
*      SPECIFICALLY, THE FORMAT OF THE PROGRAM CONTROL CARDS IS AS
*  FOLLOWS:
*
*        (LABEL)  LIST....  (VOL=......=......)  (COMMENTS)
*
*  (NOTE:  THE PARENTHESES ON THE LINE ABOVE ARE TO INDICATE OPTIONAL
*  FIELDS AND ARE NOT ACTUALLY TO BE PUNCHED INTO THE CONTROL CARDS.)
         SPACE
*      PERMISSIBLE VALUES FOR THE LIST.... (OPERATION) FIELD WILL BE
*  FOUND IN THE SECTION TITLED PROGRAM OPERATIONS.  THE TWO VALUES TO
*  BE FILLED IN IN THE VOL= (OPERAND) FIELD ARE THE DEVICE AND SERIAL
*  IDENTIFICATIONS, CODED AS FOR IEHLIST.  (NOTE:  THE PROGRAM DOES
*  NOT CHECK THAT THE INDICATED VOLUME IS ACTUALLY MOUNTED ON THE TYPE
*  OF DEVICE SPECIFIED, OR EVEN THAT THE DEVICE SPECIFICATION IS VALID.
*  HOWEVER, IT DOES CHECK THAT THE ACTUAL DEVICE TYPE CAN HOLD A CATA-
*  LOG DATA SET.)  IF THE VOL OPERAND IS OMITTED, THE CATALOG ON THE
*  SYSTEM RESIDENCE VOLUME IS LISTED.  TO INDICATE OMISSION OF THE
*  OPERAND WHEN COMMENTS ARE TO BE CODED, CODE A COMMA (PRECEDED AND
*  FOLLOWED BY AT LEAST ONE BLANK) IN PLACE OF THE OPERAND.
         SPACE
*      WARNING--ONLY THE VOL OPERAND IS VALID FOR PROGRAM LISTCTLG AT
*  THIS TIME.  AN IEHLIST CONTROL CARD CONTAINING THE NODE OPERAND
*  WILL BE CONSIDERED AN ERROR.
         SPACE 1
*  PROGRAM OPERATIONS
         SPACE
*      PERMISSIBLE VALUES FOR THE CONTROL CARD OPERATION FIELD ARE AS
*  FOLLOWS:
*
*  LISTCTLG PRODUCES A STANDARD CATALOG LISTING, ALPHABETICALLY BY
*           DATA SET OR INDEX NAME, TWO COLUMNS TO A PAGE.  THE INFOR-
*           MATION ASSOCIATED WITH THE LISTUSED OPERATION WILL ALSO
*           BE INCLUDED.
*
*  LISTDUMP PRODUCES AN UNFORMATED DUMP OF THE USED PORTION OF THE
*           CATALOG, A BLOCK AT A TIME AND IN TRACK-AND-RECORD ORDER.
*           THE INFORMATION ASSOCIATED WITH THE LISTUSED OPERATION
*           WILL ALSO BE INCLUDED.
*
*  LISTFORM PRODUCES A FORMATED (THAT IS, INTERPRETED) DUMP OF THE
*           USED PORTION OF THE CATALOG, BY BLOCKS BROKEN DOWN INTO
*           THEIR INDIVIDUAL ENTRIES AND LISTED IN TRACK-AND-RECORD
*           ORDER.  THE INFORMATION ASSOCIATED WITH THE LISTUSED
*           OPERATION WILL ALSO BE INCLUDED.
*
*  LISTUSED RESTRICTS THE LISTING TO DATA ON THE SIZE AND ALLOCATION
*           OF THE CATALOG DATA SET AND ON HOW MUCH OF IT IS BEING
*           USED.  THIS INFORMATION IS ALSO PROVIDED BY THE OTHER
*           THREE OPERATIONS, SO LISTUSED NEED BE CODED ONLY WHEN A
*           LISTING OF THE CONTENTS OF THE CATALOG IS NOT REQUIRED.
         SPACE
*      NOTE:  THE CODING FOR THE LISTCTLG OPERATION ASSUMES A VALIDLY
*  STRUCTURED CATALOG.  SHOULD THE PROGRAM BLOW UP ON THIS OPERATION,
*  A RERUN WITH THE LISTFORM OPERATION SHOULD BE MADE TO DETERMINE IF
*  A CATALOG STRUCTURE ERROR EXISTS.
         SPACE 2
*  EXAMPLES
         SPACE
*      (1) STANDARD LISTING OF THE SYSTEM RESIDENCE VOLUME CATALOG
*
*        //EXAMPLE1 EXEC LISTCTLG
*          LISTCTLG
         SPACE
*      (2) LIST AMOUNTS USED IN CATALOGS ON TWO PRIVATE VOLUMES
*
*        //EXAMPLE2 EXEC LISTCTLG
*        //FIRST    DD   UNIT=3330,VOL=SER=111111,DISP=SHR
*        //SECOND   DD   UNIT=2314,VOL=SER=222222,DISP=SHR
*          LISTUSED      VOL=3330=111111
*          LISTUSED      VOL=2314=222222
         SPACE 1
*      (3) VARIOUS LISTINGS OF VARIOUS CATALOGS,
*                                          PRINTING 58 LINES TO A PAGE
*
*        //EXAMPLE3 EXEC LISTCTLG,PARM='LINECNT=58'
*        //FIRST    DD   UNIT=3330,VOL=SER=111111,DISP=SHR
*        //SECOND   DD   UNIT=2314,VOL=SER=222222,DISP=SHR
*        //THIRD    DD   UNIT=2303,VOL=SER=333333,DISP=SHR
*          LISTCTLG      VOL=3330=111111
*          LISTFORM      VOL=3330=111111
*          LISTDUMP      VOL=2314=222222
*          LISTFORM      VOL=2314=222222
*          LISTCTLG      VOL=2303=333333
*          LISTFORM      VOL=2303=333333
*          LISTUSED      ,                (LISTS SYSRES CATALOG)
         SPACE 2
*  ADDITIONAL JCL INFORMATION
         SPACE
*      PROGRAM LISTCTLG HAS BEEN REQUIRING THE FOLLOWING REGION SIZES
*  ON AN MVT-21.7/ASP-3.1.6 SYSTEM USING A SYSIN BLKSIZE OF 80 AND A
*  SYSPRINT BLKSIZE OF 1064:
*
*        LISTDUMP, LISTFORM AND/OR LISTUSED OPERATIONS ONLY  20K
*        LISTCTLG OPERATION WITH MINIMUM LINE COUNT (30)     34K
*        LISTCTLG OPERATION WITH TYPICAL LINE COUNT (58)     40K
*        LISTCTLG OPERATION WITH MAXIMUM LINE COUNT (99)     50K
         SPACE
*      THE NORMAL PROGRAM RETURN CODE IS 0.  A CODE OF 4 IS RETURNED
*  IF THE PROGRAM CONTROL CARD (SYSIN) DATA SET CAN NOT BE OPENED.
*  ALL OTHER ERROR CONDITIONS RETURN A CODE OF 8.  THE ONLY PROGRAM-
*  INITIATED ABEND IS IF THE PRINTER OUTPUT (SYSPRINT) DATA SET CAN
*  NOT BE OPENED, IN WHICH CASE A USER CODE OF 20 IS RETURNED WITHOUT
*  A DUMP.
         SPACE
*      THE REST OF THIS SECTION CONTAINS INFORMATION OF USE IN WRITING
*  EITHER THE GENERAL CATALOGED PROCEDURE RECOMMENDED IN THE SECTION
*  TITLED EXECUTING LISTCTLG OR A SPECIALIZED PRIVATE PROCEDURE, OR
*  IN OVERRIDING THE DD CARDS IN THE CATALOGED PROCEDURE.  IT IS NOT
*  NORMALLY REQUIRED TO EXECUTE THE PROGRAM (ASSUMING THAT A PROCEDURE
*  HAS BEEN CATALOGED FOR IT).
         SPACE
*      THE EXEC CARD AND THE OPTIONAL STEPLIB DD CARD SHOULD BE CODED
*  ABOUT AS SHOWN IN THE PROCEDURE SUGGESTED IN THE ABOVE-REFERENCED
*  SECTION, WITH THE DATA SET NAME ADDED TO THE STEPLIB DD CARD.  IF
*  DESIRED, A DIFFERENT STEP NAME COULD BE CODED ON THE EXEC CARD.
*  FOR A PRIVATE PROCEDURE, A PARM PARAMETER MIGHT ALSO BE WANTED
*  ON THE EXEC CARD.
         SPACE 1
*      THE SYSPRINT DATA SET WILL HAVE A FIXED LRECL OF 133 AND SO ANY
*  BLKSIZE THAT IS SPECIFIED FOR IT ON THE DD CARD MUST BE A MULTIPLE
*  OF THIS.  IF NO BLKSIZE IS SPECIFIED, THE PROGRAM SUPPLIES A VALUE
*  OF 133.  (THE SUGGESTED PROCEDURE SHOWS HOW TO SPECIFY A BLKSIZE
*  BUT LEAVES THE AMOUNT TO BE FILLED IN.)  RECFM IS SET BY THE PRO-
*  GRAM TO EITHER FBA OR FA (AS APPROPRIATE FOR THE BLKSIZE BEING
*  USED).
         SPACE
*      THE DDSRV DD CARD (IN THE SUGGESTED PROCEDURE) IS RECOMMENDED
*  FOR A GENERAL CATALOGED PROCEDURE BUT WOULD NOT BE REQUIRED IN A
*  PROCEDURE INTENDED ONLY TO LIST CATALOGS NOT ON THE SYSTEM RESI-
*  DENCE VOLUME.  ALSO, THE DD NAME NEED NOT BE DDSRV; THIS NAME WAS
*  SUGGESTED SIMPLY TO AGREE WITH THE IBM-SUPPLIED PROCEDURE LIST FOR
*  EXECUTING IEHLIST.
         SPACE
*      IF PROGRAM CONTROL CARDS WILL NOT BE PLACED IN THE JOB INPUT
*  STREAM, A SYSIN DD CARD WILL BE REQUIRED TO DEFINE THIS DATA SET.
*  THE PROGRAM DISREGARDS THE ACTUAL LRECL AND RECFM FOR THIS DATA SET
*  AND ASSUMES A FIXED LRECL OF 80.  THUS, ANY BLKSIZE THAT IS SPECI-
*  FIED EITHER ON THE SYSIN DD CARD OR BY A DATA SET LABEL MUST BE A
*  MULTIPLE OF 80.  IF NO BLKSIZE IS SPECIFIED, THE PROGRAM SUPPLIES
*  A VALUE OF 80.  RECORDS ARE READ USING A RECFM OF EITHER FB OR F
*  (AS APPROPRIATE FOR THE BLKSIZE BEING USED).
         SPACE
*      A SYSUDUMP OR SYSABEND DD CARD COULD, OF COURSE, BE ADDED TO
*  THE PROCEDURE IF DESIRED.  ONLY SYSTEM-INITIATED DUMPS WILL BE PRO-
*  DUCED, HOWEVER, AS THE PROGRAM WILL NOT ABEND WITH A DUMP.
         SPACE 2
*  MACHINE AND OPERATING SYSTEM RESTRICTIONS
         SPACE
*      THIS CODING EMPLOYS DECIMAL ARITHMETIC AND EDITING INSTRUCTIONS
*  AND SO MUST BE EXECUTED ON A MACHINE HAVING THE DECIMAL FEATURE.
*  IT ALSO CONTAINS GETMAIN/FREEMAIN MACROS SPECIFYING SUBPOOLS AND
*  SO MAY NOT BE RUN ON AN MFT OPERATING SYSTEM.  EXTENDED MNEMONICS
*  FOR THE BCR INSTRUCTION THAT ARE NOT RECOGNIZED BY ALL ASSEMBLERS
*  HAVE BEEN USED; THESE CAN BE ADDED TO THE SYSTEM AS MACROS IF NEED
*  BE.  THE PRINTED OUTPUT OF THE PROGRAM REQUIRES A PRINTER HAVING AT
*  LEAST 132 PRINT POSITIONS.
*
*  CHANGE LOG: 1183 - ADDED 3380 DEVICE TYPE. JIM MARSHALL, SADSC
*
* *$DOC$*
         TITLE 'INTELLIGENT CATALOG LISTER -- INITIALIZATION'
LISTCTLG CSECT
         SPACE
R0  EQU 0                                      SYSTEM & TEMPORARY USES
R1  EQU 1  PRINT DSECT (PRTSCTN/PRTCSEG) PTR   SYSTEM & TEMPORARY USES
R2  EQU 2  PRINT DSECT (PRTFSEG) POINTER       CATALOG BLOCK POINTER
R3  EQU 3  CATALOG ENTRY DSECT (CATSCTN) PTR   CONTROL CARD POINTER
R4  EQU 4  BYTES LEFT TO FORMAT IN BLOCK       CURRENT INDEX LEVEL PTR
R5  EQU 5  POINTER TO CATALOG ENTRY PROCESSOR  CATALOG ENTRY LENGTH
R6  EQU 6  COUNTER FOR PASSES THRU LOOPS       VARIOUS TEMPORARY USES
R7  EQU 7  USED MAINLY IN SUBROUTINES          VARIOUS TEMPORARY USES
R8  EQU 8    AND IN THEIR CALLING SEQUENCES    VARIOUS TEMPORARY USES
R9  EQU 9  PROGRAM LINK REGISTER #2            VARIOUS TEMPORARY USES
R10 EQU 10 PROGRAM LINK REGISTER #1
R11 EQU 11 PROGRAM BASE REGISTER #2
R12 EQU 12 PROGRAM BASE REGISTER #1
R13 EQU 13 WORKING DSECT (WORKSCTN) POINTER    SYSTEM SAVE AREA POINTER
R14 EQU 14 SYSTEM LINK REGISTER                SYSTEM & TEMPORARY USES
R15 EQU 15 SYSTEM BASE REGISTER                SYSTEM & TEMPORARY USES
         SPACE
         SAVE  (14,12)
         LR    R12,R15
         LA    R11,2048(R12)
         LA    R11,2048(R11)
         SPACE
         USING LISTCTLG,R12,R11
         SPACE
         L     R2,0(R1)            SAVE PARM FIELD ADDRESS
       GETMAIN R,LV=WRKLNGTH       GET WORKING STORAGE AREA
         USING WORKSCTN,R1
         ST    R1,8(R13)
         ST    R13,SAVEAREA+4
         LR    R13,R1
         SPACE
         USING PRTSCTN,R1
         USING CATSCTN,R3
         USING WORKSCTN,R13
         SPACE
         MVC   MAXLCNT,=P'60'     ASSUME DEFAULT MAX LINES PER PAGE PES
         CLC   0(2,R2),=H'10'        TEST PARM COUNT FIELD AND USE
         BNE   ADJUST                  DEFAULT IF PARM OMITTED/INVALID
         CLC   2(8,R2),=C'LINECNT='  TEST PARM VALUE FIELD AND
         BNE   ADJUST                  USE DEFAULT IF NOT VALID
         SPACE 1
         CLI   10(R2),C'3'         TEST FOR
         BL    ADJUST
         CLI   10(R2),C'9'           LINECNT VALUES
         BH    ADJUST
         CLI   11(R2),C'0'             BETWEEN 30 AND 99 AND
         BL    ADJUST
         CLI   11(R2),C'9'               USE DEFAULT IF NOT VALID
         BH    ADJUST
         PACK  MAXLCNT,10(2,R2)    PARM VALUE GOOD -- USE IT
         SPACE
ADJUST   SP    MAXLCNT,=P'3'       ADJUST FOR FIRST THREE PRINT LINES
         MVC   MAXSCNT,MAXLCNT     MULTIPLY (MAX.LINES.PER.PAGE - 3)
         AP    MAXSCNT,MAXSCNT                   BY 2 SEGMENTS PER LINE
         SP    MAXSCNT,=P'3'       OBTAIN 2 * (MAX.LINES - 4) - 1
*                                    (MAX SEGMENTS PER PAGE MINUS ONE)
         MVI   TRTTABLE-1,4
         MVC   READER,RDRDCB           START MOVING
         MVC   PRINTER,PRTDCB            PROTOTYPES TO
         MVC   CATALOG,CTLGDCB             WORKING DSECT
         MVC   DCBLIST,DCBLST
         MVC   LINECNT(2*2),PZEROS+4   RESET LINECNT & PAGECNT TO P'0'
         MVC   OPERAND,BLANKS
         MVC   OPERATN(3*8),BLANKS     CLEAR OPERATN, TIME & DATE
         MVI   PRTCODE,2
         MVC   OPENLIST(2*4),OPENCLOS  MOVE OPEN AND CLOSE LISTS
         LA    R0,BUFFERS
         ST    R0,JFCBXLST
         MVI   JFCBXLST,X'87'
         LA    R0,JFCBXLST
         ST    R0,FULLWORD
         MVC   CATEXLST(3),FULLWORD+1
         MVC   CATDECB,CTLGDECB        (END OF PROTOTYPE MOVES)
         SPACE
         OPEN  (PRINTER,,READER),MF=(E,DCBLIST)
         TM    PRTOFLGS,X'10'      TEST PRINTER DCB OPEN FLAGS
         BO    PRTOPEND            BRANCH IF DCB OPENED SUCCESSFULLY
         ABEND 20
         SPACE 1
PRTOPEND TM    RDROFLGS,X'10'      TEST READER DCB OPEN FLAGS
         BO    RDROPEND            BRANCH IF DCB OPENED SUCCESSFULLY
         MVI   RTRNCODE,4
         LA    R1,MSG02-1          POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN        GO PRINT THE MESSAGE
         B     ENDJOB
         SPACE
RDROPEND MVI   RTRNCODE,0
         LA    R4,JOBNADDR                                      PES0178
         EXTRACT (R4),'S',FIELDS=TIOT                           PES0178
         L     R5,JOBNADDR                                      PES0178
         MVC   LCBUSRJB,0(R5)                                   PES0178
         SPACE
         TIME
         STM   R0,R1,DBLWORD
         MVC   TIME(5),TIMEPTRN          MOVE X'2120',C':',X'2020'
         ED    TIME-1(6),DBLWORD         EDIT IN HOURS & MINUTES
         MVC   DATE+3(5),DATEPTRN        MOVE X'2021',C'-',X'2020'
         ED    DATE+3(5),DBLWORD+4       EDIT IN ZEROS & YEAR
         CP    DBLWORD+6(2),CALENDAR+4   BRANCH IF DATE IS IN
         BL    DATEINIT                    JAN. OR FEB. (EXC. FEB. 29)
         MVI   FULLWORD+2,X'0C'          MOVE YEAR TO
         MVO   FULLWORD(3),DBLWORD+5(1)               FULLWORD(3)
         DP    FULLWORD(3),=P'4'         DIVIDE TO LEARN TYPE OF YEAR
         CLI   FULLWORD+2,X'0C'          COMPARE REMAINDER WITH P'0'
         BE    DATEINIT                  BRANCH IF A LEAP YEAR
         AP    DBLWORD+6(2),=P'1'        IF NOT, INCREMENT DATE
         SPACE
DATEINIT LA    R2,CALENDAR+12      POINT TO TABLE ENTRY FOR JULY
         LA    R3,2                LOAD LENGTH OF ONE TABLE ENTRY
         EX    0,DATECMPR          CP  DBLWORD+6(2),0(2,R2)
         BNH   DATELOOP            BRANCH IF DATE IS IN JAN.-JUNE
         LA    R2,CALENDAR+24      POINT TO BYTE FOLLOWING DEC. ENTRY
         SPACE
DATELOOP SR    R2,R3                 DECREMENT TO PRECEDING TABLE ENTRY
DATECMPR CP    DBLWORD+6(2),0(2,R2)  REPEAT LOOP IF DATE NOT GREATER
         BNH   DATELOOP                THAN LAST DATE IN PREVIOUS MONTH
         SPACE
         SP    DBLWORD+6(2),0(2,R2)  COMPUTE DAY OF MONTH
         MVC   DATE+1(4),DATEPTRN+1  MOVE X'21',C'-',X'2020'
         ED    DATE+1(4),DBLWORD+6   EDIT IN DAY OF MONTH
         S     R2,=A(CALENDAR-2)     COMPUTE SEQUENCE
         SRL   R2,1                    NUMBER OF TABLE ENTRY
         CVD   R2,DBLWORD                (EQUALS NUMBER OF MONTH)
         MVC   DATE-1(3),ED3PTRN+2   MOVE X'202120'
         ED    DATE-2(4),DBLWORD+6   EDIT IN NUMBER OF MONTH
         TITLE 'INTELLIGENT CATALOG LISTER -- CONTROL CARD PROCESSING'
* * * * *    C O N T R O L   C A R D   P R O C E S S I N G    * * * * *
         SPACE
NEXTCARD GET   READER                  GET NEXT PROGRAM CONTROL CARD
         LR    R3,R1                   SAVE CARD ADDRESS
         MVC   LINECNT(2*2),PZEROS+4   RESET LINECNT & PAGECNT TO P'0'
         MVC   OPERAND,BLANKS
         MVC   OPERATN,BLANKS
         MVI   PRTCODE,2               SET UP TO PRT HEADING OR ERR MSG
         SPACE
         SR    R2,R2               INIT R2 FOR BRANCH DISPLACEMENTS
         XC    TRTTABLE,TRTTABLE
         MVI   TRTTABLE+C' ',8
         TRT   0(9,R1),TRTTABLE    SCAN FOR LABEL DELIMITER (1ST BLANK)
         BZ    CARDERR
         SPACE
         MVC   TRTTABLE,TRTTABLE-1   SET TRTTABLE TO 256X'4'
         MVI   TRTTABLE+C' ',0
         MVI   TRTTABLE+C'L',8
         LA    R1,1(R1)              POINT TO FIRST UNSCANNED BYTE
         LA    R4,63(R3)             PT TO LAST BYTE TO SCAN (COL 64)
         SR    R4,R1                 COMPUTE MACH LANG LENGTH TO SCAN
         EX    R4,SCANCARD           SCAN FOR OPERATION FIELD
         BZ    CARDERR
         B     *(R2)
         B     CARDERR
*        B     CHKOPRTN
         SPACE
CHKOPRTN CLC   1(3,R1),HEADING+2   CLC  0(4,R1),=C'LIST'
         BNE   CARDERR
         MVC   OPERATN,0(R1)
         MVI   OPCODE,0
         CLC   4(5,R1),=C'USED '   CLC  0(9,R1),=C'LISTUSED '
         BE    FNDOPRND
         MVI   OPCODE,4
         CLC   4(5,R1),=C'DUMP '   CLC  0(9,R1),=C'LISTDUMP '
         BE    FNDOPRND
         MVI   OPCODE,8
         CLC   4(5,R1),HEADING+5   CLC  0(9,R1),=C'LISTCTLG '
         BE    FNDOPRND
         MVI   OPCODE,12
         CLC   4(5,R1),=C'FORM '   CLC  0(9,R1),=C'LISTFORM '
         BNE   CARDERR
         SPACE 1
FNDOPRND EQU   *                                                PES0178
*        CLI   LCBUSRJB,C'#'                                    SSJDM
*        BE    FNDOPRNE                                         SSJDM
         CLC   LCBUSRJB(2),=C'SS'    IS IT SYSTEMS              SSJDM
         BE    FNDOPRNE                                         PES0178
         CLI   OPCODE,X'08'                                     PES0178
         BNE   BLOWOFF                                          PES0178
FNDOPRNE EQU   *                                                PES0178
         MVI   TRTTABLE+C'L',4                                  PES0178
         MVI   TRTTABLE+C'V',8
         MVI   TRTTABLE+C',',12
         LA    R1,9(R1)            POINT TO FIRST UNSCANNED BYTE
         LA    R4,70(R3)           POINT TO LAST BYTE TO SCAN (COL 71)
         SR    R4,R1               COMPUTE MACH LANG LENGTH TO SCAN
         BM    LOCSYSRS            BRANCH IF NOTHING LEFT TO SCAN
         EX    R4,SCANCARD         SCAN FOR OPERAND FIELD
         BZ    LOCSYSRS            IF OMITTED, GO LOCATE SYSRES VOLUME
         B     *(R2)
         B     CARDERR
         B     CHKOPRND
*        B     COMMA
         SPACE
COMMA    CLI   1(R1),C' '          IF COMMA IS FOLLOWED BY A BLANK,
         BE    LOCSYSRS              OPERAND IS OMITTED--GO FIND SYSRES
         B     CARDERR
         SPACE
CHKOPRND CLC   1(3,R1),VOLSYSRS+1  CLC  0(4,R1),=C'VOL='
         BNE   CARDERR
         LR    R5,R1               SAVE OPERAND ADDRESS
         XC    TRTTABLE,TRTTABLE
         MVI   TRTTABLE+C'=',8
         TRT   4(7,R1),TRTTABLE    SCAN FOR DEVICE-SERIAL SEPARATOR (=)
         BZ    CARDERR
         MVI   TRTTABLE+C'=',0
         MVI   TRTTABLE+C' ',8
         LA    R6,1(R1)            POINT TO VOLUME IDENTIFIER
         LA    R1,2(R1)            POINT TO FIRST BYTE TO SCAN
         LA    R4,71(R3)           POINT TO LAST BYTE TO SCAN (COL 72)
         SR    R4,R1               COMPUTE MACH LANG LENGTH TO SCAN
         BM    CARDERR             BRANCH IF NOTHING LEFT TO SCAN
         CH    R4,=H'5'            SCAN A
         BNH   SCNDLMTR                   MAXIMUM OF
         LH    R4,=H'5'                              SIX BYTES
         SPACE
SCNDLMTR EX    R4,SCANCARD         SCAN FOR OPERAND DELIMITER (BLANK)
         BZ    CARDERR
         BCTR  R1,0                POINT R1 & R2 TO
         LR    R2,R1                 END OF VOLUME IDENTIFIER
         SR    R1,R5               COMPUTE MACH LANG LENGTH TO MOVE
         EX    R1,MVOPRND          MVC  OPERAND(0),0(R5)
         SR    R2,R6               COMPUTE MACH LANG LENGTH TO MOVE
         EX    R2,MOVEVOL          MVC  VOLUME(0),0(R6)
       TITLE 'INTELLIGENT CATALOG LISTER -- INITIAL CATALOG PROCESSING'
* * * *   I N I T I A L   C A T A L O G   P R O C E S S I N G   * * * *
         SPACE
FINDTIOT L     R15,X'10'           GET ADDRESS OF
         L     R15,0(R15)                         COMMUN VECTOR TABLE
         L     R15,0(R15)          GET ADDRESS OF TASK COMMUN BLOCK
         L     R15,12(R15)         GET ADDRESS OF TASK I/O TABLE
         LA    R15,24(R15)         POINT TO FIRST DD ENTRY IN TABLE
         SPACE
TIOTLOOP CLI   0(R15),0
         BE    CATDDERR                BRANCH IF TIOT IS EXHAUSTED
         CLI   4(R15),C' '             TEST TIOT DDNAME FIELD
         BE    WRONGDD                 BRANCH IF A CONCATENATED DD
         L     R14,16(R15)             GET ADDR OF UNIT CONTROL BLOCK
*                                        (DESCR OF CELL IN BIN IF 2321)
         CLI   18(R14),X'20'           TEST DEVICE CLASS
         BNE   WRONGDD                 BRANCH IF NOT DIRECT ACCESS
         SPACE
*  NOTE:  HERE THE ORIGINAL CODING CONTAINED THE FOLLOWING TEST, WHICH
*  IS INVALID AS R14 WILL POINT TO THE DESCRIPTION (IN THE UCB) OF THE
*  CELL IN THE BIN IF THE DEVICE IS A 2321:
*
*        CLI   19(R14),5               TEST UNIT TYPE
*        BE    WRONGDD                 BRANCH IF A 2321
*
*  NO SUBSTITUTE HAS BEEN CODED FOR THIS TEST, HOWEVER, AS THE LIKELI-
*  HOOD OF A DD FOR A 2321 GETTING PAST ALL THE OTHER TESTS IN THIS
*  SEQUENCE SEEMS TOO SLIGHT TO WARRANT THE ADDITIONAL OVERHEAD OF A
*  REALLY FOOLPROOF 2321 TEST.
         SPACE
         CLC   28(6,R14),VOLUME        TEST VOLUME IDENTIFIER
         BNE   WRONGDD                 BRANCH IF WRONG VOLUME
         CLC   4(8,R15),=C'STEPLIB '   BEGIN TESTS FOR
         BE    WRONGDD                   VARIOUS UNUSABLE DD NAMES
         CLC   4(8,R15),=C'PGM=*.DD'
         BE    WRONGDD
         CLC   4(3,R15),RDRDDNAM       CLC  4(3,R15),=C'SYS'
         BNE   RIGHTDD
         CLC   7(3,R15),RDRDDNAM+3     CLC  4(6,R15),=C'SYSIN '
         BE    WRONGDD
         CLC   7(5,R15),PRTDDNAM+3     CLC  4(8,R15),=C'SYSPRINT'
         BE    WRONGDD
         CLC   7(5,R15),=C'ABEND'      CLC  4(8,R15),=C'SYSABEND'
         BE    WRONGDD
         CLC   7(5,R15),=C'UDUMP'      CLC  4(8,R15),=C'SYSUDUMP'
         BNE   RIGHTDD
         SPACE
WRONGDD  SR    R14,R14
         IC    R14,0(R15)          INSERT PRESENT DD ENTRY LENGTH
         AR    R15,R14             ADVANCE TO NEXT DD ENTRY
         B     TIOTLOOP
         SPACE 1
RIGHTDD  MVC   CATDDNAM(8),4(R15)  MOVE SELECTED DD NAME TO CATALOG DCB
         MVC   CAMLIST(8),OBTNLST  MOVE PROTOTYPE CTLG MANAGEMENT LIST
         LA    R1,VOLUME
         ST    R1,CAMLIST+8
         LA    R1,BUFFERS
         ST    R1,CAMLIST+12
        OBTAIN CAMLIST             READ IN DATA PORTION OF SYSCTLG DSCB
         LTR   R15,R15
         BNZ   OBTNERR
         CLI   BUFFERS+56,X'FF'    TEST R-BYTE IN LAST-BLOCK POINTER
         BNE   INITERR
         SPACE
        RDJFCB (CATALOG),MF=(E,OPENLIST)
         MVC   BUFFERS(44),CTLGNAME        MOVE DATA SET NAME INTO JFCB
         MVI   BUFFERS+52,8                DO NOT WRITE BACK JFCB
         OPEN  TYPE=J,MF=(E,OPENLIST)
         SPACE
         LA    R1,MSG01-1          POINT TO EXTENTS HEADING LINE
         BAL   R10,PRTROUTN        GO PRINT THE HEADING
         OI    PRTCODE,1
         SPACE 1
         SR    R2,R2               INITIALIZE 1ST RELATIVE TRACK NUMBER
         L     R3,CATDEBAD         GET ADDRESS OF DATA EXTENT BLOCK
         SR    R6,R6               GET NUMBER OF
         IC    R6,16(R3)                         DATA EXTENTS
         LA    R3,32(R3)           POINT TO FIRST DATA EXTENT SECTION
         SR    R4,R4               INITIALIZE EXTENT NUMBER
         SPACE
XTNTLOOP BAL   R10,PRTROUTN                GO GET A PRINT BUFFER
         STC   R4,PRTMSG+3                 STORE & TRANSLATE
         TR    PRTMSG+3(1),HEXTABLE+240      HEX EXTENT NUMBER
         UNPK  PRTMSG+12(9),6(5,R3)        UNPACK & TRANS-
         TR    PRTMSG+12(8),HEXTABLE         LATE HEX STARTING CCHH
         MVI   PRTMSG+20,C'-'
         UNPK  PRTMSG+21(9),10(5,R3)       UNPACK & TRANS-
         TR    PRTMSG+21(8),HEXTABLE         LATE HEX ENDING CCHH
         MVI   PRTMSG+29,C' '
         UNPK  PRTMSG+36(5),14(3,R3)       UNPACK & TRANSLATE HEX
         TR    PRTMSG+36(4),HEXTABLE         NUMBER OF TRACKS IN EXTENT
         MVI   PRTMSG+40,C' '
         ST    R2,FULLWORD
         UNPK  PRTMSG+47(5),FULLWORD+2(3)  UNPACK & TRANSLATE HEX
         TR    PRTMSG+47(4),HEXTABLE         FIRST REL TRACK NUMBER
         MVI   PRTMSG+51,C' '
         MVI   PRTMSG+65,C'-'              MARK HEX-DEC SEPARATION
         CVD   R4,DBLWORD
         MVC   PRTMSG+77(3),ED3PTRN+2      MOVE X'202120'
         ED    PRTMSG+76(4),DBLWORD+6      EDIT IN DEC EXTENT NUMBER
         LH    R5,6(R3)                    PICK UP STARTING CC
         MH    R5,=H'1000'                 SHIFT DEC NMBR LEFT 3 PLACES
         AH    R5,8(R3)                    ADD IN STARTING HH
         CVD   R5,DBLWORD                  CONVERT IT ALL TO DECIMAL
         MVC   PRTMSG+88(8),CCHHPTRN       MOVE X'2020212022202120'
         ED    PRTMSG+87(9),DBLWORD+4      EDIT IN DEC STARTING CCHH
         LH    R5,10(R3)                   PICK UP ENDING CC
         MH    R5,=H'1000'                 SHIFT DEC NMBR LEFT 3 PLACES
         AH    R5,12(R3)                   ADD IN ENDING HH
         CVD   R5,DBLWORD                  CONVERT IT ALL TO DECIMAL
         MVC   PRTMSG+97(8),CCHHPTRN       MOVE X'2020212022202120'
         ED    PRTMSG+96(9),DBLWORD+4      EDIT IN DEC ENDING CCHH
         MVI   PRTMSG+96,C'-'              COMPLETE THE EDIT PROCESS
         LH    R0,14(R3)                   GET NUMBER OF
         CVD   R0,DBLWORD                    TRACKS IN EXTENT
         MVC   PRTMSG+111(5),ED5PTRN       MOVE X'2020202120'
         ED    PRTMSG+110(6),DBLWORD+5     EDIT IN DEC NMBR OF TRKS
         CVD   R2,DBLWORD
         MVC   PRTMSG+122(5),ED5PTRN       MOVE X'2020202120'
         ED    PRTMSG+121(6),DBLWORD+5     EDIT IN DEC 1ST REL TRK NMBR
         AR    R2,R0                       COMPUTE NEW 1ST REL TRK NMBR
         LA    R3,16(R3)                   INCREMENT EXTENT SECTION PTR
         LA    R4,1(R4)                    INCREMENT EXTENT NUMBER
         BCT   R6,XTNTLOOP                 REPEAT FOR REMAINING EXTENTS
         SPACE 1
         MVC   CATBLKS(2*3),PZEROS           RESET CATBLKS & BLKSUSED
         LA    R2,BUFFERS
         LA    R3,264(R2)
         STM   R2,R3,CATBUFRS
         READ  CATDECB,SF,CATALOG,(R2),MF=E  READ FIRST CATALOG BLOCK
         BAL   R10,READSEQ                   WAIT, THEN START NEXT
*                                              READ AND LOAD R3 & R4
         SPACE
         CH    R4,=H'256'                  TEST BYTE COUNT
         BH    VICERR
         CH    R4,=H'24'                   BRANCH IF BLOCK TOO SHORT
         BL    VICERR                        FOR COUNT PLUS V I C ENTRY
         CLI   CATTYPE,5
         BNE   VICERR
         CLC   CATNAME,=XL8'1'
         BNE   VICERR
         OI    PRTCODE,1
         BAL   R10,PRTROUTN                GO GET A PRINT BUFFER
         MVC   PRTMSG(27),=C'TTR OF LAST SYSCTLG BLOCK ='
         UNPK  PRTMSG+28(7),CATDATA(4)     UNPACK & TRANSLATE TTR
         TR    PRTMSG+28(6),HEXTABLE         OF LAST SYSCTLG BLOCK
         MVC   PRTMSG+34(31),=C' -- TTR OF FIRST UNUSED BLOCK ='
         UNPK  PRTMSG+66(7),CATDATA+4(4)   UNPACK & TRANSLATE TTR
         TR    PRTMSG+66(6),HEXTABLE         OF FIRST UNUSED BLOCK
         MVC   PRTMSG+72(6),=C' (HEX)'
         SPACE
FINDPROC SR    R15,R15
         IC    R15,OPCODE
         B     *+4(R15)
         B     LISTUSED
         B     LISTDUMP
         B     LISTCTL
*        B     LISTFORM
      TITLE 'INTELLIGENT CATALOG LISTER -- LISTFORM PROCESSING ROUTINE'
* * *    L I S T F O R M   P R O C E S S I N G   R O U T I N E    * * *
         SPACE
LISTFORM OI    PRTCODE,3
         LA    R1,MSG06-1          POINT TO 1ST TYPES HEADING LINE
         BAL   R10,PRTROUTN        GO PRINT THIS HEADING LINE
         OI    PRTCODE,2
         LA    R1,MSG07-1          POINT TO 2ND TYPES HEADING LINE
         BAL   R10,PRTROUTN        GO PRINT THIS HEADING LINE
         OI    PRTCODE,2
         LA    R1,MSG08-1          POINT TO 3RD TYPES HEADING LINE
         BAL   R10,PRTROUTN        GO PRINT THIS HEADING LINE
         OI    PRTCODE,1
         BAL   R10,PRTROUTN        GO GET A PRINT BUFFER
         MVC   PRTMSG,HEADING2+1   MOVE IN LISTFORM HEADING LINE
         OI    PRTCODE,X'81'
         SH    R4,=H'2'            SUBTR COUNT FLD LENGTH FR BYTE COUNT
         LA    R2,FORMSEGS         POINT TO FIRST PRINT LINE SEGMENT
         MVC   0(39,R2),BLANKS     INITIALIZE IT WITH BLANKS
         SPACE
         USING PRTFSEG,R2
         SPACE
VICNTRY  LH    R15,CATDATA+8             LOAD BYTES LEFT IN LAST BLOCK
         CVD   R15,DBLWORD               CONVERT IT TO DECIMAL
         MVC   PRTFNAME+5(3),ED3PTRN+2   MOVE X'202120'
         LA    R1,PRTFNAME+7             POINT TO END OF EDIT PATTERN
         EDMK  PRTFNAME+4(4),DBLWORD+6   EDIT IN BYTES LEFT IN LAST BLK
         MVC   PRTFNAME+5(3),0(R1)       SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFNAME(5),=C'LEFT='     COMPLETE THE EDIT PROCESS
         MVC   PRTFTYPE(3),MSG08+100     MOVE C'VIC'
         UNPK  PRTFTTRZ,CATTTRZ          UNPACK & TRANSLATE TTR
         TR    PRTFTTR,HEXTABLE            OF LAST VOLUME INDEX BLOCK
         MVI   PRTFZ,C' '
         LA    R5,22                     LOAD LENGTH OF V I C ENTRY
         B     NEXTNTRY                  GO PROCESS THE NEXT ENTRY
         SPACE 1
PRTBLOK  BAL   R9,PRTBLOCK         GO PRINT THE BLOCK JUST PROCESSED
         SPACE
NEXTBLOK BAL   R10,READSEQ         GO READ NEXT BLOCK AND LOAD R3 & R4
         LA    R2,FORMSEGS         POINT TO FIRST PRINT LINE SEGMENT
         MVC   0(39,R2),BLANKS     INITIALIZE IT WITH BLANKS
         CH    R4,=H'256'          TEST BYTE COUNT (VOL COUNT IF VCB)
         BH    FORMERR
         CH    R4,=H'14'           BRANCH IF COUNT FIELD IS
         BL    VCBTEST2              TOO SMALL TO BE A BYTE COUNT
         LR    R15,R3              COMPUTE WHERE
         AR    R15,R4                THE INDEX LINK
         SH    R15,=H'14'              ENTRY SHOULD BE
         USING CATSCTN,R15
         CLC   CATNAME,FFBYTES     CHECK THAT IT REALLY
         BNE   VCBTEST
         CLI   CATTYPE,0             IS AN INDEX LINK ENTRY
         BNE   VCBTEST
         DROP  R15
         SH    R4,=H'2'            SUBTR COUNT FLD LENGTH FR BYTE COUNT
         CLI   CATTYPE,3
         BNE   FINDTYPE
         CLC   CATNAME,=XL8'1'     BRANCH IF OLD-STYLE
         BNE   OCVPNTRY              CVOL POINTER ENTRY
         SPACE
ICNTRY   LH    R15,CATDATA+4               LOAD BYTES LEFT IN LAST BLK
         CVD   R15,DBLWORD                 CONVERT IT TO DECIMAL
         MVC   PRTFNAME+5(3),ED3PTRN+2     MOVE X'202120'
         LA    R1,PRTFNAME+7               POINT TO END OF EDIT PATTERN
         EDMK  PRTFNAME+4(4),DBLWORD+6     EDIT IN BYTES LEFT LAST BLK
         MVC   PRTFNAME+5(3),0(R1)         SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFNAME(5),=C'LEFT='       COMPLETE THE EDIT PROCESS
         MVC   PRTFTYPE(2),MSG08+45        MOVE C'IC'
         UNPK  PRTFTTRZ,CATTTRZ            UNPACK & TRANSLATE TTR
         TR    PRTFTTR,HEXTABLE              OF LAST BLOCK IN INDEX
         MVI   PRTFZ,C' '
         SR    R0,R0
         IC    R0,CATDATA+3                INSERT ALIAS COUNT
         CVD   R0,DBLWORD                  CONVERT IT TO DECIMAL
         MVC   PRTFDATA+9(3),ED3PTRN+2     MOVE X'202120'
         LA    R1,PRTFDATA+11              POINT TO END OF EDIT PATTERN
         EDMK  PRTFDATA+8(4),DBLWORD+6     EDIT IN ALIAS COUNT
         MVC   PRTFDATA+9(3),0(R1)         SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFDATA(9),=C'ALIASCNT='   COMPLETE THE EDIT PROCESS
         LA    R5,18                       LOAD LENGTH OF I C ENTRY
         SPACE
NEXTNTRY SR    R4,R5               COMPUTE BYTES IN BLOCK NOT PROCESSED
         BZ    PRTBLOK             GO PRINT THE BLOCK IF THERE ARE NONE
         AR    R3,R5               ADVANCE TO NEXT CATALOG ENTRY
         LA    R2,39(R2)           ADVANCE TO NEXT PRINT LINE SEGMENT
         MVC   0(39,R2),BLANKS     INITIALIZE IT WITH BLANKS
         SPACE 1
TESTCNT  CH    R4,=H'12'           BRANCH IF NOT ENOUGH BYTES LEFT
         BL    FORMERR               IN BLOCK FOR A VALID CATALOG ENTRY
         SPACE
FINDTYPE SR    R5,R5
         IC    R5,CATTYPE          INSERT CODED CATALOG ENTRY TYPE
         CLI   CATTYPE,5
         BH    DSPNTRY             DATA SET POINTER ENTRY
         SLL   R5,2
         B     *+4(R5)
         B     ILIPNTRY            INDEX LINK (OR INDEX POINTER) ENTRY
         B     VCBPNTRY            VOLUME CONTROL BLOCK POINTER ENTRY
         B     GIPNTRY             GENERATION INDEX POINTER ENTRY
         B     OCVPNTRY            OLD-STYLE CVOL POINTER ENTRY
         B     ANTRY               ALIAS ENTRY
*        B     NCVPNTRY            NEW-STYLE CVOL POINTER ENTRY
         SPACE 2
NCVPNTRY MVC   PRTFNAME,CATNAME      MOVE CVOL POINTER NAME
         MVC   PRTFTYPE(3),MSG07+8   MOVE C'CVP'
         MVC   FULLWORD,CATDATA      MOVE DEVICE TYPE
         BAL   R10,DEVROUTN          GO INTERPRET DEVICE TYPE
         MVC   PRTFDEV,4(R8)         MOVE INTERPRETED DEVICE TYPE
         MVC   PRTFVOL,CATDATA+4     MOVE VOLUME IDENTIFIER
         LA    R5,22                 LOAD LENGTH OF NEW C V P ENTRY
         B     NEXTNTRY              GO PROCESS THE NEXT ENTRY
         SPACE 2
OCVPNTRY MVC   PRTFNAME,CATNAME      MOVE CVOL POINTER NAME
         MVC   PRTFTYPE(3),MSG07+8   MOVE C'CVP'
         MVC   PRTFVOL,CATDATA       MOVE VOLUME IDENTIFIER
         LA    R5,18                 LOAD LENGTH OF OLD C V P ENTRY
         B     NEXTNTRY              GO PROCESS THE NEXT ENTRY
         SPACE 2
ILIPNTRY MVC   PRTFTYPE(2),MSG06+72  MOVE C'IL'
         CLC   CATNAME,FFBYTES
         BE    UNPKTTR               BRANCH IF INDEX LINK ENTRY
         MVC   PRTFNAME,CATNAME      MOVE NAME IF INDEX POINTER ENTRY
         MVI   PRTFTYPE+1,C'P'       MVC  PRTFTYPE(2),=C'IP'
         SPACE
UNPKTTR  UNPK  PRTFTTRZ,CATTTRZ    UNPACK & TRANSLATE TTR
         TR    PRTFTTR,HEXTABLE      BEING LINKED (OR POINTED) TO
         MVI   PRTFZ,C' '
         LA    R5,12               LOAD LENGTH OF I L (OR I P) ENTRY
         B     NEXTNTRY            GO PROCESS THE NEXT ENTRY
         SPACE 1
VCBPNTRY MVC   PRTFNAME,CATNAME    MOVE LOWEST-LEVEL DATA SET NAME
         MVC   PRTFTYPE,MSG06+99   MOVE C'VCBP'
         UNPK  PRTFTTRZ,CATTTRZ    UNPACK & TRANSLATE
         TR    PRTFTTR,HEXTABLE      TTR BEING POINTED TO
         MVI   PRTFZ,C' '
         LA    R5,14               LOAD LENGTH OF V C B P ENTRY
         B     NEXTNTRY            GO PROCESS THE NEXT ENTRY
         SPACE 2
ANTRY    MVC   PRTFNAME,CATNAME            MOVE ALIAS NAME
         MVI   PRTFTYPE,C'A'
         UNPK  PRTFTTRZ,CATTTRZ            UNPACK & TRANSLATE
         TR    PRTFTTR,HEXTABLE              TTR BEING POINTED TO
         MVI   PRTFZ,C' '
         MVC   PRTFDATA(9),=C'TRUENAME='
         MVC   PRTFDATA+9(8),CATDATA       MOVE ALIAS'S TRUE NAME
         LA    R5,20                       LOAD LENGTH OF ALIAS ENTRY
         B     NEXTNTRY                    GO PROCESS THE NEXT ENTRY
         SPACE 2
GIPNTRY  MVC   PRTFNAME,CATNAME          MOVE GENERATION INDEX NAME
         MVC   PRTFTYPE(3),MSG06+44      MOVE C'GIP'
         UNPK  PRTFTTRZ,CATTTRZ          UNPACK & TRANSLATE
         TR    PRTFTTR,HEXTABLE            TTR BEING POINTED TO
         MVI   PRTFZ,C' '
         SR    R0,R0
         IC    R0,CATDATA+1              INSERT MAXIMUM GENERATN COUNT
         CVD   R0,DBLWORD                CONVERT IT TO DECIMAL
         MVC   PRTFDATA+3(3),ED3PTRN+2   MOVE X'202120'
         LA    R1,PRTFDATA+5             POINT TO END OF EDIT PATTERN
         EDMK  PRTFDATA+2(4),DBLWORD+6   EDIT IN MAXIMUM GENERATN COUNT
         MVC   PRTFDATA+3(3),0(R1)       SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFDATA(3),=C'MX='       COMPLETE THE EDIT PROCESS
         LH    R0,CATDATA+2              LOAD CURRENT GENERATION COUNT
         CVD   R0,DBLWORD                CONVERT IT TO DECIMAL
         MVC   PRTFDATA+10(3),ED3PTRN+2  MOVE X'202120'
         LA    R1,PRTFDATA+12            POINT TO END OF EDIT PATTERN
         EDMK  PRTFDATA+9(4),DBLWORD+6   EDIT IN CURRENT GENERATN COUNT
         MVC   PRTFDATA+10(3),0(R1)      SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFDATA+7(3),=C'CR='     COMPLETE THE EDIT PROCESS
         TM    CATDATA,3                 TEST OPTION FLAGS BITS
         BNM   GIPTEST2                  BR IF NEITHER OR BOTH ARE SET
         TM    CATDATA,2                 TEST DELETE OPTION BIT
         BZ    GIPMPTY
         MVC   PRTFDATA+14(3),=C'DEL'    INDICATE DELETE OPTION BIT SET
         B     GIPDONE
         SPACE
GIPMPTY  MVC   PRTFDATA+14(3),=C'EMP'  INDICATE EMPTY OPTION BIT SET
         B     GIPDONE
         SPACE 1
GIPTEST2 BZ    GIPDONE                 BRANCH IF NO OPTION BITS ARE SET
         MVC   PRTFDATA+14(3),=C'D+E'  INDICATE DELETE & EMPTY BITS SET
         SPACE
GIPDONE  LA    R5,16               LOAD LENGTH OF G I P ENTRY
         B     NEXTNTRY            GO PROCESS THE NEXT ENTRY
         SPACE 2
DSPNTRY  LR    R15,R5                  GET CATTYPE INTO R15
         SR    R14,R14
         D     R14,=F'6'
         CH    R14,=H'1'               BRANCH IF REMAINDER NOT 1
         BNE   FORMERR                   (CATTYPE NOT 7, 13, 19, ETC.)
         CH    R15,CATDATA             BRANCH IF QUOTIENT DOES
         BNE   FORMERR                   NOT AGREE WITH VOLUME COUNT
         LA    R5,12(R5,R5)            COMPUTE LENGTH OF D S P ENTRY
         CR    R5,R4
         BH    FORMERR
         MVC   PRTFNAME,CATNAME        MOVE LOWEST-LEVEL DATA SET NAME
         CLI   PRTFNAME+1,X'0F'        BRANCH UNLESS NAME OF
         BH    MOVETYPE                  A GENERATION DATA SET
         XC    PRTFNAME+1(4),FFBYTES   MAKE GENERATION NUMBER READABLE
         SPACE
MOVETYPE MVC   PRTFTYPE(3),MSG08+8   MOVE C'DSP'
         LH    R6,CATDATA            PICK UP VOLUME COUNT
         LA    R1,CATDATA+2          INIT VOLUME-LIST BLOCK POINTER
         LA    R0,NEXTNTRY           LOAD DSPLOOP EXIT ADDRESS
         B     DSPLOOP2
         SPACE
DSPLOOP  LA    R2,39(R2)           ADVANCE TO NEXT PRINT LINE SEGMENT
         MVC   0(39,R2),BLANKS     INITIALIZE IT WITH BLANKS
         LA    R1,12(R1)           INCREMENT VOLUME-LIST BLOCK POINTER
         SPACE
DSPLOOP2 MVC   FULLWORD,0(R1)      MOVE DEVICE TYPE
         BAL   R10,DEVROUTN        GO INTERPRET DEVICE TYPE
         MVC   PRTFDEV,4(R8)       MOVE INTERPRETED DEVICE TYPE
         MVC   PRTFVOL,4(R1)       MOVE VOLUME IDENTIFIER
         CLI   2(R1),X'80'         TEST DEVICE CLASS
         BNE   DSPLOOP3            BRANCH IF NOT MAG TAPE
         LH    R7,10(R1)           LOAD FILE SEQUENCE NUMBER
         MH    R7,=H'10'           CONVERT TO A DECIMAL NUMBER
         CVD   R7,DBLWORD            PROPERLY ALIGNED FOR EDITING
         MVC   PRTFSEQ,ED5PTRN+1   MOVE X'20202120'
         ED    PRTFXSEQ,DBLWORD+5  EDIT IN FILE SEQUENCE NUMBER
         SPACE
DSPLOOP3 BCT   R6,DSPLOOP          REPEAT LOOP IF THERE ARE MORE VOLS
         SPACE
         LR    R10,R0              BR TO NEXTNTRY FOR A DSP ENTRY
         BR    R10                   OR TO NEXTVCB FOR A VOL CTL BLK
         SPACE 1
VCBTEST  CH    R4,=H'20'           BRANCH UNLESS VOLUME COUNT
         BNH   VCBTEST2              EXCEEDS MAXIMUM FOR ONE VCB
         CLC   240(10,R3),ZEROS    TEST BYTES FOLLOWING LAST VOL IN VCB
         BNE   FORMERR
         CLC   250(3,R3),ZEROS     TEST TTR OF NEXT VCB
         BE    FORMERR             BRANCH IF THERE IS NONE
         CLI   253(R3),0
         BE    VCBVOLCT
         B     FORMERR
         SPACE
VCBTEST2 LR    R5,R4               POINT TO BYTE
         MH    R5,=H'12'             FOLLOWING LAST
         AR    R5,R3                   VOLUME IN VCB
         CLC   0(14,R5),ZEROS
         BNE   FORMERR
         SPACE
VCBVOLCT CVD   R4,DBLWORD
         MVC   PRTFNAME+5(3),ED3PTRN+2   MOVE X'202120'
         LA    R1,PRTFNAME+7             POINT TO END OF EDIT PATTERN
         EDMK  PRTFNAME+4(4),DBLWORD+6   EDIT IN VOLUME COUNT
         MVC   PRTFNAME+5(3),0(R1)       SHIFT LEFT TO REMOVE BLANKS
         MVC   PRTFNAME(5),=C'VOLS='     COMPLETE THE EDIT PROCESS
         MVC   PRTFTYPE(3),MSG08+71      MOVE C'VCB'
         LR    R6,R4                     COPY VOLUME COUNT INTO R6
         CH    R6,=H'20'                 LIMIT IT TO
         BNH   VCBINIT                     MAXIMUM VOLUMES FOR
         LH    R6,=H'20'                     ONE VOLUME CONTROL BLOCK
         SPACE
VCBINIT  LR    R1,R3               INITIALIZE VOLUME-LIST BLOCK POINTER
         LA    R0,NEXTVCB          LOAD DSPLOOP EXIT ADDRESS
         B     DSPLOOP2            GO LIST ALL VOLUME DATA, THEN RETURN
         SPACE
NEXTVCB  LA    R2,39(R2)                 ADVANCE TO NEXT PRINT SEGMENT
         MVC   0(39,R2),BLANKS           INITIALIZE IT WITH BLANKS
         MVC   PRTFSEG+6(17),=C'TTR OF NEXT VCB ='
         UNPK  PRTFSEG+24(7),250(4,R3)   UNPACK & TRANS-
         TR    PRTFSEG+24(6),HEXTABLE      LATE TTR OF NEXT VCB
         MVI   PRTFSEG+30,C' '
         B     PRTBLOK                   GO PRINT VCB JUST PROCESSED
         SPACE
         DROP  R2
      TITLE 'INTELLIGENT CATALOG LISTER -- LISTDUMP PROCESSING ROUTINE'
* * *    L I S T D U M P   P R O C E S S I N G   R O U T I N E    * * *
         SPACE
DUMPLOOP BAL   R10,READSEQ         GO READ THE NEXT CATALOG BLOCK
         SPACE
LISTDUMP OI    PRTCODE,1
         BAL   R10,PRTROUTN            GO GET A PRINT BUFFER
         MVC   PRTMSG(4),MSG11+45      MOVE C'TTR='
         UNPK  PRTMSG+4(7),TTRZ        UNPACK & TRANSLATE
         TR    PRTMSG+4(6),HEXTABLE      TTR OF CURRENT BLOCK
         MVC   PRTMSG+10(10),MSG12+75  MOVE C' -- CCHHR='
         UNPK  PRTMSG+20(11),CCHHRZ    UNPACK & TRANSLATE
         TR    PRTMSG+20(10),HEXTABLE    CCHHR OF CURRENT BLOCK
         MVI   PRTMSG+30,C' '
         BAL   R10,DMPROUTN            GO DUMP THE CURRENT BLOCK
         B     DUMPLOOP                GO PROCESS THE NEXT BLOCK
         SPACE 3
* * * * * * * * *  DUMP - PRODUCING  ERROR  ROUTINES  * * * * * * * * *
         SPACE
         USING PRTFSEG,R2
         SPACE
FORMERR  MVC   PRTFSEG(15),ERRORMSG  MOVE C'**** ERROR ****'
         BAL   R9,PRTBLOCK           GO PRINT BLOCK UP TO ERROR POINT
         SPACE
         DROP  R2
         SPACE
         MVI   RTRNCODE,8
         OI    PRTCODE,3
         LA    R1,MSG11-1              POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN            GO GET PRINT BUFFER WITH MESSAGE
         UNPK  PRTMSG+49(7),TTRZ       UNPACK & TRANSLATE
         TR    PRTMSG+49(6),HEXTABLE     TTR OF ERROR BLOCK
         MVC   PRTMSG+55(10),MSG12+75  MOVE C' -- CCHHR='
         UNPK  PRTMSG+65(11),CCHHRZ    UNPACK & TRANSLATE
         TR    PRTMSG+65(10),HEXTABLE    CCHHR OF ERROR BLOCK
         MVI   PRTMSG+75,C' '
         BAL   R10,DMPROUTN            GO DUMP THE ERROR BLOCK
         B     NEXTBLOK                GO PROCESS THE NEXT BLOCK
         SPACE 3
VICERR   MVI   RTRNCODE,8
         OI    PRTCODE,3
         LA    R1,MSG12-1              POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN            GO GET PRINT BUFFER WITH MESSAGE
         UNPK  PRTMSG+85(11),CCHHRZ    UNPACK & TRANSLATE
         TR    PRTMSG+85(10),HEXTABLE    CCHHR OF ERROR BLOCK
         MVI   PRTMSG+95,C' '
         BAL   R10,DMPROUTN            GO DUMP THE ERROR BLOCK
         B     NEXTCARD                GO PROCESS THE NEXT CONTROL CARD
      TITLE 'INTELLIGENT CATALOG LISTER -- LISTCTLG PROCESSING ROUTINE'
* * *    L I S T C T L G   P R O C E S S I N G   R O U T I N E    * * *
         SPACE
LISTCTL  MVI   INDXFLAG,0            RESET EMPTY-INDEX FLAG
         MVC   DSNAME(44+8),BLANKS   CLEAR DSNAME FIELD & SPARE BYTES
         MVI   ZCODE,0               SET TTR Z-CODE FOR POINT MACRO
         XC    TRTTABLE,TRTTABLE
         MVI   TRTTABLE+C' ',8
         SPACE
       GETMAIN R,LV=22*264,SP=1          GET STORAGE FOR CATALOG BLOCKS
         MVC   0(132,R1),BUFFERS         MOVE FIRST CATALOG BLOCK
         MVC   132(132,R1),BUFFERS+132     FROM BUFFER TO STORAGE AREA
         LA    R0,32(R1)                 INIT 1ST CATALOG ENTRY PTR
         ST    R0,ENTRYPTR                 SO AS TO BYPASS V I C ENTRY
         LA    R0,DSNAME                 SET 1ST DSNAME
         ST    R0,DSNAMPTR                              FIELD POINTER
         LA    R2,STRGPTR                POINT TO 1ST STORAGE AREA PTR
         LA    R6,22
         SPACE
INITLOOP ST    R1,0(R2)            INITIALIZE STORAGE AREA POINTER
         LA    R1,264(R1)          INCREMENT STORAGE AREA ADDRESS
         LA    R2,12(R2)           INCREMENT POINTER ADDRESS
         BCT   R6,INITLOOP         DO THIS FOR ALL 22 POINTERS
         SPACE
         OI    PRTCODE,1
         BAL   R10,PRTROUTN        GO GET A PRINT BUFFER
         MVC   PRTMSG,HEADING3+1   MOVE IN LISTCTLG HEADING LINE
         OI    PRTCODE,X'41'
         SPACE 1
         ZAP   DBLWORD,MAXLCNT     START WITH MAX LINES
         CVB   R2,DBLWORD            PER PAGE MINUS THREE
         BCTR  R2,0                OBTAIN MAX LINES PER PAGE MINUS FOUR
         SLL   R2,2+6              MULTIPLY BY 4 COLUMNS TIMES 64 BYTES
       GETMAIN R,LV=(R2),SP=2      GET STORAGE FOR PRINT LINE SEGMENTS
         LA    R1,0(R1)            MAKE SURE HIGH-ORDER BYTE IS ZERO
         SRL   R2,1                LOCATE SECOND HALF
         AR    R2,R1                                  OF GOTTEN STORAGE
         STM   R1,R2,FRSTSEGS      SAVE THE TWO FIRST SEGMENT ADDRESSES
         SH    R1,=H'64'           INITIALIZE SEGMENT ADDRESS FOR
         ST    R1,SEGADDR            FIRST BRANCH TO NEXTSEG, AND SAVE
         MVC   SEGCNT,LINECNT      MOVE LINES LEFT ON CURRENT PAGE
         SP    SEGCNT,=P'1'        ALLOW FOR BLANK LINE AFTER HEADING3
         AP    SEGCNT,SEGCNT       MULTIPLY BY 2 SEGMENTS PER LINE
         MVC   UNPRTCNT,PZEROS+6   SET LINES-TO-BE-PRINTED TO P'0'
         SPACE
         CHECK CATDECB             ALLOW SEQ READ-AHEAD TO FINISH
         SR    R4,R4               INITIALIZE CURRENT INDEX LEVEL PTR
         B     GETENTRY            START PROCESSING VOL INDEX ENTRIES
         SPACE
         USING PRTCSEG,R1
         SPACE 1
INDXPTR  L     R1,DSNAMPTR(R4)     LOAD DSNAME FIELD POINTER
         MVC   0(8,R1),CATNAME     MOVE INDEX LEVEL NAME
         CLI   LCBUSRJB,C'#'                                    PES0178
         BE    GO$ON                                            PES0178
         CLC   LCBUSRJB(4),DSNAME                               PES0178
         BNE   NXTENTRY                                         PES0178
GO$ON    EQU   *                                                PES0178
         TRT   1(8,R1),TRTTABLE    SCAN FOR INDEX DELIMITER (BLANK)
         MVI   0(R1),C'.'          CHANGE IT TO A PERIOD
         CLI   DSNAME+43,C' '      BRANCH IF NO SPACE LEFT
         BNE   DSNMERR               FOR A LOWER LEVEL NAME
         MVC   TTR,CATTTR          MOVE TTR OF FIRST LOWER LEVEL BLOCK
         SRL   R5,1                POINT TO NEXT
         LA    R3,12(R5,R3)                      CATALOG ENTRY
         ST    R3,ENTRYPTR(R4)     SAVE POINTER FOR PROCESSING LATER
         SPACE
NXTLEVEL LA    R4,12(R4)           ADVANCE TO NEXT LOWER INDEX LEVEL
         LA    R1,1(R1)            POINT TO BYTE FOLLOWING LAST
         ST    R1,DSNAMPTR(R4)       '.' IN DSNAME FIELD, AND SAVE
         MVI   INDXFLAG,1          INDICATE POSSIBLY EMPTY INDEX
         SPACE
READNEXT BAL   R10,READRNDM        GO READ NEXT BLOCK OF INDEX
         SPACE
GETENTRY L     R3,ENTRYPTR(R4)     GET POINTER TO CATALOG ENTRY
         SPACE
GETTYPE  SR    R5,R5
         IC    R5,CATTYPE          INSERT CODED CATALOG ENTRY TYPE
         SLL   R5,2
         CLI   CATTYPE,5
         BH    DSETPTR             DATA SET POINTER ENTRY
         B     *+4(R5)
         B     INDXLNK             INDEX LINK (OR INDEX POINTER) ENTRY
         B     VCBPTR              VOLUME CONTROL BLOCK POINTER ENTRY
         B     INDXPTR             GENERATION INDEX POINTER ENTRY
         B     OCVOLPTR            OLD-STYLE CVOL PTR (OR I C) ENTRY
         B     ALIAS               ALIAS ENTRY
*        B     NCVOLPTR            NEW-STYLE CVOL PTR (OR V I C) ENTRY
         SPACE 2
NCVOLPTR CLC   CATNAME,=XL8'1'     BRANCH IF VOLUME INDEX
         BE    NXTENTRY              CONTROL ENTRY (SHOULD NOT OCCUR)
         CLI   LCBUSRJB,C'#'                                    PES0178
         BE    GO$ON2                                           PES0178
         CLC   LCBUSRJB(4),CATNAME                              PES0178
         BNE   NXTENTRY                                         PES0178
GO$ON2   EQU   *                                                PES0178
         BAL   R10,NEXTSEG         GO GET A PRINT LINE SEGMENT
         MVC   PRTPANAM,CATNAME    MOVE CVOL POINTER NAME
         MVC   PRTPAMSG(22),=C'CONTROL VOLUME POINTER'
         MVC   FULLWORD,CATDATA    MOVE DEVICE TYPE
         BAL   R10,DEVROUTN        GO INTERPRET DEVICE TYPE
         MVC   PRTDEVTP,4(R8)      MOVE INTERPRETED DEVICE TYPE
         MVC   PRTVOLID,CATDATA+4  MOVE VOLUME IDENTIFIER
         B     NXTENTRY            GO PROCESS THE NEXT ENTRY
         SPACE 1
VCBPTR   CLI   CATNAME+1,X'0F'       BRANCH UNLESS NAME OF
         BH    VCBPTR2                 A GENERATION DATA SET
         XC    CATNAME+1(4),FFBYTES  MAKE GENERATION NUMBER READABLE
         SPACE
VCBPTR2  L     R1,DSNAMPTR(R4)     LOAD DSNAME FIELD POINTER
         MVC   0(8,R1),CATNAME     MOVE LOWEST-LEVEL DATA SET NAME
         CLI   LCBUSRJB,C'#'                                    PES0178
         BE    GO$ON4                                           PES0178
         CLC   LCBUSRJB(4),DSNAME                               PES0178
         BNE   NXTENTRY                                         PES0178
GO$ON4   EQU   *                                                PES0178
         CLI   DSNAME+44,C' '      BRANCH IF FULLY-QUALIFIED
         BNE   DSNMERR               NAME EXCEEDS 44 CHARACTERS
         BAL   R10,NEXTSEG         GO GET A PRINT LINE SEGMENT
         MVC   PRTDSNAM,DSNAME     MOVE DATA SET NAME
         MVI   INDXFLAG,0          RESET EMPTY-INDEX FLAG
         MVC   TTR,CATTTR          MOVE TTR OF FIRST VOL CONTROL BLOCK
         SPACE
VCBLOOP  LA    R2,BUFFERS+264          POINT TO ONLY BUFFER NOT IN USE
         POINT CATALOG,TTRZ
         READ  CATDECB,SF,,(R2),MF=E
         CHECK CATDECB
         MVC   TTR,260(R2)             SAVE TTR OF NEXT VCB (IF ANY)
         LH    R6,8(R2)                PICK UP VOLUME COUNT
         CH    R6,=H'20'               LIMIT IT TO
         BNH   VCBLOOP2                  MAXIMUM VOLUMES FOR
         LH    R6,=H'20'                   ONE VOLUME CONTROL BLOCK
         SPACE
VCBLOOP2 LA    R2,10(R2)           INITIALIZE VOLUME-LIST BLOCK POINTER
         L     R1,SEGADDR          RESTORE ADDR OF CURRENT PRT SEGMENT
         B     VOLLOOP2            GO LIST ALL VOLUME DATA, THEN RETURN
         SPACE
VCBLOOP3 CLC   TTR,ZEROS           TEST FOR ANOTHER VCB
         BE    NXTENTRY            BRANCH IF THERE IS NONE
         BAL   R10,NEXTSEG         GO GET ANOTHER PRINT LINE SEGMENT
         B     VCBLOOP             GO PROCESS THE NEXT VCB
         SPACE 1
OCVOLPTR CLC   CATNAME,=XL8'1'
         BE    NXTENTRY            BRANCH IF INDEX CONTROL ENTRY
         CLI   LCBUSRJB,C'#'                                    PES0178
         BE    GO$ON3                                           PES0178
         CLC   LCBUSRJB(4),CATNAME                              PES0178
         BNE   NXTENTRY                                         PES0178
GO$ON3   EQU   *                                                PES0178
         BAL   R10,NEXTSEG         GO GET A PRINT LINE SEGMENT
         MVC   PRTPANAM,CATNAME    MOVE CVOL POINTER NAME
         MVC   PRTPAMSG(22),=C'CONTROL VOLUME POINTER'
         MVC   PRTVOLID,CATDATA    MOVE VOLUME IDENTIFIER
         B     NXTENTRY            GO PROCESS THE NEXT ENTRY
         SPACE 2
DSETPTR  CLI   CATNAME+1,X'0F'       BRANCH UNLESS NAME OF
         BH    DSETPTR2                A GENERATION DATA SET
         XC    CATNAME+1(4),FFBYTES  MAKE GENERATION NUMBER READABLE
         SPACE
DSETPTR2 L     R1,DSNAMPTR(R4)     LOAD DSNAME FIELD POINTER
         MVC   0(8,R1),CATNAME     MOVE LOWEST-LEVEL DATA SET NAME
         CLI   LCBUSRJB,C'#'                                    PES0178
         BE    GO$ON5                                           PES0178
         CLC   LCBUSRJB(4),DSNAME                               PES0178
         BNE   NXTENTRY                                         PES0178
GO$ON5   EQU   *                                                PES0178
         CLI   DSNAME+44,C' '      BRANCH IF FULLY-QUALIFIED
         BNE   DSNMERR               NAME EXCEEDS 44 CHARACTERS
         BAL   R10,NEXTSEG         GO GET A PRINT LINE SEGMENT
         MVC   PRTDSNAM,DSNAME     MOVE DATA SET NAME
         MVI   INDXFLAG,0          RESET EMPTY-INDEX FLAG
         LH    R6,CATDATA          PICK UP VOLUME COUNT
         LA    R2,CATDATA+2        INITIALIZE VOLUME-LIST BLOCK POINTER
         B     VOLLOOP2
         SPACE
VOLLOOP  BAL   R10,NEXTSEG         GO GET ANOTHER PRINT LINE SEGMENT
         LA    R2,12(R2)           INCREMENT VOLUME-LIST BLOCK POINTER
         SPACE
VOLLOOP2 MVC   FULLWORD,0(R2)      MOVE DEVICE TYPE
         BAL   R10,DEVROUTN        GO INTERPRET DEVICE TYPE
         MVC   PRTDEVTP,4(R8)      MOVE INTERPRETED DEVICE TYPE
         MVC   PRTVOLID,4(R2)      MOVE VOLUME IDENTIFIER
         CLI   2(R2),X'80'         TEST DEVICE CLASS
         BNE   VOLLOOP3            BRANCH IF NOT MAG TAPE
         LH    R7,10(R2)           LOAD FILE SEQUENCE NUMBER
         MH    R7,=H'10'           CONVERT TO A DECIMAL NUMBER
         CVD   R7,DBLWORD            PROPERLY ALIGNED FOR EDITING
         MVC   PRTSEQ,ED5PTRN+1    MOVE X'20202120'
         ED    PRTXSEQ,DBLWORD+5   EDIT IN FILE SEQUENCE NUMBER
         SPACE
VOLLOOP3 BCT   R6,VOLLOOP          REPEAT LOOP IF THERE ARE MORE VOLS
         SPACE
         CLI   CATTYPE,1           RETURN TO VCB PTR ROUTINE IF
         BE    VCBLOOP3              ENTRY TO DSPLOOP WAS FROM THERE
         SPACE
NXTENTRY SRL   R5,1                POINT TO NEXT
         LA    R3,12(R5,R3)                      CATALOG ENTRY
         B     GETTYPE             GO FIND ROUTINE FOR PROCESSING IT
         SPACE 1
ALIAS    BAL   R10,NEXTSEG                 GO GET A PRINT LINE SEGMENT
         MVC   PRTPANAM,CATNAME            MOVE ALIAS NAME
         MVC   PRTPAMSG(9),=C'ALIAS FOR'
         MVC   PRTPAMSG+10(8),CATDATA      MOVE ALIAS'S TRUE NAME
         B     NXTENTRY                    GO PROCESS THE NEXT ENTRY
         SPACE 2
INDXLNK  CLC   CATNAME,FFBYTES
         BNE   INDXPTR             BRANCH IF INDEX POINTER ENTRY
         CLC   CATTTR,ZEROS
         BE    INDXLNK2            BRANCH IF AT END OF INDEX
         MVC   TTR,CATTTR          MOVE TTR OF NEXT INDEX BLOCK
         B     READNEXT            GO READ THAT NEXT BLOCK
         SPACE
INDXLNK2 CLI   INDXFLAG,1
         BNE   INDXLNK3            BRANCH UNLESS INDEX IS EMPTY
         BAL   R10,NEXTSEG         GO GET A PRINT LINE SEGMENT
         MVC   PRTDSNAM,DSNAME
         MVI   INDXFLAG,0          RESET EMPTY-INDEX FLAG
         SPACE
INDXLNK3 L     R15,DSNAMPTR(R4)    LOAD DSNAME FIELD POINTER
         BCTR  R15,0               PT TO '.' BEFORE LOWEST LEVEL NAME
         MVC   0(10,R15),BLANKS
         SH    R4,=H'12'           RETREAT TO NEXT HIGHER INDEX LEVEL
         BNM   GETENTRY            RESUME PROCESSING THAT LEVEL--
*                                    NO BRANCH IF AT END OF VOL INDEX
         SPACE
         USING PRTSCTN,R1          (END OF  USING PRTCSEG,R1)
         SPACE
      FREEMAIN R,SP=1                  FREE STORAGE FOR CATALOG BLOCKS
         SPACE
         MVC   CATBLKS(2*3),PZEROS     RESET CATBLKS & BLKSUSED TO P'0'
         LA    R2,BUFFERS              REINITIALIZE
         LA    R3,264(R2)                FOR A SEQUENTIAL
         STM   R2,R3,CATBUFRS              READING OF CATALOG
         POINT CATALOG,TTR#1
         READ  CATDECB,SF,,(R2),MF=E   REREAD FIRST CATALOG BLOCK
         SPACE 1
         TM    SEGCNT+1,X'10'      BRANCH IF NUMBER OF
         BZ    ENDPRT                SEGMENTS REMAINING IS EVEN
         BAL   R10,NEXTSEG         GO FILL ODD SEGMENT WITH BLANKS
         SPACE
ENDPRT   OI    PRTCODE,8           INDICATE END-OF-PRINT IS IN PROGRESS
         CLC   UNPRTCNT,PZEROS+6   BRANCH UNLESS LINES REMAIN
         BE    ENDPRT3               TO BE PRINTED ON PREVIOUS PAGE
         ZAP   DBLWORD,UNPRTCNT    GET THE UNPRINTED LINES
         CVB   R6,DBLWORD            COUNT INTO A GENERAL REGISTER
         LM    R7,R8,PRTSEGS       LOAD LEFT & RIGHT SEGMENT ADDRESSES
         SPACE
ENDPRT2  BAL   R10,READSEQU        ALTERNATE READING CATALOG
         BAL   R9,NEXTPRT            BLOCKS AND PRINTING LINES
         BCT   R6,ENDPRT2              UNTIL ALL LINES ARE PRINTED
         SPACE
ENDPRT3  L     R8,SEGADDR          LOAD ADDRESS OF LAST SEGMENT FILLED
         C     R8,FRSTSEGS         BRANCH IF THERE WAS
         BL    NOLIST                                  NOTHING TO LIST
         LA    R8,64(R8)           INCREMENT TO NEXT SEGMENT ADDRESS
         L     R7,FRSTSEGS         LOAD ADDR OF FIRST SEGMENT ON PAGE
         SR    R8,R7               GET NUMBER OF SEGMENT BYTES FILLED
         SRL   R8,1+6              DIVIDE BY 2 SEGS/LINE TIMES 64 BYTES
         LR    R6,R8               SAVE NUMBER OF LINES TO PRINT
         SLL   R8,6                LOCATE FIRST RIGHT
         AR    R8,R7                 SEGMENT TO BE PRINTED
         SPACE
ENDPRT4  BAL   R10,READSEQU        ALTERNATE READING CATALOG
         BAL   R9,NEXTPRT            BLOCKS AND PRINTING LINES
         BCT   R6,ENDPRT4              UNTIL ALL LINES ARE PRINTED
         SPACE
DONE  FREEMAIN R,SP=2              FREE STORAGE FOR PRINT LINE SEGMENTS
DONE2    BAL   R10,CTLGEOD         INDICATE END-OF-PRINT IS FINISHED--
*                                    NO RETURN IF CTLG EOD HAS OCCURRED
         SPACE 3
* * *  LISTUSED  ROUTINE  AND  COMPLETION  OF  LISTCTLG  ROUTINE  * * *
         SPACE
LISTUSED BALR  R10,0               BRANCH REPEATEDLY TO READ CATALOG
         B     READSEQ               BLOCKS UNTIL CATALOG IS EXHAUSTED
      TITLE 'INTELLIGENT CATALOG LISTER -- CATALOG END-OF-DATA ROUTINE'
* * *    C A T A L O G   E N D - O F - D A T A   R O U T I N E    * * *
         SPACE
CTLGEOD  TM    PRTCODE,8           BRANCH UNLESS END-OF-
         BZ    CTLGEOD2              PRINT ROUTINE IS IN PROGRESS
         NI    PRTCODE,255-8       INDICATE END-OF-DATA HAS OCCURRED
         BR    R10                 RETURN TO MAIN ROUTINE
         SPACE
*  NOTE:  WHEN THE ABOVE CODING IS BRANCHED TO FROM THE STATEMENT
*  NAMED DONE2, THE INSTRUCTION COMMENTS SHOULD READ AS FOLLOWS:
*
*CTLGEOD TM    PRTCODE,8           BRANCH IF END-OF-DATA OCCURRED
*        BZ    CTLGEOD2              DURING THE END-OF-PRINT ROUTINE
*        NI    PRTCODE,255-8       INDICATE END-OF-PRINT IS FINISHED
*        BR    R10                 RETURN TO MAIN ROUTINE
         SPACE
CTLGEOD2 CLOSE (CATALOG),MF=(E,CLOSLIST)
         MVI   PRTCODE,1
         BAL   R10,PRTROUTN            GO PRINT TWO BLANK LINES
         OI    PRTCODE,2
         LA    R1,MSG09-1              POINT TO CATALOG BLOCKS MESSAGE
         BAL   R10,PRTROUTN            GO GET PRINT BUFFER WITH MESSAGE
         LR    R15,R1
         USING PRTSCTN,R15
         LA    R1,PRTMSG+45            POINT TO END OF EDIT PATTERN
         EDMK  PRTMSG+39(7),BLKSUSED   EDIT IN CATALOG BLOCKS USED
         MVC   PRTMSG+40(15),0(R1)     SHIFT LEFT TO REMOVE BLANKS
         LA    R1,PRTMSG+15            POINT TO END OF EDIT PATTERN
         EDMK  PRTMSG+9(7),CATBLKS     EDIT IN TOTAL CATALOG BLOCKS
         MVC   PRTMSG+10(45),0(R1)     SHIFT LEFT TO REMOVE BLANKS
         DROP  R15
         B     NEXTCARD                GO PROCESS THE NEXT CONTROL CARD
       TITLE 'INTELLIGENT CATALOG LISTER -- READER END-OF-DATA ROUTINE'
* * * *   R E A D E R   E N D - O F - D A T A   R O U T I N E   * * * *
         SPACE
RDREOD   CLOSE (READER),MF=(E,CLOSLIST)
      FREEPOOL READER
         SPACE
ENDJOB   MVI   PRTCODE,3
         LA    R1,MSG10-1          POINT TO END-OF-JOB MESSAGE
         BAL   R10,PRTROUTN        GO GET PRINT BUFFER WITH MESSAGE
         SR    R5,R5               SAVE RETURN CODE FROM
         IC    R5,RTRNCODE           FREEING OF WORKING STORAGE
         STC   R5,PRTMSG+33        STORE CODE & EDIT
         OI    PRTMSG+33,X'F0'                       IT INTO DECIMAL
         SPACE 1
         CLOSE (PRINTER),MF=(E,CLOSLIST)
      FREEPOOL PRINTER
         SPACE
         LR    R2,R13
         L     R13,SAVEAREA+4
      FREEMAIN R,LV=WRKLNGTH,A=(R2)  FREE WORKING STORAGE AREA
         LR    R15,R5                MOVE SAVED RETURN CODE
        RETURN (14,12),RC=(15)
         TITLE 'INTELLIGENT CATALOG LISTER -- READ CATALOG SUBROUTINES'
* * * * * * * *  SEQUENTIAL  CATALOG  READ  SUBROUTINE  * * * * * * * *
         SPACE
READSEQU TM    PRTCODE,8           RETURN TO MAIN ROUTINE IF CTLG EOD
         BZR   R10                   HAS OCCURRED (DURING END-OF-PRINT)
         SPACE
READSEQ  CHECK CATDECB
         NOTE  CATALOG
         ST    R1,TTRZ             SAVE TTR OF BLOCK JUST READ
         MVC   CCHHR,CATCCHHR      SAVE CCHHR OF BLOCK JUST READ
         AP    CATBLKS,=P'1'       INCREMENT TOTAL CATALOG BLOCK COUNT
         SPACE
         LM    R2,R3,CATBUFRS      INTERCHANGE
         ST    R2,CATBUFRS+4                   CATALOG BUFFER
         ST    R3,CATBUFRS                                    ADDRESSES
         READ  CATDECB,SF,,(R3),MF=E
         CLI   0(R2),0             GO READ ANOTHER BLOCK IF
         BE    READSEQ               THIS BLOCK IS NOT IN USE
         SPACE
         AP    BLKSUSED,=P'1'      INCREMENT COUNT OF BLOCKS USED
         LA    R3,10(R2)           LOAD POINTER TO 'CATSCTN'
         LH    R4,8(R2)            LOAD BYTE COUNT (VOL COUNT IF VCB)
         BR    R10                 RETURN TO MAIN ROUTINE
         EJECT                                                      PES
* * * * * * * * *  RANDOM  CATALOG  READ  SUBROUTINE  * * * * * * * * *
         SPACE
READRNDM L     R2,STRGPTR(R4)      PT TO STORAGE FOR THIS INDEX LEVEL
         POINT CATALOG,TTRZ
         READ  CATDECB,SF,,(R2),MF=E
         CHECK CATDECB
         LA    R1,10(R2)           POINT TO FIRST ENTRY IN BLOCK
         ST    R1,ENTRYPTR(R4)     SAVE FOR ENTRY-PROCESSING ROUTINE
         BR    R10                 RETURN TO MAIN ROUTINE
         SPACE 3
* * * * * * * *   ROUTINE  TO  LOCATE  SYSRES  VOLUME   * * * * * * * *
         SPACE
LOCSYSRS MVC   CAMLIST(12),LOCLST    MOVE PROTOTYPE CAT MANAGEMENT LIST
         LA    R1,BUFFERS
         ST    R1,CAMLIST+12
        LOCATE CAMLIST               READ IN FIRST SYSRES CATALOG BLOCK
         LTR   R15,R15
         BNZ   LOCERR
         MVC   VOLUME,BUFFERS+259    SAVE SYSRES VOLUME IDENTIFIER
         MVC   OPERAND(11),VOLSYSRS  MOVE C'VOL=SYSRES='
         MVC   OPERAND+11(6),VOLUME  INSERT VOLUME IDENTIFIER
         B     FINDTIOT              GO START NORMAL CATALOG PROCESSING
         TITLE 'INTELLIGENT CATALOG LISTER -- PRINTER SUBROUTINE'
* * * * * * * *   P R I N T E R   S U B R O U T I N E   * * * * * * * *
         SPACE
PRTROUTN STM   R0,R1,MSGPTRS       SAVE MESSAGE POINTER(S), IF ANY
         TM    PRTCODE,1           TEST FOR DOUBLE SPACING
         BZ    ONELINE             BRANCH IF SINGLE SPACING
TWOLINES SP    LINECNT,=P'2'       COMPUTE LINES LEFT AFTER PRINTING
         BNM   PRTLINE             BRANCH UNLESS BEYOND END OF PAGE
         B     NEXTPAGE
         SPACE
ONELINE  SP    LINECNT,=P'1'       COMPUTE LINES LEFT AFTER PRINTING
         BNM   PRTLINE             BRANCH UNLESS BEYOND END OF PAGE
         SPACE
NEXTPAGE MVC   LINECNT,MAXLCNT     SET LINECNT TO MAX LINES MINUS THREE
         PUT   PRINTER             RELEASE FILLED BUFFER & GET ANOTHER
         MVC   PRTRCRD,HEADING         MOVE SKELETON HEADING LINE
         MVC   PRTRCRD+54(8),OPERATN   INSERT OPERATION (LIST....)
         MVC   PRTRCRD+65(17),OPERAND  INSERT OPERAND (VOL=ETC.)
         MVC   PRTRCRD+95(2*8),TIME    INSERT TIME & DATE
         AP    PAGECNT,=P'1'           INCREMENT TO NEXT PAGE NUMBER
         LR    R15,R1
         USING PRTSCTN,R15
         LA    R1,PRTRCRD+132          POINT TO END OF EDIT PATTERN
         EDMK  PRTRCRD+129(4),PAGECNT  EDIT IN PAGE NUMBER
         SH    R1,=H'5'                INSERT REMAINDER
         MVC   0(4,R1),=C'PAGE'                         OF HEADING LINE
         DROP  R15
         OI    PRTCODE,1
         TM    PRTCODE,X'C0'
         BZ    PRTLINE
         SPACE
         PUT   PRINTER             RELEASE FILLED BUFFER & GET ANOTHER
         EX    0,TWOLINES          SP  LINECNT,=P'2'
         TM    PRTCODE,X'80'
         BZ    MVHDNG3
         MVC   PRTRCRD,HEADING2    MOVE 2ND HEADING--LISTFORM OPERATION
         B     PRTLINE
         SPACE
MVHDNG3  MVC   PRTRCRD,HEADING3    MOVE 2ND HEADING--LISTCTLG OPERATION
         SPACE 1
PRTLINE  PUT   PRINTER             RELEASE FILLED BUFFER & GET ANOTHER
         MVC   PRTRCRD,BLANKS      INITIALIZE THE BUFFER WITH BLANKS
         TM    PRTCODE,7
         BZR   R10                 RETURN IF NOTHING MORE TO DO
         SPACE
         TM    PRTCODE,1
         BZ    PRTLINE2
         MVI   PRTCC,C'0'          CHANGE FROM SINGLE TO DOUBLE SPACING
         NI    PRTCODE,255-1
         SPACE
PRTLINE2 TM    PRTCODE,6
         BZR   R10                 RETURN IF NOTHING MORE TO DO
         SPACE
         LM    R14,R15,MSGPTRS     LOAD MESSAGE POINTER(S)
         TM    PRTCODE,4           BRANCH IF CALLER
         BO    PRTLINE3              SET UP BOTH POINTERS
         IC    R14,0(R15)          INSERT MACH LANGUAGE LENGTH TO MOVE
         LA    R15,1(R15)          INCREMENT TO POINT TO ACTUAL MESSAGE
         SPACE
PRTLINE3 EX    R14,MOVEMSG         MOVE MESSAGE INTO PRINT BUFFER
         NI    PRTCODE,255-6
         BR    R10                 RETURN TO CALLING ROUTINE
         SPACE 3
MOVEMSG  MVC   PRTMSG(0),0(R15)    OBJECT OF EXECUTE INSTRUCTION
  TITLE 'INTELLIGENT CATALOG LISTER -- LISTFORM PRINT BLOCK SUBROUTINE'
* * * * * * * *   LISTFORM  PRINT  BLOCK  SUBROUTINE   * * * * * * * *
         SPACE
PRTBLOCK OI    PRTCODE,1
         BAL   R10,PRTROUTN        GO GET A PRINT BUFFER
         UNPK  PRTTTRZ,TTRZ        UNPACK & TRANSLATE
         TR    PRTTTR,HEXTABLE       TTR OF CURRENT BLOCK
         MVI   PRTZ,C' '
         LA    R6,FORMSEGS         POINT LEFT SEG REG TO 1ST SEGMENT
         SR    R2,R6               SUBTR FR PTR TO LAST SEGMENT FILLED
         C     R2,=A(3*39)         BRANCH IF MORE THAN
         BNL   MANYSEGS              THREE SEGMENTS FILLED
         SPACE
FEWSEGS  MVC   PRTFSEG,0(R6)       MOVE LEFT SEGMENT TO BUFFER
         CH    R2,=H'39'           RETURN IF ONLY
         BLR   R9                                 ONE SEGMENT FILLED
         MVC   PRTFSEG2,39(R6)     MOVE MIDDLE SEGMENT TO BUFFER
         BER   R9                  RETURN IF ONLY TWO SEGMENTS FILLED
         MVC   PRTFSEG3,78(R6)     MOVE RIGHT SEGMENT TO BUFFER
         BR    R9                  RETURN TO CALLING ROUTINE
         SPACE
MANYSEGS LR    R3,R2               GET NUMBER OF SEGMENT BYTES FILLED
         SR    R2,R2                 (MINUS 39) INTO EVEN/ODD REGISTERS
         D     R2,=A(3*39)         DIVIDE BY 3 SEGS/LINE TIMES 39 BYTES
*                                  R2 -- BYTES (MINUS 39) ON LAST LINE
*                                  R3 -- LINES IN BLOCK AFTER 1ST LINE
         SPACE
GETLNCNT ZAP   DBLWORD,LINECNT     GET LINES LEFT ON PAGE (AFTER AL-
         CVB   R4,DBLWORD            READY GOTTEN LINE) INTO A GEN REG
         CR    R3,R4               BRANCH IF ADDITIONAL LINES WILL
         BNH   WILLFIT               FIT ONTO SAME PAGE AS FIRST LINE
         SPACE
WONTFIT  LA    R4,1(R4)            ADD 1ST LINE TO LINES-ON-PAGE COUNT
         LR    R7,R4               COPY LINES TO PRINT ON PAGE INTO
         LR    R8,R4                 MIDDLE & RIGHT SEGMENT REGISTERS
         SR    R3,R4               SUBTRACT FROM LINES-IN-BLOCK COUNT
         LA    R5,NEWPAGE          LOAD PRTLOOP EXIT ADDRESS
         B     INITREGS
         SPACE 1
NEWPAGE  BAL   R10,PRTROUTN        GO GET ANOTHER PRINT BUFFER
         LR    R6,R8               POINT LEFT SEG REG TO NEXT SEGMENT
         LTR   R3,R3               BRANCH IF THREE OR LESS
         BZ    FEWSEGS               UNPRINTED SEGMENTS REMAIN
         SPACE
WILLFIT  LA    R4,1(R3)            ADD 1ST LINE TO LINES-IN-BLOCK COUNT
         LR    R7,R4               COPY TOTAL LINES TO PRINT INTO
         LR    R8,R4                 MIDDLE & RIGHT SEGMENT REGISTERS
         LA    R5,LASTLINE         LOAD PRTLOOP EXIT ADDRESS
         CH    R2,=H'39'           BRANCH IF LAST LINE WILL
         BH    INITREGS              CONTAIN ALL THREE SEGMENTS
         BCTR  R4,0                REDUCE COUNT TO NUMBER OF FULL LINES
         BE    INITREGS            BR IF LAST LINE WILL CONTAIN 2 SEGS
         BCTR  R8,0                REDUCE COUNT IN RIGHT SEG REGISTER
         SPACE
INITREGS MH    R7,=H'39'           INITIALIZE MIDDLE
         AR    R7,R6                                 SEGMENT REGISTER
         MH    R8,=H'39'           INITIALIZE RIGHT
         AR    R8,R7                                SEGMENT REGISTER
         B     PRTLOOP2
         SPACE
PRTLOOP  BAL   R10,PRTROUTN        GO GET ANOTHER PRINT BUFFER
         SPACE
PRTLOOP2 MVC   PRTFSEG,0(R6)       MOVE LEFT SEGMENT TO BUFFER
         MVC   PRTFSEG2,0(R7)      MOVE MIDDLE SEGMENT TO BUFFER
         MVC   PRTFSEG3,0(R8)      MOVE RIGHT SEGMENT TO BUFFER
         LA    R6,39(R6)           INCREMENT TO
         LA    R7,39(R7)                        NEXT SEGMENT
         LA    R8,39(R8)                                     ADDRESSES
         BCT   R4,PRTLOOP          REPEAT FOR ALL WHOLLY FILLED LINES
         SPACE
         BR    R5                  BRANCH TO NEWPAGE OR LASTLINE
         SPACE
LASTLINE CH    R2,=H'39'           RETURN IF NO PARTIAL
         BHR   R9                    LAST LINE IS REQUIRED
         BAL   R10,PRTROUTN        GO GET ANOTHER PRINT BUFFER
         MVC   PRTFSEG,0(R6)       MOVE LEFT SEGMENT TO BUFFER
         LTR   R2,R2               RETURN IF ONLY ONE
         BZR   R9                    SEGMENT REMAINED TO BE PRINTED
         MVC   PRTFSEG2,0(R7)      MOVE MIDDLE SEGMENT TO BUFFER
         BR    R9                  RETURN TO CALLING ROUTINE
   TITLE 'INTELLIGENT CATALOG LISTER -- PRINT LINE SEGMENT SUBROUTINES'
* * * * * * * * *  PRINT  LINE  SEGMENT  SUBROUTINES  * * * * * * * * *
         SPACE
NEXTSEG  CLC   UNPRTCNT,PZEROS+6   BRANCH UNLESS LINES REMAIN
         BE    NEXTSEG2              TO BE PRINTED ON PREVIOUS PAGE
         LM    R7,R8,PRTSEGS       LOAD LEFT & RIGHT SEGMENT ADDRESSES
         ST    R10,SAVELINK        SAVE LINK REG ON BEHALF OF NEXTPRT
         BAL   R9,NEXTPRT          GO PRINT THE NEXT LINE
         STM   R7,R8,PRTSEGS       SAVE UPDATED SEGMENT ADDRESSES
         SP    UNPRTCNT,=P'1'      DECREMENT UNPRINTED LINES COUNT
         L     R10,SAVELINK        RESTORE LINK REGISTER
         SPACE
NEXTSEG2 L     R1,SEGADDR          LOAD ADDRESS OF LAST SEGMENT FILLED
         LA    R1,64(R1)           INCREMENT TO NEXT SEGMENT ADDRESS
         SP    SEGCNT,=P'1'        COMPUTE SEGMENTS LEFT AFTER THIS ONE
         BNM   NEXTSEG3            BRANCH UNLESS BEYOND END OF PAGE
         SPACE
         MVC   SEGCNT,MAXSCNT      SET SEGCNT TO MAX SEGMENTS MINUS ONE
         L     R0,FRSTSEGS         LOAD ADDR OF FIRST SEGMENT ON PAGE
         SR    R1,R0               GET NUMBER OF SEGMENT BYTES FILLED
         SRL   R1,1+6              DIVIDE BY 2 SEGS/LINE TIMES 64 BYTES
         CVD   R1,DBLWORD          SAVE NUMBER OF
         MVC   UNPRTCNT,DBLWORD+6                 LINES TO PRINT
         SLL   R1,6                LOCATE FIRST RIGHT
         AR    R1,R0                 SEGMENT TO BE PRINTED
         STM   R0,R1,PRTSEGS       SAVE LEFT & RIGHT SEGMENT ADDRESSES
         LM    R0,R1,FRSTSEGS      INTERCHANGE
         ST    R0,FRSTSEGS+4                   FIRST SEGMENT
         ST    R1,FRSTSEGS                                   ADDRESSES
         SPACE
NEXTSEG3 ST    R1,SEGADDR          SAVE ADDRESS OF CURRENT SEGMENT
         MVC   0(64,R1),BLANKS     INITIALIZE SEGMENT WITH BLANKS
         BR    R10                 RETURN TO CALLING ROUTINE
         SPACE 3
NEXTPRT  BAL   R10,PRTROUTN        GO GET A PRINT BUFFER
         MVC   PRTCSEG,0(R7)       MOVE LEFT SEGMENT TO BUFFER
         MVC   PRTCSEG2,0(R8)      MOVE RIGHT SEGMENT TO BUFFER
         LA    R7,64(R7)           INCREMENT TO NEXT
         LA    R8,64(R8)                             SEGMENT ADDRESSES
         BR    R9                  RETURN TO CALLING ROUTINE
         TITLE 'INTELLIGENT CATALOG LISTER -- DUMP SUBROUTINE'
* * * * * * * * *    D U M P   S U B R O U T I N E    * * * * * * * * *
         SPACE
DMPROUTN ST    R10,SAVELINK        SAVE LINK REGISTER
         L     R2,CATBUFRS+4       POINT TO CURRENT CATALOG BLOCK
         LA    R3,8                INITIALIZE FULL-LENGTH LINES COUNT
         SR    R4,R4               INITIALIZE DISPLACEMENT WITHIN BLOCK
         SPACE
LINELOOP BAL   R10,PRTROUTN        GO GET A PRINT BUFFER
         MVI   PRTBCDX,C'*'
         MVC   PRTBCD,0(R2)        MOVE & TRANSLATE NEXT
         TR    PRTBCD,TRTABLE        8 WORDS (32 BYTES) OF BLOCK
         MVI   PRTBCDXX,C'*'
         LA    R6,4                INITIALIZE HEXLOOP COUNT
         LA    R9,REINIT           LOAD HEXLOOP EXIT ADDRESS
         SPACE
DSPLCMNT ST    R4,FULLWORD
         UNPK  PRTDISP(5),FULLWORD+2(3)  UNPACK & TRANSLATE
         TR    PRTDISP(4),HEXTABLE         HEXADECIMAL DISPLACEMENT
         MVC   PRTDISP+4(6),ED3PTRN      MOVE 2C' ',X'202120',C')'
         CVD   R4,DBLWORD
         ED    PRTDISP+5(4),DBLWORD+6    EDIT IN DECIMAL DISPLACEMENT
         MVI   PRTDISP+5,C'('            COMPLETE THE EDIT PROCESS
         LA    R4,32(R4)                 INCREMENT BLOCK DISPLACEMENT
         LA    R7,PRTHEX                 PT TO LEFTMOST HEX PRINT WORDS
         SPACE
HEXLOOP  UNPK  0(9,R7),0(5,R2)     UNPACK & TRANSLATE NEXT
         TR    0(8,R7),HEXTABLE      WORD (4 BYTES) OF BLOCK
         MVI   8(R7),C' '
         LA    R2,4(R2)            INCREMENT BLOCK &
         LA    R7,9(R7)                              PRINT POINTERS
         BCT   R6,HEXLOOP
         SPACE
         BR    R9                  BRANCH TO REINIT, ENDLINE OR GOBACK
         SPACE
REINIT   LA    R7,PRTHEX2          POINT TO RIGHTMOST HEX PRINT WORDS
         LA    R6,4                REINITIALIZE HEXLOOP COUNT
         BAL   R9,HEXLOOP          LOAD HEXLOOP EXIT ADDR, AND BRANCH
         SPACE
ENDLINE  BCT   R3,LINELOOP
         SPACE
         BAL   R10,PRTROUTN        GO GET ANOTHER PRINT BUFFER
         MVI   PRTBCDX,C'*'
         MVC   PRTBCD(8),0(R2)     MOVE & TRANSLATE LAST
         TR    PRTBCD(8),TRTABLE     2 WORDS (8 BYTES) OF BLOCK
         MVI   PRTBCD+8,C'*'
         LA    R6,2                INIT HEXLOOP COUNT TO GET SHORT LINE
         BAL   R9,DSPLCMNT         LOAD HEXLOOP EXIT ADDR, AND BRANCH
         SPACE
GOBACK   L     R10,SAVELINK        RESTORE LINK REGISTER
         BR    R10                 RETURN TO CALLING ROUTINE
         TITLE 'INTELLIGENT CATALOG LISTER -- DEVICE TYPE SUBROUTINE'
* * * * * * *   SUBROUTINE  TO  INTERPRET  DEVICE  TYPE   * * * * * * *
         SPACE
DEVROUTN L     R7,FULLWORD         LOAD DEVICE TYPE (SEARCH ARGUMENT)
         LA    R9,6                LOAD ONE-HALF TABLE ENTRY LENGTH
         LA    R14,FRSTNTRY-12     INITIALIZE LIMITS FOR
         LA    R15,LASTNTRY+12                           BINARY SEARCH
         SPACE
DEVLOOP  LR    R8,R15              LOAD UPPER SEARCH LIMIT
         SPACE
DEVLOOP2 SR    R8,R14              SUBTRACT LOWER SEARCH LIMIT
         SRL   R8,1                DIVIDE DIFFERENCE BY 2
         STC   R8,FULLWORD         IF RESULT IS NOT
         TM    FULLWORD,2            DIVISIBLE BY 12 (LENGTH
         BZ    DEVLOOP3                OF TABLE ENTRY), REDUCE TO
         SR    R8,R9                     THE NEXT LOWER MULTIPLE OF 12
         BNP   NOTFOUND            BRANCH IF TABLE HAS BEEN EXHAUSTED
         SPACE
DEVLOOP3 AR    R8,R14              POINT TO MID-TABLE ENTRY
         CL    R7,0(R8)            COMPARE SEARCH ARG WITH TABLE ENTRY
         BH    DEVLOOP4
         BER   R10                 SEARCH ARG EQUAL--RETURN
         LR    R15,R8              SEARCH ARG LOW--REPLACE UPPER LIMIT
         B     DEVLOOP2
         SPACE
DEVLOOP4 LR    R14,R8              SEARCH ARG HIGH--REPLACE LOWER LIMIT
         B     DEVLOOP
         SPACE 2
NOTFOUND LA    R8,UDEVNTRY-4       POINT TO UNKNOWN DEVICE TYPE ENTRY
         BR    R10                 RETURN TO CALLING ROUTINE
         TITLE 'INTELLIGENT CATALOG LISTER -- OTHER SUBROUTINES'
* * * * * * * *    O T H E R   S U B R O U T I N E S    * * * * * * * *
         SPACE
CARDERR  MVC   OPERATN,BLANKS
         LA    R1,MSG03-1            POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN          GO GET PRINT BUFFER WITH MESSAGE
         MVC   PRTMSG+15(80),0(R3)   MOVE CARD RECORD TO PRINT BUFFER
         MVI   RTRNCODE,8
         B     NEXTCARD              GO PROCESS THE NEXT CONTROL CARD
         SPACE 3
BLOWOFF  EQU   *                                                PES0178
         MVC   OPERATN,BLANKS                                   PES0178
         LA    R1,MSG16-1                                       PES0178
         BAL   R10,PRTROUTN                                     PES0178
         MVC   PRTMSG+25(80),0(R3)                              PES0178
         MVI   RTRNCODE,8                                       PES0178
         B     NEXTCARD                                         PES0178
CATDDERR LA    R1,MSG04-1            POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN          GO GET PRINT BUFFER WITH MESSAGE
         MVC   PRTMSG+32(6),VOLUME   MOVE VOLUME IDENTIFIER TO BUFFER
         MVI   RTRNCODE,8
         B     NEXTCARD              GO PROCESS THE NEXT CONTROL CARD
         SPACE 3
OBTNERR  CVD   R15,DBLWORD                 CONVERT & SAVE RETURN CODE
         LA    R1,MSG05-1                  POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN                GO GET PRT BUFFER W/MESSAGE
         MVC   PRTMSG+32(6),VOLUME         MOVE VOLUME IDENTIFIER
         UNPK  PRTMSG+69(2),DBLWORD+6(2)   UNPACK & EDIT
         OI    PRTMSG+70,X'F0'               OBTAIN MACRO RETURN CODE
         MVI   RTRNCODE,8
         B     NEXTCARD                    GO PROCESS NEXT CONTROL CARD
         SPACE 3
LOCERR   CVD   R15,DBLWORD                 CONVERT & SAVE RETURN CODE
         LA    R1,MSG13-1                  POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN                GO GET PRT BUFFER W/MESSAGE
         UNPK  PRTMSG+60(2),DBLWORD+6(2)   UNPACK & EDIT
         OI    PRTMSG+61,X'F0'               LOCATE MACRO RETURN CODE
         MVI   RTRNCODE,8
         B     NEXTCARD                    GO PROCESS NEXT CONTROL CARD
         SPACE 3
INITERR  LA    R1,MSG14-1            POINT TO ERROR MESSAGE
         BAL   R10,PRTROUTN          GO GET PRINT BUFFER WITH MESSAGE
         MVC   PRTMSG+18(6),VOLUME   MOVE VOLUME IDENTIFIER TO BUFFER
         MVI   RTRNCODE,8
         B     NEXTCARD              GO PROCESS THE NEXT CONTROL CARD
         SPACE 1
NOLIST   OI    PRTCODE,3
         LA    R1,MSG15-1          POINT TO INFORMATIONAL MESSAGE
         BAL   R10,PRTROUTN        GO PRINT THE MESSAGE
         B     DONE                GO FINISH UP THE LISTCTLG ROUTINE
         SPACE 3
         USING PRTCSEG,R1
         SPACE
DSNMERR  BAL   R10,NEXTSEG                 GO GET A PRINT LINE SEGMENT
         MVC   PRTDSNAM(44+8),DSNAME       MOVE DSNAME & SPARE BYTES
         MVC   PRTDSNAM+53(11),ERRORMSG+2  MOVE C'** ERROR **'
         MVI   INDXFLAG,0                  RESET EMPTY-INDEX FLAG
         MVI   RTRNCODE,8
         B     NXTENTRY                    GO PROCESS THE NEXT ENTRY
         SPACE
         USING PRTSCTN,R1          (END OF  USING PRTCSEG,R1)
         SPACE 3
* * * * * *  READER / PRINTER  D C B  OPEN  EXIT  ROUTINE  * * * * * *
         SPACE
DCBEXIT  CLC   62(2,R1),82(R1)     COMPARE BLKSIZE AND LRECL
         BHR   R14                 RETURN IF BLKSIZE IS GREATER
         MVC   62(2,R1),82(R1)     MAKE BLKSIZE EQUAL TO LRECL
         NI    36(R1),X'EF'        TURN OFF BLOCKED RECFM BIT
         BR    R14                 RETURN
         SPACE 3
* * * * * * * *   OBJECTS  OF  EXECUTE  INSTRUCTIONS   * * * * * * * *
         SPACE
SCANCARD TRT   0(0,R1),TRTTABLE
         SPACE
MVOPRND  MVC   OPERAND(0),0(R5)
         SPACE
MOVEVOL  MVC   VOLUME(0),0(R6)
    TITLE 'INTELLIGENT CATALOG LISTER -- PRINTER MESSAGES AND HEADINGS'
* * * * * * *   PRINTER  MESSAGES  AND  HEADING  LINES   * * * * * * *
         SPACE
         DC    AL1(L'MSG01-1)
MSG01    DC               C'EXT NO.     START-END  (CCHH)      TRACKS  *
                1ST REL TRK    (HEX) - (DEC)    EXT NO.     START-END  *
               (CCHH)      TRACKS   1ST REL TRK'
         SPACE
         DC    AL1(L'MSG02-1)
MSG02    DC    C'NO SYSIN DD CARD'
         SPACE
         DC    AL1(L'MSG03-1)
MSG03    DC    C'ERROR IN CARD'
         SPACE
         DC    AL1(L'MSG04-1)
MSG04    DC    C'CAN NOT FIND DD CARD FOR VOLUME'
         SPACE
         DC    AL1(L'MSG05-1)
MSG05    DC                C'CAN NOT FIND CATALOG FOR VOLUME XXXXXX -- *
               OBTAIN MACRO RETURN CODE ='
         SPACE
         DC    AL1(L'MSG06-1)
MSG06    DC               C' TYPES:   A = ALIAS ENTRY                  *
                GIP = GENERATION INDEX      IL = INDEX LINK ENTRY      *
               VCBP = VOLUME CONTROL BLOCK'
         SPACE
         DC    AL1(L'MSG07-1)
MSG07    DC               C'        CVP = CONTROL VOLUME POINTER ENTRY *
                            POINTER ENTRY   IP = INDEX POINTER ENTRY   *
                                   POINTER ENTRY'
         SPACE
         DC    AL1(L'MSG08-1)
MSG08    DC               C'        DSP = DATA SET POINTER ENTRY       *
                 IC = INDEX CONTROL ENTRY  VCB = VOLUME CONTROL BLOCK  *
                VIC = VOLUME INDEX CONTROL ENTRY'
         SPACE
         DC    AL1(M09LNGTH-1)
MSG09    DC    C'THERE ARE ',X'2020',C',',X'202120',C' INDEX BLOCKS,'
         DC    C' OF WHICH ',X'2020',C',',X'202120',C' ARE USED'
M09LNGTH EQU   *-MSG09
         SPACE
         DC    AL1(L'MSG10-1)
MSG10    DC    C'END OF LISTCTLG -- RETURN CODE ='
         SPACE 1
         DC    AL1(L'MSG11-1)
MSG11    DC    C'ERROR IN RECORD -- DUMP OF RECORD FOLLOWS -- TTR='
         SPACE
         DC    AL1(L'MSG12-1)
MSG12    DC    C'ERROR IN VOLUME INDEX CONTROL ENTRY -- DUMP OF RECORD *
               FOLLOWS -- TTR=000001 -- CCHHR='
         SPACE
         DC    AL1(L'MSG13-1)
MSG13    DC                         C'CAN NOT LOCATE SYSRES CATALOG -- *
               LOCATE MACRO RETURN CODE ='
         SPACE
         DC    AL1(L'MSG14-1)
MSG14    DC    C'CATALOG ON VOLUME XXXXXX NOT INITIALIZED'
         SPACE
         DC    AL1(L'MSG15-1)
MSG15    DC    C'CATALOG CONTAINS NOTHING TO LIST'
         SPACE
         DC    AL1(L'MSG16-1)                                   PES0178
MSG16    DC    C'UNAUTHORIZED CARD INPUT'                       PES0178
HEADING  DC    CL130'1LISTCTLG 1.0 -- AFDSC/SFI CATALOG LISTER'     PES
         DC    X'202120'
         SPACE
HEADING2 DC                     CL7'0TTR',3CL42'   NAME     TYPE TTR   *
               DEV TP  VOL ID  SEQ'
         SPACE
HEADING3 DC    CL46'0INDEX OR DATA SET NAME',CL22'DEV TP  VOL ID  SEQ'
         DC    CL46' INDEX OR DATA SET NAME',CL19'DEV TP  VOL ID  SEQ'
         SPACE
BLANKS   DC    CL133' '
         SPACE
ERRORMSG DC    C'**** ERROR ****'
         TITLE 'INTELLIGENT CATALOG LISTER -- PROTOTYPE DATA LISTS'
* * * * * * * *  PROTOTYPE  CATALOG  MANAGEMENT  LISTS  * * * * * * * *
         SPACE
LOCLST  CAMLST BLOCK,TTR#1,,0
         ORG   *-4
         SPACE
TTR#1    DC    0F'0',XL3'1',X'0'   TTR FOR FIRST CATALOG BLOCK
         SPACE 2
OBTNLST CAMLST SEARCH,CTLGNAME,0,0
         ORG   *-8
         SPACE
CTLGNAME DC    CL44'SYSCTLG'       NAME OF CATALOG DATA SET
         SPACE 3
* * * *   P R O T O T Y P E   O P E N / C L O S E   L I S T S   * * * *
         SPACE
OPENCLOS OPEN  (0),MF=L
         CLOSE (0),MF=L
         SPACE
DCBLST   OPEN  (0,OUTPUT,0),MF=L
         TITLE 'INTELLIGENT CATALOG LISTER -- PROTOTYPE CONTROL BLOCKS'
* * * * * * * * *  PROTOTYPE  DATA  CONTROL  BLOCKS  * * * * * * * * *
         SPACE
RDRDCB   DCB   DSORG=PS,EODAD=RDREOD,RECFM=FB,EXLST=EXITLST,           *
               DDNAME=SYSIN,MACRF=GL,LRECL=80
         SPACE
RDRDDNAM EQU   RDRDCB+40           RDRDCB DATA DEFINITION NAME
         SPACE 3
PRTDCB   DCB   DSORG=PS,RECFM=FBA,EXLST=EXITLST,DDNAME=SYSPRINT,       *
               MACRF=PL,LRECL=133
         SPACE
PRTDDNAM EQU   PRTDCB+40           PRTDCB DATA DEFINITION NAME
         SPACE 3
CTLGDCB  DCB   KEYLEN=8,DSORG=PS,EODAD=CTLGEOD,RECFM=F,DDNAME=DUMMY,   *
               MACRF=RP,BLKSIZE=256,NCP=1,LRECL=256
         SPACE 3
* * * * *   PROTOTYPE  CATALOG  DATA  EVENT  CONTROL  BLOCK   * * * * *
         SPACE
         READ  CTLGDECB,SF,MF=L
         SPACE 3
* * * * *   R E A D E R / P R I N T E R   E X I T   L I S T   * * * * *
         SPACE
EXITLST  DC    0F'0',X'85',AL3(DCBEXIT)
         TITLE 'INTELLIGENT CATALOG LISTER -- UNIT DEVICE TYPE TABLE'
* * * * * *   U N I T   D E V I C E   T Y P E   T A B L E   * * * * * *
         SPACE
FRSTNTRY DS    0F
*        DC    X'30002001',CL8'2311'                                PES
         DC    X'30002003',CL8'2303'
*        DC    X'30002004',CL8'2302'                                PES
*        DC    X'30002005',CL8'2321'                                PES
*        DC    X'30008001',CL8'2400'                            PES0280
*        DC    X'3010200E',CL8'3380'                            SAD1183
*        DC    X'30402002',CL8'2301'                                PES
*        DC    X'30502006',CL8'2305-1'                              PES
*        DC    X'30502007',CL8'2305-2'                              PES
         DC    X'30502009',CL8'3330'
         DC    X'3050200B',CL8'3350'                            PES0678
         DC    X'3050200D',CL8'3330-1'                          PES0678
         DC    X'30582009',CL8'3330V'                           PES0280
*        DC    X'30808001',CL8'2400-1'                          PES0280
         DC    X'30C02008',CL8'2314'
*        DC    X'30C08001',CL8'2400-2'                          PES0280
         DC    X'30C08003',CL8'3400-2'
         DC    X'32008003',CL8'3400-5'                              PES
         DC    X'32108003',CL8'3400-6'                              PES
*        DC    X'34008001',CL8'2400-3'                          PES0280
         DC    X'34008003',CL8'3400-3'
*        DC    X'34208001',CL8'2400-4'                          PES0280
         DC    X'34208003',CL8'3400-4'
LASTNTRY EQU   *-12
         SPACE
UDEVNTRY DC    CL6'******'   UNKNOWN DEVICE TYPE ENTRY          PES0678
         SPACE 2
*  NOTES:  (1) THE SEARCH ARGUMENTS (THE HEXADECIMAL WORDS) IN THESE
*          TABLE ENTRIES MUST BE IN ASCENDING HEXADECIMAL SEQUENCE.
         SPACE
*          (2) THE LAST TWO BYTES IN THE EIGHT-BYTE FUNCTION ENTRIES
*          ARE PADDING TO RETAIN FULL-WORD ALIGNMENTS.
     TITLE 'INTELLIGENT CATALOG LISTER -- VARIOUS TABLES AND CONSTANTS'
* * * * * * * * *   T R A N S L A T E   T A B L E S   * * * * * * * * *
         SPACE
HEXTABLE EQU   *-240
         DC    C'0123456789ABCDEF'
         SPACE
TRTABLE  DC    (C'$')C'.',C'$',(C'#'-C'$'-1)C'.',C'#@'
         DC    (C'A'-C'@'-1)C'.',C'ABCDEFGHI',(C'J'-C'I'-1)C'.'
         DC    C'JKLMNOPQR',(C'S'-C'R'-1)C'.',C'STUVWXYZ'
         DC    (C'0'-C'Z'-1)C'.',C'0123456789',(255-C'9')C'.'
         SPACE 3
* * * * * * * * * *    E D I T   P A T T E R N S    * * * * * * * * * *
         SPACE
TIMEPTRN DC    X'2120',C':',X'2020'
         SPACE
DATEPTRN DC    X'2021',C'-',X'2020'
         SPACE
CCHHPTRN DC    X'2020212022202120'
         SPACE
ED5PTRN  DC    X'2020202120'
         SPACE
ED3PTRN  DC    2C' ',X'202120',C')'
         SPACE 3
* * * * * * * * *    O T H E R   C O N S T A N T S    * * * * * * * * *
         SPACE
CALENDAR DC    PL2'0,31,60,91,121,152,182,213,244,274,305,335'
         SPACE
ZEROS    DC    14X'0'
         SPACE
FFBYTES  DC    8X'FF'
         SPACE
PZEROS   DC    2PL3'0',PL2'0'
         SPACE
VOLSYSRS DC    C'VOL=SYSRES='
         TITLE 'INTELLIGENT CATALOG LISTER -- LITERALS'
         LTORG
         TITLE 'INTELLIGENT CATALOG LISTER -- DUMMY CONTROL SECTIONS'
* * * * * * * * *  WORKING  DUMMY  CONTROL  SECTION  * * * * * * * * *
         SPACE
WORKSCTN DSECT
         SPACE
SAVEAREA DS    18F                 SYSTEM SAVE AREA
         SPACE
DBLWORD  DS    D                   DOUBLE-WORD WORK AREA
         SPACE
FULLWORD DS    F                   FULL-WORD WORK AREA
JOBNADDR DS    F             JOB NAME ADDR                      PES0178
SAVELINK DS    F                   SAVE AREA FOR LINK REGISTER (R10)
         SPACE
OPERATN  DS    CL8                 CURRENT OPERATION (LIST....)
TIME     DS    CL8                 TIME PROGRAM STARTED
DATE     DS    CL8                 DATE PROGRAM STARTED
LCBUSRJB DS    CL8           SUBMITTER COST CODE                PES0178
CAMLIST  DS    XL16                CATALOG MANAGEMENT LIST
         SPACE
CATDECB  DS    XL20                CATALOG DATA EVENT CONTROL BLOCK
         SPACE
TTRZ     DS    0F                  TTR FIELD PLUS FOLLOWING BYTE
TTR      DS    XL3                 REL TRACK & RECORD FOR CATLG BLOCK
ZCODE    DS    X                   TTR Z-CODE FOR POINT MACRO
         SPACE
JFCBXLST DS    XL4                 EXIT LIST FOR CATALOG JFCB
         SPACE
DCBLIST  DS    XL8                 DCB LIST FOR OPENING PRINTER+READER
         SPACE
OPENLIST DS    XL4                 DCB LIST FOR OPENING CATALOG
CLOSLIST DS    XL4                 DCB LIST USED FOR ALL CLOSINGS
         SPACE
CATBUFRS DS    2A                  CATLG BUFFERS BEING FILLED/PROCESSED
         SPACE
MSGPTRS  DS    2A                  PRINTER MESSAGE POINTERS
         SPACE
PRTSEGS  DS    2A                  LEFT & RIGHT SEGMENTS TO BE PRINTED
         SPACE
FRSTSEGS DS    2A                  SEGMENT AREAS BEING FILLED/PRINTED
         SPACE
SEGADDR  DS    A                   ADDR OF CURRENT PRINT LINE SEGMENT
         SPACE
RTRNCODE DS    X                   SYSTEM RETURN CODE
         SPACE
PRTCODE  DS    X                   PRINTER SUBROUTINE CODES
*                                    X'80'  HEADING2 TO FOLLOW HEADING
*                                    X'40'  HEADING3 TO FOLLOW HEADING
*                                    X'08'  END-OF-PRINT IN PROGRESS
*                                    X'04'  MESSAGE LNGTH/ADDR IN R0/R1
*                                    X'02'  MESSAGE POINTER IN R1
*                                    X'01'  DOUBLE SPACE ON NEXT LINE
         SPACE 1
OPCODE   DS    X                   CODE FOR CURRENT OPERATION
         SPACE
         DS    X                   (USED TO SET TRTTABLE TO 256X'4')
TRTTABLE DS    XL256               VARIABLE TRANSLATE TABLE FOR TRT'S
         SPACE
OPERAND  DS    CL17                CURRENT OPERAND (VOL=ETC.)
         SPACE
VOLUME   DS    CL6                 CONTROL VOLUME IDENTIFIER
         SPACE
         DS    C                   (DESTROYED CLEARING HIGH-LEVEL NAME)
DSNAME   DS    CL44,CL8            DATA SET OR INDEX NAME & SPARE BYTES
         SPACE
         DS    0F
READER   DS    XL96                READER DATA CONTROL BLOCK
RDROFLGS EQU   READER+48           READER OPEN FLAGS
         SPACE
PRINTER  DS    XL96                PRINTER DATA CONTROL BLOCK
PRTOFLGS EQU   PRINTER+48          PRINTER OPEN FLAGS
         SPACE
CATALOG  DS    XL88                CATALOG DATA CONTROL BLOCK
CATCCHHR EQU   CATALOG+8           CATALOG CYL, HEAD & RECORD ADDRESS
CATEXLST EQU   CATALOG+37          CATALOG EXIT LIST ADDRESS
CATDDNAM EQU   CATALOG+40          CATALOG DATA DEFINITION NAME
CATDEBAD EQU   CATALOG+44          CATALOG DATA EXTENT BLOCK ADDRESS
         SPACE
UNPRTCNT DS    PL2                 LINES STILL TO BE PRINTED ON PAGE
         SPACE
LINECNT  DS    PL2                 LINES STILL TO BE FILLED ON PAGE
PAGECNT  DS    PL2                 CURRENT PAGE NUMBER
         SPACE
MAXLCNT  DS    PL2                 MAXIMUM LINES PER PAGE MINUS THREE
         SPACE
SEGCNT   DS    PL2                 SEGMENTS STILL TO BE FILLED ON PAGE
         SPACE
MAXSCNT  DS    PL2                 MAXIMUM SEGMENTS PER PAGE MINUS ONE
         SPACE
CATBLKS  DS    PL3                 TOTAL CATALOG BLOCKS
BLKSUSED DS    PL3                 BLOCKS ACTUALLY USED
         SPACE
CCHHRZ   DS    0XL6                CCHHR FIELD PLUS FOLLOWING BYTE
CCHHR    DS    XL5                 CYL, HEAD & RECORD FOR CATLG BLOCK
INDXFLAG DS    X                   INDEX FLAG (0=NORMAL, 1=EMPTY)
         SPACE
BUFFERS  DS    0D,2XL264           CATALOG BUFFERS (SEQUENTIAL READING)
         SPACE
POINTERS EQU   BUFFERS             POINTER SAVE AREAS (DS 22XL12)
*                                    USED DURING LISTCTLG OPERATION
*                                      (EQUIVALENT TO CATLG BUFFER #1)
STRGPTR  EQU   POINTERS                    STORAGE FOR THIS INDEX LEVEL
DSNAMPTR EQU   POINTERS+4                  CURRENT PLACE IN DSNAME FLD
ENTRYPTR EQU   POINTERS+8                  NEXT ENTRY TO BE PROCESSED
         SPACE 1
FORMSEGS DS    22CL39              'LISTFORM' PRINT LINE SEGMENTS
         SPACE
         DS    0D
WRKLNGTH EQU   *-WORKSCTN      LENGTH OF WORKING DUMMY CONTROL SECTION
         EJECT                                                      PES
* * * * * * *   PRINT  RECORD  DUMMY  CONTROL  SECTION   * * * * * * *
         SPACE
PRTSCTN  DSECT
         SPACE
PRTRCRD  DS    0CL133  LOGICAL PRINTER RECORD
         SPACE
PRTCC    DS    C           PRINTER CONTROL CHARACTER (ANSI)
PRTMSG   DS    0CL132      PRINTER MESSAGE (LINE TO BE PRINTED)
         SPACE 2
*                              'LISTFORM' PRINT LINE FORMAT
         SPACE
PRTTTRZ  DS    0CL7                TTR FIELD PLUS FOLLOWING BYTE
PRTTTR   DS    CL6                     TTR FOR BLOCK BEING LISTED
PRTZ     EQU   *                       (EXTRA BYTE FOR UNPACKING)
         DS    3C' '
PRTFSEG  DS    0CL39               'LISTFORM' PRINT LINE SEGMENT
         SPACE
PRTFNAME DS    CL8                     CATALOG ENTRY NAME
         DS    C' '
PRTFTYPE DS    CL4                     TYPE OF ENTRY (INTERPRETED)
         DS    C' '
PRTFTTRZ DS    0CL7                    TTR FIELD PLUS FOLLOWING BYTE
PRTFTTR  DS    CL6                         POINTER TO NEXT ENTRY (TTR)
PRTFZ    EQU   *                           (EXTRA BYTE FOR UNPACKING)
         DS    2C' '
PRTFDATA DS    CL17                    OTHER DATA (ENTRIES WITH TTR'S)
         SPACE
         ORG   PRTFZ                 OTHER DATA (ENTRIES WITHOUT TTR'S)
         SPACE
PRTFDEV  DS    CL6                     INTERPRETED DEVICE TYPE
         DS    2C' '
PRTFVOL  DS    CL6                     VOLUME IDENTIFIER
*
PRTFXSEQ DS    0CL5                    EDITING BYTE AND 'PRTFSEQ' FIELD
         DS    C' '
PRTFSEQ  DS    CL4                         FILE SEQ NUMBER (MAG TAPES)
         SPACE
*                                    (END OF 'PRTFDATA' OR 'PRTFSEQ')
         DS    3C' '
PRTFSEG2 DS    CL39                SECOND SEGMENT (SAME FORMAT)
         DS    3C' '
PRTFSEG3 DS    CL39                THIRD SEGMENT (SAME FORMAT)
         SPACE 1
         ORG   PRTMSG          'LISTCTLG' PRINT LINE FORMAT
         SPACE
PRTCSEG  DS    0CL64               'LISTCTLG' PRINT LINE SEGMENT
         SPACE
PRTDSNAM DS    0CL44                   DATA SET OR INDEX NAME
PRTPANAM DS    CL8,12C' '                  POINTER OR ALIAS NAME
PRTPAMSG DS    CL24                        POINTER OR ALIAS MESSAGE
         DS    C' '
PRTDEVTP DS    CL6                     INTERPRETED DEVICE TYPE
         DS    2C' '
PRTVOLID DS    CL6                     VOLUME IDENTIFIER
*
PRTXSEQ  DS    0CL5                    EDITING BYTE AND 'PRTSEQ' FIELD
         DS    C' '
PRTSEQ   DS    CL4                         FILE SEQ NUMBER (MAG TAPES)
         DS    4C' '
PRTCSEG2 DS    CL64                SECOND SEGMENT (SAME FORMAT)
         SPACE 2
         ORG   PRTMSG          DUMP ROUTINE PRINT LINE FORMAT
         SPACE
PRTDISP  DS    CL10                DISPLACEMENT -- 0HEX (DEC)
         DS    4C' '
PRTHEX   DS    CL(4*8+3)           4 HEX WORDS WITH 1-BLANK SEPARATORS
         DS    3C' '
PRTHEX2  DS    CL(4*8+3)           4 HEX WORDS WITH 1-BLANK SEPARATORS
         DS    4C' '
PRTBCDX  DS    C'*'                EBCDIC DUMP WITH
PRTBCD   DS    CL32                  NONALPHAMERIC CHARACTERS
PRTBCDXX DS    C'*'                    ALL TRANSLATED TO PERIODS
         SPACE 3
* * * * * * *   CATALOG  ENTRY  DUMMY  CONTROL  SECTION   * * * * * * *
         SPACE
CATSCTN  DSECT
         SPACE
CATNAME  DS    CL8                 CATALOG ENTRY NAME
         SPACE
CATTTRZ  DS    0XL4                TTR FIELD PLUS FOLLOWING BYTE
CATTTR   DS    XL3                     POINTER TO NEXT ENTRY (TTR)
CATTYPE  DS    X                       TYPE OF ENTRY (IN CODED FORM)
         SPACE
CATDATA  EQU   *                   ADDITIONAL DATA (VARIOUS LENGTHS)
         SPACE 3
         END   LISTCTLG
