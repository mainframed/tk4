         TITLE '   A S M R 9 0      '
*$DOC@*****************************************************************
*                                                                     *
*  ASMR90/ASMR90S - INVOKE ASSEMBLER H, ROTATE THE LISTING            *
*                                                                     *
***********************************************************************
*
*  WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*  INSTALLATION. AIR FORCE DATA SERVICES CENTER, THE PENTAGON.
*  DATE WRITTEN. JUNE 5 1980.
*  DATE UPDATED. MAY 25 1982.
*  ATTRIBUTES. RE-ENTRANT.
*
*  THIS PROGRAM INVOKES THE ASSEMBLER (H) AND THEN INVOKES A
*  PROGRAM WHICH MODIFIES THE LISTING FOR A 90-DEGREE ROTATION
*  CHARACTER SET, 12 LINES PER INCH, ON A 3800 PRINTER.
*  TWO PAGES WILL FIT ON ONE PHYSICAL PAGE.
*
*  THE ASSEMBLER PRINT OUTPUT IS DIRECTED TO AN INTERMEDIATE
*  SYSUT9 FILE.  AFTER THE ASSEMBLER ENDS, THAT FILE IS READ
*  BY THE ROTATE PROGRAM, ROTATED, AND WRITTEN TO DDNAME 'ROTATE'.
*
*  BEFORE CALLING THE ROTATE PROGRAM, A CHECK IS MADE TO SEE IF
*  DDNAME 'ROTATE' IS ABSENT OR DUMMY, AND IF SO, THEN THE ROTATE
*  PROGRAM IS NOT CALLED AND THIS PROGRAM COPIES SYSUT9 TO SYSPRINT.
*
*  DDNAMES REQUIRED -
*     SAME DDNAMES AS ASSEMBLER H REQUIRES, EXCEPT SYSPRINT.
*        NAMELY - SYSIN, SYSLIB, SYSUT1,
*        AND OPTIONALLY SYSLIN, SYSPUNCH, SYSTERM.
*     PLUS 2 NEW DDNAMES -
*     SYSUT9 - WORKSPACE WHERE ASSEMBLER WILL WRITE SYSPRINT
*              AND THE ROTATE PROGRAM WILL READ IT BACK IN.
*     ROTATE - ROTATED PRINT OUTPUT, USUALLY ALLOCATED TO SYSOUT
*              FOR A 3800 PRINTER WITH SPECIAL FCB AND CHARS.
*     IF ROTATE IS DUMMY OR ABSENT, SYSPRINT IS REQUIRED.
*
*  PARM FIELD -
*     WILL BE PASSED TO THE ASSEMBLER UNCHANGED, UNLESS THE
*     FIRST KEYWORD IS ANY OF THE FOLLOWING -
*       SQUISH,  NOSQUISH,  SQUISH(YES),  SQUISH(NO),  SQUISH(),
*       SQ,      NOSQ,      SQ(YES),      SQ(NO),      SQ() .
*     IF THE FIRST KEYWORD IS ANY OF THE ABOVE, FOLLOWED BY
*     A COMMA, THEN THE TEXT FOLLOWING THE COMMA WILL BE
*     PASSED ON TO THE ASSEMBLER.  THE COMMA MAY BE OMITTED
*     ONLY IF IT IS THE LAST CHARACTER IN THE PARM FIELD. IF
*     ANYTHING OTHER THAN A COMMA FOLLOWS THE KEYWORD, THE
*     KEYWORD WILL NOT BE RECOGNIZED AND WILL BE PASSED ON
*     TO THE ASSEMBLER AS AN ASSEMBLER PARM.
*
*     SQUISH MEANS MORE THAN 2 PAGES WILL BE SQUEEZED ON
*     EACH PHYSICAL PAGE IF THERE IS ROOM.
*     NOSQUISH MEANS THERE WILL ALWAYS BE 2 PAGES PER PHYSICAL PAGE.
*
*  EXTERNAL CALLS -
*     INVOKES 'IEV90' (IBM PROGRAM PRODUCT, ASSEMBLER H),
*     AND 'ROTATER' (PRINT ROTATE PROGRAM).
*
*  CHANGES -
*     11JUN80 - PARM FIELD SQUISH KEYWORD SUPPORT ADDED.
*     01OCT80 - TEST FOR ROTATE DD ABSENT OR DUMMY, AND
*               COPY TO SYSPRINT IF SO.
*     25MAY82 - INVOKE A DIFFERENT ROTATER PROGRAM, NAMED
*               'ROTATER', INSTEAD OF 'P38R90'.  THE SQUISH
*               OPTION FOR 'ROTATER' IS INDICATED IN THE PARM
*               FIELD RATHER THAN ENTRY POINT.
*
*  WHY NOT JUST LET THE ASSEMBLER WRITE TO SYSPRINT WHEN THE
*  ROTATE DD IS MISSING OR DUMMY?  BECAUSE WE HAVE SOME PROCS
*  THAT PUT A BANNER IN A PRINT FILE IN STEP 1, PASS THE FILE
*  TO STEP 2 (THIS PROGRAM) UNDER DDNAME SYSUT9, WHERE THE
*  ASSEMBLY LISTING IS APPENDED TO THE BANNER DISP=MOD.
*  THE PROCS REQUIRE THAT THE LISTING BE PUT IN SYSUT9.
*
*  PRIOR TO THE EXISTENCE OF THIS PROGRAM, THE FOLLOWING JCL
*  WAS USED:
*   //ASM EXEC PGM=IEV90
*   //SYSPRINT DD  UNIT=SYSDA,SPACE=(TRK,100),
*   //             DSN=&&PRINT,DISP=(NEW,PASS)
*   //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
*   //SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,100)
*   //SYSIN    DD  DSN=SOURCE,DISP=SHR
*   //ROTATE  EXEC PGM=ROTATER
*   //SYSUT1   DD  DSN=&&PRINT,DISP=(OLD,DELETE)
*   //SYSUT2   DD  SYSOUT=S,CHARS=TURN,FCB=LN12
*
*  WITH THIS PROGRAM, THE 2 STEPS CAN BE COMBINED INTO THE FOLLOWING:
*   //ASM EXEC PGM=ASMR90
*   //SYSUT9   DD  UNIT=SYSDA,SPACE=(TRK,100)
*   //SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
*   //SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,100)
*   //SYSIN    DD  DSN=SOURCE,DISP=SHR
*   //ROTATE   DD  SYSOUT=S,CHARS=TURN,FCB=LN12
*
*$DOC$*****************************************************************
         EJECT
ASMR90   START
         USING *,R15
         B     @PROLOG
         DC    AL1(11),CL11'ASMR90'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
         SPACE
         ENTRY ASMR90S
         USING *,R15
ASMR90S  STM   14,12,12(R13)       SAVE REGISTERS
         LA    R3,1                INDICATE ALTERNATE ENTRY
         SH    R15,@ENTRYB         ADJUST BASE ADDRESS
         USING ASMR90,R15          ADJUST ASSEMBLER TO NEW BASE
         B     @PROLOGE            JUMP IN
@ENTRYB  DC    AL2(ASMR90S-ASMR90) OFFSET FROM TOP
         SPACE
@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS
         SLR   R3,R3               INDICATE PRIMARY ENTRY
@PROLOGE LR    R12,R15             LOAD BASE REGISTER
         USING ASMR90,R12
         DROP  R15
         LR    R2,R1               PARM POINTER
         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH
         GETMAIN R,LV=(0)
         LR    R9,R1               INITIALIZE WORKAREA POINTER
         USING @DATA,R9
         SPACE 1
         XC    000(256,R1),000(R1)
         XC    256(256,R1),256(R1)
         XC    512(@DATAL-512,R1),512(R1)
         SPACE 1
         ST    R13,4(,R9)          CHAIN SAVEAREAS
         ST    R9,8(,R13)          CHAIN SAVEAREAS
         LR    R13,R9              UPDATE SAVEAREA POINTER
         EJECT
************************************************************
*                                                          *
*        DETERMINE SQUISH OPTION                           *
*                                                          *
************************************************************
         SPACE
         MVC   ASMNAME,=CL8'IEV90'
         MVC   PGMNAME,=CL8'ROTATER'
         MVI   SQV,SQY             SET SQUISH ON INITIALLY
         LTR   R3,R3               PRIMARY ENTRY
         BNZ   *+8                 NO, SKIP NEXT INSTR
         MVI   SQV,SQN             YES, DO NOT SQUISH
         SPACE
         L     R2,0(,R2)           GET PARM ADDRESS
         LA    R2,0(,R2)           ZERO HIGH ORDER BYTE
         LH    R3,0(,R2)           GET PARM LENGTH
         LA    R4,2(,R2)           POINT TO PARM TEXT
         LTR   R3,R3               IS PARM LENGTH ZERO
         BZ    SAMEPARM            YES, BRANCH
         LA    R5,6                LOOK AT 6-CHAR STRINGS
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SQ                  NO, BRANCH
         CLC   0(6,R4),SQUICON+2   SQUISH
         BE    SQUISH              YES, BRANCH
         LA    R5,8                LOOK AT 8-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SQ                  NO, BRANCH
         CLC   0(8,R4),SQUICON     NOSQUISH
         BE    SQNISH              YES, BRANCH
SQ       LA    R5,2                LOOK AT 2-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SAMEPARM            NO, BRANCH
         CLC   0(2,R4),SQUICON+2   SQ
         BE    SQUISH              YES, BRANCH
         LA    R5,4                LOOK AT 4-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SAMEPARM            NO, BRANCH
         CLC   0(4,R4),SQUICON     NOSQ
         BE    SQNISH              YES, BRANCH
         B     SAMEPARM
         SPACE
SQUISH   SR    R3,R5               GET LENGTH OF REM TEXT
         BZ    SQUSET              BRANCH IF NOTHING FOLLOWS
         AR    R4,R5               POINT TO REST OF TEXT
         CLI   0(R4),C','          COMMA
         BNE   SQSUB               NO, BRANCH
         LA    R4,1(,R4)           POINT PAST COMMA
         BCTR  R3,0                REDUCE LENGTH BY 1
SQUSET   MVI   SQV,SQY             YES, VALID KEYWORD
         B     COPYPARM
         SPACE
SQNISH   SR    R3,R5               GET LENGTH OF REM TEXT
         BZ    SQNSET              BRANCH IF NOTHING FOLLOWS
         AR    R4,R5               POINT TO REST OF TEXT
         CLI   0(R4),C','          COMMA
         BNE   SAMEPARM            NO, PASS ENTIRE PARM
         LA    R4,1(,R4)           POINT PAST COMMA
         BCTR  R3,0                REDUCE LENGTH BY 1
SQNSET   MVI   SQV,SQN
         B     COPYPARM
         SPACE
SQSUB    CLI   0(R4),C'('          OPEN PAREN, IS SUBFIELD PRESENT
         BNE   SAMEPARM            NO, BRANCH
         LA    R5,2                LOOK AT 2-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SAMEPARM            NO, BRANCH
         CLC   0(2,R4),=C'()'      IS SUBFIELD NULL
         BE    SQSUBD              YES, DONT CHANGE SQV
         LA    R5,4                LOOK AT 4-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SAMEPARM            NO, BRANCH
         CLC   0(4,R4),=C'(NO)'    IS SUBFIELD NO
         BE    SQSUBN              YES, BRANCH
         LA    R5,5                LOOK AT 5-CHAR STRING
         CR    R3,R5               IS TEXT LONG ENOUGH
         BL    SAMEPARM            NO, BRANCH
         CLC   0(5,R4),=C'(YES)'   IS SUBFIELD YES
         BNE   SAMEPARM            NO, BRANCH
SQSUBY   SR    R3,R5               GET LENGTH OF REM TEXT
         BZ    SQUSET              BRANCH IF NOTHING ELSE
         AR    R4,R5               POINT TO REM TEXT
         CLI   0(R4),C','          COMMA
         BNE   SAMEPARM
         LA    R4,1(,R4)           POINT PAST COMMA
         BCTR  R3,0                REDUCE LENGTH BY 1
         B     SQUSET
SQSUBN   SR    R3,R5               GET LENGTH OF REM TEXT
         BZ    SQNSET              BRANCH IF NOTHING ELSE
         AR    R4,R5               POINT TO REM TEXT
         CLI   0(R4),C','          COMMA
         BNE   SAMEPARM
         LA    R4,1(,R4)           POINT PAST COMMA
         BCTR  R3,0                REDUCE LENGTH BY 1
         B     SQNSET
SQSUBD   SR    R3,R5               GET LENGTH OF REM TEXT
         BZ    COPYPARM            BRANCH IF NOTHING ELSE
         AR    R4,R5               POINT TO REM TEXT
         CLI   0(R4),C','          COMMA
         BNE   SAMEPARM
         LA    R4,1(,R4)           POINT PAST COMMA
         BCTR  R3,0                REDUCE LENGTH BY 1
COPYPARM LA    R2,PARM1LEN         POINT TO NEW PARM AREA
         STH   R3,0(,R2)           SET LENGTH IN NEW PARM AREA
         LTR   R3,R3               IS LENGTH ZERO
         BZ    NULLPARM            YES, BYPASS MOVE
         BCTR  R3,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   2(0,R2),0(R4)       (EXECUTED)
         EX    R3,*-6              MOVE REST OF PARM
NULLPARM EQU   *
         SPACE
************************************************************
*                                                          *
*        SET UP PARM LISTS                                 *
*                                                          *
************************************************************
         SPACE
SAMEPARM ST    R2,PARM1PTR         STORE ADDRESS OF PARM
         LA    R0,DDNL1            POINT TO DDNAME LIST
         ST    R0,PARM1PTR+4       STORE ADDRESS OF DD LIST
         OI    PARM1PTR+4,X'80'    INDICATE END OF ADDRESS LIST
         LA    R0,PARM2LEN         POINT TO ROTATE PARM
         ST    R0,PARM2PTR         STORE ADDRESS OF PARM
         OI    PARM2PTR+0,X'80'    INDICATE END OF ADDRESS LIST
         EJECT
************************************************************
*                                                          *
*        DDNAME LIST                                       *
*                                                          *
************************************************************
         SPACE
*                      ASSEMBLER H
*                      --------
*                   1  SYSLIN
*                   2  .
*                   3  .
*                   4  SYSLIB
*                   5  SYSIN
*                   6  SYSPRINT
*                   7  SYSPUNCH
*                   8  SYSUT1
*                   9  SYSTERM
         SPACE
************************************************************
*                                                          *
*        CHANGE ASSEMBLER DDNAMES                          *
*                                                          *
************************************************************
         SPACE
         MVC   DDNL1(2),=AL2(09*8) LENGTH OF DDNAMES
         LA    R1,DDNL1+2
         XC    0(09*8,R1),0(R1)
         MVC   (6-1)*8(8,R1),=CL8'SYSUT9' SYSPRINT NOW SYSUT9
         SPACE
************************************************************
*                                                          *
*        CHANGE ROTATE DDNAMES                             *
*                                                          *
************************************************************
         SPACE
         LA    R0,17               LENGTH OF PARM
         STH   R0,PARM2LEN
         MVC   PARM2+0(8),=CL8'SYSUT9' INPUT DDNAME
         MVC   PARM2+8(8),ROTATEDD     OUTPUT DDNAME
         MVC   PARM2V,SQV              SQUISH OPTION
         EJECT
************************************************************
*                                                          *
*        CALL THE ASSEMBLER                                *
*                                                          *
************************************************************
         SPACE
         LA    R1,PARM1PTR
         SPACE
         LINK  EPLOC=ASMNAME,SF=(E,LINKAREA)
         SPACE
         LR    R2,R15              SAVE ASSEMBLER RETURN CODE
         SPACE
************************************************************
*                                                          *
*        IF ROTATE IS DUMMY, COPY SYSUT9 TO SYSPRINT       *
*                                                          *
************************************************************
         SPACE
         DEVTYPE ROTATEDD,DEVDATA
         LTR   R15,R15             IS ROTATE DD PRESENT
         BNZ   COPY                NO, BRANCH TO COPY
         NC    DEVDATA(8),DEVDATA  IS ROTATE DD DUMMY
         BNZ   ROTATE              NO, BRANCH TO ROTATE
COPY     EQU   *
         LA    R3,UT9W
         LA    R4,PRTW
UT9R     EQU   3                   REGISTER CONTAINING DCB ADDRESS
PRTR     EQU   4                   REGISTER CONTAINING DCB ADDRESS
         MVC   0(UT9L,UT9R),UT9    COPY DCB TO KEEP CODE RE-ENTRANT
         MVC   0(PRTL,PRTR),PRT    COPY DCB TO KEEP CODE RE-ENTRANT
         MVI   OPENW,X'80'         ONLY ONE DCB IN OPEN/CLOSE LIST
         OPEN  ((UT9R),INPUT),MF=(E,OPENW)
         OPEN  ((PRTR),OUTPUT),MF=(E,OPENW)
COPYREAD EQU   *
         GET   (UT9R)
         LR    R0,R1               GET RECORD ADDRESS INTO R0
         PUT   (PRTR),(0)
         B     COPYREAD
COPYEOD  EQU   *
         CLOSE ((PRTR)),MF=(E,CLOSEW)
         CLOSE ((UT9R)),MF=(E,CLOSEW)
         B     EXIT
         SPACE
PRTEXIT  CLI   RECFM(R4),0             IS RECFM SPECIFIED
         BNE   *+10                    YES, SKIP NEXT INST
         MVC   RECFM(1,R4),RECFM(R3)   NO, USE INPUT RECFM
         NC    LRECL(2,R4),LRECL(R4)   IS LRECL SPECIFIED
         BNZ   *+10
         MVC   LRECL(2,R4),LRECL(R3)   NO, USE INPUT LRECL
         NC    BLKSI(2,R4),BLKSI(R4)   IS BLKSI SPECIFIED
         BNZ   *+10
         MVC   BLKSI(2,R4),BLKSI(R3)   NO, USE INPUT BLKSI
         BR    R14
         SPACE
************************************************************
*                                                          *
*        CALL THE ROTATER                                  *
*                                                          *
************************************************************
         SPACE
ROTATE   LA    R1,PARM2PTR
         SPACE
         LINK  EPLOC=PGMNAME,SF=(E,LINKAREA)
         SPACE
EXIT     LR    R15,R2              RESTORE ASSEMBLER RETURN CODE
         LR    R1,R13              POINT R1 TO AREA TO BE FREED
         L     R0,@SIZE            SUBPOOL AND LENGTH
         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA
         LR    R2,R15              SAVE RETURN CODE
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2              RESTORE RETURN CODE
         LM    0,12,20(R13)        RESTORE REGISTERS 0 - 12
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         BR    14                  RETURN
         EJECT
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         LTORG
ROTATEDD DC    CL8'ROTATE'
SQUICON  DC    C'NOSQUISH'
* SQY    EQU   X'40'         SQUISH PGM NAME P38R90
* SQN    EQU   C'B'        NOSQUISH PGM NAME P38R90B
SQY      EQU   C'S'          SQUISH PARM OPTION
SQN      EQU   C' '        NOSQUISH PARM OPTION
         PRINT NOGEN
UT9      DCB   DDNAME=SYSUT9,DSORG=PS,MACRF=(GL),EODAD=COPYEOD
UT9L     EQU   *-UT9
PRT      DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),EXLST=EXLST
PRTL     EQU   *-PRT
         PRINT GEN
EXLST    DC    0F'0',X'85',AL3(PRTEXIT)
RECFM    EQU   36                  OFFSET INTO DCB
BLKSI    EQU   62                  OFFSET INTO DCB
LRECL    EQU   82                  OFFSET INTO DCB
         DC    0D'0'               END OF CSECT
         SPACE
************************************************************
*                                                          *
*        MAP OF GETMAINED WORKAREA                         *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
LINKAREA DS    2F
ASMNAME  DS    CL8
PGMNAME  DS    CL8
PARM1PTR DS    2F
PARM1LEN DS    H
PARM1    DS    CL100               COPY OF PARM TEXT
         DS    0D
         DS    3H
DDNL1    DS    H
         DS    09CL8               DDNAMES
PARM2PTR DS    2F
PARM2LEN DS    H
PARM2    DS    02CL8               DDNAMES
PARM2V   DS    C                   SQUISH OPTION
SQV      DS    C
DEVDATA  DS    2F
OPENW    DS    0F                  OPEN MF=L
CLOSEW   DS    F                   CLOSE MF=L
UT9W     DS    0F,(UT9L)X          DCB
PRTW     DS    0F,(PRTL)X          DCB
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
