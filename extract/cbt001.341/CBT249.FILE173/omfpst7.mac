* PROCESS MACRO,MAR(2,72);
 /*OMFPST7: PRODUCE EQUIVALENT OF CPU COMMAND OUTPUT FROM OMF1 RECORD*/
 OMFPST7: PROC OPTIONS(MAIN REENTRANT) REORDER;
 /********************************************************************/
 /* PROCEDURE: OMFPST7                                               */
 /* FUNCTION:                                                        */
 /*            POST PROCESSOR ON  OMF1 RECORD (30 SECOND SUMMARY)    */
 /*              DISPLAY MARGINAL STATE PROBABILITIES BASED          */
 /*             FOR SPECIFIED TIME PERIODS.                          */
 /*                  OUTPUT JUST LIKE THAT OF THE CPU COMMAND        */
 /* ATTRIBUTES: NONE                                                 */
 /* EXTERNAL: NONE                                                   */
 /* INPUT:                                                           */
 /*     FILE SYSIN CONTAINS PARAMETERS IN OURMF FORMAT               */
 /*           START( YYDDD HHMMSS )  /* STARTING DATE AND TIME       */
 /*           END  ( YYCCC HHMMSS )  /* ENDING DATE AND TIME         */
 /*           HOURS( HHMMSS HHMMSS)  /* APPLICABLE HOURS DURING      */
 /*                                  /* THIS TIME PERIOD             */
 /*           BREAK(HHMMSS HHMMSS......) /* BREAK TIMES UP TO 15     */
 /* DEFAULTS: SUMMARIZE ALL RECORDS                                  */
 /* IF NO BREAKS ARE SPECIFIED, ONE CPU-TYPE OUTPUT WILL BE PRODUCED */
 /* FOR THE WHOLE RANGE SPECIFIED. OTHERWISE THERE WILL BE A CPU-TYP */
 /* OUTPUT EACH TIME A BREAK HOUR HAS BEEN PASSED.  HOURS MUST BE    */
 /* SPECIFIED IN ASCENDING ORDER. EXAMPLES ARE:                      */
 /* BREAK(000000)- CAUSES A NEW OUTPUT FOR EACH DAY IN THE REPORT.   */
 /* BREAK(010000 090000 170000)--                                    */
 /*       SEPARATE CPU REPORTS WILL BE PRODUCED FOR EACH             */
 /*       1AM-9AM,9AM-5PM,5PM-1AM PERIOD ENCOUNTERED IN THE DATA.    */
 /*                                                                  */
 /* ONE PICTURE IS WORTH A LOT OF DOCUMENTATION:                     */
 %SKIP(2);
 /* FIRST DATE        77/221          FIRST TIME     17.00.01        */
 /* LAST DATE         77/221          LAST TIME      18.13.56        */
 /* CPU UTILIZATION    95.0           SAMPLE SIZE       4,800        */
 /* SUPERVISOR STATE   57.9           SAMPLE SIZE       17040        */
 /* USERSTATE          40.4           AVG READY TCBS      2.6        */
 /* SUPERVISOR STATE IS  SVC: 34.9   SRB: 17.7   OTHER:  5.1         */
 /* KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM        PCT            */
 /*  0  52.1  ×    0  9.3  ×   0  10.8  ×  IFEAAB    10.2            */
 /*  1   3.6  ×   10  4.2  ×   1  43.4  ×  GATE       5.6            */
 /*  2   0.0  ×   16  2.7  ×   2  33.0  ×  TAPECHRG   4.0            */
 /*  3   0.0  ×   26  1.6  ×   3   0.0  ×  QEDMAIN    3.8            */
 /*  4   0.0  ×    1  1.2  ×   4   0.0  ×  DATATEXT   3.8            */
 /*  5   1.2  ×   99  1.2  ×   5   0.0  ×  IEL0AC     3.7            */
 /*  6   1.9  ×   56  1.0  ×   6   3.9  ×  IEDTCAM1   3.4            */
 /*  7   0.0  ×   19  0.9  ×   7   0.0  ×  **GO       2.9            */
 /*  8  41.0  ×   20  0.8  ×   8   4.5  ×  IEFIIC     2.8            */
 /*  9   0.0  ×   60  0.8  ×   9   4.1  ×  IGIFORT    2.5            */
 %SKIP(2);
 /* THIS IS A TYPICAL OUTPUT FROM CPU. THE VALUES ARE DEFINED        */
 /* AS FOLLOWS:                                                      */
 /* CPU UTILIZATION - % OF THE SAMPLE WITH THE WAIT BIT OFF.         */
 /*    (NOTE: THIS IS THE ONLY % WHICH IS BASED ON THE WHOLE         */
 /*     SAMPLE. ALL OTHER PERCENTS ARE NOW BASED ON COUNT OF         */
 /*     NON-WAIT STATE PSW'S).                                       */
 /* SUPERVISOR STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT         */
 /*     OFF.                                                         */
 /* USER STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT ON AND        */
 /*     NON-SYSTEM KEY (>7).                                         */
 /* SUPERVISOR STATE IS FURTHER SUBDIVIDED INTO THE PERCENTAGES      */
 /* WHEN AN SVC WAS IN CONTROL IN TASK MODE, WHEN AN SRB IS          */
 /* IN CONTROL, AND OTHER (WHICH INCLUDES FOR EXAMPLE, MODESET       */
 /* TIME, INITIATOR TIME, JES AND TCAM TASK TIME IN SUPERVISOR       */
 /* STATE, ETC).                                                     */
 /* THE FOUR COLUMNS OF PERCENTAGES ARE SEPARATE AND TOTAL           */
 /*     VERTICALLY. YOU DO NOT READ THEM ACROSS THE ROWS,            */
 /*     BECAUSE THERE IS NO HORIZONTAL ASSOCAITION. ONLY             */
 /*     TEN ITEMS APPEAR IN EACH COLUMN, THOUGH IT IS EASY           */
 /*     TO MODIFY THE PROGRAM TO PRINT MORE. THE COLUMNS             */
 /*     WILL NOT TOTAL TO 100% OF COURSE IF THERE IS                 */
 /*     ANY OMITTED NON-ZERO VALUE.                                  */
 /* KEY - BREAKS DOWN ACTIVE TIME BY PROTECT KEY.                    */
 /* SVC - BREAKS DOWN ACTIVE TIME BY THE SVC NUMBER OF THE TEN       */
 /*       MOST ACTIVE SVCS.                                          */
 /* PG  - BREAKS DOWN ACTIVE TIME BY THE PERFORMANCE GROUP OF        */
 /*       THE ASID IN CONTROL.                                       */
 /* PGM - BREAKS DOWN ACTIVE TIME BY THE CDENAME POINTED TO BY       */
 /*       THE HIGHEST PRB ON THE RB QUEUE.                           */
 /* AUTHOR:  HOWARD GILBERT AND GARY BERGER                          */
 /*          175 WHITNEY AVE                                         */
 /*          NEW HAVEN, CT 06520                                     */
 /*          203 432-4080                                            */
 /* DISTRIBUTION                                                     */
 /*     THIS PROGRAM IS NOT RESTRICTED IN ANY WAY AND MAY BE         */
 /* MODIFIED OR DISTRIBUTED IN ANY MANNER AND FOR ANY PURPOSE.       */
 /* IT IS SUGGESTED THAT OTHER OURMF POST PROCESSORS CONSIDER        */
 /* COMPATIBLE SYNTAX AND PARAMETER SCANNING.                        */
 /*                                                                  */
 /* VERSION: AUGUST 31,1977                                          */
 /* PREPROCESSOR PARAMETERS GOVERNING VARIABLE DIMENSIONS */
 %DCL (SIZE,MODULUS) FIXED;
 /* SIZE AND MODULUS EFFECT THE ALLOCATION OF THE HASH TABLE         */
 /* FOR PROGRAM NAMES. THEY SHOULD BE CHOSEN BASED ON A GENEROUS     */
 /* ESTIMATE OF THE NUMBER OF UNIQUE PROGRAM NAMES. MODULUS MUST     */
 /* BE A PRIME NUMBER. IF MORE THAN 'SIZE' UNIQUE MODULE NAMES ARE   */
 /* ENCOUNTERED, THE ERROR CONDITION IS RAISED.                      */
 %SIZE=2000;
 %MODULUS=503;
 %PAGE;
 /* THE FOLLOWING STRUCTURE WILL CONTAIN INFORMATION DERIVED FROM    */
 /* PARSING THE SYSIN PARAMETER CARDS. THE INITIAL VALUES ARE        */
 /* THE DEFAULTS FOR EACH PARAMETER                                  */
 DCL 1 OPTIONS,
         5 STARTDATE FIXED DEC(7) INIT(0),
         5 STARTHOUR FIXED DEC(7) INIT(0),
         5 ENDDATE FIXED DEC(7) INIT(99365),
         5 ENDHOUR FIXED DEC(7) INIT(240000),
         5 EARLIEST FIXED DEC(7) INIT(0),
         5 LATEST FIXED DEC(7) INIT(240000),
         5 #BREAKS FIXED BIN INIT(0),
         5 BKARRAY(20) FIXED DEC(7);
 %SKIP(2);
 %PAGE;
 /* NOW THE THREE FORMAL INCLUDE STATEMENTS FOR THE COMMON           */
 /* POST-PROCESSOR DEFINITIONS.                                      */
 /*   % INCLUDE STATGLBL;                                            */
 /*          TO DEFINE THE DIMENSIONS OF VARIOUS ARRAYS IN THE       */
 /*          OURMF RECORDS.                                          */
 /*   % INCLUDE YCCSTART;                                            */
 /*          TO SET THE DEFAULT RANGE AND PREPROCESSOR VARIABLE      */
 /*          DEFINITIONS REQUIRED BY SOME CONVERTED PLS MACROS.      */
 /*          OMFPST7 DOES NOT USE CONVERTED PLS, BUT IT IS A         */
 /*          GOOD HABIT TO INCLUDE YCCSTART ANYWAY.                  */
 /*   % INCLUDE OURMFDEF;                                            */
 /*          TO DEFINE THE THREE OURMF RECORD TYPES.                 */
 % INCLUDE STATGLBL;
 % INCLUDE YCCSTART;
 % INCLUDE OURMFDEF;
 %PAGE;
 /* NOW FOR SOME LOCALLY DEFINED VARIABLES. 'MAXVALS' AND            */
 /* 'WORDS' ARE USED TO VALIDITY CHECK THE INPUT PARAMETERS          */
 /* AND GENERATE ERROR MESSAGES.                                     */
 DCL MAXVALS(4) FIXED BIN INIT(2,2,2,15);
 DCL WORDS(4) CHAR(8) INIT('START','END','HOURS','BREAK');
 DCL IN INPUT FILE RECORD ENV(VB TOTAL);
 %SKIP(2);
 /* THE FOLLOWING BUCKETS COLLECT THE VARIOUS STATE COUNTS FOR       */
 /* USE IN CALCULATING VARIOUS PERCENTAGES.                          */
  DCL 1 ACCUM,  /* STRUCTURE CONTAINS ACCUMED INFO. ZEROED AT BREAK  */
   2 KEYS(0:15) FIXED BIN INIT((16) 0),   /* BY PROTECT KEY          */
   2 (PBLMCOUNT(2),                       /* PROBLEM STATE           */
         SAMPLE(2),                       /* SAMPLE SIZE             */
         ACTIVES(2),                      /* NON-WAIT                */
         USERCOUNT(2),                    /* PBLM & KEY>7            */
         TCBRDYS)                         /* COUNT READY TCBS        */
         FIXED BIN(31) INIT(0),           /*                         */
   2 PG(0:10) FIXED BIN INIT((11) 0),     /* BY PERFORM              */
   2 SVCS(0:256) FIXED BIN INIT((257) 0), /* BY SVC NUMBER           */
   2 (TENSVC,TENPGM) (0:9) FIXED BIN,     /* TOP 10                  */
   2 SUP,                                 /* SUP BREAKDOWN           */
        3 SVCST FIXED BIN INIT(0),        /* SVC IN TCB              */
        3 SRBST FIXED BIN INIT(0),        /* SRB                     */
        3 OTHER FIXED BIN INIT(0);        /* ALL ELSE                */
 %SKIP(5);
 /* MISCELANEOUS DECLARATIONS                                        */
 DCL (ABS,ADDR,BOOL,MOD,NULL,STRING,TIME,UNSPEC,
      CHAR,
     MIN,HBOUND,PLIRETV) BUILTIN;
 DCL SYSPRINT FILE OUTPUT STREAM;
 DCL (J,II) FIXED BIN;
 DCL (LASTDATE ,  /* DATE OF LAST RECORD PROCESSED */
      LASTTIME ,  /* TIME OF LAST RECORD PROCESSED */
      FIRSTTIME ,  /* TIME OF FIRST SAMPLE */
      FIRSTDATE ,  /* DATE OF FIRST SAMPLE */
      NEXTDATE ,  /* DATE OF NEXT BREAK */
      NEXTTIME )  /* TIME OF NEXT BREAK */
      FIXED DEC(7) INIT(0);
 DCL FTEMP FIXED DEC(7);     /* JUST A TEMPORARY */
 DCL TITLELINE CHAR(100)  VAR; /* TO APPEAR AT TOP OF PAGE */
 %SKIP(5);
  /* HASH VARIABLES                                                  */
 /* TO EFFICIENTLY TABULATE THE PROGRAM NAMES, A HASHING             */
 /* TECHNIQUE IS USED FOR TABLE LOOKUP. THE EIGHT BYTE NAME          */
 /* IS DIVIDED UP INTO 16 BIT PIECES WHICH ARE EXCLUSIVE             */
 /* OR'D TOGETHER, THEN DIVIDED BY A PRIME NUMBER AND THE            */
 /* REMAINDER IS USED TO INDEX INTO 'HASHTAB'. THE ENTRY             */
 /* IN 'HASHTAB' POINTS TO THE FIRST ENTRY IN THE 'HASHBUCKET'       */
 /* STRUCTURE WHICH HASHED TO THAT INDEX, AND SUBSEQUENT             */
 /* NAMES WHICH HASH TO THE SAME NAME ARE CHAINED OFF                */
 /* HASHBUCKET.HASHCHAIN.                                            */
 DCL 1 HASHTAB(0:MODULUS) FIXED BIN INIT((MODULUS) -1);
 DCL NEXTBUCKET FIXED BIN INIT(-1);
 DCL 1 HASHBUCKET(0:SIZE),
   2 HASHNAME CHAR(8),
   2 HASHCHAIN FIXED BIN,
   2 HASHCOUNT FIXED BIN;
 DCL HKEY CHAR(8);
 DCL KEYBITS(4) BIT(16) ALIGNED;
 DCL INDX FIXED BIN;
 DCL (CPU#,AKTIVES) FIXED BIN;
 %PAGE;
 OPEN FILE(SYSPRINT) LINESIZE(132);
 %SKIP(2);
 /* THIS IS THE PARAMETER INPUT PARSE BLOCK. IT USES SUBROUTINES     */
 /* INCLUDED FROM THE 'CNTLCRD' MEMBER. MOST POST PROCESSORS WILL    */
 /* PROBABLY REQUIRE THE START, END, AND HOURS KEYWORDS. ADDITIONAL  */
 /* KEYWORDS CAN BE EASILY ADDED TO THE END OF THE BLOCK REPLACING   */
 /* THE 'BREAK ' KEYWORD.                                            */
 % SKIP;
 ON UNDEFINEDFILE(SYSIN)GO TO PROCESS;
 ON ENDFILE(SYSIN) GO TO PROCESS;
 ON CONVERSION CALL ERR('INVALID NUMBER IN '××WORDS(I));
 KEYWDLOOP: CALL KEYWORD;
 I=INDOX('START END HOURS BREAK',KEY);
 IF NVALS>MAXVALS(I) THEN CALL ERR('TOO MANY VALUES FOR '××WORDS(I));
 SELECT (I);
    WHEN (1)
         DO;
         STARTDATE=VAL(1);
         IF NVALS=2 THEN STARTHOUR=VAL(2);
         END;
    WHEN (2)
         DO;
         ENDDATE=VAL(1);
         IF NVALS=2 THEN ENDHOUR=VAL(2);
         END;
    WHEN (3)
         DO;
         EARLIEST=VAL(1);
         IF NVALS=2 THEN LATEST=VAL(2);
         END;
    WHEN (4)
         DO;
         FTEMP=0;  /* REMEMBER LAST TIME */
         #BREAKS=NVALS;
         DO J=1 TO #BREAKS;
            BKARRAY(J)=VAL(J);
            IF BKARRAY(J)<FTEMP THEN CALL ERR(
                 'BREAKS NOT GIVEN IN ASCENDING ORDER');
            FTEMP=BKARRAY(J);
            END;
         END;
    END;
 GO TO KEYWDLOOP;
 %PAGE;
 PROCESS:
 CLOSE FILE(SYSIN);
 REVERT CONVERSION;
 % SKIP(2);
 /* COMPOSE TITLE LINE */
 TITLELINE='CPU REPORT FROM OMF TYPE1 DATA-';
 IF EARLIEST=0 & LATEST=240000 /* I.E. ALL DAY */
    THEN TITLELINE=TITLELINE××'ALL SAMPLES INCLUDED';
    ELSE TITLELINE=TITLELINE××'ONLY SAMPLES BETWEEN '××
         TMECHAR(EARLIEST)××' AND '××TMECHAR(LATEST)×× ' INCLUDED';
 %SKIP;
 /* THE NEXT 4 STATEMENTS TO AND INCLUDING THE COMPLEX IF TEST       */
 /* ARE PROBABLY FAIRLY STANDARD FOR A POST PROCESSOR. ONE READS     */
 /* IN THE NEXT RECORD AND DETERMINES IF IT IS THE CORRECT TYPE,     */
 /* AND IS IN THE TIME RANGE SELECTED BY THE USER                    */
 ON ENDFILE(IN) GO TO FINN;
 HASHNAME='********';
 HASHCOUNT=0;
 PRLOOP:
 READ FILE(IN) SET(OMFRECPTR);
 IF OMF1ID^='OMF1' THEN GO TO PRLOOP;
 IF OMF1DATE>ENDDATE ×
    (OMF1DATE=ENDDATE & OMF1TIME>ENDHOUR)
    THEN GO TO FINN;
 IF OMF1DATE<STARTDATE ×
    (OMF1DATE=STARTDATE & OMF1TIME < STARTHOUR) ×
    OMF1TIME<EARLIEST ×
    OMF1TIME>LATEST
         THEN GO TO PRLOOP;
 %SKIP(2);
 /* IF BREAKS WERE REQUESTED AND WE HAVE GONE OVER A BREAK
    TIME, PRINT OUT ACCUMULATED DATA IF ANY AND REINITIALIZE */
 %SKIP;
 IF #BREAKS>0
    THEN IF (OMF1DATE>NEXTDATE) ×
            (OMF1DATE=NEXTDATE & OMF1TIME>NEXTTIME)
    THEN DO;  /* HAVE HIT A BREAK */
       IF SUM(SAMPLE)>0   /* IF HAVE ANY ACCUMULATED DATA */
          THEN DO;
               CALL PRINTOUT;
               CALL REINIT;
               END;
 %SKIP;
       /* DETERMINE NEXTDATE,NEXTTIME */
        NEXT:
         DO J=1 TO #BREAKS;
            IF OMF1TIME<BKARRAY(J)
               THEN DO;
                    NEXTTIME=BKARRAY(J);
                    NEXTDATE=OMF1DATE;
                    LEAVE NEXT;
                    END;
         END NEXT;
        IF J>#BREAKS THEN DO;
           NEXTTIME=BKARRAY(1);
           NEXTDATE=OMF1DATE+1;
           END;
     END;
 % SKIP(2);
 DO II=1 TO SRBINTVL;
 INITIAL:DO;
 IF FLAGS(II)='0'B & (ADDRESS(II)=1 × ADDRESS(II)=0)
         THEN LEAVE INITIAL;
       CPU#=MOD(ADDRESS(II),2)+1;
       SAMPLE(CPU#)=SAMPLE(CPU#)+1;
      IF SUM(SAMPLE)=1 THEN DO;
         FIRSTTIME=OMF1TIME;
         FIRSTDATE=OMF1DATE;
         END;
       IF FLAGS(II)&WAIT THEN; ELSE
 ACTIVE:  DO;
          ACTIVES(CPU#)=ACTIVES(CPU#)+1;
          J=FLAGS(II)/16;
          HKEY=CDENAME(II);
          KEYS(J)=KEYS(J)+1;
          TCBRDYS=TCBRDYS+TCBRDY(II);
          IF ABS(PERFORM(II))>10 THEN PG(10)=PG(10)+1;
          ELSE PG(PERFORM(II))=PG(PERFORM(II))+1;
          IF FLAGS(II)&SVCMD THEN SVCS(SVC(II))=SVCS(SVC(II))+1;
          IF FLAGS(II)&PBLM THEN
             DO;
             PBLMCOUNT(CPU#)=PBLMCOUNT(CPU#)+1;
             IF FLAGS(II)&'1'B THEN USERCOUNT(CPU#)=USERCOUNT(CPU#)+1;
             END;
          ELSE
             IF FLAGS(II)& SRB THEN SRBST=SRBST+1;
             ELSE IF FLAGS(II)& SVCMD THEN SVCST=SVCST+1;
             ELSE OTHER=OTHER+1;
          IF CDENAME(II)^=' ' THEN
 HASH:       DO;
             STRING(KEYBITS)=UNSPEC(HKEY);
             KEYBITS(1)=BOOL(BOOL(KEYBITS(1),KEYBITS(2),'0110'B),
                BOOL(KEYBITS(1),KEYBITS(2),'0110'B),'0110'B);
             INDX=MOD(KEYBITS(1),MODULUS);
 OLDENTRY:      DO;
                IF HASHTAB(INDX)<0 THEN
                   DO;
                   NEXTBUCKET=NEXTBUCKET+1;
                   IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                   HASHTAB(INDX)=NEXTBUCKET;
                   INDX=NEXTBUCKET;
                   LEAVE OLDENTRY;
                   END;
                ELSE
                   DO   INDX=HASHTAB(  INDX)
                      REPEAT HASHCHAIN(INDX)
                      UNTIL(HASHCHAIN(INDX)=0);
                   IF HKEY=HASHNAME(INDX) THEN
                      DO;
                      HASHCOUNT(INDX)=HASHCOUNT(INDX)+1;
                      LEAVE HASH;
                      END;
                   END;
                NEXTBUCKET=NEXTBUCKET+1;
                IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                HASHCHAIN(INDX)=NEXTBUCKET;
                INDX=NEXTBUCKET;
                END OLDENTRY;
             HASHNAME(INDX)=HKEY;
             HASHCHAIN(INDX)=0;
             HASHCOUNT(INDX)=1;
             END HASH;
          END ACTIVE;
       END INITIAL;
    END;
 LASTTIME=OMF1TIME;
 LASTDATE=OMF1DATE;
 GO TO PRLOOP;
 FINN: IF SUM(SAMPLE)>0 THEN CALL PRINTOUT;
 RETURN;
 % PAGE;
 PRINTOUT: PROC;
 PUT PAGE EDIT(TITLELINE)(A);
 AKTIVES=SUM(ACTIVES);
 PUT SKIP(2) EDIT(
    'FIRST DATE',DTECHAR(FIRSTDATE),'FIRST TIME',TMECHAR(FIRSTTIME),
    'LAST DATE',DTECHAR(LASTDATE),'LAST TIME',TMECHAR(LASTTIME),
   'CPU UTILIZATION',ACTIVES*1000/SAMPLE(1),'CPU 0 SAMPLE',SAMPLE(1),
 'SUPERVISOR STATE',(ACTIVES-PBLMCOUNT)*1000/ACTIVES,
 'CPU 1 SAMPLE',SAMPLE(2),
 'USERSTATE',USERCOUNT*1000/ACTIVES,'AVG READY TCBS',TCBRDYS*10/AKTIVES)
 (COL(1),A(18),A,COL(35),A(18),A,
  COL(1),A(18),A,COL(35),A(18),A,
 (2) ( COL(1),A(18),P'ZZ9.9',X(2),P'ZZ9.9',
   COL(35),A(18),E(10,3,4)),
  COL(1),A(18),P'ZZ9.9',X(2),P'ZZ9.9',COL(35),A(18),P'ZZ9.9');
 PUT EDIT('SUPERVISOR STATE IS  SVC:',SVCST*1000/AKTIVES,
 '   SRB:',SRBST*1000/AKTIVES, '   OTHER:',OTHER*1000/AKTIVES)
 (COL(1), (3) (A,P'ZZ9.9'));
 CALL FIND10(TENSVC,SVCS);
 CALL FIND10(TENPGM,HASHCOUNT);
 PUT EDIT('KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM      PCT  ',
 (I,KEYS(I)*1000/AKTIVES,'×',TENSVC(I),SVCS(TENSVC(I))*1000/AKTIVES,'×',
 I,PG(I)*1000/AKTIVES,'×',HASHNAME(TENPGM(I)),HASHCOUNT(TENPGM(I))
 *1000/AKTIVES DO I=0 TO 9))(COL(1),A, (10)
 (COL(1),F(2),X(2),P'Z9.9',X(2),A(1),X(2),F(3),X(1),P'Z9.9',X(2),A(1),
 X(2),F(2),X(2),P'Z9.9',X(2),A(1),X(2),A(8),X(2),P'Z9.9'));
 END PRINTOUT;
 %SKIP(2);
 REINIT: PROC;
 /* ROUTINE CALLED TO REINITIALIZE BUCKETS ETC
   WHEN HAVE HIT A BREAK */
 ACCUM=0;
 HASHNAME='********';
 HASHCOUNT=0;
 HASHTAB=-1;
 NEXTBUCKET=-1;
 END REINIT;
 %PAGE;
 FIND10: PROC(TEN,SELECT);
 /* INTERNAL PROCEDURE . LOCATES THE INDICES OF THE                  */
 /* TEN LARGEST VALUES IN A FIXED BIN(15) ARRAY. USED TO             */
 /* SELECT WHICH SVC AND PGM NAMES TO DISPLAY.                       */
 DCL (TEN(0:9) CONNECTED,SELECT(*)) FIXED BIN;
 DCL (I,J,K,N) FIXED BIN INIT(-1);
    DO I=0 TO HBOUND(SELECT,1);
 SCAN:
      DO;
         DO J=0 TO N;
         IF SELECT(TEN(J))<SELECT(I) THEN
            DO;
            N=MIN(9,N+1);
               DO K=N TO J+1 BY -1;
               TEN(K)=TEN(K-1);
               END;
            TEN(J)=I;
            LEAVE SCAN;
            END;
         END;
      IF N<9 THEN
         DO;
         N=N+1;
         TEN(N)=I;
         END;
      END;
    END;
 END FIND10;
 %SKIP;
 DTECHAR: PROC(DTE) RETURNS(CHAR(6));
 DCL DTE FIXED DEC(7);
 DCL PIC PIC'99/999';
 PIC=DTE;
 RETURN(CHAR(PIC));
 END DTECHAR;
 %SKIP;
 TMECHAR: PROC(TME) RETURNS(CHAR(8));
 DCL TME FIXED DEC(7);
 DCL PIC PIC'99.99.99';
 PIC=TME;
 RETURN(CHAR(PIC));
 END TMECHAR;
 %INCLUDE CNTLCRD;
 END;
