*PROCESS FLAG(E),MACRO,MAR(2,72);
 /*   CPU: DISPLAY OF STATDIE INCORE INFORMATION (MP/AP VERSION)     */
 /* PROCEDURE: CPU                                                   */
 /* FUNCTION:  DISPLAY MARGINAL STATE PROBABILITIES FOR THE CPU      */
 /*            BASED ON THE CURRENT INCORE SAMPLE FROM STATDIE       */
 /* LANGUAGE:  PLIX                                                  */
 /* SYSTEM:    MVS R3.7 + SU7                                        */
 /* EXTERNAL:  STATDIE MUST ALREADY HAVE BEEN STARTED TO             */
 /*            INITIALIZE TIMER DRIVEN SAMPLING.                     */
 /*            CALLS LOADPTR ENTRY IN PLIMISC                        */
 /* VERSION:   JAN 9,1978                                            */
 /* AUTHOR:    HOWARD GILBERT                                        */
 /*            YALE COMPUTER CENTER                                  */
 /*            175 WHITNEY AVE                                       */
 /*            NEW HAVEN, CONN. 06520                                */
 /*            203 432-4080                                          */
 /* DISTRIBUTION:                                                    */
 /*    THIS PROGRAM IS NOT RESTRICTED IN ANY MANNER. IT MAY BE       */
 /* FREELY REPRODUCED AND USED FOR ANY PURPOSE. HOWEVER,             */
 /* USERS ARE MORALLY BOUND TO MARK CLEARLY ANY MODIFICATIONS        */
 /* THEY ADD PRIOR TO DISTRIBUTING A MODIFIED VERSION TO OTHERS.     */
 %PAGE;
 /* INSTALLATION NOTES:                                              */
 /* RECOMMENDED TARGET LIBRARY: LINKLIB                              */
 /* LINKEDIT SYSLIB: PLIBASE                                         */
 /*       (MUST BE LINKEDITED WITH PLIMISC SUBROUTINES)              */
 /* LINKEDIT PARAMETERS: RENT                                        */
 /* LINKEDIT CONTROL CARDS:                                          */
 /*        ENTRY PLICALLA                                            */
 %SKIP(2);
 /*    THIS PROGRAM CAN RUN IN BATCH OR BE USED AS A TSO COMMAND.    */
 /* THE ONLY FILE USED IN 'SYSPRINT'. IN TSO THIS DDNAME MUST        */
 /* ALREADY BE ALLOCATED TO THE TERMINAL FOR THE OUTPUT TO DISPLAY   */
 /* PROPERLY. THE USE OF THE 'PLICALLA' ENTRY POINT SURPRESSES THE   */
 /* IBM00003I ERRONEOUS PARM FIELD IGNORED MESSAGE IN TSO.           */
 %PAGE;
 /* ONE PICTURE IS WORTH A LOT OF DOCUMENTATION:                     */
 %SKIP(2);
 /* CPU UTILIZATION    38.8   45.6    SAMPLE SIZE  2400/ 2400        */
 /* SUPERVISOR STATE   49.3   77.9    TIME              10:51        */
 /* USERSTATE          48.6   17.6    AVG READY TCBS      1.7        */
 /* SUPERVISOR STATE IS  SVC: 35.9   SRB: 24.0   OTHER:  4.7         */
 /* KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM      PCT              */
 /*  0  58.6  ×    0  7.1  ×   0  12.3  ×  GEORGE     8.9            */
 /*  1   4.2  ×   10  4.8  ×   1  32.1  ×  CML        6.3            */
 /*  2   0.0  ×   16  4.0  ×   2  40.0  ×  IEDTCAM2   6.1            */
 /*  3   0.0  ×   99  1.4  ×   3   0.0  ×  IEAVAR00   5.1            */
 /*  4   0.0  ×  114  1.4  ×   4   0.0  ×  YCCMAINT   4.4            */
 /*  5   1.0  ×   93  1.3  ×   5   0.0  ×  VSAPL      3.0            */
 /*  6   3.4  ×  101  0.9  ×   6   0.0  ×  IEFIIC     2.7            */
 /*  7   0.0  ×   20  0.8  ×   7   0.0  ×  DIFF3D     2.5            */
 /*  8  32.5  ×   26  0.8  ×   8  10.0  ×  JES2PROD   2.2            */
 /*  9   0.0  ×    1  0.8  ×   9   5.4  ×  QEDMAIN    2.1            */
 %SKIP(2);
 /* THIS IS A TYPICAL OUTPUT FROM CPU. THE VALUES ARE DEFINED        */
 /* AS FOLLOWS:                                                      */
 /* WHEN STATDIE INITIALIZES, IT ZEROS OUT THE PAGABLE BUFFERS. FOR  */
 /* THE FIRST 20 MINUTES, SOME OF THE BUFFERS ARE STILL UNFILLED.    */
 /* THERE IS NO VALID PSW WHICH CONTAINS ALL ZERO BITS, SO THE       */
 /* SAMPLE IS DEFINED AS THE SET OF PSWS WITH AT LEAST ONE BIT       */
 /* ON.                                                              */
 /* THE SAMPLE SIZE IS GIVEN AS FIRST THE NUMBER OF SAMPLES ON CPU 0 */
 /* THEN THE NUMBER OF SAMPLES ON CPU1.  THE FOLLOWING CONSIDERATIONS*/
 /* HOLD FOR THESE VALUES:                                           */
 /*    1) IF BOTH CPUS ARE ONLINE DURING THE LAST 20 MINUTES, AND    */
 /*       YOU HAVE INSTALLED THE ACCOMPANYING ZAP TO IEAVRTI0 TO     */
 /*       PERMIT STATDIE TO SELECT A SPECIFIC CPU, THEN YOU SHOULD   */
 /*       HAVE EQUAL SAMPLE SIZES ON BOTH CPUS, OR THEY WILL DIFFER  */
 /*       BY AT MOST 1 DURING THE INITITAL FILLING OF THE BUFFERS.   */
 /*    2) IF YOU LOSE ONE OF THE CPUS DURING THE PERIOD, ALL OF THE  */
 /*       SAMPLES WILL BE TAKEN ON THE REMAINING CPU, AND THIS WILL  */
 /*       BE REFECTED IN THE SAMPLE SIZE INFORMATION.                */
 /*    3) IF YOU DO NOT INSTALL THE ZAP TO IEAVRTI0, THEN SAMPLES    */
 /*       WILL BE TAKEN RANDOMLY ON BOTH CPUS SUBJECT TO TWO SOURCES */
 /*       OF BIAS: A) THERE ARE LIKELY TO BE MORE SAMPLES ON         */
 /*       A CPU WHICH IS DISABLED LESS OF THE TIME, B) THERE WILL    */
 /*       BE MORE SAMPLES ON THE FASTER CPU (MOD 1/ MOD 3 CONFIG     */
 /*       BOTH BIASES FAVOR THE ATTACHED PROCESSOR IN A MODEL 1 158  */
 /*       AP CONFIGURATION.                                          */
 /* CPU UTILIZATION - % OF THE SAMPLE WITH THE WAIT BIT OFF.         */
 /*    (NOTE: THIS IS THE ONLY % WHICH IS BASED ON THE WHOLE         */
 /*     SAMPLE. ALL OTHER PERCENTS ARE NOW BASED ON COUNT OF         */
 /*     NON-WAIT STATE PSW'S).                                       */
 /*   THE FIRST CPU UTILTIZATION FIGURE IS FOR CPU 0, THE SECOND IS  */
 /*    FOR CPU 1.                                                    */
 /*   THE SAME HOLDS FOR THE NEXT TWO VALUES BELOW THEM              */
 /* SUPERVISOR STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT         */
 /*     OFF.                                                         */
 /* USER STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT ON AND        */
 /*     NON-SYSTEM KEY (>7).                                         */
 /* SUPERVISOR STATE IS FURTHER SUBDIVIDED INTO THE PERCENTAGES      */
 /* WHEN AN SVC WAS IN CONTROL IN TASK MODE, WHEN AN SRB IS          */
 /* IN CONTROL, AND OTHER (WHICH INCLUDES FOR EXAMPLE, MODESET       */
 /* TIME, INITIATOR TIME, JES AND TCAM TASK TIME IN SUPERVISOR       */
 /* STATE, ETC).                                                     */
 /* THE FOUR COLUMNS OF PERCENTAGES ARE SEPARATE AND TOTAL           */
 /*     VERTICALLY. YOU DO NOT READ THEM ACROSS THE ROWS,            */
 /*     BECAUSE THERE IS NO HORIZONTAL ASSOCAITION. ONLY             */
 /*     TEN ITEMS APPEAR IN EACH COLUMN, THOUGH IT IS EASY           */
 /*     TO MODIFY THE PROGRAM TO PRINT MORE. THE COLUMNS             */
 /*     WILL NOT TOTAL TO 100% OF COURSE IF THERE IS                 */
 /*     ANY OMITTED NON-ZERO VALUE.                                  */
 /* KEY - BREAKS DOWN ACTIVE TIME BY PROTECT KEY.                    */
 /* SVC - BREAKS DOWN ACTIVE TIME BY THE SVC NUMBER OF THE TEN       */
 /*       MOST ACTIVE SVCS.                                          */
 /* PG  - BREAKS DOWN ACTIVE TIME BY THE PERFORMANCE GROUP OF        */
 /*       THE ASID IN CONTROL.                                       */
 /* PGM - BREAKS DOWN ACTIVE TIME BY THE CDENAME POINTED TO BY       */
 /*       THE HIGHEST PRB ON THE RB QUEUE.                           */
 %PAGE;
 /* PREPROCESSOR PARAMETERS GOVERNING VARIABLE DIMENSIONS */
 %DCL (SIZE,MODULUS) FIXED;
 /* SIZE AND MODULUS EFFECT THE ALLOCATION OF THE HASH TABLE         */
 /* FOR PROGRAM NAMES. THEY SHOULD BE CHOSEN BASED ON A GENEROUS     */
 /* ESTIMATE OF THE NUMBER OF UNIQUE PROGRAM NAMES. MODULUS MUST     */
 /* BE A PRIME NUMBER. IF MORE THAN 'SIZE' UNIQUE MODULE NAMES ARE   */
 /* ENCOUNTERED, THE ERROR CONDITION IS RAISED.                      */
 %SIZE=1000;
 %MODULUS=283;
 % INCLUDE STATGLBL;
 %PAGE;
 CPU: PROC OPTIONS(MAIN REENTRANT);
 DCL STDEPTR PTR;
 % INCLUDE STDE;
 %PAGE;
 DCL 1 PGBUF(PGBFCT) BASED(STDEBUFP),
 % INCLUDE PGBUF;
 %PAGE;
 /* THE FOLLOWING BUCKETS COLLECT THE VARIOUS STATE COUNTS FOR       */
 /* USE IN CALCULATING VARIOUS PERCENTAGES.                          */
 DCL KEYS(0:15) FIXED BIN INIT((16) 0);   /* BY PROTECT KEY          */
 DCL (PBLMCOUNT(2),                       /* PROBLEM STATE           */
         SAMPLE(2),                       /* SAMPLE SIZE             */
         ACTIVES(2),                      /* NON-WAIT                */
         USERCOUNT(2),                    /* PBLM & KEY>7            */
         TCBRDYS)                         /* COUNT READY TCBS        */
         FIXED BIN(31) INIT(0);           /*                         */
 DCL PG(0:10) FIXED BIN INIT((11) 0);     /* BY PERFORM              */
 DCL SVCS(0:256) FIXED BIN INIT((257) 0); /* BY SVC NUMBER           */
 DCL (TENSVC,TENPGM) (0:9) FIXED BIN;     /* TOP 10                  */
 DCL 1 SUP,                               /* SUP BREAKDOWN           */
        2 SVCST FIXED BIN INIT(0),        /* SVC IN TCB              */
        2 SRBST FIXED BIN INIT(0),        /* SRB                     */
        2 OTHER FIXED BIN INIT(0);        /* ALL ELSE                */
 %SKIP(5);
 /* MISCELANEOUS DECLARATIONS                                        */
 DCL (ABS,ADDR,BOOL,MOD,NULL,STRING,SUBSTR,TIME,UNSPEC,
     MIN,HBOUND,PLIRETV) BUILTIN;
 DCL LOADPTR ENTRY(CHAR(8),PTR) OPTIONS(ASM INTER RETCODE);
 DCL SYSPRINT FILE OUTPUT STREAM;
 DCL (I,J,II) FIXED BIN;
 DCL TOD CHAR(5);
 %SKIP(5);
  /* HASH VARIABLES                                                  */
 /* TO EFFICIENTLY TABULATE THE PROGRAM NAMES, A HASHING             */
 /* TECHNIQUE IS USED FOR TABLE LOOKUP. THE EIGHT BYTE NAME          */
 /* IS DIVIDED UP INTO 16 BIT PIECES WHICH ARE EXCLUSIVE             */
 /* OR'D TOGETHER, THEN DIVIDED BY A PRIME NUMBER AND THE            */
 /* REMAINDER IS USED TO INDEX INTO 'HASHTAB'. THE ENTRY             */
 /* IN 'HASHTAB' POINTS TO THE FIRST ENTRY IN THE 'HASHBUCKET'       */
 /* STRUCTURE WHICH HASHED TO THAT INDEX, AND SUBSEQUENT             */
 /* NAMES WHICH HASH TO THE SAME NAME ARE CHAINED OFF                */
 /* HASHBUCKET.HASHCHAIN.                                            */
 DCL 1 HASHTAB(0:MODULUS) FIXED BIN INIT((MODULUS) -1);
 DCL NEXTBUCKET FIXED BIN INIT(-1);
 DCL 1 HASHBUCKET(0:SIZE),
   2 HASHNAME CHAR(8),
   2 HASHCHAIN FIXED BIN,
   2 HASHCOUNT FIXED BIN;
 DCL KEY CHAR(8);
 DCL KEYBITS(4) BIT(16) ALIGNED;
 DCL INDX FIXED BIN;
 DCL (CPU#,AKTIVES) FIXED BIN;
 %PAGE;
 CALL LOADPTR('STATSTDE',STDEPTR);
 IF PLIRETV>0 THEN DO;
   PUT EDIT('UNABLE TO LOCATE STATDIE MODULE')(COL(1),A);
   STOP;
   END;
 IF STDEFLGS='0'B THEN
    DO;
    PUT EDIT('STATDIE IS NOT INITIALIZED')(COL(1),A);
    RETURN;
    END;
 IF STDETQE(14)&'1'B THEN
    DO;
    PUT EDIT('STATDIE HAS BEEN PURGED BY AN ERROR')(COL(1),A);
    RETURN;
    END;
 TOD=SUBSTR(TIME,1,5);
 TOD=SUBSTR(TOD,1,2)××':'××SUBSTR(TOD,3,2);
 HASHNAME='********';
 HASHCOUNT=0;
 %PAGE;
  /* NOW PASS ONCE THROUGH THE BUFFER ACCUMULATING COUNTS            */
 DO I=1 TO PGBFCT; DO II=1 TO SRBINTVL;
 INITIAL:DO;
 IF FLAGS(I,II)='0'B & (ADDRESS(I,II)=0 × ADDRESS(I,II)=1)
          THEN LEAVE INITIAL;
        CPU#=MOD(ADDRESS(I,II),2)+1 ;
       SAMPLE(CPU#)=SAMPLE(CPU#)+1;
       IF FLAGS(I,II)&WAIT THEN; ELSE
 ACTIVE:  DO;
          ACTIVES(CPU#)=ACTIVES(CPU#)+1;
          J=FLAGS(I,II)/16;
          KEY=CDENAME(I,II);
          KEYS(J)=KEYS(J)+1;
          TCBRDYS=TCBRDYS+TCBRDY(I,II);
          IF ABS(PERFORM(I,II))>10 THEN PG(10)=PG(10)+1;
          ELSE PG(PERFORM(I,II))=PG(PERFORM(I,II))+1;
          IF FLAGS(I,II)&SVCMD THEN SVCS(SVC(I,II))=SVCS(SVC(I,II))+1;
          IF FLAGS(I,II)&PBLM THEN
             DO;
             PBLMCOUNT(CPU#)=PBLMCOUNT(CPU#)+1;
             IF FLAGS(I,II)&'1'B THEN USERCOUNT(CPU#)=USERCOUNT(CPU#)+1;
             END;
          ELSE
             IF FLAGS(I,II)& SRB THEN SRBST=SRBST+1;
             ELSE IF FLAGS(I,II)& SVCMD THEN SVCST=SVCST+1;
             ELSE OTHER=OTHER+1;
          IF CDENAME(I,II)^=' ' THEN
 HASH:       DO;
             STRING(KEYBITS)=UNSPEC(KEY);
             KEYBITS(1)=BOOL(BOOL(KEYBITS(1),KEYBITS(2),'0110'B),
                BOOL(KEYBITS(1),KEYBITS(2),'0110'B),'0110'B);
             INDX=MOD(KEYBITS(1),MODULUS);
 OLDENTRY:      DO;
                IF HASHTAB(INDX)<0 THEN
                   DO;
                   NEXTBUCKET=NEXTBUCKET+1;
                   IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                   HASHTAB(INDX)=NEXTBUCKET;
                   INDX=NEXTBUCKET;
                   LEAVE OLDENTRY;
                   END;
                ELSE
                   DO   INDX=HASHTAB(  INDX)
                      REPEAT HASHCHAIN(INDX)
                      UNTIL(HASHCHAIN(INDX)=0);
                   IF KEY=HASHNAME(INDX) THEN
                      DO;
                      HASHCOUNT(INDX)=HASHCOUNT(INDX)+1;
                      LEAVE HASH;
                      END;
                   END;
                NEXTBUCKET=NEXTBUCKET+1;
                IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                HASHCHAIN(INDX)=NEXTBUCKET;
                INDX=NEXTBUCKET;
                END OLDENTRY;
             HASHNAME(INDX)=KEY;
             HASHCHAIN(INDX)=0;
             HASHCOUNT(INDX)=1;
             END HASH;
          END ACTIVE;
       END INITIAL;
    END;END;
 %PAGE;
 AKTIVES=SUM(ACTIVES);
 PUT EDIT('CPU UTILIZATION',ACTIVES*1000/SAMPLE,'SAMPLE SIZE',
  SAMPLE(1),'/',SAMPLE(2),
 'SUPERVISOR STATE',(ACTIVES-PBLMCOUNT)*1000/ACTIVES,'TIME',TOD,
 'USERSTATE',USERCOUNT*1000/ACTIVES,'AVG READY TCBS',TCBRDYS*10/AKTIVES)
 (COL(1),A(18),2 (P'ZZ9.9',X(2)),COL(35),A(12),F(5),A(1),F(5),
  COL(1),A(18),2 (P'ZZ9.9',X(2)),COL(35),A(18),A(5),
  COL(1),A(18),2 (P'ZZ9.9',X(2)),COL(35),A(18),P'ZZ9.9');
 PUT EDIT('SUPERVISOR STATE IS  SVC:',SVCST*1000/AKTIVES,
 '   SRB:',SRBST*1000/AKTIVES, '   OTHER:',OTHER*1000/AKTIVES)
 (COL(1), (3) (A,P'ZZ9.9'));
 CALL FIND10(TENSVC,SVCS);
 CALL FIND10(TENPGM,HASHCOUNT);
 PUT EDIT('KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM      PCT  ',
 (I,KEYS(I)*1000/AKTIVES,'×',TENSVC(I),SVCS(TENSVC(I))*1000/AKTIVES,'×',
 I,PG(I)*1000/AKTIVES,'×',HASHNAME(TENPGM(I)),HASHCOUNT(TENPGM(I))
 *1000/AKTIVES DO I=0 TO 9))(COL(1),A, (10)
 (COL(1),F(2),X(2),P'Z9.9',X(2),A(1),X(2),F(3),X(1),P'Z9.9',X(2),A(1),
 X(2),F(2),X(2),P'Z9.9',X(2),A(1),X(2),A(8),X(2),P'Z9.9'));
 %PAGE;
 FIND10: PROC(TEN,SELECT);
 /* INTERNAL PROCEDURE FOR CPU. LOCATES THE INDICES OF THE           */
 /* TEN LARGEST VALUES IN A FIXED BIN(15) ARRAY. USED TO             */
 /* SELECT WHICH SVC AND PGM NAMES TO DISPLAY.                       */
 DCL (TEN(0:9),SELECT(*)) FIXED BIN;
 DCL (I,J,K,N) FIXED BIN INIT(-1);
    DO I=0 TO HBOUND(SELECT,1);
 SCAN:
      DO;
         DO J=0 TO N;
         IF SELECT(TEN(J))<SELECT(I) THEN
            DO;
            N=MIN(9,N+1);
               DO K=N TO J+1 BY -1;
               TEN(K)=TEN(K-1);
               END;
            TEN(J)=I;
            LEAVE SCAN;
            END;
         END;
      IF N<9 THEN
         DO;
         N=N+1;
         TEN(N)=I;
         END;
      END;
    END;
 END;
 END;
