  %PAGE;
 /* THIS IS A PACKAGE OF SUBROUTINES WHICH CAN BE USED TO            */
 /* PARSE CONTROL CARDS OF THE FORM:                                 */
 /*                                                                  */
 /*     KEYWORD(VAL1 VAL2 ... VALN) /* COMMENT */
 /*                                                                  */
 /* THIS PACKAGE IS EXTRACTED FOR OURMF FROM A PLI PROGRAM WHICH     */
 /* READS SMP PTFIN CARDS.                                           */
 /* THE PROPER USE OF THIS PACKAGE IS DEMONSTRATED IN THE            */
 /* OURMF PROGRAM. ONE CALLS SUBROUTINE 'KEYWORD' TO GET THE         */
 /* NEXT KEYWORD AND VALUE LIST. THE KEWORD IS RETURNED IN           */
 /* VARIABLE 'KEY'. THE VALUES ARE RETURNED IN ARRAY 'VAL'.          */
 /* WHY IS THIS NOT AN EXTERNAL PROCEDURE? MY EXPERIENCE IS THAT     */
 /* THE TYPE, LENGTH, AND COUNT OF KEYWORDS AND VALUES IN ONE        */
 /* PROGRAM DIFFER SUBSTANTIALLY FROM THOSE IN OTHER PROGRAMS,       */
 /* AND I DO NOT HAVE SUFFICIENT INSIGHT INTO THE REQUIREMENTS       */
 /* OF ALL POST-PROCESSORS TO CAST THIS THING IN CONCRETE YET.       */
 /* YOU CAN INCLUDE THIS SECTION WITH THE PREPROCESSOR OR CAN        */
 /* COPY IT INTO YOUR PROGRAM AND MODIFY IT WITH THE EDITOR,         */
 /* DEPENDING ON YOUR NEEDS.                                         */
  DCL (CARD,LASTCARD) CHAR(80) INIT(' ');
  DCL KEY CHAR(8);
  DCL VAL(15) CHAR(44) VAR;
  DCL NVALS FIXED BIN;
  DCL LENWORD FIXED BIN INIT(0);
   DCL CMT BIT(1) ALIGNED INIT('0'B);
 % PAGE;
  GETWORD:PROC REORDER;
 /* PROCEDURE: GETWORD                                               */
 /* FUNCTION: LOCATE THE NEXT WORD ON THE CONTROL CARD               */
 /* ENTRY CONDITIONS:                                                */
 /*     THE UNSCANNED SECTION OF THE CURRENT CONTROL CARD            */
 /*     IS LEFT JUSTIFIED IN VARIABLE 'CARD'.                        */
 /* EXIT:                                                            */
 /*     RETURNS TO CALLER WITH VARIABLE 'LENWORD' SET TO             */
 /*     THEN LENGTH OF THE NEXT WORD ON THE CONTROL CARD.            */
 /* EXTERNAL:                                                        */
 /*     CALLS GETCARD TO OBTAIN A NEW CARD IF THE CURRENT ONE        */
 /*     IS BLANK                                                     */
     DCL I FIXED BIN;
     CARD=SUBSTR(CARD,LENWORD+1);
 GW1:     I=VERIFY(CARD,', ');
     IF I=0 THEN
          DO;
          CALL GETCARD;
          GO TO GW1;
          END;
     CARD=SUBSTR(CARD,I);
     LENWORD=MAX(1,VERIFY(CARD,
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$.')-1);
     END;
  %PAGE;
 KEYWORD:PROC REORDER;
 /* PROCEDURE: KEYWORD                                               */
 /* FUNCTION: PARSES AN OBJECT OF THE FORM                           */
 /*       KEYWORD(VAL1 VAL2 ... VALN)                                */
 /* ENTRY CONDITIONS:                                                */
 /*    THE UNPARSED SECTION OF THE CURRENT CONTROL CARD IS           */
 /*    LEFT JUSTIFIED IN VARIABLE 'CARD'                             */
 /* EXIT:                                                            */
 /*    RETURN TO CALLER WITH THE KEYWORD IN VARIABLE 'KEY'           */
 /*    THE NUMBER OF VALUE ITEMS IN VARIABLE 'NVALS',                */
 /*    AND EACH VALUE ITEM IN THE FIRST 'NVALS' ELEMENTS             */
 /*    OF ARRAY 'VAL'.                                               */
 /* EXTERNAL:                                                        */
 /*    CALLS GETWORD,ERR                                             */
     DCL I FIXED BIN;
 KW1:     CALL GETWORD;
     IF LENWORD>8 THEN CALL ERR(' WORD TOO LONG');
     IF LENWORD=1 THEN
           CALL ERR('BAD PUNCTUATION');
     KEY=SUBSTR(CARD,1,LENWORD);
     CALL GETWORD;
     IF SUBSTR(CARD,1,1)^='(' THEN CALL ERR('MISSING ''(''');
    BEGIN;
    ON ENDFILE(SYSIN) GO TO MISSP;
     DO I=1 TO 15;
          CALL GETWORD;
          IF SUBSTR(CARD,1,1)=')' THEN GO TO KW2;
     VAL(I)=SUBSTR(CARD,1,LENWORD);
     END;
    END;
     CALL ERR('TOO MANY ITEMS IN PARENS');
 MISSP:  CALL ERR(' MISSING '')''');
 KW2:     NVALS=I-1;
     END;
  %PAGE;
 GETCARD:PROC REORDER;
 /* PROCEDURE: GETCARD                                               */
 /* FUNCTION: OBTAIN NEXT CARD FROM SYSIN, COPY IT TO SYSPRINT,      */
 /*    AND DELETE COMMENTS.                                          */
 /* ENTRY CONDITIONS:                                                */
 /*    BIT VARIABLE 'CMT' IS SET TO TRUE IF THE LAST CONTROL CARD    */
 /*    ENDED WITH AN OPEN COMMENT FIELD (IE, NO CLOSING '* /').      */
 /* EXIT CONDITIONS:                                                 */
 /*    THE NEXT CONTROL CARD IS STORED IN VARIABLE 'CARD'. ANY       */
 /*    CHARACTERS IN A COMMENT FIELD HAVE BEEN SET TO BLANK. THE     */
 /*    'CMT' SWITCH IS TRUE IF THIS CARD ENDED WITH AN OPEN          */
 /*    COMMENT FIELD.                                                */
 /* ABNORMAL EXIT:                                                   */
 /*    THE 'ENDFILE' CONDITION CAN BE RAISED FOR SYSIN. EXIT WILL    */
 /*    THEN BE DETERMINED BY THE CURRENT ACTIVE 'ON ENDFILE'         */
 /*    ENVIRNONMENT                                                  */
     DCL (I,J) FIXED BIN;
 GC1:
    GET EDIT(CARD)(COL(1),A(80)) COPY(SYSPRINT);
     SUBSTR(CARD,73)=' ';
     LASTCARD=CARD;
     IF CMT THEN
          DO;
          I=INDEX(CARD,'*/');
          IF I=0 THEN GO TO GC1;
          CARD=SUBSTR(CARD,I+2);
          CMT='0'B;
          END;
 GC2:     I=INDEX(CARD,'/*');
     IF  I>0 THEN
          DO;
          J=INDEX(SUBSTR(CARD,I),'*/');
          IF J=0 THEN
               DO;
               SUBSTR(CARD,I)=' ';
               CMT='1'B;
               END;
          ELSE DO;
               SUBSTR(CARD,I,J+1)=' ';
               GO TO GC2;
               END;
          END;
     END;
  %PAGE;
 ERR:PROC(MSG);
 /* PROCEDURE: ERR                                                   */
 /* FUNCTION: ISSUE ERROR DIAGNOSTIC MESSAGE AND TERMINATE CURRENT   */
 /* PROGRAM                                                          */
 /* ENTRY:                                                           */
 /*    ERROR MESSAGE PASSED AS THE ARGUMENT. THE LAST CONTROL CARD   */
 /*    READ IS IN VARIABLE 'LASTCARD'. 'CARD' CONTAINS ITS UNSCANNED */
 /*    PART.                                                         */
 /* EXIT:                                                            */
 /*    ISSUES PLIX 'STOP' STATEMENT.                                 */

  DCL MSG CHAR(100) VAR;
         DO;
         PUT EDIT('SYNTAX ERROR IN CONTROL CARDS -- ',MSG,
           'LAST CARD READ IS : ',LASTCARD,
           'PROBLEM DISCOVERED AT: ',CARD)
           (COL(1),A,A);
         STOP;
         END;
    END;
  %PAGE;
  %PAGE;
 INDOX:PROC(CANDIDATES,WORD) RETURNS(FIXED BIN);
  DCL CANDIDATES CHAR(*);
  DCL WORD CHAR(8);
 /* PROCEDURE: INDOX                                                 */
 /* FUNCTION: IDENTIFIES KEYWORDS FROM LIST OF CANDIDATES            */
 /* ENTRY:                                                           */
 /*   'CANDIDATES' CONTAINS A LIST OF VALID KEYWORDS, EACH           */
 /*   SEPARATED BY A SINGLE BLANK. 'WORD' CONTAINS THE INPUT         */
 /*   KEYWORD TO BE MATCHED AGAINST THE LIST.                        */
 /* EXIT:                                                            */
 /*   NORMAL: A NUMBER IS RETURNED GIVING THE INDEX OF THE MATCHED   */
 /*      CANDIDATE IN THE LIST.                                      */
 /*   ABNORMAL: ERR IS CALLED IF KEYWORD IS NOT FOUND IN THE LIST.   */
 /* NOTE: ONLY THE FIRST THREE CHARACTERS ARE CURRENTLY CHECKED IN   */
 /*   EACH KEYWORD. THEY MUST BE UNIQUE FOR EACH MEMBER OF THE LIST. */
  DCL (I,J,K) FIXED BIN INIT(1);
    DO WHILE(K>0);
    IF SUBSTR(CANDIDATES,I,3)=SUBSTR(WORD,1,3) THEN RETURN(J);
    J=J+1;
    K=INDEX(SUBSTR(CANDIDATES,I),' ');
    I=I+K;
    END;
    CALL ERR(' KEYWORD IS UNIDENTIFIED OR OUT OF CONTEXT: '××KEY);
 END;
