         TITLE 'ROCKWELL JES3 MONITORING PROGRAM - V2M1 '
*------------------------------------------------------------------*
* TITLE:   JES3 MONITORING PROGRAM                                 *
* VERSION: 02                                                      *
* MODIFICATION LEVEL: 01                                           *
*------------------------------------------------------------------*
*                                                                  *
* PURPOSE: THIS PROGRAM WILL MONITOR CERTAIN VALUES IN THE         *
*          JES3 SSVT, THE IATGRSQ TABLE AND THE JES3 ADDRESS       *
*          SPACE CONTROL BLOCKS (ASCB,OUCB,OUXB) AND NOW THE TVT.  *
*                                                                  *
*          OPTIONALLY IF THE STAGRPT DD STATEMENT IS PRESENT       *
*          A LISTING OF ALL ALL NON-STANDARD STAGING AREAS         *
*          FOUND WILL BE REPORTED ON.  THE LENGTH, FUNCTION        *
*          CODE AND MODIFIER CODE WILL BE REPORTED ON.             *
*                                                                  *
*          THE RESULTS OF THESE SAMPLES CAN BE USED TO TUNE        *
*          JES3 ON BOTH THE GLOBAL AND LOCAL.  BUFFER UTILIZATION  *
*          PAGING, CSA UTILIZATION, JES3 FENCING, PLUS CAN BE      *
*          MONITORED AND OPTIMIZED USING THE OUTPUT OF THIS        *
*          PROGRAM.                                                *
*                                                                  *
*------------------------------------------------------------------*
* VERSION 2 INCLUDES CODE TO USE THE XMS COMMANDS TO LOOK INTO     *
*           THE JES3 ADDRESS SPACE AND LOOK AT THE TVT             *
*                                                                  *
*------------------------------------------------------------------*
*                                                                  *
* JCL:     //STEPEXC EXEC PGM=JMP,PARM=COUNT='XXX,CYCLE=YY,INT=ZZ' *
*          //REPORT  DD SYSOUT=A                                   *
*          //STAGRPT DD SYSOUT=A  (OPTIONAL)                       *
*------------------------------------------------------------------*
* PARM VALUES:                                                     *
*                                                                  *
*           COUNT=XXXXXX    THIS IS A UP TO 6 POSITION VALUE OF    *
*                           THE NUMBER OF SAMPLES YOU WISH         *
*                           (YOU GET 5 SAMPLES PER SECOND)         *
*                                                                  *
*           CYCLE=YYYY      THIS IS A UP TO 4 POSITION VALUE OF    *
*                           THE NUMBER OF SAMPLES BETWEEN REPORTS  *
*                                                                  *
*           INT=SSTH        THIS IS A 4 POSITION NUMBER DEFINING   *
*                           THE TIME INTERVAL IN SECONDS,TENS      *
*                           AND HUNDREDTHS OF SECONDS.  YOU MAY    *
*                           ENTER ONLY THE SIGNIFICANT NUMBERS.    *
*------------------------------------------------------------------*
* SEMI-LOGIC:                                                      *
*                                                                  *
*           1. PROCESS THE PARM                                    *
*              IF NO PARM THEN SET COUNT=000060 CYCLE=0060         *
*              INT=0020                                            *
*           2. DETERMINE IF TSO - AND SET FLAG                     *
*           3. OPEN OUR OUTPUT FILES (REPORT AND STAGRPT)          *
*           4. GETMAIN OUR WORK AREA                               *
*           5. ESTABLISH ADDRESSABILITY TO SMCA FOR SYSTEM ID      *
*              AND TO SSVT                                         *
*           6. ENSURE TABLE IS INITIALIZED TO X'00'                *
*           7. ESTABLISH ENTRY FOR NON-STANDARD STAGING            *
*              AREA COUNTING                                       *
*           8. TEST APF AUTHORIZATION - IF WE ARE NOT              *
*              THEN WE DON'T LOOK AT THE IATGRSQ WHICH             *
*              IS IN PROTECTED STORAGE                             *
*           9. IF AUTHORIZED THEN ISSUE DONTSWAP SYSEVENT          *
*              UNLESS WE ARE UNDER TSO                             *
*          10. BEGIN THE SAMPLE LOOP - OR END IF                   *
*              WE HAVE PERFORMED ALL REQUIRED SAMPLES.             *
*          11. INITIALIZE FOR EACH PASS THE ACTR VALUE WHICH       *
*              IS USED TO DETERMINE IATGRSQ ENTRIES WHICH HAVE     *
*              MULTIPLE ENTRIES                                    *
*          12. DO STIMER - BYPASSED FOR 1ST PASS                   *
*              (THE SAMPLE INTERVAL IS .2 SECONDS)                 *
*          13. SAMPLE SSVT VALUES - PLACING SAMPLES INTO TABLE     *
*          14. SAMPLE ASCB VALUES - "                              *
*          15. SAMPLE OUCB VALUES - "                              *
*          16. SAMPLE OUXB VALUES - "                              *
*        16.1  SAMPLE MPC VALUES IF GLOBAL - "                     *
*          17. SAMPLE FLAGS AND SAVE FOR REPORT                    *
*          18. IF AUTHORIZED THEN: (19-21)                         *
*         19.1 SAMPLE TVT VALUES USING CROSS MEM MACROS            *
*         19.2 SAMPLE GRSQ VALUES - PLACING SAMPLES INTO TABLE     *
*          20. FOR NON-STD STAGING AREAS - COUNT THEM              *
*          21. FOR NON-STD STAGING AREAS - DETERMINE THE ACTUAL    *
*              SIZE (1K,2K,4K)                                     *
*          22. DETERMINE IF TIME FOR A REPORT                      *
*          23. IF YES THEN PRINT REPORT - ELSE BACK TO 10          *
*          24. CALC TIME BETWEEN REPORT AND DISPLAY IN INTERVAL    *
*          25. CHECK SSVT FLAG BYTES SAVE DURING SAMPLE AND        *
*              DISPLAY ANY EXCEPTIONAL CONDITIONS FOUND DURING     *
*              THE CURRENT INTERVAL                                *
*          26. AFTER REPORT - BACK TO 10                           *
*------------------------------------------------------------------*
* OUTPUT FIELDS EXPLAINED:                                         *
*                                                                  *
*          REPORTED ARE THE AVERAGE, MINIMUM, MAXIMUM AND          *
*          CURRENT VALUES OF ALL SAMPLED FIELDS.                   *
*                                                                  *
*          THE AVERAGE IS BASED UPON THE # OF SAMPLES AND          *
*          THE TOTAL COUNT SINCE THE SAMPLING BEGAN.               *
*                                                                  *
*          FOR ACCUMULATOR FIELDS THE CURRENT VALUE PRINTED        *
*          IS THE DELTA SINCE MONITORING BEGAN AND THE             *
*          RATE PER SECOND IS DISPLAYED IF > 0.                    *
*                                                                  *
*          ALL VALUES FROM THE SSVT, ASCB, OUCB, OUXB, TVT ARE:    *
*                                                                  *
*              CONTROL BLOCK                                       *
*              FIELD            DESCRIPTION                        *
*              --------         -----------------                  *
*              AIONBUFS         TOTAL JES3 BUFFERS                 *
*              AIONLEFT         # OF TRACKS LEFT                   *
*              AIOBMIN          MINIMUN JSAM BUFFERS               *
*              AIONOBFM         MAX JES3 BUFFERS EVER USED         *
*              AIONOBFN         # CORE WAITS FOR JES3 BUFFERS      *
*              AIONTRKS         TOTAL JES3 TRACKS                  *
*              ASCBFMCT         JES3 FRAME COUNT                   *
*              ASCBNVSC         JES3 NVIO SLOT COUNT               *
*              CTCSRD           CTC READS BY DIE                   *
*              CTCSRD0          CTC READS BY MSMI STD              *
*              CTCSRD1          CTC READS BY MSMI 1K               *
*              CTCSRD2          CTC READS BY MSMI 2K               *
*              CTCSRD4          CTC READS BY MSMI 4K               *
*              CTCSWT           CTC WRITES BY SSCM                 *
*              CTCSWT0          CTC WRITES BY DIE                  *
*              MPAINIT          TOTAL ACTIVE INITS PER MAIN        *
*              MPDEEP           TOTAL ACTIVE JOBS PER MAIN         *
*              MPMAXI           MAXIMUM INITS PER MAIN             *
*              MPMVSALC         ALLOCATED LSTOR PER MAIN           *
*              MPSDEEP          CURRENT SETUP DEPTH PER MAIN       *
*              MPSDEPTH         MAX JOBS IN SETUP PER MAIN         *
*              OUCBIOSM         SMF EXCP COUNT FOR JES3            *
*              OUCBTWSS         JES3 TARGET WSS                    *
*              OUXBCAPR         JES3 COMMON PAGE-IN                *
*              OUXBFMCT         EFFECTIVE FRAME COUNT              *
*              OUXBLPAI         JES3 LPA PAGE-IN                   *
*              OUXBLPAR         JES3 LPA RECLAIMS                  *
*              OUXBPIN          JES3 PAGE-IN                       *
*              OUXBPOUT         JES3 PAGE-OUT                      *
*              OUXBPREC         JES3 PAGE-RECLAIM                  *
*              OUXBSTCT         JES3 PAGES STOLEN                  *
*              OUXBUIC          HIGHEST UIC FOR JES3               *
*              SRJPSCTR         SNA RJP STORAGE COUNTER            *
*              SVTJCNT          JSAM IO COUNT                      *
*              SVTMXSRB         # PBUF-WAIT TASKS                  *
*              SVTPBCNT         # AVAIL USAM BFRS                  *
*              SVTPBCOM         BUFS IN POSTD TASKS                *
*              SVTPBUFS         MAX # USAM BUFFERS                 *
*              SVTSACNT         ACTIVE SA COUNT                    *
*              SVTSAMAX         SA HI-WTR COUNT                    *
*              SVTSTAG          # SA EXTENTS                       *
*              SVTUCNT          USAM IO COUNT                      *
*              RSMCNTFX         FIXED FRAMES IN ADDRSPC            *
*              RSMLSQAC         LSQA FRAMES                        *
*              RSMCOMFX         # FIXED COMMON AREA TCB-FIXED FRMS *
*              TVTWAITS         TOTAL JES3 TCB OS WAITS            *
*                                                                  *
*------------------------------------------------------------------*
* SPECIAL COMMENTS :                                               *
*         DURING THE REPORT CYCLE SEVERAL FLAGS BITS ARE CHECKED   *
*         IN THE SSVT AND REPORTED ON.  THEY ARE:                  *
*                                                                  *
*    FLAG      BIT      MESSAGE                                    *
*    --------  -------- -----------------------------------------  *
*    SVTFLAG1  SVTABFG  'SYSTEM IS TERMINATING'                    *
*    SVTFLAG1  SVTGLOBL 'SYSTEM IS GLOBAL'                         *
*    SVTFLAG1  SVTGLOBL 'SYSTEM IS LOCAL'                          *
*    SVTFLAG1  SVTDSI   'DSI IS ACTIVE'                            *
*    SVTFLAG1  SVTQUFG  'SYSTEM IS QUIESCING MODE'                 *
*    SVTFLAG1  SVTABNP  'ABEND PROCESSING'                         *
*    SVTFLAG2  SVTNOEXT 'NO SA EXTS - LET JES3 AND ASID 1 PROCESS' *
*------------------------------------------------------------------*
*  ALL OTHER FIELDS REPORTED ARE FROM THE TABLE MAINTAINED IN      *
*  IATGRSQ.  IT IS A TABLE OF ALL (WE HOPE) JES3 GETMAINS WHETHER  *
*  IN THE JES3 ADDRSPC OR COMMON.  EACH ENTRY HAS THE LENGTH,      *
*  SUBPOOL NUMBER, STARTING ADDR OF AREA AND A 20 BYTE             *
*  DESCRIPTOR FIELD.  THE TITLE FOR THESE AREAS IN THE REPORT      *
*  IS THE DESCRIPTOR FIELDS.  IF YOU HAVE ANY QUESTIONS ON HOW     *
*  TO INTERPRET THESE FIELDS YOU WILL HAVE TO CHECK THE JES3       *
*  SOURCE FOR A COMPLETE DESCRIPTION.                              *
*                                                                  *
*------------------------------------------------------------------*
* USER ABEND CODES ARE:                                            *
*        ABEND 1                         TELL ALL TABLE FULL       *
*                                          (INCREASE # OF ENTRIES) *
*        ABEND 2                         DONTSWAP FAILED           *
*                                          (GOOD LUCK)             *
*        ABEND 3                         REPORT DD MISSING         *
*------------------------------------------------------------------*
* AUTHOR:       LIONEL B. DYCK                                     *
* INSTALLATION: ROCKWELL INTERNATIONAL                             *
*               P.O. BOX 2515                                      *
*               SEAL BEACH, CALIFORNIA  90740                      *
*               (213) 594-1125                                     *
*------------------------------------------------------------------*
* IF YOU MAKE ANY CHANGES OR ENHANCEMENTS TO THIS CODE PLEASE      *
* FORWARD A COPY TO ME - THANX.....                                *
*                                                                  *
*------------------------------------------------------------------*
* MACROS:                                                          *
*                                                                  *
*     $REGS $STCK @B @MF @MF1 @M1 @PUT @TM @TMF @TMH @TMHM @TMJ    *
*     @TMO ABEND CLOSE CVT DCB EXTRACT FREEMAIN GETMAIN IATYFCT    *
*     IATYMPC IATYSQE IATYSVT IEESMCA IEFJESCT IEFJSCVT IHAASCB    *
*     IHAASVT IHAOUXB IHAPSA IHARSMHD IRAOUCB MODESET OPEN PARM    *
*     PRIME PUT RETURN SAVE STIMER SYSEVENT TERME TESTAUTH TIME    *
*     TIMECONV IATYTVT @TMFM @TMJM ESAR SSAR AXSET MVCP            *
*     IATYSTA                                                      *
*------------------------------------------------------------------*
* WARRENTY:     NON EXISTS - USE THIS CODE AT YOUR OWN RISK.       *
*               WE HAVE USED IT SUCCESSFULLY WITH SU26 ON          *
*               3033 UP'S, AP'S ,3081 D'S AND 3081 K'S.            *
*------------------------------------------------------------------*
         EJECT
*-------------------------------------------*
*   FOLLOWING ARE LOCAL MACROS FOR THIS     *
*   PROGRAMS USE                            *
*-------------------------------------------*
         EJECT
         MACRO
         TIMECONV
***********************************************************************
*                                                                     *
*        TIME CONVERSION ROUTINE                                      *
*                                                                     *
*         REGISTER 7 = TIME IN BINARY 100TH SECONDS                   *
*                                                                     *
*        THIS MACRO WILL CONVERT BINARY TIME TO HH.MM.SS              *
*                                                                     *
***********************************************************************
TIMECONV DS    0H
         STM   R6,R10,@SREGS            SAVE REGISTERS USED
         MVI   @HRS+4,C':'
         SR    R6,R6                    CLEAR R6
         D     R6,=F'100'               DIVIDE OUT 100TH SEC
         SR    R6,R6
         D     R6,=F'60'                DIVIDE OUT SECONDS
         LR    R8,R6                    STORE SEC IN R8
         SR    R6,R6
         D     R6,=F'60'                DIVIDE OUT MINUTES
         CVD   R7,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @HRS,@TWORK+2              @HRS
         CLC   @HRS,=C'  00'            HOURS PRESENT ?
         BNE   *+10                     NO, BRANCH
         MVC   @HRS(5),=CL5' '          BLANK OUT HOURS
         CVD   R6,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @MIN,@TWORK+4             @MIN
         CVD   R8,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @SEC,@TWORK+4              SEC
         LM    R6,R10,@SREGS            RELOAD REGISTERS USED
         B     @TEXIT
@DWORD   DS    D
***********************************************************************
*                                                                     *
*        WORK AREA                                                    *
*                                                                     *
***********************************************************************
@TWORK   DS    CL6
@TPAT    DC    X'402020212020'
@TIME    DS    0CL10
@HRS     DS    CL4
         DC    C':'
@MIN     DS    CL2
         DC    C':'
@SEC     DS    CL2
@SREGS   DC    16F'0'
@TEXIT   EQU   *                   END OF TIME CONVERT ROUTINE
         MEND
         EJECT
         MACRO
&LABEL   @B    &FIELDB,&FIELDA
         MVC   &FIELDB,=X'212020'    MOVE EDIT PATTERN
         SR    R2,R2                ZERO FIELD FOR INSERT
         IC    R2,&FIELDA            LOAD FIELD TO BE CONVERTED
         CVD   R2,DWK                CONVERT TO DECIMAL
         ED    &FIELDB-1(4),DWK+6          AND EDIT IT INTO WTO
         OI    &FIELDB+2,X'F0'        INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @TM   &FIELD,&MASK,&MSGID
&LABEL   TM    &FIELD,&MASK
         BZ    $&SYSNDX
         MVC   COMMENT,&MSGID
         @PUT  COMLINE
$&SYSNDX EQU   *
         MEND
         EJECT
         MACRO
&LABEL   @TMO  &FIELD,&MASK,&MSGID
&LABEL   TM    &FIELD,&MASK
         BO    $&SYSNDX
         MVC   COMMENT,&MSGID
         @PUT  COMLINE
$&SYSNDX EQU   *
         MEND
         EJECT
         MACRO
&LABEL   PARM
&LABEL   L    1,0(1)            * LOAD ADDR OF PARM
         LH   2,0(1)            * LOAD LENGTH OF PARM
         LTR   2,2              * LENGTH OF ZERO
         BZ    @&SYSNDX         * NO - BYPASS MOVE
         BCTR 2,0               * SUBTRACT LENGTH BY 1
         EX   2,#&SYSNDX        * EXECUTE THE MOVE
         B    @&SYSNDX
#&SYSNDX MVC  PARM(0),2(1)
@&SYSNDX EQU  *
         MEND
         EJECT
         MACRO
         $REGS
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
***********************************************************************
         MEND
         EJECT
         MACRO
&LABEL   $STCK  &NOGEN
         LCLC   &L
.**********************************************************************
.****                                                             *****
.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****
.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****
.****                                                             *****
.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****
.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****
.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****
.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****
.****    CONSTANTS.                                               *****
.****                                                             *****
.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****
.****                       THE DAY OF THE WEEK AS FOLLOWS        *****
.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****
.****                       3=THURSDAY, 4=FRIDAY,                 *****
.****                       5=SATURDAY, 6=SUNDAY                  *****
.****                                                             *****
.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****
.****                       THE DATE IN MM/DD/YY FORMAT           *****
.****                                                             *****
.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****
.****                       THE TIME IN HH:MM:SS FORMAT           *****
.****                                                             *****
.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****
.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****
.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****
.****                                                             *****
.**********************************************************************
&L       SETC  '&SYSNDX'
&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK
         LM    0,1,8(13)          LOAD INTO WORK REGS
         L     15,16              GET CVT ADDRESS
         A     0,304(15)          ADD LOCAL TIME DEVIATION
         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS
         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)
         LR    15,0               COPY REMAINDER OF MICS TO GET SECS
         SR    14,14              CLEAR FOR DIVIDE
         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)
         LR    14,15              COPY TO WORK REG
S&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS
         BM    S&L.S              LESS THAN SIXTY, CONTINUE
         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP
         AL    1,=F'1'            BUMP MINUTES
         B     S&L.B              CHECK AGAIN
S&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT
         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+6(2),26(13)   MOVE THE SECONDS
         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT
         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES
         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+3(2),26(13)   MOVE THE MINUTES
         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS
         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME(2),26(13)     MOVE THE HOURS
         MVI   TIME+2,C':'        ADD COLIN
         MVI   TIME+5,C':'        ADD COLIN
         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK
         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER
         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY
         STC   0,DAY              SET RELATIVE DAY OF WEEK
         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS
         L     1,16               GET CVT ADDRESS
         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA
         ZAP   8(8,13),=P'0'      ZERO WORK AREA
         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION
         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA
         LA    15,S&L.T           LOAD ADDR OF TABLE
         CVB   1,8(13)            CONVERT TO BIN
         SLL   1,30               SHIFT ALL BUT LAST TWO
         LTR   1,1                TEST RESIDUAL
         BNZ   *+8                NOT 0, BRANCH
         LA    15,S&L.TL          LEAP YEAR
         LR    14,15              SAVE TABLE IN USE
         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION
         CVB   0,8(13)            CONVERT TO BIN
         SR    1,1                CLEAR REG
         IC    1,0(15)            LOAD CHAR FROM TABLE
         LA    15,1(15)           INDEX TABLE POINTER
         SR    0,1                SUBTRACT FROM WORK VALUE
         BP    *-10               STILL POSITIVE, DO AGAIN
         AR    0,1                ELSE, ADD IT BACK
         CVD   0,8(13)            CONVERT TO DEC
         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT
         SR    15,14              FIND VALUE OF CURRENT INDEX
         CVD   15,8(13)           CONVERT TO DEC
         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT
         OI    DATE+1,C'0'        INSURE NUMERICS
         OI    DATE+4,C'0'        INSURE NUMERICS
         OI    DATE+7,C'0'        INSURE NUMERICS
         MVI   DATE+2,C'/'        ADD SLASH
         MVI   DATE+5,C'/'        ADD SLASH
         B     S&L.E              BRANCH AROUND CONSTANTS
S&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE
S&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR
         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP
DAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK
DATE     DC    C'  /  /  '        CURRENT DATE
TIME     DC    C'  :  :  '        CURRENT TIME
.NOGEN   ANOP
S&L.E    DS    0H
         MEND
         EJECT
         MACRO
&LABEL   @MF1  &FIELDA,&FIELDB
&LABEL   MVC   &FIELDB.(7),=X'20202020202021'   MOVE EDIT PATTERN
         L     R8,&FIELDA                    LOAD DATA FIELD
         CVD   R8,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB.-1(8),DWK+4              AND EDIT IT INTO WTO
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @MF   &FIELDA,&FIELDB
         MVC   &FIELDB.(5),=X'2020202021'   MOVE EDIT PATTERN
         L     R8,&FIELDA                    LOAD DATA FIELD
         CVD   R8,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB.-1(6),DWK+5            AND EDIT IT INTO WTO
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @TMJ  &FIELDA,&FIELDB
         SPACE
&LABEL   LM    R5,R7,TABLEA              -> TABLE
L&SYSNDX CLC   HDR,=CL20&FIELDB
         BE    A&SYSNDX
         CLI   HDR,X'00'                 NULL HDR ?
         BE    B&SYSNDX                  YES
         BXLE  R5,R6,L&SYSNDX
         OI    JMPSW,TABFULL             SET TABLE FULL BIT
         B     XL&SYSNDX                 AND BYPASS CODE
B&SYSNDX MVC   HDR,=CL20&FIELDB        1ST PASS
         L     R1,&FIELDA                    LOAD DATA FIELD
         ST    R1,CURR                   SAVE CURRENT VALUE
         ST    R1,TOTAL                  SAVE CURRENT VALUE
         OI    FLAG,JES3                 SET AS JES3 RATE RECORD
         B     XL&SYSNDX
A&SYSNDX L     R1,&FIELDA                    LOAD DATA FIELD
         ST    R1,CURR                   SAVE CURRENT VALUE
         L     R2,TOTAL                  LOAD TOTAL FIELD
         AR    R2,R1                     INCR BY CURRENT COUNT
         ST    R2,TOTAL                  AND SAVE IT
         SPACE
XL&SYSNDX EQU  *
         MEND
         EJECT
         MACRO
&LABEL   @TMJM &FIELDA,&FIELDB
         SPACE
&LABEL   LM    R5,R7,TABLEA              -> TABLE
L&SYSNDX CLC   HDR,&FIELDB
         BE    A&SYSNDX
         CLI   HDR,X'00'                 NULL HDR ?
         BE    B&SYSNDX                  YES
         BXLE  R5,R6,L&SYSNDX
         OI    JMPSW,TABFULL             SET TABLE FULL BIT
         B     XL&SYSNDX                 AND BYPASS CODE
B&SYSNDX MVC   HDR,&FIELDB               1ST PASS
         L     R1,&FIELDA                    LOAD DATA FIELD
         ST    R1,CURR                   SAVE CURRENT VALUE
         ST    R1,TOTAL                  SAVE CURRENT VALUE
         OI    FLAG,JES3                 SET AS JES3 RATE RECORD
         B     XL&SYSNDX
A&SYSNDX L     R1,&FIELDA                    LOAD DATA FIELD
         ST    R1,CURR                   SAVE CURRENT VALUE
         L     R2,TOTAL                  LOAD TOTAL FIELD
         AR    R2,R1                     INCR BY CURRENT COUNT
         ST    R2,TOTAL                  AND SAVE IT
         SPACE
XL&SYSNDX EQU  *
         MEND
         EJECT
         MACRO
&LABEL   @M1   &FIELDA,&FIELDB
         MVC   &FIELDB-1(5),=X'2020202021'   MOVE EDIT PATTERN
         LH    R1,&FIELDA                    LOAD FIELD TO BE CONVERTED
         CVD   R1,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB-2(6),DWK+5            AND EDIT IT INTO WTO
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @TMHM &FIELDA,&FIELDB
         LA    R2,&FIELDB
         LH    R1,&FIELDA
         BAL   R14,TMH
         MEND
         EJECT
         MACRO
&LABEL   @TMFM &FIELDA,&FIELDB
         LA    R2,&FIELDB
         L     R1,&FIELDA
         BAL   R14,TMF
         MEND
         EJECT
         MACRO
&LABEL   @TMH  &FIELDA,&FIELDB
         LA    R2,=CL20&FIELDB
         LH    R1,&FIELDA
         BAL   R14,TMH
         MEND
         EJECT
         MACRO
&LABEL   @TMF  &FIELDA,&FIELDB
         LA    R2,=CL20&FIELDB
         L     R1,&FIELDA
         BAL   R14,TMF
         MEND
         EJECT
         MACRO
&NAME    PRIME &REG,&SAVE,&CONS,&NTER,&EQU
.* THIS IS THE PRIME MACRO
.* ITS FUNCTION IS
.* 1.  ESTABLISH ADDRESSABILITY SAVE REGISTERS ACT AS ENTRY
.* 2.  GENERATE REG SAVE AREA OR DO GETMAIN
.* 3.  PROVIDE EXIT USED BY TERME MACRO
.* 4.  PROVIDE ADDIT SAVE AREAS FOR SUBROUTINES SO ONLY 1 BAL REG
         GBLA  &PERFD,&PERFL
         GBLC  &PERFR,&LAB,&SNTRY
         GBLB  &EQFLG,&PRIM
         LCLB  &REENT
         LCLA  &CNT,&LOOP,&INC
         LCLC  &BASE(3),&SCSECT,&PNAME
         AIF   (&PRIM).DUMB
&PRIM    SETB  1
&LAB     SETC  'ICC'.'&SYSNDX'
&SNTRY   SETC  '&LAB'.'A'
&SCSECT  SETC  '&SYSECT'
         AIF   (T'&NAME EQ 'O').CSCT0
         AIF   ('&SCSECT' NE '').CSCT1
&NAME    CSECT
&SCSECT  SETC  '&NAME'
         AGO   .CSCT0
.DUMB    MNOTE 8,'ONLY ONE PRIME MAY BE DEFINED'
         MEXIT
.CSCT1   MNOTE 'A CSECT IS ALREADY DEFINED.'
&PNAME   SETC  '&NAME'
.CSCT0   ANOP
         USING *,15
         AIF   ('&EQU' EQ '').A1
         $REGS
.A1      AIF   ('&CONS' EQ '').A2
&PNAME   SAVE  (14,12),,&CONS
         AGO   .A3
.A2      ANOP
&PNAME   SAVE  (14,12)
         B     AID&SYSNDX
         DC    CL8'&SCSECT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
         DS    0H
AID&SYSNDX EQU *
.A3       ANOP
         LA    14,&LAB
         ST    14,&SNTRY
         B     &SNTRY+4
         AIF   ('&SAVE' NE '').A4
&REENT   SETB  1
.A4      AIF   ('&REG' EQ '').A6
         AIF   (N'&REG GT 3).BAD3
         AIF   (N'&REG LT 2).B1
&CNT     SETA  N'&REG
&LOOP    SETA  1
&INC     SETA  &LOOP+1
.A5      AIF   (T'&REG(&LOOP) NE 'N').BAD1
&BASE(&LOOP) SETC '&REG'(&INC,K'&REG(&LOOP))
&INC     SETA  &INC+K'&REG(&LOOP)+1
&LOOP    SETA  &LOOP+1
         AIF   (&LOOP LE &CNT).A5
         AGO   .A7
.B1      ANOP
&BASE(1) SETC  '&REG'
         AGO   .B2
.A6      ANOP
&BASE(1) SETC  '12'
.B2      ANOP
&CNT     SETA  1
.A7      ANOP
&SNTRY   DS    F
          DROP 15
         AIF   (&CNT NE 3).A8
         LA    &BASE(3),2048                     ESTABLISH ADDRESSAB
         LA    &BASE(2),2048(&BASE(3),15)        WITH THREE
         LA    &BASE(3),2048(&BASE(3),&BASE(2))  BASE REGS
         LR    &BASE(1),15
         USING &SCSECT,&BASE(1),&BASE(2),&BASE(3)
         AGO   .A10
.A8      AIF   (&CNT NE 2).A9
         LA    &BASE(2),2048                     ESTABLISH ADRESSAB
         LA    &BASE(2),2048(&BASE(2),15)        WITH TWO
         LR    &BASE(1),15                       BASE REGS
         USING &SCSECT,&BASE(1),&BASE(2)
         AGO   .A10
.A9      AIF   (&CNT NE 1).BAD4
         LR    &BASE(1),15                       ESTABLISH ADRESSAB
         USING &SCSECT,&BASE(1)
.A10     AIF   (&REENT).A11
         LA    15,&SAVE
         AGO   .A14
.A11     AIF   ('&NTER' NE '').A12
&PERFL   SETA  0
&CNT     SETA  72
         AGO   .A13
.A12     AIF   (T'&NTER NE 'N').BAD5
&PERFL   SETA  &NTER
&PERFR   SETC  '14'
&PERFD   SETA  0
&CNT     SETA  72+&NTER*4
* GENERATED SAVE AREA EXTENDED FOR USE BY NTER AND XIT MACROS
.A13     ANOP
         GETMAIN R,LV=&CNT
         LR    15,1
.A14     ANOP
         LM    0,1,20(13)
         ST    13,4(15)                          CHAIN THE
         ST    15,8(13)                          SAVE AREAS
         LR    13,15
         L     15,&SNTRY
          BR   15
         AIF   (&REENT).A20
&LAB.X   L     13,4(13)
         AGO   .A21
.A20     ANOP
&LAB.X   LR    1,13
         L     13,4(13)
         FREEMAIN R,LV=&CNT,A=(1)
.A21     ANOP
         RETURN (14,12),T,RC=(15)
         AIF   (&REENT).A24
         AIF   ('&NTER' NE '').A22
&CNT     SETA  18
         AGO   .A23
.A22     AIF   (T'&NTER NE 'N').BAD5
&PERFL   SETA  &NTER
&PERFR   SETC  '14'
&PERFD   SETA  0
&CNT     SETA  &NTER+18
* GENERATED SAVE AREA EXTENDED FOR USE BY NTER AND XIT MACROS
.A23     ANOP
&SAVE    DC    &CNT.F'0'
.A24     ANOP
         LTORG
&LAB     DS    0H
         MEXIT
.BAD1    MNOTE 8,'FIRST PARAMETER/S MUST BE SELF DEFINING'
         MEXIT
.BAD3    ANOP
.BAD4    MNOTE 8,'THIS MACRO WILL HANDLE 1-3 BASE REGS'
         MEXIT
.BAD5    MNOTE 8,'THIRD PARAMETER MUST BE SELF DEFINING'
         MEND
         EJECT
         MACRO
&NAME    TERME &PASS,&RC=O
         GBLC  &LAB
         GBLB  &PRIM
&NAME    DS    0H
         AIF   (&PRIM).TSTRC
         MNOTE 8,'PRIME MUST OCCUR BEFORE TERME'
         MEXIT
.TSTRC   AIF   ('&RC' EQ '(15)').RET
         AIF   ('&RC' EQ 'O').RET
         AIF   ('&RC'(1,1) EQ '(').ISAREG
         LA    15,&RC
         AGO   .RET
.ISAREG  ANOP
         LR    15,&RC
.RET     AIF   ('&PASS' NE 'PASS').NOPASS
         L     14,4(13)
         STM   0,1,20(14)
.NOPASS  ANOP
         B     &LAB.X
         MEND
         EJECT
         MACRO
&LABEL   @PUT  &DATA
&LABEL   LA    R8,&DATA                 -> DATA
         BAL   R3,PUTROU                 GOTO PUT ROUTINE
         MEND
         EJECT
*  $START OF REAL CODE
JMP      PRIME (11,12),,,,R
         EJECT
         L    1,0(1)            * LOAD ADDR OF PARM
         LH   2,0(1)            * LOAD LENGTH OF PARM
         LTR   2,2              * LENGTH OF ZERO
         BZ    NOPARM           * NO - BYPASS MOVE
         LA    R4,2(R1)         * -> PARM DATA
         LR    R5,R4
         AR    R5,R2            * -> END OF PARM DATA
PLOOP    EQU   *
*---------------------------------------------------------------------*
         CLC   =C'COUNT=',0(R4)
         BE    DOCOUNT
         CLC   =C'CYCLE=',0(R4)
         BE    DOCYCLE
         CLC   =C'INT=',0(R4)
         BE    DOINT
*---------------------------------------------------------------------*
         LA    R4,1(R4)
         CR    R4,R5
         BH    ENDSCAN
         B     PLOOP
         EJECT
DOINT    LA    R4,4(R4)                 -> INT=
         LA    R7,SSTH
         MVC   SSTH,=4C'0'
DILOOP   EQU   *
         CLI   0(R4),C','
         BE    INCR
         CLI   0(R4),C' '
         BL    INCR
         MVC   0(1,R7),0(R4)
         LA    R7,1(R7)                 -> NEXT BYTE
         LA    R4,1(R4)
         CR    R4,R5
         BH    INCR
         B     DILOOP
         EJECT
DOCYCLE  LA    R4,6(R4)                 -> CYCLE=
         LA    R7,DWK
         MVC   DWK,BLANKS
         SR    R1,R1
DCYLOOP  EQU   *
         CLI   0(R4),C','
         BE    ENDDCY
         CLI   0(R4),C' '
         BL    ENDDCY
         MVC   0(1,R7),0(R4)
         LA    R1,1(R1)
         LA    R7,1(R7)                 -> NEXT BYTE
         LA    R4,1(R4)
         CR    R4,R5
         BH    ENDDCY
         B     DCYLOOP
ENDDCY   EQU   *
         BCTR  R1,R0
         EX    R1,PKCYC
         ZAP   CYCLEP,PACKWK
         B     INCR
PKCYC    PACK  PACKWK(4),DWK(0)
         EJECT
DOCOUNT  LA    R4,6(R4)                 -> COUNT
         LA    R7,DWK
         MVC   DWK,BLANKS
         SR    R1,R1
DCLOOP   EQU   *
         CLI   0(R4),C','
         BE    ENDDC
         CLI   0(R4),C' '
         BL    ENDDC
         MVC   0(1,R7),0(R4)
         LA    R1,1(R1)
         LA    R7,1(R7)                 -> NEXT BYTE
         LA    R4,1(R4)
         CR    R4,R5
         BH    ENDDC
         B     DCLOOP
ENDDC    EQU   *
         BCTR  R1,R0
         EX    R1,PKCNT
         ZAP   COUNTP,PACKWK
         B     INCR
PKCNT    PACK  PACKWK(4),DWK(0)
         EJECT
INCR     EQU   *
         LA    R4,1(R4)
         CR    R4,R5
         BH    ENDSCAN
         B     PLOOP
ENDSCAN  EQU   *
         EJECT
NOPARM   CVB   R1,COUNTP
         ST    R1,LIMIT
         CVB   R1,CYCLEP                 AND CONV TO BINARY
         STH   R1,CYC                    AND SAVE IT
         SPACE
         EXTRACT DWK,'S',FIELDS=(TSO)
         L     R2,DWK                    -> ANS AREA
         TM    0(R2),TSO                 ARE WE TSO ?
         BZ    OPEN
         OI    JMPSW,TSO                 YES -TURN ON BIT
OPEN     OPEN  (REPORT,OUTPUT,STAGRPT,OUTPUT)
         TM    REPORT+X'30',X'10'        OPEN ?
         BO    OPENED                    YES
         ABEND 3
OPENED   EQU   *
         EJECT
         GETMAIN R,LV=WORKSIZE,SP=0
         ST    R1,CORE
         LR    R5,R1
         USING WORK,R5
         LA    R1,TAB
         ST    R1,TABLEA
NENT     EQU   200                 # OF TABLE ENTRIES
         A     R1,=A(NENT*TABENT)       ENTRIES * LENGTH OF 1 ENT
         L     R2,=A(TABENT)             LEN OF ENTRY
         ST    R2,TABLEA+4
         SR    R1,R2                     END OF TBL-1 ENT
         ST    R1,TABLEA+8
         USING TABLE,R5
         EJECT
         USING CVTMAP,R1
         L     R1,CVTPTR                 -> CVT
         L     R2,CVTSMCA                -> SMF CONTROL AREA
         USING SMCABASE,R2
         MVC   CPUID,SMCASID             MOVE CPU ID
         L     R1,CVTJESCT
         USING JESCT,R1
         L     R1,JESSSCT                -> 1ST SSCT
         USING SSCT,R1
         L     R10,SSCTSSVT              -> JES3 SSVT
         USING SSVT,R10
         EJECT
*
**       INITIALIZE TABLE
*
         LM    R5,R7,TABLEA              -> TABLE
INITLOOP XC    0(TABENT,R5),0(R5)
         L     R2,=A(99999999)           LOAD HIGH VALUE
         ST    R2,MIN                    AND SAVE IT FOR MIN
         BXLE  R5,R6,INITLOOP
*        ESTABLISH FIELD FOR NON STANDARD SA COUNT
         L     R5,TABLEA                 -> 1ST TABLE ENTRY
         MVC   HDR,=CL20'NON-STD SA COUNT'
         OI    FLAG,STOCK                SET AS STOCK
         OI    FLAG,MULT                 SET AS MULT ENTRY FIELD
         SPACE
TESTAUTH TESTAUTH FCTN=1
         LTR   R15,R15                   YES OR NO ?
         BZ    AUTHCODE                  YES
         OI    JMPSW,NOAUTH
         B     LETSDOIT                  NO
         EJECT
AUTHCODE EQU   *
         TM    JMPSW,TSO                 ARE WE TSO ?
         BO    LETSDOIT                  BYPASS AUTH CODE
         MODESET KEY=ZERO,MODE=SUP
         SR    R0,R0
         SYSEVENT DONTSWAP,ASID=(0)
         SLL   R1,24
         SRL   R1,24
         LTR   R1,R1
         BZ    SWAPOK
         ABEND 2,DUMP                    DONTSWAP FAILED
SWAPOK   EQU   *
         MODESET KEY=NZERO,MODE=PROB
LETSDOIT EQU   *
         TIME  BIN
         ST    R0,ITIME                  SAVE START TIME
TIMELOOP EQU   *
         LM    R5,R7,TABLEA              -> TABLE
*
**       REINIT ACTR VALUE
*
         LH    R1,=H'01'
REINITL  EQU   *
         XC    ACTR,ACTR                 CTR RESET
         XC    CURR,CURR
REBXLE   BXLE  R5,R6,REINITL
         L     R1,CTR
         A     R1,=F'01'                 INCREMENT COUNTER
         ST    R1,CTR                    AND SAVE IT AGAIN
         L     R1,$CTR
         A     R1,=F'01'                 INCREMENT COUNTER
         ST    R1,$CTR                   AND SAVE IT AGAIN
         C     R1,LIMIT                  COMPLETED SAMPLES
         BH    LEAVE                     YES - GET OUT OF HERE
         CVD   R1,DWK
         UNPK  SAMP#,DWK+4(4)
         OI    SAMP#+5,X'F0'
$B1      BC    15,$STCK                  BYPASS FOR FIRST PASS ONLY
         STIMER WAIT,DINTVL=TIMEVAL
         EJECT
$STCK    $STCK
$B2      BC    0,DOIT
         MVC   STIME,TIME
         MVC   SDATE,DATE
         EJECT
         MVI   $B1+1,X'00'
         MVI   $B2+1,X'F0'
DOIT     EQU   *
         SPACE
         @TMF  SVTSACNT,'ACTIVE SA COUNT'
         @TMF  SVTSAMAX,'SA HI-WTR COUNT'
         @TMF  SVTPBCNT,'# AVAIL USAM BFRS'
         @TMH  SVTPBUFS,'MAX # USAM BUFFERS'
         @TMF  SVTSTAG,'# SA EXTENTS'
         @TMF  SVTMXSRB,'# PBUF-WAIT TASKS'
         @TMF  SVTPBCOM,'BUFS IN POSTD TASKS'
         @TMJ  SVTJCNT,'JSAM IO COUNT'
         @TMJ  SVTUCNT,'USAM IO COUNT'
         OC    XSVTFLG1,SVTFLAG1
         OC    XSVTFLG2,SVTFLAG2
         EJECT
         USING ASCB,R9
         L     R9,SVTASCB
         LTR   R9,R9                     IS JES3 HERE?
         BZ    NOJES                     NO
         @TMH  ASCBNVSC,'JES3 NVIO SLOT COUNT'
         @TMH  ASCBFMCT,'JES3 FRAME COUNT'
         L     R8,ASCBRSM               -> RSM CONTROL BLOCK
         USING RSMHD,R8
         @TMH  RSMCNTFX,'FIXED FRAME COUNT'
         @TMH  RSMLSQAC,'LSQA FRAME COUNT'
         @TMH  RSMCOMFX,'FIXED COMMON FRAMES'
         DROP  R8
         L     R8,ASCBOUXB
         USING OUXB,R8
         L     R9,ASCBOUCB
         USING OUCB,R9
         @TMH  OUXBFMCT,'EFF. FRAME COUNT'
         @TMH  OUXBUIC,'HIGHEST UIC'
         @TMH  OUCBTWSS,'JES3 TARGET WSS'
         @TMJ  OUCBIOSM,'SMF EXCP CT'
         @TMJ  OUXBPIN,'JES3 PAGE-IN'
         @TMJ  OUXBPOUT,'JES3 PAGE-OUT'
         @TMJ  OUXBPREC,'JES3 PAGE-RECLAIM'
         @TMJ  OUXBCAPR,'JES3 COMMON PAGE-IN'
         @TMJ  OUXBSTCT,'JES3 PAGES STOLEN'
         @TMJ  OUXBLPAI,'JES3 LPA PAGE-IN'
         @TMJ  OUXBLPAR,'JES3 LPA RECLAIMS'
         EJECT
*        REPORT ON MPC IF GLOBAL
         SPACE
         TM    SVTFLAG1,SVTGLOBL        ARE WE ON THE GLOBAL
         BZ    NOTGLOB                  NOT GLOBAL - SKIP THIS CODE
         USING MPCSTART,R9
         L     R9,SVTMPCDA              -> MPC Q
         SPACE
MPCLOOP  EQU   *
         MVC   $MPNAME,MPNAME           SET UP MPCHDR
         MVC   $MPCQUAL,$LSTOR          SET UP FOR LSTOR
         @TMHM MPMVSALC,$MPCHDR
         MVC   $MPCQUAL,$MPDEEP         SET UP FOR TOTAL JOBS
         @TMHM MPDEEP,$MPCHDR
         MVC   $MPCQUAL,$MPAINIT        SET UP FOR TOTAL INITS
         @TMHM MPAINIT,$MPCHDR
         MVC   $MPCQUAL,$MPMAXI         MAX INITS
         @TMHM MPMAXI,$MPCHDR
         MVC   $MPCQUAL,$MPSDEEP        CURRENT SETUP DEPTH
         SR    R1,R1
         IC    R1,MPSDEEP
         STH   R1,DWK
         @TMHM DWK,$MPCHDR
         MVC   $MPCQUAL,$MPSDPTH        MAX JOBS IN SETUP
         SR    R1,R1
         IC    R1,MPSDEPTH
         STH   R1,DWK
         @TMHM DWK,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC DIE RDS'
         @TMJM CTCSRD,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC RDS STD'
         @TMJM CTCSRD0,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC RDS 1K'
         @TMJM CTCSRD1,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC RDS 2K'
         @TMJM CTCSRD2,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC RDS 4K'
         @TMJM CTCSRD4,$MPCHDR
         L     R1,CTCSRD
         A     R1,CTCSRD0
         A     R1,CTCSRD1
         A     R1,CTCSRD2
         A     R1,CTCSRD4
         ST    R1,FWD
         A     R1,TCTCR
         ST    R1,TCTCR
         MVC   $MPCQUAL,=CL12'CTC TOT RDS'
         @TMJM FWD,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC SSCM WRT'
         @TMJM CTCSWT,$MPCHDR
         MVC   $MPCQUAL,=CL12'CTC DIE WRTS'
         @TMJM CTCSWT0,$MPCHDR
         L     R1,CTCSWT
         A     R1,CTCSWT0
         ST    R1,FWD
         A     R1,TCTCW
         ST    R1,TCTCW
         MVC   $MPCQUAL,=CL12'CTC TOT WRTS'
         @TMJM FWD,$MPCHDR
         L     R9,MPNEXT                -> NEXT MPC
         LTR   R9,R9
         BZ    MPCDONE                  FINISHED MPC THIS TIME
         B     MPCLOOP
MPCDONE  EQU   *
         @TMJ  TCTCR,'JES3 TOTAL CTC READS'
         @TMJ  TCTCW,'JES3 TOTAL CTC WRITES'
         L     R1,TCTCA
         A     R1,TCTCW
         A     R1,TCTCR
         ST    R1,TCTCA
         @TMJ  TCTCA,'JES3 TOTAL CTC ACTIVITY'
         XC    TCTCR,TCTCR
         XC    TCTCW,TCTCW
         XC    TCTCA,TCTCA
NOTGLOB  EQU   *
NOJES    EQU   *
         EJECT
*----------------------------------------------------*
         TM    JMPSW,NOAUTH              AUTHORIZED ?
         BZ    AUTH                      YES
         B     BYPASS
*----------------------------------------------------*
         SPACE
AUTH     EQU   *
         MODESET KEY=ZERO,MODE=SUP
         EJECT
*----------------------------------------------------*
*        CROSS MEMORY ACCESS TO TVT AND ???          *
*                                                    *
*                                                    *
*                                                    *
*----------------------------------------------------*
         L     R9,SVTTVT           -> TVT
         USING TVTABLE,R9
         ESAR  R1                  GET CURRENT SEC ASID OR MINE
         ST    R1,SASID            AND SAVE IT
         AXSET AX=ONE              SET FOR ONE ACCESS
         LH    R1,SVTASID          LOAD JES3 ASID
         SSAR  R1                  SET FOR JES3 ADDRSPC ACCESS
         SR    R15,R15
         LA    R1,4
         MVCP  FWD(R1),AIONTRKS,R15
         @TMF  FWD,'TOTAL TRACKS'
         SR    R15,R15
         LA    R1,4
         MVCP  FWD(R1),AIONLEFT,R15
         @TMF  FWD,'# TRACKS AVAIL'
         SR    R15,R15
         LA    R1,4
         MVCP  FWD(R1),AIONOBFN,R15
         @TMF  FWD,'# CORE BUF WAITS'
         XC    FWD,FWD
         SR    R15,R15
         LA    R1,2
         MVCP  FWD+2(R1),AIONBUFS,R15
         @TMF  FWD,'TOTAL JSAM BUFFERS'
         XC    FWD,FWD
         SR    R15,R15
         LA    R1,2
         MVCP  FWD+2(R1),AIONOBFM,R15
         @TMF  FWD,'MAX JSAM BUFFERS USED'
         XC    FWD,FWD
         SR    R15,R15
         LA    R1,2
         MVCP  FWD+2(R1),AIOBMIN,R15
         @TMF  FWD,'MIN JSAM BUFFERS USED'
         SR    R15,R15
         LA    R1,4
         MVCP  FWD(R1),SRJPSCTR,R15
         @TMF  FWD,'SNA RJP STORAGE'
         SR    R15,R15
         LA    R1,4
         MVCP  FWD(R1),TVTWAITS,R15
         @TMJ  FWD,'TOTAL OS WAITS'
         L     R1,SASID            -> MY ASID
         SSAR  R1                  RESET SEC ASID BACK TO MINE
         DROP  R9
         EJECT
         L     R8,SVTSQE                 -> SQE TABLE
         USING SQESTART,R8
         L     R9,SVTXSQE                -> START OF IATGRSQ
         A     R9,=X'00000FE0'           -> END OF TABLE IN IATGRSQ
         B     SQEFIRST                  FIRST ENTRY PROCESS
         SPACE
SQELOOP  EQU   *
         LA    R8,SQEEND-SQESTART(R8)    -> NEXT SQE
         CR    R8,R9                     END OF SQE TABLE ?
         BH    ENDLOOP                   YES
SQEFIRST TM    SQEFLAG1,SQEAVAIL         FREE SQE
         BO    SQELOOP                   OTHERWISE KEY LOOPING
         LM    R5,R7,TABLEA              -> TABLE
TBLOOP   EQU   *
         CLC   SQEHDR,HDR                HDRS = ?
         BE    FOUND                     YES - UPDATE TABLE
         CLI   HDR,X'00'                 EMPTY ENTRY
         BE    FOUNDP                    YES
         BXLE  R5,R6,TBLOOP              KEEP LOOKING
         OI    JMPSW,TABFULL             SET TABLE FULL BIT
         B     SQELOOP                   AND IGNORE FOR NOW
         EJECT
FOUNDP   EQU   *                         INITIALIZE ENTRY
         MVC   HDR,SQEHDR
         CLC   HDR,=CL20'STAGING AREA     '
         BE    DOSTAG1
         IC    R1,SQESPLN
         STC   R1,SPN
         L     R1,SQESPLN
         LA    R1,0(R1)                  CLEAR HIGH-BYTE
         ST    R1,CURR                   SAVE CURRENT VALUE
         ST    R1,MAX                    SAVE CURRENT MAX
         ST    R1,TOTAL                  SAVE CURR TOTAL
         ST    R1,AVG                    SAVE CURR AVG
         LH    R1,=H'01'
         STH   R1,ACTR
         B     SQELOOP                   GET NEXT ENTRY
FOUND    EQU   *
         CLC   HDR,=CL20'STAGING AREA     '
         BE    DOSTAG
         L     R1,SQESPLN
         LA    R1,0(R1)                  CLEAR HIGH-BYTE
DOACCUM  EQU   *
         L     R2,CURR
         AR    R2,R1
         ST    R2,CURR
         LH    R4,ACTR
         AH    R4,=H'01'
         STH   R4,ACTR
         CH    R4,=H'01'
         BNH   LT
         OI    FLAG,MULT
LT       L     R3,TOTAL
         AR    R3,R1
         ST    R3,TOTAL
         SR    R2,R2
         L     R4,CTR
         DR    R2,R4
         ST    R3,AVG
         B     SQELOOP
         EJECT
DOSTAG1  EQU   *
         OI    FLAG,MULT
         IC    R1,SQESPLN
         STC   R1,SPN
         XC    CURR,CURR
         XC    TOTAL,TOTAL
         XC    MAX,MAX
         EJECT
DOSTAG   EQU   *
         ST    R5,ADDRSTAG
         L     R5,TABLEA                 -> 1ST TABLE ENTRY
         LH    R2,ACTR
         AH    R2,=H'01'
         STH   R2,ACTR
         L     R1,CURR
         AH    R1,=H'01'
         ST    R1,CURR
         L     R3,TOTAL
         AH    R3,=H'01'
         ST    R3,TOTAL
         SR    R2,R2
         L     R4,CTR
         DR    R2,R4
         ST    R3,AVG                    SAVE AVG # OF NON-STD SA'S
*
         TM    STAGRPT+X'30',X'10'       FILE OPEN ?
         BZ    NOSQER                    NO - FORGET THIS CODE
         L     R3,SQESADR                -> SA ITSELF
         USING STADSECT,R3
         SR    R2,R2
         IC    R2,STAGET                 LOAD SUBPOOL
         STC   R2,DWK
         @B    XSP,DWK
         IC    R2,STAFUNC                LOAD FUNCTION
         STC   R2,DWK
         @B    XFUNC,DWK
         IC    R2,STAMOD                 LOAD MOD CODE
         STC   R2,DWK
         @B    XMOD,DWK
         L     R2,STAGET                 LOAD LEN
         LA    R2,0(R2)                  CLEAR SP
         CVD   R2,DWK                    CONVERT TO DECIMAL
         MVC   XLEN(5),=X'2020202021'   MOVE EDIT PATTERN
         ED    XLEN-1(6),DWK+5            AND EDIT IT INTO WTO
         PUT   STAGRPT,STARLINE
         DROP  R3
NOSQER   EQU   *
         L     R5,ADDRSTAG
         L     R1,SQESPLN                LOAD LENGTH
         LA    R1,0(R1)                  CLEAR HIGH-BYTE
ACCSTAG  EQU   *
         ST    R1,CURR
         C     R1,MAX
         BH    XNMAX
CXMIN    C     R1,MIN
         BH    XTOT
         ST    R1,MIN                    SET NEW MIN
         B     XTOT
XNMAX    ST    R1,MAX
         B     CXMIN                     GO CHECK MIN
XTOT     L     R3,TOTAL
         AR    R3,R1
         ST    R3,TOTAL
         SR    R2,R2
         L     R4,CTR
         DR    R2,R4
         ST    R3,AVG                    SAVE AVG # OF NON-STD SA'S
         B     SQELOOP
ENDLOOP  EQU   *
         MODESET KEY=NZERO,MODE=PROB
         EJECT
*+++++++
BYPASS   EQU   *
*+++++++
         LM    R5,R7,TABLEA              -> TABLE
MINMAXL  EQU   *
         CLC   HDR,=CL20'STAGING AREA'
         BE    MBXLE
         L     R1,CURR
         L     R2,MIN
         L     R3,MAX
         CR    R1,R3
         BH    NMAX
CMIN     CR    R1,R2
         BH    MBXLE
         ST    R1,MIN                    SET NEW MIN
         B     MBXLE
NMAX     ST    R1,MAX
         B     CMIN                      GO CHECK MIN
MBXLE    BXLE  R5,R6,MINMAXL
         EJECT
         LH    R1,CYC
         LH    R2,CYCCTR
         AH    R2,=H'01'
         STH   R2,CYCCTR
         CR    R2,R1
         BL    TIMELOOP
         TIME  BIN
         LR    R4,R0
         L     R1,ITIME
         ST    R4,ITIME
         SR    R4,R1                     GET CURRENT TIME OF INTERVAL
         ST    R4,INT                    SAVE INTERVAL
         LR    R7,R4
         TIMECONV
         MVC   OINTERV(8),@HRS+2
         XC    CYCCTR,CYCCTR
         MVC   ODATE,DATE
         MVC   OTIME,TIME
         ZAP   LCTR,=P'03'
         AP    PCTR,=P'01'               ADD 1 TO PAGE CTR
         UNPK  PAGE,PCTR
         OI    PAGE+3,X'F0'
         PUT   REPORT,T1
         PUT   REPORT,T2
         EJECT
         @TM   XSVTFLG1,SVTGLOBL,M2
         @TMO  XSVTFLG1,SVTGLOBL,M7
         @TM   XSVTFLG1,SVTABFG,M1
         @TM   XSVTFLG1,SVTDSI,M3
         @TM   XSVTFLG1,SVTQUFG,M4
         @TM   XSVTFLG1,SVTABNP,M5
         @TM   XSVTFLG2,SVTNOEXT,M6
         XC    XSVTFLG1,XSVTFLG1         CLEAR FLAG SAVE BYTE
         XC    XSVTFLG2,XSVTFLG2         CLEAR FLAG SAVE BYTE
         EJECT
         PUT   REPORT,BLINE
         PUT   REPORT,T3
         LM    R5,R7,TABLEA
DLOOP    EQU   *                         DISPLAY LOOP
         CLI   HDR,X'00'                 END OF TABLE
         BE    TOUT
         MVC   OUTLINE,BLANKS
         TM    FLAG,JES3                 IS IT A JES3 ADDRSPC ENTRY
         BO    DJES3                     YES
         @MF1  CURR,OCURR
         TM    FLAG,MULT
         BO    FMIN
         TM    FLAG,STOCK
         BO    FMIN
         XC    TOTAL,TOTAL               REINIT TOTAL
         B     OP1                       AND BYPASS MIN-MAX-AVG
FMIN     @MF1  MIN,OMIN
         @MF1  MAX,OMAX
         @MF1  AVG,OAVG                  DISPLAY AVERAGE
OP1      EQU   *
         MVC   OHDR,HDR
         TM    FLAG,STOCK
         BO    PUTIT
         SR    R1,R1
         IC    R1,SPN
         CVD   R1,DWK
         UNPK  OSPN(3),DWK+6(2)
         OI    OSPN+2,X'F0'
PUTIT    @PUT  OUTLINE
         BXLE  R5,R6,DLOOP
TOUT     EQU   *
*
**       RE-INITIALIZE TABLE
*
         LM    R5,R7,TABLEA              -> TABLE
$INTLOOP XC    0(TABENT,R5),0(R5)
         L     R2,=A(99999999)           LOAD HIGH VALUE
         ST    R2,MIN                    AND SAVE IT FOR MIN
         BXLE  R5,R6,$INTLOOP
*        ESTABLISH FIELD FOR NON STANDARD SA COUNT
         L     R5,TABLEA                 -> 1ST TABLE ENTRY
         MVC   HDR,=CL20'NON-STD SA COUNT'
         OI    FLAG,STOCK                SET AS STOCK
         OI    FLAG,MULT                 SET AS MULT ENTRY FIELD
         XC    CTR,CTR
         MVC   SDATE,ODATE
         MVC   STIME,OTIME
         B     TIMELOOP
         EJECT
DJES3    EQU   *                         PREPARE OUTLINE FOR JES3
         L     R3,CURR
         L     R2,MIN
         ST    R3,MIN
         SR    R3,R2                     GET TOTAL FOR SAMPLE
         ST    R3,FWD                    SAVE
         LTR   R3,R3
         BZ    VALZERO                   0 SO BYPASS EDIT
         SR    R2,R2
         M     R2,=F'10000'              MULT BY 10000 FOR RATE
         L     R4,INT                    LOAD INTERVAL
         DR    R2,R4                     DIVIDE
         LTR   R3,R3
         BZ    VALZERO                   0 SO BYPASS EDIT
         CVD   R3,DWK                    SAVE IT
         MVC   OAVG+1(6),=X'2020214B2020'
         ED    OAVG,DWK+5
         MVC   OR(5),=C'RATE='
         MVC   PS(8),=C' PER SEC'
VALZERO  EQU   *
         @MF1  FWD,OCURR
         MVC   OHDR,HDR
         B     PUTIT                     GO PRINT IT
         EJECT
LEAVE    EQU   *
         FREEMAIN R,LV=WORKSIZE,SP=0,A=CORE
         CLOSE (REPORT,,STAGRPT)
         SPACE 2
         TM    JMPSW,TABFULL
         BO    TERM1
         TERME RC=0                      TSO OR BATCH ONLY
TERM1    ABEND 1,DUMP                    TELL ALL TABLE FULL
         EJECT
PUTROU   EQU   *
         AP    LCTR,=P'01'               INCR LINE COUNTER BY 1
         CP    LCTR,MAXLINES
         BH    NEWPAGE                   YES - NEW PAGE
         PUT   REPORT,(R8)              ISSUE PUT
         BR    R3                        RETURN
NEWPAGE  EQU   *
         ZAP   LCTR,=P'03'               RESET LCTR
         AP    PCTR,=P'01'               ADD 1 TO PAGE CTR
         UNPK  PAGE,PCTR
         OI    PAGE+3,X'F0'
         PUT   REPORT,T1
         PUT   REPORT,T2
         PUT   REPORT,BLINE
         PUT   REPORT,T3
         B     PUTROU
         EJECT
*----------------------------------------------------------*
*        COMMON TABLE UPDATE ROUTINES                      *
*----------------------------------------------------------*
TMH      LM    R5,R7,TABLEA            -> TABLE
TMHL     CLC   HDR,0(R2)
         BE    TMHA
         CLI   HDR,X'00'               NULL HDR ?
         BE    TMHB                    YES
         BXLE  R5,R6,TMHL
         OI    JMPSW,TABFULL           SET TABLE FULL BIT
         B     XTMHL                   AND BYPASS CODE
TMHB     MVC   HDR,0(R2)               1ST PASS
         ST    R1,CURR                 SAVE CURRENT VALUE
         ST    R1,AVG                  SAVE ORIG AVG VALUE
         ST    R1,TOTAL                SAVE ORIG TOT VALUE
         B     XTMHL
TMHA     ST    R1,CURR                 SAVE CURRENT VALUE
         L     R2,TOTAL                LOAD TOTAL FIELD
         AR    R2,R1                   INCR BY CURRENT COUNT
         ST    R2,TOTAL                AND SAVE IT
         B     TMHX
TMHX     EQU   *
         SR    R2,R2
         L     R4,CTR
         L     R3,TOTAL                LOAD TOTAL
         LTR   R3,R3
         BZ    XTMHL
         DR    R2,R4                   DIVIDE
         ST    R3,AVG                  SAVE IT
         SPACE
XTMHL    EQU   *
         OI    FLAG,STOCK              SET AS STOCK
         BR    R14
         EJECT
TMF      LM    R5,R7,TABLEA            -> TABLE
TMFL     CLC   HDR,0(R2)
         BE    ATMF
         CLI   HDR,X'00'               NULL HDR ?
         BE    BTMF                    YES
         BXLE  R5,R6,TMFL
         OI    JMPSW,TABFULL           SET TABLE FULL BIT
         B     XTMFL                   AND BYPASS CODE
BTMF     MVC   HDR,0(R2)               1ST PASS
         ST    R1,CURR                 SAVE CURRENT VALUE
         ST    R1,AVG                  SAVE ORIG AVG VALUE
         ST    R1,TOTAL                SAVE ORIG TOT VALUE
         B     XTMFL
ATMF     ST    R1,CURR                 SAVE CURRENT VALUE
         L     R2,TOTAL                LOAD TOTAL FIELD
         AR    R2,R1                   INCR BY CURRENT COUNT
         ST    R2,TOTAL                AND SAVE IT
         B     XTMF
XTMF     EQU   *
         L     R4,CTR
         SR    R2,R2
         L     R3,TOTAL                LOAD TOTAL
         LTR   R3,R3
         BZ    XTMFL
         DR    R2,R4                   DIVIDE
         ST    R3,AVG                  SAVE IT
         SPACE
XTMFL    EQU   *
         OI    FLAG,STOCK              SET AS STOCK
         BR    R14
         EJECT
*----------------------------------------------------------*
*        USER DATA AREA                                    *
*----------------------------------------------------------*
         LTORG
         EJECT
SASID    DS    F
ONE      DC    H'1'                USED BY AXSET
         DS    0F
XSVTFLG1 DC    X'00'                     FLAG 1
XSVTFLG2 DC    X'00'                     FLAG 2
JMPSW    DC    X'00'
NOAUTH   EQU   X'20'                     NOT APF AUTHORIZED
TABFULL  EQU   X'40'                     TABLE FULL
TSO      EQU   X'80'                     WE ARE UNDER TSO
*
         DS    0D
TIMEVAL  DC    C'0000'          HHMM    TIME FOR STIMER
SSTH     DC    C'0020'          SSTH    FIFTH OF A SECOND DEFAULT
*
LIMIT    DC    F'60'
INT      DC    F'0'
CYC      DC    H'60'
CYCCTR   DC    H'00'
BLINE    DC    C'0'
BLANKS   DC    CL80' '
         EJECT
ITIME    DC    F'00'
CTR      DC    F'00'
$CTR     DC    F'00'
LCTR     DC    PL2'02'
PCTR     DC    PL3'00'
MAXLINES DC    PL2'53'                   LINES PER PAGE
TRTBL    DC    C'0123456789ABCDEF'
         SPACE
         DS    0D
COUNTP   DC    PL8'000060'                C'XXXXX' # SAMPLES
CYCLEP   DC    PL8'0060'                 DEFAULT
PACKWK   DC    PL4'0'
TABLEA   DC    A(0,0,0)
ADDRSTAG DC    F'0'
ADDRSDSN DC    F'0'
ADDRSVOL DC    F'0'
ADDRGM   DC    F'0'
DWK      DS    D
CORE     DS    F
FWD      DS    F
TCTCR    DC    F'0'                COUNTER FOR TOTAL CTC READS
TCTCW    DC    F'0'                COUNTER FOR TOTAL CTC WRITES
TCTCA    DC    F'0'                COUNTER FOR TOTAL CTC ACTIVITY
         EJECT
OUTLINE  DC    CL80' '
         ORG   OUTLINE+4
OHDR     DS    CL20
         DS    CL3
OCURR    DS    CL7
         DS    CL5
OMIN     DS    CL7
         DS    CL5
OMAX     DS    CL7
OR       DS    CL5
OAVG     DS    CL7
PS       DS    CL5
OSPN     DS    CL3
         ORG
         EJECT
T1       DC    CL80'1'
         ORG   T1+4
         DC    C'JES3 MONITORING PROGRAM V2M1'
         DC    CL2' ',C'SDATE='
SDATE    DC    CL8' '
         DC    C' STIME='
STIME    DC    CL8' '
         DC    CL5' ',C'PAGE  '
PAGE     DC    CL4' '
         ORG
T2       DC    CL80' '
         ORG   T2+4
         DC    C'INTERVAL='
OINTERV  DC    CL8' '
         DC    C' ',C'CPUID='
CPUID    DC    CL4' '
         DC    CL3' ',C'DATE='
ODATE    DC    CL8' '
         DC    C'  TIME='
OTIME    DC    CL8' '
         DC    CL2' ',C'SAMPLE '
SAMP#    DC    CL6' '
         ORG
T3       DC    CL80' '
         ORG   T3+4
         DC    C'DATA AREA'
         DC    CL14' ',C'CURRENT',CL5' ',C'MINIMUM'
         DC    CL5' ',C'MAXIMUM',CL5' ',C'AVERAGE',CL5' '
         DC    C'SPN'
         ORG
         EJECT
COMLINE  DC    CL80' '
         ORG   COMLINE+4
         DC    C'COMMENTS: '
COMMENT  DC    CL50' '
         ORG
STARLINE DC    CL80' '
         ORG   STARLINE+4
         DC    C'SUBPOOL= '
XSP      DC    CL3' '
         DC    CL5' ',C'LENGTH= '
XLEN     DC    CL6' '
         DC    CL2' ',C'FUNCTION= '
XFUNC    DC    CL3' '
         DC    CL5' ',C'MOD= '
XMOD     DC    CL3' '
         ORG
         EJECT
M1       DC    CL50'SYSTEM IS TERMINATING'
M2       DC    CL50'SYSTEM IS GLOBAL'
M3       DC    CL50'DSI IS ACTIVE'
M4       DC    CL50'SYSTEM IS QUIESCING MODE'
M5       DC    CL50'ABEND PROCESSING'
M6       DC    CL50'NO SA EXTS - LET JES3 AND ASID 1 PROCESS'
M7       DC    CL50'SYSTEM IS LOCAL'
         EJECT
$MPCHDR  DS    0CL20
$MPCQUAL DC    CL12' '
$MPNAME  DC    CL8' '
$LSTOR   DC    CL12'ALLOC LSTOR'
$MPAINIT DC    CL12'CURR INITS'
$MPMAXI  DC    CL12'MAX INITS'
$MPDEEP  DC    CL12'ACTIVE JOBS'
$MPSDPTH DC    CL12'MAX SU JOBS'       MAX SETUP JOBS
$MPSDEEP DC    CL12'CUR SU DPTH'       MCURRENT SETUP DEPTH
         EJECT
REPORT   DCB   DSORG=PS,MACRF=PM,DDNAME=REPORT,RECFM=FA,LRECL=80,      X
               BLKSIZE=80
STAGRPT  DCB   DSORG=PS,MACRF=PM,DDNAME=STAGRPT,RECFM=FA,LRECL=80,     X
               BLKSIZE=80
         EJECT
TABLE    DSECT
HDR      DS    CL20                      20C FOR SQEHDR
TOTAL    DS    F
CURR     DS    F
MIN      DS    F
MAX      DS    F
AVG      DS    F
FLAG     DS    X
STOCK    EQU   X'80'               GIVEN VALUE - NOT FROM IATGRSQ
JES3     EQU   X'40'                     JES3 ADDRSPC VALUE
MULT     EQU   X'20'                     MULT ENTRY FIELD
SPN      DS    X
ACTR     DS    H
TABENT   EQU   *-HDR
         EJECT
WORK     DSECT
TAB      EQU   *
         DS    (NENT*TABENT)X
TABE     EQU   *-4
WORKSIZE EQU   *-WORK
         EJECT
********************************************************************
*        MAPPING MACROS                                            *
********************************************************************
         EJECT
         CVT   DSECT=YES,PREFIX=YES
         EJECT
         IATYSQE
         EJECT
         IATYSTA
         EJECT
         IATYFCT
         EJECT
         IATYMPC
         EJECT
         IEFJESCT TYPE=DSECT
         EJECT
         IEFJSCVT
         EJECT
         IATYSVT TYPE=DSECT
         EJECT
         IATYTVT
         EJECT
         IEESMCA
         EJECT
         IRAOUCB
         EJECT
         IHAOUXB
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
         IHARSMHD
         EJECT
         IHAPSA
         END
