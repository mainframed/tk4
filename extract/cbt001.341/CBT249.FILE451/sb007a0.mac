++USERMOD(SB007A0)  /*  ROCKWELL INTERNATIONAL USERMOD */
   /*     BDTTSO FRONT-END                                   */.
++VER(Z038) FMID(HBD1102)
        /* END OF ++VER */  .
++JCLIN.
//LINK  EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,SIZE=(768K,100K),REUS
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//AOSBA    DD DISP=SHR,DSN=SYS1.AOSBA
//SYSLMOD  DD DISP=SHR,DSN=SYS1.CMDLIB
//SYSPRINT DD SYSOUT=A
//SYSLIN   DD *
 INCLUDE AOSBA(BDTCMD)              * INCLUDE ORIGINAL MODULE
  ALIAS          BDT
  ENTRY          BDTCMD             * OUR CHANGE
  ORDER          BDTCMD             * OUR CHANGE
 NAME    BDTTSO                     * LOAD MODULE NAME
/*
++SRC    (BDTCMD  )
   SYSLIB(JES3SRC )
  DISTLIB(AJES3SRC)
    /* UPDATE FOLLOWS */ .
BDTCMD   TITLE 'MVS/BDT TSO COMMAND PRE-PROCESSOR'
         EJECT
*===================================================================*
*
*  NAME:       BDTCMD
*
*
*  FUNCTION:   PRE-PROCESS THE BDT TSO COMMAND TO PROVIDE STANDARD
*              TSO NAMING CONVENTION SUPPORT FOR DATASET NAMES.
*
*  FLOW:       1. GETMAIN WORK AREA (4K)
*              2. SETUP NEW CPPL
*              3. COPY ORIGINAL COMMAND BUFFER INTO NEW COMMAND BUFFER
*                 IN WORKAREA AND:
*                 A. SCAN FOR ALL KEYWORDS WHICH CONTAIN A DATASET NAME
*                 B. IF A DSN IS FOUND THEN:
*                    1.  IF IT IS ENCLOSED IN QUOTES, DROP THEM
*                    2.  IF NO QUOTES THEN EXTRACT THE USER'S PREFIX
*                        FROM THE UPT AND FULLY QUALIFY THE DSN IN THE
*                        NEW COMMAND BUFFER.
*                 C. AT END OF INPUT BUFFER, CALCULATE THE NEW LENGTH
*                    OF THE BUFFER AND UPDATE THE OUTPUT BUFFER.
*                 D. IF KEYWORD OF DEBUG IS FOUND THEN SET A FLAG AND
*                    AT END OF BUFFER TPUT THE NEW BUFFER.
*              4. LOAD VCON OF BDTTSO AND BALR TO IT
*              5. SAVE RETURN CODE AND FREEMAIN WORKAREA
*              6. RESTORE RETURN CODE AND EXIT
*
*  DEPENDENCIES:
*              MUST BE LINKEDITED WITH BDTTSO AND MUST BE THE ENTRY
*              POINT.
*
*  REGISTER CONVENTIONS:
*              R13 - SAVE AREA LINKAGE
*              R12 - BASE REGISTER
*              R8  - BASE FOR WORKAREA
*              R7  - COUNT OF LENGTH OF INPUT BUFFER
*              R6  - POINTER TO OUTPUT BUFFER LOCATION
*              R5  - BASE REGISTER FOR ORIGINAL CPPL
*              R4  - POINTER TO INPUT BUFFER LOCATION
*
*
*  ATTRIBUTES: RENT
*
*
*  ENTRY POINTS:
*              BDTCMD
*
*  ENTRY LINKAGE:
*              R1 MUST POINT TO CPPL
*
*  INPUT:
*              TSO COMMAND BUFFER
*
*  EXIT:
*              TO CALLER
*
*  OUTPUT:
*              R15 CONTAINS THE RETURN CODE FROM BDTTSO
*
*  MACROS:
*              FREEMAIN
*              GETMAIN
*              IKJUPT
*              IKJCPPL
*              TPUT
*
*
*  ERROR HANDLING:  NONE - SYNTAX ERRORS WILL BE CHECK BY BDTLP.
*
*
*  CHANGE ACTIVITY
*
*
*===================================================================*
         EJECT
*===================================================================*
*        REGISTER EQUATES                                           *
*===================================================================*
R0       EQU   0
R1       EQU   1                       CPPL ON INPUT
R2       EQU   2
R3       EQU   3
R4       EQU   4                       POINTER TO INPUT BUFFER
R5       EQU   5                       BASE FOR ORIGINAL CPPL
R6       EQU   6                       POINTER TO OUTPUT BUFFER
R7       EQU   7                       COUNTER FOR CURRENT LENGTH
R8       EQU   8                       BASE FOR OUR WORK AREA
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12                      BASE REGISTER FOR BDTCMD
R13      EQU   13                      STANDARD SAVE AREA LINKAGE
R14      EQU   14
R15      EQU   15
         EJECT
*===================================================================*
*        INITIALIZATION CODE                                        *
*===================================================================*
BDTCMD   CSECT
         USING BDTCMD,R15
         B     CMDSTART                BRANCH AROUND ID
         DC    CL8'BDTCMD'             CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'           COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'           COMPILE TIME
CMDSTART DS    0F
         SPACE 2
         DROP  R15
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 LOAD BASE REG
         USING BDTCMD,R12              INFORM ASSEMBLER
         LA    R1,4095                 LOAD REG 0 WITH GETMAIN LENGTH
         GETMAIN R,LV=(R1)             GET CORE FOR SAVEAREA
         LR    R8,R1                   SET UP NEW CMD BASE
         USING WORK,R8                 ESTABLISH USING ON WORK AREA
         XC    SAVEAREA,SAVEAREA       CLEAR SAVE AREA
         XC    FLAG,FLAG               INITIALIZE FLAG BYTES
         ST    R13,4(R1)               SAVE BACK CHAIN
         ST    R1,8(R13)               SET FORWARD CHAIN
         LR    R11,R1                  SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)             RESTORE REG 15
         ST    R0,16(R13)              SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)           RESTORE REGS USED IN GETMAIN
         LR    R13,R11                 SET SAVEAREA POINTER
         LR    R5,R1                   -> ORIGINAL CPPL
         USING CPPL,R5
         EJECT
*===================================================================*
*        BUILD NEW CPPL BASED ON OLD CPPL                           *
*===================================================================*
         L     R4,CPPLCBUF             -> CMD BUFFER
         MVC   $CPPLUPT,CPPLUPT        COPY UPT TO OURS
         MVC   $CPPLPSC,CPPLPSCB       COPY PSC TO OURS
         MVC   $CPPLECT,CPPLECT        COPY ECT TO OURS
         LA    R1,NEWCBUFL             -> NEW CMD BUFFER
         ST    R1,$CPPLCBF             SAVE IT IN CPPL
         MVC   NEWCBUFL,0(R4)          MOVE CBUF HEADER
         EJECT
*===================================================================*
*        UPPER CASE THE INPUT BUFFER                                *
*===================================================================*
         LA    R6,4(R4)                -> START OF INPUT BUFFER
         LH    R7,0(R4)                LOAD LENGTH OF BUFFER
         SH    R7,=H'04'               LESS HEADER LENGTH
DOTR     CH    R7,=H'255'              > 255 ?
         BL    DOTR1                   NO
         LH    R1,=H'255'              LOAD 255
         EX    R1,TRANSEX              DO TRANSLATE
         SR    R7,R1                   LESS 255
         B     DOTR                    CONTINUE TRANSLATE
DOTR1    DS    0H
         EX    R7,TRANSEX              DO IT
         B     TRDONE                  GO TO END OF TRANSLATE
*===================================================================*
*        EXECUTED INSTRUCTION
TRANSEX  TR    0(0,R6),TRTABLE         TRANSLATE TO UPPER
*===================================================================*
TRDONE   DS    0H
         EJECT
*===================================================================*
*        SET UP FOR SCAN AND COPY OF OLD BUFFER INTO NEW BUFFER     *
*===================================================================*
         LA    R6,NEWCBUFD             -> NEW CBUF DATA
         LH    R7,0(R4)                LOAD LEN OF CBUF
         SH    R7,=H'04'               LESS HEADER
         LA    R4,4(R4)                -> CBUF DATA
         EJECT
*===================================================================*
*        SCAN AND MOVE ORIGINAL BUFFER TO NEW BUFFER                *
*===================================================================*
MVBUF    DS    0H                      MOVE BUFFER AND UPDATE
         CLC   =C'DSN(',0(R4)          DSN ?
         BE    DO4
         CLC   =C'GMDLIB(',0(R4)       GMJD LIB ?
         BE    DO7
         CLC   =C'VOLREF(',0(R4)       VOLREF ?
         BE    DO7
         CLC   =C' DS(',0(R4)          DS (DSNAME) ?
         BE    DO4
         CLC   =C' DA(',0(R4)          DA (DSNAME) ?
         BE    DO4
         CLC   =C'DSNAME(',0(R4)       DSNAME ?
         BE    DO7
         CLC   =C'DCBDS(',0(R4)        DCBDS PARAMETER
         BE    DO6
         CLC   =C'DATASET(',0(R4)      DATASET ?
         BE    DO8
         CLC   =C'DEBUG',0(R4)         DEBUG OPTION
         BE    DODEBUG                 YES
         MVC   0(1,R6),0(R4)           MOVE THE BYTE
         LA    R4,1(R4)                UP INPUT POINTER
         LA    R6,1(R6)                UP OUTPUT POINTER
         BCTR  R7,R0                   LESS 1
         LTR   R7,R7                   END OF BUFFER
         BNP   BUFDONE                 YES
         B     MVBUF                   ELSE CONTINUE
         EJECT
*===================================================================*
*        SET DEBUG FLAG BIT FOR TPUT AT END OF BUFFER               *
*===================================================================*
DODEBUG  DS    0H
         OI    FLAG1,FLAGDBG           SET DEBUG
         LA    R4,5(R4)                INCR R4
         SH    R7,=H'05'               REDUCE COUNTER
         BCT   R7,MVBUF                AND CONTINUE
         B     BUFDONE                 END OF BUFFER
         EJECT
*===================================================================*
*        SET UP TO PROCESS DATASET NAMES                            *
*===================================================================*
DO8      DS    0H
         MVC   0(8,R6),0(R4)           MOVE DATASET(
         LA    R6,8(R6)                UP OUTPUT POINTER
         LA    R4,8(R4)                UP INPUT POINTER
         SH    R7,=H'08'               LESS 8 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         B     DODSN2
         SPACE
DO7      DS    0H
         MVC   0(7,R6),0(R4)           MOVE GMDLIB( OR VOLREF(
         LA    R6,7(R6)                UP OUTPUT POINTER
         LA    R4,7(R4)                UP INPUT POINTER
         SH    R7,=H'07'               LESS 7 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         B     DODSN2
         SPACE
DO6      DS    0H
         MVC   0(6,R6),0(R4)           MOVE DCBDS(
         LA    R6,6(R6)                UP OUTPUT POINTER
         LA    R4,6(R4)                UP INPUT POINTER
         SH    R7,=H'06'               LESS 6 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         B     DODSN2
         EJECT
*===================================================================*
*        PROCESS DATASET NAMES                                      *
*===================================================================*
DO4      DS    0H
         MVC   0(4,R6),0(R4)           MOVE DSN(  DA(  AND  DS(
         SH    R7,=H'04'               LESS 4 FOR COUNT
         LA    R6,4(R6)                UP OUTPUT POINTER
         LA    R4,4(R4)                UP INPUT POINTER
         SPACE
DODSN2   DS    0H
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         SPACE
*===================================================================*
*        FIND FIRST NON-BLANK IN DATASET NAME                       *
*        IF QUOTE THEN DROP IT                                      *
*                                                                   *
*        IF NOT A QUOTE THEN GET PREFIX FROM UPT                    *
*===================================================================*
DSNBLNK  DS    0H                      FIND 1ST NON-BLANK IN DSNAME
         CLI   0(R4),C' '              BLANK ?
         BNE   DODSNA                  NO - DO IT
         LA    R4,1(R4)                UP INPUT POINTER
         BCT   R7,DSNBLNK              KEEP LOOKING
         B     BUFDONE                 END IT
         SPACE 2
DODSNA   DS    0H                      FIRST NON-BLANK
         CLI   0(R4),C''''             QUOTE ?
         BE    DSNQ                    YES
         L     R2,CPPLUPT              -> USER PROFILE TABLE (UPT)
         USING UPT,R2
         MVC   0(7,R6),UPTPREFX        MOVE PREFIX
         SR    R3,R3                   ZERO R3
         IC    R3,UPTPREFL             LOAD LEN INTO R3
         DROP  R2
         AR    R6,R3                   ADD IT
         MVI   0(R6),C'.'              MOVE . FOR DSNAME
         LA    R6,1(R6)                UP OUTPUT POINTER
         B     MVDSN                   GO MOVE REST OF DSN
         SPACE
*===================================================================*
*        DROP FIRST QUOTE IN DSNAME                                 *
*===================================================================*
DSNQ     DS    0H
         LA    R4,1(R4)                SKIP QUOTE
         BCTR  R7,R0                   LESS 1 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         EJECT
*===================================================================*
*        MOVE THE DATASET NAME INTO THE NEW BUFFER                  *
*===================================================================*
MVDSN    DS    0H
         CLC   0(2,R4),=X'5D7D'        )' ?
         BE    ENDQ                    YES
         CLI   0(R4),C')'              END OF DSN ?
         BE    MVBUF                   YES - END OF THIS MOVE
         MVC   0(1,R6),0(R4)           MOVE THE BYTE
         LA    R4,1(R4)                UP INPUT POINTER
         LA    R6,1(R6)                UP OUTPUT POINTER
         BCTR  R7,R0                   LESS 1 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         CLI   0(R4),C''''             QUOTE
         BNE   MVDSN                   NO MOVE IT
         LA    R4,1(R4)                SKIP IT
         BCTR  R7,R0                   LESS 1 FOR COUNT
         LTR   R7,R7                   END ?
         BNP   BUFDONE                 YES
         B     MVBUF
         SPACE 2
ENDQ     DS    0H
         MVC   0(1,R6),0(R4)           MOVE END ) LESS '
         LA    R4,2(R4)                UP INPUT POINTER
         LA    R6,1(R6)                UP OUTPUT POINTER
         SH    R7,=H'02'               LESS COUNTER BY 2
         LTR   R7,R7                   TEST FOR END OF BUFFER
         BNP   BUFDONE                 END OF BUFFER
         B     MVBUF                   NO - CONTINUE THE MOVE
         EJECT
*===================================================================*
*        END OF INPUT BUFFER - SET CORRECT LEN IN NEW BUFFER        *
*        AND TEST DEBUG FLAG: IF ON DO TPUT OF NEW BUFFER           *
*===================================================================*
BUFDONE  DS    0H
         OC    0(4,R6),=CL4' '         UPPER CASE END OF BUFFER
         LA    R2,NEWCBUFL             -> NEW COMMAND BUFFER
         SR    R6,R2                   GET NEW LEN
         STH   R6,NEWCBUFL             SAVE IT IN THE COMMAND HEADER
         SPACE
         TM    FLAG1,FLAGDBG           DEBUG ??
         BZ    CALLIT                  NO - GO CALL BDTTSO
         LA    R4,NEWCBUFD             -> BDT COMMAND
         SH    R6,=H'04'               LESS HEADER FOR TPUT
TPUT     TPUT  (4),(6),R               AND TPUT IT
         EJECT
*===================================================================*
*        CALL BDTTSO WITH NEW CPPL                                  *
*        SAVE  R15 (RETURN CODE) AND FREE OUR WORK AREA             *
*        THEN  RETURN TO CALLER                                     *
*===================================================================*
CALLIT   DS    0H
         LA    R1,NEWCPPL              -> CPPL
         L     R15,=V(BDTTSO)          GET BDTTSO ADDRESS
         BALR  R14,R15                 AND GO FOR IT
         SPACE 2
         L     R13,4(R13)              GET BACK CHAIN POINTER
         ST    R15,16(R13)             SAVE REGISTER 15 (RETCODE)
         LA    R1,4095                 GET LENGTH OF GETMAIN
         FREEMAIN R,LV=(R1),A=(R8)
         SPACE
         RETURN (14,12)
         EJECT
*===================================================================*
*        LITERALS                                                   *
*===================================================================*
         LTORG
         EJECT
*===================================================================*
*        UPPER CASE TRANSLATE TABLE                                 *
*===================================================================*
TRTABLE  DS    0D
         DC    256AL1(*-TRTABLE)
         ORG   TRTABLE+X'81'
         DC    C'ABCDEFGHI'
         ORG   TRTABLE+X'91'
         DC    C'JKLMNOPQR'
         ORG   TRTABLE+X'A2'
         DC    C'STUVWXYZ'
         ORG   ,
         EJECT
*===================================================================*
*        USER PROFILE TABLE DSECT                                   *
*===================================================================*
         IKJUPT
         EJECT
*===================================================================*
*        TSO COMMAND PROCESSOR PARAMETER LIST                       *
*===================================================================*
         IKJCPPL
         EJECT
*===================================================================*
*        WORK AREA AND NEW COMMAND BUFFER                           *
*===================================================================*
WORK     DSECT
*===================================================================*
*        REGSISTER SAVE AREA                                        *
*===================================================================*
SAVEAREA DS    18F
*===================================================================*
*        FLAG  BYTES                                                *
*===================================================================*
FLAG     DS    0F
FLAG1    DS    X                       FLAG BYTE 1
FLAGDBG  EQU   1                       DEBUG OPTION
FLAG2    DS    X                       AVAILABLE
FLAG3    DS    X                       AVAILABLE
FLAG4    DS    X                       AVAILABLE
*===================================================================*
*        NEW CPPL                                                   *
*===================================================================*
NEWCPPL  DS    0H
$CPPLCBF DS    A                       -> NEW CMD BUFFER
$CPPLUPT DS    A                       -> UPT
$CPPLPSC DS    A                       -> PSCB
$CPPLECT DS    A                       -> ECT
*===================================================================*
*        NEW COMMAND BUFFER                                         *
*===================================================================*
NEWCBUFL DS    F                       LENGTH OF COMMAND BUFFER
NEWCBUFD DS    0C                      DATA
         END   BDTCMD
