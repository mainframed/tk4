P1000300 TITLE '- GPUXTRAK - DATA SET EXTRACTOR'
P1000300 CSECT
         ENTRY GPUXTRAK
GPUXTRAK DS    0H
         ENTRY P10003
P10003   DS    0H
         SPACE 2
***********************************************************************
*                                                                     *
*                                                                     *
* NAME  P1000300                                                      *
*                                                                     *
* LEVEL 1.0 MAY 1980                                                  *
*                                                                     *
* FUNCTION  TO CREATE ONE OR MORE OUTPUT FILES OF SELECTED            *
*          RECORDS FROM A SEQUENTIAL INPUT FILE.                      *
*                                                                     *
* OPERATION  THE PROGRAM READS UTILITY CONTROL STATEMENTS FROM        *
*          A CONTROL FILE (SYSIN). THE STATEMENTS SPECIFY THE NUMBER  *
*          OF EXTRACTIONS TO BE PERFORMED AS WELL AS THE CRITERIA     *
*          FOR EACH EXTRACT OPERATION. EXTRACTION STATISTICS          *
*          ARE CALCULATED AND OPTIONALLY PRINTED.                     *
*                                                                     *
* INPUT  UTILITY CONTROL STATEMENTS AND THE DATA FILE UPON WHICH THE  *
*       EXTRACTION(S) ARE TO TAKE PLACE.                              *
*                                                                     *
* OUTPUT UTILITY MESSAGES AND THE DESIRED EXTRACTION FILES.           *
*                                                                     *
* WORKAREAS                                                           *
*                                                                     *
* MACROS   OPEN, CLOSE, GET, PUT, GETMAIN, FREEMAIN, REGEQU           *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         PRINT NOGEN
         SPACE 1
         REGEQU
         SPACE 1
SELBASE  EQU   R2
CTR      EQU   R3
DATA     EQU   R4
ADREC    EQU   R4
ADDR     EQU   R5
WORK     EQU   R6
COUNT    EQU   R7
POINTER  EQU   R8
RETURN   EQU   R9
LINK     EQU   R10                 LINKING REG
DCBBASE  EQU   R11                 DSECT BASE REG
BASE     EQU   R12                 MODULE BASE
BACK     EQU   R14                 POINTER BACK TO CALLER
BIT      EQU   R14
ENTRY    EQU   R15
COUNTER  EQU   R15
         SPACE 1
COMDCB   EQU   X'80'               COMMON DCB FLAG INDICATOR
STATS    EQU   X'40'               STATISTICS OPTION FLAG
QUIT     EQU   X'20'               ERROR IN CONTROL DATA SET
IODONE   EQU   X'10'               IO DONE FOR THIS PASS FOR THIS DCB
XTRAKALL EQU   X'08'               ALL RECORDS DESIRED
NOCHAROK EQU   X'80'               NO NON-BLANK IS ACCEPTABLE
EJECT    EQU   C'1'                SKIP TO CHANNEL 1 ON PRINTER
PRSPACE1 EQU   C' '                NORMAL PRINT AND SPACE 1
COMMA    EQU   C','                COMMA
MINUS    EQU   C'-'
ERRVAL   EQU   8                   RETURN CODE FOR ERRORS
FIRSTIME EQU   X'80'               FIRST OPEN TIME INDICATOR
REREAD   EQU   X'40'               DO RE-READ OF FILE AGAIN SWITCH
         EJECT
SELDSECT DSECT
SELCHAIN DS    F                   CHAIN PTR FOR SELECT CTRL BLOCKS
SELFLAGS DS    F                   CONTROL FLAGS
SELDDNAM DS    CL8                 DDNAME SAVE AREA
SELDCB   DS    CL96                OUTPUT DATA CONTROL BLOCK
SELSTART DS    F                   STARTING RECORD NUMBER
SELSTOP  DS    F                   NUMBER OF RECORDS TO BE PROCESSED
SELSKIPI DS    F                   VALUE FROM 'SKIP=' KEYWORD
SELSKIPV DS    F                   ACTUAL SKIP COUNT LEFT
SELINNUM DS    F                   RECORDS IN
SELOUTNM DS    F                   RECORDS OUT
SELFLDS  DS    F                   NUMBER OF FIELD DEFINITIONS
SELNAME  DS    CL8                 STATEMENT NAME
SELFLDPT DS    F                   POINTER TO 1ST FIELD C.B.
SELSIZE  EQU   *-SELDSECT          LENGTH OF SELECT CONTROL WORK AREA
FIELDCNT EQU   SELFLDS
         SPACE 1
FLDSTG   DSECT
FLDNAME  DS    CL8                 STATEMENT NAME
FLDSCNL  DS    F                   FIELD SCAN SLIDE LENGTH
FLDSTART DS    F
FLDCHAIN DS    F                   POINTER TO NEXT FIELD C.B.
FLDSIZ   DS    C
EDITFLAG DC    X'00'               EDIT CONTROL FLAG FIELD
CMPRFLAG DC    X'00'               COMPARE TYPE FLAG FIELD
FLDDATA  DS    32C                 COMPARISON DATA
         DS    0F                  THIS MUST PRECEDE THE LABEL FLDEND
FLDEND   EQU   *                   END OF ONE FIELD DEFINITION
FLDLENG  EQU   FLDEND-FLDSTG       LENGTH OF ONE FIELD DEFINITION ENTRY
         EJECT
P1000300 CSECT
         USING *,BASE              ESTABLISH PROGRAM ADDRESSABILITY
         SAVE  (14,12),,*          SAVE CALLER'S REGISTERS
         LR    BASE,R15            LOAD BASE REGISTER
         LA    R15,SAVE            GET SAVEAREA ADDRESS
         ST    R15,8(,R13)         CHAIN
         ST    R13,4(,R15)          SAVE
         LR    R13,R15               AREAS
         USING IHADCB,DCBBASE      ADDRESSIBILITY FOR DCB REFERENCE
         USING FLDSTG,ADDR
         USING SELDSECT,SELBASE
         MVI   OPTFLGS,0           INIT FLAG FIELD
         MVI   OPNFLAG,0           RESET ALL SWITCHES
         MVI   FLAGS,0             INIT. FLAG FIELD
         XC    RETCODE(4),RETCODE  CLEAR RETURN CODE AREA
         XC    GLEFT(4),GLEFT INIT STG. INITIALLY AVAIL.
* OPEN INPUT PARAMETER FILE AND OUTPUT MESSAGE FILE
         OPEN  (CARDDCB,INPUT,PRINTDCB,OUTPUT)
         LA    DCBBASE,PRINTDCB    SET DSECT REG
         TM    DCBOFLGS,DCBOFOPN   OPEN OK
         BZ    CLOSEXIT            NO - ERROR
         LA    DCBBASE,CARDDCB     SET DSECT REG
         TM    DCBOFLGS,DCBOFOPN   OPEN OK
         BZ    BADOPEN             NO - ERROR
         OPEN  (FROMDCB,INPUT)
         LA    DCBBASE,FROMDCB     SET DSECT REG
         TM    DCBOFLGS,DCBOFOPN   OPEN OK
         BZ    BADOPEN             NO - ERROR
         MVC   FROMBLKI,DCBBLKSI   SAVE INPUT BLKSIZE
         MVC   FROMRECF,DCBRECFM   SAVE INPUT RECFM
         MVC   FROMLREC,DCBLRECL   SAVE INPUT LRECL
         BAL   LINK,PRNTHDER       GO PRINT HEADER LINE
         BAL   LINK,CHEKCARD       GO CHECK INPUT PARAMETERS
         CLI   RETCODE+3,0         ANY ERRORS DETECTED
         BNZ   CLOSEXIT            YES - SKIP REMAINDER OF PROCESSING
         EJECT
         LA    DCBBASE,FROMDCB     SET DSECT REG
         XC    SYSUT1CT(4),SYSUT1CT
         LH    WORK,DCBLRECL       GET
         STH   WORK,INSIZ+2            LRECL
         CLC   INSIZ(4),MINSIZE    IS SIZE AT LEAST A MINIMUM
         BH    MAXTHERE            YES - OK
         MVC   INSIZ(4),MINSIZE    USE MINIMUM THEN
MAXTHERE DS    0H
         MVI   INSIZ,X'80'         SET LAST
         MVI   INSIZPTR,X'80'                PARAMETER BITS.
         GETMAIN LU,LA=INSIZ,A=INSIZPTR
*  BEGIN  COPYING ACCORDING TO CONTROL STATEMENTS
         EJECT
NXTREC   DS    0H
         L     ADREC,INSIZPTR      SET INPUT POINTER
         L     SELBASE,CHAIN       SET BASE FOR PROCESSING
         BAL   LINK,GETINREC       GET NEXT RECORD
         L     WORK,SYSUT1CT       GET TOTAL INPUT RECORD COUNT
         LA    WORK,1(0,WORK)      BUMP BY 1
         ST    WORK,SYSUT1CT       SAVE UPDATED COUNT
         B     NXTREC2             SKIP NEXT CHAIN LOAD
NXTREC1  DS    0H
         L     SELBASE,SELCHAIN    GET ADDRESS OF NEXT WORK AREA
         LTR   SELBASE,SELBASE     ANY  MORE
         BZ    NXTREC              NO, END OF CHAIN
NXTREC2  DS    0H
         NI    SELFLAGS,X'FF'-IODONE RESET SWITCH
         L     ADDR,SELFLDPT       GET ADDRESS OF ITS FIELD DEFS.
         SR    CTR,CTR             ZERO REG
         CLC   SELSTART(4),SYSUT1CT HAS 'STARTAT' BEEN MET
         BH    NXTREC1             NO, DO NOT PROCESS THIS RECORD
         CLC   SELINNUM(4),SELSTOP HAS 'STOPAFT' BEEN MET
         BNL   NXTREC1             YES, DO NOT PROCESS ANY MORE
         L     WORK,SELSKIPV       GET REMAINING SKIP VALUE
         BCT   WORK,SKIPREC        DECREMENT AND CONTINUE IF NON-ZERO
         MVC   SELSKIPV(4),SELSKIPI RESET SKIP COUNT
         L     WORK,SELINNUM       INCREMENT
         LA    WORK,1(,WORK)        'RECORDS IN'
         ST    WORK,SELINNUM         VALUE
         LR    WORK,ADREC          GET PTR TO RECORD
         L     COUNT,SELFLDS       GET NUMBER OF FIELDS
         TM    SELFLAGS,XTRAKALL   IS 'TYPE=ALL' INDICATED
         BO    SELALL              YES
         EJECT
GETIN    DS    0H
         L     COUNTER,FLDSCNL     GET NO. OF START POSITIONS
         LTR   COUNTER,COUNTER     IS 'ANY' IN EFFECT
         BNZ   NOTANY              NO
         LH    COUNTER,FROMDCB+DCBLRECL-IHADCB GET INPUT RECORD LENGTH
NOTANY   DS    0H
         LR    WORK,ADREC          GET PTR TO RECORD
         A     WORK,FLDSTART       COMPUTE FIELD BEGINNING
SLIDE    DS    0H
         IC    CTR,FLDSIZ          GET FIELD LENGTH
         SR    LINK,LINK
         IC    LINK,EDITFLAG       GET DATA TYPE CODE
         B     *+4(LINK)           BRANCH ACCORDINGLY
         B     RTNBIN
         B     RTNEBC
         B     RTNPAK
         B     RTNFIX
         B     RTNDEC
RTNBIN   DS    0H
RTNEBC   DS    0H
         BCTR  CTR,0
         EX    CTR,COMPREC         MAKE FIELD COMPARISON
TESTBRCH DS    0H
         IC    CTR,CMPRFLAG        GET BRANCH MASK
         EX    CTR,BRANCH          TEST CONDITION CODE FROM FIELD TEST
BADCOMP  DS    0H
         LA    WORK,1(0,WORK)
         BCT   COUNTER,SLIDE
         B     NXTREC1             TEST NEGATIVE - GO CHECK NEXT
GOODCOMP DS    0H
         L     ADDR,FLDCHAIN  GET PTR TO NEXT FIELD DEFINITION
         BCT   COUNT,GETIN         CONTONUE FOR ALL FIELDS
*   ALL FIELDS TESTED AFFIRMATIVE
SELALL   DS    0H
         L     COUNT,SELOUTNM      INCREMENT
         LA    COUNT,1(,COUNT)      'RECORDS OUT'
         ST    COUNT,SELOUTNM        VALUE
         BAL   LINK,PUTOUT         GO COPY THIS RECORD
         B     NXTREC1             CONTINUE WITH NEXT EXTRACT CHECK
COMPREC  CLC   0(0,WORK),FLDDATA   MAKE FIELD COMPARISON
BRANCH   BC    0,GOODCOMP          BRANCH IF AFFIRMATIVE
         EJECT
SKIPREC  ST    WORK,SELSKIPV       UPDATE REMAINDER
         B     NXTREC1             CONTINUE
         SPACE
GETINREC DS    0H
         STM   R14,R1,SAVE4REG     SAVE REGS
REGET    DS    0H
         GET   FROMDCB,(ADREC)
         TM    OPNFLAG,REREAD      IS REREAD SWITCH ON
         BZ    NOTRERED            NO - PROCESS NORMALLY
         NI    OPNFLAG,X'FF'-REREAD RESET SWITCH
         B     REGET               RE-ISSUE INPUT REQUEST
NOTRERED DS    0H
         LM    R14,R1,SAVE4REG     RESTORE REGS
         BR    LINK                RETURN
PUTOUT   DS    0H
         STM   R14,R1,SAVE4REG     SAVE REGS
         ST    SELBASE,SAVSEL      SAVE C.B. BASE REG
         TM    SELFLAGS,COMDCB     IS COMMON DCB TO BE USED
         BZ    PUTOUT1             NO
         L     SELBASE,SELDCB      GET C.B. BASE FOR CORRECT DCB
PUTOUT1  DS    0H
         LA    DCBBASE,SELDCB      GET DCB ADDRESS FOR THIS FILE
         TM    SELFLAGS,IODONE     WAS A RECORD ALREADY WRITTEN HERE
         BO    PUTOUT3             YES
         PUT   (DCBBASE),(ADREC)
         OI    SELFLAGS,IODONE     SET I/O DONE THIS PASS
PUTOUT3  DS    0H
         L     SELBASE,SAVSEL      RESTORE REG
         LM    R14,R1,SAVE4REG     RESTORE REGS
         BR    LINK
         EJECT
CHEKCARD DS    0H
         ST    LINK,CHKSAVLK       SAVE REG FOR RETURN
         LA    LINK,CHAIN          INIT. LAST CONTROL
         ST    LINK,LASTCB          BLOCK POINTER
         BAL   LINK,GETCARD        GET CARD
         MVI   SYSINNO,X'FF'       SET SW
         LA    WORK,CARD           GET ADDRESS OF CARD
         BAL   LINK,SCANNAME       SCAN FOR NAME
         BAL   LINK,SCANNOBK       GO FIND NEXT NON-BLANK
         CLC   0(L'EXTRACT,WORK),EXTRACT  VALID VERB
         BNE   SYN2                ERROR
EXAGAN   DS    0H
         LA    WORK,L'EXTRACT(0,WORK) BUMP DATA POINTER
         BAL   RETURN,CLEAR        GO BLANK LINE
         BAL   LINK,PUTLINE        GO PRINT LINE
         BAL   BACK,DSPY           GO DISPLAY CARD
*  ALLOCATE ANOTHER ECTRACT CONTROL BLOCK
         MVC   GSIZ(4),ADSELSIZ
         BAL   RETURN,ALLOCATE
         L     SELBASE,GAREA
         XC    SELDSECT(SELSIZE),SELDSECT
         MVC   SELSTOP(4),MAXVALU  SET DEFAULT MAX.
         MVI   SELSTART+3,1        SET DEFAULT
         MVI   SELSKIPI+3,1        SET 'SKIP=1' AS DEFAULT
         OI    SELFLAGS,STATS      SET DEFAULT OF 'STATS=YES'
         L     LINK,LASTCB         GET PTR TO LAST CB
         ST    SELBASE,0(,LINK)    CHAIN THIS ONE TO IT
         ST    SELBASE,LASTCB      SAVE THIS ONE FOR NEXT TIME
         MVC   SELDCB(TODCBEND-TODCB),TODCB INIT. DCB
         LA    DCBBASE,SELDCB      GET POINTER TO DCB AREA
         MVC   SELDDNAM(8),DDDFAULT SET DEFAULT IN SAVE AREA
         MVC   DCBDDNAM(8),DDDFAULT SET DEFAULT DDNAME
         OI    FLAGS,NOCHAROK      INDICATE NO NON-BLANK IS OK
         BAL   LINK,SCANNOBK       GO FIND NEXT NON-BLANK
         B     FINDKEY             ENTER KEYWORD FIND ROUTINE
         NI    FLAGS,X'FF'-NOCHAROK     RESET SWITCH
         B     DODCB               CONTINUE WITH NORMAL PROCESSING
MOVEDD   DS    0H
         LA    CTR,9               SET MAX. LENGTH
         BAL   LINK,SCANALFA       DO ALPHANUMERIC SCAN
         BCTR  COUNT,0             DECREMENT FOR 'EX' INSTRICTION
         MVI   DCBDDNAM,C' '       BLANK FIELD
         MVC   DCBDDNAM+1(7),DCBDDNAM
         EX    COUNT,DDMOVNAM      MOVE IN DD NAME
         MVC   SELDDNAM(8),DCBDDNAM COPY TO SAVE AREA
         B     TSTMORKY            CONTINUE
DDMOVNAM MVC   DCBDDNAM(0),0(WORK) GET DD NAME
DODCB    DS    0H
         MVC   SELSKIPV(4),SELSKIPI RESET SKIP COUNT
         EJECT
         BAL   LINK,TESTDCB        GO CHECK IF THIS DD ALREADY OPEN
         B     OPNOK               RETURN HERE MEANS USE COMMON DD.
*                                  RETURN HERE MEANS USE OWN DD & DCB.
         OPEN  ((DCBBASE),OUTPUT)
         TM    DCBOFLGS,DCBOFOPN   WAS FILE OPENED
         BO    OPNOK               YES
         MVI   RETCODE+3,ERRVAL     SET ERROR CODE FOR RETURN
         BAL   RETURN,CLEAR        BLANK LINE
         MVC   LINE(L'NOTOPN),NOTOPN     SET ERROR TEXT
         BAL   LINK,PUTLINE        WRITE ERROR MESSAGE
OPNOK    DS    0H
FIELDDEF BAL   LINK,GETCARD        GET NEXT CARD
         LA    WORK,CARD           GET POINTER TO CARD INITIALIZED
         BAL   LINK,SCANNAME       SCAN FOR NAME
         BAL   LINK,SCANNOBK       SCAN FOR NEXT NON-BLANK
         CLC   0(L'EXTRACT,WORK),EXTRACT  VALID VERB
         BE    EXAGAN              YES
         CLC   0(L'FIELD,WORK),FIELD VALID VERB
         BNE   SYN2                ERROR
         BAL   LINK,ASSGNFLD  GO GET FLD STG AND CHAIN
         LA    WORK,L'FIELD(0,WORK) BUMP DATA POINTER
         BAL   BACK,DSPY           GO DISPLAY CARD
         L     COUNT,FIELDCNT      GET NO. OF FIELDS
         LA    COUNT,1(,COUNT)     ADD ONE
         ST    COUNT,FIELDCNT      SAVE UPDATED VALUE
         BAL   LINK,SCANNOBK       SKIP TO NEXT FIELD
         CLC   0(L'ANY,WORK),ANY   IS 'ANY' START POSITION CHOSEN
         BNE   BYPSET0
         XC    FLDSCNL(4),FLDSCNL  INDICATE SLIDE
         XC    FLDSTART(4),FLDSTART INDICATE START AT 1ST BYTE
         LA    COUNT,2             SET INCREMENT COUNT
         B     BYPSET1
BYPSET0  DS    0H
         LA    LINK,1              SET NORMAL SCAN SLIDE NO.
         ST    LINK,FLDSCNL        SET DEFAULT SCAN SLIDE
         BAL   BACK,NUMOPND        GET NUMERIC OPERAND
         BCTR  DATA,0              DECREMENT FOR ZER ORIENTED
         ST    DATA,FLDSTART       SAVE BEGINNING OFFSET
BYPSET1  DS    0H
         BAL   LINK,TSTCOMMA       VALIDATE COMMA AND INCR. POINTER
         BAL   BACK,NUMOPND        GET NUMERIC OPERAND
         STC   DATA,FLDSIZ         SAVE LENGTH
         BAL   LINK,TSTCOMMA       VALIDATE COMMA AND INCR. POINTER
         SPACE
         EJECT
*  TEST FOR DATA FORMAT TYPE                                          *
         MVI   EDITFLAG,0          INITIALIZE EDIT TYPE FLAG
         CLC   0(2,WORK),BIN       BINARY SPECIFIED
         BNE   TSTNXT1             NO
         CLI   FLDSIZ,X'38'        IS FIELD LARGER THEN 56
         BH    SYN7                YES
         MVI   EDITFLAG,0          NO
         B     NEXTCHEK            CONTINUE
TSTNXT1  DS    0H
         CLC   0(2,WORK),CHAR      CHARACTER SPECIFIED
         BNE   TSTNXT2             NO
         CLI   FLDSIZ,X'20'        IS FIELD LARGER THEN 32
         BH    SYN7                YES
         OI    EDITFLAG,4          NO
         B     NEXTCHEK            CONTINUE
TSTNXT2  DS    0H
         CLC   0(2,WORK),PACKDEC   PACKED DECIMAL SPECIFIED
         BNE   TSTNXT3             NO
         CLI   FLDSIZ,X'0F'        IS FIELD LARGER THEN 15
         BH    SYN7                YES
         OI    EDITFLAG,8          NO
         B     NEXTCHEK            CONTINUE
TSTNXT3  DS    0H
         CLC   0(2,WORK),FIXPT     FIXED POINT SPECIFIED
         BNE   TSTNXT4             NO
         MVI   EDITFLAG,12         YES
         B     NEXTCHEK            CONTINUE
TSTNXT4  DS    0H
         CLC   0(2,WORK),ZONEDEC   ZONED DECIMAL SPECIFIED
         BNE   SYN5                NO
         MVI   EDITFLAG,16         YES
NEXTCHEK DS    0H
         LA    COUNT,1             SET PREV. PARAMETER LENGTH
         BAL   LINK,TSTCOMMA       CHECK VALID DELIMITER
         MVI   CMPRFLAG,0          RESET COMPARE TYPE
         LA    COUNT,6             SET LOOP COUNT
         LA    POINTER,COMPVALS
COMPLOOP DS    0H
         CLC   0(2,POINTER),0(WORK) VALID TYPE
         BE    CMPTYPVL            YES
         LA    POINTER,3(,POINTER) GET NEXT TYPE ADDRESS
         BCT   COUNT,COMPLOOP      LOOP CONTROL
         B     SYN6                ERROR
CMPTYPVL DS    0H
         MVC   CMPRFLAG(1),2(POINTER) SET COMPARE BRANCH MASK
         LA    COUNT,1             SET PREV. PARAMETER LENGTH
         BAL   LINK,TSTCOMMA       VERIFY VALID DELIMITER
         LA    LINK,CONTIN1        SET RETURN REG
         SR    COUNT,COUNT         CLEAR
         IC    COUNT,EDITFLAG      GET DATA TYPE
         B     *+4(COUNT)          BRANCH ACCORDINGLY
         B     BINARY
         B     EBCDIC
         B     PACKED
         B     FIXED
         B     DECIMAL
CONTIN1  DS    0H
         BAL   RETURN,CLEAR        BLANK LINE
         B     FIELDDEF            CONTINUE
         EJECT
BINARY   DS    0H
         LA    POINTER,FLDDATA     SET TO DATA SAVE AREA
         IC    COUNT,FLDSIZ        GET FIELD LENGTH
BINLOOP1 LA    CTR,8               SET FOR 8 BITS
         LA    BIT,1               SET ONE BIT POSITION
         SR    DATA,DATA           INIT REG
BINLOOP2 CLI   0(WORK),C'0'        VALIDITY CHECK
         BE    BINSHIFT            OK
         CLI   0(WORK),C'1'        VALIDITY CHECK
         BNE   BINERR              ERROR
         OR    DATA,BIT            SET A ONE
BINSHIFT SLL   DATA,1              SHIFT TO NEXT POSITION
         LA    WORK,1(,WORK)       BUMP PTR
         BCT   CTR,BINLOOP2        TEST ALL DIGITS
         SRL   DATA,1              SHIFT BACK ONE
         STC   DATA,0(,POINTER)    SAVE DATA
         LA    POINTER,1(,POINTER) BUMP PTR
         BCT   COUNT,BINLOOP1      LOOP FOR TOTAL BYTE LENGTH
         BR    LINK                RETURN
FINDKEY  DS    0H
         LA    DATA,KEYS           GET KEYWORD TABLE
         LA    ENTRY,ADCONS        SET PTR TO EXTRACT'S KEYWORDS
         SR    CTR,CTR             INIT
         SR    COUNT,COUNT         INIT
FINDKEY1 IC    COUNT,0(,DATA)      GET KEY LENGTH
         LTR   COUNT,COUNT         ANY KEYS LEFT
         BZ    SYN1                NO, ERROR
         BCTR  COUNT,0             DECREMENT FOR 'EX' INSTRUCTION
         EX    COUNT,COMPKEY       VALID KEYWORD
         BE    KEY1                YES
         LA    DATA,2(COUNT,DATA)  POSITION TO NEXT KEYWORD ENTRY
         LA    CTR,1(0,CTR)        BUMP RELATIVE POSITION
         B     FINDKEY1            CONTINUE SEARCH
KEY1     DS    0H
         LA    WORK,1(COUNT,WORK)  POSITION TO DATA
         SLL   CTR,2               MPY. BY 4 BYTES PER ADCON
         L     DATA,0(CTR,ENTRY)   GET KEYWORD  SUBRTN.'S ADDRESS
         BR    DATA                GO THERE
COMPKEY  CLC   0(0,WORK),1(DATA)
         SPACE
SCANNOBK DS    0H
         LA    CTR,CARD+70         GET MAX VALID COLUMN
         SR    CTR,WORK            COMPUTE DISTANCE LEFT YET
SCANMOR1 CLI   0(WORK),C' '        BLANK
         BNE   0(,LINK)            RETURN WITH NON-BLANK
         LA    WORK,1(0,WORK)      BUMP POINTER TO DATA
         BCT   CTR,SCANMOR1        CONTINUE LOOKING FOR NON-BLANK
         TM    FLAGS,NOCHAROK      IS THIS CONDITION ACCEPTABLE
         BO    4(,LINK)            YES, RETURN AT 'PLUS 4'
         B     SYN1                ERROR, NON-BLANK NOT FOUND
         EJECT
STATSYES OI    SELFLAGS,STATS      SET 'DO STATS'
         B     TSTMORK1            CONTINUE
STATSNO  NI    SELFLAGS,X'FF'-STATS
         B     TSTMORK1            CONTINUE
COPYALL  DS    0H
         OI    SELFLAGS,XTRAKALL   INDICATE ALL DESIRED
         B     TSTMORK1            CONTINUE
         SPACE
TSTMORKY DS    0H
         LA    WORK,1(COUNT,WORK)  POSITION PTR TO NEXT DATA
TSTMORK1 DS    0H
         CLI   0(WORK),C','        MORE PARAMETERS
         BE    TSTMOR1             YES
         CLI   0(WORK),C' '        END OF PARAMETERS
         BE    DODCB
         B     SYN1                ERROR
TSTMOR1  LA    WORK,1(0,WORK)      SPACE PAST COMMA
         B     FINDKEY             VALIDITY CHECK NEXT PARAMETER
         SPACE
SCANNAME DS    0H
         LA    CTR,9               SET MAX. VALID NAME
SCANNAM1 DS    0H
         CLI   0(WORK),C' '        BLANK
         BE    0(,LINK)            RETURN SUCCESSFUL
         LA    WORK,1(0,WORK)      BUMP DATA POINTER
         BCT   CTR,SCANNAM1        CONTINUE SEARCH
         B     SYN1                ERROR
         EJECT
SCANALFA DS    0H
         MVI   LOWCHAR,C'A'        ACCEPT ALPHABETIC & NUMERICS
         B     SCANIT              GO DO SCAN
         SPACE
SCANEN   DS    0H
         MVI   LOWCHAR,C'0'        ACCEPT NUMERICS ONLY
         LA    CTR,17              MAX. OF 16 VALID PLUS 1.
         SPACE
SCANIT   DS    0H
         LR    ENTRY,WORK          SAVE CONTENTS
         LR    COUNT,CTR           PRESERVE ORIGINAL MAX. LENGTH
SCANEN1  DS    0H
         CLI   0(WORK),C','        DELIMITER
         BE    SCAN3               YES
         CLI   0(WORK),C' '        DELIMITER
         BE    SCAN3               YES
LOWCHAR  EQU   *+1
         CLI   0(WORK),C'0'        VALID NUMERIC
         BL    SYN3                NO
         CLI   0(WORK),C'9'        VALID NUMERIC
         BH    SYN3                NO
         LA    WORK,1(0,WORK)      BUMP DATA POINTER
         BCT   CTR,SCANEN1         CONTINUE NUMERIC SCAN
         B     SYN1                ERROR
SCAN3    DS    0H
         SR    COUNT,CTR           COMPUTE LENGTH OF DATA
         LR    WORK,ENTRY          RESTORE CONTENTS
         BR    LINK                RETURN SUCCESSFUL
         EJECT
STOPAFT  DS    0H
         BAL   BACK,NUMOPND        GET NUMERIC VALUE
         ST    DATA,SELSTOP        SET RELATIVE STOP VALUE
         B     TSTMORKY            GO CHECK FOR MORE KEYWORDS
         SPACE
STARTAT  DS    0H
         BAL   BACK,NUMOPND        GET NUMERIC VALUE
         ST    DATA,SELSTART       SET RELATIVE START VALUE
         B     TSTMORKY            GO CHECK FOR MORE KEYWORDS
         SPACE
NUMOPND  BAL   LINK,SCANEN         SCAN FOR VALID NUMERICS
         MVI   NUMWORK,C'0'        INIT. TO ALL
         MVC   NUMWORK+1(15),NUMWORK            ZEROS FILLED.
         LA    DATA,NUMWORK+16     GET POINTER TO WHERE DATA
         SR    DATA,COUNT           SHOULD BE PLACED FOR CONVERSION.
         BCTR  COUNT,0             DECREMENT FOR 'EX' INSTRUCTION
         EX    COUNT,MOVNO         MOVE GOOD NUMERICS TO WORK AREA
         PACK  NUMCONVT(8),NUMWORK(16) CHANGE DATA FORMAT
         CVB   DATA,NUMCONVT       CONVERT TO BINARY
         BR    BACK                RETURN
         SPACE
TSTCOMMA DS    0H
         LA    WORK,1(COUNT,WORK)  BUMP DATA POINTER
         CLI   0(WORK),COMMA       CORRECT DELIMITER
         LA    WORK,1(0,WORK)      BUMP POINTER AGAIN
         BNE   SYN1                ERROR
         BR    LINK                RETURN SUCCESSFUL
MOVNO    MVC   0(0,DATA),0(WORK)   GET DATA INTO WORK AREA
         EJECT
SKIPRTN  DS    0H
         BAL   BACK,NUMOPND        GET NUMERIC VALUE
         ST    DATA,SELSKIPI       SAVE SKIP INCREMENT
         B     TSTMORKY            CHECK FOR MORE KEYWORDS
DSPY     BAL   RETURN,CLEAR
         MVC   LINE(80),CARD       MOVE IT TO PRINT AREA
         BAL   LINK,PUTLINE        PRINT IT
         BR    BACK                RETURN TO CALLER
         SPACE 2
RTNPAK   DS    0H
         LR    LINK,CTR            GET DOUBLE LENGTH
         SRL   LINK,4              GET JUST ONE LENGTH
         AR    LINK,WORK            COMPUTE ADDRESS OF SIGN BYTE
         MVC   SIGN(1),0(LINK)     GET SIGN DIGIT
         NI    SIGN,X'0F'          CLEAR NUMERIC
         CLI   SIGN,X'09'          VALID SIGN
         BNH   BADCOMP             NO - ASSUME TEST NEGATIVE
         EX    CTR,COMPPAKD        COMPARE PACKED FIELD
         B     TESTBRCH
         SPACE 2
COMPPAKD CP    0(0,WORK),FLDDATA(0)
ORPAKLEN OI    FLDSIZ,X'00'
MVCPAKED MVC   0(0,WORK),0(POINTER)
MOVFINPK MVC   FLDDATA(0),0(WORK)  DO FINAL POSITIONING
         EJECT
RTNFIX   DS    0H
RTNDEC   DS    0H
PACKED   DS    0H
         LR    BACK,LINK           SAVE CONTENTS
         MVI   SIGN,X'C0'          SET DEFAULT OF PLUS
         CLI   0(WORK),MINUS       IS NEGATIVE INDICATED
         BNE   PACKED1             NO
         MVI   SIGN,X'D0'          YES - SET MINUS
         LA    WORK,1(0,WORK)      GET REAL FIELD START ADDRESS
PACKED1  DS    0H
         LR    POINTER,WORK        SAVE FIELD START ADDRESS
         LA    CTR,32              SET MAX. LENGTH
         BAL   LINK,SCANNAM1       SCAN FOR 1ST BLANK
         BCTR  WORK,0              BACKUP TO LAST POSITION
         CLI   0(WORK),MINUS       IS NEGATIVE INDICATED
         BNE   PACKED2             NO
         MVI   SIGN,X'D0'          YES - SET MINUS
         BCTR  WORK,0              ADJUST POINTER
PACKED2  DS    0H
         SR    WORK,POINTER        GET LENGTH
         LA    COUNT,1(0,WORK)      FOR SCAN OF NUMERICS.
         LR    WORK,POINTER        RESTORE START ADDRESS OF FIELD
         LR    CTR,COUNT           SAVE LENGTH
         BAL   LINK,CHEKDIG        GO CHECK FOR VALID NUMERICS
         LA    WORK,PACKHOLD+L'PACKHOLD COMPUTE START FOR MOVE
         SR    WORK,CTR
         MVI   PACKHOLD,C'0'       INITIALIZE
         MVC   PACKHOLD+1(L'PACKHOLD-1),PACKHOLD
         BCTR  CTR,0
         EX    CTR,MVCPAKED        GET DATA FIELD
         NI    HOLDSIGN,X'0F'      CLEAR AND
         OC    HOLDSIGN(1),SIGN     SET CORRECT SIGN
         PACK  FLDDATA(16),PACKHOLD(16)
         SR    CTR,CTR
         IC    CTR,FLDSIZ          GET FIELD LENGTH
         LA    LINK,16             COMPUTE START ADDRESS
         SR    LINK,CTR
         BZ    ALL16PAK            FIELD IS OK AS IS
         LA    WORK,FLDDATA(LINK)
         BCTR  LINK,0
         EX    LINK,MOVFINPK       FINAL POSITION OF DATA
ALL16PAK DS    0H
         BCTR  CTR,0
         STC   CTR,FLDSIZ          SET ONE LENGTH
         SLL   CTR,4               SLIDE TO OTHER LENGTH SLOT
         EX    CTR,ORPAKLEN        OR IN  OTHER LENGTH
         LR    LINK,BACK           RESTORE
         BR    LINK                RETURN
         EJECT
CLOSEXIT DS    0H
         CLOSE (CARDDCB,,PRINTDCB,,FROMDCB,,TODCB)
EXIT     DS    0H
         L     R13,SAVE+4          GET SAVE AREA POINTER
         L     R15,RETCODE         SET HIGHEST ERROR CODE
         RETURN (14,12),T,RC=(15)
CLEAR    MVI   LINE,C' '           BLANK
         MVC   LINE+1(L'LINE-1),LINE     LINE
         BR    RETURN              RETURN CONTROL
         EJECT
BADOPEN  BAL   RETURN,CLEAR        CLEAR PRINT LINE
         MVC   MSGDDNAM(8),DCBDDNAM MOVE DDNAME IN ERROR TO PRINT LINE
         MVC   LINE+10(MSG1LN),MSG1 MOVE IN ERROR MESSAGE
         BAL   LINK,PUTLINE        GO PRINT LINE
         B     CLOSEXIT
BINERR   DS    0H
FIXED    DS    0H
DECIMAL  DS    0H
         B     SYN5
         EJECT
GETCARD  DS    0H
         STM   R14,R1,SAVE4REG     SAVE REGS
         GET   CARDDCB,CARD
         LM    R14,R1,SAVE4REG     RESTORE REGS
         BR    LINK                RETURN
EBCDIC   DS    0H
         MVC   FLDDATA(32),0(WORK) GET 32 BYTES OF INPUT
         BR    LINK                RETURN
ENDDEF   DS    0H
         CLI   SYSINNO,X'00'       CHECK FIRST READ
         BE    NOSYSIN             YES CLEAN UP AND CLOSE
         L     LINK,CHKSAVLK       RESTORE REG
         BR    LINK                RETURN
CHEKDIG1 LA    WORK,1(,WORK)       BUMP PTR
CHEKDIG  DS    0H
         CLI   0(WORK),C'0'        VALID
         BL    DIGERR              NO - ERROR
         CLI   0(WORK),C'9'        VALID
         BH    DIGERR              NO - ERROR
         BCT   COUNT,CHEKDIG1      LOOP CONTROL
         BR    LINK
PUTEJECT MVI   LINECTRL,MINUS      FORCE LINES SKIPPED
PUTLINE  DS    0H
         STM   R14,R1,SAVE4REG     SAVE REGS
         PUT   PRINTDCB,LINECTRL
         MVI   LINECTRL,PRSPACE1   RESET TO NORMAL PRINT
         LM    R14,R1,SAVE4REG     RESTORE REGS
         BR    LINK                RETURN
NOSYSIN  DS    0H
         BAL   RETURN,CLEAR
         MVC   LINE+4(41),NOIN     MOVE IN ERROR MSG
         MVI   RETCODE+3,ERRVAL    SET RETURN CODE
         BAL   LINK,PUTEJECT       PUT ERROR MSG
         B     CLOSEXIT            CLEAN UP AND RETURN
         EJECT
PRNTHDER DS    0H
         ST    LINK,CHKSAVLK       SAVE REG
         BAL   RETURN,CLEAR        GO BLANK LINE BUFFER
*     SPACE 4 LINES
         MVC   LINE+2(L'HDR1),HDR1 SET HEADER TEXT IN LINE
         BAL   LINK,PUTLINE        GO PRINT LINE
         L     LINK,CHKSAVLK       RESTORE REG
         BR    LINK                RETURN
         SPACE 2
ASSGNFLD DS    0H
         MVC   GSIZ(4),ADFLDLEN
         BAL   RETURN,ALLOCATE
         CLC   SELFLDS(4),NUMZERO
         BE    ASSGNFL2       1ST FIELD C.B.
         MVC   FLDCHAIN(4),GAREA CHAIN FROM CURRENT TO NEW
         L     ADDR,FLDCHAIN  GET NEW BASE
ASSGNFL1 DS    0H
         XC    FLDCHAIN(4),FLDCHAIN SET ITS CHAIN TO ZERO
         BR    LINK
ASSGNFL2 DS    0H
         MVC   SELFLDPT(4),GAREA
         L     ADDR,SELFLDPT  SET BASE
         B     ASSGNFL1       CONTINUE NORMALLY
         SPACE 2
ALLOCATE DS    0H
         STM   R14,R1,SAVE4REG     SAVE REGS
         CLC   GSIZ(4),GLEFT
         BNH   ALLOC1
         L     R14,GSIZ
         A     R14,ROUNDUP
         N     R14,CLEARLOW
         S     R14,BACKOFF
         ST    R14,GLEFT
         GETMAIN EC,LV=(R14),A=GPTR
ALLOC1   DS    0H
         L     R14,GLEFT
         S     R14,GSIZ
         ST    R14,GLEFT
         L     R14,GPTR
         ST    R14,GAREA
         A     R14,GSIZ
         ST    R14,GPTR
         LM    R14,R1,SAVE4REG
         BR    RETURN
SYN2     DS    0H
         BAL   BACK,DSPY           DISPLAY CARD
SYN1     DS    0H
         MVI   RETCODE+3,ERRVAL     SET ERROR CODE FOR RETURN
         BAL   RETURN,CLEAR        GO BLANK LINE
         MVC   LINE(L'CSMSG),CSMSG INSERT TEXT
         LA    LINK,CARD-1         COMPUTE ERROR
         SR    WORK,LINK            POSITION
         CVD   WORK,NUMCONVT
         UNPK  ERRCOL1(2),NUMCONVT+6(2)
         OI    ERRCOL1+1,C'0'
         MVC   LINE+90(L'ERRCOL),ERRCOL SET INTO PRINT LINE
PUTERR   DS    0H
         BAL   LINK,PUTLINE        GO PRINT
         BAL   RETURN,CLEAR        GO BLANK LINE
         BAL   LINK,PUTLINE        GO PRINT
         B     CLOSEXIT            CLOSE DCB'S
DIGERR   DS    0H
ENDERR   DS    0H
COPY     DS    0H
SYN3     DS    0H
         MVC   CSMSG(L'NUMERMSG),NUMERMSG
         B     SYN1                WRITE ERROR MSG AND QUIT
SYN5     DS    0H
         MVC   CSMSG(L'DTYPEMSG),DTYPEMSG
         B     SYN1                WRITE ERROR MSG AND QUIT
SYN6     DS    0H
         MVC   CSMSG(L'CTYPEMSG),CTYPEMSG
         B     SYN1                WRITE ERROR MSG AND QUIT
SYN7     DS    0H
         MVC   CSMSG(L'LTYPEMSG),LTYPEMSG
         B     SYN1                WRITE ERROR MSG AND QUIT
         EJECT
ENDSUT1  DS    0H
         BAL   RETURN,CLEAR        CLEAR AREA
         BAL   LINK,PUTEJECT       EJECT PAGE
         MVC   LINE+20(L'XSTATXT),XSTATXT SET TITLE
         BAL   LINK,PUTLINE        GO PRINT LINE
         BAL   RETURN,CLEAR        GO BLANK AREA
         BAL   LINK,PUTLINE        GO PRINT LINE
         L     SELBASE,CHAIN       GET POINTER TO 1ST CTRL BLOCK
         B     PRTSTAT1            SKIP CHAIN LOAD 1ST TIME
PRTSTAT  DS    0H
         L     SELBASE,SELCHAIN    GET NEXT CONTROL BLOCK PTR
         LTR   SELBASE,SELBASE     END OF CHAIN
         BZ    PRTSTAT2            YES - DONE
PRTSTAT1 DS    0H
         L     DCBBASE,SELDCB      GET ADDRESS OF DCB
         TM    SELFLAGS,COMDCB     UNIQUE DCB FOR THIS OUTPUT
         BO    PRTSTATS            NO - SKIP CLOSE OF DCB
         LA    DCBBASE,SELDCB      GET ADDRESS OF DCB
         CLOSE ((DCBBASE))
PRTSTATS DS    0H
         TM    SELFLAGS,STATS      SHOULD STATISTICS BE PRINTED
         BZ    PRTSTAT             NO, CONTINUE TO NEXT EXTRACTION
         MVC   STATTXT0(8),SELDDNAM GET DDNAME FOR PRINT
         L     WORK,SELINNUM       GET EFFECTIVE INPUT COUNT
         CVD   WORK,CONVT          CONVERT TO DECIMAL
         UNPK  STATTXT1(8),CONVT(8) PREP FOR PRINT
         OI    STATTXT1+7,C'0'
         L     WORK,SELOUTNM       GET EFFECTIVE OUTPUT COUNT
         CVD   WORK,CONVT          CONVERT TO DECIMAL
         UNPK  STATTXT2(8),CONVT(8) PREP FOR PRINT
         OI    STATTXT2+7,C'0'
         MVC   LINE(STXTLEN),STATTEXT MOVE DATA TO PRINT LINE
         BAL   LINK,PUTLINE        GO PRINT LINE
         B     PRTSTAT             CONTINUE FOR ALL EXTRACTIONS
PRTSTAT2 DS    0H
         B     CLOSEXIT            GO TO CLOSE INPUT AND EXIT
TESTDCB  DS    0H
         STM   R0,R15,SRCHSAV      SAVE REGISTERS
         LR    WORK,DCBBASE        SAVE THIS DCB PTR
         L     SELBASE,CHAIN       GET PTR TO 1ST C.B.
         B     SKPNXTLD            SKIP AROUND NORMAL CHAIN LOAD
TESTDCB1 DS    0H
         L     SELBASE,SELCHAIN    GET NEXT C.B. POINTER
SKPNXTLD DS    0H
         LTR   SELBASE,SELBASE     END OF CHAIN
         BZ    TESTDCB2            YES
         LA    DCBBASE,SELDCB      GET ADDRESS OF DCB
         CLC   DCBDDNAM-IHADCB(8,WORK),SELDDNAM  SAME DD NAME
         BNE   TESTDCB1            NO
         CR    WORK,DCBBASE        DO BOTH PT. TO SAME C.B.
         BE    TESTDCB1            YES - TREAT AS UNEQUAL COMPARE
         ST    SELBASE,0(,WORK)    SAVE PTR TO C.B.
         LM    R0,R15,SRCHSAV      RESTORE REGISTERS
         OI    SELFLAGS,COMDCB     SET COMMON DCB TO BE USED
         BR    LINK                RETURN
TESTDCB2 DS    0H
         LM    R0,R15,SRCHSAV      RESTORE REGISTERS
         B     4(,LINK)            RETURN
         B     CLOSEXIT
         EJECT
OPNEXIT  DS    0H
         USING *,R15
         TM    OPNFLAG,FIRSTIME    FIRST TIME IN
         BZ    OPNEXIT1            YES
         OI    OPNFLAG,REREAD      SET REREAD SWITCH
         BR    R14                 RETURN
OPNEXIT1 OI    OPNFLAG,FIRSTIME    SET FIRST TIME BIT
         OI    FROMDCB+DCBOFLGS-IHADCB,DCBOFPPC SET 'CONCAT' BIT
         BR    R14                 RETURN
         DROP  R15
         EJECT
*        EXIT ROUTINE FOR OUTPUT DATA SETS
         USING *,R15
         DROP  DCBBASE
         USING IHADCB,R1
TOEXIT   DS    0H
         STM   R14,R12,12(R13)     SAVE REGS
         LH    R0,DCBBLKSI         GET BLKSIZE
         LTR   R0,R0               Q. WAS IT SPECIFIED
         BNZ   DCBEXIT1            A. YES....GET OUT
         MVC   DCBBLKSI,FROMBLKI   MOVE INPUT BLKSIZE
         MVC   DCBLRECL,FROMLREC   MOVE INPUT LRECL
         MVC   DCBRECFM,FROMRECF   MOVE INPUT RECFM
DCBEXIT1 EQU   *
         LM    R14,R12,12(R13)     RESTORE REGS
         BR    R14                 RETURN
         DROP  R15
         DROP  R1
         SPACE 3
*        EXLST FOR DATA SETS
         EJECT
SAVE     DS    18F                 MODULE SAVE AREA
SAVE4REG DS    4F                  TEMP. SAVE AREA FOR REGS USED BY OS
SRCHSAV  DS    18F                 REG SAVE AREA
GSIZ     DC    A(SELSIZE)          SIZE OF STORAGE NEEDED
GPTR     DC    A(0)                RETURNED ADDRESS OF STG. GOTTEN
GLEFT    DS    F              AMOUNT OF FREE STORAGE STILL LEFT
GAREA    DS    F              POINTER TO STG GRANTED TO CALLER
INSIZ    DC    A(0)                SIZE OF INPUT LRECL
INSIZPTR DC    A(0)                POINTER TO STORAGE OBTAINED
CHAIN    DS    F                   POINTER TO 1ST SEL CTRL BLOCK
LASTCB   DS    F                   POINTER TO LAST SEL CTRL. BLOCK
SAVSEL   DS    F                   C.B. REG SAVE AREA
MINSIZE  DC    F'2000'             MINIMUM INPUT AREA SIZE
TOLIST   DS    0F
         DC    AL1(X'80'+X'05')    LAST ENTRY AND DCB EXIT INDICATORS
         DC    AL3(TOEXIT)        ADDRESS OF DCB EXIT ROUTINE
FROMBLKI DC    H'0'                INPUT BLKSIZE
FROMLREC DC    H'0'                INPUT LRECL
FROMRECF DC    X'00'               INPUT RECFM
OPNLIST  DS    0F
         DC    AL1(X'80'+X'05')    LAST ENTRY AND DCB EXIT INDICATORS
         DC    AL3(OPNEXIT)        ADDRESS OF DCB EXIT ROUTINE
OPNFLAG  DS    C
SPARE    DC    81C' '
TWOBLANS DC    C'  '
NOTOPN   DC    C'OUTPUT FILE CANNOT BE OPENED'
         DS    0D                  SET DBLWD BOUNDARY
CARD     DS    CL80                READ CARD AREA
         DS    0D                  SET DBLWD BOUNDARY
         SPACE
LINECTRL DS    C                   ASA PRINT CONTROL POSITION
LINE     DS    CL132               PRINT AREA
MSG1     DC    C'** ERROR **   DATA SET  REFERRED TO BY '
MSGDDNAM DC    8C' '
         DC    C' CANNOT BE OPENED'
MSG1LN   EQU   *-MSG1              LENGTH OF MSG1
DDDFAULT DC    CL8'SYSUT2'         DEFAULT OUTDD SPECIFICATION
EXTRACT  DC    C'EXTRACT '
FIELD    DC    C'FIELD '
PACKHOLD DS    CL16                PACKED DATA HOLD AREA
HOLDSIGN EQU   *-1
SIGN     DS    C                   DECIMAL SIGN HOLD AREA
FLAGS    DS    C                   SWITCH FIELD
         EJECT
KEYS     DS    0C
         DC    AL1(6)
         DC    C'OUTDD='
         DC    AL1(9)              LENGTH OF KEYWORD
         DC    C'STATS=YES'
         DC    AL1(8)              LENGTH OF KEYWORD
         DC    C'STATS=NO'
         DC    AL1(8)              LENGTH OF KEYWORD
         DC    C'STARTAT='         KEYWORD
         DC    AL1(8)              LENGTH OF KEYWORD
         DC    C'STOPAFT='         KEYWORD
         DC    AL1(5)              LENGTH OF KEYWORD
         DC    C'SKIP='
         DC    AL1(8)
         DC    C'TYPE=ALL'         KEYWORD
         DC    AL1(0)              END OF TABLE
ADCONS   DS    0F
         DC    A(MOVEDD)           'OUTDD=' SUBROUTINE
         DC    A(STATSYES)         SUBROUTINE ADDRESS
         DC    A(STATSNO)          SUBROUTINE ADDRESS
         DC    A(STARTAT)          ADDRESS OF SUBROUTINE
         DC    A(STOPAFT)          ADDRESS OF SUBROUTINE
         DC    A(SKIPRTN)          SUBROUTINE ADDRESS
         DC    A(COPYALL)          ADDRESS OF SUBROUTINE
NUMWORK  DS    CL16                WORK AREA FOR NUMERICS CONVERSION
NUMCONVT DS    D                   WORK AREA FOR NUMERICS CONVERSION
SYSUT1CT DS    F                   TOTAL INPUT RECORD COUNT
RETCODE  DS    F                   AREA TO DEVELOP FINAL RETURN CODE
MAXVALU  DC    X'7FFFFFFF'
ERRCOL   DC    C'COL='             TEXT FOR ERROR COLUMN ID.
ERRCOL1  EQU   ERRCOL+4
         SPACE
*        THE FOLLOWING CONSTANTS USED IN THE 'DATA TYPE' EDIT
CHAR     DC    C'CH'
ZONEDEC  DC    C'ZD'
PACKDEC  DC    C'PD'
FIXPT    DC    C'FI'
BIN      DC    C'BI'
FLOATPT  DC    C'FL'
BLANKS   DC    4C' '
OPTFLGS  DC    X'00'               FLAG FIELD FOR OPTIONS
ADIORTN  DS    F                   PTR TO INPUT FILE I/O SUBRTN
COMPVALS DC    C'LT'               LESS THAN
         DC    X'40'               LT
         DC    C'LE'               LESS THAN OR EQUAL TO
         DC    X'C0'               LE
         DC    C'EQ'               EQUAL TO
         DC    X'80'               EQ
         DC    C'GT'               GREATER THAN
         DC    X'20'               GT
         DC    C'GE'               GREATER THAN OR EQUAL TO
         DC    X'A0'               GE
         DC    C'NE'               NOT EQUAL TO
         DC    X'70'               NE
CSMSG    DC    C'***GPUXTRAK***    CONTROL STATEMENT ERROR'
NUMERMSG DC    CL41'***SYNTAX ERROR***INVALID NUMERICS'
DTYPEMSG DC    CL41'***SYNTAX ERROR***INVALID DATA TYPE'
CTYPEMSG DC    CL41'***SYNTAX ERROR***INVALID COMPARE TYPE'
LTYPEMSG DC    CL41'***SYNTAX ERROR***LENGTH TOO LARGE'
HDR1     DC    C'      GPUXTRAK  -  DATA SET EXTRACTOR UTILITY'
NOIN     DC    C'***GPUXTRAK***   NO RECORDS ON SYSIN     '
MAXFLDS  DC    H'20'
STATTEXT DC    C'    DDNAME='
STATTXT0 DC    C'            **** RECORDS IN='
STATTXT1 DC    C'         **** RECORDS OUT='
STATTXT2 DC    8C' '
STXTEND  EQU   *
STXTLEN  EQU   STXTEND-STATTEXT
CONVT    DS    D
ANY      DC    C'ANY'              LITERAL FOR SYNTAX CHECK
XSTATXT  DC    C'**********   EXTRACTION  STATISTICS   **********'
CHKSAVLK DS    F                   ONE REG SAVE AREA
ADSELSIZ DC    A(SELSIZE)
ADFLDLEN DC    A(FLDLENG)
NUMZERO  DC    F'0'
ROUNDUP  DC    F'2047'
CLEARLOW DC    X'FFFFF800'
BACKOFF  DC    F'48'
SYSINNO  DC    X'00'
         EJECT
CARDDCB  DCB   MACRF=(GM),DDNAME=SYSIN,DSORG=PS,                       C
               EODAD=ENDDEF
PRINTDCB DCB   MACRF=(PM),BLKSIZE=133,LRECL=133,RECFM=FA,DSORG=PS,     P
               DDNAME=SYSPRINT
FROMDCB  DCB   MACRF=(GM),DSORG=PS,EODAD=ENDSUT1,DDNAME=SYSUT1,        X
               EXLST=OPNLIST
TODCB    DCB   MACRF=(PM),DDNAME=SYSUT2,DSORG=PS,EXLST=TOLIST
TODCBEND EQU   *
         DCBD  DSORG=PS
         END
