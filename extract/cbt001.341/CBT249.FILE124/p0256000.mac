VLST     TITLE 'P0256000 -- DIRECT-ACCESS VOLUME DIRECTORY LISTER'
* STATUS:  VERSION 4.0, 8 MARCH 1982.
* AUTHOR:  R. F. MORSE, MIT INSTRUMENTATION LABORATORY
         SPACE
* FUNCTION/OPERATION:  READS AND EDITS THE VOLUME TABLE OF CONTENTS
*        (VTOC) FROM ONE OR MORE DIRECT ACCESS VOLUMES AND PRINTS
*        INFORMATION ABOUT THE DATA SETS ON IT AND A TRACK USAGE MAP.
*        OPTIONALLY, IT LISTS THE DIRECTORY OF EACH PARTITIONED DATA
*        SET ON THE VOLUME.
         SPACE
* ENTRY POINTS:  ENTER AT 'GENESIS' WITH A BALR 14,15 AND REGISTER 13
*        SET TO A STANDARD SAVE AREA.  REGISTER 1 POINTS TO A FULL WORD
*        WHICH POINTS TO A PARAMETER FIELD.
         SPACE
* INPUT:  THE PARAMETER FIELD REFERENCED BY R1 BEGINS WITH A HALF-WORD
*        CONTAINING THE BINARY LENGTH OF THE BYTE STRING WHICH FOLLOWS
*        IT.  THE STRING CONSISTS OF A SERIES OF PARAMETER WORDS
*        SEPARATED BY COMMAS.  LEGAL WORDS ARE:
*          DUMP    CAUSES THE DSCB'S TO BE LISTED IN HEX FOLLOWING
*                  THEIR FORMATTED LISTINGS.
*          PDS     CAUSES THE DIRECTORY OF EACH PDS TO BE LISTED.
*          MAP     CAUSES THE TRACK USAGE MAP TO BE PRINTED.
*          REFDT   CAUSES THE LAST REFERENCE DATA TO BE PRINTED
*          PW      CAUSES THE TYPE OF PASSWORD PROTECTION DISPLAYED
*          TRK=NNNN ONLY DATASETS >= NNNN TRKS WILL BE DISPLAYED.
         SPACE
* OUTPUT:  A PRINTED LISTING DESCRIBING THE DATA SETS AND TRACK USAGE
*        FOR EACH VOLUME.
         SPACE
* DATA SETS:  PRINTED OUTPUT IS DELIVERED TO A DATA SET DESCRIBED ON A
*        DD CARD WITH DDNAME 'SYSPRINT'.  EACH VOLUME TO BE LISTED MUST
*        HAVE A DD CARD WITH THE DDNAME "VOL.....", WHERE ONLY THE
*        FIRST THREE CHARACTERS ARE TESTED.  THE DD CARDS ARE
*        REQUIRED TO SPECIFY ONLY THE VOLUME SERIAL, UNIT, AND
*        A DISPOSITION OF 'OLD'.
         SPACE
* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT DATES.
*        CALLS 'XVTCREAD' TO READ VTOC FROM DIRECT-ACCESS DEVICES.
*        CALLS 'XPRNTSUB' TO DO PRINTING AND PAGINATION.
         SPACE
* EXITS-NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0.
         SPACE
* EXITS-ERROR:  RETURNS VIA REG 14 WITH RETURN CODES AS FOLLOWS:
*        4 - MISSING DD CARD;
*        8 - BAD FORMAT IN A DSCB;
*        12 - PERMANENT I/O ERROR IN A VTOC OR PDS DIRECTORY;
*        20 - UNABLE TO OPEN 'SYSPRINT' DATA SET.
         SPACE
* TABLES/WORK AREAS:  USES SYSTEM MACROS 'IEFJFCBN' AND 'IECSDSL1' TO
*        DEFINE A JOB FILE CONTROL BLOCK AND VARIOUS DATA SET CONTROL
*        BLOCK FORMATS.  USES MACRO 'IEFTIOT1' TO DEFINE TASK IO TABLE.
         SPACE
* ATTRIBUTES:  SERIALLY REUSABLE.
         SPACE
* MACHINE REQUIREMENTS:  USES A PRINTER WITH 132-CHARACTER PRINT LINE
*        AND A 60-CHARACTER PRINT TRAIN (PN OR QN ARRANGEMENT).  USES
*        ONLY THE STANDARD INSTRUCTION SET, EXCEPT FOR A FEW 'EDIT'
*        INSTRUCTIONS.  CORE REQUIREMENT VARIES WITH THE SIZE OF THE
*        VTOC BEING LISTED.  A 160-BLOCK VTOC REQUIRES ABOUT 30K.
         SPACE
* NOTES:  THE INPUT PARAMETER LIST STRUCTURE IS THAT USED TO PASS
*        INFORMATION FROM THE 'PARM' FIELD OF AN 'EXEC' CARD.
         SPACE
*        HAS BEEN TESTED WITH 2301, 2311, 2314, AND 2321.  NO TROUBLE
*        ANTICIPATED WITH 2303.  DON'T KNOW ABOUT 2302.
         SPACE
*        CURRENTLY IGNORES FORMAT 2 DSCB'S FOR ISAM AND
*        FORMAT 6 DSCB'S FOR SPLIT-CYLINDER ALLOCATION.
         EJECT
*
*    NOTE:
*        ALL MACROS ARE INCLOSED WITH THE EXCEPTION OF:
*          IECSDSL1
*          IEFJFCBN
*          IEFTIOT1
*
*
         EJECT
P0256000 CSECT
         SPACE 2
* REGISTER ASSIGNMENTS:
         SPACE
         PRINT NOGEN
         REGEQU
RPARM    EQU   R1
RWK1     EQU   R2
RWK2     EQU   R3
RWK3     EQU   R4
RWK4     EQU   R5
RBASE3   EQU   R6
RPDS     EQU   R8
         GPUSTART
RDS2     EQU   R8                      BASE FOR FMT 2 TYPE RECORD
         GPUSTOP
RDS1     EQU   R9
RDS4     EQU   R9
RMB      EQU   R9
RDS3     EQU   R10
RDS5     EQU   R10
RDCB     EQU   R10
RBASE1   EQU   R11
RBASE2   EQU   R12
RSAVE    EQU   R13
RRET     EQU   R14
RGO      EQU   R15
         SPACE 3
* PARAMETERS AND ASSIGNS:
         SPACE
GETSIZE  EQU   4096            BLOCK SIZE FOR GETMAIN REQUESTS
PGLENGTH EQU   60              LINES PER PAGE
TOPMARGN EQU   0               LINES TO SKIP BEFORE PAGE HEADING
ALIASMSK EQU   X'80'           PDS DIRECTORY ENTRY IS AN ALIAS
         SPACE
DADEVICE EQU   X'20'           CLASS FOR DIRECT ACCESS DEVICES
DEV2311  EQU   X'01'           UNIT TYPE FOR 2311 DISK PACK
DEV2301  EQU   X'02'           UNIT TYPE FOR 2301 DRUM
DEV2303  EQU   X'03'           UNIT TYPE FOR 2303 DRUM
DEV2302  EQU   X'04'           UNIT TYPE FOR 2302 DISK FILE
DEV2321  EQU   X'05'           UNIT TYPE FOR 2321 DATA CELL
DEV2305  EQU   X'07'           UNIT TYPE FOR 2305 DRUM
DEV2314  EQU   X'08'           UNIT TYPE FOR 2314 DISK PACK
DEV3330  EQU   X'09'           UNIT TYPE FOR 3330 DISK PACK
DEV3340  EQU   X'0A'           UNIT TYPE FOR 3340 DATA MODL
DEV3350  EQU   X'0B'           UNIT TYPE FOR 3350 DATA MODL
DEV3331  EQU   X'0D'           UNIT TYPE FOR 3330 MOD 11
         SPACE
DUMPMASK EQU   X'01'           OPTION TO DUMP DSCB'S IN HEX
PDSLMASK EQU   X'02'           OPTION TO LIST PDS DIRECTORIES
REFMASK  EQU   X'04'           OPTION TO LIST LAST REF DATA
MAPMASK  EQU   X'08'           OPTION TO LIST TRACK USAGE
PWMASK   EQU   X'10'           OPTION TO LIST PASSWORD PROTECTION
         GPUSTART
MTRKMASK EQU   X'20'           OPTION TO LIST ONLY MINTRKA OR > D.S.
MAPFORER EQU   X'40'           MAP OPTION WAS SET BECAUSE OF ERROR
         GPUSTOP
         SPACE
ISDSORG  EQU   X'80'           INDEXED SEQUENTIAL ORGANIZATION
PSDSORG  EQU   X'40'           PHYSICAL SEQUENTIAL ORGANIZATION
DADSORG  EQU   X'20'           DIRECT-ACCESS ORGANIZATION
PODSORG  EQU   X'02'           PARTITIONED ORGANIZATION
         SPACE
PRSP0    EQU   X'00'           PSEUDO CONTROL CHARACTERS FOR PRINTER
PRSP1    EQU   X'01'
PRSP2    EQU   X'02'
PRSP3    EQU   X'03'
         SPACE
OPENBIT  EQU   X'10'           DCB IS OPEN (IN 'DCBOFLGS')
         EJECT
*************************
* ENTRANCE AND PROLOGUE *
*************************
         SPACE
* ENTER HERE TO PERFORM STANDARD SAVE OPERATIONS AND ESTABLISH TWO BASE
* REGISTERS WITH A CONTINUOUS RANGE OF 8K BYTES.
         SPACE
GENESIS  SAVE  (14,12),,P0256000-03008219
         SPACE
         LR    RBASE1,R15              SET UP BASE REGISTER
         USING GENESIS,RBASE1,RBASE2,RBASE3
         LA    RBASE2,4095(RBASE1)     LOAD SECOND BASE 4096 BYTES
         LA    RBASE2,1(RBASE2)          HIGHER
         LA    RBASE3,4095(RBASE2)     LOAD SECOND BASE 4096 BYTES
         LA    RBASE3,1(RBASE3)          HIGHER
         SPACE
         LR    RWK1,RSAVE
         LA    RSAVE,SAVEAREA          LOCAL SAVE AREA, 18 WORDS
         ST    RWK1,SAVEAREA+4         FORWARD CHAIN
         ST    RSAVE,8(RWK1)           BACKWARD CHAIN
         SPACE
         SR    R1,R1                   GENERATE ZERO PROGRAM MASK
         SPM   R1                      MASK OVERFLOW INTERRUPTS
         SPACE 3
* CALL PRINTING SUBROUTINE TO OPEN THE SYSPRINT DATA SET.  SET INITIAL
* PAGE DIMENSIONS AND HEADING, AND SKIP TO HEAD OF FORM.
         SPACE
         XPROPEN  PWA,PAGELEN=PGLENGTH,DDNAME=SYSPRINT
         LTR   R15,R15                 TEST FOR SUCCESSFUL OPEN
         BNZ   PROPBAD                 ERROR IF UNABLE TO PRINT
         SPACE
         XPRHEAD  PWA,LIST=INITHEAD
         SPACE
         XPRNTLIN  PWA,TEXT=REVMSG,LENGTH=L'REVMSG,SPB=SKIP,           X
               SPA=3,OFFSET=9
         SPACE 3
* INITIALIZE OTHER MISCELLANEOUS THINGS.
         SPACE
         SR    R0,R0                   GENERATE USEFUL ZERO
         ST    R0,RETCODE              ZERO RETURN CODE REGISTER
         STC   R0,MODESW               LISTING OPTION SWITCH
         SPACE
* LOCATE THE TIOT AND SAVE THE JOB NAME.
         SPACE
         EXTRACT  TIOTLOC,FIELDS=TIOT  OBTAIN TIOT ADDRESS FROM TCB
         SPACE
         L     R1,TIOTLOC
         CALL  XWRT1OPN,((1)),VL       OPEN WRITE FILES
         SPACE
         L     R1,TIOTLOC
         USING TIOT1,R1
         MVC   JOBNAME(8),TIOCNJOB     SAVE JOB ANME
         LA    R1,TIOENTRY             LOAD ADDR OF FIRST TABLE ENTRY
         DROP  R1
         ST    R1,TIOTLOC              SAVE TIOT ENTRY ADDRESS
         EJECT
******************************
* INPUT PARAMETER PROCESSING *
******************************
         SPACE
* RETRIEVE AND PRINT THE PARAMETER FIELD.  SCAN IT FOR WORDS AND SET
* LISTING MODE SWITCHES AND VOLUME COUNT ACCORDINGLY.
         SPACE 2
PARMGET  L     R1,SAVEAREA+4           SAVE AREA WHERE R1 STORED
         L     R1,24(R1)               R1 WHICH WAS PASSED TO US
         L     RWK1,0(R1)              ADDRESS OF PARM FIELD
         LH    RWK2,0(RWK1)            LENGTH OF PARM FIELD
         LA    RWK1,2(RWK1)            SET RWK1 TO FIRST BYTE
         SPACE
* PRINT FIELD, OR COMPLAIN IF IT IS TOO LONG.
         SPACE
         MVC   PL+10(21),=C'EXEC PARAMETER FIELD:'
         CH    RWK2,=H'99'             TEST FIELD LENGTH
         BL    PLNGOK
         MVC   PL+30(29),=C'  IS TOO LONG AND WAS IGNORED'
         SR    RWK2,RWK2               SET LENGTH TO 0
         B     PARMPR
         SPACE
PLNGOK   LTR   R1,RWK2                 FIX UP LENGTH FOR MOVE
         BZ    PARMPR                  SKIP MOVE IF LENGTH ZERO
         BCTR  R1,0                    SUBTRACT 1 FOR MVC
         STC   R1,PARMOVE+1
PARMOVE  MVC   PL+33(0),0(RWK1)        MOVE PARM FIELD TO PRINT LINE
PARMPR   MVI   PL,PRSP3                PRINT AND SPACE 3
         BAL   RRET,PRINTSUB
         SPACE
* LOOP TO GET PARAMETER WORDS AND SET SWITCHES.
         SPACE
*        OI    MODESW,MAPMASK          DEFAULT TO MAP**GPU NOMAP**
         NI    MODESW,X'F7'            DEFAULT TO MAP**GPU NOMAP**
PARMLOOP BAL   RRET,SCAN               GET A WORD
         CLI   SCANWORD,C' '           BLANK WORD MEANS END OF STRING
         BE    PARMDONE
         SPACE
PVOLS    CLC   SCANWORD(4),=C'VOLS'    FOR COMPATIBILITY WITH OLDER
         BE    PARMLOOP                   VERSIONS
         SPACE
PDUMP    CLC   SCANWORD(5),=C'DUMP '
         BNE   PPDS
         OI    MODESW,DUMPMASK
         B     PARMLOOP
         SPACE
PPDS     CLC   SCANWORD(4),=C'PDS '
         BNE   PREF
         OI    MODESW,PDSLMASK
         B     PARMLOOP
         SPACE
PREF     CLC   SCANWORD(6),=C'REFDT '
         BNE   PW
         OI    MODESW,REFMASK
         B     PARMLOOP
         SPACE
PW       CLC   SCANWORD(3),=C'PW '
         BNE   PMAP
         OI    MODESW,PWMASK
         B     PARMLOOP
         SPACE
PMAP     CLC   SCANWORD(3),=C'MAP '  DEFAULT ... MAP ** GPU NOMAP**
         BNE   PTRK
         OI    MODESW,MAPMASK          SET TO MAP    **GPU MAP**
         B     PARMLOOP
         GPUSTART
         SPACE
PTRK     CLC   SCANWORD(4),=C'TRK=' IS THIS 'TRK' KEYWORD
         BNE   BADPARM             NO, PARM IS BAD
         OI    MODESW,MTRKMASK     SET 'TRK' MODE
         MVC   MINTRKA+8(4),SCANWORD+4 SAVE MIN. TRK TO LIST
         B     PARMLOOP            LOOK FOR NEXT PARM
         GPUSTOP
         SPACE
* PRINT ERROR MESSAGE FOR UNRECOGNIZED PARAMETERS.
         SPACE
BADPARM  MVC   PL+10(50),=C'"        " IS AN ILLEGAL PARAMETER AND WAS X
               IGNORED'
         MVC   PL+11(8),SCANWORD
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         B     PARMLOOP
         SPACE
* ALL PARAMETERS HAVE BEEN PROCESSED.  LOAD TIOT POINTER TO PROCESS
* FIRST VOLUME.
         SPACE
PARMDONE DS    0H
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         B     VOLJOIN
         EJECT
**********************
* BEGIN A NEW VOLUME *
**********************
         SPACE
* SEARCH TIOT FOR "VOL....." DDNAME.
         SPACE
NEWVOL   DS    0H
         GPUSTART
         CLC   MINTRKA+8(4),=C'0000' WAS 'TRK' PARM SPECIFIED
         BE    CNTNVOL               NO, CONTINUE
         OI    MODESW,MTRKMASK       YES, SET MINTRK MASK
CNTNVOL  EQU   *
         GPUSTOP
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         USING TIOENTRY,RWK1
         SR    R1,R1
         IC    R1,TIOELNGH             GET LENGTH OF CURRENT ENTRY
         AR    RWK1,R1                 ADVANCE TO NEXT ENTRY
         ST    RWK1,TIOTLOC            SAVE UPDATED TIOT ADDRESS
VOLJOIN  CLI   TIOELNGH,X'00'          TEST IF ZERO-LENGTH ENTRY
         BE    EXODUS                  END OF VOLUMES IF SO
         CLC   TIOEDDNM(3),=C'VOL'     TEST IF "VOL....." DDNAME
         BNE   NEWVOL                  SKIP ENTRY IF NOT
         MVC   VTRDDDNM(8),TIOEDDNM    SAVE DDNAME
         DROP  RWK1
         SPACE
* RESET PAGE NUMBER AND SKIP TO A FRESH PAGE.
         SPACE
         XPRMOD  PWA,PAGENO=1          RESET PAGE NUMBER TO 1
         SPACE
         XPREJECT  PWA                 SKIP TO A FRESH PAGE
         SPACE
         XPRHEAD  PWA,LIST=F1HD3       SET PAGE HEADING LINE
         SPACE
* RESET VARIOUS POINTERS AND COUNTERS FOR A NEW VOLUME.
         SPACE
         LA    R1,LASTFMT1             RESET FORMAT 1 CHAIN POINTER
         ST    R1,FMT1ADDR
         SPACE
         LA    R1,MBBASE               RESET TRACK MAP CHAIN POINTER
         ST    R1,MBBASE
         SPACE
         SR    R0,R0                   GENERATE USEFUL ZERO
         STH   R0,FREECYLS             ZERO FREE CYLINDER COUNT
         STH   R0,FREETRKS               AND FREE TRACK COUNT
         STH   R0,F5EXTNTS               AND FREE EXTENTS COUNT
         STH   R0,DSCOUNT                AND DATA SET COUNT
         TM    MODESW,MAPFORER+MAPMASK Q/ MAP MASK ON FOR ERROR
         BNO   NOMAPER             NO, GO AROUND MAP BIT RESET
         NI    MODESW,255-MAPFORER-MAPMASK RESET MAP MASK BITS
         SPACE
* INSERT DDNAME IN DCB FOR PDS DIRECTORY READING.
         SPACE
NOMAPER  DS    0H
         USING IHADCB,RDCB
         LA    RDCB,PDSDCB             FIX DCB FOR PDS LISTING
         MVC   DCBDDNAM(8),VTRDDDNM
         DROP  RDCB
         SPACE
* GET DEVICE TYPE AND VERIFY THAT IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE VTRDDDNM,DEVCHAR       GET DEVICE CHARACTERISTICS
         SPACE
         LTR   RGO,RGO                 TEST R15 IF DDNAME FOUND
         BNZ   NODDCARD                ERROR,DDNAME NOT FOUND
         CLI   DEVCHAR+2,DADEVICE      TEST FOR DIRECT-ACCESS DEVICE
         BE    PNBTDUMP
         ABEND 0069,DUMP
         BNE   NOTDACC                 ERROR, NOT DIRECT ACCESS DEVICE
         SPACE
* LOOK UP DEVICE NUMBER IN TABLE AND SET UP TRACK ADDRESS CONVERSION
* PARAMETERS.
         SPACE
PNBTDUMP EQU   *
         MVC   DEVNAMOB(1),UNITTYPE    PUT UNIT TYPE AT END OF TABLE
         LA    RWK1,DEVNAMES           ADDRESS TABLE BEGINNING
DEVNAMLP CLC   DEVNAMOB(1),0(RWK1)     TEST FOR MATCH ON DEVICE TYPE
         BE    DEVNAMF                 BRANCH WHEN FOUND
         LA    RWK1,DEVNAMSZ(RWK1)     STEP THROUGH TABLE
         B     DEVNAMLP
         SPACE
DEVNAMF  CLC   1(7,RWK1),UNKNOWN       TEST IF DEVICE KNOWN TO US
         BE    UNKNDEV                 BRANCH IF NOT
         ST    RWK1,DEVNAMAD           SAVE ADDRESS OF TABLE ENTRY
         MVC   FC1(12),16(RWK1)        MOVE IN CONVERSION FACTORS
         SPACE
* READ JFCB AND EXTRACT VOLUME SERIAL NUMBER.
         SPACE
         RDJFCB  (PDSDCB)              READ JOB FILE CONTROL BLOCK
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   VOLUME(6),JFCBVOLS      SAVE VOLUME SERIAL NUMBER
         DROP  R1
         SPACE
         MVC   F1HSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   F1HSER2(6),VOLUME
         SPACE
* CALL VTOC READING ROUTINE TO OPEN VTOC.
         SPACE
         LA    R0,1                    CALL MODE 1 FOR OPEN
         LA    R1,VTRDADDR             ADDRESS OF DDNAME
         L     RGO,VTOCREAD            ADDRESS OF SUBROUTINE
         BALR  RRET,RGO                CALL XVTCREAD
         B     *+4(R15)                BRANCH ON RETURN CODE
         B     VOPENED                 0, SUCCESS
         B     CANTOPEN                4, UNABLE TO OPEN
         ABEND 0050,DUMP           VTOC READ PROBLEM
         ABEND 0051,DUMP           CVAF ERROR
         B     NOTDACC                 8, NOT DIRECT ACCESS
VOPENED  DS    0H
         SPACE
* MAKE UP A TRACK MAP ENTRY FOR THE VOLUME LABEL ON TRACK 0.
         SPACE
         MVC   FB+4(20),TRK0MAP        INSERT DUMMY ENTRY
         LA    RWK1,FB
         BAL   RRET,FILEMAP            GO INSERT IN MAP
         EJECT
* READ VTOC INTO CORE
         SPACE
* READ THE FIRST DSCB, WHICH SHOULD BE TYPE 4, DESCRIBING THE VOLUME
* AND VTOC CHARACTERISTICS.
         SPACE
         USING DS4,RDS4
READFMT4 LA    RWK3,DS4SIZE            SIZE OF CORE BLOCK
         BAL   RRET,GETBLOCK           GET CORE AREA
         ST    RWK2,FMT4ADDR           SAVE ADDRESS
         LR    RDS4,RWK2               SET BASE REG FOR FORMAT 4
         BAL   RRET,READSEQ            READ FIRST BLOCK
         BAL   RRET,DISASTER           END OF DATA RETURN
         CLI   DS4IDFMT,X'F4'          CHECK TYPE
         BNE   FRSTNOT4                ERROR, FIRST BLOCK NOT TYPE 4
         SPACE
* PUT VTOC EXTENT INTO THE TRACK MAP.
         SPACE
         MVC   FB+FBCCHH1(8),DS4VTOCE+2
         LA    RWK1,DS4VTOCE
         BAL   RRET,F13CNVT    GET EXTENT SIZE IN R0
         STH   R0,FB+FBNTRKS
         STH   R0,VTOCSIZE             SAVE N TRACKS IN VTOC
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL IN TRACK MAP ENTRY
         MVC   FB+FBEXT(1),DS4VTOCE+1  EXTENT NUMBER
         MVC   FB+FBNAME(4),=A(VTOCNAME)  INSERT ADDR OF NAME FOR VTOC
         LA    RWK1,FB
         BAL   RRET,FILEMAP            PUT ENTRY IN TRACK MAP
         DROP  RDS4
         SPACE 3
* IF VTOC IS INDEXED, USE FREE SPACE EXTENTS ALREADY SUPPLIED
* ELSE GO AND READ ALL THE FORMAT 5 DSCB'S
         CLI   VTRDVT,C'I'         Q/ VTOC INDEXED
         BNE   DS5ROUT             NO, GO READ FORMAT 5'S
         BAL   RRET,INDXANAL       ANALYZE FREE SPACE EXTENTS
         B     F1RDLOOP            GO READ FORMAT 1'S
         SPACE 3
* READ FORMAT 5 DSCB'S INTO CORE, CHAINING THEM TOGETHER.  THE FIRST
* ONE FOLLOWS THE FORMAT 4 BLOCK; THE OTHERS ARE EACH ADDRESSED FROM
* THE PRECEDING ONE.
         SPACE
DS5ROUT  DS    0H
         USING DS5,RDS5
         LA    RWK3,DS5SIZE            SIZE OF BLOCK REQUIRED
         BAL   RRET,GETBLOCK
         ST    RWK2,FMT5ADDR           SAVE ADDR OF FIRST FMT 5 BLOCK
         LR    RDS5,RWK2               SET FORMAT 5 BASE REG
         BAL   RRET,READSEQ            READ FIRST FMT 5 BLOCK
         BAL   RRET,DISASTER           END FILE NOT EXPECTED HERE
         B     DS5JOIN
         SPACE
DS5LOOP  DS    0H
         LA    RWK3,DS5SIZE
         BAL   RRET,GETBLOCK
         ST    RWK2,DS5CHAIN           CHAIN FROM CURRENT TO NEW
         LA    RWK1,DS5PTRDS           ADDR OF DISK ADDRESS
         LR    RDS5,RWK2               UPDATE BASE REG TO NEW BLOCK
         BAL   RRET,READDIR            READ NEW BLOCK
DS5JOIN  DS    0H
         CLI   DS5FMTID,X'F5'          MUST BE FORMAT 5, OR ELSE.....
         BNE   BADFMT5                 ERROR, NOT FORMAT 5 BLOCK
         SPACE
         BAL   RRET,F5SPANAL           GO ANALYZE FREE SPACE EXTENTS
         SPACE
         CLC   DS5PTRDS(5),=5X'00'     IS THERE ANOTHER BLOCK TO FOLLOW
         BNE   DS5LOOP                 BRANCH IF YES
         SR    R0,R0                   IF NOT, SET CHAIN OF LAST
         ST    R0,DS5CHAIN               BLOCK TO ZERO
         DROP  RDS5
         SPACE 3
* READ ALL THE FORMAT 1 DSCB'S AND CHAIN THEM IN COLLATING SEQUENCE BY
* DATA SET NAME.  IF THERE ARE FORMAT 3 DSCB'S, THEY ARE READ AND
* CHAINED TO THE FORMAT 1 BLOCK.
         SPACE
         USING DS1,RDS1
F1RDLOOP LA    RWK3,DS1SIZE            LOAD SIZE OF BLOCK REQUIRED
         GPUSTART
         TM    MODESW,MTRKMASK     WAS 'TRK' REQUESTED
         BNO   F1GETBLK              NO, CONTINUE
         LA    RWK3,DS2SIZE+DS3SIZE(,RWK3) ADD SP FOR F2 AND F3
F1GETBLK EQU   *
         GPUSTOP
         BAL   RRET,GETBLOCK
         LR    RDS1,RWK2               LOAD BASE REG
         GPUSTART
         TM    MODESW,MTRKMASK     WAS 'TRK' REQUESTED
         BNO   F1RDNEXT              NO, CONTINUE
         L     RWK2,GBBAL          LOAD REMAINING AVAIL STORG
         LA    RWK2,DS2SIZE+DS3SIZE(,RWK2) SUBTRACT F2 AND F3
         ST    RWK2,GBBAL          REST REMAINING AVAIL STORG
         ST    RWK2,SAVGBBAL       SAVE REMAINING AVAIL STORG
         LA    RWK2,DS2SIZE+DS3SIZE SET SIZE OF F2 AND F3
         L     RWK1,GBCLC          LOAD NEXT AVAIL STG PTR
         SR    RWK1,RWK2           MINUS F2 AND F3 SIZE
         ST    RWK1,GBCLC          RESTORE NXT AVAIL STG PTR
         ST    RWK1,SAVGBCLC       SAVE NXT AVAIL STG PTR
         LR    RWK2,RDS1           RESTORE F1 STORAGE AREA
         GPUSTOP
F1RDNEXT BAL   RRET,READSEQ            READ NEXT SEQUENTIAL BLOCK
         B     VTRDDONE                EXIT AT END OF FILE
         CLI   DS1FMTID,X'F1'          TEST FOR FORMAT 1
         BNE   F1RDNEXT                IGNORE IF NOT FORMAT 1
         SPACE
         LH    R1,DSCOUNT              COUNT DATA SETS
         LA    R1,1(R1)
         STH   R1,DSCOUNT
         GPUSTART
         SR    R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT 3
         ST    R0,DS1CHAIN               BLOCK
         SPACE
         CLC   DS1PTRDS,=5X'00'        TEST FOR FORMAT 3 ADDRESS
         BE    F1TSTMTK                BRANCH IF NO
         TM    DS1DSORG,ISDSORG        IS THIS ISAM
         BO    F2GET                   YES, GET FORMAT 2 RECORD
         GPUSTOP
         LA    RWK3,DS3SIZE            LENGTH OF BLOCK FOR FORMAT 3
         BAL   RRET,GETBLOCK
         LR    RDS3,RWK2               BASE REG FOR FMT 3
         USING DS3,RDS3
         LA    RWK1,DS1PTRDS           ADDRESS OF DISK ADDRESS
F3RD     BAL   RRET,READDIR            READ BLOCK
         CLI   DS3FMTID,X'F3'          TEST FOR FORMAT 3
         BE    F3GOT                   BRANCH IF FOUND
         CLC   DS3PTRDS,=5X'00'        IF NOT 3, TRY FOR ANOTHER
         BE    F1TSTMTK                BRANCH IF NO MORE
         LA    RWK1,DS3PTRDS           ADDRESS OF DISK ADDRESS
         B     F3RD                    TRY AGAIN
F3GOT    ST    RDS3,DS1CHAIN           CHAIN FROM FMT 1 BLOCK
         B     F1TSTMTK                GO GET NEXT FORMAT 1 BLOCK
         GPUSTART
F2GET    LA    RWK3,DS2SIZE            GET SIZE OF FORMAT 2 TYPE RECORD
         BAL   RRET,GETBLOCK           GET A SAVE AREA FOR FMT2 REC
         LR    RDS2,RWK2               USE RDS2 AS A BASE
         USING  DS2,RDS2               USING THIS DSECT
         LA    RWK1,DS1PTRDS           GET DISK ADDRESS OF FMT2 REC
F2RD     BAL   RRET,READDIR            READ A BLOCK
         CLI   DS2FMTID,X'F2'          IS THIS FMT 2
         BE    F2GOT                   IT HAD BETTER BE
         CLC   DS2PTRDS,=5X'00'        NO, WHAT DOES IT POINT TO
         BE    F1TSTMTK                ZEROS, THEN READ NEXT FMT1 REC
         LA    RWK1,DS2PTRDS           GET DISK ADDRESS OF WHO KNOWS
         B     F2RD                    ASSUME IT IS TYPE 2 AND READ
F2GOT    ST    RDS2,DS1CHAIN           SAVE IN FMT1 CHAIN
         SR    R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT
         ST    R0,DS2CHAIN             THREE BLOCK
         CLC   DS2PTRDS,=5X'00'        ANY FMT 3 RECORDS
         BE    F1TSTMTK                NO FMT3 SO READ NEXT FMT1
         LA    RWK3,DS3SIZE            GET SIZE OF FMT3 RECORD
         BAL   RRET,GETBLOCK           GET A SAVE AREA
         LR    RDS3,RWK2               USE AS A BASE
         LA    RWK1,DS2PTRDS           GET PTR TO FMT3
ISF3RD   BAL   RRET,READDIR            READ FMT 3 RECORD
         CLI   DS3FMTID,X'F3'          IS IT FMT3
         BE    ISF3GOT                 GOTCHA
         CLC   DS3PTRDS,=5X'00'        END OF CHAIN?
         BE    F1TSTMTK                YES, READ NEXT FMT1 RECORD
         LA    RWK1,DS3PTRDS           GET NEXT MBR ON CHAIN
         B     ISF3RD                  AND READ IT
ISF3GOT  ST    RDS3,DS2CHAIN           SAVE IN FMT 2 ENTRY
F1TSTMTK EQU   *
         TM    MODESW,MTRKMASK     WAS 'TRK' REQUESTED
         BNO   F1SORTBG              NO, CONTINUE
         L     RDS3,DS1CHAIN       COMPUTE DATASET
         BAL   RRET,F1SPANAL          SIZE IN TRACKS
         L     R0,F1TRCNT          CONVERT TRACKS
         BAL   RRET,BINALFR           TO ZD FORMAT
         CLC   BTAALFZ,MINTRKA     IS THIS DATASET >= TO MINTRKA
         BNL   F1SORTBG              YES, THEN KEEP IT ON CHAIN
         MVC   GBCLC,SAVGBCLC      NO, RESTORE NXT AVAIL STG
         MVC   GBBAL,SAVGBBAL      RESTORE REMAINING BAL
         LR    RWK2,RDS1           RESTORE FORMAT 1 AREA
         B     F1RDNEXT            GO READ NEXT FORMAT 1
F1SORTBG EQU   *
         L     RWK1,FMT1ADDR           LOAD BEGINNING OF CHAIN
         L     RWK2,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN HISTORY REG
F1SORT   CLC   DS1DSNAM(44),FM1DSNAM(RWK1)  SORT INTO SEQUENCE
         BL    F1THREAD                BRANCH WHEN PLACE IS FOUND
         LR    RWK2,RWK1               UPDATE HISTORY REG
         L     RWK1,FM1NXTF1(RWK1)     FOLLOW CHAIN TO NEXT
         B     F1SORT
         SPACE
F1THREAD ST    RWK1,DS1NXTF1           CHAIN TO FOLLOWING BLOCK
         ST    RDS1,FM1NXTF1(RWK2)     CHAIN FROM PRECEDING BLOCK
         B     F1RDLOOP            GO GET NEXT FORMAT 1
         SPACE
         DROP  RDS1,RDS2,RDS3          DROP ALL BASE REGISTERS
         SPACE
         GPUSTOP
         SPACE 3
* VTOC IS COMPLETELY READ.  CLOSE READING SUBROUTINE.
         SPACE
VTRDDONE LA    R0,2                    CALL MODE 2 FOR CLOSE
         LA    R1,VTRDADDR         LOAD ADDRESS OF PARMFIELD
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD
         BALR  RRET,RGO                BRANCH TO ROUTINE
         GPUSTART
         NI    MODESW,255-MTRKMASK TURN OFF 'TRK' OPTION
         GPUSTOP
         EJECT
* EDIT FIRST LINE FROM FORMAT 4 DSCB, DESCRIBING DEVICE PARAMETERS.
         SPACE
         USING DS4,RDS4
         L     RDS4,FMT4ADDR
         SPACE
         MVC   V1+1(19),=C'DEVICE DESCRIPTION:'
         SPACE
         MVC   V1TYPE(5),=C'TYPE='
         L     RWK1,DEVNAMAD           LOAD ADDRESS OF TABLE FOR DEVICE
         MVC   V1TYPE+5(15),1(RWK1)    INSERT DEVICE NAME IN PRINT LINE
         SPACE
         MVC   V1NOCYL(7),=C'NOCYLS='  NUMBER OF LOGICAL CYLINDERS
         LA    RWK1,DS4DEVSZ
         BAL   RRET,BINALF2
         MVC   V1NOCYL+7(5),BTAALFJ
         SPACE
         MVC   V1TRCYL(9),=C'TRKS/CYL='
         LA    RWK1,DS4DEVSZ+2         TRACKS PER CYLINDER
         BAL   RRET,BINALF2
         MVC   V1TRCYL+9(4),BTAALFJ
         SPACE
         MVC   V1DEVTK(8),=C'TRKSIZE=' LENGTH OF TRACK
         LA    RWK1,DS4DEVTK
         BAL   RRET,BINALF2
         MVC   V1DEVTK+8(5),BTAALFJ
         SPACE
         MVC   V1DEVDT(9),=C'DSCB/TRK='  DSCB'S PER TRACK
         LA    RWK1,DS4DEVDT
         BAL   RRET,BINALF1
         MVC   V1DEVDT+9(3),BTAALFJ
         SPACE
         MVC   V1DEVDB(8),=C'PDS/TRK=' PDS DIRECTORY BLOCKS PER TRACK
         LA    RWK1,DS4DEVDB
         BAL   RRET,BINALF1
         MVC   V1DEVDB+8(3),BTAALFJ
         SPACE
         MVI   V1,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* EDIT THE SECOND LINE FROM THE FORMAT 4 DSCB, DESCRIBING THE VTOC
* DATA SET.
         SPACE
         MVC   V2+1(17),=C'VTOC DESCRIPTION:'
         SPACE
         MVC   V2DSCBCT(10),=C'NUM DSCBS='  NUMBER OF DSCBS
         SR    R0,R0
         IC    R0,DS4DEVDT             INSERT DSCB'S PER TRACK
         MH    R0,VTOCSIZE             TIMES NUMBER OF VTOC TRACKS
         BAL   RRET,BINALFR
         MVC   V2DSCBCT+10(5),BTAALFJ
         SPACE
         MVC   V2DSCBAV(12),=C'AVAIL DSCBS='  NUM UNUSED DSCB'S
         CLI   VTRDVT,C'I'         Q/ VTOC INDEXED
         BNE   F4DSCBAV            NO, USE AVAILABLE COUNT FROM F4
         LA    RWK1,VTRDDC+2       LOAD ADDRESS OF AVAIL DSCB COUNT
         B     AFTF4AV
F4DSCBAV DS    0H
         LA    RWK1,DS4DSREC
AFTF4AV  DS    0H
         BAL   RRET,BINALF2
         MVC   V2DSCBAV+12(5),BTAALFJ
         SPACE
         MVC   V2VTEXT(12),=C'VTOC EXTENT='  VTOC TRACK ADDRESSES
         MVI   V2VTEXT+16,C'.'
         MVI   V2VTEXT+21,C'-'
         MVI   V2VTEXT+26,C'.'
         UNPK  HEXWORK(15),DS4VTOCE+2(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+12(4),HEXWORK
         MVC   V2VTEXT+17(4),HEXWORK+4
         UNPK  HEXWORK(15),DS4VTOCE+6(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+22(4),HEXWORK
         MVC   V2VTEXT+27(4),HEXWORK+4
         SPACE
         MVC   V2NUMALT(7),=C'NUMALT=' NUMBER OF ALTERNATE TRACKS
         LA    RWK1,DS4NOATK
         BAL   RRET,BINALF2
         MVC   V2NUMALT+7(5),BTAALFJ
         SPACE
         MVC   V2NXTALT(13),=C'NEXTALT=    .'  ADDRESS OF NEXT ALT TRK
         UNPK  HEXWORK(15),DS4HCCHH(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2NXTALT+8(4),HEXWORK
         MVC   V2NXTALT+13(4),HEXWORK+4
         SPACE
         MVI   V2,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* PRINT A LINE WITH AVAILABLE SPACE IN INDEX
         SPACE
         CLI   VTRDVT,C'I'         Q/ VTOC INDEXED
         BNE   PRTAVAIL            NO, GO AROUND
         MVC   V5+1(18),=C'INDEX DESCRIPTION:'
         SPACE
         L     R0,VTRDIC           NUMBER OF AVAILABLE VIR'S
         BAL   RRET,BINALFR
         MVC   V5VIRAV(11),=C'AVAIL VIRS='
         MVC   V5VIRAV+11(5),BTAALFJ
         SPACE
         MVI   V5,PRSP2            PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* PRINT A LINE SUMMARIZING THE AVAILABLE SPACE DESCRIBED IN FORMAT
* 5 DSCB'S.
         SPACE
PRTAVAIL DS    0H
         MVC   V3+1(16),=C'AVAILABLE SPACE:'
         SPACE
         LH    R0,FREETRKS             TOTAL NUMBER OF FREE TRACKS
         BAL   RRET,BINALFR
         MVC   V3FRTRKS(5),BTAALF+7
         MVC   V3FRTRKS+6(9),=C'TRACKS IN'
         SPACE
         LH    R0,F5EXTNTS             NUMBER OF FREE EXTENTS
         BAL   RRET,BINALFR
         MVC   V3FREXTS(4),BTAALF+8
         MVC   V3FREXTS+5(18),=C'EXTENTS, INCLUDING'
         SPACE
         LH    R0,FREECYLS             NUMBER OF FREE FULL CYLINDERS
         BAL   RRET,BINALFR
         MVC   V3FRCYLS(4),BTAALF+8
         MVC   V3FRCYLS+5(15),=C'FULL CYLINDERS.'
         SPACE
         MVI   V3,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         GPUSTART
* IF OWNED BY VSAM TELL USER
         SPACE
         TM    DS4VSAM,X'80'       TEST FOR VSAM ONERSHIP BIT
         BZ    NOVSAM              IF NOT ON ... NOT OWNED BY VSAM
         MVC   V4+2(39),=C'*** THIS PACK IS OWNED BY A VSAM CATLG '
         MVI   V4,PRSP2
         CLC   DS4VSCRA(2),=2X'00'
         BE    NOCRA               NO CRA PRESENT
         MVC   V4+41(22),=C'     CRA LOCATED AT : '
         ICM   R1,3,DS4VSCRA
         BAL   RRET,TTCNVT
         UNPK  HEXWORK(15),CCHH(8)
         TR    HEXWORK(7),HEXEDTAB
         MVC   V4+66(4),HEXWORK
         MVI   V4+70,C'.'
         MVC   V4+71(4),HEXWORK+4
NOCRA    DS    0H
         BAL   RRET,PRINTSUB
NOVSAM   DS    0H
         GPUSTOP
         SPACE 3
* IF DOS CONTAMINATION FLAG IS ON, WARN USER, AND FORCE TRACK MAP LIST.
         SPACE
         TM    DS4VTOCI,X'81'          TEST IF ONLY DOS BIT IS ON
         BNM   DS5OK                   BRANCH IF NOT
         TM    MODESW,MAPMASK      Q/ MAP LISTING ALREADY ON
         BO    AFTFORER            YES, GO AROUND
         OI    MODESW,MAPMASK+MAPFORER FORCE TRACK MAP LISTING
AFTFORER DS    0H
         XPRNTLIN  PWA,TEXT=DS5WARN,LENGTH=L'DS5WARN,SPA=2
DS5OK    DS    0H
         SPACE 3
* IF THE DUMP SWITCH IS ON, EDIT THE FORMAT 4 AND 5 BLOCKS IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F5DONE
         SPACE
         LR    RWK1,RDS4               ADDRESS OF FORMAT 4 BLOCK
         LA    RWK2,DS4FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB
         SPACE
         USING DS5,RDS5
         L     RDS5,FMT5ADDR           ADDRESS OF FIRST BLOCK
DUMP5LUP LTR   RDS5,RDS5               TEST FOR END OF CHAIN
         BZ    DUMP5DON
         LR    RWK1,RDS5               ADDRESS OF DSCB
         BZ    F5DONE
         LA    RWK2,DS5FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB           GO TO PRINT IN HEX
         L     RDS5,DS5CHAIN           FOLLOW CHAIN TO NEXT BLOCK
         B     DUMP5LUP
         SPACE
DUMP5DON XPRSPACE  PWA,LINES=2         SPACE UP TWO LINES
         SPACE
F5DONE   DS    0H
         DROP  RDS4,RDS5
         SPACE 3
         EJECT
*************************
* FORMAT 1 EDITING LOOP *
*************************
         SPACE
* NOW ALL FORMAT 1 DSCB'S ARE IN CORE WITH THEIR OPTIONAL FORMAT 3
* BLOCKS ATTACHED.  EDIT ONE LINE FOR EACH, THEN DUMP THE BLOCKS IN
* HEX IF THE DUMP SWITCH IS ON.
         SPACE 2
         USING DS1,RDS1
         USING DS3,RDS3
         GPUSTART
         TM    MODESW,REFMASK          TEST IF REFDATE WANTED
         BZ    PWPROT
         MVC   F1SUBA+18(5),=C'REFDT'
         SPACE
PWPROT   TM    MODESW,PWMASK           TEST IF PASSWORD INDIC WANTED
         BZ    F1EDIT
         MVC   F1SUBA+111(2),=C'PW'
         MVC   F1SUBB+130(2),=C'__'
         SPACE
         GPUSTOP
F1EDIT   L     RDS1,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN BEGINNING
* PRINT SUB-HEADING LINES ON PAGE FOLLOWING FORMAT 4 AND 5 INFO, AND
* SET UP PRINTING ROUTINE TO PRINT SUB-HEAD ON SUBSEQUENT PAGES.
         SPACE
         XPRLIST  PWA,LIST=(F1SA,F1SB) PRINT SUB-HEADING LINES
         SPACE
         XPRHEAD  PWA,LIST=(F1HD2,F1SA,F1SB)  SET UP FULL HEADING
         SPACE 3
* BEGIN EACH NEW DATA SET HERE:
         SPACE
F1EDLOOP L     RDS1,DS1NXTF1           FOLLOW CHAIN TO NEXT BLOCK
         CLC   DS1DSNAM(44),LASTFMT1   CHECK FOR CHAIN TERMINATOR
         BE    ENDF1                   BRANCH AT END
         GPUSTART
         USING  DS2,RDS2
         SR    RDS2,RDS2               CLEAR INDICATOR REGISTER
         TM    DS1DSORG,ISDSORG        Q/ IS THIS ISAM
         BZ    NOISAM                  N/ SKIP ISAM SECTION
         L     RDS2,DS1CHAIN           Y/  GET PTR TO FMT RECORD
         L     RDS3,DS2CHAIN             GET FMT3 PTR FROM FMT2 RECORD
         B     *+8                     SKIP NO ISAM LOAD OF FMT3 PTR
NOISAM   EQU   *
         GPUSTOP
         L     RDS3,DS1CHAIN           LOAD FORMAT 3 ADDRESS
         SPACE
         BAL   RRET,F1SPANAL           ANALYZE SPACE OCCUPIED
         SPACE
* TEST PAGE BALANCE TO BE SURE ALL OUTPUT FOR A DATA SET WILL APPEAR
* ON THE SAME PAGE.
         SPACE
         LA    RWK1,1                  AT LEAST 1 LINE ALWAYS NEEDED
         TM    MODESW,DUMPMASK         TEST FOR DUMP
         BZ    F1TEST                  BRANCH IF ONLY 1 LINE
         AH    RWK1,=H'4'              ADD 4 FOR FORMAT 1 BLOCK DUMP
         GPUSTART
         LTR   RDS2,RDS2               ANY FMT 2 RECORD
         BZ    *+8
         AH    RWK1,=H'4'              ADD FOUR FOR FMT2 TYPE RECORD
         GPUSTOP
         LTR   RDS3,RDS3               TEST FOR PRESENCE OF FORMAT 3
         BZ    F1TEST
         AH    RWK1,=H'4'              ADD 4 FOR FORMAT 3 BLOCK
F1TEST   BAL   RRET,PAGECHEK
         SPACE 3
* PRINT ONE LINE OF INFORMATION FROM A FORMAT 1 DSCB.
         SPACE
         MVC   F1DSNAM(44),DS1DSNAM    DATA SET NAME
         SPACE
         LA    RWK1,DS1VOLSQ           ADDRESS OF VOLUME SEQUENCE
         BAL   RRET,BINALF2
         MVC   F1VOLSQ(4),BTAALFZ+8
         SPACE
         MVC   F1DSSN(6),VOLUME       GET VOLSER                    GPU
*        MVC   F1DSSN(9),=C'         ' CLEAR VOLUME SERIAL
*        CLC   DS1DSSN(1),=C'A'        IS THIS FIELD ALPHA-NUM
*        BL    SETDATE                 NO
*        B     SETCRE                  BYPASS FIELD
*ETDATE  LA    RWK1,DS1DSSN            ADDRESS OF LAST READ DATE
*        LA    RWK2,F1DSSN             ADDRESS OF PRINT AREA
*        BAL   RRET,VTDATED
         SPACE
         GPUSTART
         TM    MODESW,REFMASK          TEST IF REFDATE WANTED
         BZ    SETCRE
         LA    RWK1,DS1REFD
         LA    RWK2,F1REFDT
         BAL   RRET,VTDATED
         MVC   F1A+35(2),=C'  '
         GPUSTOP
SETCRE   LA    RWK1,DS1CREDT           ADDRESS OF CREATION DATE
         LA    RWK2,F1CREDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,DS1EXPDT           ADDRESS OF EXPIRATION DATE
         LA    RWK2,F1EXPDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,F1DSORG            ADDR OF DATA SET ORG FIELD
         TM    DS1DSORG,ISDSORG        TEST INDEXED SEQUENTIAL
         BZ    NOTIS
         MVC   0(2,RWK1),=C'IS'
         LA    RWK1,2(RWK1)
NOTIS    TM    DS1DSORG,PSDSORG        TEST PHYSICAL SEQUENTIAL
         BZ    NOTPS
         MVC   0(2,RWK1),=C'PS'
         LA    RWK1,2(RWK1)
NOTPS    TM    DS1DSORG,DADSORG        TEST DIRECT ACCESS
         BZ    NOTDA
         MVC   0(2,RWK1),=C'DA'
         LA    RWK1,2(RWK1)
NOTDA    TM    DS1DSORG,PODSORG        TEST PARTITIONED
         BZ    NOTPO
         MVC   0(2,RWK1),=C'PO'
         LA    RWK1,2(RWK1)
NOTPO    TM    DS1DSORG,X'01'          TEST UNMOVEABLE
         BZ    NOTU
         MVI   0(RWK1),C'U'
NOTU     DS    0H
         SPACE
         UNPK  HEXWORK(15),DS1OPTCD(8) OPTION CODE, IN HEX
         TR    HEXWORK(15),HEXEDTAB
         MVC   F1OPTCD(2),HEXWORK
         SPACE
         LA    RWK1,F1RECFM            ADDR OF RECORD FORMAT FIELD
         TM    DS1RECFM,X'C0'
         BZ    RECFMUP                 ZEROS NOT DEFINED
         MVI   0(RWK1),C'U'
         BO    RECFMUP                 11 IS FORMAT 'U'
         TM    DS1RECFM,X'80'          WE NOW KNOW IT'S MIXED
         MVI   0(RWK1),C'F'            10 IS FORMAT 'F'
         BO    RECFMUP
         MVI   0(RWK1),C'V'            01 IS FORMAT 'V'
RECFMUP  LA    RWK1,1(RWK1)
         TM    DS1RECFM,X'20'          TEST TRACK OVERFLOW
         BZ    RECFMB
         MVI   0(RWK1),C'T'
         LA    RWK1,1(RWK1)
RECFMB   TM    DS1RECFM,X'10'          TEST FOR BLOCKED
         BZ    RECFMS
         MVI   0(RWK1),C'B'
         LA    RWK1,1(RWK1)
RECFMS   TM    DS1RECFM,X'08'          TEST FOR STANDARD BLOCKS
         BZ    RECFMAM
         MVI   0(RWK1),C'S'
         LA    RWK1,1(RWK1)
RECFMAM  TM    DS1RECFM,X'06'          TEST CONTROL CHAR TYPE
         BC    11,RECFME               BRANCH IF NOT MIXED
         TM    DS1RECFM,X'04'
         MVI   0(RWK1),C'A'
         BO    RECFME
         MVI   0(RWK1),C'M'
RECFME   DS    0H
         SPACE
         LA    RWK1,DS1BLKL            BLOCK SIZE
         BAL   RRET,BINALF2
         MVC   F1BLKL(5),BTAALF+7
         SPACE
         LA    RWK1,DS1LRECL           LOGICAL RECORD LENGTH
         BAL   RRET,BINALF2
         MVC   F1LRECL(5),BTAALF+7
         SPACE
         LA    RWK1,DS1KEYL            KEY LENGTH
         BAL   RRET,BINALF1
         MVC   F1KEYL(3),BTAALF+9
         SPACE
         L     R0,F1TRCNT              ALLOCATION SIZE IN TRACKS
         BAL   RRET,BINALFR
         MVC   F1TRALOC(5),BTAALF+7
         SPACE
         GPUSTART
         LTR   RDS2,RDS2               IS THIS AN ISAM TYPE FILE
         BZ    ISAMEXIT                WITH A FMT2 TYPE LABEL
         L     RWK1,DEVNAMAD           YES/ THEN GET ADDRESS OF NAME
         CLC   1(4,RWK1),=C'3330'      IS THIS A 3330
         BE    IS3330        GO TO 3330 ROUTINE
         CLC   1(4,RWK1),=C'3350'      IS THIS A 3350
         BE    IS3350        GO TO 3350 ROUTINE
         CLC   1(4,RWK1),=C'2314'      IS THIS A 2314 THEN
         BNE   ISAMEXIT                ONLY THESE TWO ARE SUPPORTED
         SPACE 2
IS2314   EQU   *    CALCULATE BLOCK PER TRACK FOR 2314
         SR    RGO,RGO                 BT=1+((CT-BN)/BI)
         SR    R0,R0       CT=7294  BI=146+(KL+DL)534/512  BN=45+KL+DL
         IC    RGO,DS1KEYL             GET KEYLEN
         AH    RGO,DS1BLKL             ADD BLOCKSIZE
         LTR   R1,RGO        PLACE IN REG 1 AND TEST
         BZ    ISERR                   ERROR IF TOTAL WAS ZERO
         MH    R1,=H'1045'             USE 2314 DENSITY FACTOR 534/512
         D     R0,=F'1000'             MOVE DECIMAL POINT WHERE IT SHBE
         LA    R1,146(R1)              ADD 146 TO GIVE 'BI'
         LA    RGO,45(RGO)             ADD 45 TO KL+DL        RGO=BN
         LH    R0,=H'7294'             GET 2314 TRACK CAPACITY
         SR    R0,RGO                  (CT-BN)
         LTR   RGO,R1                  PLACE BI INTO RGO AND TEST ZERO
         BZ    ISERR
         SRDL  R0,32                   PLACE R0 INTO R1 AND CLEAR R0
         DR    R0,RGO                  ((CT-BN)/BI=BT
         LA    R1,1(R1)                ADD 1 AS PER FORMULA
         STH   R1,BLKTRK               SAVE BLOCKS PER TRACK
         B     ISCALCS                 GO TO ESTIMATE TRKS NEEDED
         SPACE 2
IS3330   EQU   *                CALCULATE BLOCK PER TRACK FOR 3330
         SR    RGO,RGO                 BT=13165/135+58+KL+DL
         IC    RGO,DS1KEYL             GET KEYLEN
         AH    RGO,DS1BLKL             ADD BLOCKSIZE
         LTR   RGO,RGO                 TEST IF ZERO
         BZ    ISERR
         LA    RGO,193(RGO)            ADD 135+58
         SR    R0,R0                   PREPARE FOR DIVIDE
         L     R1,=F'13165'            GET 3330 TRACK CAPACITY
         DR    R0,RGO                  DEV CAP/LEN OF ONE BLOCK
         LTR   R1,R1                   TEST QUOTIENT
         BP    *+8                     SHOULD BE AT LEAST ONE
         LA    R1,1                    DEFAULT TO ONE IF NOT
         STH   R1,BLKTRK               SAVE BLOCKS PER TRACK
         B     ISCALCS                 GO TO ESTIMATE TRKS REQUIRED
         SPACE
IS3350   EQU   *                CALCULATE BLOCK PER TRACK FOR 3350
         SR    RGO,RGO                 BT=19254/185+82+KL+DL
         IC    RGO,DS1KEYL             GET KEYLEN
         AH    RGO,DS1BLKL             ADD BLOCKSIZE
         LTR   RGO,RGO                 TEST IF ZERO
         BZ    ISERR
         LA    RGO,267(RGO)            ADD 185+82
         SR    R0,R0                   PREPARE FOR DIVIDE
         L     R1,=F'19254'            GET 3350 TRACK CAPACITY
         DR    R0,RGO                  DEV CAP/LEN OF ONE BLOCK
         LTR   R1,R1                   TEST QUOTIENT
         BP    *+8                     SHOULD BE AT LEAST ONE
         LA    R1,1                    DEFAULT TO ONE IF NOT
         STH   R1,BLKTRK               SAVE BLOCKS PER TRACK
         B     ISCALCS                 GO TO ESTIMATE TRKS REQUIRED
         SPACE
BLKTRK   DS    H
ISFULL   DS    F
         SPACE 2
ISCALCS  DS    0H  ESTIMATE NUMBER OF PRIME TRACKS REQUIRED
         SR    R0,R0                   PREPARE FOR DIVIDE
         LH    R1,DS1BLKL              GET BLOCKSIZE
         LH    RGO,DS1LRECL            GET LRECL
         LTR   RGO,RGO                 AVOID DIVIDE BY ZERO
         BZ    ISERR
         DR    R0,RGO                  DIVIDE BLKSIZE BY LRECL
         MH    R1,BLKTRK               MULT BLK PER TRK BY REC PER BLK
         LTR   RGO,R1                  SAVE RECS PER TRACK FOR DIVIDE
         BZ    ISERR                   AND TEST TO AVOID A ZERO DIVIDE
         MVC   ISFULL,DS2PRCTR         ALIGN PRIME RECORD COUNT ON FULL
         L     R1,ISFULL               WORD BOUNDRY FOR DIVIDE
         SR    R0,R0
         DR    R0,RGO                  DIVIDE REC COUNT BY REC PER TRAC
         LA    R1,1(R1)                ADD ONE FOR END OF FILE
         LTR   R0,R0                   ANY REMAINDER
         BZ    *+8                     SKIP ROUNDING
         LA    R1,1(R1)                ROUND UP ONE TRACK
         LR    R0,R1                   PLACE INTO REG 0 FOR CONVERSION
         BAL   RRET,BINALFR            CONVERT TO ALPHA
         MVC   F1TRUSE(5),BTAALF+7     PLACE IN OUTPUT AREA
         CLC   F1TRUSE,F1TRALOC        IS MORE TRACK USED THAN ALLOC
         BL    ISAMEXIT                NO - CONTINUE
         MVC   F1TRUSE(5),F1TRALOC     MAKE TRAKS ALLOC = TRK USED
         B     *+10
ISERR    MVC   F1TRUSE(5),=C' UNKN'    ERROR MESSAGE IN OUTPUT
ISAMEXIT DS    0H
         GPUSTOP
         CLC   DS1LSTAR(3),=XL3'00'
         BE    NONEUSED
         NC    F1TRCNT(4),F1TRCNT      SEE IF ANY TRACKS ASSIGNED
         BZ    NONEUSED                NO; THEN NONE CAN BE USED
         LH    R0,DS1LSTAR             TRACKS ACTUALLY USED
         AH    R0,=H'1'
         BAL   RRET,BINALFR
         MVC   F1TRUSE(5),BTAALF+7
NONEUSED DS    0H
         SPACE
         LA    RWK1,DS1NOEPV           NUMBER OF EXTENTS
         BAL   RRET,BINALF1
         MVC   F1NOEPV(2),BTAALF+10
         SPACE
         LA    RWK1,DS1SCALO+1         SECONDARY QUANTITY SIZE
         BAL   RRET,BINALF3
         MVC   F1SCALO(5),BTAALF+7
         SPACE
         TM    DS1SCALO,X'C0'          TYPE OF SPACE ALLOCATION
         BC    14,NOTCYL               BR IF NOT ONES
         MVI   F1ALCTYP,C'C'           CYLINDER
         B     SCALDONE
NOTCYL   BC    7,NOTABSTR              BR IF NOT ZEROS
         MVI   F1ALCTYP,C'A'           ABSOLUTE TRACK
         B     SCALDONE
NOTABSTR TM    DS1SCALO,X'80'          NOW KNOW IT IS MIXED
         BO    TRKALO
         MVI   F1ALCTYP,C'B'           BLOCK
         B     SCALDONE
TRKALO   MVI   F1ALCTYP,C'T'           TRACK
SCALDONE DS    0H
         SPACE
         GPUSTART
SECUR    TM    MODESW,PWMASK       TEST FOR PW PARM
         BZ    SECDONE             NO - FORGET IT
         MVC   F1SECUR(2),=C'  '
         TM    DS1DSIND,X'10'      TEST FOR PASSWORD - READ OR WRITE
         BZ    SECDONE            IF NO BITS .... NO PASSWORD
         MVI   F1SECUR+1,C'W'      AT LEAST WRITE PROTECTED
         TM    DS1DSIND,X'04'      TEST FOR ONLY WRITE ... READ O. OK.
         BO    SECDONE            IF ON READ NOT PROTECTED
         MVI   F1SECUR,C'R'        INDICATE READ PROTECTED
SECDONE  DS    0H
         GPUSTOP
         SPACE
         CALL  XWRT2DSN,(VOLUME,(9)),VL WRITE DSN RECORD IF REQ'D
         SPACE
* EACH DATA SET LINE IS SINGLE-SPACED, UNLESS FOLLOWED BY A DUMP OR
* PDS DIRECTORY LISTING.
         SPACE
         MVI   F1A,PRSP1
         TM    MODESW,DUMPMASK         TEST IF DUMP FOLLOWS
         BO    F1PRINT2                YES, DOUBLE SPACE
         TM    MODESW,PDSLMASK         TEST IF PDS LISTING ON
         BZ    F1PRINT1                NO, SINGLE SPACE
         TM    DS1DSORG,PODSORG        TEST IF THIS DS PARTITIONED
         BZ    F1PRINT1                NO, SINGLE SPACE
F1PRINT2 MVI   F1A,PRSP2               DOUBLE SPACE
F1PRINT1 BAL   RRET,PRINTSUB           PRINT THE LINE
         SPACE
* IF DUMP SWITCH IS SET, EDIT THE DSCB'S IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F1DMPDON                BRANCH IF NO DUMP
         SPACE
         LA    RWK1,DS1                DUMP FORMAT 1 DSCB
         LA    RWK2,DS1FDAD
         BAL   RRET,DUMPDSCB
         SPACE
         LTR   RDS3,RDS3               TEST FOR FORMAT 3 BLOCK
         BZ    F1DMPDON
         LA    RWK1,DS3
         LA    RWK2,DS3FDAD
         BAL   RRET,DUMPDSCB
         SPACE
         GPUSTART
         LTR   RDS2,RDS2               TEST FOR FMT2 TYPE RECORD
         BZ    NOFMT2
         LA    RWK1,DS2                GET ADDRESS OF FMT2 RECORD
         LA    RWK2,DS2FDAD
         BAL   RRET,DUMPDSCB           PRINT FMT2 DSCB
NOFMT2   EQU   *
         GPUSTOP
F1DMPDON DS    0H
         SPACE
* IF THE PDS SWITCH IS SET AND THIS IS A PDS, EDIT ITS DIRECTORY.
         SPACE
         TM    MODESW,PDSLMASK         TEST IF LISTING CALLED FOR
         BZ    F1PDSDON
         TM    DS1DSORG,PODSORG        TEST IF PARTITIONED
         BZ    F1PDSDON
         LA    RWK1,DS1DSNAM
         BAL   RRET,PDSLIST            CALL LISTING SUBROUTINE
F1PDSDON DS    0H
         B     F1EDLOOP
         SPACE 3
* END DATA SET LISTING.  PRINT A LINE GIVING THE NUMBER OF DATA SETS.
         SPACE
ENDF1    DS    0H
         MVC   PL+49(14),=C'<<<<< END VTOC'
         LH    R0,DSCOUNT
         BAL   RRET,BINALFR
         MVC   PL+64(4),BTAALF+8
         MVC   PL+69(15),=C'DATA SETS >>>>>'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=0
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         SPACE 3
         DROP  RDS1,RDS3
         EJECT
**********************
* TRACK MAP PRINTING *
**********************
         SPACE
* START A FRESH PAGE AND PRINT THE TRACK MAP FROM CORE, ONE LINE
* PER ENTRY.
         SPACE 2
         USING MB,RMB
MAPEDIT  TM    MODESW,MAPMASK          TEST IF MAP WANTED
         BZ    ENDVOL                  BRANCH IF NOT
         SPACE
         XPREJECT  PWA                 SKIP TO FRESH PAGE
         SPACE
         MVC   TMHSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   TMHSER2(6),VOLUME
         XPRHEAD  PWA,LIST=(TMHEAD,TMSA,TMSB)  SET UP HEADING LINES
         SPACE
         L     RMB,MBBASE              BEGINNING OF ENTRY CHAIN
         L     RWK3,=F'-1'             CLEAR HIGHEST TTREL FOUND
         SR    RWK4,RWK4               CLEAR TRACK COUNTER
         SPACE
MAPELOOP CLC   MBCCHH1(4),MBTERM       TEST FOR END OF CHAIN
         BE    ENDMAPED
         SPACE
* CHECK EACH EXTENT FOR POSSIBLE ERRORS.  BEGIN BY SEEING THAT THE
* HIGHER RELATIVE TRACK NUMBER DOES NOT EXCEED THE NUMBER OF TRACKS IN
* THE VOLUME, AND THAT THE LOWER TTREL DOES NOT EXCEED THE HIGHER ONE.
         SPACE
TESTEX   CLC   MBTTREL2(2),FMAXTT      TEST 2ND FOR MAX
         BNL   EXINVAL                 EXTENT INVALID IF HIGH
         CLC   MBTTREL1(2),MBTTREL2    TEST IF LOWER NOT > HIGHER
         BH    EXINVAL                 INVALID IF SO
         SPACE
* TEST THAT LOWER TTREL IS ONE GREATER THAN THE PREVIOUS HIGHEST TTREL.
         SPACE
         LH    R0,MBTTREL1             GET CURRENT LOWER TTREL
         SR    R0,RWK3                 SUBTRACT HIGHEST TTREL TO DATE
         S     R0,=F'1'
         BZ    EXOK                    OK IF EQUAL
         BP    TMISSING                POSITIVE MEANS MISSING TRACKS
         SPACE
* A NEGATIVE DIFFERENCE INDICATES AN OVERLAP WITH A PREVIOUS EXTENT.
* FLAG THE CURRENT EXTENT, AND SET THE HIGH WATER MARK FROM IT ONLY IF
* LARGER THAN THE CURRENT VALUE.
         SPACE
         MVC   TMERROR-7(7),=C'OVERLAP'
         CH    RWK3,MBTTREL2           TEST AGAINST PREVIOUS MARK
         BNL   BYPWK3                  BRANCH IF SMALLER
         SPACE
* UPDATE THE HIGH-WATER MARK AND ACCUMULATE THE NUMBER OF TRACKS WHICH
* HAVE BEEN ACCOUNTED FOR.
         SPACE
EXOK     LH    RWK3,MBTTREL2           UPDATE HIGHEST TRACK YET
BYPWK3   LH    R0,MBNTRKS              LOAD N TRACKS IN EXTENT
         AR    RWK4,R0                 ACCUMULATE
         BAL   RRET,BINALFR            CONVERT N TO ALPHA FOR PRINTING
         MVC   TMEXTSIZ(5),BTAALF+7    PUT IN PRINT LINE
         B     EDITCCHH                CONTINUE WITH EDITING
         SPACE
* FLAG INVALID EXTENTS AND BYPASS HIGHEST TRACK AND COUNT UPDATING.
         SPACE
EXINVAL  MVC   TMERROR-14(14),=C'INVALID EXTENT'
         B     EDITCCHH
         SPACE
* WHEN TRACKS ARE MISSING, INDICATE HOW MANY BEFORE PRINTING THE
* NEXT EXTENT NORMALLY.
         SPACE
TMISSING BAL   RRET,BINALFR            EDIT N MISSING TRACKS TO ALF
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7  INSERT N MISSING IN PRINT LINE
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         B     EXOK
         SPACE
* INSERT LOWER AND UPPER ADDRESSES IN CCHH FORM, AND ADD DATA SET NAME.
         SPACE
EDITCCHH UNPK  HEXWORK(15),MBCCHH1(8)  FIRST TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH1(4),HEXWORK
         MVI   TMCCHH1+4,C'.'
         MVC   TMCCHH1+5(4),HEXWORK+4
         SPACE
         UNPK  HEXWORK(15),MBCCHH2(8)  ADDR OF LAST TRACK
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH2(4),HEXWORK
         MVI   TMCCHH2+4,C'.'
         MVC   TMCCHH2+5(4),HEXWORK+4
         SPACE
         TM    MBEXT,X'FF'             TEST IF NO EXTENT NUMBER
         BO    TMBLEXT
         SR    R0,R0
         IC    R0,MBEXT
         AH    R0,=H'1'
         BAL   RRET,BINALFR
         MVC   TMEXTNO(2),BTAALF+10
TMBLEXT  DS    0H
         SPACE
         L     R1,MBNAME               ADDRESS OF DSNAME
         MVC   TMDSNAM(44),0(R1)
         SPACE
         MVI   TM1,PRSP1               PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         L     RMB,MBCHAIN             FOLLOW CHAIN TO NEXT BLOCK
         B     MAPELOOP
         SPACE 2
* END OF MAP.  CHECK THAT THE LAST ENTRY BROUGHT US TO THE LAST
* PRIMARY TRACK.
         SPACE
ENDMAPED LH    R0,FMAXTT               LOAD LAST TRK +1
         SR    R0,RWK3                 TEST AGAINST HIGHEST FOUND
         S     R0,=F'1'
         BNP   ENDMAPPR                BRANCH IF ALL FOUND
         SPACE
* SOME TRACKS ARE MISSING, SO PRINT A WARNING.
         SPACE
         BAL   RRET,BINALFR            EDIT NUMBER MISSING
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         SPACE
ENDMAPPR DS    0H
         LR    R0,RWK4                 LOAD TRACK COUNT
         BAL   RRET,BINALFR            EDIT TO ALPHA
         MVC   TMEXTSIZ(5),BTAALF+7
         MVC   TMEXTSIZ+7(20),=C'TRACKS ACCOUNTED FOR'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=2
         SPACE
         MVI   PL+1,C' '
         MVC   PL+2(131),PL+1
         SPACE
         MVC   PL+52(28),=C'<<<<< END OF TRACK MAP >>>>>'
         MVI   PL,PRSP0
         BAL   RRET,PRINTSUB
         SPACE
         DROP  RMB
         SPACE 6
* END OF VOLUME LISTINGS
         SPACE
ENDVOL   DS    0H
         BAL   RRET,GBRESET            RELEASE DSCB CORE
         SPACE
         B     NEWVOL
         EJECT
**************************
* ERROR MESSAGE PRINTING *
**************************
         SPACE
* ERRORS WHILE TRYING TO OPEN THE VTOC:
         SPACE
NODDCARD MVC   PL+41(19),=C'CANNOT FIND DD CARD'
         B     PRERR1
         SPACE
NOTDACC  MVC   PL+41(27),=C'DEVICE IS NOT DIRECT ACCESS'
         B     PRERR1
         SPACE
UNKNDEV  MVC   PL+41(19),=C'UNKNOWN DEVICE TYPE'
         B     PRERR1
         SPACE
CANTOPEN MVC   PL+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'
         B     PRERR1
         SPACE
PRERR1   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),VTRDDDNM
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         LA    R0,4                    SET RETURN CODE OF 4
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL
         SPACE 3
* ERRORS IN DSCB FORMAT:
         SPACE
FRSTNOT4 MVC   PL+41(21),=C'FIRST DSCB NOT TYPE 4'
         LA    RWK1,RDS4               ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
BADFMT5  MVC   PL+41(33),=C'BAD DSCB, SHOULD HAVE BEEN TYPE 5'
         LA    RWK1,RDS5               ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
* PRINT ERROR MESSAGE AND DUMP BAD BLOCK.
         SPACE
PRERR2   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),VTRDDDNM
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,140(RWK1)          ADDR OF FULL DISK ADDRESS
         BAL   RRET,DUMPDSCB           DUMP BAD BLOCK IN HEX
         SPACE
* CLOSE THIS VTOC, SET RETURN CODE, AND GO ON TO NEXT VOLUME.
         SPACE
         LA    R0,2                    CALL MODE 2 FOR CLOSE
         LA    R1,VTRDADDR         LOAD ADDRESS OF PARM FIELD
         L     RGO,VTOCREAD            ADDRESS OF ROUTINE
         BALR  RRET,RGO                BRANCH TO XVTCREAD
         SPACE
         LA    R0,8                    SET RETURN CODE OF 8
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL                  CONTINUE WITH NEXT VOLUME
         EJECT
*******************************************
* PARTITIONED DATA SET DIRECTORY PRINTING *
*******************************************
         SPACE
* ENTER THIS ROUTINE WITH THE NAME OF A PARTITIONED DATA SET AT (RWK1).
* THE DDNAME REFERRING TO THE PROPER VOLUME IS ALREADY SET UP IN THE
* DCB.  LIST THE MEMBER ENTRYS FROM THE DIRECTORY, AND PRINT THE
* NUMBER OF MEMBERS, THE NUMBER OF BLOCKS, AND THE NUMBER OF BLOCKS
* ACTUALLY USED.
         SPACE 2
PDSLIST  ST    RRET,PDSEXIT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,PDSSAVE         AND WORK REGISTERS
         SPACE
* THE JFCB FOR THIS VOLUME IS ALREADY IN CORE, HAVING BEEN READ WHEN
* THE VTOC WAS OPENED.
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   JFCBDSNM(44),0(RWK1)    INSERT DATA SET NAME
         MVI   JFCBTSDM,X'08'          DO NOT REWRITE JFCB
*        THIS IS NEEDED IN MVS TO ELIMINATE 913-1C ABENDS  MB080276
         DROP  R1
         SPACE
         LM    R2,R3,=CL8'NOUSAGE '    PREVENT SETTING DATA SET USAGE
         OPEN  (PDSDCB,(INPUT)),TYPE=J
         SPACE
         SR    R0,R0                   RESET VARIOUS COUNTERS
         STH   R0,PDSBAL
         STH   R0,PDSDIRCT             DIRECTORY BLOCK COUNT
         STH   R0,PDSDIRUS             BLOCKS USED
         STH   R0,PDSMEMCT             MEMBER COUNT
         STH   R0,PDSALCT              ALIAS COUNT
         SPACE
* GET A MEMBER FROM THE DIRECTORY, SETTING REGISTER 'RPDS' TO IT.
         SPACE
GETPDS   LH    R0,PDSBAL               LOAD BALANCE IN CURRENT BLOCK
        OC    PDSDIRUS(2),PDSDIRUS
        BNZ   *+10
         LTR   R0,R0                   TEST FOR ZERO
         BP    PDSBALOK                BR IF BLOCK NOT EMPTY
         SPACE
         READ  PDSECB,SF,PDSDCB,PDSBUF    READ A DIRECTORY BLOCK
         SPACE
         CHECK PDSECB
         SPACE
         L     RWK1,=A(PDSBUF)
         USING PDSBUF,RWK1
         LH    R1,PDSDIRCT             COUNT DIRECTORY BLOCKS
         LA    R1,1(R1)
         STH   R1,PDSDIRCT
         LH    R0,PDSLRECL             SET BLOCK BALANCE FROM LOGICAL
         SH    R0,=H'2'                  BLOCK LENGTH FIELD
         STH   R0,PDSBAL
         LA    R1,PDSDATA              SET PDSCLC TO BEGINNING OF BLOCK
         ST    R1,PDSCLC
         B     GETPDS                  TEST BALANCE....
         DROP  RWK1
         SPACE 2
         USING DIRBLOCK,RPDS
PDSBALOK L     RPDS,PDSCLC             LOAD ADDRESS OF DIRECTORY ENTRY
         IC    RWK1,DIRC               GET USER DATA LENGTH
         N     RWK1,=F'31'
         SLL   RWK1,1
         LR    R1,RPDS                 UPDATE BLOCK CLC
         AR    R1,RWK1
         LA    R1,12(R1)
         ST    R1,PDSCLC
         LH    R1,PDSBAL               DECREMENT BLOCK BALANCE
         SR    R1,RWK1
         SH    R1,=H'12'
         STH   R1,PDSBAL
         SPACE
         CLC   DIRNAME(8),=8X'FF'      TEST FOR LAST NAME
         BNE   EDITMEMB
         MVC   PDSDIRUS(2),PDSDIRCT    SAVE COUNT OF BLOCKS USED
         B     GETPDS                  READ ALL BLOCKS TO GET COUNT
         SPACE
* EDIT A LINE FOR THE MEMBER.  IF THE USER DATA WAS MORE THAN 44 BYTES,
* A SECOND LINE IS REQUIRED.
         SPACE
EDITMEMB MVC   PDSMEMB(8),DIRNAME      MEMBER OR ALIAS NAME TO PRINTLIN
         TM    DIRC,ALIASMSK           TEST IF ALIAS
         BZ    NOTALIAS                BRANCH IF NOT ALIAS
         SPACE
         LH    R1,PDSALCT              COUNT ALIASES
         LA    R1,1(R1)
         STH   R1,PDSALCT
         MVI   PDSALIAS,C'A'           MARK ALIAS IN PRINT LINE
         B     PDSTTRED
         SPACE
NOTALIAS LH    R1,PDSMEMCT             COUNT MEMBER NAMES
         LA    R1,1(R1)
         STH   R1,PDSMEMCT
         SPACE
PDSTTRED DS    0H
         UNPK  HEXWORK(15),DIRTTR(8)   EDIT RELATIVE TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   PDSTTR(4),HEXWORK
         MVI   PDSTTR+4,C'.'
         MVC   PDSTTR+5(2),HEXWORK+4
         SPACE
         IC    R0,DIRC                 EDIT NUMBER OF TTR'S
         SRL   R0,5
         N     R0,=F'3'
         STC   R0,PDSNTT
         OI    PDSNTT,X'F0'
         SPACE
         LR    RWK4,RWK1               LENGTH OF USER DATA
         CH    RWK1,=H'44'             TEST IF MORE THAN ONE LINE
         BNH   PDS1LINE                BR IF ONE LINE
         SPACE
         LA    RWK1,2                  ENSURE BOTH LINES ON SAME PAGE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK4               RESTORE RWK1
         LA    RWK4,44                 LENGTH FOR FIRST LINE
         SPACE
PDS1LINE LA    RWK2,DIRUDATA           ADDRESS OF USER DATA
         LA    RWK3,PDSHEX             PRINT LINE OUTPUT AREA
         BAL   RRET,DUMPEDIT           EDIT DATA INTO HEX
         MVI   PDS1,PRSP1              PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         CALL  XWRT3PDS,((8)),VL       WRITE PDS RECORD IF REQ'D
         SPACE
         CH    RWK1,=H'44'             TEST IF SECOND LINE REQUIRED
         BNH   GETPDS                  BR IF NOT
         LR    RWK4,RWK1               COMPUTE REMAINING DATA LENGTH
         SH    RWK4,=H'44'
         LA    RWK2,DIRUDATA+44
         LA    RWK3,PDSHEX
         BAL   RRET,DUMPEDIT
         MVI   PDS1,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         B     GETPDS
         DROP  RPDS
         SPACE 3
* WHEN THE END OF THE DIRECTORY IS REACHED, CLOSE THE DATA SET AND
* PRINT A SUMMARY LINE WITH THE ACCUMULATED TOTALS.
         SPACE
PDSEODAD DS    0H
         SPACE
         LH    R0,PDSMEMCT             COUNT OF MEMBERS
         BAL   RRET,BINALFR
         MVC   PDSSUMMC(4),BTAALF+8
         LH    R0,PDSALCT              COUNT OF ALIASES
         BAL   RRET,BINALFR
         MVC   PDSSUMAC(4),BTAALF+8
         LH    R0,PDSDIRUS             DIRECTORY BLOCK USED
         BAL   RRET,BINALFR
         MVC   PDSSUMUC(4),BTAALF+8
         LH    R0,PDSDIRCT             NUMBER OF BLOCKS ALLOCATED
         BAL   RRET,BINALFR
         MVC   PDSSUMDC(4),BTAALF+8
         SPACE
         XPRNTLIN  PWA,TEXT=PDSSUM,LENGTH=PDSSUMSZ,OFFSET=16,SPA=3
         SPACE
PDSCLOSE CLOSE (PDSDCB)
         SPACE
         SPACE
         LM    RWK1,RWK4,PDSSAVE
         L     RRET,PDSEXIT
         BR    RRET
         SPACE 3
* PDS SUMMARY LINE:
         SPACE
PDSSUM   DC    C'DIRECTORY CONTAINS '
PDSSUMMC DC    C'0000 MEMBERS AND '
PDSSUMAC DC    C'0000 ALIASES, AND USES '
PDSSUMUC DC    C'0000 OF THE '
PDSSUMDC DC    C'0000 DIRECTORY BLOCKS ALLOCATED'
PDSSUMSZ EQU   *-PDSSUM
         SPACE 2
PDSEXIT  DC    F'0'
PDSSAVE  DC    4F'0'
PDSCLC   DC    A(0)
PDSBAL   DC    H'0'
PDSDIRCT DC    H'0'
PDSDIRUS DC    H'0'
PDSMEMCT DC    H'0'
PDSALCT  DC    H'0'
         SPACE 3
* SYNAD ROUTINE FOR PDS DIRECTORY.  GET ERROR MESSAGE AND LOAD INTO
* PRINT LINE.  BRANCH TO CLOSE DCB.
         SPACE
PDSSYNAD SYNADAF  ACSMETH=BSAM         GET ERROR MESSAGE FROM OS
         SPACE
         MVC   PL+1(30),=C'*******PDS DIRECTORY I/O ERROR'
         MVC   PL+31(79),49(R1)        ADD TEXT FROM SYNADAF
         SPACE
         SYNADRLS                      FREE OS MESSAGE BUFFER
         SPACE
         MVI   PL,PRSP3                SET TO SPACE 3
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         NI    PDSDCB+DCBIFLGS-IHADCB,X'3F'  RESET DCB ERROR FLAGS
         MVI   RETCODE+3,12            SET RETURN CODE OF 12
         B     PDSCLOSE                CLOSE DCB
         EJECT
*********************
* VTOC READ ROUTINE *
*********************
         SPACE
* ROUTINE 'READSEQ' READS THE NEXT DSCB IN SEQUENCE INTO THE
* 140-BYTE AREA ADDRESSED BY 'RWK2'.  IT CALLS ROUTINE 'XVTCREAD' TO DO
* THE DIRTY WORK.  NORMAL RETURN IS TO THE ADDRESS IN
* RRET+4.  IF END-OF-DATA IS ENCOUNTERED, RETURN IS TO RRET.
* THE FULL DISK ADDRESS (MBBCCHHR) IS SAVED IN THE 8 BYTES FOLLOWING
* THE BUFFER.
         SPACE 2
READSEQ  ST    RRET,RDSEQXT            SAVE RETURN ADDRESS
         SPACE
         SR    R0,R0                   CALL MODE 0 FOR READ
         LA    R1,VTRDADDR         LOAD ADDRESS OF PARM FIELD
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD ROUTINE
         BALR  RRET,RGO                BRANCH TO ROUTINE
         CH    R15,=H'4'               TEST FOR END OF FILE
         BE    RDEODAD                 BRANCH IF SO
         MVC   0(140,RWK2),8(R1)       MOVE KEY AND DATA
         XC    140(3,RWK2),0(RWK2)     ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(R1)       INSERT 'CCHHR' PART OF ADDRESS
         SPACE
         L     RRET,RDSEQXT
         LA    RRET,4(RRET)            INCREMENT FOR NORMAL RETURN
         BR    RRET
         SPACE 2
RDEODAD  L     RRET,RDSEQXT            RETURN AT END OF DATA
         BR    RRET
         SPACE 3
RDSEQXT  DC    F'0'
         EJECT
* ROUTINE 'READDIR' IS USED TO READ THE DSCB SPECIFIED BY THE 5-BYTE
* 'CCHHR' FIELD POINTED TO BY RWK1 INTO THE 140-BYTE BUFFER AT RWK2.
* THE FULL DISK ADDRESS 'MBBCCHHR' IS INSERTED IN THE 8 BYTES FOLLOW-
* ING THE 140-BYTE BLOCK.
         SPACE 2
READDIR  ST    RRET,RDDIRXT            SAVE EXIT ADDRESS
         MVC   OBCCHHR(5),0(RWK1)      GET ADDRESS FROM CALLER
         SPACE
         OBTAIN  OBCAMLST              READ SPECIFIED BLOCK
         SPACE
         LTR   R15,R15                 TEST RETURN CODE
         BZ    *+8                     BRANCH IF ZERO
         BAL   RRET,DISASTER           NO ERROR CONDITIONS TOLERATED
         L     R1,=A(OBWORK)           ADDRESS WORK AREA
         MVC   0(140,RWK2),0(R1)       MOVE DSCB TO USER'S AREA
         XC    140(3,RWK2),0(RWK2)     ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(RWK1)     INSERT CCHHR FROM ORIGINAL CALL
         L     RRET,RDDIRXT
         BR    RRET                    RETURN TO CALLER
         SPACE 3
OBCAMLST CAMLST  SEEK,OBCCHHR,VOLUME,OBWORK
         SPACE
OBCCHHR  DC    5X'00'
RDDIRXT  DC    F'0'
         EJECT
************************************
* COMPUTE DATA SET ALLOCATION SIZE *
************************************
         SPACE
* ENTER HERE TO COMPUTE THE NUMBER OF TRACKS ASSIGNED TO A DATA SET AND
* PUT THE RESULT IN 'F1TRCNT'.  THE FORMAT 1 DSCB IS ASSUMED
* TO BE IN AREA 'DS1', AND, IF THE NUMBER OF EXTENTS EXCEEDS 3,
* THE FORMAT 3 DSCB IS ASSUMED TO BE IN AREA 'DS3'.
* EACH EXTENT IS FILED IN THE TRACK MAP.
         SPACE
         USING DS1,RDS1
         USING DS3,RDS3
         SPACE
F1SPANAL ST    RRET,F1SPAXT            SAVE RETURN ADDRESS
         SR    RWK4,RWK4
         ST    RWK4,F1TRCNT            ZERO SIZE RESULT FIELD
         IC    RWK4,DS1NOEPV           INSERT NUMBER OF EXTENTS
         LTR   RWK4,RWK4               TEST FOR ZERO EXTENTS
         BCR   8,RRET                  EXIT IF ZERO
         SR    RWK2,RWK2               ZERO EXTENT INDEX
         SR    RWK3,RWK3               TRACK COUNT ACCUMULATOR
         SPACE
EXTLOOP  EX    0,EXTLIST(RWK2)         LOAD AN EXTENT ADDRESS IN RWK1
         BAL   RRET,F13CNVT            GET NUM TRKS IN EXTENT
         AR    RWK3,R0                 ADD TO TOTAL
         SPACE
         GPUSTART
         TM    MODESW,MTRKMASK     WAS 'TRK' REQUESTED
         BO    INCLOOP               YES, BYPASS TRK MAP UPDATE
         GPUSTOP
         MVC   FB+FBCCHH1(8),2(RWK1)   MAKE UP TRACK MAP ENTRY
         STH   R0,FB+FBNTRKS           SIZE OF EXTENT
         MVC   FB+FBEXT(1),1(RWK1)     EXTENT NUMBER (-1)
         MVC   FB+FBTTREL1(4),RELTT1   INSERT REL TRACK LIMITS
         LA    R0,DS1DSNAM             ADDRESS OF DATA SET NAME
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE IN TRACK MAP
         SPACE
INCLOOP  EQU   *
         LA    RWK2,4(RWK2)            INDEX TO NEXT EXTENT
         BCT   RWK4,EXTLOOP            LOOP THROUGH ALL EXTENTS
         SPACE
         ST    RWK3,F1TRCNT            STORE RESULT
         L     RRET,F1SPAXT            LOAD RETURN ADDRESS
         BR    RRET
         SPACE 3
F1SPAXT  DC    F'0'
F1TRCNT  DC    F'0'
         SPACE
* EXECUTED INSTRUCTIONS TO LOAD EXTENT ADDRESSES:
         SPACE
EXTLIST  LA    RWK1,DS1EXT1
         LA    RWK1,DS1EXT2
         LA    RWK1,DS1EXT3
         LA    RWK1,DS3EXTNT
         LA    RWK1,DS3EXTNT+10
         LA    RWK1,DS3EXTNT+20
         LA    RWK1,DS3EXTNT+30
         LA    RWK1,DS3ADEXT
         LA    RWK1,DS3ADEXT+10
         LA    RWK1,DS3ADEXT+20
         LA    RWK1,DS3ADEXT+30
         LA    RWK1,DS3ADEXT+40
         LA    RWK1,DS3ADEXT+50
         LA    RWK1,DS3ADEXT+60
         LA    RWK1,DS3ADEXT+70
         LA    RWK1,DS3ADEXT+80
         SPACE
         DROP  RDS1,RDS3
         EJECT
***********************************
* FORMAT 1 AND 3 EXTENT CONVERTER *
***********************************
         SPACE
* ENTER WITH THE ADDRESS OF A TEN-BYTE EXTENT DISCRIPTION IN RWK1.
* RETURN WITH RELATIVE TRACK NUMBERS OF FIRST AND LAST TRACKS IN
* 'TTREL1' AND 'TTREL2', AND NUMBER OF TRACKS IN R0.
         SPACE 2
F13CNVT  CLI   0(RWK1),X'00'           TEST IF THIS IS AN ACTIVE EXTENT
         BCR   8,RRET                  EXIT IF ZERO
         LA    RWK1,2(RWK1)            ADDR OF STARTING CCHH
         BAL   RGO,CCHHCNVT            GET REL TRACK
         STH   R0,RELTT1
         LA    RWK1,4(RWK1)            ADDR OF ENDING CCHH
         BAL   RGO,CCHHCNVT            CONVERT TO TTREL
         STH   R0,RELTT2
         LH    R1,RELTT1
         SR    R0,R1                   COMPUTE NUMBER OF TRACKS
         AH    R0,=H'1'
         S     RWK1,=F'6'              RESTORE RWK1 TO CALLER'S VALUE
         BR    RRET                    RETURN TO CALLER
         SPACE
* CONVERT ADDRESS FROM 'CCHH' TO RELATIVE TRACK NUMBER.
         SPACE
CCHHCNVT SR    R0,R0                   RESULT WILL BE IN R0
         IC    R0,0(RWK1)              BYTE C1
         MH    R0,FC1
         SR    R1,R1
         IC    R1,1(RWK1)
         MH    R1,FC2
         AR    R0,R1
         SR    R1,R1
         IC    R1,2(RWK1)
         MH    R1,FH1
         AR    R0,R1
         SR    R1,R1
         IC    R1,3(RWK1)
         MH    R1,FH2
         AR    R0,R1
         BR    RGO
         SPACE 2
*THESE MUST BE TOGETHER IN THE ORDER SHOWN:
         SPACE
RELTT1   DC    H'0'
RELTT2   DC    H'0'
         EJECT
***************************
* FORMAT 5 SPACE ANALYSIS *
***************************
         SPACE
* ROUTINE TO ANALYZE THE FREE SPACE EXTENTS DESCRIBED IN A FORMAT 5
* DSCB.  ENTER WITH 'RDS5' SET TO A DSCB.  COMPUTE THE NUMBER OF FREE
* TRACKS, FREE CYLINDERS, AND EXTENTS.  FILE AN ENTRY IN THE TRACK MAP
* FOR EACH EXTENT.
         SPACE 2
         USING DS5,RDS5
F5SPANAL ST    RRET,F5SPAXIT           SAVE RETURN ADDRESS
         SPACE
         LA    RWK1,DS5AVEXT           ADDR OF 1ST GROUP OF 8 EXTENTS
         LA    RWK2,8                  COUNTER
F5SPLUP1 BAL   RRET,F5EXANAL           ANALYZE INDIVIDUAL EXTENT
         LA    RWK1,5(RWK1)            INDEX TO NEXT ONE
         BCT   RWK2,F5SPLUP1
         SPACE
         LA    RWK1,DS5MAVET           ADDR OF 2ND GROUP OF 18 EXTENTS
         LA    RWK2,18
F5SPLUP2 BAL   RRET,F5EXANAL
         LA    RWK1,5(RWK1)
         BCT   RWK2,F5SPLUP2
         SPACE
         L     RRET,F5SPAXIT
         BR    RRET
         DROP  RDS5
         SPACE 3
* ROUTINE TO ANALYZE FREE SPACE EXTENT SUPPLIED BY INDEXED VTOC
INDXANAL DS    0H
         ST    RRET,F5SPAXIT       SAVE RETURN ADDRESS
         L     RWK1,VTRDXTLA       LOAD ADDRESS OF EXTENT LIST
INDXLUP  DS    0H
         LA    RWK1,XTNTINFO-XTNTDS(,RWK1) LOAD ADDRESS OF FIRST EXTENT
         LA    RWK2,XTNTN          LOAD MAXIMUM NUMBER OF EXTENTS
INDXLUP1 DS    0H
         BAL   RRET,F5EXANAL       ANALYZE INDIVIDUAL EXTENT
         LA    RWK1,5(,RWK1)       INDEX TO NEXT ONE
         CLC   0(5,RWK1),=XL5'00'  Q/ ACTIVE EXTENT
         BE    INDXCHK             NO, GO CHECK FOR ANOTHER LIST
         BCT   RWK2,INDXLUP1       LOOP IF MORE
INDXCHK  DS    0H
         L     RWK1,VTRDXTLA       LOAD ADDRESS OF EXTENT LIST
         L     RWK1,XTNTFP-XTNTDS(,RWK1) LOAD ADDRESS OF NEXT EXTENT
         LTR   RWK1,RWK1           Q/ EXTENT ADDRESS EQUAL TO ZERO
         BNZ   INDXLUP             NO, ANALYZE NEXT LIST
         SPACE 1
         L     RRET,F5SPAXIT       LOAD RETURN ADDRESS
         BR    RRET                  AND RETURN
         SPACE 3
* ANALYZE AN INDIVIDUAL FREE SPACE EXTENT.  IF ALL FIVE BYTES ARE
* ZERO, NO EXTENT IS DESCRIBED.
         SPACE
F5EXANAL ST    RRET,F5EXAXT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,F5EXASAV        AND OTHER REGISTERS
         CLC   0(5,RWK1),=XL5'00'      TEST FOR ACTIVE EXTENT
         BCR   8,RRET                  EXIT IF ZEROS
         SPACE
         LH    R1,F5EXTNTS             COUNT FREE EXTENTS
         LA    R1,1(R1)
         STH   R1,F5EXTNTS
         SPACE
         MVC   FWORK(4),0(RWK1)        LOAD REGISTERS:
         LH    RWK2,FWORK                RWK2=RELATIVE ADDR OF 1ST TR
         LH    RWK3,FWORK+2              RWK3=NUMBER OF FULL CYLS
         SR    RWK4,RWK4                 RWK4=NUMBER OF ODD TRACKS
         IC    RWK4,4(RWK1)
         STH   RWK2,RELTT1             SAVE TT REL OF FIRST TRACK
         SPACE
         LH    R0,FREECYLS             COUNT FREE CYLINDERS
         AR    R0,RWK3
         STH   R0,FREECYLS
         SPACE
         LR    R0,RWK3         COMPUTE EXTENT SIZE (MAY NOT WORK FOR
         MH    R0,FCYL                   2321 DATA CELL)
         AR    R0,RWK4
         STH   R0,FB+FBNTRKS
         LR    R1,R0                   LOAD SIZE OF THIS EXTENT
         AH    R1,FREETRKS             COUNT TOTAL FREE TRACKS
         STH   R1,FREETRKS
         AR    R0,RWK2                 MAKE TTREL OF LAST TRACK
         BCTR  R0,0                    DECREMENT BY 1
         STH   R0,RELTT2
         SPACE
         LH    R1,RELTT1               CONVERT TTREL TO CCHH FOR MAP
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH1(4),CCHH
         LH    R1,RELTT2
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH2(4),CCHH
         SPACE
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL INTO TRACK MAP
         MVI   FB+FBEXT,X'FF'          NO EXTENT NUMBER
         LA    R0,=CL44'   AVAILABLE'  DSNAME FOR AVAILABLE SPACE
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE DATA IN TRACK MAP
         SPACE
         LM    RWK1,RWK4,F5EXASAV      RESTORE REGISTERS
         L     RRET,F5EXAXT
         BR    RRET
         SPACE 3
F5SPAXIT DC    F'0'
F5EXAXT  DC    F'0'
F5EXASAV DC    4F'0'
         EJECT
*************************
* CONVERT TTREL TO CCHH *
*************************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS TO ABSOLUTE CCHH FORM.  TTREL IS
* SUPPLIED IN R1, RESULT IN 'CCHH'.
         SPACE 2
TTCNVT   SR    R0,R0                   R0-R1 USED FOR DIVIDE
         ST    R0,CCHH                 ZERO OUTPUT FIELD
         LH    RGO,FC1
         LTR   RGO,RGO                 WATCH FOR DIVIDE BY ZERO
         BZ    ZFC1
         DR    R0,RGO
         STC   R1,CCHH
         LR    R1,R0
         SR    R0,R0
ZFC1     LH    RGO,FC2
         LTR   RGO,RGO
         BZ    ZFC2
         DR    R0,RGO
         STC   R1,CCHH+1
         LR    R1,R0
         SR    R0,R0
ZFC2     LH    RGO,FH1
         LTR   RGO,RGO
         BZ    ZFH1
         DR    R0,RGO
         STC   R1,CCHH+2
         STC   R0,CCHH+3
         BR    RRET
ZFH1     STC   R1,CCHH+3
         BR    RRET
         SPACE 2
CCHH     DC    F'0'
         EJECT
**************************
* FILE ITEM IN TRACK MAP *
**************************
         SPACE
* SUBROUTINE USED BY 'F1SPANAL' AND 'F5SPANAL' TO INSERT A SIX-WORD
* EXTENT DESCRIPTOR BLOCK INTO THE TRACK MAP.  ENTER WITH THE ADDRESS
* OF THE NEW BLOCK IN 'RWK1'.  THE ROUTINE GETS CORE, MOVES THE BLOCK,
* AND CHAINS IT IN SEQUENCE WITH OTHER MAP BLOCKS BY ASCENDING ORDER OF
* LOWER CCHH.
         SPACE 2
FILEMAP  ST    RRET,FMEXIT             SAVE EXIT AND WORK REGISTERS
         STM   RWK2,RWK4,FMSAVE
         SPACE
         LA    RWK3,MBSIZE             GET A CORE BLOCK
         BAL   RRET,GETBLOCK           RETURNS ADDRESS IN RWK2
         USING MB,RWK2
         MVC   MB(MBSIZE),0(RWK1)      MOVE NEW BLOCK
         SPACE
         L     RWK1,MBBASE             GET CHAIN BEGINNING
         LA    RWK3,MBBASE             CHAIN HISTORY REG
         SPACE
FMSORT   CLC   MBCCHH1(4),FBCCHH1(RWK1)
         BL    FMTHREAD
         LR    RWK3,RWK1
         L     RWK1,FBCHAIN(RWK1)      FOLLOW CHAIN TO NEXT ITEM
         B     FMSORT
         SPACE
FMTHREAD ST    RWK1,MBCHAIN            THREAD FROM NEW TO NEXT
         ST    RWK2,FBCHAIN(RWK3)      THREAD FROM PRECEDING TO NEW
         SPACE
         LM    RWK2,RWK4,FMSAVE        RESTORE REGISTERS
         L     RRET,FMEXIT
         BR    RRET
         DROP  RWK2
         SPACE 2
FMSAVE   DC    3F'0'
FMEXIT   DC    F'0'
MBBASE   DC    A(*)                    CHAIN BASE ADDRESS
MBTERM   DC    4X'FF'                  CHAIN END, MUST FOLLOW 'MBBASE'
         SPACE
FB       DS    0F                      WORK BLOCK USED BY F1SPANAL
         DS    24X                       AND F5SPANAL TO ASSEMBLE BLKS
         EJECT
***************************
* BINARY TO ALPHA ROUTINE *
***************************
         SPACE
* ROUTINE TO CONVERT A BINARY NUMBER TO DECIMAL AND EDIT INTO THREE
* ALPHA FORMATS.  ENTER WITH REGISTER 'RWK1' SET TO THE FIRST BYTE OF
* THE BINARY FIELD AND THE NUMBER OF BYTES (UP TO FOUR) IN REGISTER
* 'RWK2'.  THE ALPHA OUTPUT IS IN THREE 12-BYTE FIELDS:
*        'BTAALF' IS RIGHT-ALIGNED WITH LEADING ZEROS BLANKED;
*        'BTAALFZ' IS RIGHT-ALIGNED WITH LEADING ZEROS;
*        'BTAALFJ' IS LEFT-ALIGNED WITH TRAILING BLANKS ADDED.
* RETURN TO CALLER IS VIA REGISTER 'RRET'.  REGISTER 'R0' IS USED AND
* IS NOT RESTORED.
         SPACE
* THE ALTERNATE ENTRANCE 'BINALFR' MAY BE USED WHEN THE ARGUMENT IS
* ALREADY IN REGISTER 'R0'.
         SPACE 2
BINALF1  LA    RWK2,1                  ENTRANCE FOR 1-BYTE ARG
         B     BTA
BINALF2  LA    RWK2,2                  ENTRANCE FOR 2-BYTE ARG
         B     BTA
BINALF3  LA    RWK2,3                  ENTRANCE FOR 3-BYTE ARG
         SPACE
BTA      SR    R0,R0                   CLEAR ACCUMULATOR
BTALUP1  SLL   R0,8                    MOVE OVER FOR NEXT BYTE
         IC    R0,0(RWK1)              GET NEXT BYTE OF ARGUMENT
         LA    RWK1,1(RWK1)            INCREMENT ADDR OF ARGUMENT
         BCT   RWK2,BTALUP1            LOOP TO EXTRACT ALL BYTES
         SPACE
BINALFR  LPR   R0,R0                   TAKE ABSOLUTE VALUE
         CVD   R0,BTADWD               CONVERT ARG TO PACKED DECIMAL
         UNPK  BTAALFZ(12),BTADWD(8)   UNPACK VERSION WITH ZEROS
         OI    BTAALFZ+11,X'F0'        COVER UP SIGN
         SPACE
         MVC   BTAALF(12),BTAPTRN      INSERT EDIT CONTROL CHAR
         ED    BTAALF(12),BTADWD+2     EDIT ZERO-SUPPRESSED VERSION
         SPACE
         MVC   BTAALFJ(11),BTAALF+1    NOTE: BTAALFJ+11 PERMANENT BLANK
BTALUP2  CLI   BTAALFJ,C' '            CHECK FOR LEADING BLANK
         BCR   7,RRET                  EXIT IF NOT BLANK, IE, DIGIT
         MVC   BTAALFJ(11),BTAALFJ+1   SHIFT ONE LEFT
         B     BTALUP2                 CONTINUE
         SPACE 3
BTADWD   DC    D'0'
BTAPTRN  DC    XL12'402020202020202020202120'     EDIT CONTROL CHARS
BTAALF   DC    CL12' '
BTAALFJ  DC    CL12' '
BTAALFZ  DC    CL12' '
         EJECT
*********************
* VTOC DATE EDITING *
*********************
         SPACE
* SUBROUTINE TO CONVERT FROM THE BINARY FORM 'YDD' IN A DSCB INTO THE
* CIVILIZED ALPHA FORM 'MM/DD/YY'.  ENTER WITH ADDRESS OF 3-BYTE
* BINARY ARGUMENT IN RWK1 AND ADDRESS OF 8-BYTE ALPHA RECEIVER IN RWK2.
         SPACE 2
VTDATED  ST    RRET,VTDXIT
         SR    R0,R0
         IC    R0,0(RWK1)              BINARY YEAR
         MH    R0,=H'1000'             TIMES 1000
         MVC   DECDATE(2),1(RWK1)      ALIGN DAY ON HALF-WORD
         AH    R0,DECDATE              ADD BINARY DAY
         CVD   R0,DECDATE              CONVERT TO PACKED DECIMAL
         SPACE
         LA    R1,DECDATAD             LOAD ADDR OF ARGUMENT ADDRESS
         L     RGO,VDATEDIT            LOAD SUBROUTINE ADDRESS
         BALR  RRET,RGO                CALL XDATEDIT ROUTINE
         SPACE
         MVC   0(8,RWK2),DECDATE       DELIVER RESULT
         L     RRET,VTDXIT
         BR    RRET
         SPACE 3
VTDXIT   DC    F'0'
         EJECT
*************************
* DSCB HEX DUMP ROUTINE *
*************************
         SPACE
* THIS SUBROUTINE EDITS A DSCB IN HEX IN THREE LINES.  ENTER WITH THE
* ADDRESS OF THE DSCB IN RWK1 AND THE ADDRESS OF ITS DISK ADDRESS
* (MBBCCHHR) IN RWK2.  CHECKS TO BE SURE ALL THREE LINES WILL BE ON
* THE SAME PAGE.
         SPACE 2
DUMPDSCB ST    RRET,DUMPEXIT           SAVE RETURN
         LR    RWK3,RWK1               TEMP SAVE RWK1
         LA    RWK1,3                  TO TEST PAGE BALANCE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK3
         SPACE
         MVC   PL+8(17),=C'BLK 1234.5678.90:'
         UNPK  HEXWORK(15),3(8,RWK2)   EDIT DISK ADDRESS OF BLOCK
         TR    HEXWORK(15),HEXEDTAB
         MVC   PL+12(4),HEXWORK
         MVC   PL+17(4),HEXWORK+4
         MVC   PL+22(2),HEXWORK+8
         LA    RWK2,0(RWK1)
         LA    RWK3,PL+35
         LA    RWK4,44
         BAL   RRET,DUMPEDIT           EDIT HEX CHARS OF KEY
         MVI   PL,PRSP1                PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         MVC   PL+8(13),=C'FORMAT N DSCB'
         MVC   PL+15(1),44(RWK1)       DSCB TYPE NUMBER
         OI    PL+15,X'F0'             FOR TYPE 0, IF EVER USED
         LA    RWK2,44(RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,92(RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP2                SPACE 2 ON LAST LINE
         BAL   RRET,PRINTSUB
         SPACE
         L     RRET,DUMPEXIT
         BR    RRET
         SPACE
DUMPEXIT DC    F'0'
         EJECT
* HEX DUMP EDIT SUBROUTINE
         SPACE
* ROUTINE TO EDIT INTO HEX IN 4-BYTE GROUPS.  'RWK2' IS THE SOURCE
* ADDRESS, 'RWK3' IS THE RECEIVER ADDRESS, AND 'RWK4' CONTAINS THE
* NUMBER OF BYTES TO EDIT.
         SPACE 2
DUMPEDIT LTR   RWK4,RWK4               TEST FOR ZERO BYTES
         BCR   13,RRET                 EXIT IF ZERO
         B     DUMPJOIN
         SPACE
DUMPLOOP BCT   R1,DUMPMOVE             TEST FOR 4TH BYTE
         MVI   0(RWK3),C' '            INSERT BLANK EVERY 4 BYTES
         LA    RWK3,1(RWK3)            INCREMENT RECEIVER ADDRESS
DUMPJOIN LA    R1,4                    BEGIN NEW 4-BYTE GROUP
         SPACE
DUMPMOVE UNPK  HEXWORK(3),0(2,RWK2)    EDIT ONE BYTE INTO ALPHA
         TR    HEXWORK(2),HEXEDTAB
         MVC   0(2,RWK3),HEXWORK
         LA    RWK2,1(RWK2)            INCREMENT SOURCE ADDR
         LA    RWK3,2(RWK3)            INCREMENT RECEIVER ADDR
         BCT   RWK4,DUMPLOOP           COUNT NUMBER OF BYTES EDITED
         BR    RRET
         EJECT
*************************
* FIELD SCAN SUBROUTINE *
*************************
         SPACE
* SUBROUTINE TO READ A WORD FROM A CHARACTER STRING.  ENTER WITH 'RWK1'
* SET TO THE BEGINNING OF THE STRING AND 'RWK2' CONTAINING THE LENGTH
* OF THE STRING.  RETURNS WITH THE WORD IN 8 BYTES AT 'SCANWORD' AND
* UPDATES 'RWK1' AND 'RWK2' TO GET NEXT WORD IN NEXT CALL.
         SPACE 2
SCAN     DS    0H
         MVC   SCANWORD(8),=8C' '      BLANK OUTPUT FIELD
         LA    RWK3,SCANWORD
         SPACE
SCLOOP   LTR   RWK2,RWK2               TEST FOR END OF INPUT STRING
         BCR   13,RRET                 EXIT WHEN REACHED
         CLI   0(RWK1),C' '            BLANKS ARE IGNORED
         BE    SCANEXT
         CLI   0(RWK1),C','            TEST FOR COMMA (WORD SEPARATOR)
         BE    SCANDONE
         SPACE
         C     RWK3,=A(SCANWORD+8)     TEST FOR MAX OUTPUT LENGTH
         BNL   SCANEXT                 SKIP DELIVERY IF OVER 8
         MVC   0(1,RWK3),0(RWK1)       DELIVER CHAR TO OUTPUT WORD
         LA    RWK3,1(RWK3)            INCR OUTPUT INDEX
SCANEXT  LA    RWK1,1(RWK1)            INCR TO NEXT INPUT CHAR, AND
         BCTR  RWK2,0                    DECREMENT COUNT
         B     SCLOOP
         SPACE
SCANDONE LA    RWK1,1(RWK1)            INCR PAST SEPARATOR AND EXIT
         BCTR  RWK2,0
         BR    RRET
         SPACE 2
SCANWORD DC    CL8' '
         EJECT
************************
* CORE BLOCK ALLOCATOR *
************************
         SPACE
* THIS ROUTINE IS ENTERED WITH THE SIZE OF A DESIRED BLOCK OF CORE IN
* 'RWK3'.  IT RETURNS WITH THE ADDRESS OF AN AVAILABLE AREA IN 'RWK2'.
* THE BLOCK WILL BE ALIGNED ON A FULL-WORD BOUNDARY.
         SPACE
* THESE SMALL BLOCKS ARE ALLOCATED FROM LARGE BLOCKS OBTAINED FROM THE
* SUPERVISOR VIA 'GETMAIN' CALLS.  THE FIRST WORD OF EACH LARGE BLOCK
* POINTS TO THE NEXT ONE, EXCEPT FOR THE LAST, WHICH CONTAINS A ZERO
* WORD.  THIS CHAIN IS USED BY THE 'GBRESET' ROUTINE TO RELEASE THE
* CORE.
         SPACE 2
GETBLOCK A     RWK3,=F'3'              ROUND SIZE TO NEXT WORD
         N     RWK3,ROUND4             'ROUND4 IS X'FFFFFFFC'
GBJOIN   L     R0,GBBAL                LOAD CURRENT BALANCE
         SR    R0,RWK3                 SUBTRACT SIZE DESIRED
         BM    NEWBLOCK                BRANCH IF NOT ENOUGH
         ST    R0,GBBAL                SAVE NEW BALANCE
         L     RWK2,GBCLC              LOAD ADDRESS OF BLOCK
         LR    R0,RWK2
         AR    R0,RWK3                 UPDATE ADDRESS OF AVAILABLE AREA
         ST    R0,GBCLC
         BR    RRET
         SPACE
* GET A NEW BLOCK AND CHAIN.
         SPACE
NEWBLOCK GETMAIN  EC,LV=GETSIZE,A=GBNEWBL  CONDITIONAL REQUEST FOR CORE
         LTR   R15,R15                 DID WE GET IT?
         BNZ   GMFAIL                  NO, BRANCH
         L     R1,GBNEWBL              LOAD ADDRESS OF GOTTEN CORE
         L     RWK2,GBBASE             BASE OF CURRENT BLOCK
         ST    R1,0(RWK2)              CHAIN TO NEW BLOCK
         ST    R1,GBBASE               UPDATE BASE CELL
         SR    R0,R0
         ST    R0,0(R1)                ZERO CHAIN IN NEW BLOCK
         LA    R1,4(R1)                SET TO FIRST AVAILABLE BYTE
         ST    R1,GBCLC
         MVC   GBBAL(4),NEWBAL         RESET BALANCE COUNTER
         B     GBJOIN
         SPACE 3
* RESET ROUTINE TO RELEASE ALL CORE AND RESET POINTERS.
         SPACE
GBRESET  L     RWK1,GBFIRST            ADDR OF FIRST BLOCK OF CORE
GBR1     LTR   RWK1,RWK1               TEST FOR END OF CHAIN
         BZ    GBR2                    BRANCH IF RELEASING DONE
         LR    R1,RWK1                 ADDR OF BLOCK TO RELEASE
         L     RWK1,0(RWK1)            FOLLOW CHAIN TO NEXT BLOCK
         SPACE
         FREEMAIN  R,LV=GETSIZE,A=(1)
         SPACE
         B     GBR1
         SPACE
GBR2     SR    R0,R0
         ST    R0,GBBAL                SET ZERO BALANCE
         ST    R0,GBFIRST              SET ZERO INITIAL BLOCK ADDRESS
         LA    R0,GBFIRST
         ST    R0,GBBASE               POINT BASE BACK TO INITIAL CELL
         BR    RRET
         SPACE 2
* RAN OUT OF CORE.  PRINT MESSAGE AND GO DIRECTLY TO NOCORE ABEND
         SPACE
GMFAIL   XPRNTLIN  PWA,TEXT=GMFMSG,LENGTH=L'GMFMSG,SPB=1,SPA=1
         B     NOCORE
         SPACE 3
GBNEWBL  DC    F'0'
GBBAL    DC    F'0'
GBCLC    DC    A(0)
GBBASE   DC    A(GBFIRST)
GBFIRST  DC    A(0)
NEWBAL   DC    A(GETSIZE-4)
         EJECT
********************
* PRINTING ROUTINE *
********************
         SPACE
* ROUTINE TO INTERFACE WITH THE PRINTING ROUTINE.  CALL WITH TEXT IN
* 133-BYTE LINE 'PL'.  FIRST BYTE CONTAINS DESIRED SPACING AFTER
* PRINTING.  'PL' IS BLANKED AFTER PRINTING.
         SPACE
PRINTSUB ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         IC    R0,PL                   PICK UP SPACING AMOUNT
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPA=((R0))
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         L     RRET,PRSEXIT            LOAD RETURN ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
* PAGE BALANCE TEST ROUTINE.  SKIP TO HEAD-OF-FORM IF REMAINING LINES
* ON PAGE ARE LESS THAN THE NUMBER IN 'RWK1'.
         SPACE
PAGECHEK ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         XPREJECT  PWA,COND=(LT,(RWK1))
         L     RRET,PRSEXIT            RESTORE EXIT ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
PRSEXIT  DS    F
         EJECT
*****************
* PAGE HEADINGS *
*****************
         SPACE
INITHEAD XPRLDEF  TEXT=IHTXT,LENGTH=L'IHTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
IHTXT    DC    C'P0256000 -- DIRECT-ACCESS VOLUME DIRECTORY LISTER '
         SPACE 3
F1HD2    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
F1HD3    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
F1HTXT   DC    CL20' '
F1HSER1  EQU   F1HTXT
         DC    C'TABLE OF CONTENTS FOR VOLUME SERIAL='
F1HSER2  DC    CL6' '
LF1HTXT  EQU   *-F1HTXT
         SPACE 3
F1SA     XPRLDEF  TEXT=F1SUBA,LENGTH=LF1SUBA,SPA=0,OFFSET=19
         SPACE
F1SUBA   DS    0C
         DC    C'DSNAME'
         DC    19C' '
         DC    C' SERIAL SEQ    CREDT    EXPDT  '
         DC    C'  DSO RECFM BLKSZ LRECL KEY OP  '
         DC    C'TRKAL TRKUS EX SECQU T   '
LF1SUBA  EQU   *-F1SUBA
         SPACE 3
F1SB     XPRLDEF  TEXT=F1SUBB,LENGTH=LF1SUBB,SPA=2
         SPACE
F1SUBB   DS    0C
         DC    44C'_'
         DC    C' ______ ____  ________ ________'
         DC    C'  ___ _____ _____ _____ ___ __  '
         DC    C'_____ _____ __ _____ _   '
LF1SUBB  EQU   *-F1SUBB
         SPACE
* PAGE SUB-HEADING LINES FOR TRACK MAP EDITING
         SPACE
TMHEAD   XPRLDEF  TEXT=TMHTXT,LENGTH=LTMHTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
         SPACE
TMHTXT   DC    CL20' '
TMHSER1  EQU   TMHTXT
         DC    C'TRACK ALLOCATION MAP FOR VOLUME SERIAL='
TMHSER2  DC    CL6' '
LTMHTXT  EQU   *-TMHTXT
         SPACE 3
TMSA     XPRLDEF  TEXT=TMSUBA,LENGTH=LTMSUBA,OFFSET=27,SPA=0
         SPACE
TMSUBA   DS    0C
         DC    C'FIRST TRK   LAST TRK  #TRKS  EXT  DSNAME OR USAGE'
LTMSUBA  EQU   *-TMSUBA
         SPACE 3
TMSB     XPRLDEF  TEXT=TMSUBB,LENGTH=LTMSUBB,OFFSET=27,SPA=2
         SPACE
TMSUBB   DS    0C
         DC    C'_________  _________  _____  ___  '
         DC    44C'_'
LTMSUBB  EQU   *-TMSUBB
         EJECT
* PRINT LINE FIELD DEFINITIONS
         SPACE 2
PL       DC    CL133' '
         SPACE 3
* PRINT LINES FOR VOLUME DESCRIPTION:
         SPACE
V1       EQU   PL
V1TYPE   EQU   V1+22
V1NOCYL  EQU   V1+45
V1TRCYL  EQU   V1+57
V1DEVTK  EQU   V1+73
V1DEVDT  EQU   V1+88
V1DEVDB  EQU   V1+102
         SPACE
V2       EQU   PL
V2DSCBCT EQU   V2+20
V2DSCBAV EQU   V2+37
V2VTEXT  EQU   V2+55
V2NUMALT EQU   V2+88
V2NXTALT EQU   V2+102
         SPACE
V3       EQU   PL
V3FRTRKS EQU   PL+18
V3FREXTS EQU   PL+34
V3FRCYLS EQU   PL+58
         SPACE
V4       EQU   PL
         SPACE
V5       EQU   PL
V5VIRAV  EQU   PL+21
         SPACE 1
* PRINT LINES FOR FORMAT 1 DSCB DESCRIPTION:
         SPACE
F1A      EQU   PL                  FIELD LENGTH IN BYTES
F1DSNAM  EQU   F1A+1                 45
F1REFDT  EQU   F1A+37                 8
F1DSSN   EQU   F1A+46                 7
F1VOLSQ  EQU   F1A+53                 6
F1CREDT  EQU   F1A+59                 9
F1EXPDT  EQU   F1A+68                 9
F1DSORG  EQU   F1A+78                 4
F1RECFM  EQU   F1A+82                 6
F1BLKL   EQU   F1A+88                 6
F1LRECL  EQU   F1A+94                 6
F1KEYL   EQU   F1A+100                4
F1OPTCD  EQU   F1A+104                4
F1TRALOC EQU   F1A+108                6
F1TRUSE  EQU   F1A+114                6
F1NOEPV  EQU   F1A+120                3
F1SCALO  EQU   F1A+123                6
F1ALCTYP EQU   F1A+129                1
F1SECUR  EQU   F1A+131                2
         SPACE
* PRINT LINES FOR TRACK MAP EDITING:
         SPACE
TM1      EQU   PL
TMERROR  EQU   TM1+26
TMCCHH1  EQU   TM1+28
TMCCHH2  EQU   TM1+39
TMEXTSIZ EQU   TM1+50
TMEXTNO  EQU   TM1+57
TMDSNAM  EQU   TM1+62
         SPACE
* PRINT LINES FOR PDS DIRECTORY LISTING:
         SPACE
PDS1     EQU   PL
PDSMEMB  EQU   PDS1+12
PDSALIAS EQU   PDS1+21
PDSTTR   EQU   PDS1+23
PDSNTT   EQU   PDS1+32
PDSHEX   EQU   PDS1+35
         EJECT
* EXODUS
         SPACE
* WHEN ALL VOLUMES ARE COMPLETED, COME HERE TO CLOSE THE PRINTER,
* TIDY UP LOOSE ENDS, AND RETURN.
         SPACE 2
EXODUS   DS    0H
         SPACE
         CALL  XWRT4CLO                CLOSE WRITE FILES IF REQ'D
         SPACE
         XPRCLOSE  PWA
         SPACE
         L     RSAVE,SAVEAREA+4
         L     RGO,RETCODE             INSERT RETURN CODE IN REG 15
         RETURN  (14,12),T,RC=(15)
         SPACE 6
* DISASTER ROUTINE
         SPACE
* COME HERE TO ABEND FOR CONDITIONS WHICH WERE NOT SUPPOSED TO HAPPEN,
* OR ERRORS FOR WHICH NO SPECIAL ROUTINE ARE WRITTEN.
         SPACE 2
DISASTER ABEND 100,DUMP
         EJECT
* NO CORE ROUTINE
         SPACE
* COME HERE TO ABEND WHEN REGION SIZE IS NOT LARGE ENOUGH FOR VTOC
         SPACE 2
NOCORE   ABEND 4014
         EJECT
* PDS DIRECTORY DATA CONTROL BLOCK
         SPACE 2
PDSDCB   DCB   DSORG=PS,                                               X
               MACRF=R,                                                X
               DDNAME=VOLUME01,                                        X
               DEVD=DA,                                                X
               RECFM=F,                                                X
               KEYLEN=8,                                               X
               BLKSIZE=256,                                            X
               EODAD=PDSEODAD,                                         X
               SYNAD=PDSSYNAD,                                         X
               EXLST=JFCBADR
         SPACE 6
* DCB EXIT LIST:
         SPACE
JFCBADR  DS    0F
         DC    X'87'
         DC    AL3(JFCB)
         EJECT
* PRINT SUBROUTINE DATA CONTROL BLOCK AND WORK AREA:
         SPACE 2
* UNABLE TO OPEN SYSPRINT - TYPE ERROR MESSAGE AND EXIT.
         SPACE
PROPBAD  DS    0H
         MVC   PROPMSGJ(8),JOBNAME     INSERT JOB NAME IN MESSAGE
         WTO   MF=(E,PROPMSG)          TYPE COMPLAINT ON CONSOLE
         MVI   RETCODE+3,20            SET RETURN CODE TO 20
         B     EXODUS                  EXIT
         SPACE
PROPMSG  DS    0F
         DC    AL2(PROPMSGL,0)         FORMAT V CONTROL FIELD
         DC    C'JOB '
PROPMSGJ DC    C'12345678 -- P0256000 UNABLE TO OPEN SYSPRINT'
PROPMSGL EQU   *-PROPMSG
         SPACE 6
PWA      XPRDCB  DDNAME=SYSPRINT
         EJECT
* MISCELLANEOUS CONSTANTS AND WORK CELLS:
         SPACE 2
DECDATE  DC    D'0'
         SPACE
DECTIME  DC    F'0'
DEVCHAR  DC    2F'0'
UNITTYPE EQU   DEVCHAR+3
FMT1ADDR DC    F'0'
FMT4ADDR DC    F'0'
FMT5ADDR DC    F'0'
FWORK    DC    F'0'
RETCODE  DC    F'0'
ROUND4   DC    X'FFFFFFFC'
SAVEAREA DC    18F'0'
TIOTLOC  DC    A(0)
VTOCREAD DC    V(XVTCREAD)
DECDATAD DC    A(DECDATE)
VDATEDIT DC    V(XDATEDIT)
         SPACE
DSCOUNT  DC    H'0'
FREECYLS DC    H'0'
FREETRKS DC    H'0'
F5EXTNTS DC    H'0'
HWORK    DC    H'0'
VTOCSIZE DC    H'0'
         SPACE
VTRDADDR DC    A(VTRDPARM)         ADDRESS OF PARAMTER LIST
VTRDPARM DS    0D                  VTOC READ PARAMETER LIST DSECT
VTRDDDNM DC    CL8'VOLUME00'       DDNAME FOR OPEN
VTRDRCDA DC    A(0)                RECORD ADDRESS
VTRDXTLA DC    A(0)                EXTENT LIST ADDRESS
VTRDDC   DC    F'0'                NUMBER OF FREE DSCB S
VTRDIC   DC    F'0'                NUMBER OF FREE VIRS
VTRDDVTP DC    XL1'00'             DASD DEVICE TYPE
VTRDVT   DC    CL1'O'              VTOC TYPE (OS OR INDEXED)
VTRDSTAT DC    CL3'000'            CVAF RETURN STATUS
VTRDRC   DC    CL2'00'             VTOC RETURN CODE
JOBNAME  DS    CL8
VOLUME   DS    CL6
HEXWORK  DC    CL16' '
         GPUSTART
MINTRKA  DC    CL12'000000000000'  MINIMUN TRK ALLOC TO BE LISTED
SAVGBBAL DC    F'0'
SAVGBCLC DC    F'0'
         GPUSTOP
LASTFMT1 DC    44X'FF'
MODESW   DC    X'00'
         SPACE
         DC    CL16'0123456789ABCDEF'
HEXEDTAB EQU   *-256
         SPACE
* DUMMY TRACK MAP ENTRY FOR VOLUME LABEL ON TRACK 0:
         SPACE
TRK0MAP  DC    2F'0'
         DC    H'1'
         DC    XL2'FF00'
         DC    A(TRK0NAME)
         DC    F'0'
         EJECT
* TABLE OF DEVICE SIZE CONSTANTS, FILLED IN FROM DEVICE NAME TABLE WHEN
* DEVICE TYPE IS DETERMINED.  THE FOUR CONSTANTS FC1, FC2, FH1, AND FH2
* ARE SCALING FACTORS TO BE APPLIED TO A FULL DIRECT-ACCESS ADDRESS OF
* THE FORM 'CCHH'.  EACH CONSTANT IS THE NUMBER OF TRACKS REPRESENTED
* BY ONE UNIT OF THE CORRESPONDING ADDRESS BYTE.  'FMAXTT' IS THE
* MAXIMUM RELATIVE TRACK ADDRESS FOR THE DEVICE, AND 'FCYL' IS THE
* NUMBER OF TRACKS PER CYLINDER, AS APPLIED TO THE CYLINDER COUNT IN A
* FORMAT 5 EXTENT ENTRY.  'DEVNAMAD' IS THE ADDRESS OF THE DEVICE NAME
* IN THE DEVICE NAME TABLE.
         SPACE
DEVNAMAD DC    A(0)
FC1      DC    H'0'
FC2      DC    H'0'
FH1      DC    H'0'
FH2      DC    H'0'
FCYL     DC    H'0'
FMAXTT   DC    H'0'
         SPACE 2
* DEVICE NAME TABLE, TO PROVIDE SPECIFIC INFORMATION FOR EACH DEVICE.
* THE ORDER OF THE HALF-WORD CONSTANTS MUST CORRESPOND TO "FC1..."
* ABOVE.
         SPACE
DEVNAMES DS    0H
         DC    AL1(DEV3350)
         DC    CL15'3350 DATA MODL '
         DC    H'7680,30,0,1,30,16650'
DEVNAMSZ EQU   *-DEVNAMES
         SPACE
         DC    AL1(DEV3331)
         DC    CL15'3330 MOD 11    '
         DC    H'4864,19,0,1,19,15352'
         SPACE
         DC    AL1(DEV3330)
         DC    CL15'3330 DISK PACK'
         DC    H'4864,19,0,1,19,7676'
         SPACE
         DC    AL1(DEV2305)
         DC    CL15'2305 DRUM'
         DC    H'0,8,0,1,8,768'
         SPACE
         DC    AL1(DEV3340)
         DC    CL15'3340 DATA MODL '
         DC    H'3072,12,0,1,12,8352'
         SPACE
         DC    AL1(DEV2301)
         DC    CL15'2301 DRUM'
         DC    H'0,0,0,1,8,200'
         SPACE
         DC    AL1(DEV2302)
         DC    CL15'2302 DISK FILE'
         DC    H'0,46,0,1,46,11500'
         SPACE
         DC    AL1(DEV2303)
         DC    CL15'2303 DRUM'
         DC    H'0,10,0,1,10,800'
         SPACE
         DC    AL1(DEV2311)
         DC    CL15'2311 DISK PACK'
         DC    H'0,10,0,1,10,2000'
         SPACE
         DC    AL1(DEV2314)
         DC    CL15'2314 DISK PACK'
         DC    H'0,20,0,1,20,4000'
         SPACE
         DC    AL1(DEV2321)
         DC    CL15'2321 DATA CELL'
         DC    H'1000,100,20,1,20,19600'
         SPACE
DEVNAMOB DC    X'00'                   OBJECT FOR LOOKUP
UNKNOWN  DC    C'UNKNOWN'
         SPACE 2
         DROP  RBASE1,RBASE2,RBASE3
         SPACE 2
* BUFFER FOR JOB FILE CONTROL BLOCK:
         SPACE
         DS    0D
JFCB     DS    CL176
         SPACE 2
* PDS DIRECTORY BLOCK BUFFER:
         SPACE
PDSBUF   DS    1D              KEY
PDSLRECL DS    1H              LOGICAL RECORD LENGTH
PDSDATA  DS    CL254           DATA
         SPACE 2
* WORK AREA FOR 'OBTAIN' MACRO:
         SPACE
         ORG   PDSBUF                  OVERLAPS PDS DIRECTORY BUFFER
OBWORK   DS    0D                      'OBTAIN' WORK AREA
         DS    350C
         SPACE 2
* MISCELLANEOUS.
         SPACE
TRK0NAME DC    CL44'VOLUME LABEL'
VTOCNAME DC    CL44'VOLUME TABLE OF CONTENTS'
REVMSG   DC    C'VERSION 3.0, 6 AUGUST 1968'
DS5WARN  DC    C'*******WARNING--DOS FLAG IS ON; FORMAT 5 DSCB''S MAY NX
               OT REFLECT TRUE STATUS OF AVAILABLE TRACKS'
GMFMSG   DC    C'*******INSUFFICIENT CORE TO HOLD ENTIRE VTOC; GOING ONX
                TO NEXT VOLUME'
         EJECT
* LITERALS
         SPACE 2
         LTORG
         EJECT
 TITLE 'DIRECT-ACCESS DIRECTORY LISTER                  DUMMY SECTIONS'
XTNTDS   DSECT ,                   VOLUME FREE SPACE EXTENT DSECT
XTNTFP   DS    A                   FORWARD POINTER ADDRESS
XTNTBP   DS    A                   BACKWARD POINTER ADDRESS
XTNTCT   DS    CL1                 NUMBER OF EXTENTS IN ENTRY
XTNTINFO DS    0CL5                FREE SPACE EXTENT DESRIPTOR
XTNTRTA  DS    CL2                 STARTING RELATIVE TRACK ADDRESS
XTNTNWC  DS    CL2                 NUMBER OF WHOLE CYLINDERS IN EXTENT
XTNTNAT  DS    CL1                 NUMBER OF ADDITIONAL TRACKS
         DS    254CL5              REMAINING ENTRIES IN LIST
XTNTDSL  EQU   *-XTNTDS            EXTENT DSECT LENGTH
XTNTN    EQU   255                 NUMBER OF EXTENT ENTRIES
         SPACE 3
* DUMMY SECTION TO DEFINE TRACK MAP ENTRY
         SPACE 2
*              *************************
*              *                       *
*            0 * ADDRESS OF NEXT ENTRY *
*              *                       *
*              *************************
*              *                       *
*            4 *        CC HH 1        *
*              *                       *
*              *************************
*              *                       *
*            8 *        CC HH 2        *
*              *                       *
*              *************************
*              *           *     *     *
*           12 * NUMB TRKS * EXT * NU  *
*              *           *     *     *
*              *************************
*              *                       *
*           16 *   ADDRESS OF DSNAME   *
*              *                       *
*              *************************
*              *           *           *
*           20 *  TTREL 1  *  TTREL 2  *
*              *           *           *
*              *************************
         SPACE 2
MB       DSECT
MBCHAIN  DS    F
MBCCHH1  DS    F
MBCCHH2  DS    F
MBNTRKS  DS    H
MBEXT    DS    CL1
         DS    CL1
MBNAME   DS    F
MBTTREL1 DS    H
MBTTREL2 DS    H
         SPACE
MBSIZE   EQU   *-MB
         SPACE
FBCHAIN  EQU   MBCHAIN-MB
FBCCHH1  EQU   MBCCHH1-MB
FBCCHH2  EQU   MBCCHH2-MB
FBNTRKS  EQU   MBNTRKS-MB
FBEXT    EQU   MBEXT-MB
FBNAME   EQU   MBNAME-MB
FBTTREL1 EQU   MBTTREL1-MB
FBTTREL2 EQU   MBTTREL2-MB
         EJECT
* DUMMY SECTION TO DEFINE PDS DIRECTORY ITEM
         SPACE 2
*              *************************
*              *                       *
*            0 *                       *
*              *      MEMBER NAME      *
*            4 *                       *
*              *                       *
*              *************************
*              *                 *     *
*            8 *       TT R      *  C  *
*              *                 *     *
*              *************************
*              *                       *
*           12 *       USER DATA       *
*            . *                       *
*            . *      0-62 BYTES       *
*            . *                       *
*            . *           *************
*            . *           *
*           72 *           *
*              *           *
*              *************
         SPACE 2
DIRBLOCK DSECT
         SPACE
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
DIRUDATA DS    CL62
         EJECT
* DSCB FORMATTING DUMMY SECTIONS
         SPACE
* FORMAT 1 DSCB:
         SPACE
DS1      DSECT
         IECSDSL1  1
DS1FDAD  DS    CL8
DS1CHAIN DS    F
DS1NXTF1 DS    F
         SPACE
DS1SIZE  EQU   *-DS1
         SPACE
FM1NXTF1 EQU   DS1NXTF1-DS1
FM1DSNAM EQU   DS1DSNAM-DS1
         EJECT
* FORMAT 2 DSCB:
         SPACE
DS2      DSECT
         IECSDSL1  2
DS2FDAD  DS    CL8
         GPUSTART
DS2CHAIN DS  F
         GPUSTOP
         SPACE
DS2SIZE  EQU   *-DS2
         EJECT
* FORMAT 3 DSCB:
         SPACE
DS3      DSECT
         IECSDSL1  3
DS3FDAD  DS    CL8
DS3CHAIN DS    F
         SPACE
DS3SIZE  EQU   *-DS3
         EJECT
* FORMAT 4 DSCB:
         SPACE
DS4      DSECT
DS4DSNAM DS    11F
         IECSDSL1  4
DS4FDAD  DS    CL8
         SPACE
DS4SIZE  EQU   *-DS4
         ORG   DS4DEVDB+9          VSAM OWNERSHIP BIT
DS4VSAM  DS    XL1
         EJECT
* FORMAT 5 DSCB:
         SPACE
DS5      DSECT
         IECSDSL1  5
DS5FDAD  DS    CL8
DS5CHAIN DS    F
         SPACE
DS5SIZE  EQU   *-DS5
         EJECT
* DCB FIELD DEFINING DUMMY SECTION
         SPACE 2
         DCBD  DSORG=PS,DEVD=DA
         EJECT
* JOB FILE CONTROL BLOCK DUMMY SECTION
         SPACE 2
JFDUMMY  DSECT
         IEFJFCBN
         EJECT
* TASK I/O TABLE (TIOT) DEFINING DUMMY SECTION:
         SPACE 2
TIOT     DSECT
         IEFTIOT1
         SPACE 6
         END   P0256000
