BLDO     CSECT
* OLD VERSION OF BLDO--PRODUCES TALLY.
* FUNCTION
         SPACE
*        BLDO BUILDS THE OCCURRENCE FILES WHICH ARE USED TO
*              CONSTRUCT THE QUANDRY MAP AND INDEX FILES.
         SPACE
* INPUT
*        FILE(ERIC)--THE INDEXED SEQUENTIAL FILE OF ERIC CITATIONS
*              IN QUANDRY FORMAT, PROCESSED AS PHYSICAL SEQUENTIAL.
*              ON EACH PASS, THE AUTHOR, DESCRIPTOR, AND IDENTIFIER
*              FIELDS ARE SEARCHED FOR AUTHORS, ETC. WITHIN AN
*              ALPHABETIC INTERVAL.  THE FORMAT OF FILE(ERIC)
*              IS AS FOLLOWS:
*                   RECLEN   DS H   RECORD LENGTH EXCLUDING THIS FIELD
*                   DATALEN  DS H   LENGTH OF DATA PORTION OF RECORD
*                   TTRECNO  DS H   TTR TRACK OF RECORD IN FILE(ERIC)
*                   RRECNO   DS H   TTR RECORD OF RECORD IN FILE(ERIC)
*                   FILLER   DS 4H
*                   OFFSETS  DS 15H OFFSETS OF EACH FIELD INTO DATA
*                                   OFFSETS+28 IS IDENTIFIER OFFSET
*                                   OFFSETS+26 IS DESCRIPTOR OFFSET
*                                   OFFSETS+24 IS AUTHOR OFFSET
*                   DATA     DS CL(DATALEN) ERIC CITATION FIELDS
         SPACE
* OUTPUT
*        FILE(MAJOR)--OCCURRENCE RECORDS FOR EACH MAJOR DESCRIPTOR
*              AND IDENTIFIER (THOSE BEGINNING WITH AN ASTERISK).
*              ONE RECORD IS WRITTEN WHENEVER A MAJOR DESCRIPTOR
*              OR IDENTIFIER OCCURS IN A RECORD.  THE FORMAT OF
*              FILE(MAJOR) IS AS FOLLOWS:
*                   TTRECNO  DS H    TTR TRACK OF RECORD IN FILE(ERIC)
*                   RRECNO   DS H    TTR RECORD OF RECORD IN FILE(ERIC)
*                   DESCRIPT DS CL32 AUTHOR, DESCRIPTOR, OR IDENTIFIER
*                   ASTERISK DC C'*' INDICATES MAJOR
*        FILE(MINOR)--OCCURRENCE RECORDS FOR EACH MINOR DESCRIPTOR
*              AND IDENTIFIER (THOSE NOT BEGINNING WITH AN ASTERISK),
*              AND EACH AUTHOR.  (AUTHORS ARE NEVER STARRED.)  THE
*              FORMAT IS IDENTICAL TO FILE(MAJOR) EXCEPT THAT THE
*              ASTERISK IS REPLACED BY X'00' TO INDICATE MINOR KEYS.
*        FILE(DICT)--A DICTIONARY FILE GIVING ALL DESCRIPTORS AND
*              IDENTIFIERS.  THE FILE MAY BE PRINTED FOR A LIST OF
*              KEYS AND THEIR FREQUENCIES.  IT IS ONLY USED AS INPUT
*              TO THE PL/I PROGRAM HISTO WHICH GATHERS DESCRIPTOR
*              STATISTICS.  THE FORMAT OF FILE(DICT) IS:
*                   DESCRIPT DS CL32   DESCRIPTOR (LAST BYTE BLANK)
*                   FILLER   DC CL8' ' FILLER
*                   MAJORCT  DS ZL9    NUMBER OF OCCURRENCES AS MAJOR
*                   MINORCT  DS ZL9    NUMBER OF OCCURRENCES AS MINOR
*                   TOTALCT  DS ZL9    TOTAL OCCURRENCES
         EJECT
*        FILE(SYSPRINT)--RUN STATISTICS FOR EACH PASS OVER FILE(ERIC).
*              THE FOLLOWING STATISTICS ARE PRINTED FOR EACH RUN:
*                   ENTRIES-----NUMBER OF DESCRIPTORS AND IDENTIFIERS
*                   OVERFLOWS---NUMBER OF THESE WITH HASH CLASHES
*                   OCCURRENCES-NUMBER OF OCCURRENCE RECORDS WRITTEN
*                   RECORDS-----NUMBER OF RECORDS READ IN FILE(ERIC)
*                   LBOUND------LOWEST CHARACTER PROCESSED THIS PASS
         EJECT
         REGS
         BEGIN
         OPEN  (DICT,OUTPUT,MAJOR,OUTPUT)
         OPEN  (MINOR,OUTPUT,SYSPRINT,OUTPUT)
         EJECT
PASS     L     R1,BNDADDR         LOAD ADDR OF BOUNDS
         CLI   1(R1),0            TEST IF AT END OF BOUNDS
         BE    CLOSE              FINISHED IF SO
         MVC   BRACKET+1(1),0(R1) SET LOWER BOUND FOR COMPARISON
         MVC   BRACKET+8+1(1),1(R1) SET UPPER BOUND FOR COMPARISON
         LA    R1,1(R1)           MOVE DOWN BOUNDS STRING
         ST    R1,BNDADDR         AND STORE FOR NEXT PASS
         L     R0,=A(ENTRIES)     POINT TO FIRST ENTRY
         L     R1,=A(OFLEND+ENTRYLEN-ENTRIES) LOAD LENGTH OF ENTRIES
         SLR   R3,R3              CLEAR LENGTH AND PAD CHARACTER
         MVCL  R0,R2              ZERO ENTRIES
         MVC   HIGH(4),=A(OFLAREA) RESET OVERFLOW AREA HIGH WATER MARK
         OPEN  ERIC               PREPARE FOR PASS OVER INPUT FILE
         SPACE
LOOP     GET   ERIC               READ ERIC RECORD
         ST    R1,RECAD           SAVE RECORD ADDRESS
         AP    RECCT,=P'1'        INCREMENT RECORD COUNT
         MVC   RECNO(4),4(R1)     COPY RECORD NUMBER
         SPACE
         LR    R4,R1              COPY RECORD ADDRESS
         AH    R4,30(R1)          INDEX PAST IDENTIFIERS
         MVI   0(R4),X'00'        TERMINATE IDENTIFIERS
         AH    R1,28(R1)          INDEX TO IDENTIFIERS
         CR    R4,R1              TEST FOR PRESENCE OF IDENTIFIERS
         BNH   *+8                BRANCH IF NO IDENTIFIER FIELD
         BAL   R10,SCANFLD        GET IDENTIFIERS
         SPACE
         L     R1,RECAD           RESTORE RECORD ADDRESS
         LR    R4,R1              COPY RECORD ADDRESS
         AH    R4,28(R1)          INDEX PAST DESCRIPTORS
         MVI   0(R4),X'00'        TERMINATE DESCRIPTORS
         AH    R1,26(R1)          INDEX TO DESCRIPTORS
         BAL   R10,SCANFLD        GET DESCRIPTORS
*********SPACE****************************************************** 50
*********L     R1,RECAD*********  RESTORE RECORD ADDRESS*********    50
*********LR    R4,R1*********     COPY RECORD ADDRESS*********       50
*********AH    R4,26(R1)********* INDEX PAST AUTHORS*********        50
*********MVI   0(R4),X'00'        TERMINATE AUTHORS******************50
*********AH    R1,24(R1)********* INDEX TO AUTHORS****************** 50
*********CR    R4,R1*********     TEST FOR PRESENCE OF AUTHORS       50
*********BNH   *+8*********       BRANCH IF NO AUTHOR FIELD********* 50
*********BAL   R10,SCANFLD        GET AUTHORS******************      50
         B     LOOP               PROCESS NEXT RECORD
         EJECT
SCANFLD  LR    R3,R1              POINT TO FIRST FIELD
BLD      TRT   0(256,R3),TRTBL    TRT FOR SEMICOLON
         LR    R9,R1              SAVE ADDRESS OF DELIMITER
         MVI   ENTRY+DESCLEN,X'40' ASSUME DESCRIPTOR IS MINOR
         CLI   0(R3),C'*'         TEST
         BNE   *+12               IF MINOR
         MVI   ENTRY+DESCLEN,C'*'  FLAG AS MAJOR
         LA    R3,1(R3)           POINT PAST C'*'
BRACKET  CLI   0(R3),*-*          TEST LEFT ENDPOINT
         BL    NEXTDESC           REJECT IF TOO LOW
         CLI   0(R3),*-*          TEST RIGHT ENDPOINT
         BNL   NEXTDESC           REJECT IF TOO HIGH
         LR    R2,R9              LOAD ADDRESS OF DELIMITER
         SR    R2,R3              CALCULATE LENGTH OF DESCRIPTOR
         BZ    NEXTDESC           TO SKIP BAD RECORD
         BCTR  R2,0               REDUCE COUNT FOR EXECUTE
         C     R2,=A(DESCLEN-1)   TEST FOR EXCESSIVE ENTRY LENGTH
         BNH   *+8                BRANCH IF NOT
         LA    R2,DESCLEN-1       ELSE TRUNCATE DESCRIPTOR
         MVC   ENTRY(DESCLEN),=CL80' ' BLANK THE ENTRY
         EX    R2,MVCENTRY        MOVE TO WORK AREA
         CLI   ENTRY,C'A'         TEST FOR                           50
         BNE   *+14                'AND OTHERS'                      50
         CLC   ENTRY(DESCLEN),ANDOTHRS IN THE AUTHOR FIELD           50
         BE    NEXTDESC                 AND SKIP IF SO               50
         MVI   ENTRY+DESCLEN-1,C' ' BLANK LAST BYTE                  31
         LA    R4,2(R2)           COPY LENGTH AND
         N     R4,=X'00FFFFFE'    ROUND UP TO HALFWORD
         SLR   R5,R5              CLEAR ACCUMULATOR
         AH    R5,ENTRY-2(R4)     ADD HALFWORDS OF DESCRIPTOR
         BCTR  R4,0               DECREMENT INDEX
         BCT   R4,*-6             DECREMENT AND BRANCH
         D     R4,=A((OFLAREA-ENTRIES)/ENTRYLEN) SCALE TO SUBSCRIPT
         MH    R4,=AL2(ENTRYLEN)  CALCULATE OFFSET OF FIRST ENTRY
         LA    R5,ENTRIES(R4)     POINT TO FIRST ENTRY IN HASH CHAIN
         OC    4(4,R5),4(R5)      TEST IF SLOT IS FILLED
         BZ    ADD                IF NOT, ADD ENTRY
CHAIN    CLC   ENTRY(DESCLEN),DESCOFF(R5) COMPARE TABLE SLOT
         BE    MATCH              UPDATE TABLE FOR MATCH
         LR    R4,R5              SAVE CURRENT POSITION IN CHAIN
         L     R5,0(R5)           LOAD CHAIN POINTER
         LTR   R5,R5              TEST CHAIN POINTER
         BP    CHAIN              TEST SUCCESSOR IF PRESENT
         L     R5,HIGH            NO SUCC-LOCATE 1ST EMPTY OVFL SLOT
         C     R5,MAX             TEST IF OVERFLOW AREA FULL
         BNL   U0001              ABEND IF SO
         AP    OVFLCT,=P'1'       COUNT OVERFLOW SLOT
         ST    R5,0(R4)           SET CHAIN FIELD
         LA    R0,ENTRYLEN(R5)    POINT TO NEXT FREE SLOT
         ST    R0,HIGH            AND RESET HIGH MARK
ADD      MVC   DESCOFF(DESCLEN,R5),ENTRY COPY ENTRY INTO NEW SLOT
         AP    ENTRYCT,=P'1'      COUNT ENTRY SLOT
MATCH    L     R4,4(R5)           LOAD OCCURRENCE COUNT FIELD
         LA    R0,1               ASSUME DESCRIPTOR IS MINOR
         CLI   ENTRY+DESCLEN,X'40' TEST ASSUMPTION
         BE    *+8                SKIP RESET IF MINOR
         L     R0,=X'00010000'    LOAD MAJOR
         ALR   R4,R0              UPDATE COUNT
         ST    R4,4(R5)           AND STORE
         AP    OCCURCT,=P'1'      COUNT OCCURRENCE
         LA    R1,MAJOR           ASSUME MAJOR DESCRIPTOR
         BCT   R0,*+8             BRANCH IF SO
         LA    R1,MINOR           ELSE POINT TO MINOR DCB
         PUT   (1),RECNO          WRITE OCCURRENCE RECORD
NEXTDESC LA    R3,2(R9)           POINT TO NEXT DESCRIPTOR (PAST C'; ')
         CLI   0(R9),X'00'        TEST FOR END OF DESCRIPTORS
         BNE   BLD                PROCESS NEXT DESCRIPTOR IF NOT
         BR    R10                RETURN IF AT END
         EJECT
EODAD    CLOSE ERIC               CLOSE FILE
         LA    R2,ENTRYCT         POINT TO FIRST TOTAL FIELD
PRINTSUM UNPK  PRINTNUM,0(4,R2) MOVE TOTAL
         OI    PRINTNUM+L'PRINTNUM-1,X'F0' TO PRINT LINE
         MVC   0(4,R2),=PL4'00'   CLEAR COUNT
         MVC   PRINTHDR,4(R2)     MOVE TITLE TO PRINT LINE
         PUT   SYSPRINT,PRINTHDR  WRITE LINE
         LA    R2,17(R2)          POINT TO NEXT STATISTIC
         CLI   0(R2),X'FF'        TEST AT END
         BNE   PRINTSUM           PROCESS IF NOT
         MVC   PRINTHDR(20),=CL20'LBOUND' MOVE TITLE TO PRINT LINE
         L     R1,BNDADDR         LOAD BOUNDS ADDRESS
         BCTR  R1,0               BACK UP 1
         MVC   PRINTNUM(1),0(R1)  MOVE LOWER BOUND TO LINE
         PUT   SYSPRINT,PRINTHDR  WRITE BOUNDS LINE
         PUT   SYSPRINT,=CL80' '  WRITE BLANK LINE
         EJECT
         LA    R4,ENTRYLEN        LOAD ENTRY LENGTH FOR BXLE INCREMENT
         L     R5,=A(OFLEND)      POINT TO END OF TABLE
         L     R9,=A((OFLEND-ENTRIES)/ENTRYLEN) NUMBER OF ENTRIES
SHELL1   SRL   R9,1               DIVIDE COMPARISON DISTANCE BY 2
         LA    R9,1(R9)           ENSURE DISTANCE AT LEAST 1
SHELL2   LA    R0,1               INDICATE NO SWAPS THIS ITERATION
         L     R2,=A(ENTRIES)     POINT TO FIRST ENTRY
         LR    R3,R9              COPY COMPARISON DISTANCE
         MH    R3,=AL2(ENTRYLEN)  CONVERT TO BYTES
         LA    R3,0(R3,R2)        CALCULATE ADDRESS OF FIRST 2ND       X
                                  COMPARAND
SHELL3   CLC   DESCOFF(DESCLEN,R2),DESCOFF(R3) COMPARE ENTRIES
         BNH   SHELL3B            SKIP SWAP IF SORTED
         MVC   ENTRY(ENTRYLEN-4),4(R2) SAVE FIRST ENTRY
         MVC   4(ENTRYLEN-4,R2),4(R3) COPY SECOND ENTRY ONTO FIRST
         MVC   4(ENTRYLEN-4,R3),ENTRY COPY FIRST ENTRY ONTO SECOND
         SLR   R0,R0              INDICATE SWAP OCCURRED THIS ITERATION
SHELL3B  LA    R2,ENTRYLEN(R2)    BUMP FIRST COMPARAND POINTER
         BXLE  R3,R4,SHELL3       PROCESS REMAINDER OF TABLE
         BCT   R0,SHELL2          REPEAT WITH SAME DISTANCE IF SWAP    X
                                  OCCURRED
         BCT   R9,SHELL1          REPEAT AT HALF DISTANCE UNLESS       X
                                  DISTANCE WAS 1
         L     R2,=A(ENTRIES)     LOAD BXLE INITIAL VALUE
PRINT    L     R6,4(R2)           LOAD COUNT FIELD
         LTR   R6,R6              TEST IF NULL
         BZ    PRINTB             SKIP PRINT IF SO
         SRDL  R6,16              SEPARATE MAJOR AND MINOR COUNTS
         SRL   R7,16              JUSTIFY MAJOR COUNTS
         PUT   DICT               DO PUT LOCATE
         MVC   0(DESCLEN,R1),DESCOFF(R2) MOVE DESCRIPTOR TO PRINT LINE
         MVC   DESCLEN(DESCOFF,R1),=CL80' ' MOVE BLANKS TO PRINT LINE
         MVC   ENTRYLEN(27,R1),=4X'404020202020202120' MOVE IN EDIT FLD
         CVD   R6,DWORK           CONVERT MAJOR COUNT TO DECIMAL
         ED    ENTRYLEN(9,R1),DWORK+4
         CVD   R7,DWORK           CONVERT MINOR COUNT TO DECIMAL
         ED    ENTRYLEN+9(9,R1),DWORK+4
         ALR   R6,R7              TOTAL MAJOR AND MINOR COUNTS
         CVD   R6,DWORK           CONVERT TOTAL COUNTS TO DECIMAL
         ED    ENTRYLEN+18(9,R1),DWORK+4
PRINTB   BXLE  R2,R4,PRINT        PROCESS NEXT ENTRY
         B     PASS               MAKE NEXT PASS
         EJECT
CLOSE    CLOSE (DICT,,MAJOR,,MINOR) CLOSE OCCURRENCE AND DICT FILES
         FINISH
         SPACE 3
U0001    ABEND 1,DUMP             ABEND ON SYMBOL TABLE OVERFLOW
         SPACE 3
DESCOFF  EQU   8
DESCLEN  EQU   32
ENTRYLEN EQU   DESCOFF+DESCLEN
         CNOP  4,8                ALIGN ENTRY ON A DOUBLEWORD
RECNO    DS    F'0',0CL(DESCLEN)
ENTRY    DC    XL(ENTRYLEN)'00'
HIGH     DC    A(OFLAREA)
MAX      DC    A(OFLEND)
ENTRYCT  DC    PL4'0',CL13'ENTRIES'
OVFLCT   DC    PL4'0',CL13'OVERFLOWS'
OCCURCT  DC    PL4'0',CL13'OCCURRENCES'
RECCT    DC    PL4'0',CL13'RECORDS'
         DC    X'FF'
PRINTHDR DC    CL13' '
PRINTNUM DC    CL7'0000000'
MVCENTRY MVC   ENTRY(0),0(R3)
ANDOTHRS DC    CL(DESCLEN)'AND OTHERS'                               50
         EJECT
         PRINT NOGEN
ERIC     DCB   DDNAME=ERIC,DSORG=PS,MACRF=GL,EODAD=EODAD
DICT     DCB   DDNAME=DICT,DSORG=PS,MACRF=PL,RECFM=FBS,                X
               LRECL=ENTRYLEN+27,BLKSIZE=50*(ENTRYLEN+27)
MAJOR    DCB   DDNAME=MAJOR,DSORG=PS,MACRF=PM,RECFM=FBS,               X
               LRECL=4+DESCLEN+1,BLKSIZE=100*(4+DESCLEN+1)
MINOR    DCB   DDNAME=MINOR,DSORG=PS,MACRF=PM,RECFM=FBS,               X
               LRECL=4+DESCLEN+1,BLKSIZE=100*(4+DESCLEN+1)
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=F,BLKSIZE=20
TRTBL    DC    0D'0',XL256'00'
         ORG   TRTBL
         DC    X'08'
         ORG   TRTBL+C';'         SEMICOLON
         DC    X'04'
         ORG
         LTORG
RECAD    DS    A
DWORK    DC    D'0'
*BNDADDR DC*** A(*+4),X'00',C'E',C'M',C'S',X'FF',X'00' FOUR PASSES
BNDADDR  DC    A(*+4),X'00',C'M',X'FF',X'00' SET FOR TWO PASSES
*BNDADDR DC*** A(*+4),X'00',X'FF',X'00' SET FOR ONE PASS
         DS    0F                 ALIGN ENTRIES
ENTRIES  DS    (X'6000')XL(ENTRYLEN)'00'
OFLAREA  DS    (X'2800')XL(ENTRYLEN)'00'
OFLEND   EQU   *
         DC    2XL(ENTRYLEN)'00'  ADDED BECAUSE CHICKEN
         END   BLDO
