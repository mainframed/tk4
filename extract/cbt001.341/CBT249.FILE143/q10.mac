INIT     QSTART 'QUEUE COMMAND - INITIALIZATION ROUTINES'
         GBLA  &QLEVEL        JES2 LEVEL. DEFINED BY QSTART MACRO.
         GBLB  &NJE           NJE SUPPORT. DEFINED BY QSTART MACRO.
*                             NOTE: FOR NJE SUPPORT &QLEVEL MUST
*                                   BE THREE (3)
         AIF   (NOT &NJE).NNJE1                         NJE *HMD 07/80*
$MAXNODE EQU   99             MAXIMUM ALLOWABLE NODES   NJE *HMD 07/80*
SAVE     EQU    0             BASE FOR PSVSAV (NONE)    NJE *HMD 07/80*
.NNJE1   ANOP                                           NJE *HMD 07/80*
         $JOE
         $JOT
         AIF   (NOT &NJE).NNJE2                         NJE *HMD 07/80*
         $PCE                                           NJE *HMD 07/80*
.NNJE2   ANOP                                           NJE *HMD 07/80*
         TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'
***********************************************************************
*                                                                     *
*   LOAD QCOMMON                                                      *
*                                                                     *
***********************************************************************
*
****
*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,
****               THIS IS THE ONLY REFERENCE TO IT.
*
         LOAD  EP=QUEUECMN    QUEUE COMMON AREA
         LR    R11,R0         ADDR OF QCOMMON
         L     R1,4(R13)      PREVIOUS SAVE AREA
         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA
         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON
*************************************************************HMD 12/79*
*   SET TERMINAL DISPLAY CHARACTERISTICS                    *HMD 12/79*
*************************************************************HMD 12/79*
CK3270   STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE *HMD 12/79*
         GTSIZE  ,            SEE IF SS OR BATCH            *HMD 12/79*
         LTR   R0,R0          SEE IF SCREEN LENGTH GIVEN    *HMD 12/79*
         BNZ   IS3270         THIS MUST BE A 3270           *HMD 12/79*
SSORBAT  OI    QDSSFLG,QDSSBAT     INDICATE BATCH OR SS TERM*HMD 12/79*
         L     R15,16         ADDR OF CVT                   *HMD 12/79*
         L     R15,0(R15)     ASCB/TCB QUAD WORDS           *HMD 12/79*
         L     R15,12(R15)    CURRENT ASCB ADDR             *HMD 12/79*
         L     R15,56(R15)    CSCB ADDRESS                  *HMD 12/79*
         TM    7(R15),X'40'   IS THIS A TERMINAL JOB?       *HMD 12/79*
         BO    IS3270         YES, CONTINUE                 *HMD 12/79*
         OI    QDSSFLG,QDBATC NO, MUST BE A BATCH JOB       *HMD 12/79*
IS3270   DS    0H                                           *HMD 12/79*
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD BASE REG
         USING QCKPT,R9       BASE REG FOR CKPT WORK
         L     R9,QVCKPT      LOAD BASE REG
         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK
         L     R8,QVDSPL      LOAD BASE REG
***********************************************************************
*                                                                     *
*   MOVE PARMS FROM CPPL TO DAPL                                      *
*                                                                     *
***********************************************************************
         LOAD  EPLOC=QAPUTLN                                *HMD 12/79*
         ST    R0,QVPUTL                                    *HMD 12/79*
         LOAD  EPLOC=QAGETLN                                *HMD 12/79*
         ST    R0,QVGETL                                    *HMD 12/79*
         USING CPPL,R2        ADDR OF CPPL IS IN R2
         MVC   DAPLUPT,CPPLUPT USER PROFILE TABLE
         MVC   DAPLPSCB,CPPLPSCB PROTECTED STORAGE CNTL BLK
         MVC   DAPLECT,CPPLECT ENVIRONMENT CNTL TABLE
         MVC   IOPLUPT,CPPLUPT MOVE UPT ADDRESS             *HMD 12/79*
         MVC   IOPLECT,CPPLECT MOVE ECT ADDRESS             *HMD 12/79*
         XC    IOPLIOPB,IOPLIOPB    CLEAR PARM BLOCK        *HMD 12/79*
         L     R3,CPPLPSCB     GET ADDR OF PSCB             *HMD 04/79*
         USING PSCB,R3         GET ADDRESSIBILITY           *HMD 04/79*
         TM    PSCBATR1,PSCBCTRL   OPR CAPABILITY?          *HMD 04/79*
         BO    AUTHORX         YES, THIS GUY IS REALLY OK   *CDG  3/82*
         SR    R1,R1           CHECK PCF LEVEL -            ** GTEDS **
         ICM   R1,1,PSCBATR2   GET INSTALLATION ATTRIBUTES  ** GTEDS **
         BZ    AUTHOR          ZERO COMMAND LEVEL AND DS    ** GTEDS **
         SLL   R1,28           SHIFT OUT COMMAND ACCESS     ** GTEDS **
         SRL   R1,28           LEAVING DATA SET ACCESS      ** GTEDS **
         CH    R1,=H'2'        IS IT GREATER THAN 2         ** GTEDS **
         BNL   NOTAUTH         NOPE, LEAVE HIM HIGH AND DRY ** GTEDS **
AUTHOR   MVI   QXAUTH,X'01'    PCF AUTHORIZED- THIS GUY OK  *CDG  3/82*
         B     NOTAUTH         DONT GIVE SUPER GOOD GUY STAT*CDG  3/82*
AUTHORX  MVI   QXAUTH,X'03'    OPR AND PCF AUTHORIZED       *CDG  3/82*
NOTAUTH  DS    0H                                           *HMD 04/79*
         DROP  R3              NOT NEEDED ANYMORE           *HMD 04/79*
***********************************************************************
*                                                                     *
*   MOVE COMMAND BUFFER TO REPLY BUFFER                               *
*                                                                     *
***********************************************************************
         L     R1,CPPLCBUF    ADDR OF COMMAND BUFFER
         LH    R3,0(R1)       LENGTH OF COMMAND BUFFER
         LH    R4,2(R1)       OFFSET TO FIRST DATA BYTE
         LA    R1,4(R1,R4)    FIRST DATA BYTE
         SR    R3,R4          SUBTRACT OFFSET FROM LENGTH
         SH    R3,=H'4'       SUBTRACT OVERHEAD
         SH    R3,=H'1'       IS LENGTH ZERO?
         BM    SKIP           YES. SKIP IT.
         EX    R3,OCBUF       TRANSLATE TO UPPER CASE
         CLC   =C'CKPT(',0(1) IS REQUEST FOR CKPT?
         BE    CKPT           YES. DO IT.
         MVC   QDREPLY,QBLANK BLANK THE REPLY LINE
         CH    R3,=H'62'      IS LENGTH OVER 63?
         BNH   OK             NO. USE IT.
         LA    R3,62          USE MAXIMUM LENGTH
OK       EX    R3,MVCBUF      MOVE THE DATA
         LA    R3,1(R3)       INCREMENT TO TRUE LENGTH
         STH   R3,QDRLNG      STORE REPLY LENGTH
***********************************************************************
*                                                                     *
*   LOCATE LOGON ID, MOVE TO QLOGON                                   *
*                                                                     *
***********************************************************************
SKIP     L     R1,16          ADDR OF CVT
         L     R1,0(R1)       ADDR OF DISPATCH QUEUE
         L     R1,12(R1)      ADDR OF CURRENT ASCB
         L     R1,176(R1)     ADDR OF JOBNAME
         MVC   QLOGON,0(R1)   MOVE JOBNAME TO QLOGON
***********************************************************************
*                                                                     *
*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *
*                                                                     *
***********************************************************************
         L     R0,QCLV        LOAD LENGTH OF AREA          *HMD 04/79*
         GETMAIN RU,LV=(0),BNDRY=PAGE,SP=1                 *HMD 04/79*
         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE
         A     R1,=F'65536'   END OF TABLE
         ST    R1,QCEND
***********************************************************************
*                                                                     *
*   ALLOCATE HASPCKPT                                                 *
*                                                                     *
***********************************************************************
         MVC   DA08DDN,=CL8'HASPCKPT' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNCKPT) DSNAME FOR ALLOCATE
         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *
*                                                                     *
***********************************************************************
         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT
         L     R2,QCSTART     USE TABLE AREA FOR IOAREA
         AIF   (&QLEVEL NE 3).NOPT       MVS 3.8 JES2 4.1   *HMD 12/79*
         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS       *HMD 12/79*
.NOPT    ANOP                                               *HMD 12/79*
         READ  HDECB1,SF,,(R2),MF=E READ FIRST RECORD
         CHECK HDECB1
         AIF   (&QLEVEL EQ 1).LVL1
         AIF   (&QLEVEL EQ 2).LVL2
         AIF   (&QLEVEL EQ 3).LVL2                          *HMD 12/79*
         MNOTE 8,'QLEVEL IS INVALID. SEE QSTART MACRO DEFINITION.'
.LVL1    ANOP
***********************************************************************
*                                                                     *
*   LOCATE FIXED PORTION OF CHECKPOINT RECORD                         *
*                                                                     *
***********************************************************************
         USING QSEDSECT,R2    BASE REG FOR QSE BLOCKS
         LA    R3,QSESTAT+L'QSESTAT+7-QSEDSECT LENGTH OF QSE
         N     R3,=F'-8'      ROUND TO DOUBLE WORD
         LR    R4,R3          OFFSET PAST ALL QSES
TRYQSE   TM    QSEFLAGS,QSELAST IS THIS THE LAST QSE?
         BO    LASTQSE        YES. BRANCH.
         AR    R2,R3          INCREMENT TO NEXT QSE
         AR    R4,R3          ACCUMULATE OFFSET PAST QSE
         B     TRYQSE         TRY NEXT QSE
LASTQSE  LA    R4,$JQHEADS+2-$SAVEBEG(R4) OFFSET TO JQE HEADERS
         ST    R4,QCJQHEAD    SAVE OFFSET
         AR    R2,R3          INCREMENT TO NEXT QSE
***********************************************************************
*                                                                     *
*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *
*                                                                     *
***********************************************************************
         DROP  R2
         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT
         LH    R5,$NUMTGV     NUMBER OF TRACK GROUPS PER VOLUME
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8
         SRL   R5,3           DIVIDE BY 8
         SR    R0,R0          ZERO OUT R0
         IC    R0,$NUMDA      NUMBER OF SPOOL VOLUMES
         MR    R4,R0          LENGTH OF TRACK GROUP MAP IN R5
         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP
         LA    R5,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(R5) OFFSET
         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY
         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT
***********************************************************************
*                                                                     *
*   COMPUTE LENGTH OF JOBQUEUE RECORD (JQT)                           *
*                                                                     *
***********************************************************************
         SR    R4,R4          COMPUTE
         IC    R4,$NUMDA             SIZE OF
         MH    R4,=H'6'                     DA CKPT INFO
         LH    R5,$NUMRJE     COMPUTE
         LR    R6,R5                 SIZE OF
         LA    R5,1(R5)                     MSG SPOOLING
         MH    R5,=H'3'                                  QUEUE
         MH    R6,=H'3'              AND
         LA    R6,7(R6)                 REMOTE
         SRL   R6,3                           SIGNON TABLE
         ALR   R4,R5          ADD
         ALR   R4,R6          ADD
         MH    R3,$QSENO      SIZE OF QSE SEGMENT
         LA    R4,$SAVELEN+JQELNGTH-1(R3,R4) ADD FIXED PORTION SIZE
         ALR   R1,R4          ADD LENGTH OF TRACK GROUP MAP
         SLR   R0,R0          PREPARE FOR DIVIDE
         D     R0,=A(JQELNGTH) DIVIDE BY LENGTH OF JQE
         AH    R1,$MAXJOBS    ADD NUMBER OF JQES
         M     R0,=A(JQELNGTH) MULTIPLY BY LENGTH OF JQE
         ST    R1,QCJQTL      STORE LENGTH OF CHECKPOINT RECORD
***********************************************************************
*                                                                     *
*   COMPUTE SIZE OF JOT                                               *
*                                                                     *
***********************************************************************
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE
         L     R3,=A(NJOTPRFX) SIZE OF JOT PREFIX
         AH    R3,$NUMJOES    NUMBER OF JOES
         MH    R3,=AL2(JOESIZE) MULTIPLY BY JOE SIZE
         ST    R3,QCJOTL      SIZE OF JOT
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R4,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R4,HASPACE+62  STORE IN DCB
         STH   R4,HDECB2+6    STORE IN DECB
         LA    R4,63(R4)      PREPARE TO ROUND
         N     R4,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R0,R4          HASPACE BUFFER SIZE
         MH    R0,=H'3'       3 BUFFERS
         AR    R0,R1          JQT LENGTH
         AR    R0,R3          JOT LENGTH
         A     R0,=F'32768'   ADD SLOP FOR IOS PAGE FIX
         ST    R0,QCJCTLV     SAVE LENGTH FOR FREEMAIN     *HMD 04/79*
         GETMAIN RU,LV=(0),BNDRY=PAGE,SP=1                 *HMD 04/79*
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R4          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R4          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         AR    R1,R4          INCREMENT
         ST    R1,QCJOTA      BUFFER FOR JOT
         AR    R1,R3          INCREMENT
         ST    R1,QCJQTA      BUFFER FOR JQT
         A     R1,QCJQHEAD    ADD OFFSET TO BASE
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         LA    R3,$SAVEEND    ADDR OF DA CKPT INFO
         AGO   .EXIT
.LVL2    ANOP
***********************************************************************
*                                                                     *
*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *
*                                                                     *
***********************************************************************
         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT
         LH    R5,$NUMTGV     NUMBER OF TRACK GROUPS PER VOLUME
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8
         SRL   R5,3           DIVIDE BY 8
         SR    R0,R0          ZERO OUT R0
         IC    R0,$NUMDA      NUMBER OF SPOOL VOLUMES
         MR    R4,R0          LENGTH OF TRACK GROUP MAP IN R5
         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP
         LA    R5,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(R5) OFFSET
         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY
         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R6,$MAXJOBS    NUMBER OF JQES
         AIF   (&QLEVEL NE 3).NOEYE    MVS 3.8 JES2 4.1     *HMD 12/79*
         LA    R6,1(,R6)      +1 FOR EYE-CATCHER            *HMD 12/79*
.NOEYE   ANOP                                               *HMD 12/79*
         MH    R6,=AL2(JQELNGTH) MULTIPLY BY LENGTH OF JQE
         LA    R6,4095(R6)    PREPARE TO ROUND
         SRL   R6,12          DIVIDE BY 4096
         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE
         LH    R3,$NUMJOES    NUMBER OF JOES
         LA    R3,NJOTPRFX(,R3) ADJUSTED LENGTH OF JOT PREFIX
         MH    R3,=AL2(JOESIZE) MULTIPLY BY LENGTH OF JOE
         LA    R3,4095(R3) PREPARE TO ROUND
         SRL   R3,12          DIVIDE BY 4096
         STH   R3,QCJOTL      NUMBER OF BLOCKS FOR JOT
***********************************************************************
*                                                                     *
*   COMPUTE TOTAL LENGTH OF QSES                                      *
*                                                                     *
***********************************************************************
         AIF   (&QLEVEL EQ 3).LVL3     MVS 3.8 JES2 4.1     *HMD 12/79*
         LA    R4,QSESTAT+L'QSESTAT-QSEDSECT QSE LENGTH
         AR    R4,R6          ADD ONE BYTE FOR EACH JQE BLOCK
         AR    R4,R3          ADD ONE BYTE FOR EACH JOT BLOCK
         LA    R4,7(R4)       PREPARE TO ROUND
         N     R4,=F'-8'      ROUND TO MULTIPLE OF 8
         MH    R4,$QSENO      MULTIPLY LENGTH TIMES NUMBER OF QSES
         AGO   .NOLVL3        BRANCH AROUND LVL 3 CODE      *HMD 12/79*
.LVL3    ANOP                                               *HMD 12/79*
         LA    R4,QSELEN      QSE LENGTH                    *HMD 12/79*
         MH    R4,$QSENO      MULTIPLY LEN TIMES # QSES     *HMD 12/79*
         ALR   R4,R6          ADD ONE BYTE FOR EACH JQE BLK *HMD 12/79*
         ALR   R4,R3          ADD ONE BYTE FOR EACH JOT BLK *HMD 12/79*
.NOLVL3  ANOP                                               *HMD 12/79*
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R5,HASPACE+62  STORE IN DCB
         STH   R5,HDECB2+6    STORE IN DECB
         LA    R5,63(R5)      PREPARE TO ROUND
         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R14,R5         HASPACE BUFFER SIZE
         MH    R14,=H'3'      3 BUFFERS
         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS
         ST    R1,QCJOTL      STORE RECORD COUNT
         SLL   R1,12          MULTIPLY BY 4096
         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP
         ST    R0,QJQTLV      STORE LENGTH OF GETMAIN      *HMD 04/79*
         GETMAIN RU,LV=(0),BNDRY=PAGE,SP=1                 *HMD 04/79*
         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC
         AH    R1,=H'4096'    INCREMENT
         ST    R1,QCJQTA      BUFFER FOR JQE BLOCKS
         SLL   R6,12          MULTIPLY BY 4096
         AR    R1,R6          INCREMENT
         ST    R1,QCJOTA      BUFFER FOR JOE BLOCKS
         SLL   R3,12          MULTIPLY BY 4096
         AR    R1,R3          INCREMENT
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R5          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R5          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         LA    R1,$JQHEADS+2-$SAVEBEG OFFSET TO FIRST JQE HEADER
         A     R1,QCJQTL      BASE OF FIRST CKPT REC
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         LA    R3,$SAVEEND(R4) ADDR OF DA CKPT INFO
.EXIT    ANOP
         MVC   DA08DDN,=CL8'HASPACE' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNSPACE) DSNAME FOR ALLOCATE
         SR    R4,R4          ZERO R4
         IC    R4,$NUMDA      MAXIMUM NUMBER OF SPOOL VOLUMES
         LA    R7,QCDCBL      LENGTH OF HASPACE DCB
         MR    R6,R4          COMPUTE LENGTH OF DCB POOL
         ST    R7,QCDCBLV     SAVE LENGTH FOR FREEMAIN     *HMD 04/79*
         GETMAIN RU,LV=(R7),BNDRY=DBLWD,SP=1               *HMD 04/79*
         LR    R7,R1          SAVE ADDR OF DCB POOL
         ST    R7,QCDCBAD     SAVE ADDR FOR FREEMAIN       *HMD 04/79*
         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST
         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES
         MVC   DA08SER(5),$SPOOL PATTERN FOR VOLSER
SPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL
         CLI   0(R3),0        IS THIS VOLUME UNUSED?
         BE    SPOOL4         YES. TRY NEXT.
SPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?
         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.
         CLC   0(1,R5),0(R3)  IS THIS A MATCH?
         BE    SPOOL3         YES. GO WITH IT.
         LA    R5,12(R5)      NEXT TABLE ENTRY
         B     SPOOL2         TRY NEXT ENTRY
SPOOL3   MVC   150(2,R8),2(R5) MOVE TRK/CYL TO TRK/CYL LIST
         MVC   DA08UNIT,4(R5) MOVE UNIT NAME
         MVC   DA08SER+5(1),1(R3) LAST DIGIT OF VOLSER
         LA    R6,1(R6)       INCREASE COUNT BY ONE
         STC   R6,DA08DDN+7   UPDATE DDNAME
         OI    DA08DDN+7,X'F0' MAKE IT A VALID NUMBER
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL
         MVC   47(1,R7),DA08DDN+7 UPDATE THE DDNAME
         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST
         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB
         LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST
SPOOL4   LA    R3,6(R3)       NEXT VOLUME
         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.
         OI    0(R8),X'80'    INDICATE END OF OPEN LIST
         OPEN  MF=(E,QCSPOOLS) OPEN HASPACE
         AIF   (NOT &NJE).NJEXXY                            *HMD 11/80*
         MVC   QXONODE,$NODEID      MOVE IN OUR NODE NUMBER *HMD 11/80*
.NJEXXY  ANOP                                               *HMD 11/80*
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
         QSTOP
***********************************************************************
*                                                                     *
*   PROCESS REQUEST FOR DIFFERENT UNIT AND VOL ON SYS1.HASPCKPT       *
*                                                                     *
***********************************************************************
*
*** FORMAT - QUEUE CKPT(UNIT,VOLSER)
*
CKPT     MVC   DA08UNIT(16),QBLANK BLANK THE UNIT AND VOLSER FIELDS
         LA    R5,DA08UNIT    START OF UNIT FIELD
         LA    R6,DA08SER     START OF VOLSER FIELD
         SH    R3,=H'4'       SUBTRACT OVERHEAD FROM LENGTH
CKPT1    CLI   5(R1),C','     IS THIS THE END OF UNIT FIELD?
         BE    CKPT2          YES. PROCESS VOLSER NEXT.
         MVC   0(1,R5),5(R1)  MOVE ONE BYTE OF UNIT NAME
         LA    R5,1(R5)       ADD 1 TO RECEIVING ADDR
         LA    R1,1(R1)       ADD 1 TO SENDING ADDR
         BCT   R3,CKPT1       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETERS.
CKPT2    CLI   6(R1),C')'     IS THIS THE END OF VOLSER FIELD?
         BE    CKPT3          YES. CONTINUE PROCESSING.
         MVC   0(1,R6),6(R1)  MOVE ONE BYTE TO VOLSER
         LA    R6,1(R6)       ADD ONE TO RECEIVING ADDR
         LA    R1,1(R1)       ADD ONE TO SENDING ADDR
         BCT   R3,CKPT2       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETER.
CKPT3    CLI   DA08UNIT,C' '  IS THERE A UNIT?
         BE    ABORT2         NO. INVALID.
         CLI   DA08SER,C' '   IS THERE A VOLSER?
         BE    ABORT2         NO. INVALID.
         CLI   DA08BLK,0      DID WE GO TOO FAR?
         BE    SKIP           NO. EVERTHING LOOKS GOOD.
ABORT2   MVC   QDIOBUF,QBLANK BLANK IO BUFFER               *HMD 12/79*
         MVC   QDIOBUF(L'MESSAGE2),MESSAGE2 MOVE TO IO/BUFF *HMD 12/79*
         XC    IOECB,IOECB                                  *HMD 12/79*
         L     R15,QVPUTL     LOAD PUTLINE ADDRESS          *HMD 12/79*
         PUTLINE PARM=QDPTPB,OUTPUT=(QDOUTL,TERM,SINGLE,DATA),         X
               MF=(E,QDIOPL),ENTRY=(15)                     *HMD 12/79*
         ABEND 97,DUMP        QUIT
***********************************************************************
*                                                                     *
*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *
*                                                                     *
***********************************************************************
ABORT    MVC   QDIOBUF,QBLANK    CLEAR IO BUFFER            *HMD 12/79*
         MVC   QDIOBUF(L'MESSAGE),MESSAGE                   *HMD 12/79*
         XC    IOECB,IOECB       CLEAR ECB                  *HMD 12/79*
         L     R15,QVPUTL        LOAD PUTLINE ADDRESS       *HMD 12/79*
         PUTLINE PARM=QDPTPB,OUTPUT=(QDOUTL,TERM,SINGLE,DATA),         X
               MF=(E,QDIOPL),ENTRY=(15)                     *HMD 12/79*
         ABEND 98,DUMP           QUIT.
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
OCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE
MVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY
DEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME
         DC    X'0B00',H'30',CL8'3350'
         DC    X'0D00',H'19',CL8'3330-1'
         DC    X'FFFF'
         AIF   (&QLEVEL NE 3).NODC                          *HMD 12/79*
         DS    0F                                           *HMD 12/79*
TIR3     DC    X'00000300'                                  *HMD 12/79*
.NODC    ANOP                                               *HMD 12/79*
DSNCKPT  DC    H'13',CL44'SYS1.HASPCKPT'
DSNSPACE DC    H'12',CL44'SYS1.HASPACE'
MESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'
MESSAGE2 DC    C'INVALID PARAMETER SPECIFIED - CKPT(UNIT,VOLSER)'
         GBLC  &VERSION
&VERSION SETC  '0'
BASE1    EQU   0
$RPS     EQU   0
$MSGID   EQU   0
$DUPVOLT EQU   0
$PRIOOPT EQU   0
$PRTBOPT EQU   0
$PRTRANS EQU   0
$QSONDA  EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $QSE
         $HCT
         $IOT
         $TGM
         $JQE
         TITLE 'COMMAND PROCESSOR PARAMETER LIST (CPPL)'
         IKJCPPL
         TITLE 'PROTECTED STEP CONTROL BLOCK (PSCB) '
         IKJPSCB
         QCOMMON
         END
