$cmd clearsc
Introductory explanation of SAS libraries.

Consider the following set of SAS statements:

  data work.xyz; input name $ x y; cards;
    tom 1 2
    jan 3 4

The result of executing these statements would be that a SAS dataset
XYZ would be created as a member of the temporary library allocated
under the ddname, or filename, WORK.  This would be true even if I had
said "data xyz;" instead of "data work.xyz;" since the default library
name used by SAS is always WORK.

Whenever you invoke SAS, either in batch or under TSO, the WORK file is
allocated for you.  You could also explicitly allocate your own
temporary library as in the following example:

  tso alloc fi(mylib) new tr sp(2 1) reuse;
  data mylib.xyz;  input name $ x y; etc.....

The above TSO statement allocates a temporary SAS library under the
ddname MYLIB.  The "sp(2 1)" indicates how much space is allocated to
the library.  Two tracks are allocated initially, and 1 track is added
each time more is needed.  A track is an amount of disk space holding
a certain number of SAS dataset observations.  After executing a
SAS DATA step, if you look in the SAS log, it will tell you how many
observations of that size will fit on a track.

The trouble with temporary libraries such as WORK and MYLIB above is
that when you logoff TSO, they are deleted.  Once you've input a set
of data and carefully edited it, it would be nice to keep it around
so when you LOGON tomorrow, it will be there for use again.  You can
do this by storing your datasets in permanent SAS libraries.  The
following SAS statements will create a permanent SAS library called
SAS.DATA under your userid, and store member NAMES in it.

  tso alloc fi(mylib) da(sas.data) new tr sp(1 1) reuse;
  data mylib.names; input name $ x y; cards;
    tom 1 2
    jan 3 4

Tomorrow, when you logon to TSO, you can retrieve NAMES with SAS
statements like the following:

  tso alloc fi(mylib) da(sas.data) shr reuse;
  proc print data=mylib.names;

The keyword SHR on the above TSO statement is important.  It tells SAS
that you only want to read from the library.  If you try to update a
SAS library allocated SHR, you will receive a message like the
following:

  ERROR 223: DATASET CANNOT BE OPENED FOR UPDATE/OUTPUT MODE.

To write in an existing  permanent library, use OLD instead of SHR:

  tso alloc fi(mylib) da(sas.data) old reuse;
  data mylib.names; input name $ x y; cards;
    tom 5 6
    jan 7 8

The ability to control whether a SAS library can be written in by
using OLD or SHR is useful when debugging new SAS statements.
Consider the following:

  tso alloc fi(mylib) da(sas.data) old reuse;
  data selected
    set mylib.data;
    if mill=23;
  proc print;

The intent is to print only information related to mill 23, but because
of the missing semicolon after "data selected" the effect will be to
create SAS datasets WORK.SELECTED, WORK.SET, and MYLIB.DATA, all
containing zero observations.  If MYLIB.DATA contained any data you
wanted to keep, too bad. If SHR had been used on the TSO statement
instead of OLD, MYLIB.DATA would have been protected from such an
error.

$cmd clearsc 1
