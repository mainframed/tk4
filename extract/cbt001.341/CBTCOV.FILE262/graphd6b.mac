$cmd clearsc
$ start
First you'll see sample JCL to print a memo to multiple addressees
that will work, but is inefficient.  Later, a second sample will be
shown that is slightly more complex, but takes much less cpu time.

//X75826BU JOB (10-337-MISC-027-B4,1),
// 'SMITH-TCC',CLASS=E,MSGCLASS=1,NOTIFY=X75826
//S1 EXEC BULKMAIL,PARM='NICKNAM(SMITTY)'
//IN DD
//   DD *
$cmd setl nicklo Smitty
//TO DD *
Whomever, Anywhere
Rube Goldberg, Atlanta
George Washington, Mount Vernon
//TEXT DD DSN=X75826.MEMO.TEXT(BULKSAMP),DISP=SHR
//S2       EXEC BOOK3800,PITCH=10,EDGE=0,COPIES=1
//DOCIN    DD  DSN=&&MEMOS,DISP=(OLD,DELETE)
//         DD  DUMMY
//         DD  DUMMY
//ADMGDF   DD  DSN=X75826.ADMGDF,DISP=SHR

Following is a listing of X75826.MEMO.TEXT(BULKSAMP).

$cmd clearsc 1

$tso l 'x75826.memo.text(bulksamp)' nof nonum

$cmd clearsc 1

The above sample works,  but the graphic image produced by the
statement ".gg 1 1 40 71 segload tomhdr" in X75826.MEMO.TEXT(BULKSAMP)
will be regenerated once for each addressee.  A more efficient way
is to produce the image once, and then get it included in the memo
for each addressee with a .im statement instead of a .gg statement.

The initial job to produce the graphic image would look like the
following:

/*IWT 5
//X75826IN JOB (10-337-MISC-027-B4,1),
// 'SMITH-TCC',CLASS=E,MSGCLASS=1,NOTIFY=X75826
//S3       EXEC BOOK3800,PITCH=10,EDGE=0,COPIES=1
//DOCIN    DD  *
1
.gg 1 1 40 71 segload tomhdr
//         DD  DUMMY
//         DD  DUMMY
//IBM3800  DD  DSN=X75826.TOMHDR.IMAGE,DISP=(NEW,CATLG,DELETE),
//             UNIT=DISK,SPACE=(TRK,(1,1)),VOL=SER=GDRTS1,
//             DCB=(LRECL=2004,BLKSIZE=19000,RECFM=VBA)
//ADMGDF   DD  DSN=X75826.ADMGDF,DISP=SHR

Then, the .gg statement in 'X75826.MEMO.TEXT(BULKSAMP)' would be
replaced with  the statement -

.im memos

and the JCL to produce the
memos to all addressees would be changed by appending the following
JCL statement:

//MEMOS DD DSN=X75826.TOMHDR.IMAGE,DISP=SHR

$cmd clearsc 1
