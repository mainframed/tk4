         TITLE 'GDADSNQ:  SUBROUTINE TO QUALIFY DATASET NAMES'
*---------------------------------------------------------------------*
*                                                                     *
*   SUBROUTINE NAME:  GDADSNQ                                         *
*                                                                     *
*   FUNCTION:  TO QUALIFY DATASET NAMES                               *
*                                                                     *
*   ARGUMENTS:  NONE                                                  *
*                                                                     *
*   INPUT REGISTERS:                                                  *
*                                                                     *
*       R1  = A(DATASET NAME TO BE QUALIFIED)                         *
*       R11 = A(COMMON)                                               *
*       R13 = A(SAVE AREA)                                            *
*       R14 = A(RETURN)                                               *
*       R15 = A(ENTRY POINT)                                          *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*       1.   ON ENTRY, THE DATASET NAME POINTED TO BY R1 IS QUALIFIED *
*            AS FOLLOWS:                                              *
*                                                                     *
*            A:  IF THE DATASET NAME IS ENCLOSED IN QUOTES, THE       *
*                QUOTES ARE STRIPPED OFF                              *
*                                                                     *
*            B:  IF THE DATASET NAME IS NOT ENCLOSED IN QUOTES, THE   *
*                CALLER'S DATASET NAME PREFIX IS PREPENDED TO THE     *
*                DATASET NAME                                         *
*                                                                     *
*       2.   THE RESULT IS PLACED IN "DSNWORK" IN COMMON.             *
*                                                                     *
*       3.   IF A MEMBER NAME IS INCLUDED, IT IS PLACED IN "MEMBER"   *
*            IN COMMON.  OTHERWISE, "MEMBER" IS LEFT BLANK.           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER
*   AND ESTABLISH PROGRAM AND COMMON ADDRESSABILITY
*
GDADSNQ  CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDADSNQ,R12             PROGRAM ADDRESSABILITY
         USING COMMON,R11              COMMON ADDRESSABILITY
         LR    R3,R1                   R3<--A(DSNAME)
         MVI   DSNWORK,C' '            BLANK FILL ...
         MVC   DSNWORK+1(43),DSNWORK   ... THE DSNAME WORK AREA
         MVC   MEMBER(8),DSNWORK       ... AND THE MEMBER NAME
         CLI   0(R3),C'*'              DSNAME = * ?
         BNE   TESTQUOT                IF NOT, TEST FOR QUOTES
         MVI   DSNWORK,C'*'            PUT ASTERISK IN DSNWORK
         B     RETURN                  AND RETURN TO CALLER
TESTQUOT CLI   0(R3),C''''             DSNAME IN QOUTES ?
         BE    STRIP                   IF SO, STRIP THEM OFF
         SPACE 3
*
*   QUALIFY THE DSNAME BY INSERTING THE DSNAME PREFIX IN FRONT OF IT
*
QUALIFY  SLR   R1,R1                   R1<--0
         LA    R4,DSNWORK              R4<--A(DSNWORK)
         LA    R5,44(0)                R5<--MAX DSN LENGTH
         IC    R1,$PRFXLEN             R1<--L(PREFIX)
         LTR   R1,R1                   HOW LONG IS THE PREFIX ?
         BNP   QUALLOOP                IF NULL, BRANCH
         BCTR  R1,0                    DECREMENT LENGTH FOR MOVE
         EX    R1,MOVEPRFX             MOVE PREFIX TO DSNWORK
         LA    R1,1(R1)                RESTORE LENGTH OF PREFIX
         AR    R4,R1                   ADJUST DSNWORK POINTER
         MVI   0(R4),C'.'              INSERT A PERIOD
         LA    R4,1(R4)                SKIP OVER PERIOD
         SR    R5,R1                   ADJUST LENGTH FOR PREFIX ...
         BCTR  R5,0                    ... AND PERIOD
QUALLOOP CLI   0(R3),C' '              END OF DSNAME ?
         BE    QUALEND                 IF SO, BRANCH
         CLI   0(R3),C'('              START OF MEMBER NAME
         BE    MOVEMEM                 IF SO, GO PROCESS IT
         MVC   0(1,R4),0(R3)           ELSE, COPY IT TO DSNWORK
         LA    R4,1(R4)                POINT TO NEXT OUTPUT LOCATION
         LA    R3,1(R3)                POINT TO NEXT INPUT LOCATION
         BCT   R5,QUALLOOP             CONTINUE DSNAME TRANSFER
QUALEND  B     RETURN                  R3<--A(DSNAME IN LIST)
MOVEPRFX MVC   0(0,R4),$PREFIX         *** EXECUTE ONLY ***
         SPACE 3
*
*   STRIP THE DATASET NAME OF QUOTES
*
STRIP    LA    R3,1(R3)                SKIP LEADING QUOTE
         LA    R4,DSNWORK              R4<--A(DSNAME WORK AREA)
         LA    R5,44(0)                R5<--L(INPUT DSNAME)
STRPLOOP CLI   0(R3),C''''             END OF DSNAME YET ?
         BE    RETURN                  IF SO, SKIP IT
         CLI   0(R3),C'('              START OF MEMBER NAME ?
         BE    MOVEMEM                 IF SO, GO MOVE MEMBER NAME
         MVC   0(1,R4),0(R3)           ELSE, COPY DATA TO DSNWORK
         LA    R4,1(R4)                POINT TO NEXT OUTPUT AREA
         LA    R3,1(R3)                POINT TO NEXT INPUT AREA
         BCT   R5,STRPLOOP             CONTINUE DSNAME SCAN
         B     RETURN
         SPACE 3
*
*   COPY THE MEMBER NAME
*
MOVEMEM  LA    R4,MEMBER               R4<--A(MEMBER NAME OUTPUT AREA)
         LA    R5,8(0)                 R5<--MAX L(MEMBER NAME)
         LA    R3,1(R3)                SKIP OVER LEFT PAREN
MEMLOOP  CLI   0(R3),C')'              END OF MEMBER NAME ?
         BE    RETURN                  IF SO, RETURN
         MVC   0(1,R4),0(R3)           COPY BYTE TO MEMBER NAME
         LA    R3,1(R3)                POINT TO NEXT INPUT BYTE
         LA    R4,1(R4)                POINT TO NEXT OUTPUT BYTE
         BCT   R5,MEMLOOP              CONTINUE MEMBER NAME TRANSFER
         B     RETURN                  ALL DONE, EXIT
         SPACE 3
*
*   ALL PROCESSING COMPLETE.  ZIP AWAY.
*
RETURN   LM    R14,R12,12(R13)         RESTORE THE REGISTERS
         SLR   R15,R15                 CLEAR THE RETURN CODE
         BR    R14                     RETURN TO MOMMA
         LTORG
         EJECT
*
*   COMMON SAVE AREA DSECT
*
         DSECT
         $COMMON
         END   GDADSNQ
