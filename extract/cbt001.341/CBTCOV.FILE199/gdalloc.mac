         TITLE 'GDALLOC:  SUBROUTINE TO ALLOCATE AND CONCATENATE A SET X
               OF DATASETS'
*---------------------------------------------------------------------*
*                                                                     *
*   SUBROUTINE NAME:  GDALLOC                                         *
*                                                                     *
*   FUNCTION:  TO ALLOCATE A SET OF DATASETS AND CONCATENATE THEM     *
*   UNDER A SPECIFIED DDNAME.                                         *
*                                                                     *
*   CALLING ARGUMENTS:  NONE                                          *
*                                                                     *
*   ENTRY REGISTERS:                                                  *
*                                                                     *
*       R11 = A(COMMON)                                               *
*       R13 = A(SAVE AREA)                                            *
*       R14 = A(RETURN)                                               *
*       R15 = A(ENTRY POINT)                                          *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*       1.  IF THE NUMBER OF DATASETS TO BE ALLOCATED IS ZERO,        *
*           CONTROL IS RETURNED TO THE CALLING PROGRAM.  OTHERWISE,   *
*                                                                     *
*       2.  THE INDICATED DDNAME IS DEALLOCATED.                      *
*                                                                     *
*       3.  EACH DATASET TO BE ALLOCATED IS DYNAMICALLY ALLOCATED.    *
*           FOR THE FIRST DATASET IN THE LIST, THE SPECIFIED DDNAME   *
*           IS USED.  FOR THE OTHER DATASETS IN THE LIST, THE DDNAME  *
*           RETURN FUNCTION IS REQUESTED.                             *
*                                                                     *
*       4.  IF THE NUMBER OF DATASETS ALLOCATED IS GREATER THAN 1,    *
*           THE INDICATED DDNAMES ARE CONCATENATED.                   *
*                                                                     *
*       5.  CONTROL IS RETURNED TO THE CALLING PROGRAM.               *
*                                                                     *
*       6.  IF ANY SPECIFIC DATASET ALLOCATION FAILS, THE NAME OF     *
*           THE DATASET AND THE VOLSER IT RESIDES ON (IF SUPPLIED),   *
*           PLUS THE DAIR RETURN CODE, ERROR CODE AND REASON CODE,    *
*           ARE DISPLAYED, AND CONTROL IS RETURNED TO THE CALLING     *
*           PROGRAM.                                                  *
*                                                                     *
*       7.  IF THE CONCATENATION FAILS, THE DDNAMES AND DATASET       *
*           NAMES INVOLVED, ALONG WITH THE DAIR RETURN CODE, ERROR    *
*           CODE AND REASON CODE, ARE DISPLAYED AND CONTROL IS        *
*           RETURNED TO THE CALLING PROGRAM.                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER,
*   ESTABLISH PROGRAM AND COMMON ADDRESSABILITY AND CHAIN THE SAVE
*   AREAS
*
GDALLOC  CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDALLOC,R12             PROGRAM ADDRESSABILITY
         USING COMMON,R11              COMMON ADDRESSABILITY
         LR    R3,R13                  R3<--A(CALLER'S SAVE AREA)
         LA    R13,72(R13)             R13<--A(MY SAVE AREA)
         ST    R3,4(R13)               FORWARD CHAIN SAVE AREAS
         ST    R13,8(R3)               REVERSE CHAIN SAVE AREAS
         L     R10,$DSN#               R10<--# DATASETS IN LIST
         LA    R2,$DSNLIST             R2<--A(DATASET LIST)
         USING $DDN1,R2                ADDRESSABILITY TO IT
         LTR   R10,R10                 HOW MANY DATASETS ?
         BNP   RETURN                  IF NONE, RETURN
         SPACE 3
*
*   FREE THE SPECIFIED DDNAME
*
         MVC   DA1DDNAM(8),$DDN1       COPY DDNAME INTO DAIR BLOCK
         LA    R1,DA1                  R1<--A(DAIR BLOCK)
SVCDA1   SVC   99                      DEALLOCATE THE DDNAME
         EJECT
*
*   FOR EACH DSNAME IN THE LIST, ALLOCATE THE DATASET.  FOR THE
*   FIRST DATASET, USE THE SPECIFIED DDNAME.  FOR ALL THE OTHERS,
*   REQUEST THAT DAIR ASSIGN THE DDNAME.
*
         MVI   ERRFLG,X'00'            RESET ERROR FLAG
         LA    R2,$DSNLIST             R2<--A(1-ST DSN ENTRY)
         MVC   DA2DDN(2),=XL2'0001'    USE DDNAME SUPPLIED
DSNLOOP  MVC   DA2DSNAM(44),$DSN1      PUT DSNAME INTO DAIR BLOCK
         MVC   DA2DDNAM(8),$DDN1       COPY IN DDNAME
         MVC   DA2MEMBE(8),$MEM1       COPY IN MEMBER NAME
         MVC   DA2VOLSE(6),$VOL1       COPY IN VOLSER
         MVC   VOLWORK(6),$VOL1        COPY VOLSER TO WORK AREA
         SPACE 3
*
*   BUILD A TEXT UNIT POINTER LIST IN WORK256A
*
         LA    R15,TUPL                R15<--A(TEXT UNIT POINTER LIST)
         ST    R15,DA2INFO+2           SAVE ITS ADDRESS IN DA2
         LA    R1,DA2DDN               R1<--A(DDNAME TEXT UNIT)
         ST    R1,0(R15)               SAVE ITS ADDRESS IN TUPL
         LA    R1,DA2DSN               R1<--A(DSNAME TEXT UNIT)
         ST    R1,4(R15)               SAVE ITS ADDRESS IN TUPL
         LA    R1,DA2PERM              R1<--A(PERM ALLOC TEXT UNIT)
         ST    R1,8(R15)               SAVE ITS ADDRESS IN TUPL
         LA    R1,DA2SHR               R1<--A(DISP=SHR TEXT UNIT)
         ST    R1,12(R15)              SAVE ITS ADDRESS IN TUPL
         LA    R15,12(R15)             R15<--A(LAST ENTRY)
         MVI   0(R15),X'80'            TURN ON END-OF-LIST FLAG
         CLI   $MEM1,C' '              WAS A MEMBER NAME SUPPLIED ?
         BE    TESTVOL1                IF NOT, BRANCH
         MVI   0(R15),X'00'            TURN OFF END-OF-LIST FLAG
         LA    R15,4(R15)              R15<--A(NEXT TUPL ENTRY)
         LA    R1,DA2MEM               R1<--A(MEMBER NAME TEXT UNIT)
         ST    R1,0(R15)               SAVE IT IN TUPL
         MVI   0(R15),X'80'            TURN ON END-OF-LIST FLAG
TESTVOL1 CLI   $VOL1,C' '              WAS A VOLSER SUPPLIED ?
         BE    DSNDOIT                 IF NOT, BRANCH
         MVI   0(R15),X'00'            TURN OFF END-OF-LIST FLAG
         LA    R15,4(R15)              R15<--A(NEXT TUPL ENTRY)
         LA    R1,DA2VOL               R1<--A(VOLSER TEXT UNIT)
         ST    R1,0(R15)               SAVE ITS ADDRESS IN TUPL
         LA    R1,DA2UNIT              R1<--A(UNIT=SYSDA TEXT UNIT)
         ST    R1,4(R15)               SAVE ITS ADDRESS IN TUPL
         MVI   4(R15),X'80'            TURN ON END-OF-LIST FLAG
         SPACE 3
*
*   ALLOCATE THE DATASET.
*
DSNDOIT  LA    R1,DA2                  R1<--A(DA2)
SVCDA2   SVC   99                      ALLOCATE THE DATASET
         LTR   R15,R15                 HOW DID IT TURN OUT ?
         BNZ   ERROR1                  IF IT FAILED, BRANCH
SAVEDDN  MVC   $DDN1(8),DA2DDNAM       SAVE RETURNED DDNAME
         LA    R2,$NEXT                R2<--A(NEXT DSNAME BLOCK)
         MVC   DA2DDN(2),=XL2'0055'    RETURN DDNAME
         BCT   R10,DSNLOOP             DO THIS FOR ALL DATASETS IN LIST
         TM    ERRFLG,X'80'            WAS AN ERROR ENCOUNTERED ?
         BZ    CONC                    IF NOT, GO CONC. THE DDNAMES
         SPACE 3
*
*   AT LEAST ONE OF THE DATASETS IN THE LIST COULD NOT BE ALLOCATED.
*   FREE ALL THE DDNAMES IN THE LIST AND EXIT.
*
FREEDDN  LA    R2,$DSNLIST             R2<--A(1-ST DATASET IN LIST)
         L     R10,$DSN#               R10<--# OF DATASETS
         MVC   MSG3DDN(8),$DDN1        COPY IN DDNAME
FREEDDNA MVC   DA1DDNAM(8),$DDN1       COPY IN DDNAME
         LA    R1,DA1                  R1<--A(DA1 RB POINTER)
         SVC   99                      FREE THE DDNAME
         LA    R2,$NEXT                R2<--A(NEXT DSNLIST ENTRY)
         BCT   R10,FREEDDNA            DO IT FOR THE ENTIRE LIST
         TPUT  MSG3,L'MSG3             DISPLAY MESSAGE 3
         B     RETURN                  THEN GIVE UP
         SPACE 3
*
*   CONCATENATE ALL THE DDNAMES
*
CONC     L     R10,$DSN#               R10<--# OF DATASETS
         STH   R10,DA3DDN#             SAVE COUNT IN DAIR BLOCK
         C     R10,=F'1'               GREATER THAN 1 ?
         BNH   RETURN                  IF NOT, RETURN
         LA    R2,$DSNLIST             R2<--A(1-ST DATASET IN LIST)
         LA    R3,DA3DDN1              R3<--A(DDNAME LIST AREA)
DDNLOOP  MVC   0(2,R3),=H'8'           SET THE LENGTH
         MVC   2(8,R3),$DDN1           COPY IN THE DDNAME
         LA    R2,$NEXT                R2<--A(NEXT DATASET ENTRY)
         LA    R3,10(R3)               R3<--A(NEXT DDNAME AREA)
         BCT   R10,DDNLOOP             DO IT FOR ALL DDNAMES
         LA    R1,DA3                  R1<--A(DA3 DAIR BLOCK)
SVCDA3   SVC   99                      CONCATENATE THE DATASETS
         LTR   R15,R15                 DID IT WORK ?
         BNZ   ERROR2                  IF NOT, FIND OUT WHY
         B     RETURN                  ALL DONE, GO HOME
         SPACE 3
*
*   ERROR1:  ERROR ALLOCATING A DATASET.  R2<--A(DATASET ENTRY)
*
ERROR1   LA    R1,MSG2RC               R1<--A(RETURN CODE DISPLAY AREA)
         BAL   R9,HEXCONV              CONVERT RETURN CODE
         LA    R1,MSG2ERR              R1<--A(ERROR CODE DISPLAY AREA)
         LH    R15,DA2ERROR            R15<--ERROR CODE
         BAL   R9,HEXCONV              CONVERT ERROR CODE
         LA    R1,MSG2INFO             R1<--A(INFO CODE DISPLAY AREA)
         LH    R15,DA2INFO             R15<--INFO CODE
         BAL   R9,HEXCONV              CONVERT INFO CODE
         MVI   MSG1DSN,C' '            BLANK FILL VARIABLE PART ...
         MVC   MSG1DSN+1(60),MSG1DSN   ... OF MESSAGE TEXT
         MVC   MSG1DSN(44),$DSN1       COPY DSNAME INTO ERROR MESSAGE
         LA    R1,MSG1DSN              R1<--A(DSNAME IN MESSAGE TEXT)
         LA    R15,44(0)               R15<--L(DSNAME IN MESSAGE TEXT)
         BAL   R9,FINDEND              FIND THE END OF THE TEXT
         CLI   $MEM1,C' '              WAS A MEMBER NAME SPECIFIED ?
         BE    ERR1A                   IF NOT, SKIP MEMBER NAME INSERT
         MVI   1(R1),C'('              ADD LEFT PARENTHESIS
         MVC   2(8,R1),$MEM1           INSERT MEMBER NAME
         LA    R1,2(R1)                R1<--A(START OF MEMBER NAME)
         LA    R15,8(0)                R15<--L(MEMBER NAME)
         BAL   R9,FINDEND              FIND END OF MEMBER NAME
         MVI   1(R1),C')'              ADD RIGHT PARENTHESIS
         LA    R1,1(R1)                R1<--A(LAST BYTE IN TEXT SO FAR
ERR1A    MVI   1(R1),C' '              INSERT A BLANK
         LA    R1,2(R1)                R1<--A(VOLSER DISPLAY AREA)
         CLI   $VOL1,C' '              WAS A VOLSER SUPPLIED ?
         BE    ERR1B                   IF NOT, SKIP IT
         MVC   0(6,R1),$VOL1           INSERT VOLSER
ERR1B    TPUT  MSG1,L'MSG1             DISPLAY 1-ST ERROR MESSAGE
         TPUT  MSG2,L'MSG2             DISPLAY 2-ND ERROR MESSAGE
         OI    ERRFLG,X'80'            TURN ON ERROR FLAG
         B     SAVEDDN                 CONTINUE PROCESSING THE LIST
         SPACE 3
*
*   ERROR2:  ERROR CONCATENATING THE DDNAMES.
*
ERROR2   LA    R1,MSG2RC               R1<--A(RETURN CODE DISPLAY AREA)
         BAL   R9,HEXCONV              CONVERT RETURN CODE
         LA    R1,MSG2ERR              R1<--A(ERROR CODE DISPLAY AREA)
         LH    R15,DA2ERROR            R15<--ERROR CODE
         BAL   R9,HEXCONV              CONVERT ERROR CODE
         LA    R1,MSG2INFO             R1<--A(INFO CODE DISPLAY AREA)
         LH    R15,DA2INFO             R15<--INFO CODE
         BAL   R9,HEXCONV              CONVERT INFO CODE
         L     R10,$DSN#               R10<--# OF DSNAMES IN LIST
         LA    R2,$DSNLIST             R2<--A(1-ST DSN IN LIST)
         MVC   MSG3DDN(8),$DDN1        COPY IN LEADING DDNAME
         TPUT  MSG3,L'MSG3             DISPLAY ERROR MESSAGE
         TPUT  MSG2,L'MSG2             DISPLAY DAIR STATUS INFO
ERR2LOOP MVC   MSG4DDN(8),$DDN1        COPY IN DDNAME
         MVC   MSG4DSN(44),$DSN1       COPY IN DATASET NAME
         TPUT  MSG4,L'MSG4             DISPLAY DDNAME AND DATASET NAME
         LA    R2,$NEXT                POINT TO NEXT LIST ENTRY
         BCT   R10,ERR2LOOP            DO IT AGAIN
         B     RETURN                  GIVE UP TRYING
         SPACE 3
*
*   RETURN TO THE CALLING PROGRAM
*
RETURN   L     R13,4(R13)              RESTORE R13
         LM    R14,R12,12(R13)         RESTORE THE OTHER REGISTERS
         SLR   R15,R15                 CLEAR THE RETURN CODE
         BR    R14                     RETURN TO CALLER
         SPACE 3
*
*   HEXCONV:  CONVERT THE LOW-ORDER 2 BYTES OF R15 TO HEXADECIMAL
*   AND PLACE THE OUTPUT IN THE LOCATION POINTED TO BY R1.
*
HEXCONV  SLL   R15,16                  LEFT-JUSTIFY DATA
         SLR   R14,R14                 CLEAR R14
         SLDL  R14,4                   FETCH A HEX DIGIT
         STC   R14,0(R1)               STORE IT IN OUTPUT AREA
         SLR   R14,R14                 CLEAR R14
         SLDL  R14,4                   FETCH A HEX DIGIT
         STC   R14,1(R1)               STORE IT IN OUTPUT AREA
         SLR   R14,R14                 CLEAR R14
         SLDL  R14,4                   FETCH A HEX DIGIT
         STC   R14,2(R1)               STORE IT IN OUTPUT AREA
         SLR   R14,R14                 CLEAR R14
         SLDL  R14,4                   FETCH A HEX DIGIT
         STC   R14,3(R1)               STORE IT IN OUTPUT AREA
         TR    0(4,R1),=C'0123456789ABCDEF'  MAKE IT PRINTABLE
         BR    R9                      RETURN TO CALLER
         SPACE 3
*
*   FINDEND:  LOCAL SUBROUTINE TO FIND THE LAST NON-BLANK CHARACTER
*   IN A CHARACTER STRING.
*   ON ENTRY:  R1<--A(STRING),   R15<--L(STRING),   R9<--A(RETURN)
*   ON RETURN:  R1<--A(LAST NON-BLANK CHARACTER IN STRING)
*
FINDEND  AR    R1,R15                  R1<--A(1-ST BYTE PAST STRING)
         BCTR  R1,0                    R1<--A(LAST BYTE IN STRING)
FINDENDA CLI   0(R1),C' '              IS THIS BYTE A BLANK ?
         BNER  R9                      IF SO, RETURN
         BCTR  R1,0                    R1<--A(PREVIOUS BYTE)
         BCT   R15,FINDENDA            CONTINUE PROCESSING
         LA    R1,1(R1)                STRING IS ALL BLANK.  RETURN
         BR    R9                      WITH R1<--A(ORIGIN OF STRING)
         LTORG
         EJECT
*
*   COMMON AREA DSECT
*
         DSECT
         $COMMON
         EJECT
*
*   LIST ELEMENT MAPPING DSECT
*
         DSECT
         $DSN
         END   GDALLOC
