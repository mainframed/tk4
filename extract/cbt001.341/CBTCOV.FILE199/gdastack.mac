         TITLE 'GDASTACK:  COMMAND STACKING SUBROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*   SUBROUTINE NAME:  GDASTACK                                        *
*                                                                     *
*   FUNCTION:  TO STACK A COMMAND IN THE TSO COMMAND INPUT STACK      *
*                                                                     *
*   OPERATION:                                                        *
*                                                                     *
*      ON INPUT, REGISTER 1 POINTS TO THE COMMAND TO BE STACKED, AND  *
*   REGISTER 0 CONTAINS ITS LENGTH.  IF REGISTER 0 IS NON-ZERO, AN    *
*   AREA IS GETMAIN-ED TO HOLD THE COMMAND AND A 4-BYTE CHAIN POINTER,*
*   THE THIS AREA IS CHAINED OFF OF "QORG" IN COMMON.  IF R0 = 0,     *
*   THE QUEUE OF COMMANDS THUS CREATED IS READ AND EACH COMMAND IS    *
*   INSERTED INTO THE TSO COMMAND INPUT STACK.  THE QUEUE OF COMMANDS *
*   CREATED BY THIS ROUTINE IS A PUSH-DOWN STACK, SO THAT WHEN THE    *
*   QUEUE IS READ AND THE COMMANDS IN IT INSERTED INTO THE TSO        *
*   COMMAND STACK, THEY WILL GO INTO THE STACK IN REVERSE ORDER.      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER,
*   ESTABLISH PROGRAM AND COMMON ADDRESSABILITY AND FORWARD AND REVERSE
*   CHAIN THE SAVE AREAS.
*
GDASTACK CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDASTACK,R12            PROGRAM ADDRESSABILITY
         USING COMMON,R11              COMMON ADDRESSABILITY
         LR    R3,R13                  R3<--A(CALLER'S SAVE AREA)
         LA    R13,72(R13)             R13<--A(MY SAVE AREA)
         ST    R3,4(R13)               FORWARD CHAIN THE SAVE AREAS
         ST    R13,8(R3)               REVERSE CHAIN THE SAVE AREAS
         LTR   R0,R0                   IS LENGTH ZERO ?
         BNZ   QUEUE                   IF NOT, GO QUEUE THE COMMAND
         SPACE 3
*
*   R0 = 0.  DEQUEUE AND STACK ALL THE COMMAND IN THE QUEUE.  SAVE THE
*   HIGHEST RETURN CODE IN R15.
*
DEQUEUE  L     R2,ACPPL                R2<--A(CPPL)
         USING CPPL,R2                 ADDRESSABILITY TO IT
         L     R9,QORG                 R9<--A(QUEUE ELEMENT)
NEXTQ    LTR   R9,R9                   NONE THERE ?
         BZ    ENDDQ                   IF SO, BRANCH
         L     R8,4(R9)                R8<--L(COMMAND)
         LA    R9,8(R9)                R9<--A(COMMAND)
         SPACE 3
*
*   SET UP THE UPT AND ECT ADDRESSES
*
         L     R3,CPPLUPT              R3<--A(UPT)
         L     R4,CPPLECT              R4<--A(ECT)
         SPACE 3
*
*   GETMAIN AN AREA FROM SUBPOOL 78 FOR THE LSD AND IN-STORAGE LIST
*
         LA    R10,4(R8)               R10<--L(IN-STORAGE LIST)
         LA    R10,16(R10)             MAKE ROOM FOR LSD
         LA    R10,7(R10)              ROUND UP ...
         SRL   R10,3                   ... TO A MULTIPLE
         SLL   R10,3                   ... OF EIGHT
         GETMAIN R,LV=(10),SP=78       GETMAIN SOME STORAGE
         SPACE 3
*
*   INITIALIZE THE LSD AND IN-STORAGE LIST AREA
*
         LA    R5,0(R1)                R5<--A(LSD STORAGE)
         LA    R6,16(R1)               R6<--A(LIST STORAGE)
         XC    0(16,R5),0(R5)          ZERO IT OUT
         XC    0(4,R6),0(R6)           ZERO OUT RDW IN STORAGE LIST
         LA    R10,4(R8)               R10<--L(IN-STORAGE LIST)
         STH   R10,6(R5)               SAVE LENGTH IN LSDTOTLN
         ST    R6,0(R5)                SAVE ADDR IN LSDADATA
         ST    R6,8(R5)                SAVE ADDR IN LSDANEXT
         STH   R10,0(R6)               SAVE LENGTH IN STORAGE AREA
         BCTR  R8,0                    DECREMENT L(DATA) FOR MVC INSTR
         EX    R8,MOVER                MOVE DATA TO LIST
         SPACE 3
*
*   ISSUE THE STACK MACRO
*
TRAP     XC    WORK256A(20),WORK256A   ZERO STORAGE FOR ECB AND IOPL
         LA    R6,WORK256A             R6<--A(ECB)
         LA    R1,WORK256A+4           R1<--A(IOPL)
         STACK PARM=STCKLST,UPT=(3),ECT=(4),ECB=(6),                   X
               STORAGE=((5),PROCN),MF=(E,(1))
         S     R9,=F'8'                R9<--A(QUEUE ELEMENT)
         L     R8,4(R9)                R8<--L(COMMAND)
         LA    R8,8(R8)                R8<--L(QUEUE ELEMENT)
         L     R15,0(R9)               R15<--A(NEXT ELEMENT)
         ST    R15,WORK256A            SAVE IT FOR AWHILE
         FREEMAIN R,LV=(8),A=(9)       FREEMAIN THE QUEUE ELEMENT
         L     R9,WORK256A             R9<--A(NEXT QUEUE ELEMENT)
         B     NEXTQ                   GO PROCESS NEXT QUEUE ELEMENT
ENDDQ    XC    QORG(4),QORG            CLEAR THE Q ORIGIN POINTER
         SLR   R15,R15                 R15<--0
         B     RETURN                  AND RETURN TO CALLER
         SPACE 3
*
*   R0 ^= 0.  R1 POINTS TO A COMMAND TO BE QUEUED FOR SUBSEQUENT
*   STACKING, AND R0 CONTAINS ITS LENGTH.
*
QUEUE    LR    R3,R1                   R3<--A(COMMAND)
         LR    R4,R0                   R4<--L(COMMAND)
         LA    R2,8(R4)                R2<--L(COMMAND)+4
         GETMAIN R,LV=(2)              GETMAIN STORAGE FOR COMMAND
         ST    R4,4(R1)                SAVE L(CMD) IN QUEUE ELEMENT
         BCTR  R4,0                    R4<--L(COMMAND)-1
         EX    R4,QMOVE                MOVE COMMAND INTO STORAGE
         L     R15,QORG                R15<--A(LAST ELEMENT QUEUED)
         ST    R15,0(R1)               CHAIN IT TO THIS ELEMENT
         ST    R1,QORG                 AND CHAIN THIS ONE TO COMMON
         SLR   R15,R15                 R15<--0
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   RETURN TO THE CALLING PROGRAM WITH THE RETURN CODE IN R15.
*
RETURN   L     R13,4(R13)              RESTORE R13
         ST    R15,16(R13)             SAVE THE RETURN CODE
         LM    R14,R12,12(R13)         RESTORE THE OTHER REGISTERS
         BR    R14                     RETURN TO CALLER
MOVER    MVC   4(0,R6),0(R9)           *** EXECUTE ONLY ***
QMOVE    MVC   8(0,R1),0(R3)           *** EXECUTE ONLY ***
         LTORG
         EJECT
*
*   COMMON STORAGE AREA DSECT
*
         DSECT
         $COMMON
         EJECT
*
*   COMMAN PROCESSOR PARAMETER LIST MAPPING MACRO
*
         DSECT
         IKJCPPL
         END   GDASTACK
