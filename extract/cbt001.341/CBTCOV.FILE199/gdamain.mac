         TITLE 'GDAMAIN:  MAIN PROGRAM OF THE GENERALIZED DATASET ALLOCX
               ATOR'
*---------------------------------------------------------------------*
*                                                                     *
*   PROGRAM NAME:  GDAMAIN                                            *
*                                                                     *
*   TYPE:   TSO COMMMAND PROCESSOR                                    *
*                                                                     *
*   FUNCTION:  TO DYNAMICALLY ALLOCATE A SET OF DATASETS, ACCORDING   *
*   TO SPECIFICATIONS IN THE USER'S "USERID.GDA.DATA" DATASET OR THE  *
*   DATASET SPECIFIED IN THE COMMAND BUFFER.                          *
*                                                                     *
*   OPERATION:                                                        *
*                                                                     *
*       1.  THE COMMAND BUFFER IS EXAMINED TO SEE IF A DATASET WAS    *
*       SPECIFIED.  IF SO, THE DATASET NAME IS FETCHED, AND PREPENDED *
*       WITH THE USER'S DATASET NAME PREFIX, IF REQUIRED, AND ANY     *
*       MEMBER NAME SPECIFIED IS ALSO SAVED.                          *
*                                                                     *
*       2.   IF THE COMMAND BUFFER DOES NOT CONTAIN A DATASET NAME,   *
*       OR, IF THE DATASET SPECIFIED IS AN ASTERISK (*), A DATASET    *
*       NAME IS BUILT OF THE FORM "PREFIX.GDA.DATA".                  *
*                                                                     *
*       3.  THE SPECIFIED (OR DEFAULT) DATASET IS ALLOCATED.  IF THE  *
*       ALLOCATION FAILS FOR ANY REASON, PROGRAM EXECUTION CONTINUES  *
*       AS FOLLOWS:                                                   *
*                                                                     *
*           A.  IF THE USER SPECIFIED A DATASET NAME OF ASTERISK (*), *
*           AND IF THE FAILING ALLOCATION WAS FOR THE USER'S          *
*           "PREFIX.GDA.DATA" DATASET, THE COMMON CONTROL INPUT       *
*           DATASET IS TRIED.                                         *
*                                                                     *
*           B.  IN ALL OTHER CASES, PROGRAM EXECUTION IS TERMINATED.  *
*           NO ERROR MESSAGE IS DISPLAYED.                            *
*                                                                     *
*       4.  THE DATASET IS OPENED AND READ.  FOUR TYPES OF RECORDS    *
*       ARE RECOGNIZED.  THOSE BEGINNING WITH AN ASTERISK (*) IN      *
*       COLUMN 1 ARE TAKEN TO BE COMMENTS AND ARE IGNORED.  THOSE     *
*       BEGINNING WITH A PERIOD ARE TAKEN TO BE DISPLAY REQUESTS,     *
*       AND THE FOLLOWING TEXT IS DISPLAYED AT THE TERIMNAL.  THOSE   *
*       BEGINNING WITH A "GREATER THAN" (>) ARE TAKEN TO BE TSO       *
*       COMMANDS, AND ALL SUCH COMMANDS ARE INSERTED INTO THE TSO     *
*       COMMAND INPUT STACK, IN REVERSE ORDER, TO BE EXECUTED WHEN    *
*       GDA EXECUTION COMPLETES.  ALL OTHER RECORDS ARE TAKEN TO BE   *
*       ALLOCATION REQUESTS OF THE FORM "DDNAME DSNAME VOLSER", WHERE *
*       THE DDNAME, IF PRESENT, MUST BEGIN IN COLUMN 1.               *
*                                                                     *
*   ATTRIBUTES:  RE-ENTRANT, REFRESHABLE, REUSEABLE                   *
*                                                                     *
*   ANY QUESTIONS OR COMMENTS REGARDING THIS PROGRAM SHOULD BE        *
*   DIRECTED TO:                                                      *
*                                                                     *
*                U. S. DEPARTMENT OF ENERGY                           *
*                ATTN:  B. H. AUDET                                   *
*                MA-621                                               *
*                CA-111, GTN.                                         *
*                WASHINGTON, D. C.  20545                             *
*                TELEPHONE: (301)-353-4603                            *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER,
*   ESTABLISH PROGRAM ADDRESSABILITY, GETMAIN A SAVE AREA STACK, CALL
*   GDACINIT TO GETMAIN AND INITIALIZE THE COMMON AREA.
*
GDAMAIN  CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDAMAIN,R12             PROGRAM ADDRESSABILITY
         LR    R3,R13                  R3<--A(CALLER'S SAVE AREA)
         LR    R4,R1                   HOLD ORIGINAL R1 FOR AWHILE
         LA    R0,X'29'(0)             R0<--X'29' (DONTSWAP SYSEVENT)
         SLR   R1,R1                   R1<--0
         SVC   95                      ISSUE DONTSWAP SYSEVENT
         GETMAIN R,LV=SAVELEN          GETMAIN A SAVE AREA STACK
         LR    R13,R1                  R13<--A(SAVE AREA STACK)
         ST    R3,4(R13)               FORWARD CHAIN SAVE AREAS
         ST    R13,8(R3)               REVERSE CHAIN SAVE AREAS
         L     R15,=V(GDACINIT)        R15<--V(GDACINIT)
         BALR  R14,R15                 GO INITIALIZE COMMON AREA
         USING COMMON,R11              ADDRESSABILITY TO COMMON
         ST    R4,ACPPL                SAVE A(CPPL) IN COMMON
         SPACE 3
*
*   FIND THE USER'S DATASET NAME PREFIX
*
         MVI   $PRFXLEN,X'00'          MARK NO PREFIX SO FAR
         LA    R1,16(0)                R1<--A(CVT POINTER)
         L     R1,0(R1)                R1<--A(CVT)
         L     R1,0(R1)                R1<--A(CVTTCBP)
         L     R1,0(R1)                R1<--A(TCB)
         L     R1,180(R1)              R1<--A(JSCB)
         L     R1,264(R1)              R1<--A(PSCB)
         L     R1,52(R1)               R1<--A(UPT)
         SLR   R0,R0                   R0<--0
         IC    R0,23(R1)               R0<--L(DSNAME PREFIX)
         STC   R0,$PRFXLEN             SAVE IT
         MVC   $PREFIX(7),16(R1)       FETCH DSNAME PREFIX
         SPACE 3
*
*   SEARCH THE COMMAND BUFFER FOR A DATASET NAME.
*
         L     R1,0(R4)                R1<--A(CMD BUFFER PREFIX)
         LH    R0,0(R1)                R0<--L(CMD BUFFER + PREFIX)
         S     R0,=F'4'                R0<--L(CMD BUFFER)
         LA    R1,4(R1)                R1<--A(CMD BUFFER)
         LR    R14,R0                  R14<--L(CMD BUFFER)
         LR    R15,R1                  R15<--A(CMD BUFFER)
CMDFOLD  OI    0(R15),X'40'            SHIFT TO UPPER CASE
         LA    R15,1(R15)              R15<--A(NEXT BYTE IN CMD BUFFER)
         BCT   R14,CMDFOLD             CONTINUE FOLDING TO UPPER CASE
         L     R15,=V(GDARPARS)        R15<--V(RECORD PARSE ROUTINE)
         BALR  R14,R15                 GO PARSE COMMAND BUFFER
         MVI   WORK256B,X'00'          SET RETRY COUNT = 0
         LTR   R15,R15                 WAS A DSNAME FOUND ?
         BNZ   FINDUSER                IF NOT, TRY TO FIND USER DATASET
         SPACE 3
*
*   THE USER SPECIFIED A DATASET NAME ON THE GDA COMMAND.  IF IT IS
*   AN ASTERISK (*), USE THE SYSTEM DEFAULT DATASET NAME.
*
TESTSTAR L     R1,ADSN                 R1<--A(DSNAME)
         CLI   0(R1),C'*'              IS IT AN ASTERISK ?
         BNE   STARNO                  IF NOT, ASSUME IT'S A DSNAME
STARYES  MVI   WORK256B,X'01'          SET RETRY COUNT TO 1
         B     FINDUSER                THEN TRY USER'S GDA.DATA D.S.
STARNO   MVI   WORK256B,X'00'          SET RETRY COUNT TO 0
         B     PARSUSER                PARSE USER-SPECIFIED DSNAME
         SPACE 3
*
*   SEARCH FOR A DATASET CALLED 'USERID.GDA.DATA'
*
FINDUSER LA    R2,DA2DSNAM             R2<--A(DSNAME STORAGE IN DA2)
         SLR   R15,R15                 R15<--0
         IC    R15,$PRFXLEN            R15<--L(PREFIX)
         LTR   R15,R15                 NULL PREFIX ?
         BNP   NULLPRFX                IF NULL, BRANCH
         MVI   0(R2),C' '              BLANK FILL ...
         MVC   1(43,R2),0(R2)          ... THE DSNAME IN DA2
         BCTR  R15,0                   ADJUST LENGTH FOR MVC INSTR
         LA    R1,$PREFIX              R1<--A(PREFIX)
         EX    R15,MOVER               MOVE PREFIX INTO DSNAME
         AR    R2,R15                  ADJUST FOR LENGTH OF PREFIX
         MVI   1(R2),C'.'              INSERT A PERIOD
         LA    R2,2(R2)                ADJUST DSNAME POINTER
NULLPRFX LA    R1,USERSUFX             R1<--A(USER DSN SUFFIX)
         SLR   R15,R15                 R15<--0
         IC    R15,LUSRSUFX            R15<--L(USER DSN SUFFIX)
         EX    R15,MOVER               COPY SUFFIX INTO DSNAME
         MVI   MEMBER,C' '             INDICATE NO MEMBER NAME FOUND
         SPACE 3
*
*   ALLOCATE THE CONTROL INPUT DATASET
*
SVCUSER  EQU   *
         MVC   DA2DDN(2),=X'0055'      REQUEST DDNAME RETURN
         LA    R15,TUPL                R15<--A(TEXT UNIT POINTER LIST)
         ST    R15,DA2INFO+2           SAVE ITS ADDRESS IN DA2
         LA    R1,DA2DDN               R1<--A(DDNAME TEXT UNIT)
         ST    R1,0(R15)               SAVE IT IN TUPL
         LA    R1,DA2DSN               R1<--A(DSNAME TEXT UNIT)
         ST    R1,4(R15)               SAVE IT IN TUPL
         LA    R1,DA2SHR               R1<--A(DISP=SHR TEXT UNIT)
         ST    R1,8(R15)               SAVE IT IN TUPL
         MVI   8(R15),X'80'            MARK END OF TUPL
         CLI   MEMBER,C' '             WAS A MEMBER NAME SPECIFIED ?
         BE    SVCUSERA                IF NOT, ALLOC THE DATASET
         MVI   8(R15),X'00'            TURN OF END-OF-LIST FLAG
         LA    R1,DA2MEM               R1<--A(MEMBER NAME TEXT UNIT)
         ST    R1,12(R15)              SAVE IT IN TUPL
         MVI   12(R15),X'80'           MARK END OF LIST
         MVC   DA2MEMBE(8),MEMBER      COPY MEMBER NAME TO DA2
SVCUSERA LA    R1,DA2                  R1<--A(DA2 RB POINTER)
         SVC   99                      TRY TO ALLOCATE THE DATASET
         LTR   R15,R15                 DID WE GET IT ?
         BZ    OPEN                    IF NOT, GIVE UP
         CLI   WORK256B,X'00'          IS A RETRY ALLOWED ?
         BE    RETURN                  IF NOT, GIVE UP
         MVI   WORK256B,X'00'          ALLOW ONLY ONE RETRY
         SPACE 3
*
*   SET THE DEFAULT DATASET NAME TO BE USED
*
SETDFLT  LA    R1,SYSINDSN             R1<--A(SYSTEM DEFAULT DSNAME)
         ST    R1,ADSN                 SAVE IT AT ADDN
         LA    R1,L'SYSINDSN           R1<--L(SYSTEM DEFAULT DSNAME)
         STC   R1,ADSN                 SAVE ITS LENGTH ALSO
         SPACE 3
*
*   THE USER SPECIFIED A DATASET NAME OTHER THAN AN ASTERISK.  QUALIFY
*   THE NAME, IF NECESSARY, AND PARSE OUT THE MEMBER NAME.
*
PARSUSER LA    R2,WORK256A             R2<--A(WORK AREA)
         MVI   0(R2),C' '              BLANK FILL AN AREA ...
         MVC   1(55,R2),0(R2)          ... FOR DSNAME
         L     R1,ADSN                 R1<--A(DSNAME)
         SLR   R15,R15                 R15<--0
         IC    R15,ADSN                R15<--L(DSNAME)
         BCTR  R15,0                   DECREMENT FOR MVC INSTR
         EX    R15,MOVER               MOVE DSNAME TO WORK AREA
         LA    R1,WORK256A             R1<--A(DSNAME)
         L     R15,=V(GDADSNQ)         R15<--V(DSNAME QUALIFY ROUTINE)
         BALR  R14,R15                 GO QUALIFY DSNAME
         MVC   DA2DSNAM(44),DSNWORK    COPY DSNAME INTO DA2
         B     SVCUSER                 GO ALLOCATE THE USER'S DATASET
         SPACE 3
*
*   OPEN THE DATASET AND DETERMINE WHETHER IT IS READABLE
*
OPEN     LA    R2,SYSUT1               R2<--DCB
         USING IHADCB,R2               ADDRESSABILITY TO IT
         MVC   DCBDDNAM(8),DA2DDNAM    COPY IN DDNAME
         LA    R1,EOF                  R1<--A(END OF DATA ADDRESS)
         ICM   R1,8,DCBEODAD           INSERT BUFFER ALIGNMENT BITS
         ST    R1,DCBEODAD             SAVE EOF ADDRESS IN DCB
         SLR   R10,R10                 R10<--0 (DSNAME COUNT)
         LA    R9,$DSNLIST             R9<--A(DSNAME LIST)
         USING $DDN1,R9                ADDRESSABILITY TO IT
         LA    R1,OPENLIST             R1<--A(LIST-FORM OPEN MACRO)
         OPEN  ((2),INPUT),MF=(E,(1))  OPEN THE DATASET
         TM    DCBRECFM,DCBRECL        TEST RECORD FORMAT
         BM    GET                     IF FIXED OR VARIABLE, BRANCH
ZAP      MVC   MSG11DSN(44),DA2DSNAM   PUT DSNAME INTO ERROR MESSAGE
         TPUT  MSG11,L'MSG11           DISPLAY AN ERROR MESSAGE
         TPUT  MSG12,L'MSG12           AND TELL USER WHY
         B     EOF                     CLOSE THE FILE, FREE IT AND EXIT
         SPACE 3
*
*   READ A RECORD FROM THE DATASET USING THE QSAM GET LOCATE MODE
*
GET      LA    R2,SYSUT1               R2<--A(DCB)
         GET   (2)                     R1<--A(RECORD)
         SPACE 3
*
*   DETERMINE WHETHER WE ARE DEALING WITH A FIXED LENGTH OR A
*   VARIABLE LENGTH RECORD.
*
         TM    DCBRECFM,DCBRECF        FIXED LENGTH RECORDS ?
         BO    RECFMF                  IF SO, BRANCH
         TM    DCBRECFM,DCBRECV        VARIABLE LENGTH RECORDS ?
         BO    RECFMV                  IF SO, BRANCH
         B     GET                     OTHERWISE, IGNORE IT
         SPACE 3
*
*   FIXED LENGTH RECORDS.  IF THE RECORD LENGTH IS 80, AND IF THE
*   LAST 8 BYTES ARE ALL NUMERIC, SET THE RECORD LENGTH TO 72 FOR
*   THE CALL TO GDARPARS.
*
RECFMF   LH    R0,DCBLRECL             R0<--RECORD LENGTH
         C     R0,=F'80'               80-BYTE RECORDS ?
         BNE   FOLDDATA                IF NOT, PROCESS IT AS IS
         XC    WORK256A(8),WORK256A    CLEAR OUT AN 8-BYTE WORK AREA
         MVZ   WORK256A(8),72(R1)      COPY ZONES TO WORK AREA
         CLC   WORK256A(8),=C'00000000' WAS RECORD LINE NUMBERED ?
         BNE   FOLDDATA                IF NOT, PROCESS IT AS IS
         LA    R0,72(0)                ELSE, LIMIT RECORD LENGTH TO 72
         B     FOLDDATA                NOW, GO PROCESS RECORD
         SPACE 3
*
*   VARIABLE LENGTH RECORDS.  IF THE FIRST 8 BYTES ARE NUMERIC,
*   INCREMENT THE RECORD ADDRESS BY 8 BYTES AND DECREMENT THE
*   LENGTH BY 8 BYTES FOR THE CALL TO GDARPARS.
*
RECFMV   LH    R0,0(R1)                R0<--RECORD LENGTH
         LA    R1,4(R1)                R1<--A(DATA PORTION)
         S     R0,=F'4'                R0<--L(DATA PORTION)
         XC    WORK256A(8),WORK256A    CLEAR AN 8-BYTE WORK AREA
         MVZ   WORK256A(8),0(R1)       COPY ZONES TO WORK AREA
         CLC   WORK256A(8),=C'00000000' WAS RECORD LINE NUMBERED ?
         BNE   FOLDDATA                IF NOT, PROCESS IT AS IS
         LA    R1,8(R1)                ELSE, SKIP OVER LINE NUMBERS
         S     R0,=F'8'                AND ADJUST LENGTH ACCORDINGLY
         SPACE 3
*
*   ONE, AND ONLY ONE, USER TRIED TO ENTER DDNAMES AND DATASET NAMES
*   IN LOWER CASE, WHICH SVC 99 DOES NOT CARE FOR.  IT'S EASY TO MAKE
*   A PROGRAM FOOL-PROOF, BUT HARD AS HELL TO MAKE IT MIKEY-PROOF.
*   FOLD THE DATA TO UPPER CASE BEFORE CONTINUING.
*
FOLDDATA LR    R15,R0                  R15<--L(DATA)
         LR    R14,R1                  R14<--A(DATA)
FOLDLOOP OI    0(R14),X'40'            FOLD A BYTE TO UPPER CASE
         LA    R14,1(R14)              POINT TO THE NEXT BYTE
         BCT   R15,FOLDLOOP            CONTINUE FOLDING DATA
         SPACE 3
*
*   IF THE RECORD IS A COMMENT, IGNORE IT.  IF IT IS A COMMAND TO BE
*   STACKED, CALL GDASTACK TO STACK IT.
*
TESTCOMM CLI   0(R1),C'*'              COMMENT ?
         BE    GET                     IF SO, IGNORE IT
         CLI   0(R1),C'>'              IS IT A TSO COMMAND ?
         BE    STACK                   IF SO, GO STACK IT
         CLI   0(R1),C'.'              IS IT A DISPLAY COMMAND ?
         BNE   PARSE                   IF NOT, GO PARSE IT
         LA    R1,1(R1)                R1<--A(DATA TO BE DISPLAYED)
         BCTR  R0,0                    R0<--L(DATA TO BE DISPLAYED)
         TPUT  (1),(0)                 DISPLAY THE DATA
         B     GET                     THEN GO GET ANOTHER RECORD
STACK    LA    R1,1(R1)                SKIP OVER LEADING PERIOD
         S     R0,=F'1'                DECREMENT LENGTH BY 1
         L     R15,=V(GDASTACK)        R15<--A(STACKING ROUTINE)
         BALR  R14,R15                 GO STACK THE COMMAND
         B     GET                     THEN GO GET NEXT RECORD
         SPACE 3
*
*   THE INPUT RECORD IS NEITHER A COMMENT NOR A COMMAND TO BE STACKED.
*   PARSE IT INTO A DDNAME, DSNAME AND (OPTIONAL) VOLSER.
*
PARSE    L     R15,=V(GDARPARS)        R15<--V(RECORD PARSE ROUTINE)
         BALR  R14,R15                 PARSE THE RECORD
         LTR   R15,R15                 SYNTAX ERROR ?
         BZ    TESTDDN                 IF SO, IGNORE IT FOR NOW
         LR    R5,R0                   R5<--L(RECORD)
         LR    R6,R1                   R6<--A(RECORD)
         TPUT  MSG13,L'MSG13           DISPLAY ERROR MESSAGE
         TPUT  (6),(5)                 DISPLAY THE RECORD IN ERROR
         SLR   R10,R10                 CLEAR THE RETURN CODE
         LA    R9,$DSNLIST             RESTORE THE LIST POINTER
         B     GET                     GO GET NEXT RECORD
         SPACE 3
*
*   DETERMINE WHETHER A DDNAME WAS SUPPLIED.  IF NO DDNAME WAS
*   SUPPLIED AND THE CURRENT LIST IS EMPTY, DISPLAY AN ERROR MESSAGE.
*
TESTDDN  CLC   ADDN,=F'0'              DDNAME SUPPLIED ?
         BNE   NEWLIST                 IF SO, GO START A NEW LIST
         LTR   R10,R10                 IS LIST CURRENTLY EMPTY ?
         BNZ   LISTADD                 IF NOT, ADD DSNAME TO IT
         LR    R5,R0                   R5<--L(RECORD)
         LR    R6,R1                   R6<--A(RECORD)
         TPUT  MSG13,L'MSG13           ISSUE ERROR MESSAGE
         TPUT  (6),(5)                 DISPLAY THE RECORD IN ERROR
         TPUT  MSG14,L'MSG14           DISPLAY THE ...
         TPUT  MSG15,L'MSG15           ... EXPLANATION
         SLR   R10,R10                 CLEAR THE LIST LENGTH
         LA    R9,$DSNLIST             ... AND POINTER
         B     GET                     GO PROCESS NEXT RECORD
         SPACE 3
*
*   ADD THE DSNAME/VOLSER TO THE CURRENT LIST BY COPYING THE
*   DSNAME TO A WORK AREA AND CALLING GDADSNQ TO QUALIFY THE
*   DSNAME AND STRIP OUT THE MEMBER NAME, THEN MOVING THE
*   QUALIFIED DSNAME, MEMBER NAME AND VOLSER TO THE LIST.
*
LISTADD  EQU   *
         LA    R2,WORK256A             R2<--A(WORK AREA)
         MVI   0(R2),C' '              BLANK FILL AN AREA ...
         MVC   1(55,R2),0(R2)          ...FOR DSNAME
         L     R1,ADSN                 R1<--A(DSNAME)
         SLR   R15,R15                 R15<--0
         IC    R15,ADSN                R15<--L(DSNAME)
         BCTR  R15,0                   DECREMENT FOR MVC INSTR
         EX    R15,MOVER               MOVE DSNAME TO WORK AREA
         LA    R1,WORK256A             R1<--A(DSNAME)
         L     R15,=V(GDADSNQ)         R15<--V(DSNAME QUALIFY ROUTINE)
         BALR  R14,R15                 GO QUALIFY DSNAME
         C     R10,=F'16'              IS THE LIST ALREADY FULL ?
         BL    ADDOK                   IF SO, ALLOW THE ADDITION
         LA    R9,$DSNLIST             ELSE, RESTORE LIST ORIGIN
         MVC   MSG16DDN(8),$DDN1       PUT DDNAME INTO ERROR MESSAGE
         TPUT  MSG16,L'MSG16           DISPLAY THE ERROR MESSAGE
         MVC   MSG17DSN(44),DSNWORK    PUT DSNAME INTO ERROR MESSAGE
         TPUT  MSG17,L'MSG17           DISPLAY THE REST OF THE ERROR
         B     GET                     THEN GO GET NEXT RECORD
ADDOK    MVC   $DDN1(8),=C'        '   BLANK FILL THE DDNAME AND ...
         MVC   $VOL1(6),$DDN1          ... THE VOLSER
         CLI   DSNWORK,C'*'            DEFAULT DATASET(S) REQUESTED ?
         BNE   LOCALADD                IF NOT, ADD SPECIFIED DATASET
         L     R15,=V(GDAINSRT)        R15<--V(DSNAME INSERT ROUTINE)
         BALR  R14,R15                 GO INSERT DEFAULT DSNAME(S)
         B     GET                     THE PROCESS NEXT RECORD
LOCALADD MVC   $DSN1(44),DSNWORK       COPY DSNAME TO LIST
         MVC   $MEM1(8),MEMBER         COPY MEMBER NAME TO LIST
         L     R1,AVOL                 R1<--A(VOLSER)
         LTR   R1,R1                   ANY VOLSER PROVIDED ?
         BZ    INCR910                 IF NOT, BRANCH
         SLR   R15,R15                 R15<--0
         IC    R15,AVOL                R15<--L(VOLSER)
         C     R15,=F'6'               LENGTH > 6 ?
         BNH   *+8                     IF OKAY, SKIP NEXT INSTR
         LA    R15,6(0)                ELSE, LIMIT IT TO 6 BYTES
         BCTR  R15,0                   DECREMENT LENGTH FOR MVC INSTR
         LA    R2,$VOL1                R2<--A(STORAGE AREA IN LIST)
         EX    R15,MOVER               COPY VOLSER TO LIST
INCR910  LA    R9,$NEXT                R9<--A(NEXT LIST ENTRY)
         LA    R10,1(R10)              INCREMENT LIST COUNT
         B     GET                     GO GET NEXT RECORD
         SPACE 3
*
*   A DDNAME WAS SUPPLIED ON THE INPUT RECORD.  IF THE CURRENT LIST
*   IS NOT EMPTY, CALL GDALLOC TO PROCESS IT, THEN START A NEW LIST.
*
NEWLIST  LTR   R10,R10                 IS LIST CURRENTLY EMPTY ?
         BZ    NEWLISTA                IF SO, BRANCH
         ST    R10,$DSN#               SAVE LIST LENGTH
         L     R15,=V(GDALLOC)         R15<--V(ALLOCATE ROUTINE)
         BALR  R14,R15                 GO ALLOCATE THE DATASETS
         SLR   R10,R10                 R10<--0
NEWLISTA LA    R9,$DSNLIST             R9<--A(LIST ORIGIN)
         MVI   $DSN1,C' '              BLANK FILL ...
         MVC   $DSN1+1(43),$DSN1       ... THE DSNAME,
         MVC   $DDN1(8),$DSN1          ... THE DDNAME,
         MVC   $MEM1(8),$DSN1          ... THE MEMBER NAME, AND
         MVC   $VOL1(6),$DSN1          ... THE VOLSER
         L     R1,ADDN                 R1<--A(DDNAME)
         SLR   R15,R15                 R15<--0
         IC    R15,ADDN                R15<--L(DDNAME)
         BCTR  R15,0                   DECREMENT FOR MVC INSTR
         LA    R2,$DDN1                R2<--A(DDNAME STORAGE)
         EX    R15,MOVER               COPY DDNAME INTO LIST
         LA    R2,WORK256A             R2<--A(WORK AREA)
         MVI   0(R2),C' '              BLANK FILL AN AREA ...
         MVC   1(55,R2),0(R2)          ...FOR DSNAME
         L     R1,ADSN                 R1<--A(DSNAME)
         SLR   R15,R15                 R15<--0
         IC    R15,ADSN                R15<--L(DSNAME)
         BCTR  R15,0                   DECREMENT FOR MVC INSTR
         EX    R15,MOVER               MOVE DSNAME TO WORK AREA
         LA    R1,WORK256A             R1<--A(DSNAME)
         L     R15,=V(GDADSNQ)         R15<--V(DSNAME QUALIFY ROUTINE)
         BALR  R14,R15                 GO QUALIFY DSNAME
         CLI   DSNWORK,C'*'            DEFAULT DSNAME(S) REQUESTED ?
         BNE   NEWLISTB                IF NOT, USE SPECIFIED DSNAME
         L     R15,=V(GDAINSRT)        R15<--V(DSNAME INSERT ROUTINE)
         BALR  R14,R15                 GO INSERT DEFAULT DSNAME(S)
         B     GET                     GO PROCESS NEXT RECORD
NEWLISTB MVC   $DSN1(44),DSNWORK       COPY DSNAME TO LIST
         MVC   $MEM1(8),MEMBER         COPY MEMBER NAME TO LIST
         L     R1,AVOL                 R1<--A(VOLSER)
         LTR   R1,R1                   ANY VOLSER PROVIDED ?
         BZ    RESET10                 IF NOT, BRANCH
         SLR   R15,R15                 R15<--0
         IC    R15,AVOL                R15<--L(VOLSER)
         C     R15,=F'6'               LENGTH > 6 ?
         BNH   *+8                     IF OKAY, SKIP NEXT INSTR
         LA    R15,6(0)                ELSE, LIMIT IT TO 6 BYTES
         BCTR  R15,0                   DECREMENT LENGTH FOR MVC INSTR
         LA    R2,$VOL1                R2<--A(STORAGE AREA IN LIST)
         EX    R15,MOVER               COPY VOLSER TO LIST
RESET10  LA    R10,1(0)                RESET LIST COUNT
         LA    R9,$NEXT                POINT TO NEXT LIST ENTRY
         B     GET                     GO GET NEXT RECORD
         SPACE 3
*
*   ALL INPUT DATA HAS BEEN READ.  CLOSE THE INPUT FILE AND FREE IT.
*   CALL GDALLOC TO PROCESS THE LIST IF IT IS NOT EMPTY.
*
EOF      LA    R1,CLOSLIST             R1<--A(LIST-FORM CLOSE MACRO)
         CLOSE ((2)),MF=(E,(1))        CLOSE THE INPUT FILE
         FREEPOOL (2)                  FREE ITS QSAM BUFFERS
         MVC   DA1DDNAM(8),DCBDDNAM    COPY DDNAME INTO DA1 RB
         LA    R1,DA1                  R1<--A(DA1 REQUEST BLOCK PTR)
         SVC   99                      FREE THE GDA.DATA DATASET
         LTR   R10,R10                 IS THE LIST CURRENTLY EMPTY ?
         BZ    DEQUEUE                 IF SO, RETURN
         ST    R10,$DSN#               SAVE LIST LENGTH
         L     R15,=V(GDALLOC)         R15<--V(ALLOCATE ROUTINE)
         BALR  R14,R15                 GO PROCESS THE LIST
DEQUEUE  SLR   R0,R0                   R0<--0
         L     R15,=V(GDASTACK)        R15<--V(CMD STACKING ROUTINE)
         BALR  R14,R15                 GO STACK COMMANDS
         SPACE 3
*
*   FREEMAIN THE SAVE AREA STACK AND RETURN TO THE CALLER
*
RETURN   EQU   *
         LA    R0,X'2A'(0)             R0<--X'2A' (OKSWAP SYSEVENT ID)
         SLR   R1,R1                   R1<--0
         SVC   95                      ISSUE OKSWAP SYSEVENT
         FREEMAIN R,LV=LENCOMMN,A=(11) FREEMAIN THE COMMON AREA
         LR    R2,R13                  R2<--A(SAVE AREA STACK)
         L     R13,4(R13)              RESTORE R13
         FREEMAIN R,LV=SAVELEN,A=(2)   FREEMAIN THE SAVE AREA STACK
         LM    R14,R12,12(R13)         RESTORE THE REGISTERS
         SLR   R15,R15                 CLEAR THE RETURN CODE
         BR    R14                     RETURN TO THE CALLER
SAVELEN  EQU   360                     LENGTH OF SAVE AREA STACK
MOVER    MVC   0(0,R2),0(R1)           *** EXECUTE ONLY ***
         LTORG
         EJECT
*
*   COMMON AREA DSECT
*
         DSECT
         $COMMON
         EJECT
*
*   LIST ENTRY DSECT
*
         DSECT
         $DSN
         EJECT
*
*   DCB MAPPING DSECT
*
         DSECT
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         END   GDAMAIN
