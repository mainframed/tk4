         TITLE 'GDARPARS:  SUBROUTINE TO PARSE AN INPUT RECORD'
*---------------------------------------------------------------------*
*                                                                     *
*   SUBROUTINE NAME:  GDARPARS                                        *
*                                                                     *
*   FUNCTION:  TO PARSE OUT THE DDNAME, DATASET NAME AND VOLSER ON    *
*   AN INPUT RECORD                                                   *
*                                                                     *
*   OPERATION:                                                        *
*                                                                     *
*      ON INPUT, R1 POINTS TO THE 72-BYTE RECORD READ FROM THE        *
*      USER'S GDA.LIST FILE, AND THE LENGTH OF THE RECORD IS          *
*      CONTAINED IN R0.  (IF THE LENGTH IS GREATER THAN 255, ONLY     *
*      THE FIRST 255 BYTES WILL BE PROCESSED.)  ON RETURN, THE        *
*      ADDRESS OF THE DDNAME IS PLACED IN ADDN, WITH THE LENGTH       *
*      IN THE HIGH-ORDER BYTE.  SIMILARLY, THE ADDRESS OF THE         *
*      DATASET NAME IS PLACED IN ADSN, WITH THE LENGTH IN THE         *
*      HIGH-ORDER BYTE, AND THE ADDRESS OF THE VOLSER IS PLACED       *
*      IN AVOL, WITH THE LENGTH IN THE HIGH-ORDER BYTE.  IF THE       *
*      DDNAME OR VOLSER IS MISSING, THE CORRESPONDING ADDN OR AVOL    *
*      IS ZERO.  IF THE DSNAME IS MISSING, A RETURN CODE OF 8 IS      *
*      PLACED IN R15.  IF THE DDNAME IS LONGER THAN 8 BYTES, THE      *
*      RETURN CODE IS SET TO 4.  OTHERWISE, THE RETURN CODE IS        *
*      SET TO 0, INDICATING A SUCCESSFUL PARSE.                       *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER,
*   ESTABLISH PROGRAM AND COMMON ADDRESSABILITY AND CHAIN THE SAVE
*   AREAS.
*
GDARPARS CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDARPARS,R12            ESTABLISH ADDRESSABILITY
         USING COMMON,R11              COMMON ADDRESSABILITY
         LR    R3,R13                  R3<--A(CALLER'S SAVE AREA)
         LA    R13,72(R13)             R13<--A(MY SAVE AREA)
         ST    R3,4(R13)               FORWARD CHAIN SAVE AREAS
         ST    R13,8(R3)               REVERSE CHAIN SAVE AREAS
         LR    R3,R1                   R3<--A(INPUT RECORD)
         SPACE 3
*
*   CLEAR THE ADDRESS POINTERS AND SET UP THE TRANSLATE TABLES
*
         XC    ADDN(4),ADDN            ZERO OUT THE DDNAME POINTER
         XC    ADSN(4),ADSN            ZERO OUT THE DSNAME POINTER
         XC    AVOL(4),AVOL            ZERO OUT THE VOLSER POINTER
         XC    PUNCSYM(256),PUNCSYM    ZERO OUT THE PUNCTUATION TABLE
         MVI   PUNCSYM+C' ',X'01'      BLANK = PUNCTUATION
         MVI   PUNCSYM+C',',X'01'      COMMA = PUNCTUATION
         MVI   TEXTSYM,X'01'           INITIALIZE THE TEXT SYMBOL ...
         MVC   TEXTSYM+1(255),TEXTSYM  ... TRANSLATE TABLE
         MVI   TEXTSYM+C' ',X'00'      BLANK ^= TEXT
         MVI   TEXTSYM+C',',X'00'      COMMA ^= TEXT
         SPACE 3
*
*    FIRST SEE IF A DDNAME IS PRESENT.  IF PRESENT, IT MUST BEGIN
*    IN COLUMN 1.
*
         LR    R4,R0                   R4<--L(RECORD)
         C     R4,=F'255'              LENGTH > 255 ?
         BNH   *+8                     IF NOT, SKIP NEXT INSTR.
         LA    R4,255(0)               ELSE, LIMIT LENGTH TO 255
         BCTR  R4,0                    ADJUST FOR TRT INSTR.
         CLI   0(R3),C' '              IS 1-ST BYTE BLANK ?
         BE    FINDDSN                 IF SO, NO DDNAME
         ST    R3,ADDN                 ELSE, SAVE R1 AS A(DDNAME)
         EX    R4,SRCHPUNC             LOOK FOR A PUNCTUATION SYMBOL
         BZ    ERROR4                  IF NOT FOUND, DDNAME TOO LONG
         LR    R5,R1                   R5<--A(PUNCTUATION SYMBOL)
         SR    R5,R3                   R3<--L(DDNAME)
         STC   R5,ADDN                 SAVE LENGTH OF DDNAME
         LR    R3,R1                   R3<--A(PUNCTUATION SYMBOL)
         SR    R4,R5                   R4<--L(REMAINING DATA)
         BM    ERROR8                  IF NEGATIVE, DSNAME MISSING
         SPACE 3
*
*   SEARCH FOR THE DATASET NAME
*
FINDDSN  EX    R4,SRCHTEXT             LOOK FOR A TEXT SYMBOL
         BZ    ERROR8                  IF NOT FOUND, DSNAME MISSING
         LR    R5,R1                   R5<--A(TEXT SYMBOL)
         SR    R5,R3                   R5<--L(PUNCTUATION STRING)
         LR    R3,R1                   R3<--A(DSNAME)
         SR    R4,R5                   R4<--A(REMAINING DATA)
         BM    ERROR8                  IF NOT POSITIVE, NO DSNAME
         ST    R3,ADSN                 SAVE A(DSNAME)
         EX    R4,SRCHPUNC             LOOK FOR A PUNCTUATION SYMBOL
         BZ    LONGDSN                 IF NOT FOUND, DSN FILLS RECORD
         LR    R5,R1                   R5<--A(PUNCTUATION SYMBOL)
         SR    R5,R3                   R5<--L(DSNAME)
         STC   R5,ADSN                 SAVE LENGTH OF DSNAME
         LR    R3,R1                   R3<--A(PUNCTUATION SYMBOL)
         SLR   R15,R15                 CLEAR THE RETURN CODE
         SR    R4,R5                   R4<--A(REMAINING DATA)
         BM    RETURN                  IF MINUS, NO VOLSER
         SPACE 3
*
*   SEARCH FOR THE VOLSER
*
         EX    R4,SRCHTEXT             LOOK FOR A TEXT SYMBOL
         BZ    RETURN                  IF NOT FOUND, NO VOLSER
         LR    R5,R1                   R5<--A(VOLSER)
         SR    R5,R3                   R5<--L(PUNCTUATION STRING)
         LR    R3,R1                   R3<--A(VOLSER)
         ST    R3,AVOL                 SAVE A(VOL)
         SR    R4,R5                   R4<--L(REMAINING DATA)
         BM    LONGVOL                 IF MINUS, VOLSER FILLS RECORD
         EX    R4,SRCHPUNC             SEARCH FOR PUNCTUATION SYMBOL
         BZ    LONGVOL                 IF NOT FOUND, VOLSER FILLS REC
         LR    R5,R1                   R5<--A(PUNCTUATION SYMBOL)
         SR    R5,R3                   R5<--L(VOLSER)
         STC   R5,AVOL                 SAVE L(VOLSER)
         SLR   R15,R15                 CLEAR THE RETURN CODE
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   LONGDSN:  THE DATASET NAME EXTENDS TO THE END OF THE RECORD
*
LONGDSN  LA    R4,1(R4)                R4<--L(DSNAME)
         STC   R4,ADSN                 SAVE LENGTH OF DSN
         SLR   R15,R15                 CLEAR THE RETURN CODE
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   LONGVOL:  THE VOLSER NAME EXTENDS TO THE END OF THE RECORD
*
LONGVOL  LA    R4,1(R4)                R4<--L(VOLSER)
         STC   R4,AVOL                 SAVE LENGTH OF VOL
         SLR   R15,R15                 CLEAR THE RETURN CODE
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   ERROR4:  DDNAME IS LONGER THAN 8 BYTES
*
ERROR4   LA    R15,4(0)                R15<--4 (RETURN CODE)
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   ERROR8:  DSNAME IS MISSING
*
ERROR8   LA    R15,8(0)                R15<--8 (RETURN CODE)
         B     RETURN                  RETURN TO CALLER
         SPACE 3
*
*   PARSE COMPLETE.  RETURN TO THE CALLING PROGRAM.
*
RETURN   L     R13,4(R13)              RESTORE R13
         ST    R15,16(R13)             SAVE THE RETURN CODE
         LM    R14,R12,12(R13)         RESTORE THE OTHER REGISTERS
         BR    R14                     RETURN TO CALLER
SRCHTEXT TRT   0(0,R3),TEXTSYM         *** EXECUTE ONLY ***
SRCHPUNC TRT   0(0,R3),PUNCSYM         *** EXECUTE ONLY ***
         LTORG
         EJECT
*
*   COMMON STORAGE AREA DSECT
*
         DSECT
         $COMMON
         END
