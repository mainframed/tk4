         TITLE 'GDAPROF:  SUBROUTINE TO LOCATE/CREATE THE USER ISPF PROX
               FILE DATASET'
*---------------------------------------------------------------------*
*                                                                     *
*   PROGRAM NAME:  GDAPROF                                            *
*                                                                     *
*   TYPE:  SUBROUTINE                                                 *
*                                                                     *
*   FUNCTION:  TO LOCATE OR CREATE THE USER'S ISPF PROFILE DATASET    *
*                                                                     *
*   CALLING SEQUENCE:   CALL GDAPROF                                  *
*                                                                     *
*   ARGUMENTS:  NONE                                                  *
*                                                                     *
*   INPUT REGISTERS:                                                  *
*                                                                     *
*      R9  = A(DSNAME ENTRY IN DSNAME LIST IN WHICH AN ASTERISK       *
*            SPECIFICATION WAS FOUND)                                 *
*      R10 = # ENTRIES IN DSNAME LIST                                 *
*      R11 = A(COMMON)                                                *
*      R13 = A(SAVE AREA)                                             *
*      R14 = A(RETURN)                                                *
*      R15 = A(ENTRY POINT)                                           *
*                                                                     *
*   RETURN CODES:  R15 = 0 IN ALL CASES                               *
*                                                                     *
*   OPERATION:  THE CALLER'S USERID IS FETCHED AND USED TO BUILD A    *
*   DATASET NAME OF THE FORM "USERID.ISPF.PROFILE".  THIS DATASET     *
*   IS THEN LOCATED VIA THE "CAMLST LOCATE" MACRO.  IF FOUND, CONTROL *
*   IS RETURNED TO THE CALLING PROGRAM.  IF NOT FOUND, A DATASET IS   *
*   CREATED WITH THE FOLLOWING CHARACTERISTICS:                       *
*                                                                     *
*       DSN=USERID.ISPF.PROFILE                                       *
*       UNIT=SYSDA                                                    *
*       VOL=SER=TEMP..                                                *
*       DISP=(NEW,CATLG)                                              *
*       SPACE=(TRK,(1,1,5))                                           *
*       DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)                          *
*                                                                     *
*   WHERE "TEMP.." IS THE TEMP PACK WITH THE LARGEST CONTIGUOUS FREE  *
*   EXTENT.                                                           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
*
*   DEFINE REGISTER EQUATES
*
R0       EQU   0                       GENERAL REGISTER 0
R1       EQU   1                       GENERAL REGISTER 1
R2       EQU   2                       GENERAL REGISTER 2
R3       EQU   3                       GENERAL REGISTER 3
R4       EQU   4                       GENERAL REGISTER 4
R5       EQU   5                       GENERAL REGISTER 5
R6       EQU   6                       GENERAL REGISTER 6
R7       EQU   7                       GENERAL REGISTER 7
R8       EQU   8                       GENERAL REGISTER 8
R9       EQU   9                       GENERAL REGISTER 9
R10      EQU   10                      GENERAL REGISTER 10
R11      EQU   11                      GENERAL REGISTER 11
R12      EQU   12                      GENERAL REGISTER 12
R13      EQU   13                      GENERAL REGISTER 13
R14      EQU   14                      GENERAL REGISTER 14
R15      EQU   15                      GENERAL REGISTER 15
         SPACE 3
*
*   INITIALIZATION:  SAVE THE INPUT REGISTERS, LOAD THE BASE REGISTER,
*   AND ESTABLISH PROGRAM ADDRESSABILITY
*
GDAPROF CSECT
         SAVE  (14,12),,*              SAVE THE INPUT REGISTERS
         LR    R12,R15                 LOAD THE BASE REGISTER
         USING GDAPROF,R12             PROGRAM ADDRESSABILITY
         USING COMMON,R11              COMMON ADDRESSABILITY
         LR    R10,R13                 R10<--A(CALLER'S SAVE AREA)
         LA    R13,72(R13)             R13<--A(MY SAVE AREA)
         ST    R10,4(R13)              FORWARD CHAIN SAVE AREAS
         ST    R13,8(R10)              REVERSE CHAIN SAVE AREAS
         SLR   R10,R10                 R10<--0 (NO WORK AREA YET)
         LA    R9,$DSNLIST             R9<--A(DSNAME LIST)
         USING $DDN1,R9                DSNAME LIST ADDRESSABILITY
         SPACE 3
*
*   GETMAIN A WORK AREA AND SAVE ITS ADDRESS IN R10
*
         GETMAIN R,LV=WORKLEN          GETMAIN THE WORK AREA
         LR    R10,R1                  R10<--A(WORK AREA)
         LR    R2,R1                   R2<--A(WORK AREA)
         L     R4,=V(GDAPFWA)          R4<--A(DUMMY WORK AREA)
         LA    R5,WORKLEN              R5<--L(WORK AREA)
         LR    R3,R5                   R3<--L(WORK AREA)
         MVCL  R2,R4                   INITIALIZE WORK AREA
         USING WORKAREA,R10            ADDRESSABILITY TO IT
         SPACE 3
*
*   LOCATE THE CALLER'S USERID BY GETTING THE TSO LOGON ID,
*   AND USE IT TO BUILD THE ISPF PROFILE DATASET NAME.
*
         L     R1,548(0)               R1<--A(MY ASCB)
         L     R1,176(R1)              R1<--A(JOB NAME)
         MVC   DA4DSNAM(8),0(R1)       COPY JOB NAME TO WORK AREA
         LA    R1,DA4DSNAM             R1<--A(JOB NAME IN WORK AREA)
         LA    R2,7(0)                 R2<--7 (MAX LENGTH)
SCANJOBN CLI   0(R1),C' '              SEARCH FOR END OF JOB NAME
         BE    ENDJOBN                 FOUND ?
         LA    R1,1(R1)                NO, POINT TO NEXT BYTE
         BCT   R2,SCANJOBN             CONTINUE SEARCH
ENDJOBN  MVI   0(R1),C'.'              INSERT PERIOD
         SLR   R2,R2                   R2<--0
         IC    R2,LENPROF              R2<--L(PROFILE SUFFIX)
         BCTR  R2,0                    ADJUST FOR MVC INSTR
         EX    R2,MOVEPROF             MOVE SUFFIX TO DSNAME
         MVC   $DSN1(44),DA4DSNAM      INSERT DSNAME INTO LIST
         DROP  R9                      DROP DSN LIST ADDRESSABILITY
         SPACE 3
*
*   LOCATE THE USER'S ISPF PROFILE DATASET
*
         XC    CAMLST(16),CAMLST       CLEAR THE CAMLST CNTL BLOCK
         LA    R1,168(0)               R1<--168 (LOCATE OPTION)
         ST    R1,CAMLST               SAVE IT IN CAMLST OPT. BYTE
         LA    R1,DA4DSNAM             R1<--A(DSNAME)
         ST    R1,CAMLST+4             SAVE IT IN CAMLST
         LA    R1,CAMWORK              R1<--A(CAMLST WORK AREA)
         ST    R1,CAMLST+12            SAVE IT IN CAMLST
*        LOCATE CAMLST                 SEARCH CATALOG FOR DATASET
         LA    R1,CAMLST               R1<--A(CAMLST CNTL BLOCK)
         SVC   26                      ISSUE CAMLST SVC
         LTR   R15,R15                 DATASET FOUND ?
         BZ    RETURN                  IF SO, NO NEED TO CATALOG IT
         SPACE 3
*
*   FIND THE TEMP.. PACK WITH THE LARGEST FREE EXTENT
*
         CALL  GDAVOLSL                GO SCAN TEMP PACKS
         CLI   MAXVOL,C' '             WAS A VOLUME FOUND ?
         BNE   BUILDAIR                GO BUILD THE DAIR BLOCK
         LA    R1,PWM5VOL              R1<--A(VOLSER DISPLAY AREA)
         LA    R2,GENVOL               R2<--A(GENERIC VOLSER)
         L     R3,LENVOL               R3<--L(GENERIC VOLSER)
         BCTR  R3,0                    DECREMENT LENGTH
         EX    R3,MOVEVOL              MOVE GENERIC VOLSER TO ERR MSG
         LA    R1,PWM5                 R1<--A(ERROR MESSAGE)
         LA    R0,L'PWM5               R0<--L(ERROR MESSAGE)
         TPUT  (1),(0)                 DISPLAY THE ERROR MESSAGE
         B     RETURN                  EXIT
MOVEVOL  MVC   0(0,R1),0(R2)           *** EXECUTE ONLY ***
         SPACE 3
*
*   BUILD THE DAIR CONTROL BLOCK FOR DYNAMIC ALLOCATION OF THE
*   USER'S ISPF.PROFILE DATASET
*
BUILDAIR LA    R1,DA4RB                R1<--A(DAIR REQUEST BLOCK)
         ST    R1,DA4                  SAVE IT IN RB POINTER
         MVI   DA4,X'80'               TERMINATE LIST
         LA    R1,DA4TUPL              R1<--A(TEXT UNIT POINTER LIST)
         ST    R1,DA4INFO+2            SAVE IT IN RB
         LA    R1,DA4DSN               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+00           SAVE IT IN TUPL
         LA    R1,DA4NEW               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+04           SAVE IT IN TUPL
         LA    R1,DA4CTLG              R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+08           SAVE IT IN TUPL
         LA    R1,DA4UNIT              R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+12           SAVE IT IN TUPL
         LA    R1,DA4VOL               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+16           SAVE IT IN TUPL
         LA    R1,DA4TRK               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+20           SAVE IT IN TUPL
         LA    R1,DA4PRI               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+24           SAVE IT IN TUPL
         LA    R1,DA4SEC               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+28           SAVE IT IN TUPL
         LA    R1,DA4DIR               R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+32           SAVE IT IN TUPL
         LA    R1,DA4RECFM             R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+36           SAVE IT IN TUPL
         LA    R1,DA4LRECL             R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+40           SAVE IT IN TUPL
         LA    R1,DA4BLKSI             R1<--A(DSN TEXT UNIT)
         ST    R1,DA4TUPL+44           SAVE IT IN TUPL
         MVI   DA4TUPL+44,X'80'        TERMINATE LIST
         MVC   DA4VOLSE(6),MAXVOL      SAVE VOLSER TO BE USED
         SPACE 3
*
*   CREATE THE USER'S ISPF.PROFILE DATASET.
*
DSALLOC  LA    R1,DA4                  R1<--A(DAIR CONTROL BLOCK PTR)
         SVC   99                      CREATE THE DATASET
         LTR   R15,R15                 ALLOCATION SUCCESSFUL ?
         BNZ   DAIRFAIL                IF NOT, BRANCH
         MVC   PWM1VOL(6),DA4VOLSE     COPY VOLSER TO MESSAGE TEXT
         LA    R1,PWM1                 R1<--A(MESSAGE TEXT)
         LA    R0,L'PWM1               R2<--L(MESSAGE TEXT)
         TPUT  (1),(0)                 DISPLAY THE MESSAGE
         B     RETURN                  EXIT
         SPACE 3
*
*   THE DYNAMIC ALLOCATION OF THE ISPF.PROFILE DATASET FAILED.
*   DISPLAY THE DAIR RETURN CODE, ERROR CODE AND INFO CODE.
*
DAIRFAIL LA    R1,PWM4RC               R1<--A(DISPLAY AREA)
         BAL   R9,HEXCONV              CONVERT RC TO HEX
         LH    R15,DA4ERR              R15<--ERROR CODE
         LA    R1,PWM4ERR              R1<--A(DISPLAY AREA)
         BAL   R9,HEXCONV              CONVERT ERROR CODE TO HEX
         LH    R15,DA4INFO             R15<--DAIR INFO CODE
         LA    R1,PWM4INFO             R1<--A(DISPLAY AREA)
         BAL   R9,HEXCONV              CONVERT INFO CODE TO HEX
         MVC   PWM3DSN(44),DA4DSNAM    COPY DSNAME TO MESSAGE TEXT
         LA    R1,PWM2                 R1<--A(PWM2)
         LA    R0,L'PWM2               R0<--L(PWM2)
         TPUT  (1),(0)                 DISPLAY PWM2
         LA    R1,PWM3                 R1<--A(PWM3)
         LA    R0,L'PWM3               R0<--L(PWM3)
         TPUT  (1),(0)                 DISPLAY PWM3
         LA    R1,PWM4                 R1<--A(PWM4)
         LA    R0,L'PWM4               R0<--L(PWM4)
         TPUT  (1),(0)                 DISPLAY PWM4
         SPACE 3
*
*   FREEMAIN THE WORK AREA AND RETURN
*
RETURN   L     R13,4(R13)              RESTORE R13
         LTR   R10,R10                 WAS A WORK AREA GETMAINED ?
         BZ    RETURN2                 IF NOT, SKIP FREEMAIN
         FREEMAIN R,LV=WORKLEN,A=(10)  FREE THE WORK AREA
         DROP  R10                     DISCARD ADDRESSABILITY TO IT
RETURN2  LM    R14,R12,12(R13)         RESTORE THE REGISTERS
         SLR   R15,R15                 CLEAR THE RETURN CODE
         BR    R14                     RETURN TO CALLER
         SPACE 3
*
*   HEXCONV:  LOCAL SUBROUTINE TO CONVERT THE LOW-ORDER TWO BYTES
*             OF R15 TO HEX AND PLACE THE RESULTING 4 BYTES AT THE
*             ADDRESS POINTED TO BY R1.
*
HEXCONV  SLL   R15,16                  LEFT-JUSTIFY THE DATA
         SLR   R14,R14                 R14<--0
         SLDL  R14,4                   SHIFT A DIGIT INTO R14
         STC   R14,0(R1)               SAVE IT IN OUTPUT AREA
         SLR   R14,R14                 R14<--0
         SLDL  R14,4                   SHIFT A DIGIT INTO R14
         STC   R14,1(R1)               SAVE IT IN OUTPUT AREA
         SLR   R14,R14                 R14<--0
         SLDL  R14,4                   SHIFT A DIGIT INTO R14
         STC   R14,2(R1)               SAVE IT IN OUTPUT AREA
         SLR   R14,R14                 R14<--0
         SLDL  R14,4                   SHIFT A DIGIT INTO R14
         STC   R14,3(R1)               SAVE IT IN OUTPUT AREA
         TR    0(4,R1),=C'0123456789ABCDEF'  XLATE TO HEX
         BR    R9                      RETURN TO CALLER
         SPACE 3
*
*   LOCAL CONSTANTS AND LITERAL POOL
*
MOVEPROF MVC   1(0,R1),PROFNAME        *** EXECUTE ONLY ***
PROFNAME DC    CL44'ISPF.PROFILE'
LENPROF  DC    AL1(12)
         LTORG
         EJECT
*
*   DATASET NAME LIST ENTRY MAPPING MACRO  (BASE=R9)
*
         DSECT
         $DSN
         EJECT
*
*   PROFILE WORK AREA DSECT (BASE=R10)
*
         DSECT
         $PROFWA
         EJECT
*
*   COMMON WORK AREA DSECT (BASE=R11)
*
         DSECT
         $COMMON
         END   GDAPROF
