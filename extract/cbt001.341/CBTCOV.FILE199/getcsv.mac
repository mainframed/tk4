         TITLE 'GETCSV - SUBROUTINE TO OBTAIN VALUES OF CLIST VARIABLESX
               '
*---------------------------------------------------------------*
*                                                               *
*                      G E T C S V                              *
*                                                               *
*   THIS SUBROUTINE ALLOWS THE CALLER TO DETERMINE THE VALUES OF*
*   CLIST VARIABLES.                                            *
*                                                               *
*   CALLING SEQUENCE:                                           *
*     CALL GETCSV(NAME,NAMEL,VALUE,VALUEL,IRC)                  *
*                                                               *
*   WHERE:                                                      *
*     NAME   IS THE CLIST VARIABLE NAME.                        *
*     NAMEL  IS A FULLWORD INTEGER GIVING THE NUMBER OF         *
*            CHARACTERS IN THE CLIST VARIABLE NAME.             *
*     VALUE  IS THE AREA IN WHICH THE CLIST VARIABLE VALUE WILL *
*            BE RETURNED.                                       *
*     VALUEL IS A FULLWORD INTEGER GIVING THE NUMBER OF         *
*            CHARACTERS IN THE RETURNED DATA.                   *
*     IRC    IS A FULLWORD INTEGER WHICH WILL BE SET BY GETCSV  *
*            WITH THE APPROPRIATE RETURN CODE, AS FOLLOWS:      *
*            0 - SUCCESSFULL COMPLETION                         *
*            1 - NOT USED                                       *
*            2 - NOT USED                                       *
*            3 - NOT USED                                       *
*            4 - CALLER IS NOT IN A CLIST                       *
*            5 - CALLER IS NOT A TSO COMMAND                    *
*            6 - VARIABLE NAME NOT FOUND                        *
*            7 - WRONG TYPE OF VARIABLE (NOT KEYWORD OR         *
*                POSITIONAL)                                    *
*            8 - NOT USED                                       *
*            9 - CLIST VARIABLE LENGTH IS > 256                 *
*                                                               *
*                                                               *
*---------------------------------------------------------------*
         EJECT
GETCSV   CSECT
*
* EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
CVTPTR   EQU   16                 CVT ADR, MAPPED BY CVT
CVTTCBP  EQU   0                  CURRENT TCB/ASCB ADR, MAPPED BY CVT
CURRTCB  EQU   4                  CURRENT TCB ADR
TCBFSA   EQU   112                ADR OF 1ST SAVE, MAPPED BY IKJTCB
         EJECT
*
* INITIALIZATION
*
         SAVE  (14,12),,*
         USING GETCSV,R12
         LR    R12,R15
         LR    R2,R1              SAVE PARM ADR
         EXTRACT EXTWA,FIELDS=TSO
         LM    R1,R5,0(R2)        LOAD CALLER'S PARM ADDR'S
         L     R7,EXTWA           GET ADR OF BYTE
         TM    0(R7),X'80'        TSO ENVIRONMENT
         BO    CKSAVE             BR YES
         LA    R11,5              ERR: CALLER IS NOT A TSO COMMAND
         B     QUIT               RETURN
         SPACE
CKSAVE   DS    0H
         L     R7,CVTPTR          CVT ADR
         L     R7,CVTTCBP(R7)     NEW/OLD TCB ADR
         L     R7,CURRTCB(R7)     CURRENT TCB ADR
         L     R6,TCBFSA(R7)      FIRST SAVE AREA
         L     R6,24(R6)          ORIGINAL REG 1
         TM    0(R6),X'80'        BATCH STYLE ?
         BZ    FNDSNTBL           BRANCH IF NOT
         LA    R11,5              ERR: CALLER NOT A TSO COMMAND
         B     QUIT               RETURN
         SPACE
FNDSNTBL DS    0H
         L     R6,12(R6)          R6=ADDR OF ENVIRON. CNTL TABLE
         L     R6,4(R6)           R6=ADDR OF I/O RTN WORK AREA
         L     R6,0(R6)           R6=ADDR OF INPUT STACK
         TM    0(R6),X'4A'        IS ELEM. STORAGE, EXEC, & PROC
         BO    FNDSNTB2           BR YES
         LA    R11,4              ERR: CALLER IS NOT IN CLIST
         B     QUIT               RETURN
         SPACE
FNDSNTB2 DS    0H
         L     R6,0(R6)           R6=ADDR OF LIST SOURCE DESCRPTR
         L     R6,12(R6)          R6=ADDR OF 'EXECDATA'
         L     R6,0(R6)           R6=ADDR OF 1ST SYMBOL NAME TABLE
         L     R2,0(R2)           LENGTH OF 'NAME' PARM
         LR    R8,R2              COPY IT
         BCTR  R8,0               DECR FOR CLC INSTRUCTION
         EJECT
*
* SEARCH SNTBLS FOR VARIABLE NAME
*
FNDNAME  DS    0H
         LA    R7,12(R6)          ADDR OF 1ST ENTRY IN SNT
         SPACE 2
FNDNAME2 DS    0H
         CH    R2,6(R7)           CHECK LENGTH OF NAME
         BNE   FNDNAME4           BRANCH IF NAME LENGTHS DON'T MATCH
         EX    R8,CKNAME          COMPARE NAMES
         BE    CKTYPE             BRANCH IF NAMES MATCH
         SPACE 2
FNDNAME4 DS    0H
         TM    4(R7),X'01'        BRANCH IF LAST ENTRY
         BO    FNDNAME6             IN THIS SNT
         LH    R9,6(R7)           LOAD LENGTH OF NAME IN THIS ENTRY
         LA    R7,8(R9,R7)        ADDR OF NEXT ENTRY IN THIS SNT
         B     FNDNAME2           GO CHECK IT
         SPACE 2
FNDNAME6 DS    0H
         ICM   R6,15,0(R6)        ADDRESS OF NEXT SNT IN CHAIN
         BNZ   FNDNAME            BRANCH IF ANOTHER SNT EXISTS
         LA    R11,6              ERR: NAME NOT FOUND IN SNT
         B     QUIT               RETURN
         SPACE 2
*
* CHECK CLIST VARIABLE TYPE
*
CKTYPE   DS    0H
         TM    4(R7),X'E0'        BRANCH IF THIS IS A POSITIONAL
         BNZ   RTRNVAL              OR KEYWORD VARIABLE
         LA    R11,7              ERR: WRONG KIND OF VARIABLE
         B     QUIT               RETURN
         EJECT
*
* RETURN VALUE
*
RTRNVAL  DS    0H
         L     R6,0(R7)           ADDR OF SYMBOL VALUE TABLE ENTRY
         LH    R7,0(R6)           LOAD CLIST'S VARIABLE DATA LENGTH
         LTR   R7,R7              CHECK LTH OF VALUE
         BP    RTRNVAL2           BR IF GREATER THAN ZERO
         MVC   0(4,R4),=F'0'      SET LENGTH OF DATA FOR CALLER
         B     DONE               RETURN
         SPACE 2
RTRNVAL2 DS    0H
         CH    R7,=H'256'         BRANCH IF IT IS
         BNH   RTRNVAL4             NOT TOO BIG
         LA    R11,9              ERR: CLIST'S DATA LENGTH .GT. 256
         B     QUIT               RETURN
         SPACE 2
RTRNVAL4 DS    0H
         ST    R7,0(R4)           SAVE DATA LENGTH FOR CALLER
         BCTR  R7,0               DECR LENGTH FOR MVC INSTRUC.
         EX    R7,MOVEVAL         MOVE CLIST DATA TO CALLER'S AREA
         SPACE 2
*
* CLEAN UP AND RETURN
*
DONE     DS    0H
         SR    R11,R11            CLEAR RETURN CODE
         SPACE 2
QUIT     DS    0H
         ST    R11,0(R5)          SET RETURN CODE FOR USER
         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS
         SR    R15,R15            CLEAR RETURN CODE
         BR    R14                RETURN TO CALLER
         SPACE 2
*
* EXECUTED INSTRUCTIONS
*
CKNAME   CLC   0(0,R1),8(R7)      COMPARE USER'S NAME TO TABLE NAME
MOVEVAL  MVC   0(0,R3),4(R6)      MOVE DATA TO USER'S AREA (*BHA*)
         SPACE 2
EXTWA    DS    A                  EXTRACT WORK AREA
         SPACE 2
         LTORG
         END
