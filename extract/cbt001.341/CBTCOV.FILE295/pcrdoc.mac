.********************************************
.*
.*   Permission is granted to copy and distribute this
.*   software package and its accompanying documentation
.*   in any form to any one as long as (1) this notice
.*   of copyright and distribution policy remain intact
.*   and (2) the distribution is made without charge
.*   above and beyond any reasonable fee to cover costs
.*   in making and delivering the copy. All parties may
.*   make any use of this package for any purpose.
.*
.*****************
.*
.*    Users are encouraged to correct bugs and enhance the product.
.*    Please send any such modifications to the address below
.*    so we can include them in future releases.
.*
.*           Dave Jones
.*           Swift Energy Co.
.*           16825 Northchase Dr.
.*           Suite 400
.*           Houston, TX  77060
.*           (713) 874-2566
.*
.********************************************
.** Here are some fonts
.**
.df SSM10 type ('sonoran sans serif' 10 medium) codepage T1GI0361
.df figfont type ('gothic' 9 medium) codepage T1D0BASE
.bf SSM10
.********************************************
.** Intro
.**
:h2 PLI CMS Rexx (PCR)
:h3 Introduction
.*
This document describes the :hp2.PCR:hp0. utility,
developed for Swith Energy Co. by :hp2.SIDNEY:ehp2..
:hp2.PCR:hp0. allows routines written in
PLI to be nucxloaded as CMS Commands,
Rexx Functions/Subroutines, Immediate Commands and Subcommands.
Multiple PLI routines can be loaded/managed at once, all sharing
one PLI environment.
:p.
PCR is similar to NUCXLOAD/NUCXDROP, but is designed to load
PLI modules, and allows them to share one PLI environment.  Modules
are given a logical name of which they are invoked, in addition to
a nucxname with which they are loaded.  The logical name can be
either a Rexx Function/Subroutine, CMS Command, Immediate Command, or
Subcommand.
.********************************************
.** MVS or CMS
.**
:h3 SYSTEM(MVS) verses SYSTEM(CMS)
.*
If your PLI program is compiled with SYSTEM(MVS), it will
share a common PLI environment with any other SYSTEM(MVS) programs
managed by :hp2.PCR:ehp2.,
thus making execution faster.
If your PLI program is compiled with SYSTEM(CMS), it will
use a new environment upon each call.
.********************************************
.** Function lib
.**
:h3 Rexx Function Library Support
.*
The PCRRXFN assembler program is a Rexx Function Library which
can manage PLI and Assembler Functions.  The PCR command is issued
to load PLI programs, and the CMS NUCXLOAD command is used to
load Assembler programs.  This module (PCRRXFN) must be either renamed
to one of the 3 supported names (RXUSERFN, RXLOCFN or RXSYSFN), or
specified as an extension to one of those names.  The RXUSERFN module
distributed with :hp2.RFL:hp0. supports extensions, as does PCRRXFN.
:p.
There are 4 tables within PCRRXFN that can be modified to indicate
the supported modules.  The tables are:
:dl.
:dt.PACKTAB
:dd.Each entry in PACKTAB is another function package module that
will be loaded and called to see if they have the function that
is being requested by Rexx.  Any number of function packages can thus
be listed and supported, much more than just RXUSERFN, RXLOCFN and
RXSYSFN that Rexx supports.  Each entry in  PACKTAB is a character 8
and the last entry must be an 8X'FF'.
:dt.XFUNTAB
:dd.Each entry in XFUNTAB represents a Rexx function and its
corresponding MODULE which can be NUCXLOADed (generally written in
Assembler).  The entries are character 16, the first 8 bytes is
the name of the Rexx function (must begin with RX), and the last 8 bytes
is the name of the Module to be NUCXLOADed.
The last entry must be an 8X'FF'.
:dt.XPLITAB
:dd.Each entry in XPLITAB represents a Rexx function and its
corresponding MODULE which is loaded using PCR, thus the module should
be from a PLI program.
The entries are character 24, the first 8 bytes is
the name of the Rexx function (must begin with RX), and the 2nd 8 bytes
is the nucxname of which the module (last 8 bytes) is loaded.
The last entry must be an 8X'FF'.
:dt.LFUNTAB
:dd.Each entry in LFUNTAB represents a Rexx function and its
corresponding address.  The code for the function is internally linked
into PCRRXFN.
The entries are character 16, the first 8 bytes is
the name of the Rexx function (must begin with RX), and the next 4 bytes
is the relocatable address of the internally linked routine, and the
last 4 bytes is a flag which should be set to CL4'N'.
The last entry must be an 8X'FF'.
:edl.
.********************************************
.** PCR Immeds
.**
:h3 Immediate Commands
.*
When the PCR program is used, three immediate commands are defined.
They each modify a bit within a byte which each PLI program has
access.  They can be used, or ignored, depending of the PLI programs
logic.  They are:
:dl.
:dt.PTS
:dd.Trace Start.  PLI programs can check this flag to see if tracing
messages are produced.
:dt.PTE
:dd.Trace End.  This will turn off the PTS bit.
:dt.PHX
:dd.Halt eXecution.  PLI programs can test this bit at critical
locations within the program's logic, an can thus support a controlled
shut down as the users control.  This bit is reset to false when
a PLI program is first entered.
:edl.
:p.
:hp2.Note:hp0.
CMS may not invoke immediate
commands during tight CPU loops.  Some I/O or SVC must be issued before
CMS will look for immediate command.  This author does not know all
the details as to when CMS will actually notice and respond to an
immediate command.
.********************************************
.** Runtime loading
.**
:h3 Loading PLI Runtime Modules
.*
Upon first invocation of PCR, 0 or more modules from PLILIB/IBMLIB
Loadlib are nucxloaded.  The PCR code can be modified to list each
module to load from each of the two system loadlibs.  Modify the tables
LPLITAB and LIBMTAB within the PCR Assemble file.  An 'FF'x entry must
mark the end of the tables.
.********************************************
.** Syntax
.**
:h2 PCR Syntax.
Below is the syntax for the :hp2.PCR:hp0. command.
:fig frame=box place=inline.
PCR LOAD definition <( <options...> >

definition = logname ×REXX× nucxname <modname <loadlib>>
                     ×CMSC×
                     ×SUBC×
                     ×IMMC×

options = ×NOLOAD ×
          ×ENDCMD ×

PCR DROP  ×logname×
          ×*      ×

PCR RESET

PCR TERM
:efig.
:p.
Where,
:dl compact.
:dt.LOAD
:dd.specifies to Load/Define a logical name to a PLI module.
:p.
:dl.
:dt.logname
:dd.is the logical name of the Subcommand, CMS Command,
Immediate Command or Rexx Function/Subroutine being defined, indicated
by the type (SUBC, CMSC, IMMC or REXX).  The logname cannot be the same
as the nucxname.  If a nucleus extension of this name already exist,
an error occurs.
:dt.nucxname
:dd.is the Nucxleus Extension of which the PLI module is/will be
loaded.  This can NOT be the same as the logical name.
If a nucxleus extension of this name already exists, a new copy will
NOT be loaded, although the definition of the logical name continues.
:dt.modname
:dd.is the name of the PLI module.  If omitted, an equal sign is
assumed which will indicate to use the nucxname as the modname.
:dt.loadlib
:dd.is the optional load library from which the PLI module is
loaded.
:edl.
:p.
:dt.DROP
:dd.specifies to delete the logical name's definition.  The PLI program
associated with the logical name is nucxdropped, only if it was
actually loaded when the logical name was defined.
If an asterisk is specified as the logical name, all
logical names will be dropped.
:p.
:dt.RESET
:dd.will delete all logical names, and any PLI program loaded.
Since this type of call is made by CMS when a NUCXDROP PCR is issued,
the three Immediate Commands, (PTS, PTE, PHX) are also removed.
:p.
:dt.TERM
:dd.will call the PLISTART that is linked into the PCR module
to terminate the PLI environment.  This is also done when
CMS returns to "ready", via ENDCMD processing.  However, currently,
if TERM is done via ENDCMD, an abend occurs.  Thus, all execs
invoking PCR PLI modules that are compiled with the SYSTEM(MVS) option
should have a PCR TERM as the last command
so the environment does not get TERMed during ENDCMD processing.
No special provisions need be taken with PLI modules compiled
with the deefault SYSTEM(CMS) option.
:p.
:dt.NOLOAD
:dd.specifies that no PLI module is to be nucxloaded.
:p.
:dt.ENDCMD
:dd.specifies that the PLI program is to be called when CMS returns
to the "Ready" state.  Not valid for types IMMC and SUBC.
:edl.
.********************************************
.** PCRCB
.**
:h2 PCR Control Block
.*
The PCR Control Block (PCRCB) is a data structure that contains
information about the service being loaded and defined.  There
is one control block per sucessful PCR LOAD.  The two members,
PCRCBA and PCRCBP, contained in the PCR MACLIB represent the
layout of the PCRCB for Assembler and PLI.
:p.
The PCRCB_ptr will be passed as the first parameter to the PLI
programs compiled with SYSTEM(MVS).
However, PLI programs called thru PCR can also obtain the
address of the PCRCB by calling
the assembler routine PCRGETC, which is declared in the PCRCBP
member.
:p.
Below are the PLI field
names and their meaning.
:dl tsize=2i.
:dt.PCRCB_reserved
:dd.is a reserved field that PCR uses to link all the PCRCBs together.
This should not be modified.
:dt.PCRCB_global_ptr
:dd.are four bytes that all PLI programs called with PCR can share.
It's initial value is a PLI NULL, and will retain its value between
calls.  Any PLI program changing this field will change it for all
PLI programs, thus, this can be used to anchor data that multiple
PLI programs share.
:dt.PCRCB_local_ptr
:dd.are four bytes that the PLI program can modify.  These four bytes
can point to data structures that remain allocated between calls.
It's initial value is a PLI NULL, and will retain its value between
calls.
:dt.PCRCB_arg_ptr
:dd.is a pointer to the Argument String passed by CMS.  This is
the same data as represented by the CHAR(100) VARYING parameter
received by the "main" program, but can be used to process more than
100 bytes.  This is a PLI NULL for Immediate Commands.
For Rexx Functions/Subroutines, this points to the name of the
function, not the string "REXX".
:dt.PCRCB_arg_len
:dd.is the length of data to which PCRCB_arg_ptr points.  For Imediate
Commands, this is 0.
:dt.PCRCB_type
:dd.indicates how this PLI prgram was defined via the PCR LOAD.
The type will be either CMSC, REXX, SUBC or IMMC.
:dt.PCRCB_name
:dd.is the logical name of the PCR LOAD.
:dt.PCRCB_nucxname
:dd.is the name of which the PLI program was loaded in the nucleus.
:dt.PCRCB_modname
:dd.is the name of the PLI program.
:dt.PCRCB_loadlib
:dd.is the loadlib name from which the PLI program was loaded.  This is
blank if no loadlib was specified, or is NOLOAD, if the PCR LOAD was
issued with the NOLOAD option.
:dt.PCRCB_iflag_t
:dd.is a bit that is set to '1'b when the PTS immediate command
is issued, and set to '0'b when the PTE immediate command is issued.
:dt.PCRCB_iflag_hx
:dd.is a bit that is set to '1'b when the PHX immediate command
is issued.  When a PLI program is first called, this bit is '0'b.
:dt.PCRCB_OPT_endcmd
:dd.Is a Y/N flag indicating if the ENDCMD option was specified during
PCR LOAD.
:dt.PCRCB_OPT_noload
:dd.Is a Y/N flag indicating if the NOLOAD option was specified during
PCR LOAD.
:dt.PCRCB_loaded
:dd.Is a Y/N flag indicating if the PLI module was nucxloaded during
PCR LOAD.
:dt.PCRCB_spec_type
:dd.Indicates the specific type of call.  Either 'I', 'R', 'S', or
'C', incicating IMMC, REXX, SUBC or CMSC.  Also
'E' indicates this is an ENDCMD processing invocation.
:dt.PCRCB_reserved2
:dd.is reserved for future use and must not be modified.
:edl.
:p.The PCRCB_RX* fields are used only for Rexx Function or Subroutine
calls.  Their values are unpredictable for other types of invocations.
:dl tsize=2i.
:dt.PCRCB_RX_type
:dd.indicates if the PLI program was called as a Rexx Function ('F') or
a Rexx Subroutine ('S').
:dt.PCRCB_RX_arglist
:dd.is a pointer to the list of arguments with which the Rexx function
or subroutine was invoked, or NULL of there are no arguments.
:dt.PCRCB_RX_argcnt
:dd.is a integer representing the number of arguments to which
PCRCB_RX_arglist points.
:dt.PCRCB_RX_ev_ptr
:dd.points to the current EvalBlock, used for returning data to the
Rexx program.  Upon entry, the EvalBlock has room for returning 250
bytes of data, and has a length of zero.
:dt.PCRCB_RX_entry_eval
:dd.is the address of the routine to call to obtain a larger EvalBlock.
:dt.PCRCB_STOR_OBTAIN
:dd.is the address of the routine to call to obtain CMS storage.
:dt.PCRCB_STOR_RELEASE
:dd.is the address of the routine to call to release CMS storage
obtained from PCRCB_STOR_OBTAIN.
:edl.
.********************************************
.** PCREV
.**
:h2 PCR EvalBlock
.*
The PCR EvalBlock (PCREV) is a data structure used by Rexx Functions
and Subroutines to return data to Rexx.  When called as a Rexx Function
or Subroutine, an initial EvalBlock that can hold up to 250 bytes is
allocated.  The PCRCB_RX_ev_ptr within the PCRCB points to this
PCREV.  To return data to Rexx, the PLI program must set the
PCREV_data field to the return data.
If you wish not to return data, set PCREV_highlen to -1.
:p.
If a larger field is needed, the PCREV_newbytes field must be set to
the number of bytes needed, and the PCRCB_RX_entry_eval addresss
must be called.  An new PCREV will be allocated, and the old one
freed.  The used bytes within the old PCREV_data field will be
copied to the new PCREV_data field.  After calling this routine,
you must use the new value within PCRCB_RX_ev_ptr to point to and
modify the new PCREV.
:p.
The following code will allocate a larger EvalBlock.
:p.
:fig frame=box place=inline.
   /* Must do this since PLI cannot call just a pointer value */
   ENTRYADDR(PCRGETEV) = PCRCB_RX_entry_eval;

   /* Assign 240 bytes at first */
   PCREV_data = char_240;

   /* Now we find out we need more room */
   PCREV_newbytes = 500;
   call PCRGETEV;
   PCREV_ptr = PCRCB_RX_ev_ptr;

   /* Move in 200 more bytes */
   PCREV_data = PCREV_data ×× char_200;
:efig.
:p.
The members PCREVA and PCREVP of the PCR MACLIB define the PCREV
for Assembler and PLI.  The PLI fields a listed and described below.
:p.
:dl tsize=2i.
:dt.PCREV_bytes
:dd.is the current size of the PCREV_data field.  This must not be
modified.  Upon entry, this is 250.
:dt.PCREV_newbytes
:dd.should be set to a value larger that PCREV_bytes, before the
PCRCB_RX_entry_eval program is called, so a new, larger PCREV can
be allocated.  If set larger than 32767, care must be taken when
modifying PCREV_data, since PLI cannot really support a character
varying string larger than 32767.
:dt.PCREV_highlen
:dd.is the high order byte of the length field for PCREV_data.  This
is zero upon entry, and can be set to a negetive number if no data
is to be returned.
:dt.PCREV_data
:dd.is the data being returned and is defined as a character varying.
PCR actually uses the two bytes of the character varying length field
as the low order byte and the PCREV_highlen as the high order byte
making a 4 byte length field for PCREV_data.
:edl.
.********************************************
.** PLI Parameter List
.**
:h2 PLI Parameter List
.*
PLI programs compiled with SYSTEM(CMS)
will receive the normal
CHAR(100) VARYING as the first and only parameter, where
programs compiled with SYSTEM(MVS) will receive a
pointer to the
PCRCB as the first/only parameter.
The pointer to PCRCB can also be obtained by calling PCRGETC.
The use of PCRCB is required by
Rexx functions/subroutines, but is otherwise not necessary.
.********************************************
.** Accessing Rexx Parms
.**
:h2 Accessing Rexx Arguments
.*
When called as a Rexx Function/Subroutine, there are 0 or more
arguments, pointed to by PCRCB_RX_arglist.  The following code
shows how to access them.  The data
can be modified by the PLI program, if needed - perhaps to translate
them to upper case.
:p.
:fig frame=box place=inline.
   /* Get access to PCRCB (if not already done) */
   call PCRGETC(PCRCB_ptr);

   /* Loop thru the parms */
   RXARG_ptr = PCRCB_RX_arglist;
   do i=1 to PCRCB_RX_argcnt;
     /* To access/test first character */
     if RXARG_c1='*' ...

     /* To access up to 256 bytes */
     if SUBSTR(RXARG_c256,1,RXARG_len) ...

     /* To access up to 32767 bytes */
     /* (Less effiecient, but more complete) */
     if SUBSTR(RXARG_c32767,1,RXARG_len) ...

     /* Move to next arg */
     RXARG_ptr = RXARG_ptr + STORAGE(RXARG_struct);
   end;
:efig.
.********************************************
.** Keeping data around between calls
.**
:h2 Keeping data around between calls
.*
Any static variables that the PLI program alters will retain their last
value, between calls.
However,
any storage allocated via PLI allocates that the PLI program does
not free will be freed for you when you return your caller.
Thus, to allocate and keep storage between calls, the PLI program
must use an alternate ALLOC/FREE routines.  PCR provides two
entry points, PCRSTOR_OBTAIN and PCRSTOR_RELEASE to allocate
and free CMS memory.  The following code shows their use.
:p.
:fig frame=box place=inline.
   /* Must modify the entry address for the PLI entry variables */
   ENTRYADDR(PCRSTOR_OBTAIN)  = PCRCB_STOR_OBTAIN;
   ENTRYADDR(PCRSTOR_RELEASE) = PCRCB_STOR_RELEASE;

   /* Allocate 100000 bytes of storage */
   ptr = PCRSTOR_OBTAIN(100000);

   /* Or allocate enough to fill a structure */
   ptr = PCRSTOR_OBTAIN(STORAGE(some_based_struct));

   /* Save it until next call, method 1 */
   some_static_ptr = ptr;

   /* Save it until next call, method 2 */
   PCRCB_local_ptr = ptr;

   /* Allow other PLIs to access it */
   PCRCB_global_ptr = ptr;
      ...

   /* Here's how to free it */
   call PCRSTOR_RELEASE(ptr);
:efig.
.********************************************
.** Note on IMMEDs
.**
:h2 Careful with Immediate Commands
.*
Defining PLI as Immediate commands can cause problems, depending
on what the PLI program is doing.  No I/O should be done.  Remember
that PLI might need to load dynamic code from text/load libs, which
would mean doing I/O.
