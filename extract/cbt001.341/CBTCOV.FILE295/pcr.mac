***********************************************************************
*
* To generate the PCR module:
*
*   first compile the "dummy" PLI stub routine:
*      GLOBAL  TXTLIB PLILIB IBMLIB
*      PLIO PCRPLI (System(MVS)
*   next build a PCR MACLIB from all of the COPY files,
*   next assmble the PCR file:
*      GLOBAL MACLIB PCR DMSSP CMSLIB
*      HASM PCR   -or- you can use the new High Level Assembler HLASM
*   add the following line to the top of the PCR text file to tell
*   the LOADER where the entry point is:
*         ENTRY PCR
*   load and generate the module:
*      LOAD PCR (RLDSAVE CLEAR NODUP
*      GENMOD PCR (FROM PCR
*
PCR      CSECT
         REGEQU
         USING    *,R12
         USING    USERSAVE,R13
         MVC      WK_CTYP,USECTYP
         DROP     R13
         XR       R15,R15      ;This will default RC to 0
         STM      R14,R12,12(R13)
         LR       R10,R0       ;Save these Regs
         LR       R11,R1       ;Save these Regs
*
* Load as Nucleus Extension
*
         L        R9,MODSTAT
         BR       R9           ;Either NOLMOD or LMOD
         DS       0D
LMODPL   DC       CL8'NUCXLOAD'
LMPNAME  DC       CL8'PCR'
         DC       CL8'('
         DC       CL8'SERVICE'
         DC       CL8'ENDCMD'
         DC       8X'FF'
MODSTAT  DC       A(LMOD)
         DS       0H
LMOD     EQU      *
         LA       R1,LMODPL    ;Get parms for Nucxloading
         MVC      LMPNAME,0(R11)
         SVC      202          ;..
         DC       AL4(1)       ;Check error ourself
         LTR      R15,R15      ;Was it good
         BNE      FIXLMOD      ;No, must already be an extension
         LR       R1,R11
         LR       R0,R10
         SVC      202          ;Invoke the now Nucxloaded module
         DC       AL4(1)
         ST       R15,16(R13)  ;save return
         LM       R14,R12,12(R13) ;And leave...
         BR       R14
FIXLMOD  EQU      *
         LA       R9,NOLMOD
         ST       R9,MODSTAT   ;Now Nucxload will not be done again
* Define the IMMED commands
         NUCEXT   SET,NAME='PTS',IMMCMD=YES,ENTRY=ENTRY_PTS
         NUCEXT   SET,NAME='PTE',IMMCMD=YES,ENTRY=ENTRY_PTE
         NUCEXT   SET,NAME='PHX',IMMCMD=YES,ENTRY=ENTRY_PHX
* Set work word of PCR ext to point to address of active PCR entry
         USING    SCBLOCK,R2
         LA       R3,WK_CB_ACTIVE
         DMSEXS   ST,R3,SCBWKWRD
         DROP     R2
* Load any PLI stuff from loadlibs
         LA       R4,LPLITAB
         LA       R6,=CL8'PLILIB'
LPLI_PASS2 EQU    *
         CLI      0(R4),X'FF'  ;any to do?
         BE       LPLI_END     ;no...
         LA       R1,FD20      ;Clear filedef
         SVC      202          ;
         DC       AL4(1)       ;
         LA       R1,FD10      ;filedef the loadlib
         MVC      FD10_LOAD,0(R6)
         SVC      202          ;
         DC       AL4(1)       ;
         LA       R1,NL20      ;used for nucxload from loadlib
LPLI_LOOP EQU     *
         MVC      NL20_NUCX,0(R4)  ;Move module name
         MVC      NL20_MOD,0(R4)  ;Move module name
         SVC      202          ;Do the load
         DC       AL4(1)       ;
         LA       R4,8(R4)     ;next one
         CLI      0(R4),X'FF'  ;Last entry?
         BNE      LPLI_LOOP
         LA       R1,FD20      ;Clear filedef
         SVC      202          ;
         DC       AL4(1)       ;
LPLI_END EQU      *
         CLI      0(R6),C'I'   ;Was this IBMLIB?
         BE       NOLMOD       ;Yes, last one
         LA       R4,LIBMTAB
         LA       R6,=CL8'IBMLIB'
         B        LPLI_PASS2
**
NOLMOD   EQU      *
************************
** See if we are Loading, Droping, or Reseting all
*
         USING    PARMS,R11
         CLIBE    WK_CTYP,X'FE',TERMREQ    ;Finis the PLI Environment
         CLIBE    WORD1,X'FF',LEAVE        ;Any parms
         CLCBE    WORD2,=CL8'LOAD',LOADREQ ;Do LOAD Request
         CLCBE    WORD2,=CL8'DROP',DROPREQ ;Do DROP Request
         CLCBE    WORD2,=CL8'RESET',RESETREQ ;Do RESET
         CLCBE    WORD2,=CL8'TERM',TERMREQ ;Do TERM
*
         B        BADCALL
************************
** Load Request
*
LOADREQ  EQU      *
         MVI      WK_OPT_NOLOAD,C'N'   ;Default options
         MVI      WK_OPT_ENDCMD,C'N'   ;
*
         CLIBE    WORD3,X'FF',BADCALL
         MVC      WK_NAME,WORD3
         CLIBE    WORD4,X'FF',BADCALL
         CLCBE    WORD4,=CL8'REXX',L_W4_OK
         CLCBE    WORD4,=CL8'SUBC',L_W4_OK
         CLCBE    WORD4,=CL8'CMSC',L_W4_OK
         CLCBE    WORD4,=CL8'IMMC',L_W4_OK
         B        BADCALL
L_W4_OK  EQU      *
         MVC      WK_TYPE,WORD4
         CLIBE    WORD5,X'FF',BADCALL
         MVC      WK_NUCXNAME,WORD5
*
         MVI      WK_MODNAME,C'='        ;Default the MODNAME
         XC       WK_LOADLIB,WK_LOADLIB  ;and LOADLIB
         LA       R11,WORD6              ;So we can use WORD1
         CLIBE    WORD1,C'(',L_OPTS      ;Go do options
         CLIBE    WORD1,X'FF',L_DEFAULTS ;Go do defaults
         MVC      WK_MODNAME,WORD1
         LA       R11,WORD2              ;So we can use WORD1
         CLIBE    WORD1,C'(',L_OPTS      ;Go do options
         CLIBE    WORD1,X'FF',L_DEFAULTS ;Go do defaults
         MVC      WK_LOADLIB,WORD7
         LA       R11,WORD2              ;So we can use WORD1
         CLIBE    WORD1,C'(',L_OPTS      ;Go do options
         CLIBE    WORD1,X'FF',L_DEFAULTS ;Go do defaults
         B        BADCALL
L_OPTS   EQU     *
         LA       R11,WORD2              ;So we can use WORD1
         CLIBE    WORD1,X'FF',L_DEFAULTS ;Go do defaults
         LA       R4,WK_OPT_NOLOAD
         CLCBE    WORD1,=CL8'NOLOAD',L_SET_OPT
         LA       R4,WK_OPT_ENDCMD
         CLCBE    WORD1,=CL8'ENDCMD',L_SET_OPT
         B        BADCALL
L_SET_OPT EQU     *
         MVI      0(R4),C'Y'
         B        L_OPTS        ;Do all that was specified
L_DEFAULTS EQU    *
         DROP     R11
         CLI      WK_MODNAME,C'='  ;Use same name
         BNE      L_D2
         MVC      WK_MODNAME,WK_NUCXNAME
L_D2     EQU      *
         CLIBE    WK_TYPE,C'R',L_D3  ;Rexx is okay for ENDCMD
         CLIBE    WK_TYPE,C'C',L_D3  ;CMSC is okay for ENDCMD
         CLIBE    WK_OPT_ENDCMD,C'Y',BADCALL
L_D3     EQU      *
***************************************************
*** Load MODNAME as NUCXNAME (maybe from LOADLIB)
***
         XR       R15,R15
         MVI      WK_LOADED,C'N'              ;Did not load
         CLIBE    WK_OPT_NOLOAD,C'Y',L_DEFINE ;Skip loading?
*
         NUCEXT   QUERY,NAME=WK_NUCXNAME
         LTR      R15,R15
         BE       L_DEFINE          ;It's already loaded
         MVI      WK_LOADED,C'Y'    ;Say loading did take place
         CLI      WK_LOADLIB,X'00'  ;Is a loadlib there
         BNE      L_LOADLIB
L_MODULE EQU     *
         LA       R1,NL10      ;Get parms for Nucxloading
         MVC      NL10_NUCX,WK_NUCXNAME
         MVC      NL10_MOD,WK_MODNAME
         SVC      202          ;..
         DC       AL4(1)
         B        L_DEFINE
L_LOADLIB EQU     *
**       (Issue FILEDEF for LOADLIB)
         LA       R1,FD10
         MVC      FD10_LOAD,WK_LOADLIB
         SVC      202          ;..
         DC       AL4(1)       ;Check error ourself
**       (Issue NUCXLOAD MODNAME NUCXNAME PCRDD)
         LA       R1,NL20      ;Get parms for Nucxloading
         MVC      NL20_NUCX,WK_NUCXNAME
         MVC      NL20_MOD,WK_MODNAME
         SVC      202          ;..
         DC       AL4(1)       ;Check error ourself
         LR       R5,R15
**       (Issue FILEDEF CLEAR)
         LA       R1,FD20
         SVC      202
         DC       AL4(1)
         LR       R15,R5
L_DEFINE EQU      *
         LTR      R15,R15
         BNE      L_ERR_LOAD     ;Could not be loaded
***************************************************
*** Allocate a PCRCB and set it up
***
         LA       R0,PCRCB_BYTES
         CMSSTOR  OBTAIN,DWORDS=(0),ERROR=ERR_MEMORY
         LR       R11,R1
         USING    PCRCB,R11
         MVC      CB_LOCAL,PLINULL
         MVC      CB_TYPE,WK_TYPE
         MVC      CB_NAME,WK_NAME
         MVC      CB_NUCXNAME,WK_NUCXNAME
         MVC      CB_MODNAME,WK_MODNAME
         MVC      CB_LOADLIB,WK_LOADLIB
         MVC      CB_LOADED,WK_LOADED
         MVC      CB_OPT_ENDCMD,WK_OPT_ENDCMD
         MVC      CB_OPT_NOLOAD,WK_OPT_NOLOAD
         LA       R2,PCR_ENTRY_EVAL
         ST       R2,CB_RX_ENTRY_EVAL
         LA       R2,PCRSTOR_OBTAIN
         ST       R2,CB_PCRSTOR_OBTAIN
         LA       R2,PCRSTOR_RELEASE
         ST       R2,CB_PCRSTOR_RELEASE
         MVC      CB_NEXT,WK_CB_HEAD
         ST       R11,WK_CB_HEAD
***************************************************
*** Define NAME as proper nucleus extension
***
         CLI      CB_TYPE,C'S'         ;Is it a sub command?
         BE       DEF_SUB
         XR       R2,R2                ;say NO to IMMED
         CLI      CB_TYPE,C'I'         ;Is is an IMMED Command?
         BNE      DEF_NUC
         LA       R2,1                 ;say YES to IMMED
DEF_NUC  EQU      *
         NUCEXT   QUERY,NAME=WK_NAME
         LTR      R15,R15
         BE       L_ERR_DEF
         XR       R4,R4
         CLI      CB_OPT_ENDCMD,C'Y'  ;Is is a ENDCMD
         BNE      DEF_NUC3
         LA       R4,1
DEF_NUC3 EQU      *
         NUCEXT   SET,                                                 X
               NAME=WK_NAME,                                           X
               ENTRY=PCR_ENTRY,                                        X
               UWORD=(R11),                                            X
               IMMCMD=(R2),                                            X
               ENDCMD=(R4)
         B        LEAVE
DEF_SUB  EQU      *
         SUBCOM   QUERY,NAME=WK_NAME
         LTR      R15,R15
         BE       L_ERR_DEF
         SUBCOM   SET,                                                 X
               NAME=WK_NAME,                                           X
               ENTRY=PCR_ENTRY,                                        X
               UWORD=(R11)
         B        LEAVE
L_ERR_LOAD EQU    *
         LINEDIT  TEXT='Could not load module during PCR LOAD'
         LA       R15,4
         ST       R15,16(R13)
         B        LEAVE
L_ERR_DEF  EQU    *
         LINEDIT  TEXT='Logical name already exist for PCR'
         LA       R15,4
         ST       R15,16(R13)
         B        LEAVE
         DROP     R11
***************************************************
*** TERM request  (Also done at ENDCMD)
***
TERMREQ  EQU      *
         CLC      EP10_ENV,=XL8'0000000000000000'
         BE       LEAVE
         MVC      TP10_ENV,EP10_ENV
         XC       EP10_ENV,EP10_ENV
         LA       R1,TP20_A
         L        R15,=V(PCRPLI)
         L        R15,=V(PLISTART)
         ST       R13,WK_R13
         LA       R13,WK_SAVE2
         BALR     R14,R15
         L        R13,WK_R13               ;restore R13
         B        LEAVE
***************************************************
*** Drop request
***
DROPREQ  EQU      *
         USING    PARMS,R11
         CLI      WORD3,X'FF'    ;Get name parm
         BE       BADCALL
         MVC      WK_NAME,WORD3
         DROP     R11
D_START  EQU      *
         LA       R9,WK_CB_HEAD
         L        R10,WK_CB_HEAD
         USING    PCRCB,R11
D_LOOP   EQU      *
         LTR      R11,R10         ;Next/First CB
         BNH      D_END
         L        R10,CB_NEXT     ;Access next one
         CLI      WK_NAME,C'*'    ;Are we droping everything?
         BE       D_DROP
         CLC      WK_NAME,CB_NAME ;Are we droping this one?
         BE       D_DROP
         LR       R9,R11          ;Now this is the previous one
         B        D_LOOP
D_DROP   EQU      *
         CLI      CB_TYPE,C'S'         ;Is is an SUBCOM
         BE       DROP_SUB
DROP_NUC EQU      *
         NUCEXT   CLR,NAME=CB_NAME
         B        DROP_MOD
DROP_SUB EQU      *
         SUBCOM   CLR,NAME=CB_NAME
DROP_MOD EQU      *
         CLI      CB_LOADED,C'Y'   ;Did we load a module for this one?
         BNE      D_LOOP           ;No need to drop - did not laod
         LA       R1,ND10
         MVC      ND10_NUCX,CB_NUCXNAME
         SVC      202
         DC       AL4(1)
* unlink CB list
         ST       R10,0(R9)
* Free the PCRCB
         LA       R0,PCRCB_BYTES
         CMSSTOR  RELEASE,BYTES=(0),ADDR=(R11),ERROR=ERR_MEMORY
         B        D_LOOP
D_END    EQU      *
         B        LEAVE
***************************************************
*** Reset request (Drop all and undefine PTS, PTE, PHX)
***
RESETREQ EQU      *
         NUCEXT   CLR,NAME='PTS',ERROR=*
         NUCEXT   CLR,NAME='PTE',ERROR=*
         NUCEXT   CLR,NAME='PHX',ERROR=*
         MVI      WK_NAME,C'*'
         B        D_START
***********************************
**
**Leave now (Exit for entry PCR LOAD/DROP/RESET)
**
LEAVE    EQU      *
         LM       R14,R12,12(R13)
         BR       R14
*
ERR_MEMORY EQU    *
         LA       R15,20
         ST       R15,16(R13)
         LINEDIT  TEXT='Memory error in PCR'
         B        LEAVE
BADCALL  EQU      *
         LA       R15,8
         ST       R15,16(R13)
         LINEDIT  TEXT='Invalid call to PCR'
         B        LEAVE
DEF_ERROR  EQU    *
         LA       R15,16
         ST       R15,16(R13)
         LINEDIT  TEXT='Unable to define PCR entry'
         B        LEAVE
         DROP     R12
***************************************************
*** Entry for PTS, PTE, PHX
***
ENTRY_PTS EQU     *
         USING    *,R12
         L        R3,WK_IFLAG_ADDR
         OI       0(R3),X'80'    ;Turn it on
         XR       R15,R15
         BR       R14
         DROP     R12
ENTRY_PTE EQU     *
         USING    *,R12
         L        R3,WK_IFLAG_ADDR
         NI       0(R3),X'7F'    ;Turn it off
         XR       R15,R15
         BR       R14
         DROP     R12
ENTRY_PHX EQU     *
         USING    *,R12
         L        R3,WK_IFLAG_ADDR
         OI       0(R3),X'40'    ;Turn it on
         XR       R15,R15
         BR       R14
         DROP     R12
******************************************************
*** Entry for getting new EVALBLOCK  (Called from PLI)
***
PCR_ENTRY_EVAL EQU *
         STM      R14,R12,12(R13)
         LR       R9,R15
         XR       R15,R15
         ST       R15,16(R13)
         USING    PCR_ENTRY_EVAL,R9
         L        R11,WK_CB_ACTIVE
         USING    PCRCB,R11
         L        R10,CB_RX_EVALBLOK
         USING    PCREV,R10
         L        R2,EV_NEWBYTES
         L        R8,EV_BYTES
         LA       R3,16(R2)       ;Include fixed part of EV
         LA       R8,16(R8)
         CMSSTOR  OBTAIN,BYTES=(R3),ERROR=PCR_EE_LEAVE
         L        R7,EV_USED      ;Get used amount
         ST       R2,EV_BYTES     ;save bytes
         LR       R5,R2           ;in here too for copy
         LA       R6,EV_DATA      ;get old ones address
         LR       R3,R10          ;keep to free later
         LR       R10,R1          ;Now use new one
         ST       R1,CB_RX_EVALBLOK
         LA       R4,EV_DATA
         MVCL     R4,R6
         MVC      0(16,R1),0(R3)   ;Copy old fixed part
         CMSSTOR  RELEASE,ADDR=(R3),BYTES=(R8),ERROR=PCR_EE_LEAVE
         DROP     R9
         DROP     R10
         DROP     R11
*
PCR_EE_LEAVE EQU  *
         LM       R14,R12,12(R13)
         BR       R14
******************************************************
*** Entry for getting storage PCRSTOR_OBTAIN (PLI Entry)
***
PCRSTOR_OBTAIN EQU *
         STM      R14,R12,12(R13)
         LR       R9,R15
         XR       R15,R15          ;Default to good RC
         ST       R15,16(R13)
         USING    PCRSTOR_OBTAIN,R9
         L        R2,0(R1)         ;addr of Number of bytes to get
         L        R2,0(R2)         ;Number of bytes to get
         L        R3,4(R1)         ;Where to put value
         LA       R2,8(R2)         ;Get eight more bytes
         CMSSTOR  OBTAIN,BYTES=(R2),ERROR=PCRSTOR_OBTAIN_ERROR
         ST       R2,0(R1)         ;Save the size
         LA       R1,8(R1)         ;Skip passed header
         ST       R1,0(R3)         ;Tell them the address
*
PCRSTOR_OBTAIN_LEAVE EQU *
         LM       R14,R12,12(R13)
         BR       R14
PCRSTOR_OBTAIN_ERROR EQU *
         MVC      0(4,R3),PLINULL
         ST       R15,16(R13)
         B        PCRSTOR_OBTAIN_LEAVE
         DROP     R9
******************************************************
*** Entry for freeing storage PCRSTOR_RELEASE (PLI Entry)
***
PCRSTOR_RELEASE EQU *
         STM      R14,R12,12(R13)
         LR       R9,R15
         USING    PCRSTOR_RELEASE,R9
         L        R2,0(R1)         ;addr of address to free
         L        R2,0(R2)         ;Address to free
         LA       R3,8             ;size of header
         SR       R2,R3            ;Real address
         L        R3,0(R2)         ;Bytes to free
         CMSSTOR  RELEASE,BYTES=(R3),ADDR=(R2)
         ST       R15,16(R13)      ;Return code
         LM       R14,R12,12(R13)
         BR       R14
         DROP     R9
******************************************************
*** Entry for all PLI nucxexts
***
PCR_ENTRY EQU     *
         USING    *,R12
         USING    USERSAVE,R13
         MVC      WK_CTYP,USECTYP
         DROP     R13
         STM      R14,R12,12(R13)
*
         USING    SCBLOCK,R2
         L        R11,SCBWKWRD        ;access this PCRCB
         DROP     R2
         USING    PCRCB,R11
*
         L        R15,=F'-2'          ;is it an invalid recursion
         LT       R10,WK_CB_ACTIVE    ;
         BH       PE_LEAVE_HURRY      ;
         ST       R11,WK_CB_ACTIVE    ;Now this one is active
*
         LR       R10,R0              ;Access R0
         LA       R2,CB_IFLAG         ;Copy the Immed Flag byte
         MVC      CB_IFLAG,WK_IFLAG   ;
         ST       R2,WK_IFLAG_ADDR    ;
         NI       0(R2),X'BF'         ;Turn off HX
         MVC      CB_GLOBAL,WK_GLOBAL ;Copy the global value
*
         MVC      CB_RX_ARGLIST,PLINULL      ;Incase there are none
         MVI      CB_RX_TYPE,X'40'           ;Incase there are none
         XC       CB_RX_ARGCNT,CB_RX_ARGCNT  ;.
         MVC      CB_RX_EVALBLOK,PLINULL
         XC       WK_EVALADDR,WK_EVALADDR
         ST       R11,EP10_P1DATA        ;pass CB
         MVC      CB_ARGPTR,PLINULL     ;
         XC       CB_ARGLEN,CB_ARGLEN   ;
         CLI      CB_TYPE,C'I'        ;Immed call
         BE       PE_NO_ARGS
         L        R4,4(R10)           ;what was passed, Begin
         L        R3,8(R10)           ;what was passed, end
         SR       R3,R4               ;length
         ST       R4,CB_ARGPTR   ;Save actual address
         ST       R3,CB_ARGLEN   ;and length
PE_NO_ARGS EQU    *
         CLI      WK_CTYP,X'05'          ;Is EPLIST available (REXX)
         BE       PE_REXXCALL
         MVC      CB_SPEC_TYPE,CB_TYPE
         CLI      WK_CTYP,X'FE'      ;Is it ENDCMD?
         BNE      PE_CALLIT
         MVI      CB_SPEC_TYPE,C'E'  ;Say its a ENDCMD  call
         B        PE_CALLIT
PE_REXXCALL EQU   *
         MVI      CB_SPEC_TYPE,C'R'
         MVI      CB_RX_TYPE,C'F'          ;Say function call
         LTR      R10,R10                  ;Sis it function
         BNL      PE_RC_FUN
         MVI      CB_RX_TYPE,C'S'          ;Say subroutine call
PE_RC_FUN EQU     *
         XR       R5,R5                    ;No args
         LT       R4,16(R10)               ;Access ARGLIST
         BNH      PE_RC_NOARG
         ST       R4,CB_RX_ARGLIST
PE_RC_LOOP EQU    *
         CLC      0(4,R4),=F'-1'         ;Is this one last?
         BE       PE_RC_NOARG
         LA       R5,1(R5)
         LA       R4,8(R4)
         B        PE_RC_LOOP
PE_RC_NOARG EQU   *
         ST       R5,CB_RX_ARGCNT         ;Tell them how many
         MVC      WK_EVALADDR,20(R10)     ;Where to put eval
         LA       R0,266                  ;Eval block for 250 bytes
         CMSSTOR  OBTAIN,BYTES=(R0),ERROR=PE_NO_EVAL
         ST       R1,CB_RX_EVALBLOK
         USING    PCREV,R1
         MVC      EV_BYTES,=F'250'
         MVC      EV_NEWBYTES,=F'250'
         XC       EV_USED,EV_USED
         DROP     R1
PE_CALLIT   EQU   *
         NUCEXT   QUERY,NAME=CB_NUCXNAME,ERROR=PE_NOT_FOUND
         USING    SCBLOCK,R1
         L        R15,SCBENTR
         DROP     R1
         LA       R1,EP20_A
         LR       R0,R10          ;In case they are not system(MVS)
         ST       R13,WK_R13
         LA       R13,WK_SAVE2
         BALR     R14,R15                  ;Make PLI Call
         L        R13,WK_R13               ;restore R13
         LT       R2,WK_EVALADDR           ;Do we have a Rexx EVALBLOK
         BNH      PE_LEAVE                 ;No, leave
         L        R3,CB_RX_EVALBLOK        ;Here's the evalblok
         USING    PCREV,R3                 ;access it
         LT       R5,EV_USED               ;Any data to return
         BL       PE_NO_RETEVAL            ;No, free it
         LTR      R15,R15                  ;Any data to return
         BNE      PE_NO_RETEVAL            ;No, free it
         L        R4,EV_BYTES              ;clean up eval blok
         LA       R4,23(R4)                ;16 for fixed part + 7 round
         SRL      R4,3                     ;Make DWs
         XC       0(16,R3),0(R3)           ;zero out fixed part
         ST       R4,EV_DWORDS
         ST       R5,EV_NEWBYTES           ;Defferent location
         ST       R3,0(R2)                 ;and tell rexx about it
         B        PE_LEAVE
PE_NO_RETEVAL EQU *
         LA       R5,16(R5)
         LR       R6,R15
         CMSSTOR  RELEASE,BYTES=(R5),ADDR=(R3)
         LR       R15,R6
         DROP     R3
*
PE_LEAVE EQU      *
         LA       R2,WK_IFLAG         ;Copy the Immed Flag byte
         MVC      WK_IFLAG,CB_IFLAG   ;
         ST       R2,WK_IFLAG_ADDR    ;
         MVC      WK_GLOBAL,CB_GLOBAL ;save the global value
         XC       WK_CB_ACTIVE,WK_CB_ACTIVE  ;None active now
PE_LEAVE_HURRY EQU      *
         ST       R15,16(R13)
         LM       R14,R12,12(R13)
         BR       R14
*
PE_NOT_FOUND EQU  *
         L        R15,=F'-3'
         B        PE_LEAVE
*
PE_NO_EVAL   EQU  *
         L        R15,=F'-4'
         B        PE_LEAVE
*
         DROP     R11
         DROP     R12
**********************************************
**********************************************
**
** LCMS/PLI Table - Modules to load from IBMLIB/PLILIB on first call
**
         DS       0D
LPLITAB  EQU      *
         DC       CL8'IBMBPPL'
*        DC       CL8'MODULE' etc., etc.......
         DC       8X'FF'
LIBMTAB  EQU      *
         DC       CL8'IBMBLIIA'
         DC       CL8'IBMBPCL'
*        DC       CL8'MODULE'  etc., etc.....
         DC       8X'FF'
**********************************************
         DS       0D
*
EP10     DC       F'20'
EP10_ENV DS       0CL8
         DC       F'0'
         DC       F'0'
         DC       A(EP10_PARM1)
         DC       F'0'
EP10_PARM1 DC     A(X'80000000'+EP10_P1DATA)
EP10_P1DATA DS    F
*
         DS       0D
EP20_A   DC       A(X'80000000'+EP20)
EP20     DC       H'16'
         DC       H'0'
         DC       CL8'CALL'
         DC       A(EP10)
*
TP10     DC       F'20'
TP10_ENV DS       0CL8
         DC       F'0'
         DC       F'0'
         DC       F'0'
         DC       F'0'
*
         DS       0D
TP20_A   DC       A(X'80000000'+TP20)
TP20     DC       H'16'
         DC       H'0'
         DC       CL8'TERM'
         DC       A(TP10)
*
ND10     DC       CL8'NUCXDROP'
ND10_NUCX DS      CL8
ND10_FF  DC       8X'FF'
*
NL10     DC       CL8'NUCXLOAD'
NL10_NUCX DS      CL8
NL10_MOD  DS      CL8
NL10_FF  DC       8X'FF'
*
NL20     DC       CL8'NUCXLOAD'
NL20_NUCX DS      CL8
NL20_MOD  DS      CL8
         DC       CL8'PCRDD'
NL20_FF  DC       8X'FF'
*
FD10     DC       CL8'FILEDEF'
         DC       CL8'PCRDD'
         DC       CL8'DISK'
FD10_LOAD DS      CL8
         DC       CL8'LOADLIB'
         DC       CL8'*'
         DC       CL8'('
         DC       CL8'PERM'
FD10_FF  DC       8X'FF'
*
FD20     DC       CL8'FILEDEF'
FD20_DDNAME DC    CL8'PCRDD'
         DC       CL8'CLEAR'
FD20_FF  DC       8X'FF'
*
PLINULL  DC       X'00000000'
*************************
* Work data
WK_SAVE2      DS  20F
WK_NAME       DS  CL8     ;Name of service (logical name)
WK_TYPE       DS  CL4     ;The type - REXX, IMMC, CMSC, SUBC
WK_NUCXNAME   DS  CL8     ;Name that PLI module is loaded
WK_MODNAME    DS  CL8     ;PLI Module name
WK_LOADLIB    DS  CL8     ;From what loadlib (or NOLOAD)
WK_CB_HEAD    DC  A(0)    ;Start of list of PCRCBs
WK_GLOBAL     DC  X'00000000'  ;Common Global value for all PLIs
WK_IFLAG_ADDR DC  A(WK_IFLAG)       ;Address of IFLAG
WK_CB_ACTIVE  DC  A(0)    ;The active PCRCB or 0 if none active
WK_R13        DS  A       ;So we can save R13
WK_EVALADDR   DS  A       ;Where to put the evalblok (or 0)
WK_IFLAG      DC  XL1'00' ;common PTS, PTE and PHX flag byte
WK_LOADED     DS  CL1     ;Y/N Did NUCXLOAD occur
WK_OPT_NOLOAD DS  CL1     ;Y/N was this option specified
WK_OPT_ENDCMD DS  CL1     ;Y/N was this option specified
WK_CTYP        DS CL1     ;The call type from USERSAVE
         LTORG
PARMS    DSECT
WORD1    DS       CL8
WORD2    DS       CL8
WORD3    DS       CL8
WORD4    DS       CL8
WORD5    DS       CL8
WORD6    DS       CL8
WORD7    DS       CL8
         PCRCBA
         PCREVA
         SCBLOCK
         USERSAVE
         END
