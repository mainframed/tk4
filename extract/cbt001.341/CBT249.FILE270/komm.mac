*          DATA SET 761KKKOMM  AT LEVEL 006 AS OF 10/04/83
KOMM     TITLE 'V2M4 - CLIST COMMUNICATION ROUTINE FOR 3270 TERMINALS'
         MACRO
         REGEQU
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
         MACRO
&LAB     LEAVER &WR=R13,&WL=WORKLEN
&LAB     LR    R1,&WR             WORKAREA ADDR FOR FREEMAIN
         L     R0,=A(&WL)         WORKAREA LEN   "    "
         L     R13,4(R13)         GET CALLERS SAVEAREA ADDR
         LR    R11,R15            SAVE RETURN CODE
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R11            RESTORE RETURN CODE
         RETURN (14,12),RC=(15)
         MEND
         MACRO
&LAB     LEAVENR
&LAB     L     R13,4(R13)         GET CALLERS SAVEAREA ADDR
         RETURN (14,12),RC=(15)
         MEND
         MACRO
&LAB     KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA
*                  DEFAULT OPERANDS :
*        KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA
*                            CPPL IS THE REGISTER CONTAINING THE
*                                 POINTER TO THE COMMAND PROCESSOR
*                                 PARAMETER LIST.
*                            ANS  IS A FULLWORD WHERE PARSE RETURNS
*                                 THE POINTER TO HIS ANSWER (IKJPARMD).
*                            ECB  IS A FULLWORD.
*                            PCL  IS THE NAME OF THE PARSE CONTROL
*                                 LIST CSECT (IKJPARM).
*                            PPLA IS A 7 FULLWORD AREA USED FOR
*                                 THE PARSE PARAMETER LIST.
*
*        KKPARSE             USES REGS R14,R15,R1,&CPPL REG
*
         USING CPPL,&CPPL         POINTS TO CPPL (PARM LIST)
*
&LAB     LA    R1,&PPLA           R1->PPL AREA
         USING PPL,R1             TELL ASSEMBLER POINTS TO PPL AREA
*
*                         CONSTRUCT PARSE PARAMETER LIST
*                                           FOR IKJPARS :
*
         MVC   PPLUPT,CPPLUPT     UPT
         MVC   PPLECT,CPPLECT     ECT
         LA    R15,&ECB           ECB
         ST    R15,PPLECB
         L     R15,=V(&PCL.)      PCL
         ST    R15,PPLPCL
         LA    R15,&ANS           ANS
         ST    R15,PPLANS
         MVC   PPLCBUF,CPPLCBUF   CBUF
         XC    PPLUWA,PPLUWA
*
         DROP  R1
         EJECT
*        CALLTSSR EP=IKJPARS      CALL PARSE:
         CALLTSSR EP=IKJPARS      CALL PARSE:
         EJECT
*
*                        DSECTS NEEDED BY PARSE:
*
*CPPL    IKJCPPL
CPPL     IKJCPPL
*PPL     IKJPPL
PPL      IKJPPL
*
CVTMAP   DSECT
         ORG   CVTMAP+524
CVTPARS  DS    F
CVTPTR   EQU   16
*
*
&SYSECT  CSECT
         MEND
         MACRO
&L1      MOVE  &TO,&TL,&FROM,&FL,&PAD=
         LCLA  &NL,&UL,&VL
         LCLC  &TO$,&TL$,&FROM$,&FL$
&TO$     SETC  '&TO'
&TL$     SETC  '&TL'
&FROM$   SETC  '&FROM'
&FL$     SETC  '&FL'
         AIF   ('&TO'(1,1) NE '(').TLC
&TO$     SETC  '0&TO'
.TLC     AIF   ('&TL'(1,1) NE '(').FC
&TL$     SETC  '0&TL'
.FC      AIF   ('&FROM'(1,1) NE '(').FLC
&FROM$   SETC  '0&FROM'
.FLC     AIF   (T'&FL EQ 'O').OO
         AIF   ('&FL'(1,1) NE '(').OO
&FL$     SETC  '0&FL'
.OO      ANOP
&L1      STM   14,12,12(13)
         LA    R2,&TO$
         LA    R3,&TL$
         LA    R4,&FROM$
         AIF   (T'&FL EQ 'O').UTL
         LA    R5,&FL$
         AGO   .PC
.UTL     LA    R5,&TL$
.PC      AIF   ('&PAD' EQ '').NPC
         ICM   R5,8,=&PAD
.NPC     MVCL  R2,R4
         LM    14,12,12(13)
         MEND
         MACRO
&LAB1    ENTERR  &SA=SAVEAREA,&WA=WORKAREA,&WL=WORKLEN,&LEVEL=,&R=,   XX
               &CLEAR=NO
         MNOTE ' CLEAR=&CLEAR,SA=&SA,WA=&WA,WL=&WL,LEVEL=&LEVEL'
&LAB1    CSECT
         SAVE  (14,12),,&LAB1-&LEVEL
         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING
         USING &LAB1,R12
         LR    R10,R1             SAVE PARM PTR R10->PARM PTR
         L     R0,=A(&WL)         R0=GET LENGTH
         GETMAIN R,LV=(0)         R1->WORKAREA
         LR    R11,R13            R11->CALLERS SAVEAREA
         LR    R13,R1             R13->WORKAREA
         USING &WA.,R13
         AIF   ('&CLEAR' NE 'YES').NCLEAR
         L     R15,=A(&WL)        R0=GET LENGTH
         S     R15,=F'72'         SKIP REGS
         MOVE  72(13),(15),0,0,PAD=X'00'
.NCLEAR  ANOP
         ST    R11,&SA.+4         SAVE HIS SAVEAREA PTR
         LA    R13,&SA            R13->SAVEAREA (MINE)
         ST    R13,8(,R11)        MINE IN HIS
         LR    R11,R1             R11->WORKAREA IN CASE NOT SAME AS R13
*                       WORKAREA ADDR IS STILL R13 FOR
*                       THE ASSEMBLER - IF DIFFERENT FROM R13
*                       THEN USE: DROP R13 AND USING &WA.,R11
         LR    R1,R10             RESTORE PARM PTR PTR
         AIF   ('&R' EQ 'NO').NRE
         REGEQU
.NRE     ANOP
         MEND
         MACRO
&LAB1    ENTERNR &SA=SAVEAREA
&LAB1    START
         SAVE  (14,12),,*         HO-HUM
         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING
         USING &LAB1,R12
         ST    R13,&SA.+4         SAVE HIS SAVEAREA PTR
         LR    R11,R13            SAVE THE SAVE POINTER
         LA    R13,&SA            R13->SAVEAREA (MINE)
         ST    R13,8(,R11)        MINE IN HIS
         B     ENTEX
&SA      DS    18F
         REGEQU
ENTEX    DS    0H
         MEND
         MACRO
&LAB1    COMMENT &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K
         MEND
         EJECT
*
* TSO COMMAND KOMM - CLIST COMMUNICATION ROUTINE FOR 3270 TERMINALS
*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).
*          (206) 753-2215   *****  KOMM  V2M4          *****
*              V2M4 - MODIFIED FOR VTAM AND 3279 ORDERS 8/3/83
*
*  SYNTAX -   KOMM  WCC('CHAR') RESET('LINE') CLEAR
*                   MESSAGE('ROW','COL','MESS') CURSOR('ROW','COL')
*                   READTO('VAR')  AI
*
*  OPERANDS -
*             WCC('CHAR') -  'CHAR' IS THE WRITE CONTROL CHARACTER TO
*                          BE USED. 'C' IS THE DEFAULT.
*
*             RESET('LINE') - 'LINE' IS THE LINE YOU WISH TCAM'S LINE
*                          COUNTER TO BE SET TO. NORMAL OUTPUT BEGINS
*                          AT THIS LINE. 'LINE' DEFAULTS TO '1'.
*
*             CLEAR  -     CAUSES THE SCREEN TO BE CLEARED.
*
*             MESSAGE('ROW','COL','MESS') - DISPLAYS A MESSAGE ON THE
*                          SCREEN. 'ROW' AND 'COL' ARE THE ROW AND
*                          COLUMN WHERE THE MESSAGE STARTS. 'MESS' IS
*                          THE MESSAGE (SEE NOTE).
*
*             CURSOR('ROW','COL') - MOVES THE CURSOR TO LOCATION GIVEN.
*
*             READTO('VAR') - OBTAINS REPLY AND PLACES IN CLIST VAR-
*                          IABLE 'VAR'. 'VAR' MUST BE PRE-INITIALIZED
*                          TO HAVE SUFFICIENT ROOM FOR THE REPLY.
*
*             AI  -  SUPPRESSES THE REMOVAL OF LEADING SBA FROM REPLY
         EJECT
*
* RETURN-CODES : KOMM RETURNS CODES IN CLIST VAR LASTCC AS FOLLOWS:
*
*  WRITE OPERATION ONLY -
*                       0 - NORMAL COMPLETION
*                     256 - PARSE ERROR
*                   OTHER - I/O ERROR OCCURED
*
*  WRITE AND READ OPERATION - THE RETURN CODE NORMALLY INDICATES WHICH
*                                TRANSMIT KEY WAS PRESSED:
*
*   241 - PF1   193 - PF13               1 - TEST REQ
*   242 - PF2   194 - PF14             110 - PA2
*   243 - PF3   195 - PF15             125 - ENTER
*   244 - PF4   196 - PF16            2048 - PA1 (KOMM INTERRUPTED
*   245 - PF5   197 - PF17                             THEN RESUMED)
*   246 - PF6   198 - PF18
*   247 - PF7   199 - PF19
*   248 - PF8   200 - PF20
*   249 - PF9   201 - PF21
*   122 - PF10   74 - PF22
*   128 - PF11   75 - PF23
*   124 - PF12   76 - PF24
*
*      IF NONE OF THE ABOVE:
*                     256 - PARSE ERROR
*                     260 - CLIST VARIABLE-NAME NOT FOUND
*                   OTHER - I/O ERROR OCCURED
         EJECT
*
* MESSAGE-NOTE:
*                 IN ORDER TO GIVE THE USER MORE CONTROL OVER THE
*              SCREEN FORMAT, KOMM SCANS THE MESSAGE AND DOES THIS:
*
*                 UPON ENCOUNTERING A Ö (CENT SIGN), KOMM REMOVES
*              THE Ö (CENT SIGN) FROM THE MESSAGE AND TRANSLATES
*              THE FOLLOWING CHARACTER TO A 3270 CONTROL CHARACTER
*              OR A TSO PROBLEM CHARACTER, USING THE TABLE BELOW:
*
*         3270 CONTROL:                  TSO PROBLEM CHARS:
*   CHAR   TRANSLATION   HEX          CHAR   TRANSLATION   HEX
*    _         IC       X'13'          <         (        X'4D'
*    -         SBA      X'11'          >         )        X'5D'
*    ×         SF       X'1D'          "         '        X'7D'
*    *         NULL     X'00'          /         ^        X'5F'
*    #         RA       X'3C'          Ö         Ö        X'4A'
*    @         EUA      X'12'          A    (BROKEN BAR)  X'6A'
*    .         PT       X'05'          B         ,        X'6B'
*
*           OTHERS SHOULD NOT BE CONSIDERED AS DEFINED AT THIS TIME,
*       BUT ARE GENERALLY TRANSLATED TO THEMSELVES. THE PROBLEM CHARS
*       ARE TRANSLATED BECAUSE ALL 3270 CHARS ARE USED IN ADDRESS
*       SPECIFICATION ETC. BUT SOME HAVE SPECIAL SIGNIFICANCE TO TSO.
*
* EXAMPLE:
*           KOMM CLEAR MESS(10,40,'Ö#  Z')
*       WOULD CLEAR THE SCREEN AND FILL FROM LINE 10, COLUMN 40 TO
*       THE BOTTOM OF THE SCREEN WITH THE LETTER 'Z'.
*
*
*
         TITLE 'SPECIAL FULLSCREEN COMM RTN'
*
*********************************************************************
*    THIS PROGRAM IS DEPENDENT ON TCAM BEING ASSEMBLED WITH THE     *
*    'SPFSCRN' MACROS OR EQUIVALENT IF  NOT USING VTAM.             *
*********************************************************************
*
*        STANDARD CP LINKAGE
*
KOMM     ENTERR LEVEL=V2M4        R13 -> WORKAREA
*                                 R12 -> KOMM ADDRESSABILITY
         EJECT
*
*        PARSE THE INPUT COMMAND BUFFER
*
         LR    R11,R1             SAVE THE PARM POINTER
*                                 R11 -> CPPL
DOPARSE  KKPARSE
*
*
ANALR    LTR   R15,R15            RC = 0? PARSE WENT OK?
         BNZ   PARSERR            NO. -> GO TO PARSE ERR
         L     R10,ANS            R10 -> IKJPARMD
         USING IKJPARMD,R10
         EJECT
*
*              SETUP  -  PROCESS  OPERANDS
*
*                                 R9 == BAL REGISTER
*                                 R8 -> CURRENT POSITION IN OUT BUFFER
         LA    R8,BUFFO
*
MAINLINE BAL   R9,WCCP            GET WRITE CNTL CHAR
         TM    RESET+1,X'FF'      RESET ENTERED?
         BZ    CCK                NO
         BAL   R9,RESETP          PUT RESET IN OUT BUFFR
CCK      TM    CLEAR+1,X'FF'      CLEAR ENTERED?
         BZ    MCK
         BAL   R9,CLEARP          PUT CLR IN BUFFR
MCK      TM    MESS+1,X'FF'       MESSAGE ENTERED?
         BZ    ICK
         BAL   R9,MESSP           PUT MSG IN BUFFR
ICK      TM    IC+1,X'FF'         INSERT CURSOR NTRD?
         BZ    RCK
         BAL   R9,ICP             PUT IN BUFFR
RCK      TM    READTO+1,X'FF'     READTO ENTERED?
         BZ    FIXLEN
         BAL   R9,READTOP         GET ADDR FOR READTO
FIXLEN   BAL   R9,SETLEN          INITIALIZE BUFFER LENGTHS
*
         LTR   R15,R15            RC=0 SO FAR?
         BNZ   GETOUT             NO ->EXIT
         EJECT
*
*        PERFORM THE I/O OPERATION NOW
*
FULLCHK  TM    FLAGS,X'FF'        INPUT AND OUTPUT?
         BO    BOTH               YES
         BZ    WHAT THE HECK?
         TM    FLAGS,X'F0'        OUTPUT ONLY?
         BO    RITEONLY           YES
READONLY CALL  FULLSCRN,(=C'I',BUFFLI,BUFFI),VL,MF=(E,PARML)
         B     RCANAL
RITEONLY CALL  FULLSCRN,(=C'O',BUFFLO,BUFFO),VL,MF=(E,PARML)
         B     GETOUT
BOTH     CALL  FULLSCRN,(=C'B',BUFFLO,BUFFO,BUFFLI,BUFFI),VL,          X
               MF=(E,PARML)
         B     RCANAL
*
WHAT     EQU   *                  WHAT THE HECK ARE WE DOING HERE?
*
         LA    R15,99             SET RC=99 TO CAUSE EXIT
         EJECT
*
*         ANALYZE ANY INPUT OBTAINED BY FULLSCRN
*
RCANAL   BAL   R9,ERRCK           CHECK ERRORS
         LTR   R15,R15            CORRECTED?
         BNZ   GETOUT2            NO.
*
         BAL   R9,SETRC           SET RC BY AID BYTE
         BAL   R9,SETVAR          MOVE ANY INPUT DATA TO CLIST VAR
*
*         ISSUE VTAM LINE COUNT RESET IN CASE UNDER VTAM: 8/3/83
*
GETOUT   EQU   *
         TM    RESET+1,X'FF'      RESET ENTERED?
         BZ    GETOUT2            NO
         BAL   R9,RESETV          TELL VTAM
*
GETOUT2  LEAVER                   EXIT REENTRANT ROUTINE
         EJECT
*
*       KOMM SUBROUTINES HERE
*
PARSERR  EQU   *
         LA    R15,256
         B     GETOUT
*
WCCP     EQU   *                  SETUP OUTPUT BUFFER
         MVI   0(R8),C'C'         WCC DEFAULT - RESET ONLY
         TM    CC+6,X'80'         WCC SPECIFIED?
         BNO   WPP                NO
         L     R7,CC              GET IT'S ADDRESS
         MVC   0(1,R8),0(R7)      MOVE IT
         OI    FLAGS,X'F0'        SET WRITE FLAG
WPP      LA    R8,1(,R8)          POINT PAST
         BR    R9
*
CLEARP   EQU   *                  SETUP OUTPUT BUFFER
         MVC   0(7,R8),=X'1140403C404000'  RA TO FILL SCRN W/NULLS
         OI    FLAGS,X'F0'        SET WRITE FLAG
         LA    R8,7(,R8)          POINT PAST
         BR    R9
*
RESETP   EQU   *
         ST    R9,L1LS
         MVC   0(4,R8),=X'115D7E11' INDICATE RESET LINE COUNT
         L     R7,LINE            R7 -> BINARY ROW NUMBER
         L     R7,0(R7)           R7 =   "      "    "
         LA    R5,1               R5 = 1
         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR
         MVC   4(2,R8),BUFFI      MOVE THE ADDR
         LA    R8,6(,R8)          POINT PAST
         OI    FLAGS,X'F0'        SET WRITE FLAG
         L     R9,L1LS
         BR    R9                 RETURN
         SPACE 2                                                  WDPSC
RESETV   EQU   *                       VTAM RESET SUBRTN ADDED 8/3/83
         ST    R9,L1LS
         LR    R5,R15                  SAVE RC
         L     R7,LINE            R7 -> BINARY ROW NUMBER
         L     R7,0(R7)           R7 =   "      "    "
         STLINENO MODE=OFF,LINE=(R7)   TRY VTAM RESET         8/3/83
         LR    R15,R5                  RESTORE RC
         L     R9,L1LS
         BR    R9                 RETURN
         EJECT
MESSP    EQU   *
         ST    R9,L1LS
         MVI   0(R8),X'11'        SBA
         L     R7,MROW            R7 -> BINARY ROW NUMBER
         L     R7,0(R7)           R7 =   "      "    "
         L     R5,MCOL            R5 -> BINARY COL NUMBER
         L     R5,0(R5)           R5 =   "      "    "
         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR
         MVC   1(2,R8),BUFFI      MOVE THE ADDR
         L     R7,MTEXT           GET TEXT ADDR R7-> TEXT
         LH    R6,MTEXT+4         GET TEXT LENGTH  R6= LEN
         BCTR  R6,R0              THEN EXECUTE     R6=R6-1
MOVE     MVC   3(0,R8),0(R7)      MOVE INSTRUCTION (EXECUTED)
         EX    R6,MOVE            MOVE TEXT
*
         LR    R5,R6              R5=LENGTH-1
         LA    R7,3(,R8)          R7->TRANS START
TRLOOP   EX    R5,TRANT           SCAN FOR Ö (CENT SIGN)
         BZ    TRDONE             NONE FOUND
         TR    1(1,R1),TABLE2     TRANSLATE FOLLOWING CHAR
         BCTR  R6,R0              R6=R6-1 UPDATE STRING LENGTH
         LA    R7,1(,R1)          R7->NEW TRANS START
         LA    R5,4(R8,R6)        R5->NEW LAST CHAR
         SR    R5,R7              R5= NEW LENGTH
         BNP   TREX               NOT ENOUGH TO TRANSLATE
         EX    R5,TRMVC           SHIFT STRING ONE TO LEFT
         BCTR  R5,R0              R5=R5-1 UPDATE SCAN LENGTH
         B     TRLOOP             CHECK FOR MORE
TRANT    TRT   0(0,R7),TABLE3     EXECUTED TRANSLATE
TRMVC    MVC   0(0,R1),1(R1)      EXECUTED LEFT SHIFT
TREX     EX    R5,TRMVC           DO LEFT SHIFT
TRDONE   LA    R8,4(R6,R8)        POINT PAST
         OI    FLAGS,X'F0'        SET WRITE FLAG
         L     R9,L1LS
         BR    R9                 RETURN
         EJECT
ICP      EQU   *
         ST    R9,L1LS
         L     R7,ICROW           R7 -> BINARY ROW NUMBER
         L     R7,0(R7)           R7 =   "      "    "
         L     R5,ICCOL           R5 -> BINARY COL NUMBER
         L     R5,0(R5)           R5 =   "      "    "
         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR
         MVI   0(R8),X'11'        SBA
         MVC   1(2,R8),BUFFI      MOVE THE ADDR
         MVI   3(R8),X'13'        SAY IC
         LA    R8,4(,R8)          POINT PAST
         OI    FLAGS,X'F0'        SET WRITE FLAG
         L     R9,L1LS
         BR    R9                 RETURN
*
SETLEN   EQU   *
         LA    R7,BUFFO           R7 -> BUFFO (R8->END OF BUFFO)
         SR    R8,R7              R8=BUFFER LENGTH OUT
         STH   R8,BUFFLO          SAVE IT IN BUFFLO
         MVC   BUFFLI(2),=H'256'  ALSO SET BUFFLI
         BR    R9                 RETURN
*
         EJECT
READTOP  EQU   *
         L     R5,CPPLECT         R5->ECT
         L     R5,4(,R5)          R5->IOSRL
         L     R4,0(,R5)          R4->TOP OF STACK
CKCLIST  TM    0(R4),X'08'        CLIST ELEMENT?
         BO    GOTCL              YES->WE HAVE A CLIST
         S     R4,=F'4'           R4=R4-4 (NEXT ELEMENT DOWN ON STACK)
         C     R4,4(,R5)          R4<BOTTOM OF STACK PTR?
         BNL   CKCLIST            NO ->STILL IN STACK; GO CHECK IT
         LA    R15,260            YES->R15=260=RC
         BR    R9                 EXIT READTOP WITH ERROR
GOTCL    L     R7,RDD             R7->VARIABLE NAME
         LH    R6,RDD+4           R6=VAR LENGTH FOR LENGTH COMPARE
         L     R5,0(,R4)          R5->LSD
         L     R5,12(,R5)         R5->EXECDATA
         L     R5,0(,R5)          R5->SNTAB
         L     R4,8(,R5)          R4==USED TABLE LENGTH
         LA    R4,0(R4,R5)        R4->END OF TABLE USED
         LA    R3,12(,R5)         R3->FIRST SNTAB ENTRY
         LR    R1,R6              R1=R6  VARIABLE NAME LENGTH
         BCTR  R1,R0              R1=R1-1 FOR EXECUTED COMPARE
*
RLOOP    LH    R2,6(,R3)          R2=NAME LENTH
         CR    R6,R2              SAME LENGTH?
         BNE   LOOPCHK            NO -> CHECK DONE
COMPARE  CLC   0(0,R7),8(R3)      EXECUTED
         EX    R1,COMPARE         COMPARE NAMES
         BE    GOTIT
LOOPCHK  LA    R3,8(R2,R3)        POINT TO NEXT ENTRY
         CR    R3,R4              DONE?
         BL    RLOOP              NO->CONTINUE
RERR     LA    R15,260       R15= RC=260
         BR    R9                 EXIT READTOP WITH ERROR
GOTIT    EQU   *
         L     R1,0(,R3)          GET VALUE ADDR
         ST    R1,VALADDR         SAVE IT
         OI    FLAGS,X'0F'        SET READ FLAG
         BR    R9                 RETURN
         EJECT
ERRCK    EQU   *
         BR    R9
*
SETRC    EQU   *
         IC    R15,BUFFI          PICK UP AID BYTE IN R15
         BR    R9                 RETURN
*
SETVAR   EQU   *
         L     R7,VALADDR         R7->VALUE TABLE ENTRY
         LH    R8,BUFFLI          GET INPUT LENGTH
         CH    R8,=H'3'           LEN > 3 ?
         BNH   SETNULL            NO -> SET VARIABLE TO NULL
         SH    R8,=H'3'           R8=R8-3  SKIP AID,CURSOR ADDR
         LA    R6,BUFFI+3         PT PAST  "
         CLI   AI+1,X'00'         AI ENTERED?
         BNE   ROOMCHK            YES -> LEAVE SBA IN
         CLI   0(R6),X'11'        SBA START MESSAGE?
         BNE   ROOMCHK            NO -> ASSUME ITS DATA
         LA    R6,3(,R6)          R6=R6+3  SKIP SBA,ADDR
         SH    R8,=H'3'           AND FIX LENGTH
         BNP   SETNULL            IN CASE?
ROOMCHK  CH    R8,2(,R7)          ROOM FOR INPUT?
         BNH   SM                 YES->MOVE IT.
         LH    R8,2(,R7)          NO ->GET HIS LENGTH
SM       STH   R8,0(,R7)          STORE CORRECT LENGTH
         BCTR  R8,R0              R8=R8-1
         EX    R8,SMOVE           MOVE IT
         BR    R9
SMOVE    MVC   4(0,R7),0(R6)      EXECUTED
SETNULL  SLR   R8,R8              R8=0
         STH   R8,0(,R7)          STORE ZERO LENGTH
         BR    R9                 RETURN
         EJECT
*
CNVTADDR EQU   *                  CHANGE FROM BINARY ADDRESS
*                                 MODULO 80 TO 3270 ADDRESS
*                                 MODULO 64  -  INPUT:
*                                 R7 = ROW , R5 = COL
         BCTR  R7,R0              R7=R7-1
         BCTR  R5,R0              R5=R5-1
         MH    R7,=H'80'          R7=R7*80
         AR    R7,R5              R7=R7+R5
         SLR   R6,R6              R6=0
         D     R6,=F'64'          (R6,R7)/64 R6=REMAINDER,R7=QUOTIENT
         N     R7,=X'0000003F'    JUST IN CASE
         STC   R7,BUFFI           PUT ROW IN WORKAREA
         STC   R6,BUFFI+1         PUT COL IN WORKAREA
         TR    BUFFI(2),TABLE1    CHANGE TO 3270 ADDRESS
         BR    R9
*
         EJECT
*
*        STATIC WORKAREA
*
TABLE1   DC    C' ABCDEFGHIÖ.<(+×&&JKLMNOPQR!$*);^'
         DC    C'-/STUVWXYZ ,%_>?0123456789:#@''="'
         ORG   TABLE1+X'2A'
         DC    X'6A'
         ORG
*
*  TRANSLATE CHARS PRECEEDED BY A CENT SIGN (Ö)
*
*            3270                      TSO
*        Ö_ -> IC  (13)            Ö< -> (  (4D)
*        Ö- -> SBA (11)            Ö> -> )  (5D)
*        Ö× -> SF  (1D)            Ö" -> '  (7D)
*        Ö* -> NULL(00)            Ö/ -> ^  (5F)
*        Ö# -> RA  (3C)            ÖÖ -> Ö  (4A)   CENT SIGN
*        Ö@ -> EUA (12)            ÖA ->    (6A)   BROKEN VERT BAR
*        Ö. -> PT  (05)            ÖB -> ,  (6B)
*            3279
*        Ö$ -> SFE (29) SF EXTNDED Ö1 ->    (01)
*        Ö% -> MF  (2C) MOD FLD    Ö2 ->    (02)
*        ÖS -> SA  (28) SET ATTR   Ö3 ->    (03)
*        ÖC ->     (42) COLOR      Ö4 ->    (04)
*        ÖH ->     (41) HIGHLITE   Ö5 ->    (05)
*        ÖG ->     (43) SYM SET    Ö6 ->    (06)
*                                  Ö7 ->    (07)
*                                  Ö8 ->    (08)
*                                  Ö9 ->    (09)
*                                  Ö  ->    (0A)
*                                  Ö  ->    (0B)
*                                  Ö  ->    (0C)
*                                  Ö  ->    (0D)
*                                  Ö  ->    (0E)
*                                  Ö  ->    (0F)
*
TABLE2   DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A054D4D4E1D'   05 4D 1D
         DC    X'505152535455565758595A29005D5E5F'   29 00
         DC    X'115F62636465666768696A6B2C135D6F'   11 5F 13 5D 2C
         DC    X'707172737475767778797A3C127D7E7D'   3C 12 7D
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C06A6B42C4C5C64341C9CACBCCCDCECF'   6A 6B 42 43 41
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E128E3E4E5E6E7E8E9EAEBECEDEEEF'   28
         DC    X'000102030405060708090A0B0C0D0E0F'
         EJECT
TABLE3   DC    XL256'00'
         ORG   TABLE3+74
         DC    X'04'
         ORG
*
PTCHAREA DC    XL128'00'
*
         LTORG
         EJECT
*
*   WORKING STORAGE AREA - DYNAMIC
*
WORKAREA DSECT
SAVEAREA DS    18F
PARML    CALL  ,(IOPARM,BUFFLO,BUFFO,BUFFLI,BUFFI),MF=L
*
IOPARM   DS    X
BUFFLO   DS    H
BUFFLI   DS    H
         DS    0F
BUFFO    DS    CL256
BUFFI    DS    CL256
*
FLAGS    DC    F'0'
L1LS     DC    F'0'
VALADDR  DC    F'0'
ANS      DC    F'0'
ECB      DC    F'0'
PPLA     DS    7F
WORKLEN  EQU   *-WORKAREA
KOMM     CSECT
         EJECT
*
PCL      IKJPARM
CLEAR    IKJKEYWD
         IKJNAME   'CLEAR',ALIAS=('CL','C')
WCC      IKJKEYWD
         IKJNAME   'WCC',SUBFLD=CCFLD,ALIAS=('W','CC')
RESET    IKJKEYWD
         IKJNAME   'RESET',SUBFLD=LINEFLD,ALIAS=('RES','R')
MESS     IKJKEYWD
         IKJNAME   'MESSAGE',SUBFLD=MFLD,ALIAS=('MESS','MSG','M')
IC       IKJKEYWD
         IKJNAME   'IC',SUBFLD=ICFLD,ALIAS=('CURSOR','CUR','I')
READTO   IKJKEYWD
         IKJNAME   'READTO',SUBFLD=RDFLD,ALIAS=('READ','RT')
AI       IKJKEYWD
         IKJNAME   'AI',ALIAS=('ASIS')
*  SUBFIELD DESCRIPTIONS FOLLOW
CCFLD    IKJSUBF
CC       IKJIDENT 'WCC',MAXLNTH=2,PROMPT='WCC',CHAR
*
LINEFLD  IKJSUBF
LINE     IKJIDENT 'RESET LINE NO',DEFAULT='1',INTEG
*
MFLD     IKJSUBF
MROW     IKJIDENT 'MSG ROW',MAXLNTH=2,PROMPT='MSG ROW',INTEG
MCOL     IKJIDENT 'MSG COL',MAXLNTH=2,PROMPT='MSG COL',INTEG
MTEXT    IKJIDENT 'MSG TEXT',PROMPT='MSG TEXT',CHAR
*
ICFLD    IKJSUBF
ICROW    IKJIDENT 'IC ROW',MAXLNTH=2,PROMPT='IC ROW',INTEG
ICCOL    IKJIDENT 'IC COL',MAXLNTH=2,PROMPT='IC COL',INTEG
*
RDFLD    IKJSUBF
RDD      IKJIDENT 'INPUT VARIABLE',PROMPT='INPUT VARIABLE',CHAR
         IKJENDP
         TITLE 'FULLSCRN - 3270 I/O SUBROUTINE'
*          DATA SET 761KKFSCRN AT LEVEL 002 AS OF 06/07/78
*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).
*          (206) 753-2215
FULLSCRN CSECT
FULLSC   DS    0H
         ENTRY FULLSC
         SAVE  (14,12),,*         HO-HUM
         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING
         USING FULLSCRN,R12
*
*   GET THE INPUT PARAMETERS:
*           CALL 'FULLSCRN' USING IOPARM OUTLEN OUTBUFF /RETLEN/
*                                        INLEN  INBUFF  /RETLEN/ .
*
*  OUTBUFF:  ESC/COM/WCC/SBA/ADDR/SF/ATTR/TEXT/IC
*  INBUFF :  AID/CURSOR-ADDR/SBA/ADDR/TEXT/..SBA/ADDR/TEXT....
*
GETPARMS LR    R11,R1             SAVE THE PARM POINTER
         L     R10,0(R11)         R10 -> IOFLAG
         L     R8,4(R11)          R8  -> OUT BUFFLEN
         LH    R8,0(R8)           R8  =  OUT BUFFLEN
         L     R7,8(R11)          R7  -> OUT BUFFADDR
         N     R7,=X'00FFFFFF'    FIX ADDR (REMOVE VL FLAG)
         SLR   R4,R4              R4=0
         TM    8(R11),X'80'       MORE?
         BO    SAMEIN             NO.
*
LENCH    TM    12(R11),X'80'      ONE MORE PARM?
         BNO   MOREIN             NO-> MAYBE TWO
         L     R4,12(R11)         R4->RETURN LENGTH BUFFER
         B     SAMEIN             GO ON
MOREIN   TM    16(R11),X'80'      TWO MORE PARMS?
         BO    DIFFIN             YES->INPUT PARMS ONLY
         L     R4,20(,R11)        NO-> R4 -> RET LEN BUFFER
*
DIFFIN   L     R9,12(R11)         R9  -> IN BUFFLEN
         LH    R6,0(R9)           R6  =  BUFFLEN
         L     R5,16(R11)         R5  -> IN BUFFADDR
         B     RETCH
SAMEIN   L     R9,4(R11)          R9  -> IN BUFFLEN
         LH    R6,0(R9)           R6  =  BUFFLEN
         LR    R5,R7              R5  -> IN BUFFADDR
*
RETCH    LTR   R4,R4              R4=0 STILL?
         BNZ   WRITECHK           NO->LEAVE IT THEN
         LR    R4,R9              R4->RET LEN BUFF (COMPATIBLE W/OLD)
         EJECT
*
*   CHECK FOR A WRITE
*
WRITECHK SLR   R3,R3              R3=0
         CLI   0(R10),C'O'        OUTPUT?
         BE    BUFFRITE           YES.
         CLI   0(R10),C'B'        BOTH INPUT AND OUT?
         BNE   READCHK            NO.
BUFFRITE TPUT  (R7),(R8),FULLSCR,HOLD  FULLSCREEN TPUT
         LR    R3,R15             R3  =  RET CODE
         SLR   R15,R15            R15 CLEARED
*
*   CHECK FOR A READ
*
READCHK  CLI   0(R10),C'I'        INPUT?
         BE    BUFFREAD           YES.
         CLI   0(R10),C'B'        BOTH INPUT AND OUT?
         BNE   FINISH             NO.
BUFFREAD TGET  (R5),(R6),ASIS     GET WHAT WE CAN
         STH   R1,0(R4)           GIVE HIM THE LENGTH
*
*   RETURN
*
FINISH   SLL   R15,8(0) SAVE TGET RETURN CODE
         OR    R15,R3    GET TPUT RETURN CODE
EXIT     RETURN (14,12),RC=(15)   QUIT
         EJECT
         LTORG
         END
          TITLE  'TERMTYPE - PROGRAM TO INDICATE TERMINAL TYPE'
*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).
*          (206) 753-2215
*
* THIS PROGRAM RETURNS A CODE WHICH DEPENDS ON THE TSO USERS TERMINAL:
*      0 - TERMINAL IS A TTY TYPE
*     24 - TERMINAL IS A 3270 TYPE
*  IT CAN BE CALLED FROM A CLIST TO DECIDE WHEN TO USE THE KOMM CMD.
*  THE RETURN CODE IS THEN PLACED IN CLIST VARIABLE &LASTCC.
*
*          DATA SET 761KKTTYPE AT LEVEL 001 AS OF 01/08/79
TERMTYPE ENTERR
         GTSIZE
         LR    R15,R0             R15=SCREEN SIZE=0 IF TTY
         LEAVER
*
*   WORKING STORAGE AREA - DYNAMIC
*
WORKAREA DSECT
SAVEAREA DS    18F
WORKLEN  EQU   *-WORKAREA
         END
