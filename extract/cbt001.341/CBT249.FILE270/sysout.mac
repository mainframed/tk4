*
*
************
*  SYSOUT  *
************
*
*           THIS COMMAND IS USED TO DO DYNAMIC ALLOCATION AS FOLLOWS:
*
*           //DDNAME  DD  SYSOUT=(SYSOUT CLASS,,FORM NUMBER),
*           //   DEST=DESTINATION,COPIES=NUMBER OF COPIES,
*           //   FCB=FCB,FLASH=FLASH,MODIFY=COPYMOD,
*           //   CHARS=CHARS,OPTCD=OPTCD
*
* ---------------------------------------------------------------------
*  COMMAND  OPERANDS
* ---------------------------------------------------------------------
*  SYSOUT   DDNAME('DDNAME') SYSCLASS('SYSOUT CLASS') -
*           FORM('FORM #') DEST('DESTINATION') COPIES('NO OF COPIES') -
*           FCB('FCB') FLASH('FLASH NAME') CHARS('CHARS') -
*           MODIFY('COPYMOD') OPTCD('OPTCD')
* ---------------------------------------------------------------------
*
*
*  OPERANDS -
*
*     REQUIRED -
*
*        DDNAME('DDNAME')         'DDNAME' IS THE DDNAME TO BE USED
*
*                                 DDNAME HAS THE FOLLOWING ALIAS:
*                                        FILE
*
*        SYSCLASS('SYSOUT CLASS') 'SYSOUT CLASS' IS THE SYSOUT CLASS OF
*                                 THE SYSOUT PARAMETER.  NORMALLY 'A',
*                                 'B', OR 'J'
*
*                                 SYSCLASS HAS THE FOLLOWING 2 ALIASES:
*                                        SYSOUT
*                                        CLASS
*
*     OPTIONAL -
*
*
*        FORM('FORM NUMBER')      'FORM NUMBER' IS THE FORM NUMBER OF
*                                 THE SYSOUT PARAMETER TO BE USED
*
*        DEST('DESTINATION')      'DESTINATION' IS THE DESTINATION
*                                 PARAMETER TO BE USED
*
*        COPIES('NUMBER OF COPIES')   'NUMBER OF COPIES' IS THE DESIRED
*                                 NUMBER OF COPIES TO BE USED
         EJECT
*
*
*        FCB('FCB')               'FCB' IS THE 3800 FORMS CONTROL
*                                    BUFFER TO USE
*
*        FLASH('FLASH NAME')      'FLASH NAME' IS THE NAME OF YOUR
*                                    FORMS OVERLAY (IF THIS PARAMETER
*                                    IS OMITTED, FORMS OVERLAY 'STD'
*                                    WILL BE USED. REQUEST 'NULL' IF
*                                    YOU DO NOT WANT ANY OVERLAY USED.)
*
*        CHARS('CHARS')           'CHARS' IS THE CHARACTER ARRANGEMENT
*                                    TABLE(S) TO USE.  UP TO FOUR
*                                    CHARACTER ARRANGEMENT TABLES
*                                    MAY BE SPECIFIED
*
*                                      EXAMPLES:
*
*                                          CHARS(GS12)
*
*                                          CHARS(GS12,AD01)
*
*        MODIFY('COPYMOD')        'COPYMOD' IS THE COPY MODIFICATION
*                                    MODULE TO BE USED. IT OPTIONALLY
*                                    CAN INCLUDE A CHARS REFERENCE
*                                    CHARACTER.  IF THIS CHARACTER IS
*                                    A ZERO, THE FIRST CHARS NAME WILL
*                                    BE USED IN THE MODIFICATION
*                                    PROCESS.  IF THIS CHARACTER IS A
*                                    ONE, THE SECOND CHARS NAME WILL
*                                    BE USED, ETC.
*
*                                      EXAMPLES:
*
*                                           MODIFY(SC33)
*
*                                           MODIFY(SC33,2)
*
*        OPTCD('OPTCD')           'OPTCD' IF USED, CAN ONLY HAVE A
*                                    VALUE OF 'J'. THIS INDICATES
*                                    THAT THE SECOND CHARACTER OF
*                                    EVERY PRINT LINE WILL CONTAIN
*                                    A CHARS REFERENCE CHARACTER.
         EJECT
*
*
*        THIS COMMAND WILL ALSO MAKE AVAILABLE TWO VARIABLES THAT AN
*        INVOKING CLIST MAY INTERROGATE.  BELOW IS A TABLE OF VALUES
*        AFTER EXECUTION OF THIS COMMAND FOR THESE TWO VARIABLES
*        &OUTMSG AND &LASTCC (RETURN CODE)
*
*        ×---------×------------------------------------------------×
*        × &LASTCC × &OUTMSG                                        ×
*        ×---------×------------------------------------------------×
*        ×    0    × SUCCESSFUL COMPLETION                          ×
*        ×---------×------------------------------------------------×
*        ×    4    × DDNAME PARAMETER MISSING                       ×
*        ×---------×------------------------------------------------×
*        ×    8    × DYNAMIC DEALLOC ERROR (ERR REASON CODE = XXXX) ×
*        ×---------×------------------------------------------------×
*        ×    12   × SYSOUT CLASS PARAMETER MISSING                 ×
*        ×---------×------------------------------------------------×
*        ×    16   × INVALID FORM NUMBER                            ×
*        ×---------×------------------------------------------------×
*        ×    20   × INVALID DESTINATION                            ×
*        ×---------×------------------------------------------------×
*        ×    24   × DYNAMIC ALLOC ERROR (ERR REASON CODE = XXXX)   ×
*        ×---------×------------------------------------------------×
*        ×    28   × INVALID NUMBER OF COPIES SPECIFIED             ×
*        ×---------×------------------------------------------------×
*        ×    32   × INVALID SYSOUT CLASS                           ×
*        ×---------×------------------------------------------------×
*        ×    36   × INVALID FCB                                    ×
*        ×---------×------------------------------------------------×
*        ×    40   × INVALID FLASH NAME                             ×
*        ×---------×------------------------------------------------×
*        ×    44   × INVALID OPTCD                                  ×
*        ×---------×------------------------------------------------×
*        ×    48   × INVALID CHARS PARAMETER                        ×
*        ×---------×------------------------------------------------×
*        ×    52   × INVALID MODIFY PARAMETER                       ×
*        ×---------×------------------------------------------------×
*        ×    96   × INVALID SYNTAX OF ONE OR MORE OPERANDS         ×
*        ×---------×------------------------------------------------×
*
         EJECT
SYSOUT   ENTERR
         LA    R3,BASEREG2   R3 IS TO BE THE SECOND BASE REGISTER
         USING BASEREG2,R3
         EJECT
********************************************************************
*                                                                  *
*      M A I N   L I N E   L O G I C   F O R   S Y S O U T P       *
*                                                                  *
********************************************************************
*
         LR    R11,R1              SAVE THE PARM POINTER
         LA    R4,0                R4==> 0
         BAL   R14,DOPARSE         PERFORM THE PARSE SERVICE ROUTINE
*
         ST    R11,CPPLADDR        CPPLADDR CONTAINS POINTER TO CPPL
*
         CLC   VALIDSW,=C'YES'     WAS PARSE SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETDDNAM        GET, EDIT, AND STORE DDNAME
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETSYSCL        GET, EDIT, AND STORE SYSOUT CLASS
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETFORM#        GET, EDIT, AND STORE FORM #
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETDEST         GET, EDIT, AND STORE DESTINATION
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETCPYS         GET, EDIT, AND STORE NO OF COPIES
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETFCB          GET, EDIT, AND STORE FCB
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETFLSH         GET, EDIT, AND STORE FLASH
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETCHRS         GET, EDIT, AND STORE CHARS
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETCPMD         GET, EDIT, AND STORE COPYMOD
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,GETOPCD         GET, EDIT, AND STORE OPTCD
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,DYNFREE         DO DYNAMIC FREE
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,DYNALLOK        DO DYNAMIC ALLOCATION
         CLC   VALIDSW,=C'YES'     WAS IT SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         MVC   OUTMSG,GOODMSG      MOVE 'SUCCESSFUL COMPLETION'
*                                    TO OUTMSG
INITL    BAL   R14,WHOCALLD        PERFORM ROUTINE TO DETERMINE WHETHER
*                                      THIS CMD WAS INVOKED BY A CLIST
*                                      OR WAS ENTERED DIRECTLY
         CLC   BYCLIST,=CL3'YES'   WAS CMD INVOKED BY A CLIST ?
         BE    BYACLIST            IF SO, BRANCH TO BYACLIST
         BAL   R14,PUT2TERM        PERFORM ROUTINE TO PUTLINE ERROR
*                                      MSG TO TERMINAL (IF APPROPRIATE)
         B     SHUTDOWN            BRANCH TO SHUTDOWN
BYACLIST BAL   R14,INITLIST        BUILD PARMLIST FOR IKJUPDT
         BAL   R14,SETOUTMG        SET CLIST VARIABLE OUTMSG
         B     SHUTDOWN            BRANCH TO SHUTDOWN
         EJECT
********************************************************************
*                                                                  *
*        P A R S E   I N P U T   C O M M A N D   B U F F E R       *
*                                                                  *
********************************************************************
*
DOPARSE  ST    R14,SAVEIT1          SAVE REG 14 CONTENTS IN SAVEIT1
         KKPARSE
         LTR   R15,R15              RC = 0 ? (I.E PARSE GO OK ?)
         BNZ   PARSERR              IF NOT, BRANCH TO PARSERR
         MVC   VALIDSW,=C'YES'      MOVE 'YES' TO VALIDSW
         L     R10,ANS
         USING IKJPARMD,R10
         B     EXITPARS
PARSERR  MVC   VALIDSW,=C'NO '      MOVE 'NO ' TO VALIDSW
         LA    R4,96                SET REG 4 = 96
         MVC   OUTMSG,ERRMSG1       MOVE 'INVALID SYNTAX OF ONE OR
*                                     MORE OPERANDS' TO OUTMSG
EXITPARS L     R14,SAVEIT1
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE DDNAME FROM THE KEYWORD          *
*        PARAMETER DDNAME, EDITS IT, AND STORES IT INTO ZDDNAME    *
*                                                                  *
*        IF THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS        *
*          THEN IT WILL                                            *
*              MOVE 'YES' TO VALIDSW                               *
*              MOVE THE DDNAME TO ZDDNAME                          *
*              MOVE THE LENGTH OF THE DDNAME TO ZDDNLEN            *
*        ELSE IT WILL                                              *
*              MOVE 'NO ' TO VALIDSW                               *
*              MOVE APPROPRIATE VALUE TO REG 4                     *
*              MOVE APPROPRIATE MESSAGE TO OUTMSG                  *
*              MOVE SPACES TO ZDDNAME                              *
*              MOVE SPACES TO ZDDNLEN                              *
*                                                                  *
********************************************************************
*
GETDDNAM ST    R14,SAVEIT2             SAVE REG 14 CONTENTS IN SAVEIT2
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   ZDDNAME,=CL8' '         MOVE SPACES TO ZDDNAME
         MVC   ZDDNLEN,=CL2' '         MOVE SPACES TO ZDDNLEN
         TM    DDNSTRNG+6,X'80'        IS DDNAME PRESENT ?
         BNO   NODDNAME                IF NOT, BRANCH TO NODDNAME
         LA    R1,ZDDNAME              R1 ==> ADDRESS OF ZDDNAME
         L     R8,DDNSTRNG             R8 ==> ADDRESS OF THE DDNAME
         LH    R7,DDNSTRNG+4           R7 ==> LENGTH OF THE DDNAME
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEDDN  MVC   0(0,R1),0(R8)           MOVE THE DDNAME TO ZDDNAME
         EX    R7,MOVEDDN
         SPACE 1
         MVC   ZDDNLEN(2),DDNSTRNG+4   ZDDNLEN ==> LENGTH OF DDNAME
         B     EXITGDDN                BRANCH TO EXITGDDN
NODDNAME MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,4                    SET REG 4 = 4
         MVC   OUTMSG,ERRMSG2          MOVE 'MISSING DDNAME' TO OUTMSG
EXITGDDN L     R14,SAVEIT2
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE SYSOUT CLASS FROM THE KEYWORD    *
*        PARAMETER SYSCLASS, EDITS IT, AND STORES IT INTO ZSYSCLAS *
*                                                                  *
*        IF THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS        *
*          THEN IT WILL                                            *
*              MOVE 'YES' TO VALIDSW                               *
*              MOVE THE SYSOUT CLASS TO ZSYSCLAS                   *
*        ELSE IT WILL                                              *
*              MOVE 'NO ' TO VALIDSW                               *
*              MOVE APPROPRIATE VALUE TO REG 4                     *
*              MOVE APPROPRIATE MESSAGE TO OUTMSG                  *
*              MOVE SPACE TO ZSYSCLAS                              *
*                                                                  *
********************************************************************
*
GETSYSCL ST    R14,SAVEIT3             SAVE REG 14 CONTENTS IN SAVEIT3
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVI   ZSYSCLAS,C' '           MOVE SPACE TO ZSYSCLAS
         TM    SYSSTRNG+6,X'80'        IS SYSOUT CLASS PRESENT ?
         BNO   NOSYSCLS                IF NOT, BRANCH TO NOSYSCLS
         LH    R7,SYSSTRNG+4           R7 ==> LENGTH OF SYSOUT CLASS
         CH    R7,=H'1'                LENGTH OF SYSOUT CLASS = 1 ?
         BNE   BADSYSCL                IF NOT, BRANCH TO BADSYSCL
         L     R8,SYSSTRNG             R8 ==> ADDRESS OF SYSOUT CLASS
         MVC   INBYTE,0(R8)            MOVE SYSOUT CLASS TO INBYTE
         BAL   R14,EDITBYTE            EDIT THE SYSOUT CLASS
         CLC   EDITSW,=CL3'YES'        WAS IT VALID ?
         BNE   BADSYSCL                IF NOT, BRANCH TO BADSYSCL
         MVC   ZSYSCLAS(1),0(R8)       MOVE SYS CLASS TO ZSYSCLAS
         B     EXITGSYS                BRANCH TO EXITGDDN
NOSYSCLS MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,12                   SET REG 4 = 12
         MVC   OUTMSG,ERRMSG4          MOVE 'MISSING SYSOUT CLASS'
*                                        TO OUTMSG
         B     EXITGSYS                BRANCH TO EXITGDDN
BADSYSCL MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,32                   SET REG 4 = 32
         MVC   OUTMSG,ERRMSG9          MOVE 'INVALID SYSOUT CLASS'
*                                        TO OUTMSG
EXITGSYS L     R14,SAVEIT3
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE FORM NUMBER FROM THE KEYWORD     *
*        PARAMETER FORM, EDITS IT, AND STORES IT INTO ZFORM#       *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE FORM NUMBER TO ZFORM#                  *
*                     (SPACES WHEN FORM NUMBER IS NOT PRESENT)     *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZFORM#                           *
*                                                                  *
********************************************************************
*
GETFORM# ST    R14,SAVEIT4             SAVE REG 14 CONTENTS IN SAVEIT4
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   ZFORM#,=CL4' '          MOVE SPACES TO ZFORM#
         TM    FRMSTRNG+6,X'80'        IS FORM NUMBER PRESENT ?
         BNO   EXITGFRM                IF NOT, BRANCH TO EXITGFRM
         LH    R7,FRMSTRNG+4           R7 ==> LENGTH OF THE FORM NMBR
         CH    R7,=H'4'                IS LENGTH OF FORM# = 4
         BNE   BADFORM#                IF NOT, BRANCH TO BADFORM#
         L     R8,FRMSTRNG             R8 ==> ADDRESS OF THE FORM NMBR
         MVC   INBYTE,0(R8)            MOVE BYTE #1 OF FORM# TO INBYTE
         BAL   R14,EDITBYTE            EDIT BYTE #1 OF FORM#
         CLC   EDITSW,=CL3'YES'        WAS IT VALID ?
         BNE   BADFORM#                IF NOT, BRANCH TO BADFORM#
         MVC   INBYTE,1(R8)            MOVE BYTE #2 OF FORM# TO INBYTE
         BAL   R14,EDITBYTE            EDIT BYTE #2 OF FORM#
         CLC   EDITSW,=CL3'YES'        WAS IT VALID ?
         BNE   BADFORM#                IF NOT, BRANCH TO BADFORM#
         MVC   INBYTE,2(R8)            MOVE BYTE #3 OF FORM# TO INBYTE
         BAL   R14,EDITBYTE            EDIT BYTE #3 OF FORM#
         CLC   EDITSW,=CL3'YES'        WAS IT VALID ?
         BNE   BADFORM#                IF NOT, BRANCH TO BADFORM#
         MVC   INBYTE,3(R8)            MOVE BYTE #4 OF FORM# TO INBYTE
         BAL   R14,EDITBYTE            EDIT BYTE #4 OF FORM#
         CLC   EDITSW,=CL3'YES'        WAS IT VALID ?
         BNE   BADFORM#                IF NOT, BRANCH TO BADFORM#
         MVC   ZFORM#,0(R8)            MOVE FORM NMBR TO ZFORM#
         B     EXITGFRM                BRANCH TO EXITGFRM
BADFORM# MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,16                   SET REG 4 = 16
         MVC   OUTMSG,ERRMSG5          MOVE 'INVALID FORM NUMBER'
*                                        TO OUTMSG
EXITGFRM L     R14,SAVEIT4
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE DESTINATION FROM THE KEYWORD     *
*        PARAMETER DEST, EDITS IT, AND STORES IT INTO ZDEST        *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE DESTINATION TO ZDEST                   *
*                     (SPACES WHEN DESTINATION IS NOT PRESENT)     *
*                  MOVE THE LENGTH OF THE DESTINATION TO ZDSTLEN   *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZDEST                            *
*                  MOVE SPACES TO ZDSTLEN                          *
*                                                                  *
********************************************************************
*
GETDEST  ST    R14,SAVEIT5             SAVE REG 14 CONTENTS IN SAVEIT5
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   ZDEST,=CL8' '           MOVE SPACES TO ZDEST
         MVC   ZDSTLEN,=CL2' '         MOVE SPACES TO ZDSTLEN
         TM    DSTSTRNG+6,X'80'        IS DESTINATION PRESENT ?
         BNO   EXITGDST                IF NOT, BRANCH TO EXITGDST
         LA    R1,ZDEST                R1 ==> ADDRESS OF ZDEST
         L     R8,DSTSTRNG             R8 ==> ADDRESS OF DESTINATION
         CLC   0(5,R8),=CL5'LOCAL'     DEST = LOCAL ?
         BE    LOADDEST                IF SO, BRANCH TO LOADDEST
         CLC   0(5,R8),=CL5'WDPSC'     DEST = WDPSC ?
         BE    LOADDEST                IF SO, BRANCH TO LOADDEST
         CLC   0(3,R8),=CL3'RMT'       DEST BEGIN WITH 'RMT' ?
         BE    LOADDEST                IF SO, BRANCH TO LOADDEST
         CLC   0(6,R8),=CL6'REMOTE'    DEST BEGIN WITH 'REMOTE' ?
         BE    LOADDEST                IF SO, BRANCH TO LOADDEST
         B     BADDEST                 BRANCH TO BADDEST
LOADDEST LH    R7,DSTSTRNG+4           R7 ==> LENGTH OF THE DESTINATION
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEDST  MVC   0(0,R1),0(R8)           MOVE THE DESTINATION TO ZDEST
         EX    R7,MOVEDST
         SPACE 1
         MVC   ZDSTLEN(2),DSTSTRNG+4   ZDSTLEN => LENGTH OF DESTINATION
         B     EXITGDST                BRANCH TO EXITGDST
BADDEST  MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,20                   SET REG 4 = 20
         MVC   OUTMSG,ERRMSG6          MOVE 'INVALID DESTINATION'
*                                        TO OUTMSG
EXITGDST L     R14,SAVEIT5
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE NUMBER OF COPIES FROM THE KEYWORD*
*        PARAMETER COPIES, EDITS IT, AND STORES IT INTO ZCOPIES    *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE NUMBER OF COPIES TO ZCOPIES            *
*                      (SPACE WHEN NO OF COPIES IS NOT PRESENT)    *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACE TO ZCOPIES                           *
*                                                                  *
********************************************************************
*
GETCPYS  ST    R14,SAVEIT6             SAVE REG 14 CONTENTS IN SAVEIT6
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVI   ZCOPIES,C' '            MOVE SPACE TO ZCOPIES
         MVC   INCOPIES,=CL3'000'      MOVE 000 TO INCOPIES
         TM    CPYSTRNG+6,X'80'        IS NO OF COPIES PRESENT ?
         BNO   EXITGCPY                IF NOT, BRANCH TO EXITGCPY
         LH    R7,CPYSTRNG+4           R7 ==> LENGTH OF NO OF COPIES
         L     R8,CPYSTRNG             R8 ==> ADDRESS OF NO OF COPIES
         CH    R7,=H'1'                LENGTH OF # OF COPIES = 1 ?
         BE    CPYLEN1                 IF SO, BRANCH TO CPYLEN1
         CH    R7,=H'2'                LENGTH OF # OF COPIES = 2 ?
         BE    CPYLEN2                 IF SO, BRANCH TO CPYLEN2
         CH    R7,=H'3'                LENGTH OF # OF COPIES = 3 ?
         BE    CPYLEN3                 IF SO, BRANCH TO CPYLEN3
         B     NOGUDCPY                BRANCH TO NOGUDCPY
CPYLEN1  MVC   INCOPIES+2(1),0(R8)     MOVE # OF COPIES TO INCOPIES
         B     EDITCPYS                BRANCH TO EDITCPYS
CPYLEN2  MVC   INCOPIES+1(2),0(R8)     MOVE # OF COPIES TO INCOPIES
         B     EDITCPYS                BRANCH TO EDITCPYS
CPYLEN3  MVC   INCOPIES(3),0(R8)       MOVE # OF COPIES TO INCOPIES
EDITCPYS BAL   R14,CNVCPYS             EDIT AND CONVERT # OF COPIES
         CLC   COPYSW,=CL3'YES'        WAS EDIT AND CONV SUCCESSFUL ?
         BE    EXITGCPY                IF SO, BRANCH TO EXITGCPY
NOGUDCPY MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,28                   SET REG 4 = 28
         MVC   OUTMSG,ERRMSG8          MOVE 'INVALID NO OF COPIES'
*                                        TO OUTMSG
EXITGCPY L     R14,SAVEIT6
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE FCB FROM THE KEYWORD             *
*        PARAMETER FCB, EDITS IT, AND STORES IT INTO ZFCB          *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE FCB TO ZFCB                            *
*                     (SPACES WHEN FCB IS NOT PRESENT)             *
*                  MOVE THE LENGTH OF THE FCB PARAMETER TO ZFCBLEN *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZFCB                             *
*                                                                  *
********************************************************************
*
GETFCB   ST    R14,SAVEIT7             SAVE REG 14 CONTENTS IN SAVEIT7
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   ZFCB,=CL4' '            MOVE SPACES TO ZFCB
         TM    FCBSTRNG+6,X'80'        IS THE FCB PRESENT ?
         BNO   EXITGFCB                IF NOT, BRANCH TO EXITGFCB
         LA    R1,ZFCB                 R1 ==> ADDRESS OF ZFCB
         L     R8,FCBSTRNG             R8 ==> ADDRESS OF THE FCB
         LH    R7,FCBSTRNG+4           R7 ==> LENGTH OF THE FCB
         C     R7,=F'1'
         BL    BADFCB
         C     R7,=F'4'
         BH    BADFCB
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEFCB  MVC   0(0,R1),0(R8)           MOVE THE FCB TO ZFCB
         EX    R7,MOVEFCB
         SPACE 1
         MVC   ZFCBLEN(2),FCBSTRNG+4   ZFCBLEN ==> LENGTH OF FCB
         B     EXITGFCB
BADFCB   MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,36                   SET REG 4 = 36
         MVC   OUTMSG,ERRMSG10         MOVE 'INVALID FCB' TO OUTMSG
EXITGFCB L     R14,SAVEIT7
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE FLASH NAME FROM THE KEYWORD      *
*        PARAMETER FLASH, EDITS IT, AND STORES IT INTO ZFLASH      *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE FLASH NAME TO ZFLASH                   *
*                     (SPACES WHEN FLASH NAME IS NOT PRESENT)      *
*                  MOVE THE LENGTH OF THE FLASH NAME TO ZFLSHLEN   *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZFLASH                           *
*                                                                  *
********************************************************************
*
GETFLSH  ST    R14,SAVEIT8             SAVE REG 14 CONTENTS IN SAVEIT8
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   ZFLASH,=CL4' '          MOVE SPACES TO ZFLASH
         TM    FLHSTRNG+6,X'80'        IS THE FLASH PRESENT ?
         BNO   EXITGFLH                IF NOT, BRANCH TO EXITGFLH
         LA    R1,ZFLASH               R1 ==> ADDRESS OF ZFLASH
         L     R8,FLHSTRNG             R8 ==> ADDRESS OF THE FLASH
         LH    R7,FLHSTRNG+4           R7 ==> LENGTH OF THE FLASH
         C     R7,=F'1'
         BL    BADFLASH
         C     R7,=F'4'
         BH    BADFLASH
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEFLH  MVC   0(0,R1),0(R8)           MOVE THE FLASH TO ZFLASH
         EX    R7,MOVEFLH
         SPACE 1
         MVC   ZFLSHLEN(2),FLHSTRNG+4  ZFLSHLEN ==> LENGTH OF FLASH
         B     EXITGFLH
BADFLASH MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,40                   SET REG 4 = 40
         MVC   OUTMSG,ERRMSG11         MOVE 'INVALID FLASH NAME'
*                                          TO OUTMSG
EXITGFLH L     R14,SAVEIT8
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE CHARS PARAMETER FROM THE KEYWORD *
*        PARAMETER CHARS, EDITS IT, AND STORES IT INTO ZCHARS1,    *
*        ZCHARS2, ZCHARS3, AND ZCHARS4                             *
*                                                                  *
*        IF THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS        *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE 1ST CHARS PARAMETER TO ZCHARS1         *
*                  MOVE THE LENGTH OF THE 1ST CHARS                *
*                      PARAMETER TO ZCHR1LEN                       *
*                  MOVE THE 2ND CHARS PARAMETER TO ZCHARS2         *
*                        (SPACES IF ONLY 1 CHARS PARAMETER         *
*                              IS PRESENT)                         *
*                  MOVE THE LENGTH OF THE 2ND CHARS                *
*                      PARAMETER TO ZCHR2LEN IF APPROPRIATE        *
*                  MOVE THE 3RD CHARS PARAMETER TO ZCHARS3         *
*                        (SPACES IF ONLY 2 CHARS PARAMETERS        *
*                             ARE PRESENT)                         *
*                  MOVE THE LENGTH OF THE 3RD CHARS                *
*                      PARAMETER TO ZCHR3LEN IF APPROPRIATE        *
*                  MOVE THE 4TH CHARS PARAMETER TO ZCHARS4         *
*                        (SPACES IF ONLY 3 CHARS PARAMETERS        *
*                             ARE PRESENT)                         *
*                  MOVE THE LENGTH OF THE 4TH CHARS                *
*                      PARAMETER TO ZCHR4LEN IF APPROPRIATE        *
*        IF THIS PARAMETER IS NOT PROVIDED                         *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE SPACES TO ZCHARS1                          *
*        IF THIS PARAMETER IS PROVIDED BUT IS INVALID              *
*              THEN IT WILL                                        *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZCHARS1                          *
*                                                                  *
********************************************************************
*
GETCHRS  ST    R14,SAVEIT9            SAVE REG 14 CONTENTS IN SAVEIT9
         MVC   VALIDSW,=CL3'YES'      MOVE 'YES' TO VALIDSW
         MVC   ZCHARS1,=CL4' '        MOVE SPACES TO ZCHARS1
         MVC   ZCHARS2,=CL4' '        MOVE SPACES TO ZCHARS2
         MVC   ZCHARS3,=CL4' '        MOVE SPACES TO ZCHARS3
         MVC   ZCHARS4,=CL4' '        MOVE SPACES TO ZCHARS4
         TM    CHRSTRNG+6,X'80'       IS THE CHARS PARAMETER PRESENT ?
         BNO   EXITGCHR               IF NOT, BRANCH TO EXITGCHR
         ZAP   WHICHONE,PACKED1       SET WHICHONE = 1
         LA    R9,CHRSTRNG            R9==> ADDRESS OF CHARS PDE
CHRSLOOP CP    WHICHONE,PACKED4       WHICHONE GT 4 ?
         BH    BADCHARS               IF SO, BRANCH TO BADCHARS
         MVC   PDEWORD1,0(R9)         PDEWORD1==> PTR TO VALUE
         MVC   PDEWORD2,4(R9)         PDEWORD2==> LENGTH OF VALUE
         MVC   PDEWORD3,8(R9)         PDEWORD3==> PTR TO NEXT ENTRY
         LH    R7,PDEWORD2            R7==> LENGTH OF VALUE
         C     R7,=F'1'
         BL    BADCHARS
         C     R7,=F'4'
         BH    BADCHARS
         L     R8,PDEWORD1            R8==> ADDRESS OF VALUE
         BAL   R14,LOADCHRS
         CLC   PDEWORD3,=XL4'FF000000'  IS THIS LAST ENTRY ?
         BE    EXITGCHR                 IF SO, BRANCH TO EXITGCHR
         AP    WHICHONE,PACKED1       ADD 1 TO WHICHONE
         L     R9,PDEWORD3            R9==> ADDRESS OF NEXT ENTRY
         B     CHRSLOOP               BRANCH TO CHRSLOOP
*
*
*
LOADCHRS ST    R14,SAVEIT20           SAVE REG 14 CONTENTS IN SAVEIT20
         CP    WHICHONE,PACKED1       WHICHONE = 1 ?
         BE    LOADCHR1               IF SO, BRANCH TO LOADCHR1
         CP    WHICHONE,PACKED2       WHICHONE = 2 ?
         BE    LOADCHR2               IF SO, BRANCH TO LOADCHR2
         CP    WHICHONE,PACKED3       WHICHONE = 3 ?
         BE    LOADCHR3               IF SO, BRANCH TO LOADCHR3
         STH   R7,ZCHR4LEN            ZCHR4LEN = LENGTH OF VALUE
         LA    R1,ZCHARS4             R1==> ADDRESS OF ZCHARS4
         B     MOVEIT                 BRANCH TO MOVEIT
LOADCHR1 STH   R7,ZCHR1LEN            ZCHR1LEN = LENGTH OF VALUE
         LA    R1,ZCHARS1             R1==> ADDRESS OF ZCHARS1
         B     MOVEIT                 BRANCH TO MOVEIT
LOADCHR2 STH   R7,ZCHR2LEN            ZCHR2LEN = LENGTH OF VALUE
         LA    R1,ZCHARS2             R1==> ADDRESS OF ZCHARS2
         B     MOVEIT                 BRANCH TO MOVEIT
LOADCHR3 STH   R7,ZCHR3LEN            ZCHR3LEN = LENGTH OF VALUE
         LA    R1,ZCHARS3             R1==> ADDRESS OF ZCHARS3
MOVEIT   S     R7,=F'1'               SUBTRACT 1 FOR EX
         SPACE 1
MOVECHRS MVC   0(0,R1),0(R8)
         EX    R7,MOVECHRS
         SPACE 1
EXITLCHR L     R14,SAVEIT20
         BR    R14
*
*
*
BADCHARS MVC   VALIDSW,=CL3'NO '      MOVE 'NO ' TO VALIDSW
         LA    R4,48                  SET REG 4 = 48
         MVC   OUTMSG,ERRMSG13        MOVE 'INVALID CHARS PARAMETER'
*                                         TO OUTMSG
EXITGCHR L     R14,SAVEIT9
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE COPYMOD FROM THE KEYWORD         *
*        PARAMETER MODIFY, EDITS IT, AND STORES IT INTO            *
*        ZMODIFY1, ZMOD1LEN, AND ZMODIFY2                          *
*                                                                  *
*        IF THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS        *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE COPYMOD NAME TO ZMODIFY1               *
*                  MOVE THE LENGTH OF THE COPYMOD NAME TO ZMOD1LEN *
*                  MOVE THE COPYMOD/CHAR REFERENCE SPECIFICATION   *
*                      (IF APPROPRIATE) TO ZMODIFY2                *
*        IF THIS PARAMETER IS NOT PROVIDED                         *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE SPACES TO ZMODIFY1                         *
*                  MOVE SPACE TO ZMODIFY2                          *
*        IF THIS PARAMETER IS PROVIDED BUT IS INVALID              *
*              THEN IT WILL                                        *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZMODIFY1                         *
*                                                                  *
********************************************************************
*
GETCPMD  ST    R14,SAVEIT10           SAVE REG 14 CONTENTS IN SAVEIT10
         MVC   VALIDSW,=CL3'YES'      MOVE 'YES' TO VALIDSW
         MVC   ZMODIFY1,=CL4' '       MOVE SPACES TO ZMODIFY1
         MVC   ZMODIFY2,=CL1' '       MOVE SPACE TO ZMODIFY2
         TM    MODSTRNG+6,X'80'       IS THE MODIFY PARAMTER PRESENT ?
         BNO   EXITCPMD               IF NOT, BRANCH TO EXITCPMD
         LA    R9,MODSTRNG            R9==> ADDRESS OF MODIFY PDE
         MVC   PDEWORD1,0(R9)         PDEWORD1==> PTR TO COPYMOD
         MVC   PDEWORD2,4(R9)         PDEWORD2==> LENGTH OF COPYMOD
         MVC   PDEWORD3,8(R9)         PDEWORD3==> PTR TO NEXT ENTRY
         LH    R7,PDEWORD2            R7==> LENGTH OF COPYMOD
         C     R7,=F'1'
         BL    BADCPYMD
         C     R7,=F'4'
         BH    BADCPYMD
         L     R8,PDEWORD1            R8==> ADDRESS OF COPYMOD
         STH   R7,ZMOD1LEN            ZMOD1LEN = LENGTH OF COPYMOD
         LA    R1,ZMODIFY1            R1==> ADDRESS OF ZMODIFY1
         S     R7,=F'1'               SUBTRACT 1 FOR EX
         SPACE 1
MOVECPMD MVC   0(0,R1),0(R8)
         EX    R7,MOVECPMD
         SPACE 1
         CLC   PDEWORD3,=XL4'FF000000'  IS THIS LAST ENTRY ?
         BE    EXITCPMD                 IF SO, BRANCH TO EXITCPMD
         L     R9,PDEWORD3            R9==> ADDRESS OF NEXT ENTRY
         MVC   PDEWORD1,0(R9)         PDEWORD1==> PTR TO CHARS REF CHAR
         MVC   PDEWORD2,4(R9)         PDEWORD2==> LENGTH OF REF CHAR
         MVC   PDEWORD3,8(R9)         PDEWORD3==> PTR TO NEXT ENTRY
         LH    R7,PDEWORD2            R7==> LENGTH OF REF CHARACTER
         C     R7,=F'1'
         BNE   BADCPYMD
         L     R8,PDEWORD1            R8==> ADDRESS OF REF CHARACTER
         CLI   0(R8),C'0'
         BE    MOVECREF
         CLI   0(R8),C'1'
         BE    MOVECREF
         CLI   0(R8),C'2'
         BE    MOVECREF
         CLI   0(R8),C'3'
         BNE   BADCPYMD
MOVECREF MVC   ZMODIFY2(1),0(R8)
         B     EXITCPMD
BADCPYMD MVC   VALIDSW,=CL3'NO '      MOVE 'NO ' TO VALIDSW
         LA    R4,52                  SET REG 4 = 52
         MVC   OUTMSG,ERRMSG14        MOVE 'INVALID MODIFY PARAMETER'
*                                         TO OUTMSG
EXITCPMD L     R14,SAVEIT10
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE OBTAINS THE OPTCD FROM THE KEYWORD           *
*        PARAMETER OPTCD, EDITS IT, AND STORES IT INTO ZOPTCD      *
*                                                                  *
*        IF (THIS PARAMETER IS PROVIDED AND PASSES ALL EDITS)      *
*          OR                                                      *
*           (THIS PARAMETER IS NOT PROVIDED)                       *
*              THEN IT WILL                                        *
*                  MOVE 'YES' TO VALIDSW                           *
*                  MOVE THE OPTCD TO ZOPTCD                        *
*                     (SPACES WHEN OPTCD IS NOT PRESENT)           *
*        ELSE IT WILL                                              *
*                  MOVE 'NO ' TO VALIDSW                           *
*                  MOVE APPROPRIATE VALUE TO REG 4                 *
*                  MOVE APPROPRIATE MESSAGE TO OUTMSG              *
*                  MOVE SPACES TO ZOPTCD                           *
*                                                                  *
********************************************************************
*
GETOPCD  ST    R14,SAVEIT11           SAVE REG 14 CONTENTS IN SAVEIT11
BASEREG2 MVC   VALIDSW,=CL3'YES'      MOVE 'YES' TO VALIDSW
         MVI   ZOPTCD,C' '            MOVE SPACE TO ZOPTCD
         TM    OPTSTRNG+6,X'80'       IS THE OPTCD PRESENT ?
         BNO   EXITGOPT               IF NOT, BRANCH TO EXITGOPT
         LH    R7,OPTSTRNG+4          R7 ==> LENGTH OF THE OPTCD
         C     R7,=F'1'
         BNE   BADOPTCD
         L     R8,OPTSTRNG            R8 ==> ADDRESS OF THE OPTCD
         CLC   0(1,R8),=CL1'J'
         BNE   BADOPTCD
         MVC   ZOPTCD,0(R8)
         B     EXITGOPT
BADOPTCD MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         LA    R4,44                   SET REG 4 = 44
         MVC   OUTMSG,ERRMSG12         MOVE 'INVALID OPTCD' TO OUTMSG
EXITGOPT L     R14,SAVEIT11
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        D Y N A M I C   U N A L L O C A T I O N                   *
*                                                                  *
********************************************************************
*
DYNFREE  ST    R14,SAVEIT12            SAVE REG 14 CONTENTS IN SAVEIT12
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         MVC   FREEUT1A,ZDDNLEN        MOVE LEN OF DDNAME TO FREEUT1A
         MVC   FREEUT1B,ZDDNAME        MOVE THE DDNAME TO FREEUT1B
         LA    R1,FREEPARM
         DYNALLOC                      FREE F(DDNAME)
         LTR   R15,R15                 TEST REGISTER 15 FOR ZERO
         BZ    EXITFREE                IF ZERO, BRANCH TO EXITFREE
         CLC   FREERRCD,=XL2'0438'     DDNAME ALREADY FREED ?
         BE    EXITFREE                IF SO, BRANCH TO EXITFREE
         MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         MVC   OUTMSG,ERRMSG3          MOVE DYNAMIC DEALLOC ERR MSG
*                                        TO OUTMSG
         MVC   HEXINPUT,FREERRCD       LOAD HEXINPUT WITH ERR REASON CD
         BAL   R14,UNPKHEX             PERFORM ROUTINE TO UNPACK THE
*                                         ERR REASON CODE INTO HEXOUT
         MVC   OUTMSG+41(4),HEXOUT     MOVE UNPACKED ERR REASON CODE
*                                        TO OUTMSG
         LA    R4,8                    SET R4 TO 8
EXITFREE L     R14,SAVEIT12
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        D Y N A M I C    A L L O C A T I O N                      *
*                                                                  *
********************************************************************
*
DYNALLOK ST    R14,SAVEIT13            SAVE REG 14 CONTENTS IN SAVEIT13
         MVC   VALIDSW,=CL3'YES'       MOVE 'YES' TO VALIDSW
         BAL   R14,BLDTUNTS            BUILD TEXT UNITS
         LA    R1,DD1PARM
         DYNALLOC
         LTR   R15,R15                 TEST REGISTER 15 FOR ZERO
         BZ    EXITALLC                IF ZERO, BRANCH TO EXITALLC
         MVC   VALIDSW,=CL3'NO '       MOVE 'NO ' TO VALIDSW
         MVC   OUTMSG,ERRMSG7          MOVE DYNAMIC ALLOC ERR MSG
*                                        TO OUTMSG
         MVC   HEXINPUT,DD1ERRCD       LOAD HEXINPUT WITH ERR REASON CD
         BAL   R14,UNPKHEX             PERFORM ROUTINE TO UNPACK THE
*                                         ERR REASON CODE INTO HEXOUT
         MVC   OUTMSG+39(4),HEXOUT     MOVE UNPACKED ERR REASON CODE
*                                        TO OUTMSG
         LA    R4,24                   SET R4 TO 24
EXITALLC L     R14,SAVEIT13
         BR    R14
         EJECT
*
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR CONVERTING A TWO BYTE     *
*        BINARY FIELD (SUCH AS X'0438') TO A FOUR BYTE CHARACTER   *
*        FIELD (SUCH AS 0438)                                      *
*                                                                  *
*        BEFORE PERFORMING THIS ROUTINE, MOVE THE TWO BYTE BINARY  *
*        FIELD TO BE CONVERTED TO HEXINPUT                         *
*                                                                  *
*        AFTER PERFORMING THIS ROUTINE, YOUR TWO BYTE BINARY       *
*        FIELD WILL BE CONVERTED TO 4 CHARACTER BYTES IN HEXOUT    *
*                                                                  *
********************************************************************
*
UNPKHEX  ST    R14,SAVEIT14            SAVE REG 14 IN SAVEIT14
         MVC   CHARLEN,=XL2'0004'      CHARLEN IS LENGTH OF HEXOUT
         MVC   CNVTYPE,=CL3'HTC'       HTC ==> HEX TO CHAR CONVERSION
         CALL  HEXTRAN,(HEXOUT,HEXINPUT,CHARLEN,CNVTYPE),VL
         L     R14,SAVEIT14            RESTORE REGISTER 14
         BR    R14                     RETURN
         EJECT
*
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR:                          *
*                                                                  *
*             1.  EDITING A 3 BYTE FIELD INCOPIES (WHICH IS PASSED *
*                 TO THIS ROUTINE).  THIS FIELD MUST BE ENTIRELY   *
*                 NUMERIC, WITH LEADING ZEROS, AND IN THE RANGE    *
*                 001 THRU 255                                     *
*                                                                  *
*                      IF IT PASSES THE EDIT, THIS ROUTINE WILL    *
*                          MOVE 'YES' TO COPYSW                    *
*                          DO FUNCTION #2 (THE CONVERSION)
*                      ELSE IT WILL                                *
*                          MOVE 'NO ' TO COPYSW                    *
*                          EXIT THE ROUTINE                        *
*                                                                  *
*             2.  CONVERTING THAT 3 BYTE DISPLAY TYPE FIELD TO     *
*                 A ONE BYTE HEXADECIMAL FIELD ZCOPIES             *
*                                                                  *
*                      E.G.                                        *
*                                                                  *
*                          IF INCOPIES IS EQUAL TO 014, THEN       *
*                               ZCOPIES WILL EQUAL X'0E'         *
*                                                                  *
********************************************************************
*
CNVCPYS  ST    R14,SAVEIT15            SAVE REG 14 IN SAVEIT15
         MVC   COPYSW,=CL3'YES'        MOVE 'YES' TO COPYSW
         CLI   INCOPIES,C'0'           BYTE #1 OF COPIES LT '0' ?
         BL    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLI   INCOPIES,C'9'           BYTE #1 OF COPIES GT '9' ?
         BH    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLI   INCOPIES+1,C'0'         BYTE #2 OF COPIES LT '0' ?
         BL    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLI   INCOPIES+1,C'9'         BYTE #2 OF COPIES GT '9' ?
         BH    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLI   INCOPIES+2,C'0'         BYTE #3 OF COPIES LT '0' ?
         BL    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLI   INCOPIES+2,C'9'         BYTE #3 OF COPIES GT '9' ?
         BH    BADCPYS                 IF SO, BRANCH TO BADCPYS
         CLC   INCOPIES,=CL3'000'      NO OF COPIES = '000' ?
         BE    BADCPYS                 IF SO, BRANCH TO BADCPYS
         PACK  PKDCPYS,INCOPIES        PACK INCOPIES INTO PKDCPYS
         CVB   R8,PKDCPYS              CONVERT IT TO BINARY
         C     R8,=F'255'              R8 > 255 ?
         BH    BADCPYS                 IF SO, BRANCH TO BADCPYS
         STC   R8,ZCOPIES              STORE # OF COPIES INTO ZCOPIES
         B     EXITCNV                 BRANCH TO EXITCNV
BADCPYS  MVC   COPYSW,=CL3'NO '        MOVE 'NO ' TO COPYSW
EXITCNV  L     R14,SAVEIT15            RESTORE REGISTER 14
         BR    R14                     RETURN
         EJECT
*
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR BUILDING THE TEXT UNITS   *
*        FOR THE DYNAMIC ALLOCATION.                               *
*                                                                  *
********************************************************************
*
BLDTUNTS ST    R14,SAVEIT16            SAVE REG 14 IN SAVEIT16
*
**********************  TEXT UNIT 0001  ***************************
*
*........................  DDNAME  ...............................*
*
         MVC   TU01KEY,=XL2'0001'
         MVC   TU01NUM,=XL2'0001'
         MVC   TU01LEN,ZDDNLEN
         MVC   TU01PRM,ZDDNAME
         EJECT
*
**********************  TEXT UNIT 0052  ***************************
*
*.............  PERMANENTLY ALLOCATED ATTRIBUTE  .................*
*
         MVC   TU02KEY,=XL2'0052'
         MVC   TU02NUM,=XL2'0000'
         EJECT
*
**********************  TEXT UNIT 0018  ***************************
*
*......................  SYSOUT CLASS  ...........................*
*
         MVC   TU03KEY,=XL2'0018'
         MVC   TU03NUM,=XL2'0001'
         MVC   TU03LEN,=XL2'0001'
         MVC   TU03PRM,ZSYSCLAS
         EJECT
*
**********************  TEXT UNIT 001A  ***************************
*
*......................  FORM NUMBER  ............................*
*
         MVC   TU04KEY,=XL2'0000'      VOID TEXT UNIT
*                                         IF FORM # IS NOT PROVIDED
         CLI   ZFORM#,C' '             IS FORM # PROVIDED ?
         BE    BLDDEST                 IF NOT, BRANCH TO BLDDEST
         MVC   TU04KEY,=XL2'001A'
         MVC   TU04NUM,=XL2'0001'
         MVC   TU04LEN,=XL2'0004'
         MVC   TU04PRM,ZFORM#
         EJECT
*
**********************  TEXT UNIT 0058  ***************************
*
*......................  DESTINATION  ............................*
*
BLDDEST  MVC   TU05KEY,=XL2'0000'      VOID TEXT UNIT IF DESTINATION
*                                         IS NOT PROVIDED
         CLI   ZDEST,C' '              IS DESTINATION PROVIDED ?
         BE    BLDCPYS                 IF NOT, BRANCH TO BLDCPYS
         MVC   TU05KEY,=XL2'0058'
         MVC   TU05NUM,=XL2'0001'
         MVC   TU05LEN,ZDSTLEN
         MVC   TU05PRM,ZDEST
         EJECT
*
**********************  TEXT UNIT 001D  ***************************
*
*........................  COPIES  ...............................*
*
BLDCPYS  MVC   TU06KEY,=XL2'0000'      VOID TEXT UNIT IF COPIES
*                                         IS NOT PROVIDED
         CLI   ZCOPIES,C' '            IS COPIES PROVIDED ?
         BE    BLDFLSH                 IF NOT, BRANCH TO BLDFLSH
         MVC   TU06KEY,=XL2'001D'
         MVC   TU06NUM,=XL2'0001'
         MVC   TU06LEN,=XL2'0001'
         MVC   TU06PRM,ZCOPIES
         EJECT
*
**********************  TEXT UNIT 0067  ***************************
*
*.........................  FLASH  ...............................*
*
BLDFLSH  MVC   TU07KEY,=XL2'0000'      VOID TEXT UNIT IF FLASH
*                                         IS NOT PROVIDED
         CLI   ZFLASH,C' '             IS FLASH PROVIDED ?
         BE    BLDCPMD                 IF NOT, BRANCH TO BLDCPMD
         MVC   TU07KEY,=XL2'0067'
         MVC   TU07NUM,=XL2'0001'
         MVC   TU07LEN,ZFLSHLEN
         MVC   TU07PRM,ZFLASH
         EJECT
*
**********************  TEXT UNIT 0069  ***************************
*
*........................  COPYMOD  ..............................*
*
BLDCPMD  MVC   TU08KEY,=XL2'0000'      VOID TEXT UNIT IF COPYMOD
*                                         IS NOT PROVIDED
         CLI   ZMODIFY1,C' '           IS COPYMOD PROVIDED ?
         BE    BLDCHRS                 IF NOT, BRANCH TO BLDCHRS
         MVC   TU08KEY,=XL2'0069'
         MVC   TU08NUM,=XL2'0001'
         MVC   TU08LEN,ZMOD1LEN
         MVC   TU08PRM,ZMODIFY1
         EJECT
*
**********************  TEXT UNIT 006A  ***************************
*
*............  COPYMOD/CHAR REFERENCE SPECIFICATION  .............*
*
         MVC   TU09KEY,=XL2'0000'      VOID TEXT UNIT IF CHARS REF
*                                         IS NOT PROVIDED
         CLI   ZMODIFY2,C' '           IS CHARS REFERENCE PROVIDED ?
         BE    BLDCHRS                 IF NOT, BRANCH TO BLDCHRS
         MVC   TU09KEY,=XL2'006A'
         MVC   TU09NUM,=XL2'0001'
         MVC   TU09LEN,=XL2'0001'
         CLI   ZMODIFY2,C'0'
         BE    BLDMOD20
         CLI   ZMODIFY2,C'1'
         BE    BLDMOD21
         CLI   ZMODIFY2,C'2'
         BE    BLDMOD22
         MVI   TU09PRM,X'03'
         B     BLDCHRS
BLDMOD20 MVI   TU09PRM,X'00'
         B     BLDCHRS
BLDMOD21 MVI   TU09PRM,X'01'
         B     BLDCHRS
BLDMOD22 MVI   TU09PRM,X'02'
         EJECT
*
**********************  TEXT UNIT 0065  ***************************
*
*..............  CHARACTER ARRANGEMENT TABLE(S) ....................*
*
BLDCHRS  MVC   TU10KEY,=XL2'0000'      VOID TEXT UNIT IF CHARS
*                                         IS NOT PROVIDED
         CLI   ZCHARS1,C' '            IS CHARS PROVIDED ?
         BE    BLDFCB                  IF NOT, BRANCH TO BLDFCB
         MVC   TU10KEY,=XL2'0065'
         LA    R7,1
         CLI   ZCHARS2,C' '
         BE    BLDCHRS2
         A     R7,=F'1'
         CLI   ZCHARS3,C' '
         BE    BLDCHRS2
         A     R7,=F'1'
         CLI   ZCHARS4,C' '
         BE    BLDCHRS2
         A     R7,=F'1'
BLDCHRS2 STH   R7,CHRSCNT
         MVC   TU10NUM,CHRSCNT
         MVC   TU10LN1,ZCHR1LEN
         MVC   TU10PM1,ZCHARS1
         CLI   ZCHARS2,C' '
         BE    BLDFCB
         MVC   TU10LN2,ZCHR2LEN
         MVC   TU10PM2,ZCHARS2
         CLI   ZCHARS3,C' '
         BE    BLDFCB
         MVC   TU10LN3,ZCHR3LEN
         MVC   TU10PM3,ZCHARS3
         CLI   ZCHARS4,C' '
         BE    BLDFCB
         MVC   TU10LN4,ZCHR4LEN
         MVC   TU10PM4,ZCHARS4
         EJECT
*
**********************  TEXT UNIT 0025  ***************************
*
*..........................  FCB  ................................*
*
BLDFCB   MVC   TU11KEY,=XL2'0000'      VOID TEXT UNIT IF FCB
*                                         IS NOT PROVIDED
         CLI   ZFCB,C' '               IS FCB PROVIDED ?
         BE    BLDOPCD                 IF NOT, BRANCH TO BLDOPCD
         MVC   TU11KEY,=XL2'0025'
         MVC   TU11NUM,=XL2'0001'
         MVC   TU11LEN,ZFCBLEN
         MVC   TU11PRM,ZFCB
         EJECT
*
**********************  TEXT UNIT 0045  ***************************
*
*.........................  OPTCD  ...............................*
*
BLDOPCD  MVC   TU12KEY,=XL2'0000'      VOID TEXT UNIT IF OPTCD
*                                         IS NOT PROVIDED
         CLI   ZOPTCD,C' '             IS OPTCD PROVIDED ?
         BE    EXITBLD                 IF NOT, BRANCH TO EXITBLD
         MVC   TU12KEY,=XL2'0045'
         MVC   TU12NUM,=XL2'0001'
         MVC   TU12LEN,=XL2'0001'
         MVI   TU12PRM,X'01'
*
*
EXITBLD  L     R14,SAVEIT16            RESTORE REGISTER 14
         BR    R14                     RETURN
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR EDITING ONE BYTE THAT IS  *
*        PASSED TO IT IN INBYTE AS FOLLOWS:                        *
*                                                                  *
*              IF INBYTE IS IN THE RANGE 0-9 OR A-Z                *
*                  THEN THIS ROUTINE WILL                          *
*                        MOVE 'YES' TO EDITSW                      *
*                  ELSE IT WILL                                    *
*                        MOVE 'NO ' TO EDITSW                      *
*                                                                  *
********************************************************************
*
EDITBYTE ST    R14,SAVEIT17            SAVE REG 14 IN SAVEIT17
         MVC   EDITSW,=CL3'YES'        MOVE 'YES' TO EDITSW
         CLI   INBYTE,C'A'             SYSOUT CLASS LT 'A'
         BL    BADBYTE                 IF SO, BRANCH TO BADBYTE
         CLI   INBYTE,C'Z'             SYSOUT CLASS NOT GT 'Z'
         BNH   EXITEDIT                IF SO, BRANCH TO EXITEDIT
         CLI   INBYTE,C'0'             SYSOUT CLASS LT '0'
         BL    BADBYTE                 IF SO, BRANCH TO BADBYTE
         CLI   INBYTE,C'9'             SYSOUT CLASS GT '9'
         BH    BADBYTE                 IF SO, BRANCH TO BADBYTE
         B     EXITEDIT                BRANCH TO EXITEDIT
BADBYTE  MVC   EDITSW,=CL3'NO '        MOVE 'NO ' TO EDITSW
EXITEDIT L     R14,SAVEIT17
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDTLIST (IKJUPDT PARM LIST)                        *
*                                                                  *
********************************************************************
*
INITLIST ST    R14,SAVEIT18           SAVE REG 14 CONTENTS IN SAVEIT18
         MVC   UPDTUPT,CPPLUPT        UPT
         MVC   UPDTECT,CPPLECT        ECT
         LA    R9,ECB
         ST    R9,UPDTECB             ECB
         LA    R8,UPLIST
         ST    R8,UPDTUPL             UPLIST
         L     R14,SAVEIT18
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &OUTMSG AND CALL IKJUPDT       *
*                                                                  *
********************************************************************
*
SETOUTMG ST    R14,SAVEIT19        SAVE REG 14 CONTENTS IN SAVEIT19
         LA    R9,=C'OUTMSG'       R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'6'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,OUTMSG           R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'46'       VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT19
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR DETERMINING WHETHER THIS  *
*        COMMAND WAS INVOKED BY A CLIST OR WAS ENTERED DIRECTLY    *
*                                                                  *
*        IF THIS COMMAND WAS INVOKED BY A CLIST,                   *
*           THEN THIS ROUTINE MOVES 'YES' TO BYCLIST               *
*                                                                  *
*        IF THIS COMMAND WAS ENTERED DIRECTLY (SPF 6 OR AT 'READY')*
*           THEN THIS ROUTINE MOVES 'NO ' TO BYCLIST               *
*                                                                  *
********************************************************************
*
WHOCALLD ST    R14,SAVEIT21        SAVE REG 14 CONTENTS IN SAVEIT21
         L     R6,CPPLADDR         R6===> ADDRESS OF CPPL
         L     R7,12(R6)           R7===> ADDRESS OF ECT
         L     R8,4(R7)            R8===> ADDRESS OF IOSRL
         L     R9,0(R8)            R9===> ADDRESS OF TOP OF STACK
         TM    0(R9),X'08'         ARE WE CALLED BY A CLIST ?
         BO    CLISTER             IF SO, BRANCH TO CLISTER
         MVC   BYCLIST,=CL3'NO '   MOVE 'NO ' TO BYCLIST
         B     EXITWHOC            BRANCH TO EXITWHOC
CLISTER  MVC   BYCLIST,=CL3'YES'   MOVE 'YES' TO BYCLIST
EXITWHOC L     R14,SAVEIT21
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR WRITING OUTMSG TO THE     *
*        TERMINAL IF AND ONLY IF AN ERROR HAS OCCURED              *
*                                                                  *
********************************************************************
*
PUT2TERM ST    R14,SAVEIT22        SAVE REG 14 CONTENTS IN SAVEIT22
         C     R4,=F'0'            WAS NO ERROR ENCOUNTERED ?
         BE    EXITPUTT            IF NOT, BRANCH TO EXITPUTT
*
         L     R6,CPPLADDR         R6===> ADDRESS OF CPPL
         L     R10,4(R6)           R10==> ADDRESS OF UPT
         L     R9,12(R6)           R9===> ADDRESS OF ECT
         MVC   PUTMSG(2),=H'50'
         MVC   PUTMSG+2(2),=H'0'
         MVC   PUTMSG+4(46),OUTMSG
         LA    R8,PUTMSG           R8===> ADDR OF PUTLINE OUTPUT LINE
*
         PUTLINE  PARM=PUTLIST,UPT=(R10),ECT=(R9),ECB=ECB,             X
               OUTPUT=((R8),TERM,SINGLE,DATA),MF=(E,IOPL)
*
EXITPUTT L     R14,SAVEIT22
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        E N D   O F   J O B   R O U T I N E                       *
*                                                                  *
********************************************************************
*
SHUTDOWN LR   R15,R4
         LEAVER
         EJECT
         SPACE 3
********************************************************************
*                                                                  *
*        D A T A   A R E A   C O N S T A N T S                     *
*                                                                  *
********************************************************************
*
GOODMSG  DC    CL46'SUCCESSFUL COMPLETION                         '
ERRMSG1  DC    CL46'INVALID SYNTAX OF ONE OR MORE OPERANDS        '
ERRMSG2  DC    CL46'DDNAME PARAMETER MISSING                      '
ERRMSG3  DC    CL46'DYNAMIC DEALLOC ERROR (ERR REASON CODE =     )'
ERRMSG4  DC    CL46'SYSOUT CLASS PARAMETER MISSING                '
ERRMSG5  DC    CL46'INVALID FORM NUMBER                           '
ERRMSG6  DC    CL46'INVALID DESTINATION                           '
ERRMSG7  DC    CL46'DYNAMIC ALLOC ERROR (ERR REASON CODE =     )  '
ERRMSG8  DC    CL46'INVALID NUMBER OF COPIES SPECIFIED            '
ERRMSG9  DC    CL46'INVALID SYSOUT CLASS                          '
ERRMSG10 DC    CL46'INVALID FCB                                   '
ERRMSG11 DC    CL46'INVALID FLASH NAME                            '
ERRMSG12 DC    CL46'INVALID OPTCD (OPTCD J IS ONLY VALID VALUE)   '
ERRMSG13 DC    CL46'INVALID CHARS PARAMETER                       '
ERRMSG14 DC    CL46'INVALID MODIFY PARAMETER                      '
OUTMSG   DS    CL46
HEXOUT   DS    CL4
HEXINPUT DS    XL2
CHARLEN  DS    BL2
CNVTYPE  DS    CL3
WHICHONE DS    PL2
PACKED1  DC    PL2'1'
PACKED2  DC    PL2'2'
PACKED3  DC    PL2'3'
PACKED4  DC    PL2'4'
CHRSCNT  DS    H
*
*
*
*
         EJECT
         SPACE 3
*
********************************************************************
*                                                                  *
*        DATA STRUCTURE FOR FREEING OF DDNAME                      *
*                                                                  *
********************************************************************
*
         SPACE 3
         DS    0F
FREEPARM DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(FREERB)   ADDRESS OF REQUEST BLOCK
FREERB   DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'02'         S99VERB (REQUEST FOR UNALLOCATION)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
FREERRCD DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(FREETUPL)   S99TXTPP (ADDR OF POINTER TO TEXT UNIT)
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
FREETUPL DC    A(FREEUNT1)   ADDRESS OF TEXT UNIT #1
         DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(FREEUNT2) ADDRESS OF TEXT UNIT #2
FREEUNT1 DC    X'0001'
         DC    X'0001'
FREEUT1A DS    BL2           LENGTH OF DDNAME
FREEUT1B DS    CL8           DDNAME
FREEUNT2 DC    X'0007'
         DC    X'0000'       FREE EVEN IF PERM ALLOC ATTR IS ON
         EJECT
*
********************************************************************
*                                                                  *
*        DATA STRUCTURE FOR DYNAMIC ALLOCATION                     *
*                                                                  *
********************************************************************
*
         SPACE 3
         DS    0F
DD1PARM  DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(DD1RB)    ADDRESS OF REQUEST BLOCK
DD1RB    DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'01'         S99VERB (REQUEST FOR DSNAME ALLOC)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
DD1ERRCD DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(DD1TUPL)    S99TXTPP (ADDR OF POINTERS TO TEXT UNITS
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
DD1TUPL  DC    A(TU01KEY)    ADDRESS OF TEXT UNIT #1
         DC    A(TU02KEY)    ADDRESS OF TEXT UNIT #2
         DC    A(TU03KEY)    ADDRESS OF TEXT UNIT #3
         DC    A(TU04KEY)    ADDRESS OF TEXT UNIT #4
         DC    A(TU05KEY)    ADDRESS OF TEXT UNIT #5
         DC    A(TU06KEY)    ADDRESS OF TEXT UNIT #6
         DC    A(TU07KEY)    ADDRESS OF TEXT UNIT #7
         DC    A(TU08KEY)    ADDRESS OF TEXT UNIT #8
         DC    A(TU09KEY)    ADDRESS OF TEXT UNIT #9
         DC    A(TU10KEY)    ADDRESS OF TEXT UNIT #10
         DC    A(TU11KEY)    ADDRESS OF TEXT UNIT #11
         DC    XL1'80'       HIGH ORDER BIT OF TEXT UNIT #12
         DC    AL3(TU12KEY)  ADDRESS OF TEXT UNIT #12
*
TU01KEY  DS    XL2           DDNAME
TU01NUM  DS    XL2
TU01LEN  DS    XL2
TU01PRM  DS    CL8
*
TU02KEY  DS    XL2           PERMANENTLY ALLOCATED ATTRIBUTE
TU02NUM  DS    XL2
*
TU03KEY  DS    XL2           SYSOUT CLASS
TU03NUM  DS    XL2
TU03LEN  DS    XL2
TU03PRM  DS    CL1
*
TU04KEY  DS    XL2           FORM NUMBER
TU04NUM  DS    XL2
TU04LEN  DS    XL2
TU04PRM  DS    CL4
*
TU05KEY  DS    XL2           DESTINATION
TU05NUM  DS    XL2
TU05LEN  DS    XL2
TU05PRM  DS    CL8
*
TU06KEY  DS    XL2           COPIES
TU06NUM  DS    XL2
TU06LEN  DS    XL2
TU06PRM  DS    CL1
*
TU07KEY  DS    XL2           FLASH
TU07NUM  DS    XL2
TU07LEN  DS    XL2
TU07PRM  DS    CL4
*
TU08KEY  DS    XL2           COPYMOD
TU08NUM  DS    XL2
TU08LEN  DS    XL2
TU08PRM  DS    CL4
*
TU09KEY  DS    XL2           COPYMOD/CHAR REFERENCE SPECIFICATION
TU09NUM  DS    XL2
TU09LEN  DS    XL2
TU09PRM  DS    CL1
*
TU10KEY  DS    XL2           CHARS
TU10NUM  DS    XL2
TU10LN1  DS    XL2
TU10PM1  DS    CL4
TU10LN2  DS    XL2
TU10PM2  DS    CL4
TU10LN3  DS    XL2
TU10PM3  DS    CL4
TU10LN4  DS    XL2
TU10PM4  DS    CL4
*
TU11KEY  DS    XL2           FCB
TU11NUM  DS    XL2
TU11LEN  DS    XL2
TU11PRM  DS    CL4
*
TU12KEY  DS    XL2           OPTCD
TU12NUM  DS    XL2
TU12LEN  DS    XL2
TU12PRM  DS    CL1
*
*
*
         LTORG
         EJECT
         SPACE 3
********************************************************************
*                                                                  *
*        D Y N A M I C   W O R K   A R E A                         *
*                                                                  *
********************************************************************
*
WORKAREA DSECT
SAVEAREA DS    18F
ANS      DS    F
ECB      DS    F
PPLA     DS    7F
PUTLIST  PUTLINE  MF=L
IOPL     DS    4F
COPYSW   DS    CL3
PUTMSG   DS    H
         DS    H
         DS    CL46
SAVEIT1  DS    F
SAVEIT2  DS    F
SAVEIT3  DS    F
SAVEIT4  DS    F
SAVEIT5  DS    F
SAVEIT6  DS    F
SAVEIT7  DS    F
SAVEIT8  DS    F
SAVEIT9  DS    F
SAVEIT10 DS    F
SAVEIT11 DS    F
SAVEIT12 DS    F
SAVEIT13 DS    F
SAVEIT14 DS    F
SAVEIT15 DS    F
SAVEIT16 DS    F
SAVEIT17 DS    F
SAVEIT18 DS    F
SAVEIT19 DS    F
SAVEIT20 DS    F
SAVEIT21 DS    F
SAVEIT22 DS    F
PDEWORD1 DS    F
PDEWORD2 DS    F
PDEWORD3 DS    F
CPPLADDR DS    F
PKDCPYS  DS    D
INCOPIES DS    CL3
EDITSW   DS    CL3
INBYTE   DS    CL1
BYCLIST  DS    CL3
VALIDSW  DS    CL3
ZDDNAME  DS    CL8
ZDDNLEN  DS    H
ZSYSCLAS DS    CL1
ZFORM#   DS    CL4
ZDEST    DS    CL8
ZDSTLEN  DS    H
ZCOPIES  DS    XL1
ZFCB     DS    CL4
ZFCBLEN  DS    H
ZFLASH   DS    CL4
ZFLSHLEN DS    H
ZCHARS1  DS    CL4
ZCHR1LEN DS    H
ZCHARS2  DS    CL4
ZCHR2LEN DS    H
ZCHARS3  DS    CL4
ZCHR3LEN DS    H
ZCHARS4  DS    CL4
ZCHR4LEN DS    H
ZMODIFY1 DS    CL4
ZMOD1LEN DS    H
ZMODIFY2 DS    CL1
ZOPTCD   DS    CL1
*
UPDTLIST DS    0F
UPDTUPT  DS    F
UPDTECT  DS    F
UPDTECB  DS    F
UPDTUPL  DS    F
*
UPLIST   DS    0F
LOCPTR   DS    AL4
LOCLEN   DS    FL4
VALPTR   DS    AL4
VALLEN   DS    FL4
*
WORKLEN  EQU   *-WORKAREA
SYSOUT   CSECT
         EJECT
********************************************************************
*                                                                  *
*                   P A R S E   M A C R O S                        *
*                                                                  *
********************************************************************
*
PCL      IKJPARM
DDNAME   IKJKEYWD
         IKJNAME 'DDNAME',SUBFLD=DDNAM,ALIAS=('FILE')
SYSCLASS IKJKEYWD
         IKJNAME 'SYSCLASS',SUBFLD=SYSCL,ALIAS=('SYSOUT','CLASS')
FORM     IKJKEYWD
         IKJNAME 'FORM',SUBFLD=FORMNO
DEST     IKJKEYWD
         IKJNAME 'DEST',SUBFLD=DESTIN
COPIES   IKJKEYWD
         IKJNAME 'COPIES',SUBFLD=CPYS
FCB      IKJKEYWD
         IKJNAME 'FCB',SUBFLD=FCBSF
CHARS    IKJKEYWD
         IKJNAME 'CHARS',SUBFLD=CHARSSF
FLASH    IKJKEYWD
         IKJNAME 'FLASH',SUBFLD=FLASHSF
MODIFY   IKJKEYWD
         IKJNAME 'MODIFY',SUBFLD=MODIFYSF
OPTCD    IKJKEYWD
         IKJNAME 'OPTCD',SUBFLD=OPTCDSF
DDNAM    IKJSUBF
DDNSTRNG IKJPOSIT DSNAME,DDNAM
SYSCL    IKJSUBF
SYSSTRNG IKJIDENT 'SYS CLASS',FIRST=ANY,OTHER=ANY
FORMNO   IKJSUBF
FRMSTRNG IKJIDENT 'FORM NMBR',FIRST=ANY,OTHER=ANY
DESTIN   IKJSUBF
DSTSTRNG IKJIDENT 'DESTIN',FIRST=ANY,OTHER=ANY
CPYS     IKJSUBF
CPYSTRNG IKJIDENT 'COPIES',FIRST=ANY,OTHER=ANY
FCBSF    IKJSUBF
FCBSTRNG IKJIDENT 'FCB',FIRST=ANY,OTHER=ANY
CHARSSF  IKJSUBF
CHRSTRNG IKJIDENT 'CHARS',LIST,FIRST=ANY,OTHER=ANY
FLASHSF  IKJSUBF
FLHSTRNG IKJIDENT 'FLASH',FIRST=ANY,OTHER=ANY
MODIFYSF IKJSUBF
MODSTRNG IKJIDENT 'COPYMOD',LIST,FIRST=ANY,OTHER=ANY
OPTCDSF  IKJSUBF
OPTSTRNG IKJIDENT 'OPTCD',FIRST=ANY,OTHER=ANY
         IKJENDP
         END
