./ ADD NAME=FULLUT1  0120-80058-82075-1012-00058-00041-00000-KK00150
$ ----------------------   &FULL SCREEN GENERATOR   $-------------------
&SELECT OPTION ===>%*FSOPT  $
&
&  G$- GENERATE SCREEN,&A$- ASSEMBLE SCREEN,&GA$- GENERATE AND ASSEMBLE
&
$SCREEN NAME         &===>%SCREEN  $
&
&
$SCREEN FORMAT LIB   &===>%FORLIB
$
$ASSEMBLER SOURCE LIB&===>%ASMSRC
$
$SCREEN LOAD LIBRARY &===>%ASMLOD
$
$      ATTRIBUTE CODES ARE:           DEFAULT:      REPLACEMENT:
<FIELDS>!%О&*#"
*              PROTECTED HIGH INTENSITY   ==>&+*            ==>%U*
*              PROTECTED LOW  INTENSITY   ==>&^*            ==>%V*
*              UNPROTECTED HIGH INTENSITY ==>&$*            ==>%W*
*              UNPROTECTED LOW  INTENSITY ==>&о*            ==>%X*
*
*              INITIAL CURSOR LOCATION    ==>&_*            ==>%Z*
*
<ACTION>
1 *FSOPT CHAR(3)   CURSOR INIT(' ') GENHELP(TSAN05)
         LIST(G,A,GA,*)
         RETURN(G,A,GA,?);
2 SCREEN CHAR(8)  NOCURSOR INIT($PARM2)
         LIST(' ',*)
         RETURN(?);
3 FORLIB CHAR(46) NOCURSOR INIT($PARM3)
         LIST(' ',*)
         RETURN(ооо);
4 ASMSRC CHAR(46) NOCURSOR INIT($PARM4)
         LIST(' ',*)
         RETURN(ооо);
5 ASMLOD CHAR(46) NOCURSOR INIT($PARM5)
         LIST(' ',*)
         RETURN(ооо);
6 U      CHAR(1)  NOCURSOR INIT($PARM6)  KEY(ATTR1)
         LIST(' ','?',^,'''',*)
         RETURN('+',Q,N,A);
7 V      CHAR(1)  NOCURSOR INIT($PARM7)  KEY(ATTR2)
         LIST(' ','?',^,'''',*)
         RETURN('N',Q,N,A);
8 W      CHAR(1)  NOCURSOR INIT($PARM8)  KEY(ATTR3)
         LIST(' ','?',^,'''',*)
         RETURN('$',Q,N,A);
9 X      CHAR(1)  NOCURSOR INIT($PARM9)  KEY(ATTR4)
         LIST(' ','?',^,'''',*)
         RETURN('о',Q,N,A);
10 Y     CHAR(1)  NOCURSOR INIT($PARM10) KEY(ATTR5)
         LIST(' ','?',^,'''',*)
         RETURN('@',Q,N,A);
11 Z     CHAR(1)  NOCURSOR INIT($PARM11) KEY(ATTR6)
         LIST(' ','?',^,'''',*)
         RETURN('_',Q,N,A);
<END>
./ ADD NAME=FULLUT2  0121-79307-82075-1013-00040-00026-00000-KK00150
$ ----------------------   &FULL SCREEN ANALYZER    $-------------------
&
&
& TO DISPLAY A SCREEN, ENTER THE FOLLOWING:
&
$ SCREEN NAME        &===>%SCREEN  $
$ SCREEN LOAD LIBRARY&===>%ASMLOD
&
&
&
& TO PRINT SCREEN DATA FOR ANALYSIS ENTER COPIES DESIRED BELOW:
&
&
$               PRINT&=>%*A$   COPIES OF SCRUFF.
&
$               PRINT&=>%*B$   COPIES OF I/O BUFFERS.
$
$               PRINT&=>%*C$   COPIES OF SCREEN. (SUBMITS A BATCH JOB.)
$
$               DEST &=>%D       $(TO OVERRIDE DEFAULT FOR SCRUFF AND I/
<ACTION>
1 SCREEN CHAR(8) CURSOR INIT($PARM1) GENHELP(TSAN05)
         LIST(' ',*)
         RETURN(?);
2 ASMLOD CHAR(46) NOCURSOR INIT($PARM2)
         LIST(' ',*)
         RETURN( ? );
3 *A     CHAR(3) NOCURSOR INIT(' ')
         LIST(' ',*)
         RETURN('^');
4 *B     CHAR(3) NOCURSOR INIT(' ')
         LIST(' ',*)
         RETURN('^');
5 *C     CHAR(3) NOCURSOR INIT(' ')
         LIST(' ',*)
         RETURN('^');
6 D      CHAR(5) NOCURSOR INIT($PARM6) KEY(FU2DEST)
         LIST(' ',*)
         RETURN('^');
<END>
./ ADD NAME=SAN05    0102-81078-83251-1730-00027-00027-00000-KK00150
%-----------------------    FULLSCREEN UTILITIES    --------------------
%SELECT OPTION ===>_OPT     +
%
%        1+- FULLSCREEN GENERATOR
%        2+- FULLSCREEN ANALYZER
%
%
%
%
%
%
%
)INIT
   .HELP = TSAN05
)PROC
   &SEL = TRANS( TRUNC (&OPT,'.')
                1,'PGM(ISRFOR) PARM(FULLUT1)'
                2,'PGM(ISRFOR) PARM(FULLUT2)'
                3,'PGM(ISRFOR) PARM(FULLUT3)'
                4,'PGM(ISRFOR) PARM(FULLUT4)'
                5,'PGM(ISRFOR) PARM(FULLUT5)'
                6,'PGM(ISRFOR) PARM(FULLUT6)'
                7,'PGM(ISRFOR) PARM(FULLUT7)'
                8,'PGM(ISRFOR) PARM(FULLUT8)'
                *,'?'
                )
)END
./ ADD NAME=SPFBATU  0112-83063-83272-1726-00034-00030-00000-KK00150
)ATTR
_ TYPE(INPUT) INTENS(LOW) CAPS(ON)
@ TYPE(TEXT)
# TYPE(OUTPUT) INTENS(HIGH)
)BODY
%-----------------   SYSTEM PROGRAMMER UTILITIES FOR MODULE INFO  ------
%SELECT OPTION ===>_OPT     +
%  #EMSG
% B+- AMBLIST UTILITY XREF LISTING
% Z+- AMASPZAP UTILITY (TERMINAL INPUT)
% I+- IDRLIST XREF LISTING
% D+- ZAP DUMP (ENTER LMOD,CSECT)
% U+- UCLA INTERACTIVE ZAP UTILITY
%
%SPF LIBRARY:
%   PROJECT@===>_PRJ0    %
%   LIBRARY@===>_LIB0    @
%   TYPE   @===>_TYP0    %
%   MEMBER @===>_MEMBER  %          CSECT @===>_CSECT   %(FOR D)
%
%OTHER PARTITIONED OR SEQUENTIAL DATASET:
%   DATASET NAME @===>_DSN
%   VOLUME SERIAL@===>_VOL   %  (IF NOT CATALOGED)
)INIT
)PROC
 VER (&OPT,NONBLANK)
 VER (&OPT,LIST,Z,I,B,D,U)
 VER (&DSN,DSNAME)
 VER (&PRJ0,DSNAME)
 VER (&LIB0,DSNAME)
 VER (&TYP0,DSNAME)
 VER (&MEMBER,NAME)
 VER (&CSECT,NAME)
)END
./ ADD NAME=SPFCATH1 0101-83257-83314-1810-00032-00032-00000-KK00150
<FIELDS>^%!&$#@
&TUTORIAL ------------- TECHNICAL SERVICES CATALOG UTILITY ------------
&NEXT SELECTION ===>%SELECT                             &(OR PRESS PF1 F
$
$      THIS IS A SPECIAL CATALOG MAINTENENCE FACILITY FOR WDPSC. SELECT
$  THE FUNCTION DESIRED BY PLACING THE OPTION NEXT TO THE CATALOG YOU
$  WISH TO USE AND ENTERING THE INFORMATION NEEDED. MORE THAN ONE CATALO
$  MAY BE SPECIFIED. A 'Y' IN THE LISTCAT PARM FOR OPTIONAL CATALOGS WIL
$  CAUSE A PROMPT FOR A CATALOG PASSWORD. ("Y,PASSWORD" IS ALSO ACCEPTAB
$
$      C = CATALOG A DATASET - ENTER DATASET NAME AND VOLUME (UNLESS AVA
$          VIA NORMAL CATALOG SEARCH). ENTER DEVICE TYPE IF VOLUME NOT M
$      U = UNCATALOG A DATASET - ENTER THE DATASET NAME.
$      R = RECATALOG A DATASET (UNCATALOG THEN CATALOG) -
$          ENTER DATASET NAME AND VOLUME.
$      D = DELETE A DATASET - ENTER DATASET NAME.
$     LL = LIST CATALOG ENTRIES BY LEVEL - ENTER INDEX LEVEL DESIRED.
$     RN = RENAME A DATASET - ENTER DATASET NAME AND NEW DATASET NAME.
$      L = LIST CATALOG ENTRY - ENTER DATASET DESIRED.
$      A = DEFINE AN ALIAS - ENTER REAL DATASET NAME AND ALIAS NAME.
$      G = DEFINE A GENERATION DATA GROUP - ENTER GDG BASE NAME AND
$          NUMBER OF GENERATIONS (IN VOL FIELD). DEFAULTS ARE SCRATCH
$          AND NOEMPTY HOWEVER OPTIONS FIELD CAN OVERRIDE.
$      F = OBTAIN VOLUME INFO FROM THIS CATALOG.
$     MF = OBTAIN VOLUME INFO FROM THIS CATALOG, THEN UNCATALOG IT.
<ACTION>
1 SELECT CHAR(36) CURSOR;
2 SELECT CHAR(8) LIST(' ') RETURN (' ');
3 * CHAR(8) INIT('TSANA   ');
4 * CHAR(8) INIT('        ');
5 * CHAR(8) INIT('SPFCATH2');
<END>
./ ADD NAME=SPFCATH2 0100-83257-83257-1624-00032-00032-00000-KK00150
<FIELDS>^%!&$#@
&TUTORIAL ------------- TECHNICAL SERVICES CATALOG UTILITY ------------
&NEXT SELECTION ===>%SELECT                             &(OR PRESS PF1 F
$
$      THE CATALOG UTILITY CAN COPY OR MOVE MULTIPLE DATASETS FROM ONE
$  CATALOG TO ANOTHER. THE FOLLOWING ARE THE OPTIONS WHICH MUST BE USED
$  TO DO THIS. NOTE THAT YOU MUST SPECIFY CL AND ONE OTHER OPTION TO
$  SPECIFY THE FROM CATALOG. WHILE OTHER OPTIONS MAY BE SPECIFIED, DO NO
$  SPECIFY INVALID COMBINATIONS OR RESULTS ARE UNPREDICTABLE (IE MF WITH
$
$      CL = CATALOG A LIST OF DATASETS. THE LIST MUST BE CREATED BY THE
$           USE OF THE FL,FLL,ML OR MLL OPTIONS ALONG WITH THE CL OPTION
$      FL = CREATE A LIST OF DATASETS WITH VOLUME INFORMATION FROM THIS
$           CATALOG FOR USE BY THE CL OPTION. USE THIS OPTION IF YOUR
$           DATASET NAME CONTAINS AN * LEVEL.
$      ML = CREATE A LIST OF DATASETS WITH VOLUME INFORMATION FROM THIS
$           CATALOG FOR USE BY THE CL OPTION. USE THIS OPTION IF YOUR
$           DATASET NAME CONTAINS AN * LEVEL. ENTRIES WILL BE UNCATALOGE
$      FLL= CREATE A LIST OF DATASETS WITH VOLUME INFORMATION FROM THIS
$           CATALOG FOR USE BY THE CL OPTION. USE THIS OPTION IF YOUR
            DATASET NAME IS A HIGH LEVEL QUALIFIER.
$      MLL= CREATE A LIST OF DATASETS WITH VOLUME INFORMATION FROM THIS
$           CATALOG FOR USE BY THE CL OPTION. USE THIS OPTION IF YOUR
$           DATASET NAME IS A HIGH LEVEL QUALIFIER. ENTRIES WILL BE
$           UNCATALOGED!
<ACTION>
1 SELECT CHAR(36) CURSOR;
2 SELECT CHAR(8) LIST(' ') RETURN (' ');
3 * CHAR(8) INIT('TSANA   ');
4 * CHAR(8) INIT('        ');
5 * CHAR(8) INIT('        ');
<END>
./ ADD NAME=SPFCATNV 0100-84055-84055-1814-00078-00078-00000-KK00150
)ATTR
_ TYPE(INPUT) INTENS(LOW) CAPS(ON)
^ TYPE(INPUT) INTENS(&PATTR) CAPS(ON)
@ TYPE(OUTPUT) INTENS(LOW) CAPS(ON)
$ TYPE(TEXT) INTENS(LOW)
% TYPE(TEXT) INTENS(HIGH)
)BODY
%---------------------   WDPSC NONVSAM CATALOG UTILITY   ---------------
$COMMAND ===>_ZCMD                                       $VIEW?>_LF
$%&EMSG
%   DSNAME %===>_DSN                                                $
$   VOLSER  ===>_VOL     $        DEVT  ===>_DEVT    $ (OPTIONAL)
$
$C = CATALOG DATASET, U = UNCATALOG DATASET, L = LISTCAT ENTRY, LL = LIS
$        (PRESS HELP KEY FOR MORE INFORMATION ON AVAILABLE OPTIONS.)
$   PLACE OPTION DESIRED (C,D,L,U,LL,A,R,RN,G) BY CATALOG(S) YOU WISH:
$
$ OPTION FOR CATALOG:                          LISTCAT PARMS:
$ ===>_CO1  @CN1                   @CD1           $===>^CP1
$ ===>_CO2  @CN2                   @CD2           $===>^CP2
$ ===>_CO3  @CN3                   @CD3           $===>^CP3
$ ===>_CO4  @CN4                   @CD4           $===>^CP4
$ ===>_CO5  @CN5                   @CD5           $===>^CP5
$ ===>_CO6  @CN6                   @CD6           $===>^CP6
$ ===>_CO7  _CN7                   @CD7           $===>^CP7
$ ===>_CO8  _CN8                   @CD8           $===>^CP8
$
$ IF DEFINE ALIAS OR RENAME, PUT THE ALIAS OR NEW NAME HERE:
$          %===>_ALIAS                                              $
)INIT
 &CO1 = TRANS (&CO1 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO2 = TRANS (&CO2 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO3 = TRANS (&CO3 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO4 = TRANS (&CO4 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO5 = TRANS (&CO5 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO6 = TRANS (&CO6 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO7 = TRANS (&CO7 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO8 = TRANS (&CO8 8,FL 9,FLL 10,ML 12,MLL 14,CL 15,ULL *,*)
 &CO1 = TRANS (&CO1 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO2 = TRANS (&CO2 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO3 = TRANS (&CO3 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO4 = TRANS (&CO4 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO5 = TRANS (&CO5 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO6 = TRANS (&CO6 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO7 = TRANS (&CO7 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 &CO8 = TRANS (&CO8 2,L 3,LL 4,U 5,A 6,D 7,C 11,R 13,RN 17,G 19,F 23,MF
 .HELP = SPFCATH1
 IF (&PATTR = '')
    &PATTR = 'LOW'
)PROC
 VER (&DSN,NONBLANK)
 VER (&CO1,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 &COT = '&CO1&CO2&CO3&CO4&CO5&CO6&CO7&CO8'
 VER (&COT,NONBLANK,MSG=SPFNV001)
 VER (&CO2,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO3,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO4,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO5,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO6,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO7,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 VER (&CO8,LIST,L,LL,U,A,D,C,R,RN,G,F,MF,CL,FL,FLL,ML,MLL,ULL)
 &CO1 = TRANS (&CO1 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO2 = TRANS (&CO2 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO3 = TRANS (&CO3 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO4 = TRANS (&CO4 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO5 = TRANS (&CO5 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO6 = TRANS (&CO6 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO7 = TRANS (&CO7 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO8 = TRANS (&CO8 FL,8 FLL,9 ML,10 MLL,12 CL,14 ULL,15 *,*)
 &CO1 = TRANS (&CO1 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO2 = TRANS (&CO2 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO3 = TRANS (&CO3 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO4 = TRANS (&CO4 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO5 = TRANS (&CO5 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO6 = TRANS (&CO6 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO7 = TRANS (&CO7 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
 &CO8 = TRANS (&CO8 L,2 LL,3 U,4 A,5 D,6 C,7 R,11 RN,13 G,17 F,19 MF,23
)END
