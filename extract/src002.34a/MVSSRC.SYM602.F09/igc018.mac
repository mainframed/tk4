IGC018   CSECT
         TITLE 'IGC018 - FIND/BLDL AND TTR CONVERT ROUTINES'
***********************************************************************
*                                                                     *
* MODULE NAME = IGC018                                                *
*                                                                     *
* DESCRIPTIVE NAME = BLDL/FIND                                        *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE VS 2/2 - LEVEL 001                                 *
*                                                                     *
* FUNCTION- THIS RESIDENT MODULE SEARCHES A DIRECTORY OF A PO         *
*           DATA SET FOR A NAME OR LIST OF NAMES, AND RETURNS         *
*           INFORMATION STORED IN THE DIRECTORY ASSOCIATED WITH EACH  *
*           NAME. THE FORMAT OF THE DIRECTORY AND OF THE RETURNED     *
*           INFORMATION IS DESCRIBED BY THE MAPPING MACRO IHAPDS.     *
*                                                                     *
*           IT WILL ALSO SEARCH A CONCATENATED SERIES OF DIRECTORIES  *
*           UNDER ANY OF THE FOLLOWING CONDITIONS:                    *
*           1. THE USER HAS SUPPLIED A DCB OPENED FOR CONCATENATED    *
*              BPAM INPUT.                                            *
*           2. THE USER HAS NOT SUPPLIED A DCB.  IN THIS CASE         *
*              EITHER JOBLIB OR STEPLIB, (THEMSELVES PERHAPS          *
*              CONCATENATED) FOLLOWED BY LINKLIB WILL BE SEARCHED.    *
*           3. THE USER HAS SUPPLIED A DCB FOR SVCLIB, AND AN SVC     *
*              RESIDENT BLDL TABLE IS AVAILABLE; OR BLDL IS SEARCHING *
*              LINKLIB AND A LINKLIB RESIDENT BLDL TABLE IS AVAILABLE.*
*              IN THESE CASE THE RESIDENT TABLE WILL BE 'CONCATENATED'*
*              AHEAD OF THE DIRECTORY TO BE SEARCHED.                 *
*                                                                     *
*           THIS MODULE ALSO CONTAINS ENTRY POINTS TO ROUTINES WHICH  *
*           CONVERT AN ABSOLUTE DIRECT ACCESS ADDRESS, MBBCCHHR, TO   *
*           AND FROM ITS RELATIVE EQUIVALENT, TTR.                    *
*                                                                     *
* NOTES = NONE                                                        *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE REGISTER EQUATES                      *
*                                                                     *
* PATCH LABEL = NONE                                                 *
*                                                                     *
* MODULE TYPE = SVC ROUTINE                                           *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    ATTRIBUTES = REFRESHABLE, ENTERED ENABLED, KEY ZERO,             *
*                 LOCAL LOCK HELD.                                    *
*                                                                     *
* ENTRY POINTS- IGC018                                                *
*                                                                     *
*    PURPOSE- ENTERED FROM SVC SUPERVISOR AFTER MAINLINE CODE ISSUES  *
*             SVC 18.                                                 *
*                                                                     *
*    LINKAGE- A CALLING SEQUENCE IS GENERATED BY ONE OF THE           *
*             FOLLOWING MACROS:                                       *
*
*                    FIND  DCBADDR,NAMEADDR        FIND MACRO
*
*                    LA    0,NAMEADDR
*                    LA    1,DCBADDR
*                    LCR   1,1
*                    SVC   18
*
*                    BLDL  DCBADDR,LISTADDR        BLDL MACRO
*
*                    LA    0,LISTADDR
*                    LA    1,DCBADDR
*                    SVC   18
*                                                                     *
*    INPUT- IN ADDITION TO THE INPUTS SHOWN ABOVE THE SVC SUPERVISOR  *
*           SETS UP THE FOLLOWING REGISTERS:                          *
*           REGISTER 3 CVT POINTER                                    *
*           REGISTER 4 TCB POINTER                                    *
*           REGISTER 5 SVRB POINTER                                   *
*           REGISTER 14 RETURN ADDRESS                                *
*           REGISTER 15 ENTRY ADDRESS                                 *
*                                                                     *
*    OUTPUT- THE LIST FILLED IN WITH INFORMATION FROM THE DIRECTORY   *
*            BLOCK FROM BLDL.  FROM FIND THE TTR IS PASSED TO THE     *
*            POINT ROUTINE AND IT UPDATES THE DCB AND IOB.            *
*                                                                     *
*    EXIT NORMAL- BRANCH TO THE ADDRESS IN REGISTER 14 ON ENTRY       *
*                 REGISTER 15  CONTAINS A 0                           *
*                                                                     *
*    EXIT ERROR - SAME AS EXIT NORMAL EXCEPT REGISTER 15 AND 0        *
*                 CONTAIN THE FOLLOWING CONDITION CODES:              *
*                 * REGISTER 15 * REGISTER 0 *   ERROR CONDITION      *
*                 *    04       *    00      *  PARTIAL LIST          *
*                 *    08       *    00      *  PERMANENT I/O ERROR   *
*                 *    08       *    04      *  GETMAIN ERROR         *
*                 *    08       *    08      *  INVALID DEB  @ZA25435 *
*                                                                     *
* ENTRY POINT = EXITRTN                                               *
*                                                                     *
*    PURPOSE = ENTERED FROM RTM VIA A SYNCH IN KEY ZERO ENABLED       *
*              WHEN THERE IS AN ATTEMPT TO ABNORMALLY TERMINATE THE   *
*              RB LEVEL ON WHICH THIS SVC IS ACTIVE.  THIS ROUTINE    *
*              WILL FIND THE ADDRESS OF THE TRR BY ISSUING A LOAD.    *
*              IT WILL ALSO FILL IN SDWACSCT AND SDWAREXN.            *
*                                                                     *
*    LINKAGE = REGISTER 0 - CODE.  IF 12 NO RTCA IS PASSED            *
*              REGISTER 1 - ADDRESS OF THE RTCA.                      *
*              REGISTER 13 - ADDRESS OF A 18 FULLWORD SAVE AREA.      *
*              REGISTER 14 - RETURN ADDRESS                           *
*              REGISTER 15 - ADDRESS OF THE BOOTSTRAP ROUTINE.        *
*                                                                     *
*    INPUT = RTCA.                                                    *
*                                                                     *
*    OUTPUT = REGS AS PASSED FROM RTM EXCEPT 15 SET TO ADDR OF TRR.   *
*             SDWACSCT SET TO CSECT NAME.                             *
*             SDWAREXN SET TO TRR NAME.                               *
*                                                                     *
*    EXIT - NORMAL = BRANCH TO TRR.                                   *
*                                                                     *
*    EXIT - ERROR = A BRANCH ON REGISTER 14 BACK TO RTM IF NO RTCA    *
*                   PASSED.                                           *
*                                                                     *
* ENTRY POINT- IECPRLTV                                               *
*                                                                     *
*    PURPOSE- ENTRY TO ROUTINE VIA A BALR THAT CONVERTS AN ABSOLUTE   *
*             DIRECT ACCESS ADDRESS, MBBCCHHR, INTO ITS RELATIVE      *
*             EQUIVALENT, TTR0.                                       *
*                                                                     *
*    LINKAGE- REGISTER CONVENTIONS UPON ENTRY AND UPON EXIT ARE AS    *
*             FOLLOWS:                                                *
*                 REGISTER         ENTRY             EXIT             *
*                   0          IGNORED            TTR0 RESULT         *
*                   1          DEB ADDRESS        TRANSPARENT         *
*                   2          ADDRESS OF         TRANSPARENT         *
*                                MBBCCHHR IN CORE                     *
*                   3-8        IGNORED            TRANSPARENT         *
*                   9-13       IGNORED            DESTROYED           *
*                   14         RETURN ADDRESS     TRANSPARENT         *
*                   15         ENTRY ADDRESS      ZERO                *
*                                                                     *
*              NOTE: IECPRLTV DOES NOT VALIDITATE THE INPUT           *
*              MBBCCHHR.  IF M IS LARGER THAN THE NUMBER OF           *
*              EXTENTS IN THE DEB, CORE BEYOND THE DEB                *
*              EXTENT SECTION WILL BE REFERENCED AS IF IT             *
*              CONTAINED VALID EXTENTS.  IF CCHH AS SPECIFIED         *
*              IS NOT WITHIN THE EXTENT SPECIFIED BY M,               *
*              AN UNREASONABLE VALUE OF TT WILL RESULT.               *
*                                                                     *
*    INPUT- DEB, MBBCCHHR IN CORE                                     *
*                                                                     *
*    OUTPUT- TTR0 IN REGISTER 0                                       *
*                                                                     *
*    EXIT NORMAL- BRANCH TO THE ADDRESS ON REGISTER 14 ON INPUT       *
*                                                                     *
*    EXIT ERROR - N/A NO ERRORS CHECKED FOR (SEE NOTE ABOVE)          *
*                                                                     *
* ENTRY POINT- IECPCNVT                                               *
*                                                                     *
*    PURPOSE- ENTRY TO ROUTINE VIA A BALR THAT CONVERTS A RELATIVE    *
*             DIRECT ACCESS ADDRESS AND CONCATENATION NUMBER, TTRN,   *
*             INTO ITS ABSOLUTE EQUIVALENT, MBBCCHHR.                 *
*                                                                     *
*    LINKAGE- REGISTER CONVENTIONS UPON ENTRY AND UPON EXIT ARE AS    *
*             FOLLOWS:                                                *
*                                                                     *
*                 REGISTER         ENTRY             EXIT             *
*                   0          ACTUAL TTRN        DESTROYED           *
*                   1          DEB ADDRESS        TRANSPARENT         *
*                   2          ADDRESS OF 8 BYTE  TRANSPARENT         *
*                                AREA FOR MBBCCHHR                    *
*                   3-8        IGNORED            TRANSPARENT         *
*                   9-13       IGNORED            DESTROYED           *
*                   14         RETURN ADDRESS     TRANSPARENT         *
*                   15         ENTRY ADDRESS      ERROR CODE          *
*                                                                     *
*                   THE ERROR CODE FOR IECPCNVT WILL BE 0 FOR         *
*                   SUCCESSFUL CONVERSION, OR 4 IF VALUE OF TT        *
*                   EXCEEDS TOTAL EXTENTS ASSIGNED.                   *
*                                                                     *
*    INPUT- TTRN IN REGISTER 0                                        *
*                                                                     *
*    OUTPUT- MBBCCHHR IN CORE LOCATION  POINTED TO BY REGISTER 2      *
*                                                                     *
*    EXIT NORMAL- BRANCH TO THE ADDRESS IN REGISTER 14 ON ENTRY       *
*                 REGISTER 15 = 0                                     *
*                                                                     *
*    EXIT ERROR - BRANCH TO THE ADDRESS IN REGISTER 14 ON ENTRY       *
*                 REGISTER 15 = 4 IF TT EXCEEDS TOTAL EXTENTS         *
*                                                                     *
* EXTERNAL REFERENCES                                                 *
*                                                                     *
*    ROUTINES - POINT ROUTINE POINTED TO BY DCBPOINT IF A FIND        *
*               IEAVVMSR LPA SEARCH ROUTINE USED IN EXITRTN.          *
*                                                                     *
*    DATA SETS - NONE                                                 *
*                                                                     *
*    DATA AREAS - DSCB, CTV, IOB,DCB,SVRB,TCB,DVCT,DEB,ECB            *
*                 BOOTSTRAP ROUTINE - RTCA,CVT                        *
*                                                                     *
*    TABLES - NONE                                                    *
*                                                                     *
*    MACROS - ESTAE, MODESET, IGGSTAE, SYNCH, EXCP, WAIT,             *
*             GETMAIN, FREEMAIN.                                      *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*              RELEASE 19                                             *
*D                                                               A28189
*D                                                               A27543
*D                                                               A25998
*D                                                               M3387
*D                                                               M3385
*D                                                               M4214
*D                                                               M4612
*D                                                               M1596
*                                                                     *
*              RELEASE 20                                             *
*D                                                               TS2466
*D                                                               M1381
*                                                                     *
*              RELEASE 21                                             *
*                                                                     *
*              VS 1/1                                                 *
*                                                                XM5845
*                                                                     *
*              VS 1/2                                                 *
*                                                                     *
*              VS 1/3                                                 *
*                                                                     *
*              VS 2/1                                                 *
*                                                                     *
*              VS 2/2                                                 *
*D54200-54800,59000-59800,67800-69600,71200-72000,182800,183600  Y02072
*                                                               YM01226
*                                                               YM01287
*                                                                YM4640
*A148400-148450,148550,188300                                  @ZA12201
*C054030-054036                                                @ZA12201
*C168800                                                       @ZA11127
*D169000                                                       @ZA11127
*A039515-039555,057644-057652,058660-058720,142710-142730      @ZA12953
*C054030                                                       @ZA12953
*A057646-057647                                                @ZA17048
*C054030                                                       @ZA17048
*A041830-046600,057649-057729,066300-066450,142710-142744      @ZA25435
*C054030,070705                                                @ZA25435
*C089400,160720-167300,167700-171200                           @ZA26444
*A160620-160720,347900                                         @ZA26444
*A169530-169560                                                @ZA27485
*C054030                                                       @ZA30955
*D057649-057729,142710-142744                                  @ZA30955
*A057647-057709,142710-142748                                  @ZA30955
*A103800-103900                                                @ZA31343
         EJECT
***********************************************************************
*              EQUATE STATEMENTS                                      *
***********************************************************************
ADDR3    EQU   B'0111'            MASK FOR ICM/STCM FOR 3 BYTE ADDRESS
CCHN     EQU   X'40'              COMMAND CHAIN IN CCW FLAGS
HALVE    EQU   1                  SHIFT AMOUNT TO DIVIDE BY 2
LOBYTE   EQU   X'FF'              MASK FOR LOW ORDER REGISTER BYTE
PSWPROB  EQU   X'01'              PROBLEM STATE FLAG--PSW+1
TIMES16  EQU   4                  SHIFT AMOUNT TO MULT BY 16
PRIVKEY  EQU   7                  KEYS 7 & LOWER ARE SYSTEM KEYS Y02072
KEYOFFST EQU   4                  VALUE TO SHIFT KEY IN BYTE     Y02072
KEYMASK  EQU   X'F0'              POSITION OF KEY IN BYTE       YM01226
DEBPK    EQU   24                 DEB PROTECT KEY DISPLACEMENT @ZA12953
JLBDCB   EQU   40                 TCB JOBLIB DISPLACEMENT      @ZA12953
DCBDB    EQU   44                 DCB DEB DISPLACEMENT         @ZA12953
         SPACE
*                                 ***CCW OP CODES***
TIC      EQU   X'08'              TRANSFER IN CHANNEL
SKHEQ    EQU   X'69'              SEARCH KEY EQUAL OR HIGH
MRC      EQU   X'92'              MULTI-TRACK READ COUNT
SIDEQ    EQU   X'31'              SEARCH ID EQUAL
RD       EQU   X'06'              READ DATA
         SPACE
*                                 ***USER RETURN CODES***
CNVTERR  EQU   4                  INVALID TT ON TTR TO CCHHR CONVERT
RCBADLST EQU   4                  LIST COULD NOT BE FILLED
RCIOERR  EQU   8                  I/O ERROR ON DIRECTORY READ
RCGETERR EQU   4                  GETMAIN ERROR - IN REGISTER 0  Y02072
RCDEBERR EQU   8                  INVALID DEB - IN REGISTER 0  @ZA25435
*                                 IF ON REGISTER 15 MUST BE 8    Y02072
         EJECT
***********************************************************************
*              REGISTER USAGE                                         *
***********************************************************************
R0       EQU   0                  AT ENTRY, PARM LIST
RCSID    EQU   R0                 DURING CCW RELOCATE--SID CCW
RSCUR    EQU   R0                 RES TAB SRCH--CURRENT TABLE ENTRY NR
R1       EQU   1                  AT ENTRY, DCB (COMPLEMENTED IF FIND)
RSMOVE   EQU   R1                 RES TAB SRCH--LENGTH FOR MOVE INSTR
RCTIC1   EQU   2                  DURING CCW RELOCATE--FIRST TIC
RCTIC2   EQU   2                  DURING CCW RELOCATE--SECOND TIC
RSULEFT  EQU   2                  NUMBER OF USER ENTRIES LEFT
R2       EQU   2                  USED FOR INPUT TO MODESET      Y02072
RCVT     EQU   3                  COMMUNICATIONS VECTOR TABLE
RX       EQU   4                  WORK REGISTER
RCMRC    EQU   4                  DURING CCW RELOCATE--READ COUNT (M/T)
RCRD     EQU   4                  DURING CCW RELOCATE--READ DATA
RSTUB    EQU   4                  RES TAB SRCH--UPPER BOUNDARY NR
RY       EQU   5                  WORK REGISTER
RSTLB    EQU   5                  RES TAB SRCH--LOWER BOUNDARY NR
R5       EQU   5                  UPPER LIM FOR STM FOR CCW REL  Y02072
RRB      EQU   6                  SVRB ADDRESS                   Y02072
RPDS2    EQU   7                  ENTRY IN USER BLDL LIST
RPDS1    EQU   8                  ENTRY IN DATA SET DIRECTORY
RRENT    EQU   8                  ENTRY IN RES BLDL TABLE
R8       EQU   8                  WORK REG                     @ZA25435
RDEB     EQU   9                  POINTER TO DEB
RRES     EQU   9                  BEGINNING OF RES BLDL TABLE
R9       EQU   9                  LOWER LIMIT FOR STM IN SRC PDS Y02072
RLIST    EQU   10                 BLDL OR FIND PARAMETER LIST
RDCB     EQU   11                 LINKLIB,TASKLIB,SVCLIB, OR USER DCB
*                                 (TASKLIB INCLUDES JOBLIB OR STEPLIB)
RBASE    EQU   12                 PROGRAM BASE
RAREA    EQU   13                 BLDL/FIND WORK AREA
RRET     EQU   14                 RETURN REGISTER FROM MAJOR FUNCTIONS
RZ       EQU   14                 WORK REGISTER
RSUBR    EQU   14                 SUBROUTINE RETURN REGISTER
R15      EQU   15                 AT EXIT, RETURN CODE
RSTLEFT  EQU   R15                RES TAB SRCH--NR OF TABLE ENTS LEFT
         SPACE 3
*              REGISTERS FOR TTR CONVERT ROUTINES
*              NOTE: REGISTERS FOR THE SECTOR CONVERT ROUTINE
*                    ARE LISTED WITH THAT ROUTINE
RGTTR    EQU   0                  TTR. (INPUT--CNVT, OUTPUT--RLTV)
RGDEB    EQU   1                  POINTER TO USER DEB
RGMBB    EQU   2                  POINTER TO MBBCCHHR (FILLED BY CNVT)
RGV      EQU   9                  WORK REGISTER
RGW      EQU   10                 WORK REGISTER
RGX      EQU   11                 WORK REGISTER
RGY      EQU   12                 WORK REGISTER
RGZ      EQU   13                 WORK REGISTER
         EJECT
IGC018   CSECT
         ENTRY SVC018
SVC018   EQU *
***********************************************************************
*        SVC ENTRY POINT TO BLDL OR FIND                              *
*                                                                     *
*        THE FUNCTIONS ARE DISTINGUISHED BY R1 COMPLEMENTED FOR FIND  *
***********************************************************************
         SPACE 2
         BALR  RBASE,0            ESTABLISH BASE FOR CODE
         USING BASE1,RBASE
BASE1    EQU   *
         B     BEGIN                   BRANCH AROUND MODULE ID   YM4640
         DC    C'IGC018  '             MODULE NAME               YM4640
         DC    C'@ZA30955'             LAST SHIP CODE          @ZA30955
         DC    C'&SYSDATE'             LAST SHIP DATE          @ZA12201
BEGIN    DS    0H                      END OF MODULE ID          YM4640
         LR    RRB,R5             SVRB ADDRESS FROM SVC SLIH     Y02072
         USING RBBASIC,RRB                                       Y02072
         USING CVT,RCVT           CVT POINTER FROM SVC SLIH      Y02072
         XC    RBEXSAVE,RBEXSAVE  CLEAR EXTENDED SAVE AREA       Y02072
         ST    RRET,EXSRET        SAVE RETURN ADDRESS            Y02072
         MVC   EXSESTAE(EXSELEN),ESTAEL MOVE IN ESTAE LIST       Y02072
*
*        THE EXTAE MACRO WILL PASS THE BOOTSTRAP ROUTINE ADDRESS
*        TO RTM.
*
         ESTAE PARAM=(RRB),MF=(E,EXSESTAE)                       Y02072
         LM    R0,R1,RBGRS0       RESTORE INPUT REGISTERS        Y02072
         LTR   R1,R1              INPUT REG NEGATIVE(FIND)       Y02072
         BM    MODE1              YES                            Y02072
         OI    EXSFLG,EXSBLDL     TURN ON BLDL FLAG              Y02072
MODE1    EQU   *                                                 Y02072
         L     R2,RBLINK          ADDRESS OF CALLER RB           Y02072
         IC    R2,RBOPSW-RBBASIC+1(R2) GET CALLER KEY            Y02072
         STC   R2,EXSKEY          SAVE CALLER KEY                Y02072
         MODESET KEYADDR=EXSKEY,WORKREG=10   CALLER KEY          Y02072
         LR    RLIST,R0           SAVE LIST ADDRESS              A25998
         LTR   RDCB,R1            SAVE DCB ADDR, TST FOR 'FIND'  A25998
         BM    GETCORE            BR IF 'FIND' TO GET WK AREA    Y02072
***********************************************************************
*        FOR BLDL ONLY, TEST THE VALIDITY OF                          *
*        THE USER-GENERATED 'BLDL' LIST                               *
***********************************************************************
*                                                                A25998
TSTBLDL  EQU   *
         USING BLDLIST,RLIST
         LA    R15,RCBADLST       LOAD 'BADLIST' ERROR CODE      A25998
         SR    RZ,RZ              INITLZ FOR ENTRIES TEST        A25998
         CH    RZ,BLDENTS         TEST FOR ZERO OR NEG ENTRIES,  A25998
         BNL   GETOUT             BR IF YES TO RETURN- ERROR     A25998
         LA    RZ,PDS2LIBF-PDS2   MINIMUM ENTRY LENGTH            M3385
         CH    RZ,BLDELEN         SEE IF ENTRY TOO SHORT         A25998
         BH    GETOUT             BR IF YES TO RETURN-ERROR       M5729
         DROP RLIST
         C     RDCB,CVTLINK       EXPLICIT REQUEST FOR LINKLIB?  Y02072
         BE    GETSUP             YES - MUST GET KEY ZERO CORE   Y02072
         C     RDCB,CVTSVDCB      EXPLICIT REQUEST FOR SVC LIB?  Y02072
         BE    GETSUP             YES - MUST GET KEY ZERO CORE   Y02072
         LTR   RDCB,RDCB          TEST DCB POINTER               Y02072
         BNZ   GETCORE            NOT ZERO GETMAIN IN CALLER KEY Y02072
         L     RDCB,JLBDCB(RX)    GET TASKLIB DCB FROM CUR TCB @ZA12953
         LTR   RDCB,RDCB          TEST FOR DCB ADDRESS         @ZA17048
         BZ    GETSUP             NONE-DO NOT CHECK KEY        @ZA17048
         TM    CVTOPTA,CVTNIP     TEST FOR NIP IN CONTROL      @ZA30955
         BO    GETSUP             YES BYPASS DEBCHK            @ZA30955
         USING IHADCB,RDCB                                     @ZA30955
         L     RDEB,DCBDEBAD      GET DEB ADDRESS              @ZA30955
         USING DEBBASIC,RDEB                                   @ZA30955
         L     R9,0(RDEB)         LOAD THE TCB ADDR FROM DEB   @ZA30955
         LA    R9,0(R9)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   R9,R9              IS THEIR A TCB ?             @ZA30955
         BZ    ERROR              NO THEN ERROR                @ZA30955
FINDTCB  EQU   *                                               @ZA30955
         USING TCB,RX                                          @ZA30955
         LR    R5,RX              SAVE THIS TCB ADDR           @ZA30955
FINDTCBA EQU   *                                               @ZA30955
         L     RX,TCBTCB          ADDR OF NEXT TCB ON QUEUE    @ZA30955
         LA    RX,0(RX)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   RX,RX              HIGHEST TCB ?                @ZA30955
         USING TCB,RX                                          @ZA30955
         BZ    BACKTCB            CHECK BACK TCB CHAIN         @ZA30955
         CR    R9,RX              COMPARE CURRENT TCB WITH     @ZA30955
*                                 TCBS ON TCB QUEUE            @ZA30955
         BE    DEBCHKBR           BRANCH TO CHECK DEB          @ZA30955
         B     FINDTCBA           CONTINUE CHECKING TCBS       @ZA30955
BACKTCB  EQU   *                                               @ZA30955
         LR    RX,R5              RESTORE SAVED TCB            @ZA30955
         CR    R9,RX              TCBS THE SAME                @ZA30955
         BE    DEBCHKBR           THEN GO TO DEBCHK            @ZA30955
BACKTCBA EQU   *                                               @ZA30955
         L     RX,TCBBACK         ADDR OF BACK CHAIN TCB'S     @ZA30955
         LA    RX,0(RX)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   RX,RX              TEST FOR ZERO                @ZA30955
         USING TCB,RX                                          @ZA30955
         BZ    ERROR              TCB NOT FOUND THEN ERROR     @ZA30955
         CR    R9,RX              SAME TCB STOP CHECKING?      @ZA30955
         BE    DEBCHKBR           TCB VALID -CHECK DEB         @ZA30955
         B     BACKTCBA           CONTINUE CHECKING TCB'S      @ZA30955
ERROR    LA    R15,RCIOERR        SET R15 = 8 DEB NOT GOOD     @ZA25435
         LA    R0,RCDEBERR        SET R0 = 8 DEB NOT GOOD      @ZA25435
         B     GETOUT             CLEANUP AND LEAVE            @ZA25435
*                                                              @ZA30955
*  FOR THE BRANCH ENTRY TO DEBCHK THE REGISTERS ARE            @ZA30955
*   REG 1  - DEB  ADDR                                         @ZA30955
*   REG 10 - TCB  ADDR                                         @ZA30955
*                                                              @ZA30955
*  UPON RETURN FROM DEBCHK THE REGISTERS WILL HAVE             @ZA30955
*   REG 1 - VERIFIED DEB ADDR                                  @ZA30955
*   REG 10 - DEB TABLE POINTER                                 @ZA30955
*   REG 11 - DEB TABLE OFFSET                                  @ZA30955
*   REG 14 - RETURN ADDRESS                                    @ZA30955
*   REG 0-9 AND 12-14 REMAIN UNCHANGED                         @ZA30955
*                                                              @ZA30955
DEBCHKBR EQU   *                                               @ZA30955
         LR    R2,RLIST           SAVE USER LIST ADDR          @ZA30955
         LR    R5,RDCB            SAVE THE DCB ADDR            @ZA30955
         L     R1,DCBDEBAD        GET DEB ADDRESS FOR DEBCHK   @ZA30955
         LR    RGW,RX             REG 10 - TCB ADDR            @ZA30955
         L     RCVT,CVTPTR        GET CVT ADDR                 @ZA30955
         USING CVT,RCVT                                        @ZA30955
         L     R15,CVTEXT2        GET ADDR OF CVT EXTENSION    @ZA30955
         USING CVTXTNT2,R15                                    @ZA30955
         L     R15,CVTDEBVR       GET BR ENTRY ADDR FOR DEBCHK @ZA30955
         BALR  RRET,R15           BRANCH TO DEBCHK             @ZA30955
         NOP   0                  NOP FOR RETURN FROM DEBCHK   @ZA30955
         LTR   R15,R15            CHECK DEBCHK RET CODE        @ZA30955
         BNZ   ERROR              BAD DEB                      @ZA30955
         LR    RDCB,R5            RESTORE DCB ADDR             @ZA30955
         LR    RLIST,R2           RESTORE LIST ADDR            @ZA30955
         LR    RDEB,R1            GET DEB ADDR RETURNED        @ZA30955
         USING DEBBASIC,RDEB                                   @ZA30955
         L     R15,DEBDCBAD       GET DCB ADDR FROM DEB        @ZA30955
         LA    R15,0(R15)         CLEAR HI ORDER BYTE          @ZA30955
         CR    RDCB,R15           DCB ADDR THE SAME ?          @ZA30955
         BNE   ERROR              NO THEN ERROR - BAD DEB      @ZA30955
         TM    DEBPK(R1),KEYMASK    USER'S PROTECT KEY 0       @ZA30955
         BNZ   GETCOREU           NO BRANCH TO GET CALLER KEY  @ZA30955
         SR    RDCB,RDCB          RESTORE ZERO DCB ADDR        @ZA30955
GETSUP   EQU   *
         MODESET EXTKEY=SUPR      USE SUPERVISOR KEY             Y02072
         OI    EXSFLG,EXSSYDCB    FLAG THAT SYSTEM DCB USED      Y02072
         B     GET253             GET S.P. 253 CORE             YM01226
         SPACE 2
***********************************************************************
*        OBTAIN AND INITIALIZE BLDL/FIND WORK AREA                    *
***********************************************************************
*
GETCOREU EQU   *                  GET CORE IN USERS KEY        @ZA12953
         SR    RDCB,RDCB          RESET ZERO DCB ADDR          @ZA12953
GETCORE  EQU   *                                                 A25998
         TM    EXSKEY,KEYMASK     CHECK CALLER KEY              YM01226
         BNZ   GET229             NOT ZERO - GET S.P. 229       YM01226
GET253   EQU   *                  GET S.P. 253                  YM01226
         GETMAIN RC,LV=WORKSZ,SP=253 GET WORKAREA KEY 0         YM01226
         B     TESTGET            CHECK RETURN CODE             YM01226
GET229   EQU   *                  GET S.P. 229                  YM01226
         GETMAIN RC,LV=WORKSZ,SP=229 GET WORKAREA IN CALLER KEY  Y02072
TESTGET  EQU   *                  CHECK RETURN CODE             YM01226
         LTR   R15,R15            CHECK RETURN CODE              Y02072
         BNZ   GETERR             GO TO ERROR ROUTINE            Y02072
         LR    RAREA,R1           ESTABLISH BASE FOR WORK AREA
         USING WORKAREA,RAREA
         MODESET EXTKEY=SUPR      GET IN SUPV KEY                Y02072
         ST    RAREA,EXSWKAD      SAVE CORE ADDR                 Y02072
         OI    EXSFLG,EXSGTM      FLAG THAT CORE OBTAINED        Y02072
         TM    EXSFLG,EXSSYDCB    SHOULD WE STAY IN KEY 0?       Y02072
         BO    COREGOT            YES                            Y02072
         MODESET KEYADDR=EXSKEY,WORKREG=1   CALLER KEY           Y02072
COREGOT  EQU   *
*
*        AT THIS POINT THE ROUTINE IS EITHER IN SUPERVISOR KEY AND
*        HAS ITS WORKAREA IN THAT KEY OR IT IS IN CALLER KEY AND ITS
*        WORKAREA IS IN CALLER KEY.
*
         XC    CLRSEG(WORKSZ-L'RDAREA),CLRSEG   CLEAR WORK AREA
*                                               EXCEPT READIN PORTION
         SPACE 2
         LTR   RDCB,RDCB          IF DCB PTR IS 0 OR POSITIVE
         BNL   BLDLSVC            THEN GO PROCESS AS BLDL
***********************************************************************
*        ROUTINE TO PROCESS FIND REQUEST                              *
*        THE FIRST STEP WILL BE TO DO BLDL ON NAME PROVIDED           *
***********************************************************************
*
         USING FINDLIST,RLIST
         LCR   RDCB,RDCB          MAKE DCB PTR POSITIVE
         MVC   FNDLST1,FINDHDR    INIT BLDL LIST FOR FIND
         MVC   FNDLST2,FINDNAME   MOVE NAME
         DROP  RLIST
         LA    RLIST,FNDLST1      POINT TO GENERATED BLDL LIST
         B     ALLENTRY           BRANCH TO EXECUTE 'BLDL'        M4214
FINDRET  LTR   R15,R15            BYPASS THE FOLLOWING STEP
         BP    CLEANUP            IF THERE IS AN ERROR ON BLDL
         TM    EXSFLG,EXSBLDL     IS BLDL BEING PROCESSED?       Y02072
         BO    CLEANUP            YES - SKIP SYNCH               Y02072
         SPACE 2
***********************************************************************
*        TTR WAS SUCCESSFULLY FOUND FOR SPECIFIED NAME                *
*        NOW USE POINT ROUTINE TO POSITION TO REQUESTED MEMBER        *
***********************************************************************
*
         USING IHADCB,RDCB
         MVC   DCBRELAD,FNDLST3   MOVE TTR TO RELAD
         LR    R0,RDCB            POINT TO RELAD
         LR    R1,RDCB            POINT TO DCB                   Y02072
         SR    RZ,RZ              CLEAR REG                      Y02072
         IC    RZ,EXSKEY          GET CALLER KEY                 Y02072
         SRL   RZ,KEYOFFST        MOVE KEY TO LOW ORDER BIT      Y02072
         LA    RX,PRIVKEY         HIGHEST PRIVLEGED KEY          Y02072
         CR    RZ,RX              COMPARE KEYS                   Y02072
         BH    SYNCH              CALLER NOT SYSTEM KEY-SYNCH    Y02072
BALR     EQU   *                                                 Y02072
         POINT (1),(0)            ISSUE POINT                    Y02072
         SR    R15,R15            SET NO ERROR
         B     CLEANUP                                           Y02072
*
*        SYNCHRTN GETS CONTROL IN USER KEY AND PROBLEM STATE
*        IT ISSUES A POINT AND THEN A BR 14 TO RETURN TO THE
*        SVC.  IT SAVES REG 14 ON ENTRY IN REG RX.
*
SYNCHRTN EQU   *                                                 Y02072
         LR    RX,RRET            SAVE RETURN ADDRESS            Y02072
         POINT (1),(0)            ISSUE POINT                    Y02072
         LR    RRET,RX            RESTORE RETURN ADDRESS         Y02072
         BR    RRET               RETURN TO SUPERVISOR           Y02072
SYNCH    EQU   *                                                 Y02072
         MODESET EXTKEY=SUPR      KEY 0                          Y02072
         OI    EXSFLG,EXSYNCH     TURN ON IN SYNCHED RTN FLAG    Y02072
         ST    RBASE,EXSBASE      SAVE BASE ACROSS SYNCH         Y02072
         SYNCH SYNCHRTN           SYNCH TO POINT ROUTINE         Y02072
         DROP
         L     RCVT,CVTPTR        ADDRESS OF CVT                 Y02072
         USING CVT,RCVT                                          Y02072
         L     RRB,CVTTCBP        ADDRESS OF TCB WORDS           Y02072
         USING TCBPTRS,RRB                                       Y02072
         L     RRB,TCBPTRC        ADDRESS OF TCB                 Y02072
         USING TCB,RRB                                           Y02072
         L     RRB,TCBRBP         ADDRESS OF SVRB                Y02072
         USING RBBASIC,RRB                                       Y02072
         NI    EXSFLG,X'FF'-EXSYNCH TURN OFF IN SYNCHED RTN FLAG Y02072
         L     RBASE,EXSBASE      RESTORE BASE REG               Y02072
         USING BASE1,RBASE                                       Y02072
         L     RAREA,EXSWKAD      RESTORE WORKAREA PTR           Y02072
         USING WORKAREA,RAREA                                    Y02027
         SR    R15,R15            SET NO ERROR                   Y02072
         SPACE 2
CLEANUP  EQU   *                                                 M4214
         SR    R0,R0              CLEAR REG 0                  @ZA25435
         SPACE 2                                               @ZA25435
CLEANUP1 EQU   *                                               @ZA25435
         LR    R8,R0              SAVE ERROR CODE              @ZA25435
***********************************************************************
*        THIS CODE IS ENTERED AT THE CONCLUSION OF EITHER BLDL OR FIND*
*        PROCESSING, AND PERFORMS VARIOUS CLEAN-UP FUNCTIONS          *
***********************************************************************
*
         LR    RZ,R15             SAVE ERROR CODE                M4214
*                                                                M3385
***      FREE THE BLDL/FIND WORK AREA
*
         MODESET EXTKEY=SUPR      CHANGE TO KEY ZERO             Y02072
         NI    EXSFLG,X'FF'-EXSGTM TURN OFF GETMAIN FLAG         Y02072
         TM    EXSFLG,EXSSYDCB    USING SYSTEM DCB?              Y02072
         BO    FREECORE           YES DIFFERENT KEY ON FREE     YM01226
         MODESET KEYADDR=EXSKEY,WORKREG=1 FREE USER KEY CORE     Y02072
         TM    EXSKEY,KEYMASK     CHECK CALLER KEY              YM01226
         BNZ   FREE229            NOT ZERO FREE S.P. 229        YM01226
FREECORE EQU   *                                                YM01226
         FREEMAIN R,LV=WORKSZ,SP=253,A=(RAREA) KEY ZERO CORE    YM01226
         B     RETURN             RETURN                        YM01226
FREE229  EQU   *                  FREE S.P. 229                 YM01226
         FREEMAIN R,LV=WORKSZ,SP=229,A=(RAREA) USER KEY CORE    YM01226
RETURN   EQU   *                                                 Y02072
         LR    R0,R8              RESTORE ERROR CODE           @ZA25435
         LR    R15,RZ             RESTORE ERROR CODE
GETOUT   EQU   *
         L     RRET,EXSRET        LOAD RETURN ADDRESS            Y02072
         MODESET EXTKEY=SUPR      RETURN TO SUPERVISOR KEY       Y02072
         BR    RRET               RETURN TO CALLER               Y02072
GETERR   EQU   *                  AN INVALID RETURN FROM GETMAIN Y02072
         LA    R15,RCIOERR        SET RETURN CODE 4 IN REG 15    Y02072
         LA    R0,RCGETERR        SET RETURN CODE 4 IN REG 0     Y02072
         B     GETOUT             RETURN TO CALLER               Y02072
         EJECT
BLDLSVC  EQU   *
***********************************************************************
*        ROUTINE TO PROCESS SVC ENTRY TO BLDL                         *
***********************************************************************
         USING BLDLIST,RLIST
         SPACE 2
***********************************************************************
*        THIS IS THE BEGINNING OF THE ACTUAL BLDL PROCESSING.         *
*        IT MAY BE ENTERED DUE TO BLDL SVC OR AS A SUBROUTINE OF FIND.*
*                                                                     *
*        BEGIN BY TESTING FOR SPECIAL DCB'S                           *
***********************************************************************
*
ALLENTRY LA    RAREA,WORKAREA     CLEAR HI-ORDER BYTE
*
         L     RX,CVTLINK         LOAD LINKLIB DCB LOC
         CR    RX,RDCB            TEST FOR EXPLICIT LINKLIB REQUEST
         BE    INLINK             IF LINKLIB,INDICATE SO
*
         L     RX,CVTSVDCB        LOAD SVCLIB DCB LOC
         CR    RX,RDCB            TEST FOR SVC LIB REQUEST
         BE    INLINK             IF SVCLIB, INDICATE SO
NOLNKSVC LTR   RDCB,RDCB          DID USER SUPPLY DCB ADDRESS
         BP    SETCCWS            YES, NOT LINKLIB/TASKLIB DEFAULT
*                                 NO, LOOK THROUGH SYS LIBS
***********************************************************************
*        IF A JOBLIB, STEPLIB OR TASKLIB EXISTS,                      *
*        IT WILL BE FOUND THROUGH THE CURRENT TCB.                    *
*        OTHERWISE THE SEARCH WILL BEGIN WITH LINKLIB.                *
***********************************************************************
*
         MVI   LIB,TASKLIB        START JOBLIB SEARCH          @ZA26444
         L     RZ,CVTTCBP         FIND TCB POINTERS
         USING TCBPTRS,RZ
         L     RZ,TCBPTRC         FIND CURRENT TCB
         USING TCB,RZ
         L     RDCB,TCBJLB        JOBLIB DCB ADDR
         DROP  RZ
         LTR   RDCB,RDCB          IF A JOBLIB DCB EXISTS,
         BP    SETCCWS            GO PROCESS THE LIBRARY
         L     RDCB,CVTLINK       OTHERWISE GET LINKLIB DCB ADDR
         USING IHADCB,RDCB
*
***            START SEARCH OF LINKLIB (OR SVCLIB)
*
INLINK   EQU   *
         MVI   LIB,LINKSVC        INDICATE SEARCHING LINK OR SVC LIB
         SPACE 2
SETCCWS  EQU   *
***********************************************************************
*        SAVE REGISTERS WHICH WILL BE USED IN                         *
*        RELOCATING CHANNEL PROGRAM                                   *
***********************************************************************
         TM    EXSFLG,EXSSYDCB    ARE WE IN KEY 0?               Y02072
         BO    CHANKYOK           YES DO STM                     Y02072
         MODESET EXTKEY=SUPR      NO - GET IN KEY 0              Y02072
CHANKYOK DS    0H                                                Y02072
*                                 ******************
         STM   R0,R5,EXSSAVE      * SAVE REGISTERS *             Y02072
         PUSH  USING              * AND USINGS     *
*                                 ******************
         TM    EXSFLG,EXSSYDCB    SHOULD WE BE IN KEY 0?         Y02072
         BO    CHAN0OK            YES                            Y02072
         MODESET KEYADDR=EXSKEY,WORKREG=1 NO GET IN CALLER KEY   Y02072
CHAN0OK  DS    0H                                                Y02072
*                                 THE FOLLOWING USING/DROP SEQUENCE
*                                 IS PRIMARILY TO HIGHLIGHT PUSH/POP
*                                 IN THE CROSS REFERENCE LISTING.
         USING DUMMY,R1,RSULEFT,RCVT,RX,RY,RZ,RPDS2,RPDS1,RDEB
         DROP  R1,RSULEFT,RCVT,RX,RY,RZ,RPDS2,RPDS1,RDEB
         DROP  RLIST,RDCB
         SPACE 2
***********************************************************************
*        CONSTRUCT CHANNEL PROGRAM, ECB, AND IOB FOR READING          *
*        DIRECTORY BLOCKS                                             *
***********************************************************************
*
         LM    R0,R5,CHANPROG     MOVE AND RELOCATE CHAN PROG    Y02072
         ALR   RCSID,RAREA        RELOCATE SEARCH ID CCW
         ALR   RCTIC1,RAREA       RELOCATE FIRST TIC
         AR    RCMRC,RAREA        RELOCATE READ COUNT CCW
         STM   R0,R5,CCW1         MOVE CCW'S                     Y02072
         LM    R0,R5,SKEH         SECOND HALF                    Y02072
         AR    RCTIC2,RAREA       RELOCATE SECOND TIC
         AR    RCRD,RAREA         RELOCATE READ DATA CCW
         STM   R0,R5,CCW4
*
*              INITIALIZE IOB IN WORK AREA (PREVIOUSLY ZEROED)
         LA    RY,ECB                                            Y02072
         ST    RY,IOBECBPT        POINT TO ECB                   Y02072
         LA    RY,CCW                                            Y02072
         ST    RY,IOBSTART        POINT TO CHANNEL PROGRAM       Y02072
         MVI   IOBFLAG1,IOBUNREL+IOBSPSVC  SET NON-RELATED FLAG  Y02072
*                                          AND NOP APPENDAGES    Y02072
*                                 *************************
         LM    R0,R5,EXSSAVE      * RESTORE REGISTERS     *      Y02072
         POP   USING              * AND PREVIOUS USINGS   *
*                                 *************************
         SPACE 2
***********************************************************************
*        CYCLE THROUGH USER'S BLDL LIST, SETTING EACH ENTRY 'EMPTY'   *
*        THIS IS INDICATED BY RECORD # 0 IN THE ENTRY TTR.            *
***********************************************************************
*
         LA    RPDS2,BLDENT       SET TO FIRST ENTRY
         USING PDS2,RPDS2
*
         TM    EXSFLG,EXSSYDCB+EXSBLDL IS IT USING A SYSTEM DCB  Y02072
*                                      AND BLDL?                 Y02072
         BNO   CLRENT             NO USE THE SAME KEY AS THE WKA Y02072
*
*        IF IT IS A SYSTEM DCB AND BLDL WE ARE GOING TO MODIFY   Y02072
*        THE CALLERS CORE SO WE SWITCH TO CALLER KEY             Y02072
*
         MODESET KEYADDR=EXSKEY,WORKREG=1 CALLER KEY             Y02072
*              LOOP THROUGH ENTRIES
CLRENT   EQU   *                                               @ZA31343
         LH    RZ,BLDENTS         PICKUP NO. OF ENTRIES        @ZA31343
CLRENTA  EQU   *                                               @ZA31343
         MVI   PDS2TTRP+2,0       ZERO R FIELD
         AH    RPDS2,BLDELEN      GO TO NEXT ENTRY IN LIST
         BCT   RZ,CLRENTA         LOOP THROUGH ALL ENTRIES
         DROP  RPDS2
*              END OF LOOP
         TM    EXSFLG,EXSSYDCB+EXSBLDL DID WE CHANGE KEY?        Y02072
         BNO   SEARCH             NO - CONTINUE                  Y02072
         MODESET EXTKEY=SUPR      CHANGE BACK TO SUPERVISOR KEY  Y02072
         EJECT
SEARCH   EQU   *
***********************************************************************
*              RESIDENT TABLE SEARCH                                  *
*        THIS ROUTINE SEARCHES THE RESIDENT BLDL TABLES FOR LINKLIB   *
*        OR SVCLIB AS APPROPRIATE, IF THEY ARE PRESENT.               *
*        IT USES A BINARY SEARCH FOR THE FIRST ENTRY IN THE USER'S    *
*        LIST, AND THEN SCANS SEQUENTIALLY FOR THE REMAINING ENTRIES. *
*        NOTE THAT USER ENTRIES MUST BE IN ALPHAMERIC SEQUENCE.       *
***********************************************************************
*              SPECIAL REGISTER USAGE                                 *
* 0 RSCUR--- NUMBER OF CURRENT ENTRY IN RES TABLE DURING BINARY SEARCH*
* 1 RSMOVE-- MOVE LENGTH TO BE USED EXECUTING REMOTE MVC INSTRUCTION  *
* 4 RSTUB=RX-UPPER BOUNDARY FOR BINARY SEARCH                         *
* 5 RSTLB=RY-LOWER BOUNDARY FOR BINARY SEARCH                         *
* 8 RRENT--- POINTER TO CURRENT RESIDENT TABLE ENTRY                  *
* 9 RRES---- POINTER TO RESIDENT TABLE                                *
*15 RSTLEFT- NUMBER OF RESIDENT TABLE ENTRIES REMAINING DURING SCAN   *
***********************************************************************
*
***            FIRST TEST TO SEE IF RESIDENT TABLE CAN BE USED
*
         CLI   LIB,LINKSVC        IF NOT LINKLIB OR SVCLIB
         BNE   SRCHPDS            BYPASS RESIDENT TABLE SEARCH
         L     RRES,IEARESBL      FIND LINKLIB RESIDENT TABLE
         C     RDCB,CVTLINK       IF LINKLIB IS BEING USED
         BE    TESTRES            GO AHEAD, OTHERWISE MUST BE SVCLIB
         MVI   LIB,USERLIB        RESET TO INDICATE NOT LINKLIB
         L     RRES,IEARESBS      AND FIND SVCLIB RESIDENT TABLE
TESTRES  LTR   RRES,RRES          IF THE APPROPRIATE TABLE
         BZ    SRCHPDS            IS NOT PRESENT, GET OUT
         USING RESTAB,RRES
*
***            SET UP LENGTH OF DATA PORTION TO BE MOVED.
***            THIS MAY BE LIMITED EITHER BY USER OR BY RESIDENT TABLE
*
         CLC   BLDELEN,RESELEN    Q. IS USER LL GT RES TABLE
         BNH   LEN1               NO, USER LL OK SO FAR
         LH    RSMOVE,RESELEN     YES, USE RES TABLE LL
         B     LEN3               GO DECREMENT FOR NAME FIELD
*
LEN1     CLI   BLDELEN+1,PDS2MIN  Q. IS USER LL LESS THAN MINIMUM
         BNL   LEN2               NO, USE USER LL
         LA    RSMOVE,PDS2MIN-L'PDS2NAME-1  YES, USE MIN LENGTH
         B     BINSRCH            GO ON
*
LEN2     LH    RSMOVE,BLDELEN
LEN3     LA    RX,L'PDS2NAME+1    CALC LENGTH-1 EXCLUDING NAME
         SR    RSMOVE,RX
         SPACE 2
BINSRCH  EQU   *
***********************************************************************
*        BINARY SEARCH OF THE RESIDENT TABLE FOR THE FIRST USER ENTRY *
***********************************************************************
*
         BAL   RSUBR,FIRSTMTY     GO TO FIND FIRST EMPTY USER ENTRY
         USING PDS2,RPDS2
*                                 CONSIDER RESTABLE ENTRIES NUMBERED
         LH    RSTUB,RESNUM       FROM 0 TO RESNUM-1
         BCTR  RSTUB,0            UPPER BOUND IS NUMBER OF LAST ENTRY
         SR    RSTLB,RSTLB        LOWER BOUND IS NUMBER OF FIRST ENTRY
*
***            CHECK THE ENTRY HALF WAY BETWEEN UPPER AND LOWER BOUNDS
*
BISTART  LA    RSCUR,0(RSTLB,RSTUB)  SET CURRENT AS AVERAGE
         SRL   RSCUR,HALVE           OF UPPER AND LOWER BOUNDS
         LR    RRENT,RSCUR        DEVELOP POINTER TO CURRENT ENTRY
         MH    RRENT,RESELEN      RRENT = RSCUR * RES TABLE LL
         LA    RRENT,RESENT1(RRENT)       + POSITION OF FIRST ENTRY
         USING RESENT,RRENT
         CLC   PDS2NAME,RESNAME   COMPARE USER NAME WITH TABLE
         BH    BHI                IF HIGH, LOOK AHEAD
         BE    SCAN               IF CORRECT, THIS IS STARTING POSITION
*                                 IF LOW, BACK UP
***            NAME IS LOWER--RESET UPPER BOUND
*
         LR    RSTUB,RSCUR
         BCTR  RSTUB,0            USE CURRENT-1 AS UPPER BOUND
         CR    RSCUR,RSTLB        IF CURRENT WAS STILL ABOVE LOW BOUND
         BH    BISTART            THEN CONTINUE BINARY SEARCH
         B     SCAN               OTHERWISE START SCAN HERE
*
***            NAME IS HIGHER--RESET LOWER BOUND
*
BHI      LR    RSTLB,RSCUR        SET LOWER BOUND AT
         LA    RSTLB,1(RSTLB)     CURRENT + 1
         CR    RSCUR,RSTUB        IF UPPER BOUND NOT YET HIT,
         BL    BISTART            CONTINUE SEARCH
         SPACE 2
SCAN     EQU   *
***********************************************************************
*        AT THIS POINT WE ARE POSITIONED FROM THE BINARY SEARCH.      *
*        IF THE FIRST ENTRY EXISTS, RRENT POINTS TO IT                *
*        BEGINNING WITH THAT FIRST ENTRY, CODE WILL NOW SCAN RESIDENT *
*        TABLE, MATCHING ENTRIES AS IT GOES.                          *
***********************************************************************
         LH    RSTLEFT,RESNUM     GET NUMBER OF RESTABLE ENTRIES
         SR    RSTLEFT,RSCUR      REMAINING TO BE SCANNED
*
***            COMPARE USER ENTRY WITH RESIDENT TABLE ENTRY
*
COMP     CLC   PDS2NAME,RESNAME   COMPARE NAMES
         BE    FOUND              IF MATCH, GO FILL ENTRY
         BH    NEXTRES            IF USER HIGH, CONTINUE SCAN
*                                 IF USER LOW, ENTRY NOT PRESENT
         MVI   ERCODE,ERRNAME     SET ERROR CODE--NAME NOT FOUND
         BAL   RSUBR,NEXTUSER     GO TO NEXT USER ENTRY
         B     COMP
         SPACE 2
***********************************************************************
*        THIS SUBROUTINE SCANS FOR EMPTY USER ENTRIES
*         IT HAS TWO ENTRY POINTS:
*              FIRSTMTY RESETS TO THE BEGINNING OF THE USER LIST,     *
*                       THEN SCANS TO THE FIRST ENTRY NOT YET FILLED  *
*              NEXTUSER SCANS FORWARD FROM CURRENT ENTRY TO NEXT      *
*                       ONE WHICH HAS NOT YET BEEN FILLED             *
*        IT NORMALLY RETURNS (ON RSUBR) AFTER UPDATING RPDS2 TO POINT *
*        TO THE NEW USER ENTRY.  HOWEVER, WHEN IT REACHES THE END OF  *
*        THE USER LIST, IT EXITS TO THE NORMAL DIRECTORY SEARCH.      *
***********************************************************************
*
FIRSTMTY MVI   ERCODE,0           RESET ERROR INDICATION
         LH    RSULEFT,BLDENTS    RESET USER ENTRY COUNT
         LA    RPDS2,BLDENT       START WITH FIRST USER ENTRY
*
NXTEMPTY CLI   PDS2TTRP+2,0       Q. IS THIS ENTRY EMPTY
         BER   RSUBR              YES - RETURN WHENCE YOU CAME
*                                 NO-GET NEXT USER ENTRY
***            ENTRY POINT TO GET NEXT UNFILLED ENTRY
*
NEXTUSER AH    RPDS2,BLDELEN      INCREMENT TO NEXT USER ENTRY
         BCT   RSULEFT,NXTEMPTY   IF MORE ENTRIES, GO CHECK FOR EMPTY
         B     ENDRES             ELSE START NORMAL DIRECTORY SEARCH
         SPACE 2
***********************************************************************
*        A MATCHING ENTRY HAS BEEN FOUND--FILL IT IF APPROPRIATE      *
***********************************************************************
*
FOUND    CLI   RESREC,0           IS R OF RES TABLE TTR = 0
         BE    NOFILL             YES - DON'T PERFORM MOVE
         TM    EXSFLG,EXSSYDCB+EXSBLDL SYSTEM DCB & BLDL?        Y02072
         BNO   FOUND1             NO - KEY OK                    Y02072
         DROP  RCVT               MODESET WORKREG IS RCVT        Y02072
         MODESET KEYADDR=EXSKEY,WORKREG=3 GET IN CALLER KEY      Y02072
         L     RCVT,CVTPTR        RESTORE CVT POINTER            Y02072
         USING CVT,RCVT                                          Y02072
FOUND1 EQU     *                                                 Y02072
         EX    RSMOVE,RESMOVE     NO - MOVE ENTRY
         TM    EXSFLG,EXSSYDCB+EXSBLDL WAS KEY CHANGED?          Y02072
         BNO   NEXT               NO - CONTINUE                  Y02072
         MODESET EXTKEY=SUPR      MODESET BACK TO SUPR KEY       Y02072
         B     NEXT               AND CONTINUE PROCESSING
*********EXECUTED INSTRUCTION******************************************
RESMOVE  MVC   PDS2TTRP(0),RESDATA    EXECUTED IN 'FOUND' ABOVE
*********EXECUTED INSTRUCTION******************************************
         SPACE 2
*
***            IF R OF RES TABLE TTR IS 0, IGNORE ENTRY
*
NOFILL   MVI   ERCODE,ERRNAME     SET ERROR CODE--NAME NOT FOUND
NEXT     BAL   RSUBR,NEXTUSER     GET NEXT USER ENTRY
*
***            GO TO NEXT ENTRY IN RESIDENT TABLE IF NOT EXHAUSTED
*
NEXTRES  AH    RRENT,RESELEN      INCREMENT TO NEXT RES TABLE ENTRY
         BCT   RSTLEFT,COMP       IF MORE ENTRIES, CONTINUE PROCESSING
*                                 ELSE CURRENT ENTRY NOT MATCHED
         DROP  RRES,RRENT
         MVI   ERCODE,ERRNAME     SET ERROR CODE--NAME NOT FOUND
         SPACE 2
***********************************************************************
*        SCAN OF RESIDENT TABLE IS NOW COMPLETE                       *
*        CHECK TO SEE IF MORE PROCESSING IS NEEDED                    *
***********************************************************************
*
ENDRES   CLI   ERCODE,0           WERE ALL USER NAMES FOUND
         BNE   SRCHPDS            IF NOT, TRY DA SEARCH
         SR    R15,R15            SET RETURN CODE TO ZERO         M3385
         B     FINDRET            RETURN                         Y02072
         EJECT
***********************************************************************
*              SEARCH PDS DIRECTORY FOR REMAINING ENTRIES             *
*        BEGIN BY CONVERTING THE TTR AT WHICH SEARCH IS TO BEGIN      *
*        (NORMALLY 000) INTO AN MBBCCHHR. THIS IS DONE BY CALLING     *
*        IECPCNVT.                                                    *
***********************************************************************
*
SRCHPDS  EQU   *
         BAL   RSUBR,FIRSTMTY     FIND FIRST EMPTY USER ENTRY
         SR    R0,R0              START AT BEGINNING OF DIRECTORY
*
***            ENTRY HERE FOR TTR SUPPLIED BY CALLER
***            TTR IS ALREADY LOADED IN R0
*
SRCHTTR  IC    R0,CONCAT#         GET CONCATENATION NUMBER
         TM    EXSFLG,EXSSYDCB    ARE WE IN KEY 0?               Y02072
         BO    SRCHKYOK           YES - DO STM                   Y02072
         MODESET EXTKEY=SUPR      NO - GET IN KEY 0              Y02072
SRCHKYOK DS    0H                                                Y02072
*                                 ******************
         STM   R9,R15,EXSSAVE     * SAVE REGISTERS *             Y02072
         ST    RGMBB,EXSRG2       ******************             Y02072
         TM    EXSFLG,EXSSYDCB    SHOULD WE BE IN KEY 0?         Y02072
         BO    SRCH0OK            YES - CONTINUE                 Y02072
         TM    CVTOPTA,CVTNIP     TEST FOR NIP IN CONTROL      @ZA30955
         BO    SRCH0OK            YES - CONTINUE               @ZA30955
         L     RDEB,DCBDEBAD      GET DEB ADDRESS              @ZA30955
         USING DEBBASIC,RDEB                                   @ZA30955
         L     R9,0(RDEB)         LOAD THE TCB ADDR FROM DEB   @ZA30955
         LA    R9,0(R9)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   R9,R9              TCB PRESENT ?                @ZA30955
         BZ    ERROR2             NO ERROR                     @ZA30955
         L     RZ,CVTTCBP         GET TCB POINTERS             @ZA30955
         USING TCBPTRS,RZ                                      @ZA30955
         L     RZ,TCBPTRC         FIND CURRENT TCB             @ZA30955
         LR    RX,RZ              LOAD CURRENT TCB INTO REG4   @ZA30955
         DROP  RZ                                              @ZA30955
FINDTCB3 EQU   *                                               @ZA30955
         USING TCB,RX                                          @ZA30955
         LR    R5,RX              SAVE ORIGINAL TCB ADDR       @ZA30955
FINDTCBB EQU   *                                               @ZA30955
         L     RX,TCBTCB          ADDR OF NEXT TCB ON QUEUE    @ZA30955
         LA    RX,0(RX)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   RX,RX              HIGHEST TCB ?                @ZA30955
         USING TCB,RX                                          @ZA30955
         BZ    BACKTCB2           CHECK BACK TCB CHAIN         @ZA30955
         CR    R9,RX              COMPARE CURRENT TCB WITH     @ZA30955
*                                 TCBS ON TCB QUEUE            @ZA30955
         BE    DEBCHKB2           BRANCH TO CHECK DEB          @ZA30955
         B     FINDTCBB           CONTINUE CHECKING TCBS       @ZA30955
BACKTCB2 EQU   *                                               @ZA30955
         LR    RX,R5              RESTORE ORIGINAL TCB         @ZA30955
         CR    R9,RX              TCBS THE SAME                @ZA30955
         BE    DEBCHKB2           THEN GO TO DEBCHK RTN        @ZA30955
BACKTCBC EQU   *                                               @ZA30955
         L     RX,TCBBACK         ADDR OF BACK CHAIN TCB'S     @ZA30955
         LA    RX,0(RX)           CLEAR HI-ORDER BYTE          @ZA30955
         LTR   RX,RX              TEST FOR ZERO                @ZA30955
         USING TCB,RX                                          @ZA30955
         BZ    ERROR2             TCB NOT FOUND THEN ERROR     @ZA30955
         CR    R9,RX              SAME TCB STOP CHECKING?      @ZA30955
         BE    DEBCHKB2           TCB VALID -CHECK DEB         @ZA30955
         B     BACKTCBC           CONTINUE CHECKING TCB'S      @ZA30955
ERROR2   LA    R15,RCIOERR        SET R15 = 8 DEB NOT GOOD     @ZA30955
         LA    R0,RCDEBERR        SET R0 = 8 DEB NOT GOOD      @ZA30955
         B     CLEANUP1           CLEANUP AND LEAVE            @ZA30955
DEBCHKB2 EQU   *                                               @ZA30955
         LR    R5,RDCB            SAVE THE DCB ADDR            @ZA30955
         L     R1,DCBDEBAD        GET DEB ADDRESS              @ZA30955
         LR    RGW,RX             REG 10 - TCB ADDR            @ZA30955
         L     RCVT,CVTPTR        GET CVT ADDR                 @ZA30955
         USING CVT,RCVT                                        @ZA30955
         L     R15,CVTEXT2        GET CVT EXTENSION ADDR       @ZA30955
         USING CVTXTNT2,R15                                    @ZA30955
         L     R15,CVTDEBVR       GET BR ENTRY ADDR OF DEBCHK  @ZA30955
         BALR  RRET,R15           BRANCH TO DEBCHK             @ZA30955
         NOP   0                  NOP FOR RETURN FROM DEBCHK   @ZA30955
         LTR   R15,R15            CHECK DEBCHK COND CODE       @ZA30955
         BNZ   ERROR2             BAD DEB                      @ZA30955
         LR    RDCB,R5            RESTORE RDCB ADDR            @ZA30955
         LR    RDEB,R1            GOOD DEB ADDR                @ZA30955
         USING DEBBASIC,RDEB                                   @ZA30955
         L     R15,DEBDCBAD       GET DCB ADDR FROM GOOD DEB   @ZA30955
         LA    R15,0(R15)         CLEAR HI-ORDER BYTE          @ZA30955
         CR    RDCB,R15           SAME DCB ADDRESSES ?         @ZA30955
         BNE   ERROR2             NO - ERROR BAD DEB           @ZA30955
         TM    DEBPK(R1),KEYMASK  USER'S PROTECT KEY 0 ?       @ZA30955
         BZ    SRCH0OK            YES - CONTINUE               @ZA30955
         MODESET KEYADDR=EXSKEY,WORKREG=9 NO SHIFT TO CALLER KEY Y02072
SRCH0OK  DS    0H                                                Y02072
         L     RGDEB,DCBDEBAD     GET ADDRESS OF DEB
         LA    RGMBB,IOBSEEK      POINT TO LOC FOR RESULT MBBCCHHR
         LA    R15,IECPCNVT       CALL TTR CONVERT ROUTINE
         BALR  RRET,R15
         LTR   R15,R15            WAS USER TTR VALID?
*                                 *********************
         LM    R9,R15,EXSSAVE     * RESTORE REGISTERS *          Y02072
         L     RGMBB,EXSRG2       *********************          Y02072
         BNZ   BADIO              IF TTR WAS INVALID, CALL IT I/O ERROR
         ST    RDCB,IOBDCBPT      OTHERWISE FINISH IOB (DCB ADDRESS)
         SPACE 2
***********************************************************************
*        READ IN BLOCK WHICH SHOULD CONTAIN CURRENT ENTRY             *
*        THE CHANNEL PROGRAM WILL SEARCH ON KEY FOR THE FIRST BLOCK   *
*        HAVING AN ENTRY HIGHER OR EQUAL TO CURRENT USER ENTRY NAME   *
***********************************************************************
*
READ     STCM  RPDS2,ADDR3,CCWKEYPT   POINT TO NAME SEARCHING FOR
         EXCP  IOBSTDRD           READ IN THE CORRECT BLOCK
         TM    ECB,COMPLETE       DID ECB GET POSTED?          @ZA12201
         BO    BYWAIT             BYPASS WAIT SVC              @ZA12201
         WAIT  ECB=ECB            ELSE WAIT FOR COMPLETION
BYWAIT   EQU   *                  ECB HAS BEEN POSTED          @ZA12201
         TM    ECB,COMPLETE+NORMAL  CHECK COMPLETE AND NO-ERROR BITS
         BO    GOODIO             IF NO ERRORS, GO AHEAD
*                                 ELSE COMPLETE WITH ERROR
BADIO    LA    R15,RCIOERR        SET I/O ERROR CODE
         B     FINDRET            RETURN                         Y02072
         SPACE 2
GOODIO   EQU   *
***********************************************************************
*              SCAN DIRECTORY BLOCK                                   *
*        BEGIN BY SETTING UP SCAN LIMITS                              *
***********************************************************************
         LA    RPDS1,PDBENT1      SET START ADDR
         USING PDS1,RPDS1
MORESCAN LH    RY,PDBUSE          SET UP RY TO STOP SCAN
         AR    RY,RAREA           AT END OF IN USE PORTION
         BCTR  RY,0               BACK UP TO LAST VALID BYTE
         LA    RZ,PDS2LUSR        SET MASK FOR C BYTE
*
***            CHECK THIS ENTRY
*
CMPARE   CLC   PDS1NAME,PDS2NAME  COMPARE NAMES
         BE    DFOUND             IF FOUND, GO FILL ENTRY
         BL    NAMELO             IF LOW CONTINUE SEARCH         Y02072
*
***            NOT IN THIS DIRECTORY
*
         MVI   ERCODE,ERRNAME     SET ERROR CODE 4               Y02072
         B     UNFILLED           GO GET NEXT USER ENTRY         Y02072
*
***            DIRECTORY NAME LOW--GO TO NEXT DIRECTORY ENTRY
*
NAMELO   EQU   *                                                 Y02072
         IC    RX,PDS1INDC        GET DE FIELD LENGTH (HALFWORDS)
         NR    RX,RZ              MASK OFF FLAG BITS
         LA    RX,PDS1USRD-PDS1(RX,RX)   ENTIRE ENTRY LENGTH IN BYTES
*        THE FOLLOWING BXLE ADDS RX TO RPDS1 AND COMPARES WITH RY
*        IT REQUIRES THAT RX-RY BE AN EVEN-ODD PAIR
         BXLE  RPDS1,RX,CMPARE    LOOP IF MORE ENTRIES IN BLOCK
         MVC   CCHHR,NEWCNT       ELSE SET SEARCH ARG FOR CHANNEL
*                                 PROGRAM TO CONTINUE SCAN
         B     READ               AND GO ISSUE EXCP
         SPACE 2
***********************************************************************
*        CORRECT ENTRY FOUND -- MOVE IT INTO USER LIST                *
***********************************************************************
*
*********EXECUTED INSTRUCTION******************************************
MOVE     MVC   PDS2USRD-1(0),PDS1USRD-1   EXECUTED AT E BELOW
*********EXECUTED INSTRUCTION******************************************
*
DFOUND   MVC   PDS2TTRP,PDS1TTRP  MOVE TTR
         IC    RX,PDS1INDC        GET C FROM DIRECTORY
         NR    RX,RZ              MASK OFF FLAG BITS
         LA    RY,PDS2USRD-PDS2   LENGTH OF ENTRY STANDARD PORTION
         LCR   RY,RY              TO BE SUBTRACTED FROM TOTAL LENGTH
         AH    RY,BLDELEN         YIELDING LENGTH TO MOVE
         BM    NOMOVE             BYPASS MOVE IF NEGATIVE
*              THE FOLLOWING BXLE DOUBLES THE DIRECTORY ENTRY LENGTH
*              IN RX TO CONVERT FROM HALFWORDS TO BYTES, AND USES IT
*              IF IT IS NOT GREATER THAN THE USER ENTRY LENGTH.
         BXLE  RX,RX,EXEC
*                                 DROPS THROUGH IF DIRECTORY LENGTH
*                                 IS GREATER.
         LR    RX,RY              IN THIS CASE TAKE USER LENGTH
EXEC     EQU   *
         TM    EXSFLG,EXSSYDCB+EXSBLDL SYSTEM DCB AND BLDL?      Y02072
         BNO   EXEC1              NO KEY CHANGE NOT NEEDED       Y02072
         DROP  RCVT               MODESET WORKREG IS RCVT        Y02072
         MODESET KEYADDR=EXSKEY,WORKREG=3 SET TO CALLER KEY      Y02072
         L     RCVT,CVTPTR        RESTORE CVT POINTER            Y02072
         USING CVT,RCVT                                          Y02072
EXEC1    EQU   *
         EX    RX,MOVE            MOVE USER DATA + INDC BYTE
         TM    EXSFLG,EXSSYDCB+EXSBLDL KEY CHANGED ?             Y02072
         BNO   EXEC3              NO - CONTINUE                  Y02072
         MODESET EXTKEY=SUPR      YES - RETURN TO SUPR KEY       Y02072
EXEC3    EQU   *
         SR    RX,RX              CLEAR REG                    @ZA26444
         IC    RX,LIB             JOBLIB Z BYTE                @ZA26444
         TM    LIB,JOBLIB         JOBLIB                       @ZA26444
         BZ    MOVEZ              MOVE Z BYTE                  @ZA26444
         SRL   RX,4               SHIFT OUT LOWER BIT          @ZA26444
MOVEZ    EQU   *                                               @ZA26444
         STC   RX,PDS2LIBF        MOVE LIB # TO USER Z FIELD   @ZA26444
NOMOVE   IC    RX,CONCAT#         GET CONCATENATION NUMBER
         STC   RX,PDS2CNCT        PUT IT INTO USERS LIST
         B     UNFILLED           GO GET NEXT USER ENTRY
         SPACE 2
***********************************************************************
*        THIS ROUTINE FINDS THE NEXT UNFILLED USER ENTRY              *
*        IT IS ENTERED AT LABEL 'UNFILLED'                            *
***********************************************************************
*
UNFIL2   AH    RPDS2,BLDELEN      GO TO NEXT ENTRY
         CLI   PDS2TTRP+2,0       IF IT HAS NOT BEEN FILLED,
         BE    MORESCAN           THEN GO PROCESS IT             Y02072
UNFILLED BCT   RSULEFT,UNFIL2     BRANCH IF THERE ARE MORE LIST ENTRIES
*
***      END OF LIST REACHED -- CHECK FOR ANY OMISSIONS
*
         SR    R15,R15
         IC    R15,ERCODE         GET ANY SAVED ERROR
         LTR   R15,R15            TEST FOR ERROR,                A27543
         BZ    FINDRET            BR IF NOT TO RETURN            Y02072
         SPACE 2
***********************************************************************
***      DETERMINE WHETHER OR NOT THERE ARE CONCATENATED DATA    A28189
***      SETS IN WHICH TO SEARCH FOR A MEMBER. THIS CAN BE       A28189
***      DONE ONLY IF THE DATA SET IS PARTITIONED AND HAS BEEN   A28189
***      OPENED FOR INPUT.                                       A28189
***********************************************************************
*                                                                A28189
         L     RDEB,DCBDEBAD      GET DEB ACCESS METHOD LENGTH
         USING DEBBASIC,RDEB
         CLC   DEBAMLNG,CONCAT#   TEST FOR MORE DATA SETS,       A28189
         BH    CNCK               IF LONGER, GO CHECK OPEN TYPE  A28189
         TM    LIB,JOBLIB         TEST FOR JOBLIB DCB,         @ZA26444
         BZ    FINDRET            BR IF NOT BACK TO COMMON     @ZA26444
*
***            SEARCH FOR DISTINCT TASK LIBS TO CONCATENATE
*
         L     RZ,CVTTCBP         FIND TCB POINTERS            @ZA26444
         USING TCBPTRS,RZ                                      @ZA26444
         L     RZ,TCBPTRC         FIND CURRENT TCB             @ZA26444
         USING TCB,RZ                                          @ZA26444
         L     RX,TCBJLB          JOBLIB DCB ADDR              @ZA26444
         SR    R0,R0              CLEAR REG                    @ZA26444
         IC    R0,LIB             GET LIBRARY FLAG             @ZA26444
         MVI   LIB,TASKLIB        MOVE IN TASKLIB FLAG         @ZA26444
         SRL   R0,4               STRIP OFF LIB IND            @ZA26444
         BCTR  R0,0               SET LOOP CONTROL             @ZA26444
TAGZ1    EQU   *                                               @ZA26444
         CR    RX,RDCB            IS THIS DCB SAME AS          @ZA26444
*                                 ONE WE JUST SEARCHED         @ZA26444
         BNE   TAGZ3              NO BRANCH                    @ZA26444
TAGZ2    EQU   *                                               @ZA26444
         IC    R15,LIB            ADD 1 TO TOP NIBBLE OF       @ZA26444
         LA    R15,16(R15)        LIBFLAG BYTE INDICATES       @ZA26444
         STC   R15,LIB            WHICH TCB LEVEL CURRENT      @ZA26444
         L     RZ,TCBOTC          LOAD MOTHER TCB              @ZA26444
         LTR   RZ,RZ              IS THE MOTHER TCB ZERO       @ZA27485
         BZ    TAGH                NO GO SEARCH LINKLIB        @ZA27495
         L     RX,TCBJLB          GET JOBLIB FOR MOTHER        @ZA26444
         LTR   RX,RX              DOES MOTHER HAVE JOBLIB      @ZA26444
         BZ    TAGH               NO GO SEARCH LINKLIB         @ZA26444
         B     TAGZ1              YES, GO ON                   @ZA26444
TAGZ3    EQU   *                                               @ZA26444
         BCT   R0,TAGZ2           IF NEW DCB PICKED UP &       @ZA26444
*                                 ITS NOT 1ST, LOOP AROUND TO  @ZA26444
*                                 UPDATE LIBFLAG BEFORE START  @ZA26444
*                                 DIRECTORY SEARCH OF THIS LIB @ZA26444
         LR    RDCB,RX            UPDATE TO NEW DCB            @ZA26444
         B     CAT8               GO BEGIN DIRECTORY SEARCH    @ZA26444
*                                                              @ZA26444
TAGH     EQU   *                                               @ZA26444
*                                                              @ZA26444
*              JOBLIB SEARCH COMPLETED                         @ZA26444
*                                                              @ZA26444
         MVI   LIB,LINKSVC        START LINKLIB SEARCH         @ZA26444
         L     RDCB,CVTLINK       LINKLIB DCB ADDR
*
CAT8     SR    RX,RX              RESET CONCATENATION # TO ZERO   M4612
         B     STORCAT            PREPARE TO SEARCH NEW LIBRARY
         SPACE 2
***********************************************************************
*              POSSIBLE CONCATENATION WITHIN DEB                      *
*        ACCESS METHOD SECTION LENGTH INDICATES THERE MAY BE MORE     *
*        CONCATENATED DATA SETS WITHIN THIS DEB.                      *
*        FOR BPAM INPUT THIS SECTION HAS ONE BYTE PER DATA SET.       *
*        FIRST VERIFY THAT DEALING WITH BPAM INPUT.                   *
***********************************************************************
CNCK     EQU   *                                                  13547
         TM    LIB,LINKSVC+JOBLIB   CHECK FOR LINKLIB OR JOBLIB   13547
         BM    CATINCR            IS BPAM IF EITHER               13547
         TM    DCBDSORG,DCBDSGPO  TEST FOR PARTITIONED DATA SET, A28189
         BNO   FINDRET            BR IF NOT TO RETURN            Y02072
         TM    DEBOPATB,DEBACCS   TEST FOR INPUT,                A28189
         BNZ   FINDRET            BR IF NOT TO RETURN            Y02072
         DROP  RDEB                                               22232
*
***            INCREMENT CONCATENATION NUMBER
*
CATINCR  SR    RX,RX              CLEAR REGISTER
         IC    RX,CONCAT#         PICK UP PREVIOUS CONCAT NR
         LA    RX,1(RX)           ADD ONE
*
***      STORE UPDATED CONCAT NR AND RESET SCAN OF USER LIST
*
STORCAT  STC   RX,CONCAT#
         BAL   RSUBR,FIRSTMTY     RESTART SCAN OF USER LIST
         B     SEARCH             BEGIN SEARCH AGAIN
         DROP  RAREA,RCVT,RPDS2,RPDS1,RDCB,RBASE,RLIST
         EJECT
*
*        BOOTSTRAP ROUTINE.  ENTERED FROM RTM ON AN ATTEMPT TO
*        ABNORMALLY TERMINATE IGC018.  THIS ROUTINE FINDS AND
*        BRANCHES TO THE TASK RECOVERY ROUTINE - IGCT0018.
*
EXITRTN  IGGSTAE TRR              BOOTSTRAP ROUTINE              Y02072
         EJECT
***********************************************************************
*              CONSTANTS                                              *
***********************************************************************
PATCH    DC    XL50'00'           PATCH AREA                   @ZA12201
DECREC   DC    H'256'             USED TO DECREMENT R OF TTR BY 1
FINDHDR  DC    H'1',AL2(FNDENTSZ)   FIND'S BLDL LIST HEADER
TRR      DC    CL8'IGCT0018'      TRR NAME                       Y02072
IEARESBS DC    F'0'               LOC OF RES BLDL SVC-LIB-TABLE
IEARESBL DC    F'0'               LOC OF RES BLDL LINKLIB TABLE
         ENTRY IEARESBL           EXTERNAL SYMBOL FOR NIP
         ENTRY IEARESBS           EXTERNAL SYMBOL FOR NIP
ESTAEL   ESTAE EXITRTN,RECORD=YES,MF=L LIST TO MOVE TO RB        Y02072
*
***            CHANNEL PROGRAM
*
CHANPROG DS    0D
*CCW1                             SEARCH ID EQUAL
         CCW   SIDEQ,CCHHR-WORKAREA,CCHN,L'CCHHR
*CCW2                             TRANSFER IN CHANNEL
         CCW   TIC,CCW1-WORKAREA,0,0
*CCW3                             MULTI-TRACK READ COUNT
         CCW   MRC,NEWCNT-WORKAREA,CCHN,L'NEWCNT
*CCW4                             SEARCH KEY HIGH OR EQUAL
SKEH     CCW   SKHEQ,0,CCHN,L'PDS2NAME
*CCW5                             TRANSFER IN CHANNEL
         CCW   TIC,CCW3-WORKAREA,0,0
*CCW6                             READ DATA
         CCW   RD,RDAREA-WORKAREA,0,L'RDAREA
         EJECT
***********************************************************************
*                                                                     *
*IECPRLTV-- MBBCCHHR TO TTR0 CONVERT ROUTINE                          *
*REGISTER CONVENTION--                                                *
*        0     CONTAINS RESULT TTR0                                   *
*        1     ADDRESS OF DEB                                         *
*        2     ADDRESS OF MBBCCHHR INPUT                              *
*        3-8   TRANSPARENT                                            *
*        9-13  VOLATILE                                               *
*        14    RETURN ADDRESS                                         *
*        15    ENTRY ADDRESS-- USED FOR BASE                          *
***********************************************************************
         SPACE 3
         ENTRY IECPRLTV
         USING IECPRLTV,R15
         USING SEEKA,RGMBB
IECPRLTV SR    RGTTR,RGTTR        CLEAR OUTPUT REGISTER
         LR    RGZ,RGDEB          USED LATER TO INDEX THRU EXTENTS
         USING DEBBASIC,RGZ
         SR    RGY,RGY
         IC    RGY,SEEKM          PICKUP M
         TM    DEBOFLGS,DEBPOCAT  CHECK FOR PDS CONCATENATION      5798
         BZ    RLTVZ              BR. IF NOT                       5798
         SPACE 2
***********************************************************************
*              FOR PDS CONCATENATION, THE DEB CONTAINS EXTENTS FOR    *
*              ALL DATA SETS.  THE BPAM SECTION OF THE DEB HAS A      *
*              SERIES OF ONE-BYTE ENTRIES INDICATING THE FIRST        *
*              EXTENT NUMBER FOR EACH DATA SET (AFTER THE FIRST).     *
*              THE FOLLOWING CODE SCANS THE BPAM SECTION BACKWARD     *
*              TO FIND WHICH DATA SET CONTAINS THE USER SPECIFIED     *
*              EXTENT NUMBER.                                         *
***********************************************************************
         SR    RGV,RGV            ZERO OUT REGISTER                5798
         IC    RGV,DEBNMEXT       GET NUMBER OF EXTENTS            5798
         SLL   RGV,TIMES16        MULTIPLY BY 16                   5798
         AR    RGV,RGDEB          POINT TO DEB, BYPASSING BASIC    5798
         SR    RGW,RGW
         IC    RGW,DEBAMLNG       GET LENGTH OF DEB A/M SECTION  A28189
*                                 THIS IS 1 LESS THAN NUMBER
*                                 OF CONCATENATED DATA SETS
         DROP  RGZ                                                 5798
*
***            ADDRESS BPAM SECTION THROUGH REGISTER WHICH HAS
***            NOT BEEN INCREMENTED PAST BASIC SECTION
***            (BUT DOES BYPASS EXTENTS)
*
         USING DEBACSMD-(DEBBASND-DEBBASIC),RGV                    5798
         SR    RGX,RGX            GET FIRST M FOR DATA SET N FROM  5798
RLTVX    IC    RGX,DEBEXTNM-1(RGW)  (N-1)TH BYTE OF BPAM SECTION   5798
         CR    RGY,RGX            COMPARE WITH USERS M             5798
         BNL   RLTVY              BR. IF CORRECT DATA SET          5798
         BCT   RGW,RLTVX          BR. IF ANOTHER D.S. TO CHECK     5798
         SR    RGX,RGX            M OF FIRST DATA SET IS ZERO      5798
RLTVY    SR    RGY,RGX            ADJUST USERS M TO EXTENT IN DS   5798
         SLL   RGX,TIMES16        ADJUST DEB PTR AS IF FIRST       5798
         AR    RGZ,RGX            EXTENT OF DESIRED DATA SET WERE  5798
*                                 FIRST EXTENT IN DEB
         DROP  RGV                                                 5798
         USING DEBDASD-(DEBBASND-DEBBASIC),RGZ                     5798
RLTVZ    EQU   *                                                   5798
         LTR   RGY,RGY            IF M IS ZERO
         BZ    RLTVB              WE ARE NOW IN THE CORRECT EXTENT
*                                 OTHERWISE GET NEXT EXTENT
RLTVA    AH    RGTTR,DEBNMTRK     NO. OF TRKS IN EXT
         LA    RGZ,DEBDASIZ(RGZ)  GO TO NEXT EXTENT
         BCT   RGY,RLTVA          LOOP TILL WE REACH RIGHT EXTENT
RLTVB    BAL   RGW,CNVTDVC        PICKUP DEVICE CONSTANT
         USING DVCT,RGY
         SR    RGW,RGW
         IC    RGW,SEEKCC         GET FIRST CC BYTE
         SLA   RGW,8              SHIFT FOR NEXT CC BYTE
         IC    RGW,SEEKCC+1       GET ACTUAL C
         SH    RGW,DEBSTRCC       MINUS START CC
         MH    RGW,DVCTRK         MULTIPLY CYL TIMES TRK/CYL
         IC    RGX,SEEKHH+1       GET ACTUAL H
         AR    RGW,RGX            PLUS TRKS IN CC
         SH    RGW,DEBSTRHH       MINUS START HH
         AR    RGTTR,RGW          DEVELOP TOTAL TT
         SLL   RGTTR,8            SHIFT OVER ONE BYTE
         IC    RGTTR,SEEKR        PICKUP R
         SLL   RGTTR,8            ALIGH TTR0 IN REGISTER
         SR    R15,R15            SET NORMAL RETURN CODE
         BR    RRET               RETURN
         DROP  RGZ
         EJECT
***********************************************************************
*IECPCNVT--- TTRN TO MBBCCHHR CONVERT ROUTINE                         *
*                                                                     *
*THIS ROUTINE WILL CONVERT RELATIVE TRACK TT                          *
*        TO ABSOLUTE TRACK MBBCCHH                                    *
*REGISTER CONVENTION--                                                *
*        0     CONTAINS TTRN, WHERE N IS CONCATENATION NO.            *
*        1     ADDRESS OF DEB                                         *
*        2     ADDRESS OF 8 BYTE FIELD FOR RESULT MBBCCHHR            *
*        3-8   TRANSPARENT                                            *
*        9-13  VOLATILE                                               *
*        14    RETURN ADDRESS                                         *
*        15    ENTRY ADDRESS-- USED FOR BASE                          *
***********************************************************************
         ENTRY IECPCNVT
         USING DEBBASIC,RGDEB
         USING IECPCNVT,R15
IECPCNVT SR    RGV,RGV
         IC    RGV,DEBNMEXT       NUMBER OF EXTENTS
         LR    RGW,RGV            USE FOR LIMIT
         LA    RGZ,LOBYTE         SET UP MASK FOR LOW BYTE ONLY
         NR    RGZ,RGTTR          CONCATENATION NUMBER (N)
         BZ    CNVTA              Q. N IS ZERO
         DROP  RGDEB
         LR    RGY,RGV            NUMBER OF EXTENTS
         SLL   RGY,TIMES16        TIMES 16
         AR    RGY,RGZ            ADD N
*
***            ADDRESS BPAM SECTION THROUGH REGISTER WHICH POINTS TO
***            BASIC SECTION BUT IS INDEXED BY RGY TO BYPASS EXTENTS
*
         USING DEBACSMD-(DEBBASND-DEBBASIC),RGDEB
         IC    RGZ,DEBEXTNM-1(RGY)      FIRST M OF DATA SET N FROM
*                                       (N-1)ST BYTE OF BPAM SECTION
         DROP  RGDEB
         SR    RGW,RGZ            ADJUST LIMIT
         SLL   RGZ,TIMES16        TIMES 16
CNVTA    AR    RGZ,RGDEB          ADJUST DEB PTR
         USING DEBDASD-(DEBBASND-DEBBASIC),RGZ
         SRL   RGTTR,8            SHIFT OUT CONCAT# LEAVING 0TTR
         STC   RGTTR,SEEKR        SAVE R
         LA    RGDEB,0(RGDEB)     CLEAR HI BYTE                  S20076
         SRL   RGTTR,8            SHIFT OUT R LEAVING TT
CNVTB    SH    RGTTR,DEBNMTRK     DECREASE BY TRKS IN EXTENT
         BM    CNVTC              Q. PROPER EXTENT
         LA    RGZ,DEBDASIZ(RGZ)  GO TO NEXT EXTENT
         BCT   RGW,CNVTB          Q. STILL WITHIN DEB
         LA    R15,CNVTERR        SET ERROR CODE
         BR    RRET               RETURN
CNVTC    SR    RGV,RGW            DEVELOP M
         STC   RGV,SEEKM          STORE M
         MVC   SEEKBCH,DEBBINUM   MOVE BBCCHH FROM DEB
         AH    RGTTR,DEBNMTRK     ADD BACK OVERDRAW
         BZ    CNVTEND            IF ZERO, NO DIVIDE NEEDED
         BAL   RGW,CNVTDVC        PICK UP DEVICE CONSTANT
         USING DVCT,RGY
         LH    RGV,DVCTRK         GET TRACKS/ CYL
         LR    RGX,RGTTR          DIVIDE REG
         AH    RGX,DEBSTRHH       STARTING HH
         SR    RGW,RGW            CLEAR HIGH WORD
         DR    RGW,RGV            QUO=CYLS, REM=TRKS
         STC   RGW,SEEKHH+1       STORE H
         AH    RGX,DEBSTRCC       PLUS CC START
         STC   RGX,SEEKCC+1       STORE C
         SRA   RGX,8              SHIFT FOR HIGH C
         STC   RGX,SEEKCC         GET BYTE
CNVTEND  SR    R15,R15            SET NORMAL RETURN CODE
         BR    RRET               RETURN
*
***            PICKUP LOCATION OF APPROPRIATE DEVICE CONSTANTS
*
CNVTDVC  L     RGY,DEBDVMOD       CB ADDRESS
         USING UCB,RGY
         LA    RGX,DVCTYPMK       MASK
         N     RGX,UCBTYP         DEVICE TYPE CODE
         L     RGY,CVTPTR         GET CVT ADDR
         USING CVT,RGY
         L     RGY,CVTZDTAB       GET DEVICE TABLE
         USING DVCTI,RGY
         IC    RGX,DVCTIOFF(RGX)  GET DEVICE OFFSET
         AR    RGY,RGX            GET DEVICE ENTRY
         DROP  RGY
         BR    RGW                RETURN TO CALLER
         TITLE ' IGC018 - IEC0SCR1 - SECTOR CONVERT ROUTINE'
IEC0SCR1 CSECT
*
**********************************************************************
*
*        RELEASE 22 DELETIONS
*        RELEASE 21 DELETIONS
*        RELEASE 20 DELETIONS
*
* FUNCTION     THIS ROUTINE CONVERTS THE RECORD NUMBER OF A FIX-
*              ED OR VARIABLE LENGTH RECORD DATA SET INTO THE
*              CORRESPONDING SECTOR VALUE FOR USE WITH AN I/O
*              DEVICE HAVING THE ROTATIONAL POSITION SENSING
*              (RPS) FEATURE.
*
* INPUT FOR FIXED LENGTH RECORDS --
*            - REGISTER 0 IS LOADED WITH A FOUR-BYTE VALUE IN
*              THE FORM OF 'DDKR' WHERE 'DD' IS A TWO-BYTE FIELD
*              CONTAINING THE PHYSICAL BLOCK SIZE, 'K' IS A ONE
*              BYTE FIELD CONTAINING THE KEY LENGTH, AND 'R' IS
*              THE RECORD NUMBER FOR WHICH A SECTOR VALUE IS
*              DESIRED.
*            - REGISTER 2 CONTAINS THE ONE-BYTE UCB DEVICE TYPE
*              CODE (UCB + 19) IN THE HIGH ORDER BYTE, AND THE
*              REMAINING 3 BYTES ARE THE ADDRESS OF A ONE BYTE
*              AREA THAT IS TO RECEIVE THE SECTOR VALUE.
*            - REGISTER 14 CONTAINS THE ADDRESS TO WHICH CONTROL
*              IS TO BE RETURNED AFTER EXECUTION OF THE SECTOR
*              CONVERT ROUTINE.
*            - REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY
*              POINT TO THIS ROUTINE AND IS USED AS A BASE
*              REGISTER.
*       FOR VARIABLE LENGTH RECORDS --
*            - REGISTER 0 IS LOADED WITH A FOUR-BYTE VALUE IN THE
*              FORM OF BBIR, WHERE BB IS THE TOTAL NUMBER OF KEY
*              AND DATA BYTES UP TO BUT NOT INCLUDING THE TARGET
*              RECORD, I IS A ONE-BYTE KEY INDICATOR ( 1 FOR KEYED
*              RECORDS, 0 FOR NON-KEYED RECORDS), AND R IS THE SAME
*              AS FOR FIXED LENGTH RECORDS.  THE HIGH ORDER BIT OF
*              THIS REGISTER MUST BE TURNED ON TO INDICATE VLR.
*            - REGISTERS 2, 14, 15 ARE THE SAME AS FOR FIXED LENGTH
*              RECORDS.
*
* OUTPUT       THE SECTOR VALUE CORRESPONDING TO THE RECORD
*              NUMBER PASSED TO THE CONVERT ROUTINE IN THE LOW-
*              ORDER BYTE OF REGISTER 0 IS PLACED AT THE ADDRESS
*              INDICATED REGISTER 2.
*              REGISTERS 0,9,10, AND 11 ARE MODIFIED AND NOT RESTORED.
*
* EXIT         CONTROL IS RETURNED TO THE ADDRESS PASSED IN REG-
*              ISTER 14.
*
* ATTRIBUTES   REENTRANT
*
**********************************************************************
**********************************************************************
*        GENERAL REGISTER USAGE                                      *
**********************************************************************
*
RPAR1    EQU   0                  INPUT PARAMETER REG.
RPAR2    EQU   2                  INPUT PARAMETER REG.
RDVCT    EQU   9                  ADDR OF DEVICE ENTRY
RWK1     EQU   10                 WORK REGISTER
RWK2     EQU   11                 WORK REGISTER
RETRG    EQU   14                 POINTS TO PLACE OF RETURN
BASRG    EQU   15                 BASE REGISTER
         SPACE 3
**********************************************************************
*              SHIFT DISPLACEMENT EQUATES                            *
**********************************************************************
*
SHFT1    EQU   8                  NO. BITS FOR 1-BYTE SHIFT
SHFT2    EQU   16                 BITS FOR TWO-BYTE SHIFT
SHFT3    EQU   24                 NO. BITS FOR 3-BYTE SHIFT
SHFT4    EQU   32                 BITS FOR FOUR-BYTE SHIFT
         EJECT
**********************************************************************
*        CALCULATE EFFECTIVE BLOCK LENGTH                            *
**********************************************************************
*
         USING *,R15              ESTABLISH ADDRESSABILITY
         USING SECTAREA,RPAR2
         STC   RPAR1,SECTAREA     SAVE RECORD # IN SECTOR AREA
         CLI   SECTAREA,0         DOES R=0 ?
         BER   RRET               IF YES, RETURN
         LTR   RWK1,RPAR1         VARIABLE-LENGTH RECORDS ?
         BM    VLR                BRANCH IF YES
         SRDL  RWK1,SHFT2         PUT KEYLEN AND RECNO INTO RWK2
         SRL   RWK2,SHFT3         PUT K IN LOW ORDER BYTE
         AR    RWK1,RWK2          KEY LENGTH + DATA LENGTH
         SRDL  RWK1,SHFT4         CLEAR 1, PUT SUM IN 2
         IC    RWK1,SECTAREA      GET R
         BCTR  RWK1,0             SUBTRACT 1 FROM R
         MR    RWK1,RWK1          (R-1)*(KL+DL) INTO RWK2
*
**********************************************************************
*        CALCULATE NUMBER OF BYTES ON TRACK PRIOR TO RECORD 'R'      *
**********************************************************************
*
HERE     EQU   *
         LR    RWK1,RPAR1         PUT PARAM.S IN WORK REG.
         LR    RPAR1,RWK2         SAVE TOTAL SO FAR
         L     RWK2,CVTPTR        GET CVT ADDRESS
         USING CVT,RWK2
         L     RDVCT,CVTZDTAB     GET DCT INDEX TABLE ADDR
         USING DVCTI,RDVCT
         DROP  RWK2
         LR    RWK2,RPAR2
         SRL   RWK2,SHFT3         GET DEVICE CODE
         IC    RWK2,DVCTIOFF(RWK2) GET DCT INDEX BYTE
         AR    RDVCT,RWK2         GET DCT ENTRY ADDRESS
         USING DVCT,RDVCT
         SRDL  RWK1,SHFT2         SHIFT OUT K&R
         SRL   RWK2,SHFT3         PUT K IN LOW ORDER BYTE
         LR    RWK1,RWK2          PUT K IN RWK1 ALSO
         IC    RWK2,DVCOVNLB      GET BLOCK OVERHEAD
         TM    DVCFLAGS,DVC2BOV   IS THIS A TWO BYTE DEVICE
         BZ    ONEBYTE            BRANCH IF ONE BYTE
         LH    RWK2,DVCOVHD       GET BLOCK OVERHEAD
ONEBYTE  EQU   *
         LTR   RWK1,RWK1          KEYED RECORDS ?
         BP    KEYED              BRANCH IF YES
         IC    RWK1,DVCOVNK       GET SUBTRACTION FACTOR
         SR    RWK2,RWK1          SUBTRACT FOR NO KEY
KEYED    EQU   *
         IC    RWK1,SECTAREA      GET R
         BCTR  RWK1,0             SUBTRACT ONE FROM R
         MR    RWK1,RWK1          (R-1)(Y-K)
         AH    RWK2,DVCOVR0       ADD RECORD 0 OVERHEAD
         AR    RWK2,RPAR1         ADD BB OR K+DD
*
**********************************************************************
*        CALCULATE AND STORE THE SECTOR VALUE, RETURN                *
**********************************************************************
*
         IC    RWK1,DVCSECTD      GET NUMBER OF SECTORS
         MR    RWK1,RWK1          (#SECTORS)(TOTAL SO FAR)
         LH    RPAR1,DVCTRKLN     TRACK CAPACITY
         DR    RWK1,RPAR1         DIVIDE TOTAL BY TRACK CAP
         STC   RWK2,SECTAREA      STORE SECTOR
         BR    RETRG              RETURN
VLR      EQU   *
         SLL   RWK1,1             SHIFT OUT SIGN
         SRL   RWK1,SHFT2+1       SHIFT OUT I&R
         LR    RWK2,RWK1          MATCH REG. SETUP
         B     HERE
         DROP  R15,RPAR2,RDVCT
         EJECT
         TITLE ' IGC018 - DSECTS LOCAL TO THIS MODULE'
WORKAREA DSECT
***********************************************************************
*        THIS DSECT DESCRIBES THE AREA OBTAINED BY GETMAIN AS A WORK  *
*        AREA FOR THIS MODULE.                                        *
*        (FOR BRANCH ENTRY THE WORK AREA IS PASSED TO BLDL)           *
***********************************************************************
*
***            THE FIRST SECTION IS USED PRIMARILY TO READ
***            DIRECTORY BLOCKS BUT IS ALSO USED AS A SAVE AREA
*
RDAREA   DS    CL256              SPACE FOR ONE DIRECTORY BLOCK
         ORG   RDAREA             REDEFINE AS DIRECTORY BLOCK
PDBUSE   DS    H                  NUMBER OF BYTES USED IN BLOCK
PDBENT1  EQU   *                  START OF RIRST ENTRY
         ORG
*
***            THE NEXT SECTION CONTAINS THE CHANNEL PROGRAM
***            AND ASSOCIATED CONTROL FIELD
*
CLRSEG   DS    0C                 BEGINNING OF SEGMENT TO CLEAR
NEWCNT   DS    C'CCHHRKDD'        COUNT FIELD READ
*
CCW      DS    0D                 CHANNEL PROGRAM
CCW1     DS    D                  SID=   CCHHR(5)
CCW2     DS    D                  TIC    CCW1
CCW3     DS    D                  RC(MT) NEWCNT(8)
CCW4     DS    D                  SKH=   MEMBER(8)
         ORG   CCW4
         DS    C                  OP CODE
CCWKEYPT DS    AL3                USER MEMBER NAME PTR
         ORG
CCW5     DS    D                  TIC    CCW3
CCW6     DS    D                  RD     RDAREA(256)
*
***            THE FOLLOWING WORD CONTAINS FLAGS AND STATUS
***            INFORMATION CONTROLLING THE PROCESSING OF BLDL
*
ERCODE   DS    XL1                RETURN CODE TO BE SET
ERRNAME  EQU   4                  NAME NOT FOUND IN DIRECTORY
CONCAT#  DS    FL1                CONCAT NUMBER CURRENTLY SEARCHING
LIB      DS    FL1                TYPE OF LIBRARY NOW SEARCHING
USERLIB  EQU   0                  USER LIBRARY
LINKSVC  EQU   1                  SYSTEM LINK LIBRARY
JOBLIB   EQU   2                  USER JOB LIBRARY OR STEP LIBRARY
NOLIB    EQU   3                  LINK AND JOB/STEP ALREADY SEARCHED
TASKLIB  EQU   X'22'              TASKLIB FLAG                @ZA26444
*
***            THE NEXT SECTION CONTAINS THE IOB AND ECB FOR EXCP
*
ECB      DS    F
COMPLETE EQU   X'40'              POSTED COMPLETE BY IOS
NORMAL   EQU   X'20'              ON IF NO ERRORS ON I/O
         SPACE
         ORG   *-16               DO NOT USE IOB PREFIX
*        IEZIOB DSECT=NO          MACRO GENERATED WITH PRINT NOGEN
         PRINT NOGEN
         IEZIOB DSECT=NO
         PRINT GEN
         ORG   IOBCC              REDEFINE PART OF SEEK FIELD
CCHHR    DS    C'CCHHR'
*
***            THE FOLLOWING SECTION IS USED BY FIND TO BUILD
***            A PARAMETER LIST WHICH WILL BE INPUT TO BLDL
*
FNDLST1  DS    F                  COUNT AND LENGTH FIELDS
FNDLST2  DS    CL8                MEMBER NAME
FNDLST3  DS    F                  SPACE FOR TTR
FNDENTSZ EQU   *-FNDLST2          SIZE OF FIND'S BLDL LIST      YM01287
*
WORKSZ   EQU   *-WORKAREA
         EJECT
SEEKA    DSECT
***********************************************************************
*        THIS DSECT DESCRIBES THE 8 BYTE IOS SEEK FIELD (MBBCCHHR)    *
***********************************************************************
SEEKM    DS    XL1                EXTENT NUMBER
SEEKBCH  DS    0XL6               BIN, CYL, AND HEAD NR.
SEEKBB   DS    XL2                BIN NUMBER
SEEKCC   DS    XL2                CYLINDER NUMBER
SEEKHH   DS    XL2                HEAD NUMBER
SEEKR    DS    X                  RECORD NUMBER
         SPACE 3
BLDLIST  DSECT
***********************************************************************
*        THIS DSECT DESCRIBES THE HEADER PORTION OF A BLDL PARM LIST  *
***********************************************************************
BLDENTS  DS    H                  NUMBER OF ENTRIES IN BLDL LIST
BLDELEN  DS    H                  LENGTH OF EACH ENTRY
BLDHDSZ  EQU   *-BLDLIST          LENGTH OF HEADER
BLDENT   DS    0C                 OFFSET TO FIRST ENTRY
         SPACE 3
FINDLIST DSECT
***********************************************************************
*        PARAMETER LIST FOR FIND                                      *
***********************************************************************
FINDNAME DS    CL8                MEMBER NAME FOR FIND
         SPACE 3
TCBPTRS  DSECT
***********************************************************************
*        THIS DSECT DESCRIBES THE TCB POINTERS BLOCK                  *
*        THIS BLOCK IS FOUND THROUGH CVTTCBP                          *
***********************************************************************
TCBPTRN  DS    A                  NEXT TCB TO DISPATCH
TCBPTRC  DS    A                  CURRENT TCB
         SPACE 3
RESTAB   DSECT
***********************************************************************
*        THIS DSECT DESCRIBES THE HEADER PORTION OF A RESIDENT TABLE  *
*        THE SVC AND LINK RESIDENT TABLES ARE LOCATED THROUGH         *
*        ADDRESSES PLACED IN BLDL (IEARESBS AND IEARESBL) DURING NIP  *
***********************************************************************
RESNUM   DS    H                  NUMBER OF ENTRIES IN TABLE
RESELEN  DS    H                  LENGTH OF EACH ENTRY
RESENT1  DS    0C                 START OF FIRST ENTRY
         SPACE 3
RESENT   DSECT
***********************************************************************
*        THIS DSECT DESCRIBES AN ENTRY IN THE RESIDENT TABLE          *
***********************************************************************
RESNAME  DS    CL8                MEMBER NAME
RESDATA  DS    0C                 BEGINNING OF DATA AREA
RESTT    DS    H                  TRACK NUMBER OF FIRST BLOCK
RESREC   DS    C                  RECORD NUMBER ON TRACK OF FIRST BLOCK
         SPACE 3
SECTOR   DSECT
***********************************************************************
*        DSECT OF PARAMETER PASSED TO SECTOR CONVERT ROUTINE          *
***********************************************************************
SECTAREA DS    C                  ONE BYTE SECTOR NUMBER
         SPACE 3
***********************************************************************
DUMMY    DSECT ,                  USED ONLY TO FORCE REGISTER XREF
         TITLE ' IGC018 - DSECTS INVOKED FROM MACLIB'
         CVT   DSECT=YES
         EJECT
         DCBD  DSORG=PS,DEVD=DA
         EJECT
         IEZDEB
         EJECT
         IHARB
         EJECT
         IKJTCB
         EJECT
***********************************************************************
*        THE FOLLOWING DEFINITIONS ARE ADDED LOCALLY TO THE DSECT     *
*        THEY SHOULD BE REMOVED WHEN THE CORRESPONDING FUNCTIONS      *
*        HAVE BEEN INCLUDED IN THE MAPPING MACRO                      *
***********************************************************************
DEBDASD  DSECT                    RESUME END OF DSECT IN MACRO
DEBDASIZ EQU   *-DEBDASD          LENGTH OF DASD EXTENSION
DEBPOCAT EQU   BIT7               IN DEBOFLGS--OPENED TYPORG=PO,
*                                 AND CONCATENATED
*
*        THIS DSECT MAPS IGC018'S USE OF THE EXTENDED SAVE AREA
*
RBPRFX   DSECT
         ORG   RBEXSAVE
EXSKEY   DS    FL1                KEY OF CALLER
EXSFLG   DS    X                  FLAG BYTE
EXSSYDCB EQU   X'80'              USING SYSTEM DCB
EXSGTM   EQU   X'40'              WORK AREA STILL HELD
EXSBLDL  EQU   X'20'              BLDL BEING PROCESSED NOT FIND
EXSYNCH  EQU   X'10'              IN SYNCHED ROUTINE
         DS    XL2                UNUSED
EXSWKAD  DS    A                  WORKAREA ADDRESS
EXSRET   DS    A                  RETURN ADDRESS
EXSBASE  DS    A                  BASE SAVED IF SYNCH PERFORMED  Y02072
EXSRG2   DS    1F                 SAVE REG 2 DURING IECPCNVT     Y02072
EXSSAVE  DS    7F                 REG SAVE AREA DURING CCW RELOC Y02072
*                                 AND IECPCNVT                   Y02072
         ORG   EXSSAVE                                           Y02072
EXSESTAE ESTAE EXITRTN,RECORD=YES,MF=L ESTAEL LIST IN RB         Y02072
EXSELEN  EQU   *-EXSESTAE                                        Y02072
         EJECT
         IHADVCT
         EJECT
         IHAPDS
         SPACE 2
***********************************************************************
*        THE FOLLOWING DEFINITIONS ARE ADDED LOCALLY TO THE DSECT     *
*        THEY SHOULD BE REMOVED WHEN THE CORRESPONDING FUNCTIONS      *
*        HAVE BEEN INCLUDED IN THE MAPPING MACRO                      *
***********************************************************************
PDS2MIN  EQU   PDS2LIBF-PDS2      MINIMUM ALLOWABLE USER LENGTH
         EJECT
***********************************************************************
*        THE FOLLOWING DSECT IS LOCAL TO THIS MODULE,                 *
*        BUT APPEARS HERE SINCE IT IS DEPENDENT ON IHAPDS.            *
*        IHAPDS CAN BE MADE TO EXPAND IN THE DIRECTORY ENTRY FORM     *
*        (WITHOUT BYTES ADDED BY BLDL), BUT LABELS IN THE TWO         *
*        EXPANSIONS CONFLICT, SO THAY CANNOT BOTH BE USED.            *
***********************************************************************
*
PDS1     DSECT ,                  DIRECTORY ENTRY WITHOUT BLDL BYTES
PDS1NAME DS    CL(L'PDS2NAME)     MEMBER NAME
PDS1TTRP DS    0CL(L'PDS2TTRP)    FIRST BLOCK TTR
PDS1TT   DS    H                  TRACK NUMBER
PDS1REC  DS    FL1                RECORD NUMBER
PDS1INDC DS    B                  INDICATOR BYTE
PDS1USRD DS    0C                 START OF USER DATA
         EJECT
         IHASDWA
         EJECT
UCB      DSECT
         IEFUCBOB
         END
