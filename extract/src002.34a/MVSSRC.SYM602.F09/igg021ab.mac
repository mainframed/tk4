         TITLE 'IGG021AB - THIRD LOAD OF BPAM STOW ROUTINE'
IGG021AB CSECT
         SPACE
***********************************************************************
*                                                                     *
* MODULE NAME = IGG021AB                                              *
*                                                                     *
* DESCRIPTIVE NAME = THIRD LOAD OF BPAM STOW ROUTINE                  *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE VS2-4, DATE OF LAST CHANGE 6/28/76                 *
*                                                                     *
*                                                                     *
* FUNCTION = MAINTAINS PARTITIONED DATA SET DIRECTORIES IN ASCENDING  *
*            ORDER OF THE BINARY VALUES OF THE NAMES OF THE MEMBERS.  *
*            THIS IS ACCOMPLISHED BY ADDING, REPLACING, CHANGING THE  *
*            NAME OF, OR DELETING DIRECTORY ENTRIES.  IF THE FUNCTION *
*            REQUESTED IS ADD, REPLACE, OR CHANGE, AND IF THERE ARE   *
*            NO UNUSED DIRECTORY BLOCKS, THEN A DRY RUN WILL BE MADE  *
*            AGAINST THE DIRECTORY TO DETERMINE IF SUFFICIENT SPACE   *
*            IS AVAILABLE IN WHICH TO PERFORM THE REQUESTED FUNCTION. *
*            FOLLOWING THE DRY RUN, OR IN THE CASE WHERE A DRY RUN IS *
*            NOT REQUIRED, THE DIRECTORY WILL BE ALTERED BY EXPANDING *
*            AND/OR COMPRESSING THE DIRECTORY IN ORDER TO PERFORM THE *
*            THE REQUESTED FUNCTION.                                  *
*                                                                     *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = CHARACTER CODE DEPENDENCY - THIS MODULE IS DEPEN- *
*                   DENT ON THE FOLLOWING EBCDIC CHARACTERS:          *
*                   X'FFFFFFFF' - INDICATES THE LAST ENTRY IN A       *
*                   DIRECTORY.                                        *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE REGISTER EQUATES BELOW                *
*                                                                     *
*    PATCH LABEL = PATCH                                              *
*                                                                     *
*                                                                     *
* MODULE TYPE = SVC ROUTINE                                           *
*                                                                     *
*    ATTRIBUTES = REENTRANT, ENABLED, PRIVILEGED, ENTERED IN          *
*                 SUPERVISOR KEY AND ISSUES A MODESET TO RUN IN THE   *
*                 CALLER'S KEY.                                       *
*                                                                     *
*                                                                     *
* ENTRY POINT = IGG021AB                                              *
*                                                                     *
*    LINKAGE = THIS ROUTINE RECEIVES CONTROL VIA A BRANCH FROM THE    *
*              SECOND LOAD OF STOW - IGG0210A.                        *
*                                                                     *
*    INPUT = THE FOLLOWING PARAMETERS ARE PASSED WHEN CONTROL IS      *
*            RECEIVED AS DESCRIBED ABOVE:                             *
*            REGISTER 10 - CONTAINS THE ADDRESS OF STOW'S WORK AREA.  *
*            REGISTER 11 - CONTAINS THE ADDRESS OF THE USER'S DCB.    *
*                                                                     *
*    OUTPUT = REGISTER 0  - CONTAINS THE REASON CODE.                 *
*             REGISTER 15 - CONTAINS THE RETURN CODE.                 *
*                                                                     *
*    EXITS-NORMAL = RETURNS TO THE CALLER VIA A BR 14 WITH REASON     *
*                   CODE REGISTER 0 AND RETURN CODE REGISTER 15       *
*                   CONTAINING THE FOLLOWING:                         *
*                   REG 0   REG 15             CONDITION              *
*                     0        0  - INDICATES NORMAL COMPLETION OF    *
*                                   THE CALLER'S REQUEST.             *
*                     0        8  - INDICATES THAT THE ENTRY TO BE    *
*                                   REPLACED COULD NOT BE FOUND, BUT  *
*                                   HAS BEEN ADDED TO THE DIRECTORY.  *
*                                                                     *
*    EXITS-ERROR = RETURNS TO THE CALLER VIA A BR 14 WITH REASON CODE *
*                  REGISTER 0 AND RETURN CODE REGISTER 15 CONTAINING  *
*                  THE FOLLOWING:                                     *
*                  REG 0   REG 15              CONDITION              *
*                    0       12  - INDICATES THERE IS NOT SUFFICIENT  *
*                                  SPACE REMAINING IN THE DIRECTORY   *
*                                  TO PERFORM THE ADD, REPLACE, OR    *
*                                  CHANGE FUNCTION REQUESTED.         *
*                    1       16  - INDICATES AN I/O ERROR OCCURED     *
*                                  WHILE WRITING OR READING DIRECTORY *
*                                  BLOCKS.                            *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = EXCP(SVC 0) AND WAIT(SVC 1) - ARE USED TO PERFORM I/O *
*               OPERATIONS.                                           *
*                                                                     *
*               FREEMAIN(SVC 10) - IS USED TO FREE STOW'S WORK AREA   *
*               PRIOR TO EITHER A NORMAL OR AN ERROR EXIT.            *
*                                                                     *
*               MODESET - USED TO CHANGE THE STORAGE PROTECT KEY.     *
*                                                                     *
*    DATA AREAS = NONE                                                *
*                                                                     *
*    CONTROL BLOCKS = CVT,DCB,DEB,ECB,IOB,SVRB,TCB                    *
*                                                                     *
*                                                                     *
* TABLES = THIS MODULE USES THE STOW WORK AREA, THE FORMAT AND        *
*          CONTENTS OF WHICH ARE DESCRIBED IN THE DSECT AT THE END OF *
*          THE LISTING.                                               *
*                                                                     *
*                                                                     *
* MACROS = ACTION MACROS - EXCP,WAIT,FREEMAIN,MODESET                 *
*                                                                     *
*          MAPPING MACROS - CVT,DCBD,IEZDEB,IHAPDS,IHAPSA,IHARB,      *
*             IKJTCB,IGGSTW                                           *
*                                                                     *
*                                                                     *
* CHANGE ACTIVITY = AS FOLLOWS:                                       *
*                                                                     *
*          RELEASE 21 DELETIONS                                       *
*    THIS MODULE IS NEW FOR RELEASE 21.  THE FOLLOWING APARS WERE     *
*    CORRECTED.  28169, 33374, 35322, 42484, AND 43923.               *
*                                                                 M1088
*          RELEASE 21.8 CHANGES/DELETIONS                             *
*A515500-515900,538500-538600,552500-552940                     SA66881
*D539000                                                        SA66881
*A297500-297600,397500-397600,474500-474992                     SA72739
*          VS1 RELEASE 01 DELETIONS                                   *
*                                                                XM5415
*          VS1 RELEASE 02 DELETIONS                                   *
*                                                               OX00801
*          VS1 RELEASE 03 DELETIONS                                   *
* SEE CODE FLAGGED SA66881 FOR VS1 APAR XA03384                 XA03384
* SEE CODE FLAGGED YA06505 FOR VS1 APAR XA06889                 XA06889
*                                                               XA02065
*          VS2 RELEASE 01 DELETIONS                                   *
*                                                                YM0943
*C158500                                                        YA06505
*A158600-159600,379500-379800,419500-419800,434500-434800,      YA06505
*A449800-449993,540600-540984,133100                            YA06505
*D449800-450332                                                 YA06505
*          VS2 RELEASE 02 DELETIONS                                   *
*D001500,005500,007600,118700,119500,134000,507000-508000,       Y02072
*D668000-831000                                                  Y02072
*          VS2 RELEASE 03 CHANGES/DELETIONS
* SEE CODE FLAGGED YA06505/SA72739 AND ZA01548(IGGSTOW MACRO)   ZA01548
*          VS2 RELEASE 04 CHANGES/DELETIONS
*A218500-218700,221500,488500-488700                           @ZA02261
*A270300-270800,323300-323800                                  @ZA08321
*A449500-449620,667005-667015  OS77114,OX13215,OY12725,OZ10222 @ZA10229
*                                                                     *
*A651000-651200,651600                                         @ZA12202
*C667015                                                       @ZA12202
***********************************************************************
         EJECT
***********************************************************************
****                                                               ****
****     REGISTER EQUATES                                          ****
****                                                               ****
***********************************************************************
         SPACE
R0       EQU   0                        WORK/PARAMETER REGISTER
R1       EQU   1                        WORK/PARAMETER REGISTER
RWORK1   EQU   R1                       WORK REGISTER
R2       EQU   2                        WORK REGISTER
RIBFR    EQU   R2                       POINTER TO INPUT BFR
R3       EQU   3                        WORK REGISTER
RMOVE    EQU   R3                       PTR TO NEXT ELEMENT TO BE MOVED
R4       EQU   4                        WORK REGISTER
REMAIN   EQU   R4                       AMOUNT OF DATA IN INPUT BFR
R5       EQU   5                        WORK REGISTER
ROBFR    EQU   R5                       POINTER TO OUTPUT BFR
R6       EQU   6                        WORK REGISTER
RFILL    EQU   R6                       PTR TO NEXT SPACE IN OUTPUT BFR
R7       EQU   7                        WORK REGISTER
RSPACE   EQU   R7                       UNUSED SPACE IN OUTPUT BFR
R8       EQU   8                        WORK REGISTER
RSIZE    EQU   R8                       AMOUNT OF DATA TO BE MOVED
REASONCD EQU   RSIZE                    ERROR REASON CODE        Y02072
R9       EQU   9                        WORK REGISTER
RWORK2   EQU   R9                       WORK REGISTER
RRETCODE EQU   RWORK2                   USED TO PASS RETURN CODE TO
*                                       ERROR ROUTINE
RAREA    EQU   10                       POINTER TO WORK AREA
RDCB     EQU   11                       POINTER TO THE USER'S DCB
RBASE    EQU   12                       BASE REGISTER
R13      EQU   13                       WORK REGISTER
REXCPRET EQU   R13                      RETURN REG FROM EXCP ROUTINE
RCALCRET EQU   REXCPRET                 RETURN REG FROM CALC RTN
R14      EQU   14                       RETURN ADDR/WORK REGISTER
RMOVERET EQU   R14                      RETURN REG FROM MOVE RTN
RREADRET EQU   RMOVERET                 RETURN REG FROM WR1RD1 RTN
R15      EQU   15                       RETURN CODE/WORK REGISTER
RMOVESZ  EQU   R15                      INPUT LENGTH FOR MOVE RTN
         EJECT
***********************************************************************
****                                                               ****
****     MASKS, DISPLACEMENTS, AND OTHER EQUATES                   ****
****                                                               ****
***********************************************************************
         SPACE
RCDZERO  EQU   X'00'                    USED TO INDICATE RECORD ZERO
NOTLAST  EQU   X'00'                    USED TO CHK STATUS OF DIRECTORY
UNITEXPT EQU   X'01'                    MASK FOR UNIT EXCEPTION
NOROOM   EQU   X'0C'                    NO ROOM IN DIRECTORY ERROR CODE
IOERROR  EQU   X'10'                    I/O ERROR CODE
STOWPERF EQU   X'80'                    USED TO INDICATE STOW    M1088
*                                       HAS BEEN PERFORMED       M1088
DIRECTRY EQU   1                        IND I/O ERROR ENCOUNTER- Y02072
*                                       ED IN THE DIRECTORY      Y02072
OFF      EQU   X'FF'                    ALL-FLAGS-ON MASK       YA06505
         EJECT
****
****     ESTABLISH ADDRESSABILITY
****
         BALR  RBASE,0                  INITIALIZE BASE REGISTER
         USING *,RBASE                  ESTABLISH ADDRESSABILITY
         USING STWAREA,RAREA            ESTABLISH WORK AREA BASE REG
         USING IHADCB,RDCB              ESTABLISH DCB BASE REGISTER
         SPACE 2
****
****     IF THE FIRST LOAD HAS OVERLAID THE TWO DIRECTORY BLOCKS WHICH
****     CONTAIN THE ONLY OR LOWER OF TWO ARGUMENTS, THEY MUST BE
****     RE-READ AT THIS TIME.
****
         TM    STWFLAG1,STWFLOW         HAS FIRST LOAD OVERLAID FIRST
*                                       DIRECTORY BLOCKS READ
         BNO   INITPTRS                 NO, GO TO INIT BUFFER POINTERS
         SPACE 2
****
****     RE-READ ORIGINAL DIRECTORY BLOCKS.
****
INITBFRS EQU   *
         NI    STWFLAG1,OFF-STWFLOW-STWMERGE    RE-SET FUNCTION YA06505
*                                       FLOW/MERGE INDICATORS   YA06505
         MVI   STWRDFL3,0               TURN OFF COMMAND CHAIN  YA06505
*                                       AND SKIP IF MERGE OCCUR YA06505
         LA    RWORK1,STWINCP           GET ADDR OF BUFFER INITIALI-
*                                       ZATION CHANNEL PROGRAM
         ST    RWORK1,IOBSTART          SET UP CHANNEL PROG ADDR IN IOB
         L     RWORK1,DCBDEBAD          GET ADDR OF CALLERS DEB  Y02072
         USING DEBBASIC,RWORK1          ESTABLISH DEB BASE REGISTER
         MVC   IOBCC(L'IOBCC+L'IOBHH),DEBBASND+(DEBSTRCC-DEBDASD)
*                                       GET DATA SET STARTING CCHH
*                                       FROM THE DEB
         MVI   IOBR,RCDZERO             SET SEARCH TO BEGIN AT RECORD 0
         DROP  RWORK1                   DROP DEB BASE REGISTER
         MVC   STWKYAD1,STWPARM+1       SET KEY TO READ ORIGINAL BLOCKS
         BAL   REXCPRET,EXCP            GO ISSUE EXCP
         SPACE 2
****
****     INITIALIZE INPUT BUFFER, OUTPUT BUFFER, AND CHANNEL PROGRAM
****     POINTERS.
****
INITPTRS EQU   *
         LA    RIBFR,STWBUF1            INIT INPUT PTR TO FIRST BUFFER
         LA    RWORK1,STWBUF2           GET ADDRESS OF SECOND BUFFER
         LA    ROBFR,STWBUF3            INIT OUTPUT PTR TO THIRD BFR
         USING BUFFER,ROBFR             ESTABLISH BASE FOR THIRD BUFFER
         ST    RIBFR,BUFADDR            CHAIN FIRST BUFFER TO THIRD
         DROP  ROBFR                    DROP THIRD BUFFER BASE REG
         USING BUFFER,RWORK1            ESTABLISH BASE FOR SECOND BFR
         ST    ROBFR,BUFADDR            CHAIN THIRD BUFFER TO SECOND
         DROP  RWORK1                   DROP SECOND BUFFER BASE REG
         USING BUFFER,RIBFR             ESTABLISH INPUT BFR BASE REG
         ST    RWORK1,BUFADDR           CHAIN SECOND BUFFER TO FIRST
         LH    RWORK2,STWOFFLW          GET OFFSET TO ADD OR DELETE
*                                       POSITION WITHIN INPUT BUFFER
         AR    RWORK2,RIBFR             CALC ADDRESS OF SAME
         LH    REMAIN,BUFN              GET USED SPACE IN INPUT BLOCK
         SH    REMAIN,COUNTSZ           CALCULATE SIZE OF ENTRIES
         LA    RWORK1,STWWRDCP          GET ADDR OF WRITE/READ CHANNEL
*                                       PROGRAM
         ST    RWORK1,IOBSTART          SET UP CHANNEL PROG ADDR IN IOB
         SPACE 2
****
****     MOVE THE DIRECTORY ENTRIES PRECEDING THE ADD OR DELETE
****     LOCATION TO THE OUTPUT BUFFER.
****
         LA    RMOVE,BUFENTRY           INIT MOVE POINTER TO THE FIRST
*                                       ENTRY IN THE INPUT BUFFER
         LR    RMOVESZ,RWORK2           CALCULATE SIZE OF ENTRIES PRE-
         SR    RMOVESZ,RMOVE            CEDING THE ADD LOCATION
         DROP  RIBFR                    DROP INPUT BFR BASE REG
         USING BUFFER,ROBFR             ESTABLISH OUTPUT BFR BASE REG
         LA    RFILL,BUFENTRY           INIT FILL PTR WITHIN OUTPUT BFR
         MVC   BUFCNT,BUFCNT-BUFFER(RIBFR)  MOVE COUNT FIELD TO
*                                       OUTPUT BUFFER
         LA    RSPACE,L'BUFENTRY        INIT UNUSED SPACE IN OUTPUT BFR
         BAL   RMOVERET,MOVEMANY        MOVE ENTRIES TO OUTPUT BFR
         DROP  ROBFR                    DROP OUTPUT BFR BASE REG
         SPACE 2
****
****     DETERMINE THE FUNCTION TO BE PERFORMED.
****
         TM    STWFLAG1,STWADD+STWREPL+STWCHNG   IS FUNCTION DELETE
         BZ    DELETE                   YES, GO DO DELETE
         TM    DCBMACF1,DCBMRECP        TEST FOR EXCP          @ZA02261
         BO    NOEXCP                   YES,BYPASS CHECK ON    @ZA02261
*                                       DIRECTORY BLOCK        @ZA02261
         CLI   DCBDIRCT+1,NOTLAST       ARE THERE ANY ENTRIES IN THE
*                                       LAST DIRECTORY BLOCK
         BE    ADDCHECK                 NO, NO NEED FOR A DRY RUN
NOEXCP   EQU   *                                               @ZA02261
         XI    STWFLAG1,STWDRYRN        SET DRY RUN SWITCH
         SPACE
ADDCHECK EQU   *
         TM    STWFLAG1,STWADD+STWREPL  IS FUNCTION ADD, ADD-DELETE
*                                       CHANGE, OR REPLACE
         BZ    DELETE                   NO, GO DO DELETE-ADD CHANGE
         SPACE 2
****
****     PERFORM INITIALIZATION FOR ADD, ADD-DELETE CHANGE, AND REPLACE
****     FUNCTIONS.  ALSO DETERMINE WHETHER THE ENTRY TO BE ADDED WILL
****     FIT IN THE FIRST OUTPUT BLOCK.
****
         TM    STWFLAG1,STWREPL         IS FUNCTION REPLACE
         BNO   FITCHK                   NO, GO CHECK NEW ENTRY FIT
         BAL   RCALCRET,CALCSIZE        GO CALC SIZE OF REPLACED ENTRY
         SR    REMAIN,RSIZE             DECR AMOUNT IN INPUT BUFFER
         LA    RWORK2,0(RSIZE,RWORK2)   INCR REMAINING ENTRIES POINTER
*                                       PAST ENTRY BEING REPLACED
         SPACE
FITCHK   EQU   *
         LA    RMOVE,STWNEWNM           POINT TO ENTRY TO BE ADDED
         BAL   RCALCRET,CALCSIZE        GO CALC SIZE OF NEW ENTRY
         LA    REMAIN,0(RSIZE,REMAIN)   ADD NEW ENTRY SIZE TO AMOUNT
*                                       OF DATA IN THE INPUT BUFFER
         TM    STWFLAG1,STWCHNG+STWDEL  IS FUNCTION DELETE-ADD CHANGE
         BO    ADD                      YES, BYPASS DRY RUN AND FIT CHK
         TM    STWFLAG1,STWDRYRN        IS THIS A DRY RUN
         BNO   ADD                      NO, GO TO ADD NEW ENTRY
         CR    REMAIN,RSPACE            CAN NEW ENTRY BE ADDED TO FIRST
*                                       INPUT BLOCK
         BH    ADD                      NO, GO TO BEGIN MOVING DATA
         NI    STWFLAG1,X'FF'-STWDRYRN  TURN OFF DRY RUN SWITCH
         SPACE 2
****
****     IF SPACE IS AVAILABLE, MOVE THE ENTRY TO BE ADDED INTO THE
****     CURRENT OUTPUT BUFFER.  OTHERWISE, WRITE THE OUTPUT BUFFER,
****     READ IN ANOTHER BLOCK, AND CONSTRUCT A NEW OUTPUT BUFFER AND
****     MOVE THE ENTRY TO BE ADDED INTO IT.
****
ADD      EQU   *
         LR    RMOVESZ,RSIZE            AMOUNT OF DATA TO BE MOVED
         BAL   RMOVERET,MOVEONE         MOVE NEW ENTRY TO OUTPUT BFR
         LTR   RMOVESZ,RMOVESZ          WAS MOVE SUCCESSFUL
         BZ    MOVEREST                 YES, CONT FILLING OUTPUT BFR
         TM    IOBCSW+3,UNITEXPT        DID UNIT EXCEPTION OCCUR FOR
*                                       LAST READ ISSUED
         BO    NOTROOM                  YES, IND NO ROOM IN DIRECTORY
         BAL   RREADRET,WR1RD1          GO WRITE OUTPUT BFR AND READ
*                                       ANOTHER BLOCK INTO IT
         TM    STWFLAG1,STWMERGE        DID MERGE 2 BLKS OCCUR @ZA08321
         BO    ADD                      YES - BYPASS SET UP OF @ZA08321
*                                       COUNT FIELD            @ZA08321
         USING BUFFER,ROBFR             ESTABLISH OUTPUT BFR BASE REG
         L     RWORK1,BUFADDR           GET ADDR OF NEXT BLOCK READ
         MVC   BUFCNT,BUFCNT-BUFFER(RWORK1)  SET UP COUNT FIELD FOR
*                                       NEXT WRITE
         B     ADD                      MOVE NEW ENTRY INTO OUTPUT BFR
         SPACE 2
****
****     MOVE THE ENTRIES REMAINING IN THE INPUT BUFFER, WHICH FOLLOW
****     THE ADD OR REPLACE LOCATION, TO THE OUTPUT BUFFER.
****
MOVEREST EQU   *
         LR    RMOVE,RWORK2             RESTORE MOVE POINTER TO ENTRIES
*                                       FOLLOWING THE ADD OR REPL LOC
         B     EXPAND                   BR TO COMPLETE DIRECTORY
         SPACE 2
****
****     EXPAND THE DIRECTORY TO COMPENSATE FOR THE ENTRY JUST ADDED.
****
BYPASS   EQU   *
         LA    RMOVE,0(RSIZE,RMOVE)     INCR MOVE PTR PAST ENTRY TO BE
*                                       DELETED FOR ADD-DELETE CHANGE
         SR    REMAIN,RSIZE             DECR DATA REMAINING BY DELETED
*                                       ENTRY SIZE
         OI    STWFLAG1,STWFLOW         IND CHANGE SWITCH PERFORMED
         SPACE
EXPAND   EQU   *
         LTR   REMAIN,REMAIN            ANY MORE ENTRIES IN INPUT BFR
         BM    BADDIR                   SOMETHINGS WRONG WITH   SA72739
*                                       DIRECTORY - GET OUT     SA72739
         BZ    ADDENDCK                 NO, GO CHK IF BOTH BFRS HAVE
*                                       BEEN PROCESSED
         BAL   RCALCRET,CALCSIZE        GET SIZE OF NEXT ENTRY
         SPACE
CHKDELET EQU   *                                                XA02065
         TM    STWFLAG1,STWCHNG+STWADD  IS FUNCTION ADD-DELETE CHANGE
         BNO   MOVENTRY                 NO, GO TO MOVE ENTRY
         USING PDS2,RMOVE               ESTABLISH ENTRY BASE REGISTER
         CLC   PDS2NAME,STWOLDNM        IS THIS ENTRY TO BE DELETED
         BE    BYPASS                   YES, GO TO GET NEXT ENTRY
         DROP  RMOVE                    DROP ENTRY BASE REGISTER
         SPACE
MOVENTRY EQU   *
         LR    RMOVESZ,RSIZE            SIZE OF ENTRY TO BE MOVED
         BAL   RMOVERET,MOVEONE         GO MOVE ENTRY INTO OUTPUT BFR
         LTR   RMOVESZ,RMOVESZ          WAS MOVE SUCCESSFUL
         BZ    EXPAND                   YES, GO GET NEXT ENTRY
         SPACE 2
****
****     WRITE COMPLETED OUTPUT BUFFER AND READ IN ANOTHER DIRECTORY
****     BLOCK.
****
         TM    IOBCSW+3,UNITEXPT        DID UNIT EXCEPTION OCCUR FOR
*                                       LAST READ ISSUED
         BO    NOTROOM                  YES, IND NO ROOM IN DIRECTORY
         SPACE
CONTADD  EQU   *
         BAL   R14,WR1RD1               GO TO WRITE/READ ROUTINE
         TM    STWFLAG1,STWMERGE        DID 2 BLKS MERGE OCCUR @ZA08321
         BO    CHKDELET                 YES - BYPASS SET UP OF @ZA08321
*                                       COUNT FIELD            @ZA08321
         L     RWORK1,BUFADDR           GET ADDR OF NEXT BLOCK READ
         MVC   BUFCNT,BUFCNT-BUFFER(RWORK1)  SET UP COUNT FIELD FOR
*                                       NEXT WRITE
         B     CHKDELET                 GO CHK ENTRY FOR DELETE XA02065
         SPACE 2
****
****     DETERMINE IF THE NEXT TO THE LAST BLOCK READ HAS BEEN
****     PROCESSED.
****
ADDENDCK EQU   *
         CLC   BUFKEY,HIGHKEY           HAS LAST ENTRY BEEN PROCESSED
         BNE   BFRCHECK                 NO, GO TO CHECK INPUT BFRS
         TM    STWFLAG1,STWDRYRN        IS THIS A DRY RUN
         BO    INITBFRS                 YES, GO TO END DRY RUN
         B     UPDTEDCB                 GO TO UPDATE DCBDIRCT FIELD
         SPACE
BFRCHECK EQU   *
         LR    RWORK1,RIBFR             SAVE PTR FOR LATER COMPARISON
         DROP  ROBFR                    DROP OUTPUT BUFFER BASE REG
         USING BUFFER,RIBFR             ESTABLISH INPUT BUFFER BASE REG
         L     RIBFR,BUFADDR            GET ADDR OF NEXT BLOCK READ
         LH    REMAIN,BUFN              GET USED SPACE IN INPUT BLOCK
         SH    REMAIN,COUNTSZ           CALCULATE SIZE OF ENTRIES
         LA    RMOVE,BUFENTRY           INIT MOVE PTR TO FIRST ENTRY
         CR    RWORK1,ROBFR             HAS NEXT TO LAST BLOCK READ
*                                       BEEN PROCESSED
         BE    EXPAND                   NO, CONT EXPANDING DIRECTORY
         SPACE 2
****
****     IF THIS IS A DRY RUN, RETURN TO THE BEGINNING OF THE PROGRAM
****     TO MAKE THE ALTERATION RUN ON THE DIRECTORY.
****
         TM    STWFLAG1,STWDRYRN        IS THIS A DRY RUN
         BO    INITBFRS                 YES, GO TO END DRY RUN
         SPACE 2
****
****     DETERMINE IF THE DELETE FUNCTION REMAINS TO BE PERFORMED FOR
****     ADD-DELETE CHANGE.
****
DELETECK EQU   *
         TM    STWFLAG1,STWCHNG+STWADD  IS FUNCT ADD-DELETE CHANGE
         BNO   SWTODEL                  NO, GO CHK FOR SWITCH TO DELETE
         BAL   RCALCRET,CALCSIZE        CALC SIZE OF FIRST ENTRY IN BFR
         TM    STWFLAG1,STWFLOW         HAS BLOCK WITH ENTRY TO BE
*                                       DELETED BEEN PROCESSED
         BNO   CONTADD                  NO, CONT READING AND WRITING
*                                       UNTIL BLOCK IS FOUND
         SPACE 2
****
****     IF THE FUNCTION BEING PERFORMED IS CHANGE OR REPLACE, GO TO
****     THE DELETE ROUTINE TO ENSURE THAT THE DIRECTORY HAS BEEN
****     COMPRESSED.
****
SWTODEL  EQU   *
         TM    STWFLAG1,STWCHNG+STWREPL IS FUNCT CHANGE OR REPLACE
         BNZ   COMPRESS                 YES, GO TO COMPRESS DIRECTORY
         TM    STWFLAG1,STWMERGE        DID WE MERGE A BLK     YA06505
*                                       DURING COMPRESS        YA06505
         BO    COMPRESS                 IF YES MUST COMPRESS   YA06505
*                                       THE ENTIRE DIRECTORY   YA06505
         B     WRLAST                   NO, GO TO WRITE LAST BLOCK
         SPACE 2
****
****     DELETE THE DIRECTORY ENTRY FOR THE FUNCTIONS OF DELETE OR
****     ADD-DELETE CHANGE.
****
DELETE   EQU   *
         BAL   RCALCRET,CALCSIZE        CALC SIZE OF ENTRY TO BE
*                                       DELETED
         SR    REMAIN,RSIZE             DECR DATA SIZE BY DELETED ENTRY
         LA    RMOVE,0(RSIZE,RMOVE)     INCR NEXT ENTRY PTR PAST ENTRY
         SPACE 2
****
****     COMPRESS THE REMAINING ENTRIES IN THE DIRECTORY TO COMPENSATE
****     FOR THE SPACE LEFT BY THE DELETED ENTRY.
****
COMPRESS EQU   *
         LTR   REMAIN,REMAIN            ANY MORE ENTRIES IN INPUT BFR
         BM    BADDIR                   SOMETHINGS WRONG WITH   SA72739
*                                       DIRECTORY - GET OUT     SA72739
         BZ    DELENDCK                 NO, GO TO CHK FOR LAST ENTRY
         TM    STWFLAG1,STWCHNG+STWDEL  IS FUNCT DELETE-ADD CHANGE
         BNO   COMPMOVE                 NO, CONT COMPRESSING DIRECTORY
         TM    STWFLAG1,STWFLOW         HAS CHANGE SW BEEN PERFORMED
         BO    COMPMOVE                 YES, CONT COMPRESSING DIRECTORY
         USING PDS2,RMOVE               ESTABLISH ENTRY BASE REGISTER
         CLC   PDS2NAME,STWNEWNM        IS THIS THE LOCATION FOR THE
*                                       NEW ENTRY
         BH    SWTOADD                  YES, GO TO SWITCH TO ADD MODE
         DROP  RMOVE                    DROP ENTRY BASE REGISTER
         SPACE
COMPMOVE EQU   *
         BAL   RCALCRET,CALCSIZE        GET SIZE OF NEXT ENTRY
         LR    RMOVESZ,RSIZE            SIZE OF ENTRY TO BE MOVED
         BAL   RMOVERET,MOVEONE         GO MOVE ENTRY INTO OUTPUT BFR
         LTR   RMOVESZ,RMOVESZ          WAS MOVE SUCCESSFUL
         BZ    COMPRESS                 YES, GO GET NEXT ENTRY
         LA    RWORK1,L'BUFN(,REMAIN)   INCR SIZE OF ENTRIES LEFT IN
*                                       INPUT BFR BY SIZE FIELD LENGTH
         CH    RWORK1,BUFN              HAVE ANY ENTRIES BEEN MOVED
*                                       FROM THE INPUT BFR
         BNE   CONTCOMP                 YES, CONTINUE COMPRESSING
         TM    STWFLAG1,STWMERGE        DID WE MERGE A BLK     YA06505
*                                       DURING COMPRESS        YA06505
         BO    CONTCOMP                 IF YES MUST COMPRESS   YA06505
*                                       THE ENTIRE DIRECTORY   YA06505
         TM    STWFLAG1,STWCHNG+STWDEL  IS FUNCT DELETE-ADD CHANGE
         BNO   WRLAST                   NO, GO TO WRITE OUT LAST BLOCK
*                                       PROCESSED
         TM    STWFLAG1,STWFLOW         HAS CHANGE SW BEEN PERFORMED
         BO    WRLAST                   YES, GO TO WRITE OUT LAST BLOCK
*                                       PROCESSED
         SPACE 2
****
****     WRITE COMPLETED OUTPUT BUFFER AND READ IN ANOTHER DIRECTORY
****     BLOCK.
****
CONTCOMP EQU   *
         BAL   RREADRET,WR1RD1          GO TO WRITE/READ ROUTINE
         DROP  RIBFR                    DROP INPUT BFR BASE REGISTER
         USING BUFFER,ROBFR             ESTABLISH OUTPUT BFR BASE REG
         TM    STWFLAG1,STWMERGE        DID MERGE OF 2 BLKS    YA06505
*                                       INTO ONE OCCUR         YA06505
         BO    COMPMOVE                 YES, THEN COUNT FIELD  YA06505
*                                       IN OUTPUT BUFFER IS OK YA06505
         MVC   BUFCNT,BUFCNT-BUFFER(RIBFR)  MOVE COUNT FIELD TO OUTPUT
*                                       BUFFER
         B     COMPMOVE                 CONT COMPRESSING DIRECTORY
         SPACE 2
****
****     DETERMINE IF THE LAST DIRECTORY ENTRY HAS BEEN PROCESSED.  IF
****     SO, GO TO UPDATE THE DCBDIRCT FIELD.  OTHERWISE, CONTINUE
****     COMPRESSING THE DIRECTORY.
****
DELENDCK EQU   *
         CLC   BUFKEY,HIGHKEY           HAS LAST ENTRY BEEN PROCESSED
         BE    UPDTEDCB                 YES, GO TO UPDATE DCBDIRCT FLD
         DROP  ROBFR                    DROP OUTPUT BFR BASE REGISTER
         USING BUFFER,RIBFR             ESTABLISH INPUT BFR BASE REG
         L     RIBFR,BUFADDR            GET ADDR OF NEXT INPUT BFR
         TM    STWFLAG1,STWMERGE        MERGE OF 2 BLKS        @ZA10229
         BZ    CHECKBUF                 NO -CONTINUE           @ZA10229
         BAL   R14,WR1RD1               WRITE OUT ONE BLK      @ZA10229
         B     BYWRTBLK                 CONTINUE               @ZA10229
CHECKBUF EQU   *                                               @ZA10229
         CR    RIBFR,ROBFR              HAVE BOTH INPUT BUFFERS OX00801
*                                       BEEN EMPTIED            OX00801
         BNE   BYWRTBLK                 CONT COMPRESS IF NOT    OX00801
****
****     TWO DIRECTORY BLOCKS HAVE MERGED INTO ONE. MUST SET
****     A SWITCH SO THAT COMPRESS WILL CONTINUE TO END OF
****     THE DIRECTORY.  TWO DIRECTORY BLOCKS WILL BE READ IN
****     AT THIS POINT INSTEAD OF JUST ONE. THE NEW OUTPUT
****     BUFFER MUST PROGRESS TWO BUFFERS FORWARD THIS TIME.
****
         OI    STWFLAG1,STWMERGE        SET BIT IDENTIFYING     YA06505
*                                       THIS MERGE OF 2 BLKS    YA06505
         OI    STWRDFL3,STWCMDCH        TURN ON COMMAND CHAIN   YA06505
*                                       TO READ A 2ND BLOCK     YA06505
         MVC   STWRDAD4,BUFADDR+1       MAKE NXT BUFFER THE IN- YA06505
*                                       PUT BUFFER FOR 2ND BLK  YA06505
         BAL   R14,WR1RD1               GO WRT 1 BLK,READ 2     YA06505
         DROP  RIBFR                    DROP INPUT BUFFER       YA06505
         USING BUFFER,ROBFR             OUTPUT BUFFER IS BASE   YA06505
         L     ROBFR,BUFADDR            UPDATE NEW OUTPUT BUF   YA06505
*                                       1 MORE BUFFER, SINCE WE YA06505
*                                       READ 2 BLKS IN. THE     YA06505
*                                       COUNT FIELD IN THIS NEW YA06505
*                                       OUTPUT BUFFER IS OK     YA06505
         LA    RFILL,BUFENTRY           INITIALIZE FILL POINTER YA06505
*                                       FOR THIS OUTPUT BUFFER  YA06505
         OI    STWRDFL3,STWSKIP         SUPPRESS DATA TRANSFER  YA06505
*                                       ON THIS RD - WILL BE 2  YA06505
*                                       BLKS AHEAD FROM NOW ON  YA06505
         DROP  ROBFR                    DROP OUTPUT BUFFER      YA06505
*
BYWRTBLK EQU   *                                                OX00801
         USING BUFFER,RIBFR             INPUT BUFFER IS BASE    YA06505
         LH    REMAIN,BUFN              GET USED SPACE IN INPUT BLOCK
         SH    REMAIN,COUNTSZ           CALCULATE SIZE OF ENTRIES
         LA    RMOVE,BUFENTRY           INIT MOVE PTR TO FIRST ENTRY
         B     COMPRESS                 CONT COMPRESSING DIRECTORY
         DROP  RIBFR                    DROP INPUT BFR BASE REGISTER
         SPACE 2
****
****     GO TO THE ADD ROUTINE TO ADD THE NEW ENTRY FOR THE DELETE-ADD
****     CHANGE FUNCTION.
****
SWTOADD  EQU   *
         OI    STWFLAG1,STWFLOW         IND CHANGE SWITCH HAS BEEN
*                                       PERFORMED
         LR    RWORK2,RMOVE             INIT MOVE PTR FOR ADD ROUTINE
         B     FITCHK                   GO TO ADD NEW ENTRY
         SPACE 2
****
****     IF UNIT EXCEPTION OCCURED WHILE ATTEMPTING TO READ ANOTHER
****     BLOCK, WHICH IS REQUIRED TO EXPAND THE DIRECTORY, RETURN TO
****     THE USER WITH A 'NO ROOM' ERROR CODE.
****
NOTROOM  EQU   *
         LA    RRETCODE,NOROOM          SET NO ROOM ERROR CODE   YM0943
         B     RTRNUSR1                 GO TO RETURN ROUTINE     Y02072
         SPACE 2
****
****     SOMETHING IS WRONG WITH THE USER'S DIRECTORY. EITHER
****     THE TOTAL LENGTH OF BYTES USED IN THE DIRECTORY IS
****     WRONG OR THE BYTES OF USER INFORMATION FOR A MEMBER
****     IS WRONG. THIS PROBLEM IS DETECTED WHEN THE BYTE
****     COUNTER HAS GONE NEGATIVE.
****
BADDIR   EQU   *                        DIRECTORY IS BAD        SA72739
         LA    R9,IOERROR               PROBLEM IS UNKNOWN AND  SA72739
*                                       MAY BE CAUSED BY IO ERR SA72739
         B     RTRNUSR1                 GO TO RETURN ROUTINE    SA72739
****
****     IF THE LAST BLOCK OF THE DIRECTORY WAS USED, STORE INTO THE
****     DCBDIRCT FIELD ONE LESS THAN THE NUMBER OF BYTES USED IN THE
****     BLOCK.  OTHERWISE, SET THE DCBDIRCT FIELD TO ZEROS.
****
UPDTEDCB EQU   *
         SR    RWORK1,RWORK1            INIT REG TO IND NOT LAST BLOCK
         TM    IOBCSW+3,UNITEXPT        DID UNIT EXCEPTION OCCUR ON
*                                       LAST BLOCK READ
         BNO   STDIRCT                  NO, GO TO STORE NOT LAST INDR
         LA    RWORK1,L'BUFDATA-1       GET BUFFER DATA LENGTH MINUS 1
         SR    RWORK1,RSPACE            CALC ONE LESS THAN USED SPACE
         SPACE
STDIRCT  EQU   *
         TM    DCBMACF1,DCBMRECP        TEST FOR EXCP          @ZA02261
         BO    WRLAST                   YES, BYPASS UPDATE     @ZA02261
*                                       ON DCBDIRCT FIELD      @ZA02261
         STC   RWORK1,DCBDIRCT+1        UPDATE DCBDIRCT FIELD
         SPACE 2
****
****     WRITE THE LAST DIRECTORY BLOCK PROCESSED.
****
WRLAST   EQU   *
         NI    STWWFLG2,X'FF'-STWCMDCH  SUPPRESS THE READ OPERATIONS
         BAL   RREADRET,WR1RD1          GO TO WRITE LAST BLOCK
         OI    DCBCIND2,STOWPERF        INDICATE STOW PERFORMED  M1088
         SPACE 2
****
****     FREE THE GOTTEN CORE, PUT THE REASON CODE IN REGISTER 0, THE
****     RETURN CODE IN REGISTER 15, AND RETURN TO THE CALLER.
****
         SR    RRETCODE,RRETCODE        CLEAR REGISTER           YM0943
         IC    RRETCODE,STWRTN          GET RETURN CODE SAVED BY YM0943
*                                       THE FIRST LOAD           YM0943
         SPACE
RTRNUSR1 EQU   *                                                 Y02072
         SR    REASONCD,REASONCD        CLEAR REASON CODE REG    Y02072
         SPACE
RTRNUSR2 EQU   *                                                 Y02072
         FREEMAIN  R,LV=CORESIZE,A=(RAREA),SP=229  FREE AREA     Y02072
         SPACE
         LR    R0,REASONCD              GET THE REASON CODE      Y02072
         LR    R15,RRETCODE             GET THE RETURN CODE      YM0943
         USING PSA,0                    ESTABLISH PSA BASE REG   Y02072
         L     RWORK1,PSATOLD           GET CURRENT TCB ADDR     Y02072
         USING TCB,RWORK1               ESTABLISH TCB BASE REG   Y02072
         L     RWORK1,TCBRBP            GET STOW SVRB ADDR       Y02072
         USING RBSECT,RWORK1            EST SVRB BASE REG        Y02072
         L     R14,XSAREG14             RESTORE RETURN REGISTER  Y02072
         DROP  RWORK1                   DROP SVRB BASE REG       Y02072
         SPACE 2
****
****     MODESET TO KEY 0 AND RETURN TO THE CALLER.
****
         MODESET EXTKEY=SUPR            MODESET TO KEY 0         Y02072
         BR    R14                      RETURN TO THE CALLER     Y02072
         EJECT
***********************************************************************
****                                                               ****
****     THIS SUBROUTINE IS USED TO COMPLETE THE OUTPUT BUFFER,    ****
****     SET UP THE CHANNEL PROGRAM TO WRITE THE OUTPUT BUFFER AND ****
****     READ ANOTHER DIRECTORY BLOCK INTO A FOURTH BUFFER,        ****
****     FROM WHERE IT IS MOVED INTO THE OUTPUT BUFFER. IF         ****
****     TWO INPUT BLOCKS MERGED COMPLETELY INTO ONE OUTPUT        ****
****     BUFFER, TWO NEW BLOCKS ARE READ IN. A NEW OUTPUT          ****
****     BUFFER (THE NEXT IN THE CHAIN) IS INITIALIZED.            ****
****                                                               ****
****     INPUT REGISTERS -                                         ****
****           RIBFR  - ADDRESS OF THE INPUT BUFFER                ****
****           ROBFR  - ADDRESS OF THE OUTPUT BUFFER               ****
****           RSPACE - UNUSED SPACE IN THE OUTPUT BUFFER          ****
****           R14    - RETURN ADDRESS                             ****
****                                                               ****
****     OUTPUT REGISTERS -                                        ****
****           RIBFR  - SAME AS ENTRY                              ****
****           ROBFR  - ADDRESS OF NEW OUTPUT BUFFER               ****
****           RSPACE - INITIALIZED TO BUFFER ENTRY AREA SIZE      ****
****           RFILL  - ADDRESS OF OUTPUT BUFFER ENTRY AREA        ****
****                                                               ****
***********************************************************************
WR1RD1   EQU   *
         LA    RWORK1,L'BUFDATA         GET SIZE OF BUFFER DATA AREA
         SR    RWORK1,RSPACE            CALC USED SPACE IN OUTPUT BFR
         USING BUFFER,ROBFR             ESTABLISH OUTPUT BFR BASE REG
         STH   RWORK1,BUFN              PUT USED SPACE INTO OUTPUT BFR
         ST    ROBFR,STWIDAD2-1         SET UP SEARCH ID ADDRESS
         MVI   STWSRCH2,STWIDEQ         RESTORE SEARCH ID EQUAL COMMAND
         LA    RWORK1,STWBUF4           POINT TO INPUT BUFFER   SA66881
         ST    RWORK1,STWRDAD3-1        SET UP C/K/D ADDRESS    SA66881
         MVI   STWRCKD3,STWRDCKD        RESTORE READ C/K/D COMMAND
*
         TM    STWRDFL3,STWSKIP         HAVE THE NEXT 2 BLKS    YA06505
*                                       BEEN READ IN ALREADY    YA06505
*                                       (DID A MERGE OCCUR?)    YA06505
         BNO   BUFOK                    NO, THEN READ IN NEXT   YA06505
         MVC   STWRDAD4,STWRDAD3        YES, SET UP LAST READ   YA06505
*                                       CKD WITH BUFFER 4 ADDR  YA06505
*                                       HAVE READ IN THE 2 BLKS YA06505
*                                       AFTER THE ONE WRITTEN   YA06505
BUFOK    EQU   *                        SET UP WRITE ADDRESS    YA06505
         LA    RWORK1,BUFKEY            GET ADDRESS OF KEY AREA
         ST    RWORK1,STWWRAD2-1        SET UP WRITE KEY/DATA ADDRESS
         MVI   STWWRKD1,STWWRKD         RESTORE WRITE KEY/DATA COMMAND
         TM    STWFLAG1,STWDRYRN        IS THIS A DRY RUN
         BNO   GOTOEXCP                 NO, GO TO ISSUE EXCP
         MVI   STWWRKD1,STWRDKD         REPLACE WRITE COMMAND WITH A
*                                       READ IN ORDER TO SUPPRESS DATA
*                                       TRANSFER FOR THE WRITE CCW
         SPACE
GOTOEXCP EQU   *
         MVC   IOBCC(5),0(ROBFR)        SET UP CCHHR OF IOBSEEK FIELD
         BAL   REXCPRET,EXCP            GO ISSUE EXCP
         MVC   0(L'BUFCNT+L'BUFKEY,ROBFR),STWBUF4 MOVE C/K FLDS SA66881
         MVC   16(L'BUFDATA,ROBFR),STWBUF4+16 MOVE DIR. BLOCK   SA66881
****
****     THE COUNT/KEY/DATA FIELDS ARE NOT READ DIRECTLY INTO
****     THE OUTPUT BUFFER, TO PROTECT THE OUTPUT BUFFER, SHOULD
****     ERROR RETRY BE REQUIRED.
****
         L     ROBFR,BUFADDR            INIT OUTPUT BFR POINTER
         LA    RFILL,BUFENTRY           INIT FILL POINTER
         LA    RSPACE,L'BUFENTRY        INIT UNUSED SPACE IN OUTPUT BFR
         DROP  ROBFR                    DROP OUTPUT BFR BASE REG
         BR    RREADRET                 RETURN TO CALLER
         EJECT
***********************************************************************
****                                                               ****
****     THIS SUBROUTINE IS USED TO MOVE AN ENTRY OR ENTRIES FROM  ****
****     THE INPUT BUFFER TO THE OUTPUT BUFFER AND UPDATE THE KEY  ****
****     FIELD OF THE OUTPUT BUFFER FOLLOWING EACH MOVE.  THERE    ****
****     ARE TWO ENTRY POINTS TO THIS SUBROUTINE.  THE FIRST IS    ****
****     USED TO MOVE ONE OR MORE ENTRIES OF UNKNOWN SIZE AND THE  ****
****     SECOND TO MOVE ONE ENTRY OF KNOWN SIZE.                   ****
****                                                               ****
****     INPUT REGISTERS -                                         ****
****           RMOVE  - ADDRESS DATA IS TO BE MOVED FROM           ****
****           RFILL  - ADDRESS DATA IS TO BE MOVED TO             ****
****           RSIZE  - SIZE OF ENTRY (SECOND ENTRY ONLY)          ****
****           REMAIN - AMOUNT OF DATA REMAINING IN INPUT BUFFER   ****
****           RSPACE - AMOUNT OF UNUSED SPACE IN OUTPUT BUFFER    ****
****           ROBFR  - ADDRESS OF OUTPUT BUFFER                   ****
****           R15    - AMOUNT OF DATA TO BE MOVED (EQUAL TO RSIZE ****
****                    FOR SECOND ENTRY)                          ****
****           R14    - RETURN ADDRESS                             ****
****                                                               ****
****     OUTPUT REGISTERS -                                        ****
****           RMOVE  - INCREMENTED BY AMOUNT OF DATA MOVED        ****
****           RFILL  - INCREMENTED BY AMOUNT OF DATA MOVED        ****
****           RSIZE  - AMOUNT OF DATA REMAINING TO BE MOVED       ****
****           REMAIN - AMOUNT OF DATA REMAINING IN INPUT BUFFER   ****
****           RSPACE - AMOUNT OF UNUSED SPACE IN OUTPUT BUFFER    ****
****           ROBFR  - SAME AS INPUT                              ****
****           R15    - AMOUNT OF DATA UNABLE TO MOVE              ****
****                                                               ****
***********************************************************************
MOVEMANY EQU   *
         LTR   RMOVESZ,RMOVESZ          HAS ALL DATA BEEN MOVED
         BZR   RMOVERET                 YES, RETURN TO CALLER
         BAL   RCALCRET,CALCSIZE        GO GET SIZE OF NEXT ENTRY
         SPACE
MOVEONE  EQU   *
         CR    RSPACE,RSIZE             WILL ENTRY FIT IN OUTPUT BFR
         BLR   RMOVERET                 NO, RETURN TO CALLER
         SR    RMOVESZ,RSIZE            CALC AMOUNT LEFT TO BE MOVED
         SR    REMAIN,RSIZE             DECR DATA LEFT IN INPUT BFR
         SR    RSPACE,RSIZE             DECR UNUSED SPACE IN OUTPUT BFR
         USING BUFFER,ROBFR             ESTABLISH OUTPUT BFR BASE REG
         USING PDS2,RMOVE               ESTABLISH ENTRY BASE REG
         MVC   BUFKEY,PDS2NAME          UPDATE OUTPUT BFR KEY FIELD
         DROP  ROBFR,RMOVE              DROP BASE REGISTERS
         BCTR  RSIZE,R0                 DECR REG FOR CORRECT MOVE LNTH
         EX    RSIZE,MOVEIT             MOVE ENTRY TO OUTPUT BFR
         LA    RMOVE,1(RSIZE,RMOVE)     INCR MOVE PTR PAST MOVED ENTRY
         LA    RFILL,1(RSIZE,RFILL)     INCR FILL PTR PAST MOVED ENTRY
         B     MOVEMANY                 CONTINUE MOVING ENTRIES
         SPACE
MOVEIT   EQU   *
         MVC   0(0,RFILL),0(RMOVE)      MOVE FOR EXECUTE INSTRUCTION
         SPACE 2
***********************************************************************
****                                                               ****
****     THIS SUBROUTINE IS USED TO CALCULATE THE SIZE OF A        ****
****     DIRECTORY ENTRY AND RETURN IT IN REGISTER R15.            ****
****                                                               ****
****     INPUT REGISTERS -                                         ****
****           RMOVE - ADDR OF ENTRY WHOSE SIZE IS TO BE CALCULATED****
****           R13   - RETURN ADDRESS                              ****
****                                                               ****
****     OUTPUT REGISTERS -                                        ****
****           RMOVE - SAME AS INPUT                               ****
****           RSIZE - SIZE OF ENTRY                               ****
****                                                               ****
***********************************************************************
CALCSIZE EQU   *
         USING PDS2,RMOVE               ESTABLISH ENTRY BASE REGISTER
         IC    RSIZE,PDS2INDC           GET USER DATA SIZE
         SLL   RSIZE,27                 SHIFT OFF ALAIS BIT AND NUMBER
*                                       OF TTRN'S
         SRL   RSIZE,26                 REPOSITION DATA SIZE AND CON-
*                                       VERT HALFWORDS TO BYTES
         LA    RSIZE,L'PDS2NAME+L'PDS2TTRP+L'PDS2INDC(,RSIZE)
*                                       CALCULATE TOTAL SIZE OF ENTRY
         DROP  RMOVE                    DROP ENTRY BASE REGISTER
         BR    RCALCRET                 RETURN TO USER
         SPACE 2
***********************************************************************
****                                                               ****
****     THIS SUBROUTINE IS USED TO EXECUTE A CHANNEL PROGRAM AND  ****
****     CHECK THE STATUS FOLLOWING COMPLETION.                    ****
****                                                               ****
****     INPUT REGISTERS -                                         ****
****           R13 - RETURN ADDRESS                                ****
****                                                               ****
****     OUTPUT REGISTERS - NONE                                   ****
****                                                               ****
***********************************************************************
EXCP     EQU   *
         EXCP  IOBSTDRD                 EXECUTE CHANNEL PROGRAM
         TM    ECBCC,ECBPOST            HAS ECB BEEN POSTED ?? @ZA12202
         BO    BYWAIT                   BYPASS WAITING ON ECB  @ZA12202
         WAIT  ECB=ECBCC                WAIT FOR I/O TO COMPLETE
BYWAIT   EQU   *                        ECB HAS BEEN POSTED    @ZA12202
         TM    ECBCC,ECBNORM            DID I/O COMPLETE NORMALLY
         BOR   REXCPRET                 YES, RETURN TO CALLER
         NI    DCBIFLGS,X'FF'-DCBIFEC   TURN OFF ERROR FLAGS     Y02072
         TM    IOBCSW+3,UNITEXPT        DID UNIT EXCEPTION OCCUR
         BOR   REXCPRET                 YES, RETURN TO CALLER
         LA    REASONCD,DIRECTRY        INDICATE ERROR OCCURED   Y02072
*                                       IN THE DIRECTORY         Y02072
         LA    RRETCODE,IOERROR         IND AN I/O ERROR OCCURED YM0943
         B     RTRNUSR2                 GO TO RETURN TO USER     Y02072
         EJECT
***********************************************************************
****                                                               ****
****     CONSTANTS                                                 ****
****                                                               ****
***********************************************************************
         SPACE
COUNTSZ  DC    Y(L'BUFN)                SIZE OF DIRECTORY BLOCK DATA
*                                       COUNT FIELD
HIGHKEY  DC    8X'FF'                   KEY OF HIGHEST DIRECTORY ENTRY
         DC    C'IGG021AB'              NAME OF MODULE         @ZA10229
         DC    CL8'&SYSDATE'            DATE OF CHANGE         @ZA10229
         DC    C'@ZA12202'              LATEST FLAG            @ZA12202
PATCH    DC    0XL50'0',C'IGG021AB',42X'0'  50 BYTE PATCH AREA   Y02072
         EJECT
***********************************************************************
****                                                               ****
****     CONTROL BLOCK DEFINITIONS                                 ****
****                                                               ****
***********************************************************************
         SPACE
         CVT   DSECT=YES                                         Y02072
         EJECT
         DCBD  DSORG=PO
         EJECT
         IEZDEB
         EJECT
         IHAPDS PDSBLDL=NO
         EJECT
         IHAPSA                                                  Y02072
         EJECT
         IHARB                                                   Y02072
         EJECT
         IKJTCB                                                  Y02072
         EJECT
         IGGSTW                                                  Y02072
         END   IGG021AB
