 TITLE   'IGG019DA - WRITE FORMAT F, LOAD MODE'
IGG019DA CSECT
*MODULE NAME = IGG019DA                                               *
*                                                                     *
*DESCRIPTIVE NAME = BDAM CREATE, WRITE FIXED FORMAT                   *
*                                                                     *
*COPYRIGHT = NONE                                                     *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*                                                                     *
*          RELEASE 19 CHANGES/DELETIONS
*2040053400                                                      A27066
*          RELEASE 20 CHANGES/DELETIONS
*0000053290                                                      M6477
*3511                                                            A34944
*3511000120-000180,000420-000600,053000-053200,053270            20201
*0000053240,053290                                               M6283
*          RELEASE 21 CHANGES/DELETIONS
*                                                                XM6362
*040500-040520                                                  SA58617
*          VS1-1 CHANGES/DELETIONS
*          VS2-1 CHANGES/DELETIONS
*          VS1-2 CHANGES/DELETIONS
*          VS2-2 CHANGES/DELETIONS
*053010-053070,056200-056600                                     Y02072
*                                                                YM3919
*                                                                YM6555
*                                                                YM7563
*          CHANGES SINCE VS2-3.7
*D042400,A048650-048750                                        @ZA30898
*STATUS CHANGE LEVEL 009
*FUNCTIONS- THIS ROUTINE OBTAINS AN IOB, INITIALIZES THE CHANNEL
*    PROGRAM, AND ISSUES THE 'EXCP' FOR A WRITE TYPE SF OR SD TO A
*    FORMAT 'F' DATA SET.
*    IF THIS WRITE FILLS THE CURRENT TRACK, THE CAPACITY RECORD WILL
*    BE WRITTEN BY SETTING THE COMMAND CHAIN FLAG IN THE LAST REGULAR
*    WRITE CCW.
*
*ENTRY POINTS- 'WRTENTRY' IS THE NORMAL ENTRY POINT FROM THE WRITE
*    MACRO EXPANSION. CALLING SEQUENCE IS     L     15,DCBWRITE
*                                             BALR  14,15
*    'EOVENTRY' IS THE ENTRY FROM THE BSAM END-OF-VOLUME EXECUTOR TO
*    RESTART A WRITE WHICH WAS ISSUED AFTER THE CURRENT SPACE
*    ALLOCATION WAS FILLED. THE RECORD WILL NOW BE WRITTEN INTO THE
*    SPACE OBTAINED AS SECONDARY ALLOCATION. CALLING SEQUENCE IS
*                                              L    15,DCBWRITE
*                                              BAL  14,4(15)
*INPUT- TO 'WRTENTRY'- DECB ADDRESS IN REGISTER 1
*       TO 'EOVENTRY'- IOB ADDRESS IN REGISTER 3
*                      DCB ADDRESS IN REGISTER 2
*                      DEB ADDRESS IN REGISTER 5
*
*OUTPUT- AN IOB FROM THE POOL OF IOBS WILL BE ASSIGNED TO THIS DECB
*    AND ITS ADDRESS PLACED IN THE DECB, EXCP WILL BE ISSUED TO
*    SCHEDULE THIS WRITE.
*
*EXTERNAL ROUTINES-
*
*EXITS- 'RETURN' IS AN EXIT BACK TO THE USER, REGISTER 15 WILL CONTAIN
*    A RETURN CODE AS FOLLOWS,
*        0 = RECORD WAS WRITTEN, THERE IS MORE SPACE ON THE TRACK
*        4 = RECORD WAS WRITTEN, THIS TRACK IS FULL
*        8 = RECORD WAS WRITTEN, DATA SET IS FILLED
*        12= RECORD NOT WRITTEN, NO IOB IS AVAILABLE UNTIL 'CHECK' HAS
*            BEEN ISSUED.
*    'EOVEXIT' IS A RETURN TO THE END-OF-VOLUME EXECUTOR.
*
*    'ABEXIT' IS AN EXIT WHEN THE RECORD WILL NOT FIT ON AN EMPTY
*      TRACK. A DMABCOND MACRO IS ISSUED TO TRANSFER CONTROL TO
*      THE PROBLEM DETERMINATION MODULES WHICH WILL ISSUE A WTP
*      MESSAGE AND GTRACE PERTINENT CONTROL BLOCKS BEFORE ISSUING
*      ABEND.  A RETURN CODE ACCOMPANYING THE ABEND WILL
*      IDENTIFY THE EXACT CAUSE OF THE ERROR.
*
*TABLES- 1. DIRECT ACCESS DEVICE TABLE IS USED TO CALCULATE THE BYTES
*           OF OVERHEAD FOR THIS RECORD AND TO DETERMINE THE NEXT
*           VALID TRACK ADDRESS AND THE TRACK LENGTH.
*
*ATTRIBUTES- THIS ROUTINE IS REENTRANT AND EXECUTED ENABLED.
*
*NOTES- THE REGISTER USAGE IN THIS MODULE AND THE BSAM END-OF-VOLUME
*    EXECUTOR MUST REMAIN CONSISTENT.
*
*
*  REGISTER USAGE
*
         USING IGG019DA,EPREG
         USING IHADCB,DCBREG
         USING IOBDEF,IOBREG
         USING DEB,DEBREG
         USING DECBDEF,DECBREG
*
WKREG    EQU   0         WORK REGISTER
PARAM1   EQU   1         PARAMETER REGISTER
DECBREG  EQU   1         DECB ADDRESS
DCBREG   EQU   2         DCB ADDRESS
IOBREG   EQU   3         IOB ADDRESS
EOVRETRN EQU   4         EOV RETURN ADDRESS
DEBREG   EQU   5         DEB ADDRESS
WKREG1   EQU   6         WORK REGISTERS
WKREG2   EQU   7
WKREG3   EQU   8
WKREG4   EQU   9
CCHH     EQU   9
WKREG5   EQU   10
WKREG6   EQU   11
BASE     EQU   12        BASE OF THIS MODULE
SAVE     EQU   13        USER'S SAVE AREA
RETREG   EQU   14        RETURN ADDRESS WHEN ENTERED
EPREG    EQU   15        ENTRY POINT
*
*
*
*
*  ENTRY POINTS TO THIS ROUTINE
*
WRTENTRY B     BEGIN                   GO TO BEGINNING OF WRITE CODE
*
         DROP  EPREG
         USING IGG019DA,BASE
*
EOVENTRY L     DECBREG,IOBECBPT        LOAD DECB BASE ADDRESS
         L     BASE,DCBWRITE           SET BASE REGISTER
         OI    IOBLINK,EOVRET           INDICATE EOV ENTRY       YM6555
         LR    EOVRETRN,RETREG         MOVE RETURN TO EOV ADDRESS
         TM    DCBCIND1,VOLFUL         IS THE EXTENT FULL YET    YM7563
         BO    EOVON                   BR IF YES,SET BIT AND RET YM7563
         B     TST1FIT                 GO CALC RECORD LENGTH+OVERHEAD
*
*
BEGIN    SAVE  (14,12)                 SAVE THE USER'S REGISTER
         L     DCBREG,DECDCBAD         LOAD DCB BASE ADDRESS FROM DECB
         L     DEBREG,DCBDEBAD         LOAD DEB BASE ADDRESS FROM DCB
         LR    BASE,EPREG              MOVE ENTRY POINT TO BASE REG.
*
         L     IOBREG,DCBIOBA          USE CURRENT IOB TO LOCATE THE
         TM    DCBCIND2,X'20'           ARE WE HERE TO WRITE R0  A27066
*                                       ONLY                     A27066
         BO    WRTR0                    YES - BR TO DO IT        A27066
         L     IOBREG,IOBLINK           NEXT IOB ADDRESS
         TS    IOBLINK+4               IF NEXT IOB IS AVAILABLE
         BC    8,OKIOB                  GO INITIALIZE IT
*                                      ELSE RETURN WITH ERROR CODE 12
         LA    15,12
         B     RETURN
*
*
OKIOB    ST    IOBREG,DCBIOBA          STORE CURRENT IOB ADDRESS IN DCB
         LA    WKREG1,8(0,IOBREG)      STORE IOS IOB ADDRESS IN
         ST    WKREG1,DECIOBPT          THE DECB
         ST    DECBREG,IOBECBPT        STORE DECB ADDRESS IN IOB
         CLI   IOBCCW1,SETSECT          IS THIS AN RPS CHAN      20201
*                                       PROGM                    20201
         BNE   NONCARN                  IF NOT, FORGET FOLLOWING 20201
*                                       RTN                      20201
         NI    IOBCCW10+D4,DCCHN        ELSE CLR DC FLAG         20201
         TM    DCBOPTCD,WRTCHK          IS WRT CHK SPECIFIED     20201
         BO    RPSVOLF                  YES THEN BRANCH TO TEST  XM6362
*                                         IF VOL IS FULL
         NI    IOBCCW6+D4,DCCHN         ELSE CLR COMMAND/DATA    20201
*                                         CHAIN
RPSVOLF  TM    DCBCIND1,VOLFUL          IS THE VOLUME FULL       XM6362
         BO    EOVON                    BR IF YES                XM6362
         B     MVCAREA2                 BRANCH AROUND RPS        20201
NONCARN  EQU   *                                                 20201
         NI    IOBCCW7+4,X'3F'          CLEAR COMMAND CHAIN FLAG WHICH
         TM    DCBOPTCD,WRTCHK          ALLOWED R0 TO BE WRITTEN
         BC    1,MVCAREA
         NI    IOBCCW4+4,X'3F'            (FLAG IS IN CCW4 OR CCW7)
MVCAREA  MVC   IOBCCW4+1(3),DECAREA+1  MOVE AREA ADDRESS TO WRITE CCW
         TM    DCBCIND1,VOLFUL          IS THE VOLUME FULL       A34944
*                                       ALREADY?                 A34944
         BO    EOVON                    IF YES, DONT EXCP, GET   A34944
*                                       OUT                      A34944
*
*
*  CALCULATE RECORD LENGTH PLUS OVERHEAD
*
TST1FIT  EQU   *
         LH    WKREG2,IOBCCW4+6        GET KL+DL FROM THE WRITE CCW
MVCAREA2  EQU  *                                                 20201
         CLI   IOBCCW1,SETSECT          IS THIS AN RPS CHAN RGM  20201
         BNE   NOCARN                   IF NOT, NEGLECT NEXT     20201
*                                       INSTRS                   20201
         MVC   IOBCCW5+D1(Q3),DECAREA+D1 MOVE AREA ADDR TO WRT   20201
*                                             CCW
         LH    WKREG2,IOBCCW5+D6        GET KL+DL FROM WRT CCW   20201
NOCARN   EQU   *                                                 20201
         L     WKREG1,DCBDVTBL         LOAD ADDRESS OF DADT ENTRY
         SR    WKREG,WKREG             IF NO KEYS ARE BEING WRITTEN,
         CLI   DCBKEYLE,0               WKREG WILL CONTAIN THE OVERHEAD
         BC    7,*+8                     TO BE SUBTRACTED
         IC    WKREG,OVERK(0,WKREG1)      FOR UNKEYED RECORDS
         SR    WKREG5,WKREG5
         IC    WKREG5,OVERL(0,WKREG1)  DEVELOP BYTES NEEDED FOR A
         TM    BYTEDEV(WKREG1),TBOVHD   TWO BYTE OVERHEAD USED   20201
         BNO   MZ0010                   BRANCH NO                20201
         LH    WKREG5,OVERI(WKREG1)     GET TWO BYTE OVERHEAD    20201
MZ0010   EQU   *                                                 20201
         AR    WKREG5,WKREG2               LAST RECORD BY
         SR    WKREG5,WKREG                KL+DL+OVERHEAD.
         SR    WKREG6,WKREG6              DEVELOP BYTES NEEDED FOR AN
         IC    WKREG6,OVERI(0,WKREG1)      INTERRMEDIATE RECORD BY
         TM    BYTEDEV(WKREG1),TBOVHD   TWO BYTE OVERHEAD USED   20201
         BNO   MZ0020                   BRANCH NO                20201
         LH    WKREG6,OVERI(WKREG1)     GET TWO BYTE OVERHEAD    20201
MZ0020   EQU   *                                                 20201
         MH    WKREG2,TOLER(0,WKREG1)       (KL+DL)TOLER + OVERHEAD
         SRL   WKREG2,9
         AR    WKREG6,WKREG2
         SR    WKREG6,WKREG            WKREG5=LAST REC, WKREG6=INTER.
*
         TM    DCBCIND2,WZEROBIT       WAS LAST WRITE A WRITE R0
         BC    1,WZEROFF                YES, GO INCREMENT TRACK NO.
*
*   UPDATE DCB FIELDS
*
FITS     LH    WKREG3,DCBTRBAL         DECREMENT TRACK BALANCE BY
         SR    WKREG3,WKREG6            THE SIZE OF AN
         STH   WKREG3,DCBTRBAL          INTERMEDIATE RECORD
         MVC   IOBSEEK(8),DCBFDAD      MOVE PRIOR RECORD AS SEARCH ARG
         IC    WKREG3,DCBFDAD+7        INCREMENT THE R BYTE
         LA    WKREG3,1(0,WKREG3)       OF MBBCCHHR
         STC   WKREG3,DCBFDAD+7         BY ONE
         MVC   IOBDNRCF(5),DCBFDAD+3   MOVE CURRENT CCHHR TO NEW COUNT
*
TSTDUMMY TM    DECTYPE+1,DUMMY         IF TYPE IS WRITE DUMMY
         BC    8,TST2FIT                AND RECORDS HAVE KEYS
         SR    WKREG1,WKREG1
         IC    WKREG1,DCBKEYLE
         LTR   WKREG1,WKREG1
         BC    8,TST2FIT
         L     WKREG4,DECAREA
         STC   WKREG3,0(WKREG1,WKREG4)  MOVE R TO FIRST DATA BYTE
         MVI   0(WKREG4),X'FF'          AND DUMMY KEY TO FIRST KEY BYTE
TST2FIT  CH    WKREG5,DCBTRBAL         WILL ANOTHER RCD. FIT ON TRACK
         BC    3,WRTR0                  NO, PREPARE TO WRITE R0 TOO
*
         LA    WKREG1,NORMAL           SET RETURN ADDRESS FOR NOT EOV
         B     EXCP                    GO EXCP, TEST FOR ENTRY FROM EOV
*
*
*   SET UP TO WRITE CAPACITY RECORD
*
WRTR0    EQU   *
         OI    DCBCIND2,WZEROBIT       SET- LAST I/O WAS WRITE R0 BIT
         CLI   IOBCCW1,SETSECT          RPS CHAN PROGRAM         20201
         BNE   NOTCARN                  IF NOT BRANCH OUT        20201
         OI    IOBCCW6+D4,CCHN          RESET COMMAND CHAIN      20201
         TM    DCBOPTCD,WRTCHK          IS WRT CHK SPECIFIED     20201
         BNO   NOWRTCHK                 NO, LEAVE FLAGS AS IS    20201
         OI    IOBCCW10+D4,CCHN         YES, RESET COMMAND CHN   20201
         B     NOWRTCHK                 BRANCH AROUND NON CARN   20201
*                                       RTN                      20201
NOTCARN  EQU   *                                                 20201
         OI    IOBCCW4+4,CCHN          THIS WRITE MUST ALSO WRITE OUT
         TM    DCBOPTCD,WRTCHK           THE CAPACITY RECORD SO SET ON
         BC    8,*+8                     THE COMMAND CHAIN FLAG
         OI    IOBCCW7+4,CCHN             (CCW4 OR CCW7)
NOWRTCHK EQU   *                                                 20201
         MVC   IOBR0CNT(4),DCBFDAD+3   MOVE CCHH0 TO R0 COUNT
         MVC   IOBR0DAT(5),DCBFDAD+3   MOVE CCHHR AS HIGHEST ID ON TRK
*
         BAL   WKREG1,EXCP              EXCP, TEST FOR ENTRY FROM EOV
*
EOECHK   EQU   *                        CHECK END OF EXTENT     SA58617
         SR    WKREG2,WKREG2            FIND LAST EXTENT IN THE DEB
         IC    WKREG2,DEBNMEXT          BY NUMBER OF EXTENTS
         BCTR  WKREG2,0                 MINUS ONE
         SLL   WKREG2,4                 TIMES 16
         AR    WKREG2,DEBREG            PLUS DEB BASE ADDRESS
         CLC   DCBFDAD+3(4),DEBENDCC-DEB(WKREG2)  IS THIS LAST TRACK
         LA    15,4                    SET RETURN CODE OF FULL TRACK(4)
         BC    7,RETURN                IF NOT LAST TRACK, RETURN
*
         LA    15,8                     SET RETURN CODE TO LAST TRK(8)
         B     RETURN                   AND RETURN TO THE USER
*
*
*  BYPASS EXCP FOR REQUESTS AFTER EOV
*
SETEOV   OI    DCBCIND1,VOLFUL         MARK DCB SO FUTURE REQ.S BYPASS
         BCTR  WKREG3,0                 RESTORE DCBFDAD           12987
         STC   WKREG3,DCBFDAD                                     12987
POSTEOV  OI    IOBLINK,EOVBIT          MARK IOB AS NOT EXCP'D
*
         LH    EPREG,DCBTRBAL           DECREMENT TRACK BALANCE BY15366
         SR    EPREG,WKREG6             SIZE OF INTERMEDIATE RECD 15366
         CR    EPREG,WKREG5             WILL ANOTHER RECORD FIT   15366
         BNL   NORMAL                   YES BRANCH                15366
         B     EOECHK                   BR TO SEE IF END OF EXT SA58617
*
EOVON    OI    IOBLINK,EOVBIT           TURN ON SWITCH, IOB NOT  A34944
*                                       EXCP'D                   A34944
NORMAL   SR    15,15                   SET RETURN CODE TO ZERO
*
RETURN   EQU   *                        RETURN TO CALLER         YM6555
         TM    IOBLINK,EOVRET           IS CALLER EOV            YM6555
         BNO   USERRET                  NO, RETURN TO USER       YM6555
         NI    IOBLINK,X'FF'-EOVRET     TURN OF EOV ENTRY BIT    YM6555
         BR    EOVRETRN                 RET TO EOV - HAVE RUN    YM6555
*                                       OUT OF SPACE ON NEW EXT  YM6555
USERRET  RETURN (14,12),T,RC=(15)       RETURN TO THE USER       YM6555
*
*   INCREMENT TRACK ADDRESS BY 1 AND CHECK VALIDITY
*
WZEROFF  XI    DCBCIND2,WZEROBIT       TURN OFF WRITE R0 FLAG
         MVC   IOBCSW(4),MAXCC(WKREG1) MOVE NO. OF CYL.S, TRACKS TO IOB
         MVC   IOBCSW+4(4),DCBFDAD+3   MOVE CURRENT CCHH FOR ALIGNMENT
         SR    WKREG2,WKREG2
         IC    WKREG2,DCBFDAD          DEVELOP POINTER TO CURRENT
         SLL   WKREG2,4                 EXTENT IN THE DEB
         AR    WKREG2,DEBREG
         LA    IOBREG,0(0,IOBREG)      BE SURE HI-ORDER BYTE IS ZERO
         LA    WKREG3,3(0,IOBREG)       SET CCHH INDEX TO LAST H
         L     CCHH,IOBCSW+4           LOAD CURRENT CCHH TO AN ACCUM.
         TM    BYTEDEV(WKREG1),BYTE     ARE BYTES NON-CONTIGUOUS
         BZ    DOWNONE                  BRANCH IF CONTIGUOUS ADDRESS
ADDONE   AH    CCHH,ONE                ADD ONE TO THE LO-ORDER BYTE
         TM    BYTEDEV(WKREG1),BYTE    ARE BYTES NON-CONTIGUOUS
         BC    1,USEBYTE                YES, TREAT EACH SEPARATELY
         STH   CCHH,IOBCSW+4-IOBDEF(0,WKREG3)  STORE NEW CC OR HH
         CLC   IOBCSW+4-IOBDEF(2,WKREG3),IOBCSW-IOBDEF(WKREG3)
*                                            CHECK FOR VALID VALUE
         BC    4,TSTEXT                ADDRESS VALID, CHECK EXTENT
         SRL   CCHH,16                 SHIFT TO CC VALUE
         MVC   IOBCSW-IOBDEF+4(2,WKREG3),ZEROS  ZERO BYTES PROCESSED
         BCTR  WKREG3,0                DECREMENT THE CCHH INDEX
DOWNONE  BCTR  WKREG3,0
         CR    WKREG3,IOBREG           HAVE ALL BYTES BEEN PROCESSED
         BC    10,ADDONE                NO, LOOP TO ADD ONE TO NEXT BYT
*
NEXTEXT  IC    WKREG3,DCBFDAD          INCREMENT M AND SEE IF THIS WAS
         LA    WKREG3,1(0,WKREG3)       THE LAST EXTENT.
         STC   WKREG3,DCBFDAD
         CLC   DCBFDAD(1),DEBNMEXT
         BC    8,SETEOV                 YES, GO SET EOV BIT
         LA    WKREG2,16(0,WKREG2)     INCREMENT TO NEXT EXTENT
         MVC   DCBFDAD+1(6),DEBBINUM-DEB(WKREG2)  MOVE BBCCHH TO DCB
RESETBAL MVI   DCBFDAD+7,0             MOVE A ZERO TO R BYTE
         L     WKREG3,IOBCCW1          MOVE A ZERO TO          @ZA30898
         MVI   ONEBYTE(WKREG3),0             SECTOR VALUE      @ZA30898
         MVC   DCBTRBAL,TRKL(WKREG1)   RESET TRACK BALANCE     @ZA30898
*
         CH    WKREG5,DCBTRBAL         WILL THE NEW TRACK HOLD ONE RCD.
         BC    12,FITS                  YES, GO DECREMENT TRACK BALANCE
ABEXIT   EQU   *                        ABEND EXIT               YM3919
         OI    DCBIFLGS,DCBIFEC         SET ERROR FLAGS ON       YM3919
*                                       TO PREVENT IOS FROM      YM3919
*                                       WRITING R0 DURING CLOSE  YM3919
*                                       IF AN ATTEMPT IS MADE    YM3919
         DMABCOND  205,SVC=YES,DCB=(DCBREG) BR PROB DET TO ABEND Y02072
*
USEBYTE  STC   CCHH,IOBCSW+4-IOBDEF(0,WKREG3)  STORE THIS BYTE AND
         SRL   CCHH,8                   SHIFT TO THE NEXT ONE
         CLC   IOBCSW+4-IOBDEF(1,WKREG3),IOBCSW-IOBDEF(WKREG3)
*                                                 THIS BYTE VALID
         BC    4,TSTEXT                YES, GO CHECK EXTENT LIMIT
         MVI   IOBCSW+4-IOBDEF(WKREG3),0  NO,ZERO INVALID BYTE AND
         BC    15,DOWNONE               GO LOOK AT THE NEXT ONE
*
TSTEXT   CLC   IOBCSW+4(4),DEBENDCC-DEB(WKREG2)  ADDRESS WITHIN EXTENT
         BC    2,NEXTEXT               NO, SEE IF THERE'S ANOTHER EXT
         MVC   DCBFDAD+3(4),IOBCSW+4   YES, MOVE NEW CCHH TO DCB
         BC    15,RESETBAL              AND GO RESET TRACK BALANCE
*
*
*
EXCP     EQU   *                                                 20201
         SR    PARAM1,PARAM1            PRIME FOR NON RPS        20201
         CLI   IOBCCW1,SETSECT          IS THIS RPS CHANNEL PGM  20201
         BNE   SKIPCARN                 IF NOT, SKIP MOVING OF   20201
*                                       SECTOR                   20201
*                                            VALUE TO SECTOR1
         LA    PARAM1,D16               PRIME FOR RPS            20201
SKIPCARN EQU   *                                                 20201
         TM    DCBCIND2,X'20'           ARE WE HERE TO WRITE R0  A27066
*                                       ONLY                     A27066
         BNO   EXCPA                    NO BR TO EXCP            A27066
         LA    PARAM1,IOBCCW5(PARAM1)  PUT ADDR OF WRT R0 CCW    M6283
         TM    DCBOPTCD,WRTCHK          STRING IN IOB CHANNEL    A27066
*                                       PROGRAM                  A27066
         BZ    NOVERIFY                 START ADDR. (CCW5 OR     20201
*                                       CCW8                     A27066
         LA    PARAM1,IOBCCW8          DEPENDING IF WRITE        M6477
*                                       VALIDITY                 A27066
         CLI   IOBCCW1,SETSECT          IS THIS RPS              20201
         BNE   NOVERIFY                 NO, DONT INCREMENT & BR  20201
         LA    PARAM1,D24(0,PARAM1)     YES INCREMENT            20201
NOVERIFY EQU   *                                                 20201
         ST    PARAM1,IOBSTART          CHECK WAS SPECIFIED)     A27066
EXCPA    EQU   *                                                 A27066
         LA    PARAM1,8(0,IOBREG)       SET IOS IOB POINTER      A27066
         EXCP  (1)
*
         TM    DCBCIND2,X'20'           IF ENTERED FROM CLOSE TO A27066
*                                       WRITE                    A27066
         BO    RETURN                   R0-RETURN TO CLOSE       A27066
*
EOVTST   TM    IOBLINK,EOVBIT           IF ENTERED BY EOV        YM6555
         BNOR  WKREG1                   RETURN TO THE BAL+4
*
         NI    IOBLINK,X'FF'-EOVBIT     TURN OFF EOV BIT         YM6555
         NI    IOBLINK,X'FF'-EOVRET     TURN OFF EOV RETURN BIT  YM6555
         BR    EOVRETRN                 ELSE RETURN TO EOV
*
**********************************************************************
*
ZEROS    DC    H'0'                     ZERO CONSTANT
ONE      DC    H'1'      CONSTANT ONE
SETSECT  EQU   X'23'                    SET SECTOR COMMAND       20201
TBOVHD   EQU   X'08'                    TWO BYTE OVERHEAD INDIC  20201
DCCHN    EQU   X'3F'                    DATA/COMMAND CHN USE     20201
CCHN     EQU   X'40'     COMMAND CHAIN FLAG
WRTCHK   EQU   X'80'     WRITE CHECK OPTION
DUMMY    EQU   X'10'     WRITE DUMMY TYPE
WZEROBIT EQU   X'40'     LAST I/O WAS WRITE R0
EOVBIT   EQU   X'80'     THIS WRITE NOT SCHEDULED BECAUSE OF EOV
NOTEOV   EQU   X'7F'     ALL BITS EXCEPT USCHEDULED BECAUSE OF EOV
VOLFUL   EQU   X'20'     VOLUME FULL BIT
*
*      DIRECT ACCESS DEVICE TABLE DEFINITION
D1       EQU   1                        1 BYTE DISPLACEMENT      20201
ONEBYTE  EQU   1                        ONE BYTE QTY AND         20201
*                                       DISPLACEMENT             20201
Q3       EQU   3                        3 BYTE QUANTITY          20201
D4       EQU   4                        4 BYTE DISPLACEMENT      20201
D6       EQU   6                        6 BYTE DISPLACEMENT      20201
D16      EQU   16                       SIXTEEN BYTE             20201
*                                       DISPLACEMENT             20201
D24      EQU   24                       24 BYTE DISPLACEMENT     20201
BYTE     EQU   2         BYTES OF  CCHH ARE NON-CONTIGUOUS
OVERK    EQU   8         OFFSET TO KEY OVERHEAD
OVERI    EQU   6                   INTERMEDIATE RECORD OVERHEAD
OVERL    EQU   7                   LAST RECORD OVERHEAD
TOLER    EQU   10                  TOLERANCE FACTOR
TRKL     EQU   4                   BYTES ON TRACK
MAXCC    EQU   0                   NO. OF CYLINDERS, TRACKS
BYTEDEV  EQU   9                   FLAG, BYTES ARE NON-CONTIGUOUS
EOVRET   EQU   X'10'                    BIT INDICATING CALLER    YM6555
*                                       OF THIS MODULE WAS EOV   YM6555
MODID    DC    C'IGG019DA'              MODULE ID                Y02072
FIX      DC    C'OZ30898 '              LATEST FIX IN MODULE     YM7563
DATE     DC    CL8'&SYSDATE'            DATE OF LATEST FIX       YM7563
PATCH    DC    XL50'0'                  PATCH AREA               Y02072
         EJECT
*************************  DCB DEFINITION  ****************************
         DCBD  DSORG=(PS),DEVD=(DA)
         EJECT
*************************  IOB DEFINITION  ****************************
IOBDEF   DSECT      I/O BLOCK DEFINITION
IOBLINK  DS    F         IOB LINK ADDRESS
IOBIOBA  DS    F         IOB ADDRESS FOR EOV
IOBFLAG1 DS    CL1       ERROR FLAG 1
IOBFLAG2 DS    CL1       ERROR FLAG 2
IOBSENSE DS    CL2       I/O SENSE BITS
IOBECBPT DS    F         ECB ADDRESS
IOBCSW   DS    D         CSW STORED BY IOS
IOBSIOCC DS    0BL1      SIO CONDITION CODE
IOBSTART DS    F         CHANNEL PROGRAM STARTING CCW
IOBDCBPT DS    F         DCB ADDRESS
IOBRESTR DS    F         CHANNEL PROGRAM RESTART ADDRESS
IOBINCAM DS    CL2       BLOCK INCREMENT AMOUNT
IOBERRCT DS    CL2       ERROR COUNTS
IOBSEEK  DS    D         SEEK ADDRESS
IOBDNRCF DS    D         NEW RECORD COUNT FIELD
IOBR0CNT DS    D         COUNT FIELD OF R0
IOBR0DAT DS    D         DATA FIELD OF R0
IOBCCW1  DS    D         FIRST CCW OF CHANNEL PROGRAM
IOBCCW2  DS    D
IOBCCW3  DS    D
IOBCCW4  DS    D
IOBCCW5  DS    D
IOBCCW6  DS    D
IOBCCW7  DS    D
IOBCCW8  DS    D
IOBCCW9  DS    D
IOBCCW10 DS    D
IOBCCW11 DS    D
IOBCCW12 DS    D
IOBCCW13 DS    D
IOBCCW14 DS    D         LAST CCW OF LONGEST CHANNEL PROGRAM
*
*************************  DECB DEFINITION  ***************************
*
DECBDEF  DSECT     DATA EVENT CONTROL BLOCK
DECSDECB DS    F         STANDARD ECB
DECTYPE  DS    CL2       TYPE AND OPTIONS
DECLNGTH DS    CL2       DATA LENGTH
DECDCBAD DS    F         DCB ADDRESS
DECAREA  DS    F         AREA ADDRESS
DECIOBPT DS    F         IOB ADDRESS
DECKYADR DS    F
DECOFSET DS    CL2
DECRESPN DS    CL1
         EJECT
*************************  DEB DEFINITION  ****************************
*
DEB      DSECT
         DS    0F
DEBNMSUB DS    0CL1
DEBTCBAD DS    CL4
DEBAMLNG DS    0CL1
DEBDEBAD DS    CL4
DEBOGLGS DS    0CL1
DEBIRBAD DS    CL4
DEBOPATB DS    0CL1
DEBSYSPG DS    CL4
DEBNMEXT DS    0CL1
DEBUSRPG DS    CL4
DEBPRIOR DS    0CL1
DEBECBAD DS    CL4
DEBPROTG DS    0CL1
DEBDEBID DS    0CL1
DEBDCBAD DS    CL4
DEBEXSCL DS    0CL1
DEBAPPAD DS    CL4
DEBDVMOD DS    0CL1
DEBUCBAD DS    CL4
DEBBINUM DS    CL2
DEBSTRCC DS    CL2
DEBSTRHH DS    CL2
DEBENDCC DS    CL2
DEBENDHH DS    CL2
DEBNMTRK DS    CL2
DEBSUBID EQU   0         SUBROUTINE ID'S
         END
