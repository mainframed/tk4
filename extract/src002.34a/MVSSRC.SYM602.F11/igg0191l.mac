  TITLE 'IGG0191L--STAGE TWO OPEN EXECUTOR FOR CREATE BDAM'      S19015
IGG0191L CSECT
*                                                                     *
*MODULE NAME - IGG0191L                                               *
*                                                                     *
*DESCRIPTIVE NAME - STAGE TWO OPEN EXECUTOR FOR BDAM CREATE           *
*                                                                     *
*COPYRIGHT - NONE                                                     *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*                                                                     *
*          RELEASE 19 CHANGES/DELETIONS
*1020005000-005600,026200,044400,044600-060400,066400,081600-    S19015
*1020084200,087600,088800,091000                                 S19015
*                                                                M3933
*          RELEASE 20 CHANGES/DELETIONS
*1180011400,017200,036600,080800                                 S20201
*          RELEASE 21 CHANGES/DELETIONS
*0072034600-034750                                               A42456
*                                                               SA53272
*017400-017520                                                  SA55520
*                                                               SA55544
*                                                               SA60763
*          RELEASE VS1-1 CHANGES/DELETIONS
*          RELEASE VS2-1 CHANGES/DELETIONS
*          RELEASE VS1-2 CHANGES/DELETIONS
*          RELEASE VS2-2 CHANGES/DELETIONS
*067200,067600-068960,073400-073600,077400,079000-079400,        Y02072
*080220-080260,080340                                            Y02072
*                                                                YM1140
*                                                                YM2886
*          RELEASE VS2-3 CHANGES/DELETIONS
*                                                              @Z30TSMI
*          CHANGES SUBSEQUENT TO VS2-3
*C025320,089982                                                 ZA10231
*
*STATUS CHANGE LEVEL 010
*
*    THIS EXECUTOR IS SPLIT INTO IGG0199L AT RELEASE 19.THE NEW
*    EXECUTOR WILL BE XCTLED FROM THIS TO FINISH CCW CONSTRUCTION
*FUNCTIONS- THIS ROUTINE IS GIVEN CONTROL AFTER THE DEB HAS BEEN
*    CONSTRUCTED AND HAS THE FOLLOWING FUNCTIONS,
*    1. OBTAIN CORE FOR IOB-CHANNEL PROGRAMS AND INITIALIZE THOSE AREAS
*       (AN AUDIT TRAIL BIT IS SET TO INDICATE CORE WAS OBTAINED FOR
*       THE IOBS. THIS BIT WILL BE INTERROGATED BY THE FORCE CLOSE
*       EXECUTOR, SHOULD AN ABEND OCCUR DURING OPEN PROCESSING.)
*    2. LOAD THE CHECK ROUTINE AND A WRITE ROUTINE.
*
*ENTRY POINT- ENTRY IS TO THE FIRST BYTE OF CODE BY A XCTL ISSUED BY
*    THE PREVIOUS EXECUTOR.
*
*INPUT- REGISTERS 5,6,7,8 HAVE BEEN POSITIONED AS FOLLOWS,
*    5 = BEGINNING OF THE OPEN PARAMETER LIST
*    6 = BEGINNING OF THE WHERE-TO-GO TABLE  (WTG)
*    7 = CURRENT ENTRY IN THE PARAMETER LIST
*    8 = CURRENT ENTRY IN THE WTG TABLE
*
*OUTPUT- THE SPECIFIED NUMBER OF IOB-CHANNEL PROGRAMS WILL BE LINKED TO
*    THE DCB, A CHECK AND A WRITE ROUTINE WILL HAVE BEEN LOADED AND
*    THEIR ADDRESSES INSERTED IN THE DCB AND THEIR ID'S INSERTED IN THE
*    DEB. THE REGISTERS 7 AND 8 WILL BE POSITIONED AT THE NEXT
*    NON-ZERO ENTRY IN THE PARAMETER LIST AND WTG TABLE.
*
*EXTERNAL ROUTINES-
*
*EXIT- AT THE INSTRUCTION LABELED 'XCTLRTN', THE PARAMETERS FOR XCTL
*    ARE SET UP AND XCTL ISSUED FOR THE NEXT NON-ZERO ENTRY IN THE
*    WTG TABLE.
*EXIT ABNORMAL-IF THE RECORD FORMAT IS NOT SPECIFIED (RECFM=0) OR
*    IF THE MACRF FIELD SPECIFIES EITHER INPUT MACRO(READ OR GET)
*    AN ERROR CONDITION EXISTS. CONTROL IS TRANSFERRED TO THE PROBLEM
*    DETERMINATION MODULE, IGG0196M, WHICH WILL ISSUE ABEND 013.
*
*    IF RECFM=F AND TRACK-OVERFLOW,IS SPECIFIED,EXECUTOR IGG0191M
*    WILL COMPLETE THE CONSTRUCTION OF IOBS AND CHANNEL PROGRAMS
*
*    OTHER THAN THE ABOVE,EXECUTOR IGG0199L WILL CONSTRUCT CHANNEL
*    PROGRAMS
*
*TABLES/WORK AREA- 1. COMMUNICATION VECTOR TABLE (CVT) IS USED TO
*    LOCATE THE DIRECT ACCESS DEVICE TABLE, AND THE SVC DCB ADDRESS.
*    2.DIRECT ACCESS DEVICE TABLE (DADT) IS USED TO OBTAIN THE TRACK
*      LENGTH FOR THE DEVICE.
*    3.WHERE-TO-GO TABLE IS CONSTRUCTED BY THE INITIAL OPEN ROUTINE
*      AND CONSISTS OF,  2 BYTE ID OF THE FIRST EXECUTOR FOR THIS DCB
*                        3 BYTE TTR OF THAT EXECUTOR
*                        3 BYTE ADDRESS OF A WORK AREA FOR THIS DCB
*    4.CORRESPONDING TO EACH ENTRY IN THE WTG TABLE IS AN ENTRY IN A
*      PARAMETER LIST,   1 BYTE ATTRIBUTE (INPUT, OUTPUT, UPDATE)
*                        3 BYTE DCB ADDRESS
*
*ATTRIBUTES- THIS ROUTINE IS REENTRANT, EXECUTED ENABLED, PRIVILEGED.
*    IT WILL EXECUTE IN DATA MANAGEMENT KEY FOR ALL BUT IOB CHAINING
*    WHICH WILL EXECUTE IN USER KEY.
*
*MACROS - MODESET,GETMAIN,LOAD,XCTL
         EJECT
*
*
*   REGISTER USAGE
*
         USING STEPONE,RBASE
         USING DEBBASIC,RDEB
         USING IHADCB,RDCB
         USING FORCORE,RCORE                                     Y01021
         USING WTG,RWTG
         USING WTGENTRY,RWTGC
*
RE       EQU   0         WORK/PARAMETER REGISTER
RF       EQU   1         WORK/PARAMETER REGISTER
RDCB     EQU   2         DCB ADDRESS
RBASE    EQU   3         BASE FOR THIS MODULE
RCORE    EQU   4         DCB WORK AREA ADDRESS
RPAR     EQU   5         POINTER TO THE PARAMETER LIST
RWTG     EQU   6         POINTER TO THE WHERE-TO-GO TABLE
RPARC    EQU   7         CURRENT ENTRY IN PARAMETER LIST
RWTGC    EQU   8         CURRENT ENTRY IN WHERE-TO-GO TABLE
RTIOT    EQU   9         TIOT ADDRESS
RWORK    EQU   9         WORK REGISTER                           Y02072
RUCB     EQU   10        UCB ADDRESS
RDEB     EQU   11        DEB ADDRESS
RB       EQU   12        WORK REGISTER
RC       EQU   13        WORK REGISTER
RD       EQU   14        WORK REGISTER
RJ       EQU   15        WORK/PARAMETER REGISTER
*
*
*
         BALR  RBASE,0                 ESTABLISH BASE FOR THIS MODULE
STEPONE  L     RDCB,0(0,RPARC)         LOAD DCB ADDRESS
         L     RCORE,4(0,RWTGC)        LOAD ADDRESS OF DCB WORK AREA
         L     RDEB,DCBDEBAD           LOAD DEB ADDRESS FROM DCB
*
*   INITIALIZE THE DCB FIELDS REQUIRED FOR THE LOADING OF THE DATA SET
*
         TM    DCBRECFM,X'C0'           WAS RECORD FORMAT OMITTED
         BNZ   NOTOMIT                  NO, CHECK V OR F         S20201
         LA    RE,105                   INTERNAL RET CODE IN R0 SA55520
         B     CALLPD                   BR TO PROB DETERMINATON SA55520
NOTOMIT  EQU   *                                                 S20201
         CLI   DCBMACR1,0               READ OR GET SPECIFIED   SA60763
         BE    NOTREAD                  BR IF NOT, OK           SA60763
         LA    RE,229                   INTERNAL RET CODE IN R0 SA60763
         B     CALLPD                   BR TO PROB DETERMINATON SA60763
NOTREAD  EQU   *
         IC    RB,DCBDEVT               GET DEVICE TYPE FROM THE DCB
         LA    RD,15                    USE THE LO-ORDER 4 BITS AS AN
         NR    RB,RD                    OFFSET TO A ONE BYTE OFFSET IN
         L     RC,CVTPTR(0,0)           THE DEVICE TABLE
         USING CVT,RC
         L     RC,CVTZDTAB              GET DADT ADDRESS FROM CVT
         DROP  RC
         IC    RD,0(RB,RC)              PICK UP OFFSET ENTRY IN DADT
         AR    RC,RD                    COMBINE OFFSET BYTE,TABLE ADDR.
         USING DVCT,RC                  EST DEV CHAR TAB BASE    Y02072
         MVC   DCBTRBAL,DVCTRKLN        INITIALIZE TRACK BALANCE Y02072
         DROP  RC                       DROP DEV CHAR TAB BASE   Y02072
         ST    RC,DCBDVTBL              AND DEVICE TABLE ADDRESS
         XC    DCBCIND1(2),DCBCIND1     CLEAR INDICATOR BYTES
*
*   CALCULATE THE SIZE OF EACH IOB REQUIRED AND MULTIPLY BY THE NO. OF
*    IOBS. GET CORE AND CLEAR THAT CORE TO ZERO.
*
         LA    RC,SZFNOWC               SET IOB SIZE TO FORMAT F,NO WC
         LA    RD,SZWCF                 PRE-SET WRITE CHECK INCREMENT
         TM    JFCBMASK+D6,NONCARN      IS THIS A REC REDY       S20201
*                                       DEVICE                   S20201
         BO    NOTCARN1                 NO,SKIP TWO INSTRUCTIONS S20201
         LA    RC,CARN24(RE,RC)         YES, INCREMENT C.P. AND  S20201
         LA    RD,CARN16(RE,RD)         WRTCHK PGM SIZE          S20201
NOTCARN1 EQU   *                                                 S20201
         TM    DCBRECFM,VORU            IS RECORD FORMAT FIXED
         BNO   NOTV                     YES,USE PRESET VALUES
         LA    RD,SZWCV                 SET WC INCR FOR V,U RECORDS
         LA    RC,SZVORU(0,RC)          INCREMENT FOR V,U RECORDS
         TM    JFCBMASK+D6,NONCARN      ARE WE TOYING WITH RPS   S20201
         BO    NOTV                     NO,SKIP NEXT TWO         S20201
*                                       INSTRUCTIONS             S20201
         LA    RD,CARN8(RE,RD)          YES, ALLOW FOR WRTCHK    S20201
*                                       V/U CCW'S AND FOR V/U
         LA    RC,CARN8(RE,RC)          CCWS                     S20201
NOTV     TM    DCBRECFM,OFLOWOPT        IS TRACK OVERFLOW TO BE USED
         BC    8,TSTWCOPT               NO, GO TEST WRITE CHECK OPTION
         LA    RC,OFLOWSZ               SET BASIC IOB SIZE
         LA    RD,OFLWCSZ               AND WRITE CHECK INCREMENT
         TM    JFCBMASK+D6,NONCARN      DOES DEVICE HAVE RPS     S20201
         BO    NOTCARN2                 NO,SKIP FOLLOWING        S20201
*                                       INSTRUCTIONS             S20201
         LA    RC,OVFLCARN(RE,RC)       YES, ALLOW SPACE TO BLD  S20201
*                                       AN OVERFLOW CHAN PGM
         LA    RD,OVFCARWC(RE,RD)       WITH WRT CHK             S20201
NOTCARN2 EQU   *                                                 S20201
         LA    RF,2                     INITIALIZE SEGMENT COUNT
         L     RB,DCBDVTBL              LOAD DEVICE CHAR TAB    SA55544
         USING DVCT,RB                  ESTABLISH DEVTAB BASE   SA55544
         SR    RE,RE                    CLEAR R0                SA55544
         IC    RE,DVCOVLB               GET LAST BLK OVERHEAD   SA55544
         TM    DVCFLAGS,DVC2BOV         IS IT 2 BYTE OVERHEAD   SA55544
         BNO   NOT2BYTE                 BRANCH IF NOT 2 BYTES   SA55544
         LH    RE,DVCOVHD               ELSE LOAD BOTH BYTES    SA55544
         DROP  RB                       DROP DEV CHAR TAB BASE  SA55544
NOT2BYTE EQU   *                                                SA55544
         LH    RB,DCBTRBAL              LOAD TRACK BALANCE      SA55544
         SR    RB,RE                    SUBTR OVERHEAD OF LAST  SA55544
*                                       REC FROM TRK BALANCE    SA55544
         LH    RE,DCBBLKSI              SET REGISTER RE TO DATA SA55544
         BCTR  RE,0                     LENGTH MINUS ONE        SA55544
EACHSEG  SR    RE,RB                    (DATA LENGTH-1)-TRK LG  SA55544
         BC    12,OFLSZSET              ALL OVERFLOW SEGMENTS COUNTED
         LA    RC,OFLINCSZ(0,RC)        INCREMENT BOTH IOB SIZE
         LA    RD,OFLWCINC(0,RD)        REGISTERS
         TM    JFCBMASK+D6,NONCARN      IS RPS FEATURED          S20201
         BO    NOTCARN3                 NO, SKIP RPS INSTRUCTION S20201
         LA    RC,OFCARSEG(RC)          YES, ALLOW FOR OVERFLOW ZA10231
NOTCARN3 EQU   *                                                 S20201
         LA    RF,1(0,RF)               INCREMENT SEGMENT COUNT
         B     EACHSEG                  LOOP
*
OFLSZSET STC   RF,DCBEOBR+1             STORE SEGMENT COUNT IN DCB
*
TSTWCOPT TM    DCBOPTCD,WRTCHK          IS WRITE CHECK SPECIFIED
         BC    8,TSTNCP                 NO, GO DETERMINE NO. OF IOBS
         AR    RC,RD                    YES, ADD FOR WRITE CHECK CCWS
*
TSTNCP   SR    RB,RB                    INSERT NUMBER OF CHANNEL PGMS
         IC    RB,DCBNCP
         LTR   RB,RB
         BC    7,*+8
         LA    RB,1                     IF NOT SPECIFIED, ASSUME ONE
         STC   RB,DCBNCP                STORE DEFAULT IN DCB     S19015
         LR    RUCB,RB                  SAVE NO. OF CHANNEL PROGRAMS
         LR    RTIOT,RC                 SAVE IOB LENGTH
         SRL   RTIOT,3                  DIVIDE FOR DOUBLE WORD COUNT
         STC   RTIOT,DCBIOBL            ST IOB LENGTH IN DOUBLE WORDS
         SLL   RTIOT,3                  RESTORE FULL IOB LENGTH
         MR    RB,RB                    MULTIPLY LENGTH X NUMBER
*
         TM    DCBRECFM,OFLOWOPT        IS TRACK OVERFLOW USED
         BC    8,GETIOBS                NO, GO TO GET CORE
         SR    RE,RE                    CLEAR REGISTER
         L     RF,DCBDVTBL              GET ADDR OF THE DADT
         USING DVCT,RF                  EST DEV CHAR TAB BASE    Y02072
         SR    RB,RB                    CLEAR REGISTER
         SR    RJ,RJ                    CLEAR REGISTER
         IC    RJ,DVCOVLB               OVERHEAD FOR LAST RECORD Y02072
         TM    DVCFLAGS,DVC2BOV         TWO BYTE OVERHEAD USED   Y02072
         BNO   MZ0010                   BRANCH NO                S20201
         LH    RJ,DVCOVHD               GET TWO BYTE OVERHEAD    Y02072
MZ0010   EQU   *                                                 S20201
         IC    RE,DCBKEYLE              GET KEY LENGTH IF THERE IS ONE
         LTR   RE,RE                    TEST TO SEE IF THERE ARE KEYS
         BC    7,*+8                    YES GO ON, IF NOT
         IC    RB,DVCOVNK               GET OVERHEAD FOR KEYS    Y02072
         DROP  RF                       DROP DEV CHAR TAB BASE   Y02072
         SR    RJ,RB                    SUBTRACT KEY O'HEAD IF NO KEYS
         AR    RE,RJ                    ADD ON OVERHEAD
         AH    RE,DCBBLKSI              DEVELOP KEY LENGTH PLUS DATA LG
         STH   RE,DCBOFFSR              STORE TOTAL LAST RECORD SIZE
         CH    RE,DCBTRBAL              COMPARE RECORD SIZE TO TRACK
         BNH   ADDERASE                 LENGTH. IF SMALLER BRANCH
         OI    DCBEOBW+3,X'FF'          MARK ERASE CCWS INCLUDED
ADDERASE EQU   *
         LA    RC,ERSINC(0,RC)          ADD CORE FOR ERASE CCW  SA53272
         TM    JFCBMASK+D6,NONCARN      IS DEVICE RPS           SA53272
         BO    GETIOBS                  NO, GO GET CORE         SA53272
         LA    RC,CARN24(RE,RC)         YES, ADD MORE CORE FOR  SA53272
*                                       ERASE CCWS
*
GETIOBS  EQU   *                        OBTAIN CORE FOR ALL IOBS AND
*                                       CHANNEL PROGRAMS
*
         MODESET  KEYADDR=DXUKEY,WORKREG=12  CHANGE TO USER KEY  Y02072
*
         LA    RE,SUBPOOL0              SET SUBPOOL NO. TO 0     Y02072
         SLL   RE,24
         LR    RB,RC                    SAVE SIZE OF CORE        S20201
*                                       ACQUIRED                 S20201
         TM    JFCBMASK+D6,NONCARN      IS THIS RPS              S20201
         BO    GETSPACE                 NO, GO ISSUE A GETMAIN   S20201
         LA    RC,SECTAREA(0,RC)        ELSE INCREMENT FOR       S20201
*                                       SECTOR CORE              S20201
GETSPACE EQU   *                                                 S20201
         OR    RE,RC                    MOVE PARAMETER TO REGISTER 0
         GETMAIN R,LV=(0)
*
         MODESET  EXTKEY=DATAMGT        RETURN TO DATAMGT KEY    Y02072
*
         ST    RF,DCBIOBA               STORE FIRST IOB ADDRESS AND
         OI    DXATEXC1,FCAOIOB         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING IOBS GOTTEN   Y02072
         AR    RB,RF                    LOCATE SECTOR STORAGE    S20201
*                                       ADDR                     S20201
         LR    RE,RB                    SAVE SECTOR ADDRESS      S20201
         LR    RJ,RF                    SAVE ADDRESS OF IOB CORE
         IC    RD,CON255                SET BYTE COUNT FOR CLEAR INSTR.
         LR    RB,RC                    INITIALIZE RB TO TOTAL SIZE
*
         MODESET   KEYADDR=DXUKEY,WORKREG=13  CHANGE TO USER KEY TO    X
                                        CHAIN THE IOBS           Y02072
LOOP     SH    RB,CON256                SUBTRACT LENGTH OF ONE CLEAR
         BC    12,LASTEX                IF ZERO OR MINUS GO FINISH CLR.
         EX    RD,CLRINST               EXECUTE A 256 BYTE CLEAR INSTR.
         LA    RF,256(0,RF)             INCREMENT THE AREA ADDRESS
         B     LOOP                     AND REPEAT
*
CLRINST  XC    0(1,RF),0(RF)            EXECUTED-SET 256 BYTES TO ZERO
*
LASTEX   AR    RB,RD                    RESTORE RB TO LENGTH MINUS ONE
         EX    RB,CLRINST               AND CLEAR REMAINING LENGTH
*
*   LINK THE IOBS TOGETHER AND LINK THE FIRST ONE TO THE DCB.
*
         USING IOBBSAMN,RF              ESTABLISH IOB BASE
         LR    RF,RJ                    INITIALIZE TWO REGS TO IOB1
         ST    RE,IOBSTART              STORE SECTOR ADDRESS
*                                       TEMPORARILY
         B     LINKIOB1                 GO TEST FOR LAST IOB FOUND
NEXTLINK AR    RJ,RTIOT                 INCREMENT BY IOB SIZE
         ST    RJ,IOBNIOBA              STORE AS FORWARD POINTER
         LR    RF,RJ                    INCREMENT IOB BASE TO NEXT IOB
LINKIOB1 OI    IOBFLAG2,IOBRRT3         MAKE EXCP RELATED REQ.   Y02072
*                                       PROCESSING TYPE 3        Y02072
         BCT   RUCB,NEXTLINK            TEST-ANY MORE IOBS BEYOND THIS
         L     RJ,DCBIOBA               NO, LOAD AND STORE ADDRESS OF
         ST    RJ,IOBNIOBA              IOB1 IN LAST IOB
         DROP  RF
*
         MODESET  EXTKEY=DATAMGT        RETURN TO DATA MGT KEY   Y02072
*
         TM    DCBEOBW+3,X'FF'          ARE OVERFLOW ERASE CCWS NEEDED
         BC    12,NOERASE               NO, GO INITIALIZE IOBS
         AR    RF,RTIOT                 DEVELOP AND STORE THE ADDRESS
         ST    RF,DCBEOBW               OF THE ERASE CCWS
GETID2   MVC   WTGIDTTR,IDNEXT          ID OF NXT EXECUTOR FOR @Z30TSMI
         B     LDRTN                    THIS DCB, GO LOAD MODULES
*
*
NOERASE  EQU   *
         TM    DCBRECFM,OFLOWOPT        IS OVERFLOW OPTION SELECTED
         BC    1,GETID2                 YES, GO MOVE NEXT ID-TTR
         MVC   WTGIDTTR,ID9L            MOVE ID OF IGG0199L    @Z30TSMI
*
*   LOAD THE CHECK ROUTINE AND THE PROPER WRITE ROUTINE.
*
LDRTN    EQU   *
         IC    RUCB,DEBNMEXT            SET A REGISTER TO THE DEB
         SLL   RUCB,4                   SUBROUTINE ID FIELD
         LA    RUCB,DEBBASND-DEBBASIC(RUCB,RDEB)  POINT BEYOND   Y02072
*                                       DEVICE DEPENDENT SECTION Y02072
*                                       TO MODULE ID SECTION     Y02072
         SR    RF,RF
         IC    RF,DEBAMLNG
         AR    RUCB,RF
         LA    RC,IDCHK                 LOAD ADDR OF CHECK       S19015
*                                       ROUTINE ID               S19015
*
         TM    DCBRECFM,VORU            DETERMINE WHICH WRITE MODULE TO
         BC    1,LDWRTVU                LOAD
         LA    RB,IDWRTF                POSITION POINTER TO WRITE F ID
         TM    DCBRECFM,OFLOWOPT        TRACK OVERFLOW TO BE USED
         BC    8,LDWRT                  NO, LOAD IGG019DA
         LA    RB,IDWRTOF               YES, LOAD IGG019DD
LDWRT    BAL   RTIOT,MODLOAD            GO TO THE LOAD ROUTINE
         IC    RF,DCBWRITE              SAVE TOP BYTE IN FIELD
         ST    RE,DCBWRITE              STORE WRITE ROUTINE ADDRESS
         STC   RF,DCBWRITE              IN THE DCB
         LA    RB,IDCHK                 SET POINTER TO CHECK ROUTINE ID
         LR    RB,RC                    SET POINTER TO CHECK     S19015
*                                       ROUTINE I                S19015
         BAL   RTIOT,MODLOAD            GO LOAD CHECK
         IC    RJ,DCBOPTCD              STORE THE ADDRESS IN THE DCB
         ST    RE,DCBCHECK              SAVING THE TOP BYTE
         STC   RJ,DCBOPTCD
         B     SCAN                     GO SCAN FOR ANOTHER DCB PARAM.
*                                       WHICH IS UNFINISHED
*
LDWRTVU  EQU   *                                                 S19015
*
*   THE FOLLOWING ROUTINE WILL CHECK FOR RECFM=VS AND BFTEK=R.
*    YES - LOAD 'CREAT BDAM WITH SOFTWARE TRACK-OVERFLOW' ROUTINES
*    NO  - LOAD NORMAL CREAT BDAM FORMAT V/U ROUTINE
*
         TM    DCBBFTEK,SOFTTRK         TEST IF BFTEK=R IS       S19015
*                                       SPECIFIED                S19015
         BNO   LOADUV                   NO,GOTO LOAD NORMAL      S19015
*                                       ROUTINE                  S19015
*
*   WHEN RECFM=VS AND BFTEK=R,THE FOLLOWINGS ARE TO BE LOADED.
*        IGG019BR - WRITE ROUTINE
*        IGG019BS - CHECK ROUTINE
*        IGG019BT - C.E.A.
*
         LA    RB,IDBT                  LOAD ADDR OF C.E.A.      S19015
         BAL   RWORK,MODLOAD            GOTO LOAD ROUTINE        Y02072
         L     RWORK,DEBAPPAD           LOAD ADDR OF APP VECTOR  Y02072
*                                       TABLE                    S19015
         USING  DEBAVT,RWORK            ESTABLISH BASE FOR AVT   Y02072
         ST    RE,DEBCEA                STORE RTN ADDR IN AVT    Y02072
         ST    RE,DEBXCEA               STORE RTN ADDR IN AVT    Y02072
         DROP  RWORK                                             Y02072
         LA    RC,IDBS                   LOAD ADDR OF IGG019BS   S19015
         LA    RB,IDBR                   LOAD ADDR OF WRITE(VS)  S19015
         B     LDWRT                     GOTO LOAD WRITE ROUTINE S19015
*
*   NORMAL WRITE (CREATE BDAM) ROUTINE
*
LOADUV   EQU   *                                                 S19015
         LA    RB,IDWRTVU                LOAD ADDR OF NORMAL     S19015
*                                        WRITE RTN               S19015
         B     LDWRT                     GO BACK TO BRANCH TO LOAD
*
MODLOAD  EQU   *                        ROUTINE LOADS SPECIFIED MODULES
         MVC   6(2,RWTG),0(RB)          LOAD MODULE BY ID        Y02072
         LR    RE,RWTG                  SET PARAMETER REGISTER
         L     RF,CVTPTR(0,0)           GET THE LPALIB DCB ADDRESS
         USING CVT,RF
         L     RF,CVTLINK               FROM THE CVT             YM1140
         DROP  RF
*
         LOAD  EPLOC=(0),DCB=(1)        LOAD MODULE              Y02072
*
         MVC   0(2,RUCB),0(RB)          PUT SUBROUTINE ID IN THE DEB
         LA    RUCB,2(0,RUCB)           AND INCREMENT INDEX
         IC    RJ,DEBNMSUB              INCREMENT THE NUMBER OF
         LA    RJ,1(0,RJ)               SUBROUTINES FIELD IN THE DEB
         STC   RJ,DEBNMSUB
         BR    RTIOT                    RETURN TO THE BAL+4
*
*  GO TO PROBLEM DETERMINATION(IGG0196M) FOR WTP MESSAGE AND RET CODE
*
CALLPD   EQU   *                                                SA55520
         DMABCOND (0),PDLOAD,RETURN=NONE,RES=NO,REGSAVE=YES     SA55520
         B     XCTLRTN                  BRANCH TO XCTL          SA55520
*
*   SCAN THE DCB PARAMETER LIST FOR ANOTHER REQUEST FOR THIS EXECUTOR
*    IF NONE ARE FOUND TRANSER CONTROL TO THE FIRST EXECUTOR FOUND.
*
SCAN    EQU   *
         LA    RWTGC,WGOFF(0,RWTGC)     INCREMENT WHERE-TO-GO INDEX AND
         LA    RPARC,PAROFF(0,RPARC)    PARAMETER LIST INDEX
         CLC   0(2,RWTGC),AMIDCNST      IS THIS EXECUTOR NAMED AGAIN
         BCR   8,RBASE                  YES, RETURN TO STARTING POINT
         CLC   0(2,RWTGC),OPIDCNST      THIS END OF WHERE-TO-GO TABLE
         BC    7,SCAN                   NO, CONTINUE SCAN        Y02072
*
         LR    RPARC,RPAR               RESET PARAMETER LIST INDEX AND
         LA    RWTGC,32(0,RWTG)         WHERE-TO-GO INDEX TO ENTRY ONE
SCAN4ANY CLI   0(RWTGC),0               IS THIS DCB COMPLETED
         BC    7,XCTLRTN                NO, XCTL TO NAMED EXECUTOR
         LA    RWTGC,WGOFF(0,RWTGC)     YES, INCREMENT BOTH INDEX REG.S
         LA    RPARC,PAROFF(0,RPARC)
         BC    15,SCAN4ANY              AND CONTINUE SCAN
*
XCTLRTN  EQU   *
         IECRES LOAD,PREFIX=WTGPREFX,BRANCH=DIRECT,            @Z30TSMI*
               MODID=WTGENTRY           GO TO NEXT EXEC        @Z30TSMI
*
***********************************************************************
*             CONSTANTS AND EQUATES
***********************************************************************
*
WGOFF    EQU   8                       OFFSET OF ENTRIES IN WTG TABLE
PAROFF   EQU   4                       OFFSET OF ENTRIES IN PARAM. LIST
IDLENGTH EQU   2                        LEN OF ID PUT IN W-T-G   Y02072
TWO      EQU   2                        CONSTANT '2'             S19015
FIVE     EQU   5                        CONSTANT '5'             S19015
*
SUBPOOL0 EQU   0                        SUBPOOL 0 FOR USER KEY   Y02072
*
***************
*
D6       EQU   6                        OFFSET TO JFCB REC REDY  S20201
*                                       BIT                      S20201
CARN8    EQU   8                        SIZE INCREMENT FOR       S20201
*                                       WRTCHK V/U               S20201
CARN16   EQU   16                       INCREMENT FOR REGULAR    S20201
*                                       WRTCHK                   S20201
CARN24   EQU   24                       CHAN PROG SIZE INCREMENT S20201
CARN32   EQU   32                       SIZE INCREMENT FOR V/U   S20201
TBOVHD   EQU   X'08'                    TWO BYTE OVERHEAD INDIC  S20201
NONCARN  EQU   X'20'                    REC REDY TEST BIT        S20201
OVFLCARN EQU   48                       BASIC SIZE FOR OVFLO &   S20201
*                                       RPS                      S20201
OVFCARWC EQU   8                        OVFLO WRTCHK INCREMENT   S20201
OFCARSEG EQU   16                       OVFLO SEGMENT INCREMENT  S20201
OFCARWC  EQU   8                        OVFLO WRTCHK SEGMENT     S20201
*                                       INCREMENT                S20201
SECTAREA EQU   8                        SECTOR STORAGE AREA SIZE S20201
CARN80   EQU   80                       IOB OFFSET TO STORE      S20201
*                                       SECTOR STORAGE ADDRESS   S20201
*
*
NULL     EQU   0                        CONSTANT '0'             S19015
SPANNING EQU   X'08'                    RECFM=S SPECIFIED        S19015
SOFTTRK  EQU   X'20'                    BFTEK=R SPECIFIED        S19015
*                                       VECTOR                   S19015
*
TRKL     EQU   4              OFFSET TO TRACK LENGTH IN DADT
OFFLGTH  EQU   25             OFFSET IN WTG TABLE TO MODULE LGTH
SZFNOWC  EQU   128            SIZE OF IOB-RECORD FORM F, NO WRT.CHECK
SZVORU   EQU   32             SIZE INCREMENT FOR FORMAT V OR U
SZWCF    EQU   48             SIZE INCREMENT FOR WRITE CHECK - FORMAT F
SZWCV    EQU   24             SIZE INCREMENT FOR WR CHECK - FORMAT V,U
OFLOWSZ  EQU   208            SIZE(BASE) FOR OVERFLOW OPTION IOB
OFLWCSZ  EQU   64        SIZE OF WRITE CHECK FOR OVERFLOW (2 SEGMENTS)
OFLINCSZ EQU   80        SIZE INCREMENT FOR EACH ADDITIONAL SEGMENT
OFLWCINC EQU   16        SIZE INCREMENT FOR WRITE CHECK (PER SEGMENT)
ERSINC   EQU   80        SIZE INCREMENT FOR ERASE CCWS
*
OFLOWOPT EQU   X'20'          TRACK OVERFLOW OPTION
WRTCHK   EQU   X'80'          WRITE CHECK OPTION
VORU     EQU   X'40'          RECORD FORM IS VARIABLE OR UNKNOWN-UNSPEC
FIRST    EQU   1              FIRST IOB IN CORE OBTAINED BY GETMAIN
*
*
IDWRTF   DC    C'DA'                    MODULE ID OF WR-FORMAT F Y02072
IDWRTVU  DC    C'DB'                    MODULE ID OF FORMAT V,U  Y02072
IDCHK    DC    C'DC'                    MODULE ID OF CHECK RTN   Y02072
IDWRTOF  DC    C'DD'                    MODULE ID OF WRT OVFLO   Y02072
IDNEXT   DC    C'1M',VL3(IGG0191M)      TRK  OVERFLOW          @Z30TSMI
PDLOAD   DC    C'6M',VL3(IGG0196M)      PROB DETERMINATION MOD @Z30TSMI
*
*   FOLLOWINGS ARE FOR RECFM=VS AND BFTEK=R
*
ID9L     DC    C'9L',VL3(IGG0199L)      ID/TTR OF NEXT EXEC    @Z30TSMI
IDBR     DC    C'BR'                    ID/TTR OF WRITE RTN      Y02072
IDBS     DC    C'BS'                    ID/TTR OF CHECK RTN      Y02072
IDBT     DC    C'BT'                    ID/TTR OF C.E.A.         Y02072
CON256   DC    H'256'                   CONSTANT
CON255   DC    X'FF'                    CONSTANT 255
OPIDCNST DC    C'0S'                    LAST WTG ENTRY (OPEN)
MODID    DC    CL6'IGG019'              MODULE ID                Y02072
AMIDCNST DC    C'1L'                    THIS EXECUTOR'S ID
FIX      DC    C'OZ10231'               LATEST FIX FLAG         ZA10231
DATE     DC    CL8'&SYSDATE'            DATE OF LATEST FIX      ZA10231
PATCH    DC    XL((*-IGG0191L)/20)'0'   5% PATCH AREA            Y02072
*
         EJECT
***********************************************************************
*                         DSECTS
***********************************************************************
*
UCBTYPCD EQU   19             OFFSET TO TYPE CODE IN THE UCB
*
*
CVT      DSECT
         CVT
*
*
         DCBD  DSORG=(PS),DEVD=(DA)
         EJECT
         IHADVCT   DSECT=YES                                     Y02072
         EJECT
         IKJTCB
         IEZIOB                                                  Y02072
         EJECT
         IEZDEB                                                  Y02072
         EJECT
         IECDSECS  (MAIN,(IOB,NO)),WTG,PREFX,EXPAND=YES        @Z30TSMI
FORCORE  DSECT                          WORKAREA DSECT CONTINUED Y02072
*****   THE FOLLOWING ARE AUDIT TRAIL BITS SET FOR FORCE CLOSE    *****
         IHAFCAUD  ORG=YES                                       Y02072
         END
