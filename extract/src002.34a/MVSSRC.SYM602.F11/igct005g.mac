         TITLE 'IGCT005G - FREEDBUF TASK RECOVERY ROUTINE              *
                       '
IGCT005G CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(24)                                             0001
         DC    C'IGCT005G YM7568 02/15/74'                         0001
BACKUP5G DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00739-BACKUP5G)
         ENTRY BACKUP5G
         DROP  @15
@PROLOG  BALR  @09,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@09                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 200
SPDFID   EQU   X'FE'
*   SDWAPTR=GPR01P;                 /* REG 1 ON ENTRY HAS SDWA       */
         LR    SDWAPTR,GPR01P                                      0167
*   SDWAURAL=LENGTH(RECORDWK);      /* INIT LEN OF RECORDING INFO    */
         MVI   SDWAURAL(SDWAPTR),X'17'                             0168
*   RBSECPTR=SDWAPARM;              /* SDWA HAS SVRB ADDR            */
         L     RBSECPTR,SDWAPARM(,SDWAPTR)                         0169
*   WKALOCK='0'B;                   /* INITIALIZE LOCK SW OFF        */
         NI    WKALOCK(RBSECPTR),B'11111110'                       0170
*   RFY                                                            0171
*     GPR01P UNRSTD;                                               0171
*   RFY                                                            0172
*     USL BASED(DCBDYNB);           /* SET UP PERMANENT USL BASE     */
*                                                                  0172
*/********************************************************************/
*/* THE FOLLOWING ROUTINE ANALYZES THE CAUSE AND STAGE OF THE ABEND  */
*/* BY DETERMINING IF THE ABEND WAS PERCOLATED, A DUMP WAS TAKEN,    */
*/* IF IT WAS A PROGRAM CHECK, IF THERE WAS PREVIOUS RECOVERY, IF    */
*/* THE CURRENT RB FAILED OR A PREVIOUS FRR FAILED. BASED ON THIS    */
*/* ANALYSIS THE CONTROL IS TRANSFERRED TO A ROUTINE TO: 1) CHECK    */
*/* FOR USER INPUT ERRORS,  2) CLEAN UP RESOURCES AND CONTINUE TO    */
*/* TERMINATE, OR  3) TAKE AN SVC DUMP BEFORE CONTINUING TO          */
*/* TERMINATE.                                                       */
*/*          INPUT TO THIS ROUTINE IS AS FOLLOWS:                    */
*/*                    REG  5 - SDWA ADDRESS                         */
*/*                    REG  8 - SVRB ADDRESS                         */
*/*                    REG 13 - RTM SAVEAREA ADDRESS                 */
*/********************************************************************/
*                                                                  0173
*ANALYZE:                                                          0173
*   ;                               /* ANALYZE THE ERROR             */
ANALYZE  DS    0H                                                  0174
*   DO;                             /* ?IGGSTART USER(USERRTN)     0174
*                                      SDUMP(DUMPRTN) CLEAN(CLEANRTN)*/
*                                                                  0174
*/*  MACCOMP Y-2 SC1D0/SJ0204                                        */
*/*  MACSTAT Y-2 74050/YM7586                                        */
*/********************************************************************
*                                                                    */
*/* THIS ROUTINE ANALYSES FLAGS IN THE SDWA TO DETERMINE             */
*/* WHAT TYPE OF FUNCTION TO PERFORM                                 */
*/* THE FLAG COMBINATIONS TESTED AND THE ACTIONS TAKEN ARE SUMMARIZED*/
*/* IN THE FOLLOWING TABLE:                                          */
*/*                                                                  */
*/*   PREVIOUS  ×× CAUSE OF ERROR ENTRY                              */
*/*  PROCESSING ×× MCHK/PGIO/TEXC  OTHER                             */
*/*  ___________××________________________                           */
*/*       *EAS  ××        C          C                               */
*/*       *CLUP ××        C          C                               */
*/*       *STAF ××        S          S                               */
*/*       *PERC ××        C          U                               */
*/*       *NRBE ××        C          U                               */
*/*        NONE ××        C          U                               */
*/*                                                                  */
*/*       * THESE BITS ARE NOT ALL MUTUALLY EXCLUSIVE. THEY ARE      */
*/*         TESTED IN THE ORDER LISTED.                              */
*/*                                                                  */
*/*       FUNCTIONS TO BE PERFORMED:                                 */
*/*                                                                  */
*/* C (CLEANRTN)--CLEAN UP RESOURCES AND PERCOLATE ERROR             */
*/*                                                                  */
*/* S (DUMPRTN)--PREVIOUS RECOVERY ROUTINE FAILED.                   */
*/* TAKE A DUMP FOR IT, THEN TREAT AS C                              */
*/*                                                                  */
*/* U (USERRTN)--VALIDATE USER INPUT. IF IT IS IN ERROR,             */
*/* TAKE PROBLEM DETERMINATION ACTIONS AND THEN CLEAN UP.            */
*/* IF IT IS VALID, ASSUME A SYSTEM ERROR IN COVERED FUNCTION.       */
*/* TAKE A DUMP, THEN TREAT AS C                                     */
*/********************************************************************
*                                                                    */
*                                                                  0175
*     IF SDWAEAS='1'B               /* LOWER ESTAE ALREADY DUMPED    */
*         ×SDWACLUP='1'B THEN       /* OR RTM SAYS CLEANUP           */
         TM    SDWAEAS(SDWAPTR),B'00001000'                        0175
         BO    @RT00175                                            0175
         TM    SDWACLUP(SDWAPTR),B'10000000'                       0175
         BO    @RT00175                                            0175
*       GOTO CLEANRTN;              /* GO CLEAN UP & GET OUT         */
*     IF SDWASTAF='1'B THEN         /* A LOWER LEVEL ESTAE/FRR       */
         TM    SDWASTAF(SDWAPTR),B'10000000'                       0177
         BO    @RT00177                                            0177
*       GOTO DUMPRTN;               /* WAS EXECUTING AND FAILED      */
*                                   /* TAKE A DUMP FOR IT            */
*     IF SDWATEXC='1'B              /* SOME NON-PROGRAM TYPE         */
*         ×SDWAPGIO='1'B            /* ERROR HAS OCCURRED            */
*         ×SDWAMCHK='1'B THEN       /* GO CLEAN UP & GET OUT         */
         TM    SDWATEXC(SDWAPTR),B'10000011'                       0179
         BNZ   @RT00179                                            0179
*       GOTO CLEANRTN;                                             0180
*     GOTO USERRTN;                 /* CHECK USER INPUT              */
*                                                                  0181
         B     USERRTN                                             0181
*/********************************************************************
*                                                                    */
*                                                                  0182
*   END;                            /* ANALYZE ABEND CONDITION       */
*                                                                  0182
*/********************************************************************/
*/* THE FOLLOWING ROUTINE VALIDITY CHECKS ALL USER INPUT TO SVC 57   */
*/* TO DETERMINE IF THIS CAUSED THE ABEND IN FREEDBUF.  THE FOLLOW-  */
*/* ING CONTROL BLOCKS/DATA AREAS WILL BE VALIDATED WHERE APPLICA-   */
*/* BLE:  DCB, DECB, IOB, USL, AND BCB/BUFFERS/SWAS.                 */
*/*          INPUT TO THIS ROUTINE IS THE SVRB ADDRESS WHICH WAS     */
*/* PASSED IN THE SDWA FROM IGC0005G. THE SVRB WILL CONTAIN THE      */
*/* INPUT PARAMETERS TO FREEDBUF:  REG 1 - DCB ADDRESS               */
*/*                                REG 0 - DECB ADDRESS              */
*/* EACH CONTROL BLOCK IS VALIDATED BY THE SYSTEM VALIDITY CHECK     */
*/* ROUTINE.  IF ONE IS FOUND TO BE IN ERROR, THE CONTROL BLOCKS     */
*/* ALREADY VALIDATED ARE TRACED, A WTP IS ISSUED AND SETRP TO GIVE  */
*/* CONTROL TO THE RETRY ROUTINE.  IF ALL BLOCKS ARE VALID, CONTROL  */
*/* IS GIVEN TO THE SYSERRTN ROUTINE. THE REGISTER LABELED BLKCTR    */
*/* WILL BE USED TO IDENTIFY THE PARTICULAR CONTROL BLOCK BEING      */
*/* VALIDATED.  IT WILL BE INCREMENTED AFTER SUCCESSFUL VALIDATION   */
*/* OF EACH BLOCK.  THIS REGISTER IS USED THROUGHOUT THE ESTAE       */
*/* HEREAFTER AS AN INDEX TO IDENTIFY/SET THE RETURN CODE ASSOCIATED */
*/* WITH THE BLOCK FOUND TO BE IN ERROR.                             */
*/*        BLKCTR(R7) VALUES SHOULD BE INTERPRETED AS FOLLOWS:       */
*/*                 1 = DCB ERROR                                    */
*/*                 2 = DECB ERROR                                   */
*/*                 3 = BCB ERROR                                    */
*/*                 4 = USL ERROR (VIRTUAL ONLY)                     */
*/*                 5 = NEXT IOB ERROR                               */
*/*                 6 = SYSTEM ERROR                                 */
*/*                10 = ERROR IN PREVIOUS RECOVERY RTN OR ANOTHER    */
*/*                     RB LEVEL(BRANCHED TO DUMPRTN OR CLEANRTN)    */
*/********************************************************************/
*                                                                  0183
*USERRTN:                                                          0183
*   ;                               /* VALIDATE THE CONTROL BLKS     */
*                                                                  0183
USERRTN  DS    0H                                                  0184
*/*   GET THE LOCAL LOCK BEFORE VALIDATING THE CONTROL BLOCKS        */
*                                                                  0184
*   RFY                                                            0184
*     GPR00P RSTD;                                                 0184
*   GPR00P=SAVEPTR;                 /* SAVE RTM SAVEAREA AROUND      */
         LR    GPR00P,SAVEPTR                                      0185
*SETLOCK:                                                          0186
*   ;                               /* GET THE LOCAL LOCK            */
SETLOCK  DS    0H                                                  0187
*   DO;                             /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(CNTRLBLK,I
*                                      GCT005G,(FREELOCK,TRACE,CLEAN)
*                                      )                             */
*     RFY                                                          0188
*      (GPR11P,                                                    0188
*       GPR12P,                                                    0188
*       GPR13P,                                                    0188
*       GPR14P)RSTD;                                               0188
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0189
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0189
*     GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT AND 0190
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,576(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0192
*      (GPR11P,                                                    0192
*       GPR12P,                                                    0192
*       GPR13P,                                                    0192
*       GPR14P)UNRSTD;                                             0192
*   END;                            /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(CNTRLBLK,I
*                                      GCT005G,(FREELOCK,TRACE,CLEAN)
*                                      )                             */
*   SAVEPTR=GPR00P;                 /* RESTORE RTM SAVEAREA PTR      */
         LR    SAVEPTR,GPR00P                                      0194
*   RFY                                                            0195
*     GPR00P UNRSTD;                                               0195
*                                                                  0195
*/********************************************************************/
*/*       SET UP INPUT REGISTERS TO SYSTEM VALIDITY ROUTINE          */
*/*                REGISTER 1 - START OF AREA TO VERIFY              */
*/*                REGISTER 2 - END OF AREA TO VERIFY                */
*/*                REGISTER 4 - ADDRESS OF KEY - 28                  */
*/*                REGISTER 14- RETURN ADDRESS                       */
*/*                REGISTER 15- ADDRESS OF VALIDITY ROUTINE          */
*/* BLOCKS ARE VERIFIED FOR CORE OWNERSHIP AND ALIGNMENT, (WITH      */
*/* THE EXCEPTION OF THE DCB WHICH HAS NO BOUNDARY REQUIREMENTS.)    */
*/********************************************************************/
*                                                                  0196
*   RFY                                                            0196
*    (GPR01P,                                                      0196
*     GPR02P,                                                      0196
*     GPR04P,                                                      0196
*     GPR14P,                                                      0196
*     GPR15P)RSTD;                  /* RESTRICT REGS - VALID CHK     */
*   GPR04P=(ADDR(RBLINK->RBOPSW(2)))-KEYOFFS;/* ADDR OF KEY-28       */
         L     GPR04P,RBLINK(,RBSECPTR)                            0197
         LA    GPR04P,RBOPSW+1(,GPR04P)                            0197
         SH    GPR04P,@CH02596                                     0197
*   BLKCTR=1;                       /* SET CTR TO FIRST BLOCK        */
         LA    BLKCTR,1                                            0198
*DCBCHK:                                                           0199
*   ;                               /* VALIDITY CHECK THE DCB(=1)    */
DCBCHK   DS    0H                                                  0200
*   GPR01P=RBGRS1+NULLPREF;         /* DCB ADDR+NULL PREFIX          */
         LA    GPR01P,16                                           0200
         A     GPR01P,RBGRS1(,RBSECPTR)                            0200
*   GPR02P=GPR01P+DCBLEN-NULLPREF-1;/* ENDING ADDR OF DCB            */
         LR    GPR02P,GPR01P                                       0201
         SH    GPR02P,@CH03559                                     0201
*   CALL CVT0VL00;                  /* CALL SYS VAL CHCK,NO ALIGN    */
         L     @12,CVTPTR                                          0202
         L     @15,CVT0VL00(,@12)                                  0202
         BALR  @14,@15                                             0202
*   BC(7,ABEND);                    /* IF ERROR, GO TO ABEND RTN     */
         BC    7,ABEND                                             0203
*   IF DCBOFOPN='0'B THEN           /* CHECK IF DCB OPEN             */
         L     @12,DCBPTR(,RBSECPTR)                               0204
         TM    DCBOFOPN+40(@12),B'00010000'                        0204
         BZ    @RT00204                                            0204
*     GOTO ABEND;                   /* ABEND IF DCB NOT OPEN         */
*   BLKCTR=BLKCTR+1;                /* UP BLKID TO VALIDATE DECB     */
         AH    BLKCTR,@CH00083                                     0206
*DECBCHK:                                                          0207
*   ;                               /* VALIDITY CHK THE DECB(=2)     */
DECBCHK  DS    0H                                                  0208
*   GPR01P=ABS(RBGRS0);             /* DECB ADDRESS WAS INPUT        */
         L     GPR01P,RBGRS0(,RBSECPTR)                            0208
         LPR   GPR01P,GPR01P                                       0208
*                                   /* GET POS IN CASE EXTEND        */
*   GPR02P=GPR01P+DECBLEN-1;        /* ENDING ADDR OF DECB           */
         LR    GPR02P,GPR01P                                       0209
         SH    GPR02P,@CH03560                                     0209
*   CALL CVT0VL01;                  /* CALL SYS VAL CHECK+ALIGN      */
         L     @12,CVTPTR                                          0210
         L     @15,CVT0VL01(,@12)                                  0210
         BALR  @14,@15                                             0210
*   BC(7,ABEND);                    /* IF ERROR, GO TO ABEND RTN     */
         BC    7,ABEND                                             0211
*   BLKCTR=BLKCTR+1;                /* UP BLKID TO BCB(=3)           */
         AH    BLKCTR,@CH00083                                     0212
*BCBCHK1:                                                          0213
*   ;                               /* VALIDATE 1ST PART BCB(=3)     */
BCBCHK1  DS    0H                                                  0214
*   IF TCBRV^='1'B THEN             /* IS ADDRESS SPACE=REAL/VIRT    */
         L     @12,PSATOLD                                         0214
         TM    TCBRV(@12),B'10000000'                              0214
         BO    @RF00214                                            0214
*     DO;                           /* IF ADDRESS SPACE=VIRTUAL      */
*       RFY                                                        0216
*         BCBDEFV BASED(DCBBUFCB);  /* ADDRESSABILITY FOR DSECT      */
*       GPR01P=ADDR(BCBDEFV)-USLSZFST;/* SUBTRACT SIZE OF 1ST USL    */
         L     @12,DCBPTR(,RBSECPTR)                               0217
         L     @12,DCBBUFCB+16(,@12)                               0217
         LR    GPR01P,@12                                          0217
         SH    GPR01P,@CH01980                                     0217
*       GPR02P=ADDR(BCBTBRS1)+3;    /* END ADDR THROUGH SIZE FLD     */
         LA    GPR02P,BCBTBRS1(,@12)                               0218
         AH    GPR02P,@CH00107                                     0218
*     END;                                                         0219
*   ELSE                            /* IF ADDRESS SPACE=REAL         */
*     DO;                           /* GET BUFFER QUEUE ADDR         */
         B     @RC00214                                            0220
@RF00214 DS    0H                                                  0221
*       RFY                                                        0221
*         BCBDEFR BASED(DCBBUFCB);  /* ADDRESSBILITY FOR DSECT       */
*       GPR01P=ADDR(BCBDEFR);       /* BEGINNING OF BCB,NO USL       */
         L     @12,DCBPTR(,RBSECPTR)                               0222
         L     @12,DCBBUFCB+16(,@12)                               0222
         LR    GPR01P,@12                                          0222
*       GPR02P=ADDR(BCBTBRS)+3;     /* END ADDR THROUGH SIZE FLD     */
         LA    GPR02P,BCBTBRS(,@12)                                0223
         AH    GPR02P,@CH00107                                     0223
*     END;                                                         0224
*   CALL CVT0VL01;                  /* CALL SYS VAL CHECK+ALIGN      */
@RC00214 L     @12,CVTPTR                                          0225
         L     @15,CVT0VL01(,@12)                                  0225
         BALR  @14,@15                                             0225
*   BC(7,ABEND);                    /* IF ERROR, GO TO ABEND RTN     */
         BC    7,ABEND                                             0226
*                                   /* VALIDATE 2ND HALF OF BCB      */
*   GPR02P=ADDR(BCBDEFR)+BCBTBRS-1; /* END ADDR BCB/BUFFERS SIZE   0227
*                                      FIELD IS SAME LOCATION IN BOTH
*                                      VIRTUAL/ACTUAL BCBS           */
         L     @12,DCBPTR(,RBSECPTR)                               0227
         L     @12,DCBBUFCB+16(,@12)                               0227
         LR    GPR02P,@12                                          0227
         A     GPR02P,BCBTBRS(,@12)                                0227
         BCTR  GPR02P,0                                            0227
*   CALL CVT0VL01;                  /* CALL SYS VAL CHECK+ALIGN      */
         L     @12,CVTPTR                                          0228
         L     @15,CVT0VL01(,@12)                                  0228
         BALR  @14,@15                                             0228
*   BC(7,ABEND);                    /* IF ERROR, GO TO ABEND RTN     */
         BC    7,ABEND                                             0229
*   BLKCTR=BLKCTR+1;                /* UP BLKID TO USL(=4)           */
         AH    BLKCTR,@CH00083                                     0230
*USLCHK1:                                                          0231
*   ;                               /* VALIDATE 1ST OF USL(=4)       */
USLCHK1  DS    0H                                                  0232
*   IF TCBRV^='1'B THEN             /* IF ADDRESSPACE=VIRTUAL        */
         L     @12,PSATOLD                                         0232
         TM    TCBRV(@12),B'10000000'                              0232
         BO    @RF00232                                            0232
*     DO;                                                          0233
*       GPR01P=ADDR(USL);           /* PUT USL BASE IN PARM REG      */
         L     @12,DCBPTR(,RBSECPTR)                               0234
         L     @12,DCBDYNB+52(,@12)                                0234
         LR    GPR01P,@12                                          0234
*       GPR02P=ADDR(USL)+LENGTH(USLSIZE)-1;/* ADDR OF USL LG FIELD-
*                                      LG FLD 1ST 2 BYTES IN USL     */
         SH    @12,@CH03561                                        0235
         LR    GPR02P,@12                                          0235
*       CALL CVT0VL01;              /* VALIDATE 1ST 2 BYTES+ALIGN    */
         L     @12,CVTPTR                                          0236
         L     @15,CVT0VL01(,@12)                                  0236
         BALR  @14,@15                                             0236
*       BC(7,ABEND);                /* IF ERROR,GO TO ABEND RTN      */
         BC    7,ABEND                                             0237
*                                   /* VALIDATE REST OF USL          */
*       GPR02P=ADDR(USL)+USLSIZE-1; /* ENDING ADDRESS OF USL         */
         L     @12,DCBPTR(,RBSECPTR)                               0238
         L     @12,DCBDYNB+52(,@12)                                0238
         SR    GPR02P,GPR02P                                       0238
         ICM   GPR02P,3,USLSIZE(@12)                               0238
         AR    GPR02P,@12                                          0238
         BCTR  GPR02P,0                                            0238
*       CALL CVT0VL01;              /* VALIDATE 1ST 2 BYTES+ALIGN    */
         L     @12,CVTPTR                                          0239
         L     @15,CVT0VL01(,@12)                                  0239
         BALR  @14,@15                                             0239
*       BC(7,ABEND);                /* IF ERROR,GO TO ABEND RTN      */
         BC    7,ABEND                                             0240
*     END;                                                         0241
*   BLKCTR=BLKCTR+1;                /* UP BLKID TO NEXT IOB(=5)      */
@RF00232 AH    BLKCTR,@CH00083                                     0242
*IOBCHK1:                                                          0243
*   ;                               /* VALIDITY CHCK 1ST HALF(=5)    */
IOBCHK1  DS    0H                                                  0244
*   IF WKABUFAS='1'B×WKAIOBQ='1'B×WKAEXCP='1'B THEN/* NXT IOB EXISTS */
         TM    WKABUFAS(RBSECPTR),B'11100000'                      0244
         BZ    @RF00244                                            0244
*     DO;                           /* YES, THEN MUST VALIDATE IT    */
*       RFY                                                        0246
*         IOBSTDRD BASED(WKAIOBRG); /* ADDRESSABILITY FOR DSECT      */
*       GPR02P=ADDR(IOBDPLAD)-1;    /* END ADDR THROUGH IOB SIZE     */
         L     @12,WKAIOBRG(,RBSECPTR)                             0247
         LA    GPR02P,IOBDPLAD(,@12)                               0247
         BCTR  GPR02P,0                                            0247
*       IF DCBBFTKR='1'B THEN       /* IF RECFM=VS RECORDS           */
         LA    @06,16                                              0248
         L     @03,DCBPTR(,RBSECPTR)                               0248
         AR    @03,@06                                             0248
         LA    @03,DCBIOBAD(,@03)                                  0248
         TM    DCBBFTKR(@03),B'00100000'                           0248
         BNO   @RF00248                                            0248
*         GPR01P=ADDR(IOBDQADA);    /* VS IOB HAS 8 BYTE PREFIX      */
         SR    @12,@06                                             0249
         LA    GPR01P,IOBDQADA(,@12)                               0249
*       ELSE                        /* BEGINNING OF IOB-NO PREF      */
*         GPR01P=ADDR(IOBSTDRD);    /* BEG OF IOB STANDARD           */
         B     @RC00248                                            0250
@RF00248 L     GPR01P,WKAIOBRG(,RBSECPTR)                          0250
*       CALL CVT0VL01;              /* VALIDATE 1ST PART OF IOB      */
@RC00248 L     @12,CVTPTR                                          0251
         L     @15,CVT0VL01(,@12)                                  0251
         BALR  @14,@15                                             0251
*       BC(7,ABEND);                /* IF ERROR,GO TO ABEND RTN      */
         BC    7,ABEND                                             0252
*                                   /* VALIDATE 2ND HALF OF IOB      */
*       GPR02P=ADDR(IOBSTDRD)+IOBDIOBS-1;/* END ADDR OF IOB          */
         L     @12,WKAIOBRG(,RBSECPTR)                             0253
         LH    GPR02P,IOBDIOBS(,@12)                               0253
         AR    GPR02P,@12                                          0253
         BCTR  GPR02P,0                                            0253
*       CALL CVT0VL01;              /* VALIDIATE 2ND HALF IOB        */
         L     @12,CVTPTR                                          0254
         L     @15,CVT0VL01(,@12)                                  0254
         BALR  @14,@15                                             0254
*       BC(7,ABEND);                /* IF ERROR,GO TO ABEND RTN      */
         BC    7,ABEND                                             0255
*     END;                                                         0256
*   BLKCTR=BLKCTR+1;                /* UP BLKCTR TO SYS ERROR(=6)    */
@RF00244 AH    BLKCTR,@CH00083                                     0257
*FREELOCK:                                                         0258
*   ;                               /* FREE THE LOCAL LOCK           */
FREELOCK DS    0H                                                  0259
*   RFY                                                            0259
*     GPR00P RSTD;                                                 0259
*   GPR00P=SAVEPTR;                 /* SAVE RTM SAVE AROUND SETLK    */
         LR    GPR00P,SAVEPTR                                      0260
*   DO;                             /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*     RFY                                                          0262
*      (GPR11P,                                                    0262
*       GPR12P,                                                    0262
*       GPR13P,                                                    0262
*       GPR14P)RSTD;                                               0262
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0263
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0263
*     GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT AND 0264
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,588(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0266
*      (GPR11P,                                                    0266
*       GPR12P,                                                    0266
*       GPR13P,                                                    0266
*       GPR14P)UNRSTD;                                             0266
*   END;                            /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*   SAVEPTR=GPR00P;                 /* RESTORE RTM SAVEAREA PTR      */
         LR    SAVEPTR,GPR00P                                      0268
*   RFY                                                            0269
*     GPR00P UNRSTD;                                               0269
*   GOTO SYSERRTN;                  /* USER CONTROL BLOCKS OK        */
*                                                                  0270
         B     SYSERRTN                                            0270
*/********************************************************************/
*/* THE FOLLOWING ROUTINE ABENDS THE USER WHEN IT IS DETERMINED THAT */
*/* A USER CONTROL BLOCK IS INVALID. AN ATTEMPT IS MADE TO CLEAN UP  */
*/* THE BUFFER QUEUE, ISSUE WTP IDENTIFYING THE PROBLEM AND GTRACE   */
*/* THOSE CONTROL BLOCKS RELATED TO THE ERROR.                       */
*/********************************************************************/
*                                                                  0271
*ABEND:                                                            0271
*   ;                               /* ABEND THE USER WITH 239       */
ABEND    DS    0H                                                  0272
*   GTFLAG=GTOFF;                   /* INITIAL GTRACE TO 0     YM4667*/
         MVC   GTFLAG(1,SDWAPTR),GTOFF                             0272
*   IF BLKCTR=DCBERR THEN           /* DCB BAD, NO GTRACE            */
         CH    BLKCTR,@CH00083                                     0273
         BE    @RT00273                                            0273
*     GOTO CLEAN;                   /* NO GTRACE POSSIBLE            */
*                                                                  0274
*/* GET CORE TO BUILD THE GTRACE BUFFER AREA WHICH WILL CONTAIN THOSE*/
*/* CONTROL BLOCKS WHICH WERE VALIDATED. REGS 0,1,3,4,7 ARE USED FOR */
*/* INPUT TO GETMAIN-BRANCH ENTRY. REG 4 CONTAINS TCB ADDR AND REG 7,*/
*/* THE ASCB ADDRESS.                                                */
*                                                                  0275
*GETCORE:                                                          0275
*   RFY                                                            0275
*    (TRCPTR,                                                      0275
*     GPR01P)RSTD;                  /* RESTRICT REGS                 */
GETCORE  DS    0H                                                  0276
*   RFY                                                            0276
*    (GPR04P,                                                      0276
*     GPR07P,                                                      0276
*     WRKREG)RSTD;                  /* RESTR INPUT/SAVE        YM4667*/
*   GPR04P=PSATOLD;                 /* PUT TCB ADDR IN R4      YM4667*/
         L     GPR04P,PSATOLD                                      0277
*   WRKREG=BLKCTR;                  /* SAVE BLKCTR CODE        YM4667*/
         LR    WRKREG,BLKCTR                                       0278
*   GPR07P=PSAAOLD;                 /* PUT ASCB ADDR IN R7     YM4667*/
         L     GPR07P,PSAAOLD                                      0279
*   DO;                             /* GETMAIN (RC)                0280
*                                      LV(LENGTH(SPDBFR)) SP(230)  0280
*                                      KEY(0) BRANCH                 */
*     RESPECIFY                                                    0281
*      (GPR01F,                                                    0281
*       GPR03F,                                                    0281
*       GPR00F)RESTRICTED;                                         0281
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SR    @14,@14                                             0282
         LR    GPR01F,@14                                          0282
*     GPR03F=0;                     /* RC-TYPE GETMAIN               */
         LR    GPR03F,@14                                          0283
*     GPR00F=LENGTH(SPDBFR);        /* LENGTH REQUESTED              */
         LA    GPR00F,256                                          0284
*     GPR03F=GPR03F×((230)*256);    /* SP IN BYTE 2                  */
         O     GPR03F,@CF03562                                     0285
*     GPR03F=GPR03F×((0)*65536*16); /* KEY IN BYTE 1                 */
*     CALL CVTCRMN;                 /* BRANCH ENTRY POINT            */
         L     @12,CVTPTR                                          0287
         L     @15,CVTCRMN(,@12)                                   0287
         BALR  @14,@15                                             0287
*     RESPECIFY                                                    0288
*      (GPR01F,                                                    0288
*       GPR03F,                                                    0288
*       GPR00F)UNRESTRICTED;                                       0288
*   END;                            /* GETMAIN (RC)                0289
*                                      LV(LENGTH(SPDBFR)) SP(230)  0289
*                                      KEY(0) BRANCH                 */
*                                                                  0289
*/* GET                                         CORE IN 230, KEY 0 FOR
*UFFER                                                               */
*                                                                  0290
*   RFY                                                            0290
*     GPR15P RSTD;                  /* RESTRICT RETURN REG           */
*   BLKCTR=WRKREG;                  /* RESTORE BLKCTR CODE     YM4667*/
         LR    BLKCTR,WRKREG                                       0291
*   IF GPR15P^=0 THEN               /* IF RET FROM GETMAIN NOT 0     */
         LTR   GPR15P,GPR15P                                       0292
         BNZ   @RT00292                                            0292
*     GO TO CLEAN;                  /* NO CORE, CANT GTRACE          */
*   RFY                                                            0294
*    (GPR04P,                                                      0294
*     GPR07P,                                                      0294
*     WRKREG,                                                      0294
*     GPR15P)UNRSTD;                /* RELEASE                 YM4667*/
*   TRCPTR=GPR01P;                  /* BASE REG FOR TRACE BUFFER     */
         LR    TRCPTR,GPR01P                                       0295
*   RFY                                                            0296
*     SPDBFR BASED(TRCPTR);         /* ADDRESSABILITY TO BUFFER      */
*   RFY                                                            0297
*     GPR01P UNRSTD;                                               0297
*                                                                  0297
*/* MUST VALIDATE TIOT ENTRY BEFORE GETTING DDNAME FOR GTRACE.       */
*/* THIS IS DONE BY GETTING THE PROTECTED ADDRESS OF THE TIOT ENTRY  */
*/* FROM THE DSAB, POINTED TO BY THE DEB.  THE DEB MUST BE VALIDITY  */
*/* CHECKED FIRST.                                                   */
*                                                                  0298
*   WKALOCK='1'B;                   /* SW-DEBCHECK WONT FREE LOCK    */
         OI    WKALOCK(RBSECPTR),B'00000001'                       0298
*   CALL DEBCHECK;                  /* MUST 1ST VALIDATE DEB BY    0299
*                                      CALLING DEBCHK SUBRTN         */
         BAL   @14,DEBCHECK                                        0299
*   RFY                                                            0300
*     DEBBASIC BASED(WKADEB);       /* DEB BASE PASSED IN SVRB       */
*   IF WKADEBRC=0 THEN              /* IF DEB RET CODE=0,DEB OK      */
         CLI   WKADEBRC(RBSECPTR),0                                0301
         BNE   @RF00301                                            0301
*     SPDDDNAM=TIOEDDNM;            /* MV DDNAME INTO GTF BUFFER     */
         SR    @12,@12                                             0302
         ICM   @12,7,WKADEB(RBSECPTR)                              0302
         L     @12,DEBAPPAD(,@12)                                  0302
         L     @12,DEBXTNP(,@12)                                   0302
         L     @12,DEBXDSAB(,@12)                                  0302
         L     @12,DSABTIOT(,@12)                                  0302
         MVC   SPDDDNAM(8,TRCPTR),TIOEDDNM(@12)                    0302
*   ELSE                            /* ELSE ASSIGN DDN ASTERISKS     */
*     SPDDDNAM=NODDNAME;            /* MOVE ASTERISKS INTO BUFFER    */
         B     @RC00301                                            0303
@RF00301 MVC   SPDDDNAM(8,TRCPTR),NODDNAME                         0303
*MVCCD:                                                            0304
*   ;                               /* ESTABLISH COND CODE           */
@RC00301 DS    0H                                                  0304
MVCCD    DS    0H                                                  0305
*   SPDABCCD=BLKERR1(BLKCTR);       /* INDEX TO BLKID IN ERROR       */
         SR    @12,@12                                             0305
         IC    @12,BLKERR1-1(BLKCTR)                               0305
         STC   @12,SPDABCCD(,TRCPTR)                               0305
*   RFY                                                            0306
*     MVBLKPTR RSTD;                /* RESTRICT PTR TO BLK MOVE      */
*   MVBLKPTR=ADDR(SPDTRACE);        /* ESTABLISH PTR TO TRACE BLK    */
         LA    MVBLKPTR,SPDTRACE(,TRCPTR)                          0307
*   RFY                                                            0308
*     SPDTRRCD BASED(MVBLKPTR);     /* ESTABLISH ADDRESSABILITY      */
*MVDCB:                                                            0309
*   ;                               /* MV DCB INTO GTRACE BUFFER     */
MVDCB    DS    0H                                                  0310
*   SPDRCDLN=DCBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD);/* MV LENGTH OF
*                                      DCB INTO REC                  */
         MVI   SPDRCDLN(MVBLKPTR),X'6E'                            0310
*   SPDBLKID=SPDDCB;                /* MV DCB ID=130 INTO REC        */
         MVI   SPDBLKID(MVBLKPTR),X'82'                            0311
*   SPDBLKAD=DCBPTR;                /* MV DCB ADDR INTO RECORD       */
         L     @12,DCBPTR(,RBSECPTR)                               0312
         ST    @12,SPDBLKAD(,MVBLKPTR)                             0312
*   SPDDATA2(1:DCBLEN)=IHADCB(1:DCBLEN);/* MV DCB INTO RECORD        */
         MVC   SPDDATA2(104,MVBLKPTR),IHADCB(@12)                  0313
*   WKATRCLG=DCBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD)+PREFIXLG;/*  0314
*                                      SIZE OF REC SO FAR            */
         MVI   WKATRCLG(RBSECPTR),X'77'                            0314
*MVDECB:                                                           0315
*   ;                               /* SHOULD DECB BE TRACED         */
MVDECB   DS    0H                                                  0316
*   IF BLKCTR>DECBERR THEN          /* WAS THE DECB FOUND INVALID    */
         CH    BLKCTR,@CH00091                                     0316
         BNH   @RF00316                                            0316
*     DO;                           /* DECB PASSED VALIDITY CHECK    */
*       MVBLKPTR=TRCPTR+WKATRCLG;   /* SET UP PTR TO NEXT BLK        */
         SR    @12,@12                                             0318
         IC    @12,WKATRCLG(,RBSECPTR)                             0318
         LR    MVBLKPTR,TRCPTR                                     0318
         AR    MVBLKPTR,@12                                        0318
*       SPDRCDLN=DECBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD);/* DECB 0319
*                                      LENGTH + PREFIX               */
         MVI   SPDRCDLN(MVBLKPTR),X'22'                            0319
*       SPDBLKID=SPDDECB;           /* MV DECB ID=131 INTO REC       */
         MVI   SPDBLKID(MVBLKPTR),X'83'                            0320
*       SPDBLKAD=DECBPT;            /* GET DECB ADDR INTO REC        */
         L     @06,DECBPT(,RBSECPTR)                               0321
         ST    @06,SPDBLKAD(,MVBLKPTR)                             0321
*       SPDDATA2(1:DECBLEN)=DECBS02(1:DECBLEN);/* MV IN DECB         */
         MVC   SPDDATA2(28,MVBLKPTR),DECBS02(@06)                  0322
*       WKATRCLG=WKATRCLG+DECBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD);
         AH    @12,@CH03567                                        0323
         STC   @12,WKATRCLG(,RBSECPTR)                             0323
*                                   /* SIZE REC SO FAR               */
*     END;                                                         0324
*MVBCB:                                                            0325
*   ;                               /* GTRACE BCB IF PASSED CHK      */
@RF00316 DS    0H                                                  0325
MVBCB    DS    0H                                                  0326
*   IF BLKCTR>BCBERR THEN           /* IF BCB DID NOT HAVE ERROR     */
         CH    BLKCTR,@CH00107                                     0326
         BNH   @RF00326                                            0326
*     DO;                           /* GTRACE IT FOR NEXT BLK        */
*       MVBLKPTR=TRCPTR+WKATRCLG;   /* NEXT BLK TO ADD TO BUFFER     */
         SR    @12,@12                                             0328
         IC    @12,WKATRCLG(,RBSECPTR)                             0328
         LR    MVBLKPTR,TRCPTR                                     0328
         AR    MVBLKPTR,@12                                        0328
*       SPDRCDLN=BCBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD);/* BCB   0329
*                                      LENGTH + PREFIX               */
         MVI   SPDRCDLN(MVBLKPTR),X'16'                            0329
*       SPDBLKAD=DCBBUFCB;          /* BCB ADDRESS FROM DCB          */
         L     @06,DCBPTR(,RBSECPTR)                               0330
         L     @06,DCBBUFCB+16(,@06)                               0330
         ST    @06,SPDBLKAD(,MVBLKPTR)                             0330
*       RFY                                                        0331
*         BCBDEFR BASED(DCBBUFCB);  /* ESTABLISH BASE FOR BCB        */
*       SPDDATA2(1:BCBLEN)=BCBDEFR(1:BCBLEN);/* MV 16-BYTE BCB       */
         MVC   SPDDATA2(16,MVBLKPTR),BCBDEFR(@06)                  0332
*       WKATRCLG=WKATRCLG+BCBLEN+LENGTH(SPDRCDHD)+LENGTH(SPDBLKAD);/*
*                                      SZ OF REC WHEN ALL            */
         AH    @12,@CH03569                                        0333
         STC   @12,WKATRCLG(,RBSECPTR)                             0333
*     END;                                                         0334
*TRACE:                                                            0335
*   ;                               /* FREE THE LOCAL LCK,& TRACE    */
@RF00326 DS    0H                                                  0335
TRACE    DS    0H                                                  0336
*   RFY                                                            0336
*     GPR00P RSTD;                                                 0336
*   GPR00P=SAVEPTR;                 /* SAVE RTM SAVE AROUND SETLK    */
         LR    GPR00P,SAVEPTR                                      0337
*   DO;                             /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*     RFY                                                          0339
*      (GPR11P,                                                    0339
*       GPR12P,                                                    0339
*       GPR13P,                                                    0339
*       GPR14P)RSTD;                                               0339
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0340
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0340
*     GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT AND 0341
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,588(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0343
*      (GPR11P,                                                    0343
*       GPR12P,                                                    0343
*       GPR13P,                                                    0343
*       GPR14P)UNRSTD;                                             0343
*   END;                            /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*   SAVEPTR=GPR00P;                 /* RESTORE RTM SAVEAREA PTR      */
         LR    SAVEPTR,GPR00P                                      0345
*   RFY                                                            0346
*     GPR00P UNRSTD;                                               0346
*   RFY                                                            0347
*    (GPR01P,                                                      0347
*     WRKREG,                                                      0347
*     GPR15P)RSTD;                                                 0347
*   WRKREG=WKATRCLG;                /* GET TRACE REC LG FROM SVRB    */
         SR    WRKREG,WRKREG                                       0348
         IC    WRKREG,WKATRCLG(,RBSECPTR)                          0348
*   GPR01P=ADDR(TRCLIST);           /* GET ADDRESS OF TRACE LIST     */
         LA    GPR01P,TRCLIST(,RBSECPTR)                           0349
*   TRCLIST=TRACLIST;               /* SET UP GTC PARMLIST     YM5757*/
         MVC   TRCLIST(8,RBSECPTR),TRACLIST                        0350
*   GEN REFS(SPDBFR)SETS(GPR01P,WRKREG,GPR15P,TRCPTR);             0351
       GTRACE DATA=(TRCPTR),MF=(E,(1)),LNG=(WRKREG),ID=IGGSP239
*   IF GPR15P=0 THEN                /* IF RET CODE=0,GTRACE GOOD     */
         LTR   GPR15P,GPR15P                                       0352
         BNZ   @RF00352                                            0352
*     GTFLAG=GTON;                  /* TURN ON LO BIT IF GTF GOOD    */
         MVC   GTFLAG(1,SDWAPTR),GTON                              0353
*   RFY                                                            0354
*    (GPR01P,                                                      0354
*     WRKREG,                                                      0354
*     GPR15P,                                                      0354
*     MVBLKPTR)UNRSTD;                                             0354
@RF00352 DS    0H                                                  0355
*FREECORE:                                                         0355
*   ;                               /* FREE THE GTRACE BUFFER        */
FREECORE DS    0H                                                  0356
*   DO;                             /* FREEMAIN(RC)                0356
*                                      LV(LENGTH(SPDBFR))A(SPDBFR) 0356
*                                      SP(230)                       */
*     RESPECIFY                                                    0357
*      (GPR01F,                                                    0357
*       GPR15F,                                                    0357
*       GPR00F)RESTRICTED;                                         0357
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SR    GPR01F,GPR01F                                       0358
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0359
*     GPR00F=LENGTH(SPDBFR);        /* LENGTH REQUESTED              */
         LA    GPR00F,256                                          0360
*     GPR01F=ADDR(SPDBFR);          /* SET REGISTER ONE              */
         LR    GPR01F,TRCPTR                                       0361
*     GPR15F=GPR15F+((230)*256);    /* SUBPOOL VALUE                 */
         A     GPR15F,@CF03562                                     0362
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0363
*     RESPECIFY                                                    0364
*      (GPR01F,                                                    0364
*       GPR15F,                                                    0364
*       GPR00F)UNRESTRICTED;                                       0364
*   END;                            /* FREEMAIN(RC)                0365
*                                      LV(LENGTH(SPDBFR))A(SPDBFR) 0365
*                                      SP(230)                       */
*                                   /* FREE                          */
*   RFY                                                            0366
*     TRCPTR UNRSTD;                                               0366
*   RFY                                                            0367
*     SPDBFR BASED;                                                0367
*                                                                  0367
*/*  FREE THE LOCAL LOCK, IN CASE IT HAS NOT ALREADY BEEN FREED,     */
*/*  AND CLEAN UP RESOURCES BEFORE WRITING OUT MESSAGE.              */
*                                                                  0368
*CLEAN:                                                            0368
*   ;                               /* GO CLEAN UP RESOURCES         */
CLEAN    DS    0H                                                  0369
*   RFY                                                            0369
*     GPR00P RSTD;                                                 0369
*   GPR00P=SAVEPTR;                 /* SAVE RTM SAVE AROUND SETLK    */
         LR    GPR00P,SAVEPTR                                      0370
*   DO;                             /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*     RFY                                                          0372
*      (GPR11P,                                                    0372
*       GPR12P,                                                    0372
*       GPR13P,                                                    0372
*       GPR14P)RSTD;                                               0372
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0373
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0373
*     GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT AND 0374
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,588(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0376
*      (GPR11P,                                                    0376
*       GPR12P,                                                    0376
*       GPR13P,                                                    0376
*       GPR14P)UNRSTD;                                             0376
*   END;                            /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CNTRLBLK,IGCT005G,(SET
*                                      LOCK))                        */
*   SAVEPTR=GPR00P;                 /* RESTORE RTM SAVEAREA PTR      */
         LR    SAVEPTR,GPR00P                                      0378
*   RFY                                                            0379
*     GPR00P UNRSTD;                                               0379
*   CALL CLEANUP;                   /* GO CLEAN UP RESOURCES         */
         BAL   @14,CLEANUP                                         0380
*   RFY                                                            0381
*     GPR15P RSTD;                                                 0381
*   IF GPR15P^=0 THEN               /* IF CLEANRTN RC NOT 0,WAS      */
         LTR   GPR15P,GPR15P                                       0382
         BZ    @RF00382                                            0382
*     DO;                           /* ERROR IN CLEAN UP             */
*       WKACLEAN=CLEANRC1(1);       /* SET RC FOR CLEANUP ABEND      */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1                       0384
*       GEN(ESTAE 0);               /* GET RID OF ESTAE              */
         ESTAE 0
*     END;                                                         0386
*   RFY                                                            0387
*     GPR15P UNRSTD;                                               0387
*                                                                  0387
@RF00382 DS    0H                                                  0388
*/*    WRITE OUT MESSAGE TO PROGRAMMER DESCRIBING PROBLEM            */
*                                                                  0388
*WTP:                                                              0388
*   ;                               /* ISSUE WTP IDENTIFYING ERR     */
WTP      DS    0H                                                  0389
*   RFY                                                            0389
*     WRKREG RSTD;                  /* RESTRICT WORKREG              */
*   WRKREG=GTFLAG;                  /* SAVE CONTENTS OF GTRACE SW    */
         SR    WRKREG,WRKREG                                       0390
         IC    WRKREG,GTFLAG(,SDWAPTR)                             0390
*   MESSAGE=USERER;                 /* MOVE IN MESSAGE               */
         MVC   MESSAGE(52,SDWAPTR),USERER                          0391
*   GTFLAG=WRKREG;                  /* REPLACE GTRACE SW             */
         STC   WRKREG,GTFLAG(,SDWAPTR)                             0392
*   RCODE=BLKERR2(BLKCTR);          /* MV BLK IN ERROR INTO MESS     */
         LA    @12,BLKERR2-1(BLKCTR)                               0393
         MVC   RCODE(1,SDWAPTR),0(@12)                             0393
*   WRKREG=WKACLEAN;                /* LOAD CLEAN RC FOR INDEX       */
         SR    WRKREG,WRKREG                                       0394
         IC    WRKREG,WKACLEAN(,RBSECPTR)                          0394
*   RETCOD2=CLEANRC2(WRKREG);       /* MV CLEANUP RC INTO MESSAGE    */
         LR    @12,WRKREG                                          0395
         AR    @12,@12                                             0395
         LA    @10,CLEANRC2-2(@12)                                 0395
         MVC   RETCOD2(2,SDWAPTR),0(@10)                           0395
*   RFY                                                            0396
*     WRKREG UNRSTD;                                               0396
*   MSGJOB=TIOCNJOB;                /* MV IN JOB NAME                */
         L     @12,PSATOLD                                         0397
         L     @12,TCBTIO(,@12)                                    0397
         MVC   MSGJOB(8,SDWAPTR),TIOCNJOB(@12)                     0397
*   MSGSTEP=TIOCSTEP;               /* MV IN STEP NAME               */
*                                                                  0398
         MVC   MSGSTEP(8,SDWAPTR),TIOCSTEP(@12)                    0398
*/* MUST VALIDATE TIOT ENTRY BEFORE GETTING DDNAME FOR MESSAGE.      */
*/* THIS IS DONE BY GETTING THE PROTECTED ADDRESS OF THE TIOT ENTRY  */
*/* FROM THE DSAB, POINTED TO BY THE DEB.  THE DEB MUST BE VALIDITY  */
*/* CHECKED FIRST.                                                   */
*                                                                  0399
*   CALL DEBCHECK;                  /* MUST 1ST VALIDATE DEB BY    0399
*                                      CALLING DEBCHK SUBRTN         */
         BAL   @14,DEBCHECK                                        0399
*   RFY                                                            0400
*     DEBBASIC BASED(WKADEB);       /* VALID DEB PASSED IN SVRB      */
*   IF WKADEBRC=0 THEN              /* IF DEB RET CODE=0,DEB OK      */
         CLI   WKADEBRC(RBSECPTR),0                                0401
         BNE   @RF00401                                            0401
*     MSGDDN=TIOEDDNM;              /* MV DDNAME INTO GTF BUFFER     */
         SR    @12,@12                                             0402
         ICM   @12,7,WKADEB(RBSECPTR)                              0402
         L     @12,DEBAPPAD(,@12)                                  0402
         L     @12,DEBXTNP(,@12)                                   0402
         L     @12,DEBXDSAB(,@12)                                  0402
         L     @12,DSABTIOT(,@12)                                  0402
         MVC   MSGDDN(8,SDWAPTR),TIOEDDNM(@12)                     0402
*   ELSE                            /* ELSE ASSIGN DDN ASTERISKS     */
*     MSGDDN=NODDNAME;              /* MOVE ASTERISKS INTO BUFFER    */
         B     @RC00401                                            0403
@RF00401 MVC   MSGDDN(8,SDWAPTR),NODDNAME                          0403
*   DO;                             /* WTOP MF(E,MESSAGE)            */
@RC00401 DS    0H                                                  0405
*     RFY                                                          0405
*       GPR01P RSTD;                /* RESTRICT REG 1                */
*     GPR01P=ADDR(MESSAGE);         /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,MESSAGE(,SDWAPTR)                            0406
*     SVC(35);                      /* ISSUE WTO SVC                 */
         SVC   35                                                  0407
*     RFY                                                          0408
*       GPR01P UNRSTD;              /* RELEASE REG 1                 */
*   END;                            /* WTOP MF(E,MESSAGE)            */
*                                   /* ISSUE WTP                     */
*RETRYNOW:                                                         0410
*   ;                               /* RETRY ABEND239-USER ERROR     */
RETRYNOW DS    0H                                                  0411
*   IF GTFLAG=GTOFF THEN            /* PASS GTRACE RC TO       YM4667*/
         CLC   GTFLAG(1,SDWAPTR),GTOFF                             0411
         BNE   @RF00411                                            0411
*     SDWASR00=0;                   /* RETRY, 0= NO OR BAD GTRACE    */
         SR    @12,@12                                             0412
         ST    @12,SDWASR00(,SDWAPTR)                              0412
*   ELSE                            /* IF GTRACE DID GO -NON 0       */
*     SDWASR00=GTRACEOK;            /* PASS GTRACE RC TO RETRY       */
         B     @RC00411                                            0413
@RF00411 MVC   SDWASR00(4,SDWAPTR),@CF00096                        0413
*   SDWASR07=BLKCTR;                /* PASS BLKID IN ERROR-RETRY     */
@RC00411 ST    BLKCTR,SDWASR07(,SDWAPTR)                           0414
*   SDWASR08=RBSECPTR;              /* GIVE RETRYRTN SVRB ADDR       */
         ST    RBSECPTR,SDWASR08(,SDWAPTR)                         0415
*   SDWASR09=BASEREG;               /* GIVE RETRY RTN BASE REG       */
         ST    BASEREG,SDWASR09(,SDWAPTR)                          0416
*   DO;                             /* SETRP RETADDR(RETRYRTN)     0417
*                                      DUMP(NO) RECORD(NO)         0417
*                                      FRESDWA(YES) RC(4)          0417
*                                      RETREGS(YES) WKAREA(SDWAPTR)
*                                      REGS(14)                      */
*     RESPECIFY                                                    0418
*      (GPR00P,                                                    0418
*       GPR01P,                                                    0418
*       GPR14P,                                                    0418
*       GPR15P)RSTD;                                               0418
*     GPR01P=SDWAPTR;                                              0419
         LR    GPR01P,SDWAPTR                                      0419
*     GPR01P->SDWARCDE=4;           /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0420
*     GPR01P->SDWARTYA=ADDR(RETRYRTN);/* SAVE RETRY ADDRESS          */
         LA    @12,RETRYRTN                                        0421
         ST    @12,SDWARTYA(,GPR01P)                               0421
*     GPR01P->SDWAFREE='1'B;        /* SET FLAG TO FREE SDWA         */
*     GPR01P->SDWARCRD='0'B;        /* TURN OFF RECORD INDICATOR     */
         OI    SDWAFREE(GPR01P),B'00000100'                        0423
         NI    SDWARCRD(GPR01P),B'01111111'                        0423
*     GPR01P->SDWAREQ='0'B;         /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0424
*     GPR01P->SDWAUPRG='1'B;        /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0425
*     GEN(RETURN (14));                                            0426
         RETURN (14)
*     RESPECIFY                                                    0427
*      (GPR00P,                                                    0427
*       GPR01P,                                                    0427
*       GPR14P,                                                    0427
*       GPR15P)UNRSTD;                                             0427
*   END;                            /* RETRY                         */
*                                                                  0428
*/********************************************************************/
*/* THE FOLLOWING ROUTINE IS THE RETRY ROUTINE, ENTERED WHEN A USER  */
*/* ERROR IS DETECTED AND SETRP HAS BEEN ISSUED TO GIVE THIS ROUTINE */
*/* CONTROL TO ISSUE ABEND 239. THIS PREVENTS REPEATED ENTRY INTO    */
*/* THE ESTAE, IGCT005G, BY REMOVING IT LOGICALLY FROM THE QUEUE.    */
*/* UPON ENTRY THE SVRB ADDRESS WILL BE IN REG 8, BLKCTR IN REG 7,   */
*/* AND THE GTRACE RETURN CODE IN REG 0.                             */
*/********************************************************************/
*                                                                  0429
*RETRYRTN:                                                         0429
*   ;                               /* RETRY ROUTINE WILL ABEND      */
RETRYRTN DS    0H                                                  0430
*   RFY                                                            0430
*    (GPR00P,                                                      0430
*     GPR01P,                                                      0430
*     WRKREG,                                                      0430
*     GPR14P,                                                      0430
*     GPR15P)RSTD;                  /* RESTR                   YM4667*/
*   WRKREG=GPR00P;                  /* SAVE GTF RC IN R11      YM4667*/
         LR    WRKREG,GPR00P                                       0431
*   GEN(ESTAE 0);                   /* REMOVE ESTAE FROM QUEUE       */
         ESTAE 0
*   RETURNCD=WKACLEAN;              /* PUT CLEANUP RC IN LO ORDER    */
         SR    RETURNCD,RETURNCD                                   0433
         IC    RETURNCD,WKACLEAN(,RBSECPTR)                        0433
*   RETURNCD=RETURNCD*TOPBYTE;      /* MV RC TO HI-ORDER BYTE        */
         SLL   RETURNCD,24                                         0434
*   IF WRKREG^=0 THEN               /* IF SW SET IN R0^=0      YM4667*/
         LTR   WRKREG,WRKREG                                       0435
         BZ    @RF00435                                            0435
*     RETURNCD=RETURNCD×BLKERR3(BLKCTR);/* PUT RET CODE WITH       0436
*                                      GTRACE-TAKEN BIT ON INTO R15  */
         SR    @12,@12                                             0436
         IC    @12,BLKERR3-1(BLKCTR)                               0436
         OR    RETURNCD,@12                                        0436
*   ELSE                            /* IF SW SET IN R0 IS 0 THEN     */
*     RETURNCD=RETURNCD×BLKERR1(BLKCTR);/* EITHER GTRACE WAS NOT   0437
*                                      TAKEN OR NOT SUCCESSFUL, SO 0437
*                                      GTRACE-TAKEN BIT OFF IN R15   */
         B     @RC00435                                            0437
@RF00435 SR    @12,@12                                             0437
         IC    @12,BLKERR1-1(BLKCTR)                               0437
         OR    RETURNCD,@12                                        0437
*   GPR01P=ERRUSER;                 /* PASS ABEND 239 ABEND CODE     */
@RC00435 LA    GPR01P,569                                          0438
*   GPR14P=ADDR(SNAPLIST);          /* PASS ABEND ADDR OF     SNAPLST*/
         LA    GPR14P,SNAPLIST                                     0439
*   GEN REFS(RBGRS2,GPR14P);                                       0440
        LM   @02,@13,RBGRS2(@08)       LOAD USERS REGISTERS
        ABEND  (1),DUMP,,SYSTEM,DUMPOPT=(GPR14P)     ABEND USER
*   RFY                                                            0441
*    (GPR00P,                                                      0441
*     GPR01P,                                                      0441
*     WRKREG,                                                      0441
*     GPR14P,                                                      0441
*     GPR15P)UNRSTD;                /*                         YM4667*/
*                                                                  0441
*/********************************************************************/
*/*   THIS ROUTINE IS ENTERED IF NO USER ERROR WAS FOUND. A SYSTEM   */
*/*   ERROR IS ASSUMED. UPON ENTRY BLKCTR WILL HAVE THE VALUE 6.     */
*/*   UPON ENTRY THE LOCAL LOCK WILL NOT BE HELD.                    */
*/********************************************************************/
*                                                                  0442
*SYSERRTN:                                                         0442
*   ;                               /* SYSTEM ERROR                  */
SYSERRTN DS    0H                                                  0443
*   CALL SDUMP;                     /* GO TO TAKE SVC DUMP           */
         BAL   @14,SDUMP                                           0443
*   CALL CLEANUP;                   /* GO TRY TO CLEAN UP            */
         BAL   @14,CLEANUP                                         0444
*   RFY                                                            0445
*     GPR15P RSTD;                  /* RESTRICT FOR CLEANUP RC       */
*   IF GPR15P^=0 THEN               /* IF CLEANRTN RC NOT 0,WAS      */
         LTR   GPR15P,GPR15P                                       0446
         BZ    @RF00446                                            0446
*     DO;                           /* ERROR IN CLEAN UP             */
*       WKACLEAN=CLEANRC1(1);       /* SET RC FOR CLEANUP ABEND      */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1                       0448
*       GEN(ESTAE 0);               /* GET RID OF ESTAE              */
         ESTAE 0
*     END;                                                         0450
*   RFY                                                            0451
*     GPR15P UNRSTD;                                               0451
*                                                                  0451
@RF00446 DS    0H                                                  0452
*/*  MUST BUILD MESSAGE AND ISSUE WTP DESCRIBING ERROR AS SYSTEM     */
*                                                                  0452
*   MESSAGE=SYSER;                  /* SET UP WTP MESSAGE            */
         MVC   MESSAGE(52,SDWAPTR),SYSER                           0452
*   RFY                                                            0453
*     WRKREG RSTD;                  /* RESTRICT WORK REGISTER        */
*   WRKREG=WKACLEAN;                /* USE CLEANUP CODE TO INDEX     */
         SR    WRKREG,WRKREG                                       0454
         IC    WRKREG,WKACLEAN(,RBSECPTR)                          0454
*   RETCOD2=CLEANRC2(WRKREG);       /* MV CLEANUP RC INTO MESSAGE    */
         LR    @12,WRKREG                                          0455
         AR    @12,@12                                             0455
         LA    @10,CLEANRC2-2(@12)                                 0455
         MVC   RETCOD2(2,SDWAPTR),0(@10)                           0455
*   RFY                                                            0456
*     WRKREG UNRSTD;                                               0456
*   RETCOD=DUMPRC(WKADUMP/RCDIV);   /* MV DUMP RET CODE INTO MESS    */
         SR    @12,@12                                             0457
         IC    @12,WKADUMP(,RBSECPTR)                              0457
         SRL   @12,2                                               0457
         AR    @12,@12                                             0457
         LA    @06,DUMPRC-2(@12)                                   0457
         MVC   RETCOD(2,SDWAPTR),0(@06)                            0457
*   MSGJOB=TIOCNJOB;                /* MV IN JOB NAME                */
         L     @12,PSATOLD                                         0458
         L     @12,TCBTIO(,@12)                                    0458
         MVC   MSGJOB(8,SDWAPTR),TIOCNJOB(@12)                     0458
*   MSGSTEP=TIOCSTEP;               /* MV IN STEP NAME               */
*                                                                  0459
         MVC   MSGSTEP(8,SDWAPTR),TIOCSTEP(@12)                    0459
*/* MUST VALIDATE THE TIOT ENTRY BEFORE GETTING DDNAME FOR MESSAGE.  */
*/* THIS IS DONE BY GETTING THE PROTECTED ADDRESS OF THE TIOT ENTRY  */
*/* FROM THE DSAB, POINTED TO BY THE DEB.  THE DEB MUST BE VALIDITY  */
*/* CHECKED FIRST.                                                   */
*                                                                  0460
*   CALL DEBCHECK;                  /* GO VALIDATE THE DEB           */
         BAL   @14,DEBCHECK                                        0460
*   RFY                                                            0461
*     DEBBASIC BASED(WKADEB);       /* VALID DEB PASSED IN SVRB      */
*   IF WKADEBRC=0 THEN              /* IF DEB RET CODE=0,DEB OK      */
         CLI   WKADEBRC(RBSECPTR),0                                0462
         BNE   @RF00462                                            0462
*     MSGDDN=TIOEDDNM;              /* MV DDNAME INTO GTF BUFFER     */
         SR    @12,@12                                             0463
         ICM   @12,7,WKADEB(RBSECPTR)                              0463
         L     @12,DEBAPPAD(,@12)                                  0463
         L     @12,DEBXTNP(,@12)                                   0463
         L     @12,DEBXDSAB(,@12)                                  0463
         L     @12,DSABTIOT(,@12)                                  0463
         MVC   MSGDDN(8,SDWAPTR),TIOEDDNM(@12)                     0463
*   ELSE                            /* ELSE ASSIGN DDN ASTERISKS     */
*     MSGDDN=NODDNAME;              /* MOVE ASTERISKS INTO BUFFER    */
         B     @RC00462                                            0464
@RF00462 MVC   MSGDDN(8,SDWAPTR),NODDNAME                          0464
*   DO;                             /* WTOP MF(E,MESSAGE)            */
@RC00462 DS    0H                                                  0466
*     RFY                                                          0466
*       GPR01P RSTD;                /* RESTRICT REG 1                */
*     GPR01P=ADDR(MESSAGE);         /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,MESSAGE(,SDWAPTR)                            0467
*     SVC(35);                      /* ISSUE WTO SVC                 */
         SVC   35                                                  0468
*     RFY                                                          0469
*       GPR01P UNRSTD;              /* RELEASE REG 1                 */
*   END;                            /* WTOP MF(E,MESSAGE)            */
*                                   /* ISSUE WTP MESSAGE             */
*RECORD1:                                                          0471
*   CALL RECORD;                    /* GO SET UP RECORDING AREA      */
RECORD1  BAL   @14,RECORD                                          0471
*   DO;                             /* SETRP RECORD(YES)           0472
*                                      COMPCOD(ERRSYS)             0472
*                                      WKAREA(SDWAPTR) REGS(14,12) 0472
*                                      DUMP(NO)                      */
*     RESPECIFY                                                    0473
*      (GPR00P,                                                    0473
*       GPR01P,                                                    0473
*       GPR14P,                                                    0473
*       GPR15P)RSTD;                                               0473
*     GPR01P=SDWAPTR;                                              0474
         LR    GPR01P,SDWAPTR                                      0474
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0475
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0476
*     GPR01P->SDWAREQ='0'B;         /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0477
*     GPR14P=ERRSYS;                /* ACCESS COMPLETION CODE        */
         SR    GPR14P,GPR14P                                       0478
         ICM   GPR14P,7,ERRSYS                                     0478
*     GPR01P->SDWACMPC=GPR14P;      /* STORE COMPLETION CODE         */
         STCM  GPR14P,7,SDWACMPC(GPR01P)                           0479
*     GEN(RETURN (14,12));                                         0480
         RETURN (14,12)
*     RESPECIFY                                                    0481
*      (GPR00P,                                                    0481
*       GPR01P,                                                    0481
*       GPR14P,                                                    0481
*       GPR15P)UNRSTD;                                             0481
*   END;                            /* RETURN TO RTM                 */
*                                                                  0482
*/********************************************************************/
*/*  THE FOLLOWING ROUTINE IS GIVEN CONTROL BY MACRO IGGSTART WHEN IT*/
*/*  IS DETERMINED THAT A PREVIOUS RECOVERY ROUTINE FAILED AND NO SVC*/
*/*  DUMP WAS TAKEN. THIS ROUTINE CALLS SDUMP RTN TO TAKE AN SVC     */
*/*  DUMP AND THEN TRANSFERS CONTROL TO THE CLEANRTN.                */
*/********************************************************************/
*                                                                  0483
*DUMPRTN:                                                          0483
*   ;                               /* RTN TO GET SVC DUMP & RET     */
DUMPRTN  DS    0H                                                  0484
*   CALL SDUMP;                     /* GO TO TAKE SVC DUMP           */
*                                                                  0484
         BAL   @14,SDUMP                                           0484
*/********************************************************************/
*/*  THIS ROUTINE IS GIVEN CONTROL BY MACRO IGGSTART OR DUMPRTN WHEN */
*/*  AN ERROR OCCURRED ON OTHER THAN THE ESTAES RB LEVEL OR AN ERROR */
*/*  OTHER THAN A PROGRAM CHECK OCCURRED IN THE SVC.                 */
*/********************************************************************/
*                                                                  0485
*CLEANRTN:                                                         0485
*   ;                               /* CLEAN UP AND RETURN           */
CLEANRTN DS    0H                                                  0486
*   BLKCTR=PERCERR;                 /* INITIALIZE BLKID REG TO 10, 0486
*                                      INDICATING INITIAL BRANCH TO
*                                      DUMPRTN/CLEANRTN,NOT USER ERR */
         LA    BLKCTR,10                                           0486
*   CALL CLEANUP;                   /* GO TO CLEAN UP RESOURCES      */
         BAL   @14,CLEANUP                                         0487
*   RFY                                                            0488
*     GPR15P RSTD;                  /* RESTRICT FOR CLEANUP RC       */
*   IF GPR15P^=0 THEN               /* IF CLEANRTN RC NOT 0, WAS     */
         LTR   GPR15P,GPR15P                                       0489
         BZ    @RF00489                                            0489
*     DO;                           /* ERROR IN CLEAN UP             */
*       WKACLEAN=CLEANRC1(1);       /* SET RC FOR CLEANUP ABEND      */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1                       0491
*       GEN(ESTAE 0);               /* GET RID OF ESTAE              */
         ESTAE 0
*     END;                                                         0493
*   RFY                                                            0494
*     GPR15P UNRSTD;                                               0494
@RF00489 DS    0H                                                  0495
*RECORD2:                                                          0495
*   CALL RECORD;                    /* GO SET UP RECORDING AREA      */
RECORD2  BAL   @14,RECORD                                          0495
*   DO;                             /* SETRP RECORD(YES) DUMP(NO)  0496
*                                      REGS(14,12) WKAREA(SDWAPTR)   */
*     RESPECIFY                                                    0497
*      (GPR00P,                                                    0497
*       GPR01P,                                                    0497
*       GPR14P,                                                    0497
*       GPR15P)RSTD;                                               0497
*     GPR01P=SDWAPTR;                                              0498
         LR    GPR01P,SDWAPTR                                      0498
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0499
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0500
*     GPR01P->SDWAREQ='0'B;         /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0501
*     GEN(RETURN (14,12));                                         0502
         RETURN (14,12)
*     RESPECIFY                                                    0503
*      (GPR00P,                                                    0503
*       GPR01P,                                                    0503
*       GPR14P,                                                    0503
*       GPR15P)UNRSTD;                                             0503
*   END;                                                           0504
*                                                                  0505
*/********************************************************************/
*/*                         SUBROUTINES                              */
*/********************************************************************/
*/********************************************************************/
*/*  THE FOLLOWING SUBROUTINE VALIDITY CHECKS THE DEB. A BRANCH ENTRY*/
*/*  IS TAKEN WHICH REQUIRES THAT THE LOCAL LOCK BE HELD. INPUT TO   */
*/*  DEBCHK IS AS FOLLOWS:                                           */
*/*                           REGISTER 1 - DEB ADDRESS               */
*/*                           REGISTER 10 - TCB ADDRESS              */
*/*                           REGISTER 14 - RETURN ADDRESS           */
*/*                           REGISTER 15 - DEBCHK ROUTINE ADDRESS   */
*/*  DEBCHK RETURNS TO 4 BYTES PAST REGISTER 14 IF AN ERROR OCCURS.  */
*/*  REGISTER 15 WILL HAVE 4 IF THERE IS AN ERROR. REGISTERS 1-14    */
*/*  UPON ENTRY TO THIS SUBROUTINE ARE SAVED, AND RESTORED UPON EXIT.*/
*/*  INPUT TO THIS ROUTINE ARE: THE DCB ADDRESS IN DCBPTR(R6), SDWA  */
*/*  ADDRESS IN SDWAPTR(R5) AND THE SVRB ADDRESS IN RBSECPTR(R8).    */
*/*  THE LOCK BIT IS ON WHEN ENTRY IS FROM THE USERRTN OR ABEND RTN. */
*/*  WHEN THIS BIT IS ON THIS RTN ASSUMES THE LOCK IS BEING HELD.    */
*/*  THE DEB ADDRESS AND DEBCHK RETURN CODE ARE PASSED TO THE CALLING*/
*/*  ROUTINE IN THE SVRB.                                            */
*/********************************************************************/
*                                                                  0505
*DEBCHECK:                                                         0505
*   PROC OPTIONS(NOSAVE);           /* DEBCHECK SUBROUTINE           */
         B     @PB00002                                            0505
DEBCHECK DS    0H                                                  0506
*   RFY                                                            0506
*    (GPR01P,                                                      0506
*     GPR14P)RSTD;                                                 0506
*   STM(GPR01P,GPR14P,SAVESDWA);    /* SAVE REGS 1-14 IN SDWA        */
         STM   GPR01P,GPR14P,SAVESDWA(SDWAPTR)                     0507
*   RFY                                                            0508
*    (GPR01P,                                                      0508
*     GPR14P)UNRSTD;                                               0508
*   IF WKALOCK='0'B THEN            /* IF LOCK NOT ON, GET LOCK      */
         TM    WKALOCK(RBSECPTR),B'00000001'                       0509
         BNZ   @RF00509                                            0509
*     DO;                           /* SOME CALLERS DONT HAVE LCK    */
*                                                                  0510
*/*           GET THE LOCAL LOCK                                     */
*                                                                  0511
*DEBLOCK:                                                          0511
*       ;                           /* GET THE LOCAL LOCK            */
DEBLOCK  DS    0H                                                  0512
*       DO;                         /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(DEBDCB,IGC
*                                      T005G,(DEBFREE))              */
*         RFY                                                      0513
*          (GPR11P,                                                0513
*           GPR12P,                                                0513
*           GPR13P,                                                0513
*           GPR14P)RSTD;                                           0513
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0514
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0514
*         GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT 0515
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,576(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0517
*          (GPR11P,                                                0517
*           GPR12P,                                                0517
*           GPR13P,                                                0517
*           GPR14P)UNRSTD;                                         0517
*       END;                        /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(DEBDCB,IGC
*                                      T005G,(DEBFREE))              */
*                                   /* GET LOCAL LOCK                */
*     END;                                                         0519
*                                                                  0519
*/*    GO TO DEBCHK ROUTINE - HOWEVER, SINCE THERE IS ONE FIELD IN   */
*/*    THE DEB WHICH DEBCHK ASSUMES IS IN KEY 5 CORE (DEBTBLOF) MUST */
*/*    FIRST PASS THIS FIELD TO THE SYSTEM VALIDITY CHECK ROUTINE TO */
*/*    ENSURE ITS CORE LOCATION.                                     */
*                                                                  0520
*   RFY                                                            0520
*    (GPR01P,                                                      0520
*     GPR02P,                                                      0520
*     GPR04P,                                                      0520
*     GPR10P,                                                      0520
*     GPR14P,                                                      0520
*     GPR15P)RSTD;                                                 0520
@RF00509 DS    0H                                                  0521
*   GPR01P=DCBDEBA;                 /* PUT DEB ADDR IN R1            */
         L     @12,DCBPTR(,RBSECPTR)                               0521
         SR    GPR01P,GPR01P                                       0521
         ICM   GPR01P,7,DCBDEBA+40(@12)                            0521
*   GPR01P=GPR01P-LENGTH(DEBTBLOF); /* GET ADDR OF FIELD       YM5738*/
         BCTR  GPR01P,0                                            0522
         BCTR  GPR01P,0                                            0522
*   GPR02P=GPR01P+1;                /* END OF FIELD            YM5738*/
         LA    GPR02P,1                                            0523
         AR    GPR02P,GPR01P                                       0523
*   GPR04P=ADDR(DEBKEY)-KEYOFFS;    /* ADDR OF DEB KEY=5       YM5738*/
         LA    GPR04P,DEBKEY                                       0524
         SH    GPR04P,@CH02596                                     0524
*   CALL CVT0VL00;                  /* VALIDITY CHECK RTN      YM5738*/
         L     @12,CVTPTR                                          0525
         L     @15,CVT0VL00(,@12)                                  0525
         BALR  @14,@15                                             0525
*   BC(8,GOCHKDEB);                 /* DEBTBLOP IS GOOD        YM5738*/
         BC    8,GOCHKDEB                                          0526
*BADDEB:                                                           0527
*   ;                               /* DEBTBLOP IS BAD         YM5738*/
BADDEB   DS    0H                                                  0528
*   WKADEB=GPR01P;                  /* PUT INVALID FIELD ADDR WHERE
*                                      DEB ADDR SHOULD GO      YM5738*/
         STCM  GPR01P,7,WKADEB(RBSECPTR)                           0528
*   WKADEBRC=DEBBAD;                /* RC=4 -INVALID DEB       YM5738*/
         MVI   WKADEBRC(RBSECPTR),X'04'                            0529
*   GOTO CHKLOCK;                   /* GO CHECK LOCK           YM5738*/
         B     CHKLOCK                                             0530
*   RFY                                                            0531
*    (GPR02P,                                                      0531
*     GPR04P)UNRSTD;                /* RELEASE REGS 2,4        YM5738*/
*                                                                  0531
*/*         READY TO GO TO DEBCHK ROUTINE                            */
*                                                                  0532
*GOCHKDEB:                                                         0532
*   ;                               /* GO TO DEBCHK ROUT       YM5738*/
GOCHKDEB DS    0H                                                  0533
*   GPR01P=GPR01P+LENGTH(DEBTBLOF); /* GET DEB ADDR IN R1      YM5738*/
         AH    GPR01P,@CH00091                                     0533
*   GPR10P=PSATOLD;                 /* PUT TCB ADDR IN R10           */
         L     GPR10P,PSATOLD                                      0534
*   CALL CVTDEBVR;                  /* BRANCH ENTRY TO DEBCHK        */
         L     @12,CVTPTR                                          0535
         L     @12,CVTEXT2(,@12)                                   0535
         L     @15,CVTDEBVR(,@12)                                  0535
         BALR  @14,@15                                             0535
*   GEN(NOP 0);                     /* USE UP 4 BYTES ON RETURN      */
         NOP 0
*   WKADEB=GPR01P;                  /* SAVE VALIDATED DEB ADDR IN  0537
*                                      SVRB WORKAREA                 */
         STCM  GPR01P,7,WKADEB(RBSECPTR)                           0537
*   WKADEBRC=RETURNCD;              /* SAVE DEBCHK RC IN TOP BYTE    */
         STC   RETURNCD,WKADEBRC(,RBSECPTR)                        0538
*   RFY                                                            0539
*     DEBBASIC BASED(WKADEB);       /* DEB PTR SAVED IN SVRB         */
*   IF RETURNCD=0&DEBDCBB^=DCBPTR THEN/* IF DEB VALID SO FAR ENSURE
*                                      IT POINTS TO DCB              */
         LTR   RETURNCD,RETURNCD                                   0540
         BNZ   @RF00540                                            0540
         SR    @12,@12                                             0540
         ICM   @12,7,WKADEB(RBSECPTR)                              0540
         SR    @11,@11                                             0540
         ICM   @11,7,DEBDCBB(@12)                                  0540
         C     @11,DCBPTR(,RBSECPTR)                               0540
         BE    @RF00540                                            0540
*     WKADEBRC=DEBBAD;              /* NO,PUT IN RC=4,INVALID DEB    */
         MVI   WKADEBRC(RBSECPTR),X'04'                            0541
*CHKLOCK:                                                          0542
*   ;                               /* SHOULD LOCK BE FREE     YM5738*/
@RF00540 DS    0H                                                  0542
CHKLOCK  DS    0H                                                  0543
*   IF WKALOCK='0'B THEN            /* IF LOCK SW NOT ON,THEN        */
         TM    WKALOCK(RBSECPTR),B'00000001'                       0543
         BNZ   @RF00543                                            0543
*     DO;                           /* MUST FREE LOCK GOTTEN HERE    */
*                                                                  0544
*/*                   RELEASE THE LOCAL LOCK                         */
*                                                                  0545
*DEBFREE:                                                          0545
*       ;                           /* FREE THE LOCAL LOCK           */
DEBFREE  DS    0H                                                  0546
*       DO;                         /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(DEBDCB,IGCT005G,(DEBLO
*                                      CK))                          */
*         RFY                                                      0547
*          (GPR11P,                                                0547
*           GPR12P,                                                0547
*           GPR13P,                                                0547
*           GPR14P)RSTD;                                           0547
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0548
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0548
*         GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT 0549
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,588(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0551
*          (GPR11P,                                                0551
*           GPR12P,                                                0551
*           GPR13P,                                                0551
*           GPR14P)UNRSTD;                                         0551
*       END;                        /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(DEBDCB,IGCT005G,(DEBLO
*                                      CK))                          */
*                                   /* FREE LOCAL LOCK               */
*     END;                                                         0553
*   RFY                                                            0554
*    (GPR01P,                                                      0554
*     GPR14P)RSTD;                                                 0554
@RF00543 DS    0H                                                  0555
*   LM(GPR01P,GPR14P,SAVESDWA);     /* RESTORE REG 1-14 FROM SDWA    */
         LM    GPR01P,GPR14P,SAVESDWA(SDWAPTR)                     0555
*   RFY                                                            0556
*    (GPR01P,                                                      0556
*     GPR14P)UNRSTD;                                               0556
*   WKALOCK='0'B;                   /* TURN OFF LOCK SW FOR ALL      */
         NI    WKALOCK(RBSECPTR),B'11111110'                       0557
*   END DEBCHECK;                                                  0558
@EL00002 DS    0H                                                  0558
@EF00002 DS    0H                                                  0558
@ER00002 BR    @14                                                 0558
*   RFY                                                            0559
*    (GPR01P,                                                      0559
*     GPR10P,                                                      0559
*     GPR14P,                                                      0559
*     GPR15P)UNRSTD;                                               0559
*                                                                  0560
*/********************************************************************/
*/* THE FOLLOWING SUBROUTINE RECEIVES CONTROL FROM THE DUMPRTN, THE  */
*/* SYSERRTN, AND THE 2ND LEVEL ESTAE TO TAKE AN SVC DUMP. A HEADER  */
*/* IS BUILT IN THE SDWA TO IDENTIFY THE DUMP. THE ONLY REGS CHANGED */
*/* BY THIS SUBROUTINE ARE 0,1 AND 15. UPON ENTRY THE LOCAL LOCK     */
*/* IS NOT HELD.  THE SDUMP SVC WILL RETURN A RETURN CODE IN R15,    */
*/* THE VALUES FOR WHICH ARE AS FOLLOWS:                             */
*/*                                00 - SDUMP SUCCESSFUL             */
*/*                                04 - PARTIAL SDUMP TAKEN          */
*/*                                08 - SDUMP UNSUCCESSFUL           */
*/* THE SDUMP RETURN CODE PRESENTED TO THE USER IS THIS VALUE +4.    */
*/*                                04 - SDUMP SUCCESSFUL             */
*/*                                08 - PARTIAL SDUMP TAKEN          */
*/*                                0C - SDUMP UNSUCCESSFUL           */
*/* A BIT IS SET IN THE SVRB WORKAREA TO IDENTIFY THE RETURN CODE.   */
*/********************************************************************/
*                                                                  0560
*SDUMP:                                                            0560
*   PROC OPTIONS(NOSAVE);           /* TAKE AN SVC DUMP              */
SDUMP    DS    0H                                                  0561
*   RFY                                                            0561
*    (GPR00P,                                                      0561
*     GPR01P,                                                      0561
*     GPR14P,                                                      0561
*     GPR15P)RSTD;                                                 0561
*   HEADER=HEADING;                 /* SET UP HEADER                 */
         MVC   HEADER(27,SDWAPTR),HEADING                          0562
*   JOBNAME=TIOCNJOB;               /* JOB NAME                      */
         L     @12,PSATOLD                                         0563
         L     @12,TCBTIO(,@12)                                    0563
         MVC   JOBNAME(8,SDWAPTR),TIOCNJOB(@12)                    0563
*   STEPNAME=TIOCSTEP;              /* STEP NAME                     */
         MVC   STEPNAME(8,SDWAPTR),TIOCSTEP(@12)                   0564
*   SDUMPLST=DUMPLIST;              /* MOVE LIST FORM TO VAR.AREA    */
         MVC   SDUMPLST(24,SDWAPTR),DUMPLIST                       0565
*   GPR01P=ADDR(SDUMPLST);          /* PUT DUMP LIST ADDR IN REG     */
         LA    GPR01P,SDUMPLST(,SDWAPTR)                           0566
*   GEN REFS(HEADER)SETS(SDUMPLST,GPR00P,GPR01P);                  0567
        SDUMP HDRAD=HEADER(SDWAPTR),MF=(E,(1))  TAKE SVC DUMP
*   SDWAEAS='1'B;                   /* SET DUMP TAKEN FLAG           */
         OI    SDWAEAS(SDWAPTR),B'00001000'                        0568
*   WKADUMP=RETURNCD+RCDIV;         /* PUT RC+4 FROM DUMP IN WKA     */
         LA    @12,4                                               0569
         AR    @12,RETURNCD                                        0569
         STC   @12,WKADUMP(,RBSECPTR)                              0569
*   END SDUMP;                      /* RETURN TO MAIN ROUTINE        */
@EL00003 DS    0H                                                  0570
@EF00003 DS    0H                                                  0570
@ER00003 BR    @14                                                 0570
*   RFY                                                            0571
*    (GPR00P,                                                      0571
*     GPR01P,                                                      0571
*     GPR14P,                                                      0571
*     GPR15P)UNRSTD;                                               0571
*                                                                  0571
*/********************************************************************/
*/*  THE FOLLOWING SUBROUTINE IS CALLED BY THE SYSERRTN AND THE      */
*/*  CLEANRTN  TO SET UP THE SDWA WHEN A SYSTEM ERROR HAS BEEN       */
*/*  DETECTED. THE FOLLOWING RECORDING INFORMATION WILL BE PUT IN    */
*/*  THE VARIABLE PORTION OF THE SDWA (FROM WHERE RTM WILL PUT IT    */
*/*  OUT ON SYS1.LOGREC):  SVC AUDIT TRAIL BYTE                      */
*/*                        RETURN CODE FROM CLEANRTN                 */
*/*                        RETURN CODE FROM SDUMP                    */
*/*                        REGISTERS 0 AND 1 AT TIME SVC ISSUED      */
*/*                        RB OLD PSW CONTAINING THE ADDRESS+2 FROM  */
*/*                           WHERE THE SVC WAS ISSUED               */
*/*                        OLD ABEND CODE IF PERCOLATED ERROR        */
*/*  THE ONLY REGISTER CHANGED BY THIS SUBROUTINE IS REG 1.          */
*/********************************************************************/
*                                                                  0572
*RECORD:                                                           0572
*   PROC OPTIONS(NOSAVE);           /* PUT SYSTEM INFO IN SDWA       */
RECORD   DS    0H                                                  0573
*   RFY                                                            0573
*     GPR14P RSTD;                  /* RESTRICT RETURN ADDR          */
*   RECAUDIT=WKATRAIL;              /* MV AUDIT TRAIL BIT IN SDWA    */
         MVC   RECAUDIT(1,SDWAPTR),WKATRAIL(RBSECPTR)              0574
*   RECRCDP=WKADUMP;                /* MV SVC DUMP RET CODE IN       */
         MVC   RECRCDP(1,SDWAPTR),WKADUMP(RBSECPTR)                0575
*   RECRCLN=WKACLEAN;               /* MV CLEANUP RTN RET CODE IN    */
         MVC   RECRCLN(1,SDWAPTR),WKACLEAN(RBSECPTR)               0576
*   RECREG0=RBGRS0;                 /* REG0 WHEN SVC WAS ISSUED      */
         MVC   RECREG0(4,SDWAPTR),RBGRS0(RBSECPTR)                 0577
*   RECREG1=RBGRS1;                 /* REG1 WHEN SVC WAS ISSUED      */
         MVC   RECREG1(4,SDWAPTR),RBGRS1(RBSECPTR)                 0578
*   RFY                                                            0579
*     GPR01P RSTD;                  /* RESTRICT WORK REG             */
*   GPR01P=RBLINK;                  /* GET PREVIOUS RB ADDR          */
         L     GPR01P,RBLINK(,RBSECPTR)                            0580
*   RFY                                                            0581
*     RBBASIC BASED(GPR01P);        /* BASE FOR PREVIOUS RB          */
*   RECOPSW=RBOPSW;                 /* GET PSW FROM PREVIOUS RB      */
         MVC   RECOPSW(8,SDWAPTR),RBOPSW(GPR01P)                   0582
*   RECPERC=SDWACMPC;               /* PUT IN PREVIOUS ABEND CODE    */
         MVC   RECPERC(3,SDWAPTR),SDWACMPC(SDWAPTR)                0583
*   RFY                                                            0584
*     RBBASIC BASED(RBSECPTR);      /* RETURN TO RB BASE FOR SVC     */
*   END RECORD;                     /* RETURN TO MAIN ROUTINE        */
@EL00004 DS    0H                                                  0585
@EF00004 DS    0H                                                  0585
@ER00004 BR    @14                                                 0585
*   RFY                                                            0586
*    (GPR01P,                                                      0586
*     GPR14P)UNRSTD;                                               0586
*                                                                  0587
*/********************************************************************/
*/*  THE FOLLOWING SUBROUTINE PERFORMS THE CLEANUP FUNCTION FOR THIS */
*/*  ESTAE.  THIS ROUTINE IS ENTERED FOR ALL ERROR CONDITIONS.  INPUT*/
*/*  TO THE ROUTINE IS THE AUDIT TRAIL BIT SET BY THE DYNAMIC BUFFER */
*/*  MODULE TO INDICATE HOW MUCH PROCESSING WAS COMPLETED BEFORE THE */
*/*  ABEND. THIS BIT IS FOUND IN THE FIRST BYTE OF THE SVRB EXTENDED */
*/*  SAVEAREA. AS THIS ROUTINE PERFORMS CLEANUP IT LIKEWISE WILL SET */
*/*  CLEANUP RC BITS INDICATING WHAT WAS DONE.  A SECOND LEVEL       */
*/*  ESTAE WILL BE ESTABLISHED FOR THIS ROUTINE, SHOULD A PROGRAM    */
*/*  CHECK OCCUR DURING PROCESSING. THE SECOND LEVEL ESTAE WILL      */
*/*  RETURN CONTROL TO THE MAIN ROUTINE.                             */
*/*              THE CLEANUP RETURN CODES ARE AS FOLLOWS:            */
*/*                  01     CLEANUP UNSUCCESSFUL. UNPREDICTABLE      */
*/*                         RESULTS IF DYNAMIC BUFFERING IS USED     */
*/*                         WITH FAILING DCB.                        */
*/*                  02     CLEANUP SUCCESSFUL                       */
*/*                  03     CLEANUP NOT ATTEMPTED. IT WAS DETERMINED */
*/*                         AS NOT BEING NECESSARY. DCB IS REUSABLE. */
*/*                  04     CLEANUP NOT ATTEMPTED BECAUSE DEBCHK     */
*/*                         FOUND INVALID DEB, AUDIT TRAIL BIT WAS   */
*/*                         INVALID OR INPUT CONTROL BLOCKS (DCB OR  */
*/*                         DECB) WERE INVALID.                      */
*/*  NOTE: REGISTERS 1-14 UPON ENTRY TO THIS SUBROUTINE ARE SAVED,   */
*/*        AND RESTORED UPON EXIT. HOWEVER, SINCE THE DEBCHECK SUBRTN*/
*/*        CALLED BY CLEANUP USES THE SAME SAVEAREA,ONLY THE CONTENTS*/
*/*        OF THOSE REGISTERS RESTRICTED THROUGHOUT THE MODULE CAN   */
*/*        BE ASSURED. THE REMAINING REGS ARE SAVED FOR MAINTENANCE  */
*/*        NEEDS. THEIR CONTENTS CAN NOT BE GUARANTEED ACROSS ANY    */
*/*        SUBROUTINE.  UPON RETURN FROM THIS SUBRTN R15 WILL CONTAIN*/
*/*        A RC OF EITHER 0=CLEANUP COMPLETED, OR 4=CLEANUP ROUTINE  */
*/*        ABENDED BEFORE RETURN.                                    */
*/********************************************************************/
*                                                                  0587
*CLEANUP:                                                          0587
*   PROC OPTIONS(NOSAVE);           /* CLEAN UP RESOURCES            */
CLEANUP  DS    0H                                                  0588
*   RFY                                                            0588
*    (GPR01P,                                                      0588
*     GPR14P,                                                      0588
*     WRKREG)RSTD;                  /* RESTRICT RET ADDR             */
*   STM(GPR01P,GPR14P,SAVESDWA);    /* SAVE REGS 1-14 IN SDWA        */
         STM   GPR01P,GPR14P,SAVESDWA(SDWAPTR)                     0589
*   WRKREG=GPR14P;                  /* SAVE RETURN AROUND ESTAE      */
         LR    WRKREG,GPR14P                                       0590
*   RFY                                                            0591
*    (GPR01P,                                                      0591
*     GPR14P)UNRSTD;                                               0591
*   WKAESTAE=ELIST;                 /* MV LIST FORM INTO WKAREA      */
*                                                                  0592
         MVC   WKAESTAE(20,RBSECPTR),ELIST                         0592
*/* ISSUE ESTAE MACRO TO SET UP BACKUP ROUTINE SHOULD CLEANUP ABEND  */
*                                                                  0593
*   GEN REFS(WKAESTAE,SDWAPTR);                                    0593
*                                      /* ISSUE SECOND LEVEL ESTAE  */
        ESTAE PARAM=(SDWAPTR),MF=(E,WKAESTAE(RBSECPTR)) SET UP  YM5757
*   WKARETRN=WRKREG;                /* SAVE RETURN REG IN SVRB -   0594
*                                      DEBCHECK WILL OVERLAY REG 14
*                                      SAVED IN SAVESDWA             */
         ST    WRKREG,WKARETRN(,RBSECPTR)                          0594
*   RFY                                                            0595
*     WRKREG UNRSTD;                                               0595
*   WKASVREG=SDWAPTR;               /* SAVE SDWA IN SVRB             */
         ST    SDWAPTR,WKASVREG(,RBSECPTR)                         0596
*   WKACLEAN=0;                     /* INITIALIZE CLEAN RC           */
*                                                                  0597
         MVI   WKACLEAN(RBSECPTR),X'00'                            0597
*/* IF INPUT CONTROL BLOCKS (DECB OR DCB) ARE BAD, DON'T TRY TO      */
*/* CLEAN UP - WILL ONLY MAKE THINGS WORSE.                          */
*                                                                  0598
*   IF BLKCTR<BCBERR THEN           /* IF DCB/DECB INVALID     YM4667*/
         CH    BLKCTR,@CH00107                                     0598
         BNL   @RF00598                                            0598
*     DO;                           /* CANT GET BUF ADDR       YM7500*/
*       WKACLEAN=CLEANRC1(4);       /* SET CLEAN CODE=NONE     YM7500*/
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1+3                     0600
*       RFY                                                        0601
*         GPR05P RSTD;              /* RESTRICT REG 5          YM7500*/
*       GPR05P=RBSECPTR;            /* EXITCLN EXPECT SVRB     YM7500*/
         LR    GPR05P,RBSECPTR                                     0602
*                                   /* TO BE IN REG 5          YM7500*/
*       GOTO EXITCLN;               /* GO TO RETURN            YM7500*/
         B     EXITCLN                                             0603
*       RFY                                                        0604
*         GPR05P UNRSTD;            /*                         YM7500*/
*     END;                          /*                         YM7500*/
*                                                                  0605
*/* IF EXTEND FUNCTION, OR BUFFER ALREADY MADE AVAILABLE OR GIVEN    */
*/* TO THE NEXT WAITING IOB WITH EXCP, NO CLEANUP TO BE DONE.        */
*                                                                  0606
*   IF RBGRS0<0 THEN                /* IS DECB NEG FOR EXTEND        */
@RF00598 ICM   @12,15,RBGRS0(RBSECPTR)                             0606
         BNM   @RF00606                                            0606
*     DO;                           /* YES, NO CLEANUP NECESSARY     */
*       WKACLEAN=CLEANRC1(3);       /* TURN ON RC FOR NOCLEAN        */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1+2                     0608
*       RFY                                                        0609
*         GPR05P RSTD;              /* ON ENTRY EXITCLN EXPECTS      */
*       GPR05P=RBSECPTR;            /* SVRB ADDR TO BE IN REG 5      */
         LR    GPR05P,RBSECPTR                                     0610
*       GOTO EXITCLN;               /* RETURN TO MAIN ROUTINE        */
         B     EXITCLN                                             0611
*       RFY                                                        0612
*         GPR05P UNRSTD;                                           0612
*     END;                                                         0613
*   IF WKABUFQ='1'B×WKAEXCP='1'B THEN/* IF BUFFER ADDED TO AVAIL Q OR
*                                      ALREADY GIVEN TO NEXT IOB     */
@RF00606 TM    WKABUFQ(RBSECPTR),B'00110000'                       0614
         BZ    @RF00614                                            0614
*     DO;                           /* NO CLEANUP NECESSARY          */
*       WKACLEAN=CLEANRC1(3);       /* RETURN CODE MEANING THAT    0616
*                                      NECESSARY RESOURCES FREED     */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1+2                     0616
*       RFY                                                        0617
*         GPR05P RSTD;              /* ON ENTRY EXITCLN EXPECTS      */
*       GPR05P=RBSECPTR;            /* SVRB ADDR TO BE IN REG 5      */
         LR    GPR05P,RBSECPTR                                     0618
*       GOTO EXITCLN;               /* RETURN TO MAIN ROUTINE        */
         B     EXITCLN                                             0619
*       RFY                                                        0620
*         GPR05P UNRSTD;                                           0620
*     END;                                                         0621
*                                                                  0621
*/* BEFORE SETTING UP REGS FOR ENTRY INTO DYNAMIC BUFFERING MODULE   */
*/* MUST GO TO THE DEBCHK ROUTINE TO VALIDATE THE DEB BEFORE GETTING */
*/* THE ADDRESS TO THE DYNAMIC BUFFERING ROUTINE FROM IT.            */
*                                                                  0622
*   CALL DEBCHECK;                  /* GO VALIDATE DEB ADDRESS       */
@RF00614 BAL   @14,DEBCHECK                                        0622
*   IF WKADEBRC^=0 THEN             /* IF DEB BAD, NO CLEANUP        */
         CLI   WKADEBRC(RBSECPTR),0                                0623
         BE    @RF00623                                            0623
*     DO;                                                          0624
*       WKACLEAN=CLEANRC1(4);       /* SET CLEAN UP CODE TO NONE     */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1+3                     0625
*       RFY                                                        0626
*         GPR05P RSTD;                                             0626
*       GPR05P=RBSECPTR;            /* ON ENTRY EXITCLN EXPECTS SVRB
*                                      ADDR TO BE IN REG 5           */
         LR    GPR05P,RBSECPTR                                     0627
*       GOTO EXITCLN;               /* RETURN TO MAIN ROUTINE        */
         B     EXITCLN                                             0628
*       RFY                                                        0629
*         GPR05P UNRSTD;                                           0629
*     END;                                                         0630
*                                                                  0630
*/*  INITIALIZE REGS REQUIRED FOR ENTRY INTO THE DYN BUF MODULES     */
*                                                                  0631
*   RFY                                                            0631
*    (GPR01P,                                                      0631
*     GPR02P,                                                      0631
*     GPR03P,                                                      0631
*     GPR05P,                                                      0631
*     GPR06P,                                                      0631
*     GPR15P)RSTD;                                                 0631
@RF00623 DS    0H                                                  0632
*   RFY                                                            0632
*    (GPR04P,                                                      0632
*     GPR00P,                                                      0632
*     GPR08P)RSTD;                  /* RESTRICT INPUT TO DYNBUF      */
*   RFY                                                            0633
*     DEBBASIC BASED(WKADEB);       /* VALIDATED DEB ADDR AS BASE    */
*   GPR15P=DEBSIOA;                 /* GET DYN BUF MOD ADDRESS       */
         SR    @12,@12                                             0634
         ICM   @12,7,WKADEB(RBSECPTR)                              0634
         L     @12,DEBAPPAD(,@12)                                  0634
         L     GPR15P,DEBSIOA(,@12)                                0634
*   GPR05P=RBSECPTR;                /* SVRB IN REG 5 FOR DYN BUF     */
         LR    GPR05P,RBSECPTR                                     0635
*   RFY                                                            0636
*     RBBASIC BASED(GPR05P);        /* ESTABLISH R5 AS NEW BASE FOR
*                                      SVRB - SAME AS DYN BUF,     0636
*                                      CLEANUP SUBRTN DOES NOT HAVE
*                                      ADDRESSABILITY TO SDWA        */
*   GPR00P=DECBPT;                  /* GET DECB ADDR ON ENTRY-R0     */
         L     @14,DECBPT(,GPR05P)                                 0637
         LR    GPR00P,@14                                          0637
*   GPR06P=DECAREA;                 /* BUFFER ADDR IN R6       YM5757*/
         L     GPR06P,DECAREA(,@14)                                0638
*   IF DECKEYS='1'B THEN            /* IF KEY READ IN BUF      YM5757*/
         TM    DECKEYS(@14),B'10000000'                            0639
         BNO   @RF00639                                            0639
*     GPR06P=DECKYADR;              /* BEGIN WITH KEY ADDR     YM5757*/
         L     GPR06P,DECKYADR(,@14)                               0640
*   GPR01P=DCBPTR;                  /* GET DCB ADDR ON ENTRY-R1      */
@RF00639 L     @14,DCBPTR(,GPR05P)                                 0641
         LR    GPR01P,@14                                          0641
*   GPR08P=PSATOLD;                 /* TCB ALREADY IN R8             */
         L     @12,PSATOLD                                         0642
         LR    GPR08P,@12                                          0642
*   GPR03P=GPR15P;                  /* SET UP BASE REG               */
         LR    GPR03P,GPR15P                                       0643
*   GPR02P=WKAIOBRG;                /* WAITING IOB(IF THERE IS ONE)
*                                      IN R2 AT TIME OF ABEND (OR 0) */
         L     GPR02P,WKAIOBRG(,GPR05P)                            0644
*   GPR04P=DCBPTR;                  /* DCB IN R4 AT TIME OF ABEND    */
*                                                                  0645
         LR    GPR04P,@14                                          0645
*/*  ENTRY AT TOP OF DYN BUF MODULE - NO AUDIT TRAIL BITS SET        */
*                                                                  0646
*   IF WKATRAIL=0 THEN              /* IF DYN BUF RTN DIDNT GO       */
         CLI   WKATRAIL(GPR05P),0                                  0646
         BNE   @RF00646                                            0646
*     DO;                           /* TEST ADDRESS SPACE TO GET     */
*       IF TCBRV='1'B THEN          /* CORRECT BUFFER FORMAT         */
         TM    TCBRV(@12),B'10000000'                              0648
         BNO   @RF00648                                            0648
*         DO;                       /* REAL ADDRESS SPACE            */
*           RFY                                                    0650
*             BCBDEFR BASED(DCBBUFCB);/* BCB BASE              YM5757*/
*           IF BCBFRQT^=WKASAVE THEN/* COMPARE 1ST FIELD CHANGED IN
*                                      DYN BUF MOD TO FIELD AS SAVED
*                                      ON ENTRY,TO DETERMINE IF ABEND
*                                      OCCURRED AFTER CHANGE BUT   0651
*                                      BEFORE BIT WAS SET.           */
         L     @14,DCBBUFCB+16(,@14)                               0651
         CLC   BCBFRQT(4,@14),WKASAVE(GPR05P)                      0651
         BE    @RF00651                                            0651
*             DO;                   /* BCBFRQT WAS ALREADY CHANGE    */
*               RFY                                                0653
*                 IOBSTDRD BASED(GPR02P);/* IOB BASE                 */
*               IF GPR02P>0 THEN    /* IF IOB REG WAS SAVE     YM5757*/
         SR    @14,@14                                             0654
         CR    GPR02P,@14                                          0654
         BNH   @RF00654                                            0654
*                 DO;               /* ENTRY NOT AT TOP        YM5757*/
*                   DO;             /* MODESET KEYADDR(WKASVKEY)     */
*                     SPKA(WKASVKEY);/* SET PSW KEY                  */
         SR    @12,@12                                             0657
         IC    @12,WKASVKEY(,GPR05P)                               0657
         SPKA  0(@12)                                              0657
*                   END;            /* MODESET KEYADDR(WKASVKEY)     */
*                                   /* USER KEY YM5757               */
*                   IOBDQPTR=0;     /* MAKE SURE FIELD IS 0          */
         ST    @14,IOBDQPTR(,GPR02P)                               0659
*                   DO;             /* MODESET EXTKEY(SUPR)          */
*                     SPKA(0);      /* SET PSW KEY                   */
         SPKA  0(@14)                                              0661
*                   END;            /* MODESET EXTKEY(SUPR)          */
*                                   /* SUPER KEY YM5757              */
*                   WKAIOBQ='1'B;   /* ENTRY +12 IN MOD              */
         OI    WKAIOBQ(GPR05P),B'10000000'                         0663
*                   GOTO ESTENTA;   /* IOB IS DEQUEUED               */
         B     ESTENTA                                             0664
*                 END;                                             0665
*             END;                                                 0666
@RF00654 DS    0H                                                  0667
*           IF WKASAVE2^=BCBNABFR&WKASAVE2^=0 THEN/* IF YM7563 BUFFER
*                                      ALREADY ADDED YM7563 TO     0667
*                                      AVAILABLE BUF QUE             */
@RF00651 L     @14,WKASAVE2(,GPR05P)                               0667
         L     @12,DCBPTR(,GPR05P)                                 0667
         L     @12,DCBBUFCB+16(,@12)                               0667
         C     @14,BCBNABFR(,@12)                                  0667
         BE    @RF00667                                            0667
         LTR   @14,@14                                             0667
         BZ    @RF00667                                            0667
*             DO;                   /* ALL WORK COMPLETED            */
*               WKACLEAN=CLEANRC1(3);/* SET CLEANUP CODE-OK          */
         MVC   WKACLEAN(1,GPR05P),CLEANRC1+2                       0669
*               GOTO EXITCLN;       /* RETURN TO MAIN RTN            */
         B     EXITCLN                                             0670
*             END;                                                 0671
*           ELSE                    /* NO FIELDS CHANGED       YM7563*/
*             GOTO ESTENT;          /* CAN START AT TOP        YM7563*/
*         END;                      /* END OF REAL ADRSPACE LOGIC    */
*       ELSE                        /* VIRTUAL ADDRESS SPACE         */
*         DO;                       /* WHICH USES UNSCHEDULED LST    */
@RF00648 DS    0H                                                  0675
*           IF WKASAVE=0&WKASAVE2=0 THEN/* IF FIELDS 0         YM7563*/
         SR    @14,@14                                             0675
         C     @14,WKASAVE(,GPR05P)                                0675
         BNE   @RF00675                                            0675
         C     @14,WKASAVE2(,GPR05P)                               0675
         BE    @RT00675                                            0675
*             GOTO ESTENT;          /* STILL, START AT TOP     YM7563*/
*           RFY                                                    0677
*             BCBDEFV BASED(DCBBUFCB);/* BASE FOR BCB          YM5757*/
@RF00675 DS    0H                                                  0678
*           IF USLBFRQT^=WKASAVE THEN/* COMPARE 1ST FIELD CHANGE IN
*                                      DYN BUF MOD TO FIELD AS SAVED
*                                      ON ENTRY, TO DETERMINE IF   0678
*                                      ABEND OCCURRED AFTER CHANGE 0678
*                                      BUT BEFORE BIT WAS SET.       */
         L     @14,DCBPTR(,GPR05P)                                 0678
         L     @14,DCBDYNB+52(,@14)                                0678
         CLC   USLBFRQT(4,@14),WKASAVE(GPR05P)                     0678
         BE    @RF00678                                            0678
*             DO;                   /* IF USL FIELDS WERE CHANGED    */
*               WKAIOBQ='1'B;       /* IOB DEQUEUED +12 ENTRY        */
         OI    WKAIOBQ(GPR05P),B'10000000'                         0680
*               GOTO ESTENTA;       /* ENTER IN THE MIDDLE           */
         B     ESTENTA                                             0681
*             END;                                                 0682
*           IF USLIOB1=0&WKASAVE2^=BCBBFAVL THEN/* IF YM5757 NO IOB
*                                      WAITING, AND IF FREED BUFFER
*                                      IS ALREADY PUT ON BUFFER QUEUE
*                                      AGAIN THEN                    */
@RF00678 L     @14,DCBPTR(,GPR05P)                                 0683
         L     @12,DCBDYNB+52(,@14)                                0683
         ICM   @11,7,USLIOB1(@12)                                  0683
         BNZ   @RF00683                                            0683
         L     @14,DCBBUFCB+16(,@14)                               0683
         L     @12,WKASAVE2(,GPR05P)                               0683
         SR    @11,@11                                             0683
         IC    @11,BCBBFAVL(,@14)                                  0683
         CR    @12,@11                                             0683
         BE    @RF00683                                            0683
*             DO;                   /* ALL WORK COMPLETED            */
*               WKACLEAN=CLEANRC1(3);/* SET CLEANUP CODE-OK          */
         MVC   WKACLEAN(1,GPR05P),CLEANRC1+2                       0685
*               GOTO EXITCLN;       /* RETURN TO MAIN RTN            */
         B     EXITCLN                                             0686
*             END;                                                 0687
*         END;                      /* END OF VIRTUAL LOGIC          */
@RF00683 DS    0H                                                  0689
*     END;                          /* END OF WKATRAIL=0 LOGIC       */
*   ELSE                            /* AUDIT TRAIL BIT SET     YM5757*/
*     GOTO ESTENTA;                 /* GO TEST WHICH BIT       YM5757*/
*                                                                  0690
*/* THE FOLLOWING DSECT FORMATS THE THREE ENTRY POINTS INTO THE DYN  */
*/* BUFFERING MODULE WHICH MAY BE TAKEN BY THE CLEANUP SUBROUTINE.   */
*/* THE DYN BUF MOD IS ENTERED AT OFFSET 8,12, OR 16 FROM REGISTER 15*/
*/* WHICH IS THE BRANCHING REGISTER AND BASE FOR THE DYN BUF MOD.    */
*                                                                  0691
*   DCL                                                            0691
*    (DYNBUF,                                                      0691
*     ESTENT0,                                                     0691
*     ESTENTAA,                                                    0691
*     ESTENTBB)                     /* DSECT FOR DYN BUF             */
*         LABEL LOCAL GEND;         /* MODULES ENTRY POINTS          */
*   GEN DATA;                                                      0692
*   GEN REFS(DYNBUF);                                              0693
*                                                                  0693
        USING DYNBUF,GPR15P            SET UP ADDRESSABILITY TO DSECT
*                                      MAPPING DYN BUF MOD ENTRY PTS
*/*    ENTRY AT BEGINNING OF DYNAMIC BUF MODULE IF WKATRAIL = 0      */
*/*    AND IT IS DETERMINED THAT NO FIELDS WERE CHANGED              */
*                                                                  0694
*ESTENT:                                                           0694
*   ;                               /* ENTER AT TOP OF MOD     YM7563*/
ESTENT   DS    0H                                                  0695
*   RFY                                                            0695
*     GPR14P RSTD;                                                 0695
*   GPR14P=ADDR(EXITCLNA);          /* EST RET ADDR FROM DYN BUF     */
         LA    GPR14P,EXITCLNA                                     0696
*   GOTO ESTENT0;                   /* BR TO BEGINNING OF DYN BUF    */
         B     ESTENT0                                             0697
*   RFY                                                            0698
*     GPR14P UNRSTD;                                               0698
*                                                                  0698
*/*      ENTRY AT ESTENTA IN DYN BUF MOD IF WKATRAIL = WKAIOBQ       */
*                                                                  0699
*ESTENTA:                                                          0699
*   IF WKAIOBQ='1'B THEN            /* CHPGM SET UP FOR NEXT IOB     */
ESTENTA  TM    WKAIOBQ(GPR05P),B'10000000'                         0699
         BNO   @RF00699                                            0699
*     DO;                           /* YES,OFFSET OF 12 IN DYNBUF    */
*       WKAREG14=ADDR(EXITCLNA);    /* RET ADDR FOR DYN BUF RTN      */
         LA    @14,EXITCLNA                                        0701
         ST    @14,WKAREG14(,GPR05P)                               0701
*       GOTO ESTENTAA;              /* BR TO THIS ENTRY IN DYNBUF    */
         B     ESTENTAA                                            0702
*     END;                                                         0703
*                                                                  0703
*/*  ENTRY AT ESTENTB IN DYN BUF MOD IF WKATRAIL = WKABUFAS          */
*                                                                  0704
*ESTENTB:                                                          0704
*   IF WKABUFAS='1'B THEN           /* BUFFER ASSIGNED BUT EXCP      */
@RF00699 DS    0H                                                  0704
ESTENTB  TM    WKABUFAS(GPR05P),B'01000000'                        0704
         BNO   @RF00704                                            0704
*     DO;                           /* HAS NOT BEEN ISSUED YET       */
*       WKAREG14=ADDR(EXITCLNA);    /* RET ADDR FOR DYN BUF RTN      */
         LA    @14,EXITCLNA                                        0706
         ST    @14,WKAREG14(,GPR05P)                               0706
*       GOTO ESTENTBB;              /* BR TO THIS ENTRY IN DYNBUF    */
         B     ESTENTBB                                            0707
*     END;                                                         0708
*   ELSE                            /* AUDIT TRAIL BIT INVALID       */
*     WKACLEAN=CLEANRC1(4);         /* SET CLEAN UP CODE TO 4        */
@RF00704 MVC   WKACLEAN(1,GPR05P),CLEANRC1+3                       0709
*   GOTO EXITCLN;                   /* RETURN TO MAIN RTN            */
         B     EXITCLN                                             0710
*   RFY                                                            0711
*    (GPR00P,                                                      0711
*     GPR01P,                                                      0711
*     GPR02P,                                                      0711
*     GPR03P,                                                      0711
*     GPR04P,                                                      0711
*     GPR06P)UNRSTD;                                               0711
*                                                                  0711
*/*THE FOLLOWING ROUTINE SETS UP FOR RETURN FROM THE CLEANUP SUBRTN. */
*/*IF THIS ROUTINE IS ENTERED THE SECONDARY ESTAE WAS NOT ENTERED.   */
*/*THE SECONDARY ESTAE IS THEREFORE DELETED AND REGISTER 15 IS ZEROED*/
*/*TO INDICATE TO THE MAIN ROUTINE THAT THE SECONDARY ESTAE HAS BEEN */
*/*RELEASED. UPON ENTRY THE SVRB BASE IS STILL GPR05P.               */
*                                                                  0712
*EXITCLNA:                                                         0712
*   ;                               /* ENTRY FROM DYN BUF MOD        */
EXITCLNA DS    0H                                                  0713
*   DO;                             /* MODESET EXTKEY(SUPR)          */
*     SPKA(0);                      /* SET PSW KEY                   */
         SR    @14,@14                                             0714
         SPKA  0(@14)                                              0714
*   END;                            /* MODESET EXTKEY(SUPR)          */
*                                   /* RETURN TO SUPERVISOR KEY IN 0716
*                                      CASE NOT ALREADY              */
*   SDWAPTR=WKASVREG;               /* GET SDWA IN SVRB        YM7568*/
         L     SDWAPTR,WKASVREG(,GPR05P)                           0716
*   RFY                                                            0717
*     SDWA BASED(SDWAPTR);          /* REEST SDWA ADDRESS      YM7568*/
*   RFY                                                            0718
*    (GPR01P,                                                      0718
*     GPR14P)RSTD;                  /*                         YM7568*/
*   LM(GPR01P,GPR14P,SAVESDWA);     /* RESTORE MAIN REGS       YM7568*/
         LM    GPR01P,GPR14P,SAVESDWA(SDWAPTR)                     0719
*   RFY                                                            0720
*    (GPR01P,                                                      0720
*     GPR14P)UNRSTD;                /* RELEASE REGS            YM7568*/
*   RFY                                                            0721
*     RBBASIC BASED(RBSECPTR);      /* ESTAE REGS-SVRB BAS     YM7568*/
*   WKACLEAN=CLEANRC1(2);           /* SET CLEANUP RC-OK             */
         MVC   WKACLEAN(1,RBSECPTR),CLEANRC1+1                     0722
*   GOTO REMEST;                    /* GO REMOVE ESTAE         YM7568*/
         B     REMEST                                              0723
*EXITCLN:                                                          0724
*   ;                               /* RETURN TO MAIN ROUTINE        */
EXITCLN  DS    0H                                                  0725
*   RFY                                                            0725
*     RBBASIC BASED(GPR05P);        /* ON ENTRY R5=RB PTR      YM7568*/
*   SDWAPTR=WKASVREG;               /* GET SDWA SAVED IN SVRB        */
         L     SDWAPTR,WKASVREG(,GPR05P)                           0726
*   RFY                                                            0727
*     SDWA BASED(SDWAPTR);          /* REEST SDWA ADDRESSABILITY     */
*   RFY                                                            0728
*    (GPR01P,                                                      0728
*     GPR14P)RSTD;                  /* RESTRICT REGS           YM7568*/
*   LM(GPR01P,GPR14P,SAVESDWA);     /* RESTORE MAINLINE REGS         */
         LM    GPR01P,GPR14P,SAVESDWA(SDWAPTR)                     0729
*   RFY                                                            0730
*    (GPR01P,                                                      0730
*     GPR14P)UNRSTD;                /* RELEASE REGS            YM7568*/
*   RFY                                                            0731
*     RBBASIC BASED(RBSECPTR);      /* ESTAE REGS-SVRB BAS     YM7568*/
*                                                                  0731
*/*      REMOVE SECOND ESTAE SO AS NOT TO GO TO THE BACKUP           */
*                                                                  0732
*REMEST:                                                           0732
*   ;                               /* REMOVE THE ESTAE        YM7568*/
REMEST   DS    0H                                                  0733
*   GEN(ESTAE 0);                   /* DELETE SECONDARY ESTAE        */
         ESTAE 0
*   RFY                                                            0734
*    (GPR14P,                                                      0734
*     GPR15P)RSTD;                  /* RESTR RET REGS          YM7568*/
*   GPR14P=WKARETRN;                /* RESTORE RETURN ADDR           */
         L     GPR14P,WKARETRN(,RBSECPTR)                          0735
*   GPR15P=0;                       /* ZERO REGISTER 15              */
         SR    GPR15P,GPR15P                                       0736
*   END CLEANUP;                    /* RETURN TO MAIN ROUTINE        */
@EL00005 DS    0H                                                  0737
@EF00005 DS    0H                                                  0737
@ER00005 BR    @14                                                 0737
*   RFY                                                            0738
*    (GPR14P,                                                      0738
*     GPR15P)UNRSTD;                /* RELEASE RETURN REGS     YM7568*/
*                                                                  0739
*/********************************************************************/
*/*  THE FOLLOWING ROUTINE IS THE SECOND LEVEL ESTAE FOR IGCT005G.   */
*/*  IT IS ENTERED ONLY IF AN ERROR OCCURS DURING THE PROCESSING OF  */
*/*  THE CLEANUP ROUTINE.  IT WILL EXECUTE MANY OF THE FUNCTIONS OF  */
*/*  THE FIRST LEVEL ESTAE, BUT WILL DO NO VALIDATION OR CLEANUP.ITS */
*/*  PRIMARY FUNCTION IS TO RETURN CONTROL TO THE PRIMARY ESTAE AFTER*/
*/*  RECORDING THAT A SECONDARY ESTAE WAS ENTERED.                   */
*/*                     INPUT PARM: SDWA(NEW FOR THIS ESTAE) ADDRESS */
*/*                                 SDWA(FOR PRIMARY ESTAE) WHICH    */
*/*                                   CONTAINS SVRB ADDR FOR SVC 57  */
*/********************************************************************/
*                                                                  0739
*BACKUP5G:                                                         0739
*   ENTRY;                          /* SECOND LEVEL ESTAE FUNCT      */
@EP00739 DS    0H                                                  0739
@EC00739 DS    0H                                                  0740
*   GEN(STM @14,@12,12(@13));       /* ST REGS IN 2ND RTM     SAVAREA*/
         STM @14,@12,12(@13)
*   RFY                                                            0741
*     GPR01P RSTD;                  /* INPUT,RETRY                   */
*   SDWAPTR=GPR01P;                 /* GET ADDRESS OF SDWA           */
         LR    SDWAPTR,GPR01P                                      0742
*   SDWASR15=CLEANERR;              /* RC=4(TESTED BY 1ST LEVEL ON 0743
*                                      RET FROM CLEANUP INDICATES  0743
*                                      ENTRY INTO 2ND LEVEL ESTAE    */
         MVC   SDWASR15(4,SDWAPTR),@CF00096                        0743
*   SDWACSCT='IGCT005G';            /* PUT CSECT ID IN SDWA          */
         MVC   SDWACSCT(8,SDWAPTR),@CC03338                        0744
*   SDWAREXN='BACKUP5G';            /* PUT ESTAE ID IN SDWA          */
         MVC   SDWAREXN(8,SDWAPTR),@CC03549                        0745
*   GPR01P=SDWAPARM;                /* GET OLD SDWA IN REG 1,PASSED
*                                      AS PARM IN NEW SDWA ( WILL USE
*                                      OLD SDWA FOR USERRTN1       0746
*                                      PROCESSING)                   */
         L     GPR01P,SDWAPARM(,SDWAPTR)                           0746
*   RBSECPTR=GPR01P->SDWAPARM;      /* RESTORE SVRB FROM OLD SDWA    */
*                                                                  0747
         L     RBSECPTR,SDWAPARM(,GPR01P)                          0747
*/********************************************************************/
*/*  ISSUE MACRO TO ANALYZE ABEND AND GIVE CONTROL TO APPROPRIATE RTN*/
*/********************************************************************/
*                                                                  0748
*   DO;                             /* ?IGGSTART USER(USERRTN1)    0748
*                                      SDUMP(DUMPRTN1)             0748
*                                      CLEAN(DUMPRTN1)               */
*                                                                  0748
*/*  MACCOMP Y-2 SC1D0/SJ0204                                        */
*/*  MACSTAT Y-2 74050/YM7586                                        */
*/********************************************************************
*                                                                    */
*/* THIS ROUTINE ANALYSES FLAGS IN THE SDWA TO DETERMINE             */
*/* WHAT TYPE OF FUNCTION TO PERFORM                                 */
*/* THE FLAG COMBINATIONS TESTED AND THE ACTIONS TAKEN ARE SUMMARIZED*/
*/* IN THE FOLLOWING TABLE:                                          */
*/*                                                                  */
*/*   PREVIOUS  ×× CAUSE OF ERROR ENTRY                              */
*/*  PROCESSING ×× MCHK/PGIO/TEXC  OTHER                             */
*/*  ___________××________________________                           */
*/*       *EAS  ××        C          C                               */
*/*       *CLUP ××        C          C                               */
*/*       *STAF ××        S          S                               */
*/*       *PERC ××        C          U                               */
*/*       *NRBE ××        C          U                               */
*/*        NONE ××        C          U                               */
*/*                                                                  */
*/*       * THESE BITS ARE NOT ALL MUTUALLY EXCLUSIVE. THEY ARE      */
*/*         TESTED IN THE ORDER LISTED.                              */
*/*                                                                  */
*/*       FUNCTIONS TO BE PERFORMED:                                 */
*/*                                                                  */
*/* C (DUMPRTN1)--CLEAN UP RESOURCES AND PERCOLATE ERROR             */
*/*                                                                  */
*/* S (DUMPRTN1)--PREVIOUS RECOVERY ROUTINE FAILED.                  */
*/* TAKE A DUMP FOR IT, THEN TREAT AS C                              */
*/*                                                                  */
*/* U (USERRTN1)--VALIDATE USER INPUT. IF IT IS IN ERROR,            */
*/* TAKE PROBLEM DETERMINATION ACTIONS AND THEN CLEAN UP.            */
*/* IF IT IS VALID, ASSUME A SYSTEM ERROR IN COVERED FUNCTION.       */
*/* TAKE A DUMP, THEN TREAT AS C                                     */
*/********************************************************************
*                                                                    */
*                                                                  0749
*     IF SDWAEAS='1'B               /* LOWER ESTAE ALREADY DUMPED    */
*         ×SDWACLUP='1'B THEN       /* OR RTM SAYS CLEANUP           */
         TM    SDWAEAS(SDWAPTR),B'00001000'                        0749
         BO    @RT00749                                            0749
         TM    SDWACLUP(SDWAPTR),B'10000000'                       0749
         BO    @RT00749                                            0749
*       GOTO DUMPRTN1;              /* GO CLEAN UP & GET OUT         */
*     IF SDWASTAF='1'B THEN         /* A LOWER LEVEL ESTAE/FRR       */
         TM    SDWASTAF(SDWAPTR),B'10000000'                       0751
         BO    @RT00751                                            0751
*       GOTO DUMPRTN1;              /* WAS EXECUTING AND FAILED      */
*                                   /* TAKE A DUMP FOR IT            */
*     IF SDWATEXC='1'B              /* SOME NON-PROGRAM TYPE         */
*         ×SDWAPGIO='1'B            /* ERROR HAS OCCURRED            */
*         ×SDWAMCHK='1'B THEN       /* GO CLEAN UP & GET OUT         */
         TM    SDWATEXC(SDWAPTR),B'10000011'                       0753
         BNZ   @RT00753                                            0753
*       GOTO DUMPRTN1;                                             0754
*     GOTO USERRTN1;                /* CHECK USER INPUT              */
*                                                                  0755
         B     USERRTN1                                            0755
*/********************************************************************
*                                                                    */
*                                                                  0756
*   END;                                                           0756
*                                                                  0756
*/********************************************************************/
*/*  THE USERRTN1 RECEIVES CONTROL IF IT IS DETERMINED THAT A PROGRAM*/
*/*  CHECK OCCURRED DURING CLEANUP, OR A LOWER RB OR ESTAE CALLED    */
*/*  RTM OR ISSUED AN ABEND.  THIS ROUTINE WILL ISSUE A SETRP        */
*/*  TO RETRY BY RETURNING TO THE FIRST LEVEL ESTAE AT THE POINT     */
*/*  WHERE THE CLEANUP ROUTINE WAS CALLED.  THIS ADDRESS WAS STORED  */
*/*  IN THE SVRB WORKAREA AT WKARETRN BY THE CLEANUP SUBROUTINE.     */
*/********************************************************************/
*                                                                  0757
*USERRTN1:                                                         0757
*   ;                               /* PGM CHK OCCURRED IN CLEAN     */
USERRTN1 DS    0H                                                  0758
*   SDWASRSV(5:4+LENGTH(SAVESDWA))=GPR01P->SAVESDWA;/* PUT REGS 1-14,
*                                      WHICH WERE LAST SAVED IN OLD
*                                      SDWA, BY EITHER DEBCHECK OR 0758
*                                      CLEANUP ROUTINE, INTO NEW SDWA
*                                      AT LABEL SDWASRSV+4- THIS   0758
*                                      ENSURES ALL RESTRICTED REGS 0758
*                                      WILL BE SAME ON RETURN TO   0758
*                                      PRIMARY ESTAE. NO OTHER REGS
*                                      ARE NECESSARY EXCEPT FOR    0758
*                                      MAINTENANCE PURPOSES.         */
         MVC   SDWASRSV+4(56,SDWAPTR),SAVESDWA(GPR01P)             0758
*   DO;                             /* SETRP                       0759
*                                      RETADDR(WKARETRN->EST2RET)  0759
*                                      DUMP(NO) RECORD(YES) RC(4)  0759
*                                      FRESDWA(YES) RETREGS(YES)   0759
*                                      REGS(14)                      */
*     RESPECIFY                                                    0760
*      (GPR00P,                                                    0760
*       GPR01P,                                                    0760
*       GPR14P,                                                    0760
*       GPR15P)RSTD;                                               0760
*     GPR01P->SDWARCDE=4;           /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0761
*     GPR01P->SDWARTYA=ADDR(WKARETRN->EST2RET);/* SAVE RETRY ADDRESS */
         MVC   SDWARTYA(4,GPR01P),WKARETRN(RBSECPTR)               0762
*     GPR01P->SDWAFREE='1'B;        /* SET FLAG TO FREE SDWA         */
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWAFREE(GPR01P),B'10000100'                        0764
*     GPR01P->SDWAREQ='0'B;         /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0765
*     GPR01P->SDWAUPRG='1'B;        /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0766
*     GEN(RETURN (14));                                            0767
         RETURN (14)
*     RESPECIFY                                                    0768
*      (GPR00P,                                                    0768
*       GPR01P,                                                    0768
*       GPR14P,                                                    0768
*       GPR15P)UNRSTD;                                             0768
*   END;                            /* RETURN TO MAIN RTN            */
*   RFY                                                            0770
*     GPR01P UNRSTD;                /* RELEASE RETURN REG AND OLD  0770
*                                      SDWA PTR-THATS ALL FOLKS      */
*                                                                  0770
*/********************************************************************/
*/* THE DUMPRTN2 RECEIVES CONTROL IF IT IS DETERMINED THAT OTHER     */
*/* THAN A PROGRAM CHECK OCCURRED IN THE CLEANUP ROUTINE. THIS ESTAE */
*/* WILL ATTEMPT NO FURTHER ERROR ANALYSIS. IT WILL TAKE A SYSTEM    */
*/* DUMP, ASSUMING A SYSTEM ERROR, RECORD THE ERROR AND RETURN TO RTM*/
*/* FOR PERCOLATION. THE FIRST LEVEL ESTAE WILL NOT RECEIVE CONTROL. */
*/********************************************************************/
*                                                                  0771
*DUMPRTN1:                                                         0771
*   ;                               /* MUST BE A SYSTEM ERROR        */
DUMPRTN1 DS    0H                                                  0772
*   CALL SDUMP;                     /* GO TAKE SVC DUMP              */
         BAL   @14,SDUMP                                           0772
*   MESSAGE=SYSER;                  /* SET UP WTP MESSAGE            */
         MVC   MESSAGE(52,SDWAPTR),SYSER                           0773
*   RETCOD2=CLEANRC2(1);            /* CLEANUP RC -BAD CLEANUP       */
         MVC   RETCOD2(2,SDWAPTR),CLEANRC2                         0774
*   RETCOD=DUMPRC(WKADUMP/RCDIV);   /* MV DUMP RC INTO MESSAGE       */
         SR    @12,@12                                             0775
         IC    @12,WKADUMP(,RBSECPTR)                              0775
         SRL   @12,2                                               0775
         AR    @12,@12                                             0775
         LA    @06,DUMPRC-2(@12)                                   0775
         MVC   RETCOD(2,SDWAPTR),0(@06)                            0775
*   MSGJOB=TIOCNJOB;                /* MV IN JOB NAME                */
         L     @12,PSATOLD                                         0776
         L     @12,TCBTIO(,@12)                                    0776
         MVC   MSGJOB(8,SDWAPTR),TIOCNJOB(@12)                     0776
*   MSGSTEP=TIOCSTEP;               /* MV IN STEP NAME               */
*                                                                  0777
         MVC   MSGSTEP(8,SDWAPTR),TIOCSTEP(@12)                    0777
*/* MUST VALIDATE THE TIOT ENTRY BEFORE GETTING DDNAME FOR MESSAGE.  */
*/* THIS IS DONE BY GETTING THE PROTECTED ADDRESS OF THE TIOT ENTRY  */
*/* FROM THE DSAB, POINTED TO BY THE DEB.  THE DEB MUST BE VALIDITY  */
*/* CHECKED FIRST.                                                   */
*                                                                  0778
*   CALL DEBCHECK;                  /* GO VALIDATE THE DEB           */
         BAL   @14,DEBCHECK                                        0778
*   RFY                                                            0779
*     DEBBASIC BASED(WKADEB);       /* VALID DEB PASSED IN SVRB      */
*   IF WKADEBRC=0 THEN              /* IF DEB RET CODE=0,DEB OK      */
         CLI   WKADEBRC(RBSECPTR),0                                0780
         BNE   @RF00780                                            0780
*     MSGDDN=TIOEDDNM;              /* MV DDNAME INTO GTF BUFFER     */
         SR    @12,@12                                             0781
         ICM   @12,7,WKADEB(RBSECPTR)                              0781
         L     @12,DEBAPPAD(,@12)                                  0781
         L     @12,DEBXTNP(,@12)                                   0781
         L     @12,DEBXDSAB(,@12)                                  0781
         L     @12,DSABTIOT(,@12)                                  0781
         MVC   MSGDDN(8,SDWAPTR),TIOEDDNM(@12)                     0781
*   ELSE                            /* IF DEB BAD,MUST DUMMY DDN     */
*     MSGDDN=NODDNAME;              /* ASSIGN DDN AS ASTERISKS       */
         B     @RC00780                                            0782
@RF00780 MVC   MSGDDN(8,SDWAPTR),NODDNAME                          0782
*   DO;                             /* WTOP MF(E,MESSAGE)            */
@RC00780 DS    0H                                                  0784
*     RFY                                                          0784
*       GPR01P RSTD;                /* RESTRICT REG 1                */
*     GPR01P=ADDR(MESSAGE);         /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,MESSAGE(,SDWAPTR)                            0785
*     SVC(35);                      /* ISSUE WTO SVC                 */
         SVC   35                                                  0786
*     RFY                                                          0787
*       GPR01P UNRSTD;              /* RELEASE REG 1                 */
*   END;                            /* WTOP MF(E,MESSAGE)            */
*                                   /* ISSUE WTP                     */
*RECORD1A:                                                         0789
*   CALL RECORD;                    /* GO PUT RECORD INFO IN SDWA    */
RECORD1A BAL   @14,RECORD                                          0789
*   DO;                             /* SETRP RECORD(YES)           0790
*                                      COMPCOD(ERRSYS) REGS(14,12) 0790
*                                      WKAREA(SDWAPTR) DUMP(NO)      */
*     RESPECIFY                                                    0791
*      (GPR00P,                                                    0791
*       GPR01P,                                                    0791
*       GPR14P,                                                    0791
*       GPR15P)RSTD;                                               0791
*     GPR01P=SDWAPTR;                                              0792
         LR    GPR01P,SDWAPTR                                      0792
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0793
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0794
*     GPR01P->SDWAREQ='0'B;         /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0795
*     GPR14P=ERRSYS;                /* ACCESS COMPLETION CODE        */
         SR    GPR14P,GPR14P                                       0796
         ICM   GPR14P,7,ERRSYS                                     0796
*     GPR01P->SDWACMPC=GPR14P;      /* STORE COMPLETION CODE         */
         STCM  GPR14P,7,SDWACMPC(GPR01P)                           0797
*     GEN(RETURN (14,12));                                         0798
         RETURN (14,12)
*     RESPECIFY                                                    0799
*      (GPR00P,                                                    0799
*       GPR01P,                                                    0799
*       GPR14P,                                                    0799
*       GPR15P)UNRSTD;                                             0799
*   END;                            /* DIAGNOSTIC INFO.TO BE PUT OUT
*                                      ON SYSTEM DATA SET            */
*                                                                  0800
*/********************************************************************/
*                                                                  0801
*   END IGCT005G                    /* END OF 1ST LEVEL ESTAE        */
*                                                                  0801
*/********************************************************************/
*                                                                  0801
*                                                                  0801
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGGBCB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHADECB )                                       */
*/*%INCLUDE SYSLIB  (IHADSAB )                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IEZXRB  )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IGGFRWKA)                                       */
*/*%INCLUDE SYSLIB  (IGGSPD  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IGGUSL  )                                       */
*                                                                  0801
*       ;                                                          0801
@EL00001 L     @13,4(,@13)                                         0801
@EF00001 DS    0H                                                  0801
@ER00001 BR    @14                                                 0801
@DATA    DS    0H
@CH03559 DC    H'-87'
@CH03560 DC    H'-27'
@CH03561 DC    H'-1'
@CH00083 DC    H'1'
@CH00091 DC    H'2'
@CH00107 DC    H'3'
@CH03569 DC    H'22'
@CH02596 DC    H'28'
@CH03567 DC    H'34'
@CH01980 DC    H'64'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
IGCT005G CSECT
         DS    0F
@CF00096 DC    F'4'
@CF03562 DC    F'58880'
@DATD    DSECT
         DS    0D
DEBPTR   DS    A
IOBSTPTR DS    A
IGCT005G CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
DEBKEY   DC    XL1'50'
SCHEDKEY DC    AL1(16)
@CC03338 DC    C'IGCT005G'
@CC03549 DC    C'BACKUP5G'
HEADING  DS    CL27
         ORG   HEADING
@NM00173 DC    AL1(26)
HEADTEXT DC    CL26'IGCT005G,        ,        '
         ORG   HEADING+27
         DS    CL1
PATCH    DS    CL150
         ORG   PATCH
PATCHID  DC    CL8'IGCT005G'
PATCHIT  DC    142CL1'*'
         ORG   PATCH+150
ERRSYS   DC    X'139000'
GTON     DC    CL1'8'
GTOFF    DC    CL1'0'
NODDNAME DC    CL8'********'
         DS    CL3
USERER   DS    CL52
         ORG   USERER
USERER01 DC    H'48'
USERER02 DC    B'1000000000000000'
USERER03 DC    CL44'IEC904I 239,00,00,        ,        ,        '
USERER04 DC    B'0000010000000000'
USERER05 DC    B'0000000000100000'
         ORG   USERER+52
SYSER    DS    CL52
         ORG   SYSER
SYSER01  DC    H'48'
SYSER02  DC    B'1000000000000000'
SYSER03  DC    CL44'IEC905I 139,00,00,        ,        ,        '
SYSER04  DC    B'0000010000000000'
SYSER05  DC    B'0000000000100000'
         ORG   SYSER+52
DUMPRC   DC    CL2'04'
         DC    CL2'08'
         DC    CL2'0C'
CLEANRC1 DC    AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(4)
CLEANRC2 DC    CL2'01'
         DC    CL2'02'
         DC    CL2'03'
         DC    CL2'04'
BLKERR1  DC    AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(5)
         DC    AL1(0)
BLKERR2  DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'0'
BLKERR3  DC    AL1(1)
         DC    AL1(130)
         DC    AL1(131)
         DC    AL1(132)
         DC    AL1(133)
         DC    AL1(0)
IGCT005G CSECT
DUMPLIST SDUMP SDATA=(PSA,NUC,SQA,RGN),MF=L
ELIST    ESTAE BACKUP5G,RECORD=YES,MF=L
TRACLIST GTRACE FID=SPDFID,MF=L
SNAPLIST SNAP  SDATA=TRT,MF=L
@DATD    DSECT
DYNBUF   DSECT
         DS   XL8
ESTENT0  NOP  0                        EST ENTRY AT +8 -FREEDBUF ENTRY
ESTENTAA NOP  0                        EST ENTRY AT +12-MIDDLE ENTRY
ESTENTBB NOP  0                        EST ENTRY AT +16-MIDDLE ENTRY
IGCT005G CSECT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGCT005G CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR03F   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR10P   EQU   @10
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
TRCPTR   EQU   @02
MVBLKPTR EQU   @04
SDWAPTR  EQU   @05
BLKCTR   EQU   @07
RBSECPTR EQU   @08
BASEREG  EQU   @09
WRKREG   EQU   @11
SAVEPTR  EQU   @13
RETURNCD EQU   @15
GPR14F   EQU   @14
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
NOBASE   EQU   0
BCBLK    EQU   0
BCBBUFPT EQU   BCBLK
BCBFLGS  EQU   BCBLK+4
BCBLRIAR EQU   BCBLK+8
LRIAREA  EQU   0
LRILOC   EQU   LRIAREA
LRILGTH  EQU   LRILOC
LRIFLG1  EQU   LRILGTH
LRIFLG2  EQU   LRILOC+4
LRITRKAD EQU   LRIAREA+8
LRINIOB  EQU   LRIAREA+16
LRIALIGN EQU   0
BUFFER   EQU   0
BCBDEFV  EQU   0
BCBBFAVL EQU   BCBDEFV+8
BCBTBRS1 EQU   BCBDEFV+12
BCBDEFR  EQU   0
BCBIOBS  EQU   BCBDEFR
BCBFRQT  EQU   BCBIOBS
BCBNABFR EQU   BCBDEFR+8
BCBTBRS  EQU   BCBDEFR+12
BCBDEFS  EQU   0
CVTMAP   EQU   0
CVT0VL00 EQU   CVTMAP+24
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTRSV90 EQU   CVTXTNT2+5
CVTDEBVR EQU   CVTXTNT2+8
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBBFTKR EQU   DCBBFT
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBDEBA  EQU   DCBDEBAD+1
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS30 EQU   0
DCBCHECK EQU   IHADCS30
DCBOPTCD EQU   DCBCHECK
DCBXARG  EQU   IHADCS30+32
DCBDRDX  EQU   IHADCS30+36
DCBDYNB  EQU   IHADCS30+48
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBDCBB  EQU   DEBDCBAD+1
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBTBLOF EQU   DEBPREFX+14
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DEBXDSAB EQU   DEBXTN+4
DECB     EQU   0
DECBPTR  EQU   DECB+4
DECTYPE  EQU   DECBPTR
DECTYPE1 EQU   DECTYPE
DECTYPE2 EQU   DECTYPE+1
DECAREA  EQU   DECB+12
DECNEXT  EQU   DECB+20
DECBS01  EQU   0
DECBECB  EQU   DECBS01
DECBRB   EQU   DECBECB
DECBECBF EQU   DECBRB
DECBTYP1 EQU   DECBS01+4
DECBTYP2 EQU   DECBS01+5
DECBEXC1 EQU   DECBS01+24
DECBEXC2 EQU   DECBS01+25
DECBS02  EQU   0
@NM00029 EQU   DECBS02
DECCC2   EQU   @NM00029+1
DECCC3   EQU   @NM00029+2
@NM00031 EQU   DECBS02+4
@NM00032 EQU   @NM00031
@NM00033 EQU   @NM00031+1
DECKEYS  EQU   @NM00033
DECTYPRU EQU   @NM00033
DECKYADR EQU   DECBS02+20
DECNA    EQU   DECBS02+28
DECBS03  EQU   0
DECCPOL  EQU   DECBS03+20
@NM00041 EQU   DECBS03+36
DECBS04  EQU   0
@NM00044 EQU   DECBS04+4
@NM00045 EQU   @NM00044
@NM00048 EQU   DECBS04+8
DECBUFCT EQU   @NM00048
DECONLTT EQU   DECBUFCT
DECENTRY EQU   DECBS04+20
DECFLAGS EQU   DECBS04+24
DECWACK  EQU   DECFLAGS
DECREVRS EQU   DECFLAGS
DECERRST EQU   DECBS04+29
DECPOLPT EQU   DECBS04+36
DSAB     EQU   0
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABANMI EQU   0
DSABGIDL EQU   0
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBEXSAVE EQU   XRBESA
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00088 EQU   RBSECT+10
@NM00089 EQU   @NM00088
RBTRSVRB EQU   @NM00089
@NM00091 EQU   @NM00088+1
RBETXR   EQU   @NM00091
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00098 EQU   RBSECT+28
IRBEND   EQU   RBSECT+96
@NM00102 EQU   RBSECT+96
RBRSV138 EQU   @NM00102+7
RBRSV150 EQU   RBSECT+167
SPDBFR   EQU   0
SPDHDR   EQU   SPDBFR
SPDDDNAM EQU   SPDHDR
SPDABCCD EQU   SPDHDR+8
SPDTRACE EQU   SPDBFR+9
SPDTRRCD EQU   0
SPDRCDHD EQU   SPDTRRCD
SPDRCDLN EQU   SPDRCDHD
SPDBLKID EQU   SPDRCDHD+1
SPDDATA1 EQU   SPDTRRCD+2
SPDBLKAD EQU   SPDDATA1
SPDDATA2 EQU   SPDDATA1+4
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWASR00 EQU   SDWASRSV
SDWASR07 EQU   SDWASRSV+28
SDWASR08 EQU   SDWASRSV+32
SDWASR09 EQU   SDWASRSV+36
SDWASR15 EQU   SDWASRSV+60
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWAPGIO EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWASTAF EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBRV    EQU   TCBFLGS6
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
USL      EQU   0
USLSIZE  EQU   USL
USLBFRQT EQU   USL+4
USLIOB1  EQU   USLBFRQT+1
USLBFRQB EQU   USL+8
EST2RET  EQU   0
ASUBRTN  EQU   0
IEA0VL00 EQU   0
IEA0VL01 EQU   0
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
SPDRDATA EQU   0
DCBPTR   EQU   RBGRS1
DECBPT   EQU   RBGRS0
BUFNXPTA EQU   BUFFER
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVT0VL01 EQU   CVTS01+72
CVTCRMN  EQU   CVTS01+156
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
DECBS05  EQU   DECNEXT
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDIOBS EQU   IOBORG09+2
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBDQPTR EQU   IOBORG09+20
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
WKAREA   EQU   RBEXSAVE
WKATRAIL EQU   WKAREA
WKAIOBQ  EQU   WKATRAIL
WKABUFAS EQU   WKATRAIL
WKAEXCP  EQU   WKATRAIL
WKABUFQ  EQU   WKATRAIL
WKALOCK  EQU   WKATRAIL
WKASVKEY EQU   WKAREA+1
WKACLEAN EQU   WKAREA+2
WKADUMP  EQU   WKAREA+3
WKAREG14 EQU   WKAREA+8
WKADEBRC EQU   WKAREG14
WKADEB   EQU   WKAREG14+1
WKAIOBRG EQU   WKAREA+16
WKASAVE  EQU   WKAREA+20
WKASAVE2 EQU   WKAREA+24
WKAESTAE EQU   WKAREA+28
WKATRACE EQU   WKAESTAE
WKARETRN EQU   WKATRACE
WKASVREG EQU   WKATRACE+4
WKATRCLG EQU   WKAESTAE+8
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
SDWAWORK EQU   SDWAVRA
MESSAGE  EQU   SDWAWORK
RETCOD   EQU   MESSAGE+16
GTFLAG   EQU   RETCOD
RCODE    EQU   RETCOD+1
RETCOD2  EQU   MESSAGE+19
MSGJOB   EQU   MESSAGE+22
MSGSTEP  EQU   MESSAGE+31
MSGDDN   EQU   MESSAGE+40
SAVESDWA EQU   SDWAWORK+52
HEAD     EQU   MESSAGE
HEADER   EQU   HEAD
JOBNAME  EQU   HEADER+10
STEPNAME EQU   HEADER+19
SDUMPLST EQU   HEAD+27
RECORDWK EQU   MESSAGE
RECAUDIT EQU   RECORDWK
RECRCDP  EQU   RECORDWK+1
RECRCLN  EQU   RECORDWK+2
RECREG0  EQU   RECORDWK+4
RECREG1  EQU   RECORDWK+8
RECOPSW  EQU   RECORDWK+12
RECPERC  EQU   RECORDWK+20
TRCLIST  EQU   WKATRACE
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00174 EQU   RECORDWK+3
@NM00172 EQU   HEADER+18
@NM00171 EQU   HEADER+9
MODNAME  EQU   HEADER+1
HEADLEN  EQU   HEADER
@NM00170 EQU   MESSAGE+48
@NM00169 EQU   MESSAGE+39
@NM00168 EQU   MESSAGE+30
@NM00167 EQU   MESSAGE+21
@NM00166 EQU   MESSAGE+18
@NM00165 EQU   MESSAGE+15
ABND     EQU   MESSAGE+12
@NM00164 EQU   MESSAGE+11
MSGNO    EQU   MESSAGE+4
@NM00163 EQU   MESSAGE
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
@NM00105 EQU   WKAESTAE+9
WKABUFRG EQU   WKAREA+12
WKASVC14 EQU   WKAREA+4
@NM00104 EQU   WKATRAIL
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00103 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBPRTOV EQU   IOBNFLG1
DECBLFMT EQU   DECBS05+8
DECBLNNM EQU   DECBS05+4
DECBHDRA EQU   DECBS05
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
BUFNXPTB EQU   BUFNXPTA+1
@NM00009 EQU   BUFNXPTA
@NM00162 EQU   USL+20
USLSLOT1 EQU   USL+16
USLCHAIN EQU   USL+12
USLIOB2  EQU   USLBFRQB+1
@NM00161 EQU   USLBFRQB
USLFLAGS EQU   USLBFRQT
@NM00160 EQU   USL+2
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00159 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00158 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
@NM00157 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBRSV48 EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00156 EQU   TCB+296
TCBRV185 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBRSV36 EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00155 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00154 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00153 EQU   SDWA+512
@NM00152 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00151 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00150 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00149 EQU   SDWADDAT+3
@NM00148 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00147 EQU   SDWADDAT+1
@NM00146 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00145 EQU   SDWADUMP+2
@NM00144 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00143 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAMODN EQU   SDWARECP
@NM00142 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00141 EQU   SDWAACF3
@NM00140 EQU   SDWAACF2
@NM00139 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00138 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00137 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00136 EQU   SDWA+239
@NM00135 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00134 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00133 EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00132 EQU   SDWAERRB
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00131 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00130 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00129 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00128 EQU   SDWAINC2
@NM00127 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00126 EQU   SDWAILC2
@NM00125 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00124 EQU   SDWANXT2
@NM00123 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00122 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00121 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00120 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00119 EQU   SDWAINC1
@NM00118 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00117 EQU   SDWAILC1
@NM00116 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00115 EQU   SDWANXT1
@NM00114 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00113 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00112 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00111 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00110 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00109 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00108 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00107 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00106 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SPDPTRSW EQU   SPDBLKID
SIRBEND  EQU   RBSECT+168
SVRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBSCBB   EQU   RBSECT+144
TIRBEND  EQU   @NM00102+8
PRBEND   EQU   @NM00102+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00102+6
RBRSV136 EQU   @NM00102+4
RBRSV135 EQU   @NM00102
@NM00101 EQU   RBSECT+32
@NM00100 EQU   @NM00098+1
@NM00099 EQU   @NM00098
RBPGMQ1  EQU   RBPGMQ+1
@NM00097 EQU   RBPGMQ
@NM00096 EQU   RBSECT+16
@NM00095 EQU   @NM00091
@NM00094 EQU   @NM00091
RBIQETP  EQU   @NM00091
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00091
@NM00093 EQU   @NM00091
@NM00092 EQU   @NM00091
RBRSV007 EQU   @NM00089
RBATNXIT EQU   @NM00089
@NM00090 EQU   @NM00089
RBWAITP  EQU   @NM00089
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00089
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00087 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00086 EQU   RBBASIC+24
XRBPSW   EQU   RBOPSW
@NM00085 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00084 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00083 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00082 EQU   XSTAB1
@NM00081 EQU   RBBASIC+8
@NM00080 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00079 EQU   RBPRFX
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBRSV43 EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBRSV39 EQU   IOBFLAG4
IOBRSV38 EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBSTBYT EQU   IOBIOCSW+3
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBMSG   EQU   IOBFL3
IOBCNC   EQU   IOBFL3
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00054 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00053 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00052 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00051 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00050 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABFCHN EQU   DSAB+4
DSABID   EQU   DSAB
DECWAREA EQU   DECBS04+44
DECWLNG  EQU   DECBS04+42
DECRSV56 EQU   DECBS04+40
DECPOLPA EQU   DECPOLPT+1
DECNDXPL EQU   DECPOLPT
DECADRPT EQU   DECBS04+32
DECCSWST EQU   DECBS04+30
DECRSV55 EQU   DECERRST
DECRSV54 EQU   DECERRST
DECRSV53 EQU   DECERRST
DECDSABL EQU   DECERRST
DECDIAGN EQU   DECERRST
DECERPER EQU   DECERRST
DECUNDEF EQU   DECERRST
DECSIO3  EQU   DECERRST
DECTPCOD EQU   DECBS04+28
DECRESPN EQU   DECBS04+26
DECRLN   EQU   DECBS04+25
DECSTXNQ EQU   DECFLAGS
DECSSMSG EQU   DECREVRS
DECNEGRP EQU   DECFLAGS
DECNOBUF EQU   DECFLAGS
DECBADID EQU   DECFLAGS
DECALTAC EQU   DECFLAGS
DECDIFAC EQU   DECWACK
DECERRMS EQU   DECWACK
DECENTRA EQU   DECENTRY+1
DECCMCOD EQU   DECENTRY
DECCOUNT EQU   DECBS04+18
DECSENS1 EQU   DECBS04+17
DECSENS0 EQU   DECBS04+16
@NM00049 EQU   DECBS04+12
DECDCBAA EQU   @NM00048+1
DECRSV52 EQU   DECONLTT
DECRSV51 EQU   DECONLTT
DECRSV50 EQU   DECONLTT
DECRSV49 EQU   DECONLTT
DECRSV48 EQU   DECONLTT
DECRSV47 EQU   DECONLTT
DECRCVMS EQU   DECONLTT
DECONLTS EQU   DECONLTT
@NM00047 EQU   DECBS04+6
@NM00046 EQU   @NM00044+1
DECSLNTH EQU   @NM00045
DECSAREA EQU   @NM00045
DECSTRME EQU   @NM00045
DECRSV46 EQU   @NM00045
DECRSV45 EQU   @NM00045
DECRSV44 EQU   @NM00045
DECRSV43 EQU   @NM00045
DECRDAPL EQU   @NM00045
@NM00043 EQU   DECBS04
@NM00042 EQU   @NM00041+1
DECRSV42 EQU   @NM00041
DECADRCH EQU   DECBS03+32
DECRSV41 EQU   DECBS03+28
DECRSV40 EQU   DECBS03+26
DECUCBDX EQU   DECBS03+25
DECRSV39 EQU   DECBS03+24
DECCPOLA EQU   DECCPOL+1
DECNMMSG EQU   DECCPOL
DECRSV38 EQU   DECBS03+16
@NM00040 EQU   DECBS03+12
@NM00039 EQU   DECBS03+8
@NM00038 EQU   DECBS03+6
DECOPCOD EQU   DECBS03+5
DECRSV37 EQU   DECBS03+4
LINEDECB EQU   DECBS03
DECNAA   EQU   DECNA+1
DECRSV36 EQU   DECNA
DECRECPT EQU   DECBS02+24
@NM00037 EQU   DECBS02+16
@NM00036 EQU   DECBS02+12
@NM00035 EQU   DECBS02+8
@NM00034 EQU   DECBS02+6
DECRSV35 EQU   @NM00033
DECWRADD EQU   @NM00033
DECSRKEY EQU   @NM00033
DECOPRD  EQU   @NM00033
DECTYPR  EQU   DECTYPRU
DECTYPU  EQU   DECTYPRU
DECBKLNS EQU   @NM00033
DECRELBA EQU   @NM00032
DECRDEX  EQU   @NM00032
DECDYNBF EQU   @NM00032
DECACTAD EQU   @NM00032
DECFDBCK EQU   @NM00032
DECEXSRC EQU   @NM00032
DECOFLOW EQU   @NM00032
DECVERFY EQU   @NM00032
DECRSV34 EQU   @NM00029+3
DECCCKFF EQU   DECCC3
DECCCOPT EQU   DECCC3
DECCCSDK EQU   DECCC3
DECCCWDI EQU   DECCC3
DECCCNBK EQU   DECCC3
DECCCEXS EQU   DECCC3
DECCCWRI EQU   DECCC3
DECRSV33 EQU   DECCC3
DECCCREX EQU   DECCC2
DECCCUER EQU   DECCC2
DECCCEOD EQU   DECCC2
DECCCERR EQU   DECCC2
DECCCINV EQU   DECCC2
DECCCNSP EQU   DECCC2
DECCCRLC EQU   DECCC2
DECCCRNF EQU   DECCC2
@NM00030 EQU   @NM00029
DECEXRKU EQU   DECBEXC2
DECEXASR EQU   DECBEXC2
DECRSV32 EQU   DECBEXC2
DECRSV31 EQU   DECBEXC2
DECRSV30 EQU   DECBEXC2
DECRSV29 EQU   DECBEXC2
DECRSV28 EQU   DECBEXC2
DECRSV27 EQU   DECBEXC2
DECEXDUP EQU   DECBEXC1
DECEXOFL EQU   DECBEXC1
DECEXUBK EQU   DECBEXC1
DECEXERR EQU   DECBEXC1
DECEXINV EQU   DECBEXC1
DECEXNSP EQU   DECBEXC1
DECEXRLC EQU   DECBEXC1
DECEXRNF EQU   DECBEXC1
DECBKEY  EQU   DECBS01+20
DECBLOGR EQU   DECBS01+16
DECBAREA EQU   DECBS01+12
DECBDCBA EQU   DECBS01+8
DECBLGTH EQU   DECBS01+6
DECRSV26 EQU   DECBTYP2
DECRSV25 EQU   DECBTYP2
DECBWRKN EQU   DECBTYP2
DECBWRK  EQU   DECBTYP2
DECRSV24 EQU   DECBTYP2
DECBRDKU EQU   DECBTYP2
DECRSV23 EQU   DECBTYP2
DECBRDK  EQU   DECBTYP2
DECBARS  EQU   DECBTYP1
DECBLNS  EQU   DECBTYP1
DECRSV22 EQU   DECBTYP1
DECRSV21 EQU   DECBTYP1
DECRSV20 EQU   DECBTYP1
DECRSV19 EQU   DECBTYP1
DECRSV18 EQU   DECBTYP1
DECRSV17 EQU   DECBTYP1
DECBRBA  EQU   DECBRB+1
DECRSV16 EQU   DECBECBF
DECRSV15 EQU   DECBECBF
DECRSV14 EQU   DECBECBF
DECRSV13 EQU   DECBECBF
DECRSV12 EQU   DECBECBF
DECRSV11 EQU   DECBECBF
DECBPOST EQU   DECBECBF
DECBWAIT EQU   DECBECBF
DECNEXTA EQU   DECNEXT+1
DECRSV10 EQU   DECNEXT
DECIOBPT EQU   DECB+16
DECDCBAD EQU   DECB+8
DECLNGTH EQU   DECBPTR+2
DECWRSFR EQU   DECTYPE2
DECRSV09 EQU   DECTYPE2
DECWRSZ  EQU   DECTYPE2
DECRSV08 EQU   DECTYPE2
DECWRSD  EQU   DECTYPE2
DECWRSF  EQU   DECTYPE2
DECRDSB  EQU   DECTYPE2
DECRDSF  EQU   DECTYPE2
DECRSV07 EQU   DECTYPE1
DECRSV06 EQU   DECTYPE1
DECRSV05 EQU   DECTYPE1
DECRSV04 EQU   DECTYPE1
DECRSV03 EQU   DECTYPE1
DECRSV02 EQU   DECTYPE1
DECRSV01 EQU   DECTYPE1
DECLNS   EQU   DECTYPE1
DECSDECB EQU   DECB
DEBXRV40 EQU   DEBXTN+28
DEBXRV39 EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXRV42 EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBRSV23 EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBRSV19 EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00028 EQU   DEBACS08+12
@NM00027 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00026 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00025 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSV01 EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
DCBDFBK  EQU   IHADCS30+44
DCBDFOR  EQU   IHADCS30+40
DCBDRDXA EQU   DCBDRDX+1
DCBMVXNO EQU   DCBDRDX
DCBXARGA EQU   DCBXARG+1
DCBXCNT  EQU   DCBXARG
DCBLIMCT EQU   IHADCS30+29
@NM00024 EQU   IHADCS30+28
DCBUQND  EQU   IHADCS30+24
DCBIOBUQ EQU   IHADCS30+20
DCBSQND  EQU   IHADCS30+16
DCBIOBSQ EQU   IHADCS30+12
DCBBLKSI EQU   IHADCS30+10
@NM00023 EQU   IHADCS30+8
DCBSYNAD EQU   IHADCS30+4
DCBCHCKA EQU   DCBCHECK+1
DCBOPTRB EQU   DCBOPTCD
DCBOPTRE EQU   DCBOPTCD
DCBOPTDB EQU   DCBOPTCD
DCBOPTA  EQU   DCBOPTCD
DCBOPTF  EQU   DCBOPTCD
DCBOPTE  EQU   DCBOPTCD
DCBOPTTO EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBREADA EQU   DCBWRITA
@NM00022 EQU   DCBREAD
@NM00021 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00020 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00019 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00018 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00017 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00016 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
DCBDSGMQ EQU   DCBDSRG1
DCBDSGCQ EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00015 EQU   IHADCS01+5
@NM00014 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00013 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00012 EQU   IHADCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00011 EQU   CVTFIX+248
@NM00010 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTRSVA1 EQU   CVTXTNT2+48
CVTRSVA0 EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTRSV90
CVTRSV9G EQU   CVTRSV90
CVTRSV9F EQU   CVTRSV90
CVTRSV9E EQU   CVTRSV90
CVTRSV9D EQU   CVTRSV90
CVTRSV9C EQU   CVTRSV90
CVTRSV9B EQU   CVTRSV90
CVTRSV9A EQU   CVTRSV90
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTRV484 EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTRV319 EQU   CVTUSR
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
BCBBFLG  EQU   BCBDEFS+6
BCBBFNUM EQU   BCBDEFS+4
BCBNXBUF EQU   BCBDEFS
BCBFRQB  EQU   BCBIOBS+4
BCBRAOFS EQU   BCBDEFV+9
BCBBUFL  EQU   BCBDEFV+4
BCBBUF1  EQU   BCBDEFV
LRIDATA  EQU   LRIALIGN
@NM00008 EQU   LRIAREA+22
LRICOUNT EQU   LRIAREA+20
LRINXIOB EQU   LRINIOB+1
@NM00007 EQU   LRINIOB
LRIRECAD EQU   LRITRKAD+5
LRIMBBCC EQU   LRITRKAD
LRIPOS   EQU   LRILOC+6
LRIINDEX EQU   LRILOC+5
LRIASSEM EQU   LRIFLG2
@NM00006 EQU   LRIFLG2
LRINTSPN EQU   LRIFLG2
@NM00005 EQU   LRIFLG2
LRISEG   EQU   LRIFLG2
@NM00004 EQU   LRIFLG2
LRIRELSE EQU   LRIFLG2
@NM00003 EQU   LRIFLG2
LRILNGTH EQU   LRILGTH+1
LRIEOB   EQU   LRIFLG1
LRICOD   EQU   LRIFLG1
LRIEOD   EQU   LRIFLG1
BCBPAD   EQU   BCBLK+12
BCBLRIAD EQU   BCBLRIAR+1
@NM00002 EQU   BCBLRIAR
BCBBUFSZ EQU   BCBLK+6
BCBBUFNO EQU   BCBLK+5
BCBEXTND EQU   BCBFLGS
BCBLRI   EQU   BCBFLGS
BCBBUFAD EQU   BCBBUFPT+1
@NM00001 EQU   BCBBUFPT
@NM00078 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00077 EQU   PSA+1032
PSAUSEND EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00076 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00075 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00074 EQU   FLCFSA
@NM00073 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00072 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00071 EQU   FLCIOA
@NM00070 EQU   FLCMCLA+15
@NM00069 EQU   FLCMCLA+14
@NM00068 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00067 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00066 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00065 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00064 EQU   FLCPER
@NM00063 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00062 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00061 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00060 EQU   FLCPIILC
@NM00059 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00058 EQU   FLCSVILC
@NM00057 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00056 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00055 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00175 EQU   CLEANRTN
@RT00177 EQU   DUMPRTN
@RT00179 EQU   CLEANRTN
@RT00204 EQU   ABEND
@RT00273 EQU   CLEAN
@RT00292 EQU   CLEAN
@RF00667 EQU   ESTENT
@RT00675 EQU   ESTENT
@RF00646 EQU   ESTENTA
@PB00005 EQU   @EC00739
@RT00749 EQU   DUMPRTN1
@RT00751 EQU   DUMPRTN1
@RT00753 EQU   DUMPRTN1
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IGCT005G,(C'PL/S-II',0502,74053)
