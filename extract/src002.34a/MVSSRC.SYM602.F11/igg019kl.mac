 TITLE 'IGG019KL -- DYNAMIC BUFFERING MODULE && START-I/O APPENDAGE'
IGG019KL CSECT
*MODULE NAME - IGG019KL                                               *
*                                                                     *
*DESCRIPTIVE NAME - DYN BUF MODULE & SIO APPENDAGE -VS RECORD FORMAT  *
*                   AND REAL ADDRESS SPACE                            *
*                                                                     *
*COPYRIGHT - NONE                                                     *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*
*        OS 21 CHANGES/DELETIONS
*3574                                                            M1780
*        VS 1-1 CHANGES/DELETIONS
*D468000                                                        XA00093
*        VS 2-1 CHANGES/DELETIONS
*        VS 1-2 CHANGES/DELETIONS
*        VS 2-2 CHANGES/DELETIONS
*212000,220000-222000,230500-231500,294000,302000,348000,618667-621000,
*642400-645000,645200-646799,647499-649000,684400-687500,697000-701800,
*830000-850000,860500-866500                                     Y02072
*                                                                     *
*STATUS CHANGE LEVEL 004                                              *
*                                                                     *
***********************************************************************
*THIS MODULE WAS TOTALLY REPLACED IN R-21 AS A RESULT OF A30797.  IT
*INCORPORATES IGG019KS WHICH NO LONGER EXISTS AS OF R-21.  TWO SEPARATE
*FUNCTIONS EXIST IN THE MODULE: SIO APPENDAGE FUNCTION AND FREEDBUF
*FUNCTION.  TWO SEPARATE FUNCTIONAL DESCRIPTIONS EXIST, ONE UNDER
*SIORTNE AND THE OTHER UNDER FBUFRTNE.  ALL EQUATES ARE IN 1ST ROUTINE.
***********************************************************************
*
         USING *,RAPDBASE
SIOEP    B     SIORTNE            START I/O APPENDAGE E.P.
         ORG   IGG019KL+8
FRBUFEP  B     FBUFRTNE           FREE DYNAMIC BUFFER SVC E.P.
*
*
***********************************************************************
*  THE FOLLOWING TWO ENTRY POINTS ARE USED FOR PROCESSING OF THE      *
*  FREEDBUF ESTAE ROUTINE, IGCT005G.  THE FIRST ENTRY POINT (+12) IS  *
*  USED WHEN, IN THE ESTAE CLEANUP ROUTINE, IT IS DETERMINED THAT THE *
*  AUDIT TRAIL BIT INDICATING THAT THE NEXT IOB HAD BEEN TAKEN FROM   *
*  THE IOB QUEUE BUT THE CHANNEL PGM HAD NOT BEEN INITIALIZED YET     *
*  (WKAIOBQ BIT IS ON). IN THIS CASE ENTRY IS MADE TO INITIALIZE      *
*  THE CHANNEL PROGRAM AND ISSUE THE EXCP FOR THIS REQUEST.           *
*         THE SECOND ENTRY POINT (+16) IS USED WHEN THE NEXT IOB HAS  *
*  BEEN REMOVED FROM THE QUEUE, ITS CHANNEL PGM INITIALIZED, BUT THE  *
*  ABEND OCCURRED BEFORE THE EXCP WAS ISSUED (WKABUFAS BIT ON).IN THIS*
*  CASE ENTRY IS MADE TO ISSUE THE EXCP FOR THIS REQUEST.             *
*          INPUT FOR BOTH ENTRIES IS THE SAME:                        *
*                   REGISTER 2 = NEXT IOB ADDRESS                     *
*                   REGISTER 3 = BEGINNING ADDRESS OF THIS MODULE     *
*                   REGISTER 4 = DCB ADDRESS                          *
*                   REGISTER 5 = SVRB ADDRESS                         *
*                   REGISTER 6 = BUFFER ADDRESS                       *
*                   REGISTER 8 = TCB ADDRESS                          *
*                   REGISTER 15= BEGINNING ADDRESS OF THIS MODULE     *
*                   WKAREG14 IN SVRB WORKAREA IN INITIALIZED TO       *
*                                RETURN ADDRESS IN ESTAE              *
*  A THIRD ENTRY INTO THIS MODULE IS TAKEN BY ESTAE, IGCT005G, IF NO  *
*  AUDIT TRAIL BITS ARE SET AT ALL.  IN THIS CASE ENTRY IS THE SAME   *
*  AS FOR FREEDBUF (+8).  INPUT IS LIKEWISE THE SAME.                 *
***********************************************************************
ESTENT1  B     ESTENTA                  INIT CH PGM, ISSUE EXCP  Y02072
*
ESTENT2  B     ESTENTB                  ISSUE EXCP               Y02072
***********************************************************************
*                                                                     *
* FUNCTION:                                                           *
*    THE START-I/O APPENDAGE ATTEMPTS TO ASSIGN A BUFFER TO A         *
*    READ REQUEST IF THE REQUEST SPECIFIES DYNAMIC BUFFERING AND      *
*    NO BUFFER WAS ASSIGNED BEFORE EXCP.  IF A BUFFER IS              *
*    AVAILABLE FOR ASSIGNMENT, IT IS REMOVED FROM THE BUFFER          *
*    POOL AND THE BUFFER CHAIN IS UPDATED.  THE BUFFER ADDRESS        *
*    IS PLACED IN THE REQUEST'S DECB AND IN THE READ CCWS OF THE      *
*    REQUEST'S CHANNEL PROGRAM.  THE ADDRESS OF THE SEGMENT WORK      *
*    AREA (PART OF THE BUFFER) IS PLACED IN THE IOB.  THE ROUTINE     *
*    THEN RETURNS TO IOS TO INITIATE THE I/O.                         *
*    IF NO BUFFER IS AVAILABLE THE REQUEST IS PLACED ON A QUEUE       *
*    OF REQUESTS WAITING FOR BUFFERS.  THE ROUTINE TAKES THE IOS      *
*    RETURN WHICH INDICATES THAT THE I/O REQUEST SHOULD NOT BE        *
*    INITIATED.                                                       *
*                                                                     *
* ENTRY POINT:                                                        *
*         SIOEP -- ENTERED ASYNCHRONOUSLY FROM IOS AT START-I/O       *
*         TIME.  THE ADDRESS OF IGG019KL IS PLACED IN THE             *
*         APPENDAGE VECTOR TABLE (AVT) DURING OPEN PROCESSING.        *
*         CALLING SEQUENCE -- L     15,4(AVTPTR)                      *
*                             BALR  14,15                             *
*                                                                     *
* INPUT                                                               *
*    **** REGISTER CONTENTS ****                                      *
*    REGISTER  1 -- REQUEST QUEUE ELEMENT (RQE) ADDRESS               *
*    REGISTER  2 -- INPUT/OUTPUT BLOCK (IOB) ADDRESS                  *
*    REGISTER  3 -- DATA EXTENT BLOCK (DEB) ADDRESS                   *
*    REGISTER  4 -- DATA CONTROL BLOCK (DCB) ADDRESS                  *
*    REGISTER  7 -- UNIT CONTROL BLOCK (UCB) ADDRESS                  *
*    REGISTER 13 -- IOS REGISTER SAVEAREA                             *
*    REGISTER 14 -- RETURN ADDRESS                                    *
*    REGISTER 15 -- ADDRESS OF IGG019KL                               *
*                                                                     *
* OUTPUT                                                              *
*    **** REGISTER CONTENTS ****                                      *
*    ALL REGISTER CONTENTS ARE RESTORED BEFORE RETURN TO IOS.         *
*                                                                     *
*    **** DATA AREAS SET BY THIS ROUTINE ****                         *
*    IOBSWAP            IF A BUFFER IS ASSIGNED, SEGMENT WORK         *
*                       AREA ADDRESS                                  *
*    IOBDSTAT BIT IOBBUFF    SET IF A BUFFER IS ASSIGNED              *
*    IOBDQPTR FIELD OF IOB POINTED TO BY BCBFRQB,  OR                 *
*    BCBFRQT            UPDATED TO POINT TO THIS IOB IF REQUEST       *
*                       MUST WAIT FOR A BUFFER                        *
*    BCBFRQB            UPDATED TO POINT TO THIS IOB IF REQUEST       *
*                       MUST WAIT FOR A BUFFER                        *
*    BCBNABFR           UPDATED IF A BUFFER IS ASSIGNED.              *
*    DECAREA            DATA ADDR IN THE ASSIGNED BUFFER              *
*    DECKYADR           KEY ADDR IN THE ASSIGNED BUFFER FOR A READ    *
*                       BY BLOCK ID, & KEY ADDR SPECIFIED 'S'.        *
*    NEXT-TO-LAST CCW ADDR   KEY ADDR WHEN KEY IS IN DYNAMIC BUFFER   *
*                            (SEE DECKYADR).                          *
*    LAST CCW ADDR      DATA ADDR                                     *
*                                                                     *
* EXITS                                                               *
*         0(R14)        RETURN TO IOS & START I/O                     *
*         4(R14)        RETURN TO IOS & DISREGARD I/O REQUEST         *
*                                                                     *
* ATTRIBUTES -- REENTRANT,PRIVILEGED,KEY=0,ENABLED,WITH THE LOCAL     *
*    LOCK HELD. MODESET IS ISSUED TO DO ALL PROCESSING IN USER KEY.   *
*                                                                     *
* NOTES --                                                            *
*                                                                     *
         IEZBITS
*                  REGISTER EQUATES
R0       EQU   0        INPUT REGISTER 0    SVC
RWORK0   EQU   0        WORK REGISTER (FBUFRTNE)                 Y02072
R1       EQU   1        INPUT REGISTER 1
RRQE     EQU   1        RQE ADDRESS PASSED BY IOS                Y02072
RLINK    EQU   1        INTERNAL LINKAGE REGISTER                Y02072
RIOB     EQU   2        ADDRESS OF IOB
RBASE3   EQU   3        BASE REGISTER       SVC
RDCB     EQU   4        ADDRESS OF DCB
RSVRB    EQU   5        IOS BASE(SIO) OR SVRBPTR(SVC 57          Y02072
RBUFFR   EQU   6        BUFFER ADDRESS
RSWA     EQU   6        PTR TO SEGMENT WORK AREA (ASSGNBUF)
RWORK6   EQU   6        WORK REGISTER
RDECB    EQU   7        DECB ADDRESS (FBUFRTNE)
RCCW     EQU   7        PTR TO CCW TO MODIFY (ASSGNBUF)
RBUFCB   EQU   7        BASE REG FOR BUFFER CNTRL BLK(FBUFRTNE)  Y02072
RWORK8   EQU   8        WORK REGISTER  (SIORTNE)                 Y02072
RTCB     EQU   8        BASE REG FOR TCB (FBUFRTNE)              Y02072
RWORK9   EQU   9        WORK REGISTER
RWORK10  EQU   10       WORK REGISTER
RWORK11  EQU   11       WORK REGISTER
RWORK12  EQU   12       WORK REGISTER
RSAVE    EQU   13       IOS SAVEAREA REGISTER                    Y02072
RRETURN  EQU   14       RETURN ADDRESS
R15      EQU   15                       SAVE/RESTORE REG         Y02072
RAPDBASE EQU   15       BASE REGISTER FOR APPENDAGE ROUTINES
         SPACE 5
KEYDATOP EQU   X'0E'         CCW OP-CODE  READ KEY & DATE
RDDATAOP EQU   X'06'         CCW OP-CODE  READ DATA
*
*                    TEST TO DETERMINE IF REQUEST IS VALID
*
SIORTNE  EQU   *
         USING IOBSTDRD,RIOB
         USING IHADCB,RDCB
         TM    IOBDTYP2,IOBRQUST  IS THIS A READ REQUEST?
         BCR   8,RRETURN          IF NOT, RETURN TO IOS
         TM    IOBDTYPE,IOBDYNBF  DOES REQUEST SPECIFY DYNAMIC
*                                 BUFFERING?
         BCR   8,RRETURN          IF NO, RETURN TO IOS
         TM    IOBSTAT1,IOBBUFF   HAS A BUFFER BEEN ASSIGNED TO
*                                 THIS REQUEST?
         BCR   1,RRETURN          IF SO, RETURN TO IOS
*
*                       IF A BUFFER IS AVAILABLE, ASSIGN IT TO
*                       THIS REQUEST AND UPDATE THE BUFFER POOL.
*
         USING RQE,RRQE                 ESTABLISH RQE BASE       Y02072
         STM   R0,R15,0(RSAVE)          SV REGS IN IOS SAVEAREA  Y02072
*
         MODESET  KEYADDR=RQEPRT,WORKREG=10  CHANGE TO USER KEY  Y02072
*
         L     RWORK10,DCBBUFCB   GET BUFFER CONTROL BLOCK ADDR
         USING BCBDEFR,RWORK10    ESTABLISH BASE FOR BCB         Y02072
         L     RWORK11,BCBNABFR   GET ADDRESS OF NEXT AVAILABLE
*                                 BUFFER
         LTR   RWORK11,RWORK11    IS ONE AVAILABLE?
         BZ    PTONBUFQ           IF NOT BRANCH TO QUEUE REQUEST
         USING SWA,RWORK11        ESTABLISH BASE FOR SEG WKAREA  Y02072
         L     RWORK8,SWANXTPT    GET ADDR OF 2ND BUFFER (OR 0). Y02072
         DROP  RWORK11
         ST    RWORK8,BCBNABFR    MAKE IT NEXT AVAILABLE         Y02072
         DROP  RRQE               DROP RQE BASE REG              Y02072
         BAL   RLINK,ASSGNBUF     ASSIGN BUFFER TO REQUEST
*
SIORET   EQU   *                        RETURN TO IOS            Y02072
*
         MODESET  KEYADDR=IOSKEY,WORKREG=1   CHANGE TO IOS KEY   Y02072
*
         LM    R0,R15,0(RSAVE)    LOAD IOS REGISTERS             Y02072
         BR    RRETURN            RETURN TO IOS TO INITIATE
*                                 I/O REQUEST
         SPACE 5
PTONBUFQ EQU   *
*
*                       NO BUFFER WAS AVAILABLE. PUT THIS IOB ON
*                       THE QUEUE WAITING FOR BUFFERS.
*
         L     RWORK8,BCBFRQT     ADDR OF 1ST IOB ON QUEUE.      Y02072
         LTR   RWORK8,RWORK8      IS THE QUEUE EMPTY?            Y02072
         BNZ   ONEONQ             BRANCH IF NOT
         ST    RIOB,BCBFRQT       IF SO, STORE IOB ADDR AS FIRST
         B     BOTTOMST
ONEONQ   L     RWORK8,BCBFRQB     GET ADDR OF LAST IOB ON QUEUE  Y02072
         ST    RIOB,IOBDQPTR-IOBSTDRD(RWORK8)   POINT CHAIN TO   Y02072
*                                                THIS IOB
BOTTOMST ST    RIOB,BCBFRQB       THIS IOB IS LAST ON QUEUE
         DROP  RWORK10            DROP BCB BASE                  Y02072
*
         MODESET  KEYADDR=IOSKEY,WORKREG=10  CHANGE TO IOS KEY   Y02072
*
         LM    R0,R15,0(RSAVE)    LOAD IOS REGISTERS             Y02072
         B     4(RRETURN)         IOS RETURN - DON'T DO I/O
         DROP  RIOB
         DROP  RDCB
*
         EJECT
*
*                  THIS SUBROUTINE IS USED BY THE START-I/O
*                  APPENDAGE AND THE FREE DYNAMIC BUFFER SVC
*                  ROUTINE. IT ASSUMES ENTRY IN USER KEY.
*                  IT ASSIGNS A BUFFER TO AN I/O REQUEST BY
*                  PLACING THE BUFFER ADDRESS INTO THE DECB
*                  AND THE CHANNEL PROGRAM.  IT ALSO PLACES THE
*                  SEGMENT WORK AREA ADDRESS IN THE IOB.
*
*              REGISTER INPUT:  RIOB    - ADDR OF IOB TO WHICH
*                                         BUFFER WILL BE ASSIGNED
*                               RDCB    - DCB ADDRESS
*                               RWORK11 - BUFFER ADDRESS
*                               RLINK   - RETURN ADDRESS
*              REGISTER OUTPUT: RSWA    - WORK REGISTER
*                               RCCW    - WORK REGISTER
*                               RWORK9  - WORK REGISTER
*                               RWORK10 - WORK REGISTER
*                               RWORK11 - WORK REGISTER
         USING SWA,RWORK11        ESTABLISH BASE FOR SWA         Y02072
         USING IHADCB,RDCB
         USING IOBSTDRD,RIOB
ASSGNBUF L     RWORK9,IOBECBPT    GET DECB ADDRESS
         USING DECB,RWORK9
         LR    RWORK10,RIOB       PLACE IOB ADDRESS IN WORK REG
         LA    RSWA,IOBSTDRD-IOBSWAP   DISP TO IOBSWAP FIELD
         SR    RWORK10,RSWA       POINT TO IOB PREFIX
         USING IOBSWAP,RWORK10
         ST    RWORK11,IOBSWAP    PLACE SWA ADDR IN IOB
*                                 DATA & KEY (IF REQUESTED) WILL
*                                 BE READ INTO THE SEGMENT AREA
*                                 OF THE DYNAMIC BUFFER.  THE
*                                 USER WILL BE PASSED THE ADDRESS
*                                 OF LOCATIONS IN THE RECORD
*                                 AREA.
*
         LA    RSWA,SWASEGMT      GET ADDRESS OF SEGMENT AREA    Y02072
         L     RWORK11,SWARAPT    GET ADDRESS OF RECORD AREA     Y02072
         L     RCCW,IOBDCPND      POINT BEYOND LAST CCW
         SH    RCCW,H16           POINT TO NEXT-TO-LAST CCW
*                                 FOR A READ BY BLOCK ID, KEY
*                                 CODED 'S', THE KEY IS READ
*                                 INTO THE DYNAMIC BUFFER.
         TM    IOBDTYP2,IOBTYPE   IS THIS READ BY BLOCK ID?
         BO    FILLSCCW           BRANCH IF NO
         CLI   DCBKEYLE,0         IS THERE A KEY                 Y02072
         BE    FILLSCCW           BRANCH IF NO                   Y02072
         TM    IOBDTYP2,IOBSKEY   WAS KEY ADDRESS CODED 'S'?
         BZ    FILLSCCW           BRANCH IF NO
         ST    RWORK11,DECKYADR   PLACE KEY ADDRESS IN DECB
         ST    RWORK11,0(RCCW)    PLACE ADDR OF KEY IN RECORD   XA00093
*                                 AREA INTO NEXT-TO-LAST CCW.
         MVI   0(RCCW),KEYDATOP   RESTORE OP-CODE
*                                 INCREMENT RECORD AREA & SEGMENT
*                                 AREA POINTERS BEYOND KEY.
         SR    RWORK10,RWORK10
         IC    RWORK10,DCBKEYLE   GET LENGTH OF KEY
         AR    RWORK11,RWORK10    BUMP RECORD AREA POINTER
*
FILLSCCW ST    RWORK11,DECAREA    PLACE DATA ADDRESS IN DECB
         ST    RSWA,8(RCCW)       PLACE DATA ADDRESS IN LAST CCW
         MVI   8(RCCW),RDDATAOP   RESTORE OP-CODE.
         OI    IOBDSTAT,IOBBUFF   SET BUFFER-ASSIGNED SWITCH
         BR    RLINK              RETURN TO CALLER
         DROP  RWORK11
         DROP  RWORK9
         DROP  RIOB
         DROP  RDCB
         EJECT
FBUFRTNE EQU   *
*                                                                     *
* FUNCTION:                                                           *
*    THE FREE DYNAMIC BUFFER ROUTINE RELEASES A DYNAMIC BUFFER.       *
*    IF ANY IOBS ARE ON THE UNSCHEDULED QUEUE (WAITING FOR A          *
*    BUFFER) THE ROUTINE ASSIGNS THE BUFFER TO THE FIRST IOB ON       *
*    THE QUEUE, AND ISSUES AN EXCP FOR THAT IOB.  IF NO IOBS ARE      *
*    ON THE UNSCHEDULED QUEUE THE ROUTINE PLACES THE BUFFER ON        *
*    THE CHAIN OF AVAILABLE BUFFERS.                                  *
*                                                                     *
* ENTRY POINT:                                                        *
*         FRBUFEP -- ENTERED FROM MODULE IGC0005G WHEN SVC 57 IS      *
*         ISSUED FOR A DCB WHICH SPECIFIED DIRECT ORGANIZATION.       *
*         CALLING SEQUENCE -- L    15,DCBDEBAD                        *
*                             L    15,DEBAPPAD                        *
*                             L    15,4(15)                           *
*                             BAL  14,8(15)                           *
*                                                                     *
* INPUT                                                               *
*    **** REGISTER CONTENTS ****                                      *
*    REGISTER  0 -- DECB ADDRESS                                      *
*    REGISTER  1 -- DCB ADDRESS                                       *
*    REGISTER  5 -- ADDRESS OF SVRB                                   *
*    REGISTER  8 -- ADDRESS OF TCB PASSED BY FREEDBUF          Y02072 *
*    REGISTER 14 -- RETURN ADDRESS                                    *
*    REGISTER 15 -- ADDRESS OF IGG019KL                               *
*                                                                     *
* OUTPUT                                                              *
*    **** REGISTER CONTENTS ****                                      *
*    ALL REGISTERS EXCEPT REGISTER 14 CAN BE USED WITHOUT SAVING      *
*    OR RESTORING CONTENTS.                                           *
*                                                                     *
*    **** DATA FIELDS SET BY THIS ROUTINE ****                        *
*    BCBFRQT       IF AN IOB IS WAITING FOR A BUFFER, PTR TO 1ST      *
*                  IOB ON QUEUE IS UPDATED.                           *
*    IOBDQPTR      FIELD IN DEQUEUED IOB IS CLEARED                   *
*    IF THE FREED BUFFER IS ASSIGNED TO A WAITING REQUEST, THE        *
*    BUFFER ADDRESS IS PLACED IN THE CHANNEL PROGRAM AND DECB         *
*    FIELDS, AND IN THE IOB AS THE SEGMENT WORK AREA ADDRESS (SEE     *
*    SIORTNE DESCRIPTION FOR DETAILS).                                *
*    BCBNABFR      IF THE BUFFER IS NOT ASSIGNED TO A REQUEST,        *
*                  ITS ADDRESS IS PLACED IN BCBNABFR                  *
*    SWANXTPT      FIELD OF THE RELEASED BUFFER IS SET TO THE         *
*                  ADDR OF THE 2ND AVAILABLE BUFFER.                  *
*    SWABFINC      SET TO ZERO                                        *
*    SVRB          SEE BELOW                                          *
*                                                                     *
* EXTERNAL REFERENCES                                                 *
*        EXCP CALL TO IOS                                             *
*        MODESET TO CHANGE BETWEEN SUPERVISOR AND USER KEYS
*        SETLOCK TO RELEASE AND OBTAIN THE LOCAL LOCK
*
* EXITS, NORMAL                                                       *
*    BRANCH RETURN TO IGC0005G ON REGISTER 14.                        *
*                                                                     *
* TABLES / WORK AREAS                                                 *
*        IOB, DCB, DECB, BUFFER CONTROL BLOCK, SVRB                   *
*                                                                     *
* ATTRIBUTES -- REENTRANT, READONLY, PRIVILEGED. ENTRY IS SUPERVISOR  *
*    KEY WITHOUT THE LOCAL LOCK HELD. RETURN TO IGC0005G IS IN        *
*    SUPERVISOR KEY. MOST PROCESSING IS IN USER KEY.                  *
*                                                                     *
* NOTES -- THE ROUTINE MUST HAVE THE LOCAL LOCK TO UPDATE THE SERIALLY*
* REUSUABLE IOB AND BUFFER QUEUES. SETLOCK WILL BE ISSUED AT THIS TIME*
*                                                                     *
*****                                                             *****
         EJECT
         LR    RBASE3,RAPDBASE    ESTABLISH BASE REGISTER
         USING IGG019KL,RBASE3
         DROP  RAPDBASE
         LR    RDCB,R1            TRANSFER DCB ADDRESS
         USING IHADCB,RDCB
         LR    RDECB,R0           TRANSFER DECB ADDRESS
         USING DECB,RDECB
         USING RBSECT,RSVRB             ESTABLISH BASE FOR SVRB  Y02072
*
         ST    RRETURN,WKAREG14         SAVE RETURN ADDR IN SVRB Y02072
         USING TCB,RTCB                 ESTABLISH BASE FOR TCB   Y02072
*                                       PASSED BY FREEDBUF IN R8 Y02072
*
         MODESET  KEYADDR=WKASVKEY,WORKREG=6 CHANGE TO USER KEY  Y02072X
                                        TO ACCESS USER CNTRL BLK Y02072
*
*                       LOCATE THE BEGINNING ADDRESS OF THE
*                       BUFFER BEING FREED.
*
         L     RBUFFR,DECAREA     ASSUME RECORD AREA ADDR = DATA
*                                 ADDR
         TM    DECTYPE2,DECKEYS   WAS KEY IN BUFFER (CODED 'S')?
         BZ    FBU0500            BRANCH NO
         L     RBUFFR,DECKYADR    RECORD AREA ADDR = KEY ADDR
         DROP  RDECB                                             Y02072
FBU0500  EQU   *
         LA    RWORK12,BUFRECAR-BUFBFPTR
         SR    RBUFFR,RWORK12     POINT TO ADDR OF BEGINNING OF
*                                       BUFFER
         L     RBUFFR,0(RBUFFR)         GET BUFFER ADDRESS
         USING SWA,RBUFFR               ESTABLISH BASE FOR SWACB Y02072
         XC    SWABFINC,SWABFINC        CLEAR RECORD AREA OFFSET Y02072
         L     RBUFCB,DCBBUFCB          BUFFER CONTROL BLCK ADDR Y02072
         USING BCBDEFR,RBUFCB           ESTABLISH BASE FOR BCB   Y02072
*
*   PREPARE FOR QUEUE UPDATES. THIS REQUIRES THAT THE LOCAL LOCK BE
*   OBTAINED WHILE MANIPULATING THE QUEUE. IT IS RELEASED WHEN THE
*   QUEUE HAS BEEN UPDATED AND THE NEXT WAITING IOB HAS BEEN REMOVED,
*   OR THE BUFFER HAS BEEN PUT BACK ON THE AVAILABLE BUFFER QUEUE.
*   MODESET IS ISSUED BECAUSE SETLOCK REQUIRES SUPERVISOR KEY.
*   SETLOCK USES REGISTERS 11-14 WITHOUT RESTORING THEM. CERTAIN
*   FIELDS WILL BE SAVED AT THIS POINT SHOULD THE ESTAE NEED THEM.
*
         L     RIOB,BCBFRQT             LOAD IOB IN USER KEY     Y02072
         L     RWORK0,BCBNABFR          LOAD BUF FLD IN USER KEY Y02072
*
         MODESET  EXTKEY=ZERO           CHANGE TO SUPER KEY      Y02072
*                                       TO GET THE LOCAL LOCK    Y02072
*
GETLOCK  SETLOCK  OBTAIN,TYPE=LOCAL,RELATED=('BUFFERQ,IGG019KL(FREELOCKX
               ,FREELCK1)'),MODE=UNCOND  GET THE LOCAL LOCK      Y02072
*
         ST    RBUFFR,WKABUFRG          SAVE BUF PTR FOR ESTAE   Y02072
         ST    RIOB,WKASAVE             SAVE BCB CONTENTS FOR    Y02072
*                                       ESTAE COMPARE TO DETECT  Y02072
*                                       IF CONTENTS CHANGE       Y02072
         ST    RWORK0,WKASAVE2          SAVE BCB CONTENTS        Y02072
*                                       FOR ESTAE IN CASE THE    Y02072
*                                       PATH TAKEN CHANGES THIS  Y02072
         ST    RIOB,WKAIOBRG            SAVE IOB REG FOR ESTAE   Y02072
*
         MODESET  KEYADDR=WKASVKEY,WORKREG=11 GO TO USER KEY     Y02072
*
         LTR   RIOB,RIOB                ARE THERE ANY IOBS?
         BZ    MAKEAVAL                 IF NOT, GO MAKE THIS BUFFER
*                                       AVAILABLE
*
*                  UPDATE QUEUE BY REMOVING FIRST IOB
*
         USING IOBSTDRD,RIOB
CHAIN    L     RWORK9,IOBDQPTR          GET ADDRESS OF NEXT IOB AND
         ST    RWORK9,BCBFRQT           MAKE IT THE NEXT IOB ON QUEUE
         XC    IOBDQPTR,IOBDQPTR        CLEAR QUEUING FIELD
*
         MODESET  EXTKEY=ZERO           CHANGE TO SUPER KEY      Y02072X
                                        TO SET BIT IN SVRB       Y02072X
                                        AND RELEASE LOCAL LOCK   Y02072
         MVI   WKATRAIL,WKAIOBQ         SET BIT IN SVRB EXT SAVE Y02072
*                                       INDICATING IOB DEQUEUED  Y02072
*
FREELOCK SETLOCK  RELEASE,TYPE=LOCAL,RELATED=('BUFFERQ,IGG019KL(GETLOCKX
               )')                      FREE THE LOCAL LOCK      Y02072
*
ESTENTA  EQU   *                        ESTAE ENTRY IF WKAIOBQ=1 Y02072
*
         MODESET  KEYADDR=WKASVKEY,WORKREG=11  GO TO USER KEY    Y02072
*
         LR    RWORK11,RBUFFR     PUT BUFFER ADDR IN R11
         LR    RAPDBASE,RBASE3    RESTORE BASE REG FOR SUBRTN    XM6073
         BAL   RLINK,ASSGNBUF     ASSIGN THE BUFFER TO THE
*                                       DEQUEUED IOB
*
         MODESET  EXTKEY=ZERO           CHANGE TO SUPER KEY      Y02072
*                                       TO SET BIT IN SVRB       Y02072
         MVI   WKATRAIL,WKABUFAS        SET BIT IN SVRB EXTENDED Y02072
*                                       SAVEAREA INDICATING BUF  Y02072
*                                       ASSIGNED TO NEXT IOB     Y02072
ESTENTB  EQU   *                        ESTAE ENTRY IF WKABUFAS  Y02072
*                                       BIT ON                   Y02072
         MODESET  KEYADDR=WKASVKEY,WORKREG=11   GO TO USER KEY   Y02072
*
         L     RWORK11,IOBECBPT         LOAD ADDR TO USER'S DECB Y02072
         ST    RWORK11,IOBDQPTR         SAVE DECB ADDR IN IOB    Y02072
         LA    RWORK11,IOBCSW+3         SET UP CSW ADDRESS TO    Y02072
         ST    RWORK11,IOBECBPT         USE AS DUMMY ECB FOR IOS Y02072
*                                       CEA OR EOE WILL RESTORE  Y02072
*                                       USER'S DECB ADDR IN IOB  Y02072
*
         EXCP  (RIOB)                   SCHEDULE I/O FOR NEXT IOB ON Q
*
         MODESET  EXTKEY=ZERO           RETURN TO SUPER KEY      Y02072
*
         MVI   WKATRAIL,WKAEXCP         SET BIT INDICATING EXCP  Y02072
*
         B     NORMEXIT                 RETURN TO IGC0005G       Y02072
         SPACE 5
*
*   NO IOBS ARE WAITING FOR BUFFERS. RETURN BUFFER TO THE AVAILABLE
*   QUEUE.THIS ROUTINE IS ENTERED IN USER KEY WITH THE LOCAL LOCK HELD.
*   IT RETURNS TO IGC0005G IN SUPERVISOR KEY.
*
MAKEAVAL EQU   *
         L     RWORK9,BCBNABFR          GET ADDR OF AVAILABLE BUFFER
         USING SWA,RBUFFR               ESTABLISH BASE FOR SWACB Y02072
         ST    RWORK9,SWANXTPT          POINT THIS SWA TO IT     Y02072
         ST    RBUFFR,BCBNABFR          MAKE THIS ONE NEXT AVAILABLE
         DROP  RBUFFR                   (LIFO QUEUE)
*
         MODESET  EXTKEY=ZERO           CHANGE TO SUPER KEY      Y02072
*                                       TO SET BIT IN SVRB       Y02072
         MVI   WKATRAIL,WKABUFQ         SET BIT INDICATING BUF   Y02072
*                                       FREED AND PUT ON QUEUE   Y02072
*
FREELCK1 SETLOCK  RELEASE,TYPE=LOCAL,RELATED=('BUFFERQ,IGG019KL(GETLOCKX
               )')                      FREE THE LOCAL LOCK      Y02072
************
*
NORMEXIT EQU   *                        RETURN TO FREEDBUF       Y02072
         L     RRETURN,WKAREG14         RESTORE R14 TO RET ADDR  Y02072
         BR    RRETURN                  RETURN TO IGC0005G.
*****                                                             *****
*                        CONSTANTS                                    *
*****                                                             *****
H16      DC    H'16'
IOSKEY   DC    X'00'                    IOS KEY                  Y02072
ZERO     DC    X'00'                    SVRB KEY                 Y02072
PATCH    DC    XL50'0'                  PATCH AREA               Y02072
         EJECT
***********************************************************************
*                              DSECTS                                 *
***********************************************************************
         IHAPSA                                                  Y02072
         EJECT
         IECDRQE                                                 Y02072
         EJECT
         IKJTCB                                                  Y02072
         EJECT
         IEZIOB
         EJECT
         DCBD  DSORG=DA
         EJECT
         IHADECB
         EJECT
         IGGBCB  TYPE=DAM
BUFFERB  DSECT          FORMAT OF BUFFER BEYOND SEGMENT AREA
BUFBFPTR DS    A        ADDRESS OF BEGINNING OF BUFFER
BUFRECAR EQU   *        RECORD AREA; BUFBFPTR IS ALIGNED SO THAT
*                       BUFRECAR FALLS AS SPECIFIED BY DCBBFALN.
*
         SPACE 5
         IGGSWA                                                  Y02072
         EJECT
         IKJRB                                                   Y02072
         IGGFRWKA                                                Y02072
         END
