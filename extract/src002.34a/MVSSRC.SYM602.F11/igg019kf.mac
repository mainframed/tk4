   TITLE 'IGG019KF - BDAM RELATIVE BLOCK CONVERT WITH TRACK OVERFLOW'
IGG019KF CSECT
*MODULE NAME - IGG019KF                                               *
*                                                                     *
*DESCRIPTIVE NAME - BDAM RELATIVE BLOCK CONVERSION, TRK OVERFLOW      *
*                                                                     *
*COPYRIGHT - NONE                                                     *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*                                                                     *
*          OS REL 20 CHANGES/DELETIONS
*2970000600-000620,000660-000700                                  20201
*          OS REL 21 CHANGES/DELETIONS
*3565                                                            A49315
*3565037000                                                      A43932
*          VS 1-1 CHANGES/DELETIONS
*          VS 2-1 CHANGES/DELETIONS
*          VS 1-2 CHANGES/DELETIONS
*          VS 2-2 CHANGES/DELETIONS
*                                                                Y02072
*                                                                YM3029
*
*STATUS CHANGE LEVEL 005
*
*FUNCTION/OPERATION- THIS MODULE IS ENTERED TO CONVERT THE USER'S     *
*   RELATIVE BLOCK ADDRESS TO AN ACTUAL TRACK ADDRESS OF THE FORM     *
*   MBBCCHHR. THIS IS ACCOMPLISHED BY OBTAINING THE RELATIVE BLOCK    *
*   NUMBER FROM THE BLKREF FIELD ASSOCIATED WITH THIS REQUEST AND     *
*   CONVERTING TO A TTR(RELATIVE TRACK AND ID) VALUE. THIS CONVERSION *
*   IS ACCOMPLISHED BY USING RELATIVE EXTENTS, RECORDS/PERIOD, AND    *
*   TRACKS/PERIOD,ALL OF WHICH ARE PUT IN THE DEB AT OPEN TIME. THE   *
*   ROUTINE ALSO SIMULATES THE WRITING OF AN OVERFLOW DATA SET TO     *
*   GET THE EXACT POSITION OF THE BLOCK IN THE DATA SET.              *
*   THE TTR VALUE IS THEN PASSED TO THE RESIDENT ROUTINE WHICH        *
*   CONVERTS TTR TO AN ACTUAL ADDRESS.                                *
*                                                                     *
*ENTRY POINT- 'IGG019KF' IS THE ENTRY POINT TO THIS ROUTINE FROM THE  *
*   BDAM FOUNDATION MODULE(IGG019KA) AND FROM THE READ EXCLUSIVE SVC. *
*   THE CALLING SEQUENCE IS AS FOLLOWS:                               *
*            L    15,4(FOUNDATION BASE)                               *
*            BALR 14,15 - IF 19KA                                     *
*         OR SYNCH (15) - IF SVC 53                                   *
*   'BEGIN' IS THE ENTRY POINT FROM THE OVERFLOW FEEDBACK MODULE.     *
*   CALLING SEQUENCE IS                                               *
*            L    15,4(FOUNDATION BASE)                               *
*            B    4(0,15)                                             *
*                                                                     *
*INPUT- THE REGISTERS HAVE BEEN LOADED AS FOLLOWS,                    *
*   3 - ADDRESS OF THE DEB                                            *
*   4 - ADDRESS OF THE DCB                                            *
*   5 - ADDRESS OF THE DECB                                           *
*   7 - ADDRESS OF THE IOB FOR THIS REQUEST                           *
*   11- BASE ADDRESS OF THE FOUNDATION MODULE                         *
*   THE RELATIVE BLOCK NUMBER IS OBTAINED BY LOADING THE ADDRESS OF   *
*   BLKREF FROM THE DECB (DECRECPT) AND MOVING THE CONTENTS OF BLKREF *
*   TO THE IOB FOR ALIGNMENT                                          *
*                                                                     *
*OUTPUT- THE ACTUAL ADDRESS WILL BE DEVELOPED AND STORED INTO THE IOB *
*   AT THE LOCATION 'IOBSEEK'. THE REGISTERS DESCRIBED AS INPUT WILL  *
*   BE UNCHANGED WHEN THIS MODULE RETURNS TO THE FOUNDATION MODULE    *
*                                                                     *
*EXTERNAL ROUTINE- 'IECPCNVT IS USED TO CONVERT TTR TO AN ACTUAL      *
*   ADDRESS AND STORE IT IN THE IOB.                                  *
*                                                                     *
*EXIT-NORMAL- 'EXITFDN' IS THE EXIT TO RETURN TO THE FOUNDATION       *
*   MODULE AFTER CONVERSION HAS BEEN SUCCESSFULLY COMPLETED.          *
*   'RLBLFDBK' IS THE RETURN TO THE FEEDBACK ROUTINE.                 *
*                                                                     *
*    -ERROR- 'EXITERR' IS THE EXIT TO THE INVALID REQUEST ERROR       *
*   ROUTINE IN THE FOUNDATION MODULE. AN ERROR CODE IS PASSED IN      *
*   REGISTER 12 AND WILL BE PLACED IN THE ECB WHEN THE ERROR ROUTINE  *
*   ISSUES A POST. THE CAUSE OF THE INVALID REQUEST IS A RELATIVE     *
*   BLOCK NUMBER GREATER THAN THE TOTAL BLOCKS IN THE DATA SET.       *
*                                                                     *
*TABLES/WORK AREAS- THE COMMUNICATION VECTOR TABLE IS REFERENCED      *
*   TO LOCATE THE RESIDENT TTR TO ACTUAL CONVERSION ROUTINE.          *
*   THE DIRECT ACCESS DEVICE TABLE (DADT) IS REFERENCED TO GET THE    *
*   ATTRIBUTES OF THE DEVICE ON WHICH THE DATA SET RESIDES            *
*                                                                     *
*ATTRIBUTES- THIS MODULE IS REENTRANT  AND EXECUTED ENABLED           *
*   IT EXECUTES IN PROBLEM PROGRAM STATE, USER KEY.                   *
*                                                                     *
*NOTES- THE REGISTER USAGE IN THIS MODULE MUST REMAIN CONSISTENT      *
*   WITH THE MODULES IGG019KA AND IECPCNVT.                           *
*                                                                     *
*                                                                     *
         EJECT
*
         USING IGG019KF,BASE
         USING IOBSTDRD,IOBREG                                   Y02072
         USING DEBDEF,DEBREG
         USING IHADCB,DCBREG
         USING DECBDEF,DECBREG
*
*              REGISTER USAGE
*
WKREG0   EQU   0                       WORKING REGISTER
SREG1    EQU   1                        PARAMETER REGISTER FOR BPAM
REXREG2  EQU   1
RRREG    EQU   2                       LENGTH OF A REGULAR RECORD
SREG2    EQU   2                        PARAMETER REGISTER FOR BPAM
DEBREG   EQU   3                       DEB ADDRESS
CTOVREG  EQU   3                       CT+ITS OVERHEAD
DCBREG   EQU   4                       DCB ADDRESS
WORKREG  EQU   4                       TEMPORARY DEB BASE & UCB  A49315
*                                       PTR                      A49315
DECBREG  EQU   5                       DECB ADDRESS
WKREG3   EQU   6                       WORKING REGISTER
IOBREG   EQU   7                        IOB ADDRESS
WKREG1   EQU   8                       WORKING REGISTER
SREG8    EQU   8
WKREG2   EQU   9                       WORKING REGISTER
WKREG4   EQU   10                      WORKING REGISTER
CTKYREG  EQU   10                      COUNT + KEY LENGTH
NRCDREG  EQU   11                      NUMBER OF RECORDS/PERIOD
FDNBASE  EQU   11                      BASE FOR FOUNDATION MODULE
INTREG   EQU   12                      INTERNAL RETURN FOR THIS MODULE
SREG12   EQU   12                      ERROR CONDITION REGISTER
TABREG   EQU   12                      POINTER TO TABLE ENTRY FOR TYPE
TRLREG   EQU   12                      LENGTH OF TRACK FOR OUR TYPE DEV
NTRKREG  EQU   13                      NUMBER OF TRACKS/PERIOD
LRREG    EQU   14                      LENGTH OF LAST RECORD
RETREG   EQU   14                      RETURN TO FOUNDATION MODULE
SREG14   EQU   14                       PARAMETER REGISTER FOR BPAM
BASE     EQU   15                      BASE REGISTER FOR THIS MODULE
SREG15   EQU   15                       PARAMETER REGISTER FOR BPAM
*
*
         EJECT
         B     RRSTART                 BRANCH TO START OF THIS MODULE
         B     BEGIN                   BRANCH TO OVERFLOW ROUTINE
RRSTART  L     WKREG3,DECRECPT          LOAD ADDR. OF RELATIVE RECORD
*                                        VALUE
         MVC   IOBCSW(3),0(WKREG3)      MOVE VALUE TO IOB        Y02072
         L     WKREG3,IOBCSW-1          LOAD VALUE INTO REGISTER Y02072
         LA    SREG2,IOBSEEK            SET POINTER TO IOBSEEK FIELD
DEBPT    LR    WKREG1,DEBREG            LOAD ADDR. OF DEB
         LA    WKREG1,EXT1(0,WKREG1)    SET POINTER TO FIRST EXTENT
         LR    WKREG2,WKREG1            SET UP TO DETERMINE ADDRESS OF
         SR    WKREG4,WKREG4             FIRST RELATIVE RECORD EXTENT
         IC    WKREG4,DEBNMEXT          LOAD NUMBER OF EXTENTS
RREXT    LA    WKREG2,EXTSN(0,WKREG2)   ADD EXTENT SIZE TO RELATIVE
*                                        RECORD EXTENT POINTER
         BCT   WKREG4,RREXT             WAS THIS THE LAST EXTENT
*                                       NO-INCREMENT POINTER
*                                       YES-WKREG2 NOW POINTS TO FIRST
*                                        RELATIVE RECORD EXTENT
         LR    WKREG4,WKREG2            SAVE POINTER TO PERIOD FIELD
         LA    WKREG2,8(0,WKREG2)       UPDATE POINTER TO EXTENTS
         SR    SREG1,SREG1
         IC    SREG1,DEBNMEXT          LOAD NUMBER OF EXTENTS
         SR    WKREG0,WKREG0            CLEAR REGISTER
RELTRK   EQU   *
         MVC   IOBCSW(3),1(WKREG2)      MOVE NO. OF RECORDS IN THIS
*                                        EXTENT TO ALIGN VALUE
         S     WKREG3,IOBCSW-1          SUBTRACT VALUE FROM GIVEN
*                                        RELATIVE RECORD ADDRESS
         BC    4,OVER                   ADDRESS IN THIS EXTENT
         AH    WKREG0,TRK(0,WKREG1)     NO-ADD NO. OF TRACKS IN THIS
*                                        EXTENT TO RESULT REG.
         LA    WKREG1,EXTSN(0,WKREG1)   INCREMENT NORMAL EXTENT POINTER
         LA    WKREG2,EXTSR(0,WKREG2)   INCREMENT REL. REC. EXTENT PTR.
         BCT   SREG1,RELTRK            WAS THIS LAST EXTENT
*                                       NO CONTINUE  CALCULATION
         SR    SREG12,SREG12            YES-ERROR,REL. REC. NOT IN DATA
         IC    SREG12,ERRCODE            SET
         TM    IOBSTAT1,IOBSYNCH        MODULE ENTERED BY SYNCH? Y02072
*                                       (ENTRY FROM EXCL CNTROL) Y02072
         BOR   RETREG                   YES, RETURN ON R14       Y02072
         L     RETREG,20(0,FDNBASE)    LOAD ADDRESS OF ERROR RETURN
EXITERR  BR    RETREG                   AND GO TO ERROR ROUTINE
*
OVER     EQU   *
         A     WKREG3,IOBCSW-1          ADD NO. OF RECORDS IN THIS
*                                        EXTENT BACK TO REL. REC. VALUE
SUBPRD   EQU   *
         S     WKREG3,4(0,WKREG4)      SUBTRACT RECORDS/PERIOD
         BM    OVER1                   IF MINUS LEAVE THE LOOP
         A     WKREG0,0(0,WKREG4)      ADD ON TRACKS/PERIOD
         B     SUBPRD                  LOOP BACK
OVER1    EQU   *
         A     WKREG3,4(0,WKREG4)      ADD RECORDS PER PERIOD BACK ON
         B     BEGIN                   GO TO OVERFLOW ROUTINE
SETUPREG EQU   *
         LA    WKREG2,1(0,WKREG2)       ADD ONE TO REMAINDER
         SLL   WKREG0,8                 SHIFT TT REG ONE BYTE TO LEFT
         OR    WKREG0,WKREG2            PLACE REC. ID IN TT REG
CONVERT  SLL   WKREG0,8                 SHIFT TTR REG ONE BYTE TO LEFT
*                                        REG IS NOW IN FORMAT REQUIRED
*                                        BY BPAM
*              SAVE REGISTERS
         STM   SREG8,SREG15,IOBDNCRF    SAVE REGISTERS 8-15
         LR    SREG1,DEBREG             SET POINTER TO DEB
         L     SREG15,CVTPTR(0,0)       LOAD ADDR. OF COMM.VECTOR TABLE
         L     SREG15,CVTPCNVT-CVTDEF(0,SREG15)  LOAD ADDRESS OF
*                                            CONVERSION ROUTINE
         BALR  SREG14,SREG15            GO TO CONVERT ROUTINE
*              RESTORE REGISTERS
RETURN   EQU   *
         LM    SREG8,SREG15,IOBDNCRF    RESTORE REGISTERS 8-15
         TM    IOBSTAT1,IOBSYNCH        MODULE ENTERED BY SYNCH? Y02072
*                                       ENTRY FROM EXCL CNTROL   Y02072
         BZ    TSTEXSCH                 BRANCH IF NOT            Y02072
         SR    SREG12,SREG12            ZERO RETURN CODE         Y02072
         BR    RETREG                   RETURN                   Y02072
TSTEXSCH TM    IOBDTYPE,IOBEXTSC        IS EXTENDED SEARCH OPTION USED
         BCR   8,RETREG                 NO-RETURN TO FOUNDATION MODULE
RREXTS1  TM    IOBSTAT1,IOBPASS2        FIRST PASS FOR THIS IOB
         BC    1,CLEANUP                NO
         L     WKREG3,DECRECPT          YES-MOVE STARTING RELATIVE
         MVC   IOBCSW(3),0(WKREG3)       RECORD VALUE TO IOB
         LA    SREG2,IOBUPLIM           SET POINTER FOR CONVERT ROUTINE
         OI    IOBSTAT1,IOBPASS2        SET FIRST PASS INDICATOR
         L     WKREG3,0(0,WKREG4)      LOAD TRACKS/PERIOD
         L     WKREG2,4(0,WKREG4)      LOAD RECORDS/PERIOD
         SR    WKREG1,WKREG1
         DR    WKREG1,WKREG3           DIVIDE RECORDS/PER BY TRACKS/PER
         LA    WKREG4,1(0,WKREG2)       ADD ONE TO QUOTIENT IF 0 A43932
         L     WKREG3,DCBLIMCT-1       GET LIMCT
         LA    WKREG3,0(0,WKREG3)      CLEAR HI ORDER BYTE
         AR    WKREG3,WKREG4           ADD RECORDS/TRACK(APPROXIMATE)
*                                      TO LIMCT
         L     WKREG4,DCBKEYLE         GET DATA SET SIZE
         LA    WKREG4,0(0,WKREG4)      CLEAR HI ORDER BYTE
         CR    WKREG3,WKREG4           COMPARE LIMCT+ RECORDS/TRACK TO
         BL    ADDSTART                DATA SET SIZE. IF LOW BRANCH
         MVC   IOBUPLIM,IOBSEEK         YES-SET ENDING ADDRESS EQUAL TO
*                                        START ADDRESS
CLEANUP  NI    IOBSTAT1,X'FF'-IOBPASS2  CLEAR FIRST PASS INDICATOR
         MVI   IOBUPLIM+7,X'00'         SET R IN UPLIM TO ZERO
         CLC   IOBUPLIM(1),IOBSEEK      IS EXTENDED SEARCH LIMIT IN
*                                        SAME EXTENT AS START ADDRESS
         BC    6,DUMMYID                NO
         CLC   IOBSEEK+3(4),IOBUPLIM+3  DOES SEARCH WRAP AROUND
         BCR   4,RETREG                 NO-RETURN TO FOUNDATION MODULE
DUMMYID  MVI   IOBUPLIM+7,X'FE'         SET RECORD ID IN UPLIM TO 255
EXITFDN  EQU   *
         BCR   15,RETREG                RETURN TO FOUNDATION MODULE
*
*
ADDSTART EQU   *
         A     WKREG3,IOBCSW-1          ADD STARTING RELATIVE RECORD TO
*                                        EXTENDED SEARCH VALUE
         MVC   IOBCSW(3),DCBREL         ALIGN SIZE OF DATA SET
         CL    WKREG3,IOBCSW-1          COMPARE RESULT WITH SIZE OF
*                                        DATA SET
         BL    DEBPT                    BRANCH IF SEARCH DOES NOT WRAP
*                                        AROUND TO START OF DATA SET
         S     WKREG3,IOBCSW-1          ADJUST ENDING ADDRESS SO THAT
*                                        IT FALLS WITHIN DATA SET
         B     DEBPT                    GO TO CONVERT ENDING ADDRESS
*
*
*
BEGIN    EQU   *
         STM   SREG2,DEBREG,IOBCSW-1   SAVE REGISTERS NECESSARY
         STM   WKREG2,SREG14,IOBDNCRF   FOR THIS ROUTINE
NEWEXT   EQU   *
         L     WKREG2,CVTPTR(0,0)      GET A POINTER TO THE DIRECT
         L     WKREG2,CVTZDTAB-CVTDEF(0,WKREG2) ACCESS DEVICE TABLE
         L     TABREG,DEBUCBAD         LOCATE DEVICE TYPE TO MATCH UCB
         SR    LRREG,LRREG             CLEAR OUT REGISTER
         IC    LRREG,UCBTYPCD(0,TABREG) IN THE TABLE BY USING TYPE CODE
         LA    TABREG,15               SET THE MASK
         NR    LRREG,TABREG             CLEAR ALL BUT LOW ORDER 4 BITS
         IC    LRREG,0(LRREG,WKREG2)    IN FRONT OF THE TABLE
         LA    TABREG,0(LRREG,WKREG2)  TABREG POINTS TO TABLE ENTRY
*
         SR    RRREG,RRREG             CLEAR OUT WORK REGISTERS
         SR    WKREG1,WKREG1
         IC    RRREG,DCBKEYLE          IF THERE ARE NO KEYS, THE
         LTR   RRREG,RRREG              OVERHEAD FACTOR WILL BE REDUCED
         BC    7,*+8                    BY OVERHEAD FOR KEYS
         IC    WKREG1,OVERK(0,TABREG)
         IC    LRREG,OVERL(0,TABREG)
         TM    BYTEDEV(TABREG),TBOVHD   2 BYTE OVERHD USED       20201
         BNO   MZ0010                   NO, USE ONE BYTE OVHD    20201
         LH    LRREG,OVERI(TABREG)      GET 2 BYTE OVERHEAD      20201
MZ0010   EQU   *                                                 20201
         SR    LRREG,WKREG1            LRREG HAS OVERHEAD FACTOR
         LR    CTKYREG,LRREG           GET COUNT + KEY INTO
         AR    CTKYREG,RRREG             REGISTER CTKYREG
         AH    RRREG,DCBBLKSI          KL+DL IN RRREG
         AR    LRREG,RRREG             LRREG HAS LAST RECORD LENGTH
         MH    RRREG,TOLER(0,TABREG)   CALCULATE 1.049(KL+DL)+OVERHEAD
         SRL   RRREG,9
         SR    WKREG2,WKREG2           DEVELOP OVERHEAD FOR
         IC    WKREG2,OVERI(0,TABREG)   INTERMEDIATE RECORDS
         TM    BYTEDEV(TABREG),TBOVHD   2 BYTE OVERHD USED       20201
         BNO   MZ0020                   NO, USE ONE BYTE OVHD    20201
         LH    WKREG2,OVERI(TABREG)     GET 2 BYTE OVERHEAD      20201
MZ0020   EQU   *                                                 20201
         SR    WKREG2,WKREG1            (REDUCE IF NO KEYS PRESENT)
         AR    RRREG,WKREG2            RRREG HAS SIZE OF REGULAR REC'D
         SR    CTOVREG,CTOVREG
         IC    CTOVREG,OVERI(0,TABREG) GET OVERHEAD FOR REGULAR RECORDS
         TM    BYTEDEV(TABREG),TBOVHD   2 BYTE OVERHD USED       20201
         BNO   MZ0030                   NO, USE ONE BYTE OVHD    20201
         LH    CTOVREG,OVERI(TABREG)    GET 2 BYTE OVERHEAD      20201
MZ0030   EQU   *                                                 20201
         IC    WKREG1,OVERK(0,TABREG)  AND SUBTRCT OVERHEAD FOR KEYS TO
         SR    CTOVREG,WKREG1          GET COUNT AND ITS OVERHEAD.
         LH    WKREG1,TOLER(0,TABREG)
         STH   WKREG1,IOBUPLIM         SAVE THE OVERHEAD FACTOR
         LH    TRLREG,TRKL(0,TABREG)   GET TRACK LENGTH
         SR    NTRKREG,NTRKREG         CLEAR OUT FOR TRACKS/PERIOD
         SR    NRCDREG,NRCDREG         CLEAR OUT FOR RECORDS/PERIOD
         CR    LRREG,TRLREG           COMPARE RECORD LENGTH TO THIS
         BH    BIGRECRD                IF HIGH IT'S MORE THAN ONE TRACK
         LR    WKREG2,TRLREG           GET TRACK LENGTH
LOOP     SR    WKREG1,WKREG1           CLEAR OUT REGISTER FOR DIVISION
         DR    WKREG1,RRREG            DIVIDE LENGTH OF TRACK BY
*                                      REGULAR RECORD LENGTH WKREG2=
*                                      QUOTIENT,WKREG1= REMAINDER
         LA    NTRKREG,1(0,NTRKREG)    ADD ONE TO TRACK COUNT
         AR    NRCDREG,WKREG2          ADD QUOTIENT TO NO. OF RECORDS
         TM    IOBDTYP2,IOBRBFDB       FROM THE RELATIVE BLOCK FEEDBACK
         BZ    CONVERTP                ROUTINE. NO CONTINUE
         CR    WKREG0,NTRKREG          COMPARE TRACKS REMAINING T.
         BE    RLBLFDBK                TRACK COUNT.
         B     COMMONCD                BRANCH AROUND CONVERT PORTION
CONVERTP EQU   *
         CR    WKREG3,NRCDREG          COMPARE BLOCK COUNT AGAINST
         BC    12,RLBLCNVT             RECORD COUNT.IF LOW OR EQUAL BR.
COMMONCD EQU   *
         LR    WKREG2,WKREG1
         SR    WKREG2,CTKYREG          SUBTRACT COUNT + KEY LENGTH
         LA    NRCDREG,1(0,NRCDREG)    ADD ONE TO RECORD COUNT
         LH    WKREG1,DCBBLKSI         GET THE SIZE OF A RECORD AND
         SR    WKREG1,WKREG2           SUBTRACT THE AMOUNT OF BYTES
         MH    WKREG1,IOBUPLIM         ALREADY WRITTEN ON LAST TRACK
         SRL   WKREG1,9                THEN MULTIPLY BY TOLERANCE
         LR    WKREG2,TRLREG           GET TRACK LENGTH AND SUBTRACT
         SR    WKREG2,CTOVREG          CT AND ITS OVERHEAD FROM IT AND
         SR    WKREG2,WKREG1           THEN SUBTRACT DATA+ALL OVERHEAD
         B     LOOP                    GO BACK FOR NEXT TRACK
BIGRECRD EQU   *
         LA    NTRKREG,1(0,NTRKREG)    ADD ONE TO TRACK COUNT
         LR    WKREG1,LRREG            GET RECORD LENGTH AND
         SR    WKREG1,TRLREG           SUBTRACT LENGTH OF TRACK FROM IT
LOOP2    EQU   *
         SR    WKREG2,WKREG2
LOOP3    EQU   *
         TM    IOBDTYP2,IOBRBFDB       FROM THE RELATIVE BLOCK FEEDBACK
         BZ    CONVERTL                 ROUTINE. NO CONTINUE
         CR    WKREG0,NTRKREG          COMPARE TRACKS REMAINING T.
         BE    RLBLFDBK                TRACK COUNT.
         B     LARGCOMM                BRANCH AROUND CONVERT PORTION
CONVERTL EQU   *
         CR    WKREG3,NRCDREG          COMPARE BLOCK COUNT AGAINST
         BC    12,RLBLCNVT             RECORD COUNT.IF LOW OR EQUAL BR.
LARGCOMM EQU   *
         LA    NTRKREG,1(0,NTRKREG)    ADD ONE TO TRACK COUNT
         SR    WKREG1,TRLREG           SUBTRACT LENGTH OF TRACK
         DROP  DCBREG                                            A49315
         L     WORKREG,IOBCSW+3        LOAD DEB PTR SAVED IN IOB A49315
         USING DEBDEF,WORKREG          ESTABLISH R4 AS DEB BASE  A49315
         L     WORKREG,DEBUCBAD        LOAD UCB ADDR FROM DEB    A49315
         DROP  WORKREG                                           A49315
         TM    UCBTYP+1(WORKREG),RPSDEV   IS THIS AN RPS DEVICE  A49315
         L     DCBREG,IOBDCBPT         RELOAD DCB BASE BEFORE BR A49315
         USING IHADCB,DCBREG           REESTABLISH REG AS DCB    A49315
*                                       BASE                     A49315
         BNO   NOTRPS                  IF NOT, BR AROUND         A49315
*                                       OVERHEAD LOGI            A49315
RPS      EQU   *                                                 A49315
         AR    WKREG1,CTOVREG          ADD ON OVERHEAD FOR RPS   A49315
         LTR   WKREG1,WKREG1           IS RECORD STILL LARGER    A49315
*                                       THAN TRK                 A49315
         BP    LOOP3                   YES, GO GET NEXT TRACK    A49315
         SR    WKREG1,CTOVREG          ELSE, SUBTRACT OVERHEAD   A49315
         B      LASTTRK                BRANCH AROUND NEXT INST   A49315
NOTRPS   EQU   *                                                 A49315
         LTR   WKREG1,WKREG1           TEST TO SEE IF THE RESULT IS
         BP    LOOP3                   POSITIVE YES LOOP BACK
LASTTRK  EQU   *
         LA    NRCDREG,1(0,NRCDREG)    ADD ONE TO RECORD COUNT
         AR    WKREG1,TRLREG           ADD TRACK LENGTH BACK ON
         LR    WKREG2,TRLREG           GET TRACK LENGTH AND
         SR    WKREG2,CTOVREG          SUBTRACT COUNT FROM IT AND THEN
         MH    WKREG1,IOBUPLIM         MULTIPLY REMAINING DATA BYTES
         SRL   WKREG1,9                BY THE OVERHEAD FACTOR AND
         SR    WKREG2,WKREG1           SUBTRACT IT FROM THE RESULT AND
         LR    WKREG1,LRREG            GET LENGTH OF RECORD AND
         SR    WKREG1,WKREG2           SUBTRACT AMOUNT OF BYTES LEFT ON
         B     LOOP2                   THIS TRACK AND GO BACK TO START
RLBLCNVT EQU   *
         SR    NRCDREG,WKREG2          REDUCE RCD CT BY AMT JUST ADDED
         SR    WKREG3,NRCDREG          REDUCE BLKREF BY RCD CT IN PRD
         LA    WKREG2,1(0,WKREG3)      INCREMENT BLOCK ID BY ONE
         BCT   NTRKREG,RLBLCONT        SUBTRACT ONE FROM TRACK COUNT
         BCTR  WKREG2,0                IF RESULT IS ZERO LOWER BLOCK 1
RLBLCONT EQU   *
         AR    WKREG0,NTRKREG          INCREMENT TRACK COUNT BY NO. OF
         LM    WKREG4,SREG14,IOBDNCRF+4  RESTORE REGISTERS USED
         LM    SREG2,DEBREG,IOBCSW-1
         B     SETUPREG                GO TO SET UP WKREG0
RLBLFDBK EQU   *
* ADD ONE TO RECORD COUNT FOR LAST RECORD(I.E. THE OVERFLOW RECORD)
* BUT THEN SUBTRACT ONE BECAUSE     THE R IN THE TTR WAS REALLY ONE
* TOO HIGH. IF WE ARE WORKING ON RECORDS/EXTENT THEN DON'T ADD
* ONE FOR OVERFLOW SINCE THIS IS LAST TRACK IN THIS EXTENT
         A     NRCDREG,IOBDNCRF+8      ADD RECORDS THIS EXTENT TO TOTAL
         LM    WKREG2,WKREG4,IOBDNCRF   RESTORE REGISTERS USED
         LM    SREG12,SREG14,IOBDNCRF+12
         L     SREG2,IOBCSW-1          RESTORE SREG2
         L     BASE,DCBDFBK            GET FEEDBACK ADDR AND BRANCH
         B     4(0,BASE)               TO RETURN POINT IN IT
EXT1     EQU   32             OFFSET OF FIRST EXTENT FROM START OF DEB
EXTSN    EQU   16             SIZE OF NORMAL EXTENT FOR DIRECT ACCESS
TRK      EQU   14             NO. OF TRACKS OFFSET FROM START OF EXTENT
EXTSR    EQU   4              SIZE OF RELATIVE RECORD EXTENT
ERRCODE  DC    FL1'16'
*              EXCEPTION CODES
NOREC    EQU   X'80'
LGNCK    EQU   X'40'
NOSPA    EQU   X'20'
INVAL    EQU   X'10'
UNCOR    EQU   X'08'
ENDOD    EQU   X'04'
UNREL    EQU   X'02'
*              OPTIONS AND TYPE
UCBTYP   EQU   X'10'                   OFFSET INTO UCB FOR       A49315
*                                       DEVTYP                   A49315
RPSDEV   EQU   X'10'                   THIS BIT ON AT X'11' IN   A49315
*                                       THE                      A49315
*                                      UCB INDICATES RPS DEVICE
BYTEDEV  EQU   9                        DEV TYPE OFFSET          20201
TBOVHD   EQU   X'08'                    DEV TYPE MASK            20201
TRKL     EQU   4
OVERI    EQU   6
OVERL    EQU   7
OVERK    EQU   8
TOLER    EQU   10
UCBTYPCD EQU   19
KEY      EQU   X'04'
ADD      EQU   X'02'
MODID    DC    C'IGG019KF'              MODULE ID                Y02072
PATCH    DC    XL50'0'                  PATCH AREA               Y02072
         EJECT
***********************************************************************
*                           DSECTS
***********************************************************************
CVTDEF   DSECT
         CVT
         EJECT
*      DATA CONTROL BLOCK (DCB) DEFINITION
*
         DCBD  DSORG=DA
         EJECT
*      DATA EVENT CONTROL BLOCK (DECB) DEFINITION
         DS    0F
DECBDEF  DSECT
DECSDECB DS    CL4            STANDARD EVENT CONTROL BLOCK (ECB)
DECTYPE  DS    CL2            TYPE FIELD
DECLNGTH DS    CL2            DATA LENGTH
DECDCBAD DS    CL4            ADDRESS OF DCB
DECAREA  DS    CL4            ADDRESS OF DATA AREA
DECIOBPT DS    CL4            ADDRESS OF THE IOB
DECKYADR DS    CL4            ADDRESS OF KEY
DECRECPT DS    CL4            ADDRESS OF RECORD REFERENCE
         EJECT
*
*      I/O BLOCK (IOB) DEFINITION
*
         IEZIOB                                                  Y02072
         ORG   IOBRSV35
IOBUPLIM DS    D
         ORG   IOBDTYP2
IOBRBFDB EQU   X'20'          INDICATES ENTRY FROM IGG019KH
         EJECT
*
*      DATA EXTENT BLOCK (DEB) DEFINITION
*
         DS    0F
DEBDEF   DSECT
*
         DS    0F
DEBNMSUB DS    0CL1                    COUNT OF ROUTINES LOADED
DEBTCBAD DS    CL4                     TASK CONTROL BLOCK ADDRESS
DEBAMLNG DS    0CL1                    WORD CNT OF BDAM ADDED CORE
DEBDEBAD DS    CL4                     DEB CHAIN ADDRESS
DEBOFLGS DS    0CL1                    OPEN FLAGS
DEBIRBAD DS    CL4                     IRB ADDRESS
DEBOPATB DS    0CL1                    DATA SET ATTRIBUTES
DEBSYSPG DS    CL4
DEBNMEXT DS    0CL1                    COUNT OF EXTENTS
DEBUSRPG DS    CL4
DEBPRIOR DS    0CL1
DEBECBAD DS    CL4
DEBPROTG DS    0CL1
DEBDEBID DS    0CL1
DEBDCBAD DS    CL4                     DCB ADDRESS
DEBEXSCL DS    0CL1                    EXTENT SIZE SCALE
DEBAPPAD DS    CL4                     IOS APPENDAGE LIST ADDRESS
DEBDVMOD DS    0CL1                    FILE MASK CODE
DEBUCBAD DS    CL4                     UCB ADDRESS
DEBBINUM DS    CL2                     BIN NUMBER (BB)
DEBSTRCC DS    CL2                     STARTING CYLINDER NUMBER
DEBSTRHH DS    CL2                     STARTING TRACK NUMBER
DEBENDCC DS    CL2                     ENDING CYLINDER NUMBER
DEBENDHH DS    CL2                     ENDING TRACK NUMBER
DEBNMTRK DS    CL2                     NO. OF TRACKS IN THIS EXTENT
DEBSUBID EQU   0         SUBROUTINE ID'S
         END
