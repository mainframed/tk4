         TITLE 'CREATE BDAM(SPANNED RECORD) - IGG0199L'
IGG0199L CSECT
*                                                                     *
*MODULE NAME - IGG0199L                                               *
*                                                                     *
*DESCRIPTIVE NAME - BDAM CREATE OPEN EXECUTOR FOR SPANNED RECORDS     *
*                                                                     *
*COPYRIGHT - NONE                                                     *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*                                                                     *
*          RELEASE 20 CHANGES/DELETIONS
*0150472000                                                      A37858
*0150                                                            M1157
*0150199000,240000-243000                                        S20201
*          RELEASE 21 CHANGES/DELETIONS
*          RELEASE VS2-2 CHANGES/DELETIONS
*192800,265600-265800,415700-419900,421300                       Y02072
*          RELEASE VS2-3 CHANGES/DELETIONS
*                                                              @Z30TSMI
*
*STATUS CHANGE LEVEL 004
*
*   THIS MODULE IS ADDED AT RELEASE 19 BY SPLIT OF IGG0191L
*
*FUNCTION - THIS ROUTINE IS GIVEN CONTROL AFTER THE DEB AND IOB HAVE
*           BEEN CONSTRUCTED.
*           1. IT CONSTRUCT CHANNEL PROGRAMS
*           2. FOR RECFM=VS AND BFTEK=R,IT OBTAINS SEGMENT WORK AREA
*              IF NECESSARY AND CREATES RB FOR ASYNCHRONOUS EXIT RTN.
*              (AN AUDIT TRAIL BIT IS SET TO INDICATE CORE WAS
*              OBTAINED FOR A SWA. THIS BIT WILL BE INTERROGATED
*              BY THE FORCE CLOSE EXECUTOR, SHOULD AN ABEND OCCUR
*              DURING OPEN PROCESSING.  ANOTHER BIT WILL BE SET
*              AFTER THE DCB HAS BEEN COPIED BACK INTO USER CORE.
*              IF THIS BIT IS ON THE FORCE CLOSE EXECUTOR WILL GIVE
*              CONTROL TO THE NORMAL CLOSE EXECUTORS.)
*
*ENTRY POINT - ENTERED FROM IGG0191L WHEN MACRF=WL AND NO TRACK OVER-
*              FLOW IS SPECIFIED.
*
*INPUT - REGISTERS 5,6,7,8 HAVE BEEN POSITIONED AS FOLLOWS,
*           5 - BEGINNING OF THE OPEN PARM LIST
*           6 - BEGINNING OF THE WTG
*           7 - CURRENT ENTRY IN THE PARM LIST
*           8 - CURRENT ENTRY IN THE WTG TABLE
*
*OUTPUT - THE CHANNEL PROGRAMS WILL BE CONSTRUCTED.
*         FOR THE DCB WITH RECFM=VS AND BFTEK=R,RB FOR ASYNCHRONOUS
*         EXIT ROUTINE IS CREATED.
*
*EXTERNAL ROUTINES - NONE
*
*EXIT - TO THE LAST LOAD OF COMMON OPEN, IGG0190S.
*
*TABLES/WORK AREA - 1. OPEN WORK AREA (SEE EXPANSION OF IECDSECT MACRO
*                      EXPANSION)
*                   2. DIRECT ACCESS DEVICE TABLE
*
*ATTRIBUTES - THIS ROUTINE RESIDES IN LPALIB. IT IS REENTRANT,
*             ENABLED, AND RUNS IN SUPERVISOR MODE. IT RUNS IN
*             DATA MANAGEMENT KEY DURING ALL EXECUTION BUT THE
*             FURTHER INITIALIZATION OF IOBS AND CHANNEL PROGRAMS AND
*             GETMAIN AND INITIALIZATION OF SWAS, WHERE A MODESET IS
*             ISSUED TO PROCESS IN USER KEY.
*
*NOTES -
*
*
***********************************************************************
         EJECT
***********************************************************************
*
*   REGISTER CONVENTION
*
***********************************************************************
*
RE       EQU   0                   WORK/PARAMETER REGISTER
R0       EQU   0                   SAVE REG FOR IECRES           Y02072
RF       EQU   1                   WORK/PARAMETER REGISTER
RDCB     EQU   2                   DCB ADDRESS
RBASE    EQU   3                   BASE FOR THIS MODULE
RCORE    EQU   4                   WORK AREA ADDRESS
RPAR     EQU   5                   POINTER TO THE PARAMETER LIST
RWTG     EQU   6                   POINTER TO W-T-G TABLE
RPARC    EQU   7                   CURRENT ENTRY IN PARAMETER LIST
RWTGC    EQU   8                   CURRENT ENTRY IN W-T-G TABLE
RTIOT    EQU   9                   TIOT ADDRESS
RIOB     EQU   9                   IOB REGISTER
RUCB     EQU   10                  UCB ADDRESS
RDEB     EQU   11                  DEB ADDRESS
RB       EQU   12                  WORK REGISTER
RC       EQU   13                  WORK REGISTER
RD       EQU   14                  WORK REGISTER
R14      EQU   14                  SAVE REG FOR IECRES           Y02072
RJ       EQU   15                  WORK/PARAMETER REGISTER
*
*
***********************************************************************
*
*   EQUATES
*
***********************************************************************
*
NULL     EQU   0                   CONSTANT '0'
ONE      EQU   1                   CONSTANT '1'
FIRST    EQU   1                   CONSTANT '1'
TWO      EQU   2                   CONSTANT '2'
THREE    EQU   3                   CONSTANT '3'
FOUR     EQU   4                   CONSTANT '4'
FIVE     EQU   5                   CONSTANT '5'
SIX      EQU   6                   CONSTANT '6'
SEVEN    EQU   7                   CONSTANT '7'
EIGHT    EQU   8                   CONSTANT '8'
NINE     EQU   9                   CONSTANT '9'
TEN      EQU   10                  CONSTANT '10'
MSK14    EQU   14                  CONSTANT '14'
MSK16    EQU   16                  CONSTANT '16'
MSK20    EQU   20                  CONSTANT '20'
MSK22    EQU   22                  CONSTANT '22'
MSK23    EQU   23                  CONSTANT '23'
MSK24    EQU   24                  CONSTANT '24'
MSK32    EQU   32                  CONSTANT '32'
WRITOFFS EQU   96                  OFFSET TO WRITE CCW
*
WGOFF    EQU   8                   OFFSET OF ENTRIES IN WTG TABLE
PAROFF   EQU   4                   OFFSET OF ENTRIES IN PARM LIST
ASYNCAD  EQU   8                   OFFSET IN 19BR TO ADDR        Y02072
*                                  OF ASI ROUTINE                Y02072
ERSOP    EQU   X'11'               ERASE OP-CODE
ERSFLG   EQU   X'20'               SUPPRESS INCORRECT LENGTH
ERSCNT   EQU   X'08'               COUNT OF 8
*
YES      EQU   8                   CONDITION CODE FOR  'BCR 8,X'
*
*
SCHIDEQ  EQU   X'31'               CCW=SRCH ID EQ
WRTCKD   EQU   X'1D'               CCW=WRITE C/K/D
DCHN     EQU   X'80'               DATA CHAIN FLAG
RDKD     EQU   X'0E'               CCW=READ K/D
CCHN     EQU   X'40'               COMMAND CHAIN FLAG
WRTD     EQU   X'05'               CCW=WRITE DATA
READD    EQU   X'06'               CCW=READ DATA
SILI     EQU   X'20'               SILI FLAG
SKIP     EQU   X'10'               SKIP FLAG
*
WRTBIT   EQU   X'40'               WRITE TYPE OPERATION
*
VORU     EQU   X'40'               DCBRECFM=V/U
FORU     EQU   X'80'               RECFM=F/U
SPANNING EQU   X'08'               RECFM=S
SOFTTRK  EQU   X'20'               BFTEK=R
WRTCHK   EQU   X'80'               DCBOPTCD=WRITE CHECK
SAMEREC  EQU   X'01'               COBOL HAS PROVIDED WITH S-W-A
HIARCHY  EQU   X'80'               DCBBFTEK=HIARCHY
MSKCB    EQU   12                  LENGTH OF SWA C.B.
*
*
***********************************************************************
*
*   REGISTER INITIALIZATION
*
***********************************************************************
*
         USING GOGOGO,RBASE        ESTABLISH BASE REGISTER
         USING DEBBASIC,RDEB       ESTABLISH DEB REGISTER        Y02072
         USING IHADCB,RDCB         ESTABLISH DCB REGISTER
         USING IOBBSAMN,RIOB       ESTABLISH IOB BASE            Y02072
         USING FORCORE,RCORE                                     Y01021
         USING WTG,RWTG
         USING WTGENTRY,RWTGC
*
         BALR  RBASE,RE            ESTABLISH BASE REGISTER
*
GOGOGO   EQU   *
*
         L     RDCB,NULL(RPARC)    LOAD DCB ADDRESS
         L     RCORE,FOUR(RWTGC)   LOAD WORK AREA ADDRESS
         L     RDEB,DCBDEBAD       LOAD DEB ADDRESS
*
         L     RIOB,DCBIOBA        LOAD IOB ADDRESS
*
         MODESET   KEYADDR=DXUKEY,WORKREG=13 CHANGE TO USER KEY  Y02072
*
         L     RC,IOBSTART         GET SECTOR ADDRESS            Y02072
*
***********************************************************************
*
*   THE FOLLOWING ROUTINE WILL CONSTRUCT CHANNEL PROGRAMS
*
***********************************************************************
*
         OI    IOBNFLG1,IOBFIRST       MARK FIRST IOB FOR CLOSE  Y02072
*
FILLIOB  EQU   *
         SR    RD,RD                   CLEAR WORK REG            M1157
*
         IC    RD,DCBKEYLE         INSERT KEY LENGTH AND
         STC   RD,IOBDNRCF+FIVE    STORE IT IN NEW REORD COUNT FIELD
         LH    RJ,DCBBLKSI         LOAD BLOCK SIZE AND
         STH   RJ,IOBDNRCF+SIX     NEW RECORD COUNT FIELD
         OI    IOBNFLG1,IOBWRITE   MARK IOB AS A WRITE TYPE      Y02072
         AR    RJ,RD               ADD KL+BLKSIZE AND
         STH   RJ,IOBCCW4+SIX      STORE IT INTO COUNT OF WRITE
         LA    RJ,EIGHT            SET FOR LENGTH 8 FOR R0 AND
         ST    RJ,IOBR0CNT+FOUR    STORE IT IN R0 COUNT
*
         L     RJ,DXUDCBAD              GET USERS DCB PTR IN WKA Y02072
         LA    RJ,0(RJ)                 ZERO TOP BYTE            Y02072
         ST    RJ,IOBDCBPT              STORE ADDRESS IN IOB     Y02072
*
         LA    RJ,IOBCC            LOAD  ADDRESS OF CCHHR AND
         ST    RJ,IOBCCW1          STORE IT AS SRCH ID ARGUMENT
         MVI   IOBCCW1,SCHIDEQ     SET C.C.=SRCH ID EQ
         LA    RJ,IOBCCW1          LOAD ADDRESS OF CCW1 AND
         ST    RJ,IOBCCW2          STORE IT IN TIC CCW
*
         ST    RJ,IOBSTART         START OF CHANNEL PROGRAM
*
         MVC   IOBCCW1+FOUR(FIVE),CCHN5TIC   SET CHN,CNT=5 AND TIC C.C.
*
         SR    RJ,RJ               CLEAR REG
         IC    RJ,DCBKEYLE         INSERT KEYLENGTH
         AH    RJ,DCBBLKSI         ADD BLOCKSIZE
         STH   RJ,IOBCCW2+SIX      SAVE KEYLENGTH +
*                                  BLKSIZE IN TIC
         LA    RJ,IOBDNRCF         LOAD ADDR OF NEW COUNT FIELD AND
         ST    RJ,IOBCCW3          STORE IT IN WRITE CCW
         MVI   IOBCCW3,WRTCKD      SET C.C.=WRITE C/K/D
         MVI   IOBCCW4,WRTCKD      SET C.C.=WRITE C/K/D
         MVI   IOBCCW3+FOUR,DCHN   SET DATA CHAIN FLAG
         MVI   IOBCCW3+SEVEN,EIGHT SET COUNT=8
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATA MGT KEY   Y02072
*
         MVI   DCBOFFSW,WRITOFFS        OFFSET TO WRITE CCW
*
         LA    RB,IOBCCW5               SET UP INDEX FOR REMAINING CCWS
         MVI   DCBOFFSR,NCCWAOFF        ST NON REC REDY, NO      S20201
*                                       WRTCHK                   S20201
*                                       OFFSET POINTER TO CCW10
         MVI   DCBWCPO,NCCW5OFF         PUT NON REC REDY OFFSET  S20201
*                                       PT TO                    S20201
*                                           CCW5 INTO DCBWCPO OF DCB
         TM    JFCBMASK+D6,NONCARN      DO THE STARS INDICATE    S20201
*                                       RPS                      S20201
         BNO   RPS                      YES, GO SET UP PTRS      Y02072
*
         TM    DCBOPTCD,WRTCHK          IS WRT CHK REQUESTED     Y02072
         BO    WTCKCCW2                 BUILD WRT CHK CP         Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15  CHANGE TO USER KEY  Y02072
*
         B     BLDWRTR0                 GO CONSTRUCT R0          Y02072
*
RPS      EQU   *                        SET UP RPS POINTERS      Y02072
         MVI   DCBOFFSW,CCCW5OFF        PUT REC REDY OFFSET PT   S20201
*                                       TO CCW5                  S20201
*                                       INTO DCBOFFSW AREA OF DCB
         MVI   DCBWCPO,CCCW7OFF         PUT OFFSET PT TO CCW7    S20201
*                                       INTO                     S20201
*                                       DCBWCPO IF REC REDY DEVICE
         MVI   DCBOFFSR,CCCWEOFF        ST NO WRTCHK WITH RPS    S20201
*                                         OFFSET POINTER TO CCW14
*                                          POINTER IN DCBOFFSR
*
         MODESET   KEYADDR=DXUKEY,WORKREG=15  CHANGE TO USER KEY Y02072
*
         MVI   IOBCCW4+HALFCCW,CCHN     MOVE IN CHAIN COMMAND    S20201
         MVC   IOBCCW5(CARSHIFT),IOBCCW1 SHIFT FOUR CCWS DOWN 32 S20201
*                                         BYTES AND THEN BRING THEM
         MVC   IOBCCW2(CARSHIFT),IOBCCW5  BACK TO CCW2. THIS     S20201
*                                       AVOIDS                   S20201
*                                         PROPAGATION.
         XC    IOBCCW6(CARN24),IOBCCW6  ZERO OUT TEMP MOVE       S20201
*                                       LOCATION                 S20201
         ST    RC,IOBCCW1               PUT SECTOR PT IN VACANT  S20201
*                                       DW                       S20201
         LA    RJ,IOBCCW2               GET CORRECT ADDR IF      S20201
*                                       CARNIVAL                 S20201
         ST    RJ,IOBCCW3                 AND ST IT IN THE TIC   S20201
         MVI   IOBCCW3,TICCODE          PUT IN THE TIC OP CODE   S20201
         MVI   IOBCCW1,SETSECT          PUT IN SET SECTOR        S20201
*                                       COMMAND CODE             S20201
         MVC   IOBCCW1+HALFCCW(HALFCCW),CCHNCARN  MOVE STD LAST  S20201
*                                       HALF                     S20201
*                                            OF REC REDY   CCW IN CCW
         ST    RC,CARN8(RE,RB)          PUT POINTER IN RD SECT   S20201
*                                       SET SECT & READ SECT USE Y02072
*                                       SAME ADDRESS             Y02072
         MVI   CARN8(RB),RDSECT         PUT IN READ SECTOR       S20201
*                                       COMMAND                  S20201
         LA    RB,CARN8(RE,RB)          PT TO RD SECT CCW        S20201
         MVI   CNTOFF(RB),ONE           SET COUNT TO ONE         S20201
         LA    RB,CARN8(RE,RB)          SET CCW PTR TO CCW7 IF   S20201
*                                              RPS FEATURE IS PRESENT
WTCKTEST EQU   *                                                 S20201
*
         TM    DCBOPTCD,WRTCHK     TEST IF DCBOPTCD=WRITE CHECK
         BNO   BLDWRTR0            NO,SKIP TO CONSTRUCT WRITE R0
*
*   YES - CONSTRUCT WRITE CHECK CCWS
*
         TM    JFCBMASK+D6,NONCARN      CHECK IF RPS             S20201
         BO    WTCKCCW1                 NO, THEN CONSTRUCT       S20201
*                                       WRTCHK CCWS              S20201
         OI    IOBCCW6+FOUR,CCHN        SET CHAIN TO WRT CHK     S20201
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         MVI   DCBOFFSR,CCCWXOFF        PUT 18TH CCW OFFSET PT   S20201
*                                       INTO                     S20201
*                                         DCBOFFSR IF RPS
         MVI   DCBWCPO,CCCWBOFF         STORE OFFSET TO          S20201
*                                       SCH-ID-EQ                S20201
*                                       IF WRT CHK AND RPS
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15   CHANGE TO USER KEY Y02072
*
         ST    RC,NULL(RE,RB)           PUT IN SECT2 ADDR        S20201
         MVI   NULL(RB),SETSECT         PUT IN SET SECTOR        S20201
*                                       COMMAND                  S20201
         MVC   HALFCCW(HALFCCW,RB),CCHNCARN  PUT IN FLAG/COUNT   S20201
*                                       FIELD                    S20201
         LA    RB,CARN8(RE,RB)          PT TO CCW8               S20201
         B     WRTCCCWS                 BR AROUND NON RPS        S20201
*                                         CODING
WTCKCCW1 EQU   *                                                 S20201
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
WTCKCCW2 EQU   *                        BUILD WRT CHK CHN PGM    Y02072
         MVI   DCBOFFSR,NCCWDOFF        PUT 13TH CCW OFFSET PT   S20201
*                                       INTO                     S20201
*                                       DCBOFFSR OF DCB IF NON-CARNIVAL
         MVI   DCBWCPO,CCCW8OFF         STORE OFFSET TO          S20201
*                                       SCH-ID-EQ IF             S20201
*                                       NO WRT CHK AND RPS
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15   CHANGE TO USER KEY Y02072
*
         OI    IOBCCW4+FOUR,CCHN        SET COMMAND CHAIN TO WRT S20201
*                                       CHK                      S20201
*                                       NON RPS
WRTCCCWS EQU   *                                                 S20201
         LA    RJ,IOBDNRCF              LOAD ADDR OF NEW COUNT   S20201
*                                       FIELD                    S20201
         ST    RJ,NULL(RB)         STORE IOBDNRCF AS SRCH ARGUMENT
         MVI   NULL(RB),SCHIDEQ    SET C.C.=SRCH ID EQ
         ST    RB,EIGHT(RB)        STORE CCW5 AS TIC ADDR
*
         MVC   FOUR(FIVE,RB),CCHN5TIC   MOVE CHN,CNT AND TIC OP
         MVI   MSK16(RB),RDKD      SET C.C.=READ K/D
         MVI   MSK20(RB),SILI+SKIP SET SILI AND SKIP FLAGS
         MVI   MSK22(RB),FIRST     SET COUNT=1
         LA    RB,MSK24(RB)        INCREMENT INDEX TO NEXT CCW
*
BLDWRTR0 EQU   *
*
*   THIS ROUTINE CONSTRUCT WRITE-R0 CCWS
*
         TM    JFCBMASK+D6,NONCARN      IS IT RPS (REC READY)    S20201
         BO    WRTR0                    NO, THEN GO TO WRITE OUT S20201
*                                       R0                       S20201
         LA    RC,ONE(RE,RC)            PT TO 2ND SECT BYTE      Y02072
*                                       2ND BYTE IS 0 -WRTCHK    Y02072
         ST    RC,NULL(RE,RB)           PUT IN SETSECT COMMAND   S20201
         MVI   NULL(RB),SETSECT         PUT IN SET SECTOR        S20201
*                                       COMMAND                  S20201
         MVC   HALFCCW(HALFCCW,RB),CCHNCARN  PUT IN FLAG/COUNT   S20201
*                                       FIELD                    S20201
         LA    RB,CARN8(RE,RB)          PT TO CCW12 IF RPS       S20201
WRTR0    EQU   *                                                 S20201
         LA    RJ,IOBR0CNT         AD ADDR OF R0 CNT AND
         ST    RJ,NULL(RB)         STORE IT AS SRCH ARGUMENT
         MVI   NULL(RB),SCHIDEQ    SET C.C.=SRCH ID EQ
         ST    RB,EIGHT(RB)        STORE SRCH CCW AS TIC ADDR
         MVC   FOUR(FIVE,RB),CCHN5TIC  MOVE CHN,CNT AND TIC C.C.
*
         LA    RJ,IOBR0DAT         LOAD ADDR OF R0 DATA AND
         ST    RJ,MSK16(RB)        STORE IT AS WRITE R0 DATA
         MVI   MSK16(RB),WRTD      SET C.C.=WRITE DATA
         MVI   MSK23(RB),EIGHT     SET COUNT=8
*
         TM    DCBOPTCD,WRTCHK     TEST IF DCBOPTCD=WRITE CHECK
         BO    BLDCHKR0            YES,GOTO CONSTRUCT WRITE CHECK
*
*   NO - THEN TEST RECFM=F OR RECFM=V/U
*        F - SKIP WRITE CHECK R0
*        V/U - CONSTRUCT WRITE CHECK R0
*
         TM    DCBRECFM,VORU       TEST IF RECFM=V/U
         BNO   TSTLOOP             NO, GOTO NEXT IOB CHECK
*
BLDCHKR0 EQU   *
*
*   THIS ROUTINE CONSTRUCTS CHANNEL PROGRAM FOR WRITE CHECK R0
*
         MVI   MSK20(RB),CCHN      SET CCHN FOR WRITE R0
         LR    RJ,RB                    SAVE POINTER TO SCH CCW  S20201
         TM    JFCBMASK+D6,NONCARN      IS IT THE CREEPING RPS   S20201
         BO    WRTCHKR0                 NO, THEN GO TO WRTCH R0  S20201
*                                       RTN                      S20201
         ST    RC,CARN24(RE,RB)         ST SECT1 ADDR IN RPS     Y02072
*                                       RD & SET SECT USE 1 BYTE Y02072
         MVI   CARN24(RB),SETSECT       PUT IN COMMAND CODE      S20201
         MVC   CARN28(HALFCCW,RB),CCHNCARN  PUT IN FLAG/COUNT    S20201
*                                       WORD                     S20201
         LA    RB,CARN8(RE,RB)          UPDATE CCW PTR           S20201
WRTCHKR0 EQU   *                                                 S20201
         LA    RE,MSK24(RB)             LOAD ADDR OF SCH CCW AND S20201
         ST    RE,MSK32(RB)             STORE IT AS TIC ADDRESS  S20201
         MVC   MSK24(NINE,RB),NULL(RJ)  MOVE SCH R0 CCW AND TIC  S20201
*                                       C.C.                     S20201
         LR    RB,RE                    INCREMENT INDEX BY THREE S20201
*                                       CCWS                     S20201
         MVI   MSK16(RB),READD     GET C.C.=READ DATA
         MVI   MSK20(RB),SILI+SKIP SET SILI AND SKIP FLAGS
         MVI   MSK23(RB),FIRST     SET LENGTH=1
         LA    RB,MSK24(RB)        INCREMENT INDEX TO LAST CCW
*
         TM    DCBRECFM,VORU       IF RECM=V/U
         BNO   TSTLOOP             NO,GOTO TEST NEXT IOB
*
*   THIS ROUTINE CONSTRUCTS ERASE CHANNEL PROGRAM
*
         ST    RB,NULL(RB)         STORE DUMMY ADDRESS IN ERASE CCW
         MVI   NULL(RB),ERSOP      SET C.C.=ERASE
         MVI   FOUR(RB),ERSFLG     SET SILI FLAG
         MVI   SEVEN(RB),ERSCNT    SET COUNT OF '8'
*
TSTLOOP  EQU   *
*
*   IF THERE IS ANY IOB LEFT, REPEAT,ELSE CHECK IF RECFM=V AND BFTEK=R
*      YES - GOTO VS ROUTINE
*      NO  - XCTL TO THE LAST LOAD OF OPEN
*
         L     RIOB,IOBNIOBA            LOAD NEXT IOB ADDRESS    Y02072
         BCTR  RC,NULL                  PT BACK TO ORIGINAL      S20201
*                                       SECTOR (RD AND SET)      Y02072
         TM    IOBNFLG1,IOBFIRST        IS NEXT IOB THE FIRST    Y02072
         BNO   FILLIOB             NO,REPEAT TO CONSTRUCT ANOTHER CCWS
*
         TM    DCBBFTEK,SOFTTRK         TEST IF BFTEK=R
         BO    VSPAN                    YES, BR TO SET UP SWA    Y02072
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         B     SCAN                     NO, GO TO XCTL RTN       Y02072
*
***********************************************************************
*
*   WHEN BFTEK=R IS SPECIFIED,
*       1. OBTAIN SEGMENT WORK AREA
*       2. CREATE IRB FOR ASYNCHRONOUS EXIT ROUTINE
*
***********************************************************************
*
*   1. CONSTRUCTION OF SEGMENT WORK AREA POOL.
*
*      THE SEGMENT WORK AREA IS CONSTRUCTED IF BIT 7 OF DCBMACRF IS NOT
*      SPECIFIED. THE ADDRESS OF SEGMENT WORK AREA CONTROL BLOCK WILL
*      BE PLACED IN DCBEOBW.THE FORMATS OF THE SEGMENT WORK AREA
*      CONTROL BLOCK AND A SEGMENT WORK AREA ARE SHOWN AS DSECTS.
*      THE NO. OF SEGMENT WORK AREA IS DETERMINED BY DCBNCP AND ITS
*      LENGTH IS DETERMINED BY SMALLER OF THE TRACK SIZE OR BLKSIZE
*      THIS ROUTINE IS ENTERED IN USER KEY.
*
***********************************************************************
*
VSPAN    EQU   *                        SET UP SEG WORK AREAS    Y02072
         TM    DCBMACRF+ONE,SAMEREC  TEST IF SEG WORK AREA BEEN GIVEN
         BO    CHAINSWA            YES,SKIP S.W.A. CONSTRUCTION
*
*   NO - OBTAIN NCP
*
         SR    RJ,RJ               RESET REGISTER
         IC    RJ,DCBNCP           INSERT NCP FROM DCB
*
         L     RD,DCBDVTBL         LOAD DEVICE CHARACTERISTIC TABLE
         USING DVCT,RD             ESTABLISH BASE FOR DEVICE TAB Y02072
*
         LH    RD,DVCTRKLN         LOAD TRACK LENGTH
         DROP  RD                  DROP DASD BASE
*
         SR    RE,RE               RESET REGISTER
         IC    RE,DCBKEYLE         INSERT KEYLENGTH
         AH    RE,DCBBLKSI         LENGTH=KEYLEN+BLKSIZE
*
         CR    RD,RE               TEST IF TRACK SIZE EXCEEDS BLKSIZE
         BNH   CALCORE             NO,GOTO CALCULATE SEG WORK AREA SIZE
*
         LR    RD,RE               LOAD BLKSIZE
*
CALCORE  EQU   *
*
*   CALCULATE SEGMENT WORK AREA SIZE
*      NCP * SMALLER OF (BLKSIZE OR TRACK SIZE + 10) + 8
*
         AH    RD,CONST10          ADD '10' FOR CONTROL INFORMATION
*
         LA    RD,THREE(RD)        ADJUST TO FULL WORD
         SRL   RD,TWO              THEN ROUND IT TO FULL WORD
         SLL   RD,TWO              BACK TO FULL WORD MULTIPLE
*
         STH   RD,IOBFLAG3         STORE LENGTH INTO IOB FOR     Y02072
         MH    RJ,IOBFLAG3         TEMPORARY MULTIPLY            Y02072
         LA    RJ,MSKCB(RJ)        ADD LENGTH OF CONTROL BLOCK
*
         GETMAIN R,LV=(15),SP=0         GET CORE FROM SP0        Y02072
*
*
*   INITIALIZE SEG. WORK AREA
*
         USING SWACB,RF            ESTABLISH BASE FOR SWA CONTROL BLOCK
*
         XC    SWACBPTR(MSKCB),SWACBPTR  CLEAR SWA CONTROL BLOCK
         MVC   SWACBNO+ONE(ONE),DCBNCP  MOVE NO. OF SWA
         MVC   SWACBLNG,IOBFLAG3        MOVE LENGTH OF SWA       Y02072
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         ST    RF,DCBEOBW               STORE ADDR OF SWA IN DCBEOBW
         OI    DXATEXC1,FCAOSWA         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING SWA GOTTEN    Y02072
*
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15  CHANGE TO USER KEY  Y02072
*
         LA    RD,MSKCB(RF)             OBTAIN 1ST SWA ADDR
         ST    RD,SWACBPTR              SET 1ST SWA ADDR PTR
*
         LH    RJ,SWACBNO          INSERT NO. OF SWA
         LH    RF,SWACBLNG         LOAD SEG WORK AREA LENGTH
         B     LASTSWA             GOTO CHECK SEGMENT WORK AREA
*
         USING SWA,RD              ESTABLISH BASE FOR S.W.A.     Y02072
*
REPEAT   EQU   *
*
*   LINK ALL SEGMENT WORK AREA
*
         LA    RE,NULL(RF,RD)      LOAD NEXT SWA ADDR
         ST    RE,SWANXTPT         STORE NEXT SWA ADDR IN SWA    Y02072
         XC    SWARCDPT,SWARCDPT   CLEAR THE CONTROL FIELD       Y02072
         LR    RD,RE               POINT TO NEXT SWA
*
*
LASTSWA  EQU   *
*
         BCT   RJ,REPEAT           GOTO LINK NEXT SEG. WORK AREA
*
         XC    SWA(SWACSLNG),SWA     RESET POINTER TO '0'        Y02072
*
CHAINSWA EQU   *
*
*   TIE S.W.A. TO I/O AREA OF IOBS
*
         L     RD,DCBEOBW          LOAD S.W.A.CB ADDR
         XC    EIGHT(FOUR,RD),EIGHT(RD) CLEAR TT FIELDS
         L     RD,NULL(RD)         LOAD FIRST SWA ADDR
*
LOOPSWA  EQU   *
*
         LA    RC,SWASEGMT         GET ADDR OF DATA PART OF SWA  Y02072
         TM    JFCBMASK+D6,NONCARN      IS IT THE RPS MONSTER    S20201
         BO    NOCARN1                  IF NOT BRANCH OUT        S20201
         ST    RC,IOBCCW5               SET DATA ADDR TO SWA FOR S20201
*                                       CARN                     S20201
         MVI   IOBCCW5,WRTCKD           IMPLACE THE OF CODE      S20201
         B     NEXTIOB                  LOOK FOR NEXT IOB        S20201
NOCARN1  EQU   *                                                 S20201
         ST    RC,IOBCCW4          SET DATA ADDR TO S.W.A.
         MVI   IOBCCW4,WRTCKD      SET C.C.=WRITE-C/K/D
NEXTIOB EQU *                                                    S20201
*
         L     RIOB,IOBNIOBA       LINK TO THE NEXT IOB          Y02072
         L     RD,SWANXTPT         LOAD NEXT S.W.A. ADDR         Y02072
*
         TM    IOBNFLG1,IOBFIRST   TEST IF THIS IS THE FIRST IOB Y02072
         BO    CRIRB               YES,END LOOP AND GOTO CRIRB ROUTINE
*
         B     LOOPSWA             GOTO TIE NEXT SWA AND CCW
*
***********************************************************************
*
CRIRB    EQU   *
*
***********************************************************************
*
*   CREATE IRB FOR ASYNCHRONOUS EXIT ROUTINE
*        THE ROUTINE IS A PART OF WRITE AND IT'S ADDRESS IS
*        STORED IN THE +8 OF WRITE ROUTINE
*
***********************************************************************
*
CIRB     EQU   *                                                 M4893
         L     RJ,DCBWRITE              LOAD ADDR OF VS WR(19BR) Y02072
         L     RE,ASYNCAD(RJ)           LOAD ADDR OF ASI IN 19BR Y02072
*
         CIRB  EP=(0),KEY=PP,MODE=PP,STAB=(RE)                   Y02072
*
*
         MODESET  EXTKEY=DATAMGT       CHANGE TO DATAMGT KEY     Y02072
*
         IC    RJ,DEBOFLGS         SAVE DEBOFLGS
         ST    RF,DEBIRBAD         STORE IRB ADDR IN DEB
         STC   RJ,DEBIRBAD         RESTORE DEBOFLGS INTO
*
***********************************************************************
*
*   THIS ROUTINE DETERMINES DCB PARM LIST AND WHERE-TO-GO NEXT.
*   THE NEXT ROUTINE FOR THIS DCB IS ALWAYS THE COMMON OPEN
*   MODULE, IGG0190S
*
***********************************************************************
SCAN     EQU   *
         MVC   DEBDCBB,DXUDCBAD+1       REPLACE DCB COPY ADDR    Y02072
*                                       WITH USER DCB IN DEB     Y02072
*
*  ISSUE A MACRO WHICH CALLS AN EXTERNAL ROUTINE TO COPY THE
*  PROTECTED DCB INTO THE USER'S DCB CORE.
*
*
*
         IECRES  INIT,DCBCOPY=FRWKAR,STM=(R0,R14,WTGPREFX)       Y02072
*
         OI    DXATEXC1,FCAOCOPY        SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING DCB COPIED    Y02072
         MVI   NULL(RWTGC),NULL         SET THIS DCB COMPLETE    Y02072
*
SCAN4EQ  EQU   *
*
         LA    RWTGC,WGOFF(RWTGC)  INCREMENT W-T-G INDEX AND
         LA    RPARC,PAROFF(RPARC) PARAMETER LIST INDEX
         CLC   NULL(TWO,RWTGC),AMIDCNST IS THIS EXECUTOR NEEDED AGAIN
         BCR   YES,RBASE           YES,RETURN TO STARTING POINT
         CLC   NULL(TWO,RWTGC),OPIDCNST IS THIS END OF W-T-G TABLE
         BNE   SCAN4EQ             NO,CONTINUE SCAN
*
*   YES - DETERMINE ANY MORE DCB
*
         LR    RPARC,RPAR          RESET PARM LIST INDEX AND
         LA    RWTGC,MSK32(RWTG)   W-T-G INDEX TO ENTRY ONE
*
SCAN4ANY EQU   *
*
         CLI   NULL(RWTGC),NULL    IS THIS DCB COMPLETE
         BNE   XCTLRTN             NO,XCTL TO NAMED EXECUTOR
*
         LA    RWTGC,WGOFF(RWTGC)  YES,INCREMENT CURRENT ENTRY REG.
         LA    RPARC,PAROFF(RPARC) INCREMENT CURRENT PARM LIST REG.
         B     SCAN4ANY            REPEAT SCAN
*
XCTLRTN  EQU   *
*
*   XCTL TO NEXT EXECUTOR
*
         IECRES LOAD,PREFIX=WTGPREFX,BRANCH=DIRECT,            @Z30TSMI*
               MODID=WTGENTRY           GO TO NEXT MODULE      @Z30TSMI
*
*
*
* ROTATIONAL POSITION SENSING EQUATES
*
*
HALFCCW  EQU   4                        SIZE OF A HALF CCW       S20201
D6       EQU   6                        OFFSET IN JFCB FOR RPS   S20201
CNTOFF   EQU   7                        OFFSET TO COUNT IN CCW   S20201
CARN8    EQU   8                        FOR UPDATING CCW         S20201
*                                       POINTERS                 S20201
CARN24   EQU   24                       TO POINT ACROSS THREE    S20201
*                                       CCWS                     S20201
CARN28   EQU   28                       TO POINT ACROSS 3.5 CCWS S20201
CARN80   EQU   80                       IOB OFFSET WITH SECTOR   S20201
*                                       ADDR                     S20201
NCCW5OFF EQU   104                      NON REC REDY OFFSET PT   S20201
*                                       TO CCW5                  S20201
CCCW5OFF EQU   104                      REC REDY                 S20201
CCCW7OFF EQU   120                      REC REDY OFFSET PT TO    S20201
*                                       CCW7                     S20201
CCCW8OFF EQU   128                      OFFSET TO CCW8           S20201
NCCWAOFF EQU   144                      OFFSET TO CCW10          S20201
CCCWBOFF EQU   152                      OFFSET TO CCW11          S20201
NCCWDOFF EQU   168                      NON REC REDY OFFSET PT   S20201
*                                       TO CCW1                  S20201
CCCWEOFF EQU   176                      REC REDY OFFSET TO CCW14 S20201
CCCWXOFF EQU   208                      REC REDY OFFSET PT TO    S20201
*                                       CCW18                    S20201
*
*
TICCODE  EQU   X'08'                    TIC OP CODE              S20201
NONCARN  EQU   X'20'                    NON REC REDY CHECK       S20201
SETSECT  EQU   X'23'                    SET SECTOR COMMAND CODE  S20201
RDSECT   EQU   X'22'                    READ SECTOR COMMAND CODE S20201
*
CARSHIFT EQU   32                       FIRST FOUR CCWS -NO      S20201
*                                       CARNIVAL                 S20201
*
*
*
*
*         CONSTANTS
*
***********************************************************************
*
CCHNCARN DC    X'40000001'              FLAG/COUNT FIELD         S20201
CCHN5TIC DC    X'4000000508'       COMMAND CHAIN,CNT=5,TIC COM.CODE
*
CONST8   DC    H'8'                CONSTANT = '8'
CONST10  DC    H'10'               CONSTANT = '10'
*
MODID    DC    CL6'IGG019'              MODULE ID                Y02072
AMIDCNST DC    C'9L'                    THIS EXECUTOR'S ID
OPIDCNST DC    C'0S'                    LAST LOAD OF OPEN'S ID
IDNEXT   DC    C'0S'                    NEXT LOAD OF OPEN-ID     Y02072
PATCH    DC    XL((*-IGG0199L)/20)'0'   5% PATCH AREA            Y02072
         EJECT
*
*************** CONTROL BLOCK DEFINITIONS
*
***********************************************************************
         CVT    DSECT=YES                                        Y02072
*
         SPACE 2
***********************************************************************
*
         DCBD  DSORG=(PS),DEVD=(DA)
*
***********************************************************************
         EJECT
         IECDSECS (MAIN,(IOB,NO)),PREFX,WTG,EXPAND=YES           Y02072
FORCORE  DSECT                     WORKAREA DSECT CONTINUED      Y02072
*****    THE FOLLOWING ARE AUDIT TRAIL BITS SET FOR FORCE CLOSE   *****
         IHAFCAUD  ORG=YES                                       Y02072
         EJECT
         IEZIOB                                                  Y02072
***********************************************************************
*   THE FOLLOWING DSECT FORMATS THE BDAM CREATE EXTENSION TO THE IOB  *
***********************************************************************
         ORG   IOBSEEK+8                                         Y02072
IOBDNRCF DS    D         NEW RECORD COUNT FIELD
IOBR0CNT DS    D         COUNT FIELD OF R0
IOBR0DAT DS    D         DATA FIELD OF R0
IOBCCW1  DS    D         FIRST CCW OF CHANNEL PROGRAM
IOBCCW2  DS    D         2ND CCW OF CHANNEL PROGRAM
IOBCCW3  DS    D         3RD CCW OF CHANNEL PROGRAM
IOBCCW4  DS    D         4TH CCW OF CHANNEL PROGRAM
IOBCCW5  DS    D         5TH CCW OF CHANNEL PROGRAM
IOBCCW6  DS    D         6TH CCW OF CHANNEL PROGRAM
IOBCCW7  DS    D         7TH CCW OF CHANNEL PROGRAM
IOBCCW8  DS    D         8TH CCW OF CHANNEL PROGRAM
IOBCCW9  DS    D         9TH CCW OF CHANNEL PROGRAM
IOBCCW10 DS    D         10TH CCW OF CHANNEL PROGRAM
IOBCCW11 DS    D         11TH CCW OF CHANNEL PROGRAM
IOBCCW12 DS    D         12TH CCW OF CHANNEL PROGRAM
IOBCCW13 DS    D         13TH CCW OF CHANNEL PROGRAM
IOBCCW14 DS    D         LAST CCW OF LONGEST CHANNEL PROGRAM
*
***********************************************************************
         EJECT
         IEZDEB                                                  Y02072
         EJECT
         IGGSWA                                                  Y02072
         IHADVCT                                                 Y02072
         END
