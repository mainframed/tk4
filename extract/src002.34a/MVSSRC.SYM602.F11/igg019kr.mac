  TITLE  'IGG019KR-VRE READ/WRITE CHANNEL PROGRAM GENERATOR'
         COPY  LCGASMSW
*
*
*        RELEASE 21 DELETIONS/CHANGES
*                                                               SA53251
*          RELEASE 20 DELETIONS
*D374200                                                         XM6363
*3574004000-006000,014000-025200,268000-270000                   20201
*
*STATUS CHANGE LEVEL 003
*
*FUNCTION/OPERATION- THIS MODULE CONSTRUCTS A CHANNEL PROGRAM TO PER-
*   FORM A READ OR WRITE BY BLOCK ID OR BY BLOCK KEY FOR VRE.
*   THE CCW'S CONSTRUCTED OF CONSTANTS DEFINED IN THIS MODULE AND
*   ADDRESSES RESOLVED AT THE TIME THIS CODE IS EXECUTED.
*
*ENTRY POINT- ENTRY IS TO IGG019KR (BEGIN) FROM FOUNDATION MODULE
*   IGG019KJ BY THE CALLING SEQUENCE           L     EPREG,KEYMODAD
*                                              BR    EPREG
*                                 OR           L     EPREG,IDMODAD
*                                              BR    EPREG
*
*INPUT- THE REGISTERS ARE INPUT AS FOLLOWS,
*   4- DCB ADDRESS
*   5- DECB ADDRESS
*   6- THE ADDRESS OF CCW 1 (CHANNEL PROGRAM START)
*   7- IOB ADDRESS
*  11- BASE ADDRESS OF MODULE IGG019KJ (FOUNDATION MODULE)
*
*OUTPUT- THE REQUIRED CCW'S WILL BE CONSTRUCTED FOLLOWING THE IOB.
*   REGISTER 6 WILL CONTAIN THE ADDRESS OF THE LAST CCW.
*
*EXTERNAL ROUTINE- CONTROL IS PASSED TO 'IGG019KW' IF EXTENDED SEARCH
*   IS SPECIFIED. IF THE REQUEST IS A WRITE AND THE WRITE VALIDITY
*   CHECK OPTION HAS BEEN SPECIFIED, 'IGG019KQ' IS ENTERED TO CONSTRUCT
*   THE VERIFY CCW'S.
*
*EXITS- TO IGG019KJ BY       BR   RETREG  OR BY   BCR   8,RETREG
*       TO IGG019KQ BY       L    VERBASE,VERMODOF(NULL,FDNREG)
*                            BR   VERBASE
*       TO IGG019KW BY       L    EPREG,DKEXSRAD
*                            BR   EPREG
*
*TABLES/WORK AREAS- REFER TO THE DSECTS, BDAM OPTIONS AND TYPES AND
*   CONSTANTS AREA AT THE END OF THIS MODULE.
*
*ATTRIBUTES- THIS MODULE IS REENTERANT AND EXECUTED ENABLED.
*
*NOTE- REGISTER USAGE IN THIS MODULE MUST REMAIN CONSISTENT WITH THE
*   MODULES IGG019KJ, IGG019KQ AND IGG019KW.
*
*
IGG019KR CSECT
*
*
*   REGISTER USAGE
*
*
SCHREG   EQU   1                        REG FOR PARAMETER
SWAREG   EQU   2                        SEGMENT WORK AREA POINTER
DCBREG   EQU   4                        DCB ADDRESS
DECBREG  EQU   5                        DECB ADDRESS
CCWIND   EQU   6                        ADDRESS OF FIRST CCW
IOBREG   EQU   7                        IOB ADDRESS
WKREG1   EQU   8                        GENERAL PURPOSE WORK REGISTER
WKREG2   EQU   9                        GENERAL PURPOSE WORK REGISTER
VERBASE  EQU   10                       BASE REG FOR IGG019KQ
LINKREG  EQU   10                 INTERNAL SUBROUTINE LINKAGE
FDNREG   EQU   11                       BASE FOR THE FOUNDATION MODULE
CCWPTR   EQU   12                       POINTER TO NEXT CCW INSTRUCTION
RETREG   EQU   14                       RETURN TO FOUNDATION MODULE
EPREG    EQU   15                       BASE REGISTER FOR THIS MODULE
*
*
         USING IHADCB,DCBREG            REG 4 IS THE BASE FOR THE DCB
         USING DECBDEF,DECBREG          REG 5 IS THE BASE FOR THE DECB
         USING IOBDEF,IOBREG            REG 7 IS THE BASE FOR THE IOB
         USING IGG019KR,EPREG           REG 15 IS THE BASE FOR THIS MOD
*
*
BEGIN    EQU   *
         B     ENTRY                    BRANCH TO BEGINNING OF CODE
DKEXSRAD DC    V(IGG019KW)              ADDRESS OF KEY-EXTENDED-SEARCH
*                                       MODULE--IGG019KW         Y02072
*
ENTRY    EQU   *
*
*
         LR    SWAREG,IOBREG            FETCH IOB ADDRESS
         SH    SWAREG,FOUR              PREPARE TO GO TO IOB-4
         L     SWAREG,NULL(SWAREG)      FETCH SWA ADDRESS
         LA    SWAREG,SEGAREOF(SWAREG)  ADDRESS OF SEGMENT AREA
         LR    CCWPTR,CCWIND            POINTER TO CCW1
*
*
*
         MVC   IOBDNRCF+BYTE2(BYTE5),IOBSEEK+BYTE3    SAVE FEEDBACK ADR
         MVC   IOBDNRCF+BYTE7(BYTE1),IOBSEEK  SAVE EXTENT NUMBER
         TM    DECTYPE+BYTE1,NEXADIND   CHECK IF NEXT ADDRESS HAS BEEN
*                                       REQUESTED
         BNO   CHEKTYPE                 BRANCH IF NO NEXT ADDR
         TM    DECTYPE+BYTE1,DITYPE     OTHERWISE CHECK IF TYPE=DI
         BO    CHEXSRCH                 BRANCH IF TYPE=DK
         LA    WKREG2,IOBUPLIM+BYTE3    FETCH SEARCH ADDRESS POINTER
         MVC   IOBUPLIM,IOBSEEK         INSERT TRK ADDR OF 1ST SEGMENT
         MVI   IOBUPLIM+BYTE7,NULL      POINT TO CAPACITY RECORD
         ST    WKREG2,ONECCW(CCWIND)    PUT IT IN CCW 2
         LA    WKREG2,IOBDNRCF+BYTE2    OTHERWISE FETCH CAPACITY RCD AD
         LA    CCWIND,FORTHCCW(CCWIND)  GO TO CCW 4
         ST    WKREG2,NULL(CCWIND)      PUT CAPACITY RECORD ADDR THERE
         LA    CCWIND,ONECCW(CCWIND)    SET CHANNEL COMMAND INDEX TO
*                                       CCW 5
         B     CNSTRUCT                 BRANCH TO BUILD CCW 1 TO CCW 4
*
*
CHEXSRCH EQU   *
*
*
         TM    IOBDTYPE,EXSRCH          CHECK IF EXTENDED SEARCH OPTION
*                                       HAS BEEN REQUESTED
         BO    CHEKTYPE                 BRANCH IF YES
         LA    CCWPTR,NINTHCCW(CCWPTR)  OTHERWISE POINT TO CCW 9
         MVI   NULL(CCWPTR),NOP         MOVE IN NOP OP CODE
         MVC   BYTE4(BYTE4,CCWPTR),FCNT1     MOVE IN FLAGS AND COUNT
         LA    WKREG1,ONECCW            ONE CCW INSTRUCTION
         SR    CCWPTR,WKREG1            GO TO CCW 8
         ST    SWAREG,NULL(CCWPTR)      MOVE IN SEGMENT ADDRESS
         LA    WKREG1,TWOCCW            LENGTH OF TWO CCW'S
         SR    CCWPTR,WKREG1            GO TO CCW 6
         LA    WKREG1,IOBSEEK+BYTE3     FETCH SEARCH ADDRESS POINTER
         ST    WKREG1,NULL(CCWPTR)      PUT IT IN CCW 6
         LA    CCWPTR,FIFTHCCW(CCWIND)  GO TO CCW 5
*
*
CNSTRUCT EQU   *
         CLI   IOBDCPND,SETSC           RCD READY USED           20201
         BNE   NOTRRA                   BRANCH IF NO             20201
         L     WKREG1,IOBDCPND          GET SECTOR ADDR          20201
         ST    WKREG1,NULL(CCWPTR)      PUT IN CCW               20201
         MVI   NULL(CCWPTR),SETSC       PUT IN SET SECTOR CMND   20201
         MVI   BYTE4(CCWPTR),CC         CMND CHAIN CCW           20201
         MVI   BYTE7(CCWPTR),BYTE1      SET BYTE COUNT TO ONE    20201
         B     FEATA                    GO AROUND NEXT           20201
NOTRRA   EQU   *                                                 20201
*
*
         MVI   NULL(CCWPTR),NOP         BUILD NO OP CCW
         MVC   BYTE4(BYTE4,CCWPTR),NOPFCNT1   MOVE IN FLAGS AND COUNT
*                                             FOR NOP CCW
FEATA    EQU   *                                                 20201
         LA    CCWPTR,ONECCW(CCWPTR)    GO TO NEXT CCW
         MVI   NULL(CCWPTR),SRCHIDEQ    MOVE IN SEARCH ID EQ OP-CODE
         MVI   BYTE4(CCWPTR),COMCHAIN   SET COMMAND CHAIN FLAG
         LA    WKREG1,NULL(CCWPTR)      FETCH SEARCH ID EQ CCW ADDRESS
         ST    WKREG1,ONECCW(CCWPTR)    STORE IT IN TIC CCW
         MVC   BYTE6(BYTE3,CCWPTR),COUNTTIC  MOVE IN COUNT=5 AND TIC
*                                            OP CODE FOR NEXT CCW
         LA    CCWPTR,TWOCCW(CCWPTR)    GO TO THE NEXT CCW
         MVI   NULL(CCWPTR),READDATA    MOVE IN READ-DATA OP-CODE
         MVC   BYTE4(BYTE4,CCWPTR),FCNT5   MOVE IN FLAGS AND COUNT=5
*
*
CHEKTYPE EQU   *
*
*
         TM    DECTYPE+BYTE1,DITYPE     CHECK IF TYPE=DI
         BO    TYPEDK                   BRANCH IF TYPE=DK
         TM    DECTYPE+BYTE1,READ       CHECK IF READ HAS BEEN REQUEST-
*                                       ED
         BO    READDI                   BRANCH IF YES
         MVI   NULL(CCWIND),NOP         OTHERWISE BUILD NO OP CCW FOR
*                                       WRITE TYPE D1
         MVC   BYTE4(BYTE4,CCWIND),NOPFCNT1   MOVE IN FLAGS AND COUNT
*                                             FOR NOP CCW
         LA    CCWIND,ONECCW(CCWIND)    INCREMENT TO NEXT CCW
         LR    SCHREG,CCWIND            SAVE SEARCH ID EQ CCW POINTER
*
*
READDI   EQU   *
*
*
         LA    WKREG1,IOBSEEK+BYTE3     FETCH CCHHR ADDRESS
         ST    WKREG1,NULL(CCWIND)      PUT IT IN SEARCH ID EQ CCW
         MVI   NULL(CCWIND),SRCHIDEQ    MOVE IN SEARCH ID EQ OP-CODE
         LA    WKREG1,NULL(CCWIND)      FETCH SEARCH ID EQ CCW ADDRESS
         ST    WKREG1,ONECCW(CCWIND)    PUT SEARCH ID EQ CCW ADR IN TIC
         MVC   BYTE4(BYTE5,CCWIND),FLCNTIC  MOVE FLAGS,COUNT,TIC OPCODE
         LA    CCWIND,TWOCCW(CCWIND)    INCREMENT TO NEXT CCW
         TM    DECTYPE+BYTE1,READ       CHECK IF IT IS READ TYPE DI
         BNO   BUIWRDI                  BRANCH IF IT IS WRITE TYPE DI
         TM    DECTYPE,FEEDB            CHECK IF FEEDBACK IS REQUESTED
         BZ    AFTFEEDB                 BRANCH IF NOT REQUESTED
         TM    DCBOPTCD,FEEDB           CHECK IF RELATIVE FEEDBACK IS
*                                       REQUESTED
         BO    AFTFEEDB                 BRANCH IF YES
         L     WKREG1,DECRECPT          ELSE GET FEEDBACK ADDRESS
         MVC   NULL(BYTE8,WKREG1),IOBSEEK   SUPPLY ABSOLUTE FEEDBACK
*
*
AFTFEEDB EQU   *
*
*
         CLI   DCBKEYLE,NULL            OTHERWISE CHECK FOR KEYED RCD
         BE    BUIRDATA                 BRANCH IF NOT KEYED RECORD
         TM    DECTYPE+BYTE1,SKEY      IS KEY TO BE READ INTO    XM6363
*                                      DYNAMIC BUFFER?
         BNO   CHKEYAD                 NO, CHK IF ADDR IN DECB  SA53251
         B     READKEY                 YES, BUILD CHAN PGM FOR  SA53251
*                                      READING KEY AND DATA
CHKEYAD  EQU   *                                                SA53251
         L     WKREG1,DECKYADR          ELSE FETCH KEY ADDRESS
         LTR   WKREG1,WKREG1            CHECK IF DECKYADR=0
         BE    BUIRDATA                 BRANCH IF NO KEY ADDRESS
READKEY  EQU   *                                                SA53251
         MVI   NULL(CCWIND),READKYDA    MOVE IN READ KEY DATA OP-CODE
         MVC   BYTE1(BYTE3,CCWIND),DECKYADR+BYTE1  MOVE IN KEY ADDRESS
         MVI   BYTE4(CCWIND),DACHGAP    MOVE IN FLAGS FOR COMMAND CHAIN
*                                       BETWEEN GAPS OF A RECORD
         MVC   BYTE7(BYTE1,CCWIND),DCBKEYLE  MOVE KEY LENGTH AS COUNT
         LA    CCWIND,ONECCW(CCWIND)    INCREMENT TO NEXT CCW
*
*
BUIRDATA EQU   *
*
*
         ST    SWAREG,NULL(CCWIND)      MOVE IN SEGMENT ADDRESS
         MVI   NULL(CCWIND),READDATA    MOVE IN READ-DATA OP CODE
         XC    BYTE4(BYTE2,CCWIND),BYTE4(CCWIND)      ZERO FLAG BYTES
         CLI   IOBSEEK+BYTE7,NULL       IS THIS A READ OF R0
         BNE   SETRDILN                 BR IF NO
         TM    DECTYPE+BYTE1,NAS        IS IT NEXT ADDR AND 'S' FOR
*                                       BLOCK LENGTH
         BNO   SETRDILN                 BR IF NO
         MVC   DECLNGTH,CSCNT8+BYTE2    SET LENGTH TO 8
SETRDILN EQU   *
         AIF   ('&LIB' EQ 'LIB1').LIB1AA
         BAL   LINKREG,CALCLNTH   DETERMINE WHETHER CCW COUNT IS
*                                 DECLNGTH OR SWA LENGTH.
         USING CCW,CCWIND
         STH   WKREG2,CCWCOUNT    SET LENGTH IN CCW
         DROP  CCWIND
         AGO   .LIB1AB
.LIB1AA  ANOP
         MVC   BYTE6(BYTE2,CCWIND),DECLNGTH  MOVE DATA LENGTH AS COUNT
.LIB1AB  ANOP
         BR    RETREG                   RETURN CONTROL TO IGG019KJ
*
*
BUIWRDI  EQU   *
*
*
         ST    SWAREG,NULL(CCWIND)      MOVE IN SEGMENT ADDRESS
         MVI   NULL(CCWIND),READDATA    MOVE IN READ-DATA OP CODE
         MVC   BYTE4(BYTE4,CCWIND),FCNT8     MOVE IN FLAGS AND COUNT
         CLI   DCBKEYLE,NULL            CHECK IF DCBKEYLE=0
         BE    VERIWRI                  BRANCH IF YES
         L     WKREG1,DECKYADR          FETCH KEY ADDRESS
         LTR   WKREG1,WKREG1            CHECK IF DECKYADR=0
         BE    VERIWRI                  BRANCH IF YES
         LA    CCWIND,ONECCW(CCWIND)    INCREMENT TO NEXT CCW
         ST    SWAREG,NULL(CCWIND)      MOVE IN SEGMENT ADDRESS
         MVI   NULL(CCWIND),WRITDATA    MOVE IN WRITE-DATA OP CODE
         MVC   BYTE6(BYTE2,CCWIND),DECLNGTH  MOVE DATA LENGTH AS COUNT
         B     VERIWRI                  GO TO CHECK WRITE-VALIDITY-
*                                       CHECK OPTION
*
*
TYPEDK   EQU   *
*
*
         ST    CCWIND,TWOCCW(CCWIND)    PUT CCW 1 ADDRESS IN TIC CCW
         LA    WKREG2,IOBDNRCF+BYTE2    ADDRESS OF CCHHR FOR FEEDBACK
         ST    WKREG2,NULL(CCWIND)      PUT IT IN READ-COUNT CCW
         MVI   NULL(CCWIND),READCNT     MOVE IN READ-COUNT OP CODE
         MVC   BYTE4(BYTE4,CCWIND),FCNT5     MOVE IN FLAGS AND COUNT
         MVC   ONECCW(BYTE4,CCWIND),DECKYADR PUT KEY ADDR IN NEXT CCW
         MVI   ONECCW(CCWIND),SRCHKYEQ  MOVE IN SEARCH KEY EQ OP CODE
         MVI   BYTE12(CCWIND),COMSUPLN  MOVE IN FLAGS
         MVC   BYTE15(BYTE1,CCWIND),DCBKEYLE MOVE IN KEY LENGTH
         MVI   TWOCCW(CCWIND),TIC       MOVE IN TIC OP CODE
         ST    SWAREG,FORTHCCW(CCWIND)  MOVE IN SEGMENT ADDRESS
         MVI   FORTHCCW(CCWIND),READDATA    MOVE IN READ-DATA OP CODE
         TM    DECTYPE+BYTE1,READ       CHECK IF READ HAS BEEN REQUEST-
*                                       ED
         BO    READDK                   BRANCH IF YES
         MVC   BYTE28(BYTE4,CCWIND),CSCNT8  ELSE MOVE IN FLAGS, COUNT
*
         CLI   IOBDCPND,SETSC           RCD READY USED           20201
         BNE   NOTRRC                   BRANCH IF NO             20201
         L     WKREG1,IOBDCPND          GET BASIC SECTOR ADDR    20201
         LA    WKREG1,BYTE1(WKREG1)     INCR BY ONE              20201
         ST    WKREG1,BYTE32(CCWIND)    PUT IN CCW               20201
         MVI   BYTE32(CCWIND),RDSC      RD SECTOR CCW CMND       20201
         MVI   BYTE39(CCWIND),BYTE1     SET BYTE CNT TO ONE      20201
         B     FEATC                    GO AROUND NEXT           20201
NOTRRC   EQU   *                                                 20201
*
         MVI   BYTE32(CCWIND),NOP       CONSTRUCT NOP CCW
         MVC   BYTE36(BYTE4,CCWIND),FCNT1         MOVE IN FLAGS AND
*                                                 COUNT FOR NOP CCW
FEATC    EQU   *                                                 20201
         TM    IOBDTYPE,EXSRCH          CHECK IF EXTENDED SEARCH OPTION
*                                       HAS BEEN REQUESTED
         BO    DKEXSRCH                 BRANCH IF YES
         LA    CCWIND,FIFTHCCW(CCWIND)  UPDATE CHANNEL COMMAND INDEX
*                                       TO THE LAST CCW
*
*
VERIWRI  EQU   *
*
*
         TM    IOBDTYPE,VERIFY          CHECK IF WRITE-VALIDITY-
*                                       CHECK HAS BEEN REQUESTED
         BCR   EIGHT,RETREG             IF NOT, CHANNEL PROGRAM ENDS
*                                       AND RETURN CONTROL TO IGG019KJ
         TM    DECTYPE+BYTE1,DITYPE     CHECK IF TYPE=DI
         BNO   TOVERMOD                 BRANCH IF TYPE=DI
         LA    WKREG1,IOBSEEK+BYTE3     FETCH SEARCH ADDRESS POINTER
         ST    WKREG1,ONECCW(CCWIND)    PUT IT IN NEXT CCW
         MVI   ONECCW(CCWIND),SRCHIDEQ  MOVE IN SEARCH ID EQ OP CODE
         MVC   BYTE12(BYTE4,CCWIND),CCCNT5  MOVE IN COMMAND CHAIN FLAGS
*                                           AND COUNT OF 5
         LA    SCHREG,ONECCW(CCWIND)    SAVE POINTER TO THIS CCW
*
TOVERMOD EQU   *
*
*
         L     VERBASE,VERMODOF(NULL,FDNREG)  GET ADDRESS OF IGG019KQ
         BR    VERBASE                  GO TO IGG019KQ
*
*
DKEXSRCH EQU   *
*
*
         L     EPREG,DKEXSRAD           LOAD ADDRESS OF IGG019KW
         BR    EPREG                    GO TO KEY-EXTENDED-SEARCH MOD
*
*
READDK   EQU   *
*
*
         AIF   ('&LIB' EQ 'LIB1').LIB1BA
         BAL   LINKREG,CALCLNTH   DETERMINE WHETHER CCW COUNT IS
*                                 DECLNGTH OR SWA LENGTH.
         USING CCW,CCWIND
         STH   WKREG2,CCWCOUNT+FORTHCCW     SET LENGTH IN CCW.
         DROP  CCWIND
         AGO   .LIB1BB
.LIB1BA  ANOP
         MVC   BYTE30(BYTE2,CCWIND),DECLNGTH MOVE DATA LENGTH AS COUNT
*                                            IN CCW4
.LIB1BB  ANOP
         TM    IOBDTYPE,EXSRCH          CHECK IF EXTENDED SEARCH HAS
*                                       BEEN REQUESTED
         BO    DKEXSRCH                 BRANCH IF YES
         TM    DECTYPE+BYTE1,NEXADIND   ELSE CHECK IF NEXT ADDRESS HAS
*                                       BEEN REQUESTED
         BNO   UPDACCW                  BRANCH IF NO NEXT ADDRESS
         LA    CCWIND,NINTHCCW(CCWIND)  ELSE SET CHANNEL COMMAND INDEX
*                                       TO THE LAST CCW
*
*
FINIS    EQU   *
*
*
         BR    RETREG                   RETURN TO IGG019KJ
*
*
UPDACCW  EQU   *
*
*
         LA    CCWIND,FORTHCCW(CCWIND)  SET CHANNEL COMMAND INDEX
*                                       TO THE LAST CCW
         B     FINIS                    GO TO IGG019KJ
*
         AIF   ('&LIB' EQ 'LIB1').LIB1CA
*
*                  SUBROUTINE CALCLNTH DETERMINES THE COUNT-FIELD
*                  OF A READ-DATA CCW.  THIS IS THE SMALLER OF
*                  DECLNGTH AND TRACK LENGTH.
*
*                  INPUT REG:  LINKREG -- RETURN ADDRESS
*                  OUTPUT REG:  WKREG2 -- COUNT
*                               WKREG1 -- USED AS WORK REGISTER
*
CALCLNTH L     WKREG2,DCBDEBAD    GET DEB ADDR FROM DCB
         USING DEBBASIC,WKREG2
         LA    WKREG2,DEBBASND    BUMP TO DIRECT ACCESS SECTION
         USING DEBDASD,WKREG2     DASD SECTION LOACTED HERE
         L     WKREG2,DEBUCBAD    GET UCB ADDRESS FROM DEB
         USING UCB,WKREG2
*
         LA    WKREG1,X'0F'       4 LOW-ORDER BITS OF WORD
         N     WKREG1,UCBTYP      PUT DEVICE CODE IN REG
*
         L     WKREG2,CVTPTR      GET CVT ADDRESS
         USING CVT,WKREG2
         L     WKREG2,CVTZDTAB    GET DEVICE CHAR TABLE ADDR
         DROP  WKREG2
         IC    WKREG1,0(WKREG1,WKREG2) DEVICE CODE SERVES AS
*                                 INDEX TO TABLE ENTRY DISP
         LH    WKREG2,TRKLNGTH(WKREG1,WKREG2)    TRACK LENGTH
*
         CH    WKREG2,DECLNGTH    IS TRACK SIZE GT RECORD LENGTH?
         BCR   12,LINKREG         RETURN IF NO; COUNT IS TRK SIZE
         LH    WKREG2,DECLNGTH    ELSE COUNT IS RECORD LENGTH
         BR    LINKREG            RETURN TO CALLER
*
.LIB1CA  ANOP
*
**********                                                   **********
*
*              BDAM OPTIONS AND TYPES
*
**********                                                   **********
*
*
VERIFY   EQU   X'80'                    MASK FOR WRITE-VALIDITY-CHECK
*                                       OPTION
EXSRCH   EQU   X'20'                    MASK FOR EXTENDED SEARCH OPTION
DITYPE   EQU   X'04'                    MASK FOR BLOCK ID TYPE
READ     EQU   X'08'                    MASK FOR READ REQUEST
NEXADIND EQU   X'10'                    MASK FOR NEXT ADDRESS OPTION
NAS      EQU   X'50'                    MASK FOR NEXT ADDR AND
*                                       'S' CODED FOR BLOCK LENGTH
COMSUPLN EQU   X'60'                    COMMAND CHAIN AND SUPPRESS IN-
*                                       CORRECT LENGTH
SETSC    EQU   X'23'                    SET SECTOR CCW CMND      20201
RDSC     EQU   X'22'                    RD SECTOR CCW CMND       20201
DACHGAP  EQU   X'C0'                    DATA CHAIN BETWEEN GAPS OF RCD
SRCHKYEQ EQU   X'29'                    SEARCH KEY EQ OP CODE
COMCHAIN EQU   X'40'                    DATA AND COMMAND CHAIN FLAGS
SRCHIDEQ EQU   X'31'                    SEARCH ID EQ OP CODE
READKYDA EQU   X'0E'                    READ KEY DATA OP CODE
READDATA EQU   X'06'                    READ DATA OP CODE
READCNT  EQU   X'12'                    READ COUNT OP CODE
WRITDATA EQU   X'05'                    WRITE DATA OP CODE
NOP      EQU   X'03'                    NOP OP CODE
TIC      EQU   X'08'                    TRANSFER IN CHANNEL OP CODE
FEEDB    EQU   X'10'                    MASK FOR RELATIVE FEEDBACK
LO4BITS  EQU   X'0F'              USED TO LOAD REG WITH LO 4 BITS ON
TRKLNGTH EQU   4             DISP OF TRACK LENGTH FIELD IN DEVICE
*                            CHARACTERISTICS TABLE ENTRY
FLCNTIC  DC    X'4000000508'            COMMAND CHAIN FLAG, COUNT AND
*                                       OP CODE
COUNTTIC DC    X'000508'                COUNT AND TIC OP CODE
FCNT5    DC    X'60000005'              COMMAND CHAIN AND SUPPRESS IN-
*                                       CORRECT LENGTH FLAGS AND COUNT
FCNT1    DC    X'20000001'              SUPPRESS INCORRECT LENGTH FLAGS
*                                       AND COUNT
FCNT8    DC    X'20000008'              SUPPRESS INCORRECT LENGTH FLAGS
*                                       AND COUNT
NOPFCNT1 DC    X'60000001'              COMMAND CHAIN AND SUPPRESS
*                                       INCORRECT LENGTH FLAGS AND
*                                       COUNT
CSCNT8   DC    X'60000008'              COMMAND CHAIN AND SUPPRESS IN-
*                                       CORRECT LENGTH FLAGS AND
*                                       COUNT=8
CCCNT5   DC    X'40000005'              COMMAND CHAIN FLAGS AND COUNT=5
*
*
*
**********                                                   **********
*
*              CONSTANTS USED FOR DISPLACEMENT
*
**********                                                   **********
*
FOUR     DC    H'4'                     CONSTANT USED TO GO TO IOB-4
NULL     EQU   0                        NO DISPLACEMENT
BYTE1    EQU   1                        ONE BYTE
BYTE2    EQU   2                        TWO BYTES
BYTE3    EQU   3                        THREE BYTES
BYTE4    EQU   4                        FOUR BYTES
BYTE5    EQU   5                        FIVE BYTES
BYTE6    EQU   6                        SIX BYTES
BYTE7    EQU   7                        SEVEN BYTES
BYTE8    EQU   8                        EIGHT BYTES
EIGHT    EQU   8                        ZERO CONDITION FOR TM
BYTE12   EQU   12                       TWELVE BYTES
BYTE15   EQU   15                       FIFTEEN BYTES
BYTE28   EQU   28                       TWENTY-EIGHT BYTES
BYTE30   EQU   30                       THIRTY BYTES
BYTE32   EQU   32                       THIRTY-TWO BYTES
BYTE36   EQU   36                       THIRTY-SIX BYTES
BYTE39   EQU   39                       THIRTY-NINE BYTES        20201
ONECCW   EQU   8                        8 BYTES FOR LENGTH OF ONE CCW
TWOCCW   EQU   16                       LENGTH OF TWO CCW'S
FORTHCCW EQU   24                       LENGTH OF THREE CCW'S
FIFTHCCW EQU   32                       LENGTH OF FOUR CCW'S
NINTHCCW EQU   64                       LENGTH OF EIGHT CCW'S
CHPOFF   EQU   80                       OFFSET IN IOB TO CHP     20201
CC       EQU   X'40'                    CMND CHAIN FLAG          20201
SKEY     EQU   X'80'                   'S' CODED FOR KEY LENGTH SA53251
SEGAREOF EQU   10                       OFFSET TO ADDRESS OF SEGMENT
*                                       AREA IN SWA
VERMODOF EQU   12                       OFFSET TO ADDRESS OF IGG019KQ
*                                       IN IGG019KJ
         CNOP  0,8                      PAD MODULE TO DOUBLE WORD
*
*
*
*
*
*
*
*              DATA CONTROL BLOCK (DCB) DEFINITION
*
*
*
         DCBD  DSORG=DA
*
*
*
*
*
*
*              DATA EVENT CONTROL BLOCK (DECB) DEFINITION
*
*
*
         DS    0F
DECBDEF  DSECT
DECSDECB DS    CL4                      STANDARD ECB
DECTYPE  DS    CL2                      TYPE OF I/O REQUEST AND OPTIONS
DECLNGTH DS    CL2                      DATA LENGTH
DECDCBAD DS    CL4                      ADDRESS OF DCB
DECAREA  DS    CL4                      ADDRESS OF DATA AREA
DECIOPT  DS    CL4                      ADDRESS OF THE IOB
DECKYADR DS    CL4                      ADDRESS OF KEY
DECRECPT DS    CL4                      ADDRESS OF RECORD REFERENCE
*
*
*
*        I/O BLOCK (IOB) DEFINITION
*
*
*
*              STANDARD IOB
*
*
*
         DS    0F
IOBDEF   DSECT
IOBFLAG1 DS    CL1                      STATUS FLAG
IOBFLAG2 DS    CL1                      ERROR FLAG
IOBSENSE DS    CL2                      SENSE BYTES 0 AND 1
IOBECBPT DS    CL4                      ECB POINTER
IOBCSW   DS    0CL8                     CHANNEL STATUS WORD
IOBCSWCA DS    0CL4                     COMMAND ADDRESS
         DS    CL1                      IOS ERROR ROUTINE FLAG BYTE
         DS    CL3                      COMMAND ADDRESS
IOBCSWST DS    CL2                      STATUS BYTES
IOBCSWCT DS    CL2                      REMAINING COUNT
IOBSTART DS    0CL4                     CHANNEL PROGRAM POINTER
IOBSIOCC DS    CL1                      SIO CONDITION CODE
         DS    CL3                      ADDRESS OF CHANNEL PROGRAM
IOBDCBPT DS    0CL4                     DCB POINTER
IOBWGHT  DS    CL1                      CHANNEL WEIGHT
         DS    CL3                      ADDRESS OF DCB
IOBRESTR DS    0CL4                     RESTART POINTER
         DS    CL1                      BYTE FOR I/O ERROR CORRECTION
         DS    CL3                      RESTART POINTER
IOBINCAM DS    CL2                      BLOCK COUNT INCREMENT AMOUNT
IOBERRCT DS    CL2                      ERROR COUNTER
IOBSEEK  DS    CL8                      SEEK ADDRESS
*
*              BDAM EXTENDED IOB
*
IOBDBYTR DS    CL2                      BYTES REMAINING ON TRACK
IOBDIOBS DS    CL2                      SIZE OF THIS IOB
IOBDPLAD DS    0CL4                     IOB POOL LINK ADDRESS
IOBDAVLI DS    CL1                      IOB AVAILABILITY INDICATOR
         DS    CL3                      VARIOUS INDICATORS
IOBDTYPE DS    CL2                      TYPE FIELD
IOBDSTAT DS    CL2                      IOB STATUS
IOBDCPND DS    CL4                      CHANNEL PROGRAM NORMAL END ADDR
IOBDBYTN DS    CL2                      BYTES NEEDED BY NEW RECORD
         DS    CL2                      RESERVED
IOBDQPTR DS    CL4                      LINK FIELD FOR QUEUED IOB'S
IOBUPLIM DS    CL8                      LIMIT MBBCCHHR FOR EXT SEARCH
IOBDNRCF DS    CL8                      COUNT FIELD FOR NEW RECORD
IOBCP    DS    CL200                    CHANNEL PROGRAM AREA
*
         SPACE 3
CCW      DSECT               CHANNEL COMMAND WORD FORMAT
CCWOPCOD DS    C             OP-CODE
CCWADDR  DS    AL3           ADDRESS FOR DATA TRANSFER
CCWFLAGS DS    BL1           FLAGS
         DS    X             UNUSED
CCWCOUNT DS    H             BYTES TO BE TRANSFERRED
CVT      DSECT
         CVT
UCB      DSECT
         IEFUCBOB
         IEZDEB
         END
